Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мСкопирован Экспорт; // хранит признак копирования документа

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)
Перем ТабЗатрат;
Перем ПроводкиНУ;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция возращает параметры ОС
//
Функция ПолучитьПробегАвто( ОбъектОС,  НачДата, КонДата, ПечатьПоДаннымУпрУчета = Истина)
	
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВыработкаОС.ОсновноеСредство КАК ОбъектОС,
	|	ВыработкаОС.ПараметрВыработки,
	|	ВыработкаОС.КоличествоОборот КАК Пробег
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(&КонДата, ОсновноеСредство = &ОС) КАК РегСведенияОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВыработкаОС.Обороты(&НачГраница, &КонГраница, , ОсновноеСредство = &ОС) КАК ВыработкаОС
	|		ПО РегСведенияОС.ОсновноеСредство = ВыработкаОС.ОсновноеСредство И РегСведенияОС.ПараметрВыработки = ВыработкаОС.ПараметрВыработки";
	
	Если НЕ ПечатьПоДаннымУпрУчета тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ПервоначальныеСведенияОС","ПервоначальныеСведенияОСБухгалтерскийУчет");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("КонДата", КонДата);
	Запрос.УстановитьПараметр("НачГраница", Новый Граница(НачДата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонГраница", Новый Граница(КонДата, ВидГраницы.Включая));
	
	Запрос.УстановитьПараметр("ОС", ОбъектОС);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	РезультатЗапроса.Следующий();
	
	Возврат РезультатЗапроса.Пробег;
	
КонецФункции // ПолучитьПробегАвто()

// Функция формирует табличный документ с печатной формой ОС4
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьСписаниеОС(ПечатьПоДаннымУпрУчета = Истина)

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеОС_ОС4";

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СписаниеОС.Номер						  КАК НомерДок,
	|	СписаниеОС.Дата							  КАК ДатаДок,
	|	СписаниеОС.Событие						  КАК Событие,
	|	СписаниеОС.ПричинаСписания 				  КАК ПричинаСписания,
	|	СписаниеОС.Организация   				  КАК Организация,
	|	СписаниеОС.Организация.КодПоОКПО		  КАК КодПоОКПО,
	|	СписаниеОС.Организация.НаименованиеПолное КАК НаимОрганизация
	|ИЗ
	|	Документ.СписаниеОС КАК СписаниеОС
	|
	|ГДЕ
	|	СписаниеОС.Ссылка = &Ссылка";
	СтруктураДока = Запрос.Выполнить().Выбрать();
	СтруктураДока.Следующий();
	
	СведенияОРуководителеГлавбухе = ПолучитьСведенияОРуководителеГлавБухе(СтруктураДока.Организация,СтруктураДока.ДатаДок);
	
	// определимся с переменными, зависящими от типа учета
	НазваниеРегистраПервоначальныхСведений = "ПервоначальныеСведенияОС";
	НазваниеРегистраМестонахождения = "МестонахождениеОС";
	
	Запрос = Новый Запрос();
	
	Если ПечатьПоДаннымУпрУчета тогда
		кВидуУчета			= "управленческому";
		cВидаУчета 	 	  	= "управленческого";
		НазваниеАмортизации = "Амортизация";
		НазваниеАмортизацииЗаМесяц = "АмортизацияЗаМесяц";
		НазваниеСтоимости		   = "Стоимость";	
		ВалютаПечати = Константы.ВалютаУправленческогоУчета.Получить();
		СоединениеПоСчетам = "";
		СтрокиСчетов	   = "";
	Иначе
		кВидуУчета 		 	= "бухгалтерскому";
		cВидаУчета 		 	= "бухгалтерского";
		ВалютаПечати 	 	= Константы.ВалютаРегламентированногоУчета.Получить();
		НазваниеАмортизации = "АмортизацияБУ";
		НазваниеАмортизацииЗаМесяц = "АмортизацияЗаМесяцБУ";
		НазваниеСтоимости		   = "СтоимостьБУ";	
		НазваниеРегистраПервоначальныхСведений = НазваниеРегистраПервоначальныхСведений+"БухгалтерскийУчет";
		НазваниеРегистраМестонахождения        = НазваниеРегистраМестонахождения+"БухгалтерскийУчет";
		СтрокиСчетов	   = "	СчетаБухгалтерскогоУчетаОС.СчетУчета КАК СубСчет,
							  |	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации,";
		СоединениеПоСчетам = "		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&Дата,
							 |Организация = &Организация) КАК СчетаБухгалтерскогоУчетаОС
							 |		ПО СписаниеОСОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОС.ОсновноеСредство";
		Запрос.УстановитьПараметр("Организация",СтруктураДока.Организация);
		Запрос.УстановитьПараметр("Дата",СтруктураДока.ДатаДок);

	КонецЕсли;	

	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СписаниеОСОС.НомерСтроки          КАК НП,
	|	СписаниеОСОС.ОсновноеСредство     КАК ОС,
	|	СписаниеОСОС.ОсновноеСредство.Код КАК ИнвНомерУпр,
	|	СписаниеОСОС.ОсновноеСредство.ЗаводскойНомер     КАК ЗаводскойНомер,
	|	СписаниеОСОС.ОсновноеСредство.Автотранспорт      КАК Автотранспорт,
	|	СписаниеОСОС.ОсновноеСредство.ДатаВыпуска        КАК ГодВыпуска,
	|	СписаниеОСОС.ОсновноеСредство.НаименованиеПолное КАК НаименованиеОС,
	|	СписаниеОСОС.ОсновноеСредство.ГруппаОС           КАК Группа,
	|	СписаниеОСОС."+НазваниеАмортизации+"             КАК НачАмортизация,
	|	СписаниеОСОС."+НазваниеСтоимости+"               КАК Стоимость,
	|	СписаниеОСОС."+НазваниеАмортизацииЗаМесяц+"		 КАК АмортизацияЗаМесяц,
	|	СписаниеОСОС.СписаноНаЗатраты,
	|	"+СтрокиСчетов+"
	|	ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ПервоначальнаяСтоимость КАК НачСтоимость,
	|	МестонахождениеОсновныхСредствСрезПоследних.МОЛ,
	|	МестонахождениеОсновныхСредствСрезПоследних.Местонахождение КАК НаимПодразделение,
	|	МестонахождениеОсновныхСредствСрезПоследних.МОЛ.Код КАК ТабНомерМОЛ
	|ИЗ
	|	Документ.СписаниеОС.ОС КАК СписаниеОСОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений."+НазваниеРегистраПервоначальныхСведений+".СрезПоследних КАК ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних
	|		ПО СписаниеОСОС.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений."+НазваниеРегистраМестонахождения+".СрезПоследних КАК МестонахождениеОсновныхСредствСрезПоследних
	|		ПО СписаниеОСОС.ОсновноеСредство = МестонахождениеОсновныхСредствСрезПоследних.ОсновноеСредство
	|		"+СоединениеПоСчетам+"
	|ГДЕ
	|	СписаниеОСОС.Ссылка = &Ссылка";
	
	РезультатЗапросаПоОС = Запрос.Выполнить();
	
	Если РезультатЗапросаПоОС.Пустой() тогда
		// скорее всего в табличной части документа нет ни строчки
		// или нет записей в регистре
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаОС = РезультатЗапросаПоОС.Выбрать();

	Если ВыборкаОС.Количество() = 1 Тогда

		ВыборкаОС.Следующий();

		Если ВыборкаОС.Автотранспорт Тогда 
			Макет = ПолучитьМакет("ОС4а");
		Иначе
			Макет = ПолучитьМакет("ОС4");
		КонецЕсли;

		Область = Макет.ПолучитьОбласть("Заголовок");
		Область.Параметры.Заполнить(СтруктураДока);
		Область.Параметры.Заполнить(ВыборкаОС);
		Область.Параметры.Заполнить(СведенияОРуководителеГлавбухе);
		Область.Параметры.Валюта 	 = ВалютаПечати;
		Область.Параметры.кВидуУчета = кВидуУчета;
		Область.Параметры.cВидаУчета = cВидаУчета;

		ДокументПринятияКУчету     = "";
		ДокументВводаВЭксплуатацию = "";
		ПринятоКУчету              = "";
		ВведеноВЭксплуатацию       = "";

		// получим состояния ос 
		СтруктПараметров = ПолучитьАтрибутыСостоянияОС(ВыборкаОС.ОС, Перечисления.СостоянияОС.ВведеноВЭксплуатацию,
														ПечатьПоДаннымУпрУчета,СтруктураДока.Организация);
		ДокументВводаВЭксплуатацию = СтруктПараметров["ИмяДок"];
		ВведеноВЭксплуатацию	   = СтруктПараметров["Дата"];

		СтруктПараметров = ПолучитьАтрибутыСостоянияОС(ВыборкаОС.ОС, Перечисления.СостоянияОС.ПринятоКУчету,
														ПечатьПоДаннымУпрУчета,СтруктураДока.Организация);
		ДокументПринятияКУчету  = СтруктПараметров["ИмяДок"];
		ПринятоКУчету		  	= СтруктПараметров["Дата"];
		
		Если ВыборкаОС.Автотранспорт Тогда
			Область.Параметры.ВведеноВЭксплуатацию = ВведеноВЭксплуатацию;
			Если ДокументВводаВЭксплуатацию = Неопределено или ВведеноВЭксплуатацию = Неопределено Тогда
				Область.Параметры.Пробег = ПолучитьПробегАвто(ВыборкаОС.ОС, Дата, Дата, ПечатьПоДаннымУпрУчета);
			Иначе
				Область.Параметры.Пробег = ПолучитьПробегАвто(ВыборкаОС.ОС, ВведеноВЭксплуатацию, Дата, ПечатьПоДаннымУпрУчета);
			КонецЕсли;
		Иначе
			Область.Параметры.СрокЭкспл  = (Дата - ВведеноВЭксплуатацию) / 2592000; //это в месяцах - по 30 дней
		КонецЕсли;

		Область.Параметры.ПринятоКУчету  = ПринятоКУчету;
		Область.Параметры.НачСтоимость   = ВыборкаОС.НачСтоимость;
		Область.Параметры.НачАмортизация = ВыборкаОС.НачАмортизация + ВыборкаОС.АмортизацияЗаМесяц;
		Область.Параметры.ОстСтоимость   = ВыборкаОС.Стоимость - ВыборкаОС.НачАмортизация - ВыборкаОС.АмортизацияЗаМесяц;
		
		Если ПечатьПоДаннымУпрУчета тогда
			Область.Параметры.ИнвНомер = ВыборкаОС.ИнвНомерУпр;
		Иначе
			ВыборкаЗаписей = РегистрыСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.ПолучитьПоследнее(СтруктураДока.ДатаДок,
											Новый Структура("ОсновноеСредство",ВыборкаОС.ОС));
			ИнвНомерБух    = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.ИнвентарныйНомер,0);
			Область.Параметры.ИнвНомер = ИнвНомерБух;
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаОС.НаименованиеОС) Тогда
			Область.Параметры.НаименованиеОС = СокрЛП(ВыборкаОС.ОС);
		КонецЕсли; 

		ТабДокумент.Вывести(Область);

	Иначе

		Макет  = ПолучитьМакет("ОС4б");

		Шапка = Макет.ПолучитьОбласть("Шапка0");
		Шапка.Параметры.Заполнить(СтруктураДока);
		Шапка.Параметры.Заполнить(СведенияОРуководителеГлавбухе);
		Шапка.Параметры.cВидаУчета = cВидаУчета;
		ТабДокумент.Вывести(Шапка);

		Шапка = Макет.ПолучитьОбласть("Шапка1");
		Шапка.Параметры.Заполнить(СтруктураДока);
		Шапка.Параметры.Валюта = ВалютаПечати;

		ТабДокумент.Вывести(Шапка);

		Строка1 = Макет.ПолучитьОбласть("Строка1");

		Пока ВыборкаОС.Следующий() Цикл

			Строка1.Параметры.Заполнить(ВыборкаОС);
			Строка1.Параметры.Заполнить(СтруктураДока);
			Строка1.Параметры.НачСтоимость   = ВыборкаОС.НачСтоимость;
			Строка1.Параметры.НачАмортизация = ВыборкаОС.НачАмортизация + ВыборкаОС.АмортизацияЗаМесяц;
			Строка1.Параметры.ОстСтоимость   = ВыборкаОС.Стоимость - ВыборкаОС.НачАмортизация - ВыборкаОС.АмортизацияЗаМесяц;

			ДокументПринятияКУчету     = "";
			ДокументВводаВЭксплуатацию = "";
			ПринятоКУчету              = "";
			ВведеноВЭксплуатацию       = "";

			// получим состояния ос 
			СтруктПараметров = ПолучитьАтрибутыСостоянияОС(ВыборкаОС.ОС, Перечисления.СостоянияОС.ВведеноВЭксплуатацию,
			ПечатьПоДаннымУпрУчета,СтруктураДока.Организация);
			ДокументВводаВЭксплуатацию = СтруктПараметров["ИмяДок"];
			ВведеноВЭксплуатацию	   = СтруктПараметров["Дата"];
			
			СтруктПараметров = ПолучитьАтрибутыСостоянияОС(ВыборкаОС.ОС, Перечисления.СостоянияОС.ПринятоКУчету,
			ПечатьПоДаннымУпрУчета,СтруктураДока.Организация);
			ДокументПринятияКУчету  = СтруктПараметров["ИмяДок"];
			ПринятоКУчету		  	= СтруктПараметров["Дата"];

			Строка1.Параметры.СрокЭкспл  = (Дата - ВведеноВЭксплуатацию) / 2592000; //это в месяцах - по 30 дней
			
			Если ПечатьПоДаннымУпрУчета тогда
				Строка1.Параметры.ИнвНомер = ВыборкаОС.ИнвНомерУпр;
			Иначе
				ВыборкаЗаписей = РегистрыСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.ПолучитьПоследнее(СтруктураДока.ДатаДок,
															Новый Структура("ОсновноеСредство",ВыборкаОС.ОС));
				ИнвНомерБух    = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.ИнвентарныйНомер,0);
				Строка1.Параметры.ИнвНомер = ИнвНомерБух;
			КонецЕсли;
			
			Если ПустаяСтрока(ВыборкаОС.НаименованиеОС) Тогда
				Строка1.Параметры.НаименованиеОС = СокрЛП(ВыборкаОС.ОС);
			КонецЕсли; 
			
			Строка1.Параметры.Причина = СтруктураДока.ПричинаСписания;

			ТабДокумент.Вывести(Строка1);

		КонецЦикла;

		Шапка = Макет.ПолучитьОбласть("Шапка2");
		Шапка.Параметры.Заполнить(СтруктураДока);
		Шапка.Параметры.Валюта = ВалютаПечати;
		Шапка.Параметры.Заполнить(СведенияОРуководителеГлавбухе);
		ТабДокумент.Вывести(Шапка);

	КонецЕсли;
	
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСнизу = 0;

	Возврат ТабДокумент;

КонецФункции // ПечатьСписаниеТоваров()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	//Если ЭтоНовый() Тогда
	//	Предупреждение("Документ можно распечатать только после его записи");
	//	Возврат;
	//ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
	//	Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
	//	Возврат;
	//КонецЕсли;

	//Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
	//	Возврат;
	//КонецЕсли;

	//// Получить экземпляр документа на печать
	//Если ИмяМакета = "ОС4упр" тогда
	//	ТабДокумент = ПечатьСписаниеОС();
	//ИначеЕсли ИмяМакета = "ОС4бух" тогда
	//	ТабДокумент = ПечатьСписаниеОС(Ложь);
	//ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

	//	ТабДокумент = НапечататьВнешнююФорму(Ссылка, ИмяМакета);
	//	
	//	Если ТабДокумент = Неопределено Тогда
	//		Возврат
	//	КонецЕсли; 
	//
	//КонецЕсли;

	//НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;

	Если  ОтражатьВУправленческомУчете тогда 
		СтруктураМакетов.Вставить("ОС4упр","Форма ОС-4(упр. учет)");
	КонецЕсли;
	Если  ОтражатьВБухгалтерскомУчете тогда 
		СтруктураМакетов.Вставить("ОС4бух","Форма ОС-4(бух. учет)");
	КонецЕсли;

	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для управленческого учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

	мСтрокаРеквизитыУпрУчета = "Событие,ОС.Стоимость, ОС.Амортизация, ОС.АмортизацияЗаМесяц, ОС.ОстСтоимость, ОС.СписаноНаЗатраты";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

	мСтрокаРеквизитыБухУчета = "СобытиеРегл,СчетСписанияБУ, СубконтоБУ, ОС.СтоимостьБУ, ОС.АмортизацияБУ, ОС.АмортизацияЗаМесяцБУ, ОС.ОстСтоимостьБУ, ОС.СписаноНаЗатратыБУ";
	мСтрокаРеквизитыНалУчета = "СчетСписанияНУ, СубконтоНУ, ОС.СтоимостьНУ, ОС.АмортизацияНУ, ОС.АмортизацияЗаМесяцНУ, ОС.ОстСтоимостьНУ, ОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Дополняет список обязательных параметров шапки
// упр. параметрами
Процедура ДополнитьОбязательныеРеквизитыШапкиУпр(Реквизиты)

	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "Событие";
	
КонецПроцедуры

// Дополняет список обязательных параметров шапки
// регл. параметрами
Процедура ДополнитьОбязательныеРеквизитыШапкиРегл(Реквизиты)

	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СчетСписанияБУ,СчетСписанияНУ,СобытиеРегл";

КонецПроцедуры

// Проверяет правильность заполнения упр. реквизитов шапки
Процедура ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)

	ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.Событие.Представление();
	ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.Событие.ВидСобытияОС,
								  Перечисления.ВидыСобытийОС.Списание,
								  ПредставлениеРеквизита,Отказ);
	
КонецПроцедуры

// Проверяет правильность заполнения регл. реквизитов шапки
Процедура ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) И (НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеНеЗаполнено(СтруктураШапкиДокумента.Организация) Тогда
		ОшибкаПриПроведении("Не заполнено поле Организация", Отказ,Заголовок);
	КонецЕсли;
	ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.СобытиеРегл.Представление();
	ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.СобытиеРегл.ВидСобытияОС,
								  Перечисления.ВидыСобытийОС.Списание,
								  ПредставлениеРеквизита,Отказ);


КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Событие";
	ДополнитьОбязательныеРеквизитыШапкиУпр(ОбязательныеРеквизитыШапки);
	ДополнитьОбязательныеРеквизитыШапкиРегл(ОбязательныеРеквизитыШапки);
 	//НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, ОбязательныеРеквизитыШапки, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);

	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок, Истина);

	// Теперь вызовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Дополняет список обязательных параметров табл. части
// упр. параметрами
Процедура ДополнитьОбязательныеРеквизитыТабОСУпр(Реквизиты)

	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "Стоимость";

КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(РежимПроведения,Отказ, Заголовок) Экспорт

	РеквизитыТабОС = "ОсновноеСредство"; //через запятую
	ДополнитьОбязательныеРеквизитыТабОСУпр(РеквизитыТабОС);
	
	//НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабОС, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "ОС");

	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура(РеквизитыТабОС), Отказ, Заголовок);
	
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		// Проверим возможность снятия ОС с учета
		Для каждого СтрокаОС из ОС Цикл
			Если ОтражатьВБухгалтерскомУчете тогда
				ПроверитьВозможностьСнятияСУчета(СтрокаОС.ОсновноеСредство,Дата,Отказ,Организация);
			КонецЕсли;
			Если ОтражатьВУправленческомУчете тогда
				ПроверитьВозможностьСнятияСУчета(СтрокаОС.ОсновноеСредство,Дата,Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ПроверкаРеквизитовТЧ()

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоОС,ТаблицаНаправлений, Отказ, Заголовок)

	ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоОС,ТаблицаНаправлений, Отказ, Заголовок);
	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС,ТаблицаНаправлений, Отказ, Заголовок)

КонецПроцедуры // ДвиженияПоРегистрам

Процедура ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоОС,ТаблицаНаправлений, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	ДатаДока = Дата;

	АмортизацияОС              = Движения.СтоимостьОС;
	ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
	ТаблицаДвиженийАмортизация.Очистить();

	ТабАмортизации = Новый ТаблицаЗначений;
	ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТабАмортизации.Колонки.Добавить("ОбъектУчета",            Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТабАмортизации.Колонки.Добавить("Сумма",                  ПолучитьОписаниеТиповЧисла( 15, 2));

	Для каждого СтрокаОС из ТаблицаПоОС Цикл

		Если СтрокаОС.АмортизацияЗаМесяц > 0 Тогда

			ТекНаправление = ТаблицаНаправлений.Найти(СтрокаОС.ОсновноеСредство,"ОС_УУ");

			НоваяСтрока    = ТабАмортизации.Добавить();

			НоваяСтрока.Сумма                  = СтрокаОС.АмортизацияЗаМесяц;
			НоваяСтрока.ОбъектУчета            = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.НаправлениеАмортизации = ?(ТекНаправление = Неопределено, Неопределено, ТекНаправление.Направление_УУ);

			// Движения по регистру СтоимостьОС
			Движение = ТаблицаДвиженийАмортизация.Добавить();

			Движение.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			Движение.Амортизация      = СтрокаОС.АмортизацияЗаМесяц;
			Движение.Стоимость        = 0;

		КонецЕсли;

	КонецЦикла;

	// вызов процедуры списания амортизации по направлениям
	ТабЗатрат = ПолучитьРаспределениеАмортизацииПоНаправлениямУпр(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента);

	АмортизацияОС.мПериод          = ДатаДока;
	АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
	Движения.СтоимостьОС.ВыполнитьПриход();

	СостояниеОС           = Движения.СостоянияОС;
	СобытиеОС             = Движения.СобытияОС;
	АмортизацияОС         = Движения.СтоимостьОС;
	ОССписанныеНаЗатраты  = Движения.ОССписанныеНаЗатраты;
	НачислениеАмортизации = Движения.НачислениеАмортизацииОС;

	ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
	ТаблицаДвиженийАмортизация.Очистить();
	
	ТаблицаДвиженийОССписанныеНаЗатраты = ОССписанныеНаЗатраты.Выгрузить();

	Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл

		ТекОС = СтрокаТЧ.ОсновноеСредство;

		// Движения по регистру НачислениеАмортизации
		Движение = НачислениеАмортизации.Добавить();

		Движение.Период               = ДатаДока;
		Движение.ОсновноеСредство     = ТекОС;
		Движение.НачислятьАмортизацию = Ложь;
		Движение.НачислятьАмортизациюВТекущемМесяце = Ложь;

		// Движения по регистру СобытияОС
		Движение = СобытиеОС.Добавить();
		Движение.Период               = ДатаДока;
		Движение.ОсновноеСредство     = ТекОС;
		Движение.Событие              = СтруктураШапкиДокумента.Событие;
		Движение.НазваниеДокумента = Метаданные().Представление();
		Движение.НомерДокумента    = Номер;

		// Движения по регистру СостоянияОС
		Движение = СостояниеОС.Добавить();
		Движение.Период               = ДатаДока;
		Движение.ОсновноеСредство     = ТекОС;
		Движение.Состояние            = Перечисления.СостоянияОС.СнятоСУчета;
		Движение.ДатаСостояния		  = ДатаДока;

		Если НЕ СтрокаТЧ.СписаноНаЗатраты Тогда

			// Движения по регистру СтоимостьОС
			Движение = ТаблицаДвиженийАмортизация.Добавить();

			Движение.ОсновноеСредство = ТекОС;
			Движение.Амортизация      = СтрокаТЧ.Амортизация+СтрокаТЧ.АмортизацияЗаМесяц;
			Движение.Стоимость        = СтрокаТЧ.Стоимость;

		Иначе
			// Движения по регистру ОССписанныеНаЗатраты
			Движение = ТаблицаДвиженийОССписанныеНаЗатраты.Добавить();

			Движение.ОсновноеСредство = ТекОС;
			Движение.Стоимость        = СтрокаТЧ.Стоимость;

		КонецЕсли;

	КонецЦикла;

	АмортизацияОС.мПериод          = ДатаДока;
	АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
	Движения.СтоимостьОС.ВыполнитьРасход();

	ОССписанныеНаЗатраты.мПериод   = ДатаДока;
	ОССписанныеНаЗатраты.мТаблицаДвижений = ТаблицаДвиженийОССписанныеНаЗатраты;
	Движения.ОССписанныеНаЗатраты.ВыполнитьРасход();

КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС,ТаблицаНаправлений, Отказ, Заголовок)

	//Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) И (НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
	//	Возврат;
	//КонецЕсли;

	//ДатаДока       = Дата;
	//ТекОрганизация = СтруктураШапкиДокумента.Организация;
	//СписокОС       = ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство");

	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("ТекОрганизация", ТекОрганизация);
	//Запрос.УстановитьПараметр("ТекДата",        ДатаДока);
	//Запрос.УстановитьПараметр("СписокОС",       СписокОС);
	//Запрос.Текст = "
	//|ВЫБРАТЬ
	//|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство          КАК ОС_БУ,
	//|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета                 КАК СчетУчетаБУ,
	//|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизацииБУ,
	//|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.СчетУчета                     КАК СчетУчетаНУ,
	//|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации     КАК СчетНачисленияАмортизацииНУ,
	//|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство              КАК ОС_НУ
	//|ИЗ
	//|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&ТекДата, (Организация = &ТекОрганизация) И (ОсновноеСредство В (&СписокОС))) КАК СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	//|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаНалоговогоУчетаОС.СрезПоследних(&ТекДата, (Организация = &ТекОрганизация) И (ОсновноеСредство В (&СписокОС))) КАК СчетаНалоговогоУчетаОсновныхСредствСрезПоследних
	//|		ПО СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство";
	//ТаблицаСчетов  = Запрос.Выполнить().Выгрузить();

	//Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда 
	//	// подготовим таблицу с данными по амортизации для списания амортизации по 
	//	// направлениям затрат

	//	АмортизацияОС  = Движения.СтоимостьОСБухгалтерскийУчет;

	//	ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
	//	ТаблицаДвиженийАмортизация.Очистить();

	//	ТабАмортизации = Новый ТаблицаЗначений;
	//	ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	//	ТабАмортизации.Колонки.Добавить("ОбъектУчета",            Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	//	ТабАмортизации.Колонки.Добавить("Сумма",                  ПолучитьОписаниеТиповЧисла( 15, 2));
	//	ТабАмортизации.Колонки.Добавить("СчетАмортизации");
	//	ТабАмортизации.Колонки.Добавить("СчетАмортизацииНУ");
	//	ТабАмортизации.Колонки.Добавить("ИмяСубконто", ПолучитьОписаниеТиповСтроки(16));

	//	Для Каждого СтрокаОС Из ТаблицаПоОС Цикл

	//		Если НЕ (СтрокаОС.АмортизацияЗаМесяцБУ = 0) Тогда

	//			НоваяСтрока = ТабАмортизации.Добавить();

	//			НоваяСтрока.Сумма       = СтрокаОС.АмортизацияЗаМесяцБУ;
	//			НоваяСтрока.ОбъектУчета = СтрокаОС.ОсновноеСредство;
	//			НоваяСтрока.ИмяСубконто = "ОсновныеСредства";
	//			
	//			ТекНаправление = ТаблицаНаправлений.Найти(СтрокаОС.ОсновноеСредство,"ОС_БУ");
	//			НоваяСтрока.НаправлениеАмортизации = ?(ТекНаправление = Неопределено,Неопределено,ТекНаправление.Направление_БУ);

	//			СтрокаТЗ = ТаблицаСчетов.Найти(СтрокаОС.ОсновноеСредство,"ОС_БУ");
	//			Если СтрокаТЗ <> Неопределено Тогда
	//				
	//				НоваяСтрока.СчетАмортизации = СтрокаТЗ.СчетНачисленияАмортизацииБУ;
	//				
	//			Иначе
	//				
	//				ОшибкаПриПроведении("Основное средство " + СтрокаОС.ОсновноеСредство.Наименование +
	//									" не отражалось в бух. учете в организации " + ТекОрганизация, Отказ); 	
	//				Возврат;
	//				
	//			КонецЕсли;

	//			// Движения по регистру СтоимостьОС
	//			Движение = ТаблицаДвиженийАмортизация.Добавить();

	//			Движение.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
	//			Движение.Организация      = ТекОрганизация;
	//			Движение.Амортизация      = СтрокаОС.АмортизацияЗаМесяцБУ;
	//			Движение.Стоимость        = 0;

	//		КонецЕсли;

	//	КонецЦикла;

	//	//вызов процедуры списания амортизации по направлениям
	//	ТабЗатрат = ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента,"Бух","ОС");

	//	АмортизацияОС.мПериод          = ДатаДока;
	//	АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
	//	Движения.СтоимостьОСБухгалтерскийУчет.ВыполнитьПриход();

	//	СобытиеОС             = Движения.СобытияОСОрганизаций;
	//	СостояниеОС			  = Движения.СостоянияОСОрганизаций;	
	//	АмортизацияОС         = Движения.СтоимостьОСБухгалтерскийУчет;
	//	ОССписанныеНаЗатраты  = Движения.ОССписанныеНаЗатратыОрганизаций;
	//	НачислениеАмортизации = Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
	//	ПроводкиБУ            = Движения.Хозрасчетный;

	//	ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
	//	ТаблицаДвиженийАмортизация.Очистить();

	//	ТаблицаДвиженийОССписанныеНаЗатраты = ОССписанныеНаЗатраты.Выгрузить();

	//	Для Каждого СтрокаТЧ Из ТаблицаПоОС Цикл

	//		ТекОС = СтрокаТЧ.ОсновноеСредство;

	//		Если НЕ СтрокаТЧ.СписаноНаЗатратыБУ И НЕ (СтрокаТЧ.СтоимостьБУ = 0) Тогда
	//			
	//			// Движения по регистру НачислениеАмортизации
	//			Движение = НачислениеАмортизации.Добавить();
	//			Движение.Период               = ДатаДока;
	//			Движение.ОсновноеСредство     = ТекОС;
	//			Движение.Организация          = ТекОрганизация;
	//			Движение.НачислятьАмортизацию = Ложь;

	//			// Движения по регистру СобытияОС
	//			Движение = СобытиеОС.Добавить();
	//			Движение.Период               = ДатаДока;
	//			Движение.ОсновноеСредство     = ТекОС;
	//			Движение.Организация          = ТекОрганизация;
	//			Движение.Событие              = СтруктураШапкиДокумента.Событие;
	//			Движение.НазваниеДокумента 	  = Метаданные().Представление();
	//  			Движение.НомерДокумента		  = Номер;
	//			
	//			// Движения по регистру СостоянияОС
	//			Движение = СостояниеОС.Добавить();
	//			Движение.Период               = ДатаДока;
	//			Движение.ОсновноеСредство     = ТекОС;
	//			Движение.Организация          = ТекОрганизация;
	//			Движение.Состояние            = Перечисления.СостоянияОС.СнятоСУчета;
	//			Движение.ДатаСостояния		  = ДатаДока;

	//			// Движения по регистру СтоимостьОС
	//			Движение = ТаблицаДвиженийАмортизация.Добавить();
	//			Движение.ОсновноеСредство = ТекОС;
	//			Движение.Организация      = ТекОрганизация;
	//			Движение.Амортизация      = СтрокаТЧ.АмортизацияБУ+СтрокаТЧ.АмортизацияЗаМесяцБУ;
	//			Движение.Стоимость        = СтрокаТЧ.СтоимостьБУ;
	//			Движение.ВидОперации      = Перечисления.ВидыСобытийОС.Передача;

	//			СтрокаТЗ = ТаблицаСчетов.Найти(ТекОС,"ОС_БУ");
	//			
	//			Если СтрокаТЗ <> Неопределено Тогда
	//				
	//				СчетУчетаСтоимости  = СтрокаТЗ.СчетУчетаБУ;
	//				СчетУчетаАмортизации= СтрокаТЗ.СчетНачисленияАмортизацииБУ;
	//				
	//			Иначе
	//				
	//				ОшибкаПриПроведении("Основное средство " + ТекОс.Наименование +
	//									" не отражалось в бух. учете в организации " + ТекОрганизация,Отказ); 	
	//				Возврат;
	//				
	//			КонецЕсли;

	//			// списание амортизации Д 02.01 К 01.09
	//			СуммаПроводки = СтрокаТЧ.АмортизацияБУ + СтрокаТЧ.АмортизацияЗаМесяцБУ;

	//			Если НЕ (СуммаПроводки = 0) Тогда

	//				Проводка = ПроводкиБУ.Добавить();

	//				Проводка.Период       = ДатаДока;
	//				Проводка.Организация  = ТекОрганизация;
	//				Проводка.Содержание   = "Списана амортизация";
	//				Проводка.Сумма        = СуммаПроводки;
	//				Проводка.НомерЖурнала = "ОС";

	//				Проводка.СчетДт      = СчетУчетаАмортизации;
	//				УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

	//				Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
	//				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);

	//			КонецЕсли;

	//			// списание балансовой стоимости Д 01.09 К 01.01
	//			СуммаПроводки = СтрокаТЧ.СтоимостьБУ;

	//			Если НЕ (СуммаПроводки = 0) Тогда

	//				Проводка = ПроводкиБУ.Добавить();

	//				Проводка.Период       = ДатаДока;
	//				Проводка.Организация  = ТекОрганизация;
	//				Проводка.Сумма        = СтрокаТЧ.СтоимостьБУ;
	//				Проводка.Содержание   = "Списана балансовая ст-ть";
	//				Проводка.НомерЖурнала = "ОС";

	//				Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
	//				УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

	//				Проводка.СчетКт      = СчетУчетаСтоимости;
	//				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);

	//			КонецЕсли;

	//			// списание остаточной стоимости Д 99.01 (91.02) К 01.09
	//			СуммаПроводки = СтрокаТЧ.СтоимостьБУ - СтрокаТЧ.АмортизацияБУ - СтрокаТЧ.АмортизацияЗаМесяцБУ;

	//			Если НЕ (СуммаПроводки = 0) Тогда

	//				Проводка = ПроводкиБУ.Добавить();
	//				Проводка.Период       = ДатаДока;
	//				Проводка.Организация  = ТекОрганизация;
	//				Проводка.Содержание   = "Списана ост. стоимость";
	//				Проводка.Сумма        = СуммаПроводки;
	//				Проводка.НомерЖурнала = "ОС";

	//				Проводка.СчетДт = СтруктураШапкиДокумента.СчетСписанияБУ;
	//				Если НЕ ЗначениеНеЗаполнено(СтруктураШапкиДокумента.СубконтоБУ) Тогда
	//					УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоБУ);
	//				КонецЕсли;

	//				Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
	//				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);

	//			КонецЕсли;

	//		Иначе

	//			// Движения по регистру ОССписанныеНаЗатраты
	//			Движение = ТаблицаДвиженийОССписанныеНаЗатраты.Добавить();

	//			Движение.ОсновноеСредство = ТекОС;
	//			Движение.Организация      = ТекОрганизация;
	//			Движение.Стоимость        = СтрокаТЧ.СтоимостьБУ;

	//		КонецЕсли;

	//	КонецЦикла;

	//	АмортизацияОС.мПериод                    = ДатаДока;
	//	АмортизацияОС.мТаблицаДвижений           = ТаблицаДвиженийАмортизация;
	//	Движения.СтоимостьОСБухгалтерскийУчет.ВыполнитьРасход();

	//	ОССписанныеНаЗатраты.мПериод             = ДатаДока;
	//	ОССписанныеНаЗатраты.мТаблицаДвижений    = ТаблицаДвиженийОССписанныеНаЗатраты;
	//	Движения.ОССписанныеНаЗатратыОрганизаций.ВыполнитьРасход();

	//	ПроводкиБУ.Записать(Ложь);
	//		
	//КонецЕсли;

	//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда 

	//	// подготовим таблицу с данными по амортизации для списания амортизации по 
	//	// направлениям затрат

	//	АмортизацияОСНУ = Движения.СтоимостьОСНалоговыйУчет;

	//	ТаблицаДвиженийАмортизацияНУ = АмортизацияОСНУ.Выгрузить();
	//	ТаблицаДвиженийАмортизацияНУ.Очистить();
	//	
	//	ТаблицаДвиженийСтоимостьНУ = ТаблицаДвиженийАмортизацияНУ.Скопировать();

	//	ТабАмортизации = Новый ТаблицаЗначений;
	//	ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	//	ТабАмортизации.Колонки.Добавить("ОбъектУчета",            Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	//	ТабАмортизации.Колонки.Добавить("Сумма",                  ПолучитьОписаниеТиповЧисла( 15, 2));
	//	ТабАмортизации.Колонки.Добавить("СчетУчетаНУ");
	//	ТабАмортизации.Колонки.Добавить("СчетАмортизации");
	//	ТабАмортизации.Колонки.Добавить("СчетАмортизацииНУ");
	//	ТабАмортизации.Колонки.Добавить("СуммаКапитальныхВложенийВключаемыхВРасходы", ПолучитьОписаниеТиповЧисла(15,2));
	//	ТабАмортизации.Колонки.Добавить("ИмяСубконто", ПолучитьОписаниеТиповСтроки(16));

	//	Для Каждого СтрокаОС Из ТаблицаПоОС Цикл

	//		Если НЕ (СтрокаОС.АмортизацияЗаМесяцНУ = 0) Тогда

	//			НоваяСтрока = ТабАмортизации.Добавить();

	//			НоваяСтрока.Сумма       = СтрокаОС.АмортизацияЗаМесяцНУ;
	//			НоваяСтрока.ОбъектУчета = СтрокаОС.ОсновноеСредство;
	//			НоваяСтрока.ИмяСубконто = "ОсновныеСредства";

	//			ТекНаправление = ТаблицаНаправлений.Найти(СтрокаОС.ОсновноеСредство,"ОС_НУ");
	//			НоваяСтрока.НаправлениеАмортизации = ?(ТекНаправление = Неопределено,Неопределено,ТекНаправление.Направление_НУ);

	//			СтрокаТЗ = ТаблицаСчетов.Найти(СтрокаОС.ОсновноеСредство,"ОС_НУ");
	//			Если СтрокаТЗ <> Неопределено Тогда
	//				НоваяСтрока.СчетАмортизацииНУ = СтрокаТЗ.СчетНачисленияАмортизацииНУ;
	//				НоваяСтрока.СчетУчетаНУ       = СтрокаТЗ.СчетУчетаНУ;
	//			Иначе
	//				ОшибкаПриПроведении("Основное средство " + СтрокаОС.ОсновноеСредство.Наименование +
	//									" не отражалось в налог. учете в организации " + ТекОрганизация, Отказ); 	
	//				Возврат;
	//			КонецЕсли;

	//			Движение = ТаблицаДвиженийАмортизацияНУ.Добавить();

	//			Движение.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
	//			Движение.Организация      = ТекОрганизация;
	//			Движение.Амортизация      = СтрокаОС.АмортизацияЗаМесяцНУ;
	//			Движение.Стоимость        = 0;
	//			
	//			Если СтрокаОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ > 0 Тогда
	//			
	//				НоваяСтрока.СуммаКапитальныхВложенийВключаемыхВРасходы = СтрокаОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;

	//				Движение = ТаблицаДвиженийСтоимостьНУ.Добавить();

	//				Движение.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
	//				Движение.Организация      = ТекОрганизация;
	//				Движение.Амортизация      = 0;
	//				Движение.Стоимость        = СтрокаОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
	//			
	//			КонецЕсли;

	//		КонецЕсли;

	//	КонецЦикла;

	//	// Включение капитальных вложений в состав расходов.
	//	ТабКапитальныхВложений = ТабАмортизации.Скопировать();
	//	ТабКапитальныхВложений.Колонки.Удалить(ТабКапитальныхВложений.Колонки.Сумма);
	//	ТабКапитальныхВложений.Колонки.СуммаКапитальныхВложенийВключаемыхВРасходы.Имя = "Сумма";
	//	ТабКапитальныхВложений.Колонки.Удалить(ТабКапитальныхВложений.Колонки.СчетАмортизацииНУ);
	//	ТабКапитальныхВложений.Колонки.СчетУчетаНУ.Имя = "СчетАмортизацииНУ";
	//	ТабЗатрат = ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабКапитальныхВложений, СтруктураШапкиДокумента, "Нал", "ОС", "Включение капитальных вложений в состав расходов");
	//	
	//	// Формирование проводок по возникающим временным разницам.
	//	ТабВременныхРазницПоКапитальнымВложениям = ТабКапитальныхВложений.Скопировать();
	//	Для Каждого СтрокаВременныхРазниц Из ТабВременныхРазницПоКапитальнымВложениям Цикл
	//		СтрокаВременныхРазниц.Сумма = -СтрокаВременныхРазниц.Сумма;
	//	КонецЦикла;
	//	ТабЗатрат = ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабВременныхРазницПоКапитальнымВложениям, СтруктураШапкиДокумента, "ВР", "ОС", "Включение капитальных вложений в состав расходов");
	//	
	//	//вызов процедуры списания амортизации по направлениям
	//	ТабЗатрат = ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента,"Нал","ОС");

	//	АмортизацияОСНУ.мПериод          = ДатаДока;
	//	АмортизацияОСНУ.мТаблицаДвижений = ТаблицаДвиженийСтоимостьНУ;
	//	Движения.СтоимостьОСНалоговыйУчет.ВыполнитьРасход();
	//	
	//	АмортизацияОСНУ.мПериод          = ДатаДока;
	//	АмортизацияОСНУ.мТаблицаДвижений = ТаблицаДвиженийАмортизацияНУ;
	//	Движения.СтоимостьОСНалоговыйУчет.ВыполнитьПриход();

	//	АмортизацияОСНУ          = Движения.СтоимостьОСНалоговыйУчет;
	//	НачислениеАмортизацииНУ  = Движения.НачислениеАмортизацииОСНалоговыйУчет;
	//	ПроводкиНУ               = Движения.Налоговый;

	//	ТаблицаДвиженийАмортизацияНУ = АмортизацияОСНУ.Выгрузить();
	//	ТаблицаДвиженийАмортизацияНУ.Очистить();

	//	Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл

	//		ТекОС = СтрокаТЧ.ОсновноеСредство;

	//		Если НЕ (СтрокаТЧ.СтоимостьНУ = 0) Тогда
	//			
	//			// Движения по регистру НачислениеАмортизации
	//			Движение = НачислениеАмортизацииНУ.Добавить();
	//			Движение.Организация          = ТекОрганизация;
	//			Движение.Период               = ДатаДока;
	//			Движение.ОсновноеСредство     = ТекОС;
	//			Движение.НачислятьАмортизацию = Ложь;

	//			// Движения по регистру СтоимостьОС
	//			Движение = ТаблицаДвиженийАмортизацияНУ.Добавить();

	//			Движение.ОсновноеСредство = ТекОС;
	//			Движение.Организация      = ТекОрганизация;
	//			Движение.Амортизация      = СтрокаТЧ.АмортизацияНУ + СтрокаТЧ.АмортизацияЗаМесяцНУ;
	//			Движение.Стоимость        = СтрокаТЧ.СтоимостьНУ - СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
	//			Движение.ВидОперации      = Перечисления.ВидыСобытийОС.Передача;

	//			СтрокаТЗ = ТаблицаСчетов.Найти(ТекОС,"ОС_НУ");
	//			Если СтрокаТЗ <> Неопределено Тогда

	//				СчетУчетаСтоимости   = СтрокаТЗ.СчетУчетаНУ;
	//				СчетУчетаАмортизации = СтрокаТЗ.СчетНачисленияАмортизацииНУ;

	//			КонецЕсли;

	//			// списание амортизации Д 02.01 К 01.09
	//			СуммаПроводки = СтрокаТЧ.АмортизацияНУ + СтрокаТЧ.АмортизацияЗаМесяцНУ;

	//			Если НЕ (СуммаПроводки = 0) Тогда

	//				Проводка = ПроводкиНУ.Добавить();

	//				Проводка.Период      = ДатаДока;
	//				Проводка.Организация = ТекОрганизация;
	//				Проводка.Содержание  = "Списана амортизация";
	//				Проводка.Сумма       = СуммаПроводки;
	//				Проводка.НомерЖурнала = "ОС";

	//				Проводка.СчетДт      = СчетУчетаАмортизации;
	//				УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

	//				Проводка.СчетКт      = ПланыСчетов.Налоговый.ВыбытиеОС;
	//				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);

	//			КонецЕсли;

	//			// списание балансовой стоимости Д 01.09 К 01.01
	//			СуммаПроводки = СтрокаТЧ.СтоимостьНУ - СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
	//			
	//			Если НЕ (СуммаПроводки = 0) Тогда

	//				Проводка = ПроводкиНУ.Добавить();

	//				Проводка.Период       = ДатаДока;
	//				Проводка.Организация  = ТекОрганизация;
	//				Проводка.Содержание   = "Списана балансовая ст-ть";
	//				Проводка.Сумма        = СуммаПроводки;
	//				Проводка.НомерЖурнала = "ОС";

	//				Проводка.СчетДт      = ПланыСчетов.Налоговый.ВыбытиеОС;
	//				УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

	//				Проводка.СчетКт      = СчетУчетаСтоимости;
	//				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);

	//			КонецЕсли;

	//			// списание остаточной стоимости Д 99.01 (91.02) К 01.09
	//			СуммаПроводки = СтрокаТЧ.СтоимостьНУ - СтрокаТЧ.АмортизацияНУ - СтрокаТЧ.АмортизацияЗаМесяцНУ - СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;

	//			Если НЕ (СуммаПроводки = 0) Тогда

	//				Проводка = ПроводкиНУ.Добавить();

	//				Проводка.Период      = ДатаДока;
	//				Проводка.Организация = ТекОрганизация;
	//				Проводка.Содержание  = "Списана ост. стоимость";
	//				Проводка.Сумма       = СуммаПроводки;
	//				Проводка.НомерЖурнала = "ОС";

	//				Проводка.СчетДт      = СтруктураШапкиДокумента.СчетСписанияНУ;
	//				Если НЕ ЗначениеНеЗаполнено(СтруктураШапкиДокумента.СубконтоНУ) Тогда
	//					УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоНУ);
	//				КонецЕсли;

	//				Проводка.СчетКт      = ПланыСчетов.Налоговый.ВыбытиеОС;
	//				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);

	//			КонецЕсли;

	//		КонецЕсли;

	//	КонецЦикла;

	//	АмортизацияОСНУ.мПериод          = ДатаДока;
	//	АмортизацияОСНУ.мТаблицаДвижений = ТаблицаДвиженийАмортизацияНУ;
	//	Движения.СтоимостьОСНалоговыйУчет.ВыполнитьРасход();

	//	ПоддержкаПБУ18 = ПрименениеПБУ18(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
	//	// Рассчитаем разницы в амортизации на месяц списания
	//	Если ПоддержкаПБУ18 Тогда
	//		
	//		// Подготовим структуру таблицы для отражения затрат.
	//		ТаблицаОтраженияЗатрат = СформироватьТаблицуЗатрат();
	//		
	//		РасчетРазницПоАмортизации(СтруктураШапкиДокумента, ТабЗатрат, "ОС", ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство"), ПроводкиНУ, ТаблицаОтраженияЗатрат);
	//		ДвиженияПоРазницам(СтруктураШапкиДокумента, СписокОС, ТаблицаСчетов);
	//		
	//		Если ТаблицаОтраженияЗатрат.Количество() > 0 Тогда
	//	
	//			ДопПараметры = Новый Структура;
	//			ДопПараметры.Вставить("КодОперацииНЗП",  Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеПрочихЗатратВПроизводство);
	//			ДопПараметры.Вставить("КодОперацииЗатр", Перечисления.КодыОперацийЗатраты.ПрочиеПостоянныеЗатраты);
	//				
	//			ВремСтруктураШапкиДокумента = Новый Структура;
	//			ВремСтруктураШапкиДокумента.Вставить("ОтражатьВБухгалтерскомУчете", Ложь);
	//			ВремСтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете", Истина);
	//				
	//			ДвиженияПоПрочимЗатратамРегл(ЭтотОбъект, ТаблицаОтраженияЗатрат, ВремСтруктураШапкиДокумента, Неопределено, ДопПараметры);
	//				
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	// Списание сумм капитальных вложений, включенных в состав расходов.
	//	Для Каждого СтрокаТабКапитальныхВложений Из ТабКапитальныхВложений Цикл
	//		
	//		Если НЕ ЗначениеНеЗаполнено(СтрокаТабКапитальныхВложений.Сумма) Тогда
	//	
	//			Проводка = ПроводкиНУ.Добавить();
	//			
	//			Проводка.Период       = СтруктураШапкиДокумента.Дата;
	//			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
	//			Проводка.НомерЖурнала = "ОС";
	//			Проводка.Содержание   = "Капитальные вложения, включаемые в состав расходов";
	//			Проводка.Сумма        = СтрокаТабКапитальныхВложений.Сумма;
	//			
	//			Проводка.СчетКт       = ПланыСчетов.Налоговый.РасходыНаКапитальныеВложения;
	//			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТабКапитальныхВложений.ОбъектУчета);
	//			
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//	Движения.БракВПроизводствеНалоговыйУчет.Записать(Ложь);
	//	Движения.ЗатратыНалоговыйУчет.Записать(Ложь);
	//	Движения.НезавершенноеПроизводствоНалоговыйУчет.Записать(Ложь);

	//КонецЕсли;
	//
	//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И НЕ Отказ тогда
	//	ПроводкиНУ.Записать(Ложь);
	//КонецЕсли; 
	
КонецПроцедуры

Процедура ДвиженияПоРазницам(СтруктураШапкиДокумента, СписокОС, ТаблицаПоОС)
	
	//Если Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда 
	//	Возврат;
	//КонецЕсли;
	//	
	//// Списание разниц счета 01 и 02
	//Запрос = Новый Запрос;
	//Запрос.Текст = "
	//|ВЫБРАТЬ
	//|	НалоговыйОстатки.Субконто1 Как Субконто1,
	//|	НалоговыйОстатки.СуммаОстатокКт КАК Сумма02ПР,
	//|	0 КАК Сумма02ВР,
	//|	0 КАК Сумма01ПР,
	//|	0 КАК Сумма01ВР,
	//|	0 КАК Сумма01
	//|ИЗ
	//|	РегистрБухгалтерии.Налоговый.Остатки(&КонДата, Счет В ИЕРАРХИИ (&НалоговыйАмортизацияОС), , ВидУчета = &ВидУчетаПР И Организация = &Организация И Субконто1 в (&СписокОС)) КАК НалоговыйОстатки
	//|
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	НалоговыйОстатки.Субконто1,
	//|	0,
	//|	НалоговыйОстатки.СуммаОстатокКт,
	//|	0,
	//|	0,
	//|	0
	//|ИЗ
	//|	РегистрБухгалтерии.Налоговый.Остатки(&КонДата, Счет В ИЕРАРХИИ (&НалоговыйАмортизацияОС), , ВидУчета = &ВидУчетаВР И Организация = &Организация И Субконто1 в (&СписокОС)) КАК НалоговыйОстатки
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	НалоговыйОстатки.Субконто1,
	//|	0,
	//|	0,
	//|	НалоговыйОстатки.СуммаОстатокДт,
	//|	0,
	//|	0
	//|ИЗ
	//|	РегистрБухгалтерии.Налоговый.Остатки(&КонДата, Счет В ИЕРАРХИИ (&НалоговыйОСвОрганизации), , ВидУчета = &ВидУчетаПР И Организация = &Организация И Субконто1 в (&СписокОС)) КАК НалоговыйОстатки
	//|
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	НалоговыйОстатки.Субконто1,
	//|	0,
	//|	0,
	//|	0,
	//|	НалоговыйОстатки.СуммаОстатокДт,
	//|	0
	//|ИЗ
	//|	РегистрБухгалтерии.Налоговый.Остатки(&КонДата, Счет В ИЕРАРХИИ (&НалоговыйОСвОрганизации), , ВидУчета = &ВидУчетаВР И Организация = &Организация И Субконто1 в (&СписокОС)) КАК НалоговыйОстатки
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	НалоговыйОстатки.Субконто1,
	//|	0,
	//|	0,
	//|	0,
	//|	0,
	//|	НалоговыйОстатки.СуммаОстатокДт
	//|ИЗ
	//|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонДата, Счет В ИЕРАРХИИ (&ХозрасчетныйОСвОрганизации), ,Организация = &Организация И Субконто1 в (&СписокОС)) КАК НалоговыйОстатки
	//|
	//|ИТОГИ СУММА(Сумма02ПР), СУММА(Сумма02ВР), СУММА(Сумма01ПР), СУММА(Сумма01ВР), СУММА(Сумма01) ПО
	//|Субконто1 ";

	//
	//Запрос.УстановитьПараметр("НачДата",  началоМесяца(Дата));
	//Запрос.УстановитьПараметр("КонДата",  КонецМесяца(Дата));
	//Запрос.УстановитьПараметр("Организация",Организация);
	//Запрос.УстановитьПараметр("ВидУчетаВР",Перечисления.ВидыУчетаПоПБУ18.ВР);
	//Запрос.УстановитьПараметр("ВидУчетаПР",Перечисления.ВидыУчетаПоПБУ18.ПР);
	//
	//	Массив = Новый Массив;
	//	Массив.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства);
	//	Массив.Добавить(ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ);
	//Запрос.УстановитьПараметр("ХозрасчетныйОСвОрганизации", Массив);
	//Запрос.УстановитьПараметр("НалоговыйАмортизацияОС", ПланыСчетов.Налоговый.АмортизацияОсновныхСредств);
	//
	//	Массив = Новый Массив;
	//	Массив.Добавить(ПланыСчетов.Налоговый.ОсновныеСредства);
	//	Массив.Добавить(ПланыСчетов.Налоговый.ДоходныеВложенияВ_МЦ);
	//Запрос.УстановитьПараметр("НалоговыйОСвОрганизации", Массив);
	//Запрос.УстановитьПараметр("СписокОС",       СписокОС);
	//Список = ОС.Выгрузить();
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	//Пока Выборка.Следующий() Цикл
	//	СтрокаТаблицы = Список.Найти(Выборка.Субконто1, "ОсновноеСредство");
	//	Если СтрокаТаблицы = NULL Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	ПараметрыОС = ТаблицаПоОС.Найти(Выборка.Субконто1, "ОС_НУ");
	//	Если Выборка.Сумма01Вр <> 0 Тогда
	//		ПроводкаНУ              = ПроводкиНУ.Добавить();
	//		ПроводкаНУ.Период       = Дата;
	//		ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
	//		
	//		ПроводкаНУ.СчетКт       = ПараметрыОС.СчетУчетаНУ; 
	//		УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);  
	//		ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
	//		ПроводкаНУ.Сумма        = Выборка.Сумма01Вр;
	//		ПроводкаНУ.Содержание   = "Временные разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
	//		ПроводкаНУ.СчетДт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
	//		УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, Выборка.Субконто1);   			
	//		ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
	//		ПроводкаНУ.НомерЖурнала = "ВР";
	//	КонецЕсли;
	//	Если Выборка.Сумма01Вр - Выборка.Сумма02Вр <> 0 Тогда
	//		ПроводкаНУ              = ПроводкиНУ.Добавить();
	//		ПроводкаНУ.Период       = Дата;
	//		ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
	//		
	//		ПроводкаНУ.СчетДт      = СчетСписанияНУ;
	//		УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СубконтоНУ);
	//		УстановитьСубконто(ПроводкаНУ.Счетдт, ПроводкаНУ.СубконтоДт,"ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
	//		ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
	//		ПроводкаНУ.Сумма        = Выборка.Сумма01Вр - Выборка.Сумма02Вр;
	//		ПроводкаНУ.Содержание   = "Временные разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
	//		ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
	//		УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);   			
	//		ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
	//		ПроводкаНУ.НомерЖурнала = "ВР";
	//	КонецЕсли;
	//	Если Выборка.Сумма02Вр <> 0 Тогда
	//		ПроводкаНУ              = ПроводкиНУ.Добавить();
	//		ПроводкаНУ.Период       = Дата;
	//		ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
	//		
	//		ПроводкаНУ.СчетДт       = ПараметрыОС.СчетНачисленияАмортизацииНУ; 
	//		УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, Выборка.Субконто1);  
	//		ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
	//		ПроводкаНУ.Сумма        = Выборка.Сумма02Вр;
	//		ПроводкаНУ.Содержание   = "Временные разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
	//		ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
	//		УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);   			
	//		ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
	//		ПроводкаНУ.НомерЖурнала = "ВР";
	//		
	//	КонецЕсли;
	//	
	//	Если Выборка.Сумма01Пр <> 0 Тогда
	//		ПроводкаНУ              = ПроводкиНУ.Добавить();
	//		ПроводкаНУ.Период       = Дата;
	//		ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
	//		
	//		ПроводкаНУ.СчетКт       = ПараметрыОС.СчетУчетаНУ; 
	//		УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);  
	//		ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
	//		ПроводкаНУ.Сумма        = Выборка.Сумма01Пр;
	//		ПроводкаНУ.Содержание   = "Постоянные разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
	//		ПроводкаНУ.СчетДт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
	//		УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, Выборка.Субконто1);   			
	//		ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
	//		ПроводкаНУ.НомерЖурнала = "ПР";
	//	КонецЕсли;
	//	Если Выборка.Сумма01Пр - Выборка.Сумма02Пр <> 0 Тогда
	//		ПроводкаНУ              = ПроводкиНУ.Добавить();
	//		ПроводкаНУ.Период       = Дата;
	//		ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
	//		ПроводкаНУ.СчетДт      = СчетСписанияНУ;
	//		УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СубконтоНУ);
	//		УстановитьСубконто(ПроводкаНУ.Счетдт, ПроводкаНУ.СубконтоДт,"ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
	//		ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
	//		ПроводкаНУ.Сумма        = Выборка.Сумма01Пр - Выборка.Сумма02Пр;
	//		ПроводкаНУ.Содержание   = "Постоянные разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
	//		ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
	//		УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);   			
	//		ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
	//		ПроводкаНУ.НомерЖурнала = "ПР";
	//	КонецЕсли;
	//	Если Выборка.Сумма02Пр <> 0 Тогда		
	//		ПроводкаНУ              = ПроводкиНУ.Добавить();
	//		ПроводкаНУ.Период       = Дата;
	//		ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
	//		
	//		ПроводкаНУ.СчетДт       = ПараметрыОС.СчетНачисленияАмортизацииНУ; 
	//		УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, Выборка.Субконто1);  
	//		ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
	//		ПроводкаНУ.Сумма        = Выборка.Сумма02Пр;
	//		ПроводкаНУ.Содержание   = "Постоянныые разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
	//		ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
	//		УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);   			
	//		ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
	//		ПроводкаНУ.НомерЖурнала = "ПР";
	//	КонецЕсли;
	//КонецЦикла;
	//
	//ПроводкиНУ.Записать(Ложь);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ОсновныеСредства") Тогда

		СтрокаТабличнойЧасти = ОС.Добавить();

		СтрокаТабличнойЧасти.ОсновноеСредство = Основание.Ссылка;

	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "Обработка проведения" 
//
Процедура ОбработкаПроведения(Отказ,РежимПроведения)

	
	Если мУдалятьДвижения Тогда
		УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();

	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПроверкаРеквизитовТЧ(РежимПроведения,Отказ, Заголовок);

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ОсновноеСредство",     "ОсновноеСредство");
	СтруктураПолей.Вставить("Стоимость",            "Стоимость");
	СтруктураПолей.Вставить("Амортизация",          "Амортизация");
	СтруктураПолей.Вставить("АмортизацияЗаМесяц",   "АмортизацияЗаМесяц");
	СтруктураПолей.Вставить("СписаноНаЗатраты",     "СписаноНаЗатраты");

	//СтруктураПолей.Вставить("СтоимостьБУ",          "СтоимостьБУ");
	//СтруктураПолей.Вставить("АмортизацияБУ",        "АмортизацияБУ");
	//СтруктураПолей.Вставить("АмортизацияЗаМесяцБУ", "АмортизацияЗаМесяцБУ");
	//СтруктураПолей.Вставить("СписаноНаЗатратыБУ",   "СписаноНаЗатратыБУ");

	//СтруктураПолей.Вставить("СтоимостьНУ",          "СтоимостьНУ");
	//СтруктураПолей.Вставить("АмортизацияНУ",        "АмортизацияНУ");
	//СтруктураПолей.Вставить("АмортизацияЗаМесяцНУ", "АмортизацияЗаМесяцНУ");

	//СтруктураПолей.Вставить("СуммаКапитальныхВложенийВключаемыхВРасходыНУ", "СуммаКапитальныхВложенийВключаемыхВРасходыНУ");
	
	РезультатЗапросаПоОС = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();

	СписокОС = ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство");

	Запрос   = Новый Запрос;
	Запрос.УстановитьПараметр("ТекОрганизация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ТекПериод",      Дата);
	Запрос.УстановитьПараметр("СписокОС",       СписокОС);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СпособыОтраженияРасходовПоАмортизацииСрезПоследних.ОсновноеСредство                  КАК ОС_УУ,
	|	СпособыОтраженияРасходовПоАмортизацииСрезПоследних.СпособыОтраженияРасходовПоАмортизации                  КАК Направление_УУ
	|ИЗ
	|РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОС.СрезПоследних(&ТекПериод, ОсновноеСредство В (&СписокОС)) КАК СпособыОтраженияРасходовПоАмортизацииСрезПоследних";
	ТаблицаНаправлений = Запрос.Выполнить().Выгрузить();

	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоОС,ТаблицаНаправлений, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "При копировании" 
//
Процедура ПриКопировании(ОбъектКопирования)
	
	мСкопирован = Истина;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
		
	Если НЕ Отказ Тогда
		
		обЗаписатьПротоколИзменений(ЭтотОбъект);
		
	КонецЕсли; 


КонецПроцедуры // ПередЗаписью

Процедура ОбработкаУдаленияПроведения(Отказ)

	
	УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, ложь);

КонецПроцедуры // ОбработкаУдаленияПроведения

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	//ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	//РегистрацияОбъектовДоступаДокумента(Ссылка, Новый Структура("Организация",
	//														Организация));
КонецПроцедуры




мСкопирован = Ложь;