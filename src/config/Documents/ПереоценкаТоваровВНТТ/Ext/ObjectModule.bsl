Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьПереоценкиТоваровВРознице()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Организация,
	|	Организация                  КАК Поставщик,
	|	Склад	                     КАК Получатель ,
	|	Склад.Представление          КАК ПредставлениеПолучателя,
	|	Товары.(
	|		НомерСтроки,
	|		Количество, 
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Номенклатура.ЕдиницаХраненияОстатков.Представление  КАК ЕдиницаИзмерения,
	|		Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
	|		ЦенаВРозницеСтарая,
	|		ЦенаВРознице,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		СерияНоменклатуры КАК Серия
	|	)
	|ИЗ
	|	Документ.ПереоценкаТоваровВНТТ КАК ПереоценкаТоваровВНТТ
	|
	|ГДЕ
	|	ПереоценкаТоваровВНТТ.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПереоценкаТоваровВНТТ_ПереоценкаТоваровВНТТ";
	Макет = ПолучитьМакет("ПереоценкаТоваровВНТТ");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Переоценка товаров в рознице");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");

	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Товар) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.Товар = ВыборкаСтрокТовары.Товар + ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПереоценкиТоваровВРознице()

Функция ПечатьЦенников()

	Данные = Новый Структура("Организация, ТаблицаДанных, ДатаПечати");

	ТаблицаДанных = Новый ТаблицаЗначений();
	ТаблицаДанных.Колонки.Добавить("Номенклатура");
	ТаблицаДанных.Колонки.Добавить("НоменклатураНаименование");
	ТаблицаДанных.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаДанных.Колонки.Добавить("Цена");
	ТаблицаДанных.Колонки.Добавить("Единица");
	ТаблицаДанных.Колонки.Добавить("ЕдиницаНаименование");
	ТаблицаДанных.Колонки.Добавить("Валюта");

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Организация,
	|	Дата,
	|	Товары.(
	|		Ссылка,
	|		Номенклатура,
	|		ХарактеристикаНоменклатуры,
	|		Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|		ЦенаВРознице КАК Цена,
	|		Номенклатура.ЕдиницаХраненияОстатков КАК Единица,
	|		Номенклатура.ЕдиницаХраненияОстатков.Наименование КАК ЕдиницаНаименование
	|	)
	|ИЗ
	|	Документ.ПереоценкаТоваровВНТТ КАК ПереоценкаТоваровВНТТ
	|
	|ГДЕ
	|	ПереоценкаТоваровВНТТ.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ВыборкаТоваров = Шапка.Товары.Выбрать();
	Пока ВыборкаТоваров.Следующий() Цикл
		СтрокаДанных = ТаблицаДанных.Добавить();

		СтрокаДанных.Номенклатура               = ВыборкаТоваров.Номенклатура;
		СтрокаДанных.НоменклатураНаименование   = ВыборкаТоваров.НаименованиеПолное;
		СтрокаДанных.Единица                    = ВыборкаТоваров.Единица;
		СтрокаДанных.ЕдиницаНаименование        = ВыборкаТоваров.ЕдиницаНаименование;
		СтрокаДанных.Цена                       = ВыборкаТоваров.Цена;
		СтрокаДанных.ХарактеристикаНоменклатуры = ВыборкаТоваров.ХарактеристикаНоменклатуры;
		СтрокаДанных.Валюта                     = мВалютаРегламентированногоУчета;
	КонецЦикла;

	Данные.Организация   = Шапка.Организация;
	Данные.ДатаПечати    = Шапка.Дата;
	Данные.ТаблицаДанных = ТаблицаДанных;

	Возврат НапечататьЦенники(Данные);;

КонецФункции // ПечатьЦенников()()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "ПереоценкаТоваровВНТТ" тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьПереоценкиТоваровВРознице();
	ИначеЕсли ИмяМакета = "Ценники" тогда
		ТабДокумент = ПечатьЦенников();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();

	КонецЕсли;

	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));

КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;

	СписокМакетов.Добавить("ПереоценкаТоваровВНТТ", "Переоценка товаров в рознице");
	СписокМакетов.Добавить("Ценники", "Ценники на товары");

	ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

#КонецЕсли

// Процедура выполняет заполнение табличной части по остаткам.
//
Процедура ЗаполнитьТовары(РежимЗаполнения = "ЗаполнитьПоОстаткам") Экспорт

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Товар", Перечисления.ТоварТара.Товар);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.Номенклатура,
	|	Остатки.ЦенаВРознице,
	|	Остатки.ХарактеристикаНоменклатуры,
	|	Остатки.СерияНоменклатуры,
	|	СУММА(Остатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыВНеавтоматизированныхТорговыхТочках.Остатки(,
	|	                                  Склад = &Склад И ТоварТара = &Товар
	|	                                                                   ) КАК Остатки
	|ГДЕ
	|	Остатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Номенклатура,
	|	Остатки.ЦенаВРознице,
	|	Остатки.ХарактеристикаНоменклатуры,
	|	Остатки.СерияНоменклатуры
	|";

	Выборка        = Запрос.Выполнить().Выбрать();
	ТипЦенСклада   = Склад.ТипЦенРозничнойТорговли;
	Валюта         = мВалютаРегламентированногоУчета;
	СтруктураКурса = ПолучитьКурсВалюты(Валюта, Дата);
	Курс           = СтруктураКурса.Курс;
	Кратность      = СтруктураКурса.Кратность;

	Пока Выборка.Следующий() Цикл

		ДобавитьСтроку     = Истина;
		Номенклатура       = Выборка.Номенклатура;
		Характеристика     = Выборка.ХарактеристикаНоменклатуры;
		Серия              = Выборка.СерияНоменклатуры;
		Количество         = Выборка.КоличествоОстаток;
		ЦенаВРозницеСтарая = Выборка.ЦенаВРознице;

		Если РежимЗаполнения = "ЗаполнитьПоЦенам" Тогда
			ЦенаПоТипуЦен = ПолучитьЦенуНоменклатуры(Номенклатура, Характеристика, ТипЦенСклада,
			                Дата, Номенклатура.ЕдиницаХраненияОстатков, Валюта, Курс, Кратность);

			Если ЦенаПоТипуЦен  > 0
			   И ЦенаПоТипуЦен <> ЦенаВРозницеСтарая Тогда
				ЦенаВРознице = ЦенаПоТипуЦен;
			Иначе
				ДобавитьСтроку = Ложь;
			КонецЕсли;
		Иначе
			ЦенаВРознице = ЦенаВРозницеСтарая;
		КонецЕсли;

		Если ДобавитьСтроку Тогда
			СтрокаТабличнойЧасти = Товары.Добавить();

			СтрокаТабличнойЧасти.Номенклатура               = Номенклатура;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;
			СтрокаТабличнойЧасти.Количество                 = Количество;
			СтрокаТабличнойЧасти.ЦенаВРозницеСтарая         = ЦенаВРозницеСтарая;
			СтрокаТабличнойЧасти.ЦенаВРознице               = ЦенаВРознице;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТовары()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	ТаблицаТоваров.Колонки.Добавить("МинусКоличество", ПолучитьОписаниеТиповЧисла(15,3));
	
	Для каждого СтрокаТаблицы из ТаблицаТоваров Цикл
		СтрокаТаблицы.МинусКоличество = - СтрокаТаблицы.КоличествоДок;
	КонецЦикла;

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, Склад");

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	Если СтруктураШапкиДокумента.ВидСклада <> Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		ОшибкаПриПроведении("Документ не может осуществлять переоценку не на неавтоматизированной торговой точки!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, ЦенаВРознице");

	КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыВНеавтоматизированныхТорговыхТочках. Расход.
	НаборДвижений = Движения.ТоварыВНеавтоматизированныхТорговыхТочках;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвиженийТоварыНаСкладах = НаборДвижений.Выгрузить();
	ТаблицаДвиженийТоварыНаСкладах.Очистить();
	ТаблицаДвижений = ТаблицаДвиженийТоварыНаСкладах.Скопировать();
	ТаблицаПоТоварамРасход = ТаблицаПоТоварам.Скопировать();
	ТаблицаПоТоварамРасход.Колонки.ЦенаВРозницеСтарая.Имя = "ЦенаВРознице";
	ТаблицаПоТоварамРасход.Колонки.МинусКоличество.Имя = "Количество";

	// Заполним таблицу движений.
	ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамРасход, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Склад, "Склад");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Товар, "ТоварТара");

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	// Проверка осатков при оперативном проведении.
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;

	Если Не Отказ Тогда
		Движения.ТоварыВНеавтоматизированныхТорговыхТочках.ВыполнитьПриход();
	КонецЕсли;

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыВНеавтоматизированныхТорговыхТочках. Приход.

	НаборДвижений = Движения.ТоварыВНеавтоматизированныхТорговыхТочках;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвиженийТоварыНаСкладах = НаборДвижений.Выгрузить();
	ТаблицаДвиженийТоварыНаСкладах.Очистить();
	ТаблицаДвижений = ТаблицаДвиженийТоварыНаСкладах.Скопировать();
	ТаблицаПоТоварамПриход = ТаблицаПоТоварам.Скопировать();
	ТаблицаПоТоварамПриход.Колонки.ЦенаВРозницеНовая.Имя = "ЦенаВРознице";
	ТаблицаПоТоварамПриход.Колонки.КоличествоДок.Имя = "Количество";

	// Заполним таблицу движений.
	ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамПриход, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Товар, "ТоварТара");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ТоварыВНеавтоматизированныхТорговыхТочках.ВыполнитьПриход();
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 


КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);

	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = СформироватьДеревоПолейЗапросаПоШапке();
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"      , "ВалютаУправленческогоУчета",     "ВалютаУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"      , "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "ВестиПартионныйУчетПоСкладам",   "ВестиПартионныйУчетПоСкладам");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"          , "ВидСклада"                   ,   "ВидСклада");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("КоличествоДок"             , "Количество");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         , "СерияНоменклатуры");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("ЦенаВРозницеНовая"         , "ЦенаВРознице");
	СтруктураПолей.Вставить("ЦенаВРозницеСтарая"        , "ЦенаВРозницеСтарая");

	РезультатЗапросаПоТоварам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
