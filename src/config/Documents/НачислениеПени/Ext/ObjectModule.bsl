Перем мВалютаРегламентированногоУчета Экспорт;

#Если Клиент Тогда
	
Функция ПолучитьСпецификацию(Док)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Док", Док);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Спецификация.Ссылка КАК Спецификация
	|ИЗ
	|	Документ.Спецификация КАК Спецификация
	|ГДЕ
	|	Спецификация.ДокументОснование = &Док";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Возврат Выборка.Спецификация;	
			
		КонецЕсли; 
		
	Иначе Возврат "";	
		
	КонецЕсли; 
	

КонецФункции // ПолучитьСпецификацию()
 	
	
Процедура ВывестиПечатнуюФормуДокумента(ТабДок, Макет)

	ОбластьЗаголовок = Макет.ПолучитьОбласть("ПЗаголовок");
	ОбластьЗаголовок.Параметры.Заполнить(ЭтотОбъект);
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ПШапкаТаблицы");
	ОбластьОбщийИтог = Макет.ПолучитьОбласть("ПТаблицаИтоги");
	ОбластьЗаказ = Макет.ПолучитьОбласть("ПСтрокаТаблицы");
	
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Док", ЭтотОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачислениеПениПени.Сделка,
	|	НачислениеПениПени.ДатаПредыдущегоНачисления,
	|	НачислениеПениПени.Количество,
	|	НачислениеПениПени.Ставка,
	|	НачислениеПениПени.ПросроченнаяСумма КАК ПросроченнаяСумма,
	|	НачислениеПениПени.Пени КАК Пени,
	|	НачислениеПениПени.ДатаОплаты
	|ИЗ
	|	Документ.НачислениеПени.Пени КАК НачислениеПениПени
	|ГДЕ
	|	НачислениеПениПени.Ссылка = &Док
	|ИТОГИ
	|	СУММА(ПросроченнаяСумма),
	|	СУММА(Пени)
	|ПО
	|	ОБЩИЕ";
	
	Результат = Запрос.Выполнить();
	
	ВыборкаОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    УровеньИтогов = ВыборкаОбщийИтог.Уровень();
	ВыборкаОбщийИтог.Следующий();		// Общий итог
	ОбластьОбщийИтог.Параметры.Заполнить(ВыборкаОбщийИтог);
	

	ВыборкаЗаказ = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаЗаказ.Следующий() Цикл
		
		ОбластьЗаказ.Параметры.Заполнить(ВыборкаЗаказ);
		ТабДок.Вывести(ОбластьЗаказ, ВыборкаЗаказ.Уровень());
		
	КонецЦикла;
	
	ТабДок.Вывести(ОбластьОбщийИтог, УровеньИтогов);
	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();

КонецПроцедуры
 	
	
Функция ПечатьДокумента()
	
	МассивПоЗаказам = Пени.ВыгрузитьКолонку("Сделка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("Сделка", МассивПоЗаказам);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентами.Сделка КАК Сделка,
	|	ВзаиморасчетыСКонтрагентами.Регистратор,
	|	ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ВзаиморасчетыСКонтрагентами.Сделка.ДатаОплаты
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	|ГДЕ
	|	ВзаиморасчетыСКонтрагентами.Сделка В (&Сделка)
	|	И ВзаиморасчетыСКонтрагентами.ВидДвижения = &Приход
	|	И ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	|ИТОГИ
	|	СУММА(СуммаВзаиморасчетов)
	|ПО
	|	Сделка";
	
	
	ЗапросОплат = Новый Запрос;
	ЗапросОплат.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);
	ЗапросОплат.УстановитьПараметр("Сделка", МассивПоЗаказам);
    ЗапросОплат.Текст =
	"ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентами.Сделка КАК Сделка,
	|	СУММА(ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	|ГДЕ
	|	ВзаиморасчетыСКонтрагентами.Сделка В (&Сделка)
	|	И ВзаиморасчетыСКонтрагентами.ВидДвижения = &Расход
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыСКонтрагентами.Сделка";
	
	
	ТаблицаОплат = ЗапросОплат.Выполнить().Выгрузить();
	
	ТаблицаДляПечати = Новый ТаблицаЗначений;
	
	ТаблицаДляПечати.Колонки.Добавить("Сделка");
	ТаблицаДляПечати.Колонки.Добавить("Реализация");
	ТаблицаДляПечати.Колонки.Добавить("СуммаРеализации");
	ТаблицаДляПечати.Колонки.Добавить("СуммаОплаты");
	ТаблицаДляПечати.Колонки.Добавить("ДатаОплаты");
	ТаблицаДляПечати.Колонки.Добавить("СуммаПени");
	ТаблицаДляПечати.Колонки.Добавить("Спецификация");
	
	ВыборкаЗаказов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЗаказов.Следующий() Цикл
	
		СуммаОтгрузки = ВыборкаЗаказов.СуммаВзаиморасчетов;
		
		ВыборкаОтгрузок = ВыборкаЗаказов.Выбрать();
		
		Пока ВыборкаОтгрузок.Следующий() Цикл
			
			СтрокаПечати = ТаблицаДляПечати.Добавить();
			СтрокаПечати.Сделка = ВыборкаОтгрузок.Сделка;
			СтрокаПечати.СуммаРеализации = ВыборкаОтгрузок.СуммаВзаиморасчетов;
			СтрокаПечати.Реализация = ВыборкаОтгрузок.Регистратор;
			СтрокаПечати.ДатаОплаты = ВыборкаОтгрузок.Сделка.ДатаОплаты;
			Коэффициент = СтрокаПечати.СуммаРеализации/СуммаОтгрузки;
			
			СтрокаТЗ = ТаблицаОплат.Найти(ВыборкаОтгрузок.Сделка, "Сделка");
			
			Если СтрокаТЗ <> Неопределено Тогда
			
				СтрокаПечати.СуммаОплаты = Коэффициент*СтрокаТЗ.СуммаВзаиморасчетов;
			
			КонецЕсли; 
			
			СтрокаПечати.СуммаПени = Пени.Найти(ВыборкаОтгрузок.Сделка, "Сделка").Пени * Коэффициент;
			СтрокаПечати.Спецификация = ПолучитьСпецификацию(СтрокаПечати.Реализация);
			
		КонецЦикла;
		
	
	КонецЦикла; 
	
	ТаблицаДляПечати.Сортировать("ДатаОплаты, Реализация");
	
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("ПечатьДокумента");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.Заполнить(ЭтотОбъект);
	ТабДок.Вывести(ОбластьЗаголовок);
	
	
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
    ОбластьСтрокаИтог = Макет.ПолучитьОбласть("ИтогТаблицы");
	
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	
	Для каждого СтрПеч Из ТаблицаДляПечати Цикл
	
		ОбластьСтрокаТаблицы.Параметры.Заполнить(СтрПеч);
		ТабДок.Вывести(ОбластьСтрокаТаблицы);
	
	КонецЦикла; 
	
	ОбластьСтрокаИтог.Параметры.СуммаРеализации = ТаблицаДляПечати.Итог("СуммаРеализации");
	ОбластьСтрокаИтог.Параметры.СуммаОплаты = ТаблицаДляПечати.Итог("СуммаОплаты");
	ОбластьСтрокаИтог.Параметры.Пени = ТаблицаДляПечати.Итог("СуммаПени");
	
	ТабДок.Вывести(ОбластьСтрокаИтог);
	
	Возврат ТабДок;
	
КонецФункции


Функция ПечатьДокументаСтарая()

    //Вывод Текущих начислений
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапросПени.Заказ КАК Заказ,
	|	ЗапросПени.СуммаЗадолженности КАК СуммаЗадолженности,
	|	ЗапросПени.СуммаРасход КАК СуммаРасход,
	|	ЗапросПени.СуммаНачисленная КАК СуммаНачисленная,
	|	ЗапросПени.СуммаВыставленная КАК СуммаВыставленная,
	|	ВЫБОР КОГДА ЗапросПени.ДатаПредыдущегоНачисления = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) 
	|		        ИЛИ ЕСТЬNULL(ЗапросПени.ДатаПредыдущегоНачисления, 0) = 0 ТОГДА
	|		""Начислений нет"" 
	|   ИНАЧЕ
	|		ЗапросПени.ДатаПредыдущегоНачисления
	| 	КОНЕЦ КАК ДатаПредыдущегоНачисления,
	|	ЗапросПени.ПросроченныйСрокПриход КАК ДнейПросрочено,
	|	ЗапросПени.ПроцентнаяСтавкаПриход КАК Ставка,
	|	ЗапросПени.ДатаОплаты КАК ДатаОплаты,
	|	ЗапросПени.ДатаНачисления КАК ДатаНачисления,
	|	ВзаиморасчетыСКонтрагентами.Регистратор КАК Документ,
	|	ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов КАК СуммаДокумента
	|ИЗ
	|	(ВЫБРАТЬ
	|		НачисленныеПениОбороты.Сделка КАК Заказ,
	|		НачисленныеПениОбороты.СуммаПриход КАК СуммаЗадолженности,
	|		НачисленныеПениОбороты.СуммаРасход КАК СуммаРасход,
	|		НачисленныеПениОбороты.ПениПриход КАК СуммаНачисленная,
	|		НачисленныеПениОбороты.ПениРасход КАК СуммаВыставленная,
	|		НачисленныеПениОбороты.ДатаПредыдущегоНачисления КАК ДатаПредыдущегоНачисления,
	|		НачисленныеПениОбороты.ПросроченныйСрокПриход КАК ПросроченныйСрокПриход,
	|		НачисленныеПениОбороты.ПроцентнаяСтавкаПриход КАК ПроцентнаяСтавкаПриход,
	|		НачисленныеПениОбороты.Сделка.ДатаОплаты КАК ДатаОплаты,
	|		НачисленныеПениОбороты.ДатаНачисления КАК ДатаНачисления
	|	ИЗ
	|		РегистрНакопления.НачисленныеПени.Обороты(, , , ДокументНачисления = &ТекущийДокумент) КАК НачисленныеПениОбороты) КАК ЗапросПени
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	|		ПО ЗапросПени.Заказ = ВзаиморасчетыСКонтрагентами.Сделка
	|ГДЕ
	|	ВзаиморасчетыСКонтрагентами.ВидДвижения = &Приход
	|	И ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	|ИТОГИ
	|	СУММА(СуммаЗадолженности),
	|	СУММА(СуммаРасход),
	|	СУММА(СуммаНачисленная),
	|	СУММА(СуммаВыставленная),
	|	МИНИМУМ(ДатаПредыдущегоНачисления),
	|	МИНИМУМ(ПросроченныйСрокПриход),
	|	СУММА(ПроцентнаяСтавкаПриход),
	|	МИНИМУМ(ДатаОплаты),
	|	МИНИМУМ(ДатаНачисления)
	|ПО
	|	ОБЩИЕ,
	|	Заказ";

	Результат = Запрос.Выполнить();

	ТабДок = Новый ТабличныйДокумент;
	//ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Накладная";
	Макет = ПолучитьМакет("АктНачисленияПеней");
    ТабДок.Очистить();
	
	ВывестиПечатнуюФормуДокумента(ТабДок, Макет);
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.Заполнить(ЭтотОбъект);
	ОбластьЗаголовок.Параметры.Документ = ЭтотОбъект.Ссылка;
	
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицыПени");
	ОбластьОбщийИтог = Макет.ПолучитьОбласть("ИтогТаблицыПени");
	ОбластьЗаказ = Макет.ПолучитьОбласть("СтрокаТаблицыПени");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("СтрокаТаблицыРеализации");

	
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	ТабДок.НачатьАвтогруппировкуСтрок();

	ВыборкаОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    УровеньИтогов = ВыборкаОбщийИтог.Уровень();
	ВыборкаОбщийИтог.Следующий();		// Общий итог
	ОбластьОбщийИтог.Параметры.Заполнить(ВыборкаОбщийИтог);
	

	ВыборкаЗаказ = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаЗаказ.Следующий() Цикл
		ОбластьЗаказ.Параметры.Заполнить(ВыборкаЗаказ);
		ТабДок.Вывести(ОбластьЗаказ, ВыборкаЗаказ.Уровень());

		ВыборкаДетали = ВыборкаЗаказ.Выбрать();

		Пока ВыборкаДетали.Следующий() Цикл
			ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетали);
			ТабДок.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетали.Уровень());
		КонецЦикла;
	КонецЦикла;
	
	ТабДок.Вывести(ОбластьОбщийИтог, УровеньИтогов);
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Док", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачислениеПениПени.Сделка
	|ИЗ
	|	Документ.НачислениеПени.Пени КАК НачислениеПениПени
	|ГДЕ
	|	НачислениеПениПени.Ссылка = &Док";
	
	СписокЗаказов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сделка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокЗаказов", СписокЗаказов);
	Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачисленныеПени.Сделка КАК Заказ,
	|	НачисленныеПени.Регистратор.Дата КАК Дата,
	|	НачисленныеПени.Сделка.ДатаОплаты КАК ДатаОплаты,
	|	НачисленныеПени.ДатаНачисления,
	|	НачисленныеПени.ДатаПредыдущегоНачисления,
	|	НачисленныеПени.ДокументНачисления КАК ДокументНачисления,
	|	НачисленныеПени.Регистратор.СуммаДокумента КАК СуммаДокумента,
	|	НачисленныеПени.Сумма КАК СуммаДляНачисления,
	|	НачисленныеПени.ПросроченныйСрок КАК ПросроченоДней,
	|	НачисленныеПени.Регистратор КАК Документ,
	|	НачисленныеПени.ВидДвижения,
	|	НачисленныеПени.ПроцентнаяСтавка КАК Ставка,
	|	НачисленныеПени.Пени,
	|	ВЫБОР 
	|		КОГДА НачисленныеПени.ВидДвижения = &Приход
	|		ТОГДА НачисленныеПени.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПросроченнаяСумма,
	|	ВЫБОР
	|		КОГДА НачисленныеПени.ВидДвижения = &Приход
	|			ТОГДА НачисленныеПени.Пени
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачисленнаяСумма,
	|	ВЫБОР
	|		КОГДА НачисленныеПени.ВидДвижения = &Расход
	|			ТОГДА НачисленныеПени.Пени
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВыставленнаяСумма,
	|	ВЫБОР
	|		КОГДА НачисленныеПени.ДатаПредыдущегоНачисления = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ИЛИ ЕСТЬNULL(НачисленныеПени.ДатаПредыдущегоНачисления, 0) = 0
	|			ТОГДА НачисленныеПени.Сделка.ДатаОплаты
	|		ИНАЧЕ НачисленныеПени.ДатаПредыдущегоНачисления
	|	КОНЕЦ КАК ПериодНачалаНачисления
	|ИЗ
	|	РегистрНакопления.НачисленныеПени КАК НачисленныеПени
	|ГДЕ
	|	НачисленныеПени.Сделка В(&СписокЗаказов)
	|ИТОГИ
	|	МИНИМУМ(Ставка),
	|	СУММА(НачисленнаяСумма),
	|	СУММА(ВыставленнаяСумма),
	|	МИНИМУМ(ПериодНачалаНачисления),
	|	МИНИМУМ(ДатаНачисления),
	|	МИНИМУМ(ПросроченоДней),
	|	СУММА(ПросроченнаяСумма)
	|ПО
	|	ОБЩИЕ,
	|	Заказ,
	|	ДокументНачисления";
	
	
	Результат = Запрос.Выполнить();

	//ТабДок = Новый ТабличныйДокумент;
	//ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Накладная";
	
	//Макет = ПолучитьМакет("АктНачисленияПеней");

	
	//ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицыИсторияНачисленийИОплаты");
	ОбластьОбщийИтог = Макет.ПолучитьОбласть("СтрокаТаблицыИсторияНачисленийИтоги");
	ОбластьЗаказ = Макет.ПолучитьОбласть("СтрокаТаблицыИсторияНачисленийЗаказы");
	ОбластьНачисление = Макет.ПолучитьОбласть("СтрокаТаблицыИсторияНачисленийДокументыНачисления");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("СтрокаТаблицыИсторияДокументы");

	//ТабДок.Очистить();
	//ТабДок.Вывести(ОбластьЗаголовок);
	
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	ТабДок.НачатьАвтогруппировкуСтрок();

	ВыборкаОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    УровеньИтогов = ВыборкаОбщийИтог.Уровень();
	ВыборкаОбщийИтог.Следующий();		// Общий итог
	ОбластьОбщийИтог.Параметры.Заполнить(ВыборкаОбщийИтог);
	

	ВыборкаЗаказ = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаЗаказ.Следующий() Цикл
		ОбластьЗаказ.Параметры.Заполнить(ВыборкаЗаказ);
		ТабДок.Вывести(ОбластьЗаказ, ВыборкаЗаказ.Уровень());

		ВыборкаДокументы = ВыборкаЗаказ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаДокументы.Следующий() Цикл
			
			ОбластьНачисление.Параметры.Заполнить(ВыборкаДокументы);
			
			ОбластьНачисление.Параметры.ПериодНачисления = Формат(ВыборкаДокументы.ПериодНачалаНачисления, "ДЛФ=Д") + " - " +
														   Формат(ВыборкаДокументы.ДатаНачисления, "ДЛФ=Д");
			
			ТабДок.Вывести(ОбластьНачисление, ВыборкаДокументы.Уровень());
			
			ВыборкаДетали = ВыборкаДокументы.Выбрать();
			
			Пока ВыборкаДетали.Следующий() Цикл
				
				Если ВыборкаДетали.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
					
					ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетали);
					ОбластьДетальныхЗаписей.Параметры.СуммаПоказателей = Строка(ВыборкаДетали.СуммаДокумента) + " / " + Строка(ВыборкаДетали.СуммаДляНачисления);
					ТабДок.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетали.Уровень());
					
				КонецЕсли; 
				
			КонецЦикла;
			
		КонецЦикла; 

	КонецЦикла;
	
	ТабДок.Вывести(ОбластьОбщийИтог, УровеньИтогов);
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", ЭтотОбъект.Контрагент);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачисленныеПениОбороты.ДокументНачисления КАК ДокументНачисления,
	|	СУММА(НачисленныеПениОбороты.ПениПриход) КАК СуммаНачисленно,
	|	СУММА(ВзаиморасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовПриход) КАК СуммаВыставленно,
	|	СУММА(ВзаиморасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовРасход) КАК СуммаОплачено,
	|	СУММА(ВзаиморасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовПриход - ВзаиморасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовРасход) КАК ОстатокКОплате,
	|	СУММА(НачисленныеПениОстатки.ПениОстаток) КАК ОстатокКНачислению
	|ИЗ
	|	РегистрНакопления.НачисленныеПени.Обороты(, , , Контрагент = &Контрагент) КАК НачисленныеПениОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(, , , ) КАК ВзаиморасчетыСКонтрагентамиОбороты
	|		ПО НачисленныеПениОбороты.ДокументНачисления = ВзаиморасчетыСКонтрагентамиОбороты.Сделка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленныеПени.Остатки КАК НачисленныеПениОстатки
	|		ПО НачисленныеПениОбороты.ДокументНачисления = НачисленныеПениОстатки.ДокументНачисления
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленныеПениОбороты.ДокументНачисления
	|ИТОГИ
	|	СУММА(СуммаНачисленно),
	|	СУММА(СуммаВыставленно),
	|	СУММА(СуммаОплачено),
	|	СУММА(ОстатокКОплате),
	|	СУММА(ОстатокКНачислению)
	|ПО
	|	ОБЩИЕ";
	
	Результат = Запрос.Выполнить();

	//ТабДок = Новый ТабличныйДокумент;
	//ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Накладная";
	
	//Макет = ПолучитьМакет("АктНачисленияПеней");

	
	//ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицыОплаты");
	ОбластьОбщийИтог = Макет.ПолучитьОбласть("ИтогТаблицыОплаты");
	ОбластьЗаказ = Макет.ПолучитьОбласть("СтрокаТаблицыОплаты");
	
	//ТабДок.Очистить();
	//ТабДок.Вывести(ОбластьЗаголовок);
	
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	ТабДок.НачатьАвтогруппировкуСтрок();

	ВыборкаОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    УровеньИтогов = ВыборкаОбщийИтог.Уровень();
	ВыборкаОбщийИтог.Следующий();		// Общий итог
	ОбластьОбщийИтог.Параметры.Заполнить(ВыборкаОбщийИтог);
	

	ВыборкаЗаказ = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаЗаказ.Следующий() Цикл
		
		ОбластьЗаказ.Параметры.Заполнить(ВыборкаЗаказ);
		ТабДок.Вывести(ОбластьЗаказ, ВыборкаЗаказ.Уровень());
		
	КонецЦикла;
	
	ТабДок.Вывести(ОбластьОбщийИтог, УровеньИтогов);
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();

	
	Возврат ТабДок;

КонецФункции // ПечатьДокумента()

Функция ПечатьДляКлиента()
		
	
	МассивПоЗаказам = Пени.ВыгрузитьКолонку("Сделка");
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокСделок", МассивПоЗаказам);
	Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	З1.Сделка КАК Сделка,
	|	З1.Период КАК Период,
	|	З1.Регистратор,
	|	З1.СуммаВзаиморасчетов,
	|	З1.ВидДвижения,
	|	З1.СуммаВзаиморасчетовКонечныйОстаток,
	|	З1.СделкаДатаОплаты,
	|	З1.ДатаНачисления,
	|	З1.ДокументНачисления,
	|	З1.Пени,
	|	З1.ПериодВзаиморасчетов,
	|	З1.ПериодПени
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВзаиморасчетыСКонтрагентами.Сделка КАК Сделка,
	|		ВзаиморасчетыСКонтрагентами.Период КАК Период,
	|		ВзаиморасчетыСКонтрагентами.Регистратор КАК Регистратор,
	|		ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|		ВзаиморасчетыСКонтрагентами.ВидДвижения КАК ВидДвижения,
	|		ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток КАК СуммаВзаиморасчетовКонечныйОстаток,
	|		ВзаиморасчетыСКонтрагентами.Сделка.ДатаОплаты КАК СделкаДатаОплаты,
	|		ВзаиморасчетыСКонтрагентами.Период КАК ПериодВзаиморасчетов,
	|		NULL КАК ДатаНачисления,
	|		NULL КАК ДокументНачисления,
	|		NULL КАК Пени,
	|		NULL КАК ПериодПени
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.ОстаткиИОбороты(, , Регистратор, , ) КАК ВзаиморасчетыСКонтрагентамиОстаткиИОбороты
	|			ПО ВзаиморасчетыСКонтрагентами.Регистратор = ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Регистратор
	|				И ВзаиморасчетыСКонтрагентами.Сделка = ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Сделка
	|	ГДЕ
	|		ВзаиморасчетыСКонтрагентами.Сделка В (&СписокСделок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НачисленныеПени.Сделка,
	|		НачисленныеПени.Период,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		НачисленныеПени.ДатаНачисления,
	|		НачисленныеПени.ДокументНачисления,
	|		НачисленныеПени.Пени,
	|		НачисленныеПени.Период
	|	ИЗ
	|		РегистрНакопления.НачисленныеПени КАК НачисленныеПени
	|	ГДЕ
	|		НачисленныеПени.Сделка В (&СписокСделок)
	|		И НачисленныеПени.ВидДвижения = &Приход) КАК З1
	|
	|СГРУППИРОВАТЬ ПО
	|	З1.Сделка,
	|	З1.Период,
	|	З1.Регистратор,
	|	З1.СуммаВзаиморасчетов,
	|	З1.ВидДвижения,
	|	З1.СуммаВзаиморасчетовКонечныйОстаток,
	|	З1.СделкаДатаОплаты,
	|	З1.ДатаНачисления,
	|	З1.ДокументНачисления,
	|	З1.Пени,
	|	З1.ПериодВзаиморасчетов,
	|	З1.ПериодПени
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|ИТОГИ ПО
	|	Сделка";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Макет = ПолучитьМакет("РеестрПеней");
	ТабДок = Новый ТабличныйДокумент;
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.Заполнить(ЭтотОбъект);
	ТабДок.Вывести(ОбластьЗаголовок);
	
	ОбластьЗаказ = Макет.ПолучитьОбласть("Заказ");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("СтрокаЗаголовок");
	ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("Строка");
	ОбластьПени = Макет.ПолучитьОбласть("Пени");
	ОбластьНачисления = Макет.ПолучитьОбласть("СтрокаНачисления");

	ТабДок.Вывести(ОбластьШапкаТаблицы);
	
	ТабДок.НачатьАвтогруппировкуСтрок();
	мПени = 0;

	Пока Выборка.Следующий() Цикл
	
		Заказ = Выборка.Сделка;
		ОбластьЗаказ.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(ОбластьЗаказ, Выборка.Уровень());
		
		ВыборкаДвижений = Выборка.Выбрать();
		
		//Начало = Истина;
		//
		Пока ВыборкаДвижений.Следующий() Цикл
			
			//ТекПериод = ВыборкаДвижений.Период;
			//
			//Если Начало Тогда
			//
			//	Начало = Ложь;
			//	ПредПериод = ТекПериод; 
			//
			//КонецЕсли; 
			//
			Для Сч = 0 По ОбластьСтрокаТаблицы.Параметры.Количество()-1 Цикл
			
				ОбластьСтрокаТаблицы.Параметры[Сч] = "";
			
			КонецЦикла; 
			
			//ОбластьСтрокаТаблицы.Параметры.Регистратор = "";
			//ОбластьСтрокаТаблицы.Параметры.СуммаВзаиморасчетов = "";
			//Пени = 0;
			Если НЕ (ВыборкаДвижений.ВидДвижения) = NULL Тогда
				
				//Период = "";
				
				Если ВыборкаДвижений.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
				
					ОбластьСтрокаТаблицы.Параметры.Заполнить(ВыборкаДвижений);
					ОбластьСтрокаТаблицы.Параметры.Спецификация = ПолучитьСпецификацию(ВыборкаДвижений.Регистратор);	
					//
					//Если НачалоДня(ТекПериод) <> НачалоДня(ПредПериод) Тогда
					//	
					//	ПредПериод = ТекПериод;
					//	
					//	
					//	Если мПени > 0 Тогда
					//	
					//		//ТабДок.Вывести(ОбластьНачисления, ВыборкаДвижений.Уровень());
					//	
					//	КонецЕсли; 
					//	мПени = 0;
					//	
					//КонецЕсли; 
					
					
					Для каждого СтрокаРасчет Из НачисленияПоЗаказам Цикл
						
						Если НачалоДня(СтрокаРасчет.Период) = НачалоДня(ВыборкаДвижений.Период)
							И СтрокаРасчет.Сделка = ВыборкаДвижений.Сделка Тогда
							
							ОбластьСтрокаТаблицы.Параметры.Пени = СтрокаРасчет.Пени;
							ОбластьСтрокаТаблицы.Параметры.ПериодПени = Формат(СтрокаРасчет.ПериодС, "ДЛФ=Д") + "-" + Формат(СтрокаРасчет.ПериодПо, "ДЛФ=Д");
							//ОбластьНачисления.Параметры.ПоДата = СтрокаРасчет.ПоДату;

							//
							//мПени = СтрокаРасчет.Пени;
							////ОбластьНачисления.Параметры.Пени = мПени;
							//ОбластьНачисления.Параметры.СДата = СтрокаРасчет.СДаты;
							//ОбластьНачисления.Параметры.ПоДата = СтрокаРасчет.ПоДату;
							//ОбластьНачисления.Параметры.Сумма = СтрокаРасчет.ПросроченныйДолг;
							//
							
							Прервать;
							
						КонецЕсли; 
						
					КонецЦикла; 
					
			
					
					
					ТабДок.Вывести(ОбластьСтрокаТаблицы);
					
					
				Иначе
					
					ОбластьСтрокаТаблицы.Параметры.ДокументОплаты = ВыборкаДвижений.Регистратор;
					ОбластьСтрокаТаблицы.Параметры.СуммаОплаты = ВыборкаДвижений.СуммаВзаиморасчетов;
					ОбластьСтрокаТаблицы.Параметры.Период = ВыборкаДвижений.Период;
					ОбластьСтрокаТаблицы.Параметры.СуммаВзаиморасчетовКонечныйОстаток = ВыборкаДвижений.СуммаВзаиморасчетовКонечныйОстаток;
					
					//Если НачалоДня(ТекПериод) <> НачалоДня(ПредПериод) Тогда
					//	
					//	ПредПериод = ТекПериод;
					//	
					//	
					//	Если мПени > 0 Тогда
					//	
					//		//ТабДок.Вывести(ОбластьНачисления, ВыборкаДвижений.Уровень());
					//	
					//	КонецЕсли; 
					//	мПени = 0;
					//	
					//КонецЕсли; 
					//
					Для каждого СтрокаРасчет Из НачисленияПоЗаказам Цикл
						
						Если НачалоДня(СтрокаРасчет.Период) = НачалоДня(ВыборкаДвижений.Период)
							И СтрокаРасчет.Сделка = ВыборкаДвижений.Сделка Тогда
							
							ОбластьСтрокаТаблицы.Параметры.Пени = СтрокаРасчет.Пени;
							ОбластьСтрокаТаблицы.Параметры.ПериодПени = Формат(СтрокаРасчет.ПериодС, "ДЛФ=Д") + "-" + Формат(СтрокаРасчет.ПериодПо, "ДЛФ=Д");
							
							//
							//мПени = СтрокаРасчет.Пени;
							////ОбластьНачисления.Параметры.Пени = мПени;
							//ОбластьНачисления.Параметры.СДата = СтрокаРасчет.ПериодС;
							//ОбластьНачисления.Параметры.ПоДата = СтрокаРасчет.ПериодПо;
							//ОбластьНачисления.Параметры.Сумма = СтрокаРасчет.СуммаДолга;
							//
							
							Прервать;
							
						КонецЕсли; 
						
					
					КонецЦикла; 
					
					ТабДок.Вывести(ОбластьСтрокаТаблицы, ВыборкаДвижений.Уровень());
				
				КонецЕсли; 	
				
			ИначеЕсли НЕ (ВыборкаДвижений.ДокументНачисления = NULL) Тогда 
				
				ОбластьПени.Параметры.Заполнить(ВыборкаДвижений);
				ТабДок.Вывести(ОбластьПени, ВыборкаДвижений.Уровень());
				
			КонецЕсли; 
		
		КонецЦикла; 
		
	
	КонецЦикла; 
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
	//ТабДок.Показать();

	Возврат ТабДок;	
		
КонецФункции

	

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, Форма = Неопределено) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 

	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если      ИмяМакета = "Пени" Тогда
		    ТабДокумент = ПечатьДокумента();
	ИначеЕсли      ИмяМакета = "ПениДляКлиента" Тогда
		    ТабДокумент = ПечатьДляКлиента();
			
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();
		
	КонецЕсли;

	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;

	СписокМакетов.Добавить("Пени", "Акт начисления пеней");
	СписокМакетов.Добавить("ПениДляКлиента", "Реестр пени");

	ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
	
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

#КонецЕсли


Процедура ОбработкаПроведения(Отказ, Режим)
	
	Для Каждого ТекСтрокаПени Из Пени Цикл
		// регистр НачисленныеПени Приход
		Движение = Движения.НачисленныеПени.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.ДатаНачисления = ДатаНачисления;
		Движение.Контрагент = Контрагент;
		Движение.ДоговорЗадолженности = ТекСтрокаПени.ДоговорЗадолженности;
		Движение.ДоговорНачисления = ?(ЗначениеЗаполнено(ДоговорКонтрагента), ДоговорКонтрагента, ТекСтрокаПени.ДоговорКонтрагента);
		Движение.Сделка = ТекСтрокаПени.Сделка;
		Движение.Сумма = ТекСтрокаПени.ДолгНаДатуНачисления;
		Движение.Пени = ТекСтрокаПени.Пени;
		Движение.ДокументНачисления = ЭтотОбъект.Ссылка;
	КонецЦикла;
	
	Движения.НачисленныеПени.Записать();
	
КонецПроцедуры

#Если Клиент Тогда
	
Процедура ОбработкаЗаполнения(Основание)
	
	Если ЭтоНовый() Тогда
		
		Если ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		Иначе
			ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли;
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			// Заполнение шапки
			Контрагент = Основание.Контрагент;
			Организация = Основание.Организация;
			ДоговорКонтрагента = яштПени.ПолучитьДоговорПени(Контрагент, Организация, глТекущийПользователь,Истина);
			яштПени.НачислитьПени(Основание.Контрагент, ТекущаяДата(), Основание, ЭтотОбъект); 
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	//Если НЕ ПараметрыСеанса.ИдетОбменРаспределеннойБазы Тогда
	//	яштПени.ПроверитьПоздниеНачисленияКонтрагента(ЭтотОбъект, Отказ);
	//КонецЕсли;
	//Если Отказ Тогда
	//	Сообщить("По контрагенту производились поздние начисления!");	
	//КонецЕсли; 
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	#Если Клиент Тогда
		Если НЕ ПараметрыСеанса.ИдетОбменРаспределеннойБазы Тогда
			Если не ЭтотОбъект.ЭтоНовый() Тогда
				Отказ = яштПени.ПроверитьВыставление(Ссылка);
				Если Отказ Тогда
					Сообщить("Документ начисления не может быть изменен, так как по нему уже производилось выставление пеней",СтатусСообщения.Важное);
					Возврат;
				КонецЕсли;	
			КонецЕсли;
			//Для Каждого ТекСтрокаПени Из Пени Цикл
			//	Если НЕ яштПени.ПроверитьПоздниеНачисления(ТекСтрокаПени.Сделка, ДатаНачисления, Истина) Тогда
			//		Отказ = Истина;
			//	КонецЕсли;
			//КонецЦикла;
		КонецЕсли;
		Ответственный = глТекущийПользователь;
	#КонецЕсли
	
	Если Не РасчетСуммыПениВФайле Тогда
		СуммаДокумента = ЭтотОбъект.Пени.Итог("Пени");
	КонецЕсли;
		
	Если НЕ Отказ Тогда
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	КонецЕсли; 
	
КонецПроцедуры

мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();