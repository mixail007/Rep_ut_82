////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период

Перем мКолонкиТовары;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура изменяет время в табличной части "ВремяПоДнямНедели".
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ИзменитьВремя(Элемент)

	Для каждого СтрокаДня Из ВремяПоДнямНедели Цикл
		СтрокаДня.ВремяНачала = ОбщееВремяНачала;
		СтрокаДня.ВремяОкончания = ОбщееВремяОкончания;
		СтрокаДня.Выбран = Истина;
	КонецЦикла;

КонецПроцедуры

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	ЕстьКоличество = Ложь;

	Команда = "ПодборВТабличнуюЧасть";

	СписокВидовПодбора = Новый СписокЗначений();
	СписокВидовПодбора.Добавить(,"По справочнику");
	СписокВидовПодбора.Добавить("ОстаткиВсейНоменклатуры", "По остаткам номенклатуры (вся номенклатура)");

	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);
	
	СтруктураПараметровПодбора.Вставить("Контрагент"           , Неопределено);
	СтруктураПараметровПодбора.Вставить("ДоговорВзаиморасчетов", Неопределено);
	СтруктураПараметровПодбора.Вставить("Склад"                , Неопределено);
	СтруктураПараметровПодбора.Вставить("Организация"          , Неопределено);
	СтруктураПараметровПодбора.Вставить("ТипЦен"               , Неопределено);
	СтруктураПараметровПодбора.Вставить("ЕстьКоличество"       , ЕстьКоличество);

	СтруктураПараметровПодбора.Вставить("Заголовок"          , "Подбор номенклатуры в документ "
	                                                         + ПредставлениеДок + " № " + Номер );

	ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)Экспорт

	Перем Номенклатура, Характеристика, Качество;

	Если ЗначениеВыбора.Команда = "ПодборВТабличнуюЧасть" Тогда

		ЗначениеВыбора.Свойство("Номенклатура"  , Номенклатура);
		ЗначениеВыбора.Свойство("Качество"      , Качество);
		ЗначениеВыбора.Свойство("Характеристика", Характеристика);

		Если НЕ ЗначениеНеЗаполнено(Номенклатура)
		   И Номенклатура.Услуга Тогда
			Предупреждение("В данном контексте услуги не подбираются!");
			Возврат;
		КонецЕсли;

		Если Качество = Справочники.Качество.Новый Тогда
			Качество = Справочники.Качество.ПустаяСсылка();
		КонецЕсли;

		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		// Если не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
		СтруктураОтбора.Вставить("Номенклатура"              , Номенклатура);
		СтруктураОтбора.Вставить("Качество"                  , Качество);

		СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(Товары, СтруктураОтбора);
		Если СтрокаТабличнойЧасти = Неопределено Тогда

			// Надо добавить
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Номенклатура               = Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = Характеристика;
			НоваяСтрока.Качество = Качество;
			НоваяСтрока.ПроцентСкидкиНаценки = ПроцентСкидкиНаценки;
			НоваяСтрока.ОграничениеСкидкиНаценки = ОграничениеСкидкиНаценки;

		Иначе

			//Позиционируем
			ЭлементыФормы.Товары.ТекущаяСтрока = СтрокаТабличнойЧасти;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОбработкаПодбора()

// Осуществляет вызов формы заполнения табличной части документа
//
// Параметры:
//  Добавить            - Истина - добавить, Ложь - заполнить с предворительной очисткой,
//  ОснованиеЗаполнения - строка "Группа" или "Поставщик".
//
Процедура ЗаполнитьТовары(Добавить, ОснованиеЗаполнения)

	Если Товары.Количество() > 0 И НЕ Добавить Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;

	КонецЕсли;

	Если ОснованиеЗаполнения = "Группа" Тогда

		// Теперь нужно выбрать группу, по которой будем заполнять.
		ФормаЗаполнения = ПолучитьФорму("ФормаЗаполнения");
		
		ФормаЗаполнения.мСтруктураПараметров = Новый Структура("Добавить", Добавить);

		ФормаЗаполнения.Заголовок   = "Выберите группу справочника ""Номенклатура"" для заполнения табличной части документа ""Установка скидок""";

		Группа = ФормаЗаполнения.ОткрытьМодально();

	ИначеЕсли ОснованиеЗаполнения = "Поставщик" Тогда

		// Теперь нужно выбрать контрагента, по которому будем заполнять.
		ФормаВыбора = Справочники.Контрагенты.ПолучитьФормуВыбора();

		ФормаВыбора.Заголовок   = "Выберите поставщика номенклатуры для заполнения табличной части документа ""Установка скидок""";
		ФормаВыбора.РежимВыбора = Истина;

		Поставщик = ФормаВыбора.ОткрытьМодально();

		Если ЗначениеНеЗаполнено(Поставщик) Тогда 
			Возврат; // ничего не выбрали.
		КонецЕсли;

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Поставщик", Поставщик);
		Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Номенклатура.Ссылка КАК Номенклатура
		|	ИЗ Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ОсновнойПоставщик = &Поставщик
		|И НЕ Номенклатура.ЭтоГруппа
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.Текст = Текст;
		ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
		КачествоНовый = Справочники.Качество.Новый;

		Если НЕ Добавить Тогда

			ТаблицаТоваров.Колонки.Добавить("ПроцентСкидкиНаценки");
			ТаблицаТоваров.Колонки.Добавить("ОграничениеСкидкиНаценки");
			ТаблицаТоваров.Колонки.Добавить("Качество");
			ТаблицаТоваров.ЗаполнитьЗначения(ПроцентСкидкиНаценки, "ПроцентСкидкиНаценки");
			ТаблицаТоваров.ЗаполнитьЗначения(ОграничениеСкидкиНаценки, "ОграничениеСкидкиНаценки");
			ТаблицаТоваров.ЗаполнитьЗначения(КачествоНовый, "Качество");
			Товары.Загрузить(ТаблицаТоваров);

		Иначе

			ТаблицаПроверкиДублей = Товары.Выгрузить();
			Для Каждого СтрокаДобавления ИЗ ТаблицаТоваров Цикл
				Если ТаблицаПроверкиДублей.Найти(Новый Структура("Номенклатура", СтрокаДобавления.Номенклатура)) = Неопределено Тогда
					СтрокаТовара = Товары.Добавить();
					СтрокаТовара.Номенклатура = СтрокаДобавления.Номенклатура;
					СтрокаТовара.Качество = КачествоНовый;
					СтрокаТовара.ПроцентСкидкиНаценки = ПроцентСкидкиНаценки;
					СтрокаТовара.ОграничениеСкидкиНаценки = ОграничениеСкидкиНаценки;
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТовары()

// Производит изменение типа элемента формы "ЗначениеУсловия".
//
Процедура ИзменитьТипЗначенияУсловия()

	Если Условие = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты Тогда
		ЭлементыФормы.ЗначениеУсловия.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ВидыОплатЧекаККМ");
		ЭлементыФормы.ЗначениеУсловия.ВыбиратьТип = ложь;
		Если ТипЗнч(ЗначениеУсловия)<> Тип("СправочникСсылка.ВидыОплатЧекаККМ") Тогда
			ЗначениеУсловия = Справочники.ВидыОплатЧекаККМ.ПустаяСсылка();
		КонецЕсли;
	Иначе
		КвалификаторыЧисла = Новый КвалификаторыЧисла(15,2,ДопустимыйЗнак.Неотрицательный);
		ЭлементыФормы.ЗначениеУсловия.ОграничениеТипа = Новый ОписаниеТипов("Число",КвалификаторыЧисла);
		ЭлементыФормы.ЗначениеУсловия.ВыбиратьТип = ложь;
		Если ТипЗнч(ЗначениеУсловия)<> Тип("Число") Тогда
			ЗначениеУсловия = 0;
		КонецЕсли;
	КонецЕсли;
	Если Условие = Перечисления.УсловияСкидкиНаценки.БезУсловий Тогда
		Если ТипЗнч(ЗначениеУсловия)<> Тип("Число")
		 Или ЗначениеУсловия <> 0 Тогда
			ЗначениеУсловия = 0;
		КонецЕсли;
		ЭлементыФормы.ЗначениеУсловия.Доступность = Ложь;
	Иначе
		ЭлементыФормы.ЗначениеУсловия.Доступность = Истина;
	КонецЕсли;

КонецПроцедуры

// Производит изменение в соответствии с установленным видом скидки.
//
Процедура ПриИзмененииВидаСкидок()

	Если ВидСкидки = Перечисления.ВидыСкидок.Оптовая Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.ПолучателиСкидки.Заголовок = "Получатели скидки (Контрагенты)";
		ЭлементыФормы.ПолучателиСкидки.Колонки.Контрагент.Видимость = Истина;
		ЭлементыФормы.ПолучателиСкидки.Колонки.Получатель.ТекстШапки = "Договор";
		ЭлементыФормы.ПолучателиСкидки.ОтборСтрок.Контрагент.ВидСравнения = ВидСравнения.НеРавно;
	Иначе
		ЭлементыФормы.ОсновнаяПанель.Страницы.ПолучателиСкидки.Заголовок = "Получатели скидки (Склады)";
		ЭлементыФормы.ПолучателиСкидки.Колонки.Контрагент.Видимость = Ложь;
		ЭлементыФормы.ПолучателиСкидки.Колонки.Получатель.ТекстШапки = "Склад";
		ЭлементыФормы.ПолучателиСкидки.ОтборСтрок.Контрагент.ВидСравнения = ВидСравнения.Равно;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех страниц панели "ОсновнаяПанель,
// видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	ЭлементыФормы.ОсновнаяПанель.Страницы.НазначениеСкидки.Видимость = НЕ ДляВсейНоменклатуры;
	ЭлементыФормы.ОсновнаяПанель.Страницы.ПолучателиСкидки.Видимость = НЕ ДляВсехПолучателей;
	ЭлементыФормы.ОсновнаяПанель.Страницы.ВремяДействияСкидки.Видимость = ПоДнямНедели;

	Если ДляВсейНоменклатуры
	   И ДляВсехПолучателей
	   И НЕ ПоДнямНедели Тогда
		ЭлементыФормы.ОсновнаяПанель.Видимость = Ложь;
	Иначе
		ЭлементыФормы.ОсновнаяПанель.Видимость = Истина;
	КонецЕсли;

	Если ТекущийЭлемент = ЭлементыФормы.ДляВсейНоменклатуры
	   И НЕ ДляВсейНоменклатуры Тогда
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.НазначениеСкидки
	ИначеЕсли ТекущийЭлемент = ЭлементыФормы.ДляВсехПолучателей
	   И НЕ ДляВсехПолучателей Тогда
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ПолучателиСкидки
	ИначеЕсли ТекущийЭлемент = ЭлементыФормы.ПоДнямНедели
	   И ПоДнямНедели Тогда
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ВремяДействияСкидки
	ИначеЕсли НЕ ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Видимость Тогда
		Для каждого Страница из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
			Если Страница.Видимость Тогда
				ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = Страница;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если ДляВсейНоменклатуры 
	 Или Товары.Количество() = 0 Тогда
		ЭлементыФормы.ПроцентСкидкиНаценки.АвтоОтметкаНезаполненного = Истина;
	Иначе
		ЭлементыФормы.ПроцентСкидкиНаценки.АвтоОтметкаНезаполненного = Ложь;
		ЭлементыФормы.ПроцентСкидкиНаценки.ОтметкаНезаполненного = Ложь;
	КонецЕсли;

КонецПроцедуры // УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		Если НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьЦенообразование") Тогда 
			Предупреждение("Операции ценообразования запрещены!");	
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;

	
	ЭлементыФормы.Условие.СписокВыбора.Добавить(Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента);
	ЭлементыФормы.Условие.СписокВыбора.Добавить(Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара);
	ЭлементыФормы.Условие.СписокВыбора.Добавить(Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты);
	ЭлементыФормы.Условие.СписокВыбора.Добавить(Перечисления.УсловияСкидкиНаценки.БезУсловий);
	ЭлементыФормы.Условие.Значение = Условие;

КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	яштФормаДокументаПриОткрытии(ЭтотОбъект, ЭтаФорма);
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь);
		УстановитьНомерДокумента(ЭтотОбъект);
		ВидСкидки = Перечисления.ВидыСкидок.Розничная;
		ПриИзмененииВидаСкидок();
		//Условие                        = Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента;
		Условие                        = Перечисления.УсловияСкидкиНаценки.БезУсловий;
		ДляВсехПолучателей = Истина;
		Валюта = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяВалютаВзаиморасчетов");
		ЭлементыФормы.Условие.Значение = Условие;
		ДатаНачала                     = Дата;

	КонецЕсли;

	ИзменитьТипЗначенияУсловия();

	ЭлементыФормы.ПолучателиСкидки.НастройкаОтбораСтрок.Контрагент.Доступность = Ложь;
	ЭлементыФормы.ПолучателиСкидки.ОтборСтрок.Контрагент.Использование = Истина;
	ЭлементыФормы.ПолучателиСкидки.ОтборСтрок.Контрагент.Значение = Справочники.Контрагенты.ПустаяСсылка();
	ПриИзмененииВидаСкидок();

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");

	// Установить ограничение - изменять видимоть колонок для таличного поля 
	// "ТаблицаСкидокНаценок".
	УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Товары.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;

	// Установить видимость колонок "ХарактеристикаНоменклатуры"
	УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);

	УстановитьВидимость();

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьЦенообразование") Тогда
		
		ЭтаФорма.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 

	
КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

// Процедура - обработчик события "ОбновлениеОтображения" формы
//
Процедура ОбновлениеОтображения()

	ЭлементыФормы.Товары.Колонки.ОграничениеСкидкиНаценки.ТекстШапки = "Огр.(" 
	        + ?(Валюта = Справочники.Валюты.ПустаяСсылка(), "валюта не выбрана", Валюта) + ")";
	Если Условие = Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента Тогда
		ЭлементыФормы.НадписьЗначениеУсловия.Заголовок= "Значение условия("
		        + ?(Валюта = Справочники.Валюты.ПустаяСсылка(), "<>", Валюта) + "):";
	Иначе
		ЭлементыФормы.НадписьЗначениеУсловия.Заголовок= "Значение условия:";
	КонецЕсли;
	ЭлементыФормы.НадписьОграничение.Заголовок= "Ограничение("
	        + ?(Валюта = Справочники.Валюты.ПустаяСсылка(), "<>", Валюта) + "):";

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
	Если ЗначениеВыбора.Команда = "ЗаполнениеТабличнойЧасти"
		  ИЛИ ЗначениеВыбора.Команда = "ПодборВТабличнуюЧасть" Тогда

		ОбработкаПодбора("Товары",ЗначениеВыбора);

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Обработчик внешнего события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	Если глТорговоеОборудование <> Неопределено Тогда
		Если Событие = "BarCodeValue" Тогда

			Команда         = "ПодборВТабличнуюЧасть";
			ИмяТабличнойЧасти = "Товары";

			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("Команда"              , Команда);
			СтруктураПараметров.Вставить("ИмяТабличнойЧасти"    , ИмяТабличнойЧасти);

			глТорговоеОборудование.ОбработатьВнешнееСобытиеОтСканераДляФормы(ЭтаФорма, ЭтотОбъект, СтруктураПараметров, Данные);

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ВнешнееСобытие()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если НЕ ПоДнямНедели Тогда
		ВремяПоДнямНедели.Очистить();
	КонецЕсли;

	Если ДляВсейНоменклатуры Тогда
		Товары.Очистить();
	КонецЕсли;

	Если ДляВсехПолучателей Тогда
		ПолучателиСкидки.Очистить();
	КонецЕсли;
	
	яштСменаПользователя(ЭтотОбъект, ЭтаФорма, глТекущийПользователь);

КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
//  Кнопка - кнопка командной панели табличной части, которую
//           нажал пользователь
//
Процедура КоманднаяПанельТоварыПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТаблицыТиповСкидокНаценокПодбор()

// Процедура вызывается при нажатии кнопки "Изменить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм для изменения табличной части
//
Процедура КоманднаяПанельТоварыДействиеИзменить(Кнопка)

	// Получим контекст обработки
	ИзменениеТабличнойЧастиТовары      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменные формы.
	ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект             = ЭтотОбъект;
	ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента            = ЭтаФорма;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьНДС                   = Ложь; 
	ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице          = Ложь;

	//Перенесем табличную часть
	ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоГруппе(Кнопка)

	ЗаполнитьТовары(Ложь, "Группа");

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыДействиеДобавитьПоГруппе(Кнопка)

	ЗаполнитьТовары(Истина, "Группа");

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыЗаполнитьПоПоставщику(Кнопка)

	ЗаполнитьТовары(Ложь, "Поставщик");

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыДобавитьПоПоставщику(Кнопка)

	ЗаполнитьТовары(Истина, "Поставщик");

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ОтметитьВсе" командной панели 
// табличного поля "ВремяПоДнямНедели".
//
Процедура КоманднаяПанельВремяПоДнямНеделиДействиеОтметитьВсе(Кнопка)

	Для каждого День из ВремяПоДнямНедели Цикл
		День.Выбран = Истина;
	КонецЦикла;

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "СнятьВсе" командной панели 
// табличного поля "ВремяПоДнямНедели".
//
Процедура КоманднаяПанельВремяПоДнямНеделиДействиеСнятьВсе(Кнопка)

	Для каждого День из ВремяПоДнямНедели Цикл
		День.Выбран = Ложь;
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ СКИДОК

// Процедура - обработчик события "ПриВыводеСтроки" табличного поля
//"Товары".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры

Процедура ТоварыКачествоНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.Качество.ПолучитьФормуВыбора();
	ФормаВыбора.СправочникСписок.Отбор.Ссылка.Значение = Справочники.Качество.Новый;
	ФормаВыбора.СправочникСписок.Отбор.Ссылка.Использование = Истина;
	ФормаВыбора.СправочникСписок.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеРавно;
	Элемент.Значение = ФормаВыбора.ОткрытьМодально();
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" поля "Товары".
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)
	Если НоваяСтрока Тогда
		Если Товары.Количество() = 1 Тогда
			УстановитьВидимость();
		КонецЕсли;
		Элемент.ТекущиеДанные.ПроцентСкидкиНаценки = ПроцентСкидкиНаценки;
		Элемент.ТекущиеДанные.ОграничениеСкидкиНаценки = ОграничениеСкидкиНаценки;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" реквизита "Номенклатура" поля "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	Если НЕ ЗначениеНеЗаполнено(Элемент.Значение)
	   И Элемент.Значение.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Элемент.Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПослеУдаления" поля "Товары".
//
Процедура ТоварыПослеУдаления(Элемент)
	Если Товары.Количество() = 0 Тогда
		УстановитьВидимость();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ ПОЛУЧАТЕЛЕЙ

// Процедура - обработчик события "НачалоВыбора" поля "Получатель" табличного поля
//"ПолучателиСкидки".
//
Процедура ПолучателиСкидкиПолучательНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора();
		ФормаВыбора.РежимВыбора = Истина;

		ВладелецДоговора = ЭлементыФормы.ПолучателиСкидки.ТекущиеДанные.Контрагент;
		
		ФормаВыбора.СправочникСписок.Отбор.Владелец.Значение = ВладелецДоговора;
		ФормаВыбора.СправочникСписок.Отбор.Владелец.ВидСравнения = ВидСравнения.Равно;
		ФормаВыбора.СправочникСписок.Отбор.Владелец.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;

		ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.Значение = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
		ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.ВидСравнения = ВидСравнения.Равно;
		ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидДоговора.Доступность = Ложь;
		Договор = ФормаВыбора.ОткрытьМодально();
		Если Договор <> Неопределено Тогда
			Элемент.Значение = Договор;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "ПриИзменении" поля "ТипСкидкиНаценки".
//
Процедура ТипСкидкиНаценкиПриИзменении(Элемент)

	ТипСкидки = Элемент.Значение;
	Если ЗначениеНеЗаполнено(ТипСкидки) Тогда
		Возврат;
	КонецЕсли;

	//Заполним документ на основании выбранного типа
	Если НЕ ЗначениеНеЗаполнено(ТипСкидки.Валюта) Тогда
		Валюта = ТипСкидки.Валюта;
	КонецЕсли;
	Если НЕ ЗначениеНеЗаполнено(ТипСкидки.ПроцентСкидкиНаценки) Тогда
		ПроцентСкидкиНаценки = ТипСкидки.ПроцентСкидкиНаценки;
	КонецЕсли;
	Если НЕ ЗначениеНеЗаполнено(ТипСкидки.ОграничениеСкидкиНаценки) Тогда
		ОграничениеСкидкиНаценки = ТипСкидки.ОграничениеСкидкиНаценки;
	КонецЕсли;
	Если НЕ ЗначениеНеЗаполнено(ТипСкидки.Условие) Тогда
		Условие = ТипСкидки.Условие;
		Если НЕ ЗначениеНеЗаполнено(ТипСкидки.ЗначениеУсловия) Тогда
			ЗначениеУсловия = ТипСкидки.ЗначениеУсловия;
		Иначе
			ИзменитьТипЗначенияУсловия();
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеНеЗаполнено(ТипСкидки.ОбщееВремяНачала) Тогда
		ОбщееВремяНачала = ТипСкидки.ОбщееВремяНачала;
	КонецЕсли;
	Если НЕ ЗначениеНеЗаполнено(ТипСкидки.ОбщееВремяОкончания) Тогда
		ОбщееВремяОкончания = ТипСкидки.ОбщееВремяОкончания;
	КонецЕсли;
	Если ТипСкидки.ВремяПоДнямНедели.Количество()= 7 Тогда
		ВремяПоДнямНедели.Загрузить(ТипСкидки.ВремяПоДнямНедели.Выгрузить());
	КонецЕсли;

	Если Условие = Перечисления.УсловияСкидкиНаценки.БезУсловий Тогда
		ЗначениеУсловия = 0;
		ЭлементыФормы.ЗначениеУсловия.Доступность = Ложь;
	Иначе
		ЭлементыФормы.ЗначениеУсловия.Доступность = Истина;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка "ДляВсейНоменклатуры".
//
Процедура ДляВсейНоменклатурыПриИзменении(Элемент)

	УстановитьВидимость();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка "ПоДнямНедели".
//
Процедура ПоДнямНеделиПриИзменении(Элемент)
	УстановитьВидимость();

	Если Элемент.Значение Тогда
		Если ВремяПоДнямНедели.Количество() = 0 Тогда
			Для Сч=0 по 6 Цикл
				СтрокаДень = ВремяПоДнямНедели.Добавить();
				СтрокаДень.ДеньНедели = Перечисления.ДниНедели[Сч];
				СтрокаДень.ВремяНачала = Дата('00010101000000');
				СтрокаДень.ВремяОкончания = Дата('00010101235959');
				СтрокаДень.Выбран = Истина;
			КонецЦикла;
			ОбщееВремяНачала = Дата('00010101000000');
			ОбщееВремяОкончания = Дата('00010101235959');
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка "ДляВсехПолучателей".
//
Процедура ДляВсехПолучателейПриИзменении(Элемент)

	УстановитьВидимость();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ВидСкидки".
//
Процедура ВидСкидкиПриИзменении(Элемент)

	ПриИзмененииВидаСкидок();

КонецПроцедуры

// Процедура - обработчик события "ПередНачаломДобавления" поля "ВремяПоДнямНедели".
//
Процедура ВремяПоДнямНеделиПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ = Истина;
КонецПроцедуры

// Процедура - обработчик события "ПередУдалением" поля "ВремяПоДнямНедели".
//
Процедура ВремяПоДнямНеделиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" поля "ПолучателиСкидки".
//
Процедура ПолучателиСкидкиПриНачалеРедактирования(Элемент, НоваяСтрока)
	Если ВидСкидки = Перечисления.ВидыСкидок.Розничная Тогда
		Элемент.Колонки.Получатель.ЭлементУправления.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады");
		Элемент.Колонки.Получатель.ЭлементУправления.ВыбиратьТип = ложь;
		Элемент.Колонки.Контрагент.Видимость = Ложь;
		Элемент.ТекущиеДанные.Получатель = Справочники.Склады.ПустаяСсылка();
	ИначеЕсли ВидСкидки = Перечисления.ВидыСкидок.Оптовая Тогда
		Элемент.Колонки.Получатель.ЭлементУправления.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов");
		Элемент.Колонки.Получатель.ЭлементУправления.ВыбиратьТип = ложь;
		Элемент.Колонки.Контрагент.Видимость = Истина;
		Элемент.ТекущиеДанные.Получатель = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Иначе
		Сообщить("Выберите вид скидки!");
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "Условие".
//
Процедура УсловиеПриИзменении(Элемент)

	ИзменитьТипЗначенияУсловия();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ОбщееВремяНачало".
//
Процедура ОбщееВремяНачалоПриИзменении(Элемент)
	ИзменитьВремя(Элемент);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ОбщееВремяОкончание".
//
Процедура ОбщееВремяОкончаниеПриИзменении(Элемент)
	ИзменитьВремя(Элемент);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ВремяПоДнямНеделиВремяНачала".
//
Процедура ВремяПоДнямНеделиВремяНачалаПриИзменении(Элемент)
	ТекДень = ЭлементыФормы.ВремяПоДнямНедели.ТекущиеДанные;
	Если ТекДень.ВремяНачала>ТекДень.ВремяОкончания Тогда
		ТекДень.ВремяОкончания = ТекДень.ВремяНачала;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ВремяПоДнямНеделиВремяОкончания".
//
Процедура ВремяПоДнямНеделиВремяОкончанияПриИзменении(Элемент)
	ТекДень = ЭлементыФормы.ВремяПоДнямНедели.ТекущиеДанные;
	Если ТекДень.ВремяНачала>ТекДень.ВремяОкончания Тогда
		ТекДень.ВремяНачала = ТекДень.ВремяОкончания;
	КонецЕсли;
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "");
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПеретаскивание()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары = ЭлементыФормы.Товары.Колонки;
