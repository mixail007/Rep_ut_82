////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

//Проверяет необходимость рассчета автоматических скидок
//
Функция РассчитыватьАвтоматическиеСкидки(ТекВид)

	ИспользованиеСкидок = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата);
	Если ТекВид= Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара Тогда
		Возврат ИспользованиеСкидок.ИспользоватьСкидкиПоКоличествуТовара;
	ИначеЕсли ТекВид = Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента Тогда
		Возврат ИспользованиеСкидок.ИспользоватьСкидкиПоСуммеДокумента;
	ИначеЕсли ТекВид = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты Тогда
		Возврат  ИспользованиеСкидок.ИспользоватьСкидкиПоВидуОплаты;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура();
	СтруктураОбязательныхПолей.Вставить("Валюта");

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения табличной части документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, ПроцентСкидкиНаценки");

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

 // Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоТоварам, ТаблицаПоПолучателям, ТаблицаПоДнямНедели, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.ДляВсехПолучателей Тогда
		ТаблицаПоПолучателям.Очистить();
	КонецЕсли;

	Если ТаблицаПоПолучателям.Количество() = 0 Тогда
		ПустойПолучатель = ТаблицаПоПолучателям.Добавить();
		Если ВидСкидки = Перечисления.ВидыСкидок.Оптовая Тогда
			ПустойПолучатель.Получатель = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Иначе
			ПустойПолучатель.Получатель = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

	Если СтруктураШапкиДокумента.ДляВсейНоменклатуры Тогда
		ТаблицаПоТоварам.Очистить();
	КонецЕсли;

	Если ТаблицаПоТоварам.Количество() = 0 Тогда
		ПустойТовар              = ТаблицаПоТоварам.Добавить();
		ПустойТовар.Номенклатура = Неопределено;
		ПустойТовар.Качество     = Неопределено;
	КонецЕсли;

	НаборДвижений   = Движения.СкидкиНаценкиНоменклатуры;
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	Для каждого ТекСтрокаПолучателя Из ТаблицаПоПолучателям Цикл
		Для каждого ТекСтрокаТовара Из ТаблицаПоТоварам Цикл
			Движение                            = ТаблицаДвижений.Добавить();
			ПустойПолучатель = ЗначениеНеЗаполнено(ТекСтрокаПолучателя.Получатель);
			ПустойКонтрагент = ЗначениеНеЗаполнено(ТекСтрокаПолучателя.Контрагент);
			Если ПустойКонтрагент Тогда
				ПолучательДвижения = ТекСтрокаПолучателя.Получатель;
			Иначе
				Если ПустойПолучатель Тогда
					ПолучательДвижения = ТекСтрокаПолучателя.Контрагент;
				Иначе
					ПолучательДвижения = ТекСтрокаПолучателя.Получатель;
				КонецЕсли;
			КонецЕсли;
			Движение.ПолучательСкидки           = ПолучательДвижения;

			Движение.Номенклатура               = ТекСтрокаТовара.Номенклатура;
			Движение.ХарактеристикаНоменклатуры = ТекСтрокаТовара.ХарактеристикаНоменклатуры;
			Движение.Качество                   = ТекСтрокаТовара.Качество;

			Движение.Условие                    = ?(СтруктураШапкиДокумента.Условие = Перечисления.УсловияСкидкиНаценки.БезУсловий,
													Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара, СтруктураШапкиДокумента.Условие);
			Движение.ЗначениеУсловия            = ?(СтруктураШапкиДокумента.Условие = Перечисления.УсловияСкидкиНаценки.БезУсловий,
													0, СтруктураШапкиДокумента.ЗначениеУсловия);

			Если ТекСтрокаТовара.ПроцентСкидкиНаценки = 0
			 ИЛИ ТекСтрокаТовара.ПроцентСкидкиНаценки = Неопределено Тогда
				Движение.ПроцентСкидкиНаценки      = СтруктураШапкиДокумента.ПроцентСкидкиНаценки;
				Движение.ОграничениеСкидкиНаценки  = СтруктураШапкиДокумента.ОграничениеСкидкиНаценки;
			Иначе
				Движение.ПроцентСкидкиНаценки      = ТекСтрокаТовара.ПроцентСкидкиНаценки;
				Движение.ОграничениеСкидкиНаценки  = ТекСтрокаТовара.ОграничениеСкидкиНаценки;
			КонецЕсли;

			Движение.Валюта           = СтруктураШапкиДокумента.Валюта;
		КонецЦикла;
	КонецЦикла;

	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДатаОкончания,"ДатаОкончания");

	НаборДвижений.мПериод          = СтруктураШапкиДокумента.ДатаНачала;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если (Не Отказ) Тогда
		Движения.СкидкиНаценкиНоменклатуры.ВыполнитьДвижения();
	КонецЕсли;

	ЗаписыватьДвиженияПоВремениСкидок = Ложь;
	НаборДвиженийВремяДействияСкидок   = Движения.ВремяДействияСкидок;
	ТаблицаДвижений = НаборДвиженийВремяДействияСкидок.Выгрузить();
	ВремяНачала = Неопределено;
	ВремяОкончания = Неопределено;
	Для каждого ДеньНедели Из ТаблицаПоДнямНедели Цикл
		Если ДеньНедели.Выбран Тогда
			Движение                            = ТаблицаДвижений.Добавить();
			Движение.ВремяНачала      = ДеньНедели.ВремяНачала;
			Движение.ВремяОкончания   = ДеньНедели.ВремяОкончания;
			Движение.ДеньНедели       = ДеньНедели.ДеньНедели;
			Если ВремяНачала = Неопределено Тогда
				ВремяНачала = ДеньНедели.ВремяНачала;
			ИначеЕсли ВремяНачала <> ДеньНедели.ВремяНачала Тогда
				ЗаписыватьДвиженияПоВремениСкидок = Истина;
			КонецЕсли;
			Если НЕ ЗначениеНеЗаполнено(ДеньНедели.ВремяНачала)
			 Или Движение.ВремяОкончания <> '00010101235959' Тогда
				ЗаписыватьДвиженияПоВремениСкидок = Истина;
			КонецЕсли;

			Если ВремяОкончания = Неопределено Тогда
				ВремяОкончания = ДеньНедели.ВремяОкончания;
			ИначеЕсли ВремяОкончания <> ДеньНедели.ВремяОкончания Тогда
				ЗаписыватьДвиженияПоВремениСкидок = Истина;
			КонецЕсли;
		Иначе
			ЗаписыватьДвиженияПоВремениСкидок = Истина;
		КонецЕсли;
		
	КонецЦикла;

	Если (Не Отказ) И ЗаписыватьДвиженияПоВремениСкидок Тогда
		НаборДвиженийВремяДействияСкидок.мПериод          = СтруктураШапкиДокумента.ДатаНачала;
		НаборДвиженийВремяДействияСкидок.мТаблицаДвижений = ТаблицаДвижений;
		Движения.ВремяДействияСкидок.ВыполнитьДвижения();
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);

	Если ПоДнямНедели Тогда
		ДеньНеВыбран = Истина;
		Для Каждого ДеньНедели Из ВремяПоДнямНедели Цикл
			Если ДеньНедели.Выбран Тогда
				ДеньНеВыбран = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ДеньНеВыбран Тогда
			ОшибкаПриПроведении("Необходимо выбрать дни недели и время скидки" , Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеНеЗаполнено(ДатаНачала) Тогда
		ОшибкаПриПроведении("Необходимо выбрать дату начала действия скидки" , Отказ, Заголовок);
	КонецЕсли;

	Если ДатаНачала > ДатаОкончания
	   И НЕ ЗначениеНеЗаполнено(ДатаОкончания) Тогда
		ОшибкаПриПроведении("Дата начала действия скидки не может быть больше даты окончания действия скидки" , Отказ, Заголовок);
	КонецЕсли;

	ТекВид              = ?(Условие = Перечисления.УсловияСкидкиНаценки.БезУсловий,
	                                             Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара, Условие);
	Если НЕ РассчитыватьАвтоматическиеСкидки(ТекВид) Тогда

		НаименованиеВида = "";
		Если ТекВид = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара Тогда
			НаименованиеВида = "Скидка по количеству товара";
		ИначеЕсли ТекВид = Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента Тогда
			НаименованиеВида = "Скидка по сумме документа";
		ИначеЕсли ТекВид = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты Тогда
			НаименованиеВида = "Скидка по виду оплаты";
		КонецЕсли;

		ОшибкаПриПроведении("В учетной политике не указано изпользование скидок этого вида ("+ НаименованиеВида + ")."
		                    + Символы.ПС + "Скидка не может быть назначена." , Отказ, Заголовок);
	КонецЕсли;

	Если (ДляВсейНоменклатуры 
	 Или Товары.Количество() = 0)
	   И ПроцентСкидкиНаценки = 0 Тогда
		ОшибкаПриПроведении("Необходимо указать процент скидки" , Отказ, Заголовок);
	КонецЕсли;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = СформироватьДеревоПолейЗапросаПоШапке();

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, "");

	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"                     , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                           , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"       , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("Качество"                         , "Качество");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"            , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ОграничениеСкидкиНаценки"         , "ОграничениеСкидкиНаценки");

	РезультатЗапросаПоТоварам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	ТаблицаПоТоварам          = РезультатЗапросаПоТоварам.Выгрузить();

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Контрагент"                     , "Контрагент");
	СтруктураПолей.Вставить("Получатель"                     , "Получатель");

	РезультатЗапросаПоПолучателям = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ПолучателиСкидки", СтруктураПолей);
	ТаблицаПоПолучателям          = РезультатЗапросаПоПолучателям.Выгрузить();

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Выбран"                     , "Выбран");
	СтруктураПолей.Вставить("ДеньНедели"                     , "ДеньНедели");
	СтруктураПолей.Вставить("ВремяНачала"                     , "ВремяНачала");
	СтруктураПолей.Вставить("ВремяОкончания"                     , "ВремяОкончания");

	РезультатЗапросаПоДнямНедели = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВремяПоДнямНедели", СтруктураПолей);
	ТаблицаПоДнямНедели          = РезультатЗапросаПоДнямНедели.Выгрузить();

	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоПолучателям, ТаблицаПоДнямНедели, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры	// ОбработкаПроведения

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	яштДокументОбъектПередЗаписью(ЭтотОбъект, Отказ);
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 
	
КонецПроцедуры


