////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период

Перем мСтруктураПоложенийКолонок;
Перем мКолонкиТовары;
Перем мПоказыватьКод, мПоказыватьАртикул;

// Флаги показа колонок
Перем ПоказыватьКоличество Экспорт;
Перем СоответствиеПроизводителей Экспорт;

Перем мПечатнаяФормаПоУмолчанию;



Процедура СписокПроизводителейНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ОткрытьФормуВыбораПроизводителей();
КонецПроцедуры

Функция ОткрытьФормуВыбораПроизводителей()

	ФормаВыбораПроизводителей = ПолучитьФорму("ФормаВыбораПроизводителей", ЭтаФорма);

	ФормаВыбораПроизводителей.СписокПроизводителей.ЗагрузитьЗначения(Производители.ВыгрузитьКолонку("Производитель"));

	Возврат ФормаВыбораПроизводителей.ОткрытьМодально();

КонецФункции // ОткрытьФормуВыбораПроизводителей()


Процедура СписокПроизводителейОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Производители.Очистить();
	СписокПроизводителей.Очистить();

	// Обновим список Производителей
	ЗаполнитьСписокПроизводителей();

	//УстановитьПодменюВыбораИзмененияПоТипуЦен(ЭлементыФормы.КоманднаяПанельТаблицыТиповЦен.Кнопки.ДействиеИзменить,
	//										  Новый Действие("КоманднаяПанельТаблицыТиповЦенДействиеИзменить"));

	// обновим состав колонок
	ОбновитьСоставКолонок();
	ПолучитьСтруктуруПоложенийКолонок();
	ВидимостьКолонок();

КонецПроцедуры

Процедура ЗаполнитьСписокПроизводителей()

	СписокПроизводителей.Очистить();
	Для Каждого СтрокаПроизводители Из Производители Цикл
		Если НЕ ЗначениеНеЗаполнено(СтрокаПроизводители.Производитель) Тогда
			СписокПроизводителей.Добавить(СтрокаПроизводители.Производитель);
		КонецЕсли;
	КонецЦИкла;

КонецПроцедуры // ЗаполнитьСписокПроизводителей()

Процедура ОбновитьСоставКолонок()

	// надо расположить все нужные колонки в правильном порядке
	// сначала должна идти колонка номенклатуры
	КолонкиТаблицыПроизводителей = ТаблицаПроизводителей.Колонки;
	ОчереднойНомерКолонки = 1;

	ТекущаяКолонка = КолонкиТаблицыПроизводителей.Найти("Контрагент");
	СдвинутьКолонку(ТекущаяКолонка, ОчереднойНомерКолонки);

	Для Каждого СтрокаПроизводители Из Производители Цикл

		Если ЗначениеНеЗаполнено(СтрокаПроизводители.Производитель) Тогда
			Продолжить;
		КонецЕсли;

		НомерСоответствияТекущейКолонки = СоответствиеПроизводителей.Получить(СтрокаПроизводители.Производитель);
		Если НомерСоответствияТекущейКолонки = Неопределено Тогда
			НомерСоответствияТекущейКолонки = СоответствиеПроизводителей.Количество();
			СоответствиеПроизводителей.Вставить(СтрокаПроизводители.Производитель, СоответствиеПроизводителей.Количество());
		КонецЕсли;

		ТекущаяКолонка = КолонкиТаблицыПроизводителей.Найти("количество" + НомерСоответствияТекущейКолонки);
		Если ТекущаяКолонка = Неопределено Тогда
			// надо вставить
			ТаблицаПроизводителей.Колонки.Вставить(ОчереднойНомерКолонки, "количество" + НомерСоответствияТекущейКолонки, ПолучитьОписаниеТиповЧисла(15, 2), СокрЛП(СтрокаПроизводители.Производитель), 10);
			ОчереднойНомерКолонки = ОчереднойНомерКолонки + 1;
		Иначе
			СдвинутьКолонку(ТекущаяКолонка, ОчереднойНомерКолонки);
		КонецЕсли;

	КонецЦикла;

	// все, что за пределами, надо удалить
	Для НомерУдаляемойКолонки = ОчереднойНомерКолонки По КолонкиТаблицыПроизводителей.Количество()-1 Цикл
		КолонкиТаблицыПроизводителей.Удалить(ОчереднойНомерКолонки);
	КонецЦикла;

	ЭлементыФормы.ТаблицаПроизводителей.СоздатьКолонки();

	Для Каждого СтрокаПроизводители Из Производители Цикл
		й = ЭлементыФормы.ТаблицаПроизводителей.Колонки.Найти("количество"+СоответствиеПроизводителей[СтрокаПроизводители.Производитель]);
		Если й <> Неопределено Тогда
			й.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
		КонецЕсли;
	КонецЦикла;
	
	// Установим недостающие параметры
	УстановитьНедостающиеПараметры();

КонецПроцедуры // ОбновитьСоставКолонок()

Процедура УстановитьНедостающиеПараметры()

	// Добавим недостающие колонки

	ЭлементыФормы.ТаблицаПроизводителей.Колонки.ИндексСтрокиТаблицыПроизводителей.ТолькоПросмотр = Истина;

	// Установим необходимые параметры номенклатуры
	//ЭлементыФормы.ТаблицаПроизводителей.Колонки.Контрагент.ЭлементУправления.УстановитьДействие("ПриИзменении", Новый Действие("ТаблицаПроизводителейПриИзменении"));
	ЭлементыФормы.ТаблицаПроизводителей.Колонки.Контрагент.ЭлементУправления.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ЭлементыФормы.ТаблицаПроизводителей.Колонки.Контрагент.АвтоОтметкаНезаполненного = Истина;

КонецПроцедуры // УстановитьНедостающиеПараметры()

Процедура ПолучитьСтруктуруПоложенийКолонок()

	ИмяСохраненныхЗначений = Метаданные().Имя
	                         + "_" + ПоказыватьКоличество;
	                         

	мСтруктураПоложенийКолонок = Новый Структура();
	мСтруктураПоложенийКолонок.Вставить("Количество",ПолучитьПоложениеКолонки(ИмяСохраненныхЗначений+"_0"));

КонецПроцедуры // ПолучитьСтруктуруПоложенийКолонок()

Процедура ВидимостьКолонок()

	БылаНоваяКолонка = Ложь;
	Для Каждого КолонкаПроизводители Из ЭлементыФормы.ТаблицаПроизводителей.Колонки Цикл
		ПризнакКолонки = Лев(КолонкаПроизводители.Имя, 4);
		Если ПризнакКолонки = "коли" Тогда
			КолонкаПроизводители.Видимость = ПоказыватьКоличество;
			КолонкаПроизводители.Положение = мСтруктураПоложенийКолонок.Количество;
			БылаНоваяКолонка = Истина;
		КонецЕсли	
	КонецЦикла;

КонецПроцедуры // ВидимостьКолонок()

Процедура СдвинутьКолонку(Колонка, ОчереднойНомерКолонки)

	КолонкиПроизводители = ТаблицаПроизводителей.Колонки;

	ТекущийНомерКолонки = КолонкиПроизводители.Индекс(Колонка);
	Если ТекущийНомерКолонки <> ОчереднойНомерКолонки Тогда
		// сдвинем колонку
		КолонкиПроизводители.Сдвинуть(ТекущийНомерКолонки, ОчереднойНомерКолонки - ТекущийНомерКолонки);
	КонецЕсли;

	ВсегоКолонок          = КолонкиПроизводители.Количество();
	ОчереднойНомерКолонки = ОчереднойНомерКолонки + 1;
	ОчереднойНомерКолонки = ?(ОчереднойНомерКолонки > ВсегоКолонок, ВсегоКолонок, ОчереднойНомерКолонки);

КонецПроцедуры // СдвинутьКолонку()

Функция ПолучитьПоложениеКолонки(ИмяСохраненногоЗначения)

	ПоложениеКолонкиСтрока = ВосстановитьЗначение(ИмяСохраненногоЗначения);

	Если ПоложениеКолонкиСтрока = "На следующей строке" Тогда
		Возврат ПоложениеКолонки.НаСледующейСтроке;
	ИначеЕсли ПоложениеКолонкиСтрока = "В той же колонке" Тогда
		Возврат ПоложениеКолонки.ВТойЖеКолонке;
	ИначеЕсли ПоложениеКолонкиСтрока = "Новая колонка" Тогда
		Возврат ПоложениеКолонки.НоваяКолонка;
	Иначе

		// Значение еще не было сохранено
		// Надо взять настройку по умолчанию и сохранить ее для последующей работы
		Если Прав(ИмяСохраненногоЗначения, 1) = "0" Тогда
			// Цена на новой колонке
			ПоложениеКолонкиСтрока = "Новая колонка";
		ИначеЕсли Прав(ИмяСохраненногоЗначения, 1) = "1" Тогда
			// Валюта на следующей строке
			ПоложениеКолонкиСтрока = "На следующей строке";
		Иначе
			// Основная единица измерения и процент скидки/наценки в той же колонке
			ПоложениеКолонкиСтрока = "В той же колонке";
		КонецЕсли;
		СохранитьЗначение(ИмяСохраненногоЗначения, ПоложениеКолонкиСтрока);

		Возврат ПолучитьПоложениеКолонки(ИмяСохраненногоЗначения);
	КонецЕсли;

КонецФункции // ПолучитьПоложениеКолонки()

Процедура ТаблицаПроизводителейПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ЭлементыФормы.ТаблицаПроизводителей.Колонки.Найти("ИндексСтрокиТаблицыПроизводителей") <> Неопределено
		И ЭлементыФормы.ТаблицаПроизводителей.Колонки.ИндексСтрокиТаблицыПроизводителей.Видимость Тогда
		ОформлениеСтроки.Ячейки.ИндексСтрокиТаблицыПроизводителей.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ИндексСтрокиТаблицыПроизводителей.Текст = Формат(ТаблицаПроизводителей.Индекс(ДанныеСтроки) + 1,"ЧРГ=");
	КонецЕсли;
		
	// Поставим автоотметку незаполненного.
	Для каждого СтрокаПроизводители Из Производители Цикл
		
		НомерСоответствияТекущейКолонки = СоответствиеПроизводителей.Получить(СтрокаПроизводители.Производитель);
	
	КонецЦикла;
	
КонецПроцедуры


Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	СписокДобавленныхПроизводителей = Новый СписокЗначений;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Если ЗначениеВыбора.Команда = "ИзменениеПроизводителей" Тогда

			Производители.Очистить();
			Для Каждого ЭлементСпискаПроизводителей Из ЗначениеВыбора.СписокПроизводителей Цикл
				СтрокаПроизводителей = Производители.Добавить();
				СтрокаПроизводителей.Производитель = ЭлементСпискаПроизводителей.Значение;
				Если СписокПроизводителей.НайтиПоЗначению(СтрокаПроизводителей.Производитель) = Неопределено Тогда
					СписокДобавленныхПроизводителей.Добавить(СтрокаПроизводителей.Производитель);
				КонецЕсли;
			КонецЦикла;

			ЗаполнитьСписокПроизводителей();

			// Установим кнопки подменю "Изменить"
			//УстановитьПодменюВыбораИзмененияПоТипуЦен(ЭлементыФормы.КоманднаяПанельТаблицыТиповЦен.Кнопки.ДействиеИзменить,
			//                                          Новый Действие("КоманднаяПанельТаблицыТиповЦенДействиеИзменить"));

		ИначеЕсли ЗначениеВыбора.Команда = "НастройкаПараметров" Тогда

			ДеревоКолонок = ЗначениеВыбора.ДеревоКолонок;
			Для Каждого СтрокаДерева Из ДеревоКолонок.Строки Цикл
				ЭтаФорма[СтрокаДерева.КолонкаИмя] = СтрокаДерева.Пометка;
			КонецЦикла;

		ИначеЕсли ЗначениеВыбора.Команда = "ЗаполнениеТабличнойЧасти"
		      ИЛИ ЗначениеВыбора.Команда = "ПодборВТабличнуюЧасть" Тогда

			//ОбработкаПодбора("Товары",ЗначениеВыбора);

		КонецЕсли;
	КонецЕсли;

	// обновим состав колонок
	ОбновитьСоставКолонок();
	ПолучитьСтруктуруПоложенийКолонок();
	ВидимостьКолонок();
	//ДоступностьКолонок();

КонецПроцедуры // ОбработкаВыбора()


Процедура ТаблицаПроизводителейВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры


Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	ПоказыватьКоличество           = истина;

	ПоказыватьКоличество           = ?(ПоказыватьКоличество = Неопределено, Истина, ПоказыватьКоличество);
	СоответствиеПроизводителей = Новый Соответствие;

	Для Каждого СтрокаПроизводители Из Производители Цикл
		НомерСоответствияТекущейКолонки = Производители.Индекс(СтрокаПроизводители);
		СоответствиеПроизводителей.Вставить(СтрокаПроизводители.Производитель, НомерСоответствияТекущейКолонки);

		Если ТаблицаПроизводителей.Колонки.Найти("количество"+НомерСоответствияТекущейКолонки) = Неопределено Тогда
			ТаблицаПроизводителей.Колонки.Добавить("количество"+НомерСоответствияТекущейКолонки, ПолучитьОписаниеТиповЧисла(15, 2), СокрЛП(СтрокаПроизводители.Производитель), 10);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры


Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
		Контрагенты.Очистить();
	Для Каждого СтрокаТаблицыПроизводителей Из ТаблицаПроизводителей Цикл
		Для Каждого СтрокаПроизводители Из Производители Цикл
			НомерСоответствияТекущейКолонки = СоответствиеПроизводителей.Получить(СтрокаПроизводители.Производитель);
			НоваяСтрока = Контрагенты.Добавить();
			НоваяСтрока.ИндексСтрокиТаблицыПроизводителей     = ТаблицаПроизводителей.Индекс(СтрокаТаблицыПроизводителей);
			НоваяСтрока.Контрагент                = СтрокаТаблицыПроизводителей.Контрагент;
			НоваяСтрока.Производитель             = СтрокаПроизводители.Производитель;
			НоваяСтрока.Количество                = СтрокаТаблицыПроизводителей["количество"    + НомерСоответствияТекущейКолонки];
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры


Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// быть может, это ввод на основании
		Если ЗначениеНеЗаполнено(ПараметрОснование) Тогда
			// Заполнить реквизиты значениями по умолчанию.
			ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь);
			УстановитьНомерДокумента(ЭтотОбъект);
		КонецЕсли;

	КонецЕсли;

	// Проверим корректность записанного документа, если он некорректен, исправим его
	Если Производители.Количество() = 0 И Контрагенты.Количество() > 0 Тогда
		СообщитьОбОшибке("Документ " + СокрЛП(Ссылка) + " был записан некорректно! Информация о планах очищена.");
		Контрагенты.Очистить();
	КонецЕсли;

	ЗаполнитьСписокПроизводителей();

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Контрагент");

	// Установить ограничение - изменять видимоть колонок для таличного поля 
	УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ТаблицаПроизводителей.Колонки, СтруктураКолонок);

	ЗаполнитьТаблицуПроизводителейФормы();

	ЭлементыФормы.ТаблицаПроизводителей.СоздатьКолонки();

	Для Каждого СтрокаПроизводители Из Производители Цикл
		й = ЭлементыФормы.ТаблицаПроизводителей.Колонки.Найти("количество"+СоответствиеПроизводителей[СтрокаПроизводители.Производитель]);
		Если й <> Неопределено Тогда
			й.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
		КонецЕсли;
	КонецЦикла;
	
	// Установим недостающие параметры
	УстановитьНедостающиеПараметры();

	ПолучитьСтруктуруПоложенийКолонок();
	ВидимостьКолонок();
	//ДоступностьКолонок();

	// Заполнить подменю выбора печатных форм.
	СписокМакетов = ЭтотОбъект.ПолучитьСписокПечатныхФорм();
	УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати,
										   СписокМакетов,
										   Новый Действие("ДействияФормыДействиеВыбратьПечатнуюФормы"));

	//УстановитьПодменюВыбораИзмененияПоТипуЦен(ЭлементыФормы.КоманднаяПанельТаблицыТиповЦен.Кнопки.ДействиеИзменить,
	//                                          Новый Действие("КоманднаяПанельТаблицыТиповЦенДействиеИзменить"));

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	// Установить печатную форму по умолчанию.
	УстановитьКнопкуПечати(ЭтотОбъект.Метаданные().Имя, ЭтаФорма, СписокМакетов, мПечатнаяФормаПоУмолчанию);

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	

	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 
КонецПроцедуры

Процедура ЗаполнитьТаблицуПроизводителейФормы()

	Если Производители.Количество() = 0 Тогда

		// Документ пуст
		Возврат;

	КонецЕсли;

	ТаблицаКонтрагентов = Контрагенты.Выгрузить();
	ТаблицаКонтрагентов.Сортировать("ИндексСтрокиТаблицыПроизводителей, Контрагент, Производитель");

	// Заполним все требуемые реквизиты

	КолонкиТаблицыПроизводителей = ТаблицаПроизводителей.Колонки;

	ТекущийИндексСтрокиТаблицыПроизводителей = Неопределено;
	НоваяСтрока = Неопределено;
	Для Каждого СтрокаТаблицыКонтрагентов Из ТаблицаКонтрагентов Цикл

		Если ТекущийИндексСтрокиТаблицыПроизводителей <> СтрокаТаблицыКонтрагентов.ИндексСтрокиТаблицыПроизводителей
		 Или НоваяСтрока.Контрагент <> СтрокаТаблицыКонтрагентов.Контрагент  Тогда
			НоваяСтрока = ТаблицаПроизводителей.Добавить();
			НоваяСтрока.Контрагент               = СтрокаТаблицыКонтрагентов.Контрагент;
			ТекущийИндексСтрокиТаблицыПроизводителей = СтрокаТаблицыКонтрагентов.ИндексСтрокиТаблицыПроизводителей;
		КонецЕсли;

		НомерСоответствияТекущейКолонки = СоответствиеПроизводителей.Получить(СтрокаТаблицыКонтрагентов.Производитель);

		НоваяСтрока["количество"+НомерСоответствияТекущейКолонки]    = СтрокаТаблицыКонтрагентов.количество;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТаблицуПроизводителейФормы()
