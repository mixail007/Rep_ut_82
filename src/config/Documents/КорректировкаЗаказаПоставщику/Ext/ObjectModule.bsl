Перем мВалютаРегламентированногоУчетаОрганизаций Экспорт;
Перем мВалютаУправленческогоУчета Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

// Для обеспечения работы глоб. процедур и функций.
Перем ВалютаДокумента Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокумента()

	Если ЗначениеНеЗаполнено(ЗаказПоставщику) Тогда
		Сообщить("Не указан заказ поставщика");
		Возврат Неопределено;
	КонецЕсли;

	Если ЗначениеНеЗаполнено(ЗаказПоставщику.Организация) Тогда
		Сообщить("В документе основании не указана орагнизация");
		Возврат Неопределено;
	КонецЕсли;

	Если ЗначениеНеЗаполнено(ЗаказПоставщику.Контрагент) Тогда
		Сообщить("В документе основании не указан контрагент");
		Возврат Неопределено;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ЗаказПоставщику,
	|	ЗаказПоставщику.Контрагент  КАК Контрагент,
	|	ЗаказПоставщику.Организация КАК Организация,
	|	СуммаДокумента,
	|	ЗаказПоставщику.ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.Артикул            КАК Артикул,
	|		Номенклатура.Код                КАК Код,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Количество,
	|		ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|		Цена,
	|		Сумма,
	|		СуммаНДС,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		NULL КАК Серия
	|	),
	|	ВозвратнаяТара.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.Артикул            КАК Артикул,
	|		Номенклатура.Код                КАК Код,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Количество,
	|		Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|		Цена,
	|		Сумма,
	|		0 КАК СуммаНДС,
	|		NULL КАК Характеристика,
	|		NULL КАК Серия
	|	)
	|ИЗ
	|	Документ.КорректировкаЗаказаПоставщику КАК КорректировкаЗаказаПоставщику
	|
	|ГДЕ
	|	КорректировкаЗаказаПоставщику.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки,
	|	ВозвратнаяТара.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировкаЗаказаПоставщику_КорректировкаЗаказа";

	Макет = ПолучитьМакет("КорректировкаЗаказа");
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок|НомерСтроки");
	ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Корректировка заказа поставщику");
	ТабДокумент.Вывести(ОбластьМакета);
	Если ВыводитьКоды Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок|КолонкаКодов");
		ТабДокумент.Присоединить(ОбластьМакета);
	КонецЕсли;
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок|Данные");
	ТабДокумент.Присоединить(ОбластьМакета);
	
	ПредставлениеОрганизации = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ПредставлениеКонтрагента = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.ЗаказПоставщику.Контрагент, Шапка.Дата), "ПолноеНаименование,");

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеКонтрагента;
	ОбластьМакета.Параметры.Поставщик = Шапка.Контрагент;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.Получатель = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Заказ");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеЗаказа = СформироватьЗаголовокДокумента(Шапка.ЗаказПоставщику, Шапка.ЗаказПоставщику.Метаданные().Представление());
	ТабДокумент.Вывести(ОбластьМакета);

	ЕстьСтроки = Ложь;
	Всего    = 0;
	Сумма    = 0;
	СуммаНДС = 0;
	СуммаНП  = 0;
	ТекНомер = 0;

	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Если ВыборкаСтрокТовары.Количество > 0 Тогда

			Если НЕ ЕстьСтроки Тогда
				ОбластьСекции = Макет.ПолучитьОбласть("ЗаголовокВПлюс");

				ТабДокумент.Вывести(ОбластьСекции);
				
				ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
				ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");

				ТабДокумент.Вывести(ОбластьНомера);
				Если ВыводитьКоды Тогда
					ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
					ТабДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьДанных);
				
				ЕстьСтроки = Истина;
			КонецЕсли;

			ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");

			ТекНомер = ТекНомер + 1;
			ОбластьНомера.Параметры.НомерСтроки = ТекНомер;
			ТабДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьДанных.Параметры.Товар       = ВыборкаСтрокТовары.Товар + ПредставлениеСерий(ВыборкаСтрокТовары);
			ТабДокумент.Присоединить(ОбластьДанных);
			
			Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
			СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;

		КонецЕсли; 
	КонецЦикла;
	
	ВыборкаСтрокТовары = Шапка.ВозвратнаяТара.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Если ВыборкаСтрокТовары.Количество > 0 Тогда

			Если НЕ ЕстьСтроки Тогда
				ОбластьСекции = Макет.ПолучитьОбласть("ЗаголовокВПлюс");
				ТабДокумент.Вывести(ОбластьСекции);
				
				ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
				ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");

				ТабДокумент.Вывести(ОбластьНомера);
				Если ВыводитьКоды Тогда
					ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
					ТабДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьДанных);
				
				ЕстьСтроки = Истина;
			КонецЕсли;

			ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");

			ТекНомер = ТекНомер + 1;
			ОбластьНомера.Параметры.НомерСтроки = ТекНомер;
			ТабДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьДанных.Параметры.Товар = ВыборкаСтрокТовары.Товар + ПредставлениеСерий(ВыборкаСтрокТовары);
			ТабДокумент.Присоединить(ОбластьДанных);

		КонецЕсли; 
	КонецЦикла;
	
	Если ЕстьСтроки Тогда

		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
		ТабДокумент.Вывести(ОбластьМакета);
		Если ВыводитьКоды Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
			ТабДокумент.Присоединить(ОбластьМакета);
		КонецЕсли;
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицы|Данные");
		ТабДокумент.Присоединить(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ТабДокумент.Вывести(ОбластьМакета);
		Если ВыводитьКоды Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
			ТабДокумент.Присоединить(ОбластьМакета);
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого|Данные");
		ОбластьМакета.Параметры.ТекстИтого = "По разделу:";
		ОбластьМакета.Параметры.Всего = Сумма;
		ТабДокумент.Присоединить(ОбластьМакета);

	КонецЕсли;

	ЕстьСтроки  = Ложь;
	ВсегоВМинус = 0;
	СуммаНДС    = 0;
	СуммаНП     = 0;
	ТекНомер    = 0;
	
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Если ВыборкаСтрокТовары.Количество < 0 Тогда

			Если НЕ ЕстьСтроки Тогда
				ОбластьСекции = Макет.ПолучитьОбласть("ЗаголовокВМинус");
				ТабДокумент.Вывести(ОбластьСекции);
				
				ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
				ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");

				ТабДокумент.Вывести(ОбластьНомера);
				Если ВыводитьКоды Тогда
					ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
					ТабДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьДанных);
				
				ЕстьСтроки = Истина;
			КонецЕсли;

			ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");

			ТекНомер = ТекНомер + 1;
			ОбластьНомера.Параметры.НомерСтроки = ТекНомер;
			ТабДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьДанных.Параметры.Товар       = ВыборкаСтрокТовары.Товар + ПредставлениеСерий(ВыборкаСтрокТовары);
			ОбластьДанных.Параметры.Количество = -ВыборкаСтрокТовары.Количество;
			ОбластьДанных.Параметры.Сумма      = -ВыборкаСтрокТовары.Сумма;
			ТабДокумент.Присоединить(ОбластьДанных);
			
			ВсегоВМинус = ВсегоВМинус + ВыборкаСтрокТовары.Сумма;
			СуммаНДС    = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;

		КонецЕсли; 
	КонецЦикла;

	ВыборкаСтрокТовары = Шапка.ВозвратнаяТара.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Если ВыборкаСтрокТовары.Количество < 0 Тогда

			Если НЕ ЕстьСтроки Тогда
				ОбластьСекции = Макет.ПолучитьОбласть("ЗаголовокВМинус");
				ТабДокумент.Вывести(ОбластьСекции);
				
				ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
				ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");

				ТабДокумент.Вывести(ОбластьНомера);
				Если ВыводитьКоды Тогда
					ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
					ТабДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьДанных);
				
				ЕстьСтроки = Истина;
			КонецЕсли;

			ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");

			ТекНомер = ТекНомер + 1;
			ОбластьНомера.Параметры.НомерСтроки = ТекНомер;
			ТабДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьДанных.Параметры.Товар      = ВыборкаСтрокТовары.Товар;
			ОбластьДанных.Параметры.Количество = -ВыборкаСтрокТовары.Количество;
			ОбластьДанных.Параметры.Сумма      = -ВыборкаСтрокТовары.Сумма;
			ТабДокумент.Присоединить(ОбластьДанных);

		КонецЕсли; 
	КонецЦикла;
	
	Если ЕстьСтроки Тогда
		
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
		ТабДокумент.Вывести(ОбластьМакета);
		Если ВыводитьКоды Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
			ТабДокумент.Присоединить(ОбластьМакета);
		КонецЕсли;
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицы|Данные");
		ТабДокумент.Присоединить(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ТабДокумент.Вывести(ОбластьМакета);
		
		Если ВыводитьКоды Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
			ТабДокумент.Присоединить(ОбластьМакета);
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого|Данные");
		ОбластьМакета.Параметры.ТекстИтого = "По разделу:";
		ОбластьМакета.Параметры.Всего = -ВсегоВМинус;
		ТабДокумент.Присоединить(ОбластьМакета);
	
	КонецЕсли;

	ОбластьИтого = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ТабДокумент.Вывести(ОбластьИтого);
	Если ВыводитьКоды Тогда
		ОбластьИтого = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
		ТабДокумент.Присоединить(ОбластьИтого);
	КонецЕсли;
	ОбластьИтого = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьИтого.Параметры.ТекстИтого = "Итого по документу:";
	ОбластьИтого.Параметры.Всего = ФорматСумм(Сумма + ВсегоВМинус);
	ТабДокумент.Присоединить(ОбластьИтого);

	Если Шапка.УчитыватьНДС Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ТабДокумент.Вывести(ОбластьМакета);
		Если ВыводитьКоды Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
			ТабДокумент.Присоединить(ОбластьМакета);
		КонецЕсли;
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьМакета.Параметры.ВсегоНДС = ФорматСумм(Товары.Итог("СуммаНДС"));
		ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Присоединить(ОбластьМакета);
	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = (Сумма + ВсегоВМинус)+ ?(Шапка.СуммаВключаетНДС, 0, Товары.Итог("СуммаНДС"));
	ОбластьМакета.Параметры.ИтоговаяСтрока =
		"Всего наименований "
		+ (Шапка.ВозвратнаяТара.Выбрать().Количество() + Шапка.Товары.Выбрать().Количество())
		+ ", на сумму " + ФорматСумм(СуммаКПрописи, Шапка.ЗаказПоставщикуВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = "Итоговая сумма изменения заказа: " + 
		СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ЗаказПоставщикуВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "КорректировкаЗаказа" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьДокумента();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();

	КонецЕсли;

	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;

	СписокМакетов.Добавить("КорректировкаЗаказа", "Корректировка заказа поставщику");

	ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

#КонецЕсли

// Заполняет переданную табличную часть по остаткам
//
// Параметры:
//  ТабличнаяЧасть - табличная часть.
//
Процедура ЗаполнитьТабличнуюЧастьПоОстаткам(ТабличнаяЧасть)

	Если ТабличнаяЧасть = Товары Тогда
		ЭтоТовары = Истина;
	Иначе
		ЭтоТовары = Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", ЗаказПоставщику);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ЗаказПоставщику.ДоговорКонтрагента);
	
	Если ЭтоТовары Тогда
		Запрос.УстановитьПараметр("ТоварТара", Перечисления.ТоварТара.Товар);
	Иначе
		Запрос.УстановитьПараметр("ТоварТара", Перечисления.ТоварТара.Тара);
	КонецЕсли; 

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток            КАК Количество,
	|	ЗаказыПоставщикамОстатки.Номенклатура,
	|	ЗаказыПоставщикамОстатки.Цена,
	|	ЗаказыПоставщикамОстатки.ЕдиницаИзмерения             КАК ЕдиницаИзмерения,
	|	ЗаказыПоставщикамОстатки.ЕдиницаИзмерения.Коэффициент КАК ЕдиницаИзмеренияКоэффициент,
	|	ЗаказыПоставщикамОстатки.Номенклатура.СтавкаНДС       КАК СтавкаНДС,
	|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры,
	|	Размещение.ЗаказПокупателя,
	|   Размещение.КоличествоОстаток                          КАК ОстатокПоРазмещению
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(,ДоговорКонтрагента = &ДоговорКонтрагента И ЗаказПоставщику = &Заказ И ТоварТара = &ТоварТара) КАК ЗаказыПоставщикамОстатки
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|   РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(, ЗаказПоставщику = &Заказ) КАК Размещение
	|ПО                    
	|   ЗаказыПоставщикамОстатки.Номенклатура = Размещение.Номенклатура
	|   И ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры = Размещение.ХарактеристикаНоменклатуры";
	
	
	РезультатЗапроса = Запрос.Выполнить();
	ТабличнаяЧасть.Очистить();
	
	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл

		// Определим цену позиции заказа:

		ЕдиницаИзмеренияКоэффициент = ?(Выборка.ЕдиницаИзмеренияКоэффициент <> NULL, Выборка.ЕдиницаИзмеренияКоэффициент, 0);

		НоваяСтрока = ТабличнаяЧасть.Добавить();
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		НоваяСтрока.ЗаказПокупателя = Выборка.ЗаказПокупателя;
		НоваяСтрока.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент = ЕдиницаИзмеренияКоэффициент;
		НоваяСтрока.Количество = - Выборка.Количество;

		ЧислоСтавкаНДС = ПолучитьСтавкуНДС(Выборка.СтавкаНДС);

		Если (УчитыватьНДС И СуммаВключаетНДС) ИЛИ Не УчитыватьНДС Тогда
			ЧислоСтавкаНДС = 0;
		КонецЕсли;

		Если ЭтоТовары Тогда
			
			НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;

			РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);

			Если УчитыватьНДС Тогда
				НоваяСтрока.СтавкаНДС = Выборка.СтавкаНДС;
			КонецЕсли;
		КонецЕсли; 
		НоваяСтрока.Цена = Выборка.Цена;
		РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);

	КонецЦикла; 

	ЗаполнитьПлановуюСебестоимостьНаОсновании(ЭтотОбъект, ЗаказПоставщику, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоОстаткам()

// Процедура копирует таб.часть Товары из заказа в документ
//
// Параметры:
//  Нет.
//
Процедура СкопироватьТовары() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПоставщику", ЗаказПоставщику);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПоставщикуТовары.ЕдиницаИзмерения,
	|	ЗаказПоставщикуТовары.ЕдиницаИзмеренияМест,
	|	ЗаказПоставщикуТовары.Количество,
	|	ЗаказПоставщикуТовары.КоличествоМест,
	|	ЗаказПоставщикуТовары.Коэффициент,
	|	ЗаказПоставщикуТовары.Номенклатура,
	|	ЗаказПоставщикуТовары.ЗаказПокупателя,
	|	ЗаказПоставщикуТовары.СтавкаНДС,
	|	ЗаказПоставщикуТовары.Сумма,
	|	ЗаказПоставщикуТовары.СуммаНДС,
	|	ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры,
	|	ЗаказПоставщикуТовары.Цена,
	|	ЗаказПоставщикуТовары.Ссылка.ВалютаДокумента	  КАК ВалютаДокумента,
	|	ВЫБОР КОГДА ЗаказПоставщикуТовары.Ссылка.ВалютаДокумента = ЗаказПоставщикуТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		ЗаказПоставщикуТовары.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                             КАК КурсДокумента,
	|	ВЫБОР КОГДА ЗаказПоставщикуТовары.Ссылка.ВалютаДокумента = ЗаказПоставщикуТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		ЗаказПоставщикуТовары.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                             КАК КратностьДокумента,
	|	ЗаказПоставщикуТовары.Ссылка.СуммаВключаетНДС	  КАК СуммаВключаетНДС,
	|	ЗаказПоставщикуТовары.Ссылка.УчитыватьНДС		  КАК УчитыватьНДС
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|
	|ГДЕ
	|	ЗаказПоставщикуТовары.Ссылка.Ссылка = &ЗаказПоставщику";

	КратностьДокумента = ПолучитьКурсВалюты(ЗаказПоставщику.ВалютаДокумента,Дата).Кратность;
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.ЕдиницаИзмеренияМест       = Выборка.ЕдиницаИзмеренияМест;
		НоваяСтрока.Коэффициент                = Выборка.Коэффициент;
		НоваяСтрока.КоличествоМест             = -Выборка.КоличествоМест;
		НоваяСтрока.Количество                 = -Выборка.Количество;
		НоваяСтрока.ЗаказПокупателя            = Выборка.ЗаказПокупателя;
		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;

		НоваяСтрока.Сумма = ПересчитатьЦенуПриИзмененииФлаговНалогов(-Выборка.Сумма,
										Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
										Выборка.СуммаВключаетНДС,
										УчитыватьНДС,
										СуммаВключаетНДС,
										ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		ПриИзмененииСуммыТабЧасти(НоваяСтрока, ЭтотОбъект, глТекущийПользователь);
		РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
	КонецЦикла;

	ЗаполнитьПлановуюСебестоимостьНаОсновании(ЭтотОбъект, ЗаказПоставщику, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // СкопироватьТовары()

// Процедура копирует таб.часть ВозвратнаяТара из заказа в документ
//
// Параметры:
//  Нет.
//
Процедура СкопироватьВозвратнуюТару() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПоставщику", ЗаказПоставщику);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПоставщикуВозвратнаяТара.Количество,
	|	ЗаказПоставщикуВозвратнаяТара.Номенклатура,
	|	ЗаказПоставщикуВозвратнаяТара.ЗаказПокупателя,
	|	ЗаказПоставщикуВозвратнаяТара.Сумма,
	|	ЗаказПоставщикуВозвратнаяТара.Цена,
	|	ЗаказПоставщикуВозвратнаяТара.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР КОГДА ЗаказПоставщикуВозвратнаяТара.Ссылка.ВалютаДокумента = ЗаказПоставщикуВозвратнаяТара.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		ЗаказПоставщикуВозвратнаяТара.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                                   КАК КурсДокумента,
	|	ВЫБОР КОГДА ЗаказПоставщикуВозвратнаяТара.Ссылка.ВалютаДокумента = ЗаказПоставщикуВозвратнаяТара.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		ЗаказПоставщикуВозвратнаяТара.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                                   КАК КратностьДокумента
	|ИЗ
	|	Документ.ЗаказПоставщику.ВозвратнаяТара КАК ЗаказПоставщикуВозвратнаяТара
	|
	|ГДЕ
	|	ЗаказПоставщикуВозвратнаяТара.Ссылка.Ссылка = &ЗаказПоставщику";
	
	КратностьДокумента = ПолучитьКурсВалюты(ЗаказПоставщику.ВалютаДокумента,Дата).Кратность;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КратностьИзВыборки = ПолучитьКурсВалюты(Выборка.ВалютаДокумента,ЗаказПоставщику.Дата).Кратность;

		НоваяСтрока = ВозвратнаяТара.Добавить();
		НоваяСтрока.Номенклатура    = Выборка.Номенклатура;
		НоваяСтрока.Количество      = -1 * Выборка.Количество;
		НоваяСтрока.ЗаказПокупателя = Выборка.ЗаказПокупателя;
		НоваяСтрока.Цена            = Выборка.Цена;
		НоваяСтрока.Сумма           = -1 * Выборка.Сумма;
	КонецЦикла;

КонецПроцедуры // СкопироватьВозвратнуюТару()

// Процедура копирует таб.часть Услуги из заказа в документ
//
// Параметры:
//  Нет.
//
Процедура СкопироватьУслуги() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПоставщику", ЗаказПоставщику);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПоставщикуУслуги.Количество,
	|	ЗаказПоставщикуУслуги.Номенклатура,
	|	ЗаказПоставщикуУслуги.СтавкаНДС,
	|	ЗаказПоставщикуУслуги.Сумма,
	|	ЗаказПоставщикуУслуги.СуммаНДС,
	|	ЗаказПоставщикуУслуги.Цена,
	|	ЗаказПоставщикуУслуги.Ссылка.ВалютаДокумента	  КАК ВалютаДокумента,
	|	ВЫБОР КОГДА ЗаказПоставщикуУслуги.Ссылка.ВалютаДокумента = ЗаказПоставщикуУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		ЗаказПоставщикуУслуги.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                             КАК КурсДокумента,
	|	ВЫБОР КОГДА ЗаказПоставщикуУслуги.Ссылка.ВалютаДокумента = ЗаказПоставщикуУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		ЗаказПоставщикуУслуги.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                             КАК КратностьДокумента,
	|	ЗаказПоставщикуУслуги.Ссылка.СуммаВключаетНДС	  КАК СуммаВключаетНДС,
	|	ЗаказПоставщикуУслуги.Ссылка.УчитыватьНДС		  КАК УчитыватьНДС
	|ИЗ
	|	Документ.ЗаказПоставщику.Услуги КАК ЗаказПоставщикуУслуги
	|
	|ГДЕ
	|	ЗаказПоставщикуУслуги.Ссылка.Ссылка = &ЗаказПоставщику И
	|	ЗаказПоставщикуУслуги.Номенклатура.Услуга";

	КратностьДокумента = ПолучитьКурсВалюты(ЗаказПоставщику.ВалютаДокумента,Дата).Кратность;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
        НоваяСтрока = Услуги.Добавить();
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		НоваяСтрока.Количество   = -Выборка.Количество;
		НоваяСтрока.СтавкаНДС    = Выборка.СтавкаНДС;

		НоваяСтрока.Сумма = ПересчитатьЦенуПриИзмененииФлаговНалогов(
			-Выборка.Сумма,
			Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
			Выборка.СуммаВключаетНДС,
			УчитыватьНДС,
			СуммаВключаетНДС,
			ПолучитьСтавкуНДС( НоваяСтрока.СтавкаНДС));
			
		ПриИзмененииСуммыТабЧасти ( НоваяСтрока, ЭтотОбъект, глТекущийПользователь);
		РассчитатьСуммуНДСТабЧасти( НоваяСтрока, ЭтотОбъект);
		
	КонецЦикла;
	
КонецПроцедуры // СкопироватьУслуги()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// По виду операции определяет статус партии товаров (не возвратная тара!)
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Значение перечисления "Статусы партии товаров".
//
Функция ОпределитьСтатусПартии(ИмяТЧ = "Товары") 

	Возврат Перечисления.СтатусыПартийТоваров.Купленный;

КонецФункции // ОпределитьСтатусПартииПрихода()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Надо добавить колонки.
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС",         ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр",            ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		СуммаСНДС = СтрокаТаблицы.Сумма + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);


		// Рассчитаем сумму взаиморасчетов
		СтрокаТаблицы.СуммаУпр    = ПересчитатьИзВалютыВВалюту(СуммаСНДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СуммаСНДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВзаиморасчетов);
										 
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.НДС = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Услуги",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаУслуг = РезультатЗапросаПоТоварам.Выгрузить();

	// Надо добавить колонки.
	ТаблицаУслуг.Колонки.Добавить("СуммаБезНДС",         ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаУслуг.Колонки.Добавить("СуммаВзаиморасчетов", ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаУслуг.Колонки.Добавить("СуммаУпр",            ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаУслуг Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		СуммаСНДС = СтрокаТаблицы.Сумма + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);


		// Рассчитаем сумму взаиморасчетов
		СтрокаТаблицы.СуммаУпр    = ПересчитатьИзВалютыВВалюту(СуммаСНДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СуммаСНДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВзаиморасчетов);
										 
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.НДС = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

	Возврат ТаблицаУслуг;

КонецФункции // ПодготовитьТаблицуУслуг()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	// Надо добавить колонки.
	ТаблицаТары.Колонки.Добавить("СуммаБезНДС",                ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("НДС",                        ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТары.Колонки.Добавить("СерияНоменклатуры",          Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов",        ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("СуммаУпр",                   ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма; // Сумма по таре всегда с НДС в валюте взаиморасчетов

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		// Рассчитаем сумму взаиморасчетов
		СтрокаТаблицы.СуммаУпр    = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВзаиморасчетов);

		СтрокаТаблицы.НДС = 0;

	КонецЦикла;

	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ЗаказПоставщику");

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок, ИмяТЧ)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	Если ИмяТЧ = "Товары" Тогда
		КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТЧ, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);
	КонецЕсли;

	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТЧ, СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, ИмяТЧ, ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, ИмяТЧ, ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  ТаблицаПоУслугам        - таблица значений, содержащая данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, "Услуги", СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь товаров быть не должно.
	ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	                                                      Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");

	КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре,
	                          Отказ, Заголовок);

	// Движения по документу.
	Если Не Отказ Тогда

		НаборДвижений = Движения.РасчетыСКонтрагентами;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		// Заполним таблицу движений.
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.РасчетыВозврат        = Перечисления.РасчетыВозврат.Расчеты;
		СтрокаДвижений.ДоговорКонтрагента = ЗаказПоставщику.ДоговорКонтрагента;
		СтрокаДвижений.Сделка                = ЗаказПоставщику; 
		СтрокаДвижений.СуммаВзаиморасчетов   = ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
												СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
												СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		СтрокаДвижений.СуммаУпр              = ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
												СтруктураШапкиДокумента.КурсДокумента, 
												СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
												СтруктураШапкиДокумента.КратностьДокумента, 
												СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
		КонецЕсли;
			
		// Контроль лимитов возвратной тары
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений = РегистрыНакопления.ТоварыПолученные.СоздатьНаборЗаписей();
			НаборДвижений.КонтрольЛимитовВозвратнойТары(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
			
		НаборДвижений = Движения.ЗаказыПоставщикам;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(ЗаказПоставщику,"ЗаказПоставщику");
		ТаблицаДвижений.ЗаполнитьЗначения(ЗаказПоставщику.ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(ОпределитьСтатусПартии(), "СтатусПартии");

		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		НаборДвижений.мПериод            = Дата;
		Движения.ЗаказыПоставщикам.ВыполнитьПриход();

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(ЗаказПоставщику,"ЗаказПоставщику");
		ТаблицаДвижений.ЗаполнитьЗначения(ЗаказПоставщику.ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");

		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		НаборДвижений.мПериод            = Дата;
		Движения.ЗаказыПоставщикам.ВыполнитьПриход();

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(ЗаказПоставщику,"ЗаказПоставщику");
		ТаблицаДвижений.ЗаполнитьЗначения(ЗаказПоставщику.ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "СтатусПартии");

		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		НаборДвижений.мПериод            = Дата;
		Движения.ЗаказыПоставщикам.ВыполнитьПриход();
	
		ТаблицаПоТоварамРазмещение = ТаблицаПоТоварам.Скопировать();
		Сч = 0;
		Пока Сч < ТаблицаПоТоварамРазмещение.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоТоварамРазмещение.Получить(Сч);
			Если ЗначениеНеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) 
			 ИЛИ ( ТипЗнч(СтрокаТаблицы.ЗаказПокупателя) <> Тип("ДокументСсылка.ЗаказПокупателя")
			     И ТипЗнч(СтрокаТаблицы.ЗаказПокупателя) <> Тип("ДокументСсылка.ВнутреннийЗаказ")) Тогда
				 ТаблицаПоТоварамРазмещение.Удалить(СтрокаТаблицы);
			Иначе 
				Сч = Сч + 1;
			КонецЕсли; 
		КонецЦикла;

		Если ТаблицаПоТоварамРазмещение.Количество() > 0 Тогда 
			
			// По регистру РазмещениеЗаказовПокупателей
			НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
			
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамРазмещение, ТаблицаДвижений);
			
			ТаблицаДвижений.ЗаполнитьЗначения(ЗаказПоставщику,"ЗаказПоставщику");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Товар, "ТоварТара");
			
			
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			НаборДвижений.мПериод            = Дата;
			Движения.РазмещениеЗаказовПокупателей.ВыполнитьПриход();
			
		КонецЕсли;
		
		ТаблицаПоТареРазмещение = ТаблицаПоТаре.Скопировать();
		Сч = 0;
		Пока Сч < ТаблицаПоТареРазмещение.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоТареРазмещение.Получить(Сч);
			Если ЗначениеНеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) 
			 ИЛИ ( ТипЗнч(СтрокаТаблицы.ЗаказПокупателя) <> Тип("ДокументСсылка.ЗаказПокупателя")
			     И ТипЗнч(СтрокаТаблицы.ЗаказПокупателя) <> Тип("ДокументСсылка.ВнутреннийЗаказ")) Тогда
				 ТаблицаПоТареРазмещение.Удалить(СтрокаТаблицы);
			Иначе 
				Сч = Сч + 1;
			КонецЕсли; 
		КонецЦикла;

		Если ТаблицаПоТареРазмещение.Количество() > 0 Тогда 
			
			// По регистру РазмещениеЗаказовПокупателей
			НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
			
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТареРазмещение, ТаблицаДвижений);
			
			ТаблицаДвижений.ЗаполнитьЗначения(ЗаказПоставщику,"ЗаказПоставщику");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Тара, "ТоварТара");
			
			
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			НаборДвижений.мПериод            = Дата;
			Движения.РазмещениеЗаказовПокупателей.ВыполнитьПриход();
			
		КонецЕсли;
		
		
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ЗаказПоставщику = Основание;

		СтруктурнаяЕдиница      = Основание.СтруктурнаяЕдиница;
		КурсВзаиморасчетов      = Основание.КурсВзаиморасчетов;
		КратностьВзаиморасчетов = Основание.КратностьВзаиморасчетов;

		Если Основание.Проведен Тогда

			// Заполним табличные части неотгруженными товарами по заказу покупателя.
			
			ПараметрыОстатков = Новый Структура;
			ПараметрыОстатков.Вставить( "ТоварТара",    Перечисления.ТоварТара.Товар);
			ПараметрыОстатков.Вставить( "СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный);
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить( "УчитыватьНДС",     Основание.УчитыватьНДС);
			ДопПараметры.Вставить( "СуммаВключаетНДС", Основание.СуммаВключаетНДС);
			ДопПараметры.Вставить( "ЗнакКоличества",   -1);
			
			ЗаполнитьТабЧастьТоварыПоЗаказуПоставщику( Основание, Товары,         ОстаткиТоваровПоЗаказуПоставщику( Основание, Основание.ДоговорКонтрагента, Дата, ПараметрыОстатков), ДопПараметры);
			
			ЗаполнитьПлановуюСебестоимостьНаОсновании(ЭтотОбъект, ЗаказПоставщику, мВалютаРегламентированногоУчета);

			ПараметрыОстатков.Вставить( "ТоварТара",    Перечисления.ТоварТара.Тара);
			ПараметрыОстатков.Вставить( "СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
			
			ДопПараметры     .Вставить( "ФлагЭтоТара",  Истина);
			
			ЗаполнитьТабЧастьТоварыПоЗаказуПоставщику( Основание, ВозвратнаяТара, ОстаткиТоваровПоЗаказуПоставщику( Основание, Основание.ДоговорКонтрагента, Дата, ПараметрыОстатков), ДопПараметры);
			
			ЗаполнитьТабЧастьУслугиПоЗаказу          ( Основание, Услуги, ОстаткиУслугПоЗаказуПоставщику  ( Основание, Основание.ДоговорКонтрагента, Дата), ДопПараметры);

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Контрагент = ЗаказПоставщику.Контрагент;
	
	// Если договор с комитентом, то надо почистить закладку "Услуги".
	Если Услуги.Количество() > 0
	   И ЗаказПоставщику.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

		Услуги.Очистить();

	КонецЕсли;

	// Проверка заполнения единицы измерения мест и количества мест
	ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = ПолучитьСуммуДокументаСНДС(ЭтотОбъект);

	// Посчитать итоговую сумму плановой себестоимости документа и записать ее в соответствующий реквизит шапки
	ИтогПлановаяСебестоимость = ИтогПлановаяСебестоимость(ЭтотОбъект);
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
		
	//+++( 27.01.2012 
	//проверка и автозаполнение Ед.измерения (связанный справочник!)
	//после загрузки из Excel - нет ед.измерений
	для каждого стр1 из Товары цикл
		Если НЕ ЗначениеЗаполнено(стр1.ЕдиницаИзмерения) тогда
			стр1.ЕдиницаИзмерения = стр1.Номенклатура.ЕдиницаХраненияОстатков; // такая ед.при выборе номенклатуры
			коефф = ?(ЗначениеЗаполнено(стр1.Номенклатура.ЕдиницаХраненияОстатков), стр1.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 1);
			стр1.Коэффициент = ?(коефф=0,1,коефф);
		КонецЕсли;	
	КонецЦикла;
	//+++)

	КонецЕсли; 


КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;


	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЗаказПоставщику);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = СформироватьДеревоПолейЗапросаПоШапке();
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы",            "ВалютаУправленческогоУчета",      "ВалютаУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы",            "КурсВалютыУправленческогоУчета" , "КурсВалютыУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов",           "ВедениеВзаиморасчетов");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов",            "ВалютаВзаиморасчетов");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация",                     "ДоговорОрганизация");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Ссылка",                          "ДоговорКонтрагента");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад",                "ВидСклада",                       "ВидСклада");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЗаказПоставщику, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ЗаказПокупателя"           , "ЗаказПокупателя");
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
	СтруктураПолей.Вставить("НомерСтроки"               , "НомерСтроки");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");

	РезультатЗапросаПоТоварам      = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам    = ПодготовитьТаблицуТоваров( РезультатЗапросаПоТоварам,      СтруктураШапкиДокумента);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
	СтруктураПолей.Вставить("НомерСтроки"               , "НомерСтроки");

	РезультатЗапросаПоУслугам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);
	
	// Подготовим таблицу услуг для проведения.
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("ЗаказПокупателя"           , "ЗаказПокупателя");
	СтруктураПолей.Вставить("НомерСтроки"               , "НомерСтроки");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");

	РезультатЗапросаПоТаре = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары", "Услуги", "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиТовары        ( ТаблицаПоТоварам,    СтруктураШапкиДокумента, Отказ, Заголовок, "Товары");
	ПроверитьЗаполнениеТабличнойЧастиУслуги        ( ТаблицаПоУслугам,    СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара( ТаблицаПоТаре,       СтруктураШапкиДокумента, Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
		                    ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре,
		                    Отказ, Заголовок);
	КонецЕсли; 

КонецПроцедуры	// ОбработкаПроведения()

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
ВалютаДокумента                 = ЗаказПоставщику.ВалютаДокумента;
