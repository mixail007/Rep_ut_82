Перем мВалютаРегламентированногоУчета Экспорт;
Перем мПорядокСписанияПартий; // (Общ)
Перем мДокументПоступленияСсылка Экспорт;

Перем мУказаниеСкладовВТЧ Экспорт;
Перем мСтруктураПараметровВзаиморасчетов Экспорт;


//////////////////////////////////////////////////////////////////////////////////
//// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет табличные части документа по основанию
//
Процедура ЗаполнитьПоДокументу() Экспорт
	
	Если ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
		ИЛИ ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		ЗаполнитьПоПоступлению();
	ИначеЕсли ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		ЗаполнитьПоДопРасходам();
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет табличную часть "Товары" 
// по данным документов: ПоступлениеДопРасходов, Корректировка поступления
//
Процедура ЗаполнитьПоДопРасходам()
	
	Если НЕ ЗначениеЗаполнено(ДокументПоступления) Тогда
		Возврат;
	КонецЕсли;
	
	Услуги.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПоступлениеДопРасходовТовары.НомерСтроки                КАК НомерСтроки,
	|	ПоступлениеДопРасходовТовары.Номенклатура               КАК Номенклатура,
	|	ПоступлениеДопРасходовТовары.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|	ПоступлениеДопРасходовТовары.Коэффициент                КАК Коэффициент,
	|	ПоступлениеДопРасходовТовары.Количество                 КАК Количество,
	|	ПоступлениеДопРасходовТовары.СуммаНДС                   КАК СуммаНДС,
	|	ПоступлениеДопРасходовТовары.СуммаТовара                КАК СуммаТовара,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ПоступлениеДопРасходовТовары.ЕдиницаИзмерения.Вес, 0) 
	|		* ПоступлениеДопРасходовТовары.Количество
	|		КАК Число(15,3))                                    КАК ВесТовара,
	|	ПоступлениеДопРасходовТовары.Количество                 КАК КоличествоТовара,
	|	ПоступлениеДопРасходовТовары.Сумма                      КАК Сумма,
	|	ПоступлениеДопРасходовТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ПоступлениеДопРасходовТовары.СерияНоменклатуры          КАК СерияНоменклатуры,
	|	ВЫБОР	КОГДА ДокументПартии ССЫЛКА Документ.ОприходованиеТоваров
	|			ТОГДА ДокументПартии.Склад
	|			КОГДА ДокументПартии.СкладОрдер ССЫЛКА Документ.ПриходныйОрдерНаТовары 
	|			ТОГДА ДокументПартии.СкладОрдер.Склад
	|			ИНАЧЕ ДокументПартии.СкладОрдер 
	|	КОНЕЦ                                                   КАК СкладОрдер,
	|	ПоступлениеДопРасходовТовары.ЗаказПокупателя            КАК ЗаказПокупателя,
	|	ПоступлениеДопРасходовТовары.ДокументПартии             КАК ДокументПартии,
	|	ПоступлениеДопРасходовТовары.Ссылка.СтавкаНДС           КАК СтавкаНДС,
	|	ПоступлениеДопРасходовТовары.Количество                 КАК КоличествоДоИзменения,
	|	ПоступлениеДопРасходовТовары.Ссылка.СтавкаНДС           КАК СтавкаНДСДоИзменения,
	|	ПоступлениеДопРасходовТовары.СуммаНДС                   КАК СуммаНДСДоИзменения,
	|	ПоступлениеДопРасходовТовары.Сумма                      КАК СуммаДоИзменения,
	|	ИСТИНА                                                  КАК ЕстьВДокументеПоступления
	|ИЗ
	|	Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
	|ГДЕ
	|	ПоступлениеДопРасходовТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументПоступления);
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	Если ДокументПоступления.Сумма <> 0 тогда
		
		СуммаКРаспределению = ДокументПоступления.Сумма;
		НДСКРаспределению   = ДокументПоступления.СуммаНДС;
		
		// Определим базис распределения
		КолонкаБазиса = "";
		Если ДокументПоступления.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоКоличеству Тогда
			КолонкаБазиса = "КоличествоТовара";
		ИначеЕсли ДокументПоступления.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме Тогда
			КолонкаБазиса = "СуммаТовара";
		ИначеЕсли ДокументПоступления.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоВесу Тогда
			КолонкаБазиса = "ВесТовара";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(КолонкаБазиса) тогда
			//Не выбран способ распределения
			Возврат;
		ИначеЕсли ТаблицаТоваров.Итог(КолонкаБазиса) = 0 тогда 
			//Базис распределения - пустая колонка!
			Возврат;
		КонецЕсли;
		
		БазисРаспределения = ТаблицаТоваров.ВыгрузитьКолонку(КолонкаБазиса);
		ИтогРаспределения  = РаспределитьПропорционально(СуммаКРаспределению,БазисРаспределения);
		
		Если НЕ (НДСКРаспределению = 0) тогда
			ИтогРаспределенияНДС = РаспределитьПропорционально(НДСКРаспределению,БазисРаспределения);
		КонецЕсли;
		
		Для НомерСтрокиТаблицы = 0 по ИтогРаспределения.ВГраница() цикл
			Если не ИтогРаспределения[НомерСтрокиТаблицы] = 0 тогда
				ТаблицаТоваров[НомерСтрокиТаблицы].Сумма  = ТаблицаТоваров[НомерСтрокиТаблицы].Сумма + ИтогРаспределения[НомерСтрокиТаблицы];
				ТаблицаТоваров[НомерСтрокиТаблицы].СуммаДоИзменения = ТаблицаТоваров[НомерСтрокиТаблицы].Сумма;
			КонецЕсли;
			Если Не(НДСКРаспределению = 0) тогда
				Если НЕ ИтогРаспределенияНДС[НомерСтрокиТаблицы] = 0 тогда
					ТаблицаТоваров[НомерСтрокиТаблицы].СуммаНДС = ТаблицаТоваров[НомерСтрокиТаблицы].СуммаНДС + ИтогРаспределенияНДС[НомерСтрокиТаблицы];
					ТаблицаТоваров[НомерСтрокиТаблицы].СуммаНДСДоИзменения = ТаблицаТоваров[НомерСтрокиТаблицы].СуммаНДС;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Товары.Загрузить(ТаблицаТоваров);

	Если ТаблицаТоваров.Количество()>0 Тогда
		СкладОрдер = ТаблицаТоваров[0].СкладОрдер;
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьСвойстваСкладаВТабличнойЧасти() Экспорт
	
	СвойстваСклада = Новый Структура;
	
	СвойстваСклада.Вставить("ВидимостьСклада",              КорректироватьБУиНУ И мУказаниеСкладовВТЧ);
	СвойстваСклада.Вставить("ОбязательноеЗаполнениеСклада", СвойстваСклада.ВидимостьСклада);
	
	Возврат СвойстваСклада;
	
КонецФункции

Функция ПолучитьСвойстваЗаказаПоставщикуВТабличнойЧасти() Экспорт
	
	ВедениеВзаиморасчетов = ДоговорКонтрагента.ВедениеВзаиморасчетов;
	СвойстваЗаказа        = Новый Структура;
	
	// Заказ в ТЧ виден, если взаиморасчеты по договору ведутся по заказам или по договору в целом (не ведутся по счетам)
	// Заполнение заказа обязательно, если взаиморасчеты по договору ведутся по заказам
	СвойстваЗаказа.Вставить("ВидимостьЗаказа",
		ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам И КорректироватьБУиНУ И ЕстьЗаказыПоставщикуВТабличнойЧастиТовары(ЭтотОбъект.Ссылка));
	СвойстваЗаказа.Вставить("ОбязательноеЗаполнениеЗаказа",
		СвойстваЗаказа.ВидимостьЗаказа И ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
	
	Возврат СвойстваЗаказа;
	
КонецФункции

// Процедура заполняет табличные части "Товары" и "Услуги"
// по данным документов: ПоступлениеТоваровУслуг, Корректировка поступления
//
Процедура ЗаполнитьПоПоступлению()
	
	Если НЕ ЗначениеЗаполнено(ДокументПоступления) Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = ДокументПоступления.Метаданные();
	ИмяВидаДокумента = МетаданныеДокумента.Имя;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура               КАК Номенклатура,
	|	ПоступлениеТоваровУслугТовары.КоличествоМест             КАК КоличествоМест,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмеренияМест       КАК ЕдиницаИзмеренияМест,
	|	ПоступлениеТоваровУслугТовары.Коэффициент                КАК Коэффициент,
	|	ПоступлениеТоваровУслугТовары.Количество                 КАК Количество,
	|	ПоступлениеТоваровУслугТовары.Цена                       КАК Цена,
	|	ПоступлениеТоваровУслугТовары.Сумма                      КАК Сумма,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС                  КАК СтавкаНДС,
	|	ПоступлениеТоваровУслугТовары.СуммаНДС                   КАК СуммаНДС,
	|	ПоступлениеТоваровУслугТовары.СерияНоменклатуры          КАК СерияНоменклатуры,
	|	ПоступлениеТоваровУслугТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ПоступлениеТоваровУслугТовары.ЗаказПокупателя            КАК Заказ,
	|	ПоступлениеТоваровУслугТовары.Склад                      КАК Склад,
	|	ПоступлениеТоваровУслугТовары.ПриходныйОрдер             КАК ПриходныйОрдер,
	//|	ПоступлениеТоваровУслугТовары.ЗаказПоставщику            КАК ЗаказПоставщику,
	|	";
	
	Если ИмяВидаДокумента = "КорректировкаПоступления" Тогда
		Запрос.Текст = Запрос.Текст + "
		//|	ПоступлениеТоваровУслугТовары.ДокументПартии            КАК ДокументПартии,
		|	ПоступлениеТоваровУслугТовары.КоличествоДоКорректировки КАК КоличествоДоКорректировки,
		|	ПоступлениеТоваровУслугТовары.ЦенаДоКорректировки       КАК ЦенаДоКорректировки,
		|	ПоступлениеТоваровУслугТовары.СуммаДоКорректировки      КАК СуммаДоКорректировки,
		|	ПоступлениеТоваровУслугТовары.СуммаНДСДоКорректировки   КАК СуммаНДСДоКорректировки,";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|	ПоступлениеТоваровУслугТовары.Номенклатура               КАК НоменклатураДоИзменения,
	|	ПоступлениеТоваровУслугТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатурыДоИзменения,
	|	ПоступлениеТоваровУслугТовары.СерияНоменклатуры          КАК СерияНоменклатурыДоИзменения,
	|	ПоступлениеТоваровУслугТовары.Количество                 КАК КоличествоДоИзменения,
	|	ПоступлениеТоваровУслугТовары.Цена                       КАК ЦенаДоИзменения,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС                  КАК СтавкаНДСДоИзменения,
	|	ПоступлениеТоваровУслугТовары.СуммаНДС                   КАК СуммаНДСДоИзменения,
	|	ПоступлениеТоваровУслугТовары.Сумма                      КАК СуммаДоИзменения,
	|	ИСТИНА                                                   КАК ЕстьВДокументеПоступления
	|ИЗ
	|	Документ."+ИмяВидаДокумента+".Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
	|
	|/////////////////////////////////////////////////////////////////////////////
	|;
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугУслуги.Номенклатура         КАК Номенклатура,
	|	ПоступлениеТоваровУслугУслуги.Содержание           КАК Содержание,
	|	ПоступлениеТоваровУслугУслуги.Заказ                КАК Заказ,
	|	ПоступлениеТоваровУслугУслуги.Количество           КАК Количество,
	|	ПоступлениеТоваровУслугУслуги.Цена                 КАК Цена,
	|	ПоступлениеТоваровУслугУслуги.Сумма                КАК Сумма,
	|	ПоступлениеТоваровУслугУслуги.СтавкаНДС            КАК СтавкаНДС,
	|	ПоступлениеТоваровУслугУслуги.СуммаНДС             КАК СуммаНДС,
	|	ПоступлениеТоваровУслугУслуги.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ПоступлениеТоваровУслугУслуги.Подразделение        КАК Подразделение,
	|	ПоступлениеТоваровУслугУслуги.СтатьяЗатрат         КАК СтатьяЗатрат,
	//|	Null											   КАК ЗаказПоставщику,
	|";
	
	Если ИмяВидаДокумента = "КорректировкаПоступления" Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ПоступлениеТоваровУслугУслуги.КоличествоДоКорректировки КАК КоличествоДоКорректировки,
		|	ПоступлениеТоваровУслугУслуги.ЦенаДоКорректировки       КАК ЦенаДоКорректировки,
		|	ПоступлениеТоваровУслугУслуги.СуммаДоКорректировки      КАК СуммаДоКорректировки,
		|	ПоступлениеТоваровУслугУслуги.СуммаНДСДоКорректировки   КАК СуммаНДСДоКорректировки,";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|	ПоступлениеТоваровУслугУслуги.Номенклатура КАК НоменклатураДоИзменения,
	|	ПоступлениеТоваровУслугУслуги.Содержание   КАК СодержаниеДоИзменения,
	|	ПоступлениеТоваровУслугУслуги.Количество   КАК КоличествоДоИзменения,
	|	ПоступлениеТоваровУслугУслуги.Цена         КАК ЦенаДоИзменения,
	|	ПоступлениеТоваровУслугУслуги.Сумма        КАК СуммаДоИзменения,
	|	ПоступлениеТоваровУслугУслуги.СтавкаНДС    КАК СтавкаНДСДоИзменения,
	|	ПоступлениеТоваровУслугУслуги.СуммаНДС     КАК СуммаНДСДоИзменения,
	|	ИСТИНА                                     КАК ЕстьВДокументеПоступления
	|
	|ИЗ
	|	Документ." + ИмяВидаДокумента + ".Услуги КАК ПоступлениеТоваровУслугУслуги
	|ГДЕ
	|	ПоступлениеТоваровУслугУслуги.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументПоступления);
	Результат = Запрос.ВыполнитьПакет();
	
	Товары.Загрузить(Результат[0].Выгрузить());
	Услуги.Загрузить(Результат[1].Выгрузить());
	//СерийныеНомера.Загрузить(ДокументПоступления.СерийныеНомера.Выгрузить());
	
КонецПроцедуры

//// Процедура заполянет шапку документа по документу поступления 
////
//// Параметры:
//// 	 ЗаполнятьРедактируемыеРеквизиты - Булево - Признак того, что нужно перезаполнить реквизиты шапки, редактируемые в форме
////
Процедура ЗаполнитьСвойстваШапки(ЗаполнятьРедактируемыеРеквизиты = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументПоступления) Тогда
		Возврат;
	КонецЕсли;
	
	// Перед заполнением сохраним реквизиты шапки документа, не заполняемые из основания
	НезаполняемыеРеквизиты = "Дата, Номер, ПометкаУдаления, Проведен, ДокументПоступления, ВидОперации,
		|НомерВходящегоДокумента, ДатаВходящегоДокумента, КорректироватьБУиНУ, Ответственный, Комментарий, ВидПоступления";
		
	Если НЕ ЗаполнятьРедактируемыеРеквизиты Тогда
		НезаполняемыеРеквизиты = НезаполняемыеРеквизиты + ", БанковскийСчетКонтрагента, Грузоотправитель, Грузополучатель, 
			|ВосстановитьНДС, СкладОрдер";
	КонецЕсли;
	
	СтруктураНезаполняемыеРеквизиты = Новый Структура(НезаполняемыеРеквизиты);
	ЗаполнитьЗначенияСвойств(СтруктураНезаполняемыеРеквизиты, ЭтотОбъект);
	
	// Очистим реквизиты шапки документа
	Для каждого Реквизит из ЭтотОбъект.Метаданные().Реквизиты Цикл
		Если НЕ СтруктураНезаполняемыеРеквизиты.Свойство(Реквизит.Имя) Тогда
			ЭтотОбъект[Реквизит.Имя] = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	// Получим ссылку на исходный исправляемый документ поступления
	мДокументПоступленияСсылка = ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Истина);
	
	Если ЗначениеЗаполнено(мДокументПоступленияСсылка) Тогда
		
		// Заполним основные реквизиты шапки по основанию
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, мДокументПоступленияСсылка);
		Если ТипЗнч(мДокументПоступленияСсылка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		КонецЕсли;
		
		// Заполним реквизиты учета НДС в случае, если таких реквизитов нет в документе основания
		МетаданныеДокументаОснования = мДокументПоступленияСсылка.Метаданные();
		Если МетаданныеДокументаОснования.Реквизиты.Найти("УчитыватьНДС") = Неопределено Тогда
			УчитыватьНДС = Истина;
		КонецЕсли;
		Если МетаданныеДокументаОснования.Реквизиты.Найти("СуммаВключаетНДС") = Неопределено Тогда
			СуммаВключаетНДС = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Перезаполним шапку по документу поступления
	Если КорректироватьБУиНУ Тогда 
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДокументПоступления,,"ОтражатьВБухгалтерскомУчете"); //+++ Шарафутдиннов по задаче 46547
		
		Если ТипЗнч(СтруктураНезаполняемыеРеквизиты.ДокументПоступления) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
			И СтруктураНезаполняемыеРеквизиты.ДокументПоступления.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
			
			Склад = ДокументПоступления.СкладОрдер.Склад;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Восстановим незаполняемые реквизиты
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНезаполняемыеРеквизиты);

	ДокументПоступленияСсылка = ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Истина);
	
	КорректировкаКорректировочногоСчетаФактуры = Ложь;
		
	Если ТипЗнч(ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Ложь)) = Тип("ДокументСсылка.КорректировкаПоступления") 
		И ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		КорректировкаКорректировочногоСчетаФактуры = Истина;
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Если КорректировкаКорректировочногоСчетаФактуры Тогда
			ИсправляемыйДокументПоступления = ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Ложь);
		Иначе	
			ИсправляемыйДокументПоступления = ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Истина);
		КонецЕсли;	
	Иначе
		ИсправляемыйДокументПоступления = ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Ложь);
	КонецЕсли;
	СтруктураКурсаДокумента = ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
	КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	// Цены в документе всегда указываем вручную
	ТипЦен = Неопределено;
	
КонецПроцедуры

//// Функция возвращает последний кооректирующий документ
////
//// Возвращаемое значение:
//// 	Ссылка на документ КорректировкаПоступления
////
Функция ПолучитьПоследнийКорректирующийДокумент(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ЭтотДокумент", Ссылка);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КорректировкаПоступления.Ссылка
		|ИЗ
		|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
		|ГДЕ
		|	КорректировкаПоступления.ИсправляемыйДокументПоступления = &Ссылка
		|	И КорректировкаПоступления.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение)
		|	И КорректировкаПоступления.Ссылка <> &ЭтотДокумент
		|	И КорректировкаПоступления.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	КорректировкаПоступления.Дата УБЫВ";
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	Иначе
		Возврат ДокументСсылка;
	КонецЕсли;
		
КонецФункции

Функция ПолучитьИсправляемыйДокументПоступления(ДокПоступления, Исходный = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(ДокПоступления) 
		И ТипЗнч(ДокПоступления) = Тип("ДокументСсылка.КорректировкаПоступления")
		И (ДокПоступления.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки ИЛИ Исходный
		ИЛИ ДокПоступления.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение) Тогда
		
		Возврат ПолучитьИсправляемыйДокументПоступления(ДокПоступления.ДокументПоступления, Исходный);
		
	Иначе
		Возврат ДокПоступления;
	КонецЕсли;
	
КонецФункции

//// Функция возвращает признак возможности корректировки по видам учета
//// 
//// Возвращаемое значение:
//// 	Булево
Функция ДоступнаКорректировкаБУиНУ() Экспорт
			
	Возврат (ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") И 
			ЗначениеЗаполнено(ДокументПоступления.ДоговорКонтрагента))
		ИЛИ ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПоступлениеДопРасходов")
		ИЛИ (ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления") И ДокументПоступления.КорректироватьБУиНУ);
	
КонецФункции

// Очищает ненужные строки табличных частей
//
Процедура ОчиститьНенужныеТабличныеЧасти() Экспорт

	// Если договор с комитентом, то надо почистить закладку "Услуги".
	Если Услуги.Количество() > 0
	   И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

		Услуги.Очистить();

	КонецЕсли;

КонецПроцедуры // ОчиститьНенужныеТабличныеЧасти()

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА
/////////////////////////

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

КонецПроцедуры // ОбработкаПроведения()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, 
	                             |ВалютаДокумента, Контрагент, ДоговорКонтрагента, ВидПоступления,
	                             |КурсВзаиморасчетов, КратностьВзаиморасчетов");

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад
	   И Не СтруктураШапкиДокумента.СкладВТабличнойЧасти
	   И Товары.Количество() > 0 Тогда
		СтруктураОбязательныхПолей.Вставить("СкладОрдер");
	КонецЕсли;

	Если не ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПродажаАвтозапчастей") Тогда
		// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			СтруктураОбязательныхПолей.Вставить( "Сделка", 
			"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам (счетам)""! 
			|Заполните поле ""Заказ поставщику""!");
		ИначеЕсли СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			СтруктураОбязательныхПолей.Вставить( "Сделка", 
			"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам (счетам)""! 
			|Заполните поле ""Счет поставщика""!");
		КонецЕсли;
    КонецЕсли;
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выполняет проверки,которые нужны только для упр. учета
Процедура ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Если склад указывается в ТЧ, то в шапке он может быть не заполнен или указан неправильно,
	// это ни на что не влияет, потому что при проведении используется склад в ТЧ.
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад
	   И Не СтруктураШапкиДокумента.СкладВТабличнойЧасти 
	   И СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			ОшибкаПриПроведении("Документ не может осуществлять поступление на неавтоматизированную торговую точку!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура");

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураОбязательныхПолей.Вставить("ПриходныйОрдер");
	КонецЕсли;

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь НТТ быть не должно.
	ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Процедура ПроверитьЗаполнениеТабличнойЧастиПродажи(ТаблицаПоПродажам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "КорректировкаРеализации";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, ДокументРеализации");
	
	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "КорректировкаРеализации", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "КорректировкаРеализации", ТаблицаПоПродажам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "КорректировкаРеализации", ТаблицаПоПродажам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()


// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  РезультатЗапросаПоУслугам - результат запроса, содержащий данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                     - флаг отказа в проведении.
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Услуги";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Содержание");

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);
	Иначе
		КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, , СтруктураОбязательныхПолей);
	КонецЕсли;

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь товаров быть не должно.
	ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Процедура заполняет значение реквизитов до корректировки
//
Процедура ОбработатьСуммыДоКорректировки()
	
	ИсправлениеКорректировки = ЗначениеЗаполнено(ИсправляемыйДокументПоступления) 
							И (ТипЗнч(ИсправляемыйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления")) 
							И (ИсправляемыйДокументПоступления.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);

	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("КоличествоДоИзменения"), "КоличествоДоКорректировки");
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("ЦенаДоИзменения"),       "ЦенаДоКорректировки");
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("СуммаДоИзменения"),      "СуммаДоКорректировки");
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("СуммаНДСДоИзменения"),   "СуммаНДСДоКорректировки");
		
		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("КоличествоДоИзменения"), "КоличествоДоКорректировки");
		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("ЦенаДоИзменения"),       "ЦенаДоКорректировки");
		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("СуммаДоИзменения"),      "СуммаДоКорректировки");
		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("СуммаНДСДоИзменения"),   "СуммаНДСДоКорректировки");
		
	ИначеЕсли Не ИсправлениеКорректировки Тогда
		
		Для Каждого СтрокаТЧ из Товары Цикл
			СтрокаТЧ.КоличествоДоКорректировки = 0;
			СтрокаТЧ.ЦенаДоКорректировки = 0;
			СтрокаТЧ.СуммаДоКорректировки = 0;
			СтрокаТЧ.СуммаНДСДоКорректировки = 0;
		КонецЦикла;
		Для Каждого СтрокаТЧ из Услуги Цикл
			СтрокаТЧ.КоличествоДоКорректировки = 0;
			СтрокаТЧ.ЦенаДоКорректировки = 0;
			СтрокаТЧ.СуммаДоКорректировки = 0;
			СтрокаТЧ.СуммаНДСДоКорректировки = 0;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	ПерезаполнятьДокумент = Истина;
	ИнтерактивноеЗаполнение = Ложь;
	Если ТипЗнч(Основание) = Тип("Структура") И Основание.Свойство("ДокументОснование") Тогда
		ПерезаполнятьДокумент = Основание.ПерезаполнятьДокумент;
		ИнтерактивноеЗаполнение = Основание.ИнтерактивноеЗаполнение;
		Основание = Основание.ДокументОснование;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Основание) Тогда
		возврат;
	КонецЕсли;
	
	Если ТипЗнч(Основание) <> Тип("Структура") Тогда
		Если Ссылка = Основание Тогда
			ДокументПоступления = Неопределено;
			ВызватьИсключение "Нельзя вводить документ корректировки на основании самого себя!";
		КонецЕсли;
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеДопРасходов") И Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда
			ДокументПоступления = Неопределено;
			ВызватьИсключение "Нельзя корректировать документ с видом операции ""внутренний расход""";
		КонецЕсли;
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураПолученный") И
			(НЕ ЗначениеЗаполнено(Основание.ДокументОснование) 
			ИЛИ ТипЗнч(Основание.ДокументОснование) <> Тип("ДокументСсылка.АвансовыйОтчет")
			ИЛИ Основание.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс)
		Тогда
			ДокументПоступления = Неопределено;
			ВызватьИсключение "В качестве основания можно выбрать только счет-фактуру по поступлению, введенный на основании документа ""Авансовый отчет""!";
		КонецЕсли;
		
		ДокументСсылка = ПолучитьИсправляемыйДокументПоступления(Основание, Ложь);
		ДокументОснование = ПолучитьПоследнийКорректирующийДокумент(ДокументСсылка);
		
		#Если Клиент Тогда
		Если Основание <> ДокументОснование
			И Основание.Дата < ДокументОснование.Дата
		Тогда
			Если Вопрос("Для указанного документа существуют более поздние корректировки.
				|Использовать последнюю введенную корректировку?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
				ДокументОснование = Основание;
			КонецЕсли;
		Иначе
			ДокументОснование = Основание;
		КонецЕсли;
		#КонецЕсли
		
		//ОЛ заремила
		//ПроверитьРеквизиты(ДокументОснование);
		//конец ОЛ заремила
				
	Иначе
		ДокументОснование = Основание;
	КонецЕсли;
	
	#Если Клиент Тогда
	Если ИнтерактивноеЗаполнение = Истина Тогда
		ДокументПоступления = ДокументОснование;
		КорректироватьБУиНУ = ДоступнаКорректировкаБУиНУ();
		Если КорректироватьБУиНУ И ЗначениеЗаполнено(ДокументПоступления) Тогда
			Если Вопрос("Перезаполнить документ по указанному основанию?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				ПерезаполнятьДокумент = Истина;
			Иначе
				ПерезаполнятьДокумент = Ложь;
				КорректироватьБУиНУ = Ложь;
			КонецЕсли;
		Иначе
			ПерезаполнятьДокумент = Ложь;
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли
	
	Если НЕ (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
			ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления")
			ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеДопРасходов"))
	Тогда
		ЗаполнитьСвойстваШапки();
	Иначе
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
			ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления")
		Тогда
			
			// Заполним реквизиты из стандартного набора по документу основанию.
			Организация = ДокументОснование.Организация;
			ДокументПоступления = ДокументОснование;
			КорректироватьБУиНУ = ?(ИнтерактивноеЗаполнение = Истина, КорректироватьБУиНУ, ДоступнаКорректировкаБУиНУ());
			ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
			ЗаполнитьСвойстваШапки();
			Если ПерезаполнятьДокумент = Истина Тогда
				ЗаполнитьПоПоступлению();
			КонецЕсли;
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
			Организация = ДокументОснование.Организация;
			ДокументПоступления = ДокументОснование;
			КорректироватьБУиНУ = ?(ИнтерактивноеЗаполнение = Истина, КорректироватьБУиНУ, ДоступнаКорректировкаБУиНУ());;
			ЗаполнитьСвойстваШапки();
			Если ПерезаполнятьДокумент = Истина Тогда
				ЗаполнитьПоДопРасходам();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ОбработкаЗаполнения()

//// Процедура вызывается перед записью документа 
////
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	ОчиститьНенужныеТабличныеЧасти();
//	
	ЗаполнитьСвойстваШапки(Ложь);
//	
	ОбработатьСуммыДокорректировки();
//	
//	// Проверка заполнения единицы измерения мест и количества мест
	ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
//	
//	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = ПолучитьСуммуДокументаСНДС(ЭтотОбъект);

	СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
//	
//	// Заполнить склад и ордер в табличных частях
	УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
	СкладИзШапки    =  (УказаниеСкладов <> Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
					 И (УказаниеСкладов <> Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления);

	ЗаполнитьСкладИОрдерВСтрокахТабЧасти(ЭтотОбъект, Товары,         СкладИзШапки);


КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	// Удаление записей регистрации из всех последовательностей
	//Для Каждого НаборЗаписейРегистрацииВПоследовательности Из ПринадлежностьПоследовательностям Цикл
	//	НаборЗаписейРегистрацииВПоследовательности.Очистить();
	//КонецЦикла;
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

//мПараметрыСвязиСтрокТЧ = Новый Соответствие;
//мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

мСтруктураПараметровВзаиморасчетов = Новый Структура;
мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Товары, Услуги"));
мСтруктураПараметровВзаиморасчетов.Вставить("Направление", "Поступление");
мСтруктураПараметровВзаиморасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Истина);
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяЗаказаВТабличныхЧастях", "ЗаказПоставщику");

УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();

мУказаниеСкладовВТЧ = (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
					  Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления);

