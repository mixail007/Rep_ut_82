Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА


#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	//Если ЭтоНовый() Тогда
	//	Предупреждение("Документ можно распечатать только после его записи");
	//	Возврат;
	//ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
	//	Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
	//	Возврат;
	//КонецЕсли;

	//Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
	//	Возврат;
	//КонецЕсли;

	//Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

	//	ТабДокумент = НапечататьВнешнююФорму(Ссылка, ИмяМакета);
	//	
	//	Если ТабДокумент = Неопределено Тогда
	//		Возврат
	//	КонецЕсли; 
	//	
	//КонецЕсли;

	//НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


// Проверяет правильность заполнения шапки документа по рег учету.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) И (НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеНеЗаполнено(СтруктураШапкиДокумента.Организация) Тогда
		ОшибкаПриПроведении("Не заполнено поле Организация", Отказ,Заголовок);
	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ПериодРегистрации");

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок, Истина);

	// Теперь вызовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выполняет движения по регистрам упр
//
Процедура ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	ДатаДок = КонецМесяца(ПериодРегистрации);

	ТабАмортизации = Новый ТаблицаЗначений;
	ТабАмортизации = РасчетАмортизацииУпр(КонецМесяца(ПериодРегистрации));

	ТабАмортизации.Колонки.Упр.Имя = "Сумма";
	ТабАмортизации.Колонки.ОС.Имя  = "ОбъектУчета";
	ТабЗатрат = ПолучитьРаспределениеАмортизацииПоНаправлениямУпр(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента);

	Если НЕ Отказ Тогда

		НаборДвижений   = Движения.СтоимостьОС;
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		Для Каждого СтрокаТЧ из ТабАмортизации Цикл

			Если СтрокаТЧ.Сумма > 0 Тогда

				СтрокаДвижений = ТаблицаДвижений.Добавить();
				СтрокаДвижений.ОсновноеСредство = СтрокаТЧ.ОбъектУчета;
				СтрокаДвижений.Амортизация      = СтрокаТЧ.Сумма;

			КонецЕсли;

		КонецЦикла;

		НаборДвижений.мПериод          = ДатаДок;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		Движения.СтоимостьОС.ВыполнитьПриход();

	КонецЕсли;
	
	//Если Не Отказ Тогда
	//	ЗафиксироватьФактВыполненияРегламентнойОперации(ПериодРегистрации,
	//													  СтруктураШапкиДокумента.Организация,
	//													  Ссылка,														  
	//													  Перечисления.РегламентныеОперации.НачислениеАмортизацииОС,
	//													  , "Упр");
	//КонецЕсли;

КонецПроцедуры

// Выполняет движения по регистрам регл
//
Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	//Если Не (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
	//	или СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
	//	Возврат;
	//КонецЕслИ;

	//ДатаДок = КонецМесяца(ПериодРегистрации);

	//Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете тогда

	//	ТабАмортизации  = РасчетАмортизацииБухРегл(ДатаДок,СтруктураШапкиДокумента.Организация);
	//	мПроводкиБУ = Движения.Хозрасчетный;
	//	ТабАмортизации.Колонки.Бух.Имя = "Сумма";
	//	ТабАмортизации.Колонки.ОС.Имя  = "ОбъектУчета";
	//	ТабАмортизации.Колонки.СчетАмортизацииБУ.Имя = "СчетАмортизации";
	//	ТабАмортизации.Колонки.Добавить("СчетАмортизацииНУ");
	//	ТабЗатрат = ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента,"Бух","ОС");
	//	мПроводкиБУ.Записать(Ложь);

	//	Если НЕ Отказ Тогда

	//		НаборДвижений   = Движения.СтоимостьОСБухгалтерскийУчет;
	//		ТаблицаДвижений = НаборДвижений.Выгрузить();
	//		ТаблицаДвижений.Очистить();

	//		Для Каждого СтрокаТЧ из ТабАмортизации Цикл

	//			Если СтрокаТЧ.Сумма > 0 Тогда

	//				СтрокаДвижений = ТаблицаДвижений.Добавить();

	//				СтрокаДвижений.ОсновноеСредство = СтрокаТЧ.ОбъектУчета;
	//				СтрокаДвижений.Организация      = СтруктураШапкиДокумента.Организация;
	//				СтрокаДвижений.Амортизация      = СтрокаТЧ.Сумма;

	//			КонецЕсли;

	//		КонецЦикла;

	//		НаборДвижений.мПериод          = ДатаДок;
	//		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	//		НаборДвижений.ВыполнитьПриход();

	//	КонецЕсли;
		//Если Не Отказ Тогда
		//	ЗафиксироватьФактВыполненияРегламентнойОперации(ПериодРегистрации,
		//												  СтруктураШапкиДокумента.Организация,
		//												  Ссылка,														  
		//												  Перечисления.РегламентныеОперации.НачислениеАмортизацииОС,
		//												  , "Бух");
		//КонецЕсли;

	//КонецЕсли;

	//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда

	//	ТабАмортизации = РасчетАмортизацииНалогРегл(ЭтотОбъект,ДатаДок,СтруктураШапкиДокумента.Организация);
	//	ТабАмортизации.Колонки.ОС.Имя = "ОбъектУчета";
	//	ТабАмортизации.Колонки.Добавить("СчетАмортизации");
	//	
	//	// Включение капитальных вложений в состав расходов.
	//	ТабКапитальныхВложений = ТабАмортизации.Скопировать();
	//	ТабКапитальныхВложений.Колонки.СуммаКапитальныхВложенийВключаемыхВРасходы.Имя = "Сумма";
	//	ТабКапитальныхВложений.Колонки.Удалить(ТабКапитальныхВложений.Колонки.СчетАмортизацииНУ);
	//	ТабКапитальныхВложений.Колонки.СчетУчетаНУ.Имя = "СчетАмортизацииНУ";
	//	ТабЗатрат = ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабКапитальныхВложений, СтруктураШапкиДокумента, "Нал", "ОС", "Включение капитальных вложений в состав расходов");
	//	
	//	Если НЕ Отказ Тогда

	//		НаборДвижений   = Движения.СтоимостьОСНалоговыйУчет;
	//		ТаблицаДвижений = НаборДвижений.Выгрузить();
	//		ТаблицаДвижений.Очистить();
	//		
	//		Для Каждого СтрокаТЧ из ТабКапитальныхВложений Цикл

	//			Если СтрокаТЧ.Сумма > 0 Тогда

	//				СтрокаДвижений = ТаблицаДвижений.Добавить();

	//				СтрокаДвижений.ОсновноеСредство = СтрокаТЧ.ОбъектУчета;
	//				СтрокаДвижений.Организация      = СтруктураШапкиДокумента.Организация;
	//				СтрокаДвижений.Стоимость        = СтрокаТЧ.Сумма;

	//			КонецЕсли;

	//		КонецЦикла;

	//		НаборДвижений.мПериод          = ДатаДок;
	//		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	//		НаборДвижений.ВыполнитьРасход();

	//	КонецЕсли;
	//	
	//	// Формирование проводок по возникающим временным разницам.
	//	ТабВременныхРазницПоКапитальнымВложениям = ТабКапитальныхВложений.Скопировать();
	//	Для Каждого СтрокаВременныхРазниц Из ТабВременныхРазницПоКапитальнымВложениям Цикл
	//		СтрокаВременныхРазниц.Сумма = -СтрокаВременныхРазниц.Сумма;
	//	КонецЦикла;
	//	
	//	ТабВременныхРазницПоКапитальнымВложениямВРасходах = ТабЗатрат.Скопировать();
	//	ТабВременныхРазницПоКапитальнымВложениямВРасходах.Колонки.Добавить("ВременнаяРазница");
	//	Для Каждого СтрокаВременныхРазниц Из ТабВременныхРазницПоКапитальнымВложениямВРасходах Цикл
	//		СтрокаВременныхРазниц.ВременнаяРазница = -СтрокаВременныхРазниц.Сумма;
	//		СтрокаВременныхРазниц.Сумма = 0;
	//	КонецЦикла;
	//	ДвиженияПоПрочимЗатратамРегл(ЭтотОбъект, ТабВременныхРазницПоКапитальнымВложениямВРасходах, СтруктураШапкиДокумента, Неопределено);
	//	
	//	ТабЗатрат = ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабВременныхРазницПоКапитальнымВложениям, СтруктураШапкиДокумента, "ВР", "ОС", "Включение капитальных вложений в состав расходов");
	//	// Начисление амортизации.
	//	ТабАмортизации.Колонки.Налог.Имя = "Сумма";
	//	ТабЗатрат = ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента,"Нал","ОС");
	//	ПоддержкаПБУ18 = ПрименениеПБУ18(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
	//	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И ПоддержкаПБУ18 Тогда
	//		
	//		// Подготовим структуру таблицы для отражения затрат.
	//		ТаблицаОтраженияЗатрат = СформироватьТаблицуЗатрат();
	//		
	//		мПроводкиНУ = Движения.Налоговый;
	//		СтруктураШапкиДокумента.Дата = СтруктураШапкиДокумента.ПериодРегистрации;
	//		РасчетРазницПоАмортизации(СтруктураШапкиДокумента, ТабЗатрат, "ОС", "",  мПроводкиНУ, ТаблицаОтраженияЗатрат);
	//		
	//		Если ТаблицаОтраженияЗатрат.Количество() > 0 Тогда
	//	
	//			ДопПараметры = Новый Структура;
	//			ДопПараметры.Вставить("КодОперацииНЗП",  Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеПрочихЗатратВПроизводство);
	//			ДопПараметры.Вставить("КодОперацииЗатр", Перечисления.КодыОперацийЗатраты.ПрочиеПостоянныеЗатраты);
	//			
	//			ВремСтруктураШапкиДокумента = Новый Структура;
	//			ВремСтруктураШапкиДокумента.Вставить("ОтражатьВБухгалтерскомУчете", Ложь);
	//			ВремСтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете", Истина);
	//			
	//			ДвиженияПоПрочимЗатратамРегл(ЭтотОбъект, ТаблицаОтраженияЗатрат, ВремСтруктураШапкиДокумента, Неопределено, ДопПараметры);
	//			
	//		КонецЕсли;
	//		
	//		// Списание сумм капитальных вложений, включенных в состав расходов.
	//		Для Каждого СтрокаТабКапитальныхВложений Из ТабКапитальныхВложений Цикл
	//			
	//			Если НЕ ЗначениеНеЗаполнено(СтрокаТабКапитальныхВложений.Сумма) Тогда
	//				
	//				Проводка = мПроводкиНУ.Добавить();
	//				
	//				Проводка.Период       = СтруктураШапкиДокумента.Дата;
	//				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
	//				Проводка.НомерЖурнала = "ОС";
	//				Проводка.Содержание   = "Капитальные вложения, включаемые в состав расходов";
	//				Проводка.Сумма        = СтрокаТабКапитальныхВложений.Сумма;
	//				
	//				Проводка.СчетКт       = ПланыСчетов.Налоговый.РасходыНаКапитальныеВложения;
	//				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТабКапитальныхВложений.ОбъектУчета);
	//				
	//			КонецЕсли;
	//			
	//		КонецЦикла;
	//		
	//		мПроводкиНУ.Записать(Ложь);		
	//	КонецЕсли;

	//	Если НЕ Отказ Тогда

	//		НаборДвижений   = Движения.СтоимостьОСНалоговыйУчет;
	//		ТаблицаДвижений = НаборДвижений.Выгрузить();
	//		ТаблицаДвижений.Очистить();
	//		
	//		Для Каждого СтрокаТЧ из ТабАмортизации Цикл

	//			Если СтрокаТЧ.Сумма > 0 Тогда

	//				СтрокаДвижений = ТаблицаДвижений.Добавить();

	//				СтрокаДвижений.ОсновноеСредство = СтрокаТЧ.ОбъектУчета;
	//				СтрокаДвижений.Организация      = СтруктураШапкиДокумента.Организация;
	//				СтрокаДвижений.Амортизация      = СтрокаТЧ.Сумма;

	//			КонецЕсли;

	//		КонецЦикла;

	//		НаборДвижений.мПериод          = ДатаДок;
	//		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	//		НаборДвижений.ВыполнитьПриход();

	//	КонецЕсли;
	//	Если Не Отказ Тогда
	//		ЗафиксироватьФактВыполненияРегламентнойОперации(ПериодРегистрации,
	//													  СтруктураШапкиДокумента.Организация,
	//													  Ссылка,														  
	//													  Перечисления.РегламентныеОперации.НачислениеАмортизацииОС,
	//													  , "Нал");
	//	КонецЕсли;
	//	

	//КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок)

	ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ)

	
	//Если мУдалятьДвижения Тогда
	//	УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	//КонецЕсли;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ПериодРегистрации", КонецМесяца(ПериодРегистрации));
	
	Заголовок = "";
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	//СброситьФактВыполненияОперации(Ссылка);
	
	//УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, ложь);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	 
	мУдалятьДвижения = НЕ ЭтоНовый();
    	
	Если НЕ Отказ Тогда
		
		обЗаписатьПротоколИзменений(ЭтотОбъект);
		
	КонецЕсли; 

КонецПроцедуры // ПередЗаписью

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	//ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

