Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьПриходныйОрдерНаТовары()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	Конецесли;

	Если Товары.Итог("КоличествоМест") > 0 Тогда
		ОбластьШапки  = ОбластьШапки  + "Мест";
		ОбластьСтроки = ОбластьСтроки + "Мест";
	Конецесли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Контрагент,
	|	Организация,
	|	Товары.(
	|		Номенклатура,
	|		Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		КоличествоМест,
	|		Количество,
	|		ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест.Представление  КАК ЕдиницаИзмеренияМест,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		СерияНоменклатуры КАК Серия
	|	),
	|	ВозвратнаяТара.(
	|		Номенклатура,
	|		Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Количество,
	|		Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения
	|	)
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки,
	|	ВозвратнаяТара.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	ВыборкаСтрокТара   = Шапка.ВозвратнаяТара.Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйОрдерНаТовары_Накладная";

	Макет = ПолучитьМакет("Накладная");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Приходный ордер на товары");
	ТабДокумент.Вывести(ОбластьМакета);

	ПредставлениеОрганизации = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ПредставлениеКонтрагента = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата), "ПолноеНаименование,");

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеКонтрагента;
	ОбластьМакета.Параметры.Поставщик = Шапка.Контрагент;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.Получатель = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.Колонка = Колонка;
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
	Ном           = 0;

	// Товар
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.НомерСтроки = Ном;
		ОбластьМакета.Параметры.Товар       = ВыборкаСтрокТовары.Товар + ПредставлениеСерий(ВыборкаСтрокТовары);

		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;

	// Тара
	Пока ВыборкаСтрокТара.Следующий() Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТара);
		ОбластьМакета.Параметры.НомерСтроки = Ном;
		ОбластьМакета.Параметры.Товар       = ВыборкаСтрокТара.Товар + " (возвратная тара)";

		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТара.КодАртикул;
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ВыборкаСтрокТовары.Количество();
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПриходныйОрдерНаТовары()

// Функция формирует табличный документ унифицированной формы ТОРГ-4
// "Акт о приемке товара, поступившего без счета поставщика"
//
// Возвращаемое значение:
//  Табличный документ - печатная форма ТОРГ-4
//
Функция ПечатьТОРГ4()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата  КАК ДатаДокумента,
	|	Организация,
	|	Организация                         КАК ЮрФизЛицо,
	|	Организация                         КАК Руководители,
	|	Контрагент,
	|	Контрагент                          КАК Поставщик,
	|	Контрагент                          КАК Грузоотправитель,
	|	Подразделение.Представление         КАК ПредставлениеПодразделения,
	|	Подразделение,
	|	Склад                               КАК МестоПриемки,
	|	Товары.(
	|		Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|		Номенклатура." + ТоварКод + "   КАК ТоварКод,
	|		Номенклатура,
	|		КоличествоМест,
	|		Количество КАК КоличествоШтук,
	|		ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмеренияНаименование,
	|		ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|		ЕдиницаИзмеренияМест.Коэффициент / Коэффициент КАК КоличествоВОдномМесте,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		СерияНоменклатуры КАК Серия
	|	),
	|	ВозвратнаяТара.(
	|		Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|		Номенклатура." + ТоварКод + "   КАК ТоварКод,
	|		Номенклатура,
	|		0          КАК КоличествоМест,
	|		Количество КАК КоличествоШтук,
	|		Номенклатура.ЕдиницаХраненияОстатков.Представление               КАК ЕдиницаИзмеренияНаименование,
	|		Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ
	|	)
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки,
	|	ВозвратнаяТара.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	ВыборкаСтрокТара   = Шапка.ВозвратнаяТара.Выбрать();

	Макет = ПолучитьОбщийМакет("ТОРГ4");

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйОрдерНаТовары_ТОРГ4";

	// Выводим шапку накладной

	// Выводим общие реквизиты шапки
	СведенияОПокупателе = СведенияОЮрФизЛице(Шапка.ЮрФизЛицо,  Шапка.ДатаДокумента);
	СведенияОПоставщике = СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);

	Если Шапка.Контрагент <> NULL Тогда
		ОбластьМакета.Параметры.ПредставлениеПоставщика       = ОписаниеОрганизации(СведенияОПоставщике);
		ОбластьМакета.Параметры.ПоставщикПоОКПО               = СведенияОПоставщике.КодПоОКПО;
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		ОбластьМакета.Параметры.ОписаниеПоставщика            = ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	КонецЕсли;

	ОбластьМакета.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.НомерДокумента           = ПолучитьНомерНаПечать(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ОписаниеОрганизации(СведенияОПокупателе);
	ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакета.Параметры.ГрузополучательПоОКПО    = СведенияОПокупателе.КодПоОКПО;

	Руководители = ОтветственныеЛицаОрганизации(Шапка.Руководители, Шапка.ДатаДокумента,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	ОбластьМакета.Параметры.ФИОРуководителя      = Руководитель;
	ОбластьМакета.Параметры.ДожностьРуководителя = Руководители.РуководительДолжность;

	ТабДокумент.Вывести(ОбластьМакета);

	СтрокНаСтранице = 23;
	СтрокШапки      = 20;
	СтрокПодвала    = 7;
	НомерСтраницы   = 1;

	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	КоличествоСтрок = ВыборкаСтрокТовары.Количество() + ВыборкаСтрокТара.Количество();

	Если КоличествоСтрок = 1 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// инициализация итогов по странице
	ИтогоМестПоСтранице        = 0;
	ИтогоШтукПоСтранице        = 0;
	ИтогоМассаБруттоПоСтранице = 0;
	ИтогоМассаНеттоПоСтранице  = 0;

	// инициализация итогов по документу
	ИтогоМест        = 0;
	ИтогоШтук        = 0;
	ИтогоМассаБрутто = 0;
	ИтогоМассаНетто  = 0;
	Ном              = 0;

	// Выводим многострочную часть докмента
	ВыборкаСтрокТовары       = Шапка.Товары.Выбрать();
	ОбластьМакета            = Макет.ПолучитьОбласть("Строка");
	ОбластьИтоговПоСтранице  = Макет.ПолучитьОбласть("ИтогиПоСтранице");

	// Товары
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;
		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ОбластьИтоговПоСтранице.Параметры.ИтогоМестПоСтранице        = ИтогоМестПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогоШтукПоСтранице        = ИтогоШтукПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогоМассаБруттоПоСтранице = ИтогоМассаБруттоПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогоМассаНеттоПоСтранице  = ИтогоМассаНеттоПоСтранице;

			ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

			// очистим итоги по странице
			ИтогоМестПоСтранице        = 0;
			ИтогоШтукПоСтранице        = 0;
			ИтогоМассаБруттоПоСтранице = 0;
			ИтогоМассаНеттоПоСтранице  = 0;
			ИтогоСтоимостьПоСтранице   = 0;

			НомерСтраницы = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрокТовары.ТоварНаименование + ПредставлениеСерий(ВыборкаСтрокТовары);

		ТабДокумент.Вывести(ОбластьМакета);

		// Обновим итоги по странице
		ИтогоМестПоСтранице        = ИтогоМестПоСтранице        + ВыборкаСтрокТовары.КоличествоМест;
		ИтогоШтукПоСтранице        = ИтогоШтукПоСтранице        + ВыборкаСтрокТовары.КоличествоШтук;
		ИтогоМассаБруттоПоСтранице = ИтогоМассаБруттоПоСтранице + 0;
		ИтогоМассаНеттоПоСтранице  = ИтогоМассаНеттоПоСтранице  + 0;

		// Обновим итогов по документу
		ИтогоМест        = ИтогоМест        + ВыборкаСтрокТовары.КоличествоМест;
		ИтогоШтук        = ИтогоШтук        + ВыборкаСтрокТовары.КоличествоШтук;
		ИтогоМассаБрутто = ИтогоМассаБрутто + 0;
		ИтогоМассаНетто  = ИтогоМассаНетто  + 0;

	КонецЦикла;

	// Тара
	Пока ВыборкаСтрокТара.Следующий() Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;
		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ОбластьИтоговПоСтранице.Параметры.ИтогоМестПоСтранице        = ИтогоМестПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогоШтукПоСтранице        = ИтогоШтукПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогоМассаБруттоПоСтранице = ИтогоМассаБруттоПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогоМассаНеттоПоСтранице  = ИтогоМассаНеттоПоСтранице;

			ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

			// очистим итоги по странице
			ИтогоМестПоСтранице        = 0;
			ИтогоШтукПоСтранице        = 0;
			ИтогоМассаБруттоПоСтранице = 0;
			ИтогоМассаНеттоПоСтранице  = 0;
			ИтогоСтоимостьПоСтранице   = 0;

			НомерСтраницы = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТара);
		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрокТара.ТоварНаименование + " (возвратная тара)";

		ТабДокумент.Вывести(ОбластьМакета);

		// Обновим итоги по странице
		ИтогоМестПоСтранице        = ИтогоМестПоСтранице        + ВыборкаСтрокТара.КоличествоМест;
		ИтогоШтукПоСтранице        = ИтогоШтукПоСтранице        + ВыборкаСтрокТара.КоличествоШтук;
		ИтогоМассаБруттоПоСтранице = ИтогоМассаБруттоПоСтранице + 0;
		ИтогоМассаНеттоПоСтранице  = ИтогоМассаНеттоПоСтранице  + 0;

		// Обновим итогов по документу
		ИтогоМест        = ИтогоМест        + ВыборкаСтрокТара.КоличествоМест;
		ИтогоШтук        = ИтогоШтук        + ВыборкаСтрокТара.КоличествоШтук;
		ИтогоМассаБрутто = ИтогоМассаБрутто + 0;
		ИтогоМассаНетто  = ИтогоМассаНетто  + 0;

	КонецЦикла;

	// Выводим итоги по последней странице
	ОбластьИтоговПоСтранице.Параметры.ИтогоМестПоСтранице        = ИтогоМестПоСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогоШтукПоСтранице        = ИтогоШтукПоСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогоМассаБруттоПоСтранице = ИтогоМассаБруттоПоСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогоМассаНеттоПоСтранице  = ИтогоМассаНеттоПоСтранице;
	ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

	// Выводим итоги по документу в общем
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогоМест        = ИтогоМест;
	ОбластьМакета.Параметры.ИтогоШтук        = ИтогоШтук;
	ОбластьМакета.Параметры.ИтогоМассаБрутто = ИтогоМассаБрутто;
	ОбластьМакета.Параметры.ИтогоМассаНетто  = ИтогоМассаНетто;
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	// Зададим параметры макета
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	Возврат ТабДокумент;

КонецФункции

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Накладная" Тогда

		ТабДокумент = ПечатьПриходныйОрдерНаТовары();
	ИначеЕсли ИмяМакета = "ТОРГ4" тогда

		// Унифицированная форма ТОРГ-4
		ТабДокумент = ПечатьТОРГ4();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();
	
	КонецЕсли; 

	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;

	СписокМакетов.Добавить("Накладная", "Приходный ордер на товары");
	СписокМакетов.Добавить("ТОРГ4", "ТОРГ-4 (Акт о приемке товара без счета поставщика)");

	ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура выполняет копирование табличной части заказа поставщику в документ.
//
// Процедура выполняет заполнение табличной части по документу основанию.
// При заполнении копируется состав документа-основания.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьТоварыПоОснованию(ДокументОснование) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда

		ИмяТаблицы = "ЗаказПоставщику.Товары";
		Запрос.УстановитьПараметр("СтатусТара", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);

		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаИзмерения,
		|	КоличествоОстаток,
		|	Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику = &ДокументОснование
		|												И СтатусПартии <> &СтатусТара)
		|ГДЕ
		|	НЕ Номенклатура.Услуга
		|";

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл

			СтрокаТабличнойЧасти = Товары.Добавить();

			СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество                 = Выборка.КоличествоОстаток;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент                = Выборка.Коэффициент;
			СтрокаТабличнойЧасти.Количество                 = Выборка.КоличествоОстаток;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			СтрокаТабличнойЧасти.Качество                   = Справочники.Качество.Новый;

		КонецЦикла;

	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда

		ИмяТаблицы = "СчетНаОплатуПоставщика.Товары";

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕдиницаИзмерения,
		|	ЕдиницаИзмеренияМест,
		|	Количество,
		|	КоличествоМест,
		|	Коэффициент,
		|	Номенклатура, 
		|	ХарактеристикаНоменклатуры
		|ИЗ
		|	Документ." + ИмяТаблицы + "
		|
		|ГДЕ
		|	Ссылка = &ДокументОснование";

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл

			СтрокаТабличнойЧасти = Товары.Добавить();

			СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество                 = Выборка.Количество;
			СтрокаТабличнойЧасти.КоличествоМест             = Выборка.КоличествоМест;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест       = Выборка.ЕдиницаИзмеренияМест;
			СтрокаТабличнойЧасти.Коэффициент                = Выборка.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			СтрокаТабличнойЧасти.Качество                   = Справочники.Качество.Новый;

		КонецЦикла;

	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда

		ИмяТаблицы = "РеализацияТоваровУслуг.Товары";

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕдиницаИзмерения,
		|	ЕдиницаИзмеренияМест,
		|	КоличествоМест,
		|	Количество,
		|	Коэффициент,
		|	Номенклатура,
		|	СерияНоменклатуры,
		|	ХарактеристикаНоменклатуры
		|ИЗ
		|	Документ." + ИмяТаблицы + "
		|
		|ГДЕ
		|	Ссылка = &ДокументОснование";

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл

			СтрокаТабличнойЧасти = Товары.Добавить();

			СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество                 = Выборка.Количество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест       = Выборка.ЕдиницаИзмеренияМест;
			СтрокаТабличнойЧасти.Коэффициент                = Выборка.Коэффициент;
			СтрокаТабличнойЧасти.КоличествоМест             = Выборка.КоличествоМест;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			СтрокаТабличнойЧасти.Качество                   = Справочники.Качество.Новый;

		КонецЦикла;

	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный);
		Запрос.УстановитьПараметр("Склад",        Склад);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Остатки.Номенклатура,
		|	Остатки.СерияНоменклатуры,
		|	Остатки.ХарактеристикаНоменклатуры,
		|	Остатки.Качество,
		|	Остатки.ДокументРезерва,
		|	Остатки.КоличествоОстаток             КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(, ДокументПолучения = &ДокументОснование 
		|                                                        И СтатусПартии = &СтатусПартии
		|                                                        И Склад = &Склад) КАК Остатки
		|";
		
		РезультатЗапроса = Запрос.Выполнить();

		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл

			Количество = Выборка.КоличествоОстаток;
			Если Количество = 0 ИЛИ Количество = NULL Тогда
				Продолжить;
			КонецЕсли;

			СтрокаТабличнойЧасти = Товары.Добавить();

			СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество                 = - Количество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения           = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
			СтрокаТабличнойЧасти.Коэффициент                = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

			// Рассчитать реквизиты табличной части.
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
			СтрокаТабличнойЧасти.ДокументРезерва            = Выборка.ДокументРезерва;
			СтрокаТабличнойЧасти.Качество                   = Выборка.Качество;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;

		КонецЦикла; // Выборка.Следующий()

	КонецЕсли;

КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

// Процедура выполняет заполнение табличной части по документу основанию.
// При заполнении копируется состав документа-основания.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьВозвратнуюТаруПоОснованию(ДокументОснование) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда

		Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
		Запрос.УстановитьПараметр("Склад",        Склад);

		Запрос.Текст =
		"ВЫБРАТЬ
		|	Остатки.Номенклатура,
		|	Остатки.ДокументРезерва,
		|	Остатки.КоличествоОстаток             КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(, ДокументПолучения = &ДокументОснование 
		|                                                       И Склад = &Склад
		|                                                       И СтатусПартии = &СтатусПартии) КАК Остатки
		|";

		РезультатЗапроса = Запрос.Выполнить();

		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Количество = Выборка.КоличествоОстаток;

			Если Количество = 0 ИЛИ Количество = NULL Тогда
				Продолжить;
			КонецЕсли;

			СтрокаТабличнойЧасти = ВозвратнаяТара.Добавить();

			СтрокаТабличнойЧасти.Номенклатура    = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество      = Количество;
			СтрокаТабличнойЧасти.ДокументРезерва = Выборка.ДокументРезерва;
		КонецЦикла; // Выборка.Следующий()
	Иначе

		ИмяТаблицы = СокрЛП(ДокументОснование.Метаданные().Имя) + ".ВозвратнаяТара";

		Запрос.Текст =
		"ВЫБРАТЬ
		|	Количество,
		|	Номенклатура
		|ИЗ
		|	Документ." + ИмяТаблицы + "
		|
		|ГДЕ
		|	Ссылка = &ДокументОснование";

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаТабличнойЧасти = ВозвратнаяТара.Добавить();

			СтрокаТабличнойЧасти.Номенклатура= Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество  = Выборка.Количество;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// По виду операции определяет статус партии прихода товаров (не возвратная тара!)
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Значение перечисления "Статусы партии товаров".
//
Функция ОпределитьСтатусПартииПрихода() 

	Статус = Перечисления.СтатусыПартийТоваров.ПустаяСсылка();

	Возврат Статус;

КонецФункции // ОпределитьСтатусПартииПрихода()

// Заполняет в таблице движений по регитстру ПартииТоваровНаСкладах нестандартные поля.
//
// Параметры:
//  ТаблицаТЧ       - таблица значений, соответствующая табличной части документа
//  ТаблицаДвижений - таблица значений, соответствующая набору записей регистра,
//  СтатусПартии    - значение перечисления статусов партий. 
//
Процедура ЗаполнитьПоляПартииТоваровНаСкладах(ТаблицаТЧ, ТаблицаДвижений, СтатусПартии)

	Для каждого СтрокаДвижений Из ТаблицаДвижений Цикл

		СтрокаДвижений.Склад                 = Склад;
		СтрокаДвижений.ДокументОприходования = Ссылка;
		СтрокаДвижений.СтатусПартии          = СтатусПартии;

		// Заказ заполняем если его указали в документе и по договору ведется обособленный учет товаров по заказам.
		СтрокаТЧ = ТаблицаТЧ.Найти(СтрокаДвижений.НомерСтроки, "НомерСтроки");
		СтрокаДвижений.Заказ = Неопределено; // Заказ неизвестен

	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоляПартииТоваровНаСкладах()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();
	
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей =  Новый Структура("ВидОперации, Склад");

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		ОшибкаПриПроведении("Документ не может быть оформлен на неавтоматизированную торговую точку!", Отказ, Заголовок);
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.Перемещение Тогда
		Если СтруктураШапкиДокумента.Склад <> СтруктураШапкиДокумента.СкладПолучатель Тогда
			ОшибкаПриПроведении("Склад документа должен соответствовать складу-получателю документа перемещения!", Отказ, Заголовок);
		КонецЕсли;		
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Качество");

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	                                                      Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");

	// Теперь позовем общую процедуру проверки заполнения.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара",СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоТаре,
	Отказ, Заголовок);


	// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
	
	НаборДвижений = Движения.ТоварыНаСкладах;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ТоварыНаСкладах.ВыполнитьПриход();
	КонецЕсли;

	// ТАРА ПО РЕГИСТРУ ТоварыНаСкладах.
	
	НаборДвижений = Движения.ТоварыНаСкладах;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	ТаблицаДвижений.Очистить();
	ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый,"Качество");

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ТоварыНаСкладах.ВыполнитьПриход();
	КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПолучениюНаСклады
	НаборДвижений = Движения.ТоварыКПолучениюНаСклады;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

	// Недостающие поля.
	Если ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.Перемещение Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(ДокументПеремещения,"ДокументПолучения");
	Иначе
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументПолучения");
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");
	ТаблицаДвижений.ЗаполнитьЗначения(Склад, "Склад");

	// Если без права продажи, то сам документ будет документом резерва.
	Если БезПраваПродажи Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "ДокументРезерва");
	КонецЕсли;

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.Перемещение 
	   И РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;	   
		
	Если Не Отказ Тогда
		Движения.ТоварыКПолучениюНаСклады.ВыполнитьПриход();
	КонецЕсли;
	
	// ТАРА ПО РЕГИСТРУ ТоварыКПолучениюНаСклады

	НаборДвижений = Движения.ТоварыКПолучениюНаСклады;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	ТаблицаДвижений.Очистить();
	ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

	// Недостающие поля.
	Если ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.Перемещение Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(ДокументПеремещения,"ДокументПолучения");
	Иначе
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументПолучения");
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "СтатусПартии");
	ТаблицаДвижений.ЗаполнитьЗначения(Склад, "Склад");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый,"Качество");

	// Если без права продажи, то сам документ будет документом резерва.
	Если БезПраваПродажи Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "ДокументРезерва");
	КонецЕсли;

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.Перемещение 
	   И РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;	   
	
	Если Не Отказ Тогда
		Движения.ТоварыКПолучениюНаСклады.ВыполнитьПриход();
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.Перемещение Тогда
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыВРезервеНаСкладах
		ТаблицаПоТоварамРезерв = ТаблицаПоТоварам.Скопировать();
		Сч = 0;
		Пока Сч < ТаблицаПоТоварамРезерв.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоТоварамРезерв.Получить(Сч);
				Если ЗначениеНеЗаполнено(СтрокаТаблицы.ДокументРезерва) 
				 ИЛИ (ТипЗнч(СтрокаТаблицы.ДокументРезерва) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") 
				   И НЕ СтрокаТаблицы.РезервБезПраваПродажи) Тогда
				ТаблицаПоТоварамРезерв.Удалить(СтрокаТаблицы);
			Иначе 
				Сч = Сч + 1;
			КонецЕсли; 
		КонецЦикла;
		
		Если ТаблицаПоТоварамРезерв.Количество() > 0 Тогда
			
			НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
			
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамРезерв, ТаблицаДвижений);
			
			ТаблицаДвижений.ЗаполнитьЗначения(Склад, "Склад");
			
			НаборДвижений.мПериод = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			
			Если Не Отказ Тогда
				Движения.ТоварыВРезервеНаСкладах.ВыполнитьПриход();
			КонецЕсли;
		КонецЕсли;
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПолучениюНаСклады
		// Для резервов по ордеру надо сделать приход по регистру "Товары к получению на склады"
		ТаблицаПоТоварамКПолучению = ТаблицаПоТоварам.Скопировать();
		Сч = 0;
		Пока Сч < ТаблицаПоТоварамКПолучению.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоТоварамКПолучению.Получить(Сч);
			Если ЗначениеНеЗаполнено(СтрокаТаблицы.ДокументРезерва) ИЛИ ТипЗнч(СтрокаТаблицы.ДокументРезерва) <> Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
				ТаблицаПоТоварамКПолучению.Удалить(СтрокаТаблицы);
			Иначе 
				Сч = Сч + 1;
			КонецЕсли; 
		КонецЦикла;
		
		Если ТаблицаПоТоварамКПолучению.Количество() > 0 Тогда
			
			НаборДвижений = Движения.ТоварыКПолучениюНаСклады;
			ТаблицаПоТоварамКПолучению.Колонки.ДокументРезерва.Имя = "ДокументПолучения";
		
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамКПолучению, ТаблицаДвижений);
			
			 ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");
			ТаблицаДвижений.ЗаполнитьЗначения(Склад, "Склад");
			
			НаборДвижений.мПериод = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			// Проверка осатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;
			
			Если Не Отказ Тогда
				Движения.ТоварыКПолучениюНаСклады.ВыполнитьПриход();
			КонецЕсли;
			
		КонецЕсли;
			
		// ТАРА ПО РЕГИСТРУ ТоварыВРезервеНаСкладах
		ТаблицаПоТареРезерв = ТаблицаПоТаре.Скопировать();
		Сч = 0;
		Пока Сч < ТаблицаПоТареРезерв.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоТареРезерв.Получить(Сч);
				Если ЗначениеНеЗаполнено(СтрокаТаблицы.ДокументРезерва) 
				 ИЛИ (ТипЗнч(СтрокаТаблицы.ДокументРезерва) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") 
				   И НЕ СтрокаТаблицы.РезервБезПраваПродажи) Тогда
				ТаблицаПоТареРезерв.Удалить(СтрокаТаблицы);
			Иначе 
				Сч = Сч + 1;
			КонецЕсли; 
		КонецЦикла;
		
		Если ТаблицаПоТареРезерв.Количество() > 0 Тогда
				
			НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
			
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТареРезерв, ТаблицаДвижений);
			
			ТаблицаДвижений.ЗаполнитьЗначения(Склад, "Склад");
			
			НаборДвижений.мПериод = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.ТоварыВРезервеНаСкладах.ВыполнитьПриход();
			КонецЕсли;
		КонецЕсли;
			// ТАРА ПО РЕГИСТРУ ТоварыКПолучениюНаСклады
			// Для резервов по ордеру надо списать с регистра "Товары к получению на склады"
			ТаблицаПоТареКПолучению = ТаблицаПоТаре.Скопировать();
			Сч = 0;
			Пока Сч < ТаблицаПоТареКПолучению.Количество() Цикл
				СтрокаТаблицы = ТаблицаПоТареКПолучению.Получить(Сч);
				Если ЗначениеНеЗаполнено(СтрокаТаблицы.ДокументРезерва) ИЛИ ТипЗнч(СтрокаТаблицы.ДокументРезерва) <> Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
					ТаблицаПоТареКПолучению.Удалить(СтрокаТаблицы);
				Иначе 
					Сч = Сч + 1;
				КонецЕсли; 
			КонецЦикла;
			
			Если ТаблицаПоТареКПолучению.Количество() > 0 Тогда
				
				НаборДвижений = Движения.ТоварыКПолучениюНаСклады;
				ТаблицаПоТареКПолучению.Колонки.ДокументРезерва.Имя = "ДокументПолучения";
				
				ТаблицаДвижений = НаборДвижений.Выгрузить();
				ТаблицаДвижений.Очистить();
				
				ЗагрузитьВТаблицуЗначений(ТаблицаПоТареКПолучению, ТаблицаДвижений);
				
				ТаблицаДвижений.ЗаполнитьЗначения(Склад, "Склад");
		 		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "СтатусПартии");
				
				НаборДвижений.мПериод = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
				
				// Проверка осатков при оперативном проведении.
				Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
					НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
				КонецЕсли;
				
				Если Не Отказ Тогда
					Движения.ТоварыКПолучениюНаСклады.ВыполнитьРасход();
				КонецЕсли;
				
			КонецЕсли;
			
	Иначе // не перемещение

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
		
		НаборДвижений = Движения.ТоварыОрганизаций;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		
		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.ТоварыОрганизаций.ВыполнитьПриход();
		КонецЕсли;
	КонецЕсли;

	// Если товары можно продавать приходуем партии в управленческом учете со статусом "По ордеру"
	Если НЕ БезПраваПродажи Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.ОтПодотчетника
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.ОтПоставщика 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.ОтПокупателя Тогда
			
			// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах
			
			НаборДвижений = Движения.ПартииТоваровНаСкладах;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
			
			// Недостающие поля.
			ЗаполнитьПоляПартииТоваровНаСкладах(ТаблицаПоТоварам, ТаблицаДвижений, Перечисления.СтатусыПартийТоваров.ПоОрдеру);
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.ПартииТоваровНаСкладах.ВыполнитьПриход();
			КонецЕсли;
			
			// ТАРА ПО РЕГИСТРУ ПартииТоваровНаСкладах.
			
			ТаблицаДвижений.Очистить();
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);
			
			// Недостающие поля.
			ЗаполнитьПоляПартииТоваровНаСкладах(ТаблицаПоТаре, ТаблицаДвижений, 
			Перечисления.СтатусыПартийТоваров.ПоОрдеру);
			
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый,"Качество");
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.ПартииТоваровНаСкладах.ВыполнитьПриход();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// Если это приход без права продажи, то надо сначала зарезервировать товар
	Если БезПраваПродажи Тогда
		
		НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
				
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "ДокументРезерва");
		ТаблицаДвижений.ЗаполнитьЗначения(Склад,  "Склад");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
		Если Не Отказ Тогда
			Движения.ТоварыВРезервеНаСкладах.ВыполнитьПриход();
		КонецЕсли;
		
		НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);
				
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "ДокументРезерва");
		ТаблицаДвижений.ЗаполнитьЗначения(Склад,  "Склад");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
		Если Не Отказ Тогда
			Движения.ТоварыВРезервеНаСкладах.ВыполнитьПриход();
		КонецЕсли;
		
	КонецЕсли;

	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары. (для списания партий товаров)
	Если ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.Перемещение Тогда
		
		// Если партии были оприходованы с правом перепродажи, то нужно списывать партии
		Если НЕ БезПраваПродажи Тогда
			
			НаборДвижений = Движения.СписанныеТовары;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
			
			// Недостающие поля.
			Инд = 0;
			Для каждого Строка Из ТаблицаДвижений Цикл
				
				Инд = Инд+1;
				Строка.НомерСтрокиДокумента = Инд;
				
			КонецЦикла;
			
			// Если ПУ по складам
			Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");
			КонецЕсли;
			
			ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
			ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
			
			// Документ передачи для списания по реализации
			ТаблицаДвижений.ЗаполнитьЗначения(ДокументПеремещения,"ОсновнойДокумент");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.СписаниеПоОрдеру,"КодОперацииПартииТоваров");
			
			// Расходный ордер отражается только в упр. учете
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"ОтражатьВУправленческомУчете");
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.СписанныеТовары.ВыполнитьДвижения();
			КонецЕсли;
			
			
			УчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата);
			
			Если УчетнаяПолитика.СписыватьПартииПриПроведенииДокументов Тогда
				
				ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
				
				ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
				ЗаписьРегистрации.Период = Дата;
				ЗаписьРегистрации.Регистратор = Ссылка;
				
			Иначе
				
				// В неоперативном режиме границы последовательностей сдвигаются назад, если они позже документа.
				Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
					СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация, Истина, Ложь, Ложь)
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику")
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика")Тогда

		// Заполним реквизиты из стандартного набора.
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.ОтПоставщика;

		// Заполним табличную часть "Товары" по заказу или счету поставщика, скопировав состав.
		ЗаполнитьТоварыПоОснованию(Основание);
		ЗаполнитьВозвратнуюТаруПоОснованию(Основание);

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
	
		// Заполним реквизиты из стандартного набора.
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.ОтПокупателя;

		// Заполним табличную часть "Товары" по реализации, скопировав состав.
		ЗаполнитьТоварыПоОснованию(Основание);
		ЗаполнитьВозвратнуюТаруПоОснованию(Основание);

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
	
		// Заполним реквизиты из стандартного набора.
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ВидОперации         = Перечисления.ВидыОперацийПриходныйОрдер.Перемещение;
		Склад               = Основание.СкладПолучатель;
		ДокументПеремещения = Основание.Ссылка;

		// Заполним табличную часть "Товары" по реализации, скопировав состав.
		ЗаполнитьТоварыПоОснованию(Основание);
		ЗаполнитьВозвратнуюТаруПоОснованию(Основание);

	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	// Проверка заполнения единицы измерения мест и количества мест
	ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

	Если ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.Перемещение Тогда
		Контрагент = Неопределено;
		ЗаполнитьКачествоПоУмолчанию(Товары);
	Иначе
		ОчиститьРеквизитТЧ(ЭтотОбъект.Товары, "ДокументРезерва");
		ОчиститьРеквизитТЧ(ЭтотОбъект.ВозвратнаяТара, "ДокументРезерва");
		ЗаполнитьКачествоПоУмолчанию(Товары, Истина);
	КонецЕсли;

	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;


	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = СформироватьДеревоПолейЗапросаПоШапке();
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"                 , "ВидСклада"                 , "ВидСклада");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДокументПеремещения"   , "СкладПолучатель"           , "СкладПолучатель");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"       , "ВестиПартионныйУчетПоСкладам"      , "ВестиПартионныйУчетПоСкладам");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НомерСтроки"               , "НомерСтроки");
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         , "СерияНоменклатуры");
	СтруктураПолей.Вставить("Качество"                  , "Качество");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("РезервБезПраваПродажи"     , "ДокументРезерва.БезПраваПродажи");
	СтруктураПолей.Вставить("ДокументРезерва"           , "ДокументРезерва");

	РезультатЗапросаПоТоварам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НомерСтроки"               , "НомерСтроки");
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("ДокументРезерва"           , "ДокументРезерва");
	СтруктураПолей.Вставить("РезервБезПраваПродажи"     , "ДокументРезерва.БезПраваПродажи");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");

	РезультатЗапросаПоТаре = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);
	
	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, 
											Отказ, Заголовок);
	
	// Проверить заполнение ТЧ "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
											Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоТоварам, ТаблицаПоТаре,
							Отказ, Заголовок);

	КонецЕсли; 

КонецПроцедуры	// ОбработкаПроведения()

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	// Удаление записей регистрации из всех последовательностей
	Для Каждого НаборЗаписейРегистрацииВПоследовательности Из ПринадлежностьПоследовательностям Цикл
		НаборЗаписейРегистрацииВПоследовательности.Очистить();
	КонецЦикла;
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
