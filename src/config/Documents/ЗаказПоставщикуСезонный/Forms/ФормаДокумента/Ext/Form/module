
Перем мОбновлятьВладельца Экспорт;

// Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мТекущаяДатаДокумента;

// Хранит текущее значение учетной политики, организация является плательщиком ЕНВД
Перем мОрганизацияЯвляетсяПлательщикомЕНВД;

// Хранит текущее значение организации для контроля учетной политики, организация является плательщиком ЕНВД
Перем мТекущаяОрганизация;

Перем мКолонкиТовары;

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов; 

// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента; 

// Устанавливается в значение "Истина", если пользователю можно менять цену
// в документе
Перем мМожноМенятьЦенуВДокументе;

Перем мЧас;
Перем мМинута;

Перем мОбработкаТайпинга;
Перем мТекстТайпинга;
Перем мПоследнееЗначениеЭлементаТайпинга;

// Хранит информацию о сумме без скидки документа.
Перем мСуммаДокументаБезСкидок Экспорт;
Перем мРассчитыватьАвтоматическиеСкидки Экспорт;
Перем мМинимальныеЦены Экспорт;
Перем мСписокФильтров Экспорт;

Перем мПечатнаяФормаПоУмолчанию;


Перем ВыбранныйТипЦен;
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ


// Процедура вызывается при выборе времени из списка у ЭУ ВремяНапоминания
//
Процедура ВыбратьВремя(ДатаВремен, ТекЭлемент, ПолныйГод = Истина)

	СтруктураРабочихВремен = ОпределитьНачалоИОкончениеРабочегоДняПользователя();
	
	СписокВремен = Новый СписокЗначений;
	НачалоРабочегоДня = НачалоДня(ДатаВремен)+Час(СтруктураРабочихВремен.ДатаНачала)*60*60+Минута(СтруктураРабочихВремен.ДатаНачала)*60;
	ОкончаниеРабочегоДня = НачалоДня(ДатаВремен)+Час(СтруктураРабочихВремен.ДатаОкончания)*60*60+Минута(СтруктураРабочихВремен.ДатаОкончания)*60 - 60*60;

	НачалоРабочегоДняДляСпискаВыбора = НачалоЧаса(НачалоРабочегоДня);
	а = 0;
	Пока 1=1 Цикл
		ВремяСписка = НачалоРабочегоДняДляСпискаВыбора + а*30*60;
		Если НачалоЧаса(ВремяСписка) > НачалоЧаса(ОкончаниеРабочегоДня) Тогда
			Прервать;
		КонецЕсли;
		Если ПолныйГод Тогда
			СписокВремен.Добавить(ВремяСписка, Формат(ВремяСписка,"ДФ='дд.ММ.гггг ЧЧ:мм'"));
		Иначе
			СписокВремен.Добавить(ВремяСписка, Формат(ВремяСписка,"ДФ='дд.ММ.гг ЧЧ:мм'"));
		КонецЕсли; 
		а = а + 1;
	КонецЦикла; 

	НачальноеЗначение = СписокВремен.НайтиПоЗначению(ДатаВремен);
	Если НачальноеЗначение = Неопределено Тогда
		ВыбранноеВремя = ЭтаФорма.ВыбратьИзСписка(СписокВремен, ТекЭлемент);
	Иначе
		ВыбранноеВремя = ЭтаФорма.ВыбратьИзСписка(СписокВремен, ТекЭлемент, НачальноеЗначение);
	КонецЕсли; 

	Если ВыбранноеВремя <> Неопределено Тогда
		ДатаВремен = ВыбранноеВремя.Значение;
	КонецЕсли; 
	
КонецПроцедуры // ВыбратьВремя()
 

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	ДокументОбъект.ВалютаДокумента    = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ДокументОбъект.КурсВзаиморасчетов = 1;
	ДокументОбъект.КратностьВзаиморасчетов = 1;
	

	УстановитьВидимость();

КонецПроцедуры // ПриИзмененииДоговора()

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)

	СписокЗапросов      = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Если ТабличнаяЧасть = Товары Тогда
		СписокЗапросов.Добавить("РасходЦеныНоменклатуры", "По ценам номенклатуры");
		СписокЗапросов.Добавить("ОстаткиНоменклатуры", "По остаткам номенклатуры");
		СписокЗапросов.Добавить("РасходОстаткиИЦеныНоменклатуры", "По остаткам и ценам номенклатуры");
	КонецЕсли;

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()
 
// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	
	
	// Заполняем реквизиты табличной части.
	ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 
	ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект); 
		
КонецПроцедуры // ПриИзмененииНоменклатурыТоваров()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает соответстующие свойства поля ввода цены при изменении 
// номенклатуры в текущей строке табличной части.
//
// Параметры:
//  Номенклатура - ссылка на справочник, элемент номенклатуры, для которого будем устанавливать цену
//
Процедура УстановитьСвойстваПоляВводаЦены(Номенклатура)

	ТекущаяСтрока     = Номенклатура;
	ЭлементУправления = ЭлементыФормы.Товары.Колонки.Цена.ЭлементУправления;

КонецПроцедуры // УстановитьСвойстваПоляВводаЦены()


// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	Колонки      = ЭлементыФормы.Товары.Колонки;
	
	
	// Колонки налога показываем только тогда, когда его учитываем.
	Если УчитыватьНДС <> Колонки.СтавкаНДС.Видимость Тогда
		УстановитьВидимостьКолонкиТабЧасти( Колонки.СтавкаНДС,    УчитыватьНДС);
	КонецЕсли;

	Если УчитыватьНДС <> Колонки.СуммаНДС.Видимость Тогда
		УстановитьВидимостьКолонкиТабЧасти( Колонки.СуммаНДС,    УчитыватьНДС);
	КонецЕсли;



	КнопкиКоманднойПанели = ЭлементыФормы.ДействияФормы.Кнопки;

		   ЭлементыФормы.Подразделение.Видимость = Транзит;
		   ЭлементыФормы.НадписьГрузополучатель.Видимость = Транзит;
		   ЭлементыФормы.Грузополучатель.Видимость = Транзит;

		   Если Контрагент = Справочники.Контрагенты.НайтиПоКоду("94072") тогда	   
			   ЭлементыФормы.КоманднаяПанельТовары.Кнопки.кнЗаполнитьПоЦенамКонтрагента.Доступность = истина;
		   иначе   
			   ЭлементыФормы.КоманднаяПанельТовары.Кнопки.кнЗаполнитьПоЦенамКонтрагента.Доступность = ложь;
		   КонецЕсли;
КонецПроцедуры // УстановитьВидимость()


// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	СуммаВсего = ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары");
	СуммаВсегоНДС = ПолучитьНДСДокумента(ЭтотОбъект, "Товары");
	ЭлементыФормы.Всего.Значение    = ФорматСумм(СуммаВсего);
	ЭлементыФормы.ВсегоНДС.Значение = ФорматСумм(СуммаВсегоНДС);

	ВременнаяСтрока = "";

	Если (НЕ ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента))
	   И (ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда

		ВременнаяСтрока = ВременнаяСтрока + КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета) +  ДокументОбъект.ВалютаДокумента
		                + " = " + КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
		                + мВалютаРегламентированногоУчета + ", ";

	КонецЕсли;

	Если НЕ ЗначениеНеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
	Иначе
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	КонецЕсли;

	

	Если ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ


// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		Проверен = Ложь;  
		Если ПараметрОснование = Неопределено
			ИЛИ Не ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			
			// Заполнить реквизиты значениями по умолчанию.
			ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета, "Продажа");
			
		КонецЕсли;
		
		УстановитьНомерДокумента(ЭтотОбъект);
		
	Иначе // повторное открытие
		Если не транзит тогда  //транзитные можно править
			ЕстьЗаказы=ЕстьЗаказыПоставщикуПоСезонномуЗаказу();
			Если ЕстьЗаказы и не РольДоступна("ПолныеПрава") тогда
				ЭтаФорма.ТолькоПросмотр=истина;
				ЭтаФорма.ЭлементыФормы.КоманднаяПанельТовары.Кнопки.кнРассчитатьЦены.Доступность = ложь;
				Сообщить("По сезонномку заказу уже были заказы поставщику.
				|Изменения невозможны.");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("ЕдиницаХранения");

	// Установить ограничение - изменять видимоть колонок для таличной части 
	// "Возвратная тара".

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("СтавкаНДС");
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("ПроцентСкидкиНаценки");
	СтруктураКолонок.Вставить("ЕдиницаХранения");
	
	УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Товары.Колонки, СтруктураКолонок);

	// Заполнить подменю выбора печатных форм.
	СписокМакетов = ЭтотОбъект.ПолучитьСписокПечатныхФорм();
	УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати,
	                                       СписокМакетов,
	                                       Новый Действие("ДействияФормыДействиеВыбратьПечатнуюФормы"));

	// Установить печатную форму по умолчанию.
	УстановитьКнопкуПечати(ЭтотОбъект.Метаданные().Имя, ЭтаФорма, СписокМакетов, мПечатнаяФормаПоУмолчанию);

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Обновить содержание информационных строк.

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;

	// Установить видимость колонок "ХарактеристикаНоменклатуры"
	УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);

		// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	
	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	// Выполнить стандартные действия при определении режима использования плановой себестоимости
	
	
	Если  (ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Малышев Егор") или ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Малышев Егор (снабжение)")) или ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Жарикова В.") тогда
		ЭлементыФормы.ПроцентПредоплаты.Доступность = Истина;	
	конецЕсли;
КонецПроцедуры

	

 

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	
	ОбновитьПодвал();
	

	// Подсчитаем количество строк в табличных частях.
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если СтраницаПанели.Имя = "Товары" Тогда
			СтраницаПанели.Заголовок = "Товары (" + ДокументОбъект.Товары.Количество() + " поз.)";
		КонецЕсли;

	КонецЦикла;


	//Адиянов<<<
	Если СканДокумента.Получить() = Неопределено Тогда 
		ЭлементыФормы.РамкаСканДокумента.Заголовок = "Скан документа отсутствует";
	Иначе
		ЭлементыФормы.РамкаСканДокумента.Заголовок = "Скан документа вложен";
	КонецЕсли;	
	//Адиянов>>>
	
	
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
    		
	
КонецПроцедуры // ПослеЗаписи()


// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если не ЗначениеЗаполнено(ДатаДействияПо) тогда
		Предупреждение("<Дата Действия По> не заполнена",30);
		Отказ=истина;
	КонецЕсли;
	
	ЗаполнитьВесНетто(Товары);
	
	КоличествоДокумента = Товары.Итог("Количество");
	
	Если Не ЗначениеЗаполнено(ЗаказДубль) и не ЭтоНовый() тогда
		ЗаказДубль=Документы.ЗаказПоставщику.НайтиПоРеквизиту("СезонныйЗаказДляСинхронизации",Ссылка);
	конецЕсли; 
	Если не Отказ Тогда
		Если ЗначениеЗаполнено(ЗаказДубль)Тогда
			дубльОбъект = ЗаказДубль.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(ДубльОбъект,ссылка);
			ДубльОбъект.Товары.Загрузить(Товары.Выгрузить());
			Если организация = Справочники.Организации.НайтиПоКоду("00001") Тогда
			ДубльОбъект.Номер = "СЗ"+Прав(Номер,СтрДлина(Номер)-2);
		    иначе
			ДубльОбъект.Номер = "S"+Прав(Номер,СтрДлина(Номер)-1);
			конецЕсли;	
			ДубльОбъект.Дата = Дата;
			ДубльОбъект.СезонныйЗаказДляСинхронизации = Ссылка;
			ДубльОбъект.ВидЗаказа = 1;
			
			ДубльОбъект.Записать(РежимЗаписиДокумента.Запись);
			ЗаказДубль = ДубльОбъект.ссылка;
		Иначе
			дубльОбъект = Документы.ЗаказПоставщику.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(ДубльОбъект,ЭтотОбъект);
			ДубльОбъект.Товары.Загрузить(Товары.Выгрузить());
			ДубльОбъект.Номер = "СЗ"+Прав(Номер,СтрДлина(Номер)-2);
			ДубльОбъект.Дата = Дата;
			Если ЭтоНовый() Тогда
				НовыйСсылка = Документы.ЗаказПоставщикуСезонный.ПолучитьСсылку(Новый УникальныйИдентификатор);	
				ДубльОбъект.СезонныйЗаказДляСинхронизации = НовыйСсылка;
				ЭтотОбъект.УстановитьСсылкуНового(НовыйСсылка);
			иначе
				ДубльОбъект.СезонныйЗаказДляСинхронизации = Ссылка;
			конецЕсли;
			ДубльОбъект.ВидЗаказа = 1;
			ДубльОбъект.Записать(РежимЗаписиДокумента.Запись);
			ЗаказДубль = ДубльОбъект.ссылка;
		конецесли;
	конецЕсли;
	
	//Адиянов<<<20160915
	//Нет скана - не проводим
	Если Не Отказ Тогда 
		Если СканДокумента.Получить() = Неопределено 
			и РежимЗаписи = РежимЗаписиДокумента.Проведение 
			и не РольДоступна("ДополнительныеПраваВЭД") 
			и не Контрагент = Справочники.Контрагенты.НайтиПоКоду("94072") //ИСТ
			Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Запись;
			Сообщить("Не вложен скан.Документ не проведен.",СтатусСообщения.Информация);
		КонецЕсли;	
	КонецЕсли;	
	//Адиянов>>>20160915
	
	если Этоновый() 
		и валютаДокумента <> константы.ВалютаРегламентированногоУчета.Получить() 
		и дата>Дата('20161001000000')
		и ПараметрыСеанса.ТекущийПользователь <> Справочники.Пользователи.НайтиПоКоду("Малышев Егор (снабжение)") 
		Тогда
		сравнитьЦенысФОП();
	конецЕсли;
	
	
	Если НЕ Подразделение.ВЭД 
		И НЕ Контрагент.Код = "П003409"  //для  Sulbus Oto тоже не проверять
		И НЕ ДоговорКонтрагента.ОтветственноеЛицо = Справочники.Пользователи.НайтиПоКоду("Захаров В.В. (снабжение)") //***Задача № 56260
		тогда
		Если режимЗаписи = РежимЗаписиДокумента.Проведение и не ЗначениеЗаполнено(ЗаданиеНаЗаказ) и дата>Дата('20170407000000') тогда
			отказ = истина;
			Предупреждение("Нельзя проводить документы без указания задания на заказ",60,"Ошибка!");
		КонецЕсли;
		
		Если Этоновый() и  ЗначениеЗаполнено(ЗаданиеНаЗаказ) и  НачалоДня(ТекущаяДата())>заданиеНаЗаказ.ДатаСогласования тогда
			отказ = истина;
			Предупреждение("Дата согласования задания на заказ уже прошла.",60,"Ошибка!");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаданиеНаЗаказ) тогда
			ПроверитьОстатки(отказ);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ
 
// Процедура вызывается при нажатии кнопки "Изменить" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// группового изменения значений реквизитов табличной части "Товары".
//
Процедура КоманднаяПанельТоварыДействиеИзменить(Кнопка)

	// Получим контекст обработки
	ИзменениеТабличнойЧастиТовары      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменые формы.
	ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект             = ЭтотОбъект;
	ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента            = ЭтаФорма;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьНДС                   = УчитыватьНДС; 
	ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице          = Ложь;
	ФормаИзменениеТабличнойЧастиТовары.мРассчитыватьАвтоматическиеСкидки   = Ложь;
	ФормаИзменениеТабличнойЧастиТовары.мМинимальныеЦены = мМинимальныеЦены;
	ФормаИзменениеТабличнойЧастиТовары.мСписокФильтров = мСписокФильтров;
	ФормаИзменениеТабличнойЧастиТовары.мСпособЗаполненияЦен       = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	//Перенесем табличную часть
	ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры // КоманднаяПанельТоварыДействиеИзменить()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	// Сохраняем текущие заначения реквизитов документа.
	ТекущиеЗначенияРеквизитов = Новый Структура();
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийТипЦен",				ТипЦен);
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийВалютаДокумента",	ВалютаДокумента); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийКурсДокумента",		КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийКратностьДокумента",	КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийУчитыватьНДС",		УчитыватьНДС); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийСуммаВключаетНДС",	СуммаВключаетНДС); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийИспользоватьПлановуюСебестоимость",	ЛОЖЬ);
	ТекущиеЗначенияРеквизитов.Вставить("Контрагент", Контрагент);

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            , "Товары");
	Если СтруктураЗначений <> Неопределено Тогда
		ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "Товары",
		                   мВалютаРегламентированногоУчета, , СтруктураЗначений, мСуммаДокументаБезСкидок);

		Если СтруктураЗначений.ТекущийТипЦен <> СтруктураЗначений.НовыйТипЦен Тогда
			ОбновитьФормуПодбора("ТипЦен");
		КонецЕсли;
	КонецЕсли;

	

	УстановитьВидимость();

	
	
КонецПроцедуры // КоманднаяПанельТоварыДействиеЦеныВалюта()


// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	НапечататьДокументПоУмолчанию(ЭтотОбъект, глТекущийПользователь, мПечатнаяФормаПоУмолчанию);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
//
Процедура ДействияФормыДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = Кнопка.Текст;
		СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		СписокМакетов = ПолучитьСписокПечатныхФорм();
		СтрокаМакетаВСписке = СписокМакетов.НайтиПоЗначению(Кнопка.Имя);
		Если СтрокаМакетаВСписке <> Неопределено Тогда
			Печать(СтрокаМакетаВСписке.Значение);
			СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
			СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;			
			
		Иначе
			СсылкаВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Кнопка.Имя, "_", "-")));
			Печать(СсылкаВнешнейФормы);
			СтруктураМакета.Макет = СсылкаВнешнейФормы;
			СтруктураМакета.ПредставлениеМакета = Кнопка.Текст;
		КонецЕсли;		
		
		мПечатнаяФормаПоУмолчанию = СтруктураМакета.Макет;
		СохранитьТекущуюКнопкуПечати(ЭтотОбъект.Метаданные().Имя, СтруктураМакета);
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при нажатии кнопки "Заполнить и провести" командной панели формы,
// вызывает заполнение документа с проведением.
//
Процедура ДействияФормыДействиеЗаполнитьИПровести(Кнопка)
	Если НЕ ЗначениеНеЗаполнено(ДоговорКонтрагента) И ДоговорКонтрагента.ОтветственноеЛицо<> глТекущийПользователь Тогда
		СообщитьОбОшибке("Вы не являетесь лицом ответственным за договор.");
		Возврат;
	КОнецЕсли;	
	Проверен=Ложь;
	ЗаписатьВФорме( );

КонецПроцедуры // ДействияФормыДействиеЗаполнитьИПровести()

// Процедура вызывается при нажатии кнопки "Анализ" командной панели формы,
// вызывает анализ текущего состояния заказа.
//
Процедура ДействияФормыДействиеАнализ(Кнопка)
	
		
	
КонецПроцедуры // ДействияФормыДействиеАнализ()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при нажатии кнопки "Создать реализацию" командной панели формы,
// вызывает создание документов реализации и счетов-фактур, согласно текущему размещению.
//
Процедура ДействияФормыДействиеСоздатьРеализацию(Кнопка)

	ФормаФормированияРеализаций = ПолучитьФорму("ФормаФормированияРеализаций", ЭтаФорма);
	ФормаФормированияРеализаций.ЗаказПокупателя = Ссылка;
	ФормаФормированияРеализаций.Открыть();

КонецПроцедуры // ДействияФормыДействиеСоздатьРеализацию()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	;


КонецПроцедуры // ДатаПриИзменении()

 
// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);

	ПриИзмененииДоговора();
	
	Если Контрагент = Справочники.Контрагенты.НайтиПоКоду("94072") тогда	   
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.кнЗаполнитьПоЦенамКонтрагента.Доступность = истина;
	иначе
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.кнЗаполнитьПоЦенамКонтрагента.Доступность = ложь;
    КонецЕсли;
КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;

	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	

	// Заказ можно оформлять по договору, взаиморасчеты по которому ведутся или по заказам или по 
	// договору в целом.
	СтруктураДополнительныхПараметров = Новый Структура();
	СтруктураОтбора = Новый Структура();
	СписокСпособовВеденияВзаиморасчетов = Новый СписокЗначений();
	СписокСпособовВеденияВзаиморасчетов.Добавить(Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом);
	СписокСпособовВеденияВзаиморасчетов.Добавить(Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
	
	СтруктураОтбора.Вставить("ЗначениеОтбора", СписокСпособовВеденияВзаиморасчетов);
	СтруктураОтбора.Вставить("ВидСравненияОтбора", ВидСравнения.ВСписке);
	СтруктураДополнительныхПараметров.Вставить("ВедениеВзаиморасчетов", СтруктураОтбора);
	
	//ВЭД------------
	
	СписокТиповДоговоров  = Новый СписокЗначений;
	//СписокТиповДоговоров.Добавить(Справочники.ТипыДоговоров.TyreTechnology);
	СписокТиповДоговоров.Добавить(Справочники.ТипыДоговоров.WheelsGroupLimited);
	
	СтруктураОтбораТиповДоговоров = Новый Структура();
	СтруктураОтбораТиповДоговоров.Вставить("ЗначениеОтбора", СписокТиповДоговоров);
	СтруктураОтбораТиповДоговоров.Вставить("ВидСравненияОтбора", ВидСравнения.ВСписке);
	Если РольДоступна("ДополнительныеПраваВЭД") Тогда
	    СтруктураДополнительныхПараметров.Вставить("ТипДоговора", СтруктураОтбораТиповДоговоров);
	КонецЕсли;

	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
	                                        СписокВидовДоговоров , СтандартнаяОбработка, СтруктураДополнительныхПараметров);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()


// Процедура - обработчик события "НачалоВыбора" поля ввода
// "Структурная единица". Процедура предлагает выбор пользователю из
// соттветствующих справочников и открывает форму списка для выбора 
// значения с отбором по текущему контрагенту. 
//
Процедура СтруктурнаяЕдиницаНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораЗначенияСтруктурнойЕдиницы(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры // СтруктурнаяЕдиницаНачалоВыбора()

// Процедура - обработчик события "Нажатие" кнопки "КнопкаПерерасчитатьДолг".
// Процедура вызывает сервисный механизм пересчета долга контрагента 
// по выбранному в форме договору взаиморасчетов и сделке.
//
Процедура КнопкаПерерасчитатьДолгНажатие(Элемент)

	СформироватьНадписьДолга(ДоговорКонтрагента, , ЭлементыФормы.ИнфНадписьДолга);

КонецПроцедуры // КнопкаПерерасчитатьДолгНажатие()

// Процедура - обработчик события "НачалоВыбора" элемента формы АдресДоставки
//
Процедура АдресДоставкиНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если Грузополучатель.Пустая() Тогда
		
		Если Контрагент.Пустая() Тогда
			ВвестиЗначение(Контрагент, "Выберите контрагента");
		КонецЕсли;
		
		Если НЕ Контрагент.Пустая() Тогда
			ФормаВыбора = РегистрыСведений.КонтактнаяИнформация.ПолучитьФормуСписка("ФормаСписка", ЭтаФорма);
			ФормаВыбора.РежимВыбора = Истина;
			
			ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Значение = Контрагент;
			ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Использование = Истина;
			
			СтруктураОтбораАдресов = Новый СписокЗначений;
			СтруктураОтбораАдресов.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
			ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.ВидСравнения = ВидСравнения.ВСписке;
			ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Значение = СтруктураОтбораАдресов;
			ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Использование = Истина;
			ФормаВыбора.ЭлементыФормы.РегистрСведенийСписок.Колонки.Тип.Видимость = Ложь;
			
			ВыбАдресДоставки = ФормаВыбора.ОткрытьМодально();
			
			Если Не ЗначениеНеЗаполнено(ВыбАдресДоставки) Тогда
				АдресДоставки = ВыбАдресДоставки;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если НЕ Грузополучатель.Пустая() Тогда
			
			ФормаВыбора = РегистрыСведений.КонтактнаяИнформация.ПолучитьФормуСписка("ФормаСписка", ЭтаФорма);
			ФормаВыбора.РежимВыбора = Истина;
			
			ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Значение = Грузополучатель;
			ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Использование = Истина;
			
			СтруктураОтбораАдресов = Новый СписокЗначений;
			СтруктураОтбораАдресов.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
			ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.ВидСравнения = ВидСравнения.ВСписке;
			ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Значение = СтруктураОтбораАдресов;
			ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Использование = Истина;
			ФормаВыбора.ЭлементыФормы.РегистрСведенийСписок.Колонки.Тип.Видимость = Ложь;
			
			ВыбАдресДоставки = ФормаВыбора.ОткрытьМодально();
			
			Если Не ЗначениеНеЗаполнено(ВыбАдресДоставки) Тогда
				АдресДоставки = ВыбАдресДоставки;
			КонецЕсли;
			
		КонецЕсли;
		

		
	КонецЕсли; 

КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Товары". Формирует данные в колонке "Всего".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.Товары.Колонки.Всего.Видимость Тогда
		ОформлениеСтроки.Ячейки.Всего.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Всего.Текст = ФорматСумм(ДанныеСтроки.Сумма
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС));

	КонецЕсли;

	ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);

	

	ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	ПоказатьСуммуБезСкидок(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Цена, ДанныеСтроки.Количество);

КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ПриНачалеРедактирования"  строки табличной 
// части "Товары" 
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	СуммаСтроки = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;
	Если (НоваяСтрока) И СуммаСтроки > 0 Тогда

		
	КонецЕсли;

	// Установим способ редактирования цены.
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Номенклатура);
	КонецЕсли;

КонецПроцедуры // ТоварыПриНачалеРедактирования()

// Процедура - обработчик события "ПриОкончанииРедактирования" табличной части "Товары".
//
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

КонецПроцедуры // ТоварыПриОкончанииРедактирования()

// Процедура - обработчик события "ПередУдалением" табличной части "Товары".
//
Процедура ТоварыПередУдалением(Элемент, Отказ)
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;
	//мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок - СуммаСтроки;
	мСуммаДокументаБезСкидок = Товары.Итог("Сумма"); //23.11.2018 - новая сумма
КонецПроцедуры

// Процедура - обработчик события "ПослеУдаления" табличной части "Товары".
//
Процедура ТоварыПослеУдаления(Элемент)

КонецПроцедуры // ТоварыПослеУдаления()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);
	
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	

	

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;

	//Расчет скидок

		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	// Сохраняем текущее значение коэффициента
	СтароеЗначениеКоэффициента = ЭлементыФормы.Товары.ТекущиеДанные.Коэффициент;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;

	// Выполнить общие действия для всех документов при изменении Единица.
	ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	// Пересчитываем плановую себестоимость.
	ПриИзмененииЕдиницыТабЧастиПлановаяСебестоимость(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект, СтароеЗначениеКоэффициента);

	//Расчет скидок
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		если  валютаДокумента <> константы.ВалютаРегламентированногоУчета.Получить()и дата>Дата('20161001000000')и ПараметрыСеанса.ТекущийПользователь <> Справочники.Пользователи.НайтиПоКоду("Малышев Егор")  Тогда
			сравнитьЦенысФОП();
		конецЕсли;
	

КонецПроцедуры // ТоварыЦенаПриИзменении()


// Процедура - обработчик события "ПриНачалеВыбораИзСписка" поля ввода цены
// в строке табличной части "Товары" и "Возвратная тара"
//
Процедура ТоварыЦенаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение("Не выбрана позиция номенклатуры!"); 
		Возврат;
	КонецЕсли; 

	Элемент.СписокВыбора = СформироватьСписокРозничныхЦен(СтрокаТабличнойЧасти.Номенклатура,
															СтрокаТабличнойЧасти.ЕдиницаИзмерения,
															СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
															СтрокаТабличнойЧасти.Размещение,
															мВалютаРегламентированногоУчета,
															, Дата, ВалютаДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
															УчитыватьНДС, СуммаВключаетНДС, 
															ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

КонецПроцедуры // ТоварыЦенаНачалоВыбораИзСписка()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	// Рассчитать реквизиты табличной части.
	РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	//РассчитатьКубатуруТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	
			// Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;

	// Рассчитать новое количество
	РассчитатьКоличествоТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	

КонецПроцедуры // ТоварыКоличествоМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля процента скидки-наценки
// в строке табличной части "Товары".
//
Процедура ТоварыПроцентСкидкиНаценкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыПроцентСкидкиНаценкиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении Суммы.

	ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, глТекущийПользователь);

	// Расчет скидок
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "ПриНачалеВыбора" поля ввода размещения
// в строке табличной части "Товары" и "Возвратная тара"
//
Процедура ТоварыРазмещениеНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораЗначенияРазмещения(ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры // ТоварыРазмещениеНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода размещения 
// в строке табличной части "Товары" 
//
Процедура ТоварыРазмещениеПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти );
	
	Если (((ТипЗнч(Элемент.Значение)=ТипЗнч(Справочники.Склады.ПустаяСсылка()))) и ((Элемент.Значение.ЗапретитьИспользование) и (Не ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"РазрешитьОтгрузкиСоВсехСкладов")))) Тогда 
		Предупреждение("Вам нельзя работать с данным складом");
		ЭлементыФормы.Товары.ТекущиеДанные.Размещение = Неопределено;
	КонецЕсли;


КонецПроцедуры // ТоварыРазмещениеПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ
// УПРАВЛЕНИЕ ОТНОШЕНИЯМИ С КЛИЕНТАМИ

// Процедура - обработчик события "НачалоВыбора" элемента формы ВремяНапоминания 
//
Процедура ВремяНапоминанияНачалоВыбора(Элемент, СтандартнаяОбработка)

	мЧас = Час(Элемент.Значение);
	мМинута = Минута(Элемент.Значение);
	
КонецПроцедуры // ВремяНапоминанияНачалоВыбора()

// Процедура - обработчик события "ОбработкаВыбора" элемента формы ВремяНапоминания 
//
Процедура ВремяНапоминанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Элемент.Значение = НачалоДня(ВыбранноеЗначение) + мЧас*60*60 + мМинута*60;
	мЧас = 0;
	мМинута = 0;
	
КонецПроцедуры // ВремяНапоминанияОбработкаВыбора()



// Процедура - обработчик события "НачалоВыбораИзСписка" элемента формы ВремяНапоминания 
//
Процедура ВремяНапоминанияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ВыбратьВремяИзСписка(Элемент, ЭтаФорма, Ответственный, СтандартнаяОбработка);
	
КонецПроцедуры // ВремяНапоминанияНачалоВыбораИзСписка()

// Процедура - обработчик события "НачалоВыбора" поля ввода "КурсВзаиморасчетов".
//
Процедура КурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Выбрать дату курса и заполнить курс взаиморасчетов.
	ВыбратьКурсВзаиморасчетов(ЭтотОбъект);

КонецПроцедуры // КурсВзаиморасчетовНачалоВыбора()
// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЯ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	Иначе
		ПроверкаПеретаскиванияВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Товары");
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Товары", ЭтотОбъект, ЭтаФорма);

	КонецЕсли;

КонецПроцедуры
Процедура ТоварыКоличествоОткрытие(Элемент, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	//Если (Проведен и Константы.ИспользованиеРезерва.Получить() и (Дата>=Константы.ДатаНачалаУчета.Получить())) Тогда 
	//	Ответ = Вопрос("Менять табличную часть можно только после отмены проведения. Отменить проведение документа ?",РежимДиалогаВопрос.ДаНет);
	//	Если Ответ = КодВозвратаДиалога.Да Тогда 
	//		Записать(РежимЗаписиДокумента.ОтменаПроведения);
	//	Иначе 
	//		Возврат;
	//	КонецЕсли;			
	//КонецЕсли;

КонецПроцедуры

Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	//СформироватьНадписьОДоступныхТипахЦенИПороговойЦеныТекущейНоменклатурнойПозиции(ЭлементыФормы.ИнфНадписьПоКонтрагентуИЦене.Заголовок);
	
КонецПроцедуры

Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	//ПравоНаИзменение = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"РазрешитьРедактироватьЗаказыПокупателя");
	//
	//Если (ПравоНаИзменение=Ложь) Тогда
	//	Отказ = Истина;
	//КонецЕсли;
	
	//Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ИспользоватьРазрешенныеТипыЦенКонтрагентов") Тогда
	//
	//	Если ЗначениеНеЗаполнено(ТипЦен) Тогда
	//	
	//		Предупреждение("Необходимо выбрать Контрагента, Договор и Тип цен продажи!"); 
	//		Отказ = Истина;
	//	
	//	КонецЕсли; 
	//
	//КонецЕсли; 
КонецПроцедуры

Процедура СкладПриИзменении(Элемент)
	
	//Если ((Элемент.Значение.ЗапретитьИспользование) и (Не ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"РазрешитьОтгрузкиСоВсехСкладов"))) Тогда 
	//	Предупреждение("Вам нельзя работать с данным складом");
	//	Склад = Справочники.Склады.ПустаяСсылка();
	//КонецЕсли;
	
КонецПроцедуры

Процедура ПодразделениеКомпанииПриИзменении(Элемент)
	
	Если НЕ ЗначениеНеЗаполнено(Подразделение) Тогда
		Грузополучатель = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;	
	
КонецПроцедуры


Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	//ПравоНаИзменение = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"РазрешитьРедактироватьЗаказыПокупателя");
	//
	//Если (ПравоНаИзменение=Ложь) Тогда
	//	Отказ = Истина;
	//КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыЗаполнитьПоТипуЦен(Кнопка)
	// Заполняем по типу цен.
	//Если (ТипЦен.ЦенаРассчитывается = Истина) Тогда 
	//	Дата = ?(Дата='0001-01-01',ТекущаяДата(),Дата);
	//	ЗаполнитьТЧПоТипуЦен(Товары,Дата,ТипЦен);
	//КонецЕсли;
КонецПроцедуры

Процедура ТранзитПриИзменении(Элемент)
	Если Не Транзит Тогда
		Подразделение = Справочники.Подразделения.ПустаяСсылка();
		Грузополучатель = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;	
	УстановитьВидимость();
КонецПроцедуры

Процедура ГрузополучательПриИзменении(Элемент)
	Если НЕ ЗначениеНеЗаполнено(Грузополучатель) Тогда
		Подразделение = Справочники.Подразделения.ПустаяСсылка();
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанельТоварыкнРассчитатьЦены(Кнопка)
	
	СтандартнаяОбработка = Ложь;

	Если ЗначениеНеЗаполнено(Контрагент) Тогда
		Предупреждение("Не выбран контрагент!",60);
		Возврат;
	КонецЕсли;
	
	ТабЗнач = яштПолучитьТаблицуРасчетаЦенНаДиски(Товары.ВыгрузитьКолонку("Номенклатура"), Дата);
	Если ТабЗнач = "" Тогда
		Сообщить("Не задана стратегия расчета цен по типоразмеру.", СтатусСообщения.Внимание);
	КонецЕсли;
	
	ЗапросПоДопам = Новый Запрос;
	ЗапросПоДопам.УстановитьПараметр("Производитель", Контрагент);
	ЗапросПоДопам.УстановитьПараметр("СписокНоменклатуры", Товары.ВыгрузитьКолонку("Номенклатура"));
	ЗапросПоДопам.Текст = "ВЫБРАТЬ
	                      |	СписокЦенНаДополнительныеОпцииДисков.Номенклатура КАК Номенклатура,
	                      |	ЕСТЬNULL(СписокЦенНаДополнительныеОпцииДисков.E_Coating, 0) + ЕСТЬNULL(СписокЦенНаДополнительныеОпцииДисков.Полоса, 0) + ЕСТЬNULL(СписокЦенНаДополнительныеОпцииДисков.Крышка, 0) + ЕСТЬNULL(СписокЦенНаДополнительныеОпцииДисков.Нагрузка, 0) + ЕСТЬNULL(СписокЦенНаДополнительныеОпцииДисков.ДвойнойЦвет, 0) + ЕСТЬNULL(СписокЦенНаДополнительныеОпцииДисков.ОбодИзНержавеющейСтали, 0) + ЕСТЬNULL(СписокЦенНаДополнительныеОпцииДисков.Полировка, 0) + ЕСТЬNULL(СписокЦенНаДополнительныеОпцииДисков.МатовыйЦвет, 0) + ЕСТЬNULL(СписокЦенНаДополнительныеОпцииДисков.ПластиковаяВставка, 0) + ЕСТЬNULL(СписокЦенНаДополнительныеОпцииДисков.Ширина, 0) + ЕСТЬNULL(СписокЦенНаДополнительныеОпцииДисков.ДекоративныеБолты, 0) + ЕСТЬNULL(СписокЦенНаДополнительныеОпцииДисков.ПолированныеБуквы, 0) + ЕСТЬNULL(СписокЦенНаДополнительныеОпцииДисков.ДвойнойОбод, 0) + ЕСТЬNULL(СписокЦенНаДополнительныеОпцииДисков.Миллинг, 0) КАК ИтоговаяСуммаДопов
	                      |ИЗ
	                      |	РегистрСведений.СписокЦенНаДополнительныеОпцииДисков КАК СписокЦенНаДополнительныеОпцииДисков
	                      |ГДЕ
	                      |	СписокЦенНаДополнительныеОпцииДисков.Производитель = &Производитель
	                      |	И СписокЦенНаДополнительныеОпцииДисков.Номенклатура В(&СписокНоменклатуры)";
	Результат = ЗапросПоДопам.Выполнить().Выгрузить();
	
	Для каждого СтрТовар ИЗ Товары Цикл
		СтрТЗ = ТабЗнач.Найти(СтрТовар.Номенклатура, "Номенклатура");
		Если НЕ СтрТЗ = Неопределено Тогда
			
			Если СтрТЗ.Цена = 0 Тогда
				Сообщить("Для номенклатуры " + СтрТовар.Номенклатура.Код + " в заданной стратегии расчета цен нет ни одного удовлетворяющего условия. Цена не рассчитана.", СтатусСообщения.Внимание);
			КонецЕсли;
			
			СтрТЗДопов = Результат.Найти(СтрТовар.Номенклатура, "Номенклатура");
			Если СтрТЗДопов = Неопределено Тогда
				СуммаДопов = 0;
				Сообщить("Для номенклатуры " + СтрТовар.Номенклатура.Код + " не задана информация по дополнительным опциям.", СтатусСообщения.Внимание);
			Иначе
				СуммаДопов = СтрТЗДопов.ИтоговаяСуммаДопов;
			КонецЕсли;
			СтрТовар.Цена = СтрТЗ.Цена + СуммаДопов;
			
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	СписокДобавленныхТиповЦен = Новый СписокЗначений;
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Если ЗначениеВыбора.Команда = "ИзменениеТиповЦенСкидок" Тогда
			ВыбранныйТипЦен=неопределено;
			Для Каждого ЭлементСпискаТиповЦен Из ЗначениеВыбора.СписокТиповЦенСкидок Цикл
				ВыбранныйТипЦен=ЭлементСпискаТиповЦен.Значение;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
 //Если не транзит и не РольДоступна("ПолныеПрава") тогда  //транзитные можно править
	//	Отказ=ЕстьЗаказыПоставщикуПоСезонномуЗаказу();
	//	Если  отказ тогда
	//		Предупреждение("По сезонномку заказу уже были заказы поставщику.
	//		|Изменения невозможны.",30);
	//	КонецЕсли;
//КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанельТоварыкнЗакрытьЗаказ(Кнопка)
	Ответ=Вопрос("Закрыть сезонный заказ?",РежимДиалогаВопрос.ДаНет,60,КодВозвратаДиалога.Нет);
	Если Ответ=КодВозвратаДиалога.Да тогда
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ЗаказыПоставщикамСезонныеОстатки.ЗаказПоставщикуСезонный,
		|	ЗаказыПоставщикамСезонныеОстатки.Номенклатура,
		|	ЗаказыПоставщикамСезонныеОстатки.КоличествоОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикамСезонные.Остатки(, ЗаказПоставщикуСезонный = &ЗаказСезонный) КАК ЗаказыПоставщикамСезонныеОстатки
		|ГДЕ
		|	ЗаказыПоставщикамСезонныеОстатки.КоличествоОстаток > 0";
		Запрос.УстановитьПараметр("ЗаказСезонный",Ссылка);
		Рез=Запрос.Выполнить().Выгрузить();
		
		ДокЗакрытие						 = Документы.ЗакрытиеЗаказовПоставщикамСезонных.СоздатьДокумент();
		ДокЗакрытие.Дата				 = ТекущаяДата();
		ДокЗакрытие.Комментарий			 = "Закрытие заказа " + Ссылка;
		ДокЗакрытие.Ответственный		 = глТекущийПользователь;
		СтрТЧ							 = ДокЗакрытие.Заказы.Добавить();
		СтрТЧ.ЗаказПоставщикуСезонный	 = Ссылка;
		ДокЗакрытие.ПолучитьФорму().Открыть();
		
		Ответ=Вопрос("Перенести остатки в новый сезонный заказ?",РежимДиалогаВопрос.ДаНет,60,КодВозвратаДиалога.Нет);
		Если Ответ=КодВозвратаДиалога.Да тогда
			ПеренестиОстаткиВНовыйЗаказ(Рез);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПеренестиОстаткиВНовыйЗаказ(ТаблицаОстатков)
	ДокСезонныйЗаказ=Документы.ЗаказПоставщикуСезонный.СоздатьДокумент();
	
	
	ЗаполнитьШапкуДокументаПоОснованию(ДокСезонныйЗаказ, Ссылка);
	УстановитьНомерДокумента(ДокСезонныйЗаказ);
	отбор=новый структура("Номенклатура");
	для каждого стр из ТаблицаОстатков цикл
		//цену берем из старого заказа средневзвешенную
		отбор.Номенклатура=стр.Номенклатура;
		строки=товары.НайтиСтроки(отбор);
		СуммаНом=0;
		КолНом=0;
		для каждого Эл из Строки Цикл
			СуммаНом=СуммаНом+эл.Сумма;
			КолНом=КолНом+эл.Количество;
		КонецЦикла;
		СредневзвешаннаяЦена=?(КолНом=0,0,СуммаНом/КолНом);
		нстр=ДокСезонныйЗаказ.Товары.Добавить();
		нстр.Номенклатура=стр.Номенклатура;
		нстр.Количество=КолНом;
		нстр.Цена=СредневзвешаннаяЦена;
		
		ПриИзмененииНоменклатурыТабЧасти(нстр, ДокСезонныйЗаказ);
		нстр.ЕдиницаИзмерения	 = нстр.Номенклатура.ЕдиницаХраненияОстатков;
		нстр.Коэффициент = нстр.ЕдиницаИзмерения.Коэффициент;
		ЗаполнитьСтавкуНДСТабЧасти(нстр, ДокСезонныйЗаказ);
		РассчитатьСуммуТабЧасти(нстр, ДокСезонныйЗаказ);
		РассчитатьСуммуНДСТабЧасти(нстр, ДокСезонныйЗаказ);
		РассчитатьКоличествоМестТабЧасти(нстр, ДокСезонныйЗаказ);

	КонецЦикла;
	ДокСезонныйЗаказ.ПолучитьФорму("ФормаДокумента").Открыть();

КонецПроцедуры

Процедура КоманднаяПанельТоварыЗаполнитьФОБ(Кнопка)
	
	Если ЭтоНовый() Тогда
		Ответ = Вопрос("Перед выполнением операции документ необходимо записать. Выполнить запись документа?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
        ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	Если Организация = справочники.Организации.НайтиПоКоду("00001") тогда
		ЭтоЭкспорт = Ложь;
	иначе 
		ЭтоЭкспорт = Истина;
	КонецЕсли;
   Если Организация <> Справочники.Организации.НайтиПоКоду("00001") Тогда
	Ответ = Вопрос("Расчитать цены с учетом крепежа?", РежимДиалогаВопрос.ДаНет);
   иначе
	Ответ = КодВозвратаДиалога.Да;
   Конецесли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателяТовары.Номенклатура.Код КАК Код,
	|	ЗаказПокупателяТовары.Номенклатура,
	|	ЗаказПокупателяТовары.Количество,
	|	ЕстьNull(ЦеныФОПСрезПоследних.Цена,0) КАК СебестоимостьСКрепежом,
	|	ЕстьNull(ЦеныФОПСрезПоследних.Цена,0) -ЕСТЬNULL(ЦенообразованиеФОБ.LugCount, 0) * ЕСТЬNULL(ЦенообразованиеФОБ.КрепежКоличество, 0) КАК СебестоимостьШтуки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	|		ЗаказПокупателяТовары.Количество КАК Количество,
	|		ЗаказПокупателяТовары.Цена КАК Цена,
	|		ЗаказПокупателяТовары.Сумма КАК Сумма,
	|		ЗаказПокупателяТовары.НомерСтроки КАК НомерСтроки
	|	ИЗ
	|		Документ.ЗаказПоставщикуСезонный.Товары КАК ЗаказПокупателяТовары
	|	ГДЕ
	|		ЗаказПокупателяТовары.Ссылка = &Ссылка) КАК ЗаказПокупателяТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныФОП"+?(ЭтоЭкспорт,"Экспорт","")+".СрезПоследних(&ДатаДокумента, ) КАК ЦеныФОПСрезПоследних
	|		ПО ЗаказПокупателяТовары.Номенклатура = ЦеныФОПСрезПоследних.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦенообразованиеФОБ КАК ЦенообразованиеФОБ
	|		ПО ЗаказПокупателяТовары.Номенклатура = ЦенообразованиеФОБ.Номенклатура
	//+++ BugFix: 29.01.2019 только существующие ненулевые цены!
	| ГДЕ ЕстьNull(ЦеныФОПСрезПоследних.Цена,0)>0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПокупателяТовары.НомерСтроки";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	таблРезультат = Запрос.Выполнить().Выгрузить();
	
	Для каждого стр из Товары Цикл
		стрЗапроса = таблРезультат.Найти(стр.Номенклатура, "Номенклатура"); 
		//+++ BugFix: 29.01.2019 - нет такой строки!  ЦеныФОПСрезПоследних.Цена = Null или 0
		Если стрЗапроса=неопределено Тогда
			Сообщить(строка(стр.НомерСтроки)+") НЕТ цены ФОБ на товар: "+стр.Номенклатура.Код+" - "+стр.Номенклатура.Наименование+" - Цена НЕ изменилась!", СтатусСообщения.Важное);
			Продолжить;	//ничего не меняем!
		Иначе ЦенаФОБ = ?(Ответ = КодВозвратаДиалога.Да, стрЗапроса.СебестоимостьСКрепежом, стрЗапроса.СебестоимостьШтуки);
		КонецЕсли;
		Если стр.Цена <> ЦенаФОБ тогда
			Сообщить(строка(стр.НомерСтроки)+") Для товара с кодом: "+стр.Номенклатура.Код+" Цена: "+строка(стр.Цена)+?(стр.Цена>ЦенаФОБ," уменьшена"," УВЕЛИЧЕНА")+" до цены ФОБ: "+строка(ЦенаФОБ), СтатусСообщения.Информация);
			стр.Цена = ЦенаФОБ;
			РассчитатьСуммуТабЧасти(стр, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(стр, ЭтотОбъект);
		КонецЕсли;	
	КонецЦикла;

КонецПроцедуры


//Адиянов<<<
Процедура СканДокументаНажатие(Элемент)
	
	Если СканДокумента.Получить() <> Неопределено Тогда
		Если СокрЛП(глТекущийПользователь.Код) <> "Малышев Егор (снабжение)" и СокрЛП(глТекущийПользователь.Код) <> "Жарикова В." Тогда
			Сообщить("Вложение существует, редактировать вложение может только Малышев Егор");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите файл с сканом документа";
	Диалог.ПолноеИмяФайла = "";
	Диалог.ПредварительныйПросмотр = Истина;
	Диалог.Фильтр = 
	"Все картинки (*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf)|*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf|" 
	+ "Формат bmp (*.bmp;*.dib;*.rle)|*.bmp;*.dib;*.rle|"
	+ "Формат JPEG (*.jpg;*.jpeg)|*.jpg;*.jpeg|"
	+ "Формат TIFF (*.tif)|*.tif|"
	+ "Формат PNG (*.png)|*.png|"
	+ "Формат PDF (*.pdf)|*.pdf|"
	+ "Формат метафайл (*.wmf;*.emf)|*.wmf;*.emf|";// картинки 
	
	Если Диалог.Выбрать() Тогда
		СканДокумента = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Диалог.ПолноеИмяФайла));
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура ПоказатьСканДокумента(Элемент)
	
	КартинкаСкан = СканДокумента.Получить();
	
	Картинка = Новый Картинка(КартинкаСкан);
	Если КартинкаСкан = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяВременногоФайла = КаталогВременныхФайлов() + ЭтотОбъект.Номер + "."+ Картинка.формат();
	КартинкаСкан.Записать(ИмяВременногоФайла);
	ЗапуститьПриложение(ИмяВременногоФайла);
	
КонецПроцедуры

Процедура ДействияФормыПланФакт(Кнопка)
	  ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоКоду(530); 
	  ИмяФайла = ПолучитьИмяВременногоФайла(); 
	  ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
	  ДвоичныеДанные.Записать(ИмяФайла); 
	  
	  Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
	  Отчет.Период = ТекущаяДата();
	  Отчет.СезонныйЗаказ = ссылка;
	  ТабДок = Новый ТабличныйДокумент;
	  Отчет.СкомпоноватьРезультат(ТабДок);
	  ТабДок.ТолькоПросмотр = Истина;
	  ТабДок.ОтображатьСетку = Ложь;
	  ТабДок.ОтображатьЗаголовки = Ложь;
      ТабДок.Показать();
КонецПроцедуры

//07.04.17 Смирнов
Процедура ПроверитьОстатки(отказ)
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
   |	ЗаданиеНаЗаказПоставщикуТовары.Номенклатура,
   |	СУММА(ЗаданиеНаЗаказПоставщикуТовары.Количество) КАК Количество
   |ПОМЕСТИТЬ втТоварыЗадания
   |ИЗ
   |	Документ.ЗаданиеНаЗаказПоставщику.Товары КАК ЗаданиеНаЗаказПоставщикуТовары
   |ГДЕ
   |	ЗаданиеНаЗаказПоставщикуТовары.Ссылка = &ЗаданиеНаЗаказ
   |
   |СГРУППИРОВАТЬ ПО
   |	ЗаданиеНаЗаказПоставщикуТовары.Номенклатура
   |;
   |
   |////////////////////////////////////////////////////////////////////////////////
   |ВЫБРАТЬ
   |	втТоварыЗадания.Номенклатура,
   |	СУММА(втТоварыЗадания.Количество) КАК КоличествоЗадания,
   |	СУММА(ТоварыЗаказовПоставщикуСезонных.Количество) КАК КоличествоЗаказано,
   |	СУММА(втТоварыЗадания.Количество - ЕСТЬNULL(ТоварыЗаказовПоставщикуСезонных.Количество, 0)) КАК Остаток
   |ИЗ
   |	втТоварыЗадания КАК втТоварыЗадания
   |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
   |			ЗаказПоставщикуСезонныйТовары.Номенклатура КАК Номенклатура,
   |			СУММА(ЗаказПоставщикуСезонныйТовары.Количество) КАК Количество
   |		ИЗ
   |			Документ.ЗаказПоставщикуСезонный.Товары КАК ЗаказПоставщикуСезонныйТовары
   |		ГДЕ
   |			ЗаказПоставщикуСезонныйТовары.Ссылка.ЗаданиеНаЗаказ = &ЗаданиеНаЗаказ
   |			И ЗаказПоставщикуСезонныйТовары.Ссылка.Проведен
   |			И ЗаказПоставщикуСезонныйТовары.Ссылка <> &ЗаказПоставщикуСезонный
   |		
   |		СГРУППИРОВАТЬ ПО
   |			ЗаказПоставщикуСезонныйТовары.Номенклатура) КАК ТоварыЗаказовПоставщикуСезонных
   |		ПО втТоварыЗадания.Номенклатура = ТоварыЗаказовПоставщикуСезонных.Номенклатура
   |
   |СГРУППИРОВАТЬ ПО
   |	втТоварыЗадания.Номенклатура";
   Запрос.УстановитьПараметр("ЗаданиеНаЗаказ",ЗаданиеНаЗаказ);
   Запрос.УстановитьПараметр("ЗаказПоставщикуСезонный",ссылка);
   РезОстатки = запрос.Выполнить().Выгрузить();
   
   ТабЗаказа = Товары.Выгрузить();
   ТабЗаказа.Свернуть("Номенклатура","Количество");
   
   Для каждого стр из ТабЗаказа цикл
	   НайденнаяСтрока = РезОстатки.Найти(стр.Номенклатура,"Номенклатура");
	   Если НайденнаяСтрока = Неопределено тогда
		   Сообщить("Товара ( "+стр.Номенклатура.Код+" ) "+стр.Номенклатура+" нет в задании на заказ.");
		   отказ = истина;
	   иначе
		   Если
			   найденнаяСтрока.Остаток<стр.Количество тогда
			   Сообщить("Товара ( "+стр.Номенклатура.Код+" ) "+стр.Номенклатура+" не хватает. В остатках: "+найденнаяСтрока.Остаток+" шт., в заказе: "+стр.Количество+" шт.");
			   отказ = истина;
		   КонецЕсли;
	   КонецЕсли;
	   
   КонецЦикла;
КонецПроцедуры

Процедура КоманднаяПанельТоварыкнЗаполнитьПоЦенамКонтрагента(Кнопка)
	СписокНом = Новый СписокЗначений;
	СписокНом.ЗагрузитьЗначения( Товары.ВыгрузитьКолонку("Номенклатура") );
	
	табЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(Контрагент, СписокНом,,,Контрагент.ДатаСрезаЦен);
	
	Для каждого стр из товары Цикл
		найденнаяСтрока = табЗнач1.найти(стр.Номенклатура,"Номенклатура");
		
		Если НайденнаяСтрока <> неопределено тогда
			стр.Цена = НайденнаяСтрока.ЦенаСоСкидкойПредоплаты;
		Иначе
			стр.Цена = 0;
		КонецЕсли;
		ЗаполнитьСтавкуНДСТабЧасти(стр, ЭтотОбъект); 
		РассчитатьСуммуТабЧасти(стр, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(стр, ЭтотОбъект);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроцентПредоплатыПриИзменении(Элемент)
	если ПроцентПредоплаты>100 тогда
	ПроцентПредоплаты = 100;	
	конецЕсли;	
КонецПроцедуры

Процедура ДействияФормыСравнитьСЦенамиFOB(Кнопка)
	ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоКоду(746); 
	ИмяФайла = ПолучитьИмяВременногоФайла(); 
	ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
	ДвоичныеДанные.Записать(ИмяФайла); 

	Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
	Отчет.Период = ТекущаяДата();
	Отчет.Заказ = ссылка;
	ТабДок = Новый ТабличныйДокумент;
	Отчет.СкомпоноватьРезультат(ТабДок);
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.Показать();
КонецПроцедуры

//Адиянов>>>

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

мОбновлятьВладельца = Ложь;

мЧас    = 0;
мМинута = 0;

мОбработкаТайпинга                 = Ложь;
мТекстТайпинга                     = "";
мПоследнееЗначениеЭлементаТайпинга = Неопределено;

мКолонкиТовары         = ЭлементыФормы.Товары.Колонки;
мСуммаДокументаБезСкидок = Товары.Итог("Сумма");// +++ 23.11.2018