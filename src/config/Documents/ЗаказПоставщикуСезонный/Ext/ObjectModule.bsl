Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой заказа или счета,
// разработанного методистами
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция ПечатьСчетаЗаказа(Тип)Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Организация КАК Организация,
	|	Контрагент КАК Получатель,
	|	Организация КАК Руководители,
	|	Организация КАК Поставщик,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ЗаказПокупателяСезонный КАК ЗаказПокупателя
	|
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ТекущийДокумент";

	Если  не ЗначениеНеЗаполнено(ОрганизацияДляПечати) Тогда // меняем все кроме реквизита Организация
		 Запрос.Текст=СтрЗаменить(Запрос.Текст,"Организация КАК","ОрганизацияДляПечати КАК");
	КонецЕсли;	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_СчетЗаказ";

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	ВложенныйЗапрос.Номенклатура.Код                КАК Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул            КАК Артикул,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ПроцентСкидкиНаценки 
	|	+ ВложенныйЗапрос.ПроцентАвтоматическихСкидок   КАК Скидка,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.Характеристика,
	|	NULL Как Серия,
	|	НомерСтроки,
	|	Метка
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		ЗаказПокупателя.Номенклатура,
	|		ЗаказПокупателя.ЕдиницаИзмерения,
	|		ЗаказПокупателя.ПроцентСкидкиНаценки        КАК ПроцентСкидкиНаценки,
	|		ЗаказПокупателя.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|		ЗаказПокупателя.Цена                        КАК Цена,
	|		СУММА(ЗаказПокупателя.Количество)           КАК Количество,
	|		СУММА(ЗаказПокупателя.Сумма     )           КАК Сумма,
	|		СУММА(ЗаказПокупателя.СуммаНДС  )           КАК СуммаНДС,
	|		ЗаказПокупателя.ХарактеристикаНоменклатуры  КАК Характеристика,
	|		МИНИМУМ(НомерСтроки)                        КАК НомерСтроки,
	|		0                                           КАК Метка
	|	ИЗ
	|		Документ.ЗаказПокупателяСезонный.Товары КАК ЗаказПокупателя
	|
	|	ГДЕ
	|		ЗаказПокупателя.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПокупателя.Номенклатура,
	|		ЗаказПокупателя.ЕдиницаИзмерения,
	|		ЗаказПокупателя.ПроцентСкидкиНаценки,
	|		ЗаказПокупателя.ПроцентАвтоматическихСкидок,
	|		ЗаказПокупателя.Цена,
	|		ЗаказПокупателя.ХарактеристикаНоменклатуры
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПокупателя.Содержание,
	|	ВЫБОР КОГДА ЗаказПокупателя.Содержание IS NULL ИЛИ ЗаказПокупателя.Содержание = """" ТОГДА
	|		ВЫРАЗИТЬ(ЗаказПокупателя.Номенклатура.НаименованиеПолное КАК Строка(1000))
	|	ИНАЧЕ
	|		ЗаказПокупателя.Содержание
	|	КОНЕЦ КАК Товар,
	|	ЗаказПокупателя.Номенклатура.Код     КАК Код,
	|	ЗаказПокупателя.Номенклатура.Артикул КАК Артикул,
	|	ЗаказПокупателя.Количество,
	|	ЗаказПокупателя.Номенклатура.ЕдиницаХраненияОстатков,
	|	ЗаказПокупателя.ПроцентСкидкиНаценки,
	|	ЗаказПокупателя.Цена,
	|	ЗаказПокупателя.Сумма,
	|	ЗаказПокупателя.СуммаНДС,
	|	NULL,
	|	NULL,
	|	НомерСтроки,
	|	1 КАК Метка
	|	
	|ИЗ
	|	Документ.ЗаказПокупателяСезонный.Услуги КАК ЗаказПокупателя
	|
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|";

	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	Макет = ПолучитьМакет("СчетЗаказ");

	// Выводим шапку накладной

	СведенияОПоставщике = СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата);
	Если Тип = "Счет" Тогда
		ОбластьМакета       = Макет.ПолучитьОбласть("ЗаголовокСчета");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ИНН = СведенияОПоставщике.ИНН;
		ОбластьМакета.Параметры.КПП = СведенияОПоставщике.КПП;
		Если ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			Банк       = СтруктурнаяЕдиница.Банк;
			БИК        = Банк.Код;
			КоррСчет   = Банк.КоррСчет;
			ГородБанка = Банк.Город;
			НомерСчета = СтруктурнаяЕдиница.НомерСчета;

			ОбластьМакета.Параметры.БИКБанкаПолучателя               = БИК;
			ОбластьМакета.Параметры.БанкПолучателя                   = Банк;
			ОбластьМакета.Параметры.БанкПолучателяПредставление      = СокрЛП(Банк) + " " + ГородБанка;
			ОбластьМакета.Параметры.СчетБанкаПолучателя              = КоррСчет;
			ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = КоррСчет;
			ОбластьМакета.Параметры.СчетПолучателяПредставление      = НомерСчета;
			ОбластьМакета.Параметры.СчетПолучателя                   = НомерСчета;
			ОбластьМакета.Параметры.ПредставлениеПоставщика          = СтруктурнаяЕдиница.ТекстКорреспондента;
		КонецЕсли;
		Если ЗначениеНеЗаполнено(ОбластьМакета.Параметры.ПредставлениеПоставщика) Тогда
			ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	Если Тип = "Счет" Тогда
		ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Счет на оплату");
	Иначе
		ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Заказ покупателя");
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	ТабДокумент.Вывести(ОбластьМакета);

	
	СведенияОПолучателе = СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	Если не ЗначениеНеЗаполнено(ОрганизацияДляПечати) И ОрганизацияДляПечати<>Организация Тогда
		ОбластьМакета.Параметры.ПредставлениеПолучателя = Строка(КонтактноеЛицо);
	Иначе
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	КОнецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	ЕстьСкидки = Ложь;
	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 
		Если Не ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
			ЕстьСкидки = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьСуммы);

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	Если НЕ ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("СуммаБезСкидки").ШиринаКолонки +
											Макет.Область("СуммаСкидки").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар       = СокрП(ВыборкаСтрокТовары.Товар) + ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьДанных);

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
			Скидка = 0;
		Иначе
			Скидка = ВыборкаСтрокТовары.Сумма  / (100 - ВыборкаСтрокТовары.Скидка) * ВыборкаСтрокТовары.Скидка;
		КонецЕсли;
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = ФорматСумм(ЗапросТовары.Итог("СуммаНДС"));
		ТабДокумент.Присоединить(ОбластьСуммы);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ЗапросТовары.Количество()
	+ ", на сумму " + ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	Если Тип = "Счет" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");

		Руководители = ОтветственныеЛицаОрганизации(Шапка.Руководители, Шапка.Дата,);
		Руководитель = Руководители.Руководитель;
		Бухгалтер    = Руководители.ГлавныйБухгалтер;

		ОбластьМакета.Параметры.ФИОРуководителя  = "/" + Руководитель  + "/";
		ОбластьМакета.Параметры.ФИОБухгалтера    = "/" + Бухгалтер     + "/";
		ОбластьМакета.Параметры.ФИООтветственный = "/" + Ответственный + "/";

	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	КонецЕсли; 
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаЗаказа()

// Функция формирует табличный документ с печатной формой заказа или счета,
// разработанного методистами (с учетом внесенных корректировок)
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция ПечатьСчетаЗаказаКорректировки(Тип)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Организация,
	|	Контрагент КАК Получатель,
	|	Организация КАК Руководители,
	|	Организация КАК Поставщик,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ЗаказПокупателяСезонный КАК ЗаказПокупателя
	|
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателяСезонный_СчетЗаказ";

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.Артикул            КАК Артикул,
	|	СУММА(ВложенныйЗапрос.Количество)               КАК Количество,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ПроцентСкидкиНаценки 
	|	+ ВложенныйЗапрос.ПроцентАвтоматическихСкидок   КАК Скидка,
	|	СУММА(ВложенныйЗапрос.СуммаНДС)                 КАК СуммаНДС,
	|	ВложенныйЗапрос.Цена                            КАК Цена,
	|	СУММА(ВложенныйЗапрос.Сумма)                    КАК Сумма,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры      КАК Характеристика,
	|	NULL                                            КАК Серия,
	|	ВЫБОР
	|		КОГДА НЕ ВложенныйЗапрос.Номенклатура.Услуга ТОГДА 0
	|		КОГДА ВложенныйЗапрос.Номенклатура.Услуга    ТОГДА 1
	|	КОНЕЦ КАК УСЛУГА
	|ИЗ
	|
	|(
	|ВЫБРАТЬ
	|		ЗаказПокупателя.Номенклатура                КАК Номенклатура,
	|		ЗаказПокупателя.ЕдиницаИзмерения            КАК ЕдиницаИзмерения,
	|		ЗаказПокупателя.Цена                        КАК Цена,
	|		ЗаказПокупателя.ПроцентСкидкиНаценки        КАК ПроцентСкидкиНаценки,
	|		ЗаказПокупателя.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|		ЗаказПокупателя.ХарактеристикаНоменклатуры  КАК ХарактеристикаНоменклатуры,
	|		ЗаказПокупателя.СуммаНДС                    КАК СуммаНДС,
	|		ЗаказПокупателя.Сумма                       КАК Сумма,
	|		ЗаказПокупателя.Количество                  КАК Количество
	|	ИЗ
	|		Документ.ЗаказПокупателяСезонный.Товары КАК ЗаказПокупателя
	|
	|	ГДЕ
	|		ЗаказПокупателя.Ссылка = &ТекущийДокумент
	|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|		КорректировкаЗаказаПокупателя.Номенклатура                КАК Номенклатура,
	//|		КорректировкаЗаказаПокупателя.ЕдиницаИзмерения            КАК ЕдиницаИзмерения,
	//|		КорректировкаЗаказаПокупателя.Цена                        КАК Цена,
	//|		КорректировкаЗаказаПокупателя.ПроцентСкидкиНаценки        КАК ПроцентСкидкиНаценки,
	//|		КорректировкаЗаказаПокупателя.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	//|		КорректировкаЗаказаПокупателя.ХарактеристикаНоменклатуры  КАК ХарактеристикаНоменклатуры,
	//|		КорректировкаЗаказаПокупателя.СуммаНДС                    КАК СуммаНДС,
	//|		КорректировкаЗаказаПокупателя.Сумма                       КАК Сумма,
	//|		КорректировкаЗаказаПокупателя.Количество                  КАК Количество
	//|	ИЗ
	//|		Документ.КорректировкаЗаказаПокупателя.Товары КАК КорректировкаЗаказаПокупателя
	//|
	//|	ГДЕ
	//|		КорректировкаЗаказаПокупателя.Ссылка.ЗаказПокупателя = &ТекущийДокумент
	//|		И КорректировкаЗаказаПокупателя.Ссылка.Проведен      = Истина
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		ЗаказПокупателя.Номенклатура                         КАК Номенклатура,
	|		ЗаказПокупателя.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|		ЗаказПокупателя.Цена                                 КАК Цена,
	|		ЗаказПокупателя.ПроцентСкидкиНаценки        		 КАК ПроцентСкидкиНаценки,
	|		0                                                    КАК ПроцентАвтоматическихСкидок,
	|		NULL                                                 КАК ХарактеристикаНоменклатуры,
	|		ЗаказПокупателя.СуммаНДС                             КАК СуммаНДС,
	|		ЗаказПокупателя.Сумма                                КАК Сумма,
	|		ЗаказПокупателя.Количество                           КАК Количество
	|	ИЗ
	|		Документ.ЗаказПокупателяСезонный.Услуги КАК ЗаказПокупателя
	|
	|	ГДЕ
	|		ЗаказПокупателя.Ссылка = &ТекущийДокумент
	|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|		КорректировкаЗаказаПокупателя.Номенклатура                         КАК Номенклатура,
	//|		КорректировкаЗаказаПокупателя.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	//|		КорректировкаЗаказаПокупателя.Цена                                 КАК Цена,
	//|		КорректировкаЗаказаПокупателя.ПроцентСкидкиНаценки                 КАК ПроцентСкидкиНаценки,
	//|		0                                                                  КАК ПроцентАвтоматическихСкидок,
	//|		NULL                                                               КАК ХарактеристикаНоменклатуры,
	//|		КорректировкаЗаказаПокупателя.СуммаНДС                             КАК СуммаНДС,
	//|		КорректировкаЗаказаПокупателя.Сумма                                КАК Сумма,
	//|		КорректировкаЗаказаПокупателя.Количество                           КАК Количество
	//|	ИЗ
	//|		Документ.КорректировкаЗаказаПокупателя.Услуги КАК КорректировкаЗаказаПокупателя
	//|
	//|	ГДЕ
	//|		КорректировкаЗаказаПокупателя.Ссылка.ЗаказПокупателя = &ТекущийДокумент
	//|		И КорректировкаЗаказаПокупателя.Ссылка.Проведен      = Истина
	|
	|) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ПроцентСкидкиНаценки,
	|	ВложенныйЗапрос.ПроцентАвтоматическихСкидок,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
	|	ВложенныйЗапрос.Цена
	|
	|УПОРЯДОЧИТЬ ПО
	|	Услуга,
	|	Номенклатура
	|";
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	Макет = ПолучитьМакет("СчетЗаказ");

	// Выводим шапку накладной

	СведенияОПоставщике = СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата);
	Если Тип = "Счет" Тогда
		ОбластьМакета       = Макет.ПолучитьОбласть("ЗаголовокСчета");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ИНН = СведенияОПоставщике.ИНН;
		ОбластьМакета.Параметры.КПП = СведенияОПоставщике.КПП;
		Если ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			Банк       = СтруктурнаяЕдиница.Банк;
			БИК        = Банк.Код;
			КоррСчет   = Банк.КоррСчет;
			НомерСчета = СтруктурнаяЕдиница.НомерСчета;

			ОбластьМакета.Параметры.БИКБанкаПолучателя               = БИК;
			ОбластьМакета.Параметры.БанкПолучателя                   = Банк;
			ОбластьМакета.Параметры.БанкПолучателяПредставление      = Банк;
			ОбластьМакета.Параметры.СчетБанкаПолучателя              = КоррСчет;
			ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = КоррСчет;
			ОбластьМакета.Параметры.СчетПолучателяПредставление      = НомерСчета;
			ОбластьМакета.Параметры.СчетПолучателя                   = НомерСчета;
			ОбластьМакета.Параметры.ПредставлениеПоставщика          = СтруктурнаяЕдиница.ТекстКорреспондента;
		КонецЕсли;
		Если ЗначениеНеЗаполнено(ОбластьМакета.Параметры.ПредставлениеПоставщика) Тогда
			ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	Если Тип = "Счет" Тогда
		ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Счет на оплату");
	Иначе
		ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Заказ покупателя");
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	ТабДокумент.Вывести(ОбластьМакета);

	СведенияОПолучателе = СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	ТабДокумент.Вывести(ОбластьМакета);

	ЕстьСкидки = Ложь;
	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 
		Если Не ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
			ЕстьСкидки = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьСуммы);

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	Если НЕ ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("СуммаБезСкидки").ШиринаКолонки +
											Макет.Область("СуммаСкидки").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 

		Если ВыборкаСтрокТовары.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				//ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Номенклатура.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар = ВыборкаСтрокТовары.Номенклатура.НаименованиеПолное + ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьДанных);

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
			Скидка = 0;
		Иначе
			Скидка = ВыборкаСтрокТовары.Сумма / (100 - ВыборкаСтрокТовары.Скидка) * ВыборкаСтрокТовары.Скидка;
		КонецЕсли;
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = ФорматСумм(ЗапросТовары.Итог("СуммаНДС"));
		ТабДокумент.Присоединить(ОбластьСуммы);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ЗапросТовары.Количество()
	+ ", на сумму " + ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	Если Тип = "Счет" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");

		Руководители = ОтветственныеЛицаОрганизации(Шапка.Руководители, Шапка.Дата,);
		Руководитель = Руководители.Руководитель;
		Бухгалтер    = Руководители.ГлавныйБухгалтер;

		ОбластьМакета.Параметры.ФИОРуководителя  = "/" + Руководитель  + "/";
		ОбластьМакета.Параметры.ФИОБухгалтера    = "/" + Бухгалтер     + "/";
		ОбластьМакета.Параметры.ФИООтветственный = "/" + Ответственный + "/";

	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	КонецЕсли; 
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаЗаказаКорректировки()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Заказ" Тогда
		ТабДокумент = ПечатьСчетаЗаказа(ИмяМакета);
	ИначеЕсли ИмяМакета = "ЗаказКорректировка" тогда
		ТабДокумент = ПечатьСчетаЗаказаКорректировки(ИмяМакета);
	ИначеЕсли ИмяМакета = "Счет" тогда
		ТабДокумент = ПечатьСчетаЗаказаКорректировки(ИмяМакета);
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();	
	
	КонецЕсли;

	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;

	СписокМакетов.Добавить("Заказ", "Заказ покупателя");
	СписокМакетов.Добавить("ЗаказКорректировка", "Заказ покупателя (с учетом корректировок)");
	СписокМакетов.Добавить("Счет", "Счет на оплату (с учетом корректировок)");

	ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Заполняет табличную часть при оперативном проведении, когда включены флаги авторазмещения и/или авторезервирования
//
// Параметры:
//  Отказ - отказ от дальнейшего проведения.
//


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// По виду операции определяет статус партии товаров (не возвратная тара!)
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Значение перечисления "Статусы партии товаров".
//
Функция ОпределитьСтатусПартии() 

	Возврат Перечисления.СтатусыПартийТоваров.Купленный;

КонецФункции // ОпределитьСтатусПартииПрихода()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Вызываем отдельные процедуры подготовки для упр. учета
		
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()





// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	
	СтруктураОбязательныхПолей = 
	Новый Структура("Организация, ВалютаДокумента, 
					|Контрагент, ДоговорКонтрагента, КратностьВзаиморасчетов,ДатаДействияПо");

					


	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	
КонецПроцедуры // ПроверитьЗаполнениеШапки()


Процедура ПроверитьПовторяющиесяТовары(Отказ)
	
КонецПроцедуры	

// 

  

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары( СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество, Сумма, Цена, ЕдиницаИзмерения");


	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);
   		
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()
 
Функция ЕстьЗаказыПоставщикуПоСезонномуЗаказу() Экспорт
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказыПоставщикамСезонные.Регистратор
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикамСезонные КАК ЗаказыПоставщикамСезонные
	|ГДЕ
	|	ЗаказыПоставщикамСезонные.ЗаказПоставщикуСезонный = &ЗаказПоставщикуСезонный
	|	И ЗаказыПоставщикамСезонные.Регистратор ССЫЛКА Документ.ЗаказПоставщику";
	Запрос.УстановитьПараметр("ЗаказПоставщикуСезонный",Ссылка);
	Рез=Запрос.Выполнить().Выбрать();
	Если Рез.Количество()>0 тогда
		Возврат истина;
	иначе
		Возврат ложь;
	КонецЕсли;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ


// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	//Если этоНовый() и ВалютаДокумента <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
	//	НужныйКурс = РегистрыСведений.КурсыВалютДляПоступления.СрезПоследних(Дата,Новый Структура("Валюта",ВалютаДокумента));
	//	Если нужныйКурс.Количество()>0 Тогда
	//		КратностьВзаиморасчетов = НужныйКурс[0].Кратность;
	//		КурсВзаиморасчетов = НужныйКурс[0].Курс;
	//	конецЕсли;	
	//конецЕсли;
	// Проверка заполнения единицы измерения мест и количества мест
	ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары");
	
	//Если это ВЭД, то только два типа договора, Плотников 26.01.17
	Если РольДоступна("ДополнительныеПраваВЭД") 
		//и ДоговорКонтрагента.ТипДоговора <> Справочники.ТипыДоговоров.TyreTechnology 
		и ДоговорКонтрагента.ТипДоговора <> Справочники.ТипыДоговоров.WheelsGroupLimited Тогда 
		сообщить("Тип договора должен быть Tyre Technology или Wheels Group Limited!!!");
	    Отказ = истина;	
	КонецЕсли;
	
	//И ставим нужное подразделение
	Если РольДоступна("ДополнительныеПраваВЭД") и не Отказ Тогда
		//СоответствиеПодразделений = Новый Соответствие;
		//СоответствиеПодразделений.Вставить(Справочники.ТипыДоговоров.TyreTechnology,Справочники.Подразделения.НайтиПоКоду("00162"));
		//СоответствиеПодразделений.Вставить(Справочники.ТипыДоговоров.WheelsGroupLimited,Справочники.Подразделения.НайтиПоКоду("00166"));

		Подразделение = Справочники.Подразделения.НайтиПоКоду("00166");	
	КонецЕсли;
	
	//+++( 16.05.2014 при записи из МиМ - идет в режиме загрузки!
	Если не Отказ 
		и не ЭтотОбъект.ОбменДанными.Загрузка 
		и ЭтотОбъект.Контрагент.ПриниматьЗаказыЧерезСайт тогда
		
		Попытка
			ОбменСУТИнтернетМагазин.ВключитьРегистрациюОбъектаОИМ(ЭтотОбъект);
		Исключение
			#Если Клиент тогда
			СообщитьОбОшибке(строка(ссылка)+" не может быть добавлен в план обмена! "+ОписаниеОшибки() );
			#КонецЕсли	
		КонецПопытки;

	КонецЕсли; 
    //+++)
	
	#Если Клиент Тогда 
    			//сравним цены с ФОП
		если Этоновый()и валютаДокумента <> константы.ВалютаРегламентированногоУчета.Получить()и дата>Дата('20161001000000')и ПараметрыСеанса.ТекущийПользователь <> Справочники.Пользователи.НайтиПоКоду("Малышев Егор (снабжение)") Тогда
			сравнитьЦенысФОП();
		конецЕсли;
	#КонецЕсли
	
	Если НЕ Отказ И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ВыполнитьПроверкуЗаполненияРеквизитов(Отказ);
	КонецЕсли;
	
	#Если Клиент Тогда
		если Этоновый() и НЕ ЗначениеЗаполнено(ВремяСоздания) Тогда
			ВремяСоздания = Дата;	
		конецЕсли;
		
		Если ЗначениеЗаполнено(ВремяСоздания) и ВремяСоздания>Дата тогда
			сообщить("Время создания документа: "+ВремяСоздания+" больше даты документа: "+Дата,СтатусСообщения.Важное);

			отказ = истина;
		КонецЕсли;
	#КонецЕсли

КонецПроцедуры // ПередЗаписью


Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	#Если Клиент Тогда 
		
		//***2016.03.04 если для диска не указана связь ни с одной крышкой, то заказ не проводится
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("Крышки", Справочники.Номенклатура.НайтиПоКоду("0080004"));
		СписокПроизводителей = Новый СписокЗначений;
		СписокПроизводителей.Добавить(Справочники.Производители.НайтиПоКоду("65")); //REPLICA
		СписокПроизводителей.Добавить(Справочники.Производители.НайтиПоКоду("3333")); //REPLICA TD
		Запрос.УстановитьПараметр("СписокПроизводителей", СписокПроизводителей);

		Запрос.Текст = "ВЫБРАТЬ
		               |	А.Номенклатура,
		               |	А.Комплектующая
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		ЗаказПоставщикуСезонныйТовары.Номенклатура КАК Номенклатура,
		               |		ЕСТЬNULL(КомплектующиеНоменклатуры.Комплектующая, 0) КАК Комплектующая
		               |	ИЗ
		               |		Документ.ЗаказПоставщикуСезонный.Товары КАК ЗаказПоставщикуСезонныйТовары
		               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
		               |			ПО ЗаказПоставщикуСезонныйТовары.Номенклатура = КомплектующиеНоменклатуры.Номенклатура
		               |				И (КомплектующиеНоменклатуры.Комплектующая В ИЕРАРХИИ (&Крышки))
		               |	ГДЕ
		               |		ЗаказПоставщикуСезонныйТовары.Ссылка = &Ссылка
		               |		И ЗаказПоставщикуСезонныйТовары.Номенклатура.Производитель В (&СписокПроизводителей)) КАК А
		               |ГДЕ
		               |	А.Комплектующая = 0";
					   
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Количество() > 0 Тогда
			Отказ = Истина;           //19.01.18 Смирнов //задача №39214
			Сообщить("В сезонном заказе присутствуют диски, у которых нет связи с крышкой");
		КонецЕсли;
		Пока Результат.Следующий() Цикл
			Сообщить(Результат.Номенклатура.Код + " " + Результат.Номенклатура.Наименование);
		КонецЦикла;
		
	
		
	#КонецЕсли
	
	Если не Отказ тогда
		Для Каждого ТекСтрокаТовары Из Товары Цикл
			// регистр ЗаказыПоставщикуСезонные Приход
			Движение = Движения.ЗаказыПоставщикамСезонные.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Дата; // дата регистрации в регистре накопления = дате документа!
			Движение.ЗаказПоставщикуСезонный = Ссылка;
			Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;
			Движение.Количество   = ТекСтрокаТовары.Количество;
		    Если Дата >= Дата("20170101000000") Тогда
		    Движение.Подразделение = ?(Подразделение=Справочники.Подразделения.ПустаяСсылка(),Справочники.Подразделения.НайтиПоКоду("00005"),Подразделение);
		    Движение.ВЭД = Подразделение.ВЭД;
		    КонецЕсли;
			Движение.Дата = ?(ТекСтрокаТовары.ДатаПроизводства='00010101', ссылка.ДатаДействияПо, ДобавитьМесяц(ТекСтрокаТовары.ДатаПроизводства,2) );
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

//***2017.11.25
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	//если по сезонному заказу есть движения по регистру, созданные другими регистраторами, то отказ 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекЗаказ", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказыПоставщикамСезонныеОбороты.Регистратор
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПоставщикамСезонные.Обороты(, , Регистратор, ЗаказПоставщикуСезонный = &ТекЗаказ) КАК ЗаказыПоставщикамСезонныеОбороты
	               |ГДЕ
	               |	ЗаказыПоставщикамСезонныеОбороты.Регистратор <> &ТекЗаказ";
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Количество() > 0 Тогда
		Отказ = Истина;
		#Если Клиент Тогда
			Сообщить("Документ не может быть снят с проведения, т.к. уже созданы другие документы, связанные с ним:");
			Пока Результат.Следующий() Цикл
				Сообщить(Результат.Регистратор);
			КонецЦикла;
		#КонецЕсли
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)

	
	// Удаление записей регистрации из всех последовательностей
	Для Каждого НаборЗаписейРегистрацииВПоследовательности Из ПринадлежностьПоследовательностям Цикл
		НаборЗаписейРегистрацииВПоследовательности.Очистить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
ЗаказДубль= Документы.ЗаказПоставщику.ПустаяСсылка();
КонецПроцедуры                           

процедура СравнитьЦеныСФоп()    Экспорт
	если Организация = справочники.Организации.НайтиПоКоду("00001") тогда
		ЭтоЭкспорт = Ложь;
	иначе 
		ЭтоЭкспорт = Истина;
	конецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
//	|	ЗаказПоставщикуСезонныйТовары.Ссылка КАК Ссылка,
	|	ЗаказПоставщикуСезонныйТовары.Номенклатура КАК Номенклатура,
	|	ЗаказПоставщикуСезонныйТовары.Количество КАК Количество,
	|	ЗаказПоставщикуСезонныйТовары.Цена КАК Цена,
	|	ЗаказПоставщикуСезонныйТовары.Сумма КАК Сумма
	|ПОМЕСТИТЬ ЗаказыПоставщику
	|ИЗ
	|	&Товары КАК ЗаказПоставщикуСезонныйТовары
	//|ГДЕ
	//|	ЗаказПоставщикуСезонныйТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	//|	ЗаказыПоставщику.Ссылка КАК Ссылка,
	|	ЗаказыПоставщику.Номенклатура.Код КАК Код,
	|	ЗаказыПоставщику.Номенклатура КАК Номенклатура,
	|	ЗаказыПоставщику.Количество,
	|	ЗаказыПоставщику.Цена,
	|	ЕСТЬNULL(ЦеныФОП.Цена, 0) КАК ЦенаФОП,
	|	ЗаказыПоставщику.Сумма
	|ПОМЕСТИТЬ ЦенаСкомплектующими
	|ИЗ
	|	ЗаказыПоставщику КАК ЗаказыПоставщику
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныФОП"+?(ЭтоЭкспорт,"Экспорт","")+".СрезПоследних(&Дата, ) КАК ЦеныФОП
	|		ПО ЗаказыПоставщику.Номенклатура = ЦеныФОП.Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	//|	ЗаказыПоставщику.Ссылка,
	|	ЗаказыПоставщику.Номенклатура.Код,
	|	ЗаказыПоставщику.Номенклатура,
	|	0,
	|	0,
	|	КомплектующиеНоменклатуры.Количество * ЕСТЬNULL(ЦеныФОП.Цена, 0),
	|	0
	|ИЗ
	|	ЗаказыПоставщику КАК ЗаказыПоставщику
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныФОП.СрезПоследних(&Дата, ) КАК ЦеныФОП
	|			ПО КомплектующиеНоменклатуры.Комплектующая = ЦеныФОП.Номенклатура
	|		ПО ЗаказыПоставщику.Номенклатура = КомплектующиеНоменклатуры.Номенклатура
	|ГДЕ
	|	КомплектующиеНоменклатуры.Комплектующая.Родитель В(&Родитель)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	//|	ЦенаСкомплектующими.Ссылка КАК Ссылка,
	|	ЦенаСкомплектующими.Код КАК Код,
	|	ЦенаСкомплектующими.Номенклатура КАК Номенклатура,
	|	СУММА(ЦенаСкомплектующими.Количество) КАК Количество,
	|	СУММА(ЦенаСкомплектующими.Цена) КАК Цена,
	|	СУММА(ЦенаСкомплектующими.ЦенаФОП) КАК ЦенаФОП,
	|	СУММА(ЦенаСкомплектующими.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ИтоговаяТаблица
	|ИЗ
	|	ЦенаСкомплектующими КАК ЦенаСкомплектующими
	|
	|СГРУППИРОВАТЬ ПО
	//|	ЦенаСкомплектующими.Ссылка,
	|	ЦенаСкомплектующими.Код,
	|	ЦенаСкомплектующими.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	//|	ИтоговаяТаблица.Ссылка КАК Ссылка,
	|	ИтоговаяТаблица.Код,
	|	ИтоговаяТаблица.Номенклатура КАК Номенклатура,
	|	ИтоговаяТаблица.Количество,
	|	ИтоговаяТаблица.Цена,
	|	ИтоговаяТаблица.ЦенаФОП,
	|	ИтоговаяТаблица.Сумма
	|ИЗ
	|	ИтоговаяТаблица КАК ИтоговаяТаблица
	|ГДЕ
	|	ИтоговаяТаблица.Цена > ИтоговаяТаблица.ЦенаФОП
	|
	|УПОРЯДОЧИТЬ ПО
	//|	Ссылка,
	|	Номенклатура";
	
	Запрос.УстановитьПараметр("USD", Справочники.Валюты.НайтиПоНаименованию("USD"));
	//Запрос.УстановитьПараметр("НачДата", НачДата);
	Запрос.УстановитьПараметр("Товары", Товары);
	список = новый списокЗначений();
	Список.добавить(справочники.Номенклатура.НайтиПоКоду("0000702"));
	Список.Добавить(справочники.Номенклатура.НайтиПоКоду("0000713"));
	Запрос.УстановитьПараметр("Родитель", Список);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для каждого стр из  результат Цикл
	 СтрокаДляИсправления =  Товары.Найти(СТР.Номенклатура,"номенклатура");
	 строкаДляИсправления.Цена = стр.Ценафоп;
	  	#Если клиент тогда
	 сообщить("Для номенклатуры "+стр.Номенклатура+" установлена цена "+стр.Цена+ ", которая выше цены ФОБ "+стр.ЦенаФОП +" !");
	 сообщить("Для номенклатуры "+стр.Номенклатура+" цена изменена  на цену ФОБ");
	 	#КонецЕсли

	конецЦикла;
	
конецпроцедуры	

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	ВремяСоздания = Дата(1,1,1);
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателяСезонный") Тогда
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект,ДанныеЗаполнения);
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ДокументОснование = ДанныеЗаполнения;
		Для каждого стр из ДанныеЗаполнения.Товары Цикл
			НовСтр = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,Стр);	
		КонецЦикла;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаданиеНаЗаказПоставщику") Тогда	
		ЗаданиеНаЗаказ = ДанныеЗаполнения;
		Для каждого стр из ДанныеЗаполнения.Товары Цикл
			НовСтр = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,Стр);	
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ВыполнитьПроверкуЗаполненияРеквизитов(Отказ)
	
	Если ПустаяСтрока(ПортНазначения) Тогда
		Отказ = Истина;
		#Если Клиент Тогда
			Сообщить("" + Ссылка + " :: укажите порт назначения");
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьПроверкуЗаполненияРеквизитов()



мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();