Перем мВалютаРегламентированногоУчета Экспорт;
Перем мПорядокСписанияПартий; // (Общ)

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьПоступлениеТоваров()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДатаВходящегоДокумента,
	|	ДоговорКонтрагента,
	|	Контрагент,
	|	Контрагент КАК Поставщик,
	|	Организация,
	|	Организация КАК Покупатель,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|
	|ИЗ
	|	Документ.ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку КАК ПоступлениеТоваровУслуг
	|
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросПоТоварам.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	ВложенныйЗапрос.Номенклатура.Код КАК ТоварКод,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|	ВложенныйЗапрос.КоличествоМест,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.Коэффициент,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.СтавкаНДС,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Серия,
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.Метка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПоступлениеТоваровУслуг.Номенклатура КАК Номенклатура,
	|		СУММА(ПоступлениеТоваровУслуг.КоличествоМест) КАК КоличествоМест,
	|		СУММА(ПоступлениеТоваровУслуг.Количество) КАК Количество,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		ПоступлениеТоваровУслуг.Коэффициент КАК Коэффициент,
	|		ПоступлениеТоваровУслуг.Цена КАК Цена,
	|		СУММА(ПоступлениеТоваровУслуг.Сумма) КАК Сумма,
	|		СУММА(ПоступлениеТоваровУслуг.СуммаНДС) КАК СуммаНДС,
	|		ПоступлениеТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
	|		ПоступлениеТоваровУслуг.ХарактеристикаНоменклатуры КАК Характеристика,
	|		ПоступлениеТоваровУслуг.СерияНоменклатуры КАК Серия,
	|		МИНИМУМ(ПоступлениеТоваровУслуг.НомерСтроки) КАК НомерСтроки,
	|		0 КАК Метка
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку.Товары КАК ПоступлениеТоваровУслуг
	|	
	|	ГДЕ
	|		ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПоступлениеТоваровУслуг.Номенклатура,
	|		ПоступлениеТоваровУслуг.СтавкаНДС,
	|		ПоступлениеТоваровУслуг.Цена,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмерения,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмеренияМест,
	|		ПоступлениеТоваровУслуг.Коэффициент,
	|		ПоступлениеТоваровУслуг.ХарактеристикаНоменклатуры,
	|		ПоступлениеТоваровУслуг.СерияНоменклатуры) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Содержание,
	|	ПоступлениеТоваровУслуг.Содержание,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ПоступлениеТоваровУслуг.Количество,
	|	1,
	|	ПоступлениеТоваровУслуг.Цена,
	|	ПоступлениеТоваровУслуг.Сумма,
	|	ПоступлениеТоваровУслуг.СуммаНДС,
	|	ПоступлениеТоваровУслуг.СтавкаНДС,
	|	NULL,
	|	NULL,
	|	НомерСтроки,
	|	1 КАК Метка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку.Услуги КАК ПоступлениеТоваровУслуг
	|
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|";

	ВыборкаСтрок = ЗапросПоТоварам.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_Накладная";
	Макет       = ПолучитьМакет("Накладная");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Накладная");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.Поставщик = Шапка.Контрагент;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.Получатель = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	ФлагПечатиМест = (Товары.Итог("КоличествоМест") > 0);

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы" + ?(ФлагПечатиМест, "Мест", ""));
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Строка" + ?(ФлагПечатиМест, "Мест", ""));
	Сумма    = 0;
	СуммаНДС = 0;

	Для Каждого ВыборкаСтрокТовары Из ВыборкаСтрок Цикл

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.НомерСтроки = ВыборкаСтрок.Индекс(ВыборкаСтрокТовары) + 1;
		ОбластьМакета.Параметры.Товар       = СокрЛП(ВыборкаСтрокТовары.Товар) + ПредставлениеСерий(ВыборкаСтрокТовары);

		ТабДокумент.Вывести(ОбластьМакета);

		Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
		СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;

	КонецЦикла;

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ФорматСумм(СуммаНДС);
		ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ВыборкаСтрок.Количество()
	+ ", на сумму " + ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПоступлениеТоваров()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьПоступлениеТоваровСНаценкой()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДатаВходящегоДокумента,
	|	ДоговорКонтрагента,
	|	Контрагент,
	|	Контрагент КАК Поставщик,
	|	Организация,
	|	Организация КАК Покупатель,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|
	|ИЗ
	|	Документ.ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку КАК ПоступлениеТоваровУслуг
	|
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент",  ЭтотОбъект.Ссылка);
	ЗапросПоТоварам.УстановитьПараметр("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);

	Если ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
		// Документ оформлен в валюте взаиморасчетов
		ЗапросПоТоварам.УстановитьПараметр("Курс",      ЭтотОбъект.КурсВзаиморасчетов);
		ЗапросПоТоварам.УстановитьПараметр("Кратность", ЭтотОбъект.КратностьВзаиморасчетов);
	Иначе
		// Документ оформлен в валюте регламентированного учета
		ЗапросПоТоварам.УстановитьПараметр("Курс",      1);
		ЗапросПоТоварам.УстановитьПараметр("Кратность", 1);
	КонецЕсли;

	ЗапросПоТоварам.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000))    КАК Товар,
	|	ВложенныйЗапрос.Номенклатура.Код                   КАК ТоварКод,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление     КАК ЕдиницаИзмеренияПоступления,
	|	ВложенныйЗапрос.ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|	ВложенныйЗапрос.КоличествоМест,
	|	ВложенныйЗапрос.Количество                         КАК КоличествоПоступления,
	|	ВложенныйЗапрос.Коэффициент,
	|	ВложенныйЗапрос.ЦенаПоступления,
	|	ВложенныйЗапрос.СуммаПоступления,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмеренияПродажи,
	|	ВложенныйЗапрос.КоличествоПродажи,
	|	ВложенныйЗапрос.ЦенаПродажи,
	|	ВложенныйЗапрос.СуммаПродажи,
	|	ВложенныйЗапрос.ПроцентНаценки,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Серия,
	|	ВложенныйЗапрос.НомерСтроки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПоступлениеТоваровУслуг.Номенклатура          КАК Номенклатура,
	|		СУММА(ПоступлениеТоваровУслуг.КоличествоМест) КАК КоличествоМест,
	|		СУММА(ПоступлениеТоваровУслуг.Количество)     КАК Количество,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмерения      КАК ЕдиницаИзмерения,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмеренияМест  КАК ЕдиницаИзмеренияМест,
	|		ПоступлениеТоваровУслуг.Коэффициент           КАК Коэффициент,
	|		ВЫБОР
	|			КОГДА &СуммаВключаетНДС ТОГДА СУММА((ПоступлениеТоваровУслуг.Сумма * &Курс / &Кратность) / ПоступлениеТоваровУслуг.Количество)
	|			ИНАЧЕ СУММА(((ПоступлениеТоваровУслуг.Сумма + ПоступлениеТоваровУслуг.СуммаНДС) * &Курс / &Кратность) / ПоступлениеТоваровУслуг.Количество)
	|		КОНЕЦ КАК ЦенаПоступления,
	|		ВЫБОР
	|			КОГДА &СуммаВключаетНДС ТОГДА СУММА(ПоступлениеТоваровУслуг.Сумма * &Курс / &Кратность)
	|			ИНАЧЕ СУММА((ПоступлениеТоваровУслуг.Сумма + ПоступлениеТоваровУслуг.СуммаНДС) * &Курс / &Кратность)
	|		КОНЕЦ КАК СуммаПоступления,
	|		СУММА(ПоступлениеТоваровУслуг.Количество * ПоступлениеТоваровУслуг.Коэффициент / ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) КАК КоличествоПродажи,
	|		СУММА(ПоступлениеТоваровУслуг.ЦенаВРознице)                                      КАК ЦенаПродажи,
	|		СУММА((ПоступлениеТоваровУслуг.Количество * ПоступлениеТоваровУслуг.Коэффициент / ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) * ПоступлениеТоваровУслуг.ЦенаВРознице) КАК СуммаПродажи,
	|		СУММА(ПоступлениеТоваровУслуг.ПроцентРозничнойНаценки)                           КАК ПроцентНаценки,
	|		ПоступлениеТоваровУслуг.СтавкаНДС                  КАК СтавкаНДС,
	|		ПоступлениеТоваровУслуг.ХарактеристикаНоменклатуры КАК Характеристика,
	|		ПоступлениеТоваровУслуг.СерияНоменклатуры          КАК Серия,
	|		МИНИМУМ(ПоступлениеТоваровУслуг.НомерСтроки)       КАК НомерСтроки
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку.Товары КАК ПоступлениеТоваровУслуг
	|	
	|	ГДЕ
	|		ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПоступлениеТоваровУслуг.Номенклатура,
	|		ПоступлениеТоваровУслуг.СтавкаНДС,
	|		ПоступлениеТоваровУслуг.Цена,
	|		ПоступлениеТоваровУслуг.ЦенаВРознице,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмерения,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмеренияМест,
	|		ПоступлениеТоваровУслуг.Коэффициент,
	|		ПоступлениеТоваровУслуг.ХарактеристикаНоменклатуры,
	|		ПоступлениеТоваровУслуг.СерияНоменклатуры) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО НомерСтроки ВОЗР
	|";

	ВыборкаСтрок = ЗапросПоТоварам.Выполнить().Выгрузить();

	ТабДокумент                     = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_НакладнаяСНаценкой";
	Макет                           = ПолучитьМакет("НакладнаяСНаценкой");
	ФлагПечатиМест                  = (ВыборкаСтрок.Итог("КоличествоМест") > 0);

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Накладная");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.Поставщик = Шапка.Контрагент;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.Получатель = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы" + ?(ФлагПечатиМест, "Мест", ""));

	ОбластьМакета.Параметры.ЗаголовокПоступления = "Поступление" + ?(Шапка.УчитыватьНДС, " с НДС", "");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Строка" + ?(ФлагПечатиМест, "Мест", ""));

	ВсегоПоступления = 0;
	ВсегоПродажи     = 0;
	ВсегоНаценки     = 0;

	Для Каждого ВыборкаСтрокТовары Из ВыборкаСтрок Цикл

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.НомерСтроки  = ВыборкаСтрок.Индекс(ВыборкаСтрокТовары) + 1;
		ОбластьМакета.Параметры.Товар        = СокрЛП(ВыборкаСтрокТовары.Товар) + ПредставлениеСерий(ВыборкаСтрокТовары);
		СуммаНаценки                         = ВыборкаСтрокТовары.СуммаПродажи - ВыборкаСтрокТовары.СуммаПоступления;
		ОбластьМакета.Параметры.СуммаНаценки = СуммаНаценки;

		ТабДокумент.Вывести(ОбластьМакета);

		ВсегоПоступления = ВсегоПоступления + ВыборкаСтрокТовары.СуммаПоступления;
		ВсегоПродажи     = ВсегоПродажи     + ВыборкаСтрокТовары.СуммаПродажи;
		ВсегоНаценки     = ВсегоНаценки     + СуммаНаценки;

	КонецЦикла;

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.ВсегоПоступления = ФорматСумм(ВсегоПоступления);
	ОбластьМакета.Параметры.ВсегоПродажи     = ФорматСумм(ВсегоПродажи);
	ОбластьМакета.Параметры.ВсегоНаценки     = ФорматСумм(ВсегоНаценки);
	ОбластьМакета.Параметры.ВсегоПроцент     = ?(ВсегоПоступления = 0, "", ФорматСумм(100 * ВсегоНаценки / ВсегоПоступления));
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований "  + ВыборкаСтрок.Количество()
	                                       + ", сумма поступления " + ФорматСумм(ВсегоПоступления, мВалютаРегламентированногоУчета)
	                                       + ", сумма продажи "     + ФорматСумм(ВсегоПродажи,     мВалютаРегламентированногоУчета)
	                                       + ", сумма наценки "     + ФорматСумм(ВсегоНаценки,     мВалютаРегламентированногоУчета);

	ОбластьМакета.Параметры.СуммаПоступленияПрописью = СформироватьСуммуПрописью(ВсегоПоступления, мВалютаРегламентированногоУчета);
	ОбластьМакета.Параметры.СуммаПродажиПрописью     = СформироватьСуммуПрописью(ВсегоПродажи,     мВалютаРегламентированногоУчета);
	ОбластьМакета.Параметры.СуммаНаценкиПрописью     = СформироватьСуммуПрописью(ВсегоНаценки,     мВалютаРегламентированногоУчета);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПоступлениеТоваровСНаценкой()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьТОРГ12ЗаПоставщика()

	ЕдиницаИзмеренияВеса = Константы.ЕдиницаИзмеренияВеса.Получить();

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Дата КАК Дата,
	|	ДатаВходящегоДокумента  КАК ДатаДокумента,
	|	НомерВходящегоДокумента КАК НомерДокумента,
	|	Организация             КАК Организация,
	|	Организация             КАК Грузополучатель,
	|	Организация             КАК Плательщик,
	|	Контрагент,
	|	Контрагент              КАК Поставщик,
	|	БанковскийСчетКонтрагента КАК БанковскийСчет,
	|	ДоговорКонтрагента.Представление КАК Основание,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
	|	ВалютаДокумента,
	|	КурсВзаиморасчетов      КАК Курс,
	|	КратностьВзаиморасчетов КАК Кратность,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Если ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда

		// Документ оформлен в валюте взаиморасчетов
		ЗапросПоТоварам.УстановитьПараметр("Курс", ЭтотОбъект.КурсВзаиморасчетов);
		ЗапросПоТоварам.УстановитьПараметр("Кратность", ЭтотОбъект.КратностьВзаиморасчетов);

	Иначе

		// Документ оформлен в валюте регламентированного учета
		ЗапросПоТоварам.УстановитьПараметр("Курс", 1);
		ЗапросПоТоварам.УстановитьПараметр("Кратность", 1);

	КонецЕсли;

	ЗапросПоТоварам.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура                    КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура." + ТоварКод + "   КАК ТоварКод,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление                КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код  КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВложенныйЗапрос.ЕдиницаИзмерения                              КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмеренияМест.Представление            КАК ВидУпаковки,
	|	ВложенныйЗапрос.КоэффициентМест / ВложенныйЗапрос.Коэффициент КАК КоличествоВОдномМесте,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КоличествоМест > 0 ТОГДА ВложенныйЗапрос.КоличествоМест * ВложенныйЗапрос.ЕдиницаИзмеренияМест.Вес
	|		ИНАЧЕ ВложенныйЗапрос.Количество * ВложенныйЗапрос.ЕдиницаИзмерения.Вес
	|	КОНЕЦ КАК МассаБрутто,
	|	ВложенныйЗапрос.Характеристика      КАК Характеристика,
	|	ВложенныйЗапрос.Серия               КАК Серия,
	|	ВложенныйЗапрос.СтавкаНДС           КАК СтавкаНДС,
	|	ВложенныйЗапрос.Цена                КАК Цена,
	|	ВложенныйЗапрос.Количество          КАК Количество,
	|	ВложенныйЗапрос.КоличествоМест      КАК КоличествоМест,
	|	ВложенныйЗапрос.Сумма               КАК Сумма,
	|	ВложенныйЗапрос.СуммаНДС            КАК СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки         КАК НомерСтроки,
	|	ВложенныйЗапрос.Метка               КАК Метка
	|ИЗ
	|
	|	(
	|	ВЫБРАТЬ
	|		ПоступлениеТоваровУслуг.Номенклатура,
	|		ПоступлениеТоваровУслуг.Коэффициент,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмерения,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмеренияМест,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмеренияМест.Коэффициент     КАК КоэффициентМест,
	|		ПоступлениеТоваровУслуг.ХарактеристикаНоменклатуры           КАК Характеристика,
	|		ПоступлениеТоваровУслуг.СерияНоменклатуры                    КАК Серия,
	|		ПоступлениеТоваровУслуг.СтавкаНДС,
	|		ПоступлениеТоваровУслуг.Цена * &Курс / &Кратность            КАК Цена,
	|		СУММА(ПоступлениеТоваровУслуг.Количество)                    КАК Количество,
	|		СУММА(ПоступлениеТоваровУслуг.КоличествоМест)                КАК КоличествоМест,
	|		СУММА(ПоступлениеТоваровУслуг.Сумма    * &Курс / &Кратность) КАК Сумма,
	|		СУММА(ПоступлениеТоваровУслуг.СуммаНДС * &Курс / &Кратность) КАК СуммаНДС,
	|		МИНИМУМ(ПоступлениеТоваровУслуг.НомерСтроки)                 КАК НомерСтроки,
	|		0                                                            КАК Метка
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку.Товары КАК ПоступлениеТоваровУслуг
	|	ГДЕ
	|		ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|		ПоступлениеТоваровУслуг.Номенклатура,
	|		ПоступлениеТоваровУслуг.Коэффициент,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмерения,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмеренияМест,
	|		ПоступлениеТоваровУслуг.ХарактеристикаНоменклатуры,
	|		ПоступлениеТоваровУслуг.СерияНоменклатуры,
	|		ПоступлениеТоваровУслуг.СтавкаНДС,
	|		ПоступлениеТоваровУслуг.Цена
	|
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Номенклатура                  КАК Номенклатура,
	|	ПоступлениеТоваровУслуг.Содержание                    КАК ТоварНаименование,
	|	ПоступлениеТоваровУслуг.Номенклатура." + ТоварКод + " КАК ТоварКод,
	|	ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Представление               КАК БазоваяЕдиницаНаименование,
	|	ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков                             КАК ЕдиницаИзмерения,
	|	NULL                                                  КАК ВидУпаковки,
	|	NULL                                                  КАК КоличествоВОдномМесте,
	|	0                                                     КАК МассаБрутто,
	|	NULL                                                  КАК Характеристика,
	|	NULL                                                  КАК Серия,
	|	ПоступлениеТоваровУслуг.СтавкаНДС                     КАК СтавкаНДС,
	|	ПоступлениеТоваровУслуг.Цена * &Курс / &Кратность     КАК Цена,
	|	ПоступлениеТоваровУслуг.Количество                    КАК Количество,
	|	NULL                                                  КАК КоличествоМест,
	|	ПоступлениеТоваровУслуг.Сумма    * &Курс / &Кратность КАК Сумма,
	|	ПоступлениеТоваровУслуг.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
	|	ПоступлениеТоваровУслуг.НомерСтроки                   КАК НомерСтроки,
	|	1                                                     КАК Метка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку.Услуги КАК ПоступлениеТоваровУслуг
	|
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|";

	ВыборкаСтрок = ЗапросПоТоварам.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_ТОРГ12";

	Макет = ПолучитьОбщийМакет("ТОРГ12");

	// Выводим общие реквизиты шапки
	СведенияОПокупателе = СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	СведенияОПоставщике = СведенияОЮрФизЛице(Шапка.Контрагент,  Шапка.Дата,, Шапка.БанковскийСчет);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.НомерДокумента = Шапка.НомерДокумента;
	ОбластьМакета.Параметры.ДатаДокумента  = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ОписаниеОрганизации(СведенияОПокупателе);
	ОбластьМакета.Параметры.ПредставлениеПлательщика     = ОписаниеОрганизации(СведенияОПокупателе);
	Если Шапка.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	   И Шапка.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ОбластьМакета.Параметры.Основание = Шапка.Основание;
	Иначе
		ЗапросЗаказ = Новый Запрос;
		ЗапросЗаказ.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		ЗапросЗаказ.Текст =
		"ВЫБРАТЬ
		|	Сделка.Номер       КАК Номер,
		|	Сделка.Дата        КАК Дата,
		|	Сделка.ВидОперации КАК ВидОперации,
		|	Сделка.Организация КАК Организация
		|ИЗ
		|	Документ.ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент";
		ШапкаЗаказ = ЗапросЗаказ.Выполнить().Выбрать();
		ШапкаЗаказ.Следующий();

		ОбластьМакета.Параметры.Основание = СформироватьЗаголовокДокумента(ШапкаЗаказ, Строка(ШапкаЗаказ.ВидОперации));
	КонецЕсли;

	// Если Значение поля Контрагент не заполнено, то это возможно только для
	// вида операции "Ответственное хранение (купля-продажа/комиссия)".
	Если ТипЗнч(СведенияОПоставщике) = Тип("Структура") тогда
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ОписаниеОрганизации(СведенияОПоставщике);
		ОбластьМакета.Параметры.ПредставлениеПоставщика  = ОписаниеОрганизации(СведенияОПоставщике);
		ОбластьМакета.Параметры.ОрганизацияПоОКПО = СведенияОПоставщике.КодПоОКПО;
		ОбластьМакета.Параметры.ПоставщикПоОКПО   = СведенияОПоставщике.КодПоОКПО;
	КонецЕсли;

	ОбластьМакета.Параметры.ВидДеятельностиПоОКДП = "";
	ОбластьМакета.Параметры.ГрузополучательПоОКПО = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакета.Параметры.ПлательщикПоОКПО      = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакета.Параметры.ОснованиеНомер        = "";
	ОбластьМакета.Параметры.ОснованиеДата         = "";
	ОбластьМакета.Параметры.ТранспортнаяНакладнаяНомер = "";
	ОбластьМакета.Параметры.ТранспортнаяНакладнаяДата  = "";

	ТабДокумент.Вывести(ОбластьМакета);

	// выясним, какую вертикальную секцию будем использовать
	СтрокНаСтранице = 20;
	СтрокШапки      = 10;
	СтрокПодвала    = 9;
	НомерСтраницы   = 1;

	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
	ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	КоличествоСтрок = ВыборкаСтрок.Количество();

	Если КоличествоСтрок = 1 Тогда
		ПереноситьПоследнююСтроку	= 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// инициализация итогов по странице
	ИтогоМассаБруттоНаСтранице = 0;
	ИтогоМестНаСтранице        = 0;
	ИтогоКоличествоНаСтранице  = 0;
	ИтогоСуммаНаСтранице       = 0;
	ИтогоНДСНаСтранице         = 0;
	ИтогоСуммаСНДСНаСтранице   = 0;

	// инициализация итогов по документу
	ИтогоМассаБрутто = 0;
	ИтогоМест        = 0;
	ИтогоКоличество  = 0;
	ИтогоСумма       = 0;
	ИтогоНДС         = 0;
	ИтогоСуммаСНДС   = 0;
	Ном              = 0;

	// Выводим многострочную часть докмента
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для Каждого ВыборкаСтрокТовары Из ВыборкаСтрок Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");

			ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице = ИтогоМассаБруттоНаСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогМестПоСтранице        = ИтогоМестНаСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоПоСтранице  = ИтогоКоличествоНаСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице       = ИтогоСуммаНаСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогНДСПоСтранице         = ИтогоНДСНаСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице   = ИтогоСуммаСНДСНаСтранице;

			ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

			// очистим итоги по странице
			ИтогоМассаБруттоНаСтранице = 0;
			ИтогоМестНаСтранице        = 0;
			ИтогоКоличествоНаСтранице  = 0;
			ИтогоСуммаНаСтранице       = 0;
			ИтогоНДСНаСтранице         = 0;
			ИтогоСуммаСНДСНаСтранице   = 0;

			НомерСтраницы = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);

		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.Номер = ВыборкаСтрок.Индекс(ВыборкаСтрокТовары) + 1;

		СуммаСНДС = (ВыборкаСтрокТовары.Сумма
			+ ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрокТовары.СуммаНДС));

		Если ЗначениеНеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
			МассаБрутто = 0;
		Иначе
			МассаБрутто = ВыборкаСтрокТовары.МассаБрутто;
			МассаБрутто = ?(МассаБрутто <> Неопределено И МассаБрутто <> NULL, МассаБрутто, 0);
		КонецЕсли;

		Мест        = ВыборкаСтрокТовары.КоличествоМест;
		Мест        = ?(Мест <> Неопределено И Мест <> NULL, Мест, 0);

		Количество  = ВыборкаСтрокТовары.Количество;
		СуммаНДС    = ВыборкаСтрокТовары.СуммаНДС;
		СуммаБезНДС = СуммаСНДС    - СуммаНДС;

		ОбластьМакета.Параметры.МассаБрутто = МассаБрутто;
		ОбластьМакета.Параметры.СуммаСНДС   = СуммаСНДС;
		ОбластьМакета.Параметры.СуммаНДС    = СуммаНДС;
		ОбластьМакета.Параметры.СтавкаНДС   = ВыборкаСтрокТовары.СтавкаНДС;
		ОбластьМакета.Параметры.СуммаБезНДС = СуммаБезНДС;
		ОбластьМакета.Параметры.Цена        = СуммаБезНДС / ?(Количество = 0, 1, Количество);
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ПредставлениеСерий(ВыборкаСтрокТовары);

		ТабДокумент.Вывести(ОбластьМакета);

		// увеличим итоги по странице
		ИтогоМассаБруттоНаСтранице = ИтогоМассаБруттоНаСтранице + МассаБрутто;
		ИтогоМестНаСтранице        = ИтогоМестНаСтранице        + Мест;
		ИтогоКоличествоНаСтранице  = ИтогоКоличествоНаСтранице  + Количество;
		ИтогоСуммаНаСтранице       = ИтогоСуммаНаСтранице       + СуммаБезНДС;
		ИтогоНДСНаСтранице         = ИтогоНДСНаСтранице         + СуммаНДС;
		ИтогоСуммаСНДСНаСтранице   = ИтогоСуммаСНДСНаСтранице   + СуммаСНДС;

		// увеличим итоги по дукументу
		ИтогоМассаБрутто = ИтогоМассаБрутто + МассаБрутто;
		ИтогоМест        = ИтогоМест        + Мест;
		ИтогоКоличество  = ИтогоКоличество  + Количество;
		ИтогоСумма       = ИтогоСумма       + СуммаБезНДС;
		ИтогоНДС         = ИтогоНДС         + СуммаНДС;
		ИтогоСуммаСНДС   = ИтогоСуммаСНДС   + СуммаСНДС;

	КонецЦикла;

	// Выводим итоги по последней странице
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице = ИтогоМассаБруттоНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогМестПоСтранице        = ИтогоМестНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоПоСтранице  = ИтогоКоличествоНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице       = ИтогоСуммаНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогНДСПоСтранице         = ИтогоНДСНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице   = ИтогоСуммаСНДСНаСтранице;

	ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
	
	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогМассаБрутто = ИтогоМассаБрутто;
	ОбластьМакета.Параметры.ИтогМест        = ИтогоМест;
	ОбластьМакета.Параметры.ИтогКоличество  = ИтогоКоличество;
	ОбластьМакета.Параметры.ИтогСуммы       = ИтогоСумма;
	ОбластьМакета.Параметры.ИтогНДС         = ИтогоНДС;
	ОбластьМакета.Параметры.ИтогСуммыСНДС   = ИтогоСуммаСНДС;

	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");

	Если НЕ ЗначениеНеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
		ОбластьМакета.Параметры.МассаГрузаПрописью = ЧислоПрописью(ИтогоМассаБрутто, ,",,,,,,,,0")+ " " +ЕдиницаИзмеренияВеса.Наименование + ".";
	КонецЕсли;

	ОбластьМакета.Параметры.ВсегоМестПрописью = ЧислоПрописью(ИтогоМест, ,",,,,,,,,0");
	ОбластьМакета.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ОбластьМакета.Параметры.СуммаПрописью = СформироватьСуммуПрописью(ИтогоСуммаСНДС, мВалютаРегламентированногоУчета);
	ТабДокумент.Вывести(ОбластьМакета);

	// Зададим параметры макета
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	Возврат ТабДокумент;

КонецФункции // ПечатьТОРГ12ЗаПоставщика()

// Функция формирует табличный документ унифицированной формы ТОРГ-4
// "Акт о приемке товара, поступившего без счета поставщика"
//
// Возвращаемое значение:
//  Табличный документ - печатная форма ТОРГ-4
//
Функция ПечатьТОРГ4()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер КАК Номер,
	|	Дата  КАК ДатаДокумента,
	|	ДатаВходящегоДокумента      КАК ДатаДокументаСопровождения,
	|	НомерВходящегоДокумента     КАК НомерДокументаСопровождения,
	|	Организация,
	|	Организация                 КАК ЮрФизЛицо,
	|	Организация                 КАК Руководители,
	|	Контрагент,
	|	Контрагент                  КАК Поставщик,
	|	Контрагент                  КАК Грузоотправитель,
	|	Подразделение.Представление КАК ПредставлениеПодразделения,
	|	Подразделение,
	|	Склад                       КАК МестоПриемки,
	|	ВалютаДокумента,
	|	КурсВзаиморасчетов          КАК Курс,
	|	КратностьВзаиморасчетов     КАК Кратность
	|ИЗ
	|	Документ.ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросПоТоварам.УстановитьПараметр("Курс",            ЭтотОбъект.КурсВзаиморасчетов);
	ЗапросПоТоварам.УстановитьПараметр("Кратность",       ЭтотОбъект.КратностьВзаиморасчетов);
	ЗапросПоТоварам.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура." + ТоварКод + "   КАК ТоварКод,
	|	ВложенныйЗапрос.КоличествоМест,
	|	ВложенныйЗапрос.Количество КАК КоличествоШтук,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	ВложенныйЗапрос.КоэффициентМест / ВложенныйЗапрос.Коэффициент КАК КоличествоВОдномМесте,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Стоимость,
	|	ВложенныйЗапрос.СтавкаНДС,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Серия,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки
	|
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		ПоступлениеТоваровУслуг.Номенклатура,
	|		СУММА(ПоступлениеТоваровУслуг.КоличествоМест) КАК КоличествоМест,
	|		СУММА(ПоступлениеТоваровУслуг.Количество) КАК Количество,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмерения,
	|		ПоступлениеТоваровУслуг.Коэффициент,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмеренияМест,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмеренияМест.Коэффициент  КАК КоэффициентМест,
	|		ПоступлениеТоваровУслуг.Цена        * &Курс / &Кратность  КАК Цена,
	|		СУММА(ПоступлениеТоваровУслуг.Сумма * &Курс / &Кратность) КАК Стоимость,
	|		ПоступлениеТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
	|		ПоступлениеТоваровУслуг.ХарактеристикаНоменклатуры КАК Характеристика,
	|		ПоступлениеТоваровУслуг.СерияНоменклатуры          КАК Серия,
	|		МИНИМУМ(ПоступлениеТоваровУслуг.НомерСтроки)       КАК НомерСтроки
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку.Товары КАК ПоступлениеТоваровУслуг
	|
	|	ГДЕ
	|		ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		ПоступлениеТоваровУслуг.Номенклатура,
	|		ПоступлениеТоваровУслуг.СтавкаНДС,
	|		ПоступлениеТоваровУслуг.Цена,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмерения,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмеренияМест,
	|		ПоступлениеТоваровУслуг.Коэффициент,
	|		ПоступлениеТоваровУслуг.ХарактеристикаНоменклатуры,
	|		ПоступлениеТоваровУслуг.СерияНоменклатуры
	|	) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО НомерСтроки ВОЗР
	|
	|";
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	Макет = ПолучитьОбщийМакет("ТОРГ4");

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_ТОРГ4";

	// Выводим общие реквизиты шапки
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");

	СведенияОПокупателе = СведенияОЮрФизЛице(Шапка.ЮрФизЛицо, Шапка.ДатаДокумента);

	Если НЕ ЗначениеНеЗаполнено(Шапка.Контрагент) Тогда
		СведенияОПоставщике = СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента);
		ОбластьМакета.Параметры.ПредставлениеПоставщика       = ОписаниеОрганизации(СведенияОПоставщике);
		ОбластьМакета.Параметры.ОписаниеПоставщика            = ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ОписаниеОрганизации(СведенияОПоставщике);
		ОбластьМакета.Параметры.ПоставщикПоОКПО               = СведенияОПоставщике.КодПоОКПО;
	КонецЕсли;

	Руководители = ОтветственныеЛицаОрганизации(Шапка.Руководители, Шапка.ДатаДокумента,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;

	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.НомерДокумента           = ПолучитьНомерНаПечать(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ОписаниеОрганизации(СведенияОПокупателе);
	ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакета.Параметры.ГрузополучательПоОКПО    = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакета.Параметры.ФИОРуководителя          = Руководитель;
	ОбластьМакета.Параметры.ДожностьРуководителя     = Руководители.РуководительДолжность;
	ОбластьМакета.Параметры.РеквизитыСопроводительногоДокумента = "сопроводительный документ № "
	                                                            + Шапка.НомерДокументаСопровождения + " от "
	                                                            + Формат(Шапка.ДатаДокументаСопровождения, "ДФ='дд ММММ гггг'");

	ТабДокумент.Вывести(ОбластьМакета);

	СтрокНаСтранице = 23;
	СтрокШапки      = 20;
	СтрокПодвала    = 7;
	НомерСтраницы   = 1;

	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	КоличествоСтрок = ВыборкаСтрокТовары.Количество();

	Если КоличествоСтрок = 1 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// инициализация итогов по странице
	ИтогоМестПоСтранице        = 0;
	ИтогоШтукПоСтранице        = 0;
	ИтогоМассаБруттоПоСтранице = 0;
	ИтогоМассаНеттоПоСтранице  = 0;
	ИтогоСтоимостьПоСтранице   = 0;

	// инициализация итогов по документу
	ИтогоМест        = 0;
	ИтогоШтук        = 0;
	ИтогоМассаБрутто = 0;
	ИтогоМассаНетто  = 0;
	ИтогоСтоимость   = 0;
	Ном              = 0;

	// Выводим многострочную часть докмента
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;
		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");

			ОбластьИтоговПоСтранице.Параметры.ИтогоМестПоСтранице        = ИтогоМестПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогоШтукПоСтранице        = ИтогоШтукПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогоМассаБруттоПоСтранице = ИтогоМассаБруттоПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогоМассаНеттоПоСтранице  = ИтогоМассаНеттоПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогоСтоимостьПоСтранице   = ИтогоСтоимостьПоСтранице;

			ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

			// очистим итоги по странице
			ИтогоМестПоСтранице        = 0;
			ИтогоШтукПоСтранице        = 0;
			ИтогоМассаБруттоПоСтранице = 0;
			ИтогоМассаНеттоПоСтранице  = 0;
			ИтогоСтоимостьПоСтранице   = 0;

			НомерСтраницы = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Вывести(ОбластьМакета);

		// Обновим итоги по странице
		ИтогоМестПоСтранице        = ИтогоМестПоСтранице        + ВыборкаСтрокТовары.КоличествоМест;
		ИтогоШтукПоСтранице        = ИтогоШтукПоСтранице        + ВыборкаСтрокТовары.КоличествоШтук;
		ИтогоМассаБруттоПоСтранице = ИтогоМассаБруттоПоСтранице + 0;
		ИтогоМассаНеттоПоСтранице  = ИтогоМассаНеттоПоСтранице  + 0;
		ИтогоСтоимостьПоСтранице   = ИтогоСтоимостьПоСтранице   + ВыборкаСтрокТовары.Стоимость / Шапка.Кратность;

		// Обновим итогов по документу
		ИтогоМест        = ИтогоМест        + ВыборкаСтрокТовары.КоличествоМест;
		ИтогоШтук        = ИтогоШтук        + ВыборкаСтрокТовары.КоличествоШтук;
		ИтогоМассаБрутто = ИтогоМассаБрутто + 0;
		ИтогоМассаНетто  = ИтогоМассаНетто  + 0;
		ИтогоСтоимость   = ИтогоСтоимость   + ВыборкаСтрокТовары.Стоимость / Шапка.Кратность;

	КонецЦикла;

	// Выводим итоги по последней странице
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
	ОбластьИтоговПоСтранице.Параметры.ИтогоМестПоСтранице        = ИтогоМестПоСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогоШтукПоСтранице        = ИтогоШтукПоСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогоМассаБруттоПоСтранице = ИтогоМассаБруттоПоСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогоМассаНеттоПоСтранице  = ИтогоМассаНеттоПоСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогоСтоимостьПоСтранице   = ИтогоСтоимостьПоСтранице;
	ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

	// Выводим итоги по документу в общем
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогоМест        = ИтогоМест;
	ОбластьМакета.Параметры.ИтогоШтук        = ИтогоШтук;
	ОбластьМакета.Параметры.ИтогоМассаБрутто = ИтогоМассаБрутто;
	ОбластьМакета.Параметры.ИтогоМассаНетто  = ИтогоМассаНетто;
	ОбластьМакета.Параметры.ИтогоСтоимость   = ИтогоСтоимость;
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	// Зададим параметры макета
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	Возврат ТабДокумент;

КонецФункции // ПечатьТОРГ4()

// Функция формирует табличный документ унифицированной формы М-4
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме М-4 (приходный ордер).
//
Функция ПечатьМ4()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Номер КАК Номер,
	|	Дата  КАК ДатаСоставления,
	|	НомерВходящегоДокумента КАК НомерСопроводительногоДокумента,
	|	Организация,
	|	Организация             КАК ЮрФизЛицо,
	|	Склад                   КАК МестоПриемки,
	|	Склад.Представление     КАК СкладНаименование,
	|	Подразделение,
	|	Подразделение           КАК ПредставлениеПодразделения,
	|	Контрагент.Код          КАК ПоставщикКод,
	|	Контрагент              КАК Поставщик,
	|	ВалютаДокумента,
	|	КурсВзаиморасчетов      КАК Курс,
	|	КратностьВзаиморасчетов КАК Кратность,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросПоТоварам.УстановитьПараметр("Курс",            ЭтотОбъект.КурсВзаиморасчетов);
	ЗапросПоТоварам.УстановитьПараметр("Кратность",       ЭтотОбъект.КратностьВзаиморасчетов);
	ЗапросПоТоварам.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура.Код                КАК ТоварКод,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмеренияНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ВложенныйЗапрос.СтавкаНДС,
	|	ВложенныйЗапрос.КоличествоПринято,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Стоимость,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Серия,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки
	|
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		СтавкаНДС,
	|		СУММА(Количество)                            КАК КоличествоПринято,
	|		СУММА(Цена     * &Курс / &Кратность)         КАК Цена,
	|		СУММА(Сумма    * &Курс / &Кратность)         КАК Стоимость,
	|		СУММА(СуммаНДС * &Курс / &Кратность)         КАК СуммаНДС,
	|		ХарактеристикаНоменклатуры                   КАК Характеристика,
	|		СерияНоменклатуры                            КАК Серия,
	|		МИНИМУМ(ПоступлениеТоваровУслуг.НомерСтроки) КАК НомерСтроки
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку.Товары КАК ПоступлениеТоваровУслуг
	|	ГДЕ
	|		ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО 
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		СтавкаНДС,
	|		ХарактеристикаНоменклатуры,
	|		СерияНоменклатуры
	|	) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО НомерСтроки ВОЗР
	|
	|";

	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	Макет = ПолучитьОбщийМакет("М4");

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_М4";

	// Выводим общие реквизиты шапки
	СведенияОПокупателе = СведенияОЮрФизЛице(Шапка.ЮрФизЛицо, Шапка.ДатаСоставления);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ОписаниеОрганизации(СведенияОПокупателе);
	ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакета.Параметры.НомерДокумента           = ПолучитьНомерНаПечать(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим заголовок докмента
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокДокумента");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ДатаСоставления = Шапка.ДатаСоставления;
	ПредставлениеКонтрагента = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.ДатаСоставления), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПоставщикНаименование = ПредставлениеКонтрагента;
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	СтрокНаСтранице = 24;
	СтрокШапки      = 9;
	СтрокПодвала    = 3;
	НомерСтраницы   = 1;

	КоличествоСтрок = ВыборкаСтрокТовары.Количество();
	Если КоличествоСтрок = 1 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// Инициализация итогов в документе
	ИтогоКоличествоПринято = 0;
	ИтогоСуммаБезНДС = 0;
	ИтогоСуммаНДС    = 0;
	ИтогоВсегоСНДС   = 0;
	Ном              = 0;

	// Выводим многострочную часть докмента
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;
		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			НомерСтраницы	= НомерСтраницы + 1;
			ПодвалСтрок 	= Макет.ПолучитьОбласть("ПодвалСтрок");
			ТабДокумент.Вывести(ПодвалСтрок);
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);

		Кратность = ?(Шапка.Кратность = 0, 1, Шапка.Кратность);
		ВсегоСНДС = (ВыборкаСтрокТовары.Стоимость
			+ ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрокТовары.СуммаНДС));

		КоличествоПринято = ВыборкаСтрокТовары.КоличествоПринято;
		СуммаНДС          = ВыборкаСтрокТовары.СуммаНДС / Шапка.Кратность;
		Цена              = (ВсегоСНДС - СуммаНДС) / КоличествоПринято;

		ОбластьМакета.Параметры.КоличествоПринято = КоличествоПринято;
		ОбластьМакета.Параметры.ВсегоСНДС         = ВсегоСНДС;
		ОбластьМакета.Параметры.СуммаБезНДС       = ВсегоСНДС - СуммаНДС;
		ОбластьМакета.Параметры.СуммаНДС          = СуммаНДС;
		ОбластьМакета.Параметры.Цена              = Цена;
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ПредставлениеСерий(ВыборкаСтрокТовары);

		ТабДокумент.Вывести(ОбластьМакета);

		ИтогоКоличествоПринято = ИтогоКоличествоПринято + КоличествоПринято;
		ИтогоСуммаБезНДС       = ИтогоСуммаБезНДС       + ВсегоСНДС - СуммаНДС;
		ИтогоСуммаНДС          = ИтогоСуммаНДС          + СуммаНДС;
		ИтогоВсегоСНДС         = ИтогоВсегоСНДС         + ВсегоСНДС;

	КонецЦикла;

	// Выводим итоги по документу
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");

	ОбластьМакета.Параметры.ИтогоКоличествоПринято = ИтогоКоличествоПринято;
	ОбластьМакета.Параметры.ИтогоСуммаБезНДС = ИтогоСуммаБезНДС;
	ОбластьМакета.Параметры.ИтогоСуммаНДС    = ИтогоСуммаНДС;
	ОбластьМакета.Параметры.ИтогоВсегоСНДС   = ИтогоВсегоСНДС;
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим итоги по документу
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 0;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	Возврат ТабДокумент;

КонецФункции // ПечатьМ4()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Накладная" тогда

		// Управленческая печатная форма документа
		ТабДокумент = ПечатьПоступлениеТоваров();
	ИначеЕсли ИмяМакета = "НакладнаяСНаценкой" тогда

		// Управленческая печатная форма документа с наценкой
		ТабДокумент = ПечатьПоступлениеТоваровСНаценкой();
	ИначеЕсли ИмяМакета = "ТОРГ12" тогда

		// Унифицированная форма ТОРГ-12 (за поставщика)
		ТабДокумент = ПечатьТОРГ12ЗаПоставщика();
	ИначеЕсли ИмяМакета = "ТОРГ4" тогда

		// Унифицированная форма ТОРГ-4 (акт приемки товара без счета поставщика)
		ТабДокумент = ПечатьТОРГ4();
	ИначеЕсли ИмяМакета = "М4" тогда

		// Унифицированная форма М-4 (приходный ордер)
		ТабДокумент = ПечатьМ4();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();
		
	КонецЕсли;

	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;

	СписокМакетов.Добавить("НакладнаяСНаценкой", "Приходная накладная с наценкой ");
	СписокМакетов.Добавить("ТОРГ12", "ТОРГ-12 (Товарная накладная за поставщика)");
	СписокМакетов.Добавить("ТОРГ4", "ТОРГ-4 (Акт о приемке товара без счета поставщика)");
	СписокМакетов.Добавить("М4", "М-4 (Приходный ордер)");
	СписокМакетов.Добавить("Накладная", "Приходная накладная");

	ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

#КонецЕсли

// Очищает ненужные строки табличных частей
//
Процедура ОчиститьНенужныеТабличныеЧасти() Экспорт

	// Очистить табличную часть "Услуги".
	Если Услуги.Количество() > 0 Тогда
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку.ВнутреннееПеремещение Тогда
			Услуги.Очистить();
		ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			Услуги.Очистить();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОчиститьНенужныеТабличныеЧасти()

// Процедура выполняет копирование табличной части заказа поставщику в документ.
//
Процедура СкопироватьТовары() Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Сделка", Сделка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР КОГДА СчетНаОплатуТовары.Ссылка.ВалютаДокумента = СчетНаОплатуТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуТовары.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуТовары.Ссылка.ВалютаДокумента = СчетНаОплатуТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуТовары.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	СчетНаОплатуТовары.Ссылка.ВалютаДокумента       КАК ВалютаДокумента,
	|	СчетНаОплатуТовары.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	СчетНаОплатуТовары.ЕдиницаИзмерения,
	|	СчетНаОплатуТовары.ЕдиницаИзмеренияМест,
	|	СчетНаОплатуТовары.Количество,
	|	СчетНаОплатуТовары.КоличествоМест,
	|	СчетНаОплатуТовары.Коэффициент,
	|	СчетНаОплатуТовары.Номенклатура,
	|	СчетНаОплатуТовары.СтавкаНДС,
	|	СчетНаОплатуТовары.Сумма,
	|	СчетНаОплатуТовары.ХарактеристикаНоменклатуры
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.Товары КАК СчетНаОплатуТовары
	|
	|ГДЕ
	|	СчетНаОплатуТовары.Ссылка = &Сделка";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура         = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество           = Выборка.Количество;
		СтрокаТабличнойЧасти.КоличествоМест       = Выборка.КоличествоМест;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения     = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = Выборка.ЕдиницаИзмеренияМест;
		СтрокаТабличнойЧасти.Коэффициент          = Выборка.Коэффициент;
		СтрокаТабличнойЧасти.СтавкаНДС            = Выборка.СтавкаНДС;

		СтрокаТабличнойЧасти.Сумма = ПересчитатьЦенуПриИзмененииФлаговНалогов(
										ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
												   Выборка.КурсДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
												   Выборка.КратностьДокумента, КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
										Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
										Выборка.СуммаВключаетНДС,
										УчитыватьНДС,
										СуммаВключаетНДС,
										ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, глТекущийПользователь);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		РассчитатьРозничнуюЦенуВСтрокеТабЧасти(ЭтотОбъект, СтрокаТабличнойЧасти, мВалютаРегламентированногоУчета);

	КонецЦикла;

КонецПроцедуры // СкопироватьТовары()

// Процедура выполняет копирование возвратной тары заказа поставщику в документ.
//
 Процедура СкопироватьВозвратнуюТару() Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Сделка", Сделка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ссылка.ВалютаДокумента                          КАК ВалютаДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуВозвратнаяТара.Ссылка.ВалютаДокумента = СчетНаОплатуВозвратнаяТара.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуВозвратнаяТара.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуВозвратнаяТара.Ссылка.ВалютаДокумента = СчетНаОплатуВозвратнаяТара.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуВозвратнаяТара.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	СчетНаОплатуВозвратнаяТара.Количество,
	|	СчетНаОплатуВозвратнаяТара.Номенклатура,
	|	СчетНаОплатуВозвратнаяТара.Сумма
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.ВозвратнаяТара КАК СчетНаОплатуВозвратнаяТара
	|
	|ГДЕ
	|	СчетНаОплатуВозвратнаяТара.Ссылка = &Сделка";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаВозвратнойТары = ВозвратнаяТара.Добавить();

		СтрокаВозвратнойТары.Номенклатура     = Выборка.Номенклатура;
		СтрокаВозвратнойТары.Количество       = Выборка.Количество;

		СтрокаВозвратнойТары.Сумма = ПересчитатьИзВалютыВВалюту(Выборка.Сумма, 
		                                        Выборка.ВалютаДокумента, 
		                                        ВалютаДокумента,
		                                        Выборка.КурсДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
												Выборка.КратностьДокумента, КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));

		ПриИзмененииВозвратнойТарыТабЧасти(СтрокаВозвратнойТары, ЭтотОбъект);
		ПриИзмененииСуммыВозвратнойТарыТабЧасти(СтрокаВозвратнойТары, ЭтотОбъект);

	КонецЦикла;

КонецПроцедуры // СкопироватьВозвратнуюТару()

// Процедура выполняет копирование табличной части заказа поставщику в документ.
//
Процедура СкопироватьУслуги() Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Сделка", Сделка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР КОГДА СчетНаОплатуУслуги.Ссылка.ВалютаДокумента = СчетНаОплатуУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуУслуги.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуУслуги.Ссылка.ВалютаДокумента = СчетНаОплатуУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуУслуги.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	СчетНаОплатуУслуги.Ссылка.ВалютаДокумента       КАК ВалютаДокумента,
	|	СчетНаОплатуУслуги.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	СчетНаОплатуУслуги.Содержание,
	|	СчетНаОплатуУслуги.Количество,
	|	СчетНаОплатуУслуги.Номенклатура,
	|	СчетНаОплатуУслуги.СтавкаНДС,
	|	СчетНаОплатуУслуги.Сумма
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.Услуги КАК СчетНаОплатуУслуги
	|
	|ГДЕ
	|	СчетНаОплатуУслуги.Ссылка = &Сделка";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Услуги.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
		СтрокаТабличнойЧасти.Содержание       = Выборка.Содержание;
		СтрокаТабличнойЧасти.СтавкаНДС        = Выборка.СтавкаНДС;

		СтрокаТабличнойЧасти.Сумма = ПересчитатьЦенуПриИзмененииФлаговНалогов(
										ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
												   Выборка.КурсДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
												   Выборка.КратностьДокумента, КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
										Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
										Выборка.СуммаВключаетНДС,
										УчитыватьНДС,
										СуммаВключаетНДС,
										ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, глТекущийПользователь);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	КонецЦикла;

КонецПроцедуры // СкопироватьУслуги()

// Процедура выполняет заполниение табличной части неполученными ТМЦ по заказу поставщику.
//
Процедура ЗаполнитьТоварыПоОстаткамУпр() Экспорт

	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить( "ТоварТара",    Перечисления.ТоварТара.Товар);
	ДопПараметры.Вставить( "СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный);
	
	ТабОстатков = ОстаткиТоваровПоЗаказуПоставщику( Сделка, ДоговорКонтрагента, '00010101000000', ДопПараметры);
	
	ДопПараметры.Очистить();;
	ДопПараметры.Вставить( "УчитыватьНДС",        УчитыватьНДС);
	ДопПараметры.Вставить( "СуммаВключаетНДС",    СуммаВключаетНДС);
	ДопПараметры.Вставить( "ЕстьЗаказПокупателя", Истина);
	
	ЗаполнитьТабЧастьТоварыПоЗаказу( ЭтотОбъект, Товары, ТабОстатков, ДопПараметры);
	
КонецПроцедуры // ЗаполнитьТоварыПоОстаткамУпр()

// Процедура выполняет заполниение возвратной тары неполученными ТМЦ по заказу поставщику.
//
Процедура ЗаполнитьВозвратнуюТаруПоОстаткамУпр() Экспорт

	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить( "ТоварТара",    Перечисления.ТоварТара.Тара);
	ДопПараметры.Вставить( "СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	
	ТабОстатков = ОстаткиТоваровПоЗаказуПоставщику( Сделка, ДоговорКонтрагента, '00010101000000', ДопПараметры);
	
	ДопПараметры.Очистить();;
	ДопПараметры.Вставить( "УчитыватьНДС",        УчитыватьНДС);
	ДопПараметры.Вставить( "СуммаВключаетНДС",    СуммаВключаетНДС);
	ДопПараметры.Вставить( "ЕстьЗаказПокупателя", Истина);
	
	ЗаполнитьТабЧастьТоварыПоЗаказу( ЭтотОбъект, ВозвратнаяТара, ТабОстатков, ДопПараметры);

КонецПроцедуры // ЗаполнитьВозвратнуюТаруПоОстаткамУпр()

// Заполняет табличную часть документа (Товары или ВозвратнаяТара) по документу
// "Перемещение товаров". Использует данные регистра "ТоварыКПеремещениюВНеавтоматизированнуюТорговуюТочку"
Процедура ЗаполнитьТабличнуюЧастьПоПеремещению(ТабличнаяЧасть) Экспорт

	Запрос = Новый Запрос;

	Если ТабличнаяЧасть = Товары Тогда
		Запрос.УстановитьПараметр("ТоварТара", Перечисления.ТоварТара.Товар);
	Иначе
		Запрос.УстановитьПараметр("ТоварТара", Перечисления.ТоварТара.Тара);
	КонецЕсли;
	Запрос.УстановитьПараметр("ДокументПеремещения", ДокументПеремещения);

	Запрос.Текст = "ВЫБРАТЬ
	|	ТоварыКПеремещниюВНТТОстатки.Номенклатура,
	|	ТоварыКПеремещниюВНТТОстатки.ХарактеристикаНоменклатуры,
	|	ТоварыКПеремещниюВНТТОстатки.СерияНоменклатуры,
	|	ТоварыКПеремещниюВНТТОстатки.ЦенаВРознице,
	|	ТоварыКПеремещниюВНТТОстатки.КоличествоОстаток,
	|	ТоварыКПеремещниюВНТТОстатки.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаХранения,
	|	ТоварыКПеремещниюВНТТОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения
	|ИЗ
	|	РегистрНакопления.ТоварыКПеремещениюВНеавтоматизированныеТорговыеТочки.Остатки(, ДокументПеремещения = &ДокументПеремещения 
	|                                                   И ТоварТара = &ТоварТара) КАК ТоварыКПеремещниюВНТТОстатки";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();

		СтрокаТабличнойЧасти.Номенклатура = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество   = Выборка.КоличествоОстаток;

		Если ТабличнаяЧасть = Товары Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаХранения;
			СтрокаТабличнойЧасти.Коэффициент                = Выборка.КоэффициентЕдиницыХранения;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
			СтрокаТабличнойЧасти.ЦенаВРознице               = Выборка.ЦенаВРознице;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура выполняет заполниение услуг неполученными услугами по заказу поставщику.
//
Процедура ЗаполнитьУслугиПоОстаткамУпр() Экспорт

	Запрос = Новый Запрос;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Товар",   Перечисления.ТоварТара.Товар);
	Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка",  Сделка);
	Запрос.УстановитьПараметр("ВозвратнаяТара", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.Номенклатура               КАК Номенклатура,
	|	Остатки.Номенклатура.СтавкаНДС     КАК СтавкаНДС,
	|	Остатки.Цена,
	|	Остатки.КоличествоОстаток          КАК КоличествоОстатокПоЗаказу
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ДоговорКонтрагента = &Договор И ЗаказПоставщику = &Сделка И СтатусПартии <> &ВозвратнаяТара) КАК Остатки
	|
	|ГДЕ Остатки.Номенклатура.Услуга
	|
	|";

	РезультатЗапроса = Запрос.Выполнить();
	
	ЗапросСодержаний = Новый Запрос;
	ЗапросСодержаний.УстановитьПараметр("Сделка",  Сделка);
	ЗапросСодержаний.Текст = "
	|ВЫБРАТЬ 
	|	Док.Номенклатура, 
	|	Док.Содержание 
	|ИЗ 
	|	Документ.ЗаказПоставщику.Услуги КАК Док
	|
	|ГДЕ Док.Ссылка = &Сделка";
	
	ТабСодержаний = ЗапросСодержаний.Выполнить().Выгрузить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаУслуг = Услуги.Добавить();
		СтрокаУслуг.Номенклатура = Выборка.Номенклатура;
		СтрокаУслуг.Количество   = Выборка.КоличествоОстатокПоЗаказу;
		СтрокаУслуг.СтавкаНДС    = Выборка.СтавкаНДС;
		
		СтрокаСодержания = ТабСодержаний.Найти(Выборка.Номенклатура, "Номенклатура");
		
		Если СтрокаСодержания <> Неопределено Тогда
			СтрокаУслуг.Содержание   = СтрокаСодержания.Содержание;
		КонецЕсли;

		СтрокаУслуг.Цена = ПересчитатьИзВалютыВВалюту(Выборка.Цена, 
										Сделка.ВалютаДокумента, ВалютаДокумента,
										КурсДокумента(Сделка, мВалютаРегламентированногоУчета), КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
										КратностьДокумента(Сделка, мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
										
		РассчитатьСуммуТабЧасти(СтрокаУслуг, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаУслуг, ЭтотОбъект);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьУслугиПоОстаткамУпр()

Процедура ЗаполнитьДокументПоОснованиюУпр(Основание)

	ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку.ОтПоставщика;

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику")
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда

		Сделка = Основание;
		Склад  = Основание.Склад;

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ОтражатьВУправленческомУчете = Истина;

		// Табличные части заполняем только если взаиморасчеты ведутся не по расчетным документам.
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
		 или ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		 ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда


			Если Сделка.Проведен Тогда

				// Заполним табличные части неполученными ТМЦ по заказу поставщику.
				ЗаполнитьТоварыПоОстаткамУпр();
				ЗаполнитьВозвратнуюТаруПоОстаткамУпр();
				ЗаполнитьУслугиПоОстаткамУпр();

			ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда

				СкопироватьТовары();
				СкопироватьВозвратнуюТару();
				СкопироватьУслуги();

			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ВидОперации                 = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку.ВнутреннееПеремещение;
		Склад                       = Основание.СкладПолучатель;
		ДокументПеремещения         = Основание;
		УчитыватьНДС                = Ложь;
		Контрагент                  = Неопределено;
		ДоговорКонтрагента          = Неопределено;
		Сделка                      = Неопределено;
		ОтражатьВБухгалтерскомУчете = Ложь;
		ОтражатьВНалоговомУчете     = Ложь;

		ВалютаДокумента         = мВалютаРегламентированногоУчета;
		КурсВзаиморасчетов      = КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
		КратностьВзаиморасчетов = КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

		Если Основание.Проведен Тогда
			ЗаполнитьТабличнуюЧастьПоПеремещению(Товары);
			ЗаполнитьТабличнуюЧастьПоПеремещению(ВозвратнаяТара);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// По виду операции определяет статус партии прихода товаров (не возвратная тара!)
//
// Параметры: 
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Значение перечисления "Статусы партии товаров".
//
Функция ОпределитьСтатусПартииПриходаУпр(СтруктураШапкиДокумента) 

	Статус = Перечисления.СтатусыПартийТоваров.ПустаяСсылка();

	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		Статус = Перечисления.СтатусыПартийТоваров.НаКомиссию;
	Иначе
		Статус = Перечисления.СтатусыПартийТоваров.Купленный; 
	КонецЕсли;
		
	Возврат Статус;

КонецФункции // ОпределитьСтатусПартииПриходаУпр()

// Заполняет в таблице движений по регитстру ПартииТоваровНаСкладах нестандартные поля.
//
// Параметры:
//  ТаблицаТЧ       - таблица значений, соответствующая табличной части документа
//  ТаблицаДвижений - таблица значений, соответствующая набору записей регистра,
//  СтатусПартии    - значение перечисления статусов партий. 
//
Процедура ЗаполнитьПоляПартииТоваровНаСкладахУпр(ТаблицаТЧ, ТаблицаДвижений, СтатусПартии, СтруктураШапкиДокумента)

	Для каждого СтрокаДвижений Из ТаблицаДвижений Цикл

		Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
			СтрокаДвижений.Склад             = Склад;
		Иначе
			СтрокаДвижений.Склад = Неопределено;
		КонецЕсли;

		Если Не мПорядокСписанияПартий.Упр = Перечисления.СпособыОценки.ПоСредней 
		 ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			СтрокаДвижений.ДокументОприходования = Ссылка;
		КонецЕсли;
		
		СтрокаДвижений.СтатусПартии          = СтатусПартии;

		// Заказ заполняем если его указали в документе и по договору ведется обособленный учет товаров по заказам.
		СтрокаТЧ = ТаблицаТЧ.Найти(СтрокаДвижений.НомерСтроки, "НомерСтроки");

	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоляПартииТоваровНаСкладах()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Создаем колонку "Стоимость" и копируем в нее колонку "Сумма"
	ТаблицаТоваров.Колонки.Добавить("Стоимость");
	ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("Сумма") , "Стоимость");
	
	ТаблицаТоваров.Колонки.Добавить("КоличествоМинус", ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС",     ПолучитьОписаниеТиповЧисла(15,2));

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.КоличествоМинус = - СтрокаТаблицы.Количество;
	КонецЦикла;

	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("ЦенаВВалютеЗаказа"  , ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"           , ПолучитьОписаниеТиповЧисла(15,2));

	ЕстьЦена = Не ТаблицаТоваров.Колонки.Найти("Цена") = Неопределено;
	
	// Надо расчитать стоимость без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.КоличествоМинус = - СтрокаТаблицы.Количество;
		СтоимостьСНДС  = СтрокаТаблицы.Стоимость + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Если СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий Тогда
			СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Иначе
			СтрокаТаблицы.Стоимость = СтоимостьСНДС;
		КонецЕсли;

		// Считаем, что поступление выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, ВалютаДокумента, 
			                                  СтруктураШапкиДокумента.ВалютаЗаказа,
			                                  КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
			                                  СтруктураШапкиДокумента.КурсЗаказа,
			                                  КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
			                                  СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;

		СтрокаТаблицы.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СтоимостьСНДС, ВалютаДокумента, 
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
		                                 КурсВзаиморасчетов, КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов);

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаУпр = ПересчитатьИзВалютыВВалюту(СтоимостьСНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.Стоимость = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.НДС = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		// Цена нужна для проведения по заказам поставщиков, поэтому ее необходимо пересчитать в валюту заказа
		Если ЕстьЦена И НЕ ЗначениеНеЗаполнено(СтруктураШапкиДокумента.Сделка) 
			И (ТипЗнч(СтруктураШапкиДокумента.Сделка) = Тип("ДокументСсылка.ЗаказПоставщику")
		       ИЛИ ТипЗнч(СтруктураШапкиДокумента.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")) Тогда
			СтруктураКурсаВалютыЗаказа = ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаЗаказа, Дата);
			СтрокаТаблицы.Цена = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаЗаказа,
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураКурсаВалютыЗаказа.Курс, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураКурсаВалютыЗаказа.Кратность);
		КонецЕсли;

	КонецЦикла;
	

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	// Переименуем колонку "Сумма" в "Стоимость" (как в регистрах).
	ТаблицаТары.Колонки.Сумма.Имя = "Стоимость";
	
	ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

Процедура ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента)

	ТаблицаТары.Колонки.Добавить("ЦенаВВалютеЗаказа"  , ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов", ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаТары.Колонки.Добавить("СуммаУпр"           , ПолучитьОписаниеТиповЧисла(15,2));

	// Надо расчитать сумму без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		// Счиатем, что поступление выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, ВалютаДокумента, 
			                                  СтруктураШапкиДокумента.ВалютаЗаказа,
			                                  КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
			                                  СтруктураШапкиДокумента.КурсЗаказа,
			                                  КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
			                                  СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;

		СтрокаТаблицы.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента, 
										 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
										 КурсВзаиморасчетов, КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов);
										 
		СтрокаТаблицы.СуммаУпр = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		// Суммы пересчитаем в валюту упр. учета. По таре считаем, что СуммаБезНДС = Сумма
		СтрокаТаблицы.Стоимость = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);


	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТарыУпр()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейШапкиУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	// Если установлен призник "Обновлять цены поставщиков при поступлении товаров",
	// то надо обязательно указывать тип цен
	Если РегистрироватьЦеныПоставщика И ОтражатьВУправленческомУчете 
	   И ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку.ОтПоставщика Тогда
		СтруктураОбязательныхПолей.Вставить("ТипЦен", "Для обновления цен поставщиков необходимо указывать тип цен!");
	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидОперации, Организация, 
	                             |ВалютаДокумента, КурсВзаиморасчетов,КратностьВзаиморасчетов");

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку.ОтПоставщика Тогда
		СтруктураОбязательныхПолей.Вставить("Контрагент");
		СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента");
	Иначе
		СтруктураОбязательныхПолей.Вставить("ДокументПеремещения");
	КонецЕсли;	
	
	Если Товары.Количество() + ВозвратнаяТара.Количество() > 0 Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");
	КонецЕсли;
	
	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
		СтруктураОбязательныхПолей.Вставить( "Сделка", 
			"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам (счетам)""! 
			|Заполните поле ""Заказ поставщику""!");
	ИначеЕсли СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		СтруктураОбязательныхПолей.Вставить( "Сделка", 
			"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам (счетам)""! 
			|Заполните поле ""Счет поставщика""!");
	КонецЕсли;

	ДополнитьСтруктуруОбязательныхПолейШапкиУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку.ВнутреннееПеремещение Тогда
		Если СтруктураШапкиДокумента.Склад <> СтруктураШапкиДокумента.СкладПолучатель Тогда
			ОшибкаПриПроведении("Склад документа должен соответствовать складу-получателю документа перемещения!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

	// Склад должен быть НТТ
	Если Не ЗначениеНеЗаполнено(СтруктураШапкиДокумента.Склад)
	   И СтруктураШапкиДокумента.ВидСклада <> Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			ОшибкаПриПроведении("Документ можно оформить только на склад вида ""Неавтоматизированная торговая точка""!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выполняет проверки,которые нужны только для упр. учета
Процедура ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)
	
КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)


КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку.ВнутреннееПеремещение Тогда
		СтруктураОбязательныхПолей.Вставить("Сумма");
	КонецЕсли;

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиУслугиУпр(СтруктураОбязательныхПолей)


КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  РезультатЗапросаПоУслугам - результат запроса, содержащий данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                     - флаг отказа в проведении.
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Услуги";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Количество, Номенклатура, Сумма, Содержание");

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиУслугиУпр(СтруктураОбязательныхПолей);
	КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь товаров быть не должно.
	ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)


КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ВозвратнаяТара";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = СформироватьСтруктуруОбязательныхПолейТара();
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку.ВнутреннееПеремещение Тогда
		СтруктураОбязательныхПолей.Удалить("Сумма");
	КонецЕсли;
	
	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	// Теперь позовем общую процедуру проверки заполнения.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара",СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

Процедура ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок, СтруктураШапкиДокумента)
	
		
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
	НаборДвижений = Движения.ТоварыОрганизаций;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	// Заполним таблицу движений.
	ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
	
	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
			Движения.ТоварыОрганизаций.ВыполнитьПриход();
		КонецЕсли;
		
КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизацийРегл()

// Проводит табличные части "Товары" и "Возвратная тара" по регистрам
//
// Параметры:
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ТоварыИТараПоРегистрамОстатковИПартийУпр(РежимПроведения, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ, Заголовок, СтруктураШапкиДокумента)

	// Определим код операции движений по регистру партий
	КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.Поступление;
	
	Если ОтражатьВУправленческомУчете Тогда

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыВНеавтоматизированныхТорговыхТочках.
		НаборДвижений = Движения.ТоварыВНеавтоматизированныхТорговыхТочках;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвиженийТоварыНаСкладах = НаборДвижений.Выгрузить();
		ТаблицаДвиженийТоварыНаСкладах.Очистить();
		ТаблицаДвижений = ТаблицаДвиженийТоварыНаСкладах.Скопировать();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Товар,"ТоварТара");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ТоварыВНеавтоматизированныхТорговыхТочках.ВыполнитьПриход();
		КонецЕсли;

		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку.ВнутреннееПеремещение Тогда

			НаборДвижений = Движения.ТоварыКПолучениюНаСклады;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвиженийТоварыКПолучению = НаборДвижений.Выгрузить();
			ТаблицаДвиженийТоварыКПолучению.Очистить();
			ТаблицаДвижений = ТаблицаДвиженийТоварыКПолучению.Скопировать();

			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый,                  "ДокументПолучения");
			ТаблицаДвижений.ЗаполнитьЗначения(Склад,                                       "ДокументПолучения");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			// Проверка осатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;
			
			Если Не Отказ Тогда
				Движения.ТоварыКПолучениюНаСклады.ВыполнитьПриход();
			КонецЕсли;
			
			НаборДвижений = Движения.ТоварыКПеремещениюВНеавтоматизированныеТорговыеТочки;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвиженийТоварыКПеремещению = НаборДвижений.Выгрузить();
			ТаблицаДвиженийТоварыКПеремещению.Очистить();
			ТаблицаДвижений = ТаблицаДвиженийТоварыКПеремещению.Скопировать();
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(ДокументПеремещения,                                       "ДокументПеремещения");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Товар,                "ТоварТара");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			// Проверка осатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;
			
			Если Не Отказ Тогда
				Движения.ТоварыКПеремещениюВНеавтоматизированныеТорговыеТочки.ВыполнитьРасход();
			КонецЕсли;

		КонецЕсли;
		
		Если НЕ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку.ВнутреннееПеремещение Тогда
			// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах.
			НаборДвижений = Движения.ПартииТоваровНаСкладах;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвиженийПартииТоваровНаСкладах = НаборДвижений.Выгрузить();
			ТаблицаДвиженийПартииТоваровНаСкладах.Очистить();
			ТаблицаДвижений = ТаблицаДвиженийПартииТоваровНаСкладах.Скопировать();
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
			
			// Недостающие поля.
			ЗаполнитьПоляПартииТоваровНаСкладахУпр(ТаблицаПоТоварам, ТаблицаДвижений, ОпределитьСтатусПартииПриходаУпр(СтруктураШапкиДокумента), СтруктураШапкиДокумента);
			
			// Код операции
			ТаблицаДвижений.ЗаполнитьЗначения(КодОперацииПартииТоваров, "КодОперации");
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.ПартииТоваровНаСкладах.ВыполнитьПриход();
			КонецЕсли;
		КонецЕсли;
		
		// ТАРА ПО РЕГИСТРУ ТоварыВНеавтоматизированныхТорговыхТочках.
		НаборДвижений = Движения.ТоварыВНеавтоматизированныхТорговыхТочках;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = ТаблицаДвиженийТоварыНаСкладах.Скопировать();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Тара,"ТоварТара");

		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ТоварыВНеавтоматизированныхТорговыхТочках.ВыполнитьПриход();
		КонецЕсли;

		// ТОВАРЫ ПО РЕГИСТРУ Закупки.
		
		НаборДвижений = Движения.Закупки;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвиженийЗакупки = НаборДвижений.Выгрузить();
		ТаблицаДвиженийЗакупки.Очистить();
		ТаблицаДвижений = ТаблицаДвиженийЗакупки.Скопировать();

		// Стоимость в регистре Закупки должна быть с НДС при любых настройках НеВключатьНДСВСтоимостьПартий.
		КопияТаблицыТоваров = ТаблицаПоТоварам.Скопировать();
		КопияТаблицыТоваров.ЗагрузитьКолонку(КопияТаблицыТоваров.ВыгрузитьКолонку("СуммаУпр"), "Стоимость");

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(КопияТаблицыТоваров, ТаблицаДвижений);
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,      "Подразделение");
		ТаблицаДвижений.ЗаполнитьЗначения(ОпределитьСтатусПартииПриходаУпр(СтруктураШапкиДокумента), "СтатусПартии");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,             "ДокументЗакупки");
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.Закупки.ВыполнитьДвижения();
		КонецЕсли;
		
		// УСЛУГИ ПО РЕГИСТРУ Закупки.
		
		НаборДвижений = Движения.Закупки;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвиженийЗакупки = НаборДвижений.Выгрузить();
		ТаблицаДвиженийЗакупки.Очистить();
		ТаблицаДвижений = ТаблицаДвиженийЗакупки.Скопировать();
		
		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаДвижений);
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(ОпределитьСтатусПартииПриходаУпр(СтруктураШапкиДокумента), "СтатусПартии");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,                 "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,                             "ДокументЗакупки");
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.Закупки.ВыполнитьДвижения();
		КонецЕсли;
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку.ВнутреннееПеремещение Тогда

			НаборДвижений = Движения.ТоварыКПолучениюНаСклады;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = ТаблицаДвиженийТоварыКПолучению.Скопировать();

			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый,                      "ДокументПолучения");
			ТаблицаДвижений.ЗаполнитьЗначения(Склад,                                           "ДокументПолучения");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"СтатусПартии");

			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			// Проверка осатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;
			
			Если Не Отказ Тогда
				Движения.ТоварыКПолучениюНаСклады.ВыполнитьПриход();
			КонецЕсли;

		КонецЕсли;

		// ТАРА ПО РЕГИСТРУ ПартииТоваровНаСкладах.
		Если НЕ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку.ВнутреннееПеремещение Тогда
			
			НаборДвижений = Движения.ПартииТоваровНаСкладах;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = ТаблицаДвиженийПартииТоваровНаСкладах.Скопировать();
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);
			
			// Недостающие поля.
			ЗаполнитьПоляПартииТоваровНаСкладахУпр(ТаблицаПоТаре, ТаблицаДвижений, 
			Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, СтруктураШапкиДокумента);
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
			
			// Код операции
			ТаблицаДвижений.ЗаполнитьЗначения(КодОперацииПартииТоваров, "КодОперации");
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.ПартииТоваровНаСкладах.ВыполнитьПриход();
			КонецЕсли;
		КонецЕсли;

	КонецЕсли; // ОтражатьВУправленческомУчете

КонецПроцедуры // ТоварыИТараПоРегистрамОстатковИПартийУпр()

// По результатам запросов формирует движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ Услуги,
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, 
	                          Отказ, Заголовок);

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, 
	                          Отказ, Заголовок);

	ДвиженияПоРегиструВзаиморасчетыДляНДС(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);

	ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, 
	                          ТаблицаПоТаре, Отказ, Заголовок);

	ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре,
	                          Отказ, Заголовок, СтруктураШапкиДокумента);

	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, Отказ, Заголовок);
	
	
	// Проведение по партиям в случае перемещения
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку.ВнутреннееПеремещение Тогда
		
		УчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата);
		
		Если УчетнаяПолитика.СписыватьПартииПриПроведенииДокументов Тогда
			
			Движения.ПартииТоваровНаСкладах.Записать();
			
			ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
			
			Если ОтражатьВУправленческомУчете Тогда
				ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
				ЗаписьРегистрации.Период = Дата;
			КонецЕсли;
			
		Иначе
			
			// В неоперативном режиме границы последовательностей сдвигаются назад, если они позже документа.
			Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
				СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация, Истина, Ложь, Ложь)
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Формирует движения по регистрам для целей упр. учета.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ Услуги,
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, 
							Отказ, Заголовок);
	Если Не ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	// ПО РЕГИСТРУ ВзаиморасчетыСКонтрагентами.
	Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку.ВнутреннееПеремещение
	   И СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом 
	   И СуммаДокумента <> 0 Тогда
	
		НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		// Заполним таблицу движений.
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
		СтрокаДвижений.Сделка                = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
		СтрокаДвижений.СуммаВзаиморасчетов   = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
														СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		СтрокаДвижений.СуммаУпр   = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
														СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
														СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
														СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "", СтруктураШапкиДокумента, Отказ, Заголовок)
		КонецЕсли;
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
		КонецЕсли;

			
	//+++ 01.04.2019 ВЫКЛЮЧЕНО движение по РЕГИСТРУ "РасчетыСКонтрагентами"
 		//Проводим, только если не заполнен Заказ поставщику
		//Если ЗначениеНеЗаполнено(Сделка) ИЛИ
		//	 ТипЗнч(Сделка) <> Тип("ДокументСсылка.ЗаказПоставщику") Тогда

		//	 Если ОтражатьВУправленческомУчете И ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку.ОтПоставщика Тогда
		//		НаборДвижений = Движения.РасчетыСКонтрагентами;

		//		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		//		ТаблицаДвижений = НаборДвижений.Выгрузить();
		//		ТаблицаДвижений.Очистить();

		//		// Заполним таблицу движений.
		//		СтрокаДвижений = ТаблицаДвижений.Добавить();
		//		СтрокаДвижений.РасчетыВозврат        = Перечисления.РасчетыВозврат.Расчеты;
		//		СтрокаДвижений.ДоговорКонтрагента    = ДоговорКонтрагента;
		//		СтрокаДвижений.Сделка                = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,, Истина);
		//		СтрокаДвижений.СуммаВзаиморасчетов   = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
		//													СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		//													СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		//													СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

		//		СтрокаДвижений.СуммаУпр   = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
		//													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		//													СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		//													СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		//		НаборДвижений.мПериод            = Дата;
		//		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		//		Если Не Отказ Тогда
		//			Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
		//		КонецЕсли;
		//	КонецЕсли;
		//КонецЕсли;
		
	КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
	// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах.
	// ТАРА ПО РЕГИСТРУ ТоварыВНеавтоматизарованныхТорговыхТочках.
	// ТАРА ПО РЕГИСТРУ ПартииТоваровНаСкладах.

	ТоварыИТараПоРегистрамОстатковИПартийУпр(РежимПроведения, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ, Заголовок, СтруктураШапкиДокумента);

	// ТАРА ПО РЕГИСТРУ ТоварыПолученные.
	Если ОтражатьВУправленческомУчете Тогда
		
		НаборДвижений = Движения.ТоварыПолученные;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента),"Сделка");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара,"СтатусПолучения");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ТоварыПолученные.ВыполнитьПриход();
		КонецЕсли;

		// Товары по регистру ТоварыПолученные
		Если (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку.ОтПоставщика
			И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда

			НаборДвижений = Движения.ТоварыПолученные;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию,"СтатусПолучения");
			ТаблицаДвижений.ЗаполнитьЗначения(ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента),"Сделка");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ТоварыПолученные.ВыполнитьПриход();
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
		
	// Если в реквизите Сделка указан внешний заказ поставщику, то проводится 
	// по регистру ЗаказыПоставщикам
	Если НЕ ЗначениеНеЗаполнено(Сделка) 
	   И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда

		НаборДвижений = Движения.ЗаказыПоставщикам;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвиженийЗаказыПоставщикам = НаборДвижений.Выгрузить();
		ТаблицаДвиженийЗаказыПоставщикам.Очистить();
		ТаблицаДвижений = ТаблицаДвиженийЗаказыПоставщикам.Скопировать();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Сделка,"ЗаказПоставщику");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,"СтатусПартии");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ЗаказыПоставщикам.ВыполнитьРасход();
		КонецЕсли;

		ТаблицаДвижений.Очистить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Сделка,"ЗаказПоставщику");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"СтатусПартии");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ЗаказыПоставщикам.ВыполнитьРасход();
		КонецЕсли;
		
		ТаблицаДвижений.Очистить();
		
		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Сделка,"ЗаказПоставщику");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ЗаказыПоставщикам.ВыполнитьРасход();
		КонецЕсли;
			
	КонецЕсли;

	
	// Если установлен флаг РегистрироватьЦеныПоставщика, нужно зарегистрировать цены
	Если РегистрироватьЦеныПоставщика И ОтражатьВУправленческомУчете 
	   И ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку.ОтПоставщика Тогда


		НаборДвижений = Движения.ЦеныНоменклатурыКонтрагентов;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		ТаблицаПоТоварамЦены = ТаблицаПоТоварам.Скопировать();

		// Если цена не включает НДС, нужно сформировать цену с НДС
		// т.к. в регистр "ЦеныНоменклатурыКонтрагентов" записываем цены с НДС
		Если УчитыватьНДС И НЕ СуммаВключаетНДС Тогда
			СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;

			Для Каждого СтрокаТабличнойЧасти Из ТаблицаПоТоварамЦены Цикл
				СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена,
				                            СпособЗаполненияЦен, Ложь, Истина, Истина,
				                            ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС))
			КонецЦикла;
		КонецЕсли;

		// Удалим строки с одинаковым товаром и характеристикой.
		МассивСтрокДляУдаления = Новый Массив;
		СписокСвернутыхСтрок   = Новый СписокЗначений;

		Для Каждого СтрокаТаблицыПоТоварамЦены Из ТаблицаПоТоварамЦены Цикл
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура", СтрокаТаблицыПоТоварамЦены.Номенклатура);
			СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаТаблицыПоТоварамЦены.ХарактеристикаНоменклатуры);
			СтрокиПоТовару = ТаблицаПоТоварамЦены.НайтиСтроки(СтруктураОтбора);
			Если СтрокиПоТовару.Количество() > 0 Тогда //Есть несколько строк по товару.
				ПерваяСтрока = СтрокиПоТовару[0];
				Цена = 0;
				Для каждого СтрокаПоТовару Из СтрокиПоТовару Цикл
					Если СписокСвернутыхСтрок.НайтиПоЗначению(СтрокаПоТовару) = Неопределено Тогда
						СписокСвернутыхСтрок.Добавить(СтрокаПоТовару);
					Иначе
						Продолжить;
					КонецЕсли;
					Цена = Цена + СтрокаПоТовару.Цена/СтрокаПоТовару.Коэффициент;
					Если СтрокаПоТовару <> ПерваяСтрока Тогда
						МассивСтрокДляУдаления.Добавить(СтрокаПоТовару);
					КонецЕсли;
				КонецЦикла;
				Если Цена > 0 Тогда
					ПерваяСтрока.Цена = Цена / СтрокиПоТовару.Количество() * ПерваяСтрока.Коэффициент;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Для Каждого СтрокаДляУдаления Из МассивСтрокДляУдаления Цикл
			ТаблицаПоТоварамЦены.Удалить(СтрокаДляУдаления);
		КонецЦикла;

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамЦены, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(ТипЦен,"ТипЦен");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВалютаДокумента,"Валюта");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ЦеныНоменклатурыКонтрагентов.ВыполнитьДвижения();
		КонецЕсли;

	КонецЕсли;
	
	// Создание таблиц для списания резерва
	ТабЗаказыТовары = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТабЗаказыТовары.Количество() Цикл
		СтрокаТаблицы = ТабЗаказыТовары.Получить(Сч);
		Если ТипЗнч(СтрокаТаблицы.ЗаказПокупателя) = Тип("ДокументСсылка.ВнутреннийЗаказ")
		   И Не ЗначениеНеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) // Считается исполнением внутреннего заказа.
		   И СтрокаТаблицы.ЗаказПокупателя.Заказчик = Ссылка.Склад Тогда
			Сч = Сч + 1;
		Иначе
			ТабЗаказыТовары.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	ТабЗаказыТара = ТаблицаПоТаре.Скопировать();
	Сч = 0;
	Пока Сч < ТабЗаказыТара.Количество() Цикл
		СтрокаТаблицы = ТабЗаказыТара.Получить(Сч);
		Если ТипЗнч(СтрокаТаблицы.ЗаказПокупателя) = Тип("ДокументСсылка.ВнутреннийЗаказ")
		 И Не ЗначениеНеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) // Считается исполнением внутреннего заказа.
		   И СтрокаТаблицы.ЗаказПокупателя.Заказчик = Ссылка.Склад Тогда
			Сч = Сч + 1;
		Иначе
			ТабЗаказыТара.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	// Движения по размещению заказов
	Если ТабЗаказыТовары.Количество() > 0 И НЕ ЗначениеНеЗаполнено(Сделка)
	   И (ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику")) Тогда
			
		// По регистру РазмещениеЗаказовПокупателей
		НаборДвижений = Движения.РазмещениеЗаказовПокупателей;

		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТабЗаказыТовары, ТаблицаДвижений);

		ТаблицаДвижений.ЗаполнитьЗначения( Сделка,                       "ЗаказПоставщику");
		ТаблицаДвижений.ЗаполнитьЗначения( Перечисления.ТоварТара.Товар, "ТоварТара");

		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		НаборДвижений.мПериод            = Дата;
		
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			Движения.РазмещениеЗаказовПокупателей.КонтрольОстатков( ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
		Если Не Отказ Тогда
			Движения.РазмещениеЗаказовПокупателей.ВыполнитьРасход();
		КонецЕсли;

	КонецЕсли;

	Если ТабЗаказыТара.Количество() > 0	И НЕ ЗначениеНеЗаполнено(Сделка)
	  И (ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику")) Тогда

		// По регистру РазмещениеЗаказовПокупателей
		НаборДвижений = Движения.РазмещениеЗаказовПокупателей;

		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТабЗаказыТара, ТаблицаДвижений);

		ТаблицаДвижений.ЗаполнитьЗначения( Сделка,                      "ЗаказПоставщику");
		ТаблицаДвижений.ЗаполнитьЗначения( Перечисления.ТоварТара.Тара, "ТоварТара");

		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		НаборДвижений.мПериод            = Дата;

		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			Движения.РазмещениеЗаказовПокупателей.КонтрольОстатков( ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
		Если Не Отказ Тогда
			Движения.РазмещениеЗаказовПокупателей.ВыполнитьРасход();
		КонецЕсли;

	КонецЕсли;
	
	// Погашение внутренних заказов в случае Заказчик = Склад поступления
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить( "СтатусПартии",      Перечисления.СтатусыПартийТоваров.Купленный);
	ДопПараметры.Вставить( "РежимПроведения",   РежимПроведения);
	ДопПараметры.Вставить( "ИмяРеквизитаЗаказ", "ЗаказПокупателя");
	ДопПараметры.Вставить( "ЗаказВШапке",       Ложь);
	ДопПараметры.Вставить( "ИмяТабЧасти",           "Товары");
	
	Если ТабЗаказыТовары.Количество() > 0 Тогда
		ДвижениеПоВнутреннимЗаказам( ЭтотОбъект, ТабЗаказыТовары, ДопПараметры, Отказ, Заголовок);
	КонецЕсли;
	
	ДопПараметры.Вставить( "СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	ДопПараметры.Вставить( "ИмяТабЧасти",  "ВозвратнаяТара");
	
	Если ТабЗаказыТара.Количество() > 0 Тогда
		ДвижениеПоВнутреннимЗаказам( ЭтотОбъект, ТабЗаказыТара, ДопПараметры, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Формирует движения по регистру взаиморасчетов для НДС
//
// Параметры:
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегиструВзаиморасчетыДляНДС(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)

	// По регистрам взаиморасчетов для НДС проводятся документы, у которых
	// установлен флаг БУ и которые оформлены по договору с поставщиком.
	Если НЕ ОтражатьВБухгалтерскомУчете 
	 Или СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
		Возврат;
	КонецЕсли;

	// По регистру ВзаиморасчетыСПокупателямиДляНДС.
	НаборДвижений = Движения.ВзаиморасчетыСПоставщикамиДляНДС;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	СтрокаДвижений = ТаблицаДвижений.Добавить();

	СтрокаДвижений.Организация        = СтруктураШапкиДокумента.Организация;
	СтрокаДвижений.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
	СтрокаДвижений.Сделка             = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);;

	СтрокаДвижений.Сумма   = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
	                                                    мВалютаРегламентированногоУчета,
	                                                    КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
	                                                    1,
	                                                    КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
	                                                    1);

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ВзаиморасчетыСПоставщикамиДляНДС.ВыполнитьПриход();
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструВзаиморасчетыДляНДС()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрамРегл
// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки" и "НДСПродажи"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, Отказ, Заголовок)
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку.ВнутреннееПеремещение 
	 ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		// Внутреннее перемещение и поступление комиссионных товаров не отражается в подсистеме учета НДС
		Возврат;
	КонецЕсли;
	
	ТаблицыДокумента = Новый Структура();
	ТаблицыДокумента.Вставить("ТаблицаПоТоварам",ТаблицаПоТоварам);
	ТаблицыДокумента.Вставить("ТаблицаПоУслугам",ТаблицаПоУслугам);
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра НДСПокупки.
	ТаблицаДвиженийПокупки = Движения.НДСПокупки.Выгрузить();
	ТаблицаДвиженийПокупки.Очистить();
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра НДСПартииТоваров.
	ТаблицаДвиженийПартии = Движения.НДСПартииТоваров.Выгрузить();
	ТаблицаДвиженийПартии.Очистить();
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра НДСКосвенныеРасходы.
	ТаблицаДвиженийКосвенных = Движения.НДСКосвенныеРасходы.Выгрузить();
	ТаблицаДвиженийКосвенных.Очистить();
	
	// Дополнительно реализуем механизм учета НДС в качестве налогового агента
	ТаблицаДвиженийПродажи = Движения.НДСПродажи.Выгрузить();
	ТаблицаДвиженийПродажи.Очистить();
				
	Для Каждого ТаблицаДокумента Из ТаблицыДокумента Цикл

		ИдТабЧасти = ТаблицаДокумента.Ключ;
		ТабЧасть   = ТаблицаДокумента.Значение;

		Если ТабЧасть.Количество()> 0 Тогда 

			СформироватьДвиженияПоРегиструНДСПокупки(СтруктураШапкиДокумента, ТабЧасть, ИдТабЧасти, ТаблицаДвиженийПокупки);

			Если ИдТабЧасти = "ТаблицаПоТоварам" Тогда
				СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, ТабЧасть, ИдТабЧасти, ТаблицаДвиженийПартии);
			КонецЕсли;	
				
			Если ИдТабЧасти = "ТаблицаПоУслугам" Тогда
				СформироватьДвиженияПоступленияПоРегиструНДСКосвенныхРасходов(СтруктураШапкиДокумента, ТабЧасть, ИдТабЧасти, ТаблицаДвиженийКосвенных);
			КонецЕсли;	
			
			Если СтруктураШапкиДокумента.УчетАгентскогоНДС Тогда
				СформироватьДвиженияПоРегиструНДСПродажи(СтруктураШапкиДокумента, ТабЧасть, ИдТабЧасти, ТаблицаДвиженийПродажи);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;
	
	Если ТаблицаДвиженийПокупки.Количество() > 0 Тогда
		Движения.НДСПокупки.мПериод          = Дата;
		Движения.НДСПокупки.мТаблицаДвижений = ТаблицаДвиженийПокупки;
		Движения.НДСПокупки.ДобавитьДвижение();
		Движения.НДСПокупки.Записать();
	КонецЕсли;
	
	Если ТаблицаДвиженийПартии.Количество() > 0 Тогда
		Движения.НДСПартииТоваров.мПериод            = Дата;
		Движения.НДСПартииТоваров.мТаблицаДвижений   = ТаблицаДвиженийПартии;
		Движения.НДСПартииТоваров.ВыполнитьПриход();
		Движения.НДСПартииТоваров.Записать();
	КонецЕсли;
	
	Если ТаблицаДвиженийКосвенных.Количество() > 0 Тогда
		Движения.НДСКосвенныеРасходы.мПериод          = Дата;
		Движения.НДСКосвенныеРасходы.мТаблицаДвижений = ТаблицаДвиженийКосвенных;
		Движения.НДСКосвенныеРасходы.ДобавитьДвижение();
		Движения.НДСКосвенныеРасходы.Записать();
	КонецЕсли;
	
	Если ТаблицаДвиженийПродажи.Количество() > 0 Тогда
		Движения.НДСПродажи.мПериод          = Дата;
		Движения.НДСПродажи.мТаблицаДвижений = ТаблицаДвиженийПродажи;
		Движения.НДСПродажи.ДобавитьДвижение();
		Движения.НДСПродажи.Записать();
	КонецЕсли;
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()							  

Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, 
							  ТаблицаПоТаре, Отказ, Заголовок)
							  
	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары. (для списания партий товаров)
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку.ВнутреннееПеремещение Тогда
		
		// Товары
		НаборДвижений = Движения.СписанныеТовары;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
		
		// Недостающие поля.
		Инд = 0;
		Для каждого Строка Из ТаблицаДвижений Цикл
			
			Инд = Инд+1;
			Строка.НомерСтрокиДокумента = Инд;
			
		КонецЦикла;
		
		ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");
		
		ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
		ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
		ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
		
		// Документ передачи для списания по реализации
		ТаблицаДвижений.ЗаполнитьЗначения(ДокументПеремещения,"ОсновнойДокумент");
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.СписаниеПоОрдеру,"КодОперацииПартииТоваров");
		
		
		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВБухгалтерскомУчете,"ОтражатьВБухгалтерскомУчете");
		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВНалоговомУчете,"ОтражатьВНалоговомУчете");
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.СписанныеТовары.ВыполнитьДвижения();
		КонецЕсли;
		
		// ТАРА
		ТаблицаДвижений.Очистить();
		
		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);
		
		// Недостающие поля.
		Для каждого Строка Из ТаблицаДвижений Цикл
			
			Инд = Инд+1;
			Строка.НомерСтрокиДокумента = Инд;
			
		КонецЦикла;
		
		ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");
		
		ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
		ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
		ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
		
		// Документ передачи для списания по реализации
		ТаблицаДвижений.ЗаполнитьЗначения(ДокументПеремещения,"ОсновнойДокумент");
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.СписаниеПоОрдеру,"КодОперацииПартииТоваров");
		
		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВБухгалтерскомУчете,"ОтражатьВБухгалтерскомУчете");
		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВНалоговомУчете,"ОтражатьВНалоговомУчете");
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.СписанныеТовары.ВыполнитьДвижения();
		КонецЕсли;
		
	КонецЕсли;
							  
КонецПроцедуры // ДвиженияПоРегистрам()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке)

	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "ВалютаУправленческогоУчета"        , "ВалютаУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");

КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураПолей)


КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиУслугиУпр(СтруктураПолей)

	СтруктураПолей.Вставить("НоменклатурнаяГруппа",           "НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Цена",                           "Цена");

КонецПроцедуры

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок)

	мУчетнаяПолитика   = ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ);
	ТабУчетнаяПолитика = ПолучитьУчетнуюПолитику(Дата);

	мПорядокСписанияПартий = Новый Структура("Упр,Бух,Нал");

	Если ОтражатьВУправленческомУчете Тогда
		ПодготовитьПараметрыУчетнойПолитикиУпр(ТабУчетнаяПолитика, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура определяет параметры упр. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиУпр(ТабУчетнаяПолитика, Отказ, Заголовок)

	// Получим метод списания партий FIFO / LIFO / По средней
	СтрокаУчетнойПолитики = ТабУчетнаяПолитика[0];
	мПорядокСписанияПартий.Вставить("Упр", СтрокаУчетнойПолитики.СпособОценкиМПЗУпр);

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиУпр()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	ЗаполнитьДокументПоОснованиюУпр(Основание);

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	ОчиститьНенужныеТабличныеЧасти();

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку.ВнутреннееПеремещение Тогда
		Контрагент          = Неопределено;
		ДоговорКонтрагента  = Неопределено;
		Сделка              = Неопределено;
	КонецЕсли;

	// Проверка заполнения единицы измерения мест и количества мест
	ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = ПолучитьСуммуДокументаСНДС(ЭтотОбъект);

	СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 

КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	// Удаление записей регистрации из всех последовательностей
	Для Каждого НаборЗаписейРегистрацииВПоследовательности Из ПринадлежностьПоследовательностям Цикл
		НаборЗаписейРегистрацииВПоследовательности.Очистить();
		НаборЗаписейРегистрацииВПоследовательности.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = СформироватьДеревоПолейЗапросаПоШапке();
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов"                  , "ВедениеВзаиморасчетов");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов"                   , "ВалютаВзаиморасчетов");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"                            , "ДоговорОрганизация");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "РасчетыВУсловныхЕдиницах"               , "РасчетыВУсловныхЕдиницах");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора"                            , "ВидДоговора");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "УчетАгентскогоНДС"                      , "УчетАгентскогоНДС");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидАгентскогоДоговора"                  , "ВидАгентскогоДоговора");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"              , "ВидОперации"                            , "СделкаВидОперации");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "СписыватьПартииПриПроведенииДокументов" , "СписыватьПартииПриПроведенииДокументов");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиПартионныйУчетПоСкладам"           , "ВестиПартионныйУчетПоСкладам");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "НеВключатьНДСВСтоимостьПартий"          , "НеВключатьНДСВСтоимостьПартий");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"               , "ВидСклада"                              , "ВидСклада");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДокументПеремещения" , "СкладПолучатель"                        , "СкладПолучатель");

	// Если сделка - Заказ поставщику, то надо цену для проведения пересчитать в валюту заказа.
	Если Не ЗначениеНеЗаполнено(Сделка) 
	   И ДоговорКонтрагента.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам 
	   И ТипЗнч(Сделка) <> Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "ВалютаДокумента"                       , "ВалютаЗаказа");
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "КурсВзаиморасчетов"                    , "КурсВзаиморасчетовЗаказа");
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "КратностьВзаиморасчетов"               , "КратностьВзаиморасчетовЗаказа");
	КонецЕсли;

	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Если надо пересчитывать цену в валюту заказа. то в структуре должна быть заполнена валюта заказа.
	ВалютаЗаказа = Неопределено;
	НужнаЦенаЗаказа = Ложь;
	Если СтруктураШапкиДокумента.Свойство("ВалютаЗаказа", ВалютаЗаказа) Тогда
		НужнаЦенаЗаказа = Истина;
		Если ВалютаЗаказа = мВалютаРегламентированногоУчета Тогда
			КурсЗаказа      = 1;
			КратностьЗаказа = 1;
		Иначе //ВалютаЗаказа = ВалютаВзаиморасчетов
			КурсЗаказа      = СтруктураШапкиДокумента.КурсВзаиморасчетовЗаказа;
			КратностьЗаказа = СтруктураШапкиДокумента.КратностьВзаиморасчетовЗаказа;
		КонецЕсли;
		СтруктураШапкиДокумента.Вставить("КурсЗаказа"     , КурсЗаказа);
		СтруктураШапкиДокумента.Вставить("КратностьЗаказа", КратностьЗаказа);
	КонецЕсли;

	СтруктураШапкиДокумента.Вставить("НужнаЦенаЗаказа", НужнаЦенаЗаказа);

	// Здесь контролировать сумму задолженности, предоплату и число дней задолженности не надо
	СтруктураШапкиДокумента.Вставить("КонтролироватьСуммуЗадолженности", Ложь);
	СтруктураШапкиДокумента.Вставить("ПроцентПредоплаты", 0);
	СтруктураШапкиДокумента.Вставить("КонтролироватьЧислоДнейЗадолженности", Ложь);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = СформироватьСтруктуруПолейТовары();

	СтруктураПолей.Вставить("Услуга"                               , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                                , "Номенклатура.Набор");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"                     , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Цена"                                 , "Цена");
	СтруктураПолей.Вставить("ЦенаВРознице"                         , "ЦенаВРознице");
	СтруктураПолей.Вставить("Коэффициент"                          , "Коэффициент");
	СтруктураПолей.Вставить("Проект"                               , "Проект");
	СтруктураПолей.Вставить("ЗаказПокупателя"                      , "ЗаказПокупателя");

	РезультатЗапросаПоТоварам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = СформироватьСтруктуруПолейТара();
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	СтруктураПолей.Вставить("ЗаказПокупателя"                      , "ЗаказПокупателя");

	// Дополним полями, нужными для упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураПолей);
	
	РезультатЗапросаПоТаре = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Услуги".
	СтруктураПолей.Удалить("ЗаказПокупателя");
	
	СтруктураПолей.Вставить("Номенклатура"                      , "Номенклатура");
	СтруктураПолей.Вставить("Количество"                        , "Количество");
	СтруктураПолей.Вставить("Сумма"                             , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                         , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                               , "СуммаНДС");
	СтруктураПолей.Вставить("Содержание"                        , "Содержание");
	СтруктураПолей.Вставить("Услуга"                            , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                             , "Номенклатура.Набор");
	СтруктураПолей.Вставить("СтатьяЗатрат"                      , "СтатьяЗатрат");
	СтруктураПолей.Вставить("ХарактерЗатрат"                    , "СтатьяЗатрат.ХарактерЗатрат");
	СтруктураПолей.Вставить("ОтнесениеРасходовКДеятельностиЕНВД", "СтатьяЗатрат.ОтнесениеРасходовКДеятельностиЕНВД");
	СтруктураПолей.Вставить("Подразделение"                     , "Подразделение");
	СтруктураПолей.Вставить("Проект"                            , "Проект");

	// Дополним полями, нужными для упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиУслугиУпр(СтруктураПолей);

	РезультатЗапросаПоУслугам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);

	// Подготовим таблицы товаров для проведения.
	ТаблицаПоТоварам      = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	ТаблицаПоТаре         = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);
	ТаблицаПоУслугам      = ПодготовитьТаблицуТоваров(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ 
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);

	//Проверим на возможность проведения в БУ и НУ.
	Если ОтражатьВБухгалтерскомУчете 
	 Или ОтражатьВНалоговомУчете Тогда
		ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, ВалютаДокумента,
		                                     ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, мВалютаРегламентированногоУчета, 
		                                     Ложь, Отказ, Заголовок, "", СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                                     СтруктураШапкиДокумента.РасчетыВУсловныхЕдиницах);
	КонецЕсли;
	
	ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок);
	ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость, мВалютаРегламентированногоУчета);
	ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам, СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость, мВалютаРегламентированногоУчета);
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, 
							Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
