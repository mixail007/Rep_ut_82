Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой заказа или счета,
// разработанного методистами
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция ПечатьСчетаЗаказа(Тип)Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Организация КАК Организация,
	|	Контрагент КАК Получатель,
	|	Организация КАК Руководители,
	|	Организация КАК Поставщик,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ЗаказПокупателяСезонный КАК ЗаказПокупателя
	|
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ТекущийДокумент";

	Если  не ЗначениеНеЗаполнено(ОрганизацияДляПечати) Тогда // меняем все кроме реквизита Организация
		 Запрос.Текст=СтрЗаменить(Запрос.Текст,"Организация КАК","ОрганизацияДляПечати КАК");
	КонецЕсли;	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_СчетЗаказ";

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	ВложенныйЗапрос.Номенклатура.Код                КАК Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул            КАК Артикул,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ПроцентСкидкиНаценки 
	|	+ ВложенныйЗапрос.ПроцентАвтоматическихСкидок   КАК Скидка,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.Характеристика,
	|	NULL Как Серия,
	|	НомерСтроки,
	|	Метка
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		ЗаказПокупателя.Номенклатура,
	|		ЗаказПокупателя.ЕдиницаИзмерения,
	|		ЗаказПокупателя.ПроцентСкидкиНаценки        КАК ПроцентСкидкиНаценки,
	|		ЗаказПокупателя.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|		ЗаказПокупателя.Цена                        КАК Цена,
	|		СУММА(ЗаказПокупателя.Количество)           КАК Количество,
	|		СУММА(ЗаказПокупателя.Сумма     )           КАК Сумма,
	|		СУММА(ЗаказПокупателя.СуммаНДС  )           КАК СуммаНДС,
	|		ЗаказПокупателя.ХарактеристикаНоменклатуры  КАК Характеристика,
	|		МИНИМУМ(НомерСтроки)                        КАК НомерСтроки,
	|		0                                           КАК Метка
	|	ИЗ
	|		Документ.ЗаказПокупателяСезонный.Товары КАК ЗаказПокупателя
	|
	|	ГДЕ
	|		ЗаказПокупателя.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПокупателя.Номенклатура,
	|		ЗаказПокупателя.ЕдиницаИзмерения,
	|		ЗаказПокупателя.ПроцентСкидкиНаценки,
	|		ЗаказПокупателя.ПроцентАвтоматическихСкидок,
	|		ЗаказПокупателя.Цена,
	|		ЗаказПокупателя.ХарактеристикаНоменклатуры
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПокупателя.Содержание,
	|	ВЫБОР КОГДА ЗаказПокупателя.Содержание IS NULL ИЛИ ЗаказПокупателя.Содержание = """" ТОГДА
	|		ВЫРАЗИТЬ(ЗаказПокупателя.Номенклатура.НаименованиеПолное КАК Строка(1000))
	|	ИНАЧЕ
	|		ЗаказПокупателя.Содержание
	|	КОНЕЦ КАК Товар,
	|	ЗаказПокупателя.Номенклатура.Код     КАК Код,
	|	ЗаказПокупателя.Номенклатура.Артикул КАК Артикул,
	|	ЗаказПокупателя.Количество,
	|	ЗаказПокупателя.Номенклатура.ЕдиницаХраненияОстатков,
	|	ЗаказПокупателя.ПроцентСкидкиНаценки,
	|	ЗаказПокупателя.Цена,
	|	ЗаказПокупателя.Сумма,
	|	ЗаказПокупателя.СуммаНДС,
	|	NULL,
	|	NULL,
	|	НомерСтроки,
	|	1 КАК Метка
	|	
	|ИЗ
	|	Документ.ЗаказПокупателяСезонный.Услуги КАК ЗаказПокупателя
	|
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|";

	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	Макет = ПолучитьМакет("СчетЗаказ");

	// Выводим шапку накладной

	СведенияОПоставщике = СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата);
	Если Тип = "Счет" Тогда
		ОбластьМакета       = Макет.ПолучитьОбласть("ЗаголовокСчета");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ИНН = СведенияОПоставщике.ИНН;
		ОбластьМакета.Параметры.КПП = СведенияОПоставщике.КПП;
		Если ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			Банк       = СтруктурнаяЕдиница.Банк;
			БИК        = Банк.Код;
			КоррСчет   = Банк.КоррСчет;
			ГородБанка = Банк.Город;
			НомерСчета = СтруктурнаяЕдиница.НомерСчета;

			ОбластьМакета.Параметры.БИКБанкаПолучателя               = БИК;
			ОбластьМакета.Параметры.БанкПолучателя                   = Банк;
			ОбластьМакета.Параметры.БанкПолучателяПредставление      = СокрЛП(Банк) + " " + ГородБанка;
			ОбластьМакета.Параметры.СчетБанкаПолучателя              = КоррСчет;
			ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = КоррСчет;
			ОбластьМакета.Параметры.СчетПолучателяПредставление      = НомерСчета;
			ОбластьМакета.Параметры.СчетПолучателя                   = НомерСчета;
			ОбластьМакета.Параметры.ПредставлениеПоставщика          = СтруктурнаяЕдиница.ТекстКорреспондента;
		КонецЕсли;
		Если ЗначениеНеЗаполнено(ОбластьМакета.Параметры.ПредставлениеПоставщика) Тогда
			ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	Если Тип = "Счет" Тогда
		ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Счет на оплату");
	Иначе
		ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Заказ покупателя");
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	ТабДокумент.Вывести(ОбластьМакета);

	
	СведенияОПолучателе = СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	Если не ЗначениеНеЗаполнено(ОрганизацияДляПечати) И ОрганизацияДляПечати<>Организация Тогда
		ОбластьМакета.Параметры.ПредставлениеПолучателя = Строка(КонтактноеЛицо);
	Иначе
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	КОнецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	ЕстьСкидки = Ложь;
	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 
		Если Не ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
			ЕстьСкидки = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьСуммы);

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	Если НЕ ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("СуммаБезСкидки").ШиринаКолонки +
											Макет.Область("СуммаСкидки").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар       = СокрП(ВыборкаСтрокТовары.Товар) + ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьДанных);

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
			Скидка = 0;
		Иначе
			Скидка = ВыборкаСтрокТовары.Сумма  / (100 - ВыборкаСтрокТовары.Скидка) * ВыборкаСтрокТовары.Скидка;
		КонецЕсли;
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = ФорматСумм(ЗапросТовары.Итог("СуммаНДС"));
		ТабДокумент.Присоединить(ОбластьСуммы);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ЗапросТовары.Количество()
	+ ", на сумму " + ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	Если Тип = "Счет" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");

		Руководители = ОтветственныеЛицаОрганизации(Шапка.Руководители, Шапка.Дата,);
		Руководитель = Руководители.Руководитель;
		Бухгалтер    = Руководители.ГлавныйБухгалтер;

		ОбластьМакета.Параметры.ФИОРуководителя  = "/" + Руководитель  + "/";
		ОбластьМакета.Параметры.ФИОБухгалтера    = "/" + Бухгалтер     + "/";
		ОбластьМакета.Параметры.ФИООтветственный = "/" + Ответственный + "/";

	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	КонецЕсли; 
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаЗаказа()

// Функция формирует табличный документ с печатной формой заказа или счета,
// разработанного методистами (с учетом внесенных корректировок)
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция ПечатьСчетаЗаказаКорректировки(Тип)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Организация,
	|	Контрагент КАК Получатель,
	|	Организация КАК Руководители,
	|	Организация КАК Поставщик,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ЗаказПокупателяСезонный КАК ЗаказПокупателя
	|
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателяСезонный_СчетЗаказ";

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.Артикул            КАК Артикул,
	|	СУММА(ВложенныйЗапрос.Количество)               КАК Количество,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ПроцентСкидкиНаценки 
	|	+ ВложенныйЗапрос.ПроцентАвтоматическихСкидок   КАК Скидка,
	|	СУММА(ВложенныйЗапрос.СуммаНДС)                 КАК СуммаНДС,
	|	ВложенныйЗапрос.Цена                            КАК Цена,
	|	СУММА(ВложенныйЗапрос.Сумма)                    КАК Сумма,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры      КАК Характеристика,
	|	NULL                                            КАК Серия,
	|	ВЫБОР
	|		КОГДА НЕ ВложенныйЗапрос.Номенклатура.Услуга ТОГДА 0
	|		КОГДА ВложенныйЗапрос.Номенклатура.Услуга    ТОГДА 1
	|	КОНЕЦ КАК УСЛУГА
	|ИЗ
	|
	|(
	|ВЫБРАТЬ
	|		ЗаказПокупателя.Номенклатура                КАК Номенклатура,
	|		ЗаказПокупателя.ЕдиницаИзмерения            КАК ЕдиницаИзмерения,
	|		ЗаказПокупателя.Цена                        КАК Цена,
	|		ЗаказПокупателя.ПроцентСкидкиНаценки        КАК ПроцентСкидкиНаценки,
	|		ЗаказПокупателя.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|		ЗаказПокупателя.ХарактеристикаНоменклатуры  КАК ХарактеристикаНоменклатуры,
	|		ЗаказПокупателя.СуммаНДС                    КАК СуммаНДС,
	|		ЗаказПокупателя.Сумма                       КАК Сумма,
	|		ЗаказПокупателя.Количество                  КАК Количество
	|	ИЗ
	|		Документ.ЗаказПокупателяСезонный.Товары КАК ЗаказПокупателя
	|
	|	ГДЕ
	|		ЗаказПокупателя.Ссылка = &ТекущийДокумент
	|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|		КорректировкаЗаказаПокупателя.Номенклатура                КАК Номенклатура,
	//|		КорректировкаЗаказаПокупателя.ЕдиницаИзмерения            КАК ЕдиницаИзмерения,
	//|		КорректировкаЗаказаПокупателя.Цена                        КАК Цена,
	//|		КорректировкаЗаказаПокупателя.ПроцентСкидкиНаценки        КАК ПроцентСкидкиНаценки,
	//|		КорректировкаЗаказаПокупателя.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	//|		КорректировкаЗаказаПокупателя.ХарактеристикаНоменклатуры  КАК ХарактеристикаНоменклатуры,
	//|		КорректировкаЗаказаПокупателя.СуммаНДС                    КАК СуммаНДС,
	//|		КорректировкаЗаказаПокупателя.Сумма                       КАК Сумма,
	//|		КорректировкаЗаказаПокупателя.Количество                  КАК Количество
	//|	ИЗ
	//|		Документ.КорректировкаЗаказаПокупателя.Товары КАК КорректировкаЗаказаПокупателя
	//|
	//|	ГДЕ
	//|		КорректировкаЗаказаПокупателя.Ссылка.ЗаказПокупателя = &ТекущийДокумент
	//|		И КорректировкаЗаказаПокупателя.Ссылка.Проведен      = Истина
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		ЗаказПокупателя.Номенклатура                         КАК Номенклатура,
	|		ЗаказПокупателя.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|		ЗаказПокупателя.Цена                                 КАК Цена,
	|		ЗаказПокупателя.ПроцентСкидкиНаценки        		 КАК ПроцентСкидкиНаценки,
	|		0                                                    КАК ПроцентАвтоматическихСкидок,
	|		NULL                                                 КАК ХарактеристикаНоменклатуры,
	|		ЗаказПокупателя.СуммаНДС                             КАК СуммаНДС,
	|		ЗаказПокупателя.Сумма                                КАК Сумма,
	|		ЗаказПокупателя.Количество                           КАК Количество
	|	ИЗ
	|		Документ.ЗаказПокупателяСезонный.Услуги КАК ЗаказПокупателя
	|
	|	ГДЕ
	|		ЗаказПокупателя.Ссылка = &ТекущийДокумент
	|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|		КорректировкаЗаказаПокупателя.Номенклатура                         КАК Номенклатура,
	//|		КорректировкаЗаказаПокупателя.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	//|		КорректировкаЗаказаПокупателя.Цена                                 КАК Цена,
	//|		КорректировкаЗаказаПокупателя.ПроцентСкидкиНаценки                 КАК ПроцентСкидкиНаценки,
	//|		0                                                                  КАК ПроцентАвтоматическихСкидок,
	//|		NULL                                                               КАК ХарактеристикаНоменклатуры,
	//|		КорректировкаЗаказаПокупателя.СуммаНДС                             КАК СуммаНДС,
	//|		КорректировкаЗаказаПокупателя.Сумма                                КАК Сумма,
	//|		КорректировкаЗаказаПокупателя.Количество                           КАК Количество
	//|	ИЗ
	//|		Документ.КорректировкаЗаказаПокупателя.Услуги КАК КорректировкаЗаказаПокупателя
	//|
	//|	ГДЕ
	//|		КорректировкаЗаказаПокупателя.Ссылка.ЗаказПокупателя = &ТекущийДокумент
	//|		И КорректировкаЗаказаПокупателя.Ссылка.Проведен      = Истина
	|
	|) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ПроцентСкидкиНаценки,
	|	ВложенныйЗапрос.ПроцентАвтоматическихСкидок,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
	|	ВложенныйЗапрос.Цена
	|
	|УПОРЯДОЧИТЬ ПО
	|	Услуга,
	|	Номенклатура
	|";
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	Макет = ПолучитьМакет("СчетЗаказ");

	// Выводим шапку накладной

	СведенияОПоставщике = СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата);
	Если Тип = "Счет" Тогда
		ОбластьМакета       = Макет.ПолучитьОбласть("ЗаголовокСчета");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ИНН = СведенияОПоставщике.ИНН;
		ОбластьМакета.Параметры.КПП = СведенияОПоставщике.КПП;
		Если ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			Банк       = СтруктурнаяЕдиница.Банк;
			БИК        = Банк.Код;
			КоррСчет   = Банк.КоррСчет;
			НомерСчета = СтруктурнаяЕдиница.НомерСчета;

			ОбластьМакета.Параметры.БИКБанкаПолучателя               = БИК;
			ОбластьМакета.Параметры.БанкПолучателя                   = Банк;
			ОбластьМакета.Параметры.БанкПолучателяПредставление      = Банк;
			ОбластьМакета.Параметры.СчетБанкаПолучателя              = КоррСчет;
			ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = КоррСчет;
			ОбластьМакета.Параметры.СчетПолучателяПредставление      = НомерСчета;
			ОбластьМакета.Параметры.СчетПолучателя                   = НомерСчета;
			ОбластьМакета.Параметры.ПредставлениеПоставщика          = СтруктурнаяЕдиница.ТекстКорреспондента;
		КонецЕсли;
		Если ЗначениеНеЗаполнено(ОбластьМакета.Параметры.ПредставлениеПоставщика) Тогда
			ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	Если Тип = "Счет" Тогда
		ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Счет на оплату");
	Иначе
		ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Заказ покупателя");
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	ТабДокумент.Вывести(ОбластьМакета);

	СведенияОПолучателе = СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	ТабДокумент.Вывести(ОбластьМакета);

	ЕстьСкидки = Ложь;
	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 
		Если Не ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
			ЕстьСкидки = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьСуммы);

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	Если НЕ ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("СуммаБезСкидки").ШиринаКолонки +
											Макет.Область("СуммаСкидки").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 

		Если ВыборкаСтрокТовары.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				//ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Номенклатура.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар = ВыборкаСтрокТовары.Номенклатура.НаименованиеПолное + ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьДанных);

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
			Скидка = 0;
		Иначе
			Скидка = ВыборкаСтрокТовары.Сумма / (100 - ВыборкаСтрокТовары.Скидка) * ВыборкаСтрокТовары.Скидка;
		КонецЕсли;
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = ФорматСумм(ЗапросТовары.Итог("СуммаНДС"));
		ТабДокумент.Присоединить(ОбластьСуммы);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ЗапросТовары.Количество()
	+ ", на сумму " + ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	Если Тип = "Счет" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");

		Руководители = ОтветственныеЛицаОрганизации(Шапка.Руководители, Шапка.Дата,);
		Руководитель = Руководители.Руководитель;
		Бухгалтер    = Руководители.ГлавныйБухгалтер;

		ОбластьМакета.Параметры.ФИОРуководителя  = "/" + Руководитель  + "/";
		ОбластьМакета.Параметры.ФИОБухгалтера    = "/" + Бухгалтер     + "/";
		ОбластьМакета.Параметры.ФИООтветственный = "/" + Ответственный + "/";

	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	КонецЕсли; 
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаЗаказаКорректировки()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Заказ" Тогда
		ТабДокумент = ПечатьСчетаЗаказа(ИмяМакета);
	ИначеЕсли ИмяМакета = "ЗаказКорректировка" тогда
		ТабДокумент = ПечатьСчетаЗаказаКорректировки(ИмяМакета);
	ИначеЕсли ИмяМакета = "Счет" тогда
		ТабДокумент = ПечатьСчетаЗаказаКорректировки(ИмяМакета);
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();	
	
	КонецЕсли;

	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;

	СписокМакетов.Добавить("Заказ", "Заказ покупателя");
	СписокМакетов.Добавить("ЗаказКорректировка", "Заказ покупателя (с учетом корректировок)");
	СписокМакетов.Добавить("Счет", "Счет на оплату (с учетом корректировок)");

	ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Заполняет табличную часть при оперативном проведении, когда включены флаги авторазмещения и/или авторезервирования
//
// Параметры:
//  Отказ - отказ от дальнейшего проведения.
//
Процедура ЗаполнитьТабличныеЧастиПередПроведениемУпр(Отказ) Экспорт

	Если НЕ Авторезервирование И НЕ Авторазмещение Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапросСвободныйОстаток = Новый Запрос;
	ЗапросСвободныйОстаток.УстановитьПараметр("ПредпочтительноеРазмещение", Склад);
	ЗапросСвободныйОстаток.УстановитьПараметр("ДатаОтгрузки", ?(ЗначениеНеЗаполнено(ДатаОтгрузки), Дата, ДатаОтгрузки));
	ЗапросСвободныйОстаток.УстановитьПараметр("ДокументСсылка", Ссылка);

	КопияТовары = Товары.Выгрузить();
	КопияТовары.Свернуть("Номенклатура",);
	КопияВозвратнаяТара = ВозвратнаяТара.Выгрузить();
	КопияВозвратнаяТара.Свернуть("Номенклатура",);

	// Сформируем массив номенклатуры по товарам и таре для фильтров запросов.
	МассивНоменклатуры = КопияТовары.ВыгрузитьКолонку("Номенклатура");
	МассивНоменклатурыТара = КопияВозвратнаяТара.ВыгрузитьКолонку("Номенклатура");
	Для Каждого ЭлементТара Из МассивНоменклатурыТара Цикл
		МассивНоменклатуры.Добавить(ЭлементТара);
	КонецЦикла; 
	
	
	ТекстФильтраПоСкладам = "
	|(
	|	ВЫБРАТЬ
	|		ГруппыДоступности.Склад
	|	ИЗ
	|		РегистрСведений.СоставГруппДоступностиСкладов КАК ГруппыДоступности
	|	ГДЕ ГруппыДоступности.ГруппаДоступности = &ГруппаДоступностиСкладов)";
	
	ГруппаДоступностиСкладов = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ГруппаДоступностиСкладов");
	
	ЗапросСвободныйОстаток.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	ЗапросСвободныйОстаток.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный);
	ЗапросСвободныйОстаток.УстановитьПараметр("ГруппаДоступностиСкладов", ГруппаДоступностиСкладов);
	
	Если Авторезервирование Тогда
		ЗапросСвободныйОстаток.Текст = 
		"ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Номенклатура,
		|	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры,
		|	ТоварыНаСкладахОстатки.Склад                      КАК Размещение,
		|	NULL                                              КАК ТоварТара,
		|	NULL                                              КАК ДоговорКонтрагента,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток          КАК Количество,
		|	ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток  КАК КоличествоРазмещенное,
		|	ТоварыКПередачеСоСкладовОстатки.КоличествоОстаток КАК КоличествоКПередаче,
		|	1                                                 КАК СортировкаРазмещение,
		|	ВЫБОР
		|		КОГДА ТоварыНаСкладахОстатки.Склад = &ПредпочтительноеРазмещение ТОГДА
		|			0
		|		ИНАЧЕ
		|			1
		|	КОНЕЦ                                             КАК СортировкаСклад,
		|	NULL                                              КАК ДатаПоступления
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(, 
		|		Номенклатура В (&МассивНоменклатуры)
		|" + ?(Не ЗначениеНеЗаполнено(ГруппаДоступностиСкладов), "И (Склад В" + ТекстФильтраПоСкладам + "
		|       ИЛИ Склад = &ПредпочтительноеРазмещение)", "") + ") КАК ТоварыНаСкладахОстатки	
	
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|   РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, Номенклатура В (&МассивНоменклатуры) 
		|                                                     И ДокументРезерва <> &ДокументСсылка) КАК ТоварыВРезервеНаСкладахОстатки
		|ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварыВРезервеНаСкладахОстатки.Номенклатура
		|   И ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры = ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры
		|   И ТоварыНаСкладахОстатки.Склад = ТоварыВРезервеНаСкладахОстатки.Склад
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|   РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(, Номенклатура В (&МассивНоменклатуры)) КАК ТоварыКПередачеСоСкладовОстатки
		|ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварыКПередачеСоСкладовОстатки.Номенклатура
		|   И ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры = ТоварыКПередачеСоСкладовОстатки.ХарактеристикаНоменклатуры
		|   И ТоварыНаСкладахОстатки.Склад = ТоварыКПередачеСоСкладовОстатки.Склад
		|";

	КонецЕсли; 
	Если Авторезервирование И Авторазмещение Тогда
		ЗапросСвободныйОстаток.Текст = ЗапросСвободныйОстаток.Текст +
		"
		|ОБЪЕДИНИТЬ ВСЕ
		|";
	КонецЕсли;
	Если Авторазмещение Тогда
		ЗапросСвободныйОстаток.Текст = ЗапросСвободныйОстаток.Текст +
		"ВЫБРАТЬ
		|	ЗаказыПоставщикамОстатки.Номенклатура,
		|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры,
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику                 КАК Размещение,
		|	ОстаткиРазмещенных.ТоварТара,
		|	ЗаказыПоставщикамОстатки.ДоговорКонтрагента,
		|	ЗаказыПоставщикамОстатки.КоличествоОстаток               КАК Количество,
		|	ОстаткиРазмещенных.КоличествоОстаток                     КАК КоличествоРазмещенное,
		|	0                                                        КАК КоличествоКПередаче,
		|	0                                                        КАК СортировкаРазмещение,
		|	1                                                        КАК СортировкаСклад,
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления КАК ДатаПоступления
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, 
		|		ЗаказПоставщику.ДатаПоступления <= &ДатаОтгрузки
		|		И Номенклатура В (&МассивНоменклатуры) И ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ
		|       И СтатусПартии = &СтатусПартии) КАК ЗаказыПоставщикамОстатки
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|   РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(, Номенклатура В (&МассивНоменклатуры)
		|                                                          И ЗаказПокупателя <> &ДокументСсылка) КАК ОстаткиРазмещенных
		|ПО ЗаказыПоставщикамОстатки.ЗаказПоставщику = ОстаткиРазмещенных.ЗаказПоставщику
		|" + ?(Не ЗначениеНеЗаполнено(ГруппаДоступностиСкладов), "
		|ГДЕ ЗаказыПоставщикамОстатки.ЗаказПоставщику.Склад В " + ТекстФильтраПоСкладам+ "
		|       ИЛИ ЗаказыПоставщикамОстатки.ЗаказПоставщику.Склад = &ПредпочтительноеРазмещение", "");
	КонецЕсли;
	Если Авторезервирование И Авторазмещение Тогда
		ЗапросСвободныйОстаток.Текст = ЗапросСвободныйОстаток.Текст + "
		|УПОРЯДОЧИТЬ ПО                 // Определяет стратегию авторезервирования и авторазмещения
		|	СортировкаРазмещение,       // Сначала в заказах, потом на складе
		|	СортировкаСклад,            // Сначала предпочтительный склад, затем остальные
		|	ДатаПоступления УБЫВ        // В порядке убывания даты отгрузки	";
	ИначеЕсли Авторезервирование Тогда
		ЗапросСвободныйОстаток.Текст = ЗапросСвободныйОстаток.Текст + "
		|УПОРЯДОЧИТЬ ПО                 // Определяет стратегию авторезервирования и авторазмещения
		|	СортировкаСклад             // Сначала предпочтительный склад, затем остальные ";
	ИначеЕсли Авторазмещение Тогда
		ЗапросСвободныйОстаток.Текст = ЗапросСвободныйОстаток.Текст + "
		|УПОРЯДОЧИТЬ ПО                 // Определяет стратегию авторезервирования и авторазмещения
		|	ДатаПоступления УБЫВ        // В порядке убывания даты отгрузки	";
	КонецЕсли;

	Таблица = ЗапросСвободныйОстаток.Выполнить().Выгрузить();
	
	// Сначала вычислим по каждой строке количества, которые можно разместить
	Для Каждого Строка из Таблица Цикл
		Строка.Количество = Строка.Количество - ?(Строка.КоличествоРазмещенное = NULL, 0, Строка.КоличествоРазмещенное)
											  - ?(Строка.КоличествоКПередаче = NULL, 0, Строка.КоличествоКПередаче);
	КонецЦикла;
	
	Сч = 0;
	Пока Сч < Таблица.Количество() Цикл
		СтрокаТаблицы = Таблица.Получить(Сч);
		Если СтрокаТаблицы.Количество = 0 Тогда
			 Таблица.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;


	ПустаяХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();

	// Сначала вычтем из найденных остатков количество, размещение по которому явно указано
	// в табличных частях документа. Для этого последовательно обойдем табличные части 
	// Товары и Возвратная тара.
	Для Сч = 0 По 1 Цикл

		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары = Ложь;
		КонецЕсли;

		Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл

			// Сначала обходим все строки с размещением и если размещение не указано, пропускаем строку.
			Если ЗначениеНеЗаполнено(СтрокаТЧ.Размещение) Тогда
				Продолжить;
			КонецЕсли; 

			// Если не указано авторазмещение в заказах, то пропускаем все строки, в которых указан заказ.
			Если НЕ Авторазмещение И ТипЗнч(СтрокаТЧ.Размещение) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				Продолжить;
			КонецЕсли; 

			// Если не указано авторезервирование на складах, то пропускаем все строки, в которых указан склад.
			Если НЕ Авторезервирование И ТипЗнч(СтрокаТЧ.Размещение) = Тип("СправочникСсылка.Склады") Тогда
				Продолжить;
			КонецЕсли; 

			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
			СтруктураПоиска.Вставить("Размещение", СтрокаТЧ.Размещение);

			Если ЭтоТовары Тогда
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
			Иначе
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПустаяХарактеристикаНоменклатуры);
			КонецЕсли; 

			НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);

			// Погашаем количество в таблице. Пересчитаем количество в ТЧ в единицы хранения.
			КоличествоОсталосьПогасить = СтрокаТЧ.Количество * ?(ЭтоТовары, СтрокаТЧ.Коэффициент/СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 1);

			Для Каждого Строка Из НайденныеСтроки Цикл

				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;

				Если Строка.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;

				// Если это остаток из заказа, то дополнительно проверяем на тару/товар
				Если Строка.ТоварТара <> NULL Тогда
					Если ЭтоТовары И Строка.ТоварТара <> Перечисления.ТоварТара.Товар Тогда
						Продолжить;
					ИначеЕсли НЕ ЭтоТовары И Строка.ТоварТара <> Перечисления.ТоварТара.Тара Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли; 

				Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить/Строка.Количество;
				Иначе
					// Это ошибка: списываемое количество не должно быть больше остатка.
					// Такой документ не проведется оперативно.
					КоэффСписания = 1;
				КонецЕсли;

				СписанноеКоличество = Окр(Строка.Количество * КоэффСписания, 3, РежимОкругления.Окр15как20);

				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - СписанноеКоличество;

				Строка.Количество = Строка.Количество - СписанноеКоличество;

			КонецЦикла; 

			Если КоличествоОсталосьПогасить > 0 Тогда
				// Значит в документе неверно задано размещение. Заполнять не будем
				Возврат;
			КонецЕсли; 

		КонецЦикла;

	КонецЦикла;

	// Заполним массив, хранящий две таблицы значений, соответствующих авторазмещению товаров и тары
	МассивТаблицСтрок = Новый Массив(2);

	Для Сч = 0 По 1 Цикл

		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары = Ложь;
		КонецЕсли;

		ТаблицаТЧ = ТабличнаяЧасть.Выгрузить();
		ТаблицаТЧ.Колонки.Добавить("КоличествоЕдиницХранения");

		МассивТаблицСтрок[Сч] = ТабличнаяЧасть.Выгрузить();
		МассивТаблицСтрок[Сч].Очистить();
		МассивТаблицСтрок[Сч].Колонки.Добавить("ИндексИсходнойСтроки");

		Для Каждого СтрокаТЧ Из ТаблицаТЧ Цикл

			Если НЕ ЗначениеНеЗаполнено(СтрокаТЧ.Размещение) Тогда
				Продолжить;
			КонецЕсли; 

			// Пересчитаем в единицы хранения
			СтрокаТЧ.КоличествоЕдиницХранения = СтрокаТЧ.Количество * ?(ЭтоТовары, СтрокаТЧ.Коэффициент/СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 1);

			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);

			Если ЭтоТовары Тогда
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
			Иначе
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПустаяХарактеристикаНоменклатуры);
			КонецЕсли; 

			НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);

			// Погашаем количество в таблице
			КоличествоОсталосьПогасить               = СтрокаТЧ.КоличествоЕдиницХранения;
			СуммаОсталосьПогасить                    = СтрокаТЧ.Сумма;

			// Погашаем количество в таблице, записывая размещение
			Для Каждого Строка Из НайденныеСтроки Цикл

				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;

				Если Строка.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;

				// Если это остаток по заказу поставщику, отберем товар и тару
				Если ЭтоТовары И Строка.ТоварТара = Перечисления.ТоварТара.Тара  Тогда
					Продолжить;
				ИначеЕсли НЕ ЭтоТовары И Строка.ТоварТара = Перечисления.ТоварТара.Товар  Тогда
					Продолжить;
				КонецЕсли;

				Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить / Строка.Количество;
				Иначе
					КоэффСписания = 1;
				КонецЕсли;

				СписанноеКоличество = Окр(Строка.Количество * КоэффСписания, 3, РежимОкругления.Окр15как20);

				// Добавляем строку с данными о размещенном количестве
				НоваяСтрока = МассивТаблицСтрок[Сч].Добавить();
				НоваяСтрока.ИндексИсходнойСтроки = ТаблицаТЧ.Индекс(СтрокаТЧ);

				НоваяСтрока.Номенклатура = СтрокаТЧ.Номенклатура;
				Если ЭтоТовары Тогда
					НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
					НоваяСтрока.СтавкаНДС                  = СтрокаТЧ.СтавкаНДС;
					НоваяСтрока.ЕдиницаИзмерения           = СтрокаТЧ.ЕдиницаИзмерения;
					НоваяСтрока.Коэффициент                = СтрокаТЧ.Коэффициент;
					НоваяСтрока.ПроцентСкидкиНаценки       = СтрокаТЧ.ПроцентСкидкиНаценки;
					НоваяСтрока.ПроцентАвтоматическихСкидок= СтрокаТЧ.ПроцентАвтоматическихСкидок;
					НоваяСтрока.УсловиеАвтоматическойСкидки         = СтрокаТЧ.УсловиеАвтоматическойСкидки;
					НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = СтрокаТЧ.ЗначениеУсловияАвтоматическойСкидки;
				КонецЕсли;
				НоваяСтрока.Цена = СтрокаТЧ.Цена;

				НоваяСтрока.Размещение  = Строка.Размещение;
				НоваяСтрока.Количество  = СписанноеКоличество;
				
				КоэффПогашения = СписанноеКоличество / КоличествоОсталосьПогасить;

				НоваяСтрока.Сумма                    = Окр(СуммаОсталосьПогасить * КоэффПогашения, 2 ,1);

				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - СписанноеКоличество;
				СуммаОсталосьПогасить = СуммаОсталосьПогасить - НоваяСтрока.Сумма;

				// Уменьшаем количество в исходной строке
				СтрокаТЧ.Количество = СтрокаТЧ.КоличествоЕдиницХранения - СписанноеКоличество;

				// Уменьшаем количество в строке остатков
				Строка.Количество   = Строка.Количество - СписанноеКоличество;

			КонецЦикла;
			Если КоличествоОсталосьПогасить > 0 Тогда
				// Добавляем строку с данными о размещенном количестве
				НоваяСтрока = МассивТаблицСтрок[Сч].Добавить();
				НоваяСтрока.ИндексИсходнойСтроки = ТаблицаТЧ.Индекс(СтрокаТЧ);
				НоваяСтрока.Номенклатура         = СтрокаТЧ.Номенклатура;

				Если ЭтоТовары Тогда
					НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
					НоваяСтрока.СтавкаНДС                  = СтрокаТЧ.СтавкаНДС;
					НоваяСтрока.ЕдиницаИзмерения           = СтрокаТЧ.ЕдиницаИзмерения;
					НоваяСтрока.Коэффициент                = СтрокаТЧ.Коэффициент;
					НоваяСтрока.ПроцентСкидкиНаценки       = СтрокаТЧ.ПроцентСкидкиНаценки;
					НоваяСтрока.ПроцентАвтоматическихСкидок= СтрокаТЧ.ПроцентАвтоматическихСкидок;
					НоваяСтрока.УсловиеАвтоматическойСкидки         = СтрокаТЧ.УсловиеАвтоматическойСкидки;
					НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = СтрокаТЧ.ЗначениеУсловияАвтоматическойСкидки;
				КонецЕсли;
				НоваяСтрока.Цена = СтрокаТЧ.Цена;

				
				НоваяСтрока.Количество = КоличествоОсталосьПогасить;

				НоваяСтрока.Сумма                    = Окр(СуммаОсталосьПогасить, 2, 1);

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

	// Изменяем табличную часть
	Для Сч = 0 По 1 Цикл
		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары = Ложь;
		КонецЕсли;

		ТекИндексИсходнойСтроки = Неопределено;
		Для Каждого Строка Из МассивТаблицСтрок[Сч] Цикл

			// Если строка с таким индексом уже обрабатывалась, то добавляем новую
			Если ТекИндексИсходнойСтроки = Строка.ИндексИсходнойСтроки Тогда
				Стр = ТабличнаяЧасть[Строка.ИндексИсходнойСтроки];
				РедактируемаяСтрока = ТабличнаяЧасть.Добавить();
				РедактируемаяСтрока.Номенклатура = Стр.Номенклатура;
				Если ЭтоТовары Тогда
					РедактируемаяСтрока.ХарактеристикаНоменклатуры = Стр.ХарактеристикаНоменклатуры;
					РедактируемаяСтрока.СтавкаНДС = Стр.СтавкаНДС;
				КонецЕсли;
			Иначе
				РедактируемаяСтрока = ТабличнаяЧасть[Строка.ИндексИсходнойСтроки];
			КонецЕсли; 

			РедактируемаяСтрока.Размещение = Строка.Размещение;

			КоличествоВЕдиницахДокумента = Строка.Количество * ?(ЭтоТовары, Строка.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент/Строка.Коэффициент, 1);

			Если РедактируемаяСтрока.Количество = КоличествоВЕдиницахДокумента Тогда
				Продолжить;
			КонецЕсли;

			РедактируемаяСтрока.Количество  = КоличествоВЕдиницахДокумента;

			Если ЭтоТовары Тогда
				РедактируемаяСтрока.ЕдиницаИзмерения            = Строка.ЕдиницаИзмерения;
				РедактируемаяСтрока.Коэффициент                 = Строка.Коэффициент;
				РедактируемаяСтрока.СтавкаНДС                   = Строка.СтавкаНДС;
				РедактируемаяСтрока.ПроцентСкидкиНаценки        = Строка.ПроцентСкидкиНаценки;
				РедактируемаяСтрока.ПроцентАвтоматическихСкидок = Строка.ПроцентАвтоматическихСкидок;
				РедактируемаяСтрока.УсловиеАвтоматическойСкидки         = Строка.УсловиеАвтоматическойСкидки;
				РедактируемаяСтрока.ЗначениеУсловияАвтоматическойСкидки = Строка.ЗначениеУсловияАвтоматическойСкидки;
			КонецЕсли;

			Если ЭтоТовары Тогда

				РедактируемаяСтрока.Сумма                             = Строка.Сумма;
				РедактируемаяСтрока.Цена                              = Строка.Цена;

				РассчитатьСуммуНДСТабЧасти(РедактируемаяСтрока, ЭтотОбъект);
				
				// Рассчитываем плановую себестоимость.
				РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(РедактируемаяСтрока, ЭтотОбъект, мВалютаРегламентированногоУчета);

			Иначе
				РедактируемаяСтрока.Сумма = Строка.Сумма;
				РедактируемаяСтрока.Цена = ?(РедактируемаяСтрока.Количество <> 0, РедактируемаяСтрока.Сумма/РедактируемаяСтрока.Количество, 0);
			КонецЕсли;

			ТекИндексИсходнойСтроки = Строка.ИндексИсходнойСтроки;

		КонецЦикла; 
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТабличныеЧастиПередПроведениемУпр()

#КонецЕсли


// Заполнение документа по упр. основанию
//
Процедура ЗаполнитьДокументПоОснованиюУпр(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.Событие") Тогда
		КонтактноеЛицо    = Основание.КонтактноеЛицо;
		Контрагент        = Основание.Контрагент;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьДокументПоОснованиюУпр()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// По виду операции определяет статус партии товаров (не возвратная тара!)
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Значение перечисления "Статусы партии товаров".
//
Функция ОпределитьСтатусПартии() 

	Возврат Перечисления.СтатусыПартийТоваров.Купленный;

КонецФункции // ОпределитьСтатусПартииПрихода()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Вызываем отдельные процедуры подготовки для упр. учета
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Надо добавить колонки.
	ТаблицаТоваров.Колонки.Добавить( "СуммаБезНДС"        , ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов" , ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"            , ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СуммаНДС = СтрокаТаблицы.НДС;
		СтрокаТаблицы.НДС = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СуммаСНДС = СтрокаТаблицы.Сумма + ?(УчитыватьНДС И Не СуммаВключаетНДС, СуммаНДС, 0);

		СтрокаТаблицы.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СуммаСНДС, ВалютаДокумента, 
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 КурсВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 КратностьВзаиморасчетов);

		СтрокаТаблицы.СуммаУпр = ПересчитатьИзВалютыВВалюту(СуммаСНДС, ВалютаДокумента, 
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоУслугам - результат запроса по табличной части "Услуги",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента)

	ТаблицаУслуг = РезультатЗапросаПоУслугам.Выгрузить();

	// Надо добавить колонки "СуммаБезНДС".
	ТаблицаУслуг.Колонки.Добавить("СуммаБезНДС", ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаУслуг Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
	КонецЦикла;

	// Вызываем отдельные процедуры подготовки для упр. учета
	ПодготовитьТаблицуУслугУпр(ТаблицаУслуг, СтруктураШапкиДокумента);
	
	Возврат ТаблицаУслуг;

КонецФункции // ПодготовитьТаблицуУслуг()

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
Процедура ПодготовитьТаблицуУслугУпр(ТаблицаУслуг, СтруктураШапкиДокумента)

	// Надо добавить колонки.
	ТаблицаУслуг.Колонки.Добавить("СуммаВзаиморасчетов", ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаУслуг.Колонки.Добавить("СуммаУпр",            ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаУслуг Цикл
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.НДС = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СуммаСНДС = СтрокаТаблицы.Сумма + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

		СтрокаТаблицы.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СуммаСНДС, ВалютаДокумента, 
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                        					    СтруктураШапкиДокумента.КурсДокумента,
		        				                        КурсВзаиморасчетов, 
						                                СтруктураШапкиДокумента.КратностьДокумента,
		                                 				КратностьВзаиморасчетов);

		СтрокаТаблицы.СуммаУпр = ПересчитатьИзВалютыВВалюту(СуммаСНДС, ВалютаДокумента, 
		                           			      	СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 			СтруктураШапкиДокумента.КурсДокумента,
		                                 			СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
						                 			СтруктураШапкиДокумента.КратностьДокумента,
		                                 			СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуУслугУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	// Надо добавить колонки.
	ТаблицаТары.Колонки.Добавить("СуммаБезНДС",                ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("НДС",                        ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТары.Колонки.Добавить("СерияНоменклатуры",          Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма; // Сумма по таре всегда с НДС в валюте взаиморасчетов
	КонецЦикла;

	// Вызываем отдельные процедуры подготовки для упр. учета
	ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
Процедура ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента)

	// Надо добавить колонки.
	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов", ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("СуммаУпр",            ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.НДС = 0;
		
		СтрокаТаблицы.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента, 
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                        					    СтруктураШапкиДокумента.КурсДокумента,
		        				                        КурсВзаиморасчетов, 
						                                СтруктураШапкиДокумента.КратностьДокумента,
		                                 				КратностьВзаиморасчетов);

		СтрокаТаблицы.СуммаУпр = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента, 
		                           			      	СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 			СтруктураШапкиДокумента.КурсДокумента,
		                                 			СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
						                 			СтруктураШапкиДокумента.КратностьДокумента,
		                                 			СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТарыУпр()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	
	СтруктураОбязательныхПолей = 
	Новый Структура("Организация, ВалютаДокумента, 
					|Контрагент, ДоговорКонтрагента, КратностьВзаиморасчетов");

	Если Константы.НеПроводитьЗаказБезВыбраннойКубатуры.Получить() Тогда
		
		СтруктураОбязательныхПолей.Вставить("КубатураАвтомобиля");
		
	КонецЕсли; 
	
	Если Константы.ЗапретПроведенияЗаказаБезТипаЦены.Получить() Тогда
		
		СтруктураОбязательныхПолей.Вставить("ТипЦен");
		
	КонецЕсли; 
	
	// { Лапенков -20080909 
	//Если не Константы.РозничнаяБаза.Получить() Тогда
	//	СтруктураОбязательныхПолей.Вставить("ДатаОтгрузки");
	//	СтруктураОбязательныхПолей.Вставить("ДатаОплаты");
	//КонецЕсли;	
	
		// Проверить заполнение подразделения, если нужно. 
	//Если Константы.ОбязательнаяУстановкаПодразделений.Получить() Тогда 
	//		СтруктураОбязательныхПолей.Вставить("Подразделение");
	//КонецЕсли;

	// } Лапенков -20080909 
	
					
	// Склад заполняем только, если у нас есть строки в таблице "Товары" или "Возвратная тара"
	Если (Товары.Количество() > 0 ИЛИ ВозвратнаяТара.Количество() > 0)
		И НЕ Константы.ОплатыРаспределяютМенеджеры.Получить() Тогда // для ЯТШ убираем 
		СтруктураОбязательныхПолей.Вставить("Склад");
	КонецЕсли;

	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам 
	 Или СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ОшибкаПриПроведении("Документ можно выписывать только по договору, взаиморасчеты по которому ведутся  по заказам или по договору в целом!", Отказ, Заголовок);
	КонецЕсли;

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения упр. реквизитов шапки
//
Процедура ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		ОшибкаПриПроведении("Документ не может осуществлять заказ с неавтоматизированной торговой точки!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапкиУпр()

//+++ 15.06.2016 =====БЛОКИРОВКА ДУБЛЕЙ - Никогда и никому - не даём даже записать такой "кривой" заказ (можно только удалять!)===========================
Процедура ПроверитьПовторяющиесяТовары(Отказ)
	Если не Отказ тогда
		ТабБезДублей = Товары.Выгрузить(); 
		ТабБезДублей.Свернуть("Номенклатура","Количество");
		Если ТабБезДублей.Количество()<Товары.Количество() тогда // Есть дубли! 
			
			Отказ = Истина; //НЕ РольДоступна("ПравоЗавершенияРаботыПользователей"); // НИКОМУ НЕ ДОСТУПНО!
			
			#Если Клиент тогда
				Для каждого стр1 из ТабБезДублей цикл
				стр2 = Товары.НайтиСтроки( новый Структура("Номенклатура", стр1.Номенклатура) );
					Если стр2.Количество()>1 тогда
						сообщить("Запрещены Дубли строк с одинаковым товаром! Товар: "+строка(стр1.Номенклатура.Код)+" - "+строка(стр1.Номенклатура)+" - повторяется "+строка(стр2.Количество())+" раз!", СтатусСообщения.Внимание);
					КонецЕсли;
				КонецЦикла;
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	

// //+++( ищем хар-ку и если она 1 то вставляем
//процедура АвтоЗаполнениеХарактеристики(Стр1, ВывестиСообщение=ЛОЖЬ) Экспорт
//	Если НЕ ЗначениеЗаполнено(стр1.Номенклатура) тогда //нет товара
//		возврат;
//	КонецЕсли;
//	
//	Если не стр1.Номенклатура.ВестиУчетПоХарактеристикам тогда
//		возврат;
//	КонецЕсли;
//		
//	//Если ЗначениеЗаполнено(стр1.ХарактеристикаНоменклатуры) 
//	//  и (стр1.ХарактеристикаНоменклатуры.Владелец = стр1.Номенклатура) тогда  //уже заполнено
//	//	возврат;
//	//КонецЕсли;
//  			
//	 Запрос = Новый Запрос;
//	 Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
//					|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
//					|	СУММА(ЕСТЬNULL(ТоварыОрганизацийОстатки.КоличествоОстаток, 0)) КАК КоличествоОстаток
//					|ИЗ
//					|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
//					|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизаций.Остатки(
//					|				&Дата,
//					|				Номенклатура = &Владелец
//					|					И Организация = &Организация
//					|					И Качество = &Качество) КАК ТоварыОрганизацийОстатки
//					|		ПО (ТоварыОрганизацийОстатки.ХарактеристикаНоменклатуры = ХарактеристикиНоменклатуры.Ссылка)
//					|ГДЕ
//					|	ХарактеристикиНоменклатуры.Владелец = &Владелец
//					|	И (НЕ ХарактеристикиНоменклатуры.ПометкаУдаления)
//					|	И ЕСТЬNULL(ТоварыОрганизацийОстатки.КоличествоОстаток, 0) > 0
//					|
//					|СГРУППИРОВАТЬ ПО
//					|	ХарактеристикиНоменклатуры.Ссылка
//					|
//					|УПОРЯДОЧИТЬ ПО
//					|	Характеристика
//					|АВТОУПОРЯДОЧИВАНИЕ";
//	 
//	 Запрос.УстановитьПараметр("Владелец", стр1.Номенклатура);
//	 
//	 Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата()) );
//	 Запрос.УстановитьПараметр("Организация", Организация);
//	 Запрос.УстановитьПараметр("Качество", справочники.Качество.Новый);
//	 
//	 Результат = Запрос.Выполнить();
//	 Выборка = Результат.Выбрать();
//	 
//	 Если Выборка.Следующий() тогда   // первая ненулевая хар-ка
//		 
//	//поиск характеристики 
//		Если не ЗначениеЗаполнено(стр1.ХарактеристикаНоменклатуры) тогда
//		стр1.ХарактеристикаНоменклатуры = выборка.Характеристика;
//			Если стр1.Количество = 0 тогда
//				стр1.Количество = Выборка.КоличествоОстаток; // все количество 1-ой характеристики
//			КонецЕсли;
//		иначе //заполнено
//			ИндексХарВВыборке=0;
//			Если (стр1.ХарактеристикаНоменклатуры = выборка.Характеристика) тогда  
//				флНашли = истина;
//			иначе //ищем дальше в выборке нашу строку
//				пока Выборка.Следующий() цикл
//				ИндексХарВВыборке = ИндексХарВВыборке + 1;
//				Если стр1.ХарактеристикаНоменклатуры = выборка.Характеристика тогда
//					флНашли = истина;
//					прервать; // первая попавшаяся хар-ка
//				КонецЕсли;
//				КонецЦикла;
//			КонецЕсли;
//		КонецЕсли;	
//		
//		
//		Если стр1.Количество>0 тогда
//			//Если НЕТ настройки "Разрешить превышение количества товара в заказе покупателя"
//			Если стр1.Количество>Выборка.КоличествоОстаток тогда
//				
//				Если Выборка.Количество()>1 тогда
//				//Сообщить("Для номенклатуры: "+строка(стр1.номерклатура)+" есть еще "+строка(Выборка.Количество()-1)+" характеристик. Разбейте количество на несколько характеристик!");
//				  НадоКол = стр1.Количество;
//				  Выборка.Сбросить(); i=0;
//				  пока Выборка.Следующий() и НадоКол>0 цикл
//					  Если ( флНашли и (i=ИндексХарВВыборке))
//					 	  или (НЕ флНашли и (i=0) )тогда
//						  стр2 = стр1;
//					  	КолХар = Выборка.КоличествоОстаток; 
//					  иначе
//						  // ищем в таблице, вдруг уже есть такая характеристика
//						  КолХар2 = 0;   флНашли2=ложь; 
//					 	  для каждого стрТовары из Товары цикл
//							  Если стрТовары.Номенклатура=стр1.Номенклатура
//								  и стрТовары.ХарактеристикаНоменклатуры=выборка.Характеристика тогда
//								   флНашли2=Истина; 
//								   прервать; 
//								  // КолХар2 = КолХар2+стрТовары.Количество; // если дублируются - находим полное количество
//							  КонецЕсли;
//						  КонецЦикла;
//						  
//						  Если флНашли2 тогда
//							  // в последнюю строку добавляем разность Всего по хар-ке и кол. уже имеющейся хар-ки вцелом
//							 колХар  = Выборка.КоличествоОстаток - стрТовары.Количество; //  - (КолХар2 - стрТовары.Количество);
//							 стр2    = стрТовары; 
//						  иначе 	  
//						  	стр2 = Товары.Добавить();
//						  	ЗаполнитьЗначенияСвойств(стр2, стр1);
//						  	стр2.ХарактеристикаНоменклатуры = выборка.Характеристика;
//						  	КолХар = Выборка.КоличествоОстаток;
//						  КонецЕсли;
//					  КонецЕсли;	  
//					  
//					  колСпис = мин(НадоКол, КолХар);
//					  стр2.Количество = колСпис;
//					  НадоКол =НадоКол - колСпис;
//				  	  Если ВывестиСообщение тогда 
//						Сообщить(строка(стр2.номерСтроки)+") Количество товара для хар-ки: "+строка(стр2.ХарактеристикаНоменклатуры)+" равно "+строка(Выборка.КоличествоОстаток) +"шт. Списывается "+Строка(стр2.Количество)+" шт.", СтатусСообщения.Информация);
//					КонецЕсли;
//				  i=i+1;	
//			  	  КонецЦикла;	
//					Если НадоКол>0 И ВывестиСообщение тогда 
//					 	Сообщить(строка(стр1.номерСтроки)+") Количество товара по характеристикам - НЕ достаточно! Не хватает "+строка(НадоКол) +" шт.", СтатусСообщения.Внимание);
//					КонецЕсли;
//				
//				Иначе // 1 строка и количество не хватает
//					Если ВывестиСообщение тогда 
//					 	Сообщить(строка(стр1.номерСтроки)+") Количество товара для хар-ки: "+строка(стр1.ХарактеристикаНоменклатуры)+" равно "+?(флНашли, строка(Выборка.КоличествоОстаток),"0") +"шт. Не хватает "+Строка(стр1.Количество-?(флНашли,Выборка.КоличествоОстаток,0))+" шт.", СтатусСообщения.Внимание);
//					КонецЕсли;
//				КонецЕсли;
//				
//				
//			КонецЕсли;
//		КонецЕсли;
//	 КонецЕсли;
//		
// КонецПроцедуры	//+++) //АвтоЗаполнениеХарактеристики()
// 

 //+++( ищем хар-ку и если она 1 то вставляем
процедура АвтоЗаполнениеХарактеристики(Стр1, ВывестиСообщение=ЛОЖЬ) Экспорт
	Если НЕ ЗначениеЗаполнено(стр1.Номенклатура) тогда //нет товара
		возврат;
	КонецЕсли;
	
	Если не стр1.Номенклатура.ВестиУчетПоХарактеристикам тогда
		возврат;
	КонецЕсли;
		
	//Если ЗначениеЗаполнено(стр1.ХарактеристикаНоменклатуры) 
	//  и (стр1.ХарактеристикаНоменклатуры.Владелец = стр1.Номенклатура) тогда  //уже заполнено
	//	возврат;
	//КонецЕсли;
	
	//+++ 17.12.2012 определение склада из строки или из шапки!
	 склад1 = ?(ЗначениеЗаполнено(Стр1.Размещение) и ТипЗнч(Стр1.Размещение)=Тип("СправочникСсылка.Склады"), Стр1.Размещение, Склад);
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                |	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
	                |	СУММА(ЕСТЬNULL(ТоварыОрганизацийОстатки.КоличествоОстаток, 0)) КАК КоличествоОстаток,
					|   ТоварыОрганизацийОстатки.Склад как Склад
	                |ИЗ
	                |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
					
					//+++( 17.12.2012   изменено остатки по орг на остатки по складу!
					
					//|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизаций.Остатки(
					//|				&Дата,
					//|				Номенклатура = &Владелец
					//|					И Организация = &Организация
					//|					И Качество = &Качество) КАК ТоварыОрганизацийОстатки
					|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
					|				&Дата,
					|				Номенклатура = &Владелец
					|					"+?(ЗначениеЗаполнено(Склад1), "И Склад = &Склад","")+"
					|					И Качество = &Качество) КАК ТоварыОрганизацийОстатки
					//+++)
                    |
	                |		ПО (ТоварыОрганизацийОстатки.ХарактеристикаНоменклатуры = ХарактеристикиНоменклатуры.Ссылка)
	                |ГДЕ
	                |	ХарактеристикиНоменклатуры.Владелец = &Владелец
	                |	И (НЕ ХарактеристикиНоменклатуры.ПометкаУдаления)
	                |	И ЕСТЬNULL(ТоварыОрганизацийОстатки.КоличествоОстаток, 0) > 0
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ХарактеристикиНоменклатуры.Ссылка,
					|   ТоварыОрганизацийОстатки.Склад 
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Характеристика
	                |АВТОУПОРЯДОЧИВАНИЕ";
	 
	 Запрос.УстановитьПараметр("Владелец", стр1.Номенклатура);
	 
	 Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата()) );
	 Запрос.УстановитьПараметр("Организация", Организация);
	 Запрос.УстановитьПараметр("Склад", склад1);
	 Запрос.УстановитьПараметр("Качество", справочники.Качество.Новый);
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Если Выборка.Следующий() тогда   // первая ненулевая хар-ка
		 
	//поиск характеристики 
		Если не ЗначениеЗаполнено(стр1.ХарактеристикаНоменклатуры) тогда
		стр1.ХарактеристикаНоменклатуры = выборка.Характеристика;
			Если стр1.Количество = 0 тогда
				стр1.Количество = Выборка.КоличествоОстаток; // все количество 1-ой характеристики
			КонецЕсли;
			
			стр1.Размещение = Выборка.Склад; //+++
		
		иначе //заполнено
			ИндексХарВВыборке=0;
			Если (стр1.ХарактеристикаНоменклатуры = выборка.Характеристика) и (стр1.Размещение = выборка.Склад) тогда //+++  и (стр1.Размещение = выборка.Склад) 
				флНашли = истина;
			иначе //ищем дальше в выборке нашу строку
				пока Выборка.Следующий() цикл
				ИндексХарВВыборке = ИндексХарВВыборке + 1;
				Если стр1.ХарактеристикаНоменклатуры = выборка.Характеристика  и (стр1.Размещение = выборка.Склад) тогда  //+++  и (стр1.Размещение = выборка.Склад)
					флНашли = истина;
					прервать; // первая попавшаяся хар-ка
				КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;	
		
		
		Если стр1.Количество>0 тогда
			//Если НЕТ настройки "Разрешить превышение количества товара в заказе покупателя"
			Если стр1.Количество>Выборка.КоличествоОстаток тогда
				
				Если Выборка.Количество()>1 тогда
				//Сообщить("Для номенклатуры: "+строка(стр1.номерклатура)+" есть еще "+строка(Выборка.Количество()-1)+" характеристик. Разбейте количество на несколько характеристик!");
				  НадоКол = стр1.Количество;
				  Выборка.Сбросить(); i=0;
				  пока Выборка.Следующий() и НадоКол>0 цикл
					  Если ( флНашли и (i=ИндексХарВВыборке))
					 	  или (НЕ флНашли и (i=0) )тогда
						  стр2 = стр1;
					  	КолХар = Выборка.КоличествоОстаток; 
					  иначе
						  // ищем в таблице, вдруг уже есть такая характеристика
						  КолХар2 = 0;   флНашли2=ложь; 
					 	  для каждого стрТовары из Товары цикл
							  Если стрТовары.Номенклатура=стр1.Номенклатура
								  и стрТовары.ХарактеристикаНоменклатуры=выборка.Характеристика 
								  и (стрТовары.Размещение = выборка.Склад) тогда   //+++ и (стр1.Размещение = выборка.Склад)
								   флНашли2=Истина; 
								   прервать; 
								  // КолХар2 = КолХар2+стрТовары.Количество; // если дублируются - находим полное количество
							  КонецЕсли;
						  КонецЦикла;
						  
						  Если флНашли2 тогда
							  // в последнюю строку добавляем разность Всего по хар-ке и кол. уже имеющейся хар-ки вцелом
							 колХар  = Выборка.КоличествоОстаток - стрТовары.Количество; //  - (КолХар2 - стрТовары.Количество);
							 стр2    = стрТовары; 
						  иначе 	  
						  	стр2 = Товары.Добавить();
						  	ЗаполнитьЗначенияСвойств(стр2, стр1);
					      	стр2.ХарактеристикаНоменклатуры = выборка.Характеристика;
						  	стр2.Размещение = выборка.Склад; //+++ 17.01.2012
						  	КолХар = Выборка.КоличествоОстаток;
						  КонецЕсли;
					  КонецЕсли;	  
					  
					  колСпис = мин(НадоКол, КолХар);
					  стр2.Количество = колСпис;
					  НадоКол =НадоКол - колСпис;
				  	  Если ВывестиСообщение тогда 
						Сообщить(строка(стр2.номерСтроки)+") Количество товара для хар-ки: "+строка(стр2.ХарактеристикаНоменклатуры)+" по складу "+строка(выборка.Склад)+" равно "+строка(Выборка.КоличествоОстаток) +"шт. Списывается "+Строка(стр2.Количество)+" шт.", СтатусСообщения.Информация);
					КонецЕсли;
				  i=i+1;	
			  	  КонецЦикла;	
			        Если НадоКол>0 И ВывестиСообщение тогда 
					 	Сообщить(строка(стр1.номерСтроки)+") Количество товара по характеристикам - НЕ достаточно! Не хватает "+строка(НадоКол) +" шт.", СтатусСообщения.Внимание);
					КонецЕсли;
				
				Иначе // 1 строка и количество не хватает
					Если ВывестиСообщение тогда 
					 	Сообщить(строка(стр1.номерСтроки)+") Количество товара для хар-ки: "+строка(стр1.ХарактеристикаНоменклатуры)+" равно "+?(флНашли, строка(Выборка.КоличествоОстаток),"0") +"шт. Не хватает "+Строка(стр1.Количество-?(флНашли,Выборка.КоличествоОстаток,0))+" шт.", СтатусСообщения.Внимание);
					КонецЕсли;
				КонецЕсли;
				
				
			КонецЕсли;
		КонецЕсли;
	 КонецЕсли;
		
 КонецПроцедуры	//+++) //АвтоЗаполнениеХарактеристики()
 

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество, Сумма, Цена, ЕдиницаИзмерения");

	КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	//+++( 19.10.2011  проверка на наличие учета и заполненности Характеристики
	// 30.01.2012 - раскомментарено, убрано автозаполнение, только Отказ!
	для каждого стр1 из Товары цикл
		Если стр1.Номенклатура.ВестиУчетПоХарактеристикам тогда
			Если НЕ ЗначениеЗаполнено(стр1.ХарактеристикаНоменклатуры) тогда
				Сообщить(строка(стр1.НомерСтроки)+") для номенклатуры: "+строка(стр1.Номенклатура.Код)+" - "+строка(стр1.Номенклатура)+" - не заполнено поле ""Характеристика""! ",СтатусСообщения.Внимание);
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; //+++)		
		
	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь не должно быть размещений по НТТ
	ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  ТаблицаПоУслугам        - таблица значений, содержащая данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Услуги";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество, Сумма, Содержание");

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь товаров быть не должно.
	ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	                                                      Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");

	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь не должно быть размещений по НТТ
	ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// Проверяет правильность заполнения строк табличной части "Материалы".
//
// Параметры: 
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиМатериалы(ТаблицаМатериалы, Отказ, Заголовок)
	
	РеквизитыТабМатериалы = "Номенклатура, Количество";
	
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Материалы", Новый Структура(РеквизитыТабМатериалы), Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "Материалы", ТаблицаМатериалы, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Материалы", ТаблицаМатериалы, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиМатериалы()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре,
	                          Отказ, Заголовок);

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, 
							ТаблицаПоТаре, Отказ, Заголовок);

	Если СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда

		ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, 
		                                  ТаблицаПоТаре, Отказ, Заголовок);

		УчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата);

		Если УчетнаяПолитика.СписыватьПартииПриПроведенииДокументов Тогда

			ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());

			ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
			ЗаписьРегистрации.Период = Дата;
			ЗаписьРегистрации.Регистратор = Ссылка;

		Иначе
			
			// В неоперативном режиме границы последовательностей сдвигаются назад, если они позже документа.
			Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
				СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация, Истина, Ложь, Ложь)
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура формирует движение в рег. РасчетыСКонтрагентами
//
Процедура ДвиженияПоРасчетамСКонтрагентами( СтруктураШапкиДокумента, Отказ)
	
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
		
		// Движения по документу.

		НаборДвижений = Движения.РасчетыСКонтрагентами;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		// Заполним таблицу движений.
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.РасчетыВозврат        = Перечисления.РасчетыВозврат.Расчеты;
		СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
		СтрокаДвижений.Сделка                = Ссылка; 
		
		СтрокаДвижений.СуммаВзаиморасчетов   = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
												СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
												СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		СтрокаДвижений.СуммаУпр              = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
												СтруктураШапкиДокумента.КурсДокумента, 
												СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
												СтруктураШапкиДокумента.КратностьДокумента, 
												СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРасчетамСКонтрагентами()

// Формируем движения по упр. регистрам.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре,
	                          Отказ, Заголовок);

	ДвиженияПоРасчетамСКонтрагентами( СтруктураШапкиДокумента, Отказ);
	
	Если Не Отказ Тогда
		НаборДвижений = Движения.ЗаказыПокупателей;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ЗаказПокупателя");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(ОпределитьСтатусПартии(), "СтатусПартии");

		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		НаборДвижений.мПериод            = Дата;
		Движения.ЗаказыПокупателей.ВыполнитьПриход();

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ЗаказПокупателя");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");

		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		НаборДвижений.мПериод            = Дата;
		Движения.ЗаказыПокупателей.ВыполнитьПриход();

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
		ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ЗаказПокупателя");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "СтатусПартии");

		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		НаборДвижений.мПериод            = Дата;
		Движения.ЗаказыПокупателей.ВыполнитьПриход();
		
		ТаблицаПоТоварамРазмещение = ТаблицаПоТоварам.Скопировать();
		Сч = 0;
		Пока Сч < ТаблицаПоТоварамРазмещение.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоТоварамРазмещение.Получить(Сч);
			Если ЗначениеНеЗаполнено(СтрокаТаблицы.Размещение) 
			 или ТипЗнч(СтрокаТаблицы.Размещение) <> Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				 ТаблицаПоТоварамРазмещение.Удалить(СтрокаТаблицы);
			Иначе 
				Сч = Сч + 1;
			КонецЕсли; 
		КонецЦикла;
		
		Если ТаблицаПоТоварамРазмещение.Количество() > 0 Тогда
			
			ТаблицаПоТоварамРазмещение.Колонки.Размещение.Имя = "ЗаказПоставщику";
			
			// По регистру РазмещениеЗаказовПокупателей
			НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
			
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамРазмещение, ТаблицаДвижений);
			
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ЗаказПокупателя");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Товар, "ТоварТара");
			
			
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			НаборДвижений.мПериод            = Дата;
			
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатковПоЗаказамПоставщикам(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;

			Если Не Отказ Тогда
				Движения.РазмещениеЗаказовПокупателей.ВыполнитьПриход();
			КонецЕсли;
		
		КонецЕсли;
		
		ТаблицаПоТареРазмещение = ТаблицаПоТаре.Скопировать();
		Сч = 0;
		Пока Сч < ТаблицаПоТареРазмещение.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоТареРазмещение.Получить(Сч);
			Если ЗначениеНеЗаполнено(СтрокаТаблицы.Размещение) 
			 или ТипЗнч(СтрокаТаблицы.Размещение) <> Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				 ТаблицаПоТареРазмещение.Удалить(СтрокаТаблицы);
			Иначе 
				Сч = Сч + 1;
			КонецЕсли; 
		КонецЦикла;
		
		Если ТаблицаПоТареРазмещение.Количество() > 0 Тогда
			
			ТаблицаПоТареРазмещение.Колонки.Размещение.Имя = "ЗаказПоставщику";
			
			// Сначала спишем свободные остатки с по заказу
			// По регистру РазмещениеЗаказовПокупателей
			НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
			
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТареРазмещение, ТаблицаДвижений);
			
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ЗаказПокупателя");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Тара, "ТоварТара");
			
			
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			НаборДвижений.мПериод            = Дата;
			
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатковПоЗаказамПоставщикам(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;

			Если Не Отказ Тогда
				Движения.РазмещениеЗаказовПокупателей.ВыполнитьПриход();
			КонецЕсли;
			
		КонецЕсли;
		
		
		ТаблицаПоТоварамРезервирование = ТаблицаПоТоварам.Скопировать();
		Сч = 0;
		Пока Сч < ТаблицаПоТоварамРезервирование.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоТоварамРезервирование.Получить(Сч);
			Если ЗначениеНеЗаполнено(СтрокаТаблицы.Размещение) 
			 или ТипЗнч(СтрокаТаблицы.Размещение) <> Тип("СправочникСсылка.Склады") Тогда
				 ТаблицаПоТоварамРезервирование.Удалить(СтрокаТаблицы);
			Иначе 
				Сч = Сч + 1;
			КонецЕсли; 
		КонецЦикла;
		
		Инд = 0;
		
		Если ТаблицаПоТоварамРезервирование.Количество() > 0 Тогда
			ТаблицаПоТоварамРезервирование.Колонки.Размещение.Имя = "Склад";
			
			НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамРезервирование, ТаблицаДвижений);
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументРезерва");

			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			НаборДвижений.мПериод            = Дата;
			
			// Проверка осатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольСвободныхОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;
			
			Движения.ТоварыВРезервеНаСкладах.ВыполнитьПриход();
			
		КонецЕсли;
		
		ТаблицаПоТареРезервирование = ТаблицаПоТаре.Скопировать();
		Сч = 0;
		Пока Сч < ТаблицаПоТареРезервирование.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоТареРезервирование.Получить(Сч);
			Если ЗначениеНеЗаполнено(СтрокаТаблицы.Размещение) 
			 или ТипЗнч(СтрокаТаблицы.Размещение) <> Тип("СправочникСсылка.Склады") Тогда
				 ТаблицаПоТареРезервирование.Удалить(СтрокаТаблицы);
			Иначе 
				Сч = Сч + 1;
			КонецЕсли; 
		КонецЦикла;
		
		Если ТаблицаПоТареРезервирование.Количество() > 0 Тогда
			ТаблицаПоТареРезервирование.Колонки.Размещение.Имя = "Склад";
			
			НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТареРезервирование, ТаблицаДвижений);
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументРезерва");

			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			НаборДвижений.мПериод            = Дата;
			
			// Проверка осатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольСвободныхОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;
			
			Движения.ТоварыВРезервеНаСкладах.ВыполнитьПриход();
			
		КонецЕсли;
		
		КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Заполняет колонки значениями, нужными для упр. учета
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,"ДопустимыйСтатус2");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"ОтражатьВУправленческомУчете");

КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр() 

// Заполняет колонки значениями, нужными для упр. учета
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоВозвратнойТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"ОтражатьВУправленческомУчете");
			
КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоВозвратнойТареУпр() 

// Формируем движения по регистру СписанныеТовары
//
Процедура ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, 
				                          ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре,
											Отказ, Заголовок)
											
	ТаблицаПоТоварамРезервирование = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезервирование.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезервирование.Получить(Сч);
		Если ЗначениеНеЗаполнено(СтрокаТаблицы.Размещение) 
		 или ТипЗнч(СтрокаТаблицы.Размещение) <> Тип("СправочникСсылка.Склады") Тогда
			 ТаблицаПоТоварамРезервирование.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;

	Инд = 0;

	Если ТаблицаПоТоварамРезервирование.Количество() > 0 Тогда
		ТаблицаПоТоварамРезервирование.Колонки.Размещение.Имя = "Склад";

		// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары
		Если СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда

			НаборДвижений = Движения.СписанныеТовары;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамРезервирование, ТаблицаДвижений);

			// Недостающие поля.
			Инд = 0;
			Для каждого Строка Из ТаблицаДвижений Цикл
				Инд = Инд+1;
				Строка.НомерСтрокиДокумента = Инд;
			КонецЦикла;

			ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");

			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ,"КодОперацииПартииТоваров");

			// Списывать партии можно только по заказу (измерение Заказ - пустое).
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"СписыватьТолькоПоЗаказу");

			// Заказ, на который списывать партию.
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ЗаказСписания");

			ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.СписанныеТовары.ВыполнитьДвижения();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ТаблицаПоТареРезервирование = ТаблицаПоТаре.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТареРезервирование.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТареРезервирование.Получить(Сч);
		Если ЗначениеНеЗаполнено(СтрокаТаблицы.Размещение) 
		 или ТипЗнч(СтрокаТаблицы.Размещение) <> Тип("СправочникСсылка.Склады") Тогда
			 ТаблицаПоТареРезервирование.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Если ТаблицаПоТареРезервирование.Количество() > 0 Тогда
		ТаблицаПоТареРезервирование.Колонки.Размещение.Имя = "Склад";
				
		// ТАРА ПО РЕГИСТРУ СписанныеТовары.
		Если СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
			
			НаборДвижений = Движения.СписанныеТовары;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТареРезервирование, ТаблицаДвижений);
			
			// Недостающие поля.
			Для каждого Строка Из ТаблицаДвижений Цикл
				Инд = Инд+1;
				Строка.НомерСтрокиДокумента = Инд;
			КонецЦикла;
			
			ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
			
			
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ,"КодОперацииПартииТоваров");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"СписыватьТолькоПоЗаказу");
			
			ЗаполнитьКолонкиРегистраСписанныеТоварыПоВозвратнойТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
													
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.СписанныеТовары.ВыполнитьДвижения();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструСписанныеТовары()

// Процедура пересчитывает сумму в валюту упр. и регл. учета
//
Процедура ДобавитьСуммы(СтруктураШапкиДокумента, ТаблицаПоМатериалам)
	
	ТаблицаПоМатериалам.Колонки.Добавить( "СуммаВзаиморасчетов", ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаПоМатериалам.Колонки.Добавить( "СуммаУпр",            ПолучитьОписаниеТиповЧисла(15, 2));
	
	Для Каждого СтрокаТЧ Из ТаблицаПоМатериалам Цикл
		
		СтрокаТЧ.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(
			СтрокаТЧ.Сумма,
			ВалютаДокумента,
			СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
			СтруктураШапкиДокумента.КурсДокумента,
			КурсВзаиморасчетов,
			СтруктураШапкиДокумента.КратностьДокумента,
			КратностьВзаиморасчетов);
			
		СтрокаТЧ.СуммаУпр = ПересчитатьИзВалютыВВалюту(
			СтрокаТЧ.Сумма,
			ВалютаДокумента,
			СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			СтруктураШапкиДокумента.КурсДокумента, 
			СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			СтруктураШапкиДокумента.КратностьДокумента, 
			СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьСуммы()

// Процедура заполнения реквизита "ДатаОплаты" по договору.
//
// Параметры: 
//  РежимВызова - режим вызова процедуры.
//
//Процедура УстановитьДатуОплатыПоДоговору(РежимВызова = "")Экспорт

//	Если ЗначениеНеЗаполнено(Дата) Тогда
//		Возврат;
//	ИначеЕсли ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
//		Возврат;
//	КонецЕсли;

//	ВидВзаиморасчетов = ДоговорКонтрагента.ВедениеВзаиморасчетов;

//	Если ЗначениеНеЗаполнено(ВидВзаиморасчетов) Тогда
//		Возврат;
//	КонецЕсли;

//	Если ВидВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
//		Если ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности Тогда
//			ЧислоДнейДоОплаты = ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности;
//		Иначе
//			ЧислоДнейДоОплаты = 0;
//		КонецЕсли;
//	Иначе
//		Если ДоговорКонтрагента.ДержатьРезервБезОплатыОграниченноеВремя Тогда
//			ЧислоДнейДоОплаты = ДоговорКонтрагента.ЧислоДнейРезерваБезОплаты;
//		Иначе
//			ЧислоДнейДоОплаты = 0;
//		КонецЕсли;
//	КонецЕсли;

//	// Исключим выходные дни, и получим новую дату оплаты
//	ДатаОплатыНовая   = НачалоДня(Дата);
//	ЧислоДнейДоОплаты = ЧислоДнейДоОплаты - ?(ДеньНедели(ДатаОплатыНовая) > 5, 0, 1);

//	Пока ЧислоДнейДоОплаты > 0 Цикл
//		ДатаОплатыНовая   = ДатаОплатыНовая + 86400;
//		ЧислоДнейДоОплаты = ЧислоДнейДоОплаты - 1;

//		Пока ДеньНедели(ДатаОплатыНовая) > 5 Цикл
//			ДатаОплатыНовая = ДатаОплатыНовая + 86400;
//		КонецЦикла;
//	КонецЦикла;

//	Если ДатаОплаты <> ДатаОплатыНовая Тогда
//		// Проверка режима вызова процедуры
//		Если НЕ ПустаяСтрока(РежимВызова) И НЕ ДатаОплаты = '00010101000000' Тогда
//			Если РежимВызова = "ДатаДокумента" Тогда
//				ТекстВопроса = "Изменилась дата документа.";
//			Иначе
//				ТекстВопроса = "Изменился договор с контрагентом.";
//			КонецЕсли;
//			#Если Клиент Тогда
//			Если Вопрос(ТекстВопроса + " Пересчитать дату оплаты?", 
//				РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
//				Возврат;
//			КонецЕсли;
//			#КонецЕсли
//		КонецЕсли;

//		ДатаОплаты = ДатаОплатыНовая;
//	КонецЕсли;

//КонецПроцедуры // УстановитьДатуОплатыПоДоговору()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

#Если Клиент Тогда
	
// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.Событие") Тогда

		// Заполнение шапки
		ВремяНапоминания  = Основание.ВремяНапоминания;
		Комментарий       = Основание.Комментарий;
		НапомнитьОСобытии = Основание.НапомнитьОСобытии;
		Ответственный     = Основание.Ответственный;

		ЗаполнитьДокументПоОснованиюУпр(Основание);

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда

		// Заполнение шапки
		ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета, "Продажа");
		АдресДоставки    = Основание.АдресДоставки;
		ВалютаДокумента  = Основание.ВалютаДокумента;
		ВремяНапоминания = Основание.ВремяНапоминания;
		ДатаОплаты       = Основание.ДатаОплаты;
		ДатаОтгрузки     = Основание.ДатаОтгрузки;
		ДоговорКонтрагента                = Основание.ДоговорКонтрагента;
		ИспользоватьПлановуюСебестоимость = Основание.ИспользоватьПлановуюСебестоимость;
		ИтогПлановаяСебестоимость         = Основание.ИтогПлановаяСебестоимость;
		КратностьВзаиморасчетов           = Основание.КратностьВзаиморасчетов;
		Комментарий        = Основание.Комментарий;
		КонтактноеЛицо     = Основание.КонтактноеЛицо;
		Контрагент         = Основание.Контрагент;
		КурсВзаиморасчетов = Основание.КурсВзаиморасчетов;
		НапомнитьОСобытии  = Основание.НапомнитьОСобытии;
		Организация        = Основание.Организация;
		Ответственный      = Основание.Ответственный;
		Подразделение      = Основание.Подразделение;
		Склад              = Основание.Склад;
		СтруктурнаяЕдиница = Основание.СтруктурнаяЕдиница;
		СуммаВключаетНДС   = Основание.СуммаВключаетНДС;
		СуммаДокумента     = Основание.СуммаДокумента;
		ТипЦен             = Основание.ТипЦен;
		УчитыватьНДС       = Основание.УчитыватьНДС;

		//УстановитьДатуОплатыПоДоговору();

		Для Каждого ТекСтрокаВозвратнаяТара Из Основание.ВозвратнаяТара Цикл

			НоваяСтрока = ВозвратнаяТара.Добавить();
			НоваяСтрока.Количество   = ТекСтрокаВозвратнаяТара.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаВозвратнаяТара.Номенклатура;
			НоваяСтрока.Сумма        = ТекСтрокаВозвратнаяТара.Сумма;
			НоваяСтрока.Цена         = ТекСтрокаВозвратнаяТара.Цена;

		КонецЦикла;

		Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл

			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения           = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест       = ТекСтрокаТовары.ЕдиницаИзмеренияМест;
			НоваяСтрока.Количество                 = ТекСтрокаТовары.Количество;
			НоваяСтрока.КоличествоМест             = ТекСтрокаТовары.КоличествоМест;
			НоваяСтрока.Коэффициент                = ТекСтрокаТовары.Коэффициент;
			НоваяСтрока.Номенклатура               = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.ПлановаяСебестоимость      = ТекСтрокаТовары.ПлановаяСебестоимость;
			НоваяСтрока.ПроцентСкидкиНаценки       = ТекСтрокаТовары.ПроцентСкидкиНаценки;
			НоваяСтрока.СтавкаНДС                  = ТекСтрокаТовары.СтавкаНДС;
			НоваяСтрока.Сумма                      = ТекСтрокаТовары.Сумма;
			НоваяСтрока.СуммаНДС                   = ТекСтрокаТовары.СуммаНДС;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрокаТовары.ХарактеристикаНоменклатуры;
			НоваяСтрока.Цена                       = ТекСтрокаТовары.Цена;

		КонецЦикла;

		Для Каждого ТекСтрокаУслуги Из Основание.Услуги Цикл

			НоваяСтрока = Услуги.Добавить();
			НоваяСтрока.Количество   = ТекСтрокаУслуги.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаУслуги.Номенклатура;
			НоваяСтрока.Содержание   = ТекСтрокаУслуги.Содержание;
			НоваяСтрока.СтавкаНДС    = ТекСтрокаУслуги.СтавкаНДС;
			НоваяСтрока.Сумма        = ТекСтрокаУслуги.Сумма;
			НоваяСтрока.СуммаНДС     = ТекСтрокаУслуги.СуммаНДС;
			НоваяСтрока.Цена         = ТекСтрокаУслуги.Цена;

		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

#КонецЕсли

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	если Организация = справочники.Организации.НайтиПоКоду("00001") тогда
		ЭтоЭкспорт = Ложь;
	иначе 
		ЭтоЭкспорт = Истина;
	конецЕсли;

		//+++( 09.01.2014 - для роботов!	
	Если не Отказ Тогда   
		Если сокрЛП(номер)="" Тогда
			СтрокаПрефикс = "ТК";
			Если подразделение.ПрефиксИБ<>"" Тогда
				СтрокаПрефикс = подразделение.ПрефиксИБ;
			КонецЕсли;	
			ЭтотОбъект.УстановитьНовыйНомер(СтрокаПрефикс);	
		КонецЕсли;	
	КонецЕсли;	
	//+++)	

	//установим завод  при первой записи документа
	
	Если ЭтоНовый() тогда
		Для каждого СтрокаТабличнойЧасти из Товары Цикл
			Если СтрокаТабличнойЧасти.Номенклатура.ВидТовара = перечисления.ВидыТоваров.Диски Тогда
				Отбор = Новый Структура;
				Отбор.вставить("Объект",СтрокаТабличнойЧасти.Номенклатура);
				Отбор.вставить("Свойство",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90185"));
				ЗаписьЗавод = РегистрыСведений.ЗначенияСвойствОбъектов.Получить(Отбор);
				СтрокаТабличнойЧасти.Завод = ЗаписьЗавод.значение;
			конецЕсли;
		конецЦикла;	
	конецЕсли;
	
	ПроверитьПовторяющиесяТовары(Отказ); // 15.06.2016
	
	
	// Если договор с комиссионером, то надо почистить закладку "Услуги".
	Если Услуги.Количество() > 0  И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		Услуги.Очистить();
	КонецЕсли;

	// Проверка заполнения единицы измерения мест и количества мест
	ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	

	
	#Если Клиент Тогда
	Если не пометкаУдаления тогда	
	//+++14.03.2016 проверка цен и Количества
	для каждого стр1 из Товары цикл
		если стр1.Цена=0 тогда
			сообщить(строка(стр1.Номенклатура.Код)+") Цена не может быть равна нулю!");
			Отказ = истина;
		КонецЕсли;
		если стр1.Количество=0 тогда
			сообщить(строка(стр1.Номенклатура.Код)+") Количество не может быть равна нулю!");
			Отказ = истина;
		КонецЕсли;
	КонецЦикла;
	конецесли;
	//Если это ВЭД, то только два типа договора, Плотников 26.01.17
	Если РольДоступна("ДополнительныеПраваВЭД") 
		//и ДоговорКонтрагента.ТипДоговора <> Справочники.ТипыДоговоров.TyreTechnology 
		и ДоговорКонтрагента.ТипДоговора <> Справочники.ТипыДоговоров.WheelsGroupLimited 
		и ДоговорКонтрагента.ТипДоговора <> Справочники.ТипыДоговоров.TyreTechnology 
		и ЗначениеЗаполнено(ДоговорКонтрагента) Тогда 
		сообщить("Тип договора должен быть Tyre Technology или Wheels Group Limited!!!");
	    Отказ = истина;	
	КонецЕсли;
	
	//И ставим нужное подразделение
	Если РольДоступна("ДополнительныеПраваВЭД") и не Отказ Тогда
		//СоответствиеПодразделений = Новый Соответствие;
		//СоответствиеПодразделений.Вставить(Справочники.ТипыДоговоров.TyreTechnology,Справочники.Подразделения.НайтиПоКоду("00162"));
		//СоответствиеПодразделений.Вставить(Справочники.ТипыДоговоров.WheelsGroupLimited,Справочники.Подразделения.НайтиПоКоду("00166"));

		Подразделение = Справочники.Подразделения.НайтиПоКоду("00166");	
	КонецЕсли;
		//+++( 22.08.2014 - ВСЕ видят ВСЁ... поэтому удаление сезонных заказов - ограничено!
		//
		// доступ только для полных прав или при РазрешитьРедактированиеЧужихДокументов=Истина,
		// менеджеру по договору или ответственному по контрагенту
		// для филиалов - бухагтерам (кассир) или старшим менеджерам
		//
		Если ЭтотОбъект.ПометкаУдаления и НЕ РольДоступна("ПолныеПрава") Тогда
			
			Если НЕ ( (Контрагент.ОсновнойМенеджерКонтрагента = глТекущийПользователь 
				ИЛИ ДоговорКонтрагента.ОтветственноеЛицо = глТекущийПользователь
				ИЛИ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьРедактированиеЧужихДокументов")
				)
				
				//для филиалов, только по своему филиалу - для кассиров и Старших менеджеров (аналог полных прав)
				ИЛИ (ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") 
				И ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновноеПодразделение") = ЭтотОбъект.Подразделение 
				и (рольДоступна("Кассир") или ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "СтаршийМенеджерПодразделения")
				)	 )
				)	ТОГДА
				Отказ = Истина; 
			КонецЕсли;
			
		КонецЕсли;	
		//+++ )
		
		Если НЕ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			ТоварыТЗ = Товары.Выгрузить(); 
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Товары",ТоварыТЗ);
			Запрос.Текст ="ВЫБРАТЬ
					|	Товары.Номенклатура,
					|	Товары.Цена
					|ПОМЕСТИТЬ Тов
					|ИЗ
					|	&Товары КАК Товары
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	Тов.Номенклатура,
					|	Тов.Цена,
					|	ЦеныФОПСрезПоследних.Цена КАК Цена1
					|ИЗ
					|	Тов КАК Тов
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныФОП"+?(ЭтоЭкспорт,"Экспорт","")+".СрезПоследних(, ) КАК ЦеныФОПСрезПоследних
					|		ПО Тов.Номенклатура = ЦеныФОПСрезПоследних.Номенклатура
					|ГДЕ
					|	Тов.Цена < ЕСТЬNULL(ЦеныФОПСрезПоследних.Цена, 0)";
			Рез = Запрос.Выполнить().Выгрузить();
			Если рез.Количество()>0 и Найти(ПользователиИнформационнойБазы.ТекущийПользователь().имя,"Малышев") = 0 Тогда
				Отказ = Истина;
				сообщить("Нельзя устанавливать цены ниже цены FOB!!!");
			КонецЕсли;
		КонецЕсли;
		
	#КонецЕсли
	
	
	
КонецПроцедуры // ПередЗаписью


Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	Если Дата<ТекущаяДата()-14*24*60*60 и не РольДоступна("ПолныеПрава") и ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643") Тогда
	отказ= истина;
	#Если клиент  тогда
	Сообщить("Нельзя проводить документы старше 2х недель!");	
	#КонецЕсли	
	конецЕсли;	
	
	ДатаОтсчета  = Константы.ДатаУчетаСЗППоРегистру.Получить(); 
	Если ДатаОтсчета <> Дата(1,1,1) и ДатаОтсчета <=Дата Тогда
		//Блокировки 
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ЗаказыПокупателейСезонные");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Контрагент",Контрагент);
	Блокировка.Заблокировать();
	Движения.ЗаказыПокупателейСезонные.Записывать = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателяСезонныйТовары.Ссылка КАК ЗаказПокупателяСезонный,
		|	ЗаказПокупателяСезонныйТовары.Номенклатура,
		|	СУММА(ЗаказПокупателяСезонныйТовары.Количество) КАК Количество,
		|	ЗаказПокупателяСезонныйТовары.Ссылка.Контрагент,
		|	ЗаказПокупателяСезонныйТовары.Ссылка.Подразделение
		|ИЗ
		|	Документ.ЗаказПокупателяСезонный.Товары КАК ЗаказПокупателяСезонныйТовары
		|ГДЕ
		|	ЗаказПокупателяСезонныйТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПокупателяСезонныйТовары.Номенклатура,
		|	ЗаказПокупателяСезонныйТовары.Ссылка,
		|	ЗаказПокупателяСезонныйТовары.Ссылка.Контрагент";

	Запрос.УстановитьПараметр("Ссылка",Ссылка);	
	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		Движение = Движения.ЗаказыПокупателейСезонные.Добавить();
		ЗаполнитьЗначенияСвойств(Движение,Выборка);
		Движение.Период = Дата;
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	КонецЦикла;
     конецесли;
	КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	// Удаление записей регистрации из всех последовательностей
	Для Каждого НаборЗаписейРегистрацииВПоследовательности Из ПринадлежностьПоследовательностям Цикл
		НаборЗаписейРегистрацииВПоследовательности.Очистить();
	КонецЦикла;
	
   		Если не Отказ и не ЭтотОбъект.ОбменДанными.Загрузка тогда
		Запрос1 = Новый Запрос;
			Запрос1.Текст = "ВЫБРАТЬ 
			|	Авторизация.Наименование КАК База,
			|	Авторизация.Логин,
			|	Авторизация.Пароль
			|ИЗ
			|	Справочник.Авторизация КАК Авторизация
			|ГДЕ
			|	Авторизация.Владелец = &Владелец";

			Запрос1.УстановитьПараметр("Владелец", ЭтотОбъект.Контрагент);
			Результат = Запрос1.Выполнить();
			Если не Результат.Пустой() тогда //ДЛЯ ВСЕХ КЛИЕНТОВ STORE и TERMINA
				Попытка
					ОбменСУТИнтернетМагазин.ВключитьРегистрациюОбъектаОИМ(ЭтотОбъект);
				Исключение
					#Если Клиент Тогда
					СообщитьОбОшибке("Заказ: "+строка(ссылка)+" не может быть добавлен в план обмена! "+ОписаниеОшибки() );
					#КонецЕсли	
				КонецПопытки;
			КонецЕсли;	
		КонецЕсли;
	
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	//// Вставить содержимое обработчика.
	//МассивСсылок = Новый Массив;
	//МассивСсылок.Добавить(ОбъектКопирования.Ссылка);
	//ТЗ = НайтиПоСсылкам(МассивСсылок);
	//
	//Если ((ТЗ.Количество()=0 и Не(ОбъектКопирования.Проведен)) или (ТЗ.Количество()=1 и ОбъектКопирования.Проведен)) Тогда 
	//	Ответ = Вопрос("Копируемый заказ не имеет никаких ссылок. Пометить его на удаление ?", РежимДиалогаВопрос.ДаНет);
	//	Если (Ответ = КодВозвратаДиалога.Да) Тогда 
	//		ОбъектКопирования.УстановитьПометкуУдаления(Истина);
	//	КонецЕсли;
	//КонецЕсли;
	//	
	//Проверен = Ложь;
	  АвтоКомплектация = ложь;
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
//если не было оборотов по регистру, то можно удалить


	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателяСезонныйТовары.Номенклатура,
		|	СУММА(ЗаказПокупателяСезонныйТовары.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТ_Док
		|ИЗ
		|	Документ.ЗаказПокупателяСезонный.Товары КАК ЗаказПокупателяСезонныйТовары
		|ГДЕ
		|	ЗаказПокупателяСезонныйТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПокупателяСезонныйТовары.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказыПокупателейСезонныеОстатки.Номенклатура,
		|	ЗаказыПокупателейСезонныеОстатки.КоличествоОстаток
		|ПОМЕСТИТЬ Вт_Остатки
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателейСезонные.Остатки(, ЗаказПокупателяСезонный = &ссылка) КАК ЗаказыПокупателейСезонныеОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Док.Номенклатура,
		|	ВТ_Док.Количество,
		|	Вт_Остатки.КоличествоОстаток
		|ИЗ
		|	ВТ_Док КАК ВТ_Док
		|		ЛЕВОЕ СОЕДИНЕНИЕ Вт_Остатки КАК Вт_Остатки
		|		ПО ВТ_Док.Номенклатура = Вт_Остатки.Номенклатура
		|ГДЕ
		|	ВТ_Док.Количество <> Вт_Остатки.КоличествоОстаток";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Результат = Запрос.Выполнить();

	Если не Результат.Пустой() Тогда  //отличается количество по регистру и по таб. части документа хоть по 1 позиции
		#Если клиент тогда
		Сообщить("По этому документу уже были заказы, отменять проведение нельзя!");	
	    #конецесли
	Отказ=Истина;
	конецЕсли;
КонецПроцедуры


мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();