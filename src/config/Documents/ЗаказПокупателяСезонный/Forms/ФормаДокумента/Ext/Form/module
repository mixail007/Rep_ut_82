
Перем мОбновлятьВладельца Экспорт;

// Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мТекущаяДатаДокумента;
// Хранит текущее значение учетной политики, организация является плательщиком ЕНВД
Перем мОрганизацияЯвляетсяПлательщикомЕНВД;
// Хранит текущее значение организации для контроля учетной политики, организация является плательщиком ЕНВД
Перем мТекущаяОрганизация;
Перем мКолонкиТовары, мКолонкиВозвратнаяТара;
// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов; 
// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента; 
// Устанавливается в значение "Истина", если пользователю можно менять цену
// в документе
Перем мМожноМенятьЦенуВДокументе;

Перем мЧас;
Перем мМинута;

Перем мОбработкаТайпинга;
Перем мТекстТайпинга;
Перем мПоследнееЗначениеЭлементаТайпинга;

// Хранит информацию о сумме без скидки документа.
Перем мСуммаДокументаБезСкидок Экспорт;
Перем мРассчитыватьАвтоматическиеСкидки Экспорт;
Перем мМинимальныеЦены Экспорт;
Перем мСписокФильтров Экспорт;

Перем ГраницаЗапрета;
Перем ГраницаПериода;

Перем мПечатнаяФормаПоУмолчанию;

Перем ТаблицаРаспродажи;
Перем масПользователеПоШтамповке; //30.01.2019
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция формирует структуру параметров для тайпинка контактного лица контрагента.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Структура имен и значений параметров
//
Функция ПолучитьСтруктуруПараметровТайпинга()

	СтруктураПараметров = Новый Структура("ВидКонтактногоЛица", Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента);
	Если НЕ ЗначениеНеЗаполнено(Контрагент) Тогда
		СтруктураПараметров.Вставить("ОбъектВладелец", Контрагент);
	КонецЕсли;
	
	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровТайпинга()()

// Процедура вызывается при выборе времени из списка у ЭУ ВремяНапоминания
//
Процедура ВыбратьВремя(ДатаВремен, ТекЭлемент, ПолныйГод = Истина)

	СтруктураРабочихВремен = ОпределитьНачалоИОкончениеРабочегоДняПользователя();
	
	СписокВремен = Новый СписокЗначений;
	НачалоРабочегоДня = НачалоДня(ДатаВремен)+Час(СтруктураРабочихВремен.ДатаНачала)*60*60+Минута(СтруктураРабочихВремен.ДатаНачала)*60;
	ОкончаниеРабочегоДня = НачалоДня(ДатаВремен)+Час(СтруктураРабочихВремен.ДатаОкончания)*60*60+Минута(СтруктураРабочихВремен.ДатаОкончания)*60 - 60*60;

	НачалоРабочегоДняДляСпискаВыбора = НачалоЧаса(НачалоРабочегоДня);
	а = 0;
	Пока 1=1 Цикл
		ВремяСписка = НачалоРабочегоДняДляСпискаВыбора + а*30*60;
		Если НачалоЧаса(ВремяСписка) > НачалоЧаса(ОкончаниеРабочегоДня) Тогда
			Прервать;
		КонецЕсли;
		Если ПолныйГод Тогда
			СписокВремен.Добавить(ВремяСписка, Формат(ВремяСписка,"ДФ='дд.ММ.гггг ЧЧ:мм'"));
		Иначе
			СписокВремен.Добавить(ВремяСписка, Формат(ВремяСписка,"ДФ='дд.ММ.гг ЧЧ:мм'"));
		КонецЕсли; 
		а = а + 1;
	КонецЦикла; 

	НачальноеЗначение = СписокВремен.НайтиПоЗначению(ДатаВремен);
	Если НачальноеЗначение = Неопределено Тогда
		ВыбранноеВремя = ЭтаФорма.ВыбратьИзСписка(СписокВремен, ТекЭлемент);
	Иначе
		ВыбранноеВремя = ЭтаФорма.ВыбратьИзСписка(СписокВремен, ТекЭлемент, НачальноеЗначение);
	КонецЕсли; 

	Если ВыбранноеВремя <> Неопределено Тогда
		ДатаВремен = ВыбранноеВремя.Значение;
	КонецЕсли; 
	
КонецПроцедуры // ВыбратьВремя()

// Процедура изменяет доступность элемента формы .ВремяНапоминания
//
Процедура ДоступностьНапоминаний()

	//ЭлементыФормы.ВремяНапоминания.Доступность = НапомнитьОСобытии;
	//
	//Если ВремяНапоминания<>Дата(1,1,1) тогда  //+++ 08.12.2011 
	//	ЭлементыФормы.Кнопка1.Доступность = истина;
	//	ЭлементыФормы.ДействияФормы.Кнопки.ИсторияИзменений.Доступность = истина;
	//	ЭлементыФормы.ВремяНапоминания.Доступность = ЛОЖЬ;
	//иначе  //если нет записей - значит еще не записывался не разу после 08.12.2011
	//	ЭлементыФормы.Кнопка1.Доступность = ЛОЖЬ;
	//	ЭлементыФормы.ДействияФормы.Кнопки.ИсторияИзменений.Доступность = ЛОЖЬ;
	//КонецЕсли;
	
КонецПроцедуры // ДоступностьНапоминаний()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	ПриИзмененииЗначенияДоговора(ЭтотОбъект, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Продажа", "Товары", мТекущийДоговорКонтрагента);

	// Проверка типа цен в списке доступных
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ИспользоватьРазрешенныеТипыЦенКонтрагентов") Тогда
		
		Если НЕ ЗначениеНеЗаполнено(ТипЦен) Тогда
			
			СписокТипов = яштПолучитьСписокДоступныхЦенКонтрагента(Контрагент);
			
			Если СписокТипов.НайтиПоЗначению(ТипЦен) = Неопределено Тогда
				
				ТипЦен = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли; 
	
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	СформироватьНадписьДолга(ДоговорКонтрагента, , ЭлементыФормы.ИнфНадписьДолга, , Истина);
	УстановитьЗаголовкиПоДоговору();

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);

	КонецЕсли;

	
	УстановитьВидимость();

КонецПроцедуры // ПриИзмененииДоговора()

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)

	СписокЗапросов      = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Если ТабличнаяЧасть = Товары Тогда
		СписокЗапросов.Добавить("РасходЦеныНоменклатуры", "По ценам номенклатуры");
		СписокЗапросов.Добавить("ОстаткиНоменклатуры", "По остаткам номенклатуры");
		СписокЗапросов.Добавить("РасходОстаткиИЦеныНоменклатуры", "По остаткам и ценам номенклатуры");
	КонецЕсли;

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена  = мМожноМенятьЦенуВДокументе;
	ЕстьСерия = Ложь;

	Если ТабличнаяЧасть = Товары Тогда
		
		Команда         = "ПодборВТабличнуюЧастьТовары";
		Валюта          = ВалютаДокумента;
		ИмяТабличнойЧасти = "Товары";
		
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		
		Команда           = "ПодборВТабличнуюЧастьУслуги";
		Валюта            = ВалютаДокумента;
		ИмяТабличнойЧасти = "Услуги";
		
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

		Если ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
			Предупреждение("Не выбран договор контрагента!");
			Возврат;
		ИначеЕсли ЗначениеНеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
			Предупреждение("Не выбрана валюта взаиморасчетов по договору!");
			Возврат;
		КонецЕсли;
		Валюта = ДоговорКонтрагента.ВалютаВзаиморасчетов;

		Команда           = "ПодборВТабличнуюЧастьВозвратнаяТара";
		ИмяТабличнойЧасти = "Тара";

	КонецЕсли;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                , Склад);
	СтруктураПараметровПодбора.Вставить("ТипЦен"               , ТипЦен);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	СтруктураПараметровПодбора.Вставить("Контрагент"           , Контрагент);
	СтруктураПараметровПодбора.Вставить("Организация"          , Организация);
	//СтруктураПараметровПодбора.Вставить("Комиссионер"          , Справочники.Контрагенты.ПустаяСсылка());

	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен"  , Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"            , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"      , Валюта);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);

	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("КоличествоМест"  , КоличествоМест);
	ЗначениеВыбора.Свойство("Цена"            , Цена);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);

	Если (ТабличнаяЧасть = Товары ИЛИ ТабличнаяЧасть = ВозвратнаяТара)
	   И Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	ИначеЕсли ТабличнаяЧасть = Услуги И Не Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте товары не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	Если ТабличнаяЧасть = Товары Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	Иначе
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;

	СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда

			СуммаСтрокиДоИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			//Расчет скидок
			Если РассчитыватьАвтоматическиеСкидки() Тогда
				СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
				Разница = СуммаСтрокиПослеИзменения - СуммаСтрокиДоИзменения;

				мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + Разница;
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
				СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
				СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
				СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
				СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
				СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
				РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
			Иначе // Рассчитать реквизиты табличной части.
				РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

			// Итоговая информация об отклонение от плановой себестоимости
			СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			// Нашли, увеличиваем количество в первой найденной строке.

			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Итоговая информация об отклонение от плановой себестоимости
			СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;

		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;

			// Заполняем реквизиты табличной части.
			ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Пересчитаем цену в валюту документа.
			Цена = ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                 СпособЗаполненияЦен,
			                                                 ТипЦен.ЦенаВключаетНДС,
			                                                 УчитыватьНДС,
			                                                 СуммаВключаетНДС,
			                                                 ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			//Расчет скидок

			Если РассчитыватьАвтоматическиеСкидки() Тогда
				СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

				мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения;
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
				СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
				СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
				СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
				СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
				СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
				РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
			Иначе// Рассчитать реквизиты табличной части.
				РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

			// Рассчитываем плановую себестоимость.
			РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);

			// Итоговая информация об отклонение от плановой себестоимости
			СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			СтрокаТабличнойЧасти.Количество = Количество;

			// Заполняем реквизиты табличной части.
			Если ПроверитьУслугаОблагаетсяЕНВД(СтрокаТабличнойЧасти.Номенклатура, Организация, Дата,
				                               мОрганизацияЯвляетсяПлательщикомЕНВД) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Иначе
				ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

			// Пересчитаем цену в валюту документа.
			Цена = ПересчитатьЦенуПриИзмененииВалюты(
				Цена,
				ВалютаЦены,
				ВалютаДокумента,
				КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(
				Цена,
				СпособЗаполненияЦен,
				ТипЦен.ЦенаВключаетНДС,
				УчитыватьНДС,
				СуммаВключаетНДС,
				ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Итоговая информация об отклонение от плановой себестоимости
			СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

			ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			// Пересчитаем цену в валюту документа.
			Цена = ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения.
			// Считаем, что оценочную стоимость возвратной тары всегда задают с НД
			// ставки берутся из номенклатуры.
			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                     СпособЗаполненияЦен,
			                                     ТипЦен.ЦенаВключаетНДС,
			                                     УчитыватьНДС,
			                                     Истина,
			                                     ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС));

			// Рассчитать реквизиты табличной части.
			РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
	КонецЕсли;

	ТабличнаяЧастьИмя = ?(ТабличнаяЧасть = Товары, "Товары",
	                    ?(ТабличнаяЧасть = Услуги, "Услуги", "ВозвратнаяТара"));
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	АвтоЗаполнениеХарактеристики(СтрокаТабличнойЧасти, Истина); //+++ автозаполнение Хар-к по количеству, с комментариями
	
	// Заполняем реквизиты табличной части.
	ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 
	ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект); 
		
КонецПроцедуры // ПриИзмененииНоменклатурыТоваров()

// Производит заполнение и установку необходимых полей при изменении характеристики товара в табличной части.
//
Процедура ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти)

	АвтоЗаполнениеХарактеристики(СтрокаТабличнойЧасти, Истина); //+++ автозаполнение Хар-к по количеству, с комментариями

	// Заполняем реквизиты табличной части.
	ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 
	
КонецПроцедуры // ПриИзмененииХарактеристикиНоменклатурыТоваров()

// Обновляет текущее значение учетной политики розничная торговля облагается ЕНВД.
//
Процедура ПриИзмененииОблагаетсяЕНВД(РежимВызова = "")

	Если ЗначениеНеЗаполнено(РежимВызова) Тогда
		мОрганизацияЯвляетсяПлательщикомЕНВД = УчетнаяПолитикаНалоговыйУчет("ОрганизацияЯвляетсяПлательщикомЕНВД", Организация, Дата);
		мТекущаяОрганизация                  = Организация;
	Иначе
		ПриИзмененииОрганизацияЯвляетсяПлательщикомЕНВД(ЭтотОбъект, РежимВызова, Услуги,
		                                                мОрганизацияЯвляетсяПлательщикомЕНВД, мТекущаяОрганизация);
	КонецЕсли;

КонецПроцедуры // ПриИзмененииОблагаетсяЕНВД()

//Проверяет необходимость рассчета автоматических скидок
//
Функция РассчитыватьАвтоматическиеСкидки()

	Если НЕ мРассчитыватьАвтоматическиеСкидки
	 Или Проведен Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает соответстующие свойства поля ввода цены при изменении 
// номенклатуры в текущей строке табличной части.
//
// Параметры:
//  Номенклатура - ссылка на справочник, элемент номенклатуры, для которого будем устанавливать цену
//
Процедура УстановитьСвойстваПоляВводаЦены(Номенклатура)

	ТекущаяСтрока     = Номенклатура;
	ЭлементУправления = ЭлементыФормы.Товары.Колонки.Цена.ЭлементУправления;

КонецПроцедуры // УстановитьСвойстваПоляВводаЦены()

// Процедура устанавливает доступность кнопки "Заполнить и провести". Кнопка доступна,
// если документ - внешний заказ, его дата совпадает с текущей и установлен хотя бы один
// из флагов Авторазмещение или Авторезервирование.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьКнопкиЗаполнитьИПровести()

	//ЭлементыФормы.ДействияФормы.Кнопки.ДействиеЗаполнитьИПровести.Доступность =  
	//	НачалоДня(Дата) = НачалоДня(ТекущаяДата()) И (Авторазмещение ИЛИ Авторезервирование);

КонецПроцедуры // УстановитьДоступностьКнопкиЗаполнитьИПровести

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	Колонки      = ЭлементыФормы.Товары.Колонки;
	КолонкиТары  = ЭлементыФормы.ВозвратнаяТара.Колонки;
	
	// Колонки налога показываем только тогда, когда его учитываем.
	Если УчитыватьНДС <> Колонки.СтавкаНДС.Видимость Тогда
		УстановитьВидимостьКолонкиТабЧасти( Колонки.СтавкаНДС,    УчитыватьНДС);
	КонецЕсли;

	Если УчитыватьНДС <> Колонки.СуммаНДС.Видимость Тогда
		УстановитьВидимостьКолонкиТабЧасти( Колонки.СуммаНДС,    УчитыватьНДС);
	КонецЕсли;

	// Управление доступностью элементов формы в зависимости от вида операции
	ВидимостьПланирования = Истина;

	УстановитьДоступностьКнопкиЗаполнитьИПровести();

	КнопкиКоманднойПанели = ЭлементыФормы.ДействияФормы.Кнопки;

	//ЭлементыФормы.НадписьАвтоматическое.Видимость    = ВидимостьПланирования;
	//ЭлементыФормы.АвтоРезервирование.Видимость       = ВидимостьПланирования;
	//ЭлементыФормы.АвтоРазмещение.Видимость           = ВидимостьПланирования;
	//КнопкиКоманднойПанели.ДействиеАнализ.Доступность = ВидимостьПланирования;
	//Колонки.Размещение.ИзменятьВидимость             = ВидимостьПланирования;
	//КолонкиТары.Размещение.ИзменятьВидимость         = ВидимостьПланирования;

	УстановитьВидимостьКолонкиТабЧасти(Колонки.Размещение,     ВидимостьПланирования);
	УстановитьВидимостьКолонкиТабЧасти(КолонкиТары.Размещение, ВидимостьПланирования);

	// Услуги на комиссию не отдаем.
	ВидимостьЗакладкиУслуг = ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = ВидимостьЗакладкиУслуг;
	
	//Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ИспользоватьРазрешенныеТипыЦенКонтрагентов") Тогда
	//	Если НЕ ЗначениеНеЗаполнено(ТипЦен) Тогда
	//		Если ТипЦен.РучноеИзменение Тогда
	//			//ЭлементыФормы.Товары.Колонки.Цена.Доступность = Истина;
	//			//ЭлементыФормы.Товары.Колонки.Сумма.Доступность = Истина;
	//			ЭлементыФормы.Товары.Колонки.Цена.ЭлементУправления.ТолькоПросмотр = Ложь;
	//			ЭлементыФормы.Товары.Колонки.Сумма.ЭлементУправления.ТолькоПросмотр = Ложь;
	//		Иначе
	//			//ЭлементыФормы.Товары.Колонки.Цена.Доступность = Ложь;
	//			//ЭлементыФормы.Товары.Колонки.Сумма.Доступность = Ложь;
	//			//ЭлементыФормы.Товары.Колонки.Цена.ЭлементУправления.ТолькоПросмотр = Истина;
	//			//ЭлементыФормы.Товары.Колонки.Сумма.ЭлементУправления.ТолькоПросмотр = Истина;
	//		КонецЕсли; 
	//	КонецЕсли; 
	//КонецЕсли; 
	
//	Если Константы.ОплатыРаспределяютМенеджеры.Получить() Тогда    // Лапенков 20090526 для ЯШТ не выводим данные реквизиты
//		ЭлементыФормы.НадписьСклад.Видимость=Ложь; ЭлементыФормы.Склад.Видимость=Ложь;
//		ЭлементыФормы.НадписьКубатураАвтомобиля.Видимость=Ложь; ЭлементыФормы.КубатураАвтомобиля.Видимость=Ложь;
//		ЭлементыФормы.ИнфКубыАвто.Видимость=Ложь;  ЭлементыФормы.ИнфКубатура.Видимость=Ложь;
//		ЭлементыФормы.НадписьСтруктурнаяЕдиница.Видимость=Ложь;ЭлементыФормы.СтруктурнаяЕдиница.Видимость=Ложь;
//	КонецЕсли;	
КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает заголовки по выбранному договору для:
// - элемента формы НадписьСуммаВзаиморасчетов.
//
// Параметры:
//  Нет.
//
Процедура УстановитьЗаголовкиПоДоговору()

	УстановитьНадписьСуммыВзаиморасчетов(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // УстановитьЗаголовкиПоДоговору()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	СуммаВсего = ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	СуммаВсегоНДС = ПолучитьНДСДокумента(ЭтотОбъект, "Товары") + ПолучитьНДСДокумента(ЭтотОбъект, "Услуги");
	ЭлементыФормы.Всего.Значение    = ФорматСумм(СуммаВсего);
	ЭлементыФормы.ВсегоНДС.Значение = ФорматСумм(СуммаВсегоНДС);

	ВременнаяСтрока = "";

	Если (НЕ ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента))
	   И (ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда

		ВременнаяСтрока = ВременнаяСтрока + КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета) +  ДокументОбъект.ВалютаДокумента
		                + " = " + КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
		                + мВалютаРегламентированногоУчета + ", ";

	КонецЕсли;

	Если НЕ ЗначениеНеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
	Иначе
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
		мРассчитыватьАвтоматическиеСкидки = Ложь;
  	
	ЭлементыФормы.Товары.Колонки.ПроцентАвтоматическихСкидок.Видимость = мРассчитыватьАвтоматическиеСкидки;
	ЭлементыФормы.ОсновнаяПанель.Страницы.АвтоматическиеСкидки.Видимость = мРассчитыватьАвтоматическиеСкидки;
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	ДоступностьНапоминаний(); //+++ 07.12.2011 теперь хранит дату последнего изменения см.ПередЗаписью() в модулеОбъекта
			
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
        Проверен = Ложь;  
		Если ПараметрОснование = Неопределено
		ИЛИ Не ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда

			// Заполнить реквизиты значениями по умолчанию.
			ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета, "Продажа");
			

		КонецЕсли;

		Дата = ТекущаяДата();
		УстановитьНомерДокумента(ЭтотОбъект);
		
		//Если Константы.ОтгружатьЧерезТорговуюКомпанию.Получить() Тогда
		//	ЧерезТК = Истина;
		//КонецЕсли;

	Иначе // повторное открытие
	
		Если РольДоступна("ПолныеПрава") тогда   // НОМЕР РЕДАКТИРОВАТЬ МОЖЕТ ТОЛЬКО С ПОЛНЫМИ ПРАВАМИ!
			ЭлементыФормы.Номер.ТолькоПросмотр = ЛОЖЬ;
		КонецЕсли;
		
		Если ДатаОтгрузки<>'00010101' тогда
			ДатаОтгрузки1 = ДатаОтгрузки;
		иначе
			ДатаОтгрузки1 = Дата;
		КонецЕсли;
		
		
		дата2012 = Дата( 2012,Месяц(ДатаОтгрузки1),День(ДатаОтгрузки1) );
		Если дата2012>='20120615' и дата2012<'20121215' тогда
			ЭтаФорма.Заголовок = "Документ Заказ покупателя сезонный - Зима"; //осень-зима
		иначе 
			ЭтаФорма.Заголовок = "Документ Заказ покупателя сезонный - Лето"; //весна-лето
		КонецЕсли;
		
		//20.12.16 Смирнов
		//ГраницаЗапрета = ПараметрыСеанса.ГраницыЗапретаИзмененияДанных.Получить();
		//ГраницаПериода = ГраницаЗапрета[Ссылка.Организация];
		Если ГраницаПериода <> Неопределено тогда
			Если не РольДоступна("ПравоЗавершенияРаботыПользователей") тогда
				
				Если ГраницаПериода >= НачалоДня(Дата) или Дата<ТекущаяДата()-14*24*60*60 Тогда
					Если не РольДоступна("ПолныеПрава") тогда
						
						Для каждого ЭлементФормы из ЭлементыФормы Цикл
							ЭлементФормы.Доступность = Ложь;
						КонецЦикла;
						//ЭтаФорма.ТолькоПросмотр = истина;
						
						
						
						ЭлементыФормы.ДействияФормы.Доступность=истина;
						ЭлементыФормы.ОсновнаяПанель.Доступность=Истина;
						ЭлементыФормы.ДействияФормы.Кнопки.кнЗаписатьВЗакрытомПериоде.Доступность=истина;
						ЭлементыФормы.АвтоКомплектация.Доступность = истина;
						ЭлементыФормы.ДоговорКонтрагента.Доступность = истина;
						ЭлементыФормы.ОсновныеДействияФормы.Доступность = истина;
						ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Закрыть1.Доступность = ложь;
						ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Записать.Доступность = ложь;
						ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОК.Доступность = ложь;
						ЭлементыФормы.Товары.Доступность=Истина;
						
						Для каждого колонкаТоваров из ЭлементыФормы.Товары.Колонки Цикл
							Если КолонкаТоваров.Имя <> "Цена" и КолонкаТоваров.Имя <> "Код" тогда
								колонкаТоваров.Доступность=Ложь;
							конецесли;
						КонецЦикла;
					Иначе
						//ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Закрыть1.Доступность = ложь;
						//ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Записать.Доступность = ложь;
						//ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОК.Доступность = ложь;
						ЭлементыФормы.ДействияФормы.Кнопки.кнЗаписатьВЗакрытомПериоде.Доступность=истина;
						Для каждого колонкаТоваров из ЭлементыФормы.Товары.Колонки Цикл
							Если КолонкаТоваров.Имя <> "Цена" и КолонкаТоваров.Имя <> "Код" и КолонкаТоваров.Имя <> "Применяемость" и КолонкаТоваров.Имя <> "КомментарийТюнинг" тогда
								колонкаТоваров.Доступность=Ложь;
							конецесли;
						КонецЦикла;
						
					КонецЕсли;
					
					
					Если Контрагент.Экспорт тогда
						ЭлементыФормы.Комментарий.Доступность=Истина;
						ЭлементыФормы.Товары.Колонки.Цена.Доступность = истина;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
        конецЕсли;
	КОНЕЦЕСЛИ;

		

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("ЕдиницаХранения");

	// Установить ограничение - изменять видимоть колонок для таличной части 
	// "Возвратная тара".
	УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ВозвратнаяТара.Колонки, СтруктураКолонок);

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("СтавкаНДС");
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("ПроцентСкидкиНаценки");
	СтруктураКолонок.Вставить("ЕдиницаХранения");
	
	УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Товары.Колонки, СтруктураКолонок);

	// Заполнить подменю выбора печатных форм.
	СписокМакетов = ЭтотОбъект.ПолучитьСписокПечатныхФорм();
	УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати,
	                                       СписокМакетов,
	                                       Новый Действие("ДействияФормыДействиеВыбратьПечатнуюФормы"));

	// Установить печатную форму по умолчанию.
	УстановитьКнопкуПечати(ЭтотОбъект.Метаданные().Имя, ЭтаФорма, СписокМакетов, мПечатнаяФормаПоУмолчанию);

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Обновить содержание информационных строк.
	СформироватьНадписьДолга(ДоговорКонтрагента, , ЭлементыФормы.ИнфНадписьДолга, Ссылка, Истина);
	УстановитьЗаголовкиПоДоговору();

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;

	ПриИзмененииОблагаетсяЕНВД();

	// Установить видимость колонок "ХарактеристикаНоменклатуры"
	УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);


	// установим доступность колонки "Цена" для редактирования
	мМожноМенятьЦенуВДокументе = ИСТИНА; //+++ РазрешитьРедактированиеЦенВДокументах();

	ЭлементыФормы.Товары.Колонки.Цена.ЭлементУправления.ТолькоПросмотр                 = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.Товары.Колонки.Сумма.ЭлементУправления.ТолькоПросмотр                = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.Товары.Колонки.ПроцентСкидкиНаценки.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.Товары.Колонки.СуммаНДС.ЭлементУправления.ТолькоПросмотр             = НЕ мМожноМенятьЦенуВДокументе;

	ЭлементыФормы.Услуги.Колонки.Цена.ЭлементУправления.ТолькоПросмотр                 = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.Услуги.Колонки.Сумма.ЭлементУправления.ТолькоПросмотр                = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.Услуги.Колонки.ПроцентСкидкиНаценки.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.Услуги.Колонки.СуммаНДС.ЭлементУправления.ТолькоПросмотр             = НЕ мМожноМенятьЦенуВДокументе;

	ЭлементыФормы.ВозвратнаяТара.Колонки.Цена.ЭлементУправления.ТолькоПросмотр         = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.ВозвратнаяТара.Колонки.Сумма.ЭлементУправления.ТолькоПросмотр        = НЕ мМожноМенятьЦенуВДокументе;

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	
	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	// Выполнить стандартные действия при определении режима использования плановой себестоимости
	ИзмененитьРежимИспользованияПлановойСебестоимости(ЭтотОбъект, ЭтаФорма, мВалютаРегламентированногоУчета);

	мПоследнееЗначениеЭлементаТайпинга = КонтактноеЛицо;

	// Итоговая информация об отклонение от плановой себестоимости
	СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

	// Информация о типах цен и порогах цены текущей номенклатуры
	//СформироватьНадписьОДоступныхТипахЦенИПороговойЦеныТекущейНоменклатурнойПозиции(ЭлементыФормы.ИнфНадписьПоКонтрагентуИЦене.Заголовок);
	
	мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
	мМинимальныеЦены = Новый ТаблицаЗначений;
	мМинимальныеЦены.Колонки.Добавить("Номенклатура");
	мМинимальныеЦены.Колонки.Добавить("ХарактеристикаНоменклатуры");
	мМинимальныеЦены.Колонки.Добавить("Цена");

	мСписокФильтров = ПолучитьЗначениеПраваПользователя(
					ПланыВидовХарактеристик.ПраваПользователей.НеОтпускатьТоварСЦенойНижеОпределенногоТипа,
					Неопределено);

	Если мРассчитыватьАвтоматическиеСкидки Тогда
		ЭлементыФормы.АвтоматическиеСкидки.ОтборСтрок.ПроцентАвтоматическихСкидок.Значение = 0;
		ЭлементыФормы.АвтоматическиеСкидки.ОтборСтрок.ПроцентАвтоматическихСкидок.ВидСравнения = ВидСравнения.НеРавно;
		ЭлементыФормы.АвтоматическиеСкидки.ОтборСтрок.ПроцентАвтоматическихСкидок.Использование = Истина;
		ЭлементыФормы.АвтоматическиеСкидки.НастройкаОтбораСтрок.ПроцентАвтоматическихСкидок.Доступность = Ложь;
	КонецЕсли;
	

	
	//Если НЕ ЭтоНовый() Тогда
	//	УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
	//КонецЕсли; 

	Если СписокКонтрагентов тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.Контрагенты.Видимость   = истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Контрагенты.Доступность = истина;
	КонецЕсли;
		
	//29.02.2016 - Резерв 3 месяца показывать только Егору Малышеву!	
	Если СокрЛП(ПараметрыСеанса.ТекущийПользователь.Код) = "Малышев Егор" Тогда
	  ЭлементыФормы.Резерв3.Доступность = Истина;
  	КонецЕсли;
    
	Если НомерТорговойТочкиКонтрагента=0 тогда //20.09.2016
		ТочкаТекст = "";
	иначе	 
		ТочкаТекст = получитьНазваниеТочки();
	КонецЕсли;

	ДоступностьКаскадныхФлажковПоАвтокомплектации();
	
КонецПроцедуры

функция получитьНазваниеТочки()
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	Точки.Наименование,
	 |	Точки.Номер,
	 |	Точки.Адрес
	 |ИЗ
	 |	Справочник.Точки КАК Точки
	 |ГДЕ
	 |	Точки.Номер = &Номер";
	 
	 Запрос.УстановитьПараметр("Номер", НомерТорговойТочкиКонтрагента);
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Если Выборка.Следующий() тогда
		 рез = "№ "+формат(Выборка.Номер, "ЧГ=0")+" - "+сокрЛП(выборка.Наименование)+" Адрес: "+сокрЛП(выборка.Адрес);
	 КонецЕсли;
	 
	возврат рез;
	 
КонецФункции	

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Пересчитаем сумму взаиморасчетов.
	Если КурсВзаиморасчетов = 0 Тогда
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = 0;
	Иначе

		ЭлементыФормы.СуммаВзаиморасчетов.Значение = ФорматСумм(ПересчитатьИзВалютыВВалюту(ПолучитьСуммуДокументаСНДС(ЭтотОбъект),  
		                                                          ВалютаДокумента, мТекущаяВалютаВзаиморасчетов,
		                                                          КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КурсВзаиморасчетов,
		                                                          КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),КратностьВзаиморасчетов));

	КонецЕсли;

	ЭлементыФормы.ИнфНадписьКурса.Заголовок = ПолучитьИнформациюКурсаВалютыСтрокой(мТекущаяВалютаВзаиморасчетов, 
	                                                                                 КурсВзаиморасчетов,
	                                                                                 КратностьВзаиморасчетов,
	                                                                                 мВалютаРегламентированногоУчета,
	                                                                                 Истина);

	//УстановитьДоступностьКнопкиДействиеСоздатьРеализацию();

	ОбновитьПодвал();
	
	//УстановитьВидимостьЭлементовОтгрузкиЧерезЧП();
	

	// Подсчитаем количество строк в табличных частях.
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если СтраницаПанели.Имя = "Тара" Тогда
			СтраницаПанели.Заголовок = "Тара (" + ДокументОбъект.ВозвратнаяТара.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "Товары" Тогда
			СтраницаПанели.Заголовок = "Товары (" + ДокументОбъект.Товары.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "Услуги" Тогда
			СтраницаПанели.Заголовок = "Услуги (" + ДокументОбъект.Услуги.Количество() + " поз.)";
		КонецЕсли;

	КонецЦикла;

	ОбновлениеОтображенияВФормеПриТайпинге(ЭтаФорма, ЭтаФорма.ЭлементыФормы.КонтактноеЛицо, мОбработкаТайпинга, мТекстТайпинга);
	
	//ПоказатьЗагрузку();
	//
	//Если НЕ ЗначениеНеЗаполнено(КубатураАвтомобиля) Тогда 
	//	
	//	ЭлементыФормы.ИнфКубыАвто.Заголовок = Строка(КубатураАвтомобиля.Кубатура) + " куб.м.";
	//	
	//Иначе 
	//	
	//	ЭлементыФормы.ИнфКубыАвто.Заголовок = "";
	//	
	//КонецЕсли;
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);

		ИначеЕсли Команда = "ПодборВТабличнуюЧастьУслуги" Тогда
			ОбработкаПодбора(Услуги, ЗначениеВыбора);

		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
			ОбработкаПодбора(ВозвратнаяТара, ЗначениеВыбора);

		ИначеЕсли Команда = "ИзменениеТабличнойЧастиТовары" Тогда

			// Рассчитывает плановую себестоимость во всех строке табличной части документа
			РассчитатьПлановуюСебестоимостьВСтрокахТабЧасти(ЭтотОбъект, мВалютаРегламентированногоУчета);

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
    ДоступностьНапоминаний();//+++ 08.12.2011
	
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
	
	Если мОбновлятьВладельца Тогда
		ОповеститьОЗаписиНовогоОбъекта(ЭтотОбъект);
	КонецЕсли; 
	
КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ЗаполнитьВесНетто(Товары);
	
	Если ДатаДействияПо = '00010101' тогда //+++ 09.07.2014
		 Если дата='00010101' тогда
			 дата=ТекущаяДата();
		 КонецЕсли;	 
		 ДатаДействияПо = мин( КонецГода(дата), ДобавитьМесяц( дата, 6) );
		 Сообщить(строка(Ссылка)+" - Срок действия установлен автоматически по "+Формат(ДатаДействияПо,"ДЛФ=D"), СтатусСообщения.Информация);
	КонецЕсли;
	
	//+++ 26.10.2015 проверка на производителя - Егор
	УдалятьТоварыСразу = ЛОЖЬ; // пока только сообщение!
	ПроверкаНаПроизводителя(УдалятьТоварыСразу);
	
	Если СписокКонтрагентов тогда // 05.11.2015 проверка на Основного!
		естьОсн = ЛОЖЬ;
		для каждого стр1 из Контрагенты цикл
			Если стр1.Контрагент = Контрагент
				и стр1.ДоговорКонтрагента = ДоговорКонтрагента тогда
				естьОсн = истина;
			КонецЕсли;
		КонецЦикла;
		Если НЕ естьОсн тогда
			Предупреждение("В Таблице Контрагентов - обязательно должен быть Основной Контрагент!", 10);
			ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Контрагенты;
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	//+++ вопрос про транзит
	Если Договорконтрагента.ТипДоговора = справочники.ТипыДоговоров.ШинтрейдТранзит тогда
		АвтоКомплектация = Ложь;
		Транзит = Истина;
		подразделение = справочники.Подразделения.НайтиПоКоду("00198");//Шинтрейд транзит
	иначе	
		Если не Отказ и НЕ АвтоКомплектация и не Транзит тогда
			Если Вопрос("Вы хотите привезти товар Транзитом?
				|т.е. Напрямую от поставщика к Покупателю
				|      без заезда в Ярославль?", РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да тогда
				Транзит = Истина;
			КонецЕсли;
		ИначеЕсли не Отказ и АвтоКомплектация и Транзит тогда
			Предупреждение("НЕЛЬЗЯ Устанавливать [v]Транзит и [v]АвтоКомплектацию одновременно!
			|Автокомплектация работает по складам Ярославля (без транзита!!!)", 10);
			
			Отказ = не РольДоступна("ПравоЗавершенияРаботыПользователей");
		КонецЕсли;
	конецЕсли;	
			
КонецПроцедуры // ПередЗаписью()


// Обработчик внешнего события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	Если глТорговоеОборудование <> Неопределено Тогда
		СтруктураПараметров = Новый Структура();
		Если Событие = "BarCodeValue" Тогда

			ИмяТекущейСтраницы = ЭтаФорма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
			Если ИмяТекущейСтраницы = "Товары" Тогда

				Команда         = "ПодборВТабличнуюЧастьТовары";
				Валюта          = ВалютаДокумента;
				ИмяТабличнойЧасти = "Товары";

			ИначеЕсли ИмяТекущейСтраницы = "Услуги" Тогда

				Команда         = "ПодборВТабличнуюЧастьУслуги";
				Валюта          = ВалютаДокумента;
				ИмяТабличнойЧасти = "Услуги";

			ИначеЕсли ИмяТекущейСтраницы = "Тара" Тогда

				Если ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
					Предупреждение("Не выбран договор контрагента!");
					Возврат;
				ИначеЕсли ЗначениеНеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
					Предупреждение("Не выбрана валюта взаиморасчетов по договору!");
					Возврат;
				КонецЕсли;

				Команда           = "ПодборВТабличнуюЧастьВозвратнаяТара";
				Валюта = ДоговорКонтрагента.ВалютаВзаиморасчетов;
				ИмяТабличнойЧасти = "ВозвратнаяТара";

			Иначе

				// Ничего не надо делать
				Возврат;

			КонецЕсли;

			ПредставлениеДок = Метаданные().Представление();
			ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);

			СтруктураПараметров.Вставить("Команда"              , Команда);
			СтруктураПараметров.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
			СтруктураПараметров.Вставить("ТипЦен"               , ТипЦен);
			СтруктураПараметров.Вставить("СпособЗаполненияЦен"  , Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);
			СтруктураПараметров.Вставить("ВалютаЦены"           , Валюта);
			СтруктураПараметров.Вставить("ИмяТабличнойЧасти"    , ИмяТабличнойЧасти);

			глТорговоеОборудование.ОбработатьВнешнееСобытиеОтСканераДляФормы(ЭтаФорма, ЭтотОбъект, СтруктураПараметров, Данные);

		ИначеЕсли Событие = "MagneticStripeCardValue" Тогда
			СтруктураПараметров.Вставить("Команда"              , "");
			глТорговоеОборудование.ОбработатьВнешнееСобытиеОтРидераДляФормы(ЭтаФорма, ЭтотОбъект, СтруктураПараметров, Данные);

		Иначе
			Возврат;
		КонецЕсли;

		Команда = "";
		СтруктураПараметров.Свойство("Команда", Команда);
		//Расчет скидок
		Если РассчитыватьАвтоматическиеСкидки()
			И Команда = "РассчитатьДисконтныеСкидки"Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
			СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
			СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
			СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
			СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
			СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
			РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ВнешнееСобытие()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Изменить" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// группового изменения значений реквизитов табличной части "Товары".
//
Процедура КоманднаяПанельТоварыДействиеИзменить(Кнопка)

	// Получим контекст обработки
	ИзменениеТабличнойЧастиТовары      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменые формы.
	ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект             = ЭтотОбъект;
	ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента            = ЭтаФорма;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьНДС                   = УчитыватьНДС; 
	ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице          = Ложь;
	ФормаИзменениеТабличнойЧастиТовары.мРассчитыватьАвтоматическиеСкидки   = РассчитыватьАвтоматическиеСкидки();
	ФормаИзменениеТабличнойЧастиТовары.мМинимальныеЦены = мМинимальныеЦены;
	ФормаИзменениеТабличнойЧастиТовары.мСписокФильтров = мСписокФильтров;
	ФормаИзменениеТабличнойЧастиТовары.мСпособЗаполненияЦен       = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	//Перенесем табличную часть
	ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры // КоманднаяПанельТоварыДействиеИзменить()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	// Сохраняем текущие заначения реквизитов документа.
	ТекущиеЗначенияРеквизитов = Новый Структура();
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийТипЦен",				ТипЦен);
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийВалютаДокумента",	ВалютаДокумента); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийКурсДокумента",		КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийКратностьДокумента",	КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийУчитыватьНДС",		УчитыватьНДС); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийСуммаВключаетНДС",	СуммаВключаетНДС); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийИспользоватьПлановуюСебестоимость",	ИспользоватьПлановуюСебестоимость);
	ТекущиеЗначенияРеквизитов.Вставить("Контрагент", Контрагент);

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            , "Товары");
	Если СтруктураЗначений <> Неопределено Тогда
		ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "Товары",
		                   мВалютаРегламентированногоУчета, , СтруктураЗначений, мСуммаДокументаБезСкидок);

		Если СтруктураЗначений.ТекущийТипЦен <> СтруктураЗначений.НовыйТипЦен Тогда
			ОбновитьФормуПодбора("ТипЦен");
		КонецЕсли;
	КонецЕсли;

	// Выполнить стандартные действия при изменении режима использования плановой себестоимости
	ИзмененитьРежимИспользованияПлановойСебестоимости(ЭтотОбъект, ЭтаФорма, мВалютаРегламентированногоУчета, ТекущиеЗначенияРеквизитов.ТекущийИспользоватьПлановуюСебестоимость);

	// Пересчитывает плановую себестоимость с учетом новой валюты и налогов
	ИзменитьВалютуНалогиПлановойСебестоимостиТабЧасти(ЭтотОбъект, ТекущиеЗначенияРеквизитов, мВалютаРегламентированногоУчета);

	// Итоговая информация об отклонение от плановой себестоимости
	СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;

	УстановитьВидимость();

	//СформироватьНадписьОДоступныхТипахЦенИПороговойЦеныТекущейНоменклатурнойПозиции(ЭлементыФормы.ИнфНадписьПоКонтрагентуИЦене.Заголовок);
	
КонецПроцедуры // КоманднаяПанельТоварыДействиеЦеныВалюта()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Возвратная тара", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеПодбор(Кнопка)

	ДействиеПодбор(ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	НапечататьДокументПоУмолчанию(ЭтотОбъект, глТекущийПользователь, мПечатнаяФормаПоУмолчанию);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
//
Процедура ДействияФормыДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = Кнопка.Текст;
		СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		СписокМакетов = ПолучитьСписокПечатныхФорм();
		СтрокаМакетаВСписке = СписокМакетов.НайтиПоЗначению(Кнопка.Имя);
		Если СтрокаМакетаВСписке <> Неопределено Тогда
			Печать(СтрокаМакетаВСписке.Значение);
			СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
			СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;			
			
		Иначе
			СсылкаВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Кнопка.Имя, "_", "-")));
			Печать(СсылкаВнешнейФормы);
			СтруктураМакета.Макет = СсылкаВнешнейФормы;
			СтруктураМакета.ПредставлениеМакета = Кнопка.Текст;
		КонецЕсли;		
		
		мПечатнаяФормаПоУмолчанию = СтруктураМакета.Макет;
		СохранитьТекущуюКнопкуПечати(ЭтотОбъект.Метаданные().Имя, СтруктураМакета);
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при нажатии кнопки "Заполнить и провести" командной панели формы,
// вызывает заполнение документа с проведением.
//
Процедура ДействияФормыДействиеЗаполнитьИПровести(Кнопка)
	Если НЕ ЗначениеНеЗаполнено(ДоговорКонтрагента) И ДоговорКонтрагента.ОтветственноеЛицо<> глТекущийПользователь Тогда
		СообщитьОбОшибке("Вы не являетесь лицом ответственным за договор.");
		Возврат;
	КОнецЕсли;	
	Проверен=Ложь;
	ЗаписатьВФорме( );
	//Если Авторазмещение ИЛИ Авторезервирование Тогда

	//	// Заполнять с проведением можно документы с текущую датой
	//	Если НачалоДня(Дата) = НачалоДня(ТекущаяДата()) Тогда
	//		Если НЕ ЭтоНовый() Тогда

	//			// Если документ ранее был записан, то он будет переноситься в конец дня из-за оперативного проведения, о чем следует предупредить.
	//			Ответ = Вопрос("В режиме заполнения с проведением документ будет проводиться оперативно. " + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
	//			Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
	//				Возврат;
	//			КонецЕсли; 
	//		КонецЕсли; 
	//	Иначе
	//		Возврат;
	//	КонецЕсли; 

	//	// Обработка выполняется в транзакции. Она будет отменена, если заполнить не удалось
	//	НачатьТранзакцию();
	//	Отказ = Ложь;

	//	// Очистим записи документа по размещению, если он был ранее проведен
	//	Если Проведен Тогда
	//		НаборОстаткиТоваров = РегистрыНакопления.ТоварыВРезервеНаСкладах.СоздатьНаборЗаписей();
	//		НаборОстаткиТоваров.Отбор.Регистратор.Установить(Ссылка);
	//		НаборОстаткиТоваров.Прочитать();
	//		НаборОстаткиТоваров.Очистить();
	//		НаборОстаткиТоваров.Записать();
	//		НаборЗаказыПоставщикам  = РегистрыНакопления.РазмещениеЗаказовПокупателей.СоздатьНаборЗаписей();
	//		НаборЗаказыПоставщикам.Отбор.Регистратор.Установить(Ссылка);
	//		НаборЗаказыПоставщикам.Прочитать();
	//		НаборЗаказыПоставщикам.Очистить();
	//		НаборЗаказыПоставщикам.Записать();
	//	КонецЕсли;

	//	// Заполнение документа
	//	ЗаполнитьТабличныеЧастиПередПроведениемУпр(Отказ);

	//	// Если заполнить удалось, то запись документа с проведением

	//	НеПроведен = Ложь;
	//	Если НЕ Отказ Тогда
	//		Попытка
	//			Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
	//		Исключение
	//			НеПроведен = Истина;
	//		КонецПопытки;
	//	КонецЕсли;

	//	Если Отказ ИЛИ НеПроведен Тогда
	//		ОтменитьТранзакцию();
	//		Если НеПроведен Тогда
	//			Предупреждение("Операция не выполнена!");
	//		КонецЕсли;
	//		
	//	Иначе
	//		ЗафиксироватьТранзакцию();
	//	КонецЕсли; 

	//	// Итоговая информация об отклонение от плановой себестоимости
	//	СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

	//Иначе
	//	Предупреждение("Для режима заполнения с проведением требуется установка флагов ""Авторазмещение"" или ""Авторезервирование""");
	//КонецЕсли; 

	//// Вывести в заголовке формы вид операции.
	//УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеЗаполнитьИПровести()

// Процедура вызывается при нажатии кнопки "Анализ" командной панели формы,
// вызывает анализ текущего состояния заказа.
//
Процедура ДействияФормыДействиеАнализ(Кнопка)
	
	//+++ 24.04.2012 - новый отчет на построителе, связь по Контрагенту
	АнализЗаказа = Отчеты.АнализСезонногоЗаказа.Создать();
	
	АнализЗаказаФорма = АнализЗаказа.ПолучитьФорму();
 	
	АнализЗаказаФорма.НачДата = НачалоДня(Ссылка.Дата);
	АнализЗаказаФорма.КонДата = ?(ДатаДействияПо='00010101',КонецГода(ТекущаяДата()), КонецДня(ДатаДействияПо) ); //+++21.01.2015 анализ за период Сезонного заказа!
	АнализЗаказаФорма.СезонныйЗаказ = Ссылка;
	
	
	АнализЗаказаФорма.Открыть();
	АнализЗаказаФорма.ОтчетСформировать("");
	
	
КонецПроцедуры // ДействияФормыДействиеАнализ()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при нажатии кнопки "Создать реализацию" командной панели формы,
// вызывает создание документов реализации и счетов-фактур, согласно текущему размещению.
//
Процедура ДействияФормыДействиеСоздатьРеализацию(Кнопка)

	ФормаФормированияРеализаций = ПолучитьФорму("ФормаФормированияРеализаций", ЭтаФорма);
	ФормаФормированияРеализаций.ЗаказПокупателя = Ссылка;
	ФормаФормированияРеализаций.Открыть();

КонецПроцедуры // ДействияФормыДействиеСоздатьРеализацию()

// Процедура вызывается при нажатии кнопки "Создать реализацию ..." меню "Действия" командной панели формы,
// вызывает фокрытие формысоздания документов реализации и счетов-фактур, согласно текущему размещению.
//
Процедура ДействияФормыДействиеСоздатьРеализациюСОткрытиемФормы(Кнопка)

	ФормаФормированияРеализаций = ПолучитьФорму("ФормаФормированияРеализаций", ЭтаФорма);
	ФормаФормированияРеализаций.ЗаказПокупателя = Ссылка;
	ФормаФормированияРеализаций.ПоказыватьФормуПринудительно = Истина;
	ФормаФормированияРеализаций.Открыть();

КонецПроцедуры // ДействияФормыДействиеСоздатьРеализациюСОткрытиемФормы()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Услуги", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Услуги".
//
Процедура КоманднаяПанельУслугиПодбор(Кнопка)
	
	ДействиеПодбор(Услуги);
	
КонецПроцедуры // КоманднаяПанельУслугиПодбор()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	Если мТекущаяДатаДокумента>Дата //30.11.2015
		и НЕ (РольДоступна("ПолныеПрава") или РольДоступна("ПравоЗавершенияРаботыПользователей")) тогда
		Предупреждение("У Вас недостаточно прав для изменения даты документа на более раннюю!!!", 30);
		дата = мТекущаяДатаДокумента;
		возврат;
	КонецЕсли;

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	УстановитьДоступностьКнопкиЗаполнитьИПровести();

	//ПриИзмененииОблагаетсяЕНВД("ДатаДокумента");
	
	////Расчет скидок
	//Если РассчитыватьАвтоматическиеСкидки() Тогда
	//	СтруктураПараметров = Новый Структура;
	//	СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
	//	СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
	//	СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
	//	СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
	//	СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
	//	СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
	//	РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	//КонецЕсли;

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "При изменении" флажка Авторазмещение
//
Процедура АвтоРазмещениеПриИзменении(Элемент)

	УстановитьДоступностьКнопкиЗаполнитьИПровести();
	
КонецПроцедуры // АвтоРазмещениеПриИзменении()

// Процедура - обработчик события "При изменении" флажка Авторезервирование
//
Процедура АвтоРезервированиеПриИзменении(Элемент)

	УстановитьДоступностьКнопкиЗаполнитьИПровести();
	
КонецПроцедуры // АвтоРезервированиеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьНомерДокумента(ЭтотОбъект);

	// Выполняем общие действия для всех документов при изменении Организация.
	ПриИзмененииЗначенияОрганизации(ЭтотОбъект);

	ПриИзмененииОблагаетсяЕНВД("Организация");

	// Надо установить банк. счет, если он принадлежит другой организации
	// или не заполнен.
	Если ЗначениеНеЗаполнено(СтруктурнаяЕдиница) 
	 ИЛИ (ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") 
	      И (СтруктурнаяЕдиница.Владелец <> Организация)) Тогда

		СтруктурнаяЕдиница = Организация.ОсновнойБанковскийСчет;

	КонецЕсли;

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	Если НЕ ДоговорКонтрагента.Пустая() тогда
		ДоговорКонтрагента = справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Предупреждение("  Для учета отгрузок ТОЛЬКО по одному (сезонному) договору
						|выберите этот договор, иначе анализ будет по всем договорам.", 30);
    КонецЕсли;						
	// Выполняем общие действия для всех документов при изменении Контрагент.
	//ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);

	//ПриИзмененииДоговора();
	
	//ДатаОплаты = Дата;
	//Если ДоговорКонтрагента.ДержатьРезервБезОплатыОграниченноеВремя Тогда
	////	ДатаОплаты = ДатаОплаты + ДоговорКонтрагента.ЧислоДнейРезерваБезОплаты * 24 * 60 * 60;
	//КонецЕсли;
	
	Если ЗначениеНеЗаполнено(КонтактноеЛицо) Тогда
		КонтактноеЛицо = Контрагент.ОсновноеКонтактноеЛицо;
	Иначе
		Если КонтактноеЛицо.Владелец <> Контрагент Тогда
			КонтактноеЛицо = Контрагент.ОсновноеКонтактноеЛицо;
		КонецЕсли;
	КонецЕсли;
	
	//СформироватьНадписьОДоступныхТипахЦенИПороговойЦеныТекущейНоменклатурнойПозиции(ЭлементыФормы.ИнфНадписьПоКонтрагентуИЦене.Заголовок);


КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;

	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);

	// Заказ можно оформлять по договору, взаиморасчеты по которому ведутся или по заказам или по 
	// договору в целом.
	СтруктураДополнительныхПараметров = Новый Структура();
	СтруктураОтбора = Новый Структура();
	СписокСпособовВеденияВзаиморасчетов = Новый СписокЗначений();
	СписокСпособовВеденияВзаиморасчетов.Добавить(Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом);
	СписокСпособовВеденияВзаиморасчетов.Добавить(Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
	
	СтруктураОтбора.Вставить("ЗначениеОтбора", СписокСпособовВеденияВзаиморасчетов);
	СтруктураОтбора.Вставить("ВидСравненияОтбора", ВидСравнения.ВСписке);
	СтруктураДополнительныхПараметров.Вставить("ВедениеВзаиморасчетов", СтруктураОтбора);
	
	СписокТиповДоговоров  = Новый СписокЗначений;
	СписокТиповДоговоров.Добавить(Справочники.ТипыДоговоров.TyreTechnology);
	СписокТиповДоговоров.Добавить(Справочники.ТипыДоговоров.WheelsGroupLimited);
	
	СтруктураОтбораТиповДоговоров = Новый Структура();
	СтруктураОтбораТиповДоговоров.Вставить("ЗначениеОтбора", СписокТиповДоговоров);
	СтруктураОтбораТиповДоговоров.Вставить("ВидСравненияОтбора", ВидСравнения.ВСписке);
	Если РольДоступна("ДополнительныеПраваВЭД") Тогда
	    СтруктураДополнительныхПараметров.Вставить("ТипДоговора", СтруктураОтбораТиповДоговоров);
	КонецЕсли;

	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
	                                        СписокВидовДоговоров , СтандартнаяОбработка, СтруктураДополнительныхПараметров);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Склад
//
Процедура СкладНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.НеРавно, СтандартнаяОбработка);

КонецПроцедуры // СкладНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода
// "Структурная единица". Процедура предлагает выбор пользователю из
// соттветствующих справочников и открывает форму списка для выбора 
// значения с отбором по текущему контрагенту. 
//
Процедура СтруктурнаяЕдиницаНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораЗначенияСтруктурнойЕдиницы(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры // СтруктурнаяЕдиницаНачалоВыбора()

// Процедура - обработчик события "Нажатие" кнопки "КнопкаПерерасчитатьДолг".
// Процедура вызывает сервисный механизм пересчета долга контрагента 
// по выбранному в форме договору взаиморасчетов и сделке.
//
Процедура КнопкаПерерасчитатьДолгНажатие(Элемент)

	СформироватьНадписьДолга(ДоговорКонтрагента, , ЭлементыФормы.ИнфНадписьДолга);

КонецПроцедуры // КнопкаПерерасчитатьДолгНажатие()

// Процедура - обработчик события "НачалоВыбора" элемента формы АдресДоставки
//
Процедура АдресДоставкиНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если Грузополучатель.Пустая() Тогда
		
		Если Контрагент.Пустая() Тогда
			ВвестиЗначение(Контрагент, "Выберите контрагента");
		КонецЕсли;
		
		Если НЕ Контрагент.Пустая() Тогда
			ФормаВыбора = РегистрыСведений.КонтактнаяИнформация.ПолучитьФормуСписка("ФормаСписка", ЭтаФорма);
			ФормаВыбора.РежимВыбора = Истина;
			
			ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Значение = Контрагент;
			ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Использование = Истина;
			
			СтруктураОтбораАдресов = Новый СписокЗначений;
			СтруктураОтбораАдресов.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
			ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.ВидСравнения = ВидСравнения.ВСписке;
			ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Значение = СтруктураОтбораАдресов;
			ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Использование = Истина;
			ФормаВыбора.ЭлементыФормы.РегистрСведенийСписок.Колонки.Тип.Видимость = Ложь;
			
			ВыбАдресДоставки = ФормаВыбора.ОткрытьМодально();
			
			Если Не ЗначениеНеЗаполнено(ВыбАдресДоставки) Тогда
				АдресДоставки = ВыбАдресДоставки;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если НЕ Грузополучатель.Пустая() Тогда
			
			ФормаВыбора = РегистрыСведений.КонтактнаяИнформация.ПолучитьФормуСписка("ФормаСписка", ЭтаФорма);
			ФормаВыбора.РежимВыбора = Истина;
			
			ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Значение = Грузополучатель;
			ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Использование = Истина;
			
			СтруктураОтбораАдресов = Новый СписокЗначений;
			СтруктураОтбораАдресов.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
			ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.ВидСравнения = ВидСравнения.ВСписке;
			ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Значение = СтруктураОтбораАдресов;
			ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Использование = Истина;
			ФормаВыбора.ЭлементыФормы.РегистрСведенийСписок.Колонки.Тип.Видимость = Ложь;
			
			ВыбАдресДоставки = ФормаВыбора.ОткрытьМодально();
			
			Если Не ЗначениеНеЗаполнено(ВыбАдресДоставки) Тогда
				АдресДоставки = ВыбАдресДоставки;
			КонецЕсли;
			
		КонецЕсли;
		

		
	КонецЕсли; 

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ДисконтнаяКарта"
//
Процедура ДисконтнаяКартаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка    = Ложь;
	ФормаВыбора             = Справочники.ИнформационныеКарты.ПолучитьФормуВыбора(,Элемент);
	ФормаВыбора.РежимВыбора = Истина;

	ФормаВыбора.СправочникСписок.Отбор.ТипКарты.Значение      = Перечисления.ТипыИнформационныхКарт.Дисконтная;
	ФормаВыбора.СправочникСписок.Отбор.ТипКарты.Использование = Истина;

	ФормаВыбора.СправочникСписок.Отбор.ТипКарты.ВидСравнения          = ВидСравнения.Равно;

	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "Открытие" поля ввода "ДисконтнаяКарта"
//
Процедура ДисконтнаяКартаОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если НЕ ЗначениеНеЗаполнено(Элемент.Значение) Тогда
		Процент = Элемент.Значение.ПроцентСкидки;
		Элемент.Значение.ПолучитьФорму(, ЭтаФорма, ЭтаФорма).ОткрытьМодально();
		Если Элемент.Значение.ПроцентСкидки <> Процент Тогда
			Если РассчитыватьАвтоматическиеСкидки() Тогда
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
				СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
				СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
				СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
				СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
				СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
				РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ДисконтнаяКарта"
//
Процедура ДисконтнаяКартаПриИзменении(Элемент)

	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Товары". Формирует данные в колонке "Всего".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.Товары.Колонки.Всего.Видимость Тогда
		ОформлениеСтроки.Ячейки.Всего.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Всего.Текст = ФорматСумм(ДанныеСтроки.Сумма
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС));

	КонецЕсли;

	ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);

	// Рассчитать и показать в колонках информацию о сумме и отклонении от плановой себестоимости
	ЗаполнитьСуммуИОтклонениеОтПлановойСебестоимостиТабЧасти(ОформлениеСтроки, ДанныеСтроки, ЭтотОбъект);

	ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	ПоказатьСуммуБезСкидок(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Цена, ДанныеСтроки.Количество);
	
	//***2018.08.01 Задача №37574
	Если ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ВыделитьДискиРаспродажи.Пометка Тогда   
		Если ТаблицаРаспродажи.Найти(ДанныеСтроки.Номенклатура) <> Неопределено Тогда
			ОформлениеСтроки.ЦветФона = WebЦвета.Лосось;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ПриНачалеРедактирования"  строки табличной 
// части "Товары" 
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	СуммаСтроки = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;
	Если (НоваяСтрока) И СуммаСтроки > 0 Тогда

		//Расчет скидок
		Если РассчитыватьАвтоматическиеСкидки() Тогда
			мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтроки;
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
			СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
			СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
			СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
			СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
			СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
			РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
		КонецЕсли;

	КонецЕсли;

	// Установим способ редактирования цены.
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Номенклатура);
	КонецЕсли;

КонецПроцедуры // ТоварыПриНачалеРедактирования()

// Процедура - обработчик события "ПриОкончанииРедактирования" табличной части "Товары".
//
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	КонецПроцедуры // ТоварыПриОкончанииРедактирования()

// Процедура - обработчик события "ПередУдалением" табличной части "Товары".
//
Процедура ТоварыПередУдалением(Элемент, Отказ)
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;
	мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок - СуммаСтроки;
КонецПроцедуры

// Процедура - обработчик события "ПослеУдаления" табличной части "Товары".
//
Процедура ТоварыПослеУдаления(Элемент)

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;

	// Итоговая информация об отклонение от плановой себестоимости
	СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

КонецПроцедуры // ТоварыПослеУдаления()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);
	
	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
		
		мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения - СуммаСтроки;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Номенклатура.ВидТовара = перечисления.ВидыТоваров.Диски Тогда
		Отбор = Новый Структура;
		Отбор.вставить("Объект",СтрокаТабличнойЧасти.Номенклатура);
		Отбор.вставить("Свойство",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90185"));
		ЗаписьЗавод = РегистрыСведений.ЗначенияСвойствОбъектов.Получить(Отбор);
		СтрокаТабличнойЧасти.Завод = ЗаписьЗавод.значение;
	конецЕсли;
	
	

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;

	ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти);

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;

		мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения - СуммаСтроки;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

	// Рассчитываем плановую себестоимость.
	РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	// Сохраняем текущее значение коэффициента
	СтароеЗначениеКоэффициента = ЭлементыФормы.Товары.ТекущиеДанные.Коэффициент;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;

	// Выполнить общие действия для всех документов при изменении Единица.
	ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	// Пересчитываем плановую себестоимость.
	ПриИзмененииЕдиницыТабЧастиПлановаяСебестоимость(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект, СтароеЗначениеКоэффициента);

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;

		мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения - СуммаСтроки;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыЦенаПриИзменении()


// Процедура - обработчик события "ПриНачалеВыбораИзСписка" поля ввода цены
// в строке табличной части "Товары" и "Возвратная тара"
//
Процедура ТоварыЦенаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение("Не выбрана позиция номенклатуры!"); 
		Возврат;
	КонецЕсли; 

	Элемент.СписокВыбора = СформироватьСписокРозничныхЦен(СтрокаТабличнойЧасти.Номенклатура,
															СтрокаТабличнойЧасти.ЕдиницаИзмерения,
															СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
															СтрокаТабличнойЧасти.Размещение,
															мВалютаРегламентированногоУчета,
															, Дата, ВалютаДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
															УчитыватьНДС, СуммаВключаетНДС, 
															ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

КонецПроцедуры // ТоварыЦенаНачалоВыбораИзСписка()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	 //Проверим на предельно допустимое количество

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА НЕ ЗаказыПокупателейСезонныеОстаткиИОбороты.ВРезерве
		|				ТОГДА ЗаказыПокупателейСезонныеОстаткиИОбороты.КоличествоПриход
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Приход,
		|	СУММА(ЗаказыПокупателейСезонныеОстаткиИОбороты.КоличествоКонечныйОстаток) КАК Остаток,
		|	ЗаказыПокупателейСезонныеОстаткиИОбороты.Номенклатура,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПокупателейСезонныеОстаткиИОбороты.ВРезерве) КАК ВРезерве
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателейСезонные.ОстаткиИОбороты(
		|			,
		|			,
		|			,
		|			,
		|			ЗаказПокупателяСезонный = &Ссылка
		|				И Номенклатура = &Номенклатура) КАК ЗаказыПокупателейСезонныеОстаткиИОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыПокупателейСезонныеОстаткиИОбороты.Номенклатура";

	Запрос.УстановитьПараметр("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Результат = Запрос.Выполнить();
    Если Не результат.Пустой() Тогда
	Выборка = Результат.Выбрать();
    Выборка.Следующий();
	 минимальноеКоличество = Выборка.Приход-Выборка.Остаток;
	 Если СтрокаТабличнойЧасти.количество<МинимальноеКоличество Тогда
		СтрокаТабличнойЧасти.количество=МинимальноеКоличество;
		Сообщить("Количество исправлено на минимально допустимое");
	 конецЕсли;
	конецЕсли;
	
	
	
	
	АвтоЗаполнениеХарактеристики(СтрокаТабличнойЧасти, Истина); //+++ автозаполнение Хар-к по количеству, с комментариями

	// Рассчитать реквизиты табличной части.
	РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	//РассчитатьКубатуруТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	
	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе
		// Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;

	// Рассчитать новое количество
	РассчитатьКоличествоТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;

		мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения - СуммаСтроки;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыКоличествоМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля процента скидки-наценки
// в строке табличной части "Товары".
//
Процедура ТоварыПроцентСкидкиНаценкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыПроцентСкидкиНаценкиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении Суммы.

	ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, глТекущийПользователь);

	// Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "ПриНачалеВыбора" поля ввода размещения
// в строке табличной части "Товары" и "Возвратная тара"
//
Процедура ТоварыРазмещениеНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораЗначенияРазмещения(ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры // ТоварыРазмещениеНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода размещения 
// в строке табличной части "Товары" 
//
Процедура ТоварыРазмещениеПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти );
	
	Если (((ТипЗнч(Элемент.Значение)=ТипЗнч(Справочники.Склады.ПустаяСсылка()))) и ((Элемент.Значение.ЗапретитьИспользование) и (Не ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"РазрешитьОтгрузкиСоВсехСкладов")))) Тогда 
		Предупреждение("Вам нельзя работать с данным складом");
		ЭлементыФормы.Товары.ТекущиеДанные.Размещение = Неопределено;
	КонецЕсли;


КонецПроцедуры // ТоварыРазмещениеПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "ВозвратнаяТара". Формирует данные в колонке "ЕдиницаХранения".
//
Процедура ВозвратнаяТараПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.ВозвратнаяТара.Колонки.ЕдиницаХранения.Видимость Тогда
		ОформлениеСтроки.Ячейки.ЕдиницаХранения.УстановитьТекст(ДанныеСтроки.Номенклатура.ЕдиницаХраненияОстатков);
	КонецЕсли;

	ПоказатьКодАртикул(мКолонкиВозвратнаяТара, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении возвратной тары.
	ПриИзмененииВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

	// Заполнить реквизиты табличной части.
	ЗаполнитьЦенуВозвратнойТарыТабЧастиПоступление(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект); 

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении суммы.
	ПриИзмененииСуммыВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараСуммаПриИзменении()

// Процедура - обработчик события "ПриНачалеВыбора" поля ввода размещения
// в строке табличной части "Возвратная тара"
//
Процедура ВозвратнаяТараРазмещениеНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораЗначенияРазмещения(ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры // ВозвратнаяТараРазмещениеНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ УСЛУГИ

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Услуги".
//
Процедура УслугиНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Заполняем реквизиты табличной части.
	ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	Если ПроверитьУслугаОблагаетсяЕНВД(СтрокаТабличнойЧасти.Номенклатура, Организация, Дата,
		                               мОрганизацияЯвляетсяПлательщикомЕНВД) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	Иначе
		ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

	СтрокаТабличнойЧасти.Цена = ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,
		Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(),
		ТипЦен,
		Дата,
		Справочники.ЕдиницыИзмерения.ПустаяСсылка(), 
		ВалютаДокумента,
		КурсВзаиморасчетов,
		КратностьВзаиморасчетов,,
		ДокументОбъект.ДоговорКонтрагента);

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // УслугиНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Услуги".
//
Процедура УслугиКоличествоПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // УслугиКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля процента скидки-наценки
// в строке табличной части "Товары".
//
Процедура УслугиПроцентСкидкиНаценкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыПроцентРозничнойНаценкиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Услуги".
//
Процедура УслугиЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // УслугиЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Услуги".
//
Процедура УслугиСуммаПриИзменении(Элемент)

	ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект, глТекущийПользователь);
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры// УслугиСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Услуги".
//
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // УслугиСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы НДС
// в строке табличной части "Услуги".
//
Процедура УслугиСуммаНДСПриИзменении(Элемент)

КонецПроцедуры // УслугиСуммаНДСПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ
// УПРАВЛЕНИЕ ОТНОШЕНИЯМИ С КЛИЕНТАМИ

// Процедура - обработчик события "НачалоВыбора" элемента формы ВремяНапоминания 
//
Процедура ВремяНапоминанияНачалоВыбора(Элемент, СтандартнаяОбработка)

	мЧас = Час(Элемент.Значение);
	мМинута = Минута(Элемент.Значение);
	
КонецПроцедуры // ВремяНапоминанияНачалоВыбора()

// Процедура - обработчик события "ОбработкаВыбора" элемента формы ВремяНапоминания 
//
Процедура ВремяНапоминанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Элемент.Значение = НачалоДня(ВыбранноеЗначение) + мЧас*60*60 + мМинута*60;
	мЧас = 0;
	мМинута = 0;
	
КонецПроцедуры // ВремяНапоминанияОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" элемента формы (Флажка) НапомнитьОСобытии 
//
Процедура НапомнитьОСобытииПриИзменении(Элемент)

	Если НапомнитьОСобытии Тогда
		Если ВремяНапоминания = Дата("00010101000000") Тогда
			ВремяНапоминания = Дата(ТекущаяДата() + ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ИнтервалНапоминанияДоНачалаСобытия")*60);
		КонецЕсли; 
	Иначе
		ВремяНапоминания = Дата("00010101000000");
	КонецЕсли; 
	
	ДоступностьНапоминаний();
	
КонецПроцедуры // НапомнитьОСобытииПриИзменении()

// Процедура - обработчик события "Нажатие" элемента формы НадписьСобытия 
//
Процедура НадписьСобытияНажатие(Элемент)

	Если НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ФормаСобытий = Документы.Событие.ПолучитьФормуСписка(, , Ссылка);
	ФормаСобытий.ДокументСписок.Отбор.Основание.Значение = Ссылка;
	ФормаСобытий.ДокументСписок.Отбор.Основание.Использование = Истина;
	ФормаСобытий.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Основание.Доступность = Ложь;
	ФормаСобытий.Открыть();
	
КонецПроцедуры // КнопкаСобытийНажатие()

// Процедура - обработчик события "НачалоВыбораИзСписка" элемента формы ВремяНапоминания 
//
Процедура ВремяНапоминанияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ВыбратьВремяИзСписка(Элемент, ЭтаФорма, Ответственный, СтандартнаяОбработка);
	
КонецПроцедуры // ВремяНапоминанияНачалоВыбораИзСписка()

// Процедура - обработчик события "НачалоВыбора" поля ввода "КурсВзаиморасчетов".
//
Процедура КурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Выбрать дату курса и заполнить курс взаиморасчетов.
	ВыбратьКурсВзаиморасчетов(ЭтотОбъект);

КонецПроцедуры // КурсВзаиморасчетовНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" элемента формы КонтактноеЛицо 
//
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	Если НЕ ЗначениеНеЗаполнено(КонтактноеЛицо) Тогда
		Если ЗначениеНеЗаполнено(Контрагент) ИЛИ КонтактноеЛицо.ОбъектВладелец <> Контрагент Тогда
			Контрагент = КонтактноеЛицо.ОбъектВладелец;
			ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);
			ПриИзмененииДоговора();
		КонецЕсли; 
	КонецЕсли; 
	
	мПоследнееЗначениеЭлементаТайпинга = Элемент.Значение;
	
КонецПроцедуры // КонтактноеЛицоПриИзменении()

// Процедура - обработчик события "НачалоВыбора" элемента формы КонтактноеЛицо 
//
Процедура КонтактноеЛицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НачалоВыбораКонтактногоЛицаКонтрагента(Элемент, СтандартнаяОбработка, Контрагент);
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" элемента формы КонтактноеЛицо 
//
Процедура КонтактноеЛицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпинга(), Тип("СправочникСсылка.КонтактныеЛица"));
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЯ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	Иначе
		ПроверкаПеретаскиванияВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Товары");
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Товары", ЭтотОбъект, ЭтаФорма);

		//Расчет скидок
		Если РассчитыватьАвтоматическиеСкидки() Тогда
			мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
			СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
			СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
			СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
			СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
			СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
			РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "ВозвратнаяТара");
	Иначе
		ПроверкаПеретаскиванияВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "ВозвратнаяТара");
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "Перетаскивание" табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "ВозвратнаяТара", ЭтотОбъект, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Услуги".
//
Процедура УслугиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Услуги");
	Иначе
		ПроверкаПеретаскиванияВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Услуги");
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "Перетаскивание" табличной части "Услуги".
//
Процедура УслугиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Услуги", ЭтотОбъект, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

Процедура ТоварыКоличествоОткрытие(Элемент, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	//Если (Проведен и Константы.ИспользованиеРезерва.Получить() и (Дата>=Константы.ДатаНачалаУчета.Получить())) Тогда 
	//	Ответ = Вопрос("Менять табличную часть можно только после отмены проведения. Отменить проведение документа ?",РежимДиалогаВопрос.ДаНет);
	//	Если Ответ = КодВозвратаДиалога.Да Тогда 
	//		Записать(РежимЗаписиДокумента.ОтменаПроведения);
	//	Иначе 
	//		Возврат;
	//	КонецЕсли;			
	//КонецЕсли;

КонецПроцедуры

Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	//СформироватьНадписьОДоступныхТипахЦенИПороговойЦеныТекущейНоменклатурнойПозиции(ЭлементыФормы.ИнфНадписьПоКонтрагентуИЦене.Заголовок);
	
КонецПроцедуры

Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	//ПравоНаИзменение = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"РазрешитьРедактироватьЗаказыПокупателя");
	//
	//Если (ПравоНаИзменение=Ложь) Тогда
	//	Отказ = Истина;
	//КонецЕсли;
	
	//Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ИспользоватьРазрешенныеТипыЦенКонтрагентов") Тогда
	//
	//	Если ЗначениеНеЗаполнено(ТипЦен) Тогда
	//	
	//		Предупреждение("Необходимо выбрать Контрагента, Договор и Тип цен продажи!"); 
	//		Отказ = Истина;
	//	
	//	КонецЕсли; 
	//
	//КонецЕсли; 
КонецПроцедуры

Процедура СкладПриИзменении(Элемент)
	
	//Если ((Элемент.Значение.ЗапретитьИспользование) и (Не ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"РазрешитьОтгрузкиСоВсехСкладов"))) Тогда 
	//	Предупреждение("Вам нельзя работать с данным складом");
	//	Склад = Справочники.Склады.ПустаяСсылка();
	//КонецЕсли;
	
КонецПроцедуры

Процедура ПодразделениеКомпанииПриИзменении(Элемент)
	
	УстановитьНомерДокумента(ЭтотОбъект);
	
КонецПроцедуры


Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	//ПравоНаИзменение = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"РазрешитьРедактироватьЗаказыПокупателя");
	//
	//Если (ПравоНаИзменение=Ложь) Тогда
	//	Отказ = Истина;
	//КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыЗаполнитьПоТипуЦен(Кнопка)
	// Заполняем по типу цен.
	//Если (ТипЦен.ЦенаРассчитывается = Истина) Тогда 
	//	Дата = ?(Дата='0001-01-01',ТекущаяДата(),Дата);
	//	ЗаполнитьТЧПоТипуЦен(Товары,Дата,ТипЦен);
	//КонецЕсли;
КонецПроцедуры




Процедура ДействияФормыПроверитьВозможностьКомплектацииДиски(Кнопка)
	Если ЭтоНовый() Тогда 
		Сообщить("Для проверки комплектации к дискам требуется сперва записать заказ. Жми кнопку ЗАПИСАТЬ.");
		Возврат;
	КонецЕсли;	
//Если НЕ Проверен Тогда
	Запрос=Новый Запрос;
		
	Запрос.Текст="ВЫБРАТЬ  ЗаказПокупателяТовары.Номенклатура,
	|	ЗаказПокупателяТовары.Количество КоличествоЗаказано,
	|	ЗаказыПокупателейОстатки.КоличествоОстаток КОличествоВРезерве,
	|	ЗаказПокупателяТовары.Количество+ЕстьNULL(ЗаказыПокупателейОстатки.КоличествоОстаток,0) ОбщееКоличествоТребуется
	|	ПОМЕСТИТЬ ВТ_Диски
	|	ИЗ
	|   (ВЫБРАТЬ
	|	Номенклатура,
	|	Количество
	|ИЗ	Документ.ЗаказПокупателя.Товары 
	|ГДЕ Ссылка = &ЗаказПокупателя 
	|И Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура ИЗ РегистрСведений.КомплектующиеНоменклатуры	)
	|И Номенклатура.ВидТовара=Значение(Перечисление.ВидыТоваров.Диски)
	|) КАК ЗаказПокупателяТовары
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(,ЗаказПокупателя<>&ЗаказПокупателя И Заказпокупателя.Проверен 
	|И Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура ИЗ РегистрСведений.КомплектующиеНоменклатуры	))ЗаказыПокупателейОстатки
	|ПО ЗаказПокупателяТовары.Номенклатура=ЗаказыПокупателейОстатки.Номенклатура
	|;
	|ВЫБРАТЬ ВТ_Диски.Номенклатура,КомплектующиеНоменклатуры.Комплектующая,ВТ_Диски.ОбщееКоличествоТребуется 
	|ПОМЕСТИТЬ ВТ_1
	|ИЗ
	|ВТ_Диски ЛЕВОЕ СОЕДИНЕНИЕ
	|РегистрСведений.КомплектующиеНоменклатуры	КомплектующиеНоменклатуры
	|ПО ВТ_Диски.Номенклатура= КомплектующиеНоменклатуры.Номенклатура
	|;
	|ВЫБРАТЬ Комплектующая,СУММА (ОбщееКоличествоТребуется) ОбщееКоличествоТребуется 
	|ПОМЕСТИТЬ ВТ_2
	|ИЗ ВТ_1
	|СГРУППИРОВАТЬ ПО Комплектующая
	|;
	|// ЗДЕСЬ КРЫШКИ И ДИСКИ
	|ВЫБРАТЬ ВТ_2.Комплектующая Номенклатура,ВТ_2.Комплектующая.ВидТовара ,ВТ_2.ОбщееКоличествоТребуется, ТоварыНаСкладахОстатки.КоличествоОстаток ,
	|ВТ_2.ОбщееКоличествоТребуется-ЕстьNULL(ТоварыНаСкладахОстатки.КоличествоОстаток,0) КоличествоТребуется1Передел 
	|ПОМЕСТИТЬ ВТ_3
	|ИЗ ВТ_2
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(, НЕ Склад.ЗапретитьИспользование И Номенклатура В(
	|ВЫБРАТЬ РАЗЛИЧНЫЕ Комплектующая ИЗ ВТ_2)) ТоварыНаСкладахОстатки
	|ПО ВТ_2.Комплектующая=ТоварыНаСкладахОстатки.Номенклатура
	|ГДЕ ЕстьNULL(ВТ_2.ОбщееКоличествоТребуется,0) - ЕстьNULL(ТоварыНаСкладахОстатки.КоличествоОстаток,0)>0
	|//И ВТ_2.Комплектующая.ВидТовара=Значение(Перечисление.ВидыТоваров.Диски)
	|;
	|ВЫБРАТЬ ВТ_3.Номенклатура, КомплектующиеНоменклатуры.Комплектующая, ВТ_3.КоличествоТребуется1Передел,
	|ТоварыНаСкладахОстатки.КоличествоОстаток,
	|ЕстьNULL(ВТ_3.КоличествоТребуется1Передел,0)- ЕстьNULL(ТоварыНаСкладахОстатки.КоличествоОстаток,0) ТребуетсяКоличествоИтого
	|ПОМЕСТИТЬ ВТ_4
	|ИЗ ВТ_3
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|РегистрСведений.КомплектующиеНоменклатуры	КомплектующиеНоменклатуры
	|ПО ВТ_3.Номенклатура=КомплектующиеНоменклатуры.Номенклатура
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(, НЕ Склад.ЗапретитьИспользование) ТоварыНаСкладахОстатки
	|ПО КомплектующиеНоменклатуры.Комплектующая=ТоварыНаСкладахОстатки.Номенклатура
	|ГДЕ (КомплектующиеНоменклатуры.Комплектующая ЕСТЬ NULL ИЛИ КомплектующиеНоменклатуры.Комплектующая.ВидТовара=Значение(Перечисление.ВидыТоваров.Диски))
	|И  ВТ_3.Номенклатура.ВидТовара=Значение(Перечисление.ВидыТоваров.Диски)
	|И ЕстьNULL(ВТ_3.КоличествоТребуется1Передел,0)- ЕстьNULL(ТоварыНаСкладахОстатки.КоличествоОстаток,0)>0
	|;
	|ВЫБРАТЬ  НОменклатура,ТребуетсяКоличествоИтого ИЗ
	|(ВЫБРАТЬ НОменклатура, КоличествоТребуется1Передел  ТребуетсяКоличествоИтого
	|ИЗ ВТ_3 ГДЕ НОменклатура.ВидТовара<>Значение(Перечисление.ВидыТоваров.Диски)) Крышки
	|ОБЪЕДИНИТЬ
	|ВЫБРАТЬ Номенклатура, ТребуетсяКоличествоИтого ИЗ
	|ВТ_4
	|;
	|УНИЧТОЖИТЬ ВТ_1
	|;
	|УНИЧТОЖИТЬ ВТ_2
	|;
	|УНИЧТОЖИТЬ ВТ_3
	|;
	|УНИЧТОЖИТЬ ВТ_4";
	Запрос.УстановитьПараметр("ЗаказПокупателя",Ссылка);
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Количество()>0 Тогда
		СообщитьОбОшибке("Для комплектации данного заказа не хватает :");
		Пока Выборка.Следующий() Цикл
			Сообщить(Строка(Выборка.Номенклатура)+": "+Выборка.ТребуетсяКоличествоИтого +"шт.");
		КонецЦикла;	
	КонецЕсли;

	//КонецЕсли;
	
	
КонецПроцедуры

Процедура ДействияФормыИсторияИзменений(Кнопка)
	//формаИзменений = РегистрыСведений.ЖурналИзменений.ПолучитьФормуСписка();
	//формаИзменений.Отбор.Объект.ВидСравнения = ВидСравнения.Равно;
	//формаИзменений.Отбор.Объект.Значение = Ссылка;
	//формаИзменений.Отбор.Объект.Использование = Истина;
	////блокируем изменение отбора по документу
	//формаИзменений.ЭлементыФормы.РегистрСведенийСписок.НастройкаОтбора.Объект.Доступность = ложь;
	//Состояние("Идет формирование истории изменений...");
	//формаИзменений.Открыть();
	//Состояние("");
КонецПроцедуры

//+++( 12.12.2011
Процедура ДействияФормыПослатьСчет(Кнопка)
			
	//========================Проверим уч.запись======================
	  УЗ =  ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяУчетнаяЗапись");
		Если НЕ ЗначениеЗаполнено(УЗ) тогда
			//Если РольДоступна("ПолныеПрава") тогда
			УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("no-reply@yst76.ru");
			Если ЗначениеЗаполнено(УЗ) тогда
				//Ответ = КодВозвратаДиалога.Нет;
				//Если Вопрос("У Вас не установлена Учетная запись эл.почты!
				//|Продолжить отправку с эл.адреса организации (no-reply@yst76.ru)?",РежимДиалогаВопрос.ДаНет, 10, Ответ, "Эл.Адрес отправки") = КодВозвратаДиалога.Нет тогда
				//возврат;
				//КонецЕсли;
			иначе // в базе нет уч.записи: no-reply@yst76.ru
				сигнал();
				Предупреждение("У Вас Не установлена -Основная учетная запись эл.почты!
							   |Для отправки - обязательно требуется обратный эл.адрес!",30);
				возврат;
			КонецЕсли;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Номер) или ЭтоНовый() тогда
			сигнал();
			Предупреждение("Перед отправкой письма - сохраните текущий документ!",30);
			возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЭтотОбъект.Контрагент) тогда
			сигнал();
			Предупреждение("Перед отправкой письма - Заполните поле 'Контрагент' !",30);
			возврат;
		КонецЕсли;	
//======================Получим адрес эл.почты=================
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Объект
		|	И КонтактнаяИнформация.Тип = &Тип
		|	И КонтактнаяИнформация.Вид = &Вид";
		
		Запрос.УстановитьПараметр("Объект", ЭтотОбъект.Контрагент);
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыДляОбменаДокументами);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		АдресЭлПочтыКонтрагента = "";
		Если Выборка.Следующий() тогда
			АдресЭлПочтыКонтрагента = СокрЛП(выборка.Представление);
		иначе
			сигнал();
			Предупреждение("У контрагента: "+строка(ЭтотОбъект.Контрагент)+" - не задан эл.адрес!
						   |Отправка письма - не возможна!",30);
			Возврат;
		КонецЕсли;
	
	//============================================================		
		Ответ = КодВозвратаДиалога.Нет;
		Если Вопрос("Вы действительно хотите отправить ""Счет на оплату""
					|для "+строка(ЭтотОбъект.Контрагент)+"
					|на адрес эл.почты: "+АдресЭлПочтыКонтрагента+"?", РежимДиалогаВопрос.ДаНет, 30) = КодВозвратаДиалога.Нет тогда
			Возврат;
		КонецЕсли;
		
		
	  Состояние("Идет отправка письма...");  i=0;
	  ВременнаяПапка = КаталогВременныхФайлов();   //"C:\"; // "D:\Рассылка\";
	    	  
	  СписокФайловВложений=новый СписокЗначений;
	  ДокументОбъект=ЭтотОбъект;
			  //Печатается 1-я форма
			    		ИмяФайлаСообщения="Счет_Заказ_№"+ДокументОбъект.Номер+".xls";
				  		ТабличныйДокументОбъект=ДокументОбъект.ПечатьСчетаЗаказа("Счет"); //Счет на оплату
				    	
				  		ТабличныйДокументОбъект.Записать(временнаяПапка+ИмяФайлаСообщения,ТипФайлаТабличногоДокумента.XLS);
				  		СписокФайловВложений.Добавить(ВременнаяПапка+ИмяФайлаСообщения);
						
	Послать(АдресЭлПочтыКонтрагента,СписокФайловВложений, УЗ);	  
	
Состояние(" ");
сигнал();
Предупреждение("Отправка файла "+ИмяФайлаСообщения+" 
			   |на эл.адрес: "+АдресЭлПочтыКонтрагента+" завершена!");
	
	  
КонецПроцедуры

Процедура Послать(АдресПолучателя,СписокФайловВложений, УЗ)
	   ТекстСообщения0 ="   Добрый день,
						 |
						 |Высылаем Вам копию Счета № "+Строка(Номер)+" от "+Формат(Дата,"ДЛФ=DD")+"
						 |
						 |
						 |С уважением,
						 |"+?(ЗначениеЗаполнено(ДоговорКонтрагента.ОтветственноеЛицо), "менеджер "+ДоговорКонтрагента.ОтветственноеЛицо.Наименование, Ответственный.Наименование)+",
						 |
						 |ЗАО Торговая Компания ""Яршинторг"", 
						 |юр./факт.адрес: 150044, Ярославская обл, Ярославль г, Базовая ул, дом № 3, стр.2
						 |тел./факс: (4852) 200-200, 67-11-67
						 |Web-сайт : http://www.yst76.ru
						 |";

	    	
	    ИПП=Новый ИнтернетПочтовыйПрофиль;
		ИПП.АдресСервераSMTP=УЗ.SMTPСервер;
		ИПП.ПортSMTP=УЗ.ПортSMTP;
		Если УЗ.ТребуетсяSMTPАутентификация Тогда
			ИПП.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
			ИПП.ПарольSMTP         = УЗ.ПарольSMTP;
			ИПП.ПользовательSMTP   = УЗ.ЛогинSMTP;
		Иначе
			ИПП.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
			ИПП.ПарольSMTP         = "";
			ИПП.ПользовательSMTP   = "";
		КонецЕсли;
		Письмо=Новый ИнтернетПочтовоеСообщение;
		Письмо.Отправитель=УЗ.АдресЭлектроннойПочты;
		
	   //+++( 19.12.2011 - разбор адреса на несколько адресов
		 //Письмо.Получатели.Добавить(АдресПолучателя);
		i = Найти(АдресПолучателя,";"); j=Найти(АдресПолучателя, ",");
		k=?(i>0 и i>j,  i, ?(j>0 и j>i, j, 0) );
			
		Если i=0 и j=0 тогда
			Письмо.Получатели.Добавить(АдресПолучателя);
		иначе
			АдрОстаток = СокрЛП(АдресПолучателя);
			пока (k>0) цикл
				Адр1 = Лев(АдрОстаток, k-1);
				Если СокрЛП(Адр1)<>"" и Найти(Адр1,"@")>0 и Найти(Адр1,".")>0 тогда
					Письмо.Получатели.Добавить(Адр1);
				иначе
					Сообщить("Адрес '"+Адр1+"' не содержит @ или .");
				КонецЕсли;
				АдрОстаток = Прав(АдрОстаток, стрДлина(АдрОстаток)-k);
				i = Найти(АдрОстаток,";"); j=Найти(АдрОстаток, ",");
				k=?(i>0 и i>j,  i, ?(j>0 и j>i, j, 0) );
			КонецЦикла;
			Если СокрЛП(АдрОстаток)<>"" и Найти(АдрОстаток,"@")>0 и Найти(АдрОстаток,".")>0 тогда
				Письмо.Получатели.Добавить(АдрОстаток);
			КонецЕсли;

		КонецЕсли; //+++ )
		
		Если ЗначениеЗаполнено(СписокФайловВложений) И СписокФайловВложений.Количество()>0 Тогда
			Для Каждого ТекАдр Из СписокФайловВложений Цикл
				Письмо.Вложения.Добавить(ТекАдр.Значение);
			КонецЦикла;
		КонецЕсли;
        Письмо.Тема="Счет от ЗАО ТК Яршинторг";
	    
		
		Письмо.ИмяОтправителя ="ЗАО ТК ""Яршинторг"", г.Ярославль";
	    Письмо.Организация ="ЗАО ТК ""Яршинторг"", г.Ярославль";
	    Письмо.Тексты.Добавить(ТекстСообщения0,ТипТекстаПочтовогоСообщения.простойТекст);
	
		Почта=Новый ИнтернетПочта;
	    Почта.Подключиться(ИПП);
		
		попытка
			Почта.Послать(Письмо);
	    	Почта.Отключиться();
		исключение
			сообщить("Не удалось отправить письмо! "+ОписаниеОшибки(), СтатусСообщения.Внимание);
		КонецПопытки;
		
КонецПроцедуры

//+++)

// { 20120212 Лапенков
Функция ПроверитьСборныеДиски()
	ЕстьLegeArtis=Ложь;
	ЕстьYST=Ложь;
	Для сч=0 по Товары.Количество()-1 Цикл
		Если Товары[сч].Номенклатура.ВидТовара=Перечисления.ВидыТоваров.Диски И Найти (Товары[сч].Номенклатура,"YST")>0 Тогда
			ЕстьYST=Истина;
		КонецЕсли;	
		Если Товары[сч].Номенклатура.ВидТовара=Перечисления.ВидыТоваров.Диски И Найти (Товары[сч].Номенклатура,"LegeArtis")>0 Тогда
			ЕстьLegeArtis=Истина;
		КонецЕсли;	
	
	КонецЦикла;	
	Возврат (ЕстьLegeArtis И ЕстьYST);
	
КонецФункции

Процедура СоздатьЗаказПокупателяYST()
	//ЗаказПокупателяYST=Документы.ЗаказПокупателя.СоздатьДокумент();
	ЗаказПокупателяYST=ЭтотОбъект.Скопировать();
	ЗаказПокупателяYST.Товары.Очистить();
	сч=0;
		Пока сч < Товары.Количество() Цикл
			Если Товары[сч].Номенклатура.ВидТовара=Перечисления.ВидыТоваров.Диски И Найти (Товары[сч].Номенклатура,"YST")>0 Тогда
				НоваяСтрока=ЗаказПокупателяYST.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Товары[сч]);
				Товары.Удалить(сч);
		Иначе 
			сч=сч+1;
		КонецЕсли;	
	КонецЦикла;	
ЗаказПокупателяYST.ПолучитьФорму().Открыть();	
	
КонецПроцедуры	
 // } 20120212 Лапенков

Процедура ДатаОтгрузкиПриИзменении(Элемент)
	дата2012 = Дата( 2012,Месяц(ДатаОтгрузки),День(ДатаОтгрузки) );
	
	Если дата2012>='20120615' и дата2012<'20121215' тогда
		ЭтаФорма.Заголовок = "Документ Заказ покупателя сезонный - Зима"; //осень-зима
	иначе 
		ЭтаФорма.Заголовок = "Документ Заказ покупателя сезонный - Лето"; //весна-лето
    КонецЕсли;
		
	
КонецПроцедуры

Процедура КоманднаяПанельТоварыПересчетЦен(Кнопка)
	
	////+++ 05.06.2017 - ВЫКЛЮЧЕНА заглушка! 
	////Цены можно пересчитать в любой момент по текущим правилам и ценам!
	//
	//Если ГраницаПериода > ссылка.Дата или ссылка.Дата<ТекущаяДата()-14*24*60*60 Тогда
	//	Возврат
	//КонецЕсли;
	
	Если Товары.Количество()=0 тогда
		Предупреждение("Нет товаров для пересчета!");
		Возврат;
	КонецЕсли;
		
	СписокНом = Товары.ВыгрузитьКолонку("Номенклатура");
	
	//+++ 14.01.2016 - срез цен на ТЕКУЩУЮ ДАТУ... но не более чем константа!
	MaxDays	  = Константы.ВеличинаПодсчетаПериодаВДокументеЦены.Получить(); //30-90 дней = 1-3 мес!
	ДатаСреза = ?(Контрагент.ДатаСрезаЦен>'20140101', Контрагент.ДатаСрезаЦен, ТекущаяДата() );
	
	Если ( НачалоДня(ТекущаяДата()) - ДатаСреза )> 86400*MaxDays Тогда
		Предупреждение("Расчет цен на дату: "+формат(ДатаСреза,"")+" 
					   |превышает макс.разрешенный период "+строка(MaxDays)+" дней!
					   |поэтому расчет цен будет произведен на текущую дату!",30);
	   ДатаСреза = неопределено; // на текущую дату!
	КонецЕсли;  

	
	табЗнач1  = новый ТаблицаЗначений;
	табЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента(Контрагент, СписокНом, ДатаСреза); //14.01.2016 по ДатаСреза, по документу Политика ценообразования

    //+++ 07.11.2013
	Если ТипЗнч(табЗнач1) = Тип("Строка") тогда //если нет документа политики ценообразования - то по регистрам сведений "Политика ценообразования"
		табЗнач1  = новый ТаблицаЗначений;
		табЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(Контрагент, СписокНом, , , ДатаСреза ); //14.01.2016 по ДатаСреза,
 		
		Если ТипЗнч(табЗнач1) = Тип("Строка") тогда // нет политики ценообразования!
			//Предупреждение(табЗнач1);
			сообщить("Ошибка при пересчете по регистрам правил ценообразования: "+табЗнач1, СтатусСообщения.Внимание); 
			возврат;
		иначе
			Сообщить("---- Цены пересчитаны по регистрам: ""Правила ценообразования"" и ""Правила Ценообразования Общие"" ----");
		КонецЕсли;
	
	иначе
		Сообщить("---- Цены пересчитаны по документу ""Политика ценообразования"" ----");
	КонецЕсли;
	
		
	
Для каждого стр1 из ЭтотОбъект.Товары цикл
	стр2 = табЗнач1.найти( стр1.Номенклатура, "Номенклатура");
	стр1Цена = стр1.Цена;
	Если стр2 = неопределено тогда
		стр2МинимальнаяЦена = 0;
	иначе
		стр2МинимальнаяЦена = стр2.МинимальнаяЦена;
	КонецЕсли;
	
	//-------------------------------
	  Если стр1Цена<>стр2МинимальнаяЦена тогда
		  сообщить(строка(стр1.НомерСтроки)+") Цена: "+Формат(стр1Цена,"ЧДЦ=2")+" >> "+Формат(стр2МинимальнаяЦена,"ЧДЦ=2") );
		  //стр1.ПроцентСкидкиНаценки = (стр2МинимальнаяЦена/стр1Цена - 1)*100; // СКИДКА
		стр1.Цена = стр2МинимальнаяЦена; // изменение Цены по политике ценообразования
		  РассчитатьСуммуТабЧасти(стр1, ЭтотОбъект);
		  РассчитатьСуммуНДСТабЧасти(стр1, ЭтотОбъект);
	  КонецЕсли;
	  
КонецЦикла;
Сообщить("-------------------------------------------------------
	     |");	
КонецПроцедуры

Процедура АвтоКомплектацияПриИзменении(Элемент)
	
	Если АвтоКомплектация тогда
		////***2018.10.04 заремлено по задаче 55673 с согласования Егора
		////Если НЕ (РольДоступна("ПолныеПрава") 
		////		  //+++ 29.07.2014 - отдельная настройка РазрешитьАвтокомплектацию вместо РазрешитьЦенообразование
		////  		  //     или ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьЦенообразование") ) тогда
		////			  или ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьАвтокомплектацию") ) тогда
		////		  //+++)	  
		////	Предупреждение("У вас недостаточно прав для установки признака Автокомплектация или Транзит!", 120);
		////	АвтоКомплектация = ЛОЖЬ;
		////	Транзит = ЛОЖЬ;
		////КонецЕсли;	
	КонецЕсли;	
	
	Если АвтоКомплектация тогда
		Если Транзит тогда    //+++ 29.07.2014  транзит и автокомплектация вместе не работают... 
								//можно сделать, чтобы работало и по подразделению... 
								//если в ОбменСУТИнтернетМагазин.АвтоКомплектацияЗаказовПоСезонным() 
								// ПодразделениеЯШТ брать из Сезонного заказа
			Если НЕ (СокрЛП(Контрагент.Код) = "93187" 
					или СокрЛП(Контрагент.Код) = "П000835"
					или СокрЛП(Контрагент.Код) = "93801"
					или СокрЛП(Контрагент.Код) = "94036" // обособленное ЕКТ
					или склад.Транзитный) тогда    //+++ 30.07.2014 - дополнительный учет!
								
			Предупреждение("Признак Автокомплектация и Транзит можно включать ТОЛЬКО для Филиалов!
						   | 
					  	   |  Совместная установка признаков Транзит и АвтоКомплектация 
						   |  для контрагента: "+строка(Контрагент)+" - не возможна!",120);
				Транзит = ЛОЖЬ;
				
			Иначе
			Предупреждение("    Признак  Автокомплектация и Транзит используется
							| для формирование и учета всех заказов покупателя на перемещение
	        				|           со складов Ярославля на филиал!",120);
			КонецЕсли;
			
		ИначеЕсли Подразделение.Код<>"00005" тогда
			Предупреждение("  Автокомплектация резервирует товары со складов Ярославля!
						   
						   |  Выбор Подразделения - используется только для просмотра 
						   |  менеджерами филиала: "+строка(Подразделение)+"!",120);
		КонецЕсли;
	КонецЕсли;
	
	Если Автокомплектация Тогда     
		Предупреждение("Автокомплектация будет осуществляться с учетом аналогов. Для автокомлектации без учета аналогов снимите галку на закладке ""Дополнительно"".");
        СУчетомАналогов = АвтоКомплектация;
		АвтокомплектацияСУчетомАналогов = АвтоКомплектация;
	конецЕсли;	
	ДоступностьКаскадныхФлажковПоАвтокомплектации();//30.01.2019
КонецПроцедуры

//26.10.2015 ----------------1 производитель товаров----------------------
процедура ПроверкаНаПроизводителя(Удалять=ЛОЖЬ)
	Если не Производитель.Пустая() тогда
		
		i=0;
		пока i<Товары.Количество() цикл
			стр1 = Товары[i];
			Если стр1.Номенклатура.Производитель <> Производитель тогда
				Если не Удалять тогда
					сообщить(строка(стр1.НомерСтроки)+") "+строка(стр1.Номенклатура)+" - производитель не соответствует выбранному", СтатусСообщения.Внимание); 
				иначе   
					Товары.Удалить(i);
					продолжить; // i тот же, количество уменьшается
				КонецЕсли;	
			КонецЕсли;	
		i=i+1;
		КонецЦикла;
	
	КонецЕсли;	
КонецПроцедуры	

Процедура ПроизводительПриИзменении(Элемент)
	
	Если не Производитель.Пустая() тогда

		Режим = РежимДиалогаВопрос.ДаНет;
		Текст = "ru = ""Удалить товары других производителей?"";"
		     + " en = ""Do you want to delete goods of other producer?""";
		Ответ = Вопрос(НСтр(Текст), Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			фл = Истина;
		иначе
			фл = ЛОЖЬ;
		КонецЕсли;

		ПроверкаНаПроизводителя(фл);
		
	КонецЕсли;

КонецПроцедуры

Процедура СписокКонтрагентовПриИзменении(Элемент)
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.Контрагенты.Видимость   = СписокКонтрагентов;
	ЭлементыФормы.ОсновнаяПанель.Страницы.Контрагенты.Доступность = СписокКонтрагентов;

	Если СписокКонтрагентов и Контрагенты.Количество()=0 тогда
		стр1 = Контрагенты.Добавить(); // текущего контр и его договор
        стр1.Контрагент = Контрагент;
        стр1.ДоговорКонтрагента = ДоговорКонтрагента;
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Контрагенты;
	иначеЕсли НЕ СписокКонтрагентов тогда // очищаем список
		Контрагенты.Очистить();
	КонецЕсли;	
	
КонецПроцедуры

Процедура КонтрагентыПриПолученииДанных(Элемент, ОформленияСтрок)
	для каждого стр1 из ОформленияСтрок цикл
		Если стр1.ДанныеСтроки.Контрагент = Контрагент
			и стр1.ДанныеСтроки.ДоговорКонтрагента = ДоговорКонтрагента тогда
			стр1.Шрифт = новый Шрифт(стр1.Шрифт,,,Истина); //Жирный
		КонецЕсли;	
		если не стр1.ДанныеСтроки.ДоговорКонтрагента.пустая() тогда
			стр1.Ячейки.Менеджер.ОтображатьТекст = Истина;
			стр1.Ячейки.Менеджер.Текст = стр1.ДанныеСтроки.ДоговорКонтрагента.ОтветственноеЛицо.Наименование;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура КоманднаяПанель2ОсновнойКонтрагент(Кнопка)
	текЭл = ЭлементыФормы.Контрагенты.ТекущиеДанные;
	если текЭл <> неопределено тогда
	Контрагент = текЭл.Контрагент;
	ДоговорКонтрагента = текЭл.ДоговорКонтрагента;
	КонецЕсли;
КонецПроцедуры

Процедура КонтрагентыПередУдалением(Элемент, Отказ)
	Если Контрагенты.Количество()=1 тогда
		Предупреждение("Нельзя удалять все строки!",10);
		Отказ = истина;
	КонецЕсли;	
КонецПроцедуры

Процедура СУчетомАналоговПриИзменении(Элемент)
	
	Если СучетомАналогов=ЛОЖЬ Тогда //проверка при выключении!
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			//+++ 11.09.2018 не Количество, а просто ссылка
			|	ЗаказПокупателя.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
			|ГДЕ
			|	ЗаказПокупателя.ДокументОснование = &ссылкаСЗ";
		Запрос.УстановитьПараметр("ссылкаСЗ", ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Сообщить("По данному Сезонному заказу уже были заказы, отменять учет аналогов нельзя!");
		    СУчетомАналогов = Истина;	
		конецЕсли;
	КонецЕсли;
  	ДоступностьКаскадныхФлажковПоАвтокомплектации();//30.01.2019
КонецПроцедуры

Процедура ДатаОплатыПриИзменении(Элемент)
	
	//30.01.2019 закрыть сезонный заказ можно в любой момент!
	Если ДатаДействияПо>НачалоДня(ТекущаяДата()) тогда 
		//*** 2016.03.07
		Если (НачалоДня(ДатаДействияПо) < НачалоДня(ДобавитьМесяц(Дата, 2))) 
			ИЛИ (НачалоДня(ДатаДействияПо) > НачалоДня(ДобавитьМесяц(Дата, 10))) Тогда
			Сообщить("Период действия сезонного заказа должен быть от 2 до 10 месяцев!", СтатусСообщения.Внимание);
			ДатаДействияПо = ДобавитьМесяц(Дата,2); // сразу "правильно" ставим!
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоШтамповкеПриИзменении(Элемент)
	Если ПоШтамповке и не Автокомплектация Тогда
		Сообщить("Предварительно нужно включить флаг [v]Автокомплектация!", СтатусСообщения.Внимание);
	конецЕсли;	
КонецПроцедуры

Процедура ТоварыПриПолученииДанных(Элемент, ОформленияСтрок)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателяСезонныйТовары.Номенклатура,
	|	ЗаказПокупателяСезонныйТовары.НомерСтроки,
	|	ЗаказПокупателяСезонныйТовары.Количество
	|ПОМЕСТИТЬ ВТ_Док
	|ИЗ
	|	Документ.ЗаказПокупателяСезонный.Товары КАК ЗаказПокупателяСезонныйТовары
	|ГДЕ
	|	ЗаказПокупателяСезонныйТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыПокупателейСезонныеОбороты.Номенклатура,
	|	ЗаказыПокупателейСезонныеОбороты.КоличествоПриход КАК КоличествоПриход
	|ПОМЕСТИТЬ ВТ_Движения
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателейСезонные.Обороты(
	|			,
	|			,
	|			,
	|			ЗаказПокупателяСезонный = &ссылка
	|				И ВРезерве = ЛОЖЬ) КАК ЗаказыПокупателейСезонныеОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Док.Номенклатура,
	|	ВТ_Док.НомерСтроки,
	|	ВТ_Док.Количество,
	|	ЕСТЬNULL(ВТ_Движения.КоличествоПриход, 0) КАК КоличествоПриход
	|ИЗ
	|	ВТ_Док КАК ВТ_Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Движения КАК ВТ_Движения
	|		ПО ВТ_Док.Номенклатура = ВТ_Движения.Номенклатура
	|ГДЕ
	|	ВТ_Док.Количество <> ЕСТЬNULL(ВТ_Движения.КоличествоПриход, 0)";
	
	Запрос.УстановитьПараметр("ссылка",ссылка);
	Результат = Запрос.Выполнить();
	
	//Если не Результат.пустой() тогда
		Таб= Результат.Выгрузить();
		Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
			
			Данныестроки = ОформлениеСтроки.Данныестроки;
			
			ПоказатьОбъем(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
			Если ДанныеСтроки.номенклатура.ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
				Попытка ОформлениеСтроки.Ячейки.Объем.Текст = Строка(Число(ОформлениеСтроки.Ячейки.Объем.Текст)*1.3);Исключение КонецПопытки;   //плотников
			иначе
				Попытка ОформлениеСтроки.Ячейки.Объем.Текст = Строка(Число(ОформлениеСтроки.Ячейки.Объем.Текст)*1);Исключение КонецПопытки;
			КонецЕсли;
			
			Нашли = Таб.Найти(ДанныеСтроки.НомерСтроки,"НомерСтроки");
			
			Если нашли<>неопределено Тогда
				Если Нашли.КоличествоПриход =0 Тогда//закрыта полностью
					ОформлениеСтроки.ЦветФона = WebЦвета.СветлоСерый;
				иначе	
					ОформлениеСтроки.ЦветФона = WebЦвета.СероСиний;
				конецЕсли;	
			конецЕсли;		
		КонецЦикла;
		
	//конецЕсли;

Если мКолонкиТовары.Объем.Видимость Тогда
	итогОбъем = 0;
	для каждого стр1 из Товары Цикл
		Если стр1.номенклатура.ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
			итогОбъем = итогОбъем + стр1.Количество * ВычислитьОбъемНоменклатуры(стр1.Номенклатура) * 1.3;   //плотников
		иначе
			итогОбъем = итогОбъем + стр1.Количество * ВычислитьОбъемНоменклатуры(стр1.Номенклатура) * 1;
		КонецЕсли;
	КонецЦикла;
	
	ЭлементыФормы.Товары.Колонки.Объем.ТекстПодвала = строка(итогОбъем);
 КонецЕсли;
КонецПроцедуры

Процедура ДействияФормыкнЗаписатьВЗакрытомПериоде(Кнопка)
	//19.12.16 Смирнов, чтоб в закрытом периоде можно было убирать/ставить галку автокомплектация
	
	Объект = Ссылка.ПолучитьОбъект();
	//Объект.ОбменДанными.Загрузка = Истина;
	Объект.Комментарий = Комментарий;
	Объект.Автокомплектация = АвтоКомплектация;
	
	//Миронычев
	Объект.ДоговорКонтрагента                  = ДоговорКонтрагента;
	Объект.ДисконтнаяКарта                     = ДисконтнаяКарта;
	Объект.Ответственный                       = Ответственный;
	Объект.КонтактноеЛицо                      = КонтактноеЛицо;
	Объект.ДоставкаКлиенту                     = ДоставкаКлиенту;
	Объект.НапомнитьОСобытии                   = НапомнитьОСобытии;
	Объект.Грузополучатель                     = Грузополучатель;
	Объект.Грузоотправитель                    = Грузоотправитель;
	Объект.АдресДоставки                       = АдресДоставки;
	Объект.МаркаАвтомобиля                     = МаркаАвтомобиля;
	Объект.ГосНомерАвтомобиля                  = ГосНомерАвтомобиля;
	Объект.ДатаОтгрузки                        = ДатаОтгрузки;
	Объект.АвтокомплектацияСУчетомАналогов     = АвтокомплектацияСУчетомАналогов;
	Объект.СУчетомАналогов                     = СУчетомАналогов;
	Объект.Резерв3                             = Резерв3;
	Объект.ПоШтамповке                         = ПоШтамповке;
	Объект.ПоТоварамВПути                      = ПоТоварамВПути;
	//КонецМиронычев

	Для каждого стр из Объект.Товары цикл
		строкаФормы = товары[стр.НомерСтроки-1];
		ЗаполнитьЗначенияСвойств(стр,строкаФормы);
	КонецЦикла;
	//Объект.Товары = Товары;
	Объект.Записать(РежимЗаписиДокумента.Запись);
	ЭтаФорма.Модифицированность = ложь;

КонецПроцедуры

Процедура ДействияФормыРазделитьПоЗаводам(Кнопка)
	
	Ответ = Вопрос("Вы уверены что хотите разделить заказ по заводам?
	               |Эта операция необратима!!!", РежимДиалогаВопрос.ДаНет);
	Отказ = (Ответ = КодВозвратаДиалога.Нет);
	
	Если Не Отказ Тогда
		ТЗ = Товары.Выгрузить();
		ПоЗаводам = ТЗ.Скопировать();
		ПоЗаводам.Свернуть("Завод");
		
		ПервыйЗавод = истина;
		
		для каждого стр из ПоЗаводам Цикл
			Если ПервыйЗавод Тогда    //Первый док не создаем, а перезаписываем текущий
				Отбор = Новый Структура;
				Отбор.Вставить("Завод",стр.Завод);
				
				ОдинЗавод = ТЗ.Скопировать(Отбор);
				Товары.Очистить();
				
				для каждого стр1 из ОдинЗавод Цикл
					Нов = Товары.Добавить();
					ЗаполнитьЗначенияСвойств(Нов,Стр1);	
				КонецЦикла;
				ЭтотОбъект.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
				
				ПервыйЗавод = Ложь;
			Иначе                  //Потом создаем новые для каждого завода
				Отбор = Новый Структура;
				Отбор.Вставить("Завод",стр.Завод);
				
				ОдинЗавод = ТЗ.Скопировать(Отбор);
				
				НовДок = ЭтотОбъект.Скопировать();
				НовДок.АвтоКомплектация = ЭтотОбъект.АвтоКомплектация;
				НовДок.Дата = ЭтотОбъект.Дата;
				НовДок.Товары.Очистить();
				
				для каждого стр1 из ОдинЗавод Цикл
					Нов = НовДок.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(Нов,Стр1);	
				КонецЦикла;
				НовДок.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
				Форма = НовДок.ПолучитьФорму("ФормаДокумента");
				Форма.Открыть();
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанельТоварыОбновитьЗаводы(Кнопка)
	Если ГраницаПериода > Дата или Дата<ТекущаяДата()-14*24*60*60 Тогда
		Возврат
	КонецЕсли;

	Для каждого СтрокаТабличнойЧасти из Товары Цикл
		Если СтрокаТабличнойЧасти.Номенклатура.ВидТовара = перечисления.ВидыТоваров.Диски Тогда
			Отбор = Новый Структура;
			Отбор.вставить("Объект",СтрокаТабличнойЧасти.Номенклатура);
			Отбор.вставить("Свойство",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90185"));
			ЗаписьЗавод = РегистрыСведений.ЗначенияСвойствОбъектов.Получить(Отбор);
			СтрокаТабличнойЧасти.Завод = ЗаписьЗавод.значение;
		конецЕсли;
	конецЦикла;	
КонецПроцедуры

Процедура ДействияФормыВыделитьДискиРаспродажи(Кнопка)
	
	//***2018.08.01 Задача №37574
	Кнопка.Пометка = НЕ Кнопка.Пометка;	
	
	Если ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ВыделитьДискиРаспродажи.Пометка Тогда   
		Запрос = Новый Запрос;   
		Запрос.УстановитьПараметр("Период", НачалоМесяца(Дата));
		Запрос.Текст = "ВЫБРАТЬ
		|	ЦеныДляРаспродажи.Номенклатура
		|ИЗ
		|	РегистрСведений.ЦеныДляРаспродажи КАК ЦеныДляРаспродажи
		|ГДЕ
		|	ЦеныДляРаспродажи.Период = &Период";
		
		ТаблицаРаспродажи = Запрос.Выполнить().Выгрузить();	
		
		ЭлементыФормы.Товары.ОбновитьСтроки();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаготовкиПриПолученииДанных(Элемент, ОформленияСтрок)
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		Данныестроки = ОформлениеСтроки.Данныестроки;
		ОформлениеСтроки.Ячейки.КодДиска.Текст = ДанныеСтроки.Диск.Код;
		ОформлениеСтроки.Ячейки.КодДиска.ОтображатьТекст = Истина;
		
		ОформлениеСтроки.Ячейки.КодЗаготовки.Текст = ДанныеСтроки.Заготовка.Код;
		ОформлениеСтроки.Ячейки.КодЗаготовки.ОтображатьТекст = Истина;
		
	КонецЦикла;

КонецПроцедуры

Процедура ПодобратьЗагтовкиНажатие(Элемент)
  Заготовки.Очистить();	
  //Подбираем из того, что есть на складах, если нет берем 1 попавшуюся
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таб.Номенклатура,
		|	Таб.количество
		|ПОМЕСТИТЬ ВТ_табЧасть
		|ИЗ
		|	&Таб КАК Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КомплектующиеНоменклатуры.Номенклатура,
		|	КомплектующиеНоменклатуры.Комплектующая
		|ПОМЕСТИТЬ Вт_Комплектующие
		|ИЗ
		|	РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
		|ГДЕ
		|	КомплектующиеНоменклатуры.Комплектующая.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
		|	И КомплектующиеНоменклатуры.Номенклатура В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ВТ_табЧасть.Номенклатура
		|			ИЗ
		|				ВТ_табЧасть КАК ВТ_табЧасть)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РезервЗаготовокПодЗаказы.Заготовка,
		|	СУММА(ЗаказыПокупателейСезонныеОстатки.КоличествоОстаток) КАК КоличествоОстаток
		|ПОМЕСТИТЬ ВТ_Резервы
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателейСезонные.Остатки(
		|			,
		|			ЗаказПокупателяСезонный.Организация = &Организация
		|				И Номенклатура.НоменклатурнаяГруппа = &НоменклатурнаяГруппа) КАК ЗаказыПокупателейСезонныеОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезервЗаготовокПодЗаказы КАК РезервЗаготовокПодЗаказы
		|		ПО ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателяСезонный = РезервЗаготовокПодЗаказы.Регистратор
		|			И ЗаказыПокупателейСезонныеОстатки.Номенклатура = РезервЗаготовокПодЗаказы.Диск
		|ГДЕ
		|	ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателяСезонный <> &ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	РезервЗаготовокПодЗаказы.Заготовка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Номенклатура,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток
		|ПОМЕСТИТЬ ВТ_ОстаткиКомплектующих
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			,
		|			Номенклатура В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					Вт_Комплектующие.Комплектующая
		|				ИЗ
		|					Вт_Комплектующие КАК Вт_Комплектующие)) КАК ТоварыНаСкладахОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_табЧасть.Номенклатура КАК Номенклатура,
		|	ВТ_табЧасть.количество,
		|	Вт_Комплектующие.Комплектующая,
		|	ЕСТЬNULL(ВТ_ОстаткиКомплектующих.КоличествоОстаток, 0) - ЕСТЬNULL(ВТ_Резервы.КоличествоОстаток, 0) КАК СвободныйОстаток
		|ИЗ
		|	ВТ_табЧасть КАК ВТ_табЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Вт_Комплектующие КАК Вт_Комплектующие
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиКомплектующих КАК ВТ_ОстаткиКомплектующих
		|			ПО Вт_Комплектующие.Комплектующая = ВТ_ОстаткиКомплектующих.Номенклатура
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Резервы КАК ВТ_Резервы
		|			ПО Вт_Комплектующие.Комплектующая = ВТ_Резервы.Заготовка
		|		ПО ВТ_табЧасть.Номенклатура = Вт_Комплектующие.Номенклатура
		|ГДЕ
		|	ВТ_табЧасть.Номенклатура.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	СвободныйОстаток";
	Запрос.УстановитьПараметр("Таб", Товары.Выгрузить());
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа", Справочники.НоменклатурныеГруппы.НайтиПоКоду("00022"));
	Запрос.УстановитьПараметр("Организация", Справочники.Организации.НайтиПоКоду("00001"));
	Запрос.УстановитьПараметр("Ссылка", ссылка);
	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();
    предном = "";
	Пока Выборка.Следующий() Цикл
		если предном <> выборка.номенклатура тогда
			стрЗ = Заготовки.Добавить();
			стрЗ.Диск = Выборка.номенклатура;
			стрЗ.Заготовка = Выборка.комплектующая;
			стрЗ.Количество = Выборка.Количество;
		    предном = выборка.номенклатура;
		 конецЕсли;
	КонецЦикла;

	
	
	
	
КонецПроцедуры

Процедура АвтокомплектацияСУчетомАналоговПриИзменении(Элемент)
	Если АвтокомплектацияСУчетомАналогов и НЕ Автокомплектация Тогда
		Сообщить("Предварительно нужно включить флаг [v]Aвтокомплектация!", СтатусСообщения.Внимание);
		АвтокомплектацияСУчетомАналогов = ЛОЖЬ;
	КонецЕсли;	
	Если АвтокомплектацияСУчетомАналогов и НЕ СУчетомАналогов тогда
		Сообщить("Предварительно нужно включить флаг [v]С Учетом Аналогов!", СтатусСообщения.Внимание);
		АвтокомплектацияСУчетомАналогов = ЛОЖЬ;
	КонецЕсли;	
	ДоступностьКаскадныхФлажковПоАвтокомплектации();//30.01.2019
КонецПроцедуры

Процедура НеУчитыватьАналогиВПалеттахПриИзменении(Элемент)
	Если НеУчитыватьАналогиВПаллетах и НЕ Автокомплектация Тогда
		Сообщить("Предварительно нужно включить флаг [v]Aвтокомплектация!", СтатусСообщения.Внимание);
		НеУчитыватьАналогиВПаллетах = ЛОЖЬ;
	КонецЕсли;	
	Если НеУчитыватьАналогиВПаллетах и (НЕ АвтокомплектацияСУчетомАналогов или НЕ СУчетомАналогов) тогда
		Сообщить("Предварительно нужно включить предыдущие флаги: [v]С Учетом Аналогов и [v] Автокомплектация С Учетом Аналогов!", СтатусСообщения.Внимание);
		НеУчитыватьАналогиВПаллетах = ЛОЖЬ;
	конецЕсли;	
КонецПроцедуры

процедура ДоступностьКаскадныхФлажковПоАвтокомплектации()
	ЭлементыФормы.АвтокомплектацияСУчетомАналогов.Доступность = АвтоКомплектация и СУчетомАналогов;
		ЭлементыФормы.НеУчитыватьАналогиВПалеттах.Доступность = АвтоКомплектация и СУчетомАналогов и АвтокомплектацияСУчетомАналогов;
	//не используется в Автокомплектации! элемент сделан невидимым!	
	ЭлементыФормы.ПоШтамповке.Доступность = АвтоКомплектация и (масПользователеПоШтамповке.Найти(глТекущийПользователь)<>Неопределено);
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 
ГраницаЗапрета = ПараметрыСеанса.ГраницыЗапретаИзмененияДанных.Получить();
ГраницаПериода = ГраницаЗапрета[Ссылка.Организация];

мОбновлятьВладельца = Ложь;

мЧас    = 0;
мМинута = 0;

мОбработкаТайпинга                 = Ложь;
мТекстТайпинга                     = "";
мПоследнееЗначениеЭлементаТайпинга = Неопределено;

мКолонкиТовары         = ЭлементыФормы.Товары.Колонки;
мКолонкиВозвратнаяТара = ЭлементыФормы.ВозвратнаяТара.Колонки;

	масПользователеПоШтамповке = новый Массив;
	масПользователеПоШтамповке.Добавить( справочники.Пользователи.НайтиПоКоду("Малышев Егор" ));
	масПользователеПоШтамповке.Добавить( справочники.Пользователи.НайтиПоКоду("Никитин М.И." ));
	масПользователеПоШтамповке.Добавить( справочники.Пользователи.НайтиПоКоду("Марешева И.Г.")); 
	масПользователеПоШтамповке.Добавить( справочники.Пользователи.НайтиПоКоду("Бондаренко Е.Д. (снабжение)"));
	