Перем мВалютаРегламентированногоУчета Экспорт;
Перем мПорядокСписанияПартий; // (Общ)
Перем мДокументПоступленияСсылка Экспорт;

Перем мУказаниеСкладовВТЧ Экспорт;
Перем мСтруктураПараметровВзаиморасчетов Экспорт;


//////////////////////////////////////////////////////////////////////////////////
//// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет табличные части документа по основанию
//
Процедура ЗаполнитьПоДокументу() Экспорт
	
	Если ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
		ИЛИ ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		ЗаполнитьПоПоступлению();
	ИначеЕсли ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		ЗаполнитьПоДопРасходам();
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет табличную часть "Товары" 
// по данным документов: ПоступлениеДопРасходов, Корректировка поступления
//
Процедура ЗаполнитьПоДопРасходам()
	
	Если НЕ ЗначениеЗаполнено(ДокументПоступления) Тогда
		Возврат;
	КонецЕсли;
	
	Услуги.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПоступлениеДопРасходовТовары.НомерСтроки                КАК НомерСтроки,
	|	ПоступлениеДопРасходовТовары.Номенклатура               КАК Номенклатура,
	|	ПоступлениеДопРасходовТовары.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|	ПоступлениеДопРасходовТовары.Коэффициент                КАК Коэффициент,
	|	ПоступлениеДопРасходовТовары.Количество                 КАК Количество,
	|	ПоступлениеДопРасходовТовары.СуммаНДС                   КАК СуммаНДС,
	|	ПоступлениеДопРасходовТовары.СуммаТовара                КАК СуммаТовара,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ПоступлениеДопРасходовТовары.ЕдиницаИзмерения.Вес, 0) 
	|		* ПоступлениеДопРасходовТовары.Количество
	|		КАК Число(15,3))                                    КАК ВесТовара,
	|	ПоступлениеДопРасходовТовары.Количество                 КАК КоличествоТовара,
	|	ПоступлениеДопРасходовТовары.Сумма                      КАК Сумма,
	|	ПоступлениеДопРасходовТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ПоступлениеДопРасходовТовары.СерияНоменклатуры          КАК СерияНоменклатуры,
	|	ВЫБОР	КОГДА ДокументПартии ССЫЛКА Документ.ОприходованиеТоваров
	|			ТОГДА ДокументПартии.Склад
	|			КОГДА ДокументПартии.СкладОрдер ССЫЛКА Документ.ПриходныйОрдерНаТовары 
	|			ТОГДА ДокументПартии.СкладОрдер.Склад
	|			ИНАЧЕ ДокументПартии.СкладОрдер 
	|	КОНЕЦ                                                   КАК СкладОрдер,
	|	ПоступлениеДопРасходовТовары.ЗаказПокупателя            КАК ЗаказПокупателя,
	|	ПоступлениеДопРасходовТовары.ДокументПартии             КАК ДокументПартии,
	|	ПоступлениеДопРасходовТовары.Ссылка.СтавкаНДС           КАК СтавкаНДС,
	|	ПоступлениеДопРасходовТовары.Количество                 КАК КоличествоДоИзменения,
	|	ПоступлениеДопРасходовТовары.Ссылка.СтавкаНДС           КАК СтавкаНДСДоИзменения,
	|	ПоступлениеДопРасходовТовары.СуммаНДС                   КАК СуммаНДСДоИзменения,
	|	ПоступлениеДопРасходовТовары.Сумма                      КАК СуммаДоИзменения,
	|	ИСТИНА                                                  КАК ЕстьВДокументеПоступления
	|ИЗ
	|	Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
	|ГДЕ
	|	ПоступлениеДопРасходовТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументПоступления);
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	Если ДокументПоступления.Сумма <> 0 тогда
		
		СуммаКРаспределению = ДокументПоступления.Сумма;
		НДСКРаспределению   = ДокументПоступления.СуммаНДС;
		
		// Определим базис распределения
		КолонкаБазиса = "";
		Если ДокументПоступления.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоКоличеству Тогда
			КолонкаБазиса = "КоличествоТовара";
		ИначеЕсли ДокументПоступления.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме Тогда
			КолонкаБазиса = "СуммаТовара";
		ИначеЕсли ДокументПоступления.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоВесу Тогда
			КолонкаБазиса = "ВесТовара";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(КолонкаБазиса) тогда
			//Не выбран способ распределения
			Возврат;
		ИначеЕсли ТаблицаТоваров.Итог(КолонкаБазиса) = 0 тогда 
			//Базис распределения - пустая колонка!
			Возврат;
		КонецЕсли;
		
		БазисРаспределения = ТаблицаТоваров.ВыгрузитьКолонку(КолонкаБазиса);
		ИтогРаспределения  = РаспределитьПропорционально(СуммаКРаспределению,БазисРаспределения);
		
		Если НЕ (НДСКРаспределению = 0) тогда
			ИтогРаспределенияНДС = РаспределитьПропорционально(НДСКРаспределению,БазисРаспределения);
		КонецЕсли;
		
		Для НомерСтрокиТаблицы = 0 по ИтогРаспределения.ВГраница() цикл
			Если не ИтогРаспределения[НомерСтрокиТаблицы] = 0 тогда
				ТаблицаТоваров[НомерСтрокиТаблицы].Сумма  = ТаблицаТоваров[НомерСтрокиТаблицы].Сумма + ИтогРаспределения[НомерСтрокиТаблицы];
				ТаблицаТоваров[НомерСтрокиТаблицы].СуммаДоИзменения = ТаблицаТоваров[НомерСтрокиТаблицы].Сумма;
			КонецЕсли;
			Если Не(НДСКРаспределению = 0) тогда
				Если НЕ ИтогРаспределенияНДС[НомерСтрокиТаблицы] = 0 тогда
					ТаблицаТоваров[НомерСтрокиТаблицы].СуммаНДС = ТаблицаТоваров[НомерСтрокиТаблицы].СуммаНДС + ИтогРаспределенияНДС[НомерСтрокиТаблицы];
					ТаблицаТоваров[НомерСтрокиТаблицы].СуммаНДСДоИзменения = ТаблицаТоваров[НомерСтрокиТаблицы].СуммаНДС;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Товары.Загрузить(ТаблицаТоваров);

	Если ТаблицаТоваров.Количество()>0 Тогда
		СкладОрдер = ТаблицаТоваров[0].СкладОрдер;
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьСвойстваСкладаВТабличнойЧасти() Экспорт
	
	СвойстваСклада = Новый Структура;
	
	СвойстваСклада.Вставить("ВидимостьСклада",              КорректироватьБУиНУ И мУказаниеСкладовВТЧ);
	СвойстваСклада.Вставить("ОбязательноеЗаполнениеСклада", СвойстваСклада.ВидимостьСклада);
	
	Возврат СвойстваСклада;
	
КонецФункции

Функция ПолучитьСвойстваЗаказаПоставщикуВТабличнойЧасти() Экспорт
	
	ВедениеВзаиморасчетов = ДоговорКонтрагента.ВедениеВзаиморасчетов;
	СвойстваЗаказа        = Новый Структура;
	
	// Заказ в ТЧ виден, если взаиморасчеты по договору ведутся по заказам или по договору в целом (не ведутся по счетам)
	// Заполнение заказа обязательно, если взаиморасчеты по договору ведутся по заказам
	СвойстваЗаказа.Вставить("ВидимостьЗаказа",
		ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам И КорректироватьБУиНУ И ЕстьЗаказыПоставщикуВТабличнойЧастиТовары(ЭтотОбъект.Ссылка));
	СвойстваЗаказа.Вставить("ОбязательноеЗаполнениеЗаказа",
		СвойстваЗаказа.ВидимостьЗаказа И ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
	
	Возврат СвойстваЗаказа;
	
КонецФункции

// Процедура заполняет табличные части "Товары" и "Услуги"
// по данным документов: ПоступлениеТоваровУслуг, Корректировка поступления
//
Процедура ЗаполнитьПоПоступлению()
	
	Если НЕ ЗначениеЗаполнено(ДокументПоступления) Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = ДокументПоступления.Метаданные();
	ИмяВидаДокумента = МетаданныеДокумента.Имя;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура               КАК Номенклатура,
	|	ПоступлениеТоваровУслугТовары.КоличествоМест             КАК КоличествоМест,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмеренияМест       КАК ЕдиницаИзмеренияМест,
	|	ПоступлениеТоваровУслугТовары.Коэффициент                КАК Коэффициент,
	|	ПоступлениеТоваровУслугТовары.Количество                 КАК Количество,
	|	ПоступлениеТоваровУслугТовары.Цена                       КАК Цена,
	|	ПоступлениеТоваровУслугТовары.Сумма                      КАК Сумма,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС                  КАК СтавкаНДС,
	|	ПоступлениеТоваровУслугТовары.СуммаНДС                   КАК СуммаНДС,
	|	ПоступлениеТоваровУслугТовары.СерияНоменклатуры          КАК СерияНоменклатуры,
	|	ПоступлениеТоваровУслугТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ПоступлениеТоваровУслугТовары.ЗаказПокупателя            КАК Заказ,
	|	ПоступлениеТоваровУслугТовары.Склад                      КАК Склад,
	|	ПоступлениеТоваровУслугТовары.ПриходныйОрдер             КАК ПриходныйОрдер,
	//|	ПоступлениеТоваровУслугТовары.ЗаказПоставщику            КАК ЗаказПоставщику,
	|	";
	
	Если ИмяВидаДокумента = "КорректировкаПоступления" Тогда
		Запрос.Текст = Запрос.Текст + "
		//|	ПоступлениеТоваровУслугТовары.ДокументПартии            КАК ДокументПартии,
		|	ПоступлениеТоваровУслугТовары.КоличествоДоКорректировки КАК КоличествоДоКорректировки,
		|	ПоступлениеТоваровУслугТовары.ЦенаДоКорректировки       КАК ЦенаДоКорректировки,
		|	ПоступлениеТоваровУслугТовары.СуммаДоКорректировки      КАК СуммаДоКорректировки,
		|	ПоступлениеТоваровУслугТовары.СуммаНДСДоКорректировки   КАК СуммаНДСДоКорректировки,";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|	ПоступлениеТоваровУслугТовары.Номенклатура               КАК НоменклатураДоИзменения,
	|	ПоступлениеТоваровУслугТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатурыДоИзменения,
	|	ПоступлениеТоваровУслугТовары.СерияНоменклатуры          КАК СерияНоменклатурыДоИзменения,
	|	ПоступлениеТоваровУслугТовары.Количество                 КАК КоличествоДоИзменения,
	|	ПоступлениеТоваровУслугТовары.Цена                       КАК ЦенаДоИзменения,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС                  КАК СтавкаНДСДоИзменения,
	|	ПоступлениеТоваровУслугТовары.СуммаНДС                   КАК СуммаНДСДоИзменения,
	|	ПоступлениеТоваровУслугТовары.Сумма                      КАК СуммаДоИзменения,
	|	ИСТИНА                                                   КАК ЕстьВДокументеПоступления
	|ИЗ
	|	Документ."+ИмяВидаДокумента+".Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
	|
	|/////////////////////////////////////////////////////////////////////////////
	|;
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугУслуги.Номенклатура         КАК Номенклатура,
	|	ПоступлениеТоваровУслугУслуги.Содержание           КАК Содержание,
	|	ПоступлениеТоваровУслугУслуги.Заказ                КАК Заказ,
	|	ПоступлениеТоваровУслугУслуги.Количество           КАК Количество,
	|	ПоступлениеТоваровУслугУслуги.Цена                 КАК Цена,
	|	ПоступлениеТоваровУслугУслуги.Сумма                КАК Сумма,
	|	ПоступлениеТоваровУслугУслуги.СтавкаНДС            КАК СтавкаНДС,
	|	ПоступлениеТоваровУслугУслуги.СуммаНДС             КАК СуммаНДС,
	|	ПоступлениеТоваровУслугУслуги.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ПоступлениеТоваровУслугУслуги.Подразделение        КАК Подразделение,
	|	ПоступлениеТоваровУслугУслуги.СтатьяЗатрат         КАК СтатьяЗатрат,
	//|	Null											   КАК ЗаказПоставщику,
	|";
	
	Если ИмяВидаДокумента = "КорректировкаПоступления" Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ПоступлениеТоваровУслугУслуги.КоличествоДоКорректировки КАК КоличествоДоКорректировки,
		|	ПоступлениеТоваровУслугУслуги.ЦенаДоКорректировки       КАК ЦенаДоКорректировки,
		|	ПоступлениеТоваровУслугУслуги.СуммаДоКорректировки      КАК СуммаДоКорректировки,
		|	ПоступлениеТоваровУслугУслуги.СуммаНДСДоКорректировки   КАК СуммаНДСДоКорректировки,";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|	ПоступлениеТоваровУслугУслуги.Номенклатура КАК НоменклатураДоИзменения,
	|	ПоступлениеТоваровУслугУслуги.Содержание   КАК СодержаниеДоИзменения,
	|	ПоступлениеТоваровУслугУслуги.Количество   КАК КоличествоДоИзменения,
	|	ПоступлениеТоваровУслугУслуги.Цена         КАК ЦенаДоИзменения,
	|	ПоступлениеТоваровУслугУслуги.Сумма        КАК СуммаДоИзменения,
	|	ПоступлениеТоваровУслугУслуги.СтавкаНДС    КАК СтавкаНДСДоИзменения,
	|	ПоступлениеТоваровУслугУслуги.СуммаНДС     КАК СуммаНДСДоИзменения,
	|	ИСТИНА                                     КАК ЕстьВДокументеПоступления
	|
	|ИЗ
	|	Документ." + ИмяВидаДокумента + ".Услуги КАК ПоступлениеТоваровУслугУслуги
	|ГДЕ
	|	ПоступлениеТоваровУслугУслуги.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументПоступления);
	Результат = Запрос.ВыполнитьПакет();
	
	Товары.Загрузить(Результат[0].Выгрузить());
	Услуги.Загрузить(Результат[1].Выгрузить());
	//СерийныеНомера.Загрузить(ДокументПоступления.СерийныеНомера.Выгрузить());
	
КонецПроцедуры

//// Процедура заполянет шапку документа по документу поступления 
////
//// Параметры:
//// 	 ЗаполнятьРедактируемыеРеквизиты - Булево - Признак того, что нужно перезаполнить реквизиты шапки, редактируемые в форме
////
Процедура ЗаполнитьСвойстваШапки(ЗаполнятьРедактируемыеРеквизиты = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументПоступления) Тогда
		Возврат;
	КонецЕсли;
	
	// Перед заполнением сохраним реквизиты шапки документа, не заполняемые из основания
	НезаполняемыеРеквизиты = "Дата, Номер, ПометкаУдаления, Проведен, ДокументПоступления, ВидОперации,
		|НомерВходящегоДокумента, ДатаВходящегоДокумента, КорректироватьБУиНУ, Ответственный, Комментарий, ВидПоступления";
		
	Если НЕ ЗаполнятьРедактируемыеРеквизиты Тогда
		НезаполняемыеРеквизиты = НезаполняемыеРеквизиты + ", БанковскийСчетКонтрагента, Грузоотправитель, Грузополучатель, 
			|ВосстановитьНДС, СкладОрдер";
	КонецЕсли;
	
	СтруктураНезаполняемыеРеквизиты = Новый Структура(НезаполняемыеРеквизиты);
	ЗаполнитьЗначенияСвойств(СтруктураНезаполняемыеРеквизиты, ЭтотОбъект);
	
	// Очистим реквизиты шапки документа
	Для каждого Реквизит из ЭтотОбъект.Метаданные().Реквизиты Цикл
		Если НЕ СтруктураНезаполняемыеРеквизиты.Свойство(Реквизит.Имя) Тогда
			ЭтотОбъект[Реквизит.Имя] = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	// Получим ссылку на исходный исправляемый документ поступления
	мДокументПоступленияСсылка = ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Истина);
	
	Если ЗначениеЗаполнено(мДокументПоступленияСсылка) Тогда
		
		// Заполним основные реквизиты шапки по основанию
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, мДокументПоступленияСсылка);
		Если ТипЗнч(мДокументПоступленияСсылка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		КонецЕсли;
		
		// Заполним реквизиты учета НДС в случае, если таких реквизитов нет в документе основания
		МетаданныеДокументаОснования = мДокументПоступленияСсылка.Метаданные();
		Если МетаданныеДокументаОснования.Реквизиты.Найти("УчитыватьНДС") = Неопределено Тогда
			УчитыватьНДС = Истина;
		КонецЕсли;
		Если МетаданныеДокументаОснования.Реквизиты.Найти("СуммаВключаетНДС") = Неопределено Тогда
			СуммаВключаетНДС = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Перезаполним шапку по документу поступления
	Если КорректироватьБУиНУ Тогда 
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДокументПоступления);
		
		Если ТипЗнч(СтруктураНезаполняемыеРеквизиты.ДокументПоступления) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
			И СтруктураНезаполняемыеРеквизиты.ДокументПоступления.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
			
			Склад = ДокументПоступления.СкладОрдер.Склад;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Восстановим незаполняемые реквизиты
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНезаполняемыеРеквизиты);

	ДокументПоступленияСсылка = ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Истина);
	
	КорректировкаКорректировочногоСчетаФактуры = Ложь;
		
	Если ТипЗнч(ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Ложь)) = Тип("ДокументСсылка.КорректировкаПоступления") 
		И ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		КорректировкаКорректировочногоСчетаФактуры = Истина;
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Если КорректировкаКорректировочногоСчетаФактуры Тогда
			ИсправляемыйДокументПоступления = ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Ложь);
		Иначе	
			ИсправляемыйДокументПоступления = ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Истина);
		КонецЕсли;	
	Иначе
		ИсправляемыйДокументПоступления = ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Ложь);
	КонецЕсли;
	СтруктураКурсаДокумента = ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
	КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	// Цены в документе всегда указываем вручную
	ТипЦен = Неопределено;
	
КонецПроцедуры

//// Функция возвращает последний кооректирующий документ
////
//// Возвращаемое значение:
//// 	Ссылка на документ КорректировкаПоступления
////
Функция ПолучитьПоследнийКорректирующийДокумент(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ЭтотДокумент", Ссылка);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КорректировкаПоступления.Ссылка
		|ИЗ
		|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
		|ГДЕ
		|	КорректировкаПоступления.ИсправляемыйДокументПоступления = &Ссылка
		|	И КорректировкаПоступления.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение)
		|	И КорректировкаПоступления.Ссылка <> &ЭтотДокумент
		|	И КорректировкаПоступления.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	КорректировкаПоступления.Дата УБЫВ";
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	Иначе
		Возврат ДокументСсылка;
	КонецЕсли;
		
КонецФункции

Функция ПолучитьИсправляемыйДокументПоступления(ДокПоступления, Исходный = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(ДокПоступления) 
		И (ТипЗнч(ДокПоступления) = Тип("ДокументСсылка.КорректировкаПоступления") или ТипЗнч(ДокПоступления) = Тип("ДокументСсылка.КорректировкаЗаказаПоставщикуП"))
		И (ДокПоступления.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки ИЛИ Исходный
		ИЛИ ДокПоступления.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение) Тогда
		
		Возврат ПолучитьИсправляемыйДокументПоступления(ДокПоступления.ДокументПоступления, Исходный);
		
	Иначе
		Возврат ДокПоступления;
	КонецЕсли;
	
КонецФункции

//// Функция возвращает признак возможности корректировки по видам учета
//// 
//// Возвращаемое значение:
//// 	Булево
Функция ДоступнаКорректировкаБУиНУ() Экспорт
			
	Возврат (ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") И 
			ЗначениеЗаполнено(ДокументПоступления.ДоговорКонтрагента))
		ИЛИ ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПоступлениеДопРасходов")
		ИЛИ (ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления") И ДокументПоступления.КорректироватьБУиНУ);
	
КонецФункции

// Очищает ненужные строки табличных частей
//
Процедура ОчиститьНенужныеТабличныеЧасти() Экспорт

	// Если договор с комитентом, то надо почистить закладку "Услуги".
	Если Услуги.Количество() > 0
	   И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

		Услуги.Очистить();

	КонецЕсли;

КонецПроцедуры // ОчиститьНенужныеТабличныеЧасти()

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА
/////////////////////////

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	// Для определения где нужно проверять склад: в шапке или в ТЧ.
	УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
	СкладВТабличнойЧасти =    (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
		                  Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления);
	СтруктураШапкиДокумента.Вставить("СкладВТабличнойЧасти", СкладВТабличнойЧасти);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);
	ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок);


	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = СформироватьДеревоПолейЗапросаПоШапке();
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов"                   , "ВедениеВзаиморасчетов");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов"                    , "ВалютаВзаиморасчетов");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"                             , "ДоговорОрганизация");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора"                             , "ВидДоговора");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "РасчетыВУсловныхЕдиницах"                , "РасчетыВУсловныхЕдиницах");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "УчетАгентскогоНДС"                       , "УчетАгентскогоНДС");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидАгентскогоДоговора"                   , "ВидАгентскогоДоговора");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"              , "ВидОперации"                             , "СделкаВидОперации");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "СписыватьПартииПриПроведенииДокументов"  , "СписыватьПартииПриПроведенииДокументов");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиПартионныйУчетПоСкладам"            , "ВестиПартионныйУчетПоСкладам");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "НеВключатьНДСВСтоимостьПартий"           , "НеВключатьНДСВСтоимостьПартий");

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер"      , "ВидСклада"                               , "ВидСклада");
	Иначе
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер"      , "Склад"                                   , "СкладПриходногоОрдера");
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер"      , "Склад.ВидСклада"                         , "ВидСклада");
	КонецЕсли;
	
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер"      , "БезПраваПродажи"                   , "БезПраваПродажи");

	// Если сделка - Заказ поставщику, то надо цену для проведения пересчитать в валюту заказа.
	Если Не ЗначениеНеЗаполнено(Сделка) 
	   И ДоговорКонтрагента.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам 
	   И ТипЗнч(Сделка) <> Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "ВалютаДокумента"                       , "ВалютаЗаказа");
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "КурсВзаиморасчетов"                    , "КурсВзаиморасчетовЗаказа");
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "КратностьВзаиморасчетов"               , "КратностьВзаиморасчетовЗаказа");
	КонецЕсли;
	
	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке);

	// Здесь контролировать сумму задолженности, предоплату и число дней задолженности не надо
	СтруктураШапкиДокумента.Вставить("КонтролироватьСуммуЗадолженности", Ложь);
	СтруктураШапкиДокумента.Вставить("ПроцентПредоплаты", 0);
	СтруктураШапкиДокумента.Вставить("КонтролироватьЧислоДнейЗадолженности", Ложь);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Если надо пересчитывать цену в валюту заказа. то в структуре должна быть заполнена валюта заказа.
	ВалютаЗаказа = Неопределено;
	НужнаЦенаЗаказа = Ложь;
	Если СтруктураШапкиДокумента.Свойство("ВалютаЗаказа", ВалютаЗаказа) Тогда
		НужнаЦенаЗаказа = Истина;
		Если ВалютаЗаказа = мВалютаРегламентированногоУчета Тогда
			КурсЗаказа      = 1;
			КратностьЗаказа = 1;
		Иначе //ВалютаЗаказа = ВалютаВзаиморасчетов
			КурсЗаказа      = СтруктураШапкиДокумента.КурсВзаиморасчетовЗаказа;
			КратностьЗаказа = СтруктураШапкиДокумента.КратностьВзаиморасчетовЗаказа;
		КонецЕсли;
		СтруктураШапкиДокумента.Вставить("КурсЗаказа"     , КурсЗаказа);
		СтруктураШапкиДокумента.Вставить("КратностьЗаказа", КратностьЗаказа);
	КонецЕсли;

	СтруктураШапкиДокумента.Вставить("НужнаЦенаЗаказа", НужнаЦенаЗаказа);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         , "СерияНоменклатуры");

	//// { Лапенков Удаляем серию номенклатуры, т.к. учет по  сериям будет в регистре ГТД
	//#Если Клиент Тогда
	//	Если Ссылка.ДокументПоступления.Дата>глДатаРегистраГТД Тогда
	//		СтруктураПолей.Удалить("СерияНоменклатуры");
	//	КонецЕсли;
	//#КонецЕсли
	//// } Лапенков 
	
	СтруктураПолей.Вставить("Услуга"                               , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                                , "Номенклатура.Набор");
	СтруктураПолей.Вставить("ЗаказПокупателя"                      , "ЗаказПокупателя");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя"                , "ЗаказПокупателя.Склад");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
	                        "ЗаказПокупателя.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"                     , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Проект"                               , "Проект");
	СтруктураПолей.Вставить("Склад"                                , "Склад");
	СтруктураПолей.Вставить("ДокументПолучения"                    , "ПриходныйОрдер");
	СтруктураПолей.Вставить("ОрганизацияДокументаПолучения"        , "ПриходныйОрдер.Организация");
	СтруктураПолей.Вставить("БезПраваПродажи"                      , "ПриходныйОрдер.БезПраваПродажи");
	СтруктураПолей.Вставить("Цена"                                 , "Цена");
	СтруктураПолей.Вставить("Коэффициент"                          , "Коэффициент");
	СтруктураПолей.Вставить("ВидСкладаРазмещения"                  , "Склад.ВидСклада");
	// { Лапенков Автозапчасти (выполняется только для автозапчастей)
	//Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПродажаАвтозапчастей") Тогда
	// СтруктураПолей.Вставить("ЗаказПоставщику"                  , "ЗаказПоставщику");
	//КонецЕсли;
    // } Лапенков Автозапчасти
	
	// Сформируем структуру сложных полей
	СтруктураСложныхПолей = Новый Структура();
	СтруктураСложныхПолей.Вставить("Количество"  , "(Количество - КоличествоДоИзменения) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураСложныхПолей.Вставить("Сумма"       , "Сумма - СуммаДоИзменения");
	СтруктураСложныхПолей.Вставить("НДС"         , "СуммаНДС - СуммаНДСДоИзменения");
	СтруктураСложныхПолей.Вставить("ВидДвижения" , "ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)");
	
	СтруктураСложныхПолей.Вставить("КоличествоДок", "
	|ВЫБОР	КОГДА (Количество - КоличествоДоИзменения) < 0.00
	|		ТОГДА - (Количество - КоличествоДоИзменения)
	|		ИНАЧЕ (Количество - КоличествоДоИзменения)
	|КОНЕЦ * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент"); // Количество нужно выгружать с другим псевдонимом, иначе нельзя будет использовать отрицательные значения
	СтруктураСложныхПолей.Вставить("ДокументПоступления", "Ссылка");
	
	РезультатЗапросаПоТоварам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураСложныхПолей);
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Услуги".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"                      , "Номенклатура");
	СтруктураПолей.Вставить("СтавкаНДС"                         , "СтавкаНДС");
	СтруктураПолей.Вставить("Содержание"                        , "Содержание");
	СтруктураПолей.Вставить("Услуга"                            , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                             , "Номенклатура.Набор");
	СтруктураПолей.Вставить("СтатьяЗатрат"                      , "СтатьяЗатрат");
	СтруктураПолей.Вставить("ХарактерЗатрат"                    , "СтатьяЗатрат.ХарактерЗатрат");
	СтруктураПолей.Вставить("ОтнесениеРасходовКДеятельностиЕНВД", "СтатьяЗатрат.ОтнесениеРасходовКДеятельностиЕНВД");
	СтруктураПолей.Вставить("Проект"                            , "Проект");
	СтруктураПолей.Вставить("Подразделение"                     , "Подразделение");
	СтруктураПолей.Вставить("Заказ"                             , "Заказ");

	// Дополним полями, нужными для упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиУслугиУпр(СтруктураПолей);
	
	// Сформируем структуру сложных полей
	СтруктураСложныхПолей = Новый Структура();
	СтруктураСложныхПолей.Вставить("Количество",  "Количество - КоличествоДоИзменения");
	СтруктураСложныхПолей.Вставить("Сумма",       "Сумма - СуммаДоИзменения");
	СтруктураСложныхПолей.Вставить("НДС",         "СуммаНДС - СуммаНДСДоИзменения");
	СтруктураСложныхПолей.Вставить("СуммаНДС",    "СуммаНДС - СуммаНДСДоИзменения");
	СтруктураСложныхПолей.Вставить("ВидДвижения", "ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)");

	РезультатЗапросаПоУслугам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей, СтруктураСложныхПолей);
	
	//Для Корректировки движений по регистру Продажи себестоимость и Расход по Партии товаров на складах 
	// по табличной части "Корректировка реализации"
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"                      , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                            , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                             , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"                        , "Количество");
	СтруктураПолей.Вставить("Подразделение"                     , "ДокументРеализации.Подразделение");
	СтруктураПолей.Вставить("ЗаказПокупателя"                   , "ДокументРеализации.Сделка");
	СтруктураПолей.Вставить("ДокументДвижения"                  , "ДокументРеализации");
	СтруктураПолей.Вставить("Склад"                   			, "ДокументРеализации.Склад");
	//СтруктураПолей.Вставить("Продавец"                   		, "ДокументРеализации.Продавец");

	Если НЕ мПорядокСписанияПартий.Упр = Перечисления.СпособыОценки.ПоСредней Тогда
		СтруктураПолей.Вставить("ДокументОприходования"    		, "Ссылка.ИсправляемыйДокументПоступления");
    КонецЕсли;

	// Сформируем структуру сложных полей
	СтруктураСложныхПолей = Новый Структура();
	СтруктураСложныхПолей.Вставить("Сумма",       "СуммаСебестоимости - СуммаСебестоимостиДоИзменения");
    СтруктураСложныхПолей.Вставить("Стоимость",   "СуммаСебестоимости - СуммаСебестоимостиДоИзменения");
	СтруктураСложныхПолей.Вставить("НоменклатураКомплект",   "ВЫБОР КОГДА ДокументРеализации ССЫЛКА Документ.КомплектацияНоменклатуры ТОГДА ДокументРеализации.Номенклатура КОНЕЦ");
	СтруктураСложныхПолей.Вставить("КодОперации",   "ВЫБОР 
														|КОГДА ДокументРеализации ССЫЛКА Документ.КомплектацияНоменклатуры 
														|    ТОГДА Значение(Перечисление.КодыОперацийПартииТоваров.Комплектация)
														|КОГДА ДокументРеализации ССЫЛКА Документ.ТребованиеНакладная 
														|    ТОГДА Значение(Перечисление.КодыОперацийПартииТоваров.СписаниеНаЗатраты)
													    |ИНАЧЕ Значение(Перечисление.КодыОперацийПартииТоваров.Реализация) 
														|КОНЕЦ");

	
	РезультатЗапросаПоПродажам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "КорректировкаРеализации", СтруктураПолей, СтруктураСложныхПолей);

	Если СтруктураШапкиДокумента.КорректироватьБУиНУ И НЕ Отказ Тогда
		//ОЛ пока не понятно, какие движения нужны, если корректируем только НДС
		//поэтому пока не будем делать вообще никаких движений в этом случае
		
		// Подготовим таблицы товаров для проведения.
		ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
		ТаблицаПоУслугам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);
		ТаблицаПоПродажам = РезультатЗапросаПоПродажам.Выгрузить();
		
		// Проверить заполнение ТЧ 
		#Если  Клиент	Тогда
			ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
			ПроверитьЗаполнениеТабличнойЧастиПродажи(ТаблицаПоПродажам, СтруктураШапкиДокумента, Отказ, Заголовок);
		#КонецЕсли
		ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок);
		
		ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость, мВалютаРегламентированногоУчета);
		ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам, СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость, мВалютаРегламентированногоУчета);
		
		
		// Движения по документу
		Если Не Отказ Тогда
			ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
			ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоПродажам, Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;					
						
КонецПроцедуры // ОбработкаПроведения()

// По виду операции определяет статус партии прихода товаров (не возвратная тара!)
//
// Параметры: 
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке.
//
// Возвращаемое значение:
//  Значение перечисления "Статусы партии товаров".
//
Функция ОпределитьСтатусПартииПриходаУпр(СтруктураШапкиДокумента) 

	Статус = Перечисления.СтатусыПартийТоваров.ПустаяСсылка();

	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		Статус = Перечисления.СтатусыПартийТоваров.НаКомиссию;
	Иначе
		Статус = Перечисления.СтатусыПартийТоваров.Купленный; 
	КонецЕсли;

	Возврат Статус;

КонецФункции // ОпределитьСтатусПартииПриходаУпр()

// Заполняет в таблице движений по регитстру ПартииТоваровНаСкладах нестандартные поля.
//
// Параметры:
//  ТаблицаТЧ       - таблица значений, соответствующая табличной части документа
//  ТаблицаДвижений - таблица значений, соответствующая набору записей регистра,
//  СтатусПартии    - значение перечисления статусов партий. 
//
Процедура ЗаполнитьПоляПартииТоваровНаСкладахУпр(ТаблицаТЧ, ТаблицаДвижений, СтатусПартии, СтруктураШапкиДокумента)

	Для каждого СтрокаДвижений Из ТаблицаДвижений Цикл

		Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
		Иначе
			СтрокаДвижений.Склад = Неопределено;
		КонецЕсли;

		Если Не мПорядокСписанияПартий.Упр = Перечисления.СпособыОценки.ПоСредней 
		 ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			//СтрокаДвижений.ДокументОприходования = Ссылка;
			//ОЛ
			Если ТипЗнч(Ссылка.ДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
				СтрокаДвижений.ДокументОприходования = Ссылка.ИсправляемыйДокументПоступления;

			Иначе	 
				СтрокаДвижений.ДокументОприходования = Ссылка.ДокументПоступления;
			КонецЕсли;
			//конец ОЛ
		КонецЕсли;
		
		СтрокаДвижений.СтатусПартии          = СтатусПартии;

		// Заказ заполняем если его указали в документе и по договору ведется обособленный учет товаров по заказам.
		СтрокаТЧ = ТаблицаТЧ.Найти(СтрокаДвижений.НомерСтроки, "НомерСтроки");
		ОбособленныйУчет = СтрокаТЧ.ОбособленныйУчетТоваровПоЗаказамПокупателей;
		СтрокаДвижений.Заказ = ?(ОбособленныйУчет <> NULL И ОбособленныйУчет 
		    И Не (ЗначениеНеЗаполнено(СтрокаТЧ.ЗаказПокупателя)), СтрокаТЧ.ЗаказПокупателя, Неопределено);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоляПартииТоваровНаСкладах()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	// Удалим из таблицы строки, по которым не было изменений
	КоличествоСтрок = ТаблицаТоваров.Количество();
	Для Индекс = 1 по КоличествоСтрок Цикл
		
		СтрокаТаблицы = ТаблицаТоваров[КоличествоСтрок - Индекс];
		
		Если СтрокаТаблицы.Количество = 0 И СтрокаТаблицы.Сумма = 0 И СтрокаТаблицы.НДС = 0 Тогда
			ТаблицаТоваров.Удалить(СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;

	// Создаем колонку "Стоимость" и копируем в нее колонку "Сумма"
	ТаблицаТоваров.Колонки.Добавить("Стоимость", ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("Сумма") , "Стоимость");
	
	ТаблицаТоваров.Колонки.Добавить("КоличествоМинус", ПолучитьОписаниеТиповЧисла(15,3));

	// Порядок вызова в данном случае важен
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("ЦенаВВалютеЗаказа"  , ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"           , ПолучитьОписаниеТиповЧисла(15,2));

	ЕстьЦена = Не ТаблицаТоваров.Колонки.Найти("Цена") = Неопределено;
	
	// Надо расчитать нужные колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		// Считаем, что поступление выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, ВалютаДокумента, 
			                                  СтруктураШапкиДокумента.ВалютаЗаказа,
			                                  КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
			                                  СтруктураШапкиДокумента.КурсЗаказа,
			                                  КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
			                                  СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;

		СтрокаТаблицы.КоличествоМинус = - СтрокаТаблицы.Количество;
		СтоимостьСНДС  = СтрокаТаблицы.Стоимость + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Если СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий Тогда
			СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Иначе
			СтрокаТаблицы.Стоимость = СтоимостьСНДС;
		КонецЕсли;

		СтрокаТаблицы.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СтоимостьСНДС, ВалютаДокумента, 
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
		                                 КурсВзаиморасчетов, КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов);

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаУпр = ПересчитатьИзВалютыВВалюту(СтоимостьСНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.Стоимость = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		// Цена нужна для проведения по заказам поставщиков, поэтому ее необходимо пересчитать в валюту заказа
		Если ЕстьЦена И НЕ ЗначениеНеЗаполнено(СтруктураШапкиДокумента.Сделка) 
			И (ТипЗнч(СтруктураШапкиДокумента.Сделка) = Тип("ДокументСсылка.ЗаказПоставщику")
			ИЛИ ТипЗнч(СтруктураШапкиДокумента.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")) Тогда
			СтруктураКурсаВалютыЗаказа = ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаЗаказа, Дата);
			СтрокаТаблицы.Цена = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаЗаказа,
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураКурсаВалютыЗаказа.Курс, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураКурсаВалютыЗаказа.Кратность);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)
	
	//ОЛ
	ТаблицаТары = Новый Таблицазначений;
	//конец ОЛ
	//ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	// Переименуем колонку "Сумма" в "Стоимость" (как в регистрах).
	ТаблицаТары.Колонки.Сумма.Имя = "Стоимость";
	
	// Порядок вызова в данном случае важен
	ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

Процедура ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента)

	ТаблицаТары.Колонки.Добавить("ЦенаВВалютеЗаказа"  , ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов", ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаТары.Колонки.Добавить("СуммаУпр"           , ПолучитьОписаниеТиповЧисла(15,2));

	// Надо расчитать сумму без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		// Счиатем, что поступление выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, ВалютаДокумента, 
			                                  СтруктураШапкиДокумента.ВалютаЗаказа,
			                                  КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
			                                  СтруктураШапкиДокумента.КурсЗаказа,
			                                  КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
			                                  СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;

		СтрокаТаблицы.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента, 
			                                  СтруктураШапкиДокумента.ВалютаВзаиморасчетов, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
			                                  КурсВзаиморасчетов, КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов);

		СтрокаТаблицы.СуммаУпр = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
			                             СтруктураШапкиДокумента.ВалютаУправленческогоУчета, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
			                             СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			                             КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
			                             СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		// Суммы пересчитаем в валюту упр. учета. По таре считаем, что СуммаБезНДС = Сумма
		СтрокаТаблицы.Стоимость = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);


	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТарыУпр()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейШапкиУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	// Если установлен призник "Обновлять цены поставщиков при поступлении товаров",
	// то надо обязательно указывать тип цен
	//Если РегистрироватьЦеныПоставщика И ОтражатьВУправленческомУчете Тогда
	//	СтруктураОбязательныхПолей.Вставить("ТипЦен", "Для обновления цен поставщиков необходимо указывать тип цен!");
	//КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, 
	                             |ВалютаДокумента, Контрагент, ДоговорКонтрагента, ВидПоступления,
	                             |КурсВзаиморасчетов, КратностьВзаиморасчетов");

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад
	   И Не СтруктураШапкиДокумента.СкладВТабличнойЧасти
	   И Товары.Количество() > 0 Тогда
		СтруктураОбязательныхПолей.Вставить("СкладОрдер");
	КонецЕсли;

	Если не ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПродажаАвтозапчастей") Тогда
		// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			СтруктураОбязательныхПолей.Вставить( "Сделка", 
			"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам (счетам)""! 
			|Заполните поле ""Заказ поставщику""!");
		ИначеЕсли СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			СтруктураОбязательныхПолей.Вставить( "Сделка", 
			"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам (счетам)""! 
			|Заполните поле ""Счет поставщика""!");
		КонецЕсли;
    КонецЕсли;
	
	ДополнитьСтруктуруОбязательныхПолейШапкиУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выполняет проверки,которые нужны только для упр. учета
Процедура ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Если склад указывается в ТЧ, то в шапке он может быть не заполнен или указан неправильно,
	// это ни на что не влияет, потому что при проведении используется склад в ТЧ.
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад
	   И Не СтруктураШапкиДокумента.СкладВТабличнойЧасти 
	   И СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			ОшибкаПриПроведении("Документ не может осуществлять поступление на неавтоматизированную торговую точку!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)


КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура");

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураОбязательныхПолей.Вставить("ПриходныйОрдер");
	КонецЕсли;

	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь НТТ быть не должно.
	ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Процедура ПроверитьЗаполнениеТабличнойЧастиПродажи(ТаблицаПоПродажам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "КорректировкаРеализации";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, ДокументРеализации");
	
	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "КорректировкаРеализации", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "КорректировкаРеализации", ТаблицаПоПродажам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "КорректировкаРеализации", ТаблицаПоПродажам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()


// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиУслугиУпр(СтруктураОбязательныхПолей)


КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  РезультатЗапросаПоУслугам - результат запроса, содержащий данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                     - флаг отказа в проведении.
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Услуги";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Содержание");

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиУслугиУпр(СтруктураОбязательныхПолей);
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);
	Иначе
		КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, , СтруктураОбязательныхПолей);
	КонецЕсли;

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь товаров быть не должно.
	ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Процедура заполняет значение реквизитов до корректировки
//
Процедура ОбработатьСуммыДоКорректировки()
	
	ИсправлениеКорректировки = ЗначениеЗаполнено(ИсправляемыйДокументПоступления) 
							И (ТипЗнч(ИсправляемыйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления")) 
							И (ИсправляемыйДокументПоступления.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);

	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("КоличествоДоИзменения"), "КоличествоДоКорректировки");
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("ЦенаДоИзменения"),       "ЦенаДоКорректировки");
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("СуммаДоИзменения"),      "СуммаДоКорректировки");
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("СуммаНДСДоИзменения"),   "СуммаНДСДоКорректировки");
		
		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("КоличествоДоИзменения"), "КоличествоДоКорректировки");
		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("ЦенаДоИзменения"),       "ЦенаДоКорректировки");
		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("СуммаДоИзменения"),      "СуммаДоКорректировки");
		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("СуммаНДСДоИзменения"),   "СуммаНДСДоКорректировки");
		
	ИначеЕсли Не ИсправлениеКорректировки Тогда
		
		Для Каждого СтрокаТЧ из Товары Цикл
			СтрокаТЧ.КоличествоДоКорректировки = 0;
			СтрокаТЧ.ЦенаДоКорректировки = 0;
			СтрокаТЧ.СуммаДоКорректировки = 0;
			СтрокаТЧ.СуммаНДСДоКорректировки = 0;
		КонецЦикла;
		Для Каждого СтрокаТЧ из Услуги Цикл
			СтрокаТЧ.КоличествоДоКорректировки = 0;
			СтрокаТЧ.ЦенаДоКорректировки = 0;
			СтрокаТЧ.СуммаДоКорректировки = 0;
			СтрокаТЧ.СуммаНДСДоКорректировки = 0;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)


КонецПроцедуры

Процедура ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, ТаблицаПоТоварам, Отказ, Заголовок, СтруктураШапкиДокумента)

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
	НаборДвижений = Движения.ТоварыОрганизаций;

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Дата < '20140501000000' Тогда
			Для каждого СтрокаТаблицыДвижений ИЗ ТаблицаДвижений Цикл
				СтрокаТаблицыДвижений.Склад = Справочники.Склады.ПустаяСсылка();
			КонецЦикла;
		КонецЕсли;

		Если Не Отказ Тогда
			Движения.ТоварыОрганизаций.ВыполнитьПриход();
		КонецЕсли;

	Иначе // По ордеру

		// По ордеру нужно сторнировать движения по товарам организаций,
		// если в ордере была указана не та организация.
		// Удалим строки, по которым не нужно делать движений (организации совпадают).
		КопияТаблицыТоваров = ТаблицаПоТоварам.Скопировать();
		КолвоЭлементовКоллекции = КопияТаблицыТоваров.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
			ЭлементКоллекции = КопияТаблицыТоваров[КолвоЭлементовКоллекции - ОбратныйИндекс];
			Если ЭлементКоллекции.ОрганизацияДокументаПолучения = СтруктураШапкиДокумента.Организация Тогда
				КопияТаблицыТоваров.Удалить(ЭлементКоллекции);
			КонецЕсли;
		КонецЦикла;

		Если КопияТаблицыТоваров.Количество() > 0 Тогда // Есть что проводить.

			// Вначале сторнируем
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(КопияТаблицыТоваров, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗагрузитьКолонку(КопияТаблицыТоваров.ВыгрузитьКолонку("ОрганизацияДокументаПолучения"), "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ТоварыОрганизаций.ВыполнитьРасход();
			КонецЕсли;

			// Теперь сделаем движения с правильной организацией.
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ТоварыОрганизаций.ВыполнитьПриход();
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизацийРегл()

// Проводит табличные части "Товары" и "Возвратная тара" по регистрам
//
// Параметры:
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ТоварыИТараПоРегистрамОстатковИПартийУпр(РежимПроведения, ТаблицаПоТоварам, ТаблицаПоУслугам, Отказ, Заголовок, СтруктураШапкиДокумента)

	// Определим код операции движений по регистру партий
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПоступлениеНаКомиссию;
	Иначе
		КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.Поступление
	КонецЕсли;
	
	Если ОтражатьВУправленческомУчете Тогда

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
		Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда

			НаборДвижений = Движения.ТоварыНаСкладах;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвиженийТоварыНаСкладах = НаборДвижений.Выгрузить();
			ТаблицаДвиженийТоварыНаСкладах.Очистить();
			ТаблицаДвижений = ТаблицаДвиженийТоварыНаСкладах.Скопировать();

			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ТоварыНаСкладах.ВыполнитьПриход();
			КонецЕсли;

		Иначе // Приход по ордеру

			НаборДвижений = Движения.ТоварыКПолучениюНаСклады;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвиженийТоварыКПолучению = НаборДвижений.Выгрузить();
			ТаблицаДвиженийТоварыКПолучению.Очистить();
			ТаблицаДвижений = ТаблицаДвиженийТоварыКПолучению.Скопировать();

			// Заполним таблицу движений.
			ТаблицаКПолучению = ТаблицаПоТоварам.Скопировать();
			ТаблицаКПолучению.Колонки.Добавить("ДокументРезерва");
			
			// Документ резерва - приходный ордрер без права продажи.
			Для каждого СтрокаТаблицы из ТаблицаКПолучению Цикл

				Если СтрокаТаблицы.БезПраваПродажи Тогда
					СтрокаТаблицы.ДокументРезерва = СтрокаТаблицы.ДокументПолучения;
				КонецЕсли;

			КонецЦикла;

			ЗагрузитьВТаблицуЗначений(ТаблицаКПолучению, ТаблицаДвижений);

			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.ТоварыКПолучениюНаСклады.ВыполнитьРасход();
			КонецЕсли;

		КонецЕсли;
		
		// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах.
		НаборДвижений = Движения.ПартииТоваровНаСкладах;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвиженийПартииТоваровНаСкладах = НаборДвижений.Выгрузить();
		ТаблицаДвиженийПартииТоваровНаСкладах.Очистить();
		ТаблицаДвижений = ТаблицаДвиженийПартииТоваровНаСкладах.Скопировать();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля.
		ЗаполнитьПоляПартииТоваровНаСкладахУпр(ТаблицаПоТоварам, ТаблицаДвижений, ОпределитьСтатусПартииПриходаУпр(СтруктураШапкиДокумента), СтруктураШапкиДокумента);
		
		// Код операции
		ТаблицаДвижений.ЗаполнитьЗначения(КодОперацииПартииТоваров, "КодОперации");
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ПартииТоваровНаСкладах.ВыполнитьПриход();
		КонецЕсли;
		
		// При поступлении по ордеру нужно сторнировать партию ордера
		Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда

			ТаблицаДвижений.Очистить();
			
			ТаблицаПартииПоОрдерам = ТаблицаПоТоварам.Скопировать();
			ТаблицаПартииПоОрдерам.Колонки.Добавить("ДокументОприходования");
			
			Сч = 0;
			Пока Сч < ТаблицаПартииПоОрдерам.Количество() Цикл
				СтрокаТаблицы = ТаблицаПартииПоОрдерам.Получить(Сч);
				Если СтрокаТаблицы.БезПраваПродажи = Истина Тогда
					ТаблицаПартииПоОрдерам.Удалить(СтрокаТаблицы);
				Иначе

					// Документ оприходования - приходный ордрер
					СтрокаТаблицы.ДокументОприходования = СтрокаТаблицы.ДокументПолучения;
					Сч = Сч + 1;
				КонецЕсли;
			КонецЦикла;
			
			Если ТаблицаПартииПоОрдерам.Количество() > 0 Тогда

				// Заполним таблицу движений.
				ЗагрузитьВТаблицуЗначений(ТаблицаПартииПоОрдерам, ТаблицаДвижений);
				
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ПоОрдеру, "СтатусПартии");
				ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
				

				Для каждого Строка Из ТаблицаДвижений Цикл
					Строка.Количество = - Строка.Количество;
				КонецЦикла;

				ТаблицаДвижений.ЗаполнитьЗначения(0, "Стоимость");
			
				// Код операции - поступление по ордеру (сторно)
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПоступлениеПоОрдеру, "КодОперации");

				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

				Если Не Отказ Тогда
					Движения.ПартииТоваровНаСкладах.ВыполнитьПриход();
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;
		
		// ТОВАРЫ ПО РЕГИСТРУ Закупки.
		
		//Если НЕ ПерепродажаНаИП Тогда
			
			НаборДвижений = Движения.Закупки;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвиженийЗакупки = НаборДвижений.Выгрузить();
			ТаблицаДвиженийЗакупки.Очистить();
			ТаблицаДвижений = ТаблицаДвиженийЗакупки.Скопировать();
			
			// Стоимость в регистре Закупки должна быть с НДС при любых настройках НеВключатьНДСВСтоимостьПартий.
			КопияТаблицыТоваров = ТаблицаПоТоварам.Скопировать();
			КопияТаблицыТоваров.ЗагрузитьКолонку(КопияТаблицыТоваров.ВыгрузитьКолонку("СуммаУпр"), "Стоимость");
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(КопияТаблицыТоваров, ТаблицаДвижений);
			
			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,      "Подразделение");
			ТаблицаДвижений.ЗаполнитьЗначения(ОпределитьСтатусПартииПриходаУпр(СтруктураШапкиДокумента), "СтатусПартии");
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
			//ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "ДокументЗакупки");
			//ОЛ
			Если ТипЗнч(Ссылка.ДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(Ссылка.ИсправляемыйДокументПоступления, "ДокументЗакупки");
			Иначе	
				ТаблицаДвижений.ЗаполнитьЗначения(Ссылка.ДокументПоступления, "ДокументЗакупки");
			КонецЕсли;
			//конец ОЛ
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.Закупки.ВыполнитьДвижения();
			КонецЕсли;
			
		//КонецЕсли;
		
		// УСЛУГИ ПО РЕГИСТРУ Закупки.
		
		НаборДвижений = Движения.Закупки;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвиженийЗакупки = НаборДвижений.Выгрузить();
		ТаблицаДвиженийЗакупки.Очистить();
		ТаблицаДвижений = ТаблицаДвиженийЗакупки.Скопировать();
		
		// Стоимость в регистре Закупки должна быть с НДС при любых настройках НеВключатьНДСВСтоимостьПартий.
		КопияТаблицыУслуг = ТаблицаПоУслугам.Скопировать();
		КопияТаблицыУслуг.ЗагрузитьКолонку(КопияТаблицыУслуг.ВыгрузитьКолонку("СуммаУпр"), "Стоимость");
		
		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(КопияТаблицыУслуг, ТаблицаДвижений);
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(ОпределитьСтатусПартииПриходаУпр(СтруктураШапкиДокумента), "СтатусПартии");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,                 "ДоговорКонтрагента");
		//ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,                             "ДокументЗакупки");
		//ОЛ
		Если ТипЗнч(Ссылка.ДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка.ИсправляемыйДокументПоступления, "ДокументЗакупки");
		Иначе	
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка.ДокументПоступления, "ДокументЗакупки");
		КонецЕсли;
		//конец ОЛ
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.Закупки.ВыполнитьДвижения();
		КонецЕсли;
	КонецЕсли; // ОтражатьВУправленческомУчете

КонецПроцедуры // ТоварыИТараПоРегистрамОстатковИПартийУпр()

// По результатам запросов формирует движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ "Услуги",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоПродажам, Отказ, Заголовок);
							  #Если Клиент тогда
								  Сообщить("Документ проводится ТОЛЬКО по регистрам взаиморасчетов!!");
							  #КонецЕсли
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоУслугам, Отказ, Заголовок);

	//ДвиженияПоРегиструВзаиморасчетыДляНДС(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);

	//ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, 
	//						  Отказ, Заголовок);

	//ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, 
	//						  ТаблицаПоТоварам, Отказ, Заголовок, СтруктураШапкиДокумента);

	////ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, Отказ, Заголовок);

	//// По партиям, оприходованным по ордеру с парвом продажи, возможно следует выполнить 
	//// корректировку списания
	//Если ОтражатьВУправленческомУчете
	//	И ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда

	//	Движения.ПартииТоваровНаСкладах.Записать();

	//	УчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата);

	//	Если УчетнаяПолитика.СписыватьПартииПриПроведенииДокументов Тогда

	//		ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());

	//		Если Движения.СписанныеТовары.Количество()>0 Тогда
	//			ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
	//			ЗаписьРегистрации.Период      = Дата;
	//		КонецЕсли;

	//	Иначе

	//		// В неоперативном режиме границы последовательностей сдвигаются назад, если они позже документа.
	//		Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
	//			СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация, ОтражатьВУправленческомУчете, Ложь, Ложь)
	//		КонецЕсли;

	//	КонецЕсли;

	//КонецЕсли;

//	// Движение по регистру ГТД
//	Если Ссылка.Дата>'20110401' Тогда
//		ЗапросСерииГТД=Новый Запрос;
//		
//		ЗапросСерииГТД.Текст= "ВЫБРАТЬ
//		|	СерияНоменклатуры,
//		|	Количество - КоличествоДоИзменения КАК Количество
//		|ИЗ
//		|	Документ.КорректировкаПоступления.Товары 
//		|ГДЕ
//		|	Ссылка = &Ссылка И СерияНоменклатуры <> &ПустаяСерияНоменклатуры" ;
//		
//		ЗапросСерииГТД.УстановитьПараметр("Ссылка",Ссылка);
//		ЗапросСерииГТД.УстановитьПараметр("ПустаяСерияНоменклатуры",Справочники.СерииНоменклатуры.ПустаяСсылка());
//		ТаблицаСерий=ЗапросСерииГТД.Выполнить().Выгрузить();
//		Если ТаблицаСерий.Количество()>0 Тогда
//			
//			НаборДвижений = Движения.ГТД;
//			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
//			ТаблицаДвижений = НаборДвижений.Выгрузить(); 
//			// Заполним таблицу движений.
//			ЗагрузитьВТаблицуЗначений(ТаблицаСерий, ТаблицаДвижений);
//			
//			
//			НаборДвижений.мПериод            = Дата;
//			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
//			
//			Если Не Отказ Тогда
//				Движения.ГТД.ВыполнитьПриход();
//			КонецЕсли;
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	//ОЛ
//	//Корректировка себестоимости списания и себестоимости продаж
//	ДвиженияПоРегистрамПродажи(ТаблицаПоПродажам, СтруктураШапкиДокумента, Отказ);
//	//конец ОЛ
//	
//	//***2015.09.30
//	ДвиженияПоРегистрамКомпенсацииСкидок(ТаблицаПоПродажам);
//	//***

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамПродажи(ТаблицаПоПродажам, СтруктураШапкиДокумента, Отказ)
	
	Если ТаблицаПоПродажам.Количество()>0 Тогда
			
		//ДВИЖЕНИЯ ПО РЕГИСТРУ ПРОДАЖИ СЕБЕСТОИМОСТЬ
		//Комплектация номенклатуры и Требование-накладная не должна делать движения по регистру продажи
		ТаблицаПоПродажамСеб = ТаблицаПоПродажам.Скопировать();
		КолСтрок = ТаблицаПоПродажамСеб.Количество()-1;
		к = 0;
		Пока к <= КолСтрок Цикл
			Если ТипЗнч(ТаблицаПоПродажамСеб[к].ДокументДвижения) = Тип("ДокументСсылка.КомплектацияНоменклатуры")
				или ТипЗнч(ТаблицаПоПродажамСеб[к].ДокументДвижения) = Тип("ДокументСсылка.ТребованиеНакладная")
				Тогда
				ТаблицаПоПродажамСеб.Удалить(к);
				к = к-1;
			КонецЕсли;	
			к = к+1;
			Если к > ТаблицаПоПродажамСеб.Количество()-1 Тогда
				прервать;
			КонецЕсли;	
		КонецЦикла;
		
		
		НаборДвижений = Движения.ПродажиСебестоимость;
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить(); 
		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоПродажамСеб, ТаблицаДвижений);
		
		//Недостающие поля
		ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
		ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
		ТаблицаДвижений.ЗаполнитьЗначения(0,"Количество");
		ТаблицаДвижений.ЗаполнитьЗначения(Истина,"СписаниеПартий");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.ПродажиСебестоимость.ВыполнитьДвижения();
		КонецЕсли;

		
		//ДВИЖЕНИЯ ПО РЕГИСТРУ ПАРТИИ ТОВАРОВ НА СКЛАДАХ
		
		//ПО КОМПЛЕКТАЦИИ НОМЕНКЛАТУРЫ ДОЛЖЕН БЫТЬ ЕЩЕ ПРИХОД НА КОМПЛЕКТ В ПАРТИЯХ ТОВАРОВ
		ТаблицаПоКомплектациям = ТаблицаПоПродажам.Скопировать();
		КолСтрок = ТаблицаПоКомплектациям.Количество()-1;
		к = 0;
		Пока к <= КолСтрок Цикл
			Если ТипЗнч(ТаблицаПоКомплектациям[к].ДокументДвижения) <> Тип("ДокументСсылка.КомплектацияНоменклатуры") Тогда
				ТаблицаПоКомплектациям.Удалить(к);
				к = к-1;
			Иначе
				ТаблицаПоКомплектациям[к].Номенклатура = ТаблицаПоКомплектациям[к].НоменклатураКомплект;
			КонецЕсли;	
			к = к+1;
			Если к > ТаблицаПоКомплектациям.Количество()-1 Тогда
				прервать;
			КонецЕсли;	
		КонецЦикла;
		Если ТаблицаПоКомплектациям.Количество() > 0 Тогда
            //Корректировка документа оприходования
			
			ТаблицаПоКомплектациям.Колонки.Удалить("ДокументОприходования");
			ТаблицаПоКомплектациям.Колонки.Добавить("ДокументОприходования");
			ТаблицаПоКомплектациям[0].ДокументОприходования = ТаблицаПоКомплектациям[0].ДокументДвижения;
			
			НаборДвижений = Движения.ПартииТоваровНаСкладах;
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить(); 
			ТаблицаДвижений.Очистить();
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоКомплектациям, ТаблицаДвижений);
			//Недостающие поля
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
			ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
			ТаблицаДвижений.ЗаполнитьЗначения(0,"Количество");
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый,"Качество");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");
			//ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.Комплектация, "КодОперации");
			ТаблицаДвижений.ЗаполнитьЗначения(Ложь,"СписаниеПартий");
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.ПартииТоваровНаСкладах.ВыполнитьПриход();
			КонецЕсли;
		КонецЕсли;	
		
		//ДВИЖЕНИЯ ПО РЕГИСТРУ ПАРТИИ ТОВАРОВ НА СКЛАДАХ  - РАСХОД
		НаборДвижений = Движения.ПартииТоваровНаСкладах;
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить(); 
		ТаблицаДвижений.Очистить();
		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоПродажам, ТаблицаДвижений);
		//Недостающие поля
		ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
		ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
		ТаблицаДвижений.ЗаполнитьЗначения(0,"Количество");
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый,"Качество");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");
		//ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.Реализация, "КодОперации");
		ТаблицаДвижений.ЗаполнитьЗначения(Истина,"СписаниеПартий");
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.ПартииТоваровНаСкладах.ВыполнитьРасход();
		КонецЕсли;
				
	КонецЕсли;	
////Борисова
////Теперь правильно расставим партии
//ТаблицаДвижений=Движения.ПартииТоваровНаСкладах.Выгрузить();
//ТаблицаПартий=КорректировкаРеализации.Выгрузить();
//Для Каждого строкаДвижений из ТаблицаДвижений Цикл
//	Для Каждого  строкаПартий из ТаблицаПартий Цикл
//		Если СтрокаПартий.Номенклатура=СтрокаДвижений.Номенклатура Тогда
//			СтрокаДвижений.ДокументОприходования=СтрокаПартий.ДокументПартии;
//		КонецЕсли;
//	КонецЦикла;
//КонецЦикла;
//Движения.ПартииТоваровНаСкладах.Загрузить(ТаблицаДвижений);

// ТаблицаДвижений=Движения.ПродажиСебестоимость.Выгрузить();
////ТаблицаПартий=КорректировкаРеализации.Выгрузить();
//Для Каждого строкаДвижений из ТаблицаДвижений Цикл
//	Для Каждого  строкаПартий из ТаблицаПартий Цикл
//		Если СтрокаПартий.Номенклатура=СтрокаДвижений.Номенклатура Тогда
//			СтрокаДвижений.ДокументОприходования=СтрокаПартий.ДокументПартии;
//		КонецЕсли;
//	КонецЦикла;
//КонецЦикла;
// Движения.ПродажиСебестоимость.Загрузить(ТаблицаДвижений);

////Борисова
КонецПроцедуры	

Процедура ДвиженияПоРегистрамКомпенсацииСкидок(ТаблицаПоПродажам)
	
	Для каждого СтрТЗ ИЗ ТаблицаПоПродажам Цикл
		Если ЕстьРеквизитДокумента("Сделка", СтрТЗ.ДокументДвижения.ПолучитьОбъект().Метаданные()) Тогда
			Если ЗначениеЗаполнено(СтрТЗ.ДокументДвижения.Сделка) И ТипЗНЧ(СтрТЗ.ДокументДвижения.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				Если СтрТЗ.ДокументДвижения.Сделка.СкидкиПоГАЗу.Количество() > 0 Тогда
					
					НайденаСкидка = Ложь;
					
					Если СтрТЗ.ДокументДвижения.Сделка.СкидкиПоГАЗу.Итог("Сумма") = Товары.Итог("СуммаДоКорректировки") - Товары.Итог("Сумма") Тогда
						
						Для Каждого СтрТЧ ИЗ СтрТЗ.ДокументДвижения.Сделка.СкидкиПоГАЗу Цикл 
							
							//Дебиторская задолженность по договору с поставщиком сторно
							Движение					 = Движения.ВзаиморасчетыСКонтрагентами.Добавить();
							Движение.ВидДвижения		 = ВидДвиженияНакопления.Приход;
							Движение.Период				 = Дата;
							Движение.ДоговорКонтрагента	 = СтрТЧ.ДоговорКонтрагента;
							Движение.Сделка				 = СтрТЗ.ДокументДвижения.Сделка;
							Движение.СуммаВзаиморасчетов = -СтрТЧ.Сумма;
							Движение.СуммаУпр		 	 = -СтрТЧ.Сумма;
							
							//Компенсации скидок на товары от поставщиков
							Движение					 = Движения.ПредоставленныеСкидкиКомпенсируемыеПоставщиками.Добавить();
							Движение.ВидДвижения		 = ВидДвиженияНакопления.Расход;
							Движение.Период				 = Дата;
							Движение.ДоговорКонтрагента	 = СтрТЧ.ДоговорКонтрагента;
							Движение.Сделка				 = СтрТЗ.ДокументДвижения.Сделка;
							Движение.ВидСкидки			 = СтрТЧ.ВидСкидки;
							Движение.СуммаСкидки		 = СтрТЧ.Сумма;
							
							НайденаСкидка = Истина;
							
						КонецЦикла;
						
					Иначе
						
						Для Каждого СтрТЧ ИЗ СтрТЗ.ДокументДвижения.Сделка.СкидкиПоГАЗу Цикл 
							
							Если СтрТЧ.Сумма = Товары.Итог("СуммаДоКорректировки") - Товары.Итог("Сумма") Тогда  //скидок мб несколько, тогда на каждую скидку будет отдельная корректировка поступления
								
								//Дебиторская задолженность по договору с поставщиком сторно
								Движение					 = Движения.ВзаиморасчетыСКонтрагентами.Добавить();
								Движение.ВидДвижения		 = ВидДвиженияНакопления.Приход;
								Движение.Период				 = Дата;
								Движение.ДоговорКонтрагента	 = СтрТЧ.ДоговорКонтрагента;
								Движение.Сделка				 = СтрТЗ.ДокументДвижения.Сделка;
								Движение.СуммаВзаиморасчетов = -СтрТЧ.Сумма;
								Движение.СуммаУпр		 	 = -СтрТЧ.Сумма;
								
								//Компенсации скидок на товары от поставщиков
								Движение					 = Движения.ПредоставленныеСкидкиКомпенсируемыеПоставщиками.Добавить();
								Движение.ВидДвижения		 = ВидДвиженияНакопления.Расход;
								Движение.Период				 = Дата;
								Движение.ДоговорКонтрагента	 = СтрТЧ.ДоговорКонтрагента;
								Движение.Сделка				 = СтрТЗ.ДокументДвижения.Сделка;
								Движение.ВидСкидки			 = СтрТЧ.ВидСкидки;
								Движение.СуммаСкидки		 = СтрТЧ.Сумма;
								
								НайденаСкидка = Истина;
								
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
					
					#Если Клиент Тогда
						Если НЕ НайденаСкидка Тогда
							Сообщить("В Заказе покупателя №" + СтрТЗ.ДокументДвижения.Сделка.Номер + " от " + Лев(Строка(СтрТЗ.ДокументДвижения.Сделка.Дата), 10) + " не найдено ни одной скидки на сумму корректировки.");
						КонецЕсли;
					#КонецЕсли
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
				
КонецПроцедуры

// По результату запроса по шапке документа формируем движения по регистрам для целей упр. учета.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ "Услуги",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
                                  ТаблицаПоТоварам, ТаблицаПоУслугам, Отказ, Заголовок);
	Если Не ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДокументаКорр = ТаблицаПоТоварам.Итог("СуммаВзаиморасчетов")+ТаблицаПоУслугам.Итог("СуммаВзаиморасчетов");
	СуммаДокументаУпрКорр = ТаблицаПоТоварам.Итог("СуммаУпр")+ТаблицаПоУслугам.Итог("СуммаУпр");

	
	// ПО РЕГИСТРУ ВзаиморасчетыСКонтрагентами.
	Если СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом 
	   И СуммаДокументаКорр <> 0 Тогда
	
		НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		// Заполним таблицу движений.
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
		//СтрокаДвижений.Сделка                = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			СтрокаДвижений.Сделка                = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента, "ИсправляемыйДокументПоступления");
		Иначе
		   СтрокаДвижений.Сделка                = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
		КонецЕсли;
		СтрокаДвижений.СуммаВзаиморасчетов   = ПересчитатьИзВалютыВВалюту(СуммаДокументаКорр, ВалютаДокумента,
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
														СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		СтрокаДвижений.СуммаУпр   = ПересчитатьИзВалютыВВалюту(СуммаДокументаУпрКорр, ВалютаДокумента,
														СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
														СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
														СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
		КонецЕсли;

			
		// ПО РЕГИСТРУ РасчетыСКонтрагентами

		//Проводим, только если не заполнен Заказ поставщику
		Если ЗначениеНеЗаполнено(Сделка) ИЛИ
			 ТипЗнч(Сделка) <> Тип("ДокументСсылка.ЗаказПоставщику") Тогда

			Если ОтражатьВУправленческомУчете Тогда
				НаборДвижений = Движения.РасчетыСКонтрагентами;

				// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
				ТаблицаДвижений = НаборДвижений.Выгрузить();
				ТаблицаДвижений.Очистить();

				// Заполним таблицу движений.
				СтрокаДвижений = ТаблицаДвижений.Добавить();
				СтрокаДвижений.РасчетыВозврат        = Перечисления.РасчетыВозврат.Расчеты;
				СтрокаДвижений.ДоговорКонтрагента    = ДоговорКонтрагента;
				//СтрокаДвижений.Сделка                = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,, Истина);
				Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
					СтрокаДвижений.Сделка                = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента, "ИсправляемыйДокументПоступления",Истина);
				Иначе
					СтрокаДвижений.Сделка                = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,,Истина);
				КонецЕсли;
				СтрокаДвижений.СуммаВзаиморасчетов   = ПересчитатьИзВалютыВВалюту(СуммаДокументаКорр, ВалютаДокумента,
															СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
															СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
															СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

				СтрокаДвижений.СуммаУпр   = ПересчитатьИзВалютыВВалюту(СуммаДокументаУпрКорр, ВалютаДокумента,
															СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
															СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
															СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

				НаборДвижений.мПериод            = Дата;
				НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

				Если Не Отказ Тогда
					Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
	// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах.
	// ТАРА ПО РЕГИСТРУ ТоварыНаСкладах.
	// ТАРА ПО РЕГИСТРУ ПартииТоваровНаСкладах.
	
	////Если Не ПерепродажаНаИП Тогда
	//	ТоварыИТараПоРегистрамОстатковИПартийУпр(РежимПроведения, ТаблицаПоТоварам, ТаблицаПоУслугам, Отказ, Заголовок, СтруктураШапкиДокумента);
	////КонецЕсли;

	//Если ОтражатьВУправленческомУчете Тогда
	//	
	//	// Товары по регистру ТоварыПолученные
	//	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

	//		НаборДвижений = Движения.ТоварыПолученные;

	//		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	//		ТаблицаДвижений = НаборДвижений.Выгрузить();
	//		ТаблицаДвижений.Очистить();

	//		// Заполним таблицу движений.
	//		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

	//		// Недостающие поля.
	//		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
	//		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию,"СтатусПолучения");
	//		ТаблицаДвижений.ЗаполнитьЗначения(ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента),"Сделка");

	//		НаборДвижений.мПериод            = Дата;
	//		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	//		Если Не Отказ Тогда
	//			Движения.ТоварыПолученные.ВыполнитьПриход();
	//		КонецЕсли;

	//	КонецЕсли;

	//КонецЕсли;
	//	
	//// Если в реквизите Сделка указан внешний заказ поставщику, то проводится 
	//// по регистру ЗаказыПоставщикам
	//Если НЕ ЗначениеНеЗаполнено(Сделка) 
	//   И (ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику")) Тогда

	//	НаборДвижений = Движения.ЗаказыПоставщикам;

	//	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	//	ТаблицаДвиженийЗаказыПоставщикам = НаборДвижений.Выгрузить();
	//	ТаблицаДвиженийЗаказыПоставщикам.Очистить();
	//	ТаблицаДвижений = ТаблицаДвиженийЗаказыПоставщикам.Скопировать();

	//	// Заполним таблицу движений.
	//	ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

	//	// Недостающие поля.
	//	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
	//	ТаблицаДвижений.ЗаполнитьЗначения(Сделка,"ЗаказПоставщику");
	//	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");

	//	НаборДвижений.мПериод            = Дата;
	//	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	//	Если Не Отказ Тогда
	//		Движения.ЗаказыПоставщикам.ВыполнитьРасход();
	//	КонецЕсли;

	//	ТаблицаДвижений.Очистить();
	//	
	//	// Заполним таблицу движений.
	//	ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаДвижений);

	//	// Недостающие поля.
	//	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
	//	ТаблицаДвижений.ЗаполнитьЗначения(Сделка,"ЗаказПоставщику");
	//	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");

	//	НаборДвижений.мПериод            = Дата;
	//	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	//	Если Не Отказ Тогда
	//		Движения.ЗаказыПоставщикам.ВыполнитьРасход();
	//	КонецЕсли;

	//	// {Лапенков Автозапчасти (проведение по заказам поставщику)
	//	ИначеЕсли    (ЕстьЗаказыПоставщикуВТабличнойЧастиТовары(ЭтотОбъект.Ссылка)   
	//	и ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПродажаАвтозапчастей")) Тогда
	//	НаборДвижений = Движения.ЗаказыПоставщикам;

	//	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	//	ТаблицаДвиженийЗаказыПоставщикам = НаборДвижений.Выгрузить();
	//	ТаблицаДвиженийЗаказыПоставщикам.Очистить();
	//	ТаблицаДвижений = ТаблицаДвиженийЗаказыПоставщикам.Скопировать();

	//	ТаблицаЗаказовПоставщику=ТаблицаПоТоварам.Скопировать();
	//	//ТаблицаЗаказовПоставщику.Колонки.Добавить("ДоговорКонтрагента");
	//	Сч = 0;
	//	Пока Сч < ТаблицаЗаказовПоставщику.Количество() Цикл
	//		СтрокаТаблицы = ТаблицаЗаказовПоставщику.Получить(Сч);
	//		Если  ЗначениеНеЗаполнено(СтрокаТаблицы.ЗаказПоставщику) Тогда
	//			 ТаблицаЗаказовПоставщику.Удалить(СтрокаТаблицы);
	//		 Иначе //исправим договор на тот, который есть в заказе поставщику
	//	//		 СтрокаТаблицы.ДоговорКонтрагента=СтрокаТаблицы.ЗаказПоставщику.ДоговорКонтрагента;
	//			Сч = Сч + 1;
	//		КонецЕсли; 
	//	КонецЦикла;

	//	// Заполним таблицу движений.
	//	ЗагрузитьВТаблицуЗначений(ТаблицаЗаказовПоставщику, ТаблицаДвижений);

	//	// Недостающие поля.
	//	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
	//	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");
	//	ТаблицаДвижений.ЗаполнитьЗначения(0, "Цена");

	//	НаборДвижений.мПериод            = Дата;
	//	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	//	Если Не Отказ Тогда
	//		Движения.ЗаказыПоставщикам.ВыполнитьРасход();
	//	КонецЕсли;
	//	// } Лапенков Автозапчасти
	//КонецЕсли;

	//// Снятие резерва по приходному ордеру
	//Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда

	//	// Сначала удалим из таблицы строки, по которым не надо списывать резерв.
	//	ТаблицаПоТоварамПоОрдерамБезПраваПродажи = ТаблицаПоТоварам.Скопировать();
	//	ТаблицаПоТоварамПоОрдерамБезПраваПродажи.Колонки.ДокументПолучения.Имя = "ДокументРезерва";
	//	Сч = 0;
	//	Пока Сч < ТаблицаПоТоварамПоОрдерамБезПраваПродажи.Количество() Цикл

	//		СтрокаТаблицы = ТаблицаПоТоварамПоОрдерамБезПраваПродажи.Получить(Сч);
	//		Если Не СтрокаТаблицы.БезПраваПродажи Тогда
	//			ТаблицаПоТоварамПоОрдерамБезПраваПродажи.Удалить(СтрокаТаблицы);
	//		Иначе
	//			Сч = Сч + 1;
	//		КонецЕсли;

	//	КонецЦикла;

	//	// Если осталась хоть одна строка., то делаем движения.
	//	Если ТаблицаПоТоварамПоОрдерамБезПраваПродажи.Количество() > 0 Тогда 

	//		НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

	//		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	//		ТаблицаДвиженийРезервы = НаборДвижений.Выгрузить();
	//		ТаблицаДвиженийРезервы.Очистить();
	//		ТаблицаДвижений = ТаблицаДвиженийРезервы.Скопировать();

	//		// Заполним таблицу движений.
	//		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамПоОрдерамБезПраваПродажи, ТаблицаДвижений);

	//		НаборДвижений.мПериод            = Дата;
	//		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	//		Если Не Отказ Тогда
	//			Движения.ТоварыВРезервеНаСкладах.ВыполнитьРасход();
	//		КонецЕсли;

	//	КонецЕсли;

	//	ТаблицаДвижений.Очистить();

	//КонецЕсли;

	//// Резервирование по заказам покупателей

	//// Сначала удалим из таблицы строки, по которым не надо ничего резервировать
	//// (реквизит ЗаказПокупателя пуст)
	//ТаблицаПоТоварамЗаказамПокупателей = ТаблицаПоТоварам.Скопировать();
	//Сч = 0;
	//Пока Сч < ТаблицаПоТоварамЗаказамПокупателей.Количество() Цикл
	//	СтрокаТаблицы = ТаблицаПоТоварамЗаказамПокупателей.Получить(Сч);
	//	Если ЗначениеНеЗаполнено(СтрокаТаблицы.ЗаказПокупателя)
	//	 ИЛИ (ТипЗнч(СтрокаТаблицы.ЗаказПокупателя) = Тип("ДокументСсылка.ВнутреннийЗаказ") // Считается исполнением внутреннего заказа.
	//	   И  СтрокаТаблицы.ЗаказПокупателя.Заказчик = Ссылка.СкладОрдер) Тогда             // Резерв в это случае делать не надо.
	//		ТаблицаПоТоварамЗаказамПокупателей.Удалить(СтрокаТаблицы);
	//	Иначе
	//		Сч = Сч + 1;
	//	КонецЕсли;
	//КонецЦикла;

	//Если ТаблицаПоТоварамЗаказамПокупателей.Количество() > 0 Тогда

	//	ТаблицаПоТоварамЗаказамПокупателей.Колонки.ЗаказПокупателя.Имя = "ДокументРезерва";

	//	НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

	//	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	//	ТаблицаДвиженийРезервы = НаборДвижений.Выгрузить();
	//	ТаблицаДвиженийРезервы.Очистить();
	//	ТаблицаДвижений = ТаблицаДвиженийРезервы.Скопировать();

	//	// Заполним таблицу движений.
	//	ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамЗаказамПокупателей, ТаблицаДвижений);

	//	НаборДвижений.мПериод            = Дата;
	//	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	//	Если Не Отказ Тогда
	//		Движения.ТоварыВРезервеНаСкладах.ВыполнитьПриход();
	//	КонецЕсли;

	//	ТаблицаДвижений.Очистить();

	//	Если НЕ ЗначениеНеЗаполнено(Сделка) И (ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику")) Тогда
	//		
	//		ТаблицаПоТоварамЗаказамПокупателей.Колонки.ДокументРезерва.Имя = "ЗаказПокупателя";
	//	
	//		// По регистру РазмещениеЗаказовПокупателей
	//		НаборДвижений = Движения.РазмещениеЗаказовПокупателей;

	//		ТаблицаДвижений = НаборДвижений.Выгрузить();

	//		// Заполним таблицу движений.
	//		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамЗаказамПокупателей, ТаблицаДвижений);

	//		ТаблицаДвижений.ЗаполнитьЗначения(Сделка,"ЗаказПоставщику");
	//		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Товар, "ТоварТара");

	//		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	//		НаборДвижений.мПериод            = Дата;
	//		
	//		// Проверка осатков при оперативном проведении.			
	//		Движения.РазмещениеЗаказовПокупателей.ВыполнитьРасход();
	//		ИначеЕсли (ЕстьЗаказыПоставщикуВТабличнойЧастиТовары(ЭтотОбъект.Ссылка)   
	//		и ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПродажаАвтозапчастей")) Тогда 
	//		
	//		ТаблицаПоТоварамЗаказамПокупателей.Колонки.ДокументРезерва.Имя = "ЗаказПокупателя";
	//		НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
	//		ТаблицаДвижений = НаборДвижений.Выгрузить();
	//		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамЗаказамПокупателей, ТаблицаДвижений);
	//		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Товар, "ТоварТара");

	//		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	//		НаборДвижений.мПериод            = Дата;
	//		
	//		Движения.РазмещениеЗаказовПокупателей.ВыполнитьРасход();
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;


	//// Движения по услугам.
	//Если ТаблицаПоУслугам.Количество() > 0 Тогда

	//	СтруктДопПараметры = Новый Структура;
	//	СтруктДопПараметры.Вставить("ЕстьНДС", Истина);
	//	ДвиженияПоПрочимЗатратамУпр(ЭтотОбъект, ТаблицаПоУслугам, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета, СтруктДопПараметры);

	//КонецЕсли;

	// Если установлен флаг РегистрироватьЦеныПоставщика, нужно зарегистрировать цены
	//ОЛ заремила
	//Если РегистрироватьЦеныПоставщика И ОтражатьВУправленческомУчете Тогда

	//	НаборДвижений = Движения.ЦеныНоменклатурыКонтрагентов;

	//	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	//	ТаблицаДвижений = НаборДвижений.Выгрузить();
	//	ТаблицаДвижений.Очистить();

	//	ТаблицаПоТоварамЦены = ТаблицаПоТоварам.Скопировать();
	//	СпособЗаполненияЦен  = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;

	//	// Пересчитаем цены, согласно флагу типа цен контрагентов (цена включает НДС)
	//	Если ТипЦен.ЦенаВключаетНДС Тогда
	//		Если НЕ СуммаВключаетНДС Тогда
	//			Для Каждого СтрокаТабличнойЧасти Из ТаблицаПоТоварамЦены Цикл
	//				СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена,
	//											СпособЗаполненияЦен, Ложь, Истина, Истина,
	//											ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	//			КонецЦикла;
	//		КонецЕсли;
	//	Иначе
	//		Если СуммаВключаетНДС Тогда
	//			Для Каждого СтрокаТабличнойЧасти Из ТаблицаПоТоварамЦены Цикл
	//				СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена,
	//											СпособЗаполненияЦен, Истина, Ложь, Ложь,
	//											ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	//			КонецЦикла;
	//		КонецЕсли;
	//	КонецЕсли;

	//	// Удалим строки с одинаковым товаром и характеристикой.
	//	МассивСтрокДляУдаления = Новый Массив;
	//	СписокСвернутыхСтрок   = Новый СписокЗначений;

	//	Для Каждого СтрокаТаблицыПоТоварамЦены Из ТаблицаПоТоварамЦены Цикл
	//		СтруктураОтбора = Новый Структура;
	//		СтруктураОтбора.Вставить("Номенклатура", СтрокаТаблицыПоТоварамЦены.Номенклатура);
	//		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаТаблицыПоТоварамЦены.ХарактеристикаНоменклатуры);
	//		СтрокиПоТовару = ТаблицаПоТоварамЦены.НайтиСтроки(СтруктураОтбора);
	//		Если СтрокиПоТовару.Количество() > 0 Тогда //Есть несколько строк по товару.
	//			ПерваяСтрока = СтрокиПоТовару[0];
	//			Цена = 0;
	//			Для каждого СтрокаПоТовару Из СтрокиПоТовару Цикл
	//				Если СписокСвернутыхСтрок.НайтиПоЗначению(СтрокаПоТовару) = Неопределено Тогда
	//					СписокСвернутыхСтрок.Добавить(СтрокаПоТовару);
	//				Иначе
	//					Продолжить;
	//				КонецЕсли;
	//				Цена = Цена + СтрокаПоТовару.Цена/СтрокаПоТовару.Коэффициент;
	//				Если СтрокаПоТовару <> ПерваяСтрока Тогда
	//					МассивСтрокДляУдаления.Добавить(СтрокаПоТовару);
	//				КонецЕсли;
	//			КонецЦикла;
	//			Если Цена > 0 Тогда
	//				ПерваяСтрока.Цена = Цена / СтрокиПоТовару.Количество() * ПерваяСтрока.Коэффициент;
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЦикла;

	//	Для Каждого СтрокаДляУдаления Из МассивСтрокДляУдаления Цикл
	//		ТаблицаПоТоварамЦены.Удалить(СтрокаДляУдаления);
	//	КонецЦикла;

	//	// Заполним таблицу движений.
	//	ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамЦены, ТаблицаДвижений);

	//	// Недостающие поля.
	//	ТаблицаДвижений.ЗаполнитьЗначения(ТипЦен,"ТипЦен");
	//	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВалютаДокумента,"Валюта");

	//	НаборДвижений.мПериод          = Дата;
	//	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	//	Если Не Отказ Тогда
	//		Движения.ЦеныНоменклатурыКонтрагентов.ВыполнитьДвижения();
	//	КонецЕсли;

	//КонецЕсли;
	//конец ОЛ заремила

	// Погашение внутренних заказов в случае Заказчик = Склад поступления
	//ДопПараметры = Новый Структура;
	//ДопПараметры.Вставить( "СтатусПартии",          Перечисления.СтатусыПартийТоваров.Купленный);
	//ДопПараметры.Вставить( "РежимПроведения",       РежимПроведения);
	//ДопПараметры.Вставить( "ИмяРеквизитаЗаказ",     "ЗаказПокупателя");
	//ДопПараметры.Вставить( "ЗаказВШапке",           Ложь);
	//ДопПараметры.Вставить( "ИмяТабЧасти",           "Товары");
	//
	//ТабИсходная = ТаблицаПоТоварам.Скопировать();
	//Сч = 0;
	//Пока Сч < ТабИсходная.Количество() Цикл
	//	СтрокаТаблицы = ТабИсходная.Получить(Сч);
	//	Если ТипЗнч(СтрокаТаблицы.ЗаказПокупателя) = Тип("ДокументСсылка.ВнутреннийЗаказ") // Считается исполнением внутреннего заказа.
	//	   И СтрокаТаблицы.ЗаказПокупателя.Заказчик = Ссылка.СкладОрдер Тогда
	//		Сч = Сч + 1;
	//	Иначе
	//		ТабИсходная.Удалить(СтрокаТаблицы);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Если ТабИсходная.Количество() > 0 Тогда
	//	ДвижениеПоВнутреннимЗаказам( ЭтотОбъект, ТабИсходная, ДопПараметры, Отказ, Заголовок);
	//КонецЕсли;
	//
	//ТабИсходная.Очистить();
		
КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Формирует движения по регистру взаиморасчетов для НДС
//
// Параметры:
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегиструВзаиморасчетыДляНДС(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)

	// По регистрам взаиморасчетов для НДС проводятся документы, у которых
	// установлен флаг БУ и которые оформлены по договору с поставщиком.
	Если НЕ ОтражатьВБухгалтерскомУчете 
	 Или СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
		Возврат;
	КонецЕсли;

	// По регистру ВзаиморасчетыСПокупателямиДляНДС.
	НаборДвижений = Движения.ВзаиморасчетыСПоставщикамиДляНДС;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	СтрокаДвижений = ТаблицаДвижений.Добавить();

	СтрокаДвижений.Организация        = СтруктураШапкиДокумента.Организация;
	СтрокаДвижений.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
	//СтрокаДвижений.Сделка             = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
		СтрокаДвижений.Сделка                = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента, "ИсправляемыйДокументПоступления");
	Иначе
		СтрокаДвижений.Сделка                = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
	КонецЕсли;

	СтрокаДвижений.Сумма   = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
	                                                    мВалютаРегламентированногоУчета,
	                                                    КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
	                                                    1,
	                                                    КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
	                                                    1);

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ВзаиморасчетыСПоставщикамиДляНДС.ВыполнитьПриход();
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструВзаиморасчетыДляНДС()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрамРегл
// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки" и "НДСПродажи"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		// Поступление комиссионных товаров не отражается в подсистеме учета НДС
		Возврат;
	КонецЕсли;
	
	ТаблицыДокумента = Новый Структура();
	ТаблицыДокумента.Вставить("ТаблицаПоТоварам",ТаблицаПоТоварам);
	ТаблицыДокумента.Вставить("ТаблицаПоУслугам",ТаблицаПоУслугам);
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра НДСПокупки.
	ТаблицаДвиженийПокупки = Движения.НДСПокупки.Выгрузить();
	ТаблицаДвиженийПокупки.Очистить();
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра НДСПартииТоваров.
	ТаблицаДвиженийПартии = Движения.НДСПартииТоваров.Выгрузить();
	ТаблицаДвиженийПартии.Очистить();
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра НДСКосвенныеРасходы.
	ТаблицаДвиженийКосвенных = Движения.НДСКосвенныеРасходы.Выгрузить();
	ТаблицаДвиженийКосвенных.Очистить();
	
	// Дополнительно реализуем механизм учета НДС в качестве налогового агента
	ТаблицаДвиженийПродажи = Движения.НДСПродажи.Выгрузить();
	ТаблицаДвиженийПродажи.Очистить();
				
	Для Каждого ТаблицаДокумента Из ТаблицыДокумента Цикл

		ИдТабЧасти = ТаблицаДокумента.Ключ;
		ТабЧасть   = ТаблицаДокумента.Значение;

		Если ТабЧасть.Количество()> 0 Тогда 

			СформироватьДвиженияПоРегиструНДСПокупки(СтруктураШапкиДокумента, ТабЧасть, ИдТабЧасти, ТаблицаДвиженийПокупки);

			Если ИдТабЧасти = "ТаблицаПоТоварам" Тогда
				СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, ТабЧасть, ИдТабЧасти, ТаблицаДвиженийПартии);
			КонецЕсли;	
				
			Если ИдТабЧасти = "ТаблицаПоУслугам" Тогда
				СформироватьДвиженияПоступленияПоРегиструНДСКосвенныхРасходов(СтруктураШапкиДокумента, ТабЧасть, ИдТабЧасти, ТаблицаДвиженийКосвенных);
			КонецЕсли;	
			
			Если СтруктураШапкиДокумента.УчетАгентскогоНДС Тогда
				СформироватьДвиженияПоРегиструНДСПродажи(СтруктураШапкиДокумента, ТабЧасть, ИдТабЧасти, ТаблицаДвиженийПродажи);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;
	
	Если ТаблицаДвиженийПокупки.Количество() > 0 Тогда
		Движения.НДСПокупки.мПериод          = Дата;
		Движения.НДСПокупки.мТаблицаДвижений = ТаблицаДвиженийПокупки;
		Движения.НДСПокупки.ДобавитьДвижение();
		Движения.НДСПокупки.Записать();
	КонецЕсли;
	
	Если ТаблицаДвиженийПартии.Количество() > 0 Тогда
		Движения.НДСПартииТоваров.мПериод            = Дата;
		Движения.НДСПартииТоваров.мТаблицаДвижений   = ТаблицаДвиженийПартии;
		Движения.НДСПартииТоваров.ВыполнитьПриход();
		Движения.НДСПартииТоваров.Записать();
	КонецЕсли;
	
	Если ТаблицаДвиженийКосвенных.Количество() > 0 Тогда
		Движения.НДСКосвенныеРасходы.мПериод          = Дата;
		Движения.НДСКосвенныеРасходы.мТаблицаДвижений = ТаблицаДвиженийКосвенных;
		Движения.НДСКосвенныеРасходы.ДобавитьДвижение();
		Движения.НДСКосвенныеРасходы.Записать();
	КонецЕсли;
	
	Если ТаблицаДвиженийПродажи.Количество() > 0 Тогда
		Движения.НДСПродажи.мПериод          = Дата;
		Движения.НДСПродажи.мТаблицаДвижений = ТаблицаДвиженийПродажи;
		Движения.НДСПродажи.ДобавитьДвижение();
		Движения.НДСПродажи.Записать();
	КонецЕсли;
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, 
							  Отказ, Заголовок)
							  
	// По партиям, оприходованным по ордеру с парвом продажи, возможно следует выполнить корректировку списания
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		
		// ПО РЕГИСТРУ СписанныеТовары: формируем запись с указанием приходного ордера, которая будет обрабатываться при списании
		НаборДвижений = Движения.СписанныеТовары;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.ПоступлениеПриходныйОрдер = СкладОрдер;

		// Недостающие поля.
		Инд = 0;
		Для каждого Строка Из ТаблицаДвижений Цикл
			Инд = Инд+1;
			Строка.НомерСтрокиДокумента = Инд;
		КонецЦикла;

		ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.СписанныеТовары.ВыполнитьДвижения();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке)

	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "ВалютаУправленческогоУчета"        , "ВалютаУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");

КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураПолей)


КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиУслугиУпр(СтруктураПолей)

	СтруктураПолей.Вставить("НоменклатурнаяГруппа",           "НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Цена",                           "Цена");

КонецПроцедуры

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок)

	мУчетнаяПолитика   = ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ);
	ТабУчетнаяПолитика = ПолучитьУчетнуюПолитику(Дата);
	
	мПорядокСписанияПартий = Новый Структура("Упр,Бух,Нал");
	
	Если ОтражатьВУправленческомУчете Тогда
		ПодготовитьПараметрыУчетнойПолитикиУпр(ТабУчетнаяПолитика, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура определяет параметры упр. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиУпр(ТабУчетнаяПолитика, Отказ, Заголовок)

	// Получим метод списания партий FIFO / LIFO / По средней
	СтрокаУчетнойПолитики = ТабУчетнаяПолитика[0];
	мПорядокСписанияПартий.Вставить("Упр", СтрокаУчетнойПолитики.СпособОценкиМПЗУпр);

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиУпр()

//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	ПерезаполнятьДокумент = Истина;
	ИнтерактивноеЗаполнение = Ложь;
	Если ТипЗнч(Основание) = Тип("Структура") И Основание.Свойство("ДокументОснование") Тогда
		ПерезаполнятьДокумент = Основание.ПерезаполнятьДокумент;
		ИнтерактивноеЗаполнение = Основание.ИнтерактивноеЗаполнение;
		Основание = Основание.ДокументОснование;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Основание) Тогда
		возврат;
	КонецЕсли;
	
	Если ТипЗнч(Основание) <> Тип("Структура") Тогда
		Если Ссылка = Основание Тогда
			ДокументПоступления = Неопределено;
			ВызватьИсключение "Нельзя вводить документ корректировки на основании самого себя!";
		КонецЕсли;
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеДопРасходов") И Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда
			ДокументПоступления = Неопределено;
			ВызватьИсключение "Нельзя корректировать документ с видом операции ""внутренний расход""";
		КонецЕсли;
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураПолученный") И
			(НЕ ЗначениеЗаполнено(Основание.ДокументОснование) 
			ИЛИ ТипЗнч(Основание.ДокументОснование) <> Тип("ДокументСсылка.АвансовыйОтчет")
			ИЛИ Основание.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс)
		Тогда
			ДокументПоступления = Неопределено;
			ВызватьИсключение "В качестве основания можно выбрать только счет-фактуру по поступлению, введенный на основании документа ""Авансовый отчет""!";
		КонецЕсли;
		
		ДокументСсылка = ПолучитьИсправляемыйДокументПоступления(Основание, Ложь);
		ДокументОснование = ПолучитьПоследнийКорректирующийДокумент(ДокументСсылка);
		
		#Если Клиент Тогда
		Если Основание <> ДокументОснование
			И Основание.Дата < ДокументОснование.Дата
		Тогда
			Если Вопрос("Для указанного документа существуют более поздние корректировки.
				|Использовать последнюю введенную корректировку?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
				ДокументОснование = Основание;
			КонецЕсли;
		Иначе
			Если ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаЗаказаПоставщикуП") тогда
				ДокументОснование =  ДокументСсылка;
			иначе	
				ДокументОснование = Основание;
			КонецЕсли;
		КонецЕсли;
		#КонецЕсли
		
		//ОЛ заремила
		//ПроверитьРеквизиты(ДокументОснование);
		//конец ОЛ заремила
				
	Иначе
		ДокументОснование = Основание;
	КонецЕсли;
	
	#Если Клиент Тогда
	Если ИнтерактивноеЗаполнение = Истина Тогда
		ДокументПоступления = ДокументОснование;
		КорректироватьБУиНУ = ДоступнаКорректировкаБУиНУ();
		Если КорректироватьБУиНУ И ЗначениеЗаполнено(ДокументПоступления) Тогда
			Если Вопрос("Перезаполнить документ по указанному основанию?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				ПерезаполнятьДокумент = Истина;
			Иначе
				ПерезаполнятьДокумент = Ложь;
				КорректироватьБУиНУ = Ложь;
			КонецЕсли;
		Иначе
			ПерезаполнятьДокумент = Ложь;
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли
	
	Если НЕ (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
			ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления")
			ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаЗаказаПоставщикуП")
			ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеДопРасходов"))
	Тогда
		ЗаполнитьСвойстваШапки();
	Иначе
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
			ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления")
		Тогда
			
			// Заполним реквизиты из стандартного набора по документу основанию.
			Организация = ДокументОснование.Организация;
			ДокументПоступления = ДокументОснование;
			КорректироватьБУиНУ = ?(ИнтерактивноеЗаполнение = Истина, КорректироватьБУиНУ, ДоступнаКорректировкаБУиНУ());
			ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
			ЗаполнитьСвойстваШапки();
			Если ПерезаполнятьДокумент = Истина и  ТипЗнч(Основание) <> Тип("ДокументСсылка.КорректировкаЗаказаПоставщикуП") Тогда
				ЗаполнитьПоПоступлению();
			ИначеЕсли ТипЗнч(ДокументОснование) <> Тип("ДокументСсылка.КорректировкаЗаказаПоставщикуП") Тогда
				для каждого стр из Основание.Товары цикл
					нстр = Товары.Добавить();
					ЗаполнитьЗначенияСвойств(нстр,стр);
				КонецЦикла;
				для каждого стр из Основание.Услуги цикл
					нстр = Услуги.Добавить();
					ЗаполнитьЗначенияСвойств(нстр,стр);
				КонецЦикла;

			КонецЕсли;
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
			Организация = ДокументОснование.Организация;
			ДокументПоступления = ДокументОснование;
			КорректироватьБУиНУ = ?(ИнтерактивноеЗаполнение = Истина, КорректироватьБУиНУ, ДоступнаКорректировкаБУиНУ());;
			ЗаполнитьСвойстваШапки();
			Если ПерезаполнятьДокумент = Истина Тогда
				ЗаполнитьПоДопРасходам();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ОбработкаЗаполнения()

//// Процедура вызывается перед записью документа 
////
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	ОчиститьНенужныеТабличныеЧасти();
//	
	ЗаполнитьСвойстваШапки(Ложь);
//	
	ОбработатьСуммыДокорректировки();
//	
//	// Проверка заполнения единицы измерения мест и количества мест
	ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
//	
//	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = ПолучитьСуммуДокументаСНДС(ЭтотОбъект);

	СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
//	
//	// Заполнить склад и ордер в табличных частях
	УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
	СкладИзШапки    =  (УказаниеСкладов <> Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
					 И (УказаниеСкладов <> Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления);

	ЗаполнитьСкладИОрдерВСтрокахТабЧасти(ЭтотОбъект, Товары,         СкладИзШапки);


КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	// Удаление записей регистрации из всех последовательностей
	Для Каждого НаборЗаписейРегистрацииВПоследовательности Из ПринадлежностьПоследовательностям Цикл
		НаборЗаписейРегистрацииВПоследовательности.Очистить();
	КонецЦикла;
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

//мПараметрыСвязиСтрокТЧ = Новый Соответствие;
//мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

мСтруктураПараметровВзаиморасчетов = Новый Структура;
мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Товары, Услуги"));
мСтруктураПараметровВзаиморасчетов.Вставить("Направление", "Поступление");
мСтруктураПараметровВзаиморасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Истина);
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяЗаказаВТабличныхЧастях", "ЗаказПоставщику");

УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();

мУказаниеСкладовВТЧ = (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
					  Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления);

