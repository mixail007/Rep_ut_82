////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 
Перем мПредыдущееОС;

Перем мДеревоГруппРеквизитов;
Перем мФиксироватьКолонки;

Перем мМодифицированаТабличнаяЧасть;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;
Перем мОтражатьВРегламентированномУчете;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ ВИДИМОСТЬЮ КОЛОНОК ТАБ.ЧАСТИ

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	//мДеревоМакетов = ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	//УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	//УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	//Если Не мПодменюПечати = Неопределено Тогда
	//	СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	//КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	//мКнопкиЗаполненияТЧ = ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	//
	//СоответствиеТЧ = Новый Соответствие;
	//СоответствиеТЧ.Вставить(ЭлементыФормы.ОС,ЭлементыФормы.КоманднаяПанельОС.Кнопки.ПодменюЗаполнить);
	//
	//СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура фиксирует колонки ОС
//
Процедура ФиксироватьКолонкиОС()
	
	Если мФиксироватьКолонки Тогда
		
		КолОС       = ЭлементыФормы.ОС.Колонки.ОсновноеСредство;
		КолИнвНомер = ЭлементыФормы.ОС.Колонки.ИнвентарныйНомерРегл;
		КолКодОС    = ЭлементыФормы.ОС.Колонки.ИнвентарныйНомер;
		
		ТекПозиция = 0; // Первая номер колонки
		Если КолКодОС.Видимость Тогда
			ТекПозиция    = ТекПозиция + 1;
			ТекПозКолонки = ЭлементыФормы.ОС.Колонки.Индекс(КолКодОС);
			Если ТекПозКолонки <> ТекПозиция Тогда
				Сдвиг = ТекПозиция - ТекПозКолонки;
				ЭлементыФормы.ОС.Колонки.Сдвинуть(КолКодОС, Сдвиг);
			КонецЕсли;
			КолКодОС.Положение = ПоложениеКолонки.НоваяКолонка;
		КонецЕсли;
		
		Если КолОС.Видимость Тогда
			ТекПозиция    = ТекПозиция + 1;
			ТекПозКолонки = ЭлементыФормы.ОС.Колонки.Индекс(КолОС);
			Если ТекПозКолонки <> ТекПозиция Тогда
				Сдвиг = ТекПозиция - ТекПозКолонки;
				ЭлементыФормы.ОС.Колонки.Сдвинуть(КолОС, Сдвиг);
			КонецЕсли;
			КолОС.Положение = ПоложениеКолонки.НоваяКолонка;
		КонецЕсли;
		
		Если КолИнвНомер.Видимость Тогда
			ТекПозиция    = ТекПозиция + 1;
			ТекПозКолонки = ЭлементыФормы.ОС.Колонки.Индекс(КолИнвНомер);
			Если ТекПозКолонки <> ТекПозиция Тогда
				Сдвиг = ТекПозиция - ТекПозКолонки;
				ЭлементыФормы.ОС.Колонки.Сдвинуть(КолИнвНомер, Сдвиг);
			КонецЕсли;
			КолИнвНомер.Положение = ПоложениеКолонки.НоваяКолонка;
		КонецЕсли;
		
		ЭлементыФормы.ОС.ФиксацияСлева = ТекПозиция + 1;
		
	Иначе
		
		ЭлементыФормы.ОС.ФиксацияСлева = 0;
		
	КонецЕсли;
	
КонецПроцедуры // ФиксироватьКолонкиОС()

// Процедура
//
//		Параметры:
//
//
Процедура УстановитьВидимостьКолонокДереваГрупп( ДеревоГрупп)
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить( "ДеревоГрупп",        ДеревоГрупп);
	СтруктураПараметров.Вставить( "ФиксироватьКолонки", мФиксироватьКолонки);
	
	Форма = ПолучитьФорму("ФормаНастройкиВидимостиКолонок", ЭтаФорма, ЭтотОбъект);
	Форма.НачальноеЗначениеВыбора = СтруктураПараметров;
	Форма.ОткрытьМодально();
	мФиксироватьКолонки = Форма.НачальноеЗначениеВыбора["ФиксироватьКолонки"];
	
КонецПроцедуры // УстановитьВидимостьКолонокДереваГрупп()

// Процедура удаляет из дерева реквизиты, зависящие от типа учета.
//
Процедура УдалитьЛишниеРеквизитыДереваГрупп( ДокОбъект, ДеревоГрупп, Знач УпрРекв, Знач БухРекв, Знач НалРекв, Знач РеквУСН, Знач ИмяТабЧасти, Знач Рекурсия = 0)
	
	Если ДеревоГрупп.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УпрУчет = ?( ЕстьРеквизитДокумента( "ОтражатьВУправленческомУчете", ДокОбъект.Метаданные()), ДокОбъект.ОтражатьВУправленческомУчете, Ложь);
	БухУчет = ?( ЕстьРеквизитДокумента( "ОтражатьВБухгалтерскомУчете",  ДокОбъект.Метаданные()), ДокОбъект.ОтражатьВБухгалтерскомУчете,  Ложь);
	НалУчет = ?( ЕстьРеквизитДокумента( "ОтражатьВНалоговомУчете",      ДокОбъект.Метаданные()), ДокОбъект.ОтражатьВНалоговомУчете,      Ложь);
	УчетУСН = Ложь;
	
	//Если ПрименениеУСН( Организация, КонецГода(Дата) + 1) тогда
	//	УчетУСН = НЕ ПрименениеУСНДоходы( Организация, КонецГода( Дата) + 1) И НалУчет;
	//	НалУчет = Ложь;
	//КонецЕсли;

	Если Рекурсия = 0 Тогда
		
		// Убрать пробелы и символы перевода строки
		УпрРекв = СтрЗаменить(УпрРекв, " ", "");
		УпрРекв = СтрЗаменить(УпрРекв, Символы.ПС,  "");
		УпрРекв = "," + СтрЗаменить(УпрРекв, Символы.Таб, "") + ",";

		БухРекв = СтрЗаменить(БухРекв, " ", "");
		БухРекв = СтрЗаменить(БухРекв, Символы.ПС,  "");
		БухРекв = "," + СтрЗаменить(БухРекв, Символы.Таб, "") + ",";

		НалРекв = СтрЗаменить(НалРекв, " ", "");
		НалРекв = СтрЗаменить(НалРекв, Символы.ПС,  "");
		НалРекв = "," + СтрЗаменить(НалРекв, Символы.Таб, "") + ",";
		
		РеквУСН = СтрЗаменить(РеквУСН, " ", "");
		РеквУСН = СтрЗаменить(РеквУСН, Символы.ПС,  "");
		РеквУСН = "," + СтрЗаменить(РеквУСН, Символы.Таб, "") + ",";
		
		Рекурсия = 1;
	
	КонецЕсли;

	// Исключим из списка проверяемых реквизитов, те которые относятся к конкретному
	// виду учета и этот вид учета выключен

	МассивУдалСтрок = Новый Массив;
	Для Каждого ТекСтрока Из ДеревоГрупп.Строки Цикл
		
		ИмяРекв = ИмяТабЧасти + "." + ТекСтрока.Имя;
		Если ТекСтрока.Строки.Количество() > 0 Тогда
			 // Это группа. Рекурсия
			УдалитьЛишниеРеквизитыДереваГрупп( ДокОбъект, ТекСтрока, УпрРекв, БухРекв, НалРекв, РеквУСН, ИмяТабЧасти, Рекурсия);
			Если ТекСтрока.Строки.Количество() = 0 Тогда // Удалены все элементы группы
				МассивУдалСтрок.Добавить( ТекСтрока);
			КонецЕсли;
		Иначе
			Если (Не УчетУСН И Найти(РеквУСН, "," + ИмяРекв + ",") > 0)
			 ИЛИ (Не УпрУчет И Найти(УпрРекв, "," + ИмяРекв + ",") > 0)
			 ИЛИ (Не БухУчет И Найти(БухРекв, "," + ИмяРекв + ",") > 0)
			 ИЛИ (Не НалУчет И Найти(НалРекв, "," + ИмяРекв + ",") > 0) Тогда
				МассивУдалСтрок.Добавить( ТекСтрока);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для К = 0 По МассивУдалСтрок.ВГраница() Цикл
		ДеревоГрупп.Строки.Удалить( МассивУдалСтрок[К]);
	КонецЦикла;
	
КонецПроцедуры // УдалитьЛишниеРеквизитыДереваГрупп()

// Процедура вызвает форму настройки
//
Процедура НастройкаВидимостиКолонок( ДокОбъект, ТабПоле, ДеревоГрупп, Знач УпрРекв, Знач БухРекв, Знач НалРекв, Знач РеквУСН, Знач ИмяТабЧасти)
	
	// Удалим реквизиты зависящие от типа учета
	Дерево = ДеревоГрупп.Скопировать();
	УдалитьЛишниеРеквизитыДереваГрупп( ДокОбъект, Дерево, УпрРекв, БухРекв, НалРекв, РеквУСН, ИмяТабЧасти);
	
	// Откроем форму настройки.
	ПолучитьТекущиеНастройкиВидимостиКолонок( ТабПоле, Дерево);
	УстановитьВидимостьКолонокДереваГрупп( Дерево);
	УстановитьНовыеНастройкиВидимостиКолонок( ЭтотОбъект, ТабПоле, Дерево, УпрРекв, БухРекв, НалРекв, РеквУСН, ИмяТабЧасти);
	ПолучитьТекущиеНастройкиВидимостиКолонок( ТабПоле, ДеревоГрупп);
	ФиксироватьКолонкиОС();
	
КонецПроцедуры // НастройкаВидимостиКолонок()

// Процедура считывает текущие настройки 
//
Процедура ПолучитьТекущиеНастройкиВидимостиКолонок(ТабПоле, ДеревоГрупп)
	
	Для Каждого КолонкаТЧ Из ТабПоле.Колонки Цикл
		СтрокаДерева = ДеревоГрупп.Строки.Найти( КолонкаТЧ.Имя, "Имя", Истина);
		Если Не СтрокаДерева = Неопределено Тогда
			СтрокаДерева.Видимость = КолонкаТЧ.Видимость;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьТекущиеНастройкиВидимостиКолонок()

// Процедура устанавливает видимость колонок
//
Процедура УстановитьНовыеНастройкиВидимостиКолонок( ДокОбъект, ТабПоле, ДеревоГрупп, Знач УпрРекв, Знач БухРекв, Знач НалРекв, Знач РеквУСН, Знач ИмяТабЧасти)
	
	// Убрать пробелы и символы перевода строки
	УпрРекв = СтрЗаменить(УпрРекв, " ", "");
	УпрРекв = СтрЗаменить(УпрРекв, Символы.ПС,  "");
	УпрРекв = "," + СтрЗаменить(УпрРекв, Символы.Таб, "") + ",";

	БухРекв = СтрЗаменить(БухРекв, " ", "");
	БухРекв = СтрЗаменить(БухРекв, Символы.ПС,  "");
	БухРекв = "," + СтрЗаменить(БухРекв, Символы.Таб, "") + ",";

	НалРекв = СтрЗаменить(НалРекв, " ", "");
	НалРекв = СтрЗаменить(НалРекв, Символы.ПС,  "");
	НалРекв = "," + СтрЗаменить(НалРекв, Символы.Таб, "") + ",";
	
	РеквУСН = СтрЗаменить(РеквУСН, " ", "");
	РеквУСН = СтрЗаменить(РеквУСН, Символы.ПС,  "");
	РеквУСН = "," + СтрЗаменить(РеквУСН, Символы.Таб, "") + ",";
	
	УпрУчет = ?( ЕстьРеквизитДокумента( "ОтражатьВУправленческомУчете", ДокОбъект.Метаданные()), ДокОбъект.ОтражатьВУправленческомУчете, Ложь);
	БухУчет = ?( ЕстьРеквизитДокумента( "ОтражатьВБухгалтерскомУчете",  ДокОбъект.Метаданные()), ДокОбъект.ОтражатьВБухгалтерскомУчете,  Ложь);
	НалУчет = ?( ЕстьРеквизитДокумента( "ОтражатьВНалоговомУчете",      ДокОбъект.Метаданные()), ДокОбъект.ОтражатьВНалоговомУчете,      Ложь);
	
	ФлагУСН = Ложь;
	//Если ПрименениеУСН( Организация, КонецГода( Дата) + 1) тогда
	//	ФлагУСН = НЕ ПрименениеУСНДоходы( Организация, КонецГода(Дата) + 1) И НалУчет;
	//	НалУчет = Ложь;
	//КонецЕсли;
	
	Для Каждого КолонкаТЧ Из ТабПоле.Колонки Цикл
		
		СтрокаДерева = ДеревоГрупп.Строки.Найти( КолонкаТЧ.Имя, "Имя", Истина);
		Если СтрокаДерева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Видимость = СтрокаДерева.Видимость;
		
		ИмяРекв   = "," + ИмяТабЧасти + "." + КолонкаТЧ.Имя + ",";
		Если Не УпрУчет И Найти(УпрРекв, ИмяРекв) > 0 Тогда
			Видимость = Ложь;
		КонецЕсли;
		Если Не БухУчет И Найти(БухРекв, ИмяРекв) > 0 Тогда
			Видимость = Ложь;
		КонецЕсли;
		Если Не НалУчет И Найти(НалРекв, ИмяРекв) > 0 Тогда
			Видимость = Ложь;
		КонецЕсли;
		Если Не ФлагУСН И Найти(РеквУСН, ИмяРекв) > 0 Тогда
			Видимость = Ложь;
		КонецЕсли;
		
		Если Не СтрокаДерева = Неопределено Тогда
			КолонкаТЧ.Видимость = Видимость;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьНовыеНастройкиВидимостиКолонок()

// Процедура формирования дерева групп реквизитов
//
Процедура ЗаполнитьДеревоГруппРеквизитов()
	
	// Создаем логические группы реквизитов
	ГруппаОснУпр   = ДобавитьГруппуВДеревоГруппРеквизитов( мДеревоГруппРеквизитов, "ОсновныеУпр",       "Основные реквизиты (УУ)");
	ГруппаАмортУпр = ДобавитьГруппуВДеревоГруппРеквизитов( мДеревоГруппРеквизитов, "ДляАмортизацииУпр", "Реквизиты для расчета амортизации (УУ)");
	ГруппаДопУпр   = ДобавитьГруппуВДеревоГруппРеквизитов( мДеревоГруппРеквизитов, "ДополнительныеУпр", "Дополнительные реквизиты (УУ)");
	ГруппаОснРегл  = ДобавитьГруппуВДеревоГруппРеквизитов( мДеревоГруппРеквизитов, "ОсновныеРегл",      "Основные реквизиты (регл)");
	ГруппаОснБух   = ДобавитьГруппуВДеревоГруппРеквизитов( мДеревоГруппРеквизитов, "ОсновныеБух",       "Основные реквизиты (БУ)");
	ГруппаОснУСН   = ДобавитьГруппуВДеревоГруппРеквизитов( мДеревоГруппРеквизитов, "ОсновныеУСН",       "Основные реквизиты (УСН)");
	ГруппаАмортБух = ДобавитьГруппуВДеревоГруппРеквизитов( мДеревоГруппРеквизитов, "ДляАмортизацииБух", "Реквизиты для расчета амортизации (БУ)");
	ГруппаДопБух   = ДобавитьГруппуВДеревоГруппРеквизитов( мДеревоГруппРеквизитов, "ДополнительныеБух", "Дополнительные реквизиты (регл)");
	ГруппаОснНал   = ДобавитьГруппуВДеревоГруппРеквизитов( мДеревоГруппРеквизитов, "ОсновныеНал",       "Основные реквизиты (НУ)");
	ГруппаАмортНал = ДобавитьГруппуВДеревоГруппРеквизитов( мДеревоГруппРеквизитов, "ДляАмортизацииНал", "Реквизиты для расчета амортизации (НУ)");
	
	// Добавляем элементы в группы
	МетаТабЧасть = Метаданные().ТабличныеЧасти.ОС.Реквизиты;
	
	// Реквизиты группы Основные
	ДобавитьВДеревоГруппРеквизитов( ГруппаОснУпр, МетаТабЧасть,
		"ДатаПринятияКУчету,
		|СобытиеПринятияКУчету,
		|НомерДокументаПринятияКУчету,
		|НазваниеДокументаПринятияКУчету,
		|ДатаВводаВЭксплуатацию,
		|СобытиеВводВЭксплуатацию,
		|НомерДокументаВводаВЭксплуатацию,
		|НазваниеДокументаВводаВЭксплуатацию,
		|ПервоначальнаяСтоимость,
		|ТекущаяСтоимость,
		|СписатьНаЗатратыПриВводе,
		|НакопленнаяАмортизация,
		|МОЛ,
		|СрокПолезногоИспользования");
		
	ДобавитьВДеревоГруппРеквизитов( ГруппаОснРегл, МетаТабЧасть,
		"ИнвентарныйНомерРегл,
		|ДатаПринятияКУчетуРегл,
		|СобытиеПринятияКУчетуРегл,
		|НомерДокументаПринятияКУчетуРегл,
		|НазваниеДокументаПринятияКУчетуРегл,
		|ДатаВводаВЭксплуатациюРегл,
		|СобытиеВводВЭксплуатациюРегл,
		|НомерДокументаВводаВЭксплуатациюРегл,
		|НазваниеДокументаВводаВЭксплуатациюРегл,
		|СписатьНаЗатратыПриВводеРегл,
		|МОЛРегл");
		
	ДобавитьВДеревоГруппРеквизитов( ГруппаОснБух, МетаТабЧасть,
		"ПервоначальнаяСтоимостьБУ,
		|ТекущаяСтоимостьБУ,
		|СчетУчетаБУ,
		|НакопленнаяАмортизацияБУ,
		|СчетАмортизацииБУ,
		|СпособПоступленияБУ,
		|СрокПолезногоИспользованияБУ");
		
	ДобавитьВДеревоГруппРеквизитов( ГруппаОснНал, МетаТабЧасть,
		"ПорядокВключенияСтоимостиВСоставРасходовНУ,
		|ПервоначальнаяСтоимостьНУ,
		|ТекущаяСтоимостьНУ,
		|СчетУчетаНУ,
		|НакопленнаяАмортизацияНУ,
		|СчетАмортизацииНУ,
		|СтоимостьДо2002НУ,
		|АмортизацияДо2002НУ,
		|СрокПолезногоИспользованияНУ");
		
	ДобавитьВДеревоГруппРеквизитов( ГруппаОснУСН, МетаТабЧасть,
		"ПервоначальнаяСтоимостьУСН,
		|ДатаПриобретенияУСН,
		|СрокПолезногоИспользованияУСН,
		|СуммаНачисленнойАмортизацииУСН,
		|ПорядокВключенияСтоимостиВСоставРасходовУСН");
		
	// Реквизиты группы Дополнительно
	ДобавитьВДеревоГруппРеквизитов( ГруппаДопУпр, МетаТабЧасть,
		"Номенклатура,
		|ХарактеристикаНоменклатуры,
		|РодительскоеОС,
		|ДатаПоследнейМодернизации,
		|СобытиеМодернизации,
		|НомерДокументаМодернизации,
		|НазваниеДокументаМодернизации,
		|СуммаПоследнейМодернизации");
		
	ДобавитьВДеревоГруппРеквизитов( ГруппаДопБух, МетаТабЧасть,
		"ДатаПоследнейМодернизацииРегл,
		|СобытиеМодернизацииРегл,
		|НомерДокументаМодернизацииРегл,
		|НазваниеДокументаМодернизацииРегл,
		|СуммаПоследнейМодернизацииБУ,
		|СуммаПоследнейМодернизацииНУ,
		|ТекущаяСтоимостьПР,
		|НакопленнаяАмортизацияПР");
		
	// Реквизиты группы Амортизация
	ДобавитьВДеревоГруппРеквизитов( ГруппаАмортУпр, МетаТабЧасть,
		"НачислятьАмортизацию,
		|СпособОтраженияРасходовПоАмортизации,
		|СпособНачисленияАмортизации,
		|ПараметрВыработки,
		|ВыработкаКоличество,
		|ОбъемПродукцииРабот,
		|ГрафикАмортизации,
		|СрокИспользованияДляВычисленияАмортизации,
		|СтоимостьДляВычисленияАмортизации,
		|ОбъемПродукцииРаботДляВычисленияАмортизации,
		|КоэффициентАмортизации,
		|КоэффициентУскорения");
		
	ДобавитьВДеревоГруппРеквизитов( ГруппаАмортБух, МетаТабЧасть,
		"НачислятьАмортизациюБУ,
		|СпособОтраженияРасходовПоАмортизацииБУ,
		|СпособНачисленияАмортизацииБУ,
		|ПараметрВыработкиБУ,
		|ВыработкаКоличествоБУ,
		|ОбъемПродукцииРаботБУ,
		|ГрафикАмортизацииБУ,
		|СрокИспользованияДляВычисленияАмортизацииБУ,
		|СтоимостьДляВычисленияАмортизацииБУ,
		|ОбъемПродукцииРаботДляВычисленияАмортизацииБУ,
		|КоэффициентАмортизацииБУ,
		|КоэффициентУскоренияБУ");
		
	ДобавитьВДеревоГруппРеквизитов( ГруппаАмортНал, МетаТабЧасть,
		"НачислятьАмортизациюНУ,
		|СпособОтраженияРасходовПоАмортизацииНУ,
		|СпециальныйКоэффициентНУ,
		|МетодНачисленияАмортизацииНУ,
		|НачислятьПоБазовойСтоимостиНУ,
		|ДатаПереходаКРасчетуПоБазовойСтоимостиНУ,
		|ФактическийСрокИспользованияНУ,
		|СуммаНакопленнойАмортизацииНУ");
		
КонецПроцедуры // ЗаполнитьДеревоГруппРеквизитов()

// Функция
//
Функция ДобавитьГруппуВДеревоГруппРеквизитов( Дерево, Знач ИмяРекв, Знач Представление)
	
	Если Не ТипЗнч(Дерево) = Тип("ДеревоЗначений") Тогда
		Дерево = Новый ДеревоЗначений;
	КонецЕсли;
	Если Дерево.Колонки.Количество() = 0 Тогда
		Дерево.Колонки.Добавить("Имя",           ПолучитьОписаниеТиповСтроки( 100));
		Дерево.Колонки.Добавить("Представление", ПолучитьОписаниеТиповСтроки( 100));
		Дерево.Колонки.Добавить("Видимость",     ПолучитьОписаниеТиповЧисла ( 1,0));
		Дерево.Колонки.Добавить("Доступность",   Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Лист = Дерево.Строки.Добавить();
	Лист.Имя           = ИмяРекв;
	Лист.Представление = Представление;
	Лист.Видимость     = Истина;
	Лист.Доступность   = Истина;
	
	Возврат Лист;
	
КонецФункции // ДобавитьГруппуВДеревоГруппРеквизитов()

// Процедура
//
Процедура ДобавитьВДеревоГруппРеквизитов( Группа, Знач МетаТабЧасть, Знач Реквизиты)
	
	СтруктРеквизитов = Новый Структура(Реквизиты);
	Для Каждого Рекв Из СтруктРеквизитов Цикл
		
		МетаРекв = МетаТабЧасть[Рекв.Ключ];
		Лист = Группа.Строки.Добавить();
		Лист.Имя           = Рекв.Ключ;
		Лист.Представление = МетаРекв.Представление();
		Лист.Видимость     = Истина;
		Лист.Доступность   = Истина;
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьВДеревоГруппРеквизитов()

// Процедура
//
Процедура ВоостановлениеНастройкиГруппРеквизитовОбход( ДеревоГрупп, Дерево)
	
	Для Каждого ТекСтрока Из Дерево.Строки Цикл
		СтрокаДерева = ДеревоГрупп.Строки.Найти( ТекСтрока.Имя, "Имя", Истина);
		Если Не СтрокаДерева = Неопределено Тогда
			СтрокаДерева.Видимость = ТекСтрока.Видимость;
			Если ТекСтрока.Строки.Количество() > 0 Тогда
				ВоостановлениеНастройкиГруппРеквизитовОбход( ДеревоГрупп, ТекСтрока);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ВоостановлениеНастройкиГруппРеквизитовОбход()

// Процедура
//
Процедура ВосстановитьНастройкиГруппРеквизитов( ДеревоГрупп, ИмяНастройки)
	
	Дерево = ВосстановитьЗначение( ИмяНастройки);
	Если Дерево = Неопределено ИЛИ Не ТипЗнч(Дерево) = Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ВоостановлениеНастройкиГруппРеквизитовОбход( ДеревоГрупп, Дерево);
	
КонецПроцедуры // ВосстановитьНастройкиГруппРеквизитов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	ВидимостьРеквизитовПоТипуУчета (ЭтотОбъект,
									ЭтаФорма,
									мСтрокаРеквизитыУпрУчета,
									?(НЕ ОтражатьВБухгалтерскомУчете И ОтражатьВНалоговомУчете, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыРеглУчета + мСтрокаРеквизитыБухУчета),
									?(НЕ ОтражатьВБухгалтерскомУчете И ОтражатьВНалоговомУчете, мСтрокаРеквизитыРеглУчета + мСтрокаРеквизитыНалУчета, мСтрокаРеквизитыНалУчета));
									
	ФлагУСН = Ложь;
	//Если ПрименениеУСН( Организация, КонецГода( Дата) + 1) тогда
	//	ФлагУСН = НЕ ПрименениеУСНДоходы( Организация, КонецГода(Дата) + 1) И ОтражатьВНалоговомУчете;
	//КонецЕсли;
	
	РеквизитыБУ = ?(НЕ ОтражатьВБухгалтерскомУчете И ОтражатьВНалоговомУчете, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыРеглУчета + мСтрокаРеквизитыБухУчета);
	РеквизитыНУ = ?(НЕ ОтражатьВБухгалтерскомУчете И ОтражатьВНалоговомУчете И Не ФлагУСН , мСтрокаРеквизитыРеглУчета + мСтрокаРеквизитыНалУчета, мСтрокаРеквизитыНалУчета);
	РеквизитыУСН = ?(НЕ ОтражатьВБухгалтерскомУчете И ОтражатьВНалоговомУчете И Не ФлагУСН ,мСтрокаРеквизитыРеглУчета + мСтрокаРеквизитыУСН,мСтрокаРеквизитыУСН);
	
	УстановитьНовыеНастройкиВидимостиКолонок (ЭтотОбъект, ЭлементыФормы.ОС, мДеревоГруппРеквизитов, мСтрокаРеквизитыУпрУчета, 
											 РеквизитыБУ,
											 РеквизитыНУ,
											 РеквизитыУСН, "ОС");
	
	ЗаполнитьТабИтогов();
	ФиксироватьКолонкиОС();
	
КонецПроцедуры //УстановитьВидимость()

// Функция
//
Функция ДобавитьСтрокуВТабИтогов(ИмяПараметра)
	
	Если ЭлементыФормы.ОС.Колонки[ИмяПараметра].Видимость Тогда
		НоваяСтрока = ТабИтогов.Добавить();
		НоваяСтрока.Имя           = ИмяПараметра;
		НоваяСтрока.Представление = Метаданные().ТабличныеЧасти.ОС.Реквизиты[ИмяПараметра].Представление();
	КонецЕсли;
	
КонецФункции // ДобавитьСтрокуВТабИтогов()

// Процедура заполняет таблицу итогов
//
Процедура ЗаполнитьТабИтогов()
	
	ТабИтогов.Очистить();
	
	ДобавитьСтрокуВТабИтогов("ПервоначальнаяСтоимость");
	ДобавитьСтрокуВТабИтогов("ТекущаяСтоимость");
	ДобавитьСтрокуВТабИтогов("СтоимостьДляВычисленияАмортизации");
	ДобавитьСтрокуВТабИтогов("НакопленнаяАмортизация");
	
	ДобавитьСтрокуВТабИтогов("ПервоначальнаяСтоимостьБУ");
	ДобавитьСтрокуВТабИтогов("ТекущаяСтоимостьБУ");
	ДобавитьСтрокуВТабИтогов("СтоимостьДляВычисленияАмортизацииБУ");
	ДобавитьСтрокуВТабИтогов("НакопленнаяАмортизацияБУ");
	
	ДобавитьСтрокуВТабИтогов("ПервоначальнаяСтоимостьНУ");
	ДобавитьСтрокуВТабИтогов("ТекущаяСтоимостьНУ");
	ДобавитьСтрокуВТабИтогов("СуммаНакопленнойАмортизацииНУ");
	
КонецПроцедуры // ЗаполнитьТабИтогов()

Процедура ПересчитатьТаблицуИтогов()
	
	Для каждого Строка из ТабИтогов Цикл
		Строка.Итог = ОС.Итог(Строка.Имя);
	КонецЦикла;
	мМодифицированаТабличнаяЧасть = Ложь;
	
КонецПроцедуры

// Функция возвращает список значений доступных способов амортизации для бух. учета
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   СписокЗначений
Функция ПолучитьСписокСпособовАмортизацииБУ() Экспорт

	СписокПеречисления = Новый СписокЗначений;
	
	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.Линейный);
	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции);
	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка);
	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования);
	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ);
	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега);
	
	Возврат СписокПеречисления;

КонецФункции // ПолучитьСписокСпособовАмортизацииБУ()

// Процедура устанавливает тип графика амортизации.
//
Процедура ПривестиТипГрафикаАмортизации()
	
	ТекСтрока = ЭлементыФормы.ОС.ТекущаяСтрока;
	//Если ТекСтрока.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоИндивидуальномуГрафику Тогда
	//	ТипГрафика = Новый ОписаниеТипов("СправочникСсылка.ИндивидуальныеГрафикиАмортизации");
	//Иначе
	//	ТипГрафика = Новый ОписаниеТипов("СправочникСсылка.ГодовыеГрафикиАмортизацииОС");
	//КонецЕсли;
	//ТекСтрока.ГрафикАмортизации = ТипГрафика.ПривестиЗначение( ТекСтрока.ГрафикАмортизации);
	
КонецПроцедуры // ПривестиТипГрафикаАмортизации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры

// Процедура вызывается при нажании кнопки Подбор командной панели "КоманднаяПанельОС"
//
Процедура КоманднаяПанельОСПодбор(Кнопка)
	
	ФормаПодбора =  Справочники.ОсновныеСредства.ПолучитьФорму("ФормаПодбора",ЭтаФорма);
	ФормаПодбора.РежимВыбора = Истина;
	ФормаПодбора.ЗакрыватьПриВыборе  = Ложь;
	ФормаПодбора.Открыть();
	
КонецПроцедуры

// Процедура вызывается при нажании кнопки ВидимостьКолонок командной панели "КоманднаяПанельОС"
//
Процедура КоманднаяПанельОСВидимостьКолонок(Кнопка)
	
	НастройкаВидимостиКолонок(
		ЭтотОбъект,
		ЭлементыФормы.ОС,
		мДеревоГруппРеквизитов,
		мСтрокаРеквизитыУпрУчета,
		мСтрокаРеквизитыБухУчета,
		мСтрокаРеквизитыНалУчета,
		мСтрокаРеквизитыУСН,
		"ОС");
		
	ЗаполнитьТабИтогов();
	
КонецПроцедуры // КоманднаяПанельОСВидимостьКолонок()

// Процедура вызывается при нажатии кнопки Заполнить командной панели "КоманднаяПанельОС"
// Заполняет документ основными средствами по группе ОС.
//
Процедура КоманднаяПанельОСЗаполнить(Кнопка)
	
	Если ОС.Количество() > 0 Тогда
		Ответ = Вопрос("Табличная часть уже содержит строки.
			|Удалить?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Группа = Перечисления.ГруппыОС.ПустаяСсылка();
	Если Не ВвестиЗначение( Группа, "Выберите группу ОС...") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ОсновныеСредства.Ссылка КАК ОсновноеСредство,
		|	ОсновныеСредства.ПодлежитАмортизации
		|ИЗ
		|	Справочник.ОсновныеСредства КАК ОсновныеСредства
		|
		|ГДЕ
		|	ОсновныеСредства.ГруппаОС = &Группа
		|	И НЕ ОсновныеСредства.ПометкаУдаления";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр( "Группа", Группа);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Сообщить("Нет данных для заполнения!", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОС.Очистить();
	КонецЕсли;
	
	Обход = РезультатЗапроса.Выбрать();
	
	ТабОС = Новый ТаблицаЗначений();
	ТабОС.Колонки.Добавить( "ОсновноеСредство", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	Для Каждого СтрокаТЧ Из ОС Цикл
		НоваяСтрока = ТабОС.Добавить();
		НоваяСтрока.ОсновноеСредство = СтрокаТЧ.ОсновноеСредство;
	КонецЦикла;
	
	Пока Обход.Следующий() Цикл
		Если Не ПроверкаДублированияОС( ТабОС, Обход.ОсновноеСредство) Тогда
			НоваяСтрока = ОС.Добавить();
			НоваяСтрока.ОсновноеСредство = Обход.ОсновноеСредство;
			ПриИзмененииОС( НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельОСЗаполнить()

// Процедура вызывается при выборе пункта подменю "По наименованию" из меню "Заполнить"
// командной панели формы. Процедура добавляет в табличную часть основные средства,
// наименование которых совпадает с наименованием текущего выбранного в табличной части ОС
//
Процедура КоманднаяПанельОСЗаполнитьПоНаименованию(Кнопка)
	
	Если ЭлементыФормы.ОС.ТекущаяСтрока = Неопределено Тогда
		СообщитьОбОшибке("Данные для заполнения отсутствуют.",,, СтатусСообщения.Обычное);
		Возврат;
	КонецЕсли;
	
	ОсновноеСредство = ЭлементыФормы.ОС.ТекущиеДанные.ОсновноеСредство;
	
	Если ОсновноеСредство = Неопределено Тогда
		СообщитьОбОшибке("Данные для заполнения отсутствуют.",,, СтатусСообщения.Обычное);
		Возврат;
	КонецЕсли;
	
	ОсновноеСредствоНаименование = Строка(ОсновноеСредство);
	
	СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("СписокОС",     СписокОС);
	Запрос.УстановитьПараметр("Наименование", ОсновноеСредствоНаименование);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК ОсновноеСредство,
	|	ОсновныеСредства.Код КАК ОсновноеСредствоКод
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.Наименование = &Наименование
	|	И ОсновныеСредства.Ссылка НЕ В (&СписокОС)
	|	И ОсновныеСредства.ПометкаУдаления = ЛОЖЬ
	|	И ОсновныеСредства.ЭтоГруппа = ЛОЖЬ";
	
	ВыборкаОС = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаОС.Количество() = 0 Тогда
		СообщитьОбОшибке("Другие элементы справочника с наименованием <" + ОсновноеСредствоНаименование + "> в справочнике ""Основные средства"" отсутствуют.",,, СтатусСообщения.Обычное);
		Возврат;
	КонецЕсли;
	
	Пока ВыборкаОС.Следующий() Цикл
		НоваяСтрока = ОС.Добавить();
		НоваяСтрока.ОсновноеСредство     = ВыборкаОС.ОсновноеСредство;
		НоваяСтрока.ИнвентарныйНомерРегл = ВыборкаОС.ОсновноеСредствоКод;
	КонецЦикла; 
	
КонецПроцедуры // КоманднаяПанельОСЗаполнитьПоНаименованию()

// Функция определяет есть ли данное ОС в таблице.
//
Функция ПроверкаДублированияОС( ТабОС, ОбъектОС)
	
	СтруктПоиска = Новый Структура( "ОсновноеСредство", ОбъектОС);
	Найдено = ТабОС.НайтиСтроки( СтруктПоиска);
	Возврат Не Найдено.Количество() = 0;
	
КонецФункции // ПроверкаДублированияОС()

// Процедура выполняет действия связанные с изменением ОС.
//
Процедура ПриИзмененииОС( СтрокаОС)
	
	Если ЗначениеНеЗаполнено( СтрокаОС.ИнвентарныйНомерРегл) Тогда
		СтрокаОС.ИнвентарныйНомерРегл   = СтрокаОС.ОсновноеСредство.Код;
		СтрокаОС.НачислятьАмортизацию   = СтрокаОС.ОсновноеСредство.ПодлежитАмортизации;
		СтрокаОС.НачислятьАмортизациюБУ = СтрокаОС.НачислятьАмортизацию;
		СтрокаОС.НачислятьАмортизациюНУ = СтрокаОС.НачислятьАмортизацию;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииОС()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		Если ПараметрОбъектКопирования = Неопределено И ПараметрОснование = Неопределено Тогда
			ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь);
		КонецЕсли;

		УстановитьНомерДокумента(ЭтотОбъект);

	КонецЕсли;
    УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	// Установим видимость и доступность реквизитов
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	ЗаполнитьДеревоГруппРеквизитов();
	ВосстановитьНастройкиГруппРеквизитов( мДеревоГруппРеквизитов, "ДокВводНачальныхОстатковОС_ВидимостьКолонокТЧ_ОС");
	мФиксироватьКолонки = ВосстановитьЗначение("ДокВводНачальныхОстатковОС_ФиксироватьКолонкиТЧ_ОС");
	Если мФиксироватьКолонки = Неопределено Тогда
		мФиксироватьКолонки = Ложь;
	КонецЕсли;
	УстановитьВидимость();
	
	
	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента( "", ЭтотОбъект, ЭтаФорма);
	
	// Установить колонки, видимостью которых пользователь управлять не может.
	УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ОС.Колонки,
		Новый Структура("НомерСтроки, ОсновноеСредство, ИнвентарныйНомер, ИнвентарныйНомерРегл" ));
	
	ЗаполнитьТабИтогов();
	ПересчитатьТаблицуИтогов();

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	мТекущаяДатаДокумента = Дата;
	
	
КонецПроцедуры // ПриОткрытии()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	Если НЕ ЗначениеНеЗаполнено(ЗначениеВыбора) Тогда
		Если ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
			СтрокаТабличнойЧасти = ОС.Найти(ЗначениеВыбора,"ОсновноеСредство");
			Если СтрокаТабличнойЧасти <> Неопределено Тогда
				Предупреждение("Это основное средство уже подобрано!",60);
			Иначе
				НоваяСтрока = ОС.Добавить();
				НоваяСтрока.ОсновноеСредство       = ЗначениеВыбора;
				ПриИзмененииОС( НоваяСтрока);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы
//
Процедура ПриЗакрытии()
	
	СохранитьЗначение( "ДокВводНачальныхОстатковОС_ВидимостьКолонокТЧ_ОС",   мДеревоГруппРеквизитов);
	СохранитьЗначение( "ДокВводНачальныхОстатковОС_ФиксироватьКолонкиТЧ_ОС", мФиксироватьКолонки);
	
КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	УстановитьВидимость();

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьНомерДокумента(ЭтотОбъект);
	ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);
	УстановитьВидимость();
	
	//ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
	//											  ПодразделениеОрганизации,
	//											  Подразделение,
	//											  Организация);


КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в управленческом учете
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
	
	Если Не ОтражатьВБухгалтерскомУчете И Не ОтражатьВНалоговомУчете Тогда
		
		УстановитьНомерДокумента(ЭтотОбъект);
		
	КонецЕсли;
	
	УстановитьВидимость();
	
	//ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
	//											  ПодразделениеОрганизации,
	//											  Подразделение,
	//											  Организация);

	
КонецПроцедуры

// Процедура - обработчик события "При изменении" поля ввода Подразделение
// 
Процедура ПодразделениеПриИзменении(Элемент)
	
	//ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
	//											  ПодразделениеОрганизации,
	//											  Подразделение,
	//											  Организация);

												  
												  
КонецПроцедуры
											  
// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделенияОрганизации
//
Процедура ПодразделениеОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	//ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
	//										 Элемент,
	//										 ПодразделениеОрганизации,
	//										 Подразделение,
	//										 Организация,
	//										 ЭтаФорма);
КонецПроцедуры



// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)
	
	Если Не ОтражатьВБухгалтерскомУчете И Не ОтражатьВНалоговомУчете Тогда
		УстановитьНомерДокумента(ЭтотОбъект);
	КонецЕсли;

	УстановитьВидимость();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ


// Процедура - обработчик события "ПриВыводеСтроки" табличного поля ОС
//
Процедура ОСПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ОформлениеСтроки.Ячейки.ИнвентарныйНомер.Видимость Тогда
		ОформлениеСтроки.Ячейки.ИнвентарныйНомер.УстановитьТекст( ДанныеСтроки.ОсновноеСредство.Код);
	КонецЕсли;
	
КонецПроцедуры // ОСПриВыводеСтроки()

// Процедура - обработчик события "НачалоВыбора" таблицы ОС поля ОССобытиеПринятияКУчету
//
Процедура ОССобытиеПринятияКУчетуНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СписокСобытий = Новый СписокЗначений;
	СписокСобытий.Добавить(Перечисления.ВидыСобытийОС.ПринятиеКУчету);
	НачалоВыбораЗначенияСобытияОС(Элемент, СписокСобытий, СтандартнаяОбработка);
	
КонецПроцедуры // ОССобытиеПринятияКУчетуНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" таблицы ОС поля ОССостояниеПринятияКУчетуРегл
//
Процедура ОССобытиеПринятияКУчетуРеглНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ОССобытиеПринятияКУчетуНачалоВыбора(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ОССостояниеПринятияКУчетуРеглНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" таблицы ОС поля ОССостояниеВводаВЭксплуатацию
//
Процедура ОССобытиеВводаВЭксплуатациюНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СписокСобытий = Новый СписокЗначений;
	СписокСобытий.Добавить(Перечисления.ВидыСобытийОС.ВводВЭксплуатацию);
	НачалоВыбораЗначенияСобытияОС(Элемент, СписокСобытий, СтандартнаяОбработка);
	
КонецПроцедуры // ОССостояниеВводаВЭксплуатациюНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" таблицы ОС поля ОССостояниеВводаВЭксплуатациюРегл
//
Процедура ОССобытиеВводаВЭксплуатациюРеглНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ОССобытиеВводаВЭксплуатациюНачалоВыбора(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ОССостояниеВводаВЭксплуатациюРеглНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" таблицы ОС поля ОССобытиеМодернизации
//
Процедура ОССобытиеМодернизацииНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СписокСобытий = Новый СписокЗначений;
	СписокСобытий.Добавить(Перечисления.ВидыСобытийОС.Модернизация);
	НачалоВыбораЗначенияСобытияОС(Элемент, СписокСобытий, СтандартнаяОбработка);
	
КонецПроцедуры // ОССостояниеМодернизацииНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" таблицы ОС поля ОССостояниеМодернизацииРегл
//
Процедура ОССобытиеМодернизацииРеглНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ОССобытиеМодернизацииНачалоВыбора(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ОССостояниеМодернизацииРеглНачалоВыбора()

// Процедура - обработчик события "НачалоВыбораИзСписка" таблицы ОС поля СпособНачисленияАмортизацииБУ
//
Процедура ОССпособНачисленияАмортизацииБУНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	УстановитьСписокПоляВыбора(Элемент, ПолучитьСписокСпособовАмортизацииБУ());
	
КонецПроцедуры // ОССпособНачисленияАмортизацииБУНачалоВыбора()

// Процедура - обработчик события "ПередНачаломИзменения" таб. поля ОС
//
Процедура ОСПередНачаломИзменения(Элемент, Отказ)
	
	ПривестиТипГрафикаАмортизации();
	
КонецПроцедуры // ОСПередНачаломИзменения()

// Процедура - обработчик события "ПриИзменении" поля СпособНачисленияАмортизации таб. поля ОС
//
Процедура ОССпособНачисленияАмортизацииПриИзменении(Элемент)
	
	ПривестиТипГрафикаАмортизации();
	
КонецПроцедуры // ОССпособНачисленияАмортизацииПриИзменении()

// Процедура - обработчик события "НачалеРедактирования" таб. поля ОС
//
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	ПривестиТипГрафикаАмортизации();
	мПредыдущееОС = ЭлементыФормы.ОС.ТекущиеДанные.ОсновноеСредство;
	Если НоваяСтрока Тогда
		ЭлементыФормы.ОС.ТекущиеДанные.СпециальныйКоэффициентНУ = 1;
	КонецЕсли;
	
КонецПроцедуры // ОСПриНачалеРедактирования()

// Процедура - обработчик события "ПриИзменении" таб. поля ОС
//
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	
	ПриИзмененииОС(ЭлементыФормы.ОС.ТекущиеДанные);
	
	Для Каждого СтрокаОС Из ОС Цикл
		Если Не СтрокаОС.НомерСтроки      = ЭлементыФормы.ОС.ТекущиеДанные.НомерСтроки
		      И СтрокаОС.ОсновноеСредство = ЭлементыФормы.ОС.ТекущиеДанные.ОсновноеСредство Тогда
			ЭлементыФормы.ОС.ТекущиеДанные.ОсновноеСредство = мПредыдущееОС;
			Сообщить("Это основное средство уже выбрано в строке №" + СтрокаОС.НомерСтроки + "!", СтатусСообщения.Внимание);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОСОсновноеСредствоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода физического лица
//
// Параметры:
//  Элемент - элемент формы, который отображает физическое лицо
//
Процедура ОСМОЛНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// переопеределим выбор физлица на выбор из списка регистра сведений
	//ОткрытьФормуВыбораРаботника( Элемент, СтандартнаяОбработка, Ссылка, Подразделение);
	
КонецПроцедуры // ОСМОЛНачалоВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода физического лица
//
// Параметры:
//  Элемент - элемент формы, который отображает физическое лицо
//
Процедура ОСМОЛОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")Тогда
		СтандартнаяОбработка = Ложь;
		Элемент.Значение = ВыбранноеЗначение.Физлицо;
	КонецЕсли;

КонецПроцедуры // ОСМОЛОбработкаВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОСМОЛАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)

	//ТекстАвтоПодбора     = ПодобратьФИОРаботникаКандидата("Работники", Текст);
	//СтандартнаяОбработка = Ложь;

КонецПроцедуры // ОСМОЛАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОСМОЛОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)

	//Значение             = ПодобратьСписокРаботниковКандидатов("Работники", Текст, Элемент.Значение);
	//СтандартнаяОбработка = (Значение = Неопределено);

КонецПроцедуры // ОСМОЛОкончаниеВводаТекста()

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОСМОЛБУНачалоВыбора(Элемент, СтандартнаяОбработка)

	//ОткрытьФормуВыбораРаботникаОрганизации(Элемент, СтандартнаяОбработка, Ссылка, Организация, ПодразделениеОрганизации);

КонецПроцедуры // ОСМОЛБУНачалоВыбора)

// Процедура - обработчик события "ОбработкаВыбора" поля ввода физического лица -  
//
// Параметры:
//  Элемент - элемент формы, который отображает физическое лицо
//
Процедура ОСМОЛБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")Тогда
		СтандартнаяОбработка = Ложь;
		Элемент.Значение = ВыбранноеЗначение.Физлицо;
	КонецЕсли;

КонецПроцедуры // ОСМОЛБУНачалоВыбора()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОСМОЛБУОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)

	//Значение = ПодобратьСписокРаботниковКандидатов("РаботникиОрганизации", Текст, Элемент.Значение, Организация);
	//СтандартнаяОбработка = (Значение = Неопределено);

КонецПроцедуры // ОСМОЛБУОкончаниеВводаТекста()

// Процедура вызывается при изменнии параметра выработки
//
Процедура ПриИзмененииПараметраВыработки(Элемент, Откуда)

	Если Не (ОтражатьВБухгалтерскомУчете И ОтражатьВУправленческомУчете) Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока = ЭлементыФормы.ОС.ТекущиеДанные;
	Если ТекСтрока.ПараметрВыработки = ТекСтрока.ПараметрВыработкиБУ Тогда
		Если Откуда = "ПараметрВыработки" Тогда
			ТекСтрока.ВыработкаКоличество = ТекСтрока.ВыработкаКоличествоБУ;
		ИначеЕсли Откуда = "ПараметрВыработкиБУ" Тогда
			ТекСтрока.ВыработкаКоличествоБУ = ТекСтрока.ВыработкаКоличество;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // 	ПриИзмененииПараметраВыработки()

// Процедура - обработчик события "ПриИзменении" поля ввода ОСПараметрВыработки
//
Процедура ОСПараметрВыработкиПриИзменении(Элемент)
	
	ПриИзмененииПараметраВыработки( Элемент, "ПараметрВыработки");
	
КонецПроцедуры // ОСПараметрВыработкиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ОСПараметрВыработки
//
Процедура ОСПараметрВыработкиБУПриИзменении(Элемент)
	
	ПриИзмененииПараметраВыработки( Элемент, "ПараметрВыработкиБУ");
	
КонецПроцедуры // ОСПараметрВыработкиБУПриИзменении()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ОССчетУчетаБУ
//
Процедура ОССчетУчетаБУПриИзменении(Элемент)

	//ТекДанные = ЭлементыФормы.ОС.ТекущиеДанные;
	//Если ЗначениеНеЗаполнено(Элемент.Значение) Тогда
	//	ТекДанные.СчетУчетаНУ = 0;
	//Иначе
	//	ТекДанные.СчетУчетаНУ = ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Элемент.Значение));
	//КонецЕсли;
	
КонецПроцедуры // ОССчетУчетаБУПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ОССчетАмортизацииБУ
//
Процедура ОССчетАмортизацииБУПриИзменении(Элемент)

	ТекДанные = ЭлементыФормы.ОС.ТекущиеДанные;
	//Если ЗначениеНеЗаполнено(Элемент.Значение) Тогда
	//	ТекДанные.СчетАмортизацииНУ = 0;
	//Иначе
	//	ТекДанные.СчетАмортизацииНУ = ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Элемент.Значение));
	//КонецЕсли;
	
КонецПроцедуры // ОССчетАмортизацииБУПриИзменении()

// Процедура - обработчик события "ПриСменеСтраницы" ПанелиОС
//
Процедура ПанельОСПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = 1 и мМодифицированаТабличнаяЧасть тогда
		ПересчитатьТаблицуИтогов();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОСПослеУдаления(Элемент)
	
	мМодифицированаТабличнаяЧасть = Истина;
	
КонецПроцедуры

Процедура ОСПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	мМодифицированаТабличнаяЧасть = Истина;
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	//ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	мФормаДокумента = ЭтаФорма;
	//ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	//ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	//Если НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
	//	
	//	УстановитьКнопкиПечати();
	//	
	//КонецЕсли; 
	
	
КонецПроцедуры

// Процедура открывате журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	//ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывате журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	//ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры

Процедура ОССчетУчетаБУНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элемент.СписокВыбора.Добавить("01.01");
КонецПроцедуры

Процедура ОССчетАмортизацииБУНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элемент.СписокВыбора.Добавить("02.01");
КонецПроцедуры

Процедура ОССчетУчетаНУНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элемент.СписокВыбора.Добавить("01.01");
КонецПроцедуры

Процедура ОССчетАмортизацииНУНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элемент.СписокВыбора.Добавить("02.01");
КонецПроцедуры
