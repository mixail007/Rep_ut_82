Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыРеглУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыБухУчета  Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета  Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета  Экспорт; // (Регл)
Перем мСтрокаРеквизитыУСН       Экспорт; // (Регл)

Перем мУчетнаяПолитика;                 // (Общ)

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мФлагФормированияДвиженийПоВыработке;
Перем мФормаДокумента Экспорт;


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

Функция ПечатьОпись()
			
	ТабДок  = Новый ТабличныйДокумент;
	Макет   = ПолучитьМакет("ТабЧасть");
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.Заголовок = Метаданные().Представление() + " № " + Номер + " от " + Формат( Дата, "ДФ=dd.MM.yyyy");
	ТабДок.Вывести( Область);
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		Область = Макет.ПолучитьОбласть("ШапкаБух");
		Область.Параметры.Организация              = Организация;
		Область.Параметры.ПодразделениеОрганизации = ПодразделениеОрганизации;
		ТабДок.Вывести( Область);
	КонецЕсли;
	Если ОтражатьВУправленческомУчете Тогда
		Область = Макет.ПолучитьОбласть("ШапкаУпр");
		Область.Параметры.Подразделение = Подразделение;
		ТабДок.Вывести( Область);
	КонецЕсли;
	
	// Создадим структуру печатаемых реквизитов
	МетаТЧ     = Метаданные().ТабличныеЧасти.ОС.Реквизиты;
	СтруктРекв = Новый Структура;
	СтруктРекв.Вставить("ОсновноеСредство", МетаТЧ.ОсновноеСредство);
	Для Каждого Колонка Из мФормаДокумента.ЭлементыФормы.ОС.Колонки Цикл
		Если Не (Колонка.Имя = "НомерСтроки" ИЛИ Колонка.Имя = "ИнвентарныйНомер")
			   И Колонка.Видимость Тогда
			СтруктРекв.Вставить( Колонка.Имя, МетаТЧ[Колонка.Имя]);
		КонецЕсли;
	КонецЦикла;
	
	// Вывод заголовка таб части
	Область = Макет.ПолучитьОбласть( "ТабШапка|Начало");
	ТабДок.Вывести( Область);
	Область = Макет.ПолучитьОбласть( "ТабШапка|Колонка");
	Для Каждого Колонка Из СтруктРекв Цикл
		Если Не Колонка.Ключ = "ОсновноеСредство" Тогда
			Область.Параметры.КолЗаголовок = Колонка.Значение;
			ТабДок.Присоединить(Область);
		КонецЕсли;
	КонецЦикла;
	
	// Вывод данных
	Для Каждого СтрокаТЧ Из ОС Цикл
		Область = Макет.ПолучитьОбласть( "ТабСтрока|Начало");
		Область.Параметры.НомерСтроки = СтрокаТЧ.НомерСтроки;
		Область.Параметры.ОС          = СтрокаТЧ.ОсновноеСредство;
		ТабДок.Вывести( Область);
		
		Область = Макет.ПолучитьОбласть( "ТабСтрока|Колонка");
		Для Каждого Колонка Из СтруктРекв Цикл
			Если Не Колонка.Ключ = "ОсновноеСредство" Тогда
				Если ТипЗнч(СтрокаТЧ[Колонка.Ключ]) = Тип("Булево") Тогда
					Область.Параметры.КолДанные = Формат( СтрокаТЧ[Колонка.Ключ], "БЛ=Нет; БИ=Да");
				ИначеЕсли ТипЗнч(СтрокаТЧ[Колонка.Ключ]) = Тип("Дата") Тогда
					Область.Параметры.КолДанные = Формат( СтрокаТЧ[Колонка.Ключ], "ДЛФ=DD");
				Иначе
					Область.Параметры.КолДанные = СтрокаТЧ[Колонка.Ключ];
				КонецЕсли;
				ТабДок.Присоединить(Область);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// Вывод итогов
	Область = Макет.ПолучитьОбласть( "ТабИтог|Начало");
	ТабДок.Вывести( Область);
	
	Область = Макет.ПолучитьОбласть( "ТабИтог|Колонка");
	Для Каждого Колонка Из СтруктРекв Цикл
		Если Колонка.Ключ = "ОсновноеСредство" Тогда
			Продолжить;
		КонецЕсли;
		Если Колонка.Значение.Тип.Типы()[0] = Тип("Число") 
		   И (Найти(Колонка.Ключ,"Стоимость")> 0 
		   Или Найти(Колонка.Ключ,"Амортизация")> 0) Тогда
			Область.Параметры.КолИтог = Формат( ОС.Итог( Колонка.Ключ), "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧРГ=; ЧГ=3,0");
		Иначе
			Область.Параметры.КолИтог = "";
		КонецЕсли;
		ТабДок.Присоединить(Область);
	КонецЦикла;
	
	Возврат ТабДок;
		
КонецФункции
	
// Процедура печати табличной части документа
//
//Процедура Печать(КнопкаТекст) Экспорт
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "Опись" Тогда
		Если мФормаДокумента = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ТабДокумент = ПечатьОпись();
	//	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ("Данные табличной части документа " + ЭтотОбъект), Ссылка);
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

	//	ТабДокумент = НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
		//НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);
		
	КонецЕсли;
	
	
		
КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Опись","Опись ОС при вводе остатков");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для управленческого учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()
	
	мСтрокаРеквизитыУпрУчета = "Подразделение, НадписьПодразделение,
		|ОС.ВыработкаКоличество,
		|ОС.ГрафикАмортизации,
		|ОС.ДатаВводаВЭксплуатацию,
		|ОС.ДатаПоследнейМодернизации,
		|ОС.ДатаПринятияКУчету,
		|ОС.КоэффициентАмортизации,
		|ОС.КоэффициентУскорения,
		|ОС.МОЛ,
		|ОС.НазваниеДокументаВводаВЭксплуатацию,
		|ОС.НазваниеДокументаМодернизации,
		|ОС.НазваниеДокументаПринятияКУчету,
		|ОС.НакопленнаяАмортизация,
		|ОС.НачислятьАмортизацию,
		|ОС.Номенклатура,
		|ОС.ХарактеристикаНоменклатуры,
		|ОС.НомерДокументаВводаВЭксплуатацию,
		|ОС.НомерДокументаМодернизации,
		|ОС.НомерДокументаПринятияКУчету,
		|ОС.ОбъемПродукцииРабот,
		|ОС.ОбъемПродукцииРаботДляВычисленияАмортизации,
		|ОС.ПараметрВыработки,
		|ОС.ПервоначальнаяСтоимость,
		|ОС.ТекущаяСтоимость,
		|ОС.РодительскоеОС,
		|ОС.СобытиеВводВЭксплуатацию,
		|ОС.СобытиеМодернизации,
		|ОС.СобытиеПринятияКУчету,
		|ОС.СписатьНаЗатратыПриВводе,
		|ОС.СпособНачисленияАмортизации,
		|ОС.СпособОтраженияРасходовПоАмортизации,
		|ОС.СрокИспользованияДляВычисленияАмортизации,
		|ОС.СрокПолезногоИспользования,
		|ОС.СтоимостьДляВычисленияАмортизации,
		|ОС.СуммаПоследнейМодернизации";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()
	
//	мСтрокаРеквизитыРеглУчета = "Организация, НадписьОрганизация, ПодразделениеОрганизации, НадписьПодразделениеОрганизации,
	мСтрокаРеквизитыРеглУчета = "ПодразделениеОрганизации, НадписьПодразделениеОрганизации,
		|ОС.ИнвентарныйНомерРегл,
		|ОС.ДатаВводаВЭксплуатациюРегл,
		|ОС.ДатаПринятияКУчетуРегл,
		|ОС.НазваниеДокументаВводаВЭксплуатациюРегл,
		|ОС.НазваниеДокументаПринятияКУчетуРегл,
		|ОС.НомерДокументаВводаВЭксплуатациюРегл,
		|ОС.НомерДокументаПринятияКУчетуРегл,
		|ОС.СобытиеВводВЭксплуатациюРегл,
		|ОС.СобытиеПринятияКУчетуРегл,
		|";
	
	мСтрокаРеквизитыБухУчета = "ОС.ТекущаяСтоимостьБУ,
		|ОС.ВыработкаКоличествоБУ,
		|ОС.ГрафикАмортизацииБУ,
		|ОС.ДатаПоследнейМодернизацииРегл,
		|ОС.КоэффициентАмортизацииБУ,
		|ОС.КоэффициентУскоренияБУ,
		|ОС.МОЛРегл,
		|ОС.НазваниеДокументаМодернизацииРегл,
		|ОС.НакопленнаяАмортизацияБУ,
		|ОС.НачислятьАмортизациюБУ,
		|ОС.НомерДокументаМодернизацииРегл,
		|ОС.ОбъемПродукцииРаботБУ,
		|ОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ,
		|ОС.ПараметрВыработкиБУ,
		|ОС.ПервоначальнаяСтоимостьБУ,
		|ОС.СобытиеМодернизацииРегл,
		|ОС.СписатьНаЗатратыПриВводеРегл,
		|ОС.СпособНачисленияАмортизацииБУ,
		|ОС.СпособОтраженияРасходовПоАмортизацииБУ,
		|ОС.СпособПоступленияБУ,
		|ОС.СрокИспользованияДляВычисленияАмортизацииБУ,
		|ОС.СрокПолезногоИспользованияБУ,
		|ОС.СтоимостьДляВычисленияАмортизацииБУ,
		|ОС.СуммаПоследнейМодернизацииБУ,
		|ОС.СчетАмортизацииБУ,
		|ОС.СчетУчетаБУ,
		|ОС.ДатаПринятияКУчетуРегл,
		|ОС.СобытиеПринятияКУчетуРегл";
	
	мСтрокаРеквизитыНалУчета = "ОС.ТекущаяСтоимостьНУ,
		|ОС.АмортизацияДо2002НУ,
		|ОС.ДатаПереходаКРасчетуПоБазовойСтоимостиНУ,
		|ОС.МетодНачисленияАмортизацииНУ,
		|ОС.НакопленнаяАмортизацияНУ,
		|ОС.НачислятьАмортизациюНУ,
		|ОС.НачислятьПоБазовойСтоимостиНУ,
		|ОС.ПервоначальнаяСтоимостьНУ,
		|ОС.СпециальныйКоэффициентНУ,
		|ОС.ПорядокВключенияСтоимостиВСоставРасходовНУ,
		|ОС.СпособОтраженияРасходовПоАмортизацииНУ,
		|ОС.СрокПолезногоИспользованияНУ,
		|ОС.СтоимостьДо2002НУ,
		|ОС.СуммаНакопленнойАмортизацииНУ,
		|ОС.СуммаПоследнейМодернизацииНУ,
		|ОС.СчетАмортизацииНУ,
		|ОС.СчетУчетаНУ,
		|ОС.ФактическийСрокИспользованияНУ,
		|ОС.ТекущаяСтоимостьПР,
		|ОС.НакопленнаяАмортизацияПР";
	
	мСтрокаРеквизитыУСН = "
		|ОС.ДатаПриобретенияУСН,
		|ОС.ПервоначальнаяСтоимостьУСН,
		|ОС.СрокПолезногоИспользованияУСН,
		|ОС.СуммаНачисленнойАмортизацииУСН,
		|ОС.ПорядокВключенияСтоимостиВСоставРасходовУСН";
		
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура вывода сообщения об ошибке
//
Процедура ОшибкаПроведенияПоСтроке( СтрокаОС, ТекстСообщения, ТипУчета, Заголовок, Статус)
	
	Если СокрЛП(ТипУчета) = "(УУ)" ИЛИ ЗначениеНеЗаполнено(СтрокаОС.ИнвентарныйНомерРегл) Тогда
		НачалоСообщения = "- строка № " + СтрокаОС.НомерСтроки + ", код ОС <" + СтрокаОС.ОсновноеСредство.Код + "> : ";
	Иначе
		НачалоСообщения = "- строка № " + СтрокаОС.НомерСтроки + ", инв. номер ОС <" + СтрокаОС.ИнвентарныйНомерРегл + "> : ";
	КонецЕсли;
	
	ТекстСообщения = НачалоСообщения + ТекстСообщения;
	
	ОкончаниеСлужебногоСообщения = Найти( ТекстСообщения, "}:");
	Если ОкончаниеСлужебногоСообщения > 0 И Лев(ТекстСообщения, 1) = "{" Тогда
		ТекстСообщения = СокрЛП( Сред( ТекстСообщения, ОкончаниеСлужебногоСообщения + 2));
	КонецЕсли;
	
	#Если Клиент Тогда
		
		Если НЕ ЗначениеНеЗаполнено( Заголовок) Тогда
			Сообщить( Заголовок);
			Заголовок = "";
		КонецЕсли;
		
		Сообщить( ТекстСообщения, Статус);
		
	#КонецЕсли

КонецПроцедуры // ОшибкаПроведенияПоСтроке()

// Процедура проверяет корректность заполнения реквизитов шапки документа
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураРеквизитовШапки = Новый Структура;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		СтруктураРеквизитовШапки.Вставить("Подразделение");
	КонецЕсли;
	
	//Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
	//   Или СтруктураШапкиДокумента.ОтражатьВНалоговомУчете
	//   Или СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
	//	СтруктураРеквизитовШапки.Вставить("Организация");
	//	СтруктураРеквизитовШапки.Вставить("ПодразделениеОрганизации");
	//КонецЕсли;
					
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураРеквизитовШапки, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет корректность заполнения реквизитов таб. части документа
//
Процедура ПроверитьЗаполнениеТабЧасти(РежимПроведения, ТабОС, СтруктураШапкиДокумента, Отказ, Заголовок);

	ОбязательныеРеквизиты = "ОсновноеСредство,
		|ДатаПринятияКУчету,      ДатаПринятияКУчетуРегл,
		|СобытиеПринятияКУчету, СобытиеПринятияКУчетуРегл";
		
	//НепроверятьРеквизитыПоТипуУчета(
	//	ЭтотОбъект,
	//	ОбязательныеРеквизиты,
	//	мСтрокаРеквизитыУпрУчета,
	//	мСтрокаРеквизитыБухУчета,
	//	мСтрокаРеквизитыНалУчета,
	//	"ОС");
		
	//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
	//
	//	ОбязательныеРеквизиты = ОбязательныеРеквизиты + ",ДатаПринятияКУчетуРегл,СобытиеПринятияКУчетуРегл";
	//
	//КонецЕсли; 
	
	//проверка заполнения обязательных реквизитов
	ПроверитьЗаполнениеТабличнойЧасти( ЭтотОбъект, "ОС", Новый Структура(ОбязательныеРеквизиты), Отказ, Заголовок);
	Если Отказ Тогда
		Сообщить("Документ не может быть проведен!", СтатусСообщения.БезСтатуса);
	КонецЕсли;

	РеквизитыВысокойВажности = "";
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете тогда
		РеквизитыВысокойВажности = "ПервоначальнаяСтоимость";
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете тогда
		РеквизитыВысокойВажности = ?(ПустаяСтрока(РеквизитыВысокойВажности), "", РеквизитыВысокойВажности + ", ") + "
			|ИнвентарныйНомерРегл, СпособПоступленияБУ, ПервоначальнаяСтоимостьБУ";
	КонецЕсли;

	мФлагФормированияДвиженийПоВыработке = Истина;
	
	ТабОС.Колонки.Добавить("Дубль", Новый ОписаниеТипов("Булево"));
	
	МетаданныеРеквизиты = ЭтотОбъект.Метаданные().ТабличныеЧасти.ОС.Реквизиты;
	
	БухУчет    = СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете;
	НалУчет    = СтруктураШапкиДокумента.ОтражатьВНалоговомУчете;
	//НалУчетУСН = СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН;
      НалУчетУСН=ЛОЖЬ;
	Для Каждого СтрокаТЧ Из ОС Цикл

		ПроверкаПоСтроке(СтрокаТЧ, РеквизитыВысокойВажности, БухУчет, НалУчет, НалУчетУСН,Отказ,Заголовок,МетаданныеРеквизиты);

	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабЧасти()

//Проверка заполнения реквизитов
Функция ПроверкаПоСтроке(СтрокаОС,БезусловныеРеквизиты, БухУчет, НалУчет, НалУчетУСН, Отказ, Заголовок,МетаданныеРеквизиты)
	
	РеквизитыДляПроверки = Новый Структура(БезусловныеРеквизиты);
	Для каждого ТекРеквизит из РеквизитыДляПроверки Цикл
		РеквизитыДляПроверки.Вставить(ТекРеквизит.Ключ, СтатусСообщения.Важное);
	КонецЦикла;

	//Проверка реквизитов общей группы
	Если БухУчет или НалУчет или НалУчетУСН тогда
		РеквизитыДляПроверки.Вставить("НомерДокументаПринятияКУчетуРегл"	,СтатусСообщения.Внимание);
		РеквизитыДляПроверки.Вставить("НазваниеДокументаПринятияКУчетуРегл"	,СтатусСообщения.Внимание);
		
		РеквизитыДляПроверки.Вставить("МОЛРегл"	,СтатусСообщения.Внимание);
		
		Если НЕ СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету 
		   И НалУчет Тогда
			РеквизитыДляПроверки.Вставить("ПервоначальнаяСтоимостьНУ"					,СтатусСообщения.Важное);
			РеквизитыДляПроверки.Вставить("СчетУчетаНУ"									,СтатусСообщения.Важное);
			РеквизитыДляПроверки.Вставить("ТекущаяСтоимостьНУ"							,СтатусСообщения.Важное);
		КонецЕсли;

	КонецЕсли;
	
	Если НалУчет
	   И СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
	   
		РеквизитыДляПроверки.Вставить("МетодНачисленияАмортизацииНУ"			,СтатусСообщения.Важное);
		РеквизитыДляПроверки.Вставить("СпециальныйКоэффициентНУ"				,СтатусСообщения.Внимание);
		
		//Если СтрокаОС.МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный тогда
		//	НачислениеПоБазовой = Новый структура("ДатаПереходаКРасчетуПоБазовойСтоимостиНУ,
		//		|СуммаНакопленнойАмортизацииНУ,
		//		|ФактическийСрокИспользованияНУ");
		//	Для Каждого ТекРеквизит Из НачислениеПоБазовой Цикл
		//		Если не ЗначениеНеЗаполнено(СтрокаОС[ТекРеквизит.Ключ]) или СтрокаОС.НачислятьПоБазовойСтоимостиНУ тогда
		//			РеквизитыДляПроверки.Вставить("ДатаПереходаКРасчетуПоБазовойСтоимостиНУ" ,СтатусСообщения.Важное);
		//			РеквизитыДляПроверки.Вставить("СуммаНакопленнойАмортизацииНУ"			 ,СтатусСообщения.Важное);
		//			РеквизитыДляПроверки.Вставить("ФактическийСрокИспользованияНУ"			 ,СтатусСообщения.Важное);
		//			РеквизитыДляПроверки.Вставить("НачислятьПоБазовойСтоимостиНУ"			 ,СтатусСообщения.Важное);
		//			Прервать;
		//		КонецЕсли;
		//	КонецЦикла;
		//Конецесли;

		Если СтрокаОС.НачислятьАмортизациюНУ тогда
			РеквизитыДляПроверки.Вставить("СпособОтраженияРасходовПоАмортизацииНУ"	,СтатусСообщения.Внимание);
		КонецЕсли;
		
	КонецЕслИ;
	
	// Цикл по проверяемым полям
	Для каждого КлючЗначение Из РеквизитыДляПроверки Цикл
		Значение = СтрокаОС[КлючЗначение.Ключ];
		Если ЗначениеНеЗаполнено(Значение) Тогда // 
			ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
			ВидУчета = ""; 
			Если Прав(КлючЗначение.Ключ,2) = "БУ" тогда
				ВидУчета = "(БУ) ";
			ИначеЕсли Прав(КлючЗначение.Ключ,2) = "НУ" тогда
				ВидУчета = "(НУ) ";
			ИначеЕсли Прав(КлючЗначение.Ключ,3) = "УСН" тогда
				ВидУчета = "(УСН) ";
			КонецЕсли;
			СтрокаСообщения = ВидУчета+ "не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
			
			ОшибкаПроведенияПоСтроке(СтрокаОС, СтрокаСообщения, ВидУчета, Заголовок, КлючЗначение.Значение);
		ИначеЕсли КлючЗначение.Ключ = "НачислятьПоБазовойСтоимостиНУ" и не СтрокаОС.НачислятьПоБазовойСтоимостиНУ тогда
			//Логическая проверка
			СтрокаСообщения ="(НУ) не установлен признак начисления по базовой стоимости (заполнены некоторые реквизиты для начисления по базовой)";
			ОшибкаПроведенияПоСтроке(СтрокаОС, СтрокаСообщения, "(НУ)", Заголовок,статусСообщения.Важное);
		КонецЕсли;

	КонецЦикла;

	//Если СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда 
	//	
	//	//Запрет некоторых движений если ОС списано при принятии
	//	Если НалУчет и СтрокаОС.НачислятьАмортизациюНУ тогда
	//		СтрокаСообщения = "(НУ) по ОС не может начисляться амортизация, если оно списано на затраты при принятии к учету";
	//		ОшибкаПроведенияПоСтроке(СтрокаОС,СтрокаСообщения , "(НУ)", Заголовок,СтатусСообщения.Важное);
	//	КонецЕсли;

	//	Если НалУчет и не ЗначениеНеЗаполнено(СтрокаОС.НакопленнаяАмортизацияНУ) тогда
	//		СтрокаСообщения = "(НУ) накопленная амортизация по  ОС должна быть равна 0, если оно списано на затраты при принятии к учету
	//		|(проводка не будет сформирована)";
	//		ОшибкаПроведенияПоСтроке(СтрокаОС,СтрокаСообщения , "(НУ)", Заголовок,СтатусСообщения.Обычное);
	//	КонецЕсли;
	//	
	//	Если НалУчет и не ЗначениеНеЗаполнено(СтрокаОС.ТекущаяСтоимостьНУ) тогда
	//		СтрокаСообщения = "(НУ) текущая стоимость ОС должна быть равна 0, если оно списано на затраты при принятии к учету
	//		|(проводка не будет сформирована)";
	//		ОшибкаПроведенияПоСтроке(СтрокаОС,СтрокаСообщения , "(НУ)", Заголовок,СтатусСообщения.Обычное);
	//	КонецЕсли;

	//КонецЕсли;
	
КонецФункции

// Функция получает данные о наличии сведений о выработке по ОС выбранным в документе.
//
Функция ПолучитьДанныеОВыработке()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""Упр"" КАК ТипУчета,
	|	ДокОС.ПараметрВыработки,
	|	ДокОС.ОсновноеСредство,
	|	ДокОС.НомерСтроки
	|ИЗ
	|	Документ.ВводНачальныхОстатковОС.ОС КАК ДокОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВыработкаОС.Обороты(,&КонДата) КАК РегВыработка
	|		ПО ДокОС.ОсновноеСредство = РегВыработка.ОсновноеСредство И ДокОС.ПараметрВыработки = РегВыработка.ПараметрВыработки
	|
	|ГДЕ
	|	ДокОС.Ссылка = &ТекДок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Бух"" КАК ТипУчета,
	|	ДокОС.ПараметрВыработки,
	|	ДокОС.ОсновноеСредство,
	|	ДокОС.НомерСтроки
	|ИЗ
	|	Документ.ВводНачальныхОстатковОС.ОС КАК ДокОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВыработкаОС.Обороты(,&КонДата) КАК РегВыработка
	|		ПО ДокОС.ОсновноеСредство = РегВыработка.ОсновноеСредство И ДокОС.ПараметрВыработкиБУ = РегВыработка.ПараметрВыработки
	|
	|ГДЕ
	|	ДокОС.Ссылка = &ТекДок
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "КонДата" , Дата);
	Запрос.УстановитьПараметр( "ТекДок"  , Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьДанныеОВыработке()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ДОКУМЕНТА ПО РЕГИСТРАМ

// Процедура формирования движений по регистру СтоимостьОС
//
Процедура ДвижениеПоРегиструАмортизацияУпр( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.СтоимостьОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если Не СтрокаОС.СписатьНаЗатратыПриВводе Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период           = Дата;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			Если ЗначениеНеЗаполнено(СтрокаОС.ТекущаяСтоимость) тогда
				НоваяСтрока.Стоимость        = СтрокаОС.ПервоначальнаяСтоимость;
			Иначе
				НоваяСтрока.Стоимость        = СтрокаОС.ТекущаяСтоимость;
			КонецЕсли;
			НоваяСтрока.Амортизация      = СтрокаОС.НакопленнаяАмортизация;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьПриход();
	
КонецПроцедуры // ДвижениеПоРегиструАмортизацияУпр()

// Процедура формирования движений по регистру Амортизация бух.
//
Процедура ДвижениеПоРегиструАмортизацияБух( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.СтоимостьОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если Не СтрокаОС.СписатьНаЗатратыПриВводеРегл Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период           = Дата;
			НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			
			Если ЗначениеНеЗаполнено(СтрокаОС.ТекущаяСтоимостьБУ) тогда
				СтоимостьБУ  = СтрокаОС.ПервоначальнаяСтоимостьБУ;
			Иначе
				СтоимостьБУ  = СтрокаОС.ТекущаяСтоимостьБУ;
			КонецЕсли;

			НоваяСтрока.Стоимость        = ?( ЗначениеНеЗаполнено( СтрокаОС.СчетУчетаБУ),       0, СтоимостьБУ);
			НоваяСтрока.Амортизация      = ?( ЗначениеНеЗаполнено( СтрокаОС.СчетАмортизацииБУ), 0, СтрокаОС.НакопленнаяАмортизацияБУ);
			
		КонецЕсли;
			
	КонецЦикла;
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьПриход();
	
КонецПроцедуры // ДвижениеПоРегиструАмортизацияБух()

// Процедура формирования движений по регистру Амортизация нал.
//
Процедура ДвижениеПоРегиструАмортизацияНал( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.СтоимостьОСНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если Не СтрокаОС.СписатьНаЗатратыПриВводеРегл Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период           = Дата;
			НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			
			Если ЗначениеНеЗаполнено(СтрокаОС.ТекущаяСтоимостьНУ) тогда
				СтоимостьНУ  = СтрокаОС.ПервоначальнаяСтоимостьНУ;
			Иначе
				СтоимостьНУ  = СтрокаОС.ТекущаяСтоимостьНУ;
			КонецЕсли;
			
			НоваяСтрока.Стоимость        = ?( ЗначениеНеЗаполнено( СтрокаОС.СчетУчетаНУ),       0, СтоимостьНУ);
			НоваяСтрока.Амортизация      = ?( ЗначениеНеЗаполнено( СтрокаОС.СчетАмортизацииНУ), 0, СтрокаОС.НакопленнаяАмортизацияНУ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьПриход();
	
КонецПроцедуры // ДвижениеПоРегиструАмортизацияНал()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру ВыработкаОС
//
Процедура ДвижениеПоРегиструВыработкаОС( ТабОС, СтруктураШапкиДокумента, Заголовок)
	
	Если мФлагФормированияДвиженийПоВыработке Тогда
		
		ТабВыработки = ПолучитьДанныеОВыработке();
		СтруктПоиска = Новый Структура;
		
		НаборДвижений   = Движения.ВыработкаОС;
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		
		Для Каждого СтрокаОС Из ТабОС Цикл
			
			Если СтрокаОС.ВыработкаКоличество > 0
			   И СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
			   И НЕ ЗначениеНеЗаполнено(СтрокаОС.ПараметрВыработки) Тогда
			   
				СтруктПоиска.Вставить( "НомерСтроки", СтрокаОС.НомерСтроки);
				СтруктПоиска.Вставить( "ТипУчета",    "Упр");
				
				Найдено = ТабВыработки.НайтиСтроки(СтруктПоиска);
				Если Найдено.Количество() > 0 Тогда
					
					ТекстСообщения = "(УУ) Данные о выработке с параметром """ + СтрокаОС.ПараметрВыработки + """ уже присутствуют.";
					ОшибкаПроведенияПоСтроке( СтрокаОС, ТекстСообщения, "(УУ)", Заголовок, СтатусСообщения.Важное);
					
				КонецЕсли;
				
				НоваяСтрока = ТаблицаДвижений.Добавить();
				НоваяСтрока.Период            = Дата;
				НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
				НоваяСтрока.ПараметрВыработки = СтрокаОС.ПараметрВыработки;
				НоваяСтрока.Количество        = СтрокаОС.ВыработкаКоличество;
				
			КонецЕсли;
			
			Если СтрокаОС.ВыработкаКоличествоБУ > 0
			   И СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
			   И НЕ ЗначениеНеЗаполнено(СтрокаОС.ПараметрВыработкиБУ) Тогда
			   
				СтруктПоиска.Вставить( "НомерСтроки", СтрокаОС.НомерСтроки);
				СтруктПоиска.Вставить( "ТипУчета",    "Бух");
				
				Найдено = ТабВыработки.НайтиСтроки(СтруктПоиска);
				Если Найдено.Количество() > 0 Тогда
					
					ТекстСообщения = "(БУ) Данные о выработке с параметром """ + СтрокаОС.ПараметрВыработкиБУ + """ уже присутствуют.";
					ОшибкаПроведенияПоСтроке( СтрокаОС, ТекстСообщения, "(БУ)", Заголовок, СтатусСообщения.Важное);
					
				КонецЕсли;
				Если СтрокаОС.ПараметрВыработкиБУ <> СтрокаОС.ПараметрВыработки тогда 				
					НоваяСтрока = ТаблицаДвижений.Добавить();
					НоваяСтрока.Период            = Дата;
					НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
					НоваяСтрока.ПараметрВыработки = СтрокаОС.ПараметрВыработкиБУ;
					НоваяСтрока.Количество        = СтрокаОС.ВыработкаКоличествоБУ;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		НаборДвижений.мПериод = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		НаборДвижений.ДобавитьДвижение();
	
	КонецЕсли;
	
КонецПроцедуры // ДвижениеПоРегиструВыработкаОС()

// Процедура формирования движений по регистру НоменклатураОС
//
Процедура ДвижениеПоРегиструНоменклатураОС( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.НоменклатураОсновныхСредств;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если НЕ ЗначениеНеЗаполнено( СтрокаОС.Номенклатура) Тогда
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Активность       = Истина;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Номенклатура     = СтрокаОС.Номенклатура;
			НоваяСтрока.Характеристика   = СтрокаОС.ХарактеристикаНоменклатуры;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструНоменклатураОС()

// Процедура формирования движений по регистру Состав ОС
//
Процедура ДвижениеПоРегиструСоставОС( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.СоставОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если НЕ ЗначениеНеЗаполнено( СтрокаОС.РодительскоеОС) Тогда
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период           = Дата;
			НоваяСтрока.Активность       = Истина;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.ВСоставе         = СтрокаОС.РодительскоеОС;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструСоставОС()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру ОССписанныеНаЗатраты.
//
Процедура ДвижениеПоРегиструОССписанныеНаЗатратыУпр( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.ОССписанныеНаЗатраты;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если СтрокаОС.СписатьНаЗатратыПриВводе Тогда
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период           = Дата;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Стоимость        = СтрокаОС.ПервоначальнаяСтоимость;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьПриход();
	
КонецПроцедуры // ДвижениеПоРегиструОССписанныеНаЗатратыУпр()

// Процедура формирования движений по регистру ОССписанныеНаЗатраты бух.
//
Процедура ДвижениеПоРегиструОССписанныеНаЗатратыБух( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.ОССписанныеНаЗатратыОрганизаций;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если СтрокаОС.СписатьНаЗатратыПриВводеРегл Тогда
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период           = Дата;
			НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Стоимость        = СтрокаОС.ПервоначальнаяСтоимостьБУ;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьПриход();
	
КонецПроцедуры // ДвижениеПоРегиструОССписанныеНаЗатратыБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Первоначальные сведеняи об ОС.
//
Процедура ДвижениеПоРегиструПервоначальныеСведенияОСУпр( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.ПервоначальныеСведенияОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                      = СтрокаОС.ДатаПринятияКУчету;
		НоваяСтрока.Активность                  = Истина;
		НоваяСтрока.ОсновноеСредство            = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.ПервоначальнаяСтоимость     = СтрокаОС.ПервоначальнаяСтоимость;
		НоваяСтрока.СпособНачисленияАмортизации = СтрокаОС.СпособНачисленияАмортизации;
		НоваяСтрока.ПараметрВыработки           = СтрокаОС.ПараметрВыработки;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструПервоначальныеСведенияОСУпр()

// Процедура формирования движений по регистру Первоначальные сведеняи об ОС бух.
//
Процедура ДвижениеПоРегиструПервоначальныеСведенияОСБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ПервоначальныеСведенияОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                      = СтрокаОС.ДатаПринятияКУчетуРегл;
		НоваяСтрока.Активность                  = Истина;
		НоваяСтрока.Организация                 = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство            = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.ПервоначальнаяСтоимость     = СтрокаОС.ПервоначальнаяСтоимостьБУ;
		НоваяСтрока.ИнвентарныйНомер            = СтрокаОС.ИнвентарныйНомерРегл;
		НоваяСтрока.СпособПоступления           = СтрокаОС.СпособПоступленияБУ;
		НоваяСтрока.СпособНачисленияАмортизации = СтрокаОС.СпособНачисленияАмортизацииБУ;
		НоваяСтрока.ПараметрВыработки           = СтрокаОС.ПараметрВыработкиБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструПервоначальныеСведенияОСБух()

// Процедура формирования движений по регистру Первоначальные сведеняи об ОС нал.
//
Процедура ДвижениеПоРегиструПервоначальныеСведенияОСНал( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ПервоначальныеСведенияОСНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                                   = СтрокаОС.ДатаПринятияКУчетуРегл;
		НоваяСтрока.Активность                               = Истина;
		НоваяСтрока.Организация                              = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство                         = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.ПервоначальнаяСтоимостьНУ                = СтрокаОС.ПервоначальнаяСтоимостьНУ;
		НоваяСтрока.МетодНачисленияАмортизации               = СтрокаОС.МетодНачисленияАмортизацииНУ;
		НоваяСтрока.СтоимостьДо2002                          = СтрокаОС.СтоимостьДо2002НУ;
		НоваяСтрока.АмортизацияДо2002                        = СтрокаОС.АмортизацияДо2002НУ;
		НоваяСтрока.ПорядокВключенияСтоимостиВСоставРасходов = СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструПервоначальныеСведенияОСНал()

// Процедура формирования движений по регистру Первоначальные сведеняи об ОС нал.
//
Процедура ДвижениеПоРегиструПервоначальныеСведенияОСУСН( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ПервоначальныеСведенияОСНалоговыйУчетУСН;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		Если СтрокаОС.СписатьНаЗатратыПриВводеРегл тогда 
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                      = СтрокаОС.ДатаПринятияКУчетуРегл;
		НоваяСтрока.Организация                 = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство            = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.ПервоначальнаяСтоимостьУСН  = СтрокаОС.ПервоначальнаяСтоимостьУСН;
		НоваяСтрока.СрокПолезногоИспользования  = СтрокаОС.СрокПолезногоИспользованияУСН;
		НоваяСтрока.СуммаНачисленнойАмортизации = СтрокаОС.СуммаНачисленнойАмортизацииУСН;
		НоваяСтрока.ДатаПриобретения            = СтрокаОС.ДатаПриобретенияУСН;
		НоваяСтрока.ПорядокВключенияСтоимостиВСоставРасходовУСН = СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовУСН;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструПервоначальныеСведенияОСУСН()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Местонахождение ОС.
//
Процедура ДвижениеПоРегиструМестонахождениеОСУпр( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.МестонахождениеОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период           = Дата;
		НоваяСтрока.Активность       = Истина;
		НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.МОЛ              = СтрокаОС.МОЛ;
		НоваяСтрока.Местонахождение  = СтруктураШапкиДокумента.Подразделение;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструМестонахождениеОСУпр()

// Процедура формирования движений по регистру Местонахождение ОС бух.
//
Процедура ДвижениеПоРегиструМестонахождениеОСБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.МестонахождениеОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период           = Дата;
		НоваяСтрока.Активность                  = Истина;
		НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.МОЛ              = СтрокаОС.МОЛРегл;
		НоваяСтрока.Местонахождение  = СтруктураШапкиДокумента.ПодразделениеОрганизации;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструМестонахождениеОСБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Графики амортизации ОС.
//
Процедура ДвижениеПоРегиструГрафикиАмортизацииОСУпр( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.ГрафикиАмортизацииОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если Не ЗначениеНеЗаполнено( СтрокаОС.ГрафикАмортизации) Тогда
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Активность        = Истина;
			НоваяСтрока.Период            = Дата;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.ГрафикАмортизации = СтрокаОС.ГрафикАмортизации;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструГрафикиАмортизацииОСУпр()

// Процедура формирования движений по регистру Графики амортизации ОС бух.
//
Процедура ДвижениеПоРегиструГрафикиАмортизацииОСБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ГрафикиАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если Не ЗначениеНеЗаполнено( СтрокаОС.ГрафикАмортизацииБУ) Тогда
		   
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период            = Дата;
			НоваяСтрока.Активность        = Истина;
			НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.ГрафикАмортизации = СтрокаОС.ГрафикАмортизацииБУ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструГрафикиАмортизацииОСБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Начисление амортизации.
//
Процедура ДвижениеПоРегиструНачислениеАмортизацииУпр( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.НачислениеАмортизацииОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                             = Дата;
		НоваяСтрока.Активность                         = Истина;
		НоваяСтрока.ОсновноеСредство                   = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.НачислятьАмортизацию               = СтрокаОС.НачислятьАмортизацию;
		НоваяСтрока.НачислятьАмортизациюВТекущемМесяце = Ложь;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструНачислениеАмортизацииУпр()

// Процедура формирования движений по регистру Начисление амортизации бух.
//
Процедура ДвижениеПоРегиструНачислениеАмортизацииБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период               = Дата;
		НоваяСтрока.Активность           = Истина;
		НоваяСтрока.Организация          = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство     = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.НачислятьАмортизацию = СтрокаОС.НачислятьАмортизациюБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструНачислениеАмортизацииБух()

// Процедура формирования движений по регистру Начисление амортизации нал.
//
Процедура ДвижениеПоРегиструНачислениеАмортизацииНал( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.НачислениеАмортизацииОСНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если Не СтрокаОС.СписатьНаЗатратыПриВводеРегл Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период               = Дата;
			НоваяСтрока.Активность           = Истина;
			НоваяСтрока.Организация          = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.ОсновноеСредство     = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.НачислятьАмортизацию = СтрокаОС.НачислятьАмортизациюНУ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструНачислениеАмортизацииНал()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру ПараметрыАмортизации ОС.
//
Процедура ДвижениеПоРегиструПараметрыАмортизацииУпр( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.ПараметрыАмортизацииОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если Не СтрокаОС.СписатьНаЗатратыПриВводе Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период =  ?( ЗначениеНеЗаполнено( СтрокаОС.ДатаПоследнейМодернизации),
										СтрокаОС.ДатаПринятияКУчету, 
										?( СтрокаОС.ДатаПринятияКУчету = СтрокаОС.ДатаПоследнейМодернизации,
											Мин( СтрокаОС.ДатаПринятияКУчету + 2, КонецДня(СтрокаОС.ДатаПринятияКУчету)),
											СтрокаОС.ДатаПоследнейМодернизации));
			
			НоваяСтрока.Активность       = Истина;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			
			НоваяСтрока.СрокПолезногоИспользования        = СтрокаОС.СрокПолезногоИспользования;
			НоваяСтрока.ОбъемПродукцииРабот               = СтрокаОС.ОбъемПродукцииРабот;
			НоваяСтрока.КоэффициентАмортизации            = СтрокаОС.КоэффициентАмортизации;
			НоваяСтрока.КоэффициентУскорения              = СтрокаОС.КоэффициентУскорения;
			
			НоваяСтрока.ПрименитьВТекущемМесяце = Ложь;
			
			Если ЗначениеНеЗаполнено( СтрокаОС.СрокИспользованияДляВычисленияАмортизации) Тогда
				НоваяСтрока.СрокИспользованияДляВычисленияАмортизации   = СтрокаОС.СрокПолезногоИспользования;;
			Иначе
				НоваяСтрока.СрокИспользованияДляВычисленияАмортизации   = СтрокаОС.СрокИспользованияДляВычисленияАмортизации;
			КонецЕсли;
			Если ЗначениеНеЗаполнено( СтрокаОС.ОбъемПродукцииРаботДляВычисленияАмортизации) Тогда
				НоваяСтрока.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаОС.ОбъемПродукцииРабот;
			Иначе
				НоваяСтрока.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаОС.ОбъемПродукцииРаботДляВычисленияАмортизации;
			КонецЕсли;
			Если ЗначениеНеЗаполнено( СтрокаОС.СтоимостьДляВычисленияАмортизации) Тогда
				Если ЗначениеНеЗаполнено(СтрокаОС.ТекущаяСтоимость) тогда
					Стоимость  = СтрокаОС.ПервоначальнаяСтоимость;
				Иначе
					Стоимость  = СтрокаОС.ТекущаяСтоимость;
				КонецЕсли;
				НоваяСтрока.СтоимостьДляВычисленияАмортизации = Стоимость;
			Иначе
				НоваяСтрока.СтоимостьДляВычисленияАмортизации = СтрокаОС.СтоимостьДляВычисленияАмортизации;
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструПараметрыАмортизацииУпр()

// Процедура формирования движений по регистру ПараметрыАмортизации ОС бух.
//
Процедура ДвижениеПоРегиструПараметрыАмортизацииБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если Не СтрокаОС.СписатьНаЗатратыПриВводеРегл Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период =  ?( ЗначениеНеЗаполнено( СтрокаОС.ДатаПоследнейМодернизацииРегл),
										СтрокаОС.ДатаПринятияКУчетуРегл, 
										?( СтрокаОС.ДатаПринятияКУчетуРегл = СтрокаОС.ДатаПоследнейМодернизацииРегл,
											Мин( СтрокаОС.ДатаПринятияКУчетуРегл + 2, КонецДня(СтрокаОС.ДатаПринятияКУчетуРегл)),
											СтрокаОС.ДатаПоследнейМодернизацииРегл));
			НоваяСтрока.Активность       = Истина;
			НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			
			НоваяСтрока.СрокПолезногоИспользования = СтрокаОС.СрокПолезногоИспользованияБУ;
			НоваяСтрока.ОбъемПродукцииРабот        = СтрокаОС.ОбъемПродукцииРаботБУ;
			НоваяСтрока.КоэффициентАмортизации     = СтрокаОС.КоэффициентАмортизацииБУ;
			НоваяСтрока.КоэффициентУскорения       = СтрокаОС.КоэффициентУскоренияБУ;
			
			Если ЗначениеНеЗаполнено( СтрокаОС.СрокИспользованияДляВычисленияАмортизацииБУ) Тогда
				НоваяСтрока.СрокИспользованияДляВычисленияАмортизации   = СтрокаОС.СрокПолезногоИспользованияБУ;;
			Иначе
				НоваяСтрока.СрокИспользованияДляВычисленияАмортизации   = СтрокаОС.СрокИспользованияДляВычисленияАмортизацииБУ;
			КонецЕсли;
			Если ЗначениеНеЗаполнено( СтрокаОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ) Тогда
				НоваяСтрока.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаОС.ОбъемПродукцииРаботБУ;
			Иначе
				НоваяСтрока.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ;
			КонецЕсли;
			Если ЗначениеНеЗаполнено( СтрокаОС.СтоимостьДляВычисленияАмортизацииБУ) Тогда
				Если ЗначениеНеЗаполнено(СтрокаОС.ТекущаяСтоимостьБУ) тогда
					Стоимость  = СтрокаОС.ПервоначальнаяСтоимостьБУ;
				Иначе
					Стоимость  = СтрокаОС.ТекущаяСтоимостьБУ;
				КонецЕсли;
				НоваяСтрока.СтоимостьДляВычисленияАмортизации = Стоимость;
			Иначе
				НоваяСтрока.СтоимостьДляВычисленияАмортизации = СтрокаОС.СтоимостьДляВычисленияАмортизацииБУ;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструПараметрыАмортизацииБух()

// Процедура формирования движений по регистру ПараметрыАмортизации ОС нал.
//
Процедура ДвижениеПоРегиструПараметрыАмортизацииНал( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ПараметрыАмортизацииОСНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если Не СтрокаОС.СписатьНаЗатратыПриВводеРегл Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период =  ?( ЗначениеНеЗаполнено( СтрокаОС.ДатаПоследнейМодернизацииРегл),
										СтрокаОС.ДатаПринятияКУчетуРегл, 
										?( СтрокаОС.ДатаПринятияКУчетуРегл = СтрокаОС.ДатаПоследнейМодернизацииРегл,
											Мин( СтрокаОС.ДатаПринятияКУчетуРегл + 2, КонецДня(СтрокаОС.ДатаПринятияКУчетуРегл)),
											СтрокаОС.ДатаПоследнейМодернизацииРегл));
			НоваяСтрока.Активность                 = Истина;
			НоваяСтрока.Организация                = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.ОсновноеСредство           = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.СрокПолезногоИспользования = СтрокаОС.СрокПолезногоИспользованияНУ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструПараметрыАмортизацииНал()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру СобытияОС.
//
Процедура ДвижениеПоРегиструСобытияОСУпр( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.СобытияОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период            = СтрокаОС.ДатаПринятияКУчету;
 		НоваяСтрока.Активность        = Истина;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Событие		      = СтрокаОС.СобытиеПринятияКУчету;
		НоваяСтрока.НомерДокумента    = СтрокаОС.НомерДокументаПринятияКУчету;
		НоваяСтрока.НазваниеДокумента = СтрокаОС.НазваниеДокументаПринятияКУчету;
		
		Если Не ЗначениеНеЗаполнено(СтрокаОС.ДатаВводаВЭксплуатацию) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период            = ?(СтрокаОС.ДатаПринятияКУчету = СтрокаОС.ДатаВводаВЭксплуатацию,
												Мин( СтрокаОС.ДатаПринятияКУчету + 1, КонецДня(СтрокаОС.ДатаПринятияКУчету)),
												СтрокаОС.ДатаВводаВЭксплуатацию);
	 		НоваяСтрока.Активность        = Истина;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Событие           = СтрокаОС.СобытиеВводВЭксплуатацию;
			НоваяСтрока.НомерДокумента    = СтрокаОС.НомерДокументаВводаВЭксплуатацию;
			НоваяСтрока.НазваниеДокумента = СтрокаОС.НазваниеДокументаВводаВЭксплуатацию;
			
		КонецЕсли;
		
		Если Не СтрокаОС.СписатьНаЗатратыПриВводе
		   И Не ЗначениеНеЗаполнено(СтрокаОС.ДатаПоследнейМодернизации) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период            = ?(СтрокаОС.ДатаПринятияКУчету = СтрокаОС.ДатаПоследнейМодернизации,
												Мин( СтрокаОС.ДатаПринятияКУчету + 2, КонецДня(СтрокаОС.ДатаПринятияКУчету)),
												СтрокаОС.ДатаПоследнейМодернизации);
	 		НоваяСтрока.Активность        = Истина;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Событие           = СтрокаОС.СобытиеМодернизации;
			НоваяСтрока.СуммаЗатрат       = СтрокаОС.СуммаПоследнейМодернизации;
			НоваяСтрока.НомерДокумента    = СтрокаОС.НомерДокументаМодернизации;
			НоваяСтрока.НазваниеДокумента = СтрокаОС.НазваниеДокументаМодернизации;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструСобытияОСУпр()

// Процедура формирования движений по регистру  СобытияОСорганизаций.
//
Процедура ДвижениеПоРегиструСобытияОСБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.СобытияОСОрганизаций;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период            = СтрокаОС.ДатаПринятияКУчетуРегл;
 		НоваяСтрока.Активность        = Истина;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.Событие           = СтрокаОС.СобытиеПринятияКУчетуРегл;
		НоваяСтрока.НомерДокумента    = СтрокаОС.НомерДокументаПринятияКУчетуРегл;
		НоваяСтрока.НазваниеДокумента = СтрокаОС.НазваниеДокументаПринятияКУчетуРегл;
		
		Если Не ЗначениеНеЗаполнено(СтрокаОС.ДатаВводаВЭксплуатациюРегл) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период            = ?(СтрокаОС.ДатаПринятияКУчетуРегл = СтрокаОС.ДатаВводаВЭксплуатациюРегл,
												Мин( СтрокаОС.ДатаПринятияКУчетуРегл + 1, КонецДня(СтрокаОС.ДатаПринятияКУчетуРегл)),
												СтрокаОС.ДатаВводаВЭксплуатациюРегл);
	 		НоваяСтрока.Активность        = Истина;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.Событие           = СтрокаОС.СобытиеВводВЭксплуатациюРегл;
			НоваяСтрока.НомерДокумента    = СтрокаОС.НомерДокументаВводаВЭксплуатациюРегл;
			НоваяСтрока.НазваниеДокумента = СтрокаОС.НазваниеДокументаВводаВЭксплуатациюРегл;
			
		КонецЕсли;

		
		Если Не СтрокаОС.СписатьНаЗатратыПриВводеРегл
		   И Не ЗначениеНеЗаполнено(СтрокаОС.ДатаПоследнейМодернизацииРегл) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период            = ?(СтрокаОС.ДатаПринятияКУчетуРегл = СтрокаОС.ДатаПоследнейМодернизацииРегл,
												Мин( СтрокаОС.ДатаПринятияКУчетуРегл + 2, КонецДня(СтрокаОС.ДатаПринятияКУчетуРегл)),
												СтрокаОС.ДатаПоследнейМодернизацииРегл);
	 		НоваяСтрока.Активность        = Истина;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.Событие           = СтрокаОС.СобытиеМодернизацииРегл;
			НоваяСтрока.СуммаЗатратБУ     = СтрокаОС.СуммаПоследнейМодернизацииБУ;
			НоваяСтрока.СуммаЗатратНУ     = СтрокаОС.СуммаПоследнейМодернизацииНУ;
			НоваяСтрока.НомерДокумента    = СтрокаОС.НомерДокументаМодернизацииРегл;
			НоваяСтрока.НазваниеДокумента = СтрокаОС.НазваниеДокументаМодернизацииРегл;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);

КонецПроцедуры // ДвижениеПоРегиструСобытияОСБух()

////////////////////////////////////////////////////////////////////////////////


// Процедура формирования движений по регистру СостоянияОС.
//
Процедура ДвижениеПоРегиструСостоянияОСУпр( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.СостоянияОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
 		НоваяСтрока.Активность        = Истина;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Состояние	      = Перечисления.СостоянияОС.ПринятоКУчету;
		НоваяСтрока.ДатаСостояния	  = СтрокаОС.ДатаПринятияКУчету;
		
		Если Не ЗначениеНеЗаполнено(СтрокаОС.ДатаВводаВЭксплуатацию) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Активность        = Истина;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Состояние	      = Перечисления.СостоянияОС.ВведеноВЭксплуатацию;
			НоваяСтрока.ДатаСостояния	  = ?(СтрокаОС.ДатаПринятияКУчету = СтрокаОС.ДатаВводаВЭксплуатацию,
												Мин( СтрокаОС.ДатаПринятияКУчету + 1, КонецДня(СтрокаОС.ДатаПринятияКУчету)),
												СтрокаОС.ДатаВводаВЭксплуатацию);
		КонецЕсли;
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструСостоянияОСУпр()

// Процедура формирования движений по регистру СостоянияОСОрганизаций.
//
Процедура ДвижениеПоРегиструСостоянияОСБух( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.СостоянияОСОрганизаций;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
 		НоваяСтрока.Активность        = Истина;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.Состояние	      = Перечисления.СостоянияОС.ПринятоКУчету;
		НоваяСтрока.ДатаСостояния	  = СтрокаОС.ДатаПринятияКУчетуРегл;
		
		Если Не ЗначениеНеЗаполнено(СтрокаОС.ДатаВводаВЭксплуатациюРегл) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
	 		НоваяСтрока.Активность        = Истина;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.Состояние	      = Перечисления.СостоянияОС.ВведеноВЭксплуатацию;
			НоваяСтрока.ДатаСостояния	  = ?(СтрокаОС.ДатаПринятияКУчетуРегл = СтрокаОС.ДатаВводаВЭксплуатациюРегл,
												Мин( СтрокаОС.ДатаПринятияКУчетуРегл + 1, КонецДня(СтрокаОС.ДатаПринятияКУчетуРегл)),
												СтрокаОС.ДатаВводаВЭксплуатациюРегл);
		КонецЕсли;
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструСостоянияОСУпр()

////////////////////////////////////////////////////////////////////////////////


// Процедура формирования движений по регистру Сопособы отражения расходов по амортизации ОС.
//
Процедура ДвижениеПоРегиструСпособыОтраженияРасходовУпр( ТабОС, СтруктураШапкиДокумента);

	НаборДвижений   = Движения.СпособыОтраженияРасходовПоАмортизацииОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если Не ЗначениеНеЗаполнено(СтрокаОС.СпособОтраженияРасходовПоАмортизации) Тогда
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период           = Дата;
			НоваяСтрока.Активность       = Истина;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.СпособыОтраженияРасходовПоАмортизации = СтрокаОС.СпособОтраженияРасходовПоАмортизации;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструСпособыОтраженияРасходовУпр()

// Процедура формирования движений по регистру Сопособы отражения расходов по амортизации ОС бух.
//
Процедура ДвижениеПоРегиструСпособыОтраженияРасходовБух( ТабОС, СтруктураШапкиДокумента);

	НаборДвижений   = Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если Не ЗначениеНеЗаполнено(СтрокаОС.СпособОтраженияРасходовПоАмортизацииБУ) Тогда
		   
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период           = Дата;
			НоваяСтрока.Активность       = Истина;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.СпособыОтраженияРасходовПоАмортизации = СтрокаОС.СпособОтраженияРасходовПоАмортизацииБУ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструСпособыОтраженияРасходовБух()

// Процедура формирования движений по регистру Сопособы отражения расходов по амортизации ОС нал.
//
Процедура ДвижениеПоРегиструСпособыОтраженияРасходовНал( ТабОС, СтруктураШапкиДокумента);

	НаборДвижений   = Движения.СпособыОтраженияРасходовПоАмортизацииОСНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если Не СтрокаОС.СписатьНаЗатратыПриВводеРегл
		   И Не ЗначениеНеЗаполнено(СтрокаОС.СпособОтраженияРасходовПоАмортизацииНУ) Тогда
		   
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период           = Дата;
			НоваяСтрока.Активность       = Истина;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.СпособыОтраженияРасходовПоАмортизации = СтрокаОС.СпособОтраженияРасходовПоАмортизацииНУ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструСпособыОтраженияРасходовНал()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Счета учета ОС бух.
//
Процедура ДвижениеПоРегиструСчетаУчетаОСБух( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.СчетаБухгалтерскогоУчетаОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                    = СтрокаОС.ДатаПринятияКУчетуРегл;
 		НоваяСтрока.Активность                = Истина;
		НоваяСтрока.ОсновноеСредство          = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация               = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СчетУчета                 = СтрокаОС.СчетУчетаБУ;
		НоваяСтрока.СчетНачисленияАмортизации = СтрокаОС.СчетАмортизацииБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструСчетаУчетаОСБух()

// Процедура формирования движений по регистру Счета учета ОС нал.
//
Процедура ДвижениеПоРегиструСчетаУчетаОСНал( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.СчетаНалоговогоУчетаОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если Не СтрокаОС.СписатьНаЗатратыПриВводеРегл Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период                    = СтрокаОС.ДатаПринятияКУчетуРегл;
	 		НоваяСтрока.Активность                = Истина;
			НоваяСтрока.ОсновноеСредство          = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация               = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.СчетУчета                 = СтрокаОС.СчетУчетаНУ;
			НоваяСтрока.СчетНачисленияАмортизации = СтрокаОС.СчетАмортизацииНУ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);

КонецПроцедуры // ДвижениеПоРегиструСчетаУчетаОСНал()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру начисление амортизации по базовой стоимости нал.
//
Процедура ДвижениеПоРегиструАмортизацияПоБазСтоимостиНал( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.НачислениеАмортизацииОСПоБазовойСтоимостиНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если СтрокаОС.НачислятьПоБазовойСтоимостиНУ
		   И Не СтрокаОС.СписатьНаЗатратыПриВводеРегл
		   И Не ЗначениеНеЗаполнено( СтрокаОС.ДатаПереходаКРасчетуПоБазовойСтоимостиНУ)
		   И    СтрокаОС.МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период                    = СтрокаОС.ДатаПереходаКРасчетуПоБазовойСтоимостиНУ;
	 		НоваяСтрока.Активность                = Истина;
			НоваяСтрока.ОсновноеСредство          = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация               = СтруктураШапкиДокумента.Организация;
			
			НоваяСтрока.ПризнакНачисленияПоБазовойСтоимости   = СтрокаОС.НачислятьПоБазовойСтоимостиНУ;
			НоваяСтрока.СуммаНакопленнойАмортизации           = СтрокаОС.СуммаНакопленнойАмортизацииНУ;
			НоваяСтрока.ФактическийСрокполезногоИспользования = СтрокаОС.ФактическийСрокИспользованияНУ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструАмортизацияПоБазСтоимостиНал()

// Процедура формирования движений по регистру Спец. коэф. амортизации ОС нал.
//
Процедура ДвижениеПоРегиструСпецКоэффициентНал( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если Не СтрокаОС.СписатьНаЗатратыПриВводеРегл
			  И СтрокаОС.СпециальныйКоэффициентНУ > 0 Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период                 = СтруктураШапкиДокумента.Дата;
	 		НоваяСтрока.Активность             = Истина;
			НоваяСтрока.ОсновноеСредство       = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация            = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.СпециальныйКоэффициент = СтрокаОС.СпециальныйКоэффициентНУ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);

КонецПроцедуры // ДвижениеПоРегиструСпецКоэффициентНал()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирование проводок.
//
Процедура ФормированиеПроводокБух( ТабОС, СтруктураШапкиДокумента)
	
	//Операция = Движения.Хозрасчетный;
	//
	//Для Каждого СтрокаОС Из ТабОС Цикл
	//	
	//	Если Не СтрокаОС.СписатьНаЗатратыПриВводеРегл Тогда
	//		
	//		Если НЕ ЗначениеНеЗаполнено(СтрокаОС.СчетУчетаБУ) Тогда
	//			
	//			Если ЗначениеНеЗаполнено(СтрокаОС.ТекущаяСтоимостьБУ) Тогда
	//				СуммаПроводки = СтрокаОС.ПервоначальнаяСтоимостьБУ;
	//			Иначе
	//				СуммаПроводки = СтрокаОС.ТекущаяСтоимостьБУ;
	//			КонецЕсли;
	//			
	//			Если НЕ (СуммаПроводки = 0) Тогда
	//			
	//				// Ввод балансовой стоимости ОС.
	//				Проводка = Операция.Добавить();
	//				Проводка.Период      = Дата;
	//				Проводка.Организация = СтруктураШапкиДокумента.Организация;
	//				Проводка.Содержание  = "Ввод остаток по ОС (баланс. стоимость)";
	//				
	//				Проводка.Сумма       = СуммаПроводки;
	//				
	//				Проводка.СчетДт = СтрокаОС.СчетУчетаБУ;
	//				УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
	//				
	//				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.Вспомогательный;
	//			
	//			КонецЕсли;
	//			
	//		КонецЕсли;
	//		
	//		Если НЕ ЗначениеНеЗаполнено( СтрокаОС.СчетАмортизацииБУ) Тогда
	//		   
	//		   СуммаПроводки = СтрокаОС.НакопленнаяАмортизацияБУ;
	//		   
	//		   Если НЕ (СуммаПроводки = 0) Тогда
	//		   
	//				// Ввод начисленной амортизации.
	//				Проводка = Операция.Добавить();
	//				Проводка.Период      = Дата;
	//				Проводка.Организация = СтруктураШапкиДокумента.Организация;
	//				Проводка.Содержание  = "Ввод остаток по ОС (начисл. амортизация)";
	//				Проводка.Сумма       = СтрокаОС.НакопленнаяАмортизацияБУ;
	//				
	//				Проводка.СчетКт = СтрокаОС.СчетАмортизацииБУ;
	//				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
	//				
	//				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;
	//				
	//			КонецЕсли;
	//			
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
КонецПроцедуры // ФормированиеПроводокБух

// Процедура формирование проводок нал.
//
Процедура ФормированиеПроводокНал( ТабОС, СтруктураШапкиДокумента)
	
	//Операция = Движения.Налоговый;
	//
	//Для Каждого СтрокаОС Из ТабОС Цикл
	//	
	//	Если Не СтрокаОС.СписатьНаЗатратыПриВводеРегл Тогда
	//	   
	//		Если НЕ ЗначениеНеЗаполнено(СтрокаОС.СчетУчетаНУ) Тогда

	//			Если ЗначениеНеЗаполнено(СтрокаОС.ТекущаяСтоимостьНУ) тогда
	//				СуммаПроводки = СтрокаОС.ПервоначальнаяСтоимостьНУ;
	//			Иначе
	//				СуммаПроводки = СтрокаОС.ТекущаяСтоимостьНУ;
	//			КонецЕсли;
	//			
	//			Если НЕ (СуммаПроводки = 0) Тогда
	//			
	//				// Ввод балансовой стоимости ОС.
	//				Проводка = Операция.Добавить();
	//				Проводка.Период      = Дата;
	//				Проводка.Организация = СтруктураШапкиДокумента.Организация;
	//				Проводка.Содержание  = "Ввод остаток по ОС (баланс. стоимость)";
	//				
	//				Проводка.Сумма       = СуммаПроводки;
	//				Проводка.СчетДт      = СтрокаОС.СчетУчетаНУ;
	//				УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
	//			
	//			КонецЕсли;
	//			
	//		КонецЕсли;
	//		
	//		Если НЕ ЗначениеНеЗаполнено(СтрокаОС.СчетАмортизацииНУ) Тогда
	//		   
	//		   СуммаПроводки = СтрокаОС.НакопленнаяАмортизацияНУ;
	//		   
	//		   Если НЕ (СуммаПроводки = 0) Тогда
	//			
	//				// Ввод начисленной амортизации.
	//				Проводка = Операция.Добавить();
	//				Проводка.Период      = Дата;
	//				Проводка.Организация = СтруктураШапкиДокумента.Организация;
	//				Проводка.Содержание  = "Ввод остаток по ОС (начисл. амортизация)";
	//				Проводка.Сумма       = СтрокаОС.НакопленнаяАмортизацияНУ;
	//				Проводка.СчетКт      = СтрокаОС.СчетАмортизацииНУ;
	//				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
	//			
	//			КонецЕсли;
	//			
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;

КонецПроцедуры // ФормированиеПроводокНал

Процедура ФормированиеПроводокПоРазницам( ТабОС, СтруктураШапкиДокумента)
	
	//ПоддержкаПБУ18 = ПрименениеПБУ18(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
	//
	//Если Не ПоддержкаПБУ18 Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Операция = Движения.Налоговый;
	//
	//Для Каждого СтрокаОС Из ТабОС Цикл
	//	   ТекущаяСтоимостьПР = СтрокаОС.ТекущаяСтоимостьПР;
	//	   ТекущаяСтоимостьВР = СтрокаОС.ТекущаяСтоимостьБУ - СтрокаОС.ТекущаяСтоимостьНУ - СтрокаОС.ТекущаяСтоимостьПР;
	//	   
	//		Если ТекущаяСтоимостьПР <> 0 Тогда

	//			Проводка = Операция.Добавить();
	//			Проводка.Период      = Дата;
	//			Проводка.Организация = СтруктураШапкиДокумента.Организация;
	//			Проводка.Содержание  = "Ввод остаток по ОС (ПР)";
	//			Проводка.Сумма       = ТекущаяСтоимостьПР;
	//			Проводка.СчетДт      = СтрокаОС.СчетУчетаНУ;
	//			УстановитьСубконто( Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
	//			Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
	//			
	//		КонецЕсли;
	//		
	//		Если ТекущаяСтоимостьВР <> 0 Тогда

	//			Проводка = Операция.Добавить();
	//			Проводка.Период      = Дата;
	//			Проводка.Организация = СтруктураШапкиДокумента.Организация;
	//			Проводка.Содержание  = "Ввод остаток по ОС (ВР)";
	//			Проводка.Сумма       = ТекущаяСтоимостьВР;
	//			Проводка.СчетДт      = СтрокаОС.СчетУчетаНУ;
	//			УстановитьСубконто( Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
	//			Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР;
	//			
	//		КонецЕсли;
	//		
	//	   НакопленнаяАмортизацияПР = СтрокаОС.НакопленнаяАмортизацияПР;
	//	   НакопленнаяАмортизацияВР = СтрокаОС.НакопленнаяАмортизацияБУ - СтрокаОС.НакопленнаяАмортизацияНУ - СтрокаОС.НакопленнаяАмортизацияПР;
	//		
	//		Если НакопленнаяАмортизацияПР <> 0 Тогда
	//			
	//			Проводка = Операция.Добавить();
	//			Проводка.Период      = Дата;
	//			Проводка.Организация = СтруктураШапкиДокумента.Организация;
	//			Проводка.Содержание  = "Ввод остаток по ОС (ПР по начисл. амортизация)";
	//			Проводка.Сумма       = НакопленнаяАмортизацияПР;
	//			Проводка.СчетКт      = СтрокаОС.СчетАмортизацииНУ;
	//			УстановитьСубконто( Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
	//			Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
	//			
	//		КонецЕсли;
	//		
	//		Если НакопленнаяАмортизацияВР <> 0 Тогда
	//			
	//			Проводка = Операция.Добавить();
	//			Проводка.Период      = Дата;
	//			Проводка.Организация = СтруктураШапкиДокумента.Организация;
	//			Проводка.Содержание  = "Ввод остаток по ОС (ВР по начисл. амортизация)";
	//			Проводка.Сумма       = НакопленнаяАмортизацияВР;
	//			Проводка.СчетКт      = СтрокаОС.СчетАмортизацииНУ;
	//			УстановитьСубконто( Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
	//			Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;
	//			
	//		КонецЕсли;
	//		
	//	
	//КонецЦикла;
	
КонецПроцедуры // ФормированиеПроводокПоРазницам

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистрам.
//
Процедура ДвиженияПоРегистрам( ТабОС, СтруктураШапкиДокумента, Заголовок)
	
	// Движение по регистрам общим для упр. и регл. учета
	//ДвижениеПоРегиструВыработкаОС( ТабОС, СтруктураШапкиДокумента, Заголовок);
	
	// Движение по упр. регистрам
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		ДвижениеПоРегиструНоменклатураОС( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСоставОС      ( ТабОС, СтруктураШапкиДокумента);
		
		ДвижениеПоРегиструАмортизацияУпр             ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструОССписанныеНаЗатратыУпр    ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструПервоначальныеСведенияОСУпр( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструМестонахождениеОСУпр       ( ТабОС, СтруктураШапкиДокумента);
	//	ДвижениеПоРегиструГрафикиАмортизацииОСУпр    ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструНачислениеАмортизацииУпр   ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструПараметрыАмортизацииУпр    ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСобытияОСУпр               ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСостоянияОСУпр             ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСпособыОтраженияРасходовУпр( ТабОС, СтруктураШапкиДокумента);
	КонецЕсли;
	
	// Движение по регл. регистрам
	//Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
	//	
	//	ДвижениеПоРегиструАмортизацияБух             ( ТабОС, СтруктураШапкиДокумента);
	//	ДвижениеПоРегиструОССписанныеНаЗатратыБух    ( ТабОС, СтруктураШапкиДокумента);
	//	ДвижениеПоРегиструПервоначальныеСведенияОСБух( ТабОС, СтруктураШапкиДокумента);
	//	ДвижениеПоРегиструМестонахождениеОСБух       ( ТабОС, СтруктураШапкиДокумента);
	//	ДвижениеПоРегиструГрафикиАмортизацииОСБух    ( ТабОС, СтруктураШапкиДокумента);
	//	ДвижениеПоРегиструНачислениеАмортизацииБух   ( ТабОС, СтруктураШапкиДокумента);
	//	ДвижениеПоРегиструПараметрыАмортизацииБух    ( ТабОС, СтруктураШапкиДокумента);
	//	ДвижениеПоРегиструСобытияОСБух               ( ТабОС, СтруктураШапкиДокумента);
	//	ДвижениеПоРегиструСостоянияОСБух			 ( ТабОС, СтруктураШапкиДокумента);
	//	ДвижениеПоРегиструСпособыОтраженияРасходовБух( ТабОС, СтруктураШапкиДокумента);
	//	ДвижениеПоРегиструСчетаУчетаОСБух            ( ТабОС, СтруктураШапкиДокумента);
	//	
	//	ФормированиеПроводокБух(ТабОС, СтруктураШапкиДокумента);
	//	
	//КонецЕсли;
	//		
	//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
	//		
	//	ДвижениеПоРегиструАмортизацияНал              ( ТабОС, СтруктураШапкиДокумента);
	//	ДвижениеПоРегиструПервоначальныеСведенияОСНал ( ТабОС, СтруктураШапкиДокумента);
	//	ДвижениеПоРегиструНачислениеАмортизацииНал    ( ТабОС, СтруктураШапкиДокумента);
	//	ДвижениеПоРегиструПараметрыАмортизацииНал     ( ТабОС, СтруктураШапкиДокумента);
	//	ДвижениеПоРегиструСпособыОтраженияРасходовНал ( ТабОС, СтруктураШапкиДокумента);
	//	ДвижениеПоРегиструСчетаУчетаОСНал             ( ТабОС, СтруктураШапкиДокумента);
	//	ДвижениеПоРегиструАмортизацияПоБазСтоимостиНал( ТабОС, СтруктураШапкиДокумента);
	//	ДвижениеПоРегиструСпецКоэффициентНал          ( ТабОС, СтруктураШапкиДокумента);
	//		
	//	ФормированиеПроводокНал(ТабОС, СтруктураШапкиДокумента);
	//	ФормированиеПроводокПоРазницам(ТабОС, СтруктураШапкиДокумента);
	//		
	//ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда

	//	ДвижениеПоРегиструПервоначальныеСведенияОСУСН( ТабОС, СтруктураШапкиДокумента);
	//		
	//КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	//ОчиститьНеиспользуемыеРеквизиты( ЭтотОбъект, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	//ОчиститьНеиспользуемыеРеквизиты( ЭтотОбъект, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "ОС");

	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
		
	Если НЕ Отказ Тогда
		
		обЗаписатьПротоколИзменений(ЭтотОбъект);
		
	КонецЕсли; 


КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ,РежимПроведения)

	
	Если мУдалятьДвижения Тогда
		УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	ТабОС = ОС.Выгрузить();
	
	// Проверим правильность заполнения документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабЧасти(РежимПроведения, ТабОС, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам( ТабОС, СтруктураШапкиДокумента, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)

	
	УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, ложь);

КонецПроцедуры // ОбработкаУдаленияПроведения

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	//ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мФормаДокумента = Неопределено;