 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура проверяет наличие строк с одинаковыми контрагентами в табличной части
//
// Параметры
//  Отказ - булево
//
// Возвращаемое значение:
//   НЕТ
//
Процедура ПроверитьТабличнуюЧасть(Отказ)

	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаКонтрагентов.Контрагент             КАК Контрагент,
	|	КОЛИЧЕСТВО(ТаблицаКонтрагентов.Контрагент) КАК Количество
	|
	|ИЗ
	|	Документ.ABCКлассификацияПокупателей.ТаблицаРаспределенияКонтрагентов КАК ТаблицаКонтрагентов
	|
	|ГДЕ
	|	ТаблицаКонтрагентов.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаКонтрагентов.Контрагент
	|";
	
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	СписокКонтрагентов = "";
	Для каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
		Если СтрокаТаблицы.Количество > 1 Тогда
			СписокКонтрагентов = СписокКонтрагентов + Символы.ПС + СтрокаТаблицы.Контрагент;
		КонецЕсли; 
	КонецЦикла; 
	
	Если НЕ ПустаяСтрока(СписокКонтрагентов) Тогда
		Отказ = Истина;
		ОшибкаПриПроведении("Найдены строки с повторяющимися контрагентами!" + СписокКонтрагентов, Отказ);
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьТабличнуюЧасть()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, Режим)
	
	ПроверитьТабличнуюЧасть(Отказ);
	
	Для Каждого ТекСтрокаТаблицаРаспределенияКонтрагентов Из ТаблицаРаспределенияКонтрагентов Цикл
		Движение = Движения.ABCКлассификацияПокупателей.Добавить();
		Движение.Период = Дата;
		Движение.Контрагент = ТекСтрокаТаблицаРаспределенияКонтрагентов.Контрагент;
		Движение.Подразделение = Подразделение;
		Движение.ABCКлассПокупателя = ТекСтрокаТаблицаРаспределенияКонтрагентов.ABCКлассификация;
	КонецЦикла;

	Попытка
		Движения.ABCКлассификацияПокупателей.Записать();
	Исключение
		Отказ = Истина;
		ОшибкаПриПроведении(ОписаниеОшибки(), Отказ);
	КонецПопытки;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 

КонецПроцедуры

Процедура ЗаполнитьКлассВсоответствииСПродажамиВнутриПодразделения() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаКонца", КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ПустойДоговор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойABCКласс", Перечисления.ABCКлассификация.ПустаяСсылка());
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ABCКлассификацияПокупателей.ABCКлассПокупателя ЕСТЬ NULL 
	               |			ТОГДА &ПустойABCКласс
	               |		ИНАЧЕ ABCКлассификацияПокупателей.ABCКлассПокупателя
	               |	КОНЕЦ КАК ABCКлассПокупателя,
	               |	ПродажиКомпанииОбороты.ДоговорКонтрагента.Владелец КАК Контрагент,
	               |	ПродажиКомпанииОбороты.ДоговорКонтрагента.Владелец.ОсновнойМенеджерКонтрагента КАК Менеджер,
	               |	СУММА(ПродажиКомпанииОбороты.СтоимостьОборот) КАК Сумма
	               |ИЗ
	               |	РегистрНакопления.Продажи.Обороты(
	               |			&ДатаНачала,
	               |			&ДатаКонца,
	               |			,
	               |			ДоговорКонтрагента <> &ПустойДоговор
	               |				И ДоговорКонтрагента.ОтветственноеЛицо.ОсновноеПодразделение = &Подразделение) КАК ПродажиКомпанииОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ABCКлассификацияПокупателей.СрезПоследних(&ДатаКонца, ) КАК ABCКлассификацияПокупателей
	               |		ПО (ABCКлассификацияПокупателей.Контрагент = ПродажиКомпанииОбороты.ДоговорКонтрагента.Владелец)
	               |			И ПродажиКомпанииОбороты.ДоговорКонтрагента.ОтветственноеЛицо.ОсновноеПодразделение = ABCКлассификацияПокупателей.Подразделение
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВЫБОР
	               |		КОГДА ABCКлассификацияПокупателей.ABCКлассПокупателя ЕСТЬ NULL 
	               |			ТОГДА &ПустойABCКласс
	               |		ИНАЧЕ ABCКлассификацияПокупателей.ABCКлассПокупателя
	               |	КОНЕЦ,
	               |	ПродажиКомпанииОбороты.ДоговорКонтрагента.Владелец,
	               |	ПродажиКомпанииОбороты.ДоговорКонтрагента.Владелец.ОсновнойМенеджерКонтрагента";

	ТаблицаРаспределенияКонтрагентов.Очистить();

	ТаблицаКонтрагентов = Запрос.Выполнить().Выгрузить();
	
	ТаблицаКонтрагентов.Сортировать("Сумма ВОЗР");

	ВсегоСумма = ТаблицаКонтрагентов.Итог("Сумма");

	СуммаВысокая = Окр((ВсегоСумма*ПолучитьЗначениеПараметраABC_КлассКлиента(Перечисления.ABCКлассификация.AКласс)/100),2);
	СуммаСредняя = Окр((ВсегоСумма*ПолучитьЗначениеПараметраABC_КлассКлиента(Перечисления.ABCКлассификация.BКласс)/100),2);
	СуммаНизкая = ВсегоСумма - СуммаВысокая - СуммаСредняя;

	СуммаНакопления = 0;
	Для каждого Строки Из ТаблицаКонтрагентов Цикл
		
		СуммаНакопления = СуммаНакопления + Строки.Сумма;
		
		НоваяСтрока = ТаблицаРаспределенияКонтрагентов.Добавить();
		
		Если СуммаНакопления <= СуммаНизкая Тогда
			Если СуммаНакопления < 0 Тогда
				НоваяСтрока.ABCКлассификация = Перечисления.ABCКлассификация.ПустаяСсылка();
				СуммаНакопления = 0;  
			Иначе
				НоваяСтрока.ABCКлассификация = Перечисления.ABCКлассификация.CКласс;
			КонецЕсли;
		ИначеЕсли СуммаНакопления <= (СуммаНизкая + СуммаСредняя) Тогда
			НоваяСтрока.ABCКлассификация = Перечисления.ABCКлассификация.BКласс;
		Иначе
			НоваяСтрока.ABCКлассификация = Перечисления.ABCКлассификация.AКласс;
		КонецЕсли;
		
		НоваяСтрока.Контрагент = Строки.Контрагент;
		НоваяСтрока.ABCКлассификацияСтарая = Строки.ABCКлассПокупателя;
		НоваяСтрока.ЗначениеПараметра = Строки.Сумма;
		НоваяСтрока.МенеджерКонтрагента = Строки.Менеджер;
		
	КонецЦикла;

	СортироватьТЧ();
				   
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
// Процедура сортирует табличную часть
//
Процедура СортироватьТЧ() Экспорт

	ТаблицаРаспределенияКонтрагентов.Сортировать("ABCКлассификация ВОЗР, ЗначениеПараметра УБЫВ");

КонецПроцедуры

// Функция определяет параметр ABC_КлассКлиента контрагента
//
// Параметры
//  ABC_КлассКлиентаСсылка - ПеречислениеСсылка, для которой необходимо
//  определить значение параметра
//
// Возвращаемое значение:
//   ЗначениеПараметраABC_КлассКлиента - Число
//
Функция ПолучитьЗначениеПараметраABC_КлассКлиента(ABC_КлассКлиентаСсылка) Экспорт

	Если ABC_КлассКлиентаСсылка = Перечисления.ABCКлассификация.AКласс Тогда
		Возврат ПроцентAКласса;
	ИначеЕсли ABC_КлассКлиентаСсылка = Перечисления.ABCКлассификация.BКласс Тогда
		Возврат ПроцентBКласса;
	ИначеЕсли ABC_КлассКлиентаСсылка = Перечисления.ABCКлассификация.CКласс Тогда
		Возврат ПроцентCКласса;
	Иначе
		Возврат 0;
	КонецЕсли; 
	
КонецФункции // ПолучитьЗначениеПараметраABC_КлассКлиента()

