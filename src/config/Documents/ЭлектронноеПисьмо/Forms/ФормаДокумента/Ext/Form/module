
Перем мОбработкаТайпингаПредмет;
Перем мТекстТайпингаПредмет;
Перем мПоследнееЗначениеЭлементаТайпингаПредмет;

Перем мМассивКнопокРассмотрено;

Перем мТекущееРасширениеФайла;

Перем мРазделительАдресов;

Перем мЭтоНовый;

Перем мКопияТекстаПисьма;

Перем мКнопкаСкрытыеКопии;
Перем мКнопкаРедактирования;

Перем мСписокБыстрогоВыбораПолучателей;

Перем мСписокБыстрогоВыбораТемы;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура УстановитьОтборВложений()

	ВложенияПисьма.Отбор.Объект.Значение                      = Ссылка;
	ВложенияПисьма.Отбор.Объект.Использование                 = Истина;
	ВложенияПисьма.Отбор.ИДФайлаПочтовогоПисьма.Значение      = "";
	ВложенияПисьма.Отбор.ИДФайлаПочтовогоПисьма.Использование = Истина;
	
	Если НЕ ПометкаУдаления Тогда
		ВложенияПисьма.Отбор.ПометкаУдаления.Значение             = Ложь;
		ВложенияПисьма.Отбор.ПометкаУдаления.Использование        = Истина;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДоступностьПереключенияТипаТекстаПисьма()

	Если (СтатусПисьма = Перечисления.СтатусыПисем.Исходящее ИЛИ СтатусПисьма = Перечисления.СтатусыПисем.Сохраненное)
	   И (ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML ИЛИ ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками)Тогда
		Если НЕ ЗначениеНеЗаполнено(ИмяФайлаРедактированияХТМЛТекста) Тогда
			ЭлементыФормы.ДействияФормыПисьмоКОтправке.Кнопки.ИзменитьФорматТекста.Кнопки.ФорматТекстаHTML.Доступность         = Ложь;
			ЭлементыФормы.ДействияФормыПисьмоКОтправке.Кнопки.ИзменитьФорматТекста.Кнопки.ФорматТекстаПростойТекст.Доступность = Ложь;
		Иначе
			ЭлементыФормы.ДействияФормыПисьмоКОтправке.Кнопки.ИзменитьФорматТекста.Кнопки.ФорматТекстаHTML.Доступность         = Истина;
			ЭлементыФормы.ДействияФормыПисьмоКОтправке.Кнопки.ИзменитьФорматТекста.Кнопки.ФорматТекстаПростойТекст.Доступность = Истина;
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры

Процедура ПометкаКнопокФорматаТекстаПисьма()

	ЭлементыФормы.ДействияФормыПисьмоКОтправке.Кнопки.ИзменитьФорматТекста.Текст = "Формат текста (" + ?(ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками, Перечисления.ВидыТекстовЭлектронныхПисем.HTML, ВидТекстаПисьма) + ")";
	ЭлементыФормы.ДействияФормыПисьмоКОтправке.Кнопки.ИзменитьФорматТекста.Кнопки.ФорматТекстаHTML.Пометка = ((ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML) ИЛИ (ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками));
	ЭлементыФормы.ДействияФормыПисьмоКОтправке.Кнопки.ИзменитьФорматТекста.Кнопки.ФорматТекстаПростойТекст.Пометка = НЕ ((ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML) ИЛИ (ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками));
	
	ЭлементыФормы.ДействияФормыПисьмоКОтправке.Кнопки.РедактироватьВнешнимХТМЛРедактором.Доступность = (ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками ИЛИ ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML);

	ЭлементыФормы.ДействияФормыПисьмоКОтправке.Кнопки.РедактироватьВнешнимХТМЛРедактором.Пометка = НЕ ЗначениеНеЗаполнено(ИмяФайлаРедактированияХТМЛТекста);
	
КонецПроцедуры

Процедура УстановитьДоступностьГраницыКонтроляОтветаНаПисьмо()

	ЭлементыФормы.РассмотретьПосле.Доступность = НеРассмотрено;

КонецПроцедуры

Процедура ИзменитьРежимРедактированияТекстаИТемы()
	
	Если НЕ мКнопкаРедактирования.Пометка Тогда
	
		ВременноеЗначение = глСоответствиеТекстовЭлектронныхПисем.Получить(Ссылка);
		Если ВременноеЗначение <> Неопределено Тогда
			глСоответствиеТекстовЭлектронныхПисем.Удалить(Ссылка);
		КонецЕсли;
		
		Если ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML ИЛИ ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
			
			ТекстХТМЛ = ЭлементыФормы.ПолеHTMLДокумента.ПолучитьТекст();
			НовыйHTMLДокумент = Новый COMОбъект("HtmlFile");
			НовыйHTMLДокумент.open("text/html");
			НовыйHTMLДокумент.write(ТекстХТМЛ);
			НовыйHTMLДокумент.close();
			СтруктураВозврата = ПропарситьHTMLТекстКартинкаВ_ИД(НовыйHTMLДокумент, Ссылка, глСоответствиеТекстовЭлектронныхПисем);
			ТекстПисьма = СтруктураВозврата.ТекстПисьма;
			
			Если СтруктураВозврата.ТаблицаСоответствий.Количество() > 0 Тогда
			
				НачатьТранзакцию();
				Для каждого СтрокаТаблицы Из СтруктураВозврата.ТаблицаСоответствий Цикл
					НовыйОбъект = Справочники.ВложенияЭлектронныхПисем.СоздатьЭлемент();
					НовыйОбъект.Объект                 = Ссылка;
					НовыйОбъект.ИмяФайла               = СтрокаТаблицы.Файл.Имя;
					НовыйОбъект.Хранилище              = Новый ХранилищеЗначения(Новый ДвоичныеДанные(СтрокаТаблицы.Файл.ПолноеИмя), Новый СжатиеДанных());
					НовыйОбъект.ИДФайлаПочтовогоПисьма = СтрокаТаблицы.ИД;
					НовыйОбъект.Наименование           = СтрокаТаблицы.Наименование;
					Попытка
						НовыйОбъект.Записать();
					Исключение
						СообщитьОбОшибке(ОписаниеОшибки(),, Строка(ЭтотОбъект));
						Отказ = Истина;
						Прервать;
					КонецПопытки;
				КонецЦикла;
				Если Отказ <> Истина Тогда
					ЗафиксироватьТранзакцию();
				Иначе
					ОтменитьТранзакцию();
				КонецЕсли; 
			
			КонецЕсли; 
			
		Иначе
			
			ТекстПисьма = ЭлементыФормы.ПолеТекстовогоДокумента.ПолучитьТекст();
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	ЭлементыФормы.Тема.ТолькоПросмотр                    = НЕ мКнопкаРедактирования.Пометка;
	ЭлементыФормы.ПолеТекстовогоДокумента.ТолькоПросмотр = НЕ мКнопкаРедактирования.Пометка;
	
	ТекстHTML = ЭлементыФормы.ПолеHTMLДокумента.ПолучитьТекст();
	Если ЗначениеНеЗаполнено(ИмяФайлаРедактированияХТМЛТекста) Тогда
		ЭлементыФормы.ПолеHTMLДокумента.УстановитьРежим(?(мКнопкаРедактирования.Пометка, РежимПоляHTMLДокумента.Редактирование, РежимПоляHTMLДокумента.Просмотр));
	Иначе
		ЭлементыФормы.ПолеHTMLДокумента.УстановитьРежим(РежимПоляHTMLДокумента.Просмотр);
	КонецЕсли; 
	ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст(ТекстHTML);

КонецПроцедуры

// Процедура определяет список быстрого выбора темы,
// последние 10 ввеленных тем писем
// 
Процедура ЗаполнитьСписокБыстрогоВыбораТемы()

	мСписокБыстрогоВыбораТемы.Очистить();
	
	Если НЕ ЗначениеНеЗаполнено(УчетнаяЗапись) Тогда
		ВосстановленноеЗначение = ВосстановитьЗначение("СписокБыстрогоВыбораТемы_" + СокрЛП(УчетнаяЗапись.УникальныйИдентификатор()));
		Если ТипЗнч(ВосстановленноеЗначение) = Тип("СписокЗначений") Тогда
			мСписокБыстрогоВыбораТемы = ВосстановленноеЗначение;
		КонецЕсли; 
	КонецЕсли; 

	ЭлементыФормы.Тема.СписокВыбора = мСписокБыстрогоВыбораТемы.Скопировать();
	
КонецПроцедуры

// Процедура добавляет в список последних 10-ти тем писем
// новых.
//
Процедура ДобавитьВСписокБыстрогоВыбораТемы(Элемент)

	ДобавляемоеЗначение = Элемент.Значение;
	
	НайденныйЭлемент = мСписокБыстрогоВыбораТемы.НайтиПоЗначению(ДобавляемоеЗначение);
	Если НайденныйЭлемент <> Неопределено Тогда
		мСписокБыстрогоВыбораТемы.Удалить(НайденныйЭлемент);
	КонецЕсли;
	
	мСписокБыстрогоВыбораТемы.Вставить(0, ДобавляемоеЗначение);
	
	Пока мСписокБыстрогоВыбораТемы.Количество() > 10 Цикл
		мСписокБыстрогоВыбораТемы.Удалить(мСписокБыстрогоВыбораТемы.Количество() - 1);
	КонецЦикла;
	
	СохранитьСписокБыстрогоВыбораТемы();
	
	ЭлементыФормы.Тема.СписокВыбора = мСписокБыстрогоВыбораТемы.Скопировать();

КонецПроцедуры

// Процедура сохраняет текущий список последних тем писем.
//
Процедура СохранитьСписокБыстрогоВыбораТемы()

	Если НЕ ЗначениеНеЗаполнено(УчетнаяЗапись) Тогда
		СохранитьЗначение(("СписокБыстрогоВыбораТемы_" + СокрЛП(УчетнаяЗапись.УникальныйИдентификатор())), мСписокБыстрогоВыбораТемы.Скопировать());
	КонецЕсли; 

КонецПроцедуры

// Процедура определяет список быстрого выбора получателей,
// последние 10 ввеленных получателей писем
// 
Процедура ЗаполнитьСписокБыстрогоВыбораПолучателей()

	мСписокБыстрогоВыбораПолучателей.Очистить();
	
	Если НЕ ЗначениеНеЗаполнено(УчетнаяЗапись) Тогда
		ВосстановленноеЗначение = ВосстановитьЗначение("СписокБыстрогоВыбораПолучателей_" + СокрЛП(УчетнаяЗапись.УникальныйИдентификатор()));
		Если ТипЗнч(ВосстановленноеЗначение) = Тип("СписокЗначений") Тогда
			мСписокБыстрогоВыбораПолучателей = ВосстановленноеЗначение;
		КонецЕсли; 
	КонецЕсли; 

	ЭлементыФормы.Кому.СписокВыбора         = мСписокБыстрогоВыбораПолучателей.Скопировать();
	ЭлементыФормы.Копии.СписокВыбора        = мСписокБыстрогоВыбораПолучателей.Скопировать();
	ЭлементыФормы.СкрытыеКопии.СписокВыбора = мСписокБыстрогоВыбораПолучателей.Скопировать();
	
КонецПроцедуры

// Процедура добавляет в список последних 10-ти получателей писем
// новых.
//
Процедура ДобавитьВСписокБыстрогоВыбораПолучателей(Элемент)

	ДобавляемоеЗначение = Элемент.Значение;
	
	НайденныйЭлемент = мСписокБыстрогоВыбораПолучателей.НайтиПоЗначению(ДобавляемоеЗначение);
	Если НайденныйЭлемент <> Неопределено Тогда
		мСписокБыстрогоВыбораПолучателей.Удалить(НайденныйЭлемент);
	КонецЕсли;
	
	мСписокБыстрогоВыбораПолучателей.Вставить(0, ДобавляемоеЗначение);
	
	Пока мСписокБыстрогоВыбораПолучателей.Количество() > 10 Цикл
		мСписокБыстрогоВыбораПолучателей.Удалить(мСписокБыстрогоВыбораПолучателей.Количество() - 1);
	КонецЦикла;
	
	СохранитьСписокБыстрогоВыбораПолучателей();
	
	ЭлементыФормы.Кому.СписокВыбора         = мСписокБыстрогоВыбораПолучателей.Скопировать();
	ЭлементыФормы.Копии.СписокВыбора        = мСписокБыстрогоВыбораПолучателей.Скопировать();
	ЭлементыФормы.СкрытыеКопии.СписокВыбора = мСписокБыстрогоВыбораПолучателей.Скопировать();

КонецПроцедуры

// Процедура сохраняет текущий список последних получателей писем.
//
Процедура СохранитьСписокБыстрогоВыбораПолучателей()

	Если НЕ ЗначениеНеЗаполнено(УчетнаяЗапись) Тогда
		СохранитьЗначение(("СписокБыстрогоВыбораПолучателей_" + СокрЛП(УчетнаяЗапись.УникальныйИдентификатор())), мСписокБыстрогоВыбораПолучателей.Скопировать());
	КонецЕсли; 

КонецПроцедуры

// Процедура определяет и устанавливает необходимую страницу для
// отображения вложений письма
//
Процедура ОпределитьЗакладкуВложений()

	Если (СтатусПисьма = Перечисления.СтатусыПисем.Отправленное ИЛИ СтатусПисьма = Перечисления.СтатусыПисем.Полученное) И НЕ мРежимБезЗаписи Тогда
		Если НЕ ЕстьВложения Тогда
			ЭлементыФормы.ПанельПисьма.Страницы.ВложенияНовые.Видимость       = Ложь;
			ЭлементыФормы.ПанельПисьма.Страницы.ВложенияСохраненные.Видимость = Ложь;
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	
	ТекЗакладка   = ЭлементыФормы.ПанельПисьма.ТекущаяСтраница;
	ТекКолонкаТЗ  = ЭлементыФормы.ВложенияПисьмаТЗ.ТекущаяКолонка;
	Если ЭлементыФормы.ВложенияПисьмаТЗ.ТекущиеДанные <> Неопределено Тогда
		ТекИмяФайлаТЗ = ЭлементыФормы.ВложенияПисьмаТЗ.ТекущиеДанные.ИмяФайла;
	КонецЕсли; 
	
	ЭлементыФормы.ПанельПисьма.Страницы.ВложенияНовые.Видимость       = ЭтоНовый();
	ЭлементыФормы.ПанельПисьма.Страницы.ВложенияСохраненные.Видимость = НЕ ЭтоНовый();
	
	Если ТекЗакладка = ЭлементыФормы.ПанельПисьма.Страницы.ВложенияНовые Тогда
		ЭлементыФормы.ПанельПисьма.ТекущаяСтраница = ЭлементыФормы.ПанельПисьма.Страницы.ВложенияСохраненные;
		Если ТекИмяФайлаТЗ <> Неопределено И НЕ ЭтоНовый() Тогда
			Выборка = Справочники.ВложенияЭлектронныхПисем.Выбрать(,, Новый Структура("Объект", Ссылка));
			НайденнаяСсылка = Неопределено;
			Пока Выборка.Следующий() Цикл
				Если Выборка.ПометкаУдаления
				 ИЛИ НЕ ПустаяСтрока(Выборка.ИДФайлаПочтовогоПисьма)
				 ИЛИ Выборка.ИмяФайла <> ТекИмяФайлаТЗ Тогда
					Продолжить;
				Иначе
					НайденнаяСсылка = Выборка.Ссылка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НайденнаяСсылка <> Неопределено Тогда
				Попытка
					ЭлементыФормы.ВложенияПисьма.ТекущаяСтрока = НайденнаяСсылка;
				Исключение
				КонецПопытки;
			КонецЕсли; 
		КонецЕсли; 
		Если ТекКолонкаТЗ <> Неопределено И ЭлементыФормы.ВложенияПисьма.ТекущаяСтрока <> Неопределено Тогда
			Попытка
				ЭлементыФормы.ВложенияПисьма.ТекущаяКолонка = ЭлементыФормы.ВложенияПисьма.Колонки[ТекКолонкаТЗ.Имя];
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры

// Процедура разбирает строку получателей письма, и определяет объекты-получатели
//
// Параметры
//  Текст - Строка, которую надо разобрать для определения корректности ввода данных
//          поиска объектов-получателей
//  Значение - Строка, значение элемента управления, в которое необходимо записать результирующую строку
//  ТЧ - ТабличнаяЧасть, в которую записываются раздельно адрес электронной почты и представление получателя/отправителя
//
//  Возвращаемое значение:
//   ТаблицаЗначений, разобранные значения строки в виде таблицы значений
//
Функция ПропарситьСтроку(Текст, Значение, ТЧ, ПроверятьЗначения = Истина) Экспорт

	ТЧ.Очистить();
	
	ТаблицаОбъектовТекста = Новый ТаблицаЗначений;
	ТаблицаОбъектовТекста.Колонки.Добавить("Объект");
	ТаблицаОбъектовТекста.Колонки.Добавить("АдресЭлектроннойПочты");
	ТаблицаОбъектовТекста.Колонки.Добавить("ПредставлениеОбъекта");
	
	ТаблицаАдресов = Новый ТаблицаЗначений;
	ТаблицаАдресов.Колонки.Добавить("НомерЭлемента");
	ТаблицаАдресов.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	ТаблицаАдресов.Колонки.Добавить("ПредставлениеОбъекта", Новый ОписаниеТипов("Строка"));
	ТаблицаАдресов.Колонки.Добавить("АдресЭлектроннойПочты", Новый ОписаниеТипов("Строка"));
	ТаблицаАдресов.Колонки.Добавить("Объект");
	
	ТаблицаИмен    = Новый ТаблицаЗначений;
	ТаблицаИмен.Колонки.Добавить("НомерЭлемента");
	ТаблицаИмен.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	ТаблицаИмен.Колонки.Добавить("ПредставлениеОбъекта", Новый ОписаниеТипов("Строка"));
	ТаблицаИмен.Колонки.Добавить("АдресЭлектроннойПочты", Новый ОписаниеТипов("Строка"));
	ТаблицаИмен.Колонки.Добавить("Объект");
	
	а = СтрДлина(Текст);
	Пока а > 0 Цикл
		Если Сред(Текст, а, 1) <> мРазделительАдресов И НЕ ПустаяСтрока(Сред(Текст, а, 1)) Тогда
			Прервать;
		КонецЕсли; 
		а = а - 1;
	КонецЦикла;
	
	Текст = Лев(Текст, а);
	
	ПозицияПервогоСимвола = 1;
	НомерЭлемента = 0;
	Для а = 1 По СтрДлина(Текст) Цикл
	
		Если Сред(Текст, а, 1) <> мРазделительАдресов Тогда
			Продолжить;
		КонецЕсли;
		
		ПодстрокаЭлемента = СокрЛП(Сред(Текст, ПозицияПервогоСимвола, (а - ПозицияПервогоСимвола)));
		Если НЕ ПустаяСтрока(ПодстрокаЭлемента) Тогда
			НомерЭлемента = НомерЭлемента + 1;
			Если СтрЧислоВхождений(ПодстрокаЭлемента, "@") > 0 Тогда
				Если (СтрЧислоВхождений(ПодстрокаЭлемента, "<") = 1 ИЛИ СтрЧислоВхождений(ПодстрокаЭлемента, "[") = 1)
				   И (СтрЧислоВхождений(ПодстрокаЭлемента, ">") = 1 ИЛИ СтрЧислоВхождений(ПодстрокаЭлемента, "]") = 1) Тогда
					// Считаем что это адрес уже был сгенерен программой
					НачалоАдреса = Макс(Найти(ПодстрокаЭлемента, "<"), Найти(ПодстрокаЭлемента, "[")) + 1;
					КонецАдреса  = Макс(Найти(ПодстрокаЭлемента, ">"), Найти(ПодстрокаЭлемента, "]")) - 1;
					СтрокаТаблицы = ТаблицаАдресов.Добавить();
					СтрокаТаблицы.ПредставлениеОбъекта  = СокрЛП(Лев(ПодстрокаЭлемента, (НачалоАдреса - 2)));
					СтрокаТаблицы.АдресЭлектроннойПочты = СокрЛП(Сред(ПодстрокаЭлемента, НачалоАдреса, (КонецАдреса - НачалоАдреса + 1)));
				ИначеЕсли СтрЧислоВхождений(СокрЛП(ПодстрокаЭлемента), " ") > 0 Тогда
					// Найдем начало и окончание именно адреса, т.е. пробелы или окончание справа и слева от собачки
					ПозицияСобаки = Найти(ПодстрокаЭлемента, "@");
					// Пойдем влево
					ПозицияПервогоПробела = 0;
					а = ПозицияСобаки - 1;
					Пока а > 0 Цикл
						Если Сред(ПодстрокаЭлемента, а, 1) = " " Тогда
							ПозицияПервогоПробела = а;
							Прервать;
						КонецЕсли;
						а = а - 1;
					КонецЦикла;
					// Пойдем вправо
					ПозицияВторогоПробела = 0;
					а = ПозицияСобаки + 1;
					Пока а <= СтрДлина(ПодстрокаЭлемента) Цикл
						Если Сред(ПодстрокаЭлемента, а, 1) = " " Тогда
							ПозицияВторогоПробела = а;
							Прервать;
						КонецЕсли;
						а = а + 1;
					КонецЦикла;
					
					СтрокаТаблицы = ТаблицаАдресов.Добавить();
					Если ПозицияПервогоПробела = 0 И ПозицияВторогоПробела = 0 Тогда
						СтрокаТаблицы.АдресЭлектроннойПочты = ПодстрокаЭлемента;
					ИначеЕсли ПозицияВторогоПробела = 0 Тогда
						СтрокаТаблицы.ПредставлениеОбъекта = Сред(ПодстрокаЭлемента, 1, (ПозицияПервогоПробела - 1));
						СтрокаТаблицы.АдресЭлектроннойПочты = Сред(ПодстрокаЭлемента, (ПозицияПервогоПробела + 1));
					ИначеЕсли ПозицияПервогоПробела = 0 Тогда
						СтрокаТаблицы.ПредставлениеОбъекта = Сред(ПодстрокаЭлемента, (ПозицияВторогоПробела + 1));
						СтрокаТаблицы.АдресЭлектроннойПочты = Сред(ПодстрокаЭлемента, 1, (ПозицияВторогоПробела- 1));
					Иначе
						СтрокаТаблицы.ПредставлениеОбъекта = Сред(ПодстрокаЭлемента, 1, (ПозицияПервогоПробела - 1)) + " " + Сред(ПодстрокаЭлемента, (ПозицияВторогоПробела + 1));
						СтрокаТаблицы.АдресЭлектроннойПочты = Сред(ПодстрокаЭлемента, (ПозицияПервогоПробела + 1), (ПозицияВторогоПробела - ПозицияПервогоПробела - 1));
					КонецЕсли; 
					
				Иначе
					СтрокаТаблицы = ТаблицаАдресов.Добавить();
					СтрокаТаблицы.АдресЭлектроннойПочты = ПодстрокаЭлемента;
				КонецЕсли; 
			Иначе
				СтрокаТаблицы = ТаблицаИмен.Добавить();
				СтрокаТаблицы.ПредставлениеОбъекта = ПодстрокаЭлемента;
			КонецЕсли; 
			СтрокаТаблицы.НомерЭлемента = НомерЭлемента;
		КонецЕсли;
		
		Если НЕ (а + 1 > СтрДлина(Текст)) Тогда
			ПозицияПервогоСимвола = а + 1;
		Иначе
			ПозицияПервогоСимвола = СтрДлина(Текст);
		КонецЕсли; 
	
	КонецЦикла;
	
	// Проверим последний элемент в строке
	ПодстрокаЭлемента = СокрЛП(Сред(Текст, ПозицияПервогоСимвола));
	Если НЕ ПустаяСтрока(ПодстрокаЭлемента) Тогда
		НомерЭлемента = НомерЭлемента + 1;
		Если СтрЧислоВхождений(ПодстрокаЭлемента, "@") > 0 Тогда
			Если (СтрЧислоВхождений(ПодстрокаЭлемента, "<") = 1 ИЛИ СтрЧислоВхождений(ПодстрокаЭлемента, "[") = 1)
			   И (СтрЧислоВхождений(ПодстрокаЭлемента, ">") = 1 ИЛИ СтрЧислоВхождений(ПодстрокаЭлемента, "]") = 1) Тогда
				НачалоАдреса = Макс(Найти(ПодстрокаЭлемента, "<"), Найти(ПодстрокаЭлемента, "[")) + 1;
				КонецАдреса  = Макс(Найти(ПодстрокаЭлемента, ">"), Найти(ПодстрокаЭлемента, "]")) - 1;
				СтрокаТаблицы = ТаблицаАдресов.Добавить();
				СтрокаТаблицы.ПредставлениеОбъекта  = СокрЛП(Лев(ПодстрокаЭлемента, (НачалоАдреса - 2)));
				СтрокаТаблицы.АдресЭлектроннойПочты = СокрЛП(Сред(ПодстрокаЭлемента, НачалоАдреса, (КонецАдреса - НачалоАдреса + 1)));
			ИначеЕсли СтрЧислоВхождений(СокрЛП(ПодстрокаЭлемента), " ") > 0 Тогда
				// Найдем начало и окончание именно адреса, т.е. пробелы или окончание справа и слева от собачки
				ПозицияСобаки = Найти(ПодстрокаЭлемента, "@");
				// Пойдем влево
				ПозицияПервогоПробела = 0;
				а = ПозицияСобаки - 1;
				Пока а > 0 Цикл
					Если Сред(ПодстрокаЭлемента, а, 1) = " " Тогда
						ПозицияПервогоПробела = а;
						Прервать;
					КонецЕсли;
					а = а - 1;
				КонецЦикла;
				// Пойдем вправо
				ПозицияВторогоПробела = 0;
				а = ПозицияСобаки + 1;
				Пока а <= СтрДлина(ПодстрокаЭлемента) Цикл
					Если Сред(ПодстрокаЭлемента, а, 1) = " " Тогда
						ПозицияВторогоПробела = а;
						Прервать;
					КонецЕсли;
					а = а + 1;
				КонецЦикла;
				
				СтрокаТаблицы = ТаблицаАдресов.Добавить();
				Если ПозицияПервогоПробела = 0 И ПозицияВторогоПробела = 0 Тогда
					СтрокаТаблицы.АдресЭлектроннойПочты = ПодстрокаЭлемента;
				ИначеЕсли ПозицияВторогоПробела = 0 Тогда
					СтрокаТаблицы.ПредставлениеОбъекта = Сред(ПодстрокаЭлемента, 1, (ПозицияПервогоПробела - 1));
					СтрокаТаблицы.АдресЭлектроннойПочты = Сред(ПодстрокаЭлемента, (ПозицияПервогоПробела + 1));
				ИначеЕсли ПозицияПервогоПробела = 0 Тогда
					СтрокаТаблицы.ПредставлениеОбъекта = Сред(ПодстрокаЭлемента, (ПозицияВторогоПробела + 1));
					СтрокаТаблицы.АдресЭлектроннойПочты = Сред(ПодстрокаЭлемента, 1, (ПозицияВторогоПробела- 1));
				Иначе
					СтрокаТаблицы.ПредставлениеОбъекта = Сред(ПодстрокаЭлемента, 1, (ПозицияПервогоПробела - 1)) + " " + Сред(ПодстрокаЭлемента, (ПозицияВторогоПробела + 1));
					СтрокаТаблицы.АдресЭлектроннойПочты = Сред(ПодстрокаЭлемента, (ПозицияПервогоПробела + 1), (ПозицияВторогоПробела - ПозицияПервогоПробела - 1));
				КонецЕсли; 
				
			Иначе
				СтрокаТаблицы = ТаблицаАдресов.Добавить();
				СтрокаТаблицы.АдресЭлектроннойПочты = ПодстрокаЭлемента;
			КонецЕсли; 
		Иначе
			СтрокаТаблицы = ТаблицаИмен.Добавить();
			СтрокаТаблицы.ПредставлениеОбъекта = ПодстрокаЭлемента;
		КонецЕсли; 
		СтрокаТаблицы.НомерЭлемента = НомерЭлемента;
	КонецЕсли;
	
	Если ПроверятьЗначения Тогда
		
		// Найдем объекты по адресу
		Если ТаблицаАдресов.Количество() > 0 Тогда
			ТаблицаОбъектов = ПоискВКонтактнойИнформации(ТаблицаАдресов);
			Если ТаблицаОбъектов.Количество() > 0 Тогда
				Для каждого СтрокиТаблицы Из ТаблицаАдресов Цикл
					НайденныеСтрокиТаблицы = Новый Массив;
					Для каждого СтрокаТаблицыОбъектов Из ТаблицаОбъектов Цикл
						Если НЕ ПустаяСтрока(СтрокиТаблицы.ПредставлениеОбъекта) И НЕ ПустаяСтрока(СтрокиТаблицы.АдресЭлектроннойПочты) Тогда
							Если ВРег(Лев(СтрокаТаблицыОбъектов.Представление, СтрДлина(СтрокиТаблицы.АдресЭлектроннойПочты))) = ВРег(СтрокиТаблицы.АдресЭлектроннойПочты)
							   И (ВРег(Лев(СтрокаТаблицыОбъектов.ПредставлениеОбъекта, СтрДлина(СтрокиТаблицы.ПредставлениеОбъекта))) = ВРег(СтрокиТаблицы.ПредставлениеОбъекта)
							 ИЛИ ВРег(Лев(СтрокаТаблицыОбъектов.ПредставлениеОбъекта, СтрДлина(СтрокиТаблицы.ПредставлениеОбъекта))) = ВРег(СтрокиТаблицы.ПредставлениеОбъекта)) Тогда
								НайденныеСтрокиТаблицы.Добавить(СтрокаТаблицыОбъектов);
							КонецЕсли; 
						ИначеЕсли ПустаяСтрока(СтрокиТаблицы.ПредставлениеОбъекта) И НЕ ПустаяСтрока(СтрокиТаблицы.АдресЭлектроннойПочты) Тогда
							Если ВРег(Лев(СтрокаТаблицыОбъектов.Представление, СтрДлина(СтрокиТаблицы.АдресЭлектроннойПочты))) = ВРег(СтрокиТаблицы.АдресЭлектроннойПочты) Тогда
								НайденныеСтрокиТаблицы.Добавить(СтрокаТаблицыОбъектов);
							КонецЕсли; 
						ИначеЕсли НЕ ПустаяСтрока(СтрокиТаблицы.ПредставлениеОбъекта) И ПустаяСтрока(СтрокиТаблицы.АдресЭлектроннойПочты) Тогда
							Если ВРег(Лев(СтрокаТаблицыОбъектов.ПредставлениеОбъекта, СтрДлина(СтрокиТаблицы.ПредставлениеОбъекта))) = ВРег(СтрокиТаблицы.ПредставлениеОбъекта) Тогда
								НайденныеСтрокиТаблицы.Добавить(СтрокаТаблицыОбъектов);
							КонецЕсли; 
						КонецЕсли; 
					КонецЦикла; 
					Если НайденныеСтрокиТаблицы.Количество() = 1 Тогда
						СтрокиТаблицы.Представление = СтрЗаменить(НайденныеСтрокиТаблицы[0].ПредставлениеОбъекта, мРазделительАдресов, "") + " <" + НайденныеСтрокиТаблицы[0].Представление + ">";
						НоваяСтрокаОбъектовТекста = ТаблицаОбъектовТекста.Добавить();
						НоваяСтрокаОбъектовТекста.Объект                = НайденныеСтрокиТаблицы[0].Объект;
						НоваяСтрокаОбъектовТекста.ПредставлениеОбъекта  = СтрЗаменить(НайденныеСтрокиТаблицы[0].ПредставлениеОбъекта, мРазделительАдресов, "");
						НоваяСтрокаОбъектовТекста.АдресЭлектроннойПочты = НайденныеСтрокиТаблицы[0].Представление;
						НоваяСтрокаТЧ = ТЧ.Добавить();
						НоваяСтрокаТЧ.АдресЭлектроннойПочты = НайденныеСтрокиТаблицы[0].Представление;
						НоваяСтрокаТЧ.Представление         = СтрЗаменить(НайденныеСтрокиТаблицы[0].ПредставлениеОбъекта, мРазделительАдресов, "");
					ИначеЕсли НайденныеСтрокиТаблицы.Количество() > 1 И ЗначениеНеЗаполнено(СтрокиТаблицы.ПредставлениеОбъекта) Тогда
						СтрокиТаблицы.Представление = НайденныеСтрокиТаблицы[0].Представление;
						НоваяСтрокаОбъектовТекста = ТаблицаОбъектовТекста.Добавить();
						НоваяСтрокаОбъектовТекста.АдресЭлектроннойПочты = НайденныеСтрокиТаблицы[0].Представление;
						НоваяСтрокаТЧ = ТЧ.Добавить();
						НоваяСтрокаТЧ.АдресЭлектроннойПочты = НайденныеСтрокиТаблицы[0].Представление;
					Иначе
						Если ПустаяСтрока(СтрокиТаблицы.ПредставлениеОбъекта) Тогда
							СтрокиТаблицы.Представление = СтрокиТаблицы.АдресЭлектроннойПочты;
						Иначе
							СтрокиТаблицы.Представление = СтрокиТаблицы.ПредставлениеОбъекта + " <" + СтрокиТаблицы.АдресЭлектроннойПочты + ">";
						КонецЕсли; 
						НоваяСтрокаОбъектовТекста = ТаблицаОбъектовТекста.Добавить();
						НоваяСтрокаОбъектовТекста.АдресЭлектроннойПочты = СтрокиТаблицы.АдресЭлектроннойПочты;
						НоваяСтрокаОбъектовТекста.ПредставлениеОбъекта  = СтрокиТаблицы.ПредставлениеОбъекта;
						НоваяСтрокаТЧ = ТЧ.Добавить();
						НоваяСтрокаТЧ.АдресЭлектроннойПочты = СтрокиТаблицы.АдресЭлектроннойПочты;
						НоваяСтрокаТЧ.Представление         = СтрокиТаблицы.ПредставлениеОбъекта;
					КонецЕсли; 
				КонецЦикла;
			Иначе
				Для каждого СтрокаТаблицыАдресов Из ТаблицаАдресов Цикл
					Если ПустаяСтрока(СтрокаТаблицыАдресов.АдресЭлектроннойПочты) И ПустаяСтрока(СтрокаТаблицыАдресов.ПредставлениеОбъекта) Тогда
						Продолжить;
					ИначеЕсли НЕ ПустаяСтрока(СтрокаТаблицыАдресов.АдресЭлектроннойПочты) И ПустаяСтрока(СтрокаТаблицыАдресов.ПредставлениеОбъекта) Тогда
						НоваяСтрокаОбъектовТекста = ТаблицаОбъектовТекста.Добавить();
						НоваяСтрокаОбъектовТекста.АдресЭлектроннойПочты = СтрокаТаблицыАдресов.АдресЭлектроннойПочты;
						НоваяСтрокаТЧ = ТЧ.Добавить();
						НоваяСтрокаТЧ.АдресЭлектроннойПочты = СтрокаТаблицыАдресов.АдресЭлектроннойПочты;
						СтрокаТаблицыАдресов.Представление = СтрокаТаблицыАдресов.АдресЭлектроннойПочты;
					Иначе
						НоваяСтрокаОбъектовТекста = ТаблицаОбъектовТекста.Добавить();
						НоваяСтрокаОбъектовТекста.ПредставлениеОбъекта = СтрокаТаблицыАдресов.ПредставлениеОбъекта;
						НоваяСтрокаОбъектовТекста.АдресЭлектроннойПочты = СтрокаТаблицыАдресов.АдресЭлектроннойПочты;
						НоваяСтрокаТЧ = ТЧ.Добавить();
						НоваяСтрокаТЧ.Представление = СтрокаТаблицыАдресов.ПредставлениеОбъекта;
						НоваяСтрокаТЧ.АдресЭлектроннойПочты = СтрокаТаблицыАдресов.АдресЭлектроннойПочты;
						СтрокаТаблицыАдресов.Представление = СтрокаТаблицыАдресов.ПредставлениеОбъекта + " <" + СтрокаТаблицыАдресов.АдресЭлектроннойПочты + ">";
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли; 
		КонецЕсли; 
		
		// Найдем объекты по имени или адресу, когда не ясно что именно пользователь ввел, потому что нет собаки
		Если ТаблицаИмен.Количество() > 0 Тогда
			ТаблицаОбъектов = ПоискВКонтактнойИнформации(ТаблицаИмен, Истина);
			Для каждого СтрокиТаблицы Из ТаблицаИмен Цикл
				СтрокиТаблицыОбъектов = Новый Массив;
				Для каждого СтрокаТаблицыОбъектов Из ТаблицаОбъектов Цикл
					Если Врег(Лев(СтрокаТаблицыОбъектов.ПредставлениеОбъекта, СтрДлина(СтрокиТаблицы.ПредставлениеОбъекта))) = Врег(СтрокиТаблицы.ПредставлениеОбъекта)
					 ИЛИ Врег(Лев(СтрокаТаблицыОбъектов.Представление, СтрДлина(СтрокиТаблицы.ПредставлениеОбъекта))) = Врег(СтрокиТаблицы.ПредставлениеОбъекта) Тогда
						СтрокиТаблицыОбъектов.Добавить(СтрокаТаблицыОбъектов);
					КонецЕсли; 
				КонецЦикла; 
				Если СтрокиТаблицыОбъектов.Количество() = 1 Тогда
					СтрокиТаблицы.Представление = СтрЗаменить(СтрокиТаблицыОбъектов[0].ПредставлениеОбъекта, мРазделительАдресов, "") + " <" + СтрокиТаблицыОбъектов[0].Представление + ">";
					НоваяСтрокаОбъектовТекста = ТаблицаОбъектовТекста.Добавить();
					НоваяСтрокаОбъектовТекста.Объект                = СтрокиТаблицыОбъектов[0].Объект;
					НоваяСтрокаОбъектовТекста.АдресЭлектроннойПочты = СтрокиТаблицыОбъектов[0].Представление;
					НоваяСтрокаОбъектовТекста.ПредставлениеОбъекта  = СтрЗаменить(СтрокиТаблицыОбъектов[0].ПредставлениеОбъекта, мРазделительАдресов, "");
					НоваяСтрокаТЧ = ТЧ.Добавить();
					НоваяСтрокаТЧ.АдресЭлектроннойПочты = СтрокиТаблицыОбъектов[0].Представление;
					НоваяСтрокаТЧ.Представление         = СтрЗаменить(СтрокиТаблицыОбъектов[0].ПредставлениеОбъекта, мРазделительАдресов, "");
				Иначе
					
					ТаблицаОбъектовПередачи = Новый ТаблицаЗначений;
					ТаблицаОбъектовПередачи.Колонки.Добавить("Объект", Метаданные.РегистрыСведений.КонтактнаяИнформация.Измерения.Объект.Тип);
					ТаблицаОбъектовПередачи.Колонки.Добавить("АдресЭлектроннойПочты");
					ТаблицаОбъектовПередачи.Колонки.Добавить("ПредставлениеОбъекта");
					Для каждого СтрокаТаблицыОбъектов Из СтрокиТаблицыОбъектов Цикл
						НоваяСтрока = ТаблицаОбъектовПередачи.Добавить();
						НоваяСтрока.Объект                = СтрокаТаблицыОбъектов.Объект;
						НоваяСтрока.АдресЭлектроннойПочты = СтрокаТаблицыОбъектов.Представление;
						НоваяСтрока.ПредставлениеОбъекта  = СтрокаТаблицыОбъектов.ПредставлениеОбъекта;
					КонецЦикла; 
					
					ФормаВыбораАдреса = ЭтотОбъект.ПолучитьФорму("ФормаПодбораПолучателя", ЭтаФорма);
					
					Если ТаблицаОбъектовПередачи.Количество() > 0 Тогда
						ФормаВыбораАдреса.ЭлементыФормы.НадписьСтрокаДляНераспознанногоИмени.Заголовок = "Система обнаружила несколько записей связанных с именем";
						ФормаВыбораАдреса.ЭлементыФормы.НадписьДействияПользователя.Заголовок = "Выберите один объект из предложенного списка, подберите объект из адресной книги или введите новый";
					Иначе
						ФормаВыбораАдреса.ЭлементыФормы.НадписьСтрокаДляНераспознанногоИмени.Заголовок = "Система не может обнаружить ни одной записи связанной с именем";
						ФормаВыбораАдреса.ЭлементыФормы.НадписьДействияПользователя.Заголовок = "Подберите объект из адресной книги, или введите новый";
					КонецЕсли;
					ФормаВыбораАдреса.ЭлементыФормы.НадписьНераспознанногоИмени.Заголовок = """" + СтрокиТаблицы.ПредставлениеОбъекта + """";
					ФормаВыбораАдреса.НераспознанноеИмя = СтрокиТаблицы.ПредставлениеОбъекта;
					
					ФормаВыбораАдреса.ТаблицаОбъектов = ТаблицаОбъектовПередачи;
					
					ОткликФормы = ФормаВыбораАдреса.ОткрытьМодально();
					
					Если ТипЗнч(ОткликФормы) = Тип("Структура") Тогда
						
						Если ТипЗнч(ОткликФормы.Объект) = Тип("Строка") Тогда
							НаименованиеОбъекта = ОткликФормы.Объект;
						Иначе
							НаименованиеОбъекта = ОткликФормы.Объект.Наименование;
						КонецЕсли; 
						Если ПустаяСтрока(ОткликФормы.АдресЭлектроннойПочты) Тогда
							СтрокиТаблицы.Представление = ОткликФормы.ПредставлениеОбъекта;
						Иначе
							СтрокиТаблицы.Представление = ?(НЕ ПустаяСтрока(ОткликФормы.ПредставлениеОбъекта), ОткликФормы.ПредставлениеОбъекта, СтрЗаменить(НаименованиеОбъекта, мРазделительАдресов, "")) + " <" + ОткликФормы.АдресЭлектроннойПочты + ">";
						КонецЕсли; 
						НоваяСтрокаОбъектовТекста = ТаблицаОбъектовТекста.Добавить();
						НоваяСтрокаОбъектовТекста.Объект                = ОткликФормы.Объект;
						НоваяСтрокаОбъектовТекста.АдресЭлектроннойПочты = ОткликФормы.АдресЭлектроннойПочты;
						НоваяСтрокаОбъектовТекста.ПредставлениеОбъекта  = ?(НЕ ПустаяСтрока(ОткликФормы.ПредставлениеОбъекта), ОткликФормы.ПредставлениеОбъекта, СтрЗаменить(НаименованиеОбъекта, мРазделительАдресов, ""));
						НоваяСтрокаТЧ = ТЧ.Добавить();
						НоваяСтрокаТЧ.АдресЭлектроннойПочты = ОткликФормы.АдресЭлектроннойПочты;
						НоваяСтрокаТЧ.Представление         = ?(НЕ ПустаяСтрока(ОткликФормы.ПредставлениеОбъекта), ОткликФормы.ПредставлениеОбъекта, СтрЗаменить(НаименованиеОбъекта, мРазделительАдресов, ""));
						
					ИначеЕсли ОткликФормы = Неопределено Тогда
						
						СтрокиТаблицы.Представление = СтрокиТаблицы.ПредставлениеОбъекта;
						НоваяСтрокаОбъектовТекста = ТаблицаОбъектовТекста.Добавить();
						НоваяСтрокаОбъектовТекста.Объект                = "";
						НоваяСтрокаОбъектовТекста.АдресЭлектроннойПочты = "";
						НоваяСтрокаОбъектовТекста.ПредставлениеОбъекта  = СтрокиТаблицы.ПредставлениеОбъекта;
						НоваяСтрокаТЧ = ТЧ.Добавить();
						НоваяСтрокаТЧ.АдресЭлектроннойПочты = "";
						НоваяСтрокаТЧ.Представление         = СтрокиТаблицы.ПредставлениеОбъекта;
						
					КонецЕсли;
					
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли; 
		
		// Формируем представление строки
		Значение = "";
		Для а = 1 По НомерЭлемента Цикл
			ЗначениеПрисоединения = "";
			СтрокаТаблицы = ТаблицаИмен.Найти(а, "НомерЭлемента");
			Если СтрокаТаблицы <> Неопределено Тогда
				ЗначениеПрисоединения = СтрокаТаблицы.Представление;
			Иначе
				СтрокаТаблицы = ТаблицаАдресов.Найти(а, "НомерЭлемента");
				ЗначениеПрисоединения = СтрокаТаблицы.Представление;
			КонецЕсли;
			Если ПустаяСтрока(ЗначениеПрисоединения) Тогда
				Продолжить;
			КонецЕсли; 
			Если НЕ ПустаяСтрока(Значение) Тогда
				Значение = Значение + мРазделительАдресов + " ";
			КонецЕсли;
			Значение = Значение + ЗначениеПрисоединения;
		КонецЦикла;
	
	Иначе
		
		Для каждого СтрокаТаблицы Из ТаблицаИмен Цикл
			СтрокаТаблицы.ПредставлениеОбъекта = СтрЗаменить(СтрокаТаблицы.ПредставлениеОбъекта, ",", "");
			НоваяСтрокаТЧ = ТЧ.Добавить();
			НоваяСтрокаТЧ.АдресЭлектроннойПочты = СтрокаТаблицы.АдресЭлектроннойПочты;
			НоваяСтрокаТЧ.Представление         = СтрокаТаблицы.ПредставлениеОбъекта;
		КонецЦикла;
		
		Для каждого СтрокаТаблицы Из ТаблицаАдресов Цикл
			СтрокаТаблицы.ПредставлениеОбъекта = СтрЗаменить(СтрокаТаблицы.ПредставлениеОбъекта, ",", "");
			НоваяСтрокаТЧ = ТЧ.Добавить();
			НоваяСтрокаТЧ.АдресЭлектроннойПочты = СтрокаТаблицы.АдресЭлектроннойПочты;
			НоваяСтрокаТЧ.Представление         = СтрокаТаблицы.ПредставлениеОбъекта;
		КонецЦикла;
		
	КонецЕсли; 
	
	Возврат ТаблицаОбъектовТекста;
	
КонецФункции

// Процедура открывает форму адресной книги для подбора получателей.
// 
// Параметры:
//  ИмяЗакладки - Строка, имя закладки, на которой необходимо открыть адресную книгу
//  АдрКнига - ОбработкаОбъект.АдреснаяКнига, форму которой надо открыть
//
Процедура ОткрытьАдреснуюКнигу(ИмяЗакладки = "", АдрКнига = Неопределено) Экспорт

	Если АдрКнига = Неопределено Тогда
		АдрКнига = Обработки.АдреснаяКнига.Создать();
	КонецЕсли; 
	АдрКнига.УчетнаяЗапись = УчетнаяЗапись;
	
	Если НЕ ПустаяСтрока(Кому) Тогда
		ТаблицаОбъектовКому = ПропарситьСтроку(Кому, Кому, КомуТЧ, Истина);
		Для каждого СтрокаТаблицы Из ТаблицаОбъектовКому Цикл
			НоваяСтрока = АдрКнига.Кому.Добавить();
			Если НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.Объект) Тогда
				НоваяСтрока.Объект = СтрокаТаблицы.Объект;
			ИначеЕсли НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.ПредставлениеОбъекта) Тогда
				НоваяСтрока.Объект = СтрокаТаблицы.ПредставлениеОбъекта;
			Иначе
				НоваяСтрока.Объект = СтрокаТаблицы.АдресЭлектроннойПочты;
			КонецЕсли; 
			НоваяСтрока.АдресЭлектроннойПочты = СтрокаТаблицы.АдресЭлектроннойПочты;
			НоваяСтрока.ПредставлениеОбъекта  = СтрокаТаблицы.ПредставлениеОбъекта;
		КонецЦикла; 
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Копии) Тогда
		ТаблицаОбъектовКопии = ПропарситьСтроку(Копии, Копии, КопииТЧ, Истина);
		Для каждого СтрокаТаблицы Из ТаблицаОбъектовКопии Цикл
			НоваяСтрока = АдрКнига.Копии.Добавить();
			Если НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.Объект) Тогда
				НоваяСтрока.Объект = СтрокаТаблицы.Объект;
			ИначеЕсли НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.ПредставлениеОбъекта) Тогда
				НоваяСтрока.Объект = СтрокаТаблицы.ПредставлениеОбъекта;
			Иначе
				НоваяСтрока.Объект = СтрокаТаблицы.АдресЭлектроннойПочты;
			КонецЕсли; 
			НоваяСтрока.АдресЭлектроннойПочты = СтрокаТаблицы.АдресЭлектроннойПочты;
			НоваяСтрока.ПредставлениеОбъекта  = СтрокаТаблицы.ПредставлениеОбъекта;
		КонецЦикла; 
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СкрытыеКопии) Тогда
		ТаблицаОбъектовСкрытыеКопии = ПропарситьСтроку(СкрытыеКопии, СкрытыеКопии, СкрытыеКопииТЧ, Истина);
		Для каждого СтрокаТаблицы Из ТаблицаОбъектовСкрытыеКопии Цикл
			НоваяСтрока = АдрКнига.СкрытыеКопии.Добавить();
			Если НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.Объект) Тогда
				НоваяСтрока.Объект = СтрокаТаблицы.Объект;
			ИначеЕсли НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.ПредставлениеОбъекта) Тогда
				НоваяСтрока.Объект = СтрокаТаблицы.ПредставлениеОбъекта;
			Иначе
				НоваяСтрока.Объект = СтрокаТаблицы.АдресЭлектроннойПочты;
			КонецЕсли; 
			НоваяСтрока.АдресЭлектроннойПочты = СтрокаТаблицы.АдресЭлектроннойПочты;
			НоваяСтрока.ПредставлениеОбъекта  = СтрокаТаблицы.ПредставлениеОбъекта;
		КонецЦикла; 
	КонецЕсли;
	
	ФормаАдрКниги = АдрКнига.ПолучитьФорму("ФормаПодбора");
	Если НЕ ПустаяСтрока(ИмяЗакладки) Тогда
		ФормаАдрКниги.ЭлементыФормы.ПанельКому.ТекущаяСтраница = ФормаАдрКниги.ЭлементыФормы.ПанельКому.Страницы[ИмяЗакладки];
	КонецЕсли; 
	ОткликФормы = ФормаАдрКниги.ОткрытьМодально();
	
	Если ТипЗнч(ОткликФормы) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	// Кому
	КомуТЧ.Очистить();
	Кому = "";
	Для каждого СтрокаТаблицы Из ОткликФормы.Кому Цикл
		
		Если ЗначениеНеЗаполнено(СтрокаТаблицы.АдресЭлектроннойПочты) Тогда
			Продолжить;
		КонецЕсли; 
		
		Если НЕ ПустаяСтрока(Кому) Тогда
			Кому = Кому + мРазделительАдресов + " ";
		КонецЕсли;
		
		Представление = "";
		Если НЕ ПустаяСтрока(СтрокаТаблицы.ПредставлениеОбъекта) Тогда
			Представление = СтрокаТаблицы.ПредставлениеОбъекта;
		ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(СтрокаТаблицы.Объект)) И НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.Объект) Тогда
			Представление = СтрЗаменить(СтрокаТаблицы.Объект.Наименование, мРазделительАдресов, "");
		КонецЕсли; 
		
		Если НЕ ПустаяСтрока(Представление) Тогда
			Кому = Кому + Представление + " <" + СтрокаТаблицы.АдресЭлектроннойПочты + ">";
		Иначе
			Кому = Кому + СтрокаТаблицы.АдресЭлектроннойПочты;
		КонецЕсли;
		
		СтрокаТЧ = КомуТЧ.Добавить();
		СтрокаТЧ.АдресЭлектроннойПочты = СтрокаТаблицы.АдресЭлектроннойПочты;
		СтрокаТЧ.Представление         = Представление;
	
	КонецЦикла; 
	
	// Копии
	КопииТЧ.Очистить();
	Копии = "";
	Для каждого СтрокаТаблицы Из ОткликФормы.Копии Цикл
	
		Если ЗначениеНеЗаполнено(СтрокаТаблицы.АдресЭлектроннойПочты) Тогда
			Продолжить;
		КонецЕсли; 
		
		Если НЕ ПустаяСтрока(Копии) Тогда
			Копии = Копии + мРазделительАдресов + " ";
		КонецЕсли;
		
		Представление = "";
		Если НЕ ПустаяСтрока(СтрокаТаблицы.ПредставлениеОбъекта) Тогда
			Представление = СтрокаТаблицы.ПредставлениеОбъекта;
		ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(СтрокаТаблицы.Объект)) И НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.Объект) Тогда
			Представление = СтрЗаменить(СтрокаТаблицы.Объект.Наименование, мРазделительАдресов, "");
		КонецЕсли; 
		
		Если НЕ ПустаяСтрока(Представление) Тогда
			Копии = Копии + Представление + " <" + СтрокаТаблицы.АдресЭлектроннойПочты + ">";
		Иначе
			Копии = Копии + СтрокаТаблицы.АдресЭлектроннойПочты;
		КонецЕсли; 
	
		СтрокаТЧ = КопииТЧ.Добавить();
		СтрокаТЧ.АдресЭлектроннойПочты = СтрокаТаблицы.АдресЭлектроннойПочты;
		СтрокаТЧ.Представление         = Представление;
	
	КонецЦикла; 
	
	// Скрытые копии
	СкрытыеКопииТЧ.Очистить();
	СкрытыеКопии = "";
	Для каждого СтрокаТаблицы Из ОткликФормы.СкрытыеКопии Цикл
	
		Если ЗначениеНеЗаполнено(СтрокаТаблицы.АдресЭлектроннойПочты) Тогда
			Продолжить;
		КонецЕсли; 
		
		Если НЕ ПустаяСтрока(СкрытыеКопии) Тогда
			СкрытыеКопии = СкрытыеКопии + мРазделительАдресов + " ";
		КонецЕсли;
		
		Представление = "";
		Если НЕ ПустаяСтрока(СтрокаТаблицы.ПредставлениеОбъекта) Тогда
			Представление = СтрокаТаблицы.ПредставлениеОбъекта;
		ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(СтрокаТаблицы.Объект)) И НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.Объект) Тогда
			Представление = СтрЗаменить(СтрокаТаблицы.Объект.Наименование, мРазделительАдресов, "");
		КонецЕсли; 
		
		Если НЕ ПустаяСтрока(Представление) Тогда
			СкрытыеКопии = СкрытыеКопии + Представление + " <" + СтрокаТаблицы.АдресЭлектроннойПочты + ">";
		Иначе
			СкрытыеКопии = СкрытыеКопии + СтрокаТаблицы.АдресЭлектроннойПочты;
		КонецЕсли; 
	
		СтрокаТЧ = СкрытыеКопииТЧ.Добавить();
		СтрокаТЧ.АдресЭлектроннойПочты = СтрокаТаблицы.АдресЭлектроннойПочты;
		СтрокаТЧ.Представление         = Представление;
	
	КонецЦикла; 
	
	мКнопкаСкрытыеКопии.Пометка = НЕ ПустаяСтрока(СкрытыеКопии);
	ПроверитьСкрытыеКопии();
	
КонецПроцедуры

// Процедура при необходимости сворачивает/разворачивает панель с полем ввода скрытых копий.
//
Процедура ПроверитьСкрытыеКопии()

	Если мКнопкаСкрытыеКопии.Пометка Тогда
		ЭлементыФормы.ПанельСлепыеКопии.Свертка = РежимСверткиЭлементаУправления.Нет;
	Иначе
		ЭлементыФормы.ПанельСлепыеКопии.Свертка = РежимСверткиЭлементаУправления.Верх;
	КонецЕсли; 

КонецПроцедуры

// Процедура проверяет и при необходимости производит сохранение письма.
//
Процедура АвтосохранениеПисьма()

	Если Модифицированность Тогда
		Попытка
			ЗаписатьВФорме();
		Исключение
			СообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли; 

КонецПроцедуры

// Процедура определяет и изменяет свойства Доступность и ТолькоПросмотр у элементов формы
// в зависимости от параметров письма и уровня доступа пользователя.
// 
Процедура ОпределитьДоступПользователя()

	Чтение    = мСтруктураДоступа.Чтение;
	Отправка  = мСтруктураДоступа.Отправка;
	НайденнаяОтправка = Отправка.НайтиПоЗначению(УчетнаяЗапись);
	НайденноеЧтение = Чтение.НайтиПоЗначению(УчетнаяЗапись);
	Если (НайденноеЧтение = Неопределено И НайденнаяОтправка = Неопределено) ИЛИ мРежимБезЗаписи Тогда
		УровеньДоступа = "Чтение";
	ИначеЕсли НайденноеЧтение = Неопределено И НайденнаяОтправка <> Неопределено Тогда
		УровеньДоступа = "Отправка";
	ИначеЕсли НайденноеЧтение <> Неопределено И НайденнаяОтправка = Неопределено Тогда
		УровеньДоступа = "Чтение";
	ИначеЕсли НайденноеЧтение <> Неопределено И НайденнаяОтправка <> Неопределено Тогда
		УровеньДоступа = "Отправка";
	КонецЕсли;
	
	Если СтатусПисьма = Перечисления.СтатусыПисем.Отправленное ИЛИ СтатусПисьма = Перечисления.СтатусыПисем.Полученное Тогда
		ЭлементыФормы.ВложенияПисьма.ТолькоПросмотр = Истина;
		ЭлементыФормы.КоманднаяПанельВложенияПисьма.Кнопки.ДобавитьНесколькоФайлов.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельВложенияПисьма.Кнопки.Подменю.Кнопки.ДобавитьНесколькоФайлов.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельВложенияПисьма.Кнопки.УстановитьПометкуУдаления.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельВложенияПисьма.Кнопки.Подменю.Кнопки.УстановитьПометкуУдаления.Доступность = Ложь;
		ЭлементыФормы.Дата.ТолькоПросмотр            = Истина;
		ЭлементыФормы.Дата.КнопкаВыбора              = Ложь;
		ЭлементыФормы.ДатаОтправления.КнопкаВыбора   = Ложь;
		ЭлементыФормы.ДатаТранспорта.КнопкаВыбора    = Ложь;
	КонецЕсли;
	
	Если УровеньДоступа = "Чтение" Тогда
		ЭлементыФормы.ДействияФормыПисьмоКОтправке.Кнопки.Подменю.Кнопки.Удалить.Доступность  = Ложь;
		ЭлементыФормы.ДействияФормыПисьмоКПросмотру.Кнопки.Подменю.Кнопки.Удалить.Доступность = Ложь;
		ЭлементыФормы.ВложенияПисьма.ТолькоПросмотр = Истина;
		ЭлементыФормы.ВложенияПисьмаТЗ.ТолькоПросмотр = Истина;
		ЭлементыФормы.КоманднаяПанельВложенияПисьма.Кнопки.ДобавитьНесколькоФайлов.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельВложенияПисьма.Кнопки.УстановитьПометкуУдаления.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельВложенияПисьма.Кнопки[0].Кнопки.ДобавитьНесколькоФайлов.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельВложенияПисьма.Кнопки[0].Кнопки.УстановитьПометкуУдаления.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельВложенияПисьмаТЗ.Кнопки.ДобавитьНесколькоФайлов.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельВложенияПисьмаТЗ.Кнопки[0].Кнопки.ДобавитьНесколькоФайлов.Доступность = Ложь;
		ЭлементыФормы.ПолеHTMLДокумента.ИзменяетДанные       = Ложь;
		ЭлементыФормы.ПолеТекстовогоДокумента.ИзменяетДанные = Ложь;
		ЭтаФорма.ТолькоПросмотр = Истина;
	Иначе
		Если СтатусПисьма = Перечисления.СтатусыПисем.Отправленное Тогда
			ЭлементыФормы.Ответственный.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли; 
	
	Если Ответ Тогда
		ЭлементыФормы.НадписьОснование.Заголовок = "Ответ на ...";
	ИначеЕсли Переадресация Тогда
		ЭлементыФормы.НадписьОснование.Заголовок = "Переадресовано с ...";
	КонецЕсли; 
	
КонецПроцедуры

// Процедура заполняет список выбора учетных записей (FROM), доступных для выбора и отправки
// текущим пользователем
//
Процедура ЗаполнитьСписокПоляФРОМ()

	Если СтатусПисьма <> Перечисления.СтатусыПисем.Отправленное И СтатусПисьма <> Перечисления.СтатусыПисем.Полученное Тогда
		
		ЭлементыФормы.УчетнаяЗапись.Видимость = Истина;
		ЭлементыФормы.Отправитель.Видимость   = Ложь;
		
		ЭлементыФормы.УчетнаяЗапись.СписокВыбора = мСтруктураДоступа.Отправка.Скопировать();
		
		Если ЭлементыФормы.УчетнаяЗапись.СписокВыбора.Количество() > 0 И ЗначениеНеЗаполнено(УчетнаяЗапись) Тогда
			УчетнаяЗапись = ЭлементыФормы.УчетнаяЗапись.СписокВыбора[0].Значение;
		КонецЕсли; 
		
	Иначе
		
		ЭлементыФормы.УчетнаяЗапись.Видимость = Ложь;
		ЭлементыФормы.Отправитель.Видимость   = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура изменяет видимость командных панелей формы в зависимости от статуса письма.
//
Процедура ВидимостьКомандныхПанелей()

	Если СтатусПисьма = Перечисления.СтатусыПисем.Отправленное ИЛИ СтатусПисьма = Перечисления.СтатусыПисем.Полученное Тогда

		ЭлементыФормы.УчетнаяЗапись.ТолькоПросмотр    = Истина;
		ЭлементыФормы.Кому.ТолькоПросмотр             = Истина;
		ЭлементыФормы.Кому.КнопкаВыбора               = Ложь;
		ЭлементыФормы.Кому.КнопкаСпискаВыбора         = Ложь;
		ЭлементыФормы.Копии.ТолькоПросмотр            = Истина;
		ЭлементыФормы.Копии.КнопкаВыбора              = Ложь;
		ЭлементыФормы.Копии.КнопкаСпискаВыбора        = Ложь;
		ЭлементыФормы.СкрытыеКопии.ТолькоПросмотр     = Истина;
		ЭлементыФормы.СкрытыеКопии.КнопкаВыбора       = Ложь;
		ЭлементыФормы.СкрытыеКопии.КнопкаСпискаВыбора = Ложь;
		ЭлементыФормы.Тема.ТолькоПросмотр             = Истина;

		ЭлементыФормы.ДействияФормыПисьмоКОтправке.Видимость                          = Ложь;
		ЭлементыФормы.ДействияФормыПисьмоКОтправке.Вспомогательная                    = Истина;
		ЭлементыФормы.ДействияФормыПисьмоКПросмотру.Видимость                         = Истина;
		ЭлементыФормы.ДействияФормыПисьмоКПросмотру.Вспомогательная                   = Ложь;
		ЭлементыФормы.ДействияФормыПисьмоКПросмотру.Кнопки.Ответить.КнопкаПоУмолчанию = Истина;
		
		ЭлементыФормы.ПолеHTMLДокумента.УстановитьРежим(РежимПоляHTMLДокумента.Просмотр);
		ЭлементыФормы.ПолеТекстовогоДокумента.ТолькоПросмотр = Истина;
		
		ЭлементыФормы.Дата.ТолькоПросмотр          = Истина;
		ЭлементыФормы.Дата.КнопкаВыбора            = Ложь;
		ЭлементыФормы.ДатаОтправления.КнопкаВыбора = Ложь;
		ЭлементыФормы.ДатаТранспорта.КнопкаВыбора  = Ложь;
		
	Иначе
	
		ЭлементыФормы.УчетнаяЗапись.ТолькоПросмотр = Ложь;
		ЭлементыФормы.Кому.ТолькоПросмотр          = Ложь;
		ЭлементыФормы.Копии.ТолькоПросмотр         = Ложь;
		ЭлементыФормы.СкрытыеКопии.ТолькоПросмотр  = Ложь;
		ЭлементыФормы.Тема.ТолькоПросмотр          = Ложь;
		
		ЭлементыФормы.ДействияФормыПисьмоКПросмотру.Видимость                         = Ложь;
		ЭлементыФормы.ДействияФормыПисьмоКПросмотру.Вспомогательная                   = Истина;
		ЭлементыФормы.ДействияФормыПисьмоКОтправке.Видимость                          = Истина;
		ЭлементыФормы.ДействияФормыПисьмоКОтправке.Вспомогательная                    = Ложь;
		ЭлементыФормы.ДействияФормыПисьмоКОтправке.Кнопки.Отправить.КнопкаПоУмолчанию = Истина;
		
		ТемпТекст = ЭлементыФормы.ПолеHTMLДокумента.ПолучитьТекст();
		Если ЗначениеНеЗаполнено(ИмяФайлаРедактированияХТМЛТекста) Тогда
			ЭлементыФормы.ПолеHTMLДокумента.УстановитьРежим(РежимПоляHTMLДокумента.Редактирование);
		Иначе
			ЭлементыФормы.ПолеHTMLДокумента.УстановитьРежим(РежимПоляHTMLДокумента.Просмотр);
		КонецЕсли; 
		ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст(ТемпТекст);
		ЭлементыФормы.ПолеТекстовогоДокумента.ТолькоПросмотр = Ложь;
		
		ЭлементыФормы.Дата.ТолькоПросмотр          = Ложь;
		ЭлементыФормы.Дата.КнопкаВыбора            = Истина;
		ЭлементыФормы.ДатаОтправления.КнопкаВыбора = Истина;
		ЭлементыФормы.ДатаТранспорта.КнопкаВыбора  = Истина;
		
	КонецЕсли;

КонецПроцедуры

// Процедура изменяет свойство ПометкаУдаления у вложений письма.
//
Процедура ИзменитьПометкуУдаленияВложения()

	Если ЭлементыФормы.ВложенияПисьма.ТекущиеДанные <> Неопределено Тогда
	
		ТекСсылка = ЭлементыФормы.ВложенияПисьма.ТекущиеДанные.Ссылка;
		ОбъектСсылки = ТекСсылка.ПолучитьОбъект();
		
		Попытка
			ОбъектСсылки.УстановитьПометкуУдаления(НЕ ОбъектСсылки.ПометкаУдаления);
		Исключение
			СообщитьОбОшибке(ОписаниеОшибки(),, Строка(ОбъектСсылки));
		КонецПопытки;
	
	КонецЕсли; 

КонецПроцедуры

// Процедура изменяет признак формат текста письма (Текст, ХТМЛ),
// и при этом конвертирует сам текст.
//
// Параметры:
//  НовыйВидТекстаПисьма - ПеречислениеСсылка.ВидыТекстовЭлектронныхПисем, новый вид текста письма
//
Процедура ИзменитьФорматТекста(НовыйВидТекстаПисьма)

	Если ВидТекстаПисьма <> НовыйВидТекстаПисьма
	   И НЕ ((ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML И НовыйВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками) ИЛИ (НовыйВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML И ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками)) Тогда
		
		Если ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML ИЛИ ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
			
			ТекстХТМЛ = ЭлементыФормы.ПолеHTMLДокумента.ПолучитьТекст();
			
			НачалоBODY = Найти(ТекстХТМЛ, "<BODY>");
			КонецBODY  = Найти(ТекстХТМЛ, "</BODY>");
			Если НачалоBODY > 0 И КонецBODY > 0 И (НачалоBODY + 6) < КонецBODY Тогда
				СтрокаВопроса = "Некоторые свойства данного документа не поддерживаются текстовыми электронными письмами.
								|Будет потеряно форматирование текста. Продолжить?";
				ОтветНаВопрос = Вопрос(СтрокаВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
				Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
	
			ЭлементыФормы.ПолеТекстовогоДокумента.УстановитьТекст(ПреобразоватьТекстИзХТМЛФорматаВПростой(ЭлементыФормы.ПолеHTMLДокумента.ПолучитьТекст()));
			ЭлементыФормы.ПолеТекстовогоДокумента.Видимость = Истина;
			ЭлементыФормы.ПолеHTMLДокумента.Видимость = Ложь;
			ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст("");
			
		Иначе
			
			ФорматХТМЛ = "<HTML><HEAD>
			|<META http-equiv=Content-Type content=" + """" + "text/html; charset=utf-8" + """" + ">
			|<META content=" + """" + "MSHTML 6.00.2800.1400" + """" + " name=GENERATOR></HEAD>
			|<BODY>" + СтрЗаменить(ЭлементыФормы.ПолеТекстовогоДокумента.ПолучитьТекст(), Символы.ПС, "<BR>") + "</BODY></HTML>";
			
			ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст(ФорматХТМЛ);
			ЭлементыФормы.ПолеHTMLДокумента.Видимость = Истина;
			ЭлементыФормы.ПолеТекстовогоДокумента.УстановитьТекст("");
			ЭлементыФормы.ПолеТекстовогоДокумента.Видимость = Ложь;
			
		КонецЕсли; 
		
		ВидТекстаПисьма = НовыйВидТекстаПисьма;
	
	КонецЕсли;
	
	УстановитьСтрокуЗаголовка();
	ПометкаКнопокФорматаТекстаПисьма();

КонецПроцедуры

// Процедура устанавливает строку заголовка формы.
//
Процедура УстановитьСтрокуЗаголовка()

	Если СтатусПисьма = Перечисления.СтатусыПисем.Отправленное ИЛИ СтатусПисьма = Перечисления.СтатусыПисем.Полученное Тогда
		ЭтаФорма.АвтоЗаголовок = Ложь;
		Заголовок = Строка(СтатусПисьма) + ", " + Строка(Ссылка) + ", " + ?(НеРассмотрено, "Не рассмотрено, ", "Рассмотрено, ") + " (" + ?(ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками, Перечисления.ВидыТекстовЭлектронныхПисем.HTML, ВидТекстаПисьма) + ")";
	Иначе
		Если НЕ ЭтоНовый() Тогда
			Заголовок = Строка(СтатусПисьма) + ", " + ?(НеРассмотрено, "Не рассмотрено, ", "Рассмотрено, ");
		Иначе
			Заголовок = ?(НеРассмотрено, "Не рассмотрено, ", "Рассмотрено, ");
		КонецЕсли; 
		Заголовок = Заголовок + " (" + ?(ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками, Перечисления.ВидыТекстовЭлектронныхПисем.HTML, ВидТекстаПисьма) + ")";
	КонецЕсли;

КонецПроцедуры

// Процедура инициирует поиск/добавление объектов по имени/адресу эл.почты.
//
// Параметры
//  ВыделенныйТекст - Строка, текст для поиска.
// 
Процедура ПроизвестиПоиск(ВыделенныйТекст)

	ТекстДляПоиска = ВыделенныйТекст;
	
	АдреснаяКнига = Обработки.АдреснаяКнига.Создать();
	АдреснаяКнига.УчетнаяЗапись = УчетнаяЗапись;
	АдреснаяКнига.ОткрытаДляВыбора  = Истина;
	АдреснаяКнига.ОткрытиеПриВыборе = Истина;
	АдреснаяКнига.ПроизвестиПоиск(ТекстДляПоиска);
	АдреснаяКнига = Неопределено;

КонецПроцедуры

// Процедура производит поиск получателей электронного письма, по имени/адресу, и подставляет в
// строку Кому/Копии/СкрытыеКопии
//
// Параметры
//  Элемент - ПолеВвода, элемент управления в котором производится тайпинг
//  Текст - Строка, введенный текст в поле ввода
//  ТекстАвтоПодбора - Строка, текст для дополнения автоподбора
//  СтандартнаяОбработка - Булево, признак стандартной обработки автоподбора текста в поле ввода
// 
Процедура АвтоподборПолучателей(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Запрос = Новый Запрос;
	
	ПозицияРазделителя = 0;
	а = СтрДлина(Текст);
	Пока а > 0 Цикл
		Если Сред(Текст, а, 1) = мРазделительАдресов Тогда
			ПозицияРазделителя = а;
			Прервать;
		КонецЕсли;
		а = а - 1;
	КонецЦикла; 
	
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Если ПозицияРазделителя = 0 Тогда
		ИскомыйТекст = Текст;
	Иначе
		ИскомыйТекст = СокрЛП(Сред(Текст, (ПозицияРазделителя + 1)));
	КонецЕсли;
	
	Если ПустаяСтрока(ИскомыйТекст) Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("СтрокаПоиска", (ИскомыйТекст + "%"));
	Запрос.УстановитьПараметр("ТекущийПользователь", глТекущийПользователь);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	|
	|	ТаблицаКонтактнойИнформации.Наименование          КАК Наименование,
	|	ТаблицаКонтактнойИнформации.ЗначениеПоУмолчанию   КАК ЗначениеПоУмолчанию,
	|	ТаблицаКонтактнойИнформации.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты
	|
	|ИЗ
	|
	|	(
	|	ВЫБРАТЬ
	|		КонтактнаяИнформация.Объект.Наименование                     КАК Наименование,
	|		КонтактнаяИнформация.ЗначениеПоУмолчанию                     КАК ЗначениеПоУмолчанию,
	|		ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК Строка(100)) КАК АдресЭлектроннойПочты
	|	ИЗ
	|		РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|	ГДЕ
	|		КонтактнаяИнформация.Тип = &Тип
	|		И
	|		КонтактнаяИнформация.Объект.Наименование ПОДОБНО &СтрокаПоиска
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		КонтактнаяИнформация.Объект.Наименование                     КАК Наименование,
	|		КонтактнаяИнформация.ЗначениеПоУмолчанию                     КАК ЗначениеПоУмолчанию,
	|		ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК Строка(100)) КАК АдресЭлектроннойПочты
	|	ИЗ
	|		РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|	ГДЕ
	|		КонтактнаяИнформация.Тип = &Тип
	|		И
	|		КонтактнаяИнформация.Представление ПОДОБНО &СтрокаПоиска
	|	) КАК ТаблицаКонтактнойИнформации
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Выборка.Следующий();
	Представление = Выборка.Наименование;
	ЗначениеЭлемента = Элемент.Значение;
	Элемент.Значение = "";
	Если ЗначениеЭлемента <> ИскомыйТекст Тогда
		Элемент.ВыделенныйТекст = Лев(ЗначениеЭлемента, ПозицияРазделителя) + " " + СокрЛП(Представление) + " <" + СокрЛП(Выборка.АдресЭлектроннойПочты) + ">" + мРазделительАдресов + " ";
	Иначе
		Элемент.ВыделенныйТекст = СокрЛП(Представление) + " <" + СокрЛП(Выборка.АдресЭлектроннойПочты) + ">" + мРазделительАдресов + " ";
	КонецЕсли;
	
КонецПроцедуры

// Процедура вводит новый документ "Событие" на основании документа ЭлектронноеПисьмо.
//
Процедура ВвестиСобытие()

	Если НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	НовоеСобытие = Документы.Событие.СоздатьДокумент();
	НовоеСобытие.Заполнить(Ссылка);
	НовоеСобытие.ПолучитьФорму().Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	ВидимостьКомандныхПанелей();
	ДоступностьПереключенияТипаТекстаПисьма();
	
	мКнопкаСкрытыеКопии   = ЭлементыФормы.ДействияФормыПисьмоКОтправке.Кнопки.Подменю.Кнопки.СкрытыеКопии;
	мКнопкаРедактирования = ЭлементыФормы.ДействияФормыПисьмоКПросмотру.Кнопки.Подменю.Кнопки.Редактирование;
	Если НЕ ЭлементыФормы.ДействияФормыПисьмоКОтправке.Видимость Тогда
		мКнопкаСкрытыеКопии.Пометка = Ложь;
	Иначе
		мКнопкаСкрытыеКопии.Пометка = НЕ ПустаяСтрока(СкрытыеКопии);
	КонецЕсли; 
	
	мКнопкаРедактирования.Доступность = Ложь;
	ЭлементыФормы.ДействияФормыПисьмоКПросмотру.Кнопки.Подменю.Кнопки.ВосстановитьИсходныйТекст.Доступность = Ложь;
	Если мСтруктураДоступа.Отправка.НайтиПоЗначению(УчетнаяЗапись) <> Неопределено Тогда
		мКнопкаРедактирования.Доступность = Истина;
		ЭлементыФормы.ДействияФормыПисьмоКПросмотру.Кнопки.Подменю.Кнопки.ВосстановитьИсходныйТекст.Доступность = мКнопкаРедактирования.Пометка;
	КонецЕсли;
	
	ПроверитьСкрытыеКопии();
	
	Если ЭтоНовый() Тогда
	
		Если ЗначениеНеЗаполнено(Ответственный) Тогда
			Ответственный = глТекущийПользователь;
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(ВидТекстаПисьма) Тогда
			Если ЗначениеНеЗаполнено(УчетнаяЗапись.ФорматТекстаПисьмаПоУмолчанию) Тогда
				ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML;
			Иначе
				ВидТекстаПисьма = УчетнаяЗапись.ФорматТекстаПисьмаПоУмолчанию;
			КонецЕсли; 
		КонецЕсли; 
		
		УказатьГруппуПоУмолчанию();
		
	КонецЕсли;
	
	ОпределитьЗакладкуВложений();

	УстановитьОтборВложений();
	
	КопияТекстаПисьма = ТекстПисьма;
	Если ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML ИЛИ ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
		Если НЕ ЭтоНовый() Тогда
			Если ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
				ПропарситьHTMLИДВ_ТекстКартинки(глСоответствиеТекстовЭлектронныхПисем, глТекущийПользователь, Ссылка, КопияТекстаПисьма);
			КонецЕсли; 
		Иначе
			ПропарситьHTMLИДВ_ТекстКартинки(глСоответствиеТекстовЭлектронныхПисем, глТекущийПользователь, ВложенияПисьмаТЗСкрытые, КопияТекстаПисьма);
		КонецЕсли;
		ЭлементыФормы.ПолеHTMLДокумента.Видимость = Истина;
		ЭлементыФормы.ПолеТекстовогоДокумента.Видимость = Ложь;
		ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст(КопияТекстаПисьма);
		ЭлементыФормы.ПолеТекстовогоДокумента.УстановитьТекст("");
	Иначе
		ЭлементыФормы.ПолеHTMLДокумента.Видимость = Ложь;
		ЭлементыФормы.ПолеТекстовогоДокумента.Видимость = Истина;
		ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст("");
		ЭлементыФормы.ПолеТекстовогоДокумента.УстановитьТекст(КопияТекстаПисьма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		ЭлементыФормы.ДействияФормыПисьмоКПросмотру.Кнопки.Подменю.Кнопки.Удалить.Доступность = Ложь;
		ЭлементыФормы.ДействияФормыПисьмоКОтправке.Кнопки.Подменю.Кнопки.Удалить.Доступность = Ложь;
	Иначе
		Если ПометкаУдаления Тогда
			ЭлементыФормы.ДействияФормыПисьмоКПросмотру.Кнопки.Подменю.Кнопки.Удалить.Текст = "Снять пометку удаления";
			ЭлементыФормы.ДействияФормыПисьмоКОтправке.Кнопки.Подменю.Кнопки.Удалить.Текст = "Снять пометку удаления";
		Иначе
			ЭлементыФормы.ДействияФормыПисьмоКОтправке.Кнопки.Подменю.Кнопки.Удалить.Текст = "Установить пометку удаления";
			ЭлементыФормы.ДействияФормыПисьмоКПросмотру.Кнопки.Подменю.Кнопки.Удалить.Текст = "Установить пометку удаления";
		КонецЕсли;
	КонецЕсли;
	
	ОпределитьДоступПользователя();
	
	УстановитьСтрокуЗаголовка();
	ПометкаКнопокФорматаТекстаПисьма();
	
	ЭлементыФормы.Предмет.Доступность        = УчетнаяЗапись.ИспользоватьКлассификациюПисемПоПредметам;
	ЭлементыФормы.НадписьПредмет.Доступность = УчетнаяЗапись.ИспользоватьКлассификациюПисемПоПредметам;
	
	Если УчетнаяЗапись.АвтосохранениеПисем Тогда
		ПодключитьОбработчикОжидания("АвтосохранениеПисьма", УчетнаяЗапись.ИнтервалАвтосохраненияПисем);
	КонецЕсли;
	
	Если мРежимБезЗаписи Тогда
		Модифицированность = Ложь;
	КонецЕсли;
	
	ЗаполнитьСписокБыстрогоВыбораПолучателей();
	ЗаполнитьСписокБыстрогоВыбораТемы();
	
	мПоследнееЗначениеЭлементаТайпингаПредмет = Предмет;
	
	Если мРежимБезЗаписи Тогда
		ЭлементыФормы.ДействияФормыПисьмоКПросмотру.Кнопки.Подменю.Кнопки.Редактирование.Доступность            = Ложь;
		ЭлементыФормы.ДействияФормыПисьмоКПросмотру.Кнопки.Подменю.Кнопки.ВосстановитьИсходныйТекст.Доступность = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьГраницыКонтроляОтветаНаПисьмо();
	
КонецПроцедуры

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		
		Если ТипЗнч(мОбъектКопирования) = Тип("ДокументСсылка.ЭлектронноеПисьмо") Тогда
			ПереадресоватьПисьмо(глТекущийПользователь, мОбъектКопирования, Истина, ЭтаФорма.ВладелецФормы);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если ЭлементыФормы.УчетнаяЗапись.СписокВыбора.Количество() = 0 Тогда
			Предупреждение("У вас нет прав создавать и отправлять письма ни с одной учетной записи.");
			Отказ = Истина;
		КонецЕсли;
		
		Если Предмет = Неопределено Тогда
			Предмет = Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли; 
		
	Иначе
		
		Чтение   = мСтруктураДоступа.Чтение;
		Отправка = мСтруктураДоступа.Отправка;
		Если Чтение.НайтиПоЗначению(УчетнаяЗапись) = Неопределено И Отправка.НайтиПоЗначению(УчетнаяЗапись) = Неопределено Тогда
			Предупреждение("Вам запрещено просматривать и редактировать письма учетной записи " + УчетнаяЗапись);
			Отказ = Истина;
			Возврат;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи" формы.
//
Процедура ПриЗаписи(Отказ)
	
	Если мЭтоНовый Тогда
		
		Если мКопияТекстаПисьма <> Неопределено Тогда
			глСоответствиеТекстовЭлектронныхПисем.Вставить(Ссылка, мКопияТекстаПисьма);
			мКопияТекстаПисьма = Неопределено;
		КонецЕсли; 
		
		// Сохраним вложения
		НачатьТранзакцию();
		
		Для каждого СтрокаТаблицы Из ВложенияПисьмаТЗ Цикл
		
			НовыйОбъект = Справочники.ВложенияЭлектронныхПисем.СоздатьЭлемент();
			НовыйОбъект.Объект                 = Ссылка;
			НовыйОбъект.ИмяФайла               = СтрокаТаблицы.ИмяФайла;
			НовыйОбъект.Хранилище              = СтрокаТаблицы.Данные;

			Попытка
				НовыйОбъект.Записать();
			Исключение
				СообщитьОбОшибке(ОписаниеОшибки(),, Строка(ЭтотОбъект));
				Отказ = Истина;
				Прервать;
			КонецПопытки;
		
		КонецЦикла;
		
		Если НЕ Отказ Тогда
		
			Для каждого СтрокаТаблицы Из ВложенияПисьмаТЗСкрытые Цикл
			
				НовыйОбъект = Справочники.ВложенияЭлектронныхПисем.СоздатьЭлемент();
				НовыйОбъект.Объект                 = Ссылка;
				НовыйОбъект.ИмяФайла               = СтрокаТаблицы.ИмяФайла;
				НовыйОбъект.Хранилище              = СтрокаТаблицы.Данные;
				НовыйОбъект.ИДФайлаПочтовогоПисьма = СтрокаТаблицы.ИДФайлаПочтовогоПисьма;
				НовыйОбъект.Наименование           = СтрокаТаблицы.Наименование;
				
				Попытка
					НовыйОбъект.Записать();
				Исключение
					СообщитьОбОшибке(ОписаниеОшибки(),, Строка(ЭтотОбъект));
					Отказ = Истина;
					Прервать;
				КонецПопытки;
			
			КонецЦикла;
		
		КонецЕсли; 
		
		Если Отказ Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли; 
	
		ВложенияПисьма.Отбор.Объект.Значение      = Ссылка;
		ВложенияПисьма.Отбор.Объект.Использование = Истина;
		
	КонецЕсли;
	
	ОпределитьЗакладкуВложений();
	
	мЭтоНовый = Ложь;
	
	УстановитьСтрокуЗаголовка();
	
	УстановитьОтборВложений();
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если мРежимБезЗаписи Тогда
		Модифицированность = Ложь;
		Отказ = Истина;
		Предупреждение("Данное письмо запрещено записывать!");
		Возврат;
	КонецЕсли; 
	
	мЭтоНовый = ЭтоНовый();
	
	// Пропарсим HTML текст и заменим картинки на идентификаторы, а картинки сохраним в аттачах
	Если (СтатусПисьма <> Перечисления.СтатусыПисем.Отправленное И СтатусПисьма <> Перечисления.СтатусыПисем.Полученное) ИЛИ мКнопкаРедактирования.Пометка Тогда
		
		Если НЕ ЭтоНовый() Тогда
			ВременноеЗначение = глСоответствиеТекстовЭлектронныхПисем.Получить(Ссылка);
			Если ВременноеЗначение <> Неопределено Тогда
				глСоответствиеТекстовЭлектронныхПисем.Удалить(Ссылка);
			КонецЕсли;
		КонецЕсли; 
		
		Если ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML ИЛИ ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
			
			ТекстХТМЛ = ЭлементыФормы.ПолеHTMLДокумента.ПолучитьТекст();
		
			НовыйHTMLДокумент = Новый COMОбъект("HtmlFile");
			НовыйHTMLДокумент.open("text/html");
			НовыйHTMLДокумент.write(ТекстХТМЛ);
			НовыйHTMLДокумент.close();
			
			СтруктураВозврата = ПропарситьHTMLТекстКартинкаВ_ИД(НовыйHTMLДокумент, Ссылка, глСоответствиеТекстовЭлектронныхПисем);
			
			ТекстПисьма = СтруктураВозврата.ТекстПисьма;
			
			Если ЭтоНовый() Тогда
				
				Для каждого СтрокаТаблицы Из СтруктураВозврата.ТаблицаСоответствий Цикл
					НоваяСтрокаТаблицы = ВложенияПисьмаТЗСкрытые.Добавить();
					НоваяСтрокаТаблицы.ИмяФайла               = СтрокаТаблицы.Файл.Имя;
					НоваяСтрокаТаблицы.Данные                 = Новый ХранилищеЗначения(Новый ДвоичныеДанные(СтрокаТаблицы.Файл.ПолноеИмя), Новый СжатиеДанных());
					НоваяСтрокаТаблицы.ИДФайлаПочтовогоПисьма = СтрокаТаблицы.ИД;
					НоваяСтрокаТаблицы.Наименование           = СтрокаТаблицы.Наименование;
				КонецЦикла;
				
				Если ВложенияПисьмаТЗСкрытые.Количество() > 0 Тогда
					мКопияТекстаПисьма = ТекстПисьма;
					мКопияТекстаПисьма = ПропарситьHTMLИДВ_ТекстКартинки(глСоответствиеТекстовЭлектронныхПисем, глТекущийПользователь, ВложенияПисьмаТЗСкрытые.Скопировать(), мКопияТекстаПисьма);
					ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками;
				КонецЕсли;
				
				Если ВложенияПисьмаТЗ.Количество() > 0 Тогда
					ЕстьВложения = Истина;
				КонецЕсли; 
				
			Иначе
				
				НачатьТранзакцию();
				Для каждого СтрокаТаблицы Из СтруктураВозврата.ТаблицаСоответствий Цикл
					НовыйОбъект = Справочники.ВложенияЭлектронныхПисем.СоздатьЭлемент();
					НовыйОбъект.Объект                 = Ссылка;
					НовыйОбъект.ИмяФайла               = СтрокаТаблицы.Файл.Имя;
					НовыйОбъект.Хранилище              = Новый ХранилищеЗначения(Новый ДвоичныеДанные(СтрокаТаблицы.Файл.ПолноеИмя), Новый СжатиеДанных());
					НовыйОбъект.ИДФайлаПочтовогоПисьма = СтрокаТаблицы.ИД;
					НовыйОбъект.Наименование           = СтрокаТаблицы.Наименование;
					Попытка
						НовыйОбъект.Записать();
					Исключение
						СообщитьОбОшибке(ОписаниеОшибки(),, Строка(ЭтотОбъект));
						Отказ = Истина;
						Прервать;
					КонецПопытки;
				КонецЦикла;
				Если НЕ Отказ Тогда
					ЗафиксироватьТранзакцию();
				Иначе
					ОтменитьТранзакцию();
				КонецЕсли; 
				
			КонецЕсли; 
			
		Иначе
			
			ТекстПисьма = ЭлементыФормы.ПолеТекстовогоДокумента.ПолучитьТекст();
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	ЭлементыФормы.ДействияФормыПисьмоКОтправке.Кнопки.Подменю.Кнопки.Удалить.Доступность = Истина;
	ЭлементыФормы.ДействияФормыПисьмоКПросмотру.Кнопки.Подменю.Кнопки.Удалить.Доступность = Истина;
	Если ПометкаУдаления Тогда
		ЭлементыФормы.ДействияФормыПисьмоКОтправке.Кнопки.Подменю.Кнопки.Удалить.Текст = "Снять пометку удаления";
		ЭлементыФормы.ДействияФормыПисьмоКПросмотру.Кнопки.Подменю.Кнопки.Удалить.Текст = "Снять пометку удаления";
	Иначе
		ЭлементыФормы.ДействияФормыПисьмоКОтправке.Кнопки.Подменю.Кнопки.Удалить.Текст = "Установить пометку удаления";
		ЭлементыФормы.ДействияФормыПисьмоКПросмотру.Кнопки.Подменю.Кнопки.Удалить.Текст = "Установить пометку удаления";
	КонецЕсли;
	
	Если ТипЗнч(ВладелецФормы) = Тип("Форма") Тогда
		ЭтаФорма.ЗакрыватьПриВыборе = Ложь;
		ОповеститьОВыборе("ЗаписаноЭлектронноеПисьмо");
	КонецЕсли; 
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ ВЛОЖЕНИЙ ПИСЬМА

// Процедура - обработчик события "Нажатие" элемента формы "КоманднаяПанельВложенияПисьма.ОткрытьФайлы".
//
Процедура КоманднаяПанельВложенияПисьмаОткрытьФайлы(Кнопка)

	ОткрытьФайлы(ЭлементыФормы.ВложенияПисьма.ТекущиеДанные, глТекущийПользователь, ЭлементыФормы.ВложенияПисьма.ВыделенныеСтроки, Ложь);

КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "КоманднаяПанельВложенияПисьма.СохранитьНаДиске".
//
Процедура КоманднаяПанельВложенияПисьмаСохранитьНаДиске(Кнопка)

	СохранитьФайлы(ЭлементыФормы.ВложенияПисьма.ТекущиеДанные, глТекущийПользователь, ЭлементыФормы.ВложенияПисьма.ВыделенныеСтроки, ВосстановитьЗначение("ИмяКаталогаСохраненияФайлов"));

КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "КоманднаяПанельВложенияПисьма.ДобавитьНесколькоФайлов".
//
Процедура КоманднаяПанельВложенияПисьмаДобавитьНесколькоФайлов(Кнопка)

	ДобавитьФайлы(Ссылка, глТекущийПользователь, Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл);

КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "КоманднаяПанельВложенияПисьма.УстановитьПометкуУдаления".
//
Процедура КоманднаяПанельВложенияПисьмаУстановитьПометкуУдаления(Кнопка)
	
	ИзменитьПометкуУдаленияВложения();
	Модифицированность = Истина;
	
КонецПроцедуры


// Процедура - обработчик события "Нажатие" элемента формы "КоманднаяПанельВложенияПисьмаТЗ.Обновить".
//
Процедура КоманднаяПанельВложенияПисьмаТЗОбновить(Кнопка)
	
	// Процедура добавлена для одинаковости кнопок в тулбарах двух табличных полей
	// и не выполняет никаких действий
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "КоманднаяПанельВложенияПисьмаТЗ.ОткрытьФайлы".
//
Процедура КоманднаяПанельВложенияПисьмаТЗОткрытьФайлы(Кнопка)

	Если ЭлементыФормы.ВложенияПисьмаТЗ.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ИмяКаталога = ПолучитьИмяКаталога(глТекущийПользователь);
	ТолькоЧтение = Ложь;

	СпособПерезаписи = "";

	Для каждого СсылкаФайл из ЭлементыФормы.ВложенияПисьмаТЗ.ВыделенныеСтроки Цикл

		Если ОткрытьФайлMSG(СсылкаФайл, глТекущийПользователь) Тогда
			Возврат;
		КонецЕсли; 
		
		Состояние("Сохраняется файл: " + СсылкаФайл.ИмяФайла);

		ИмяФайла = ПолучитьИмяФайла(ИмяКаталога, СсылкаФайл.ИмяФайла);
		СохранитьФайлНаДиске(СсылкаФайл.Данные, ИмяФайла, Ложь, СпособПерезаписи, Ложь);

		Если СпособПерезаписи = Неопределено Тогда
			Прервать;
		КонецЕсли;

		ОткрытьФайлДополнительнойИнформации(ИмяКаталога, СсылкаФайл.ИмяФайла);

	КонецЦикла;

КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "КоманднаяПанельВложенияПисьмаТЗ.СохранитьНаДиске".
//
Процедура КоманднаяПанельВложенияПисьмаТЗСохранитьНаДиске(Кнопка)

	Если ЭлементыФормы.ВложенияПисьмаТЗ.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СохраненноеИмяКаталога = ВосстановитьЗначение("ИмяКаталогаСохраненияФайлов");
	Если СохраненноеИмяКаталога = Неопределено Тогда
		ИмяКаталога = ПолучитьИмяКаталога(глТекущийПользователь);
	Иначе
		ИмяКаталога = СохраненноеИмяКаталога;
	КонецЕсли;

	ФормаСохраненияФайлов = Справочники.ВложенияЭлектронныхПисем.ПолучитьФорму("ФормаСохраненияФайлов");
	ФормаСохраненияФайлов.ИмяКаталога    = ИмяКаталога;
	ФормаСохраненияФайлов.ТолькоЧтение   = Ложь;
	ФормаСохраненияФайлов.ОткрытьКаталог = Ложь;
	СтруктураПараметров = ФормаСохраненияФайлов.ОткрытьМодально();

	Если СтруктураПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не ПроверитьСуществованиеКаталога(СтруктураПараметров.ИмяКаталога) Тогда
		Возврат;
	КонецЕсли;

	СохранитьЗначение("ИмяКаталогаСохраненияФайлов", СтруктураПараметров.ИмяКаталога);
	
	СпособПерезаписи = "";

	Для каждого СсылкаФайл из ЭлементыФормы.ВложенияПисьмаТЗ.ВыделенныеСтроки Цикл

		Состояние("Сохраняется файл: " + СсылкаФайл.ИмяФайла);

		ИмяФайла = ПолучитьИмяФайла(СтруктураПараметров.ИмяКаталога, СсылкаФайл.ИмяФайла);
		СохранитьФайлНаДиске(СсылкаФайл.Данные, ИмяФайла, СтруктураПараметров.ТолькоЧтение, СпособПерезаписи);

		Если СпособПерезаписи = Неопределено Тогда
			Прервать;
		КонецЕсли; 

	КонецЦикла;

	Если СтруктураПараметров.ОткрытьКаталог Тогда
		ЗапуститьПриложение(СтруктураПараметров.ИмяКаталога);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "КоманднаяПанельВложенияПисьмаТЗ.ДобавитьНесколькоФайлов".
//
Процедура КоманднаяПанельВложенияПисьмаТЗДобавитьНесколькоФайлов(Кнопка)

	Диалог = ПолучитьДиалогВыбораФайлов(Истина);

	Если Не Диалог.Выбрать() Тогда
		Возврат;
	КонецЕсли;

	Для каждого ПолученноеИмяФайла Из Диалог.ВыбранныеФайлы Цикл

		ПолученныйФайл = Новый Файл(ПолученноеИмяФайла);
		Состояние("Добавляется файл: " + ПолученныйФайл.Имя);

		НачатьТранзакцию();
		
		Отказ = Ложь;
		
		НовыйФайл = ВложенияПисьмаТЗ.Добавить();
		НовыйФайл.ИмяФайла = ПолученныйФайл.Имя;

		Попытка
			НовыйФайл.Данные = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПолученныйФайл.ПолноеИмя), Новый СжатиеДанных());
		Исключение
			Предупреждение("Файл: " + ПолученныйФайл.ПолноеИмя + Символы.ПС + ОписаниеОшибки() + Символы.ПС + "Файл не добавлен.");
			Отказ = Истина;
		КонецПопытки;
		
		Если Отказ Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли; 

	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик события "Нажатие" элемента формы "ДействияФормыПисьмоКОтправке.ПроверитьПолучателей".
//
Процедура ДействияФормыПисьмоКОтправкеПроверитьПолучателей(Кнопка)
	
	ПропарситьСтроку(Кому        , Кому        , КомуТЧ);
	ПропарситьСтроку(Копии       , Копии       , КопииТЧ);
	ПропарситьСтроку(СкрытыеКопии, СкрытыеКопии, СкрытыеКопииТЧ);
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "ДействияФормыПисьмоКОтправке.Отправить".
//
Процедура ДействияФормыПисьмоКОтправкеОтправить(Кнопка)
	
	ОтправитьПисьмо(ЭтаФорма);
	ЗакрыватьПриВыборе = Ложь;
	ОповеститьОВыборе("ЗаписаноЭлектронноеПисьмо");
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "ДействияФормыПисьмоКОтправке.ФорматТекстаHTML".
//
Процедура ДействияФормыПисьмоКОтправкеФорматТекстаHTML(Кнопка)
	
	ИзменитьФорматТекста(Перечисления.ВидыТекстовЭлектронныхПисем.HTML);
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "ДействияФормыПисьмоКОтправке.ФорматТекстаПростойТекст".
//
Процедура ДействияФормыПисьмоКОтправкеФорматТекстаПростойТекст(Кнопка)
	
	ИзменитьФорматТекста(Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "ДействияФормыПисьмоКОтправке.СкрытыеКопии".
//
Процедура ДействияФормыПисьмоКОтправкеСкрытыеКопии(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	
	ПроверитьСкрытыеКопии()
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "ДействияФормыПисьмоКОтправке.ВвестиСобытие".
//
Процедура ДействияФормыПисьмоКОтправкеВвестиСобытие(Кнопка)
	
	ВвестиСобытие();
	
КонецПроцедуры


// Процедура - обработчик события "Нажатие" элемента формы "ДействияФормыПисьмоКПросмотру.Ответить".
//
Процедура ДействияФормыПисьмоКПросмотруОтветить(Кнопка)
	
	Если ЭтоНовый() Тогда
		Предупреждение("На не сохраненное письмо отвечать запрещено.");
		Возврат;
	КонецЕсли;
	
	ОтветитьНаПисьмо(глТекущийПользователь, Ссылка, Этаформа.ВладелецФормы);
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "ДействияФормыПисьмоКПросмотру.ОтветитьВсем".
//
Процедура ДействияФормыПисьмоКПросмотруОтветитьВсем(Кнопка)
	
	Если ЭтоНовый() Тогда
		Предупреждение("На не сохраненное письмо отвечать запрещено.");
		Возврат;
	КонецЕсли;
	
	ОтветитьВсемНаПисьмо(глТекущийПользователь, Ссылка, ЭтаФорма.ВладелецФормы);
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "ДействияФормыПисьмоКПросмотру.Переслать".
//
Процедура ДействияФормыПисьмоКПросмотруПереслать(Кнопка)
	
	Если ЭтоНовый() Тогда
		Предупреждение("Не сохраненное письмо переадресовывать запрещено.");
		Возврат;
	КонецЕсли;
	
	ПереадресоватьПисьмо(глТекущийПользователь, Ссылка, , ЭтаФорма.ВладелецФормы);
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "ДействияФормыПисьмоКПросмотру.Удалить".
//
Процедура ДействияФормыПисьмоКПросмотруУдалить(Кнопка)
	
	Если НЕ ЭтоНовый() Тогда
		
		Если ПометкаУдаления Тогда
			СтрокаВопроса = "Снять с объекта пометку на удаление?";
		Иначе
			СтрокаВопроса = "Пометить объект на удаление?";
		КонецЕсли;
		
		ОтветНаВопрос = Вопрос(СтрокаВопроса, РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		Попытка
			ПометкаУдаления = НЕ ПометкаУдаления;
			Записать();
		Исключение
			СообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		ЭлементыФормы.ДействияФормыПисьмоКОтправке.Кнопки.Подменю.Кнопки.Удалить.Текст = "Снять пометку удаления";
		ЭлементыФормы.ДействияФормыПисьмоКПросмотру.Кнопки.Подменю.Кнопки.Удалить.Текст = "Снять пометку удаления";
	Иначе
		ЭлементыФормы.ДействияФормыПисьмоКОтправке.Кнопки.Подменю.Кнопки.Удалить.Текст = "Установить пометку удаления";
		ЭлементыФормы.ДействияФормыПисьмоКПросмотру.Кнопки.Подменю.Кнопки.Удалить.Текст = "Установить пометку удаления";
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "ДействияФормыПисьмоКПросмотру.АдреснаяКнига".
//
Процедура ДействияФормыПисьмоКПросмотруАдреснаяКнига(Кнопка)
	
	АдрКнига = Обработки.АдреснаяКнига.Создать();
	АдрКнига.УчетнаяЗапись = УчетнаяЗапись;
	АдрКнига.ОткрытаДляВыбора  = Истина;
	АдрКнига.ОткрытиеПриВыборе = Истина;
	АдрКнига.ПолучитьФорму("ФормаВыбора").Открыть();
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "ДействияФормыПисьмоКПросмотру.ВвестиСобытие".
//
Процедура ДействияФормыПисьмоКПросмотруВвестиСобытие(Кнопка)
	
	ВвестиСобытие();
	
КонецПроцедуры


// Процедура - обработчик события "Нажатие" элемента формы "КоманднаяПанельКому.НайтиДобавить".
//
Процедура КоманднаяПанельКомуНайтиДобавить(Кнопка)
	
	ПроизвестиПоиск(ЭлементыФормы.Кому.ВыделенныйТекст);
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "КоманднаяПанельКопии.НайтиДобавить".
//
Процедура КоманднаяПанельКопииНайтиДобавить(Кнопка)
	
	ПроизвестиПоиск(ЭлементыФормы.Копии.ВыделенныйТекст);
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "КоманднаяПанельОтправитель.НайтиДобавить".
//
Процедура КоманднаяПанельОтправительНайтиДобавить(Кнопка)
	
	ПроизвестиПоиск(ЭлементыФормы.Отправитель.ВыделенныйТекст);
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "КоманднаяПанельПолеТекстовогоДокумента.ОткрытьСсылку".
//
Процедура КоманднаяПанельПолеТекстовогоДокументаОткрытьСсылку(Кнопка)
	
	ВыделенныйТекст = ЭлементыФормы.ПолеТекстовогоДокумента.ВыделенныйТекст;
	ПерейтиПоСсылкеИзХТМЛПоля(ВыделенныйТекст, глТекущийПользователь, ЭтаФорма.ВладелецФормы, УчетнаяЗапись);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ ВЛОЖЕНИЙ ПИСЬМА

// Процедура - обработчик события "ПриНачалеРедактирования" элемента формы "ВложенияПисьма".
//
Процедура ВложенияПисьмаПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ВидДанных = Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл;
	КонецЕсли;

	мТекущееРасширениеФайла = ПолучитьРасширениеФайла(ЭлементыФормы.ВложенияПисьма.ТекущаяСтрока.ИмяФайла);

КонецПроцедуры

// Процедура - обработчик события "ПередОкончаниемРедактирования" элемента формы "ВложенияПисьма".
//
Процедура ВложенияПисьмаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	НовоеРасширениеФайла = ПолучитьРасширениеФайла(ЭлементыФормы.ВложенияПисьма.ТекущиеДанные.ИмяФайла);

	Если Не ОтменаРедактирования
	   И НельзяИзменятьРасширение(мТекущееРасширениеФайла, НовоеРасширениеФайла) Тогда

		Отказ = Истина;
		ЭлементыФормы.ВложенияПисьма.ТекущаяКолонка = ЭлементыФормы.ВложенияПисьма.Колонки.ИмяФайла;
		Возврат;

	КонецЕсли;

	Если Не ОтменаРедактирования
	   И ЭлементыФормы.ВложенияПисьма.ТекущиеДанные.Хранилище.Получить() = Неопределено Тогда

		Отказ = Истина;
		Предупреждение("Необходимо выбрать файл.");
		ЭлементыФормы.ВложенияПисьма.ТекущаяКолонка = ЭлементыФормы.ВложенияПисьма.Колонки.ИмяФайла;
		Возврат;

	КонецЕсли;

	Элемент.ТекущиеДанные.Объект                 = Ссылка;
	Элемент.ТекущиеДанные.ИДФайлаПочтовогоПисьма = "";
	Элемент.ТекущиеДанные.ВидДанных              = Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл;

КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" элемента формы "ВложенияПисьма".
//
Процедура ВложенияПисьмаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ОформлениеСтроки.Ячейки.ИмяФайла.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.ИмяФайла.ИндексКартинки = ПолучитьИндексПиктограммыФайла(ПолучитьРасширениеФайла(ДанныеСтроки.Ссылка.ИмяФайла));

КонецПроцедуры

// Процедура - обработчик события "Выбор" элемента формы "ВложенияПисьма".
//
Процедура ВложенияПисьмаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = НЕ Элемент.ТолькоПросмотр;
	
КонецПроцедуры

// Процедура - обработчик события "ПередУстановкойПометкиУдаления" элемента формы "ВложенияПисьма".
//
Процедура ВложенияПисьмаПередУстановкойПометкиУдаления(Элемент, Отказ)
	
	Отказ = Истина;
	Если НЕ Элемент.ТолькоПросмотр Тогда
		ИзменитьПометкуУдаленияВложения();
		Модифицированность = Истина;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" элемента формы "ВложенияПисьма.ИмяФайла".
//
Процедура ВложенияПисьмаИмяФайлаНачалоВыбора(Элемент, СтандартнаяОбработка)

	Диалог = ПолучитьДиалогВыбораФайлов(Ложь);

	Если Не Диалог.Выбрать() Тогда
		Возврат;
	КонецЕсли;

	Попытка
		ЭлементыФормы.ВложенияПисьма.ТекущиеДанные.Хранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Диалог.ПолноеИмяФайла), Новый СжатиеДанных);
		ЭлементыФормы.ВложенияПисьма.ТекущиеДанные.ИмяФайла = Сред(Диалог.ПолноеИмяФайла, СтрДлина(Диалог.Каталог) + 1);
	Исключение
		СообщитьОбОшибке(ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" элемента формы "ВложенияПисьмаТЗ".
//
Процедура ВложенияПисьмаТЗПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 0;
	ОформлениеСтроки.Ячейки.ИмяФайла.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.ИмяФайла.ИндексКартинки = ПолучитьИндексПиктограммыФайла(ПолучитьРасширениеФайла(ДанныеСтроки.ИмяФайла));

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" элемента формы "ВложенияПисьмаТЗ.ИмяФайла".
//
Процедура ВложенияПисьмаТЗИмяФайлаНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если ЭлементыФормы.ВложенияПисьмаТЗ.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Диалог = ПолучитьДиалогВыбораФайлов(Ложь);

	Если Не Диалог.Выбрать() Тогда
		Возврат;
	КонецЕсли;

	Попытка
		ЭлементыФормы.ВложенияПисьмаТЗ.ТекущиеДанные.Данные = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Диалог.ПолноеИмяФайла), Новый СжатиеДанных);
		ЭлементыФормы.ВложенияПисьмаТЗ.ТекущиеДанные.ИмяФайла = Сред(Диалог.ПолноеИмяФайла, СтрДлина(Диалог.Каталог) + 1);
	Исключение
		СообщитьОбОшибке(ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" элемента формы "ВложенияПисьмаТЗ".
//
Процедура ВложенияПисьмаТЗПриНачалеРедактирования(Элемент, НоваяСтрока)

	мТекущееРасширениеФайла = ПолучитьРасширениеФайла(Элемент.ТекущаяСтрока.ИмяФайла);

КонецПроцедуры

// Процедура - обработчик события "ПередОкончаниемРедактирования" элемента формы "ВложенияПисьмаТЗ".
//
Процедура ВложенияПисьмаТЗПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	НовоеРасширениеФайла = ПолучитьРасширениеФайла(Элемент.ТекущиеДанные.ИмяФайла);

	Если Не ОтменаРедактирования
	   И НельзяИзменятьРасширение(мТекущееРасширениеФайла, НовоеРасширениеФайла) Тогда

		Отказ = Истина;
		Элемент.ТекущаяКолонка = Элемент.Колонки.ИмяФайла;
		Возврат;

	КонецЕсли;

	Если Не ОтменаРедактирования
	   И Элемент.ТекущиеДанные.Данные.Получить() = Неопределено Тогда

		Отказ = Истина;
		Предупреждение("Необходимо выбрать файл.");
		Элемент.ТекущаяКолонка = Элемент.Колонки.ИмяФайла;
		Возврат;

	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "НачалоВыбора" элемента формы "Кому".
//
Процедура КомуНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ОткрытьАдреснуюКнигу("Кому");
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" элемента формы "Кому".
//
Процедура КомуАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	АвтоподборПолучателей(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" элемента формы "Кому".
//
Процедура КомуОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПропарситьСтроку(Текст, Элемент.Значение, КомуТЧ);
	ДобавитьВСписокБыстрогоВыбораПолучателей(Элемент);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" элемента формы "Кому".
//
Процедура КомуОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		СтандартнаяОбработка = Ложь;
		Элемент.Значение = ВыбранноеЗначение;
		ПропарситьСтроку(ВыбранноеЗначение, Элемент.Значение, КомуТЧ, Ложь);
		ДобавитьВСписокБыстрогоВыбораПолучателей(Элемент);
	КонецЕсли; 
	
КонецПроцедуры


// Процедура - обработчик события "НачалоВыбора" элемента формы "Копии".
//
Процедура КопииНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ОткрытьАдреснуюКнигу("Копии");
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" элемента формы "Копии".
//
Процедура КопииАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	АвтоподборПолучателей(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" элемента формы "Копии".
//
Процедура КопииОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПропарситьСтроку(Текст, Элемент.Значение, КопииТЧ);
	ДобавитьВСписокБыстрогоВыбораПолучателей(Элемент);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" элемента формы "Копии".
//
Процедура КопииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		СтандартнаяОбработка = Ложь;
		Элемент.Значение = ВыбранноеЗначение;
		ПропарситьСтроку(ВыбранноеЗначение, Элемент.Значение, КопииТЧ, Ложь);
		ДобавитьВСписокБыстрогоВыбораПолучателей(Элемент);
	КонецЕсли; 
	
КонецПроцедуры


// Процедура - обработчик события "НачалоВыбора" элемента формы "СкрытыеКопии".
//
Процедура СкрытыеКопииНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ОткрытьАдреснуюКнигу("СкрытыеКопии");
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" элемента формы "СкрытыеКопии".
//
Процедура СкрытыеКопииАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	АвтоподборПолучателей(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" элемента формы "СкрытыеКопии".
//
Процедура СкрытыеКопииОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПропарситьСтроку(Текст, Элемент.Значение, СкрытыеКопииТЧ);
	ДобавитьВСписокБыстрогоВыбораПолучателей(Элемент);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы "СкрытыеКопии".
//
Процедура СкрытыеКопииПриИзменении(Элемент)

	ПроверитьСкрытыеКопии();

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" элемента формы "СкрытыеКопии".
//
Процедура СкрытыеКопииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		СтандартнаяОбработка = Ложь;
		Элемент.Значение = ВыбранноеЗначение;
		ПропарситьСтроку(ВыбранноеЗначение, Элемент.Значение, СкрытыеКопииТЧ, Ложь);
		ДобавитьВСписокБыстрогоВыбораПолучателей(Элемент);
	КонецЕсли; 
	
КонецПроцедуры


// Процедура - обработчик события "ПриИзменении" элемента формы "УчетнаяЗапись".
//
Процедура УчетнаяЗаписьПриИзменении(Элемент)
	
	УказатьГруппуПоУмолчанию();
	
	ЗаполнитьСписокБыстрогоВыбораПолучателей();
	ЗаполнитьСписокБыстрогоВыбораТемы();
	
КонецПроцедуры

// Процедура - обработчик события "onclick" элемента формы "ПолеHTMLДокумента".
//
Процедура ПолеHTMLДокументаonclick(Элемент, pEvtObj)
	
	ОбработкаСобытияOnClickПоляHTML(глТекущийПользователь, Элемент, pEvtObj, УчетнаяЗапись, ГруппаУчетнойЗаписи, , ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" элемента формы "Предмет".
//
Процедура ПредметНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ДоступныеУчетныеЗаписи = ПолучитьДоступныеУчетныеЗаписи(глТекущийПользователь);
	
	ГруппаДляЗапроса = Неопределено;
	Если ПометкаУдаления Тогда
		ГруппаУдаленные = ДоступныеУчетныеЗаписи.ГруппыУдаленные.Получить(УчетнаяЗапись);
		Если ГруппаУдаленные <> Неопределено Тогда
			ГруппаДляЗапроса = ГруппаУдаленные;
		КонецЕсли; 
	ИначеЕсли СтатусПисьма = Перечисления.СтатусыПисем.Сохраненное Тогда
		ГруппаЧерновики = ДоступныеУчетныеЗаписи.ГруппыЧерновики.Получить(УчетнаяЗапись);
		Если ГруппаЧерновики <> Неопределено Тогда
			ГруппаДляЗапроса = ГруппаЧерновики;
		КонецЕсли; 
	КонецЕсли; 
	
	Если ГруппаДляЗапроса = Неопределено Тогда
		ГруппаДляЗапроса = ГруппаУчетнойЗаписи;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	ПредметыЭлектронныхПисем.Предмет
	|ИЗ
	|	РегистрСведений.ПредметыЭлектронныхПисем КАК ПредметыЭлектронныхПисем
	|ГДЕ
	|	НЕ ПредметыЭлектронныхПисем.Предмет В(&ПустойСписок)
	|	" + ?(НЕ ЗначениеНеЗаполнено(ГруппаДляЗапроса), "И
	|	ПредметыЭлектронныхПисем.ГруппаПисемЭлектроннойПочты = &ВыбГруппа", "") + "
	|УПОРЯДОЧИТЬ ПО
	|	ПредметыЭлектронныхПисем.Предмет ВОЗР
	|";
	
	Запрос.УстановитьПараметр("ВыбГруппа", ГруппаДляЗапроса);
	МассивТипов = Метаданные.Документы.ЭлектронноеПисьмо.Реквизиты.Предмет.Тип.Типы();
	ПустойСписок = Новый СписокЗначений;
	Для каждого ТипСписка Из МассивТипов Цикл
		ПустойСписок.Добавить(ПустоеЗначениеТипа(ТипСписка));
	КонецЦикла; 
	Запрос.УстановитьПараметр("ПустойСписок", ПустойСписок);
	
	Элемент.СписокВыбора.Очистить();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Элемент.СписокВыбора.Добавить(Выборка.Предмет);
	КонецЦикла; 
	
КонецПроцедуры


// Процедура - обработчик события "ПриИзменении" элемента формы "Тема".
//
Процедура ТемаПриИзменении(Элемент)
	
	ДобавитьВСписокБыстрогоВыбораТемы(Элемент);
	
КонецПроцедуры

Процедура ПредметОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
		Предмет = "";
	Иначе
		Предмет = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПредметНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ТипЗнч(Элемент.Значение) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СтандартнаяОбработка = Ложь;
		Справочники.ФизическиеЛица.ПолучитьФормуВыбора(, Элемент).Открыть();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	ОбновлениеОтображенияВФормеПриТайпинге(ЭтаФорма, ЭтаФорма.ЭлементыФормы.Предмет, мОбработкаТайпингаПредмет, мТекстТайпингаПредмет);
	
КонецПроцедуры

Процедура ПредметПриИзменении(Элемент)
	
	мПоследнееЗначениеЭлементаТайпингаПредмет = Элемент.Значение;
	
КонецПроцедуры

Процедура ПредметАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура, Тип("СправочникСсылка.ФизическиеЛица"));
	
КонецПроцедуры

Процедура ПредметОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура, ЭтаФорма, Тип("СправочникСсылка.ФизическиеЛица"), мОбработкаТайпингаПредмет, мТекстТайпингаПредмет, мПоследнееЗначениеЭлементаТайпингаПредмет);
	
КонецПроцедуры

Процедура ПредметОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элемент.Значение = ВыбранноеЗначение;
	
КонецПроцедуры

Процедура ДействияФормыПисьмоКПросмотруРедактирование(Кнопка)
	
	мКнопкаРедактирования.Пометка = НЕ мКнопкаРедактирования.Пометка;
	ЭлементыФормы.ДействияФормыПисьмоКПросмотру.Кнопки.Подменю.Кнопки.ВосстановитьИсходныйТекст.Доступность = мКнопкаРедактирования.Пометка;
	ИзменитьРежимРедактированияТекстаИТемы();
	
КонецПроцедуры

Процедура ДействияФормыПисьмоКПросмотруВосстановитьИсходныйТекст(Кнопка)
	
	ОтветНаВопрос = Вопрос("Восстановить текст и тему письма из исходного сообщения?", РежимДиалогаВопрос.ОКОтмена);
	Если ОтветНаВопрос <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ИнтернетПисьмо = ПочтовоеСообщение.Получить();
	Если ТипЗнч(ИнтернетПисьмо) <> Тип("ИнтернетПочтовоеСообщение") Тогда
		Возврат;
	КонецЕсли;
	
	Тема = ИнтернетПисьмо.Тема;
	УстановитьТекстПисьма(ИнтернетПисьмо, ЭтотОбъект, Ложь);
	Если ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML ИЛИ ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
		ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст(ТекстПисьма);
	Иначе
		ЭлементыФормы.ПолеТекстовогоДокумента.УстановитьТекст(ТекстПисьма);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПечатьПисьма(Кнопка)
	
	НапечататьПисьмо();
	
КонецПроцедуры

Процедура РассмотретьПослеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ВыбратьОтложенноеВремяИзСписка(Элемент);
	
КонецПроцедуры

Процедура НеРассмотреноПриИзменении(Элемент)
	
	Если ЗначениеНеЗаполнено(Ответственный) Тогда
		Ответственный = глТекущийПользователь;
	КонецЕсли;
	
	УстановитьСтрокуЗаголовка();
	УстановитьДоступностьГраницыКонтроляОтветаНаПисьмо();
	
КонецПроцедуры

Процедура РассмотретьПослеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораВремениИзСписка(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ДействияФормыПисьмоКОтправкеРедактироватьВнешнимХТМЛРедактором(Кнопка)
	
	Если ВидТекстаПисьма <> Перечисления.ВидыТекстовЭлектронныхПисем.HTML И ВидТекстаПисьма <> Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеНеЗаполнено(ИмяФайлаРедактированияХТМЛТекста) Тогда
		ТекстПисьма = ЭлементыФормы.ПолеHTMLДокумента.ПолучитьТекст();
		Если НЕ ЗахватитьТекст() Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Файл = Новый Файл(ИмяФайлаРедактированияХТМЛТекста);
		Если НЕ Файл.Существует() Тогда
			ОтветНаВопрос = Вопрос("Файл редактирования текста не найден. Сделать письмо доступным для редактирования?", РежимДиалогаВопрос.ОКОтмена);
			Если ОтветНаВопрос = КодВозвратаДиалога.ОК Тогда
				ОтветНаВопрос = Вопрос("Текст письма будет очищен!", РежимДиалогаВопрос.ОКОтмена);
				Если ОтветНаВопрос = КодВозвратаДиалога.ОК Тогда
					ИмяФайлаРедактированияХТМЛТекста      = "";
					ИмяКомпьютераРедактированияХТМЛТекста = "";
					ТекстПисьма = "";
				КонецЕсли; 
			КонецЕсли; 
		Иначе
			ОсвободитьТекст();
		КонецЕсли; 
	КонецЕсли;
	
	Если ЗначениеНеЗаполнено(ИмяФайлаРедактированияХТМЛТекста) Тогда
		ЭлементыФормы.ПолеHTMLДокумента.УстановитьРежим(РежимПоляHTMLДокумента.Редактирование);
	Иначе
		ЭлементыФормы.ПолеHTMLДокумента.УстановитьРежим(РежимПоляHTMLДокумента.Просмотр);
	КонецЕсли; 
	
	ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст(ТекстПисьма);
	
	ДоступностьПереключенияТипаТекстаПисьма();
	ПометкаКнопокФорматаТекстаПисьма();
	
КонецПроцедуры

Процедура ДействияФормыПисьмоКОтправкеСоздатьФизлицо1(Кнопка)
	
	ТекущийПредмет = Предмет;
	Обработки.Почта.Создать().СоздатьФизлицо(ТекущийПредмет);
	
КонецПроцедуры

Процедура ДействияФормыПисьмоКОтправкеСоздатьОпрос(Кнопка)
	
	ТекущийПредмет = Предмет;
	Обработки.Почта.Создать().СоздатьОпрос(ТекущийПредмет);
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	Если ЭтоНовый() И НЕ ЗначениеНеЗаполнено(ИмяФайлаРедактированияХТМЛТекста) Тогда
		Попытка
			УдалитьФайлы(ИмяФайлаРедактированияХТМЛТекста);
		Исключение
		КонецПопытки;
	КонецЕсли; 
	
КонецПроцедуры

мРазделительАдресов = ",";

ЗаполнитьСписокПоляФРОМ();

ВложенияПисьмаТЗ.Колонки.Добавить("Данные", Новый ОписаниеТипов("ХранилищеЗначения"));

ВложенияПисьмаТЗСкрытые.Колонки.Добавить("ИмяФайла"              , Новый ОписаниеТипов("Строка"));
ВложенияПисьмаТЗСкрытые.Колонки.Добавить("Наименование"          , Новый ОписаниеТипов("Строка"));
ВложенияПисьмаТЗСкрытые.Колонки.Добавить("Данные"                , Новый ОписаниеТипов("ХранилищеЗначения"));
ВложенияПисьмаТЗСкрытые.Колонки.Добавить("ИДФайлаПочтовогоПисьма", Новый ОписаниеТипов("Строка"));

мСписокБыстрогоВыбораПолучателей = Новый СписокЗначений;
мСписокБыстрогоВыбораТемы        = Новый СписокЗначений;

мОбработкаТайпингаПредмет                 = Ложь;
мТекстТайпингаПредмет                     = "";
мПоследнееЗначениеЭлементаТайпингаПредмет = Неопределено;
