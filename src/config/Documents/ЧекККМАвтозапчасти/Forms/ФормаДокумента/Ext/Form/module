////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Устанавливается в значение "Истина", если пользователю можно менять цену
// в документе
Перем мМожноМенятьЦенуВДокументе;

Перем мКолонкиТовары;

// Хранит информацию для скидок документа.
Перем мСуммаДокументаБезСкидок Экспорт;
Перем мРассчитыватьАвтоматическиеСкидки Экспорт;
Перем мМинимальныеЦены;
Перем мСписокФильтров;

Перем мПечатнаяФормаПоУмолчанию;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция формирует список запросов для передачи в форму подбора.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора()
	
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Если Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		СписокЗапросов.Добавить("ОстаткиНеавтоматизированнаяТорговаяТочка", "По остаткам и ценам номенклатуры в торговой точке");
	Иначе // Склад - простая розничная торговая точка
		СписокЗапросов.Добавить("РасходЦеныНоменклатуры", "По ценам номенклатуры");
		СписокЗапросов.Добавить("РасходОстаткиИЦеныНоменклатуры", "По остаткам и ценам номенклатуры");
	КонецЕсли;
	
	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	ЕстьЦена  = мМожноМенятьЦенуВДокументе;
	ЕстьСерия = Истина;

	Если Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам;
		ТипЦенДляЗапроса    = Склад.ТипЦенРозничнойТорговли;
	Иначе
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
		ТипЦенДляЗапроса    = ТипЦен;
	КонецЕсли;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора();
	ПредставлениеДок   = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , "ПодборВТабличнуюЧастьТовары");
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов",        ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад",               Склад);
	СтруктураПараметровПодбора.Вставить("ТипЦен",              ТипЦенДляЗапроса);
	СтруктураПараметровПодбора.Вставить("Организация",         Неопределено);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента",  Неопределено);
	СтруктураПараметровПодбора.Вставить("Контрагент",          Неопределено);
	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен", СпособЗаполненияЦен);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена",            ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия",           ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента",     мВалютаРегламентированногоУчета);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер);

	ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, Цена, Характеристика, Серия;

	// Получим параметры подбора из структуры подбора.
	
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены",          ВалютаЦены);
	ЗначениеВыбора.Свойство("Номенклатура",        Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения",    ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество",          Количество);
	ЗначениеВыбора.Свойство("Цена",                Цена);
	ЗначениеВыбора.Свойство("Характеристика",      Характеристика);
	ЗначениеВыбора.Свойство("Серия",               Серия);
	

	// Пересчитаем цену в валюту регламентированного учета
	СтруктураКурса = ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, Дата);
	Цена           = ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, мВалютаРегламентированногоУчета, СтруктураКурса.Курс, СтруктураКурса.Кратность, Дата);

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Номенклатура",               Номенклатура);
	СтруктураОтбора.Вставить("ЕдиницаИзмерения",           ЕдиницаИзмерения);
	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);
	
	Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам Тогда
		СтруктураОтбора.Вставить("Цена", Цена);
	КонецЕсли;
	
	СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	СуммаСтроки = 0;
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		СуммаСтрокиДоИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

		//Расчет скидок
		Если РассчитыватьАвтоматическиеСкидки() Тогда
			СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
			Разница = СуммаСтрокиПослеИзменения - СуммаСтрокиДоИзменения;

			мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + Разница;
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
			СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
			СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
			СтруктураПараметров.Вставить("ВидОплаты"     ,                       БезналичнаяОплата);

			РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
		Иначе // Рассчитать реквизиты табличной части.
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		КонецЕсли;

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура               = Номенклатура;
		СтрокаТабличнойЧасти.Количество                 = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент                = ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;
		СтрокаТабличнойЧасти.Цена                       = Цена;
        СтрокаТабличнойЧасти.Склад = Склад;
		СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров=Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		//Расчет скидок      
		Если РассчитыватьАвтоматическиеСкидки() Тогда
			СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
			Разница = СуммаСтрокиПослеИзменения;

			мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + Разница;
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
			СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
			СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
			СтруктураПараметров.Вставить("ВидОплаты"     ,                       БезналичнаяОплата);
			РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
		Иначе // Рассчитать реквизиты табличной части.
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		КонецЕсли;

	КонецЕсли;

	ТабличнаяЧастьИмя = "Товары";
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Удаление из меню лишних пунктов.
//
//Процедура ОбновитьМенюКнопкиЗаполнить()

//	Если НЕ (глТорговоеОборудование = Неопределено)
//	   И НЕ (глТорговоеОборудование.млТерминал = Неопределено)
//	   И НЕ (глТорговоеОборудование.млТерминал.Количество() = 0) Тогда
//		УдалитьПунктМеню = Ложь;
//	Иначе
//		УдалитьПунктМеню = Истина;
//	КонецЕсли;

//	Если УдалитьПунктМеню Тогда
//		КнопкиПанелиТовары = ЭлементыФормы.КоманднаяПанельТовары.Кнопки;
//		КнопкаЗаполнить    = КнопкиПанелиТовары.Найти("ПодменюЗаполнить");
//		Если КнопкаЗаполнить <> Неопределено Тогда
//			ИндексКнопкиЗаполнить = КнопкиПанелиТовары.Индекс(КнопкаЗаполнить);
//			КнопкиПанелиТовары.Удалить(ИндексКнопкиЗаполнить);
//		КонецЕсли;
//	КонецЕсли;

//КонецПроцедуры // ОбновитьМенюКнопкиЗаполнить()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполнение цены зависит от розничности операции.
	ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект,
	                                    мВалютаРегламентированногоУчета, мВалютаРегламентированногоУчета);

	// Установим способ редактирования цены.
	УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Номенклатура);

КонецПроцедуры

// Производит заполнение и установку необходимых полей при изменении характеристики товара в табличной части.
//
Процедура ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект,
	                                    мВалютаРегламентированногоУчета, мВалютаРегламентированногоУчета);

КонецПроцедуры // ПриИзмененииХарактеристикиНоменклатурыТоваров()

// Производит пересчет необходимых полей при изменении типа цен
//
Процедура ПриИзмененииТипаЦен(Ответ)

	Если Товары.Количество()>0 Тогда
		ТекстВопроса = "Изменился тип цен. Пересчитать табличную часть?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда

			СтруктураЗначений = Новый Структура;
			СтруктураЗначений.Вставить("НовыйТипЦен", ТипЦен);
			СтруктураЗначений.Вставить("НовыйВалютаДокумента", мВалютаРегламентированногоУчета);
			СтруктураЗначений.Вставить("НовыйКурсДокумента", 1);
			СтруктураЗначений.Вставить("НовыйКратностьДокумента", 1);

			СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
			
			// Получить нужные цены запросом
			РезультатЗапросаЦен = СформироватьЗапросПоЦенам(СтруктураЗначений, 
			                                                  СпособЗаполненияЦен, 
			                                                  Товары.ВыгрузитьКолонку("Номенклатура"),
			                                                  Дата, Неопределено);

			ВыборкаИзРезультатаЗапроса = РезультатЗапросаЦен.Выбрать();
			
			СтруктураПоиска = Новый Структура(); // стркутура для поиска в результате запроса

			// В цикле по ТЧ перезаполняем цены, приводя их к текущим скидкам, валюте и режиму налогообложения
			Для каждого СтрокаТабличнойЧасти Из Товары Цикл

				СтруктураПоиска.Вставить("Номенклатура"              , СтрокаТабличнойЧасти.Номенклатура);
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);

				ВыборкаИзРезультатаЗапроса.Сбросить(); 
				Если ВыборкаИзРезультатаЗапроса.НайтиСледующий(СтруктураПоиска) Тогда // Нашли запись

					// Если для данного товара есть цена данного типа
					// Единицу устанавливаем в единицу цены, если она не задана, то в основную единицу товара
					Если ЗначениеНеЗаполнено(ВыборкаИзРезультатаЗапроса.Цена) Тогда
						СтрокаТабличнойЧасти.Цена = 0;
					Иначе
						// Присваиваем значение цены и единицы цены
						Если СтруктураЗначений.НовыйТипЦен.Рассчитывается Тогда

							Цена = ВыборкаИзРезультатаЗапроса.Цена * (1 + ВыборкаИзРезультатаЗапроса.ПроцентСкидкиНаценки / 100);
							СтруктураВалюты = ПолучитьКурсВалюты(СтруктураЗначений.НовыйТипЦен.ВалютаЦены, ДокументОбъект.Дата);
							ПересчитатьИзВалютыВВалюту(Цена, 
														ВыборкаИзРезультатаЗапроса.ВалютаЦены,
														СтруктураЗначений.НовыйТипЦен.ВалютаЦены,
														ВыборкаИзРезультатаЗапроса.КурсВалютыЦены,
														СтруктураВалюты.Курс,
														ВыборкаИзРезультатаЗапроса.КратностьВалютыЦены,
														СтруктураВалюты.Кратность);
							СтрокаТабличнойЧасти.Цена = ОкруглитьЦену(Цена,
																		СтруктураЗначений.НовыйТипЦен.ПорядокОкругления,
																		СтруктураЗначений.НовыйТипЦен.ОкруглятьВБольшуюСторону);

						Иначе
							СтрокаТабличнойЧасти.Цена = ВыборкаИзРезультатаЗапроса.Цена;
						КонецЕсли;

						// Пересчитываем цену в ваюту документа
						Если СтруктураЗначений.НовыйВалютаДокумента <> ВыборкаИзРезультатаЗапроса.ВалютаЦены Тогда
							СтрокаТабличнойЧасти.Цена = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, 
							                                    ВыборкаИзРезультатаЗапроса.ВалютаЦены, 
							                                    СтруктураЗначений.НовыйВалютаДокумента, 
							                                    ВыборкаИзРезультатаЗапроса.КурсВалютыЦены,
							                                    СтруктураЗначений.НовыйКурсДокумента, 
							                                    ВыборкаИзРезультатаЗапроса.КратностьВалютыЦены,
							                                    СтруктураЗначений.НовыйКратностьДокумента);
						КонецЕсли;
						РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииТипаЦен()

// Выводит информацию о чеке на дисплей покупателя
//
// Параметры:
//  Режим        - режим, в который должен перейти дисплей покупателя
//
Процедура ВывестиИнформациюНаДисплейПокупателя(Режим)

	Если глТорговоеОборудование <> Неопределено Тогда

		ИскомаяСтрока = глТорговоеОборудование.млДП.Найти(КассаККМ, "КассаККМ");
		Если ИскомаяСтрока <> Неопределено Тогда

			Если Режим = "ВключитьРежимВыводаСтрок" Тогда

				Ответ = глТорговоеОборудование.ВключитьРежимВыводаСтрок(ИскомаяСтрока);
				Если Не ПустаяСтрока(Ответ) Тогда
					Сообщить("Дисплей покупателя """ + ИскомаяСтрока.Модель + """: ошибка при включении режима вывода строк", СтатусСообщения.Внимание);
					Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
				КонецЕсли;

			ИначеЕсли Режим = "ОтобразитьСтроки" Тогда

				Если Товары.Количество() > 0 Тогда

					Строка1 = ЭлементыФормы.Товары.ТекущаяСтрока.Номенклатура.Наименование;
					СуммаВсего = Формат(ЭлементыФормы.Всего.Значение, "ЧДЦ=2; ЧРГ=' '; ЧН=0");
					Строка2 = "Итого:" + глТорговоеОборудование.ДополнитьСтрокуЛ(СуммаВсего, " ", 14);

					Ответ = глТорговоеОборудование.ВывестиСтрокиНаДисплей(ИскомаяСтрока, Строка1, Строка2);
					Если Не ПустаяСтрока(Ответ) Тогда
						Сообщить("Дисплей покупателя """ + ИскомаяСтрока.Модель + """: невозможно отобразить строки", СтатусСообщения.Внимание);
						Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
					КонецЕсли;

				ИначеЕсли НЕ ЗначениеНеЗаполнено(ИскомаяСтрока.БегущаяСтрока) Тогда

					Ответ = глТорговоеОборудование.ВключитьРежимВыводаБегущейСтроки(ИскомаяСтрока);
					Если Не ПустаяСтрока(Ответ) Тогда
						Сообщить("Дисплей покупателя """ + ИскомаяСтрока.Модель + """: ошибка при включении режима бегущих строк", СтатусСообщения.Внимание);
						Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
					КонецЕсли;

				Иначе

					Строка1 = ИскомаяСтрока.Строка1;
					Строка2 = ИскомаяСтрока.Строка2;

					Ответ = глТорговоеОборудование.ВывестиСтрокиНаДисплей(ИскомаяСтрока, Строка1, Строка2);
					Если Не ПустаяСтрока(Ответ) Тогда
						Сообщить("Дисплей покупателя """ + ИскомаяСтрока.Модель + """: невозможно отобразить строки", СтатусСообщения.Внимание);
						Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
					КонецЕсли;

				КонецЕсли;

			ИначеЕсли Режим = "ОтобразитьПустыеСтроки" Тогда

				Ответ = глТорговоеОборудование.ОчиститьДисплейПокупателя(ИскомаяСтрока);
				Если Не ПустаяСтрока(Ответ) Тогда
					Сообщить("Дисплей покупателя """ + ИскомаяСтрока.Модель + """: ошибка при очистке дисплея", СтатусСообщения.Внимание);
					Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//Проверяет необходимость рассчета автоматических скидок
//
Функция РассчитыватьАвтоматическиеСкидки()

	Если НЕ мРассчитыватьАвтоматическиеСкидки
	 Или Проведен
	 Или ЧекПробитНаККМ
	 Или ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат
	 ИЛИ КассаККМ.НеИспользоватьАвтоматическиеСкидкиВЧекеККМ Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает соответстующие свойства поля ввода цены при изменении 
// номенклатуры в текущей строке табличной части.
// Для оптового склада или услуг в рознице цена редактируется,
// Для товаров на розничном складе выбирается из списка наличия в регистре.
//
// Параметры:
//  Номенклатура - ссылка на справочник, элемент номенклатуры, для которого будем устанавливать цену
//
Процедура УстановитьСвойстваПоляВводаЦены(Номенклатура)

	ТекущаяСтрока     = Номенклатура;
	ЭлементУправления = ЭлементыФормы.Товары.Колонки.Цена.ЭлементУправления;
	
КонецПроцедуры // УстановитьСвойстваПоляВводаЦены()

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимостьДоступность()

	// Чек, по которому возвращается товар нужно показывать только в чеке на возврат.
	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		ЭлементыФормы.ЧекККМ       .Видимость = Истина;
		ЭлементыФормы.НадписьЧекККМ.Видимость = Истина;
	Иначе
		ЭлементыФормы.ЧекККМ       .Видимость = Ложь;
		ЭлементыФормы.НадписьЧекККМ.Видимость = Ложь;
	КонецЕсли;

	ЭлементыФормы.БезналичнаяОплата.Доступность = (СуммаБезналичнойОплаты > 0);
	ЭлементыФормы.ТипЦен.Доступность            = Не (Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный);
    ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ДействиеПодбор.Доступность=ЗначениеНеЗаполнено(Сделка);
	ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодборПоАналогам.Доступность=ЗначениеНеЗаполнено(Сделка);
	ЭлементыФормы.ДисконтнаяКарта.Доступность=  Ложь; //временно
КонецПроцедуры // УстановитьВидимостьДоступность()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = ФорматСумм(ЭтотОбъект.Товары.Итог("Сумма"));

	ВременнаяСтрока = "";

	Если НЕ ЗначениеНеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен +".";
	Иначе
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	КонецЕсли;

	ИтогСкидка = мСуммаДокументаБезСкидок - Товары.Итог("Сумма");
	Если ИтогСкидка > 0 Тогда
		ВременнаяСтрока = ВременнаяСтрока + " Сумма скидки: " + ИтогСкидка+".";
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если ЗначениеНеЗаполнено(мВалютаРегламентированногоУчета) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(мВалютаРегламентированногоУчета) +"):";
	КонецЕсли;

	ВывестиИнформациюНаДисплейПокупателя("ОтобразитьСтроки");

КонецПроцедуры // ОбновитьПодвал()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	//Видимость автоматических скидок.
	ИспользованиеСкидок = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(ДокументОбъект.Дата);
	Если ИспользованиеСкидок.ИспользоватьСкидкиПоКоличествуТовара
	 Или ИспользованиеСкидок.ИспользоватьСкидкиПоСуммеДокумента
	 Или ИспользованиеСкидок.ИспользоватьСкидкиПоВидуОплаты
	 Или ИспользованиеСкидок.ИспользоватьСкидкиПоДисконтнойКарте
	 Или ИспользованиеСкидок.ИспользоватьСкидкиПоВыбраннойДисконтнойКартойСумме Тогда
		мРассчитыватьАвтоматическиеСкидки = Истина;
	Иначе
		мРассчитыватьАвтоматическиеСкидки = Ложь;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	яштФормаДокументаПриОткрытии(ЭтотОбъект, ЭтаФорма);
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета, "Продажа");
		УстановитьНомерДокумента(ЭтотОбъект);

		// Чек всегда в рублях со всеми налогами.
		ВалютаДокумента    = мВалютаРегламентированногоУчета;
		КурсДокумента      = 1;
		КратностьДокумента = 1;

		// Тип цен по умолчанию - из типа цен розничной торговли на данном складе
		РозничныйТипЦен = Склад.ТипЦенРозничнойТорговли;
		Если Не ЗначениеНеЗаполнено(РозничныйТипЦен) Тогда
			ТипЦен = РозничныйТипЦен;
		КонецЕсли; 

		ЧекПробитНаККМ = Ложь;
		
		УстановитьОрганизациюКассуККМ();

	КонецЕсли;


	СтруктураКолонок = Новый Структура();
	
	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Цена");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("ЕдиницаИзмерения");
	
	УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Товары.Колонки, СтруктураКолонок);
	
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Заполнить подменю выбора печатных форм.
	СписокМакетов = ЭтотОбъект.ПолучитьСписокПечатныхФорм();
	УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати,
	                                       СписокМакетов,
	                                       Новый Действие("ДействияФормыДействиеВыбратьПечатнуюФормы"));

	// Установить печатную форму по умолчанию.
	УстановитьКнопкуПечати(ЭтотОбъект.Метаданные().Имя, ЭтаФорма, СписокМакетов, мПечатнаяФормаПоУмолчанию);

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	УстановитьВидимостьСерииНоменклатуры(мКолонкиТовары);

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимостьДоступность();

	//ОбновитьМенюКнопкиЗаполнить();

	// включим режим вывода строк
	ВывестиИнформациюНаДисплейПокупателя("ВключитьРежимВыводаСтрок");


	// установим доступность колонки "Цена" для редактирования
	мМожноМенятьЦенуВДокументе = РазрешитьРедактированиеЦенВДокументах()
		ИЛИ КассаККМ.РазрешитьМенятьЦеныВЧекеККМВЛюбомСлучае;

	ЭлементыФормы.Товары.Колонки.Цена.ЭлементУправления.ТолькоПросмотр                 = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.Товары.Колонки.Сумма.ЭлементУправления.ТолькоПросмотр                = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.Товары.Колонки.ПроцентСкидкиНаценки.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;

	мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
	мМинимальныеЦены = Новый ТаблицаЗначений;
	мМинимальныеЦены.Колонки.Добавить("Номенклатура");
	мМинимальныеЦены.Колонки.Добавить("ХарактеристикаНоменклатуры");
	мМинимальныеЦены.Колонки.Добавить("Цена");

	мСписокФильтров = ПолучитьЗначениеПраваПользователя(
					ПланыВидовХарактеристик.ПраваПользователей.НеОтпускатьТоварСЦенойНижеОпределенногоТипа,
					Неопределено);

	Если ЧекПробитНаККМ Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	ЭлементыФормы.НомерСекции.Заголовок = Склад.НомерСекции;
	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 

	
КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	Если ЧекПробитНаККМ Тогда
		ЭлементыФормы.ЧекККМПробит.Заголовок = "Чек пробит";
		ЭлементыФормы.НомерЧекаККМ.Заголовок = НомерЧекаККМ;
	Иначе
		ЭлементыФормы.ЧекККМПробит.Заголовок = "";
		ЭлементыФормы.НомерЧекаККМ.Заголовок = "";
	КонецЕсли;
    
	ОбновитьПодвал();

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);
		ИначеЕсли Команда = "ЗаполнениеТабличныхЧастей" Тогда

			Если ЗначениеВыбора.ЗаполнятьТовары Тогда
				ОбработкаЗаполнения(Товары, ЗначениеВыбора.Товары);
			КонецЕсли;
	
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	Если ЧекПробитНаККМ Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	ВывестиИнформациюНаДисплейПокупателя("ОтобразитьПустыеСтроки");
	Если ЭлементыФормы.ТекущиеВесы.Значение <> Неопределено Тогда
		СохранитьЗначение("ВесыПредыдущегоСеанса", ЭлементыФормы.ТекущиеВесы.Значение);
	КонецЕсли;

КонецПроцедуры

// Обработчик внешнего события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	Если глТорговоеОборудование <> Неопределено Тогда
		СтруктураПараметров = Новый Структура();
		Если Событие = "BarCodeValue" Тогда

			Команда         = "ПодборВТабличнуюЧастьТовары";
			Валюта          = мВалютаРегламентированногоУчета;
			ИмяТабличнойЧасти = "Товары";

			ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);

			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("Команда"              , Команда);
			СтруктураПараметров.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
			СтруктураПараметров.Вставить("ТипЦен"               , ТипЦен);
			СтруктураПараметров.Вставить("СпособЗаполненияЦен"  , Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);
			СтруктураПараметров.Вставить("ВалютаЦены"           , Валюта);
			СтруктураПараметров.Вставить("ИмяТабличнойЧасти"    , ИмяТабличнойЧасти);

			глТорговоеОборудование.ОбработатьВнешнееСобытиеОтСканераДляФормы(ЭтаФорма, ЭтотОбъект, СтруктураПараметров, Данные);

		ИначеЕсли Событие = "MagneticStripeCardValue" Тогда
			СтруктураПараметров.Вставить("Команда"              , "");
			глТорговоеОборудование.ОбработатьВнешнееСобытиеОтРидераДляФормы(ЭтаФорма, ЭтотОбъект, СтруктураПараметров, Данные);
		КонецЕсли;

		Команда = "";
		СтруктураПараметров.Свойство("Команда", Команда);
		//Расчет скидок
		Если РассчитыватьАвтоматическиеСкидки()
			И Команда = "РассчитатьДисконтныеСкидки"Тогда
			мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
			СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
			СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
			СтруктураПараметров.Вставить("ВидОплаты"     ,                       БезналичнаяОплата);
			РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ВнешнееСобытие()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта "Из терминала сбора данных"
// меню кнопки "Заполнить" командной панели табличного поля "Товары"
//
Процедура КоманднаяПанельТоварыИзТерминалаСбораДанных(Кнопка)
	Перем Ответ, Данные, ВремТовар, ВремЕдиница;
	
	Если глТорговоеОборудование = Неопределено Тогда
		Предупреждение("Торговое оборудование не подключено");
	ИначеЕсли глТорговоеОборудование.млТерминал.Количество() = 0 Тогда
		Предупреждение("Терминал сбора данных не подключен");
	Иначе
		Если глТорговоеОборудование.млТерминал.Количество() = 1 Тогда

			РезультатВыбора = глТорговоеОборудование.млТерминал[0];

		Иначе

			СписокТерминаловСбораДанных = Новый СписокЗначений;
			Для Каждого ТерминалСбораДанных из глТорговоеОборудование.млТерминал Цикл
				СписокТерминаловСбораДанных.Добавить(ТерминалСбораДанных, ТерминалСбораДанных.Модель);
			КонецЦикла;
			РезультатВыбора = СписокТерминаловСбораДанных.ВыбратьЭлемент("Выберите терминал сбора данных");
			Если РезультатВыбора = Неопределено Тогда
				Возврат;
			КонецЕсли;
			РезультатВыбора = РезультатВыбора.Значение;

		КонецЕсли;

		Ответ = глТорговоеОборудование.ЗагрузитьДанныеИзТерминалаСбораДанных(РезультатВыбора, Данные);
		Если Не ПустаяСтрока(Ответ) Тогда
			Предупреждение(Ответ);
		ИначеЕсли Данные.Количество() = 0 Тогда
			Предупреждение("Из терминала сбора данных не загружено ни одного товара");
		Иначе
			Для Каждого СтрокаДанных Из Данные Цикл
				Если глТорговоеОборудование.ПолучитьТоварПоШтрихкоду(СтрокаДанных.Штрихкод, ВремТовар) Тогда

					Если ВремТовар = Неопределено
					 Или ВремТовар.Количество() = 0 Тогда
						Продолжить;
					Иначе
						ВремТовар = ВремТовар[0];
					КонецЕсли;

					// Ищем выбранную позицию в таблице подобранной номенклатуры.
					//  Если найдем - увеличим количество; не найдем - добавим новую строку.
					СтруктураОтбора = Новый Структура();
					СтруктураОтбора.Вставить("ЕдиницаИзмерения", ВремТовар.ЕдиницаИзмерения);
					СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", ВремТовар.ХарактеристикаНоменклатуры);
					СтруктураОтбора.Вставить("СерияНоменклатуры", ВремТовар.СерияНоменклатуры);
					СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(Товары, СтруктураОтбора);
					Если СтрокаТабличнойЧасти <> Неопределено Тогда

						// Нашли, увеличиваем количество в первой найденной строке.
						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаДанных.Количество;

						РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
					Иначе

						// Не нашли - добавляем новую строку.
						СтрокаТабличнойЧасти = Товары.Добавить();
						СтрокаТабличнойЧасти.Номенклатура               = ВремТовар.Номенклатура;
						СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = ВремТовар.ХарактеристикаНоменклатуры;
						СтрокаТабличнойЧасти.СерияНоменклатуры          = ВремТовар.СерияНоменклатуры;
						СтрокаТабличнойЧасти.Количество                 = СтрокаДанных.Количество;
						СтрокаТабличнойЧасти.ЕдиницаИзмерения           = ВремТовар.ЕдиницаИзмерения;
						СтрокаТабличнойЧасти.Коэффициент                = ВремТовар.ЕдиницаИзмерения.Коэффициент;

						// Выполнить общие действия для всех документов при изменении номенклатуры.
						ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

						ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

						РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

					КонецЕсли;

					ЭлементыФормы.Товары.ТекущаяСтрока  = СтрокаТабличнойЧасти;
					ЭлементыФормы.Товары.ТекущаяКолонка = ЭлементыФормы.Товары.Колонки["Количество"];
				КонецЕсли;
			КонецЦикла;

			//Расчет скидок
			Если РассчитыватьАвтоматическиеСкидки() Тогда
				мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
				СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
				СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
				СтруктураПараметров.Вставить("ВидОплаты"     ,                       БезналичнаяОплата);
				РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
			КонецЕсли;

			Ответ = Вопрос("Очистить память терминала сбора данных?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Ответ = глТорговоеОборудование.ОчиститьПамятьТерминалаСбораДанных(РезультатВыбора);
				Если Не ПустаяСтрока(Ответ) Тогда
					Предупреждение(Ответ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	НапечататьДокументПоУмолчанию(ЭтотОбъект, глТекущийПользователь, мПечатнаяФормаПоУмолчанию);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийЧекККМ[Кнопка.Имя];
	КонецЕсли;

	// Отобразить в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Установить видимость реквизитов по виду операции.
	УстановитьВидимостьДоступность();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
//
Процедура ДействияФормыДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = Кнопка.Текст;
		СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		СписокМакетов = ПолучитьСписокПечатныхФорм();
		СтрокаМакетаВСписке = СписокМакетов.НайтиПоЗначению(Кнопка.Имя);
		Если СтрокаМакетаВСписке <> Неопределено Тогда
			Печать(СтрокаМакетаВСписке.Значение);
			СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
			СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;			
			
		Иначе
			СсылкаВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Кнопка.Имя, "_", "-")));
			Печать(СсылкаВнешнейФормы);
			СтруктураМакета.Макет = СсылкаВнешнейФормы;
			СтруктураМакета.ПредставлениеМакета = Кнопка.Текст;
		КонецЕсли;		
		
		мПечатнаяФормаПоУмолчанию = СтруктураМакета.Макет;
		СохранитьТекущуюКнопкуПечати(ЭтотОбъект.Метаданные().Имя, СтруктураМакета);
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВидОплаты"     ,                       БезналичнаяОплата);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода типа цен.
//
Процедура ТипЦенПриИзменении(Элемент)

	Ответ = КодВозвратаДиалога.Да;
	ПриИзмененииТипаЦен(Ответ);

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОбновитьФормуПодбора("ТипЦен");

		//Расчет скидок
		Если РассчитыватьАвтоматическиеСкидки() Тогда

			мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
			СтруктураПараметров      = Новый Структура;
			СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
			СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
			СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
			СтруктураПараметров.Вставить("ВидОплаты"     ,                       БезналичнаяОплата);
			РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Чек".
//
Процедура ЧекККМПриИзменении(Элемент)

	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		Если НЕ ЗначениеНеЗаполнено(ЧекККМ) Тогда

			Если ЗначениеНеЗаполнено(КассаККМ) Тогда
				КассаККМ = ЧекККМ.КассаККМ;
			КонецЕсли;

			Если ЗначениеНеЗаполнено(Склад) Тогда
				Склад = ЧекККМ.Склад;
			КонецЕсли;

			Если ДисконтнаяКарта <> ЧекККМ.ДисконтнаяКарта Тогда
				ДисконтнаяКарта = ЧекККМ.ДисконтнаяКарта;
			КонецЕсли;

		КонецЕсли;

		Для каждого СтрокаТовара Из Товары Цикл
			СтрокаТовара.ПроцентАвтоматическихСкидок = 0;
		КонецЦикла;

	КонецЕсли;
  //  ЧекККМНачалоВыбора();
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода Склад
//
Процедура СкладНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.НеРавно, СтандартнаяОбработка);

КонецПроцедуры // СкладНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода Склад
//
Процедура СкладПриИзменении(Элемент)

	Если Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда

		// установим тип цен и сделаем обновим доступность
		ТипЦен = Склад.ТипЦенРозничнойТорговли;
		ПриИзмененииТипаЦен(Ложь);

	КонецЕсли;

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда

		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров      = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВидОплаты"     ,                       БезналичнаяОплата);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);

	КонецЕсли;

	ЭлементыФормы.НомерСекции.Заголовок = Склад.НомерСекции;
	УстановитьВидимостьДоступность();
    УстановитьОрганизациюКассуККМ();
КонецПроцедуры // СкладПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля "КассаККМ".
//
Процедура КассаККМОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ВывестиИнформациюНаДисплейПокупателя("ОтобразитьПустыеСтроки");

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ТекущиеВесы".
//
Процедура ТекущиеВесыПриИзменении(Элемент)

	СохранитьЗначение("ВесыПредыдущегоСеанса", ЭлементыФормы.ТекущиеВесы.Значение);

КонецПроцедуры

// Процедура - обработчик события "Нажатие" поля "КнопкаВес".
//
Процедура КнопкаВесНажатие(Элемент)

	ВесТовара = 0;
	Ответ = глТорговоеОборудование.ВыполнитьОперациюВесов(ЭлементыФормы.ТекущиеВесы.Значение, "ПолучитьВес", ВесТовара);

	Если ПустаяСтрока(Ответ) Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			Возврат;
		КонецЕсли;
		СтрокаТабличнойЧасти.Количество = ВесТовара;

		//Расчет скидок
		Если РассчитыватьАвтоматическиеСкидки() Тогда
			мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
			СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
			СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
			СтруктураПараметров.Вставить("ВидОплаты"     ,                       БезналичнаяОплата);
			РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
		Иначе// Рассчитать реквизиты табличной части.
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		КонецЕсли;
	Иначе
		Предупреждение(Ответ);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" элемента формы ДисконтнаяКарта
//
Процедура ДисконтнаяКартаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка    = Ложь;
	ФормаВыбора             = Справочники.ИнформационныеКарты.ПолучитьФормуВыбора(,Элемент);
	ФормаВыбора.РежимВыбора = Истина;

	ФормаВыбора.СправочникСписок.Отбор.ТипКарты.Значение      = Перечисления.ТипыИнформационныхКарт.Дисконтная;
	ФормаВыбора.СправочникСписок.Отбор.ТипКарты.Использование = Истина;

	ФормаВыбора.СправочникСписок.Отбор.ТипКарты.ВидСравнения          = ВидСравнения.Равно;

	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "Открытие" поля ввода "ДисконтнаяКарта"
//
Процедура ДисконтнаяКартаОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если НЕ ЗначениеНеЗаполнено(Элемент.Значение) Тогда
		Процент = Элемент.Значение.ПроцентСкидки;
		Элемент.Значение.ПолучитьФорму(, ЭтаФорма, ЭтаФорма).ОткрытьМодально();
		Если Элемент.Значение.ПроцентСкидки <> Процент Тогда
			//Расчет скидок
			Если РассчитыватьАвтоматическиеСкидки() Тогда
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
				СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
				СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
				СтруктураПараметров.Вставить("ВидОплаты"     ,                       БезналичнаяОплата);
				РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ДисконтнаяКарта".
//
Процедура ДисконтнаяКартаПриИзменении(Элемент)

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВидОплаты"     ,                       БезналичнаяОплата);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "СуммаБезналичнойОплаты".
//
Процедура СуммаБезналичнойОплатыПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
	Если НЕ ЗначениеНеЗаполнено(БезналичнаяОплата)
	   И РассчитыватьАвтоматическиеСкидки() Тогда

		//Расчет скидок
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации" ,                       Перечисления.ВидыСкидок.Розничная);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВидОплаты"     ,                       БезналичнаяОплата);

		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля "БезналичнаяОплата".
//
Процедура БезналичнаяОплатаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.ВидыОплатЧекаККМ.ПолучитьФормуВыбора(,Элемент);
	ФормаВыбора.СправочникСписок.Отбор.ВидДенежныхСредств.Значение = Перечисления.ВидыДенежныхСредств.Наличные;
	ФормаВыбора.СправочникСписок.Отбор.ВидДенежныхСредств.Использование = Истина;
	ФормаВыбора.СправочникСписок.Отбор.ВидДенежныхСредств.ВидСравнения = ВидСравнения.НеРавно;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидДенежныхСредств.Доступность = Ложь;
	ФормаВыбора.ОткрытьМодально();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "БезналичнаяОплата".
//
Процедура БезналичнаяОплатаПриИзменении(Элемент)

	Если РассчитыватьАвтоматическиеСкидки() Тогда

		//Расчет скидок
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации" ,                       Перечисления.ВидыСкидок.Розничная);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВидОплаты"     ,                       БезналичнаяОплата);

		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
// "Товары".
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	СуммаСтроки = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;
	Если (НоваяСтрока) И СуммаСтроки > 0 Тогда

		//Расчет скидок
		Если РассчитыватьАвтоматическиеСкидки() Тогда
			мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтроки;
			СтруктураПараметров      = Новый Структура;
			СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
			СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
			СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
			СтруктураПараметров.Вставить("ВидОплаты"     ,                       БезналичнаяОплата);
			РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
		КонецЕсли;

	КонецЕсли;

	// Установим способ редактирования цены.
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Номенклатура);
	КонецЕсли;

КонецПроцедуры // ТоварыПриНачалеРедактирования()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	СуммаСтроки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

		мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения - СуммаСтроки;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВидОплаты"     ,                       БезналичнаяОплата);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	СуммаСтроки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти);

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

		мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения - СуммаСтроки;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВидОплаты"     ,                       БезналичнаяОплата);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВидОплаты"     ,                       БезналичнаяОплата);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

КонецПроцедуры // ТоварыЦенаНачалоВыбораИзСписка()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВидОплаты"     ,                       БезналичнаяОплата);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля процента скидки-наценки
// в строке табличной части "Товары".
//
Процедура ТоварыПроцентСкидкиНаценкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры

Процедура ТоварыПередУдалением(Элемент, Отказ)
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;
	мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок - СуммаСтроки;
КонецПроцедуры

// Процедура - обработчик события "ПослеУдаления" табличной части
// "Товары".
//
Процедура ТоварыПослеУдаления(Элемент)

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВидОплаты"     ,                       БезналичнаяОплата);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);

	КонецЕсли;

КонецПроцедуры // ТоварыПослеУдаления()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части "Товары".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	ПоказатьСуммуБезСкидок(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Цена, ДанныеСтроки.Количество);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

	// Выполнить общие действия для всех документов при изменении Единица.
	ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

		мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения - СуммаСтроки;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВидОплаты"     ,                       БезналичнаяОплата);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры


Процедура ОбработкаЗаполнения(ТабличнаяЧасть, ТаблицаИсточник) Экспорт

	// Сформировать таблицу по ценам и скидкам
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ЗаказПокупателя", Сделка);
	Запрос.УстановитьПараметр("СтатусТары", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);

	ИмяРеквизитаКоличества = "Количество";

	Если ТабличнаяЧасть = Товары Тогда

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ОстаткиЗаказ.Номенклатура                         КАК Номенклатура,
		|	ОстаткиЗаказ.ХарактеристикаНоменклатуры           КАК ХарактеристикаНоменклатуры,
		|	ОстаткиЗаказ.Цена                                 КАК Цена,
		|	ОстаткиЗаказ.ЕдиницаИзмерения                     КАК ЕдиницаИзмерения,
		|	ОстаткиЗаказ.ЕдиницаИзмерения.Коэффициент         КАК Коэффициент,
		|	ОстаткиЗаказ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
		|	ОстаткиЗаказ.ПроцентСкидкиНаценки                 КАК ПроцентСкидкиНаценки,
		|	ОстаткиЗаказ.ПроцентАвтоматическихСкидок          КАК ПроцентАвтоматическихСкидок,
		|	ОстаткиЗаказ.УсловиеАвтоматическойСкидки          КАК УсловиеАвтоматическойСкидки,
		|	ОстаткиЗаказ.ЗначениеУсловияАвтоматическойСкидки  КАК ЗначениеУсловияАвтоматическойСкидки,
		|	СУММА(ОстаткиЗаказ.КоличествоОстаток)             КАК Количество
		|
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента 
		|	                                              И ЗаказПокупателя = &ЗаказПокупателя
		|	                                              И СтатусПартии <> &СтатусТары) КАК ОстаткиЗаказ
		|
		|	СГРУППИРОВАТЬ ПО
		|	ОстаткиЗаказ.Номенклатура,
		|	ОстаткиЗаказ.ХарактеристикаНоменклатуры,
		|	ОстаткиЗаказ.Цена,
		|	ОстаткиЗаказ.ЕдиницаИзмерения,
		|	ОстаткиЗаказ.ЕдиницаИзмерения.Коэффициент,
		|	ОстаткиЗаказ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
		|	ОстаткиЗаказ.ПроцентСкидкиНаценки,
		|	ОстаткиЗаказ.ПроцентАвтоматическихСкидок,
		|	ОстаткиЗаказ.УсловиеАвтоматическойСкидки,
		|	ОстаткиЗаказ.ЗначениеУсловияАвтоматическойСкидки
		|";

		ИмяРеквизитаКоличества = "Количество";

		ТаблицаИсточник.Колонки.Добавить("Коэффициент");
		ТаблицаИсточник.Колонки.Добавить("ПроцентСкидкиНаценки");
		ТаблицаИсточник.Колонки.Добавить("ПроцентАвтоматическихСкидок");
		ТаблицаИсточник.Колонки.Добавить("УсловиеАвтоматическойСкидки");
		ТаблицаИсточник.Колонки.Добавить("ЗначениеУсловияАвтоматическойСкидки");

		//ТаблицаИсточник.Колонки.Добавить("ПроцентСкидкиНаценки");
	КонецЕсли;

	ТаблицаЦенСкидок = Запрос.Выполнить().Выгрузить();

	ТаблицаИсточник.Колонки.Добавить("Цена");

	НомерСтроки = 0;
	Пока НомерСтроки < ТаблицаИсточник.Количество() Цикл

		СтрокаТаблицы = ТаблицаИсточник[НомерСтроки];

		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура",                   СтрокаТаблицы.Номенклатура);
		Если ТабличнаяЧасть = Товары Тогда
			СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаТаблицы.ХарактеристикаНоменклатуры);
		КонецЕсли;

		ОтобранныеСтрокиТаблицыЦенСкидок = ТаблицаЦенСкидок.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаТаблицыЦенСкидок Из ОтобранныеСтрокиТаблицыЦенСкидок Цикл

			Если СтрокаТаблицыЦенСкидок.Количество > 0 Тогда

				Если СтрокаТаблицыЦенСкидок.Количество >= СтрокаТаблицы[ИмяРеквизитаКоличества] Тогда

					СтрокаТаблицы.Цена = СтрокаТаблицыЦенСкидок.Цена;

					Если ТабличнаяЧасть = Товары   Тогда
					 //Или ТабличнаяЧасть = Услуги Тогда
						СтрокаТаблицы.ПроцентСкидкиНаценки = СтрокаТаблицыЦенСкидок.ПроцентСкидкиНаценки;

						Если ТабличнаяЧасть = Товары Тогда
                            СтрокаТаблицы.Склад=Склад;
							СтрокаТаблицы.ЕдиницаИзмерения = СтрокаТаблицыЦенСкидок.ЕдиницаИзмерения;
							СтрокаТаблицы.Коэффициент      = СтрокаТаблицыЦенСкидок.Коэффициент;

							СтрокаТаблицы.Количество = ?(ЗначениеНеЗаполнено(СтрокаТаблицы.Коэффициент), 0,
							                             СтрокаТаблицы.Количество
							                             * СтрокаТаблицыЦенСкидок.КоэффициентЕдиницыХранения
							                             / СтрокаТаблицы.Коэффициент);

							СтрокаТаблицы.ПроцентАвтоматическихСкидок = СтрокаТаблицыЦенСкидок.ПроцентАвтоматическихСкидок;
							СтрокаТаблицы.УсловиеАвтоматическойСкидки = СтрокаТаблицыЦенСкидок.УсловиеАвтоматическойСкидки;
							СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки = СтрокаТаблицыЦенСкидок.ЗначениеУсловияАвтоматическойСкидки;
						КонецЕсли;
					КонецЕсли;

					СтрокаТаблицыЦенСкидок.Количество = СтрокаТаблицыЦенСкидок.Количество - СтрокаТаблицы[ИмяРеквизитаКоличества];

				Иначе

					// Разобьем на две строки
					КопияСтроки = ТаблицаИсточник.Вставить(НомерСтроки + 1);

					// Скопируем строку
					Для Каждого КолонкаТаблицы Из ТаблицаИсточник.Колонки Цикл
						КопияСтроки[КолонкаТаблицы.Имя] = СтрокаТаблицы[КолонкаТаблицы.Имя];
					КонецЦикла;

					СтрокаТаблицы[ИмяРеквизитаКоличества] = СтрокаТаблицыЦенСкидок.Количество;
					СтрокаТаблицы.Цена                    = СтрокаТаблицыЦенСкидок.Цена;

					Если ТабличнаяЧасть = Товары   Тогда
					 //Или ТабличнаяЧасть = Услуги 
						СтрокаТаблицы.ПроцентСкидкиНаценки = СтрокаТаблицыЦенСкидок.ПроцентСкидкиНаценки;
						Если ТабличнаяЧасть = Товары Тогда
							СтрокаТаблицы.Склад=Склад;
							СтрокаТаблицы.ПроцентАвтоматическихСкидок = СтрокаТаблицыЦенСкидок.ПроцентАвтоматическихСкидок;
							СтрокаТаблицы.ЕдиницаИзмерения            = СтрокаТаблицыЦенСкидок.ЕдиницаИзмерения;
							СтрокаТаблицы.Коэффициент                 = СтрокаТаблицыЦенСкидок.Коэффициент;

							СтрокаТаблицы.Количество = ?(ЗначениеНеЗаполнено(СтрокаТаблицы.Коэффициент), 0,
							                             СтрокаТаблицы.Количество
							                             * СтрокаТаблицыЦенСкидок.КоэффициентЕдиницыХранения
							                             / СтрокаТаблицы.Коэффициент);

						КонецЕсли;
					КонецЕсли;

					КопияСтроки[ИмяРеквизитаКоличества] = КопияСтроки[ИмяРеквизитаКоличества] - СтрокаТаблицы[ИмяРеквизитаКоличества];

				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		НомерСтроки = НомерСтроки + 1;

	КонецЦикла;

	// Загрузить в документ обаботанную таблицу
	ОрганизацияЗаказа                   = Сделка.Организация;
	ДатаЗаказа                          = Сделка.Дата;
	ОрганизацияЯвляетсяПлательщикомЕНВД = УчетнаяПолитикаНалоговыйУчет("ОрганизацияЯвляетсяПлательщикомЕНВД", ОрганизацияЗаказа, ДатаЗаказа);

	ТабличнаяЧасть.Загрузить(ТаблицаИсточник);
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		Если ТабличнаяЧасть = Товары Тогда

			Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Коэффициент) Тогда
				СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			КонецЕсли;

			РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Выполнить общие действия для всех документов при изменении номенклатуры.
			ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Заполняем реквизиты табличной части.
			//ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Заполнение цены зависит от розничности операции.
			//СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(
			//								ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, 
			//								Сделка.ВалютаДокумента, ВалютаДокумента,
			//								КурсДокумента(Сделка, мВалютаРегламентированногоУчета), КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
			//								КратностьДокумента(Сделка, мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
			//								Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
			//								Сделка.СуммаВключаетНДС,
			//								ЛОЖЬ,
			//								ЛОЖЬ,
			//								ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			//РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			//ЗаполнитьКачествоНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		//ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

		//	// Выполнить общие действия для всех документов при изменении возвратной тары.
		//	ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		//	// Рассчитать реквизиты табличной части.
		//	РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		//ИначеЕсли ТабличнаяЧасть = Услуги Тогда

		//	// Заполняем реквизиты табличной части.
		//	Если ПроверитьУслугаОблагаетсяЕНВД(СтрокаТабличнойЧасти.Номенклатура, ОрганизацияЗаказа, ДатаЗаказа, ОрганизацияЯвляетсяПлательщикомЕНВД) Тогда
		//		СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		//	Иначе
		//		ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		//	КонецЕсли;
		//	ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		//	// Рассчитываем реквизиты табличной части.
		//	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		//	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ОбработкаЗаполнения()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПеретаскивание()

Процедура КоманднаяПанельТоварыПодборПоАналогам(Кнопка)
	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Склад",               Склад);
	СтруктураПараметровПодбора.Вставить("ТипЦен",              ТипЦен);
	ФормаПодбора = Обработки.ПодборПоАналогамНоменклатуры.ПолучитьФорму("Форма", ЭтаФорма, ЭтаФорма);
	ФормаПодбора.ОбработкаОбъект.СтруктураИсходныхПараметров = СтруктураПараметровПодбора;
	ФормаПодбора.Открыть();

КонецПроцедуры

Процедура КонтрагентПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ПриИзмененииЗначенияКонтрагента(ДокументОбъект);
КонецПроцедуры

Процедура КоманднаяПанельТоварыЗаполнить(Кнопка)
ФормаЗаполнения = ПолучитьФорму("ФормаЗаполненияПоЗаказу", ЭтаФорма);
ФормаЗаполнения.ПоказыватьТовары = Истина;
ФормаЗаполнения.ПоказыватьТару   = Ложь;
ФормаЗаполнения.ПоказыватьУслуги = Ложь;
ФормаЗаполнения.Реализация       = ЭтотОбъект;
ФормаЗаполнения.ОткрытьМодально();
	
КонецПроцедуры


Процедура ЧекККМНачалоВыбора(Элемент, СтандартнаяОбработка)
    СтандартнаяОбработка=Ложь;
	ФормаВыбора = ПолучитьФорму("ФормаВыбора");
	ФормаВыбора.РежимВыбора = Истина;

	ФормаВыбора.ДокументСписок.Отбор.КассаККМ.Значение = КассаККМ;
	ФормаВыбора.ДокументСписок.Отбор.КассаККМ.Использование = Истина;
	ФормаВыбора.ДокументСписок.Отбор.КассаККМ.ВидСравнения = ВидСравнения.Равно;
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.КассаККМ.Доступность = Ложь;

	ФормаВыбора.ДокументСписок.Отбор.Проведен.Значение = Истина;
	ФормаВыбора.ДокументСписок.Отбор.Проведен.Использование = Истина;
	ФормаВыбора.ДокументСписок.Отбор.Проведен.ВидСравнения = ВидСравнения.Равно;
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Проведен.Доступность = Ложь;

	ФормаВыбора.ДокументСписок.Отбор.ВидОперации.Значение = Перечисления.ВидыОперацийЧекККМ.Продажа;
	ФормаВыбора.ДокументСписок.Отбор.ВидОперации.Использование = Истина;
	ФормаВыбора.ДокументСписок.Отбор.ВидОперации.ВидСравнения = ВидСравнения.Равно;
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ВидОперации.Доступность = Ложь;

	ЧекККМ = ФормаВыбора.ОткрытьМодально();
	Если НЕ ЗначениеНеЗаполнено(ЧекККМ) Тогда
		Товары.Загрузить(ЧекККМ.Товары.Выгрузить());
		Для каждого СтрокаТовара Из Товары Цикл
			СтрокаТовара.РегистрацияПродажи = Ложь;
		КонецЦикла;
		ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
		УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
		ДисконтнаяКарта = ЧекККМ.ДисконтнаяКарта;
	КонецЕсли;

КонецПроцедуры

Процедура КонтрагентНачалоВыбора(Элемент, СтандартнаяОбработка)
	
КонецПроцедуры

Процедура УстановитьОрганизациюКассуККМ()
	Организация=РегистрыСведений.СоответствиеСкладуОрганизацииИКассыККМ.Получить(Новый Структура("Склад,Компьютер",Склад,ИмяКомпьютера())).Организация;
	КассаККМ=РегистрыСведений.СоответствиеСкладуОрганизацииИКассыККМ.Получить(Новый Структура("Склад,Компьютер",Склад,ИмяКомпьютера())).КассаККМ;
КонецПроцедуры	

Процедура СделкаПриИзменении(Элемент)
	Контрагент = Сделка.Контрагент;
	ДоговорКонтрагента = Сделка.ДоговорКонтрагента;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары = ЭлементыФормы.Товары.Колонки;