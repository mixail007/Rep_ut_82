Перем мВалютаРегламентированногоУчета Экспорт;
Перем мАннулировать Экспорт;
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Функция ЗапросОстатков(Дата, Склад, ТипЦен, Номенклатура = Неопределено) 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	Запрос.УстановитьПараметр("ВыбНоменклатура", Номенклатура);
	
	ТекстЗапроса = " 
	|ВЫБРАТЬ
	|	Подбор.Код                                      КАК Код,
	|	Подбор.ЭтоГруппа                                КАК ЭтоГруппа,
	|	Подбор.ПометкаУдаления                          КАК ПометкаУдаления,
	|	Подбор.Услуга                                   КАК Услуга,
	|	Подбор.Номенклатура                             КАК Номенклатура,
	|	Подбор.Номенклатура.Ссылка						КАК Ссылка,
	|	Подбор.Родитель                                 КАК Родитель,
	|	ВЫБОР
	|		КОГДА Подбор.Цена ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ Подбор.Цена											
	|	КОНЕЦ              								КАК Цена,
	|	ВЫБОР
	|		КОГДА Подбор.КоличествоСвободныйОстаток ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ Подбор.КоличествоСвободныйОстаток
	|	КОНЕЦ              								КАК КоличествоСвободныйОстаток,
	|	Подбор.ЕдиницаИзмерения                         КАК ЕдиницаИзмерения,
	|	Подбор.Номенклатура.Представление               КАК ПредставлениеНоменклатура,
	|	Подбор.ЕдиницаИзмерения.Представление           КАК ПредставлениеЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА Подбор.ЭтоГруппа ТОГДА ""Группа""
	|	КОНЕЦ                                           КАК ПредставлениеНоменклатурнаяГруппа
	|ИЗ
	|(
	|ВЫБРАТЬ
	|	СправочникНоменклатура.Код                               КАК Код,
	|	СправочникНоменклатура.ЭтоГруппа                         КАК ЭтоГруппа,
	|	СправочникНоменклатура.ПометкаУдаления                   КАК ПометкаУдаления,
	|	СправочникНоменклатура.Набор                             КАК Набор,
	|	СправочникНоменклатура.Услуга                            КАК Услуга,
	|	СправочникНоменклатура.Ссылка                            КАК Номенклатура,
	|	СправочникНоменклатура.Родитель                          КАК Родитель,
	|	СУММА(Остатки.КоличествоСвободныйОстаток)                КАК КоличествоСвободныйОстаток,
	|	МАКСИМУМ(СправочникНоменклатура.ЕдиницаХраненияОстатков) КАК ЕдиницаИзмерения,
	|	МАКСИМУМ(ЦеныСрезПоследних.Цена)						 КАК Цена
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ	
	|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, ТипЦен = &ТипЦен) КАК ЦеныСрезПоследних
	|	ПО
	|		ЦеныСрезПоследних.Номенклатура = СправочникНоменклатура.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	(
	|	ВЫБРАТЬ
	|		ВЫБОР КОГДА ТоварыНаСкладах.Номенклатура ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТоварыНаСкладах.Номенклатура КОНЕЦ                  КАК Номенклатура,
	|		СУММА(ВЫБОР КОГДА ТоварыНаСкладах.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТоварыНаСкладах.КоличествоОстаток КОНЕЦ) КАК КоличествоСвободныйОстаток
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладах.Остатки(&Дата, Склад = &Склад)  КАК ТоварыНаСкладах
	|
	|	СГРУППИРОВАТЬ ПО
	|		ВЫБОР КОГДА ТоварыНаСкладах.Номенклатура ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТоварыНаСкладах.Номенклатура КОНЕЦ
	|	) КАК Остатки
	|
	|ПО
	|	Остатки.Номенклатура = СправочникНоменклатура.Ссылка
	|
	|ГДЕ
	|	((СправочникНоменклатура.Ссылка.ЭтоГруппа ИЛИ СправочникНоменклатура.Набор)
	|	ИЛИ
	|	(НЕ СправочникНоменклатура.Ссылка.ЭтоГруппа И СправочникНоменклатура.Ссылка.Услуга = Истина)
	|	ИЛИ
	|	(Остатки.КоличествоСвободныйОстаток > 0))
	|	" + ?(Номенклатура <> Неопределено, "И СправочникНоменклатура.Ссылка = &ВыбНоменклатура", "") + "
	|
	|СГРУППИРОВАТЬ ПО
	|	СправочникНоменклатура.Ссылка
	|
	|) КАК Подбор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Подбор.ЭтоГруппа УБЫВ,
	|	Подбор.Номенклатура.Наименование
	|";	
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;

КонецФункции // ЗапросОстатков()

Функция ПолучитьОстаткиТоваровТСЦ (Номенклатура,Склад=Неопределено) Экспорт 
	Запрос= Новый Запрос("ВЫБРАТЬ Номенклатура,КоличествоОстаток КоличествоСвободныйОстаток ИЗ РегистрНакопления.ТоварыНаСкладах.Остатки(,Склад = &Склад И Номенклатура = &Номенклатура)");
	Запрос.УстановитьПараметр("Склад",Склад);															
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	Возврат (Запрос.Выполнить().Выгрузить());
КонецФункции

Функция ПолучитьОстаткиТоваров(Номенклатура) Экспорт 
	
	Дата = ТекущаяДата();
	
	Склад = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойСклад");
	
	ТипЦен = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойТипЦенПродажи");
	
	Запрос = ЗапросОстатков(Дата, Склад, ТипЦен, Номенклатура);
	
	ТаблицаРезультатов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРезультатов;
	
КонецФункции

#Если Клиент Тогда

// Функция - Печать чека на фискальном регистраторе
//
// Параметры:
//  МодельТорговогоОборудования - модель торгового оборудования,
//  НомерЛУ                     - номер логического устройства торгового оборудования,
//  КассаККМ                    - элемент справочника "КассыККМ".
//
// Возвращаемое значение:
//  Истина если чек напечатан, в противном случае Ложь.
//
Функция ПечатьЧекаНаФискальномРегистраторе(МодельТорговогоОборудования, НомерЛУ, КассаККМ)
	Перем Ответ;

	СписокТоваров = Новый ТаблицаЗначений;
	СписокТоваров.Колонки.Добавить("Товар");
	СписокТоваров.Колонки.Добавить("Цена");
	СписокТоваров.Колонки.Добавить("Колво");
	СписокТоваров.Колонки.Добавить("Скидка");

	Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
		Стр = СписокТоваров.Добавить();
		Стр.Товар  = СокрЛП(СтрокаТабличнойЧасти.Номенклатура);
		Стр.Цена   = СтрокаТабличнойЧасти.Цена;
		Стр.Колво  = СтрокаТабличнойЧасти.Количество;
		Стр.Скидка = СтрокаТабличнойЧасти.ПроцентСкидкиНаценки + СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок;
	КонецЦикла;

	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		ПризнВозврата = Истина;
	Иначе
		ПризнВозврата = Ложь;
	КонецЕсли;

	СуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
	СуммаДокументаСоСкидками = Товары.Итог("Сумма");

	// параметры фискального регистратора
	Параметры = Новый Структура();
	Параметры.Вставить("СписокТоваров", СписокТоваров                        );
	Параметры.Вставить("Получено"     , СуммаДокументаСоСкидками);
	Параметры.Вставить("Скидка"       , СуммаДокументаБезСкидок - СуммаДокументаСоСкидками);
	Параметры.Вставить("ЧекНаВозврат" , ПризнВозврата                        );
	Параметры.Вставить("НомерСекции"  , Склад.НомерСекции            );
	Параметры.Вставить("КассаККМ"     , КассаККМ                             );
	Параметры.Вставить("НомерЛУ"      , НомерЛУ                              );

	глТорговоеОборудование.ПечататьЧек(МодельТорговогоОборудования, Параметры, Ответ);

	Если ПустаяСтрока(Ответ) Тогда
		Параметры.Свойство("НомерЧека", НомерЧекаККМ);
		Параметры.Свойство("НомерСмены", НомерСменыККМ);
		ЧекПробитНаККМ = Истина;
		Записать();

		// Откроем денежный ящик, если он подключен
		глТорговоеОборудование.ОткрытьДенежныйЯщик(КассаККМ);

		Возврат Истина;
	Иначе
//		Сообщить(Ответ);
		Возврат Ложь;
	КонецЕсли;

КонецФункции

// Функция - Закрытие чека на фискальном регистраторе
//
// Параметры:
//  МодельТорговогоОборудования - модель торгового оборудования,
//  НомерЛУ                     - номер логического устройства торгового оборудования,
//  КассаККМ                    - элемент справочника "КассыККМ".
//
// Возвращаемое значение:
//  Истина если чек напечатан, в противном случае Ложь.
//
Функция ЗакрытиеЧекаНаФискальномРегистраторе(СтрокаФР, Параметры, Ответ)

	СуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
	СуммаДокументаСоСкидками = Товары.Итог("Сумма");
	// параметры фискального регистратора
	Параметры.Вставить("Получено"     , СуммаДокументаСоСкидками);
	Параметры.Вставить("Скидка"       , СуммаДокументаБезСкидок - СуммаДокументаСоСкидками);
	Параметры.Вставить("ЧекНаВозврат" , Ложь);
	Параметры.Вставить("НомерСекции"  , Склад.НомерСекции            );
	Параметры.Вставить("КассаККМ"     , КассаККМ                             );


	глТорговоеОборудование.ЗакрытьЧек(СтрокаФР, Параметры, Ответ);

	Если ПустаяСтрока(Ответ) Тогда
		Параметры.Свойство("НомерЧека", НомерЧекаККМ);
		Параметры.Свойство("НомерСмены", НомерСменыККМ);
		ЧекПробитНаККМ = Истина;
		Записать();

		// Откроем денежный ящик, если он подключен
		глТорговоеОборудование.ОткрытьДенежныйЯщик(КассаККМ);

		Возврат Истина;
	Иначе
		Сообщить(Ответ);
		Возврат Ложь;
	КонецЕсли;

КонецФункции

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьЧека()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ОсновнаяОрганизация", ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяОрганизация"));

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокЧек.Номер,
	|	ДокЧек.Дата,
	|	ДокЧек.КассаККМ,
	|	ДокЧек.КассаККМ.Представление       КАК Покупатель,
	|	Организация.Ссылка                  КАК Организация,
	|	Организация.Представление           КАК Поставщик,
	|	ДокЧек.СуммаДокумента,
	|	ДокЧек.Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.Представление      КАК Товар,
	|		Номенклатура.НаименованиеПолное КАК ТоварПолноеНаименование,
	|		Номенклатура.Код                КАК Код,
	|		Номенклатура.Артикул            Как Артикул,
	|		Количество,
	|		ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|		Цена,
	|		ПроцентСкидкиНаценки            КАК Скидка,
	|		ПроцентАвтоматическихСкидок     КАК СкидкаАвтоматическая,
	|		Сумма,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		СерияНоменклатуры КАК Серия
	|	)
	|ИЗ
	|	Документ.ЧекККМАвтозапчасти КАК ДокЧек
	|
	|ГДЕ
	|	ДокЧек.Ссылка        = &ТекущийДокумент
	|	И Организация.Ссылка = &ОсновнаяОрганизация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокЧек.Товары.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Чек_Накладная";

	Макет = ПолучитьМакет("Накладная");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Чек");
	ТабДокумент.Вывести(ОбластьМакета);

	ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
	ОбластьМакета.Параметры.Поставщик = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	ЕстьСкидки = Ложь;
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		Если ВыборкаСтрокТовары.Скидка + ВыборкаСтрокТовары.СкидкаАвтоматическая <> 0 Тогда
			ЕстьСкидки = Истина;
		КонецЕсли; 
	КонецЦикла;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьСуммы);

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	Если НЕ ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("СуммаБезСкидки").ШиринаКолонки +
											Макет.Область("СуммаСкидки").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма          = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар       = ?(ЗначениеНеЗаполнено(ВыборкаСтрокТовары.ТоварПолноеНаименование),
		                                     ВыборкаСтрокТовары.Товар, ВыборкаСтрокТовары.ТоварПолноеНаименование)+
		                                     ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьДанных);

		Скидка = ВыборкаСтрокТовары.Цена * ВыборкаСтрокТовары.Количество - ВыборкаСтрокТовары.Сумма;
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = Сумма;
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ВыборкаСтрокТовары.Количество()
	                                       + ", на сумму " + ФорматСумм(Шапка.СуммаДокумента, мВалютаРегламентированногоУчета);
	ОбластьМакета.Параметры.СуммаПрописью  = СформироватьСуммуПрописью(Шапка.СуммаДокумента, мВалютаРегламентированногоУчета);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьЧека()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "Чек" Тогда
		// Для печати чека нужна настройка организации по умолчанию у пользователя.
		// Без нее печать невозможна.
		Если ЗначениеНеЗаполнено(ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяОрганизация")) Тогда
			Предупреждение("Для текущего пользователя """ + СокрЛП(глТекущийПользователь) 
			               + """ не задана основная организация."
			               + Символы.ПС + "Печать чека невозможна."); 
			Возврат;
		КонецЕсли; 

		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьЧека();
		
	ИначеЕсли ИмяМакета="ТоварныйЧек" Тогда
		Если ЗначениеНеЗаполнено(ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяОрганизация")) Тогда
			Предупреждение("Для текущего пользователя """ + СокрЛП(глТекущийПользователь) 
			               + """ не задана основная организация."
			               + Символы.ПС + "Печать чека невозможна."); 
			Возврат;
		КонецЕсли; 
		
		ТабДокумент = ПечатьТоварногоЧека();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();
	
	КонецЕсли;

	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;

	СписокМакетов.Добавить("Чек","Чек");
	СписокМакетов.Добавить("ТоварныйЧек","Товарный чек");

	ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

Функция ПечатьТоварногоЧека() Экспорт
	КоличествоСтрокТоварногоЧека = 8;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Чек_Накладная";

	Макет = ПолучитьОбщийМакет("ТоварныйЧек");
	
	// Выводим шапку чека

	ОбластьШапки 		= Макет.ПолучитьОбласть("Шапка");
	ОбластьСтроки		= Макет.ПолучитьОбласть("Строка");
	ОбластьПодвала		= Макет.ПолучитьОбласть("Подвал");
	ОбластьПустойСтроки	= Макет.ПолучитьОбласть("ПустаяСтрока");
	
	ОбластьШапки.Параметры.ДатаДокумента	= Формат(ЭтотОбъект.Дата, "ДЛФ=DD");
	ОбластьПодвала.Параметры.СуммаПрописью	= СформироватьСуммуПрописью(ЭтотОбъект.Товары.Итог("Сумма"), ЭтотОбъект.ТипЦен.ВалютаЦены.Ссылка);
	ТабДокумент.Вывести(ОбластьШапки);

	СчСтрок = 0;
	
	Для каждого Сч Из ЭтотОбъект.Товары Цикл
	
		ОбластьСтроки.Параметры.Ном				= Сч.НомерСтроки;
		ОбластьСтроки.Параметры.Наименование	= Сч.Номенклатура;
		ОбластьСтроки.Параметры.Количество		= Формат(Сч.Количество, "ЧДЦ=3");
		ОбластьСтроки.Параметры.Цена			= Формат(Сч.Цена, "ЧДЦ=2");
		ОбластьСтроки.Параметры.Сумма			= Формат(Сч.Сумма, "ЧДЦ=2");
		ТабДокумент.Вывести(ОбластьСтроки);
		СчСтрок = СчСтрок + 1;
		
	КонецЦикла;
	
	Если КоличествоСтрокТоварногоЧека - СчСтрок > 0 Тогда
		
		Для СчСтр = 1 По КоличествоСтрокТоварногоЧека - СчСтрок Цикл
		
			ТабДокумент.Вывести(ОбластьПустойСтроки);
		
		КонецЦикла; 
		
	
	КонецЕсли; 
	
	ТабДокумент.Вывести(ОбластьПодвала);
	Возврат ТабДокумент;
	
КонецФункции	

#КонецЕсли

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		ТаблицаТоваров.Колонки.Цена.Имя = "ЦенаВРознице";
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		
		ТаблицаТоваров.Колонки.Добавить("Сумма", ПолучитьОписаниеТиповЧисла(15,2));
		ТаблицаТоваров.Колонки.Добавить("Количество", ПолучитьОписаниеТиповЧисла(15,3));
		
		Для каждого СтрокаТаблицы из ТаблицаТоваров Цикл
			СтрокаТаблицы.Количество = - СтрокаТаблицы.КоличествоДок;
			СтрокаТаблицы.Сумма      = - СтрокаТаблицы.СуммаДок;
		КонецЦикла;
	КонецЕсли;

	ТаблицаТоваров.Колонки.Добавить("Стоимость", ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок", ПолучитьОписаниеТиповЧисла(15,2));
	
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр", ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", ПолучитьОписаниеТиповЧисла(15,2));
		
	Для каждого СтрокаТаблицы из ТаблицаТоваров Цикл
		СтрокаТаблицы.Стоимость = СтрокаТаблицы.Сумма;
		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
		СтрокаТаблицы.СуммаУпр = СтрокаТаблицы.Сумма;
		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.Сумма;
	КонецЦикла;
	
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуСкидок(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаДвижений = Новый ТаблицаЗначений;
	ТаблицаДвижений.Колонки.Добавить("Номенклатура");
	ТаблицаДвижений.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаДвижений.Колонки.Добавить("УсловиеСкидки");
	ТаблицаДвижений.Колонки.Добавить("ЗначениеУсловияСкидки");
	ТаблицаДвижений.Колонки.Добавить("СуммаСкидки", ПолучитьОписаниеТиповЧисла(15,2));

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СуммаБезСкидки = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
		СуммаСоСкидками = СуммаБезСкидки;
		СкидкиЕсть = Ложь;
		Если СтрокаТаблицы.ПроцентАвтоматическихСкидок <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
//			СтрокаДвижений.Качество = СтрокаТаблицы.Качество;
			СтрокаДвижений.УсловиеСкидки = СтрокаТаблицы.УсловиеАвтоматическойСкидки;
			Если СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте
			 ИЛИ СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.ПоВыбраннойДисконтнойКартойСумме Тогда
				СтрокаДвижений.ЗначениеУсловияСкидки = ДисконтнаяКарта;
			Иначе
				СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки;
			КонецЕсли;
			СтрокаДвижений.СуммаСкидки = Окр((СуммаБезСкидки/100) * СтрокаТаблицы.ПроцентАвтоматическихСкидок,2);
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;
		Если СтрокаТаблицы.ПроцентСкидкиНаценки <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
//			СтрокаДвижений.Качество = СтрокаТаблицы.Качество;
			СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.РучнаяСкидка;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ПроцентСкидкиНаценки;
			СтрокаДвижений.СуммаСкидки = Окр((СуммаБезСкидки/100) * СтрокаТаблицы.ПроцентСкидкиНаценки,2);
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;
		Разница = СтрокаТаблицы.Сумма - СуммаСоСкидками;
		Если Разница <> 0
		   И СкидкиЕсть Тогда
			СтрокаДвижений.СуммаСкидки = СтрокаДвижений.СуммаСкидки + Разница;
		КонецЕсли;
	КонецЦикла;

	Возврат ТаблицаДвижений;

КонецФункции // ПодготовитьТаблицуСкидок()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Склад, КассаККМ");

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		ОшибкаПриПроведении("Документ не может осуществлять реализацию с неавтоматизированной торговой точки!", Отказ, Заголовок);
	КонецЕсли;
	
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный
		И Не ЗначениеНеЗаполнено(ДисконтнаяКарта)
		И ДисконтнаяКарта.СтатусДисконтнойКарты <> Перечисления.СтатусыДисконтнойКарты.Активна Тогда
		
		ОшибкаПриПроведении("Дисконтная карта, указанная в документе, не является активной!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество, Сумма");

	КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Проверим заполнение автоматических скидок.
	Для каждого СтрокаТаблицы ИЗ ТаблицаПоТоварам Цикл
		ПроцентНеЗаполнен   = ЗначениеНеЗаполнено(СтрокаТаблицы.ПроцентАвтоматическихСкидок);
		УсловиеНеЗаполнено  = ЗначениеНеЗаполнено(СтрокаТаблицы.УсловиеАвтоматическойСкидки);
		ЗначениеНеЗаполнено = ЗначениеНеЗаполнено(СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки);

		//Если СтрокаТаблицы.Номенклатура.Услуга
		//   И (НЕ ПроцентНеЗаполнен
		//	 Или НЕ УсловиеНеЗаполнено
		//	 Или Не ЗначениеНеЗаполнено) Тогда
		//	ОшибкаПриПроведении("На услугу не может быть назначена автоматическая скидка (строка " + СтрокаТаблицы.НомерСтроки + ").", Отказ, Заголовок);
		//	Продолжить;
		//КонецЕсли;


	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоСкидкам, Отказ, Заголовок);

	// Движения по документу.

	// По некоторым регистрам услуги проводить не нужно.
	// Подготовим отдельную таблицу.
	ТаблицаПоТоварамБезУслуг = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамБезУслуг.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамБезУслуг.Получить(Сч);
		Если СтрокаТаблицы.Услуга Тогда
			 ТаблицаПоТоварамБезУслуг.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	// По регистру РозничнаяВыручка.
	НаборДвижений = Движения.РозничнаяВыручка;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	СтрокаДвижений = ТаблицаДвижений.Добавить();
	СтрокаДвижений.РозничнаяТочка = КассаККМ;
	СтрокаДвижений.Сумма          = ?(ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат, -1, 1) * СуммаДокумента;
	СтрокаДвижений.СуммаБезнал	  = ?(ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат, -1, 1) * СуммаБезналичнойОплаты;	
	СтрокаДвижений.Подразделение  = Неопределено;

	НаборДвижений.мПериод            = Дата;                              
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.РозничнаяВыручка.ВыполнитьПриход();
	КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах или ТоварыВНеавтоматизированныхТорговыхТочках.
	
	НаборДвижений = Движения.ТоварыНаСкладах;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамБезУслуг, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	// Проверка осатков при оперативном проведении.
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный И ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
		
	Если Не Отказ Тогда
		Движения.ТоварыНаСкладах.ВыполнитьРасход();
	КонецЕсли;

	// ТОВАРЫ ПО РЕГИСТРУ Продажи.

	НаборДвижений   = Движения.Продажи;
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,       "ДокументПродажи");
	ТаблицаДвижений.ЗаполнитьЗначения(ДисконтнаяКарта, "ДисконтнаяКарта");

	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.Продажи.ВыполнитьДвижения();
	КонецЕсли;

	// ТОВАРЫ ПО РЕГИСТРУ СкидкиСПродаж.

	НаборДвижений = Движения.ПредоставленныеСкидки;

	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.
	ЗагрузитьВТаблицуЗначений(ТаблицаПоСкидкам, ТаблицаДвижений);

	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументСкидки");
	ТаблицаДвижений.ЗаполнитьЗначения(Склад,"ПолучательСкидки");

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ПредоставленныеСкидки.ВыполнитьДвижения();
	КонецЕсли;

	
	//  Для Автозапчастей: движения по заказам покупателей
	Если Не ЗначениеНеЗаполнено(Сделка) Тогда 
	
	       НаборДвижений = Движения.ЗаказыПокупателей;
		
			ТаблицаДвижений = НаборДвижений.Выгрузить();
		
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
		
			// Недостающие поля
			ТаблицаДвижений.ЗаполнитьЗначения(Сделка, "ЗаказПокупателя");
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");
			
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			// Проверка осатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				// Контроль объема отгрузки по заказу
				Движения.ЗаказыПокупателей.КонтрольПревышенияОбъемаЗаказа(ЭтотОбъект, СтруктураШапкиДокумента, "Товары", Отказ, Заголовок);
			КонецЕсли;
			
			Если Не Отказ Тогда
				Движения.ЗаказыПокупателей.ВыполнитьРасход();
			КонецЕсли;
	     КонецЕсли;
	
	
	
		// Если есть списание из резерва, то надо списать резерв
			ТаблицаПоТоварамИзРезерва = ТаблицаПоТоварам.Скопировать();
			Сч = 0;
			Пока Сч < ТаблицаПоТоварамИзРезерва.Количество() Цикл
				СтрокаТаблицы = ТаблицаПоТоварамИзРезерва.Получить(Сч);
				Если СтрокаТаблицы.СпособСписанияОстаткаТоваров <> Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
					 ТаблицаПоТоварамИзРезерва.Удалить(СтрокаТаблицы);
				Иначе 
					Сч = Сч + 1;
				КонецЕсли; 
			КонецЦикла;
				
			Если ТаблицаПоТоварамИзРезерва.Количество() > 0 Тогда
				НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

				// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
				ТаблицаДвижений = НаборДвижений.Выгрузить();

				// Заполним таблицу движений.
				ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамИзРезерва, ТаблицаДвижений);

				// Недостающие поля.
				ТаблицаДвижений.ЗаполнитьЗначения(Сделка,"ДокументРезерва");

				НаборДвижений.мПериод            = Дата;
				НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

				// Проверка осатков при оперативном проведении.
				Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
					НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
				КонецЕсли;
				
				Если Не Отказ Тогда
					Движения.ТоварыВРезервеНаСкладах.ВыполнитьРасход();
				КонецЕсли;
				
			КонецЕсли;

			
КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЧекККМ") Тогда

		// Заполним вид операции.
		ВидыОперацийЧек = Перечисления.ВидыОперацийЧекККМ;
		Если Основание.ВидОперации = ВидыОперацийЧек.Продажа Тогда
			ВидОперации = ВидыОперацийЧек.Возврат;
			ЧекККМ = Основание;
		Иначе
			Возврат;
		КонецЕсли;

		// Заполним реквизиты из стандартного набора.
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		КассаККМ = Основание.КассаККМ;
		

		// Скопируем состав.
		Товары.Загрузить(Основание.Товары.Выгрузить());

	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	яштДокументОбъектПередЗаписью(ЭтотОбъект, Отказ);
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = Товары.Итог("Сумма");

	Если (Константы.РозничнаяБаза.Получить() = Истина) и (ЭтоНовый()) Тогда 
		ТекущееПодразделение = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновноеПодразделение");
		Если (ТекущееПодразделение<>Справочники.Подразделения.ПустаяСсылка()) Тогда 
			УстановитьНовыйНомер(СокрЛП(ТекущееПодразделение.ПрефиксИБ));
		Иначе 
			УстановитьНовыйНомер(СокрЛП(ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяОрганизация").Префикс));
		КонецЕсли;
	КонецЕсли;

	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 

КонецПроцедуры // ПередЗаписью

Функция ПечатьЧекаНаФР(Модель, НомерЛУ, КассаККМ)

	Перем ЭтоВозврат;
	Перем Параметры;
	Перем Получено;
	Перем Скидка;
	Перем ОписаниеТипаСтрока;
	Перем ОписаниеТипаЧисло;
	Перем СписокТоваров;
	Перем ЭлементСписка;
	Перем КоличествоСтрокМ1;
	Перем СтрокаФР;
	Перем Товар;
	Перем Ответ;

	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТипаЧисло  = Новый ОписаниеТипов("Число",
	                                         Новый КвалификаторыЧисла(
	                                             10,
	                                             3,
	                                             ДопустимыйЗнак.Неотрицательный));
	СписокТоваров      = Новый ТаблицаЗначений();
	Ответ              = "";

	Если мАннулировать Тогда
		глТорговоеОборудование.АннулироватьЧек(Модель, Ответ);
		Если ПустаяСтрока(Ответ) Тогда
			мАннулировать = Ложь;
		КонецЕсли;
	КонецЕсли;

	Если ПустаяСтрока(Ответ) Тогда
	
			// Формирование списка товаров для чека
			СписокТоваров.Колонки.Добавить("Товар");
			СписокТоваров.Колонки.Добавить("Цена");
			СписокТоваров.Колонки.Добавить("Колво");
			СписокТоваров.Колонки.Добавить("Скидка");
			Для Каждого Товар Из Товары Цикл
				ЭлементСписка            = СписокТоваров.Добавить();
				ЭлементСписка.Товар      = СокрЛП(Товар.Номенклатура.Код)+" "+СокрЛП(Товар.Номенклатура)+?(ЗначениеНеЗаполнено(Товар.Номенклатура.Артикул),""," ("+СокрЛП(Товар.Номенклатура.Артикул)+")");
				ЭлементСписка.Цена       = Товар.Цена;
				ЭлементСписка.Колво      = Товар.Количество;
				ЭлементСписка.Скидка     = Товар.ПроцентАвтоматическихСкидок 
				                               + Товар.ПроцентСкидкиНаценки;
			КонецЦикла;

			СтрокаФР   = глТорговоеОборудование.млФР.Найти(КассаККМ, "КассаККМ");
			Получено   = Товары.Итог("Сумма");
			Скидка     = ПолучитьСуммуДокументаБезСкидки(Товары) - Получено;
			ЭтоВозврат = (ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат);
			Параметры  = Новый Структура();
			Параметры.Вставить("СписокТоваров",  СписокТоваров);
			Параметры.Вставить("ПолученоНал",    СуммаНаличнойОплаты);
			Параметры.Вставить("ПолученоБезНал", СуммаБезналичнойОплаты);
			Параметры.Вставить("ЧекНаВозврат",   ЭтоВозврат);
			Параметры.Вставить("НомерСекции",    Склад.НомерСекции);
			Параметры.Вставить("СкладНаименование",  Склад.Наименование);
			глТорговоеОборудование.ПечататьЧек(СтрокаФР, Параметры, Ответ);

	КонецЕсли; // мАннулировать

	Если ПустаяСтрока(Ответ) Тогда
		// Чек напечатан, устанавливаем значения реквизитов
		Параметры.Свойство("НомерЧека",  НомерЧекаККМ);
		Параметры.Свойство("НомерСмены", НомерСменыККМ);
		ЧекПробитНаККМ = Истина;
		// И открываем, в случае необходимости, денежный ящик
	//	глТорговоеОборудование.ОткрытьДенежныйЯщик(КассаККМ);
	КонецЕсли;

	Возврат Ответ;

КонецФункции // ПечатьЧекаНаФР()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;


	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = СформироватьДеревоПолейЗапросаПоШапке();
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");
 	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"                 , "ВидСклада",                      "ВидСклада");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);

	// Проверим допустимость для пользователя цен документа
	ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Товары", Отказ);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	
	Если ВидОперации <> Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
		СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	Иначе
		СтруктураПолей.Вставить("КоличествоДок"             , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
		СтруктураПолей.Вставить("СуммаДок"                  , "Сумма");
	КонецЕсли;
	
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("НомерСтроки"               , "НомерСтроки");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"      , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ПроцентАвтоматическихСкидок", "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("УсловиеАвтоматическойСкидки", "УсловиеАвтоматическойСкидки");
	СтруктураПолей.Вставить("ЗначениеУсловияАвтоматическойСкидки", "ЗначениеУсловияАвтоматическойСкидки");
	СтруктураПолей.Вставить("СпособСписанияОстаткаТоваров", "СпособСписанияОстаткаТоваров");
	СтруктураПолей.Вставить("Склад", "Склад");
	СтруктураПолей.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");

	РезультатЗапросаПоТоварам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда

		РезультатЗапросаПоТоварамОснования = СформироватьЗапросПоТабличнойЧасти(ЧекККМ, "Товары", СтруктураПолей);
		ТаблицаТоваровДокумента = РезультатЗапросаПоТоварам.Выгрузить();
		ТаблицаТоваровДокумента.Свернуть("Номенклатура, Цена, ХарактеристикаНоменклатуры, СерияНоменклатуры", "КоличествоДок");
		ТаблицаТоваровДокументаОснования = РезультатЗапросаПоТоварамОснования.Выгрузить();
		ТаблицаТоваровДокументаОснования.Свернуть("Номенклатура, Цена, ХарактеристикаНоменклатуры, СерияНоменклатуры", "КоличествоДок");
		Для Каждого СтрокаТаблицыТоваровДокумента Из ТаблицаТоваровДокумента Цикл
			СтрокиОснования = ТаблицаТоваровДокументаОснования.НайтиСтроки(
			                 Новый Структура ("Номенклатура, Цена, ХарактеристикаНоменклатуры, СерияНоменклатуры",
			                                   СтрокаТаблицыТоваровДокумента.Номенклатура,
			                                   СтрокаТаблицыТоваровДокумента.Цена,
			                                   СтрокаТаблицыТоваровДокумента.ХарактеристикаНоменклатуры,
			                                   СтрокаТаблицыТоваровДокумента.СерияНоменклатуры));

			Продано = 0;
			Если СтрокиОснования.Количество() > 0 Тогда
				Если СтрокиОснования[0].КоличествоДок >= СтрокаТаблицыТоваровДокумента.КоличествоДок Тогда
					Продолжить;
				Иначе
					Продано = СтрокиОснования[0].КоличествоДок;
				КонецЕсли;
			КонецЕсли;

			ОшибкаПриПроведении("По документу основанию товара """ + СтрокаТаблицыТоваровДокумента.Номенклатура
			                    + """ по цене """ + ФорматСумм(СтрокаТаблицыТоваровДокумента.Цена, мВалютаРегламентированногоУчета)+ """ "
			                    + Символы.ПС + ? (НЕ ЗначениеНеЗаполнено(СтрокаТаблицыТоваровДокумента.ХарактеристикаНоменклатуры),
			                         "с характеристикой """ + СтрокаТаблицыТоваровДокумента.ХарактеристикаНоменклатуры + """", "" )
			                    + ? (НЕ ЗначениеНеЗаполнено(СтрокаТаблицыТоваровДокумента.СерияНоменклатуры),
			                         "с серией """ + СтрокаТаблицыТоваровДокумента.СерияНоменклатуры + """", "" )
			                    + "продано """ + Продано +""", возвращается от покупателя """ 
			                    + СтрокаТаблицыТоваровДокумента.КоличествоДок + """.", Отказ, Заголовок);

		КонецЦикла;

	КонецЕсли;
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, 
	                                        Отказ, Заголовок);

	// Подготовим таблицу скидок для проведения.
	ТаблицаПоСкидкам = ПодготовитьТаблицуСкидок( ТаблицаПоТоварам, СтруктураШапкиДокумента);

	// Движения по документу
	Если Не Отказ Тогда

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоСкидкам, Отказ, Заголовок);

	КонецЕсли; 

    
	
	#Если Клиент Тогда
	Если Не(Отказ) И Не ЧекПробитНаККМ Тогда

		СтрокаФР = глТорговоеОборудование.млФР.Найти(КассаККМ, "КассаККМ");

		Если СтрокаФР <> Неопределено Тогда
			Параметры = Новый Структура;
			Параметры.Вставить("НомерСекции", Склад.НомерСекции);
			Параметры.Вставить("КассаККМ"   , КассаККМ);
			Ответ = "";

			Если глТорговоеОборудование = Неопределено Тогда

				ОшибкаПриПроведении("Торговое оборудование не подключено!" , Отказ, Заголовок);
				Возврат;

			ИначеЕсли Склад.НомерСекции = 0 Тогда

				ОшибкаПриПроведении("У склада не указан номер секции!" , Отказ, Заголовок);
				Возврат;

			КонецЕсли;

			ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();

			Ответ     = ПечатьЧекаНаФР(СтрокаФР.Модель,
				                           СтрокаФР.НомерЛУ,
				                           КассаККМ);

			    Ошибки = "";

				Если   не ПустаяСтрока(Ответ) Тогда

								// Чек напечатать не удалось
					Если Не ПустаяСтрока(Ошибки) Тогда
							Ошибки = Ошибки + "
							                  |";
					КонецЕсли;
					Ошибки = Ошибки + " - Не удалось напечатать чек: " + Ответ;
					// Попытка распровести документ
					Попытка
						Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Исключение
						Ошибки = Ошибки + "
						                  | - Не удалось отменить проведение документа.";
						Отказ = Истина;
					КонецПопытки;
                Иначе

					// Чек напечатан, пытаемся записать документ с обновлёнными
					// значениями реквизитов
					Попытка
						Записать(РежимЗаписиДокумента.Запись);
					Исключение
						Если Не ПустаяСтрока(Ошибки) Тогда
							Ошибки = Ошибки + "
							                  |";
						КонецЕсли;
						Ошибки = Ошибки + " - Не удалось записать чек с признаком ""ЧекПробитНаККМ"" = Истина.";
						Отказ  = Истина;
					КонецПопытки;

				КонецЕсли; // ПустаяСтрока(Ответ)

		КонецЕсли;

	КонецЕсли;
	#КонецЕсли

КонецПроцедуры	// ОбработкаПроведения()

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мАннулировать = Ложь;