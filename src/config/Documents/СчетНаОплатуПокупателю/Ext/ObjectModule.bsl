Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой заказа или счета,
// разработанного методистами
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция ПечатьСчетаЗаказа(Тип) Экспорт

	Если Не ЗначениеЗаполнено(ЗаказПокупателя)  тогда
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Организация,
	|	Контрагент КАК Получатель,
	|	Организация КАК Руководители,
	|	Организация КАК Поставщик,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	Кредит,
	|	Аванс
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|
	|ГДЕ
	|	СчетНаОплатуПокупателю.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_СчетЗаказ";

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	ВложенныйЗапрос.Номенклатура.Код                КАК Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул            КАК Артикул,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ПроцентСкидкиНаценки 
	|	+ ВложенныйЗапрос.ПроцентАвтоматическихСкидок   КАК Скидка,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.Характеристика,
	|	NULL                                            Как Серия,
	|	ВложенныйЗапрос.НомерСтроки                     КАК НомерСтроки,
	|	ВложенныйЗапрос.Метка                           КАК Метка
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		ЗаказПокупателя.Номенклатура,
	|		ЗаказПокупателя.ЕдиницаИзмерения,
	|		ЗаказПокупателя.ПроцентСкидкиНаценки        КАК ПроцентСкидкиНаценки,
	|		ЗаказПокупателя.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|		ЗаказПокупателя.Цена                        КАК Цена,
	|		СУММА(ЗаказПокупателя.Количество)           КАК Количество,
	|		СУММА(ЗаказПокупателя.Сумма     )           КАК Сумма,
	|		СУММА(ЗаказПокупателя.СуммаНДС  )           КАК СуммаНДС,
	|		ЗаказПокупателя.ХарактеристикаНоменклатуры  КАК Характеристика,
	|		ЗаказПокупателя.НомерСтроки                 КАК НомерСтроки,
	|		0                                           КАК Метка
	|	ИЗ
	|		Документ.СчетНаОплатуПокупателю.Товары КАК ЗаказПокупателя
	|
	|	ГДЕ
	|		ЗаказПокупателя.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПокупателя.НомерСтроки,
	|		ЗаказПокупателя.Номенклатура,
	|		ЗаказПокупателя.ЕдиницаИзмерения,
	|		ЗаказПокупателя.ПроцентСкидкиНаценки,
	|		ЗаказПокупателя.ПроцентАвтоматическихСкидок,
	|		ЗаказПокупателя.Цена,
	|		ЗаказПокупателя.ХарактеристикаНоменклатуры
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПокупателя.Номенклатура,
	|	ВЫБОР КОГДА ЗаказПокупателя.Содержание IS NULL ИЛИ ЗаказПокупателя.Содержание = """" ТОГДА
	|		ВЫРАЗИТЬ(ЗаказПокупателя.Номенклатура.НаименованиеПолное КАК Строка(1000))
	|	ИНАЧЕ
	|		ЗаказПокупателя.Содержание
	|	КОНЕЦ КАК Товар,
	|	ЗаказПокупателя.Номенклатура.Код     КАК Код,
	|	ЗаказПокупателя.Номенклатура.Артикул КАК Артикул,
	|	ЗаказПокупателя.Количество,
	|	ЗаказПокупателя.Номенклатура.ЕдиницаХраненияОстатков,
	|	ЗаказПокупателя.ПроцентСкидкиНаценки,
	|	ЗаказПокупателя.Цена,
	|	ЗаказПокупателя.Сумма,
	|	ЗаказПокупателя.СуммаНДС,
	|	NULL,
	|	NULL,
	|	ЗаказПокупателя.НомерСтроки КАК НомерСтроки,
	|	1                           КАК Метка
	|	
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Услуги КАК ЗаказПокупателя
	|
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|
	|";

	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	Макет = ПолучитьМакет("СчетЗаказ");

	// Выводим шапку накладной

	СведенияОПоставщике = СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата);
	Если Тип = "Счет" Тогда
		ОбластьМакета       = Макет.ПолучитьОбласть("ЗаголовокСчета");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ИНН = СведенияОПоставщике.ИНН;
		ОбластьМакета.Параметры.КПП = СведенияОПоставщике.КПП;
		Если ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			Банк       = СтруктурнаяЕдиница.Банк;
			БИК        = Банк.Код;
			КоррСчет   = Банк.КоррСчет;
			ГородБанка = Банк.Город;
			НомерСчета = СтруктурнаяЕдиница.НомерСчета;

			ОбластьМакета.Параметры.БИКБанкаПолучателя               = БИК;
			ОбластьМакета.Параметры.БанкПолучателя                   = Банк;
			ОбластьМакета.Параметры.БанкПолучателяПредставление      = СокрЛП(Банк) + " " + ГородБанка;
			ОбластьМакета.Параметры.СчетБанкаПолучателя              = КоррСчет;
			ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = КоррСчет;
			ОбластьМакета.Параметры.СчетПолучателяПредставление      = НомерСчета;
			ОбластьМакета.Параметры.СчетПолучателя                   = НомерСчета;
			ОбластьМакета.Параметры.ПредставлениеПоставщика          = СтруктурнаяЕдиница.ТекстКорреспондента;
		КонецЕсли;
		Если ЗначениеНеЗаполнено(ОбластьМакета.Параметры.ПредставлениеПоставщика) Тогда
			ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Счет на оплату");
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	ТабДокумент.Вывести(ОбластьМакета);

	СведенияОПолучателе = СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	ТабДокумент.Вывести(ОбластьМакета);

	ЕстьСкидки = Ложь;
	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 
		Если Не ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
			ЕстьСкидки = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьСуммы);

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	Если НЕ ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("СуммаБезСкидки").ШиринаКолонки +
											Макет.Область("СуммаСкидки").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар       = СокрП(ВыборкаСтрокТовары.Товар) + ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьДанных);

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
			Скидка = 0;
		Иначе
			Скидка = ВыборкаСтрокТовары.Сумма  / (100 - ВыборкаСтрокТовары.Скидка) * ВыборкаСтрокТовары.Скидка;
		КонецЕсли;
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = ФорматСумм(ЗапросТовары.Итог("СуммаНДС"));
		ТабДокумент.Присоединить(ОбластьСуммы);
	КонецЕсли;
	
	Если Шапка.Кредит Тогда
		ОбластьНомераКр = Макет.ПолучитьОбласть("Аванс|НомерСтроки");
		ОбластьКодовКр  = Макет.ПолучитьОбласть("Аванс|КолонкаКодов");
		ОбластьДанныхКр = Макет.ПолучитьОбласть("Аванс|Данные");
		ОбластьСкидокКр = Макет.ПолучитьОбласть("Аванс|Скидка");
		ОбластьСуммыКр  = Макет.ПолучитьОбласть("Аванс|Сумма");

		ТабДокумент.Вывести(ОбластьНомераКр);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодовКр);
		КонецЕсли;
		//ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Присоединить(ОбластьДанныхКр);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидокКр);
		КонецЕсли;
		ОбластьСуммыКр.Параметры.ВсегоАванс = ФорматСумм(Шапка.Аванс);
		ТабДокумент.Присоединить(ОбластьСуммыКр);
		
		ОбластьНомераКр = Макет.ПолучитьОбласть("Долг|НомерСтроки");
		ОбластьКодовКр  = Макет.ПолучитьОбласть("Долг|КолонкаКодов");
		ОбластьДанныхКр = Макет.ПолучитьОбласть("Долг|Данные");
		ОбластьСкидокКр = Макет.ПолучитьОбласть("Долг|Скидка");
		ОбластьСуммыКр  = Макет.ПолучитьОбласть("Долг|Сумма");

		ТабДокумент.Вывести(ОбластьНомераКр);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодовКр);
		КонецЕсли;
		//ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Присоединить(ОбластьДанныхКр);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидокКр);
		КонецЕсли;
		
		ОбластьСуммыКр.Параметры.ВсегоДолг = ФорматСумм(Сумма - Шапка.Аванс);
		ТабДокумент.Присоединить(ОбластьСуммыКр);

	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ЗапросТовары.Количество()
	+ ", на сумму " + ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	Если Тип = "Счет" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");

		Руководители = ОтветственныеЛицаОрганизации(Шапка.Руководители, Шапка.Дата,);
		Руководитель = Руководители.Руководитель;
		Бухгалтер    = Руководители.ГлавныйБухгалтер;

		ОбластьМакета.Параметры.ФИОРуководителя  = "/" + Руководитель  + "/";
		ОбластьМакета.Параметры.ФИОБухгалтера    = "/" + Бухгалтер     + "/";
		ОбластьМакета.Параметры.ФИООтветственный = "/" + Ответственный + "/";

	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	КонецЕсли; 
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Иначе
		ТабДокумент = ПечатьСчетаЗаказаКорректировки(Тип);
    КонецЕсли; 
	 Возврат ТабДокумент;
КонецФункции // ПечатьСчетаЗаказа()

Функция ПечатьСчетаЗаказаКорректировки(Тип, СКартинкой = ложь) Экспорт //+++ 18.06.2015
		//14.02.17 Смирнов, если договор заканчивается, то предупреждаем об этом
		#Если Клиент тогда
			Если НачалоДня(ТекущаяДата())+14*24*60*60 >= ЭтотОбъект.ДоговорКонтрагента.ДатаОкончанияДействия и ЗначениеЗаполнено(ЭтотОбъект.ДоговорКонтрагента.ДатаОкончанияДействия) тогда
				Предупреждение("Срок действия договора заканчивается "+Формат(ЭтотОбъект.ДоговорКонтрагента.ДатаОкончанияДействия,"ДФ=dd.MM.yyyy"));
			КонецЕсли;
		#КонецЕсли
		//
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.ЗаказПокупателя);
		Запрос.Текст ="ВЫБРАТЬ
		|	ЗаказПокупателя.Номер,
		|	ЗаказПокупателя.Дата,
		|	ЗаказПокупателя.ДоговорКонтрагента,
		|	ЗаказПокупателя.Организация,
		|	ЗаказПокупателя.Контрагент КАК Получатель,
		|	ЗаказПокупателя.Организация КАК Руководители,
		|	ЗаказПокупателя.Организация КАК Поставщик,
		|	ЗаказПокупателя.СуммаДокумента,
		|	ЗаказПокупателя.ВалютаДокумента,
		|	ЗаказПокупателя.УчитыватьНДС,
		|	ЗаказПокупателя.СуммаВключаетНДС,
		|	ЗаказПокупателя.Грузоотправитель,
		|	ЗаказПокупателя.Подразделение
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Ссылка = &ТекущийДокумент";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_СчетЗаказ";
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.ЗаказПокупателя);
		Запрос.Текст = "ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|	ВложенныйЗапрос.Номенклатура.Артикул КАК Артикул,
		|	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
		|	ВложенныйЗапрос.ПроцентСкидкиНаценки + ВложенныйЗапрос.ПроцентАвтоматическихСкидок КАК Скидка,
		|	СУММА(ВложенныйЗапрос.СуммаНДС) КАК СуммаНДС,
		|	ВложенныйЗапрос.Цена КАК Цена,
		|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры КАК Характеристика,
		|	NULL КАК Серия,
		|	ВЫБОР
		|		КОГДА НЕ ВложенныйЗапрос.Номенклатура.Услуга
		|			ТОГДА 0
		|		КОГДА ВложенныйЗапрос.Номенклатура.Услуга
		|			ТОГДА 1
		|	КОНЕЦ КАК УСЛУГА,
		|	МИНИМУМ(ВложенныйЗапрос.НомерСтроки) КАК НомерСтроки,
		|	ВложенныйЗапрос.СтавкаНДС
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗаказПокупателя.Номенклатура КАК Номенклатура,
		|		ЗаказПокупателя.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		ЗаказПокупателя.Цена КАК Цена,
		|		ЗаказПокупателя.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|		ЗаказПокупателя.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
		|		ЗаказПокупателя.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|		ЗаказПокупателя.СуммаНДС КАК СуммаНДС,
		|		ЗаказПокупателя.Сумма КАК Сумма,
		|		ЗаказПокупателя.Количество КАК Количество,
		|		ЗаказПокупателя.НомерСтроки КАК НомерСтроки,
		|		ЗаказПокупателя.СтавкаНДС КАК СтавкаНДС
		|	ИЗ
		|		Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателя
		|	ГДЕ
		|		ЗаказПокупателя.Ссылка = &ТекущийДокумент
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		КорректировкаЗаказаПокупателя.Номенклатура,
		|		КорректировкаЗаказаПокупателя.ЕдиницаИзмерения,
		|		КорректировкаЗаказаПокупателя.Цена,
		|		КорректировкаЗаказаПокупателя.ПроцентСкидкиНаценки,
		|		КорректировкаЗаказаПокупателя.ПроцентАвтоматическихСкидок,
		|		КорректировкаЗаказаПокупателя.ХарактеристикаНоменклатуры,
		|		КорректировкаЗаказаПокупателя.СуммаНДС,
		|		КорректировкаЗаказаПокупателя.Сумма,
		|		КорректировкаЗаказаПокупателя.Количество,
		|		1000 + КорректировкаЗаказаПокупателя.НомерСтроки,
		|		КорректировкаЗаказаПокупателя.СтавкаНДС
		|	ИЗ
		|		Документ.КорректировкаЗаказаПокупателя.Товары КАК КорректировкаЗаказаПокупателя
		|	ГДЕ
		|		КорректировкаЗаказаПокупателя.Ссылка.ЗаказПокупателя = &ТекущийДокумент
		|		И КорректировкаЗаказаПокупателя.Ссылка.Проведен = ИСТИНА
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗаказПокупателя.Номенклатура,
		|		ЗаказПокупателя.Номенклатура.ЕдиницаХраненияОстатков,
		|		ЗаказПокупателя.Цена,
		|		ЗаказПокупателя.ПроцентСкидкиНаценки,
		|		0,
		|		NULL,
		|		ЗаказПокупателя.СуммаНДС,
		|		ЗаказПокупателя.Сумма,
		|		ЗаказПокупателя.Количество,
		|		ЗаказПокупателя.НомерСтроки,
		|		ЗаказПокупателя.СтавкаНДС
		|	ИЗ
		|		Документ.ЗаказПокупателя.Услуги КАК ЗаказПокупателя
		|	ГДЕ
		|		ЗаказПокупателя.Ссылка = &ТекущийДокумент
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		КорректировкаЗаказаПокупателя.Номенклатура,
		|		КорректировкаЗаказаПокупателя.Номенклатура.ЕдиницаХраненияОстатков,
		|		КорректировкаЗаказаПокупателя.Цена,
		|		КорректировкаЗаказаПокупателя.ПроцентСкидкиНаценки,
		|		0,
		|		NULL,
		|		КорректировкаЗаказаПокупателя.СуммаНДС,
		|		КорректировкаЗаказаПокупателя.Сумма,
		|		КорректировкаЗаказаПокупателя.Количество,
		|		1000 + КорректировкаЗаказаПокупателя.НомерСтроки,
		|		КорректировкаЗаказаПокупателя.СтавкаНДС
		|	ИЗ
		|		Документ.КорректировкаЗаказаПокупателя.Услуги КАК КорректировкаЗаказаПокупателя
		|	ГДЕ
		|		КорректировкаЗаказаПокупателя.Ссылка.ЗаказПокупателя = &ТекущийДокумент
		|		И КорректировкаЗаказаПокупателя.Ссылка.Проведен = ИСТИНА) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ЕдиницаИзмерения,
		|	ВложенныйЗапрос.ПроцентСкидкиНаценки,
		|	ВложенныйЗапрос.ПроцентАвтоматическихСкидок,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
		|	ВложенныйЗапрос.Цена,
		|	ВложенныйЗапрос.Номенклатура.Артикул,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление,
		|	ВложенныйЗапрос.СтавкаНДС,
		|	ВЫБОР
		|		КОГДА НЕ ВложенныйЗапрос.Номенклатура.Услуга
		|			ТОГДА 0
		|		КОГДА ВложенныйЗапрос.Номенклатура.Услуга
		|			ТОГДА 1
		|	КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	УСЛУГА,
		|	Номенклатура
		|АВТОУПОРЯДОЧИВАНИЕ";
		//+++ 30.06.2014			  
		Если Константы.ИспользоватьОстаткиСтороннихПоставщиков.Получить()
			и НЕ ЗаказПокупателя.Поставщик.пустая() Тогда // 13.08.2015 только Если есть поставщик!
			Запрос.Текст = стрЗаменить(Запрос.Текст, "//СтатусНеОтменен", " 
			| И  ЗаказПокупателя.Статус <> Значение(перечисление.СтатусыСтрокЗаказа.Отменен)");
		КонецЕсли;
		
		ЗапросТовары = Запрос.Выполнить().Выгрузить();
		
		Макет = ПолучитьМакет("СчетЗаказ");
		
		// Выводим шапку накладной
		
		СведенияОПоставщике = СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата);
		
		Если Тип = "Счет" или Тип = "СчетАртикул" Тогда
			
			ОбластьМакета       = Макет.ПолучитьОбласть("ЗаголовокСчета");
			//ОЛ 12.02.2015
			Если Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль или
				Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.НайтиПоКоду("Я0004") Тогда
				//Для формула авто и шинтрейд ярославль не должно быть упоминание о Яршинторг
				ОбластьМакета       = Макет.ПолучитьОбласть("ЗаголовокСчетаФАиШТЯ");
			КонецЕсли;	 
			//Конец ОЛ
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ОбластьМакета.Параметры.ИНН = СведенияОПоставщике.ИНН;
			ОбластьМакета.Параметры.КПП = СведенияОПоставщике.КПП;
			
			//+++( 09.11.2012
			Если Шапка.Подразделение = справочники.Подразделения.НайтиПоКоду("00106") 
				и Шапка.Дата >= '20121001' Тогда
				Если НЕ ЗначениеЗаполнено(Шапка.Грузоотправитель) Тогда
					Сообщить("Не заполнен грузоотправитель!");
					возврат неопределено;
				КонецЕсли;	
				СведенияОГрузоотправителе = СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.Дата);  
				ОбластьМакета.Параметры.ИНН = СведенияОГрузоотправителе.ИНН;
				ОбластьМакета.Параметры.КПП = СведенияОГрузоотправителе.КПП;
				СтруктурнаяЕдиница  = Шапка.Грузоотправитель.ОсновнойБанковскийСчет;
			КонецЕсли;	//+++)
			
			//+++( 18.06.2014
			Если СтруктурнаяЕдиница=неопределено Тогда
				СтруктурнаяЕдиница = ЭтотОбъект.Организация.ОсновнойБанковскийСчет;
			КонецЕсли;	
			//+++)
			
			Если ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				Банк       = СтруктурнаяЕдиница.Банк;
				БИК        = Банк.Код;
				КоррСчет   = Банк.КоррСчет;
				НомерСчета = СтруктурнаяЕдиница.НомерСчета;
				
				ОбластьМакета.Параметры.БИКБанкаПолучателя               = БИК;
				ОбластьМакета.Параметры.БанкПолучателя                   = Банк;
				ОбластьМакета.Параметры.БанкПолучателяПредставление      = СокрЛП(Банк) +" "+Банк.Город;
				ОбластьМакета.Параметры.СчетБанкаПолучателя              = КоррСчет;
				ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = КоррСчет;
				ОбластьМакета.Параметры.СчетПолучателяПредставление      = НомерСчета;
				ОбластьМакета.Параметры.СчетПолучателя                   = НомерСчета;
				ОбластьМакета.Параметры.ПредставлениеПоставщика          = СтруктурнаяЕдиница.ТекстКорреспондента;
			КонецЕсли;
			Если ЗначениеНеЗаполнено(ОбластьМакета.Параметры.ПредставлениеПоставщика) Тогда
				ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
			КонецЕсли;
			
			//ОЛ 12.02.2015 - Для экспорта
			ОрганизацияОтгрузки = Справочники.Контрагенты.ПустаяСсылка();
			Если Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль Тогда
				ОрганизацияОтгрузки = Справочники.Контрагенты.НайтиПоКоду("П001125");
			ИначеЕсли Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.НайтиПоКоду("Я0004") Тогда 
				//Для формула авто тоже нужны свои реквизиты
				ОрганизацияОтгрузки = Справочники.Контрагенты.НайтиПоКоду("92705");
			КонецЕсли;
			Если Не ОрганизацияОтгрузки.Пустая() Тогда
				СведенияОПоставщике = СведенияОЮрФизЛице(ОрганизацияОтгрузки, Шапка.Дата);
				ОбластьМакета.Параметры.ИНН = СведенияОПоставщике.ИНН;
				ОбластьМакета.Параметры.КПП = СведенияОПоставщике.КПП;
				СтруктурнаяЕдиницаОтгрузки = ОрганизацияОтгрузки.ОсновнойБанковскийСчет;
				ОбластьМакета.Параметры.БИКБанкаПолучателя               = СтруктурнаяЕдиницаОтгрузки.Банк.Код;
				ОбластьМакета.Параметры.БанкПолучателя                   = СтруктурнаяЕдиницаОтгрузки.Банк;
				ОбластьМакета.Параметры.БанкПолучателяПредставление      = СокрЛП(СтруктурнаяЕдиницаОтгрузки.Банк) +" "+СтруктурнаяЕдиницаОтгрузки.Банк.Город;
				ОбластьМакета.Параметры.СчетБанкаПолучателя              = СтруктурнаяЕдиницаОтгрузки.Банк.КоррСчет;
				ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = СтруктурнаяЕдиницаОтгрузки.Банк.КоррСчет;
				ОбластьМакета.Параметры.СчетПолучателяПредставление      = СтруктурнаяЕдиницаОтгрузки.НомерСчета;
				ОбластьМакета.Параметры.СчетПолучателя                   = СтруктурнаяЕдиницаОтгрузки.НомерСчета;
				ОбластьМакета.Параметры.ПредставлениеПоставщика          = СведенияОПоставщике.ПолноеНаименование;
			КонецЕсли;	
			//Конец ОЛ
			
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли; 
		//Миронычев
		Если Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ПредоплатаПоСчетам Тогда
			Назначение = Макет.ПолучитьОбласть("Назначение");
			Назначение.Параметры.НазначениеПлатежа = СформироватьНазначениеПлатежа(ЗапросТовары);	
			ТабДокумент.Вывести(Назначение);
																																							
		КонецЕсли;
				//КонецМиронычев
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		Если Тип = "Счет" или Тип = "СчетАртикул" Тогда
			ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Счет на оплату");
		Иначе
			ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Заказ покупателя");
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		//ОЛ 12.02.2015
		Если Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль Тогда //Для экспорта
			Если НЕ ОрганизацияОтгрузки.Пустая() Тогда
				ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОЮрФизЛице(ОрганизацияОтгрузки, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
			КонецЕсли;
		ИначеЕсли Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.НайтиПоКоду("Я0004") Тогда //Для Формула авто
			Если НЕ ОрганизацияОтгрузки.Пустая() Тогда
				ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОЮрФизЛице(ОрганизацияОтгрузки, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
			КонецЕсли;
		КонецЕсли;
		//Конец ОЛ
		ТабДокумент.Вывести(ОбластьМакета);
		
		//+++ 03.10.2012 - Грузоотправитель, Если он есть...
		Если (Тип = "Счет" или Тип = "СчетАртикул") и ЗначениеЗаполнено(ЗаказПокупателя.Грузоотправитель) Тогда 
			ОбластьМакета = Макет.ПолучитьОбласть("Грузоотправитель");
			ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ОписаниеОрганизации(СведенияОЮрФизЛице(ЗаказПокупателя.Грузоотправитель, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ФактическийАдрес,Телефоны,");
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		СведенияОПолучателе = СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		//ОЛ 12.02.2015 - Для экспорта
		Если Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль Тогда //Для экспорта
			Если СокрЛП(Шапка.Получатель.НаименованиеИННэкспорт)<>"" Тогда
				ОбластьМакета.Параметры.ПредставлениеПолучателя = СтрЗаменить(ОбластьМакета.Параметры.ПредставлениеПолучателя,"ИНН ",СокрЛП(Шапка.Получатель.НаименованиеИННэкспорт)+" ");
			КонецЕсли	
		КонецЕсли;
		//Конец ОЛ
		ТабДокумент.Вывести(ОбластьМакета);
		//Миронычев
		ОбластьМакета = Макет.ПолучитьОбласть("СрокОплаты");
		Если Шапка.ДоговорКонтрагента.ТипДоговора <> Справочники.ТипыДоговоров.ПредоплатаПоСчетам Тогда
			
			
			// Сакулина. По задаче Серкова меняем Срок Оплаты на дату формирования Счета + 3 дня
			Если Тип = "Счет" Тогда
				ОбластьМакета.Параметры.СрокОплаты = Формат(ТекущаяДата() + 3*24*60*60,"ДЛФ=DD");
			Иначе
				ОбластьМакета.Параметры.СрокОплаты = Формат(ДатаОплаты,"ДЛФ=DD");
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакета);
			// КонецЕсли;
		КонецЕсли;
		
		//КонецМиронычев
		
		//+++ 03.10.2012 - Грузополучатель, Если он есть...
		Если (Тип = "Счет" или Тип = "СчетАртикул") и ЗначениеЗаполнено(ЗаказПокупателя.Грузополучатель) Тогда 
			ОбластьМакета = Макет.ПолучитьОбласть("Грузополучатель");
			ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ОписаниеОрганизации(СведенияОЮрФизЛице(ЗаказПокупателя.Грузополучатель, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ФактическийАдрес,Телефоны,");
			//ОЛ 12.02.2015 - Для экспорта
			Если Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль Тогда //Для экспорта
				Если СокрЛП(ЗаказПокупателя.Грузополучатель.НаименованиеИННэкспорт)<>"" Тогда
					ОбластьМакета.Параметры.ПредставлениеГрузополучателя = СтрЗаменить(ОбластьМакета.Параметры.ПредставлениеГрузополучателя,"ИНН ",СокрЛП(ЗаказПокупателя.Грузополучатель.НаименованиеИННэкспорт)+" ");
				КонецЕсли	
			КонецЕсли;
			//Конец ОЛ
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		ЕстьСкидки = Ложь;
		Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 
			Если Не ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
				ЕстьСкидки = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		
		ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
		Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
			ВыводитьКоды = Истина;
			Колонка = "Артикул";
		ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
			ВыводитьКоды = Истина;
			Колонка = "Код";
		Иначе
			ВыводитьКоды = Ложь;
		КонецЕсли;
		Если Тип = "СчетАртикул" Тогда
			ВыводитьКоды = Истина;
			Колонка = "Артикул";
		КонецЕсли;
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
		ОбластьШК  = Макет.ПолучитьОбласть("ШапкаТаблицы|ШК"); //+++ 13.05.2015
		ОбластьКартинка  = Макет.ПолучитьОбласть("ШапкаТаблицы|Картинка");
		
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьСуммы);
		Если тип = "СчетАртикул" Тогда
			ТабДокумент.Присоединить(ОбластьШК);    //+++ 13.05.2015
		КонецЕсли;
		
		Если СКартинкой тогда
			ТабДокумент.Присоединить(ОбластьКартинка);
		КонецЕсли;
		
		
		ОбластьКолонкаТовар = Макет.Область("Товар");
		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
			Макет.Область("КолонкаКодов").ШиринаКолонки;
		КонецЕсли;
		Если НЕ ЕстьСкидки Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
			Макет.Область("СуммаБезСкидки").ШиринаКолонки +
			Макет.Область("СуммаСкидки").ШиринаКолонки;
		КонецЕсли;
		
		ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
		ОбластьШК  = Макет.ПолучитьОбласть("Строка|ШК");              //+++ 13.05.2015
		ОбластьКартинка  = Макет.ПолучитьОбласть("Строка|Картинка");
		Если сКартинкой тогда
			ФайлПустаяКартинка=ПолучитьФайлССервера("http://photo.yst.ru/nopic_tyre_s.png");
			//Сообщить(ФайлПустаяКартинка);
		КонецЕсли;
		
		
		Сумма    = 0;
		СуммаНДС = 0;
		ВсегоСкидок    = 0;
		ВсегоБезСкидок = 0;
		
		Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 
			
			Если ВыборкаСтрокТовары.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
			
			Если СКартинкой тогда
				ОбластьНомера.ТекущаяОбласть.ВысотаСтроки=100;
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
				Иначе
					//ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Номенклатура.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
			
			//++Плотников Для Лагерной и Радуга Питер убираем LegeArtis
			Если СокрЛП(Шапка.Получатель.Код) = "91777" Тогда //***2016.04.06 Радуга Питер
				//При печати LegeArtis нужно выводить аналог TopDriver
				Если ВыборкаСтрокТовары.Номенклатура.Производитель = Справочники.Производители.НайтиПоКоду("3333") Тогда //REPLICA TD
					ОбластьДанных.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Номенклатура.НаименованиеПолное)
					//+ ПредставлениеСерий(ВыборкаСтрок)
					//+ ?(ВыборкаСтрок.Метка = 2, " (возвратная тара)", "") + " (Top Driver)";
				ИначеЕсли  ВыборкаСтрокТовары.Номенклатура.Производитель = Справочники.Производители.НайтиПоКоду("65") Тогда //REPLICA
					Запрос = Новый Запрос;
					Запрос.УстановитьПараметр("ДискLA", ВыборкаСтрокТовары.Номенклатура);
					Запрос.Текст = "ВЫБРАТЬ
					|	СоответствиеLegeArtisTopDriver.ДискTD
					|ИЗ
					|	РегистрСведений.СоответствиеLegeArtisTopDriver КАК СоответствиеLegeArtisTopDriver
					|ГДЕ
					|	СоответствиеLegeArtisTopDriver.ДискLA = &ДискLA";
					ВыборкаTD = Запрос.Выполнить().Выбрать();
					Если ВыборкаTD.Следующий() Тогда
						ОбластьДанных.Параметры.Товар = СокрЛП(СтрЗаменить(ВыборкаСтрокТовары.Номенклатура.НаименованиеПолное,"LegeArtis",""))
						+ " (ан. Top Driver " + ВыборкаTD.ДискTD.Код + ")";
					Иначе  //типовой вариант
						ОбластьДанных.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Номенклатура.НаименованиеПолное);
					КонецЕсли;
				Иначе
					ОбластьДанных.Параметры.Товар = ВыборкаСтрокТовары.Номенклатура.НаименованиеПолное + ПредставлениеСерий(ВыборкаСтрокТовары);
				КонецЕсли;
			Иначе
				ОбластьДанных.Параметры.Товар = ВыборкаСтрокТовары.Номенклатура.НаименованиеПолное + ПредставлениеСерий(ВыборкаСтрокТовары);
			КонецЕсли;
			
			
			//ОбластьДанных.Параметры.Товар = ВыборкаСтрокТовары.Номенклатура.НаименованиеПолное + ПредставлениеСерий(ВыборкаСтрокТовары);
			ТабДокумент.Присоединить(ОбластьДанных);
			
			Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
				Скидка = 0;
			Иначе
				Скидка = ВыборкаСтрокТовары.Сумма / (100 - ВыборкаСтрокТовары.Скидка) * ВыборкаСтрокТовары.Скидка;
			КонецЕсли;
			Если ЕстьСкидки Тогда
				ОбластьСкидок.Параметры.Скидка         = Скидка;
				ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			
			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабДокумент.Присоединить(ОбластьСуммы);
			
			
			//+++( 13.05.2015 - печать цифр штрихКода
			Если тип = "СчетАртикул" Тогда
				ШК = ПолучитьКодШтрихКода(ВыборкаСтрокТовары.Номенклатура.Код);
				Если ШК="0" Тогда
					Если ВыборкаСтрокТовары.Номенклатура.ВидТовара = перечисления.ВидыТоваров.Аксессуары Тогда
						ШК = ""; // Если нет "настоящего" ШК, то ничего не надо!
					Иначе 
						ШК =":"+ПолучитьНовыйКодДляШтрихКодаЯШТ(ВыборкаСтрокТовары.Номенклатура.Код);
					КонецЕсли;
				КонецЕсли;
				ОбластьШК.Параметры.ШК = ШК;
				ТабДокумент.Присоединить(ОбластьШК);
			КонецЕсли;
			//+++)
			Если СКартинкой тогда
				ОбластьКартинка.Рисунки.Очистить();
				АдресКартинки = ПолучитьАдресКартинкиТовара(ВыборкаСтрокТовары.Номенклатура);
				Картинка = неопределено;
				Если АдресКартинки<>"" и АдресКартинки <> неопределено тогда
					ФайлКартинки = ПолучитьФайлССервера(АдресКартинки);
					Если ФайлКартинки<>"" тогда
						//Картинка = Новый Картинка(яПолучитьФайлССервера(АдресКартинки));
						
						Картинка = неопределено;
						Если АдресКартинки<>"" и АдресКартинки <> неопределено тогда
							Картинка = Новый Картинка(ПолучитьФайлССервера(АдресКартинки));
							Если  Картинка = Неопределено Тогда
								Картинка = Новый Картинка(ФайлПустаяКартинка);
							КонецЕсли;	
							ФотоТовара = ОбластьКартинка.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
							ФотоТовара.Верх = 0;
							ФотоТовара.Лево = 0;
							ФотоТовара.РазмерКартинки = РазмерКартинки.Пропорционально;
							ФотоТовара.Картинка = Картинка;
							ФотоТовара.Расположить(ОбластьКартинка.Область(1, 1, 1, 1));
							
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
				
				ТабДокумент.Присоединить(ОбластьКартинка);
				//ОбластьКартинка.ТекущаяОбласть.ВысотаСтроки = 100;//ВысотаКартинки;
			КонецЕсли;
			
			Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
			СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
			ВсегоСкидок    = ВсегоСкидок + Скидка;
			ВсегоБезСкидок = Сумма       + ВсегоСкидок;
			
		КонецЦикла;
		
		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
			ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.Всего = ФорматСумм(Сумма);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		// Вывести ИтогоНДС
		Если Шапка.УчитыватьНДС Тогда
			ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
			//ОЛ 12.02.2015 - Для экспорта 0% всегда
			Если Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль Тогда
				Если ЗапросТовары.Итог("СуммаНДС")=0 Тогда 
					ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС 0%:", "Сумма НДС 0%:");
				КонецЕсли;
			КонецЕсли;	
			//Конец ОЛ
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ОбластьСуммы.Параметры.ВсегоНДС = ФорматСумм(ЗапросТовары.Итог("СуммаНДС"));
			ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
		
		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ЗапросТовары.Количество()
		+ ", на сумму " + ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
		ОбластьМакета.Параметры.СуммаПрописью = СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
		
		
		// Сакулина
		Если Тип ="Счет" Тогда
			//Миронычев
			Если Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ПредоплатаПоСчетам Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("Информация");
				ТабДокумент.Вывести(ОбластьМакета);
				
				ОбластьМакета = Макет.ПолучитьОбласть("СпособДоставки"); 
				ОбластьМакета.Параметры.СпособДоставки = ПолучитьСпособДоставки(СведенияОПоставщике);
				ТабДокумент.Вывести(ОбластьМакета);
			Иначе
				//КонецМиронычев
				
				Если ЗначениеЗаполнено(ЗаказПокупателя.СпособОтгрузки) Тогда
					Если Найти(ЗаказПокупателя.СпособОтгрузки.Наименование,"Поставщика за счет Поставщика") <> 0 Тогда
						ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаСчетПоставщика");
						ТабДокумент.Вывести(ОбластьМакета);
					ИначеЕсли Найти(ЗаказПокупателя.СпособОтгрузки.Наименование,"Поставщика за счет Покупателя") <> 0 Тогда
						ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаСчетПокупателя");
						ТабДокумент.Вывести(ОбластьМакета);
					Иначе 
						ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСамовывоз");
						ТабДокумент.Вывести(ОбластьМакета);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// Сакулина
		
		
		// Вывести подписи
		Если Тип = "Счет" или Тип = "СчетАртикул" Тогда
			РуководителиП = ОтветственныеЛицаПодразделения(ЭтотОбъект.Подразделение, Шапка.Дата);//+++ 03.10.2012
			
			Руководители = ОтветственныеЛицаОрганизации(Шапка.Руководители, Шапка.Дата,);
			Руководитель = ?(РуководителиП.Руководитель=неопределено, Руководители.Руководитель,РуководителиП.Руководитель);
			Бухгалтер    = ?(РуководителиП.ГлавныйБухгалтер=неопределено, Руководители.ГлавныйБухгалтер, РуководителиП.ГлавныйБухгалтер);
			
						
			Если Шапка.ДоговорКонтрагента.ТипДоговора <> Справочники.ТипыДоговоров.ПредоплатаПоСчетам Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
				ОбластьМакета.Параметры.ФИОРуководителя  = "/" + Руководитель  + "/";
				ОбластьМакета.Параметры.ФИОБухгалтера    = "/" + Бухгалтер     + "/";
				ОбластьМакета.Параметры.ФИООтветственный = "/" + Ответственный + "/";

				
				//ОЛ 12.02.2015 - Для экспорта
				Если Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль Тогда
					Если НЕ ОрганизацияОтгрузки.Пустая() Тогда
						ОбластьМакета.Параметры.ФИОРуководителя  = "/Захаров В.В./";
						ОбластьМакета.Параметры.ФИОБухгалтера    = "/Захаров В.В./";
						ОбластьМакета.Параметры.ФИООтветственный = "";
					КонецЕсли;
				ИначеЕсли Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.НайтиПоКоду("Я0004") Тогда //Для формула авто
					Если НЕ ОрганизацияОтгрузки.Пустая() Тогда
						ОбластьМакета.Параметры.ФИОРуководителя  = "/Зайцева Н.С./";
						ОбластьМакета.Параметры.ФИОБухгалтера    = "/Зайцева Н.С./";
						ОбластьМакета.Параметры.ФИООтветственный = "";
					КонецЕсли;
				КонецЕсли;
				//Конец ОЛ
			Иначе
				Если глТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Невежина И.Н.") 
					или глТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Ловыгина Е.И.") тогда
					ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчетаОператор");
				Иначе
					ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчетаФАКСИМИЛЬКА");
				КонецЕсли;
				ОбластьМакета.Параметры.ФИОРуководителя  = "/" + Руководитель  + "/";
				
			КонецЕсли;
			
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
		КонецЕсли; 
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьСчетаЗаказаКорректировки()
	// Миронычев  
	функция ПолучитьКодШтрихКода( КодТов ) 
		
		запрос = новый Запрос;
		запрос.Текст = "ВЫБРАТЬ
		|	ШК.Код,
		|	ШК.ТипШтрихкода,
		|	ШК.Штрихкод,
		|	ШК.Владелец,
		|	ШК.ЕдиницаИзмерения,
		|	ШК.ХарактеристикаНоменклатуры,
		|	ШК.СерияНоменклатуры,
		|	ШК.Качество
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК ШК
		|ГДЕ
		|	ШК.Владелец.Код = &Код";
		запрос.Параметры.Вставить("Код", КодТов);
		рез = запрос.Выполнить().Выгрузить();
		Шк = "";
		Если рез.Количество() > 0 Тогда
			Для Каждого стр из Рез Цикл
				Шк = Шк + строка(стр.Штрихкод)  + Символы.ПС;
			КонецЦикла;
			//ШК = строка(рез.Штрихкод);
		Иначе 
			ШК = "0"; //ПолучитьНовыйКодДляШтрихКодаЯШТ(КодТов);
		КонецЕсли;
		
		возврат ШК;
		
	КонецФункции
	
	//+++13.05.2015
	функция ПолучитьНовыйКодДляШтрихКодаЯШТ(Код)
		
		Если стрДлина(Код)<7 Тогда
			код1 = Формат(число(Код), "ЧЦ=7; ЧВН=");
		Иначе 
			код1 = код;
		КонецЕсли;	
		
		ШтрихКод = "05000"+ Код;
		ШтрихКод = ШтрихКод + КонтрольныйСимволEAN(ШтрихКод, 13);
		
		возврат ШтрихКод;
		
	КонецФункции
	

	Функция СформироватьНазначениеПлатежа(ЗапросТовары)
		текст = "Назначение платежа:" +Символы.ПС+
		"Оплата по счету № ";
		
		Текст = Текст + "" + Сред(Номер, 4, 6);
		Текст = Текст + " от " + Формат(Дата, "ДФ=dd.MM.yyyy");
		Текст = Текст + " за товар"; 
		ТекстСумма="Сумма " + Формат(ЗапросТовары.Итог("Сумма"), "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00") + Символы.ПС;
		
		
		ТабНДС=ЗапросТовары.Скопировать();
		
		
		ТабНДС.Свернуть("СтавкаНДС","СуммаНДС");
		
		Для Каждого СтрокаНДС ИЗ ТабНДС цикл
			
			ЗначениеСтавкиНДС = ПолучитьСтавкуНДС(СтрокаНДС.СтавкаНДС);
			
			ТекстСумма = ТекстСумма + "НДС(" + ?(ЗначениеНеЗаполнено(СтрокаНДС.СтавкаНДС), "без налога", СтрокаНДС.СтавкаНДС) + ") " + Формат(СтрокаНДС.СуммаНДС, "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00")+Символы.ПС;
			
		КонецЦикла;
		
		
		
		Возврат Текст+Символы.ПС+ТекстСумма; 
		
	КонецФункции // СформироватьНазначениеПлатежа()
	
	Функция ПолучитьСпособДоставки(СведенияОПоставщике)
		
		Запрос = Новый запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление как адрес
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
		|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента)
		|	И КонтактнаяИнформация.Объект = &Объект" ;
		Запрос.УстановитьПараметр("объект", Подразделение.Контрагент);
		РЕзультат = Запрос.Выполнить().Выгрузить();
		Если РЕзультат.Количество()>0 тогда
			Адрес = РЕзультат[0].Адрес;
		КонецЕсли;
		Текст1= "Силами Покупателя " + Контрагент + "  со склада Поставщика по адресу: "	+  Адрес;
		Текст2 = "Смлами Поставщика "+ ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,") +" по адресу: "+ ЗаказПокупателя.АдресДляТТН +" Разгрузка товара из транспорта Поставщика осуществляет Покупатель самостоятельно";
		Возврат ?(ЗаказПокупателя.СпособОтгрузки = Справочники.СпособыОтгрузкиТовара.НайтиПоКоду("10"), Текст1,
		?(ЗаказПокупателя.СпособОтгрузки = Справочники.СпособыОтгрузкиТовара.НайтиПоКоду("12"), 	Текст1,
		?(ЗаказПокупателя.СпособОтгрузки = Справочники.СпособыОтгрузкиТовара.НайтиПоКоду("11"), 	Текст1,
		
		?(ЗаказПокупателя.СпособОтгрузки = Справочники.СпособыОтгрузкиТовара.НайтиПоКоду("8"), 	Текст2,
		?(ЗаказПокупателя.СпособОтгрузки = Справочники.СпособыОтгрузкиТовара.НайтиПоКоду("6"), 	Текст2,
		?(ЗаказПокупателя.СпособОтгрузки = Справочники.СпособыОтгрузкиТовара.НайтиПоКоду("9"), 	Текст2,
		?(ЗаказПокупателя.СпособОтгрузки = Справочники.СпособыОтгрузкиТовара.НайтиПоКоду("7"), 	Текст2,"")))))));
	КонецФункции
	
	//КонецМиронычев

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли;

	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "Счет" Тогда
		// Печать счета на оплату
		ТабДокумент     = ПечатьСчетаЗаказа(ИмяМакета);
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();
	
	КонецЕсли;

	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, ""));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;

	СписокМакетов.Добавить("Счет", "Счет на оплату");

	ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
	Возврат СписокМакетов;


КонецФункции // ПолучитьСписокПечатныхФорм()

#КонецЕсли

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Организация, ВалютаДокумента, СтруктурнаяЕдиница,
					|Контрагент, ДоговорКонтрагента, КратностьВзаиморасчетов");

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, ДоговорКонтрагента.Организация, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура заполняет документ на основании заказа покупателя
//
Процедура ЗаполнитьПоЗаказуПокупателя() Экспорт

	// Заполнение шапки
	ЗаполнитьШапкуДокументаПоОснованию( ЭтотОбъект, ЗаказПокупателя);
	УстановитьДатуОплатыПоДоговору();
	ЗаполнитьТабЧастьТоварыНаОсновании( ЗаказПокупателя);
	//Миронычев
	Если ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ПредоплатаПоСчетам тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СчетНаОплатуПокупателю.Ссылка
			|ИЗ
			|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
			|ГДЕ
			|	СчетНаОплатуПокупателю.ЗаказПокупателя = &ЗаказПокупателя";

		Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);

		Результат = Запрос.Выполнить().Выгрузить();
		
		ЭтотОбъект.Номер = "З" + ЗаказПокупателя.Номер +"/"+ (1+Результат.Количество());
		ЭтотОбъект.АдресДоставки = ЗаказПокупателя.АдресДоставки;
		Для Каждого стр из Результат цикл
			Если не Стр.Ссылка.ПометкаУдаления Тогда 
				Стр.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
    //КонецМиронычев

	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить( "УчитыватьНДС",     УчитыватьНДС);
	ДопПараметры.Вставить( "СуммаВключаетНДС", СуммаВключаетНДС);
	
	ЗаполнитьТабЧастьУслугиПоЗаказу        ( Ссылка, Услуги, ОстаткиУслугПоЗаказуПокупателя( ЗаказПокупателя, ДоговорКонтрагента, Дата), ДопПараметры);
	ЗаполнитьТабЧастьТараПоЗаказуПокупателя( ВозвратнаяТара, ЗаказПокупателя, ДоговорКонтрагента, Дата);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура заполнения таб.части Товары
//
Процедура ЗаполнитьТабЧастьТоварыНаОсновании(ДокОснование)
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СуммаВключаетНДС", ДокОснование.СуммаВключаетНДС);
	ДопПараметры.Вставить("УчитыватьНДС",     ДокОснование.УчитыватьНДС);
	
	//+++ 23.09.2011 (менеджер Наталья) - добавлено поле НомерСтроки для "правильной" сортировки при заполнении документов на основании...
	//в ОбщийМодуль Заказы - функция ОстаткиТоваровПоЗаказуПокупателя( 
 	ЗаполнитьТабЧастьТоварыПоЗаказу(Ссылка, Товары, ОстаткиТоваровПоЗаказуПокупателя( ДокОснование, ДоговорКонтрагента, Дата), ДопПараметры);
	
	
	ЗаполнитьПлановуюСебестоимостьНаОсновании(ЭтотОбъект, ДокОснование, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ЗаполнитьТабЧастьТоварыНаОсновании()

// Процедура заполнения реквизита "ДатаОплаты" по договору.
//
// Параметры: 
//  РежимВызова - режим вызова процедуры.
//
Процедура УстановитьДатуОплатыПоДоговору(РежимВызова = "")Экспорт

	Если ЗначениеНеЗаполнено(Дата) Тогда
		Возврат;
	ИначеЕсли ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;

	ВидВзаиморасчетов = ДоговорКонтрагента.ВедениеВзаиморасчетов;

	Если ЗначениеНеЗаполнено(ВидВзаиморасчетов) Тогда
		Возврат;
	КонецЕсли;

	Если ВидВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
		Если ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности Тогда
			ЧислоДнейДоОплаты = ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности;
		Иначе
			ЧислоДнейДоОплаты = 0;
		КонецЕсли;
	Иначе
		Если ДоговорКонтрагента.ДержатьРезервБезОплатыОграниченноеВремя Тогда
			ЧислоДнейДоОплаты = ДоговорКонтрагента.ЧислоДнейРезерваБезОплаты;
		Иначе
			ЧислоДнейДоОплаты = 0;
		КонецЕсли;
	КонецЕсли;

	// Исключим выходные дни, и получим новую дату оплаты
	ДатаОплатыНовая   = НачалоДня(Дата);
	ЧислоДнейДоОплаты = ЧислоДнейДоОплаты - ?(ДеньНедели(ДатаОплатыНовая) > 5, 0, 1);

	Пока ЧислоДнейДоОплаты > 0 Цикл
		ДатаОплатыНовая   = ДатаОплатыНовая + 86400;
		ЧислоДнейДоОплаты = ЧислоДнейДоОплаты - 1;

		Пока ДеньНедели(ДатаОплатыНовая) > 5 Цикл
			ДатаОплатыНовая = ДатаОплатыНовая + 86400;
		КонецЦикла;
	КонецЦикла;

	Если ДатаОплаты <> ДатаОплатыНовая Тогда
		// Проверка режима вызова процедуры
		Если НЕ ПустаяСтрока(РежимВызова) Тогда
			Если РежимВызова = "ДатаДокумента" Тогда
				ТекстВопроса = "Изменилась дата документа.";
			Иначе
				ТекстВопроса = "Изменился договор с контрагентом.";
			КонецЕсли;
			#Если Клиент Тогда
			Если Вопрос(ТекстВопроса + " Пересчитать дату оплаты?", 
				РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
			#КонецЕсли
		КонецЕсли;

		ДатаОплаты = ДатаОплатыНовая;
	КонецЕсли;

КонецПроцедуры // УстановитьДатуОплатыПоДоговору()




////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда

		ЗаказПокупателя = Основание;
		ЗаполнитьПоЗаказуПокупателя();

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.Событие") Тогда

		КонтактноеЛицо    = Основание.КонтактноеЛицо;
		Контрагент        = Основание.Контрагент;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
    ЗаполнитьШапкуДокументаПоОснованию( ЭтотОбъект, Основание);

	// Заполняем таб. часть Товары по реализации
	Для каждого строкаТоварыОснование ИЗ Основание.Товары Цикл
		СтрокаТовары=Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары,строкаТоварыОснование);
	КонецЦикла;	
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если НЕ ОбменДанными.Загрузка  Тогда
		
		// Заголовок для сообщений об ошибках.
		Заголовок = "Невозможно записать документ """ + СокрЛП(Ссылка) + """: ";

		// Сформируем структуру реквизитов шапки документа
		СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

		// Проверим правильность заполнения шапки документа
		ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
		
		// Если договор с комиссионером, то надо почистить закладку "Услуги".
		Если Услуги.Количество() > 0
		   И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

			Услуги.Очистить();

		КонецЕсли;

		// Проверка заполнения единицы измерения мест и количества мест
		ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

		// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
		СуммаДокумента = ПолучитьСуммуДокументаСНДС(ЭтотОбъект);

	КонецЕсли; 
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 
	
КонецПроцедуры // ПередЗаписью

// Процедура вызывается при записи документа 
//
Процедура ПриЗаписи(Отказ)
	
		// Проверить заполнение подразделения, если нужно. 
	Если (Константы.ОбязательнаяУстановкаПодразделений.Получить() = Истина) Тогда 
		Если (Подразделение = Справочники.Подразделения.ПустаяСсылка()) Тогда 
			Отказ = Истина;
			Сообщить("Перед проведением, установите подразделение.", СтатусСообщения.Важное);
		КонецЕсли;
	КонецЕсли;

	Если НЕ ОбменДанными.Загрузка  Тогда
		
		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			УдалитьДанныеНезарегистрированногоКонтрагента(Ссылка, Отказ);
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры


Процедура УстановитьФлагиНДСПоОрганизации() Экспорт

	Если Не ЗначениеНеЗаполнено(Организация) Тогда
		Если УчетнаяПолитикаНалоговыйУчет("ОрганизацияЯвляетсяПлательщикомЕНВД", Организация, Дата) Тогда
			Если СуммаВключаетНДС <> Ложь Тогда
				СуммаВключаетНДС = Ложь;
			КонецЕсли; 
			Если УчитыватьНДС <> Ложь Тогда
				УчитыватьНДС = Ложь;
			КонецЕсли; 
			//Если НДСВключенВСтоимость <> Истина Тогда
			//	НДСВключенВСтоимость = Истина;
			//КонецЕсли; 
		Иначе	
			Если СуммаВключаетНДС <> Истина Тогда
				СуммаВключаетНДС = Истина;
			КонецЕсли; 
			Если УчитыватьНДС <> Истина Тогда
				УчитыватьНДС = Истина;
			КонецЕсли; 
			//Если НДСВключенВСтоимость <> Ложь Тогда
			//	НДСВключенВСтоимость = Ложь;
			//КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

//Функция ЭтоСкладООО(СкладПров)
//	
//	Запрос = новый Запрос("Выбрать * из РегистрСведений.СоответствиеСкладовОООСкладамИП где СкладИПОпт = &Склад");
//	Запрос.УстановитьПараметр("Склад",СкладПров);
//	Выб = Запрос.Выполнить().Выбрать();
//	Возврат Выб.Следующий();
//	
//КонецФункции
мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();