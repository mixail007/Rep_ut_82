Перем мОбновлятьВладельца Экспорт;

Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов; 

// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента; 

// Устанавливается в значение "Истина", если пользователю можно менять цену
// в документе
Перем мМожноМенятьЦенуВДокументе;

Перем мЧас;
Перем мМинута;

Перем мОбработкаТайпингаКонтактногоЛица;
Перем мТекстТайпингаКонтактногоЛица;
Перем мПоследнееЗначениеЭлементаТайпингаКонтактногоЛица;

Перем мОбработкаТайпингаКонтрагента;
Перем мТекстТайпингаКонтрагента;
Перем мПоследнееЗначениеЭлементаТайпингаКонтрагента;

Перем мКолонкиТовары, мКолонкиВозвратнаяТара;

// Хранит информацию о сумме без скидки документа.
Перем мСуммаДокументаБезСкидок Экспорт;
Перем мРассчитыватьАвтоматическиеСкидки Экспорт;
Перем мМинимальныеЦены Экспорт;
Перем мСписокФильтров Экспорт;

Перем мПечатнаяФормаПоУмолчанию;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ДоступностьДоговора()

	ЭлементыФормы.ДоговорКонтрагента.Доступность        = (ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты"));
	ЭлементыФормы.НадписьДоговорКонтрагента.Доступность = (ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты"));
	ЭлементыФормы.КнопкаПерерасчитатьДолг.Доступность   = (ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты"));
	ЭлементыФормы.ИнфНадписьДолга.Доступность           = (ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты"));
	
КонецПроцедуры

// Функция формирует структуру параметров для тайпинка контактного лица контрагента.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Структура имен и значений параметров
//
Функция ПолучитьСтруктуруПараметровТайпинга()

	СтруктураПараметров = Новый Структура("ВидКонтактногоЛица", Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента);
	Если НЕ ЗначениеНеЗаполнено(Контрагент) Тогда
		СтруктураПараметров.Вставить("ОбъектВладелец", Контрагент);
	КонецЕсли;
	
	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровТайпинга()()

// Процедура вызывается при выборе времени из списка у ЭУ ВремяНапоминания
//
Процедура ВыбратьВремя(ДатаВремен, ТекЭлемент, ПолныйГод = Истина)

	СтруктураРабочихВремен = ОпределитьНачалоИОкончениеРабочегоДняПользователя();
	
	СписокВремен = Новый СписокЗначений;
	НачалоРабочегоДня = НачалоДня(ДатаВремен)+Час(СтруктураРабочихВремен.ДатаНачала)*60*60+Минута(СтруктураРабочихВремен.ДатаНачала)*60;
	ОкончаниеРабочегоДня = НачалоДня(ДатаВремен)+Час(СтруктураРабочихВремен.ДатаОкончания)*60*60+Минута(СтруктураРабочихВремен.ДатаОкончания)*60 - 60*60;

	НачалоРабочегоДняДляСпискаВыбора = НачалоЧаса(НачалоРабочегоДня);
	а = 0;
	Пока 1=1 Цикл
		ВремяСписка = НачалоРабочегоДняДляСпискаВыбора + а*30*60;
		Если НачалоЧаса(ВремяСписка) > НачалоЧаса(ОкончаниеРабочегоДня) Тогда
			Прервать;
		КонецЕсли;
		Если ПолныйГод Тогда
			СписокВремен.Добавить(ВремяСписка, Формат(ВремяСписка,"ДФ='дд.ММ.гггг ЧЧ:мм'"));
		Иначе
			СписокВремен.Добавить(ВремяСписка, Формат(ВремяСписка,"ДФ='дд.ММ.гг ЧЧ:мм'"));
		КонецЕсли; 
		а = а + 1;
	КонецЦикла; 

	НачальноеЗначение = СписокВремен.НайтиПоЗначению(ДатаВремен);
	Если НачальноеЗначение = Неопределено Тогда
		ВыбранноеВремя = ЭтаФорма.ВыбратьИзСписка(СписокВремен, ТекЭлемент);
	Иначе
		ВыбранноеВремя = ЭтаФорма.ВыбратьИзСписка(СписокВремен, ТекЭлемент, НачальноеЗначение);
	КонецЕсли; 

	Если ВыбранноеВремя <> Неопределено Тогда
		ДатаВремен = ВыбранноеВремя.Значение;
	КонецЕсли; 
	
КонецПроцедуры // ВыбратьВремя()

// Процедура изменяет доступность элемента формы .ВремяНапоминания
//
Процедура ДоступностьНапоминаний()

	ЭлементыФормы.ВремяНапоминания.Доступность = НапомнитьОСобытии;
	
КонецПроцедуры // ДоступностьНапоминаний()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	ПриИзмененииЗначенияДоговора(ЭтотОбъект, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Продажа", "Товары", мТекущийДоговорКонтрагента);

	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	СформироватьНадписьДолга(ДоговорКонтрагента, Неопределено, ЭлементыФормы.ИнфНадписьДолга, , Истина);
	УстановитьЗаголовкиПоДоговору();

	УстановитьДатуОплатыПоДоговору("ДоговорКонтрагента");
	УстановитьВидимость();
	ДоступностьДоговора();

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров      = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;

КонецПроцедуры // ПриИзмененииДоговора()

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)

	СписокЗапросов      = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Если ТабличнаяЧасть = Товары Тогда
		СписокЗапросов.Добавить("РасходЦеныНоменклатуры", "По ценам номенклатуры");
		СписокЗапросов.Добавить("ОстаткиНоменклатуры", "По остаткам номенклатуры");
		СписокЗапросов.Добавить("РасходОстаткиИЦеныНоменклатуры", "По остаткам и ценам номенклатуры");
	КонецЕсли;

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена            = мМожноМенятьЦенуВДокументе;
	ЕстьСерия           = Ложь;
	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	Если ТабличнаяЧасть = Товары Тогда
		
		Команда           = "ПодборВТабличнуюЧастьТовары";
		Валюта            = ВалютаДокумента;
		ИмяТабличнойЧасти = "Товары";
		
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

		Если ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
			Предупреждение("Не выбран договор контрагента!");
			Возврат;
		ИначеЕсли ЗначениеНеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
			Предупреждение("Не выбрана валюта взаиморасчетов по договору!");
			Возврат;
		КонецЕсли;
		Валюта = ДоговорКонтрагента.ВалютаВзаиморасчетов;

		Команда           = "ПодборВТабличнуюЧастьВозвратнаяТара";
		ИмяТабличнойЧасти = "Тара";
		
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда

		Команда           = "ПодборВТабличнуюЧастьУслуги";
		Валюта            = ВалютаДокумента;
		ЕстьСерия         = Ложь;
		ИмяТабличнойЧасти = "Услуги";
	
	КонецЕсли;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ПредставлениеДок   = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов",        ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад",               Склад);
	СтруктураПараметровПодбора.Вставить("ТипЦен",              ТипЦен);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента",  ДоговорКонтрагента);
	СтруктураПараметровПодбора.Вставить("Контрагент",          Контрагент);
	СтруктураПараметровПодбора.Вставить("Организация",         Организация);
	СтруктураПараметровПодбора.Вставить("Комиссионер",         Справочники.Контрагенты.ПустаяСсылка());
	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен", СпособЗаполненияЦен);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена",            ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия",           ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента",     Валюта);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);

	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("КоличествоМест"  , КоличествоМест);
	ЗначениеВыбора.Свойство("Цена"            , Цена);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);

	Если (ТабличнаяЧасть = Товары ИЛИ ТабличнаяЧасть = ВозвратнаяТара)
	   И Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	ИначеЕсли ТабличнаяЧасть = Услуги И Не Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте товары не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	Если ТабличнаяЧасть = Товары Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	Иначе
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;

	СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда

			СуммаСтрокиДоИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			//Расчет скидок
			Если РассчитыватьАвтоматическиеСкидки() Тогда
				СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
				Разница = СуммаСтрокиПослеИзменения - СуммаСтрокиДоИзменения;

				мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + Разница;
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
				СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
				СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
				СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
				СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
				СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
				РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
			Иначе // Рассчитать реквизиты табличной части.
				РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

			// Итоговая информация об отклонение от плановой себестоимости
			СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;

		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;

			// Заполняем реквизиты табличной части.
			ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Пересчитаем цену в валюту документа.
			Цена = ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                 СпособЗаполненияЦен,
			                                                 ТипЦен.ЦенаВключаетНДС,
			                                                 УчитыватьНДС,
			                                                 СуммаВключаетНДС,
			                                                 ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			//Расчет скидок
			Если РассчитыватьАвтоматическиеСкидки() Тогда
				СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

				мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения;
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
				СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
				СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
				СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
				СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
				СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
				РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
			Иначе // Рассчитать реквизиты табличной части.
				РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

			// Рассчитываем плановую себестоимость.
			РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);

			// Итоговая информация об отклонение от плановой себестоимости
			СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			// Пересчитаем цену в валюту документа.
			Цена = ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения.
			// Считаем, что оценочную стоимость возвратной тары всегда задают с НД
			// ставки берутся из номенклатуры.
			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                     СпособЗаполненияЦен,
			                                     ТипЦен.ЦенаВключаетНДС,
			                                     УчитыватьНДС,
			                                     Истина,
			                                     ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС));

			// Рассчитать реквизиты табличной части.
			РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			// Заполняем реквизиты табличной части.
			ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Пересчитаем цену в валюту документа.
			Цена = ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                 СпособЗаполненияЦен,
			                                                 ТипЦен.ЦенаВключаетНДС,
			                                                 УчитыватьНДС,
			                                                 СуммаВключаетНДС,
			                                                 ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
	КонецЕсли;

	ТабличнаяЧастьИмя = ?(ТабличнаяЧасть = Товары, "Товары", "ВозвратнаяТара");
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока  = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 
	ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект); 

КонецПроцедуры // ПриИзмененииНоменклатурыТоваров()

// Производит заполнение и установку необходимых полей при изменении характеристики товара в табличной части.
//
Процедура ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 

КонецПроцедуры // ПриИзмененииХарактеристикиНоменклатурыТоваров()

//Проверяет необходимость рассчета автоматических скидок
//
Функция РассчитыватьАвтоматическиеСкидки()

	Если НЕ мРассчитыватьАвтоматическиеСкидки
	 Или Проведен
	 Или (ЗаказПокупателя <> Неопределено
	    И ЗаказПокупателя <> Документы.ЗаказПокупателя.ПустаяСсылка()) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает соответстующие свойства поля ввода цены при изменении 
// номенклатуры в текущей строке табличной части.
//
// Параметры:
//  Номенклатура - ссылка на справочник, элемент номенклатуры, для которого будем устанавливать цену
//
Процедура УстановитьСвойстваПоляВводаЦены()

	ТекущаяСтрока     = ЭлементыФормы.Товары.ТекущиеДанные;
	ЭлементУправления = ЭлементыФормы.Товары.Колонки.Цена.ЭлементУправления;
	ЭлементУправления.КнопкаСпискаВыбора = Ложь;
	
КонецПроцедуры // УстановитьСвойстваПоляВводаЦены()

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	Колонки      = ЭлементыФормы.Товары.Колонки;
	КолонкиТары  = ЭлементыФормы.ВозвратнаяТара.Колонки;

	// Колонки налога показываем только тогда, когда его учитываем.
	Если УчитыватьНДС <> Колонки.СтавкаНДС.Видимость Тогда
		УстановитьВидимостьКолонкиТабЧасти(Колонки.СтавкаНДС, УчитыватьНДС);
	КонецЕсли;

	Если УчитыватьНДС <> Колонки.СуммаНДС.Видимость Тогда
		УстановитьВидимостьКолонкиТабЧасти(Колонки.СуммаНДС, УчитыватьНДС);
	КонецЕсли;

	// Услуги на комиссию не отдаем.
	ВидимостьЗакладкиУслуг = ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = ВидимостьЗакладкиУслуг;

КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает заголовки по выбранному договору для:
// - элемента формы НадписьСуммаВзаиморасчетов.
//
// Параметры:
//  Нет.
//
Процедура УстановитьЗаголовкиПоДоговору()

	УстановитьНадписьСуммыВзаиморасчетов(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // УстановитьЗаголовкиПоДоговору()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = ФорматСумм(ПолучитьСуммуДокументаСНДС(ЭтотОбъект));
	ЭлементыФормы.ВсегоНДС.Значение = ФорматСумм(ПолучитьНДСДокумента(ЭтотОбъект));

	ВременнаяСтрока = "";

	Если (НЕ ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента))
	   И (ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда

		ВременнаяСтрока = ВременнаяСтрока + КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета) +  ДокументОбъект.ВалютаДокумента
		                + " = " + КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
		                + мВалютаРегламентированногоУчета + ", ";

	КонецЕсли;

	Если НЕ ЗначениеНеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
	Иначе
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;
	

КонецПроцедуры // ОбновитьПодвал()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	ИспользованиеСкидок = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(ДокументОбъект.Дата);
	Если ИспользованиеСкидок.ИспользоватьСкидкиПоКоличествуТовара
	 Или ИспользованиеСкидок.ИспользоватьСкидкиПоСуммеДокумента
	 Или ИспользованиеСкидок.ИспользоватьСкидкиПоВидуОплаты
	 Или ИспользованиеСкидок.ИспользоватьСкидкиПоДисконтнойКарте
	 Или ИспользованиеСкидок.ИспользоватьСкидкиПоВыбраннойДисконтнойКартойСумме Тогда
	 	мРассчитыватьАвтоматическиеСкидки = Истина;
	Иначе
		мРассчитыватьАвтоматическиеСкидки = Ложь;
	КонецЕсли;

	ЭлементыФормы.Товары.Колонки.ПроцентАвтоматическихСкидок.Видимость = мРассчитыватьАвтоматическиеСкидки;
	ЭлементыФормы.ОсновнаяПанель.Страницы.АвтоматическиеСкидки.Видимость = мРассчитыватьАвтоматическиеСкидки;

	Если НЕ ЭтоНовый() Тогда
		ПрочитатьДанныеНезарегистрированногоКонтрагента(Ссылка, ДанныеНезарегистрированногоКонтрагента);
	КонецЕсли; 
	
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	ДоступностьНапоминаний();

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета, "Продажа");
		//миронычев
		Если  ЭтотОбъект.Номер = "" тогда
			УстановитьНомерДокумента(ЭтотОбъект);
		КонецЕсли;
		//Конецмиронычев

		//УстановитьНомерДокумента(ЭтотОбъект);
		УстановитьДатуОплатыПоДоговору();
		
		Если НЕ ЗначениеНеЗаполнено(ПараметрОбъектКопирования) Тогда
			ДанныеКонтрагента = РегистрыСведений.ДанныеНезарегистрированныхКонтрагентов.СоздатьМенеджерЗаписи();
			ПрочитатьДанныеНезарегистрированногоКонтрагента(ПараметрОбъектКопирования, ДанныеКонтрагента);
			Для каждого Реквизит Из Метаданные.РегистрыСведений.ДанныеНезарегистрированныхКонтрагентов.Реквизиты Цикл
				ДанныеНезарегистрированногоКонтрагента[Реквизит.Имя] = ДанныеКонтрагента[Реквизит.Имя];
			КонецЦикла; 
		КонецЕсли; 
		
	КонецЕсли;

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("ЕдиницаХранения");

	// Установить ограничение - изменять видимоть колонок для таличной части 
	// "Возвратная тара".
	УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ВозвратнаяТара.Колонки, СтруктураКолонок);

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("СтавкаНДС");
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("ПроцентСкидкиНаценки");
	СтруктураКолонок.Вставить("ЕдиницаИзмерения");
	
	УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Товары.Колонки, СтруктураКолонок);

	// Заполнить подменю выбора печатных форм.
	СписокМакетов = ЭтотОбъект.ПолучитьСписокПечатныхФорм();
	УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати,
	                                       СписокМакетов,
	                                       Новый Действие("ДействияФормыДействиеВыбратьПечатнуюФормы"));

	// Установить печатную форму по умолчанию.
	УстановитьКнопкуПечати(ЭтотОбъект.Метаданные().Имя, ЭтаФорма, СписокМакетов, мПечатнаяФормаПоУмолчанию);

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);

	// Обновить содержание информационных строк.
	СформироватьНадписьДолга(ДоговорКонтрагента, Неопределено, ЭлементыФормы.ИнфНадписьДолга, Ссылка, Истина);
	УстановитьЗаголовкиПоДоговору();

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;

	// Установить видимость колонок "ХарактеристикаНоменклатуры"
	УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	// установим доступность колонки "Цена" для редактирования
	мМожноМенятьЦенуВДокументе = РазрешитьРедактированиеЦенВДокументах();

	ЭлементыФормы.Товары.Колонки.Цена.ЭлементУправления.ТолькоПросмотр                 = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.Товары.Колонки.Сумма.ЭлементУправления.ТолькоПросмотр                = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.Товары.Колонки.ПроцентСкидкиНаценки.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.Товары.Колонки.СуммаНДС.ЭлементУправления.ТолькоПросмотр             = НЕ мМожноМенятьЦенуВДокументе;

	ЭлементыФормы.Услуги.Колонки.Цена.ЭлементУправления.ТолькоПросмотр                 = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.Услуги.Колонки.Сумма.ЭлементУправления.ТолькоПросмотр                = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.Услуги.Колонки.ПроцентСкидкиНаценки.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.Услуги.Колонки.СуммаНДС.ЭлементУправления.ТолькоПросмотр             = НЕ мМожноМенятьЦенуВДокументе;

	ЭлементыФормы.ВозвратнаяТара.Колонки.Цена.ЭлементУправления.ТолькоПросмотр         = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.ВозвратнаяТара.Колонки.Сумма.ЭлементУправления.ТолькоПросмотр        = НЕ мМожноМенятьЦенуВДокументе;

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	// Выполнить стандартные действия при определении режима использования плановой себестоимости
	ИзмененитьРежимИспользованияПлановойСебестоимости(ЭтотОбъект, ЭтаФорма, мВалютаРегламентированногоУчета);

	мПоследнееЗначениеЭлементаТайпингаКонтрагента     = Контрагент;
	мПоследнееЗначениеЭлементаТайпингаКонтактногоЛица = КонтактноеЛицо;

	// Итоговая информация об отклонение от плановой себестоимости
	СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

	ДоступностьДоговора();

	мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
	мМинимальныеЦены = Новый ТаблицаЗначений;
	мМинимальныеЦены.Колонки.Добавить("Номенклатура");
	мМинимальныеЦены.Колонки.Добавить("ХарактеристикаНоменклатуры");
	мМинимальныеЦены.Колонки.Добавить("Цена");

	мСписокФильтров = ПолучитьЗначениеПраваПользователя(
					ПланыВидовХарактеристик.ПраваПользователей.НеОтпускатьТоварСЦенойНижеОпределенногоТипа,
					Неопределено);

	Если мРассчитыватьАвтоматическиеСкидки Тогда
		ЭлементыФормы.АвтоматическиеСкидки.ОтборСтрок.ПроцентАвтоматическихСкидок.Значение = 0;
		ЭлементыФормы.АвтоматическиеСкидки.ОтборСтрок.ПроцентАвтоматическихСкидок.ВидСравнения = ВидСравнения.НеРавно;
		ЭлементыФормы.АвтоматическиеСкидки.ОтборСтрок.ПроцентАвтоматическихСкидок.Использование = Истина;
		ЭлементыФормы.АвтоматическиеСкидки.НастройкаОтбораСтрок.ПроцентАвтоматическихСкидок.Доступность = Ложь;
	КонецЕсли;
	

	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 

	
КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Пересчитаем сумму взаиморасчетов.
	Если КурсВзаиморасчетов = 0 Тогда
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = 0;
	Иначе

		ЭлементыФормы.СуммаВзаиморасчетов.Значение = ФорматСумм(ПересчитатьИзВалютыВВалюту(ПолучитьСуммуДокументаСНДС(ЭтотОбъект),  
		                                                          ВалютаДокумента, мТекущаяВалютаВзаиморасчетов,
		                                                          КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КурсВзаиморасчетов,
		                                                          КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),КратностьВзаиморасчетов));

	КонецЕсли;

	ЭлементыФормы.ИнфНадписьКурса.Заголовок = ПолучитьИнформациюКурсаВалютыСтрокой(мТекущаяВалютаВзаиморасчетов,
	                                                                               КурсВзаиморасчетов,
	                                                                               КратностьВзаиморасчетов,
	                                                                               мВалютаРегламентированногоУчета,
	                                                                               Истина);

	ОбновитьПодвал();

	// Подсчитаем количество строк в табличных частях.
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если СтраницаПанели.Имя = "Тара" Тогда
			СтраницаПанели.Заголовок = "Тара (" + ДокументОбъект.ВозвратнаяТара.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "Товары" Тогда
			СтраницаПанели.Заголовок = "Товары (" + ДокументОбъект.Товары.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "Услуги" Тогда
			СтраницаПанели.Заголовок = "Услуги (" + ДокументОбъект.Услуги.Количество() + " поз.)";
		КонецЕсли;

	КонецЦикла;

	ОбновлениеОтображенияВФормеПриТайпинге(ЭтаФорма, ЭтаФорма.ЭлементыФормы.КонтактноеЛицо, мОбработкаТайпингаКонтактногоЛица, мТекстТайпингаКонтактногоЛица);
	ОбновлениеОтображенияВФормеПриТайпинге(ЭтаФорма, ЭлементыФормы.Контрагент, мОбработкаТайпингаКонтрагента, мТекстТайпингаКонтрагента);
	
	Если Кредит Тогда
	
		ПересчитатьКредит();
	
	КонецЕсли; 
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);
			
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
			ОбработкаПодбора(ВозвратнаяТара, ЗначениеВыбора);
			
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьУслуги" Тогда
			ОбработкаПодбора(Услуги, ЗначениеВыбора);
			
		ИначеЕсли Команда = "ИзменениеТабличнойЧастиТовары" Тогда
			// Рассчитывает плановую себестоимость во всех строке табличной части документа
			РассчитатьПлановуюСебестоимостьВСтрокахТабЧасти(ЭтотОбъект, мВалютаРегламентированногоУчета);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
	
	Если мОбновлятьВладельца Тогда
		ОповеститьОЗаписиНовогоОбъекта(ЭтотОбъект);
	КонецЕсли; 
	
КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если НапомнитьОСобытии Тогда
	
		Если Ответственный.Пустая() Тогда

			Предупреждение("Выберите ответственное лицо, для напоминания.");
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;

		Если НЕ ПолучитьЗначениеПоУмолчанию(Ответственный,"ИспользоватьНапоминания") Тогда

			Предупреждение("Для ответственного лица, которое вы выбрали, недоступна система напоминаний.
			               |Для пользователя " + СокрЛП(Ответственный) + " необходимо установить флажок использования напоминаний.");
			Отказ = Истина;
			Возврат;
			
		КонецЕсли; 
	
	КонецЕсли; 
	
	Если ЭтаФорма.Модифицированность И ЭтаФорма.ВладелецФормы <> Неопределено Тогда

		мОбновлятьВладельца = Истина;
		
	КонецЕсли;
	
	яштСменаПользователя(ЭтотОбъект, ЭтаФорма, глТекущийПользователь);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик внешнего события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	Если глТорговоеОборудование <> Неопределено Тогда

		СтруктураПараметров = Новый Структура();

		Если Событие = "BarCodeValue" Тогда

			ИмяТекущейСтраницы = ЭтаФорма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
			Если ИмяТекущейСтраницы = "Товары" Тогда

				Команда         = "ПодборВТабличнуюЧастьТовары";
				Валюта          = ВалютаДокумента;
				ИмяТабличнойЧасти = "Товары";

			ИначеЕсли ИмяТекущейСтраницы = "Услуги" Тогда

				Команда         = "ПодборВТабличнуюЧастьУслуги";
				Валюта          = ВалютаДокумента;
				ИмяТабличнойЧасти = "Услуги";

			ИначеЕсли ИмяТекущейСтраницы = "Тара" Тогда

				Если ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
					Предупреждение("Не выбран договор контрагента!");
					Возврат;
				ИначеЕсли ЗначениеНеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
					Предупреждение("Не выбрана валюта взаиморасчетов по договору!");
					Возврат;
				КонецЕсли;

				Команда           = "ПодборВТабличнуюЧастьВозвратнаяТара";
				Валюта = ДоговорКонтрагента.ВалютаВзаиморасчетов;
				ИмяТабличнойЧасти = "ВозвратнаяТара";


			Иначе

				// Ничего не надо делать
				Возврат;

			КонецЕсли;

			ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);

			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("Команда"              , Команда);
			СтруктураПараметров.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
			СтруктураПараметров.Вставить("ТипЦен"               , ТипЦен);
			СтруктураПараметров.Вставить("СпособЗаполненияЦен"  , Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);
			СтруктураПараметров.Вставить("ВалютаЦены"           , Валюта);
			СтруктураПараметров.Вставить("ИмяТабличнойЧасти"    , ИмяТабличнойЧасти);

			глТорговоеОборудование.ОбработатьВнешнееСобытиеОтСканераДляФормы(ЭтаФорма, ЭтотОбъект, СтруктураПараметров, Данные);

		ИначеЕсли Событие = "MagneticStripeCardValue" Тогда
			СтруктураПараметров.Вставить("Команда"              , "");
			глТорговоеОборудование.ОбработатьВнешнееСобытиеОтРидераДляФормы(ЭтаФорма, ЭтотОбъект, СтруктураПараметров, Данные);
		КонецЕсли;

		Команда = "";
		СтруктураПараметров.Свойство("Команда", Команда);
		//Расчет скидок
		Если РассчитыватьАвтоматическиеСкидки()
			И Команда = "РассчитатьДисконтныеСкидки"Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
			СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
			СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
			СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
			СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
			СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
			РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ВнешнееСобытие()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Изменить" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// группового изменения значений реквизитов табличной части "Товары".
//
Процедура КоманднаяПанельТоварыДействиеИзменить(Кнопка)

	// Получим контекст обработки
	ИзменениеТабличнойЧастиТовары      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменые формы.
	ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект             = ЭтотОбъект;
	ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента            = ЭтаФорма;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьНДС                   = УчитыватьНДС; 
	ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице          = Ложь;
	ФормаИзменениеТабличнойЧастиТовары.мРассчитыватьАвтоматическиеСкидки   = РассчитыватьАвтоматическиеСкидки();
	ФормаИзменениеТабличнойЧастиТовары.мСпособЗаполненияЦен       = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	ФормаИзменениеТабличнойЧастиТовары.мМинимальныеЦены           = мМинимальныеЦены;
	ФормаИзменениеТабличнойЧастиТовары.мСписокФильтров            = мСписокФильтров;

	//Перенесем табличную часть
	ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры // КоманднаяПанельТоварыДействиеИзменить()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	// Сохраняем текущие заначения реквизитов документа.
	ТекущиеЗначенияРеквизитов = Новый Структура();
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийТипЦен",				ТипЦен);
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийВалютаДокумента",	ВалютаДокумента); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийКурсДокумента",		КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийКратностьДокумента",	КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийУчитыватьНДС",		УчитыватьНДС); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийСуммаВключаетНДС",	СуммаВключаетНДС); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийИспользоватьПлановуюСебестоимость",	ИспользоватьПлановуюСебестоимость);

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            , "Товары");
	Если СтруктураЗначений <> Неопределено Тогда
		ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "Товары", мВалютаРегламентированногоУчета, , СтруктураЗначений);

		Если СтруктураЗначений.ТекущийТипЦен <> СтруктураЗначений.НовыйТипЦен Тогда
			ОбновитьФормуПодбора("ТипЦен");
		КонецЕсли;
	КонецЕсли;

	// Выполнить стандартные действия при изменении режима использования плановой себестоимости
	ИзмененитьРежимИспользованияПлановойСебестоимости(ЭтотОбъект, ЭтаФорма, мВалютаРегламентированногоУчета, ТекущиеЗначенияРеквизитов.ТекущийИспользоватьПлановуюСебестоимость);

	// Пересчитывает плановую себестоимость с учетом новой валюты и налогов
	ИзменитьВалютуНалогиПлановойСебестоимостиТабЧасти(ЭтотОбъект, ТекущиеЗначенияРеквизитов, мВалютаРегламентированногоУчета);

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;

	// Итоговая информация об отклонение от плановой себестоимости
	СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

	УстановитьВидимость();

КонецПроцедуры // КоманднаяПанельТоварыДействиеЦеныВалюта()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Возвратная тара", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеПодбор(Кнопка)

	ДействиеПодбор(ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	НапечататьДокументПоУмолчанию(ЭтотОбъект, глТекущийПользователь, мПечатнаяФормаПоУмолчанию);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
//
Процедура ДействияФормыДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = Кнопка.Текст;
		СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		СписокМакетов = ПолучитьСписокПечатныхФорм();
		СтрокаМакетаВСписке = СписокМакетов.НайтиПоЗначению(Кнопка.Имя);
		Если СтрокаМакетаВСписке <> Неопределено Тогда
			Печать(СтрокаМакетаВСписке.Значение);
			СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
			СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;			
			
		Иначе
			СсылкаВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Кнопка.Имя, "_", "-")));
			Печать(СсылкаВнешнейФормы);
			СтруктураМакета.Макет = СсылкаВнешнейФормы;
			СтруктураМакета.ПредставлениеМакета = Кнопка.Текст;
		КонецЕсли;		
		
		мПечатнаяФормаПоУмолчанию = СтруктураМакета.Макет;
		СохранитьТекущуюКнопкуПечати(ЭтотОбъект.Метаданные().Имя, СтруктураМакета);
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Услуги", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Услуги".
//
Процедура КоманднаяПанельУслугиДействиеПодбор(Кнопка)

	ДействиеПодбор(Услуги);

КонецПроцедуры // КоманднаяПанельУслугиДействиеПодбор()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	УстановитьДатуОплатыПоДоговору("ДатаДокумента");

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьНомерДокумента(ЭтотОбъект);

	// Выполняем общие действия для всех документов при изменении Организация.
	ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	
	УстановитьФлагиНДСПоОрганизации();

	// Надо установить банк. счет, если он принадлежит другой организации
	// или не заполнен.
	Если ЗначениеНеЗаполнено(СтруктурнаяЕдиница) 
	 ИЛИ (ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") 
	      И (СтруктурнаяЕдиница.Владелец <> Организация)) Тогда

		СтруктурнаяЕдиница = Организация.ОсновнойБанковскийСчет;

	КонецЕсли;

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода заказа покупателя.
//
Процедура ЗаказПокупателяПриИзменении(Элемент)

	Если ЗначениеНеЗаполнено(Элемент.Значение) Тогда

		//Расчет скидок
		Если РассчитыватьАвтоматическиеСкидки() Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
			СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
			СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
			СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
			СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
			СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
			РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
		КонецЕсли;

	Иначе

		ЗаполнитьПоЗаказуПокупателя();

	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);

	Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если ЗначениеНеЗаполнено(Контрагент) Тогда
			КонтактноеЛицо = Справочники.КонтактныеЛица.ПустаяСсылка();
		Иначе
			Если ТипЗнч(КонтактноеЛицо) = Тип("Строка") ИЛИ (ТипЗнч(КонтактноеЛицо) <> Тип("Строка") И (ЗначениеНеЗаполнено(КонтактноеЛицо) ИЛИ КонтактноеЛицо.ОбъектВладелец <> Контрагент)) Тогда
				КонтактноеЛицо = Контрагент.ОсновноеКонтактноеЛицо;
			КонецЕсли; 
		КонецЕсли;
	Иначе
		Если ТипЗнч(КонтактноеЛицо) <> Тип("Строка") Тогда
			КонтактноеЛицо = "";
		КонецЕсли;
		ДанныеНезарегистрированногоКонтрагента.НаименованиеКонтрагента = Контрагент;
	КонецЕсли; 
	
	ПриИзмененииДоговора();
	
	ДоступностьДоговора();
	
	мПоследнееЗначениеЭлементаТайпингаКонтрагента = Элемент.Значение;
	
	УстановитьФлагиНДСПоОрганизации();
	
КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;

	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);

	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
	                                        СписокВидовДоговоров, СтандартнаяОбработка);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Склад
//
Процедура СкладНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.НеРавно, СтандартнаяОбработка);

КонецПроцедуры // СкладНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода
// "Структурная единица". Процедура предлагает выбор пользователю из
// соттветствующих справочников и открывает форму списка для выбора 
// значения с отбором по текущему контрагенту. 
//
Процедура СтруктурнаяЕдиницаНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораЗначенияСтруктурнойЕдиницы(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры // СтруктурнаяЕдиницаНачалоВыбора()

// Процедура - обработчик события "Нажатие" кнопки "КнопкаПерерасчитатьДолг".
// Процедура вызывает сервисный механизм пересчета долга контрагента 
// по выбранному в форме договору взаиморасчетов и сделке.
//
Процедура КнопкаПерерасчитатьДолгНажатие(Элемент)

	СформироватьНадписьДолга(ДоговорКонтрагента, Неопределено, ЭлементыФормы.ИнфНадписьДолга);

КонецПроцедуры // КнопкаПерерасчитатьДолгНажатие()

// Процедура - обработчик события "НачалоВыбора" элемента формы АдресДоставки
//
Процедура АдресДоставкиНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если Контрагент.Пустая() Тогда
		ВвестиЗначение(Контрагент, "Выберите контрагента");
	КонецЕсли;

	Если НЕ Контрагент.Пустая() Тогда
		ФормаВыбора = РегистрыСведений.КонтактнаяИнформация.ПолучитьФормуСписка("ФормаСписка", ЭтаФорма);
		ФормаВыбора.РежимВыбора = Истина;

		ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Значение = Контрагент;
		ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Использование = Истина;

		СтруктураОтбораАдресов = Новый СписокЗначений;
		СтруктураОтбораАдресов.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
		ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.ВидСравнения = ВидСравнения.ВСписке;
		ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Значение = СтруктураОтбораАдресов;
		ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.РегистрСведенийСписок.Колонки.Тип.Видимость = Ложь;

		ВыбАдресДоставки = ФормаВыбора.ОткрытьМодально();

		Если Не ЗначениеНеЗаполнено(ВыбАдресДоставки) Тогда
			АдресДоставки = ВыбАдресДоставки;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ДисконтнаяКарта"
//
Процедура ДисконтнаяКартаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка    = Ложь;
	ФормаВыбора             = Справочники.ИнформационныеКарты.ПолучитьФормуВыбора(,Элемент);
	ФормаВыбора.РежимВыбора = Истина;

	ФормаВыбора.СправочникСписок.Отбор.ТипКарты.Значение      = Перечисления.ТипыИнформационныхКарт.Дисконтная;
	ФормаВыбора.СправочникСписок.Отбор.ТипКарты.Использование = Истина;

	ФормаВыбора.СправочникСписок.Отбор.ТипКарты.ВидСравнения          = ВидСравнения.Равно;

	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "Открытие" поля ввода "ДисконтнаяКарта"
//
Процедура ДисконтнаяКартаОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если НЕ ЗначениеНеЗаполнено(Элемент.Значение) Тогда
		Процент = Элемент.Значение.ПроцентСкидки;
		Элемент.Значение.ПолучитьФорму(, ЭтаФорма, ЭтаФорма).ОткрытьМодально();
		Если Элемент.Значение.ПроцентСкидки <> Процент Тогда
			Если РассчитыватьАвтоматическиеСкидки() Тогда
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
				СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
				СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
				СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
				СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
				СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
				РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ДисконтнаяКарта"
//
Процедура ДисконтнаяКартаПриИзменении(Элемент)

	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Товары". Формирует данные в колонке "Всего".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.Товары.Колонки.Всего.Видимость Тогда
		ОформлениеСтроки.Ячейки.Всего.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Всего.Текст = ФорматСумм(ДанныеСтроки.Сумма
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС));

	КонецЕсли;

	// Рассчитать и показать в колонках информацию о сумме и отклонении от плановой себестоимости
	ЗаполнитьСуммуИОтклонениеОтПлановойСебестоимостиТабЧасти(ОформлениеСтроки, ДанныеСтроки, ЭтотОбъект);

	ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	ПоказатьСуммуБезСкидок(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Цена, ДанныеСтроки.Количество);

КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ПриОкончанииРедактирования" табличной части "Товары".
//
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	// Итоговая информация об отклонение от плановой себестоимости
	СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

КонецПроцедуры // ТоварыПриОкончанииРедактирования()

// Процедура - обработчик события "ПередУдалением" табличной части "Товары".
//
Процедура ТоварыПередУдалением(Элемент, Отказ)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;
	мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок - СуммаСтроки;

КонецПроцедуры

// Процедура - обработчик события "ПослеУдаления" табличной части "Товары".
//
Процедура ТоварыПослеУдаления(Элемент)

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;

	// Итоговая информация об отклонение от плановой себестоимости
	СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

КонецПроцедуры // ТоварыПослеУдаления()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

		мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения - СуммаСтроки;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

	// Рассчитываем плановую себестоимость.
	РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

	ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти);

	Если РассчитыватьАвтоматическиеСкидки() Тогда
		//Расчет скидок
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Перечисления.СпособРасчетаСуммыДокумента.БезУчетаСкидок);
		СуммаСтрокиНовая = СтрокаТабличнойЧасти.Сумма;

		//Расчет скидок
		мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиНовая - СуммаСтроки;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе

		// Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	КонецЕсли;

	// Рассчитываем плановую себестоимость.
	РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	// Сохраняем текущее значение коэффициента
	СтароеЗначениеКоэффициента = ЭлементыФормы.Товары.ТекущиеДанные.Коэффициент;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

	// Выполнить общие действия для всех документов при изменении Единица.
	ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	// Пересчитываем плановую себестоимость.
	ПриИзмененииЕдиницыТабЧастиПлановаяСебестоимость(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект, СтароеЗначениеКоэффициента);

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

		мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения - СуммаСтроки;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе

		// Рассчитать реквизиты табличной части.
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	КонецЕсли;

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриНачалеВыбораИзСписка" поля ввода цены
// в строке табличной части "Товары" и "Возвратная тара"
//
Процедура ТоварыЦенаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение("Не выбрана позиция номенклатуры!"); 
		Возврат;
	КонецЕсли; 

	Элемент.СписокВыбора = СформироватьСписокРозничныхЦен(СтрокаТабличнойЧасти.Номенклатура,
	                                                        СтрокаТабличнойЧасти.ЕдиницаИзмерения,
	                                                        СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
	                                                        //СтрокаТабличнойЧасти.Размещение, 
	                                                        , 
	                                                        мВалютаРегламентированногоУчета,
	                                                        , Дата, ВалютаДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
	                                                        УчитыватьНДС, СуммаВключаетНДС, 
	                                                        ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

КонецПроцедуры // ТоварыЦенаНачалоВыбораИзСписка()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
		// Рассчитать реквизиты табличной части.
	РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;

	// Рассчитать новое количество
	РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;

		мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения - СуммаСтроки;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыКоличествоМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля процента скидки-наценки
// в строке табличной части "Товары".
//
Процедура ТоварыПроцентСкидкиНаценкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыПроцентРозничнойНаценкиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Суммы.
	ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект, глТекущийПользователь);

	// Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "ПриНачалеРедактирования"  строки табличной 
// части "Товары" 
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	УстановитьСвойстваПоляВводаЦены();

	СуммаСтроки = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;

	Если (НоваяСтрока) И СуммаСтроки > 0 Тогда

		//Расчет скидок
		Если РассчитыватьАвтоматическиеСкидки() Тогда
			мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтроки;
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
			СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
			СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
			СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
			СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
			СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
			РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ТоварыПриНачалеРедактирования()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "ВозвратнаяТара". Формирует данные в колонке "ЕдиницаХранения".
//
Процедура ВозвратнаяТараПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.ВозвратнаяТара.Колонки.ЕдиницаХранения.Видимость Тогда
		ОформлениеСтроки.Ячейки.ЕдиницаХранения.УстановитьТекст(ДанныеСтроки.Номенклатура.ЕдиницаХраненияОстатков);
	КонецЕсли;

	ПоказатьКодАртикул(мКолонкиВозвратнаяТара, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении возвратной тары.
	ПриИзмененииВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

	// Заполнить реквизиты табличной части.
	ЗаполнитьЦенуВозвратнойТарыТабЧастиОтпуск(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект); 

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении суммы.
	ПриИзмененииСуммыВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараСуммаПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ УСЛУГИ

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Услуги".
//
Процедура УслугиНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Заполняем реквизиты табличной части.
	ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // УслугиНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Услуги".
//
Процедура УслугиКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // УслугиКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Услуги".
//
Процедура УслугиЦенаПриИзменении(Элемент)

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // УслугиЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Услуги".
//
Процедура УслугиСуммаПриИзменении(Элемент)

	ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект, глТекущийПользователь);
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры// УслугиСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Услуги".
//
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // УслугиСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы НДС
// в строке табличной части "Услуги".
//
Процедура УслугиСуммаНДСПриИзменении(Элемент)

КонецПроцедуры // УслугиСуммаНДСПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ
// УПРАВЛЕНИЕ ОТНОШЕНИЯМИ С КЛИЕНТАМИ

// Процедура - обработчик события "НачалоВыбора" элемента формы ВремяНапоминания 
//
Процедура ВремяНапоминанияНачалоВыбора(Элемент, СтандартнаяОбработка)

	мЧас = Час(Элемент.Значение);
	мМинута = Минута(Элемент.Значение);
	
КонецПроцедуры // ВремяНапоминанияНачалоВыбора()

// Процедура - обработчик события "ОбработкаВыбора" элемента формы ВремяНапоминания 
//
Процедура ВремяНапоминанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Элемент.Значение = НачалоДня(ВыбранноеЗначение) + мЧас*60*60 + мМинута*60;
	мЧас = 0;
	мМинута = 0;
	
КонецПроцедуры // ВремяНапоминанияОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" элемента формы (Флажка) НапомнитьОСобытии 
//
Процедура НапомнитьОСобытииПриИзменении(Элемент)

	Если НапомнитьОСобытии Тогда
		Если ВремяНапоминания = Дата("00010101000000") Тогда
			ВремяНапоминания = Дата(ТекущаяДата() + ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ИнтервалНапоминанияДоНачалаСобытия")*60);
		КонецЕсли; 
	Иначе
		ВремяНапоминания = Дата("00010101000000");
	КонецЕсли; 
	
	ДоступностьНапоминаний();
	
КонецПроцедуры // НапомнитьОСобытииПриИзменении()

// Процедура - обработчик события "Нажатие" элемента формы НадписьСобытия 
//
Процедура НадписьСобытияНажатие(Элемент)

	Если НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ФормаСобытий = Документы.Событие.ПолучитьФормуСписка(, , Ссылка);
	ФормаСобытий.ДокументСписок.Отбор.Основание.Значение = Ссылка;
	ФормаСобытий.ДокументСписок.Отбор.Основание.Использование = Истина;
	ФормаСобытий.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Основание.Доступность = Ложь;
	ФормаСобытий.Открыть();
	
КонецПроцедуры // КнопкаСобытийНажатие()

// Процедура - обработчик события "НачалоВыбораИзСписка" элемента формы ВремяНапоминания 
//
Процедура ВремяНапоминанияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ВыбратьВремяИзСписка(Элемент, ЭтаФорма, Ответственный, СтандартнаяОбработка);
	
КонецПроцедуры // ВремяНапоминанияНачалоВыбораИзСписка()

// Процедура - обработчик события "НачалоВыбора" поля ввода "КурсВзаиморасчетов".
//
Процедура КурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Выбрать дату курса и заполнить курс взаиморасчетов.
	ВыбратьКурсВзаиморасчетов(ЭтотОбъект);

КонецПроцедуры // КурсВзаиморасчетовНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" элемента формы КонтактноеЛицо 
//
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	Если ТипЗнч(КонтактноеЛицо) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		Если НЕ ЗначениеНеЗаполнено(КонтактноеЛицо) И (ЗначениеНеЗаполнено(Контрагент) ИЛИ КонтактноеЛицо.ОбъектВладелец <> Контрагент) Тогда
			Контрагент = КонтактноеЛицо.ОбъектВладелец;
			ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);
			ПриИзмененииДоговора();
		КонецЕсли; 
	ИначеЕсли ТипЗнч(КонтактноеЛицо) = Тип("Строка") Тогда
		ДанныеНезарегистрированногоКонтрагента.ФИОКонтактногоЛица = Элемент.Значение;
	КонецЕсли; 
	
	мПоследнееЗначениеЭлементаТайпингаКонтактногоЛица = Элемент.Значение;
	
КонецПроцедуры // КонтактноеЛицоПриИзменении()

// Процедура - обработчик события "НачалоВыбора" элемента формы КонтактноеЛицо 
//
Процедура КонтактноеЛицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НачалоВыбораКонтактногоЛицаКонтрагента(Элемент, СтандартнаяОбработка, Контрагент);
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" элемента формы КонтактноеЛицо 
//
Процедура КонтактноеЛицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпинга(), Тип("СправочникСсылка.КонтактныеЛица"));
	
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" элемента формы КонтактноеЛицо 
//
Процедура КонтактноеЛицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпинга(), ЭтаФорма, Тип("СправочникСсылка.КонтактныеЛица"), мОбработкаТайпингаКонтактногоЛица, мТекстТайпингаКонтактногоЛица, мПоследнееЗначениеЭлементаТайпингаКонтактногоЛица, ?(ТипЗнч(Контрагент) <> Тип("Строка"), Ложь, Истина));
	
КонецПроцедуры

Процедура КонтрагентНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
		СтандартнаяОбработка = Ложь;
		Справочники.Контрагенты.ПолучитьФормуВыбора(, Элемент).Открыть();
	КонецЕсли; 
	
КонецПроцедуры

Процедура КонтрагентОткрытие(Элемент, СтандартнаяОбработка)
	
	Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбработкаРедактирования = Обработки.РедактированиеДанныхНезарегистрированныхКонтрагентов.Создать();
		ОбработкаРедактирования.Запись = ДанныеНезарегистрированногоКонтрагента;
		Если ОбработкаРедактирования.ПолучитьФорму(, ЭтаФорма).ОткрытьМодально() <> Ложь Тогда
			Модифицированность = Истина;
			Контрагент     = ДанныеНезарегистрированногоКонтрагента.НаименованиеКонтрагента;
			КонтактноеЛицо = ДанныеНезарегистрированногоКонтрагента.ФИОКонтактногоЛица;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КонтрагентАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура, Тип("СправочникСсылка.Контрагенты"));
	
КонецПроцедуры

Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РезультатЗапроса = ПолучитьРезультатЗапросаАвтоподбора(Текст, Новый Структура, Тип("СправочникСсылка.Контрагенты"), 1);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура, ЭтаФорма, Тип("СправочникСсылка.Контрагенты"), мОбработкаТайпингаКонтрагента, мТекстТайпингаКонтрагента, мПоследнееЗначениеЭлементаТайпингаКонтрагента, Ложь);
		Возврат;
	КонецЕсли; 
	
	РегистрироватьНовогоКонтрагента(Элемент, Текст, Значение, СтандартнаяОбработка, мОбработкаТайпингаКонтрагента, мТекстТайпингаКонтрагента, мПоследнееЗначениеЭлементаТайпингаКонтрагента, ЭтаФорма, Контрагент, КонтактноеЛицо, Модифицированность, ДанныеНезарегистрированногоКонтрагента);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ТипЗнч(Контрагент) = Тип("Строка") Тогда
		ЗаписатьДанныеНезарегистрированногоКонтрагента(Ссылка, ДанныеНезарегистрированногоКонтрагента, Отказ);
	КонецЕсли; 
	
КонецПроцедуры

Процедура КонтактноеЛицоОткрытие(Элемент, СтандартнаяОбработка)
	
	Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
		СтандартнаяОбработка = Ложь;
		ОбработкаРедактирования = Обработки.РедактированиеДанныхНезарегистрированныхКонтрагентов.Создать();
		ОбработкаРедактирования.Запись = ДанныеНезарегистрированногоКонтрагента;
		Если ОбработкаРедактирования.ПолучитьФорму(, ЭтаФорма).ОткрытьМодально() <> Ложь Тогда
			Модифицированность = Истина;
			Контрагент     = ДанныеНезарегистрированногоКонтрагента.НаименованиеКонтрагента;
			КонтактноеЛицо = ДанныеНезарегистрированногоКонтрагента.ФИОКонтактногоЛица;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода процента розничной скидки
// в строке табличной части "Услуги".
//
Процедура УслугиПроцентСкидкиНаценкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЯ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	Иначе
		ПроверкаПеретаскиванияВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Товары");
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Товары", ЭтотОбъект, ЭтаФорма);

		//Расчет скидок
		Если РассчитыватьАвтоматическиеСкидки() Тогда
			мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
			СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
			СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
			СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
			СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
			СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
			РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "ВозвратнаяТара");
	Иначе
		ПроверкаПеретаскиванияВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "ВозвратнаяТара");
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "Перетаскивание" табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "ВозвратнаяТара", ЭтотОбъект, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Услуги".
//
Процедура УслугиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Услуги");
	Иначе
		ПроверкаПеретаскиванияВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Услуги");
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "Перетаскивание" табличной части "Услуги".
//
Процедура УслугиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Услуги", ЭтотОбъект, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьКредит()

	Процент = Константы.ПроцентПредоплаты.Получить();
	
	СуммаТовары = Товары.Итог("Сумма");
	
	Если Процент > 0 Тогда
	
		Аванс = СуммаТовары * Процент / 100;
		
		
	Иначе
		
		Аванс = СуммаТовары;
		
		
	КонецЕсли; 
	
	ЭлементыФормы.НадписьДолг.Заголовок = "Долг покупателя: " + ФорматСумм(СуммаТовары - Аванс);

КонецПроцедуры


Процедура КредитПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Если Кредит Тогда
	
		ПересчитатьКредит();	
		
	Иначе
		
		ЭлементыФормы.НадписьДолг.Заголовок = "";
		
	КонецЕсли; 
КонецПроцедуры

Процедура ПодразделениеКомпанииПриИзменении(Элемент)
	
	УстановитьНомерДокумента(ЭтотОбъект);	
	
КонецПроцедуры

Процедура КоманднаяПанельТоварыПодборИзСкладовООО(Кнопка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧасть(ТаблицаНоменклатурыПодбор)
	
	Для Каждого Стр из ТаблицаНоменклатурыПодбор Цикл
		
		СтрДоб 					= Товары.Добавить();
		СтрДоб.Номенклатура 	= Стр.Номенклатура;
		СтрДоб.Количество 		= Стр.Количество;
		СтрДоб.ЕдиницаИзмерения = Стр.Номенклатура.ЕдиницаХраненияОстатков;
		СтрДоб.Коэффициент	 	= 1;
		Цена 					= ПолучитьЦенуНоменклатуры(Стр.Номенклатура,,ТипЦен);
		СтрДоб.Цена 			= Цена;
		ЗаполнитьСтавкуНДСТабЧасти(СтрДоб, ЭтотОбъект); 
		
		Если (УчитыватьНДС) Тогда 
				// Рассчитаем сумму с учетом НДС
			СтавкаНДСЧисло = ПолучитьСтавкуНДС(СтрДоб.СтавкаНДС);
			Если ТипЦен.ЦенаВключаетНДС и (СтавкаНДСЧисло>0) Тогда 
				// Цена включает НДС
				СтрДоб.Сумма 	= СтрДоб.Цена * СтрДоб.Количество;
				СтрДоб.Цена 	= СтрДоб.Сумма/(1+СтавкаНДСЧисло/100)/СтрДоб.Количество;
				СтрДоб.СуммаНДС = СтрДоб.Сумма - СтрДоб.Цена*СтрДоб.Количество;
			Иначе 
				// Цена не включает НДС	
					СтрДоб.СуммаНДС = СтрДоб.Цена * СтрДоб.Количество * (ПолучитьСтавкуНДС(СтрДоб.СтавкаНДС)/100);
					СтрДоб.Сумма = СтрДоб.Цена * СтрДоб.Количество + СтрДоб.СуммаНДС;
			КонецЕсли;
			Иначе 
				СтрДоб.Сумма = СтрДоб.Цена * СтрДоб.Количество;
			КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ТоварыНоменклатураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	
	ТоварыНоменклатураПриИзменении(Элемент);
КонецПроцедуры

//Функция ПолучитьОстаткиТоваровТСЦОпт(Номенклатура,Склад)
//	
//	ЗапросПоСкладам = новый Запрос;
//	Запрос = новый Запрос;
//		ЗапросПоСкладам.УстановитьПараметр("Склад",Склад);
//		ЗапросПоСкладам.Текст = "Выбрать СкладООО как Склад из РегистрСведений.СоответствиеСкладовОООСкладамИП где СкладИПОпт=&Склад Объединить Выбрать СкладИПОпт как Склад из РегистрСведений.СоответствиеСкладовОООСкладамИП где СкладИПОпт=&Склад объединить Выбрать СкладООО как Склад из РегистрСведений.СоответствиеСкладовОООСкладамИП где СкладООО=&Склад";
//		ВыбСкл = ЗапросПоСкладам.Выполнить().Выгрузить();
//		Если (ВыбСкл.Количество()>0) Тогда
//			СкладСпис = ВыбСкл.ВыгрузитьКолонку("Склад");	
//		Иначе 
//			СкладСпис = Склад;
//		КонецЕсли;
//		
//		Запрос = новый Запрос("
//		|ВЫБРАТЬ
//		|	ТоварыНаСкладах.Номенклатура КАК Номенклатура,
//		|	СУММА(ТоварыНаСкладах.КоличествоОстаток) КАК КоличествоСвободныйОстаток
//		|ИЗ
//		|	РегистрНакопления.ТоварыНаСкладах.Остатки(, Номенклатура=&Номенклатура и Склад в (&СписокСкладов)) КАК ТоварыНаСкладах
//		|	СГРУППИРОВАТЬ ПО
//		|		ТоварыНаСкладах.Номенклатура");
//		Запрос.УстановитьПараметр("Дата", Дата);
//		Запрос.УстановитьПараметр("СписокСкладов", СкладСпис);
//		Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
//		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
//		
//	Возврат (Запрос.Выполнить().Выгрузить());
//	
//КонецФункции

//Функция ЭтоСкладООО(СкладПров)
//	
//	Запрос = новый Запрос("Выбрать * из РегистрСведений.СоответствиеСкладовОООСкладамИП где СкладИПОпт = &Склад");
//	//Запрос = новый Запрос("Выбрать * из РегистрСведений.СоответствиеСкладовОООСкладамИП где СкладООО = &Склад");
//	Запрос.УстановитьПараметр("Склад",СкладПров);
//	Выб = Запрос.Выполнить().Выбрать();
//	Возврат Не(Выб.Следующий());
//	
//КонецФункции

Процедура СкладПриИзменении(Элемент)
	// Вставить содержимое обработчика.
		// Поставить подразделение и банковский счет	
КонецПроцедуры

Процедура ДействияФормыПослатьСчет(Кнопка)
	
			
	//========================Проверим уч.запись======================
	  УЗ =  ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяУчетнаяЗапись");
		Если НЕ ЗначениеЗаполнено(УЗ) Тогда
			//Если РольДоступна("ПолныеПрава") Тогда
			УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("no-reply@yst76.ru");
			Если ЗначениеЗаполнено(УЗ) Тогда
				//Ответ = КодВозвратаДиалога.Нет;
				//Если Вопрос("У Вас не установлена Учетная запись эл.почты!
				//|Продолжить отправку с эл.адреса организации (no-reply@yst76.ru)?",РежимДиалогаВопрос.ДаНет, 10, Ответ, "Эл.Адрес отправки") = КодВозвратаДиалога.Нет Тогда
				//Возврат;
				//КонецЕсли;
			Иначе // в базе нет уч.записи: no-reply@yst76.ru
				сигнал();
				Предупреждение("У Вас Не установлена -Основная учетная запись эл.почты!
							   |Для отправки - обязательно требуется обратный эл.адрес!",30);
				Возврат;
			КонецЕсли;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Номер) или ЭтоНовый() Тогда
			сигнал();
			Предупреждение("Перед отправкой письма - сохраните текущий документ!",30);
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЭтотОбъект.Контрагент) Тогда
			сигнал();
			Предупреждение("Перед отправкой письма - Заполните поле 'Контрагент' !",30);
			Возврат;
		КонецЕсли;	
//======================Получим адрес эл.почты=================
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Объект
		|	И КонтактнаяИнформация.Тип = &Тип
		|	И КонтактнаяИнформация.Вид = &Вид";
		
		Запрос.УстановитьПараметр("Объект", ЭтотОбъект.Контрагент);
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыДляОбменаДокументами);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		АдресЭлПочтыКонтрагента = "";
		Если Выборка.Следующий() Тогда
			АдресЭлПочтыКонтрагента = СокрЛП(выборка.Представление);
		Иначе
			сигнал();
			Предупреждение("У контрагента: "+строка(ЭтотОбъект.Контрагент)+" - не задан эл.адрес!
						   |Отправка письма - не возможна!",30);
			Возврат;
		КонецЕсли;
	
	//============================================================		
		Ответ = КодВозвратаДиалога.Нет;
		Если Вопрос("Вы действительно хотите отправить ""Счет на оплату""
					|Для "+строка(ЭтотОбъект.Контрагент)+"
					|на адрес эл.почты: "+АдресЭлПочтыКонтрагента+"?", РежимДиалогаВопрос.ДаНет, 30) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
		
	  Состояние("Идет отправка письма...");  i=0;
	 // ВременнаяПапка = "\\alpha\Userdir\ALL\_Оперативный День\Отправленные документы [@]\"; //КаталогВременныхФайлов();   //"C:\"; // "D:\Рассылка\";
	    ВременнаяПапка = КаталогВременныхФайлов(); //+++ 07.08.2013   "\\terminal\RESTORE Userdir\Отправленные документы\"; 
	  
	  СписокФайловВложений=Новый СписокЗначений;
	  ДокументОбъект=ЭтотОбъект;
			  //Печатается 1-я форма
			    		ИмяФайлаСообщения="Счет_Заказ_№"+ЗаказПокупателя.Номер+".xls";
				  	//+++ 18.06.2015
					//ТабличныйДокументОбъект=ДокументОбъект.ПечатьСчетаЗаказа("Счет"); //Счет на оплату
					  ТабличныйДокументОбъект=ПечатьСчетаЗаказаКорректировки("Счет");
					
				  		ТабличныйДокументОбъект.Записать(временнаяПапка+ИмяФайлаСообщения,ТипФайлаТабличногоДокумента.XLS);
				  		СписокФайловВложений.Добавить(ВременнаяПапка+ИмяФайлаСообщения);
						
	Послать(АдресЭлПочтыКонтрагента,СписокФайловВложений, УЗ);	  
	
Состояние(" ");
сигнал();

Сообщить("Для "+строка(ЭтотОбъект.Контрагент)+" на эл.адрес: "+АдресЭлПочтыКонтрагента+" отправлен файл: "+ИмяФайлаСообщения+"
		  |(см.копию отправленного файла: "+временнаяПапка+ИмяФайлаСообщения+" )", СтатусСообщения.Информация);

Предупреждение("Отправка файла "+ИмяФайлаСообщения+" 
			   |на эл.адрес: "+АдресЭлПочтыКонтрагента+" завершена!", 10);
			   	  
КонецПроцедуры

Процедура Послать(АдресПолучателя,СписокФайловВложений, УЗ)
	   ТекстСообщения0 ="   Добрый день,
						 |
						 |Высылаем Вам копию Счета № "+Строка(Номер)+" от "+Формат(Дата,"ДЛФ=DD")+"
						 |
						 |      Отвечать на это письмо - НЕ НУЖНО!
						 |
						 |По всем вопросам - обращайтесь к вашему менеджеру.
						 |
						 |
						 |Ваш менеджер: "+?(ЗначениеЗаполнено(ДоговорКонтрагента.ОтветственноеЛицо),ДоговорКонтрагента.ОтветственноеЛицо.Наименование, Ответственный.Наименование)+"
						// |
						 //|ЗАО Торговая Компания ""Яршинторг"", 
						 //|юр./факт.адрес: 150044, Ярославская обл, Ярославль г, Базовая ул, дом № 3, стр.2
						 //|тел./факс: (4852) 200-200, 67-11-67
						 //|Web-сайт : http://www.yst76.ru
						 |";

	    	
	    ИПП=Новый ИнтернетПочтовыйПрофиль;
		ИПП.АдресСервераSMTP=УЗ.SMTPСервер;
		ИПП.ПортSMTP=УЗ.ПортSMTP;
		Если УЗ.ТребуетсяSMTPАутентификация Тогда
			ИПП.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
			ИПП.ПарольSMTP         = УЗ.ПарольSMTP;
			ИПП.ПользовательSMTP   = УЗ.ЛогинSMTP;
		Иначе
			ИПП.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
			ИПП.ПарольSMTP         = "";
			ИПП.ПользовательSMTP   = "";
		КонецЕсли;
		Письмо=Новый ИнтернетПочтовоеСообщение;
		
		//+++( 04.05.2016	"старый" вызов отправителя
	    //Письмо.Отправитель = УЗ.АдресЭлектроннойПочты;
		Письмо.Отправитель.Адрес 		   = УЗ.АдресЭлектроннойПочты;
		Письмо.Отправитель.ОтображаемоеИмя = УЗ.АдресЭлектроннойПочты;
        //+++)
		
	   //+++( 19.12.2011 - разбор адреса на несколько адресов
		 //Письмо.Получатели.Добавить(АдресПолучателя);
		i = Найти(АдресПолучателя,";"); j=Найти(АдресПолучателя, ",");
		k=?(i>0 и i>j,  i, ?(j>0 и j>i, j, 0) );
			
		Если i=0 и j=0 Тогда
			Письмо.Получатели.Добавить(АдресПолучателя);
		Иначе
			АдрОстаток = СокрЛП(АдресПолучателя);
			Пока (k>0) Цикл
				Адр1 = Лев(АдрОстаток, k-1);
				Если СокрЛП(Адр1)<>"" и Найти(Адр1,"@")>0 и Найти(Адр1,".")>0 Тогда
					Письмо.Получатели.Добавить(Адр1);
				Иначе
					Сообщить("Адрес '"+Адр1+"' не содержит @ или .");
				КонецЕсли;
				АдрОстаток = Прав(АдрОстаток, стрДлина(АдрОстаток)-k);
				i = Найти(АдрОстаток,";"); j=Найти(АдрОстаток, ",");
				k=?(i>0 и i>j,  i, ?(j>0 и j>i, j, 0) );
			КонецЦикла;
			Если СокрЛП(АдрОстаток)<>"" и Найти(АдрОстаток,"@")>0 и Найти(АдрОстаток,".")>0 Тогда
				Письмо.Получатели.Добавить(АдрОстаток);
			КонецЕсли;

		КонецЕсли; //+++ )
		
		Если ЗначениеЗаполнено(СписокФайловВложений) И СписокФайловВложений.Количество()>0 Тогда
			Для Каждого ТекАдр Из СписокФайловВложений Цикл
				Письмо.Вложения.Добавить(ТекАдр.Значение);
			КонецЦикла;
		КонецЕсли;
        Письмо.Тема="Счет на оплату";
	    
		
		Письмо.ИмяОтправителя ="";//"ЗАО ТК ""Яршинторг"", г.Ярославль";
	    Письмо.Организация ="";   //"ЗАО ТК ""Яршинторг"", г.Ярославль";
	    Письмо.Тексты.Добавить(ТекстСообщения0,ТипТекстаПочтовогоСообщения.простойТекст);
	
		Почта=Новый ИнтернетПочта;
	    Почта.Подключиться(ИПП);
		
		Попытка
			Почта.Послать(Письмо);
	    	Почта.Отключиться();
		Исключение
			сообщить("Не удалось отправить письмо! "+ОписаниеОшибки(), СтатусСообщения.Внимание);
		КонецПопытки;
		
КонецПроцедуры


	// Функция формирует табличный документ с печатной формой заказа или счета,
	// разработанного методистами (с учетом внесенных корректировок)
	//
	// Возвращаемое значение:
	//  Табличный документ - сформированная печатная форма
	//
   


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мОбновлятьВладельца = Ложь;

мЧас    = 0;
мМинута = 0;

мОбработкаТайпингаКонтактногоЛица                 = Ложь;
мТекстТайпингаКонтактногоЛица                     = "";
мПоследнееЗначениеЭлементаТайпингаКонтактногоЛица = Неопределено;

мОбработкаТайпингаКонтрагента                 = Ложь;
мТекстТайпингаКонтрагента                     = "";
мПоследнееЗначениеЭлементаТайпингаКонтрагента = Неопределено;

мКолонкиТовары         = ЭлементыФормы.Товары.Колонки;
мКолонкиВозвратнаяТара = ЭлементыФормы.ВозвратнаяТара.Колонки;
