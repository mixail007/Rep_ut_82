Перем мОбновлятьВладельца;
перем Воробьев, Землянский, Малышев,Соединение, ТаблОрг; // для выгрузки Тр.Затрат в Бух
Перем ТК_DPD,ТК_Подорожник, НаправлениеКолесаТут, РозничныйПокупательДПД,РозничныйПокупательПодорожник,  СоответствиеПоставщиковКодДпд; //для наклейки документа 

Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - Для проверки перехода документа в другой период
Перем мВалютаРегламентированногоУчета;

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется Для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов; 

// Хранит текущий договор контрагента
// используется Для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента; 

Перем мЧас;                      
Перем мМинута;

//Орлов ++
Перем мПечатнаяФормаПоУмолчанию;
//Орлов --

перем МоментВремени;
перем КолОсталосьЗаказать;

перем мКолонкиТовары;
перем Тариф0;

перем СчитаемНедогрузы;

// Процедура вызывает сервисный механизм Для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)
КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт
КонецПроцедуры // ОбработкаПодбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость Для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	Если ВидОперации=Перечисления.ВидыДвиженийПриходРасход.Расход Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.ЗаказыПокупателей.Видимость = Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.ЗаказыПоставщикам.Видимость = Ложь;
		//Орлов ++
		ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Видимость = Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Резерв.Видимость = Истина;
		//Орлов --
		ЭлементыФормы.ОсновнаяПанель.Страницы.ЗаказыПокупателей.Заголовок = "Заказы покупателей" 
			+?(ЗаказыПокупателей.Количество()=0,""," ("+строка(ЗаказыПокупателей.Количество())+")");
		ЭлементыФормы.ОсновнаяПанель.Страницы.Резерв.Заголовок = "Порядок отгрузки" 
			+?(ГруппыСкладов.Количество()=0,""," ("+строка(ГруппыСкладов.Количество())+")");
		ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Заголовок = "Товары" 
			+?(Товары.Количество()=0,""," ("+строка(Товары.Количество())+")");
	    ЭлементыФормы.Товары.Колонки.Количество.ТекстШапки = "Отгружено";
		
		доступноИзменениеДокументов = ЭтотОбъект.Проведен;
		
		// прямое изменение строк дерева - недоступно!
		доступенПросмотрИИзменениеДерева = РольДоступна("ПолныеПрава");
		ЭлементыФормы.ТабЗначРезерв.Доступность = доступенПросмотрИИзменениеДерева;
		
		
	ИначеЕсли  ВидОперации=Перечисления.ВидыДвиженийПриходРасход.Приход Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.ЗаказыПокупателей.Видимость = Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.ЗаказыПоставщикам.Видимость = Истина;
		//Орлов ++
		ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Видимость = Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Резерв.Видимость = Ложь;
		//Орлов --
		
		ЭлементыФормы.ОсновнаяПанель.Страницы.ЗаказыПоставщикам.Заголовок = "Заказы поставщикам" 
			+?(ЗаказыПоставщикам.Количество()=0,""," ("+строка(ЗаказыПоставщикам.Количество())+")");
	    ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Заголовок = "Товары" 
			+?(Товары.Количество()=0,""," ("+строка(Товары.Количество())+")");
	    ЭлементыФормы.Товары.Колонки.Количество.ТекстШапки = "Поступило";
	КонецЕсли;	

	ЭлементыФормы.ИтогКоличествоПозиций.ТолькоПросмотр = НЕ ВводитьИтогиВручную;
	ЭлементыФормы.ИтогКоличествоШтук.ТолькоПросмотр    = НЕ ВводитьИтогиВручную;
	ЭлементыФормы.ИтогКоличествоПозиций.Доступность = ВводитьИтогиВручную;
	ЭлементыФормы.ИтогКоличествоШтук.Доступность    = ВводитьИтогиВручную;
		
КонецПроцедуры // УстановитьВидимость()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()
КонецПроцедуры // ОбновитьПодвал()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ


// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	номСтруктуры = истина;
	Тариф0 = Тариф; //01.10.2015
	
	ЭлементыФормы.Важность.Доступность = РольДоступна("МенеджерПоПродажамСОграничениемПравДоступа"); //10.02.2016 ТОЛЬКО ЛОГИСТАМ
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		Дата = ТекущаяДата();
				
			Важность=Перечисления.Важность.Средняя;
			Ответственный = глТекущийПользователь;
			ВидОперации = перечисления.ВидыДвиженийПриходРасход.Расход;
			
		Если ЗаказыПокупателей.Количество()=0 тогда
			
			//+++ 19.07.2016 - доступ ЗАКРЫТ для ВСЕХ!
			Если глТекущийПользователь.ОсновноеПодразделение.ОбособленноеПодразделение тогда
				Подразделение = глТекущийПользователь.ОсновноеПодразделение;
			Иначе // для всех пользователей Ярославля с любым подраздлением - будет Ярославль!
				Подразделение = Справочники.Подразделения.НайтиПоКоду("00005");
			КонецЕсли;	
			
		////+++ 12.09.2017 - уже определено и менять нельзя !!!
		Иначе 
			Подразделение = ЗаказыПокупателей[0].ЗаказПокупателя.Подразделение;
		КонецЕсли;	
		
		Организация = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяОрганизация");
		УстановитьНомерДокумента(ЭтотОбъект); // устанавливается 1 раз 

		
		//+++ запрет определения складов!
		Если НЕ ( РольДоступна("ПолныеПрава")
				 или РольДоступна("Кладовщик")  ) Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.Резерв.Доступность = ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Доступность = ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.СчетаОтПеревозчика.Доступность  = ложь;
		//-------не видны---------------
		ЭлементыФормы.ОсновнаяПанель.Страницы.ТранспортныеЗатраты.Видимость = ложь;  // по товарам
		ЭлементыФормы.ОсновнаяПанель.Страницы.Отгружено.Видимость = ложь;            // по очередям
	//	ЭлементыФормы.Подразделение.Доступность = ложь;
		
		ЭлементыФормы.НомерПутевогоЛиста.Доступность = ложь;//+++ 22.12.2015
		
		КонецЕсли;
	Иначе
		
		//------------------ограничение проведенных или выполненных----------------------------------------
		Если (ссылка.Проведен или ссылка.Выполнено) Тогда
			Если НЕ ( РольДоступна("ПолныеПрава")
			         или РольДоступна("Кладовщик")  ) Тогда  //для филиалов
			ЭтаФорма.ТолькоПросмотр = Истина;
			Предупреждение("Задание уже выполняется или выполнено!
					       |     Доступен только просмотр!");
			КонецЕсли;	
			   
		Иначе//+++ 14.02.2014 - пересчет Если еще не проведен... 
			ПолучитьАссортимент();
			ПересчетКоличестваИСуммПоЗаказам();
		КонецЕсли;	
		ЗаполнитьИнформациюПоПроезду();//из регистра!
		ЗаполнитьДеревоПоПроезду();//+++ 06.08.2015
	КонецЕсли;
	
	
	УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	ВидОперации.Метаданные().ЗначенияПеречисления,
	Новый Действие("ДействияФормыДействиеУстановитьОперацию"));
	
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);										
	УстановитьВидимость();	
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	//Орлов ++
	// Заполнить подменю выбора доп.печатных форм.
	СписокМакетов = ЭтотОбъект.ПолучитьСписокПечатныхФорм();
	УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати,
	                                       СписокМакетов,
	                                       Новый Действие("ДействияФормыДействиеВыбратьПечатнуюФормы"));
										   
	// Установить печатную форму по умолчанию.
	УстановитьКнопкуПечати(ЭтотОбъект.Метаданные().Имя, ЭтаФорма, СписокМакетов, мПечатнаяФормаПоУмолчанию);										   
	//Орлов --
	
	ЭлементыФормы.КудаНестиКрышки.СписокВыбора.Добавить("на склад");
	ЭлементыФормы.КудаНестиКрышки.СписокВыбора.Добавить("к менеджеру");
	
	
	
	//-----------------БЛОКИРОВКИ------------------------------------------	
	Если ВсеДокументыСданыВБухгалтерию Тогда // блокировка изменений
		//ЭлементыФормы.ОсновнаяПанель.Страницы.ИнформацияПоПроезду.Доступность = ложь;
		ЭлементыФормы.ИнформацияПоПроезду.ТолькоПросмотр = истина; // 18.02.2016
		
	//16-19.03.2018 - доступ для бухгалтерии и кладовщиков...для перезаполнения маршрута
	ИначеЕсли НЕ ( РольДоступна("ПолныеПрава") или РольДоступна("Кладовщик") )  Тогда 
		ЭлементыФормы.ИнформацияПоПроезду.Доступность = ложь;
		ЭлементыФормы.ПолучитьПоДокументам.Доступность = ложь;
		ЭлементыФормы.кнЗаписатьИнфуПоПроезду.Доступность = ложь;
	КонецЕсли;
	
	//ТОЛЬКО Для отдела Логистики
	Если РольДоступна("МенеджерПоПродажамСОграничениемПравДоступа") Тогда // Воробьев, Николаева, Селиванов
		ЭлементыФормы.Тариф.Доступность      = Истина;
		ЭлементыФормы.Километров.Доступность = Истина;
		
		ЭлементыФормы.ИнформацияПоПроезду.Доступность = Истина; // вся таблица доступна Для редактирования
		ЭлементыФормы.кнЗаписатьИнфуПоПроезду.Доступность = Истина;//+++ 26.06.2015
		
		ЭлементыФормы.СуммаОбратки.Доступность    = Истина;
		ЭлементыФормы.СуммаОбраткиЯШТ.Доступность = Истина;
		ЭлементыФормы.Панель1.Страницы.Обратки.Доступность = Истина;  //17.12.2015
		
		ЭлементыФормы.Километров.Доступность = Истина;
		ЭлементыФормы.ДокументыСданыЛогистам.Доступность = Истина;
		//+++27.05.2015 надо видеть!
		ЭлементыФормы.ОсновнаяПанель.Страницы.СчетаОтПеревозчика.Видимость    = Истина; //да
		ЭлементыФормы.КоманднаяПанель2.Доступность = ЛОЖЬ;   //доступа нет к бух.кнопкам!
	КонецЕсли;

	
	Если РольДоступна("ПолныеПрава") или РольДоступна("яштФинДиректор") Тогда // Бухгалтерия, кладовщики, Фин.Отдел
		ЭлементыФормы.Тариф.Доступность      = Истина;
		ЭлементыФормы.Километров.Доступность = Истина;
		
		ЭлементыФормы.ИнформацияПоПроезду.Доступность     = Истина; // вся таблица доступна Для редактирования
		ЭлементыФормы.кнЗаписатьИнфуПоПроезду.Доступность = Истина;//+++ 26.06.2015
		
		ЭлементыФормы.СуммаОбратки.Доступность    = Истина;
		ЭлементыФормы.СуммаОбраткиЯШТ.Доступность = Истина;
		
		ЭлементыФормы.Флажок2.Доступность = Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.СчетаОтПеревозчика.Видимость  = Истина; //ТЕСТ!
		ЭлементыФормы.КоманднаяПанель2.Доступность = Истина;   //доступа нет к бух.кнопкам!

	   КонецЕсли;
	
	Если РольДоступна("ПравоЗавершенияРаботыПользователей") Тогда // IT-отдел  - всё разрешено
		ЭлементыФормы.Тариф.Доступность = Истина;
		ЭлементыФормы.Километров.Доступность = Истина;
		ЭлементыФормы.ДокументыСданыЛогистам.Доступность = Истина;
		ЭлементыФормы.Панель1.Страницы.Обратки.Доступность = Истина;  //17.12.2015
		
		ЭлементыФормы.СуммаОбратки.Доступность    = Истина;
  		ЭлементыФормы.СуммаОбраткиЯШТ.Доступность = Истина;

		ЭлементыФормы.ОсновнаяПанель.Страницы.ИнформацияПоПроезду.Доступность = Истина;
		
		ЭлементыФормы.ПолучитьПоДокументам.Доступность    = Истина;
		ЭлементыФормы.ИнформацияПоПроезду.Доступность     = Истина;
		ЭлементыФормы.кнЗаписатьИнфуПоПроезду.Доступность = Истина;
		
		ЭлементыФормы.КоманднаяПанель2.Доступность = Истина; 
		ЭлементыФормы.Подразделение.Доступность = ложь;//+++ 19.07.2016 доступ к изменению подразделения/номера - ТОЛЬКО у IT-отдела!

		ЭлементыФормы.Флажок2.Доступность = Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.ТранспортныеЗатраты.Видимость = Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.СчетаОтПеревозчика.Видимость  = Истина; //ТЕСТ!
	КонецЕсли;
	
	Если НЕ ЭтоНовый() Тогда //+++ 18.05.2015 обновление тр.поступлений Для Заявки по транспорту
		КоманднаяПанель2Обновить(Неопределено);
	КонецЕсли;
	
	
	//+++ 30.11.2015 - для филиалов - НЕТ транспорта
	Если ЭтотОбъект.Подразделение.ОбособленноеПодразделение 
			и не РольДоступна("ПравоЗавершенияРаботыПользователей") // для IT-отдела - видно всё
	тогда
	//	ЭлементыФормы.ОсновнаяПанель.Страницы.Отгружено.Видимость = ложь;
	//	ЭлементыФормы.ОсновнаяПанель.Страницы.ИнформацияПоПроезду.Видимость = ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.ТранспортныеЗатраты.Видимость = ложь;
		
		ЭлементыФормы.ОсновнаяПанель.Страницы.СчетаОтПеревозчика.Видимость = ложь;
	КонецЕсли;	
	
	//Плотников, Заполним группы по умолчанию исключая Ошиповку, по просьбе Фролова
	
	Если СписокГрупп.Количество()= 0 и ЭтоНовый() Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Кроме",Справочники.ГруппыСкладов.ОсновнойСклад);
		Массив = Новый Массив;
		Массив.Добавить(Справочники.ГруппыСкладов.НайтиПоКоду("09"));
		//Массив.Добавить(Справочники.ГруппыСкладов.НайтиПоКоду("12"));
		Массив.Добавить(Справочники.ГруппыСкладов.НайтиПоКоду("13"));
		Запрос.УстановитьПараметр("ошиповка",Массив);
		запрос.Текст = "ВЫБРАТЬ
		               |	ВЫБОР
		               |		КОГДА ГруппыСкладов.Ссылка В(&ошиповка)
		               |			ТОГДА ИСТИНА
		               |		ИНАЧЕ ЛОЖЬ
		               |	КОНЕЦ КАК Флаг,
		               |	ГруппыСкладов.Ссылка КАК Группа
		               |ИЗ
		               |	Справочник.ГруппыСкладов КАК ГруппыСкладов
		               |ГДЕ
		               |	ГруппыСкладов.Транзит = ЛОЖЬ
		               |	И ГруппыСкладов.ПометкаУдаления = ЛОЖЬ
		               |	И ГруппыСкладов.Ссылка <> &Кроме";
		Рез = запрос.Выполнить().Выгрузить();
		
		СписокГрупп.Загрузить(Рез);	
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = ложь;//15.05.2017
	
КонецПроцедуры // ПриОткрытии()

 //Орлов ++

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
//
Процедура ДействияФормыДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = Кнопка.Текст;
		СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		СписокМакетов = ПолучитьСписокПечатныхФорм();
		СтрокаМакетаВСписке = СписокМакетов.НайтиПоЗначению(Кнопка.Имя);
		Если СтрокаМакетаВСписке <> Неопределено Тогда
			Печать(СтрокаМакетаВСписке.Значение);
			СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
			СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;			
			
		Иначе
			СсылкаВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Кнопка.Имя, "_", "-")));
			Печать(СсылкаВнешнейФормы);
			СтруктураМакета.Макет = СсылкаВнешнейФормы;
			СтруктураМакета.ПредставлениеМакета = Кнопка.Текст;
		КонецЕсли;		
		
		мПечатнаяФормаПоУмолчанию = СтруктураМакета.Макет;
		СохранитьТекущуюКнопкуПечати(ЭтотОбъект.Метаданные().Имя, СтруктураМакета);
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию Для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	НапечататьДокументПоУмолчанию(ЭтотОбъект, глТекущийПользователь, мПечатнаяФормаПоУмолчанию);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

//Орлов --

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ИнформацияПоПроезду Тогда
	 Если Выполнено и Тариф=2 или Тариф=0 Тогда //ЖИРНЫЙ
	 	 ЭлементыФормы.Тариф.Шрифт = новый Шрифт(ЭлементыФормы.Тариф.Шрифт,,,Истина);
	 ИначеЕсли Тариф>2 и НЕ ВсеДокументыСданыВБухгалтерию и не ДокументыСданыЛогистам Тогда //Красный жирный
	 	 ЭлементыФормы.Тариф.Шрифт = новый Шрифт(ЭлементыФормы.Тариф.Шрифт,,,Истина);
		 ЭлементыФормы.Тариф.ЦветТекстаПоля = webЦвета.Красный;
	 ИначеЕсли Тариф>2 и ДокументыСданыЛогистам и НЕ ВсеДокументыСданыВБухгалтерию Тогда //Синий жирный
	 	 ЭлементыФормы.Тариф.Шрифт = новый Шрифт(ЭлементыФормы.Тариф.Шрифт,,,Истина);
		 ЭлементыФормы.Тариф.ЦветТекстаПоля = webЦвета.Синий;
	 ИначеЕсли ДокументыСданыЛогистам и ВсеДокументыСданыВБухгалтерию и Тариф>2 Тогда // Зелёный жирный
 		 ЭлементыФормы.Тариф.Шрифт = новый Шрифт(ЭлементыФормы.Тариф.Шрифт,,,Истина);
		 ЭлементыФормы.Тариф.ЦветТекстаПоля = webЦвета.ТемноЗеленый;
	 КонецЕсли;
    КонецЕсли;
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	Если ТипЗнч(ЗначениеВыбора) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда 
		СтрокаЗаказыПокупателей=ЗаказыПокупателей.Добавить();
		СтрокаЗаказыПокупателей.ЗаказПокупателя=ЗначениеВыбора;
		СтрокаЗаказыПокупателей.КоличествоПозиций=ЗначениеВыбора.Товары.Количество();	
		СтрокаЗаказыПокупателей.КоличествоШтук=ЗначениеВыбора.Товары.Итог("Количество") ;

	ИначеЕсли  ТипЗнч(ЗначениеВыбора) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда 
		СтрокаЗаказПоставщику=ЗаказыПоставщикам.Добавить();
		СтрокаЗаказПоставщику.ЗаказПоставщику=ЗначениеВыбора;
		РассчитатьКоличествоПоЗаказуПоставщику(СтрокаЗаказПоставщику);
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()


// Обработчик внешнего события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)
КонецПроцедуры

//+++ УБРАНА СТАРАЯ ФУНКЦИЯ! 04.08.2017 --- не так надо! ---
Процедура ЗаполнитьНомерОчереди_СТАРАЯ()
	ЗаказыОчередь = ЗаказыПокупателей.Выгрузить(); 
	
	ЗаказыОчередь.Колонки.Добавить("КонтрагентКод");
	ЗаказыОчередь.Колонки.Добавить("АдресДоставки");
	ЗаказыОчередь.Колонки.Добавить("Ответственный");
	
	Для каждого стр2 из ЗаказыОчередь Цикл 
		стр2.КонтрагентКод = стр2.ЗаказПокупателя.Контрагент.Код;
		стр2.АдресДоставки = стр2.ЗаказПокупателя.АдресДоставки;
		//если нет адреса в заказе - то одинаково... по функции получения структуры адреса!
		стр2.Ответственный = стр2.ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо.Код;
	КонецЦикла;	
	ЗаказыОчередь.Свернуть("КонтрагентКод, АдресДоставки, Ответственный", "КоличествоШтук");  //+++ номер ворот !  , НомерВорот
	

	ЗаказыОчередь.Колонки.Добавить("Очередь");
	
	N = ЗаказыПокупателей.Количество();
	Очередь = 0;
	Для каждого стр2 из ЗаказыОчередь цикл		
		Очередь = Очередь + 1;
		стр2.Очередь = Очередь;		
	КонецЦикла;	
	
	Для Каждого СтрЗаказ из ЗаказыПокупателей Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("КонтрагентКод", СтрЗаказ.ЗаказПокупателя.Контрагент.Код);
		
		АдресДоставки = СтрЗаказ.ЗаказПокупателя.АдресДоставки;
		ПараметрыОтбора.Вставить("АдресДоставки", АдресДоставки);
		ПараметрыОтбора.Вставить("Ответственный", СтрЗаказ.ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо.Код);

		НайденныеСтроки = ЗаказыОчередь.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество()>0 Тогда
			СтрЗаказ.НомерОчереди = НайденныеСтроки[0].Очередь;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

//+++ НОВАЯ! 04 - 08.08.2017 
//---номер очереди полностью берется из Информации по проезду ---
Процедура ЗаполнитьНомерОчереди(Отказ=ЛОЖЬ)
	
	Если ИнформацияПоПроезду.Количество()=0 тогда
		Предупреждение("Не заполнена таблица Транспортных затрат!
					|Номер очереди отгрузки будет расчитан автоматически...", 30);
		ЗаполнитьНомерОчереди_СТАРАЯ();   //для случая, когда Задание на отгрузку делают руками... 
		возврат;
	КонецЕсли;
	
	МаксОч = -1; //максимальный номер очереди (от логистов)
	для каждого стр1 из ИнформацияПоПроезду цикл
		если стр1.НомерОчереди>МаксОч тогда
			МаксОч=стр1.НомерОчереди;
		КонецЕсли;
	КонецЦикла;
	
	ЗаказыОчередь = ЗаказыПокупателей.Выгрузить(); 
	ЗаказыОчередь.Колонки.Добавить("КонтрАдрМен");
	ЗаказыОчередь.Сортировать("НомерОчереди");
	
	НомерОчереди0 = ""; КонтрАдрМен0  = "";
	Сдвиг = 0;
	 //обратный порядок очередей на Загрузку со складов
	 для каждого стр1 из ЗаказыОчередь цикл
		стрИнфо = ИнформацияПоПроезду.Найти(  стр1.ЗаказПокупателя,  "Заказ" );
		
		Если стрИнфо = неопределено тогда
			Предупреждение(строка(стр1.ЗаказПокупателя)+" для клиента "+строка(стр1.Контрагент)+" ОТСУТСТВУЕТ в списке Тр.Затрат !", 30);
			Отказ = Истина;
			ВОЗВРАТ;
		КонецЕсли;
		
		стр1.НомерОчереди = МаксОч + 1 - стрИнфо.НомерОчереди; 
		стр1.КонтрАдрМен  = сокрЛП(стрИнфо.Контрагент.Код); //+ сокрЛП(стрИнфо.Адрес) +строка(стрИнфо.Менеджер); //09.08.2017 - котроль ТОЛЬКО по Клиенту 
	
		Если стр1.НомерОчереди = НомерОчереди0 тогда
			Если стр1.КонтрАдрМен <> КонтрАдрМен0 тогда // очереди на ВЫгрузку со склада - не могут быть одинаковые!
			сообщить("В очереди на выгрузку № "+строка(стрИнфо.НомерОчереди)+" указаны разные Контрагенты.");    //09.08.2017 
			Сдвиг = Сдвиг+1;
			Отказ = Истина;
			КонецЕсли;
		КонецЕсли;	
  	НомерОчереди0 = стр1.НомерОчереди;
    КонтрАдрМен0  = стр1.КонтрАдрМен;
	КонецЦикла;
 	ЗаказыОчередь.Сортировать("НомерОчереди");

	ЗаказыПокупателей.Загрузить( ЗаказыОчередь );
			
КонецПроцедуры


// Процедура - обработчик события "ПередЗаписью" формы
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	//+++ 01.12.2016 по приходу ничего проверять НЕ надо!
	Если ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Приход тогда 
		// Свертка заказов поставщику
		Если ЗаказыПоставщикам.Количество()>0 Тогда
			ТаблицаЗаказыПоставщикам=ЗаказыПоставщикам.Выгрузить();
			ТаблицаЗаказыПоставщикам.Свернуть("ЗаказПоставщику");
			Если ТаблицаЗаказыПоставщикам.Количество() <> ЗаказыПоставщикам.Количество() Тогда
				ТекстВопроса = "В таблице есть повторяющиеся заказы. Количество рассчитается неверно.";
				Предупреждение(ТекстВопроса );
			КонецЕсли;
		КонецЕсли;	
		
		Возврат;
	КонецЕсли;
	
//+++ 04.04.2018 --------Исключён самовывоз------------------------
Если Тариф=0 
	И НЕ ЗаказыПокупателей[0].ЗаказПокупателя.Самовывоз тогда  //05.04.2018 - тариф = 0 
	Предупреждение("Заполните Стоимость доставки (Тариф)!",10);
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ИнформацияПоПроезду;
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Тариф;
 	ОТКАЗ = Истина;
	Возврат;
КонецЕсли;	

Если Километров=0 
	И НЕ ЗаказыПокупателей[0].ЗаказПокупателя.Самовывоз тогда //расстояние = 0
	Предупреждение("Заполните Расстояние до последней точки доставки (Пробег,км)!",10);
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ИнформацияПоПроезду;
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Километров;
 	ОТКАЗ = Истина;
	Возврат;
КонецЕсли;	
//+++)


	//08.08.2017
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение и (ГруппыСкладов.Количество()=0 или Товары.Количество()=0) тогда
		Предупреждение("Нельзя проводить Задание на отгрузку! Просто Запишите документ.
					  |Для проведения - требуется заполнить ""2.Порядок отгрузки"" и ""3.Товары""!", 60);
		Отказ = истина;
		Возврат;
	КонецЕсли;	
		
	Если ЗаказыПокупателей.Количество()>0 Тогда
		ТаблицаЗаказыПокупателей=ЗаказыПокупателей.Выгрузить();
		ТаблицаЗаказыПокупателей.Свернуть("ЗаказПокупателя");
		Если ТаблицаЗаказыПокупателей.Количество() <> ЗаказыПокупателей.Количество() Тогда
			ТекстВопроса = "В таблице есть повторяющиеся заказы. Количество рассчитается неверно.";
			Предупреждение(ТекстВопроса );
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	Для каждого зак1 из ЗаказыПокупателей Цикл
		//+++ 07.10.2013
		Если не зак1.ЗаказПокупателя.Проверен Тогда
			сообщить(строка(зак1.ЗаказПокупателя)+" - не проделен! Нельзя отгружать непроделенный заказ!", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		//+++ 01.12.2016
		если не зак1.ЗаказПокупателя.Статус.Пустая() тогда
			если НЕ (зак1.ЗаказПокупателя.Статус=Перечисления.СтатусыЗаказов.Получен 
				или зак1.ЗаказПокупателя.Статус=Перечисления.СтатусыЗаказов.Доставлен //05.04.2017
				или зак1.ЗаказПокупателя.Статус=Перечисления.СтатусыЗаказов.ПолученЧастично ) тогда
				сообщить(строка(зак1.ЗаказПокупателя)+" - ждет поступления товаров от поставщиков! Нельзя отгружать такой заказ!", СтатусСообщения.Внимание);
				Отказ = истина;
			конецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	// Плотников, Заполнение путевого листа
	
	Если (Найти(Перевозчик,"Землянский")>0 или Найти(Перевозчик,"Воробьев")>0 или Найти(Перевозчик,"Малышев")>0) 
		и Подразделение.ОбособленноеПодразделение = Ложь Тогда
		Путевой = Истина;
	иначе
		путевой = Ложь;
	КонецЕсли;
	
	Если Путевой Тогда		
		Если ЭтотОбъект.Ссылка.Выполнено = Ложь и Выполнено = Истина и НомерПутевогоЛиста = "" тогда
			сообщить("Не заполнен номер путевого листа, заполните и попробуйте записать снова!!!", СтатусСообщения.Внимание);
			Отказ = Истина;
			Возврат;
		ИначеЕсли ЭтотОбъект.Ссылка.Выполнено = Ложь и Выполнено = Истина и НомерПутевогоЛиста <> "" Тогда	
			ВыгрузитьТранспортИОбраткиВПутевойЛист(НомерПутевогоЛиста);	
		КонецЕсли;	
	КонецЕсли;
	
	//пока ещё не распределено по складам - контролируем и перезаполяем очереди!
	Если ЭтоНовый() или ссылка.Проведен=ЛОЖЬ тогда  //08.08.2017
	  ЗаполнитьНомерОчереди(Отказ); 
	  Если Отказ тогда
		  Возврат;
	  КонецЕсли;	  
    КонецЕсли;

	ПолучитьАссортимент();
	ПересчетКоличестваИСуммПоЗаказам();
	
	доступноИзменениеДокументов = (РежимЗаписи = РежимЗаписиДокумента.Проведение);
	
	//+++ 19.11.2013  только Если есть реализации
	естьРеализации = (ЗаказыПокупателей.Итог("КоличествоШтукОтгружено")>0);
	Если не естьРеализации Тогда
		списРеализаций = ЗаказыПокупателей.ВыгрузитьКолонку("Реализация");
		Для i=0 по списРеализаций.Количество()-1 Цикл
			Если ЗначениеЗаполнено(списРеализаций[i]) Тогда
				естьРеализации = Истина;
				прервать;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	//+++ 18.11.2013 - так нельзя! не должно быть различий на складе и по документам!
	Если Товары.Итог("Количество")<>ЗаказыПокупателей.Итог("КоличествоШтукОтгружено") и естьРеализации Тогда
		delta = ЭтотОбъект.Товары.Итог("Количество")-ЗаказыПокупателей.Итог("КоличествоШтукОтгружено");
		сообщение1 = "Ошибка при записи ""Задания на отгрузку "+строка(Номер)+" от "+строка(Дата)+""":
		|Количество реально отгруженного товара в таблице ""Товары"" не совпадает с количество по документам Реализациям!
		|"+?(delta>0, "В документы Реализации НЕ ПОПАЛО "+строка(delta)+" шт. реально отгруженного товара!", 
		"В документах Реализации товаров БОЛЬШЕ, ЧЕМ В реально отгружено по таблице ""Товары"" на "+строка(-delta)+"шт.");
		Сообщить(сообщение1, СтатусСообщения.ОченьВажное);
		// Отказ = Истина; //+++ нельзя ЗАПРЕЩАТЬ запись, Иначе ничего не запишется!
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Товары;
	КонецЕсли;
	
	яштСменаПользователя(ЭтотОбъект, ЭтаФорма, глТекущийПользователь);
	
	//+++ 23.04.2015
	Если ИнформацияПоПроезду.Количество()=0 
		и ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Расход Тогда
			ПолучитьИзЗаказовНажатие(Неопределено);   // из заказов и для филиалов тоже!
	КонецЕсли;
	
	Если СокрЛП(Направление) = "" тогда
		Направление = ЗаполнитьНаправлениеПоГородам();
	КонецЕсли;	
	
	Если Модифицированность() Тогда
		ДатаМодификацииДокумента = ТекущаяДата();
		Если ЗначениеНеЗаполнено(ДатаДокументаПервая) Тогда
			ДатаДокументаПервая=ДатаМодификацииДокумента;
		КонецЕсли;
		ЭтаФорма.Модифицированность = ложь;
	КонецЕсли;

	//29.06.2016 обновление поля "Направление"
	СравнениеНаправление = Направление;
	Если Направление="" Тогда 
		Направление = ЗаполнитьНаправлениеПоГородам();	
	КонецЕсли;
	//29.06.2016	
	
	//Плотников +++ 28.07.16
	Если Выполнено Тогда
		Для каждого стр из Обратки Цикл
			Если ТипЗнч(стр.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаТранспорт") Тогда
				Если стр.ДокументОснование <> Документы.ЗаявкаНаТранспорт.ПустаяСсылка() Тогда
					ДокОбъект = Стр.ДокументОснование.ПолучитьОбъект();
					ДокОбъект.ДокументОтгрузки = Ссылка;
					ДокОбъект.Статус = Перечисления.СтатусыЗаявокНаТранспорт.Доставлен;
					ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
				конецЕсли;
			конецЕсли;	
		конецЦикла;
		
		Для каждого стр из ЗаявкиНаТранспорт Цикл
			Если ТипЗнч(стр.Заявка) = Тип("ДокументСсылка.ЗаявкаНаТранспорт") Тогда
				Если стр.Заявка <> Документы.ЗаявкаНаТранспорт.ПустаяСсылка() Тогда
					ДокОбъект = Стр.Заявка.ПолучитьОбъект();
					ДокОбъект.ДокументОтгрузки = Ссылка;
					ДокОбъект.Статус = Перечисления.СтатусыЗаявокНаТранспорт.Доставлен;
					ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
				конецЕсли;
			конецЕсли;	
		конецЦикла;
	КонецЕсли;
	
	Если Выполнено и не ПисьмаОтправлены и не Отказ Тогда // дата выполнения, которая проставлена в форме!		
		
		ОтослатьУПД();
		
		ОтправитьЗадачиМенеджерам();
		
		//ОтослатьУведомленияОРейсе();
		
		//+Лукьяненков 22.09.2017
		Если Подразделение = Справочники.Подразделения.НайтиПоКоду("00005") Тогда
			ОтправитьЗадачиМенеджерамНаФилиалы();
		КонецЕсли;
		//-Лукьяненков 22.09.2017
		
		ПисьмаОтправлены = истина
	КонецЕсли;


КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)
	 
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа Для контроля номера документа
	
КонецПроцедуры // ДатаПриИзменении()


Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		Если ВидОперации = Перечисления.ВидыДвиженийПриходРасход[Кнопка.Имя] Тогда
			Возврат;
		КонецЕсли; 
		ВидОперации = Перечисления.ВидыДвиженийПриходРасход[Кнопка.Имя];
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыДвиженийПриходРасход.Расход Тогда
		ЗаказыПоставщикам.Очистить();
	Иначе
		ЗаказыПокупателей.Очистить();
	КонецЕсли;	
	
	// Отобразить в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
 	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)
	
ФормаПодбора = Документы.ЗаказПоставщику.ПолучитьФормуСписка(,ЭтаФорма);
ФормаПодбора.РежимВыбора=Истина;
ФормаПодбора.ЗакрыватьПриВыборе = Ложь; 
Если ЗначениеЗаполнено(Контрагент) Тогда
	ФормаПодбора.ДокументСписок.Отбор.Контрагент.Значение=Контрагент;
	ФормаПодбора.ДокументСписок.Отбор.Контрагент.Использование=Истина;
КонецЕсли;

ФормаПодбора.Открыть(); 	

КонецПроцедуры

Процедура КоманднаяПанельТоварыДействиеПодбор1(Кнопка)
	
	Если ЭтотОбъект.Проведен Тогда
		Предупреждение("Задание на отгрузку уже выполняется!
						|Уже нельзя менять состав заказов!", 30);
		Возврат;
	КонецЕсли;	
	
	
ФормаПодбора = Документы.ЗаказПокупателя.ПолучитьФормуСписка(,ЭтаФорма);
ФормаПодбора.РежимВыбора=Истина;
ФормаПодбора.ЗакрыватьПриВыборе = Ложь; 
Если ЗначениеЗаполнено(Контрагент) Тогда
	ФормаПодбора.ДокументСписок.Отбор.Контрагент.Значение=Контрагент;
	ФормаПодбора.ДокументСписок.Отбор.Контрагент.Использование=Истина;
КонецЕсли;
Если ВводитьТолькоПеремещение Тогда
	ФормаПодбора.ДокументСписок.Отбор.ВводитьТолькоПеремещение.Значение = Истина;
	ФормаПодбора.ДокументСписок.Отбор.ВводитьТолькоПеремещение.Использование=Истина;
КонецЕсли;

ФормаПодбора.Открыть(); 	
	
КонецПроцедуры

Процедура ЗаказыПокупателейПриПолученииДанных(Элемент, ОформленияСтрок)
		
//==============================================================================================================	
	Для Каждого Строка Из ОформленияСтрок Цикл
		
		Если НЕ Строка.ДанныеСтроки.ЗаказПокупателя.пустая() Тогда
			Строка.Ячейки.Контрагент.Значение= Строка.ДанныеСтроки.ЗаказПокупателя.Контрагент;
			Строка.Ячейки.Договор.значение   = Строка.ДанныеСтроки.ЗаказПокупателя.ДоговорКонтрагента;	    			
			Строка.Ячейки.Менеджер.Значение  = Строка.ДанныеСтроки.ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо;
		КонецЕсли;
		
	 	инд= 3;
		Если Не ЗначениеНеЗаполнено(Строка.ДанныеСтроки.Реализация) Тогда
			Строка.Ячейки.КартинкаРеализации.ОтображатьКартинку = Истина;
			Если Строка.ДанныеСтроки.Реализация.пометкаУдаления Тогда
				инд = 1;
			ИначеЕсли Строка.ДанныеСтроки.Реализация.проведен Тогда
				инд = 0;
			ИначеЕсли НЕ Строка.ДанныеСтроки.Реализация.проведен Тогда
				инд = 2;
			КонецЕсли;	
		КонецЕсли;	
			Строка.Ячейки.КартинкаРеализации.ОтображатьКартинку = Истина;
			Строка.Ячейки.КартинкаРеализации.ИндексКартинки = инд;
			
			
		Строка.Ячейки.ДляПеремещения.ОтображатьТекст=ложь;
		Строка.Ячейки.ДляПеремещения.ОтображатьФлажок=Истина;
		Строка.Ячейки.ДляПеремещения.Флажок = Строка.ДанныеСтроки.ЗаказПокупателя.ВводитьТолькоПеремещение;
		
		Строка.Ячейки.Реклама.ОтображатьТекст=ложь;
		Строка.Ячейки.Реклама.ОтображатьФлажок=Истина;
		Строка.Ячейки.Реклама.Флажок = ?(Строка.ДанныеСтроки.ЗаказПокупателя.ТипЗаказа=12,Истина,Ложь);
		
		Если Строка.Ячейки.Вес.видимость Тогда
		Строка.Ячейки.Вес.ОтображатьТекст=Истина;
		Строка.Ячейки.Вес.Текст = ?(Строка.ДанныеСтроки.Реализация=Неопределено или Строка.ДанныеСтроки.Реализация.пустая(), "", 
									формат(Строка.ДанныеСтроки.Реализация.ОбщийВес,"ЧДЦ=0") ); //до кг	
		КонецЕсли;
		
		
		Если Строка.ДанныеСтроки.КоличествоШтук<>Строка.ДанныеСтроки.КоличествоШтукОтгружено Тогда
			 Строка.ЦветТекста = webЦвета.Красный;
			 Если Строка.ДанныеСтроки.КоличествоШтук<Строка.ДанныеСтроки.КоличествоШтукОтгружено Тогда  //+++ 16.07.2013
			   Строка.Шрифт = новый Шрифт(Строка.Шрифт,,,ИСТИНА); //жирный!
			   сообщить(строка(Строка.ДанныеСтроки.НомерСтроки)+" строка! Внимание! Количество отгружаемого товара больше заказанного на "+строка(Строка.ДанныеСтроки.КоличествоШтукОтгружено - Строка.ДанныеСтроки.КоличествоШтук)+" шт. !!!", СтатусСообщения.Внимание);
			 КонецЕсли;
		КонецЕсли;
		
		//+++ 24.04.2015 
		Строка.Ячейки.Комментарий.ОтображатьТекст = Истина;
		Строка.Ячейки.Комментарий.текст = Строка.ДанныеСтроки.ЗаказПокупателя.Комментарий;
		
	КонецЦикла;
		
КонецПроцедуры

//===============общие процедуры всех страниц=======================

//получение списка ВидТовара по всей заказанной номенклатуре
// работает только Если распроведены реализации!!!
процедура ПолучитьАссортимент()
	СтрокаАссортимент="";
	Запрос=Новый Запрос;
	Если ВидОперации=Перечисления.ВидыДвиженийПриходРасход.Расход Тогда
		Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
		             |	ЗаказыПокупателейОстатки.Номенклатура.ВидТовара КАК ВидТовара
		             |ИЗ
		             |	РегистрНакопления.ЗаказыПокупателей.Остатки( , ЗаказПокупателя В (&СписокЗаказов)
					 				//+++19.08.2016
					 |				И Номенклатура.Услуга=ЛОЖЬ     ) КАК ЗаказыПокупателейОстатки";
		Запрос.УстановитьПараметр("СписокЗаказов",ЗаказыПокупателей.ВыгрузитьКолонку("ЗаказПокупателя"));
	Иначе // приход
		 Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
		              |	ЗаказыПоставщикамОстатки.Номенклатура.ВидТовара КАК ВидТовара
		              |ИЗ
		              |	РегистрНакопления.ЗаказыПоставщикам.Остатки(
					  |, ЗаказПоставщику В (&СписокЗаказов) И ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ
					  //+++19.08.2016
					 |				И Номенклатура.Услуга=ЛОЖЬ ) КАК ЗаказыПоставщикамОстатки";
		Запрос.УстановитьПараметр("СписокЗаказов",ЗаказыПоставщикам.ВыгрузитьКолонку("ЗаказПоставщику"));
	КонецЕсли;
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаАссортимент=?(СтрокаАссортимент<>"",СтрокаАссортимент+", "+Строка(Выборка.ВидТовара),Строка(Выборка.ВидТовара));
	КонецЦикла;
	Ассортимент = СтрокаАссортимент;
	
КонецПроцедуры

//количество позиций и штук по заказам
Процедура ПересчетКоличестваИСуммПоЗаказам()
	
Если ВидОперации =Перечисления.ВидыДвиженийПриходРасход.Расход Тогда
	запрос = Новый запрос;
	запрос.текст = "ВЫБРАТЬ 
	//| РАЗЛИЧНЫЕ
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПокупателейОстатки.Номенклатура) КАК КоличествоПозиций,
	|	СУММА(
	//Миронычев
	|	ВЫБОР
	|	КОГДА ЕСТЬNULL(СостояниеЗаказовИМ.Состояние, 0) = 0
	|		ТОГДА ЗаказыПокупателейОстатки.КоличествоОстаток
	|	ИНАЧЕ СостояниеЗаказовИМ.Количество
	|	КОНЕЦ
	//КонецМиронычев
	|	) КАК КоличествоШтук
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(
	//|&МоментВремени
	|, ЗаказПокупателя В (&СписокЗаказов)
	//+++ 24.06.2016
	|		и Номенклатура.Услуга=ЛОЖЬ  ) КАК ЗаказыПокупателейОстатки
	//Миронычев
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеЗаказовИМ КАК СостояниеЗаказовИМ
    |		ПО (ВЫБОР
    |				КОГДА ЗаказыПокупателейОстатки.ЗаказПокупателя.ТипЗаказа = 10
    |					ТОГДА ЗаказыПокупателейОстатки.ЗаказПокупателя = СостояниеЗаказовИМ.ЗаказПервичный
    |				ИНАЧЕ ЗаказыПокупателейОстатки.ЗаказПокупателя = СостояниеЗаказовИМ.ЗаказОбщий
    |			КОНЕЦ)
    |			И ЗаказыПокупателейОстатки.Номенклатура = СостояниеЗаказовИМ.Номенклатура
	|ГДЕ
	|       ВЫБОР
	                |			КОГДА ЗаказыПокупателейОстатки.ЗаказПокупателя.Подразделение.Код = ""00005""
	                |				ТОГДА ВЫБОР
	                |						КОГДА ЗаказыПокупателейОстатки.ЗаказПокупателя.Контрагент.Код <> ""П001549""
	                |							ТОГДА ЕСТЬNULL(СостояниеЗаказовИМ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостояниеЗаказовИМ.Перемещен)) = ЗНАЧЕНИЕ(Перечисление.СостояниеЗаказовИМ.Перемещен)
	                
	                |			ИНАЧЕ 0 = 0
	                |		КОНЕЦ
                    |						ИНАЧЕ ЕСТЬNULL(СостояниеЗаказовИМ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостояниеЗаказовИМ.Перемещен)) <> ЗНАЧЕНИЕ(Перечисление.СостояниеЗаказовИМ.Отменен)
	                |					КОНЕЦ

	
	//КонецМиронычев
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя";
	запрос.УстановитьПараметр("СписокЗаказов", ЗаказыПокупателей.ВыгрузитьКолонку("ЗаказПокупателя"));
	
	//------------дата проведения реализаций - обязательно должна быть позже МоментаВремени--------------
	УжеЕстьРеализации = естьРеализации();
	
Если НЕ УжеЕстьРеализации Тогда	
	валютаДок  = Неопределено;
	результат = запрос.Выполнить();
	выборка = результат.Выбрать();
	Пока выборка.Следующий() Цикл
		стр1 = ЗаказыПокупателей.Найти(выборка.ЗаказПокупателя,"ЗаказПокупателя");
		ЗаполнитьЗначенияСвойств(стр1, выборка);
		Если не  стр1.Реализация=Неопределено и не стр1.Реализация.Пустая() и не стр1.Реализация.ПометкаУдаления Тогда
		  стр1.КоличествоПозицийОтгружено = стр1.Реализация.Товары.Количество();
		  стр1.КоличествоШтукОтгружено    = стр1.Реализация.Товары.Итог("Количество") + ?(ЗначениеЗаполнено(стр1.Списание),стр1.Списание.Материалы.Итог("Количество"),0);
		  
		  Если ТипЗнч(стр1.Реализация)=Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда //!!! не Для перемещения
		  стр1.Сумма = стр1.Реализация.СуммаДокумента; //только по непомеченным на удаление!
		  		Если валютаДок = Неопределено Тогда
			  		валютаДок = стр1.Реализация.ВалютаДокумента;
				ИначеЕсли валютаДок <> стр1.Реализация.ВалютаДокумента Тогда
					сообщить("Валюта документа: "+строка(стр1.Реализация)+" - отличается от валюты Задания на отгрузку: "+строка(валютаДок)+"! Сумма задания будет неправильной.", СтатусСообщения.Внимание);
				КонецЕсли;
		  КонецЕсли;
			
        Иначе
		  стр1.КоличествоПозицийОтгружено = 0;
		  стр1.КоличествоШтукОтгружено    = 0;
		  стр1.Сумма = 0;
		КонецЕсли;
	КонецЦикла;
	ЭтотОбъект.СуммаДокумента = ЗаказыПокупателей.итог("Сумма");
	Если валютаДок <> Неопределено Тогда
    	ЭтотОбъект.ВалютаДокумента = валютаДок;
	КонецЕсли;	
	
Иначе //+++( 29.07.2014 пересчет по фактическим реализациям 
	
	валютаДок = Неопределено;
	Для каждого стр1 из ЗаказыПокупателей Цикл 
		
		Если не  стр1.Реализация=Неопределено и не стр1.Реализация.Пустая() и не стр1.Реализация.ПометкаУдаления Тогда //+++ 01.08.2014

	      стр1.КоличествоПозицийОтгружено = стр1.Реализация.Товары.Количество();
		  стр1.КоличествоШтукОтгружено    = стр1.Реализация.Товары.Итог("Количество");
		  
		  Если ТипЗнч(стр1.Реализация)=Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда //!!! не Для перемещения
		  стр1.Сумма = стр1.Реализация.СуммаДокумента; //только по непомеченным на удаление!
		  		Если валютаДок = Неопределено Тогда
			   		 валютаДок = стр1.Реализация.ВалютаДокумента;
				ИначеЕсли валютаДок <> стр1.Реализация.ВалютаДокумента Тогда
					сообщить("Валюта документа: "+строка(стр1.Реализация)+" - отличается от валюты Задания на отгрузку: "+строка(валютаДок)+"! Сумма задания будет неправильной.", СтатусСообщения.Внимание);
				КонецЕсли;
		   Иначе
			 стр1.Сумма = 0;
		   КонецЕсли;
		 
	    КонецЕсли; 
	   
	КонецЦикла;
	ЭтотОбъект.СуммаДокумента = ЗаказыПокупателей.итог("Сумма");
	Если валютаДок <> Неопределено Тогда
    	ЭтотОбъект.ВалютаДокумента = валютаДок;
	КонецЕсли;	

КонецЕсли;	//+++)
	
ИначеЕсли ВидОперации =Перечисления.ВидыДвиженийПриходРасход.Приход и НЕ ВводитьИтогиВручную Тогда
	запрос = Новый запрос;
	запрос.текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПоставщикамОстатки.Номенклатура) КАК КоличествоПозиций,
	               |	СУММА(ЗаказыПоставщикамОстатки.КоличествоОстаток) КАК КоличествоШтук
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПоставщикам.Остатки(
			//	   |&МоментВремени
				   |, ЗаказПоставщику В (&СписокЗаказов) И ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ          ) КАК ЗаказыПоставщикамОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику";
	запрос.УстановитьПараметр("СписокЗаказов", ЗаказыПоставщикам.ВыгрузитьКолонку("ЗаказПоставщику"));
//	запрос.УстановитьПараметр("МоментВремени", новый граница(Дата, ВидГраницы.Исключая));
	результат = запрос.Выполнить();
	выборка = результат.Выбрать();
	Комментарий = "";
	Пока выборка.Следующий() Цикл
		стр1 = ЗаказыПоставщикам.Найти(выборка.ЗаказПоставщику,"ЗаказПоставщику");
		ЗаполнитьЗначенияСвойств(стр1, выборка);
		Комментарий = Комментарий + СокрЛП(выборка.ЗаказПоставщику.Комментарий) +"; ";
	КонецЦикла;	
ИначеЕсли НЕ ВводитьИтогиВручную Тогда
	
	Предупреждение("Не выбран Вид операции!");
	
КонецЕсли;

	НомераЗаявокВСтроку="";   
	//ЗаказыПокупателей
		Если ВидОперации=Перечисления.ВидыДвиженийПриходРасход.Расход и НЕ ВводитьИтогиВручную Тогда
			ИтогКоличествоПозиций=ЗаказыПокупателей.Итог("КоличествоПозиций");
			ИтогКоличествоШтук=ЗаказыПокупателей.Итог("КоличествоШтук");
			флДобавлен=ложь;
			КомментарийСкладу="";
			Для Каждого строкаЗаказы ИЗ ЗаказыПокупателей Цикл
				Если не строкаЗаказы.ЗаказПокупателя.Пустая() Тогда
					НомераЗаявокВСтроку = НомераЗаявокВСтроку + сокрЛП(строкаЗаказы.ЗаказПокупателя.Номер)+", ";
					Если СокрЛП(строкаЗаказы.ЗаказПокупателя.Комментарий)<>"" 
						и Найти(Комментарий, сокрЛП(строкаЗаказы.ЗаказПокупателя.Номер)+": ")=0 Тогда // комментарий из Заказа в Задание на отгрузку
						Комментарий = Комментарий + сокрЛП(строкаЗаказы.ЗаказПокупателя.Номер)+": "+СокрЛП(строкаЗаказы.ЗаказПокупателя.Комментарий)+"
						|"; флДобавлен=Истина; 
					КонецЕсли;
					//05.10.16 Смирнов
					//Если ЗначениеЗаполнено(строкаЗаказы.ЗаказПокупателя.Контрагент.КонтрагентДляРезерваИМ) тогда //123заменить
					Если ЗначениеЗаполнено(строкаЗаказы.ЗаказПокупателя.ДоговорКонтрагента.КонтрагентДляРезерваИМ) тогда
					//если строкаЗаказы.ЗаказПокупателя.Контрагент.КонтрагентДляРезерваИМ = справочники.Контрагенты.НайтиПоКоду("П004703") тогда //23.01.2017 //123Заменить
					если строкаЗаказы.ЗаказПокупателя.ДоговорКонтрагента.КонтрагентДляРезерваИМ = справочники.Контрагенты.НайтиПоКоду("П004703") тогда //23.01.2017
						КомментарийСкладу=КомментарийСкладу+?(СокрЛП(строкаЗаказы.ЗаказПокупателя.КомментарийДляСклада)<>"",СокрЛП(строкаЗаказы.ЗаказПокупателя.КомментарийДляСклада)+Символы.ПС,"");
						КонецЕсли;
					КонецЕсли;
					//--05.10.16 Смирнов
				КонецЕсли;
			КонецЦикла;	
			НомераЗаявокВСтроку = лев(НомераЗаявокВСтроку, стрДлина(НомераЗаявокВСтроку)-2);
			
			Если флДобавлен Тогда // только Если сейчас добавляли автоматически - удаляем 2 символа
				Комментарий = лев(Комментарий, стрДлина(Комментарий)-2);
			КонецЕсли;	
			//05.10.16 Смирнов
			Если КомментарийСкладу<>"" тогда
				Комментарий = КомментарийСкладу;
			КонецЕсли;
			//--05.10.16 Смирнов
			
		Иначе //ЗаказыПоставщикам
			Если ВидОперации=Перечисления.ВидыДвиженийПриходРасход.Приход и НЕ ВводитьИтогиВручную Тогда //+++ 05.06.2013
			ИтогКоличествоПозиций=ЗаказыПоставщикам.Итог("КоличествоПозиций");
			ИтогКоличествоШтук   =ЗаказыПоставщикам.Итог("КоличествоШтук");
			Для Каждого строкаЗаказы ИЗ ЗаказыПоставщикам Цикл
				Если Не ЗначениеНеЗаполнено(строкаЗаказы.ЗаказПоставщику) Тогда
					НомераЗаявокВСтроку = НомераЗаявокВСтроку +  сокрЛП(строкаЗаказы.ЗаказПоставщику.Номер)+", ";
				КонецЕсли;
			КонецЦикла;	
			НомераЗаявокВСтроку = лев(НомераЗаявокВСтроку, стрДлина(НомераЗаявокВСтроку)-2);
			КонецЕсли;
		КонецЕсли;

//---------------------пересчет итогового объема-------------------------------------		
	итогОбъем1=0;
	Для каждого стр1 из Товары Цикл
		итогОбъем1 = итогОбъем1 + стр1.Количество * ВычислитьОбъемНоменклатуры(стр1.Номенклатура);
	КонецЦикла;
	
	итогОбъем = ?(итогОбъем=Окр(итогОбъем1,0) или итогОбъем1=0, итогОбъем, Окр(итогОбъем1,3) ); // только Округление возможно или 0!

	
//по реализациям по таблице, а не по оформлениюСтрок!----------------------------------------
Если ВидОперации=Перечисления.ВидыДвиженийПриходРасход.Расход и НЕ ВводитьИтогиВручную Тогда //+++ 05.06.2013	
	колПоз = 0; колШт = 0;  общСуммаДокумента=0;
	ДатаМин = КонецДня(ТекущаяДата()); 
	КолПозЗак=ЗаказыПокупателей.итог("КоличествоПозиций"); 
	КолШтЗак =ЗаказыПокупателей.итог("КоличествоШтук"); 
	ПустаяРеализация = документы.РеализацияТоваровУслуг.ПустаяСсылка();
	общийВес = 0;
	Для Каждого стр1 из ЗаказыПокупателей Цикл
		Если НЕ (стр1.Реализация=Неопределено или стр1.Реализация=ПустаяРеализация или стр1.Реализация.ПометкаУдаления) Тогда
			колПоз1 = стр1.Реализация.Товары.Количество(); 
			Если стр1.КоличествоПозицийОтгружено <> колПоз1  Тогда
				стр1.КоличествоПозицийОтгружено = колПоз1;
			КонецЕсли;
			колШт1 = стр1.Реализация.Товары.Итог("Количество") + ?(ЗначениеЗаполнено(стр1.Списание),стр1.Списание.Материалы.Итог("Количество"),0); 
			Если стр1.КоличествоШтукОтгружено <> колШт1  Тогда
				стр1.КоличествоШтукОтгружено = колШт1;
			КонецЕсли;	
		  колПоз = колПоз + колПоз1;
		  колШт  = колШт  + колШт1;
		  ДатаМин = мин(ДатаМин, стр1.Реализация.Дата); 
		  общийВес = общийВес + стр1.Реализация.общийВес;
		КонецЕсли;
	КонецЦикла;
				
	Если колШт>0 или КолШтЗак>0 Тогда
		процент = ?(КолШтЗак>0, Окр(колШт*100/КолШтЗак,0), 0);
		ЭлементыФормы.РамкаИтогиКоличество.Заголовок = "Итого заказано: "+строка(КолШтЗак)+", отгружено: "+строка(колШт)+" "+?(процент>0, ": ("+строка(процент)+"% шт.)", "");
		Если ИтогКоличествоШтук <> КолШтЗак Тогда
			ИтогКоличествоШтук = КолШтЗак;
		КонецЕсли;	
	Иначе
		Если ГруппыСкладов.итог("КоличествоЗаказано") = ГруппыСкладов.итог("КоличествоСвободно") Тогда
			колШт = ГруппыСкладов.итог("КоличествоЗаказано");
			процент = ?(КолШтЗак>0, Окр(колШт*100/КолШтЗак,0), 0);
			ЭлементыФормы.РамкаИтогиКоличество.Заголовок = "Итого заказано: "+строка(КолШтЗак)+", а Для отгрузки: "+строка(колШт)+" "+?(процент>0, ": ("+строка(процент)+"% шт.)", "");
		Иначе
			ЭлементыФормы.РамкаИтогиКоличество.Заголовок = "Итого заказано >> отгружено";
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыФормы.ЗаказыПокупателей.Колонки.Реализация.ТекстПодвала = "";
	Если ДатаМин <> КонецДня(ТекущаяДата()) и ДатаМин<>'00010101' Тогда
		ЭлементыФормы.ЗаказыПокупателей.Колонки.Реализация.ТекстПодвала = строка(ДатаМин);
		Если ДатаМин<Дата Тогда
			Сообщить("Внимание! Дата и время задания на отгрузку - должно быть раньше даты реализации!", СтатусСообщения.Внимание);
		КонецЕсли;	
	КонецЕсли;	
		
	ЭлементыФормы.ЗаказыПокупателей.Колонки.Вес.ТекстПодвала = "";
	Если общийВес>0 Тогда
		ЭлементыФормы.ЗаказыПокупателей.Колонки.Вес.ТекстПодвала = Формат(общийВес,"ЧДЦ=0");
		ЭлементыФормы.НадписьИтогОбъем.Заголовок = "Общий Вес: "+Формат(общийВес,"ЧДЦ=0; ЧГ=3,0")+" кг.         Объём (куб.м):";
		Если ВесМакс>0 и общийВес/1000>ВесМакс Тогда
			Предупреждение("Превышена максимальная грузоподъёмность машины!
			|Вес: "+строка(общийВес/1000)+"т. превышает "+строка(ВесМакс)+"т. на "+строка(общийВес-ВесМакс*1000)+"кг.",10);
		КонецЕсли;	
	Иначе
		ЭлементыФормы.ЗаказыПокупателей.Колонки.Вес.ТекстПодвала = "";
		ЭлементыФормы.НадписьИтогОбъем.Заголовок = "Объём (куб.м):";
	КонецЕсли;	
	//ЭтаФорма.Модифицированность = ложь; // изменяется Сумма, СуммаДокумента, ИтогКоличествоШтук
КонецЕсли;//расход

	УстановитьВидимость();
	
КонецПроцедуры

//сортировка по порядку из ГруппыСкладов и по складу - по алфавиту
//перемещение групп складов по порядку из ГруппыСкладов 
//
процедура СортироватьПоПорядку(Товары) 
	
	  // просто всегда по алфавиту
	  Товары.Сортировать("ГруппаСкладов, Склад, Номенклатура");
	  
	  //---------------надо передвинуть группами складов------------
	  перваяСтрока = 0;
	  Для n=0 По ГруппыСкладов.Количество()-1 Цикл
		перваяСтрокаГруппы = Товары.Найти(ГруппыСкладов[n].ГруппаСкладов, "ГруппаСкладов");
		Если перваяСтрокаГруппы=Неопределено Тогда 
			продолжить; 
		КонецЕсли;	
		номерПервойСтроки = перваяСтрокаГруппы.НомерСтроки - 1;
		Если  номерПервойСтроки > перваяСтрока Тогда // начинаем сдвиг вперед
			i=0; //сдвиг от номерПервойСтроки 
			СтрокаВГруппе = Истина;
			пока СтрокаВГруппе Цикл
			Товары.Сдвинуть(номерПервойСтроки+i, перваяСтрока - номерПервойСтроки );	
			i=i+1; 
				Если номерПервойСтроки+i<Товары.Количество() Тогда
					СтрокаВГруппе = (Товары[номерПервойСтроки+i].ГруппаСкладов = ГруппыСкладов[n].ГруппаСкладов);
				Иначе
				    СтрокаВГруппе = ложь;
				КонецЕсли;	
			КонецЦикла;	
			перваяСтрока = перваяСтрока+i;
		Иначе  // расчет конца группы
			i=0;
			СтрокаВГруппе = Истина; 
			пока СтрокаВГруппе Цикл
			i=i+1; 
				Если номерПервойСтроки+i<Товары.Количество() Тогда
					СтрокаВГруппе = (Товары[номерПервойСтроки+i].ГруппаСкладов = ГруппыСкладов[n].ГруппаСкладов);
				Иначе
				    СтрокаВГруппе = ложь;
				КонецЕсли;	
			КонецЦикла;	
			перваяСтрока = перваяСтрока+i;
		КонецЕсли;	
	  КонецЦикла;	  
	  
//--------------в отдельной таблице - отсортируем по ВидуТовара: Диски/Шины/АКБ
табЗнач = Товары.Выгрузить();
табЗнач.Колонки.Добавить("ВидТовараПорядок");
табЗнач.Колонки.Добавить("Приоритет");

i=0; N=табЗнач.Количество();
пока i<N Цикл
	Если НЕ ЗначениеЗаполнено(табЗнач[i].ГруппаСкладов) тогда//+++ 02.11.2017 --- 
		сообщить("Нет группы складов для склада "+ строка(табЗнач[i].Склад)+" в строке с товаром "+строка(табЗнач[i].Номенклатура.Код)+"№ - возможно товар не встал в резерв!", СтатусСообщения.Внимание);
		гр = справочники.ГруппыСкладов.ОсновнойСклад;
	Иначе 
		гр = табЗнач[i].ГруппаСкладов;
	КонецЕсли;	
	    Приоритет = ГруппыСкладов.Найти(гр,"ГруппаСкладов").Приоритет;
		табЗнач[i].Приоритет = Приоритет;
		видТов = табЗнач[i].Номенклатура.ВидТовара;
		табЗнач[i].ВидТовараПорядок = ?(видТов=перечисления.ВидыТоваров.Прочее, "яПрочее",
							?(видТов=перечисления.ВидыТоваров.АКБ, "яАкб",
							  ?(видТов=перечисления.ВидыТоваров.АвтоЗапчасти, "яяАвтоЗапчасти",
							    ?(видТов=перечисления.ВидыТоваров.Аксессуары, "яАксессуары", 
								  ?(видТов=перечисления.ВидыТоваров.РекламнаяПродукция, "яяяРеклама", строка(видТов)
							 ) ) ) )      );
	    i=i+1;
КонецЦикла;
 табЗнач.Сортировать("Приоритет, ВидТовараПорядок, Склад, Номенклатура"); // Диски, Шины, яАКБ

//-----------------вставляем обратно--------------------------	
Для j=0 по N-1 Цикл
	ЗаполнитьЗначенияСвойств(Товары[j], табЗнач[j] );
КонецЦикла;

//-----------Дополнительная сортировка по Порядку ДЛЯ ВСЕХ складов с Адресным хранением!------------------------------	  
масКодов = новый массив;  //+++ 14.07.2016 - сортировка по Порядку Адреса хранения...
Если не Подразделение.ОбособленноеПодразделение	тогда
	масКодов.Добавить("01"); // 5000 - уже нет давно!
	масКодов.Добавить("08"); // 8000
	масКодов.Добавить("06"); // АКБ, Аксессуары
	масКодов.Добавить("10"); // Ангары 1,2,3
    масКодов.Добавить("15"); // Ангары 5,6,7
иначе // для филиалов	
	масКодов.Добавить("30");  //РнД: 4000
	масКодов.Добавить("32");  //РнД: 6000
	
	масКодов.Добавить("27"); //СПБ-Ангар
КонецЕсли;

Для нн=0 по масКодов.Количество()-1 цикл 
	грСкладов5000 = справочники.ГруппыСкладов.НайтиПоКоду(масКодов[нн]);
	перваяСтрокаГруппы = Товары.Найти(грСкладов5000, "ГруппаСкладов");
	
Если перваяСтрокаГруппы <> Неопределено Тогда		
	номерПервойСтроки = перваяСтрокаГруппы.НомерСтроки - 1;
		
//--------------в отдельной таблице - отсортируем по ВидуТовара: Диски/Шины/АКБ
табЗнач = Товары.Выгрузить();
табЗнач.Колонки.Добавить("Порядок");
i=0; 
пока i<табЗнач.Количество() Цикл
	Если табЗнач[i].ГруппаСкладов =грСкладов5000 Тогда
		Если табЗнач[i].АдресХранения.Пустая() тогда 
			порядок = 0; // без адресов сначала...
		Иначе порядок = табЗнач[i].АдресХранения.Порядок;
		КонецЕсли;	
		табЗнач[i].Порядок = порядок;
	    i=i+1;
	Иначе
		табЗнач.Удалить(i); 
	КонецЕсли;
КонецЦикла;

 N=табЗнач.Количество();
 Если N>1 тогда
 табЗнач.Сортировать("Склад, Порядок");//сначала Склады БЕЗ ячеек по названию, затем по порядку ячеек... 
	//#Если Клиент тогда
	// сообщить("Отсортировано "+строка(N)+" строк товаров группы складов "+Строка(грСкладов5000)+" по полю 'Порядок' (Адресов хранения)", СтатусСообщения.Информация);
	//#КонецЕсли
  	Для j=0 по N-1 Цикл//-----------------вставляем обратно--------------------------	
 	 ЗаполнитьЗначенияСвойств(Товары[номерПервойСтроки + j], табЗнач[j] );
	КонецЦикла;
 КонецЕсли;

КонецЕсли;

КонецЦикла;//масКодов


КонецПроцедуры



Процедура КонтрагентПриИзменении(Элемент)
	
	Если ТипЗнч(Элемент.Значение)=тип("СправочникСсылка.Контрагенты") Тогда
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		РегионКонтрагента=ПолучитьРегионКонтрагента();	
			Если РегионКонтрагента="" Тогда
			РегионКонтрагента=ПолучитьРегионКонтрагента(Ложь);
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	

КонецПроцедуры


//-----------------------Заполняет остатками НЕТРАНЗИТНЫХ  заказов-------------------------------
//
Процедура КоманднаяПанельТоварыЗаполнитьНеотгруженнымиЗаказами(Кнопка)
	
	Если Контрагент.Пустая() Тогда
		Предупреждение("Не выбран контрагент!
		|Заполнение - невозможно!");
		Возврат;
	КонецЕсли;	
		
		
	Если ЗаказыПокупателей.Количество()>0 Тогда
		
		Если ЭтотОбъект.Проведен Тогда
		Предупреждение("    Задание на отгрузку уже выполняется!
						|Нельзя менять состав заказов - уже идет отгрузка по складам!", 30);
		отказ = Истина;
		КонецЕсли;	
		
	ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Да, Метаданные().Имя, КодВозвратаДиалога.Да);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		ЗаказыПокупателей.Очистить();
	КонецЕсли;	

	
	Запрос=Новый Запрос;
	Запрос.Текст="
				 | ВЫБРАТЬ  
				 |	ТЧЗаказы.ЗаказПокупателя
				 
				 |Поместить ВТ_ЗаказыУжеГрузятся
				 |ИЗ
				 |	Документ.ЗаданиеНаОтгрузку.ЗаказыПокупателей КАК ТЧЗаказы
				 |ГДЕ
				 |	НЕ ТЧЗаказы.Ссылка.ПометкаУдаления
				 |	И ТЧЗаказы.Ссылка.Дата >= &ДатаНач
				 |	И ТЧЗаказы.ЗаказПокупателя.Контрагент = &Контрагент
				 |		//отборПоДатеОтгрузки   И ТЧЗаказы.ЗаказПокупателя.ДатаОтгрузки = &ДатаОтгрузки1
				 |		//отборПоПроверенным    И ( ЗаказПокупателя.Комментарий подобно (&Проверен)  или ЗаказПокупателя.Комментарий подобно (&Проверен1) или ЗаказПокупателя.Комментарий подобно (&Проверен2) )

	 
				 |ОБЪЕДИНИТЬ ВСЕ
				 | ВЫБРАТЬ
				 |	ТЧЗаказы.ЗаказПокупателя
				 
				 |ИЗ
				 |	Документ.ЗаданиеНаПеремещение.ЗаказыПокупателей КАК ТЧЗаказы
				 |ГДЕ
				 // задания на перемещения блокируют отгрузку ДО выполнения перемещения!
				 |  НЕ ТЧЗаказы.Ссылка.Выполнено
				 |	И НЕ ТЧЗаказы.Ссылка.ПометкаУдаления
				 |	И    ТЧЗаказы.Ссылка.Дата >= &ДатаНач
				 |	И ТЧЗаказы.ЗаказПокупателя.Контрагент = &Контрагент
				 |		//отборПоДатеОтгрузки   И ТЧЗаказы.ЗаказПокупателя.ДатаОтгрузки = &ДатаОтгрузки1
				 |		//отборПоПроверенным    И ( ЗаказПокупателя.Комментарий подобно (&Проверен)  или ЗаказПокупателя.Комментарий подобно (&Проверен1) или ЗаказПокупателя.Комментарий подобно (&Проверен2) )

		
				 |;
				 |/////////////////////////////////////////////////////////////////////////
				 |ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	А.ЗаказПокупателя,
				 |	А.Менеджер,
	             |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ А.Номенклатура) КАК КоличествоПозиций,
	             |	СУММА(А.КоличествоОстаток) КАК КоличествоШтук
			    |ИЗ
	             |	(ВЫБРАТЬ
	             |		ЗаказыПокупателейОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
				 |		ЗаказыПокупателейОстатки.ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо как Менеджер,
	             |		ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	             |		ЗаказыПокупателейОстатки.КоличествоОстаток КАК КоличествоОстаток
	              |	ИЗ
	             |		РегистрНакопления.ЗаказыПокупателей.Остатки( ,
	             |				ДоговорКонтрагента.Владелец = &Контрагент
	             |					И НЕ ЗаказПокупателя.Транзит
	             |					И ЗаказПокупателя.ВводитьТолькоПеремещение = &ВводитьТолькоПеремещение
				 //++++ исключение всех заказов, которые уже есть в заданиях на отгрузку (или перемещениях!)...
				 |		И НЕ ЗаказПокупателя В (выбрать различные ЗаказПокупателя из ВТ_ЗаказыУжеГрузятся)
				 
				 |		//отборПоДатеОтгрузки    И ЗаказПокупателя.ДатаОтгрузки = &ДатаОтгрузки1
				 |		//отборПоПроверенным    И ( ЗаказПокупателя.Комментарий подобно (&Проверен)  или ЗаказПокупателя.Комментарий подобно (&Проверен1) или ЗаказПокупателя.Комментарий подобно (&Проверен2) )

	             |					И ЗаказПокупателя.Проверен) КАК ЗаказыПокупателейОстатки
				 |) КАК А
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	А.ЗаказПокупателя, А.Менеджер 
	             |
	             |УПОРЯДОЧИТЬ ПО
				 //Контрагент 1
	             |	А.Менеджер,
	             |	ВЫРАЗИТЬ(А.ЗаказПокупателя.АдресДоставки КАК СТРОКА(1000));
				 |Уничтожить ВТ_ЗаказыУжеГрузятся;";
				 
				 
	//отгрузки не более 14 дней... 		 
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня( мин( ?(ЭтотОбъект.Дата='00010101', ТекущаяДата(), ЭтотОбъект.Дата), ТекущаяДата() ))-14 * 86400 );
								 
	ДатаОтгрузки1 = '00010101';
	Если ВвестиДату( ДатаОтгрузки1, "Введите Дату отгрузки") Тогда
		Запрос.Текст=стрЗаменить(Запрос.Текст,	"//отборПоДатеОтгрузки", "");
		Запрос.УстановитьПараметр("ДатаОтгрузки1",ДатаОтгрузки1);
	КонецЕсли;
	
	Если Контрагент = справочники.Контрагенты.НайтиПоКоду("П000382") Тогда
		Запрос.Текст=стрЗаменить(Запрос.Текст,	"//отборПоПроверенным", "");
         Запрос.УстановитьПараметр("Проверен",  "%общ. заказ%"); //+++ 16.04.2015 только общие по направлениям?!
		 Запрос.УстановитьПараметр("Проверен1",  "%объединенный заказ:%");  //обычные объединения + 293, 295 обработки
         Запрос.УстановитьПараметр("Проверен2", "%Подтвержден;%"); //+++    //просто подтвержденный
	КонецЕсли;
		
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Запрос.УстановитьПараметр("ВводитьТолькоПеремещение",ВводитьТолькоПеремещение);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(Дата, ВидГраницы.Исключая) );
				 
	рез=Запрос.Выполнить();
	Выборка = рез.Выбрать();
	Пока Выборка.Следующий() Цикл
		 СтрокаЗаказПокупателя=ЗаказыПокупателей.Добавить();
		 ЗаполнитьЗначенияСвойств(СтрокаЗаказПокупателя,Выборка);
	 КонецЦикла;	
	 
	Предупреждение(?(Выборка.Количество()=0, "Не найдено ни одного заказа клиента",
	"Добавлено "+строка(Выборка.Количество())+" заказов клиента")
	+?(ДатаОтгрузки1='00010101',"без учета даты отгрузки!", 
	" на дату отгрузки "+формат(ДатаОтгрузки1,"ДЛФ=DD")  ) , 30);
	
КонецПроцедуры

Процедура ЗаказыПокупателейЗаказПокупателяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаЗаказы=ЭлементыФормы.ЗаказыПокупателей.ТекущиеДанные;
	Если НЕ СтрокаЗаказы.ЗаказПокупателя.пустая() Тогда
		
		Если СтрокаЗаказы.ЗаказПокупателя.транзит Тогда
			Сообщить("Задание на отгрузку - предназначено только Для нетранзитных заказов!", СтатусСообщения.Внимание);
			СтрокаЗаказы.Реализация = документы.РеализацияТоваровУслуг.ПустаяСсылка();
		КонецЕсли;	
		
		Если СтрокаЗаказы.Реализация <> документы.РеализацияТоваровУслуг.ПустаяСсылка() Тогда
			Если СтрокаЗаказы.Реализация.Сделка<>СтрокаЗаказы.ЗаказПокупателя Тогда // Если всё же это тот же самый заказ - не меняем!
			Предупреждение("Нельзя использовать ту же самую реализацию Для другого заказа!");	
			СтрокаЗаказы.Реализация = документы.РеализацияТоваровУслуг.ПустаяСсылка(); // после выбора заказа - всегда чистим реали
			
			Предупреждение("При изменении списка заказов - требуется полное перезаполнение Порядка отгрузки и списка Товаров!");	
			ГруппыСкладов.Очистить();
			ТабЗначРезерв.Строки.Очистить();
			Товары.Очистить();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
 
	ПолучитьАссортимент();
	ПересчетКоличестваИСуммПоЗаказам();

КонецПроцедуры

Процедура РассчитатьКоличествоПоЗаказуПоставщику(СтрокаЗаказаПоставщику)
	 Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
		|ЗаказПоставщику,
		|РАЗЛИЧНЫЕ Количество(Номенклатура) КоличествоПозиций,
		|СУММА(КоличествоОстаток) КоличествоШтук
		|ИЗ 	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику= &ЗаказПоставщику И ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ)
		|СГРУППИРОВАТЬ ПО ЗаказПоставщику";
	Запрос.УстановитьПараметр("ЗаказПоставщику",СтрокаЗаказаПоставщику.ЗаказПоставщику);
	Выборка=Запрос.Выполнить().Выбрать();
	Если  Выборка.Следующий() Тогда
		 ЗаполнитьЗначенияСвойств(СтрокаЗаказаПоставщику,Выборка);
	КонецЕсли;

КонецПроцедуры	

Процедура ЗаказыПоставщикамЗаказПоставщикуОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтрокаЗаказаПоставщику=ЭлементыФормы.ЗаказыПоставщикам.ТекущаяСтрока;
	Если НЕ ЗначениеНеЗаполнено(СтрокаЗаказаПоставщику.ЗаказПоставщику) Тогда
	 РассчитатьКоличествоПоЗаказуПоставщику(СтрокаЗаказаПоставщику);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаказыПоставщикамЗаказПоставщикуНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=ЛОЖЬ;
КонецПроцедуры

Процедура ЗаказыПокупателейЗаказПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	//СтандартнаяОбработка=ЛОЖЬ;
  Если НЕ ВводитьИтогиВручную Тогда	
		// Свертка заказов покупателей
		Если ЗаказыПокупателей.Количество()>0 Тогда
			ТаблицаЗаказыПокупателей=ЗаказыПокупателей.Выгрузить();
			ТаблицаЗаказыПокупателей.Свернуть("ЗаказПокупателя");
			Если ТаблицаЗаказыПокупателей.Количество() <> ЗаказыПокупателей.Количество() Тогда
				ТекстВопроса = "В таблице Заказов покупателей - есть повторяющиеся заказы. Количество рассчитается неверно.";
				Предупреждение(ТекстВопроса );
			КонецЕсли;
		КонецЕсли;	
				
		ПолучитьАссортимент();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельТовары1ЗаполнитьЗаказамиПоставщику(Кнопка)
	 	Если ЗаказыПоставщикам.Количество()>0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		ЗаказыПоставщикам.Очистить();
	КонецЕсли;	

	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
		|ЗаказПоставщику,
		|РАЗЛИЧНЫЕ Количество(Номенклатура) КоличествоПозиций,
		|СУММА(КоличествоОстаток) КоличествоШтук
		|ИЗ 	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ДоговорКонтрагента.Владелец= &Контрагент И ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ)
		|СГРУППИРОВАТЬ ПО ЗаказПоставщику";
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		 СтрокаЗаказПоставщику=ЗаказыПоставщикам.Добавить();
		 ЗаполнитьЗначенияСвойств(СтрокаЗаказПоставщику,Выборка);
	КонецЦикла;	

	
КонецПроцедуры

Процедура ЗаказыПоставщикамПриПолученииДанных(Элемент, ОформленияСтрок)
	// Свертка заказов поставщику
		Если ЗаказыПоставщикам.Количество()>0 Тогда
			ТаблицаЗаказыПоставщикам=ЗаказыПоставщикам.Выгрузить();
			ТаблицаЗаказыПоставщикам.Свернуть("ЗаказПоставщику");
			Если ТаблицаЗаказыПоставщикам.Количество() <> ЗаказыПоставщикам.Количество() Тогда
				ТекстВопроса = "В таблице Заказов поставщику - есть повторяющиеся заказы. Количество рассчитается неверно.";
				Предупреждение(ТекстВопроса );
			КонецЕсли;
		КонецЕсли;	
		
	Для Каждого Строка Из ОформленияСтрок Цикл
		Если Не ЗначениеНеЗаполнено(Строка.ДанныеСтроки.ЗаказПоставщику) Тогда
			Строка.Ячейки.Контрагент.ОтображатьТекст=Истина;
			Строка.Ячейки.Контрагент.Текст=Строка(Строка.ДанныеСтроки.ЗаказПоставщику.Контрагент);
		КонецЕсли;
	КонецЦикла;

	
КонецПроцедуры

Процедура ВводитьКонтрагентаВручнуюПриИзменении(Элемент)
	
	Если ВводитьКонтрагентаВручную Тогда
		Контрагент="";
	Иначе
		Контрагент=Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

////=======Основная Процедура создания реализаций / вн.заказов-> перемещений ============================
Процедура КоманднаяПанельТоварыСоздатьРеализацию(Кнопка)
	
	Если ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Приход Тогда
		Предупреждение("""Создание реализаций"" - предназначено только Для Вида операции - Расход!");
		Возврат;
	КонецЕсли;
	
	Если Товары.Количество() = 0 Тогда
		Сообщить("Таблица товаров еще не заполнена!", СтатусСообщения.Важное);
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Товары;
		Возврат;
	КонецЕсли;
	
	Если Товары.Итог("Количество")=0 Тогда
		Сообщить("В таблице товаров: Количество отгружено - не заполнено!", СтатусСообщения.Важное);
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Товары;
		Возврат;
	КонецЕсли;
	
	Если ГруппыСкладов.Количество()=0 Тогда
		Сообщить("Таблица ""Порядок отгрузки"" - еще не заполнена!", СтатусСообщения.Важное);
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ГруппыСкладов;
		Возврат;
	КонецЕсли;
	
	Если ГруппыСкладов.Итог("Приоритет")=0 Тогда
		Сообщить("Не выбран порядок в таблице ""Порядок отгрузки""!", СтатусСообщения.Важное);
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ГруппыСкладов;
		Возврат;
	КонецЕсли;

	 Если Товары.Итог("КоличествоЗаказано")<>ГруппыСкладов.Итог("КоличествоЗаказано") Тогда
		  Предупреждение("Несоответствие количества заказанного товара
		  				  |в таблицах ""Порядок отгрузки"" и ""Товары""!
						  |Выполните перезаполнение товаров по порядку отгрузки.");
		  ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ГруппыСкладов;
		  Возврат;
	  КонецЕсли;
	  
	  Если ЗаявкиНаБрак.Количество()>0 тогда
			Ответ = Вопрос("В задании есть рекламационный товар в таблице ""Заявки на брак"",
			| если этот товар был перемещен, тогда нуно обязательно заполнить колонку ""Перемещено"",
			| заполнить ее сейчас?", РежимДиалогаВопрос.ДаНет);
			Если (Ответ = КодВозвратаДиалога.да) Тогда
				ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Получить(7);     
				ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ТекущаяСтраница;
				ТекущаяСтраница2 = ЭлементыФормы.панель1.Страницы.Получить(1);     
				ЭлементыФормы.панель1.ТекущаяСтраница = ТекущаяСтраница2;
				Возврат;
			КонецЕсли;
	  КонецЕсли;
	
	Если естьРеализации(Истина) Тогда
		Сообщить("Перед заполнением реализаций - выполните Отмену проведения документов!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	//+++ 08.10.2014
	Если СокрЛП(ЭтотОбъект.ТелефонВодителя)="" или СокрЛП(ЭтотОбъект.Водитель)="" Тогда 
	Предупреждение("Заполните обязательные поля - Фамилия и Телефон водителя!
				   |Создавать реализации/перемещения без этого поля - нельзя!",60);
		Возврат;
	КонецЕсли;	

	//+++ 11.03.2016 - проверка подразделения
	для каждого стр1 из ЗаказыПокупателей цикл
		если стр1.ЗаказПокупателя.Подразделение <> ЭтотОбъект.Подразделение тогда
			Предупреждение("Подразделение документа: "+строка(стр1.ЗаказПокупателя)+" 
			|отличается от подразделения Документа: "+строка(ЭтотОбъект.Подразделение)+"
			|Формирование реализаций отменено!", 30);
		Возврат;
		КонецЕсли;	
	КонецЦикла;		
		
	//13.09.2016 - 
	Если ЭтаФорма.Модифицированность Тогда
	    //+++ 26.05.2017 ОШИБКА !	
		//ЭтотОбъект.Записать(); //принудительно!  Для проведенного документа - перезаполняется Резерв!
	   фл = ЗаписатьВФорме(РежимЗаписиДокумента.Запись);
	   Если фл=ложь тогда
		   Предупреждение("Не удалось записать документ!",30);
		   возврат;
	   иначе ЭтаФорма.Модифицированность = Ложь;
	   КонецЕсли;		   
	КонецЕсли;
		
	Если НЕ СоздаватьПеремещенияКриал Тогда  //+++ 14.05.2013 сначала отменим проведение всех перемещений
	//	ПересчетКоличестваИСуммПоЗаказам();
		ВыполнитьДопПеремещениеКриал(ЭтотОбъект);
	КонецЕсли;
	
//--------------Виртуальная таблица значений по факт. количеству------------------------
	ТЗОтгружено = Новый ТаблицаЗначений;
	ТЗОтгружено.Колонки.Добавить("Номенклатура");
	ТЗОтгружено.Колонки.Добавить("Количество");
	ТЗОтгружено.Колонки.Добавить("Склад");
	//--------------Виртуальная таблица значений по факт. количеству------------------------
	ТЗОтгруженоАХ = ТЗОтгружено.Скопировать();
	ТЗОтгруженоАХ.Колонки.Добавить("АдресХранения");
	ТЗОтгруженоАХ.Колонки.Добавить("Порядок");
	
//===============================================Главная таблица отгруженного товара=================================	
	Для Каждого Строка Из Товары Цикл
		Если Строка.Количество > 0 Тогда
			НоваяСтрока = ТЗОтгружено.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, строка);
			// 5000 и любой склад с Адресным хранением (не Строка.склад.пустая() так как в запросе такое исключаем!)
			Если НЕ Строка.склад.ЭтоГруппа и Строка.склад.АдресноеХранение Тогда  
				НоваяСтрокаАХ = ТЗОтгруженоАХ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаАХ, строка);
				НоваяСтрокаАХ.Порядок = НоваяСтрокаАХ.АдресХранения.Порядок;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;           
	//группировка по адресам хранения 5000, 8000, Ангары...
	//Исключение повторения пары: номенклатура - склад
	ТЗОтгружено.Свернуть("Номенклатура, Склад", "Количество");
	ТЗОтгруженоАХ.Сортировать("Порядок"); //сначала 5000 потом 8000 //+++31.03.2014
	
//--------------Виртуальная таблица значений по одному заказу!------------------------
	ТЗЗаказано = Новый ТаблицаЗначений;
	ТЗЗаказано.Колонки.Добавить("Номенклатура");
	ТЗЗаказано.Колонки.Добавить("Количество");
	ТЗЗаказано.Колонки.Добавить("Цена");
	ТЗЗаказано.Колонки.Добавить("СтавкаНДС");
	// построим таблицу из регистра по заказам
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ТЧЗаказы.НомерСтроки КАК НомерСтроки,
		               |	ТЧЗаказы.ЗаказПокупателя КАК ЗаказПокупателя,
		               |	ТЧЗаказы.Реализация КАК Реализация
		               |ПОМЕСТИТЬ ВТ_Заказы
		               |ИЗ
		               |	&ТЧЗаказыПокупателей КАК ТЧЗаказы
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТЧЗаказыПокупателей.НомерСтроки КАК НомерСтрокиЗаказа,
		               |	ТЧЗаказыПокупателей.ЗаказПокупателя КАК ЗаказПокупателя,
		               |	ТЧЗаказыПокупателей.Реализация,
					   //22.01.2016 - изменен порядок связки
		               |	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
		               |	ЕСТЬNULL(РезервНаСкладахОстатки.Количество, 0) КАК Количество,
		               |	ВЫБОР
		               |		КОГДА ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) = 0
		               |			ТОГДА 0
		               |		ИНАЧЕ ЕСТЬNULL(ЗаказыПокупателейОстатки.СуммаВзаиморасчетовОстаток, 0) / ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0)
		               |	КОНЕЦ КАК Цена
		               |ИЗ
		               |	ВТ_Заказы КАК ТЧЗаказыПокупателей
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(
		               |				,
		               |				ЗаказПокупателя В
		               |					(ВЫБРАТЬ
		               |						ВТ_Заказы.ЗаказПокупателя
		               |					ИЗ
		               |						ВТ_Заказы)) КАК ЗаказыПокупателейОстатки
		               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |				РезервНаСкладах.ЗаказПокупателя КАК ЗаказПокупателя,
		               |				РезервНаСкладах.Номенклатура КАК Номенклатура,
		               |				СУММА(РезервНаСкладах.Количество) КАК Количество
		               |			ИЗ
		               |				РегистрНакопления.РезервНаСкладах КАК РезервНаСкладах
		               |			ГДЕ
		               |				РезервНаСкладах.Регистратор = &Регистратор
		               |			
		               |			СГРУППИРОВАТЬ ПО
		               |				РезервНаСкладах.ЗаказПокупателя,
		               |				РезервНаСкладах.Номенклатура) КАК РезервНаСкладахОстатки
		               |			ПО ЗаказыПокупателейОстатки.ЗаказПокупателя = РезервНаСкладахОстатки.ЗаказПокупателя
		               |				И ЗаказыПокупателейОстатки.Номенклатура = РезервНаСкладахОстатки.Номенклатура
		               |		ПО ТЧЗаказыПокупателей.ЗаказПокупателя = ЗаказыПокупателейОстатки.ЗаказПокупателя
		               |ГДЕ
		               |	РезервНаСкладахОстатки.Количество > 0
		               |	И ЗаказыПокупателейОстатки.КоличествоОстаток > 0
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	НомерСтрокиЗаказа
		               |ИТОГИ
		               |	МИНИМУМ(НомерСтрокиЗаказа),
		               |	СУММА(Количество)
		               |ПО
		               |	ЗаказПокупателя
		               |АВТОУПОРЯДОЧИВАНИЕ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_Заказы";
					   
		Запрос.УстановитьПараметр("Регистратор", ссылка );//23.12.2015  - Заказы берутся из резерва по этому заданию!
			 
		//+++ 14.07.2014 - отдельный приоритет Для ФормулаАвтоПлюс  // анализ в Запросе - невозможен!
		ТЧЗаказыПокупателей = ЗаказыПокупателей.Выгрузить();
		//выкл 01.07.2015
		//ФормулаАвтоПлюс = справочники.Контрагенты.НайтиПоКоду("92797");
		// Для каждого стр1 из ТЧЗаказыПокупателей Цикл
		//	 Если стр1.ЗаказПокупателя.Контрагент = ФормулаАвтоПлюс Тогда
		//		 стр1.НомерСтроки = 0;     //высший приоритет при отгрузке!
		//	 КонецЕсли;
		// КонецЦикла;	
		//ТЧЗаказыПокупателей.Свернуть("ЗаказПокупателя, Реализация", "НомерСтроки"); // 1 заказ не может быть 2 раза?!
		Запрос.УстановитьПараметр("ТЧЗаказыПокупателей", ТЧЗаказыПокупателей );
		//+++)
		
		//Запрос.УстановитьПараметр("МоментВремени",Новый граница(Дата, ВидГраницы.Исключая));
		результат = Запрос.Выполнить(); // основной запрос выполяется здесь сразу по всем заказам - получаем ЗАКАЗАННУЮ Номенклатуру
		
		СтрокаЗаказа = результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
		
//-------------------------------------Основной Цикл по Заказам---------------------------------------------------		
     пока СтрокаЗаказа.Следующий() Цикл
	     НовыйДок2 = Неопределено;
		 ОбработкаПрерыванияПользователя();
		 //проверим на наличие товаров, заказанных в Заказе
		 
		 //+++ 28.04.2015 чтобы не делать еще 1 запрос к базе
		//	 СтрокаЗаказаРеализация = ЗаказыПокупателей.Найти(СтрокаЗаказа.ЗаказПокупателя, "ЗаказПокупателя").Реализация;
			 СтрокаЗаказаРеализация = СтрокаЗаказа.Реализация;
			 флНетРеализации = (СтрокаЗаказаРеализация = Неопределено или СтрокаЗаказаРеализация = Null или СтрокаЗаказаРеализация.Пустая() );
		
		 Если СтрокаЗаказа.Количество<=0 и флНетРеализации Тогда  // нет товаров Для отгрузок и нет реализации
			 продолжить;
		 КонецЕсли;
		 
		СтрокаТЧЗаказа = СтрокаЗаказа.Выбрать();  // строка Номенклатуры... 
		
		ТЗЗаказано.Очистить();
		пока СтрокаТЧЗаказа.Следующий() Цикл
			СтрокаТЗЗаказано = ТЗЗаказано.Добавить();
			ЗаполнитьЗначенияСвойств( СтрокаТЗЗаказано, СтрокаТЧЗаказа );
		КонецЦикла;	
		
		//Плотников. 27.02.2017=================
		ТЗЗаказаноБонусы = ТЗЗаказано.Скопировать();
		ТЗЗаказаноБонусы.Очистить();
		ТЗЗаказаноБонусы.Колонки.Добавить("СтатьяЗатрат");
		
		Если СтрокаЗаказа.ЗаказПокупателя.Бонусы.Количество()>0 и не СтрокаЗаказа.ЗаказПокупателя.ВводитьТолькоПеремещение Тогда
			
			РазбитьТовары(ТЗЗаказано,ТЗЗаказаноБонусы,СтрокаЗаказа.ЗаказПокупателя);
			
		КонецЕсли;
		//Плотников. 27.02.2017=================
//-----------------проверка: Есть реализация, а заказанных товаров - нет---------------------------------------
		Если НетНиОдногоТовараЗаказаВОтгрузке(ТЗЗаказано, ТЗОтгружено) Тогда
			 Если НЕ флНетРеализации Тогда
				НовыйДок = СтрокаЗаказаРеализация.ПолучитьОбъект();
				Попытка
					НовыйДок.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		 			НовыйДок.ПометкаУдаления = Истина;
					НовыйДок.Товары.Очистить();
					
					НовыйДок.Записать();
					сообщить(строка(СтрокаЗаказа.НомерСтрокиЗаказа)+") - удален документ: "+строка(НовыйДок), СтатусСообщения.ОченьВажное);
				Исключение
					сообщить(строка(СтрокаЗаказа.НомерСтрокиЗаказа)+") - Ошибка при удалении: "+строка(НовыйДок)+" : "+ОписаниеОшибки(), СтатусСообщения.Внимание);
				КонецПопытки;
			 	продолжить;
			  КонецЕсли;	
		КонецЕсли;	
		
	  //------------Основной Цикл по факт количеству (типа ФИФО - очередь по Заказам)------------------------
	  
	  //+++ 28.04.2015 - тоже самое условие.... приоритет заказа выше 1-го заказа !!!
		СтрокаЗаказа1   = ЗаказыПокупателей.Найти(СтрокаЗаказа.ЗаказПокупателя, "ЗаказПокупателя");  
		флНетРеализации = (СтрокаЗаказа1.Реализация=Неопределено или СтрокаЗаказа1.Реализация.пустая()); //+++ 30.04.2015
		//тип документа может быть другим!
		Если  флНетРеализации Тогда
			
			Если СтрокаЗаказа.ЗаказПокупателя.ВводитьТолькоПеремещение Тогда //!!! перемещения !!!	
				НовыйДок = Документы.ПеремещениеТоваров.СоздатьДокумент();
			ИначеЕсли СтрокаЗаказа.ЗаказПокупателя.ТипЗаказа = 12 Тогда    //Реклама
				НовыйДок = Документы.СписаниеТоваров.СоздатьДокумент();	
			Иначе
				НовыйДок = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			КонецЕсли;
			
		Иначе//реализация уже есть
			СтрокаЗаказаРеализация = СтрокаЗаказа1.Реализация;  //+++ 30.04.2015
			НовыйДок = СтрокаЗаказаРеализация.ПолучитьОбъект();
			НовыйДок.Товары.Очистить();
			НовыйДок.ТоварыАдресноеХранение.Очистить();
			НовыйДок.ПометкаУдаления = Ложь; // отмена удаления... 
		КонецЕсли;
		
		флНетСписания = (СтрокаЗаказа1.Списание=Неопределено или СтрокаЗаказа1.Списание.пустая());
		Если  флНетСписания и ТЗЗаказаноБонусы.Количество()>0 Тогда 
			НовыйДок2 = Документы.ТребованиеНакладная.СоздатьДокумент();				
		ИначеЕсли ТЗЗаказаноБонусы.Количество()>0 Тогда //реализация уже есть
			СтрокаЗаказаСписание = СтрокаЗаказа1.Списание;  //+++ 30.04.2015
			НовыйДок2 = СтрокаЗаказаСписание.ПолучитьОбъект();
			НовыйДок2.Материалы.Очистить();
			НовыйДок2.ТоварыАдресноеХранение.Очистить();
			НовыйДок2.ПометкаУдаления = Ложь; // отмена удаления... 
		КонецЕсли;
		
		//+++ основная Процедура заполнения реализации и уменьшения по ФИФО количество Отгружено в Табл.значения ТЗОтгружено +++
		Если СтрокаЗаказа.ЗаказПокупателя.ВводитьТолькоПеремещение Тогда  //!!! перемещения !!!
			Если СкладПолучатель.Пустая() Тогда
				сообщить("Для заказа на перемещение: "+строка(СтрокаЗаказа.ЗаказПокупателя)+" - не заполнено поле ""Склад получатель""!");
			КонецЕсли; 
			ОбработкаЗаполненияПеремещенияИзЗадания(НовыйДок, СтрокаЗаказа.ЗаказПокупателя, ЭтотОбъект, ТЗЗаказано, ТЗОтгружено, ТЗОтгруженоАХ); //11.03.2016 Ссылка >> ЭтотОбъект
			//Плотников. 27.02.2017=================
			//Если НовыйДок2 <> Неопределено Тогда
			//	ОбработкаЗаполненияСписанияИзЗадания(НовыйДок2, СтрокаЗаказа.ЗаказПокупателя, ЭтотОбъект, ТЗЗаказаноБонусы, ТЗОтгружено, ТЗОтгруженоАХ); //11.03.2016 Ссылка >> ЭтотОбъект
			//КонецЕсли;
			//Плотников. 27.02.2017=================
		ИначеЕсли СтрокаЗаказа.ЗаказПокупателя.ТипЗаказа = 12 Тогда	
		    ОбработкаЗаполненияСписанияИзЗадания(НовыйДок, СтрокаЗаказа.ЗаказПокупателя, ЭтотОбъект, ТЗЗаказано, ТЗОтгружено, ТЗОтгруженоАХ);//11.03.2016 Ссылка >> ЭтотОбъект
		Иначе
			ОбработкаЗаполненияИзЗадания(НовыйДок, СтрокаЗаказа.ЗаказПокупателя, ЭтотОбъект, ТЗЗаказано, ТЗОтгружено, ТЗОтгруженоАХ);//11.03.2016 Ссылка >> ЭтотОбъект
			
			//Плотников. 27.02.2017=================
			Если НовыйДок2 <> Неопределено Тогда
				ОбработкаЗаполненияТребованияИзЗадания(НовыйДок2, СтрокаЗаказа.ЗаказПокупателя, ЭтотОбъект, ТЗЗаказаноБонусы, ТЗОтгружено, ТЗОтгруженоАХ); 
			КонецЕсли;
			//Плотников. 27.02.2017=================
			
			//+++( 22.03.2016 ----------Услуги-------------
			Если СтрокаЗаказа.ЗаказПокупателя.Услуги.Количество()>0 тогда
				НовыйДок.Услуги.Очистить();
				для каждого стр1 из СтрокаЗаказа.ЗаказПокупателя.Услуги цикл
					//13.03.17 Смирнов, Артем попросил добавлять все услуги
					Если НадоДобавлятьУслугу(стр1.Содержание,НовыйДок.Контрагент) тогда //14.12.16 Смирнов проверяем, если заказ отменен, услугу не добавляем
						//Миронычев
						если Подразделение = Справочники.Подразделения.НайтиПоКоду("00005") ТОГДА
							Если ДобавитьУслугу(стр1.Содержание, стр1.Номенклатура) тогда
								стр2 = НовыйДок.Услуги.Добавить();
								ЗаполнитьЗначенияСвойств(стр2, стр1);
							КонецЕсли;
						Иначе
							стр2 = НовыйДок.Услуги.Добавить();
							ЗаполнитьЗначенияСвойств(стр2, стр1);
						КонецЕсли;
					//КонецМиронычев

					КонецЕсли;
				КонецЦикла;
				Сообщить("Добавлены услуги по документу: "+строка(СтрокаЗаказа.ЗаказПокупателя));
			КонецЕсли;
			//+++)
			
		КонецЕсли;
		
		
		Попытка
			ОбработкаПрерыванияПользователя();
			
			Если НовыйДок2 <> Неопределено и НовыйДок2.Материалы.Количество() > 0 тогда
				НовыйДок2.Записать();
				СтрокаЗаказаТЧ = ЗаказыПокупателей.Найти(СтрокаЗаказа.ЗаказПокупателя,"ЗаказПокупателя"); //+++ 14.07.2014
				СтрокаЗаказаТЧ.Списание = НовыйДок2.Ссылка;
				СтрокаЗаказаТЧ.КоличествоШтукОтгружено    = НовыйДок2.Ссылка.Материалы.Итог("Количество");
			КонецЕсли;
			
			Если НовыйДок.Товары.Количество()=0 и НовыйДок.ТоварыАдресноеХранение.Количество()=0 Тогда
				Если флНетРеализации Тогда
					сообщить(строка(СтрокаЗаказа.НомерСтрокиЗаказа)+") - нет товаров на складах Для отгрузки по заказу: "+строка(СтрокаЗаказа.ЗаказПокупателя), СтатусСообщения.Важное);
					продолжить;
			 	Иначе// уже есть документ, его надо распровести и пометить на удаление
			  		НовыйДок.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					НовыйДок.ПометкаУдаления = Истина;
			 	КонецЕсли;
			КонецЕсли;
			
			//25.02.2016 --- всегда так для реализаций
			Если ЭтотОбъект.Подразделение.ОбособленноеПодразделение
				и типЗнч(НовыйДок) = тип("ДокументОбъект.РеализацияТоваровУслуг") тогда
				НовыйДок.Подразделение    = ЭтотОбъект.Подразделение;
				НовыйДок.Грузоотправитель = ЭтотОбъект.Подразделение.Контрагент;
			//НовыйДок.Склад 			  = ЭтотОбъект.Подразделение.Склад; 
				если СокрЛП(НовыйДок.Номер)="" тогда
				НовыйДок.УстановитьНовыйНомер(НовыйДок.Подразделение.ПрефиксИБ);
				КонецЕсли;
			КонецЕсли;
			
			НовыйДок.Записать();
					
			СтрокаЗаказаТЧ = ЗаказыПокупателей.Найти(СтрокаЗаказа.ЗаказПокупателя,"ЗаказПокупателя"); //+++ 14.07.2014
 			СтрокаЗаказаТЧ.Реализация = НовыйДок.Ссылка;
						
			СтрокаЗаказаТЧ.КоличествоПозицийОтгружено = НовыйДок.Ссылка.Товары.Количество();
			СтрокаЗаказаТЧ.КоличествоШтукОтгружено    = НовыйДок.Ссылка.Товары.Итог("Количество") + ?(НовыйДок2 <> Неопределено,НовыйДок2.Ссылка.Материалы.Итог("Количество"),0);
			
			//+++ 05.03.2014
			Если ТипЗнч(НовыйДок.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				Если НовыйДок.Контрагент = справочники.Контрагенты.НайтиПоКоду("92797") Тогда   // ФормулаАвтоПлюс
					Предупреждение(" ВНИМАНИЕ! 
					|по реализации № "+строка(НовыйДок.Номер)+" - грузится "+строка(НовыйДок.Контрагент)+"
					|Печатать ТОЛЬКО 1 комплект документов Для подписи у водителя!",10);
				КонецЕсли;	
			КонецЕсли;
			
			сообщить(строка(СтрокаЗаказа.НомерСтрокиЗаказа)+") - "+?(НовыйДок.ПометкаУдаления, "Удален", ?( флНетРеализации,"записан Новый","перезаписан существующий"))+" документ : "+строка(НовыйДок), СтатусСообщения.Информация);
		Исключение
			сообщить(строка(СтрокаЗаказа.НомерСтрокиЗаказа)+") - Ошибка при записи: "+строка(НовыйДок)+" : "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
		КонецПопытки;
		
	КонецЦикла;
	
	// Пермещение по ОТХ для брака ======================================================================================
	
	Если ЗаявкиНаБрак.Количество()>0 Тогда
		
		Брак = ЗаявкиНаБрак.Выгрузить();
		Брак.Свернуть("Заявка,Регистратор,Контрагент,ДоговорКонтрагента");
		
		Для каждого стр1 из брак Цикл
			врем = ЗаявкиНаБрак.Выгрузить();
			Отбор = Новый Структура;
			Отбор.Вставить("Заявка",стр1.Заявка);
			Отбор.Вставить("Регистратор",стр1.Регистратор);
			Отбор.Вставить("Контрагент",стр1.Контрагент);
			Отбор.Вставить("ДоговорКонтрагента",стр1.ДоговорКонтрагента);
			
			строкиПоЗаявке = врем.Скопировать(Отбор);
			
			операция = Документы.ОперацияПоОтветственномуХранению.СоздатьДокумент();
			
			операция.Дата = ТекущаяДата();
			если стр1.Заявка.НаПеремещение Тогда
				операция.ВидОперации = Перечисления.ВидыОперацийПоОтветственномуХранению.ПеремещениеМеждуСкладами;
				подр = Новый Соответствие;
				подр.Вставить(Справочники.Контрагенты.НайтиПоКоду("П000835"),Справочники.Склады.НайтиПоКоду("00692")); //Питер
				подр.Вставить(Справочники.Контрагенты.НайтиПоКоду("94036"),Справочники.Склады.НайтиПоКоду("00962"));   //Екат
				подр.Вставить(Справочники.Контрагенты.НайтиПоКоду("93870"),Справочники.Склады.НайтиПоКоду("01366"));   //МСК
				подр.Вставить(Справочники.Контрагенты.НайтиПоКоду("93187"),Справочники.Склады.НайтиПоКоду("00634"));   //Ростов
				
				операция.СкладПолучатель   = подр.Получить(стр1.Контрагент);
				операция.Контрагент = стр1.ДоговорКонтрагента.Владелец;
			иначе
				операция.ВидОперации = Перечисления.ВидыОперацийПоОтветственномуХранению.Списание;
				операция.Контрагент = стр1.Контрагент;
			КонецЕсли;
			
			операция.ДоговорКонтрагента = стр1.ДоговорКонтрагента;
			операция.Организация = Справочники.Организации.НайтиПоКоду("00001");
			операция.Комментарий = "Сформировано автоматически на основании " + Строка(Ссылка);
			операция.ДокументОснование = стр1.Регистратор;
			
			
			операция.Подразделение = Подразделение;
			
			Для Каждого строкаОснование ИЗ строкиПоЗаявке Цикл
				Если строкаОснование.КоличествоПеремещено > 0 Тогда
					НоваяСтрока=операция.Товары.Добавить();
					НоваяСтрока.Номенклатура = строкаОснование.Номенклатура;
					НоваяСтрока.Количество = строкаОснование.КоличествоПеремещено;
					НоваяСтрока.Склад = строкаОснование.Склад;
				КонецЕсли;
			КонецЦикла;
			
			Если операция.Товары.Количество() = 0 Тогда
				Продолжить;	
			КонецЕсли;
			
			
			Попытка
				операция.Записать(РежимЗаписиДокумента.Проведение);
				
			Исключение
				Сообщить("Не удалось выполнить списание с ОТХ, документ не проведен", СтатусСообщения.Внимание);
				операция = неопределено;//15.05.2017
			КонецПопытки;
			
			СтрокиДобавитьПеремещение = ЗаявкиНаБрак.НайтиСтроки(Отбор);
			
			для каждого стр3 из СтрокиДобавитьПеремещение Цикл
				стр3.ДокументОтгрузки = операция.Ссылка;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// ==================================================================================================================

	
	//-------------------------------------------------------------------------------------------------------------------	
	ПересчетКоличестваИСуммПоЗаказам();

	Если СоздаватьПеремещенияКриал Тогда //+++ 14.05.2013 после создания реализаций - делаем доп.перемещения!
		ВыполнитьДопПеремещениеКриал(ЭтотОбъект);
	КонецЕсли;

	Попытка
		//+++ 26.05.2017замена записи объекта на запись из формы !	
		//ЭтотОбъект.Записать(); 
	   фл = ЗаписатьВФорме(РежимЗаписиДокумента.Запись);
	   Если фл=ложь тогда
		   Предупреждение("Не удалось записать изменения в текущий документ!",30);
		   возврат;
	  иначе ЭтаФорма.Модифицированность = Ложь;
	  КонецЕсли;		
		
		сообщить(" Заполнение реализаций - успешно завершено. Нажмите [Провести] Для списания товара!", СтатусСообщения.Информация);
		сообщить(" ");
	Исключение
		сообщить(" Ошибка при записи текущего документа! : "+ОписаниеОшибки(), СтатусСообщения.Внимание);
		сообщить(" ");
	КонецПопытки;
	
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ЗаказыПокупателей;
	флКнопкиПровести(Истина);
	
	//Тариф = ?(Тариф=0, 2, Тариф); //+++ тариф отгрузки по машине 05.04.2018 - НЕ МЕНЯЕМ!
	
	//------------------Инфо поездки-------------------------	
	//ОбновитьКомментарии();//+++ 23.04.2015   только комментарий
	
	//+++ 24.04.2015 - ВСЕ ПОЛЯ ОБНОВЛЯЮТСЯ 
	//ИнформацияПоПроезду.Очистить();//28.04.2015 - заново ПОЛНОСТЬЮ! НЕЛЬЗЯ!
	Если НЕ Подразделение.ОбособленноеПодразделение тогда //30.11.2015 - НЕТ транспорта по филиалам
 		ПолучитьИзЗаказовНажатие(Неопределено);
		кнЗаписатьИнфуПоПроездуНажатие(Неопределено);
	КонецЕсли;
	
// Создадим задания водителю	 на сбор налички
    //информациюПоПроезду обновили 2 строчки вверх, берем все от туда.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнформацияПоПроезду.Заказ,
	|	ИнформацияПоПроезду.Реализация,
	|	СУММА(ИнформацияПоПроезду.ДоставкаНал) КАК Транспортные,
	|	СРЕДНЕЕ(ВЫБОР
	|			КОГДА ИнформацияПоПроезду.Реализация.ДоговорКонтрагента.Наименование ПОДОБНО ""%*%""
	|				ТОГДА ИнформацияПоПроезду.Реализация.СуммаДокумента
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаТекущая,
	|	ИнформацияПоПроезду.Заказ.НеЗабиратьОплатуПриВыгрузке,
	|	ИнформацияПоПроезду.Заказ.ДолгЗаПредыдущиеОтгрузки КАК ЗаказДолг,
	|	ИнформацияПоПроезду.Задание,
	|	МАКСИМУМ(ИнформацияПоПроезду.Реализация.Дата) КАК РеализацияДата
	|ПОМЕСТИТЬ ДанныеПоНаличке
	|ИЗ
	|	РегистрСведений.ИнформацияПоПроезду КАК ИнформацияПоПроезду
	|ГДЕ
	|	ИнформацияПоПроезду.Задание = &Задание
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнформацияПоПроезду.Заказ,
	|	ИнформацияПоПроезду.Заказ.НеЗабиратьОплатуПриВыгрузке,
	|	ИнформацияПоПроезду.Заказ.ДолгЗаПредыдущиеОтгрузки,
	|	ИнформацияПоПроезду.Задание,
	|	ИнформацияПоПроезду.Реализация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПоНаличке.Заказ,
	|	ДанныеПоНаличке.Реализация,
	|	ДанныеПоНаличке.Транспортные,
	|	ДанныеПоНаличке.СуммаТекущая,
	|	ДанныеПоНаличке.ЗаказНеЗабиратьОплатуПриВыгрузке,
	|	ДанныеПоНаличке.ЗаказДолг,
	|	ЗаданиеВодителюНаПолучениеДенежныхСредств.Ссылка КАК Документ,
	|	ДанныеПоНаличке.РеализацияДата
	|ИЗ
	|	ДанныеПоНаличке КАК ДанныеПоНаличке
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаданиеВодителюНаПолучениеДенежныхСредств КАК ЗаданиеВодителюНаПолучениеДенежныхСредств
	|		ПО ДанныеПоНаличке.Заказ = ЗаданиеВодителюНаПолучениеДенежныхСредств.Заказ
	|			И ДанныеПоНаличке.Реализация = ЗаданиеВодителюНаПолучениеДенежныхСредств.Реализация
	|			И ДанныеПоНаличке.Задание = ЗаданиеВодителюНаПолучениеДенежныхСредств.ЗаданиеНаОтгрузку
	|ГДЕ
	|	НЕ ДанныеПоНаличке.Реализация ЕСТЬ NULL 
	|	И ДанныеПоНаличке.Заказ.СпособОтгрузки <> &СпособОтгрузки";
	
	Запрос.УстановитьПараметр("Задание", Ссылка);
	Запрос.УстановитьПараметр("СпособОтгрузки", Справочники.СпособыОтгрузкиТовара.НайтиПоКоду("10"));
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		если Выборка.СуммаТекущая+Выборка.Транспортные+Выборка.ЗаказДолг <> 0  Тогда
			Если Не ВодителюЗапрещенаИнкассация Тогда
				
				Если Выборка.Документ = Null Тогда
					док = Документы.ЗаданиеВодителюНаПолучениеДенежныхСредств.СоздатьДокумент();
					Док.Дата = Дата;
					Док.Водитель = Водитель;
					Док.ЗаданиеНаОтгрузку = ссылка;
					Док.Заказ = Выборка.Заказ;
					Док.Реализация = Выборка.Реализация;
					Док.СуммаПредыдущийДолг = Выборка.ЗаказДолг;
					Если выборка.ЗаказНеЗабиратьОплатуПриВыгрузке Тогда
						Док.Сумма =  0;
					иначе
						Док.Сумма =  Выборка.СуммаТекущая;
					конецЕсли;
					Док.СуммаТранспорт = Выборка.Транспортные;
					Док.Записать(РежимЗаписиДокумента.Проведение);
					ДокЗаказ = Выборка.Заказ.ПолучитьОбъект();
					ДокЗаказ.ДолгЗаПредыдущиеОтгрузки = 0;
					ДокЗаказ.записать(РежимЗаписиДокумента.Запись);
				иначеЕсли не Выполнено и НачалоДня(Выборка.РеализацияДата)=НачалоДня(ТекущаяДата()) Тогда 
					//перезаполним транспортные и сумму реализации
					Док = Выборка.Документ.получитьОбъект();
					Док.Сумма =  Выборка.СуммаТекущая;
					Док.СуммаТранспорт = Выборка.Транспортные;
					Док.Записать(РежимЗаписиДокумента.Проведение);
				конецЕсли;
			иначе	
			 задача = задачи.ЗадачиПользователя.СоздатьЗадачу();
			 Задача.Исполнитель = Выборка.Заказ.ДоговорКонтрагента.ОтветственноеЛицо;
			 задача.Товары.Очистить();
			 задача.НаСогласование = Ложь;
			 задача.Наименование = "Деньги по отгрузке за наличные не будут инкассированы водителем! "; 
			 задача.Описание ="Контрагент: "+Выборка.Заказ.Контрагент+"; Заказ "+Выборка.Заказ;	
			 задача.Объект = Выборка.Заказ;
			 задача.Дата 		    = ТекущаяДата();
			 задача.СрокИсполнения = КонецДня( ТекущаяДата() ); 	
			 задача.Оповещение     = истина;
			 задача.СрокОповещения = ТекущаяДата(); 
			 попытка
				 задача.Записать();
			 исключение
			 КонецПопытки;
 				
			конецЕсли;
			
		конецесли;
	КонецЦикла;
	
	
	   //поручения по прочим документам	
	   флЕстьРеализацииЗаСегодня=ложь; //26.05.2017
	   для каждого стр1 из ЗаказыПокупателей цикл
		   если ЗначениеЗаполнено(стр1.Реализация) тогда
	   		если НачалоДня(стр1.Реализация.Дата)=НачалоДня(ТекущаяДата()) тогда
	           флЕстьРеализацииЗаСегодня=Истина;
			   прервать;
		    конецЕсли;
		   конецЕсли;
	   КонецЦикла;
   
      Если не Выполнено и флЕстьРеализацииЗаСегодня Тогда 
		  
		список = Новый списокЗначений;	
		список.ЗагрузитьЗначения(ЗаказыПокупателей.ВыгрузитьКолонку("ЗаказПокупателя"));
		
		//-----------Установка Задания в записи УчетВходящихДокументов по Заказам----------------
		//наборЗаписей = регистрыСведений.УчетВходящихДокументов.СоздатьНаборЗаписей();
		//Для каждого ТекСтрока Из Список Цикл
		//	НаборЗаписей.Отбор.ЗаказПокупателя.Установить(ТекСтрока.Значение);    
		//	НаборЗаписей.Прочитать();
		//	Для каждого запись из НаборЗаписей цикл
		//		Запись.МаршрутныйЛист = Ссылка;
		//	КонецЦикла;
		//	наборЗаписей.Записать();
		//конецЦикла;	
        //------------------23.05.2017 - только по существующим записям S-блокирока!-------------------
		Запрос1 = Новый Запрос;
		Запрос1.Текст = "ВЫБРАТЬ * ИЗ РегистрСведений.УчетВходящихДокументов КАК УчетВходящихДокументов
						|ГДЕ УчетВходящихДокументов.ЗаказПокупателя В (&Список)";
		Запрос1.УстановитьПараметр("Список", Список);
		Выборка = Запрос1.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Запись = регистрыСведений.УчетВходящихДокументов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.МаршрутныйЛист = Ссылка;
		 	попытка
				Запись.Записать(Истина); //перезапись
			исключение
				сообщить("Не удалось записать в УчетВходящихДокументов по " + строка(Выборка.ЗаказПокупателя)+" текущий маршрутный лист! : "+ОписаниеОшибки(), СтатусСообщения.Внимание);
			КонецПопытки;	
		КонецЦикла;
		
	  конецЕсли;
	
		
	//запись заявок на возврат
	Для каждого стр из Обратки Цикл
		Если ТипЗнч(стр.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваров") Тогда
			Если стр.ДокументОснование <> Документы.ЗаявкаНаВозвратТоваров.ПустаяСсылка() Тогда
				ДокОбъект = Стр.ДокументОснование.ПолучитьОбъект();
				ДокОбъект.МаршрутныйЛист = Ссылка;
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			конецЕсли;
		конецЕсли;	
	конецЦикла;
	
 КонецПроцедуры


Функция НетНиОдногоТовараЗаказаВОтгрузке(ТЗЗаказано, ТЗОтгружено)
	
	рез = Истина;
	
	Для Каждого стр1 из ТЗЗаказано Цикл
		
		стр2 = ТЗОтгружено.Найти(стр1.Номенклатура, "Номенклатура");
		Если стр2 = Неопределено Тогда //НЕ НАШЛИ!
			продолжить;
		КонецЕсли;
		
		Если стр2.Количество>0 и стр1.Количество>0 Тогда
			рез = Ложь;
			прервать;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат рез;
	
КонецФункции	


//+++ из реализации! +++
//отдельно анализируем ТЗОтгружено и, Если склад.АдресноеХранение - то и ТЗОтгруженоАХ
Процедура ОбработкаЗаполненияИзЗадания(Док, Основание, Задание, ТЗЗаказано, ТЗОтгружено, ТЗОтгруженоАХ) 
	
	// Заполним реквизиты шапки по документу основанию.
	Док.Дата = ТекущаяДата();
	Док.ПунктРазгрузки = Основание.АдресдляТТН;//Основание.АдресДоставки; //Для ТТН и не переносится в Бухгалтерию
	
	Док.переработка    = Задание.переработка;	//+++ 24.04.2013
	Док.ВидПеревозки   = СокрЛП(Задание.ТелефонВодителя);//+++ 16.07.2013  Телефон водителя в текстовое поле ВидПеревозки!!!
	
	Док.Ответственный  = Основание.Ответственный;
	Док.Комментарий    = Основание.Комментарий + "
	|# Задание на отгрузку №"+сокрЛП(Задание.Номер)+" от "+строка(Задание.Дата)+" # ";
	
	Док.ОрганизацияДляПечати = Основание.ОрганизацияДляПечати;
	Док.ГрузоОтправитель = Основание.ГрузоОтправитель; 
	Док.ГрузоПолучатель  = Основание.ГрузоПолучатель;
	
	Док.Водитель = СокрЛП(Основание.КонтактноеЛицо.Наименование);
	
	Док.МаркаАвтомобиля     = Основание.МаркаАвтомобиля;
	Док.ГосНомерАвтомобиля  = Основание.ГосНомерАвтомобиля;
	Если ЗначениеЗаполнено(Основание.АвтомобильКонтрагента) Тогда
		Док.Автомобиль = Основание.АвтомобильКонтрагента;
	КонецЕсли;
	
	ИзОбработки = Ложь;
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнитьШапкуДокументаПоОснованию(Док, Основание);
	       //А.А. добавим доп. договор для Шинтрейда, если его нет.  01.09.15
	 		  Если Док.Договорконтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль Тогда
			     договорНДС = Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию("Договор НДС",Истина,,Док.Контрагент);
				Если договорНДС =Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
					договорНДС = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
					договорНДС.Организация = Док.Организация;
					ДоговорНДС.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль;
					договорНДС.Владелец = Док.Контрагент;
					ДоговорНДС.ОтветственноеЛицо = Док.Контрагент.ОсновнойМенеджерКонтрагента;
					ДоговорНДс.ВалютаВзаиморасчетов =Константы.ВалютаРегламентированногоУчета.Получить();
					ДоговорНДС.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
					ДоговорНДС.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам;
					ДоговорНДС.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.БезДополнительныхУсловий;
					ДоговорНДС.Номер = "НДС";
					ДоговорНДС.Наименование = "Договор НДС";
					ДоговорНДС.Записать();
				конецЕсли;
			конецЕсли;		
	//++++++++++++++ данные по водителю из ЭТОГО документа! +++++++++++++++++
	Док.Водитель 	   = Водитель;
	Док.ВодительскоеУдостоверение  = ВодительскоеУдостоверение;
	Док.МаркаАвтомобиля     = МаркаАвтомобиля;
	Док.ГосНомерАвтомобиля  = ГосНомерАвтомобиля;
	Док.МаркаПрицепа		= МаркаПрицепа;
	Док.ГосНомерПрицепа		= ГосНомерПрицепа;
		
	Док.Подразделение = ?(Основание.Подразделение.пустая(), Подразделение, Основание.Подразделение);
	Док.Перевозчик   = Перевозчик;
	Док.Заказчик 	 = Заказчик;
	
	Док.СуммаКомпенсацииТранспорта = Основание.СуммаКомпенсацииТранспорта; //+++ 13.11.2013 из Заказа >> в Реализацию...
	Док.БезНал= Основание.БезНал;

	Док.НомерДоверенности = НомерДоверенности;
	Док.ДатаДоверенности  = ДатаДоверенности;
	Док.ОрганизацияВыдавшаяДоверенность = ОрганизацияВыдавшаяДоверенность;
	Док.ФизЛицоДоверенности = ФизЛицоДоверенности;
	
  //  Если Док.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.НайтиПоКоду("Я0004") 
  //  	или Док.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль
  //  	или Док.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ФормулаАвтоПлюс
  //  	Тогда
  //  	Док.ЗаполнитьДанныеПоДоверенности();
  //  
  //КонецЕсли;	 
	
	
	
	Если НЕ ЗначениеЗаполнено(Док.ПунктРазгрузки) Тогда //+++ 24.04.2012 - адрес доставки - куда!
		Если ЗначениеЗаполнено(Док.ГрузоПолучатель) Тогда //+++ 27.11.2012 ГрузоПолучатель а не Грузоотправитель!
			ФактАдрес = ПолучитьДанныеКонтактнойИнформации(Док.ГрузоПолучатель, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
			Док.ПунктРазгрузки = ?(ФактАдрес.Количество() = 0, "", ФактАдрес[0].Представление);
		ИначеЕсли ЗначениеЗаполнено(Док.Контрагент) Тогда
			ФактАдрес = ПолучитьДанныеКонтактнойИнформации(Док.Контрагент, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
			Док.ПунктРазгрузки = ?(ФактАдрес.Количество() = 0, "", ФактАдрес[0].Представление);
		КонецЕсли;	
	КонецЕсли;	
	
	Док.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	Док.ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
	
	// Сделку и табличные части заполняем только Если взаиморасчеты ведутся не по расчетным документам.
	Если Док.ДоговорКонтрагента.ВедениеВзаиморасчетов <>
		Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
		
		Док.Сделка = Основание;
		
	КонецЕсли;
	
	Если Док.ЭтоНовый() Тогда // номер ТК -------------------здесь!-----------------------------------------------
		УстановитьНомерДокумента(Док);
	КонецЕсли;

	Если Основание.Проведен Тогда
		
		ЗаполнитьТабличнуюЧастьПоЗаданию(Док, Задание,  ТЗЗаказано, ТЗОтгружено,  ТЗОтгруженоАХ);
				
	Иначе
		сообщить("Документ: "+строка(Основание)+" - не проведен. Заполнение реализации не будет производиться!");
	КонецЕсли;
	//02.09.14 Смирнов
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Док.НеФинансироватьФакторинг=Основание.НеФинансироватьФакторинг;
	КонецЕсли;
КонецПроцедуры // ОбработкаЗаполнения()





//+++ из реализации! +++
Процедура ЗаполнитьТабличнуюЧастьПоЗаданию(Док, Задание,  ТЗЗаказано, ТЗОтгружено, ТЗОтгруженоАХ)
	
	
//+++ 16.07.2013 так "логичнее"... идем по заказу, ищем в отгрузке...
	Для Каждого СтрокаЗаказа Из ТЗЗаказано Цикл//по товарам из заказа
		
//+++ 26.04.2013 - порядок обхода - сначала по Отгрузке потом ищем то что заказано....	
//	Для Каждого СтрокаОтгрузки Из ТЗОтгружено Цикл//по товарам, отгружаемым из задания
	ОбработкаПрерыванияПользователя(); //Ctrl + Break
		 		
		Если СтрокаЗаказа.Количество <= 0 Тогда  // уже все в реализацию
			Продолжить;
		КонецЕсли;
			//Если СтрокаОтгрузки.Количество <= 0 Тогда  // уже все отгрузили в другом заказе
			//	Продолжить;
			//КонецЕсли;
				
	//----------------------нужен именно полный Цикл - Для поиска всех складов---------------------------
	//  ТЗОтгружено.найти - находит только 1-ю строку...
	//
		Для Каждого СтрокаОтгрузки Из ТЗОтгружено Цикл//по товарам, отгружаемым из задания
			Если СтрокаОтгрузки.Количество <= 0 Тогда  // уже все отгрузили c этого склада
				Продолжить;
			КонецЕсли;
	//	Для Каждого СтрокаЗаказа Из ТЗЗаказано Цикл//по товарам из заказа
			Если СтрокаЗаказа.Количество <= 0 Тогда  //+++ 28.04.2015 уже все в реализацию занесено! дальше проверять НЕ НАДО!
				Прервать;
			КонецЕсли;
		
			Если СтрокаЗаказа.Номенклатура = СтрокаОтгрузки.Номенклатура 
			     И СтрокаОтгрузки.Количество > 0  Тогда

				СтрокаТабличнойЧасти = Док.товары.Добавить();
				СтрокаТабличнойЧасти.Номенклатура  	               = СтрокаЗаказа.Номенклатура;
				
				ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				
				СтрокаТабличнойЧасти.ЕдиницаИзмерения              = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
				СтрокаТабличнойЧасти.Коэффициент                   = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
				СтрокаТабличнойЧасти.Цена                          = СтрокаЗаказа.Цена; // в заказе один товар - одна цена!
				//ставка НДС из заказа
				строки = Док.Сделка.товары.найти (СтрокаЗаказа.Номенклатура,"номенклатура");
				СтрокаТабличнойЧасти.СтавкаНДС					   = строки.СтавкаНДС;//Перечисления.СтавкиНДС.НДС18; //+++ ВСЕГДА в реализации есть!!!
				//изменитьНДС
				ДельтаФактЗаказа = СтрокаОтгрузки.Количество - СтрокаЗаказа.Количество;
				
				Если ДельтаФактЗаказа >= 0 Тогда//в общей отгрузке больше чем в конкретном заказе по складу
					СтрокаТабличнойЧасти.Количество = СтрокаЗаказа.Количество;
					СтрокаОтгрузки.Количество   	= ДельтаФактЗаказа;
					СтрокаЗаказа.Количество         = 0; 
					
				ИначеЕсли ДельтаФактЗаказа<0 Тогда//в общей отгрузке меньше чем в конкретном заказе по складу
					СтрокаТабличнойЧасти.Количество = СтрокаОтгрузки.Количество; // весь остаток - в эту реализацию
					СтрокаЗаказа.Количество     = -ДельтаФактЗаказа; //25.12.2015 а здесь чего-то осталось...  будет отгружаться с другого склада...
					СтрокаОтгрузки.Количество   = 0;  // больше не осталось!
				
				КонецЕсли; 
				СтрокаТабличнойЧасти.Склад      = СтрокаОтгрузки.Склад;
				РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, Док);
				РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Док); 
				
				//---------------------Начало Адресное хранение-----------------------------
				//найдем нужное количество и адреса в ТЗОтгруженоАХ
				Если СтрокаТабличнойЧасти.Склад.АдресноеХранение Тогда
					колВсего = СтрокаТабличнойЧасти.Количество;
					КолАХ = 0;
					ном = СтрокаТабличнойЧасти.Номенклатура;
					массивСтрокАХ = ТЗОтгруженоАХ.найтиСтроки(Новый Структура("Номенклатура, Склад", ном, СтрокаТабличнойЧасти.Склад));//+++ 31.03.2014
					Для i=0 по массивСтрокАХ.Количество()-1 Цикл
						строкаАХ = массивСтрокАХ[i];
						Если строкаАХ.Количество>0 
							и КолАХ + строкаАХ.Количество <= колВсего Тогда
							стр1 = Док.ТоварыАдресноеХранение.Добавить();
							ЗаполнитьЗначенияСвойств(стр1, строкаАХ);
							КолАХ = КолАХ + строкаАХ.Количество;
							строкаАХ.Количество = 0; //все количество из этой ячейки отгружается
							
						ИначеЕсли КолАХ<=колВсего Тогда //и (КолАХ + строкаАХ.Количество)>колВсего Тогда
							Если КолАХ<колВсего Тогда //+++ 04.04.2014 добавляем строку только Если количество не ноль!
								стр1 = Док.ТоварыАдресноеХранение.Добавить();
								ЗаполнитьЗначенияСвойств(стр1, строкаАХ);
								стр1.Количество = колВсего - КолАХ;
							КонецЕсли;	
							строкаАХ.Количество = строкаАХ.Количество - (колВсего - КолАХ);
                            КолАХ = колВсего;   // КолАХ = КолАХ + (колВсего - КолАХ);
						Иначе
							прервать;
						КонецЕсли;
					КонецЦикла;	
				 КонецЕсли;
				 //---------------------Конец Адресное хранение-----------------------------
				
			 КонецЕсли;
			 
		КонецЦикла;
		
	КонецЦикла;
	
	
	//---------удаляем "лишние" строки----------------------------------------------------------- 
	// -------------то, что уже отгружено - Для следующих заказов искать не надо-----------------
	i=0; N=ТЗОтгружено.Количество();
	пока i<N Цикл
		СтрокаОтгрузки = ТЗОтгружено[i]; 
		Если СтрокаОтгрузки.Количество <= 0 Тогда  // уже все отгрузили в другом заказе
			ТЗОтгружено.Удалить(i); 
			N=N-1;
		Иначе
			i=i+1;
		КонецЕсли;
	КонецЦикла;
	
	//----то, что уже отгружено по Адресному Хранению - Для следующих заказов искать не надо-------
	i=0; N=ТЗОтгруженоАХ.Количество();
	пока i<N Цикл
		СтрокаОтгрузки = ТЗОтгруженоАХ[i]; 
		Если СтрокаОтгрузки.Количество <= 0 Тогда  // уже все отгрузили в другом заказе
			ТЗОтгруженоАХ.Удалить(i); 
			N=N-1;
		Иначе
			i=i+1;
		КонецЕсли;
	КонецЦикла;

	//-------------------------------------расчет веса----------------------------------- 
	ЗаполнитьВесНетто(Док.Товары);
	Док.ОбщийВес=Док.Товары.Итог("Вес");
	
	Если Док.СуммаКомпенсацииТранспорта<>0 Тогда //+++ 13.11.2013
		Если Док.товары.Итог("Количество") <> Задание.Товары.Итог("Количество") Тогда
			Сообщить("Сумма транспортных услуг = "+строка(Док.СуммаКомпенсацииТранспорта)+"р. по заказу "+строка(Задание)
			+",
			|	но отгружено "+строка( Док.товары.Итог("Количество") )+" из "+строка( Задание.Товары.Итог("Количество") )+" шт. из заказанных товаров.", СтатусСообщения.Внимание);
		КонецЕсли;
	КонецЕсли;
				 
	//++++++++++++ заполнение грузчиков как в Реализации+++++++++++++++
	формаРеализации = док.получитьФорму("ФормаДокумента");
	яштРезервыПоТоварам.ЗаполнениеКТУГрузчиков(Док); // по группам складов!
	//формаРеализации.ДанныеПоПогрузкеПанельЗаполнить(Неопределено); 
	
КонецПроцедуры





Процедура ОбработкаЗаполненияПеремещенияИзЗадания(Док, Основание, Задание, ТЗЗаказано, ТЗОтгружено, ТЗОтгруженоАХ) 
	
	
//=================================================================================================================
	//+++ промежуточный Внутренний заказ +++
	Если Док.ВнутреннийЗаказ = документы.ВнутреннийЗаказ.ПустаяСсылка() Тогда
		ВнутреннийЗаказ = документы.ВнутреннийЗаказ.СоздатьДокумент();
	Иначе
		ВнутреннийЗаказ = Док.ВнутреннийЗаказ.получитьОбъект();
		ВнутреннийЗаказ.товары.Очистить();
	КонецЕсли;
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнитьШапкуДокументаПоОснованию(ВнутреннийЗаказ, Основание);
	ВнутреннийЗаказ.Комментарий   = Основание.Комментарий+"
	|# Задание на отгрузку №"+сокрЛП(Задание.Номер)+" от "+строка(Задание.Дата)+" # ";
	
	ВнутреннийЗаказ.Дата = ТекущаяДата();					
	ВнутреннийЗаказ.ДокументОснование = Основание;
	ВнутреннийЗаказ.ВидЗаказа	  = Перечисления.ВидыВнутреннегоЗаказа.НаСклад;
	
	Склады = Основание.Товары.Выгрузить();
	Склады.Свернуть("Размещение");
	
	Если Склады.Количество() > 0 Тогда
		СкладР = Склады[0].Размещение;
	КонецЕсли;
	
	Если ТипЗнч(СкладР) = Тип("СправочникСсылка.Склады") Тогда
		СкладРазмещение = СкладР;
	иначе
		СкладРазмещение = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
		
	//+++( 29.10.2013
	Если ЭтаФорма.Флажок1 Тогда 
		СкладПолучатель1 = СкладПолучатель;
		Если ВвестиЗначение(СкладПолучатель1, "Склад Для "+строка(Основание.Контрагент)+" заказ №"+строка(Основание.Номер) ) Тогда
			ВнутреннийЗаказ.Заказчик	  = ?(СкладРазмещение = Справочники.Склады.ПустаяСсылка(),СкладПолучатель1,СкладРазмещение);
		Иначе	
			ВнутреннийЗаказ.Заказчик	  = ?(СкладРазмещение = Справочники.Склады.ПустаяСсылка(),СкладПолучатель,СкладРазмещение);
		КонецЕсли;
	Иначе	
		ВнутреннийЗаказ.Заказчик	  = ?(СкладРазмещение = Справочники.Склады.ПустаяСсылка(),СкладПолучатель,СкладРазмещение);
	КонецЕсли; //+++)

	Если Основание.Проведен Тогда
		ЗаполнитьТабличнуюЧастьВнутреннийЗаказПоЗаданию(ВнутреннийЗаказ, Задание,  ТЗЗаказано, ТЗОтгружено);
	Иначе
		сообщить("Документ: "+строка(Основание)+" - не проведен. Заполнение документа производиться - не будет!");
		Возврат;
	КонецЕсли;
	//ВнутреннийЗаказ.Организация  = 
	//ВнутреннийЗаказ.Подразделение=
	ВнутреннийЗаказ.Записать();						
//=================================================================================================================
	
	// Заполним реквизиты шапки по документу основанию.
	Док.Дата = ТекущаяДата();
	//+++ 29.12.2014 - Для перемещения из Ярославля в Москву или Филиал... нужен в шапке! склад Ярославля!
	//Если Основание.ОтгрузкаСПодразделенияСклада Тогда
		Док.СкладОтправитель = справочники.Склады.НайтиПоНаименованию("1");
	//Иначе
	//	Док.СкладОтправитель = Основание.Склад; //+++ 24.04.2012 - только Для ТТН и не переносится в Бухгалтерию
	//КонецЕсли;
	Док.СкладПолучатель  = ?(СкладРазмещение = Справочники.Склады.ПустаяСсылка(),?(ЭтаФорма.Флажок1, СкладПолучатель1, СкладПолучатель),СкладРазмещение);//+++ 29.10.2013
	
	Док.Ответственный = глТекущийПользователь; // Основание.Ответственный;
	Док.Комментарий   = Основание.Комментарий+"
	|# Задание на отгрузку №"+сокрЛП(Задание.Номер)+" от "+строка(Задание.Дата)+" # ";
	
	Док.Водитель = СокрЛП(Основание.КонтактноеЛицо.Наименование);
	Док.МаркаАвтомобиля     = Основание.МаркаАвтомобиля;
	Док.ГосНомерАвтомобиля  = Основание.ГосНомерАвтомобиля;
	Док.ОтражатьВУправленческомУчете = Истина; // обязательно!
	
	ИзОбработки = Ложь;
		
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнитьШапкуДокументаПоОснованию(Док, Основание);
	
	//++++++++++++++ данные по водителю из ЭТОГО документа! +++++++++++++++++
	Док.Водитель 	   = Водитель;
	Док.ВодительскоеУдостоверение  = ВодительскоеУдостоверение;
	Док.МаркаАвтомобиля     = МаркаАвтомобиля;
	Док.ГосНомерАвтомобиля  = ГосНомерАвтомобиля;
	Док.МаркаПрицепа		= МаркаПрицепа;
	Док.ГосНомерПрицепа		= ГосНомерПрицепа;
	
	Док.Подразделение   = ?(Основание.Подразделение.пустая(), Подразделение, Основание.Подразделение);
	Док.Перевозчик      = Перевозчик;
	Док.ВидОперации     = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
    Док.ВнутреннийЗаказ = ВнутреннийЗаказ.Ссылка;		
	
	ЗаполнитьТабличнуюЧастьПеремещенияПоВнутреннемуЗаказу(Док, ВнутреннийЗаказ,  ТЗОтгруженоАХ);
	
	яштРезервыПоТоварам.ЗаполнениеКТУГрузчиков(Док); //все активные грузчики или только по своей группе складов	
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаЗаполненияСписанияИзЗадания(Док, Основание, Задание, ТЗЗаказано, ТЗОтгружено, ТЗОтгруженоАХ) 
	
	// Заполним реквизиты шапки по документу основанию.
	Док.Дата = ТекущаяДата();
	Док.Ответственный = глТекущийПользователь; // Основание.Ответственный;
	Док.Комментарий   = Основание.Комментарий+"
	|# Задание на отгрузку №"+сокрЛП(Задание.Номер)+" от "+строка(Задание.Дата)+" # ";
	
	Док.ОтражатьВУправленческомУчете = Истина; // обязательно!
	
	Док.Заказ = Основание; 			
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнитьШапкуДокументаПоОснованию(Док, Основание);
	Док.Склад = Справочники.Склады.НайтиПоНаименованию("1");
	
	Док.Подразделение   = ?(Основание.Подразделение.пустая(), Подразделение, Основание.Подразделение);	
	ЗаполнитьТабличнуюЧастьСписанияПоЗаданию(Док, Задание,  ТЗЗаказано, ТЗОтгружено, ТЗОтгруженоАХ);
	
	//яштРезервыПоТоварам.ЗаполнениеКТУГрузчиков(Док); //все активные грузчики или только по своей группе складов	
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаЗаполненияТребованияИзЗадания(Док, Основание, Задание, ТЗЗаказано, ТЗОтгружено, ТЗОтгруженоАХ) 
	
	// Заполним реквизиты шапки по документу основанию.
	Док.Дата = ТекущаяДата();
	Док.Ответственный = глТекущийПользователь; // Основание.Ответственный;
	Док.Комментарий   = Основание.Комментарий+"
	|# Задание на отгрузку №"+сокрЛП(Задание.Номер)+" от "+строка(Задание.Дата)+" # ";
	
	Док.ОтражатьВУправленческомУчете = Истина; // обязательно!
	
	Док.Заказ = Основание;
	Док.СписаниеНаЗатраты = истина;
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнитьШапкуДокументаПоОснованию(Док, Основание);
	Док.Склад = Справочники.Склады.НайтиПоНаименованию("1");
	
	Док.Подразделение   = ?(Основание.Подразделение.пустая(), Подразделение, Основание.Подразделение);	
	
	УстановитьНомерДокумента(Док);
	
	ЗаполнитьТабличнуюЧастьТребованияПоЗаданию(Док, Задание,  ТЗЗаказано, ТЗОтгружено, ТЗОтгруженоАХ);
	
	//яштРезервыПоТоварам.ЗаполнениеКТУГрузчиков(Док); //все активные грузчики или только по своей группе складов	
	
КонецПроцедуры // ОбработкаЗаполнения()


Процедура ЗаполнитьТабличнуюЧастьСписанияПоЗаданию(Док, Задание,  ТЗЗаказано, ТЗОтгружено, ТЗОтгруженоАХ)
	
	
//+++ 16.07.2013 так "логичнее"... идем по заказу, ищем в отгрузке...
	Для Каждого СтрокаЗаказа Из ТЗЗаказано Цикл//по товарам из заказа
		
//+++ 26.04.2013 - порядок обхода - сначала по Отгрузке потом ищем то что заказано....	
//	Для Каждого СтрокаОтгрузки Из ТЗОтгружено Цикл//по товарам, отгружаемым из задания
	ОбработкаПрерыванияПользователя(); //Ctrl + Break
		 		
		Если СтрокаЗаказа.Количество <= 0 Тогда  // уже все в реализацию
			Продолжить;
		КонецЕсли;
			//Если СтрокаОтгрузки.Количество <= 0 Тогда  // уже все отгрузили в другом заказе
			//	Продолжить;
			//КонецЕсли;
				
	//----------------------нужен именно полный Цикл - Для поиска всех складов---------------------------
	//  ТЗОтгружено.найти - находит только 1-ю строку...
	//
		Для Каждого СтрокаОтгрузки Из ТЗОтгружено Цикл//по товарам, отгружаемым из задания
			Если СтрокаОтгрузки.Количество <= 0 Тогда  // уже все отгрузили c этого склада
				Продолжить;
			КонецЕсли;
	//	Для Каждого СтрокаЗаказа Из ТЗЗаказано Цикл//по товарам из заказа
			Если СтрокаЗаказа.Количество <= 0 Тогда  //+++ 28.04.2015 уже все в реализацию занесено! дальше проверять НЕ НАДО!
				Прервать;
			КонецЕсли;
		
			Если СтрокаЗаказа.Номенклатура = СтрокаОтгрузки.Номенклатура 
			     И СтрокаОтгрузки.Количество > 0  Тогда

				СтрокаТабличнойЧасти = Док.товары.Добавить();
				СтрокаТабличнойЧасти.Номенклатура  	               = СтрокаЗаказа.Номенклатура;
				
				ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				//ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				
				СтрокаТабличнойЧасти.ЕдиницаИзмерения              = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
				СтрокаТабличнойЧасти.Коэффициент                   = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
				СтрокаТабличнойЧасти.Цена                          = СтрокаЗаказа.Цена; // в заказе один товар - одна цена!
				//СтрокаТабличнойЧасти.СтавкаНДС					   = Перечисления.СтавкиНДС.НДС18; //+++ ВСЕГДА в реализации есть!!!
				
				ДельтаФактЗаказа = СтрокаОтгрузки.Количество - СтрокаЗаказа.Количество;
				
				Если ДельтаФактЗаказа >= 0 Тогда//в общей отгрузке больше чем в конкретном заказе по складу
					СтрокаТабличнойЧасти.Количество = СтрокаЗаказа.Количество;
					СтрокаОтгрузки.Количество   	= ДельтаФактЗаказа;
					СтрокаЗаказа.Количество         = 0; 
					
				ИначеЕсли ДельтаФактЗаказа<0 Тогда//в общей отгрузке меньше чем в конкретном заказе по складу
					СтрокаТабличнойЧасти.Количество = СтрокаОтгрузки.Количество; // весь остаток - в эту реализацию
					СтрокаЗаказа.Количество     = -ДельтаФактЗаказа; //25.12.2015 а здесь чего-то осталось...  будет отгружаться с другого склада...
					СтрокаОтгрузки.Количество   = 0;  // больше не осталось!
				
				КонецЕсли; 
				СтрокаТабличнойЧасти.Склад      = СтрокаОтгрузки.Склад;
				РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, Док);
				//РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Док); 
				
				//---------------------Начало Адресное хранение-----------------------------
				//найдем нужное количество и адреса в ТЗОтгруженоАХ
				Если СтрокаТабличнойЧасти.Склад.АдресноеХранение Тогда
					колВсего = СтрокаТабличнойЧасти.Количество;
					КолАХ = 0;
					ном = СтрокаТабличнойЧасти.Номенклатура;
					массивСтрокАХ = ТЗОтгруженоАХ.найтиСтроки(Новый Структура("Номенклатура, Склад", ном, СтрокаТабличнойЧасти.Склад));//+++ 31.03.2014
					Для i=0 по массивСтрокАХ.Количество()-1 Цикл
						строкаАХ = массивСтрокАХ[i];
						Если строкаАХ.Количество>0 
							и КолАХ + строкаАХ.Количество <= колВсего Тогда
							стр1 = Док.ТоварыАдресноеХранение.Добавить();
							ЗаполнитьЗначенияСвойств(стр1, строкаАХ);
							КолАХ = КолАХ + строкаАХ.Количество;
							строкаАХ.Количество = 0; //все количество из этой ячейки отгружается
							
						ИначеЕсли КолАХ<=колВсего Тогда //и (КолАХ + строкаАХ.Количество)>колВсего Тогда
							Если КолАХ<колВсего Тогда //+++ 04.04.2014 добавляем строку только Если количество не ноль!
								стр1 = Док.ТоварыАдресноеХранение.Добавить();
								ЗаполнитьЗначенияСвойств(стр1, строкаАХ);
								стр1.Количество = колВсего - КолАХ;
							КонецЕсли;	
							строкаАХ.Количество = строкаАХ.Количество - (колВсего - КолАХ);
                            КолАХ = колВсего;   // КолАХ = КолАХ + (колВсего - КолАХ);
						Иначе
							прервать;
						КонецЕсли;
					КонецЦикла;	
				 КонецЕсли;
				 //---------------------Конец Адресное хранение-----------------------------
				
			 КонецЕсли;
			 
		КонецЦикла;
		
	КонецЦикла;
	
	
	//---------удаляем "лишние" строки----------------------------------------------------------- 
	// -------------то, что уже отгружено - Для следующих заказов искать не надо-----------------
	i=0; N=ТЗОтгружено.Количество();
	пока i<N Цикл
		СтрокаОтгрузки = ТЗОтгружено[i]; 
		Если СтрокаОтгрузки.Количество <= 0 Тогда  // уже все отгрузили в другом заказе
			ТЗОтгружено.Удалить(i); 
			N=N-1;
		Иначе
			i=i+1;
		КонецЕсли;
	КонецЦикла;
	
	//----то, что уже отгружено по Адресному Хранению - Для следующих заказов искать не надо-------
	i=0; N=ТЗОтгруженоАХ.Количество();
	пока i<N Цикл
		СтрокаОтгрузки = ТЗОтгруженоАХ[i]; 
		Если СтрокаОтгрузки.Количество <= 0 Тогда  // уже все отгрузили в другом заказе
			ТЗОтгруженоАХ.Удалить(i); 
			N=N-1;
		Иначе
			i=i+1;
		КонецЕсли;
	КонецЦикла;

	//-------------------------------------расчет веса----------------------------------- 
	ЗаполнитьВесНетто(Док.Товары);
	Док.ОбщийВес=Док.Товары.Итог("Вес");
	
	//Если Док.СуммаКомпенсацииТранспорта<>0 Тогда //+++ 13.11.2013
	//	Если Док.товары.Итог("Количество") <> Задание.Товары.Итог("Количество") Тогда
	//		Сообщить("Сумма транспортных услуг = "+строка(Док.СуммаКомпенсацииТранспорта)+"р. по заказу "+строка(Задание)
	//		+",
	//		|	но отгружено "+строка( Док.товары.Итог("Количество") )+" из "+строка( Задание.Товары.Итог("Количество") )+" шт. из заказанных товаров.", СтатусСообщения.Внимание);
	//	КонецЕсли;
	//КонецЕсли;
				 
	//++++++++++++ заполнение грузчиков как в Реализации+++++++++++++++
	//формаРеализации = док.получитьФорму("ФормаДокумента");
	//яштРезервыПоТоварам.ЗаполнениеКТУГрузчиков(Док); // по группам складов!
	//формаРеализации.ДанныеПоПогрузкеПанельЗаполнить(Неопределено); 
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьТребованияПоЗаданию(Док, Задание,  ТЗЗаказано, ТЗОтгружено, ТЗОтгруженоАХ)
	
	
//+++ 16.07.2013 так "логичнее"... идем по заказу, ищем в отгрузке...
	Для Каждого СтрокаЗаказа Из ТЗЗаказано Цикл//по товарам из заказа
		
//+++ 26.04.2013 - порядок обхода - сначала по Отгрузке потом ищем то что заказано....	
//	Для Каждого СтрокаОтгрузки Из ТЗОтгружено Цикл//по товарам, отгружаемым из задания
	ОбработкаПрерыванияПользователя(); //Ctrl + Break
		 		
		Если СтрокаЗаказа.Количество <= 0 Тогда  // уже все в реализацию
			Продолжить;
		КонецЕсли;
			//Если СтрокаОтгрузки.Количество <= 0 Тогда  // уже все отгрузили в другом заказе
			//	Продолжить;
			//КонецЕсли;
				
	//----------------------нужен именно полный Цикл - Для поиска всех складов---------------------------
	//  ТЗОтгружено.найти - находит только 1-ю строку...
	//
		Для Каждого СтрокаОтгрузки Из ТЗОтгружено Цикл//по товарам, отгружаемым из задания
			Если СтрокаОтгрузки.Количество <= 0 Тогда  // уже все отгрузили c этого склада
				Продолжить;
			КонецЕсли;
	//	Для Каждого СтрокаЗаказа Из ТЗЗаказано Цикл//по товарам из заказа
			Если СтрокаЗаказа.Количество <= 0 Тогда  //+++ 28.04.2015 уже все в реализацию занесено! дальше проверять НЕ НАДО!
				Прервать;
			КонецЕсли;
		
			Если СтрокаЗаказа.Номенклатура = СтрокаОтгрузки.Номенклатура 
			     И СтрокаОтгрузки.Количество > 0  Тогда

				СтрокаТабличнойЧасти = Док.Материалы.Добавить();
				СтрокаТабличнойЧасти.Номенклатура  	               = СтрокаЗаказа.Номенклатура;
				СтрокаТабличнойЧасти.Качество  	                   = Справочники.Качество.Новый;
				СтрокаТабличнойЧасти.НоменклатурнаяГруппа  	       = СтрокаЗаказа.Номенклатура.НоменклатурнаяГруппа;
				СтрокаТабличнойЧасти.СтатьяЗатрат  	               = СтрокаЗаказа.СтатьяЗатрат;
				
				//ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				
				СтрокаТабличнойЧасти.ЕдиницаИзмерения              = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
				СтрокаТабличнойЧасти.Коэффициент                   = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
				//СтрокаТабличнойЧасти.Цена                          = СтрокаЗаказа.Цена; // в заказе один товар - одна цена!
				//СтрокаТабличнойЧасти.СтавкаНДС					   = Перечисления.СтавкиНДС.НДС18; //+++ ВСЕГДА в реализации есть!!!
				
				ДельтаФактЗаказа = СтрокаОтгрузки.Количество - СтрокаЗаказа.Количество;
				
				Если ДельтаФактЗаказа >= 0 Тогда//в общей отгрузке больше чем в конкретном заказе по складу
					СтрокаТабличнойЧасти.Количество = СтрокаЗаказа.Количество;
					СтрокаОтгрузки.Количество   	= ДельтаФактЗаказа;
					СтрокаЗаказа.Количество         = 0; 
					
				ИначеЕсли ДельтаФактЗаказа<0 Тогда//в общей отгрузке меньше чем в конкретном заказе по складу
					СтрокаТабличнойЧасти.Количество = СтрокаОтгрузки.Количество; // весь остаток - в эту реализацию
					СтрокаЗаказа.Количество     = -ДельтаФактЗаказа; //25.12.2015 а здесь чего-то осталось...  будет отгружаться с другого склада...
					СтрокаОтгрузки.Количество   = 0;  // больше не осталось!
				
				КонецЕсли; 
				СтрокаТабличнойЧасти.Склад      = СтрокаОтгрузки.Склад;
				//РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, Док);
				//РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Док); 
				
				//---------------------Начало Адресное хранение-----------------------------
				//найдем нужное количество и адреса в ТЗОтгруженоАХ
				Если СтрокаТабличнойЧасти.Склад.АдресноеХранение Тогда
					колВсего = СтрокаТабличнойЧасти.Количество;
					КолАХ = 0;
					ном = СтрокаТабличнойЧасти.Номенклатура;
					массивСтрокАХ = ТЗОтгруженоАХ.найтиСтроки(Новый Структура("Номенклатура, Склад", ном, СтрокаТабличнойЧасти.Склад));//+++ 31.03.2014
					Для i=0 по массивСтрокАХ.Количество()-1 Цикл
						строкаАХ = массивСтрокАХ[i];
						Если строкаАХ.Количество>0 
							и КолАХ + строкаАХ.Количество <= колВсего Тогда
							стр1 = Док.ТоварыАдресноеХранение.Добавить();
							ЗаполнитьЗначенияСвойств(стр1, строкаАХ);
							КолАХ = КолАХ + строкаАХ.Количество;
							строкаАХ.Количество = 0; //все количество из этой ячейки отгружается
							
						ИначеЕсли КолАХ<=колВсего Тогда //и (КолАХ + строкаАХ.Количество)>колВсего Тогда
							Если КолАХ<колВсего Тогда //+++ 04.04.2014 добавляем строку только Если количество не ноль!
								стр1 = Док.ТоварыАдресноеХранение.Добавить();
								ЗаполнитьЗначенияСвойств(стр1, строкаАХ);
								стр1.Количество = колВсего - КолАХ;
							КонецЕсли;	
							строкаАХ.Количество = строкаАХ.Количество - (колВсего - КолАХ);
                            КолАХ = колВсего;   // КолАХ = КолАХ + (колВсего - КолАХ);
						Иначе
							прервать;
						КонецЕсли;
					КонецЦикла;	
				 КонецЕсли;
				 //---------------------Конец Адресное хранение-----------------------------
				
			 КонецЕсли;
			 
		КонецЦикла;
		
	КонецЦикла;
	
	
	//---------удаляем "лишние" строки----------------------------------------------------------- 
	// -------------то, что уже отгружено - Для следующих заказов искать не надо-----------------
	i=0; N=ТЗОтгружено.Количество();
	пока i<N Цикл
		СтрокаОтгрузки = ТЗОтгружено[i]; 
		Если СтрокаОтгрузки.Количество <= 0 Тогда  // уже все отгрузили в другом заказе
			ТЗОтгружено.Удалить(i); 
			N=N-1;
		Иначе
			i=i+1;
		КонецЕсли;
	КонецЦикла;
	
	//----то, что уже отгружено по Адресному Хранению - Для следующих заказов искать не надо-------
	i=0; N=ТЗОтгруженоАХ.Количество();
	пока i<N Цикл
		СтрокаОтгрузки = ТЗОтгруженоАХ[i]; 
		Если СтрокаОтгрузки.Количество <= 0 Тогда  // уже все отгрузили в другом заказе
			ТЗОтгруженоАХ.Удалить(i); 
			N=N-1;
		Иначе
			i=i+1;
		КонецЕсли;
	КонецЦикла;

	//-------------------------------------расчет веса----------------------------------- 
	//ЗаполнитьВесНетто(Док.Товары);
	//Док.ОбщийВес=Док.Товары.Итог("Вес");
	
	//Если Док.СуммаКомпенсацииТранспорта<>0 Тогда //+++ 13.11.2013
	//	Если Док.товары.Итог("Количество") <> Задание.Товары.Итог("Количество") Тогда
	//		Сообщить("Сумма транспортных услуг = "+строка(Док.СуммаКомпенсацииТранспорта)+"р. по заказу "+строка(Задание)
	//		+",
	//		|	но отгружено "+строка( Док.товары.Итог("Количество") )+" из "+строка( Задание.Товары.Итог("Количество") )+" шт. из заказанных товаров.", СтатусСообщения.Внимание);
	//	КонецЕсли;
	//КонецЕсли;
				 
	//++++++++++++ заполнение грузчиков как в Реализации+++++++++++++++
	//формаРеализации = док.получитьФорму("ФормаДокумента");
	//яштРезервыПоТоварам.ЗаполнениеКТУГрузчиков(Док); // по группам складов!
	//формаРеализации.ДанныеПоПогрузкеПанельЗаполнить(Неопределено); 
	
КонецПроцедуры




//+++ из реализации! +++
Процедура ЗаполнитьТабличнуюЧастьВнутреннийЗаказПоЗаданию(Док, Задание,  ТЗЗаказано, ТЗОтгружено)
	
	
	Для Каждого СтрокаЗаказа Из ТЗЗаказано Цикл//по товарам из заказа
	ОбработкаПрерыванияПользователя(); //Ctrl + Break
		 		
		Если СтрокаЗаказа.Количество = 0 Тогда  // уже все в реализацию
			Продолжить;
		КонецЕсли;
		
	//----------------------нужен именно полный Цикл - Для поиска всех складов---------------------------
		Для Каждого СтрокаОтгрузки Из ТЗОтгружено Цикл//по товарам, отгружаемым из задания
		
			Если СтрокаОтгрузки.Количество = 0 Тогда  // уже все отгрузили в другом заказе
				Продолжить;
			КонецЕсли;
			Если СтрокаЗаказа.Количество = 0 Тогда  // уже все в реализацию
				прервать;
			КонецЕсли;
 		
			Если СтрокаЗаказа.Номенклатура = СтрокаОтгрузки.Номенклатура Тогда
		//		И СтрокаОтгрузки.Количество > 0 И СтрокаЗаказа.Количество > 0 
				
				СтрокаТабличнойЧасти = Док.товары.Добавить();
				СтрокаТабличнойЧасти.Номенклатура  	               = СтрокаЗаказа.Номенклатура;
				
				СтрокаТабличнойЧасти.ЕдиницаИзмерения              = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
				СтрокаТабличнойЧасти.Коэффициент                   = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
				//СтрокаТабличнойЧасти.Цена                          = СтрокаЗаказа.Цена;
				//СтрокаТабличнойЧасти.СтавкаНДС					   = Перечисления.СтавкиНДС.НДС18; //+++ ВСЕГДА в реализации есть!!!
				
				ДельтаФактЗаказа = СтрокаОтгрузки.Количество - СтрокаЗаказа.Количество;
				
				Если ДельтаФактЗаказа > 0 Тогда//в общей отгрузке больше чем в конкретном заказе по складу
					СтрокаТабличнойЧасти.Количество = СтрокаЗаказа.Количество;
					СтрокаОтгрузки.Количество   	= ДельтаФактЗаказа;
					СтрокаЗаказа.Количество         = 0; 
					
				ИначеЕсли ДельтаФактЗаказа<=0 Тогда//в общей отгрузке меньше чем в конкретном заказе по складу
					СтрокаТабличнойЧасти.Количество = СтрокаОтгрузки.Количество; // весь остаток - в эту реализацию
					СтрокаЗаказа.Количество     = - ДельтаФактЗаказа; // а здесь чего-то осталось...
					СтрокаОтгрузки.Количество   = 0;  // больше не осталось!
				КонецЕсли; 
				СтрокаТабличнойЧасти.Качество			 = справочники.Качество.Новый;
				СтрокаТабличнойЧасти.размещение          = СтрокаОтгрузки.Склад; // здесь так называется!
								
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	
	//---------удаляем "лишние" строки----------------------------------------------------------- 
	// -------------то, что уже отгружено - Для следующих заказов искать не надо-----------------
	i=0; N=ТЗОтгружено.Количество();
	пока i<N Цикл
		СтрокаОтгрузки = ТЗОтгружено[i]; 
		Если СтрокаОтгрузки.Количество <= 0 Тогда  // уже все отгрузили в другом заказе
			ТЗОтгружено.Удалить(i); 
			N=N-1;
		Иначе
			i=i+1;
		КонецЕсли;
	КонецЦикла;
			
КонецПроцедуры
 
Процедура ЗаполнитьТабличнуюЧастьПеремещенияПоВнутреннемуЗаказу(Док, ВнутреннийЗаказ,  ТЗОтгруженоАХ)
	
	 Для каждого стрВЗ из ВнутреннийЗаказ.Товары Цикл
	 СтрокаТабличнойЧасти = Док.Товары.добавить();
	 ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, стрВЗ);
	 
	 СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
	 СтрокаТабличнойЧасти.Склад = стрВЗ.размещение;
	 СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;
								
	//---------------------Начало Адресное хранение-----------------------------
		//найдем нужное количество и адреса в ТЗОтгруженоАХ
		Если не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) 
			или СтрокаТабличнойЧасти.Склад.ЭтоГруппа Тогда
			сообщить(строка(СтрокаТабличнойЧасти.Склад)+" - не является элементом справочника Склады!");
		ИначеЕсли СтрокаТабличнойЧасти.Склад.АдресноеХранение Тогда
			колВсего = СтрокаТабличнойЧасти.Количество;
			КолАХ = 0;
			ном = СтрокаТабличнойЧасти.Номенклатура;
			скл = СтрокаТабличнойЧасти.Склад;       //+++ 23.06.2015
			массивСтрокАХ = ТЗОтгруженоАХ.найтиСтроки(Новый Структура("Номенклатура, Склад", ном, скл ));
			Для i=0 по массивСтрокАХ.Количество()-1 Цикл
				строкаАХ = массивСтрокАХ[i];
				Если строкаАХ.Количество>0 
					и КолАХ + строкаАХ.Количество <= колВсего Тогда
					стр1 = Док.ТоварыАдресноеХранение.Добавить();
					ЗаполнитьЗначенияСвойств(стр1, строкаАХ);
					КолАХ = КолАХ + строкаАХ.Количество;
					строкаАХ.Количество = 0; //все количество из этой ячейки отгружается
					
				ИначеЕсли КолАХ<=колВсего Тогда 
					Если КолАХ<колВсего Тогда //+++ 04.04.2014 добавляем строку только Если количество не ноль!
						стр1 = Док.ТоварыАдресноеХранение.Добавить();
						ЗаполнитьЗначенияСвойств(стр1, строкаАХ);
						стр1.Количество = колВсего - КолАХ;
					КонецЕсли;	
					строкаАХ.Количество = строкаАХ.Количество - (колВсего - КолАХ);
					КолАХ = колВсего;   // КолАХ = КолАХ + (колВсего - КолАХ);
				Иначе
					прервать;
				КонецЕсли;
			КонецЦикла;	
		 КонецЕсли;
	//---------------------Конец Адресное хранение-----------------------------
	КонецЦикла;

	
	
	//----то, что уже отгружено по Адресному Хранению - Для следующих заказов искать не надо-------
	i=0; N=ТЗОтгруженоАХ.Количество();
	пока i<N Цикл
		СтрокаОтгрузки = ТЗОтгруженоАХ[i]; 
		Если СтрокаОтгрузки.Количество <= 0 Тогда  // уже все отгрузили в другом заказе
			ТЗОтгруженоАХ.Удалить(i); 
			N=N-1;
		Иначе
			i=i+1;
		КонецЕсли;
	КонецЦикла;

	//-------------------------------------расчет веса----------------------------------- 
	ЗаполнитьВесНетто(Док.Товары);
	Док.ОбщийВес=Док.Товары.Итог("Вес");

КонецПроцедуры 







Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Копирование Тогда
		Элемент.ТекущаяСтрока.КоличествоЗаказано = КолОсталосьЗаказать;
		
		Элемент.ТекущаяСтрока.КоличествоСвободно = 0;
		Элемент.ТекущаяСтрока.Количество = 0;
		Элемент.ТекущаяСтрока.Склад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
КонецПроцедуры

Процедура ТоварыФактКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.Товары.ТекущиеДанные;
    дельта = ПроверкаПревышенияОбщегоКоличества(ТекущаяСтрока);
//+++ 27.07.2014 - можно отгружать больше?!
//ТекущаяСтрока.Количество = ТекущаяСтрока.Количество  - дельта;
	
КонецПроцедуры


// предупреждение о несоответствии Количества
Функция ПроверкаПревышенияОбщегоКоличества(ТекущаяСтрока)
 СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Номенклатура", ТекущаяСтрока.Номенклатура);
	
	ТЗВыведенныхСтрок = Товары.НайтиСтроки(СтруктураОтбора);
	
	КоличествоЗаказано = 0;
	КоличествоФакт     = 0;
	
	Для Каждого Строка Из ТЗВыведенныхСтрок Цикл
		КоличествоЗаказано = КоличествоЗаказано + Строка.КоличествоЗаказано;
		КоличествоФакт     = КоличествоФакт + Строка.Количество; 
	КонецЦикла;
	
	рез = 0;
	Если КоличествоФакт > КоличествоЗаказано Тогда
		рез = КоличествоФакт - КоличествоЗаказано;
		Сообщить(строка(ТекущаяСтрока.номерСтроки)+" стр. -> Для номенклатуры: "+ТекущаяСтрока.Номенклатура.Код+" '"+строка(ТекущаяСтрока.Номенклатура)+"' - количество к отгрузке: "+строка(КоличествоФакт)+"шт. больше общего количества заказанного: "+строка(КоличествоЗаказано)+" на "+строка(рез)+" шт.!", СтатусСообщения.Важное);
	КонецЕсли;
	
	Возврат рез;
	
КонецФункции

//------------------------------------------------------------------------------------------
Процедура ГруппыСкладовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Кол = ?(ОформлениеСтроки.ячейки.КоличествоСвободно.Значение=Неопределено, 0, ОформлениеСтроки.ячейки.КоличествоСвободно.Значение);
	Кол = мин(Кол, ИтогКоличествоШтук);
	ОформлениеСтроки.ячейки.Процент.текст = строка( ?(ИтогКоличествоШтук>0, Окр(Кол * 100 / ИтогКоличествоШтук,0), 1))+" %";
	ОформлениеСтроки.ячейки.Процент.ОтображатьТекст = Истина;
	
	ОформлениеСтроки.ячейки.Флаг.ОтображатьТекст  = Ложь;
	ОформлениеСтроки.ячейки.Флаг.ОтображатьФлажок = Истина;
			
//( Начало Пересчета:  
	//	определим необходимость авто-пересчета: 
	//  Если документ не проведен и изменился флаг хотя бы в одной из строк
	флПересчет = Ложь;  
	флЕстьХотьОдин = ложь;
	стр0 = ДанныеСтроки;
	Для каждого стр1 из ГруппыСкладов Цикл
		Если стр1.ДопПеремещение Тогда
			   флЕстьХотьОдин = Истина;
	    КонецЕсли;	   			   
 	
		Если стр1.Приоритет>0 и стр1.Приоритет <> стр1.НомерСтроки Тогда // перетаскивание отмеченных позиций!
			стр1.Приоритет = стр1.НомерСтроки;
			флПересчет = Истина;
		КонецЕсли;
		 
		Если стр1.Флаг <> (стр1.Приоритет>0) Тогда
			Если НЕ стр1.Флаг Тогда
				стр1.Приоритет = 0;
			Иначе   
				стр1.Приоритет = стр1.НомерСтроки; // где стоит такой и порядок!
			КонецЕсли;
			флПересчет = Истина;
			прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СоздаватьПеремещенияКриал <> флЕстьХотьОдин Тогда		
		СоздаватьПеремещенияКриал = флЕстьХотьОдин;
    КонецЕсли;

	Если флПересчет Тогда
		Если ЭтотОбъект.Проведен Тогда
			s = ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Заголовок;
			L = стрДлина(s); колСтрок = Прав(s, L-Найти(s,"(") );
			
			Предупреждение("Резерв по "+строка(Товары.Количество())+" строкам - уже сформирован!
						   |Нажмите [Заполнить Товары] Для установки резерва по ("+колСтрок+" строкам...", 30);
		Иначе
			Если Товары.Количество()>0 Тогда
			Режим = РежимДиалогаВопрос.ДаНет;
			Ответ = Вопрос("Таблица 'Товары' - уже содержит "+строка(Товары.Количество())+" строк! 
						   |Очистить список?", Режим, 0);
				Если Ответ = КодВозвратаДиалога.Да Тогда
					Товары.Очистить();
				КонецЕсли;
			КонецЕсли;
//+++ 28.10.2014			КоманднаяПанельТовары2Обновить(Неопределено); // обновляем сразу
		КонецЕсли;	
	КонецЕсли;
//) Конец Пересчета;

	общКоличествоСвободно = 0;  
	общКоличествоЗаказано = 0;

	Для Каждого стр1 из ГруппыСкладов Цикл   
		
		//перенумерация выделенных ячеек!
		Если стр1.Приоритет>0 и стр1.Приоритет<>стр1.НомерСтроки Тогда
			стр1.Приоритет=стр1.НомерСтроки;
		КонецЕсли;
		
		//пересчет в итоги - только заказанного количества!
		Если стр1.Приоритет>0 Тогда
			общКоличествоСвободно = общКоличествоСвободно + стр1.КоличествоСвободно; //+ мин(стр1.КоличествоСвободно, стр1.КоличествоЗаказано);
			общКоличествоЗаказано = общКоличествоЗаказано + стр1.КоличествоЗаказано;
		КонецЕсли;

	КонецЦикла;

	//общКоличествоСвободно = мин(общКоличествоСвободно, ИтогКоличествоШтук);//+++ 27.07.2014 - процент по отгрузке а не по свободному
	
	общПроцент = (общКоличествоЗаказано*100/ИтогКоличествоШтук);
	ЭлементыФормы.ГруппыСкладов.Колонки.Процент.ТекстПодвала = формат(общПроцент,"ЧДЦ=1")+" %";
	ЭлементыФормы.ГруппыСкладов.Колонки.КоличествоЗаказано.ТекстПодвала = общКоличествоЗаказано;
	ЭлементыФормы.ГруппыСкладов.Колонки.КоличествоСвободно.ТекстПодвала = общКоличествоСвободно;
	
	Если общПроцент=100 Тогда
		ЭлементыФормы.ГруппыСкладов.Колонки.Процент.ЦветФонаПодвала = webЦвета.БледноЗеленый;
	ИначеЕсли общПроцент<100 Тогда
		ЭлементыФормы.ГруппыСкладов.Колонки.Процент.ЦветФонаПодвала = webЦвета.СветлоРозовый;
	ИначеЕсли общПроцент>100 Тогда
		ЭлементыФормы.ГруппыСкладов.Колонки.Процент.ЦветФонаПодвала = webЦвета.Сливовый;
	КонецЕсли;
	
КонецПроцедуры


//-------Вычисляет свободные остатки по ГруппамСкладов на момент времени документа-----------
Процедура КоманднаяПанельТовары2Обновить(Кнопка)
	
	Если НЕ ( РольДоступна("ПолныеПрава")
			или РольДоступна("Кладовщик") ) Тогда  //25.12.2015
		Предупреждение("У Вас недостаточно прав Для выполнения Обновления списка отгрузки!", 30);
	    Возврат;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Приход тогда
		Предупреждение("Раcпределение работает ТОЛЬКО для отгрузки!", 10);
		Возврат;
	КонецЕсли;	

	Если (ссылка.Проведен или ссылка.Выполнено) Тогда
	Предупреждение("      Задание уже выполняется! Резерв установлен!
				   |Обновление списка - потребует новой распечатки Для кладовщиков!
				   |	 	    Обновление - не выполнено!", 30);
	Возврат;
    КонецЕсли;
	
	Если ЗаказыПокупателей.Количество()=0 Тогда
		Предупреждение("Не заполнен список заказов!
					   |Обновление отменено!", 30);
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ЗаказыПокупателей;
		Возврат;
	КонецЕсли;

	Если естьРеализации() Тогда
		Предупреждение("Существуют уже проведенные реализации!
						|Отмените проведение и повторите Обновление!", 30);
			ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ЗаказыПокупателей;
			Возврат;
	КонецЕсли;	
		
	Если ЭтотОбъект.Проведен и Товары.Количество()>0 Тогда
	    Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Перед обновлением - требуется снять Резерв 
					   |по текущему заданию, Для правильного расчета остатков.
					   |
					   |Обновление будет учитывать все Резервы всех заданий!
					   |
					   |Вы уверены в необходимости Обновления?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
				Предупреждение("Обновление отменено. 
							   |Резерв не изменился.");
			Возврат;
		КонецЕсли;
		ЭтотОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Предупреждение("Резерв по "+строка(Товары.Количество())+" строкам Товаров снят. Всё готово Для обновления...", 30);
 	КонецЕсли;
	
	
	
//+++( 19.08.2016  БЛОКИРОВКА Заказов покупателей - НА НАЛИЧИЕ ДРУГИХ ЗАДАНИЙ НА ПЕРЕМЕЩЕНИЕ ИЛИ Других заданий на ОТГРУЗКУ! ============
запрос2 = новый запрос;
запрос2.Текст = "ВЫБРАТЬ
                |	РезервНаСкладахОстатки.ЗаказПокупателя,
                |	СУММА(РезервНаСкладахОстатки.КоличествоОстаток) КАК КоличествоОстаток
                |ИЗ
                |	РегистрНакопления.РезервНаСкладах.Остатки(, ЗаказПокупателя В (&СписокЗаказов)) КАК РезервНаСкладахОстатки
                |
                |СГРУППИРОВАТЬ ПО
                |	РезервНаСкладахОстатки.ЗаказПокупателя
				|ИМЕЮЩИЕ СУММА(РезервНаСкладахОстатки.КоличествоОстаток)>0";
СписокЗаказов = новый СписокЗначений;
СписокЗаказов.ЗагрузитьЗначения( ЗаказыПокупателей.ВыгрузитьКолонку("ЗаказПокупателя") );
запрос2.УстановитьПараметр("СписокЗаказов",	СписокЗаказов);
рез2 = запрос2.Выполнить();
Если не рез2.Пустой() тогда
	выборка2 = рез2.Выбрать();
	текст2 = "";
	пока выборка2.Следующий() цикл
	текст2 = текст2+строка(выборка2.ЗаказПокупателя)+" ЕЩЁ ОТГРУЖАЕТСЯ ПО СКЛАДАМ "+строка(выборка2.КоличествоОстаток)+" щт.
	|";
	КонецЦикла;
	Текст2 = Текст2+" РАСПРЕДЕНИЕ ПО СКЛАДАМ МОЖЕТ БЫТЬ НЕПРАВИЛЬНЫМ!";
    Сообщить(Текст2, СтатусСообщения.Внимание ); 
	Предупреждение(Текст2,30);
	Возврат;// ЗАПРЕТ !
КонецЕсли;
//+++)



	//---------------обновить количество по заказам-----------------------
		ПолучитьАссортимент();
		ПересчетКоличестваИСуммПоЗаказам();

//+++ 02.11.2014 - обновление приводит к полному обновлению (автоматической сортировке) 
Если ГруппыСкладов.Количество()>0 Тогда
Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос( "Полность Обновить количество по группам?", Режим, 10);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ГруппыСкладов.Очистить();
		ТабЗначРезерв.Строки.Очистить();
	КонецЕсли;
КонецЕсли; 

	//---------полное обновление при 0-ых приоритетах - работает ---------------------------
	Если ГруппыСкладов.Количество()=0 или ГруппыСкладов.Итог("Приоритет")=0 Тогда
		
		ГруппыСкладов.Очистить();
		ТабЗначРезерв.строки.Очистить();
		
		//Плотников. 23.08.2016 галочки только Ангар-И и исключить Ангар-И =============================
		использоватьОтбор = ложь;		
		Для каждого стрИ из СписокГрупп Цикл
			Если стрИ.Флаг тогда
				использоватьОтбор = Истина;
			КонецЕсли;	
		КонецЦикла;
		
		СписокИсключений = Новый СписокЗначений;
		СписокОтбираемых = Новый СписокЗначений;
		Если Исключать = 0 и использоватьОтбор Тогда
			отбор = новый Структура;
			отбор.Вставить("Флаг",истина);
			ТЗ = СписокГрупп.Выгрузить();
			ТЗФлаг = ТЗ.Скопировать(Отбор);
			Массив = ТЗФлаг.ВыгрузитьКолонку("Группа");
			СписокИсключений.ЗагрузитьЗначения(Массив);
		ИначеЕсли Исключать = 1 и использоватьОтбор Тогда
			отбор = новый Структура;
			отбор.Вставить("Флаг",истина);
			ТЗ = СписокГрупп.Выгрузить();
			ТЗФлаг = ТЗ.Скопировать(Отбор);
			Массив = ТЗФлаг.ВыгрузитьКолонку("Группа");
			СписокОтбираемых.ЗагрузитьЗначения(Массив);
		КонецЕсли;
		
		
		//+++( 20.12.2016 --- ТЕНДЕРЫ --- корректировка Списков отбираемых и Исключений ---
		Если Подразделение.Код = "00005" тогда
			КолТендеры = 0; 
			списЗакТендеры   = новый СписокЗначений;
			списЗакНЕтендеры = новый СписокЗначений; 
			Если Исключать>2 тогда // для обратного пересчета
				Исключать = 0; 
			КонецЕсли;	
			для каждого стр1 из ЭтотОбъект.ЗаказыПокупателей цикл
				флТендер = (стр1.ЗаказПокупателя.ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ФормулаАвтоПлюс) ;
				////28.12.2016 - 26.04.2017 - дополнительная проверка по [v]Тендеры
				//Если флТендер тогда
					флТендер  = ПолучитьФлагТендер(стр1.ЗаказПокупателя);
				//КонецЕсли;
				
				если флТендер тогда
					КолТендеры = КолТендеры + 1;
					списЗакТендеры.Добавить( стр1.ЗаказПокупателя );
				Иначе
					списЗакНЕтендеры.Добавить( стр1.ЗаказПокупателя );
				КонецЕсли;	
			КонецЦикла;	
			
			грТендер = справочники.ГруппыСкладов.НайтиПоКоду("13");
			Если КолТендеры=0 тогда //------------------------- нет тендеров, отгрузка с группы Тендеры Запрещена --------------------------
				
				Для каждого стр1 из СписокГрупп цикл
					Если стр1.Группа = грТендер тогда
						Если Исключать = 0  тогда // добавляем в исключений
							если стр1.Флаг = ЛОЖЬ тогда
								СписокИсключений.Добавить(грТендер);
								использоватьОтбор = Истина;
								сообщить("Группа "+строка(грТендер)+" - добавлена в список исключений автоматически!");
							КонецЕсли;
						ИначеЕсли Исключать = 1 тогда   
							СписокИсключений.Добавить(грТендер); // добавляем в исключения!
							использоватьОтбор = Истина;
							Если стр1.Флаг тогда    // если был включён -  тендер для нетендерных заказов - убираем!
								стр222 = СписокОтбираемых.НайтиПоЗначению(грТендер);
								СписокОтбираемых.Удалить(стр222);
								сообщить("Группа "+строка(грТендер)+" - исключена из отбора автоматически!");
							КонецЕсли;
							
							Если СписокОтбираемых.Количество()=0 тогда
								Исключать = 0; // наоборот - исключения!
							Иначе
								Исключать = 2; // и вкл. и выкл !
							КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;	
				КонецЦикла;	
				
			ИначеЕсли КолТендеры=ЗаказыПокупателей.Количество() тогда //------------------- ТОЛЬКО заказы по Тендерам -----------------------------
				
				Для каждого стр1 из СписокГрупп цикл
					Если стр1.Группа = грТендер тогда
						Если Исключать = 1 тогда // список отбираемых - добавляем
							если стр1.Флаг=ЛОЖЬ тогда
								СписокОтбираемых.Добавить(грТендер);
								использоватьОтбор = Истина;
								сообщить("Добавлена отгрузка по группе "+строка(грТендер)+" автоматически!");
							КонецЕсли;
						ИначеЕсли Исключать = 0 тогда
							Если стр1.Флаг тогда    // Стоит в исключениях! значит так надо?!
								//стр222 = СписокИсключений.НайтиПоЗначению(грТендер);
								//СписокИсключений.Удалить(стр222);
								сообщить("Внимание! Группа "+строка(грТендер)+" - ЕСТЬ В Исключениях! Отгрузка будет делаться с других складов!");
							иначе
								СписокОтбираемых.Добавить(грТендер); // список отбираемых - добавляем + могут быть другие склады
								использоватьОтбор = Истина;
							КонецЕсли;
							
							Если СписокИсключений.Количество()=0 тогда
								Исключать = 1; // наоборот - ВКЛючения!
							ИначеЕсли СписокОтбираемых.Количество()>0 и СписокИсключений.Количество()>0 тогда
								Исключать = 2; // и вкл. и выкл
							ИначеЕсли СписокОтбираемых.Количество()=0 тогда // и так уже есть
								Исключать = 0; 
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			Иначе //КолТендеры>0 и  КолТендеры<>ЗаказыПокупателей.Количество() тогда // самый сложный вариант
				Исключать = 3; // 2 запроса склеиваем вместе...
				использоватьОтбор = Истина;
			КонецЕсли;	
		КонецЕсли;
		//+++)
		
		//----------------------формирование запросов--------------------------------		
		Если использоватьОтбор тогда
			Если Исключать = 0 тогда
				Результат = ОбновитьСписокГруппТоваров(СписокИсключений);
				
			ИначеЕсли Исключать = 1 тогда
				Результат = ОбновитьСписокГруппТоваров(,СписокОтбираемых);
				
				// очищаем
				если КолТендеры=ЗаказыПокупателей.Количество() тогда 
					СчитаемНедогрузы.Очистить();
				КонецЕсли;
				
			ИначеЕсли Исключать = 2 тогда
				Результат = ОбновитьСписокГруппТоваров(СписокИсключений,СписокОтбираемых);
				
			ИначеЕсли Исключать = 3 тогда 
				Сообщить("В Задании есть и заказы по Тендерам и заказы без Тендеров! Рекомендуется разделите Задание на 2 части!", СтатусСообщения.Внимание);
				
				СписокОтбираемых.Добавить(грТендер);
				Результат1 = ОбновитьСписокГруппТоваров(,СписокОтбираемых,списЗакТендеры);
				//СчитаемНедогрузы1 = СчитаемНедогрузы.Скопировать();   //не надо списывать с ОТХ для Тендеров!
				ДобавитьГруппуСкладов(Результат1, 88);
				
				СписокИсключений.Добавить(грТендер);
				Результат2 = ОбновитьСписокГруппТоваров(СписокИсключений,,списЗакНЕтендеры);
				ДобавитьГруппуСкладов(Результат2, 88);
				//для каждого стр1 из СчитаемНедогрузы1 цикл
				//	стр2 = СчитаемНедогрузы.Добавить();
				//	ЗаполнитьЗначенияСвойств(стр2, стр1);
				//КонецЕсли;
				Результат = неопределено;
			КонецЕсли;	
		Иначе
			Результат = ОбновитьСписокГруппТоваров();
		КонецЕсли;
		
	//=========================== СПИСАНИЕ С ОТХ ====================================================	
		
		 //+Плотников, проверить все ли товары найдены,если не все, то пытаемся найти на ОТХ
		 
		 ТЗ = СчитаемНедогрузы.Скопировать();
		 Для Индекс = -ТЗ.Количество() По -1 Цикл
		 	уд = ТЗ.Получить(-Индекс-1);
		 	Если ТипЗнч(уд.номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
		    	 ТЗ.Удалить(-Индекс-1);
		 	КонецЕсли;
		 КонецЦикла;
		 		 
		 ТЗ.Свернуть("Номенклатура,КоличествоЗаказано","КоличествоСвободно");
		 
		 Для Индекс = -ТЗ.Количество() По -1 Цикл
		 	уд = ТЗ.Получить(-Индекс-1);
		 	Если уд.КоличествоЗаказано <= уд.КоличествоСвободно Тогда
		    	 ТЗ.Удалить(-Индекс-1);
		 	КонецЕсли;
		 КонецЦикла;
		 
		 Если ТЗ.Количество() > 0 Тогда // Если есть записи - это недогрузы, проверим есть ли что-нибудь на ОТХ
			 Запрос = Новый Запрос;
			 Запрос.УстановитьПараметр("ТЗ",ТЗ);
			 //Запрос.УстановитьПараметр("АШК",Справочники.Контрагенты.НайтиПоКоду("П002518"));
			 Если Подразделение = Справочники.Подразделения.НайтиПоКоду("00005") ТОгда 
				 список = Новый СписокЗначений;
				 Список.Добавить(Справочники.Подразделения.НайтиПоКоду("00005"));
				 Список.Добавить(Справочники.Подразделения.ПустаяСсылка());
				 
				 //набор = РегистрыСведений.ОтсрочкиПлатежейПоставщикам.СоздатьНаборЗаписей();
				 //набор.Прочитать();
				 //табКонтр = набор.Выгрузить();
				 //табКонтр.Свернуть("Поставщик");
				 //--------23.05.2017----------------------через запрос!-------------------
				 Запрос1 = Новый Запрос;
				 Запрос1.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ОтсрочкиПлатежейПоставщикам.Поставщик
				 |ИЗ РегистрСведений.ОтсрочкиПлатежейПоставщикам КАК ОтсрочкиПлатежейПоставщикам";
				 табКонтр = Запрос1.Выполнить().Выгрузить();
				 //------------------------------------------------------------------------
				 
				 СписокКонтрагентов = новый СписокЗначений;
				 СписокКонтрагентов.ЗагрузитьЗначения(табКонтр.ВыгрузитьКолонку("Поставщик"));
			 Иначе
				 СписокКонтрагентов = новый СписокЗначений;
				 СписокКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоКоду("П002518")); 
				 СписокКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоКоду("П007527"));
				 список = Новый СписокЗначений;
				 Список.Добавить(Подразделение);
			 КонецЕсли;			 
			 
			 Запрос.УстановитьПараметр("СписокКонтрагентов",СписокКонтрагентов);
			 Запрос.УстановитьПараметр("список",Список);
			  //+++ 21.04.2017 ВТ_Огр
			 Запрос.Текст = "ВЫБРАТЬ
			                |	ТЗ.Номенклатура,
			                |	ТЗ.КоличествоЗаказано,
			                |	ТЗ.КоличествоСвободно
			                |ПОМЕСТИТЬ Товары
			                |ИЗ &ТЗ КАК ТЗ;
			                |////////////////////////////////////////////////////////////////////////////////
			                |ВЫБРАТЬ
			                |	Товары.Номенклатура,
			                |	ВЫБОР
			                |		КОГДА Товары.КоличествоЗаказано - Товары.КоличествоСвободно <= ЕСТЬNULL(ТоварыНаОтветственномХраненииОстатки.КоличествоОстаток, 0)
			                |			ТОГДА Товары.КоличествоЗаказано - Товары.КоличествоСвободно
			                |		ИНАЧЕ ЕСТЬNULL(ТоварыНаОтветственномХраненииОстатки.КоличествоОстаток, 0)
			                |	КОНЕЦ КАК Количество,
			                |	ТоварыНаОтветственномХраненииОстатки.Контрагент,
						   |	ТоварыНаОтветственномХраненииОстатки.ДоговорКонтрагента //Удалить,
							|   //Удалить ТоварыНаОтветственномХраненииОстатки.Склад.ГруппаСкладов как ГруппаСкладов
			                |ИЗ
			                |	Товары КАК Товары
			                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаОтветственномХранении.Остатки( ,
			                |				Контрагент В (&СписокКонтрагентов)
			                |					И Склад.Подразделение В (&Список)
							|                   //Исключения И НЕ Склад.ГруппаСкладов В(&Иск)
							|                   //отбираемые И Склад.ГруппаСкладов В(&Отб)
							|) КАК ТоварыНаОтветственномХраненииОстатки
			                |		ПО Товары.Номенклатура = ТоварыНаОтветственномХраненииОстатки.Номенклатура
							|ГДЕ
							|	ВЫБОР
							|			КОГДА Товары.КоличествоЗаказано - Товары.КоличествоСвободно <= ЕСТЬNULL(ТоварыНаОтветственномХраненииОстатки.КоличествоОстаток, 0)
							|				ТОГДА Товары.КоличествоЗаказано - Товары.КоличествоСвободно
							|			ИНАЧЕ ЕСТЬNULL(ТоварыНаОтветственномХраненииОстатки.КоличествоОстаток, 0)
							|		КОНЕЦ > 0
							|";
								 
			 СписокИсключенийП = Новый СписокЗначений;
			 СписокОтбираемыхП = Новый СписокЗначений;
			 Если Исключать = 0 и использоватьОтбор Тогда
				 отбор = новый Структура;
				 отбор.Вставить("Флаг",истина);
				 ТЗ = СписокГрупп.Выгрузить();
				 ТЗФлаг = ТЗ.Скопировать(Отбор);
				 Массив = ТЗФлаг.ВыгрузитьКолонку("Группа");
				 СписокИсключенийП.ЗагрузитьЗначения(Массив);
				 Запрос.Текст = СтрЗаменить(Запрос.Текст,"//Исключения","");
				 Запрос.УстановитьПараметр("Иск",СписокИсключенийП);
			 ИначеЕсли Исключать = 1 и использоватьОтбор Тогда
				 отбор = новый Структура;
				 отбор.Вставить("Флаг",истина);
				 ТЗ = СписокГрупп.Выгрузить();
				 ТЗФлаг = ТЗ.Скопировать(Отбор);
				 Массив = ТЗФлаг.ВыгрузитьКолонку("Группа");
				 СписокОтбираемыхП.ЗагрузитьЗначения(Массив);
				 Запрос.Текст = СтрЗаменить(Запрос.Текст,"//отбираемые","");
				 Запрос.УстановитьПараметр("Отб",СписокОтбираемыхП);
			 КонецЕсли;				
			 
			 Рез = Запрос.Выполнить().Выгрузить();
			 
			 Запрос.Текст = СтрЗаменить(Запрос.Текст,"//Удалить","");
			 
			 ГрВыбор = Запрос.Выполнить().Выгрузить();
			 
			 Если Рез.Количество() > 0 Тогда
				 Ответ = Вопрос("Есть товары которые требуют списания с ОТХ, 
				 |выполнить авоматическое списание с ОТХ необходимых товаров?", РежимДиалогаВопрос.ДаНет);
				 Если Ответ = КодВозвратаДиалога.Да Тогда
					 ВЫполнитьСписаниеСОТХ(Рез,ГрВыбор);
				 КонецЕсли;	//Да-24.04.2017  если нет - то все равно надо формировать, но с недогрузом...
				 
					 //Плотников. 23.08.2016 галочки только Ангар-И и исключить Ангар-И =============================
					 использоватьОтбор = ложь;		
					 Для каждого стрИ из СписокГрупп Цикл
						 Если стрИ.Флаг тогда
							 использоватьОтбор = Истина;
						 КонецЕсли;	
					 КонецЦикла;
					 
					 СписокИсключений = Новый СписокЗначений;
					 СписокОтбираемых = Новый СписокЗначений;
					 Если Исключать = 0 и использоватьОтбор Тогда
						 отбор = новый Структура;
						 отбор.Вставить("Флаг",истина);
						 ТЗ = СписокГрупп.Выгрузить();
						 ТЗФлаг = ТЗ.Скопировать(Отбор);
						 Массив = ТЗФлаг.ВыгрузитьКолонку("Группа");
						 СписокИсключений.ЗагрузитьЗначения(Массив);
					 ИначеЕсли Исключать = 1 и использоватьОтбор Тогда
						 отбор = новый Структура;
						 отбор.Вставить("Флаг",истина);
						 ТЗ = СписокГрупп.Выгрузить();
						 ТЗФлаг = ТЗ.Скопировать(Отбор);
						 Массив = ТЗФлаг.ВыгрузитьКолонку("Группа");
						 СписокОтбираемых.ЗагрузитьЗначения(Массив);
					 КонецЕсли;
					 
					 //+++( 20.12.2016 --- ТЕНДЕРЫ --- корректировка Списков отбираемых и Исключений ---
					 Если Подразделение.Код = "00005" тогда
						 КолТендеры = 0; 
						 списЗакТендеры   = новый СписокЗначений;
						 списЗакНЕтендеры = новый СписокЗначений; 
						 Если Исключать>2 тогда // для обратного пересчета
							 Исключать = 0; 
						 КонецЕсли;	
						 для каждого стр1 из ЭтотОбъект.ЗаказыПокупателей цикл
							 флТендер = (стр1.ЗаказПокупателя.ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ФормулаАвтоПлюс) ;
							 
							 //28.12.2016 - дополнительная проверка по категории заказа [v]Тендеры
							 Если флТендер тогда
								 
								флТендер  = ПолучитьФлагТендер(стр1.ЗаказПокупателя); // грузим
								
								Если не флТендер тогда //26.04.2017 - НЕ ставят [v]Тендеры, придётся заставлять выбирать еще раз...
									Если Вопрос(строка(стр1.ЗаказПокупателя)+" - ""тендерный"",
										|НО у него не установлена категория отгрузки [ ] Тендеры !
										|
										| Надо отгружать этот со складов группы ""Тендеры""?!",РежимДиалогаВопрос.ДаНет, 0)=КодВозвратаДиалога.Да тогда
										флТендер = Истина;
									Иначе
										Предупреждение(строка(стр1.ЗаказПокупателя)+" - ""тендерный"",
										|НО отгружаться он будет как обычный заказ (без группы Тендеры)!",30);
									КонецЕсли;
								Иначе
									Предупреждение(строка(стр1.ЗаказПокупателя)+" - ""тендерный"",
									|и у этого заказа - установлена категория отгрузки [v]Тендеры,
									|поэтому Заказ будет грузиться со складов группы ""Тендеры""!",30);
								КонецЕсли;
								
							 КонецЕсли;
							 
							 если флТендер тогда
								 КолТендеры = КолТендеры + 1;
								 списЗакТендеры.Добавить( стр1.ЗаказПокупателя );
							 Иначе
								 списЗакНЕтендеры.Добавить( стр1.ЗаказПокупателя );
							 КонецЕсли;	
						 КонецЦикла;	
						 
						 грТендер = справочники.ГруппыСкладов.НайтиПоКоду("13");
						 Если КолТендеры=0 тогда //------------------------- нет тендеров, отгрузка с группы Тендеры Запрещена --------------------------
							 
							 Для каждого стр1 из СписокГрупп цикл
								 Если стр1.Группа = грТендер тогда
									 Если Исключать = 0  тогда // добавляем в исключений
										 если стр1.Флаг = ЛОЖЬ тогда
											 СписокИсключений.Добавить(грТендер);
											 использоватьОтбор = Истина;
											 сообщить("Группа "+строка(грТендер)+" - добавлена в список исключений автоматически!");
										 КонецЕсли;
									 ИначеЕсли Исключать = 1 тогда   
										 СписокИсключений.Добавить(грТендер); // добавляем в исключения!
										 использоватьОтбор = Истина;
										 Если стр1.Флаг тогда    // если был включён -  тендер для нетендерных заказов - убираем!
											 стр222 = СписокОтбираемых.НайтиПоЗначению(грТендер);
											 СписокОтбираемых.Удалить(стр222);
											 сообщить("Группа "+строка(грТендер)+" - исключена из отбора автоматически!");
										 КонецЕсли;
										 
										 Если СписокОтбираемых.Количество()=0 тогда
											 Исключать = 0; // наоборот - исключения!
										 Иначе
											 Исключать = 2; // и вкл. и выкл !
										 КонецЕсли;
										 
									 КонецЕсли;
								 КонецЕсли;	
							 КонецЦикла;	
							 
						 ИначеЕсли КолТендеры=ЗаказыПокупателей.Количество() тогда //------------------- ТОЛЬКО заказы по Тендерам -----------------------------
							 
							 Для каждого стр1 из СписокГрупп цикл
								 Если стр1.Группа = грТендер тогда
									 Если Исключать = 1 тогда // список отбираемых - добавляем
										 если стр1.Флаг=ЛОЖЬ тогда
											 СписокОтбираемых.Добавить(грТендер);
											 использоватьОтбор = Истина;
											 сообщить("Добавлена отгрузка по группе "+строка(грТендер)+" автоматически!");
										 КонецЕсли;
									 ИначеЕсли Исключать = 0 тогда
										 Если стр1.Флаг тогда    // Стоит в исключениях! значит так надо?!
											 //стр222 = СписокИсключений.НайтиПоЗначению(грТендер);
											 //СписокИсключений.Удалить(стр222);
											 сообщить("Внимание! Группа "+строка(грТендер)+" - ЕСТЬ В Исключениях! Отгрузка будет делаться с других складов!");
										 иначе
											 СписокОтбираемых.Добавить(грТендер); // список отбираемых - добавляем + могут быть другие склады
											 использоватьОтбор = Истина;
										 КонецЕсли;
										 
										 Если СписокИсключений.Количество()=0 тогда
											 Исключать = 1; // наоборот - ВКЛючения!
										 ИначеЕсли СписокОтбираемых.Количество()>0 и СписокИсключений.Количество()>0 тогда
											 Исключать = 2; // и вкл. и выкл
										 ИначеЕсли СписокОтбираемых.Количество()=0 тогда // и так уже есть
											 Исключать = 0; 
										 КонецЕсли;
									 КонецЕсли;
								 КонецЕсли;
							 КонецЦикла;
							 
						 Иначе //КолТендеры>0 и  КолТендеры<>ЗаказыПокупателей.Количество() тогда // самый сложный вариант
							 Исключать = 3; // 2 запроса склеиваем вместе...
							 использоватьОтбор = Истина;
		 				 	 Сообщить("В Задании есть и заказы по Тендерам и заказы без Тендеров!", СтатусСообщения.Внимание);
						 КонецЕсли;	
					 КонецЕсли;
					 //+++)
					 
					 
					 //----------------------формирование запросов--------------------------------		
					 Если использоватьОтбор тогда
						 Если Исключать = 0 тогда
							 Результат = ОбновитьСписокГруппТоваров(СписокИсключений);
							 
						 ИначеЕсли Исключать = 1 тогда
							 Результат = ОбновитьСписокГруппТоваров(,СписокОтбираемых);
							 
							 // очищаем
							 если КолТендеры=ЗаказыПокупателей.Количество() тогда 
								 СчитаемНедогрузы.Очистить();
							 КонецЕсли;
							 
						 ИначеЕсли Исключать = 2 тогда
							 Результат = ОбновитьСписокГруппТоваров(СписокИсключений,СписокОтбираемых);
							 
						 ИначеЕсли Исключать = 3 тогда 
							 
							 СписокОтбираемых.Добавить(грТендер); //может грузиться и с других складов, ТОЛЬКО при их выборе!
							 
							 Результат1 = ОбновитьСписокГруппТоваров(,СписокОтбираемых,списЗакТендеры);
							 //СчитаемНедогрузы1 = СчитаемНедогрузы.Скопировать();   //не надо списывать с ОТХ для Тендеров!
							 ДобавитьГруппуСкладов(Результат1, 88);
							 
							 СписокИсключений.Добавить(грТендер);
							 СписокОтбираемых.Очистить();
							 Результат2 = ОбновитьСписокГруппТоваров(СписокИсключений,,списЗакНЕтендеры);
							 ДобавитьГруппуСкладов(Результат2, 88);
							 
							 Результат = неопределено; 
						 КонецЕсли;	
					 Иначе
						 Результат = ОбновитьСписокГруппТоваров();
					 КонецЕсли;
					 
				 //КонецЕсли; //Да-24.04.2017
			 КонецЕсли;//рез>0
		 КонецЕсли;
		 
		 //-Плотников, 28.09.2016
		 
	 //==============================================================================================
		 
		 ДобавитьГруппуСкладов(Результат, 88); //+++ 28.10.2014 добавляем все склады И СРАЗУ ставим ГАЛКИ!
		 
	// ОтгрузкаПоМаксОстаткам - внутри запроса!
		 ГруппыСкладов.Сортировать("КоличествоЗаказано УБЫВ");   //11.06.2015 КоличествоСвободно >> КоличествоЗаказано
		 ТабЗначРезерв.Строки.Сортировать("КоличествоЗаказано УБЫВ");
		 
 		 Для каждого стр1 из ГруппыСкладов Цикл
			 стр1.Приоритет = стр1.НомерСтроки;
			 стр1.Флаг = Истина;
		 КонецЦикла;
		 
	 КонецЕсли;	
	 
//+++( 02.11.2014===============================По Новому.... идем прямо по дереву...===========================	 
	Если ТабЗначРезерв.Строки.Количество()=0 Тогда
	Предупреждение("Таблица распределения товаров по складам - пуста!
				   |Еще раз нажмите [Обновить] и измените порядок групп.", 30);
	Возврат;
	КонецЕсли;
	 
//02.11.2014 - новая Функция производит расчет взаимоисключения товаров прямо по дереву! 
	ЗаполнитьСписокИДеревоГруппВзаимоисключаяПредыдущиеГруппы();
	 
	 Если Товары.Количество()>0 Тогда
		 Предупреждение("После обновления порядка отгрузки 
		 				|требуется перезаполнить товары!",10);
	 КонецЕсли;
	 
КонецПроцедуры

//+++ 28.12.2016 - доп. проверка на [v]Тендеры (категорию заказа)
функция ПолучитьФлагТендер(Зак)
	рез = ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КатегорииОбъектов.Объект
	|ИЗ
	|	РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
	|ГДЕ
	|	КатегорииОбъектов.Объект = &Объект
	|	И КатегорииОбъектов.Категория = &Категория";
	
	Запрос.УстановитьПараметр("Объект", Зак);
	Запрос.УстановитьПараметр("Категория", справочники.КатегорииОбъектов.НайтиПоКоду("00044") ); //Тендеры
	
	Результат = Запрос.Выполнить();
	рез = не Результат.Пустой();
	
	возврат рез;
КонецФункции	


процедура ЗаполнитьСписокИДеревоГруппВзаимоисключаяПредыдущиеГруппы()
	
	//вся заказанная номенклатура по всем заказам сразу
	Запрос = новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	                |	СУММА(
					//Миронычев
					|	ВЫБОР
					|	КОГДА ЕСТЬNULL(СостояниеЗаказовИМ.Состояние, 0) = 0
					|		ТОГДА ЗаказыПокупателейОстатки.КоличествоОстаток
					|	ИНАЧЕ СостояниеЗаказовИМ.Количество
					|	КОНЕЦ
					//КонецМиронычев
					|	) КАК КоличествоЗаказаноПоЗаказам,
	                |	СУММА(0) КАК КоличествоУжеЗаказано
	                |ИЗ
	                |	РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя В (&СписокЗаказовПокупателя)
					|И Номенклатура.Услуга = ЛОЖЬ
					|) КАК ЗаказыПокупателейОстатки
					//Миронычев
					|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеЗаказовИМ КАК СостояниеЗаказовИМ
					|ПО (ВЫБОР
					|		КОГДА ЗаказыПокупателейОстатки.ЗаказПокупателя.ТипЗаказа = 10
					|			ТОГДА ЗаказыПокупателейОстатки.ЗаказПокупателя = СостояниеЗаказовИМ.ЗаказПервичный
					|		ИНАЧЕ ЗаказыПокупателейОстатки.ЗаказПокупателя = СостояниеЗаказовИМ.ЗаказОбщий
					|	КОНЕЦ)
					|	И ЗаказыПокупателейОстатки.Номенклатура = СостояниеЗаказовИМ.Номенклатура
                    //КонецМиронычев
	                |ГДЕ
	                |	ЗаказыПокупателейОстатки.КоличествоОстаток > 0  и
	               	//Миронычев
	                |       ВЫБОР
	                |			КОГДА ЗаказыПокупателейОстатки.ЗаказПокупателя.Подразделение.Код = ""00005""
	                |				ТОГДА ВЫБОР
	                |						КОГДА ЗаказыПокупателейОстатки.ЗаказПокупателя.Контрагент.Код <> ""П001549""
	                |							ТОГДА ЕСТЬNULL(СостояниеЗаказовИМ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостояниеЗаказовИМ.Перемещен)) = ЗНАЧЕНИЕ(Перечисление.СостояниеЗаказовИМ.Перемещен)
	                
	                |			ИНАЧЕ 0 = 0
	                |		КОНЕЦ
                    |						ИНАЧЕ ЕСТЬNULL(СостояниеЗаказовИМ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостояниеЗаказовИМ.Перемещен)) <> ЗНАЧЕНИЕ(Перечисление.СостояниеЗаказовИМ.Отменен)
	                |					КОНЕЦ

					//КонецМиронычев
	                |СГРУППИРОВАТЬ ПО
	                |	ЗаказыПокупателейОстатки.Номенклатура";
МассивЗаказовПокупателя = ЗаказыПокупателей.ВыгрузитьКолонку("ЗаказПокупателя");
Запрос.УстановитьПараметр("СписокЗаказовПокупателя", МассивЗаказовПокупателя);
ТаблицаЗаказано = Запрос.Выполнить().Выгрузить();

КолСтрокТоваров = 0;


//теперь идем по дереву 4 уровня вложенности...
Для каждого стрГруппа из ТабЗначРезерв.Строки Цикл
	Для каждого стрТовар из стрГруппа.Строки Цикл
		Для каждого стрСклад из стрТовар.Строки Цикл
			Для каждого стрАдрес из стрСклад.Строки Цикл
				строкиЗаказано = ТаблицаЗаказано.НайтиСтроки( новый Структура("Номенклатура", стрАдрес.Номенклатура) );
				стр1 = строкиЗаказано[0];
				ОсталосьЗаказать = стр1.КоличествоЗаказаноПоЗаказам - стр1.КоличествоУжеЗаказано;
				
				стрАдрес.КоличествоЗаказано = мин(ОсталосьЗаказать, стрАдрес.КоличествоОстаток); // это пойдет в Товары!
				стр1.КоличествоУжеЗаказано = стр1.КоличествоУжеЗаказано + стрАдрес.КоличествоЗаказано; // прибавляем сюда!
			
				стрАдрес.КоличествоСвободно = мин(стр1.КоличествоЗаказаноПоЗаказам, стрАдрес.КоличествоОстаток); // максимальное количество на этом складе!
				
				Если стрАдрес.КоличествоЗаказано>0 Тогда
					КолСтрокТоваров = КолСтрокТоваров + 1;
				КонецЕсли;
				
			КонецЦикла;
			//обратный расчет 
			стрСклад.КоличествоЗаказано = стрСклад.Строки.Итог("КоличествоЗаказано");
			стрСклад.КоличествоСвободно = стрСклад.Строки.Итог("КоличествоСвободно");
			стрСклад.КоличествоОстаток  = стрСклад.Строки.Итог("КоличествоОстаток");
        КонецЦикла;
		//обратный расчет 
		стрТовар.КоличествоЗаказано = стрТовар.Строки.Итог("КоличествоЗаказано");
		стрТовар.КоличествоСвободно = стрТовар.Строки.Итог("КоличествоСвободно");
		стрТовар.КоличествоОстаток  = стрТовар.Строки.Итог("КоличествоОстаток");
     КонецЦикла;
	//обратный расчет 
	стрГруппа.КоличествоЗаказано = стрГруппа.Строки.Итог("КоличествоЗаказано");
	стрГруппа.КоличествоСвободно = стрГруппа.Строки.Итог("КоличествоСвободно");
	стрГруппа.КоличествоОстаток  = стрГруппа.Строки.Итог("КоличествоОстаток");
КонецЦикла;	

Для i=0 по ТабЗначРезерв.Строки.Количество()-1 Цикл
	Если ГруппыСкладов[i].ГруппаСкладов = ТабЗначРезерв.Строки[i].ГруппаСкладов Тогда
		ГруппыСкладов[i].КоличествоЗаказано = ТабЗначРезерв.Строки[i].КоличествоЗаказано;
		ГруппыСкладов[i].КоличествоСвободно = ТабЗначРезерв.Строки[i].КоличествоСвободно;
	Иначе
		Сообщить(строка(i)+" строка - Порядок групп складов не соответствует порядку складов!");
	КонецЕсли;	
КонецЦикла;

ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Заголовок = "3.Товары ("+строка(КолСтрокТоваров)+")";

//+++( 05.02.2018 ПОРЯДОК вниз!
 ГруппаАнгар3 = справочники.ГруппыСкладов.НайтиПоКоду(38);
 стрГруппаАнгар3 = ГруппыСкладов.Найти(ГруппаАнгар3 , "ГруппаСкладов");
 Если стрГруппаАнгар3 <> неопределено тогда
	    Индекс1 = ГруппыСкладов.Индекс(стрГруппаАнгар3);
		N= ГруппыСкладов.Количество();
		k = N-1-Индекс1;
	Если k>0 тогда
		для i=1 по k цикл
	 	ГруппыСкладов.Сдвинуть(Индекс1, +1);       //вниз!
		ТабЗначРезерв.Строки.Сдвинуть(Индекс1, +1);//дерево!
		
        Индекс1 = Индекс1+1;
		КонецЦикла;
	Сообщить("Группа "+ строка(ГруппаАнгар3)+" сдвинута автоматически вниз, товары нужно брать в последнюю очередь!", СтатусСообщения.Информация);
	ЗаполнитьСписокИДеревоГруппВзаимоисключаяПредыдущиеГруппы();	
	КонецЕсли;

 КонецЕсли;	 
//+++)


КонецПроцедуры
				
//=============================ОСНОВНЫЕ ЗАПРОСЫ====================================
Функция ОбновитьСписокГруппТоваров(списокГрупп=Неопределено, текГруппа=Неопределено, СписокЗак=неопределено)
		
	Запрос = Новый Запрос;
	//сразу выбираем склады во временную таблицу
 	Текст0 = "Выбрать спрСклады.Ссылка как Склад
				   |Поместить ВТ_Склады
				   |Из
				   | справочник.Склады как спрСклады
				   |ГДЕ
				   | спрСклады.ЭтоГруппа=ЛОЖЬ
   					|И спрСклады.ПометкаУдаления=ЛОЖЬ
					
 	  				|И	спрСклады.Транзитный=ЛОЖЬ
	                |И спрСклады.ЗапретитьИспользование=ЛОЖЬ
					
				    |//Гр0	И не спрСклады.ГруппаСкладов В (&СписокГруппСкладов)
					 |//Гр1 И спрСклады.ГруппаСкладов В (&ТекГруппа)
				  |;
				  |//////////////////////////////////////////////////////////////////////
				  |";
	
	//Если списокГрупп=Неопределено Тогда //02.11.2014
		
	 //вся заказанная номенклатура по всем заказам сразу  +++ 19.08.2016 - РАЗЛИЧНЫЕ нужны!!!
	Запрос.Текст = Текст0 +"ВЫБРАТЬ 
					//РАЗЛИЧНЫЕ
	                |	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
						//19.08 замена  сумма() - сумма() >> сумма(-)
	                |	СУММА(
					//Миронычев
					|	ВЫБОР
					|	КОГДА ЕСТЬNULL(СостояниеЗаказовИМ.Состояние, 0) = 0
					|		ТОГДА ЗаказыПокупателейОстатки.КоличествоОстаток
					|	ИНАЧЕ СостояниеЗаказовИМ.Количество
					|	КОНЕЦ    //КолИзъятия
					//КонецМиронычев
					|		 )	КАК КоличествоЗаказаноПоЗаказам,
					
	                |	СУММА(0) КАК КоличествоУжеЗаказано
	                |ПОМЕСТИТЬ Заказано
	                |ИЗ
	                |	РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя В (&СписокЗаказовПокупателя)
							//+++ 24.06.2016
					|		и Номенклатура.Услуга=ЛОЖЬ ) КАК ЗаказыПокупателейОстатки
					//Миронычев
					|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеЗаказовИМ КАК СостояниеЗаказовИМ
					|ПО (ВЫБОР
					|		КОГДА ЗаказыПокупателейОстатки.ЗаказПокупателя.ТипЗаказа = 10
					|			ТОГДА ЗаказыПокупателейОстатки.ЗаказПокупателя = СостояниеЗаказовИМ.ЗаказПервичный
					|		ИНАЧЕ ЗаказыПокупателейОстатки.ЗаказПокупателя = СостояниеЗаказовИМ.ЗаказОбщий
					|	КОНЕЦ)
					|	И ЗаказыПокупателейОстатки.Номенклатура = СостояниеЗаказовИМ.Номенклатура
                    //КонецМиронычев

										
					//только +
	                |ГДЕ
	                |	ЗаказыПокупателейОстатки.КоличествоОстаток > 0 и
					//Миронычев
	                |       ВЫБОР
	                |			КОГДА ЗаказыПокупателейОстатки.ЗаказПокупателя.Подразделение.Код = ""00005""
	                |				ТОГДА ВЫБОР
	                |						КОГДА ЗаказыПокупателейОстатки.ЗаказПокупателя.Контрагент.Код <> ""П001549""
	                |							ТОГДА ЕСТЬNULL(СостояниеЗаказовИМ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостояниеЗаказовИМ.Перемещен)) = ЗНАЧЕНИЕ(Перечисление.СостояниеЗаказовИМ.Перемещен)
	                
	                |			ИНАЧЕ 0 = 0
	                |		КОНЕЦ
                    |						ИНАЧЕ ЕСТЬNULL(СостояниеЗаказовИМ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостояниеЗаказовИМ.Перемещен)) <> ЗНАЧЕНИЕ(Перечисление.СостояниеЗаказовИМ.Отменен)
	                |					КОНЕЦ

					//КонецМиронычев
					|
	                |СГРУППИРОВАТЬ ПО
	                |	ЗаказыПокупателейОстатки.Номенклатура
	                |
					|";
					
	//============22.06 - 27.06.2016  проверка для АЭ по недогрузам - сразу "выкидываем" лишние товары по табл.Изъятие====================
	таблИзъятия = новый ТаблицаЗначений;
	таблИзъятия.Колонки.Добавить("ЗаказПокупателя");
	
	// Создание описателя типов для таблицы значений
	КЧ = Новый КвалификаторыЧисла(15,0);
	КС = Новый КвалификаторыСтроки(7);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	
	Массив.Очистить();
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
	
	таблИзъятия.Колонки.Добавить("НоменклатураКод", ОписаниеТиповС, "НоменклатураКод" );
	таблИзъятия.Колонки.Добавить("Количество", ОписаниеТиповЧ, "Количество");
   	таблИзъятия.Колонки.Добавить("КолДублей", ОписаниеТиповЧ, "КолДублей");  //29.06.2016


	
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Расход 
		и ЭтотОбъект.Подразделение = справочники.Подразделения.НайтиПоКоду("00005") тогда
		
		надоПроверятьИзъятие = ЛОЖЬ;
		//исключаем из отгрузки - не полностью перемещеннные на Ангар-И товары для отгрузок АЭ ИМ -> ДПД и Подорожник
		Для каждого Стр1 из ЗаказыПокупателей цикл
			//Если ЗначениеЗаполнено(Стр1.ЗаказПокупателя.Контрагент.КонтрагентДляРезерваИМ) //123Заменить
				Если ЗначениеЗаполнено(Стр1.ЗаказПокупателя.ДоговорКонтрагента.КонтрагентДляРезерваИМ)
				//и 	Стр1.ЗаказПокупателя.Контрагент.КонтрагентДляРезерваИМ = справочники.Контрагенты.НайтиПоКоду("П004703")//123Заменить 
				и 	Стр1.ЗаказПокупателя.ДоговорКонтрагента.КонтрагентДляРезерваИМ = справочники.Контрагенты.НайтиПоКоду("П004703")
				
				//+++ 14.03.2017 - это признак выгрузки прайсов в Terminal  и он же - НЕ контролирует Ангар-И
				и   Стр1.ЗаказПокупателя.Контрагент.НеВыгружать = ЛОЖЬ 
				
				//и   Стр1.ЗаказПокупателя.Контрагент <> Справочники.Контрагенты.НайтиПоКоду("П001549") //23.01.2017 - ШинТрейд (вместо ШинТрейд СПб)
			   тогда надоПроверятьИзъятие = Ложь;
			   Прервать;
		    КонецЕсли;
		КонецЦикла;
		
		Если надоПроверятьИзъятие тогда  
			
		//1. получим товары, которых нет на Ангар-И	
			 Запрос1 = новый Запрос;
			 Запрос1.Текст =  Запрос.Текст +";
			 |////////////////////////////////////////////////////////////////////////////////
			 |"+  "выбрать Заказы.Номенклатура,
			 | Заказы.КоличествоЗаказаноПоЗаказам - ЕСТЬNULL(ост.КоличествоОстаток, 0) как Количество
			 | из Заказано как Заказы
			 |ЛЕВОЕ соединение  
			 | РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаДок, Склад = &АнгарИ
			 |и Номенклатура в (выбрать вт.Номенклатура из Заказано как вт)
			 |и ХарактеристикаНоменклатуры = Значение(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			 |и СерияНоменклатуры = Значение(Справочник.СерииНоменклатуры.ПустаяСсылка)
			 |и Качество = Значение(Справочник.Качество.Новый)
			 
			 |) как ост
			 |ПО Заказы.Номенклатура = ост.Номенклатура
			 //07.10.2016 показываем реальный недогруз, а не все подряд
			 |ГДЕ
			 |ЕстьNull(ост.КоличествоОстаток,0) < Заказы.КоличествоЗаказаноПоЗаказам					";
          массивЗаказовПокупателя = ЭтотОбъект.ЗаказыПокупателей.ВыгрузитьКолонку("ЗаказПокупателя");
		  Запрос1.УстановитьПараметр("ДатаДок", ТекущаяДата()); // на дату нажатия кнопки
		  // Запрос1.УстановитьПараметр("ДатаДок", этотОбъект.Дата-1); // до проведения этого документа!
		  АнгарИ = справочники.Склады.НайтиПоКоду("01475");
		  Запрос1.УстановитьПараметр("АнгарИ", АнгарИ );
		  
		  Если СписокЗак<>неопределено тогда //20.12.2016
		  	Запрос1.УстановитьПараметр("СписокЗаказовПокупателя", СписокЗак);
		  иначе
			  Запрос1.УстановитьПараметр("СписокЗаказовПокупателя", массивЗаказовПокупателя);
		  КонецЕсли;
		  
		  рез1 = Запрос1.Выполнить();
		  Если не рез1.Пустой() тогда //1.
			  таблНедогрузы = рез1.Выгрузить();  //Номенклатура, Количество
		 сообщить(строка(таблНедогрузы.Количество())+" товаров в количестве "+строка(таблНедогрузы.Итог("Количество") )+" шт. - недостаточно на Ангар-И");
		 
		 //2. получим Первичные заказы с товарами недогруза
			  Запрос2 = новый Запрос;
			  Запрос2.Текст =  "ВЫБРАТЬ
			                   |	Недогрузы.Номенклатура,
			                   |	Недогрузы.Количество
			                   |ПОМЕСТИТЬ ВТ_Недогрузы
			                   |ИЗ
			                   |	&Недогрузы КАК Недогрузы
			                   |;
			                   |
							   //|////////////////////////////////////////////////////////////////////////////////
							   //|ВЫБРАТЬ
							   //|	контр.Ссылка КАК Контрагент
							   //|ПОМЕСТИТЬ ВТ_Контр
							   //|ИЗ
							   //|	Справочник.Контрагенты КАК контр
							   //|ГДЕ
							   //|	контр.Покупатель
							   //|	И контр.ЭтоГруппа = ЛОЖЬ
							   //|	И контр.ПометкаУдаления = ЛОЖЬ
							   //|	И контр.КонтрагентДляРезерваИМ <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)     //123Заменить
							   //|;
			                   |
			                   |////////////////////////////////////////////////////////////////////////////////
			                   |ВЫБРАТЬ
			                   |	ДоговорыКонтрагентов.Ссылка
			                   |ПОМЕСТИТЬ ВТ_Договоры
			                   |ИЗ
			                   |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			                   |ГДЕ
			                   |	ДоговорыКонтрагентов.КонтрагентДляРезерваИМ <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			                   |	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
			                   |;
			                   |
			                   |////////////////////////////////////////////////////////////////////////////////
			                   |ВЫБРАТЬ
			                   |	Заказы.Номенклатура КАК Номенклатура,
			                   |	Заказы.Количество КАК КоличествоНедогруза,
			                   |	ЗаказыПокупателейОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
			                   |	ЗаказыПокупателейОстатки.КоличествоОстаток КАК КоличествоПоЗаказу,
			                   |	ПервичныеЗаказы.ЗаказПокупателя КАК ЗаказПокупателя1,
			                   |	ПервичныеЗаказы.Количество КАК Количество1
			                   |ИЗ
			                   |	ВТ_Недогрузы КАК Заказы
			                   |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(
			                   |				,
			                   |				ЗаказПокупателя В (&СписокЗаказовПокупателя)
			                   |					И Номенклатура В
			                   |						(ВЫБРАТЬ
			                   |							вт.Номенклатура
			                   |						ИЗ
			                   |							ВТ_Недогрузы КАК вт)
							   //|					И ЗаказПокупателя.Контрагент В
							   //|						(ВЫБРАТЬ
							   //|							вт2.Контрагент
							   //|						ИЗ
							   //|							ВТ_Контр КАК вт2)
							   |					И ДоговорКонтрагента В     //123Заменить
							   |						(ВЫБРАТЬ
							   |							вт_Договоры.Ссылка
							   |						ИЗ
							   |							вт_Договоры)
			                   |					И Номенклатура.Услуга = ЛОЖЬ) КАК ЗаказыПокупателейОстатки
			                   |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			                   |				ЗаказПокупателяЗаказы.Ссылка КАК Ссылка,
			                   |				ЗаказПокупателяЗаказы.ЗаказПокупателя КАК ЗаказПокупателя,
			                   |				ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
			                   |				ЗаказПокупателяТовары.Количество КАК Количество
			                   |			ИЗ
			                   |				Документ.ЗаказПокупателя.Заказы КАК ЗаказПокупателяЗаказы
			                   |					ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
			                   |					ПО ЗаказПокупателяЗаказы.ЗаказПокупателя = ЗаказПокупателяТовары.Ссылка
			                   |			ГДЕ
			                   |				ЗаказПокупателяЗаказы.Ссылка В(&СписокЗаказовПокупателя)
							   //|				И ЗаказПокупателяЗаказы.ЗаказПокупателя.Контрагент В
							   //|						(ВЫБРАТЬ
							   //|							К.Контрагент
							   //|						ИЗ
							   //|							ВТ_Контр КАК К)
			                   |				И ЗаказПокупателяТовары.Номенклатура В
			                   |						(ВЫБРАТЬ
			                   |							вт.Номенклатура
			                   |						ИЗ
			                   |							ВТ_Недогрузы КАК вт)
							   //|				И ЗаказПокупателяТовары.Ссылка.Контрагент В
							   //|						(ВЫБРАТЬ
							   //|							К.Контрагент
							   //|						ИЗ
							   //|							ВТ_Контр КАК К)
							   |				И ЗаказПокупателяЗаказы.Ссылка.ДоговорКонтрагента В      //123Заменить
							   |						(ВЫБРАТЬ
							   |							вт_Договоры.Ссылка
							   |						ИЗ
							   |							вт_Договоры)
							   |				И ЗаказПокупателяЗаказы.ЗаказПокупателя.ДоговорКонтрагента В
							   |						(ВЫБРАТЬ
							   |							вт_Договоры.Ссылка
							   |						ИЗ
							   |							вт_Договоры)
							   |) КАК ПервичныеЗаказы
			                   |			ПО ЗаказыПокупателейОстатки.ЗаказПокупателя = ПервичныеЗаказы.Ссылка
			                   |				И ЗаказыПокупателейОстатки.Номенклатура = ПервичныеЗаказы.Номенклатура
			                   |		ПО Заказы.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
			                   |ГДЕ
			                   |	ЗаказыПокупателейОстатки.КоличествоОстаток > 0
			                   |
			                   |УПОРЯДОЧИТЬ ПО
			                   |	Номенклатура,
			                   |	ЗаказПокупателя УБЫВ,
			                   |	ЗаказПокупателя1 УБЫВ
			                   |ИТОГИ
			                   |	МАКСИМУМ(КоличествоНедогруза),
			                   |	МАКСИМУМ(КоличествоПоЗаказу),
			                   |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПокупателя1),
			                   |	СУММА(Количество1)
			                   |ПО
			                   |	Номенклатура,
			                   |	ЗаказПокупателя
			                   |АВТОУПОРЯДОЧИВАНИЕ";
							   
		  Если СписокЗак<>неопределено тогда //20.12.2016
		  	  Запрос2.УстановитьПараметр("СписокЗаказовПокупателя", СписокЗак);
		  иначе
     	      Запрос2.УстановитьПараметр("СписокЗаказовПокупателя", массивЗаказовПокупателя);
		  КонецЕсли;
							   
			 Запрос2.УстановитьПараметр("Недогрузы", таблНедогрузы);	
//-------------------анализ недогрузов в разрезе Заказов и первичных заказов --------------------------------
            рез2 = Запрос2.Выполнить();
			Если НЕ рез2.Пустой() тогда //2.
				// сравниваем: КоличествоНедогруза - КоличествоПоЗаказу - Количество1
				// в результате - находим первичный заказ и все товары в нем - исключаем из дальнейшей отгрузки...
					
				выборкаТов = рез2.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока выборкаТов.Следующий() цикл //тов
					КоличествоНедогруза = выборкаТов.КоличествоНедогруза; //по товару
				    выборкаЗак = выборкаТов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					сообщить(" Нет товара: "+строка(выборкаТов.Номенклатура.Код)+" "+ строка(выборкаТов.Номенклатура)+" - "+ строка(КоличествоНедогруза)+" шт. на складе '"+строка(АнгарИ)+"'");
					Пока выборкаЗак.Следующий() цикл// зак
													
						КоличествоПоЗаказу = выборкаЗак.КоличествоПоЗаказу; //по общему заказу
				        КоличествоНедогруза = КоличествоНедогруза - КоличествоПоЗаказу;
						
						Если КоличествоНедогруза >=0 тогда
							//сообщить("==> "+ строка(выборкаЗак.ЗаказПокупателя)+" = "+строка(КоличествоПоЗаказу)+"("+строка(КоличествоНедогруза)+")");
							выборкаЗак1 = выборкаЗак.Выбрать();
							Пока выборкаЗак1.Следующий() цикл //Зак1
								Количество1 = ?(выборкаЗак1.Количество1=Null, КоличествоПоЗаказу, выборкаЗак1.Количество1); //по первичному заказу
								Заказ1      = ?(выборкаЗак1.ЗаказПокупателя1=Null, выборкаЗак.ЗаказПокупателя, выборкаЗак1.ЗаказПокупателя1);
								
								КоличествоПоЗаказу = КоличествоПоЗаказу - Количество1;
								Если КоличествоПоЗаказу>=0 тогда
									//сообщить("---> "+ строка(Заказ1)+" = "+строка(Количество1)+"("+строка(КоличествоПоЗаказу)+")" );
									
									////--- точный недогруз ТОЛЬКО 1 товара----
									//стр1 = таблИзъятия.Добавить();
									//стр1.ЗаказПокупателя = Заказ1;
									//стр1.НоменклатураКод = выборкаЗак1.Номенклатура.Код;
									//стр1.Количество = Количество1;
									
									//--- добавляем в таблИзъятия - все товары первичного заказа ----
									i=1;
									Для каждого стр11 из Заказ1.Товары цикл
									//29.06.2016 -------- по всем товарам! заказа - считаем полное изъятие ---
										стр1 = таблИзъятия.Добавить();
										стр1.ЗаказПокупателя = Заказ1;
										стр1.НоменклатураКод = стр11.Номенклатура.Код;
										Если стр11.Номенклатура = выборкаЗак1.Номенклатура тогда  //01.07.2016
											стр1.Количество = Количество1;
											стр1.КолДублей = 0; // для свертки, сортировки и "понимания", что это!
										иначе	
											стр1.Количество = стр11.Количество;
											стр1.КолДублей = 1;
										КонецЕсли;	
										//сообщить("   "+строка(i)+") "+ строка(стр1.НоменклатураКод)+" = "+строка(стр1.Количество));
								   		i=i+1;
									КонецЦикла;
								
									
								Иначе 
									Прервать;
								КонецЕсли;
							КонецЦикла;//зак1
						КонецЕсли;
					
					КонецЦикла;	//зак
				КонецЦикла;//тов
				
				
  
 //=========================================================================================================================

	Если таблИзъятия.Количество()>0 тогда //04.07.2016 сразу проверяем что таблица НЕ пустая	
			
		таблИзъятия.Свернуть("ЗаказПокупателя, НоменклатураКод, КолДублей, Количество"); 
		таблИзъятия.Сортировать("ЗаказПокупателя, НоменклатураКод, КолДублей"); // Важно отсортировать чтобы потом искать в цикле...
			
		Зак0=неопределено; стрТ0=""; номСтр1=0; КолМин=0;
		текстЗак = ""; текст1зак="";
		пока номСтр1<таблИзъятия.Количество() цикл
			стр22 = таблИзъятия[номСтр1];
			 Зак1 = стр22.ЗаказПокупателя;
			стрТ1 = стр22.ЗаказПокупателя.Номер+"-"+стр22.НоменклатураКод;
			 Кол1 = стр22.Количество;
			 
		Если Зак1=Зак0 тогда	
			Если стрТ1=стрТ0 тогда	//различаются КолДублей - значит это ЛИШНЯЯ СТРОКА!
				таблИзъятия.Удалить(номСтр1);  //номер остаётся тот же, кол() уменьшается
				продолжить;
			Иначе //---------- вторая строка заказа ----------------
				//прибавляем в тексты...
				текстЗак = текстЗак +"
				|   -> "+стр22.НоменклатураКод+" : "+строка(Кол1);
				Если стр22.КолДублей=0 тогда  
					текст1зак = текст1зак+"
					|недогруз по товару: "+стр22.НоменклатураКод+" : "+строка(Кол1);
				КонецЕсли;
				стрТ0 = стрТ1;
			КонецЕсли;  
		Иначе // другой заказ
					
			Если не зак0=неопределено тогда  // ЗАПИШЕМ предыдущий заказ!
		 	  об = зак0.ПолучитьОбъект();
			 
	 		  поз1=Найти(об.Комментарий, "#Отгрузка отменена!");
			  если поз1>0 тогда // чтобы не дублить комментарий...
				об.Комментарий = Лев(об.Комментарий, поз1-1);
			  КонецЕсли;	
		 	  об.Комментарий = об.Комментарий + " #Отгрузка отменена! "+текст1зак;
			 
	 	 	  попытка
				об.Записать();
				сообщить("Изменен первичный заказ "+строка(зак0.Номер)+" ("+зак0.НомерВходящегоДокумента+")", СтатусСообщения.Внимание);
			  исключение
			 	сообщить(" >>>> Не удалось изменить статус этого заказа : "+ОписаниеОшибки(), СтатусСообщения.Внимание);
				об = неопределено;
			  КонецПопытки;
			КонецЕсли;	
			
			текстЗак = текстЗак+"
			| - Заказ "+Зак1.Номер+" ("+зак1.НомерВходящегоДокумента+"):
			|   -> "+стр22.НоменклатураКод+" : "+строка(Кол1);  //первый товар
			Если стр22.КолДублей=0 тогда
				текст1зак = "
			| - Заказ "+Зак1.Номер+" ("+зак1.НомерВходящегоДокумента+"):
				|недогруз по товару: "+стр22.НоменклатураКод+" : "+строка(Кол1);
			КонецЕсли;

			зак0 = зак1;
			стрТ0 = стрТ1;
 		КонецЕсли;
		
		номСтр1 = номСтр1+1;
		КонецЦикла;
		
		//1-ый (единственный) или последний заказ - не сравнивается ни с кем
		//------ изменение статусов происходит при записи-----------		
	 	 об = зак1.ПолучитьОбъект();
		 
		 поз1=Найти(об.Комментарий, "#Отгрузка отменена!");
		 если поз1>0 тогда // чтобы не дублить комментарий...
			об.Комментарий = Лев(об.Комментарий, поз1-1);
		 КонецЕсли;	
	  	 об.Комментарий = об.Комментарий + "
		 |#Отгрузка отменена! "+текст1зак;
		
		Попытка
			Если об.Проведен тогда
			//+++14.06.2016 не может перезаписать???
				об.Проверен = Ложь;
				об.Записать();
			  сообщить("1) Выключен флаг [ ]""К отгрузке"" у первичного заказа "+строка(зак1.Номер)+" ("+зак1.НомерВходящегоДокумента+")", СтатусСообщения.Внимание);
			  
			 Иначе 
			  об.Записать();
			  сообщить("Отменена отгрузка первичного заказа "+строка(зак1.Номер)+" ("+зак1.НомерВходящегоДокумента+")", СтатусСообщения.Внимание);
		     КонецЕсли;
		Исключение
		 	сообщить(" >>>> Не удалось изменить заказ "+строка(зак1.Номер)+" ("+зак1.НомерВходящегоДокумента+") : "+ОписаниеОшибки(), СтатусСообщения.Внимание);
			об = Неопределено;
		КонецПопытки;
					
		
		тблЗак1 = таблИзъятия.Скопировать(,"ЗаказПокупателя");
		тблЗак1.Свернуть("ЗаказПокупателя");
		сообщить("-----------Таблица изъятия товаров по "+строка(тблЗак1.Количество())+" первичным заказам:------------");
		
		////---- подробная инфа ---
		сообщить(текстЗак);
		сообщить("-------------------------------------------------------------------------");		
	
		//окончательная таблица изъятия без Заказов
		таблИзъятия.Свернуть("НоменклатураКод", "Количество"); // без Заказов
		i=1;
		для каждого стр22 из таблИзъятия цикл
   			сообщить(строка(i)+") "+ строка(стр22.НоменклатураКод)+" = "+строка(стр22.Количество)+" шт.");
			i=i+1;
		КонецЦикла;			
		
	//	если таблИзъятия.Количество()>0 тогда // Запрос.Текст =  Запрос2.Текст - таблИзъятия
		 Запрос.Текст = Текст0 +" ВЫБРАТЬ
        |	тИзъятия.НоменклатураКод,
        |	тИзъятия.Количество
		|Поместить ВТ_Изъятия
        |ИЗ
        |	&тблИзъятия КАК тИзъятия;
		|/////////////////////////////////////////////
		|
		|ВЫБРАТЬ 
		//| РАЗЛИЧНЫЕ
        |	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	 	//19.08 замена  сумма() - сумма() >> сумма(-)
        |	СУММА(ЗаказыПокупателейОстатки.КоличествоОстаток - ЕСТЬNULL(таблИзъятия.Количество, 0)) КАК КоличествоЗаказаноПоЗаказам,
        |	СУММА(0) КАК КоличествоУжеЗаказано
        |ПОМЕСТИТЬ Заказано
        |ИЗ
        |	РегистрНакопления.ЗаказыПокупателей.Остатки( ,
        |			ЗаказПокупателя В (&СписокЗаказовПокупателя) 
		//+++19.08.2016
		|				И Номенклатура.Услуга=ЛОЖЬ ) КАК ЗаказыПокупателейОстатки
        |		ЛЕВОЕ СОЕДИНЕНИЕ (выбрать вт.НоменклатураКод, вт.Количество из ВТ_Изъятия как вт) КАК таблИзъятия
        |		ПО ЗаказыПокупателейОстатки.Номенклатура.Код = таблИзъятия.НоменклатураКод
        |ГДЕ
        |	ЗаказыПокупателейОстатки.КоличествоОстаток > 0
        |
        |СГРУППИРОВАТЬ ПО
        |	ЗаказыПокупателейОстатки.Номенклатура
		|
        |ИНДЕКСИРОВАТЬ ПО
        |	Номенклатура";
		КонецЕсли;
	
			КонецЕсли;//2. 
		  КонецЕсли; //1.
		КонецЕсли;//надоПроверятьИзъятие			 
	КонецЕсли;//Расход и Ярославль	

Запрос.Текст =  Запрос.Текст +";
	                |////////////////////////////////////////////////////////////////////////////////
	                |"+ 
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	ТоварыНаСкладахОстатки.ГруппаСкладов КАК ГруппаСкладов,
					|	ТоварыНаСкладахОстатки.Склад как Склад1,
					|	Заказано.Номенклатура КАК Номенклатура,
	                |	Выбор когда Заказано.КоличествоЗаказаноПоЗаказам - Заказано.КоличествоУжеЗаказано>0 Тогда
					|		Заказано.КоличествоЗаказаноПоЗаказам - Заказано.КоличествоУжеЗаказано Иначе 0 Конец КАК КоличествоЗаказано,
					|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0) как КоличествоОстаток,
	                |	ВЫБОР КОГДА ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0)>0
					|	  ТОГДА
					|	    ВЫБОР КОГДА (Заказано.КоличествоЗаказаноПоЗаказам - Заказано.КоличествоУжеЗаказано)>0 
					|			и ((Заказано.КоличествоЗаказаноПоЗаказам - Заказано.КоличествоУжеЗаказано)<= ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0))
					|		   ТОГДА Заказано.КоличествоЗаказаноПоЗаказам - Заказано.КоличествоУжеЗаказано
	                |		   ИНАЧЕ ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0)
					|		КОНЕЦ
					|	  ИНАЧЕ 0
	                |	КОНЕЦ КАК КоличествоСвободно
					|	,ЕстьNull(ТоварыАдресноеХранениеОстатки.АдресХранения,"""") как АдресХранения
					|	,ЕстьNull(ТоварыАдресноеХранениеОстатки.КоличествоСвободныйОстаток,0)КАК КоличествоСвободноВАдресе
					|	,ТоварыАдресноеХранениеОстатки.АдресХранения.Порядок КАК Порядок
					//|   ,ТоварыАдресноеХранениеОстатки.КоличествоОТХ
					|	
	                |ИЗ
					|	 Заказано КАК Заказано
	                |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ 
					//различные
					|			ТовНаСкладах.Склад.ГруппаСкладов как ГруппаСкладов,
					|			ТовНаСкладах.Номенклатура как Номенклатура,
					|			ТовНаСкладах.Склад как Склад,
					|           ЕСТЬNULL(ТовНаСкладах.КоличествоОстаток,0) как КоличествоОстаток
					|			ИЗ РегистрНакопления.ТоварыНаСкладах.Остатки(,
					//|(Склад.Транзитный=ложь) И (Склад.ЗапретитьИспользование=ложь) и Склад <> Значение(справочник.Склады.ПустаяСсылка) 
					|		Склад в (выбрать ВТ_склады.Склад из ВТ_склады)	  
					|//Гр0 И НЕ (Склад.ГруппаСкладов в (&СписокГруппСкладов) )
	                |//Гр1 И Склад.ГруппаСкладов В (&ТекГруппа)
					
	                |					И Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ Заказано.Номенклатура

	                |						 ИЗ Заказано КАК Заказано)) как ТовНаСкладах ) КАК ТоварыНаСкладахОстатки
					|			ЛЕВОЕ СОЕДИНЕНИЕ 
					
					//+++ 23.03.2017 чтобы "-" остатки не вылезали!
					|(выбрать рез.Номенклатура, рез.КоличествоОстаток,  рез.Склад  из 
					
					|РегистрНакопления.РезервНаСкладах.Остатки( 
					//&МоментВремениОстаткиРезервы
					|, Склад в (выбрать ВТ_склады.Склад из ВТ_склады)	  
					
					|//Гр0 И НЕ (Склад.ГруппаСкладов в (&СписокГруппСкладов))
	                |//Гр1 И Склад.ГруппаСкладов В (&ТекГруппа)
					
	                |      И Номенклатура В (ВЫБРАТЬ Заказано.Номенклатура ИЗ Заказано)
					
					//+++ 23.03.2017  - ТОЛЬКО + остатки!
					 |) как рез
					 |ГДЕ рез.КоличествоОстаток>0
					 
					|) КАК РезервНаСкладахОстатки


					|			ПО ТоварыНаСкладахОстатки.Номенклатура = РезервНаСкладахОстатки.Номенклатура
	                |				И ТоварыНаСкладахОстатки.Склад = РезервНаСкладахОстатки.Склад
		//----------------------Адресное хранение--------------------------------------------
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ 
					|		АХ.Номенклатура,
					|		АХ.Склад,
					|		АХ.АдресХранения,
					|		АХ.КоличествоОстаток - ЕстьNull(Резерв.КоличествоОстаток,0) как КоличествоСвободныйОстаток
				//	|       , ЕСТЬNULL(ТоварыНаОтветственномХраненииОстатки.КоличествоОстаток, 0) КАК КоличествоОТХ

					|		ИЗ РегистрНакопления.ТоварыАдресноеХранение.Остатки(
					//|				&МоментВремениОстаткиРезервы
					|					 ,Номенклатура В(ВЫБРАТЬ Заказано.Номенклатура ИЗ Заказано )
					|		и Склад в (выбрать ВТ_склады.Склад из ВТ_склады)	  
					|       и Склад.АдресноеХранение
					|//Гр0 И НЕ (Склад.ГруппаСкладов в (&СписокГруппСкладов))
					|//Гр1 И Склад.ГруппаСкладов В (&ТекГруппа)


					|)  как АХ
					|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервНаСкладах.Остатки(
	               // |					&МоментВремениОстаткиРезервы
	                |				,
					//(Склад.Транзитный=ложь) И (Склад.ЗапретитьИспользование=ложь) и (Склад <> Значение(справочник.Склады.ПустаяСсылка) )
					|	Склад в (выбрать ВТ_склады.Склад из ВТ_склады)
					|//Гр0 И НЕ (Склад.ГруппаСкладов В (&СписокГруппСкладов))
	                |//Гр1 И Склад.ГруппаСкладов В (&ТекГруппа)
					
	                |					И Номенклатура В(ВЫБРАТЬ Заказано.Номенклатура ИЗ Заказано )) КАК Резерв


                    |			ПО АХ.Номенклатура = Резерв.Номенклатура
	                |				И АХ.Склад = Резерв.Склад
                    |				И АХ.АдресХранения = Резерв.АдресХранения
									|ГДЕ АХ.КоличествоОстаток - ЕстьNull(Резерв.КоличествоОстаток,0)>0
					|	
					|)КАК ТоварыАдресноеХранениеОстатки
					
					|			ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварыАдресноеХранениеОстатки.Номенклатура
					|				И ТоварыНаСкладахОстатки.Склад = ТоварыАдресноеХранениеОстатки.Склад
					|		ПО Заказано.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
					|
   //+++ 26.03.2013 ---- только   + остатки! ---------------------------
					|ГДЕ ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0) > 0
					//Плотников 26.05.17 запрет на отгрузку моделей временный-----------------------------------------
					//|И НЕ ТоварыНаСкладахОстатки.Номенклатура.Производитель В (&списокПроизводителей)
					//|И ВЫБОР
					//|КОГДА ТоварыНаСкладахОстатки.Номенклатура.Производитель = &алкаста
					//|	ТОГДА ТоварыНаСкладахОстатки.Номенклатура.Модель В (&списокМоделей)
					//|ИНАЧЕ ИСТИНА
					//|КОНЕЦ
					//Плотников 26.05.17 запрет на отгрузку моделей временный-----------------------------------------
					|	
					|
					|УПОРЯДОЧИТЬ ПО
					//+++++++++++++++++++порядок обхода по ячейкам 5000+++++++++++++++++++++++++++++++
					|Номенклатура,
					//---------по складам с максимальным количеством - в первую очередь, Тогда мин.число складов потребуется--------
					//|	КоличествоСвободно УБЫВ,
					
					//+++ 15.09.2014 сначала мин.остатки, чтобы подчищать остатки по ВСЕМ адресам любого склада!
					|	КоличествоСвободноВАдресе "+?(ОтгрузкаПоМаксОстаткам, "УБЫВ","")+",
					// по максим.остатку в адреса - в сезон
					//|	КоличествоСвободноВАдресе УБЫВ,
					
					|	Порядок
					
					//+++ 15.09.2014 сначала мин.остатки, чтобы подчищать остатки по ВСЕМ складам!
					//|	, КоличествоСвободно УБЫВ 
					|	, КоличествоСвободно "+?(ОтгрузкаПоМаксОстаткам, "УБЫВ","")+"
				    |
					
					//---------или по алфавиту---------------------------------
					|
				    |ИТОГИ
				    |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура),
				    |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Склад1),
				    |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ АдресХранения),
				    |	Максимум(КоличествоЗаказано),
					|	Сумма(КоличествоОстаток),
				    |   СУММА(КоличествоСвободноВАдресе),
				    |	СУММА(КоличествоСвободно)
				//	|	,Максимум(КоличествоОТХ)
				    |ПО
				    |  ГруппаСкладов
					|, Номенклатура
					|, Склад1
					|АВТОУПОРЯДОЧИВАНИЕ
				    |";					
					




	Если текГруппа<>Неопределено Тогда
		запрос.Текст = стрЗаменить(запрос.Текст,"//Гр1 ", "");
		Запрос.УстановитьПараметр("ТекГруппа",ТекГруппа);
	Иначе
		Если списокГрупп<>Неопределено Тогда
		запрос.Текст = стрЗаменить(запрос.Текст,"//Гр0 ", "");
		Запрос.УстановитьПараметр("СписокГруппСкладов", списокГрупп);
		КонецЕсли;   	
	КонецЕсли;	
	
	Если ЭтотОбъект.Подразделение.ОбособленноеПодразделение тогда
		Запрос.Текст =  стрЗаменить(Запрос.Текст , "спрСклады.Транзитный=ЛОЖЬ"  , "спрСклады.Транзитный и спрСклады.Подразделение=&Подразделение");
		Запрос.Параметры.Вставить("Подразделение",ЭтотОбъект.Подразделение);
    КонецЕсли;	                
	
	  Если СписокЗак<>неопределено тогда //20.12.2016
	  	  Запрос.УстановитьПараметр("СписокЗаказовПокупателя", СписокЗак);
	  иначе
		  Запрос.УстановитьПараметр("СписокЗаказовПокупателя", ЗаказыПокупателей.ВыгрузитьКолонку("ЗаказПокупателя"));
	  КонецЕсли;
	 
	 Запрос.УстановитьПараметр("тблИзъятия", таблИзъятия); // 27.06.2016
	 
	 //СписокПроизводителей  = Новый СписокЗначений;
	 //СписокПроизводителей.Добавить(Справочники.Производители.НайтиПоКоду("3291"));  //Плотников 26.05.17 запрет на отгрузку моделей временный
	 //СписокПроизводителей.Добавить(Справочники.Производители.НайтиПоКоду("3485"));
	 //СписокПроизводителей.Добавить(Справочники.Производители.НайтиПоКоду("3657"));
	 //СписокПроизводителей.Добавить(Справочники.Производители.НайтиПоКоду("3658"));
	 //
	 //списокМоделей  = Новый СписокЗначений;
	 //списокМоделей.Добавить(Справочники.МоделиТоваров.НайтиПоКоду("04911"));   //Плотников 26.05.17 запрет на отгрузку моделей временный
	 //списокМоделей.Добавить(Справочники.МоделиТоваров.НайтиПоКоду("04913"));
	 //списокМоделей.Добавить(Справочники.МоделиТоваров.НайтиПоКоду("04914"));
	 //списокМоделей.Добавить(Справочники.МоделиТоваров.НайтиПоКоду("04915"));
	 //
	 //списокМоделей.Добавить(Справочники.МоделиТоваров.НайтиПоКоду("05667"));
	 //списокМоделей.Добавить(Справочники.МоделиТоваров.НайтиПоКоду("05668"));
	 //списокМоделей.Добавить(Справочники.МоделиТоваров.НайтиПоКоду("05669"));
	 //списокМоделей.Добавить(Справочники.МоделиТоваров.НайтиПоКоду("05670"));
	 //списокМоделей.Добавить(Справочники.МоделиТоваров.НайтиПоКоду("05671"));
	 //
	 //списокМоделей.Добавить(Справочники.МоделиТоваров.НайтиПоКоду("20987"));
	 //списокМоделей.Добавить(Справочники.МоделиТоваров.НайтиПоКоду("20965"));
	 //списокМоделей.Добавить(Справочники.МоделиТоваров.НайтиПоКоду("31134"));
	 //списокМоделей.Добавить(Справочники.МоделиТоваров.НайтиПоКоду("31135"));
	 //списокМоделей.Добавить(Справочники.МоделиТоваров.НайтиПоКоду("31136"));
	 //списокМоделей.Добавить(Справочники.МоделиТоваров.НайтиПоКоду("31137"));
	 //
	 //Запрос.УстановитьПараметр("списокПроизводителей", СписокПроизводителей);      //Плотников 26.05.17 запрет на отгрузку моделей временный
	 // 
	 //Запрос.УстановитьПараметр("списокМоделей", списокМоделей);      //Плотников 26.05.17 запрет на отгрузку моделей временный
	 //
	 //Запрос.УстановитьПараметр("алкаста", Справочники.Производители.НайтиПоКоду("100")); // 27.06.2016     //Плотников 26.05.17 запрет на отгрузку моделей временный
	 
	 Результат = Запрос.Выполнить();
	 
	 Запрос.Текст = СтрЗаменить(Запрос.Текст,"ГДЕ ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0) > 0","");
	 
	 СчитаемНедогрузы  = Запрос.Выполнить().Выгрузить();
	 
	 Возврат Результат;
	 
 КонецФункции

//=====================================================================================================================================
Процедура ГруппыСкладовПриоритетПриИзменении(Элемент)
	
	Предупреждение("Используйте стрелки Вверх/Вниз Для изменения порядка групп!", 30); 
//	КоманднаяПанельТовары2Обновить(Неопределено);   //при изменении приоритета надо оновить все строки!
    	
КонецПроцедуры

Процедура ДобавитьГруппуСкладов(Результат, Приоритет1=0)
	Если Результат = неопределено тогда
		возврат;
	КонецЕсли;

	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	   i=0;
	Пока Выборка.Следующий() Цикл
		Если Выборка.КоличествоСвободно<=0 Тогда 
			продолжить 
		КонецЕсли;
	  стр1 = ГруппыСкладов.Добавить();
	  ЗаполнитьЗначенияСвойств(стр1, выборка);
	  
	  i=i+1;//+++ 28.10.2014
	  стр1.Приоритет = ?(Приоритет1=88, i, Приоритет1); // порядковый номер
	 // стр1.Флаг = ИСТИНА; // всегда !!!
	  
	  	Если стр1.ГруппаСкладов  = справочники.ГруппыСкладов.ПустаяСсылка() Тогда
		 стр1.ГруппаСкладов  = справочники.ГруппыСкладов.ОсновнойСклад; // общий склад 
		Иначе
	  	стр1.ГруппаСкладов  = выборка.ГруппаСкладов;
		КонецЕсли;
		
	//---(((---------------- Дерево ----------------------
	//Если Приоритет1>0 Тогда	
			
	    стрГр = ТабЗначРезерв.строки.Добавить();//2
		ЗаполнитьЗначенияСвойств(стрГр, стр1);
	  	выборкаНом = выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	// Группа -> Номенклатура -> Склад -> Адрес	
		пока выборкаНом.Следующий() Цикл
			Если выборкаНом.КоличествоЗаказано<=0 или выборкаНом.КоличествоСвободно<=0 Тогда  // вычитаем ОТХ
				продолжить;
			КонецЕсли;
			
			стрНом = стрГр.Строки.Добавить();  //3
	  	    ЗаполнитьЗначенияСвойств(стрНом, выборкаНом);
			
	        выборкаСклад = выборкаНом.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			колНаСкладах = 0;
			колНаСкладахОстаток =0;
			
			пока выборкаСклад.Следующий() Цикл
					
				Если выборкаСклад.КоличествоЗаказано<=0 или выборкаСклад.КоличествоСвободно<=0 Тогда 
					продолжить;
				КонецЕсли;
				
				//Если колНаСкладах+выборкаСклад.КоличествоСвободно<=выборкаНом.КоличествоЗаказано 
				Если колНаСкладах<выборкаНом.КоличествоЗаказано Тогда //+++
					стрСклад = стрНом.Строки.Добавить(); //4
			  	    ЗаполнитьЗначенияСвойств(стрСклад, выборкаСклад);
					
					стрСклад.КоличествоЗаказано = стрСклад.КоличествоЗаказано - колНаСкладах; // вычитаем то, что уже отгружено с пред.склада!
					
				//+++ 16.07.2013 - группировка по складу - увеличивает остатки пропорционально кол.Адресов!
				числоАдресов = ?(стрСклад.АдресХранения="0", 1, число(стрСклад.АдресХранения));
				стрСклад.КоличествоСвободно = стрСклад.КоличествоСвободно / числоАдресов;
				стрСклад.КоличествоОстаток  = стрСклад.КоличествоОстаток  / числоАдресов;
				
				//+++ 15.05.2017  ТОЛЬКО складе БЕЗ ОТХ!
				стрСкладСвободно = стрСклад.КоличествоСвободно;
					
					выборкаАдр = выборкаСклад.Выбрать();
					пока выборкаАдр.Следующий() Цикл     //================================================================
						
						Если выборкаАдр.КоличествоЗаказано<=0 или выборкаАдр.КоличествоСвободно<=0 Тогда 
							продолжить;
						КонецЕсли;
						
						Если колНаСкладах<выборкаНом.КоличествоЗаказано Тогда //+++ полностью изменено!
								
							Если выборкаАдр.КоличествоСвободноВАдресе>0 Тогда // по адресам
								
								стрСкладСвободно = стрСкладСвободно - выборкаАдр.КоличествоСвободноВАдресе; //15.05.2017
								выборкаАдрКоличествоСвободноВАдресе = выборкаАдр.КоличествоСвободноВАдресе;
								
								Если стрСкладСвободно<0 тогда
									Если выборкаАдр.КоличествоСвободноВАдресе + стрСкладСвободно>0 тогда
										выборкаАдрКоличествоСвободноВАдресе = выборкаАдр.КоличествоСвободноВАдресе + стрСкладСвободно;
									иначе
										продолжить;
									КонецЕсли;	
								КонецЕсли;	
									
								стрАдр = стрСклад.Строки.Добавить();  //5
						  		ЗаполнитьЗначенияСвойств(стрАдр, выборкаАдр);
							  	стрАдр.КоличествоСвободно = мин(выборкаАдрКоличествоСвободноВАдресе, выборкаНом.КоличествоЗаказано);
								стрАдр.КоличествоЗаказано = мин(выборкаАдрКоличествоСвободноВАдресе, выборкаНом.КоличествоЗаказано - колНаСкладах); // с учетом пред.складов
								стрАдр.КоличествоОстаток  =	выборкаАдрКоличествоСвободноВАдресе;
								
							Иначе	// по складам, нет адресов!
								
								стрСкладСвободно = стрСкладСвободно - выборкаАдр.КоличествоСвободно; //15.05.2017
								выборкаАдрКоличествоСвободно = выборкаАдр.КоличествоСвободно;
								Если стрСкладСвободно<0 тогда
									если выборкаАдр.КоличествоСвободно +стрСкладСвободно>0 тогда
									выборкаАдрКоличествоСвободно = выборкаАдр.КоличествоСвободно +стрСкладСвободно;
									иначе
										продолжить;
									КонецЕсли;
								КонецЕсли;	
								
								стрАдр = стрСклад.Строки.Добавить();  //5
						  		ЗаполнитьЗначенияСвойств(стрАдр, выборкаАдр);
								стрАдр.КоличествоСвободно = мин(выборкаАдрКоличествоСвободно, выборкаНом.КоличествоЗаказано);
								стрАдр.КоличествоЗаказано = мин(выборкаАдрКоличествоСвободно, выборкаНом.КоличествоЗаказано - колНаСкладах);
							КонецЕсли;
						
							
							//--------- улучшения визуальные --------------
							Если стрСклад.Склад1 = 1 Тогда
								стрСклад.Склад1 = стрАдр.Склад1;
							КонецЕсли;
							Если стрСклад.Номенклатура = 1 Тогда
								стрСклад.Номенклатура = стрАдр.Номенклатура;
							КонецЕсли;
							Если стрНом.Номенклатура = 1 Тогда
								стрНом.Номенклатура = стрАдр.Номенклатура;
							КонецЕсли;

							колНаСкладах = колНаСкладах + стрАдр.КоличествоСвободно;
							колНаСкладахОстаток = колНаСкладахОстаток + выборкаАдр.КоличествоОстаток;
						КонецЕсли;
 					КонецЦикла; //адр
				КонецЕсли;
				
						
			КонецЦикла;//скл.
			стрНом.КоличествоСвободно = колНаСкладах;
			стрНом.КоличествоОстаток  = стрНом.Строки.Итог("КоличествоОстаток");
		КонецЦикла;
		
		стрГр.КоличествоСвободно = стрГр.Строки.Итог("КоличествоСвободно");
		стр1.КоличествоСвободно = стрГр.КоличествоСвободно;
		
		стрГр.КоличествоЗаказано = стрГр.Строки.Итог("КоличествоЗаказано");
		стр1.КоличествоЗаказано = стрГр.КоличествоЗаказано;
		
		стрГр.КоличествоОстаток = стрГр.Строки.Итог("КоличествоОстаток");
//		стр1.КоличествоОстаток = стр2.КоличествоОстаток;

	//КонецЕсли;
		
	//+++ 25.03.2013 удаляем из дерева 0 приоритеты!
	Если Приоритет1=0 Тогда	
		ТабЗначРезерв.строки.Удалить(стрГр);	
	КонецЕсли;
	//---)))---------------- Дерево ----------------------
	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельТовары2ЗаполнитьПоРезерву(Кнопка)
	
	time = 10;	// 10-30 сек
	
	//+++ 13.09.2013 - 7152 - неправильно!
	
	Если ГруппыСкладов.Количество()=0 или ГруппыСкладов.Итог("Приоритет")=0 Тогда
		Предупреждение("Не заполнен ""Порядок отгрузки"" по группам складов!",time);
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ГруппыСкладов;
		Возврат;
	КонецЕсли;
	
	//+++ 19.04.2013 - приоритеты должны идти по порядку и ровняться номеру строки...
	N = ГруппыСкладов.Количество();
	Если ГруппыСкладов.Итог("Приоритет")<>(1+N)*N/2 Тогда
		Предупреждение("Выберите все группы складов Для отгрузки!",time);
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ГруппыСкладов;
		Возврат;
	КонецЕсли;
	
	
	//+++( 21.03.2013 - товары всегда заполнять по дереву!
	Если ТабЗначРезерв.Строки.Количество()=0 Тогда 
		Ответ = КодВозвратаДиалога.Да;
		Ответ = Вопрос("Перед заполнением - требуется обновить Группы складов.
					   |Выполнить полное обновление?", РежимДиалогаВопрос.ДаНет, time, Ответ,"Обновление порядка отгрузки",Ответ);
		Если (Ответ = КодВозвратаДиалога.Нет) Тогда
			Предупреждение("Перезаполнение Таблицы ""Товары"" - отменено!");
			Возврат;
		КонецЕсли;
		КоманднаяПанельТовары2Обновить(Неопределено);
	КонецЕсли;
	
	
	//+++( 28.10.2014 - порядок в ГруппыСкладов = Дереву?
	i=0;
	Для каждого стр1 из ТабЗначРезерв.Строки Цикл
		Если ГруппыСкладов.Количество()<i+1
			или стр1.ГруппаСкладов <> ГруппыСкладов[i].ГруппаСкладов Тогда
		Ответ = КодВозвратаДиалога.Да;
		Ответ = Вопрос("Порядок отгрузки по Группам складов изменился!
					   |Выполнить обновление списка товаров?", РежимДиалогаВопрос.ДаНет, time, Ответ,"Обновление порядка отгрузки",Ответ);
			Если (Ответ = КодВозвратаДиалога.Да) Тогда
				КоманднаяПанельТовары2Обновить(Неопределено);
			//Иначе	
			//	Сообщить("Порядок складов - определен автоматически...", 10);
			КонецЕсли;
			Прервать;
		КонецЕсли;
	i=i+1; // следующий!
	КонецЦикла;
	
	ТЗ = ЗаказыПокупателей.Выгрузить();
	ТЗ.Свернуть("Реализация");
	Если ТЗ.Количество()>0 Тогда
		
		НадоДелатьОтменуРеализаций = Ложь;
		
		Для i=0 по ТЗ.Количество()-1 Цикл
			Если не тз[i].реализация=Неопределено и не тз[i].реализация.пустая() и тз[i].реализация.проведен Тогда
				НадоДелатьОтменуРеализаций = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НадоДелатьОтменуРеализаций Тогда		
		Ответ = КодВозвратаДиалога.Да;
		Ответ = Вопрос("Перед заполнением - требуется Отменить проведение всех реализаций.
					   |Выполнить отмену проведения?", РежимДиалогаВопрос.ДаНет, 0, Ответ,"Обновление порядка отгрузки");
			Если (Ответ = КодВозвратаДиалога.Нет) Тогда
				Предупреждение("Перезаполнение Таблицы ""Товары"" - отменено.");
				Возврат;
			КонецЕсли;
		КоманднаяПанельТоварыРасПровести(Неопределено);
		КонецЕсли;

	КонецЕсли;
	
	
	Если Товары.Количество()>0 Тогда
		Ответ = КодВозвратаДиалога.Нет;
		Ответ = Вопрос("Требуется очистить таблицу ""Товары"",
		|которая содержит "+строка(Товары.Количество())+" строк. 
		|Все ранее введенные данные будут удалены!
		|
		|Вы действительно хотите удалить данные?", РежимДиалогаВопрос.ДаНет, 0, Ответ,"Обновить таблицу товаров");
		Если (Ответ = КодВозвратаДиалога.Нет) Тогда
			Предупреждение("Обновление таблицы ""Товары"" - Отменено.");
			Возврат;
		КонецЕсли;
		Товары.Очистить();
	КонецЕсли;
	
	ПустаяГруппаСкладов   = справочники.ГруппыСкладов.ПустаяСсылка();
	ОсновнаяГруппаСкладов = справочники.ГруппыСкладов.ОсновнойСклад;
	//----------------------из дерева-------------------------
	// структура дерева обязательно фиксирована:
	// см. процедуры ОбновитьСписокГруппТоваров() 
	//			   и ДобавитьГруппуСкладов() 
	//
	//	ГруппаСкладов - Склад - Номенклатура
	Если ТабЗначРезерв.Строки.Количество()>0 Тогда
		Для Каждого стрГрСклад из ТабЗначРезерв.Строки Цикл
			Для Каждого стрНом из стрГрСклад.Строки Цикл
				Для Каждого стрСклад из стрНом.Строки Цикл
					Для Каждого стрАдрес из стрСклад.Строки Цикл
						
						//+++ 02.11.2014 Если Заказано = 0 то не добавляем строку!
						Если стрАдрес.КоличествоЗаказано<=0 Тогда
							продолжить;
						КонецЕсли;
						
						  стрТов = Товары.Добавить();
						  ЗаполнитьЗначенияСвойств(стрТов, стрАдрес); // структуры должы быть идентичны!
						    стрТов.Количество = 0; // мин(стрНом.КоличествоЗаказано, стрНом.КоличествоСвободно);
						  стрТов.Склад      = стрАдрес.Склад1;
						  
						 Если стрТов.ГруппаСкладов=ПустаяГруппаСкладов Тогда
							 стрТов.ГруппаСкладов=ОсновнаяГруппаСкладов;
						 КонецЕсли;	

					 КонецЦикла;//стрАдрес
				КонецЦикла;//стрСклад
			КонецЦикла;//стрНом
		КонецЦикла;	//стрГрСклад
	КонецЕсли;	
	
	
	//+++ 25.03.2013 - после заполнения - сразу В Резерв 
	КоманднаяПанельТовары3ВРезерв(Неопределено);
    УстановитьВидимость();
	
	
	
	

Если ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Расход 
		И Константы.ИспользованиеРезерваНаСкладах.Получить() Тогда
	ТЗ = получитьТоварыПоДвижениюЭтогоДокумента();
Иначе
    ТЗ = Товары;
КонецЕсли;	
	
//+++( 13.03.2013 - обратный процесс из проведения! Ошибка при определении мин.остатков
	Если Товары.Итог("КоличествоЗаказано")<>ТЗ.итог("КоличествоЗаказано") Тогда
		сообщить(строка(Товары.Итог("КоличествоЗаказано"))+" в Товарах, "+строка(ТЗ.итог("КоличествоЗаказано"))+" в движениях по резерву !", СтатусСообщения.Важное);
		
//+++ 02.11.2017 ======================НЕ НАДО из ===============================================================================
 //   	ТЗ.Свернуть("ГруппаСкладов, Склад, АдресХранения, Номенклатура, Код","КоличествоЗаказано, КоличествоСвободно");
 //   	Товары.Очистить();
 //   	Товары.Загрузить(ТЗ);
 //   	
 //   	//СортироватьПоПорядку(Товары);
 //   	
 //   	//+++ 28.10.2014 - в обратную сторону
 //   	ТЗ.Свернуть("ГруппаСкладов", "КоличествоЗаказано, КоличествоСвободно");
 //   	ГруппыСкладов.Очистить();
 //   	ГруппыСкладов.Загрузить(ТЗ);
 //   	Для каждого стр1 из ГруппыСкладов Цикл
 //   		Если стр1.ГруппаСкладов.Пустая() Тогда
 //   			стр1.ГруппаСкладов = справочники.ГруппыСкладов.НайтиПоКоду("00");
 //   		КонецЕсли;	
 //   			 стр1.Приоритет = стр1.НомерСтроки;
 //   			 стр1.Флаг = Истина;
 //   	КонецЦикла;	
 //   //	ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись); 
 //
 //   //+++++++++ авто сортировка - Для печати - по алфавиту складов и по порядку отгрузки++++++++++++++++++++++
 //   	сообщить("Товары взяты из движения документа по резерву! Проверьте количество в ""2.Порядок отгрузки"" и сортировку при печати!");
 //
	КонецЕсли; 
	
	
	//+++ 08.10.2014 - информационно!
	Если СокрЛП(ЭтотОбъект.ТелефонВодителя)="" или СокрЛП(ЭтотОбъект.Водитель)="" Тогда 
		сообщить("Заполните обязательные поля - Фамилия и Телефон водителя! в Задании № "+строка(ЭтотОбъект.Номер), СтатусСообщения.Внимание);
	КонецЕсли;	
	
	ЭтотОбъект.Дата = ОценкаПроизводительностиВызовСервераПолныеПрава.ДатаИВремяНаСервере(); //+++ 04.04.2017  дата на сервере
	СортироватьПоПорядку(Товары); //сортировка перед записью!
	
	попытка // ВСЕГДА ОПЕРАВНО!
		ЭтотОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный );
		ЭтаФорма.Модифицированность = Ложь;
		Предупреждение("Установлен резерв на отгрузку на текущую дату!",10);
	исключение
		сообщить("ОШИБКА при проведении Задания на отгрузку "+ Номер +" : "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное );// !!!
	КонецПопытки;	
//+++)	
    ЭтаФорма.Обновить();
//	СортироватьПоПорядку(Товары);  //сдвинута перед записью

КонецПроцедуры

//+++ 13.09.2013
Функция получитьТоварыПоДвижениюЭтогоДокумента()
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	РезервНаСкладах.Номенклатура КАК Номенклатура,
	                |	РезервНаСкладах.Склад,
	                |	РезервНаСкладах.АдресХранения,
	                |	СУММА(РезервНаСкладах.Количество) КАК КоличествоЗаказано,
	                |	СУММА(РезервНаСкладах.Количество) КАК КоличествоСвободно,
	                |	РезервНаСкладах.Склад.ГруппаСкладов КАК ГруппаСкладов,
	                |	РезервНаСкладах.Номенклатура.Код КАК Код
	                |ИЗ
	                |	РегистрНакопления.РезервНаСкладах КАК РезервНаСкладах
	                |ГДЕ
	                |	РезервНаСкладах.Регистратор = &Регистратор
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	РезервНаСкладах.Номенклатура,
	                |	РезервНаСкладах.Склад,
	                |	РезервНаСкладах.АдресХранения,
	                |	РезервНаСкладах.Склад.ГруппаСкладов,
	                |	РезервНаСкладах.Номенклатура.Код
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	ГруппаСкладов,
					|	Склад,
	                |	Номенклатура
	                |АВТОУПОРЯДОЧИВАНИЕ";
	 
	 Запрос.УстановитьПараметр("Регистратор", ЭтотОбъект.Ссылка);
	 
	 Результат = Запрос.Выполнить();
	 ТЗ1 = Результат.Выгрузить();
	 
	 Возврат ТЗ1;
	 
КонецФункции	

Процедура КоманднаяПанельТовары3ВРезерв(Кнопка)
	
	Если Товары.Количество()=0 Тогда
		Предупреждение("Не заполнена таблица ""Товары""!
					   |Невозможно установить Резерв на Складах!");
		Возврат;
	КонецЕсли;	
	
	Если Товары.Итог("КоличествоЗаказано")=0 Тогда
		Предупреждение("Не заполнено Количество Заказано в таблице ""Товары""!
					   |Невозможно установить Резерв на Складах!");
		Возврат;
	КонецЕсли;
	
	//---------автоопределение оперативного проведения------------------
	Если НачалоДня(Дата)=НачалоДня(ТекущаяДата()) Тогда 
		режимПроведения = РежимПроведенияДокумента.Оперативный; //всегда Оперативно
		Дата=ТекущаяДата();
	Иначе		
		режимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;	
	
	попытка
		
		Если ЭтотОбъект.ПометкаУдаления Тогда
		ЭтотОбъект.Записать();
 		//этаформа.Модифицированность = ложь;
		Иначе	
		ЭтотОбъект.Записать(РежимЗаписиДокумента.Проведение, режимПроведения);
		КонецЕсли;
	   
	Исключение
		Сообщить("Не удалось записать документ!", СтатусСообщения.Важное);
	КонецПопытки;
	
КонецПроцедуры

Процедура КоманднаяПанельТовары2СнятьРезерв(Кнопка)
	ЭтотОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
КонецПроцедуры

Процедура КоманднаяПанельТовары2ЗаполнитьПоЗаказамПоставщиков(Кнопка)
	Если Товары.Количество()>0 Тогда
		Ответ = КодВозвратаДиалога.Нет;
		Ответ = Вопрос("Очистить текущую таблицу?", РежимДиалогаВопрос.ДаНет, 0, Ответ,"Обновить таблицу товаров");
		Если (Ответ = КодВозвратаДиалога.Нет) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказыПокупателей",ЗаказыПоставщикам.ВыгрузитьКолонку("ЗаказПоставщику"));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказыПоставщиковОстатки.Номенклатура КАК Номенклатура,
	               |	МАКСИМУМ(ЗаказыПоставщиковОстатки.КоличествоОстаток) КАК КоличествоЗаказано
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику В (&ЗаказыПокупателей) И ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ //ОТБОР 
				   |) КАК ЗаказыПоставщиковОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказыПоставщиковОстатки.Номенклатура
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Номенклатура
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") 
		И ЗначениеЗаполнено(глТекущийПользователь.ОсновноеПодразделение) Тогда
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"//ОТБОР","И (ЗаказПоставщику.Подразделение=&Подразделение) ");
		Запрос.УстановитьПараметр("Подразделение", глТекущийПользователь.ОсновноеПодразделение);
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	//// свертка - уже сделана в группировке в запросе
	//Результат.Свернуть("Номенклатура, Размещение, ГруппаСкладов", "Количество");
	
	Товары.Загрузить(Результат);
	
	//удалим лишнее количество
	ТЗВыведенныхСтрок = Новый ТаблицаЗначений;
	ТЗВыведенныхСтрок.Колонки.Добавить("Номенклатура");
	
	СтруктураОтбора = Новый Структура;
	
	Для Каждого СтрокаТоваров Из Товары Цикл
		СтруктураОтбора.Вставить("Номенклатура", СтрокаТоваров.Номенклатура);
		
		Если Не ТЗВыведенныхСтрок.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда//еще не выводили
			СтрокаТоваров.Количество = 0;
		КонецЕсли;
		
		НоваяСтрокаТЗ = ТЗВыведенныхСтрок.Добавить();
		НоваяСтрокаТЗ.Номенклатура   = СтрокаТоваров.Номенклатура;
		
		СтруктураОтбора.Очистить();
	КонецЦикла;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ЗаказыПокупателейРеализацияОткрытие(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = Ложь;
	Если НЕ Элемент.Значение.Пустая() Тогда
		Элемент.Значение.получитьФорму("ФормаДокумента").Открыть();
		ЭлементыФормы.ЗаказыПокупателей.ОбновитьСтроки();
		//ПересчетКоличестваИСуммПоЗаказам(); //+++ 27.07.2014
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанельТовары2ФактРавенЗаказу(Кнопка)
	
	Если РольДоступна("ПолныеПрава")
	или ( 	//+++ 13.04.2016 Для филиалов - всегда нужен отбор!
	     ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") 
	     и РольДоступна("Кассир")
	     ) Тогда
		Предупреждение("Заполнение поля Отгружено - производится только Для незаполненных строк, 
						|Введенное вручную реальное количество в поле ""Отгружено"" - остаётся.", 30);
	Иначе
		Предупреждение("Заполнение поля Отгружено - производится только реальными данными!");
		Возврат;
	КонецЕсли;	
					   
	Для Каждого стр1 из Товары Цикл
		Если ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Расход Тогда
			колМин = мин(стр1.КоличествоЗаказано, стр1.КоличествоСвободно);
		Иначе //Если ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Приход Тогда
			колМин = стр1.КоличествоЗаказано;
		КонецЕсли;
		
		Если стр1.Количество=0 Тогда //и не ЗначениеЗаполнено(стр1.АдресХранения) Тогда
			стр1.Количество = колМин;
		ИначеЕсли стр1.Количество > колМин Тогда
			Сообщить(строка(стр1.НомерСтроки)+") Количество отгружено: "+строка(стр1.Количество)+" больше Заказанного: "+строка(колМин)+"!", СтатусСообщения.Внимание);
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

Процедура ГруппыСкладовФлагПриИзменении(Элемент)
	текСтрока = ЭлементыФормы.ГруппыСкладов.ТекущиеДанные;
	Если НЕ элемент.Значение Тогда
		текСтрока.Приоритет = 0;
		ГруппыСкладовПриоритетПриИзменении(Неопределено);
	Иначе    //макс приоритет + 1
		табЗнач = ГруппыСкладов.Выгрузить();
		табЗнач.Свернуть("Приоритет");
		табЗнач.Сортировать("Приоритет Убыв");
		текСтрока.Приоритет = табЗнач[0].Приоритет + 1;
		ГруппыСкладовПриоритетПриИзменении(Неопределено);
	КонецЕсли;	
КонецПроцедуры

Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.ячейки.Флаг.ОтображатьТекст  = Ложь;
	ОформлениеСтроки.ячейки.Флаг.ОтображатьФлажок = Истина;
	ОформлениеСтроки.ячейки.Флаг.Флажок = (ДанныеСтроки.Количество>0);
	
Если ЭлементыФормы.Товары.Колонки.Код.Видимость Тогда	
	ОформлениеСтроки.ячейки.Код.ОтображатьТекст  = Истина;
	ОформлениеСтроки.ячейки.Код.Текст = ДанныеСтроки.Номенклатура.Код;
КонецЕсли;

//из модуля яштПрочее - то что видно...
	мКолонкиТовары = ЭлементыФормы.Товары.Колонки;
	Если мКолонкиТовары.Объем.Видимость Тогда
		ПоказатьОбъем(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	КонецЕсли;
	
	Если ДанныеСтроки.Количество<>ДанныеСтроки.КоличествоЗаказано тогда
		ОформлениеСтроки.Шрифт = новый Шрифт(ОформлениеСтроки.Шрифт,,,Истина);
		если ДанныеСтроки.КоличествоЗаказано<ДанныеСтроки.Количество тогда // перегруз!
			ОформлениеСтроки.ЦветТекста = webЦвета.Красный;
		КонецЕсли;
	КонецЕсли;	
	Если ДанныеСтроки.Количество=0 тогда // ничего нет!
			ОформлениеСтроки.ЦветТекста = webЦвета.ТемноСиний;
	КонецЕсли;	

КонецПроцедуры


// +++ 22.03.2013 
// Процедура вызывается при выборе пункта "Из терминала сбора данных"
// меню кнопки "Заполнить" командной панели табличного поля "ТоварыАдресноеХранение"
//
Процедура КоманднаяПанельТовары2ИзТерминалаСбораДанных(Кнопка)
Перем Ответ, Данные, ВремТовар, ВремЕдиница;

	//+++ переподключение принудительное - всегда!
			глТорговоеОборудование.ОтключитьОборудование();
		    глТорговоеОборудование.ПодключитьОборудование();
	
	Если глТорговоеОборудование = Неопределено или глТорговоеОборудование.млТерминал.Количество() = 0 Тогда
		Предупреждение("Терминал сбора данных не подключен!");
	Иначе
		Если глТорговоеОборудование.млТерминал.Количество() = 1 Тогда

			РезультатВыбора = глТорговоеОборудование.млТерминал[0];

		Иначе

			СписокТерминаловСбораДанных = Новый СписокЗначений;
			Для Каждого ТерминалСбораДанных из глТорговоеОборудование.млТерминал Цикл
				СписокТерминаловСбораДанных.Добавить(ТерминалСбораДанных, ТерминалСбораДанных.Модель);
			КонецЦикла;
			РезультатВыбора = СписокТерминаловСбораДанных.ВыбратьЭлемент("Выберите терминал сбора данных");
			Если РезультатВыбора = Неопределено Тогда
				Возврат;
			КонецЕсли;
			РезультатВыбора = РезультатВыбора.Значение;

		КонецЕсли;
		
///++++++++++++++++++++++++++++++++++++++++++++++Плотников Терминалы Моторолла
		
		Если РезультатВыбора.Модель = Справочники.ТорговоеОборудование.НайтиПоНаименованию("КПК под управлением «АТОЛ: Mobile Logistics»") Тогда
			
			Ответ = глТорговоеОборудование.ТСДЗагрузитьДанные(Данные);
			
		Если Не ПустаяСтрока(Ответ) Тогда
			Предупреждение(Ответ);
		ИначеЕсли Данные.Количество() = 0 Тогда
			Предупреждение("Из терминала сбора данных не загружено ни одного товара...");
		Иначе
			
			
//------------при первой загрузке из ТСД - требуется очистка, при последующих - нет!-------------------------------			
			Режим = РежимДиалогаВопрос.ДаНет;
			Ответ = Вопрос("Перед Заполнением из ТСД - удалить ВСЕ значения Количества Отгружено Для адресного хранения?", Режим, 0);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Переспрашивать = Истина;
				Для Каждого стр1 из Товары Цикл
					Если стр1.Склад.АдресноеХранение Тогда
						Если стр1.Количество>0 и Переспрашивать Тогда
							Режим = РежимДиалогаВопрос.ДаНет;
							Ответ = Вопрос("Вы действительно хотите удалить ВСЕ ранее введенные значения Количества Отгружено?", Режим, 0);
							Если Ответ = КодВозвратаДиалога.Да Тогда
								прервать;
							КонецЕсли;	
						Переспрашивать = Ложь;
						КонецЕсли;
					
						стр1.Количество = 0;
						
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;

			
			i=0;    
			пустойСклад = справочники.Склады.ПустаяСсылка();
	//--------------------------------------------------------------------------------------------------------------------------		
	        Для Каждого СтрокаДанных Из Данные Цикл
				
				Если стрДлина(СтрокаДанных.штриХкод)=13 тогда //16.11.2015  - поиск по штрихКоду
				    если лев(СтрокаДанных.штриХкод,5) = "05000" тогда // "наш" код = префикс + код товара + КС
				        Код = сред(СтрокаДанных.штриХкод, 6,7);
						ВремТовар = Справочники.Номенклатура.НайтиПоКоду(Код);  //+++
				    иначе	
				       	ТаблицаВладельцев = новый ТаблицаЗначений;
						Если глТорговоеОборудование.ПолучитьТоварПоШтрихкоду(СтрокаДанных.штриХкод, ТаблицаВладельцев) тогда// пытаемся найти в регСв.ШК!
							ВремТовар = ТаблицаВладельцев[0].Номенклатура;
						иначе
							ВремТовар = справочники.Номенклатура.ПустаяСсылка();
						КонецЕсли;
 				    КонецЕсли; 
			    иначе
				    АдресХ = ЛЕВ(СтрокаДанных.штриХкод,7);
				КонецЕсли;
				
				Если стрДлина(СтрокаДанных.Ячейка)>6 и лев(СтрокаДанных.Ячейка,1) = "1" тогда // "обрезаем" префикс для 5000
				    АдресХ = сред(СтрокаДанных.Ячейка,2,6);  
			    Иначе //как есть но в поле Адреса
				    АдресХ = лев(СтрокаДанных.Ячейка,7);
			    КонецЕсли;
		
				i=i+1;
				
				 //09.11.2015 - Аксессуары
				 Если НЕ ЗначениеЗаполнено(ВремТовар) тогда
					ВремТоварТабл = новый ТаблицаЗначений;
					глТорговоеОборудование.ПолучитьТоварПоШтрихкоду(СтрокаДанных.Штрихкод, ВремТоварТабл);
					Если ВремТоварТабл.Количество()>0 тогда
						ВремТовар = ВремТоварТабл[0].Номенклатура;
					КонецЕсли;	
					#Если Клиент тогда 
					Если ЗначениеЗаполнено(ВремТовар) тогда 
						Сообщить("По ШК: "+СокрЛП(СтрокаДанных.Штрихкод)+" Найден товар: "+строка(ВремТовар.Код)+" "+строка(ВремТовар), СтатусСообщения.Информация);
					иначе	
						Сообщить("По ШК: "+СокрЛП(СтрокаДанных.Штрихкод)+" НЕ Найден товар!", СтатусСообщения.Внимание);
					КонецЕсли;	
					#КонецЕсли	
				КонецЕсли;	
				
				Если ЗначениеЗаполнено(ВремТовар) Тогда
					
					
					//+++ 24.12.2012 - 14.07.2017 - для загрузки по ШК склада!
 					СтруктураОтбора = Новый Структура();
					СтруктураОтбора.Вставить("Номенклатура", ВремТовар);
					Склад = справочники.Склады.ПустаяСсылка();
					Адрес = справочники.АдресаХранения.ПустаяСсылка();
					Если лев(АдресХ,2)="99" и стрДлина(АдресХ)=7 тогда 
					АдресХ = прав(АдресХ,5);
					Склад = справочники.Склады.НайтиПоКоду(АдресХ);	
						Если НЕ ЗначениеЗаполнено(Склад) Тогда
						сообщить(строка(i)+" строка - Не найден Склад по коду: "+АдресХ, СтатусСообщения.Внимание);
						Склад = справочники.Склады.ПустаяСсылка();
						КонецЕсли;	
					Иначе
					Адрес = справочники.АдресаХранения.НайтиПоКоду(АдресХ);
						Если НЕ ЗначениеЗаполнено(Адрес) Тогда
						сообщить(строка(i)+" строка - Не найден Адрес по коду: "+АдресХ, СтатусСообщения.Внимание);
						Адрес = справочники.АдресаХранения.ПустаяСсылка();
						КонецЕсли;
					КонецЕсли;
					СтруктураОтбора.Вставить("Склад", Склад);
					СтруктураОтбора.Вставить("АдресХранения",Адрес);
					
					СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(Товары, СтруктураОтбора);  //+++ здесь ТОВАРЫ! +++
					
					Если СтрокаТабличнойЧасти <> Неопределено Тогда
						
						// Нашли, ПЕРЕЗАПИСЫВАЕМ количеством в первой найденной строке.
						СтрокаТабличнойЧасти.Количество = СтрокаДанных.Количество; // +  СтрокаТабличнойЧасти.Количество 
						
						дельта = ПроверкаПревышенияОбщегоКоличества(СтрокаТабличнойЧасти); // только предупреждение!
						
 					Иначе
 						
						//добавляем новую строку.
						
						СтрокаТабличнойЧасти = Товары.Добавить();
						СтрокаТабличнойЧасти.Номенклатура           = ВремТовар;  //+++
						
						СтрокаТабличнойЧасти.Количество             = СтрокаДанных.Количество;
						
						СтрокаТабличнойЧасти.АдресХранения			= Адрес;
						СтрокаТабличнойЧасти.Склад					= ?(ЗначениеЗаполнено(Адрес), Адрес.Владелец, пустойСклад );
						
						// Не нашли - почему-то... это ГРУБАЯ ошибка !!!
						сообщить("Добавлена строка № "+строка(СтрокаТабличнойЧасти.НомерСтроки)+", Товар или Адрес - ОТСУТСТВУЮТ В ЗАДАНИИ !", СтатусСообщения.Внимание);
						
						// Выполнить общие действия Для всех документов при изменении номенклатуры.
						ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

					КонецЕсли;

					// Рассчитать реквизиты табличной части.
					//РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
					//РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

					ЭлементыФормы.Товары.ТекущаяСтрока  = СтрокаТабличнойЧасти;
				КонецЕсли;
			КонецЦикла;

			Ответ = Вопрос("Очистить память терминала сбора данных?", РежимДиалогаВопрос.ДаНет,60,КодВозвратаДиалога.Да,"Очистка ТСД");
			Если Ответ = КодВозвратаДиалога.Да Тогда
				СтрокаТаблицыТерминала = Неопределено;
				Если глТорговоеОборудование = Неопределено 
					или глТорговоеОборудование.млТерминал.Количество()>0 Тогда
					СтрокаТаблицыТерминала = Новый Структура; //+++ 09.01.2012
					СтрокаТаблицыТерминала.Вставить("Объект" , глТорговоеОборудование.млТерминал[0].Объект );
					СтрокаТаблицыТерминала.Вставить("НомерЛУ", глТорговоеОборудование.млТерминал[0].НомерЛУ);
					СтрокаТаблицыТерминала.Вставить("Модель",  глТорговоеОборудование.млТерминал[0].Модель);
				//Иначе // ТСД не подключен.	
				КонецЕсли;
				Ответ = глТорговоеОборудование.ОчиститьПамятьТерминалаСбораДанных(СтрокаТаблицыТерминала);
				Если Не ПустаяСтрока(Ответ) Тогда
					Предупреждение(Ответ);
				КонецЕсли;
			КонецЕсли;
		
		КонецЕсли;
		
 //+++++++++++++++++++++++++++++++++++Продолжение Огородников
		Иначе 
			
		нетАдреса = ЛОЖЬ; //+++ это ВАЖНО !!!
		Ответ = глТорговоеОборудование.ЗагрузитьДанныеИзТерминалаСбораДанных(РезультатВыбора, Данные, нетАдреса);
		
		Если Не ПустаяСтрока(Ответ) Тогда
			Предупреждение(Ответ);
		ИначеЕсли Данные.Количество() = 0 Тогда
			Предупреждение("Из терминала сбора данных не загружено ни одного товара...");
		Иначе
			
			
//------------при первой загрузке из ТСД - требуется очистка, при последующих - нет!-------------------------------			
			Режим = РежимДиалогаВопрос.ДаНет;
			Ответ = Вопрос("Перед Заполнением из ТСД - удалить ВСЕ значения Количества Отгружено Для адресного хранения?", Режим, 0);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Переспрашивать = Истина;
				Для Каждого стр1 из Товары Цикл
					Если стр1.Склад.АдресноеХранение Тогда
						Если стр1.Количество>0 и Переспрашивать Тогда
							Режим = РежимДиалогаВопрос.ДаНет;
							Ответ = Вопрос("Вы действительно хотите удалить ВСЕ ранее введенные значения Количества Отгружено?", Режим, 0);
							Если Ответ = КодВозвратаДиалога.Да Тогда
								прервать;
							КонецЕсли;	
						Переспрашивать = Ложь;
						КонецЕсли;
					
						стр1.Количество = 0;
						
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;

			
			i=0;    
			пустойСклад = справочники.Склады.ПустаяСсылка();
	//--------------------------------------------------------------------------------------------------------------------------		
			Для Каждого СтрокаДанных Из Данные Цикл
				i=i+1;
				ВремТовар = Справочники.Номенклатура.НайтиПоКоду(СтрокаДанных.Код);  //+++
				
				 //09.11.2015 - Аксессуары
				 Если НЕ ЗначениеЗаполнено(ВремТовар) тогда
					ВремТоварТабл = новый ТаблицаЗначений;
					глТорговоеОборудование.ПолучитьТоварПоШтрихкоду(СтрокаДанных.Штрихкод, ВремТоварТабл);
					Если ВремТоварТабл.Количество()>0 тогда
						ВремТовар = ВремТоварТабл[0].Номенклатура;
					КонецЕсли;	
					#Если Клиент тогда 
					Если ЗначениеЗаполнено(ВремТовар) тогда 
						Сообщить("По ШК: "+СокрЛП(СтрокаДанных.Штрихкод)+" Найден товар: "+строка(ВремТовар.Код)+" "+строка(ВремТовар), СтатусСообщения.Информация);
					иначе	
						Сообщить("По ШК: "+СокрЛП(СтрокаДанных.Штрихкод)+" НЕ Найден товар!", СтатусСообщения.Внимание);
					КонецЕсли;	
					#КонецЕсли	
				КонецЕсли;	
				
				Если ЗначениеЗаполнено(ВремТовар) Тогда
					
					//+++ 24.12.2012
					Адрес = справочники.АдресаХранения.НайтиПоКоду(СтрокаДанных.Адрес);
					Если НЕ ЗначениеЗаполнено(Адрес) Тогда
						сообщить(строка(i)+" строка - Нет Адреса Хранения: "+СтрокаДанных.Адрес, СтатусСообщения.Внимание);
					КонецЕсли;
					
					СтруктураОтбора = Новый Структура();
					СтруктураОтбора.Вставить("Номенклатура", ВремТовар);
					СтруктураОтбора.Вставить("АдресХранения",Адрес);
					
					СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(Товары, СтруктураОтбора);  //+++ здесь ТОВАРЫ! +++
					
					Если СтрокаТабличнойЧасти <> Неопределено Тогда
						
						// Нашли, ПЕРЕЗАПИСЫВАЕМ количеством в первой найденной строке.
						СтрокаТабличнойЧасти.Количество = СтрокаДанных.Количество; // +  СтрокаТабличнойЧасти.Количество 
						
						дельта = ПроверкаПревышенияОбщегоКоличества(СтрокаТабличнойЧасти); // только предупреждение!
						
 					Иначе
 						
						//добавляем новую строку.
						
						СтрокаТабличнойЧасти = Товары.Добавить();
						СтрокаТабличнойЧасти.Номенклатура           = ВремТовар;  //+++
						
						СтрокаТабличнойЧасти.Количество             = СтрокаДанных.Количество;
						
						СтрокаТабличнойЧасти.АдресХранения			= Адрес;
						СтрокаТабличнойЧасти.Склад					= ?(ЗначениеЗаполнено(Адрес), Адрес.Владелец, пустойСклад );
						
						// Не нашли - почему-то... это ГРУБАЯ ошибка !!!
						сообщить("Добавлена строка № "+строка(СтрокаТабличнойЧасти.НомерСтроки)+", Товар или Адрес - ОТСУТСТВУЮТ В ЗАДАНИИ !", СтатусСообщения.Внимание);
						
						// Выполнить общие действия Для всех документов при изменении номенклатуры.
						ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

					КонецЕсли;

					// Рассчитать реквизиты табличной части.
					//РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
					//РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

					ЭлементыФормы.Товары.ТекущаяСтрока  = СтрокаТабличнойЧасти;
				КонецЕсли;
			КонецЦикла;

			//Ответ = Вопрос("Очистить память терминала сбора данных?", РежимДиалогаВопрос.ДаНет,60,КодВозвратаДиалога.Да,"Очистка ТСД");
			//Если Ответ = КодВозвратаДиалога.Да Тогда
			//	СтрокаТаблицыТерминала = Неопределено;
			//	Если глТорговоеОборудование = Неопределено 
			//		или глТорговоеОборудование.млТерминал.Количество()>0 Тогда
			//		СтрокаТаблицыТерминала = Новый Структура; //+++ 09.01.2012
			//		СтрокаТаблицыТерминала.Вставить("Объект" , глТорговоеОборудование.млТерминал[0].Объект );
			//		СтрокаТаблицыТерминала.Вставить("НомерЛУ", глТорговоеОборудование.млТерминал[0].НомерЛУ);
			//		СтрокаТаблицыТерминала.Вставить("Модель",  глТорговоеОборудование.млТерминал[0].Модель);
			//	//Иначе // ТСД не подключен.	
			//	КонецЕсли;
			//	Ответ = глТорговоеОборудование.ОчиститьПамятьТерминалаСбораДанных(СтрокаТаблицыТерминала);
			//	Если Не ПустаяСтрока(Ответ) Тогда
			//		Предупреждение(Ответ);
			//	КонецЕсли;
			//КонецЕсли;
		
		КонецЕсли;
		КонецЕсли; ///Конец Плотников Терминалы Моторолла
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанельТовары2ВыгрузитьВТСД(Кнопка)
	
	ТабДок = СформироватьСписокАдресовХранения();
	
	Если ТабДок<>Неопределено Тогда
		Если глТорговоеОборудование.млТерминал.Количество() = 0 Тогда
			глТорговоеОборудование.ОтключитьОборудование();
			глТорговоеОборудование.ПодключитьОборудование();
		КонецЕсли;
			
		Если глТорговоеОборудование.млТерминал.Количество() = 1 Тогда
			 РезультатВыбора = глТорговоеОборудование.млТерминал[0];
		Иначе
			СписокТерминаловСбораДанных = Новый СписокЗначений;
			Для Каждого ТерминалСбораДанных из глТорговоеОборудование.млТерминал Цикл
				СписокТерминаловСбораДанных.Добавить(ТерминалСбораДанных, ТерминалСбораДанных.Модель);
			КонецЦикла;
			РезультатВыбора = СписокТерминаловСбораДанных.ВыбратьЭлемент("Выберите терминал сбора данных");
			Если РезультатВыбора = Неопределено Тогда
				Предупреждение("Терминал сбора данных не подключен!");
				Возврат;
			КонецЕсли;
			РезультатВыбора = РезультатВыбора.Значение;
		КонецЕсли;
		 ответ = глТорговоеОборудование.ВыгрузитьДанныеВТерминалСбораДанных( РезультатВыбора, ТабДок );
	
	ТабДок.Показать();	
	Предупреждение(" Выгрузка завершена!
				   |"+ответ);
				   
	Иначе
		Предупреждение(" Нет товаров Для выгрузки в ТСД!");
	КонецЕсли;

КонецПроцедуры


//--------требуется новая конфигурация ТСД 
//в которой БазаДанных имеет 5 полей, 5-ое поле - это порядковый номер строки
//					Код / Название / Адрес / Количество / N
//
Функция СформироватьСписокАдресовХранения()
	рез = Неопределено;
	
   Запрос = Новый Запрос;
   Запрос.УстановитьПараметр("ссылка", ЭтотОбъект.ссылка);
   Запрос.УстановитьПараметр("АдресХраненияПустой",Справочники.АдресаХранения.ПустаяСсылка() );
   
   Запрос.Текст = "ВЫБРАТЬ
                  |	ЕСТЬNULL(ЗаданиеНаОтгрузку.НомерСтроки, 1000) КАК НомерСтроки,
                  |	ЗаданиеНаОтгрузку.Номенклатура КАК Номенклатура,
                  |	ЗаданиеНаОтгрузку.КоличествоЗаказано КАК КоличествоЗаказано,
                  |	ЗаданиеНаОтгрузку.АдресХранения.Код КАК АдресХраненияКод,
                  |	ЕСТЬNULL(ЗаданиеНаОтгрузку.КоличествоСвободно, 0) КАК КоличествоСвободно
                  |ИЗ
                  |	Документ.ЗаданиеНаОтгрузку.Товары КАК ЗаданиеНаОтгрузку
                  |ГДЕ
                  |	ЗаданиеНаОтгрузку.Ссылка = &Ссылка
                  |	И ЗаданиеНаОтгрузку.Склад.АдресноеХранение
                  |	И ЗаданиеНаОтгрузку.АдресХранения <> &АдресХраненияПустой
                  |
                  |УПОРЯДОЧИТЬ ПО
				  // сортировка по полю Порядок - уже есть при формировании товаров
                  |	НомерСтроки
                  |АВТОУПОРЯДОЧИВАНИЕ";   
				  
выборкаНоменклатуры = Запрос.Выполнить().Выбрать();  // запрос без итогов!

Если выборкаНоменклатуры.Количество()>0 Тогда
	
	табДок =Новый ТабличныйДокумент;
	//	выгружается с 5-ой строки:
	табДок.Область(4,2,4,2).текст = "Код / Название / Адрес / Количество / N";

	//	Данные.ПолучитьОбласть(5,2, Данные.ВысотаТаблицы, Данные.ШиринаТаблицы);
	
	чПМ = 0;  //(число палетто-мест) - это обычный порядковый номер  
	Пока выборкаНоменклатуры.Следующий() Цикл
		чПМ = чПМ + 1;
		  табДок.Область(4+чПМ, 2,  4+чПМ, 2).Текст = СокрЛП(выборкаНоменклатуры.номенклатура.Код);
		  табДок.Область(4+чПМ, 3,  4+чПМ, 3).Текст = Лев(выборкаНоменклатуры.номенклатура.Наименование,75);
		  табДок.Область(4+чПМ, 4,  4+чПМ, 4).Текст = "1"+сокрЛП(выборкаНоменклатуры.АдресХраненияКод);
		  
		  КолМин = Мин(выборкаНоменклатуры.КоличествоЗаказано, выборкаНоменклатуры.КоличествоСвободно);
		  табДок.Область(4+чПМ, 5,  4+чПМ, 5).Текст = КолМин;
		  
		  табДок.Область(4+чПМ, 6,  4+чПМ, 6).Текст = чПМ;   //пн или выборкаНоменклатуры.НомерСтроки;
	КонецЦикла;

рез = табДок;
КонецЕсли;	

	Возврат рез;
КонецФункции


//получает число
Функция ПолучитьСвободныйОстатокСклада(Номенклатура, Склад)
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	ТоварыНаСкладахОстатки.Склад,
	 |	СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0)) КАК КоличествоСвободно
	 |ИЗ
	 |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	 //|			&МоментВремени
	 |			,Номенклатура = &Номенклатура
	 |				И Склад = &Склад) КАК ТоварыНаСкладахОстатки
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервНаСкладах.Остатки(
	 //|				&МоментВремени
	 |				,Номенклатура = &Номенклатура
	 |					И Склад = &Склад) КАК РезервНаСкладахОстатки
	 |		ПО ТоварыНаСкладахОстатки.Номенклатура = РезервНаСкладахОстатки.Номенклатура
	 |			И ТоварыНаСкладахОстатки.Склад = РезервНаСкладахОстатки.Склад
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ТоварыНаСкладахОстатки.Склад";
	 
	 Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	 Запрос.УстановитьПараметр("Склад", Склад );
	 
	 //МоментВремени = Новый Граница(Дата, ВидГраницы.Исключая); 
	 //Запрос.УстановитьПараметр("МоментВремени", МоментВремени );
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Если Выборка.Следующий() Тогда
		 рез = выборка.КоличествоСвободно;
	 Иначе
		 рез=0;
	 КонецЕсли;	 

	 Возврат рез;
	 
КонецФункции

//получает выборку Складов и Свободных Остатков
Функция ПолучитьСвободныйОстатокГруппы(Номенклатура, ГруппаСкладов=неопределено)
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	спрСклады.Ссылка КАК Склад
	                |ПОМЕСТИТЬ ВТ_Склады
	                |ИЗ
	                |	Справочник.Склады КАК спрСклады
	                |ГДЕ
	                |	спрСклады.ЗапретитьИспользование = ЛОЖЬ
	                |	И спрСклады.Транзитный = ЛОЖЬ
			|//Гр	И спрСклады.ГруппаСкладов = &ГруппаСкладов
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ТоварыНаСкладахОстатки.Склад КАК Склад,
	                |	СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0)) КАК КоличествоСвободно
	                |ИЗ
	                |	РегистрНакопления.ТоварыНаСкладах.Остатки(,

	                |			Номенклатура = &Номенклатура
	                |				И Склад В(ВЫБРАТЬ ВТ_Склады.Склад
	                |					ИЗ ВТ_Склады)) КАК ТоварыНаСкладахОстатки
					//структура регистра переделана на поиск по Кластерному индексу
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервНаСкладах.Остатки( ,



	                |				Номенклатура = &Номенклатура
	                |					И Склад В (ВЫБРАТЬ ВТ_Склады.Склад
	                |						ИЗ ВТ_Склады)) КАК РезервНаСкладахОстатки
	                |		ПО ТоварыНаСкладахОстатки.Склад = РезервНаСкладахОстатки.Склад
	                |			И ТоварыНаСкладахОстатки.Номенклатура = РезервНаСкладахОстатки.Номенклатура

	                |ГДЕ
	                |	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0) > 0
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ТоварыНаСкладахОстатки.Склад";
	 Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	 
	Если ГруппаСкладов<>неопределено тогда
		Запрос.Текст = стрЗаменить(Запрос.Текст, "//Гр", "");
	 	Запрос.УстановитьПараметр("ГруппаСкладов", ?(ГруппаСкладов=справочники.ГруппыСкладов.ОсновнойСклад, справочники.ГруппыСкладов.ПустаяСсылка(), ГруппаСкладов) );
	КонецЕсли;
	
	Если Подразделение.ОбособленноеПодразделение тогда
		Запрос.Текст = стрЗаменить(Запрос.Текст, "спрСклады.Транзитный = ЛОЖЬ", "спрСклады.Транзитный и спрСклады.Подразделение=&Подразделение");
		Запрос.УстановитьПараметр("Подразделение", Подразделение ); 
	КонецЕсли;	
	

	 МоментВремени = Новый Граница(Дата, ВидГраницы.Исключая); 
	 Запрос.УстановитьПараметр("МоментВремени", МоментВремени );
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Возврат Выборка;
	 
 КонецФункции
	
//получает число
Функция ПолучитьСвободныйОстатокАдреса(Номенклатура, АдресХранения)
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ТоварыАдресноеХранение.АдресХранения,
	                |	ЕСТЬNULL(ТоварыАдресноеХранение.КоличествоОстаток, 0) - ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоСвободно
	                |ИЗ
	                |	РегистрНакопления.ТоварыАдресноеХранение.Остатки(
	                //|			&МоментВремени
	                |			,Номенклатура = &Номенклатура
	                |				И АдресХранения = &АдресХранения) КАК ТоварыАдресноеХранение
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервНаСкладах.Остатки(
	                //|				&МоментВремени
	                |				,Номенклатура = &Номенклатура
	                |					И АдресХранения = &АдресХранения) КАК РезервНаСкладахОстатки
	                |		ПО ТоварыАдресноеХранение.Номенклатура = РезервНаСкладахОстатки.Номенклатура
	                |			И ТоварыАдресноеХранение.Склад = РезервНаСкладахОстатки.Склад
	                |			И ТоварыАдресноеХранение.АдресХранения = РезервНаСкладахОстатки.АдресХранения
	                |";
	 
	 МоментВремени = Новый Граница(Дата, ВидГраницы.Исключая); 
	 Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	 Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	 Запрос.УстановитьПараметр("АдресХранения", АдресХранения );
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Если Выборка.Следующий() Тогда
		 рез = Выборка.КоличествоСвободно;
	 Иначе
		 рез=0;
	 КонецЕсли;	 

	 Возврат рез;
КонецФункции

//выборка всех адресов и свободных остатков
Функция ПолучитьСвободныйОстатокВсехАдресов(Номенклатура, Склад=неопределено)
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ТоварыАдресноеХранение.АдресХранения,
	                |	ЕСТЬNULL(ТоварыАдресноеХранение.КоличествоОстаток, 0) - ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоСвободно
	                |ИЗ
	                |	РегистрНакопления.ТоварыАдресноеХранение.Остатки(
	               // |			&МоментВремени
	                |			,Номенклатура = &Номенклатура
					|					И (НЕ Склад.Транзитный)
 					|//Скл				И Склад = &Склад
					|) КАК ТоварыАдресноеХранение
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервНаСкладах.Остатки(
	               // |				&МоментВремени
	                |				,Номенклатура = &Номенклатура
					|					И (НЕ Склад.Транзитный)
	                |//Скл					И Склад = &Склад
					|) КАК РезервНаСкладахОстатки
	                |		ПО ТоварыАдресноеХранение.Номенклатура = РезервНаСкладахОстатки.Номенклатура
	                |			И ТоварыАдресноеХранение.Склад = РезервНаСкладахОстатки.Склад
	                |			И ТоварыАдресноеХранение.АдресХранения = РезервНаСкладахОстатки.АдресХранения
	                |ГДЕ
	                |	ЕСТЬNULL(ТоварыАдресноеХранение.КоличествоОстаток, 0) - ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0) > 0
	                |
	                |";
	 
	 МоментВремени = Новый Граница(Дата, ВидГраницы.Исключая); 
	 Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	 Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	 
	 Если Склад<>неопределено тогда
		Запрос.текст = стрЗаменить(Запрос.текст, "//Скл","");
	 КонецЕсли;
		
	 Если Подразделение.ОбособленноеПодразделение тогда
	 	Запрос.текст = стрЗаменить(Запрос.текст, "(НЕ Склад.Транзитный)", "Склад.Транзитный и Склад.Подразделение=&Подразделение");
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
 	 КонецЕсли;
 
	 Запрос.УстановитьПараметр("Склад", Склад );
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Возврат Выборка;
	 
КонецФункции


//=====================ИНТЕРФЕЙСНЫЕ ФУНКЦИИ ФОРМЫ=====================================

//-при ручном изменении Склада или адреса хранения - получим текущие остатки (свободные)-----

Процедура ТоварыПередУдалением(Элемент, Отказ)
	Если РольДоступна("ПолныеПрава") Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Список формируется автоматически.
					|Вы действительно хотите удалть строку?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			отказ = Истина;
		КонецЕсли;
	Иначе
		Предупреждение("У Вас недостаточно прав Для удаления строк из таблицы Товары!", 30);
		отказ = Истина;
	КонецЕсли;	
КонецПроцедуры

Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование)
	КолОсталосьЗаказать = 0;
	Если не Копирование Тогда
		Предупреждение("   Нельзя просто добавлять строки!
					   |Список товаров формируется автоматически
					   |из структуры по складам ""Порядок отгрузки""
					   |по неотгруженным товарам из Заказов покупателей!", 30);
					   
		//+++ 26.11.2015 - нельзя так, но программистам - можно
		// если руками добавлять товар - то нужно добавлять количество на закладке "Порядок отгрузки" 
		Отказ = НЕ РольДоступна("ПравоЗавершенияРаботыПользователей"); 
		
	Иначе
		КолОсталосьЗаказать = Элемент.ТекущаяСтрока.КоличествоЗаказано 
		- ?(Элемент.ТекущаяСтрока.Количество>0, Элемент.ТекущаяСтрока.Количество, Элемент.ТекущаяСтрока.КоличествоСвободно);
		Если КолОсталосьЗаказать <= 0 Тогда
			Предупреждение("Добавление еще одной строки товара - не требуется!
							|При необходимости, измените Склад(Адрес) в текущей строке!");
			Отказ = Истина;
		Иначе	
		//уменьшим кол.заказано в текущей строке
			Элемент.ТекущаяСтрока.КоличествоЗаказано = ?(Элемент.ТекущаяСтрока.Количество>0, Элемент.ТекущаяСтрока.Количество, Элемент.ТекущаяСтрока.КоличествоСвободно);

			//а остаток - в следующую!!!
			Предупреждение("Осталось отгрузить "+строка(КолОсталосьЗаказать)+" шт.
						   |товара с кодом: "+строка(Элемент.ТекущаяСтрока.Номенклатура.Код), 10);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

Процедура ТоварыСкладПриИзменении(Элемент)
	текСтр = ЭлементыФормы.Товары.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(текСтр.Склад) Тогда
		текСтр.ГруппаСкладов = текСтр.Склад.ГруппаСкладов;
		Если текСтр.ГруппаСкладов=справочники.ГруппыСкладов.ПустаяСсылка() Тогда
			текСтр.ГруппаСкладов = справочники.ГруппыСкладов.ОсновнойСклад;
		КонецЕсли;
		текСтр.АдресХранения = справочники.АдресаХранения.ПустаяСсылка();
		текСтр.КоличествоСвободно = ПолучитьСвободныйОстатокСклада(текСтр.Номенклатура, текСтр.Склад);
	Иначе
			 текСтр.АдресХранения = справочники.АдресаХранения.ПустаяСсылка();
		текСтр.КоличествоСвободно = 0 ;
	КонецЕсли;
Предупреждение("Требуется изменить резерв по данному Заданию на отгрузку. 
				|Нажмите ""Заполнить -> Перезаполнить Резерв""!");	

КонецПроцедуры

Процедура ТоварыАдресХраненияПриИзменении(Элемент)
	
	текСтр = ЭлементыФормы.Товары.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(текСтр.АдресХранения) Тогда
		текСтр.Склад = текСтр.АдресХранения.Владелец;
		текСтр.ГруппаСкладов = текСтр.Склад.ГруппаСкладов;
		Если текСтр.ГруппаСкладов=справочники.ГруппыСкладов.ПустаяСсылка() Тогда
			текСтр.ГруппаСкладов = справочники.ГруппыСкладов.ОсновнойСклад;
		КонецЕсли;	
		текСтр.КоличествоСвободно = ПолучитьСвободныйОстатокАдреса(текСтр.Номенклатура, текСтр.АдресХранения);
	Иначе
	    ТоварыСкладПриИзменении(Неопределено);
	КонецЕсли;
	
	Предупреждение("Требуется изменить резерв по данному Заданию на отгрузку. 
				|Нажмите ""Заполнить -> Перезаполнить Резерв""!");	

КонецПроцедуры


//------------при выборе - даём выбрать только из ГруппыСкладов по текущей номенклатуре------------------------
Процедура ТоварыСкладНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	текСтр = ЭлементыФормы.Товары.ТекущиеДанные;
	
	Если текСтр.ГруппаСкладов = справочники.ГруппыСкладов.ПустаяСсылка() Тогда
		Предупреждение("Выбор склада без группы складов - невозможен.
						|Выберите сначала Группу складов!");
		Возврат;
	КонецЕсли;
	
	//+++ 26.05.2017 - убрана возможность отмены готового документа
	//Если ЭтотОбъект.Проведен Тогда    
	//	  Режим = РежимДиалогаВопрос.ДаНет;
	//		Ответ = Вопрос("Уже есть Резерв по данному документу.
	//					  |Перед выбором Другого склада - требуется снять резерв.
	//					  |Выполнить отмену проведения текущего Задания?", Режим, 0);
	//		Если Ответ = КодВозвратаДиалога.Да Тогда
	//			ЭтотОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	//		КонецЕсли;
	// КонецЕсли;
	
	выборкаСкладов = ПолучитьСвободныйОстатокГруппы(текСтр.Номенклатура, текСтр.ГруппаСкладов);
	
	Если выборкаСкладов.Количество()=0 Тогда 
		Предупреждение("Нет свободных остатков Для товара с кодом: "+строка(текСтр.Номенклатура.Код)+" по группе складов: "+строка(текСтр.ГруппаСкладов));
		Возврат;
	КонецЕсли;
	

	
	списокСкладов = Новый СписокЗначений;
	пока выборкаСкладов.Следующий() Цикл
		 списокСкладов.Добавить(выборкаСкладов.Склад);
	КонецЦикла;	
	
	формаВыбораСклада = справочники.Склады.ПолучитьФормуВыбора();
	
	формаВыбораСклада.СправочникСписок.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
	формаВыбораСклада.СправочникСписок.Отбор.Ссылка.Значение = списокСкладов;
	формаВыбораСклада.СправочникСписок.Отбор.Ссылка.Использование = Истина;
	
	формаВыбораСклада.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Ложь;
	текСтр.Склад = формаВыбораСклада.ОткрытьМодально();
	ТоварыСкладПриИзменении(Неопределено);
	
КонецПроцедуры

Процедура ТоварыАдресХраненияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	текСтр = ЭлементыФормы.Товары.ТекущиеДанные;
	
	Если текСтр.Склад.пустая() Тогда
		Предупреждение("Выберите сначала Склад!", 30);
		Возврат;
	КонецЕсли;
	
	Если не текСтр.Склад.АдресноеХранение Тогда
		Предупреждение("Для склада: "+строка(текСтр.Склад)+" - Адресное хранение не используется!",30);
		Возврат;
	КонецЕсли;	
	
	//+++ 26.05.2017 нельзя отменять проведение!
	//Если ЭтотОбъект.Проведен Тогда
	//	  Режим = РежимДиалогаВопрос.ДаНет;
	//		Ответ = Вопрос("Уже есть Резерв по данному документу.
	//					  |Перед выбором Другого адреса - требуется снять резерв.
	//					  |Выполнить отмену проведения текущего Задания?", Режим, 0);
	//		Если Ответ = КодВозвратаДиалога.Да Тогда
	//			ЭтотОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	//		КонецЕсли;
	// КонецЕсли;
	
	выборкаАдресов = ПолучитьСвободныйОстатокВсехАдресов(текСтр.Номенклатура, текСтр.Склад);
	
	Если выборкаАдресов.Количество()=0 Тогда 
		Предупреждение("Нет свободных остатков Для товара с кодом: "+строка(текСтр.Номенклатура.Код)+" по адресам хранения на складе: "+строка(текСтр.Склад));
		Возврат;
	КонецЕсли;
	
	
	списокАдресовХранения = Новый СписокЗначений;
	пока выборкаАдресов.Следующий() Цикл
		 списокАдресовХранения.Добавить(выборкаАдресов.АдресХранения);
	КонецЦикла;	
	
	формаВыбораСклада = справочники.АдресаХранения.ПолучитьФормуВыбора();
	
	формаВыбораСклада.СправочникСписок.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
	формаВыбораСклада.СправочникСписок.Отбор.Ссылка.Значение = списокАдресовХранения;
	формаВыбораСклада.СправочникСписок.Отбор.Ссылка.Использование = Истина;
	
	формаВыбораСклада.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Ложь;
	текСтр.АдресХранения = формаВыбораСклада.ОткрытьМодально();
	ТоварыАдресХраненияПриИзменении(Неопределено);
	
КонецПроцедуры

  
Процедура ЗаказыПоставщикамПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
		ПолучитьАссортимент();
		ПересчетКоличестваИСуммПоЗаказам();
КонецПроцедуры

Процедура ЗаказыПокупателейПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
		Если не Элемент.выделенныеСтроки[0].ЗаказПокупателя.Проверен Тогда
			сообщить(строка(Элемент.выделенныеСтроки[0].ЗаказПокупателя)+" - не проделен! Отгружать его нельзя!");
		КонецЕсли;	

		ПолучитьАссортимент();
		//ПересчетКоличестваИСуммПоЗаказам();
КонецПроцедуры

Процедура ЗаказыПокупателейПослеУдаления(Элемент)
		ПолучитьАссортимент();
		ПересчетКоличестваИСуммПоЗаказам();
КонецПроцедуры

//---------------------------------------работа с реализациями--------------------------------
Процедура КоманднаяПанельТоварыПровестиРеализации(Кнопка)
	Для Каждого стр1 из ЗаказыПокупателей Цикл
		Если не стр1.Реализация=Неопределено и не стр1.Реализация.Пустая() и не стр1.Реализация.ПометкаУдаления Тогда
			Попытка
				реализацияОб = стр1.Реализация.ПолучитьОбъект();
				Если ТипЗнч(стр1.Реализация)=Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
					внутрЗаказОб = стр1.Реализация.ВнутреннийЗаказ.ПолучитьОбъект();
					внутрЗаказОб.Записать(РежимЗаписиДокумента.Проведение);
           			Сообщить(строка(стр1.НомерСтроки)+") проведен документ: "+строка(внутрЗаказОб), СтатусСообщения.Информация);
	            КонецЕсли;
				реализацияОб.Записать(РежимЗаписиДокумента.Проведение);
				Сообщить(строка(стр1.НомерСтроки)+") проведен документ: "+строка(стр1.Реализация), СтатусСообщения.Информация);
				
				//Если стр1.ЗаказПокупателя.ТипЗаказа = 10 тогда
				//	ЗаписатьРегистрСтатусов(стр1.ЗаказПокупателя, , Перечисления.СостояниеЗаказовИМ.Отгружен);
				//ИначеЕсли стр1.ЗаказПокупателя.ТипЗаказа = 6 тогда
				//	Для каждого Ст из стр1.ЗаказПокупателя.Заказы цикл
				//		ЗаписатьРегистрСтатусов(стр1.ЗаказПокупателя, , Перечисления.СостояниеЗаказовИМ.Отгружен);							
				//	КонецЦикла;
				//КонецЕсли;
			Исключение
				Сообщить("Ошибка при проведении документа: "+строка(стр1.Реализация) +" - "+ОписаниеОшибки(), СтатусСообщения.Внимание);
				реализацияОб = неопределено;
				возврат;
			КонецПопытки;
		КонецЕсли;
		Если не стр1.Списание=Неопределено и не стр1.Списание.Пустая() и не стр1.Списание.ПометкаУдаления Тогда
			попытка
				списание = стр1.Списание.ПолучитьОбъект();
				списание.Записать(РежимЗаписиДокумента.Проведение);
				Сообщить(строка(стр1.НомерСтроки)+") проведен документ: "+строка(стр1.списание), СтатусСообщения.Информация);
			Исключение
				Сообщить("Ошибка при проведении документа: "+строка(стр1.списание) +" - "+ОписаниеОшибки(), СтатусСообщения.Внимание);
				списание = неопределено;
				возврат;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьВидимость();
	Попытка
		ЭтотОбъект.записать(РежимЗаписиДокумента.Проведение);//сразу перепровести чтобы не было "зависшего" резерва
		флКнопкиПровести(ЛОЖЬ);
		ЭлементыФормы.Выполнено.Доступность = истина; // только после проведения!
	Исключение
		Сообщить("Не удается провести документ ""Задания на отгрузку"" "+ОписаниеОшибки(), СтатусСообщения.Внимание);
	//	Сообщить("Ошибка при проведении ""Задания на отгрузку"": "+ОписаниеОшибки(), СтатусСообщения.Внимание);
	КонецПопытки;	
	
	
КонецПроцедуры //Провести

Процедура КоманднаяПанельТоварыРасПровести(Кнопка)
		Для Каждого стр1 из ЗаказыПокупателей Цикл
		Если не стр1.Реализация=Неопределено и не стр1.Реализация.Пустая() и не стр1.Реализация.ПометкаУдаления Тогда
			Попытка
				реализацияОб = стр1.Реализация.ПолучитьОбъект();
				Если ТипЗнч(стр1.Реализация)=Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
					внутрЗаказОб = стр1.Реализация.ВнутреннийЗаказ.ПолучитьОбъект();
					внутрЗаказОб.Записать(РежимЗаписиДокумента.ОтменаПроведения);
           			Сообщить(строка(стр1.НомерСтроки)+") отмена проведения документа: "+строка(внутрЗаказОб), СтатусСообщения.Информация);
	            КонецЕсли;
 				реализацияОб.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Сообщить(строка(стр1.НомерСтроки)+") отмена проведения документа: "+строка(стр1.Реализация), СтатусСообщения.Информация);
			Исключение
				Сообщить("Ошибка при проведении документа: "+строка(стр1.Реализация) +" - "+ОписаниеОшибки(), СтатусСообщения.Внимание);
			КонецПопытки;	
		КонецЕсли;
		Если не стр1.Списание=Неопределено и не стр1.Списание.Пустая() и не стр1.Списание.ПометкаУдаления Тогда
			попытка
				списание = стр1.Списание.ПолучитьОбъект();
				списание.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Сообщить(строка(стр1.НомерСтроки)+") отмена проведения документа: "+строка(стр1.Списание), СтатусСообщения.Информация);
			Исключение
				Сообщить("Ошибка при проведении документа: "+строка(стр1.Списание) +" - "+ОписаниеОшибки(), СтатусСообщения.Внимание);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;	
 	УстановитьВидимость();
	Попытка
		ЭтотОбъект.записать(РежимЗаписиДокумента.Проведение);//сразу перепровести чтобы не было "зависшего" резерва
	Исключение
		Сообщить("Ошибка при проведении ""Задания на отгрузку"": "+ОписаниеОшибки(), СтатусСообщения.Внимание);
	КонецПопытки;
	
	флКнопкиПровести(Истина);
	
КонецПроцедуры //РасПровести

Процедура флКнопкиПровести(фл);
 ЭтаФорма.ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПровестиРеализации.доступность = фл;	
 ЭтаФорма.ЭлементыФормы.КоманднаяПанельТовары2.Кнопки.СоздатьРеализацию.Доступность = фл;
 ЭтаФорма.ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Заполнить.Кнопки.СоздатьРеализацию.Доступность = фл;
 ЭтаФорма.ЭлементыФормы.КоманднаяПанельТовары.Кнопки.РасПровести.доступность = не фл;	
 ЭтаФорма.ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Торг12.Доступность = не фл;
 КонецПроцедуры

Процедура ТоварыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	//---------------------пересчет итогового объема-------------------------------------		
	Если ЭлементыФормы.Товары.Колонки.Объем.Видимость Тогда
		ОбъемСтарый = итогОбъем;
		итогОбъем1=0;
		Для каждого стр1 из Товары Цикл
			об1 = стр1.Количество * ВычислитьОбъемНоменклатуры(стр1.Номенклатура);
			итогОбъем1 = итогОбъем1 + об1;
		КонецЦикла;
		итогОбъем = ?(итогОбъем=Окр(итогОбъем1,0) или итогОбъем1=0, итогОбъем, Окр(итогОбъем1,3) ); // только Округление возможно!
		ЭлементыФормы.Товары.Колонки.Объем.ТекстПодвала = строка(итогОбъем1);
		Если ОбъемСтарый = итогОбъем Тогда
			ЭтаФорма.Модифицированность = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ТоварыГруппаСкладовПриИзменении(Элемент)
	
Предупреждение("Группу складов - менять нельзя!
				|Измените склад! Группа складов изменится автоматически",10);

КонецПроцедуры

Процедура ВремяНапоминанияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	//СтандартнаяОбработка = ложь;
	//Элемент.Значение = Элемент.Значение + Направление * 3600; // +- 1 час
	ВремяНапоминанияПриИзменении(неопределено);
КонецПроцедуры

Процедура ЗаказыПокупателейПередУдалением(Элемент, Отказ)
	
	Если ЭтотОбъект.Проведен Тогда
		Предупреждение("Задание на отгрузку уже выполняется!
						|Уже поздно менять состав заказов!", 30);
		отказ = Истина;
	КонецЕсли;	

КонецПроцедуры

Процедура ЗаказыПокупателейПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если ЭтотОбъект.Проведен Тогда
		Предупреждение("Задание на отгрузку уже выполняется!
						|Уже поздно менять состав заказов!", 30);
		отказ = Истина;
	КонецЕсли;	

КонецПроцедуры

Процедура КоманднаяПанельТоварыОбновить(Кнопка)
	ПолучитьАссортимент();
	ПересчетКоличестваИСуммПоЗаказам();
КонецПроцедуры

Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
		ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

Процедура КоманднаяПанельТовары2Сортировка(Кнопка)
	СортироватьПоПорядку(Товары);
КонецПроцедуры

Процедура СкладПолучательПриИзменении(Элемент)
	//+++ 21.07.2016 - не здесь!
	//Если не СкладПолучатель.пустая() Тогда
	//	Подразделение = СкладПолучатель.Подразделение;
	//КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанельТоварыТорг12(Кнопка)
	
	Если не естьРеализации(Истина) Тогда
		Предупреждение("Нет проведенных реализаций!");
		Возврат;
	КонецЕсли;
	
	имя = "ТОРГ-12 (Яршинторг).";
	имяМакета = Справочники.ДополнительныеПечатныеФормы.НайтиПоНаименованию(имя); 
		
	//Спецификация
	имя2 = "Спецификация - новая форма";
	имяМакета2 = Справочники.ДополнительныеПечатныеФормы.НайтиПоНаименованию(имя2); 
	ИмяФайла2 = КаталогВременныхФайлов()+"PrnFormSpec.tmp";
	ОбъектВнешнейФормы2 = ИмяМакета2.ПолучитьОбъект();
	Если ОбъектВнешнейФормы2 = Неопределено Тогда
		Сообщить("Ошибка получения внешней печ.формы '"+имя2+"'. Возможно форма была удалена или переименована.", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанные2 = ОбъектВнешнейФормы2.ХранилищеВнешнейОбработки.Получить();
	ДвоичныеДанные2.Записать(ИмяФайла2);
	Обработка2 = ВнешниеОбработки.Создать(ИмяФайла2);
	//
	
	колЭкзТОРГ12_ = 1;      // 2,3,4
	колЭкзТОРГ12=колЭкзТОРГ12_;
	
	КолЭкзСпец_= 2;
	КолЭкзСпец=КолЭкзСпец_;//+++

	сразуНаПринтер = ложь;
	
	ВвестиЧисло(колЭкзТОРГ12_,"Кол-во экземпляров ТОРГ-12:",1,0) ; 
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос("Распечатать все ТОРГ-12 и Спецификации(2экз.) сразу на принтер?", Режим, 30, КодВозвратаДиалога.Нет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		сразуНаПринтер = Истина;
	КонецЕсли;
	
////добавим сюда еще счета-фактуры
//СчРеал =0;
//Для каждого стр из ЗаказыПокупателей Цикл
//	Если Стр.Реализация <> Документы.РеализацияТоваровУслуг.ПустаяСсылка() и ТипЗнч(стр.Реализация) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
//		Если стр.Реализация.Проведен и Найти(Стр.Реализация.ДоговорКонтрагента.Наименование,"*") = 0 Тогда
//			СчРеал= СчРеал+1;
//		конецЕсли;	
//	конецесли;	
//конецЦикла;
//Сообщить("Счета-фактуры будут созданы для "+СчРеал+" реализаций");
//Сообщить(строка(ТекущаяДата())+"Загрузка началась. ");
//удалитьфайлы(КаталогВременныхФайлов(),"*.mxl");

//UsrPwd = "Usr=""Робот (центр - номенклатура)"";Pwd=""09876""";
////Base  = "File=""C:\Базы 1С\Бухгалтерия ЯШТ копия";
////Base   = "File=""C:\Базы 1С\Бухгалтерия ЯШТ копия"""; 
//Base   =  "Srvr=""server"";Ref=""v82ib_yst_bp""";
//v8connect = Новый COMОбъект("V82.ComConnector");
//СтрокаСоединенияCOM = Base+";"+UsrPwd;
//Попытка
//	Соединение = v8connect.Connect(СтрокаСоединенияCOM);
//	#Если Клиент Тогда
//		Сообщить(строка(ТекущаяДата())+" Успешно Установлено подключение к базе 1С V8:"+base, СтатусСообщения.Информация);
//	#КонецЕсли
//Исключение
//	#Если Клиент Тогда
//		Сообщить("НЕТ подключения к базе 1С V8:"+base+" ! ", СтатусСообщения.Внимание);
//	#КонецЕсли
//	Возврат;
//КонецПопытки;
/////--------------------------------------------------------------------------

//добавим сюда еще счета-фактуры
СчРеал =0;
Список = Новый СписокЗначений();

Для каждого стр из ЗаказыПокупателей Цикл
	Если Стр.Реализация <> Документы.РеализацияТоваровУслуг.ПустаяСсылка() и ТипЗнч(стр.Реализация) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Если стр.Реализация.Проведен и Найти(Стр.Реализация.ДоговорКонтрагента.Наименование,"*") = 0 Тогда
			СчРеал= СчРеал+1;
			Список.Добавить(Стр.Реализация);
		конецЕсли;	
	конецесли;	
конецЦикла;
Сообщить("Счета-фактуры будут созданы для "+СчРеал+" реализаций");
Сообщить(строка(ТекущаяДата())+"Загрузка началась. ");
удалитьфайлы(КаталогВременныхФайлов(),"*.mxl");

//выгрузим в бух
   Если  СчРеал>0 Тогда
	НаименованиеОбработки="УниверсальныйОбменДаннымиXMLv2";
	Если Метаданные.Обработки.Найти("УниверсальныйОбменДаннымиXMLv2") = Неопределено Тогда
		НаименованиеОбработки="УниверсальныйОбменДаннымиXML";
	КонецЕсли;	
	Обработка = Обработки[НаименованиеОбработки].Создать();
	
	удалитьфайлы(КаталогВременныхФайлов(),"*.mxl");

	Обработка.РежимОбмена = "Выгрузка";
	
	УникальныйИдентификатор        = Новый УникальныйИдентификатор();
	ИмяВременногоФайлаПравилОбмена = КаталогВременныхФайлов() + УникальныйИдентификатор + ".xml";

	МакетПравилОбмена = ПолучитьОбщийМакет("ОбменУТБП");
	МакетПравилОбмена.Записать(ИмяВременногоФайлаПравилОбмена);
	Обработка.ИмяФайлаПравилОбмена = ИмяВременногоФайлаПравилОбмена;
	
	Обработка.ЗагружатьДанныеВРежимеОбмена = Истина;
	Обработка.ЗаписыватьРегистрыНаборамиЗаписей = Истина;
	Обработка.ЗапоминатьЗагруженныеОбъекты = Истина;
	Обработка.ИспользоватьОтборПоДатеДляВсехОбъектов = Истина;
	
	ЭтоОтладка = Ложь;
	Если ЭтоОтладка Тогда
		ИмяИнформационнойБазыНаСервереДляПодключения = "v82ib_yst_bp_copy";
	Иначе
		ИмяИнформационнойБазыНаСервереДляПодключения = "v83ib_yst_bp";
	КонецЕсли;
	
	Обработка.ВыгружатьТолькоРазрешенные = Истина;
	Обработка.ВерсияПлатформыИнформационнойБазыДляПодключения = "V83";
	Обработка.ИмяСервераИнформационнойБазыДляПодключения = "server:3041"; //01.07.2013
	Обработка.ИмяИнформационнойБазыНаСервереДляПодключения = ИмяИнформационнойБазыНаСервереДляПодключения;
	Обработка.ПользовательИнформационнойБазыДляПодключения = "Робот (центр - номенклатура)";
	Обработка.ПарольИнформационнойБазыДляПодключения = "09876";
	Обработка.ТипИнформационнойБазыДляПодключения = Ложь;
	Обработка.АутентификацияWindowsИнформационнойБазыДляПодключения = Ложь;
	Обработка.НепосредственноеЧтениеВИБПриемнике = Истина;
	Обработка.ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки = 0; // 0 - не снимать регистрацию,

	Обработка.ЗагрузитьПравилаОбмена();
	Обработка.Параметры.Вставить("ОбъектДляВыгрузки",Список);
	Обработка.ВыполнитьВыгрузку();
	Сообщить(строка(ТекущаяДата())+"Загрузка окончена. ");
	
 	конецЕсли;
//***********************************	
///--------------------------------------------------------------------------
КИТ = справочники.Контрагенты.НайтиПоКоду("93733"); //07.08.2017
 
Для Каждого стр1 из ЗаказыПокупателей Цикл
	Если не стр1.Реализация=Неопределено и не стр1.Реализация.Пустая() и стр1.Реализация.Проведен Тогда
		
		реализацияОб = стр1.Реализация.ПолучитьОбъект();
		Обработка2.СсылкаНаОбъект = документы.Спецификация.ПустаяСсылка();
		
		Если ТипЗнч(стр1.Реализация)=Тип("ДокументСсылка.РеализацияТоваровУслуг")  Тогда
			Попытка
				РеалОбъект = стр1.Реализация.ПолучитьОбъект();
				РеалОбъект.УПД = Новый ХранилищеЗначения(Новый ДвоичныеДанные(КаталогВременныхфайлов()+стр1.Реализация.Номер+".mxl"));
				РеалОбъект.КонтрольСумма =  стр1.Реализация.СуммаДокумента;
				РеалОбъект.КонтрольКоличество =  стр1.Реализация.Товары.Итог("Количество");
				РеалОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
			КонецПопытки;
			
			
			//01.09.16 Смирнов для ИМ дополнительно печатаем наклейку для документов
			//27.09.17 Смирнов, доп наклейку печатаем не только для колесатут, но и для всех остальных заказов ДПД и подорожник
			//Если стр1.ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо.НаправлениеПродаж = НаправлениеКолесаТут и
				Если ((стр1.ЗаказПокупателя.ТранспортнаяКомпания=ТК_DPD и НЕ стр1.ЗаказПокупателя.Контрагент = РозничныйПокупательДПД)
				или (стр1.ЗаказПокупателя.ТранспортнаяКомпания=ТК_Подорожник и НЕ стр1.ЗаказПокупателя.Контрагент = РозничныйПокупательПодорожник) ) тогда
				//Проверим есть ли ШК для наклейки в ТЧ Реквизиты ТК
				//Если есть, то печатаем наклейку
				тчРеквизитыТК = стр1.ЗаказПокупателя.РеквизитыЗаказаТК;
				отборШК = новый Структура("Поле");
				отборШК.Поле="ШК";
				найденныеСтрокиШК = тчРеквизитыТК.НайтиСтроки(отборШК);
				Если найденныеСтрокиШК.Количество()>0 тогда
					Для каждого эл из найденныеСтрокиШК цикл
						ШК = эл.Значение;
						Если найти(ШК,"VDOCV1")> 0 тогда //ШК есть, печатаем наклейку
							НомерЗаказаИМ = стр1.ЗаказПокупателя.НомерВходящегоДокумента;
							НомерЗаказаИМ = СтрЗаменить(НомерЗаказаИМ,"ИМ","");
							Попытка  //номер может быть не числовой
								НомерЗаказаИМ=число(НомерЗаказаИМ);
							Исключение
							КонецПопытки;
							ШК=ВРЕГ("KTY"+СокрЛП(Формат(НомерЗаказаИМ,"ЧГ=0"))+"V"+СоответствиеПоставщиковКодДпд.Получить(СокрЛП(Подразделение.Код))+"VDOCV1");
							ТабДокумент = Новый ТабличныйДокумент;
							Макет = ПолучитьМакет("НаклейкаДокументыДПД");
							Наклейка = Макет.ПолучитьОбласть("Наклейка");
							Наклейка.Параметры.Контрагент = стр1.ЗаказПокупателя.Контрагент;
							Наклейка.Параметры.Заказ = стр1.ЗаказПокупателя.НомерВходящегоДокумента;
							ОбШтрихКод=Наклейка.Рисунки.ШК.Объект;
							ОбШтрихКод.Сообщение = ШК; 
							ОбШтрихКод.ТекстКода = СокрЛП(ШК);
							ТабДокумент.Вывести(Наклейка);
							
							НапечататьДокумент(ТабДокумент, 1, сразуНаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));
							прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				
				//ТабДокумент.Показать();
			КонецЕсли;
			//-01.09.16 Смирнов для ИМ дополнительно печатаем наклейку для документов
			
			//				Если  (стр1.Реализация.Дата<Дата('20160501000000')или Найти(стр1.Реализация.ДоговорКонтрагента.Наименование,"*")<>0) или стр1.Реализация.ДоговорКонтрагента.ТипДоговора=справочники.ТипыДоговоров.ШинтрейдЯрославль или стр1.Реализация.ДоговорКонтрагента.ТипДоговора=справочники.ТипыДоговоров.ФормулаАвтоПлюс или стр1.Реализация.ДоговорКонтрагента.ТипДоговора=справочники.ТипыДоговоров.НайтиПоКоду("Я0004") тогда
			Если стр1.Реализация.ДоговорКонтрагента.ТипДоговора=Справочники.ТипыДоговоров.Факторинг Тогда
				имя = "ТОРГ-12 (Яршинторг)";
				имяМакета = Справочники.ДополнительныеПечатныеФормы.НайтиПоНаименованию(имя);
				колЭкзТОРГ12=4;
				КолЭкзСпец=3;
//+++ 07.08.2017 - по задаче 30790	для ШинтрейдЯрославль
// Лукьяненков 29.08.2017 - Вернул переопределение макета ТОРГ-12 (Яршинторг), макет переопределялся на строке(6908) Печать Акта ФА
			ИначеЕсли стр1.Реализация.ДоговорКонтрагента.ТипДоговора=Справочники.ТипыДоговоров.ШинтрейдЯрославль
            //и стр1.ЗаказПокупателя.ТранспортнаяКомпания = КИТ
			Тогда
				имя = "ТОРГ-12 (Яршинторг с нетто).";
				имяМакета = Справочники.ДополнительныеПечатныеФормы.НайтиПоНаименованию(имя);
				колЭкзТОРГ12=6;
				КолЭкзСпец=3;
			Иначе
				имя = "ТОРГ-12 (Яршинторг)";
				имяМакета = Справочники.ДополнительныеПечатныеФормы.НайтиПоНаименованию(имя);
				колЭкзТОРГ12=колЭкзТОРГ12_;
				КолЭкзСпец=КолЭкзСпец_;
			КонецЕсли;
			
			Если Стр1.Реализация.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ФормулаАвтоПлюс Тогда
				НомерДокФАП = 0;
				реализацияОб.Печать(имяМакета, колЭкзТОРГ12, сразуНаПринтер, , НомерДокФАП);
			Иначе
				реализацияОб.Печать(имяМакета, колЭкзТОРГ12, сразуНаПринтер);
			КонецЕсли;
			
			//			конецЕсли;
			//имяМакета = "ТОРГ12";
		ИначеЕсли ТипЗнч(стр1.Реализация)=Тип("ДокументСсылка.ПеремещениеТоваров")  Тогда // перемещение товаров
				
			//+++22.05.2015
			//было	имяМакета = "ТОРГ13";
		    Если не стр1.ЗаказПокупателя.Контрагент.Франчайзер Тогда
			    имя = "Торг-13 (цена из заказа)";
			    имяМакетаП = Справочники.ДополнительныеПечатныеФормы.НайтиПоНаименованию(имя); 
			    реализацияОб.Печать(имяМакетаП, колЭкзТОРГ12, сразуНаПринтер);
			Иначе
				имя = "МХ-1";
			    имяМакетаП = Справочники.ДополнительныеПечатныеФормы.НайтиПоНаименованию(имя); 
			    реализацияОб.Печать(имяМакетаП, колЭкзТОРГ12, сразуНаПринтер);
			КонецЕсли;
			
		иначе //Списание Рекламы
			
			имя = "Акт приема-передачи рекл.продукции";
			имяМакетаА = Справочники.ДополнительныеПечатныеФормы.НайтиПоНаименованию(имя); 
			реализацияОб.Печать(имяМакетаА, колЭкзТОРГ12, Ложь);

		КонецЕсли;	
			
			Сообщить(строка(стр1.НомерСтроки)+") напечатан '"+имяМакета+"' Для "+строка(стр1.Реализация), СтатусСообщения.Информация);
			//
			//--------------------Спецификация сразу после ТОРГ-12--------------------------------------------------------
			Если ТипЗнч(стр1.Реализация)=Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда	
				  
				  
				  попытка
					  Если  (стр1.Реализация.Дата<Дата('20160501000000')или Найти(стр1.Реализация.ДоговорКонтрагента.Наименование,"*")<>0)  тогда
						  ТабДокСФ = Новый ТабличныйДокумент();
						  ТабДокСФ.Прочитать(КаталогВременныхфайлов()+стр1.Реализация.Номер+".mxl");
						  табДокСФ.АвтоМасштаб = Истина;
						  ТабдокСФ.ОтображатьСетку = Ложь;
						  ТабДокСФ.ТолькоПросмотр = Истина;
						  ТабДокСФ.Показать();
					   КонецЕсли;	  
				   исключение
				   Конецпопытки;
				//------------------------------------------
 				
				Если стр1.Реализация.Сделка.ВыписатьСпецификацию Тогда // Если в Заказе Покупателя указана необходимость...
					Спецификация = НайтиПодчиненныйДокумент(стр1.Реализация, "Спецификация");
					Если Спецификация = Неопределено Тогда
						ОбъектСпецификации = Документы.Спецификация.СоздатьДокумент();
						
						ЗаполнитьЗначенияСвойств(ОбъектСпецификации, стр1.Реализация); // Контрагент, Договор, Организация, Подразделение
						
						ОбъектСпецификации.Дата = ТекущаяДата();
						УстановитьНомерДокумента(ОбъектСпецификации);
						ОбъектСпецификации.ДокументОснование = стр1.Реализация;
						
						//+++ 19.11.2013
						ОбъектСпецификации.СпособОтгрузки = стр1.Реализация.Сделка.СпособОтгрузки;
						
						//+++ 24.01.2014 - всегда безналичные!
						ОбъектСпецификации.СпособОплаты   = Перечисления.ВидыДенежныхСредств.Безналичные;
						
						//--------------установить номер Для печати-------------------
						Запрос = Новый Запрос;
						Запрос.УстановитьПараметр("Контрагент", стр1.Реализация.Контрагент);
						Запрос.Текст =
						"ВЫБРАТЬ РАЗЛИЧНЫЕ
						|	Спецификация.Ссылка КАК Ссылка
						|ИЗ
						|	Документ.Спецификация КАК Спецификация
						|ГДЕ
						|	Спецификация.Контрагент = &Контрагент";
						
						СледНомер = Строка(Запрос.Выполнить().Выбрать().Количество() + 1);
						
						ОбъектСпецификации.НомерДляПечати = Номер + "/" + СледНомер;
						ЕстьИзменения = Истина;
					Иначе
						ОбъектСпецификации = Спецификация.ПолучитьОбъект();
						ЕстьИзменения = ложь;	//ПереЗапись
						Если НЕ (ОбъектСпецификации.Контрагент = стр1.Реализация.Контрагент
							и ОбъектСпецификации.ДоговорКонтрагента =  стр1.Реализация.ДоговорКонтрагента
							и ОбъектСпецификации.Организация 	 =  стр1.Реализация.Организация
							и ОбъектСпецификации.Подразделение 	 =  стр1.Реализация.Подразделение) Тогда
							ЕстьИзменения = Истина;
							ОбъектСпецификации.Контрагент = стр1.Реализация.Контрагент;
							ОбъектСпецификации.ДоговорКонтрагента =  стр1.Реализация.ДоговорКонтрагента;
							ОбъектСпецификации.Организация 	 =  стр1.Реализация.Организация;
							ОбъектСпецификации.Подразделение =  стр1.Реализация.Подразделение;
						КонецЕсли;
					КонецЕсли;
					
					Если ЕстьИзменения Тогда 
						попытка   // запись или перезапись спецификации
							ОбъектСпецификации.Записать(РежимЗаписиДокумента.Проведение);
						исключение
							Сообщить("Не удалось создать документ Спецификации Для "+строка(стр1.Реализация), СтатусСообщения.Внимание);
							продолжить;
						КонецПопытки;
					КонецЕсли;
					
					Обработка2.СсылкаНаОбъект = ОбъектСпецификации.Ссылка;
					ТабДокумент2 = Обработка2.Печать();
					
					НапечататьДокумент(ТабДокумент2, КолЭкзСпец, сразуНаПринтер, строка(стр1.НомерСтроки)+") Спецификация № "+строка(ОбъектСпецификации.Номер)+" Для "+строка(стр1.Реализация.Контрагент)+" по накладной № "+строка(стр1.Реализация.Номер) ); 
				Иначе
					Сообщить(строка(стр1.НомерСтроки)+") Не требуется Спецификация по документу: "+строка(стр1.Реализация));
				КонецЕсли;
				
				// Печать Акта ФА+
				Если Стр1.Реализация.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ФормулаАвтоПлюс Тогда
					имя = "Акт приема-передачи ФА+";
					имяМакета = Справочники.ДополнительныеПечатныеФормы.НайтиПоНаименованию(имя); 
					колЭкзАктФАП = 1;
					реализацияОб.Печать(имяМакета, колЭкзАктФАП, сразуНаПринтер, , НомерДокФАП);
				КонецЕсли;
				
			КонецЕсли;
			
			//Плотников, ТребованиеНакладная, если есть.
			
			Если ЗначениеЗаполнено(стр1.списание) Тогда 				
				
				ОбъектТребование = стр1.Списание.ПолучитьОбъект();
				ОбъектТребование.Печать("Накладная",КолЭкзСпец, сразуНаПринтер);
				
			КонецЕсли;
			
		ИначеЕсли стр1.Реализация=Неопределено или стр1.Реализация.Пустая() Тогда
			Сообщить(строка(стр1.НомерСтроки)+") нет документа Для печати!", СтатусСообщения.Внимание);
		ИначеЕсли НЕ стр1.Реализация.Проведен Тогда
			Сообщить(строка(стр1.НомерСтроки)+") документ перемещения не проведен!", СтатусСообщения.Внимание);	
		КонецЕсли;	
	КонецЦикла;
	
	//+++ 22.03.2016
	имяМакета = Справочники.ДополнительныеПечатныеФормы.НайтиПоНаименованию("Реестр DPD"); 
	ЭтотОбъект.Печать(имяМакета, 1, сразуНаПринтер);
	
	списокЗаявокНаБрак = Новый СписокЗначений;
	
	Если ЗаявкиНаБрак.Количество() > 0 Тогда
		З = ЗаявкиНаБрак.Выгрузить();
		З.Свернуть("ДокументОтгрузки");
		
		для Каждого стр из З Цикл
			Если ЗначениеЗаполнено(стр.ДокументОтгрузки) Тогда
		        списокЗаявокНаБрак.Добавить(стр.ДокументОтгрузки);
		    КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	               
	Для каждого стр1 из списокЗаявокНаБрак Цикл	
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ИмяФормы = ?(стр1.Значение.ВидОперации = Перечисления.ВидыОперацийПоОтветственномуХранению.ПеремещениеМеждуСкладами,"ТОРГ-13 ОТХ","МХ-3 (отв. хранение)1");
		ОбъектВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.НайтиПоНаименованию(ИмяФормы).ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = стр1.Значение;
		ТабДокумент = Обработка.Печать();
		НапечататьДокумент(ТабДокумент, КолЭкзСпец, сразуНаПринтер, Строка(стр1.Значение)+" для "+строка(стр1.Значение.Контрагент) );
	КонецЦикла;
	
	
	Сообщить(" ");
	Сообщить(строка(ТекущаяДата())+"Загрузили все счета-фактуры. ");
	
	Если Перевозчик = "" Тогда
		
		Текст = "Отправить акт передачи по маршрутному листу?";
		
		Ответ = Вопрос(Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			ОбъектВнешнейФормы = Справочники.ВнешниеОбработки.НайтиПоКоду(487).ПолучитьОбъект();
			ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
			
			ИмяФайла = КаталогВременныхФайлов()+"Акт передачи "+номер+".xls";
			ДвоичныеДанные.Записать(ИмяФайла);
			
			СписокФайловВложений = Новый СписокЗначений;
			
			Обработка = ВнешниеОбработки.Создать(ИмяФайла);
			Обработка.СсылкаНаОбъект = ЭтотОбъект.Ссылка;
			ТабличныйДокументОбъект  = Обработка.Печать();
			НапечататьДокумент(ТабличныйДокументОбъект, 1, ложь,  );
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ВводитьИтогиВручнуюПриИзменении(Элемент)
	ЭлементыФормы.ИтогКоличествоПозиций.ТолькоПросмотр = НЕ ВводитьИтогиВручную;
	ЭлементыФормы.ИтогКоличествоШтук.ТолькоПросмотр    = НЕ ВводитьИтогиВручную;
	ЭлементыФормы.ИтогКоличествоПозиций.Доступность = ВводитьИтогиВручную;
	ЭлементыФормы.ИтогКоличествоШтук.Доступность = ВводитьИтогиВручную;
КонецПроцедуры

Процедура ПеревозчикНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка= ЛОЖЬ;
	ФормаВыбораКонтрагента=Справочники.Контрагенты.ПолучитьФормуВыбора();
	ВыбКонтрагент=ФормаВыбораКонтрагента.ОткрытьМодально();
	Перевозчик=?(ЗначениеЗаполнено(ВыбКонтрагент),СокрЛП(ВыбКонтрагент.НаименованиеПолное),"");
КонецПроцедуры


Процедура ДействияФормыДействиеЗаполнитьТТН(Кнопка)
	Если СокрЛП(Водитель) <>"" Тогда	
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1 
		|	МаркаАвтомобиля,
		|	ГосНомерАвтомобиля,
		|	Водитель,
		|	Перевозчик,
		|	ОрганизацияВыдавшаяДоверенность,
		|	ФизЛицоДоверенности,
		|	НомерДоверенности,
			//телефон водителя
		|	ВидПеревозки,
		|    ДатаДоверенности
		|ИЗ  Документ.РеализацияТоваровУслуг 
		|ГДЕ Дата > &НачДата И Водитель ПОДОБНО ""ВОДИТЕЛЬ%""
		|	УПОРЯДОЧИТЬ ПО Дата  УБЫВ";
		
		Запрос.УстановитьПараметр("НачДата",ДобавитьМесяц(ТекущаяДата(),-6));  // поиск по фамилии водителя за 6 месяцев
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"ВОДИТЕЛЬ",Водитель);
		Выборка=Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект,Выборка);
			ЭтотОбъект.ТелефонВодителя = Выборка.ВидПеревозки; 
			
			ГосНомерАвтомобиляПриИзменении(неопределено); //31.10.2017
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры



//+++ 26.03.2014 - сначала удаляем все договоры по данному Заданию на отгрузку
процедура убратьПеремещения(минДатаПоиска='00010101')
	
 комм =  "Задание на отгрузку "+ссылка.Номер+" (";  // комментарий по которому ведется поиск!
 Запрос = Новый Запрос;
 Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
                |	ПеремещениеТоваров.Ссылка
                |ИЗ
                |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
                |ГДЕ
                |	ПеремещениеТоваров.Дата >= &Дата
                |	И ПеремещениеТоваров.Комментарий ПОДОБНО &Комментарий";
 
 Запрос.УстановитьПараметр("Дата", минДатаПоиска);
 Запрос.УстановитьПараметр("Комментарий", комм+"%");
 
 Результат = Запрос.Выполнить();
 Выборка = Результат.Выбрать();
 
 Пока Выборка.Следующий() Цикл
	докОб = выборка.Ссылка.ПолучитьОбъект();	
	попытка
		
	Если НЕ СоздаватьПеремещенияКриал Тогда //--------------отмена проведения!------------------
		докОб.ПометкаУдаления = Истина;
		докОб.записать(РежимЗаписиДокумента.ОтменаПроведения, РежимПроведенияДокумента.Неоперативный);
		сообщить("=== > По складу: "+строка(докОб.СкладОтправитель)+" - удален документ: "+строка(докОб) , СтатусСообщения.Информация);
	Иначе
	   	докОб.Записать(РежимЗаписиДокумента.ОтменаПроведения, РежимПроведенияДокумента.Неоперативный);
		сообщить("=== > По складу: "+строка(докОб.СкладОтправитель)+" - отменено проведение документа: "+строка(докОб) , СтатусСообщения.Информация);
	КонецЕсли;	
		
	Исключение
		Сообщить("Нельзя отменить проведение документа: "+строка(докОб), СтатусСообщения.Внимание);
	КонецПопытки;
 КонецЦикла;

КонецПроцедуры 

//--------------------Цикл по реализациям----------------------
Процедура ВыполнитьДопПеремещениеКриал(докЗаданиеНаОтгрузку) 	
	списокГрупп0 = новый СписокЗначений;
	списокГрупп1  = новый СписокЗначений;  // ЭТО ГРУППА уже Складов!
	
	Для каждого стр1 из ГруппыСкладов Цикл //+++ 26.03.2014 только группы НА доп.перемещение
		Если стр1.ДопПеремещение Тогда
			списокГрупп0.Добавить(стр1.ГруппаСкладов);
		КонецЕсли;
	КонецЦикла;
	
	//30.11.2015 - нельзя делать доп.перемещение для филиалов!
	Если списокГрупп0.Количество()>0 и ЭтотОбъект.Подразделение.ОбособленноеПодразделение тогда
		Предупреждение("Нельзя использовать доп.перемещение по подразделению: "+строка(Подразделение), 10);
		возврат;
	КонецЕсли;	
		
	Запрос = Новый Запрос; //+++ 15.07.2013 -  переход к Складам!
	Запрос.Текст = "ВЫБРАТЬ
	               |	Склады.Ссылка
	               |ИЗ
	               |	Справочник.Склады КАК Склады
	               |ГДЕ
	               |	Склады.ГруппаСкладов В (&ГруппаСкладов0)
	               |	И (НЕ Склады.ПометкаУдаления)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Склады.ГруппаСкладов.Код,
	               |	Склады.Наименование
	               |АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("ГруппаСкладов0", списокГрупп0);
	Результат = Запрос.Выполнить();
	списокГрупп1.ЗагрузитьЗначения(  Результат.Выгрузить().ВыгрузитьКолонку("Ссылка") );		

	СкладПеремещения = справочники.Склады.НайтиПоНаименованию("МеталлКриалТранзит");	
	
	// реализации могут перепроводиться много раз, 
	// отгрузка длится максимум 1 день,
	// затем закрывается и создается новая, при необходимости
	//
	////ЭлементыФормы.ЗаказыПокупателей.Колонки.Реализация.ТекстПодвала = Строка(НачалоДня(Дата));
	
	//Если ЭлементыФормы.ЗаказыПокупателей.Колонки.Реализация.ТекстПодвала<>"" Тогда
	//	минДатаПоиска = НачалоДня( мин(Дата(ЭлементыФормы.ЗаказыПокупателей.Колонки.Реализация.ТекстПодвала)-1, Дата) );  
	//Иначе
		минДатаПоиска = НачалоДня(Дата)-1;
	//КонецЕсли;
	
	убратьПеремещения(минДатаПоиска);
	
	//-------------ищем в Цикле склады групп Криал и Металлобаза--------------------
	Для каждого ГруппаСкладов1 из списокГрупп1 Цикл  //1 документ на каждый склад! перемещения 
		        //26.03.2014 - убрана # в начале
		комм =  "Задание на отгрузку "+ссылка.Номер+" ("+строка(ГруппаСкладов1.Значение.ГруппаСкладов)+") от ";  // комментарий по которому ведется поиск!
		док  = найтиДокПеремещения(комм, минДатаПоиска, ГруппаСкладов1.Значение);
		
	//Если НЕ СоздаватьПеремещенияКриал Тогда //--------------отмена проведения!------------------
	//	Если док.ссылка <> документы.ПеремещениеТоваров.ПустаяСсылка() Тогда
	//		попытка
	//			док.ПометкаУдаления = Истина;
	//			док.записать(РежимЗаписиДокумента.ОтменаПроведения, РежимПроведенияДокумента.Неоперативный);
	//			сообщить("=== > Отменено перемещения по складу: "+строка(ГруппаСкладов1.Значение)+" - "+строка(док) , СтатусСообщения.Информация);
	//		исключение
	//			сообщить("Не удалось отменить проведение перемещения Для группы: "+строка(ГруппаСкладов1.Значение)+" - "+строка(док), СтатусСообщения.Внимание); 
	//		КонецПопытки;	
	//	КонецЕсли;	
	//КонецЕсли;	

	Если НЕ СоздаватьПеремещенияКриал Тогда //--------------ничего не надо делать!------------------
		продолжить;
	КонецЕсли;
	
	док.Организация = справочники.Организации.НайтиПоКоду("00001");
	док.Ответственный = глТекущийПользователь;
	док.СкладОтправитель = ГруппаСкладов1.Значение;//+++ 15.07.2013
	док.СкладПолучатель  = СкладПеремещения;
	
	минДата=ТекущаяДата(); // дата перемещения на 1 сек раньше самой первой реализации!
	
//-------------бежим по реализациям (перемещениям)-------------------
	Для каждого стр1 из докЗаданиеНаОтгрузку.ЗаказыПокупателей Цикл
		Если ЗначениеНеЗаполнено(стр1.Реализация) Тогда //+++ 23.05.2013
			продолжить;
		КонецЕсли;	
	    докРеал = стр1.Реализация.получитьОбъект();
        естьИзменения = ложь;
		Для каждого стр2 из докРеал.Товары Цикл
			
			//-------------ищем или создает новое перемещение на 5000-1-----------------
			Если ЗначениеЗаполнено(стр2.склад) 
				и стр2.склад = ГруппаСкладов1.Значение Тогда
								
			//--------грузчики из реалиазции -> в перемещение---------------------------
				стр3 = док.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(стр3, стр2);
	
				стр3.Склад = справочники.Склады.ПустаяСсылка(); // склад получатель и отправитель - в шапке!
				стр2.склад = СкладПеремещения;   //в реализации - склад МеталлКриалТранзит
				естьИзменения = Истина;
			//--------заменяем склады и грузчиков в Реализации на грузчиков 5000--------
			
			КонецЕсли;
	
		КонецЦикла;
		Если естьИзменения Тогда
			//минДата = мин(докРеал.Дата-1, Дата-1);
			минДата = мин(докРеал.Дата-1, минДата);//+++ 13.03.2015 - дата перемещения на 1 сек. раньше первой реалиазции!
			Попытка
				докРеал.записать();
				сообщить("Изменены склады группы "+строка(ГруппаСкладов1.Значение)+" в документе: "+строка(докРеал), СтатусСообщения.Информация);
			Исключение
				сообщить("Ошибка при записи документа "+строка(докРеал)+" - "+ОписаниеОшибки(), СтатусСообщения.Внимание);
			КонецПопытки;	
		КонецЕсли;	
	КонецЦикла;//---------------------Конец Цикла по документам----------------------------
	
	//один документ перемещения на 1 задание
	Если док.Товары.Количество()>0 и СоздаватьПеремещенияКриал Тогда
		док.Дата = минДата;
		док.Комментарий = комм+строка(ссылка.Дата)+"#";
		док.ОтражатьВУправленческомУчете = Истина;
		док.ОтражатьВБухгалтерскомУчете  = Истина;
		док.ОтражатьВНалоговомУчете		 = Истина;
		попытка
			док.ПометкаУдаления = ЛОЖЬ;
			
//===========================================================================================================
	док.ДанныеПоПогрузке.Очистить(); //+++ 07.10.2013
	
//+++ перераспределение КТУ по грузчикам по группам складов
Если Константы.КТУгрузчиковПоСкладам.Получить() Тогда
	
	фл1склад = Истина;
	
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|ФизЛицо как Грузчик
		|ИЗ
		|	Справочник.ГруппыСкладов.Состав
		|ГДЕ Ссылка = &ГруппаСкладов";
		Запрос.УстановитьПараметр("ГруппаСкладов", ?(ЗначениеНеЗаполнено(док.СкладОтправитель.ГруппаСкладов) 
						,справочники.ГруппыСкладов.НайтиПоКоду("00")
						,док.СкладОтправитель.ГруппаСкладов) ); 
						
//+++ 03.03.2014 - Для переотгрузки через МеталКриалТранзит - ВСЕ грузчики этого дня...
Если  док.СкладПолучатель = справочники.Склады.НайтиПоНаименованию("МеталлКриалТранзит") Тогда
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	ГруппыСкладовСостав.ФизЛицо КАК Грузчик
	             |ИЗ
	             |	Справочник.ГруппыСкладов.Состав КАК ГруппыСкладовСостав
	             |ГДЕ
	             |	НЕ ГруппыСкладовСостав.Ссылка.ПометкаУдаления";				 
КонецЕсли;
			 
		Выборка=Запрос.Выполнить().Выбрать();
		КоличествоСтрок=Выборка.Количество();
		
		Пока Выборка.Следующий() Цикл
			Строка=док.ДанныеПоПогрузке.Добавить();
			Строка.Грузчик=Выборка.Грузчик;
			Строка.Вес=1;
		КонецЦикла;
	
Иначе // как раньше было
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|Ссылка Грузчик
	|ИЗ
	|	Справочник.ФизическиеЛица
	|ГДЕ Официальный";
	
	Выборка=Запрос.Выполнить().Выбрать();
	КоличествоСтрок=Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл
		Строка=док.ДанныеПоПогрузке.Добавить();
		Строка.Грузчик=Выборка.Грузчик;
		Строка.Вес=1;
	КонецЦикла;
КонецЕсли;
//===========================================================================================================

			
			док.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный); // чтобы время не сбилось!
			сообщить("===>>> Проведен документ "+строка(док)+" Для Склада: "+строка(ГруппаСкладов1.Значение), СтатусСообщения.Информация);
		исключение
			сообщить("Ошибка при создании документа перемещения Для Склада: "+строка(ГруппаСкладов1.Значение)+" : "+ОписаниеОшибки() , СтатусСообщения.Внимание);
		КонецПопытки;	
	КонецЕсли;	
	
КонецЦикла;//------------------Конец групп складов---------------------------------------------
    
КонецПроцедуры


//-------------------------------поиск документа перемещения-------------------------------------------------------
Функция найтиДокПеремещения(комм, датаМин='20130601', СкладОтпр=Неопределено)
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	ПеремещениеТоваров.Ссылка
               |ИЗ
               |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
               |ГДЕ
               |	ПеремещениеТоваров.Дата >= &ДатаМин
               |	И (ПеремещениеТоваров.Комментарий ПОДОБНО &Комментарий)
            	  |	И ПеремещениеТоваров.СкладОтправитель = &СкладОтправитель
			   |";
Запрос.УстановитьПараметр("СкладОтправитель",СкладОтпр);
Запрос.УстановитьПараметр("ДатаМин", датаМин);
Запрос.УстановитьПараметр("Комментарий", комм+"%");
Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();

Если Выборка.Следующий() Тогда
	док = выборка.ссылка.ПолучитьОбъект();
	док.Товары.очистить(); // очищаем все что там было!
Иначе
	док = документы.ПеремещениеТоваров.СоздатьДокумент();
КонецЕсли;	

	Возврат док;
КонецФункции


Процедура ВыполненоПриИзменении(Элемент)
	
	Если Выполнено и НЕ ЭтотОбъект.Проведен
		и НЕ РольДоступна("ПолныеПрава") Тогда //06.04.2015 Для полных прав - можно!
		Предупреждение("Нельзя установить флаг ""Выполнено"" Для непроведенного документа!",30);
	    Выполнено = ложь;
	КонецЕсли;
	
	для каждого стр из ЗаказыПокупателей Цикл		
		Если стр.Реализация.Проведен = Ложь Тогда
			Предупреждение("Нельзя установить флаг ""Выполнено"" пока есть непроведенные реализации!",30);
	        Выполнено = ложь;
		КонецЕсли;	
	КонецЦикла;
	
	Если Выполнено Тогда 
		
		// дата отправления машины из 0 точки, которая проставляется в форме!
		Если ВремяНапоминания<ТекущаяДата() тогда //время выезда машины
			сообщить("Дата выезда автомобиля "+строка(ВремяНапоминания)+"  НЕ МОЖЕТ БЫТЬ МЕНЬШЕ текущей даты! Установите правильную дату выезда водителя!", СтатусСообщения.Внимание);
		Иначе
			ВремяНапоминанияПриИзменении(неопределено); //+++ 31.10.2017 делает авто-расчёт планового прибытия
		КонецЕсли;	

    КонецЕсли;
	
КонецПроцедуры

процедура ОтослатьУведомленияОРейсе()
	
	//+++30.01.2018 no-reply@yst76.ru >> 1c@yst.ru
	УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("1c@yst.ru"); 
		
	//18.03.2016 - перенесено из процедуры модуля ПередЗаписью!	 
	//======================@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@======================================		
		МКонтрагентов = Новый Массив;
			
		//КаталогВременныхФайлов ="\\terminal\RESTORE Userdir\Отправленные документы\Рассылка задолженности\";
		КаталогВременныхФайлов ="\\sigma\Общая папка\Рассылка писем ДЗ\";
		
		надоОтправлять=ложь;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	КатегорииОбъектов.Категория
		               |ИЗ
		               |	РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
		               |ГДЕ
		               |	КатегорииОбъектов.Объект.Ссылка = &Объект
		               |	И КатегорииОбъектов.Категория = &Категория";
					   
		Запрос.УстановитьПараметр("Категория", Справочники.КатегорииОбъектов.НайтиПоКоду("00018"));
		//для i=0 по МКонтрагентов.Количество()-1 цикл
			для каждого стр1 из ЗаказыПокупателей цикл
				если стр1.ЗаказПокупателя.Контрагент.ОтсылатьНаПочтуДанныеПоОтгрузке тогда
					Запрос.УстановитьПараметр("Объект", стр1.ЗаказПокупателя);
					Попытка
						Если Запрос.Выполнить().Выбрать().Количество() = 0 тогда
							МКонтрагентов.Добавить(стр1.Реализация.Контрагент);
							надоОтправлять=истина;
						КонецЕсли;
					Исключение
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;	
		//КонецЦикла;	
						
		Если надоОтправлять тогда
			Сообщить("--------идет обработка документа для отправки писем Клиентам--------");
			
			//Состояние(строка(ТекущаяДата())+" запись документа...");
			//ЗаписатьВФорме(); //СРАЗУ ЗАПИСЫВАЕМ!
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ЗаданиеНаОтгрузкуЗаказыПокупателей.Реализация,
		|	ЗаданиеНаОтгрузкуЗаказыПокупателей.РеализацияКонтрагент КАК Контрагент,
		|	КонтактнаяИнформация.Представление КАК Адрес
		|ИЗ
		|	(выбрать 
		|закПок.Реализация, 
		|закПок.Реализация.Контрагент как РеализацияКонтрагент 
		|из Документ.ЗаданиеНаОтгрузку.ЗаказыПокупателей как закПок
		|    ГДЕ	закПок.Ссылка = &Ссылка 
		|	И закПок.Реализация ССЫЛКА Документ.РеализацияТоваровУслуг
		|	) ЗаданиеНаОтгрузкуЗаказыПокупателей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
		|(выбрать КонтИнф.Объект, КонтИнф.Представление из РегистрСведений.КонтактнаяИнформация  как КонтИнф
		|			где (КонтИнф.Тип = &Тип)
		|			И (КонтИнф.Вид = &Вид)
		|			и  КонтИнф.Объект В (&МКонтрагентов)
	  |)КАК КонтактнаяИнформация
		|		ПО ЗаданиеНаОтгрузкуЗаказыПокупателей.РеализацияКонтрагент = КонтактнаяИнформация.Объект

		|ГДЕ
		|	 ЗаданиеНаОтгрузкуЗаказыПокупателей.РеализацияКонтрагент В (&МКонтрагентов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент";
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("38823")); // E-mail для рассылки уведомлений (о задолженности!)
		Запрос.УстановитьПараметр("МКонтрагентов", МКонтрагентов);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		рез1 = Запрос.Выполнить();
		
		Если не рез1.Пустой() Тогда
			
		ТЗРеализаций = рез1.Выгрузить();
		СписокФайловВложений = Новый СписокЗначений;
			Для Каждого ЭлементКонтрагент Из МКонтрагентов Цикл
				СтруктураОтбора = Новый Структура("Контрагент", ЭлементКонтрагент); 
				
				МРеализаций = ТЗРеализаций.НайтиСтроки(СтруктураОтбора);
				
				Если МРеализаций.Количество() > 0 Тогда
						
						Тема = "Отправка груза от ЗАО ТК ""Яршинторг""";
						ТекстСообщения = "Добрый день,
										  |
										  |   " + Строка(ТекущаяДата()) +  " из компании ""Яршинторг"" к вам отправлен автомобиль с товаром,
										  |
										  |   " + СокрЛП(Строка(МаркаАвтомобиля)) + " объемом " + Строка(ОбъемМакс) + "м3, гос. номер: " + Строка(ГосНомерАвтомобиля) + ",
										  |
										  |   Водитель: " + Водитель + ", " + ТелефонВодителя + "
										  |
										  |   Ориентировочная дата прибытия машины: " + Строка(Формат(ДатаВыгрузкиПрямогоРейса,"ДФ=dd.MM.yyyy")) + "
										  |
										  |   Это письмо создано автоматически. Отвечать на него НЕ НУЖНО.
										  |";
										
						АдресПолучателя = МРеализаций[0].Адрес;
						
						Состояние(строка(ТекущаяДата())+" идет отправка письма на адрес: "+АдресПолучателя);
						Если ЗначениеЗаполнено(АдресПолучателя) Тогда
							яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресПолучателя,СписокФайловВложений, УЗ, ТекстСообщения, Тема);
						КонецЕсли;
					//КонецЕсли; //СписокФайловВложений
					
				КонецЕсли;//МРеализаций		
				
				Состояние(строка(ТекущаяДата())+" отправка письма по заданию № "+строка(ЭтотОбъект.Номер)+" - выполнена.");
			
			КонецЦикла; //МКонтрагентов
			
		КонецЕсли;	
				Состояние(строка(ТекущаяДата())+" отправка писем по заданию № "+строка(ЭтотОбъект.Номер)+" - выполнена.");
		КонецЕсли;//надоОтправлять
//===================================@@@@@@@@@@@@@@@@@@@@@@@@@=========================================	
	
КонецПроцедуры

// по [v] ОтсылатьНаПочтуДанныеПоОтгрузке из карточки Клиента
// отправляются печ.формы УПД или МХ-1 
// на эл.адрес клиента по полю 		  "E-mail для обмена док-тами"					АдресЭлектроннойПочтыДляОбменаДокументами
// ИЛИ (только по Ярославлю) по полю: "E-mail для обмена док-тами (Ярославль)"		поКоду("39243")
//
процедура ОтослатьУПД()
	
	//+++ 23.01.2018 - хранение отправленных файлов на сервере
		КаталогВременныхФайлов = "\\sigma\Общая папка\Рассылка писем УПД\"; 
		
		НадоОтправлятьSMS = Истина;  // для тех клиентов, которым и так отправляется эл.письма - ещё и SMS всем ответственным лицам!
		
		//+++ 30.01.2018  no-reply@yst76.ru >> 1c@yst.ru  отправка через сервер SIGMA!
		УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("1c@yst.ru");  
		
		надоОтправлять=ложь;
		для каждого стр1 из ЗаказыПокупателей цикл
			если стр1.ЗаказПокупателя.Контрагент.ОтсылатьНаПочтуДанныеПоОтгрузке и ЗначениеЗаполнено(стр1.Реализация) тогда
				надоОтправлять=истина;
				прервать;
			КонецЕсли;
		КонецЦикла;	
		
		Если НЕ надоОтправлять тогда
			возврат;
		КонецЕсли;
		
		
		Сообщить("--------Идет обработка документа для отправки УПД Клиентам--------");
			
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ИнформацияПоПроезду.Контрагент,
		               |	СУММА(ИнформацияПоПроезду.ДоставкаНал) КАК ДоставкаНал
		               |ПОМЕСТИТЬ ДоставкаЗаНал
		               |ИЗ
		               |	РегистрСведений.ИнформацияПоПроезду КАК ИнформацияПоПроезду
		               |ГДЕ
		               |	ИнформацияПоПроезду.Задание = &ссылка
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ИнформацияПоПроезду.Контрагент
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ЗаданиеНаОтгрузкуЗаказыПокупателей.Реализация,
		               |	ЗаданиеНаОтгрузкуЗаказыПокупателей.РеализацияКонтрагент КАК Контрагент,
		               |	КонтактнаяИнформация.Представление КАК Адрес,
		               |	ЕСТЬNULL(ДоставкаЗаНал.ДоставкаНал, 0) КАК ДоставкаНал,
		               |	ЗаданиеНаОтгрузкуЗаказыПокупателей.НомерЗаказа,
		               |	ЗаданиеНаОтгрузкуЗаказыПокупателей.Реализация.СуммаДокумента КАК Сумма
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		закПок.Реализация КАК Реализация,
		               |		закПок.Реализация.Контрагент КАК РеализацияКонтрагент,
		               |		закПок.ЗаказПокупателя.Номер КАК НомерЗаказа
		               |	ИЗ
		               |		Документ.ЗаданиеНаОтгрузку.ЗаказыПокупателей КАК закПок
		               |	ГДЕ
		               |		закПок.Ссылка = &Ссылка
					   
					   //+++ 05.04.2018 ---- ТОЛЬКО за Б/нал! ------------------------------------------------
					  // |	и  НЕ закПок.ЗаказПокупателя.ДоговорКонтрагента.Наименование подобно (""%*%"")
					   
					   |		) КАК ЗаданиеНаОтгрузкуЗаказыПокупателей
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			КонтИнф.Объект КАК Объект,
		               |			КонтИнф.Представление КАК Представление
		               |		ИЗ
		               |			РегистрСведений.КонтактнаяИнформация КАК КонтИнф
		               |		ГДЕ
		               |			КонтИнф.Тип = &Тип
		               |			И КонтИнф.Вид = &Вид
		               |			И КонтИнф.Объект.ОтсылатьНаПочтуДанныеПоОтгрузке = ИСТИНА) КАК КонтактнаяИнформация
		               |		ПО ЗаданиеНаОтгрузкуЗаказыПокупателей.РеализацияКонтрагент = КонтактнаяИнформация.Объект
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДоставкаЗаНал КАК ДоставкаЗаНал
		               |		ПО ЗаданиеНаОтгрузкуЗаказыПокупателей.РеализацияКонтрагент = ДоставкаЗаНал.Контрагент
		               |ГДЕ
		               |	ЗаданиеНаОтгрузкуЗаказыПокупателей.РеализацияКонтрагент.ОтсылатьНаПочтуДанныеПоОтгрузке = ИСТИНА
		              //+++ 23.01.2018 |	И ЗаданиеНаОтгрузкуЗаказыПокупателей.Реализация.Дата МЕЖДУ &дата1 И &дата2
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Контрагент";
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыДляОбменаДокументами);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		//  //+++ 23.01.2018 ВЫКЛЮЧЕН отбор реализаций ТОЛЬКО за текущий день! 
		//Запрос.УстановитьПараметр("Дата1", НачалоДня(ТекущаяДата())-3600); // с 23:00 пред.дня
		//Запрос.УстановитьПараметр("Дата2", КонецДня(ТекущаяДата()));       // до конца тек.дня
		
		рез1 = Запрос.Выполнить();
		
	Если не рез1.Пустой() Тогда
			
		ТЗРеализаций = рез1.Выгрузить();
		
		МКонтрагентов = ТЗРеализаций.Скопировать();
		МКонтрагентов.Свернуть("Контрагент");
		
		Для Каждого стр Из МКонтрагентов Цикл
			    ЭлементКонтрагент = стр.Контрагент;
				СтруктураОтбора = Новый Структура("Контрагент", ЭлементКонтрагент); 
				Состояние(строка(ТекущаяДата())+" идет запись УПД для отправки письма по клиенту: "+строка(ЭлементКонтрагент));
				
				МРеализаций = ТЗРеализаций.Скопировать(СтруктураОтбора);
				
				Если МРеализаций.Количество() > 0 Тогда
									  
					СуммаДоставки   = МРеализаций[0].ДоставкаНал;
					
					АдресПолучателя = МРеализаций[0].Адрес;
	                СписокФайловВложений = Новый СписокЗначений;
					
					АдресПолучателяЯр = ""; //+++ 18.01.2018   по задаче № 38491
					СписокФайловВложенийЯр = Новый СписокЗначений;
					ВидЯр = справочники.ВидыКонтактнойИнформации.НайтиПоКоду("39243"); // "E-mail для обмена док-тами (Ярославль)"
					н1 = найти(ВидЯр.Наименование,"(")+1;  
					л1 = найти(ВидЯр.Наименование,")") - н1;
					текстЯр = сред(ВидЯр.Наименование, н1, л1);  // текст в скобках = "Ярославль"
					
					естьВремяДоставки = ЛОЖЬ;   ВремяДоставки1 = ТекущаяДата();
					 
					Для Каждого СтрокаМ Из МРеализаций Цикл
						естьУПД=ложь;
						Если ТипЗнч(СтрокаМ.Реализация) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
							
							//+++ 06.04.2018 ---- ТОЛЬКО за Б/нал! ------------------------------------------------
							Если Найти(СтрокаМ.Реализация.ДоговорКонтрагента.Наименование, "*")>0 тогда
								продолжить;
							КонецЕсли;
							
							//+++ 05.04.2018	
							//ИмяФайлаСообщенияТорг = "ТОРГ-12_"+СтрокаМ.Реализация.Номер+".xls";
							ИмяФайлаСообщенияТорг = "УПД_"+СтрокаМ.Реализация.Номер+".xls";
							
							ДокОбъект = СтрокаМ.Реализация.ПолучитьОбъект();
							
							//23.10.2015
							Состояние("Идет формирование "+ИмяФайлаСообщенияТорг);
							естьУПД=ложь;
							
							попытка
							файл1 =  ДокОбъект.УПД.Получить();
							файл1.Записать(КаталогВременныхФайлов()+"УПД.mxl");
							
							ТабличныйДокументОбъект = новый ТабличныйДокумент;
							ТабличныйДокументОбъект.Прочитать(КаталогВременныхФайлов()+"УПД.mxl");
							
							//ИмяМакета = "ТОРГ-12 (Яршинторг).";
							//ОбъектВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.НайтиПоНаименованию(ИмяМакета).ПолучитьОбъект();
							//ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
							//
							//ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
							//ДвоичныеДанные.Записать(ИмяФайла);
							//
							//Обработка = ВнешниеОбработки.Создать(ИмяФайла);
							//Обработка.СсылкаНаОбъект = СтрокаМ.Реализация.Ссылка;
							//ТабличныйДокументОбъект  = Обработка.Печать();
							
							естьВремяДоставки = ложь;//31.01.2018
							Если СтрокаМ.Реализация.СрокДоставки>ВремяНапоминания тогда  
								 естьВремяДоставки = истина;
								 ВремяДоставки1    = СтрокаМ.Реализация.СрокДоставки;  //максимальный по последней реализации!
							КонецЕсли;
	
							Состояние("Идет запись в файл "+КаталогВременныхФайлов+ИмяФайлаСообщенияТорг);
							ТабличныйДокументОбъект.Записать(КаталогВременныхФайлов+ИмяФайлаСообщенияТорг,ТипФайлаТабличногоДокумента.XLS);
							естьУПД=истина;
							исключение
							Сообщить("ошибка при получении УПД : "+ОписаниеОшибки(), СтатусСообщения.Важное);
							КонецПопытки;	
							//+++)
							
							//+++ 05.04.2018 =======================Счет на оплату===================================
							естьСчет = ЛОЖЬ;    
							Если стр.Контрагент.ПечатьСчетаИзРеализации тогда
								  // {{ Счет на оплату
								  попытка
								  	СчетИмяФайла = "Счет_" + СокрЛП(ДокОбъект.Номер)+".xls";
									Состояние("Идет формирование "+СчетИмяФайла);
									ТабДокСчет = ДокОбъект.ПечатьСчетаЗаказа("Счет");
								  	Состояние("Идет запись в файл "+КаталогВременныхФайлов +СчетИмяФайла);
									ТабДокСчет.Записать(КаталогВременныхФайлов + СчетИмяФайла, ТипФайлаТабличногоДокумента.XLS);
									естьСчет = истина;
								  исключение
									Сообщить("Ошибка при записи файла: "+СчетИмяФайла+" в папку: "+КаталогВременныхФайлов, СтатусСообщения.Внимание);
								  КонецПопытки;	
								  // }} Счет на оплату
 							КонецЕсли;	
							
							//+++( 18.01.2018г. --- проверка наличия адреса по Ярославлю!  по задаче № 38491
							Если  Найти(СтрокаМ.Реализация.ПунктРазгрузки, текстЯр)>0
								//или Найти(СтрокаМ.Реализация.Сделка.АдресДоставки, текстЯр)>0 
								тогда
								
								Если АдресПолучателяЯр="" тогда //------------проверим есть ли отдельный адрес?! и он ещё не определен----------------
									Запрос = Новый Запрос;
									Запрос.Текст = "ВЫБРАТЬ
									|	КонтактнаяИнформация.Представление как АдресЯр
									|ИЗ
									|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
									|ГДЕ
									|	КонтактнаяИнформация.Объект = &Объект
									|	И КонтактнаяИнформация.Тип = &Тип
									|	И КонтактнаяИнформация.Вид = &Вид";
									Запрос.УстановитьПараметр("Объект", ЭлементКонтрагент);
									Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
									Запрос.УстановитьПараметр("Вид", ВидЯр ); //E-mail для обмена док-тами (Ярославль)
									Результат = Запрос.Выполнить();
									Выборка = Результат.Выбрать();
									Если Выборка.Следующий() тогда
										АдресПолучателяЯр = СокрЛП(Выборка.АдресЯр);
									КонецЕсли;
								Иначе 
									АдресПолучателяЯр = "нет"; // чтобы не искать в цикле адрес по 100 раз
								КонецЕсли;
									
							КонецЕсли;
							
							Если не (АдресПолучателяЯр="" или АдресПолучателяЯр="нет" ) тогда //отдельный список документов!
								Если естьУПД тогда
								СписокФайловВложенийЯр.Добавить(КаталогВременныхФайлов+ИмяФайлаСообщенияТорг);
								КонецЕсли;
								Если естьСчет тогда // 05.04.2018
									СписокФайловВложенийЯр.Добавить(КаталогВременныхФайлов + СчетИмяФайла);
								КонецЕсли;	
							иначе
								Если естьУПД тогда
								СписокФайловВложений.Добавить(КаталогВременныхФайлов+ИмяФайлаСообщенияТорг);
								КонецЕсли;
								Если естьСчет тогда // 05.04.2018
									СписокФайловВложений.Добавить(КаталогВременныхФайлов + СчетИмяФайла);
								КонецЕсли;	
							КонецЕсли;
							//+++)
							
													
						ИначеЕсли ТипЗнч(СтрокаМ.Реализация) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
							
							ИмяФайлаСообщенияТорг = "МХ-1_"+СтрокаМ.Реализация.Номер+".xls";
							ДокОбъект = СтрокаМ.Реализация.ПолучитьОбъект();
							
							ИмяМакета = "МХ-1";
							ОбъектВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.НайтиПоНаименованию(ИмяМакета).ПолучитьОбъект();
							ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
							
							ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
							ДвоичныеДанные.Записать(ИмяФайла);
							
							Обработка = ВнешниеОбработки.Создать(ИмяФайла);
							Обработка.СсылкаНаОбъект = СтрокаМ.Реализация.Ссылка;
							ТабличныйДокументОбъект  = Обработка.Печать();
							
							естьВремяДоставки = ложь;//31.01.2018  - у перемещений нет Срока доставки!
							//Если СтрокаМ.Реализация.СрокДоставки>ВремяНапоминания тогда  
							//	 естьВремяДоставки = истина;
							//	 ВремяДоставки1    = СтрокаМ.Реализация.СрокДоставки;
							//КонецЕсли;
							
							ТабличныйДокументОбъект.Записать(КаталогВременныхФайлов+ИмяФайлаСообщенияТорг,ТипФайлаТабличногоДокумента.XLS);
							//+++)
							
							//+++( 18.01.2018г. --- проверка наличия другого адреса В ЗАКАЗЕ Покупателя!
							//СписокФайловВложений.Добавить(КаталогВременныхФайлов+ИмяФайлаСообщенияТорг);
							Если  Найти(СтрокаМ.Реализация.ВнутреннийЗаказ.ДокументОснование.АдресДоставки, текстЯр)>0 тогда
								
								Если АдресПолучателяЯр="" тогда //------------проверим есть ли отдельный адрес?!
									Запрос = Новый Запрос;
									Запрос.Текст = "ВЫБРАТЬ
									|	КонтактнаяИнформация.Представление как АдресЯр
									|ИЗ
									|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
									|ГДЕ
									|	КонтактнаяИнформация.Объект = &Объект
									|	И КонтактнаяИнформация.Тип = &Тип
									|	И КонтактнаяИнформация.Вид = &Вид";
									Запрос.УстановитьПараметр("Объект", ЭлементКонтрагент);
									Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
									Запрос.УстановитьПараметр("Вид", справочники.ВидыКонтактнойИнформации.НайтиПоКоду("39243") ); //E-mail для обмена док-тами (Ярославль)
									Результат = Запрос.Выполнить();
									Выборка = Результат.Выбрать();
									Если Выборка.Следующий() тогда
										АдресПолучателяЯр = СокрЛП(Выборка.АдресЯр);
									Иначе 
										АдресПолучателяЯр = "нет"; // чтобы не искать в цикле адрес по 100 раз
									КонецЕсли;
								Иначе 
									АдресПолучателяЯр = "нет"; // чтобы не искать в цикле адрес по 100 раз
								КонецЕсли;
									
							КонецЕсли;
							
							Если не (АдресПолучателяЯр="" или АдресПолучателяЯр="нет" ) тогда //отдельный список документов!
								СписокФайловВложенийЯр.Добавить(КаталогВременныхФайлов+ИмяФайлаСообщенияТорг);
							иначе
								СписокФайловВложений.Добавить(КаталогВременныхФайлов+ИмяФайлаСообщенияТорг);
							КонецЕсли;

							//+++)
							
						КонецЕсли;
						
					КонецЦикла;
						
					
				Тема = "Документы отгрузки от ЗАО ТК ""Яршинторг""";
										
				ТекстСообщения = "Добрый день,
								  |
								  |   "+формат( ?(ВремяНапоминания>Дата, ВремяНапоминания, Дата) , "ДФ='dd MMMM HH:mm'")
								  +" из компании ""Яршинторг"" к вам отправлен автомобиль с товаром,
								  |
								  |   " + СокрЛП(Строка(МаркаАвтомобиля)) + " объемом " + Строка(ОбъемМакс) + "м3, гос. номер: " + Строка(ГосНомерАвтомобиля) + ",
								  |
								  |   Водитель: " + Водитель + ", " + ТелефонВодителя + ?(СуммаДоставки>0,Символы.ПС + "Стоимость доставки: " + Строка(СуммаДоставки) ,"") + "
								  |
								  |	  "+?(естьВремяДоставки, "Плановая дата доставки: "+формат(ВремяДоставки1,"ДФ='dd MMMM HH:mm'"),"")+"
								  |
								  |   Высылаем Вам копии отгрузочных документов.
								  |
								  |   Это письмо создано автоматически. Отвечать на него НЕ НУЖНО.
								  |";
					
					Если СписокФайловВложений.Количество() > 0 Тогда
						Состояние(строка(ТекущаяДата())+" идет отправка письма на адрес: "+АдресПолучателя+" включая "+строка(СписокФайловВложений.Количество())+" документов.");
						Если найти(АдресПолучателя,"@")>0 Тогда
							яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресПолучателя,СписокФайловВложений, УЗ, ТекстСообщения, Тема);
						КонецЕсли;
					КонецЕсли; //СписокФайловВложений
					
					//+++( 18.01.2018 по задаче № 38491
					Если СписокФайловВложенийЯр.Количество() > 0 Тогда
						Состояние(строка(ТекущаяДата())+" идет отправка письма на адрес: "+АдресПолучателяЯр+" включая "+строка(СписокФайловВложенийЯр.Количество())+" документов.");
						Если найти(АдресПолучателяЯр,"@")>0 Тогда
							яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресПолучателяЯр,СписокФайловВложенийЯр, УЗ, ТекстСообщения, Тема);
						КонецЕсли;
					КонецЕсли; //СписокФайловВложенийЯр
					//+++)
					
					//отправка СМС Плотников >>>>
					Если НадоОтправлятьSMS тогда
					ЗапросНомераТелефона = Новый Запрос;
					ЗапросНомераТелефона.УстановитьПараметр("Контрагент",ЭлементКонтрагент);
					ЗапросНомераТелефона.УстановитьПараметр("Роль",Справочники.РолиКонтактныхЛиц.Менеджер);
					ЗапросНомераТелефона.УстановитьПараметр("Телефон",Перечисления.ТипыКонтактнойИнформации.Телефон);
					ЗапросНомераТелефона.Текст = "ВЫБРАТЬ
												 |	КонтактнаяИнформация.Представление
												 |ИЗ
												 |	Справочник.КонтактныеЛица КАК КонтактныеЛица
												 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
												 |		ПО (КонтактнаяИнформация.Объект = КонтактныеЛица.Ссылка)
												 |ГДЕ
												 |	КонтактныеЛица.ОбъектВладелец = &Контрагент
												 |	И КонтактныеЛица.Роль = &Роль
												 |	И КонтактнаяИнформация.Тип = &Телефон
												 |	И КонтактнаяИнформация.Представление ПОДОБНО ""%__________%""
												 |	И КонтактныеЛица.НеОтправлятьСМС = ЛОЖЬ
												 |	И КонтактныеЛица.ПометкаУдаления = ЛОЖЬ";
					РезНомера = ЗапросНомераТелефона.Выполнить().Выгрузить();
					
					Номера = "";
					ТекстСообщения = "";
					суммаЗаказов = МРеализаций.Итог("Сумма");
					для каждого стрНомер из МРеализаций Цикл	
						Номера = Номера + стрНомер.НомерЗаказа + ",";	
					КонецЦикла;
					
					если Номера <> "" Тогда	
						Дл = СтрДлина(Номера);
						Номера = Лев(Номера,Дл-1);
					КонецЕсли;
					
					для каждого стрНомер из РезНомера Цикл
						
						ТекстСообщения = "Уведомляем Вас, что товары по заказам " + Номера + " отгружены. Общая сумма по заказам: " + Строка(суммаЗаказов) + "."  
						+ ?(СуммаДоставки>0," Стоимость доставки: " + Строка(СуммаДоставки) + ".","") + " Водитель: " + Водитель + ", " + ТелефонВодителя + ".";
						
						//+++ 05.04.2018 возможно несколько номеров, через , или в конце доб.....
						ПервыйНомер = СокрЛП(стрНомер.Представление);
						Если Найти(ПервыйНомер,",")>0 тогда
							ПервыйНомер = СокрЛП( лев(ПервыйНомер, Найти(ПервыйНомер,",")-1) );
						КонецЕсли;	
						Если Найти(ПервыйНомер,"доб")>0 тогда
							ПервыйНомер = СокрЛП( лев(ПервыйНомер, Найти(ПервыйНомер,"доб")-1) );
						КонецЕсли;	
						
						смсРаботаССообщениями.ОтправитьSMSНаНомер(ПервыйНомер,ТекстСообщения,Ложь);
					КонецЦикла;
				    КонецЕсли;	//отправка СМС Плотников <<<<
					
				КонецЕсли;//МРеализаций	по 1 клиенту	
		КонецЦикла; //МКонтрагентов
			
	КонецЕсли;	
	
	Сообщить(строка(ТекущаяДата())+" отправка писем по заданию № "+строка(ЭтотОбъект.Номер)+" - выполнена.");
		
	//===================================@@@@@@@@@@@@@@@@@@@@@@@@@=========================================	
	
КонецПроцедуры


Процедура ПолеВвода1НачалоВыбора(Элемент, СтандартнаяОбработка)
	
	
	СтандартнаяОбработка = ложь;
	форма1 = справочники.ФизическиеЛица.ПолучитьФормуВыбора();
	//миронычев
	// Убираем Помеченных на удаление водителей

	форма1.СправочникСписок.отбор.ПометкаУдаления.ВидСравнения  = ВидСравнения.НеРавно;
	форма1.СправочникСписок.отбор.ПометкаУдаления.Значение	    = Истина;   
	форма1.СправочникСписок.отбор.ПометкаУдаления.Использование = Истина;

	если сокрЛП(Водитель)<>"" тогда //24.03.2017
		фн = найти(Водитель," ");  тн = найти(Водитель,".");  
		если фн>=0 тогда
			форма1.СправочникСписок.отбор.Наименование.ВидСравнения  = ВидСравнения.Содержит;
			форма1.СправочникСписок.отбор.Наименование.Значение	     = ?(фн>0, лев(Водитель, фн+1), Водитель);   //Водители
			форма1.СправочникСписок.отбор.Наименование.Использование = Истина;
					
		КонецЕсли;
	КонецЕсли;
	// Миронычев 21.11.17 - Логистам запрещено вводить и показывать других физ лиц кроме как в папке водители
	//+++ 29.07.2014 - водители где угодно уже
	Если РольДоступна("Логисты") тогда
		форма1.СправочникСписок.отбор.Ссылка.ВидСравнения  = ВидСравнения.ВИерархии;
		форма1.СправочникСписок.отбор.Ссылка.Значение	   = справочники.ФизическиеЛица.НайтиПоКоду("Водители");   //Водители
		форма1.СправочникСписок.отбор.Ссылка.Использование = Истина;
	КонецЕсли;
	форма1.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = ложь;
	Водитель1 = форма1.ОткрытьМодально();
	Если строка(Водитель1)<>"" Тогда
		Водитель  = Водитель1;
		ТелефонВодителя = получитьТелефоны(Водитель1);
		
		ВодителюЗапрещенаИнкассация = Водитель1.ЗапретитьИнкассацию; // 16.11.2016
		
		АвтомобильГосНомерАвтомобиля  = ПолучитьКонтактнуюИнформацию(Водитель1, "Другое");
		Если Найти(АвтомобильГосНомерАвтомобиля, "Автомобиль: ")>0 Тогда
			АвтомобильГосНомерАвтомобиля = стрЗаменить(АвтомобильГосНомерАвтомобиля, "Автомобиль: ","");
			i= найти(АвтомобильГосНомерАвтомобиля, " ");  //первое наименование...
			Если i>0 Тогда
				МаркаАвтомобиля 	 = Лев(АвтомобильГосНомерАвтомобиля, i-1);
				ГосНомерАвтомобиля = Прав(АвтомобильГосНомерАвтомобиля, стрДлина(АвтомобильГосНомерАвтомобиля) - i);
			КонецЕсли;
			//+++ определяем тип авто	
			Если МаркаАвтомобиля<>"" и ГосНомерАвтомобиля<>"" Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	ТипАвтомобиля.Ссылка,
				|	ТипАвтомобиля.Объем,
				|	ТипАвтомобиля.Вес
				|ИЗ
				|	Справочник.ТипАвтомобиля КАК ТипАвтомобиля
				|ГДЕ
				|	ТипАвтомобиля.ПолноеНаименование ПОДОБНО (&Марка)
				|	И ТипАвтомобиля.ПолноеНаименование ПОДОБНО (&Номер)";
				Запрос.УстановитьПараметр("Марка", "%"+МаркаАвтомобиля+"%" );
				Запрос.УстановитьПараметр("Номер", "%"+ГосНомерАвтомобиля+"%" );
				
				Результат = Запрос.Выполнить();
				Выборка = Результат.Выбрать();
				
				Если Выборка.Следующий() Тогда
					ТипАвтомобиля = выборка.ссылка;
					ВесМакс = выборка.Вес;
					ОбъемМакс = выборка.Объем;
					
					Если ИнформацияПоПроезду.Количество()>0 Тогда
						ЗаполнитьОбъем();
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			//+++)
			
		КонецЕсли;
	иначе
	Попытка
		
		Если ЗаказыПокупателей[0].ЗаказПокупателя.СпособОтгрузки <> Справочники.СпособыОтгрузкиТовара.НайтиПоКоду("10")  и ЗаказыПокупателей[0].ЗаказПокупателя.СпособОтгрузки <> Справочники.СпособыОтгрузкиТовара.ПустаяСсылка()  и  ЗаказыПокупателей[0].ЗаказПокупателя.СпособОтгрузки <> Справочники.СпособыОтгрузкиТовара.НайтиПоКоду("12") Тогда
			Сообщить("Вводить вручную водителя можно только при самовывозе");
			Водитель = "";
			
		КонецЕсли;
	Исключение
		Сообщить("Вводить вручную водителя можно только при самовывозе");
		Водитель = "";
	КонецПопытки;
	
	КонецЕсли;
		Если не выполнено и не ОтправленоПисьмоСКрышками Тогда
		естьКрышки = Ложь;
		Для каждого стр из ЗаказыПокупателей Цикл
			Если стр.ЗаказПокупателя.ТребуютсяКрышки Тогда
				естьКрышки = истина;
				прервать;
			конецЕсли;
		конецЦикла;	 
		
		Если естьКрышки Тогда
			//Ответ = Вопрос("Отправить письмо для подготовке набора комплектующих?
			//| Отправка письма обязательна для своевременной подготовки комплектующих!!!", РежимДиалогаВопрос.ДаНет);
			//Если Ответ = КодВозвратаДиалога.Да Тогда
				ОтправитьМаршрутСКрышки(Ссылка);
				ОтправленоПисьмоСКрышками = Истина;
			//КонецЕсли;
		КонецЕсли;
     конецЕсли;

КонецПроцедуры

Функция ПолучитьКонтактнуюИнформацию(об1, тип="Телефон")
	
	Если ТипЗнч(Об1)=Тип("Строка") Тогда
		Возврат "";
	КонецЕсли;	
	
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	КонтактнаяИнформация.Представление,
               |	КонтактнаяИнформация.Вид,
               |	КонтактнаяИнформация.Комментарий
               |ИЗ
               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
               |ГДЕ
               |	КонтактнаяИнформация.Объект = &Объект
               |	И КонтактнаяИнформация.Тип = &Тип";

Запрос.УстановитьПараметр("Объект", Об1);

Тип1="";

Если тип="Телефон" Тогда
	Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Телефон);
	Тип1="Тел: ";
ИначеЕсли тип="Другое" Тогда
	Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Другое);
	Тип1="Доп.инфо: ";
	
ИначеЕсли найти(тип,"доставки")>0 Тогда
	Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.Текст = Запрос.Текст +" И КонтактнаяИнформация.Вид = &Вид";
	Запрос.УстановитьПараметр("Вид", справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00021") );    //+++ 30.04.2015
ИначеЕсли найти(тип,"Факт")>0 Тогда
	Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.Текст = Запрос.Текст +" И КонтактнаяИнформация.Вид = &Вид";
	Запрос.УстановитьПараметр("Вид", справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
ИначеЕсли найти(тип,"Юр")>0 Тогда
	Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.Текст = Запрос.Текст +" И КонтактнаяИнформация.Вид = &Вид";
	Запрос.УстановитьПараметр("Вид", справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
КонецЕсли;
	
Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();
рез = "";
Если Выборка.Следующий() Тогда
	Если Строка(Выборка.Вид) = "Автомобиль" Тогда
		Тип1="Автомобиль: ";
	КонецЕсли;	
рез = рез + Тип1 + выборка.Представление + ?(выборка.Комментарий="", "", "~" + выборка.Комментарий);
КонецЕсли;

ПОКА Выборка.Следующий() ЦИКЛ //если есть ещё...
рез = рез + ", "+выборка.Представление + ?(выборка.Комментарий="", "", "~" + выборка.Комментарий);
КонецЦикла;

Возврат рез;

КонецФункции	

Функция получитьТелефоны(ВодительСсылка)
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
|	КонтактнаяИнформация.Представление
|ИЗ
|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
|ГДЕ
|	КонтактнаяИнформация.Объект = &Объект
|	И КонтактнаяИнформация.Тип = &Тип";
Запрос.УстановитьПараметр("Объект", ВодительСсылка);
Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Телефон);

Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();
 рез = "";
Пока Выборка.Следующий() Цикл
	Если СокрЛП(Выборка.Представление)<>"" Тогда
		рез = рез+СокрЛП(Выборка.Представление)+"; ";
	КонецЕсли;	
КонецЦикла;

Возврат рез;
	
КонецФункции

//Орлов++
Процедура КоманднаяПанельТоварыЗарегистрироватьДляТСД(Кнопка)
	
	Если Выполнено Тогда
		Сообщить("Выполненное задание нельзя выгружать в ТСД!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	РегистрироватьЗадание = Ложь;
	Узел = ПланыОбмена.ОбменСКПК.НайтиПоКоду("002");
	Склад5000 = Справочники.Склады.НайтиПоКоду("00642");
	ПланыОбмена.УдалитьРегистрациюИзменений(Узел);
	
	Для Каждого Строка Из Товары Цикл
		
		Если ЗначениеЗаполнено(Строка.Склад) И Строка.Склад = Склад5000
			И ЗначениеЗаполнено(Строка.Номенклатура) И ЗначениеЗаполнено(Строка.АдресХранения) Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(Узел, Строка.Склад.ПолучитьОбъект());	
			ПланыОбмена.ЗарегистрироватьИзменения(Узел, Строка.Номенклатура.ПолучитьОбъект());
			ПланыОбмена.ЗарегистрироватьИзменения(Узел, Строка.АдресХранения.ПолучитьОбъект());
			РегистрироватьЗадание = Истина;
		Иначе
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Если РегистрироватьЗадание Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(Узел, ЭтотОбъект);	
	КонецЕсли;
	
КонецПроцедуры
//Орлов--


//+++ 14.11.2013 - пакетная печать ТТН и Спецификаций

Процедура КоманднаяПанельТоварыТТН(Кнопка)
	
	Если не естьРеализации(Истина) Тогда
		Предупреждение("Нет проведенных реализаций!");
		Возврат;
	КонецЕсли;
	
	//----------------------------------------------------------------------------------
	имя = "ТТН-2012 (ТН прил.№4, СВ прил.№8)";
	имяМакета = Справочники.ДополнительныеПечатныеФормы.НайтиПоНаименованию(имя); 
	ИмяФайла = КаталогВременныхФайлов()+"PrnFormTTN.tmp";
	ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
	Если ОбъектВнешнейФормы = Неопределено Тогда
		Сообщить("Ошибка получения внешней печ.формы '"+имя+"'. Возможно форма была удалена или переименована.", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
	ДвоичныеДанные.Записать(ИмяФайла);
	Обработка = ВнешниеОбработки.Создать(ИмяФайла);
	формаОбработки = Обработка.получитьФорму();
	
	//----------------------------------------------------------------------------------
	имя2 = "Спецификация - новая форма";
	имяМакета2 = Справочники.ДополнительныеПечатныеФормы.НайтиПоНаименованию(имя2); 
	ИмяФайла2 = КаталогВременныхФайлов()+"PrnFormSpec.tmp";
	ОбъектВнешнейФормы2 = ИмяМакета2.ПолучитьОбъект();
	Если ОбъектВнешнейФормы2 = Неопределено Тогда
		Сообщить("Ошибка получения внешней печ.формы '"+имя2+"'. Возможно форма была удалена или переименована.", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанные2 = ОбъектВнешнейФормы2.ХранилищеВнешнейОбработки.Получить();
	ДвоичныеДанные2.Записать(ИмяФайла2);
	Обработка2 = ВнешниеОбработки.Создать(ИмяФайла2);
	
	
	колЭкзТТН = 2;      // 2,3,4
	КолЭкзСпец= 2;
	сразуНаПринтер = ложь;
	
	ВвестиЧисло(колЭкзТТН,"Кол-во экземпляров ТТН:",1,0) ; 
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос("Распечатать все ТТН и Спецификации(2экз.) сразу на принтер?", Режим, 30, КодВозвратаДиалога.Нет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		сразуНаПринтер = Истина;
	КонецЕсли;
	
	//----------------------------------------------------------------------------------	  
	колЭкзТТН0 = колЭкзТТН;  //+++ 07.08.2017 для Щинтрейда - меняется, а потом снова восстанавливается
    КИТ = справочники.Контрагенты.НайтиПоКоду("93733"); //07.08.2017
	
	Для Каждого стр1 из ЗаказыПокупателей Цикл
	колЭкзТТН =	колЭкзТТН0;
	
		Если ТипЗнч(стр1.Реализация) = Тип("ДокументСсылка.СписаниеТоваров") Тогда
			Продолжить;
		КонецЕсли;
		
		ОбработкаПрерыванияПользователя();
		
		Обработка.СсылкаНаОбъект  = документы.РеализацияТоваровУслуг.ПустаяСсылка();
		Обработка2.СсылкаНаОбъект = документы.Спецификация.ПустаяСсылка();
		
				
		Если не стр1.Реализация=Неопределено и не стр1.Реализация.Пустая() и стр1.Реализация.Проведен Тогда
			Состояние("Обрабатывается "+строка(стр1.НомерСтроки)+" строка. "+строка(стр1.Реализация));
			
			//+++ 05.03.2014
			Если ТипЗнч(стр1.Реализация) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				
				//+++ 07.08.2017 ---------для ШинТрейдЯрославль
				Если стр1.Реализация.ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ШинтрейдЯрославль
					и стр1.ЗаказПокупателя.ТранспортнаяКомпания = КИТ
				тогда
	            	колЭкзТТН  = 7;
					сообщить(" По реализации № "+строка(стр1.Реализация.Номер)+" - печатается 7 шт. ТТН!", СтатусСообщения.Информация);
				КонецЕсли;
			
				Если стр1.Реализация.Контрагент = справочники.Контрагенты.НайтиПоКоду("92797") Тогда   // ФормулаАвтоПлюс
					сообщить(" ВНИМАНИЕ!  по реализации № "+строка(стр1.Реализация.Номер)+" - грузится "+строка(стр1.Реализация.Контрагент)+" ТТН - НЕ печатаются!", СтатусСообщения.Внимание);
					продолжить;
				КонецЕсли;	
			КонецЕсли;
			
			//-------------------- ТТН--------------------------------------------------------
			////каждый раз создаем заново... чтобы очистить
			//		Обработка = ВнешниеОбработки.Создать(ИмяФайла); //2 сек.
			//		формаОбработки = Обработка.получитьФорму();
			
			Обработка.СсылкаНаОбъект = стр1.Реализация;
			формаОбработки.ЗаполнитьДанныеПоДокументу();
			
			ТабДокумент = Обработка.Печать(ложь,"");
			НапечататьДокумент(ТабДокумент, колЭкзТТН, сразуНаПринтер,  строка(стр1.НомерСтроки)+") ТТН(прил.№4) по накладной № "+строка(стр1.Реализация.Номер) );
			
			//+++ 26.11.2013		
			Если ТипЗнч(стр1.Реализация)=Тип("ДокументСсылка.РеализацияТоваровУслуг")
				И Не ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") Тогда
				формаОбработки.НапечататьРаспискуИДискиПоКрышкам( строка(стр1.НомерСтроки)+") " );
			КонецЕсли;	
			
			
		ИначеЕсли стр1.Реализация=Неопределено или стр1.Реализация.Пустая() Тогда
			Сообщить(строка(стр1.НомерСтроки)+") нет документа Для печати!", СтатусСообщения.Внимание);
		ИначеЕсли НЕ стр1.Реализация.Проведен Тогда
			Сообщить(строка(стр1.НомерСтроки)+") документ не проведен!", СтатусСообщения.Внимание);	
		КонецЕсли;	
		
	КонецЦикла;
	Сообщить("Все документы ТТН "+?(сразуНаПринтер, "отправлены на печать.", "выведены на экран.") );
	
КонецПроцедуры

Процедура СоздаватьПеремещенияКриалПриИзменении(Элемент)
	
	естьИзменения = ложь;
	
	Если СоздаватьПеремещенияКриал Тогда
		Для каждого стр1 из ГруппыСкладов Цикл
			//включаем Криал и Металлобазу
			Если (стр1.ГруппаСкладов=справочники.ГруппыСкладов.НайтиПоКоду("02") 
				или стр1.ГруппаСкладов=справочники.ГруппыСкладов.НайтиПоКоду("03"))
				и НЕ стр1.ДопПеремещение Тогда
				стр1.ДопПеремещение = Истина;
				сообщить("ВКЛючено доп.перемещение Для группы: "+строка(стр1.ГруппаСкладов), СтатусСообщения.Информация );
				естьИзменения = Истина;
			КонецЕсли;	
		КонецЦикла;
	Иначе
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Вы действительно хотите отменить ВСЕ доп.перемещения?", Режим, 10);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Для каждого стр1 из ГруппыСкладов Цикл
			Если стр1.ДопПеремещение Тогда
				стр1.ДопПеремещение = ложь;
				сообщить("ВЫКЛючено доп.перемещение Для группы: "+строка(стр1.ГруппаСкладов), СтатусСообщения.Внимание );
				естьИзменения = Истина;
			КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если естьИзменения Тогда
		Предупреждение("При изменении данного флага - 
				   |требуется заново [Создать реализации]");
	КонецЕсли;
			   
КонецПроцедуры

Процедура ГруппыСкладовДопПеремещениеПриИзменении(Элемент)
	
	флЕстьХотьОдин = ложь;
	стр0 = ЭлементыФормы.ГруппыСкладов.ТекущиеДанные;
	Для каждого стр1 из ГруппыСкладов Цикл
		Если стр1.ДопПеремещение Тогда
			   флЕстьХотьОдин = Истина;
	    КонецЕсли;	   
		   
		Если стр0.ГруппаСкладов = стр1.ГруппаСкладов 
			и ссылка.Проведен Тогда
			Предупреждение("При изменении данного флага - 
				   |требуется заново [Создать реализации]", 30);
		КонецЕсли;
			   
    КонецЦикла;		   
	
	Если СоздаватьПеремещенияКриал <> флЕстьХотьОдин Тогда		
		СоздаватьПеремещенияКриал = флЕстьХотьОдин;
    КонецЕсли;
	
КонецПроцедуры

//ВВерх  - сдвигает строки в 2х таблицах сразу
Процедура КоманднаяПанельТовары3Действие3(Кнопка)
  Индекс1 = ГруппыСкладов.Индекс(ЭлементыФормы.ГруппыСкладов.ТекущиеДанные);
	
	Если Индекс1 > 0  Тогда
		Если ТабЗначРезерв.Строки.Количество()>=Индекс1+1 Тогда
			Если ГруппыСкладов[Индекс1].ГруппаСкладов=ТабЗначРезерв.Строки[Индекс1].ГруппаСкладов Тогда
			ТабЗначРезерв.Строки.Сдвинуть(Индекс1, -1);
			КонецЕсли;			
		КонецЕсли;			
		ГруппыСкладов.Сдвинуть(Индекс1, -1);
	КонецЕсли;
	
	ЗаполнитьСписокИДеревоГруппВзаимоисключаяПредыдущиеГруппы();//+++ 02.11.2014 - сразу пересчитываем!
	
КонецПроцедуры

//Вниз  - сдвигает строки в 2х таблицах сразу
Процедура КоманднаяПанельТовары3Действие2(Кнопка)
   Индекс1 = ГруппыСкладов.Индекс(ЭлементыФормы.ГруппыСкладов.ТекущиеДанные);
   
    Если Индекс1<ГруппыСкладов.Количество()-1 Тогда
		Если ТабЗначРезерв.Строки.Количество()>=Индекс1+1 Тогда
	    	Если ГруппыСкладов[Индекс1].ГруппаСкладов=ТабЗначРезерв.Строки[Индекс1].ГруппаСкладов Тогда
			ТабЗначРезерв.Строки.Сдвинуть(Индекс1, +1);
			КонецЕсли;			
		КонецЕсли;				
		ГруппыСкладов.Сдвинуть(Индекс1, +1);
  	КонецЕсли;
	
	ЗаполнитьСписокИДеревоГруппВзаимоисключаяПредыдущиеГруппы();//+++ 02.11.2014 - сразу пересчитываем!

КонецПроцедуры

Процедура кнЗаписатьИнфуПоПроездуНажатие(Элемент)
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	КоманднаяПанель1Получить(неопределено); //перезаполняет
	
	//+++ 06.08.2015 деления до ВидаТовара и Товара!
	попытка  //23.05.2017 - всё в попытке!
		НаборЗаписей = РегистрыСведений.ИнформацияПоПроезду.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Задание.Установить(Ссылка); 
		НаборЗаписей.Записать(); //очистка
		
		Для Каждого СтрокаЗаказа Из ДеревоПоПроезду.Строки цикл // по заказам
				Для Каждого СтрокаТовар Из СтрокаЗаказа.Строки цикл
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТовар);      
				НоваяЗапись.Задание   = Ссылка; 
				стрТаб = Заказыпокупателей.НайтиСтроки(Новый структура("Заказпокупателя",СтрокаТовар.Заказ));
				НоваяЗапись.Реализация = стрТаб[0].реализация;
		        КонецЦикла;
	    КонецЦикла;
		НаборЗаписей.Записать(); // запись в регистр ИнформацияПоПроезду с отбором по ЗаданиюНаОтгрузку
	исключение
		сообщить("Невозможно обновить 'Информацию по проезду' : "+ОписаниеОшибки(), СтатусСообщения.Внимание);
	КонецПопытки;	
	
	
	//(+++ 30.10.2017 --- запись планового времени прибытия к клиенту в Реализацию ---
	для каждого стр1 из ИнформацияПоПроезду цикл
	  Если стр1.ПланВремя>'00010101' тогда
		стр2 = ЗаказыПокупателей.Найти(стр1.Заказ,"ЗаказПокупателя");
		если стр2<>неопределено тогда
			Если ТипЗнч(стр2.Реализация)=тип("ДокументСсылка.РеализацияТоваровУслуг") тогда
				рОб = стр2.Реализация.ПолучитьОбъект();
				рОб.СрокДоставки = стр1.ПланВремя;
				попытка
					рОб.ОбменДанными.Загрузка = истина;
					рОб.Записать();
					рОб.ОбменДанными.Загрузка = ЛОЖЬ;
				исключение
					сообщить("Неудалось записать план.время в документ "+строка(роб), СтатусСообщения.Внимание);
				КонецПопытки;	
			КонецЕсли;	
		КонецЕсли;	
	  КонецЕсли;
  	КонецЦикла;	
    //+++)
	
КонецПроцедуры

Процедура ПослеЗаписи()
	
	//+++ 23.04.2015 - только по регистру - обновить комментарии и записать!
	ОбновитьКомментарии();
	кнЗаписатьИнфуПоПроездуНажатие(Неопределено); //ВСЕГДА ЗАПИСЫВАТЬ!
  	
	Если не выполнено и не ОтправленоПисьмоСКрышками Тогда
		естьКрышки = Ложь;
		Для каждого стр из ЗаказыПокупателей Цикл
			Если стр.ЗаказПокупателя.ТребуютсяКрышки Тогда
				естьКрышки = истина;
				прервать;
			конецЕсли;
		конецЦикла;	 
		
		Если естьКрышки Тогда
			Ответ = Вопрос("Отправить письмо для подготовке набора комплектующих?
			| Отправка письма обязательна для своевременной подготовки комплектующих!!!", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ОтправитьМаршрутСКрышки(Ссылка);
				ОтправленоПисьмоСКрышками = Истина;
				Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Выполнено и Подразделение.ОбособленноеПодразделение = Ложь Тогда
		ТЗ = ПроверитьОстаткиПоЗаказам();
		Если ТЗ <> Неопределено Тогда //Если по заказам есть недогрузы, то выделяем их в новые заказы
			СоздатьНовыйЗаказыПоНедогрузам(ТЗ);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура Флажок2ПриИзменении(Элемент)
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос(?(ВсеДокументыСданыВБухгалтерию,"Установить","Снять")+" флажки по всех заказам ""Все документы сданы в бухгалтерию""?", Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
    	Возврат;
	КонецЕсли;

	Для каждого стр1 из ИнформацияПоПроезду Цикл
		стр1.ВсеДокументыСданыВБухгалтерию = ВсеДокументыСданыВБухгалтерию;
	КонецЦикла;	
	кнЗаписатьИнфуПоПроездуНажатие(Неопределено);
	
КонецПроцедуры

Процедура ПолучитьИзЗаказовНажатие(Элемент)
	
	если ВидОперации <> Перечисления.ВидыДвиженийПриходРасход.Расход тогда
		возврат;
	КонецЕсли;
	
	//	ИнформацияПоПроезду.Очистить();//+++ 23.04.2015
	Если ИнформацияПоПроезду.Количество()=0 Тогда
	i=ЗаказыПокупателей.Количество();  k=0;
		
	N = ЗаказыПокупателей[ЗаказыПокупателей.Количество()-1].НомерОчереди; // последняя очередь
	
	Для каждого стр1 из ЗаказыПокупателей Цикл
		
		стр2 = ИнформацияПоПроезду.Вставить(0); //ВСТАВИТЬ!
	    стр2.НомерОчереди = N + 1 - стр1.НомерОчереди;
		i=i-1;
			
		стр2.Заказ = стр1.ЗаказПокупателя;
		
		КонецЦикла;
	сообщить("Установлен порядок отгрузки Клиентам (Информация по проезду)- ОБРАТНЫЙ к списку Заказов покупателей!", СтатусСообщения.Внимание);
	
	КонецЕсли;
	
	ЗаполнитьОбъем();
	 
	Для каждого стр1 из ИнформацияПоПроезду Цикл
		
		зак = стр1.Заказ; 
		
		стр1.Контрагент = зак.Контрагент;
		Адрес = СокрЛП(зак.АдресДоставки); //04.04.2017 убрано слово "Адрес доставки: ";
		префиксАдреса = "Адрес доставки:";
		Адрес = стрЗаменить(Адрес, префиксАдреса, "");
		
		//Если нет адреса в Заказе, то из карточки клиента - адрес доставки, факт, юр...
		префиксАдреса = "";
		Если СокрЛП(Адрес)="" Тогда
		//	префиксАдреса = "Д:";
			Адрес = префиксАдреса + ПолучитьКонтактнуюИнформацию(стр1.Контрагент, "доставки");
			Если СокрЛП(Адрес)=префиксАдреса Тогда
		//		префиксАдреса = "Ф:";
				Адрес = префиксАдреса + ПолучитьКонтактнуюИнформацию(стр1.Контрагент, "Факт");
				Если СокрЛП(Адрес)=префиксАдреса Тогда
		//			префиксАдреса = "Ю:";
					Адрес = префиксАдреса + ПолучитьКонтактнуюИнформацию(стр1.Контрагент, "Юр");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
		стр1.Адрес = СокрЛП(Адрес);
		
		стр1.Менеджер   =зак.ДоговорКонтрагента.ОтветственноеЛицо;
		стр1.Организация = ПолучитьОрганизацию(зак, ТаблОрг);
		стр1.Комментарий = ПолучитьКомментарий(Зак);  //-1

		//полная сумма оплаты...
		КоэффОтрузки = получитьПроцентОтгрузкиПоЗаказу(стр1);
		
		Если КоэффОтрузки<>1 Тогда 
			сообщить("По документу "+строка(зак)+" частичная отгрузка "+формат(  КоэффОтрузки*100,"ЧДЦ=1")+"% по объему!");
		КонецЕсли;	
		стр1.ДоставкаНал   = Окр( зак.ТРНал    * КоэффОтрузки, 0); // до рублей!
		стр1.ДоставкаБНал  = Окр( зак.ТРБезНал * КоэффОтрузки, 0); // до рублей!
		стр1.ДоставкаВЦене = Окр( зак.ТРВЦене  * КоэффОтрузки, 0); // до рублей!
	//+++ 15.06.2015 - обновляем всегда!	
	//	Если стр1.СуммаЗаТоварНал = 0 Тогда // ТОЛЬКО ЕСЛИ ЕЩЕ НЕ ЗАПОЛНЕНО - то сумма Нал = сумма реализации
			КоэффОтрузкиПоСумме = получитьПроцентОтгрузкиПоЗаказу(стр1, Истина);
			стр1.СуммаЗаТоварНал = Окр( ?(Найти(зак.ДоговорКонтрагента.Наименование, "*")>0, зак.СуммаДокумента * КоэффОтрузкиПоСумме, 0), 2); 
	//	КонецЕсли;	
	КонецЦикла;
	
	Если Тариф>2 Тогда
		РаспределитьТранспортныеРасходы();
	КонецЕсли;
	
	Если Направление="" Тогда
		Направление = ЗаполнитьНаправлениеПоГородам();
	КонецЕсли;	
		
КонецПроцедуры

 //ТрКомментарий пишется в  НомерОчереди = -1 !
Функция ПолучитьКомментарий(Зак)
Комм = ""; 	
	Если НЕ ЭтоНовый() Тогда
	Запрос = Новый Запрос;  //все отгрузки по 1 заказу
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИнформацияПоПроезду.Заказ КАК Заказ,
	               |	ИнформацияПоПроезду.Комментарий
	               |ИЗ
	               |	РегистрСведений.ИнформацияПоПроезду КАК ИнформацияПоПроезду
	               |ГДЕ
	               |	ИнформацияПоПроезду.Заказ = &Заказ
	               |	И ИнформацияПоПроезду.НомерОчереди = -1
	               |";
	
	Запрос.УстановитьПараметр("Заказ", Зак);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
		Если  Выборка.Следующий() Тогда
			Комм = выборка.Комментарий;
		КонецЕсли;
	КонецЕсли;	
 Возврат Комм;
КонецФункции

//--------пропорционально объему! или сумме?!---------------------
Функция получитьПроцентОтгрузкиПоЗаказу(стр1, ПоСумме=ЛОЖЬ)
	рез = 1;
	
	строки1 = ЗаказыПокупателей.НайтиСтроки( новый Структура("ЗаказПокупателя", стр1.Заказ) );
	Если строки1=Неопределено или строки1.Количество()=0 Тогда
		рез = 0; // нет заказа в списке заказов!
	Иначе	
	    стр2 = строки1[0];
	КонецЕсли;
	
	Если стр2.Реализация = Неопределено 
		или стр2.Реализация.Товары.Итог("Количество") = стр2.ЗаказПокупателя.Товары.Итог("Количество") Тогда
		рез=1;
	Иначе // частичная отгрузка
		 Vo = 0;
		Для каждого стр3 из стр2.Реализация.Товары Цикл 
			Если ПоСумме Тогда
			Vo = Vo + стр3.Цена * стр3.Количество; //в перемещении нет Суммы!
			Иначе
			Vo = Vo + стр3.Номенклатура.ЕдиницаХраненияОстатков.Объем * стр3.Количество; 
			КонецЕсли;
		КонецЦикла;	
		Vзак = 0;//стр1.Объем;  
		Для каждого стр3 из стр2.ЗаказПокупателя.Товары Цикл 
			Если ПоСумме Тогда
			Vзак = Vзак + стр3.Сумма; 
			Иначе
			Vзак = Vзак + стр3.Номенклатура.ЕдиницаХраненияОстатков.Объем * стр3.Количество; 
			КонецЕсли;
		КонецЦикла;	
		рез  = Vo / Vзак;
	КонецЕсли;	
	
	//БОЛЬШЕ 1 быть не должен никогда!
	Если рез>1 Тогда рез = 1
	КонецЕсли;
	
	Возврат рез;
КонецФункции

Процедура ТарифПриИзменении(Элемент)
	
//+++ 01.10.2015 - ограничение при наличии отгрузок по АКБ
если ВесМакс=0 или ОбъемМакс=0 тогда
	
	естьАКБ = ложь;
	для каждого стр1 из Товары цикл
		если стр1.Номенклатура.ВидТовара = перечисления.ВидыТоваров.АКБ 
			и стр1.Количество>0 тогда
			естьАКБ = Истина;
			прервать;
		КонецЕсли;
	КонецЦикла;	
	
	Если естьАКБ тогда
		Предупреждение("    В отгрузке есть товары группы АКБ!
					    | Заполните максимальный Вес и Объем машины!
						|Только после этого можно будет ввести тариф!", 60);
		Тариф = Тариф0;
		возврат;
	КонецЕсли;
		
КонецЕсли;
//+++)	
	РаспределитьТранспортныеРасходы();

	Если ссылка.Тариф<=2 тогда //09.12.2015 если делается пересчет уже давно отгруженного задания - дату сдвигать НЕ надо!
		ВремяНапоминания = ТекущаяДата(); // при изменении тарифа - меняется факт.дата!
	КонецЕсли;	
	
//---------------------------Бух док.----------------------------------------------------------------
Если этотОбъект.Дата>='20150521' Тогда //НОВАЯ СХЕМА c 21.05.2015
	
	Если НЕ Выполнено Тогда  //предварительное распределение....
		
		Предупреждение("Задание не отмечено как Выполненное,
						|поэтому выставления счетов на клиентов
						|и от перевозчика - не выполняется...", 30);
		 
	ИначеЕсли Вопрос("Перевыставить счета от Перевозчика и на покупателей?", РежимДиалогаВопрос.ДаНет, 30) = КодВозвратаДиалога.да Тогда
		
		ПеревыставитьСчетаОтПеревозчикаБНал();    //+++ СРАЗУ счета от перевозчика!?
		
		//+++ 18.05.2015 - готово! 
		ПеревыставитьСчетаКлиентамНалБНал();
		
	//------------Соединение------------------------------------------------------------------
		//11.12.2015 - ТОЛЬКО по [v]ДокументыСданыЛогистам - в КоманднаяПанель2ВыгрузитьВБП()
		
		//+++ 02 - 09.06.2017 - выключено! 
		Если  //Найти(Перевозчик,"Воробьев")>0  или  
			Найти(Перевозчик, "Землянский")>0
		   или Найти(Перевозчик,"Малышев")>0  тогда
			Если Вопрос("Выгрузить счета перевозчика в бухгалтерию?", РежимДиалогаВопрос.ДаНет, 30) = КодВозвратаДиалога.да Тогда
		    	флПерезаписывать = Истина;
		 		КоманднаяПанель2ВыгрузитьВБП(Неопределено); //и сразу в БП
			КонецЕсли;	
		КонецЕсли;
		
		кнЗаписатьИнфуПоПроездуНажатие(Неопределено); // регистр инфо.
		ЭтотОбъект.Записать();//сразу записываем весь документ, тариф фикс.!
		
	КонецЕсли;
	
КонецЕсли;

//----------------------------------------------------------------------------------------	

Если ЗначениеНеЗаполнено(ОтвМенеджер) Тогда
	ОтвМенеджер = получитьОтвМенеджер();
КонецЕсли;
	
КонецПроцедуры

Функция  получитьОтвМенеджер()
	рез = "";
	запрос = новый запрос;
	запрос.Текст = "ВЫБРАТЬ
	               |	Табл.Менеджер,
	               |	Табл.Заказ,
	               |	Табл.Объём
	               |ПОМЕСТИТЬ ВТ_Инфо
	               |ИЗ
	               |	&Табл КАК Табл
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Инфо1.Менеджер,
	               |	Инфо1.Заказ,
	               |	Инфо1.Объём
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Инфо.Менеджер КАК Менеджер,
	               |		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Инфо.Заказ) КАК Заказ,
	               |		СУММА(Инфо.Объём) КАК Объём
	               |	ИЗ
	               |		ВТ_Инфо КАК Инфо
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		Инфо.Менеджер) КАК Инфо1
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Инфо1.Заказ УБЫВ,
	               |	Инфо1.Объём
	               |АВТОУПОРЯДОЧИВАНИЕ";
запрос.УстановитьПараметр("Табл", ИнформацияПоПроезду);
табл = запрос.Выполнить().Выбрать();
Если табл.Следующий() Тогда
	рез = табл.Менеджер;
КонецЕсли;

Возврат рез;

КонецФункции


//+++ 06.04.2015 - главная процедура распределения
//1) находит все заказы (отгруженные?!) - и объём по каждому заказу
// сумма трЗатрат = Сумма * Об1 / Общ.Объем
//2) В ЦЕНЕ = нал+бнал  - трЗатрат
Процедура РаспределитьТранспортныеРасходы() ЭКСПОРТ
	
	текстФА = "Формула Авто";
	распределениеБезФА = ЛОЖЬ; 		// 18.05.2017  - уже нет!
	СуммаФА  = 0;  ОбъемФА  = 0;
	
	распределениеБезФАп = ЛОЖЬ;     // 18.05.2017  задача № 27213 Серков!
	текстФАп = "Формула Авто Плюс";
	СуммаФАп = 0;  ОбъемФАп = 0;
	
	распределениеБезШТп = Истина;  //распределение как ФА+
	текстШТп = "Шинтрейд";
	СуммаШТп = 0;  ОбъемШТп = 0;

	для i=0 по ТаблОрг.Количество()-1 цикл
		 ТаблОрг[i].Сумма = 0;  ТаблОрг[i].Объем = 0;
	КонецЦикла;	 
	СуммаДрОрг = 0; ОбъемОрг = 0; распределениеБезОрг=Ложь;
	
	ЗаполнитьОбъем(); // по реализациям!
	
//-----------распределение БЕЗ ФА!-----------------------
Если распределениеБезФА	или распределениеБезФАп Тогда
	табЗнач = ИнформацияПоПроезду.Скопировать();
	табЗнач.Свернуть("Организация", "ДоставкаНал, ДоставкаБНал, ДоставкаВЦене, Объём");
	Для каждого стрОрг из ТабЗнач Цикл
		Если стрОрг.Организация = текстФА и распределениеБезФА Тогда 
		СуммаФА = стрОрг.ДоставкаНал + стрОрг.ДоставкаБНал + стрОрг.ДоставкаВЦене;
		ОбъемФА = стрОрг.Объём;
		КонецЕсли;
   		Если стрОрг.Организация = текстФАп и распределениеБезФАп Тогда 
		СуммаФАп = стрОрг.ДоставкаНал + стрОрг.ДоставкаБНал + стрОрг.ДоставкаВЦене;
		ОбъемФАп = стрОрг.Объём;
		КонецЕсли;
   		Если стрОрг.Организация = текстШТп и распределениеБезШТп Тогда 
		СуммаШТп = стрОрг.ДоставкаНал + стрОрг.ДоставкаБНал + стрОрг.ДоставкаВЦене;
		ОбъемШТп = стрОрг.Объём;
		КонецЕсли;
	    //---------------ТаблОрг - как ФАп  - ВСЕ НЕ фиксированные!------------
		для i=0 по ТаблОрг.Количество()-1 цикл
			Если стрОрг.Организация = ТаблОрг[i].Организация и ТаблОрг[i].ФиксСумма Тогда 
				ТаблОрг[i].Сумма = стрОрг.ДоставкаНал + стрОрг.ДоставкаБНал + стрОрг.ДоставкаВЦене;
				ТаблОрг[i].Объем = стрОрг.Объём;
				СуммаДрОрг = СуммаДрОрг+ ТаблОрг[i].Сумма;
				ОбъемОрг = ОбъемОрг+ ТаблОрг[i].Объем;
				распределениеБезОрг = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если СуммаФА>0 тогда
		сообщить("Фикс.цена для "+текстФА+": "+строка(СуммаФА));
	КонецЕсли;
	Если СуммаФАп>0 тогда
		сообщить("Фикс.цена для "+текстФАп+": "+строка(СуммаФАп));
	КонецЕсли;
	Если СуммаШТп>0 тогда
		сообщить("Фикс.цена для "+текстШТп+": "+строка(СуммаШТп));
	КонецЕсли;
	
	для i=0 по ТаблОрг.Количество()-1 цикл
		Если стрОрг.Организация = ТаблОрг[i].Организация и ТаблОрг[i].ФиксСумма 
			и ТаблОрг[i].Сумма>0 Тогда 
	сообщить("Фикс.цена для "+стрОрг.Организация+": "+строка(ТаблОрг[i].Сумма));
		КонецЕсли;
	КонецЦикла;
	
	Тариф = Тариф - СуммаФА - СуммаФАп - СуммаШТп - СуммаДрОрг;
	ИтогОбъем = ИтогОбъем - ОбъемФА - ОбъемФАп - ОбъемШТп -ОбъемОрг;
КонецЕсли;	

//------------------------------------------------------	
	//дельта несколько копеек будет отнессена на самую большую сумму
	макс = 0; i=0; ii=0;
	//Если итогОбъем=0 Тогда 
	//	Предупреждение("  Итоговый объём товаров равен нулю!
	//				   |Распределение по объёму - невозможно!",10);
	//КонецЕсли;				   
	
	
	
    ИтогОбъемКм = 0; //-----------------------28.03.2016--- сумма --------------------------
	 	 максКм = 0;
	Для каждого стр1 из ИнформацияПоПроезду Цикл
		Если распределениеБезФА	и стр1.Организация=текстФА Тогда // не делаем пересчета ВЦене Для ФА !!!
			продолжить;
		КонецЕсли;	
		Если распределениеБезФАп и стр1.Организация=текстФАп Тогда // не делаем пересчета ВЦене Для ФА+!!!
			продолжить;
		КонецЕсли;	
		Если распределениеБезШТп и стр1.Организация=текстШТп Тогда // не делаем пересчета ВЦене Для ШТ 
			продолжить;
		КонецЕсли;	
	
		ИтогОбъемКм = ИтогОбъемКм + стр1.Объём * ?(стр1.Расстояние=0, 0.1, стр1.Расстояние);
		если стр1.Расстояние> максКм  тогда
			максКм  =стр1.Расстояние;
		КонецЕсли;	
	КонецЦикла;
	
Километров = максКм;
//------------------------------новая система Объем*Км /(ИтогОбъем*ИтогКм)--------------------------------------------------------

  СуммаДоставкаВЦене = 0;
	Для каждого стр1 из ИнформацияПоПроезду Цикл
		
		Если распределениеБезФА	и стр1.Организация=текстФА Тогда // не делаем пересчета ВЦене Для ФА !!!
			продолжить;
		КонецЕсли;	
		Если распределениеБезФАп и стр1.Организация=текстФАп Тогда // не делаем пересчета ВЦене Для ФА+!!!
			продолжить;
		КонецЕсли;	
		Если распределениеБезШТп и стр1.Организация=текстШТп Тогда // не делаем пересчета ВЦене Для ШТ 
			продолжить;
		КонецЕсли;	
		
			
		//+++ 27.04.2015 - ДО РУБЛЕЙ!
		//+++ 28.03.2016 - с учетом расстояния
		стр1.ДоставкаВЦене = ?(итогОбъем=0,0,Окр(Тариф * стр1.Объём * ?(стр1.Расстояние=0, 0.1, стр1.Расстояние) /ИтогОбъемКм) )- стр1.ДоставкаНал - стр1.ДоставкаБНал;    
		Если (стр1.ДоставкаВЦене>0 и стр1.ДоставкаВЦене>макс) Тогда
			макс = стр1.ДоставкаВЦене; ii=i;
		КонецЕсли;
		Если (стр1.ДоставкаВЦене<0 и -стр1.ДоставкаВЦене>макс) Тогда
			макс = -стр1.ДоставкаВЦене; ii=i;
		КонецЕсли;
		СуммаДоставкаВЦене = СуммаДоставкаВЦене + стр1.ДоставкаВЦене;
	i=i+1;
	КонецЦикла;	
	

	delta = Тариф + ?(распределениеБезФА, СуммаФА,0)
				  + ?(распределениеБезФАп, СуммаФАп,0) 
				  + ?(распределениеБезШТп, СуммаШТп,0) 
				  + ?(распределениеБезОрг, СуммаДрОрг, 0)
		- ИнформацияПоПроезду.Итог("ДоставкаВЦене")- ИнформацияПоПроезду.Итог("ДоставкаНал")- ИнформацияПоПроезду.Итог("ДоставкаБНал");
	Если delta<>0 Тогда
	ii = ?(ii>=ИнформацияПоПроезду.Количество(), ИнформацияПоПроезду.Количество()-1,ii);//+++ 04.08.2015
		ИнформацияПоПроезду[ii].ДоставкаВЦене = ИнформацияПоПроезду[ii].ДоставкаВЦене + delta;
		Если рольДоступна("ПравоЗавершенияРаботыПользователей") Тогда
			сообщить("остаток "+формат(delta,"ЧДЦ=2")+" р. - отнесен на "+строка(ii+1)+" строку на клиента "+строка(ИнформацияПоПроезду[ii].Контрагент));
		КонецЕсли;	
	КонецЕсли;
	
Если распределениеБезФА	или распределениеБезФАп или распределениеБезШТп или распределениеБезОрг Тогда
	Тариф = Тариф + СуммаФА + СуммаФАп + СуммаШТп + распределениеБезОрг;
	ИтогОбъем = ИтогОбъем +  ОбъемФА + ОбъемФАп + ОбъемШТп +ОбъемОрг;
КонецЕсли;	
	
КонецПроцедуры

//Основная Функция перераспределения... по товарам
Процедура КоманднаяПанель1Получить(Кнопка)
		
	табЗнач = ИнформацияПоПроезду.Скопировать();
	//дельта несколько копеек будет отнессена на самую большую сумму товара
	макс = 0; i=0; ii=0;
	Если итогОбъем=0 Тогда 
		ЗаполнитьОбъем(); // по реализациям / или Заказам!
		Если итогОбъем=0 Тогда 
			Предупреждение("  Итоговый объём товаров равен нулю!
						   |Распределение по объёму - невозможно!",10);
		КонецЕсли;				   
	КонецЕсли;
	
	ДеревоПоПроезду.Строки.Очистить();
	
	// Плотников, считаем общее количество АКБ для дальнейшего расчета общего объема	
	таблТоварыАКБ = новый ТаблицаЗначений;
	КоличествоАКБ = 0;
	
	Для каждого стр из табЗнач Цикл
		строки1 = ЗаказыПокупателей.НайтиСтроки( новый Структура("ЗаказПокупателя", стр.Заказ) );
		Если строки1.Количество()=0 тогда
			продолжить;
		КонецЕсли;
		
		если ЗначениеЗаполнено(строки1[0].Реализация) тогда
			таблТоварыАКБ = строки1[0].Реализация.Товары.Выгрузить(); 			
		Иначе // ничего или все товары из заказа!
			таблТоварыАКБ = стр.Заказ.Товары.Выгрузить();
		КонецЕсли;
		
		для каждого стр из таблТоварыАКБ Цикл
			Если стр.Номенклатура.ВидТовара = перечисления.ВидыТоваров.АКБ Тогда
				КоличествоАКБ = КоличествоАКБ + стр.Количество;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	//таблТоварыАКБ.Свернуть("Номенклатура", "Количество");
	
	Если КоличествоАКБ > 5 Тогда   //Если меньше 5, то оставляем все как есть 
		ОбъемАКБРасчетный = (Цел((КоличествоАКБ/30))+1)*2; //По два куба на каждые 30 АКБ
		Объем1АКБ         = Окр(ОбъемАКБРасчетный / КоличествоАКБ,6); //Расчетный Объем на 1 Аккум, считать объем АКБ 
	КонецЕсли;                                                 // в каждом заказе будем исходя из данного значения
		
	//==============================================================================
		
//----------------------Заполнение Дерева--------------------------------	
Для каждого стр1 из табЗнач Цикл
		
		стрЗаказ = ДеревоПоПроезду.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(стрЗаказ, стр1); // по заказу - ничем не отличается!
		
	ОбъемЗаказа = стр1.Объём;
	        Км = стр1.Расстояние; // 28.03.2016
	таблТовары = новый ТаблицаЗначений;
	//по реализация
    строки1 = ЗаказыПокупателей.НайтиСтроки( новый Структура("ЗаказПокупателя", стрЗаказ.Заказ) );
	Если строки1.Количество()=0 тогда
		сообщить("Не найден "+строка(стрЗаказ.Заказ)+" в 1-ой таблице ЗаказыПокупателей", СтатусСообщения.Внимание);
		продолжить;
	КонецЕсли;
	
	если ЗначениеЗаполнено(строки1[0].Реализация) тогда
		таблТовары = строки1[0].Реализация.Товары.Выгрузить();
		 //+++ 07.08.2015
		 Если типЗнч(строки1[0].Реализация)=Тип("ДокументСсылка.ПеремещениеТоваров") тогда
			   таблТовары.Колонки.Добавить("Сумма");
			   для каждого стр111 из таблТовары цикл
				   стр111.Сумма = стр111.Количество * стр111.Цена;
			   КонецЦикла;	   
		 КонецЕсли;	 

	Иначе // ничего или все товары из заказа!
		таблТовары = стрЗаказ.Заказ.Товары.Выгрузить();
	КонецЕсли;
	
	//----------распределение по товарам-------------------------------
	Если таблТовары.Количество()=0 тогда
	 СтрТовар = стрЗаказ.Строки.Добавить();
	 ЗаполнитьЗначенияСвойств(СтрТовар, стрЗаказ); // то же самое что и по заказу
	Иначе	
		
	таблТовары.Свернуть("Номенклатура", "Сумма, Количество, Вес");  // убираем разные склады!
	
	суммНал=0;суммБНал=0;суммВЦене=0; 
	суммНалМ=0;суммБНалМ=0;суммВЦенеМ=0;  
	nn = 0; nb=0; ns=0; i=0;
	 для Каждого стрТ из таблТовары цикл
	 СтрТовар = стрЗаказ.Строки.Добавить();
	 ЗаполнитьЗначенияСвойств(СтрТовар, стрЗаказ); // то же самое что и по заказу
	 
	 СтрТовар.Номенклатура = стрТ.Номенклатура; 
	 СтрТовар.ВидТовара    = стрТ.Номенклатура.ВидТовара;
	 Если стрЗаказ.СуммаЗаТоварНал>0 тогда
        СтрТовар.СуммаЗаТоварНал = стрТ.Сумма; // сумма из Документа
	 КонецЕсли;
	
	 //+++ 24.04.2015 - Для АКБ - приведенный объём
	Если ВесМакс>0 и ОбъемМакс>0 
		и СтрТовар.Номенклатура.ВидТовара = перечисления.ВидыТоваров.АКБ Тогда
		// СтрТовар.Объём  = окр(стрТ.Количество * стрТ.Вес /1000  * ОбъемМакс/ВесМакс, 6);
			 СтрТовар.Объём =  ?(КоличествоАКБ > 5,стрТ.Количество * Объем1АКБ,окр( стрТ.Вес /1000  * ОбъемМакс/ВесМакс, 6));   //+++ 23.10.2015
	Иначе		
	 СтрТовар.Объём  = стрТ.Номенклатура.ЕдиницаХраненияОстатков.Объем * стрТ.Количество;
		Если стрТ.Номенклатура.ЕдиницаХраненияОстатков.Объем = 0 Тогда
		//	Сообщить(стр2.Номенклатура.Код+") "+стр2.Номенклатура.Наименование+" - не заполнен объём!");
			СтрТовар.Объём = стрТ.Количество * ВычислитьОбъемНоменклатуры(стрТ.Номенклатура);
		КонецЕсли;	
	КонецЕсли;	

	 СтрТовар.ДоставкаНал  = ?(ОбъемЗаказа=0,0,Окр(СтрЗаказ.ДоставкаНал   * СтрТовар.Объём / ОбъемЗаказа, 2));
	 СтрТовар.ДоставкаБНал = ?(ОбъемЗаказа=0,0,Окр(СтрЗаказ.ДоставкаБНал  * СтрТовар.Объём / ОбъемЗаказа, 2));
	 СтрТовар.ДоставкаВЦене= ?(ОбъемЗаказа=0,0,Окр(СтрЗаказ.ДоставкаВЦене * СтрТовар.Объём / ОбъемЗаказа, 2));
	 
	 //погрешность округления?!
	 суммНал  = суммНал + СтрТовар.ДоставкаНал;
	 суммБНал = суммБНал + СтрТовар.ДоставкаБНал;
	 суммВЦене= суммВЦене + СтрТовар.ДоставкаВЦене;
	 //максСумма
	 Если СтрТовар.ДоставкаНал>0 и СтрТовар.ДоставкаНал>суммНалМ тогда
		 суммНалМ = СтрТовар.ДоставкаНал; nn = i;
	 ИначеЕсли СтрТовар.ДоставкаНал<0 и -СтрТовар.ДоставкаНал>суммНалМ тогда
		 суммНалМ = -СтрТовар.ДоставкаНал; nn = i;
	 КонецЕсли;	 
	 Если СтрТовар.ДоставкаБНал>0 и СтрТовар.ДоставкаБНал>суммБНалМ тогда
		 суммБНалМ = СтрТовар.ДоставкаБНал; nb = i;
	 ИначеЕсли СтрТовар.ДоставкаБНал<0 и -СтрТовар.ДоставкаНал>суммБНалМ тогда
		 суммБНалМ = -СтрТовар.ДоставкаБНал; nb = i;
	 КонецЕсли;	 
	 Если СтрТовар.ДоставкаВЦене>0 и СтрТовар.ДоставкаВЦене>суммВЦенеМ тогда
		 суммВЦенеМ = СтрТовар.ДоставкаВЦене; ns = i;
	 ИначеЕсли СтрТовар.ДоставкаВЦене<0 и -СтрТовар.ДоставкаВЦене>суммВЦенеМ тогда
		 суммВЦенеМ = -СтрТовар.ДоставкаВЦене; ns = i;
	 КонецЕсли;	 
 	 i=i+1;
	 КонецЦикла;
 
	 //отнесение погрешности округления на макс.сумму?!
	 Если суммНал<>стрЗаказ.ДоставкаНал тогда
	   стрЗаказ.Строки[nn].ДоставкаНал = стрЗаказ.Строки[nn].ДоставкаНал +  (стрЗаказ.ДоставкаНал - суммНал);
	   сообщить(строка( стрЗаказ.Заказ.Номер)+") Разность нал: "+строка(стрЗаказ.ДоставкаНал - суммНал)+"р. отнесена на "+строка(nn+1)+" товар");
     КонецЕсли;
	 Если суммБНал<>стрЗаказ.ДоставкаБНал тогда
	   стрЗаказ.Строки[nb].ДоставкаБНал = стрЗаказ.Строки[nb].ДоставкаБНал +  (стрЗаказ.ДоставкаБНал - суммБНал);
	   сообщить(строка( стрЗаказ.Заказ.Номер)+") Разность Б/нал: "+строка(стрЗаказ.ДоставкаБНал - суммБНал)+"р. отнесена на "+строка(nb+1)+" товар");
     КонецЕсли;
	 Если суммВЦене<>стрЗаказ.ДоставкаВЦене тогда
	   стрЗаказ.Строки[ns].ДоставкаВЦене = стрЗаказ.Строки[ns].ДоставкаВЦене +  (стрЗаказ.ДоставкаВЦене - суммВЦене);
	   сообщить(строка( стрЗаказ.Заказ.Номер)+") Разность Б/нал: "+строка(стрЗаказ.ДоставкаВЦене - суммВЦене)+"р. отнесена на "+строка(ns+1)+" товар");
     КонецЕсли;
   
   КонецЕсли;	
КонецЦикла; // по заказам  табЗнач

КонецПроцедуры




процедура ЗаполнитьОбъем()
	ИтогОбъем = 0;
	
//09.12.2015---------если уже есть реализации - то ТОЛЬКО по реализациям!-------	
	нетРеализаций = истина;
	Для каждого стр1 из ЗаказыПокупателей цикл
		если ЗначениеЗаполнено(стр1.Реализация) тогда
			нетРеализаций = ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Плотников, считаем общее количество АКБ для дальнейшего расчета общего объема	
	таблТоварыАКБ = новый ТаблицаЗначений;
	КоличествоАКБ = 0;
	табЗнач1 = ИнформацияПоПроезду.Скопировать();
	
	Для каждого стр из табЗнач1 Цикл
		строки1 = ЗаказыПокупателей.НайтиСтроки( новый Структура("ЗаказПокупателя", стр.Заказ) );
		Если строки1.Количество()=0 тогда
			продолжить;
		КонецЕсли;
		
		если ЗначениеЗаполнено(строки1[0].Реализация) тогда
			таблТоварыАКБ = строки1[0].Реализация.Товары.Выгрузить(); 			
		Иначе // ничего или все товары из заказа!
			таблТоварыАКБ = стр.Заказ.Товары.Выгрузить();
		КонецЕсли;
		
		для каждого стр из таблТоварыАКБ Цикл
			Если стр.Номенклатура.ВидТовара = перечисления.ВидыТоваров.АКБ Тогда
				КоличествоАКБ = КоличествоАКБ + стр.Количество;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	//таблТоварыАКБ.Свернуть("Номенклатура", "Количество");
	
	Если КоличествоАКБ > 5 Тогда   //Если меньше 5, то оставляем все как есть 
		ОбъемАКБРасчетный = (Цел((КоличествоАКБ/30))+1)*2; //По два куба на каждые 30 АКБ
		Объем1АКБ         = Окр(ОбъемАКБРасчетный / КоличествоАКБ,6); //Расчетный Объем на 1 Аккум, считать объем АКБ 
	КонецЕсли;                                                 // в каждом заказе будем исходя из данного значения
		
	//==============================================================================

	Для каждого стр1 из ИнформацияПоПроезду Цикл
		//--------------все товары из реализаций!---------------
		
		строки = ЗаказыПокупателей.НайтиСтроки(новый Структура("ЗаказПокупателя", стр1.Заказ) );
		
	    докРеализ = строки[0].Реализация;
		Об1 = 0;
        //округляем объем каждого товара - НЕЛЬЗЯ! ошибка нарастает очень быстро!
		ЕСЛИ НЕ (докРеализ = Неопределено или докРеализ.Пустая()) Тогда
			Для каждого стр2 из докРеализ.Товары Цикл
				//+++ 24.04.2015 - Для АКБ - приведенный объём
				Если ВесМакс>0 и ОбъемМакс>0 
					и стр2.Номенклатура.ВидТовара = перечисления.ВидыТоваров.АКБ Тогда
				//	Об1 = Об1 + стр2.Количество * стр2.Вес /1000  * ОбъемМакс/ВесМакс;
					Об1 = ?(Ложь,Об1 + стр2.Количество * Объем1АКБ,Об1 + стр2.Вес/1000  * ОбъемМакс/ВесМакс); //23.10.2015
				Иначе		
					Об1 = Об1 + стр2.Количество * стр2.Номенклатура.ЕдиницаХраненияОстатков.Объем;//ВычислитьОбъемНоменклатуры(стр2.Номенклатура);
					Если стр2.Номенклатура.ЕдиницаХраненияОстатков.Объем = 0 Тогда
						Сообщить(стр2.Номенклатура.Код+") "+стр2.Номенклатура.Наименование+" - не заполнен объём!");
						Об1 = Об1 + стр2.Количество * ВычислитьОбъемНоменклатуры(стр2.Номенклатура);
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;
		ИНАЧЕЕсли нетРеализаций	Тогда	//-----------------По ВСЕМ товарам из заказа!----------------------
			Для каждого стр2 из  стр1.Заказ.Товары Цикл //22.12.2015 - Воробьев просил объем сразу чтобы видеть!
				//+++ 24.04.2015 - Для АКБ - приведенный объём
				Если ВесМакс>0 и ОбъемМакс>0 
					и стр2.Номенклатура.ВидТовара = перечисления.ВидыТоваров.АКБ Тогда
					Об1 = ?(Ложь,Об1 + стр2.Количество * Объем1АКБ,Об1 + стр2.Количество * стр2.Номенклатура.ЕдиницаХраненияОстатков.Вес /1000 * ОбъемМакс/ВесМакс);//в тоннах
				Иначе		
					Об1 = Об1 + стр2.Количество * стр2.Номенклатура.ЕдиницаХраненияОстатков.Объем;//ВычислитьОбъемНоменклатуры(стр2.Номенклатура);
					Если стр2.Номенклатура.ЕдиницаХраненияОстатков.Объем = 0 Тогда
						Сообщить(стр2.Номенклатура.Код+") "+стр2.Номенклатура.Наименование+" - не заполнен объём!");
						Об1 = Об1 + стр2.Количество *  ВычислитьОбъемНоменклатуры(стр2.Номенклатура);
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;
		КОНЕЦЕсли;
	
	стр1.Объём = Окр(Об1,3); //до литра
	
	//+++ 09.12.2015 ------- все суммы = 0р. ---------------------
	Если  стр1.Объём=0 тогда
	   стр1.СуммаЗаТоварНал = 0;
	   стр1.ДоставкаНал     = 0;
	   стр1.ДоставкаБНал    = 0;
	   стр1.ДоставкаВЦене   = 0;
	   сообщить("Заказ №"+строка(стр1.Заказ.Номер)+" Контрагент: "+строка(стр1.Контрагент)+" Нулевой объем = транспортные расходы = 0 р.");
	КонецЕсли;

	ИтогОбъем  = ИтогОбъем  + Окр(Об1,3);  //до литра
	КонецЦикла;	
	
	Если ОбъемМакс>0 и ИтогОбъем>ОбъемМакс Тогда
		Предупреждение("Превышен максимальный объём Автомобиля!
		|Объём: "+строка(ИтогОбъем)+" превышает макс.объём "+строка(ОбъемМакс)+" м3 на "+строка(ИтогОбъем -ОбъемМакс)+" м3", 10); 
		ЭлементыФормы.ИтогОбъем.ЦветТекста = webЦвета.Красный;
	Иначе
		ЭлементыФормы.ИтогОбъем.ЦветТекста = webЦвета.Черный;
	КонецЕсли;	
	
КонецПроцедуры

процедура ОбновитьКомментарии() //+++ 23.04.2015

	Если ИнформацияПоПроезду.Количество()=0 
		и НЕ Подразделение.ОбособленноеПодразделение Тогда
		ПолучитьИзЗаказовНажатие(Неопределено);
	Иначе
		Для каждого стр1 из ИнформацияПоПроезду Цикл 
		 стр1.Комментарий = ПолучитьКомментарий(стр1.Заказ);
		 стр1.Организация = ПолучитьОрганизацию(стр1.Заказ, ТаблОрг); //+++ 18.12.2017 - сразу обновляется!
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТипАвтомобиляПриИзменении(Элемент)
	ВесМакс   = Элемент.Значение.Вес;
	ОбъемМакс = Элемент.Значение.Объем;
	имя1 = Строка(Элемент.Значение);
	имя1 = СокрЛП(лев(имя1, найти(имя1,"(")-1));
	Если имя1<>"" Тогда //и СокрЛП(МаркаАвтомобиля)="" 
		МаркаАвтомобиля = имя1;
	КонецЕсли;
	
	Если ИнформацияПоПроезду.Количество()>0 Тогда
		ЗаполнитьОбъем();
	КонецЕсли;
	
КонецПроцедуры

Процедура Кнопка1Нажатие(Элемент)
	Направление = ЗаполнитьНаправлениеПоГородам();
КонецПроцедуры


Функция ЗаполнитьНаправлениеПоГородам()
	рез = "";
	город0 = ""; 
	контр0=справочники.Контрагенты.ПустаяСсылка();
	таблЗаказы = ИнформацияПоПроезду.Скопировать(); // таб.Знач
	таблЗаказы.Сортировать("НомерОчереди");
	Для каждого стр1 из таблЗаказы Цикл
		
			Если город0 = "" Тогда 
				контр0 = стр1.Контрагент;  контр1 = контр0;
				
				город0 = ОбработатьАдрес(стр1.Адрес, 4,4); //город
				Если СокрЛП(город0)="" Тогда
					ФактАдрес = ПолучитьКонтактнуюИнформацию(стр1.Контрагент, "Факт");
					город0 = ОбработатьАдрес(ФактАдрес, 4,4); //город
					Если СокрЛП(город0)="" Тогда
					ЮрАдрес = ПолучитьКонтактнуюИнформацию(стр1.Контрагент, "Юр");
				    город0 = ОбработатьАдрес(ЮрАдрес , 4,4); //город
					КонецЕсли;
				КонецЕсли;
			город0 = СокрЛП(город0);
			город0 =стрЗаменить(город0, "адрес доставки: ", "");
			город0 =стрЗаменить(город0, "факт.адрес: ", "");
			город0 =стрЗаменить(город0, "юр.адрес: ", "");
			рез=?(город0="","",город0+"-");
			КонецЕсли;
			
		
			город1 = ОбработатьАдрес(стр1.Адрес, 4,4); //город
				Если СокрЛП(город1)="" Тогда
					ФактАдрес = ПолучитьКонтактнуюИнформацию(стр1.Контрагент, "Факт");
					город1 = ОбработатьАдрес(ФактАдрес, 4,4); //город
					Если СокрЛП(город1)="" Тогда
					ЮрАдрес = ПолучитьКонтактнуюИнформацию(стр1.Контрагент, "Юр");
				    город1 = ОбработатьАдрес(ЮрАдрес , 4,4); //город
					КонецЕсли;
				КонецЕсли;
				
				город1 = СокрЛП(город1);
				город1 =стрЗаменить(город1, "адрес доставки: ", "");
				город1 =стрЗаменить(город1, "факт.адрес: ", "");
				город1 =стрЗаменить(город1, "юр.адрес: ", "");
	
			Если город0<>город1 Тогда
				Если прав(рез, стрДлина(город1)+1) <> город1+"-" Тогда // без повторений!
				рез=рез+?(город1="","", город1+"-");
				КонецЕсли;
			КонецЕсли;
			
	КонецЦикла;
	рез = лев(рез, стрДлина(рез)-1);
	
	Возврат рез;
КонецФункции


//------Распознование адреса------------------
// начиная   с n до 6 поля, 7=7
	//стр2.Колонки.Добавить("Поле1");//индекс 
	//стр2.Колонки.Добавить("Поле2");//Область
	//стр2.Колонки.Добавить("Поле3");//Район
	//стр2.Колонки.Добавить("Поле4");//город
	//стр2.Колонки.Добавить("Поле5");//село
	//стр2.Колонки.Добавить("Поле6");//улица
	//стр2.Колонки.Добавить("Поле7");//дом
//
процедура Распознать(знач1, n)
	нКон = 0;	
	знач1 = СокрЛП(знач1);
	
		Если стрДлина(СокрЛП(знач1))=6 Тогда
		знач2 = "";
			попытка 
				знач2 = Формат(Число(знач1),"ЧГ=0");
			исключение 
			КонецПопытки;
			
			Если СокрЛП(знач2)=СокрЛП(знач1) Тогда //индекс только из цифр
			нКон = 1;
			КонецЕсли;
		КонецЕсли;
		
		Если (Найти(знач1," обл")>0) или (Найти(нрег(знач1),"обл.")>0) или (Найти(нрег(знач1),"область")>0) 
			или (Найти(нрег(знач1),"республика")>0) или (Найти(нрег(знач1),"респ.")>0) Тогда 
			нКон = 2; 
			Если ( Найти( нрег(знач1),"московская обл")>0 ) Тогда
				знач1 = "Московская обл";
			КонецЕсли;	
			
		ИначеЕсли (Найти(нрег(знач1),"ярославль")>0) Тогда
			нКон = 4;
			знач1 = "Ярославль"; // регион, но Для нас - это Город!
		ИначеЕсли (Найти(нрег(знач1),"москва")>0) и (n<=2) Тогда  //+++ 12.10.2011
			нКон = 4;
			знач1 = "Москва"; // регион, но Для нас - это Город!
		ИначеЕсли (Найти(знач1,"МКАД")>0) Тогда
			нКон = 4;
		ИначеЕсли (знач1="МО") Тогда
			нКон = 2;
			знач1 = "Московская обл"; // регион!
			
		ИначеЕсли (Найти(нрег(знач1)," р-н")>0) или (Найти(нрег(знач1)," р-он")>0) или (Найти(нрег(знач1)," район")>0) Тогда
			нКон = 3;
		ИначеЕсли (Найти(нрег(знач1),"г.")>0)   или (Найти(нрег(знач1),"город ")>0) или (Найти(нрег(знач1)," г")=СтрДлина(знач1)-1) Тогда
			нКон = 4;
		ИначеЕсли (Найти(нрег(знач1),"пос.")>0) или (Найти(нрег(знач1),"п.")=1) или (Найти(нрег(знач1),"поселок ")>0) или ( Найти(нрег(знач1)," п")=СтрДлина(знач1)-1)
			  ИЛИ (Найти(нрег(знач1),"сел.")>0) или (Найти(нрег(знач1),"с.")=1) или (Найти(нрег(знач1),"село ")>0) или ( Найти(нрег(знач1)," с")=СтрДлина(знач1)-1)
			  или (Найти(нрег(знач1),"ст.")>0)  или (Найти(нрег(знач1),"станция")>0)
			  ИЛИ (Найти(нрег(знач1),"дер.")>0) или (Найти(нрег(знач1),"деревня ")>0) Тогда
			нКон = 4;
		ИначеЕсли (Найти(нрег(знач1),"ул")>0)   или (Найти(нрег(знач1),"улица")>0) 
			  или (Найти(нрег(знач1),"пр-т")>0)  или (Найти(нрег(знач1),"проспект")>0)
			  или (Найти(нрег(знач1),"тр-т")>0)  или (Найти(нрег(знач1),"тракт")>0)
			  или (Найти(нрег(знач1),"пр-д")>0)  или (Найти(нрег(знач1),"проезд")>0) или (Найти(нрег(знач1),"пр.")>0)
			  или (Найти(нрег(знач1),"км.")>0)   или  (Найти(нрег(знач1),"километр")>0) 
			  или (Найти(нрег(знач1),"дор.")>0)  или  (Найти(нрег(знач1),"дорога")>0) 
			  или (Найти(нрег(знач1),"пл-дь")>0) или (Найти(нрег(знач1),"площадь")>0)
			  или (Найти(нрег(знач1),"пер.")>0)  или (Найти(нрег(знач1),"переулок")>0)
			  или (Найти(нрег(знач1),"ш.")>0)    или (Найти(нрег(знач1),"шоссе")>0) Тогда
			нКон = 6;
// город, улица, дом  / или Обл., Район, деревня, дом
		ИначеЕсли (Найти(нрег(знач1),"д.")>0) или (Найти(нрег(знач1),"дом")>0)
			 или  (Найти(нрег(знач1),"стр.")>0) или (Найти(нрег(знач1),"строение ")>0)или (n=7) Тогда
			нКон = 7;
		КонецЕсли;	
		
	Знач1 = СокрЛП(знач1);
	Если Знач1="" Тогда
		n=0;
	КонецЕсли;	
	
	n = нКон;//+++
	
Конецпроцедуры		

процедура РазбитьСтрокуНаПоля(стр0, ТаблЗнач1)
	
ТаблЗнач1 = Неопределено;
ТаблЗнач1 =новый ТаблицаЗначений;
ТаблЗнач1.Колонки.Добавить("n");
ТаблЗнач1.Колонки.Добавить("Значение");

стр1 = стр0;// Иначе значение меняется!

строка1 = СокрЛП(стр1);
Если строка1<>"" Тогда 
		
		i=найти(строка1,","); L = стрДлина(строка1);
		n=1;
		пока i>0 и n<=7 Цикл
		знач1 = СокрЛП(Лев(Строка1, i-1));
		
		//!!! распознавание - что это такое
		Распознать(знач1, n); 
		// переделывает значения n!
		
		Если n>0 Тогда
			строка111 = ТаблЗнач1.Добавить();
			строка111.n = n;
			строка111.Значение = знач1; // запишем 
		Иначе 
			//сообщить("Не распознано поле №"+n+" = '"+знач1+"' (Для адреса: "+стр1+")");
			КонецЕсли;	
		n=n+1;
		Строка1 = Прав(Строка1, L-i);
		i=найти(строка1,","); L = стрДлина(строка1);
		КонецЦикла;	
КонецЕсли;

КонецПроцедуры

Функция ОбработатьАдрес(Адрес1, НомерПоля1=2, НомерПоля2=6) Экспорт
	
	Табзнач1 = Неопределено;
	РазбитьСтрокуНаПоля(Адрес1, Табзнач1);
	рез = "";
	
	Для i=0 по Табзнач1.количество()-1 Цикл
		стр1 = Табзнач1[i];
	     //регион     //город
		Если (стр1.n>=НомерПоля1) и (стр1.n<=НомерПоля2) Тогда
			рез = рез +СокрЛП(стр1.Значение)+", ";
		КонецЕсли;
	КонецЦикла;
	рез = Лев(рез, стрДлина(рез)-2);
	
	Если Табзнач1.количество()<=1 Тогда //Для АЭ - направление - просто город!
		рез = СокрЛП(Адрес1);
	КонецЕсли;
	
	рез = стрЗаменить(рез, "Доставка ", ""); //только город
	рез = стрЗаменить(рез, "Факт.адрес: ", ""); 
	рез = стрЗаменить(рез, "Юр.адрес: ", ""); 
	Если стрДлина(рез)>30 Тогда рез = лев(рез,30)+"..."; КонецЕсли;

	Возврат рез;
	
КонецФункции	

Процедура ЗаполнитьИнформациюПоПроезду() 
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ИнформацияПоПроезду.НомерОчереди,
	             |	ИнформацияПоПроезду.Контрагент,
	             |	ИнформацияПоПроезду.Заказ,
	             |	ВЫРАЗИТЬ(ИнформацияПоПроезду.Адрес КАК СТРОКА(500)) КАК Адрес,
	             |	ИнформацияПоПроезду.Организация,
	             |	СУММА(ИнформацияПоПроезду.СуммаЗаТоварНал) КАК СуммаЗаТоварНал,
	             |	СУММА(ИнформацияПоПроезду.ДоставкаНал) КАК ДоставкаНал,
	             |	СУММА(ИнформацияПоПроезду.ДоставкаБНал) КАК ДоставкаБНал,
	             |	СУММА(ИнформацияПоПроезду.ДоставкаВЦене) КАК ДоставкаВЦене,
	             |	ИнформацияПоПроезду.Менеджер,
	             |	ВЫРАЗИТЬ(ИнформацияПоПроезду.Комментарий КАК СТРОКА(1000)) КАК Комментарий,
	             |	СУММА(ИнформацияПоПроезду.Объём) КАК Объём,
	             |	ИнформацияПоПроезду.ВсеДокументыСданыВБухгалтерию,
				 //28.03.2016
	             |	МАКСИМУМ(ИнформацияПоПроезду.Расстояние) КАК Расстояние
	             |ИЗ
	             |	РегистрСведений.ИнформацияПоПроезду КАК ИнформацияПоПроезду
	             |ГДЕ
	             |	ИнформацияПоПроезду.Задание = &Задание
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ИнформацияПоПроезду.Заказ,
	             |	ИнформацияПоПроезду.Контрагент,
	             |	ИнформацияПоПроезду.ВсеДокументыСданыВБухгалтерию,
	             |	ВЫРАЗИТЬ(ИнформацияПоПроезду.Адрес КАК СТРОКА(500)),
	             |	ВЫРАЗИТЬ(ИнформацияПоПроезду.Комментарий КАК СТРОКА(1000)),
	             |	ИнформацияПоПроезду.Организация,
	             |	ИнформацияПоПроезду.Менеджер,
	             |	ИнформацияПоПроезду.НомерОчереди
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	ИнформацияПоПроезду.НомерОчереди
	             |АВТОУПОРЯДОЧИВАНИЕ";
				 Запрос.УстановитьПараметр("Задание",Ссылка);
				 Рез=Запрос.Выполнить().Выбрать();
				 
	ИнформацияПоПроезду.Очистить();	
	КолЕстьДок = 0;
	
	 Пока Рез.Следующий() Цикл
		 нстр=ИнформацияПоПроезду.Добавить();
		 ЗаполнитьЗначенияСвойств(нстр, рез);
		 Если  нстр.ВсеДокументыСданыВБухгалтерию Тогда
			КолЕстьДок = КолЕстьДок + 1;
	     КонецЕсли;
	 КонецЦикла;
	 	 
КонецПроцедуры

//+++ 06.08.2015 - распределение по товарам и видам товаров
Процедура ЗаполнитьДеревоПоПроезду() 
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ИнформацияПоПроезду.НомерОчереди КАК НомерОчереди,
	             |	ИнформацияПоПроезду.Контрагент,
	             |	ИнформацияПоПроезду.Заказ КАК Заказ,
	             |	ВЫРАЗИТЬ(ИнформацияПоПроезду.Адрес КАК СТРОКА(500)) КАК Адрес,
	             |	ИнформацияПоПроезду.Организация,
	             |	ИнформацияПоПроезду.СуммаЗаТоварНал КАК СуммаЗаТоварНал,
	             |	ИнформацияПоПроезду.ДоставкаНал КАК ДоставкаНал,
	             |	ИнформацияПоПроезду.ДоставкаБНал КАК ДоставкаБНал,
	             |	ИнформацияПоПроезду.ДоставкаВЦене КАК ДоставкаВЦене,
	             |	ИнформацияПоПроезду.Менеджер,
	             |	ВЫРАЗИТЬ(ИнформацияПоПроезду.Комментарий КАК СТРОКА(1000)) КАК Комментарий,
	             |	ИнформацияПоПроезду.Объём КАК Объём,
	             |	ИнформацияПоПроезду.ВсеДокументыСданыВБухгалтерию,
	             |	ИнформацияПоПроезду.ВидТовара,
	             |	ИнформацияПоПроезду.Номенклатура
	             |ИЗ
	             |	РегистрСведений.ИнформацияПоПроезду КАК ИнформацияПоПроезду
	             |ГДЕ
	             |	ИнформацияПоПроезду.Задание = &Задание
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	ИнформацияПоПроезду.НомерОчереди,
	             |	Заказ
	             |ИТОГИ
	             |	МАКСИМУМ(НомерОчереди),
	             |	СУММА(СуммаЗаТоварНал),
	             |	СУММА(ДоставкаНал),
	             |	СУММА(ДоставкаБНал),
	             |	СУММА(ДоставкаВЦене),
	             |	СУММА(Объём)
	             |ПО
	             |	Заказ
	             |АВТОУПОРЯДОЧИВАНИЕ";
				 Запрос.УстановитьПараметр("Задание",Ссылка);
				 Рез=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				 
	ДеревоПоПроезду.Строки.Очистить();	
	КолЕстьДок = 0;
	
	 Пока Рез.Следующий() Цикл
		 нстр=ДеревоПоПроезду.Строки.Добавить();
		 ЗаполнитьЗначенияСвойств(нстр, рез);
		 тов = рез.Выбрать(); i=0;
		 Пока тов.Следующий() Цикл
		 нстр2=нстр.Строки.Добавить();
		 если i=0 тогда
			 нстр.Контрагент  =  тов.Контрагент;
			 нстр.Менеджер    =  тов.Менеджер;
			 нстр.Организация =  тов.Организация;
			 нстр.ВсеДокументыСданыВБухгалтерию = тов.ВсеДокументыСданыВБухгалтерию;
			 нстр.Адрес =  тов.Адрес;
		 КонецЕсли;	 
		 ЗаполнитьЗначенияСвойств(нстр2, тов);
		 i=i+1;
		 КонецЦикла;
	 КонецЦикла;
	 	 
КонецПроцедуры


// по флагу флПерезаписывать - перезаписывает, Иначе - только ищет
Процедура КоманднаяПанель2ВыставитьСчета(Кнопка)
	
	ПеревыставитьСчетаОтПеревозчикаБНал(); //+++
	
	ПеревыставитьСчетаКлиентамНалБНал();
	
	//+++ 29.05.2015 - на ЯШТ и по обраткам
	СоздатьПоступлениеДопРасходов();
	
КонецПроцедуры


Процедура перевыставитьОбратку()

  	//+++ ищем все обратки
	табл = НайтиПоступлениеДопРасходов();
	Если табл.Количество()>0 Тогда
		Для i=0 по табл.Количество()-1 Цикл
			стр1 = суммаОрг.Добавить();
			ЗаполнитьЗначенияСвойств(стр1, табл[i]);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


//---------------------------------------------------------------------------------
процедура ПеревыставитьСчетаОтПеревозчикаБНал()
	
	//от перевозчика
	 Если СокрЛП(Перевозчик)="" Тогда 
		 Предупреждение("Не заполнено поле Перевозчик!", 30);
		 Возврат;
	 КонецЕсли;	
	 
	суммаОрг1 = суммаОрг.Скопировать(); 
	
	суммаОрг1.Очистить();
    суммаОрг1.Колонки.Добавить("СуммаПеревыставленнаяНал");
	Для каждого стр1 из ИнформацияПоПроезду Цикл
		стр2 = суммаОрг1.Добавить();
		стр2.Организация = стр1.Организация;
		стр2.Сумма       = стр1.ДоставкаВЦене;    
		стр2.СуммаПеревыставленная = стр1.ДоставкаБНал;
		стр2.СуммаПеревыставленнаяНал = стр1.ДоставкаНал;
	КонецЦикла;
   суммаОрг1.Свернуть("Организация", "Сумма, СуммаПеревыставленная, СуммаПеревыставленнаяНал"); //+++ 20.05.2015
   суммаОрг1.Колонки.Добавить("Счет");
   суммаОрг1.Колонки.Добавить("СписокРеализаций");
   
   Для каждого стрОрг1 из суммаОрг1 Цикл
	   стрОрг1.СписокРеализаций = новый СписокЗначений;
	   
	   Для каждого стр1 из ИнформацияПоПроезду Цикл
		   
		   //+++ 21.05 - 10.06.2015 распределение по реализациям, только Если сумма затрат НЕ ноль!
		   //Если стр1.ДоставкаВЦене = 0 Тогда 
		   //	продолжить;
		   //КонецЕсли;	  
		   
			Если стрОрг1.Организация = стр1.Организация Тогда
				Для каждого стр2 из ЗаказыПокупателей Цикл
					Если стр1.Заказ = стр2.ЗаказПокупателя и значениеЗаполнено(стр2.Реализация) Тогда
				 	стрОрг1.СписокРеализаций.Добавить(стр2.Реализация);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	суммаОрг.Очистить();
	Для каждого стрОрг1 из суммаОрг1 Цикл
		стрОрг = суммаОрг.Добавить();
		ЗаполнитьЗначенияСвойств(стрОрг, стрОрг1);
		стрОрг.СуммаПеревыставленная = стрОрг1.СуммаПеревыставленная + стрОрг1.СуммаПеревыставленнаяНал;  //+++ 20.05.2015
		стрОрг.Счет = ВыставитьСчет(стрОрг1);   
		попытка
		стрОрг.НомерВхДок = стрОрг.Счет.НомерВходящегоДокумента;
		исключение 
		КонецПопытки;
	КонецЦикла;	
	
КонецПроцедуры

 Функция ВыставитьСчет(стрОрг1)
	 
 	 докСсылка = стрОрг1.Счет; 
	 	 
	 //от перевозчика
	 Если СокрЛП(Перевозчик)="" и ЗначениеНеЗаполнено(ОрганизацияВыдавшаяДоверенность) Тогда 
		 Предупреждение("Не заполнено поле Перевозчик!", 30);
		 Возврат докСсылка;
	 КонецЕсли;	 
	 Если СокрЛП(МаркаАвтомобиля)="" Тогда
		 Предупреждение("Не заполнено поле МаркаАвтомобиля!", 30);
		 Возврат докСсылка;
	 КонецЕсли;	 
	 Если СокрЛП(ГосНомерАвтомобиля)="" Тогда
		 Предупреждение("Не заполнено поле ГосНомерАвтомобиля!", 30);
		 Возврат докСсылка;
	 КонецЕсли;	 
	 	 
		
		ЗаполнитьДок(стрОрг1, докСсылка); //15.03.2018
				
	 Возврат докСсылка;
	 
 КонецФункции	 

 //15.03.2018 --- разделение поступления
функция  получитьПодразделениеМенеджера(Менеджер)
	рез = ?(Менеджер.ПодразделениеБюджет.Пустая(), 
			?(Менеджер.ОсновноеПодразделение.Пустая(), ЭтотОбъект.Подразделение, 
			  Менеджер.ОсновноеПодразделение)
		  , Менеджер.ПодразделениеБюджет);
	возврат рез;							   
КонецФункции

//+++ 06-26.05.2015
Процедура ЗаполнитьДок(стрОрг, докСсылка) 

	
СтатьяЗатратТрУсл = справочники.СтатьиЗатрат.НайтиПоКоду("К0115"); // Автоуслуги (грузовой транспорт)
НоменклатураТрУсл = Справочники.Номенклатура.НайтиПоКоду("ЛН00039",,Справочники.Номенклатура.НайтиПоКоду("ЛН00001")); //Транспортные услуги 44-1 на затраты
СкладТрУсл 		  = справочники.Склады.НайтиПоКоду("00196"); //Склад услуг

орг = справочники.Организации.НайтиПоКоду("00001"); //ЯШТ всегда!

//------------------Контрагент--------------------
Контр = справочники.Контрагенты.ПустаяСсылка();
	Если СокрЛП(Перевозчик)="" Тогда
		Контр = ОрганизацияВыдавшаяДоверенность;
	ИначеЕсли Найти(Перевозчик, "Землянский")>0 Тогда	
		Контр = справочники.Контрагенты.НайтиПоКоду("00216");
	ИначеЕсли Найти(Перевозчик, "Воробьев")>0 Тогда	
		Контр = справочники.Контрагенты.НайтиПоКоду("93833");
	ИначеЕсли Найти(Перевозчик, "Малышев")>0 Тогда	
		Контр = справочники.Контрагенты.НайтиПоКоду("91515");
	Иначе // Любой другой перевозчик
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Контрагенты.Ссылка
		               |ИЗ
		               |	Справочник.Контрагенты КАК Контрагенты
		               |ГДЕ
		               |	(ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(200))) = &Наименование";
		
		Запрос.УстановитьПараметр("Наименование",  ЭтотОбъект.Перевозчик);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Контр = выборка.Ссылка;
		Иначе 
			Контр = справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;	
	КонецЕсли;	
	
Если Контр = Неопределено или Контр.Пустая() Тогда
	Сообщить("Не найден Перевозчик по полному наименованию '"+Перевозчик+"'", СтатусСообщения.Внимание);
	Возврат;
КонецЕсли;	
	
//-------------Договор НП - НеПроведенные -------------------------------------------------	
строкиОрг = ТаблОрг.НайтиСтроки(Новый Структура("Организация", стрОрг.Организация ));

	Если стрОрг.Организация = "Яршинторг" Тогда
			ДогКонтр = Контр.ОсновнойДоговорПоставки; //1 главный!
			Если ДогКонтр.Пустая() Тогда
			ДогКонтр = найтиДогКонтр(Контр," (НП)");  //"Любой Договор услуг (НП)"
				Если ДогКонтр.Пустая() Тогда
				 ДогКонтр = СоздатьДогКонтр(Контр," (НП)");
				КонецЕсли;
			КонецЕсли;
			
	ИначеЕсли стрОрг.Организация = "Формула Авто" Тогда
		ДогКонтр = найтиДогКонтр(Контр, " ФА(НП)");
		Если ДогКонтр.Пустая() Тогда
		 ДогКонтр = СоздатьДогКонтр(Контр, " ФА(НП)");
		КонецЕсли;
		
	ИначеЕсли стрОрг.Организация = "Формула Авто Плюс" Тогда//+++
		ДогКонтр = найтиДогКонтр(Контр, " ФА+(НП)");
		Если ДогКонтр.Пустая() Тогда
		 ДогКонтр = СоздатьДогКонтр(Контр, " ФА+(НП)");
		КонецЕсли;
	ИначеЕсли стрОрг.Организация = "Шинтрейд" Тогда//+++
		ДогКонтр = найтиДогКонтр(Контр, " ШТ(НП)");
		Если ДогКонтр.Пустая() Тогда
		 ДогКонтр = СоздатьДогКонтр(Контр, " ШТ(НП)");
		КонецЕсли;
	
	ИначеЕсли строкиОрг.Количество()>0 Тогда // ВСЕ 
			контрОрг = строкиОрг[0];
			ДогКонтр = найтиДогКонтр(Контр, " "+контрОрг.НаименованиеКраткое+"(НП)");
		Если ДогКонтр.Пустая() Тогда
			 ДогКонтр = СоздатьДогКонтр(Контр, " "+контрОрг.НаименованиеКраткое+"(НП)");
		КонецЕсли;

	Иначе
		сообщить("Счета выставляются только на "+строка(ТаблОрг.Количество()+3)+" организаций...");
		Возврат;
	КонецЕсли;
	
//+++ 21-26.05.2015 - Если не создался договор...	
	Если ДогКонтр.Пустая() и  стрОрг.Организация <> "Яршинторг" Тогда
    сообщить("Документ без договора перевозчика - будет записан, но не проведен!", СтатусСообщения.Важное );
	//Возврат;
	КонецЕсли;
	
//---------------поиск уже сущ. самого "свежего" поступления-------------------
  Запрос = Новый Запрос;
  Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
                 |	ПоступлениеТоваровУслуг.Ссылка
                 |ИЗ
                 |	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
                 |ГДЕ
                 |	ПоступлениеТоваровУслуг.Дата >= &Дата0
              //+++ ВСЕ ФА+     |	И НЕ ПоступлениеТоваровУслуг.Ссылка.ПометкаУдаления
                 |	И ПоступлениеТоваровУслуг.Организация = &Организация
                 |	И ПоступлениеТоваровУслуг.Контрагент = &Контрагент
                 |	И ПоступлениеТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента
                 |	И ПоступлениеТоваровУслуг.Комментарий ПОДОБНО &Комментарий
                 |
                 |УПОРЯДОЧИТЬ ПО
                 |	ПоступлениеТоваровУслуг.Дата УБЫВ
                 |АВТОУПОРЯДОЧИВАНИЕ";
  
  Запрос.УстановитьПараметр("Дата0", НачалоДня(ЭтотОбъект.Дата) );  // поступление не может быть раньше Задания на отгрузку!
  Запрос.УстановитьПараметр("Организация", Орг );  // поступление не может быть раньше Задания на отгрузку!
  Запрос.УстановитьПараметр("Контрагент", Контр );  // поступление не может быть раньше Задания на отгрузку!
  Запрос.УстановитьПараметр("ДоговорКонтрагента", ДогКонтр );  // поступление не может быть раньше Задания на отгрузку!
  Запрос.УстановитьПараметр("Комментарий","%Задание "+ЭтотОбъект.Номер+"%");
  Результат = Запрос.Выполнить();
  Выборка = Результат.Выбрать();
  
  Если  Выборка.Следующий() Тогда
	докСсылка = Выборка.Ссылка; 
	
//----------------------------------------------------------	
		если ( //стрОрг.Организация = "Формула Авто Плюс" или
			  строкиОрг.Количество()>0 ) и докСсылка<>неопределено тогда
	        об =докСсылка.ПолучитьОбъект();
			об.ПометкаУдаления = ЛОЖЬ;
			об.Записать();
			докСсылка = об.ссылка;
		КонецЕсли;
	
	//-----------------БЛОКИРОВКИ по БУ------------------------------------------	
	Если докСсылка.ОтражатьВБухгалтерскомУчете Тогда // уже выгружен в БП ЯШТ
	сообщить(строка(докСсылка)+" уже выгружен в БП ЯШТ, изменять его нельзя!", СтатусСообщения.Внимание);
	Возврат;
	КонецЕсли;
	Док1 = докСсылка.ПолучитьОбъект();
  Иначе
		Док1 = документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
  КонецЕсли;	  
  
//--------------------------------------------------------------------------  
Док1.Организация = орг;
Док1.Контрагент = Контр;
Док1.ДоговорКонтрагента = ДогКонтр;
Док1.Комментарий   = "# Задание "+ЭтотОбъект.Номер+" от "+формат(ЭтотОбъект.Дата,"ДЛФ=DD");

Док1.ОтражатьВУправленческомУчете = Истина;
Док1.ВалютаДокумента = справочники.Валюты.НайтиПоКоду("643");
Док1.КратностьВзаиморасчетов = 1;
Док1.КурсВзаиморасчетов = 1;
Док1.УчитыватьНДС = Истина;
Док1.СуммаВключаетНДС = Истина;

Док1.Подразделение = ЭтотОбъект.Подразделение;

Док1.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
Док1.СкладОрдер = СкладТрУсл;

Док1.Дата = ВремяНапоминания;
Док1.Ответственный = глТекущийПользователь;

Док1.МаркаАвтомобиля =  этотобъект.МаркаАвтомобиля;
Док1.ГосНомерАвтомобиля =  этотобъект.ГосНомерАвтомобиля;
Док1.МаркаПрицепа =  этотобъект.МаркаПрицепа;
Док1.ГосНомерПрицепа = этотобъект.ГосНомерПрицепа;
Док1.Водитель  = Водитель;

//+Лукьяненков 27.11.2017
	Док1.ЗаданиеНаОтгрузку = ЭтотОбъект.Ссылка;
//-Лукьяненков 27.11.2017

Док1.Услуги.Очистить();//полностью очищается!

стр1 = Док1.Услуги.Добавить();
стр1.Номенклатура = НоменклатураТрУсл;
Содержание  = "Транспортные услуги по маршруту Ярославль-"+СокрЛП(ЭтотОбъект.Направление)//+СокрЛП(строка(этотобъект.Контрагент))
		+", а/м "+ СокрЛП(этотобъект.МаркаАвтомобиля)+" "+ СокрЛП(этотобъект.ГосНомерАвтомобиля)
		+", вод. "+ СокрЛП(этотобъект.Водитель)+" от "+формат( этотобъект.Дата,"ДЛФ=D")+"г.";
стр1.Содержание = Содержание;

стр1.Количество = 1; //?(Километров=0,1,Километров);
стр1.Цена   = стрОрг.Сумма; //  / ?(Километров=0,1,Километров);
стр1.Сумма  = стрОрг.Сумма;

Если ДогКонтр.УчетАгентскогоНДС Тогда //+++ 14.05.2015 - Для других перевозчиков!
	Док1.УчитыватьНДС = Истина;
	Док1.НДСВключенВСтоимость = Истина;
	стр1.СтавкаНДС = перечисления.СтавкиНДС.НДС18;
	стр1.СуммаНДС  = окр(стр1.Сумма * 18/118, 2); // до копеек
	сообщить("Сумма НДС  = "+строка(стр1.СуммаНДС)+"р., включена в стоимость услуги "+строка(стр1.Сумма));
Иначе
	Док1.УчитыватьНДС = ЛОЖЬ;
	Док1.НДСВключенВСтоимость = ЛОЖЬ;
	стр1.СтавкаНДС = перечисления.СтавкиНДС.БезНДС;
	стр1.СуммаНДС  = 0;
КонецЕсли;	

стр1.Подразделение = этотобъект.Подразделение;
стр1.СтатьяЗатрат  = СтатьяЗатратТрУсл;

попытка
	Док1.Записать();
	докСсылка = Док1.Ссылка;
    сообщить("Успешно записан документ: "+ строка(докСсылка), СтатусСообщения.Информация );
Исключение
    сообщить("Не Удалось сохранить документ! "+ ОписаниеОшибки(), СтатусСообщения.Внимание );
КонецПопытки;
    

//!!!========================= Распределение  по Номенклатурным Группам =====================!!! 
Если стрОрг.СписокРеализаций.Количество()>0 Тогда
	
	попытка
	
	//+++ 21.05.2015 - по каждой реализации сначала, а потом сумма по ном.группам!	
	ВыполнитьРаспределениеПоНомГруппамПоОбъему(Док1.Услуги, стрОрг.Организация);
	
	//как было раньше - общая сумма распределяется на всех...
//	ВыполнитьРаспределениеПоНомГруппам(Док1.Услуги, стрОрг.СписокРеализаций);

	комм = "Распределение по тов.группам по док-там: ";  //в комментарий
	 //----------Записать связку Поступления и Реализаций!---------------------------------
	//НаборЗаписей = РегистрыСведений.ТранспортныеЗатратыПоРеализациям.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Поступление.Установить(док1.Ссылка);
	//НаборЗаписей.Отбор.Возмещение.Установить(Ложь);
	Для сч=0 по стрОрг.СписокРеализаций.Количество()-1 Цикл
		докРеал = стрОрг.СписокРеализаций[сч].Значение;
			//НоваяЗапись=НаборЗаписей.Добавить();
			НоваяЗапись = РегистрыСведений.ТранспортныеЗатратыПоРеализациям.СоздатьМенеджерЗаписи(); //23.05.2017  - переведен в Упр.режим!
			НоваяЗапись.Поступление= док1.Ссылка;
			НоваяЗапись.Реализация = докРеал;
			НоваяЗапись.Возмещение= Ложь;
			комм = комм + ?(ТипЗнч(докРеал)=Тип("ДокументСсылка.ПеремещениеТоваров"),"п.","")+СокрЛП(докРеал.Номер)+", ";	
			НоваяЗапись.Записать(Истина);
	КонецЦикла;
	//НаборЗаписей.Записать();

	комм = Лев(комм, стрДлина(комм)-2);
	док1.Комментарий = док1.Комментарий +";
	|# "+комм+";
	|# "+Содержание; //  спецальный символ: ~

	
	//+++( 18.05.2015 - сумма перевыставления
	Если  стрОрг.СуммаПеревыставленная>0 Тогда
	 стрУсл = Док1.Услуги.Добавить();
	 номУсл = Справочники.Номенклатура.НайтиПоКоду("ЛН00018",,Справочники.Номенклатура.НайтиПоКоду("ЛН00002")); //Транспортная услуга 44-ТР возмещаемые
	 стрУсл.Номенклатура = номУсл;
	 стрУсл.Содержание   = строка(номУсл);
	 стрУсл.Количество = 1;
	 стрУсл.Цена  = стрОрг.СуммаПеревыставленная;
	 стрУсл.Сумма = стрОрг.СуммаПеревыставленная;
	 стрУсл.СтавкаНДС = перечисления.СтавкиНДС.БезНДС;
	  стрУсл.СуммаНДС = 0;
	  
	  стрУсл.Подразделение = этотобъект.Подразделение;// справочники.Подразделения.НайтиПоКоду("00005"); // Головное
	  стрУсл.СтатьяЗатрат  = справочники.СтатьиЗатрат.ПустаяСсылка(); //+++ 19.04.2015 - НЕ НУЖНО СтатьяЗатратТрУсл;
	КонецЕсли;
 	//+++)

	//+++(20.05.2015
	Если  стрОрг.СуммаПеревыставленнаяНал>0 Тогда
	 стрУсл = Док1.Услуги.Добавить();
	 номУсл = Справочники.Номенклатура.НайтиПоКоду("ЛН00018",,Справочники.Номенклатура.НайтиПоКоду("ЛН00002")); //Транспортная услуга 44-ТР возмещаемые
	 стрУсл.Номенклатура = номУсл;
	 стрУсл.Содержание   = "* "+строка(номУсл);
	 стрУсл.Количество = 1;
	 стрУсл.Цена  = стрОрг.СуммаПеревыставленнаяНал;
	 стрУсл.Сумма = стрОрг.СуммаПеревыставленнаяНал;
	 стрУсл.СтавкаНДС = перечисления.СтавкиНДС.БезНДС;
	  стрУсл.СуммаНДС = 0;
	  
	  стрУсл.Подразделение = этотобъект.Подразделение;// справочники.Подразделения.НайтиПоКоду("00005"); // Головное
	  стрУсл.СтатьяЗатрат  = справочники.СтатьиЗатрат.ПустаяСсылка(); //+++ 19.04.2015 - НЕ НУЖНО СтатьяЗатратТрУсл;
	КонецЕсли;
	//+++)
		
	
		Если док1.ДоговорКонтрагента.Пустая() Тогда
		док1.Записать();
	    сообщить("Успешно записан документ с распределением по тов.группам: "+ строка(докСсылка), СтатусСообщения.Информация );
		Иначе
			
		//----------------------------------------------------------	
		Если //стрОрг.Организация = "Формула Авто Плюс" или 
			строкиОрг.Количество()>0 тогда // также помечается на Удаление!
	      док1.ПометкаУдаления = Истина;
		  док1.Записать();
		Иначе
			док1.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
			
	    сообщить("Успешно проведен документ с распределением по тов.группам: "+ строка(докСсылка), СтатусСообщения.Информация );
		КонецЕсли;	
	Исключение
	    сообщить("Не Удалось распределением по тов.группам и провести документ "+строка(док1)+" Ошибка: "+ ОписаниеОшибки(), СтатусСообщения.Внимание );
	КонецПопытки;
КонецЕсли;


КонецПроцедуры


Функция найтиДогКонтр(Контр, стрФА="")
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	ДоговорыКонтрагентов.Ссылка
	 |ИЗ
	 |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	 |ГДЕ
	 |	ДоговорыКонтрагентов.Владелец = &Владелец
	 |	И ДоговорыКонтрагентов.ТипДоговора = &ТипДоговора 
	 |	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
	 |//стрФА	И ДоговорыКонтрагентов.Наименование ПОДОБНО &Наименование
	 |	И НЕ ДоговорыКонтрагентов.Наименование ПОДОБНО (""%*%"")";
	 
	 Запрос.УстановитьПараметр("Владелец",Контр);
	 Запрос.УстановитьПараметр("ТипДоговора",справочники.ТипыДоговоров.найтиПоКоду("00003"));  //Услуги
	 
	 Если  стрФА<>"" Тогда
		 Запрос.УстановитьПараметр("Наименование","%"+стрФА+"%"); // ФАкторинг нельзя!
		 Запрос.Текст = стрЗаменить(Запрос.Текст ,"//стрФА", "");
	 КонецЕсли;
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Если Выборка.Следующий() Тогда
		 рез = выборка.ссылка;
	 Иначе	 
	 	рез = справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	Возврат рез;
КонецФункции

Функция СоздатьДогКонтр(Контр, стрФА="")
	дог1 = справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	дог1.Наименование = "Договор услуг"+стрФА;
	дог1.Владелец = Контр;
	дог1.Организация = справочники.Организации.НайтиПоКоду("00001");
	дог1.ВидДоговора  = перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	дог1.ТипДоговора  = справочники.ТипыДоговоров.найтиПоКоду("00003"); //Услуги
	
	дог1.ВедениеВзаиморасчетов = перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
 	дог1.ВалютаВзаиморасчетов  = справочники.Валюты.НайтиПоКоду("643");
	дог1.ОтветственноеЛицо     = Контр.ОсновнойМенеджерКонтрагента;
	дог1.Комментарий = "# создан "+ТекущаяДата();	
	попытка
		дог1.ОбменДанными.Загрузка = Истина;
		дог1.Записать();
		дог1.ОбменДанными.Загрузка = ЛОЖЬ;
		сообщить("Создан новый '"+дог1.Наименование+"' по перевозчику: "+строка(Контр), СтатусСообщения.Информация);
		резСсылка = дог1.Ссылка;
	исключение
		сообщить("Ошибка при создании '"+дог1.Наименование+"' по перевозчику: "+строка(Контр)+" Ошибка:"+ОписаниеОшибки(), СтатусСообщения.Внимание);
		резСсылка = справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецПопытки;	

	Возврат резСсылка;
	
КонецФункции	

//+++ 21.05.2015 - новая Функция распределения!
Процедура ВыполнитьРаспределениеПоНомГруппамПоОбъему(ВладелецФормыУслуги, Орг="Яршинторг")
	
	СуммаКРаспределению = ВладелецФормыУслуги.Итог("Сумма");
	КолвоКРаспределению = ВладелецФормыУслуги.Итог("Количество");
	СодержаниеТрУсл = ВладелецФормыУслуги[0].Содержание;
    Если СуммаКРаспределению=0 Тогда
		сообщить("Сумму услуги к распределению равна нулю.");
		Возврат;
	КонецЕсли;	
 
 ВладелецФормыУслуги.Очистить();  //убираем все строки!
 
СтатьяЗатратТрУсл = справочники.СтатьиЗатрат.НайтиПоКоду("К0115"); // Автоуслуги (грузовой транспорт)
НоменклатураТрУсл = Справочники.Номенклатура.НайтиПоКоду("ЛН00039",,Справочники.Номенклатура.НайтиПоКоду("ЛН00001")); //Транспортные услуги 44-1 на затраты
СкладТрУсл 		  = справочники.Склады.НайтиПоКоду("00196"); //Склад услуг
СтавкаНДС		  = перечисления.СтавкиНДС.БезНДС;

//-------------------------------Сокращенная форма-------------------------
табл = информацияПоПроезду.Скопировать();
табл.Свернуть("Заказ", "ДоставкаВЦене, Объём");


//------------пустой объём или ВЦене - Удаляем -----------------------------
i=0; N = табл.Количество();
пока i<N Цикл
	Если табл[i].Объём = 0 или табл[i].ДоставкаВЦене=0 Тогда
		табл.Удалить(i); N=N-1;
	Иначе i=i+1;	
	КонецЕсли;
КонецЦикла;

//------------добавляем реализации-----------------------------
табл.Колонки.Добавить("Реализация");
табл.Колонки.Добавить("Подразделение"); //15.03.2018
Для каждого стр1 из табл Цикл
	Для каждого стр2 из ЗаказыПокупателей Цикл
		Если стр1.заказ = стр2.ЗаказПокупателя Тогда
			стр1.Реализация = стр2.Реализация;
			
			//+++ 01.04.2018 ------- для Яршинторга - по подразделению менеджера ---------------------------------
			стр1.Подразделение = ?(Орг="Формула Авто Плюс", справочники.Подразделения.НайтиПоКоду("00171"),
									?(Орг="Шинтрейд", 	справочники.Подразделения.НайтиПоКоду("00170"), 
										ПолучитьПодразделениеМенеджера(стр2.ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо)  
									));   
			//+++)						
			продолжить;
		КонецЕсли;
	КонецЦикла;
КонецЦикла;

	// Плотников, считаем общее количество АКБ для дальнейшего расчета общего объема ================	
	таблТоварыАКБ = новый ТаблицаЗначений;
	КоличествоАКБ = 0;
	
	Для каждого стр из табл Цикл
		таблТоварыАКБ = стр.Реализация.Товары.Выгрузить(); 
		
		для каждого стр из таблТоварыАКБ Цикл
			Если стр.Номенклатура.ВидТовара = перечисления.ВидыТоваров.АКБ Тогда
				КоличествоАКБ = КоличествоАКБ + стр.Количество;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	//таблТоварыАКБ.Свернуть("Номенклатура", "Количество");
	
	Если КоличествоАКБ > 5 Тогда   //Если меньше 5, то оставляем все как есть 
		ОбъемАКБРасчетный = (Цел((КоличествоАКБ/30))+1)*2; //По два куба на каждые 30 АКБ
		Объем1АКБ         = Окр(ОбъемАКБРасчетный / КоличествоАКБ,6); //Расчетный Объем на 1 Аккум, считать объем АКБ 
	КонецЕсли;                                                 // в каждом заказе будем исходя из данного значения
		
	//================================================================================================

//----------------Отдельная таблица результатов-----------------
таблНомГр = новый ТаблицаЗначений;
таблНомГр.Колонки.Добавить("Подразделение");
таблНомГр.Колонки.Добавить("НоменклатурнаяГруппа");
таблНомГр.Колонки.Добавить("Сумма");
таблНомГр.Колонки.Добавить("Объем");

 //===========ГЛАВНЫЙ ЦИКЛ "в лоб"=====================
 Для каждого стр1 из табл Цикл
	   суммаРаспределенияНаДок1 = стр1.ДоставкаВЦене;
	   Объем1 = стр1.Объём;  //не ноль!
	   
	   //+++ 10.08.2015 - 15.03.2018 
	   // подр = стр1.Реализация.Подразделение;
	   // Если типЗнч(стр1.Реализация)=Тип("ДокументСсылка.ПеремещениеТоваров") тогда
	   //	подр = ?(ЗначениеЗаполнено(стр1.Реализация.СкладПолучатель.Подразделение), стр1.Реализация.СкладПолучатель.Подразделение, стр1.Реализация.Подразделение);
	   // КонецЕсли;
	   подр = стр1.Подразделение; //15.03.2018 +++ это подразделение бюджета по Менеджеру!
	      	   
	   //----------Цикл по реализациям -------------------
	   объемПоДок = 0;
	   номСтр = таблНомГр.Количество();
	   Для каждого стр2 из стр1.реализация.Товары Цикл
		   стр3 = таблНомГр.Добавить();
		   стр3.Подразделение = подр;
		   стр3.НоменклатурнаяГруппа = стр2.Номенклатура.НоменклатурнаяГруппа;
		   
		   	Если ВесМакс>0 и ОбъемМакс>0 
				и стр2.Номенклатура.ВидТовара = перечисления.ВидыТоваров.АКБ Тогда
		//	 стр3.Объем = стр2.Количество * стр2.Номенклатура.ЕдиницаХраненияОстатков.Вес/1000 * ОбъемМакс/ВесМакс;
			 стр3.Объем =  ?(КоличествоАКБ > 5,стр2.Количество * Объем1АКБ,стр2.Вес/1000 * ОбъемМакс/ВесМакс);   //+++23.10.2015
			Иначе		
		   	 стр3.Объем = стр2.Номенклатура.ЕдиницаХраненияОстатков.Объем * стр2.Количество;
			КонецЕсли;
			объемПоДок = объемПоДок+ стр3.Объем; 
		   стр3.Сумма = суммаРаспределенияНаДок1 * стр3.Объем / Объем1;  //без округления!
	   КонецЦикла;
	   
	   Если Окр(объемПоДок,3) <> Объем1 и объемПоДок>0 Тогда // быть такого не может!
		   коэфф = Объем1/объемПоДок;
		   сообщить("По заказу № "+строка(стр1.Заказ.Номер)+" Объем: "+строка(Объем1)+">>"+строка(объемПоДок)
		   +"м3 сумма скорректирова на "+формат(коэфф*100-100,"ЧДЦ=1")+"%");
		   Для ii=номСтр+1-1 по таблНомГр.Количество()-1 Цикл
			 таблНомГр[ii].Сумма =   таблНомГр[ii].Сумма * коэфф;
		   КонецЦикла;	 
	   КонецЕсли;	   
	   
 КонецЦикла;
 //--------------------и только потом суммируем по ном.группам----------------
 таблНомГр.Свернуть("Подразделение,НоменклатурнаяГруппа","Сумма,Объем");  //15.03.2018

   	//номенклатурные группы по Списку выбранных реализаций
	суммаМакс = 0; ii=0; Сумма2 = 0;
	Для каждого стр1 из таблНомГр Цикл
		ТрСумма =  Окр(стр1.Сумма,2);
		//пусть будет... видно, что крепеж или камеры - по 0 сумме
		//Если ТрСумма=0 Тогда 
		//	продолжить;
		//КонецЕсли;	
	стр2 = ВладелецФормыУслуги.Добавить();	 ii=ii+1;

		стр2.Номенклатура = НоменклатураТрУсл;
		стр2.Содержание   = СодержаниеТрУсл;  //НоменклатураТрУсл.НаименованиеПолное;
		стр2.СтатьяЗатрат = СтатьяЗатратТрУсл; //Номенклатура.СтатьяЗатрат;
		
		стр2.Подразделение        = стр1.Подразделение;  //15.03.2018 - подразделение бюджета менеджера!         
		стр2.НоменклатурнаяГруппа = стр1.НоменклатурнаяГруппа;  
		
		стр2.Количество =  1; //+++ 1 шт. 
		стр2.Сумма = ТрСумма;
		стр2.Цена  = ТрСумма; // <>ЦенаСредняя; округляется в большую сторону!
		стр2.СтавкаНДС = СтавкаНДС;
		Сумма2 = Сумма2 + ТрСумма;
		
		//------------определение макс.суммы--------------
		Если ТрСумма>0 и ТрСумма>суммаМакс Тогда
			суммаМакс = ТрСумма;
			номМакс = ii;
		КонецЕсли;
		Если ТрСумма<0 и ТрСумма<-суммаМакс Тогда
			суммаМакс = -ТрСумма;
			номМакс = ii;
		КонецЕсли;
		
	КонецЦикла;
	
	delta =  СуммаКРаспределению - Сумма2;
	Если delta<>0 Тогда
		сообщить("разность "+формат(delta,"ЧДЦ=2")+" р. отнесена на "+строка(номМакс)+" строку ном.группы: "
		+строка(ВладелецФормыУслуги[номМакс-1].НоменклатурнаяГруппа));
		ВладелецФормыУслуги[номМакс-1].Сумма = ВладелецФормыУслуги[номМакс-1].Сумма  + delta;
		ВладелецФормыУслуги[номМакс-1].Цена  = ВладелецФормыУслуги[номМакс-1].Цена   + delta;
	КонецЕсли;
	
КонецПроцедуры
	
//--------Распределение по Ном.Группам-----------------------
//полностью скопировано из Поступления!
Процедура ВыполнитьРаспределениеПоНомГруппам(ВладелецФормыУслуги, список1=Неопределено)	
	
СуммаКРаспределению = ВладелецФормыУслуги.Итог("Сумма");
КолвоКРаспределению = ВладелецФормыУслуги.Итог("Количество");
СодержаниеТрУсл = ВладелецФормыУслуги[0].Содержание;
	Если СуммаКРаспределению=0 Тогда
		сообщить("Сумму услуги к распределению равна нулю.");
		Возврат;
	КонецЕсли;	 
 ВладелецФормыУслуги.Очистить();  //убираем все строки!
 
СтатьяЗатратТрУсл = справочники.СтатьиЗатрат.НайтиПоКоду("К0115"); // Автоуслуги (грузовой транспорт)
НоменклатураТрУсл = Справочники.Номенклатура.НайтиПоКоду("ЛН00039",,Справочники.Номенклатура.НайтиПоКоду("ЛН00001")); //Транспортные услуги 44-1 на затраты
СкладТрУсл 		  = справочники.Склады.НайтиПоКоду("00196"); //Склад услуг
СтавкаНДС		  = перечисления.СтавкиНДС.БезНДС;


	
   	//номенклатурные группы по Списку выбранных реализаций
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	а.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	               |	СУММА(а.Количество) КАК Количество,
	               |	СУММА(а.Сумма) КАК Сумма,
	               |	а.Подразделение КАК Подразделение
	               |ИЗ
	               |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |		РеализацияТоваровУслугТовары.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	               |		СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
	               |		СУММА(РеализацияТоваровУслугТовары.Сумма) КАК Сумма,
	               |		РеализацияТоваровУслугТовары.Ссылка.Подразделение КАК Подразделение
	               |	ИЗ
	               |		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |	ГДЕ
	               |		РеализацияТоваровУслугТовары.Ссылка В (&Список)
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		РеализацияТоваровУслугТовары.Номенклатура.НоменклатурнаяГруппа,
	               |		РеализацияТоваровУслугТовары.Ссылка.Подразделение
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |		ПеремещениеТоваровТовары.Номенклатура.НоменклатурнаяГруппа,
	               |		СУММА(ПеремещениеТоваровТовары.Количество),
	               |		0,
	               |		ПеремещениеТоваровТовары.Ссылка.Подразделение
	               |	ИЗ
	               |		Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	               |	ГДЕ
	               |		ПеремещениеТоваровТовары.Ссылка В(&Список)
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ПеремещениеТоваровТовары.Номенклатура.НоменклатурнаяГруппа,
	               |		ПеремещениеТоваровТовары.Ссылка.Подразделение) КАК а
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	а.Подразделение,
	               |	а.НоменклатурнаяГруппа
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Подразделение,
	               |	НоменклатурнаяГруппа
	               |ИТОГИ
	               |	СУММА(Количество),
	               |	СУММА(Сумма)
	               |ПО
	               |	ОБЩИЕ,
	               |	Подразделение,
	               |	НоменклатурнаяГруппа
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Список", список1);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Выборка.Следующий(); // общие итоги
	
	суммаОбщ = Выборка.Сумма;
	КолОбщ   = Выборка.Количество;
	// сумма = списокРН.Сумма * СуммаКРаспределению / суммаОбщ = списокРН.Сумма * Коэффициент; 
	Коэффициент = ?(суммаОбщ=0, 0, СуммаКРаспределению / суммаОбщ);
	КолвоКРаспределению = ?(КолвоКРаспределению=0, 1, КолвоКРаспределению);
	КоэффициентК = ?(суммаОбщ=0, 0, КолвоКРаспределению / суммаОбщ); 
	// (доля%/100%)  по сумме!  /суммаОбщ  или по кол-ву!  /КолОбщ;
	
	ЦенаСредняя = Окр(СуммаКРаспределению/КолОбщ, 2); //средняя цена Для всех строк - одинаковая
	
	ВыборкаПодразделение = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПодразделение.Следующий() Цикл//+++ сначала по подразделениям
		ВыборкаНомГрупп = ВыборкаПодразделение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаНомГрупп.Следующий() Цикл //+++ потом по каждому подразделению - по ном.группам
			
		стр2 = ВладелецФормыУслуги.Добавить();
		
		стр2.Номенклатура = НоменклатураТрУсл;
		стр2.Содержание   = СодержаниеТрУсл;  //НоменклатураТрУсл.НаименованиеПолное;
		стр2.СтатьяЗатрат = СтатьяЗатратТрУсл; //Номенклатура.СтатьяЗатрат;
		
		стр2.Подразделение = ВыборкаПодразделение.Подразделение;           
		стр2.НоменклатурнаяГруппа = ВыборкаНомГрупп.НоменклатурнаяГруппа;  
		
		стр2.Количество =  КолвоКРаспределению; //+++ 1 шт. 
		стр2.Сумма = Окр(ЦенаСредняя * ВыборкаНомГрупп.Количество/КолвоКРаспределению, 2, 1);
		стр2.Цена  = ?(стр2.Количество=0, стр2.Сумма, Окр(стр2.Сумма / стр2.Количество,2,1) ); // <>ЦенаСредняя; округляется в большую сторону!
		
			
//-------Исправление очень малого количеста или суммы ---------------------------------		
		Если стр2.Количество=0 и стр2.Сумма<>0 Тогда
			сообщить(Строка(стр2.НомерСтроки)+" строка: Установлено Количество=0.001, т.к. Сумма распределения = "+формат(ЦенаСредняя * ВыборкаНомГрупп.сумма * КоэффициентК, "ЧДЦ=2; ЧН=0,00")+" р. Для подразделения:'"+ВыборкаПодразделение.Подразделение+"' по ном.группе:'"+строка(ВыборкаНомГрупп.НоменклатурнаяГруппа)+"'. Цена пересчитана автоматически.", СтатусСообщения.Информация);
			стр2.Количество= 0.001;
			стр2.Цена  = Окр(стр2.Сумма / стр2.Количество, 2, 1); // <>ЦенаСредняя;  
		ИначеЕсли стр2.Сумма=0 Тогда
			сообщить("---> НЕ учитываются затраты по подразделению '"+ВыборкаПодразделение.Подразделение+"' по ном.группе: '"+строка(ВыборкаНомГрупп.НоменклатурнаяГруппа)+"' т.к. Сумма распределения < 0.5 коп.("+формат(ЦенаСредняя * ВыборкаНомГрупп.сумма * КоэффициентК*100, "ЧДЦ=2; ЧН=0,00")+"), Количество="+формат(ВыборкаНомГрупп.сумма * КоэффициентК, "ЧДЦ=3; ЧН=0,000")+" шт.!", СтатусСообщения.Информация);
			//1) удаляем 
			ВладелецФормыУслуги.Удалить(ВладелецФормыУслуги.Количество()-1);//удалим последнюю строку!
			продолжить;
			//2) добавляем "неправильную" сумму
			//стр2.Сумма=0.01;
			//стр2.Цена  = стр2.Сумма / стр2.Количество; // <>ЦенаСредняя; и приближается к нулю!
		КонецЕсли;
		
		//+++ 2 вариант: пересчет Суммы по округленной цене!
		//// стр2.Цена  = ЦенаСредняя;  // Сумма = +- 0.1% от Цены - это может оказаться Очень большая погрешность до нескольких тысяч рублей!!!
	    стр2.Сумма = стр2.Цена * стр2.Количество; 		
	
//-----------------Учет НДС-----------------------------------------------		
			стр2.СтавкаНДС = СтавкаНДС;
			стр2.СуммаНДС  = 0;
		
		КонецЦикла;	//	ВыборкаНомГрупп		
	КонецЦикла;//ВыборкаПодразделение
	
	
//==========Устранение накопившейся погрешности округления  < +- 0.005 р.(+-0.0005 шт.) * N строк  ================================	
	 //максДельта  = ВладелецФормы.Услуги.Количество() * 0.005;   // при 100 строках до 50 коп.
	 //максДельтаК = ВладелецФормы.Услуги.Количество() * 0.0005; // при 100 строках до 50 мГр.
	 
//цена в последней строке может быть не равна средней цене после "выравнивания"
	//------------выравнивание копеек в строке с максимальной суммой... Для минимизации погрешности!----------------------------
	дельта = СуммаКРаспределению - ВладелецФормыУслуги.Итог("Сумма");    
	дельтаК = КолвоКРаспределению*ВладелецФормыУслуги.Количество() - ВладелецФормыУслуги.Итог("Количество"); //+++ 25.01.2012
	
	Если дельта<>0 Тогда
		//стр2 = ВладелецФормы.Услуги[ВладелецФормы.Услуги.Количество()-1];
		
		//определяем максимум в Табл.Части
		ТЗ = ВладелецФормыУслуги.Выгрузить(,"Сумма");
		ТЗ.Сортировать("Сумма убыв");
		максСумма =  ТЗ[0].Сумма;
		//находим по значению
		стр2 = ВладелецФормыУслуги.Найти(максСумма, "Сумма" );
		
		//расшифровка Для "показа" незначительности погрешности
		строка222 = " (с макс.Суммой = "+формат(максСумма,"ЧДЦ=2")+"р.)";
		//проц = дельта*100/максСумма;
		//строка222 = строка222 +?(проц>-21 и проц<-0.04 и проц<21 и проц>0.04, " "+Формат(проц,"ЧДЦ=1; ЧН=0")+"%", ""); //0.1 до 11%
		сообщить("ошибка округления Общей Суммы = "+Формат(дельта, "ЧДЦ=2")+" руб.   Разность добавлена в строку № "+Строка(стр2.НомерСтроки)+строка222+" Цена пересчита автоматически.", СтатусСообщения.Информация);
		
		стр2.Сумма = стр2.Сумма  + дельта;
		стр2.Цена  = ?(стр2.Количество=0, ЦенаСредняя, стр2.Сумма / стр2.Количество); // <>ЦенаСредняя; 
	   	//стр2.Сумма = стр2.Цена * стр2.Количество; // обратный пересчет
		
		//-----------------пересчет НДС-----------------------------------------------		
			стр2.СтавкаНДС = СтавкаНДС;//+++ из формы!!!
			стр2.СуммаНДС = 0;
				
 	КонецЕсли;	
	
	//выравнивание количества в строке с максимальным количеством... Для минимизации погрешности!
	Если дельтаК<>0 Тогда
		//стр2 = ВладелецФормы.Услуги[ВладелецФормы.Услуги.Количество()-1];
		
		//определяем максимум в Табл.Части
		Если дельта=0 Тогда 
			ТЗ = ВладелецФормыУслуги.Выгрузить(,"Количество");
			ТЗ.Сортировать("Количество убыв");
			максКол =  ТЗ[0].Количество;
			стр2 = ВладелецФормыУслуги.Найти(максКол, "Количество" );
		Иначе // Если опреледен максимум Суммы, то в этой же строке и максимум Количества и повторный поиск - не нужен!
			максКол = стр2.Количество;
		КонецЕсли;
	
		//расшифровка Для "показа" незначительности погрешности
		строка222 = " (с макс.Количеством = "+формат(максКол,"ЧДЦ=3")+"шт.)";
		//проц = дельтаК*100/максКол;
		//строка222 = строка222 +?(проц>-21 и проц<-0.04 и проц<21 и проц>0.04, " ("+Формат(проц,"ЧДЦ=1; ЧН=0")+"%)", "");//процент, но не очень большой <11%
		сообщить("ошибка округления Общего Количества = "+Формат(дельтаК, "ЧДЦ=3")+" шт. Разность добавлена в строку № "+Строка(стр2.НомерСтроки)+строка222+"    Цена пересчита автоматически.", СтатусСообщения.Информация);
	 	
		стр2.Количество = стр2.Количество  + дельтаК;
		стр2.Цена  = ?(стр2.Количество=0, ЦенаСредняя, стр2.Сумма / стр2.Количество); // <>ЦенаСредняя; 
		//стр2.Сумма = стр2.Цена * стр2.Количество; // обратный пересчет
	КонецЕсли;

  	
	//дописываем строки не на затраты
	//Для Каждого СтрТЗ из ТабУслугиНеНаЗатраты Цикл
	//	стр2 = ВладелецФормыУслуги.Добавить();
	//	ЗаполнитьЗначенияСвойств(стр2,СтрТЗ);
	//КонецЦикла;	
		
КонецПроцедуры

Процедура КоманднаяПанель2Обновить(Кнопка)
	
	//---------------поиск уже сущ. самого "свежего" поступления-------------------
  Запрос = Новый Запрос;
  Запрос.Текст = "ВЫБРАТЬ
                 |	ВЫБОР
                 |		КОГДА ПоступлениеТоваровУслуг.Ссылка.ДоговорКонтрагента.Наименование ПОДОБНО ""% ФА%""
              	 |	И НЕ ПоступлениеТоваровУслуг.Ссылка.ДоговорКонтрагента.Наименование ПОДОБНО ""% факторинг%""
				 |	И НЕ ПоступлениеТоваровУслуг.Ссылка.ДоговорКонтрагента.Наименование ПОДОБНО ""% ФА+%""
				 |			ТОГДА ""Формула Авто""
				  |		КОГДА ПоступлениеТоваровУслуг.Ссылка.ДоговорКонтрагента.Наименование ПОДОБНО ""% ФА+%""
                 |			ТОГДА ""Формула Авто Плюс""
                  |		КОГДА ПоступлениеТоваровУслуг.Ссылка.ДоговорКонтрагента.Наименование ПОДОБНО ""% ШТ%""
                 |			ТОГДА ""Шинтрейд""
				 |";
				 
				 //+++ 31.07.2015
				 для i=0 по ТаблОрг.Количество()-1 цикл				 
					  Запрос.Текст =  Запрос.Текст 
					  +"КОГДА ПоступлениеТоваровУслуг.Ссылка.ДоговорКонтрагента.Наименование ПОДОБНО ""% "
					  +таблОрг[i].НаименованиеКраткое+"%""
				 |			ТОГДА """+таблОрг[i].Организация+"""
				 |"; КонецЦикла;
				 
                 Запрос.Текст =  Запрос.Текст 
					  +"	ИНАЧЕ ""Яршинторг""
                 |	КОНЕЦ КАК Организация,
                 |	СУММА(ВЫБОР
                 |			КОГДА ПоступлениеТоваровУслуг.Номенклатура = &Усл1
                 |				ТОГДА ПоступлениеТоваровУслуг.Сумма
                 |			ИНАЧЕ 0
                 |		КОНЕЦ) КАК Сумма,
                 |	СУММА(ВЫБОР
                 |			КОГДА ПоступлениеТоваровУслуг.Номенклатура <> &Усл1
                 |				ТОГДА ПоступлениеТоваровУслуг.Сумма
                 |			ИНАЧЕ 0
                 |		КОНЕЦ) КАК СуммаПеревыставленная,
                 |	ПоступлениеТоваровУслуг.Ссылка КАК Счет,
                 |	ПоступлениеТоваровУслуг.Ссылка.НомерВходящегоДокумента КАК НомерВхДок,
                 |	&ПустойСписок КАК СписокРеализаций,
				 |	&ПустойСписок КАК СчетаПеревыставленные
                 |ИЗ
                 |	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслуг
                 |ГДЕ
                 |	ПоступлениеТоваровУслуг.Ссылка.Дата >= &Дата0
                //+++ ВСЕ ФА+  |	И НЕ ПоступлениеТоваровУслуг.Ссылка.ПометкаУдаления
                 |	И ПоступлениеТоваровУслуг.Ссылка.Комментарий ПОДОБНО &Комментарий
                 |
                 |СГРУППИРОВАТЬ ПО
                   |	ВЫБОР
                 |		КОГДА ПоступлениеТоваровУслуг.Ссылка.ДоговорКонтрагента.Наименование ПОДОБНО ""% ФА%""
              	 |	И НЕ ПоступлениеТоваровУслуг.Ссылка.ДоговорКонтрагента.Наименование ПОДОБНО ""% факторинг%""
				 |	И НЕ ПоступлениеТоваровУслуг.Ссылка.ДоговорКонтрагента.Наименование ПОДОБНО ""% ФА+%""
				 |			ТОГДА ""Формула Авто""
				  |		КОГДА ПоступлениеТоваровУслуг.Ссылка.ДоговорКонтрагента.Наименование ПОДОБНО ""% ФА+%""
                 |			ТОГДА ""Формула Авто Плюс""
				    |		КОГДА ПоступлениеТоваровУслуг.Ссылка.ДоговорКонтрагента.Наименование ПОДОБНО ""% ШТ%""
                 |			ТОГДА ""Шинтрейд""
				 |";
				 //+++ 31.07.2015 -----------------------------------
				 для i=0 по ТаблОрг.Количество()-1 цикл				 
					  Запрос.Текст =  Запрос.Текст 
					  +"КОГДА ПоступлениеТоваровУслуг.Ссылка.ДоговорКонтрагента.Наименование ПОДОБНО ""% "
					  +таблОрг[i].НаименованиеКраткое+"%""
				 |			ТОГДА """+таблОрг[i].Организация+"""
				 |"; КонецЦикла;
				 Запрос.Текст =  Запрос.Текст 
					  +"
                 |		ИНАЧЕ ""Яршинторг""
                 |	КОНЕЦ,
                 |	ПоступлениеТоваровУслуг.Ссылка,
                 |	ПоступлениеТоваровУслуг.Ссылка.НомерВходящегоДокумента
                 |
                 |УПОРЯДОЧИТЬ ПО
                 |	ПоступлениеТоваровУслуг.Ссылка.Дата УБЫВ
                 |АВТОУПОРЯДОЧИВАНИЕ";
  
//Транспортные услуги 44-1 на затраты
 НоменклатураТрУсл = Справочники.Номенклатура.НайтиПоКоду("ЛН00039",,Справочники.Номенклатура.НайтиПоКоду("ЛН00001")); 
 Запрос.УстановитьПараметр("Усл1", НоменклатураТрУсл );  
 
 Запрос.УстановитьПараметр("Дата0", НачалоДня(ЭтотОбъект.Дата) );  // поступление не может быть раньше Задания на отгрузку!
  ПустойСписок = Неопределено;
  Запрос.УстановитьПараметр("ПустойСписок", ПустойСписок  );
  //Запрос.УстановитьПараметр("Организация", Орг );  // поступление не может быть раньше Задания на отгрузку!
  //Запрос.УстановитьПараметр("Контрагент", Контр );  // поступление не может быть раньше Задания на отгрузку!
  //Запрос.УстановитьПараметр("ДоговорКонтрагента", ДогКонтр );  // поступление не может быть раньше Задания на отгрузку!
  Запрос.УстановитьПараметр("Комментарий","%Задание "+ЭтотОбъект.Номер+"%");
  Результат = Запрос.Выполнить();
 суммаОрг = Результат.Выгрузить();

//-----------------------------------------------
табл = ИнформацияПоПроезду.Скопировать();
	табл.Свернуть("Контрагент, Организация", "ДоставкаБНал, ДоставкаНал");
	суммаОрг.Колонки.Добавить("ПКОПолучено");//+++ 26.05.2015
 	Для каждого стр1 из  суммаОрг Цикл
		стр1.СчетаПеревыставленные = новый СписокЗначений;
		стр1.ПКОПолучено  =	 новый СписокЗначений;
		
		//Цикл по клиентам
		Для каждого стр2 из табл Цикл
			
			Если стр2.Организация = стр1.Организация Тогда
				
				Если стр2.ДоставкаБНал>0 Тогда
					док1 = ВыставитьСчетНалБНал(стр2.Контрагент, стр2.ДоставкаБНал, стр2.Организация, ЛОЖЬ, ИСТИНА);
					Если док1<>Неопределено Тогда
						стр1.СчетаПеревыставленные.Добавить(док1);
					КонецЕсли;
				КонецЕсли;
				
				//+++ Наличка!
				Если стр2.ДоставкаНал>0 Тогда
					док2 = ВыставитьСчетНалБНал(стр2.Контрагент, стр2.ДоставкаНал, стр2.Организация, Истина, ИСТИНА);
					Если док2<>Неопределено Тогда
						стр1.СчетаПеревыставленные.Добавить(док2);
						
						докПКО = НайтиПКО(док2.Контрагент, док2);
                        стр1.ПКОПолучено.Добавить(докПКО);
					КонецЕсли;
               	КонецЕсли;
			
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	//+++ ищем ВСЕ и перезаполняем табл. обратки
	табл = НайтиПоступлениеДопРасходов();
	ТаблОбратки.Очистить();
	Если табл.Количество()>0 Тогда
		Для i=0 по табл.Количество()-1 Цикл
			стр1 = ТаблОбратки.Добавить();
			ЗаполнитьЗначенияСвойств(стр1, табл[i]);
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры







//==============================На клиентов===============================

//-----------------ВЫСТАВЛЕНИЕ СЧЕТОВ КЛИЕНТАМ и ОТ ПЕРЕВОЗЧИКОВ-------------------
//
процедура ПеревыставитьСчетаКлиентамНалБНал()
	
	табл = ИнформацияПоПроезду.Скопировать();
	табл.Свернуть("Контрагент, Организация", "ДоставкаНал, ДоставкаБНал");
	
	Для каждого стр1 из суммаОрг Цикл
		Если стр1.СуммаПеревыставленная>0 Тогда
			
			//Если стр1.Организация="Формула Авто Плюс" Тогда
			//	сообщить("Перевыставления на ФА+ не производится!");
			//	продолжить;
			//КонецЕсли;	
			
			Для i=0 по ТаблОрг.Количество()-1 цикл
				Если стр1.Организация=ТаблОрг[i].Организация тогда
					сообщить("Перевыставления на "+строка(ТаблОрг[i].Организация)+" не производится!");
					продолжить;
				КонецЕсли;	
			КонецЦикла;
			
			стр1.СчетаПеревыставленные = новый СписокЗначений;
			стр1.ПКОПолучено = новый СписокЗначений;
			//Цикл по клиентам
			Для каждого стр2 из табл Цикл
				Если стр2.Организация = стр1.Организация Тогда
					
					Если стр2.ДоставкаБНал>0 Тогда
					док1 = ВыставитьСчетНалБНал(стр2.Контрагент, стр2.ДоставкаБНал, стр2.Организация);
					стр1.СчетаПеревыставленные.Добавить(док1);
					КонецЕсли;
				
					Если стр2.ДоставкаНал>0 Тогда//+++ 19.04.2015 и нал тоже!
					док2 = ВыставитьСчетНалБНал(стр2.Контрагент, стр2.ДоставкаНал, стр2.Организация, ИСТИНА);
					стр1.СчетаПеревыставленные.Добавить(док2);
					
				//+++ Наличка сразу ищем Если он уже есть!
					докПКО = НайтиПКО(док2.Контрагент, док2);
                    стр1.ПКОПолучено.Добавить(докПКО);

					КонецЕсли;
				
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

//+++ только ЯШТ , ФА, ФА+ и ШТ
Функция ВыставитьСчетНалБНал(Контрагент1, Сумма1, Орг1="", ДоговорНал=ЛОЖЬ, ТОЛЬКОПОИСК=ЛОЖЬ)
	
	рез0 = документы.РеализацияТоваровУслуг.ПустаяСсылка(); 
	ном = справочники.Номенклатура.НайтиПоНаименованию("Транспортная услуга 44-ТР возмещаемые");  //Транспортная услуга 44-ТР возмещаемые
	
	//+++ поиск уже сущ.док или создание нового!
	//стрОрг = таблОрг.найти(Орг1, "Организация");
	//если стрОрг = неопределено тогда
		назв = ?(Орг1="Формула Авто", "ФА",?(Орг1="Формула Авто Плюс","ФА+",?(Орг1="Шинтрейд", "ШТ","")));
	//Иначе	
	//	назв = стрОрг.НаименованиеКраткое;
	//КонецЕсли;
	
	резСсылка = найтиРеализациюТрУсл(Контрагент1, Сумма1, ном, ДоговорНал, Назв);
	Если ТОЛЬКОПОИСК Тогда
		Возврат резСсылка;
	КонецЕсли;
	
	Если резСсылка = Неопределено Тогда
		рез = документы.РеализацияТоваровУслуг.СоздатьДокумент();
	Иначе
		//-----------------БЛОКИРОВКИ по БУ------------------------------------------	
		Если резСсылка.ОтражатьВБухгалтерскомУчете Тогда // уже выгружен в БП ЯШТ
			сообщить(строка(резСсылка)+" уже выгружен в БП ЯШТ, изменять его нельзя!", СтатусСообщения.Внимание);
			Возврат резСсылка;
		КонецЕсли;
	
		рез = резСсылка.ПолучитьОбъект();
		рез.Услуги.Очистить();
	КонецЕсли;	
	рез.ВидОперации   = перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	рез.Дата          = ЭтотОбъект.ВремяНапоминания;
	рез.Организация   = справочники.Организации.НайтиПоКоду("00001");//ЯШТ всегда
	рез.ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
	рез.Склад         = справочники.Склады.НайтиПоНаименованию("1");
	рез.Подразделение = справочники.Подразделения.НайтиПоКоду("00005"); //10.06.2015 - ВСЕГДА?! 
	//рез.Подразделение = ЭтотОбъект.подразделение;
	
	рез.ОтражатьВУправленческомУчете = Истина;
	рез.ВалютаДокумента = справочники.Валюты.НайтиПоКоду("643");
	рез.КурсВзаиморасчетов      = 1;
	рез.КратностьВзаиморасчетов = 1;
	рез.УчитыватьНДС     = Истина;
	рез.СуммаВключаетНДС = Истина;
	//рез.Ответственный = заказ.ДоговорКонтрагента.ОтветственноеЛицо;
	
	рез.Контрагент = Контрагент1;
	
	стр1 = рез.Услуги.Добавить();
	стр1.Номенклатура = ном; 
	стр1.Содержание = "Возмещение транспортных услуг от "+формат( этотобъект.Дата,"ДЛФ=D")+"г.";

	рез.Комментарий  = стр1.Содержание+"
	|# Задание "+ЭтотОбъект.Номер;
	
	
	стр1.Количество = 1;
	стр1.Цена  = сумма1; 
	стр1.Сумма = сумма1;
	стр1.СтавкаНДС   = перечисления.СтавкиНДС.БезНДС;
	
	//--------определение договора, Если его нет - создание нового! по каждому менеджеру!------------
	назвДог = "";
	Если ДоговорНал Тогда	

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец = &Владелец
		|	И ДоговорыКонтрагентов.ТипДоговора = &типДоговора
		|	И ДоговорыКонтрагентов.Наименование ПОДОБНО ""%*%""";

	Запрос.УстановитьПараметр("Владелец", Контрагент1);
	Запрос.УстановитьПараметр("типДоговора", ?(Орг1="Формула Авто Плюс",Справочники.ТипыДоговоров.ФормулаАвтоПлюс,
													?(Орг1="Шинтрейд",Справочники.ТипыДоговоров.ШинтрейдЯрославль,
														Справочники.ТипыДоговоров.ВозмещаемыеУслуги)));

	Результат = Запрос.Выполнить().Выгрузить();
    Если Результат.Количество() > 0 Тогда
		резДоговорКонтрагента = Результат[0].ссылка;
	КонецЕсли;
		//назвДог = "Договор возмещения услуг"+?(Орг1="Формула Авто"," ФА",
		//															?(Орг1="Формула Авто Плюс"," ФА+",
		//																?(Орг1="Шинтрейд"," ШТ",
		//																"")));

		//резДоговорКонтрагента = справочники.ДоговорыКонтрагентов.НайтиПоНаименованию(назвДог ,,, Контрагент1);

	Иначе // Бнал
												
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец = &Владелец
		|	И ДоговорыКонтрагентов.ТипДоговора = &типДоговора
		|	И не ДоговорыКонтрагентов.Наименование ПОДОБНО ""%*%""";

	Запрос.УстановитьПараметр("Владелец", Контрагент1);
	Запрос.УстановитьПараметр("типДоговора", ?(Орг1="Формула Авто Плюс",Справочники.ТипыДоговоров.ФормулаАвтоПлюс,
													?(Орг1="Шинтрейд",Справочники.ТипыДоговоров.ШинтрейдЯрославль,
														Справочники.ТипыДоговоров.ВозмещаемыеУслуги)));

	Результат = Запрос.Выполнить().Выгрузить();
    Если Результат.Количество() > 0 Тогда
		резДоговорКонтрагента = Результат[0].ссылка;
	КонецЕсли;

		//назвДог = "Договор возмещения услуг"+?(Орг1="Формула Авто"," ФА",
		//															?(Орг1="Формула Авто Плюс"," ФА+",
		//																?(Орг1="Шинтрейд"," ШТ",
		//																"")));
		//резДоговорКонтрагента = справочники.ДоговорыКонтрагентов.НайтиПоНаименованию(назвДог ,,, Контрагент1);
	КонецЕсли;
	
	//+++ 19.05.2015 - автосоздание нужного договора
	Если резДоговорКонтрагента.Пустая() Тогда
		дог1 = справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		дог1.Наименование = назвДог;
		дог1.Владелец = Контрагент1;
		дог1.Организация = справочники.Организации.НайтиПоКоду("00001");//ЯШТ всегда
		дог1.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;  //в общую дебиторку
		дог1.ТипДоговора = ?(Орг1="Формула Авто",Справочники.ТипыДоговоров.найтиПоКоду("Я0004"), 
								?(Орг1="Формула Авто Плюс",Справочники.ТипыДоговоров.ФормулаАвтоПлюс, 
									?(Орг1="Шинтрейд",Справочники.ТипыДоговоров.ШинтрейдЯрославль, 
										Справочники.ТипыДоговоров.ВозмещаемыеУслуги
										   ))
										);
		
		дог1.ВедениеВзаиморасчетов = перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
 		дог1.ВалютаВзаиморасчетов  = справочники.Валюты.НайтиПоКоду("643");
		дог1.ОтветственноеЛицо     = Контрагент1.ОсновнойМенеджерКонтрагента;
		
		дог1.Комментарий = "# создан "+ТекущаяДата();	
	
		попытка
			дог1.ОбменДанными.Загрузка = Истина;
			дог1.Записать();
			дог1.ОбменДанными.Загрузка = ЛОЖЬ;
		сообщить("Создан '"+назвДог+"' у контрагента: "+строка(Контрагент1)
		+" на осн.менеджера: "+строка(Контрагент1.ОсновнойМенеджерКонтрагента), СтатусСообщения.Информация);
		
		резДоговорКонтрагента = дог1.Ссылка;
		
		исключение
		сообщить("Ошибка при создании договора '"+назвДог+"' у контрагента: "+строка(Контрагент1)
		+" на осн.менеджера: "+строка(Контрагент1.ОсновнойМенеджерКонтрагента)+" Ошибка:"+ОписаниеОшибки(), СтатусСообщения.Внимание);
		КонецПопытки;
	КонецЕсли;
	
	
	рез.ДоговорКонтрагента = резДоговорКонтрагента;
	
	
	попытка 
		Если резСсылка = Неопределено Тогда //+++ 01.06.2015
			Если найти(резДоговорКонтрагента.Наименование,"*") > 0 тогда  //18.01.2016
			  рез.УстановитьНовыйНомер("УН");
		    иначе
  			   рез.УстановитьНовыйНомер("У0"); //22.01.2015 
            КонецЕсли;
	    КонецЕсли;
	  
		Если резДоговорКонтрагента.Пустая() Тогда
			сообщить("Не найден '"+назвДог+"' у контрагента: "+строка(Контрагент1), СтатусСообщения.Внимание);
			рез.Записать();
		Иначе	
			//+++ Счет для АЭ, Формулы и Корп.Волга -  в ЯШТ помечены на удаление!!!!
			Если ТаблОрг.Найти(Орг1,"Организация")<>неопределено тогда 
			рез.ПометкаУдаления = Истина;
			рез.Записать();
			Иначе
			рез.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			сообщить("Перевыставлен счет по транспортным затратам на покупателя: "+строка(рез.Контрагент)+" - "+строка(рез.Ссылка), СтатусСообщения.Информация);
		КонецЕсли;
		рез0 = рез.Ссылка;
	исключение 
		рез.Записать();
		рез0 = рез.Ссылка;
		сообщить("Не удалось провести документ "+строка(рез.ссылка)+": "+ОписаниеОшибки(), СтатусСообщения.Внимание);
	КонецПопытки;	
	
	Возврат рез0;
	
КонецФункции

//поиск по названию договора - стрФА="" - яршинторг
//иначе  стрФА= ФА, ФА+, ШТ 
//  на таблОрг - НЕ делается перевыставления счетов(реализаций)!!! Fa, АЭ, KV
Функция найтиРеализациюТрУсл(Контрагент1, Сумма1=0, ном1, ДогНал=ЛОЖЬ, стрФА="")
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	РеализацияТоваровУслугУслуги.Ссылка
	 |ИЗ
	 |	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	 |ГДЕ
	 |	РеализацияТоваровУслугУслуги.Ссылка.Контрагент = &Контрагент
	 | И "+?(НЕ ДогНал, "НЕ ","")+"РеализацияТоваровУслугУслуги.Ссылка.ДоговорКонтрагента.Наименование подобно (""%*%"")
	 
	 | И "+?(стрФА="", "НЕ ","")+"( РеализацияТоваровУслугУслуги.Ссылка.ДоговорКонтрагента.Наименование подобно (""%ФА%"")
	 | И "+?(найти(стрФА,"+")=0, "НЕ","")+" РеализацияТоваровУслугУслуги.Ссылка.ДоговорКонтрагента.Наименование ПОДОБНО (""%ФА+%"") 
	 | "+?(стрФА="", ""," И РеализацияТоваровУслугУслуги.Ссылка.ДоговорКонтрагента.Наименование ПОДОБНО (""%"+стрФА+"%"")")+" 
 	 |	И НЕ РеализацияТоваровУслугУслуги.Ссылка.ДоговорКонтрагента.Наименование ПОДОБНО ""% факторинг%"" )
			
	 |	И РеализацияТоваровУслугУслуги.Номенклатура = &Номенклатура
	 |	И РеализацияТоваровУслугУслуги.Ссылка.Комментарий ПОДОБНО (&Задание)
	 |	И РеализацияТоваровУслугУслуги.Ссылка.Дата>&ДатаНач
//---------------------пометки на удаление только у ТаблОрг...------------------------------------------	 
	 |  И НЕ РеализацияТоваровУслугУслуги.Ссылка.ПометкаУдаления
	 
	 |";
	 
	 Запрос.УстановитьПараметр("Контрагент", Контрагент1);
	// Запрос.УстановитьПараметр("Сумма", Сумма1);
	 Запрос.УстановитьПараметр("Номенклатура", ном1);
	 Запрос.УстановитьПараметр("Задание","%Задание "+СокрЛП(ЭтотОбъект.Номер)+"%");
	 Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ЭтотОбъект.дата) - 31*86400);     
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Если Выборка.Следующий() Тогда
		 рез = выборка.ссылка;
	 Иначе
		 рез = Неопределено;
	 КонецЕсли;
	 
	 Возврат рез;
	 
КонецФункции


Процедура суммаОргПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
		инд= 3;
		Если Не ЗначениеНеЗаполнено(ДанныеСтроки.Счет) Тогда
			ОформлениеСтроки.Ячейки.КартинкаПоступления.ОтображатьКартинку = Истина;
			Если ДанныеСтроки.Счет.пометкаУдаления Тогда
				инд = 1;
			ИначеЕсли ДанныеСтроки.Счет.проведен Тогда
				инд = 0;
			ИначеЕсли НЕ ДанныеСтроки.Счет.проведен Тогда
				инд = 2;
			КонецЕсли;	
		КонецЕсли;	
		ОформлениеСтроки.Ячейки.КартинкаПоступления.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.КартинкаПоступления.ИндексКартинки = инд;

КонецПроцедуры


процедура ВыгрузитьТранспортИОбраткиВПутевойЛист(номПутЛист="")
	
	//Если ТаблОбратки.Количество()=0 Тогда
	//	#Если Клиент Тогда
	//	сообщить("Нет документов Для выгрузки ""обраток""", СтатусСообщения.Внимание);
	//	#КонецЕсли
	//	Возврат;
	//КонецЕсли;
	Если номПутЛист="" тогда
		#Если Клиент Тогда
		сообщить("Нет номера путевого листа Для выгрузки ""обраток""", СтатусСообщения.Внимание);
		#КонецЕсли
	    Возврат;
	КонецЕсли;
	
	//-------------Подключение----------------
	Если Соединение = Неопределено Тогда
		КоманднаяПанель2Подключиться(Неопределено);
	  	Если Соединение = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	//---------------------определение реквизитов--------------------------------	
	//---------------------определение реквизитов--------------------------------	
ЭтоБПЗем = Ложь;
ЭтоБПВор = Ложь;
ЭтоБПМал = Ложь;
ЭтоБПКорпВолга = Ложь;
	
	
	Если Найти(Перевозчик,"Землянский")>0  Тогда
	ЭтоБПЗем = Истина;
ИначеЕсли Найти(Перевозчик,"Воробьев")>0  Тогда
	ЭтоБПВор = Истина;
ИначеЕсли Найти(Перевозчик,"Малышев")>0  Тогда
	ЭтоБПМал = Истина;
ИначеЕсли Найти(Перевозчик,"Корпорация Волга")>0  Тогда
	ЭтоБПКорпВолга = Истина;	
	Иначе
		#Если Клиент Тогда
		Сообщить("Выгружать документы в Бухгалтерию Перевозчика - можно только по 4м перевозчикам!",СтатусСообщения.Внимание);
		#КонецЕсли
	    Возврат;
	КонецЕсли;
	
 //----------------------------------------------------------------------------------
  путЛистCOM = соединение.Документы.ПутевойЛист.НайтиПоНомеру(номПутЛист, Дата);
  Если путЛистCOM.ссылка.Номер = "" тогда
  	#Если Клиент Тогда
	Сообщить("Не найден путевой лист № "+номПутЛист, СтатусСообщения.Внимание);
	#КонецЕсли
	Возврат;
  иначе
	путЛист = путЛистCOM.ссылка.ПолучитьОбъект();
  КонецЕсли;

//-------------------------------------------------------------------------------------
//путЛист.Реализации.Очистить();
//для каждого стрОбр из суммаОрг цикл
//стр1 = путЛист.Реализации.Добавить();
//стр1.Дата   = ВремяНапоминания;
//стр1.Направление    = стрОбр.Организация+": "+Направление;
//если ДокументыСданыЛогистам тогда
//	стр1.НомерДокумента = стрОбр.НомерВхДок;
//иначе
//	стр1.НомерДокумента = "З/О: "+Номер;
//КонецЕсли;	
//стр1.Сумма  = стрОбр.Сумма;
//стр1.Пробег = Километров;
//КонецЦикла;

//для каждого стрОбр из ТаблОбратки цикл
//стр1 = путЛист.Реализации.Добавить();
//стр1.Дата   		= ВремяНапоминания;
//стр1.Направление    = стрОбр.Счет.Маршрут;  //28.01.2016
//если ДокументыСданыЛогистам тогда
//	Если ЭтоБПМал Тогда
//	стр1.НомерДокумента = "МЕИ"+ формат(число(стрОбр.НомерВхДок), "ЧЦ=8; ЧВН=; ЧГ=0");  //МЕИ00002819
//	иначе	
//	стр1.НомерДокумента = ?(ЭтоБПЗем,"00","ВА")+ формат(число(стрОбр.НомерВхДок), "ЧЦ=9; ЧВН=; ЧГ=0");  //00000002819 или ВА000002819
//	конецЕсли;
//иначе
//	стр1.НомерДокумента = "Зо:"+Номер;
//КонецЕсли;	
//стр1.Сумма  = стрОбр.Сумма;
//стр1.Пробег = Километров;
//КонецЦикла;

//путЛист.Объем = ЭтотОбъект.ИтогОбъем; // 28.01.2016

путЛист.ДатаВыгрузкиПрямогоРейса = ЭтотОбъект.ДатаВыгрузкиПрямогоРейса;    //Плотников
путЛист.ДатаВозвращения = ЭтотОбъект.ДатаВозвращения;
путЛист.ДатаОтправления = ЭтотОбъект.ВремяНапоминания;
попытка
	путЛист.Записать();
	сообщить("Данные записаны в Путевой лист "+НомерПутевогоЛиста, СтатусСообщения.Информация);
исключение
	сообщить("Ошибка записи в Путевой лист "+НомерПутевогоЛиста+":"+ОписаниеОшибки(), СтатусСообщения.Внимание);
КонецПопытки;

КонецПроцедуры// выгрузка в путевой лист	


//===========================выгрузка=============================================
Процедура КоманднаяПанель2ВыгрузитьВБП(Кнопка) Экспорт

//-------------Подключение----------------
Если Соединение = Неопределено Тогда
	КоманднаяПанель2Подключиться(Неопределено);
  	Если Соединение = Неопределено Тогда
		Возврат;
	КонецЕсли;
КонецЕсли;

//---------------------определение реквизитов--------------------------------	
ЭтоБПЗем = Ложь;
ЭтоБПВор = Ложь;
ЭтоБПМал = Ложь;
ЭтоБПКорпВолга = Ложь;
	
	
Если Найти(Перевозчик,"Землянский")>0  Тогда
	ЭтоБПЗем = Истина;
	
//+++ 02-09.06.2017 - НЕ выгружаем документы по Землянскому (задача № 27684)	
	//#Если Клиент Тогда
	//Сообщить("Выгрузка документов по ИП Землянский в БП Землянский-Воробьев - выключено!",СтатусСообщения.Внимание);
	//#КонецЕсли
	//Возврат;
	
ИначеЕсли Найти(Перевозчик,"Воробьев")>0  Тогда
	ЭтоБПВор = Истина;
	
//+++ 02.06.2017 - НЕ выгружаем документы по Землянскому  (задача № 27683)	
	#Если Клиент Тогда
	Сообщить("Выгрузка документов по ИП Воробьев в БП Землянский-Воробьев - выключено!",СтатусСообщения.Внимание);
	#КонецЕсли
    Возврат;
	
ИначеЕсли Найти(Перевозчик,"Малышев")>0  Тогда
	ЭтоБПМал = Истина;
ИначеЕсли Найти(Перевозчик,"Корпорация Волга")>0  Тогда
	ЭтоБПКорпВолга = Истина;
Иначе
	#Если Клиент Тогда
	Сообщить("Выгружать документы в БП можно только по 4м перевозчикам!",СтатусСообщения.Внимание);
	#КонецЕсли
    Возврат;
КонецЕсли;

// 11.12.2015 -17.12.2015 - только в путевой лист !!!!
Если не ДокументыСданыЛогистам тогда
	ВыгрузитьТранспортИОбраткиВПутевойЛист(НомерПутевогоЛиста);
	возврат;
КонецЕсли;

  //=================================общие реквизиты Для всех документов======================================
	
//контрагент и его договор	
    КонтрТр  = соединение.справочники.Контрагенты.НайтиПоКоду("000000003");   //ЯШТ
	
//+++ с 31.08.2015 - единые контрагенты и склад (как было в Землянском)!	
	КонтрФА  = соединение.справочники.Контрагенты.НайтиПоКоду("000000079"); //ФА   - Уже нет!
	КонтрФАп = соединение.справочники.Контрагенты.НайтиПоКоду("000000065"); //ФА+
	КонтрШТп = соединение.справочники.Контрагенты.НайтиПоКоду("93646    "); //ШТ
    СкладТр  = соединение.справочники.Склады.НайтиПоКоду("000000005");

	Если ЭтоБПЗем Тогда
      ОргТр    = соединение.справочники.Организации.найтиПоКоду("000000002");
		ДогКонтрТр  = Соединение.справочники.ДоговорыКонтрагентов.НайтиПоКоду("000000098",,,КонтрТр); //КонтрТр.ОсновнойДоговорКонтрагента;
		ДогКонтрФА  = КонтрФА.ОсновнойДоговорКонтрагента;
		ДогКонтрФАп = КонтрФАп.ОсновнойДоговорКонтрагента;
		ДогКонтрШТп = КонтрШТп.ОсновнойДоговорКонтрагента;
	ИначеЕсли ЭтоБПВор Тогда //Воробьев БП
      ОргТр    = соединение.справочники.Организации.найтиПоКоду("000000001");
	  //явно указываются - другие договоры
		ДогКонтрТр  = Соединение.справочники.ДоговорыКонтрагентов.НайтиПоКоду("000000001",,,КонтрТр);
		ДогКонтрФА  = Соединение.справочники.ДоговорыКонтрагентов.НайтиПоКоду("000000002",,,КонтрФА);
		ДогКонтрФАп = Соединение.справочники.ДоговорыКонтрагентов.НайтиПоКоду("000000003",,,КонтрФАп);
		ДогКонтрШТп = Соединение.справочники.ДоговорыКонтрагентов.НайтиПоКоду("000000108",,,КонтрШТп);
	ИначеЕсли ЭтоБПМал Тогда //Малышев БП
      ОргТр    = соединение.справочники.Организации.найтиПоКоду("00013");
	  //явно указываются - другие договоры
		ДогКонтрТр  = Соединение.справочники.ДоговорыКонтрагентов.НайтиПоКоду("000000867",,,КонтрТр);
		ДогКонтрФА  = Соединение.справочники.ДоговорыКонтрагентов.НайтиПоКоду("000000856",,,КонтрФА);
		ДогКонтрФАп = Соединение.справочники.ДоговорыКонтрагентов.НайтиПоКоду("000000869",,,КонтрФАп);
		ДогКонтрШТп = Соединение.справочники.ДоговорыКонтрагентов.НайтиПоКоду("000000870",,,КонтрШТп);
		
	ИначеЕсли ЭтоБПКорпВолга Тогда //Корпорация Волга БП  
      ОргТр    = соединение.справочники.Организации.найтиПоКоду("00014");
	  //явно указываются - другие договоры
		ДогКонтрТр  = Соединение.справочники.ДоговорыКонтрагентов.НайтиПоКоду("000002721",,,КонтрТр);
		ДогКонтрФА  = Соединение.справочники.ДоговорыКонтрагентов.НайтиПоКоду("000002724",,,КонтрФА);
		ДогКонтрФАп = Соединение.справочники.ДоговорыКонтрагентов.НайтиПоКоду("000002722",,,КонтрФАп);
		ДогКонтрШТп = Соединение.справочники.ДоговорыКонтрагентов.НайтиПоКоду("000002723",,,КонтрШТп);	
		
		
	КонецЕсли;
	
	// по списку ТаблОрг

	СпособЗачетаАвансовТр = соединение.Перечисления.СпособыЗачетаАвансов.Автоматически;
	
	УслугаТр       = соединение.справочники.Номенклатура.НайтиПоКоду("000000465");
	СчетДоходовТр  = соединение.ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.01.2");
	СчетРасходовТр = соединение.ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.02.2");
		
	СтавкаНДСТр    = соединение.Перечисления.СтавкиНДС.БезНДС;	 //ВСЕГДА без ндс!
	
	СчетРасчКонтр = соединение.ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.01");
	СчетРасчАванс = соединение.ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.02");
	ВалютаДокументаТр    = соединение.Справочники.Валюты.найтиПоКоду("643");	//все услуги в рублях!
	ВидОперацииТр        = соединение.Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	
	массивЦифр = новый массив;
	Для i=0 по 9 Цикл
		массивЦифр.Добавить(формат(i,"ЧЦ=1; ЧН=0") );
	КонецЦикла;
	
//==============Основной Цикл по документам===========================	
	Для каждого стр1 из суммаОрг Цикл
		
	//-----------------БЛОКИРОВКИ по БУ------------------------------------------	
	Если стр1.счет.ОтражатьВБухгалтерскомУчете Тогда // уже выгружен в БП ЯШТ
		сообщить(строка(стр1.счет)+" уже выгружен в БП ЯШТ, перевыгружать его нельзя!", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

		
	// 1)---------------Создаём или находим документ в базе БП-----------------
	этоНовыйДок = ложь;
	Если СокрЛП(стр1.НомерВхДок)="" Тогда
		Док = соединение.Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		этоНовыйДок = Истина;
	 Иначе
		Если ЭтоБПЗем Тогда //00000000972
			номДок =формат(число(стр1.НомерВхДок), "ЧЦ=11; ЧВН=; ЧГ=0");
		ИначеЕсли ЭтоБПВор Тогда	            //ВА000000297
			номДок ="ВА"+ формат(число(стр1.НомерВхДок), "ЧЦ=9; ЧВН=; ЧГ=0");
		ИначеЕсли ЭтоБПМал Тогда	            //ВА000000297
			номДок ="МЕИ"+ формат(число(стр1.НомерВхДок), "ЧЦ=8; ЧВН=; ЧГ=0");
		ИначеЕсли ЭтоБПКорпВолга Тогда	            //ВА000000297  
			номДок ="КВТ"+ формат(число(стр1.НомерВхДок), "ЧЦ=8; ЧВН=; ЧГ=0");	
		КонецЕсли;	  
		
		ДокСсылка = соединение.Документы.РеализацияТоваровУслуг.НайтиПоНомеру(номДок, стр1.Счет.Дата );
		
		Если ДокСсылка=Неопределено или ДокСсылка.пустая() Тогда
			#Если Клиент Тогда
				сообщить("НЕ найден документ "+номДок+" - будет создан новый!", СтатусСообщения.Внимание);
			#КонецЕсли	
			Док = соединение.Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			этоНовыйДок = Истина;
		Иначе
			//-----------------26.05.2015 - доп. БЛОКИРОВКа по приходу печ.документов------------------------------------------	
			Если ДокСсылка.Закрыт Тогда  //новый реквизит в Реализациях БП Землянского и Воробьева
				#Если Клиент Тогда
					сообщить("Существующий документ "+номДок+" - уже Закрыт от изменений! Получены все печатные документы!");
				#КонецЕсли
				Продолжить;
			КонецЕсли;
			//
			Если флПерезаписывать Тогда
			#Если Клиент Тогда
				сообщить("Существующий документ "+номДок+" - будет перезаписан.");
			#КонецЕсли
			Док = ДокСсылка.ПолучитьОбъект();
			Док.Услуги.Очистить();
			Иначе
				#Если Клиент Тогда
					сообщить("Уже существующий документ "+номДок+" в бухгалтерской базе 1С - НЕ изменен!", СтатусСообщения.Внимание);
				#КонецЕсли
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
		
	
    //2)----------------- одинаково в обоих БП!-------------------------------
	док.ВидОперации = ВидОперацииТр; // Продажа всегда!
	//док.Дата  = стр1.Счет.Дата; // дата по поступлению - не правильно!
	
	док.Дата  = ЭтотОбъект.ВремяНапоминания; // Фактическая дата и время отгрузки!
	
	Док.Организация = ОргТр;
	Док.СпособЗачетаАвансов	 = СпособЗачетаАвансовТр;
	Док.Склад = СкладТр;
	
	док.СчетУчетаРасчетовСКонтрагентом = СчетРасчКонтр;
	док.СчетУчетаРасчетовПоАвансам = СчетРасчАванс;
	
	док.ВалютаДокумента = ВалютаДокументаТр;
	док.КратностьВзаиморасчетов = 1;
	док.КурсВзаиморасчетов      = 1;
	
	док.НомерПутевогоЛиста = НомерПутевогоЛиста; // 06.11.2015  - номер путевого листа в Бухгалтерии!
	док.ПробегЯШТ = Километров; // 11.11.2015
	
	док.УчитыватьНДС     = Истина;
	док.СуммаВключаетНДС = Истина;
	
	ЦенаТр = окр(стр1.Сумма + стр1.СуммаПеревыставленная, 2); //ВСЯ СУММА!
	Док.Комментарий = ЭтотОбъект.Водитель;	
	
	//3) --------Определение Контрагента и его договора (услуг)--------------
	Если  Найти(стр1.Счет.ДоговорКонтрагента.наименование, " ШТ")>0 Тогда //+++ в договоре перевозчика ШТ!
		//	ЗакОрганизация = "Формула Авто";
		Док.Контрагент  = КонтрШТп;
		Док.договорКонтрагента = ДогКонтрШТп;
	ИначеЕсли  Найти(стр1.Счет.ДоговорКонтрагента.наименование, " ФА+")>0 Тогда //+++ в договоре перевозчика ФА+!
		//	ЗакОрганизация = "Формула Авто";
		Док.Контрагент  = КонтрФАп;
		Док.договорКонтрагента = ДогКонтрФАп;
	ИначеЕсли  Найти(стр1.Счет.ДоговорКонтрагента.наименование, " ФА")>0
		и Найти(стр1.Счет.ДоговорКонтрагента.наименование, " факторинг")=0 Тогда // в договоре перевозчика!
		//	ЗакОрганизация = "Формула Авто";
		Док.Контрагент  = КонтрФА;
		Док.договорКонтрагента = ДогКонтрФА;
		
	Иначе
		
		Если не ЭтоБПКорпВолга тогда
			Добавлять30проц = 1;
		иначе
			Добавлять30проц = 0;
		КонецЕсли;
		
		//+++++++++++++++++++Вместо ЯШТ - находит Др.Организацию!+++++++++++++++++
		Для i=0 по ТаблОрг.Количество()-1 Цикл
			Если  Найти(стр1.Счет.ДоговорКонтрагента.наименование, " "+ТаблОрг[i].НаименованиеКраткое)>0 Тогда // в договоре перевозчика!
				//	ЗакОрганизация  = ТаблОрг[i].Организация;
				//+++ 31.07.2015
				
				КонтрТр    = соединение.справочники.Контрагенты.НайтиПоКоду( ТаблОрг[i].КодВБПЗем ); // ЕДИНАЯ!
				ДогКонтрТр = ?(ЭтоБПЗем, КонтрТр.ОсновнойДоговорКонтрагента, 
				?(ЭтоБПВор,соединение.справочники.ДоговорыКонтрагентов.НайтиПоКоду(ТаблОрг[i].КодВБПВороб,,,КонтрТр),соединение.справочники.ДоговорыКонтрагентов.НайтиПоКоду(ТаблОрг[i].КодВБПМал,,,КонтрТр))
				);
				Добавлять30проц=0;
			КонецЕсли;
		КонецЦикла;	
		
		//			ЗакОрганизация = "Яршинторг";
		Док.Контрагент  = КонтрТр;
		Док.договорКонтрагента = ДогКонтрТр;
		
		
		//28.01.2016  ----- прямо в реализацию -------
		Док.Маршрут  = СокрЛП(ЭтотОбъект.Направление);
		Док.Обратка  = ЛОЖЬ;
		Док.КолТочек = ПолучитьКолТочек();
		
		
		ЦенаТр = окр(ЦенаТр *(1 + Добавлять30проц * 0.30), 2); //+30% до копеек!
		Док.Комментарий = ЭтотОбъект.Водитель+?(Добавлять30проц=1, "     +30%","");	
		
	КонецЕсли;
	
	//4) ---- пишем данные по 1 услуге на всю сумму + 30% -------------------
	//стр1.Счет	
	//стр1.Сумма
	стрУсл = Док.Услуги.Добавить();
	
	стрУсл.Номенклатура = УслугаТр;
	стрУсл.Содержание   = стр1.Счет.Услуги[0].Содержание; // по 1 услуге
	
	стрУсл.Количество   = 1;
	стрУсл.Цена   = ЦенаТр;
	стрУсл.Сумма  = ЦенаТр;
	// БЕЗ НДС!
	стрУсл.СтавкаНДС = СтавкаНДСТр;
	стрУсл.СуммаНДС  = 0;
	
	стрУсл.СчетДоходов  =  СчетДоходовТр;
	стрУсл.СчетРасходов = СчетРасходовТр;
	
	
	//5) -------------- машина и номер ----------------------
	номерМашины0 = ЭтотОбъект.ГосНомерАвтомобиля;
	Если СокрЛП(номерМашины0)="" Тогда
		номерМашины0 = СокрЛП(ЭтотОбъект.МаркаАвтомобиля);
	КонецЕсли;	
	номерМашины = "";
	N = стрДлина(номерМашины0);
	
	Для i=1 по N Цикл
		Если стрДлина(номерМашины)=3 Тогда прервать; КонецЕсли; // номер из 3х цифр
		симв = сред(номерМашины0,i,1);
		Если массивЦифр.Найти( симв )<>Неопределено Тогда
			номерМашины = номерМашины + симв;
		КонецЕсли;
	КонецЦикла;
	МодельМашины = СокрЛП(ЭтотОбъект.МаркаАвтомобиля);
	
	    Если стрДлина(номерМашины)<3 Тогда
			сообщить("ГосНомер машины должен состоять из 3х цифр '"+номерМашины+"'");
			номерМашины=номерМашины+"-"; //чтобы не было поиска по пустому названию!
		КонецЕсли;

	//6) -------------- субконто НоменклатурныеГруппы----------------------
	//Если ЭтоБПЗем Тогда
	//для всех одинаково	
		Если Найти(МодельМашины, " ")>0 Тогда
			МодельМашины = лев(МодельМашины, Найти(МодельМашины, " ")-1);
			сообщить("Модель машины берется только первое слово '"+МодельМашины+"'");
		КонецЕсли;	
		//------------доп.обработка названия----------------
		Если    Найти(нрег(МодельМашины),"муцу")>0	или Найти(нрег(МодельМашины),"мутсу")>0 или Найти(нрег(МодельМашины),"мутцу")>0
			или Найти(нрег(МодельМашины),"мицу")>0	или Найти(нрег(МодельМашины),"митсу")>0 или Найти(нрег(МодельМашины),"митцу")>0 
			или Найти(нрег(МодельМашины),"mitsu")>0        //Mitsubishi Lancer
			или Найти(нрег(МодельМашины),"fuso")>0 Тогда
			МодельМашины="Мицубиси";
		ИначеЕсли МодельМашины="Хендай" или МодельМашины="Хьендай"
			или МодельМашины="Хюндай"   или МодельМашины="Хьюндай"
			или МодельМашины="Хундай"   или МодельМашины="Хуиндай" или МодельМашины="Хёндай"
			или Найти(нрег(МодельМашины),"hyndai")>0
			или Найти(врег(МодельМашины),"HYUNDAI")>0 Тогда
			МодельМашины="Хундай";
		ИначеЕсли Найти(нрег(МодельМашины),"газель")>0 Тогда //ГАЗель, газель...
			МодельМашины="Газель";
		ИначеЕсли Найти(нрег(МодельМашины),"фиат")>0 
			или Найти(нрег(МодельМашины),"fiat")>0
			или Найти(нрег(МодельМашины),"дукато")>0 Тогда //фиат дукато, дукато
			МодельМашины="Фиат";
		ИначеЕсли Найти(нрег(МодельМашины),"скания")>0
			или Найти(нрег(МодельМашины),"scania")>0 Тогда //ГАЗель, газель...
			МодельМашины="Скания";
		ИначеЕсли Найти(нрег(МодельМашины),"волдай")>0 Тогда //ГАЗ Валдай
			МодельМашины="Волдай";
		КонецЕсли;	
	
		назвНомГр = номерМашины+" "+МодельМашины;
		
	//Иначе //Воробьев - только номер!
	//	
	//	назвНомГр = номерМашины;
	//		
	//КонецЕсли;
	стрУслСубконто = соединение.справочники.НоменклатурныеГруппы.НайтиПоНаименованию( назвНомГр );
	
	Если стрУслСубконто = Неопределено или стрУслСубконто.пустая() Тогда
		#Если Клиент Тогда
			Сообщить("Не найден автомобиль: '"+назвНомГр+"' в справочнике Номенклатурные Группы в БП перевозчика!", СтатусСообщения.Внимание);
		#КонецЕсли	
	Иначе		
		стрУсл.Субконто = стрУслСубконто;
	КонецЕсли;
	
	попытка
		Док.ПометкаУдаления = стр1.Счет.ПометкаУдаления;	
		
		//+++ 31.07.2015
		строкаОрг = ТаблОрг.найтиСтроки(новый Структура("Организация", стр1.Организация) );
	
		Если НЕ ( //стр1.Организация = "Формула Авто Плюс" или
			      строкаОрг.Количество()>=1  // изменение флага проведения НЕ работает для организаций таблОрг!
			    ) 
			и (НЕ стр1.Счет.Проведен) и Док.Проведен Тогда
			
        	Док.Записать(Соединение.РежимЗаписиДокумента.ОтменаПроведения);
		#Если Клиент Тогда
				сообщить("Успешно "+?(стр1.Счет.ПометкаУдаления, "удален ", "записан и распроведен ")
				                   +?(этоНовыйДок, "новый","")
								   +" документ "+строка(док.Номер)+" от "+строка(док.Дата), СтатусСообщения.Информация );
			#КонецЕсли	
		Иначе
					
			//сразу перепроведен документ в Бухгалтерии
			Если стр1.Счет.Проведен 
				//или стр1.Организация = "Формула Авто Плюс" 
				или строкаОрг.Количество()>=1 тогда

				если// стр1.Организация = "Формула Авто Плюс" или
					строкаОрг.Количество()>=1 тогда // проводим документ!
					Док.ПометкаУдаления = ложь;
				КонецЕсли;
				
				попытка
					Док.Записать(соединение.РежимЗаписиДокумента.Проведение);
					#Если Клиент Тогда
						сообщить("Успешно проведен документ "+строка(док.Номер)+" от "+строка(док.Дата), СтатусСообщения.Информация );
					#КонецЕсли	
				исключение
					#Если Клиент Тогда
						сообщить("Ошибка при проведении документа ""Реализация Товаров и Услуг "+док.Номер+" от "+строка(док.Дата)+" : "+ОписаниеОшибки(), СтатусСообщения.Внимание );
					#КонецЕсли	
				КонецПопытки;	
			Иначе
			Док.Записать();
			#Если Клиент Тогда
				сообщить("Успешно "+?(стр1.Счет.ПометкаУдаления, "удален ", "записан ")
				                   +?(этоНовыйДок, "новый","")
								   +" документ "+строка(док.Номер)+" от "+строка(док.Дата), СтатусСообщения.Информация );
			#КонецЕсли	
			КонецЕсли;
				   
		КонецЕсли;
		
		НомерВхДок = формат( число( прав(Док.Номер, стрДлина(Док.Номер)-3) ), "ЧГ=0");
		
		//+++ 20.05.2015 =====================Шаг нумерации==================
		// с 18.05  - зем   1371 + 14*d
		// с 18.05  - вороб 1300 + 12*d
		//===========================================
		// с 19.01.2016 -> от 100 + 20*d
		// с 01.04.2016 - малышев с 10+20*d
		
		d = ( НачалоДня(Док.Дата) - '20160119' ) / 86400;
		dm = ( НачалоДня(Док.Дата) - '20160404' ) / 86400;
		dv = ( НачалоДня(Док.Дата) - '20180320' ) / 86400;   //начальная дата отсчета
		Если ЭтоБПЗем Тогда 
			НомНачДня = 100 + 20*d;
			Если число(НомерВхДок)<НомНачДня Тогда
				док.Номер = формат(НомНачДня, "ЧЦ=11 ЧВН=; ЧГ=0");
				док.Записать();
				НомерВхДок = формат(НомНачДня, "ЧГ=0");
			КонецЕсли;	
			
			//+++ 10.06.2015 - номер нужно писать в интервал!
			Если число(НомерВхДок)>НомНачДня+14 Тогда
				Для iii=0 по 14 Цикл
					номДок =формат(число(НомНачДня+iii), "ЧЦ=11; ЧВН=; ЧГ=0");
	 				ДокСсылка = соединение.Документы.РеализацияТоваровУслуг.НайтиПоНомеру(номДок, стр1.Счет.Дата );
	                Если ДокСсылка=Неопределено или ДокСсылка.пустая() Тогда
		 				док.Номер = формат(НомНачДня+iii, "ЧЦ=11; ЧВН=; ЧГ=0");
						док.Записать();
						НомерВхДок = формат(НомНачДня+iii, "ЧГ=0");
						прервать;
					КонецЕсли;
				КонецЦикла;
				Если число(НомерВхДок)>НомНачДня+14 Тогда
	            сообщить("Номер документа '"+НомерВхДок+"' не удалось записать в интервале "+строка(НомНачДня)+" - "+строка(НомНачДня+14), СтатусСообщения.Внимание);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ЭтоБПВор Тогда//вороб
			НомНачДня = 100 + 20*d;
    		Если число(НомерВхДок)<НомНачДня Тогда
				док.Номер ="ВА"+формат(НомНачДня, "ЧЦ=9; ЧВН=; ЧГ=0");
				док.Записать();
				НомерВхДок = формат(НомНачДня, "ЧГ=0");
			КонецЕсли;	  
			
			//+++ 10.06.2015 - номер нужно писать в интервал!
			Если число(НомерВхДок)>НомНачДня+12 Тогда
				Для iii=0 по 12 Цикл
					номДок = "ВА"+формат(НомНачДня+iii, "ЧЦ=9; ЧВН=; ЧГ=0");
	 				ДокСсылка = соединение.Документы.РеализацияТоваровУслуг.НайтиПоНомеру(номДок, стр1.Счет.Дата );
	                Если ДокСсылка=Неопределено или ДокСсылка.пустая() Тогда
		 				док.Номер = "ВА"+формат(НомНачДня+iii, "ЧЦ=9; ЧВН=; ЧГ=0");
						док.Записать();
						НомерВхДок = формат(НомНачДня+iii, "ЧГ=0");
						прервать;
					КонецЕсли;
				КонецЦикла;
				Если число(НомерВхДок)>НомНачДня+12 Тогда
	            сообщить("Номер документа '"+НомерВхДок+"' не удалось записать в интервале "+строка(НомНачДня)+" - "+строка(НомНачДня+14), СтатусСообщения.Внимание);
				КонецЕсли;
			КонецЕсли;
        иначеЕсли ЭтоБПМал Тогда
			НомНачДня = 20*dm;
    		Если число(НомерВхДок)<НомНачДня Тогда
				док.Номер ="МЕИ"+формат(НомНачДня, "ЧЦ=8; ЧВН=; ЧГ=0");
				док.Записать();
				НомерВхДок = формат(НомНачДня, "ЧГ=0");
			КонецЕсли;	  
			
		иначеЕсли ЭтоБПКорпВолга Тогда  
			НомНачДня = 15*dv+1;
    		//Если число(НомерВхДок)<НомНачДня Тогда
				док.Номер ="КВТ"+формат(НомНачДня, "ЧЦ=8; ЧВН=; ЧГ=0");
				док.Записать();
				НомерВхДок = формат(НомНачДня, "ЧГ=0");
			//КонецЕсли;				
			
		КонецЕсли;	
        //+++)
		
		стр1.НомерВхДок = НомерВхДок;
		
		Док1 = стр1.Счет.ПолучитьОбъект();
		Док1.НомерВходящегоДокумента = НомерВхДок;
		Док1.ДатаВходящегоДокумента  = док.Дата;
		Док1.Записать();
		
	исключение
		#Если Клиент Тогда
			сообщить("Ошибка при записи документа "+стр1.Счет.Номер+" от "+строка(стр1.Счет.Дата)+" в базу БП: "+ОписаниеОшибки(), СтатусСообщения.Внимание );
		#КонецЕсли	
	КонецПопытки;	
	
		
КонецЦикла;

//========================перенос в БП=============================

Если не ЭтоБПКорпВолга тогда
	сообщить(строка(ТекущаяДата())+" Начало выгрузки всех ""обраток"" в БП...");
	ВыгрузитьДопРасходыВБП();
КонецЕсли;

// 11.12.2015 -17.12.2015 - еще раз в путевой лист - уже с номерами реализаций БП
Если ДокументыСданыЛогистам тогда
	ВыгрузитьТранспортИОбраткиВПутевойЛист(НомерПутевогоЛиста);
КонецЕсли;

КонецПроцедуры //выгрузка в БП



Функция ПолучитьСоединение(СтрокаСоединенияCOM="", v8="V83")
	
	v8connect = Новый COMОбъект(v8+".ComConnector");
	Попытка
	Соединение = v8connect.Connect(СтрокаСоединенияCOM);
	#Если Клиент Тогда
	ТипБазы = "Ref=";  длТипаБазы=3;
	Если Найти(СтрокаСоединенияCOM,"File=")>0 Тогда		
		ТипБазы = "File="; длТипаБазы=4;
	КонецЕсли;	
	имяБД = Прав(СтрокаСоединенияCOM,стрДлина(СтрокаСоединенияCOM) - найти(СтрокаСоединенияCOM,ТипБазы)-длТипаБазы);
	имяБД = Лев(имяБД, найти(имяБД,";")-1);
	Сообщить("Успешно установлено соединение с "+?(ТипБазы = "Ref=","серверной", "файловой")+" базой: "+имяБД, СтатусСообщения.Информация);
	#КонецЕсли
	Исключение
	#Если Клиент Тогда
		Сообщить("Ошибка при соединении с "+?(ТипБазы = "Ref=","серверной", "файловой")+" базой: "+имяБД+"
		         |Ошибка: "+ ОписаниеОшибки(), СтатусСообщения.Внимание);
	#КонецЕсли
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

//==========ГЛАВНАЯ КНОПКА подключения==================================================
Процедура КоманднаяПанель2Подключиться(Кнопка)
	
	Флажок1 = ложь; //+++   Истина - ТЕСТОВЫЙ режим!   ЛОЖЬ - РЕАЛЬНАЯ БАЗА !!!
	
	Если Кнопка<>Неопределено Тогда // только Для файл.баз - спрашиваем откуда брать!
		Если не ВвестиЗначение( Флажок1, "В копию базы?") Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	СтрокаСоединенияCOM="";
	Соединение = Неопределено; //еще раз всегда!
	Base   = "";
	UsrPwd = "";
	v8="V83";  //обе базы БП - 8.2
	
	Если Флажок1 Тогда
		//BaseZEM   = "File=""D:\1с_моё\Базы разные\Землянский и Воробьев ИП\БП Землянский"""; 
		//BaseVOROB = "File=""D:\1с_моё\Базы разные\Землянский и Воробьев ИП\БП Воробьев"""; 
		BaseZEM   = "Srvr=""server:3041"";Ref=""v83ib_zemvorob_bp_copy"""; 
		BaseVOROB = "Srvr=""server:3041"";Ref=""v83ib_zemvorob_bp_copy"""; 
	Иначе
		//BaseZEM   = "Srvr=""server"";Ref=""v82ib_zem_bp"""; 
		//BaseVOROB = "Srvr=""server"";Ref=""v82ib_vorobiev_bp"""; 
// c 31.08.2015	- единая база!	
		//BaseZEM   = "Srvr=""server"";Ref=""v82ib_zemvorob_bp"""; 
		//BaseVOROB = "Srvr=""server"";Ref=""v82ib_zemvorob_bp"""; 
		//c 27.02.17 новая база
		BaseZEM   = "Srvr=""server:3041"";Ref=""v83ib_zemvorob_bp"""; 
		BaseVOROB = "Srvr=""server:3041"";Ref=""v83ib_zemvorob_bp"""; 
	КонецЕсли;
	 
		base = baseZEM; 
		UsrPwd = "Usr=""Лунева"";Pwd=""luneva151515""";
	//КонецЕсли;	 
	//
	Если Кнопка<>Неопределено Тогда // только Для файл.баз - спрашиваем откуда брать!
		Если не ВвестиСтроку( base, "Введите Строку подключения к базе 1С БП перевозчики ") Тогда
		Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	СтрокаСоединенияCOM = Base+";"+UsrPwd;
		
		Если Base = "" или UsrPwd="" Тогда 
		#Если Клиент Тогда
			Сообщить("Не установлена строка подключения к внешней базе данных 1С...", СтатусСообщения.Внимание);
		#КонецЕсли
		Возврат ;
	    КонецЕсли;
	
	//Если Соединение = Неопределено Тогда
		Соединение  = ПолучитьСоединение(СтрокаСоединенияCOM, v8); 
		Если Соединение = Неопределено Тогда
		#Если Клиент Тогда
			Сообщить("НЕТ подключения к базе 1С "+v8+":"+base+" ! ", СтатусСообщения.Внимание);
		#КонецЕсли
			Возврат;
		Иначе
		#Если Клиент Тогда
			Сообщить(строка(ТекущаяДата())+" Успешно Установлено подключения к базе 1С "+v8+":"+base, СтатусСообщения.Информация);
		#КонецЕсли
		КонецЕсли;
	//КонецЕсли;

КонецПроцедуры

Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = 8 Тогда //по товарам (9-я закладка)
		КоманднаяПанель2Обновить(Неопределено);
	ИначеЕсли ТекущаяСтраница = 4 Тогда //по очередям  (5-я закладка)
		КоманднаяПанель3Получить(Неопределено);
		
	ИначеЕсли ТекущаяСтраница = 3 тогда //+++ 24.10.2017	
		списУбрать = мПолучитьЛитыеБезНагрузки();
		Если списУбрать.Количество()>0 тогда
			 ЭлементыФормы.Товары.ОтборСтрок.Номенклатура.ВидСравнения = ВидСравнения.НеВСписке;
			 ЭлементыФормы.Товары.ОтборСтрок.Номенклатура.Значение     = списУбрать;
			 ЭлементыФормы.Товары.ОтборСтрок.Номенклатура.Использование= Истина;
			 
			 ЭлементыФормы.Товары.НастройкаОтбораСтрок.Номенклатура.Доступность = ЛОЖЬ;
		 КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанель2ПКО(Кнопка)
	Если  Дата  > Дата('20160323') Тогда
    получитьФорму("ФормаПКО",Этаформа,).Открыть();
	иначе
	
	//-----------------------------------------------
	табл = ИнформацияПоПроезду.Скопировать();
	//Табл.Колонки.Добавить("ПредыдущиеОтгрузки");
	//Для каждого стр из Табл Цикл
	//	стр.ПредыдущиеОтгрузки = стр.заказ.ДолгЗапредыдущиеОтгрузки;
	//конецЦикла;	
	
	
	табл.Свернуть("Контрагент, Организация", "ДоставкаНал");  //+ СуммаЗаТоварНал - отдельно по каждому заказу!
	
	ном = справочники.Номенклатура.НайтиПоНаименованию("Транспортная услуга 44-ТР возмещаемые");  //Транспортная услуга 44-ТР возмещаемые
	
	Для каждого стр1 из  суммаОрг Цикл
		
		Если таблОрг.Найти(стр1.Организация, "Организация")<>неопределено Тогда
			сообщить("ПКО для "+стр1.Организация+" -  не выставляются!");
			продолжить;
		КонецЕсли;	
		
		//Цикл по клиентам
		Для каждого стр2 из табл Цикл
			Если стр2.Организация = стр1.Организация Тогда
				
				//+++ Наличка за транспорт!
				Если стр2.ДоставкаНал>0 Тогда
					//+++ поиск уже сущ.док !
					РеализацияСсылка = найтиРеализациюТрУсл(стр2.Контрагент, стр2.ДоставкаНал, ном, Истина, 
					?(стр2.Организация="Яршинторг", "",
					?(стр2.Организация="Формула Авто", "ФА", "ФА+")  
					)										);
					
					ДокПКОссылка = НайтиПКО(стр2.Контрагент, РеализацияСсылка);
					Если ДокПКОссылка = Неопределено Тогда
						ДокПКО = документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
					Иначе
						Если не флПерезаписывать Тогда
							сообщить("Уже существует ПКО "+строка(ДокПКОссылка.Номер)+" от "+строка(ДокПКОссылка.Дата)+" на "+строка(ДокПКОссылка.Контрагент)+" - "+Строка(ДокПКОссылка.СуммаДокумента) , СтатусСообщения.Информация);
							продолжить;
						Иначе
							сообщить("Существующий ПКО "+строка(ДокПКОссылка.Номер)+" от "+строка(ДокПКОссылка.Дата)+" на "+строка(ДокПКОссылка.Контрагент)+" - "+Строка(ДокПКОссылка.СуммаДокумента)+"р. Будет перезаписан!", СтатусСообщения.Внимание);
						КонецЕсли;
						ДокПКО = ДокПКОссылка.ПолучитьОбъект();
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(ДокПКО, РеализацияСсылка);
					
					ДокПКО.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
					ДокПКО.Дата		   = ТекущаяДата();  //всегда оперативное проведение!
					ДокПКО.ДокументОснование = РеализацияСсылка;
					ДокПКО.Касса = справочники.Кассы.НайтиПоКоду("00004"); // Касса ячейка - 00004, (основная - 00001)
					ДокПКО.Ответственный = глТекущийПользователь;
					ДокПКО.СтатьяДвиженияДенежныхСредств = справочники.СтатьиДвиженияДенежныхСредств.ОплатаПокупателя;
					
					ДокПКО.ПринятоОт = ЭтотОбъект.Водитель;
					
					ДокПКО.РасшифровкаПлатежа.Очистить();
					стрПКО = ДокПКО.РасшифровкаПлатежа.Добавить();
					стрПКО.ДоговорКонтрагента=РеализацияСсылка.ДоговорКонтрагента;
					стрПКО.Сделка = РеализацияСсылка;
					стрПКО.КурсВзаиморасчетов = 1;   
					стрПКО.КратностьВзаиморасчетов = 1;
					стрПКО.СуммаПлатежа = РеализацияСсылка.СуммаДокумента;
					стрПКО.СтавкаНДС    = Перечисления.СтавкиНДС.БезНДС;
					
					ДокПКО.СсылкаЗаданиеНаОтгрузку   =  ссылка;
					ДокПКО.Основание   = "Оплата транспортных услуг по маршруту "+строка(ЭтотОбъект.Номер)+" от "+формат(ЭтотОбъект.Дата,"ДЛФ=DD");
					ДокПКО.Комментарий ="# Задание "+строка(ЭтотОбъект.Номер)+" от "+строка(ЭтотОбъект.Дата); 
					ДокПКО.ПолучитьФорму("ФормаДокумента").ОткрытьМодально();
					
				КонецЕсли;
				
			Если  Дата  > Дата('20160218') Тогда  // для того. что бы не задвоились предыдущие ПКО
					
					
					
					/// поступления налички за товар
					Для каждого строка из ЗаказыПокупателей Цикл
						Если строка.ЗаказПокупателя.Контрагент = стр2.Контрагент  и  Найти(строка.ЗаказПокупателя.ДоговорКонтрагента.Наименование,"*")<>0 и ТипЗнч(строка.Реализация) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда	
							ДокПКОссылка = НайтиПКО(стр2.Контрагент, строка.Реализация);
							Если ДокПКОссылка = Неопределено Тогда
								ДокПКО = документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
							Иначе
								Если не флПерезаписывать Тогда
									сообщить("Уже существует ПКО "+строка(ДокПКОссылка.Номер)+" от "+строка(ДокПКОссылка.Дата)+" на "+строка(ДокПКОссылка.Контрагент)+" - "+Строка(ДокПКОссылка.СуммаДокумента) , СтатусСообщения.Информация);
									продолжить;
								Иначе
									сообщить("Существующий ПКО "+строка(ДокПКОссылка.Номер)+" от "+строка(ДокПКОссылка.Дата)+" на "+строка(ДокПКОссылка.Контрагент)+" - "+Строка(ДокПКОссылка.СуммаДокумента)+"р. Будет перезаписан!", СтатусСообщения.Внимание);
								КонецЕсли;
								ДокПКО = ДокПКОссылка.ПолучитьОбъект();
							КонецЕсли;
							ЗаполнитьЗначенияСвойств(ДокПКО, строка.Реализация);
							
							ДокПКО.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
							ДокПКО.Дата		   = ТекущаяДата();  //всегда оперативное проведение!
							ДокПКО.ДокументОснование = строка.Реализация;
							ДокПКО.Касса = справочники.Кассы.НайтиПоКоду("00004"); // Касса ячейка - 00004, (основная - 00001)
							ДокПКО.Ответственный = глТекущийПользователь;
							ДокПКО.СтатьяДвиженияДенежныхСредств = справочники.СтатьиДвиженияДенежныхСредств.ОплатаПокупателя;
							
							ДокПКО.ПринятоОт = ЭтотОбъект.Водитель;
							
							ДокПКО.РасшифровкаПлатежа.Очистить();
							стрПКО = ДокПКО.РасшифровкаПлатежа.Добавить();
							стрПКО.ДоговорКонтрагента=строка.Реализация.ДоговорКонтрагента;
							стрПКО.Сделка = строка.Реализация.Сделка;
							стрПКО.КурсВзаиморасчетов = 1;   
							стрПКО.КратностьВзаиморасчетов = 1;
							стрПКО.СуммаПлатежа = строка.Реализация.СуммаДокумента;
							стрПКО.СтавкаНДС    = Перечисления.СтавкиНДС.БезНДС;
							
							ДокПКО.СсылкаЗаданиеНаОтгрузку   =  ссылка;
							ДокПКО.Основание   = "Оплата за товар по реализации "+строка(строка.Реализация.Номер)+" от "+формат(строка.Реализация.Дата,"ДЛФ=DD");
							ДокПКО.Комментарий ="# Задание "+строка(ЭтотОбъект.Номер)+" от "+строка(ЭтотОбъект.Дата); 
							ДокПКО.ПолучитьФорму("ФормаДокумента").ОткрытьМодально();
						конецЕсли;
						
					    //+++ Предыдущие отгрузки
					    Если строка.заказпокупателя.ДолгЗаПредыдущиеОтгрузки>0 Тогда
						//+++ поиск уже сущ.док !
						ДокПКОссылка = НайтиПКО(стр2.Контрагент, строка.заказпокупателя);
						Если ДокПКОссылка = Неопределено Тогда
							ДокПКО = документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
						Иначе
							Если не флПерезаписывать Тогда
								сообщить("Уже существует ПКО "+строка(ДокПКОссылка.Номер)+" от "+строка(ДокПКОссылка.Дата)+" на "+строка(ДокПКОссылка.Контрагент)+" - "+Строка(ДокПКОссылка.СуммаДокумента) , СтатусСообщения.Информация);
								продолжить;
							Иначе
								сообщить("Существующий ПКО "+строка(ДокПКОссылка.Номер)+" от "+строка(ДокПКОссылка.Дата)+" на "+строка(ДокПКОссылка.Контрагент)+" - "+Строка(ДокПКОссылка.СуммаДокумента)+"р. Будет перезаписан!", СтатусСообщения.Внимание);
							КонецЕсли;
							ДокПКО = ДокПКОссылка.ПолучитьОбъект();
						КонецЕсли;
						ЗаполнитьЗначенияСвойств(ДокПКО, строка.Реализация);
						
						ДокПКО.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
						ДокПКО.Дата		   = ТекущаяДата();  //всегда оперативное проведение!
						ДокПКО.ДокументОснование = строка.заказпокупателя;
						ДокПКО.Касса = справочники.Кассы.НайтиПоКоду("00004"); // Касса ячейка - 00004, (основная - 00001)
						ДокПКО.Ответственный = глТекущийПользователь;
						ДокПКО.СтатьяДвиженияДенежныхСредств = справочники.СтатьиДвиженияДенежныхСредств.ОплатаПокупателя;
						
						ДокПКО.ПринятоОт = ЭтотОбъект.Водитель;
						
						ДокПКО.РасшифровкаПлатежа.Очистить();
						стрПКО = ДокПКО.РасшифровкаПлатежа.Добавить();
						стрПКО.ДоговорКонтрагента=строка.Реализация.ДоговорКонтрагента;
						//стрПКО.Сделка = РеализацияСсылка;
						стрПКО.КурсВзаиморасчетов = 1;   
						стрПКО.КратностьВзаиморасчетов = 1;
						стрПКО.СуммаПлатежа = строка.заказпокупателя.ДолгЗаПредыдущиеОтгрузки;
						стрПКО.СтавкаНДС    = Перечисления.СтавкиНДС.БезНДС;
						ДокПКО.СуммаДокумента  = строка.заказпокупателя.ДолгЗаПредыдущиеОтгрузки;
						ДокПКО.СсылкаЗаданиеНаОтгрузку   =  ссылка;
						ДокПКО.Основание   = "Оплата за предыдущие отгрузки";
						ДокПКО.Комментарий ="# Задание "+строка(ЭтотОбъект.Номер)+" от "+строка(ЭтотОбъект.Дата); 
						ДокПКО.ПолучитьФорму("ФормаДокумента").ОткрытьМодально();
						
					КонецЕсли;
					конецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	конецЕсли;
КонецПроцедуры

Функция НайтиПКО(Контр, Реализация, Договор=Неопределено )
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ПриходныйКассовыйОрдер.Ссылка
	                |ИЗ
	                |	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	                |ГДЕ
	                |	ПриходныйКассовыйОрдер.ДокументОснование = &ДокументОснование
	                |	И ПриходныйКассовыйОрдер.СсылкаЗаданиеНаОтгрузку = &Ссылка
	                |	И ПриходныйКассовыйОрдер.Контрагент = &Контр
	                |	//и ПриходныйКассовыйОрдер.ДоговорКонтрагента = &Договор
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	ПриходныйКассовыйОрдер.Дата УБЫВ
	                |АВТОУПОРЯДОЧИВАНИЕ";
	 Запрос.УстановитьПараметр("Контр",Контр);
	 Запрос.УстановитьПараметр("Ссылка", Ссылка );
	 Запрос.УстановитьПараметр("ДокументОснование", реализация );
	 //Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ЭтотОбъект.Дата) - 31*86400);
	 Если Договор<>Неопределено Тогда
	  Запрос.УстановитьПараметр("Договор",Договор);
	  Запрос.Текст=СтрЗаменить(Запрос.Текст,"//","");	 
	 конецЕсли;
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	Если Выборка.Следующий() Тогда
	рез = выборка.Ссылка;
	Иначе рез = Неопределено;
	КонецЕсли;
	
	Возврат рез;
КонецФункции	

////============================22.12.2015 - убраны=======================================
//Процедура СуммаОбраткиЯШТПриИзменении(Элемент)
//	
//	//Единая обработка!
//	этоЯШТ = (Элемент.Имя="СуммаОбраткиЯШТ");

////---------------реквизит ОбраткаЯШТ - уже не может быть Булево...-------------
//	Если СуммаОбраткиЯШТ>0 и СуммаОбратки=0 Тогда
//		ВидОбратки = "ЯШТ";
//	ИначеЕсли СуммаОбраткиЯШТ=0 и СуммаОбратки>0 Тогда
//		ВидОбратки = "Др.";
//	ИначеЕсли СуммаОбраткиЯШТ>0 и СуммаОбратки>0 Тогда
//		ВидОбратки = "ЯиД";
//	ИначеЕсли СуммаОбраткиЯШТ=0 и СуммаОбратки=0 Тогда
//		ВидОбратки = "";
//	КонецЕсли;	
//	
//	Если (этоЯШТ и СуммаОбраткиЯШТ=0)
//		или (НЕ этоЯШТ и СуммаОбратки=0) Тогда
//		Предупреждение("Сумма ""обратки"+?(этоЯШТ," ЯШТ","")+""" равна 0, формирования документов отменено.", 10);
//		Возврат;
//	КонецЕсли;
//	
//		
//	Если НЕ Выполнено Тогда 
//		Предупреждение("Задание еще НЕ выполнено, поэтому формирования Поступления Доп.Расходов - не будет!", 10);
//		Возврат;
//	КонецЕсли;
//		
//	Если Вопрос("Создать документ поступления доп.расходов "+?(этоЯШТ," на ЯШТ","Для Других")+"?", РежимДиалогаВопрос.ДаНет, 30) = КодВозвратаДиалога.Нет Тогда
//		Возврат;
//	КонецЕсли;
//		
// 	флПерезаписывать=Истина;
//	СоздатьПоступлениеДопРасходов();
//	ЭтотОбъект.Записать();//сразу записываем весь документ, тариф фикс.!
//		
//	//---------------------определение перевозчика--------------------------------	
//	НадоВыгружатьВБП = ЛОЖЬ;
//	Если (Найти(Перевозчик,"Землянский")>0  
//		   Или  Найти(Перевозчик,"Воробьев")>0)  Тогда
//	НадоВыгружатьВБП =Истина;
//	КонецЕсли;

//	Если НадоВыгружатьВБП Тогда
//		ВыгрузитьДопРасходыВБП( ?(этоЯШТ,"Да", "Нет") );
//	КонецЕсли;	
//	
//КонецПроцедуры

//22.12.2015
Процедура СуммаОбраткиЯШТПриИзменении(Элемент)
	
	Если Обратки.Количество()=0 и СуммаОбраткиЯШТ>0 тогда
		стр1 = Обратки.Добавить();
		стр1.Контрагент  = "Яршинторг";
		стр1.Направление = СокрЛП(строка(этотобъект.Направление))+"-Ярославль";
		стр1.Пробег = Километров;
		стр1.Сумма  = СуммаОбраткиЯШТ;
		стр1.Тариф  = ?(стр1.Пробег=0,0,стр1.Сумма/стр1.Пробег);
		
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Обратки;
		
	иначеЕсли СуммаОбраткиЯШТ=0 и Обратки.Количество()>0 тогда
		Если Вопрос("Удалить все обратки?", РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да тогда
			Обратки.Очистить();
		КонецЕсли;	
	КонецЕсли;	

КонецПроцедуры



//поиск Да, Нет, "" - все
Функция НайтиПоступлениеДопРасходов(наЯШТ="")
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ВЫБОР
	                |		КОГДА ПоступлениеДопРасходов.Комментарий подобно &ЯШТ
					|				И НЕ ПоступлениеДопРасходов.ПометкаУдаления 
	                |			ТОГДА ""Яршинторг""
	                |		ИНАЧЕ ""Другие покупатели""
	                |	КОНЕЦ КАК Организация,
	                |	ПоступлениеДопРасходов.СуммаДокумента КАК Сумма,
	                |	ПоступлениеДопРасходов.НомерВходящегоДокумента КАК НомерВхДок,
	                |	ПоступлениеДопРасходов.Ссылка КАК Счет,
					|	ПоступлениеДопРасходов.Комментарий
	                |ИЗ
	                |	Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов
	                |ГДЕ
	                |	ПоступлениеДопРасходов.Дата > &ДатаНач
	                |	И ПоступлениеДопРасходов.Комментарий ПОДОБНО &Комментарий
	                |//наЯШТ	И ( ПоступлениеДопРасходов.Комментарий подобно &ЯШТ) И НЕ ПоступлениеДопРасходов.ПометкаУдаления
 					|//НеЯШТ	И НЕ (ПоступлениеДопРасходов.Комментарий подобно &ЯШТ) И ПоступлениеДопРасходов.ПометкаУдаления
					|
	                |УПОРЯДОЧИТЬ ПО
	                |	ПоступлениеДопРасходов.Дата
	                |АВТОУПОРЯДОЧИВАНИЕ";

	Если наЯШТ="Да" Тогда
	 Запрос.Текст =стрЗаменить( Запрос.Текст , "//наЯШТ","");
	ИначеЕсли наЯШТ="Нет" Тогда 
	Запрос.Текст =стрЗаменить( Запрос.Текст , "//НеЯШТ","");
	КонецЕсли;
	 Запрос.УстановитьПараметр("ЯШТ", "%Яршинторг%" );
	 Запрос.УстановитьПараметр("Комментарий", "%Задание "+строка(ЭтотОбъект.Номер)+"%" );
	 Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ЭтотОбъект.Дата) - 14*86400);
	 Результат = Запрос.Выполнить();
	 табл = Результат.Выгрузить();
	
	Возврат табл;
	
КонецФункции	

//перезаполняем таблицу  ТаблОбратки
процедура СоздатьПоступлениеДопРасходов()
	
 	ТаблОбратки.Очистить();
	
	СоздатьОбраткиДругихПоТаблице(); // 28.01.2016 --- по таблице обраток ---
	
КонецПроцедуры //СоздатьПоступлениеДопРасходов

процедура СоздатьОбраткиДругихПоТаблице()
	
 табл =  НайтиПоступлениеДопРасходов();
	 
Для каждого стр1 из Обратки	цикл
стрКомм = "обр.№"+строка(стр1.НомерСтроки);

Если стр1.Сумма = 0 тогда //06.07.2017
	Сообщить( стрКомм+" Сумма = 0р.!!! По документу: "+строка(стр1.ДокументОснование)+" - тр.услуг нет!", СтатусСообщения.Внимание);
	продолжить;
КонецЕсли;	

флЯШТ = (найти( нрег( строка(стр1.Контрагент)),"яршинторг")>0);

//+++ 02.02.2018 - Кунатова просила НЕ формировать и не выгружать обратки на других!
Если НЕ флЯШТ тогда 
	сообщить(строка(стр1.НомерСтроки)+") обратка от "+строка(стр1.Контрагент)+" - ОТКЛЮЧЕНО формирование документов и выгрузка в бухгалтерию с 05.02.2018!",СтатусСообщения.Информация);
	Продолжить;
КонецЕсли;	

	док = неопределено;
	  
	Для i=0 по табл.Количество()-1 Цикл
		докСсылка = табл[i].Счет; 
		Если Найти(докСсылка.Комментарий, стрКомм)>0 тогда
		стрОбр = ТаблОбратки.Добавить();
		док = докСсылка.ПолучитьОбъект(); 
		ЗаполнитьЗначенияСвойств(стрОбр, док);
		прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если док = неопределено тогда
		док = документы.ПоступлениеДопРасходов.СоздатьДокумент();
		стрОбр = ТаблОбратки.Добавить();
	КонецЕсли;
	
	
СтатьяЗатратТрУсл = справочники.СтатьиЗатрат.НайтиПоКоду("К0115"); // Автоуслуги (грузовой транспорт)
НоменклатураТрУсл = Справочники.Номенклатура.НайтиПоКоду("ЛН00040",,Справочники.Номенклатура.НайтиПоКоду("ЛН00001")); //Транспортныеуслуги 44-ТЗР распределяемые

//--------------------------------------------------------------------------  
Док.ВидОперации    = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации;
Док.Организация    = справочники.Организации.НайтиПоКоду("00001"); //ЯШТ всегда!

Док.ОтражатьВУправленческомУчете = Истина;
Док.ВалютаДокумента = справочники.Валюты.НайтиПоКоду("643"); // ВСЕГДА РУБЛИ
Док.КратностьВзаиморасчетов = 1;
Док.КурсВзаиморасчетов = 1;
Док.УчитыватьНДС = Истина;
Док.СуммаВключаетНДС = Истина;
Док.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;	 //ВСЕГДА без ндс!

Док.Дата 		   = ВремяНапоминания;
Док.Ответственный = глТекущийПользователь;
Док.Услуга = НоменклатураТрУсл;  //ОДНА Услуга!
Док.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме;

Док.Сумма = стр1.Сумма;
Док.СуммаДокумента = Док.Сумма;
//Док.Подразделение  = ЭтотОбъект.Подразделение; // такое же...
Док.Подразделение  = справочники.Подразделения.НайтиПоКоду("00005");  //+++ 11.06.2015 - всегда ЯШТ


//------------------Контрагент--------------------
Контр = справочники.Контрагенты.ПустаяСсылка();
	Если СокрЛП(Перевозчик)="" Тогда
		Контр = ОрганизацияВыдавшаяДоверенность;
	ИначеЕсли Найти(Перевозчик, "Землянский")>0 Тогда	
		Контр = справочники.Контрагенты.НайтиПоКоду("00216");
	ИначеЕсли Найти(Перевозчик, "Воробьев")>0 Тогда	
		Контр = справочники.Контрагенты.НайтиПоКоду("93833");
	Иначе // Любой другой перевозчик
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Контрагенты.Ссылка
		               |ИЗ
		               |	Справочник.Контрагенты КАК Контрагенты
		               |ГДЕ
		               |	(ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(200))) = &Наименование";
		
		Запрос.УстановитьПараметр("Наименование",  ЭтотОбъект.Перевозчик);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Контр = выборка.Ссылка;
		Иначе 
			Контр = справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;	
	КонецЕсли;	
	
Если Контр = Неопределено или Контр.Пустая() Тогда
	Сообщить("Не найден Перевозчик по полному наименованию '"+Перевозчик+"'", СтатусСообщения.Внимание);
	Возврат;
КонецЕсли;	
Док.Контрагент    = Контр;

//----------- догвор всегда на Яршинторг ---------------------------------------------
	ДогКонтр = Контр.ОсновнойДоговорПоставки; //1 главный!
	Если ДогКонтр.Пустая() Тогда
	ДогКонтр = найтиДогКонтр(Контр," (НП)");  //"Любой Договор услуг (НП)"
		//Если ДогКонтр.Пустая() Тогда
		//ДогКонтр = найтиДогКонтр(Контр,"");  //"Любой Договор услуг НЕ ФА!"
		//КонецЕсли;
		Если ДогКонтр.Пустая() Тогда
		 ДогКонтр = СоздатьДогКонтр(Контр," (НП)");
		КонецЕсли;
	КонецЕсли;
Док.ДоговорКонтрагента = ДогКонтр;

//-----------------Связка с заданием------------------------------------------------------------

Содержание  = "Тр.услуги по маршруту: " +СокрЛП(стр1.Направление) //+СокрЛП(строка(этотобъект.Контрагент)) + "-Ярославль"
		+", а/м "+ СокрЛП(этотобъект.МаркаАвтомобиля)+" "+ СокрЛП(этотобъект.ГосНомерАвтомобиля)
		+", вод. "+ СокрЛП(этотобъект.Водитель)+" от "+формат( этотобъект.Дата,"ДЛФ=D")+"г.";
Док.Содержание    = Содержание;

//+++ 28.01.2016 -- по 1 точке возврата...
Док.Маршрут = СокрЛП(стр1.Направление);
 
Док.Комментарий   = "# Задание "+ЭтотОбъект.Номер+" от "+формат(ЭтотОбъект.Дата,"ДЛФ=DD")+" "
//+?(флЯШТ, "на Яршинторг", "Для Других покупателей")+"
+"# "+стрКомм+" Пробег: "+строка(стр1.Пробег)+"(км) х "+строка(стр1.Тариф)+"(р./км) = "+строка(стр1.Сумма)+"р.
 |Отправитель: "+строка(стр1.Контрагент0)+", Получатель: "+строка(стр1.Контрагент)+": "+стр1.Направление
+?(сокрЛП(стр1.Адрес)="", "", "
|Адрес получателя: "+стр1.Адрес+")")
+"
|Комментарий: "+сокрЛП(стр1.Комментарий)+"
|# "+Содержание;

попытка 
	
	Если табл.Количество()=0 Тогда //+++ 01.06- "У" по 03.07.2015
		док.УстановитьНовыйНомер("ТК");
    КонецЕсли;

	Если флЯШТ Тогда  // затраты ЯШТ
		док.ПометкаУдаления = ЛОЖЬ;
		док.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		док.ПометкаУдаления = Истина; 
		док.Записать(); // проводить нельзя!!!
	КонецЕсли;
	
	стрОбр.Организация = ?(флЯШТ, "Яршинторг", "Другой: "+стр1.Контрагент);
	стрОбр.Сумма = стр1.Сумма;
	стрОбр.Счет  = док.Ссылка;
	стрОбр.Комментарий = док.Комментарий;
	
	сообщить("Успешно записан документ: "+строка(док.Ссылка), СтатусСообщения.Информация);
	
исключение
	сообщить("Ошибка при записи документа по "+стрКомм+" для Клиента: "+строка(стр1.Контрагент)+": "+стр1.Направление
 	+" Ошибка: "+ОписаниеОшибки(), СтатусСообщения.Внимание);
	Возврат;
КонецПопытки;

КонецЦикла;
	
КонецПроцедуры	

функция ПолучитьКолТочек()
	
	N = 0;
	для i= 0 по ИнформацияПоПроезду.Количество()-1 цикл
		если ИнформацияПоПроезду[i].НомерОчереди>N тогда
			N= ИнформацияПоПроезду[i].НомерОчереди;
		КонецЕсли;
	КонецЦикла;	
	
	возврат N;

КонецФункции	

//наЯШТ - 3 значения!
процедура ВыгрузитьДопРасходыВБП(наЯШТ="")
	
	Если ТаблОбратки.Количество()=0 Тогда
		сообщить("Нет документов Для выгрузки ""обраток""", СтатусСообщения.Внимание);
	    Возврат;
	КонецЕсли;
	
//-------------Подключение----------------
Если Соединение = Неопределено Тогда
	КоманднаяПанель2Подключиться(Неопределено);
  	Если Соединение = Неопределено Тогда
		Возврат;
	КонецЕсли;
КонецЕсли;

	//---------------------определение реквизитов--------------------------------	
ЭтоБПЗем = Ложь;
ЭтоБПВор = Ложь;
ЭтоБПМал = Ложь;
ЭтоБПКорпВолга = Ложь;
	
	
	Если Найти(Перевозчик,"Землянский")>0  Тогда
	ЭтоБПЗем = Истина;
ИначеЕсли Найти(Перевозчик,"Воробьев")>0  Тогда
	ЭтоБПВор = Истина;
ИначеЕсли Найти(Перевозчик,"Малышев")>0  Тогда
	ЭтоБПМал = Истина;
ИначеЕсли Найти(Перевозчик,"Корпорация Волга")>0  Тогда
	ЭтоБПКорпВолга=  истина; 
Иначе
	#Если Клиент Тогда
	Сообщить("Выгружать документы в Бухгалтерию Перевозчика - можно только по 3м перевозчикам!",СтатусСообщения.Внимание);
	#КонецЕсли
    Возврат;
КонецЕсли;

если ДокументыСданыЛогистам тогда // 11.12.2015  !!!!
    сообщить(строка(ТекущаяДата())+" Начало выгрузки ""обраток"" в БП "+Перевозчик);
КонецЕсли;

  //=================================общие реквизиты Для всех документов======================================
	
//контрагент и его договор	
    КонтрТр  = соединение.справочники.Контрагенты.НайтиПоКоду("000000003");   //ЯШТ
	Если ЭтоБПЗем Тогда
      ОргТр    = соединение.справочники.Организации.найтиПоКоду("000000002");
		КонтрДР  = соединение.справочники.Контрагенты.НайтиПоКоду("00000001"); //Другие покупатели
	    СкладТр  = соединение.справочники.Склады.НайтиПоКоду("000000005");
	ИначеЕсли ЭтоБПВор Тогда //Воробьев БП
      ОргТр    = соединение.справочники.Организации.найтиПоКоду("000000001");
		КонтрДР  = соединение.справочники.Контрагенты.НайтиПоКоду("00000001"); //Другие покупатели
	    СкладТр  = соединение.справочники.Склады.НайтиПоКоду("000000001");
	ИначеЕсли ЭтоБПМал Тогда //Малышев БП
      ОргТр    = соединение.справочники.Организации.найтиПоКоду("00013");
		КонтрДР  = соединение.справочники.Контрагенты.НайтиПоКоду("00000001"); //Другие покупатели
	    СкладТр  = соединение.справочники.Склады.НайтиПоКоду("000000001");
	ИначеЕсли ЭтоБПКорпВолга Тогда          
      ОргТр    = соединение.справочники.Организации.найтиПоКоду("00014");
		КонтрДР  = соединение.справочники.Контрагенты.НайтиПоКоду("00000001"); //Другие покупатели
	    СкладТр  = соединение.справочники.Склады.НайтиПоКоду("000000001");	
	КонецЕсли;
	ДогКонтрТр  = КонтрТр.ОсновнойДоговорКонтрагента;
	ДогКонтрДР  = КонтрДР.ОсновнойДоговорКонтрагента;
	
	СпособЗачетаАвансовТр = соединение.Перечисления.СпособыЗачетаАвансов.Автоматически;
	
	УслугаТр       = соединение.справочники.Номенклатура.НайтиПоКоду("000000465");
	СчетДоходовТр  = соединение.ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.01.2");
	СчетРасходовТр = соединение.ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.02.2");
		
	СтавкаНДСТр    = соединение.Перечисления.СтавкиНДС.БезНДС;	 //ВСЕГДА без ндс!
	
	СчетРасчКонтр = соединение.ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.01");
	СчетРасчАванс = соединение.ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.02");
	ВалютаДокументаТр    = соединение.Справочники.Валюты.найтиПоКоду("643");	//все услуги в рублях!
	ВидОперацииТр        = соединение.Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	
	массивЦифр = новый массив;
	Для i=0 по 9 Цикл
		массивЦифр.Добавить(формат(i,"ЧЦ=1; ЧН=0") );
	КонецЦикла;

	
	
//==============Основной Цикл по документам===========================	
Для каждого стр1 из ТаблОбратки Цикл   //!!! ТаблОбратки !!!
	
		наЯШТ = (найти( нрег(строка(стр1.Организация)), "яршинторг")>0); // 28.01.2016
		
		Если наЯШТ="Да" Тогда
			Если стр1.счет.ПометкаУдаления Тогда
				продолжить;
			КонецЕсли;
		ИначеЕсли наЯШТ="Нет" Тогда
			Если НЕ стр1.счет.ПометкаУдаления Тогда
				продолжить;
			КонецЕсли;
		КонецЕсли;	
	//-----------------БЛОКИРОВКИ по БУ------------------------------------------	
	Если стр1.счет.ОтражатьВБухгалтерскомУчете Тогда // уже выгружен в БП ЯШТ
		сообщить(строка(стр1.счет)+" уже выгружен в БП ЯШТ, перевыгружать его в нельзя!", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

		
	// 1)---------------Создаём или находим документ в базе БП-----------------
	этоНовыйДок = ложь;
	стр1.НомерВхДок = СокрЛП(стр1.счет.НомерВходящегоДокумента);
	
	Если СокрЛП(стр1.НомерВхДок)="" Тогда
		Док = соединение.Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		этоНовыйДок = Истина;
	 Иначе
		Если ЭтоБПЗем Тогда //00000000972
			номДок =формат(число(стр1.НомерВхДок), "ЧЦ=11; ЧВН=; ЧГ=0");
		ИначеЕсли ЭтоБПВор Тогда  	            //ВА000000297
			номДок ="ВА"+ формат(число(стр1.НомерВхДок), "ЧЦ=9; ЧВН=; ЧГ=0");
		ИначеЕсли ЭтоБПМал Тогда  	            //ВА000000297
			номДок ="МЕИ"+ формат(число(стр1.НомерВхДок), "ЧЦ=8; ЧВН=; ЧГ=0");
		ИначеЕсли ЭтоБПКорпВолга Тогда  	            //ВА000000297        
			номДок ="КВТ"+ формат(число(стр1.НомерВхДок), "ЧЦ=8; ЧВН=; ЧГ=0");
		КонецЕсли;	  
		
		ДокСсылка = соединение.Документы.РеализацияТоваровУслуг.НайтиПоНомеру(номДок, стр1.Счет.Дата );
		
		Если ДокСсылка=Неопределено или ДокСсылка.пустая() Тогда
			#Если Клиент Тогда
				сообщить("НЕ найден документ "+номДок+" - будет создан новый!", СтатусСообщения.Внимание);
			#КонецЕсли	
			Док = соединение.Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			этоНовыйДок = Истина;
		Иначе
			этоНовыйДок = ЛОЖЬ;
			//-----------------26.05.2015 - доп. БЛОКИРОВКа по приходу печ.документов------------------------------------------	
			Если ДокСсылка.Закрыт Тогда  //новый реквизит в Реализациях БП Землянского и Воробьева
				#Если Клиент Тогда
					сообщить("Существующий документ "+номДок+" - уже Закрыт от изменений! Получены все печатные документы!");
				#КонецЕсли
				Продолжить;
			КонецЕсли;
			//
			Если флПерезаписывать Тогда
			#Если Клиент Тогда
				сообщить("Существующий документ "+номДок+" - будет перезаписан.");
			#КонецЕсли
			Док = ДокСсылка.ПолучитьОбъект();
			Док.Услуги.Очистить();
			Иначе
				#Если Клиент Тогда
					сообщить("Уже существующий документ "+номДок+" в бухгалтерской базе 1С - НЕ изменен!", СтатусСообщения.Внимание);
				#КонецЕсли
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
		
	
    //2)----------------- одинаково в обоих БП!-------------------------------
	док.ВидОперации = ВидОперацииТр; // Продажа всегда!
	//док.Дата  = стр1.Счет.Дата; // дата по поступлению - не правильно!
	
	док.Дата  = ЭтотОбъект.ВремяНапоминания; // Фактическая дата и время отгрузки!
	Док.Организация = ОргТр;
	Док.СпособЗачетаАвансов	 = СпособЗачетаАвансовТр;
	Док.Склад = СкладТр;
	
	док.СчетУчетаРасчетовСКонтрагентом = СчетРасчКонтр;
	док.СчетУчетаРасчетовПоАвансам = СчетРасчАванс;
	
	док.ВалютаДокумента = ВалютаДокументаТр;
	док.КратностьВзаиморасчетов = 1;
	док.КурсВзаиморасчетов      = 1;
	
	док.УчитыватьНДС     = Истина;
	док.СуммаВключаетНДС = Истина;
	
	док.НомерПутевогоЛиста = НомерПутевогоЛиста; // 06.11.2015  - номер путевого листа в Бухгалтерии!
	док.ПробегЯШТ = Километров; // 11.11.2015

	//------------------------------- 28.01.2016 ------------------------------
	док.Маршрут  = стр1.Счет.Маршрут;
	док.Обратка  = Истина;
	док.КолТочек = 1;
	
	
	флЯШТ = ЛОЖЬ;
	Если наЯШТ="Да" Тогда
		флЯШТ = Истина;
	ИначеЕсли наЯШТ="Да" Тогда
		флЯШТ = Ложь;
	ИначеЕсли наЯШТ="" Тогда
		флЯШТ = НЕ стр1.Счет.ПометкаУдаления;//+++ 10.06.2015
	КонецЕсли;	
		
	Если флЯШТ Тогда // в договоре перевозчика!
	 	ЦенаТр 			= окр(стр1.Счет.Сумма*1.30, 2); //ВСЯ СУММА документа +30%
		Док.Комментарий = СокрЛП(ЭтотОбъект.Водитель)+"    +30%";	
		Док.Контрагент  = КонтрТр;
 Док.договорКонтрагента = ДогКонтрТр;
	Иначе
 		ЦенаТр			= стр1.Счет.Сумма;     			//ВСЯ СУММА документа Для Других!
		Док.Комментарий = СокрЛП(ЭтотОбъект.Водитель);	
		Док.Контрагент  = КонтрДР;
 Док.договорКонтрагента = ДогКонтрДР;
	 КонецЕсли;
	 
	 //+++ 28.01.2016 - ВЕСЬ комментарий по обратке!
	 Док.Комментарий = Док.Комментарий +"
	 |"+стр1.Комментарий;
	 
	стрУсл = Док.Услуги.Добавить();
	
	стрУсл.Номенклатура = УслугаТр;
	стрУсл.Содержание   = стр1.Счет.Содержание; // по 1 услуге
	
	стрУсл.Количество   = 1;
	стрУсл.Цена   = ЦенаТр;
	стрУсл.Сумма  = ЦенаТр;
	// БЕЗ НДС!
	стрУсл.СтавкаНДС = СтавкаНДСТр;
	стрУсл.СуммаНДС  = 0;
	
	стрУсл.СчетДоходов  =  СчетДоходовТр;
	стрУсл.СчетРасходов = СчетРасходовТр;
	
	//5) -------------- машина и номер ----------------------
	номерМашины0 = ЭтотОбъект.ГосНомерАвтомобиля;
	Если СокрЛП(номерМашины0)="" Тогда
		номерМашины0 = СокрЛП(стр1.Счет.МаркаАвтомобиля);
	КонецЕсли;	
	номерМашины = "";
	N = стрДлина(номерМашины0);
	
	Для i=1 по N Цикл
		Если стрДлина(номерМашины)=3 Тогда прервать; КонецЕсли; // номер из 3х цифр
		симв = сред(номерМашины0,i,1);
		Если массивЦифр.Найти( симв )<>Неопределено Тогда
			номерМашины = номерМашины + симв;
		КонецЕсли;
	КонецЦикла;
	МодельМашины = СокрЛП(ЭтотОбъект.МаркаАвтомобиля);
	
	    Если стрДлина(номерМашины)<3 Тогда
			сообщить("ГосНомер машины должен состоять из 3х цифр '"+номерМашины+"'");
			номерМашины=номерМашины+"-"; //чтобы не было поиска по пустому названию!
		КонецЕсли;

	//6) -------------- субконто НоменклатурныеГруппы----------------------
	//Если ЭтоБПЗем Тогда
		
		Если Найти(МодельМашины, " ")>0 Тогда
			МодельМашины = лев(МодельМашины, Найти(МодельМашины, " ")-1);
			сообщить("Модель машины берется только первое слово '"+МодельМашины+"'");
		КонецЕсли;	
		//------------доп.обработка названия----------------
		Если    Найти(нрег(МодельМашины),"муцу")>0	или Найти(нрег(МодельМашины),"мутсу")>0 или Найти(нрег(МодельМашины),"мутцу")>0
			или Найти(нрег(МодельМашины),"мицу")>0	или Найти(нрег(МодельМашины),"митсу")>0 или Найти(нрег(МодельМашины),"митцу")>0 
			или Найти(нрег(МодельМашины),"mitsu")>0        //Mitsubishi Lancer
			или Найти(нрег(МодельМашины),"fuso")>0 Тогда
			МодельМашины="Мицубиси";
		ИначеЕсли МодельМашины="Хендай" или МодельМашины="Хьендай"
			или МодельМашины="Хюндай"   или МодельМашины="Хьюндай"
			или МодельМашины="Хундай"   или МодельМашины="Хуиндай" или МодельМашины="Хёндай"
			или Найти(нрег(МодельМашины),"hyndai")>0
			или Найти(врег(МодельМашины),"HYUNDAI")>0 Тогда
			МодельМашины="Хундай";
		ИначеЕсли Найти(нрег(МодельМашины),"газель")>0 Тогда //ГАЗель, газель...
			МодельМашины="Газель";
		ИначеЕсли Найти(нрег(МодельМашины),"фиат")>0 
			или Найти(нрег(МодельМашины),"fiat")>0
			или Найти(нрег(МодельМашины),"дукато")>0 Тогда //фиат дукато, дукато
			МодельМашины="Фиат";
		ИначеЕсли Найти(нрег(МодельМашины),"скания")>0
			или Найти(нрег(МодельМашины),"scania")>0 Тогда //ГАЗель, газель...
			МодельМашины="Скания";
		ИначеЕсли Найти(нрег(МодельМашины),"волдай")>0 Тогда //ГАЗ Валдай
			МодельМашины="Волдай";
		КонецЕсли;	
	
		назвНомГр = номерМашины+" "+МодельМашины;
		
	//Иначе //Воробьев - только номер!
	//	
	//	назвНомГр = номерМашины;
	//		
	//КонецЕсли;
	стрУслСубконто = соединение.справочники.НоменклатурныеГруппы.НайтиПоНаименованию( назвНомГр );
	
	Если стрУслСубконто = Неопределено или стрУслСубконто.пустая() Тогда
		#Если Клиент Тогда
			Сообщить("Не найден автомобиль: '"+назвНомГр+"' в справочнике Номенклатурные Группы в БП перевозчика!", СтатусСообщения.Внимание);
		#КонецЕсли	
	Иначе		
		стрУсл.Субконто = стрУслСубконто;
	КонецЕсли;
	
	попытка
		Док.Записать(Соединение.РежимЗаписиДокумента.Проведение);
		#Если Клиент Тогда
				сообщить("Успешно записан и проведен "
				                   +?(этоНовыйДок, "новый","уже существующий")
								   +" документ "+строка(док.Номер)+" от "+строка(док.Дата), СтатусСообщения.Информация );
			#КонецЕсли	
	Исключение
		Док.Записать();
		#Если Клиент Тогда
		сообщить("Ошибка при проведении документа "+строка(док.Номер)+" от "+строка(док.Дата), СтатусСообщения.Информация );
		#КонецЕсли	
	КонецПопытки;
	
	стр1.НомерВхДок = формат( число( прав(док.Номер,6) ) ,"ЧГ=0");
	
	попытка
	док = стр1.Счет.ПолучитьОбъект();
	док.НомерВходящегоДокумента = стр1.НомерВхДок;
	док.ДатаВходящегоДокумента  = док.Дата;
	
	док.Комментарий = док.Комментарий +"
	|"+стр1.Комментарий;  //+++ 17.12.2015 полный комментарий из ЯШТ!
	
	док.Записать();
	исключение
	сообщить("Номер вх.док. - не изменен!", СтатусСообщения.Информация);
	КонецПопытки;
	
	КонецЦикла;
	
КонецПроцедуры	

Процедура КоманднаяПанель1Развернуть(Кнопка)
	для каждого стр1 из ДеревоПоПроезду.Строки цикл
		ЭлементыФормы.ДеревоПоПроезду.Развернуть(Стр1, Истина);
	КонецЦикла;
КонецПроцедуры

Процедура КоманднаяПанель1Свернуть(Кнопка)
	для каждого стр1 из ДеревоПоПроезду.Строки цикл
		ЭлементыФормы.ДеревоПоПроезду.Свернуть(стр1);
	КонецЦикла;
КонецПроцедуры

Процедура ДеревоПоПроездуПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ЭлементыФормы.ДеревоПоПроезду.Колонки.СуммаЗаТоварНал.ТекстПодвала = формат(ДеревоПоПроезду.Строки.Итог("СуммаЗаТоварНал"), "ЧДЦ=2");
	
	ЭлементыФормы.ДеревоПоПроезду.Колонки.ДоставкаНал.ТекстПодвала  = формат(ДеревоПоПроезду.Строки.Итог("ДоставкаНал"), "ЧДЦ=2");
	ЭлементыФормы.ДеревоПоПроезду.Колонки.ДоставкаБНал.ТекстПодвала = формат(ДеревоПоПроезду.Строки.Итог("ДоставкаБНал"), "ЧДЦ=2");
	ЭлементыФормы.ДеревоПоПроезду.Колонки.ДоставкаВЦене.ТекстПодвала= формат(ДеревоПоПроезду.Строки.Итог("ДоставкаВЦене"), "ЧДЦ=2");
	
	ЭлементыФормы.ДеревоПоПроезду.Колонки.Объём.ТекстПодвала = формат(ДеревоПоПроезду.Строки.Итог("Объём"), "ЧДЦ=3");
	
КонецПроцедуры

Процедура ДеревоПоПроездуПередУдалением(Элемент, Отказ)
	Предупреждение("Нельзя удалять строки!",10);
	Отказ=Истина;
КонецПроцедуры

Процедура ДеревоПоПроездуПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	Предупреждение("Нельзя Добавлять строки!",10);
	Отказ=Истина;
КонецПроцедуры

Процедура ДеревоПоПроездуПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Предупреждение("Нельзя менять данные!",10);
КонецПроцедуры



//=================Дерево очередей (3х уровневое)=======================
Процедура КоманднаяПанель3Получить(Кнопка)
	
	//----------------проверка наличия очередей в регистре-------------
	максНомерОчереди=ПолучитьКолТочек(); //+++04.08.2017  не последняя, а максимальная
	//ЗаказыПокупателей[ЗаказыПокупателей.Количество()-1].НомерОчереди;
	
//==================================================================================================	
        // Истина - по очередям и группам товаров, 
		//   ЛОЖЬ - по Группам и товарам - а потом по очередям!
		вар1 = ЭлементыФормы.КоманднаяПанель3.Кнопки.ВариантСтруктуры.Пометка;
		
		Запрос = Новый Запрос;
Если вар1 тогда		
запрос.Текст = "выбрать * поместить ВТ_Товары из &Товары как Тов;
						 |ВЫБРАТЬ
						 
					//+++ 16.11.2016	 
		             //  |	&максНомерОчереди - ЕСТЬNULL(ТаблОчередей.НомерОчереди, 0) + 1 КАК НомерОчереди,
					   |    ЕСТЬNULL(ТаблОчередей.НомерОчереди, 0)  КАК НомерОчереди,

		               |	ТаблОчередей.Контрагент,
		               |	ТаблОчередей.Номенклатура.Код КАК Код,
		               |	ТаблОчередей.Номенклатура КАК Номенклатура,
		               |	ТаблОчередей.Склад,
		               |	ТаблОчередей.АдресХранения КАК АдресХранения,
		               |	ТаблОчередей.Количество КАК КоличествоЗаказано,
		               |	ВложенныйЗапрос1.Количество КАК КоличествоМакс,
		               |	ВложенныйЗапрос1.НомерСтрокиГрСкладов КАК НомерСтрокиГрСкладов,
		               |	ВложенныйЗапрос1.НомерСтроки КАК НомерСтроки,
		               |	ВложенныйЗапрос1.ГруппаСкладов КАК ГруппаСкладов,
		               |	0 КАК Количество
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		ТаблОч.НомерОчереди КАК НомерОчереди,
		               |		ТаблОч.Контрагент КАК Контрагент,
		               |		ТаблОч.Менеджер КАК Менеджер,
		               |		ТаблОч.Номенклатура КАК Номенклатура,
		               |		ТаблОч.Склад КАК Склад,
		               |		ТаблОч.АдресХранения КАК АдресХранения,
		               |		СУММА(ТаблОч.Количество) КАК Количество
		               |	ИЗ
		               |		(ВЫБРАТЬ
		               |			ИнформацияПоПроезду.НомерОчереди КАК НомерОчереди,
		               |			ИнформацияПоПроезду.Заказ КАК Заказ,
		               |			ИнформацияПоПроезду.Контрагент КАК Контрагент,
					   
		               |			РезервНаСкладах.Номенклатура КАК Номенклатура,
		               |			РезервНаСкладах.Склад КАК Склад,
		               |			РезервНаСкладах.АдресХранения КАК АдресХранения,
		               |			ЕСТЬNULL(РезервНаСкладах.Количество, 0) КАК Количество,
		               |			ИнформацияПоПроезду.Менеджер КАК Менеджер
		               |		ИЗ
		               |			(ВЫБРАТЬ РАЗЛИЧНЫЕ
//15.11.2016 -------------------------выбираем сразу из ЗаказовПокупателей--------------------------------------					   
					   //|				Инфо.Задание КАК Задание,
					   //|				Инфо.НомерОчереди КАК НомерОчереди,
					   //|				Инфо.Контрагент КАК Контрагент,
					   //|				Инфо.Заказ КАК Заказ,
					   //|				Инфо.Менеджер КАК Менеджер
					   //|			ИЗ
		               //|				РегистрСведений.ИнформацияПоПроезду КАК Инфо
					   //|			ГДЕ 	Инфо.Задание =  &Задание
					   |				&Задание как Задание,
					   |				ЗакПок.НомерОчереди КАК НомерОчереди,
					   |				ЗакПок.ЗаказПокупателя.Контрагент как Контрагент,
					   |				ЗакПок.ЗаказПокупателя как Заказ,
					   |				ЗакПок.ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо как Менеджер
					   |			ИЗ 
					   |				Документ.ЗаданиеНаОтгрузку.ЗаказыПокупателей как ЗакПок
		               |			ГДЕ
		               |				ЗакПок.ссылка = &Задание) КАК ИнформацияПоПроезду
		               |				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |					РезервНаСкладах.Регистратор КАК Регистратор,
		               |					РезервНаСкладах.ЗаказПокупателя КАК ЗаказПокупателя,
		               |					РезервНаСкладах.Номенклатура КАК Номенклатура,
		               |					РезервНаСкладах.Склад КАК Склад,
		               |					РезервНаСкладах.АдресХранения КАК АдресХранения,
		               |					СУММА(РезервНаСкладах.Количество) КАК Количество
		               |				ИЗ
		               |					РегистрНакопления.РезервНаСкладах КАК РезервНаСкладах
		               |				ГДЕ
		               |					РезервНаСкладах.Регистратор = &Задание
		               |					И РезервНаСкладах.ВидДвижения = &ВидДвижения
		               |				
		               |				СГРУППИРОВАТЬ ПО
		               |					РезервНаСкладах.Регистратор,
		               |					РезервНаСкладах.ЗаказПокупателя,
		               |					РезервНаСкладах.Номенклатура,
		               |					РезервНаСкладах.Склад,
		               |					РезервНаСкладах.АдресХранения) КАК РезервНаСкладах
		               |				ПО ИнформацияПоПроезду.Заказ = РезервНаСкладах.ЗаказПокупателя) КАК ТаблОч
		               |	
		               |	СГРУППИРОВАТЬ ПО
		               |		ТаблОч.НомерОчереди,
		               |		ТаблОч.Контрагент,
		               |		ТаблОч.Номенклатура,
		               |		ТаблОч.Склад,
		               |		ТаблОч.АдресХранения,
		               |		ТаблОч.Менеджер) КАК ТаблОчередей
		               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			ЗаданиеНаОтгрузкуТовары.НомерСтроки КАК НомерСтроки,
		               |			ЗаданиеНаОтгрузкуТовары.Склад КАК Склад,
		               |			ЗаданиеНаОтгрузкуТовары.АдресХранения КАК АдресХранения,
		               |			ЗаданиеНаОтгрузкуТовары.Номенклатура КАК Номенклатура,
		               |			ЗаданиеНаОтгрузкуТовары.КоличествоЗаказано КАК КоличествоЗаказано,
		               |			ЗаданиеНаОтгрузкуТовары.Количество КАК Количество,
		               |			ЗаданиеНаОтгрузкуТовары.ГруппаСкладов КАК ГруппаСкладов,
		               |			ЗаданиеНаОтгрузкуГруппыСкладов.НомерСтроки КАК НомерСтрокиГрСкладов
		               |		ИЗ
		               |			ВТ_Товары КАК ЗаданиеНаОтгрузкуТовары
		               |				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаОтгрузку.ГруппыСкладов КАК ЗаданиеНаОтгрузкуГруппыСкладов
		               |				ПО ЗаданиеНаОтгрузкуТовары.ГруппаСкладов = ЗаданиеНаОтгрузкуГруппыСкладов.ГруппаСкладов
		               |		ГДЕ
		              // |			ЗаданиеНаОтгрузкуТовары.Ссылка = &Задание
		               |			ЗаданиеНаОтгрузкуГруппыСкладов.Ссылка = &Задание) КАК ВложенныйЗапрос1
		               |		ПО ТаблОчередей.Номенклатура = ВложенныйЗапрос1.Номенклатура
		               |			И ТаблОчередей.Склад = ВложенныйЗапрос1.Склад
		               |			И ТаблОчередей.АдресХранения = ВложенныйЗапрос1.АдресХранения
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	НомерОчереди,
		               |	НомерСтрокиГрСкладов,
		               |	ТаблОчередей.АдресХранения.Порядок,
		               |	НомерСтроки
		               |ИТОГИ
		               |	СУММА(КоличествоЗаказано),
		               |	СУММА(КоличествоМакс),
		               |	СУММА(Количество)
		               |ПО
		               |	НомерОчереди,
		               |	ГруппаСкладов
		               |АВТОУПОРЯДОЧИВАНИЕ"
				   иначе
					   		Запрос.Текст = "выбрать * поместить ВТ_Товары из &Товары как Тов;
										   |ВЫБРАТЬ
					   		               |	ТаблОчередей.Контрагент,
					   		               |	ВложенныйЗапрос1.НомерСтроки КАК НомерСтроки,
										   |	ВложенныйЗапрос1.Номенклатура КАК Номенклатура,
					   		                 |	ВложенныйЗапрос1.Код КАК Код,
					   		            |	ВложенныйЗапрос1.Склад,
					   		               |	ВложенныйЗапрос1.АдресХранения КАК АдресХранения,
					   		               |	ВложенныйЗапрос1.Количество КАК КоличествоМакс,
					   		               |	ВложенныйЗапрос1.НомерСтрокиГрСкладов КАК НомерСтрокиГрСкладов,
					   		               |	ВложенныйЗапрос1.ГруппаСкладов КАК ГруппаСкладов,
					   		               |	&максНомерОчереди - ЕСТЬNULL(ТаблОчередей.НомерОчереди, 0) + 1 КАК НомерОчереди,
					   		               |	ЕСТЬNULL(ТаблОчередей.Количество, 0) КАК КоличествоЗаказано,
					   		               |	0 КАК Количество
					   		               |ИЗ
					   		               |	(ВЫБРАТЬ
					   		               |		ЗаданиеНаОтгрузкуТовары.НомерСтроки КАК НомерСтроки,
					   		               |		ЗаданиеНаОтгрузкуТовары.Склад КАК Склад,
					   		               |		ЗаданиеНаОтгрузкуТовары.АдресХранения КАК АдресХранения,
					   		               |		ЗаданиеНаОтгрузкуТовары.Номенклатура КАК Номенклатура,
										     |		ЗаданиеНаОтгрузкуТовары.Код КАК Код,
					   		               |		ЗаданиеНаОтгрузкуТовары.КоличествоЗаказано КАК КоличествоЗаказано,
					   		               |		ЗаданиеНаОтгрузкуТовары.Количество КАК Количество,
					   		               |		ЗаданиеНаОтгрузкуТовары.ГруппаСкладов КАК ГруппаСкладов,
					   		               |		ЗаданиеНаОтгрузкуГруппыСкладов.НомерСтроки КАК НомерСтрокиГрСкладов
					   		               |	ИЗ
					   		               |		ВТ_Товары КАК ЗаданиеНаОтгрузкуТовары
					   		               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаОтгрузку.ГруппыСкладов КАК ЗаданиеНаОтгрузкуГруппыСкладов
					   		               |			ПО ЗаданиеНаОтгрузкуТовары.ГруппаСкладов = ЗаданиеНаОтгрузкуГруппыСкладов.ГруппаСкладов
					   		               |	ГДЕ
					   		            //   |		ЗаданиеНаОтгрузкуТовары.Ссылка = &Задание
					   		               |		 ЗаданиеНаОтгрузкуГруппыСкладов.Ссылка = &Задание) КАК ВложенныйЗапрос1
					   		               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					   		               |			ТаблОч.НомерОчереди КАК НомерОчереди,
					   		               |			ТаблОч.Контрагент КАК Контрагент,
					   		               |			ТаблОч.Менеджер КАК Менеджер,
					   		               |			ТаблОч.Номенклатура КАК Номенклатура,
					   		               |			ТаблОч.Склад КАК Склад,
					   		               |			ТаблОч.АдресХранения КАК АдресХранения,
					   		               |			СУММА(ТаблОч.Количество) КАК Количество
					   		               |		ИЗ
					   		               |			(ВЫБРАТЬ
					   		               |				ИнформацияПоПроезду.НомерОчереди КАК НомерОчереди,
					   		               |				ИнформацияПоПроезду.Заказ КАК Заказ,
					   		               |				ИнформацияПоПроезду.Контрагент КАК Контрагент,
					   		               |				РезервНаСкладах.Номенклатура КАК Номенклатура,
					   		               |				РезервНаСкладах.Склад КАК Склад,
					   		               |				РезервНаСкладах.АдресХранения КАК АдресХранения,
					   		               |				ЕСТЬNULL(РезервНаСкладах.Количество, 0) КАК Количество,
					   		               |				ИнформацияПоПроезду.Менеджер КАК Менеджер
					   		               |			ИЗ
					   		               |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
										   //15.11.2016 -------------------------выбираем сразу из ЗаказовПокупателей--------------------------------------					   
										   //|					Инфо.Задание КАК Задание,
										   //|					Инфо.НомерОчереди КАК НомерОчереди,
										   //|					Инфо.Контрагент КАК Контрагент,
										   //|					Инфо.Заказ КАК Заказ,
										   //|					Инфо.Менеджер КАК Менеджер
										   //|				ИЗ
										   //|					РегистрСведений.ИнформацияПоПроезду КАК Инфо
										   //|				ГДЕ
										   //|					Инфо.Задание = &Задание
										   |				&Задание как Задание,
										   |				ЗакПок.НомерОчереди КАК НомерОчереди,
										   |				ЗакПок.ЗаказПокупателя.Контрагент как Контрагент,
										   |				ЗакПок.ЗаказПокупателя как Заказ,
										   |				ЗакПок.ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо как Менеджер
										   |			ИЗ 
										   |				Документ.ЗаданиеНаОтгрузку.ЗаказыПокупателей как ЗакПок
							               |			ГДЕ
							               |				ЗакПок.ссылка = &Задание) КАК ИнформацияПоПроезду
										   
					   		               |					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					   		               |						РезервНаСкладах.Регистратор КАК Регистратор,
					   		               |						РезервНаСкладах.ЗаказПокупателя КАК ЗаказПокупателя,
					   		               |						РезервНаСкладах.Номенклатура КАК Номенклатура,
					   		               |						РезервНаСкладах.Склад КАК Склад,
					   		               |						РезервНаСкладах.АдресХранения КАК АдресХранения,
					   		               |						СУММА(РезервНаСкладах.Количество) КАК Количество
					   		               |					ИЗ
					   		               |						РегистрНакопления.РезервНаСкладах КАК РезервНаСкладах
					   		               |					ГДЕ
					   		               |						РезервНаСкладах.Регистратор = &Задание
					   		               |						И РезервНаСкладах.ВидДвижения = &ВидДвижения
					   		               |					
					   		               |					СГРУППИРОВАТЬ ПО
					   		               |						РезервНаСкладах.Регистратор,
					   		               |						РезервНаСкладах.ЗаказПокупателя,
					   		               |						РезервНаСкладах.Номенклатура,
					   		               |						РезервНаСкладах.Склад,
					   		               |						РезервНаСкладах.АдресХранения) КАК РезервНаСкладах
					   		               |					ПО ИнформацияПоПроезду.Заказ = РезервНаСкладах.ЗаказПокупателя) КАК ТаблОч
					   		               |		
					   		               |		СГРУППИРОВАТЬ ПО
					   		               |			ТаблОч.НомерОчереди,
					   		               |			ТаблОч.Контрагент,
					   		               |			ТаблОч.Номенклатура,
					   		               |			ТаблОч.Склад,
					   		               |			ТаблОч.АдресХранения,
					   		               |			ТаблОч.Менеджер) КАК ТаблОчередей
					   		               |		ПО (ТаблОчередей.Номенклатура = ВложенныйЗапрос1.Номенклатура)
					   		               |			И (ТаблОчередей.Склад = ВложенныйЗапрос1.Склад)
					   		               |			И (ТаблОчередей.АдресХранения = ВложенныйЗапрос1.АдресХранения)
					   		               |
					   		               |УПОРЯДОЧИТЬ ПО
					   		               |	НомерСтроки,
					   		               |	НомерСтрокиГрСкладов,
					   		               |	НомерОчереди
					   		               |ИТОГИ
					   		               |	МИНИМУМ(НомерСтроки),
					   		               |	СУММА(КоличествоМакс),
					   		               |	МИНИМУМ(НомерОчереди),
					   		               |	СУММА(КоличествоЗаказано),
					   		               |	СУММА(Количество)
					   		               |ПО
					   		               |	Номенклатура,
					   		               |	ГруппаСкладов
					   		               |АВТОУПОРЯДОЧИВАНИЕ"; 
КонецЕсли;
						   
	Запрос.УстановитьПараметр("Задание",Ссылка);	
	
	//+++ 03.11.2015 - текущая таблица
	таблТовары = Товары.Выгрузить();
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	Кс9 = Новый КвалификаторыСтроки(9);
	ОписаниеТиповС9 = Новый ОписаниеТипов(Массив, , Кс9 );
	
	таблТовары.Колонки.Добавить("Код", ОписаниеТиповС9, "Код");
	для каждого стр1 из таблТовары цикл
		стр1.Код = стр1.Номенклатура.Код;
	КонецЦикла;	
	Запрос.УстановитьПараметр("Товары", таблТовары );					   

	Запрос.УстановитьПараметр("максНомерОчереди",максНомерОчереди);					   
	// для недогрузов - показывает только то, что НЕ выгружено
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
	
	Результат = Запрос.Выполнить();
	ДеревоОчередей = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);	 
	
	//------------сворачивание--------------
	для каждого стрОч из ДеревоОчередей.Строки цикл
			ЭлементыФормы.ДеревоОчередей.Развернуть(стрОч, истина);
			для каждого стрГруппа из стрОч.Строки цикл
		    	ЭлементыФормы.ДеревоОчередей.Свернуть(стрГруппа);
			КонецЦикла;
	КонецЦикла;
	
	
	для каждого стрОч из ДеревоОчередей.Строки цикл
		для каждого стрГруппа из стрОч.Строки цикл
			для каждого стрТов из стрГруппа.Строки цикл
				
				//Если стрТов.КоличествоЗаказано<>стрТов.КоличествоМакс тогда
				стрТов.КоличествоМакс = ?(стрТов.КоличествоМакс=null,0,стрТов.КоличествоМакс);
				   отгружено1 = мин(стрТов.КоличествоЗаказано, стрТов.КоличествоМакс);
				   стрТов.Количество = отгружено1;
				   стрТов.КоличествоМакс = стрТов.КоличествоМакс-отгружено1; // остаток!
				    флАдрес = ЗначениеЗаполнено(стрТов.АдресХранения);
				   //--------------------дальше по дереву----------------
				   для каждого стрОч2 из ДеревоОчередей.Строки цикл
					   для каждого стрГруппа2 из стрОч2.Строки цикл
						   для каждого стрТов2 из стрГруппа2.Строки цикл
							   
							   Если   ?(стрТов2.Количество=Null,0,стрТов2.Количество) =0 
									и ?(стрТов2.КоличествоМакс=Null,0,стрТов2.КоличествоМакс)>0 
									и стрТов2.Номенклатура = стрТов.Номенклатура 
									и стрТов2.Склад = стрТов.Склад 
									и (не флАдрес
									   или (флАдрес и стрТов2.АдресХранения = стрТов.АдресХранения)
									  ) тогда // для той же номенклатуры!
									
										  отгружено2 = мин(стрТов2.КоличествоЗаказано,  стрТов.КоличествоМакс);
										  стрТов2.Количество = отгружено2; //стрТов2.Количество + отгружено2;
										  
									//------------уменьшаем и начальное количество Макс-------------------
									стрТов.КоличествоМакс   = стрТов.КоличествоМакс - отгружено2;
									
									стрГруппа2.КоличествоМакс = стрГруппа2.КоличествоМакс - стрТов2.КоличествоМакс + отгружено2;
									стрТов2.КоличествоМакс    = отгружено2;//именно макс!?
																											
								КонецЕсли;
								
							КонецЦикла;	
						КонецЦикла;
					КонецЦикла;
									
					Если стрТов.КоличествоМакс > 0 тогда // остаток (перегруз) в 1-ю группу
					стрТов.Количество = стрТов.Количество + стрТов.КоличествоМакс;	
				    стрТов.КоличествоМакс = 0;
				    КонецЕсли;
		
				//КонецЕсли;   
				   
			КонецЦикла;	// тов
			
		стрГруппа.Количество = стрГруппа.Строки.Итог("Количество");
		стрГруппа.КоличествоМакс = стрГруппа.Строки.Итог("КоличествоМакс");
		КонецЦикла;
	
	стрОч.Количество = стрОч.Строки.Итог("Количество");
	стрОч.КоличествоМакс = стрОч.Строки.Итог("КоличествоМакс");
	КонецЦикла;
	

КонецПроцедуры


Процедура ДеревоОчередейКоличествоФактПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	// Заполним вкладку "ТОВАРЫ "
	текСтр = ЭлементыФормы.ДеревоОчередей.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(текСтр.Склад) Тогда 
		Предупреждение("Надо заносить количество в строку по складу!!!", 10);
		Возврат;
	КонецЕсли;
	
	//при изменении - надо изменить и родителя
	колОтгр = 0;
	для каждого стр1 из текСтр.Родитель.Строки цикл
		колОтгр = колОтгр + стр1.Количество;
	КонецЦикла;
	delta  = колОтгр - текСтр.Родитель.Количество;
	текСтр.Родитель.Количество = текСтр.Родитель.Количество + delta;
	текСтр.Родитель.Родитель.Количество = текСтр.Родитель.Родитель.Количество + delta;
	
	КоличествоОтгружено = 0;  
	флАдрес = ЗначениеЗаполнено(ТекСтр.АдресХранения);
	для каждого стрОч из ДеревоОчередей.строки цикл
		для каждого стрГруппы из стрОч.Строки цикл
			для каждого стрТов из стрГруппы.Строки цикл
			Если стрТов.Номенклатура = ТекСтр.Номенклатура
				и стрТов.Склад = ТекСтр.Склад
				и (не флАдрес 
				    или (флАдрес и стрТов.АдресХранения = ТекСтр.АдресХранения)
				  ) тогда
				КоличествоОтгружено = КоличествоОтгружено + стрТов.Количество;
			КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;	
    
	Отбор = Новый Структура;
	Отбор.Вставить("Номенклатура",текСтр.Номенклатура);
	//Отбор.Вставить("ГруппаСкладов",текСтр.ГруппаСкладов);
	Отбор.Вставить("Склад",текСтр.Склад);
	Отбор.Вставить("АдресХранения",текСтр.АдресХранения);
	МассивСтрок = Товары.НайтиСтроки(Отбор);
	
	Если МассивСтрок.Количество()=1 тогда
		МассивСтрок[0].Количество = КоличествоОтгружено; 
		Если КоличествоОтгружено>МассивСтрок[0].КоличествоЗаказано тогда
			Предупреждение("Отгрузка по товару - больше чем надо по складу!", 10);		
		КонецЕсли;
		
	ИначеЕсли МассивСтрок.Количество()=0 тогда
		Предупреждение("Не найдена текущая строка в таблице Товары!!!", 10);
		Возврат;
	Иначе // Кол>1
	// Списываем по фифо
	// 1.
	//МассивСтрок - все
	КоличествоОстаток = КоличествоОтгружено;
	
	Если (текСтр.КоличествоЗаказано<текСтр.Количество) Тогда 
		Предупреждение("Отгружено больше чем надо в текущей строке!", 10);		
	КонецЕсли;
	
	Для Каждого Строка из МассивСтрок Цикл
		
		ОсталосьОтгрузить = Строка.КоличествоЗаказано - Строка.Количество;
		
		Если ОсталосьОтгрузить>КоличествоОстаток Тогда 
			Строка.Количество = Строка.Количество + КоличествоОстаток;
			КоличествоОстаток = 0;
			Прервать;
		Иначе
			Строка.Количество = Строка.Количество + ОсталосьОтгрузить; 
			КоличествоОстаток = КоличествоОстаток - ОсталосьОтгрузить;
		КонецЕсли;
		
		Если КоличествоОстаток<=0 Тогда 
			Прервать;
		Конецесли;
		
	КонецЦикла;
	
	Если КоличествоОстаток>0 Тогда 
	 МассивСтрок[МассивСтрок.Количество()-1].Количество = МассивСтрок[МассивСтрок.Количество()-1].Количество  + КоличествоОстаток;
	 Предупреждение("Перегруз по товару с кодом "+строка(текСтр.Номенклатура.Код)+" со склада: "+строка(текСтр.Склад)
	 			+?(ЗначениеЗаполнено(текСтр.АдресХранения), " с адреса: "+строка(текСтр.АдресХранения), "")
	 			 +" на "+строка(КоличествоОстаток)+" шт.", 30);
	КонецЕсли;
 КонецЕсли;

КонецПроцедуры

Процедура ДеревоОчередейСкладПриИзменении(Элемент)
	
	текСтр = ЭлементыФормы.ДеревоОчередей.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(текСтр.Склад) Тогда 
		Предупреждение("Надо заносить количество в строку по складу!!!", 10);
		Возврат;
	КонецЕсли;
	
	Если текСтр.Склад.АдресноеХранение 
		и (текСтр.АдресХранения.пустая() или текСтр.АдресХранения.Владелец <> текСтр.Склад) тогда
		Предупреждение("Выберите сразу Адрес хранения для транзитного склада!", 10);
		Возврат;
	КонецЕсли;
	
	текСтр.ГруппаСкладов = ?(текСтр.Склад.ГруппаСкладов.пустая(), справочники.ГруппыСкладов.ОсновнойСклад, текСтр.Склад.ГруппаСкладов);

	флНашли = ложь;
	для каждого стр2 из Товары цикл
		Если стр2.НомерСтроки  = текСтр.НомерСтроки тогда
			 флНашли = истина;
			 прервать;
		КонецЕсли;	
	КонецЦикла;
	
	Если флНашли тогда
		Если стр2.Количество = текСтр.Количество тогда
			стр2.ГруппаСкладов = текСтр.ГруппаСкладов;
			стр2.Склад = текСтр.Склад;
			стр2.АдресХранения = текСтр.АдресХранения; 
		Иначе
			Если стр2.КоличествоЗаказано - текСтр.Количество >0 тогда
				стр3 = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(стр3, стр2); //текущая строка копируется в 3-ю
			
				ЗаполнитьЗначенияСвойств( стр2, текСтр);//2-я меняется
				стр2.КоличествоЗаказано = стр2.Количество;
				
				стр3.КоличествоЗаказано = стр3.КоличествоЗаказано - стр2.КоличествоЗаказано;
				стр3.Количество = стр3.Количество - стр2.Количество;    //3-я уменьшается
				
				Предупреждение("В закладке товары - строка №"+строка(текСтр.НомерСтроки)+" разделена на 2,
							   |добавлена строка № "+ строка(стр3.НомерСтроки), 10);
			Иначе
				стр2.ГруппаСкладов = текСтр.ГруппаСкладов;
				стр2.Склад = текСтр.Склад;
				стр2.АдресХранения = текСтр.АдресХранения; 
			КонецЕсли;
		КонецЕсли;
		
		//Если ЭтотОбъект.Проведен тогда
			Предупреждение("После изменения склада - будет установлен новый резерв!", 10);
			ЭтотОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		//КонецЕсли;	
		
	Иначе
	Предупреждение("Не найдена строка с номером "+строка(текСтр.НомерСтроки), 10);
	КонецЕсли;

КонецПроцедуры


Процедура КоманднаяПанель3РазвернутьВсе(Кнопка)
	для каждого стрОч из ДеревоОчередей.Строки цикл
		ЭлементыФормы.ДеревоОчередей.Развернуть(стрОч, Истина);
			для каждого стрГруппа из стрОч.Строки цикл
	    	ЭлементыФормы.ДеревоОчередей.Развернуть(стрГруппа, Истина);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура КоманднаяПанель3СвернутьВсе(Кнопка)
	для каждого стрОч из ДеревоОчередей.Строки цикл
		ЭлементыФормы.ДеревоОчередей.Свернуть(стрОч);
		для каждого стрГруппа из стрОч.Строки цикл
	    	ЭлементыФормы.ДеревоОчередей.Свернуть(стрОч);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ДеревоОчередейПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.КоличествоЗаказано<>ДанныеСтроки.Количество тогда
		ОформлениеСтроки.Шрифт = новый Шрифт(ОформлениеСтроки.Шрифт,,,Истина);
 		если ДанныеСтроки.КоличествоЗаказано<ДанныеСтроки.Количество тогда // перегруз!
			ОформлениеСтроки.ЦветТекста = webЦвета.Красный;
		КонецЕсли;	
	КонецЕсли;	
	Если ДанныеСтроки.Количество=0 тогда // ничего нет!
		ОформлениеСтроки.ЦветТекста = webЦвета.ТемноСиний;
	КонецЕсли;	
КонецПроцедуры

Процедура КоманднаяПанель3ВариантСтруктуры(Кнопка)
//ЭлементыФормы.КоманднаяПанель3.Кнопки.ВариантСтруктуры.Пометка = НЕ ЭлементыФормы.КоманднаяПанель3.Кнопки.ВариантСтруктуры.Пометка;
	Если ЭлементыФормы.КоманднаяПанель3.Кнопки.ВариантСтруктуры.Пометка тогда
		ЭлементыФормы.КоманднаяПанель3.Кнопки.ВариантСтруктуры.текст = "по очередям(по новому)"; 
	иначе
		ЭлементыФормы.КоманднаяПанель3.Кнопки.ВариантСтруктуры.текст = "по товарам и очередям";
	КонецЕсли;	
	КоманднаяПанель3Получить(неопределено);
КонецПроцедуры

Процедура номСтруктурыПриИзменении(Элемент)
	ЭлементыФормы.КоманднаяПанель3.Кнопки.ВариантСтруктуры.Пометка = номСтруктуры;
	КоманднаяПанель3ВариантСтруктуры(неопределено);
КонецПроцедуры

Процедура НомерПутевогоЛистаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	Если НомерПутевогоЛиста = "" тогда НомерПутевогоЛиста = "0"; КонецЕсли;
	
НомерПутевогоЛиста = лев(НомерПутевогоЛиста,1)+формат( число( прав(НомерПутевогоЛиста,6) ) + Направление, "ЧЦ=7; ЧВН=; ЧГ=0");//префикс 1 символ	
		
КонецПроцедуры

Процедура ДеревоОчередейСкладНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	
	текСтр = ЭлементыФормы.ДеревоОчередей.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(текСтр.Склад) Тогда 
		Предупреждение("Надо заносить количество в строку по складу!!!", 10);
		Возврат;
	КонецЕсли;

	если ЭтотОбъект.Проведен тогда
		Предупреждение("Перед выбором склада - будет снят резерв с этого заказа!", 10);
		ЭтотОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;	
	
	выборкаСкладов = ПолучитьСвободныйОстатокГруппы( текСтр.Номенклатура ); // ВСЕ склады
	
	Если выборкаСкладов.Количество()=0 Тогда 
		Предупреждение("Нет свободных остатков Для товара с кодом: "+строка(текСтр.Номенклатура.Код)+" по группе складов: "+строка(текСтр.ГруппаСкладов));
		Возврат;
	КонецЕсли;
	

	
	списокСкладов = Новый СписокЗначений;
	пока выборкаСкладов.Следующий() Цикл
		 списокСкладов.Добавить(выборкаСкладов.Склад);
	КонецЦикла;	
	
	формаВыбораСклада = справочники.Склады.ПолучитьФормуВыбора();
	
	формаВыбораСклада.СправочникСписок.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
	формаВыбораСклада.СправочникСписок.Отбор.Ссылка.Значение = списокСкладов;
	формаВыбораСклада.СправочникСписок.Отбор.Ссылка.Использование = Истина;
	
	формаВыбораСклада.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Ложь;
	текСтр.Склад = формаВыбораСклада.ОткрытьМодально();
    текСтр.ГруппаСкладов = ?(текСтр.Склад.ГруппаСкладов.пустая(), справочники.ГруппыСкладов.ОсновнойСклад, текСтр.Склад.ГруппаСкладов);
	ДеревоОчередейСкладПриИзменении(неопределено);
КонецПроцедуры

Процедура ДеревоОчередейАдресХраненияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	текСтр = ЭлементыФормы.ДеревоОчередей.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(текСтр.Склад) тогда
		Предупреждение("Выбирайте адрес в строке со складом", 10);
		возврат;
	КонецЕсли;	
	
	выборкаАдресов = ПолучитьСвободныйОстатокВсехАдресов(текСтр.Номенклатура);
	
	Если выборкаАдресов.Количество()=0 Тогда 
		Предупреждение("Нет свободных остатков Для товара с кодом: "+строка(текСтр.Номенклатура.Код)+" по адресам хранения на складе: "+строка(текСтр.Склад));
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = ложь;
	
	списокАдресовХранения = Новый СписокЗначений;
	пока выборкаАдресов.Следующий() Цикл
		 списокАдресовХранения.Добавить(выборкаАдресов.АдресХранения);
	КонецЦикла;	
	
	формаВыбораСклада = справочники.АдресаХранения.ПолучитьФормуВыбора();
	
	формаВыбораСклада.СправочникСписок.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
	формаВыбораСклада.СправочникСписок.Отбор.Ссылка.Значение = списокАдресовХранения;
	формаВыбораСклада.СправочникСписок.Отбор.Ссылка.Использование = Истина;
	
	формаВыбораСклада.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Ложь;
	текСтр.АдресХранения = формаВыбораСклада.ОткрытьМодально();

//	Если текСтр.Склад<>текСтр.АдресХранения.Владелец тогда
		текСтр.Склад=текСтр.АдресХранения.Владелец;
		текСтр.ГруппаСкладов = ?(текСтр.Склад.ГруппаСкладов.пустая(), справочники.ГруппыСкладов.ОсновнойСклад, текСтр.Склад.ГруппаСкладов);
		ДеревоОчередейСкладПриИзменении(неопределено);
//	КонецЕсли;	
		
КонецПроцедуры

Процедура КоманднаяПанельТоварыСФ(Кнопка)
		СчРеал =0;
	Для каждого стр из ЗаказыПокупателей Цикл
		Если Стр.Реализация <> Документы.РеализацияТоваровУслуг.ПустаяСсылка() и ТипЗнч(стр.Реализация) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Если стр.Реализация.Проведен и Найти(Стр.Реализация.ДоговорКонтрагента.Наименование,"*") = 0 Тогда
				СчРеал= СчРеал+1;
			конецЕсли;	
		конецесли;	
	конецЦикла;
Сообщить("Счета-фактуры будут созданы для "+СчРеал+" реализаций");
Если счРеал =0 Тогда
	возврат;
КонецЕсли;	

Сообщить(строка(ТекущаяДата())+"Загрузка началась. ");

удалитьфайлы(КаталогВременныхФайлов(),"*.mxl");
	
UsrPwd = "Usr=""Робот (центр - номенклатура)"";Pwd=""09876""";
//Base  = "File=""C:\Базы 1С\Бухгалтерия ЯШТ копия";
//Base   = "File=""C:\Базы 1С\Бухгалтерия ЯШТ копия"""; 
Base   =  "Srvr=""server"";Ref=""v82ib_yst_bp""";
v8connect = Новый COMОбъект("V82.ComConnector");
СтрокаСоединенияCOM = Base+";"+UsrPwd;
Попытка
	Соединение = v8connect.Connect(СтрокаСоединенияCOM);
	#Если Клиент Тогда
		Сообщить(строка(ТекущаяДата())+" Успешно Установлено подключение к базе 1С V8:"+base, СтатусСообщения.Информация);
	#КонецЕсли
Исключение
	#Если Клиент Тогда
		Сообщить("НЕТ подключения к базе 1С V8:"+base+" ! ", СтатусСообщения.Внимание);
	#КонецЕсли
	Возврат;
КонецПопытки;
 	Для каждого стр из ЗаказыПокупателей Цикл
		Если Стр.Реализация <> Документы.РеализацияТоваровУслуг.ПустаяСсылка() и ТипЗнч(стр.Реализация) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Если стр.Реализация.Проведен и Найти(Стр.Реализация.ДоговорКонтрагента.Наименование,"*") = 0 Тогда
				ДокОбъект=стр.Реализация.получитьОбъект();
				ДокОбъект.ПеренестиДокиВБухгалтерию(Соединение);
			конецЕсли;	
		конецесли;	
	конецЦикла;
 Сообщить("Загрузили все счета-фактуры!!!");

КонецПроцедуры

Процедура ДокументыСданыЛогистамПриИзменении(Элемент)
			
		//11.12.2015 - ТОЛЬКО по [v]
		Если ДокументыСданыЛогистам
			//+++ 02.06.2017 - выключено
			и ( //Найти(Перевозчик,"Воробьев")>0  или  
			   Найти(Перевозчик, "Землянский")>0  или
			   Найти(Перевозчик,"Малышев")>0
			   ) Тогда
			Если Вопрос("Выгрузить счета перевозчика ИП Малышев в бухгалтерию?", РежимДиалогаВопрос.ДаНет, 30) = КодВозвратаДиалога.да Тогда
				
				//КоманднаяПанель2Обновить(Неопределено);
				
		    	флПерезаписывать = Истина;
		 		КоманднаяПанель2ВыгрузитьВБП(Неопределено); //и сразу в БП
				
			КонецЕсли;	
		КонецЕсли;

КонецПроцедуры



//====================Обратки=========================================
Процедура ТабличноеПоле1ПробегПриИзменении(Элемент)
	текСтр = ЭлементыФормы.Обратки.ТекущиеДанные;
	текСтр.Тариф = ?(текСтр.Пробег=0,0,текСтр.Сумма/текСтр.Пробег);
КонецПроцедуры

Процедура ТабличноеПоле1ТарифПриИзменении(Элемент)
	текСтр = ЭлементыФормы.Обратки.ТекущиеДанные;
	текСтр.Сумма = текСтр.Тариф * текСтр.Пробег;
КонецПроцедуры

Процедура ТабличноеПоле1ПриПолученииДанных(Элемент, ОформленияСтрок)
	
	//----- 28.01.2016 - новое распределение - не надо! -------
	СуммаОбратки = 0;
	СуммаОбраткиЯШТ = 0;
	для каждого стр1 из Обратки цикл
		если найти(нрег(стр1.Контрагент),"яршинторг")>0 тогда // получатель
			СуммаОбраткиЯШТ = СуммаОбраткиЯШТ + стр1.Сумма;
		иначе
			СуммаОбратки = СуммаОбратки + стр1.Сумма;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СуммаОбраткиПриИзменении(Элемент)
	Если Обратки.Количество()=0 и СуммаОбратки>0 тогда
		стр1 = Обратки.Добавить();
		стр1.Контрагент  = "Другие";
		стр1.Направление = СокрЛП(строка(этотобъект.Направление))+"-Ярославль";
		стр1.Пробег = Километров;
		стр1.Сумма  = СуммаОбратки;
		стр1.Тариф  = ?(стр1.Пробег=0,0,стр1.Сумма/стр1.Пробег);
		
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Обратки;
	иначеЕсли СуммаОбратки=0 и Обратки.Количество()>0 тогда
		Если Вопрос("Удалить все обратки?", РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да тогда
			Обратки.Очистить();
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

Процедура КоманднаяПанель4ВыставитьОбратки(Кнопка)
	Если Обратки.Количество()=0 тогда
		Предупреждение("Нет документов на обратный рейс!
					   |Не заполнена таблица Тр.Затрат - Обратки!", 30);
					   
	ИначеЕсли Обратки.Итог("Сумма")=0 тогда //06.07.2017
		Предупреждение("Не заполнена сумма транспорта на обратный рейс!
					   |Не заполнена Сумма в таблица Тр.Затрат - Обратки!", 30);
	Иначе
		флПерезаписывать = истина;
		СоздатьПоступлениеДопРасходов();
    КонецЕсли;
КонецПроцедуры

Процедура ПодразделениеПриИзменении(Элемент)
	УстановитьНомерДокумента(ЭтотОбъект);
КонецПроцедуры

Процедура ВЫполнитьСписаниеСОТХ(Рез,ГрВыбор)
	
	// Если, есть и у АШК и у Нортек, тогда берем с АШК ========================
	
	ДляУдаления = Рез.Скопировать();
	
	Для каждого стр из ДляУдаления Цикл
		ОтборНом = Новый Структура;
		ОтборНом.Вставить("Номенклатура",стр.Номенклатура);
		
		СОтборомПоНом = ДляУдаления.Скопировать(ОтборНом);
		
		Если СОтборомПоНом.Количество()>1 Тогда
			Для Индекс = -Рез.Количество() По -1 Цикл
				уд = Рез.Получить(-Индекс-1);
				Если уд.Контрагент = Справочники.Контрагенты.НайтиПоКоду("П007527") и уд.Номенклатура = стр.Номенклатура Тогда
					Рез.Удалить(-Индекс-1);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
 //+++( 24.04.2017 -  ограничение по ном.группам --- рег.св.  ОтсрочкиПлатежейПоставщикам -------------------
	 ЗапросНомГр = Новый Запрос;
	 ЗапросНомГр.Текст = "ВЫБРАТЬ
	 |	ОтсрочкиПлатежейПоставщикам.Поставщик,
	 |	ОтсрочкиПлатежейПоставщикам.НоменклатурнаяГруппа,
	 |	ОтсрочкиПлатежейПоставщикам.ОтсрочкаДней
	 |ИЗ
	 |	РегистрСведений.ОтсрочкиПлатежейПоставщикам КАК ОтсрочкиПлатежейПоставщикам
	 |ГДЕ
	 |	ОтсрочкиПлатежейПоставщикам.Поставщик В(&СписокКонтрагентов)";
	 табл1 = рез.скопировать(,"Контрагент");	 
	 табл1.Свернуть("Контрагент");
	 СписокКонтрагентов = табл1.ВыгрузитьКолонку("Контрагент");
	 ЗапросНомГр.УстановитьПараметр("СписокКонтрагентов", СписокКонтрагентов );
	 РезультатГр = ЗапросНомГр.Выполнить();
	 ТаблНомГр = РезультатГр.Выгрузить();
	 i=0;
	 пока i<рез.Количество() Цикл //======
		 
		 ДелатьСписаниеОТХ = ложь;
		 
		 для j=0 по ТаблНомГр.Количество()-1 цикл
			 если рез[i].Контрагент = ТаблНомГр[j].Поставщик тогда
				 если ТаблНомГр[j].НоменклатурнаяГруппа = справочники.НоменклатурныеГруппы.ПустаяСсылка() тогда
					 ДелатьСписаниеОТХ = истина;
					 прервать; //
				 иначеесли ТаблНомГр[j].НоменклатурнаяГруппа = рез[i].Номенклатура.НоменклатурнаяГруппа тогда
					 ДелатьСписаниеОТХ = истина;
					 прервать; //
				 КонецЕсли;	 
			 КонецЕсли;
		 КонецЦикла;	 
		 
		 Если ДелатьСписаниеОТХ тогда
			 i=i+1;
		 Иначе
			 Сообщить("Товар "+строка( рез[i].Номенклатура )+" по ном.группе: "+строка(рез[i].Номенклатура.НоменклатурнаяГруппа)
			 +" - нельзя списывать с ОТХ по производителю: "+строка(рез[i].Контрагент), СтатусСообщения.Внимание );
			 рез.Удалить(i);
		 КонецЕсли;	 
	 КонецЦикла;
	 //+++) 

	 //==========================================================================
	
	Ск= ГрВыбор.Скопировать();
	Ск.Свернуть("ГруппаСкладов");
	СписокРазрешенныхГрупп = Новый СписокЗначений;
	СписокРазрешенныхГрупп.ЗагрузитьЗначения(Ск.ВыгрузитьКолонку("ГруппаСкладов"));
	
	ПоКонтрагентам = Рез.Скопировать();
	ПоКонтрагентам.Свернуть("Контрагент,ДоговорКонтрагента");
	
	Для каждого стр1 из ПоКонтрагентам Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Контрагент",стр1.Контрагент);
		Отбор.Вставить("ДоговорКонтрагента",стр1.ДоговорКонтрагента);
		
		ПоОдномуДоговору = Рез.Скопировать(Отбор);
		
		ЗаказОТХ = Документы.ЗаказПоОтветственномуХранению.СоздатьДокумент();  //Заказ по ответ хранению
		
		ЗаполнитьШапкуДокументаПоОснованию(ЗаказОТХ, ЭтотОбъект);
		
		ЗаказОТХ.Дата = ТекущаяДата()-10;
		ЗаказОТХ.Контрагент = стр1.Контрагент;
		ЗаказОТХ.ДоговорКонтрагента = стр1.ДоговорКонтрагента;
		ЗаказОТХ.Комментарий = "Сформировано автоматически на основании: " + Строка(ЭтотОбъект);
		
		ЗаказОТХ.ВидОперации = Перечисления.ВидыОперацийПоОтветственномуХранению.Списание;
		
		Для Каждого стр2 из ПоОдномуДоговору Цикл
			СтрокаТоварыОтвХранение=ЗаказОТХ.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоварыОтвХранение, стр2);	
		КонецЦикла;
		
		//Форма = ЗаказОТХ.ПолучитьФорму("ФормаДокумента");
		//Форма.Открыть();
		
		попытка
			ЗаказОТХ.Записать(РежимЗаписиДокумента.Проведение);
			Сообщить("Сформирован " + Строка(ЗаказОТХ.Ссылка));
		Исключение
			Сообщить("Не удалось сформировать Заказ по ответственному хранению, списание с ОТХ не удалось!!!");
			Возврат;
		КонецПопытки;
		//
		ЗаказПостав = Документы.ЗаказПоставщику.СоздатьДокумент(); // Заказ поставщику
		ЗаказПостав.ОбработкаЗаполнения(ЗаказОТХ.Ссылка);
		
		ЗаказПостав.КратностьВзаиморасчетов = 1;
		ЗаказПостав.КурсВзаиморасчетов = 1;
		ЗаказПостав.КратностьВзаиморасчетов = 1;
		ЗаказПостав.УчитыватьНДС = Истина;
		ЗаказПостав.СуммаВключаетНДС = Истина;
		ЗаказПостав.Склад = Справочники.Склады.НайтиПоНаименованию("1");
		
		ЗаказПостав.Дата = ТекущаяДата()-8;  
		
		//определяем число дней отсрочки
		
		ТЗОтсрочки = Новый ТаблицаЗначений;
		ТЗОтсрочки.Колонки.Добавить("НоменклатурнаяГруппа");
				
		Для каждого стрН из ЗаказПостав.Товары Цикл
			НовСтрН = ТЗОтсрочки.Добавить();
			НовСтрН.НоменклатурнаяГруппа = стрН.Номенклатура.НоменклатурнаяГруппа;	
		КонецЦикла;
		
		ТЗОтсрочки.Свернуть("НоменклатурнаяГруппа");
		ТЗОтсрочки.Колонки.Добавить("ЧислоДней");
		
		//23.05.2017 - единым запросом получаем ВСЁ (чтобы не было запроса в цикле)----------------------
		запрос1 = новый Запрос; 
		Запрос1.Текст = "ВЫБРАТЬ * ИЗ РегистрСведений.ОтсрочкиПлатежейПоставщикам КАК рс
		                |ГДЕ рс.Поставщик В(&Поставщики)";
		Запрос1.УстановитьПараметр("Поставщики", ПоКонтрагентам.ВыгрузитьКолонку("Контрагент") );//24.05.2017 
		тзОтсрочкиПлатежейПоставщикам = Запрос1.Выполнить().Выгрузить();
		
		Для каждого стрН из ТЗОтсрочки Цикл
			//23.05.2017 -------------заменяем на поиск в табл.значений---------------
			//НаборЗаписейОб = РегистрыСведений.ОтсрочкиПлатежейПоставщикам.СоздатьНаборЗаписей();
			//НаборЗаписейОб.Отбор.Поставщик.Установить(стр1.Контрагент);
			//НаборЗаписейОб.Прочитать();
			НаборЗаписейОб = тзОтсрочкиПлатежейПоставщикам.НайтиСтроки( новый структура("Поставщик", стр1.Контрагент) ); 
			
			Если НаборЗаписейОб.Количество()>0 Тогда
				ОтсрочкаЧОб = НаборЗаписейОб[0].ОтсрочкаДней;
			иначе
				ОтсрочкаЧОб = 14;   //такого быть не должно
			КонецЕсли;
			
			//23.05.2017 -------------заменяем на поиск в табл.значений---------------
			//НаборЗаписей = РегистрыСведений.ОтсрочкиПлатежейПоставщикам.СоздатьНаборЗаписей();
			//НаборЗаписей.Отбор.Поставщик.Установить(стр1.Контрагент);
			//НаборЗаписей.Отбор.НоменклатурнаяГруппа.Установить(стрН.НоменклатурнаяГруппа);
			//НаборЗаписей.Прочитать();
			НаборЗаписей = тзОтсрочкиПлатежейПоставщикам.НайтиСтроки( новый структура("Поставщик, НоменклатурнаяГруппа", стр1.Контрагент, стрН.НоменклатурнаяГруппа) ); 
			
			Если НаборЗаписей.Количество()>0 Тогда
				Отсрочка = НаборЗаписей[0].ОтсрочкаДней;
			иначе
				Отсрочка = ОтсрочкаЧОб;
			КонецЕсли;
			
			стрН.ЧислоДней = Отсрочка;
		КонецЦикла;
		
		ТЗОтсрочки.Сортировать("ЧислоДней Возр");
		
		Если ТЗОтсрочки.Количество()>0 Тогда
			ЧислоДнейДоОплаты = ТЗОтсрочки[0].ЧислоДней;
		иначе
			ЧислоДнейДоОплаты = 14;
		КонецЕсли;
		
		ЗаказПостав.ЧислоДнейДоОплаты = ЧислоДнейДоОплаты;
	    ЗаказПостав.ДатаОплаты = ТекущаяДата()+60*60*24*ЧислоДнейДоОплаты;
		
		Для каждого стр3 из ЗаказПостав.Товары Цикл
			//Определяем цену, если это ЛингЛонг то берем из другого регистра
			Если ЗаказПостав.Контрагент = Справочники.Контрагенты.НайтиПоКоду("93920") Тогда 
				ОтборЦен = новый Структура;
				ОтборЦен.Вставить("ТипЦен",Справочники.ТипыЦенНоменклатурыКонтрагентов.НайтиПоКоду("00274"));
				ОтборЦен.Вставить("Номенклатура",стр3.Номенклатура);
				
				Цены = РегистрыСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(ТекущаяДата(),ОтборЦен);
				
				если Цены.Количество() > 0 Тогда
					ЦенаЕд = Цены[0].Цена;
				иначе
					ЦенаЕд = 1;
				КонецЕсли;	
			Иначе	
				ОтборЦен = новый Структура;
				ОтборЦен.Вставить("ТипЦен",?(Подразделение = Справочники.Подразделения.НайтиПоКоду("00112") 
				                            и ЗаказПостав.Контрагент = Справочники.Контрагенты.НайтиПоКоду("П002518"), 
											Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00030"),
											Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00001") )  );
				ОтборЦен.Вставить("Номенклатура",стр3.Номенклатура);
				
				Цены = РегистрыСведений.ЦеныНоменклатуры.СрезПоследних(ТекущаяДата(),ОтборЦен);
				
				если Цены.Количество() > 0 Тогда
					ЦенаЕд = Цены[0].Цена;
				иначе
					ЦенаЕд = 1;
				КонецЕсли;	
			КонецЕсли;
			
			стр3.Цена = ЦенаЕд;
			стр3.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
			РассчитатьСуммуТабЧасти(стр3, ЗаказПостав);
			РассчитатьСуммуНДСТабЧасти(стр3, ЗаказПостав);	
		КонецЦикла;
		
		//Форма = ЗаказПостав.ПолучитьФорму("ФормаДокумента");
		//Форма.Открыть();
		
		УстановитьНомерДокумента(ЗаказПостав);
		
		попытка
			ЗаказПостав.Записать(РежимЗаписиДокумента.Проведение);
			Сообщить("Сформирован " + Строка(ЗаказПостав.Ссылка));
			ЗаказПостав.СоздатьДокументыПоОТХ(Истина,СписокРазрешенныхГрупп);
		Исключение
			Сообщить("Не удалось сформировать Заказ поставщику, списание с ОТХ не удалось!!!");
			ЗаказОТХ.ПометкаУдаления = Истина;
			ЗаказОТХ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Возврат;
		КонецПопытки;		
			
	КонецЦикла;

КонецПроцедуры

Функция ПроверитьОстаткиПоЗаказам()
	
	Таблица = ЗаказыПокупателей.Выгрузить();
	
	//ТЗ = СчитаемНедогрузы.Скопировать();
	Для Индекс = -Таблица.Количество() По -1 Цикл
		уд = Таблица.Получить(-Индекс-1);
		Если ЗначениеНеЗаполнено(уд.реализация) Тогда
			
			Таблица.Удалить(-Индекс-1);
			
		КонецЕсли;
	КонецЦикла;
	
	если Таблица.Количество() > 0 Тогда
		
		Колонка = Таблица.ВыгрузитьКолонку("ЗаказПокупателя");
		списокзаказов = Новый СписокЗначений;
		списокзаказов.ЗагрузитьЗначения(Колонка);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Заказы",списокзаказов);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаказыПокупателейОстатки.ЗаказПокупателя,
		               |	ЗаказыПокупателейОстатки.Номенклатура,
		               |	ЗаказыПокупателейОстатки.КоличествоОстаток,
		               |	ЗаказыПокупателейОстатки.СуммаУпрОстаток,
		               |	ЗаказПокупателяТовары.КодТНВЭД
		               |ИЗ
		               |	РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя В (&Заказы)) КАК ЗаказыПокупателейОстатки
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		               |		ПО ЗаказыПокупателейОстатки.ЗаказПокупателя = ЗаказПокупателяТовары.Ссылка
		               |			И ЗаказыПокупателейОстатки.Номенклатура = ЗаказПокупателяТовары.Номенклатура
		               |ГДЕ
		               |	ЗаказыПокупателейОстатки.КоличествоОстаток > 0";
		рез = Запрос.Выполнить().Выгрузить();
		
		Если Рез.Количество()>0 Тогда
			Возврат Рез;
		Иначе
			возврат Неопределено;
		КонецЕсли;
		
	иначе
		Возврат Неопределено;
		
	КонецЕсли;

КонецФункции

Процедура СоздатьНовыйЗаказыПоНедогрузам(ТЗ)
	
	ТЗПоЗаказам = ТЗ.Скопировать();
	ТЗПоЗаказам.Свернуть("ЗаказПокупателя");
	
	Для каждого стр из ТЗПоЗаказам Цикл
		//Если ЗначениеНеЗаполнено(стр.ЗаказПокупателя.Контрагент.КонтрагентДляРезерваИМ) и стр.ЗаказПокупателя.ВводитьТолькоПеремещение = ложь Тогда //123Заменить
		Если ЗначениеНеЗаполнено(стр.ЗаказПокупателя.ДоговорКонтрагента.КонтрагентДляРезерваИМ) и стр.ЗаказПокупателя.ВводитьТолькоПеремещение = ложь Тогда

			Отбор = Новый Структура;
			Отбор.Вставить("ЗаказПокупателя",стр.ЗаказПокупателя);
			ПоЗаказу = ТЗ.Скопировать(Отбор);
			НовыйЗаказ = стр.ЗаказПокупателя.Скопировать();
			НовыйЗаказ.ВМаршрут = Ложь;
			НовыйЗаказ.ответственный = стр.ЗаказПокупателя.ответственный;
			НовыйЗаказ.ответственный = стр.ЗаказПокупателя.ответственный;
			НовыйЗаказ.Дата = ТекущаяДата();
			НовыйЗаказ.ДатаОтгрузки = ?(НовыйЗаказ.ДатаОтгрузки<НачалоДня(ТекущаяДата()),ТекущаяДата(),НовыйЗаказ.ДатаОтгрузки);
			НовыйЗаказ.проверен = Истина;
			НовыйЗаказ.Поставщик = стр.ЗаказПокупателя.Поставщик;
			НовыйЗаказ.статус    = стр.ЗаказПокупателя.статус;
			НовыйЗаказ.Согласован = стр.ЗаказПокупателя.Согласован;
			НовыйЗаказ.Комментарий = стр.ЗаказПокупателя.Комментарий + " +++ сформировано автоматически вследствие недогруза по заказу " + Строка(стр.ЗаказПокупателя);
			НовыйЗаказ.Товары.Очистить();
			НовыйЗаказ.Бонусы.Очистить();
			для каждого стр1 из ПоЗаказу Цикл
				Если стр1.СуммаУпрОстаток > 0 Тогда
					Нов = НовыйЗаказ.Товары.добавить();
					Нов.Номенклатура = стр1.Номенклатура;
					Нов.КодТНВЭД = стр1.КодТНВЭД;
					Нов.Количество = стр1.КоличествоОстаток;
					Нов.Коэффициент = 1;
					Нов.Цена = стр1.СуммаУпрОстаток/стр1.КоличествоОстаток;
					//Нов.Сумма = стр1.СуммаУпрОстаток;
					Нов.Номенклатура = стр1.Номенклатура;
					Нов.ЕдиницаИзмерения = стр1.Номенклатура.ЕдиницаХраненияОстатков;
					Нов.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
					
					РассчитатьСуммуТабЧасти(Нов, НовыйЗаказ);
					РассчитатьСуммуНДСТабЧасти(Нов, НовыйЗаказ);
				иначе
					Нов = НовыйЗаказ.Бонусы.Добавить();
					Нов.Номенклатура = стр1.Номенклатура;
					Нов.СтатьяЗатрат = Справочники.СтатьиЗатрат.НайтиПоКоду("О0215");
					Нов.Количество = стр1.КоличествоОстаток;
					Нов.Бонус = Истина;
				КонецЕсли;
			КонецЦикла;
			
			НовЗакр = Документы.ЗакрытиеОдногоЗаказаПокупателя.СоздатьДокумент();
			НовЗакр.Дата = ТекущаяДата();
			НовЗакр.Заполнить(стр.ЗаказПокупателя);
			
			Если НовыйЗаказ.Товары.Количество()=0 Тогда
				Продолжить;	
			КонецЕсли;
			
			Попытка
				НовЗакр.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Продолжить;
			КонецПопытки;
			
			Попытка
				НовыйЗаказ.Записать(РежимЗаписиДокумента.Проведение);
				
				//==================Категории=====================================
				//набор = РегистрыСведений.КатегорииОбъектов.СоздатьНаборЗаписей();  //X-блокировка
				//набор.Отбор.Объект.Установить(стр.ЗаказПокупателя);
				//набор.Прочитать();
				Запрос1 = Новый Запрос; //23.05.2017 - через запрос S - блокировка
				Запрос1.Текст = "ВЫБРАТЬ * ИЗ РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
								|ГДЕ КатегорииОбъектов.Объект = &Объект";
				Запрос1.УстановитьПараметр("Объект", стр.ЗаказПокупателя);
				набор = Запрос1.Выполнить().Выгрузить();
				для каждого стр2 из набор Цикл
					запись = РегистрыСведений.КатегорииОбъектов.СоздатьМенеджерЗаписи();
					запись.Объект = НовыйЗаказ.Ссылка;
					запись.Категория = стр2.Категория;
					попытка
						запись.Записать(Истина);
					Исключение
						сообщить("Не удалось записать КатегорииОбъектов по " + строка(НовыйЗаказ.Ссылка)+" : "+ОписаниеОшибки(), СтатусСообщения.Внимание);
					КонецПопытки;	
				КонецЦикла;
				
			Исключение
				НовЗакр.ПометкаУдаления = истина;
				НовЗакр.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Продолжить;
			КонецПопытки;
			
			//создадим задачу менеджеру
			НоваяЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
			НоваяЗадача.Исполнитель  = стр.ЗаказПокупателя.ответственный;
			НоваяЗадача.Объект = НовыйЗаказ.Ссылка;
			НоваяЗадача.Наименование = "Создан новый заказ по причине недогруза по клиенту "+стр.ЗаказПокупателя.Контрагент.Наименование;
			НоваяЗадача.Дата = ТекущаяДата();
			НоваяЗадача.ДатаИсполнения = ТекущаяДата();
			НоваяЗадача.Оповещение   = Истина;
			НоваяЗадача.СрокОповещения = ТекущаяДата()+60;
			НоваяЗадача.Описание = "Вследсвие недогруза по заказу " + Строка(стр.ЗаказПокупателя) + " сформирован новый заказ " 
			+ Строка(НовыйЗаказ.Ссылка);
			НоваяЗадача.Записать();
			
			Если стр.ЗаказПокупателя.Контрагент.ОповещениеОНедогрузе тогда
					ОтправитьПисьмоОНедогрузе(НовыйЗаказ.Ссылка, стр.ЗаказПокупателя);
			КонецЕсли;

		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтборНажатие(Элемент)
	Форма = ЭтотОбъект.ПолучитьФорму("ФормаВыбораГрупп");
	Форма.ОткрытьМодально();
КонецПроцедуры

Функция НадоДобавлятьУслугу(содержание,Контрагент)
	//Содержание = Транспортная услуга 44-ТР возмещаемые *** ИМ00222672
	Если найти(Содержание,"*** ИМ")>0 тогда
		 номерИМ = СокрЛП(сред(Содержание,найти(Содержание," *** ")));
		 номерИМ=СокрЛП(СтрЗаменить(номерИМ,"***",""));
		 Запрос = новый Запрос;
		 Запрос.Текст="ВЫБРАТЬ
		              |	ЗаказПокупателя.Ссылка
		              |ИЗ
		              |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		              |ГДЕ
		              |	ЗаказПокупателя.НомерВходящегоДокумента ПОДОБНО &НомерВходящегоДокумента
		              |	И ЗаказПокупателя.Контрагент = &Контрагент
		              |	И ЗаказПокупателя.Комментарий ПОДОБНО &Комментарий
		              |	И ЗаказПокупателя.Проведен = ЛОЖЬ";
					  Запрос.УстановитьПараметр("НомерВходящегоДокумента","%"+номерИМ+"%");
					  Запрос.УстановитьПараметр("Контрагент",Контрагент);
					  Запрос.УстановитьПараметр("Комментарий","%#Отгрузка отменена!%");
					  рез = Запрос.Выполнить().Выбрать();
					  Если рез.Количество()>0 тогда //если заказ отменен, услуги не добавляем
						  Возврат ложь;
					  Иначе
						  Возврат истина;
					  КонецЕсли;
	иначе //если заказ не определили
		Возврат истина;
	КонецЕсли;
КонецФункции

Процедура РазбитьТовары(ТЗЗаказано,ТЗЗаказаноБонусы,Заказ)
	
	Бонусы = Заказ.Бонусы.Выгрузить();
	
	ТЗзаказа = Заказ.Товары.Выгрузить();
	
	Для каждого стр из Бонусы Цикл
		
		НайденайСтрока = ТЗзаказа.Найти(стр.Номенклатура, "Номенклатура");
				
		Если НайденайСтрока <> Неопределено Тогда
			стр1 = ТЗЗаказано.Найти(стр.Номенклатура, "Номенклатура");
			Кол             = стр1.Количество;
			стр1.Количество = стр1.Количество - Стр.Количество;
			
			стр1.Цена       = Кол*стр1.Цена/(стр1.Количество);
			
			Нов = ТЗЗаказаноБонусы.Добавить();
			ЗаполнитьЗначенияСвойств(Нов,Стр1);
			Нов.Количество = Стр.Количество;
			Нов.СтатьяЗатрат = стр.СтатьяЗатрат; 
			Нов.Цена = 0;
		ИначеЕсли НайденайСтрока = Неопределено Тогда
			стр1 = ТЗЗаказано.Найти(стр.Номенклатура, "Номенклатура");
			
			Нов = ТЗЗаказаноБонусы.Добавить();
			
			ЗаполнитьЗначенияСвойств(Нов,Стр1);
			Нов.Количество = Стр.Количество;
			Нов.СтатьяЗатрат = стр.СтатьяЗатрат;
			Нов.Цена = 0;
			ТЗЗаказано.Удалить(стр1);	  
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура отправитьЗадачиМенеджерам()
	
	Таблица = ЗаказыПокупателей.Выгрузить();
	
	//ТЗ = СчитаемНедогрузы.Скопировать();
	Для Индекс = -Таблица.Количество() По -1 Цикл
		уд = Таблица.Получить(-Индекс-1);
		Если ЗначениеНеЗаполнено(уд.реализация) Тогда
			
			НоваяЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
			НоваяЗадача.Исполнитель  = уд.ЗаказПокупателя.ответственный;
			НоваяЗадача.Объект = уд.ЗаказПокупателя;
			НоваяЗадача.Наименование = "Не был отгружен заказ по клиенту "+уд.ЗаказПокупателя.Контрагент.Наименование+ "!!!";
			НоваяЗадача.Дата = ТекущаяДата();
			НоваяЗадача.ДатаИсполнения = ТекущаяДата();
			НоваяЗадача.Оповещение   = Истина;
			НоваяЗадача.СрокОповещения = ТекущаяДата()+60;
			НоваяЗадача.Описание = "Обратите внимание, что заказ " + Строка(уд.ЗаказПокупателя) + " не был отгружен!!!"; 
			НоваяЗадача.Записать();

			
			Таблица.Удалить(-Индекс-1);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ТелефонВодителяПриИзменении(Элемент)
	Если найти(ТелефонВодителя,"(")>0 или найти(ТелефонВодителя,")")>0 тогда
	Предупреждение("Сотовый телефон водителя - не должен содержать скобки ( или )
				   |Вводите цифры телефона через ""тире"": 8-930-123-45-67
				    |можно вводитель несколько телефонов через , или ;",60);
	ТелефонВодителя = стрЗаменить(ТелефонВодителя,"(","");
	ТелефонВодителя = стрЗаменить(ТелефонВодителя,")","");
	КонецЕсли;
	Если найти(ТелефонВодителя," ")>0 тогда
	Предупреждение("Сотовый телефон водителя - не должен содержать пробелов.
				   |Вводите цифры телефона через ""тире"": 8-930-123-45-67
				   |можно вводитель несколько телефонов через , или ;",60);
	ТелефонВодителя = стрЗаменить(ТелефонВодителя," ","");
	КонецЕсли;
КонецПроцедуры

//Миронычев
Процедура ВодительОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	Водитель = Текст;
	Если ЗаказыПокупателей[0].ЗаказПокупателя.СпособОтгрузки <> Справочники.СпособыОтгрузкиТовара.НайтиПоКоду("10")  и ЗаказыПокупателей[0].ЗаказПокупателя.СпособОтгрузки <> Справочники.СпособыОтгрузкиТовара.ПустаяСсылка()  и  ЗаказыПокупателей[0].ЗаказПокупателя.СпособОтгрузки <> Справочники.СпособыОтгрузкиТовара.НайтиПоКоду("12") Тогда
		
	ПолеВвода1НачалоВыбора(Водитель, Ложь);	
    КонецЕсли;
КонецПроцедуры

Функция	ДобавитьУслугу(Содержание, Ном)
	
	Если найти(Содержание,"*** ИМ")>0 тогда
		 номерИМ = СокрЛП(сред(Содержание,найти(Содержание," *** ")));
		 номерИМ=СокрЛП(СтрЗаменить(номерИМ,"***",""));
		 Запрос = новый Запрос;
		 Запрос.Текст="ВЫБРАТЬ
		              |	СостояниеЗаказовИМ.Номенклатура,
		              |	СостояниеЗаказовИМ.ЗаказПервичный,
		              |	СостояниеЗаказовИМ.НомерИМ,
		              |	СостояниеЗаказовИМ.Количество
		              |ИЗ
		              |	РегистрСведений.СостояниеЗаказовИМ КАК СостояниеЗаказовИМ
		              |ГДЕ
		              |	СостояниеЗаказовИМ.Состояние = &Состояние
		              |	И СостояниеЗаказовИМ.НомерИМ = &НомерИМ
		              |	И СостояниеЗаказовИМ.Номенклатура.Услуга = ИСТИНА
		              |	И СостояниеЗаказовИМ.Номенклатура = &Номенклатура";
					  Запрос.УстановитьПараметр("НомерИМ",номерИМ);
					  Запрос.УстановитьПараметр("Состояние",Перечисления.СостояниеЗаказовИМ.Перемещен);
					  Запрос.УстановитьПараметр("Номенклатура", Ном);
					  рез = Запрос.Выполнить().Выбрать();
					  Если рез.Количество()>0 тогда //если заказ отменен, услуги не добавляем
						  Возврат истина;
					  Иначе
						  Возврат Ложь;
					  КонецЕсли;
	иначе //если заказ не определили
		Возврат истина;
	КонецЕсли;

КонецФункции

Процедура КоманднаяПанельТоварыДействие1(Кнопка)
	ЗаполнитьНомерОчереди();
КонецПроцедуры
//КонецМиронычев

//+Лукьяненков
Процедура ОтправитьЗадачиМенеджерамНаФилиалы()
	
	Для каждого ЗаказОбщий из ЗаказыПокупателей Цикл
		
		Если ЗаказОбщий.КоличествоШтук - ЗаказОбщий.КоличествоШтукОтгружено > 0 и ЗаказОбщий.ЗаказПокупателя.ВводитьТолькоПеремещение Тогда   
			
			табл = новый ТаблицаЗначений;
			табл.Колонки.Добавить("ЗаказПокупателя", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
			табл.Колонки.Добавить("Менеджер", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
			табл.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			табл.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
			
			МассивЗаказовФилиала = ЗаказОбщий.ЗаказПокупателя.Заказы.ВыгрузитьКолонку("ЗаказПокупателя");
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ТекЗаказ",ЗаказОбщий.ЗаказПокупателя);
			Запрос.Текст = "ВЫБРАТЬ
			|	Подразделения.Контрагент
			|ПОМЕСТИТЬ Филиалы
			|ИЗ
			|	Справочник.Подразделения КАК Подразделения
			|ГДЕ
			|	Подразделения.ОбособленноеПодразделение
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗаказыПокупателейОстатки.Номенклатура,
			|	МАКСИМУМ(ЗаказыПокупателейОстатки.КоличествоОстаток) КАК Недогруз
			|ИЗ
			|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя = &ТекЗаказ) КАК ЗаказыПокупателейОстатки
			|		ПОЛНОЕ СОЕДИНЕНИЕ Филиалы КАК Филиалы
			|		ПО ЗаказыПокупателейОстатки.ЗаказПокупателя.Контрагент = Филиалы.Контрагент
			|ГДЕ
			|	ЗаказыПокупателейОстатки.КоличествоОстаток > 0
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаказыПокупателейОстатки.Номенклатура";
			НедогрузыФилиалов = Запрос.Выполнить().Выгрузить();
			
			
			запрос2 = новый Запрос;
			запрос2.текст = 
			"ВЫБРАТЬ
			|	ВТ.Номенклатура,
			|	ВТ.Недогруз
			|ПОМЕСТИТЬ ВТ_Тов
			|ИЗ
			|	&ТаблМинус КАК ВТ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо КАК Менеджер,
			|	ВТ.Номенклатура КАК Номенклатура,
			|	ВТ.Недогруз КАК СвОстаток,
			|	ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток
			|ИЗ
			|	ВТ_Тов КАК ВТ
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(
			|				,
			|				Номенклатура В
			|						(ВЫБРАТЬ
			|							ВТ.Номенклатура
			|						ИЗ
			|							ВТ_Тов КАК ВТ)
			|					И ЗаказПокупателя.Транзит
			|					И ЗаказПокупателя В (&СписокЗаказовФилиалов)) КАК ЗаказыПокупателейОстатки
			|		ПО ВТ.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
			|
			|УПОРЯДОЧИТЬ ПО
			|	Номенклатура,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Дата УБЫВ
			|ИТОГИ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПокупателя),
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Менеджер),
			|	МАКСИМУМ(СвОстаток),
			|	СУММА(КоличествоОстаток)
			|ПО
			|	Номенклатура
			|АВТОУПОРЯДОЧИВАНИЕ";
			запрос2.УстановитьПараметр("ТаблМинус", НедогрузыФилиалов);
			запрос2.УстановитьПараметр("СписокЗаказовФилиалов", МассивЗаказовФилиала);
			
			Результат2 = запрос2.Выполнить();               
			выборка  = Результат2.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам );
			
			пока выборка.Следующий() цикл
				колСв = выборка.СвОстаток;
				выборкаЗак = выборка.Выбрать();
				
				Если МассивЗаказовФилиала.Количество() > 0 Тогда
					
					пока выборкаЗак.Следующий() цикл
						
						Если выборкаЗак.КоличествоОстаток>=колСв Тогда
							стр1 = табл.Добавить();
							ЗаполнитьЗначенияСвойств(стр1, выборкаЗак);
							стр1.Количество = мин(выборкаЗак.КоличествоОстаток,колСв);
							колСв = колСв - мин(выборкаЗак.КоличествоОстаток,колСв);
							Если колСв=0 Тогда
								прервать;
							КонецЕсли;	 
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе
					стр1 = табл.Добавить();
					стр1.ЗаказПокупателя = ЗаказОбщий.ЗаказПокупателя;
					стр1.Менеджер = ЗаказОбщий.ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо;
					стр1.Номенклатура = выборка.Номенклатура;
					стр1.Количество = колСв;
				КонецЕсли;
				
			КонецЦикла;
			
			
			Если табл.Количество()=0 Тогда
				возврат;
			КонецЕсли;
			табл.Свернуть("ЗаказПокупателя, Менеджер, Номенклатура","Количество");
			табл.Сортировать("Менеджер, ЗаказПокупателя");
			
			ЗапросДляЗадач = Новый Запрос;
			ЗапросДляЗадач.Текст = 
			"ВЫБРАТЬ
			|	Ном.ЗаказПокупателя,
			|	Ном.Менеджер,
			|	Ном.Номенклатура,
			|	Ном.Количество
			|ПОМЕСТИТЬ ВТ
			|ИЗ
			|	&Ном КАК Ном
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ.ЗаказПокупателя КАК ЗаказПокупателя,
			|	ВТ.Менеджер КАК Менеджер,
			|	ВТ.Номенклатура,
			|	ВТ.Количество
			|ИЗ
			|	ВТ КАК ВТ
			|ИТОГИ
			|	МАКСИМУМ(Менеджер)
			|ПО
			|	ЗаказПокупателя";
			ЗапросДляЗадач.УстановитьПараметр("Ном",табл);
			Результат = ЗапросДляЗадач.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			
			
			Для каждого Заказ_ из Результат.Строки Цикл
				ТекстОповещенияЗаголовок = "В "+ЭтотОбъект.Ссылка+Символы.ПС;
				ТекстОповещения = "";
				Для каждого Номенклатура_ из Заказ_.Строки Цикл
					ТекстОповещения = ТекстОповещения + "По номенклатуре: "+Номенклатура_.Номенклатура.Код+" | "+Номенклатура_.Номенклатура+" | Недогруз: "+Номенклатура_.Количество+Символы.ПС;	
				КонецЦикла;
				
				//ТекстОповещения = ТекстОповещения+"Итого недогруз: "+Заказ_.Количество;
				
				НоваяЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
				НоваяЗадача.Исполнитель  = Заказ_.ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо;
				НоваяЗадача.Объект = Заказ_.ЗаказПокупателя;
				НоваяЗадача.Наименование = "НЕДОГРУЗ!!! В: "+Заказ_.ЗаказПокупателя;
				НоваяЗадача.Дата = ТекущаяДата();
				НоваяЗадача.ДатаИсполнения = ТекущаяДата();
				НоваяЗадача.СрокИсполнения = КонецДня(ТекущаяДата());
				НоваяЗадача.Оповещение   = Истина;
				НоваяЗадача.СрокОповещения = ТекущаяДата()+60;
				НоваяЗадача.Описание =  ТекстОповещения; 
				НоваяЗадача.Записать();
				
			КонецЦикла;			
			
		Иначе
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
//-Лукьяненков


//+++ 30.10.2017=========================Планирование даты приезда к клиенту=========================================
Процедура ПланВремяНажатие(Элемент)
табл1 = ИнформацияПоПроезду.Скопировать();

табл1.Сортировать("НомерОчереди");

//1. принудительно заполняем расстояние!
оч = -1;  км = 0;  Ro = 0;
Коорд0 = КоординатыПодразделения();

Коорд1 = Коорд0;
для каждого стр1 из табл1 цикл 
	Если оч = стр1.НомерОчереди тогда
		стр1.Расстояние = км;  //одинаковое для 1 очереди!
	Иначе
		км = стр1.Расстояние; // расстояние до оч точки
		оч = стр1.НомерОчереди;
		
		
		Если км=0 тогда //находим расстояние!
			рез1 = НайтиРасстояниеМеждуТочками(Коорд1, стр1.Заказ );
			Коорд1 = рез1.Координаты;
			км     = Ro + рез1.км;
			стр1.Расстояние = км;
		иначе //должен быть норм.адрес с координатами!
			РезСтруктура = ПолучитьСтруктуруАдреса(стр1.Заказ);
			Коорд1 = РезСтруктура.Координаты;
 		КонецЕсли;
	
		Ro = км;
	КонецЕсли;	 	
КонецЦикла;	

 км2=км;
 
Если Километров=0 тогда
	
	км2 = получитьРасстояниеПоКоординатам( Коорд1, Коорд0 ); //обратный путь может быть короче

	Километров = км + км2 ;//туда и обратно! до последней точки и назад!
	сообщить("Автоматически установлен 'Пробег' "+строка(Километров)+" км! Расстояние до последней точки "+строка(км)+" км. + обратный путь "+строка(км2)+" км.");
	
ИначеЕсли Километров < км тогда 
	сообщить("Автоматически установлен 'Пробег' "+строка(Километров)+" >> "+строка(км)+" км.  как расстояние до последней точки!", СтатусСообщения.Внимание );
	Километров = км;
КонецЕсли;										

структура = получитьСкоростьИВыгрузку( Километров );

Csr = структура.Скорость / 3600; // км/сек
bsr = структура.Выгрузка / 3600; // м3/сек

табл1.Свернуть("НомерОчереди, Расстояние", "Объём");

табл1.Колонки.Добавить("ПланВремя");

//====================ГЛАВНЫЙ РАСЧЕТ ====  T(i) = T(i-1) + d ============

Vo = 0;  //объем предыдущей точки
Ro = 0;  // расстояние до пред.точки
T0 = ?(ВремяНапоминания='00010101', Дата, ВремяНапоминания); //время до пред.точки
m = 60;  // округляем до 1 минуты
для каждого стр1 из табл1 цикл
	R = стр1.Расстояние - Ro;
	d = ОКР( R /Csr/m, 0)*m + ОКР( Vo /bsr/m, 0)*m; // дельта времени
	
	стр1.ПланВремя = T0 + d;
	
	Vo  = стр1.Объём;
	Ro  = стр1.Расстояние;
	T0  = стр1.ПланВремя;
КонецЦикла;	


//==================результат пишем обратно в таблицу==========================
ДатаВыгрузкиПрямогоРейса = ВремяНапоминания;
для каждого стр1 из  ИнформацияПоПроезду цикл
	стр2 = табл1.Найти(стр1.НомерОчереди, "НомерОчереди");
	стр1.ПланВремя  = стр2.ПланВремя;
	стр1.Расстояние = стр2.Расстояние;
	Если ДатаВыгрузкиПрямогоРейса < стр1.ПланВремя тогда //+++ 01.11.2017 Фиксация даты выгруки прямого рейса
 		ДатаВыгрузкиПрямогоРейса = стр1.ПланВремя;
    КонецЕсли;
КонецЦикла;

 сообщить("Выполнен расчет план.время прибытия к клиентам от Даты выезда автомобиля: "+строка(ВремяНапоминания), СтатусСообщения.Информация);
 
КонецПроцедуры

//+++ 30.10.2017 - вспомогательные функции
функция НайтиРасстояниеМеждуТочками(коорд0, зак )
	
	РезСтруктура = ПолучитьСтруктуруАдреса(зак);

рез = новый Структура("км, Координаты");
рез.Координаты = РезСтруктура.Координаты;
рез.км = получитьРасстояниеПоКоординатам(коорд0, РезСтруктура.Координаты);

возврат рез;
КонецФункции	

//переворот "нормальных" координат Д,Ш >> Ш,Д
функция ШД(адр1) 
	i= найти(адр1,","); L=стрДлина(адр1);
	рез = прав(адр1, L-i)+","+лев(адр1, L-i);
	возврат рез;
КонецФункции

функция получитьРасстояниеПоКоординатам(Коорд1,Коорд2) экспорт    
	Адрес1= ШД(Коорд1);
	Адрес2= ШД(Коорд2);

	Соединение = Новый HTTPСоединение("maps.googleapis.com");
	Заголовки = Новый Соответствие();
	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла();
	Ресурс = "/maps/api/directions/xml?origin="+Адрес1+"&destination="+Адрес2;
	HTTPзапрос = Новый HTTPЗапрос(Ресурс, Заголовки);
	
	попытка
		HTTPОтвет = Соединение.Получить( HTTPзапрос, ИмяФайлаРезультата);
	исключение
		сообщить("Нет подключения к сервису maps.googleapis.com !");
		возврат 0;
	КонецПопытки;	
	Соединение = Неопределено; // разорвать соединение

 ТекстовыйФайлОтвет = Новый ТекстовыйДокумент;
 ТекстовыйФайлОтвет.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
 СтрокаXMLРезультат = ТекстовыйФайлОтвет.ПолучитьТекст();
 
 i1 = найти(СтрокаXMLРезультат, "<status>");
 i2 = найти(СтрокаXMLРезультат, "</status>");
 Если i1>0 и i2>0 тогда
	 рез = сред(СтрокаXMLРезультат, i1+8, i2-i1-8);
	 сообщить("Результат: "+рез);
 КонецЕсли;	
 
 distance = 0;
 location = "";
 
// если рез<>"OK" тогда
 
 стр1 = СтрокаXMLРезультат;
  i = найти(стр1, "</step>");
  //... step... пропускаем
  пока i>0 цикл
  стр1 = прав(стр1, стрДлина(стр1)-i-6);	  
  i = найти(стр1, "</step>");
  КонецЦикла;

  i = найти(стр1, "<distance>");
  Если i>0 тогда
	  стр1 = прав(стр1, стрДлина(стр1)-i-9);	
	  i1 = найти(стр1, "<value>");
	  i2 = найти(стр1, "</value>");
	distanceText = сред(стр1, i1+7, i2-i1-7);  
	
	сообщить( "distance = "+distanceText+" м");
	
	попытка
		distance = ОКР( число(distanceText)/1000, 1 );	 // округляем до 100 м
	исключение
		distance = 0;
	КонецПопытки;
	
//  <distance>
 //   <value>1355034</value>   //в метрах!
 //   <text>1,355 km</text>
//  </distance>
	
  КонецЕсли;

 i = найти(стр1, "<end_location>");
 Если i>0 тогда
	 стр1 = прав(стр1, стрДлина(стр1)-i-13);
	 
	  i1 = найти(стр1, "<lat>");
	  i2 = найти(стр1, "</lat>");
	ш = сред(стр1, i1+5, i2-i1-5);  
	  i1 = найти(стр1, "<lng>");
	  i2 = найти(стр1, "</lng>");
	д = сред(стр1, i1+5, i2-i1-5);  
	
	location = д+","+ш;
КонецЕсли;	
  
//КонецЕсли;//если ОК
 рез =  distance ; // в километрах!
 //location;
 
 возврат рез;
 
 КонецФункции


функция КоординатыПодразделения()
	
	нашиКоординаты = "39.838082,57.657312"; //Ярославль, ул.Базовая, д.3 - 39.838082,57.657312
	
	Если Подразделение.Код = "00106" тогда      // РнД
		нашиКоординаты = "39.59017,47.245319";
	ИначеЕсли Подразделение.Код = "00112" тогда // СПб
		нашиКоординаты = "30.4261098,59.8424869";// 
	ИначеЕсли Подразделение.Код = "00138" тогда
		нашиКоординаты = "60.64839,56.781591";// ЕКТ новый  
	КонецЕсли;

	возврат нашиКоординаты;
КонецФункции

//+++ 30.10.2017 - вспомогательные функции
функция получитьСкоростьИВыгрузку(МаксКм=0)
	стр = новый Структура("Скорость, Выгрузка", 65, 1);
	
	Если ВесМакс=0 или ОбъемМакс=0 тогда
		Предупреждение("Не заполнен Тоннаж и Макс.Объем автомобиля!
					   |Выберите марку/тип автомобиля из списка!",30);
		возврат стр;
	КонецЕсли;	
	
	Если МаксКм=0 тогда
		Предупреждение("Не заполнено поле Расстояния!",30);
		возврат стр;
	КонецЕсли;	
		
	
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
|	ТарифыНаПеревозки.Скорость,
|	ТарифыНаПеревозки.Выгрузка
|ИЗ
|	РегистрСведений.ТарифыНаПеревозки.СрезПоследних КАК ТарифыНаПеревозки
|ГДЕ
|	ТарифыНаПеревозки.Тоннаж = &Тоннаж
|	И ТарифыНаПеревозки.ЗонаКилометража = &ЗонаКилометража";

Тоннаж = 2;
Если ВесМакс<=2 тогда Тоннаж = 2;       //1
ИначеЕсли ВесМакс<=4 тогда Тоннаж = 4;  //2
ИначеЕсли ВесМакс<=7 тогда Тоннаж = 7;  //3
ИначеЕсли ВесМакс<=10 тогда Тоннаж = 10;//4
Иначе Тоннаж = 20;                      //5
КонецЕсли;
Запрос.УстановитьПараметр("Тоннаж", Тоннаж);

ЗонаКилометража = 500;
Если МаксКм<=500 тогда ЗонаКилометража = 500; 		 //1
ИначеЕсли МаксКм<=1000 тогда ЗонаКилометража = 1000; //2
ИначеЕсли МаксКм<=2000 тогда ЗонаКилометража = 2000; //3
Иначе ЗонаКилометража = 5000; // 4
КонецЕсли;
Запрос.УстановитьПараметр("ЗонаКилометража", ЗонаКилометража);

Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();

Если Выборка.Следующий() тогда
	стр.Скорость = выборка.Скорость; //* 2.618;
	стр.Выгрузка = выборка.Выгрузка; //* 1.618;
КонецЕсли;

Сообщить("По параметрам машины ("+строка(Тоннаж)+"т.; "+строка(ЗонаКилометража)+"км) получена Средняя плановая скорость С = "+строка(стр.Скорость)+" (км/ч) и скорость Выгрузки b = "+строка(стр.Выгрузка)+" (м3/ч)");

возврат стр;
КонецФункции	

Процедура Кнопка2Нажатие(Элемент)
	РегистрыСведений.ТарифыНаПеревозки.ПолучитьФормуСписка().Открыть();
КонецПроцедуры

Процедура ВремяНапоминанияПриИзменении(Элемент)
	
	надоДелатьПересчетПланВремя = ЛОЖЬ;
	
	//+++ только для "наших" перевозчиков... т.е. когда точно мы везём
	Если Найти(Перевозчик, "Землянский")>0
	   		или Найти(Перевозчик, "Малышев")>0 
			или Найти(нрег(Перевозчик),"яршинторг")>0  тогда
	//сообщить("Для перевозчика "+Перевозчик+" будет произведен автоматический расчет план.времени прибытия к клиентам");		
	надоДелатьПересчетПланВремя = истина; 
	КонецЕсли;	
				
	Если надоДелатьПересчетПланВремя тогда
		ПланВремяНажатие(неопределено); //авторасчет пран.время прибытия к клиенту по "нашим" перевозчикам!
	КонецЕсли;

КонецПроцедуры

Процедура ГосНомерАвтомобиляПриИзменении(Элемент)
	
	//+++ определяем тип авто	
	Если МаркаАвтомобиля<>"" и ГосНомерАвтомобиля<>"" тогда
		  
		мас = новый массив;
		для i=0 по 9 цикл
			мас.Добавить(строка(i));
		КонецЦикла;
		
		Номер1 = "";
		для i=1 по стрДлина(ГосНомерАвтомобиля) цикл
			Если мас.Найти( сред(ГосНомерАвтомобиля,i,1) )<>неопределено тогда
				Если стрДлина(Номер1)<3 тогда
					Номер1 = Номер1 + сред(ГосНомерАвтомобиля,i,1);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
			
			
        Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТипАвтомобиля.Ссылка,
		               |	ТипАвтомобиля.Объем,
		               |	ТипАвтомобиля.Вес КАК Вес,
		               |	ТипАвтомобиля.ПолноеНаименование
		               |ИЗ
		               |	Справочник.ТипАвтомобиля КАК ТипАвтомобиля
		               |ГДЕ
		               |	ТипАвтомобиля.ПолноеНаименование ПОДОБНО &Марка
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Вес";
		Запрос.УстановитьПараметр("Марка", "%"+СокрЛП(МаркаАвтомобиля)+"%" );
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
			пока Выборка.Следующий() цикл
				
				Если найти(выборка.ПолноеНаименование,	Номер1)>0 тогда
					ВесМакс   = выборка.Вес;
					ОбъемМакс = выборка.Объем;
					сообщить("Автоматически установлен Тоннаж и макс.объём по Марке автомобиля и гос.номеру: "+строка(ВесМакс)+"т. "+строка(ОбъемМакс)+"м3", СтатусСообщения.Информация);
					прервать;
				КонецЕсли;	
				
			КонецЦикла;
			
			Если ВесМакс = 0 и ОбъемМакс = 0 тогда
				Выборка.Сбросить();
				Если выборка.Следующий() тогда
					ВесМакс   = выборка.Вес;
					ОбъемМакс = выборка.Объем;
					сообщить("Автоматически установлен мин. Тоннаж и Объём автомобиля по Марке: "+строка(ВесМакс)+"т. "+строка(ОбъемМакс)+"м3. Выберите Марку автомобиля из списка!");
				КонецЕсли;
			КонецЕсли;
				
		Если ИнформацияПоПроезду.Количество()>0 Тогда
			ЗаполнитьОбъем(); //объем машины влияет на объем АКБ
		КонецЕсли;
	КонецЕсли;

	
КонецПроцедуры


//+++ 15.04.2015 - переменные Для переноса в БП
Воробьев   = справочники.Контрагенты.НайтиПоКоду( "93833" );
Землянский = справочники.Контрагенты.НайтиПоКоду( "00216" );
Соединение = Неопределено;

ТК_DPD = Справочники.Контрагенты.НайтиПоКоду("94121");
ТК_Подорожник = Справочники.Контрагенты.НайтиПоКоду("94346");
НаправлениеКолесаТут = Справочники.НаправленияПродаж.НайтиПоКоду("16");
РозничныйПокупательДПД = Справочники.Контрагенты.НайтиПоКоду("94247  ");
РозничныйПокупательПодорожник = Справочники.Контрагенты.НайтиПоКоду("П005342");
СоответствиеПоставщиковКодДпд=новый Соответствие; //для ШК Дпд, что бы шк был поменьше
СоответствиеПоставщиковКодДпд.Вставить("00005","1");//Яршинторг - Ярославль
СоответствиеПоставщиковКодДпд.Вставить("00138","2");//Яршинторг Екб- Екб
СоответствиеПоставщиковКодДпд.Вставить("00106","3");//Яршинторг Рнд- Рнд
СоответствиеПоставщиковКодДпд.Вставить("00112",  "4");//Яршинторг Спб- Спб
СоответствиеПоставщиковКодДпд.Вставить("00133",  "6");//Яршинторг Мск- Мск

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
мОбновлятьВладельца = Ложь;
мЧас = 0;
мМинута = 0;
 
//+++( 31.07.2015   - Сумма  НЕ Фиксирована!
// как ФА+  аналогично целый список: Формула, Корп.Волга, АвтоЭксперт
	ТаблОрг = новый ТаблицаЗначений;
	ТаблОрг.Колонки.Добавить("Организация");
	ТаблОрг.Колонки.Добавить("НаименованиеКраткое");
	ТаблОрг.Колонки.Добавить("Контрагент");
	ТаблОрг.Колонки.Добавить("Сумма");
	ТаблОрг.Колонки.Добавить("Объем");
	ТаблОрг.Колонки.Добавить("ФиксСумма");
	ТаблОрг.Колонки.Добавить("КодВБПЗем");
	ТаблОрг.Колонки.Добавить("КодВБПВороб");
	ТаблОрг.Колонки.Добавить("КодВБПМал");

//---------------список-------------------------------------------------	
	
	стр1 = ТаблОрг.Добавить();
    стр1.Организация = "АвтоЭксперт"; стр1.НаименованиеКраткое = "АЭ"; 
	стр1.Контрагент = справочники.Контрагенты.НайтиПоКоду("П000382");  //Автоэксперт ( Ярославль)
	//стр1.КодВБПЗем = "92844";      стр1.КодВБПВороб = "93564";
	стр1.КодВБПЗем = "92844";      стр1.КодВБПВороб = "000000207";  стр1.КодВБПМал = "000000853";//+++ с 31.08.2015 - единая база,   КодВБПВороб - это код ДОГОВОРА!
	стр1.Сумма = 0;	стр1.Объем = 0; стр1.ФиксСумма = Ложь;
	
	стр1 = ТаблОрг.Добавить();
    стр1.Организация = "Формула";    стр1.НаименованиеКраткое = "Fa";
	стр1.Контрагент = справочники.Контрагенты.НайтиПоКоду("93980");   //Формула ООО 2015
	//стр1.КодВБПЗем = "93935";      стр1.КодВБПВороб = "93939";
	стр1.КодВБПЗем = "93935";      стр1.КодВБПВороб = "000000102"; стр1.КодВБПМал ="000000855";	//+++ с 31.08.2015 - единая база
	стр1.Сумма = 0;	стр1.Объем = 0; стр1.ФиксСумма = Ложь;
	
	стр1 = ТаблОрг.Добавить();	      
    стр1.Организация = "Корп.Волга"; стр1.НаименованиеКраткое = "KV";  //Корпорация Волга
	стр1.Контрагент = справочники.Контрагенты.НайтиПоКоду("92242");
	//стр1.КодВБПЗем = "93982";      стр1.КодВБПВороб = "94011";
	стр1.КодВБПЗем = "93982";      стр1.КодВБПВороб = "000000208"; стр1.КодВБПМал = "000000854"; //+++ с 31.08.2015 - единая база
	стр1.Сумма = 0;	стр1.Объем = 0; стр1.ФиксСумма = Ложь;