Перем мЖирныйШрифт;

//  Процедура печатает выбранный документ 
// Печатается та форма, которая была отпечатана при нажатии в документе кнопки
// печати по умолчанию
//
Процедура ДействияФормыДействиеПечать(Кнопка)

	Если ЭтаФорма.ЭлементыФормы.ДокументСписок.ТекущаяСтрока = Неопределено тогда
		Возврат
	КонецЕсли;

	НапечататьДокументИзФормыСписка(ЭтаФорма.ЭлементыФормы.ДокументСписок.ТекущаяСтрока.ПолучитьОбъект());

КонецПроцедуры // ДействиеПечать()

// Процедура вызывается при выборе пункта подменю "Структура подчиненности" меню "Перейти".
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	Если ЭлементыФормы.ДокументСписок.ТекущиеДанные = Неопределено тогда
		Возврат
	КонецЕсли;
	
	ПоказатьСтруктуруПодчиненностиДокумента(ЭтаФорма.ЭлементыФормы.ДокументСписок.ТекущаяСтрока);
	
КонецПроцедуры

Процедура ПриОткрытии()
	
  //  УстановитьОтборВЖурналеДокументов(ДокументСписок.Отбор, ЭлементыФормы.Список);	
  
  //+++( 26.04.2012
	//установка ограничения видимости помеченных на удаление документов
	ЭлементОтбора =ДокументСписок.Отбор.Найти("ПометкаУдаления");
		Если  ЭлементОтбора = Неопределено Тогда
			ЭлементОтбора = ДокументСписок.Отбор.Добавить("ПометкаУдаления"); // если нет - добавим в список отборов
		КонецЕсли;
		
		//по настройке пользователя !!!
		Если НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ДокументыРазрешитьПросмотрПомеченныхНаУдаление") тогда
			ЭлементОтбора.Установить(Ложь); // установим видимость только НЕудаленных
	    	ЭлементыФормы.ДокументСписок.НастройкаОтбора.ПометкаУдаления.Доступность = ЛОЖЬ;
	 	иначе // можно видеть удаленные элементы
			ЭлементыФормы.ДокументСписок.НастройкаОтбора.ПометкаУдаления.Доступность = Истина;
        КонецЕсли;
	//+++)

	//------------------ограничение по подразделению!----------------------------------------
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") тогда
		ЭлементОтбора = ДокументСписок.Отбор.Найти("Подразделение");
		ЭлементОтбора.Установить(глТекущийПользователь.ОсновноеПодразделение); 
		ЭлементыФормы.ДокументСписок.НастройкаОтбора.Подразделение.Доступность = ЛОЖЬ;
	КонецЕсли;	
	
	//---------------ограничение просмотра заданий только по себе----------------------------------------
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОтображатьТолькоСобственныеЗаказы") тогда
		ЭлементОтбора = ДокументСписок.Отбор.Найти("Ответственный");
        ЭлементОтбора.Установить(глТекущийПользователь);
		ЭлементыФормы.ДокументСписок.НастройкаОтбора.Ответственный.Доступность = ЛОЖЬ;
	КонецЕсли;	
	
	//---------------ограничение просмотра приходов----------------------------------------
	Если НЕ (РольДоступна("ПолныеПрава") 
	         или РольДоступна("Кладовщик")
			 или РольДоступна("ТолькоПросмотр")
	         или РольДоступна("МенеджерПоЗакупкам")
			 или РольДоступна("МенеджерПоЗакупкамСОграничениемПравДоступа")
			 или РольДоступна("яштФинДиректор") ) тогда
		ЭлементОтбора = ДокументСписок.Отбор.Найти("ВидОперации");
        ЭлементОтбора.Установить(перечисления.ВидыДвиженийПриходРасход.Расход);
  		ЭлементыФормы.ДокументСписок.НастройкаОтбора.ВидОперации.Доступность = ЛОЖЬ;
	КонецЕсли;

КонецПроцедуры


//проверяет наличие хотя бы одной проведенной реализации
//если такая есть, то пересчет заказанного количества - невозможен
функция естьРеализацииПОЗаданию(ссылка, ЕстьПроведенные=истина)
	рез = ложь;
	тзЗакПок = ссылка.ЗаказыПокупателей.Выгрузить();
	тзЗакПок.Свернуть("Реализация", "НомерСтроки");
	N = 0;  
	Если тзЗакПок.Количество()=0 тогда  // нет заданий! нет реализаций!
		возврат ложь;
	КонецЕсли;
	
	для i=0 по тзЗакПок.Количество()-1 цикл  //26.05.2017 - блокировка по реализация!
		//Если не тзЗакПок[i].реализация=неопределено и не тзЗакПок[i].реализация.пустая()
		//	и ( не ЕстьПроведенные или (ЕстьПроведенные и тзЗакПок[i].реализация.проведен) ) Тогда
		Если ЗначениеЗаполнено(тзЗакПок[i].реализация)  //не надо получать .Проведен !
			//и ( ЕстьПроведенные=ЛОЖЬ 
			//  или (ЕстьПроведенные и тзЗакПок[i].реализация.проведен) ) 
			  Тогда
			N = N + 1;	
		КонецЕсли;	
	КонецЦикла;
	
	//
	рез = (не ЕстьПроведенные и (N>0)) или (ЕстьПроведенные и (N = тзЗакПок.Количество())); 
	
	возврат рез;
КонецФункции

функция естьПоступленияПОЗаданию(ссылка)
	рез = ложь;
	СписЗакПост = новый СписокЗначений;
	СписЗакПост.ЗагрузитьЗначения( ссылка.ЗаказыПоставщикам.ВыгрузитьКолонку("ЗаказПоставщику") );
	
	Если СписЗакПост.Количество()>0 тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ 
						//| ПЕРВЫЕ 1
		               |	ЗакупкиОбороты.ЗаказПоставщику
		               |ИЗ
		               |	РегистрНакопления.Закупки.Обороты(&Дата0, &Дата1, , ЗаказПоставщику В (&СписокЗакПост)) КАК ЗакупкиОбороты
		               |ГДЕ
		               |	ЕСТЬNULL(ЗакупкиОбороты.СтоимостьОборот, 0) > 0
		               |	ИЛИ ЕСТЬNULL(ЗакупкиОбороты.КоличествоОборот, 0) > 0";
		
		Запрос.УстановитьПараметр("Дата0", ссылка.Дата);
		Запрос.УстановитьПараметр("Дата1", КонецДня(ТекущаяДата()) );
		Запрос.УстановитьПараметр("СписокЗакПост", СписЗакПост);
		
		Результат = Запрос.Выполнить();
		//Выборка = Результат.Выбрать();
		
		рез = ( НЕ Результат.Пустой() );
	КонецЕсли;	
	
	возврат рез;
	
КонецФункции	

Процедура СписокПриПолученииДанных(Элемент, ОформленияСтрок)
	мТекущаяДата=ТекущаяДата();
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		задание = ДанныеСтроки.Ссылка;
		
		Если ДанныеСтроки.ВидОперации=Перечисления.ВидыДвиженийПриходРасход.Приход Тогда
			ОформлениеСтроки.ЦветТекста=WebЦвета.Красный;
			Если Задание.Выполнено тогда
				ОформлениеСтроки.ЦветФона = WebЦвета.LightGray;   // Задание выполнено!
				Если естьПоступленияПОЗаданию(задание) тогда   
					ОформлениеСтроки.ЦветТекста=WebЦвета.Синий;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли естьРеализацииПОЗаданию(задание, ЛОЖЬ) Тогда // считает любые документы...
			ОформлениеСтроки.ЦветТекста=WebЦвета.Синий;	// идет отгрузка		
		КонецЕсли;		
		
		Если ДанныеСтроки.ВидОперации=Перечисления.ВидыДвиженийПриходРасход.Расход 
			и (  (задание.ИтогКоличествоШтук>0
			     и задание.ИтогКоличествоШтук = задание.ЗаказыПокупателей.Итог("КоличествоШтукОтгружено")
			     ) //или док.выполнено
			  ) тогда // все реализации проведены, количество заказано = отгружено!
			ОформлениеСтроки.ЦветФона = WebЦвета.LightGray;   // 100% отгрузка и проведение!
		КонецЕсли;		
		                                                                    // 2 часа
		Если (ДанныеСтроки.Ссылка.ДатаМодификацииДокумента+7200) > мТекущаяДата Тогда
			ОформлениеСтроки.Шрифт = мЖирныйШрифт;
		КонецЕсли;	
		
		ОформлениеСтроки.ячейки.важность.ОтображатьТекст = ложь;
		Если ДанныеСтроки.Важность <> Перечисления.Важность.Средняя тогда
		ОформлениеСтроки.ячейки.важность.ОтображатьКартинку = истина;
			Если ДанныеСтроки.Важность = Перечисления.Важность.Высокая тогда
			ОформлениеСтроки.ячейки.важность.ИндексКартинки = 0;
			иначеЕсли ДанныеСтроки.Важность = Перечисления.Важность.Низкая тогда
			ОформлениеСтроки.ячейки.важность.ИндексКартинки = 1;
			КонецЕсли;
		КонецЕсли;
				
		//+++ проценты и цвет для быстрой оценки
		Если ДанныеСтроки.ВидОперации=Перечисления.ВидыДвиженийПриходРасход.Расход
			и Задание.ИтогКоличествоШтук>0 тогда  
		 Док = Задание;
		 колЗак = мин(Док.ГруппыСкладов.Итог("КоличествоЗаказано"), Док.ГруппыСкладов.Итог("КоличествоСвободно"), Док.ЗаказыПокупателей.Итог("КоличествоШтук"));
		 колОтгр= макс( Док.Товары.Итог("Количество"), Док.ЗаказыПокупателей.Итог("КоличествоШтукОтгружено"));  //макс!
		 ОформлениеСтроки.ячейки.ПроцентНаОтгрузку.значение = окр( колЗак*100 / Док.ИтогКоличествоШтук, 0) ;
		 ОформлениеСтроки.ячейки.ПроцентОтгружено.значение  = окр( ?(колЗак=0, 0, (колОтгр*100/колЗак)), 0);
		 
		 //-------------идет отгрузка... заказано но еще не все отгружено!---------------------------------------
		  Если колЗак>0 и Док.проведен тогда //и не док.выполнено
			Если колЗак = Док.ИтогКоличествоШтук и (колОтгр=0) и не док.выполнено тогда
		    	  ОформлениеСтроки.ЦветФона = WebЦвета.НейтральноЗеленый;// в работе, все что заказано >> на отгрузку	 
			Иначе
				Если колЗак<Док.ИтогКоличествоШтук и (колОтгр=0 или колОтгр=колЗак) и не док.выполнено тогда
 					ОформлениеСтроки.ЦветФона = WebЦвета.СветлоРозовый;	//недозаказ склада! 
				ИначеЕсли (колОтгр>0 и колОтгр>колЗак) 
					или ( Док.Товары.Итог("Количество")<>Док.ЗаказыПокупателей.Итог("КоличествоШтукОтгружено")
						 и (Док.ЗаказыПокупателей.Итог("КоличествоШтукОтгружено")>0)
					     ) тогда //18.11.2013	
					ОформлениеСтроки.ЦветФона = WebЦвета.Сливовый; // Перегруз на складе - чтобы всегда видели!
				ИначеЕсли не док.выполнено тогда
				    ОформлениеСтроки.ЦветФона = WebЦвета.НейтральноЗеленый;// в работе	 
				конецЕсли;
	 	  	КонецЕсли;
 	  	  КонецЕсли;

		 
		Иначе	
		  ОформлениеСтроки.ячейки.ПроцентНаОтгрузку.значение = 0;
		  ОформлениеСтроки.ячейки.ПроцентОтгружено.значение  = 0;
	    КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Процедура ДокументСписокПередНачаломДобавления(Элемент, Отказ, Копирование)
	стр1 = ЭлементыФормы.ДокументСписок.ТекущиеДанные;
	Если Копирование и не стр1.ссылка.Выполнено тогда
		Предупреждение("Копировать можно только Выполненный заказ!");
		Отказ = истина;
	КонецЕсли;	
КонецПроцедуры

Процедура ВнешнееСобытие(Источник, Событие, Данные)
		Перем СписокДок;

	Если Не(ВводДоступен()) Тогда
		Возврат;
	КонецЕсли;

	Если глТорговоеОборудование <> Неопределено Тогда
		Если Событие = "BarCodeValue" Тогда
			Если глТорговоеОборудование.ПолучитьВсеДокументыПоШтрихКоду(Данные, СписокДок) Тогда
				Если СписокДок.Количество() = 1 Тогда
					ОткрытьЗначение(СписокДок[0].Ссылка);
				ИначеЕсли СписокДок.Количество() > 1 Тогда
					СтрокаДок = СписокДок.ВыбратьСтроку("Выберите один из найденных документов.");
					Если СтрокаДок<>Неопределено Тогда
						ОткрытьЗначение(СтрокаДок.Ссылка);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			глТорговоеОборудование.СканерПосылкаДанных(1);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ДействияФормыРеестр(Кнопка)
	ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоНаименованию("РеестрЗаданийНаОтгрузку"); 
	ИмяФайла = ПолучитьИмяВременногоФайла(); 
	ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
	ДвоичныеДанные.Записать(ИмяФайла); 
	Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
		Форма = ВнешниеОтчеты.ПолучитьФорму(ИмяФайла); 
	Иначе 
		Форма = ВнешниеОбработки.ПолучитьФорму(ИмяФайла); 
	КонецЕсли; 
	Форма.Открыть(); 
	УдалитьФайлы(ИмяФайла);
КонецПроцедуры

//21.07.2017
Процедура ДействияФормыПоискПоШтрихКоду(Кнопка)

	Если глТорговоеОборудование <> Неопределено Тогда
		Данные= "";
		Если ВвестиСтроку( Данные, "Сканируйте штрих-код") тогда
			СписокДок = неопределено;
 			Если глТорговоеОборудование.ПолучитьВсеДокументыПоШтрихКоду(Данные, СписокДок) Тогда
				Если СписокДок.Количество() = 1 Тогда
					ОткрытьЗначение(СписокДок[0].Ссылка);
				ИначеЕсли СписокДок.Количество() > 1 Тогда
					СтрокаДок = СписокДок.ВыбратьСтроку("Выберите один из найденных документов.");
					Если СтрокаДок<>Неопределено Тогда
						ОткрытьЗначение(СтрокаДок.Ссылка);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


мЖирныйШрифт = Новый Шрифт(,, Истина);