Перем мВалютаРегламентированногоУчета Экспорт;

//БАЛАНС (04.12.2007)                       
//
Перем мПроведениеИзФормы Экспорт; 

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Возвращает таблицу стоимости по товарам
//
Функция ПолучитьТаблицуСтоимостиТоваров()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	СУММА(ПартииТоваровНаСкладах.Стоимость) КАК Стоимость
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|
	|ГДЕ
	|	ПартииТоваровНаСкладах.Регистратор = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры
	|";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьСтоимостьПоПартиямТоваров()

// Возвращает стоимость товара
//
Функция ПолучитьСтоимостьТовара(Таблица, Номенклатура, Характеристика = Неопределено, Серия = Неопределено)

	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура",                   Номенклатура);
	Если НЕ ЗначениеНеЗаполнено(Характеристика) Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	КонецЕсли;
	Если НЕ ЗначениеНеЗаполнено(Серия) Тогда
		СтруктураПоиска.Вставить("СерияНоменклатуры",          Серия);
	КонецЕсли;

	Строки = Таблица.НайтиСтроки(СтруктураПоиска);

	Если Строки.Количество() > 0 Тогда
		Стоимость = Строки[0].Стоимость;
	Иначе
		Стоимость = 0;
	КонецЕсли;

	Возврат Стоимость;

КонецФункции // ПолучитьСтоимостьПоПартиямТоваров()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьСписаниеТоваров()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ВидСкладаНТТ",    Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Организация,
	|	Склад,
	|	Склад.Представление         КАК ПредставлениеСклада,
	|	Подразделение               КАК Подразделение,
	|	Подразделение.Представление КАК ПредставлениеПодразделения,
	|	СуммаДокумента,
	|	Константы.ВалютаРегламентированногоУчета ВалютаДокумента,
	|	Товары.(
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Номенклатура.Код                КАК Код,
	|		Номенклатура.Артикул            КАК Артикул,
	|		КоличествоМест,
	|		Количество,
	|		Качество,
	|		ЕдиницаИзмерения.Представление     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|		ВЫБОР
	|			КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА Цена
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Цена,
	|		ВЫБОР
	|			КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Сумма,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		СерияНоменклатуры КАК Серия
	|	),
	|	ВозвратнаяТара.(
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Номенклатура.Код                КАК Код,
	|		Номенклатура.Артикул            КАК Артикул,
	|		Количество,
	|		Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|		0 КАК Цена,
	|		0 КАК Сумма
	|	)
	|ИЗ
	|	Документ.СписаниеТоваров КАК СписаниеТоваров,
	|	Константы
	|
	|ГДЕ
	|	СписаниеТоваров.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки,
	|	ВозвратнаяТара.НомерСтроки
	|";

	ЭтоСкладНТТ = (Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка);

	Если ЭтоСкладНТТ Тогда
		ИмяШапки         = "ШапкаТаблицы";
		ИмяСтроки        = "Строка";
	Иначе
		ТаблицаСтоимости = ПолучитьТаблицуСтоимостиТоваров();
		ИмяШапки         = "ШапкаТаблицыНТТ";
		ИмяСтроки        = "СтрокаНТТ";
	КонецЕсли;

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	ВыборкаСтрокТара   = Шапка.ВозвратнаяТара.Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеТоваров_Накладная";

	Макет = ПолучитьМакет("Накладная");

	// Выводим шапку накладной
	ОбластьМакета                          = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Списание товаров");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("РевизитыОрганизации");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ПредставлениеОрганизации = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ПредставлениеОрганизации;
	ТабДокумент.Вывести(ОбластьМакета);

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;

	ФлагПечатиМест = (Товары.Итог("КоличествоМест") > 0);
	ОбластьНомера  = Макет.ПолучитьОбласть(ИмяШапки + "|НомерСтроки");
	ОбластьКодов   = Макет.ПолучитьОбласть(ИмяШапки + "|КолонкаКодов");
	ОбластьТовар   = Макет.ПолучитьОбласть(ИмяШапки + "|Товар");
	ОбластьМест    = Макет.ПолучитьОбласть(ИмяШапки + "|Мест");
	ОбластьДанных  = Макет.ПолучитьОбласть(ИмяШапки + "|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьТовар);
	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
		                                    + ?(ФлагПечатиМест, 0, Макет.Область("R14C5").ШиринаКолонки + Макет.Область("R14C6").ШиринаКолонки);
	Иначе
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
		                                    + Макет.Область("КолонкаКодов").ШиринаКолонки
		                                    + ?(ФлагПечатиМест, 0, Макет.Область("R14C5").ШиринаКолонки + Макет.Область("R14C6").ШиринаКолонки);
	КонецЕсли;
	Если ФлагПечатиМест Тогда
		ТабДокумент.Присоединить(ОбластьМест);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);

	ОбластьНомера = Макет.ПолучитьОбласть(ИмяСтроки + "|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть(ИмяСтроки + "|КолонкаКодов");
	ОбластьТовар  = Макет.ПолучитьОбласть(ИмяСтроки + "|Товар");
	ОбластьМест   = Макет.ПолучитьОбласть(ИмяСтроки + "|Мест");
	ОбластьДанных = Макет.ПолучитьОбласть(ИмяСтроки + "|Данные");

	СуммаИтого = 0;
	Ном        = 0;

	// Товары
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;

		ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьНомера.Параметры.НомерСтроки = Ном;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьТовар.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьТовар.Параметры.Товар = ВыборкаСтрокТовары.Товар + ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьТовар);

		Если ФлагПечатиМест Тогда
			ОбластьМест.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабДокумент.Присоединить(ОбластьМест);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		Если ЭтоСкладНТТ Тогда
			Сумма = ВыборкаСтрокТовары.Сумма;
		Иначе
			Сумма = ПолучитьСтоимостьТовара(ТаблицаСтоимости,
			                                ВыборкаСтрокТовары.Номенклатура,
			                                ВыборкаСтрокТовары.Характеристика,
			                                ВыборкаСтрокТовары.Серия);

			ОбластьДанных.Параметры.Сумма = Сумма;
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);

		СуммаИтого = СуммаИтого + Сумма;

	КонецЦикла;

	// Тара
	Пока ВыборкаСтрокТара.Следующий() Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;

		ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокТара);
		ОбластьНомера.Параметры.НомерСтроки = Ном;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьТовар.Параметры.Заполнить(ВыборкаСтрокТара);
		ОбластьТовар.Параметры.Товар = ВыборкаСтрокТара.Товар + " (возвратная тара)";
		ТабДокумент.Присоединить(ОбластьТовар);

		Если ФлагПечатиМест Тогда
			ОбластьМест.Параметры.Заполнить(ВыборкаСтрокТара);
			ТабДокумент.Присоединить(ОбластьМест);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТара);
		Если ЭтоСкладНТТ Тогда
			Сумма = ВыборкаСтрокТара.Сумма;
		Иначе
			Сумма = ПолучитьСтоимостьТовара(ТаблицаСтоимости, ВыборкаСтрокТара.Номенклатура);

			ОбластьДанных.Параметры.Сумма = Сумма;
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);

		СуммаИтого = СуммаИтого + Сумма;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьТовар  = Макет.ПолучитьОбласть("Итого|Товар");
	ОбластьМест   = Макет.ПолучитьОбласть("Итого|Мест");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьТовар);
	Если ФлагПечатиМест Тогда
		ТабДокумент.Присоединить(ОбластьМест);
	КонецЕсли;
	ОбластьДанных.Параметры.Всего = ФорматСумм(СуммаИтого);
	ТабДокумент.Присоединить(ОбластьДанных);

	// Вывести Сумму прописью
	ОбластьМакета                          = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований " + Ном
	                                       + ", на сумму " + ФорматСумм(СуммаИтого, мВалютаРегламентированногоУчета);
	ОбластьМакета.Параметры.СуммаПрописью  = СформироватьСуммуПрописью(СуммаИтого, мВалютаРегламентированногоУчета);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьСписаниеТоваров()

// Формирует унифицированную форму ТОРГ-16
//
// Возвращаемое значение:
//  Табличный документ - унифицировання форма ТОРГ-16
//
Функция ПечатьТОРГ16()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ВидСкладаНТТ",    Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер                                    КАК НомерДокумента,
	|	Дата                                     КАК ДатаДокумента,
	|	Организация,
	|	Организация                              КАК Руководители,
	|	Склад,
	|	Склад.Представление                      КАК ПредставлениеСклада,
	|	Подразделение                            КАК Подразделение,
	|	Подразделение.Представление              КАК ПредставлениеПодразделения,
	|	Основание                                КАК Основание,
	|	СуммаДокумента,
	|	Константы.ВалютаРегламентированногоУчета КАК ВалютаДокумента,
	|	Товары.(
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное      КАК ТоварНаименование,
	|		Номенклатура."+ ТоварКод + "         КАК ТоварКод,
	|		Количество,
	|		КоличествоМест,
	|		Качество,
	|		ЕдиницаИзмерения.Представление               КАК ЕдиницаИзмеренияНаименование,
	|		ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|		ЕдиницаИзмеренияМест.Представление           КАК ЕдиницаИзмеренияМестНаименование,
	|		ЕдиницаИзмерения.Вес                 КАК МассаОдногоМеста,
	|		ВЫБОР
	|			КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА Цена
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Цена,
	|		ВЫБОР
	|			КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Стоимость,
	|		ХарактеристикаНоменклатуры           КАК Характеристика,
	|		СерияНоменклатуры                    КАК Серия
	|	),
	|	ВозвратнаяТара.(
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|		Номенклатура."+ ТоварКод + "    КАК ТоварКод,
	|		Количество,
	|		Номенклатура.ЕдиницаХраненияОстатков.Представление               КАК ЕдиницаИзмеренияНаименование,
	|		Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|		Номенклатура.ЕдиницаХраненияОстатков.Вес КАК МассаОдногоМеста,
	|		0 КАК Цена,
	|		0 КАК Стоимость
	|	)
	|ИЗ
	|	Документ.СписаниеТоваров КАК СписаниеТоваров, Константы
	|
	|ГДЕ
	|	СписаниеТоваров.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки,
	|	ВозвратнаяТара.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Макет       = ПолучитьОбщийМакет("ТОРГ16");
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеТоваров_ТОРГ16";

	// Выводим общие реквизиты шапки
	ОписаниеОрганизации = СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	ОбластьМакета       = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ОписаниеОрганизации(ОписаниеОрганизации);
	ОбластьМакета.Параметры.ОрганизацияПоОКПО        = ОписаниеОрганизации.КодПоОКПО;

	Руководители = ОтветственныеЛицаОрганизации(Шапка.Руководители, Шапка.ДатаДокумента,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	ОбластьМакета.Параметры.ФИОРуководителя = Руководитель;

	ТабДокумент.Вывести(ОбластьМакета);

	СтрокНаСтранице = 23;
	СтрокШапки      = 11;
	СтрокПодвала    = 0;
	НомерСтраницы   = 1;
	Ном             = 0;

	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	ВыборкаСтрокТара   = Шапка.ВозвратнаяТара.Выбрать();
	КоличествоСтрок    = ВыборкаСтрокТовары.Количество() + ВыборкаСтрокТара.Количество();

	Если КоличествоСтрок = 1 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицыПервогоЛиста");
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаПервогоЛиста");

	// Товары
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;

		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ИтогоСтоимостьПоСтранице = 0;
			НомерСтраницы            = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.ДатаСписанияТовара = Шапка.ДатаДокумента;

		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;

	// Тара
	ВыборкаСтрокТара = Шапка.ВозвратнаяТара.Выбрать();
	Пока ВыборкаСтрокТара.Следующий() Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;

		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ИтогоСтоимостьПоСтранице = 0;
			НомерСтраницы            = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТара);
		ОбластьМакета.Параметры.ДатаСписанияТовара = Шапка.ДатаДокумента;

		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;

	СтрокНаСтранице = 27;
	СтрокШапки      = 5;
	СтрокПодвала    = 11;
	НомерСтраницы   = 1;
	Ном             = 0;

	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	НомерСтраницы                            = НомерСтраницы + 1;
	ЗаголовокТаблицы                         = Макет.ПолучитьОбласть("ЗаголовокТаблицыВторогоЛиста");
	ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	Если КоличествоСтрок = 1 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	ИтогоСтоимость = 0;

	// Выводим многострочную часть докмента
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаВторогоЛиста");

	// Товары
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;

		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
		
		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ИтогоСтоимостьПоСтранице = 0;
			НомерСтраницы            = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;
	
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);

		КоличествоМест = Формат(ВыборкаСтрокТовары.Количество, "ЧЦ=15; ЧДЦ=3");

		Если ВыборкаСтрокТовары.КоличествоМест <> 0 И НЕ ЗначениеНеЗаполнено(ВыборкаСтрокТовары.ЕдиницаИзмеренияМестНаименование) Тогда
			КоличествоМест = КоличествоМест 
			                 + Символы.ПС
			                 + " (" + Формат(ВыборкаСтрокТовары.КоличествоМест,"ЧЦ=15; ЧДЦ=0")
			                 + " "
			                 + ВыборкаСтрокТовары.ЕдиницаИзмеренияМестНаименование
			                 + ")";
		КонецЕсли;

		ОбластьМакета.Параметры.КоличествоМест    = КоличествоМест;
		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрокТовары.ТоварНаименование + ПредставлениеСерий(ВыборкаСтрокТовары);
		МассаНетто                                = ВыборкаСтрокТовары.МассаОдногоМеста * ВыборкаСтрокТовары.КоличествоМест;
		ОбластьМакета.Параметры.МассаНетто        = МассаНетто;

		ТабДокумент.Вывести(ОбластьМакета);

		// Обновим итоги по документу
		ИтогоСтоимость = ИтогоСтоимость + ВыборкаСтрокТовары.Стоимость;
	КонецЦикла;

	// Тара
	ВыборкаСтрокТара = Шапка.ВозвратнаяТара.Выбрать();
	Пока ВыборкаСтрокТара.Следующий() Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;

		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
		
		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ИтогоСтоимостьПоСтранице = 0;
			НомерСтраницы            = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;
	
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТара);

		ОбластьМакета.Параметры.КоличествоМест    = Формат(ВыборкаСтрокТара.Количество, "ЧЦ=15; ЧДЦ=3");
		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрокТара.ТоварНаименование + " (возвратная тара)";

		ТабДокумент.Вывести(ОбластьМакета);

		// Обновим итоги по документу
		ИтогоСтоимость = ИтогоСтоимость + ВыборкаСтрокТара.Стоимость;
	КонецЦикла;

	// Выводим итоги по документу в общем
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Итого = ИтогоСтоимость;
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.СуммаСписанияПрописью = СформироватьСуммуПрописью(ИтогоСтоимость, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Зададим параметры макета
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	Возврат ТабДокумент;

КонецФункции // ПечатьТОРГ16()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если Не Проведен Тогда
		Если Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
			Возврат;
		
		Иначе
		Предупреждение("Документ НЕ Проведен! Данные для печати могут быть неверными!",30);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Ведомость" Тогда
		ТабДокумент = ПечатьСписаниеТоваров();
	ИначеЕсли ИмяМакета = "ТОРГ16" тогда
		ТабДокумент = ПечатьТОРГ16();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();
	
	КонецЕсли; 

	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;

	СписокМакетов.Добавить("Ведомость", "Акт списания товаров");
	СписокМакетов.Добавить("ТОРГ16", "ТОРГ-16 (Акт о списании товаров)");

	ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

#КонецЕсли

// Процедура выполняет заполниение табличной части по инвентаризации товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (инвентаризация товаров).
//
Процедура ЗаполнитьТоварыПоИнвентаризацииТоваровУпр(ДокументОснование) Экспорт
	
#Если ВнешнееСоединение Тогда
	Если Товары.Количество() > 0 Тогда
		Товары.Очистить();
	КонецЕсли;
#КонецЕсли

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка",          Ссылка);
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.ЕдиницаИзмеренияМест,
	|	Док.Ссылка.Склад                              КАК Склад,
	|	МАКСИМУМ(Док.КоличествоУчет - Док.Количество) КАК КоличествоОтклонение,
	|	ВЫБОР
	|		КОГДА СУММА(ВложенныйЗапрос.Количество) ЕСТЬ NULL ТОГДА
	|			0
	|		ИНАЧЕ
	|			СУММА(ВложенныйЗапрос.Количество)
	|	КОНЕЦ КАК КоличествоСписанное,
	|	Док.ЦенаВРознице КАК Цена,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры,
	|	Док.Качество
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК Док
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ 
	|       ДокСписание.Номенклатура,
	|       ДокСписание.ХарактеристикаНоменклатуры,
	|       ДокСписание.СерияНоменклатуры,
	|       ДокСписание.Ссылка.Склад                 КАК Склад,
	|		ДокСписание.Количество                   КАК Количество,
	|       ДокСписание.Цена
	|	 ИЗ
	|       Документ.СписаниеТоваров.Товары КАК ДокСписание
	|    ГДЕ
	|       ДокСписание.Ссылка <> &ДокументСсылка
	|       И ДокСписание.Ссылка.Проведен
	|       И ДокСписание.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка
	|
	|    ОБЪЕДИНИТЬ ВСЕ
	|
	|	 ВЫБРАТЬ 
	|       ДокОтчетККМ.Номенклатура,
	|       ДокОтчетККМ.ХарактеристикаНоменклатуры,
	|       ДокОтчетККМ.СерияНоменклатуры,
	|       ДокОтчетККМ.Склад                        КАК Склад,
	|		ДокОтчетККМ.Количество                   КАК Количество,
	|       ДокОтчетККМ.Цена
	|	 ИЗ
	|       Документ.ОтчетОРозничныхПродажах.Товары КАК ДокОтчетККМ
	|    ГДЕ
	|         ДокОтчетККМ.Ссылка.Проведен
	|       И ДокОтчетККМ.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка) КАК ВложенныйЗапрос
	|ПО
	|      Док.Номенклатура               = ВложенныйЗапрос.Номенклатура
	|    И Док.ХарактеристикаНоменклатуры = ВложенныйЗапрос.ХарактеристикаНоменклатуры
	|    И Док.СерияНоменклатуры          = ВложенныйЗапрос.СерияНоменклатуры
	|    И Док.Ссылка.Склад               = ВложенныйЗапрос.Склад " +
	?(Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка, " 
	|    И Док.Цена                       = ВложенныйЗапрос.Цена", "") + "
	|
	|ГДЕ
	|	  Док.Ссылка = &ДокументОснованиеСсылка 
	|   И Док.КоличествоУчет - Док.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Ссылка.Склад,
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.ЕдиницаИзмеренияМест,
	|	Док.ЦенаВРознице,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры,
	|	Док.Качество";

	РезультатЗапроса = Запрос.Выполнить();

	Склад = ДокументОснование.Склад;

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		КоличествоСписать = Выборка.КоличествоОтклонение - Выборка.КоличествоСписанное;

		Если КоличествоСписать <= 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест       = Выборка.ЕдиницаИзмеренияМест;
		СтрокаТабличнойЧасти.Коэффициент                = Выборка.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.Качество                   = Выборка.Качество;
		СтрокаТабличнойЧасти.Количество                 = КоличествоСписать;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;

		РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		Если Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда

			СтрокаТабличнойЧасти.Цена = Выборка.Цена;
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;

	КонецЦикла;

	#Если Клиент Тогда

	Если Товары.Количество() = 0 Тогда
		Сообщить("В документе """ + ДокументОснование.Метаданные().Представление() + """ № " + ДокументОснование.Номер +" отсутствуют товары учетное количество которых превышает фактическое.");
	КонецЕсли;

	#КонецЕсли

КонецПроцедуры // ЗаполнитьТоварыПоИнвентаризацииТоваров()

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
процедура ЗаполнитьТоварыАХПоИнвентаризацииТоваровУпр(ДокументОснование)
	
	Если НЕ ДокументОснование.Склад.АдресноеХранение тогда
	КонецЕсли;
	
	#Если ВнешнееСоединение Тогда
	Если ТоварыАдресноеХранение.Количество() > 0 Тогда
		ТоварыАдресноеХранение.Очистить();
	КонецЕсли;
	#КонецЕсли

	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ИнвентаризацияТоваровНаСкладеТоварыАдресноеХранение.АдресХранения,
	                |	ИнвентаризацияТоваровНаСкладеТоварыАдресноеХранение.АдресХранения.Владелец КАК Склад,
	                |	ИнвентаризацияТоваровНаСкладеТоварыАдресноеХранение.Номенклатура,
	                |	-(ИнвентаризацияТоваровНаСкладеТоварыАдресноеХранение.Количество - ИнвентаризацияТоваровНаСкладеТоварыАдресноеХранение.КоличествоУчет) КАК Количество
	                |ИЗ
	                |	Документ.ИнвентаризацияТоваровНаСкладе.ТоварыАдресноеХранение КАК ИнвентаризацияТоваровНаСкладеТоварыАдресноеХранение
	                |ГДЕ
	                |	ИнвентаризацияТоваровНаСкладеТоварыАдресноеХранение.Ссылка = &Ссылка
	                |	И (ИнвентаризацияТоваровНаСкладеТоварыАдресноеХранение.Количество - ИнвентаризацияТоваровНаСкладеТоварыАдресноеХранение.КоличествоУчет) < 0";
	 
	 Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Пока Выборка.Следующий() Цикл
	 
		стр1 = ТоварыАдресноеХранение.Добавить();
 	    ЗаполнитьЗначенияСвойств(стр1, Выборка);
	 
	 КонецЦикла;
	 
	
#Если Клиент Тогда

	Если ТоварыАдресноеХранение.Количество() = 0 Тогда
		Сообщить("В документе """ + ДокументОснование.Метаданные().Представление() + """ № " + ДокументОснование.Номер +" отсутствуют товары по Адресам у которых фактическое количество меньше учетного.");
	КонецЕсли;

	#КонецЕсли

КонецПроцедуры //ЗаполнитьТоварыАХПоИнвентаризацииТоваров()



// Заолняет табличную часть по сериям при оперативном проведении
//
Процедура ЗаполнитьПоСериям() Экспорт

	ТоварыТабличнойЧасти = Товары.Выгрузить();
	ТоварыТабличнойЧасти.Свернуть("Номенклатура"); 

	МассивНоменклатуры = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");
	
	ТаблицаСерий   = ПолучитьТаблицуОстатковПоСериям(Склад, Организация, МассивНоменклатуры);
	
	ТоварыТабличнойЧасти=Товары.Выгрузить();
	
	Товары.Очистить();

	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;

	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл

		СтуктураПоиска   = Новый Структура;
		СтуктураПоиска.Вставить("Номенклатура",               ИсходнаяСтрока.Номенклатура);
		СтуктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтуктураПоиска.Вставить("Качество",                   ИсходнаяСтрока.Качество);

		НайденныеСтроки  = ТаблицаСерий.НайтиСтроки(СтуктураПоиска);
		СтрокаСПустойСерией = Неопределено;
		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;

		Для Каждого Строка Из НайденныеСтроки Цикл

			Если КоличествоОсталосьПогасить<=0 Тогда
				Прервать;
			КонецЕсли;

			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;

			ОстатокВЕдиницахДокумента = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент;

			Если ОстатокВЕдиницахДокумента >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить/ОстатокВЕдиницахДокумента;
			Иначе
				КоэффСписания = 1
			КонецЕсли;

			СписанноеКоличество = Окр(ОстатокВЕдиницахДокумента * КоэффСписания, 3, РежимОкругления.Окр15как20);
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Номенклатура               = ИсходнаяСтрока.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения           = ИсходнаяСтрока.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент                = ИсходнаяСтрока.Коэффициент;
			НоваяСтрока.Цена                       = ИсходнаяСтрока.Цена;
			НоваяСтрока.ХарактеристикаНоменклатуры = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры          = Строка.СерияНоменклатуры;
			НоваяСтрока.ДокументРезерва            = ИсходнаяСтрока.ДокументРезерва;
			НоваяСтрока.Качество                   = ИсходнаяСтрока.Качество;
			НоваяСтрока.Количество                 = СписанноеКоличество; 
			НоваяСтрока.КоличествоМест             = НоваяСтрока.Количество / НоваяСтрока.Коэффициент;
			РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);

			Если ЗначениеНеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;

			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток = Строка.Остаток - СписанноеКоличество* ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент / ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;            

		КонецЦикла;

		Если КоличествоОсталосьПогасить>0 Тогда
			Если СтрокаСПустойСерией = Неопределено Тогда
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Номенклатура               = ИсходнаяСтрока.Номенклатура;
				НоваяСтрока.ЕдиницаИзмерения           = ИсходнаяСтрока.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент                = ИсходнаяСтрока.Коэффициент;
				НоваяСтрока.Цена                       = ИсходнаяСтрока.Цена;
				НоваяСтрока.ХарактеристикаНоменклатуры = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
				НоваяСтрока.СерияНоменклатуры          = ИсходнаяСтрока.СерияНоменклатуры;
				НоваяСтрока.ДокументРезерва            = ИсходнаяСтрока.ДокументРезерва;                
				НоваяСтрока.Качество                   = ИсходнаяСтрока.Качество;
				НоваяСтрока.Количество                 = КоличествоОсталосьПогасить;
				НоваяСтрока.КоличествоМест             = НоваяСтрока.Количество / НоваяСтрока.Коэффициент;
				РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
			Иначе
				СтрокаСПустойСерией.Количество = СтрокаСПустойСерией.Количество+КоличествоОсталосьПогасить;
				РассчитатьСуммуТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	Если Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		ТаблицаТоваров.Колонки.Цена.Имя = "ЦенаВРознице";
	КонецЕсли;

КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре    - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТаре.Выгрузить();

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТары()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Организация, Склад, Комментарий");

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	СтруктураОбязательныхПолей.Вставить("Качество");

	КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары",СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество");

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара",СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//
//+++  ТаблицаПоТоварамАХ	  - таблица значений, содержащая данные для проведения и проверки ТЧ Товары Адресное Хранение
// 	
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок) 

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	ДвиженияПоТоварамОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	ДвиженияПоСписаннымТоварам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);

	// Проводить по партиям сразу нужно если установлен параметр
	// учетной политики СписыватьПартииПриПроведенииДокументов
	ПроводитьПоПартиям = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата).СписыватьПартииПриПроведенииДокументов;

	Если ПроводитьПоПартиям Тогда

		ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());

		// Зарегистрируем в пследовательности
		ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
		ЗаписьРегистрации.Период = Дата;
		ЗаписьРегистрации.Регистратор = Ссылка;

	Иначе

		// В неоперативном режиме границы последовательностей сдвигаются назад, если они позже документа.
		Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
			СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете)
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок)

	// Движения по документу.

	Если ОтражатьВУправленческомУчете Тогда
		// Плотников, по заказам покупателей 15.08.2016=============================================	
		
		Если  ЗначениеЗаполнено(Заказ) и Склад = Справочники.Склады.НайтиПоНаименованию("1") и Заказ.ТипЗаказа = 12 Тогда	//Реклама	
			
			Запрос = Новый Запрос;		
			Запрос.Текст = "ВЫБРАТЬ
			|	Перемещение.Номенклатура,
			|	Перемещение.Количество,
			|	ЕСТЬNULL(ЗаказПокупателя.Цена, 1) КАК Цена,
			|	ЕСТЬNULL(ЗаказПокупателя.Сумма, 0) КАК Сумма,
			|	ЕСТЬNULL(ЗаказПокупателя.ПроцентСкидкиНаценки, 0) КАК ПроцентСкидкиНаценки,
			|	ЕСТЬNULL(ЗаказПокупателя.ПроцентАвтоматическихСкидок, 0) КАК ПроцентАвтоматическихСкидок,
			|	ЕСТЬNULL(ЗаказПокупателя.ЕдиницаИзмерения, Перемещение.Номенклатура.ЕдиницаХраненияОстатков) КАК ЕдиницаИзмерения
			|ИЗ
			|	(ВЫБРАТЬ
			|		СписаниеТоваровТовары.Номенклатура КАК Номенклатура,
			|		СУММА(СписаниеТоваровТовары.Количество) КАК Количество
			|	ИЗ
			|		Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
			|	ГДЕ
			|		СписаниеТоваровТовары.Ссылка = &Ссылка
			|	
			|	СГРУППИРОВАТЬ ПО
			|		СписаниеТоваровТовары.Номенклатура) КАК Перемещение
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
			|			ЗаказПокупателяТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|			ЗаказПокупателяТовары.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
			|			ЗаказПокупателяТовары.Количество КАК Количество,
			|			ЗаказПокупателяТовары.Цена КАК Цена,
			|			ЗаказПокупателяТовары.Сумма КАК Сумма,
			|			ЗаказПокупателяТовары.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
			|			ЗаказПокупателяТовары.УсловиеАвтоматическойСкидки КАК УсловиеАвтоматическойСкидки,
			|			ЗаказПокупателяТовары.ЗначениеУсловияАвтоматическойСкидки КАК ЗначениеУсловияАвтоматическойСкидки
			|		ИЗ
			|			Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
			|		ГДЕ
			|			ЗаказПокупателяТовары.Ссылка = &Заказ) КАК ЗаказПокупателя
			|		ПО Перемещение.Номенклатура = ЗаказПокупателя.Номенклатура" ;
			
			Запрос.УстановитьПараметр("Ссылка",Ссылка );
			Запрос.УстановитьПараметр("Заказ",Заказ );
			Результат=Запрос.Выполнить();
			
			Если НЕ Результат.Пустой() Тогда
				Выборка =Результат.Выбрать();
				Пока Выборка.Следующий() Цикл
					Движ = Движения.ЗаказыПокупателей.Добавить();
					Движ.ВидДвижения= ВидДвиженияНакопления.Расход;
					Движ.Период= Ссылка.Дата;
					Движ.Регистратор= Ссылка;
					Движ.ДоговорКонтрагента= Заказ.ДоговорКонтрагента;
					Движ.ЗаказПокупателя= Заказ;
					Движ.ЕдиницаИзмерения= Выборка.ЕдиницаИзмерения;
					Движ.СтатусПартии	=  Перечисления.СтатусыПартийТоваров.Купленный;
					Движ.Номенклатура	=  Выборка.Номенклатура;
					Движ.ХарактеристикаНоменклатуры	=  Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
					Движ.Цена = Выборка.Цена;
					// -------------------				
					Движ.Количество = Выборка.Количество;
					Движ.СуммаВзаиморасчетов = Выборка.Сумма;
					Движ.СуммаУпр = Выборка.Сумма;
				КонецЦикла;	
				
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Заказ) и Склад = Справочники.Склады.НайтиПоНаименованию("1") и Заказ.ТипЗаказа <> 12 Тогда    //Бонусы
			
			Запрос = Новый Запрос;		
			Запрос.Текст = "ВЫБРАТЬ
			               |	Перемещение.Номенклатура,
			               |	Перемещение.Количество,
			               |	0 КАК Цена,
			               |	0 КАК Сумма,
			               |	0 КАК ПроцентСкидкиНаценки,
			               |	0 КАК ПроцентАвтоматическихСкидок,
			               |	0 КАК ЕдиницаИзмерения
			               |ИЗ
			               |	(ВЫБРАТЬ
			               |		СписаниеТоваровТовары.Номенклатура КАК Номенклатура,
			               |		СУММА(СписаниеТоваровТовары.Количество) КАК Количество
			               |	ИЗ
			               |		Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
			               |	ГДЕ
			               |		СписаниеТоваровТовары.Ссылка = &Ссылка
			               |	
			               |	СГРУППИРОВАТЬ ПО
			               |		СписаниеТоваровТовары.Номенклатура) КАК Перемещение
			               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			               |			ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
			               |			ЗаказПокупателяТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			               |			ЗаказПокупателяТовары.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
			               |			ЗаказПокупателяТовары.Количество КАК Количество,
			               |			ЗаказПокупателяТовары.Цена КАК Цена,
			               |			ЗаказПокупателяТовары.Сумма КАК Сумма,
			               |			ЗаказПокупателяТовары.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
			               |			ЗаказПокупателяТовары.УсловиеАвтоматическойСкидки КАК УсловиеАвтоматическойСкидки,
			               |			ЗаказПокупателяТовары.ЗначениеУсловияАвтоматическойСкидки КАК ЗначениеУсловияАвтоматическойСкидки
			               |		ИЗ
			               |			Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
			               |		ГДЕ
			               |			ЗаказПокупателяТовары.Ссылка = &Заказ) КАК ЗаказПокупателя
			               |		ПО Перемещение.Номенклатура = ЗаказПокупателя.Номенклатура" ;
			
			Запрос.УстановитьПараметр("Ссылка",Ссылка );
			Запрос.УстановитьПараметр("Заказ",Заказ );
			Результат=Запрос.Выполнить();
			
			Если НЕ Результат.Пустой() Тогда
				Выборка =Результат.Выбрать();
				Пока Выборка.Следующий() Цикл
					Движ = Движения.ЗаказыПокупателей.Добавить();
					Движ.ВидДвижения= ВидДвиженияНакопления.Расход;
					Движ.Период= Ссылка.Дата;
					Движ.Регистратор= Ссылка;
					Движ.ДоговорКонтрагента= Заказ.ДоговорКонтрагента;
					Движ.ЗаказПокупателя= Заказ;
					Движ.ЕдиницаИзмерения= Выборка.Номенклатура.ЕдиницаХраненияОстатков;
					Движ.СтатусПартии	=  Перечисления.СтатусыПартийТоваров.Купленный;
					Движ.Номенклатура	=  Выборка.Номенклатура;
					Движ.ХарактеристикаНоменклатуры	=  Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
					Движ.Цена = Выборка.Цена;
					// -------------------				
					Движ.Количество = Выборка.Количество;
					Движ.СуммаВзаиморасчетов = Выборка.Сумма;
					Движ.СуммаУпр = Выборка.Сумма;
				КонецЦикла;	
				
			КонецЕсли;
			
			
		КонецЕсли;
		
		//Заказы====================================================================================
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах или ТоварыВНеавтоматизированныхТорговыхТочках.

		Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			НаборДвижений = Движения.ТоварыВНеавтоматизированныхТорговыхТочках;
		Иначе
			НаборДвижений = Движения.ТоварыНаСкладах;
		КонецЕсли;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля.
		//Плотников
		Если Склад <> Справочники.Склады.НайтиПоНаименованию("1") Тогда
		    ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");
		//Иначе
		//	Для Каждого стр из ТаблицаДвижений Цикл
		//		стр.склад = стр.СкладОтгрузки;
		//	КонецЦикла;
		КонецЕсли;
		//++++++++
		Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Товар, "ТоварТара");
		КонецЕсли;

		НаборДвижений.мПериод = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		// Проверка осатков при оперативном проведении.
		//23.03.2017 - контроль ВСЕГДА!
		Если Отказ тогда
			возврат;
		Иначе	
		//Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
			Если Отказ тогда
				Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
					#Если Клиент тогда
					Сообщить("НЕЛЬЗЯ СПИСЫВАТЬ ТОВАР, которого нет!", СтатусСообщения.ОченьВажное);
					#КонецЕсли
					Возврат;
				Иначе // на дату документа... возможно он был? но после этой даты могут быть реализации или перемещения	
				//НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок, ИСТИНА);
					#Если Клиент тогда
					Сообщить("НЕЛЬЗЯ СПИСАТЬ ТОВАР, которого нет! Ошибка в документе: "+строка(ЭтотОбъект), СтатусСообщения.ОченьВажное);
					#КонецЕсли
					Если РольДоступна("яштФинДиректор")	тогда //в минус может делать только фин.отдел!
						Отказ = ложь;
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
		//КонецЕсли;
        КонецЕсли;	
		
		Если Не Отказ Тогда
			Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
				Движения.ТоварыВНеавтоматизированныхТорговыхТочках.ВыполнитьРасход();
			Иначе
				Движения.ТоварыНаСкладах.ВыполнитьРасход();
			КонецЕсли;
		КонецЕсли;

		Если ТоварыАдресноеХранение.Количество() > 0 Тогда //+++ вот так просто...
		яштАдресноеХранение.ДвиженияПоРегиструТоварыАдресноеХранение(Движения.ТоварыАдресноеХранение, ЭтотОбъект);
		КонецЕсли;
		
		// ТАРА ПО РЕГИСТРУ ТоварыНаСкладах или ТоварыВНеавтоматизированныхТорговыхТочках.

		Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			НаборДвижений = Движения.ТоварыВНеавтоматизированныхТорговыхТочках;
		Иначе
			НаборДвижений = Движения.ТоварыНаСкладах;
		КонецЕсли;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");
		Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(0,"ЦенаВРознице");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Тара, "ТоварТара");
		Иначе
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
		КонецЕсли;

		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		// Проверка осатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
			
		Если Не Отказ Тогда
			Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
				Движения.ТоварыВНеавтоматизированныхТорговыхТочках.ВыполнитьРасход();
			Иначе
				Движения.ТоварыНаСкладах.ВыполнитьРасход();
			КонецЕсли;
		КонецЕсли;

		// Списание резерва
		ТаблицаПоСписанияРезерва = ТаблицаПоТоварам.Скопировать();
		Сч = 0;
		Пока Сч < ТаблицаПоСписанияРезерва.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоСписанияРезерва.Получить(Сч);
			Если ЗначениеНеЗаполнено(СтрокаТаблицы.ДокументРезерва) 
			 ИЛИ (ТипЗнч(СтрокаТаблицы.ДокументРезерва) <> Тип("ДокументСсылка.ЗаказПокупателя")
			 	  И ТипЗнч(СтрокаТаблицы.ДокументРезерва) <> Тип("ДокументСсылка.ПриходныйОрдерНаТовары"))Тогда
				ТаблицаПоСписанияРезерва.Удалить(СтрокаТаблицы);
			Иначе
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;

		Если ТаблицаПоСписанияРезерва.Количество() > 0 Тогда

			НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоСписанияРезерва, ТаблицаДвижений);

			// Недостающие поля.
			//Плотников
		    Если Склад <> Справочники.Склады.НайтиПоНаименованию("1") Тогда
		        ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");
			//Иначе
			//	Для Каждого стр из ТаблицаДвижений Цикл
			//		стр.склад = стр.СкладОтгрузки;
			//	КонецЦикла;
		    КонецЕсли;
		    //++++++++


			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			// Проверка осатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;
			
			Если Не Отказ Тогда
				Движения.ТоварыВРезервеНаСкладах.ВыполнитьРасход();
			КонецЕсли;

		КонецЕсли;

		ТаблицаПоСписанияРезерва = ТаблицаПоТоварам.Скопировать();
		Сч = 0;
		Пока Сч < ТаблицаПоСписанияРезерва.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоСписанияРезерва.Получить(Сч);
			Если ЗначениеНеЗаполнено(СтрокаТаблицы.ДокументРезерва) 
			 ИЛИ (ТипЗнч(СтрокаТаблицы.ДокументРезерва) <> Тип("ДокументСсылка.РеализацияТоваровУслуг"))Тогда
				ТаблицаПоСписанияРезерва.Удалить(СтрокаТаблицы);
			Иначе
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;

		Если ТаблицаПоСписанияРезерва.Количество() > 0 Тогда

			НаборДвижений = Движения.ТоварыКПередачеСоСкладов;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();

			ТаблицаПоСписанияРезерва.Колонки.ДокументРезерва.Имя = "ДокументПередачи";

			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоСписанияРезерва, ТаблицаДвижений);

			// Недостающие поля.
			//Плотников
		    Если Склад <> Справочники.Склады.НайтиПоНаименованию("1") Тогда
		        ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");
			//Иначе
			//	Для Каждого стр из ТаблицаДвижений Цикл
			//		стр.склад = стр.СкладОтгрузки;
			//	КонецЦикла;
		    КонецЕсли;
		    //++++++++

			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");

			НаборДвижений.мПериод = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			// Проверка осатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;

			Если Не Отказ Тогда
				Движения.ТоварыКПередачеСоСкладов.ВыполнитьРасход();
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	
КонецПроцедуры

Процедура ДвиженияПоТоварамОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок)

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.

	НаборДвижений = Движения.ТоварыОрганизаций;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");

	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	// Проверка осатков при оперативном проведении.
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;

	Если Не Отказ Тогда
		Движения.ТоварыОрганизаций.ВыполнитьРасход();
	КонецЕсли;

КонецПроцедуры

Процедура ДвиженияПоСписаннымТоварам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок)

	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.

	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.
    ТаблицаБезНаклеек = ТаблицаПоТоварам.скопировать();
	сч = ТаблицаБезНаклеек.Количество()-1;
	Пока сч>=0 Цикл
		Если ТаблицаБезНаклеек[сч].Номенклатура.видТовара = Перечисления.ВидыТоваров.КрышкиНаклейки Тогда
			ТаблицаБезНаклеек.Удалить(сч);
		конецЕсли;	
		сч=сч-1;
	конецЦикла;
	
	ЗагрузитьВТаблицуЗначений(ТаблицаБезНаклеек, ТаблицаДвижений);

	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд + 1;
		Строка.НомерСтрокиДокумента = Инд;
	КонецЦикла;

	// Если ПУ по складам
	Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
	//Плотников
	Если Склад <> Справочники.Склады.НайтиПоНаименованию("1") Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");
	//Иначе
	//	Для Каждого стр из ТаблицаДвижений Цикл
	//		стр.склад = стр.СкладОтгрузки;
	//	КонецЦикла;
	КонецЕсли;
	//++++++++

	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.СписаниеПоИнвентаризации,"КодОперацииПартииТоваров");
	ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");

	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);

	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;

	// ТАРА ПО РЕГИСТРУ СписанныеТовары.

	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.
	ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

	// Недостающие поля.
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд + 1;
		Строка.НомерСтрокиДокумента = Инд;
	КонецЦикла;

	// Если ПУ по складам
	Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
	//Плотников
	Если Склад <> Справочники.Склады.НайтиПоНаименованию("1") Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");
	//Иначе
	//	Для Каждого стр из ТаблицаДвижений Цикл
	//		стр.склад = стр.СкладОтгрузки;
	//	КонецЦикла;
	КонецЕсли;
	КонецЕсли;
	//++++++++


	ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.СписаниеПоИнвентаризации, "КодОперацииПартииТоваров");
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");

	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента,  ТаблицаПоТоварам);

	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете, "ОтражатьВУправленческомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,    "ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,   "ДопустимыйСтатус2");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение, "Подразделение");

КонецПроцедуры

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете, "ОтражатьВУправленческомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение, "Подразделение");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ИнвентаризацияТоваровНаСкладе = Основание;

		ЗаполнитьТоварыПоИнвентаризацииТоваровУпр(Основание);

		ЗаполнитьТоварыАХПоИнвентаризацииТоваровУпр(Основание); //+++ по Товарам Адр.Хранения, Отклонение < 0
		
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	яштДокументОбъектПередЗаписью(ЭтотОбъект, Отказ);
	
	// Проверка заполнения единицы измерения мест и количества мест
	ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = Товары.Итог("Сумма");

	ЗаполнитьКачествоПоУмолчанию(Товары);

	//БАЛАНС (04.12.2007)                       
	//
	ЗарегистрироватьОбъект(ЭтотОбъект,Отказ,мПроведениеИзФормы);
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 

	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = СформироватьДеревоПолейЗапросаПоШапке();
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"       , "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"       , "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика" , "ВестиПартионныйУчетПоСкладам"      , "ВестиПартионныйУчетПоСкладам");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад",            "ВидСклада",                      "ВидСклада");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("НомерСтроки"               , "НомерСтроки");
	СтруктураПолей.Вставить("Качество"                  , "Качество");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ЗаказПартии"               , "ДокументРезерва");
	СтруктураПолей.Вставить("ДокументРезерва"           , "ДокументРезерва");
	//  Плотников
	СтруктураПолей.Вставить("Склад"             , "Склад");
	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	РезультатЗапросаПоТоварам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
    яштАдресноеХранение.ПроверитьЗаполнениеТабЧастиТоварыАдресноеХранение(ЭтотОбъект.Ссылка,Отказ);
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "ВозвратнаяТара".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("НомерСтроки"               , "НомерСтроки");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");

	РезультатЗапросаПоТаре = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "ВозвратнаяТара".
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);

//+++++++++++++++++++ движение по регистру ТаблицаПоТоварамАдресноеХранение +++++++++++++++++++++++++++++++++++

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);//+++ ТаблицаПоТоварамАХ
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	// Удаление записей регистрации из всех последовательностей
	Для Каждого НаборЗаписейРегистрацииВПоследовательности Из ПринадлежностьПоследовательностям Цикл
		НаборЗаписейРегистрацииВПоследовательности.Очистить();
	КонецЦикла;
	
КонецПроцедуры




мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

//БАЛАНС (04.12.2007)                       
//
мПроведениеИзФормы = Ложь;