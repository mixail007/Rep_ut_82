// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит текущее значение учетной политики, организация является плательщиком ЕНВД
Перем мОрганизацияЯвляетсяПлательщикомЕНВД;

// Хранит текущее значение организации для контроля учетной политики, организация является плательщиком ЕНВД
Перем мТекущаяОрганизация;

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов;

// Устанавливается в значение "Истина", если пользователю можно менять цену
// в документе
Перем мМожноМенятьЦенуВДокументе;

Перем мКолонкиТовары, мКолонкиВозвратнаяТара;

Перем мСуммаДокументаБезСкидок Экспорт;
Перем мРассчитыватьАвтоматическиеСкидки Экспорт;
Перем мМинимальныеЦены Экспорт;
Перем мСписокФильтров Экспорт;

Перем мПечатнаяФормаПоУмолчанию;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает доступность реквизита формы с курсом взаиморасчетов
//
// Параметры:
//  ОбъектДокумента - Документ, экземляр документа, из которго берутся данные
//  ЭлементФормы - элемент формы, доступностью которого управляют.
//
Процедура УстановитьДоступностьКурсаВзаиморасчетов()

	Если ЗначениеНеЗаполнено(ЗаказПокупателя) Тогда
		ЭлементыФормы.КурсВзаиморасчетов.ТолькоПросмотр = Ложь;
		Возврат;
	КонецЕсли;

	ЭлементыФормы.КурсВзаиморасчетов.ТолькоПросмотр = Ложь;

КонецПроцедуры // УстановитьДоступностьКурсаВзаиморасчетов()

// Заполняет текст про контрагента в форме документа.
//   Вызывается из обработчика ПриОткрытии этой формы и из обработчика ПослеЗаписи
// формы счета-фактуры.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТекстПроКонтрагента()

	Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") тогда
		Если ЗначениеНеЗаполнено(ЗаказПокупателя.Контрагент) Тогда
			ЭлементыФормы.ГиперссылкаКонтрагента.Заголовок = "Не выбран контрагент в заказе";
		Иначе
			ЭлементыФормы.ГиперссылкаКонтрагента.Заголовок = Строка(ЗаказПокупателя.Контрагент);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТекстПроКонтрагента()

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)

	СписокЗапросов      = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Если ТабличнаяЧасть = Товары Тогда
		СписокЗапросов.Добавить("РасходЦеныНоменклатуры", "По ценам номенклатуры");
	КонецЕсли;

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	Если ЗначениеНеЗаполнено(ЗаказПокупателя) Тогда
		Предупреждение("Не выбран заказ покупателя!");
		Возврат;
	ИначеЕсли ЗначениеНеЗаполнено(ЗаказПокупателя.ДоговорКонтрагента) Тогда
		Предупреждение("Не выбран договор контрагента в заказе покупателя!");
		Возврат;
	ИначеЕсли ЗначениеНеЗаполнено(ЗаказПокупателя.ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
		Предупреждение("Не выбрана валюта взаиморасчетов по договору в заказе покупателя!");
		Возврат;
	КонецЕсли;

	// Параметры запросов.
	ЕстьСерия = Ложь;
	ЕстьЦена  = мМожноМенятьЦенуВДокументе;
	Валюта    = ЗаказПокупателя.ДоговорКонтрагента.ВалютаВзаиморасчетов;

	Если ТабличнаяЧасть = Товары Тогда
		Команда           = "ПодборВТабличнуюЧастьТовары";
		Валюта            = ЗаказПокупателя.ВалютаДокумента;
		ИмяТабличнойЧасти = "Товары";
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		Команда           = "ПодборВТабличнуюЧастьУслуги";
		Валюта            = ЗаказПокупателя.ВалютаДокумента;
		ИмяТабличнойЧасти = "Услуги";
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
		Команда           = "ПодборВТабличнуюЧастьВозвратнаяТара";
		ИмяТабличнойЧасти = "Тара";
	КонецЕсли;

	СкладДляЗапроса       = ЗаказПокупателя.Склад;
	КонтрагентДляЗапроса  = ЗаказПокупателя.Контрагент;
	ДоговорДляЗапроса     = ЗаказПокупателя.ДоговорКонтрагента;
	ОрганизацияДляЗапроса = ЗаказПокупателя.Организация;
	СписокВидовПодбора    = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	ПредставлениеДок      = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"       , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"              , СкладДляЗапроса);
	СтруктураПараметровПодбора.Вставить("ТипЦен"             , ТипЦен);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента" , ДоговорДляЗапроса);
	СтруктураПараметровПодбора.Вставить("Контрагент"         , КонтрагентДляЗапроса);
	СтруктураПараметровПодбора.Вставить("Организация"        , ОрганизацияДляЗапроса);
	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен", Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"           , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"          , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"    , Валюта);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);

	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("КоличествоМест"  , КоличествоМест);
	ЗначениеВыбора.Свойство("Цена"            , Цена);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);

	Если (ТабличнаяЧасть = Товары ИЛИ ТабличнаяЧасть = ВозвратнаяТара)
	   И Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	ИначеЕсли ТабличнаяЧасть = Услуги И Не Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте товары не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	СтруктураОтбора.Вставить("Номенклатура", Номенклатура);

	Если ТабличнаяЧасть = Товары Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	КонецЕсли;

	СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;

		Если ТабличнаяЧасть = Товары ИЛИ ТабличнаяЧасть = Услуги Тогда

			Если ТабличнаяЧасть = Услуги Тогда
				СтрокаТабличнойЧасти.Количество = Количество;

				// Заполняем реквизиты табличной части.
				Если ПроверитьУслугаОблагаетсяЕНВД(СтрокаТабличнойЧасти.Номенклатура, мТекущаяОрганизация, Дата,
					                               мОрганизацияЯвляетсяПлательщикомЕНВД) Тогда
					СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
				Иначе
					ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				КонецЕсли;
			Иначе
				СтрокаТабличнойЧасти.Количество       = Количество;
				СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
				СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
				СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;

				// Заполняем реквизиты табличной части.
				ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;


			// Пересчитаем цену в валюту документа.
			КурсДокумента      = ?(ЗаказПокупателя.ВалютаДокумента = мВалютаРегламентированногоУчета, 1, КурсВзаиморасчетов);
			КратностьДокумента = ?(ЗаказПокупателя.ВалютаДокумента = мВалютаРегламентированногоУчета, 1, КратностьВзаиморасчетов);
			Цена = ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ЗаказПокупателя.ВалютаДокумента, КурсДокумента, КратностьДокумента, Дата);

			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(
				Цена,
				СпособЗаполненияЦен,
				ТипЦен.ЦенаВключаетНДС,
				УчитыватьНДС,
				СуммаВключаетНДС,
				ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			Если ТабличнаяЧасть = Услуги Тогда

				РассчитатьСуммуТабЧасти   (СтрокаТабличнойЧасти, ЭтотОбъект);
				РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			Иначе

				РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				
				// Рассчитываем плановую себестоимость.
				РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);

				// Итоговая информация об отклонение от плановой себестоимости
				СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);
				
			КонецЕсли;

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			// Пересчитаем цену в валюту документа.
			Цена = ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены,
			                ЗаказПокупателя.ДоговорКонтрагента.ВалютаВзаиморасчетов, КурсВзаиморасчетов,
							КратностьВзаиморасчетов, Дата);

			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения.
			// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС
			// ставки берутся из номенклатуры.
			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                     СпособЗаполненияЦен,
			                                     ТипЦен.ЦенаВключаетНДС,
			                                     УчитыватьНДС,
			                                     Истина,
			                                     ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС));

			// Рассчитать реквизиты табличной части.
			РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
	КонецЕсли; // СтрокаТабличнойЧасти <> Неопределено

	ТабличнаяЧастьИмя = ?( ТабличнаяЧасть = Товары,    "Товары",
	                    ?( ТабличнаяЧасть = Услуги,    "Услуги", "ВозвратнаяТара"));
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока  = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Заполняет переданную табличную часть по остаткам
//
// Параметры:
//  ТабличнаяЧасть - табличная часть документа.
//
Процедура ЗаполнитьТабличнуюЧастьПоОстаткам(ТабличнаяЧасть)

	ЗаполнятьТабличнуюЧасть = Ложь;
	Если ЗначениеНеЗаполнено(ЗаказПокупателя) Тогда
		ТекстПредупреждения = "Не выбран заказ покупателя. Заполнение невозможно.";
	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, , Метаданные().Представление());
		Возврат;
	КонецЕсли;

	Если ТабличнаяЧасть.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		ТабличнаяЧасть.Очистить();
	КонецЕсли;

	Если ТабличнаяЧасть = Товары Тогда
		ЗаполнитьТоварыПоОстаткам();
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		ЗаполнитьУслугиПоОстаткам();
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
		ЗаполнитьТаруПоОстаткам();
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоОстаткам()

// Заполняет переданную табличную часть копированием соответствующей заказа покупателя
//
// Параметры:
//  ТабличнаяЧасть - табличная часть документа.
//
Процедура СкопироватьСостав(ТабличнаяЧасть)

	КопироватьТабличнуюЧасть = Ложь;
	Если ЗначениеНеЗаполнено(ЗаказПокупателя) Тогда
		ТекстПредупреждения = "Не выбран заказ покупателя. Заполнение невозможно.";
	Иначе
		КопироватьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не КопироватьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, , Метаданные().Представление());
		Возврат;
	КонецЕсли;

	Если ТабличнаяЧасть.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		ТабличнаяЧасть.Очистить();
	КонецЕсли;

	Если ТабличнаяЧасть = Товары Тогда
		СкопироватьТовары();
		
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		СкопироватьУслуги();
		
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
		СкопироватьВозвратнуюТару();
		
	КонецЕсли;
	
КонецПроцедуры // СкопироватьСостав()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	ВалютаЗаказа = ?(ЗначениеНеЗаполнено(ЗаказПокупателя.ВалютаДокумента), Неопределено, ЗаказПокупателя.ВалютаДокумента);

	// Заполняем реквизиты табличной части.
	ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета, ВалютаЗаказа);
	Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

// Производит заполнение и установку необходимых полей при изменении характеристики товара в табличной части.
//
Процедура ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти)

	ВалютаЗаказа = ?(ЗначениеНеЗаполнено(ЗаказПокупателя.ВалютаДокумента), Неопределено, ЗаказПокупателя.ВалютаДокумента);

	// Заполняем реквизиты табличной части.
	ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета, ВалютаЗаказа);

КонецПроцедуры // ПриИзмененииХарактеристикиНоменклатурыТоваров()

// Обновляет текущее значение учетной политики розничная торговля облагается ЕНВД.
//
Процедура ПриИзмененииОблагаетсяЕНВД(РежимВызова = "")

	Если ЗначениеНеЗаполнено(РежимВызова) Тогда
		мОрганизацияЯвляетсяПлательщикомЕНВД = УчетнаяПолитикаНалоговыйУчет("ОрганизацияЯвляетсяПлательщикомЕНВД", ЗаказПокупателя.Организация, Дата);
		мТекущаяОрганизация                  = ЗаказПокупателя.Организация;
	Иначе
		ПриИзмененииОрганизацияЯвляетсяПлательщикомЕНВД(ЭтотОбъект, РежимВызова, Услуги,
		                                                мОрганизацияЯвляетсяПлательщикомЕНВД, мТекущаяОрганизация);
	КонецЕсли;

КонецПроцедуры // ПриИзмененииОблагаетсяЕНВД()

//Проверяет необходимость рассчета автоматических скидок
//
Функция РассчитыватьАвтоматическиеСкидки()

	Если НЕ мРассчитыватьАвтоматическиеСкидки Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура - обработчик события "Нажатие" надписи о контрагенте.
//   Процедура открывает форму элемента справочника "Контрагенты"
// для реквизита Контрагент документа заказа.
//
Процедура ГиперссылкаКонтрагетНажатие(Элемент)

	Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Если НЕ ЗначениеНеЗаполнено(ЗаказПокупателя.Контрагент) Тогда
			ЗаказПокупателя.Контрагент.ПолучитьФорму( , ЭтаФорма, ).Открыть();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ГиперссылкаКонтрагетНажатие()

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()


	Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ВидимостьЭлементов = Истина;
	Иначе
		ВидимостьЭлементов = Ложь;
	КонецЕсли;

	// Колонки налога показываем только тогда, когда его учитываем.
	Если (УчитыватьНДС И ВидимостьЭлементов) <> мКолонкиТовары.СтавкаНДС.Видимость Тогда
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СтавкаНДС, УчитыватьНДС И ВидимостьЭлементов);
	КонецЕсли;

	Если (УчитыватьНДС И ВидимостьЭлементов) <> мКолонкиТовары.СуммаНДС.Видимость Тогда
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СуммаНДС, УчитыватьНДС И ВидимостьЭлементов);
	КонецЕсли;

	УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.Сумма, ВидимостьЭлементов);
	УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.Всего, ВидимостьЭлементов);
	УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.ПроцентСкидкиНаценки, ВидимостьЭлементов);

	УстановитьВидимостьКолонкиТабЧасти(мКолонкиВозвратнаяТара.Цена,  ВидимостьЭлементов);
	УстановитьВидимостьКолонкиТабЧасти(мКолонкиВозвратнаяТара.Сумма, ВидимостьЭлементов);
	
	// Колонки плановой себестоимости показываем только тогда, когда с ней работаем.
	УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.ПлановаяСебестоимость,                         ИспользоватьПлановуюСебестоимость);
	УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СуммаПлановойСебестоимости,                    ИспользоватьПлановуюСебестоимость);
	УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СуммаОтклоненияОтСуммыПлановойСебестоимости,   ИспользоватьПлановуюСебестоимость);
	УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.ПроцентОтклоненияОтСуммыПлановойСебестоимости, ИспользоватьПлановуюСебестоимость);
	ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости.Видимость = ИспользоватьПлановуюСебестоимость;

	ЭлементыФормы.НадписьВсегоНДС.Видимость                       = ВидимостьЭлементов;
	ЭлементыФормы.НадписьВсего.Видимость                          = ВидимостьЭлементов;
	ЭлементыФормы.ВсегоНДС.Видимость                              = ВидимостьЭлементов;
	ЭлементыФормы.Всего.Видимость                                 = ВидимостьЭлементов;
	ЭлементыФормы.ОсновнаяПанель.Страницы.Дополнительно.Видимость = ВидимостьЭлементов;
	ЭлементыФормы.НадписьКонтрагент.Видимость                     = ВидимостьЭлементов;
	ЭлементыФормы.ГиперСсылкаКонтрагента.Видимость                = ВидимостьЭлементов;

	ЭлементыФормы.СтруктурнаяЕдиница.Видимость                    = ВидимостьЭлементов;
	ЭлементыФормы.НадписьСтруктурнаяЕдиница.Видимость             = ВидимостьЭлементов;
	
	// Услуги на комиссию не отдаем.
	ВидимостьЗакладкиУслуг = ЗаказПокупателя.ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = ВидимостьЗакладкиУслуг;

КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает автоотметку незаполненного для тех колонок в табличной части 
// "Товары", обязательность заполнения которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьАвтоотметку()

КонецПроцедуры // УстановитьАвтоотментку()

// Процедура устанавливает заголовки по выбранному договору для:
// - колонок табличной части "Возвратная тара";
// - элементов формы НадписьСделки, НадписьСуммаВзаиморасчетов.
//
// Параметры:
//  Нет.
//
Процедура УстановитьЗаголовкиПоДоговору()

	// Установить заголовки колонок ТЧ "Возвратная тара".
	Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") тогда

		Если ЗначениеНеЗаполнено(ЗаказПокупателя) Тогда
			ЭлементыФормы.ИнфНадписьКурса.Заголовок = "Заказ не выбран. Информация о взаиморасчетах отсутствует.";
		Иначе
			ЭлементыФормы.ИнфНадписьКурса.Заголовок = ПолучитьИнформациюКурсаВалютыСтрокой(ЗаказПокупателя.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
			                                                                                 КурсВзаиморасчетов,
			                                                                                 КратностьВзаиморасчетов,
			                                                                                 мВалютаРегламентированногоУчета,
			                                                                                 Истина);
		КонецЕсли;

		ЭлементыФормы.ВозвратнаяТара.Колонки.Цена.ТекстШапки = "Цена" + ?(ЗначениеНеЗаполнено(
	                                                           ЗаказПокупателя.ДоговорКонтрагента.ВалютаВзаиморасчетов), "", ", " +
	                                                           ЗаказПокупателя.ДоговорКонтрагента.ВалютаВзаиморасчетов);
		ЭлементыФормы.ВозвратнаяТара.Колонки.Сумма.ТекстШапки = "Сумма" + ?(ЗначениеНеЗаполнено(
	                                                           ЗаказПокупателя.ДоговорКонтрагента.ВалютаВзаиморасчетов), "", ", " +
	                                                           ЗаказПокупателя.ДоговорКонтрагента.ВалютаВзаиморасчетов);
    Иначе
		ЭлементыФормы.ИнфНадписьКурса.Заголовок = "";
		ЭлементыФормы.ВозвратнаяТара.Колонки.Цена.ТекстШапки = "Цена";
		ЭлементыФормы.ВозвратнаяТара.Колонки.Сумма.ТекстШапки = "Сумма";

	КонецЕсли;

КонецПроцедуры // УстановитьЗаголовкиПоДоговору()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = ФорматСумм(ПолучитьСуммуДокументаСНДС(ЭтотОбъект));
	ЭлементыФормы.ВсегоНДС.Значение = ФорматСумм(ПолучитьНДСДокумента(ЭтотОбъект));

	ВременнаяСтрока = "";

	Если (НЕ ЗначениеНеЗаполнено(ДокументОбъект.ЗаказПокупателя.ВалютаДокумента))
	   И (ДокументОбъект.ЗаказПокупателя.ВалютаДокумента <> мВалютаРегламентированногоУчетаОрганизаций) Тогда

		КурсДокумента      = ?(ЗаказПокупателя.ВалютаДокумента = мВалютаРегламентированногоУчета, 1, КурсВзаиморасчетов);
		КратностьДокумента = ?(ЗаказПокупателя.ВалютаДокумента = мВалютаРегламентированногоУчета, 1, КратностьВзаиморасчетов);
		
		ВременнаяСтрока = ВременнаяСтрока + КратностьДокумента	+ " " 
		                +  ДокументОбъект.ЗаказПокупателя.ВалютаДокумента
		                + " = " + КурсДокумента
		                + мВалютаРегламентированногоУчетаОрганизаций + ", ";

	КонецЕсли;

	Если НЕ ЗначениеНеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
	Иначе
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если ЗначениеНеЗаполнено(ДокументОбъект.ЗаказПокупателя.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ЗаказПокупателя.ВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

// Процедура обновляет информацию в форме по выбранному заказу
//
// Параметры:
//  Нет.
//
Процедура ОбновитьИнформациюПоЗаказу()

	ЗаполнитьТекстПроКонтрагента();

	УстановитьЗаголовокФормы();

	//Если ЗаказПокупателя <> Неопределено Тогда
	//	ЭлементыФормы.НадписьЗначениеПодразделения.Заголовок = ЗаказПокупателя.Подразделение;
	//Иначе
	//	ЭлементыФормы.НадписьЗначениеПодразделения.Заголовок = "";
	//КонецЕсли;

	Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		мТекущаяВалютаВзаиморасчетов = ЗаказПокупателя.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		Организация                  = ЗаказПокупателя.Организация;
		ВалютаДокумента              = ЗаказПокупателя.ВалютаДокумента;

		// Итоговая информация об отклонение от плановой себестоимости
		СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

	Иначе
		мТекущаяВалютаВзаиморасчетов = Неопределено;
		Организация                  = Неопределено;
		ВалютаДокумента              = мВалютаРегламентированногоУчета;
	КонецЕсли;

КонецПроцедуры // ОбновитьИнформациюПоЗаказу()

// Процедура формирует заголовок формы в зависимости от вида корректируемого
// заказа
//
Процедура УстановитьЗаголовокФормы()

	Заголовок = ЭтотОбъект.Метаданные().Синоним;
	
	УстановитьЗаголовокФормыДокумента(Заголовок, ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Отказ = Истина;
	
	СообщитьОбОшибке("С 16 октября 2013 пользоваться корректировкой нельзя."+Символы.ВК+ "Для отмены заказа воспользуйтесь кнопкой 'Закрыть заказ' в заказе покупателя.");
	Возврат;
	Если не  ЗначениеНеЗаполнено(ЗаказПокупателя.ДоговорКонтрагента) И ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо=глТекущийПользователь
		ИЛИ РольДоступна("ПолныеПрава") ИЛИ НЕ ЗначениеНеЗаполнено(ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"РазрешитьРедактироватьЗаказыПокупателя")) Тогда // ок
		
	Иначе   
		Отказ=Истина;
		Предупреждение ("Вы не имеете права корректировать чужие заказы!");
		Возврат;
	КонецЕсли;	
	
	
	//Видимость автоматических скидок.
	ИспользованиеСкидок = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(ДокументОбъект.Дата);
	Если ИспользованиеСкидок.ИспользоватьСкидкиПоКоличествуТовара
	 Или ИспользованиеСкидок.ИспользоватьСкидкиПоСуммеДокумента
	 Или ИспользованиеСкидок.ИспользоватьСкидкиПоВидуОплаты
	 Или ИспользованиеСкидок.ИспользоватьСкидкиПоДисконтнойКарте
	 Или ИспользованиеСкидок.ИспользоватьСкидкиПоВыбраннойДисконтнойКартойСумме Тогда
		мРассчитыватьАвтоматическиеСкидки = Истина;
	Иначе
		мРассчитыватьАвтоматическиеСкидки = Ложь;
	КонецЕсли;

	ЭлементыФормы.Товары.Колонки.ПроцентАвтоматическихСкидок.Видимость = мРассчитыватьАвтоматическиеСкидки;
	Если Не мРассчитыватьАвтоматическиеСкидки Тогда
		КоличествоКнопок = ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Количество();
		Для сч = 0 По КоличествоКнопок-1 Цикл
			Если ЭлементыФормы.КоманднаяПанельТовары.Кнопки[сч].Имя = "ПересчитатьСкидки" Тогда
				ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Удалить(сч);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета, "Продажа");

		УстановитьНомерДокумента(ЭтотОбъект);

		Если типЗнч(ЗаказПокупателя)=Тип("ДокументСсылка.ЗаказПокупателя") тогда
		Предупреждение("Для полного закрытия Заказа покупателя
					   | используйте кнопку [x Закрыть заказ]
					   |из самого документа ""Заказ покупателя"".",30);
		КонецЕсли;
				   
	КонецЕсли;

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Цена");
	СтруктураКолонок.Вставить("Сумма");

	// Установить ограничение - изменять видимоть колонок для таличной части 
	// "Возвратная тара".
	УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ВозвратнаяТара.Колонки, СтруктураКолонок);

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("СтавкаНДС");
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("ПлановаяСебестоимость");
	СтруктураКолонок.Вставить("СуммаПлановойСебестоимости");
	СтруктураКолонок.Вставить("СуммаОтклоненияОтСуммыПлановойСебестоимости");
	СтруктураКолонок.Вставить("ПроцентОтклоненияОтСуммыПлановойСебестоимости");
	СтруктураКолонок.Вставить("ЕдиницаИзмерения");

	УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Товары.Колонки, СтруктураКолонок);

	// Заполнить подменю выбора печатных форм.
	СписокМакетов = ЭтотОбъект.ПолучитьСписокПечатныхФорм();
	УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати,
	                                       СписокМакетов,
	                                       Новый Действие("ДействияФормыДействиеВыбратьПечатнуюФормы"));

	// Установить печатную форму по умолчанию.
	УстановитьКнопкуПечати(ЭтотОбъект.Метаданные().Имя, ЭтаФорма, СписокМакетов, мПечатнаяФормаПоУмолчанию);

	УстановитьЗаголовкиПоДоговору();

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормы();

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	ПриИзмененииОблагаетсяЕНВД();

	// Установить видимость колонок "ХарактеристикаНоменклатуры"
	УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	// Установить автоотметку незаполненного
	УстановитьАвтоотметку();
	
	УстановитьДоступностьКурсаВзаиморасчетов();

	ОбновитьИнформациюПоЗаказу();

	// установим доступность колонки "Цена" для редактирования
	мМожноМенятьЦенуВДокументе = РазрешитьРедактированиеЦенВДокументах();

	ЭлементыФормы.Товары.Колонки.Цена.ЭлементУправления.ТолькоПросмотр                 = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.Товары.Колонки.Сумма.ЭлементУправления.ТолькоПросмотр                = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.Товары.Колонки.ПроцентСкидкиНаценки.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.Товары.Колонки.СуммаНДС.ЭлементУправления.ТолькоПросмотр             = НЕ мМожноМенятьЦенуВДокументе;

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	// Итоговая информация об отклонение от плановой себестоимости
	СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

	мМинимальныеЦены = Новый ТаблицаЗначений;
	мМинимальныеЦены.Колонки.Добавить("Номенклатура");
	мМинимальныеЦены.Колонки.Добавить("ХарактеристикаНоменклатуры");
	мМинимальныеЦены.Колонки.Добавить("Цена");

	мСписокФильтров = ПолучитьЗначениеПраваПользователя(
					ПланыВидовХарактеристик.ПраваПользователей.НеОтпускатьТоварСЦенойНижеОпределенногоТипа,
					Неопределено);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Пересчитаем сумму взаиморасчетов.
	Если КурсВзаиморасчетов = 0 Тогда
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = 0;
	Иначе
		Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") тогда
			КурсДокумента      = ?(ЗаказПокупателя.ВалютаДокумента = мВалютаРегламентированногоУчета, 1, КурсВзаиморасчетов);
			КратностьДокумента = ?(ЗаказПокупателя.ВалютаДокумента = мВалютаРегламентированногоУчета, 1, КратностьВзаиморасчетов);
			ЭлементыФормы.СуммаВзаиморасчетов.Значение = ФорматСумм(ПересчитатьИзВалютыВВалюту(ПолучитьСуммуДокументаСНДС(ЭтотОбъект),  
						ЗаказПокупателя.ВалютаДокумента, мТекущаяВалютаВзаиморасчетов,
						КурсДокумента, КурсВзаиморасчетов,
						КратностьДокумента, КратностьВзаиморасчетов));
		КонецЕсли;
	КонецЕсли;

	ОбновитьПодвал();
	УстановитьВидимость();
	УстановитьЗаголовкиПоДоговору();

	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если СтраницаПанели.Имя = "Тара" Тогда
			СтраницаПанели.Заголовок = "Тара (" + ДокументОбъект.ВозвратнаяТара.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "Товары" Тогда
			СтраницаПанели.Заголовок = "Товары (" + ДокументОбъект.Товары.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "Услуги" Тогда
			СтраницаПанели.Заголовок = "Услуги (" + ДокументОбъект.Услуги.Количество() + " поз.)";
		КонецЕсли;

	КонецЦикла;

	// Надпись НадписьСуммаВзаиморасчетов

	Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") тогда
		Если ЗначениеНеЗаполнено(мТекущаяВалютаВзаиморасчетов) Тогда
			ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма <нет валюты>:";
		Иначе	
			ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма " + СокрЛП(мТекущаяВалютаВзаиморасчетов) + ":";
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьУслуги" Тогда
			ОбработкаПодбора(Услуги, ЗначениеВыбора);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
			ОбработкаПодбора(ВозвратнаяТара, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПередЗаписью(Отказ)

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормы();
	яштСменаПользователя(ЭтотОбъект, ЭтаФорма, глТекущийПользователь);

//Если Контрагент.ПриниматьЗаказыЧерезСайт тогда  //+++ 20.05.2013
//	ЗаказПокупателяОбъект = ЭтотОбъект.ЗаказПокупателя.ПолучитьОбъект(); // ЗаказПокупателяОбъект из сделки
//  ОбменСУТИнтернетМагазин.ВключитьРегистрациюОбъектаОИМ(ЗаказПокупателяОбъект);
  
// 01.11.2016
ОбменСУТИнтернетМагазин.ВключитьРегистрациюОбъектаОИМ( ЭтотОбъект.ЗаказПокупателя, Контрагент.ПриниматьЗаказыЧерезСайт ); 

//	попытка
//		ЗаказПокупателяОбъект.Записать(); // перезапишем заказ
//	исключение
//	КонецПопытки;
//КонецЕсли;

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормы();

КонецПроцедуры // ПослеЗаписи()

// Обработчик внешнего события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	Если глТорговоеОборудование <> Неопределено Тогда
		Если Событие = "BarCodeValue" Тогда

			Если ЗначениеНеЗаполнено(ЗаказПокупателя) Тогда
				Предупреждение("Не выбран заказ покупателя!");
				Возврат;
			КонецЕсли;

			Если ЗначениеНеЗаполнено(ЗаказПокупателя.ДоговорКонтрагента) Тогда
				Предупреждение("Не выбран договор контрагента в заказе покупателя!");
				Возврат;
			ИначеЕсли ЗначениеНеЗаполнено(ЗаказПокупателя.ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
				Предупреждение("Не выбрана валюта взаиморасчетов по договору в заказе покупателя!");
				Возврат;
			КонецЕсли;
			Валюта = ЗаказПокупателя.ДоговорКонтрагента.ВалютаВзаиморасчетов;

			ИмяТекущейСтраницы = ЭтаФорма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
			Если ИмяТекущейСтраницы = "Товары" Тогда

				Команда         = "ПодборВТабличнуюЧастьТовары";
				ИмяТабличнойЧасти = "Товары";
				Валюта          = ЗаказПокупателя.ВалютаДокумента;

			ИначеЕсли ИмяТекущейСтраницы = Услуги Тогда
				Команда         = "ПодборВТабличнуюЧастьУслуги";
				Валюта          = ЗаказПокупателя.ВалютаДокумента;
				ИмяТабличнойЧасти = "Услуги";

			ИначеЕсли ИмяТекущейСтраницы = "Тара" Тогда

				Команда           = "ПодборВТабличнуюЧастьВозвратнаяТара";
				ИмяТабличнойЧасти = "ВозвратнаяТара";

			Иначе

				// Ничего не надо делать
				Возврат;

			КонецЕсли;

			СтруктураПараметровПодбора = Новый Структура();
			СтруктураПараметровПодбора.Вставить("Команда"            , Команда);

			// Параметры запросов.
			Если ЗначениеНеЗаполнено(ЗаказПокупателя) Тогда
				ДоговорДляЗапроса    = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			Иначе
				ДоговорДляЗапроса    = ЗаказПокупателя.ДоговорКонтрагента;
			КонецЕсли;
			ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
			СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
			СтруктураПараметровПодбора.Вставить("ТипЦен"               , ТипЦен);
			СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента", ДоговорДляЗапроса);
			СтруктураПараметровПодбора.Вставить("Контрагент",         ЗаказПокупателя.Контрагент);
			СтруктураПараметровПодбора.Вставить("Организация",        ЗаказПокупателя.Организация);

			СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен", Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);
			СтруктураПараметровПодбора.Вставить("ВалютаДокумента"    , Валюта);
			СтруктураПараметровПодбора.Вставить("ИмяТабличнойЧасти"    , ИмяТабличнойЧасти);

			глТорговоеОборудование.ОбработатьВнешнееСобытиеОтСканераДляФормы(ЭтаФорма, ЭтотОбъект, СтруктураПараметровПодбора, Данные);

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура КоманднаяПанельТоварыПересчитатьСкидки(Кнопка)

	Если Модифицированность Тогда
		Предупреждение("Для пересчета скидок необходимо записать документ!");
		Возврат;
	КонецЕсли;
	ПересчитатьСкидки();

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	КурсДокумента      = ?(ЗаказПокупателя.ВалютаДокумента = мВалютаРегламентированногоУчета, 1, КурсВзаиморасчетов);
	КратностьДокумента = ?(ЗаказПокупателя.ВалютаДокумента = мВалютаРегламентированногоУчета, 1, КратностьВзаиморасчетов);

	// Заполнить набор реквизитов, которые берутся не из текущего документа
	СтруктураРеквизитовДокумента.Вставить("Контрагент",         ЗаказПокупателя.Контрагент);
	СтруктураРеквизитовДокумента.Вставить("ДоговорКонтрагента", ЗаказПокупателя.ДоговорКонтрагента);
	СтруктураРеквизитовДокумента.Вставить("ВалютаДокумента",    ЗаказПокупателя.ВалютаДокумента);
	СтруктураРеквизитовДокумента.Вставить("КурсДокумента",      КурсДокумента);
	СтруктураРеквизитовДокумента.Вставить("КратностьДокумента", КратностьДокумента);
	СтруктураРеквизитовДокумента.Вставить("ВызовКорректировкаЗаказа");

	// Сохраняем текущие заначения реквизитов документа.
	ТекущиеЗначенияРеквизитов = Новый Структура();
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийТипЦен",             ТипЦен);
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийКурсДокумента",      КурсДокумента);
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийКратностьДокумента", КратностьДокумента);
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийУчитыватьНДС",       УчитыватьНДС);
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийСуммаВключаетНДС",   СуммаВключаетНДС);
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийВалютаДокумента",    ВалютаДокумента);
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийИспользоватьПлановуюСебестоимость", ИспользоватьПлановуюСебестоимость);

	СтруктураТолькоЧтение = Новый Структура;
	СтруктураТолькоЧтение.Вставить("ИспользоватьПлановуюСебестоимость");
	СтруктураТолькоЧтение.Вставить("ВалютаДокумента");
	СтруктураТолькоЧтение.Вставить("КурсДокумента");
	СтруктураТолькоЧтение.Вставить("КурсВзаиморасчетов");

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            СтруктураТолькоЧтение, "Товары");

	Если СтруктураЗначений <> Неопределено Тогда

		ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "Товары", мВалютаРегламентированногоУчета, , СтруктураЗначений);

		Если СтруктураЗначений.ТекущийТипЦен <> СтруктураЗначений.НовыйТипЦен Тогда
			ОбновитьФормуПодбора("ТипЦен");
		КонецЕсли;
	КонецЕсли;

	СтруктураРеквизитовДокумента.Вставить( "ИспользоватьПлановуюСебестоимость", ИспользоватьПлановуюСебестоимость);
	
	// Выполнить стандартные действия при изменении режима использования плановой себестоимости
	ИзмененитьРежимИспользованияПлановойСебестоимости(ЭтотОбъект, ЭтаФорма, мВалютаРегламентированногоУчета, СтруктураРеквизитовДокумента.ИспользоватьПлановуюСебестоимость);

	// Пересчитывает плановую себестоимость с учетом новой валюты и налогов
	ИзменитьВалютуНалогиПлановойСебестоимостиТабЧасти(ЭтотОбъект, ТекущиеЗначенияРеквизитов, мВалютаРегламентированногоУчета);

	// Итоговая информация об отклонение от плановой себестоимости
	СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

	УстановитьВидимость();
	УстановитьДоступностьКурсаВзаиморасчетов();

КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Возвратная тара", вызывает сервисный механизм для заполнения табличной части
//
Процедура КоманднаяПанельВозвратнаяТараДействиеЗаполнить(Кнопка)


КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеЗаполнить()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Возвратная тара", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеПодбор(Кнопка)

	ДействиеПодбор(ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	НапечататьДокументПоУмолчанию(ЭтотОбъект, глТекущийПользователь, мПечатнаяФормаПоУмолчанию);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)


КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
//
Процедура ДействияФормыДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = Кнопка.Текст;
		СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		СписокМакетов = ПолучитьСписокПечатныхФорм();
		СтрокаМакетаВСписке = СписокМакетов.НайтиПоЗначению(Кнопка.Имя);
		Если СтрокаМакетаВСписке <> Неопределено Тогда
			Печать(СтрокаМакетаВСписке.Значение);
			СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
			СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;			
			
		Иначе
			СсылкаВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Кнопка.Имя, "_", "-")));
			Печать(СсылкаВнешнейФормы);
			СтруктураМакета.Макет = СсылкаВнешнейФормы;
			СтруктураМакета.ПредставлениеМакета = Кнопка.Текст;
		КонецЕсли;		
		
		мПечатнаяФормаПоУмолчанию = СтруктураМакета.Макет;
		СохранитьТекущуюКнопкуПечати(ЭтотОбъект.Метаданные().Имя, СтруктураМакета);
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при выборе пункта меню "Заполнить по остаткам" подменю 
// "Заполнить" командной панели Товары.
//
Процедура КоманднаяПанельТоварыЗаполнитьПоОстаткам(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоОстаткам(Товары);
	
КонецПроцедуры // КоманднаяПанельТоварыЗаполнитьПоОстаткам()

// Процедура вызывается при выборе пункта меню "Скопировать состав" подменю 
// "Заполнить" командной панели Товары.
//
Процедура КоманднаяПанельТоварыСкопироватьСостав(Кнопка)
	
	СкопироватьСостав(Товары);
	
КонецПроцедуры // КоманднаяПанельТоварыСкопироватьСостав()

// Процедура вызывается при выборе пункта меню "Заполнить по остаткам" подменю 
// "Заполнить" командной панели возвратной тары.
//
Процедура КоманднаяПанельВозвратнаяТараЗаполнитьПоОстаткам(Кнопка)
	ЗаполнитьТабличнуюЧастьПоОстаткам(ВозвратнаяТара);
КонецПроцедуры

// Процедура вызывается при выборе пункта меню "Скопировать состав" подменю 
// "Заполнить" командной панели возвратной тары.
//
Процедура КоманднаяПанельВозвратнаяТараСкопироватьСостав(Кнопка)
	СкопироватьСостав(ВозвратнаяТара);
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

Процедура КоманднаяПанельУслугиЗаполнитьПоОстаткам(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоОстаткам(Услуги);
	
КонецПроцедуры // КоманднаяПанельУслугиЗаполнитьПоОстаткам()

Процедура КоманднаяПанельУслугиСкопироватьСостав(Кнопка)
	
	СкопироватьСостав(Услуги);
	
КонецПроцедуры // КоманднаяПанельУслугиСкопироватьСостав()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Услуги", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Услуги".
//
Процедура КоманднаяПанельУслугиДействиеПодбор(Кнопка)
	
	ДействиеПодбор(Услуги);
	
КонецПроцедуры // КоманднаяПанельУслугиДействиеПодбор()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	ПриИзмененииОблагаетсяЕНВД("ДатаДокумента");

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВРегламентированномУчетеПриИзменении(Элемент)

	УстановитьНомерДокумента(ЭтотОбъект);

КонецПроцедуры // ОтражатьВРегламентированномУчетеПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "КурсВзаиморасчетов".
//
Процедура КурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Выберать дату курса и заполнить курс взаиморасчетов.
	// Выберем дату курса

	ДатаУстановкиКурса = Дата; //По умолчанию курс всегда на дату документа

	Если ВвестиДату(ДатаУстановкиКурса, "Выберите дату установки курса взаиморасчетов.", ЧастиДаты.Дата) Тогда

		// Если дата введена, заполним значение курса
		СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(ЗаказПокупателя.ДоговорКонтрагента.ВалютаВзаиморасчетов, ДатаУстановкиКурса);
		КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

	КонецЕсли; 

КонецПроцедуры // КурсВзаиморасчетовНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "СтруктурнаяЕдиница".
//
Процедура СтруктурнаяЕдиницаНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если ЗначениеНеЗаполнено(ЗаказПокупателя) Тогда
		Предупреждение("Вначале необходимо выбрать корректируемый заказ!");
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;

	НачалоВыбораЗначенияСтруктурнойЕдиницы(ЗаказПокупателя, ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ЗаказПокупателя".
// Процедура выполняет действия при изменении Заказа покупателя.
//
Процедура ЗаказПокупателяПриИзменении(Элемент)

	Если ЗаказПокупателя.КурсВзаиморасчетов = 0 Тогда
		КурсВзаиморасчетов      = 1;
		КратностьВзаиморасчетов = 1;
	Иначе
		КурсВзаиморасчетов      = ЗаказПокупателя.КурсВзаиморасчетов; 
		КратностьВзаиморасчетов = ЗаказПокупателя.КратностьВзаиморасчетов; 
	КонецЕсли;
	
	СтруктурнаяЕдиница = ЗаказПокупателя.СтруктурнаяЕдиница;
	
	УчитыватьНДС                      = ЗаказПокупателя.УчитыватьНДС;
	СуммаВключаетНДС                  = ЗаказПокупателя.СуммаВключаетНДС;
	ИспользоватьПлановуюСебестоимость = ЗаказПокупателя.ИспользоватьПлановуюСебестоимость;

	УстановитьДоступностьКурсаВзаиморасчетов();

	ПриИзмененииОблагаетсяЕНВД("Организация");

	ОбновитьИнформациюПоЗаказу();
	УстановитьВидимость();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" элемента формы АдресДоставки
//
Процедура ДисконтнаяКартаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка    = Ложь;
	ФормаВыбора             = Справочники.ИнформационныеКарты.ПолучитьФормуВыбора();
	ФормаВыбора.РежимВыбора = Истина;

	ФормаВыбора.СправочникСписок.Отбор.ТипКарты.Значение      = Перечисления.ТипыИнформационныхКарт.Дисконтная;
	ФормаВыбора.СправочникСписок.Отбор.ТипКарты.Использование = Истина;

	ФормаВыбора.СправочникСписок.Отбор.ТипКарты.ВидСравнения          = ВидСравнения.Равно;

	ДисконтнаяКарта = ФормаВыбора.ОткрытьМодально();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Товары". Формирует данные в колонке "Всего".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Ячейки = ОформлениеСтроки.Ячейки;
	Если мКолонкиТовары.Всего.Видимость Тогда
		Ячейки.Всего.УстановитьТекст(ФорматСумм(ДанныеСтроки.Сумма
		                                        + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС)));

	КонецЕсли;

	ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);

	// Рассчитать и показать в колонках информацию о сумме и отклонении от плановой себестоимости
	ЗаполнитьСуммуИОтклонениеОтПлановойСебестоимостиТабЧасти(ОформлениеСтроки, ДанныеСтроки, ЭтотОбъект);

	ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	ПоказатьСуммуБезСкидок(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Цена, ДанныеСтроки.Количество);

КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ПриОкончанииРедактирования" табличной части "Товары".
//
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	// Итоговая информация об отклонение от плановой себестоимости
	СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

КонецПроцедуры // ТоварыПриОкончанииРедактирования()

// Процедура - обработчик события "ПослеУдаления" табличной части "Товары".
//
Процедура ТоварыПослеУдаления(Элемент)

	// Итоговая информация об отклонение от плановой себестоимости
	СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

КонецПроцедуры // ТоварыПослеУдаления()

// Процедура - обработчик события "ПриНачалеВыбора" поля ввода размещения
// в строке табличной части "Товары" и "Возвратная тара"
//
Процедура ТоварыРазмещениеНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораЗначенияРазмещения(ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры // ТоварыРазмещениеНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, Ссылка);
	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

	Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") тогда
		РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

		// Рассчитываем плановую себестоимость.
		РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
	КонецЕсли;

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти);

	Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") тогда
		РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

		// Рассчитываем плановую себестоимость.
		РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
	КонецЕсли;

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Сохраняем текущее значение коэффициента
	СтароеЗначениеКоэффициента = ЭлементыФормы.Товары.ТекущиеДанные.Коэффициент;

	// Выполнить общие действия для всех документов при изменении Единица.
	ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Выполнить действия при изменении Единица.
	ПриИзмененииЕдиницыТабЧастиПлановаяСебестоимость(СтрокаТабличнойЧасти, ЭтотОбъект, СтароеЗначениеКоэффициента);

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") тогда
		// Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	РассчитатьКоличествоТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыКоличествоМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") тогда
	// Рассчитать реквизиты табличной части.
		РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") тогда
		// Выполнить общие действия для всех документов при изменении Суммы.
		ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект, глТекущийПользователь);

		// Рассчитать реквизиты табличной части.
		РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля процента скидки-наценки
// в строке табличной части "Товары".
//
Процедура ТоварыПроцентСкидкиНаценкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА
// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении возвратной тары.
	ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ЗаполнитьЦенуВозвратнойТарыТабЧастиОтпуск(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект, ЗаказПокупателя.ДоговорКонтрагента); 
	КонецЕсли;

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении суммы.
	ПриИзмененииСуммыВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараСуммаПриИзменении()

// Процедура - обработчик события "ПриНачалеВыбора" поля ввода размещения
// в строке табличной части "Возвратная тара"
//
Процедура ВозвратнаяТараРазмещениеНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораЗначенияРазмещения(ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ПоказатьКодАртикул(мКолонкиВозвратнаяТара, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры // ВозвратнаяТараПриВыводеСтроки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ УСЛУГИ

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Услуги".
//
Процедура УслугиНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Заполняем реквизиты табличной части.
	ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	Если ПроверитьУслугаОблагаетсяЕНВД(СтрокаТабличнойЧасти.Номенклатура, Организация, Дата,
		                               мОрганизацияЯвляетсяПлательщикомЕНВД) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	Иначе
		ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // УслугиНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Услуги".
//
Процедура УслугиКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // УслугиКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Услуги".
//
Процедура УслугиЦенаПриИзменении(Элемент)

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // УслугиЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Услуги".
//
Процедура УслугиСуммаПриИзменении(Элемент)

	ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект, глТекущийПользователь);
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры// УслугиСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Услуги".
//
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // УслугиСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы НДС
// в строке табличной части "Услуги".
//
Процедура УслугиСуммаНДСПриИзменении(Элемент)

КонецПроцедуры // УслугиСуммаНДСПриИзменении()

Процедура УслугиПроцентСкидкиНаценкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПеретаскивание()

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "ВозвратнаяТара");
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ВозвратнаяТараПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ВозвратнаяТараПеретаскивание()

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Услуги".
//
Процедура УслугиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Услуги");
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // УслугиПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Услуги".
//
Процедура УслугиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // УслугиПеретаскивание()


Функция ПроверитьОтгрузкуПоЗаказу()
	Запрос=Новый Запрос;
Запрос.Текст="ВЫБРАТЬ	ЕстьNULL(СтоимостьОборот,0) Сумма
|ИЗ	РегистрНакопления.Продажи.Обороты(, , , ЗаказПокупателя = &ЗаказПокупателя) ";
Запрос.УстановитьПараметр("ЗаказПокупателя",ЗаказПокупателя);
Выборка=Запрос.Выполнить().Выбрать();
Если Выборка.Следующий() Тогда
	Если Выборка.Сумма>0 Тогда
		Возврат Истина;
	КонецЕсли;	
КонецЕсли;	
Возврат Ложь;
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары         = ЭлементыФормы.Товары.Колонки;
мКолонкиВозвратнаяТара = ЭлементыФормы.ВозвратнаяТара.Колонки;
