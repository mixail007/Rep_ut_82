////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	
	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
//
Функция ПодготовитьТаблицуПоВычетам(РезультатЗапросаПоВычетам)

	ТаблицаВычетов = РезультатЗапросаПоВычетам.Выгрузить();
	
	Возврат ТаблицаВычетов;

КонецФункции // ПодготовитьТаблицуПоОплатам()

// Проверяет правильность заполнения строк табличной части.
//
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоВычетам(ТаблицаПоВычетам, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидЦенности, Поставщик, СчетФактура, СтавкаНДС, ДокументОплаты");
	
	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Состав", СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
//
Процедура ДвиженияПоРегистрам(ТаблицаПоВычетам, Отказ, Заголовок);
	
	Для Каждого ТекСтрокаВычета Из ТаблицаПоВычетам Цикл
		// регистр НДСПокупки 
		Движение = Движения.НДСПокупки.Добавить();
		Движение.Период = Дата;
		Движение.Организация = Организация;
		Движение.ВидЦенности = ТекСтрокаВычета.ВидЦенности;
		Движение.Поставщик = ТекСтрокаВычета.Поставщик;
		Движение.СчетФактура = ТекСтрокаВычета.СчетФактура;
		Движение.ДокументОплаты = ТекСтрокаВычета.ДокументОплаты;
		
		Если ПредъявленНДСКВычету0 Тогда // подстраховка для ручного ввода
			Движение.Событие = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0;
		Иначе
			Движение.Событие = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету;
		КонецЕсли;
		
		Движение.СтавкаНДС = ТекСтрокаВычета.СтавкаНДС;
		Движение.СуммаБезНДС = ТекСтрокаВычета.СуммаБезНДС;
		Движение.НДС = ТекСтрокаВычета.НДС;
		
	КонецЦикла;
	
	// записываем движения регистров
	Движения.НДСПокупки.Записать();

КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(Отказ, Заголовок);
	
	// Подготовим данные необходимые для проведения и проверки заполнения табличной части.
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ВидЦенности",		"ВидЦенности");
	СтруктураПолей.Вставить("Поставщик",		"Поставщик");
	СтруктураПолей.Вставить("СчетФактура",		"СчетФактура");
	СтруктураПолей.Вставить("ДокументОплаты",	"ДокументОплаты");
	СтруктураПолей.Вставить("СтавкаНДС",		"СтавкаНДС");
	СтруктураПолей.Вставить("СуммаБезНДС",		"СуммаБезНДС");
	СтруктураПолей.Вставить("НДС",				"НДС");

	РезультатЗапросаПоВычетам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Состав", СтруктураПолей);
	ТаблицаПоВычетам = 			ПодготовитьТаблицуПоВычетам(РезультатЗапросаПоВычетам);
	
	ПроверитьЗаполнениеТабличнойЧастиПоВычетам(ТаблицаПоВычетам, Отказ, Заголовок);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(ТаблицаПоВычетам, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 

КонецПроцедуры

