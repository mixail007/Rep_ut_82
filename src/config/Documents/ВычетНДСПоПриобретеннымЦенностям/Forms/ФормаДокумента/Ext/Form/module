
Процедура ВыбПериодНажатие(Элемент)

	НастройкаПериода = Новый НастройкаПериода;

	НастройкаПериода.УстановитьПериод(НачалоПериода, ?(КонецПериода='0001-01-01', КонецПериода, КонецДня(КонецПериода)));

	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод   = Истина;
	НастройкаПериода.ВариантНастройки         = ВариантНастройкиПериода.Период;

	НастройкаПериода.Редактировать();

	НачалоПериода = НастройкаПериода.ПолучитьДатуНачала();
	КонецПериода  = НастройкаПериода.ПолучитьДатуОкончания();

КонецПроцедуры

Процедура ПредъявленНДСКВычету0ПриИзменении(Элемент)

	Если Состав.Количество() > 0 Тогда

		Если Вопрос("Необходимо очистить табличную часть. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Состав.Очистить();
		Иначе
			ПредъявленНДСКВычету0 = НЕ ПредъявленНДСКВычету0;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при нажатии на кнопку "Запонить" в диалоге документа
// Реализует алгоритм автоматического заполнения табличной части.
//
Процедура КоманднаяПанельЗаполнить(Кнопка)

	Состав.Очистить();

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НДСПокупки.Организация,
	|	НДСПокупки.СчетФактура КАК СчетФактура,
	|	НДСПокупки.Поставщик КАК Поставщик,
	|	НДСПокупки.ВидЦенности КАК ВидЦенности,
	|	НДСПокупки.СтавкаНДС КАК СтавкаНДС,
	|	НДСПокупки.ДокументОплаты,
	|	НДСПокупки.Событие КАК Событие,
	|	СУММА(НДСПокупки.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(НДСПокупки.НДС) КАК НДС,
	|	СУММА(ВЫБОР КОГДА НДСПокупки.Событие = &Предъявлено             ТОГДА НДСПокупки.СуммаБезНДС ИНАЧЕ 0 КОНЕЦ) КАК ПредъявленоСумма,
	|	СУММА(ВЫБОР КОГДА НДСПокупки.Событие = &Предъявлено             ТОГДА НДСПокупки.НДС         ИНАЧЕ 0 КОНЕЦ) КАК ПредъявленоНДС,
	|	СУММА(ВЫБОР КОГДА НДСПокупки.Событие = &ВыставленСФ             ТОГДА НДСПокупки.СуммаБезНДС ИНАЧЕ 0 КОНЕЦ) КАК ВыставленСФСумма,
	|	СУММА(ВЫБОР КОГДА НДСПокупки.Событие = &ВыставленСФ             ТОГДА НДСПокупки.НДС         ИНАЧЕ 0 КОНЕЦ) КАК ВыставленСФНДС,
	|	СУММА(ВЫБОР КОГДА НДСПокупки.Событие = &Оплачено                ТОГДА НДСПокупки.СуммаБезНДС ИНАЧЕ 0 КОНЕЦ) КАК ОплаченоСумма,
	|	СУММА(ВЫБОР КОГДА НДСПокупки.Событие = &Оплачено                ТОГДА НДСПокупки.НДС         ИНАЧЕ 0 КОНЕЦ) КАК ОплаченоНДС,
	|	СУММА(ВЫБОР КОГДА НДСПокупки.Событие = &Таможня                 ТОГДА НДСПокупки.СуммаБезНДС ИНАЧЕ 0 КОНЕЦ) КАК ТаможняСумма,
	|	СУММА(ВЫБОР КОГДА НДСПокупки.Событие = &Таможня                 ТОГДА НДСПокупки.НДС         ИНАЧЕ 0 КОНЕЦ) КАК ТаможняНДС,
	|	СУММА(ВЫБОР КОГДА НДСПокупки.Событие = &ВключеноВСтоимость      ТОГДА НДСПокупки.СуммаБезНДС ИНАЧЕ 0 КОНЕЦ) КАК ВключеноВСтоимостьСумма,
	|	СУММА(ВЫБОР КОГДА НДСПокупки.Событие = &ВключеноВСтоимость      ТОГДА НДСПокупки.НДС         ИНАЧЕ 0 КОНЕЦ) КАК ВключеноВСтоимостьНДС,
	|	СУММА(ВЫБОР КОГДА НДСПокупки.Событие = &Предполагается0         ТОГДА НДСПокупки.СуммаБезНДС ИНАЧЕ 0 КОНЕЦ) КАК Предполагается0Сумма,
	|	СУММА(ВЫБОР КОГДА НДСПокупки.Событие = &Предполагается0         ТОГДА НДСПокупки.НДС         ИНАЧЕ 0 КОНЕЦ) КАК Предполагается0НДС,
	|	СУММА(ВЫБОР КОГДА НДСПокупки.Событие = &Подтверждено0           ТОГДА НДСПокупки.СуммаБезНДС ИНАЧЕ 0 КОНЕЦ) КАК Подтверждено0Сумма,
	|	СУММА(ВЫБОР КОГДА НДСПокупки.Событие = &Подтверждено0           ТОГДА НДСПокупки.НДС         ИНАЧЕ 0 КОНЕЦ) КАК Подтверждено0НДС,
	|	СУММА(ВЫБОР КОГДА НДСПокупки.Событие = &НеПодтверждено0         ТОГДА НДСПокупки.СуммаБезНДС ИНАЧЕ 0 КОНЕЦ) КАК НеПодтверждено0Сумма,
	|	СУММА(ВЫБОР КОГДА НДСПокупки.Событие = &НеПодтверждено0         ТОГДА НДСПокупки.НДС         ИНАЧЕ 0 КОНЕЦ) КАК НеПодтверждено0НДС,
	|	СУММА(ВЫБОР КОГДА НДСПокупки.Событие = &КВычету                 ТОГДА НДСПокупки.СуммаБезНДС ИНАЧЕ 0 КОНЕЦ) КАК КВычетуСумма,
	|	СУММА(ВЫБОР КОГДА НДСПокупки.Событие = &КВычету                 ТОГДА НДСПокупки.НДС         ИНАЧЕ 0 КОНЕЦ) КАК КВычетуНДС,
	|	СУММА(ВЫБОР КОГДА НДСПокупки.Событие = &КВычету0                ТОГДА НДСПокупки.СуммаБезНДС ИНАЧЕ 0 КОНЕЦ) КАК КВычету0Сумма,
	|	СУММА(ВЫБОР КОГДА НДСПокупки.Событие = &КВычету0                ТОГДА НДСПокупки.НДС         ИНАЧЕ 0 КОНЕЦ) КАК КВычету0НДС,
	|	СУММА(ВЫБОР КОГДА НДСПокупки.Событие = &Восстановлено           ТОГДА НДСПокупки.СуммаБезНДС ИНАЧЕ 0 КОНЕЦ) КАК ВосстановленоСумма,
	|	СУММА(ВЫБОР КОГДА НДСПокупки.Событие = &Восстановлено           ТОГДА НДСПокупки.НДС         ИНАЧЕ 0 КОНЕЦ) КАК ВосстановленоНДС
	|ИЗ
	|	РегистрНакопления.НДСПокупки КАК НДСПокупки
	|
	|ГДЕ
	|	НДСПокупки.Организация =  &Организация  И
	|	НДСПокупки.Период      <= &КонецПериода И
	|	НДСПокупки.Регистратор <> &Регистратор  И
	|	Не (НДСПокупки.ВидЦенности в (&ИсключаемыеЦенности))
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПокупки.Организация,
	|	НДСПокупки.Поставщик,
	|	НДСПокупки.СчетФактура,
	|	НДСПокупки.Событие,
	|	НДСПокупки.ДокументОплаты,
	|	НДСПокупки.ВидЦенности,
	|	НДСПокупки.СтавкаНДС
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактура,
	|	Поставщик,
	|	ВидЦенности,
	|	СтавкаНДС
	|
	|ИТОГИ
	|	СУММА(СуммаБезНДС),
	|	СУММА(НДС),
	|	СУММА(ПредъявленоСумма),
	|	СУММА(ПредъявленоНДС),
	|	СУММА(ВыставленСФСумма),
	|	СУММА(ВыставленСФНДС),
	|	СУММА(ОплаченоСумма),
	|	СУММА(ОплаченоНДС),
	|	СУММА(ТаможняСумма),
	|	СУММА(ТаможняНДС),
	|	СУММА(ВключеноВСтоимостьСумма),
	|	СУММА(ВключеноВСтоимостьНДС),
	|	СУММА(Предполагается0Сумма),
	|	СУММА(Предполагается0НДС),
	|	СУММА(Подтверждено0Сумма),
	|	СУММА(Подтверждено0НДС),
	|	СУММА(НеПодтверждено0Сумма),
	|	СУММА(НеПодтверждено0НДС),
	|	СУММА(КВычетуСумма),
	|	СУММА(КВычетуНДС),
	|	СУММА(КВычету0Сумма),
	|	СУММА(КВычету0НДС),
	|	СУММА(ВосстановленоСумма),
	|	СУММА(ВосстановленоНДС)
	|ПО
	|	СчетФактура,
	|	Поставщик,
	|	ВидЦенности,
	|	СтавкаНДС,
	|	Событие";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("Регистратор",  Ссылка);

	// Фильтры событий
	Запрос.УстановитьПараметр("Предъявлено",             Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком);
	Запрос.УстановитьПараметр("ВыставленСФ",             Перечисления.СобытияПоНДСПокупки.ПолученСчетФактура);
	Запрос.УстановитьПараметр("Оплачено",                Перечисления.СобытияПоНДСПокупки.НДСОплачен);
	Запрос.УстановитьПараметр("Таможня",                 Перечисления.СобытияПоНДСПокупки.УплаченНДСНаТаможне);
	Запрос.УстановитьПараметр("ВключеноВСтоимость",      Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость);
	Запрос.УстановитьПараметр("Предполагается0",         Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0);
	Запрос.УстановитьПараметр("Подтверждено0",           Перечисления.СобытияПоНДСПокупки.ПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("НеПодтверждено0",         Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("КВычету",                 Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету);
	Запрос.УстановитьПараметр("КВычету0",                Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0);
	Запрос.УстановитьПараметр("Восстановлено",           Перечисления.СобытияПоНДСПокупки.ВосстановленНДС);

	// Исключаемые из анализа виды ценностей
	ИсключаемыеВидыЦенностей = Новый СписокЗначений;
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);

	Запрос.УстановитьПараметр("ИсключаемыеЦенности", ИсключаемыеВидыЦенностей);

	Результат = Запрос.Выполнить();

	ВыборкаСчетФактура = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

	Пока ВыборкаСчетФактура.Следующий() Цикл

		ВыборкаПоставщик = ВыборкаСчетФактура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

		Пока ВыборкаПоставщик.Следующий() Цикл

			ВыборкаВидЦенности = ВыборкаПоставщик.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

			Пока ВыборкаВидЦенности.Следующий() Цикл

				ВыборкаСтавкаНДС = ВыборкаВидЦенности.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

				Пока ВыборкаСтавкаНДС.Следующий() Цикл

					ВычетСумма      = 0;
					ВычетНДС        = 0;
					ВычетРанееСумма = 0;
					ВычетРанееНДС   = 0;

					// рассчитаем сумму которую можно принять к вычету и которая уже была принята ранее
					РассчитатьПараметрыВычета(ПредъявленНДСКВычету0, ВыборкаВидЦенности, ВыборкаСтавкаНДС, ВычетСумма, ВычетНДС, ВычетРанееСумма, ВычетРанееНДС);

					ПринятьСумма = ВычетСумма - ВычетРанееСумма;
					ПринятьНДС   = ВычетНДС - ВычетРанееНДС;

					Если (ПринятьСумма > 0) или (ПринятьНДС > 0) Тогда

						// Формируем таблицу поступлений данного вида ценности 
						ТаблицаПоступлений = СформироватьТаблицуПоступлений(ВыборкаСтавкаНДС);
						ТаблицаПоступлений.Колонки.Добавить("ШагСуммаБезНДС");
						ТаблицаПоступлений.Колонки.Добавить("ШагНДС");

						// Далее выполняем анализ событий "НДСОплачен" и по каждому факту оплаты поставщику
						// принимаем НДС к вычету
						РаспределитьСуммыПризнаваемыхВычетовПоФактамОплаты(ВыборкаСтавкаНДС, ВыборкаСтавкаНДС.ВидЦенности, ТаблицаПоступлений, ПринятьСумма, ПринятьНДС);

					КонецЕсли;
	
				КонецЦикла; // СтавкаНДС

			КонецЦикла; // ВидЦенности

		КонецЦикла; // Поставщик

	КонецЦикла; // Счет фактура

КонецПроцедуры // КоманднаяПанельЗаполнить()

// Процедура вызывается из КоманднаяПанельЗаполнить.
// По определенному счету фактуре и виду ценности рассчитывает сумму,
// которая формально может быть принята к вычету при рассчете НДС.
// Исходными данными для анализа являются события зарегистрированные
// в регистре НДСПокупки для данного счета фактуры.
Процедура РассчитатьПараметрыВычета(Ставка0, ВыборкаВидЦенности, ВыборкаСтавкаНДС, ВычетСумма, ВычетНДС, ВычетРанееСумма, ВычетРанееНДС);

	// Определяем базовую сумму, по отношению к которой в дальнейшем будет 
	// проводиться в случае необходимости пропорциональный расчет
	БазаСумма = ВыборкаСтавкаНДС.ПредъявленоСумма;
	БазаНДС   = ВыборкаСтавкаНДС.ПредъявленоНДС;

	// Определяем часть базовой суммы, которая приходится на деятельность по ставке 0% 
	База0Сумма = ВыборкаСтавкаНДС.Предполагается0Сумма;
	База0НДС   = ВыборкаСтавкаНДС.Предполагается0НДС;
	
	КоэффСумма = ?(БазаСумма = 0, 0, База0Сумма / БазаСумма);
	КоэффНДС   = ?(БазаНДС   = 0, 0, База0НДС / БазаНДС);

	// Рассчитаем суммы событий, которые подлежат распределению между ставкой 0% и остальными ставками
	ВыставленСФСумма0 = Окр(ВыборкаСтавкаНДС.ВыставленСФСумма * КоэффСумма, 2);
	ВыставленСФСумма  = ВыборкаСтавкаНДС.ВыставленСФСумма - ВыставленСФСумма0;
	ВыставленСФНДС0   = Окр(ВыборкаСтавкаНДС.ВыставленСФНДС * КоэффНДС, 2);
	ВыставленСФНДС    = ВыборкаСтавкаНДС.ВыставленСФНДС - ВыставленСФНДС0;

	ОплаченоСумма0 = Окр(ВыборкаСтавкаНДС.ОплаченоСумма * КоэффСумма, 2);
	ОплаченоСумма  = ВыборкаСтавкаНДС.ОплаченоСумма - ОплаченоСумма0;
	ОплаченоНДС0   = Окр(ВыборкаСтавкаНДС.ОплаченоНДС * КоэффНДС, 2);
	ОплаченоНДС    = ВыборкаСтавкаНДС.ОплаченоНДС - ОплаченоНДС0;

	ВосстановленоСумма0 = Окр(ВыборкаСтавкаНДС.ВосстановленоСумма * КоэффСумма, 2);
	ВосстановленоСумма  = ВыборкаСтавкаНДС.ВосстановленоСумма - ВосстановленоСумма0;
	ВосстановленоНДС0   = Окр(ВыборкаСтавкаНДС.ВосстановленоНДС * КоэффСумма, 2);
	ВосстановленоНДС    = ВыборкаСтавкаНДС.ВосстановленоНДС - ВосстановленоНДС0;

	// Далее расчет выполняется отдельно для ставки 0% и остальных ставок
	Если Ставка0 Тогда

		// Ставка 0%
		ВычетСумма = Мин(База0Сумма, ВыставленСФСумма0, ОплаченоСумма0, ВыборкаСтавкаНДС.Подтверждено0Сумма);
		ВычетНДС   = Мин(База0НДС,   ВыставленСФНДС0,   ОплаченоНДС0,  ВыборкаСтавкаНДС.Подтверждено0НДС);

		ВычетСумма = ВычетСумма + ВосстановленоСумма0;
		ВычетНДС   = ВычетНДС   + ВосстановленоНДС0;

		ВычетРанееСумма = ВыборкаСтавкаНДС.КВычету0Сумма;
		ВычетРанееНДС   = ВыборкаСтавкаНДС.КВычету0НДС;

	Иначе

		// Остальные ставки
		ВычетСумма = Мин((БазаСумма - База0Сумма), ВыставленСФСумма, ОплаченоСумма);
		ВычетНДС   = Мин((БазаНДС - База0НДС),     ВыставленСФНДС,   ОплаченоНДС);

		// Нужно учесть события "НДСВключенВСтоимость"
		ВычетСумма = ВычетСумма - ВыборкаСтавкаНДС.ВключеноВСтоимостьСумма;
		ВычетНДС   = ВычетНДС   - ВыборкаСтавкаНДС.ВключеноВСтоимостьНДС;

		ВычетСумма = ВычетСумма + ВосстановленоСумма + ВыборкаСтавкаНДС.НеПодтверждено0Сумма;
		ВычетНДС   = ВычетНДС   + ВосстановленоНДС + ВыборкаСтавкаНДС.НеПодтверждено0НДС;

		// Нужно учесть события "УплаченНДСНаТаможне"
		ВычетСумма = ВычетСумма + ВыборкаСтавкаНДС.ТаможняСумма;
		ВычетНДС   = ВычетНДС   + ВыборкаСтавкаНДС.ТаможняНДС;
		
		ВычетРанееСумма = ВыборкаСтавкаНДС.КВычетуСумма;
		ВычетРанееНДС   = ВыборкаСтавкаНДС.КВычетуНДС;

	КонецЕсли;

КонецПроцедуры // РассчитатьПараметрыВычета()

// Функция вызывается из тела процедуры "КоманднаяПанельЗаполнить".
// формируется структура и состав строк таблицы поступлений вида ценности
// фактически определяется на какие субсчета 19 счета осуществлялся приход
// НДС для данного вида ценности
Функция СформироватьТаблицуПоступлений(ВыборкаСтавкаНДС)

	ТаблицаПоступлений = Состав.Выгрузить();
	ТаблицаПоступлений.Очистить();

	ВыборкаПоСобытиям = ВыборкаСтавкаНДС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией); 
	
	Если ВыборкаСтавкаНДС.ВидЦенности = Перечисления.ВидыЦенностей.ТаможенныеПлатежи Тогда
		// За основу таблицы берем события "Уплачен НДС на таможне"
		СтруктураПоиска = Новый Структура("Событие", Перечисления.СобытияПоНДСПокупки.УплаченНДСНаТаможне);
	Иначе
		// За основу таблицы берем события "Предъявлен НДС поставщиком"
		СтруктураПоиска = Новый Структура("Событие", Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком);
	КонецЕсли;
		
	Если ВыборкаПоСобытиям.НайтиСледующий(СтруктураПоиска) Тогда

		Выборка = ВыборкаПоСобытиям.Выбрать();

		Пока Выборка.Следующий() Цикл

			// Одноименные поля выборки переносятся в соответствующие поля таблицы документа
			СтрокаТаблицы = ТаблицаПоступлений.Добавить();

			СтрокаТаблицы.ВидЦенности  = Выборка.ВидЦенности;
			СтрокаТаблицы.Поставщик    = Выборка.Поставщик;
			СтрокаТаблицы.СчетФактура  = Выборка.СчетФактура;
			СтрокаТаблицы.СтавкаНДС    = Выборка.СтавкаНДС;
			СтрокаТаблицы.СуммаБезНДС  = Выборка.СуммаБезНДС;
			СтрокаТаблицы.НДС          = Выборка.НДС;

		КонецЦикла;

	КонецЕсли;

	Возврат ТаблицаПоступлений;

КонецФункции // СформироватьТаблицуПоступлений()

// Процедура вызывается из тела процедуры "КоманднаяПанельЗаполнить".
// В процессе работы процедуры общая сумма НДС, которая может быть признана
// в качестве вычета распределяется по конкретным событиям оплаты, для того
// чтобы сопоставить факт признания вычета по НДС и факт оплаты поставщику, связанный
// с этим признанием.
//
Процедура РаспределитьСуммыПризнаваемыхВычетовПоФактамОплаты(ВыборкаСтавкаНДС, ВидЦенности, ТаблицаПоступлений, СуммаРаспределенияОплат, НДСРаспределенияОплат);

	Если ВидЦенности = Перечисления.ВидыЦенностей.ТаможенныеПлатежи Тогда
		СтруктураПоиска = Новый Структура("Событие", Перечисления.СобытияПоНДСПокупки.УплаченНДСНаТаможне);

	Иначе
		СтруктураПоиска = Новый Структура("Событие", Перечисления.СобытияПоНДСПокупки.НДСОплачен);

	КонецЕсли;

	ВыборкаПоСобытиям = ВыборкаСтавкаНДС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией); 

	Если ВыборкаПоСобытиям.НайтиСледующий(СтруктураПоиска) Тогда

		Выборка = ВыборкаПоСобытиям.Выбрать();

		ШагСуммаБезНДС = ВыборкаПоСобытиям.СуммаБезНДС;
		ШагНДС         = ВыборкаПоСобытиям.НДС;

		Пока (Выборка.Следующий()) И ((ШагСуммаБезНДС + ШагНДС) > 0) Цикл

			ШагСуммаБезНДС = Мин(СуммаРаспределенияОплат, Выборка.СуммаБезНДС);
			ШагНДС         = Мин(НДСРаспределенияОплат,   Выборка.НДС);

			// Необходимые условия выполнены и теперь мы можем принять НДС к вычету
			Если ((ШагСуммаБезНДС >= 0) или (ШагНДС >= 0)) и ((ШагСуммаБезНДС + ШагНДС) > 0) Тогда

				// Распределяем сумму очередного шага на все варианты поступлений по НДС
				РаспределитьСуммуПоСтолбцу(ТаблицаПоступлений.ВыгрузитьКолонку("СуммаБезНДС"), ШагСуммаБезНДС, ТаблицаПоступлений, "ШагСуммаБезНДС");
				РаспределитьСуммуПоСтолбцу(ТаблицаПоступлений.ВыгрузитьКолонку("НДС"), ШагНДС, ТаблицаПоступлений, "ШагНДС");

				Для Каждого СтрПоступления Из ТаблицаПоступлений Цикл

					СтрокаТП = Состав.Добавить();

					СтрокаТП.ВидЦенности    = СтрПоступления.ВидЦенности;
					СтрокаТП.Поставщик      = СтрПоступления.Поставщик;
					СтрокаТП.СчетФактура    = СтрПоступления.СчетФактура;
					СтрокаТП.СтавкаНДС      = СтрПоступления.СтавкаНДС;
					СтрокаТП.ДокументОплаты = Выборка.ДокументОплаты;

					СтрокаТП.СуммаБезНДС    = СтрПоступления.ШагСуммаБезНДС;
					СтрокаТП.НДС            = СтрПоступления.ШагНДС;

				КонецЦикла;

				СуммаРаспределенияОплат = СуммаРаспределенияОплат - ТаблицаПоступлений.Итог("ШагСуммаБезНДС");
				НДСРаспределенияОплат   = НДСРаспределенияОплат - ТаблицаПоступлений.Итог("ШагНДС");

			КонецЕсли;

		КонецЦикла; // Пока Выборка.Следующий() Цикл

	КонецЕсли; // Если ВыборкаПоСобытиям.НайтиСледующий(СтруктураПоиска) Тогда

КонецПроцедуры // РаспределитьСуммыПризнаваемыхВычетовПоФактамОплаты()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ 

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьНомерДокумента(ЭтотОбъект);

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Состав".
//
Процедура СтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ЭлементыФормы.Состав.ТекущиеДанные.НДС = РассчитатьСуммуНДС(ЭлементыФормы.Состав.ТекущиеДанные.СуммаБезНДС, Истина, Ложь, ПолучитьСтавкуНДС(ЭлементыФормы.Состав.ТекущиеДанные.СтавкаНДС));

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Сумма без НДС
// в строке табличной части "Состав".
//
Процедура СоставСуммаБезНДСПриИзменении(Элемент)
	
	// Рассчитать реквизиты табличной части.
	ЭлементыФормы.Состав.ТекущиеДанные.НДС = РассчитатьСуммуНДС(ЭлементыФормы.Состав.ТекущиеДанные.СуммаБезНДС, TRUE, FALSE, ПолучитьСтавкуНДС(ЭлементыФормы.Состав.ТекущиеДанные.СтавкаНДС));
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля дата 
// в диалоге документа.
//
Процедура ДатаПриИзменении(Элемент)

	УстановитьВремя(РежимАвтоВремя.Последним);

	Если (НачалоМесяца(Дата) <> НачалоПериода)
	 или (КонецМесяца(Дата) <> КонецПериода) Тогда

		Ответ = Вопрос("Установить значение периода документа месяцем в который входит текущая дата?", РежимДиалогаВопрос.ДаНет,,,);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			НачалоПериода = НачалоМесяца(Дата);
			КонецПериода  = КонецМесяца(Дата);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь, , "Продажа");
		УстановитьНомерДокумента(ЭтотОбъект);

		УстановитьВремя(РежимАвтоВремя.Последним);

		НачалоПериода = НачалоМесяца(Дата); 
		КонецПериода  = КонецМесяца(Дата);

	КонецЕсли;

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ЗначениеНеЗаполнено(Организация) Тогда

		Предупреждение("Не указана организация. Операция не записана.");

		Отказ = Истина;

		ТекущийЭлемент = ЭлементыФормы.Организация;

		Возврат;

	КонецЕсли;

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

