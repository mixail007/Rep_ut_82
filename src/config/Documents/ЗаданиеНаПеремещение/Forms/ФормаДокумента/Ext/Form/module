Перем мОбновлятьВладельца;

Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - Для проверки перехода документа в другой период
Перем мВалютаРегламентированногоУчета;

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется Для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов; 

// Хранит текущий договор контрагента
// используется Для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента; 

Перем мЧас;                      
Перем мМинута;

//Орлов ++
Перем мПечатнаяФормаПоУмолчанию;
//Орлов --

перем МоментВремени;
перем КолОсталосьЗаказать;

перем мКолонкиТовары;

перем СчитаемНедогрузы;
// Процедура обновляет параметры в форме подбора, Если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//

// Процедура вызывает сервисный механизм Для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)
 
КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт
КонецПроцедуры // ОбработкаПодбора()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость Для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	Если ВидОперации=Перечисления.ВидыДвиженийПриходРасход.Расход Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.ЗаказыПокупателей.Видимость = Истина;
		//Орлов ++
		ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Видимость = Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Резерв.Видимость = Истина;
		//Орлов --
		ЭлементыФормы.ОсновнаяПанель.Страницы.ЗаказыПокупателей.Заголовок = "Заказы покупателей" 
			+?(ЗаказыПокупателей.Количество()=0,""," ("+строка(ЗаказыПокупателей.Количество())+")");
		ЭлементыФормы.ОсновнаяПанель.Страницы.Резерв.Заголовок = "Порядок отгрузки" 
			+?(ГруппыСкладов.Количество()=0,""," ("+строка(ГруппыСкладов.Количество())+")");
		ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Заголовок = "Товары" 
			+?(Товары.Количество()=0,""," ("+строка(Товары.Количество())+")");
	    ЭлементыФормы.Товары.Колонки.Количество.ТекстШапки = "Отгружено";
		
		доступноИзменениеДокументов = ЭтотОбъект.Проведен;
		//ЭлементыФормы.ЗаказыПокупателей.Колонки.ЗаказПокупателя.ТолькоПросмотр = доступноИзменениеДокументов;	
		//ЭлементыФормы.ЗаказыПокупателей.Колонки.Реализация.ТолькоПросмотр    = доступноИзменениеДокументов;	
		
		// прямое изменение строк дерева - недоступно!
		доступенПросмотрИИзменениеДерева = РольДоступна("ПолныеПрава") и РольДоступна("ПравоЗавершенияРаботыПользователей");
		ЭлементыФормы.ТабЗначРезерв.Доступность = доступенПросмотрИИзменениеДерева;
		//ЭлементыФормы.ТабЗначРезерв.Колонки.КоличествоЗаказано.Доступность = доступенПросмотрИИзменениеДерева;
		//ЭлементыФормы.ТабЗначРезерв.Колонки.КоличествоСвободно.Доступность = доступенПросмотрИИзменениеДерева; 
		//ЭлементыФормы.ТабЗначРезерв.Колонки.КоличествоОстаток.Доступность  = доступенПросмотрИИзменениеДерева; 
	ИначеЕсли ВидОперации=Перечисления.ВидыДвиженийПриходРасход.Приход Тогда ////Плотников
		ЭлементыФормы.ОсновнаяПанель.Страницы.ЗаказыПокупателей.Видимость = Истина;
		//Орлов ++
		ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Видимость = Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Резерв.Видимость = Ложь;
		//Орлов --
		ЭлементыФормы.ОсновнаяПанель.Страницы.ЗаказыПокупателей.Заголовок = "Заказы покупателей" 
			+?(ЗаказыПокупателей.Количество()=0,""," ("+строка(ЗаказыПокупателей.Количество())+")");
		ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Заголовок = "Товары" 
			+?(Товары.Количество()=0,""," ("+строка(Товары.Количество())+")");
	    ЭлементыФормы.Товары.Колонки.Количество.ТекстШапки = "Отгружено";
		
		доступноИзменениеДокументов = ЭтотОбъект.Проведен;
		//ЭлементыФормы.ЗаказыПокупателей.Колонки.ЗаказПокупателя.ТолькоПросмотр = доступноИзменениеДокументов;	
		//ЭлементыФормы.ЗаказыПокупателей.Колонки.Реализация.ТолькоПросмотр    = доступноИзменениеДокументов;	
		
		// прямое изменение строк дерева - недоступно!
		доступенПросмотрИИзменениеДерева = РольДоступна("ПолныеПрава") и РольДоступна("ПравоЗавершенияРаботыПользователей");
		ЭлементыФормы.ТабЗначРезерв.Доступность = доступенПросмотрИИзменениеДерева;
		
	КонецЕсли;	

	ЭлементыФормы.ИтогКоличествоПозиций.ТолькоПросмотр = НЕ ВводитьИтогиВручную;
	ЭлементыФормы.ИтогКоличествоШтук.ТолькоПросмотр    = НЕ ВводитьИтогиВручную;
	ЭлементыФормы.ИтогКоличествоПозиций.Доступность = ВводитьИтогиВручную;
	ЭлементыФормы.ИтогКоличествоШтук.Доступность    = ВводитьИтогиВручную;
		
КонецПроцедуры // УстановитьВидимость()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	//// При изменении данных обновим суммы в подвале.
	//ЭлементыФормы.Всего.Значение    = ФорматСумм(ПолучитьСуммуДокументаСНДС(ЭтотОбъект));
	//ЭлементыФормы.ВсегоНДС.Значение = ФорматСумм(ПолучитьНДСДокумента(ЭтотОбъект));

	//ВременнаяСтрока = "";

	//Если (НЕ ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента))
	//   И (ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда

	//	ВременнаяСтрока = ВременнаяСтрока + КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета) +  ДокументОбъект.ВалютаДокумента
	//					+ " = " + КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
	//					+ мВалютаРегламентированногоУчета + ", ";

	//КонецЕсли;

	//Если НЕ ЗначениеНеЗаполнено(ДокументОбъект.ТипЦен) Тогда
	//	ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
	//Иначе
	//	ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	//КонецЕсли;

	//ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	//Если ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
	//	ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	//Иначе
	//	ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	//КонецЕсли;

	//Если СуммаВключаетНДС Тогда
	//	ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	//Иначе
	//	ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	//КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ


// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	ЭлементыФормы.Важность.Доступность = РольДоступна("МенеджерПоПродажамСОграничениемПравДоступа"); //10.02.2016 ТОЛЬКО ЛОГИСТАМ
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		Дата = ТекущаяДата();
		
		Если ЗначениеНеЗаполнено(Контрагент) Тогда
			Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
		Важность=Перечисления.Важность.Средняя;
		
		Ответственный = глТекущийПользователь;
		
		//+++ 19.07.2016 - доступ ЗАКРЫТ для ВСЕХ!
		//Подразделение = глТекущийПользователь.ОсновноеПодразделение;
		Если глТекущийПользователь.ОсновноеПодразделение.ОбособленноеПодразделение тогда
			Подразделение = глТекущийПользователь.ОсновноеПодразделение;
		Иначе // для всех пользователей Ярославля с любым подраздлением - будет Головное!
			Подразделение = Справочники.Подразделения.НайтиПоКоду("00005");
		КонецЕсли;	
 		Если РольДоступна("ПравоЗавершенияРаботыПользователей") тогда
			ЭлементыФормы.Подразделение.Доступность = истина;
			ЭлементыФормы.Организация.Доступность   = истина;
		КонецЕсли;	
		//+++)
		
        Организация   = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяОрганизация");
		
		УстановитьНомерДокумента(ЭтотОбъект);
		
		//+++ запрет определения складов!
		Если НЕ ( РольДоступна("ПолныеПрава")
				 или РольДоступна("Кладовщик")  ) тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.Резерв.Доступность = ложь;
		//ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Доступность = ложь;
		КонецЕсли;
		
		//+++ 21.04.2015
	//	СкладПолучатель = справочники.Склады.НайтиПоНаименованию("Буфер Ярославль");//+++ БУФЕРНЫЙ СКЛАД !
		СкладПолучатель = справочники.Склады.НайтиПоНаименованию("Ангар-И");//01475
	
		ВводитьТолькоПеремещение = истина; //ВСЕГДА!
	Иначе
		
		//------------------ограничение проведенных или выполненных----------------------------------------
		Если (ссылка.Проведен или ссылка.Выполнено) тогда
			Если НЕ ( РольДоступна("ПолныеПрава")
			         или РольДоступна("Кладовщик")  ) тогда
			ЭтаФорма.ТолькоПросмотр = истина;
			Предупреждение("Задание уже выполняется или выполнено!
					       |     Доступен только просмотр!");
			КонецЕсли;
		КонецЕсли;	
		
		// Если это задание на перемещение рекламационных АКБ из формулы. открываем сразу на закладке 4.
		// Сакулина
		Если ЗаказыПокупателей.Количество() = 0 и ЗаявкиНаБрак.Количество() <> 0 Тогда
			ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ВозвратБрака;
		КонецЕсли;
		
	КонецЕсли;
	
	
	УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	ВидОперации.Метаданные().ЗначенияПеречисления,
	Новый Действие("ДействияФормыДействиеУстановитьОперацию"));
	
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);										
	УстановитьВидимость();	
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	//Орлов ++
	// Заполнить подменю выбора доп.печатных форм.
	СписокМакетов = ЭтотОбъект.ПолучитьСписокПечатныхФорм();
	УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати,
	                                       СписокМакетов,
	                                       Новый Действие("ДействияФормыДействиеВыбратьПечатнуюФормы"));
										   
	// Установить печатную форму по умолчанию.
	УстановитьКнопкуПечати(ЭтотОбъект.Метаданные().Имя, ЭтаФорма, СписокМакетов, мПечатнаяФормаПоУмолчанию);										   
	//Орлов --
	
	//Плотников, Заполним группы по умолчанию исключая Ошиповку, по просьбе Фролова
	
	Если ТаблицаГрупп.Количество()= 0 и ЭтоНовый() Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Кроме",Справочники.ГруппыСкладов.ОсновнойСклад);
		
		Массив = Новый Массив;
		// Фролов попросил убрать галку Ошиповка
		//Массив.Добавить(Справочники.ГруппыСкладов.НайтиПоКоду("09"));
		
		//Массив.Добавить(Справочники.ГруппыСкладов.НайтиПоКоду("12")); 
		Массив.Добавить(Справочники.ГруппыСкладов.НайтиПоКоду("13"));
		Запрос.УстановитьПараметр("ошиповка",Массив);

		запрос.Текст = "ВЫБРАТЬ
		               |	ВЫБОР
		               |		КОГДА ГруппыСкладов.Ссылка В (&ошиповка)
		               |			ТОГДА ИСТИНА
		               |		ИНАЧЕ ЛОЖЬ
		               |	КОНЕЦ КАК Флаг,
		               |	ГруппыСкладов.Ссылка КАК Группа
		               |ИЗ
		               |	Справочник.ГруппыСкладов КАК ГруппыСкладов
		               |ГДЕ
		               |	ГруппыСкладов.Транзит = ЛОЖЬ
		               |	И ГруппыСкладов.ПометкаУдаления = ЛОЖЬ
		               |	И ГруппыСкладов.Ссылка <> &Кроме";
		Рез = запрос.Выполнить().Выгрузить();
		
		ТаблицаГрупп.Загрузить(Рез);	
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = ложь;//15.05.2017

КонецПроцедуры // ПриОткрытии()

//Орлов ++

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
//
Процедура ДействияФормыДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = Кнопка.Текст;
		СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		СписокМакетов = ПолучитьСписокПечатныхФорм();
		СтрокаМакетаВСписке = СписокМакетов.НайтиПоЗначению(Кнопка.Имя);
		Если СтрокаМакетаВСписке <> Неопределено Тогда
			Печать(СтрокаМакетаВСписке.Значение);
			СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
			СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;			
			
		Иначе
			СсылкаВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Кнопка.Имя, "_", "-")));
			Печать(СсылкаВнешнейФормы);
			СтруктураМакета.Макет = СсылкаВнешнейФормы;
			СтруктураМакета.ПредставлениеМакета = Кнопка.Текст;
		КонецЕсли;		
		
		мПечатнаяФормаПоУмолчанию = СтруктураМакета.Макет;
		СохранитьТекущуюКнопкуПечати(ЭтотОбъект.Метаданные().Имя, СтруктураМакета);
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию Для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	НапечататьДокументПоУмолчанию(ЭтотОбъект, глТекущийПользователь, мПечатнаяФормаПоУмолчанию);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

//Орлов --

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

		// Пересчитаем сумму взаиморасчетов.
	//Если КурсВзаиморасчетов = 0 Тогда
	//	ЭлементыФормы.СуммаВзаиморасчетов.Значение = 0;
	//Иначе

	//	ЭлементыФормы.СуммаВзаиморасчетов.Значение = ФорматСумм(ПересчитатьИзВалютыВВалюту(ПолучитьСуммуДокументаСНДС(ЭтотОбъект),  
	//												 ВалютаДокумента, мТекущаяВалютаВзаиморасчетов,
	//												 КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета) , КурсВзаиморасчетов,
	//												 КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов));
	//КонецЕсли;

	//ЭлементыФормы.ИнфНадписьКурса.Заголовок = ПолучитьИнформациюКурсаВалютыСтрокой(
	//	мТекущаяВалютаВзаиморасчетов, 
	//	 КурсВзаиморасчетов,
	//	 КратностьВзаиморасчетов,
	//	 мВалютаРегламентированногоУчета,
	//	 Истина);
	//ОбновитьПодвал();

	//ЭлементыФормы.ОсновнаяПанель.Страницы.Тара        .Заголовок = "Тара ("         + ДокументОбъект.ВозвратнаяТара.Количество() + " поз.)";
	//ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги      .Заголовок = "Услуги ("       + ДокументОбъект.Услуги.Количество()         + " поз.)";
	//ЭлементыФормы.ОсновнаяПанель.Страницы.Товары      .Заголовок = "Товары ("       + ДокументОбъект.Товары.Количество()         + " поз.)";

	//УстановитьВидимость();

	//ОбновлениеОтображенияВФормеПриТайпинге(ЭтаФорма, ЭтаФорма.ЭлементыФормы.КонтактноеЛицо, мОбработкаТайпинга, мТекстТайпинга);
	//
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	Если ТипЗнч(ЗначениеВыбора) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда 
		СтрокаЗаказыПокупателей=ЗаказыПокупателей.Добавить();
		СтрокаЗаказыПокупателей.ЗаказПокупателя=ЗначениеВыбора;
		СтрокаЗаказыПокупателей.КоличествоПозиций=ЗначениеВыбора.Товары.Количество();	
		СтрокаЗаказыПокупателей.КоличествоШтук=ЗначениеВыбора.Товары.Итог("Количество") ;
 	КонецЕсли;
КонецПроцедуры // ОбработкаВыбора()


// Обработчик внешнего события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)


КонецПроцедуры

Процедура ЗаполнитьНомерОчереди()
	ЗаказыОчередь = ЗаказыПокупателей.Выгрузить(); 
	
	ЗаказыОчередь.Колонки.Добавить("КонтрагентКод");
	ЗаказыОчередь.Колонки.Добавить("АдресДоставки");
	ЗаказыОчередь.Колонки.Добавить("Ответственный");
	
	Для каждого стр2 из ЗаказыОчередь Цикл 
		стр2.КонтрагентКод = стр2.ЗаказПокупателя.Контрагент.Код;
		стр2.АдресДоставки = стр2.ЗаказПокупателя.АдресДоставки;
		//Если СокрЛП(стр2.АдресДоставки)="" Тогда //15.11.2016
		//	если стр2.ЗаказПокупателя.НомерТорговойТочкиКонтрагента>0 тогда
		//		точка = справочники.Точки.НайтиПоРеквизиту("Номер", стр2.ЗаказПокупателя.НомерТорговойТочкиКонтрагента,,стр2.ЗаказПокупателя.Контрагент);
		//		стр2.АдресДоставки = точка.Адрес;
		//	КонецЕсли;	
		//КонецЕсли; 
		стр2.Ответственный = стр2.ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо.Код;
	КонецЦикла;	
	ЗаказыОчередь.Свернуть("КонтрагентКод, АдресДоставки, Ответственный", "КоличествоШтук");  //+++ номер ворот !  , НомерВорот
	

	ЗаказыОчередь.Колонки.Добавить("Очередь");
	
	N = ЗаказыПокупателей.Количество();
	Очередь = 0;
	Для каждого стр2 из ЗаказыОчередь цикл		
		Очередь = Очередь + 1;
		стр2.Очередь = Очередь;		
	КонецЦикла;	
	
	Для Каждого СтрЗаказ из ЗаказыПокупателей Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("КонтрагентКод", СтрЗаказ.ЗаказПокупателя.Контрагент.Код);
		
		АдресДоставки = СтрЗаказ.ЗаказПокупателя.АдресДоставки;
		//Если СокрЛП(АдресДоставки)="" Тогда //15.11.2016
		//	если стрЗаказ.ЗаказПокупателя.НомерТорговойТочкиКонтрагента>0 тогда
		//		точка = справочники.Точки.НайтиПоРеквизиту("Номер", СтрЗаказ.ЗаказПокупателя.НомерТорговойТочкиКонтрагента,,СтрЗаказ.ЗаказПокупателя.Контрагент);
		//	   	АдресДоставки = точка.Адрес;
		//	КонецЕсли;	
		//КонецЕсли; 
		ПараметрыОтбора.Вставить("АдресДоставки", АдресДоставки);
        ПараметрыОтбора.Вставить("Ответственный", СтрЗаказ.ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо.Код);

		НайденныеСтроки = ЗаказыОчередь.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество()>0 Тогда
			СтрЗаказ.НомерОчереди = НайденныеСтроки[0].Очередь;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью" формы
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	////////////////\Плотников 03.03.2016 Добавлени вид операции Приход
	Если ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Расход тогда  ///Плотников Новый видДвижения
		
	// Сакулина >> 15.11.2016 перенесено в Форму!
	// Заполняем номер очереди для товаров
	ЗаполнитьНомерОчереди();
	// Сакулина
		
		Если ЗаказыПокупателей.Количество()>0 Тогда
			ТаблицаЗаказыПокупателей=ЗаказыПокупателей.Выгрузить();
			ТаблицаЗаказыПокупателей.Свернуть("ЗаказПокупателя");
			Если ТаблицаЗаказыПокупателей.Количество() <> ЗаказыПокупателей.Количество() Тогда
				ТекстВопроса = "В таблице есть повторяющиеся заказы. Количество рассчитается неверно.";
				Предупреждение(ТекстВопроса );
				Отказ = истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;	
		
		//+++ 07.10.2013
		Для каждого зак1 из ЗаказыПокупателей цикл
			если не зак1.ЗаказПокупателя.Проверен тогда
				сообщить(строка(зак1.ЗаказПокупателя)+" - не проделен! Нельзя отгружать непроделенный заказ!", СтатусСообщения.Внимание);
				Отказ = истина;
			КонецЕсли;
			//+++ 01.12.2016
			если не зак1.ЗаказПокупателя.Статус.Пустая() тогда
				если НЕ (зак1.ЗаказПокупателя.Статус=Перечисления.СтатусыЗаказов.Получен 
					   или зак1.ЗаказПокупателя.Статус=Перечисления.СтатусыЗаказов.ПолученЧастично ) тогда
				сообщить(строка(зак1.ЗаказПокупателя)+" - ждет поступления товаров от поставщиков! Нельзя отгружать такой заказ!", СтатусСообщения.Внимание);
				Отказ = истина;
				конецЕсли;
			КонецЕсли;

			//+++ 29.05.2018 закрывают задание не проведя перемещения!
			Если Выполнено и ЗначениеЗаполнено(зак1.Реализация) тогда
				Если зак1.Реализация.Проведен=Ложь тогда
				сообщить(строка(зак1.Реализация)+" - НЕ проведен! Нельзя закрывать Задание не проведя перемещения!", СтатусСообщения.Внимание);
				Отказ = истина;
				КонецЕсли;	
			КонецЕсли;
			
		КонецЦикла;	
		
		ПолучитьАссортимент();
		ПересчетКоличестваИСуммПоЗаказам();
		
		//если проводат из формы не закрывая ее - закрываем доступ к списку заказов и реализаций
	   доступноИзменениеДокументов = (РежимЗаписи = РежимЗаписиДокумента.Проведение);
	   ЭлементыФормы.ЗаказыПокупателей.Колонки.ЗаказПокупателя.ТолькоПросмотр = доступноИзменениеДокументов;	
	//   ЭлементыФормы.ЗаказыПокупателей.Колонки.Реализация.ТолькоПросмотр 	  = доступноИзменениеДокументов;
	//КонецЕсли;
	
	яштСменаПользователя(ЭтотОбъект, ЭтаФорма, глТекущийПользователь);
	
	Если Модифицированность() Тогда
		ДатаМодификацииДокумента =ТекущаяДата();
		Если ЗначениеНеЗаполнено(ДатаДокументаПервая) Тогда
			ДатаДокументаПервая=ДатаМодификацииДокумента;
		КонецЕсли;	
	КонецЕсли;
	
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Приход тогда
	    ПолучитьАссортимент();
		ПересчетКоличестваИСуммПоЗаказам();
		
		//если проводат из формы не закрывая ее - закрываем доступ к списку заказов и реализаций
	   доступноИзменениеДокументов = (РежимЗаписи = РежимЗаписиДокумента.Проведение);
	   ЭлементыФормы.ЗаказыПокупателей.Колонки.ЗаказПокупателя.ТолькоПросмотр = доступноИзменениеДокументов;	
	//   ЭлементыФормы.ЗаказыПокупателей.Колонки.Реализация.ТолькоПросмотр 	  = доступноИзменениеДокументов;
	//КонецЕсли;
	
	яштСменаПользователя(ЭтотОбъект, ЭтаФорма, глТекущийПользователь);
	
	Если Модифицированность() Тогда
		ДатаМодификацииДокумента =ТекущаяДата();
		Если ЗначениеНеЗаполнено(ДатаДокументаПервая) Тогда
			ДатаДокументаПервая=ДатаМодификацииДокумента;
		КонецЕсли;	
	КонецЕсли;

    КонецЕсли;
 	
КонецПроцедуры //ПередЗаписью


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)
	//ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	//ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	 
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа Для контроля номера документа
	
КонецПроцедуры // ДатаПриИзменении()


Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		Если ВидОперации = Перечисления.ВидыДвиженийПриходРасход[Кнопка.Имя] Тогда
			Возврат;
		КонецЕсли; 
		ВидОперации = Перечисления.ВидыДвиженийПриходРасход[Кнопка.Имя];
	Иначе
		Возврат;
	КонецЕсли;
	
	//Плотников 02.03.2016 Вид операции Приход для обратных перемещений со склада АнгарИ
	Если ВидОперации=Перечисления.ВидыДвиженийПриходРасход.Приход Тогда
		Предупреждение("Можно вводить документы только с видом операции РАСХОД",10);
		ВидОперации=Перечисления.ВидыДвиженийПриходРасход.Расход;
	КонецЕсли;	
	
	// Отобразить в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
 	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)
	
ФормаПодбора = Документы.ЗаказПоставщику.ПолучитьФормуСписка(,ЭтаФорма);
ФормаПодбора.РежимВыбора=Истина;
ФормаПодбора.ЗакрыватьПриВыборе = Ложь; 
Если ЗначениеЗаполнено(Контрагент) Тогда
	ФормаПодбора.ДокументСписок.Отбор.Контрагент.Значение=Контрагент;
	ФормаПодбора.ДокументСписок.Отбор.Контрагент.Использование=Истина;
КонецЕсли;
//Если ЗначениеЗаполнено(Дата) Тогда
//	ФормаПодбора.ДокументСписок.Отбор.ДатаПоступления.Значение=НачалоДня(дата);
//	ФормаПодбора.ДокументСписок.Отбор.ДатаПоступления.Использование=Истина;
//КонецЕсли;	
ФормаПодбора.Открыть(); 	


КонецПроцедуры

Процедура КоманднаяПанельТоварыДействиеПодбор1(Кнопка)
	
	Если ЭтотОбъект.Проведен тогда
		Предупреждение("Задание на отгрузку уже выполняется!
						|Уже поздно менять состав заказов!", 30);
		Возврат;
	КонецЕсли;	
	
	
ФормаПодбора = Документы.ЗаказПокупателя.ПолучитьФормуСписка(,ЭтаФорма);
ФормаПодбора.РежимВыбора=Истина;
ФормаПодбора.ЗакрыватьПриВыборе = Ложь; 
Если ЗначениеЗаполнено(Контрагент) Тогда
	ФормаПодбора.ДокументСписок.Отбор.Контрагент.Значение=Контрагент;
	ФормаПодбора.ДокументСписок.Отбор.Контрагент.Использование=Истина;
КонецЕсли;
Если ВводитьТолькоПеремещение Тогда
	ФормаПодбора.ДокументСписок.Отбор.ВводитьТолькоПеремещение.Значение = истина;
	ФормаПодбора.ДокументСписок.Отбор.ВводитьТолькоПеремещение.Использование=Истина;
КонецЕсли;

//-----------------всегда только не транзитные заказы!------------------------
	//ФормаПодбора.ДокументСписок.Отбор.Транзит.Значение = ложь;
	//ФормаПодбора.ДокументСписок.Отбор.Транзит.Использование=Истина;

ФормаПодбора.Открыть(); 	
	
КонецПроцедуры

Процедура ЗаказыПокупателейПриПолученииДанных(Элемент, ОформленияСтрок)
		
//==============================================================================================================	
	Для Каждого Строка Из ОформленияСтрок Цикл
		
		Если НЕ Строка.ДанныеСтроки.ЗаказПокупателя.пустая() Тогда
			Строка.Ячейки.Контрагент.Значение= Строка.ДанныеСтроки.ЗаказПокупателя.Контрагент;
			Строка.Ячейки.Договор.значение   = Строка.ДанныеСтроки.ЗаказПокупателя.ДоговорКонтрагента;	    			
			Строка.Ячейки.Менеджер.Значение  = Строка.ДанныеСтроки.ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо;
		КонецЕсли;
		
	 	инд= 3;
		Если Не ЗначениеНеЗаполнено(Строка.ДанныеСтроки.Реализация) Тогда
			Строка.Ячейки.КартинкаРеализации.ОтображатьКартинку = Истина;
			Если Строка.ДанныеСтроки.Реализация.пометкаУдаления Тогда
				инд = 1;
			ИначеЕсли Строка.ДанныеСтроки.Реализация.проведен Тогда
				инд = 0;
			ИначеЕсли НЕ Строка.ДанныеСтроки.Реализация.проведен Тогда
				инд = 2;
			КонецЕсли;	
		КонецЕсли;	
			Строка.Ячейки.КартинкаРеализации.ОтображатьКартинку = Истина;
			Строка.Ячейки.КартинкаРеализации.ИндексКартинки = инд;
			
			
		Строка.Ячейки.ДляПеремещения.ОтображатьТекст=ложь;
		Строка.Ячейки.ДляПеремещения.ОтображатьФлажок=истина;
		Строка.Ячейки.ДляПеремещения.Флажок = Строка.ДанныеСтроки.ЗаказПокупателя.ВводитьТолькоПеремещение;
		
		Если Строка.Ячейки.Вес.видимость тогда
		Строка.Ячейки.Вес.ОтображатьТекст=истина;
		Строка.Ячейки.Вес.Текст = ?(Строка.ДанныеСтроки.Реализация=неопределено или Строка.ДанныеСтроки.Реализация.пустая(), "", 
									формат(Строка.ДанныеСтроки.Реализация.ОбщийВес,"ЧДЦ=0") ); //до кг	
		КонецЕсли;
		
		
		Если Строка.ДанныеСтроки.КоличествоШтук<>Строка.ДанныеСтроки.КоличествоШтукОтгружено тогда
			 Строка.ЦветТекста = webЦвета.Красный;
			 Если Строка.ДанныеСтроки.КоличествоШтук<Строка.ДанныеСтроки.КоличествоШтукОтгружено тогда  //+++ 16.07.2013
			   Строка.Шрифт = новый Шрифт(Строка.Шрифт,,,ИСТИНА); //жирный!
			   сообщить(строка(Строка.ДанныеСтроки.НомерСтроки)+" строка! Внимание! Количество отгружаемого товара больше заказанного на "+строка(Строка.ДанныеСтроки.КоличествоШтукОтгружено - Строка.ДанныеСтроки.КоличествоШтук)+" шт. !!!", СтатусСообщения.Внимание);
			 КонецЕсли;
		КонецЕсли;
			
	КонецЦикла;

		
КонецПроцедуры

//===============общие процедуры всех страниц=======================

//получение списка ВидТовара по всей заказанной номенклатуре
// работает только если распроведены реализации!!!
процедура ПолучитьАссортимент()
	Если ЗаказыПокупателей.Количество()=0 тогда 
		Ассортимент = "";
		возврат;
	КонецЕсли;	
		
	СтрокаАссортимент="";
	Запрос=Новый Запрос;
	//Если ВидОперации=Перечисления.ВидыДвиженийПриходРасход.Расход Тогда
		Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
		             |	ЗаказыПокупателейОстатки.Номенклатура.ВидТовара КАК ВидТовара
		             |ИЗ
		             |	РегистрНакопления.ЗаказыПокупателей.Остатки(
					 |, ЗаказПокупателя В (&СписокЗаказов)) КАК ЗаказыПокупателейОстатки";
		Запрос.УстановитьПараметр("СписокЗаказов",ЗаказыПокупателей.ВыгрузитьКолонку("ЗаказПокупателя"));
		Выборка=Запрос.Выполнить().Выбрать();
	//КонецЕсли;
	Пока Выборка.Следующий() Цикл
		СтрокаАссортимент=?(СтрокаАссортимент<>"",СтрокаАссортимент+", "+Строка(Выборка.ВидТовара),Строка(Выборка.ВидТовара));
	КонецЦикла;
	Ассортимент = СтрокаАссортимент;
	
КонецПроцедуры

//сортировка по порядку из ГруппыСкладов и по складу - по алфавиту
//перемещение групп складов по порядку из ГруппыСкладов 
//
процедура СортироватьПоПорядку(Товары) 
	
	  // просто всегда по алфавиту
	  Товары.Сортировать("ГруппаСкладов, Склад, Номенклатура");
	  
	  //+++ 28.10.2014 - автосортировка...
	  //Если Товары.Итог("КоличествоЗаказано")<>ГруппыСкладов.Итог("КоличествоЗаказано") Тогда
	  //	Предупреждение("Несоответствие количества заказанного товара
	  //					  |в таблицах ""Порядок отгрузки"" и ""Товары""!
	  //  				  |Выполните перезаполнение товаров по порядку отгрузки.");
	  //	Возврат;
	  //КонецЕсли;	  
	  //---------------надо передвинуть группами складов------------
	  перваяСтрока = 0;
	  Для n=0 По ГруппыСкладов.Количество()-1 Цикл
		перваяСтрокаГруппы = Товары.Найти(ГруппыСкладов[n].ГруппаСкладов, "ГруппаСкладов");
		Если перваяСтрокаГруппы=Неопределено Тогда 
			продолжить; 
		КонецЕсли;	
		номерПервойСтроки = перваяСтрокаГруппы.НомерСтроки - 1;
		Если  номерПервойСтроки > перваяСтрока Тогда // начинаем сдвиг вперед
			i=0; //сдвиг от номерПервойСтроки 
			СтрокаВГруппе = Истина;
			пока СтрокаВГруппе Цикл
			Товары.Сдвинуть(номерПервойСтроки+i, перваяСтрока - номерПервойСтроки );	
			i=i+1; 
				Если номерПервойСтроки+i<Товары.Количество() Тогда
					СтрокаВГруппе = (Товары[номерПервойСтроки+i].ГруппаСкладов = ГруппыСкладов[n].ГруппаСкладов);
				Иначе
				    СтрокаВГруппе = ложь;
				КонецЕсли;	
			КонецЦикла;	
			перваяСтрока = перваяСтрока+i;
		Иначе  // расчет конца группы
			i=0;
			СтрокаВГруппе = Истина; 
			пока СтрокаВГруппе Цикл
			i=i+1; 
				Если номерПервойСтроки+i<Товары.Количество() Тогда
					СтрокаВГруппе = (Товары[номерПервойСтроки+i].ГруппаСкладов = ГруппыСкладов[n].ГруппаСкладов);
				Иначе
				    СтрокаВГруппе = ложь;
				КонецЕсли;	
			КонецЦикла;	
			перваяСтрока = перваяСтрока+i;
		КонецЕсли;	
	  КонецЦикла;	  
	  
//------------------------Дополнительная сортировка по ВидТовара только Для Основного Склада------------------------------	  
//перваяСтрокаГруппы = Товары.Найти(справочники.ГруппыСкладов.ОсновнойСклад, "ГруппаСкладов");
//	
//Если перваяСтрокаГруппы <> Неопределено Тогда		
//   номерПервойСтроки = перваяСтрокаГруппы.НомерСтроки - 1;
		
//--------------в отдельной таблице - отсортируем по ВидуТовара: Диски/Шины/АКБ
табЗнач = Товары.Выгрузить();
табЗнач.Колонки.Добавить("ВидТовараПорядок");
табЗнач.Колонки.Добавить("Приоритет");

i=0; N=табЗнач.Количество();
пока i<N Цикл
	//Если табЗнач[i].ГруппаСкладов = справочники.ГруппыСкладов.ОсновнойСклад Тогда
	    Приоритет = ГруппыСкладов.Найти(табЗнач[i].ГруппаСкладов,"ГруппаСкладов").Приоритет;
		табЗнач[i].Приоритет = Приоритет;
		видТов = табЗнач[i].Номенклатура.ВидТовара;
		табЗнач[i].ВидТовараПорядок = ?(видТов=перечисления.ВидыТоваров.Прочее, "яПрочее",
							?(видТов=перечисления.ВидыТоваров.АКБ, "яАкб",
							  ?(видТов=перечисления.ВидыТоваров.АвтоЗапчасти, "яяАвтоЗапчасти",
							    ?(видТов=перечисления.ВидыТоваров.Аксессуары, "яАксессуары", 
								  ?(видТов=перечисления.ВидыТоваров.РекламнаяПродукция, "яяяРеклама", строка(видТов)
							 ) ) ) )      );
	    i=i+1;
	//Иначе
	//	табЗнач.Удалить(i); N=N-1;
	//КонецЕсли;
КонецЦикла;
 табЗнач.Сортировать("Приоритет, ВидТовараПорядок, Склад, Номенклатура"); // Диски, Шины, яАКБ

//-----------------вставляем обратно--------------------------	
Для j=0 по N-1 Цикл
	ЗаполнитьЗначенияСвойств(Товары[j], табЗнач[j] );
КонецЦикла;

//КонецЕсли;



//-----------Дополнительная сортировка по Порядку ДЛЯ ВСЕХ складов с Адресным хранением!------------------------------	  
масКодов = новый массив;  //+++ 14.07.2016 - сортировка по Порядку Адреса хранения...
Если не Подразделение.ОбособленноеПодразделение	тогда
	масКодов.Добавить("01"); // 5000
	масКодов.Добавить("08"); // 8000
	масКодов.Добавить("06"); // АКБ, Аксессуары
	масКодов.Добавить("10"); // Ангары 1,2,3
    масКодов.Добавить("15"); // Ангары 5,6,7
иначе // для филиалов	
	масКодов.Добавить("30");  //РнД: 4000
	масКодов.Добавить("32");  //РнД: 6000
	
	масКодов.Добавить("27"); //СПБ-Ангар
КонецЕсли;


Для нн=0 по масКодов.Количество()-1 цикл 
	грСкладов5000 = справочники.ГруппыСкладов.НайтиПоКоду(масКодов[нн]);
	перваяСтрокаГруппы = Товары.Найти(грСкладов5000, "ГруппаСкладов");
	
Если перваяСтрокаГруппы <> Неопределено Тогда		
	номерПервойСтроки = перваяСтрокаГруппы.НомерСтроки - 1;
		
//--------------в отдельной таблице - отсортируем по ВидуТовара: Диски/Шины/АКБ
табЗнач = Товары.Выгрузить();
табЗнач.Колонки.Добавить("Порядок");
i=0; 
пока i<табЗнач.Количество() Цикл
	Если табЗнач[i].ГруппаСкладов =грСкладов5000 Тогда
		Если табЗнач[i].АдресХранения.Пустая() тогда 
			порядок = 0; // без адресов сначала...
		Иначе порядок = табЗнач[i].АдресХранения.Порядок;
		КонецЕсли;	
		табЗнач[i].Порядок = порядок;
	    i=i+1;
	Иначе
		табЗнач.Удалить(i); 
	КонецЕсли;
КонецЦикла;

 N=табЗнач.Количество();
 Если N>1 тогда
 табЗнач.Сортировать("Склад, Порядок");//сначала Склады БЕЗ ячеек по названию, затем по порядку ячеек... 
	#Если Клиент тогда
	 сообщить("Отсортировано "+строка(N)+" строк товаров группы складов "+Строка(грСкладов5000)+" по полю 'Порядок' (Адресов хранения)", СтатусСообщения.Информация);
	#КонецЕсли
  	Для j=0 по N-1 Цикл//-----------------вставляем обратно--------------------------	
 	 ЗаполнитьЗначенияСвойств(Товары[номерПервойСтроки + j], табЗнач[j] );
	КонецЦикла;
 КонецЕсли;

КонецЕсли;

КонецЦикла;//масКодов

КонецПроцедуры


Процедура КонтрагентПриИзменении(Элемент)
	
	Если ТипЗнч(Элемент.Значение)=тип("СправочникСсылка.Контрагенты") тогда
		Если ЗначениеЗаполнено(Элемент.Значение) тогда
		РегионКонтрагента=ПолучитьРегионКонтрагента();	
			Если РегионКонтрагента="" Тогда
			РегионКонтрагента=ПолучитьРегионКонтрагента(Ложь);
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	

КонецПроцедуры


//-----------------------Заполняет остатками НЕТРАНЗИТНЫХ  заказов-------------------------------
//
Процедура КоманднаяПанельТоварыЗаполнитьНеотгруженнымиЗаказами(Кнопка)
	
	Если Контрагент.Пустая() тогда
		Предупреждение("Не выбран контрагент!
		|Заполнение - невозможно!");
		возврат;
	КонецЕсли;	
		
		
	Если ЗаказыПокупателей.Количество()>0 Тогда
		
		Если ЭтотОбъект.Проведен тогда
		Предупреждение("    Задание на отгрузку уже выполняется!
						|Нельзя менять состав заказов - уже идет отгрузка по складам!", 30);
		отказ = Истина;
		КонецЕсли;	
		
	ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		ЗаказыПокупателей.Очистить();
	КонецЕсли;	

	
	Запрос=Новый Запрос;
	Запрос.Текст="
				 | ВЫБРАТЬ  
				 |	ТЧЗаказы.ЗаказПокупателя
				 
				 |Поместить ВТ_ЗаказыУжеГрузятся
				 |ИЗ
				 |	Документ.ЗаданиеНаОтгрузку.ЗаказыПокупателей КАК ТЧЗаказы
				 |ГДЕ
				 |	НЕ ТЧЗаказы.Ссылка.ПометкаУдаления
				 |	И ТЧЗаказы.Ссылка.Дата >= &ДатаНач
				 |	И ТЧЗаказы.ЗаказПокупателя.Контрагент = &Контрагент
				 |		//отборПоДатеОтгрузки   И ТЧЗаказы.ЗаказПокупателя.ДатаОтгрузки = &ДатаОтгрузки1
				 |		//отборПоПроверенным    И ( ЗаказПокупателя.Комментарий подобно (&Проверен)  или ЗаказПокупателя.Комментарий подобно (&Проверен1) или ЗаказПокупателя.Комментарий подобно (&Проверен2) )

	 
				 |ОБЪЕДИНИТЬ ВСЕ
				 | ВЫБРАТЬ
				 |	ТЧЗаказы.ЗаказПокупателя
				 
				 |ИЗ
				 |	Документ.ЗаданиеНаПеремещение.ЗаказыПокупателей КАК ТЧЗаказы
				 |ГДЕ
				 // задания на перемещения блокируют отгрузку ДО выполнения перемещения!
				//+++ 10.06.2015    |  НЕ ТЧЗаказы.Ссылка.Выполнено
				//15.02.2018 - исправлено!
				 |	ТЧЗаказы.Ссылка.ПометкаУдаления = ЛОЖЬ
				 |	И    ТЧЗаказы.Ссылка.Дата >= &ДатаНач
				 |	И ТЧЗаказы.ЗаказПокупателя.Контрагент = &Контрагент
				 |		//отборПоДатеОтгрузки   И ТЧЗаказы.ЗаказПокупателя.ДатаОтгрузки = &ДатаОтгрузки1
				 |		//отборПоПроверенным    И ( ЗаказПокупателя.Комментарий подобно (&Проверен)  или ЗаказПокупателя.Комментарий подобно (&Проверен1) или ЗаказПокупателя.Комментарий подобно (&Проверен2) )

		
				 |;
				 |/////////////////////////////////////////////////////////////////////////
				 |ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	А.ЗаказПокупателя,
				 |	А.Менеджер,
	             |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ А.Номенклатура) КАК КоличествоПозиций,
	             |	СУММА(А.КоличествоОстаток) КАК КоличествоШтук
			    |ИЗ
	             |	(ВЫБРАТЬ
	             |		ЗаказыПокупателейОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
				 |		ЗаказыПокупателейОстатки.ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо как Менеджер,
	             |		ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	             |		ЗаказыПокупателейОстатки.КоличествоОстаток КАК КоличествоОстаток
	              |	ИЗ
	             |		РегистрНакопления.ЗаказыПокупателей.Остатки( ,
	             |				ДоговорКонтрагента.Владелец = &Контрагент
	             |					И НЕ ЗаказПокупателя.Транзит
	             |					И ЗаказПокупателя.ВводитьТолькоПеремещение = &ВводитьТолькоПеремещение
				 //++++ исключение всех заказов, которые уже есть в заданиях на отгрузку (или перемещениях!)...
				 |		И НЕ ЗаказПокупателя В (выбрать различные ЗаказПокупателя из ВТ_ЗаказыУжеГрузятся)
				 
				 |		//отборПоДатеОтгрузки    И ЗаказПокупателя.ДатаОтгрузки = &ДатаОтгрузки1
				 |		//отборПоПроверенным    И ( ЗаказПокупателя.Комментарий подобно (&Проверен)  или ЗаказПокупателя.Комментарий подобно (&Проверен1) или ЗаказПокупателя.Комментарий подобно (&Проверен2) )

	             |					И ЗаказПокупателя.Проверен) КАК ЗаказыПокупателейОстатки
				 |) КАК А
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	А.ЗаказПокупателя, А.Менеджер 
	             |
	             |УПОРЯДОЧИТЬ ПО
				 //Контрагент 1
	             |	А.Менеджер,
	             |	ВЫРАЗИТЬ(А.ЗаказПокупателя.АдресДоставки КАК СТРОКА(1000));
				 |Уничтожить ВТ_ЗаказыУжеГрузятся;";
				 
				 
	//отгрузки не более 14 дней... 		 
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня( мин( ?(ЭтотОбъект.Дата='00010101', ТекущаяДата(), ЭтотОбъект.Дата), ТекущаяДата() ))-14 * 86400 );
								 
	ДатаОтгрузки1 = '00010101';
	Если ВвестиДату( ДатаОтгрузки1, "Введите Дату отгрузки") тогда
		Запрос.Текст=стрЗаменить(Запрос.Текст,	"//отборПоДатеОтгрузки", "");
		Запрос.УстановитьПараметр("ДатаОтгрузки1",ДатаОтгрузки1);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВводитьТолькоПеремещение",ВводитьТолькоПеремещение);
	
	Если Контрагент = справочники.Контрагенты.НайтиПоКоду("П000382") тогда
		Запрос.Текст=стрЗаменить(Запрос.Текст,	"//отборПоПроверенным", "");
         Запрос.УстановитьПараметр("Проверен",  "%общ. заказ%"); //+++ 16.04.2015 только общие по направлениям?!
		 Запрос.УстановитьПараметр("Проверен1",  "%объединенный заказ:%");  //обычные объединения + 293, 295 обработки
         Запрос.УстановитьПараметр("Проверен2", "%Подтвержден;%"); //+++    //просто подтвержденный
		 Запрос.УстановитьПараметр("ВводитьТолькоПеремещение",Ложь);//+++ 09.06.2015
	КонецЕсли;
		
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(Дата, ВидГраницы.Исключая) );
				 
	рез=Запрос.Выполнить();
	Выборка = рез.Выбрать();
	Пока Выборка.Следующий() Цикл
		 СтрокаЗаказПокупателя=ЗаказыПокупателей.Добавить();
		 ЗаполнитьЗначенияСвойств(СтрокаЗаказПокупателя,Выборка);
	 КонецЦикла;	
	 
	Предупреждение(?(Выборка.Количество()=0, "Не найдено ни одного заказа клиента",
	"Добавлено "+строка(Выборка.Количество())+" заказов клиента")
	+?(ДатаОтгрузки1='00010101',"без учета даты отгрузки!", 
	" на дату отгрузки "+формат(ДатаОтгрузки1,"ДЛФ=DD")  ) , 30);
	
КонецПроцедуры


Процедура ЗаказыПокупателейЗаказПокупателяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаЗаказы=ЭлементыФормы.ЗаказыПокупателей.ТекущиеДанные;
	Если НЕ СтрокаЗаказы.ЗаказПокупателя.пустая() Тогда
		
		Если СтрокаЗаказы.ЗаказПокупателя.транзит тогда
			Сообщить("Задание на отгрузку - предназначено только для нетранзитных заказов!", СтатусСообщения.Внимание);
			СтрокаЗаказы.Реализация = документы.РеализацияТоваровУслуг.ПустаяСсылка();
		КонецЕсли;	
		
		Если СтрокаЗаказы.Реализация <> документы.РеализацияТоваровУслуг.ПустаяСсылка() тогда
			Если СтрокаЗаказы.Реализация.Сделка<>СтрокаЗаказы.ЗаказПокупателя тогда // если всё же это тот же самый заказ - не меняем!
			Предупреждение("Нельзя использовать ту же самую реализацию для другого заказа!");	
			СтрокаЗаказы.Реализация = документы.РеализацияТоваровУслуг.ПустаяСсылка(); // после выбора заказа - всегда чистим реали
			
			Предупреждение("При изменении списка заказов - требуется полное перезаполнение Порядка отгрузки и списка Товаров!");	
			ГруппыСкладов.Очистить();
			ТабЗначРезерв.Строки.Очистить();
			Товары.Очистить();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
 
	ПолучитьАссортимент();
	ПересчетКоличестваИСуммПоЗаказам();

КонецПроцедуры

Процедура ЗаказыПокупателейЗаказПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	//СтандартнаяОбработка=ЛОЖЬ;
  Если НЕ ВводитьИтогиВручную Тогда	
		// Свертка заказов покупателей
		Если ЗаказыПокупателей.Количество()>0 Тогда
			ТаблицаЗаказыПокупателей=ЗаказыПокупателей.Выгрузить();
			ТаблицаЗаказыПокупателей.Свернуть("ЗаказПокупателя");
			Если ТаблицаЗаказыПокупателей.Количество() <> ЗаказыПокупателей.Количество() Тогда
				ТекстВопроса = "В таблице Заказов покупателей - есть повторяющиеся заказы. Количество рассчитается неверно.";
				Предупреждение(ТекстВопроса );
			КонецЕсли;
		КонецЕсли;	
				
		ПолучитьАссортимент();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВводитьКонтрагентаВручнуюПриИзменении(Элемент)
	
	Если ВводитьКонтрагентаВручную Тогда
		Контрагент="";
	Иначе
		Контрагент=Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

//=======Основная Процедура создания реализаций / вн.заказов-> перемещений ============================
//+++ 03.06.2015 - полностью из ЗаданияНаОтгрузку
//
Процедура КоманднаяПанельТоварыСоздатьРеализацию(Кнопка)
	
////Миронычев	
//15.08.17 Смирнов, не понял смысла
//Если товары.Итог("КоличествоЗаказано") = товары.итог("Количество") + ТоварыНеНайденные.итог("Количество")   тогда
	//	сообщить(" Ошибка, общее количество заказнных позиций несовпадает с суммой найденных и ненайденных позиций", СтатусСообщения.Внимание);
	//	Возврат;
	//КонецЕсли;
////КонецМиронычев

	Если ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Расход Тогда   /////////\\\\\Плотников Новый вид движения
	
	Если ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Приход тогда
		Предупреждение("""Создание реализаций"" - предназначено только для Вида операции - Расход!");
		возврат;
	КонецЕсли;
	
	Если ЗаявкиНаБрак.Количество()<> 0 и ЗаказыПокупателей.Количество() = 0 и ГруппыСкладов.Количество() = 0  Тогда
		//Не проверяем
	Иначе
		
		Если Товары.Количество() = 0 Тогда
			Сообщить("Таблица товаров еще не заполнена!", СтатусСообщения.Важное);
			ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Товары;
			Возврат;
		КонецЕсли;
		
		Если Товары.Итог("Количество")=0 Тогда
			Сообщить("В таблице товаров: Количество отгружено - не заполнено!", СтатусСообщения.Важное);
			ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Товары;
			Возврат;
		КонецЕсли;
		
		Если ГруппыСкладов.Количество()=0 тогда
			Сообщить("Таблица ""Порядок отгрузки"" - еще не заполнена!", СтатусСообщения.Важное);
			ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ГруппыСкладов;
			Возврат;
		КонецЕсли;
		
		Если ГруппыСкладов.Итог("Приоритет")=0 тогда
			Сообщить("Не выбран порядок в таблице ""Порядок отгрузки""!", СтатусСообщения.Важное);
			ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ГруппыСкладов;
			Возврат;
		КонецЕсли;
		
		Если Товары.Итог("КоличествоЗаказано")<>ГруппыСкладов.Итог("КоличествоЗаказано") тогда
			Предупреждение("Несоответствие количества заказанного товара
			|в таблицах ""Порядок отгрузки"" и ""Товары""!
			|Выполните перезаполнение товаров по порядку отгрузки.");
			ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ГруппыСкладов;
			возврат;
		КонецЕсли;
		
		Если ЗаявкиНаБрак.Количество()>0 тогда
			Ответ = Вопрос("В задании есть рекламационный товар на закладке ""4. Возврат брака"",
			| если этот товар был перемещен, тогда нуно обязательно заполнить колонку ""Перемещено"",
			| заполнить ее сейчас?", РежимДиалогаВопрос.ДаНет);
			Если (Ответ = КодВозвратаДиалога.да) Тогда
				ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Получить(3);     
				ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ТекущаяСтраница;
				Возврат;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	Если естьРеализации(истина) тогда
		Сообщить("Перед заполнением реализаций - выполните Отмену проведения документов!", СтатусСообщения.Важное);
	    возврат;
	КонецЕсли;
	
	КонецЕсли; /////////\\\\\Плотников Новый вид движения
	
	Если ЭтаФорма.Модифицированность Тогда
		ЭтотОбъект.Записать(); //принудительно!  Для проведенного документа - перезаполняется Резерв!
	КонецЕсли;
	
	Если НЕ СоздаватьПеремещенияКриал тогда  //+++ 14.05.2013 сначала отменим проведение всех перемещений
	//	ПересчетКоличестваИСуммПоЗаказам();
		ВыполнитьДопПеремещениеКриал(ЭтотОбъект);
	КонецЕсли;
	
//--------------Виртуальная таблица значений по факт. количеству------------------------
	ТЗОтгружено = Новый ТаблицаЗначений;
	ТЗОтгружено.Колонки.Добавить("Номенклатура");
	ТЗОтгружено.Колонки.Добавить("Количество");
	ТЗОтгружено.Колонки.Добавить("Склад");
	//--------------Виртуальная таблица значений по факт. количеству------------------------
	ТЗОтгруженоАХ = ТЗОтгружено.Скопировать();
	ТЗОтгруженоАХ.Колонки.Добавить("АдресХранения");
	ТЗОтгруженоАХ.Колонки.Добавить("Порядок");
	
//===============================================Главная таблица отгруженного товара=================================	
	Для Каждого Строка Из Товары Цикл
		Если Строка.Количество > 0 Тогда
			НоваяСтрока = ТЗОтгружено.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, строка);
			// 5000 и любой склад с Адресным хранением (не Строка.склад.пустая() так как в запросе такое исключаем!)
			Если НЕ Строка.склад.ЭтоГруппа и Строка.склад.АдресноеХранение Тогда  
				НоваяСтрокаАХ = ТЗОтгруженоАХ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаАХ, строка);
				НоваяСтрокаАХ.Порядок = НоваяСтрокаАХ.АдресХранения.Порядок;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;           
		
//--------------Виртуальная таблица значений по заказанному количеству------------------------
	ТЗЗаказано = Новый ТаблицаЗначений;
	ТЗЗаказано.Колонки.Добавить("Номенклатура");
	ТЗЗаказано.Колонки.Добавить("Количество");
	ТЗЗаказано.Колонки.Добавить("Цена");
	
	//группировка по адресам хранения 5000, 
	//Исключение повторения пары: номенклатура - склад
	ТЗОтгружено.Свернуть("Номенклатура, Склад", "Количество");
	ТЗОтгруженоАХ.Сортировать("Порядок"); //сначала 5000 потом 8000 //+++31.03.2014
	
	// построим таблицу из регистра по заказам
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ТЧЗаказы.НомерСтроки КАК НомерСтроки,
		               |	ТЧЗаказы.ЗаказПокупателя КАК ЗаказПокупателя,
		               |	ТЧЗаказы.Реализация КАК Реализация
		               |ПОМЕСТИТЬ ВТ_Заказы
		               |ИЗ
		               |	&ТЧЗаказыПокупателей КАК ТЧЗаказы
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТЧЗаказыПокупателей.НомерСтроки КАК НомерСтрокиЗаказа,
		               |	ТЧЗаказыПокупателей.ЗаказПокупателя КАК ЗаказПокупателя,
		               |	ТЧЗаказыПокупателей.Реализация КАК Реализация,
		               |	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
		               |	ЕСТЬNULL(РезервНаСкладахОстатки.Количество, 0) КАК Количество,
		               |	ВЫБОР
		               |		КОГДА ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) = 0
		               |			ТОГДА 0
		               |		ИНАЧЕ ЕСТЬNULL(ЗаказыПокупателейОстатки.СуммаВзаиморасчетовОстаток, 0) / ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0)
		               |	КОНЕЦ КАК Цена
		               |ИЗ
		               |	ВТ_Заказы КАК ТЧЗаказыПокупателей
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(
		               |				,
		               |				ЗаказПокупателя В
		               |					(ВЫБРАТЬ
		               |						ВТ_Заказы.ЗаказПокупателя
		               |					ИЗ
		               |						ВТ_Заказы)) КАК ЗаказыПокупателейОстатки
		               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |				резервы.ЗаказПокупателя КАК ЗаказПокупателя,
		               |				резервы.Номенклатура КАК Номенклатура,
		               |				СУММА(резервы.Количество) КАК Количество
		               |			ИЗ
		               |				РегистрНакопления.РезервНаСкладах КАК резервы
		               |			ГДЕ
		               |				резервы.Регистратор = &Регистратор
		               |			
		               |			СГРУППИРОВАТЬ ПО
		               |				резервы.ЗаказПокупателя,
		               |				резервы.Номенклатура) КАК РезервНаСкладахОстатки
		               |			ПО ЗаказыПокупателейОстатки.ЗаказПокупателя = РезервНаСкладахОстатки.ЗаказПокупателя 
		               |				И  ЗаказыПокупателейОстатки.Номенклатура = РезервНаСкладахОстатки.Номенклатура
		               |		ПО ТЧЗаказыПокупателей.ЗаказПокупателя = ЗаказыПокупателейОстатки.ЗаказПокупателя
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	НомерСтрокиЗаказа,
		               |	Номенклатура
		               |ИТОГИ
		               |	МИНИМУМ(НомерСтрокиЗаказа),
		               |	СУММА(Количество)
		               |ПО
		               |	ЗаказПокупателя
		               |АВТОУПОРЯДОЧИВАНИЕ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_Заказы";

			Запрос.УстановитьПараметр("Регистратор", ссылка );  //25.12.2015
			 
		//+++ 14.07.2014 - отдельный приоритет для ФормулаАвтоПлюс  // анализ в Запросе - невозможен!
		ТЧЗаказыПокупателей = ЗаказыПокупателей.Выгрузить();
		ФормулаАвтоПлюс = справочники.Контрагенты.НайтиПоКоду("92797");
		 для каждого стр1 из ТЧЗаказыПокупателей цикл
			 Если стр1.ЗаказПокупателя.Контрагент = ФормулаАвтоПлюс тогда
				 стр1.НомерСтроки = 0;     //высший приоритет при отгрузке!
			 КонецЕсли;
		 КонецЦикла;	
		ТЧЗаказыПокупателей.Свернуть("ЗаказПокупателя, Реализация", "НомерСтроки"); // 1 заказ не может быть 2 раза?!
		Запрос.УстановитьПараметр("ТЧЗаказыПокупателей", ТЧЗаказыПокупателей );
		//+++)
		
		//Запрос.УстановитьПараметр("МоментВремени",Новый граница(Дата, ВидГраницы.Исключая));
		результат = Запрос.Выполнить(); // основной запрос выполяется здесь сразу по всем заказам - получаем ЗАКАЗАННУЮ Номенклатуру
		
		СтрокаЗаказа = результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
		
//-------------------------------------Основной Цикл по Заказам---------------------------------------------------		
	 пока СтрокаЗаказа.Следующий() Цикл
		 ОбработкаПрерыванияПользователя();
		 //проверим на наличие товаров, заказанных в Заказе
		 
		 //+++ 28.04.2015 чтобы не делать еще 1 запрос к базе
		//	 СтрокаЗаказаРеализация = ЗаказыПокупателей.Найти(СтрокаЗаказа.ЗаказПокупателя, "ЗаказПокупателя").Реализация;
			 СтрокаЗаказаРеализация = СтрокаЗаказа.Реализация;
			 флНетРеализации = (СтрокаЗаказаРеализация = неопределено или СтрокаЗаказаРеализация = Null или СтрокаЗаказаРеализация.Пустая() );
		
		 Если СтрокаЗаказа.Количество<=0 и флНетРеализации Тогда  // нет товаров для отгрузок и нет реализации
			 продолжить;
		 КонецЕсли;
		 
		СтрокаТЧЗаказа = СтрокаЗаказа.Выбрать();  // строка Номенклатуры... 
		
		ТЗЗаказано.Очистить();
		пока СтрокаТЧЗаказа.Следующий() Цикл
			СтрокаТЗЗаказано = ТЗЗаказано.Добавить();
			ЗаполнитьЗначенияСвойств( СтрокаТЗЗаказано, СтрокаТЧЗаказа );
		КонецЦикла;	
		
		
//-----------------проверка: Есть реализация, а заказанных товаров - нет---------------------------------------
		Если НетНиОдногоТовараЗаказаВОтгрузке(ТЗЗаказано, ТЗОтгружено) Тогда
			 Если НЕ флНетРеализации Тогда
				Попытка
				НовыйДок = СтрокаЗаказаРеализация.ПолучитьОбъект(); //28.05.2018 - внутрь попытки
				
					НовыйДок.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		 			НовыйДок.ПометкаУдаления = Истина;
					НовыйДок.Товары.Очистить();
					
					НовыйДок.Записать();
	                сообщить(строка(СтрокаЗаказа.НомерСтрокиЗаказа)+") - удален документ: "+строка(НовыйДок), СтатусСообщения.ОченьВажное);
				Исключение
					сообщить(строка(СтрокаЗаказа.НомерСтрокиЗаказа)+") - Ошибка при удалении: "+строка(НовыйДок)+" : "+ОписаниеОшибки(), СтатусСообщения.Внимание);
				КонецПопытки;
			 	продолжить;
			  КонецЕсли;	
	    КонецЕсли;	
		
	  //------------Основной Цикл по факт количеству (типа ФИФО - очередь по Заказам)------------------------
	  
	  //+++ 28.04.2015 - тоже самое условие.... приоритет заказа выше 1-го заказа !!!
		СтрокаЗаказа1   = ЗаказыПокупателей.Найти(СтрокаЗаказа.ЗаказПокупателя, "ЗаказПокупателя");  
		флНетРеализации = (СтрокаЗаказа1.Реализация=неопределено или СтрокаЗаказа1.Реализация.пустая()); //+++ 30.04.2015
	    //тип документа может быть другим!
		Если  флНетРеализации Тогда
			
		//	Если СтрокаЗаказа.ЗаказПокупателя.ВводитьТолькоПеремещение тогда  //!!! перемещения !!!
				НовыйДок = Документы.ПеремещениеТоваров.СоздатьДокумент();	
			//иначе
			//	НовыйДок = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			//КонецЕсли;
			
		Иначе//реализация уже есть
			СтрокаЗаказаРеализация = СтрокаЗаказа1.Реализация;  //+++ 30.04.2015
			НовыйДок = СтрокаЗаказаРеализация.ПолучитьОбъект();
			НовыйДок.Товары.Очистить();
			НовыйДок.ТоварыАдресноеХранение.Очистить();
			НовыйДок.ПометкаУдаления = Ложь; // отмена удаления... 
		КонецЕсли;
		
		//+++ основная Процедура заполнения реализации и уменьшения по ФИФО количество Отгружено в Табл.значения ТЗОтгружено +++
		//Если СтрокаЗаказа.ЗаказПокупателя.ВводитьТолькоПеремещение тогда  //!!! перемещения !!!
			Если СкладПолучатель.Пустая() тогда
				сообщить("Для заказа на перемещение: "+строка(СтрокаЗаказа.ЗаказПокупателя)+" - не заполнено поле ""Склад получатель""!");
			КонецЕсли; 
			
			
ОбработкаЗаполненияПеремещенияИзЗадания(НовыйДок, СтрокаЗаказа.ЗаказПокупателя, Ссылка, ТЗЗаказано, ТЗОтгружено, ТЗОтгруженоАХ);
	
			
			
//+++ 05.06.2015 -------------Прибавляем грузчиков Ангар-И---------------------
	КолГр   = НовыйДок.ДанныеПоПогрузке.Количество();
	ВесДок  = НовыйДок.Товары.Итог("Вес");
	КолАнгар = СкладПолучатель.ГруппаСкладов.Состав.Количество();
	
	если КолАнгар > 0 тогда
	Доля = КолГр/КолАнгар;
	ВесНаОдного = ВесДок/КолАнгар;
	для каждого стр1 из СкладПолучатель.ГруппаСкладов.Состав цикл
		   стр2 = НовыйДок.ДанныеПоПогрузке.Добавить();
		   стр2.Грузчик = стр1.ФизЛицо;
		   стр2.Вес = Доля;
		   стр2.Вручную  = истина;
		   стр2.ВесНетто = ВесНаОдного;
	КонецЦикла;	
	Сообщить("Добавлено "+строка(КолАнгар)+" грузчиков склада: "+строка(СкладПолучатель) );
	КонецЕсли;	
//+++  ---------------------------------------------------------------------------



		Попытка
			ОбработкаПрерыванияПользователя();
			
			Если НовыйДок.Товары.Количество()=0 и НовыйДок.ТоварыАдресноеХранение.Количество()=0 Тогда
				Если флНетРеализации Тогда
					сообщить(строка(СтрокаЗаказа.НомерСтрокиЗаказа)+") - нет товаров на складах Для отгрузки по заказу: "+строка(СтрокаЗаказа.ЗаказПокупателя), СтатусСообщения.Важное);
					продолжить;
			 	Иначе// уже есть документ, его надо распровести и пометить на удаление
			  		НовыйДок.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					НовыйДок.ПометкаУдаления = Истина;
			 	КонецЕсли;
			КонецЕсли;
			
			//Если НовыйДок.Проведен тогда
			//НовыйДок.Записать(РежимЗаписиДокумента.ОтменаПроведения); //+++ отменяем проведение
			//иначе 
			
			Если НовыйДок.ЭтоНовый() тогда  //+++ 11.05.2016
				НовыйДок.УстановитьНовыйНомер( НовыйДок.Подразделение.ПрефиксИБ );
				
				//09.02.2017 проверка Склада!
				Если НовыйДок.Подразделение.ОбособленноеПодразделение тогда
					Если не СкладПолучатель.Транзитный
						или СкладПолучатель.Подразделение <> НовыйДок.Подразделение тогда
						сообщить("Склад - получатель указан НЕПРАВИЛЬНО!", СтатусСообщения.Внимание );
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			//перезаписываем просто записать - новый или с пометкой на удаление старый	
				НовыйДок.Записать();
			//КонецЕсли;
			
			СтрокаЗаказаТЧ = ЗаказыПокупателей.Найти(СтрокаЗаказа.ЗаказПокупателя,"ЗаказПокупателя"); //+++ 14.07.2014
 			СтрокаЗаказаТЧ.Реализация = НовыйДок.Ссылка;
			
			СтрокаЗаказаТЧ.КоличествоПозицийОтгружено = НовыйДок.Ссылка.Товары.Количество();
			СтрокаЗаказаТЧ.КоличествоШтукОтгружено    = НовыйДок.Ссылка.Товары.Итог("Количество");
			
			//+++ 05.03.2014
			Если ТипЗнч(НовыйДок.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") тогда
				Если НовыйДок.Контрагент = справочники.Контрагенты.НайтиПоКоду("92797") тогда   // ФормулаАвтоПлюс
					Предупреждение(" ВНИМАНИЕ! 
					|по реализации № "+строка(НовыйДок.Номер)+" - грузится "+строка(НовыйДок.Контрагент)+"
					|Печатать ТОЛЬКО 1 комплект документов для подписи у водителя!",10);
				КонецЕсли;	
			КонецЕсли;
			
			сообщить(строка(СтрокаЗаказа.НомерСтрокиЗаказа)+") - "+?(НовыйДок.ПометкаУдаления, "Удален", ?( флНетРеализации,"записан Новый","перезаписан существующий"))+" документ : "+строка(НовыйДок), СтатусСообщения.Информация);
		Исключение
			сообщить(строка(СтрокаЗаказа.НомерСтрокиЗаказа)+") - Ошибка при записи: "+строка(НовыйДок)+" : "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
		КонецПопытки;
		
	КонецЦикла;
	
	// Пермещение по ОТХ для брака ======================================================================================
	
	Если ЗаявкиНаБрак.Количество()>0 Тогда
				
		Брак = ЗаявкиНаБрак.Выгрузить();
		
		Брак.Свернуть("Регистратор,Контрагент,ДоговорКонтрагента");
		
		Для каждого стр1 из брак Цикл
			врем = ЗаявкиНаБрак.Выгрузить();
			Отбор = Новый Структура;
			Отбор.Вставить("Регистратор",стр1.Регистратор);
			Отбор.Вставить("Контрагент",стр1.Контрагент);
			Отбор.Вставить("ДоговорКонтрагента",стр1.ДоговорКонтрагента);
			
			строкиПоЗаявке = врем.Скопировать(Отбор);
			
			операция = Документы.ОперацияПоОтветственномуХранению.СоздатьДокумент();
			
			операция.Дата = ТекущаяДата();
			операция.ВидОперации = Перечисления.ВидыОперацийПоОтветственномуХранению.ПеремещениеМеждуСкладами;
			операция.Контрагент = стр1.Контрагент;
			операция.ДоговорКонтрагента = стр1.ДоговорКонтрагента;
			операция.Организация = Справочники.Организации.НайтиПоКоду("00001");
			операция.Комментарий = "Сформировано автоматически на основании " + Строка(Ссылка);
			// Сакулина
			Если стр1.Регистратор = Документы.ЗаявкаНаВозвратТоваров.ПустаяСсылка() Тогда
				операция.ДокументОснование = врем[0].Заявка;
			Иначе
				операция.ДокументОснование = стр1.Регистратор;
			КонецЕсли;
			
			операция.СкладПолучатель   = СкладПолучатель; 
			
			операция.Подразделение = Подразделение;
			
			Для Каждого строкаОснование ИЗ строкиПоЗаявке Цикл
				Если строкаОснование.КоличествоПеремещено > 0 Тогда
					НоваяСтрока=операция.Товары.Добавить();
					НоваяСтрока.Номенклатура = строкаОснование.Номенклатура;
					НоваяСтрока.Количество = строкаОснование.КоличествоПеремещено;
					НоваяСтрока.Склад = строкаОснование.Склад;
				КонецЕсли;
			КонецЦикла;
			
			Если операция.Товары.Количество() = 0 Тогда
				Продолжить;	
			КонецЕсли;
			
			//Попытка
			//операция.ПолучитьФорму().Открыть();
			операция.Записать(РежимЗаписиДокумента.Проведение);
			СтрокиДобавитьПеремещение = ЗаявкиНаБрак.НайтиСтроки(Отбор);
			
			для каждого стр3 из СтрокиДобавитьПеремещение Цикл
				стр3.ДокументОтгрузки = операция.Ссылка;
			КонецЦикла;
			
			// Сакулина. Если задание на перемещение только по Заявкам на брак и Склад получатель "АКБ проверенные из Формулы"
			// а склад отправитель 
			// ==================================================================================================================
			Если СкладПолучатель = Справочники.Склады.НайтиПоКоду("02185") и ЗаказыПокупателей.Количество() = 0 Тогда 
				Операция = Документы.ОперацияПоОтветственномуХранению.СоздатьДокумент();
				
				Операция.Дата = ТекущаяДата();
				Операция.ВидОперации = Перечисления.ВидыОперацийПоОтветственномуХранению.Списание;
				Операция.Контрагент = стр1.Контрагент;
				Операция.ДоговорКонтрагента = стр1.ДоговорКонтрагента;
				Операция.Организация = Справочники.Организации.НайтиПоКоду("00001");
				Операция.Комментарий = "Сформировано автоматически на основании " + Строка(Ссылка);
				// Сакулина
				Если стр1.Регистратор = Документы.ЗаявкаНаВозвратТоваров.ПустаяСсылка() Тогда
					Операция.ДокументОснование = врем[0].Заявка;
				Иначе
					Операция.ДокументОснование = стр1.Регистратор;
				КонецЕсли;
				Операция.Подразделение = Подразделение;
				
				Для Каждого строкаОснование ИЗ строкиПоЗаявке Цикл
					НоваяСтрока=Операция.Товары.Добавить();
					НоваяСтрока.Номенклатура = строкаОснование.Номенклатура;
					НоваяСтрока.Количество = строкаОснование.КоличествоПеремещено;
					НоваяСтрока.Склад = СкладПолучатель;
				КонецЦикла;
				Операция.Записать(РежимЗаписиДокумента.Проведение);
				
				СтрокиДобавитьПеремещение = ЗаявкиНаБрак.НайтиСтроки(Отбор);
				
				для каждого стр3 из СтрокиДобавитьПеремещение Цикл
					стр3.ДокументОтгрузки = операция.Ссылка;
				КонецЦикла;
				
			КонецЕсли;
			// Сакулина. Если задание на перемещение только по Заявкам на брак и Склад получатель "АКБ проверенные из Формулы"
			// а склад отправитель 
			
			
			
			//Исключение
			//	Сообщить("Не удалось выполнить перемещение по ОТХ, документ не проведен");
			//КонецПопытки;
			
		КонецЦикла;
	КонецЕсли;	
	//-------------------------------------------------------------------------------------------------------------------	
	ПересчетКоличестваИСуммПоЗаказам();

	Если СоздаватьПеремещенияКриал тогда //+++ 14.05.2013 после создания реализаций - делаем доп.перемещения!
		ВыполнитьДопПеремещениеКриал(ЭтотОбъект);
	КонецЕсли;

	Попытка
		ЭтотОбъект.Записать();
		сообщить(" Заполнение перемещений - успешно завершено. Нажмите [Провести] для списание товара!", СтатусСообщения.Информация);
		сообщить(" ");
	Исключение
		сообщить(" Ошибка при записи: "+строка(ЭтотОбъект.Ссылка)+" : "+ОписаниеОшибки(), СтатусСообщения.Внимание);
		сообщить(" ");
	КонецПопытки;
	
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ЗаказыПокупателей;
	флКнопкиПровести(Истина);
	
//Миронычев
	Для Каждого Стр из ЗаказыПокупателей цикл
		Если Стр.ЗаказПокупателя.ТипЗаказа = 10 Или  Стр.ЗаказПокупателя.TerminalОтгрузкаТранспортнойКомпанией тогда
			ЗаписатьРегистрСтатусов(Стр.ЗаказПокупателя, , Перечисления.СостояниеЗаказовИМ.Перемещен);
		ИначеЕсли Стр.ЗаказПокупателя.ТипЗаказа = 6 Или Стр.ЗаказПокупателя.ТипЗаказа = 7 тогда
			Для Каждого Ст из Стр.ЗаказПокупателя.Заказы Цикл
				ЗаписатьРегистрСтатусов(Ст.ЗаказПокупателя, , Перечисления.СостояниеЗаказовИМ.Перемещен);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
		
	//--------------Виртуальная таблица значений по факт. изъятому количеству------------------------
	
	ТЗИзъятых = Новый ТаблицаЗначений;
	ТЗИзъятых.Колонки.Добавить("Номенклатура");
	ТЗИзъятых.Колонки.Добавить("Количество");
	ТЗИзъятых.Колонки.Добавить("Склад");
	ТЗИзъятыхАХ = Новый ТаблицаЗначений;
	ТЗИзъятыхАХ.Колонки.Добавить("Номенклатура");
	ТЗИзъятыхАХ.Колонки.Добавить("Количество");
	Для Каждого Строка Из ТоварыДляИзъятияИзНаборки Цикл
		Если Строка.Количество > 0 Тогда
			НоваяСтрока = ТЗИзъятых.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, строка);
			НоваяСтрока.Склад  = ЭтотОбъект.СкладПолучатель;
		КонецЕсли;	
	КонецЦикла;           
	
	Если ЗначениеЗаполнено(ПеремещениеПоИзъятию)  тогда
		НовыйДокизъятых = ПеремещениеПоИзъятию.ПолучитьОбъект();
	Иначе	
		НовыйДокизъятых = Документы.ПеремещениеТоваров.СоздатьДокумент();	
	КонецЕсли;
	
	ОбработкаЗаполненияПеремещенияИзЗадания(НовыйДокизъятых, ЗаказыПокупателей[0].ЗаказПокупателя, Ссылка, ТЗИзъятых, ТЗИзъятых, ТЗИзъятыхАХ);
	
	//+++ 15.08.2017 - склад Сборки
	НовыйДокизъятых.СкладОтправитель = ЭтотОбъект.СкладПолучатель;
	
	//+++ 15.08.2017 - склад РАЗборки
	//НовыйДокизъятых.СкладПолучатель  =Справочники.Склады.НайтиПоКоду("02252");	 //Ангар-И (тест) - только для Ярославля!
	Если ЭтотОбъект.Подразделение.СкладРазборкиИМ.Пустая() тогда
		Предупреждение("Не определен склад разборки для изъятых товаров!
		|У подразделения """+строка(ЭтотОбъект.Подразделение)+"""
		|не заполнено поле ""Склад разборки ИМ"" ", 30);
	КонецЕсли;	
	НовыйДокизъятых.СкладПолучатель  = ЭтотОбъект.Подразделение.СкладРазборкиИМ; // универсально для любого подразделения!
	
	//+++ 05.06.2015 -------------Прибавляем грузчиков Ангар-И---------------------
	КолГр   = НовыйДокизъятых.ДанныеПоПогрузке.Количество();
	ВесДок  = НовыйДокизъятых.Товары.Итог("Вес");
	КолАнгар = СкладПолучатель.ГруппаСкладов.Состав.Количество();
	
	Попытка
		ОбработкаПрерыванияПользователя();
		
		//Если  ЗначениеЗаполнено(ПеремещениеПоИзъятию) Тогда
		//	
		//	// уже есть документ, его надо распровести и пометить на удаление
		//	НовыйДокизъятых.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		//	НовыйДокизъятых.ПометкаУдаления = Истина;
		//	
		//КонецЕсли;
		//
		//
		Если НовыйДокизъятых.ЭтоНовый() тогда 
			НовыйДокизъятых.УстановитьНовыйНомер( ?(НовыйДокизъятых.Подразделение.ПрефиксИБ="","ТК",НовыйДокизъятых.Подразделение.ПрефиксИБ) );				
		КонецЕсли;
		//
		//перезаписываем просто записать - новый или с пометкой на удаление старый	
		НовыйДокизъятых.Дата = ТекущаяДата();
		//11.01.18 Смирнов если товаров нет, то док изъятия не записываем
		Если НовыйДокизъятых.Товары.Количество()>0 тогда
			НовыйДокизъятых.Записать();
			ПеремещениеПоИзъятию = НовыйДокизъятых.Ссылка;
		КонецЕсли;
	Исключение
	КонецПопытки;
		
	ЗаказыДляИзъятия = Новый  ТаблицаЗначений;
	ЗаказыДляИзъятия = ТоварыДляИзъятияИзНаборки.Выгрузить(); 
	ЗаказыДляИзъятия.Свернуть("Заказ");
	
	Для Каждого Стр из ЗаказыДляИзъятия цикл
		ЗаписатьРегистрСтатусов(Стр.Заказ, , Перечисления.СостояниеЗаказовИМ.ОтмененПриПеремешении);
	КонецЦикла;
	
	ЗаказыНенайденные = Новый  ТаблицаЗначений;
	ЗаказыНенайденные = ТоварыНеНайденные.Выгрузить(); 
	ЗаказыНенайденные.Свернуть("Заказ");
	
	Для Каждого Стр из ЗаказыНенайденные цикл
		ЗаписатьРегистрСтатусов(Стр.Заказ, , Перечисления.СостояниеЗаказовИМ.ОтмененПриПеремешении);
	КонецЦикла;

 КонецПроцедуры


функция НетНиОдногоТовараЗаказаВОтгрузке(ТЗЗаказано, ТЗОтгружено)
	
	рез = Истина;
	
	Для Каждого стр1 из ТЗЗаказано Цикл
		
		стр2 = ТЗОтгружено.Найти(стр1.Номенклатура, "Номенклатура");
		Если стр2 = Неопределено Тогда //НЕ НАШЛИ!
			продолжить;
		КонецЕсли;
		
		Если стр2.Количество>0 и стр1.Количество>0 Тогда
			рез = Ложь;
			прервать;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат рез;
	
КонецФункции	


//+++ из реализации! +++
//отдельно анализируем ТЗОтгружено и, Если склад.АдресноеХранение - то и ТЗОтгруженоАХ
Процедура ОбработкаЗаполненияИзЗадания(Док, Основание, Задание, ТЗЗаказано, ТЗОтгружено, ТЗОтгруженоАХ) 
	
	// Заполним реквизиты шапки по документу основанию.
	Док.Дата = ТекущаяДата();
	Док.ПунктРазгрузки = Основание.АдресДоставки; //Для ТТН и не переносится в Бухгалтерию
	
	Док.переработка    = Задание.переработка;	//+++ 24.04.2013
	Док.ВидПеревозки   = СокрЛП(Задание.ТелефонВодителя);//+++ 16.07.2013  Телефон водителя в текстовое поле ВидПеревозки!!!
	
	Док.Ответственный  = Основание.Ответственный;
	Док.Комментарий    = ">>Задание на перемещение №"+сокрЛП(Задание.Номер)+" от "+строка(Задание.Дата)+" # "+Основание.Комментарий;
	
	Док.ОрганизацияДляПечати = Основание.ОрганизацияДляПечати;
	Док.ГрузоОтправитель = Основание.ГрузоОтправитель; 
	Док.ГрузоПолучатель  = Основание.ГрузоПолучатель;
	
	Док.Водитель = СокрЛП(Основание.КонтактноеЛицо.Наименование);
	
	Док.МаркаАвтомобиля     = Основание.МаркаАвтомобиля;
	Док.ГосНомерАвтомобиля  = Основание.ГосНомерАвтомобиля;
	Если ЗначениеЗаполнено(Основание.АвтомобильКонтрагента) Тогда
		Док.Автомобиль = Основание.АвтомобильКонтрагента;
	КонецЕсли;
	
	ИзОбработки = Ложь;
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнитьШапкуДокументаПоОснованию(Док, Основание);
		
	//++++++++++++++ данные по водителю из ЭТОГО документа! +++++++++++++++++
	Док.Водитель 	   = Водитель;
	Док.ВодительскоеУдостоверение  = ВодительскоеУдостоверение;
	Док.МаркаАвтомобиля     = МаркаАвтомобиля;
	Док.ГосНомерАвтомобиля  = ГосНомерАвтомобиля;
	Док.МаркаПрицепа		= МаркаПрицепа;
	Док.ГосНомерПрицепа		= ГосНомерПрицепа;
		
	Док.Подразделение = ?(Основание.Подразделение.пустая(), Подразделение, Основание.Подразделение);
	Док.Перевозчик   = Перевозчик;
	Док.Заказчик 	 = Заказчик;
	
	Док.НомерДоверенности = НомерДоверенности;
	Док.ДатаДоверенности  = ДатаДоверенности;
	Док.ОрганизацияВыдавшаяДоверенность = ОрганизацияВыдавшаяДоверенность;
	Док.ФизЛицоДоверенности = ФизЛицоДоверенности;
	
	Если НЕ ЗначениеЗаполнено(Док.ПунктРазгрузки) Тогда //+++ 24.04.2012 - адрес доставки - куда!
		Если ЗначениеЗаполнено(Док.ГрузоПолучатель) Тогда //+++ 27.11.2012 ГрузоПолучатель а не Грузоотправитель!
			ФактАдрес = ПолучитьДанныеКонтактнойИнформации(Док.ГрузоПолучатель, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
			Док.ПунктРазгрузки = ?(ФактАдрес.Количество() = 0, "", ФактАдрес[0].Представление);
		ИначеЕсли ЗначениеЗаполнено(Док.Контрагент) Тогда
			ФактАдрес = ПолучитьДанныеКонтактнойИнформации(Док.Контрагент, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
			Док.ПунктРазгрузки = ?(ФактАдрес.Количество() = 0, "", ФактАдрес[0].Представление);
		КонецЕсли;	
	КонецЕсли;	
	
	Док.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	Док.ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
	
	// Сделку и табличные части заполняем только Если взаиморасчеты ведутся не по расчетным документам.
	Если Док.ДоговорКонтрагента.ВедениеВзаиморасчетов <>
		Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
		
		Док.Сделка = Основание;
		
	КонецЕсли;
	
	//принудительно меняем номер на "правильный" по подразделению
	Если Док.ЭтоНовый() тогда // номер ТК ---здесь!---
		СтрокаПрефикс = "ТК";
		Если Док.Подразделение.ПрефиксИБ<>"" Тогда
			СтрокаПрефикс = Док.подразделение.ПрефиксИБ;
		КонецЕсли;	
		Док.УстановитьНовыйНомер(СтрокаПрефикс);
	КонецЕсли;

	Если Основание.Проведен Тогда
		
		ЗаполнитьТабличнуюЧастьПоЗаданию(Док, Задание,  ТЗЗаказано, ТЗОтгружено,  ТЗОтгруженоАХ);
				
	иначе
		сообщить("Документ: "+строка(Основание)+" - не проведен. Заполнение реализации не будет производиться!");
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

//+++ из реализации! +++
Процедура ЗаполнитьТабличнуюЧастьПоЗаданию(Док, Задание,  ТЗЗаказано, ТЗОтгружено, ТЗОтгруженоАХ)
	
//+++ 16.07.2013 так "логичнее"... идем по заказу, ищем в отгрузке...
	Для Каждого СтрокаЗаказа Из ТЗЗаказано Цикл//по товарам из заказа
	ОбработкаПрерыванияПользователя(); //Ctrl + Break
		 		
		Если СтрокаЗаказа.Количество = 0 Тогда  // уже все в реализацию
			Продолжить;
		КонецЕсли;
	//----------------------нужен именно полный Цикл - Для поиска всех складов---------------------------
		Для Каждого СтрокаОтгрузки Из ТЗОтгружено Цикл//по товарам, отгружаемым из задания
			Если СтрокаОтгрузки.Количество <= 0 Тогда  // уже все отгрузили в другом заказе
				Продолжить;
			КонецЕсли;
		//+++ 13.01.2015 - весь товар уже помещен в реализацию!
		    Если СтрокаЗаказа.Количество <= 0 Тогда  // уже все в реализацию занесено!
		    	Прервать;
		    КонецЕсли;
 		
			Если СтрокаЗаказа.Номенклатура = СтрокаОтгрузки.Номенклатура 
				И СтрокаОтгрузки.Количество > 0  Тогда

				СтрокаТабличнойЧасти = Док.товары.Добавить();
				СтрокаТабличнойЧасти.Номенклатура  	               = СтрокаЗаказа.Номенклатура;
				
				ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				
				СтрокаТабличнойЧасти.ЕдиницаИзмерения              = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
				СтрокаТабличнойЧасти.Коэффициент                   = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
				СтрокаТабличнойЧасти.Цена                          = СтрокаЗаказа.Цена; // в заказе один товар - одна цена!
				СтрокаТабличнойЧасти.СтавкаНДС					   = Перечисления.СтавкиНДС.НДС18; //+++ ВСЕГДА в реализации есть!!!
				
				ДельтаФактЗаказа = СтрокаОтгрузки.Количество - СтрокаЗаказа.Количество;
				
				Если ДельтаФактЗаказа > 0 Тогда//в общей отгрузке больше чем в конкретном заказе по складу
					СтрокаТабличнойЧасти.Количество = СтрокаЗаказа.Количество;
					СтрокаОтгрузки.Количество   	= ДельтаФактЗаказа;
					СтрокаЗаказа.Количество         = 0; 
					
				ИначеЕсли ДельтаФактЗаказа<=0 Тогда//в общей отгрузке меньше чем в конкретном заказе по складу
					СтрокаТабличнойЧасти.Количество = СтрокаОтгрузки.Количество; // весь остаток - в эту реализацию
					СтрокаЗаказа.Количество     = -ДельтаФактЗаказа; // а здесь чего-то осталось...
					СтрокаОтгрузки.Количество   = 0;  // больше не осталось!
				КонецЕсли; 
				СтрокаТабличнойЧасти.Склад        = СтрокаОтгрузки.Склад;
				РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, Док);
				РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Док); 
				
				//---------------------Начало Адресное хранение-----------------------------
				//найдем нужное количество и адреса в ТЗОтгруженоАХ
				Если СтрокаТабличнойЧасти.Склад.АдресноеХранение Тогда
					колВсего = СтрокаТабличнойЧасти.Количество;
					КолАХ = 0;
					ном = СтрокаТабличнойЧасти.Номенклатура;
					массивСтрокАХ = ТЗОтгруженоАХ.найтиСтроки(Новый Структура("Номенклатура, Склад", ном, СтрокаТабличнойЧасти.Склад));//+++ 31.03.2014
					Для i=0 по массивСтрокАХ.Количество()-1 Цикл
						строкаАХ = массивСтрокАХ[i];
						Если строкаАХ.Количество>0 
							и КолАХ + строкаАХ.Количество <= колВсего Тогда
							стр1 = Док.ТоварыАдресноеХранение.Добавить();
							ЗаполнитьЗначенияСвойств(стр1, строкаАХ);
							КолАХ = КолАХ + строкаАХ.Количество;
							строкаАХ.Количество = 0; //все количество из этой ячейки отгружается
							
						ИначеЕсли КолАХ<=колВсего Тогда //и (КолАХ + строкаАХ.Количество)>колВсего Тогда
							Если КолАХ<колВсего тогда //+++ 04.04.2014 добавляем строку только если количество не ноль!
								стр1 = Док.ТоварыАдресноеХранение.Добавить();
								ЗаполнитьЗначенияСвойств(стр1, строкаАХ);
								стр1.Количество = колВсего - КолАХ;
							КонецЕсли;	
 							строкаАХ.Количество = строкаАХ.Количество - (колВсего - КолАХ);
                            КолАХ = колВсего;   // КолАХ = КолАХ + (колВсего - КолАХ);
						Иначе
							прервать;
						КонецЕсли;
					КонецЦикла;	
				 КонецЕсли;
				 //---------------------Конец Адресное хранение-----------------------------
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	//---------удаляем "лишние" строки----------------------------------------------------------- 
	// -------------то, что уже отгружено - Для следующих заказов искать не надо-----------------
	i=0; N=ТЗОтгружено.Количество();
	пока i<N Цикл
		СтрокаОтгрузки = ТЗОтгружено[i]; 
		Если СтрокаОтгрузки.Количество <= 0 Тогда  // уже все отгрузили в другом заказе
			ТЗОтгружено.Удалить(i); 
			N=N-1;
		Иначе
			i=i+1;
		КонецЕсли;
	КонецЦикла;
	
	//----то, что уже отгружено по Адресному Хранению - Для следующих заказов искать не надо-------
	i=0; N=ТЗОтгруженоАХ.Количество();
	пока i<N Цикл
		СтрокаОтгрузки = ТЗОтгруженоАХ[i]; 
		Если СтрокаОтгрузки.Количество <= 0 Тогда  // уже все отгрузили в другом заказе
			ТЗОтгруженоАХ.Удалить(i); 
			N=N-1;
		Иначе
			i=i+1;
		КонецЕсли;
	КонецЦикла;

	//-------------------------------------расчет веса----------------------------------- 
	ЗаполнитьВесНетто(Док.Товары);
	Док.ОбщийВес=Док.Товары.Итог("Вес");
	
	//++++++++++++ заполнение грузчиков как в Реализации+++++++++++++++
	формаРеализации = док.получитьФорму("ФормаДокумента");
	яштРезервыПоТоварам.ЗаполнениеКТУГрузчиков(Док); // по группам складов!
	
КонецПроцедуры

 
//+++ из задания на отгрузку
Процедура ОбработкаЗаполненияПеремещенияИзЗадания(Док, Основание, Задание, ТЗЗаказано, ТЗОтгружено, ТЗОтгруженоАХ) 
	
//=================================================================================================================
	//+++ промежуточный Внутренний заказ +++
	Если Док.ВнутреннийЗаказ = документы.ВнутреннийЗаказ.ПустаяСсылка() тогда
		ВнутреннийЗаказ = документы.ВнутреннийЗаказ.СоздатьДокумент();
	иначе
		ВнутреннийЗаказ = Док.ВнутреннийЗаказ.получитьОбъект();
		ВнутреннийЗаказ.товары.Очистить();
	КонецЕсли;
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнитьШапкуДокументаПоОснованию(ВнутреннийЗаказ, Основание);
	ВнутреннийЗаказ.Комментарий   = Основание.Комментарий+"
	|# Задание на отгрузку №"+сокрЛП(Задание.Номер)+" от "+строка(Задание.Дата)+" # ";
	
	ВнутреннийЗаказ.Дата = ТекущаяДата();					
	ВнутреннийЗаказ.ДокументОснование = Основание;
	ВнутреннийЗаказ.ВидЗаказа	  = Перечисления.ВидыВнутреннегоЗаказа.НаСклад;
	
	//+++( 29.10.2013
//	Если ЭтаФорма.Флажок1 тогда 
	//	СкладПолучатель1 = СкладПолучатель;
	//	Если ВвестиЗначение(СкладПолучатель1, "Склад для "+строка(Основание.Контрагент)+" заказ №"+строка(Основание.Номер) ) тогда
	//		ВнутреннийЗаказ.Заказчик	  = СкладПолучатель1;
	//	Иначе	
	//		ВнутреннийЗаказ.Заказчик	  = СкладПолучатель;
	//	КонецЕсли;
	//Иначе	
		ВнутреннийЗаказ.Заказчик	  = СкладПолучатель;
	//КонецЕсли; //+++)

	Если Основание.Проведен Тогда
		ЗаполнитьТабличнуюЧастьВнутреннийЗаказПоЗаданию(ВнутреннийЗаказ, Задание,  ТЗЗаказано, ТЗОтгружено);
	иначе
		сообщить("Документ: "+строка(Основание)+" - не проведен. Заполнение документа производиться - не будет!");
		возврат;
	КонецЕсли;
	//ВнутреннийЗаказ.Организация  = 
	//ВнутреннийЗаказ.Подразделение=
	Если ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Расход Тогда ////Плотников  для нового вида движения Внутренний заказ не нужен
	ВнутреннийЗаказ.Записать();
	КонецЕсли;
//=================================================================================================================
	
	// Заполним реквизиты шапки по документу основанию.
	Док.Дата = ТекущаяДата();
	//+++ 29.12.2014 - для перемещения из Ярославля в Москву или Филиал... нужен в шапке! склад Ярославля!
	//если Основание.ОтгрузкаСПодразделенияСклада тогда
	//+++ 16.06.2015 - всегда "1"
	Если ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Расход Тогда  ////Плотников  для нового вида движения меняем склад
		
		//+++ 26.09.2017 для филиалов - ошибка при проведении перемещений - склад-отправитель не принадлежит подразделению!
		//Док.СкладОтправитель = справочники.Склады.НайтиПоНаименованию("1");
		  Док.СкладОтправитель = ЭтотОбъект.Подразделение.Склад; 
	
	иначеЕсли ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Приход Тогда
	    Док.СкладОтправитель = СкладПолучатель;
	КонецЕсли;
	Док.СкладПолучатель  = СкладПолучатель;//+++ 29.10.2013
	
	Док.Ответственный = глТекущийПользователь; // Основание.Ответственный;
	Док.Комментарий   = Основание.Комментарий+"
	|# Задание на отгрузку №"+сокрЛП(Задание.Номер)+" от "+строка(Задание.Дата)+" # ";
	
	Док.Водитель = СокрЛП(Основание.КонтактноеЛицо.Наименование);
	Док.МаркаАвтомобиля     = Основание.МаркаАвтомобиля;
	Док.ГосНомерАвтомобиля  = Основание.ГосНомерАвтомобиля;
	Док.ОтражатьВУправленческомУчете = истина; // обязательно!
	
	ИзОбработки = Ложь;
		
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнитьШапкуДокументаПоОснованию(Док, Основание);
	
	//++++++++++++++ данные по водителю из ЭТОГО документа! +++++++++++++++++
	Док.Водитель 	   = Водитель;
	Док.ВодительскоеУдостоверение  = ВодительскоеУдостоверение;
	Док.МаркаАвтомобиля     = МаркаАвтомобиля;
	Док.ГосНомерАвтомобиля  = ГосНомерАвтомобиля;
	Док.МаркаПрицепа		= МаркаПрицепа;
	Док.ГосНомерПрицепа		= ГосНомерПрицепа;
	
	Док.Подразделение   = ?(Основание.Подразделение.пустая(), Подразделение, Основание.Подразделение);
	Док.Перевозчик      = Перевозчик;
	Док.ВидОперации     = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
    Док.ВнутреннийЗаказ = ВнутреннийЗаказ.Ссылка;		
	
	ЗаполнитьТабличнуюЧастьПеремещенияПоВнутреннемуЗаказу(Док, ВнутреннийЗаказ,  ТЗОтгруженоАХ);
	
	яштРезервыПоТоварам.ЗаполнениеКТУГрузчиков(Док); //все активные грузчики или только по своей группе складов	
	
КонецПроцедуры // ОбработкаЗаполнения()


//+++ из реализации! +++
Процедура ЗаполнитьТабличнуюЧастьВнутреннийЗаказПоЗаданию(Док, Задание,  ТЗЗаказано, ТЗОтгружено)
	
	
	Для Каждого СтрокаЗаказа Из ТЗЗаказано Цикл//по товарам из заказа
	ОбработкаПрерыванияПользователя(); //Ctrl + Break
		 		
		Если СтрокаЗаказа.Количество = 0 Тогда  // уже все в реализацию
			Продолжить;
		КонецЕсли;
		
	//----------------------нужен именно полный Цикл - Для поиска всех складов---------------------------
		Для Каждого СтрокаОтгрузки Из ТЗОтгружено Цикл//по товарам, отгружаемым из задания
		
			Если СтрокаОтгрузки.Количество = 0 Тогда  // уже все отгрузили в другом заказе
				Продолжить;
			КонецЕсли;
			Если СтрокаЗаказа.Количество = 0 Тогда  // уже все в реализацию
				прервать;
			КонецЕсли;
 		
			Если СтрокаЗаказа.Номенклатура = СтрокаОтгрузки.Номенклатура Тогда
		//		И СтрокаОтгрузки.Количество > 0 И СтрокаЗаказа.Количество > 0 
				
				СтрокаТабличнойЧасти = Док.товары.Добавить();
				СтрокаТабличнойЧасти.Номенклатура  	               = СтрокаЗаказа.Номенклатура;
				
				СтрокаТабличнойЧасти.ЕдиницаИзмерения              = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
				СтрокаТабличнойЧасти.Коэффициент                   = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
				//СтрокаТабличнойЧасти.Цена                          = СтрокаЗаказа.Цена;
				//СтрокаТабличнойЧасти.СтавкаНДС					   = Перечисления.СтавкиНДС.НДС18; //+++ ВСЕГДА в реализации есть!!!
				
				ДельтаФактЗаказа = СтрокаОтгрузки.Количество - СтрокаЗаказа.Количество;
				
				Если ДельтаФактЗаказа >= 0 Тогда//в общей отгрузке больше чем в конкретном заказе по складу
					СтрокаТабличнойЧасти.Количество = СтрокаЗаказа.Количество;
					СтрокаОтгрузки.Количество   	= ДельтаФактЗаказа;
					СтрокаЗаказа.Количество         = 0; 
					//28.12.2015
					СтрокаТабличнойЧасти.Качество			 = справочники.Качество.Новый;
					СтрокаТабличнойЧасти.размещение          = СтрокаОтгрузки.Склад; // здесь так называется!
					прервать; // этот товар ПОЛНОСТЬЮ отгружен!
					
				ИначеЕсли ДельтаФактЗаказа<0 Тогда//в общей отгрузке меньше чем в конкретном заказе по складу
					СтрокаТабличнойЧасти.Количество = СтрокаОтгрузки.Количество; // весь остаток - в эту реализацию
					СтрокаЗаказа.Количество     = -ДельтаФактЗаказа; // а здесь чего-то осталось...
					СтрокаОтгрузки.Количество   = 0;  // больше не осталось!
					СтрокаТабличнойЧасти.Качество			 = справочники.Качество.Новый;
					СтрокаТабличнойЧасти.размещение          = СтрокаОтгрузки.Склад; // здесь так называется!
				КонецЕсли; 
								
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	
	//---------удаляем "лишние" строки----------------------------------------------------------- 
	// -------------то, что уже отгружено - Для следующих заказов искать не надо-----------------
	i=0; N=ТЗОтгружено.Количество();
	пока i<N Цикл
		СтрокаОтгрузки = ТЗОтгружено[i]; 
		Если СтрокаОтгрузки.Количество <= 0 Тогда  // уже все отгрузили в другом заказе
			ТЗОтгружено.Удалить(i); 
			N=N-1;
		Иначе
			i=i+1;
		КонецЕсли;
	КонецЦикла;
			
КонецПроцедуры

//+++ из задания на отгрузку
Процедура ЗаполнитьТабличнуюЧастьПеремещенияПоВнутреннемуЗаказу(Док, ВнутреннийЗаказ,  ТЗОтгруженоАХ)
	
	 для каждого стрВЗ из ВнутреннийЗаказ.Товары цикл
	 СтрокаТабличнойЧасти = Док.Товары.добавить();
	 ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, стрВЗ);
	 
	 СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
	 СтрокаТабличнойЧасти.Склад = стрВЗ.размещение;
	 СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;
								
	//---------------------Начало Адресное хранение-----------------------------
		//найдем нужное количество и адреса в ТЗОтгруженоАХ
		Если СтрокаТабличнойЧасти.Склад.АдресноеХранение Тогда
			колВсего = СтрокаТабличнойЧасти.Количество;
			КолАХ = 0;
			ном = СтрокаТабличнойЧасти.Номенклатура;
			скл = СтрокаТабличнойЧасти.Склад;       //+++ 23.06.2015
			массивСтрокАХ = ТЗОтгруженоАХ.найтиСтроки(Новый Структура("Номенклатура, Склад", ном, скл ));

			Для i=0 по массивСтрокАХ.Количество()-1 Цикл
				строкаАХ = массивСтрокАХ[i];
				Если строкаАХ.Количество>0 
					и КолАХ + строкаАХ.Количество <= колВсего Тогда //+++ 04.06.2015 пустые строки вылезают!
					стр1 = Док.ТоварыАдресноеХранение.Добавить();
					ЗаполнитьЗначенияСвойств(стр1, строкаАХ);
					КолАХ = КолАХ + строкаАХ.Количество;
					строкаАХ.Количество = 0; //все количество из этой ячейки отгружается
					
				ИначеЕсли КолАХ<=колВсего Тогда  
					Если КолАХ<колВсего тогда //+++ 04.04.2014 добавляем строку только если количество не ноль!
						стр1 = Док.ТоварыАдресноеХранение.Добавить();
						ЗаполнитьЗначенияСвойств(стр1, строкаАХ);
						стр1.Количество = колВсего - КолАХ;
					КонецЕсли;	
 		     		строкаАХ.Количество = строкаАХ.Количество - (колВсего - КолАХ);
					КолАХ = колВсего;   // КолАХ = КолАХ + (колВсего - КолАХ);
				Иначе
					прервать;
				КонецЕсли;
			КонецЦикла;	
		 КонецЕсли;
	//---------------------Конец Адресное хранение-----------------------------
	КонецЦикла;

	
	
	//----то, что уже отгружено по Адресному Хранению - Для следующих заказов искать не надо-------
	i=0; N=ТЗОтгруженоАХ.Количество();
	пока i<N Цикл
		СтрокаОтгрузки = ТЗОтгруженоАХ[i]; 
		Если СтрокаОтгрузки.Количество <= 0 Тогда  // уже все отгрузили в другом заказе
			ТЗОтгруженоАХ.Удалить(i); 
			N=N-1;
		Иначе
			i=i+1;
		КонецЕсли;
	КонецЦикла;

	//-------------------------------------расчет веса----------------------------------- 
	ЗаполнитьВесНетто(Док.Товары);
	Док.ОбщийВес=Док.Товары.Итог("Вес");

КонецПроцедуры 







Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Копирование Тогда
		Элемент.ТекущаяСтрока.КоличествоЗаказано = КолОсталосьЗаказать;
		
		Элемент.ТекущаяСтрока.КоличествоСвободно = 0;
		Элемент.ТекущаяСтрока.Количество = 0;
		Элемент.ТекущаяСтрока.Склад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
КонецПроцедуры

Процедура ТоварыФактКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.Товары.ТекущиеДанные;
    дельта = ПроверкаПревышенияОбщегоКоличества(ТекущаяСтрока);
	//+++ 13.01.2016г как с Задании на отгрузку - можно отгружать больше?!
	//ТекущаяСтрока.Количество = ТекущаяСтрока.Количество  - дельта;
	
КонецПроцедуры


// предупреждение о несоответствии Количества
функция ПроверкаПревышенияОбщегоКоличества(ТекущаяСтрока)
 СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Номенклатура", ТекущаяСтрока.Номенклатура);
	
	ТЗВыведенныхСтрок = Товары.НайтиСтроки(СтруктураОтбора);
	
	КоличествоЗаказано = 0;
	КоличествоФакт     = 0;
	
	Для Каждого Строка Из ТЗВыведенныхСтрок Цикл
		КоличествоЗаказано = КоличествоЗаказано + Строка.КоличествоЗаказано;
		КоличествоФакт     = КоличествоФакт + Строка.Количество; 
	КонецЦикла;
	
	рез = 0;
	Если КоличествоФакт > КоличествоЗаказано Тогда
		рез = КоличествоФакт - КоличествоЗаказано;
		Сообщить(строка(ТекущаяСтрока.номерСтроки)+" стр. -> для номенклатуры: "+ТекущаяСтрока.Номенклатура.Код+" '"+строка(ТекущаяСтрока.Номенклатура)+"' - количество к отгрузке: "+строка(КоличествоФакт)+"шт. больше общего количества заказанного: "+строка(КоличествоЗаказано)+" на "+строка(рез)+" шт.!", СтатусСообщения.Важное);
	КонецЕсли;
	
	возврат рез;
	
КонецФункции

//------------------------------------------------------------------------------------------
Процедура ГруппыСкладовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Кол = ?(ОформлениеСтроки.ячейки.КоличествоСвободно.Значение=Неопределено, 0, ОформлениеСтроки.ячейки.КоличествоСвободно.Значение);
	Кол = мин(Кол, ИтогКоличествоШтук);
	ОформлениеСтроки.ячейки.Процент.текст = строка( ?(ИтогКоличествоШтук>0, Окр(Кол * 100 / ИтогКоличествоШтук,0), 1))+" %";
	ОформлениеСтроки.ячейки.Процент.ОтображатьТекст = Истина;
	
	ОформлениеСтроки.ячейки.Флаг.ОтображатьТекст  = Ложь;
	ОформлениеСтроки.ячейки.Флаг.ОтображатьФлажок = Истина;
			
//( Начало Пересчета:  
	//	определим необходимость авто-пересчета: 
	//  если документ не проведен и изменился флаг хотя бы в одной из строк
	флПересчет = Ложь;  
	флЕстьХотьОдин = ложь;
	стр0 = ДанныеСтроки;
	для каждого стр1 из ГруппыСкладов цикл
		если стр1.ДопПеремещение тогда
			   флЕстьХотьОдин = истина;
	    КонецЕсли;	   			   
 	
		Если стр1.Приоритет>0 и стр1.Приоритет <> стр1.НомерСтроки тогда // перетаскивание отмеченных позиций!
			стр1.Приоритет = стр1.НомерСтроки;
			флПересчет = Истина;
		КонецЕсли;
		 
		Если стр1.Флаг <> (стр1.Приоритет>0) Тогда
			Если НЕ стр1.Флаг Тогда
				стр1.Приоритет = 0;
			Иначе   
				стр1.Приоритет = стр1.НомерСтроки; // где стоит такой и порядок!
			КонецЕсли;
			флПересчет = Истина;
			прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СоздаватьПеремещенияКриал <> флЕстьХотьОдин тогда		
		СоздаватьПеремещенияКриал = флЕстьХотьОдин;
    КонецЕсли;

	Если флПересчет тогда
		Если ЭтотОбъект.Проведен Тогда
			s = ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Заголовок;
			L = стрДлина(s); колСтрок = Прав(s, L-Найти(s,"(") );
			
			Предупреждение("Резерв по "+строка(Товары.Количество())+" строкам - уже сформирован!
						   |Нажмите [Заполнить Товары] для установки резерва по ("+колСтрок+" строкам...", 30);
		иначе
			Если Товары.Количество()>0 тогда
			Режим = РежимДиалогаВопрос.ДаНет;
			Ответ = Вопрос("Таблица 'Товары' - уже содержит "+строка(Товары.Количество())+" строк! 
						   |Очистить список?", Режим, 0);
				Если Ответ = КодВозвратаДиалога.Да Тогда
					Товары.Очистить();
				КонецЕсли;
			КонецЕсли;
//+++ 28.10.2014			КоманднаяПанельТовары2Обновить(Неопределено); // обновляем сразу
		КонецЕсли;	
	КонецЕсли;
//) Конец Пересчета;

	общКоличествоСвободно = 0;  
	общКоличествоЗаказано = 0;

	Для Каждого стр1 из ГруппыСкладов Цикл   
		
		//перенумерация выделенных ячеек!
		Если стр1.Приоритет>0 и стр1.Приоритет<>стр1.НомерСтроки Тогда
			стр1.Приоритет=стр1.НомерСтроки;
		КонецЕсли;
		
		//пересчет в итоги - только заказанного количества!
		Если стр1.Приоритет>0 Тогда
			общКоличествоСвободно = общКоличествоСвободно + стр1.КоличествоСвободно; //+ мин(стр1.КоличествоСвободно, стр1.КоличествоЗаказано);
			общКоличествоЗаказано = общКоличествоЗаказано + стр1.КоличествоЗаказано;
		КонецЕсли;

	КонецЦикла;

	//общКоличествоСвободно = мин(общКоличествоСвободно, ИтогКоличествоШтук);//+++ 27.07.2014 - процент по отгрузке а не по свободному
	
	общПроцент = (общКоличествоЗаказано*100/ИтогКоличествоШтук);
	ЭлементыФормы.ГруппыСкладов.Колонки.Процент.ТекстПодвала = формат(общПроцент,"ЧДЦ=1")+" %";
	ЭлементыФормы.ГруппыСкладов.Колонки.КоличествоЗаказано.ТекстПодвала = общКоличествоЗаказано;
	ЭлементыФормы.ГруппыСкладов.Колонки.КоличествоСвободно.ТекстПодвала = общКоличествоСвободно;
	
	Если общПроцент=100 тогда
		ЭлементыФормы.ГруппыСкладов.Колонки.Процент.ЦветФонаПодвала = webЦвета.БледноЗеленый;
	ИначеЕсли общПроцент<100 тогда
		ЭлементыФормы.ГруппыСкладов.Колонки.Процент.ЦветФонаПодвала = webЦвета.СветлоРозовый;
	ИначеЕсли общПроцент>100 тогда
		ЭлементыФормы.ГруппыСкладов.Колонки.Процент.ЦветФонаПодвала = webЦвета.Сливовый;
	КонецЕсли;
	
КонецПроцедуры

//КАК в Зад.Отгр.-------Вычисляет свободные остатки по ГруппамСкладов на момент времени документа-----------
Процедура КоманднаяПанельТовары2Обновить(Кнопка,БезПредупреждения=неопределено) Экспорт
	
	Если БезПредупреждения=неопределено тогда
		БезПредупреждения=Ложь;
	КонецЕсли;	
	
	Если НЕ (РольДоступна("ПолныеПрава") или РольДоступна("Кладовщик")) тогда
		Если БезПредупреждения Тогда 
			Сообщить("У Вас недостаточно прав для выполнения Обновления списка отгрузки!", СтатусСообщения.Внимание);
		Иначе 
			Предупреждение("У Вас недостаточно прав для выполнения Обновления списка отгрузки!",30);
		КонецЕсли;
	    возврат;
	КонецЕсли;
	
	Если (ссылка.Проведен или ссылка.Выполнено) тогда
		Если БезПредупреждения Тогда 
			Сообщить("      Задание уже выполняется! Резерв установлен!
						   |Обновление списка - потребует новой распечатки для кладовщиков!
						   |	 	    Обновление - не выполнено!");
		Иначе 
			Предупреждение("      Задание уже выполняется! Резерв установлен!
						   |Обновление списка - потребует новой распечатки для кладовщиков!
						   |	 	    Обновление - не выполнено!");
		КонецЕсли;				   
	Возврат;
    КонецЕсли;
	
	Если ЗаказыПокупателей.Количество()=0 Тогда
		Если БезПредупреждения Тогда 
			Сообщить("Не заполнен список заказов!
						   |Обновление отменено!");
		Иначе 
			Предупреждение("Не заполнен список заказов!
						   |Обновление отменено!");
			ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ЗаказыПокупателей;
		КонецЕсли;
		Возврат;
	КонецЕсли;

	Если естьРеализации() тогда
		Если БезПредупреждения Тогда 
			Сообщить("Существуют уже проведенные реализации!
							|Отмените проведение и повторите Обновление!");			
		Иначе 
			Предупреждение("Существуют уже проведенные реализации!
							|Отмените проведение и повторите Обновление!");
				ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ЗаказыПокупателей;
		КонецЕсли;
			Возврат;
	КонецЕсли;	

		
	Если ЭтотОбъект.Проведен и Товары.Количество()>0 тогда
	    Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Перед обновлением - требуется снять Резерв 
					   |по текущему заданию, для правильного расчета остатков.
					   |
					   |Обновление будет учитывать все Резервы всех заданий!
					   |
					   |Вы уверены в необходимости Обновления?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
				Предупреждение("Обновление отменено. 
							   |Резерв не изменился.");
			Возврат;
		КонецЕсли;
		ЭтотОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Предупреждение("Резерв по "+строка(Товары.Количество())+" строкам Товаров снят. Всё готово для обновления...", 10);
 	КонецЕсли;
	
	//09.02.2017 проверка Склада!
		Если (не Подразделение.ОбособленноеПодразделение и СкладПолучатель.Транзитный)
		или (Подразделение.ОбособленноеПодразделение и СкладПолучатель.Подразделение <> Подразделение) тогда
			Предупреждение("Склад-получатель указан НЕПРАВИЛЬНО!", 30 );
			Возврат;
		КонецЕсли;
	
	
	//---------------обновить количество по заказам-----------------------
		ПолучитьАссортимент();
		ПересчетКоличестваИСуммПоЗаказам();

//+++ 02.11.2014 - обновление приводит к полному обновлению (автоматической сортировке) 
Если ГруппыСкладов.Количество()>0 тогда
Режим = РежимДиалогаВопрос.ДаНет;
Текст = "ru = ""Обновить количество по каждой группе,
				|исключая остатки предыдущих групп (Да)?
				|            Или 
				|Полностью обновить список групп, 
				|получив максимальные остатки (Нет)?"";"
     + " en = ""To update the remains on groups of warehouses and to sort groups on the maximum rest?""";
	Ответ = Вопрос(НСтр(Текст), Режим, 10);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		ГруппыСкладов.Очистить();
		ТабЗначРезерв.Строки.Очистить();
	КонецЕсли;
КонецЕсли; 

	//---------полное обновление при 0-ых приоритетах - работает ---------------------------
	Если ГруппыСкладов.Количество()=0 или ГруппыСкладов.Итог("Приоритет")=0 Тогда
		
		ГруппыСкладов.Очистить();
		ТабЗначРезерв.строки.Очистить();
		 
		 использоватьОтбор = ложь;
		Для каждого стрИ из ТаблицаГрупп Цикл
			Если стрИ.Флаг тогда
				использоватьОтбор = Истина;
			КонецЕсли;	
		КонецЦикла;
		 
		Если Исключать = 0 и использоватьОтбор Тогда
			отбор = новый Структура;
			отбор.Вставить("Флаг",истина);
			ТЗ = ТаблицаГрупп.Выгрузить();
			ТЗФлаг = ТЗ.Скопировать(Отбор);
			Массив = ТЗФлаг.ВыгрузитьКолонку("Группа");
			 
			СписокИсключений = Новый СписокЗначений;
		 	СписокИсключений.ЗагрузитьЗначения(Массив);
		 	Результат = ОбновитьСписокГруппТоваров(СписокИсключений);
 	 
		ИначеЕсли Исключать = 1 и использоватьОтбор Тогда
		 				
			отбор = новый Структура;
			отбор.Вставить("Флаг",истина);
			ТЗ = ТаблицаГрупп.Выгрузить();
			ТЗФлаг = ТЗ.Скопировать(Отбор);
			Массив = ТЗФлаг.ВыгрузитьКолонку("Группа");
			 
			СписокОтбираемых = Новый СписокЗначений;
		 	СписокОтбираемых.ЗагрузитьЗначения(Массив);
		 	Результат = ОбновитьСписокГруппТоваров(,СписокОтбираемых);

		 иначе
		 	Результат = ОбновитьСписокГруппТоваров();
		 КонецЕсли; 
		 
		 //Плотников, проверить все ли товары найдены,если не все, то пытаемся найти на ОТХ
		 
		 ТЗ = СчитаемНедогрузы.Скопировать();
		 Для Индекс = -ТЗ.Количество() По -1 Цикл
		 	уд = ТЗ.Получить(-Индекс-1);
		 	Если ТипЗнч(уд.номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
		    	 ТЗ.Удалить(-Индекс-1);
		 	КонецЕсли;
		 КонецЦикла;
		 		 
		 ТЗ.Свернуть("Номенклатура,КоличествоЗаказано","КоличествоСвободно");
		 
		 Для Индекс = -ТЗ.Количество() По -1 Цикл
		 	уд = ТЗ.Получить(-Индекс-1);
		 	Если уд.КоличествоЗаказано <= уд.КоличествоСвободно Тогда
		    	 ТЗ.Удалить(-Индекс-1);
		 	КонецЕсли;
		 КонецЦикла;
		 
		 Если ТЗ.Количество() > 0 Тогда // Если есть записи - это недогрузы, проверим есть ли что-нибудь на ОТХ
			 Запрос = Новый Запрос;
			 Запрос.УстановитьПараметр("ТЗ",ТЗ);
			 
			 //+++ 21.04.2017 - отбор такой же как в Задании на отгрузку, т.к. в Питере точно пользуются!
			 Если Подразделение = Справочники.Подразделения.НайтиПоКоду("00005") ТОгда 
				 список = Новый СписокЗначений;
				 Список.Добавить(Справочники.Подразделения.НайтиПоКоду("00005"));
				 Список.Добавить(Справочники.Подразделения.ПустаяСсылка());
				 
				 набор = РегистрыСведений.ОтсрочкиПлатежейПоставщикам.СоздатьНаборЗаписей();
				 набор.Прочитать();
				 табКонтр = набор.Выгрузить();
				 табКонтр.Свернуть("Поставщик");
				 
				 СписокКонтрагентов = новый СписокЗначений;
				 СписокКонтрагентов.ЗагрузитьЗначения(табКонтр.ВыгрузитьКолонку("Поставщик"));
			 Иначе
				 список = Новый СписокЗначений;
				 Список.Добавить(Подразделение);
				 
				 СписокКонтрагентов = новый СписокЗначений;
				 СписокКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоКоду("П002518"));   //Алтайский шинный комбинат
				 СписокКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоКоду("П007527"));   //Нортек
			 КонецЕсли;			 

			 Запрос.УстановитьПараметр("СписокКонтрагентов",СписокКонтрагентов);
			 Запрос.УстановитьПараметр("список",Список);
			 
			 ////старый запрос -------------------------------------------------------------------------------------
			 
			 Запрос.Текст = "ВЫБРАТЬ
			 |	ТЗ.Номенклатура,
			 |	ТЗ.КоличествоЗаказано,
			 |	ТЗ.КоличествоСвободно
			 |ПОМЕСТИТЬ Товары
			 |ИЗ
			 |	&ТЗ КАК ТЗ
			 |;
			 |
			 |////////////////////////////////////////////////////////////////////////////////
			 |ВЫБРАТЬ
			 |	Товары.Номенклатура,
			 |	ВЫБОР
			 |		КОГДА Товары.КоличествоЗаказано - Товары.КоличествоСвободно <= ЕСТЬNULL(ТоварыНаОтветственномХраненииОстатки.КоличествоОстаток, 0)
			 |			ТОГДА Товары.КоличествоЗаказано - Товары.КоличествоСвободно
			 |		ИНАЧЕ ЕСТЬNULL(ТоварыНаОтветственномХраненииОстатки.КоличествоОстаток, 0)
			 |	КОНЕЦ КАК Количество,
			 |	ТоварыНаОтветственномХраненииОстатки.Контрагент,
			 |	ТоварыНаОтветственномХраненииОстатки.ДоговорКонтрагента //Удалить,
			 |  //Удалить ТоварыНаОтветственномХраненииОстатки.Склад.ГруппаСкладов как ГруппаСкладов
			 |ИЗ
			 |	Товары КАК Товары
			 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаОтветственномХранении.Остатки(
			 |				,
			 |				Контрагент В (&СписокКонтрагентов)
			 |					И Склад.Подразделение В (&Список)
			 |                   //Исключения И НЕ Склад.ГруппаСкладов В(&Иск)
			 |                   //отбираемые И Склад.ГруппаСкладов В(&Отб)
			 | ) КАК ТоварыНаОтветственномХраненииОстатки
			 |		ПО Товары.Номенклатура = ТоварыНаОтветственномХраненииОстатки.Номенклатура
			 |ГДЕ
			 |	ВЫБОР
			 |			КОГДА Товары.КоличествоЗаказано - Товары.КоличествоСвободно <= ЕСТЬNULL(ТоварыНаОтветственномХраненииОстатки.КоличествоОстаток, 0)
			 |				ТОГДА Товары.КоличествоЗаказано - Товары.КоличествоСвободно
			 |			ИНАЧЕ ЕСТЬNULL(ТоварыНаОтветственномХраненииОстатки.КоличествоОстаток, 0)
			 |		КОНЕЦ > 0";
 
			 СписокИсключенийП = Новый СписокЗначений;
			 СписокОтбираемыхП = Новый СписокЗначений;
			 Если Исключать = 0 и использоватьОтбор Тогда
				 отбор = новый Структура;
				 отбор.Вставить("Флаг",истина);
				 ТЗ = ТаблицаГрупп.Выгрузить();
				 ТЗФлаг = ТЗ.Скопировать(Отбор);
				 Массив = ТЗФлаг.ВыгрузитьКолонку("Группа");
				 СписокИсключенийП.ЗагрузитьЗначения(Массив);
				 Запрос.Текст = СтрЗаменить(Запрос.Текст,"//Исключения","");
				 Запрос.УстановитьПараметр("Иск",СписокИсключенийП);
			 ИначеЕсли Исключать = 1 и использоватьОтбор Тогда
				 отбор = новый Структура;
				 отбор.Вставить("Флаг",истина);
				 ТЗ = ТаблицаГрупп.Выгрузить();
				 ТЗФлаг = ТЗ.Скопировать(Отбор);
				 Массив = ТЗФлаг.ВыгрузитьКолонку("Группа");
				 СписокОтбираемыхП.ЗагрузитьЗначения(Массив);
				 Запрос.Текст = СтрЗаменить(Запрос.Текст,"//отбираемые","");
				 Запрос.УстановитьПараметр("Отб",СписокОтбираемыхП);
			 КонецЕсли;
			 
			 Рез = Запрос.Выполнить().Выгрузить();
			 
			 Запрос.Текст = СтрЗаменить(Запрос.Текст,"//Удалить","");
			 
			 ГрВыбор = Запрос.Выполнить().Выгрузить();
			 
			 Если Рез.Количество() > 0 Тогда
				 Ответ = Вопрос("Есть товары которые требуют списания с ОТХ, 
				 |выполнить авоматическое списание с ОТХ необходимых товаров?", РежимДиалогаВопрос.ДаНет);
				 Если Ответ = КодВозвратаДиалога.Да Тогда
					 ВЫполнитьСписаниеСОТХ(Рез,ГрВыбор);
				 КонецЕсли;//Да	24.04.2017 
					 
					 использоватьОтбор = ложь;
					 Для каждого стрИ из ТаблицаГрупп Цикл
						 Если стрИ.Флаг тогда
							 использоватьОтбор = Истина;
						 КонецЕсли;	
					 КонецЦикла;
					 
					 Если Исключать = 0 и использоватьОтбор Тогда
						 отбор = новый Структура;
						 отбор.Вставить("Флаг",истина);
						 ТЗ = ТаблицаГрупп.Выгрузить();
						 ТЗФлаг = ТЗ.Скопировать(Отбор);
						 Массив = ТЗФлаг.ВыгрузитьКолонку("Группа");
						 
						 СписокИсключений = Новый СписокЗначений;
						 СписокИсключений.ЗагрузитьЗначения(Массив);
						 Результат = ОбновитьСписокГруппТоваров(СписокИсключений);
						 
					 ИначеЕсли Исключать = 1 и использоватьОтбор Тогда
						 
						 отбор = новый Структура;
						 отбор.Вставить("Флаг",истина);
						 ТЗ = ТаблицаГрупп.Выгрузить();
						 ТЗФлаг = ТЗ.Скопировать(Отбор);
						 Массив = ТЗФлаг.ВыгрузитьКолонку("Группа");
						 
						 СписокОтбираемых = Новый СписокЗначений;
						 СписокОтбираемых.ЗагрузитьЗначения(Массив);
						 Результат = ОбновитьСписокГруппТоваров(,СписокОтбираемых);
						 
					 иначе
						 Результат = ОбновитьСписокГруппТоваров();
					 КонецЕсли; 	
					 
					 
				 //КонецЕсли;//да  24.04.2017
			 КонецЕсли;//>0
		 КонецЕсли;
		 
		 //Плотников, 28.09.2016 
		 
		 
		 ДобавитьГруппуСкладов(Результат, 88); //+++ 28.10.2014 добавляем все склады И СРАЗУ ставим ГАЛКИ!
		 
		// Если ОтгрузкаПоМаксОстаткам тогда//сортировка групп складов тоже по макс.остаткам на 1 группе
			 ГруппыСкладов.Сортировать("КоличествоСвободно УБЫВ");
			 ТабЗначРезерв.Строки.Сортировать("КоличествоСвободно УБЫВ");
		// КонецЕсли;	
		 
 		 Для каждого стр1 из ГруппыСкладов цикл
			 стр1.Приоритет = стр1.НомерСтроки;
			 стр1.Флаг = истина;
		 КонецЦикла;
		 
	//ЗаполнитьСписокИДеревоГруппВзаимоисключаяПредыдущиеГруппы();
	
	   //+++  11.11.2014 - СРАЗУ 100%
	   //Предупреждение("Указано максимальное число товаров на каждом складе!
	   //	 			|Используйте стрелки Вверх/Вниз - для изменения порядка...", 10); 
	   // 										
	   //  Возврат;
	 КонецЕсли;	
	 
	 
//+++( 02.11.2014===============================По Новому.... идем прямо по дереву...===========================	 
	Если ТабЗначРезерв.Строки.Количество()=0 тогда
		Если (БезПредупреждения) Тогда 
			;
		Иначе 	
			Предупреждение("Таблица распределения товаров по складам - пуста!
				   |Еще раз нажмите [Обновить] и измените порядок групп.", 30);
		КонецЕсли;
	возврат;
	КонецЕсли;

	
	
//+++ 03.06.2015 - защита от перемещения с Ангара-И на него же!
Для каждого стр1 из ГруппыСкладов цикл
	если стр1.ГруппаСкладов = СкладПолучатель.ГруппаСкладов тогда
		сообщить("Нельзя перемещать со склада: "+строка(стр1.ГруппаСкладов)+" на него же! 
		         |"+строка(стр1.КоличествоЗаказано)+" шт. не нужно перемещать!!!", СтатусСообщения.Внимание);
		стр1.КоличествоЗаказано = 0;
		
		//----------сдвигаем в самый низ ------------
		 Индекс1 = ГруппыСкладов.Индекс(стр1);
		 сдвиг   = ГруппыСкладов.Количество()-1 - Индекс1;
   
		 Если сдвиг>0 Тогда
			Если ТабЗначРезерв.Строки.Количество()-1 > Индекс1 тогда
		    	Если ГруппыСкладов[Индекс1].ГруппаСкладов=ТабЗначРезерв.Строки[Индекс1].ГруппаСкладов тогда
				ТабЗначРезерв.Строки.Сдвинуть(Индекс1, сдвиг);
				КонецЕсли;			
			КонецЕсли;				
			ГруппыСкладов.Сдвинуть(Индекс1, сдвиг);
	  	КонецЕсли;

	КонецЕсли;
КонецЦикла;	
	
//02.11.2014 - новая функция производит расчет взаимоисключения товаров прямо по дереву! 
	ЗаполнитьСписокИДеревоГруппВзаимоисключаяПредыдущиеГруппы();
	
//+++)	 
	 
	Если Товары.Количество()>0 тогда
		Если (БезПредупреждения) Тогда 
			Сообщить("После обновления порядка отгрузки 
		 				|требуется перезаполнить товары!");
		Иначе 	
			 Предупреждение("После обновления порядка отгрузки 
		 				|требуется перезаполнить товары!",10);
		КонецЕсли;						
	 КонецЕсли;
	 
КонецПроцедуры

процедура ЗаполнитьСписокИДеревоГруппВзаимоисключаяПредыдущиеГруппы()
	
	//вся заказанная номенклатура по всем заказам сразу
	Запрос = новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	                |	СУММА(ЗаказыПокупателейОстатки.КоличествоОстаток) КАК КоличествоЗаказаноПоЗаказам,
	                |	СУММА(0) КАК КоличествоУжеЗаказано
	                |ИЗ
	                |	РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя В (&СписокЗаказовПокупателя)) КАК ЗаказыПокупателейОстатки
	                |ГДЕ
	                |	ЗаказыПокупателейОстатки.КоличествоОстаток > 0
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ЗаказыПокупателейОстатки.Номенклатура";
МассивЗаказовПокупателя = ЗаказыПокупателей.ВыгрузитьКолонку("ЗаказПокупателя");
Запрос.УстановитьПараметр("СписокЗаказовПокупателя", МассивЗаказовПокупателя);
ТаблицаЗаказано = Запрос.Выполнить().Выгрузить();

КолСтрокТоваров = 0;

//теперь идем по дереву 4 уровня вложенности...
Для каждого стрГруппа из ТабЗначРезерв.Строки цикл
	Для каждого стрТовар из стрГруппа.Строки цикл
		Для каждого стрСклад из стрТовар.Строки цикл
			Для каждого стрАдрес из стрСклад.Строки цикл
				строкиЗаказано = ТаблицаЗаказано.НайтиСтроки( новый Структура("Номенклатура", стрАдрес.Номенклатура) );
				стр1 = строкиЗаказано[0];
				ОсталосьЗаказать = стр1.КоличествоЗаказаноПоЗаказам - стр1.КоличествоУжеЗаказано;
				
				стрАдрес.КоличествоЗаказано = мин(ОсталосьЗаказать, стрАдрес.КоличествоОстаток); // это пойдет в Товары!
				стр1.КоличествоУжеЗаказано = стр1.КоличествоУжеЗаказано + стрАдрес.КоличествоЗаказано; // прибавляем сюда!
			
				стрАдрес.КоличествоСвободно = мин(стр1.КоличествоЗаказаноПоЗаказам, стрАдрес.КоличествоОстаток); // максимальное количество на этом складе!
				
				если стрАдрес.КоличествоЗаказано>0 тогда
					КолСтрокТоваров = КолСтрокТоваров + 1;
				КонецЕсли;
				
			КонецЦикла;
			//обратный расчет 
			стрСклад.КоличествоЗаказано = стрСклад.Строки.Итог("КоличествоЗаказано");
			стрСклад.КоличествоСвободно = стрСклад.Строки.Итог("КоличествоСвободно");
			стрСклад.КоличествоОстаток  = стрСклад.Строки.Итог("КоличествоОстаток");
        КонецЦикла;
		//обратный расчет 
		стрТовар.КоличествоЗаказано = стрТовар.Строки.Итог("КоличествоЗаказано");
		стрТовар.КоличествоСвободно = стрТовар.Строки.Итог("КоличествоСвободно");
		стрТовар.КоличествоОстаток  = стрТовар.Строки.Итог("КоличествоОстаток");
     КонецЦикла;
	//обратный расчет 
	стрГруппа.КоличествоЗаказано = стрГруппа.Строки.Итог("КоличествоЗаказано");
	стрГруппа.КоличествоСвободно = стрГруппа.Строки.Итог("КоличествоСвободно");
	стрГруппа.КоличествоОстаток  = стрГруппа.Строки.Итог("КоличествоОстаток");
КонецЦикла;	

для i=0 по ТабЗначРезерв.Строки.Количество()-1 цикл
	если ГруппыСкладов[i].ГруппаСкладов = ТабЗначРезерв.Строки[i].ГруппаСкладов тогда
		ГруппыСкладов[i].КоличествоЗаказано = ТабЗначРезерв.Строки[i].КоличествоЗаказано;
		ГруппыСкладов[i].КоличествоСвободно = ТабЗначРезерв.Строки[i].КоличествоСвободно;
	иначе
		Сообщить(строка(i)+" строка - Порядок групп складов не соответствует порядку складов!");
	КонецЕсли;	
КонецЦикла;

ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Заголовок = "3.Товары ("+строка(КолСтрокТоваров)+")";

//+++( 05.02.2018 ПОРЯДОК вниз!
 ГруппаАнгар3 = справочники.ГруппыСкладов.НайтиПоКоду(38);
 стрГруппаАнгар3 = ГруппыСкладов.Найти(ГруппаАнгар3 , "ГруппаСкладов");
 Если стрГруппаАнгар3 <> неопределено тогда
	    Индекс1 = ГруппыСкладов.Индекс(стрГруппаАнгар3);
		N= ГруппыСкладов.Количество();
		k = N-1-Индекс1;
		
	Если k>0 тогда
		для i=1 по k цикл
	 	ГруппыСкладов.Сдвинуть(Индекс1, +1);       //вниз!
		ТабЗначРезерв.Строки.Сдвинуть(Индекс1, +1);//дерево!
		
        Индекс1 = Индекс1+1;
		КонецЦикла;
	Сообщить("Группа "+ строка(ГруппаАнгар3)+" сдвинута автоматически вниз, товары нужно брать в последнюю очередь!", СтатусСообщения.Информация);
	ЗаполнитьСписокИДеревоГруппВзаимоисключаяПредыдущиеГруппы();	
	КонецЕсли;

 КонецЕсли;	 
//+++)

КонецПроцедуры

//=============================ОСНОВНЫЕ ЗАПРОСЫ====================================
функция ОбновитьСписокГруппТоваров(списокГрупп=Неопределено, текГруппа=Неопределено)
		
	Запрос = Новый Запрос;
	//Если списокГрупп=Неопределено Тогда //02.11.2014
	
	//+++ 14.02.2017 для филиалов по задаче № 21921
	флФилиал = Подразделение.ОбособленноеПодразделение;
	Если флФилиал тогда
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
	КонецЕсли;
	
		 //вся заказанная номенклатура по всем заказам сразу
	 Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	                |	СУММА(ЗаказыПокупателейОстатки.КоличествоОстаток) КАК КоличествоЗаказаноПоЗаказам,
	                |	СУММА(0) КАК КоличествоУжеЗаказано
	                |ПОМЕСТИТЬ Заказано
	                |ИЗ
	                |	РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя В (&СписокЗаказовПокупателя)) КАК ЗаказыПокупателейОстатки
					//только +
	                |ГДЕ
	                |	ЗаказыПокупателейОстатки.КоличествоОстаток > 0
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ЗаказыПокупателейОстатки.Номенклатура
	                |
	                |ИНДЕКСИРОВАТЬ ПО
	                |	Номенклатура";

Запрос.Текст =  Запрос.Текст +";
	                |////////////////////////////////////////////////////////////////////////////////
	                |"+ 
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	ТоварыНаСкладахОстатки.ГруппаСкладов КАК ГруппаСкладов,
					|	ТоварыНаСкладахОстатки.Склад как Склад1,
					|	Заказано.Номенклатура КАК Номенклатура,
	                |	Выбор когда Заказано.КоличествоЗаказаноПоЗаказам - Заказано.КоличествоУжеЗаказано>0 тогда
					|		Заказано.КоличествоЗаказаноПоЗаказам - Заказано.КоличествоУжеЗаказано иначе 0 Конец КАК КоличествоЗаказано,
					|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0) как КоличествоОстаток,
	                |	ВЫБОР КОГДА ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0)>0
					|	  ТОГДА
					|	    ВЫБОР КОГДА (Заказано.КоличествоЗаказаноПоЗаказам - Заказано.КоличествоУжеЗаказано)>0 
					|			и ((Заказано.КоличествоЗаказаноПоЗаказам - Заказано.КоличествоУжеЗаказано)<= ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0))
					|		   ТОГДА Заказано.КоличествоЗаказаноПоЗаказам - Заказано.КоличествоУжеЗаказано
	                |		   ИНАЧЕ ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0)
					|		КОНЕЦ
					|	  ИНАЧЕ 0
	                |	КОНЕЦ КАК КоличествоСвободно
					|	,ЕстьNull(ТоварыАдресноеХранениеОстатки.АдресХранения,"""") как АдресХранения
					|	,ЕстьNull(ТоварыАдресноеХранениеОстатки.КоличествоСвободныйОстаток,0)КАК КоличествоСвободноВАдресе
					|	,ТоварыАдресноеХранениеОстатки.АдресХранения.Порядок как Порядок
					
	                |ИЗ
					|	 Заказано КАК Заказано
	                |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ различные
					|			ТовНаСкладах.Склад.ГруппаСкладов как ГруппаСкладов,
					|			ТовНаСкладах.Номенклатура как Номенклатура,
					|			ТовНаСкладах.Склад как Склад,
					|           ЕСТЬNULL(ТовНаСкладах.КоличествоОстаток,0) как КоличествоОстаток
					|			ИЗ РегистрНакопления.ТоварыНаСкладах.Остатки(
	                |				,Склад.Транзитный "+?(флФилиал," и Склад.Подразделение=&Подразделение","=ЛОЖЬ")+"
					|						И Склад.ЗапретитьИспользование=ЛОЖЬ И (Склад <> &ПустойСклад)
					|//И НЕ (Склад.ГруппаСкладов в (&СписокГруппСкладов))
	                |//И Склад.ГруппаСкладов = &ТекГруппа
					
	                |					И Номенклатура В
	                |						(ВЫБРАТЬ РАЗЛИЧНЫЕ Заказано.Номенклатура
	                |						 ИЗ Заказано КАК Заказано)) как ТовНаСкладах ) КАК ТоварыНаСкладахОстатки
	                |			ЛЕВОЕ СОЕДИНЕНИЕ 
					
				//+++ 23.03.2017 чтобы "-" остатки не вылезали!
					|(выбрать рез.Номенклатура, рез.КоличествоОстаток,  рез.Склад  из 
					
					|	РегистрНакопления.РезервНаСкладах.Остатки(
	                //+++ 14.02.2017
				   |		,Склад.Транзитный "+?(флФилиал," и Склад.Подразделение=&Подразделение","=ЛОЖЬ")+"

					|		И Склад.ЗапретитьИспользование=ЛОЖЬ и (Склад <> &ПустойСклад)
					|//И НЕ (Склад.ГруппаСкладов в (&СписокГруппСкладов))
	                |//И Склад.ГруппаСкладов = &ТекГруппа
					
	                |					И Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ Заказано.Номенклатура
	                |										 ИЗ Заказано КАК Заказано)
				//+++ 23.03.2017  - ТОЛЬКО + остатки!
					 |) как рез
					 |ГДЕ рез.КоличествоОстаток>0

					|) КАК РезервНаСкладахОстатки
					|			ПО ТоварыНаСкладахОстатки.Номенклатура = РезервНаСкладахОстатки.Номенклатура
	                |				И ТоварыНаСкладахОстатки.Склад = РезервНаСкладахОстатки.Склад
		//----------------------Адресное хранение--------------------------------------------
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ 
					|		АХ.Номенклатура,
					|		АХ.Склад,
					|		АХ.АдресХранения,
					|		АХ.КоличествоОстаток - ЕстьNull(Резерв.КоличествоОстаток,0) как КоличествоСвободныйОстаток
					|		ИЗ РегистрНакопления.ТоварыАдресноеХранение.Остатки(
					|					 ,Номенклатура В
					|						(ВЫБРАТЬ РАЗЛИЧНЫЕ Заказано.Номенклатура
					|						 ИЗ	Заказано КАК Заказано)
					|//И НЕ (Склад.ГруппаСкладов в (&СписокГруппСкладов))
					|//И Склад.ГруппаСкладов = &ТекГруппа
					|)  как АХ
					|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервНаСкладах.Остатки(
	               // |					&МоментВремениОстаткиРезервы
	                //+++ 14.02.2017
				   	|		,Склад.Транзитный "+?(флФилиал," и Склад.Подразделение=&Подразделение","=ЛОЖЬ")+"

					|И Склад.ЗапретитьИспользование=ЛОЖЬ и (Склад <> &ПустойСклад)
					|//И НЕ (Склад.ГруппаСкладов в (&СписокГруппСкладов))
	                |//И Склад.ГруппаСкладов = &ТекГруппа
					
	                |					И Номенклатура В
	                |						(ВЫБРАТЬ РАЗЛИЧНЫЕ Заказано.Номенклатура
	                |						 ИЗ Заказано КАК Заказано)) КАК Резерв
                    |			ПО АХ.Номенклатура = Резерв.Номенклатура
	                |				И АХ.Склад = Резерв.Склад
                    |				И АХ.АдресХранения = Резерв.АдресХранения
					|ГДЕ
					|	АХ.КоличествоОстаток - ЕстьNull(Резерв.КоличествоОстаток,0)>0
					|)КАК ТоварыАдресноеХранениеОстатки
					
					|			ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварыАдресноеХранениеОстатки.Номенклатура
					|				И ТоварыНаСкладахОстатки.Склад = ТоварыАдресноеХранениеОстатки.Склад
					|		ПО Заказано.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
					|
   //+++ 26.03.2013 ---- только   + остатки! ---------------------------
					|ГДЕ ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0) > 0
					|	
					|
					|УПОРЯДОЧИТЬ ПО
					//+++++++++++++++++++порядок обхода по ячейкам 5000+++++++++++++++++++++++++++++++
					|Номенклатура,
					//---------по складам с максимальным количеством - в первую очередь, тогда мин.число складов потребуется--------
					//|	КоличествоСвободно УБЫВ,
					
					//+++ 15.09.2014 сначала мин.остатки, чтобы подчищать остатки по ВСЕМ адресам любого склада!
					|	КоличествоСвободноВАдресе "+?(ОтгрузкаПоМаксОстаткам, "УБЫВ","")+",
					// по максим.остатку в адреса - в сезон
					//|	КоличествоСвободноВАдресе УБЫВ,
					
					|Порядок
					
					//+++ 15.09.2014 сначала мин.остатки, чтобы подчищать остатки по ВСЕМ складам!
					//|	, КоличествоСвободно УБЫВ 
					|	, КоличествоСвободно "+?(ОтгрузкаПоМаксОстаткам, "УБЫВ","")+"
				    |
					
					//---------или по алфавиту---------------------------------
					|
				    |ИТОГИ
				    |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура),
				    |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Склад1),
				    |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ АдресХранения),
				    |	Максимум(КоличествоЗаказано),
					|	Сумма(КоличествоОстаток),
				    |	сумма(КоличествоСвободноВАдресе),
				    |	СУММА(КоличествоСвободно)
				    |ПО
				    |  ГруппаСкладов
					|, Номенклатура
					|, Склад1
					|АВТОУПОРЯДОЧИВАНИЕ
				    |";					
					
	Если списокГрупп<>Неопределено Тогда
		запрос.Текст = стрЗаменить(запрос.Текст,"//И НЕ (Склад.ГруппаСкладов в (&СписокГруппСкладов))", "И НЕ (Склад.ГруппаСкладов в (&СписокГруппСкладов))");
		Запрос.УстановитьПараметр("СписокГруппСкладов", списокГрупп);
	КонецЕсли;      
	Если текГруппа<>Неопределено Тогда
		запрос.Текст = стрЗаменить(запрос.Текст,"//И Склад.ГруппаСкладов = &ТекГруппа","И Склад.ГруппаСкладов В (&ТекГруппа)");
		Запрос.УстановитьПараметр("ТекГруппа",ТекГруппа);
	КонецЕсли;	
  	                
	 Запрос.УстановитьПараметр("СписокЗаказовПокупателя", ЗаказыПокупателей.ВыгрузитьКолонку("ЗаказПокупателя"));
	 Запрос.УстановитьПараметр("ПустойСклад", справочники.Склады.ПустаяСсылка() );
	 
	 Результат = Запрос.Выполнить();
	 
	 Запрос.Текст = СтрЗаменить(Запрос.Текст,"ГДЕ ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0) > 0","");
	 
	 СчитаемНедогрузы  = Запрос.Выполнить().Выгрузить();
	 
	 Возврат Результат;
	 
 КонецФункции


  //количество позиций и штук по заказам
Процедура ПересчетКоличестваИСуммПоЗаказам()
	
//Если ВидОперации =Перечисления.ВидыДвиженийПриходРасход.Расход Тогда
	запрос = Новый запрос;
	запрос.текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЗаказыПокупателейОстатки.ЗаказПокупателя,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПокупателейОстатки.Номенклатура) КАК КоличествоПозиций,
	               |	СУММА(ЗаказыПокупателейОстатки.КоличествоОстаток) КАК КоличествоШтук
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя В (&СписокЗаказов)) КАК ЗаказыПокупателейОстатки
	               |ГДЕ
	               |	ЗаказыПокупателейОстатки.Номенклатура.Услуга = ЛОЖЬ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказыПокупателейОстатки.ЗаказПокупателя";
	запрос.УстановитьПараметр("СписокЗаказов", ЗаказыПокупателей.ВыгрузитьКолонку("ЗаказПокупателя"));
	
	//------------дата проведения реализаций - обязательно должна быть позже МоментаВремени--------------
	УжеЕстьРеализации = естьРеализации();
	
	Если НЕ УжеЕстьРеализации Тогда	
	валютаДок  = Неопределено;
	результат = запрос.Выполнить();
	выборка = результат.Выбрать();
	Пока выборка.Следующий() Цикл
		стр1 = ЗаказыПокупателей.Найти(выборка.ЗаказПокупателя,"ЗаказПокупателя");
		ЗаполнитьЗначенияСвойств(стр1, выборка);
		Если не  стр1.Реализация=Неопределено и не стр1.Реализация.Пустая() и не стр1.Реализация.ПометкаУдаления Тогда
		  стр1.КоличествоПозицийОтгружено = стр1.Реализация.Товары.Количество();
		  стр1.КоличествоШтукОтгружено    = стр1.Реализация.Товары.Итог("Количество");
		  
		  Если ТипЗнч(стр1.Реализация)=Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда //!!! не Для перемещения
		  стр1.Сумма = стр1.Реализация.СуммаДокумента; //только по непомеченным на удаление!
		  		Если валютаДок = Неопределено Тогда
			  		валютаДок = стр1.Реализация.ВалютаДокумента;
				ИначеЕсли валютаДок <> стр1.Реализация.ВалютаДокумента Тогда
					сообщить("Валюта документа: "+строка(стр1.Реализация)+" - отличается от валюты Задания на отгрузку: "+строка(валютаДок)+"! Сумма задания будет неправильной.", СтатусСообщения.Внимание);
				КонецЕсли;
		  КонецЕсли;
			
        Иначе
		  стр1.КоличествоПозицийОтгружено = 0;
		  стр1.КоличествоШтукОтгружено    = 0;
		  стр1.Сумма = 0;
		КонецЕсли;
	КонецЦикла;
	ЭтотОбъект.СуммаДокумента = ЗаказыПокупателей.итог("Сумма");
	Если валютаДок <> Неопределено Тогда
    	ЭтотОбъект.ВалютаДокумента = валютаДок;
	КонецЕсли;	
	
Иначе //+++( 29.07.2014 пересчет по фактическим реализациям 
	
	валютаДок = Неопределено;
	Для каждого стр1 из ЗаказыПокупателей Цикл 
		
		Если не  стр1.Реализация=Неопределено и не стр1.Реализация.Пустая() и не стр1.Реализация.ПометкаУдаления Тогда //+++ 01.08.2014

	      стр1.КоличествоПозицийОтгружено = стр1.Реализация.Товары.Количество();
		  стр1.КоличествоШтукОтгружено    = стр1.Реализация.Товары.Итог("Количество");
		  
		  Если ТипЗнч(стр1.Реализация)=Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда //!!! не Для перемещения
		  стр1.Сумма = стр1.Реализация.СуммаДокумента; //только по непомеченным на удаление!
		  		Если валютаДок = Неопределено Тогда
			   		 валютаДок = стр1.Реализация.ВалютаДокумента;
				ИначеЕсли валютаДок <> стр1.Реализация.ВалютаДокумента Тогда
					сообщить("Валюта документа: "+строка(стр1.Реализация)+" - отличается от валюты Задания на отгрузку: "+строка(валютаДок)+"! Сумма задания будет неправильной.", СтатусСообщения.Внимание);
				КонецЕсли;
		   Иначе
			 стр1.Сумма = 0;
		   КонецЕсли;
		 
	    КонецЕсли; 
	   
	КонецЦикла;
	ЭтотОбъект.СуммаДокумента = ЗаказыПокупателей.итог("Сумма");
	Если валютаДок <> Неопределено Тогда
    	ЭтотОбъект.ВалютаДокумента = валютаДок;
	КонецЕсли;	

КонецЕсли;	//+++)
	

	НомераЗаявокВСтроку="";   
	//ЗаказыПокупателей
	//	Если НЕ ВводитьИтогиВручную Тогда
			ИтогКоличествоПозиций=ЗаказыПокупателей.Итог("КоличествоПозиций");
			ИтогКоличествоШтук=ЗаказыПокупателей.Итог("КоличествоШтук");
			флДобавлен=ложь;
			КомментарийСкладу="";
			Для Каждого строкаЗаказы ИЗ ЗаказыПокупателей Цикл
				Если не строкаЗаказы.ЗаказПокупателя.Пустая() Тогда
					НомераЗаявокВСтроку = НомераЗаявокВСтроку + сокрЛП(строкаЗаказы.ЗаказПокупателя.Номер)+", ";
					Если СокрЛП(строкаЗаказы.ЗаказПокупателя.Комментарий)<>"" 
						и Найти(Комментарий, сокрЛП(строкаЗаказы.ЗаказПокупателя.Номер)+": ")=0 Тогда // комментарий из Заказа в Задание на отгрузку
						Комментарий = Комментарий + сокрЛП(строкаЗаказы.ЗаказПокупателя.Номер)+": "+СокрЛП(строкаЗаказы.ЗаказПокупателя.Комментарий)+"
						|"; флДобавлен=Истина; 
					КонецЕсли;
					//05.10.16 Смирнов
					//Если ЗначениеЗаполнено(строкаЗаказы.ЗаказПокупателя.Контрагент.КонтрагентДляРезерваИМ) //123Заменить
					//	и строкаЗаказы.ЗаказПокупателя.Контрагент.КонтрагентДляРезерваИМ = справочники.Контрагенты.НайтиПоКоду("П004703") //123Заменить
					Если ЗначениеЗаполнено(строкаЗаказы.ЗаказПокупателя.ДоговорКонтрагента.КонтрагентДляРезерваИМ)
						и строкаЗаказы.ЗаказПокупателя.ДоговорКонтрагента.КонтрагентДляРезерваИМ = справочники.Контрагенты.НайтиПоКоду("П004703")

						//+++ 14.03.2017 - это признак выгрузки прайсов в Terminal  и он же - НЕ контролирует Ангар-И
						и   строкаЗаказы.ЗаказПокупателя.Контрагент.НеВыгружать = ЛОЖЬ 
			
						 тогда //23.01.2017
						КомментарийСкладу=КомментарийСкладу+?(СокрЛП(строкаЗаказы.ЗаказПокупателя.КомментарийДляСклада)<>"",СокрЛП(строкаЗаказы.ЗаказПокупателя.КомментарийДляСклада)+Символы.ПС,"");
					КонецЕсли;
					//--05.10.16 Смирнов
				КонецЕсли;
				
			КонецЦикла;	
			НомераЗаявокВСтроку = лев(НомераЗаявокВСтроку, стрДлина(НомераЗаявокВСтроку)-2);
			
			Если флДобавлен Тогда // только Если сейчас добавляли автоматически - удаляем 2 символа
				Комментарий = лев(Комментарий, стрДлина(Комментарий)-2);
			КонецЕсли;
			//05.10.16 Смирнов
			Если КомментарийСкладу<>"" тогда
				Комментарий = КомментарийСкладу;
			КонецЕсли;
			//--05.10.16 Смирнов
//---------------------пересчет итогового объема-------------------------------------		
	итогОбъем1=0;
	Для каждого стр1 из Товары Цикл
		итогОбъем1 = итогОбъем1 + стр1.Количество * ВычислитьОбъемНоменклатуры(стр1.Номенклатура);
	КонецЦикла;
	
	итогОбъем = ?(итогОбъем=Окр(итогОбъем1,0) или итогОбъем1=0, итогОбъем, Окр(итогОбъем1,3) ); // только Округление возможно или 0!

	
//по реализациям по таблице, а не по оформлениюСтрок!----------------------------------------
//Если ВидОперации=Перечисления.ВидыДвиженийПриходРасход.Расход и НЕ ВводитьИтогиВручную Тогда //+++ 05.06.2013	
	колПоз = 0; колШт = 0;  общСуммаДокумента=0;
	ДатаМин = КонецДня(ТекущаяДата()); 
	КолПозЗак=ЗаказыПокупателей.итог("КоличествоПозиций"); 
	КолШтЗак =ЗаказыПокупателей.итог("КоличествоШтук"); 
	ПустаяРеализация = документы.РеализацияТоваровУслуг.ПустаяСсылка();
	общийВес = 0;
	Для Каждого стр1 из ЗаказыПокупателей Цикл
		Если НЕ (стр1.Реализация=Неопределено или стр1.Реализация=ПустаяРеализация или стр1.Реализация.ПометкаУдаления) Тогда
			колПоз1 = стр1.Реализация.Товары.Количество(); 
			Если стр1.КоличествоПозицийОтгружено <> колПоз1  Тогда
				стр1.КоличествоПозицийОтгружено = колПоз1;
			КонецЕсли;
			колШт1 = стр1.Реализация.Товары.Итог("Количество"); 
			Если стр1.КоличествоШтукОтгружено <> колШт1  Тогда
				стр1.КоличествоШтукОтгружено = колШт1;
			КонецЕсли;	
		  колПоз = колПоз + колПоз1;
		  колШт  = колШт  + колШт1;
		  ДатаМин = мин(ДатаМин, стр1.Реализация.Дата); 
		  общийВес = общийВес + стр1.Реализация.общийВес;
		КонецЕсли;
	КонецЦикла;
				
	Если колШт>0 или КолШтЗак>0 Тогда
		процент = ?(КолШтЗак>0, Окр(колШт*100/КолШтЗак,0), 0);
		ЭлементыФормы.РамкаИтогиКоличество.Заголовок = "Итого заказано: "+строка(КолШтЗак)+", отгружено: "+строка(колШт)+" "+?(процент>0, ": ("+строка(процент)+"% шт.)", "");
		Если ИтогКоличествоШтук <> КолШтЗак Тогда
			ИтогКоличествоШтук = КолШтЗак;
		КонецЕсли;	
	Иначе
		Если ГруппыСкладов.итог("КоличествоЗаказано") = ГруппыСкладов.итог("КоличествоСвободно") Тогда
			колШт = ГруппыСкладов.итог("КоличествоЗаказано");
			процент = ?(КолШтЗак>0, Окр(колШт*100/КолШтЗак,0), 0);
			ЭлементыФормы.РамкаИтогиКоличество.Заголовок = "Итого заказано: "+строка(КолШтЗак)+", а Для отгрузки: "+строка(колШт)+" "+?(процент>0, ": ("+строка(процент)+"% шт.)", "");
		Иначе
			ЭлементыФормы.РамкаИтогиКоличество.Заголовок = "Итого заказано >> отгружено";
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыФормы.ЗаказыПокупателей.Колонки.Реализация.ТекстПодвала = "";
	Если ДатаМин <> КонецДня(ТекущаяДата()) и ДатаМин<>'00010101' Тогда
		ЭлементыФормы.ЗаказыПокупателей.Колонки.Реализация.ТекстПодвала = строка(ДатаМин);
		Если ДатаМин<Дата Тогда
			Сообщить("Внимание! Дата и время задания на отгрузку - должно быть раньше даты реализации!", СтатусСообщения.Внимание);
		КонецЕсли;	
	КонецЕсли;	
		
	ЭлементыФормы.ЗаказыПокупателей.Колонки.Вес.ТекстПодвала = "";
	Если общийВес>0 Тогда
		ЭлементыФормы.ЗаказыПокупателей.Колонки.Вес.ТекстПодвала = Формат(общийВес,"ЧДЦ=0");
		ЭлементыФормы.НадписьИтогОбъем.Заголовок = "Общий Вес: "+Формат(общийВес,"ЧДЦ=0; ЧГ=3,0")+" кг.         Объём (куб.м):";
		Если ВесМакс>0 и общийВес/1000>ВесМакс Тогда
			Предупреждение("Превышена максимальная грузоподъёмность машины!
			|Вес: "+строка(общийВес/1000)+"т. превышает "+строка(ВесМакс)+"т. на "+строка(общийВес-ВесМакс*1000)+"кг.",10);
		КонецЕсли;	
	Иначе
		ЭлементыФормы.ЗаказыПокупателей.Колонки.Вес.ТекстПодвала = "";
		ЭлементыФормы.НадписьИтогОбъем.Заголовок = "Объём (куб.м):";
	КонецЕсли;	
	//ЭтаФорма.Модифицированность = ложь; // изменяется Сумма, СуммаДокумента, ИтогКоличествоШтук
//КонецЕсли;//расход

	УстановитьВидимость();
	
КонецПроцедуры


 // приоритеты 0 >> 99 и назад
Процедура пересчитатьЗаказано()
	
	//--------------меняем количество заказанного Для других складов------------------
	табЗнач = ГруппыСкладов.Выгрузить();
	Для Каждого текСтр из табЗнач Цикл
		Если текСтр.приоритет=0 Тогда
			текСтр.приоритет = 99;
		КонецЕсли;
	КонецЦикла;	
	табЗнач.Сортировать("Приоритет");

ужеЗаказано=0;	 Приоритет=0;
	Для Каждого текСтр из табЗнач Цикл
		Если текСтр.приоритет<99 Тогда
			текСтр.КоличествоЗаказано = мин(текСтр.КоличествоЗаказано, текСтр.КоличествоСвободно);
			текСтр.флаг = Истина;
			ужеЗаказано = ужеЗаказано + текСтр.КоличествоЗаказано;
			Если ужеЗаказано>ИтогКоличествоШтук Тогда
				текСтр.КоличествоЗаказано = текСтр.КоличествоЗаказано - (ужеЗаказано - ИтогКоличествоШтук);
				ужеЗаказано = ИтогКоличествоШтук;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого текСтр из табЗнач Цикл
		Если текСтр.приоритет=99 Тогда
	        текСтр.КоличествоЗаказано =  ИтогКоличествоШтук - ужеЗаказано;
            текСтр.Приоритет = 0;
			текСтр.флаг = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ГруппыСкладов.Загрузить(табЗнач);
	
	Если ГруппыСкладов.Количество()=0 тогда
		Предупреждение("Товары по заказам - уже отгружены или заказы сняты.
						|А также возможно нет свободных остатков на складах, 
						|с учетом более ранних отгрузок по этому же товару.");
	КонецЕсли;	
			 
КонецПроцедуры
 
//=====================================================================================================================================
Процедура ГруппыСкладовПриоритетПриИзменении(Элемент)
	
	КоманднаяПанельТовары2Обновить(Неопределено);   //при изменении приоритета надо оновить все строки!
    	
КонецПроцедуры


Процедура ДобавитьГруппуСкладов(Результат, Приоритет1=0)
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	 
	Пока Выборка.Следующий() Цикл
		Если Выборка.КоличествоСвободно<=0 Тогда 
			продолжить 
		КонецЕсли;
	  стр1 = ГруппыСкладов.Добавить();
	  ЗаполнитьЗначенияСвойств(стр1, выборка);
	  стр1.Приоритет = Приоритет1;
		Если стр1.ГруппаСкладов  = справочники.ГруппыСкладов.ПустаяСсылка() Тогда
		 стр1.ГруппаСкладов  = справочники.ГруппыСкладов.ОсновнойСклад; // общий склад 
		Иначе
	  	стр1.ГруппаСкладов  = выборка.ГруппаСкладов;
		КонецЕсли;
		
	//---(((---------------- Дерево ----------------------
	//Если Приоритет1>0 Тогда	
			
	    стрГр = ТабЗначРезерв.строки.Добавить();//2
		ЗаполнитьЗначенияСвойств(стрГр, стр1);
	  	выборкаНом = выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	// Группа -> Номенклатура -> Склад -> Адрес	
		пока выборкаНом.Следующий() Цикл
			Если выборкаНом.КоличествоЗаказано<=0 или выборкаНом.КоличествоСвободно<=0 Тогда 
				продолжить;
			КонецЕсли;
			
			стрНом = стрГр.Строки.Добавить();  //3
	  	    ЗаполнитьЗначенияСвойств(стрНом, выборкаНом);
	        выборкаСклад = выборкаНом.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			колНаСкладах = 0;
			колНаСкладахОстаток =0;
			
			пока выборкаСклад.Следующий() Цикл
				Если выборкаСклад.КоличествоЗаказано<=0 или выборкаСклад.КоличествоСвободно<=0 Тогда 
					продолжить;
				КонецЕсли;
 				//Если колНаСкладах+выборкаСклад.КоличествоСвободно<=выборкаНом.КоличествоЗаказано 
				Если колНаСкладах<выборкаНом.КоличествоЗаказано Тогда //+++
					стрСклад = стрНом.Строки.Добавить(); //4
			  	    ЗаполнитьЗначенияСвойств(стрСклад, выборкаСклад);
					
					стрСклад.КоличествоЗаказано = стрСклад.КоличествоЗаказано - колНаСкладах; // вычитаем то, что уже отгружено с пред.склада!
					
					выборкаАдр = выборкаСклад.Выбрать();
					пока выборкаАдр.Следующий() Цикл
						Если выборкаАдр.КоличествоЗаказано<=0 или выборкаАдр.КоличествоСвободно<=0 Тогда 
							продолжить;
						КонецЕсли;

						Если колНаСкладах<выборкаНом.КоличествоЗаказано Тогда //+++
							стрАдр = стрСклад.Строки.Добавить();  //5
						  	ЗаполнитьЗначенияСвойств(стрАдр, выборкаАдр);
							
							Если выборкаАдр.КоличествоСвободноВАдресе>0 тогда
								стрАдр.КоличествоСвободно = мин(выборкаАдр.КоличествоСвободноВАдресе, выборкаНом.КоличествоЗаказано - колНаСкладах);
								стрАдр.КоличествоОстаток  =	выборкаАдр.КоличествоСвободноВАдресе;
							иначе	
								стрАдр.КоличествоСвободно = мин(выборкаАдр.КоличествоСвободно, выборкаНом.КоличествоЗаказано - колНаСкладах);
							КонецЕсли;
						
							стрАдр.КоличествоЗаказано = стрАдр.КоличествоСвободно;//заказано именно столько же сколько свободно!
							
							//--------- улучшения визуальные --------------
							Если стрСклад.Склад1 = 1 тогда
								стрСклад.Склад1 = стрАдр.Склад1;
							КонецЕсли;
							Если стрСклад.Номенклатура = 1 тогда
								стрСклад.Номенклатура = стрАдр.Номенклатура;
							КонецЕсли;
							Если стрНом.Номенклатура = 1 тогда
								стрНом.Номенклатура = стрАдр.Номенклатура;
							КонецЕсли;

							колНаСкладах = колНаСкладах + стрАдр.КоличествоСвободно;
							колНаСкладахОстаток = колНаСкладахОстаток + выборкаАдр.КоличествоОстаток;
						КонецЕсли;
 					КонецЦикла; //адр
				КонецЕсли;
				
				//+++ 16.07.2013 - группировка по складу - увеличивает остатки пропорционально кол.Адресов!
				числоАдресов = ?(стрСклад.АдресХранения="0", 1, число(стрСклад.АдресХранения));
				стрСклад.КоличествоСвободно = стрСклад.КоличествоСвободно / числоАдресов;
				стрСклад.КоличествоОстаток  = стрСклад.КоличествоОстаток  / числоАдресов;
				
			КонецЦикла;//скл.
			стрНом.КоличествоСвободно = колНаСкладах;
			стрНом.КоличествоОстаток  = стрНом.Строки.Итог("КоличествоОстаток");
		КонецЦикла;
		
		стрГр.КоличествоСвободно = стрГр.Строки.Итог("КоличествоСвободно");
		стр1.КоличествоСвободно = стрГр.КоличествоСвободно;
		
		стрГр.КоличествоЗаказано = стрГр.Строки.Итог("КоличествоЗаказано");
		стр1.КоличествоЗаказано = стрГр.КоличествоЗаказано;
		
		стрГр.КоличествоОстаток = стрГр.Строки.Итог("КоличествоОстаток");
//		стр1.КоличествоОстаток = стр2.КоличествоОстаток;

	//КонецЕсли;
		
	//+++ 25.03.2013 удаляем из дерева 0 приоритеты!
	Если Приоритет1=0 Тогда	
		ТабЗначРезерв.строки.Удалить(стрГр);	
	КонецЕсли;
	//---)))---------------- Дерево ----------------------
	
		
	КонецЦикла;
	
КонецПроцедуры

//как в Зад.Отгр
Процедура КоманднаяПанельТовары2ЗаполнитьПоРезерву(Кнопка) Экспорт
	
	time = 10;	// 10-30 сек
	БезПредупреждения=Ложь; //22.07.2018 вынесен из параметров функции
	
	//+++ 13.09.2013 - 7152 - неправильно!
	
	Если ГруппыСкладов.Количество()=0 или ГруппыСкладов.Итог("Приоритет")=0 Тогда
		Если БезПредупреждения Тогда
			Сообщить("Не заполнен ""Порядок отгрузки"" по группам складов!");
		Иначе 
			Предупреждение("Не заполнен ""Порядок отгрузки"" по группам складов!",time);
			ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ГруппыСкладов;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	//+++ 19.04.2013 - приоритеты должны идти по порядку и ровняться номеру строки...
	N = ГруппыСкладов.Количество();
	Если ГруппыСкладов.Итог("Приоритет")<>(1+N)*N/2 Тогда
		Если БезПредупреждения Тогда
			Сообщить("Выберите все группы складов для отгрузки!");
		Иначе 
			Предупреждение("Выберите все группы складов для отгрузки!",time);
			ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ГруппыСкладов;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	
	//+++( 21.03.2013 - товары всегда заполнять по дереву!
	Если ТабЗначРезерв.Строки.Количество()=0 Тогда 
		Ответ = КодВозвратаДиалога.Да;
		Ответ = Вопрос("Перед заполнением - требуется обновить список складов и товаров по группам складов.
					   |Выполнить обновление?", РежимДиалогаВопрос.ДаНет, time, Ответ,"Обновление порядка отгрузки");
		Если (Ответ = КодВозвратаДиалога.Нет) Тогда
			Предупреждение("Перезаполнение Таблицы ""Товары"" - отменено!");
			Возврат;
		КонецЕсли;
		КоманднаяПанельТовары2Обновить(Неопределено, БезПредупреждения);
	КонецЕсли;
	
	
	//+++( 28.10.2014 - порядок в ГруппыСкладов = Дереву?
	i=0;
	Для каждого стр1 из ТабЗначРезерв.Строки Цикл
		Если ГруппыСкладов.Количество()<i+1
			или стр1.ГруппаСкладов <> ГруппыСкладов[i].ГруппаСкладов тогда
		Ответ = КодВозвратаДиалога.Да;
		Ответ = Вопрос("Порядок отгрузки по Группам складов изменился!
					   |Выполнить обновление списка товаров?", РежимДиалогаВопрос.ДаНет, time, Ответ,"Обновление порядка отгрузки");
			Если (Ответ = КодВозвратаДиалога.Да) Тогда
				КоманднаяПанельТовары2Обновить(Неопределено, БезПредупреждения);
			//иначе	
			//	Сообщить("Порядок складов - определен автоматически...", 10);
			КонецЕсли;
			Прервать;
		КонецЕсли;
	i=i+1; // следующий!
	КонецЦикла;
	
	ТЗ = ЗаказыПокупателей.Выгрузить();
	ТЗ.Свернуть("Реализация");
	Если ТЗ.Количество()>0 Тогда
		
		НадоДелатьОтменуРеализаций = Ложь;
		
		Для i=0 по ТЗ.Количество()-1 Цикл
			Если не тз[i].реализация=неопределено и не тз[i].реализация.пустая() и тз[i].реализация.проведен Тогда
				НадоДелатьОтменуРеализаций = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НадоДелатьОтменуРеализаций Тогда		
		Ответ = КодВозвратаДиалога.Да;
		Ответ = Вопрос("Перед заполнением - требуется Отменить проведение всех реализаций.
					   |Выполнить отмену проведения?", РежимДиалогаВопрос.ДаНет, 0, Ответ,"Обновление порядка отгрузки");
			Если (Ответ = КодВозвратаДиалога.Нет) Тогда
				Предупреждение("Перезаполнение Таблицы ""Товары"" - отменено.");
				Возврат;
			КонецЕсли;
		КоманднаяПанельТоварыРасПровести(неопределено);
		КонецЕсли;

	КонецЕсли;
	
	
	Если Товары.Количество()>0 Тогда
		Ответ = КодВозвратаДиалога.Нет;
		Ответ = Вопрос("Требуется очистить таблицу ""Товары"",
		|которая содержит "+строка(Товары.Количество())+" строк. 
		|Все ранее введенные данные будут удалены!
		|
		|Вы действительно хотите удалить данные?", РежимДиалогаВопрос.ДаНет, 0, Ответ,"Обновить таблицу товаров");
		Если (Ответ = КодВозвратаДиалога.Нет) Тогда
			Предупреждение("Обновление таблицы ""Товары"" - Отменено.");
			Возврат;
		КонецЕсли;
		Товары.Очистить();
	КонецЕсли;
	
	ПустаяГруппаСкладов   = справочники.ГруппыСкладов.ПустаяСсылка();
	ОсновнаяГруппаСкладов = справочники.ГруппыСкладов.ОсновнойСклад;
	//----------------------из дерева-------------------------
	// структура дерева обязательно фиксирована:
	// см. процедуры ОбновитьСписокГруппТоваров() 
	//			   и ДобавитьГруппуСкладов() 
	//
	//	ГруппаСкладов - Склад - Номенклатура
	Если ТабЗначРезерв.Строки.Количество()>0 Тогда
		Для Каждого стрГрСклад из ТабЗначРезерв.Строки Цикл
			Для Каждого стрНом из стрГрСклад.Строки Цикл
				Для Каждого стрСклад из стрНом.Строки Цикл
					Для Каждого стрАдрес из стрСклад.Строки Цикл
						
						//+++ 02.11.2014 если Заказано = 0 то не добавляем строку!
						Если стрАдрес.КоличествоЗаказано<=0 тогда
							продолжить;
						КонецЕсли;
						
						  стрТов = Товары.Добавить();
						  ЗаполнитьЗначенияСвойств(стрТов, стрАдрес); // структуры должы быть идентичны!
						    стрТов.Количество = 0; // мин(стрНом.КоличествоЗаказано, стрНом.КоличествоСвободно);
						  стрТов.Склад      = стрАдрес.Склад1;
						  
						 Если стрТов.ГруппаСкладов=ПустаяГруппаСкладов Тогда
							 стрТов.ГруппаСкладов=ОсновнаяГруппаСкладов;
						 КонецЕсли;	

					 КонецЦикла;//стрАдрес
				КонецЦикла;//стрСклад
			КонецЦикла;//стрНом
		КонецЦикла;	//стрГрСклад
	КонецЕсли;	
	
	
	//+++ 25.03.2013 - после заполнения - сразу В Резерв 
	КоманднаяПанельТовары3ВРезерв(Неопределено);
    УстановитьВидимость();
	
	СортироватьПоПорядку(Товары);
	
	

если ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Расход 
		И Константы.ИспользованиеРезерваНаСкладах.Получить() тогда
	ТЗ = получитьТоварыПоДвижениюЭтогоДокумента();
Иначе
    ТЗ = Товары;
КонецЕсли;	
	
//+++( 13.03.2013 - обратный процесс из проведения! Ошибка при определении мин.остатков
	Если Товары.Итог("КоличествоЗаказано")<>ТЗ.итог("КоличествоЗаказано") тогда
		
		ТЗ.Свернуть("ГруппаСкладов, Склад, АдресХранения, Номенклатура, Код","КоличествоЗаказано, КоличествоСвободно");
		Товары.Очистить();
		Товары.Загрузить(ТЗ);
		
		СортироватьПоПорядку(Товары);
		
		//+++ 28.10.2014 - в обратную сторону
		ТЗ.Свернуть("ГруппаСкладов", "КоличествоЗаказано, КоличествоСвободно");
		ГруппыСкладов.Очистить();
		ГруппыСкладов.Загрузить(ТЗ);
		Для каждого стр1 из ГруппыСкладов цикл
			если стр1.ГруппаСкладов.Пустая() тогда
				стр1.ГруппаСкладов = справочники.ГруппыСкладов.НайтиПоКоду("00");
			КонецЕсли;	
				 стр1.Приоритет = стр1.НомерСтроки;
				 стр1.Флаг = истина;
		КонецЦикла;	
		 
 
	//+++++++++ авто сортировка - для печати - по алфавиту складов и по порядку отгрузки++++++++++++++++++++++
		сообщить("Товары взяты из движения документа по резерву! Проверьте количество в ""2.Порядок отгрузки"" и сортировку при печати!");
	КонецЕсли; 
	
	
	//+++ 08.10.2014 - информационно!
	Если СокрЛП(ЭтотОбъект.ТелефонВодителя)="" или СокрЛП(ЭтотОбъект.Водитель)="" тогда 
		сообщить("Заполните обязательные поля - Фамилия и Телефон водителя! в Задании № "+строка(ЭтотОбъект.Номер), СтатусСообщения.Внимание);
	КонецЕсли;	
	
	попытка // ошибка при записи
		ЭтотОбъект.Записать();
		Предупреждение("Установлен резерв на отгрузку.",10);
	исключение
		сообщить("Нельзя создать Задание на отгрузку для одного из выбранных покупателей !!!", СтатусСообщения.ОченьВажное );// !!!
	КонецПопытки;	
//+++)	
	
	
	Возврат; // всегда по дереву!
	
КонецПроцедуры

//+++ 13.09.2013
функция получитьТоварыПоДвижениюЭтогоДокумента()
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	РезервНаСкладах.Номенклатура КАК Номенклатура,
	                |	РезервНаСкладах.Склад,
	                |	РезервНаСкладах.АдресХранения,
	                |	СУММА(РезервНаСкладах.Количество) КАК КоличествоЗаказано,
	                |	СУММА(РезервНаСкладах.Количество) КАК КоличествоСвободно,
	                |	РезервНаСкладах.Склад.ГруппаСкладов КАК ГруппаСкладов,
	                |	РезервНаСкладах.Номенклатура.Код КАК Код
	                |ИЗ
	                |	РегистрНакопления.РезервНаСкладах КАК РезервНаСкладах
	                |ГДЕ
	                |	РезервНаСкладах.Регистратор = &Регистратор
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	РезервНаСкладах.Номенклатура,
	                |	РезервНаСкладах.Склад,
	                |	РезервНаСкладах.АдресХранения,
	                |	РезервНаСкладах.Склад.ГруппаСкладов,
	                |	РезервНаСкладах.Номенклатура.Код
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	ГруппаСкладов,
					|	Склад,
	                |	Номенклатура
	                |АВТОУПОРЯДОЧИВАНИЕ";
	 
	 Запрос.УстановитьПараметр("Регистратор", ЭтотОбъект.Ссылка);
	 
	 Результат = Запрос.Выполнить();
	 ТЗ1 = Результат.Выгрузить();
	 
	 возврат ТЗ1;
	 
КонецФункции	

Процедура КоманднаяПанельТовары3ВРезерв(Кнопка)
	
	Если Товары.Количество()=0 Тогда
		Предупреждение("Не заполнена таблица ""Товары""!
					   |Невозможно установить Резерв на Складах!");
		Возврат;
	КонецЕсли;	
	
	Если Товары.Итог("КоличествоЗаказано")=0 Тогда
		Предупреждение("Не заполнено Количество Заказано в таблице ""Товары""!
					   |Невозможно установить Резерв на Складах!");
		Возврат;
	КонецЕсли;
	
	//---------автоопределение оперативного проведения------------------
	Если НачалоДня(Дата)=НачалоДня(ТекущаяДата()) Тогда 
		режимПроведения = РежимПроведенияДокумента.Оперативный; //всегда Оперативно
	Иначе		
		режимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;	
	
	Если ЭтотОбъект.ПометкаУдаления	тогда
		ЭтотОбъект.Записать();
	иначе	
		ЭтотОбъект.Записать(РежимЗаписиДокумента.Проведение, режимПроведения);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельТовары2СнятьРезерв(Кнопка)
	ЭтотОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
КонецПроцедуры

Процедура ЗаказыПокупателейРеализацияОткрытие(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = Ложь;
	Если НЕ Элемент.Значение.Пустая() Тогда
		Элемент.Значение.получитьФорму("ФормаДокумента").Открыть();
		ЭлементыФормы.ЗаказыПокупателей.ОбновитьСтроки();
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанельТовары2ФактРавенЗаказу(Кнопка)
	
	Если РольДоступна("ПолныеПрава") или РольДоступна("Кладовщик") Тогда
		//Предупреждение("Заполнение поля Отгружено - производится только Для незаполненных строк, 
		//				|Введенное вручную реальное количество в поле ""Отгружено"" - остаётся.", 30);
	Иначе
		Предупреждение("Заполнение поля Отгружено - производится только реальными данными!");
		Возврат;
	КонецЕсли;	
					   
списУбрать = мПолучитьЛитыеБезНагрузки();//+++ 26.10.2017
	Для Каждого стр1 из Товары Цикл
		Если списУбрать.НайтиПоЗначению(стр1.Номенклатура)<>Неопределено тогда//+++ 26.10.2017 14-30
			продолжить;
		КонецЕсли;	
		Если ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Расход тогда
			колМин = мин(стр1.КоличествоЗаказано, стр1.КоличествоСвободно);
		иначе //Если ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Приход тогда
			колМин = стр1.КоличествоЗаказано;
		КонецЕсли;
		
		Если стр1.Количество=0 Тогда //и не ЗначениеЗаполнено(стр1.АдресХранения) Тогда
			стр1.Количество = колМин;
		ИначеЕсли стр1.Количество > колМин Тогда
			Сообщить(строка(стр1.НомерСтроки)+") Количество отгружено: "+строка(стр1.Количество)+" больше Заказанного: "+строка(колМин)+"!", СтатусСообщения.Внимание);
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

Процедура ГруппыСкладовФлагПриИзменении(Элемент)
	текСтрока = ЭлементыФормы.ГруппыСкладов.ТекущиеДанные;
	Если НЕ элемент.Значение Тогда
		текСтрока.Приоритет = 0;
		ГруппыСкладовПриоритетПриИзменении(Неопределено);
	Иначе    //макс приоритет + 1
		табЗнач = ГруппыСкладов.Выгрузить();
		табЗнач.Свернуть("Приоритет");
		табЗнач.Сортировать("Приоритет Убыв");
		текСтрока.Приоритет = табЗнач[0].Приоритет + 1;
		ГруппыСкладовПриоритетПриИзменении(Неопределено);
	КонецЕсли;	
КонецПроцедуры

Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.ячейки.Флаг.ОтображатьТекст  = Ложь;
	ОформлениеСтроки.ячейки.Флаг.ОтображатьФлажок = Истина;
	ОформлениеСтроки.ячейки.Флаг.Флажок = (ДанныеСтроки.Количество>0);
	
Если ЭлементыФормы.Товары.Колонки.Код.Видимость Тогда	
	ОформлениеСтроки.ячейки.Код.ОтображатьТекст  = Истина;
	ОформлениеСтроки.ячейки.Код.Текст = ДанныеСтроки.Номенклатура.Код;
КонецЕсли;

//из модуля яштПрочее - то что видно...
	мКолонкиТовары = ЭлементыФормы.Товары.Колонки;
	Если мКолонкиТовары.Объем.Видимость Тогда
		ПоказатьОбъем(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	КонецЕсли;
	
//13.01.2016 - расцветка как в Задании на отгрузку
	Если ДанныеСтроки.Количество<>ДанныеСтроки.КоличествоЗаказано тогда
		ОформлениеСтроки.Шрифт = новый Шрифт(ОформлениеСтроки.Шрифт,,,Истина);
		если ДанныеСтроки.КоличествоЗаказано<ДанныеСтроки.Количество тогда // перегруз!
			ОформлениеСтроки.ЦветТекста = webЦвета.Красный;
		КонецЕсли;
	КонецЕсли;	
	Если ДанныеСтроки.Количество=0 тогда // ничего нет!
			ОформлениеСтроки.ЦветТекста = webЦвета.ТемноСиний;
	КонецЕсли;	
	
КонецПроцедуры


// +++ 22.03.2013 
// Процедура вызывается при выборе пункта "Из терминала сбора данных"
// меню кнопки "Заполнить" командной панели табличного поля "ТоварыАдресноеХранение"
//
Процедура КоманднаяПанельТовары2ИзТерминалаСбораДанных(Кнопка)
Перем Ответ, Данные, ВремТовар, ВремЕдиница;

	//+++ переподключение принудительное - всегда!
			глТорговоеОборудование.ОтключитьОборудование();
		    глТорговоеОборудование.ПодключитьОборудование();
	
	Если глТорговоеОборудование = Неопределено или глТорговоеОборудование.млТерминал.Количество() = 0 Тогда
		Предупреждение("Терминал сбора данных не подключен!");
	Иначе
		Если глТорговоеОборудование.млТерминал.Количество() = 1 Тогда

			РезультатВыбора = глТорговоеОборудование.млТерминал[0];

		Иначе

			СписокТерминаловСбораДанных = Новый СписокЗначений;
			Для Каждого ТерминалСбораДанных из глТорговоеОборудование.млТерминал Цикл
				СписокТерминаловСбораДанных.Добавить(ТерминалСбораДанных, ТерминалСбораДанных.Модель);
			КонецЦикла;
			РезультатВыбора = СписокТерминаловСбораДанных.ВыбратьЭлемент("Выберите терминал сбора данных");
			Если РезультатВыбора = Неопределено Тогда
				Возврат;
			КонецЕсли;
			РезультатВыбора = РезультатВыбора.Значение;

		КонецЕсли;
		
		нетАдреса = ЛОЖЬ; //+++ это ВАЖНО !!!
		Ответ = глТорговоеОборудование.ЗагрузитьДанныеИзТерминалаСбораДанных(РезультатВыбора, Данные, нетАдреса);
		
		Если Не ПустаяСтрока(Ответ) Тогда
			Предупреждение(Ответ);
		ИначеЕсли Данные.Количество() = 0 Тогда
			Предупреждение("Из терминала сбора данных не загружено ни одного товара...");
		Иначе
			
			
//------------при первой загрузке из ТСД - требуется очистка, при последующих - нет!-------------------------------			
			Режим = РежимДиалогаВопрос.ДаНет;
			Ответ = Вопрос("Перед Заполнением из ТСД - удалить ВСЕ значения Количества Отгружено Для адресного хранения?", Режим, 0);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Переспрашивать = Истина;
				Для Каждого стр1 из Товары Цикл
					Если стр1.Склад.АдресноеХранение Тогда
						Если стр1.Количество>0 и Переспрашивать Тогда
							Режим = РежимДиалогаВопрос.ДаНет;
							Ответ = Вопрос("Вы действительно хотите удалить ВСЕ ранее введенные значения Количества Отгружено?", Режим, 0);
							Если Ответ = КодВозвратаДиалога.Да Тогда
								прервать;
							КонецЕсли;	
						Переспрашивать = Ложь;
						КонецЕсли;
					
						стр1.Количество = 0;
						
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;

			
			i=0;    
			пустойСклад = справочники.Склады.ПустаяСсылка();
	//--------------------------------------------------------------------------------------------------------------------------		
			Для Каждого СтрокаДанных Из Данные Цикл
				
				Если стрДлина(СтрокаДанных.штриХкод)=13 тогда //16.11.2015  - поиск по штрихКоду
				    если лев(СтрокаДанных.штриХкод,5) = "05000" тогда // "наш" код = префикс + код товара + КС
				        Код = сред(СтрокаДанных.штриХкод, 6,7);
						ВремТовар = Справочники.Номенклатура.НайтиПоКоду(Код);  //+++
					иначе	
						ТаблицаВладельцев = новый ТаблицаЗначений;
				       	Если глТорговоеОборудование.ПолучитьТоварПоШтрихкоду(СтрокаДанных.штриХкод, ТаблицаВладельцев) тогда// пытаемся найти в регСв.ШК!
							ВремТовар = ТаблицаВладельцев[0].Номенклатура;
						иначе
							ВремТовар = справочники.Номенклатура.ПустаяСсылка();
						КонецЕсли;
 				    КонецЕсли; 
			    иначе
				    АдресХ = ЛЕВ(СтрокаДанных.штриХкод,7);
				КонецЕсли;
				
				Если стрДлина(СтрокаДанных.Ячейка)>6 и лев(СтрокаДанных.Ячейка,1) = "1" тогда // "обрезаем" префикс для 5000
				    АдресХ = сред(СтрокаДанных.Ячейка,2,6);  
			    Иначе //как есть но в поле Адреса
				    АдресХ = лев(СтрокаДанных.Ячейка,7);
			    КонецЕсли;

				i=i+1;

				 //09.11.2015 - Аксессуары
				 Если НЕ ЗначениеЗаполнено(ВремТовар) тогда
					ВремТоварТабл = новый ТаблицаЗначений;
					глТорговоеОборудование.ПолучитьТоварПоШтрихкоду(СтрокаДанных.Штрихкод, ВремТоварТабл);
					Если ВремТоварТабл.Количество()>0 тогда
						ВремТовар = ВремТоварТабл[0].Номенклатура;
					КонецЕсли;	
					#Если Клиент тогда 
					Если ЗначениеЗаполнено(ВремТовар) тогда 
						Сообщить("По ШК: "+СокрЛП(СтрокаДанных.Штрихкод)+" Найден товар: "+строка(ВремТовар.Код)+" "+строка(ВремТовар), СтатусСообщения.Информация);
					иначе	
						Сообщить("По ШК: "+СокрЛП(СтрокаДанных.Штрихкод)+" НЕ Найден товар!", СтатусСообщения.Внимание);
					КонецЕсли;	
					#КонецЕсли	
				КонецЕсли;	
				
				Если ЗначениеЗаполнено(ВремТовар) Тогда
					
					
					//+++ 24.12.2012 - 14.07.2017 - для загрузки по ШК склада!
 					СтруктураОтбора = Новый Структура();
					СтруктураОтбора.Вставить("Номенклатура", ВремТовар);
					Склад = справочники.Склады.ПустаяСсылка();
					Адрес = справочники.АдресаХранения.ПустаяСсылка();
					Если лев(АдресХ,2)="99" и стрДлина(АдресХ)=7 тогда 
					АдресХ = прав(АдресХ,5);
					Склад = справочники.Склады.НайтиПоКоду(АдресХ);	
						Если НЕ ЗначениеЗаполнено(Склад) Тогда
						сообщить(строка(i)+" строка - Не найден Склад по коду: "+АдресХ, СтатусСообщения.Внимание);
						Склад = справочники.Склады.ПустаяСсылка();
						КонецЕсли;	
					Иначе
					Адрес = справочники.АдресаХранения.НайтиПоКоду(АдресХ);
						Если НЕ ЗначениеЗаполнено(Адрес) Тогда
						сообщить(строка(i)+" строка - Не найден Адрес по коду: "+АдресХ, СтатусСообщения.Внимание);
						Адрес = справочники.АдресаХранения.ПустаяСсылка();
						КонецЕсли;
					КонецЕсли;
					СтруктураОтбора.Вставить("Склад", Склад);
					СтруктураОтбора.Вставить("АдресХранения",Адрес);


					
					СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(Товары, СтруктураОтбора);  //+++ здесь ТОВАРЫ! +++
					
					Если СтрокаТабличнойЧасти <> Неопределено Тогда
						
						// Нашли, ПЕРЕЗАПИСЫВАЕМ количеством в первой найденной строке.
						СтрокаТабличнойЧасти.Количество = СтрокаДанных.Количество; // +  СтрокаТабличнойЧасти.Количество 
						
						дельта = ПроверкаПревышенияОбщегоКоличества(СтрокаТабличнойЧасти); // только предупреждение!
						
 					Иначе
 						
						//добавляем новую строку.
						
						СтрокаТабличнойЧасти = Товары.Добавить();
						СтрокаТабличнойЧасти.Номенклатура           = ВремТовар;  //+++
						
						СтрокаТабличнойЧасти.Количество             = СтрокаДанных.Количество;
						
						СтрокаТабличнойЧасти.АдресХранения			= Адрес;
						СтрокаТабличнойЧасти.Склад					= ?(ЗначениеЗаполнено(Адрес), Адрес.Владелец, пустойСклад );
						
						// Не нашли - почему-то... это ГРУБАЯ ошибка !!!
						сообщить("Добавлена строка № "+строка(СтрокаТабличнойЧасти.НомерСтроки)+", Товар или Адрес - ОТСУТСТВУЮТ В ЗАДАНИИ !", СтатусСообщения.Внимание);
						
						// Выполнить общие действия Для всех документов при изменении номенклатуры.
						ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

					КонецЕсли;

					// Рассчитать реквизиты табличной части.
					//РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
					//РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

					ЭлементыФормы.Товары.ТекущаяСтрока  = СтрокаТабличнойЧасти;
				КонецЕсли;
			КонецЦикла;

			Ответ = Вопрос("Очистить память терминала сбора данных?", РежимДиалогаВопрос.ДаНет,60,КодВозвратаДиалога.Да,"Очистка ТСД");
			Если Ответ = КодВозвратаДиалога.Да Тогда
				СтрокаТаблицыТерминала = Неопределено;
				Если глТорговоеОборудование = Неопределено 
					или глТорговоеОборудование.млТерминал.Количество()>0 Тогда
					СтрокаТаблицыТерминала = Новый Структура; //+++ 09.01.2012
					СтрокаТаблицыТерминала.Вставить("Объект" , глТорговоеОборудование.млТерминал[0].Объект );
					СтрокаТаблицыТерминала.Вставить("НомерЛУ", глТорговоеОборудование.млТерминал[0].НомерЛУ);
					СтрокаТаблицыТерминала.Вставить("Модель",  глТорговоеОборудование.млТерминал[0].Модель);
				//Иначе // ТСД не подключен.	
				КонецЕсли;
				Ответ = глТорговоеОборудование.ОчиститьПамятьТерминалаСбораДанных(СтрокаТаблицыТерминала);
				Если Не ПустаяСтрока(Ответ) Тогда
					Предупреждение(Ответ);
				КонецЕсли;
			КонецЕсли;
		
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанельТовары2ВыгрузитьВТСД(Кнопка)
	
	ТабДок = СформироватьСписокАдресовХранения();
	
	Если ТабДок<>Неопределено Тогда
		Если глТорговоеОборудование.млТерминал.Количество() = 0 Тогда
			глТорговоеОборудование.ОтключитьОборудование();
			глТорговоеОборудование.ПодключитьОборудование();
		КонецЕсли;
			
		Если глТорговоеОборудование.млТерминал.Количество() = 1 Тогда
			 РезультатВыбора = глТорговоеОборудование.млТерминал[0];
		Иначе
			СписокТерминаловСбораДанных = Новый СписокЗначений;
			Для Каждого ТерминалСбораДанных из глТорговоеОборудование.млТерминал Цикл
				СписокТерминаловСбораДанных.Добавить(ТерминалСбораДанных, ТерминалСбораДанных.Модель);
			КонецЦикла;
			РезультатВыбора = СписокТерминаловСбораДанных.ВыбратьЭлемент("Выберите терминал сбора данных");
			Если РезультатВыбора = Неопределено Тогда
				Предупреждение("Терминал сбора данных не подключен!");
				Возврат;
			КонецЕсли;
			РезультатВыбора = РезультатВыбора.Значение;
		КонецЕсли;
		 ответ = глТорговоеОборудование.ВыгрузитьДанныеВТерминалСбораДанных( РезультатВыбора, ТабДок );
	
	ТабДок.Показать();	
	Предупреждение(" Выгрузка завершена!
				   |"+ответ);
				   
	Иначе
		Предупреждение(" Нет товаров Для выгрузки в ТСД!");
	КонецЕсли;

КонецПроцедуры



//--------требуется новая конфигурация ТСД 
//в которой БазаДанных имеет 5 полей, 5-ое поле - это порядковый номер строки
//					Код / Название / Адрес / Количество / N
//
функция СформироватьСписокАдресовХранения()
	рез = Неопределено;
	
   Запрос = Новый Запрос;
   Запрос.УстановитьПараметр("ссылка", ЭтотОбъект.ссылка);
   Запрос.УстановитьПараметр("АдресХраненияПустой",Справочники.АдресаХранения.ПустаяСсылка() );
   
   Запрос.Текст = "ВЫБРАТЬ
                  |	ЕСТЬNULL(ЗаданиеНаОтгрузку.НомерСтроки, 1000) КАК НомерСтроки,
                  |	ЗаданиеНаОтгрузку.Номенклатура КАК Номенклатура,
                  |	ЗаданиеНаОтгрузку.КоличествоЗаказано КАК КоличествоЗаказано,
                  |	ЗаданиеНаОтгрузку.АдресХранения.Код КАК АдресХраненияКод,
                  |	ЕСТЬNULL(ЗаданиеНаОтгрузку.КоличествоСвободно, 0) КАК КоличествоСвободно
                  |ИЗ
                  |	Документ.ЗаданиеНаОтгрузку.Товары КАК ЗаданиеНаОтгрузку
                  |ГДЕ
                  |	ЗаданиеНаОтгрузку.Ссылка = &Ссылка
                  |	И ЗаданиеНаОтгрузку.Склад.АдресноеХранение
                  |	И ЗаданиеНаОтгрузку.АдресХранения <> &АдресХраненияПустой
                  |
                  |УПОРЯДОЧИТЬ ПО
				  // сортировка по полю Порядок - уже есть при формировании товаров
                  |	НомерСтроки
                  |АВТОУПОРЯДОЧИВАНИЕ";   
				  
выборкаНоменклатуры = Запрос.Выполнить().Выбрать();  // запрос без итогов!

Если выборкаНоменклатуры.Количество()>0 Тогда
	
	табДок =Новый ТабличныйДокумент;
	//	выгружается с 5-ой строки:
	табДок.Область(4,2,4,2).текст = "Код / Название / Адрес / Количество / N";

	//	Данные.ПолучитьОбласть(5,2, Данные.ВысотаТаблицы, Данные.ШиринаТаблицы);
	
	чПМ = 0;  //(число палетто-мест) - это обычный порядковый номер  
	Пока выборкаНоменклатуры.Следующий() Цикл
		чПМ = чПМ + 1;
		  табДок.Область(4+чПМ, 2,  4+чПМ, 2).Текст = СокрЛП(выборкаНоменклатуры.номенклатура.Код);
		  табДок.Область(4+чПМ, 3,  4+чПМ, 3).Текст = Лев(выборкаНоменклатуры.номенклатура.Наименование,75);
		  табДок.Область(4+чПМ, 4,  4+чПМ, 4).Текст = "1"+сокрЛП(выборкаНоменклатуры.АдресХраненияКод);
		  
		  КолМин = Мин(выборкаНоменклатуры.КоличествоЗаказано, выборкаНоменклатуры.КоличествоСвободно);
		  табДок.Область(4+чПМ, 5,  4+чПМ, 5).Текст = КолМин;
		  
		  табДок.Область(4+чПМ, 6,  4+чПМ, 6).Текст = чПМ;   //пн или выборкаНоменклатуры.НомерСтроки;
	КонецЦикла;

рез = табДок;
КонецЕсли;	

	Возврат рез;
КонецФункции


//получает число
функция ПолучитьСвободныйОстатокСклада(Номенклатура, Склад)
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	ТоварыНаСкладахОстатки.Склад,
	 |	СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0)) КАК КоличествоСвободно
	 |ИЗ
	 |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	 //|			&МоментВремени
	 |			,Номенклатура = &Номенклатура
	 |				И Склад = &Склад) КАК ТоварыНаСкладахОстатки
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервНаСкладах.Остатки(
	 //|				&МоментВремени
	 |				,Номенклатура = &Номенклатура
	 |					И Склад = &Склад) КАК РезервНаСкладахОстатки
	 |		ПО ТоварыНаСкладахОстатки.Номенклатура = РезервНаСкладахОстатки.Номенклатура
	 |			И ТоварыНаСкладахОстатки.Склад = РезервНаСкладахОстатки.Склад
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ТоварыНаСкладахОстатки.Склад";
	 
	 Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	 Запрос.УстановитьПараметр("Склад", Склад );
	 
	 //МоментВремени = Новый Граница(Дата, ВидГраницы.Исключая); 
	 //Запрос.УстановитьПараметр("МоментВремени", МоментВремени );
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Если Выборка.Следующий() Тогда
		 рез = выборка.КоличествоСвободно;
	 Иначе
		 рез=0;
	 КонецЕсли;	 

	 Возврат рез;
	 
КонецФункции

//получает выборку Складов и Свободных Остатков
функция ПолучитьСвободныйОстатокГруппы(Номенклатура, ГруппаСкладов)
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ТоварыНаСкладахОстатки.Склад КАК Склад,
	                |	СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0)) КАК КоличествоСвободно
	                |ИЗ
	                |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	                //|			&МоментВремени
	                |			,Номенклатура = &Номенклатура
					|				И НЕ Склад.Транзитный
					|				И НЕ Склад = &ПустойСклад
	                |				И Склад.ГруппаСкладов = &ГруппаСкладов) КАК ТоварыНаСкладахОстатки
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервНаСкладах.Остатки(
	               // |			&МоментВремени
	                |				,Номенклатура = &Номенклатура
	                |					И Склад.ГруппаСкладов = &ГруппаСкладов) КАК РезервНаСкладахОстатки
	                |		ПО ТоварыНаСкладахОстатки.Номенклатура = РезервНаСкладахОстатки.Номенклатура
	                |			И ТоварыНаСкладахОстатки.Склад = РезервНаСкладахОстатки.Склад
	                |ГДЕ
	                |	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0) > 0
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ТоварыНаСкладахОстатки.Склад";
	 
	 Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	 Запрос.УстановитьПараметр("ГруппаСкладов", ?(ГруппаСкладов=справочники.ГруппыСкладов.ОсновнойСклад, справочники.ГруппыСкладов.ПустаяСсылка(), ГруппаСкладов) );
	 Запрос.УстановитьПараметр("ПустойСклад", справочники.Склады.ПустаяСсылка() );
	 МоментВремени = Новый Граница(Дата, ВидГраницы.Исключая); 
	 Запрос.УстановитьПараметр("МоментВремени", МоментВремени );
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Возврат Выборка;
	 
 КонецФункции

//получает число
функция ПолучитьСвободныйОстатокАдреса(Номенклатура, АдресХранения)
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ТоварыАдресноеХранение.АдресХранения,
	                |	ЕСТЬNULL(ТоварыАдресноеХранение.КоличествоОстаток, 0) - ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоСвободно
	                |ИЗ
	                |	РегистрНакопления.ТоварыАдресноеХранение.Остатки(
	                //|			&МоментВремени
	                |			,Номенклатура = &Номенклатура
	                |				И АдресХранения = &АдресХранения) КАК ТоварыАдресноеХранение
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервНаСкладах.Остатки(
	                //|				&МоментВремени
	                |				,Номенклатура = &Номенклатура
	                |					И АдресХранения = &АдресХранения) КАК РезервНаСкладахОстатки
	                |		ПО ТоварыАдресноеХранение.Номенклатура = РезервНаСкладахОстатки.Номенклатура
	                |			И ТоварыАдресноеХранение.Склад = РезервНаСкладахОстатки.Склад
	                |			И ТоварыАдресноеХранение.АдресХранения = РезервНаСкладахОстатки.АдресХранения
	                |";
	 
	 МоментВремени = Новый Граница(Дата, ВидГраницы.Исключая); 
	 Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	 Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	 Запрос.УстановитьПараметр("АдресХранения", АдресХранения );
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Если Выборка.Следующий() Тогда
		 рез = Выборка.КоличествоСвободно;
	 Иначе
		 рез=0;
	 КонецЕсли;	 

	 Возврат рез;
КонецФункции

//выборка всех адресов и свободных остатков
функция ПолучитьСвободныйОстатокВсехАдресов(Номенклатура, Склад)
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ТоварыАдресноеХранение.АдресХранения,
	                |	ЕСТЬNULL(ТоварыАдресноеХранение.КоличествоОстаток, 0) - ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоСвободно
	                |ИЗ
	                |	РегистрНакопления.ТоварыАдресноеХранение.Остатки(
	               // |			&МоментВремени
	                |			,Номенклатура = &Номенклатура
	                |				И Склад = &Склад) КАК ТоварыАдресноеХранение
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервНаСкладах.Остатки(
	               // |				&МоментВремени
	                |				,Номенклатура = &Номенклатура
	                |					И Склад = &Склад) КАК РезервНаСкладахОстатки
	                |		ПО ТоварыАдресноеХранение.Номенклатура = РезервНаСкладахОстатки.Номенклатура
	                |			И ТоварыАдресноеХранение.Склад = РезервНаСкладахОстатки.Склад
	                |			И ТоварыАдресноеХранение.АдресХранения = РезервНаСкладахОстатки.АдресХранения
	                |ГДЕ
	                |	ЕСТЬNULL(ТоварыАдресноеХранение.КоличествоОстаток, 0) - ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0) > 0
	                |
	                |";
	 
	 МоментВремени = Новый Граница(Дата, ВидГраницы.Исключая); 
	 Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	 Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	 Запрос.УстановитьПараметр("Склад", Склад );
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Возврат Выборка;
	 
КонецФункции


//=====================ИНТЕРФЕЙСНЫЕ ФУНКЦИИ ФОРМЫ=====================================

//-при ручном изменении Склада или адреса хранения - получим текущие остатки (свободные)-----

Процедура ТоварыПередУдалением(Элемент, Отказ)
	Если РольДоступна("ПолныеПрава") Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Список формируется автоматически.
					|Вы действительно хотите удалть строку?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			отказ = Истина;
		КонецЕсли;
	иначе
		Предупреждение("У Вас недостаточно прав Для удаления строк из таблицы Товары!", 30);
		отказ = Истина;
	КонецЕсли;	
КонецПроцедуры

Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование)
	КолОсталосьЗаказать = 0;
	Если не Копирование Тогда
		Предупреждение("Нельзя просто добавлять строки!
					   |Список товаров формируется по неотгруженным товарам 
					   |из списка Заказов покупателей!", 30);
		Отказ = Истина;
	Иначе
		КолОсталосьЗаказать = Элемент.ТекущаяСтрока.КоличествоЗаказано 
		- ?(Элемент.ТекущаяСтрока.Количество>0, Элемент.ТекущаяСтрока.Количество, Элемент.ТекущаяСтрока.КоличествоСвободно);
		Если КолОсталосьЗаказать <= 0 Тогда
			Предупреждение("Добавление еще одной строки товара - не требуется!
							|При необходимости, измените Склад(Адрес) в текущей строке!");
			Отказ = Истина;
		Иначе	
		//уменьшим кол.заказано в текущей строке
			Элемент.ТекущаяСтрока.КоличествоЗаказано = ?(Элемент.ТекущаяСтрока.Количество>0, Элемент.ТекущаяСтрока.Количество, Элемент.ТекущаяСтрока.КоличествоСвободно);

			//а остаток - в следующую!!!
			Предупреждение("Осталось отгрузить "+строка(КолОсталосьЗаказать)+" шт.
						   |товара с кодом: "+строка(Элемент.ТекущаяСтрока.Номенклатура.Код), 10);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

Процедура ТоварыСкладПриИзменении(Элемент)
	текСтр = ЭлементыФормы.Товары.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(текСтр.Склад) Тогда
		текСтр.ГруппаСкладов = текСтр.Склад.ГруппаСкладов;
		Если текСтр.ГруппаСкладов=справочники.ГруппыСкладов.ПустаяСсылка() Тогда
			текСтр.ГруппаСкладов = справочники.ГруппыСкладов.ОсновнойСклад;
		КонецЕсли;
		текСтр.АдресХранения = справочники.АдресаХранения.ПустаяСсылка();
		текСтр.КоличествоСвободно = ПолучитьСвободныйОстатокСклада(текСтр.Номенклатура, текСтр.Склад);
	Иначе
			 текСтр.АдресХранения = справочники.АдресаХранения.ПустаяСсылка();
		текСтр.КоличествоСвободно = 0 ;
	КонецЕсли;
Если ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Расход Тогда	
Предупреждение("Требуется изменить резерв по данному Заданию на отгрузку. 
				|Нажмите ""Заполнить -> Перезаполнить Резерв""!");	
КонецЕсли;
КонецПроцедуры

Процедура ТоварыАдресХраненияПриИзменении(Элемент)
	
	текСтр = ЭлементыФормы.Товары.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(текСтр.АдресХранения) Тогда
		текСтр.Склад = текСтр.АдресХранения.Владелец;
		текСтр.ГруппаСкладов = текСтр.Склад.ГруппаСкладов;
		Если текСтр.ГруппаСкладов=справочники.ГруппыСкладов.ПустаяСсылка() Тогда
			текСтр.ГруппаСкладов = справочники.ГруппыСкладов.ОсновнойСклад;
		КонецЕсли;	
		текСтр.КоличествоСвободно = ПолучитьСвободныйОстатокАдреса(текСтр.Номенклатура, текСтр.АдресХранения);
	Иначе
	    ТоварыСкладПриИзменении(Неопределено);
	КонецЕсли;
	
	Предупреждение("Требуется изменить резерв по данному Заданию на отгрузку. 
				|Нажмите ""Заполнить -> Перезаполнить Резерв""!");	

КонецПроцедуры


//------------при выборе - даём выбрать только из ГруппыСкладов по текущей номенклатуре------------------------
Процедура ТоварыСкладНачалоВыбора(Элемент, СтандартнаяОбработка)
Если ВидОперации = Перечисления.ВидыДвиженийПриходРасход.расход Тогда  ///Плотников Пновый вид движения
	СтандартнаяОбработка = Ложь;
	
	текСтр = ЭлементыФормы.Товары.ТекущиеДанные;
	
	Если текСтр.ГруппаСкладов = справочники.ГруппыСкладов.ПустаяСсылка() тогда
		Предупреждение("Выбор склада без группы складов - невозможен.
						|Выберите сначала Группу складов!");
		возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.Проведен тогда
		  Режим = РежимДиалогаВопрос.ДаНет;
			Ответ = Вопрос("Уже есть Резерв по данному документу.
						  |Перед выбором Другого склада - требуется снять резерв.
						  |Выполнить отмену проведения текущего Задания?", Режим, 0);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ЭтотОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
 	КонецЕсли;
	
	выборкаСкладов = ПолучитьСвободныйОстатокГруппы(текСтр.Номенклатура, текСтр.ГруппаСкладов);
	
	Если выборкаСкладов.Количество()=0 Тогда 
		Предупреждение("Нет свободных остатков Для товара с кодом: "+строка(текСтр.Номенклатура.Код)+" по группе складов: "+строка(текСтр.ГруппаСкладов));
		Возврат;
	КонецЕсли;
	

	
	списокСкладов = Новый СписокЗначений;
	пока выборкаСкладов.Следующий() Цикл
		 списокСкладов.Добавить(выборкаСкладов.Склад);
	КонецЦикла;	
	
	формаВыбораСклада = справочники.Склады.ПолучитьФормуВыбора();
	
	формаВыбораСклада.СправочникСписок.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
	формаВыбораСклада.СправочникСписок.Отбор.Ссылка.Значение = списокСкладов;
	формаВыбораСклада.СправочникСписок.Отбор.Ссылка.Использование = Истина;
	
	формаВыбораСклада.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Ложь;
	текСтр.Склад = формаВыбораСклада.ОткрытьМодально();
	ТоварыСкладПриИзменении(Неопределено);
иначеЕсли ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Приход Тогда
	Если ЭтотОбъект.Проведен тогда
		  Режим = РежимДиалогаВопрос.ДаНет;
			Ответ = Вопрос("Уже есть Резерв по данному документу.
						  |Перед выбором Другого склада - требуется снять резерв.
						  |Выполнить отмену проведения текущего Задания?", Режим, 0);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ЭтотОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
 	КонецЕсли;

КонецЕсли;

КонецПроцедуры

Процедура ТоварыАдресХраненияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	текСтр = ЭлементыФормы.Товары.ТекущиеДанные;
	
	Если текСтр.Склад.пустая() Тогда
		Предупреждение("Выберите сначала Склад!", 30);
		Возврат;
	КонецЕсли;
	
	Если не текСтр.Склад.АдресноеХранение Тогда
		Предупреждение("Для склада: "+строка(текСтр.Склад)+" - Адресное хранение не используется!",30);
		Возврат;
	КонецЕсли;	
	
	Если ЭтотОбъект.Проведен тогда
		  Режим = РежимДиалогаВопрос.ДаНет;
			Ответ = Вопрос("Уже есть Резерв по данному документу.
						  |Перед выбором Другого адреса - требуется снять резерв.
						  |Выполнить отмену проведения текущего Задания?", Режим, 0);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ЭтотОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
 	КонецЕсли;
	
	выборкаАдресов = ПолучитьСвободныйОстатокВсехАдресов(текСтр.Номенклатура, текСтр.Склад);
	
	Если выборкаАдресов.Количество()=0 Тогда 
		Предупреждение("Нет свободных остатков Для товара с кодом: "+строка(текСтр.Номенклатура.Код)+" по адресам хранения на складе: "+строка(текСтр.Склад));
		Возврат;
	КонецЕсли;
	
	
	списокАдресовХранения = Новый СписокЗначений;
	пока выборкаАдресов.Следующий() Цикл
		 списокАдресовХранения.Добавить(выборкаАдресов.АдресХранения);
	КонецЦикла;	
	
	формаВыбораСклада = справочники.АдресаХранения.ПолучитьФормуВыбора();
	
	формаВыбораСклада.СправочникСписок.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
	формаВыбораСклада.СправочникСписок.Отбор.Ссылка.Значение = списокАдресовХранения;
	формаВыбораСклада.СправочникСписок.Отбор.Ссылка.Использование = Истина;
	
	формаВыбораСклада.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Ложь;
	текСтр.АдресХранения = формаВыбораСклада.ОткрытьМодально();
	ТоварыАдресХраненияПриИзменении(Неопределено);
	
КонецПроцедуры

  
Процедура ЗаказыПокупателейПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
 		ПолучитьАссортимент();
		ПересчетКоличестваИСуммПоЗаказам();
КонецПроцедуры

Процедура ЗаказыПокупателейПослеУдаления(Элемент)
		ПолучитьАссортимент();
		ПересчетКоличестваИСуммПоЗаказам();
КонецПроцедуры

//---------------------------------------работа с реализациями--------------------------------
Процедура КоманднаяПанельТоварыПровестиРеализации(Кнопка)
	Для Каждого стр1 из ЗаказыПокупателей Цикл
		Если не стр1.Реализация=неопределено и не стр1.Реализация.Пустая() и не стр1.Реализация.ПометкаУдаления Тогда
			Попытка
				реализацияОб = стр1.Реализация.ПолучитьОбъект();
				Если ТипЗнч(стр1.Реализация)=Тип("ДокументСсылка.ПеремещениеТоваров") И ВидОперации = Перечисления.ВидыДвиженийПриходРасход.расход тогда /// Плотников Если приход, тогда Внутреннего заказа нет
					внутрЗаказОб = стр1.Реализация.ВнутреннийЗаказ.ПолучитьОбъект();
					внутрЗаказОб.Записать(РежимЗаписиДокумента.Проведение);
           			Сообщить(строка(стр1.НомерСтроки)+") проведен документ: "+строка(внутрЗаказОб), СтатусСообщения.Информация);
	            КонецЕсли;
				реализацияОб.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный ); //23.03.2017 ОБЯЗАТЕЛЬНО оперативно !
				Сообщить(строка(стр1.НомерСтроки)+") проведен документ: "+строка(стр1.Реализация), СтатусСообщения.Информация);
			Исключение
				Сообщить("Ошибка при проведении документа: "+строка(стр1.Реализация) +" - "+ОписаниеОшибки(), СтатусСообщения.Внимание);
			КонецПопытки;	
		КонецЕсли;	
	КонецЦикла;
	
	//Миронычев
	Попытка
		//ПеремещениеПоИзъятию.ПолучитьОбъект();
		Если ЗначениеЗаполнено(ПеремещениеПоИзъятию) тогда
			
			Если ЗначениеЗаполнено(ПеремещениеПоИзъятию.ВнутреннийЗаказ) тогда  //+++ 28.05.2018 - чтобы не было ошибок!
				внутрЗаказОб = ПеремещениеПоИзъятию.ВнутреннийЗаказ.ПолучитьОбъект();
				внутрЗаказОб.Записать(РежимЗаписиДокумента.Проведение);
				Сообщить(строка(стр1.НомерСтроки)+") проведен документ: "+строка(внутрЗаказОб), СтатусСообщения.Информация);
			КонецЕсли;
		
			ПеремИзОб = ПеремещениеПоИзъятию.ПолучитьОбъект();
			ПеремИзОб.Дата = ТекущаяДата();
			ПеремИзОб.Записать(РежимЗаписиДокумента.Проведение);
			Сообщить(строка(стр1.НомерСтроки)+") проведен документ: "+строка(ПеремещениеПоИзъятию), СтатусСообщения.Информация);
			
		КонецЕсли;
		
	Исключение
		Сообщить("Ошибка при проведении документа: "+строка(ПеремещениеПоИзъятию) +" - "+ОписаниеОшибки(), СтатусСообщения.Внимание);
	КонецПопытки;
	//КонецМиронычев
	
	УстановитьВидимость();
	Попытка
		ЭтотОбъект.записать(РежимЗаписиДокумента.Проведение);//сразу перепровести чтобы не было "зависшего" резерва
	Исключение
		Сообщить("Ошибка при проведении ""Задания на отгрузку"": "+ОписаниеОшибки(), СтатусСообщения.Внимание);
	КонецПопытки;	
	
	флКнопкиПровести(ЛОЖЬ);

КонецПроцедуры //Провести

Процедура КоманднаяПанельТоварыРасПровести(Кнопка)
		Для Каждого стр1 из ЗаказыПокупателей Цикл
		Если не стр1.Реализация=неопределено и не стр1.Реализация.Пустая() и не стр1.Реализация.ПометкаУдаления Тогда
			Попытка
				реализацияОб = стр1.Реализация.ПолучитьОбъект();
				Если ТипЗнч(стр1.Реализация)=Тип("ДокументСсылка.ПеремещениеТоваров") И ВидОперации = Перечисления.ВидыДвиженийПриходРасход.расход тогда /// Плотников Если приход, тогда Внутреннего заказа неттогда
					внутрЗаказОб = стр1.Реализация.ВнутреннийЗаказ.ПолучитьОбъект();
					внутрЗаказОб.Записать(РежимЗаписиДокумента.ОтменаПроведения);
           			Сообщить(строка(стр1.НомерСтроки)+") отмена проведения документа: "+строка(внутрЗаказОб), СтатусСообщения.Информация);
	            КонецЕсли;
 				реализацияОб.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Сообщить(строка(стр1.НомерСтроки)+") отмена проведения документа: "+строка(стр1.Реализация), СтатусСообщения.Информация);
			Исключение
				Сообщить("Ошибка при проведении документа: "+строка(стр1.Реализация) +" - "+ОписаниеОшибки(), СтатусСообщения.Внимание);
			КонецПопытки;	
		КонецЕсли;	
	КонецЦикла;
	
	//Миронычев
	Попытка
	//ПеремещениеПоИзъятию.ПолучитьОбъект();
	Если ЗначениеЗаполнено(ПеремещениеПоИзъятию) тогда
		внутрЗаказОб = ПеремещениеПоИзъятию.ВнутреннийЗаказ.ПолучитьОбъект();
		внутрЗаказОб.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Сообщить(строка(стр1.НомерСтроки)+") отмена проведения документа: "+строка(внутрЗаказОб), СтатусСообщения.Информация);
		ПеремещениеПоИзъятию.ПолучитьОбъект().Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;
    Исключение
		Сообщить("Ошибка при отмене проведения документа: "+строка(ПеремещениеПоИзъятию) +" - "+ОписаниеОшибки(), СтатусСообщения.Внимание);

	КонецПопытки;
	//КонецМиронычев

 	УстановитьВидимость();
	Попытка
		ЭтотОбъект.записать(РежимЗаписиДокумента.Проведение);//сразу перепровести чтобы не было "зависшего" резерва
	Исключение
		Сообщить("Ошибка при проведении ""Задания на отгрузку"": "+ОписаниеОшибки(), СтатусСообщения.Внимание);
	КонецПопытки;
	
	флКнопкиПровести(Истина);
	
КонецПроцедуры //РасПровести

Процедура флКнопкиПровести(фл);
 ЭтаФорма.ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПровестиРеализации.доступность = фл;	
 ЭтаФорма.ЭлементыФормы.КоманднаяПанельТовары2.Кнопки.СоздатьРеализацию.Доступность = фл;
 ЭтаФорма.ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Заполнить.Кнопки.СоздатьРеализацию.Доступность = фл;
 ЭтаФорма.ЭлементыФормы.КоманднаяПанельТовары.Кнопки.РасПровести.доступность = не фл;	
 //ЭтаФорма.ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Торг12.Доступность = не фл;
 КонецПроцедуры

Процедура ТоварыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	//---------------------пересчет итогового объема-------------------------------------		
	Если ЭлементыФормы.Товары.Колонки.Объем.Видимость Тогда
		итогОбъем1=0;
		для каждого стр1 из Товары цикл
			итогОбъем1 = итогОбъем1 + стр1.Количество * ВычислитьОбъемНоменклатуры(стр1.Номенклатура);
		КонецЦикла;
		итогОбъем = ?(итогОбъем=Окр(итогОбъем1,0) или итогОбъем1=0, итогОбъем, Окр(итогОбъем1,3) ); // только Округление возможно!
		ЭлементыФормы.Товары.Колонки.Объем.ТекстПодвала = строка(итогОбъем1);
	КонецЕсли;

КонецПроцедуры

Процедура ТоварыГруппаСкладовПриИзменении(Элемент)	
	текСтр = ЭлементыФормы.Товары.ТекущиеДанные;
	Если текСтр.ГруппаСкладов<>справочники.ГруппыСкладов.ПустаяСсылка() тогда
		Если текСтр.Склад.группаСкладов<>текСтр.ГруппаСкладов тогда
			текСтр.Склад = справочники.Склады.ПустаяСсылка();
			текСтр.АдресХранения = справочники.АдресаХранения.ПустаяСсылка();
			текСтр.КоличествоСвободно = 0;
		КонецЕсли;	
	КонецЕсли;		
КонецПроцедуры

Процедура ВремяНапоминанияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	//СтандартнаяОбработка = ложь;
	//Элемент.Значение = Элемент.Значение + Направление * 3600; // +- 1 час
КонецПроцедуры

Процедура ЗаказыПокупателейПередУдалением(Элемент, Отказ)
	
	Если ЭтотОбъект.Проведен тогда
		Предупреждение("Задание на отгрузку уже выполняется!
						|Уже поздно менять состав заказов!", 30);
		отказ = Истина;
	КонецЕсли;	

КонецПроцедуры

Процедура ЗаказыПокупателейПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если ЭтотОбъект.Проведен тогда
		Предупреждение("Задание на отгрузку уже выполняется!
						|Уже поздно менять состав заказов!", 30);
		отказ = Истина;
	КонецЕсли;	

КонецПроцедуры

Процедура КоманднаяПанельТоварыОбновить(Кнопка)
	ПолучитьАссортимент();
	ПересчетКоличестваИСуммПоЗаказам();
КонецПроцедуры

Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
		ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

Процедура КоманднаяПанельТовары2Сортировка(Кнопка)
	СортироватьПоПорядку(Товары);
КонецПроцедуры

Процедура СкладПолучательПриИзменении(Элемент)
	Если не СкладПолучатель.пустая() тогда
		Если СкладПолучатель.Подразделение.Пустая() Тогда
			Подразделение = Справочники.Подразделения.НайтиПоКоду("00005");
		Иначе
			Подразделение = СкладПолучатель.Подразделение;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанельТоварыТорг12(Кнопка)
	
	Если не естьРеализации(истина) тогда
	   Предупреждение("Нет проведенных перемещений!");
	   возврат;
    КонецЕсли;
   
	имяМакета = "Ведомость";
	колЭкземпляров = 1;
	сразуНаПринтер = ложь;
		
	ВвестиЧисло(колЭкземпляров,"Кол-во экземпляров:",1,0) ; 
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос("Распечатать все документы сразу на принтер?", Режим, 30, КодВозвратаДиалога.Нет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
	    сразуНаПринтер = истина;
	КонецЕсли;

	  
	Для Каждого стр1 из ЗаказыПокупателей Цикл
		Если не стр1.Реализация=неопределено и не стр1.Реализация.Пустая() и стр1.Реализация.Проведен Тогда
			
			реализацияОб = стр1.Реализация.ПолучитьОбъект();
			реализацияОб.Печать(имяМакета, колЭкземпляров, сразуНаПринтер);
				
			Сообщить(строка(стр1.НомерСтроки)+") напечатан '"+имяМакета+"' для "+строка(стр1.Реализация), СтатусСообщения.Информация);
		иначеЕсли стр1.Реализация=неопределено или стр1.Реализация.Пустая() тогда
			Сообщить(строка(стр1.НомерСтроки)+") нет документа для печати!", СтатусСообщения.Внимание);
		иначеЕсли НЕ стр1.Реализация.Проведен тогда
			Сообщить(строка(стр1.НомерСтроки)+") документ перемещения не проведен!", СтатусСообщения.Внимание);	
		КонецЕсли;	
	КонецЦикла;
    Сообщить(" ");
	
КонецПроцедуры

Процедура ВводитьИтогиВручнуюПриИзменении(Элемент)
	ЭлементыФормы.ИтогКоличествоПозиций.ТолькоПросмотр = НЕ ВводитьИтогиВручную;
	ЭлементыФормы.ИтогКоличествоШтук.ТолькоПросмотр    = НЕ ВводитьИтогиВручную;
	ЭлементыФормы.ИтогКоличествоПозиций.Доступность = ВводитьИтогиВручную;
	ЭлементыФормы.ИтогКоличествоШтук.Доступность = ВводитьИтогиВручную;
КонецПроцедуры

Процедура ПеревозчикНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка= ЛОЖЬ;
	ФормаВыбораКонтрагента=Справочники.Контрагенты.ПолучитьФормуВыбора();
	ВыбКонтрагент=ФормаВыбораКонтрагента.ОткрытьМодально();
	Перевозчик=?(ЗначениеЗаполнено(ВыбКонтрагент),СокрЛП(ВыбКонтрагент.НаименованиеПолное),"");
КонецПроцедуры


Процедура ДействияФормыДействиеЗаполнитьТТН(Кнопка)
	Если СокрЛП(Водитель) <>"" Тогда	
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1 
		|	МаркаАвтомобиля,
		|	ГосНомерАвтомобиля,
		|	Водитель,
		|	Перевозчик,
		|	ОрганизацияВыдавшаяДоверенность,
		|	ФизЛицоДоверенности,
		|	НомерДоверенности,
			//телефон водителя
		|	ВидПеревозки,
		|    ДатаДоверенности
		|ИЗ  Документ.РеализацияТоваровУслуг 
		|ГДЕ Дата > &НачДата И Водитель ПОДОБНО ""ВОДИТЕЛЬ%""
		|	УПОРЯДОЧИТЬ ПО Дата  УБЫВ";
		
		Запрос.УстановитьПараметр("НачДата",ДобавитьМесяц(ТекущаяДата(),-6));  // поиск по фамилии водителя за 6 месяцев
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"ВОДИТЕЛЬ",Водитель);
		Выборка=Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект,Выборка);
			ЭтотОбъект.ТелефонВодителя = Выборка.ВидПеревозки; 
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ВодительПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры


//--------------------цикл по реализациям----------------------
Процедура ВыполнитьДопПеремещениеКриал(докЗаданиеНаОтгрузку) 	
	списокГрупп0 = новый СписокЗначений;
	списокГрупп  = новый СписокЗначений;
	списокГрупп0.Добавить(справочники.ГруппыСкладов.НайтиПоКоду("02")); //Металлобаза -  2 км.
	списокГрупп0.Добавить(справочники.ГруппыСкладов.НайтиПоКоду("03")); //КриАл       - 15 км.
	
	Запрос = Новый Запрос; //+++ 15.07.2013 -  переход к Складам!
	Запрос.Текст = "ВЫБРАТЬ
	               |	Склады.Ссылка
	               |ИЗ
	               |	Справочник.Склады КАК Склады
	               |ГДЕ
	               |	Склады.ГруппаСкладов В(&ГруппаСкладов0)
	               |	И (НЕ Склады.ПометкаУдаления)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Склады.ГруппаСкладов.Код,
	               |	Склады.Наименование
	               |АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("ГруппаСкладов0", списокГрупп0);
	Результат = Запрос.Выполнить();
	списокГрупп.ЗагрузитьЗначения(  Результат.Выгрузить().ВыгрузитьКолонку("Ссылка") );
		

	СкладПеремещения = справочники.Склады.НайтиПоНаименованию("МеталлКриалТранзит");
	
	
	// реализации могут перепроводиться много раз, 
	// отгрузка длится максимум 1 день,
	// затем закрывается и создается новая, при необходимости
	//
	////ЭлементыФормы.ЗаказыПокупателей.Колонки.Реализация.ТекстПодвала = Строка(НачалоДня(Дата));
	
	//Если ЭлементыФормы.ЗаказыПокупателей.Колонки.Реализация.ТекстПодвала<>"" тогда
	//	минДатаПоиска = НачалоДня( мин(Дата(ЭлементыФормы.ЗаказыПокупателей.Колонки.Реализация.ТекстПодвала)-1, Дата) );  
	//иначе
		минДатаПоиска = НачалоДня(Дата)-1;
	//КонецЕсли;	
	//-------------ищем в цикле склады групп Криал и Металлобаза--------------------
	Для каждого ГруппаСкладов1 из списокГрупп цикл  //1 документ на все перемещения 
		
		комм =  "#Задание на отгрузку "+ссылка.Номер+" ("+строка(ГруппаСкладов1.Значение.ГруппаСкладов)+") от ";  // комментарий по которому ведется поиск!
		док  = найтиДокПеремещения(комм, минДатаПоиска, ГруппаСкладов1.Значение);
		
	Если НЕ СоздаватьПеремещенияКриал тогда //--------------отмена проведения!------------------
		если док.ссылка <> документы.ПеремещениеТоваров.ПустаяСсылка() тогда
			попытка
				док.ПометкаУдаления = Истина;
				док.записать(РежимЗаписиДокумента.ОтменаПроведения, РежимПроведенияДокумента.Неоперативный);
				сообщить("=== > Отменено перемещения по складу: "+строка(ГруппаСкладов1.Значение)+" - "+строка(док) , СтатусСообщения.Информация);
			исключение
				сообщить("Не удалось отменить проведение перемещения для группы: "+строка(ГруппаСкладов1.Значение)+" - "+строка(док), СтатусСообщения.Внимание); 
			КонецПопытки;	
		КонецЕсли;	
	КонецЕсли;	

	Если НЕ СоздаватьПеремещенияКриал тогда //--------------ничего не надо делать!------------------
		продолжить;
	КонецЕсли;
	
	док.Организация = справочники.Организации.НайтиПоКоду("00001");
	док.Ответственный = глТекущийПользователь;
	док.СкладОтправитель = ГруппаСкладов1.Значение;//+++ 15.07.2013
	док.СкладПолучатель  = СкладПеремещения;
	
	минДата=ТекущаяДата(); // дата перемещения на 1 сек раньше самой первой реализации!
	
//-------------бежим по реализациям (перемещениям)-------------------
	Для каждого стр1 из докЗаданиеНаОтгрузку.ЗаказыПокупателей цикл
		Если ЗначениеНеЗаполнено(стр1.Реализация) тогда //+++ 23.05.2013
			продолжить;
		КонецЕсли;	
	    докРеал = стр1.Реализация.получитьОбъект();
        естьИзменения = ложь;
		Для каждого стр2 из докРеал.Товары цикл
			
			//-------------ищем или создает новое перемещение на 5000-1-----------------
			Если ЗначениеЗаполнено(стр2.склад) 
				и стр2.склад = ГруппаСкладов1.Значение тогда
				
				//Если док.СкладОтправитель<>справочники.Склады.ПустаяСсылка() 
				//	и док.СкладОтправитель<>стр2.склад тогда // металлобаз 2 шт, грузим только с одной!
				//	продолжить;
				//КонецЕсли;	
				
			//--------грузчики из реалиазции -> в перемещение---------------------------
				стр3 = док.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(стр3, стр2);
				//Если док.СкладОтправитель = справочники.Склады.ПустаяСсылка() тогда
				//	док.СкладОтправитель = стр2.склад; 
				//КонецЕсли;	
				стр3.Склад = справочники.Склады.ПустаяСсылка(); // склад получатель и отправитель - в шапке!
				стр2.склад = СкладПеремещения;
				естьИзменения = истина;
			//--------заменяем склады и грузчиков в Реализации на грузчиков 5000--------
			
			КонецЕсли;
	
		КонецЦикла;
		Если естьИзменения тогда
			минДата = мин(докРеал.Дата-1, Дата-1);
			Попытка
				докРеал.записать();
				сообщить("Изменены склады группы "+строка(ГруппаСкладов1.Значение)+" в документе: "+строка(докРеал), СтатусСообщения.Информация);
			Исключение
				сообщить("Ошибка при записи документа "+строка(докРеал)+" - "+ОписаниеОшибки(), СтатусСообщения.Внимание);
			КонецПопытки;	
		КонецЕсли;	
	КонецЦикла;//---------------------конец цикла по документам----------------------------
	
	//один документ перемещения на 1 задание
	Если док.Товары.Количество()>0 и СоздаватьПеремещенияКриал тогда
		док.Дата = минДата;
		док.Комментарий = комм+строка(ссылка.Дата)+"#";
		док.ОтражатьВУправленческомУчете = истина;
		док.ОтражатьВБухгалтерскомУчете  = истина;
		док.ОтражатьВНалоговомУчете		 = истина;
		попытка
			док.ПометкаУдаления = ЛОЖЬ;
			
			док.ДанныеПоПогрузке.Очистить();//+++ 07.10.2013
			яштРезервыПоТоварам.ЗаполнениеКТУГрузчиков(док);
			
			док.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный); // чтобы время не сбилось!
			сообщить("===>>> Проведен документ "+строка(док)+" для Склада: "+строка(ГруппаСкладов1.Значение), СтатусСообщения.Информация);
		исключение
			сообщить("Ошибка при создании документа перемещения для Склада: "+строка(ГруппаСкладов1.Значение)+" : "+ОписаниеОшибки() , СтатусСообщения.Внимание);
		КонецПопытки;	
	КонецЕсли;	
	
КонецЦикла;//------------------конец групп складов---------------------------------------------
    
КонецПроцедуры


//-------------------------------поиск документа перемещения-------------------------------------------------------
Функция найтиДокПеремещения(комм, датаМин='20130601', СкладОтпр=неопределено)
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	ПеремещениеТоваров.Ссылка
               |ИЗ
               |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
               |ГДЕ
               |	ПеремещениеТоваров.Дата >= &ДатаМин
               |	И (ПеремещениеТоваров.Комментарий ПОДОБНО &Комментарий)
            	  |	И ПеремещениеТоваров.СкладОтправитель = &СкладОтправитель
			   |";
Запрос.УстановитьПараметр("СкладОтправитель",СкладОтпр);
Запрос.УстановитьПараметр("ДатаМин", датаМин);
Запрос.УстановитьПараметр("Комментарий", комм+"%");
Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();

Если Выборка.Следующий() тогда
	док = выборка.ссылка.ПолучитьОбъект();
	док.Товары.очистить(); // очищаем все что там было!
Иначе
	док = документы.ПеремещениеТоваров.СоздатьДокумент();
КонецЕсли;	

	возврат док;
КонецФункции


Процедура ВыполненоПриИзменении(Элемент)
	Если Выполнено и НЕ ЭтотОбъект.Проведен тогда
		Предупреждение("Нельзя установить флаг ""Выполнено"" для непроведенного документа!",30);
	    Выполнено = ложь;
	КонецЕсли;
	Если Выполнено тогда // дата выполнения, которая проставлена в форме!
		ВремяНапоминания = ТекущаяДата();
	КонецЕсли;	
КонецПроцедуры

Процедура СоздаватьПеремещенияКриал1ПриИзменении(Элемент)
	Предупреждение("При изменении данного флага - 
				   |требуется заново [Создать реализации]");
КонецПроцедуры

Процедура ПолеВвода1НачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	форма1 = справочники.ФизическиеЛица.ПолучитьФормуВыбора();
	форма1.СправочникСписок.отбор.Ссылка.ВидСравнения  = ВидСравнения.ВИерархии;
	форма1.СправочникСписок.отбор.Ссылка.Значение	   = справочники.ФизическиеЛица.НайтиПоНаименованию("Водители");   //Водители
	форма1.СправочникСписок.отбор.Ссылка.Использование = Истина;
	
	форма1.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = ложь;
	Водитель1 = форма1.ОткрытьМодально();
	Водитель  = строка(Водитель1);
	ТелефонВодителя = получитьТелефоны(Водитель1);
КонецПроцедуры

функция получитьТелефоны(ВодительСсылка)
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
|	КонтактнаяИнформация.Представление
|ИЗ
|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
|ГДЕ
|	КонтактнаяИнформация.Объект = &Объект
|	И КонтактнаяИнформация.Тип = &Тип";
Запрос.УстановитьПараметр("Объект", ВодительСсылка);
Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Телефон);

Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();
 рез = "";
Пока Выборка.Следующий() Цикл
	Если СокрЛП(Выборка.Представление)<>"" тогда
		рез = рез+СокрЛП(Выборка.Представление)+"; ";
	КонецЕсли;	
КонецЦикла;

возврат рез;
	
КонецФункции

Процедура КоманднаяПанельТовары3Вверх(Кнопка)
	Индекс1 = ГруппыСкладов.Индекс(ЭлементыФормы.ГруппыСкладов.ТекущиеДанные);
	
	Если Индекс1 > 0  Тогда
		Если ТабЗначРезерв.Строки.Количество()>=Индекс1+1 тогда
			Если ГруппыСкладов[Индекс1].ГруппаСкладов=ТабЗначРезерв.Строки[Индекс1].ГруппаСкладов тогда
			ТабЗначРезерв.Строки.Сдвинуть(Индекс1, -1);
			КонецЕсли;			
		КонецЕсли;			
		ГруппыСкладов.Сдвинуть(Индекс1, -1);
	КонецЕсли;
	
	ЗаполнитьСписокИДеревоГруппВзаимоисключаяПредыдущиеГруппы();//+++ 02.11.2014 - сразу пересчитываем!
	
КонецПроцедуры

//Вниз  - сдвигает строки в 2х таблицах сразу

Процедура КоманднаяПанельТовары3Вниз(Кнопка)
   Индекс1 = ГруппыСкладов.Индекс(ЭлементыФормы.ГруппыСкладов.ТекущиеДанные);
   
    Если Индекс1<ГруппыСкладов.Количество()-1 Тогда
		Если ТабЗначРезерв.Строки.Количество()>=Индекс1+1 тогда
	    	Если ГруппыСкладов[Индекс1].ГруппаСкладов=ТабЗначРезерв.Строки[Индекс1].ГруппаСкладов тогда
			ТабЗначРезерв.Строки.Сдвинуть(Индекс1, +1);
			КонецЕсли;			
		КонецЕсли;				
		ГруппыСкладов.Сдвинуть(Индекс1, +1);
  	КонецЕсли;
	
	ЗаполнитьСписокИДеревоГруппВзаимоисключаяПредыдущиеГруппы();//+++ 02.11.2014 - сразу пересчитываем!

КонецПроцедуры

//показываем инфо от изъятии товаров при частичном недогрузе для Клиентов Резерва ИМ
//
//1 - найти ВСЕ первичные заказы с привязкой по Вторичных заказам
// у которых есть недоотгруженные товары...
// по документу Задание на перемещение
//
//2 - анализ недогрузов ВСЕХ товаров по первичным заказам покупателей. 
//
//3 - предупреждение, что такие заказы НЕ будут Отгружаться/Перемещаться !
//     изменение статуса первичного заказа и уведомление в АЭ 
//   - только при окончательном формировании Задания на отгрузку!
//
Процедура ПослеЗаписи()
	
//+++( 14.12.2016 - напоминание - для менеджера по Тендерам 
	текстСообщения = ""; //задача №20802		 
	мен = неопределено; мен2 = неопределено; контр=неопределено;
	событие  = документы.Событие.СоздатьДокумент();
	Если ЭтотОбъект.Выполнено 
		и ЭтотОбъект.ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Расход тогда
		для каждого стр1 из ЭтотОбъект.ЗаказыПокупателей цикл
			Если стр1.ЗаказПокупателя.ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ФормулаАвтоПлюс тогда
				разница = стр1.КоличествоШтук - стр1.КоличествоШтукОтгружено;
				Если разница > 0 тогда
				текстСообщения = текстСообщения +">> Отгружено на "+строка(разница)+" шт. меньше 
												 |по документу: "+строка(стр1.ЗаказПокупателя)+" создан: "+строка(стр1.Реализация)+"
												 |";
				стр2 = событие.ЗаказыПокупателей.Добавить();								 
				стр2.Документ = стр1.ЗаказПокупателя;
				
				если мен=неопределено тогда 
					мен = стр1.ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо;
				иначеЕсли мен <> стр1.ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо тогда
					мен2 = стр1.ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо;
					сообщить("Уведомление будет отправлено на менеджера: "+ строка(мен));
		        КонецЕсли;
				
				если контр=неопределено тогда 
					контр= стр1.ЗаказПокупателя.Контрагент;
				иначеЕсли контр <> стр1.ЗаказПокупателя.Контрагент тогда
					контр = справочники.Контрагенты.ПустаяСсылка();
                КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли; 
	
	Если текстСообщения <> "" тогда
		
		событие.Ответственный = мен;//кому
		
		событие.ОписаниеСобытия = "Недогруз по перемещениям по ТЕНДЕРАМ!";
		событие.СодержаниеСобытия = текстСообщения; 
		
		событие.Важность = перечисления.Важность.Высокая;
		событие.ВидСобытия = перечисления.ВидыСобытий.Прочее;
		событие.СостояниеСобытия = перечисления.СостоянияСобытий.Запланировано;
		//событие.ТипСобытия = перечисления.ВходящееИсходящееСобытие.Исходящее;
		если контр <> справочники.Контрагенты.ПустаяСсылка() тогда // 1 клиент
			событие.ВидОбъекта = перечисления.ВидыОбъектовСобытия.Контрагент;
			событие.Контрагент = контр;
			событие.КонтактноеЛицо = контр.ОсновноеКонтактноеЛицо;
		КонецЕсли;
	
		событие.Дата = ТекущаяДата();
		событие.ВремяНапоминания =  ТекущаяДата();
		событие.НапомнитьОСобытии = истина;
		
		событие.Комментарий = "#создано автоматически из "+строка(ссылка)+" #";
		попытка
			событие.Записать(РежимЗаписиДокумента.Проведение);
			сообщить("Отправлено уведомление для менеджера: "+ строка(мен)+" о недогрузе при перемещении по ТЕНДЕРАМ!");
		исключение
			сообщить("Сообщите менеджеру: "+ строка(мен)+" - о недогрузе при перемещении по ТЕНДЕРАМ!
			|"+текстСообщения);
			Предупреждение("Сообщите менеджеру: "+ строка(мен)+" - о недогрузе при перемещении по ТЕНДЕРАМ!
			|"+текстСообщения);
		КонецПопытки;	
	КонецЕсли;
	//+++)	
	
	
	Если ЭтотОбъект.Выполнено //+++ 18.07.2016 - напоминание - выводить ВСЕГДА!
		и ЭтотОбъект.ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Расход 

		тогда
		
			 Запрос = Новый Запрос;
			//1а) - ищем все Общие заказы из Текущего задания на перемещение
			 Запрос.Текст = "ВЫБРАТЬ различные
			                |	ЗаданиеНаПеремещение.ЗаказПокупателя
			                |ПОМЕСТИТЬ ВТ_Заказы
			                |ИЗ
			                |	Документ.ЗаданиеНаПеремещение.ЗаказыПокупателей КАК ЗаданиеНаПеремещение
			                |ГДЕ
			                |	ЗаданиеНаПеремещение.Ссылка = &Ссылка
							//+++ 05.07.2016  - ТОЛЬКО для ДПД, Подорожник и т.д.
			                //|	И ЗаданиеНаПеремещение.Ссылка.Контрагент.КонтрагентДляРезерваИМ <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) //123Заменить
				     		|	И ЗаданиеНаПеремещение.ЗаказПокупателя.ДоговорКонтрагента.КонтрагентДляРезерваИМ = &КонтрагентДляРезерваИМ


			                |;
			                |
			                |////////////////////////////////////////////////////////////////////////////////
							//-----------18.07.2016 ВСЕ ТОВАРЫ Которые Здесь отгружались!--------------------------------------
			                |ВЫБРАТЬ
			                |	ЗаданиеТов.Номенклатура,
			                |	СУММА(ЗаданиеТов.Количество) КАК КоличествоОстаток
			                |ПОМЕСТИТЬ ВТ_тов
			                |ИЗ
			                |	Документ.ЗаданиеНаПеремещение.Товары КАК ЗаданиеТов
                            | ГДЕ ЗаданиеТов.Ссылка  = &Ссылка
							|		и ЗаданиеТов.Количество>0
							|СГРУППИРОВАТЬ ПО
			                |	ЗаданиеТов.Номенклатура
			                |;
			                |
			                |////////////////////////////////////////////////////////////////////////////////
			                |ВЫБРАТЬ
			                |	ВложенныйЗапрос.ЗаказПокупателя КАК ЗаказПокупателя,
			                |	МАКСИМУМ(РезервНаСкладахОстатки.КоличествоОстаток) КАК КоличествоОстаток,
			                |	МАКСИМУМ(ВложенныйЗапрос.Количество) КАК Количество,
			                |	РезервНаСкладахОстатки.Номенклатура КАК Номенклатура,
			                |	ВложенныйЗапрос.ЗаказПокупателяДата КАК ЗаказПокупателяДата
			                |ИЗ
			                |	(ВЫБРАТЬ
			                |		ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
			                |		ЗаказПокупателяТовары.Количество КАК Количество,
			                |		ЗаказПокупателяЗаказы.ЗаказПокупателя КАК ЗаказПокупателя,
			               |		ЗаказПокупателяЗаказы.Ссылка.Дата КАК ЗаказПокупателяДата
			                |	ИЗ
			                |		Документ.ЗаказПокупателя.Заказы КАК ЗаказПокупателяЗаказы
			                |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
			                |			ПО ЗаказПокупателяЗаказы.ЗаказПокупателя = ЗаказПокупателяТовары.Ссылка
			                |	ГДЕ
			                |		ЗаказПокупателяЗаказы.Ссылка В
			                |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
			                |					Зак.ЗаказПокупателя
			                |				ИЗ
			                |					ВТ_Заказы КАК Зак)
			                |		И ЗаказПокупателяТовары.Номенклатура В
			                |				(ВЫБРАТЬ
			                |					тов.Номенклатура
			                |				ИЗ
			                |					ВТ_Тов КАК тов)
							|) КАК ВложенныйЗапрос
							|		ЛЕВОЕ СОЕДИНЕНИЕ 
							////+++ 18.07.2016  - только те ТОВАРЫ Которые Здесь отгружались! -------------------------
							//|РегистрНакопления.ТоварыНаСкладах.Остатки(
							//|				&датаКон,
							//|				Склад = &Склад
							//|					И Номенклатура В
							//|						(ВЫБРАТЬ
							//|							тов.Номенклатура
							//|						ИЗ
							//|							ВТ_Тов КАК тов))
							|(выбрать * из ВТ_Тов)
							
							|КАК РезервНаСкладахОстатки
							
							|		ПО ВложенныйЗапрос.Номенклатура = РезервНаСкладахОстатки.Номенклатура
			                |
			                |СГРУППИРОВАТЬ ПО
			                |	ВложенныйЗапрос.ЗаказПокупателя,
			                |	РезервНаСкладахОстатки.Номенклатура,
			                |	ВложенныйЗапрос.ЗаказПокупателяДата
			                |
			                |ИМЕЮЩИЕ
			                |	МАКСИМУМ(ВложенныйЗапрос.Количество) > МАКСИМУМ(РезервНаСкладахОстатки.КоличествоОстаток)
			               // |   и МАКСИМУМ(РезервНаСкладахОстатки.КоличествоОстаток)>=0
							
			                |УПОРЯДОЧИТЬ ПО
			                |	ЗаказПокупателяДата
			                |ИТОГИ
			                |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПокупателя),
			                |	МАКСИМУМ(КоличествоОстаток),
			                |	МАКСИМУМ(Количество)
			                |ПО
			                |	Номенклатура
			                |АВТОУПОРЯДОЧИВАНИЕ;
							|Уничтожить ВТ_Заказы;
							|Уничтожить ВТ_тов;";   
						 
			 Запрос.УстановитьПараметр("ДатаКон", ТекущаяДата()  );
			 Запрос.УстановитьПараметр("Склад", СкладПолучатель);   // ВЕСЬ ТОВАР ДОЛЖЕН БЫТЬ НА ЭТОМ СКЛАДЕ!
			 Запрос.УстановитьПараметр("Ссылка", Ссылка);
			 Запрос.УстановитьПараметр("КонтрагентДляРезерваИМ", справочники.Контрагенты.НайтиПоКоду("П004703"));
			 
			 
			 Результат = Запрос.Выполнить();
			 тестСообщения = истина;
			 
			 Если НЕ результат.Пустой() и тестСообщения тогда
				 сообщить("---------Есть заказы, по которым не все товары перемещены--------------------");
			 КонецЕсли;
			 
			 ВыборкаТов = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			 СписЗак = новый СписокЗначений;
			 
			 Пока ВыборкаТов.Следующий() Цикл
				 тов1 = выборкаТов.Номенклатура;
				 
				 Кол1 = выборкаТов.Количество; // сколько хотели
				 Кол2 = выборкаТов.КоличествоОстаток;  // сколько переместили на склад... этим документом
				 
				 Если тестСообщения тогда
				 сообщить("==> По товару: "+строка(тов1.Код)+" "+СокрЛП(тов1.Наименование)+" - не перемещено: "+строка(Кол1 - Кол2)+" шт.", СтатусСообщения.Внимание);
			 	 КонецЕсли;
			 
				 ВыборкаЗак = ВыборкаТов.Выбрать();
				 
				 Пока ВыборкаЗак.Следующий() Цикл
					зак1    = выборкаЗак.ЗаказПокупателя;        //первичный заказ...
					Если выборкаЗак.Количество > Кол2 тогда
						
						Если тестСообщения тогда
						сообщить("  -> В заказе покупателя: "+строка(зак1.Номер)+" ("+строка(зак1.НомерВходящегоДокумента)+") - заказано: " +строка(выборкаЗак.Количество)+", а переместили только: "+ строка(Кол2)+" шт.
						         |     Все товары этого заказа - требуется изъять из дальнейшей отгрузки!", СтатусСообщения.Внимание);
						КонецЕсли;
					
						Если СписЗак.НайтиПоЗначению(зак1)=неопределено тогда
							СписЗак.Добавить( зак1 );
						КонецЕсли;	
					КонецЕсли;
					Кол2 = Кол2 - выборкаЗак.Количество;    // по фифо - вычитается количество каждого 1-го Заказа из общего кол-ва!
				 КонецЦикла;
			КонецЦикла;
			
			
		 //============================= Анализ и сообщение - что надо Выложить по текущему заданию ==========================
		    Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ЗаказПокупателяТовары.Номенклатура,
			               |	СУММА(ЗаказПокупателяТовары.Количество) КАК Количество,
			               |	ЗаказПокупателяТовары.Ссылка.НомерВходящегоДокумента,
			               |	ЗаказПокупателяТовары.Ссылка.Номер
			               |ПОМЕСТИТЬ ВТ_Тов
			               |ИЗ
			               |	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
			               |ГДЕ
			               |	ЗаказПокупателяТовары.Ссылка В(&СписЗак)
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ЗаказПокупателяТовары.Номенклатура,
			               |	ЗаказПокупателяТовары.Ссылка.НомерВходящегоДокумента,
			               |	ЗаказПокупателяТовары.Ссылка.Номер
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ЗаданиеНаПеремещениеТовары.Номенклатура.Код КАК Код,
			               |	ЗаданиеНаПеремещениеТовары.Номенклатура.Артикул КАК Артикул,
			               |	ЗаданиеНаПеремещениеТовары.Номенклатура КАК Номенклатура,
			               |	СУММА(ЗаданиеНаПеремещениеТовары.Количество) КАК Количество,
			               |	МАКСИМУМ(ЕСТЬNULL(ТовНедогрузов.Количество, 0)) КАК Количество2,
			               |	ВЫБОР
			               |		КОГДА ЗаданиеНаПеремещениеТовары.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Аксессуары)
			               |			ТОГДА ИСТИНА
			               |		ИНАЧЕ ЛОЖЬ
			               |	КОНЕЦ КАК ОбластьАртикул,
			               |	ТовНедогрузов.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
			               |	ТовНедогрузов.Номер
			               |ИЗ
			               |	Документ.ЗаданиеНаПеремещение.Товары КАК ЗаданиеНаПеремещениеТовары
			               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			               |			Тов1.Номенклатура КАК Номенклатура,
			               |			Тов1.Количество КАК Количество,
			               |			Тов1.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
			               |			Тов1.Номер КАК Номер
			               |		ИЗ
			               |			ВТ_Тов КАК Тов1) КАК ТовНедогрузов
			               |		ПО ЗаданиеНаПеремещениеТовары.Номенклатура = ТовНедогрузов.Номенклатура
			               |ГДЕ
			               |	ЗаданиеНаПеремещениеТовары.Ссылка = &Ссылка
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ЗаданиеНаПеремещениеТовары.Номенклатура,
			               |	ЗаданиеНаПеремещениеТовары.Номенклатура.Код,
			               |	ЗаданиеНаПеремещениеТовары.Номенклатура.Артикул,
			               |	ВЫБОР
			               |		КОГДА ЗаданиеНаПеремещениеТовары.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Аксессуары)
			               |			ТОГДА ИСТИНА
			               |		ИНАЧЕ ЛОЖЬ
			               |	КОНЕЦ,
			               |	ТовНедогрузов.НомерВходящегоДокумента,
			               |	ТовНедогрузов.Номер
			               |
			               |ИМЕЮЩИЕ
			               |	МАКСИМУМ(ЕСТЬNULL(ТовНедогрузов.Количество, 0)) > 0 И
			               |	СУММА(ЗаданиеНаПеремещениеТовары.Количество) > 0
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	НомерВходящегоДокумента
			               |АВТОУПОРЯДОЧИВАНИЕ";
			
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Запрос.УстановитьПараметр("СписЗак", СписЗак);
			
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() тогда
				возврат;
			КонецЕсли; 
			 
			Выборка = Результат.Выбрать();
			
			таблДок = новый ТабличныйДокумент;
		    Макет = ПолучитьМакет("Заказ");
			
			областьЗаг = Макет.ПолучитьОбласть("СтрокаЗаголовок");
            таблДок.Вывести( областьЗаг );
			сообщить("---------Требуется изъять из дальнейшей отгрузки следующие товары:--------------------");//02.05.2017 снова показываем!
			
			областьСтр5 = Макет.ПолучитьОбласть("Строка5");
            областьСтр6 = Макет.ПолучитьОбласть("Строка6");
			Пока Выборка.Следующий() Цикл
				сообщить(строка(выборка.Код)+") "+строка(выборка.Номенклатура)+" требуется изъять: "+строка( Кол1 ), СтатусСообщения.Внимание ); //02.05.2017 снова показываем!
				если выборка.ОбластьАртикул тогда
					областьСтр = областьСтр6;
				иначе	
					областьСтр = областьСтр5;
				КонецЕсли;	
				ЗаполнитьЗначенияСвойств( областьСтр.Параметры, выборка );
				областьСтр.Параметры.КоличествоИзъять =  МИН(выборка.Количество, выборка.Количество2); // МИНИМУМ !
				
				таблДок.Вывести( областьСтр );
			КонецЦикла;
			таблДок.Показать(); // печ.форма об изъятии товаров...
			
			
			
		   
		 КонецЕсли;	 //1
		
КонецПроцедуры

Процедура ВЫполнитьСписаниеСОТХ(Рез,ГрВыбор)
	// Если, есть и у АШК и у Нортек, тогда берем с АШК ========================
	
	ДляУдаления = Рез.Скопировать();
	
	Для каждого стр из ДляУдаления Цикл
		ОтборНом = Новый Структура;
		ОтборНом.Вставить("Номенклатура",стр.Номенклатура);
		
		СОтборомПоНом = ДляУдаления.Скопировать(ОтборНом);
		
		Если СОтборомПоНом.Количество()>1 Тогда
			Для Индекс = -Рез.Количество() По -1 Цикл
				уд = Рез.Получить(-Индекс-1);
				Если уд.Контрагент = Справочники.Контрагенты.НайтиПоКоду("П007527") и уд.Номенклатура = стр.Номенклатура Тогда
					Рез.Удалить(-Индекс-1);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	 //+++( 24.04.2017 -  ограничение по ном.группам --- рег.св.  ОтсрочкиПлатежейПоставщикам -------------------
	 ЗапросНомГр = Новый Запрос;
	 ЗапросНомГр.Текст = "ВЫБРАТЬ
	 |	ОтсрочкиПлатежейПоставщикам.Поставщик,
	 |	ОтсрочкиПлатежейПоставщикам.НоменклатурнаяГруппа,
	 |	ОтсрочкиПлатежейПоставщикам.ОтсрочкаДней
	 |ИЗ
	 |	РегистрСведений.ОтсрочкиПлатежейПоставщикам КАК ОтсрочкиПлатежейПоставщикам
	 |ГДЕ
	 |	ОтсрочкиПлатежейПоставщикам.Поставщик В(&СписокКонтрагентов)";
	 табл1 = рез.скопировать(,"Контрагент");	 
	 табл1.Свернуть("Контрагент");
	 СписокКонтрагентов = табл1.ВыгрузитьКолонку("Контрагент");
	 ЗапросНомГр.УстановитьПараметр("СписокКонтрагентов", СписокКонтрагентов );
	 РезультатГр = ЗапросНомГр.Выполнить();
	 ТаблНомГр = РезультатГр.Выгрузить();
	 i=0;
	 пока i<рез.Количество() Цикл //======
		 
		 ДелатьСписаниеОТХ = ложь;
		 
		 для j=0 по ТаблНомГр.Количество()-1 цикл
			 если рез[i].Контрагент = ТаблНомГр[j].Поставщик тогда
				 если ТаблНомГр[j].НоменклатурнаяГруппа = справочники.НоменклатурныеГруппы.ПустаяСсылка() тогда
					 ДелатьСписаниеОТХ = истина;
					 прервать; //
				 иначеесли ТаблНомГр[j].НоменклатурнаяГруппа = рез[i].Номенклатура.НоменклатурнаяГруппа тогда
					 ДелатьСписаниеОТХ = истина;
					 прервать; //
				 КонецЕсли;	 
			 КонецЕсли;
		 КонецЦикла;	 
		 
		 Если ДелатьСписаниеОТХ тогда
			 i=i+1;
		 Иначе
			 Сообщить("Товар "+строка( рез[i].Номенклатура )+" по ном.группе: "+строка(рез[i].Номенклатура.НоменклатурнаяГруппа)
			 +" - нельзя списывать с ОТХ по производителю: "+строка(рез[i].Контрагент), СтатусСообщения.Внимание );
			 рез.Удалить(i);
		 КонецЕсли;	 
	 КонецЦикла;
	 //+++) 

	//==========================================================================
	
	Ск= ГрВыбор.Скопировать();
	Ск.Свернуть("ГруппаСкладов");
	СписокРазрешенныхГрупп = Новый СписокЗначений;
	СписокРазрешенныхГрупп.ЗагрузитьЗначения(Ск.ВыгрузитьКолонку("ГруппаСкладов"));
	
	ПоКонтрагентам = Рез.Скопировать();
	ПоКонтрагентам.Свернуть("Контрагент,ДоговорКонтрагента");
	
	Для каждого стр1 из ПоКонтрагентам Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Контрагент",стр1.Контрагент);
		Отбор.Вставить("ДоговорКонтрагента",стр1.ДоговорКонтрагента);
		
		ПоОдномуДоговору = Рез.Скопировать(Отбор);
		
		ЗаказОТХ = Документы.ЗаказПоОтветственномуХранению.СоздатьДокумент();  //Заказ по ответ хранению
		
		ЗаполнитьШапкуДокументаПоОснованию(ЗаказОТХ, ЭтотОбъект);
		
		ЗаказОТХ.Дата = ТекущаяДата()-10;
		ЗаказОТХ.Контрагент = стр1.Контрагент;
		ЗаказОТХ.ДоговорКонтрагента = стр1.ДоговорКонтрагента;
		ЗаказОТХ.Комментарий = "Сформировано автоматически на основании: " + Строка(ЭтотОбъект);
		
		ЗаказОТХ.ВидОперации = Перечисления.ВидыОперацийПоОтветственномуХранению.Списание;
		
		Для Каждого стр2 из ПоОдномуДоговору Цикл
			СтрокаТоварыОтвХранение=ЗаказОТХ.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоварыОтвХранение, стр2);	
		КонецЦикла;
		
		//Форма = ЗаказОТХ.ПолучитьФорму("ФормаДокумента");
		//Форма.Открыть();
		
		попытка
			ЗаказОТХ.Записать(РежимЗаписиДокумента.Проведение);
			Сообщить("Сформирован " + Строка(ЗаказОТХ.Ссылка));
		Исключение
			Сообщить("Не удалось сформировать Заказ по ответственному хранению, списание с ОТХ не удалось!!!");
			Возврат;
		КонецПопытки;
		//
		ЗаказПостав = Документы.ЗаказПоставщику.СоздатьДокумент(); // Заказ поставщику
		ЗаказПостав.ОбработкаЗаполнения(ЗаказОТХ.Ссылка);
		
		ЗаказПостав.КратностьВзаиморасчетов = 1;
		ЗаказПостав.КурсВзаиморасчетов = 1;
		//+++ 25.04.2017 - как в задании на отгрузку!
		ЗаказПостав.УчитыватьНДС = Истина;
		ЗаказПостав.СуммаВключаетНДС = Истина;

		ЗаказПостав.Склад = Справочники.Склады.НайтиПоНаименованию("1");
		
		ЗаказПостав.Дата = ТекущаяДата()-8;
		
		//определяем число дней отсрочки
		
		ТЗОтсрочки = Новый ТаблицаЗначений;
		ТЗОтсрочки.Колонки.Добавить("НоменклатурнаяГруппа");
				
		Для каждого стрН из ЗаказПостав.Товары Цикл
			НовСтрН = ТЗОтсрочки.Добавить();
			НовСтрН.НоменклатурнаяГруппа = стрН.Номенклатура.НоменклатурнаяГруппа;	
		КонецЦикла;
		
		ТЗОтсрочки.Свернуть("НоменклатурнаяГруппа");
		ТЗОтсрочки.Колонки.Добавить("ЧислоДней");
		
		Для каждого стрН из ТЗОтсрочки Цикл
			НаборЗаписейОб = РегистрыСведений.ОтсрочкиПлатежейПоставщикам.СоздатьНаборЗаписей();
			НаборЗаписейОб.Отбор.Поставщик.Установить(стр1.Контрагент);
			НаборЗаписейОб.Прочитать();
			Если НаборЗаписейОб.Количество()>0 Тогда
				ОтсрочкаЧОб = НаборЗаписейОб[0].ОтсрочкаДней;
			иначе
				ОтсрочкаЧОб = 14;   //такого быть не должно
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.ОтсрочкиПлатежейПоставщикам.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Поставщик.Установить(стр1.Контрагент);
			НаборЗаписей.Отбор.НоменклатурнаяГруппа.Установить(стрН.НоменклатурнаяГруппа);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество()>0 Тогда
				Отсрочка = НаборЗаписей[0].ОтсрочкаДней;
			иначе
				Отсрочка = ОтсрочкаЧОб;
			КонецЕсли;
			
			стрН.ЧислоДней = Отсрочка;
		КонецЦикла;
		
		ТЗОтсрочки.Сортировать("ЧислоДней Возр");
		
		Если ТЗОтсрочки.Количество()>0 Тогда
			ЧислоДнейДоОплаты = ТЗОтсрочки[0].ЧислоДней;
		иначе
			ЧислоДнейДоОплаты = 14;
		КонецЕсли;
		
		ЗаказПостав.ЧислоДнейДоОплаты = ЧислоДнейДоОплаты;
	    ЗаказПостав.ДатаОплаты = ТекущаяДата()+60*60*24*ЧислоДнейДоОплаты;
		
		Для каждого стр3 из ЗаказПостав.Товары Цикл
			//Определяем цену, если это ЛингЛонг то берем из другого регистра
			Если ЗаказПостав.Контрагент = Справочники.Контрагенты.НайтиПоКоду("93920") Тогда 
				ОтборЦен = новый Структура;
				ОтборЦен.Вставить("ТипЦен",Справочники.ТипыЦенНоменклатурыКонтрагентов.НайтиПоКоду("00274"));
				ОтборЦен.Вставить("Номенклатура",стр3.Номенклатура);
				
				Цены = РегистрыСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(ТекущаяДата(),ОтборЦен);
				
				если Цены.Количество() > 0 Тогда
					ЦенаЕд = Цены[0].Цена;
				иначе
					ЦенаЕд = 1;
				КонецЕсли;	
			иначе	
				ОтборЦен = новый Структура;
				ОтборЦен.Вставить("ТипЦен",?(Подразделение = Справочники.Подразделения.НайтиПоКоду("00112") и ЗаказПостав.Контрагент = Справочники.Контрагенты.НайтиПоКоду("П002518"),Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00030"),Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00001")));
				ОтборЦен.Вставить("Номенклатура",стр3.Номенклатура);
				
				Цены = РегистрыСведений.ЦеныНоменклатуры.СрезПоследних(ТекущаяДата(),ОтборЦен);
				
				если Цены.Количество() > 0 Тогда
					ЦенаЕд = Цены[0].Цена;
				иначе
					ЦенаЕд = 1;
				КонецЕсли;	
			КонецЕсли;
			
			стр3.Цена = ЦенаЕд;
			РассчитатьСуммуТабЧасти(стр3, ЗаказПостав);
			РассчитатьСуммуНДСТабЧасти(стр3, ЗаказПостав);
		КонецЦикла;
		
		//Форма = ЗаказПостав.ПолучитьФорму("ФормаДокумента");
		//Форма.Открыть();
		
		УстановитьНомерДокумента(ЗаказПостав);
		
		попытка
			ЗаказПостав.Записать(РежимЗаписиДокумента.Проведение);
			Сообщить("Сформирован " + Строка(ЗаказПостав.Ссылка));
			ЗаказПостав.СоздатьДокументыПоОТХ(Истина,СписокРазрешенныхГрупп);
		Исключение
			Сообщить("Не удалось сформировать Заказ поставщику, списание с ОТХ не удалось!!!");
			ЗаказОТХ.ПометкаУдаления = Истина;
			ЗаказОТХ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Возврат;
		КонецПопытки;		
			
	КонецЦикла;

КонецПроцедуры

Процедура ОтборНажатие(Элемент)
	Форма = ЭтотОбъект.ПолучитьФорму("ФормаВыбораГрупп");
	Форма.ОткрытьМодально();
КонецПроцедуры

// Миронычев
Процедура КоманднаяПанель2ЗаполнитьТоварыДляИзьятия(Кнопка)
	
	Заказы = Новый ТаблицаЗначений;
	Заказы = ТоварыНеНайденные.Выгрузить();
	Заказы.Свернуть("Заказ");
	ТоварыДляИзъятияИзНаборки.Очистить();
	Для Каждого стр из Заказы цикл
		ТоварыПоЗаказам = Стр.Заказ.Товары;
		Для Каждого Товар из ТоварыПоЗаказам Цикл
			Кол = ?(ТоварыНеНайденные.Найти(Товар.Номенклатура, "Номенклатура") = Неопределено, 0, ТоварыНеНайденные.Найти(Товар.Номенклатура, "Номенклатура").Количество);
			Разн = Товар.Количество - кол;
			Если Разн > 0 Тогда
				Ст = ТоварыДляИзъятияИзНаборки.Добавить();
				Ст.Заказ = Стр.Заказ;
				Ст.Номенклатура = Товар.Номенклатура;
				Ст.Количество = Разн;
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "УчетЗаказовИМ" тогда
		ПереключитьРаскладкуDW("EN");
		ШтрихКод = ""; 
		Этаформа.ТекущийЭлемент = Элементыформы.ШтрихКод;
		
	ИначеЕсли ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "Товары" тогда //24.10.2017
		списУбрать = мПолучитьЛитыеБезНагрузки();
		Если списУбрать.Количество()>0 тогда
			 ЭлементыФормы.Товары.ОтборСтрок.Номенклатура.ВидСравнения = ВидСравнения.НеВСписке;
			 ЭлементыФормы.Товары.ОтборСтрок.Номенклатура.Значение     = списУбрать;
			 ЭлементыФормы.Товары.ОтборСтрок.Номенклатура.Использование= Истина;
			 
			 ЭлементыФормы.Товары.НастройкаОтбораСтрок.Номенклатура.Доступность = ЛОЖЬ;
		 КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция  ПереключитьРаскладкуDW(Имя) Экспорт
	Попытка    
		Wrapper = new COMobject("DynamicWrapper"); 
		Wrapper.Register("USER32.DLL", "ActivateKeyboardLayout", "i=ll", "f=s", "r=l");
		Wrapper.Register("USER32.DLL", "LoadKeyboardLayout", "i=sl", "f=s", "r=t");
		
	Исключение
		Возврат Истина; 
	КонецПопытки;
	
	SRus = "00000419"; 
	SEng = "00000409";
	
	NRus = 1049; 
	NEng = 1033; 
	
	Попытка
		Если Нрег(Имя) = Нрег("Rus") тогда
			Wrapper.LoadKeyboardLayout(SRus, 1);
			Wrapper.ActivateKeyboardLayout(NRus, 0);    
		Иначе    
			Wrapper.LoadKeyboardLayout(SEng, 1);
			Wrapper.ActivateKeyboardLayout(NEng, 0);    
		КонецЕсли; 
		возврат Ложь;
	Исключение
		Возврат Истина;
	КонецПопытки;
КонецФункции

Процедура ШтрихКодОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Зказ = Неопределено;	
	док = "";
	КолV=0;
	Для стр = 0 по СтрДлина(Текст)-1 цикл
		Если стр <> СтрДлина(Текст) тогда
			
			СледующийСимвол = Сред(Текст, СтрДлина(Текст)-стр, 1);
			Если СледующийСимвол="V" тогда
				КолV=КолV+1; 
			КонецЕсли;
			
			Если КолV = 3 и  СледующийСимвол<>"V" тогда
				док = СледующийСимвол+док;
			КонецЕсли;
			
		КонецЕсли;	
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&Ссылка)
	|	"+ ?(Лев(Док, 3) = "KTY" ,"И ЗаказПокупателя.НомерВходящегоДокумента = &НомерВходящегоДокумента", "И ЗаказПокупателя.Номер= &НомерВходящегоДокумента") + "";
	
	НомДок = СтрЗаменить(док, "KTY", "");
	НомДок = СтрЗаменить(док, "YST", "");
	МассивЗаказов = Новый Массив;
	Для Каждого стр из ЗаказыПокупателей цикл
		Если Стр.ЗаказПокупателя.ТипЗаказа = 6 тогда
			Для Каждого ст из Стр.ЗаказПокупателя.Заказы цикл
				МассивЗаказов.Добавить(Ст.ЗаказПокупателя);
			КонецЦикла;
		Иначе	
			МассивЗаказов.Добавить(Стр.ЗаказПокупателя);
		КонецЕсли;
	КонецЦикла;
	Если Лев(Док, 3) = "KTY"  Тогда
		НомДок = СтрЗаменить(НомДок,"KTY","");
		Если СтрДлина(НомДок) < 10 тогда
			НадоНулей = 10 - СтрДлина(НомДок);
			ВедущиеНули = Формат(0,"ЧЦ="+НадоНулей+";ЧН=; ЧВН=; ЧГ=0");
			НомДок = "ИМ" + ВедущиеНули + НомДок;
		Иначе
			НомДок = "ИМ"  + НомДок;
		КонецЕсли;
	Иначе
		НомДок = глТранслит(НомДок);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НомерВходящегоДокумента", НомДок);
	Запрос.УстановитьПараметр("Ссылка", МассивЗаказов);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Заказ =  ВыборкаДетальныеЗаписи.ссылка; 
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказПокупателяТовары.Номенклатура,
	|	ЗаказПокупателяТовары.Номенклатура.Код,
	|	ЗаказПокупателяТовары.Номенклатура.ВидТовара,
	|	ЗаказПокупателяТовары.Количество
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|ГДЕ
	|	ЗаказПокупателяТовары.Ссылка В(&Ссылка)
	|	";
	
	Запрос.УстановитьПараметр("Ссылка", Заказ);
	//Запрос.УстановитьПараметр("НомерВходящегоДокумента", МассивЗаказов);

	Результат = Запрос.Выполнить().Выгрузить();
	
	Ненайденные = Новый ТаблицаЗначений;
	Ненайденные.Колонки.Добавить("Номенклатура");
	Ненайденные.Колонки.Добавить("Количество");
	
	КодНом = "";
	КолV=0;
	Для стр = 0 по СтрДлина(Текст)-1 цикл
		СледующийСимвол = Сред(Текст, СтрДлина(Текст)-стр, 1);
		Если СледующийСимвол="V" тогда
			КолV=КолV+1; 
		КонецЕсли;
		
		Если КолV = 1 и  СледующийСимвол<>"V" тогда
			КодНом = СледующийСимвол+КодНом;
		КонецЕсли;
		
		Если КолV>1 тогда
			прервать;
		КонецЕсли;
	КонецЦикла; 
	ТЗ = ТоварыНеНайденные.Выгрузить();
	Тз.Свернуть("Номенклатура", "Количество");
	ТЗтов = Товары.Выгрузить();
	Тзтов.Свернуть("Номенклатура", "КоличествоЗаказано, Количество");
	Если КодНом<>"" тогда
		Если КодНом<>"AKS" и КодНом<>"KRP" и КодНом<>"DOC" тогда
			стрТовары = Результат.Найти(КодНом,"НоменклатураКод");
			Если стрТовары<>неопределено тогда
				тов = ?(ТЗтов.Найти(стрТовары.Номенклатура, "Номенклатура") = Неопределено, 0, ТЗтов.Найти(стрТовары.Номенклатура, "Номенклатура"));
				//тов = товары.Найти(стрТовары.Номенклатура,"Номенклатура");
				если тов.КоличествоЗаказано - тов.Количество <> 0 тогда
					СтрНом = Ненайденные.Добавить();
					СтрНом.Номенклатура  = стрТовары.Номенклатура;
					Ст = ?(ТЗ.Найти(стрТовары.Номенклатура, "Номенклатура") = Неопределено, 0, ТЗ.Найти(стрТовары.Номенклатура, "Номенклатура"));
					Если кодНом = "9178010" тогда //пакеты
						товЗак = ?(Результат.Найти(стрТовары.Номенклатура, "Номенклатура") = Неопределено, 0, Результат.Найти(стрТовары.Номенклатура, "Номенклатура"));
					
						Если тов.КоличествоЗаказано - тов.Количество > товЗак.Количество тогда
							СтрНом.Количество =	товЗак.Количество;
						Иначе 
							СтрНом.Количество = тов.КоличествоЗаказано - тов.Количество;
						КонецЕсли;

					Иначе
						Если тов.КоличествоЗаказано - тов.Количество > Ст тогда 
							СтрНом.Количество = 1;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Сообщить("в заказе не найдена номенклатура по коду: "+КодНом);
			КонецЕсли;
		ИначеЕсли КодНом="AKS" тогда
			отбор = новый структура("НоменклатураВидТовара");
			отбор.НоменклатураВидТовара = Перечисления.ВидыТоваров.Аксессуары;
			найденныеСтроки  = Результат.НайтиСтроки(отбор);
			Если найденныеСтроки.Количество()>0 тогда
				Для каждого найденнаяСтрока из  найденныеСтроки цикл
					Если найденнаяСтрока.НоменклатураКод<>"9178010" тогда
						тов = ?(ТЗтов.Найти(найденнаяСтрока.Номенклатура, "Номенклатура") = Неопределено, 0, ТЗтов.Найти(найденнаяСтрока.Номенклатура, "Номенклатура"));
						если тов.КоличествоЗаказано - тов.Количество <> 0 тогда
							СтрНом = Ненайденные.Добавить();
							СтрНом.Номенклатура  = найденнаяСтрока.Номенклатура;
							товЗак = ?(Результат.Найти(найденнаяСтрока.Номенклатура, "Номенклатура") = Неопределено, 0, Результат.Найти(найденнаяСтрока.Номенклатура, "Номенклатура"));
					
							Если тов.КоличествоЗаказано - тов.Количество > товЗак.Количество тогда
								СтрНом.Количество =	товЗак.Количество;
							Иначе 
								СтрНом.Количество = тов.КоличествоЗаказано - тов.Количество;
							КонецЕсли;

						Конецесли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли КодНом="KRP" тогда
			отбор = новый структура("НоменклатураВидТовара");
			отбор.НоменклатураВидТовара = Перечисления.ВидыТоваров.Прочее;
			найденныеСтроки = Результат.НайтиСтроки(отбор);
			Если найденныеСтроки.Количество()>0 тогда
				Для каждого найденнаяСтрока из  найденныеСтроки цикл
					тов = ?(ТЗтов.Найти(найденнаяСтрока.Номенклатура, "Номенклатура") = Неопределено, 0, ТЗтов.Найти(найденнаяСтрока.Номенклатура, "Номенклатура"));
					если тов.КоличествоЗаказано - тов.Количество <> 0 тогда
						СтрНом = Ненайденные.Добавить();
						СтрНом.Номенклатура  = найденнаяСтрока.Номенклатура;
						товЗак = ?(Результат.Найти(найденнаяСтрока.Номенклатура, "Номенклатура") = Неопределено, 0, Результат.Найти(найденнаяСтрока.Номенклатура, "Номенклатура"));
					
						Если тов.КоличествоЗаказано - тов.Количество > товЗак.Количество тогда
							СтрНом.Количество =	товЗак.Количество;
						Иначе 
							СтрНом.Количество = тов.КоличествоЗаказано - тов.Количество;
						КонецЕсли;
					конецесли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	иначе
		Сообщить("Не найден код номенклатуры");
	КонецЕсли;
	
	Для Каждого Ст из Ненайденные Цикл
		СтрокаНенайденных 				= ТоварыНеНайденные.Добавить();
		СтрокаНенайденных.Заказ 		=  Заказ;
		СтрокаНенайденных.Номенклатура 	=  ст.Номенклатура;
		СтрокаНенайденных.Количество    =  ст.Количество;
	КонецЦикла;
	ШтрихКод = ""; 
	Этаформа.ТекущийЭлемент = Элементыформы.ШтрихКод;	
КонецПроцедуры

//КонецМиронычев

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мОбновлятьВладельца = Ложь;
мЧас = 0;
мМинута = 0;
