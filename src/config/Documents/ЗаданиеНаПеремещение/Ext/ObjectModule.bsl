
Процедура ОбработкаЗаполнения(Основание)
	
	ВидОперации=Перечисления.ВидыДвиженийПриходРасход.Расход;//ВСЕГДА!
	ВводитьТолькоПеремещение = Истина; //признак перемещения
	Выполнено = ложь;
		
	Если типЗнч(Основание) = Тип("ДокументСсылка.ЗаданиеНаОтгрузку") тогда
		Контрагент =Основание.Контрагент;
		РегионКонтрагента=Основание.РегионКонтрагента;
		Комментарий = "";
		Важность = Основание.Важность;
		
		СкладПолучатель = Основание.СкладПолучатель;//+++ БУФЕРНЫЙ СКЛАД!
		
	ИначеЕсли типЗнч(Основание) = Тип("ДокументСсылка.ЗаданиеНаПеремещение") тогда
		Контрагент =Основание.Контрагент;
		РегионКонтрагента=Основание.РегионКонтрагента;
		Комментарий = "";
		Важность = Основание.Важность;
		
		СкладПолучатель = Основание.СкладПолучатель;//+++ БУФЕРНЫЙ СКЛАД!
		
	иначеЕсли типЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") тогда
		Контрагент=Основание.Контрагент;
		стр1 = ЗаказыПокупателей.Добавить();
		стр1.ЗаказПокупателя = Основание;
		Комментарий = ?(сокрЛП(Основание.Комментарий)="", "", СокрЛП(Основание.номер)+": "+сокрЛП(Основание.Комментарий)+"
		|");
   		Важность = ?(ЭтоКлиент11категории(Основание.ссылка), перечисления.Важность.Высокая,  перечисления.Важность.Средняя);
				
		СкладПолучатель = Основание.Склад;//+++ БУФЕРНЫЙ СКЛАД!
		
 	КонецЕсли;	
	
		
КонецПроцедуры

//+++ 10.09.2013
функция ЭтоКлиент11категории(Основание1)
	
	Если Основание1.Контрагент=Неопределено Тогда
		Возврат ЛОЖЬ;
	ИначеЕсли типЗнч(Основание1.Контрагент)<>тип("СправочникСсылка.Контрагенты") Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;	
	
	//+++ 17.06.2015
	рез =(Основание1.Контрагент.КатегорияПокупателя = справочники.КатегорииПокупателей.ИнтернетМагазин);
	
	Если рез тогда
		Возврат Истина; // по реквизиту!
	Иначе 			    // по старому свойству
		стр1 = новый Структура;
		стр1.Вставить("Объект", Основание1.Контрагент);
		КатегорияПок =  ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("00119");
		стр1.Вставить("Свойство", КатегорияПок);
	
		регСв = РегистрыСведений.ЗначенияСвойствОбъектов.Получить(стр1);
		Если регСв<>Неопределено Тогда
			Если ЗначениеЗаполнено(регСв.Значение) 
				и регСв.Значение=11 
		     //// ограничение по типу договора
			 // и Основание1.ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.НайтиПоКоду("00011") 
			Тогда
				Возврат Истина;
			Иначе
				Возврат ЛОЖЬ; // не та категория 	 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции	

//+++ 17.04.2013     
Процедура ПриКопировании(ОбъектКопирования) 
	Товары.Очистить();
	ГруппыСкладов.Очистить();
	
	//-------------чистим реализации------------------
	Для каждого стр1 из ЗаказыПокупателей цикл
		стр1.Реализация = документы.РеализацияТоваровУслуг.ПустаяСсылка();
	КонецЦикла;	
	
	//--------удаляем уже отгруженные заказы совсем!---------------------------
	i=0; N=ЗаказыПокупателей.Количество();
	пока i<N цикл
		стр1 = ЗаказыПокупателей[i];
		Если стр1.КоличествоШтук = стр1.КоличествоШтукОтгружено тогда
           ЗаказыПокупателей.Удалить(i); N=N-1;
	    Иначе
		   i=i+1;
	   КонецЕсли;
   КонецЦикла;
   
КонецПроцедуры


Функция ПолучитьРегионКонтрагента(фактАдрес=истина) Экспорт
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	КонтактнаяИнформация.Поле2 ОбластьКонтрагента,
	|	КонтактнаяИнформация.Поле4 ГородКонтрагента
	|ИЗ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ КонтактнаяИнформация.Объект = &Контрагент
	|	И КонтактнаяИнформация.Вид = &Вид";
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Если фактАдрес Тогда
		Запрос.УстановитьПараметр("Вид",Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	иначе
		Запрос.УстановитьПараметр("Вид",Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	КонецЕсли;
	
	Выборка=Запрос.Выполнить().Выбрать();
	Если  Выборка.Следующий() Тогда
		Возврат ?(ЗначениеНеЗаполнено (Выборка.ГородКонтрагента),Выборка.ОбластьКонтрагента,Выборка.ГородКонтрагента);
	Иначе
		Возврат "";
	КонецЕсли;	 
	 
КонецФункции

//проверяет наличие хотя бы одной проведенной реализации
//если такая есть, то пересчет заказанного количества - невозможен
функция естьРеализации(ЕстьПроведенные=истина, Заказ=неопределено) экспорт
	рез = ложь;
	тзЗакПок = ЗаказыПокупателей.Выгрузить();
	тзЗакПок.Свернуть("Реализация", "НомерСтроки");
	
	для i=0 по тзЗакПок.Количество()-1 цикл
		Если не тзЗакПок[i].реализация=неопределено и не тзЗакПок[i].реализация.пустая()
			и ( не ЕстьПроведенные или (ЕстьПроведенные и тзЗакПок[i].реализация.проведен) ) Тогда
			
			Если (Заказ=неопределено) 
				или (ЗаказыПокупателей[тзЗакПок[i].НомерСтроки-1].ЗаказПокупателя = Заказ) тогда
					рез = истина;
				прервать;
			КонецЕсли;
			
		КонецЕсли;	
	КонецЦикла;
	
	// Сакулина. Проверяем есть реализации для перемещений из заявок на брак
	Если ЗаказыПокупателей.Количество() = 0 и ЗаявкиНаБрак.Количество() > 0 Тогда
		Для Каждого СтрЗаказ из ЗаявкиНаБрак Цикл
			Если Не СтрЗаказ.ДокументОтгрузки = Неопределено и 
				Не СтрЗаказ.ДокументОтгрузки = Документы.ОперацияПоОтветственномуХранению.ПустаяСсылка()
				и СтрЗаказ.ДокументОтгрузки.Проведен Тогда
				рез = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// Сакулина. Проверяем есть реализации для перемещений из заявок на брак

	
	возврат рез;
КонецФункции


функция мПолучитьЛитыеБезНагрузки() экспорт //24.10.2017
	
	списТов = новый СписокЗначений;
	Если НЕ Константы.УбратьЛитыеБезНагрузки.Получить() 
		или ЭтотОбъект.Подразделение.ОбособленноеПодразделение тогда //у филиалов нет ограничений!
		возврат списТов;
	КонецЕсли;

	табл = Товары.Выгрузить(,"Номенклатура");
	табл.Свернуть("Номенклатура");
	списТов.ЗагрузитьЗначения( табл.ВыгрузитьКолонку("Номенклатура") );
	i=0; Литые = справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Литые");
	Пока i < списТов.Количество() цикл
		Если списТов[i].Значение.НоменклатурнаяГруппа <> Литые тогда
			 списТов.Удалить(i);
		Иначе i=i+1;
		КонецЕсли;	 
	КонецЦикла;	
	Если списТов.Количество()=0 тогда
		возврат списТов;
	КонецЕсли;
	
    Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗначенияСвойствОбъектов.Объект как Номенклатура,
	               |	ЗначенияСвойствОбъектов.Значение
	               |ИЗ
	               |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |ГДЕ
	               |	ЗначенияСвойствОбъектов.Свойство = &Свойство
	               |	И ЗначенияСвойствОбъектов.Объект В (&списТов)
				   |	И ЗначенияСвойствОбъектов.Значение=Истина";
	Запрос.УстановитьПараметр("списТов", списТов);
	Запрос.УстановитьПараметр("Свойство", Планывидовхарактеристик.СвойстваОбъектов.НайтиПоКоду("90255") );
	
	Результат = Запрос.Выполнить();
	ВыборкаДа = Результат.Выбрать();
	
	Пока ВыборкаДа.Следующий() Цикл
	эл1 = списТов.НайтиПоЗначению( ВыборкаДа.Номенклатура );
	списТов.Удалить(эл1);	
	КонецЦикла;
	
	возврат списТов;
КонецФункции


//---------------встроенная функция, аналог как в "Поездка подмосковье"------------------------------------
функция ПечатьТоварыПоЗаказам(ПечатьПоФакту=истина)
	
	#Если Клиент Тогда
//--------------ограничения, которые сразу отменяют печать---------------------------------------	
Если ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Приход тогда
	    # Если Клиент Тогда
		Предупреждение("Данная печатная форма предназначена только для Отгрузки!");
		возврат неопределено;
		# КонецЕсли
	КонецЕсли;
	
	Если ссылка.Проведен и Товары.Итог("КоличествоЗаказано")=0 тогда 
		#Если Клиент Тогда
		Предупреждение("Для печати - выберите Порядок Отгрузки и перезаполните Товары!");
		возврат неопределено;
		# КонецЕсли
	КонецЕсли;	
	
	Если  Товары.Итог("КоличествоЗаказано")<>ГруппыСкладов.Итог("КоличествоЗаказано") тогда
		#Если Клиент Тогда
		Предупреждение("Несоответствие количества в таблице Порядок Отгрузки "+строка(ГруппыСкладов.Итог("КоличествоЗаказано"))+" и Товары "+строка(Товары.Итог("КоличествоЗаказано"))+"!");
		//возврат неопределено;
		# КонецЕсли

	КонецЕсли;	
	
	
	Если ПечатьПоФакту тогда
		Если не естьРеализации(ложь) тогда // 2 вариант - по реализациям - факт
			#Если Клиент Тогда
			Предупреждение("Для печати - перезаполните реализации!");
			# КонецЕсли
			возврат неопределено;
		КонецЕсли;	
	Иначе // не ПечатьПоФакту - печатаем по регистру РезервНаСкладах по данному документу
		Если не ссылка.Проведен тогда
			#Если Клиент Тогда
			Предупреждение("Для печати необходимо провести документ!");
			# КонецЕсли
			возврат неопределено;
		КонецЕсли;	
			
		Если естьРеализации() тогда  // 2 вариант - по резервам  - план	
			#Если Клиент Тогда
			Предупреждение("Для печати - перезаполните реализации!");
			# КонецЕсли

			возврат неопределено;
		КонецЕсли;	
	КонецЕсли;
    #КонецЕсли
//--------------получаем макет документа и области печати---------------------------------------	
	ТабДокумент = новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "Документ_ЗаданиеНаОтгрузку_ТоварыПоЗаказам";
	
	Макет = ПолучитьМакет("ТоварыПоЗаказам");
    ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Номер = ЭтотОбъект.Номер;
	ОбластьМакета.Параметры.Дата  = ЭтотОбъект.Дата;
	ОбластьМакета.Параметры.СловоВажный = ?(ЭтотОбъект.Важность = перечисления.Важность.Высокая, "!!!", ""); //+++ 13.09.2013

	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьИтого = Макет.ПолучитьОбласть("ИтогоВсего");
    ОбластьЗаказ = Макет.ПолучитьОбласть("СтрокаЗаказ");
	ОбластьИтогоЗаказ = Макет.ПолучитьОбласть("ИтогоЗаказ");
	ОбластьТовар = Макет.ПолучитьОбласть("СтрокаТовар");
 	ОбластьТовар1 = Макет.ПолучитьОбласть("СтрокаТовар1");
    
//-----------------------2х уровневый Запрос----------------------	
	Запрос1 = получитьЗапросТоварыПоЗаказам(ПечатьПоФакту);
	Результат1 = Запрос1.выполнить();
	Выборка = результат1.выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);			
	
//+++( 29.10.2013 номер очереди в печ.форму +++
Заказы2 = ЭтотОбъект.ЗаказыПокупателей.Выгрузить();
Заказы2.Колонки.Добавить("КонтрагентКод");
Заказы2.Колонки.Добавить("АдресДоставки");
Заказы2.Колонки.Добавить("Ответственный");
//+++ 10.06.2015  Заказы2.Колонки.Добавить("НомерВорот");
для каждого стр2 из Заказы2 цикл
	стр2.КонтрагентКод = стр2.ЗаказПокупателя.Контрагент.Код;
	стр2.АдресДоставки = СокрЛП(стр2.ЗаказПокупателя.АдресДоставки);
	стр2.Ответственный = стр2.ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо;
	стр2.НомерВорот = стр2.НомерВорот;
КонецЦикла;	
Заказы2.Свернуть("КонтрагентКод, АдресДоставки, Ответственный, НомерВорот", "КоличествоШтук");
//+++)

	
//----------Общие итоги------------------------------------------------	
Выборка.Следующий(); // Общие итоги
ОбластьИтого.Параметры.Заполнить(Выборка); // итоги
	
	//-----------------По Заказам-----------------------------------------------	
	выборкаЗаказ = Выборка.выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока выборкаЗаказ.Следующий() Цикл
		ОбластьЗаказ.Параметры.Заполнить(выборкаЗаказ); 	 // итоги по заказу
		ОбластьИтогоЗаказ.Параметры.Заполнить(выборкаЗаказ); // итоги по заказу
		ОбластьИтогоЗаказ.Параметры.Адрес = выборкаЗаказ.Адрес - 1; //+++
       		
		ЗаказПокупателя1 = выборкаЗаказ.ЗаказПокупателя; // так быстрее обращение
		
		ОбластьЗаказ.Параметры.Контрагент = ЗаказПокупателя1.Контрагент;
		
		ОбластьЗаказ.Параметры.Менеджер=ЗаказПокупателя1.ДоговорКонтрагента.ОтветственноеЛицо;
		МенеджерфизЛицо =ЗаказПокупателя1.ДоговорКонтрагента.ОтветственноеЛицо.ФизЛицо;
		
		//+++( 29.10.2013 - получим номер очереди из Заказы2
		//ОбластьЗаказ.Параметры.НомОчередь = выборкаЗаказ.НомерСтрокиЗаказа;
		НомОчередь = 0;
		Для каждого стр2 из Заказы2 цикл
			НомОчередь = НомОчередь + 1;
			СтрПоиска1 = Строка(ЗаказПокупателя1.Контрагент.Код)+"-"+Строка(СокрЛП(ЗаказПокупателя1.АдресДоставки))+"-"+Строка(ЗаказПокупателя1.ДоговорКонтрагента.ОтветственноеЛицо)
			+строка(выборкаЗаказ.НомерВорот);//+++ 04.06.2015
			СтрПоиска2 = Строка(стр2.КонтрагентКод)+"-"+Строка(стр2.АдресДоставки)+"-"+Строка(стр2.Ответственный)
			+строка(стр2.НомерВорот); //+++ 04.06.2015
			Если СтрПоиска1 = стрПоиска2 тогда
				прервать;
			КонецЕсли;
		КонецЦикла;	
        ОбластьЗаказ.Параметры.НомОчередь =Строка(НомОчередь)+"."; // 5я точка...
		ОбластьЗаказ.Параметры.АдресДоставки = ?(СокрЛП(ЗаказПокупателя1.АдресДоставки)="", "", "Адрес доставки: "+СокрЛП(ЗаказПокупателя1.АдресДоставки));
		//+++) 

		//------------------телефоны менеджера в физ лице---------------------------------------
		Если ЗначениеЗаполнено(МенеджерфизЛицо) тогда
		отбор1 = новый Структура("Объект", МенеджерфизЛицо);
		отбор1.Вставить("Тип", перечисления.ТипыКонтактнойИнформации.Телефон);
		отбор1.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица);
		рс = регистрыСведений.КонтактнаяИнформация.Получить(отбор1);
		значТел = "";
			Если рс<>неопределено тогда
				значТел = рс.Представление; //ТаблЗнач1[i].Заказ.ТелефонМенеджера;
				ОбластьЗаказ.Параметры.Менеджер = строка(ЗаказПокупателя1.ДоговорКонтрагента.ОтветственноеЛицо) +" тел.: "+значТел;
			КонецЕсли;
		КонецЕсли;
	
		ОбластьЗаказ.Параметры.Номер=СокрЛП(ЗаказПокупателя1.Номер);
		ОбластьЗаказ.Параметры.Дата =Формат(ЗаказПокупателя1.Дата, "ДЛФ=DD");
		
		//03.04.2018 - Задача № 44019 - добавить комментарии, если в заказе есть Торг.Компания
		Если НЕ ЗаказПокупателя1.ТранспортнаяКомпания.Пустая() тогда
			ОбластьЗаказ.Параметры.комментарий = СокрЛП( ЗаказПокупателя1.Комментарий );
		Иначе
			ОбластьЗаказ.Параметры.комментарий = ""; //+++ 25.10.2017 ФРОЛОВ
		КонецЕсли;
	
		//	ЗаказПокупателя1.Комментарий;
	
		ТабДокумент.Вывести(ОбластьЗаказ);
		
		//-----------------По Заказам-----------------------------------------------	
		выборкаТовар = выборкаЗаказ.выбрать();
		N=0;   итогКоличествоЗаказано =0;
		номПред = справочники.Номенклатура.ПустаяСсылка();
		табДокумент.НачатьГруппуСтрок();
		
		списУбрать = мПолучитьЛитыеБезНагрузки();//25.10.2017
		Пока выборкаТовар.Следующий() Цикл //======================================================
		Если списУбрать.НайтиПоЗначению(выборкаТовар.Номенклатура)<>Неопределено тогда//25.10.2017
			продолжить;
		КонецЕсли;	
		колЗак = 0; // чтобы не дублилось для разных складов и адресов...
			Если номПред <> выборкаТовар.Номенклатура тогда
				N= N + 1;	
				номПред = выборкаТовар.Номенклатура;
				 колЗак = выборкаТовар.КоличествоЗаказано;
			КонецЕсли;	
			Если выборкаТовар.КоличествоЗаказано=выборкаТовар.Количество или (колЗак=0) тогда
				ОбластьТовар.Параметры.Заполнить(выборкаТовар); 	 // итоги по заказу
				ОбластьТовар.Параметры.НомерСтроки = N;   			 // порядковый номер
				ОбластьТовар.Параметры.КоличествоЗаказано =  колЗак; 
				
				//+++( 18.07.2017 - для Аксессуаров нужен Артикул!
				Если выборкаТовар.Номенклатура.ВидТовара = перечисления.ВидыТоваров.Аксессуары
					или (выборкаТовар.Номенклатура.Артикул<>"" и выборкаТовар.Номенклатура.Код<>выборкаТовар.Номенклатура.Артикул) //+++ 27.04.2018
				Тогда
             	 ОбластьТовар.Параметры.Артикул = СокрЛП(выборкаТовар.Номенклатура.Код)+"
				 								|"+СокрЛП(выборкаТовар.Номенклатура.Артикул);
				 КонецЕсли;
											
		//------------обнуление, так как это продолжение отгрузки с другого склада---------------
				Если колЗак=0 тогда
					ОбластьТовар.Параметры.Артикул 		= "";
					ОбластьТовар.Параметры.Номенклатура = "";
					ОбластьТовар.Параметры.НомерСтроки  = "";
				КонецЕсли;
				ТабДокумент.Вывести(ОбластьТовар);
			Иначе	
			 	ОбластьТовар1.Параметры.Заполнить(выборкаТовар); 	 // итоги по заказу
				ОбластьТовар1.Параметры.НомерСтроки = N;   			 // порядковый номер
				ОбластьТовар1.Параметры.КоличествоЗаказано = колЗак;
				//+++( 18.07.2017 - для Аксессуаров нужен Артикул!
				Если выборкаТовар.Номенклатура.ВидТовара = перечисления.ВидыТоваров.Аксессуары
					или (выборкаТовар.Номенклатура.Артикул<>"" и выборкаТовар.Номенклатура.Код<>выборкаТовар.Номенклатура.Артикул) //+++ 27.04.2018
				Тогда
             	 ОбластьТовар1.Параметры.Артикул = СокрЛП(выборкаТовар.Номенклатура.Код)+"
				 								|"+СокрЛП(выборкаТовар.Номенклатура.Артикул);
          		 КонецЕсли;

				ТабДокумент.Вывести(ОбластьТовар1);
			КонецЕсли;
			итогКоличествоЗаказано = итогКоличествоЗаказано + колЗак;
		КонецЦикла;
	табДокумент.ЗакончитьГруппуСтрок();
			
	ОбластьИтогоЗаказ.Параметры.КоличествоЗаказано = итогКоличествоЗаказано;	
	ТабДокумент.Вывести(ОбластьИтогоЗаказ);
	КонецЦикла;

ТабДокумент.Вывести(ОбластьИтого);
//--------------------------------------------------------------	
    
    Возврат ТабДокумент;
	
КонецФункции	

//в зависимости от параметра ПоФакту - берутся разные запросы
//1) ПоФакту = истина  - берем все из реализаций и заказов ТЧЗаказыПокупателй
//2) ПоФакту = ложь	   - берем из регистра РезервНаСкладах по регистратору текущего документа
//
функция получитьЗапросТоварыПоЗаказам(ПоФакту)
	Запрос = новый Запрос;
		
	Если ПоФакту Тогда
		
		//---------------подготовим виртуальную таблицу заранее-------------------
		ТаблЗнач = ЗаказыПокупателей.Выгрузить();
		ТаблЗнач.Свернуть("НомерСтроки, НомерВорот, ЗаказПокупателя, Реализация");  //+++ 04.06.2015
		i=0; N=ТаблЗнач.Количество();
		Пока i<N Цикл
			док = ТаблЗнач[i].Реализация;
			Если док=неопределено или док.пустая() тогда
				ТаблЗнач.Удалить(i); N=N-1;
			Иначе //есть документ - такая строка нужна
				i=i+1;
			КонецЕсли;
		КонецЦикла;	
		Запрос.УстановитьПараметр("ВТ", ТаблЗнач);
		Запрос.УстановитьПараметр("Дата", ЭтотОбъект.Дата);
		//--------------------------------------------------------------------------
		запрос.Текст = "ВЫБРАТЬ
		               |	ВТ.НомерСтроки КАК НомерСтроки,
					    |	ВТ.НомерВорот КАК НомерВорот,
		               |	ВТ.ЗаказПокупателя КАК ЗаказПокупателя,
		               |	ВТ.Реализация КАК Реализация
		               |ПОМЕСТИТЬ ВТ
		               |ИЗ
		               |	&ВТ КАК ВТ
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ЗаказПокупателя
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ.НомерСтроки КАК НомерСтрокиЗаказа,
					   |	ВТ.НомерВорот КАК НомерВорот,
					   |	ВТ.ЗаказПокупателя КАК ЗаказПокупателя,
		               |	ЕСТЬNULL(ТовРеализации.НомерСтроки, 0) КАК НомерСтроки,
		               |	ТовРеализации.Номенклатура.Код КАК Артикул,
		               |	ТовРеализации.Номенклатура КАК Номенклатура,
		               |	ТовРеализации.Типоразмер КАК Типоразмер,
		               |	ТовРеализации.Количество КАК Количество,
		               |	ТовРеализации.КоличествоФакт КАК КоличествоФакт,
		               |	ТовРеализации.Вес КАК Вес,
		               |	ЕСТЬNULL(ТовРеализации.КоличествоЗаказано, 0) КАК КоличествоЗаказано,
		               |	"""" КАК Адрес,
		               |	ТовРеализации.Склад КАК Склад
		               |ИЗ
		               |	ВТ КАК ВТ
		               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			ТовРеализации.Ссылка КАК Ссылка,
		               |			СУММА(1) КАК НомерСтроки,
		               |			ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
		               |			ЗаказыПокупателейОстатки.Номенклатура.Модель.Наименование + "" "" + ЗаказыПокупателейОстатки.Номенклатура.Типоразмер.Диаметр + "" х "" + ЗаказыПокупателейОстатки.Номенклатура.Типоразмер.Ширина КАК Типоразмер,
		               |			СУММА(ЕСТЬNULL(ТовРеализации.Количество, 0)) КАК Количество,
		               |			СУММА(0) КАК КоличествоФакт,
		               |			СУММА(ЕСТЬNULL(ТовРеализации.Вес, 0)) КАК Вес,
		               |			СУММА(ЗаказыПокупателейОстатки.КоличествоОстаток) КАК КоличествоЗаказано,
		               |			ЗаказыПокупателейОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
		               |			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТовРеализации.Склад) КАК Склад
		               |		ИЗ
		               |			РегистрНакопления.ЗаказыПокупателей.Остатки(
		               |					,
		               |					ЗаказПокупателя В
		               |						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |							ВТ.ЗаказПокупателя
		               |						ИЗ
		               |							ВТ КАК ВТ)) КАК ЗаказыПокупателейОстатки
		               |				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |					ТовРеализации.Ссылка КАК Ссылка,
		               |					ТовРеализации.Номенклатура КАК Номенклатура,
		               |					ТовРеализации.Количество КАК Количество,
		               |					ТовРеализации.Вес КАК Вес,
		               |					ТовРеализации.Склад КАК Склад
		               |				ИЗ
		               |					Документ.РеализацияТоваровУслуг.Товары КАК ТовРеализации
		               |				ГДЕ
		               |					ТовРеализации.Ссылка.Дата >= &Дата
		               |					И ТовРеализации.Ссылка В
		               |							(ВЫБРАТЬ
		               |								ВТ.Реализация
		               |							ИЗ
		               |								ВТ КАК ВТ)) КАК ТовРеализации
		               |				ПО ЗаказыПокупателейОстатки.ЗаказПокупателя = ТовРеализации.Ссылка
		               |					И ЗаказыПокупателейОстатки.Номенклатура = ТовРеализации.Номенклатура
		               |		
		               |		СГРУППИРОВАТЬ ПО
		               |			ЗаказыПокупателейОстатки.Номенклатура,
		               |			ЗаказыПокупателейОстатки.ЗаказПокупателя,
		               |			ЗаказыПокупателейОстатки.Номенклатура.Модель.Наименование + "" "" + ЗаказыПокупателейОстатки.Номенклатура.Типоразмер.Диаметр + "" х "" + ЗаказыПокупателейОстатки.Номенклатура.Типоразмер.Ширина,
		               |			ТовРеализации.Ссылка) КАК ТовРеализации
		               |		ПО ВТ.ЗаказПокупателя = ТовРеализации.ЗаказПокупателя
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	НомерСтрокиЗаказа,
		               |	НомерСтроки
		               |ИТОГИ
		               |	МИНИМУМ(НомерСтрокиЗаказа),
		               |	МИНИМУМ(НомерСтроки),
		               |	МИНИМУМ(НомерВорот),
					   |	СУММА(Количество),
		               |	СУММА(КоличествоФакт),
		               |	СУММА(Вес),
		               |	СУММА(КоличествоЗаказано),
		               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Адрес),
		               |	СУММА(Склад)
		               |ПО
		               |	ОБЩИЕ,
		               |	ЗаказПокупателя
		               |АВТОУПОРЯДОЧИВАНИЕ";
					   
			Если ВводитьТолькоПеремещение тогда
			запрос.Текст = стрЗаменить(запрос.Текст, "РеализацияТоваровУслуг.Товары", "ПеремещениеТоваров.Товары");
			запрос.Текст = стрЗаменить(запрос.Текст, "ТовРеализации.Ссылка.Сделка",  "ТовРеализации.Ссылка.ВнутненнийЗаказ.ДокументОснование");
			КонецЕсли;		   
					   
	Иначе //план!
		Запрос.УстановитьПараметр("СписокЗаказов", ЗаказыПокупателей.ВыгрузитьКолонку("ЗаказПокупателя") );
		ТаблЗнач = ЗаказыПокупателей.Выгрузить();
		ТаблЗнач.Свернуть("НомерСтроки, НомерВорот, ЗаказПокупателя");
		Запрос.УстановитьПараметр("ВТ", ТаблЗнач  );
		
		Запрос.УстановитьПараметр("НачДата", новый Граница(ЭтотОбъект.Дата-1, ВидГраницы.Исключая) );
		Запрос.УстановитьПараметр("КонДата", новый Граница(ЭтотОбъект.Дата+1, ВидГраницы.Включая)  );
		
	//Запрос.УстановитьПараметр("Склад5000",справочники.Склады.НайтиПоКоду("00642") );
		
			
		ТЗ=Товары.Выгрузить();
		ТЗ.Свернуть("Номенклатура");
		Запрос.УстановитьПараметр("Список",ТЗ.ВыгрузитьКолонку("Номенклатура") );
		
		запрос.Текст = "ВЫБРАТЬ
		               |	ВТ.НомерСтроки,
					   |	ВТ.НомерВорот,
		               |	ВТ.ЗаказПокупателя КАК ЗаказПокупателя
		               |ПОМЕСТИТЬ ВТ
		               |ИЗ
		               |	&ВТ КАК ВТ
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ЗаказПокупателя
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ.ЗаказПокупателя КАК ЗаказПокупателя,
		               |	ВТ.НомерСтроки КАК НомерСтрокиЗаказа,
					   |	ВТ.НомерВорот КАК НомерВорот,
		               |	ЗаказыПокупателейОстатки.Номенклатура.Код КАК Артикул,
		               |	ЗаказыПокупателейОстатки.Номенклатура,
		               |	ЗаказыПокупателейОстатки.Номенклатура.Модель.Наименование + "" "" + ЗаказыПокупателейОстатки.Номенклатура.Типоразмер.Диаметр + "" х "" + ЗаказыПокупателейОстатки.Номенклатура.Типоразмер.Ширина КАК Типоразмер,
		               |	ЕСТЬNULL(РезервНаСкладахОбороты.КоличествоПриход, 0) КАК Количество,
		               |	ЕСТЬNULL(РезервНаСкладахОбороты.КоличествоРасход, 0) КАК КоличествоФакт,
		               |	0 КАК Вес,
		               |	1 КАК НомерСтроки,
		               |	ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК КоличествоЗаказано,
		               |	ВЫБОР
		               |		КОГДА РезервНаСкладахОбороты.Склад.АдресноеХранение
		               |			ТОГДА РезервНаСкладахОбороты.АдресХранения
		               |		ИНАЧЕ """"
		               |	КОНЕЦ КАК Адрес,
		               |	ВЫБОР
		               |		КОГДА РезервНаСкладахОбороты.Склад.АдресноеХранение
		               |			ТОГДА ЕСТЬNULL(ТоварыАдресноеХранениеОстатки.КоличествоОстаток, 0)
		               |		ИНАЧЕ ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0)
		               |	КОНЕЦ КАК Остаток,
		               |	РезервНаСкладахОбороты.Склад КАК Склад
		               |ИЗ
		               |	ВТ КАК ВТ
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя В (&СписокЗаказов)) КАК ЗаказыПокупателейОстатки
		               |		ПО ВТ.ЗаказПокупателя = ЗаказыПокупателейОстатки.ЗаказПокупателя
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервНаСкладах.Обороты(&НачДата, &КонДата, Регистратор, ЗаказПокупателя В (&СписокЗаказов)) КАК РезервНаСкладахОбороты
		               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыАдресноеХранение.Остатки(, Номенклатура В (&Список)) КАК ТоварыАдресноеХранениеОстатки
		               |			ПО РезервНаСкладахОбороты.Номенклатура = ТоварыАдресноеХранениеОстатки.Номенклатура
		               |				И РезервНаСкладахОбороты.Склад = ТоварыАдресноеХранениеОстатки.Склад
		               |				И РезервНаСкладахОбороты.АдресХранения = ТоварыАдресноеХранениеОстатки.АдресХранения
		               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(, Номенклатура В (&Список)) КАК ТоварыНаСкладахОстатки
		               |			ПО РезервНаСкладахОбороты.Склад = ТоварыНаСкладахОстатки.Склад
		               |				И РезервНаСкладахОбороты.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
		               |		ПО (ЗаказыПокупателейОстатки.ЗаказПокупателя = РезервНаСкладахОбороты.ЗаказПокупателя)
		               |			И (ЗаказыПокупателейОстатки.Номенклатура = РезервНаСкладахОбороты.Номенклатура)
		               |ГДЕ
		               |	ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) > 0
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	НомерСтрокиЗаказа
		               |ИТОГИ
		               |	СУММА(Количество),
		               |	СУММА(КоличествоФакт),
		               |	СУММА(Вес),
		               |	минимум(НомерСтроки),
					      |	минимум(НомерВорот),
		               |	СУММА(КоличествоЗаказано),
		               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Адрес),
		               |	СУММА(Остаток),
		               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Склад)
		               |ПО
		               |	ОБЩИЕ,
		               |	ЗаказПокупателя
		               |АВТОУПОРЯДОЧИВАНИЕ";

	
	КонецЕсли;	

	
	возврат запрос;
	
КонецФункции	
                                                 

                                    
//---------------------------------------------------------------
функция ПечатьЗаданияНаОтгрузку(СОграничением=Истина)
	
		ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаданиеНаОтгрузку_Новый";
	
	Попытка 
		Если (Контрагент=Справочники.Контрагенты.НайтиПоКоду("94143  ")) Тогда
			Макет = ПолучитьМакет("ЗаказРозница");
		Иначе 
	    	Макет = ПолучитьМакет("Заказ");
		КонецЕсли;
	Исключение
		Макет = ПолучитьМакет("Заказ");	
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить() );
	флФилиал = Подразделение.ОбособленноеПодразделение;
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.Текст = 	"ВЫБРАТЬ
	               	|	ЗаданиеНаОтгрузкуТовары.НомерСтроки КАК НомерСтроки,
	               	|	ЗаданиеНаОтгрузкуТовары.Номенклатура КАК Номенклатура,
	               	|	ЗаданиеНаОтгрузкуТовары.КоличествоЗаказано КАК КОличествоЗаказано,
	               	|	ЗаданиеНаОтгрузкуТовары.Количество КАК КОличество,
	               	|	ЗаданиеНаОтгрузкуТовары.КоличествоСвободно КАК КоличествоОстаток,
	               	|	ЗаданиеНаОтгрузкуТовары.ГруппаСкладов,
	               	|	ЗаданиеНаОтгрузкуТовары.Склад КАК Склад,
	               	|	ЗаданиеНаОтгрузкуТовары.АдресХранения КАК АдресХранения
	               	|ПОМЕСТИТЬ ЗаданиеНаОтгрузкуТовары
	               	|ИЗ
	               	|	&Товары КАК ЗаданиеНаОтгрузкуТовары
	               	|
					|//ГДЕ ЗаданиеНаОтгрузкуТовары.КоличествоЗаказано <> ЗаданиеНаОтгрузкуТовары.Количество
	               	|;
	               	|
	               	|////////////////////////////////////////////////////////////////////////////////
	               	|ВЫБРАТЬ
	               	|	ЗаданиеНаОтгрузкуТовары.НомерСтроки КАК НомерСтроки,
	               	|	ЗаданиеНаОтгрузкуТовары.Номенклатура КАК Номенклатура,
	               	|	ЗаданиеНаОтгрузкуТовары.КОличествоЗаказано КАК КОличествоЗаказано,
	               	|	ЗаданиеНаОтгрузкуТовары.КОличество КАК Количество,
	               	|	ЗаданиеНаОтгрузкуТовары.КоличествоОстаток КАК КоличествоОстаток,
	               	|	ЗаданиеНаОтгрузкуТовары.ГруппаСкладов КАК ГруппаСкладов,
	               	|	ЗаданиеНаОтгрузкуТовары.Склад КАК Склад,
	               	|	ЗаданиеНаОтгрузкуТовары.АдресХранения КАК АдресХранения,
	               	|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) КАК ОстатокНаСкладе,
	               	|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстатокОТХ, 0) КАК ОстатокОТХНаСкладе,
	               	|	ЕСТЬNULL(ТоварыАХОстатки.КоличествоОстаток, 0) КАК ОстатокВАдресе,
	               	|	ЕСТЬNULL(ТоварыАХОстаткиАдрес.КоличествоОстатокВАдресе, 0) КАК ОстатокАдреса
	               	|ИЗ
	               	|	ЗаданиеНаОтгрузкуТовары КАК ЗаданиеНаОтгрузкуТовары
	               	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               	|			рнТовары.Номенклатура КАК Номенклатура,
	               	|			рнТовары.Склад КАК Склад,
	               	|			рнТовары.КоличествоОстаток КАК КоличествоОстаток,
	               	|			ЕСТЬNULL(ТоварыОТХНаСкладах.КоличествоОстаток, 0) КАК КоличествоОстатокОТХ
	               	|		ИЗ
	               	|			РегистрНакопления.ТоварыНаСкладах.Остатки(
	             	//+++ 14.02.2017
				   |				,Склад.Транзитный "+?(флФилиал," и Склад.Подразделение=&Подразделение","=ЛОЖЬ")+"
   					|						И Склад.ЗапретитьИспользование = ЛОЖЬ
	               	|						И Номенклатура В
	               	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ т.Номенклатура
	               	|							ИЗ	ЗаданиеНаОтгрузкуТовары КАК т)) КАК рнТовары
	               	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаОтветственномХранении.Остатки( 
					//+++ 14.02.2017
				   |				,Склад.Транзитный "+?(флФилиал," и Склад.Подразделение=&Подразделение","=ЛОЖЬ")+"
   					|							И Номенклатура В
	               	|								(ВЫБРАТЬ РАЗЛИЧНЫЕ т.Номенклатура
	               	|								ИЗ	ЗаданиеНаОтгрузкуТовары КАК т)) КАК ТоварыОТХНаСкладах
	               	|				ПО рнТовары.Номенклатура = ТоварыОТХНаСкладах.Номенклатура
	               	|					И рнТовары.Склад = ТоварыОТХНаСкладах.Склад) КАК ТоварыНаСкладахОстатки
	               	|		ПО ЗаданиеНаОтгрузкуТовары.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	               	|			И ЗаданиеНаОтгрузкуТовары.Склад = ТоварыНаСкладахОстатки.Склад
	               	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               	|			рнТовары.Номенклатура КАК Номенклатура,
	               	|			рнТовары.Склад КАК Склад,
	               	|			рнТовары.АдресХранения КАК АдресХранения,
	               	|			рнТовары.КоличествоОстаток КАК КоличествоОстаток
	               	|		ИЗ
	               	|			РегистрНакопления.ТоварыАдресноеХранение.Остатки(
	              	//+++ 14.02.2017
				   |				, Склад.Транзитный "+?(флФилиал," и Склад.Подразделение=&Подразделение","=ЛОЖЬ")+" И
   				
	               	|				 Номенклатура В
	               	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ т.Номенклатура
	               	|						ИЗ ЗаданиеНаОтгрузкуТовары КАК т)) КАК рнТовары) КАК ТоварыАХОстатки
	               	|		ПО ЗаданиеНаОтгрузкуТовары.Номенклатура = ТоварыАХОстатки.Номенклатура
	               	|			И ЗаданиеНаОтгрузкуТовары.Склад = ТоварыАХОстатки.Склад
	               	|			И ЗаданиеНаОтгрузкуТовары.АдресХранения = ТоварыАХОстатки.АдресХранения
	               	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               	|			рнТовары.Склад КАК Склад,
	               	|			рнТовары.АдресХранения КАК АдресХранения,
	               	|			рнТовары.КоличествоОстаток КАК КоличествоОстатокВАдресе
	               	|		ИЗ
	               	|			РегистрНакопления.ТоварыАдресноеХранение.Остатки(
	            		//+++ 14.02.2017
				   |				, Склад.Транзитный "+?(флФилиал," и Склад.Подразделение=&Подразделение","=ЛОЖЬ")+" И
   				
	               	|				 Номенклатура В
	               	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ т.Номенклатура
	               	|						ИЗ	ЗаданиеНаОтгрузкуТовары КАК т)) КАК рнТовары) КАК ТоварыАХОстаткиАдрес
	               	|		ПО ЗаданиеНаОтгрузкуТовары.Склад = ТоварыАХОстаткиАдрес.Склад
	               	|			И ЗаданиеНаОтгрузкуТовары.АдресХранения = ТоварыАХОстаткиАдрес.АдресХранения
	               	|
	               	|УПОРЯДОЧИТЬ ПО
	               	|	НомерСтроки
	               	|ИТОГИ
	               	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура),
	               	|	СУММА(КОличествоЗаказано),
	               	|	СУММА(Количество),
	               	|	СУММА(КоличествоОстаток),
	               	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Склад),
	               	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ АдресХранения),
	               	|	СУММА(ОстатокНаСкладе),
	               	|	СУММА(ОстатокОТХНаСкладе),
	               	|	СУММА(ОстатокВАдресе),
	               	|	СУММА(ОстатокАдреса)
	               	|ПО
	               	|	ГруппаСкладов
	               	|АВТОУПОРЯДОЧИВАНИЕ";
	Если СОграничением тогда
		Запрос.Текст = стрЗаменить(Запрос.Текст,"//ГДЕ ","ГДЕ ");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	ОбластьНоменклатура = Макет.ПолучитьОбласть("Строка");
	
	КоличествоСтрок=0; КоличествоЗаказаноИтого=0; КоличествоИтого=0;
	
Если не Результат.Пустой() Тогда
	ВыборкаГруппаСкладов = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	пока ВыборкаГруппаСкладов.Следующий() цикл
			// Выводим шапку накладной
	
		Если  СокрЛП(МаркаАвтомобиля)<>"" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Авто");
		ОбластьМакета.Параметры.Авто = СокрЛП(МаркаАвтомобиля);
		ОбластьМакета.Параметры.НомерАвто = СокрЛП(ГосНомерАвтомобиля);
		//ОбластьМакета.Параметры.Пункт = СокрЛП(АдресДоставки);
		ТабДокумент.Вывести(ОбластьМакета);
		КОнецЕсли;
		 
	//СведенияОПоставщике = СведенияОЮрФизЛице(Организация, Шапка.Дата);

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	#Если Клиент Тогда
	ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Ссылка, "Задание на перемещение");
	#КонецЕсли
	ОбластьМакета.Параметры.СловоВажный = ?(ЭтотОбъект.Важность = перечисления.Важность.Высокая, "!!!", "");//+++ 13.09.2013

	//+++ Штрих-Код номера документа - февраль 2012
	// требуется установленная компонента 1CBarCode.exe
	#Если Клиент Тогда
		попытка
    	ОбШтрихКодСообщение = глТорговоеОборудование.ПолучитьШтрихКодПоДокументу(Ссылка);
		
		ОбШтрихКод=ОбластьМакета.Рисунки.ШК.Объект;
		ОбШтрихКод.Сообщение = ОбШтрихКодСообщение; 
		ОбШтрихКод.ТекстКода = ОбШтрихКодСообщение; 
		//ОбШтрихКод.ВидимостьКС = ЛОЖЬ; // не показывать контрольныйСимвол в тексте
		исключение
		 //нет компоненты 1CBarCode.exe
	   КонецПопытки;
	#КонецЕсли 
	//+++)
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	//ОбластьМакета.Параметры.Заполнить(Шапка);
	#Если Клиент Тогда
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОЮрФизЛице(Организация, Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	#КонецЕсли
	ОбластьМакета.Параметры.ПоставщикТекст = "Поставщик:";//+++
	ТабДокумент.Вывести(ОбластьМакета);

	//СведенияОПолучателе = СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	//ОбластьМакета.Параметры.Заполнить(Шапка);
	#Если Клиент Тогда
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ОписаниеОрганизации(СведенияОЮрФизЛице(КОнтрагент, Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	#КонецЕсли
	ОбластьМакета.Параметры.ПокупательТекст = "Покупатель:";
		
	ТабДокумент.Вывести(ОбластьМакета);

		
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);

	ВыборкаНоменклатура = ВыборкаГруппаСкладов.Выбрать();
	КоличествоСтрок=0; КоличествоЗаказаноИтого=0; КоличествоИтого=0; ОстатокНаСкладеИтого = 0;
	
	списУбрать = мПолучитьЛитыеБезНагрузки();//25.10.2017
	Пока ВыборкаНоменклатура.Следующий() Цикл   //======================================================
		Если списУбрать.НайтиПоЗначению(ВыборкаНоменклатура.Номенклатура)<>Неопределено тогда//25.10.2017
			продолжить;
		КонецЕсли;	

		КоличествоСтрок = КоличествоСтрок + 1;
		КоличествоЗаказаноИтого = КоличествоЗаказаноИтого + ВыборкаНоменклатура.КоличествоЗаказано;
		КоличествоИтого = КоличествоИтого + ВыборкаНоменклатура.Количество;
		
		//+++( 25.07.2014 - для Аксессуаров нужен Артикул!
		Если ВыборкаНоменклатура.Номенклатура.ВидТовара = перечисления.ВидыТоваров.Аксессуары
				или (ВыборкаНоменклатура.Номенклатура.Артикул<>"" и ВыборкаНоменклатура.Номенклатура.Код<>ВыборкаНоменклатура.Номенклатура.Артикул) //+++ 27.04.2018
			тогда
             ОбластьНоменклатура =Макет.ПолучитьОбласть("Строка3");
             ОбластьНоменклатура.Параметры.Артикул = СокрЛП(ВыборкаНоменклатура.Номенклатура.Артикул);
          иначе
              ОбластьНоменклатура =Макет.ПолучитьОбласть("Строка");
          КонецЕсли;
  	   //+++)

		ОбластьНоменклатура.Параметры.Заполнить(ВыборкаНоменклатура);
		Если СокрЛП(ВыборкаНоменклатура.АдресХранения) <> "" тогда
			ОстатокНаСкладеИтого = ОстатокНаСкладеИтого + ВыборкаНоменклатура.ОстатокВАдресе;
			
			//------------остаток товара в адресе / полный остаток на складе---------------------
			
			стрОстаток =" "+?(ВыборкаНоменклатура.ОстатокНаСкладе>ВыборкаНоменклатура.ОстатокВАдресе, 
			строка(ВыборкаНоменклатура.ОстатокВАдресе)+"/"+строка(ВыборкаНоменклатура.ОстатокНаСкладе),
			строка(ВыборкаНоменклатура.ОстатокВАдресе) );
			
			delta = ВыборкаНоменклатура.ОстатокАдреса - ВыборкаНоменклатура.ОстатокВАдресе;
			Если delta>0 тогда // есть другие товары в ячейке!
				ОбластьНоменклатура.Параметры.Склад = строка(ВыборкаНоменклатура.Склад)+":"+строка(ВыборкаНоменклатура.АдресХранения)+" (+"+строка(delta)+")";
				ОбластьНоменклатура.Параметры.ОстатокНаСкладе = "*"+стрОстаток;
			иначе
				ОбластьНоменклатура.Параметры.Склад = строка(ВыборкаНоменклатура.Склад)+":"+строка(ВыборкаНоменклатура.АдресХранения);
				ОбластьНоменклатура.Параметры.ОстатокНаСкладе = стрОстаток;
			КонецЕсли;			
		иначе
			//-----------------------отражение ОТХ------------------------------------------------
			delta = ВыборкаНоменклатура.ОстатокОТХНаСкладе;
			Если delta>0 тогда
				ОбластьНоменклатура.Параметры.Склад = строка(ВыборкаНоменклатура.Склад)+" (+"+строка(delta)+"отх)";
				ОбластьНоменклатура.Параметры.ОстатокНаСкладе = строка(ВыборкаНоменклатура.ОстатокНаСкладе)+" / "+строка(ВыборкаНоменклатура.ОстатокНаСкладе+delta);
			КонецЕсли;
			
			ОстатокНаСкладеИтого = ОстатокНаСкладеИтого + ВыборкаНоменклатура.ОстатокНаСкладе;
		КонецЕсли;	
		
		//+++ 25.07.2014 для аксессуаров "Артикул - Товар"---------------------------------------------
		//Если ВыборкаНоменклатура.Склад.ГруппаСкладов.Пустая() тогда
		//	ОбластьНоменклатура.Параметры.Номенклатура = строка(ВыборкаНоменклатура.Номенклатура.ВидТовара)+": "
		//																+ строка(ВыборкаНоменклатура.Номенклатура);
		//КонецЕсли;	
		Если ВыборкаНоменклатура.Номенклатура.ВидТовара = перечисления.ВидыТоваров.Аксессуары 
			или (ВыборкаНоменклатура.Номенклатура.Артикул<>"" и ВыборкаНоменклатура.Номенклатура.Код<>ВыборкаНоменклатура.Номенклатура.Артикул) //+++ 27.04.2018
			тогда
			ОбластьНоменклатура.Параметры.Номенклатура = строка(ВыборкаНоменклатура.Номенклатура);
		ИначеЕсли ВыборкаНоменклатура.Склад.ГруппаСкладов.Пустая() тогда
			ОбластьНоменклатура.Параметры.Номенклатура = строка(ВыборкаНоменклатура.Номенклатура.ВидТовара)+": "+ строка(ВыборкаНоменклатура.Номенклатура);
		КонецЕсли;	
	
		ОбластьНоменклатура.Параметры.Код = СокрЛП(ВыборкаНоменклатура.Номенклатура.Код);
		ТабДокумент.Вывести(ОбластьНоменклатура);
	КонецЦикла;	   

	ОбластьИтого = Макет.ПолучитьОбласть("Итого");
    ОбластьИтого.Параметры.КоличествоЗаказаноИтого = КоличествоЗаказаноИтого;
    ОбластьИтого.Параметры.КоличествоИтого		   = КоличествоИтого;
	ОбластьИтого.Параметры.ОстатокНаСкладеИтого    = ОстатокНаСкладеИтого;
	ОбластьИтого.Параметры.КоличествоСтрок = КоличествоСтрок;
	ТабДокумент.Вывести(ОбластьИтого);
	
	ОбластьПримечение = Макет.ПолучитьОбласть("Примечание");
	//03.04.2018 - Задача № 44019 - добавить комментарии, если в заказе есть Торг.Компания
		Если НЕ ЭтотОбъект.ЗаказыПокупателей[0].ЗаказПокупателя.ТранспортнаяКомпания.Пустая() тогда
			ОбластьПримечение.Параметры.комментарий = СокрЛП( ЭтотОбъект.Комментарий );
		Иначе
			ОбластьПримечение.Параметры.комментарий = ""; //+++ 25.10.2017 ФРОЛОВ
		КонецЕсли;

	// Комментарий;
	ТабДокумент.Вывести(ОбластьПримечение);
	
	
	ОбластьПодвалЗаказа = Макет.ПолучитьОбласть("ПодвалЗаказа");
	ОбластьПодвалЗаказа.Параметры.ФИОИсполнителя = "";
	//ОбластьПодвалЗаказа.Параметры.Менеджер = "";
	
	//+++( определение одного или нескольких менеджеров по заказам
	менеджеры = ""; 
	списЗнач1 = ссылка.ЗаказыПокупателей.ВыгрузитьКолонку("ЗаказПокупателя");
	Если списЗнач1.Количество()>0 тогда
		менеджеры = СокрЛП(списЗнач1[0].ДоговорКонтрагента.ОтветственноеЛицо);
				Если ЗначениеЗаполнено(списЗнач1[0].ДоговорКонтрагента.ОтветственноеЛицо.ФизЛицо) тогда
				отбор1 = новый Структура("Объект", списЗнач1[0].ДоговорКонтрагента.ОтветственноеЛицо.ФизЛицо);
				отбор1.Вставить("Тип", перечисления.ТипыКонтактнойИнформации.Телефон);
				отбор1.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица);
				рс = регистрыСведений.КонтактнаяИнформация.Получить(отбор1);
					Если рс<>неопределено тогда
						менеджеры = менеджеры +": "+СокрЛП(рс.Представление); //ТелефонМенеджера;
					КонецЕсли;
    			КонецЕсли;

		для i=1 по списЗнач1.Количество()-1 цикл
			мен = СокрЛП(списЗнач1[i].ДоговорКонтрагента.ОтветственноеЛицо);
			Если Найти(менеджеры, мен)=0 тогда
			менеджеры = менеджеры+",
			|"+мен;
				Если ЗначениеЗаполнено(списЗнач1[i].ДоговорКонтрагента.ОтветственноеЛицо.ФизЛицо) тогда
				отбор1 = новый Структура("Объект", списЗнач1[i].ДоговорКонтрагента.ОтветственноеЛицо.ФизЛицо);
				отбор1.Вставить("Тип", перечисления.ТипыКонтактнойИнформации.Телефон);
				отбор1.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица);
				рс = регистрыСведений.КонтактнаяИнформация.Получить(отбор1);
					Если рс<>неопределено тогда
						менеджеры = менеджеры +": "+СокрЛП(рс.Представление); //ТелефонМенеджера;
					КонецЕсли;
    			КонецЕсли;
	
			КонецЕсли;
		КонецЦикла;	
		менеджеры = менеджеры+".";
	КонецЕсли;
	ОбластьПодвалЗаказа.Параметры.Менеджер = менеджеры;
	//+++)
	
	ТабДокумент.Вывести(ОбластьПодвалЗаказа);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();  
КонецЦикла;

КонецЕсли;
	
	возврат ТабДокумент;
	
КонецФункции	

//---------------------------------------------------------------
функция ПечатьЗаданияНаОтгрузкуПоОчередям()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаданиеНаОтгрузку_Новый";

    Макет = ПолучитьМакет("Заказ");
    Запрос = Новый Запрос;
	//15.08.2013  заменен на признак .АдресноеХранение
	//Склад5000 = справочники.Склады.НайтиПоКоду("00642");
	
	Запрос.УстановитьПараметр("Регистратор", ссылка );
	Запрос.УстановитьПараметр("Дата0", Дата - 1 );
	Запрос.УстановитьПараметр("Дата1", Дата + 1 );
	//Запрос.УстановитьПараметр("Склад5000", Склад5000 );
	
//-----------------------Определение Очередей-------------------------
Заказы2 = ЗаказыПокупателей.Выгрузить(); 


// Создание описателя типов для таблицы значений
КЧ = Новый КвалификаторыЧисла(2,0);
КС = Новый КвалификаторыСтроки(7);
КС50 = Новый КвалификаторыСтроки(50);
КС250 = Новый КвалификаторыСтроки(250);
Массив = Новый Массив;
Массив.Добавить(Тип("Строка"));
ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
Массив.Очистить();
Массив.Добавить(Тип("Строка"));
ОписаниеТиповС50 = Новый ОписаниеТипов(Массив, , КС50);
Массив.Очистить();
Массив.Добавить(Тип("Строка"));
ОписаниеТиповС250 = Новый ОписаниеТипов(Массив, , КС250);
Массив.Очистить();
Массив.Добавить(Тип("Число"));
ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);

Заказы3 = новый ТаблицаЗначений;
Заказы2.Колонки.Добавить("КонтрагентКод", ОписаниеТиповС, "КонтрагентКод", 7);
Заказы2.Колонки.Добавить("АдресДоставки", ОписаниеТиповС250, "АдресДоставки", 250);
Заказы2.Колонки.Добавить("Ответственный",ОписаниеТиповС50, "Ответственный", 50);
//Заказы2.Колонки.Добавить("НомерВорот",ОписаниеТиповЧ, "НомерВорот");

для каждого стр2 из Заказы2 цикл
	стр2.КонтрагентКод = стр2.ЗаказПокупателя.Контрагент.Код;
	стр2.АдресДоставки = стр2.ЗаказПокупателя.АдресДоставки;
	стр2.Ответственный = стр2.ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо.Код;
//	стр2.НомерВорот = стр2.НомерВорот;
КонецЦикла;	

// Сакулина. Добавила номер очереди
Заказы2.Свернуть("КонтрагентКод, АдресДоставки, Ответственный, НомерОчереди", "КоличествоШтук");  //+++ номер ворот !  , НомерВорот

//---------Сборка номеров в 1 поле------
Заказы2.Колонки.Добавить("Номер");
//Заказы2.Колонки.Добавить("Очередь", ОписаниеТиповЧ,"Очередь",3);
Заказы2.Колонки.Добавить("НомерВорот",ОписаниеТиповС,"НомерВорот", 7);

 N = ЗаказыПокупателей.Количество();
 //Очередь = 0;
Для каждого стр2 из Заказы2 цикл
	
	СтрПоиска2 = Строка(стр2.КонтрагентКод)+"-"+Строка(стр2.АдресДоставки)+"-"+Строка(стр2.Ответственный)
//	+строка(стр2.НомерВорот)    //+++ 04.06.2015
	; 
	номерНакл = ""; НомерВорот="0";
	Для i=0 по N-1 цикл
		стр1 = ЗаказыПокупателей[i];
		СтрПоиска1 = Строка(стр1.ЗаказПокупателя.Контрагент.Код)+"-"+Строка(стр1.ЗаказПокупателя.АдресДоставки)+"-"+Строка(стр1.ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо.Код)
	//		+строка(стр1.НомерВорот) //+++ 04.06.2015
			;
		Если СтрПоиска1 = СтрПоиска2 тогда
			номерНакл = номерНакл  + Строка(стр1.ЗаказПокупателя.Номер)+", ";
			
			если НомерВорот="0" тогда
			НомерВорот= строка(стр1.НомерВорот)+",";
			иначе //без повторений
				если СтрЧислоВхождений(НомерВорот, строка(стр1.НомерВорот)+",")=0 тогда
				НомерВорот=НомерВорот + строка(стр1.НомерВорот)+",";  
				конецЕсли;
			КонецЕсли;
			
		КонецЕсли;	
			
	КонецЦикла;	
	стр2.Номер      = Лев(номерНакл, стрДлина(номерНакл) - 2);
	стр2.НомерВорот = Лев(НомерВорот,стрДлина(НомерВорот)- 1);  //список
	
	// Сакулина. Убрала закоментировала. Номер очереди берется из ТЧ документа
	//Очередь = Очередь + 1;
	//стр2.Очередь = Очередь;
	
КонецЦикла;	

Запрос.УстановитьПараметр("Заказы2", Заказы2);

Товары2 = товары.Выгрузить();
Товары2.Колонки.Добавить("НоменклатураКод", ОписаниеТиповС, "НоменклатураКод", 7);
Для каждого стр2 из Товары2 цикл
	стр2.НоменклатураКод = стр2.Номенклатура.Код;
КонецЦикла;	
Запрос.УстановитьПараметр("Товары2", Товары2);
 
	Запрос.Текст = 	"ВЫБРАТЬ
	               	|	Заказы2.НомерОчереди КАК НомерОчереди,
	               	|	Заказы2.КонтрагентКод,
	               	|	Заказы2.АдресДоставки,
	               	|	Заказы2.НомерВорот,
	               	|	Заказы2.Ответственный КАК МенеджерКод
	               	|ПОМЕСТИТЬ ВТ
	               	|ИЗ
	               	|	&Заказы2 КАК Заказы2
	               	|;
	               	|
	               	|////////////////////////////////////////////////////////////////////////////////
	               	|ВЫБРАТЬ
	               	|	Товары2.НомерСтроки КАК НомерСтроки,
	               	|	Товары2.НоменклатураКод КАК НоменклатураКод,
	               	|	Товары2.Склад КАК Склад,
	               	|	Товары2.АдресХранения КАК АдресХранения
	               	|ПОМЕСТИТЬ ВТовары
	               	|ИЗ
	               	|	&Товары2 КАК Товары2
	               	|;
	               	|
	               	|////////////////////////////////////////////////////////////////////////////////
	               	|ВЫБРАТЬ
	               	|	РезервНаСкладахОбороты.Номенклатура КАК Номенклатура,
	               	|	РезервНаСкладахОбороты.Склад КАК Склад,
	               	|	РезервНаСкладахОбороты.АдресХранения КАК АдресХранения,
	               	|	СУММА(РезервНаСкладахОбороты.КоличествоПриход) КАК КоличествоЗаказано,
	               	|	СУММА(РезервНаСкладахОбороты.КоличествоРасход) КАК Количество,
	               	|	РезервНаСкладахОбороты.Склад.ГруппаСкладов КАК ГруппаСкладов,
	               	|	ВЫБОР
	               	|		КОГДА РезервНаСкладахОбороты.Склад.АдресноеХранение
	               	|			ТОГДА ЕСТЬNULL(ТоварыАдресноеХранениеОстатки.КоличествоОстаток, 0)
	               	|		ИНАЧЕ ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0)
	               	|	КОНЕЦ КАК ОстатокНаСкладе,
	               	|	РезервНаСкладахОбороты.ЗаказПокупателя.Контрагент КАК Контрагент,
	               	|	ВТ2.НомерОчереди КАК НомерОчереди,
	               	|	ВТ2.КонтрагентКод,
	               	|	ВТ2.МенеджерКод,
	               	|	ВТ2.АдресДоставки,
	               	|	ВТ2.НомерВорот КАК НомерВорот,
	               	|	ВТовары2.НомерСтроки КАК НомерСтроки,
	               	|	СУММА(ЕСТЬNULL(ТоварыНаОтветственномХраненииОстатки.КоличествоОстаток, 0)) КАК КоличествоОстатокОТХ,
	               	|	СУММА(ЕСТЬNULL(ТоварыАдресноеХранениеОстатки1.КоличествоОстаток, 0)) КАК ОстатокВАдресе
	               	|ИЗ
	               	|	ВТ КАК ВТ2
	               	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервНаСкладах.Обороты(
	               	|				&Дата0,
	               	|				&Дата1,
	               	|				Регистратор,
	               	|				Номенклатура.Код В
	               	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               	|						вт.НоменклатураКод
	               	|					ИЗ
	               	|						ВТовары КАК вт)) КАК РезервНаСкладахОбороты
	               	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	               	|					&Дата0,
	               	|					Номенклатура.Код В
	               	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               	|								вт.НоменклатураКод
	               	|							ИЗ
	               	|								ВТовары КАК вт)
	               	|						И Склад В
	               	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               	|								вт.Склад
	               	|							ИЗ
	               	|								ВТовары КАК вт)) КАК ТоварыНаСкладахОстатки
	               	|			ПО РезервНаСкладахОбороты.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	               	|				И РезервНаСкладахОбороты.Склад = ТоварыНаСкладахОстатки.Склад
	               	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыАдресноеХранение.Остатки(
	               	|					&Дата0,
	               	|					Номенклатура.Код В
	               	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               	|								вт.НоменклатураКод
	               	|							ИЗ
	               	|								ВТовары КАК вт)
	               	|						И АдресХранения В
	               	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               	|								вт.АдресХранения
	               	|							ИЗ
	               	|								ВТовары КАК вт)) КАК ТоварыАдресноеХранениеОстатки
	               	|			ПО РезервНаСкладахОбороты.Номенклатура = ТоварыАдресноеХранениеОстатки.Номенклатура
	               	|				И РезервНаСкладахОбороты.АдресХранения = ТоварыАдресноеХранениеОстатки.АдресХранения
	               	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТовары КАК ВТовары2
	               	|			ПО РезервНаСкладахОбороты.Номенклатура.Код = ВТовары2.НоменклатураКод
	               	|				И РезервНаСкладахОбороты.Склад = ВТовары2.Склад
	               	|				И РезервНаСкладахОбороты.АдресХранения = ВТовары2.АдресХранения
	               	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаОтветственномХранении.Остатки(
	               	|					&Дата0,
	               	|					Номенклатура.Код В
	               	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               	|								вт.НоменклатураКод
	               	|							ИЗ
	               	|								ВТовары КАК вт)
	               	|						И Склад В
	               	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               	|								вт.Склад
	               	|							ИЗ
	               	|								ВТовары КАК вт)) КАК ТоварыНаОтветственномХраненииОстатки
	               	|			ПО РезервНаСкладахОбороты.Номенклатура = ТоварыНаОтветственномХраненииОстатки.Номенклатура
	               	|				И РезервНаСкладахОбороты.Склад = ТоварыНаОтветственномХраненииОстатки.Склад
	               	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыАдресноеХранение.Остатки(
	               	|					&Дата0,
	               	|					Номенклатура.Код В
	               	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               	|								вт.НоменклатураКод
	               	|							ИЗ
	               	|								ВТовары КАК вт)
	               	|						И АдресХранения В
	               	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               	|								вт.АдресХранения
	               	|							ИЗ
	               	|								ВТовары КАК вт)) КАК ТоварыАдресноеХранениеОстатки1
	               	|			ПО РезервНаСкладахОбороты.АдресХранения = ТоварыАдресноеХранениеОстатки1.АдресХранения
	               	|		ПО ВТ2.КонтрагентКод = РезервНаСкладахОбороты.ЗаказПокупателя.Контрагент.Код
	               	|			И ВТ2.МенеджерКод = РезервНаСкладахОбороты.ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо.Код
	               	|			И (ВТ2.АдресДоставки = (ВЫРАЗИТЬ(РезервНаСкладахОбороты.ЗаказПокупателя.АдресДоставки КАК СТРОКА(250))))
	               	|ГДЕ
	               	|	РезервНаСкладахОбороты.Регистратор = &Регистратор
	               	|	И РезервНаСкладахОбороты.КоличествоОборот <> 0
	               	|
	               	|СГРУППИРОВАТЬ ПО
	               	|	РезервНаСкладахОбороты.Номенклатура,
	               	|	РезервНаСкладахОбороты.Склад,
	               	|	РезервНаСкладахОбороты.АдресХранения,
	               	|	РезервНаСкладахОбороты.Склад.ГруппаСкладов,
	               	|	ВЫБОР
	               	|		КОГДА РезервНаСкладахОбороты.Склад.АдресноеХранение
	               	|			ТОГДА ЕСТЬNULL(ТоварыАдресноеХранениеОстатки.КоличествоОстаток, 0)
	               	|		ИНАЧЕ ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0)
	               	|	КОНЕЦ,
	               	|	РезервНаСкладахОбороты.ЗаказПокупателя.Контрагент,
	               	|	ВТ2.НомерОчереди,
	               	|	ВТ2.КонтрагентКод,
	               	|	ВТ2.МенеджерКод,
	               	|	ВТ2.АдресДоставки,
	               	|	ВТ2.НомерВорот,
	               	|	ВТовары2.НомерСтроки
	               	|
	               	|УПОРЯДОЧИТЬ ПО
	               	|	НомерСтроки,
	               	|	Склад,
	               	|	АдресХранения,
	               	|	НомерОчереди
	               	|ИТОГИ
	               	|	СУММА(КоличествоЗаказано),
	               	|	СУММА(Количество),
	               	|	СУММА(ОстатокНаСкладе),
	               	|	МИНИМУМ(НомерВорот),
	               	|	МИНИМУМ(НомерСтроки),
	               	|	СУММА(КоличествоОстатокОТХ),
	               	|	СУММА(ОстатокВАдресе)
	               	|ПО
	               	|	ГруппаСкладов,
	               	|	Номенклатура,
	               	|	Склад
	               	|АВТОУПОРЯДОЧИВАНИЕ";
					
	Результат = Запрос.Выполнить();
	ОбластьНоменклатура = Макет.ПолучитьОбласть("Строка1");
	
	ОбластьОчередь = Макет.ПолучитьОбласть("Строка2");//+++
	
	КоличествоСтрок=0; КоличествоЗаказаноИтого=0; КоличествоИтого=0;
	
	//+++ 06.02.2017 -  анализ уже отгруженных товаров по порядку очередей и номера строки...
	таблТов = Товары.Выгрузить();
	
Если не Результат.Пустой() Тогда
	ВыборкаГруппаСкладов = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	пока ВыборкаГруппаСкладов.Следующий() цикл
			// Выводим шапку накладной
	
		Если  СокрЛП(МаркаАвтомобиля)<>"" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Авто");
		ОбластьМакета.Параметры.Авто = СокрЛП(МаркаАвтомобиля);
		ОбластьМакета.Параметры.НомерАвто = СокрЛП(ГосНомерАвтомобиля);
		//ОбластьМакета.Параметры.Пункт = СокрЛП(АдресДоставки);
		ТабДокумент.Вывести(ОбластьМакета);
		КОнецЕсли;
		 
	//СведенияОПоставщике = СведенияОЮрФизЛице(Организация, Шапка.Дата);

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	#Если Клиент Тогда
	ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Ссылка, "Задание на перемещение");
	#КонецЕсли
	ОбластьМакета.Параметры.СловоВажный = ?(ЭтотОбъект.Важность = перечисления.Важность.Высокая, "!!!", ""); //+++ 13.09.2013

	//+++ Штрих-Код номера документа - февраль 2012
	// требуется установленная компонента 1CBarCode.exe
    #Если Клиент Тогда
		попытка
    	ОбШтрихКодСообщение = глТорговоеОборудование.ПолучитьШтрихКодПоДокументу(Ссылка);
		
		ОбШтрихКод=ОбластьМакета.Рисунки.ШК.Объект;
		ОбШтрихКод.Сообщение = ОбШтрихКодСообщение; 
		ОбШтрихКод.ТекстКода = ОбШтрихКодСообщение; 
		//ОбШтрихКод.ВидимостьКС = ЛОЖЬ; // не показывать контрольныйСимвол в тексте
		исключение
		 //нет компоненты 1CBarCode.exe
	   КонецПопытки;
	#КонецЕсли 

	//+++)
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	//ОбластьМакета.Параметры.Заполнить(Шапка);
	#Если Клиент Тогда
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОЮрФизЛице(Организация, Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	#КонецЕсли 
	ОбластьМакета.Параметры.ПоставщикТекст = "Поставщик:";//+++
	ТабДокумент.Вывести(ОбластьМакета);

	//СведенияОПолучателе = СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	//ОбластьМакета.Параметры.Заполнить(Шапка);
	#Если Клиент Тогда
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ОписаниеОрганизации(СведенияОЮрФизЛице(КОнтрагент, Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	#КонецЕсли
	ОбластьМакета.Параметры.ПокупательТекст = "Покупатель:";
		
	ТабДокумент.Вывести(ОбластьМакета);
    		
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);

	ВыборкаНоменклатура = ВыборкаГруппаСкладов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КоличествоСтрок=0; КоличествоЗаказаноИтого=0; КоличествоИтого=0; ОстатокНаСкладеИтого = 0;
	
	списУбрать = мПолучитьЛитыеБезНагрузки();//25.10.2017
	Пока ВыборкаНоменклатура.Следующий() Цикл   //======================================================
		Если списУбрать.НайтиПоЗначению(ВыборкаНоменклатура.Номенклатура)<>Неопределено тогда//25.10.2017
			продолжить;
		КонецЕсли;	

		КоличествоСтрок = КоличествоСтрок + 1;
		КоличествоЗаказаноИтого = КоличествоЗаказаноИтого + ВыборкаНоменклатура.КоличествоЗаказано;
		
		//+++( 06.02.2017 общее количество по товару...
		//КоличествоИтого = КоличествоИтого + ВыборкаНоменклатура.Количество;
		
		//итоговое количество по товару по группе складов!
		таблТов1 = таблТов.НайтиСтроки(новый Структура("Номенклатура, ГруппаСкладов",ВыборкаНоменклатура.Номенклатура,
					?(ВыборкаНоменклатура.ГруппаСкладов.Пустая(), справочники.ГруппыСкладов.ОсновнойСклад, ВыборкаНоменклатура.ГруппаСкладов)
					                  )               );
		колТов = 0;
		для каждого стрТов из таблТов1 цикл
		 колТов = колТов + стрТов.Количество;
		КонецЦикла;
		//+++)

		ОстатокНаСкладеИтого = ОстатокНаСкладеИтого + ВыборкаНоменклатура.ОстатокНаСкладе;
		
		//+++( 04.06.2015 - для Аксессуаров нужен Артикул!
          Если ВыборкаНоменклатура.Номенклатура.ВидТовара = перечисления.ВидыТоваров.Аксессуары
			или (ВыборкаНоменклатура.Номенклатура.Артикул<>"" и ВыборкаНоменклатура.Номенклатура.Код<>ВыборкаНоменклатура.Номенклатура.Артикул) //+++ 27.04.2018
			тогда
             ОбластьНоменклатура =Макет.ПолучитьОбласть("Строка3");
             ОбластьНоменклатура.Параметры.Артикул = СокрЛП(ВыборкаНоменклатура.Номенклатура.Артикул);
          иначе
              ОбластьНоменклатура =Макет.ПолучитьОбласть("Строка");
          КонецЕсли;
  	   //+++)

		ОбластьНоменклатура.Параметры.Заполнить(ВыборкаНоменклатура);
		// 06.02.2017 - "анализ" что отгружено v, превышает ! или меньше -
		ОбластьНоменклатура.Параметры.Количество = ?(ВыборкаНоменклатура.КоличествоЗаказано=колТов, "", 
														?(ВыборкаНоменклатура.КоличествоЗаказано<колТов,"< ", 
														     ?(колТов>0,"!!! ","") ) )
												   + формат(колТов,"ЧН=' '"); 
	
		Если СокрЛП(ВыборкаНоменклатура.АдресХранения) <> "" тогда
			ОбластьНоменклатура.Параметры.Склад = СокрЛП(ВыборкаНоменклатура.Склад)+": "+ВыборкаНоменклатура.АдресХранения;
		КонецЕсли;	
		
		//------------------------------------------------------------------------
		Если ВыборкаНоменклатура.ГруппаСкладов.Пустая() тогда
			ОбластьНоменклатура.Параметры.Номенклатура = строка(ВыборкаНоменклатура.Номенклатура.ВидТовара)+": "
																		+ строка(ВыборкаНоменклатура.Номенклатура);
		КонецЕсли;	
		ОбластьНоменклатура.Параметры.Код = СокрЛП(ВыборкаНоменклатура.Номенклатура.Код);
		ТабДокумент.Вывести(ОбластьНоменклатура);
		
		
		//==========================Группировка по складу и адресу для вывода очередей============================
		ВыборкаОчередь = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаОчередь.Следующий() Цикл     
			ВыборкаОчередьАдрес = ВыборкаОчередь.Выбрать();
			Пока ВыборкаОчередьАдрес.Следующий() Цикл     
			ЗаполнитьЗначенияСвойств(ОбластьОчередь.Параметры, ВыборкаОчередьАдрес);	
			
			   Если СокрЛП(ВыборкаОчередьАдрес.АдресХранения)<>"" тогда
				ОбластьОчередь.Параметры.Склад = СокрЛП(ВыборкаОчередьАдрес.Склад)+": "+ВыборкаОчередьАдрес.АдресХранения;
				     //16.08.2013- здесь в поле ОстатокНаСкладе = Кол.1 Товара в Адресе
					delta = ВыборкаОчередьАдрес.ОстатокНаСкладе - ВыборкаОчередьАдрес.ОстатокВАдресе;
					Если delta>0 тогда // есть другие товары в ячейке!
						ОбластьОчередь.Параметры.Склад = СокрЛП(ВыборкаОчередьАдрес.Склад)+":"+ВыборкаОчередьАдрес.АдресХранения+" (+"+строка(delta)+")";
						ОбластьОчередь.Параметры.ОстатокНаСкладе = "*"+строка(ВыборкаОчередьАдрес.ОстатокНаСкладе);
					КонецЕсли;
				Иначе //обычный склад
					delta = ВыборкаОчередьАдрес.КоличествоОстатокОТХ; //16.08.2013
					Если delta>0 тогда
						ОбластьОчередь.Параметры.Склад = СокрЛП(ВыборкаОчередьАдрес.Склад)+" (+"+строка(delta)+"отх)";
						ОбластьОчередь.Параметры.ОстатокНаСкладе = строка(ВыборкаОчередьАдрес.ОстатокНаСкладе)+" / "+строка(ВыборкаОчередьАдрес.ОстатокНаСкладе + delta);
					КонецЕсли;	
				КонецЕсли;
				
				Если СокрЛП(ВыборкаОчередьАдрес.НомерОчереди)<>"" Тогда
					Контр = справочники.Контрагенты.НайтиПоКоду( СокрЛП(ВыборкаОчередьАдрес.КонтрагентКод) );
					//Мен   = Справочники.Пользователи.НайтиПоКоду( СокрЛП(ВыборкаОчередьАдрес.МенеджерКод) );
					
					ОбластьОчередь.Параметры.НомерВорот = ВыборкаОчередьАдрес.НомерВорот; //+++02.06.2015
					
					//+++ 06.02.2017 уменьшаем количество в таблице
					стрТов = таблТов.Найти(ВыборкаОчередьАдрес.НомерСтроки, "НомерСтроки");
					   
					 //  Кол = мин(стрТов.Количество, ВыборкаОчередьАдрес.КоличествоЗаказано);	 // сколько надо , сколоко отгружено всего
					     Кол2 = мин(колТов, ВыборкаОчередьАдрес.КоличествоЗаказано); 
						 
					   	 ОбластьОчередь.Параметры.Количество = Кол2; // распределяется по фифо!
						 колТов = колТов - Кол2;
						
						стрТов.Количество = стрТов.Количество - Кол2; // уменьшаем количество в строке c учетом переноса по Фифо!
						КоличествоИтого = КоличествоИтого + Кол2;
						
						Если ВыборкаОчередьАдрес.НомерСтроки = ВыборкаНоменклатура.НомерСтроки тогда 
					    ОбластьОчередь.Параметры.НомерСтроки = "";
						КонецЕсли;
					//+++)

					ОбластьОчередь.Параметры.КолОтгружено ="[ "+СокрЛП(ВыборкаОчередьАдрес.НомерОчереди)+" ] "+
					   ?(ЗначениеЗаполнено(Контр),	строка(Контр), СокрЛП(ВыборкаОчередьАдрес.КонтрагентКод))
					   +" мен.: "+СокрЛП(ВыборкаОчередьАдрес.МенеджерКод)
					   +?(СокрЛП(ВыборкаОчередьАдрес.АдресДоставки)="", "", ", адрес:"+СокрЛП(ВыборкаОчередьАдрес.АдресДоставки)); 
					   
					ТабДокумент.Вывести(ОбластьОчередь);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	
	КонецЦикла;	   

	ОбластьИтого = Макет.ПолучитьОбласть("Итого");
    ОбластьИтого.Параметры.КоличествоЗаказаноИтого = КоличествоЗаказаноИтого;
    ОбластьИтого.Параметры.КоличествоИтого		   = КоличествоИтого;
	ОбластьИтого.Параметры.ОстатокНаСкладеИтого    = ОстатокНаСкладеИтого;
	ОбластьИтого.Параметры.КоличествоСтрок = КоличествоСтрок;
	ТабДокумент.Вывести(ОбластьИтого);
	
	ОбластьПримечение = Макет.ПолучитьОбласть("Примечание");
	
	//03.04.2018 - Задача № 44019 - добавить комментарии, если в заказе есть Торг.Компания
	Если НЕ этотОбъект.ЗаказыПокупателей[0].ЗаказПокупателя.ТранспортнаяКомпания.Пустая() тогда
		ОбластьПримечение.Параметры.комментарий = СокрЛП( ЭтотОбъект.Комментарий );
	Иначе
		ОбластьПримечение.Параметры.комментарий = ""; //+++ 25.10.2017 ФРОЛОВ
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьПримечение);
	
	
	ОбластьПодвалЗаказа = Макет.ПолучитьОбласть("ПодвалЗаказа");
	ОбластьПодвалЗаказа.Параметры.ФИОИсполнителя = "";
	//ОбластьПодвалЗаказа.Параметры.Менеджер = "";
	
	//+++( определение одного или нескольких менеджеров по заказам
	менеджеры = ""; 
	списЗнач1 = ссылка.ЗаказыПокупателей.ВыгрузитьКолонку("ЗаказПокупателя");
	Если списЗнач1.Количество()>0 тогда
		менеджеры = СокрЛП(списЗнач1[0].ДоговорКонтрагента.ОтветственноеЛицо);
			Если ЗначениеЗаполнено(списЗнач1[0].ДоговорКонтрагента.ОтветственноеЛицо.ФизЛицо) тогда
				отбор1 = новый Структура("Объект", списЗнач1[0].ДоговорКонтрагента.ОтветственноеЛицо.ФизЛицо);
				отбор1.Вставить("Тип", перечисления.ТипыКонтактнойИнформации.Телефон);
				отбор1.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица);
				рс = регистрыСведений.КонтактнаяИнформация.Получить(отбор1);
					Если рс<>неопределено тогда
						менеджеры = менеджеры +": "+СокрЛП(рс.Представление); //ТелефонМенеджера;
					КонецЕсли;
    			КонецЕсли;

		для i=1 по списЗнач1.Количество()-1 цикл
			мен = СокрЛП(списЗнач1[i].ДоговорКонтрагента.ОтветственноеЛицо);
			Если Найти(менеджеры, мен)=0 тогда
			менеджеры = менеджеры+",
			|"+мен;
			
				Если ЗначениеЗаполнено(списЗнач1[i].ДоговорКонтрагента.ОтветственноеЛицо.ФизЛицо) тогда
				отбор1 = новый Структура("Объект", списЗнач1[i].ДоговорКонтрагента.ОтветственноеЛицо.ФизЛицо);
				отбор1.Вставить("Тип", перечисления.ТипыКонтактнойИнформации.Телефон);
				отбор1.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица);
				рс = регистрыСведений.КонтактнаяИнформация.Получить(отбор1);
					Если рс<>неопределено тогда
						менеджеры = менеджеры +": "+СокрЛП(рс.Представление); //ТелефонМенеджера;
					КонецЕсли;
    			КонецЕсли;

			КонецЕсли;
		КонецЦикла;	
		менеджеры = менеджеры+".";
	КонецЕсли;
	ОбластьПодвалЗаказа.Параметры.Менеджер = менеджеры;
	//+++)

	ТабДокумент.Вывести(ОбластьПодвалЗаказа);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();  
КонецЦикла;

КонецЕсли;
	
	возврат ТабДокумент;
	
КонецФункции	

//--------------------------------------------------
функция ПечатьЗаказов()
	
    ТабДокумент = новый ТабличныйДокумент;
	Макет = ПолучитьМакет("МакетПроезд");
		
Заказы2 = ЗаказыПокупателей.Выгрузить(); 
Заказы2.Колонки.Добавить("Контрагент");
Заказы2.Колонки.Добавить("АдресДоставки");
Заказы2.Колонки.Добавить("Ответственный");
для каждого стр2 из Заказы2 цикл
	стр2.Контрагент    = стр2.ЗаказПокупателя.Контрагент;
	стр2.АдресДоставки = стр2.ЗаказПокупателя.АдресДоставки;
	стр2.Ответственный = стр2.ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо;
КонецЦикла;	
Заказы2.Свернуть("Контрагент, АдресДоставки, Ответственный", "КоличествоШтук");

//---------Сборка номеров в 1 поле------
Заказы2.Колонки.Добавить("Номер");

 N = ЗаказыПокупателей.Количество();
Для каждого стр2 из Заказы2 цикл
	
	СтрПоиска2 = Строка(стр2.Контрагент)+"-"+Строка(стр2.АдресДоставки)+"-"+Строка(стр2.Ответственный);
	номерНакл = "";
	Для i=0 по N-1 цикл
		стр1 = ЗаказыПокупателей[i];
		СтрПоиска1 = Строка(стр1.ЗаказПокупателя.Контрагент)+"-"+Строка(стр1.ЗаказПокупателя.АдресДоставки)+"-"+Строка(стр1.ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо);
		Если СтрПоиска1 = СтрПоиска2 тогда
			номерНакл = номерНакл  + Строка(стр1.ЗаказПокупателя.Номер)+", ";
		КонецЕсли;	
		
	КонецЦикла;	
	
	стр2.Номер = Лев(номерНакл, стрДлина(номерНакл) - 2);
	
КонецЦикла;	
 

//-------------Определение автомобиля---------------------------------
	ТаблЗнач1 = новый ТаблицаЗначений;
	ТаблЗнач1.Колонки.Добавить("Автомобиль");
	ТаблЗнач1.Колонки.Добавить("ГосНомерАвтомобиля");
	ТаблЗнач1.Колонки.Добавить("Водитель");
	
	
	i=0;
	для каждого стр1 из ЗаказыПокупателей цикл
		   
		Если ЗначениеЗаполнено(МаркаАвтомобиля) или ЗначениеЗаполнено(ГосНомерАвтомобиля) тогда
		ТаблЗнач1.Добавить();
		стр2 = ТаблЗнач1[i];
		стр2.Автомобиль = МаркаАвтомобиля;
		стр2.ГосНомерАвтомобиля = ГосНомерАвтомобиля;
		i=i+1;
		КонецЕсли;	
	КонецЦикла;	
	ТаблЗнач1.Свернуть("Автомобиль, ГосНомерАвтомобиля, Водитель");//все телефоны вместе
	//------------------------
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ОбластьМакета.Параметры.Водитель = "Водитель:"; 
	ОбластьМакета.Параметры.ТелефонВодителя = "";

    NNN = ТаблЗнач1.Количество();
	Если NNN>0 тогда // пустые тоже сворачиваются!
	ОбластьМакета.Параметры.АвтомобильГосНомерАвтомобиля = "Автомобиль: "+ТаблЗнач1[0].Автомобиль+"  "+ТаблЗнач1[0].ГосНомерАвтомобиля;
			  
		водитель111 = ЭтотОбъект.Водитель;  //физ.лицо уже обновлено...
		
		ОбластьМакета.Параметры.Водитель = ОбластьМакета.Параметры.Водитель + " "+водитель111;
		телВод = ЭтотОбъект.ТелефонВодителя; //телефон водителя!
		
		ОбластьМакета.Параметры.ТелефонВодителя = ОбластьМакета.Параметры.ТелефонВодителя + телВод;
		
		Если NNN>1 тогда
		#Если Клиент Тогда	
		сообщить("В выбранных заказах найдено "+строка(NNN)+" автомобилей, но будет использован только 1-ый!", СтатусСообщения.Внимание);
		#КонецЕсли
        КонецЕсли;
	иначе
		Если значениеЗаполнено(ЭтотОбъект.Водитель) тогда
		ОбластьМакета.Параметры.Водитель = ОбластьМакета.Параметры.Водитель + ЭтотОбъект.Водитель;
		телВод = ""; //ПолучитьКонтактнуюИнформацию(ЭтотОбъект.Водитель,"Телефон");
		ОбластьМакета.Параметры.ТелефонВодителя = ОбластьМакета.Параметры.ТелефонВодителя + телВод;
		
		АвтомобильГосНомерАвтомобиля = ""; //ПолучитьКонтактнуюИнформацию(ЭтотОбъект.Водитель, "Другое");
		ОбластьМакета.Параметры.АвтомобильГосНомерАвтомобиля = АвтомобильГосНомерАвтомобиля;
		КонецЕсли;
	КонецЕсли;
	
	ОбластьМакета.Параметры.Номер = число(прав(Номер,5));
	ОбластьМакета.Параметры.Дата  = Формат(Дата,"ДЛФ=DD");

	
	ТабДокумент.Вывести(ОбластьМакета);

	//------------------------
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаМенеджер");

	ТаблЗнач1 = новый ТаблицаЗначений;
	ТаблЗнач1.Колонки.Добавить("Менеджер");
	i=0;
	для каждого стр1 из ЗаказыПокупателей цикл
		ТаблЗнач1.Добавить();
		стр2 = ТаблЗнач1[i];
		стр2.Менеджер = стр1.ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо;
		i=i+1;
	КонецЦикла;	
	ТаблЗнач1.Свернуть("Менеджер");//все телефоны вместе
	//---------------------------------------------------
		
	для i=0 по ТаблЗнач1.Количество()-1 цикл
		ОбластьМакета.Параметры.Менеджер = ТаблЗнач1[i].Менеджер;
		//-----------определение телефона-------------------------	
		Если ЗначениеЗаполнено(ТаблЗнач1[i].Менеджер.ФизЛицо) тогда
		отбор1 = новый Структура("Объект", ТаблЗнач1[i].Менеджер.ФизЛицо);
		отбор1.Вставить("Тип", перечисления.ТипыКонтактнойИнформации.Телефон);
		отбор1.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица);
		рс = регистрыСведений.КонтактнаяИнформация.Получить(отбор1);
		значТел = "";
			Если рс<>неопределено тогда
			значТел = рс.Представление; //ТаблЗнач1[i].Заказ.ТелефонМенеджера;
			КонецЕсли;
			ОбластьМакета.Параметры.Телефон  = значТел;
		иначе // по сотруднику
			#Если Клиент Тогда
			сообщить("Для пользователя: "+ строка(ТаблЗнач1[i].Менеджер) +" - не установлено Физ.Лицо! Контактная информация - не доступна!", СтатусСообщения.Внимание);
			#КонецЕсли
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
	конецЦикла;
	//----------------------------------------
    ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);
    
	//------------------Основная таблица заказов----------------------
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");   НомерСтроки =1;
	СуммаВсего = 0; ИтогРасстояние = 0;
	для i=0 по Заказы2.Количество()-1 цикл
		
	Выборка = Заказы2[i];	
	ОбластьМакета.Параметры.Номер = Выборка.Номер;
	ОбластьМакета.Параметры.Контрагент = Выборка.Контрагент;
	ОбластьМакета.Параметры.Менеджер   = Выборка.Ответственный;
		
	//+++ 29.10.2013
	ФизЮрАдрес = ПолучитьАдресИзКонтактнойИнформации(Выборка.Контрагент,"Фактический");
	ФизЮрАдрес = ?(СокрЛП(ФизЮрАдрес) = "", ПолучитьАдресИзКонтактнойИнформации(Выборка.Контрагент,"Юридический"), ФизЮрАдрес);
	ОбластьМакета.Параметры.АдресТелефон = ?(СокрЛП(Выборка.АдресДоставки)="", СокрЛП(ФизЮрАдрес), СокрЛП(Выборка.АдресДоставки));
	
	ОбластьМакета.Параметры.НомерСтроки = строка(НомерСтроки);
	
	ОбластьМакета.Параметры.Количество = Выборка.КоличествоШтук;//+" "+Выборка.Контрагент.ОсновноеКонтактноеЛицо;
    СуммаВсего = СуммаВсего + Выборка.КоличествоШтук;
		
	ТабДокумент.Вывести(ОбластьМакета);
	НомерСтроки = НомерСтроки+1;
	КонецЦикла;

	//------------------Конец----------------------
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	//СуммаВсего = Заказы2.Итог("СуммаДоставки"); // Сумма всего!
	
	ОбластьМакета.Параметры.СуммаКоличество = СуммаВсего;
	ТабДокумент.Вывести(ОбластьМакета);
	
	возврат ТабДокумент;
	
КонецФункции

функция ПечатьЗаявокНаБрак()
	ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
	ОбъектВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.НайтиПоНаименованию("Печать брака для задания на отгрузку").ПолучитьОбъект();
	Если ОбъектВнешнейФормы = Неопределено Тогда
	    Сообщить("Ошибка получения внешней печатной формы документа.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
		
	ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
	ДвоичныеДанные.Записать(ИмяФайла);
	Обработка = ВнешниеОбработки.Создать(ИмяФайла);
	Обработка.СсылкаНаОбъект = Ссылка;
	ТабДокумент = Обработка.Печать();
	
	Возврат ТабДокумент;
КонецФункции



#Если Клиент Тогда
	
// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() экспорт 

	СписокМакетов = Новый СписокЗначений;
	СписокМакетов.Добавить("ЗаказНовый",           "Отгрузка по складам"); 
	СписокМакетов.Добавить("ЗаказНовыйПоОчередям", "Отгрузка по складам (по очередям)"); 
	СписокМакетов.Добавить("ТоварыПоЗаказам", 	   "Товары по заказам");
	СписокМакетов.Добавить("---","--------------------------");
	СписокМакетов.Добавить("СписокЗаказов",	  "Задание (для водителя)");
	Если ЗаказыПокупателей.Количество() = 0  и ЗаявкиНаБрак.Количество() <> 0 
		и СкладПолучатель = Справочники.Склады.НайтиПоКоду("02185") Тогда
		СписокМакетов.Добавить("АктПриемаПередачи",	  "Акт приема передачи");
    КонецЕсли;
    ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		# Если Клиент Тогда
		Предупреждение("Документ можно распечатать только после его записи.");
		#КОнецЕсли
		Возврат;
	ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		
		# Если Клиент Тогда
		Предупреждение("Недостаточно прав для печати непроведенного документа!");
		#КонецЕсли

		Возврат;
	КонецЕсли;

	//Если ЭтотОбъект.Модифицированность() и ЭтотОбъект.Проведен тогда
	//	Если РольДоступна("ПолныеПрава") Тогда
	//		Предупреждение("Документ изменен. Перед печатью его необходимо записать.");
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;

	// Получить экземпляр документа на печать
	Если ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			#Если Клиент Тогда
			Сообщить("Ошибка получения внешней печатной формы документа.", СтатусСообщения.Важное);
			#КонецЕсли
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();	
		
	иначеЕсли ИмяМакета="ТоварыПоЗаказам" тогда
		   поРеализациям = естьРеализации(истина); // только по проведенным реализациям!
		   ТабДокумент = ПечатьТоварыПоЗаказам(поРеализациям); //всегда по регистру
	иначеЕсли ИмяМакета="ЗаказНовый" тогда
		  ВидПечати = истина;
		
		Режим = РежимДиалогаВопрос.ДаНет;//+++ 03.10.2013
		Ответ = Вопрос("Печатать только НЕ отгруженные товары?", Режим, 10);
		Если Ответ = КодВозвратаДиалога.Нет Тогда  	
			ВидПечати = ложь;
		КонецЕсли;

		ТабДокумент = ПечатьЗаданияНаОтгрузку(ВидПечати);
		
		//Плотников. заявка на брак
		
		Если ЗаявкиНаБрак.Количество() > 0 Тогда
		
		    ТабДокумент2 = ПечатьЗаявокНаБрак();
			   
		КонецЕсли;
		   
	иначеЕсли ИмяМакета="ЗаказНовыйПоОчередям" тогда //+++ 22.04.2013
		   ТабДокумент = ПечатьЗаданияНаОтгрузкуПоОчередям();
		   
		   //Плотников. заявка на брак
		   
		   Если ЗаявкиНаБрак.Количество() > 0 Тогда
		
		       ТабДокумент2 = ПечатьЗаявокНаБрак();
			   
		   КонецЕсли;
		   
	иначеЕсли ИмяМакета="СписокЗаказов" тогда
		   ТабДокумент = ПечатьЗаказов();
	// Сакулина	   
	ИначеЕсли   ИмяМакета="АктПриемаПередачи" тогда
		   ТабДокумент = ПечатьАктПриемаПередачи();
	КонецЕсли;
	   
   	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект));
	
	Если ТабДокумент2 <> Неопределено Тогда
		НапечататьДокумент(ТабДокумент2, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект)+", брак");
	КонецЕсли;

КонецПроцедуры // Печать

#КонецЕсли


Процедура ДвижениеПоРегиструРезервНаСкладах_БЕЗЗаказов()
	
	Для Каждого ТекСтрокаТовары Из Товары Цикл
		// регистр РезервНаСкладах Приход
		Движение = Движения.РезервНаСкладах.Добавить();
		Движение.Период = Дата;
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		
		Движение.Регистратор = ссылка;
		
		ЗаполнитьЗначенияСвойств(Движение, ТекСтрокаТовары); //все поля =
		Движение.Количество = текСтрокаТовары.КоличествоЗаказано;
		
		//25.03.2013 -------------Здесь же, а не в Реализации - расход ----------------------------
		Если текСтрокаТовары.Количество>0 Тогда
			Движение = Движения.РезервНаСкладах.Добавить();
			Движение.Период = Дата;   // Дата снятия резерва = фактической дате окончания отгрузки
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			
			Движение.Регистратор = ссылка;
			
			ЗаполнитьЗначенияСвойств(Движение, ТекСтрокаТовары); //все поля =
			Движение.Количество = текСтрокаТовары.Количество;
		КонецЕсли;	
	КонецЦикла;

КонецПроцедуры

//----------------Основная процедура движения по регистру РезервНаСкладах------------------------
// 1. получаем Товары и Заказанные Товары по ЗаказамПокупателей
// 2. идем в цикле и вычитаем по очереди...
//
Процедура ДвижениеПоРегиструРезервНаСкладах()
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	              |	ТЧЗаказыПокупателейЗадания.НомерСтроки КАК НомерСтроки,
	              |	ТЧЗаказыПокупателейЗадания.ЗаказПокупателя КАК ЗаказПокупателя
	              |ПОМЕСТИТЬ ТЧЗаказыПокупателейЗадания
	              |ИЗ
	              |	&ТЧЗаказыПокупателей КАК ТЧЗаказыПокупателейЗадания
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ РАЗЛИЧНЫЕ
	              |	ТЧЗаказыПокупателей.НомерСтроки КАК НомерСтрокиЗаказа,
	              |	ТЧЗаказыПокупателей.ЗаказПокупателя КАК Заказ,
	              |	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	              |	ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК КоличествоПоРегистру,
	              |	ЕСТЬNULL(ЗаказыПокупателейОстатки.Цена, 0) КАК Цена
	              |ИЗ
	              |	ТЧЗаказыПокупателейЗадания КАК ТЧЗаказыПокупателей
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя В (&СписокЗаказовПокупателя)) КАК ЗаказыПокупателейОстатки
	              |		ПО (ЗаказыПокупателейОстатки.ЗаказПокупателя = ТЧЗаказыПокупателей.ЗаказПокупателя)
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	НомерСтрокиЗаказа
	              |ИТОГИ
	              |	МИНИМУМ(НомерСтрокиЗаказа),
	              |	СУММА(КоличествоПоРегистру)
				  |ПО
	              |	Заказ
	              |АВТОУПОРЯДОЧИВАНИЕ";
				   
		Запрос.УстановитьПараметр("СписокЗаказовПокупателя", ЗаказыПокупателей.ВыгрузитьКолонку("ЗаказПокупателя") );
		Запрос.УстановитьПараметр("ТЧЗаказыПокупателей", ЗаказыПокупателей.Выгрузить() );
		//Запрос.УстановитьПараметр("МоменВремени",Новый граница(Дата, ВидГраницы.Исключая));
		
		результат = Запрос.Выполнить(); // основной запрос выполяется здесь сразу по всем заказам - получаем ЗАКАЗАННУЮ Номенклатуру
		СтрокаЗаказаПокупателя = результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		
		
	// для каждой номенклатуры - определяем в какие заказы попадет + и -
	тзТовары = Товары.Выгрузить(); // виртуальная таблица по которой и вычитаются остатки

  
	//-------------------Основной Цикл по Номенклатуре и Заказам--------------------
	Пока СтрокаЗаказаПокупателя.Следующий() цикл
		
	//--------общеее число Заказано по Номенклатуре и текущему заказу - делим для каждого склада...
	//КолПоЗаказу = СтрокаЗаказаПокупателя.КоличествоПоЗаданию;
	КолПоЗаказуВсего = СтрокаЗаказаПокупателя.КоличествоПоРегистру; // для Номенклатуры в Заказе и Остатках Заказано
		
	РеализацияПоЗаказуПроведена = естьРеализации(истина, СтрокаЗаказаПокупателя.Заказ);//+++ ограничение снятия резерва!
	
	 ТекСтрокаПоНоменклатуре = СтрокаЗаказаПокупателя.Выбрать(); // открываем номенклатуру, заказанную в заказе по регистру
	 
	 Если КолПоЗаказуВсего<=0 тогда // нет заказанных товаров по заказу
		 продолжить;
	 КонецЕсли;
	 
	 //--------------------по заказанной в заказе номенклатуре - ищем ее же в таблице Товары по всем складам------------------------
	 Пока ТекСтрокаПоНоменклатуре.Следующий() Цикл
		 
		КолПоЗаказуВ  = ТекСтрокаПоНоменклатуре.КоличествоПоРегистру;
		КолПоЗаказуИз = ТекСтрокаПоНоменклатуре.КоличествоПоРегистру;
				
		строкиТовары = тзТовары.НайтиСтроки(новый Структура("Номенклатура", ТекСтрокаПоНоменклатуре.Номенклатура)); // однозначно определяет строку, индекс = номерСтроки - 1
				
		//------------------------------------------------------------------------
		Для i=0 по строкиТовары.Количество()-1 Цикл
		строкаТовары =тзТовары[строкиТовары[i].номерСтроки-1];
		
		Если строкаТовары.КоличествоЗаказано<=0 и строкаТовары.Количество<=0 Тогда
			Продолжить; // уже все отгрузили в предыдущих заказах по данному складу-адресу
		КонецЕсли;	
		
		Если КолПоЗаказуВ<=0 и КолПоЗаказуИз<=0 Тогда  // всё заказанное количество по номенклатуре заказа - распределили по склад-адресу...
			Прервать;
		КонецЕсли;	
			
		//------------------------------ГЛАВНЫЕ УСЛОВИЯ ДЕЛЕНИЯ -------------------------------
		    // КолВ = количество В резерв    - по текущему складу-адресу
		    // КолИз = количество Из резерва - по текущему складу-адресу
			
		Если КолПоЗаказуВ>=строкаТовары.КоличествоЗаказано тогда
			КолВ = строкаТовары.КоличествоЗаказано;
			КолПоЗаказуВ = КолПоЗаказуВ - строкаТовары.КоличествоЗаказано;
			строкаТовары.КоличествоЗаказано = 0; //все отгрузили с этого склада
		иначе
			КолВ = КолПоЗаказуВ;  // не отрицательный!
			КолПоЗаказуВ = 0;
			строкаТовары.КоличествоЗаказано = строкаТовары.КоличествоЗаказано - КолВ;
		КонецЕсли;
		
		Если КолПоЗаказуИз>=строкаТовары.Количество тогда
			КолИз = строкаТовары.Количество;
			КолПоЗаказуИз = КолПоЗаказуИз - строкаТовары.Количество;
			строкаТовары.Количество = 0;
		иначе
			КолИз = КолПоЗаказуИз; // не отрицательный!
			КолПоЗаказуИз = 0;
			строкаТовары.Количество = строкаТовары.Количество - КолИз;
 		КонецЕсли;

		//-------------------------ДВИЖЕНИЯ  В Резерв (Приход)-------------------------------
		Если КолВ>0 тогда
		Движение = Движения.РезервНаСкладах.Добавить();
		Движение.Период = Дата;
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		
		Движение.Регистратор = ссылка;
		
		ЗаполнитьЗначенияСвойств(Движение, строкаТовары); //все поля =
		Если ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Приход Тогда ////// плотников
	        Движение.АдресХранения = Справочники.АдресаХранения.ПустаяСсылка();
		    Движение.Склад = СкладПолучатель;  /////Склад отправитель
		КонецЕсли;
		Движение.ЗаказПокупателя = ТекСтрокаПоНоменклатуре.Заказ; 
		Движение.Количество = КолВ;
		КонецЕсли;
	
		//-------------------ДВИЖЕНИЯ Из Резерва (Расход)----------------------------
		флВыполнено = ЭтотОбъект.Выполнено;
		Если (КолИз>0 и РеализацияПоЗаказуПроведена) или флВыполнено тогда 
			Движение = Движения.РезервНаСкладах.Добавить();
			Движение.Период = Дата;   // Дата снятия резерва = фактической дате окончания отгрузки
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			
			Движение.Регистратор = ссылка;
		   
			ЗаполнитьЗначенияСвойств(Движение, строкаТовары); //все поля =
			Если ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Приход Тогда ////// плотников
	            Движение.АдресХранения = Справочники.АдресаХранения.ПустаяСсылка();
		        Движение.Склад = СкладПолучатель;  /////Склад отправитель
		    КонецЕсли;
			Движение.ЗаказПокупателя = ТекСтрокаПоНоменклатуре.Заказ; 
			Движение.Количество  = ?(флВыполнено, КолВ, КолИз); // выполнено закрываем в 0!
		КонецЕсли;	
		
	    КонецЦикла;// по Складам и Адресам

	КонецЦикла;// по Заказам
	
КонецЦикла; // по номенклатуре
	
КонецПроцедуры


Процедура ОбработкаПроведения(Отказ, Режим)
		//-------------------------с разбивкой по Заказам Покупателей---------------
	Если  Константы.ИспользованиеРезерваНаСкладах.Получить()
		И НЕ Отказ Тогда
		ДвижениеПоРегиструРезервНаСкладах();  
	КонецЕсли;
	
	//-------------стандартный мастер настройки движений----------------------------
	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения) 
	
	//+++ при ручном вводе документа 10.09.2013
	Если ЭтотОбъект.ВидОперации = перечисления.ВидыДвиженийПриходРасход.Приход Тогда
		возврат; // для прихода - проверок нет!	 да и сам документ... теряет смысл внутреннего перемещения
	КонецЕсли;	

	Важность = ?(Важность <> перечисления.Важность.ПустаяСсылка(), Важность, // ручная важность!
			?(ЭтоКлиент11категории(ЭтотОбъект), перечисления.Важность.Высокая,  перечисления.Важность.Средняя) );
		
	//+++( 20.07.2016 ---подразделение отгрузки определяется подразделением 1-го Заказа!----
	#Если Клиент тогда

	Если ЗаказыПокупателей.Количество()>0 и ЭтоНовый() тогда  //06.09.2017 - НОМЕР после 1 проведения - нельзя меняться !!!
			
		Если ЭтотОбъект.Подразделение <> ЗаказыПокупателей[0].ЗаказПокупателя.Подразделение тогда
			ЭтотОбъект.Подразделение = ЗаказыПокупателей[0].ЗаказПокупателя.Подразделение;
			ном0 = ЭтотОбъект.Номер;
			УстановитьНомерДокумента(ЭтотОбъект);
			#Если Клиент тогда
			сообщить("В документе установлено: "+строка(ЭтотОбъект.Подразделение)+" -> Номер изменился "+строка(ном0)+" >> "+строка(ЭтотОбъект.Номер), СтатусСообщения.Внимание);
			#КонецЕсли	
		КонецЕсли;
		
	КонецЕсли;
	
	//09.02.2017
	Если (не Подразделение.ОбособленноеПодразделение и СкладПолучатель.Транзитный)
		или (Подразделение.ОбособленноеПодразделение и СкладПолучатель.Подразделение <> Подразделение) тогда
		
		Если НЕ Выполнено и НЕ Проведен тогда //до проведения!
			СкладПолучатель = Подразделение.Склад;
			#Если Клиент тогда
			сообщить("Склад-получатель автоматически изменен на основной Склад подразделения: "+строка(СкладПолучатель), СтатусСообщения.Информация );
			#КонецЕсли	
		Иначе	
			#Если Клиент тогда
			сообщить("Склад-получатель указан НЕПРАВИЛЬНО!", СтатусСообщения.Важное );
			#КонецЕсли	
		ОТКАЗ=истина;  //нельзя записать никак и никому!
		КонецЕсли;
	КонецЕсли;

    //-----------проверим, что у всех заказов - то же самое подразделение!--------------------
	Для каждого стр1 из ЗаказыПокупателей цикл
		Если стр1.ЗаказПокупателя.Подразделение<>Подразделение тогда
			#Если Клиент тогда
			сообщить("Подразделение в "+строка(стр1.ЗаказПокупателя)+" - не совпадает с подразделением документа!", СтатусСообщения.Внимание);
			#КонецЕсли	
			ОТКАЗ=НЕ РольДоступна("ПравоЗавершенияРаботыПользователей");
		КонецЕсли;
	КонецЦикла;
	//+++)
   #КонецЕсли	



//КАК в Задании на отгрузку
Если  ( ЭтотОбъект.ЗаказыПокупателей.Количество()>0 
		      и НЕ (РежимЗаписи=РежимЗаписиДокумента.ОтменаПроведения)
			  и не ЭтотОбъект.ПометкаУдаления
			  и не ЭтотОбъект.Выполнено) Тогда   //+++ 07.11.2013  НЕ  ОтменаПроведения
		
		списокЗаказов = новый СписокЗначений;
		//+++ 17.03.2014 не 1 раз, а каждый раз!
		//списокЗаказов.ЗагрузитьЗначения( ЭтотОбъект.ЗаказыПокупателей.ВыгрузитьКолонку("ЗаказПокупателя") ); 
		
		отказ1 = Отказ;
		//+++ 27.03.2015 - не надо проверять лимит при "выполнении",
	    // уже сформированы реализации и ограничения еще раз учитывают эти же заказы...
		
		
		
//+++ (01.10.2015 - было так - сколько заказов столько и проверок!

		Для каждого Заказ1 из ЭтотОбъект.ЗаказыПокупателей цикл //+++ 24.07.2013 - переделанная процедура
	    Отказ2=ложь; Отказ1=ложь;
		
	    	//+++ 17.03.2014 - список надо загружать заново каждый раз!
	    	списокЗаказов.ЗагрузитьЗначения( ЭтотОбъект.ЗаказыПокупателей.ВыгрузитьКолонку("ЗаказПокупателя") ); 
	    	
	    	//+++ 21.10.2013 - потенциальные покупатели - не грузятся!
	    	Если Заказ1.ЗаказПокупателя.Контрагент.ПринадлежитЭлементу(Справочники.Контрагенты.ПотенциальныеПокупатели) Тогда
	    		#Если Клиент Тогда
	    			Сообщить("Контрагент: "+строка(Заказ1.ЗаказПокупателя.Контрагент)+" - находится в Потенциальных покупателях! Отгрузка невозможна!", СтатусСообщения.Внимание);
	    		#КонецЕсли
	    		Отказ1 = истина;
			Иначе
//    	ПроверитьПревышениеОбщегоЛимитаДЗСУчетомЗаказа(списокЗаказов, отказ1, Заказ1.ЗаказПокупателя.Контрагент, Дата);   //*** 2015.09.17 передается Дата
            Если Не Заказ1.ЗаказПокупателя.Ошиповка Тогда
				ПроверитьПревышениеОбщегоЛимитаДЗСУчетомЗаказа(списокЗаказов, отказ1, Заказ1.ЗаказПокупателя.Контрагент);   //*** 12.10.2015 НЕ нужна дата!!!
			КонецЕсли;		
		
		
		
				//==========ПРОВЕРКА ПРИ ЛЮБОЙ ЗАПИСИ!================
			ЗакОб = Заказ1.ЗаказПокупателя.ПолучитьОбъект();
			ЗакОб.ОбменДанными.Загрузка = ЛОЖЬ;
			максДата = макс(ЭтотОбъект.дата, ЗакОб.ДатаОтгрузки);
			//Миронычев
			Если ЗакОб.ДоговорКонтрагента.ТипДоговора <> Справочники.ТипыДоговоров.ПредоплатаПоСчетам тогда
				ПроверитьДоговорВЗаказеПокупателя(ЗакОб, Отказ2, Истина, максДата); //+++  12-21.09.2016 ЗАПРЕТ!
			КонецЕсли;
			//КонецМиронычев
			
			//Если ЗакОб.Подразделение.ОбособленноеПодразделение тогда
			//	Предупреждение("Нельзя ставить Заказ "+ЗакОб.Номер+" - на отгрузку из Ярославля!
			//				   |Этот заказ для отгрузки с филиала:
			//				   |"+сокрЛП(ЗакОб.Склад.Подразделение.Наименование)+" !",30);
			//	Отказ2 = истина;
			//КонецЕсли;		
			
			Если ЗакОб.ОтгрузкаСПодразделенияСклада тогда
				# Если Клиент Тогда

				Предупреждение("Нельзя ставить Заказ "+ЗакОб.Номер+" - на отгрузку из Ярославля!
							   |Этот заказ уже предназначен [v] для отгрузки со склада филиала:
							   |"+сокрЛП(ЗакОб.Склад.Подразделение.Наименование)+" !",30);
				#КонецЕсли			   
				Отказ2 = истина;
			КонецЕсли;		
			
			КонецЕсли;
			
			Если отказ1 или отказ2 Тогда
	    		отказ = истина;
	    	КонецЕсли;	
	    КонецЦикла;
	    
		Если Отказ тогда 
			возврат; 
	    КонецЕсли;
		
		
		
////===================УЧЕТ ВСЕХ (текущих не выполненных) ЗАДАНИЙ на ОТГРУЗКУ по Клиентам ============================
////-------1) найдем список клиентов
//		списКлиентов = новый СписокЗначений;
//		  Для каждого стр1 из ЗаказыПокупателей цикл
//			  если списКлиентов.НайтиПоЗначению( стр1.ЗаказПокупателя.Контрагент ) = неопределено тогда
//				  
//			//+++ 21.10.2013 - потенциальные покупатели - не грузятся!
//			Если стр1.ЗаказПокупателя.Контрагент.ПринадлежитЭлементу(Справочники.Контрагенты.ПотенциальныеПокупатели) Тогда
//				#Если Клиент Тогда
//					Сообщить("Контрагент: "+строка(стр1.ЗаказПокупателя.Контрагент)+" - находится в Потенциальных покупателях! Отгрузка невозможна!", СтатусСообщения.Внимание);
//				#КонецЕсли
//				Отказ1 = истина;
//			иначе
//				списКлиентов.Добавить( стр1.ЗаказПокупателя.Контрагент );
//			КонецЕсли;
//	  
//	
//			  КонецЕсли;
//		  КонецЦикла;
//		  
//		  Если Отказ1 тогда Отказ = Отказ1; возврат; 
//		  КонецЕсли;
//		  
////-------2) найдем ВСЕ Заказы по Клиентам из Заданий на отгрузку (не выполненные и не удаленные)
////			по этим клиентам за последний месяц и заказы не на перемещение
//		 Запрос1 = Новый Запрос;
//		  Запрос1.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
//						  |	ЗаданиеНаОтгрузкуЗаказыПокупателей.ЗаказПокупателя.Контрагент КАК Контрагент,
//						  |	ЗаданиеНаОтгрузкуЗаказыПокупателей.ЗаказПокупателя КАК ЗаказПокупателя
//						  |ИЗ
//						  |	Документ.ЗаданиеНаОтгрузку.ЗаказыПокупателей КАК ЗаданиеНаОтгрузкуЗаказыПокупателей
//						  
//						  |ГДЕ
//						  |	ЗаданиеНаОтгрузкуЗаказыПокупателей.ЗаказПокупателя.Контрагент В (&списКлиентов)
//						  |	И НЕ ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка.ПометкаУдаления
//						  |	И НЕ ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка.Выполнено
//						  |	И (ЗаданиеНаОтгрузкуЗаказыПокупателей.Реализация = НЕОПРЕДЕЛЕНО
//						  |			ИЛИ НЕ ЗаданиеНаОтгрузкуЗаказыПокупателей.Реализация.Проведен)
//						  |	И ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка.Дата >= &Дата0
//						  |	И ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка.Дата <= &Дата 
//					//перемещение на филиалы...	  
//						  |	И НЕ ЗаданиеНаОтгрузкуЗаказыПокупателей.ЗаказПокупателя.ВводитьТолькоПеремещение
//						  
//			//+++ 09.10.2015 - список заказов может измениться! 
//			|"+ ?( ЭтотОбъект.ЭтоНовый(), "", " И НЕ ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка = &ЭтотДокументСсылка")+"
//						   
//						  |ИТОГИ
//						  |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПокупателя)
//						  |ПО
//						  |	Контрагент
//						  |АВТОУПОРЯДОЧИВАНИЕ";
//		  Запрос1.УстановитьПараметр("списКлиентов", списКлиентов);
//		  
//		  Дата =  ?(Дата='00010101', ТекущаяДата(), Дата );   //08.10.2015 - установка даты документа
//		  
//		  Если не ЭтотОбъект.ЭтоНовый() тогда
//				   Запрос1.УстановитьПараметр("ЭтотДокументСсылка",  Ссылка );
//		  КонецЕсли;		   
//		 
//		  Запрос1.УстановитьПараметр("Дата", КонецДня( Дата )  ); // на конец дня Задания! 
//		  Запрос1.УстановитьПараметр("Дата0", ДобавитьМесяц( Дата, -1) ); // задание не более месяца назад! 
//		  Результат1 = Запрос1.Выполнить();
//		  выборкаКонтр = результат1.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам );
//		  
//	//+++ 09.10.2015 - добавляем заказы из Этого документа!!!
//	для каждого Клиент1 из списКлиентов цикл
//		
//		списокЗаказов = новый СписокЗначений; // по 1 клиенту!
//		для каждого стр111 из ЭтотОбъект.ЗаказыПокупателей цикл //ВСЕ Заказы из этого документа
//			если стр111.ЗаказПокупателя.Контрагент = Клиент1 тогда
//			списокЗаказов.Добавить( стр111.ЗаказПокупателя );
//			КонецЕсли;
//		КонецЦикла;
//		
//		выборкаКонтр.Сбросить();// каждый раз по новому!
//		Пока выборкаКонтр.Следующий() цикл  //==================================================================
//			если Клиент1 <> выборкаКонтр.Контрагент тогда 
//				продолжить;
//			КонецЕсли;	
//			выборкаЗак = выборкаКонтр.Выбрать();
//			пока выборкаЗак.Следующий() цикл
//				
//				если списокЗаказов.НайтиПоЗначению( выборкаЗак.ЗаказПокупателя ) = неопределено тогда // без дублей
//		  		списокЗаказов.добавить( выборкаЗак.ЗаказПокупателя);
//				КонецЕсли;

//			КонецЦикла;
//		КонецЦикла;
//		
//		//*** 2015.09.17 передается Дата - в течение дня возможно несколько отгрузок!  
//		//лимит проверяется с учетом суммы всех заказов покупателя в ЭТОМ задании!
//		ПроверитьПревышениеОбщегоЛимитаДЗСУчетомЗаказа(списокЗаказов, отказ1, Клиент1, КонецДня(Дата) );  
//		
//		Если отказ1 Тогда  //08.10.2015 ------------ВКЛЮЧЕН Запрет!-----------------------
//			отказ = отказ1;
//		КонецЕсли;	

//	КонецЦикла;
//	//+++)

	КонецЕсли; 	// конец контроля лимитов!!!
	




Если ДатаДокументаПервая='00010101' тогда
	ДатаДокументаПервая = ТекущаяДата();
КонецЕсли;

КонецПроцедуры	

Функция ПечатьАктПриемаПередачи()
	ТабДок=Новый ТабличныйДокумент;
	Макет=ПолучитьМакет("АктПриемаПередачи");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
    ОбластьТовар = Макет.ПолучитьОбласть("Строка");
    ОбластьИтоги = Макет.ПолучитьОбласть("Итоги");
	
	ТабДок.Вывести(ОбластьШапка);
	Для Каждого СтрТовар из ЗаявкиНаБрак Цикл
		ОбластьТовар.Параметры.Заполнить(СтрТовар);
		ТабДок.Вывести(ОбластьТовар);
	КонецЦикла;	
	ОбластьИтоги.Параметры.КоличествоИтого = ЗаявкиНаБрак.Итог("Количество");
	ТабДок.Вывести(ОбластьИтоги);
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.АвтоМасштаб = Истина;
	Возврат ТабДок;
КонецФункции


