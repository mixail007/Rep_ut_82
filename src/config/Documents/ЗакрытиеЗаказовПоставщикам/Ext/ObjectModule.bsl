Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Добавляет в табличную часть Заказы строки с заказами поставщикам, по которым существуют
// остатки в регистре ЗаказыПоставщикам.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьЗаказыПоОстаткам(поМинусам=ложь) Экспорт

	Запрос = Новый Запрос;

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки КАК ЗаказыПоставщикамОстатки
	|ГДЕ ЗаказыПоставщикамОстатки.ЗаказПоставщику ССЫЛКА Документ.ЗаказПоставщику И ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ";
Если поМинусам тогда
	Запрос.Текст = Запрос.Текст +"
	|И ЗаказыПоставщикамОстатки.КоличествоОстаток < 0";
КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Заказы.Добавить();
		НоваяСтрока.ЗаказПоставщику = Выборка.ЗаказПоставщику;
	КонецЦикла; 

КонецПроцедуры // ЗаполнитьЗаказыПоОстаткам()

Процедура ЗаполнитьЗаказыПоКоторымБылоПоступление () Экспорт
 Запрос =Новый Запрос;
 Запрос.Текст ="ВЫБРАТЬ 
|  ЗаказПоставщику,
|	  СУММА(КоличествоОстаток) КоличествоОстаток
|	  ПОМЕСТИТЬ ВТ_ЗаказыПоставщику
|	   ИЗ
| (
| 	ВЫБРАТЬ 
| 		ЗаказПоставщику КАК ЗаказПоставщику,
|		Номенклатура ,
|	ВЫБОР КОГДА КоличествоОстаток>0 ТОГДА КоличествоОстаток ИНАЧЕ -КоличествоОстаток КОНЕЦ КоличествоОстаток
|	ИЗ
|		РегистрНакопления.ЗаказыПоставщикам.Остатки( , (ЗаказПоставщику.НомерКонтейнера<>"""" И ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ ) И Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски))
|	ГДЕ КоличествоОстаток <> 0  ) А  
|	СГРУППИРОВАТЬ ПО ЗаказПоставщику //)  КАК ЗаказыПоставщикамОстатки
|	
|;	
|ВЫБРАТЬ РАЗЛИЧНЫЕ Сделка  ЗаказПоставщику
|ИЗ Документ.ПоступлениеТоваровУслуг ГДЕ Ссылка.Проведен И Сделка В (ВЫБРАТЬ ЗаказПоставщику ИЗ ВТ_ЗаказыПоставщику)";

Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Заказы.Добавить();
		НоваяСтрока.ЗаказПоставщику = Выборка.ЗаказПоставщику;
	КонецЦикла; 

КонецПроцедуры	

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  ВыборкаПоШапкеДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуПоЗаказамПоставщиков()
	
	СписокЗаказов = Заказы.ВыгрузитьКолонку("ЗаказПоставщику");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка",            Ссылка);
	Запрос.УстановитьПараметр("МоментДокумента",           МоментВремени());
	Запрос.УстановитьПараметр("СписокЗаказов",             СписокЗаказов);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказыПоставщикамОстатки.ДоговорКонтрагента,
	               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику,
	               |	ЗаказыПоставщикамОстатки.Номенклатура,
	               |	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры,
	               |	ЗаказыПоставщикамОстатки.СтатусПартии,
	               |	ЗаказыПоставщикамОстатки.Цена,
	               |	ЗаказыПоставщикамОстатки.ЕдиницаИзмерения,
	               |	ЗаказыПоставщикамОстатки.КоличествоОстаток КАК Количество,
	               |	ЗаказыПоставщикамОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	               |	ЗаказыПоставщикамОстатки.СуммаУпрОстаток КАК СуммаУпр,
	               |	ЗаказыПоставщикамОстатки.ВЭД,
	               |	ЗаказыПоставщикамОстатки.Подразделение
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПоставщикам.Остатки(&МоментДокумента, ЗаказПоставщику В (&СписокЗаказов)) КАК ЗаказыПоставщикамОстатки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЗаказыПоставщикамОстатки.ДоговорКонтрагента,
	               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику,
	               |	ЗаказыПоставщикамОстатки.Номенклатура,
	               |	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры,
	               |	ЗаказыПоставщикамОстатки.СтатусПартии,
	               |	ЗаказыПоставщикамОстатки.Цена,
	               |	ЗаказыПоставщикамОстатки.ЕдиницаИзмерения";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
    //***было до 02.2016 нифига не работало, т.к. отбор по договорам неправильно делать. Заказывают по одному, поступление - по другому.
	//Запрос.Текст = "
	//|ВЫБРАТЬ
	//|	ТаблицаЗаказов.ПричинаЗакрытияЗаказа,
	//|	ЗаказыПоставщикамОстатки.ДоговорКонтрагента,
	//|	ЗаказыПоставщикамОстатки.ЗаказПоставщику,
	//|	ЗаказыПоставщикамОстатки.Номенклатура,
	//|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры,
	//|	ЗаказыПоставщикамОстатки.СтатусПартии,
	//|	ЗаказыПоставщикамОстатки.Цена,
	//|	ЗаказыПоставщикамОстатки.ЕдиницаИзмерения,
	//|	ЗаказыПоставщикамОстатки.КоличествоОстаток          КАК Количество,
	//|	ЗаказыПоставщикамОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	//|	ЗаказыПоставщикамОстатки.СуммаУпрОстаток            КАК СуммаУпр
	//|ИЗ
	//|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&МоментДокумента, ДоговорКонтрагента В (ВЫБРАТЬ РАЗЛИЧНЫЕ Заказ.ДоговорКонтрагента
	//|                                                                 ИЗ Документ.ЗаказПоставщику КАК Заказ
	//|                                                                 ГДЕ Заказ.Ссылка В (&СписокЗаказов))
	//|                                                               И ЗаказПоставщику В (&СписокЗаказов)) КАК ЗаказыПоставщикамОстатки
	//|
	//|ЛЕВОЕ СОЕДИНЕНИЕ
	//|	Документ.ЗакрытиеЗаказовПоставщикам.Заказы КАК ТаблицаЗаказов
	//|ПО
	//|	ТаблицаЗаказов.Ссылка = &ДокументСсылка
	//|	И
	//|	ТаблицаЗаказов.ЗаказПоставщику = ЗаказыПоставщикамОстатки.ЗаказПоставщику
	//|";
	
КонецФункции // ПодготовитьТаблицуТоваров()

Функция ПодготовитьТаблицуПричинЗакрытияЗаказов()
	
	СписокЗаказов = Заказы.ВыгрузитьКолонку("ЗаказПоставщику");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка",            Ссылка);
	Запрос.УстановитьПараметр("МоментДокумента",           МоментВремени());
	Запрос.УстановитьПараметр("СписокЗаказов",             СписокЗаказов);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаЗаказов.ПричинаЗакрытияЗаказа,
	               |	ЗаказыПоставщикамОстатки.ДоговорКонтрагента,
	               |	ЗаказыПоставщикамОстатки.ЗаказПоставщику,
	               |	ЗаказыПоставщикамОстатки.КоличествоОстаток КАК Количество,
	               |	ЗаказыПоставщикамОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	               |	ЗаказыПоставщикамОстатки.СуммаУпрОстаток КАК СуммаУпр
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПоставщикам.Остатки(&МоментДокумента, ЗаказПоставщику В (&СписокЗаказов)) КАК ЗаказыПоставщикамОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗакрытиеЗаказовПоставщикам.Заказы КАК ТаблицаЗаказов
	               |		ПО (ТаблицаЗаказов.ЗаказПоставщику = ЗаказыПоставщикамОстатки.ЗаказПоставщику)
	               |ГДЕ
	               |	ТаблицаЗаказов.Ссылка = &ДокументСсылка";
				   
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  ВыборкаПоШапкеДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуПоРазмещениюЗаказовПокупателей()

	СписокЗаказов = Заказы.ВыгрузитьКолонку("ЗаказПоставщику");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка",            Ссылка);
	Запрос.УстановитьПараметр("МоментДокумента",           МоментВремени());
	Запрос.УстановитьПараметр("СписокЗаказов",             СписокЗаказов);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|    ЗаказПоставщику,
	|    Номенклатура,
	|    ХарактеристикаНоменклатуры,
	|    ТоварТара,
	|    ЗаказПокупателя,
	|    КоличествоОстаток          КАК Количество
	|ИЗ
	|    РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&МоментДокумента, ЗаказПоставщику В (&СписокЗаказов))";
	
	ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗаказов;

КонецФункции // ПодготовитьТаблицуТоваров()

// По итогам региситра "Расчеты с контрагентами" подготавливает таблицу для формирования движений по этому регистру
Функция ПодготовитьТаблицуПоРасчетамУпр()

	СписокЗаказов = Заказы.ВыгрузитьКолонку("ЗаказПоставщику");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментДокумента",           МоментВремени());
	Запрос.УстановитьПараметр("СписокЗаказов",             СписокЗаказов);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|    ДоговорКонтрагента,
	|    Сделка,
	|    РасчетыВозврат,
	|    СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	|    СуммаУпрОстаток            КАК СуммаУпр
	|ИЗ
	|    РегистрНакопления.РасчетыСКонтрагентами.Остатки(&МоментДокумента, Сделка В (&СписокЗаказов))";
	
	ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗаказов;

КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиЗаказы(ТаблицаПоТоварам, ВыборкаПоШапкеДокумента, 
	                                              Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ЗаказПоставщику");

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Заказы", СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиЗаказы()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  ВыборкаПоШапкеДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, ВыборкаПоШапкеДокумента, ТаблицаПоЗаказамПоставщикам, ТаблицаПоРазмещениюЗаказовПокупателей, 
								ТаблицаПоРасчетам, Отказ, Заголовок);

	Если ТаблицаПоЗаказамПоставщикам.Количество() > 0 Тогда

		НаборДвижений = Движения.ЗаказыПоставщикам;

		ТаблицаДвижений = НаборДвижений.Выгрузить();

		ЗагрузитьВТаблицуЗначений(ТаблицаПоЗаказамПоставщикам, ТаблицаДвижений);

		НаборДвижений.мПериод = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		Движения.ЗаказыПоставщикам.ВыполнитьРасход();

		//***2016.02.18 заремлено, т.к. невозможно было закрыть дважды один и тот же заказ
		//ТаблицаДляПроведенияПричин = ПодготовитьТаблицуПричинЗакрытияЗаказов();
		//ТаблицаДляПроведенияПричин.Свернуть("ЗаказПоставщику, ПричинаЗакрытияЗаказа", "СуммаВзаиморасчетов, СуммаУпр");
		//НаборДвижений = Движения.ПричиныЗакрытияЗаказов;
		//Для каждого СтрокаТаблицы Из ТаблицаДляПроведенияПричин Цикл
		//	Если НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.ПричинаЗакрытияЗаказа) Тогда
		//		НоваяЗапись = НаборДвижений.Добавить();
		//		НоваяЗапись.Заказ                 = СтрокаТаблицы.ЗаказПоставщику;
		//		НоваяЗапись.ПричинаЗакрытияЗаказа = СтрокаТаблицы.ПричинаЗакрытияЗаказа;
		//		НоваяЗапись.СуммаВзаиморасчетов   = СтрокаТаблицы.СуммаВзаиморасчетов;
		//		НоваяЗапись.СуммаУпрУчета         = СтрокаТаблицы.СуммаУпр;
		//	КонецЕсли; 
		//КонецЦикла;
		//***

		Если ТаблицаПоРасчетам.Количество() > 0 Тогда

			НаборДвижений = Движения.РасчетыСКонтрагентами;

			ТаблицаДвижений = НаборДвижений.Выгрузить();
			
			ЗагрузитьВТаблицуЗначений(ТаблицаПоРасчетам, ТаблицаДвижений);
			
			НаборДвижений.мПериод = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			Движения.РасчетыСКонтрагентами.ВыполнитьРасход();

		КонецЕсли;

	КонецЕсли;

	Если ТаблицаПоРазмещениюЗаказовПокупателей.Количество() > 0 Тогда

		НаборДвижений = Движения.РазмещениеЗаказовПокупателей;

		ТаблицаДвижений = НаборДвижений.Выгрузить();

		ЗагрузитьВТаблицуЗначений(ТаблицаПоРазмещениюЗаказовПокупателей, ТаблицаДвижений);

		НаборДвижений.мПериод = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		Движения.РазмещениеЗаказовПокупателей.ВыполнитьРасход();

	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);

	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = СформироватьДеревоПолейЗапросаПоШапке();
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",        "ВестиПартионныйУчетПоСкладам", "ВестиПартионныйУчетПоСкладам");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Подготовим таблицу 
	ТаблицаПоЗаказамПоставщикам = ПодготовитьТаблицуПоЗаказамПоставщиков();
	
	// Подготовим таблицу 
	ТаблицаПоРазмещениюЗаказовПокупателей = ПодготовитьТаблицуПоРазмещениюЗаказовПокупателей();
	
	ТаблицаПоРасчетам = ПодготовитьТаблицуПоРасчетамУпр();
	
	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиЗаказы(ТаблицаПоЗаказамПоставщикам, СтруктураШапкиДокумента, 
											Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоЗаказамПоставщикам, ТаблицаПоРазмещениюЗаказовПокупателей,
							ТаблицаПоРасчетам, Отказ, Заголовок);
							
	КонецЕсли; 

КонецПроцедуры	// ОбработкаПроведения()

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
