
Перем ПоказыватьКоличество Экспорт;
Перем СоответствиеОтветственныхЛиц Экспорт;
Перем мСтруктураПоложенийКолонок;

Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда
		ПериодРегистрации = НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	
	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = ДатаКакМесяцПредставление(ПериодРегистрации);
	
	// Проверим корректность записанного документа, если он некорректен, исправим его
	Если ОтветственныеЛица.Количество() = 0 И Данные.Количество() > 0 Тогда
		СообщитьОбОшибке("Документ " + СокрЛП(Ссылка) + " был записан некорректно! Информация о планах очищена.");
		Данные.Очистить();
	КонецЕсли;

	ЗаполнитьСписокОтветственныхЛиц();

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("ПоказательЭффективности");

	// Установить ограничение - изменять видимоть колонок для таличного поля 
	УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ТаблицаОтветственныхЛиц.Колонки, СтруктураКолонок);

	ЗаполнитьТаблицуОтветственныхЛицФормы();

	ЭлементыФормы.ТаблицаОтветственныхЛиц.СоздатьКолонки();

	//Для Каждого СтрокаОтветственныеЛица Из ОтветственныеЛица Цикл
	//	й = ЭлементыФормы.ТаблицаОтветственныхЛиц.Колонки.Найти("план"+СоответствиеОтветственныхЛиц[СтрокаОтветственныеЛица.ОтветственноеЛицо]);
	//	Если й <> Неопределено Тогда
	//		й.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	//	КонецЕсли;
	//КонецЦикла;
	
	// Установим недостающие параметры
	УстановитьНедостающиеПараметры();

	ПолучитьСтруктуруПоложенийКолонок();
	ВидимостьКолонок();
		
КонецПроцедуры

Процедура ПериодРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);
	
КонецПроцедуры

Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, Направление);
	Элемент.Значение = ДатаКакМесяцПредставление(ПериодРегистрации);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ТаблицаОтветственныхЛиц.Итог("Вес") > 1 Тогда
		Сообщить("Сумма колонки ""Вес"" не должна превышать 1", СтатусСообщения.Важное);
		Отказ = Истина;
	КонецЕсли;
	
	Данные.Очистить();
	Для Каждого СтрокаТаблицыОтветственныхЛиц Из ТаблицаОтветственныхЛиц Цикл
		Для Каждого СтрокаОтветственныеЛица Из ОтветственныеЛица Цикл
			НомерСоответствияТекущейКолонки = СоответствиеОтветственныхЛиц.Получить(СтрокаОтветственныеЛица.ОтветственноеЛицо);
			НоваяСтрока = Данные.Добавить();
			НоваяСтрока.ИндексСтрокиТаблицыОтветственныхЛиц = ТаблицаОтветственныхЛиц.Индекс(СтрокаТаблицыОтветственныхЛиц);
			НоваяСтрока.Вес						  = СтрокаТаблицыОтветственныхЛиц.Вес;
			НоваяСтрока.ПоказательЭффективности   = СтрокаТаблицыОтветственныхЛиц.ПоказательЭффективности;
			НоваяСтрока.ПараметрПоказателя        = СтрокаТаблицыОтветственныхЛиц.ПараметрПоказателя;
			НоваяСтрока.ОтветственноеЛицо         = СтрокаОтветственныеЛица.ОтветственноеЛицо;
			НоваяСтрока.План	                  = СтрокаТаблицыОтветственныхЛиц["количество"    + НомерСоответствияТекущейКолонки];
			НоваяСтрока.ПланИтого		          = СтрокаТаблицыОтветственныхЛиц.План;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНажатие(Кнопка)
	
	Если Данные.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		Данные.Очистить();
		ТаблицаОтветственныхЛиц.Очистить();
	КонецЕсли;
	
	Если Модифицированность() Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Автоматически заполнить документ можно только после его записи. Записать?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		Иначе
			ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	Конецесли;
	
	ДокОснование = Документы.ВводПоказателейЭффективностиПоНаправлениям.ПолучитьФормуВыбора().ОткрытьМодально();
	Если ДокОснование <> Неопределено Тогда
		//*** МассивНаправления = ДокОснование.Данные.ВыгрузитьКолонку("План"+Справочники.НаправленияПродаж.ПолучитьИмяПредопределенного(НаправлениеПродаж));   до 10.2015 заполнялись суммы по направлениям
		МассивНаправления = ДокОснование.Данные.ВыгрузитьКолонку("ПланПоКомпании");
		Для каждого СтрокаДанные ИЗ ДокОснование.Данные Цикл
			НоваяСтрока = ТаблицаОтветственныхЛиц.Добавить();
			НоваяСтрока.ПоказательЭффективности = СтрокаДанные.ПоказательЭффективности;
			НоваяСтрока.ПараметрПоказателя = СтрокаДанные.ПараметрПоказателя;
			НоваяСтрока.Вес = СтрокаДанные.Вес;
			НоваяСтрока.План = МассивНаправления[СтрокаДанные.НомерСтроки-1];
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//***старые процедуры
Процедура РассчитатьНажатие(Элемент)

	//Если НЕ ЗначениеЗаполнено(ОтветственноеЛицо) Тогда
	//	Сообщить("Необходимо указать ответственное лицо.", СтатусСообщения.Важное);
	//КонецЕсли;
	//
	//Если Данные.Количество() = 0 Тогда
	//	Сообщить("Не заполнена табличная часть документа.", СтатусСообщения.Важное);
	//	Возврат;
	//КонецЕсли;
	//
	//Если Модифицированность Тогда
	//	Режим = РежимДиалогаВопрос.ДаНет;
	//	Ответ = Вопрос("Автоматически рассчитать документ можно только после его записи. Записать?", Режим, 0);
	//	Если Ответ = КодВозвратаДиалога.Нет Тогда
	//		Возврат;
	//	Иначе
	//		ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если Данные.Итог("ЗначениеФакт") > 0 Тогда
	//	Режим = РежимДиалогаВопрос.ДаНет;
	//	Ответ = Вопрос("Данные в колонке ''Значение факт'' будут обновлены. Продолжить?", Режим, 0);
	//	Если Ответ = КодВозвратаДиалога.Нет Тогда
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	//		
	//Для каждого СтрокаТЧДанные ИЗ Данные Цикл
	//	Если СтрокаТЧДанные.ПоказательЭффективности.Предопределенный Тогда
	//		Если НЕ СтрокаТЧДанные.ПоказательЭффективности.ТекстЗапроса = "" Тогда
	//			Запрос = Новый Запрос;
	//			Запрос.УстановитьПараметр("НачДата", НачалоМесяца(ПериодРегистрации));
	//			Запрос.УстановитьПараметр("КонДата", КонецМесяца(ПериодРегистрации));
	//			Запрос.УстановитьПараметр("ОтветственноеЛицо", ОтветственноеЛицо);
	//			Запрос.УстановитьПараметр("НоменклатурнаяГруппа", СтрокаТЧДанные.ПараметрПоказателя);
	//			Запрос.УстановитьПараметр("Производитель", СтрокаТЧДанные.ПараметрПоказателя);
	//			Запрос.Текст = СтрокаТЧДанные.ПоказательЭффективности.ТекстЗапроса;
	//			Результат = Запрос.Выполнить().Выбрать();
	//			Если Результат.Следующий() Тогда
	//				СтрокаТЧДанные.ЗначениеФакт = Результат.Значение;
	//				РассчитатьKPI(СтрокаТЧДанные);
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;
	
КонецПроцедуры

Процедура ДанныеЗначениеФактПриИзменении(Элемент)
	
	//СтрокаТЧДанные = ЭлементыФормы.Данные.ТекущиеДанные;
	//РассчитатьKPI(СтрокаТЧДанные);
	
КонецПроцедуры

Процедура РассчитатьKPI(СтрокаТабличнойЧасти)
	
	//ВыполнениеЗадания = СтрокаТабличнойЧасти.ЗначениеФакт / СтрокаТабличнойЧасти.ЗначениеПлан * 100;
	//Если ВыполнениеЗадания > 100 Тогда
	//	ВыполнениеЗадания = 100;
	//КонецЕсли;
	//СтрокаТабличнойЧасти.КоэффициентЭффективности = СтрокаТабличнойЧасти.Вес * ВыполнениеЗадания / 100;
	
КонецПроцедуры
//***


Процедура СписокОтветственныхЛицНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ОткрытьФормуВыбораОтветственныхЛиц();
	
КонецПроцедуры

Функция ОткрытьФормуВыбораОтветственныхЛиц()

	ФормаВыбораОтветственныхЛиц = ПолучитьФорму("ФормаВыбораОтветственныхЛиц", ЭтаФорма);

	ФормаВыбораОтветственныхЛиц.СписокОтветственныхЛиц.ЗагрузитьЗначения(ОтветственныеЛица.ВыгрузитьКолонку("ОтветственноеЛицо"));

	Возврат ФормаВыбораОтветственныхЛиц.ОткрытьМодально();

КонецФункции // ОткрытьФормуВыбораОтветственныхЛиц()

Процедура СписокОтветственныхЛицОчистка(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ОтветственныеЛица.Очистить();
	СписокОтветственныхЛиц.Очистить();

	// Обновим список 
	ЗаполнитьСписокОтветственныхЛиц();

	// обновим состав колонок
	ОбновитьСоставКолонок();
	ПолучитьСтруктуруПоложенийКолонок();
	ВидимостьКолонок();

КонецПроцедуры

Процедура ЗаполнитьСписокОтветственныхЛиц()

	СписокОтветственныхЛиц.Очистить();
	Для Каждого СтрокаОтветственныеЛица Из ОтветственныеЛица Цикл
		Если НЕ ЗначениеНеЗаполнено(СтрокаОтветственныеЛица.ОтветственноеЛицо) Тогда
			СписокОтветственныхЛиц.Добавить(СтрокаОтветственныеЛица.ОтветственноеЛицо);
		КонецЕсли;
	КонецЦИкла;

КонецПроцедуры // ЗаполнитьСписокОтветственныхЛиц()

Процедура ОбновитьСоставКолонок()

	// надо расположить все нужные колонки в правильном порядке
	// сначала должна идти колонка номенклатуры
	КолонкиТаблицыОтветственныхЛиц = ТаблицаОтветственныхЛиц.Колонки;
	ОчереднойНомерКолонки = 5;

	//ТекущаяКолонка = КолонкиТаблицыОтветственныхЛиц.Найти("ПоказательЭффективности");
	//СдвинутьКолонку(ТекущаяКолонка, ОчереднойНомерКолонки);

	Для Каждого СтрокаОтветственныеЛица Из ОтветственныеЛица Цикл

		Если ЗначениеНеЗаполнено(СтрокаОтветственныеЛица.ОтветственноеЛицо) Тогда
			Продолжить;
		КонецЕсли;

		НомерСоответствияТекущейКолонки = СоответствиеОтветственныхЛиц.Получить(СтрокаОтветственныеЛица.ОтветственноеЛицо);
		Если НомерСоответствияТекущейКолонки = Неопределено Тогда
			НомерСоответствияТекущейКолонки = СоответствиеОтветственныхЛиц.Количество();
			СоответствиеОтветственныхЛиц.Вставить(СтрокаОтветственныеЛица.ОтветственноеЛицо, СоответствиеОтветственныхЛиц.Количество());
		КонецЕсли;

		ТекущаяКолонка = КолонкиТаблицыОтветственныхЛиц.Найти("количество" + НомерСоответствияТекущейКолонки);
		Если ТекущаяКолонка = Неопределено Тогда
			// надо вставить
			ТаблицаОтветственныхЛиц.Колонки.Вставить(ОчереднойНомерКолонки, "количество" + НомерСоответствияТекущейКолонки, ПолучитьОписаниеТиповЧисла(15, 2), СокрЛП(СтрокаОтветственныеЛица.ОтветственноеЛицо), 10);
			ОчереднойНомерКолонки = ОчереднойНомерКолонки + 1;
		Иначе
			СдвинутьКолонку(ТекущаяКолонка, ОчереднойНомерКолонки);
		КонецЕсли;

	КонецЦикла;

	// все, что за пределами, надо удалить
	Для НомерУдаляемойКолонки = ОчереднойНомерКолонки По КолонкиТаблицыОтветственныхЛиц.Количество()-1 Цикл
		КолонкиТаблицыОтветственныхЛиц.Удалить(ОчереднойНомерКолонки);
	КонецЦикла;

	ЭлементыФормы.ТаблицаОтветственныхЛиц.СоздатьКолонки();

	Для Каждого СтрокаОтветственныеЛица Из ОтветственныеЛица Цикл
		й = ЭлементыФормы.ТаблицаОтветственныхЛиц.Колонки.Найти("количество"+СоответствиеОтветственныхЛиц[СтрокаОтветственныеЛица.ОтветственноеЛицо]);
		Если й <> Неопределено Тогда
			й.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
		КонецЕсли;
	КонецЦикла;
	
	// Установим недостающие параметры
	//УстановитьНедостающиеПараметры();

КонецПроцедуры // ОбновитьСоставКолонок()

Процедура УстановитьНедостающиеПараметры()

	// Добавим недостающие колонки

	ЭлементыФормы.ТаблицаОтветственныхЛиц.Колонки.НомерПП.ТолькоПросмотр = Истина;

	// Установим необходимые параметры номенклатуры
	//ЭлементыФормы.ТаблицаПроизводителей.Колонки.Контрагент.ЭлементУправления.УстановитьДействие("ПриИзменении", Новый Действие("ТаблицаПроизводителейПриИзменении"));
	ЭлементыФормы.ТаблицаОтветственныхЛиц.Колонки.ПоказательЭффективности.ЭлементУправления.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ЭлементыФормы.ТаблицаОтветственныхЛиц.Колонки.ПоказательЭффективности.АвтоОтметкаНезаполненного = Истина;

КонецПроцедуры // УстановитьНедостающиеПараметры()

Процедура ПолучитьСтруктуруПоложенийКолонок()

	ИмяСохраненныхЗначений = Метаданные().Имя
							 + "_" + ПоказыватьКоличество;
							 

	мСтруктураПоложенийКолонок = Новый Структура();
	мСтруктураПоложенийКолонок.Вставить("Количество",ПолучитьПоложениеКолонки(ИмяСохраненныхЗначений+"_0"));

КонецПроцедуры // ПолучитьСтруктуруПоложенийКолонок()

Процедура ВидимостьКолонок()

	БылаНоваяКолонка = Ложь;
	Для Каждого КолонкаОтветственныеЛица Из ЭлементыФормы.ТаблицаОтветственныхЛиц.Колонки Цикл
		ПризнакКолонки = Лев(КолонкаОтветственныеЛица.Имя, 4);
		Если ПризнакКолонки = "коли" Тогда
			КолонкаОтветственныеЛица.Видимость = ПоказыватьКоличество;
			КолонкаОтветственныеЛица.Положение = мСтруктураПоложенийКолонок.Количество;
			БылаНоваяКолонка = Истина;
		КонецЕсли	
	КонецЦикла;
	
	ЭлементыФормы.ТаблицаОтветственныхЛиц.Колонки.ПараметрПоказателя.Положение = ПоложениеКолонки.НаСледующейСтроке;

КонецПроцедуры // ВидимостьКолонок()

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	СписокДобавленныхОтветственныхЛиц = Новый СписокЗначений;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Если ЗначениеВыбора.Команда = "ИзменениеОтветственныхЛиц" Тогда

			ОтветственныеЛица.Очистить();
			Для Каждого ЭлементСпискаОтветственныхЛиц Из ЗначениеВыбора.СписокОтветственныхЛиц Цикл
				СтрокаОтветственныхЛиц = ОтветственныеЛица.Добавить();
				СтрокаОтветственныхЛиц.ОтветственноеЛицо = ЭлементСпискаОтветственныхЛиц.Значение;
				Если СписокОтветственныхЛиц.НайтиПоЗначению(СтрокаОтветственныхЛиц.ОтветственноеЛицо) = Неопределено Тогда
					СписокДобавленныхОтветственныхЛиц.Добавить(СтрокаОтветственныхЛиц.ОтветственноеЛицо);
				КонецЕсли;
			КонецЦикла;

			ЗаполнитьСписокОтветственныхЛиц();

		ИначеЕсли ЗначениеВыбора.Команда = "НастройкаПараметров" Тогда

			ДеревоКолонок = ЗначениеВыбора.ДеревоКолонок;
			Для Каждого СтрокаДерева Из ДеревоКолонок.Строки Цикл
				ЭтаФорма[СтрокаДерева.КолонкаИмя] = СтрокаДерева.Пометка;
			КонецЦикла;

		ИначеЕсли ЗначениеВыбора.Команда = "ЗаполнениеТабличнойЧасти"
		      ИЛИ ЗначениеВыбора.Команда = "ПодборВТабличнуюЧасть" Тогда

			//ОбработкаПодбора("Товары",ЗначениеВыбора);

		КонецЕсли;
	КонецЕсли;

	// обновим состав колонок
	ОбновитьСоставКолонок();
	ПолучитьСтруктуруПоложенийКолонок();
	ВидимостьКолонок();
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуОтветственныхЛицФормы()

	Если ОтветственныеЛица.Количество() = 0 Тогда

		// Документ пуст
		Возврат;

	КонецЕсли;

	ТаблицаПоказателейЭффективности = Данные.Выгрузить();
	ТаблицаПоказателейЭффективности.Сортировать("ПоказательЭффективности, ПараметрПоказателя, ОтветственноеЛицо");

	// Заполним все требуемые реквизиты

	КолонкиТаблицыОтветственныхЛиц = ТаблицаОтветственныхЛиц.Колонки;

	ТекущийИндексСтрокиТаблицыОтветственныхЛиц = Неопределено;
	НоваяСтрока = Неопределено;
	Для Каждого СтрокаТаблицыПоказателейЭффективности Из ТаблицаПоказателейЭффективности Цикл

		Если ТекущийИндексСтрокиТаблицыОтветственныхЛиц <> СтрокаТаблицыПоказателейЭффективности.ИндексСтрокиТаблицыОтветственныхЛиц
		 Или НоваяСтрока.ПоказательЭффективности <> СтрокаТаблицыПоказателейЭффективности.ПоказательЭффективности  Тогда
			НоваяСтрока = ТаблицаОтветственныхЛиц.Добавить();
			НоваяСтрока.ПоказательЭффективности               = СтрокаТаблицыПоказателейЭффективности.ПоказательЭффективности;
			НоваяСтрока.ПараметрПоказателя					  = СтрокаТаблицыПоказателейЭффективности.ПараметрПоказателя;
			НоваяСтрока.Вес									  = СтрокаТаблицыПоказателейЭффективности.Вес;
			НоваяСтрока.План								  = СтрокаТаблицыПоказателейЭффективности.ПланИтого;
			ТекущийИндексСтрокиТаблицыОтветственныхЛиц = СтрокаТаблицыПоказателейЭффективности.ИндексСтрокиТаблицыОтветственныхЛиц;
		КонецЕсли;

		НомерСоответствияТекущейКолонки = СоответствиеОтветственныхЛиц.Получить(СтрокаТаблицыПоказателейЭффективности.ОтветственноеЛицо);

		НоваяСтрока["количество"+НомерСоответствияТекущейКолонки]    = СтрокаТаблицыПоказателейЭффективности.План;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТаблицуПроизводителейФормы()

Процедура СдвинутьКолонку(Колонка, ОчереднойНомерКолонки)

	КолонкиОтветственныеЛица = ТаблицаОтветственныхЛиц.Колонки;

	ТекущийНомерКолонки = КолонкиОтветственныеЛица.Индекс(Колонка);
	Если ТекущийНомерКолонки <> ОчереднойНомерКолонки Тогда
		// сдвинем колонку
		КолонкиОтветственныеЛица.Сдвинуть(ТекущийНомерКолонки, ОчереднойНомерКолонки - ТекущийНомерКолонки);
	КонецЕсли;

	ВсегоКолонок          = КолонкиОтветственныеЛица.Количество();
	ОчереднойНомерКолонки = ОчереднойНомерКолонки + 1;
	ОчереднойНомерКолонки = ?(ОчереднойНомерКолонки > ВсегоКолонок, ВсегоКолонок, ОчереднойНомерКолонки);

КонецПроцедуры // СдвинутьКолонку()

Функция ПолучитьПоложениеКолонки(ИмяСохраненногоЗначения)

	ПоложениеКолонкиСтрока = ВосстановитьЗначение(ИмяСохраненногоЗначения);

	Если ПоложениеКолонкиСтрока = "На следующей строке" Тогда
		Возврат ПоложениеКолонки.НаСледующейСтроке;
	ИначеЕсли ПоложениеКолонкиСтрока = "В той же колонке" Тогда
		Возврат ПоложениеКолонки.ВТойЖеКолонке;
	ИначеЕсли ПоложениеКолонкиСтрока = "Новая колонка" Тогда
		Возврат ПоложениеКолонки.НоваяКолонка;
	Иначе

		// Значение еще не было сохранено
		// Надо взять настройку по умолчанию и сохранить ее для последующей работы
		Если Прав(ИмяСохраненногоЗначения, 1) = "0" Тогда
			// Цена на новой колонке
			ПоложениеКолонкиСтрока = "Новая колонка";
		ИначеЕсли Прав(ИмяСохраненногоЗначения, 1) = "1" Тогда
			// Валюта на следующей строке
			ПоложениеКолонкиСтрока = "На следующей строке";
		Иначе
			// Основная единица измерения и процент скидки/наценки в той же колонке
			ПоложениеКолонкиСтрока = "В той же колонке";
		КонецЕсли;
		СохранитьЗначение(ИмяСохраненногоЗначения, ПоложениеКолонкиСтрока);

		Возврат ПолучитьПоложениеКолонки(ИмяСохраненногоЗначения);
	КонецЕсли;

КонецФункции // ПолучитьПоложениеКолонки()


Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ПоказыватьКоличество           = истина;

	ПоказыватьКоличество           = ?(ПоказыватьКоличество = Неопределено, Истина, ПоказыватьКоличество);
	СоответствиеОтветственныхЛиц = Новый Соответствие;

	Для Каждого СтрокаОтветственныеЛица Из ОтветственныеЛица Цикл
		НомерСоответствияТекущейКолонки = ОтветственныеЛица.Индекс(СтрокаОтветственныеЛица);
		СоответствиеОтветственныхЛиц.Вставить(СтрокаОтветственныеЛица.ОтветственноеЛицо, НомерСоответствияТекущейКолонки);

		Если ТаблицаОтветственныхЛиц.Колонки.Найти("количество"+НомерСоответствияТекущейКолонки) = Неопределено Тогда
			ТаблицаОтветственныхЛиц.Колонки.Добавить("количество"+НомерСоответствияТекущейКолонки, ПолучитьОписаниеТиповЧисла(15, 2), СокрЛП(СтрокаОтветственныеЛица.ОтветственноеЛицо), 10);
		КонецЕсли;
	КонецЦикла;
	
	Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") 
		И НЕ ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "СтаршийМенеджерПодразделения") Тогда
		СообщитьОбОшибке("Вы не имеете права открывать ввод показателей эффективности!", Отказ);
 	КонецЕсли;
	
КонецПроцедуры


Процедура ТаблицаОтветственныхЛицПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	// Поставим автоотметку незаполненного.
	Для каждого СтрокаОтветственныеЛица Из ОтветственныеЛица Цикл
		
		НомерСоответствияТекущейКолонки = СоответствиеОтветственныхЛиц.Получить(СтрокаОтветственныеЛица.ОтветственноеЛицо);
	
	КонецЦикла;
	
	ОформлениеСтроки.Ячейки.ПоказательЭффективности.ТолькоПросмотр = Истина;
	ОформлениеСтроки.Ячейки.ПараметрПоказателя.ТолькоПросмотр = Истина;
	ОформлениеСтроки.Ячейки.Вес.ТолькоПросмотр = Истина;
	
КонецПроцедуры


Процедура ТаблицаОтветственныхЛицПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ВсегоКолонок = Элемент.Значение.Колонки.Количество()-5;
	ПланИтого = 0;
	Для Ном = 0 ПО ВсегоКолонок-1 Цикл
		ПланИтого = ПланИтого + Элемент.ТекущиеДанные["количество" + Ном];
	КонецЦикла;
	Элемент.ТекущиеДанные.План = ПланИтого;
	
КонецПроцедуры

