
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура при необходимости сортирует дерево значений
//
Процедура ОтсортироватьДерево()

	//Если ФлажокПеремещения Тогда
	//	ДеревоПроизводители.Строки.Сортировать("Пометка УБЫВ");
	//КонецЕсли;

КонецПроцедуры // ОтсортироватьДерево()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "ОК" формы
//
Процедура ОсновныеДействияФормыОК(Кнопка)

	СписокОтветственныхЛиц.Очистить();

	Для Каждого СтрокаДерева Из ДеревоОтветственныеЛица.Строки Цикл
		Если СтрокаДерева.Пометка Тогда
			СписокОтветственныхЛиц.Добавить(СтрокаДерева.ОтветственноеЛицоСсылка);
		КонецЕсли;
	КонецЦикла;

	СтруктураВозвращаемыхЗначений = Новый Структура();
	СтруктураВозвращаемыхЗначений.Вставить("СписокОтветственныхЛиц", СписокОтветственныхЛиц);
	СтруктураВозвращаемыхЗначений.Вставить("Команда",        "ИзменениеОтветственныхЛиц");
	ОповеститьОВыборе(СтруктураВозвращаемыхЗначений);

КонецПроцедуры // ОсновныеДействияФормыОК()

// Процедура вызывается при нажатии кнопки "Установить все пометки" формы
//
Процедура ПанельТиповЦенСкидокКнопкаВыборатьВсе(Кнопка)

	Для Каждого СтрокаДерева Из ДеревоОтветственныеЛица.Строки Цикл
		СтрокаДерева.Пометка = Истина;
	КонецЦикла;

КонецПроцедуры // ПанельТиповЦенСкидокКнопкаВыборатьВсе()

// Процедура вызывается при нажатии кнопка "Снять все пометки" формы
//
Процедура ПанельТиповЦенСкидокКнопкаСнятьВсе(Кнопка)

	Для Каждого СтрокаДерева Из ДеревоОтветственныеЛица.Строки Цикл
		СтрокаДерева.Пометка = Ложь;
	КонецЦикла;

КонецПроцедуры // ПанельТиповЦенСкидокКнопкаСнятьВсе()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	ДеревоОтветственныеЛица.Колонки.Добавить("ОтветственноеЛицоСсылка", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ДеревоОтветственныеЛица.Строки.ЗагрузитьКолонку(СписокОтветственныхЛиц.ВыгрузитьЗначения() ,"ОтветственноеЛицоСсылка");

	// Заполнить пометки и строковое представление
	Для Каждого ОтветственноеЛицо Из СписокОтветственныхЛиц Цикл
		НоваяСтрокаДерева = ДеревоОтветственныеЛица.Строки.Добавить();
		НоваяСтрокаДерева.Пометка            = Истина;
		НоваяСтрокаДерева.ОтветственноеЛицоСсылка = ОтветственноеЛицо.Значение;
		НоваяСтрокаДерева.ОтветственноеЛицоСтрока = СокрЛП(ОтветственноеЛицо.Значение);
	КонецЦикла;

	Отбор = Новый Структура("НаправлениеПродаж");
	Отбор.НаправлениеПродаж = ЭтаФорма.ВладелецФормы.НаправлениеПродаж;
	Выборка = Справочники["Пользователи"].Выбрать(,,Отбор);
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.ПометкаУдаления Тогда
			Если ДеревоОтветственныеЛица.Строки.Найти(Выборка.Ссылка) = Неопределено Тогда
				НоваяСтрокаДерева = ДеревоОтветственныеЛица.Строки.Добавить();
				НоваяСтрокаДерева.ОтветственноеЛицоСсылка = Выборка.Ссылка;
				НоваяСтрокаДерева.ОтветственноеЛицоСтрока = СокрЛП(Выборка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПриОткрытии()

// Обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	//СохранитьЗначение("ФормированиеЦен_ФормаВыбораТипаЦен_ФлажокПеремещения", ФлажокПеремещения);

КонецПроцедуры // ПриЗакрытии()

// Обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	//ОтсортироватьДерево()

КонецПроцедуры

// Обработчик нажатия кнопки "Добавить новый тип цен" .
//
Процедура ПанельТиповЦенСкидокКнопкаДобавить(Кнопка)

КонецПроцедуры // ПанельТиповЦенСкидокКнопкаДобавить()







