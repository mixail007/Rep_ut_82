Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мФормаПодбораЗаказыПокупателей; // Хранит текущую форму подбора заказов покупателей
Перем мКолонкиПотребности;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ЗаполнитьТабличнуюЧастьЗаказыПокупателей()
	
	Если ЗаказыПокупателей.Количество() > 0 Тогда
		
		Ответ = Вопрос("Табличная часть ""Заказы покупателей"" уже содержат строки."
					  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
					   РежимДиалогаВопрос.ДаНет);
					   
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
		
			Отказ = Истина;
			Возврат;
		
		КонецЕсли;
			
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя КАК Заказ,
	|	ВЫБОР КОГДА ЗаказыПокупателейОстатки.ЗаказПокупателя.ДатаОтгрузки = &ПустаяДата ТОГДА
	|		ЗаказыПокупателейОстатки.ЗаказПокупателя.ДатаОтгрузки
	|	ИНАЧЕ
	|		НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ЗаказыПокупателейОстатки.ЗаказПокупателя.ДатаОтгрузки, ДЕНЬ, -1), ДЕНЬ)
	|	КОНЕЦ КАК ДатаПотребности
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(КОНЕЦПЕРИОДА(&ДатаДокумента, ДЕНЬ), ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя И Номенклатура.Услуга = Ложь) КАК ЗаказыПокупателейОстатки");
	
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
	РезультатЗапроса = Запрос.Выполнить();
	
	ЗаказыПокупателей.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьЗаказыПокупателей()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	ВидимостьРеквизитаПроект(ЭтотОбъект, ЭлементыФормы, "ПланыПродаж.Проект,ПланыЗакупок.Проект,Потребности.Проект");

КонецПроцедуры // УстановитьВидимость()

Процедура УстановитьВозможностьИзмененияВидимости()
	
	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура("Заказ, ДатаПотребности");
	УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ЗаказыПокупателей.Колонки, СтруктураКолонок);
	
	СтруктураКолонок = Новый Структура("Сценарий, ДатаНач, ДатаКон");
	УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ПланыПродаж.Колонки, СтруктураКолонок);
	УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ПланыЗакупок.Колонки, СтруктураКолонок);
	
	СтруктураКолонок = Новый Структура("ДатаПотребности, Номенклатура, Количество, ЕдиницаИзмерения, ТоварТара");
	УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиПотребности, СтруктураКолонок);

КонецПроцедуры // УстановитьВозможностьИзмененияВидимости()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь);
		УстановитьНомерДокумента(ЭтотОбъект);
		
	КонецЕсли;

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	// Установить видимость колонок "ХарактеристикаНоменклатуры"
	УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиПотребности);
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВозможностьИзмененияВидимости();
	УстановитьВидимость();

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()
	
	// Подсчитаем количество строк в табличных частях.
	Для каждого СтраницаПанели из ЭлементыФормы.Панель.Страницы Цикл

		Если      СтраницаПанели.Имя = "ПланыПродаж" Тогда
			СтраницаПанели.Заголовок = "Планы продаж (" + ДокументОбъект.ПланыПродаж.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "ПланыПроизводства" Тогда
			СтраницаПанели.Заголовок = "Планы производства (" + ДокументОбъект.ПланыПроизводства.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "ПланыЗакупок" Тогда
			СтраницаПанели.Заголовок = "Планы закупок (" + ДокументОбъект.ПланыЗакупок.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "ЗаказыПокупателей" Тогда
			СтраницаПанели.Заголовок = "Заказы покупателей (" + ДокументОбъект.ЗаказыПокупателей.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "ПланыПосменные" Тогда
			СтраницаПанели.Заголовок = "Планы посменные (" + ДокументОбъект.ПланыПосменные.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "Потребности" Тогда
			СтраницаПанели.Заголовок = "Потребности (" + ДокументОбъект.Потребности.Количество() + " поз.)";
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

Процедура ДействиеПодбор(ТабличнаяЧасть)

	Если ТабличнаяЧасть = ЗаказыПокупателей Тогда

		мФормаПодбораЗаказыПокупателей = Документы.ЗаказПокупателя.ПолучитьФормуВыбора(, ЭтаФорма);
		мФормаПодбораЗаказыПокупателей.ЗакрыватьПриВыборе = Ложь;
		мФормаПодбораЗаказыПокупателей.Открыть();

	ИначеЕсли ТабличнаяЧасть = Потребности Тогда

		СписокВидовПодбора = Новый СписокЗначений();
		СписокВидовПодбора.Добавить(, "По справочнику");

		ПредставлениеДок = Метаданные().Представление();

		СтруктураПараметровПодбора = Новый Структура();
		СтруктураПараметровПодбора.Вставить("Команда", "ПодборВТабличнуюЧастьПотребности");
		СтруктураПараметровПодбора.Вставить("СписокВидовПодбора", СписокВидовПодбора);

		// Параметры запросов.
		СтруктураПараметровПодбора.Вставить("ДатаРасчетов", ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата));
		СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + ПредставлениеДок + " № " + Номер);

		// Открываем форму подбора.
		ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);

	КонецЕсли;

КонецПроцедуры // ДействиеПодбор()

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Перем Команда;
	
	Если Источник = мФормаПодбораЗаказыПокупателей Тогда
		
		Если НЕ ЗначениеНеЗаполнено(ЗначениеВыбора) Тогда
			
			НоваяСтрока = ЗаказыПокупателей.Добавить();
			НоваяСтрока.Заказ = ЗначениеВыбора;
			
			Если ЗначениеНеЗаполнено(ЗначениеВыбора.ДатаОтгрузки) Тогда
				
				НоваяСтрока.ДатаПотребности = Дата;
				
			Иначе
				
				НоваяСтрока.ДатаПотребности = ЗначениеВыбора.ДатаОтгрузки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
			
			ЗначениеВыбора.Свойство("Команда", Команда);

			Если Команда = "ПодборВТабличнуюЧастьПотребности" Тогда
				
				ОбработкаПодбораНоменклатура(Потребности, ЗначениеВыбора);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

Процедура ОбработкаПодбораНоменклатура(ТабличнаяЧасть, ЗначениеВыбора)

	Перем Номенклатура, Характеристика, ЕдиницаИзмерения, Количество;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура", Номенклатура);
	ЗначениеВыбора.Свойство("Характеристика", Характеристика);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество", Количество);
	
	СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
	СтрокаТабличнойЧасти.ДатаПотребности = Дата;
	СтрокаТабличнойЧасти.Номенклатура = Номенклатура;
	СтрокаТабличнойЧасти.Количество = Количество;
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
	СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
	СтрокаТабличнойЧасти.ТоварТара = Перечисления.ТоварТара.Товар;

	Попытка
		
		ЭлементыФормы.Потребности.ТекущаяКолонка = мКолонкиПотребности["Количество"];
		
	Исключение
		
	КонецПопытки;

КонецПроцедуры // ОбработкаПодбораНоменклатура()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура КоманднаяПанельЗаказыПокупателейПодбор(Кнопка)
	
	ДействиеПодбор(ЗаказыПокупателей);
	
КонецПроцедуры // КоманднаяПанельЗаказыПокупателейПодбор()

Процедура КоманднаяПанельПотребностиПодбор(Кнопка)
	
	ДействиеПодбор(Потребности);
	
КонецПроцедуры // КоманднаяПанельПотребностиПодбор()

Процедура КоманднаяПанельПотребностиЗаполнитьПотребности(Кнопка)
	
	Результат = ВыполнитьВыборкуДанных();
	
	Если ТипЗнч(Результат) = Тип("ТаблицаЗначений") Тогда
		Потребности.Загрузить(Результат);
		
		Для каждого Строка из Потребности Цикл
	
			// Заполняем реквизиты табличной части.
			Строка.ЕдиницаИзмерения = Строка.Номенклатура.ЕдиницаХраненияОстатков;
			Строка.Коэффициент      = Строка.ЕдиницаИзмерения.Коэффициент;
		
		КонецЦикла;

	Иначе
		Потребности.Очистить();
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	Если ЭтоНовый() Тогда
		Вопрос = "Перед началом работы со свойствами необходимо записать документ. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);

		Если Ответ = КодВозвратаДиалога.ОК Тогда
			ЗаписатьВФорме();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Форма = Обработки.ЗначенияСвойствОбъекта.ПолучитьФорму("ЗначенияСвойствОбъекта", ЭтаФорма, Ссылка);

	Форма.НазначениеСвойств      = Новый СписокЗначений;
	Форма.ОбъектОтбораЗначений   = Ссылка;
	Форма.ОбъектОтбораНазначений = Ссылка;

	Форма.НазначениеСвойств.Добавить(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты);
	Форма.НазначениеСвойств.Добавить(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы);

	Форма.ПрочитатьЗаполнитьСвойстваИЗначения();
	Форма.Открыть();

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	Если ЭтоНовый() Тогда
		Вопрос = "Перед началом работы с категориями необходимо записать документ. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);

		Если Ответ = КодВозвратаДиалога.ОК Тогда
			ЗаписатьВФорме();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Форма = Обработки.КатегорииОбъекта.ПолучитьФорму("КатегорииОбъекта", ЭтаФорма, Ссылка);

	Форма.НазначениеКатегорий   = Новый СписокЗначений;
	Форма.ОбъектОтбораКатегорий = Ссылка;

	Форма.НазначениеКатегорий.Добавить(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты);
	Форма.НазначениеКатегорий.Добавить(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы);

	Форма.ПрочитатьЗаполнитьКатегорииОбъекта();
	Форма.Открыть();

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ЗАКАЗЫПОКУПАТЕЛЕЙ

// Процедура - обработчик события "ПриИзменении" поля ввода заказа
// в строке табличной части "ЗаказыПокупателей".
//
Процедура ЗаказыПокупателейЗаказПриИзменении(Элемент)
	
	Если ЗначениеНеЗаполнено(Элемент.Значение.ДатаОтгрузки) Тогда
		ЭлементыФормы.ЗаказыПокупателей.ТекущиеДанные.ДатаПотребности = Дата;
	Иначе
		ЭлементыФормы.ЗаказыПокупателей.ТекущиеДанные.ДатаПотребности = Элемент.Значение.ДатаОтгрузки;
	КонецЕсли;
	
КонецПроцедуры // ЗаказыПокупателейЗаказПриИзменении()

Процедура КоманднаяПанельЗаказыПокупателейЗаполнитьЗаказамиПокупателей(Кнопка)
	
	ЗаполнитьТабличнуюЧастьЗаказыПокупателей();
	
КонецПроцедуры // КоманднаяПанельЗаказыПокупателейЗаполнитьЗаказамиПокупателей()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ПОТРЕБНОСТИ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Потребности".
//
Процедура ПотребностиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ПоказатьКодАртикул(мКолонкиПотребности, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры // ПотребностиПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Потребности".
//
Процедура ПотребностиНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Потребности.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

КонецПроцедуры // ПотребностиНоменклатураПриИзменении()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

Процедура ПотребностиПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		
		Элемент.ТекущиеДанные.ДатаПотребности = ?(ЗначениеНеЗаполнено(Элемент.ТекущиеДанные.ДатаПотребности), Дата, Элемент.ТекущиеДанные.ДатаПотребности);
		Элемент.ТекущиеДанные.ТоварТара = ?(ЗначениеНеЗаполнено(Элемент.ТекущиеДанные.ТоварТара), Перечисления.ТоварТара.Товар, Элемент.ТекущиеДанные.ТоварТара);
		
	КонецЕсли;
	
КонецПроцедуры // ПотребностиПриНачалеРедактирования()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Потребности".
//
Процедура ПотребностиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Потребности");
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Потребности".
//
Процедура ПотребностиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПеретаскивание()


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиПотребности = ЭлементыФормы.Потребности.Колонки;