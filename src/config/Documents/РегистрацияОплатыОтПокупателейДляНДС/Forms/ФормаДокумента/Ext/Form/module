Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ 

Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь, , "Продажа");
		УстановитьНомерДокумента(ЭтотОбъект);
	
		УстановитьВремя(РежимАвтоВремя.Последним);
		
		НачалоПериода = НачалоМесяца(Дата); 
		КонецПериода =  КонецМесяца(Дата);
		
	КонецЕсли;

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ПослеЗаписи()
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ЗначениеНеЗаполнено(Организация) Тогда
		Предупреждение("Не указана организация. Операция не записана.");
		Отказ = Истина;
		ТекущийЭлемент = ЭлементыФормы.Организация;
		Возврат;
	КонецЕсли; 

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьНомерДокумента(ЭтотОбъект);

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура СтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ЭлементыФормы.Состав.ТекущиеДанные.НДС = РассчитатьСуммуНДС(ЭлементыФормы.Состав.ТекущиеДанные.СуммаБезНДС, TRUE, FALSE, ПолучитьСтавкуНДС(ЭлементыФормы.Состав.ТекущиеДанные.СтавкаНДС));

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СуммаБезНДС
// в строке табличной части "Товары".
//
Процедура СуммаБезНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ЭлементыФормы.Состав.ТекущиеДанные.НДС = РассчитатьСуммуНДС(ЭлементыФормы.Состав.ТекущиеДанные.СуммаБезНДС, TRUE, FALSE, ПолучитьСтавкуНДС(ЭлементыФормы.Состав.ТекущиеДанные.СтавкаНДС));

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается из тела процедуры "КоманднаяПанельЗаполнить".
// Цель работы - сформировать таблицу, содержащую операции оплаты или
// отгрузки в текущем периоде.
//
Процедура СформироватьТаблицуОперацийДвиженийДолговЗаПериод(ТаблицаОпераций, НачалоПериода, КонецПериода, Режим = "Оплаты")
	
	// Анализ взаиморасчетов прошедших до начала текущего периода
	Запрос = Новый Запрос;
	
	Если Режим = "Оплаты" Тогда
		Запрос.Текст = "ВЫБРАТЬ
						|	ВзаиморасчетыСПокупателямиДляНДСОбороты.Организация,
						|	ВзаиморасчетыСПокупателямиДляНДСОбороты.ДоговорКонтрагента.Владелец КАК Контрагент,
						|	ВзаиморасчетыСПокупателямиДляНДСОбороты.ДоговорКонтрагента КАК Договор,
						|	ВзаиморасчетыСПокупателямиДляНДСОбороты.Сделка,
						|	ВзаиморасчетыСПокупателямиДляНДСОбороты.Период 		КАК ДатаОплаты,
						|	ВзаиморасчетыСПокупателямиДляНДСОбороты.Период 		КАК ДатаДокумента,
						|	ВзаиморасчетыСПокупателямиДляНДСОбороты.Регистратор КАК Документ,
						|	ВзаиморасчетыСПокупателямиДляНДСОбороты.СуммаРасход КАК СуммаДокумента
						|ИЗ
						|	РегистрНакопления.ВзаиморасчетыСПокупателямиДляНДС.Обороты(&НачалоПериода, &КонецПериода, Регистратор, Организация = &Организация) КАК ВзаиморасчетыСПокупателямиДляНДСОбороты";
						
	ИначеЕсли  Режим = "Отгрузки" Тогда
		Запрос.Текст = "ВЫБРАТЬ
						|	ВзаиморасчетыСПокупателямиДляНДСОбороты.Организация,
						|	ВзаиморасчетыСПокупателямиДляНДСОбороты.ДоговорКонтрагента.Владелец КАК Контрагент,
						|	ВзаиморасчетыСПокупателямиДляНДСОбороты.ДоговорКонтрагента КАК Договор,
						|	ВзаиморасчетыСПокупателямиДляНДСОбороты.Сделка,
						|	ВзаиморасчетыСПокупателямиДляНДСОбороты.Период 		КАК ДатаДокумента,
						|	ВзаиморасчетыСПокупателямиДляНДСОбороты.Регистратор КАК Документ,
						|	ВзаиморасчетыСПокупателямиДляНДСОбороты.СуммаПриход КАК СуммаДокумента
						|ИЗ
						|	РегистрНакопления.ВзаиморасчетыСПокупателямиДляНДС.Обороты(&НачалоПериода, &КонецПериода, Регистратор, Организация = &Организация) КАК ВзаиморасчетыСПокупателямиДляНДСОбороты";
						
	Иначе 
		Возврат;				
						
	КонецЕсли;

	Запрос.УстановитьПараметр("Организация",   	Организация);
	Запрос.УстановитьПараметр("НачалоПериода", 	НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", 	КонецДня(КонецПериода));
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	// сохраняем результаты запроса в "ТаблицаОпераций"
	Для Каждого СтрРез Из ТаблицаРезультата Цикл
		СтрокаОперации = ТаблицаОпераций.Добавить();
		
		Если ТипЗнч(СтрРез.Документ) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			// игнорируем операции уменьшения дебиторской задолженности покупателей в связи с возвратом от них товаров
			// такие операции - оплатами не считаются
			Продолжить;
		КонецЕсли;
		
		СкопироватьСтрокуВДругуюТаблицу(СтрРез, ТаблицаРезультата, СтрокаОперации, ТаблицаОпераций);
		
	КонецЦикла;

КонецПроцедуры // СформироватьТаблицуОперацийДвиженийДолговЗаПериод()

// Процедура вызывается из тела процедуры "КоманднаяПанельЗаполнить".
// Цель работы - сформировать таблицу, содержащую остатки незачтенных задолженностей 
// на начало текущего периода в разрезе документов.
//
Процедура СформироватьТаблицуНезачтеннойЗадолженностиНаНачалоПериода(ТаблицаОстатков, НачалоПериода, Режим = "АвансыПокупателей")
	
	// Анализ взаиморасчетов прошедших до начала текущего периода
	Запрос = Новый Запрос;
	
	Если Режим = "АвансыПокупателей" Тогда
		Запрос.Текст = "ВЫБРАТЬ
						|	ВзаиморасчетыСПокупателямиДляНДСОстатки.Организация,
						|	ВзаиморасчетыСПокупателямиДляНДСОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
						|	ВзаиморасчетыСПокупателямиДляНДСОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
						|	ВзаиморасчетыСПокупателямиДляНДСОстатки.Сделка КАК Сделка,
						|	ВзаиморасчетыСПокупателямиДляНДСОбороты.Регистратор  КАК Регистратор,
						|	ВзаиморасчетыСПокупателямиДляНДСОстатки.СуммаОстаток КАК СуммаОстаток,
						|	ВзаиморасчетыСПокупателямиДляНДСОбороты.СуммаРасход  КАК СуммаДокумента,
						|	ВзаиморасчетыСПокупателямиДляНДСОбороты.Период 		 КАК ДатаДокумента
						
						|ИЗ
						|	РегистрНакопления.ВзаиморасчетыСПокупателямиДляНДС.Остатки(&НачалоПериода, Организация = &Организация) КАК ВзаиморасчетыСПокупателямиДляНДСОстатки
						|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСПокупателямиДляНДС.Обороты(, &НачалоПериода, Регистратор, Организация = &Организация) КАК ВзаиморасчетыСПокупателямиДляНДСОбороты
						|		ПО ВзаиморасчетыСПокупателямиДляНДСОстатки.ДоговорКонтрагента = ВзаиморасчетыСПокупателямиДляНДСОбороты.ДоговорКонтрагента И ВзаиморасчетыСПокупателямиДляНДСОстатки.Сделка = ВзаиморасчетыСПокупателямиДляНДСОбороты.Сделка

						|ГДЕ
						|	ВзаиморасчетыСПокупателямиДляНДСОстатки.СуммаОстаток < &Ноль

						|УПОРЯДОЧИТЬ ПО
						|	Регистратор УБЫВ

						|ИТОГИ СРЕДНЕЕ(СуммаОстаток) ПО
						|	ДоговорКонтрагента,
						|	Сделка";
						
	ИначеЕсли Режим = "Отгрузки" Тогда
		Запрос.Текст = "ВЫБРАТЬ
						|	ВзаиморасчетыСПокупателямиДляНДСОстатки.Организация,
						|	ВзаиморасчетыСПокупателямиДляНДСОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
						|	ВзаиморасчетыСПокупателямиДляНДСОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
						|	ВзаиморасчетыСПокупателямиДляНДСОстатки.Сделка КАК Сделка,
						|	ВзаиморасчетыСПокупателямиДляНДСОбороты.Регистратор  КАК Регистратор,
						|	ВзаиморасчетыСПокупателямиДляНДСОстатки.СуммаОстаток КАК СуммаОстаток,
						|	ВзаиморасчетыСПокупателямиДляНДСОбороты.СуммаПриход  КАК СуммаДокумента,
						|	ВзаиморасчетыСПокупателямиДляНДСОбороты.Период 		 КАК ДатаДокумента
						
						|ИЗ
						|	РегистрНакопления.ВзаиморасчетыСПокупателямиДляНДС.Остатки(&НачалоПериода, Организация = &Организация) КАК ВзаиморасчетыСПокупателямиДляНДСОстатки
						|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСПокупателямиДляНДС.Обороты(, &НачалоПериода, Регистратор, Организация = &Организация) КАК ВзаиморасчетыСПокупателямиДляНДСОбороты
						|		ПО ВзаиморасчетыСПокупателямиДляНДСОстатки.ДоговорКонтрагента = ВзаиморасчетыСПокупателямиДляНДСОбороты.ДоговорКонтрагента И ВзаиморасчетыСПокупателямиДляНДСОстатки.Сделка = ВзаиморасчетыСПокупателямиДляНДСОбороты.Сделка

						|ГДЕ
						|	ВзаиморасчетыСПокупателямиДляНДСОстатки.СуммаОстаток > &Ноль
						
						|УПОРЯДОЧИТЬ ПО
						|	Регистратор УБЫВ

						|ИТОГИ СРЕДНЕЕ(СуммаОстаток) ПО
						|	ДоговорКонтрагента,
						|	Сделка";
						
	Иначе
		Возврат;				
						
	КонецЕсли;

	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("Ноль", 0);

	Результат = Запрос.Выполнить();
	
	ВыборкаПоДоговорам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаПоДоговорам.Следующий() Цикл
		
		ВыборкаПоСделкам = ВыборкаПоДоговорам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока ВыборкаПоСделкам.Следующий() Цикл

			Остаток = ?(ВыборкаПоСделкам.СуммаОстаток < 0, - ВыборкаПоСделкам.СуммаОстаток, ВыборкаПоСделкам.СуммаОстаток);
			
			Выборка = ВыборкаПоСделкам.Выбрать();
			Пока (Выборка.Следующий())
			   и (Остаток > 0) Цикл
			   
				ТекСумма = Мин(Выборка.СуммаДокумента, Остаток);
				
				Если ТекСумма > 0 Тогда
					СтрДокумента = ТаблицаОстатков.Добавить();
					СтрДокумента.Организация = Выборка.Организация;
					СтрДокумента.Контрагент  = Выборка.Контрагент;
					СтрДокумента.Договор = 	   ВыборкаПоДоговорам.ДоговорКонтрагента;
					СтрДокумента.Сделка = 	   ВыборкаПоСделкам.Сделка;
					
					СтрДокумента.Документ =    	  Выборка.Регистратор;
					СтрДокумента.ДатаДокумента =  Выборка.ДатаДокумента;
					СтрДокумента.СуммаДокумента = ТекСумма;
					
					Если Режим = "АвансыПокупателей" Тогда
						СтрДокумента.ДатаОплаты = Выборка.ДатаДокумента;
					КонецЕсли;
					
					Остаток = Остаток - ТекСумма;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры // СформироватьТаблицуНезачтеннойЗадолженностиНаНачалоПериода()
	
// Функция вызывается из процедуры "КоманднаяПанельЗаполнить".
// Цель работы процедуры - сформировать таблицу по регистру "НДСПокупки", содержащую
// остатки зарегистрированного НДС, который еще не был оплачен на момент текущего документа
//
Функция ПолучитьДанныеПоНеоплаченнымСчетамФактурамПолученным(ТаблицаОплат)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",            Организация);
	Запрос.УстановитьПараметр("КонецПериода",           КонецДня(КонецПериода));
	
	СобытияОтгрузки  = Новый Массив;
	СобытияОтгрузки.Добавить(Перечисления.СобытияПоНДСПродажи.Реализация);
	Запрос.УстановитьПараметр("СобытияОтгрузки",     	СобытияОтгрузки);
	
	СобытияОплаты       = Новый Массив;
	СобытияОплаты.Добавить(Перечисления.СобытияПоНДСПродажи.Оплата);
	Запрос.УстановитьПараметр("СобытияОплаты",          СобытияОплаты);
	
	СобытияВозврата     = Новый Массив;
	СобытияВозврата.Добавить(Перечисления.СобытияПоНДСПродажи.Возврат);
	Запрос.УстановитьПараметр("СобытияВозврата",        СобытияВозврата);
	
	ИсключаемыеЦенности = Новый Массив;
	ИсключаемыеЦенности.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ИсключаемыеЦенности.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	Запрос.УстановитьПараметр("ИсключаемыеЦенности",    ИсключаемыеЦенности);
	
	Запрос.УстановитьПараметр("СчетаФактурыВыданные", 	ТаблицаОплат.ВыгрузитьКолонку("Документ"));
	Запрос.УстановитьПараметр("ТекущийДокумент", 		Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	НДСПродажиОбороты.СчетФактура КАК СчетФактура,
	|	НДСПродажиОбороты.Покупатель  КАК Покупатель,
	|	НДСПродажиОбороты.СтавкаНДС   КАК СтавкаНДС,
	|	НДСПродажиОбороты.ВидЦенности КАК ВидЦенности,
	|	НДСПродажиОбороты.СчетФактура.Дата КАК ДатаВвода,
	|	СУММА(ВЫБОР КОГДА НДСПродажиОбороты.Событие в (&СобытияОтгрузки) ТОГДА НДСПродажиОбороты.СуммаБезНДСОборот КОГДА (НДСПродажиОбороты.Событие в (&СобытияОплаты)) ИЛИ (НДСПродажиОбороты.Событие в (&СобытияВозврата)) ТОГДА -1 * НДСПродажиОбороты.СуммаБезНДСОборот ИНАЧЕ 0 КОНЕЦ) КАК НеоплаченнаяСумма,
	|	СУММА(ВЫБОР КОГДА НДСПродажиОбороты.Событие в (&СобытияОтгрузки) ТОГДА НДСПродажиОбороты.НДСОборот КОГДА (НДСПродажиОбороты.Событие в (&СобытияОплаты)) ИЛИ (НДСПродажиОбороты.Событие в (&СобытияВозврата)) ТОГДА -1 * НДСПродажиОбороты.НДСОборот ИНАЧЕ 0 КОНЕЦ) КАК НеоплаченныйНДС
	|ИЗ
	|	РегистрНакопления.НДСПродажи.Обороты(, &КонецПериода, Регистратор, Организация = &Организация И СчетФактура в (&СчетаФактурыВыданные) И (Событие в (&СобытияОтгрузки) или Событие в (&СобытияОплаты) или Событие в (&СобытияВозврата)) И НЕ(ВидЦенности В (&ИсключаемыеЦенности)) ) КАК НДСПродажиОбороты
	
	|ГДЕ
	|	НДСПродажиОбороты.Регистратор <> &ТекущийДокумент
	
	|СГРУППИРОВАТЬ ПО
	|	НДСПродажиОбороты.СчетФактура,
	|	НДСПродажиОбороты.Покупатель,
	|	НДСПродажиОбороты.СтавкаНДС,
	|	НДСПродажиОбороты.ВидЦенности
	|
	|ИТОГИ СУММА(НеоплаченнаяСумма), СУММА(НеоплаченныйНДС) ПО
	|	СчетФактура";

	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

КонецФункции // ПолучитьДанныеПоНеоплаченнымСчетамФактурамПолученным()

// Процедура вызывается по кнопке "Заполнить" в форме диалога документа.
// В процедуре реализуется алгоритм автоматического заполнения строк табличной части документа.
//
Процедура КоманднаяПанельЗаполнить(Кнопка)

	Состав.Очистить();

	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
					|	РегистрацияОплаты.Организация,
					|	РегистрацияОплаты.Ссылка
					|ИЗ
					|	Документ.РегистрацияОплатыОтПокупателейДляНДС КАК РегистрацияОплаты

					|ГДЕ
					|	( (РегистрацияОплаты.НачалоПериода МЕЖДУ &НачалоПериода И &КонецПериода) ИЛИ (РегистрацияОплаты.КонецПериода МЕЖДУ &НачалоПериода И &КонецПериода) ) И
					|	РегистрацияОплаты.Организация = &Организация И
					|	РегистрацияОплаты.ПометкаУдаления = &Ложь И
					|	РегистрацияОплаты.Ссылка <> &ТекщийДокумент";

	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("Ложь", 		   Ложь);
	Запрос.УстановитьПараметр("ТекщийДокумент", Ссылка);
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаРезультата.Количество() > 0 Тогда
		Сообщить("Внимание! Для организации: " + Организация + " за период с " + Дата(НачалоПериода) + " по " + Дата(КонецПериода) + " уже введен документ регистрации оплаты от покупателей." , СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	ТаблицаОстатковОплат = Новый ТаблицаЗначений;
	ТаблицаОстатковОплат.Колонки.Добавить("Организация");
	ТаблицаОстатковОплат.Колонки.Добавить("Контрагент");
	ТаблицаОстатковОплат.Колонки.Добавить("Договор");
	ТаблицаОстатковОплат.Колонки.Добавить("Сделка");
	ТаблицаОстатковОплат.Колонки.Добавить("Документ");
	ТаблицаОстатковОплат.Колонки.Добавить("ДатаДокумента");
	ТаблицаОстатковОплат.Колонки.Добавить("ДатаОплаты");
	ТаблицаОстатковОплат.Колонки.Добавить("СуммаДокумента");
	
	ТаблицаОстатковДолгов = ТаблицаОстатковОплат.Скопировать();
	
	СформироватьТаблицуНезачтеннойЗадолженностиНаНачалоПериода(ТаблицаОстатковОплат, НачалоПериода, "АвансыПокупателей");
	
	СформироватьТаблицуНезачтеннойЗадолженностиНаНачалоПериода(ТаблицаОстатковДолгов, НачалоПериода, "Отгрузки");
	
	СформироватьТаблицуОперацийДвиженийДолговЗаПериод(ТаблицаОстатковОплат, НачалоПериода, КонецПериода, "Оплаты");
	
	СформироватьТаблицуОперацийДвиженийДолговЗаПериод(ТаблицаОстатковДолгов, НачалоПериода, КонецПериода, "Отгрузки");
	
	ТаблицаОплат = СформироватьТаблицуОплатПоДокументам(ТаблицаОстатковОплат, ТаблицаОстатковДолгов);
	
	ДеревоСчетовФактур = ПолучитьДанныеПоНеоплаченнымСчетамФактурамПолученным(ТаблицаОплат);
	
	// дополняем структуру служебной колонкой для хранения результатов распределения оплат
	ДеревоСчетовФактур.Колонки.Добавить("ФактыОплаты");
	ДеревоСчетовФактур.Колонки.Добавить("ОплатаБезНДС", ПолучитьОписаниеТиповЧисла(15,3));
	ДеревоСчетовФактур.Колонки.Добавить("ОплатаНДС", ПолучитьОписаниеТиповЧисла(15,3));

	// распределяем существующие оплаты текущего периода
	РаспределитьОплатыПоДереву(ТаблицаОплат, ДеревоСчетовФактур);	
	
	// помещаем события оплаты в строки табличной части документа
	Для Каждого СтрокаДерева Из ДеревоСчетовФактур.Строки Цикл
		Для Каждого СтрокаСФ Из СтрокаДерева.Строки Цикл
			
			Если СтрокаСФ.ФактыОплаты <> Неопределено Тогда
				Для Каждого СтрокаОплаты Из СтрокаСФ.ФактыОплаты Цикл
					СтрокаТП = Состав.Добавить();

					СтрокаТП.ВидЦенности    = СтрокаСФ.ВидЦенности;
					СтрокаТП.Покупатель     = СтрокаСФ.Покупатель;
					СтрокаТП.СчетФактура    = СтрокаСФ.СчетФактура;
					СтрокаТП.СтавкаНДС      = СтрокаСФ.СтавкаНДС;
					СтрокаТП.НДС            = СтрокаОплаты.ОплатаНДС;
					СтрокаТП.СуммаБезНДС    = СтрокаОплаты.ОплатаБезНДС;
					СтрокаТП.ДатаОплаты = 	  СтрокаОплаты.ДатаОплаты; 
					СтрокаТП.ДокументОплаты = СтрокаОплаты.ДокументОплаты; 
					
				КонецЦикла;
			КонецЕсли;
				
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

// Процедура вызывается по кнопке выбора периода в форме диалога документа.
// В процедуре реализуется открытие диалогового окна для того чтобы пользователь в
// удобной форме мог выбрать значения реквизитов дата начала и дата окончания периода.
//

Процедура ВыбПериодНажатие(Элемент)

	НастройкаПериода = Новый НастройкаПериода;

	НастройкаПериода.УстановитьПериод(НачалоПериода, ?(КонецПериода='0001-01-01', КонецПериода, КонецДня(КонецПериода)));

	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод   = Истина;
	НастройкаПериода.ВариантНастройки         = ВариантНастройкиПериода.Период;

	НастройкаПериода.Редактировать();

	НачалоПериода = НастройкаПериода.ПолучитьДатуНачала();
	КонецПериода  = НастройкаПериода.ПолучитьДатуОкончания();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля дата 
// в диалоге документа.
//
Процедура ДатаПриИзменении(Элемент)

	УстановитьВремя(РежимАвтоВремя.Последним);

	Если (НачалоМесяца(Дата) <> НачалоПериода)
	 или (КонецМесяца(Дата) <> КонецПериода) Тогда
		Ответ = Вопрос("Установить значение периода документа месяцем в который входит текущая дата?", РежимДиалогаВопрос.ДаНет,,,);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			НачалоПериода = НачалоМесяца(Дата);
			КонецПериода =  КонецМесяца(Дата);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();