////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период

Перем мСтруктураПоложенийКолонок;
Перем мКолонкиТовары;
Перем мПоказыватьКод, мПоказыватьАртикул;

// Флаги показа колонок
Перем ПоказыватьЦену Экспорт;
Перем ПоказыватьВалюту Экспорт;
Перем ПоказыватьЕдиницуИзмерения Экспорт;
Перем ПоказыватьПроцентСкидкиНаценки Экспорт;
Перем СоответствиеТиповЦен Экспорт;

Перем мПечатнаяФормаПоУмолчанию;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Проверяет модифицированность документа и предлагает его записать
//
Функция ПроверитьМодифицированностьФормы(ТекстСообщения)

	Результат = Ложь;

	Если Модифицированность Тогда
		СтрПроведен = ?(Проведен, " и провести","");
		Ответ       = Вопрос("Документ изменен. " + ТекстСообщения + " его необходимо записать" + СтрПроведен +".
		                     |Записать" + СтрПроведен + "?",
		                     РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.Отмена, "Документ изменен");

		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Если Проведен Тогда
				Попытка
					ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);
				Исключение
					Предупреждение("Операция не выполнена!");
					Возврат Результат = Истина;
				КонецПопытки;
			Иначе
				ЗаписатьВФорме();
			КонецЕсли;

			Результат = Истина;
		КонецЕсли;
	Иначе
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверитьМодифицированность()

// Функция получает положение колонки для заданного имени сохраненного значения.
//
// Параметры:
//  ИмяСохраненногоЗначения - имя значения, под которым было сохранено строковое представление положения колонки.
//
// Возвращаемое значение:
//  Положение колонки - Элемент системного перечисления ПоложениеКолонки.
//
Функция ПолучитьПоложениеКолонки(ИмяСохраненногоЗначения)

	ПоложениеКолонкиСтрока = ВосстановитьЗначение(ИмяСохраненногоЗначения);

	Если ПоложениеКолонкиСтрока = "На следующей строке" Тогда
		Возврат ПоложениеКолонки.НаСледующейСтроке;
	ИначеЕсли ПоложениеКолонкиСтрока = "В той же колонке" Тогда
		Возврат ПоложениеКолонки.ВТойЖеКолонке;
	ИначеЕсли ПоложениеКолонкиСтрока = "Новая колонка" Тогда
		Возврат ПоложениеКолонки.НоваяКолонка;
	Иначе

		// Значение еще не было сохранено
		// Надо взять настройку по умолчанию и сохранить ее для последующей работы
		Если Прав(ИмяСохраненногоЗначения, 1) = "0" Тогда
			// Цена на новой колонке
			ПоложениеКолонкиСтрока = "Новая колонка";
		ИначеЕсли Прав(ИмяСохраненногоЗначения, 1) = "1" Тогда
			// Валюта на следующей строке
			ПоложениеКолонкиСтрока = "На следующей строке";
		Иначе
			// Основная единица измерения и процент скидки/наценки в той же колонке
			ПоложениеКолонкиСтрока = "В той же колонке";
		КонецЕсли;
		СохранитьЗначение(ИмяСохраненногоЗначения, ПоложениеКолонкиСтрока);

		Возврат ПолучитьПоложениеКолонки(ИмяСохраненногоЗначения);
	КонецЕсли;

КонецФункции // ПолучитьПоложениеКолонки()

// Функция открывает форму выбора типа цен.
//
// Возвращаемое значение:
//  Команда закрытия формы - тип значения произвольный.
//
Функция ОткрытьФормуВыбораТипаЦен()

	ФормаВыбораЦен = Обработки.ФормированиеЦен.Создать().ПолучитьФорму("ФормаВыбораТипаЦен", ЭтаФорма);

	ФормаВыбораЦен.СписокТиповЦенСкидок.ЗагрузитьЗначения(ТипыЦен.ВыгрузитьКолонку("ТипЦен"));
	ФормаВыбораЦен.ИмяСправочникаВыбора     = "ТипыЦенНоменклатуры";
	ФормаВыбораЦен.ИмяКолонкиТиповЦенСкидок = "ТипЦен";

	Возврат ФормаВыбораЦен.ОткрытьМодально();

КонецФункции // ОткрытьФормуВыбораТипаЦен()

// Процедура создает и заполняет структуру, содержащую в себе варианты положения колонок в форме
//
Процедура ПолучитьСтруктуруПоложенийКолонок()

	ИмяСохраненныхЗначений = Метаданные().Имя
	                         + "_" + ПоказыватьЦену
	                         + "_" + ПоказыватьВалюту
	                         + "_" + ПоказыватьЕдиницуИзмерения
	                         + "_" + ПоказыватьПроцентСкидкиНаценки;

	мСтруктураПоложенийКолонок = Новый Структура();
	мСтруктураПоложенийКолонок.Вставить("Цена",                 ПолучитьПоложениеКолонки(ИмяСохраненныхЗначений+"_0"));
	мСтруктураПоложенийКолонок.Вставить("Валюта",               ПолучитьПоложениеКолонки(ИмяСохраненныхЗначений+"_1"));
	мСтруктураПоложенийКолонок.Вставить("ЕдиницаИзмерения",     ПолучитьПоложениеКолонки(ИмяСохраненныхЗначений+"_2"));
	мСтруктураПоложенийКолонок.Вставить("ПроцентСкидкиНаценки", ПолучитьПоложениеКолонки(ИмяСохраненныхЗначений+"_3"));

КонецПроцедуры // ПолучитьСтруктуруПоложенийКолонок()

// Процедура заполняет реквизит СписокЦен на форме из табличной части ТипыЦен
//
Процедура ЗаполнитьСписокТиповЦен()

	СписокТиповЦен.Очистить();
	Для Каждого СтрокаТиповЦен Из ТипыЦен Цикл
		Если НЕ ЗначениеНеЗаполнено(СтрокаТиповЦен.ТипЦен) Тогда
			СписокТиповЦен.Добавить(СтрокаТиповЦен.ТипЦен);
		КонецЕсли;
	КонецЦИкла;

КонецПроцедуры // ЗаполнитьСписокТиповЦен()

// Процедура сдвигает колонку на требуемое количество колонок  в позицию ОчередногоНомераКолонки 
// и увеличивает ОчередногоНомераКолонки на единицу
//
// Параметры:
//  Колонка               - сдвигаемая колонка
//  ОчереднойНомерКолонки - положение, которое должна занять колонка после сдвига
//
Процедура СдвинутьКолонку(Колонка, ОчереднойНомерКолонки)

	КолонкиТаблицыЦен = ТаблицаЦен.Колонки;

	ТекущийНомерКолонки = КолонкиТаблицыЦен.Индекс(Колонка);
	Если ТекущийНомерКолонки <> ОчереднойНомерКолонки Тогда
		// сдвинем колонку
		КолонкиТаблицыЦен.Сдвинуть(ТекущийНомерКолонки, ОчереднойНомерКолонки - ТекущийНомерКолонки);
	КонецЕсли;

	ВсегоКолонок          = КолонкиТаблицыЦен.Количество();
	ОчереднойНомерКолонки = ОчереднойНомерКолонки + 1;
	ОчереднойНомерКолонки = ?(ОчереднойНомерКолонки > ВсегоКолонок, ВсегоКолонок, ОчереднойНомерКолонки);

КонецПроцедуры // СдвинутьКолонку()

// Устанавливает в табличной части цен на форме недостающие параметры
//
Процедура УстановитьНедостающиеПараметры()

	// Добавим недостающие колонки
	КолонкаКод = ЭлементыФормы.ТаблицаЦен.Колонки.Вставить(1, "Код");
	КолонкаКод.Имя                = "Код";
	КолонкаКод.Доступность        = Ложь;
	КолонкаКод.ПропускатьПриВводе = Истина;
	КолонкаКод.Видимость          = мПоказыватьКод;
	КолонкаКод.Ширина             = 8;

	КолонкаАртикул = ЭлементыФормы.ТаблицаЦен.Колонки.Вставить(2, "Артикул");
	КолонкаАртикул.Имя                = "Артикул";
	КолонкаАртикул.Доступность        = Ложь;
	КолонкаАртикул.ПропускатьПриВводе = Истина;
	КолонкаАртикул.Видимость          = мПоказыватьАртикул;
	КолонкаАртикул.Ширина             = 16;

	ЭлементыФормы.ТаблицаЦен.Колонки.ИндексСтрокиТаблицыЦен.ТолькоПросмотр = Истина;

	// Установим необходимые параметры номенклатуры
	ЭлементыФормы.ТаблицаЦен.Колонки.Номенклатура.ЭлементУправления.УстановитьДействие("ПриИзменении", Новый Действие("ТаблицаЦенНоменклатураПриИзменении"));
	ЭлементыФормы.ТаблицаЦен.Колонки.Номенклатура.ЭлементУправления.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ЭлементыФормы.ТаблицаЦен.Колонки.Номенклатура.АвтоОтметкаНезаполненного = Истина;

	// Установим необходимые параметры характеристики номенклатуры
	ЭлементыФормы.ТаблицаЦен.Колонки.ХарактеристикаНоменклатуры.ЭлементУправления.УстановитьДействие("ПриИзменении", Новый Действие("ТаблицаЦенХарактеристикаНоменклатурыПриИзменении"));
	ЭлементыФормы.ТаблицаЦен.Колонки.ХарактеристикаНоменклатуры.ЭлементУправления.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	
	//+++Шарафутдинов 23.03.2018
	Для Каждого СтрокаТипаЦен Из ТипыЦен Цикл
		й = ЭлементыФормы.ТаблицаЦен.Колонки.Найти("цена"+СоответствиеТиповЦен[СтрокаТипаЦен.ТипЦен]);
		у = ЭлементыФормы.ТаблицаЦен.Колонки.Найти("яштСкидка"+СоответствиеТиповЦен[СтрокаТипаЦен.ТипЦен]);
		Если й <> Неопределено Тогда
			й.ЭлементУправления.УстановитьДействие("ПриИзменении", Новый Действие("ТаблицаЦенЦенаПриИзменении"));
		КонецЕсли;
		Если у <> Неопределено Тогда
			у.ЭлементУправления.УстановитьДействие("ПриИзменении", Новый Действие("ТаблицаЦенЯштСкидкаПриИзменении"));
		КонецЕсли;
	КонецЦикла;
	//---Шарафутдинов 23.03.2018 	

	// АвтоотметкаНезаполненного для валюты
	Для каждого СтрокаТипаЦен Из ТипыЦен Цикл
		НомерСоответствияТекущейКолонки = СоответствиеТиповЦен.Получить(СтрокаТипаЦен.ТипЦен);
		КолонкаВалюты = ЭлементыФормы.ТаблицаЦен.Колонки.Найти("Валюта" + НомерСоответствияТекущейКолонки);
		Если Не КолонкаВалюты = Неопределено Тогда
			КолонкаВалюты.АвтоОтметкаНезаполненного = Истина;
		КонецЕсли; 

	КонецЦикла;

КонецПроцедуры // УстановитьНедостающиеПараметры()

// Процедура устанавливает колонки табличной часи в требуемом порядке, добавляет недостающие колонки, 
// убирает ненужные
//
Процедура ОбновитьСоставКолонок()

	// надо расположить все нужные колонки в правильном порядке
	// сначала должна идти колонка номенклатуры
	КолонкиТаблицыЦен = ТаблицаЦен.Колонки;
	ОчереднойНомерКолонки = 1;

	ТекущаяКолонка = КолонкиТаблицыЦен.Найти("Номенклатура");
	СдвинутьКолонку(ТекущаяКолонка, ОчереднойНомерКолонки);

	ТекущаяКолонка = КолонкиТаблицыЦен.Найти("ХарактеристикаНоменклатуры");
	СдвинутьКолонку(ТекущаяКолонка, ОчереднойНомерКолонки);

	Для Каждого СтрокаТипаЦен Из ТипыЦен Цикл

		Если ЗначениеНеЗаполнено(СтрокаТипаЦен.ТипЦен) Тогда
			Продолжить;
		КонецЕсли;

		НомерСоответствияТекущейКолонки = СоответствиеТиповЦен.Получить(СтрокаТипаЦен.ТипЦен);
		Если НомерСоответствияТекущейКолонки = Неопределено Тогда
			НомерСоответствияТекущейКолонки = СоответствиеТиповЦен.Количество();
			СоответствиеТиповЦен.Вставить(СтрокаТипаЦен.ТипЦен, СоответствиеТиповЦен.Количество());
		КонецЕсли;

		ТекущаяКолонка = КолонкиТаблицыЦен.Найти("цена" + НомерСоответствияТекущейКолонки);
		Если ТекущаяКолонка = Неопределено Тогда
			// надо вставить
			ТаблицаЦен.Колонки.Вставить(ОчереднойНомерКолонки, "цена" + НомерСоответствияТекущейКолонки, ПолучитьОписаниеТиповЧисла(15, 2), СокрЛП(СтрокаТипаЦен.ТипЦен), 10);
			ОчереднойНомерКолонки = ОчереднойНомерКолонки + 1;
		Иначе
			СдвинутьКолонку(ТекущаяКолонка, ОчереднойНомерКолонки);
		КонецЕсли;

		// валюта
		ТекущаяКолонка = КолонкиТаблицыЦен.Найти("валюта"+НомерСоответствияТекущейКолонки);
		Если ТекущаяКолонка = Неопределено Тогда
			// надо вставить
			ТаблицаЦен.Колонки.Вставить(ОчереднойНомерКолонки, "валюта"+НомерСоответствияТекущейКолонки, Новый ОписаниеТипов("СправочникСсылка.Валюты"), "Валюта", 8);
			ОчереднойНомерКолонки = ОчереднойНомерКолонки + 1;
		Иначе
			СдвинутьКолонку(ТекущаяКолонка, ОчереднойНомерКолонки);
		КонецЕсли;

		// основная единица измерения
		ТекущаяКолонка = КолонкиТаблицыЦен.Найти("единица"+НомерСоответствияТекущейКолонки);
		Если ТекущаяКолонка = Неопределено Тогда
			// надо вставить
			ТаблицаЦен.Колонки.Вставить(ОчереднойНомерКолонки, "единица"+НомерСоответствияТекущейКолонки, Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"), "Основная единица измерения", 8);
			ОчереднойНомерКолонки = ОчереднойНомерКолонки + 1;
		Иначе
			СдвинутьКолонку(ТекущаяКолонка, ОчереднойНомерКолонки);
		КонецЕсли;

		// процент скидки/наценки
		ТекущаяКолонка = КолонкиТаблицыЦен.Найти("процент"+НомерСоответствияТекущейКолонки);
		Если ТекущаяКолонка = Неопределено Тогда
			// надо вставить
			ТаблицаЦен.Колонки.Вставить(ОчереднойНомерКолонки, "процент"+НомерСоответствияТекущейКолонки, ПолучитьОписаниеТиповЧисла(15, 2), "% скидки (наценки)", 8);
			ОчереднойНомерКолонки = ОчереднойНомерКолонки + 1;
		Иначе
			СдвинутьКолонку(ТекущаяКолонка, ОчереднойНомерКолонки);
		КонецЕсли; 		
		
		//+++ Шарафутдинов
		ТекущаяКолонка = КолонкиТаблицыЦен.Найти("яштСкидка"+НомерСоответствияТекущейКолонки);
		Если ТекущаяКолонка = Неопределено Тогда
			// надо вставить
			ТаблицаЦен.Колонки.Вставить(ОчереднойНомерКолонки, "яштСкидка" + НомерСоответствияТекущейКолонки, ПолучитьОписаниеТиповЧисла(15, 2), "% скидки/наценки (яшт)", 8);
			ОчереднойНомерКолонки = ОчереднойНомерКолонки + 1;
		Иначе
			СдвинутьКолонку(ТекущаяКолонка, ОчереднойНомерКолонки);
		КонецЕсли;	
		
		//***2018.04.15 Задача 44398
		Если НЕ ТипыЦен.Найти(Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00001")) = Неопределено Тогда
			//Если НЕ СтрокаТипаЦен.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00001") Тогда //закупочная
				ТекущаяКолонка = КолонкиТаблицыЦен.Найти("наценкаОтЗакупочной"+НомерСоответствияТекущейКолонки);
				Если ТекущаяКолонка = Неопределено Тогда
					// надо вставить
					ТаблицаЦен.Колонки.Вставить(ОчереднойНомерКолонки, "наценкаОтЗакупочной" + НомерСоответствияТекущейКолонки, ПолучитьОписаниеТиповЧисла(15, 2), "% от закупочной", 8);
					ОчереднойНомерКолонки = ОчереднойНомерКолонки + 1;
				Иначе
					СдвинутьКолонку(ТекущаяКолонка, ОчереднойНомерКолонки);
				КонецЕсли;	
			//КонецЕсли;
		КонецЕсли;
		
		// предыдущая цена
		ТекущаяКолонка = КолонкиТаблицыЦен.Найти("пред_цена"+НомерСоответствияТекущейКолонки);
		Если ТекущаяКолонка = Неопределено Тогда
			// надо вставить
			ТаблицаЦен.Колонки.Вставить(ОчереднойНомерКолонки, "пред_цена" + НомерСоответствияТекущейКолонки, ПолучитьОписаниеТиповЧисла(15, 2), "предыдущая цена", 8);
			ОчереднойНомерКолонки = ОчереднойНомерКолонки + 1;
		Иначе
			СдвинутьКолонку(ТекущаяКолонка, ОчереднойНомерКолонки);
		КонецЕсли;
		//--- Шарафутдинов

	КонецЦикла;

	// все, что за пределами, надо удалить
	Для НомерУдаляемойКолонки = ОчереднойНомерКолонки По КолонкиТаблицыЦен.Количество()-1 Цикл
		КолонкиТаблицыЦен.Удалить(ОчереднойНомерКолонки);
	КонецЦикла;

	ЭлементыФормы.ТаблицаЦен.СоздатьКолонки();

	Для Каждого СтрокаТипаЦен Из ТипыЦен Цикл
		й = ЭлементыФормы.ТаблицаЦен.Колонки.Найти("цена"+СоответствиеТиповЦен[СтрокаТипаЦен.ТипЦен]);
		Если й <> Неопределено Тогда
			й.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
		КонецЕсли;
	КонецЦикла;
	
	// Установим недостающие параметры
	УстановитьНедостающиеПараметры();

КонецПроцедуры // ОбновитьСоставКолонок()

// Производит перезаполнение и установку необходимых полей в строке табличной части.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части, которую необходимо перезаполнить.
//
Процедура ПерезаполнитьСтроку(СтрокаТабличнойЧасти)

	Если СписокТиповЦен.Количество() = 0 Тогда

		// Ничего делать не надо
		Возврат;

	КонецЕсли;

	// Заполним все требуемые реквизиты
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаЦен", Дата);
	Запрос.УстановитьПараметр("ТипыЦен", СписокТиповЦен);
	Запрос.УстановитьПараметр("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("ПустаяХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ЕдиницаХраненияОстатковНоменклатуры", СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|   &Номенклатура как Номенклатура,
	|	ВЫБОР КОГДА ЦеныНоменклатурыБезХарактеристики.ТипЦен ЕСТЬ NULL И ЦеныНоменклатурыСХарактеристикой.ТипЦен ЕСТЬ NULL
	|	      ТОГДА ТипыЦенСправочник.Ссылка 
	|	      ИНАЧЕ ВЫБОР КОГДА ЦеныНоменклатурыСХарактеристикой.ТипЦен ЕСТЬ NULL
	|	                  ТОГДА ЦеныНоменклатурыБезХарактеристики.ТипЦен
	|	                  ИНАЧЕ ЦеныНоменклатурыСХарактеристикой.ТипЦен КОНЕЦ КОНЕЦ                   КАК ТипЦен,
	|	ВЫБОР КОГДА ЦеныНоменклатурыБезХарактеристики.Цена ЕСТЬ NULL И ЦеныНоменклатурыСХарактеристикой.Цена ЕСТЬ NULL
	|	      ТОГДА 0
	|	      ИНАЧЕ ВЫБОР КОГДА ЦеныНоменклатурыСХарактеристикой.Цена ЕСТЬ NULL
	|	                  ТОГДА ЦеныНоменклатурыБезХарактеристики.Цена
	|	                  ИНАЧЕ ЦеныНоменклатурыСХарактеристикой.Цена КОНЕЦ КОНЕЦ                     КАК Цена,
	|	ВЫБОР КОГДА ЦеныНоменклатурыБезХарактеристики.Валюта ЕСТЬ NULL И ЦеныНоменклатурыСХарактеристикой.Валюта ЕСТЬ NULL
	|	      ТОГДА ТипыЦенСправочник.ВалютаЦены
	|	      ИНАЧЕ ВЫБОР КОГДА ЦеныНоменклатурыСХарактеристикой.Валюта ЕСТЬ NULL
	|	                  ТОГДА ЦеныНоменклатурыБезХарактеристики.Валюта
	|	                  ИНАЧЕ ЦеныНоменклатурыСХарактеристикой.Валюта КОНЕЦ КОНЕЦ                   КАК Валюта,
	|	ВЫБОР КОГДА ЦеныНоменклатурыБезХарактеристики.ЕдиницаИзмерения ЕСТЬ NULL И ЦеныНоменклатурыСХарактеристикой.ЕдиницаИзмерения ЕСТЬ NULL
	|	      ТОГДА &ЕдиницаХраненияОстатковНоменклатуры
	|	      ИНАЧЕ ВЫБОР КОГДА ЦеныНоменклатурыСХарактеристикой.ЕдиницаИзмерения ЕСТЬ NULL
	|	                  ТОГДА ЦеныНоменклатурыБезХарактеристики.ЕдиницаИзмерения
	|	                  ИНАЧЕ ЦеныНоменклатурыСХарактеристикой.ЕдиницаИзмерения КОНЕЦ КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР КОГДА ЦеныНоменклатурыБезХарактеристики.ПроцентСкидкиНаценки ЕСТЬ NULL И ЦеныНоменклатурыСХарактеристикой.ПроцентСкидкиНаценки ЕСТЬ NULL
	|	      ТОГДА ТипыЦенСправочник.ПроцентСкидкиНаценки
	|	      ИНАЧЕ ВЫБОР КОГДА ЦеныНоменклатурыСХарактеристикой.ПроцентСкидкиНаценки ЕСТЬ NULL
	|	                  ТОГДА ЦеныНоменклатурыБезХарактеристики.ПроцентСкидкиНаценки
	|	                  ИНАЧЕ ЦеныНоменклатурыСХарактеристикой.ПроцентСкидкиНаценки КОНЕЦ КОНЕЦ      КАК ПроцентСкидкиНаценки
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаЦен, ТипЦен В(&ТипыЦен) И Номенклатура = &Номенклатура И ХарактеристикаНоменклатуры = &ПустаяХарактеристикаНоменклатуры) КАК ЦеныНоменклатурыБезХарактеристики
	|
	|ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ТипыЦенНоменклатуры КАК ТипыЦенСправочник
	|	ПО ЦеныНоменклатурыБезХарактеристики.ТипЦен = ТипыЦенСправочник.Ссылка
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаЦен, ТипЦен В(&ТипыЦен) И Номенклатура = &Номенклатура И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры) КАК ЦеныНоменклатурыСХарактеристикой
	|	ПО ЦеныНоменклатурыСХарактеристикой.ТипЦен = ТипыЦенСправочник.Ссылка
	|
	|ГДЕ
	|	ТипыЦенСправочник.Ссылка В (&ТипыЦен)	
	|";

	Результат = Запрос.Выполнить();
	
	ТЗПредыдущиеЦены = ПолучитьПредыдущиеЦены(Результат);
	
	Выборка = Результат.Выбрать();

	КолонкиТаблицыЦен = ТаблицаЦен.Колонки;

	Пока Выборка.Следующий() Цикл
		НомерСоответствияТекущейКолонки = СоответствиеТиповЦен.Получить(Выборка.ТипЦен);

		Если КолонкиТаблицыЦен.Найти("цена"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
			СтрокаТабличнойЧасти["цена"+НомерСоответствияТекущейКолонки] = Выборка.Цена;
		КонецЕсли;
		Если КолонкиТаблицыЦен.Найти("валюта"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
			СтрокаТабличнойЧасти["валюта"+НомерСоответствияТекущейКолонки] = Выборка.Валюта;
		КонецЕсли;
		Если КолонкиТаблицыЦен.Найти("единица"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
			СтрокаТабличнойЧасти["единица"+НомерСоответствияТекущейКолонки] = Выборка.ЕдиницаИзмерения;
		КонецЕсли;
		Если КолонкиТаблицыЦен.Найти("процент"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
			СтрокаТабличнойЧасти["процент"+НомерСоответствияТекущейКолонки] = Выборка.ПроцентСкидкиНаценки;
		КонецЕсли;
		
		//+++Шарафутдинов 12.03
		
		Если КолонкиТаблицыЦен.Найти("пред_цена"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
			Отбор = новый Структура();
			Отбор.Вставить("ТипЦен",Выборка.ТипЦен);
			Отбор.Вставить("Номенклатура",Выборка.Номенклатура);
			НайденныеСтроки = ТЗПредыдущиеЦены.НайтиСтроки(Отбор);					
			Если НайденныеСтроки.Количество()<>0 тогда
				СтрокаТабличнойЧасти["пред_цена"+НомерСоответствияТекущейКолонки] = НайденныеСтроки[НайденныеСтроки.Количество()-1].ПредыдущаяЦена;
			КонецЕсли;
		КонецЕсли;
		//---Шарафутдинов 12.03
		
	КонецЦикла;
	
КонецПроцедуры // ПерезаполнитьСтроку()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части, которую необходимо заполнить.
//
Процедура ПриИзмененииНоменклатуры(СтрокаТабличнойЧасти) Экспорт

	ПерезаполнитьСтроку(СтрокаТабличнойЧасти);

КонецПроцедуры // ПриИзмененииНоменклатуры()

// Производит заполнение и установку необходимых полей при изменении характеристики номенклатуры в табличной части.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части, которую необходимо заполнить.
//
Процедура ПриИзмененииХарактеристикиНоменклатуры(СтрокаТабличнойЧасти)

	ПерезаполнитьСтроку(СтрокаТабличнойЧасти);

КонецПроцедуры // ПриИзмененииХарактеристикиНоменклатуры()

// Производит заполнение и установку необходимых полей при добавлении новых типов цен.
//
// Параметры:
//  СписокДобавленныхТиповЦен - список добавленных типов цен.
//
Процедура ЗаполнитьПоНовымТипамЦен(СписокДобавленныхТиповЦен)

	Если СписокДобавленныхТиповЦен.Количество() = 0 Тогда

		// Ничего делать не надо
		Возврат;

	КонецЕсли;

	// Заполним все требуемые реквизиты
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаЦен", Дата);
	Запрос.УстановитьПараметр("ТипыЦен", СписокДобавленныхТиповЦен);
	Запрос.УстановитьПараметр("Номенклатура", ТаблицаЦен.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ХарактеристикиНоменклатуры", ТаблицаЦен.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));
	Запрос.УстановитьПараметр("ПустаяХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР КОГДА ЦеныНоменклатурыСрезПоследних.Номенклатура ЕСТЬ NULL
	|	      ТОГДА НоменклатураСправочник.Ссылка 
	|	      ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Номенклатура КОНЕЦ                 КАК Номенклатура,
	|	ХарактеристикиНоменклатуры.Ссылка                                            КАК ХарактеристикаНоменклатуры,
	|	ВЫБОР КОГДА ЦеныНоменклатурыСрезПоследних.ТипЦен ЕСТЬ NULL
	|	      ТОГДА ТипыЦенСправочник.Ссылка 
	|	      ИНАЧЕ ЦеныНоменклатурыСрезПоследних.ТипЦен КОНЕЦ                       КАК ТипЦен,
	|	МАКСИМУМ(ВЫБОР КОГДА ЦеныНоменклатурыСрезПоследних.Цена ЕСТЬ NULL
	|	         ТОГДА 0
	|	         ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Цена КОНЕЦ)                     КАК Цена,
	|	МАКСИМУМ(ВЫБОР КОГДА ЦеныНоменклатурыСрезПоследних.Валюта ЕСТЬ NULL
	|	         ТОГДА ТипыЦенСправочник.ВалютаЦены
	|	         ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Валюта КОНЕЦ)                   КАК Валюта,
	|	МАКСИМУМ(ВЫБОР КОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения ЕСТЬ NULL
	|	         ТОГДА НоменклатураСправочник.ЕдиницаХраненияОстатков
	|	         ИНАЧЕ ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КОНЕЦ)         КАК ЕдиницаИзмерения,
	|	МАКСИМУМ(ВЫБОР КОГДА ЦеныНоменклатурыСрезПоследних.ПроцентСкидкиНаценки ЕСТЬ NULL
	|	         ТОГДА ТипыЦенСправочник.ПроцентСкидкиНаценки
	|	         ИНАЧЕ ЦеныНоменклатурыСрезПоследних.ПроцентСкидкиНаценки КОНЕЦ)     КАК ПроцентСкидкиНаценки
	|ИЗ Справочник.Номенклатура КАК НоменклатураСправочник
	|
	|ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ТипыЦенНоменклатуры КАК ТипыЦенСправочник
	|	ПО ИСТИНА
	|
	|ПОЛНОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|		Характеристики.Ссылка   КАК Ссылка,
	|		Характеристики.Владелец КАК Владелец
	|	ИЗ
	|		Справочник.ХарактеристикиНоменклатуры КАК Характеристики
	|	ГДЕ
	|		Характеристики.Ссылка В (&ХарактеристикиНоменклатуры)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		&ПустаяХарактеристикаНоменклатуры КАК Ссылка,
	|		Номенклатура.Ссылка               КАК Владелец
	|	ИЗ
	|		Справочник.Номенклатура КАК Номенклатура
	|
	|	) КАК ХарактеристикиНоменклатуры
	|	ПО ХарактеристикиНоменклатуры.Владелец = НоменклатураСправочник.Ссылка
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаЦен, ТипЦен В(&ТипыЦен)
	|                                                                          И Номенклатура В (&Номенклатура)
	|                                                                          И (ХарактеристикаНоменклатуры В (&ХарактеристикиНоменклатуры)
	|                                                                             ИЛИ ХарактеристикаНоменклатуры = &ПустаяХарактеристикаНоменклатуры)) КАК ЦеныНоменклатурыСрезПоследних
	|	ПО ЦеныНоменклатурыСрезПоследних.ТипЦен = ТипыЦенСправочник.Ссылка
	|	   И ЦеныНоменклатурыСрезПоследних.Номенклатура = НоменклатураСправочник.Ссылка
	|	   И ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры = ХарактеристикиНоменклатуры.Ссылка
	|ГДЕ
	|	ТипыЦенСправочник.Ссылка В (&ТипыЦен)
	|	И НоменклатураСправочник.Ссылка В (&Номенклатура)
	|	И НЕ НоменклатураСправочник.ЭтоГруппа
	|	И (ХарактеристикиНоменклатуры.Ссылка В (&ХарактеристикиНоменклатуры)
	|	   ИЛИ ХарактеристикиНоменклатуры.Ссылка  = &ПустаяХарактеристикаНоменклатуры)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА ЦеныНоменклатурыСрезПоследних.Номенклатура ЕСТЬ NULL
	|	      ТОГДА НоменклатураСправочник.Ссылка 
	|	      ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Номенклатура КОНЕЦ,
	|	ХарактеристикиНоменклатуры.Ссылка,
	|	ВЫБОР КОГДА ЦеныНоменклатурыСрезПоследних.ТипЦен ЕСТЬ NULL
	|	      ТОГДА ТипыЦенСправочник.Ссылка 
	|	      ИНАЧЕ ЦеныНоменклатурыСрезПоследних.ТипЦен КОНЕЦ
	|";

	Результат = Запрос.Выполнить();
	
	//+++  	 Шарафутдинов
	ТЗПредыдущиеЦены = ПолучитьПредыдущиеЦены(Результат);					  		
	//---    Шарафутдинов	
	
	Выборка = Результат.Выбрать();

	КолонкиТаблицыЦен = ТаблицаЦен.Колонки;

	Пока Выборка.СледующийПоЗначениюПоля("Номенклатура") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("ХарактеристикаНоменклатуры") Цикл

			СтруктураПоиска = Новый Структура();

			СтруктураПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
			СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Выборка.ХарактеристикаНоменклатуры);

			СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТаблицаЦен, СтруктураПоиска);

			Если СтрокаТабличнойЧасти = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			Пока Выборка.Следующий() Цикл
				НомерСоответствияТекущейКолонки = СоответствиеТиповЦен.Получить(Выборка.ТипЦен);

				Если КолонкиТаблицыЦен.Найти("цена"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
					СтрокаТабличнойЧасти["цена"+НомерСоответствияТекущейКолонки] = Выборка.Цена;
				КонецЕсли;
				Если КолонкиТаблицыЦен.Найти("валюта"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
					СтрокаТабличнойЧасти["валюта"+НомерСоответствияТекущейКолонки] = Выборка.Валюта;
				КонецЕсли;
				Если КолонкиТаблицыЦен.Найти("единица"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
					СтрокаТабличнойЧасти["единица"+НомерСоответствияТекущейКолонки] = Выборка.ЕдиницаИзмерения;
				КонецЕсли;
				Если КолонкиТаблицыЦен.Найти("процент"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
					СтрокаТабличнойЧасти["процент"+НомерСоответствияТекущейКолонки] = Выборка.ПроцентСкидкиНаценки;
				КонецЕсли;
				
				Если КолонкиТаблицыЦен.Найти("пред_цена"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
					Отбор = новый Структура();
					Отбор.Вставить("ТипЦен",Выборка.ТипЦен);
					Отбор.Вставить("Номенклатура",Выборка.Номенклатура);
					НайденныеСтроки = ТЗПредыдущиеЦены.НайтиСтроки(Отбор);					
					Если НайденныеСтроки.Количество()<>0 тогда
						СтрокаТабличнойЧасти["пред_цена"+НомерСоответствияТекущейКолонки] = НайденныеСтроки[НайденныеСтроки.Количество()-1].ПредыдущаяЦена;
					КонецЕсли;
				КонецЕсли;
				
				
			КонецЦикла;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоНовымТипамЦен()

// Производит заполнение таблицы цен на форме.
//
Процедура ЗаполнитьТаблицуЦенФормы()

	Если ТипыЦен.Количество() = 0 Тогда

		// Документ пуст
		Возврат;

	КонецЕсли;

	ТаблицаТоваров = Товары.Выгрузить();
	ТаблицаТоваров.Сортировать("ИндексСтрокиТаблицыЦен, Номенклатура, ХарактеристикаНоменклатуры, ТипЦен");

	// Заполним все требуемые реквизиты

	КолонкиТаблицыЦен = ТаблицаЦен.Колонки;

	//+++Шарафутдинов
	Запрос = Новый Запрос;
				Запрос.Текст = ("ВЫБРАТЬ * 
				|ПОМЕСТИТЬ ВТ
				|ИЗ &ТипыЦен как ТипыЦен
				|;
				|////////////////
				|ВЫБРАТЬ Номенклатура как Номенклатура, ТипЦен как ТипЦен
				|ИЗ ВТ КАК ТипыЦен");
				Запрос.УстановитьПараметр("ТипыЦен",ТаблицаТоваров);				
				Результат = Запрос.Выполнить(); 
	ТЗПредыдущиеЦены = ПолучитьПредыдущиеЦены(Результат);	
	//---Шарафутдинов
	
	ТекущийИндексСтрокиТаблицыЦен = Неопределено;
	НоваяСтрока = Неопределено;
	Для Каждого СтрокаТаблицыТоваров Из ТаблицаТоваров Цикл

		Если ТекущийИндексСтрокиТаблицыЦен <> СтрокаТаблицыТоваров.ИндексСтрокиТаблицыЦен
		 Или НоваяСтрока.Номенклатура <> СтрокаТаблицыТоваров.Номенклатура
		 Или НоваяСтрока.ХарактеристикаНоменклатуры <> СтрокаТаблицыТоваров.ХарактеристикаНоменклатуры Тогда
			НоваяСтрока = ТаблицаЦен.Добавить();
			НоваяСтрока.Номенклатура               = СтрокаТаблицыТоваров.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТаблицыТоваров.ХарактеристикаНоменклатуры;
			ТекущийИндексСтрокиТаблицыЦен = СтрокаТаблицыТоваров.ИндексСтрокиТаблицыЦен;
		КонецЕсли;

		НомерСоответствияТекущейКолонки = СоответствиеТиповЦен.Получить(СтрокаТаблицыТоваров.ТипЦен);

		НоваяСтрока["цена"+НомерСоответствияТекущейКолонки]    = СтрокаТаблицыТоваров.Цена;
		НоваяСтрока["валюта"+НомерСоответствияТекущейКолонки]  = СтрокаТаблицыТоваров.Валюта;
		НоваяСтрока["единица"+НомерСоответствияТекущейКолонки] = СтрокаТаблицыТоваров.ЕдиницаИзмерения;
		НоваяСтрока["процент"+НомерСоответствияТекущейКолонки] = СтрокаТаблицыТоваров.ПроцентСкидкиНаценки;
		
		//+++Шарафутдинов 23.03				
		
		Отбор = новый Структура();
		Отбор.Вставить("ТипЦен",СтрокаТаблицыТоваров.ТипЦен);
		Отбор.Вставить("Номенклатура",СтрокаТаблицыТоваров.Номенклатура);
		НайденныеСтроки = ТЗПредыдущиеЦены.НайтиСтроки(Отбор);					
		Если НайденныеСтроки.Количество()<>0 тогда
			НоваяСтрока["пред_цена"+НомерСоответствияТекущейКолонки] = НайденныеСтроки[НайденныеСтроки.Количество()-1].ПредыдущаяЦена;
		КонецЕсли;
		
		цена = СтрокаТаблицыТоваров.Цена;
		пред_цена = НоваяСтрока["пред_цена"+НомерСоответствияТекущейКолонки];
		Если пред_цена<>0 тогда
			НоваяСтрока["яштСкидка"+НомерСоответствияТекущейКолонки] = Окр((цена/пред_цена - 1)*100 ,2);
		иначе
			НоваяСтрока["яштСкидка"+НомерСоответствияТекущейКолонки] = 0;
		конецесли
		
		//---Шарафутдинов 23.03
		
		

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТаблицуЦенФормы()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	ЕстьКоличество = Ложь;
	ЕстьЦена       = Истина;

	Команда = "ПодборВТабличнуюЧасть";

	СписокВидовПодбора = Новый СписокЗначений();
	СписокВидовПодбора.Добавить(,"По справочнику");
	СписокВидовПодбора.Добавить("ОстаткиВсейНоменклатуры", "По остаткам номенклатуры (вся номенклатура)");

	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);

	СтруктураПараметровПодбора.Вставить("Контрагент"           , Неопределено);
	СтруктураПараметровПодбора.Вставить("ДоговорВзаиморасчетов", Неопределено);
	СтруктураПараметровПодбора.Вставить("Склад"                , Неопределено);
	СтруктураПараметровПодбора.Вставить("Организация"          , Неопределено);
	СтруктураПараметровПодбора.Вставить("ТипЦен"               , Неопределено);
	СтруктураПараметровПодбора.Вставить("ЕстьКоличество"       , ЕстьКоличество);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , ЕстьЦена);

	СтруктураПараметровПодбора.Вставить("Заголовок"          , "Подбор номенклатуры в документ " + 
	                                                           ПредставлениеДок + " № " + Номер );

	ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)Экспорт

	Перем Номенклатура, Характеристика, ЕдиницаИзмерения, Цена, ВалютаЦены, ЗапрашиватьЦену;

	Модифицированность = Истина;
	Если ЗначениеВыбора.Команда = "ЗаполнениеТабличнойЧасти" Тогда
        пВалютаУпрУчета=Константы.ВалютаУправленческогоУчета.Получить();
		КолонкиТаблицыЦен = ТаблицаЦен.Колонки;
		
		//++++Шарафутдинов 07.03.2018  				
		ТЗПредыдущиеЦены = ПолучитьПредыдущиеЦены(ЗначениеВыбора.Результат);					  		
		//--- Шарафутдинов 07.03.2018
		
		

		Выборка = ЗначениеВыбора.Результат.Выбрать();

		Пока Выборка.Следующий() Цикл
			Если Выборка.ТипЦен <> Null
			   И Выборка.Номенклатура <> Null
			   И Не Выборка.ЭтоГруппа Тогда

				ТипЦен = Выборка.ТипЦен;

				//Если ТипЗнч(Выборка.ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатурыКонтрагентов") Тогда
				//	ТипЦен           = ТипЦен.ТипЦеныНоменклатуры;
				//	ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
				//Иначе
				//	ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
				//КонецЕсли;

				Если ТипыЦен.Найти(ТипЦен) = Неопределено Тогда

					СтрокаТиповЦен = ТипыЦен.Добавить();
					СтрокаТиповЦен.ТипЦен = ТипЦен;

					// Обновим список типов цен
					ЗаполнитьСписокТиповЦен();

					// обновим состав колонок
					ОбновитьСоставКолонок();
					ПолучитьСтруктуруПоложенийКолонок();
					ВидимостьКолонок();

				КонецЕсли;

				Номенклатура               = Выборка.Номенклатура;
				//ХарактеристикаНоменклатуры = ?(Выборка.ХарактеристикаНоменклатуры = Null, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), Выборка.ХарактеристикаНоменклатуры);

				СтруктураОтбора = Новый Структура();
				//СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
				СтруктураОтбора.Вставить("Номенклатура",               Номенклатура);

				СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТаблицаЦен, СтруктураОтбора);
				Если СтрокаТабличнойЧасти = Неопределено Тогда
					СтрокаТабличнойЧасти = ТаблицаЦен.Добавить();
					СтрокаТабличнойЧасти.Номенклатура               = Номенклатура;
				//	СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
				КОнецЕсли;

				НомерСоответствияТекущейКолонки = СоответствиеТиповЦен.Получить(ТипЦен);

				Если КолонкиТаблицыЦен.Найти("цена"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
					СтрокаТабличнойЧасти["цена"+НомерСоответствияТекущейКолонки] = Выборка.Цена;
				КонецЕсли;
				
				Если КолонкиТаблицыЦен.Найти("валюта"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
					СтрокаТабличнойЧасти["валюта"+НомерСоответствияТекущейКолонки] = пВалютаУпрУчета;
				КонецЕсли;
				
				Если КолонкиТаблицыЦен.Найти("единица"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
					СтрокаТабличнойЧасти["единица"+НомерСоответствияТекущейКолонки] = Номенклатура.ЕдиницаХраненияОстатков;
				КонецЕсли;
				
				
				//+++Шарафутдинов 12.03
				
				Если КолонкиТаблицыЦен.Найти("пред_цена"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
					Отбор = новый Структура();
					Отбор.Вставить("ТипЦен",ТипЦен);
					Отбор.Вставить("Номенклатура",Номенклатура);
					НайденныеСтроки = ТЗПредыдущиеЦены.НайтиСтроки(Отбор);					
					Если НайденныеСтроки.Количество()<>0 тогда
						СтрокаТабличнойЧасти["пред_цена"+НомерСоответствияТекущейКолонки] = НайденныеСтроки[НайденныеСтроки.Количество()-1].ПредыдущаяЦена;
					КонецЕсли;
				КонецЕсли;
				
				//---Шарафутдинов 12.03

				//Если ЗначениеНеЗаполнено(Выборка.Валюта) и ЗначениеНеЗаполнено(ЕдиницаИзмерения) Тогда
				//	Если КолонкиТаблицыЦен.Найти("валюта"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
				//		СтрокаТабличнойЧасти["валюта"+НомерСоответствияТекущейКолонки] = ТипЦен.ВалютаЦены;
				//	КонецЕсли;
				//	Если КолонкиТаблицыЦен.Найти("единица"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
				//		СтрокаТабличнойЧасти["единица"+НомерСоответствияТекущейКолонки] = Номенклатура.ЕдиницаХраненияОстатков;
				//	КонецЕсли;
				//	Если КолонкиТаблицыЦен.Найти("процент"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
				//		СтрокаТабличнойЧасти["процент"+НомерСоответствияТекущейКолонки] = ТипЦен.ПроцентСкидкиНаценки;
				//	КонецЕсли;
				//Иначе
				//	Если КолонкиТаблицыЦен.Найти("валюта"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
				//		СтрокаТабличнойЧасти["валюта"+НомерСоответствияТекущейКолонки] = Выборка.Валюта;
				//	КонецЕсли;
				//	Если КолонкиТаблицыЦен.Найти("единица"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
				//		СтрокаТабличнойЧасти["единица"+НомерСоответствияТекущейКолонки] = ЕдиницаИзмерения;
				//	КонецЕсли;
				//	Если КолонкиТаблицыЦен.Найти("процент"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
				//		СтрокаТабличнойЧасти["процент"+НомерСоответствияТекущейКолонки] = Выборка.ПроцентСкидкиНаценки;
				//	КонецЕсли;
				//КонецЕсли;

			КонецЕсли;
		КонецЦикла;

	ИначеЕсли ЗначениеВыбора.Команда = "ПодборВТабличнуюЧасть" Тогда

		ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
		ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
		ЗначениеВыбора.Свойство("ЗапрашиватьЦену" , ЗапрашиватьЦену);

		Если ЗапрашиватьЦену = Неопределено Тогда
			ЗапрашиватьЦену = Ложь
		КонецЕсли;
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
		СтруктураОтбора.Вставить("Номенклатура",               Номенклатура);

		СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТаблицаЦен, СтруктураОтбора);
		Если СтрокаТабличнойЧасти = Неопределено Тогда

			// Надо добавить
			НоваяСтрока = ТаблицаЦен.Добавить();
			НоваяСтрока.Номенклатура               = Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = Характеристика;
			Если ЗапрашиватьЦену Тогда

				ЗначениеВыбора.Свойство("ЕдиницаИзмерения" , ЕдиницаИзмерения);
				ЗначениеВыбора.Свойство("Цена" ,             Цена);
				ЗначениеВыбора.Свойство("ВалютаЦены" ,       ВалютаЦены);
				
				//+++Шарафутдинов 12.03
				Запрос = Новый Запрос;
				Запрос.Текст = ("ВЫБРАТЬ * 
				|ПОМЕСТИТЬ ВТ
				|ИЗ &ТипыЦен как ТипыЦен
				|;
				|////////////////
				|ВЫБРАТЬ &Номенклатура как Номенклатура, ТипЦен как ТипЦен
				|ИЗ ВТ КАК ТипыЦен");
				Запрос.УстановитьПараметр("ТипыЦен",ТипыЦен.Выгрузить());
				Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
				Результат = Запрос.Выполнить();
				ТЗПредыдущиеЦены = ПолучитьПредыдущиеЦены(Результат);					  		
				//---Шарафутдинов 12.03
				

				КолонкиТаблицыЦен = ТаблицаЦен.Колонки;

				Для Каждого СтрокаТипаЦен Из ТипыЦен Цикл

					НомерСоответствияТекущейКолонки = СоответствиеТиповЦен.Получить(СтрокаТипаЦен.ТипЦен);

					Если КолонкиТаблицыЦен.Найти("цена"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
						НоваяСтрока["цена"+НомерСоответствияТекущейКолонки] = Цена;
					КонецЕсли;
					Если КолонкиТаблицыЦен.Найти("валюта"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
						НоваяСтрока["валюта"+НомерСоответствияТекущейКолонки] = ВалютаЦены;
					КонецЕсли;
					Если КолонкиТаблицыЦен.Найти("единица"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
						НоваяСтрока["единица"+НомерСоответствияТекущейКолонки] = ЕдиницаИзмерения;
					КонецЕсли;
					
					Если КолонкиТаблицыЦен.Найти("пред_цена"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
						Отбор = новый Структура();
						Отбор.Вставить("ТипЦен",СтрокаТипаЦен.ТипЦен);
						Отбор.Вставить("Номенклатура",Номенклатура);
						НайденныеСтроки = ТЗПредыдущиеЦены.НайтиСтроки(Отбор);					
						Если НайденныеСтроки.Количество()<>0 тогда
							НоваяСтрока["пред_цена"+НомерСоответствияТекущейКолонки] = НайденныеСтроки[НайденныеСтроки.Количество()-1].ПредыдущаяЦена;
						КонецЕсли;
					КонецЕсли;


				КонецЦикла;

			Иначе
				ПриИзмененииНоменклатуры(НоваяСтрока);
			КонецЕсли;
		КонецЕсли;

	КонецЕслИ;

КонецПроцедуры // ОбработкаПодбора()


//+++Шарафутдинов 
// Получает предыдущие цены по результату запроса обычной Установки цен
//
// Параметры:
//  Результат            - Результат запрос обычной Установки цен
//

Функция ПолучитьПредыдущиеЦены(Результат)
	ТЗ = Результат.Выгрузить();
	СЗНоменклатура = Новый СписокЗначений;
	СЗТипцЕН = НОВЫЙ СписокЗначений;
	СЗТипцЕН.ЗагрузитьЗначения(ТЗ.ВыгрузитьКОлонку("ТипЦен"));
	СЗНоменклатура.ЗагрузитьЗначения(ТЗ.ВыгрузитьКОлонку("Номенклатура"));
	
	запрос = новый Запрос;
	//запрос.Текст ="ВЫБРАТЬ
	//|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	//|	МАКСИМУМ(ЦеныНоменклатуры.Период) КАК ПредыдущаяДата
	//|ПОМЕСТИТЬ втЦеныНоменклатуры
	//|ИЗ
	//|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	//|			,
	//|			ТипЦен В (&ВидЦены)
	//|				И Номенклатура В (&Номенклатура)) КАК ЦеныНоменклатурыСрезПоследних
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	//|		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ЦеныНоменклатуры.Номенклатура
	//|			И ЦеныНоменклатурыСрезПоследних.Период <> ЦеныНоменклатуры.Период
	//|			И (ЦеныНоменклатуры.ТипЦен В (&ВидЦены))
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	//|	ЦеныНоменклатурыСрезПоследних.Цена
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	втЦеныНоменклатуры.Номенклатура,
	//| ЕСТЬNULL(ЦеныНоменклатуры.ТипЦен,ЗНАЧЕНИЕ(Справочник.ТипыЦенНоменклатуры.ПустаяСсылка)) Как ТипЦен,
	//|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК ПредыдущаяЦена
	//|ИЗ
	//|	втЦеныНоменклатуры КАК втЦеныНоменклатуры
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	//|		ПО втЦеныНоменклатуры.Номенклатура = ЦеныНоменклатуры.Номенклатура
	//|			И втЦеныНоменклатуры.ПредыдущаяДата = ЦеныНоменклатуры.Период
	//|			И (ЦеныНоменклатуры.ТипЦен В (&ВидЦены))";
	запрос.Текст ="ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|   ЦеныНоменклатурыСрезПоследних.ТипЦен Как ТипЦен,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК ПредыдущаяЦена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекДата
	|			,
	|			ТипЦен В (&ВидЦены)
	|				И Номенклатура В (&Номенклатура)) КАК ЦеныНоменклатурыСрезПоследних";
	

	запрос.УстановитьПараметр("ВидЦены",СЗТипцЕН);			  
	запрос.УстановитьПараметр("Номенклатура",СЗНоменклатура);
	запрос.УстановитьПараметр("ТекДата",?(ЗначениеЗаполнено(ЭтотОбъект.Дата),НачалоДня(ЭтотОбъект.Дата)-1, НачалоДня(ТекущаяДата())-1));
	
	ТЗПредыдущиеЦены = запрос.Выполнить().Выгрузить(); 
	
	Возврат ТЗПредыдущиеЦены; 
	
	
КонецФункции
//---Шарафутдинов 




// Осуществляет вызов формы заполнения табличной части документа
//
// Параметры:
//  Очистить            - Истина - заполнить с предворительной очисткой, Ложь - добавить
//  Обновить            - Истина - обновить строки, Ложь - добавить строки
//  ПоЦенамКонтрагентов - Истина - заполнять по ценам контрагентов, Ложь - заполнять по ценам номенклатуры
//
Процедура ЗаполнитьТовары(Очистить, Обновить, ПоЦенамКонтрагентов)

	Если ТаблицаЦен.Количество() > 0 И Очистить Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		ТаблицаЦен.Очистить();

	КонецЕсли;

	ФормированиеЦен = Обработки.ФормированиеЦен.Создать();
	ФормаЗаполнения = ФормированиеЦен.ПолучитьФорму("ФормаЗаполнения", ЭтаФорма);

	ФормированиеЦен.мКоманда    = "Изменить";

	Если ПоЦенамКонтрагентов Тогда
		ФормаЗаполнения.ИмяРегистра = "ЦеныНоменклатурыКонтрагентов";
	Иначе

		ФормаЗаполнения.ИмяРегистра = "ЦеныНоменклатуры";

		ТаблицаТиповЦен = ТипыЦен.Выгрузить();
		ТаблицаТиповЦен.Колонки.ТипЦен.Имя = "ТипЦенСкидок";
		ФормированиеЦен.ТипыЦенСкидок.Загрузить(ТаблицаТиповЦен);

	КонецЕсли;

	Если Обновить Тогда
		СписокНоменклатуры = Новый СписокЗначений;
		СписокНоменклатуры.ЗагрузитьЗначения(ТаблицаЦен.ВыгрузитьКолонку("Номенклатура"));
		ФормаЗаполнения.мСписокНоменклатуры = СписокНоменклатуры;
	КонецЕсли;

	ФормаЗаполнения.ОткрытьМодально();

	УстановитьПодменюВыбораИзмененияПоТипуЦен(ЭлементыФормы.КоманднаяПанельТаблицыТиповЦен.Кнопки.ДействиеИзменить,
	                                          Новый Действие("КоманднаяПанельТаблицыТиповЦенДействиеИзменить"));

КонецПроцедуры // ЗаполнитьТовары()

// Процедура выполняет заполнение табличной части 
// копированием из выбранного пользователем документа Поступления.
//
// Параметры:
//  ДокументПоступление - Документ поступления, данными которого надо заполнить табличную часть.
//  ЧиститьТипыЦен      - Признак необходимости очистки типов цен перед заполнением.
//
Процедура ЗаполнитьТабличнуюЧастьПоПоступлению(ДокументПоступление, ЧиститьТипыЦен = Истина) Экспорт

	Если ЗначениеНеЗаполнено(ДокументПоступление.ТипЦен) Тогда
		СообщитьОбОшибке("В документе "+СокрЛП(ДокументПоступление)+" не установлен тип цен! Заполнение невозможно.");
		Возврат;
	КонецЕсли;

	ТипЦен = ДокументПоступление.ТипЦен.ТипЦеныНоменклатуры;

	Если ЗначениеНеЗаполнено(ТипЦен) Тогда
		СообщитьОбОшибке("для типа цен "+СокрЛП(ДокументПоступление.ТипЦен)+" не установлен базовый тип цен! Заполнение невозможно.");
		Возврат;
	КонецЕсли;

	Если ТипыЦен.Найти(ТипЦен) = Неопределено Тогда

		Если ЧиститьТипыЦен Тогда
			ТипыЦен.Очистить();
		КонецЕсли;
		СтрокаТабличнойЧасти = ТипыЦен.Добавить();
		СтрокаТабличнойЧасти.ТипЦен = ТипЦен;

		// Обновим список типов цен
		ЗаполнитьСписокТиповЦен();

		// обновим состав колонок
		ОбновитьСоставКолонок();
		ПолучитьСтруктуруПоложенийКолонок();
		ВидимостьКолонок();

	КонецЕсли;

	ПроцентСкидкиНаценки = ТипЦен.ПроцентСкидкиНаценки;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументОснование", ДокументПоступление);

	Запрос.Текст = "ВЫБРАТЬ
	               |	Док.СуммаВключаетНДС,
	               |	Док.ВалютаДокумента,
	               |	Док.Контрагент,
	               |	Док.ТипЦен.ТипЦеныНоменклатуры КАК ТипЦен,
	               |	Док.ТипЦен.ТипЦеныНоменклатуры.Код КАК КодТипаЦен,
	               |	Док.Товары.(	              
	               |		Номенклатура,
	               |		ХарактеристикаНоменклатуры,
	               |		Цена,
	               |		ЕдиницаИзмерения,
	               |		СтавкаНДС,
	               |		СУММА(НомерСтроки)
	               |	)
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг КАК Док
	               |ГДЕ
	               |	Док.Ссылка = &ДокументОснование
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Док.Товары.(Номенклатура,
	               |	ХарактеристикаНоменклатуры,
	               |	Цена,
	               |	ЕдиницаИзмерения,
	               |	СтавкаНДС)";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	//+++  	 Шарафутдинов
	//ТЗПредыдущиеЦены = ПолучитьПредыдущиеЦены(Шапка.Товары);					  		
	//---    Шарафутдинов
	
	Контрагент = Шапка.Контрагент; // чтобы точно был правильный контрагент

	СтрокаТипаЦен = ТипыЦен.Найти(Шапка.ТипЦен);
	НомерСоответствияТекущейКолонки = СоответствиеТиповЦен.Получить(Шапка.ТипЦен);

	Выборка = Шапка.Товары.Выбрать();

	Пока Выборка.Следующий() Цикл

		Если ЗначениеНеЗаполнено(Выборка.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;

		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Выборка.ХарактеристикаНоменклатуры);
		СтруктураОтбора.Вставить("Номенклатура",               Выборка.Номенклатура);

		СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТаблицаЦен, СтруктураОтбора);

		Если СтрокаТабличнойЧасти = Неопределено Тогда

			СтрокаТабличнойЧасти = ТаблицаЦен.Добавить();
			СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;

		КонецЕсли;

		СтрокаТабличнойЧасти["цена"+НомерСоответствияТекущейКолонки]  = ПересчитатьЦенуПриИзмененииФлаговНалогов(
		                                        Выборка.Цена,
		                                        Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
		                                        Шапка.СуммаВключаетНДС,
		                                        Шапка.ТипЦен.ЦенаВключаетНДС,
		                                        Шапка.ТипЦен.ЦенаВключаетНДС,
		                                        ПолучитьСтавкуНДС(Выборка.СтавкаНДС));

		СтрокаТабличнойЧасти["валюта"+НомерСоответствияТекущейКолонки]  = Шапка.ВалютаДокумента;
		СтрокаТабличнойЧасти["единица"+НомерСоответствияТекущейКолонки]  = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти["процент"+НомерСоответствияТекущейКолонки]  = ПроцентСкидкиНаценки;
		
		//Если КолонкиТаблицыЦен.Найти("пред_цена"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
			//Отбор = новый Структура();
			//Отбор.Вставить("ТипЦен",Выборка.ТипЦен);
			//Отбор.Вставить("Номенклатура",Выборка.Номенклатура);
			//НайденныеСтроки = ТЗПредыдущиеЦены.НайтиСтроки(Отбор);					
			//Если НайденныеСтроки<> Неопределено или НайденныеСтроки.Количество()<>0 тогда
			//	СтрокаТабличнойЧасти["пред_цена"+НомерСоответствияТекущейКолонки] = НайденныеСтроки[0].ПредыдущаяЦена;
			//КонецЕсли;
		//КонецЕсли;


	КонецЦикла;

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоПоступлению()

// Функция получает список типов цен подчиненных базовому типу цен.
//
// Параметры:
//  БазовыйТипЦен    - базовый тип цен, ссылка на справочник "ТипыЦенНоменклатуры".
//
// Возвращаемое значение:
//  Список типов цен - таблица значений.
//
Функция ПолучитьПодчиненныеТипыЦен(БазовыйТипЦен)

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("БазовыйТипЦен", БазовыйТипЦен);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТипыЦенНоменклатуры.Ссылка КАК ТипЦен
	|
	|ИЗ
	|	Справочник.ТипыЦенНоменклатуры КАК ТипыЦенНоменклатуры
	|
	|ГДЕ
	|	ТипыЦенНоменклатуры.БазовыйТипЦен.Ссылка = &БазовыйТипЦен
	|	И НЕ ТипыЦенНоменклатуры.Рассчитывается
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипыЦенНоменклатуры.Представление
	|";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьПодчиненныеТипыЦен()

// Процедура выполняет заполнение табличной части на основании документа Поступления
// с расчетом новых цен "Цена + Наценка" в качестве базовой цены документа Поступления
//
// Параметры:
//  ДокументПоступление - Документ поступления, данными которого надо заполнить табличную часть.
//
Процедура ЗаполнитьТабличнуюЧастьПоПоступлениюНаОсновании(ДокументПоступление)

	ТипЦенБазовый = ?((ТипЗнч(ДокументПоступление) = Тип("ДокументСсылка.ОприходованиеТоваров")),ДокументПоступление.ТипЦен,ДокументПоступление.ТипЦен.ТипЦеныНоменклатуры);

	// Получим подчиненные типы цен
	ПодчиненныеТипыЦен = ПолучитьПодчиненныеТипыЦен(ТипЦенБазовый);

	// Обновим список типов цен
	ТипыЦен.Очистить();
	СтрокаТабличнойЧасти        = ТипыЦен.Добавить();
	СтрокаТабличнойЧасти.ТипЦен = ТипЦенБазовый;

	Для Каждого Обход Из ПодчиненныеТипыЦен Цикл
		СтрокаТабличнойЧасти        = ТипыЦен.Добавить();
		СтрокаТабличнойЧасти.ТипЦен = Обход.ТипЦен;
	КонецЦикла;

	ЗаполнитьСписокТиповЦен();

	// Обновим состав колонок
	ОбновитьСоставКолонок();
	ПолучитьСтруктуруПоложенийКолонок();
	ВидимостьКолонок();

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументОснование", ДокументПоступление);
	Если ((ТипЗнч(ДокументПоступление) = Тип("ДокументСсылка.ОприходованиеТоваров"))) тогда 
		Запрос.Текст = "
		|ВЫБРАТЬ
		|   Док.Организация как организация,
		|	Док.Товары.(
		|		Номенклатура,
		|		ХарактеристикаНоменклатуры,
		|		Цена,
		|		ЕдиницаИзмерения,
		|		СУММА(НомерСтроки), // для того, чтобы работала группировка
		|		&ТипЦен КАК ТипЦен
		|	)
		|ИЗ
		|	Документ.ОприходованиеТоваров КАК Док
		|
		|ГДЕ
		|	Док.Ссылка = &ДокументОснование
		|
		|СГРУППИРОВАТЬ ПО
		|	Док.Товары.(Номенклатура,
		|	ХарактеристикаНоменклатуры,
		|	Цена,
		|	ЕдиницаИзмерения)";	
		Запрос.УстановитьПараметр("ТипЦен",ТипЦенБазовый);			   
	иначе 	
		Запрос.Текст = "ВЫБРАТЬ
		|	Док.СуммаВключаетНДС,
		|	Док.ВалютаДокумента,
		|	Док.Товары.(
		|		Номенклатура,
		|		ХарактеристикаНоменклатуры,
		|		Цена,
		|		ЕдиницаИзмерения,
		|		СтавкаНДС,
		|		СУММА(НомерСтроки),
		|		&ТипЦен КАК ТипЦен
		|	)
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК Док
		|ГДЕ
		|	Док.Ссылка = &ДокументОснование
		|
		|СГРУППИРОВАТЬ ПО
		|	Док.Товары.(Номенклатура,
		|	ХарактеристикаНоменклатуры,
		|	Цена,
		|	ЕдиницаИзмерения,
		|	СтавкаНДС)";
		Запрос.УстановитьПараметр("ТипЦен",ТипЦенБазовый);			   
	конецесли;
	Шапка = Запрос.Выполнить().Выбрать();
	
	Шапка.Следующий();
	
	//+++Шарафутдинов
	ТЗПредыдущиеЦены = ПолучитьПредыдущиеЦены(Шапка.Товары);	
	//---Шарафутдинов

	НомерСоответствияТекущейКолонкиБазовый = СоответствиеТиповЦен.Получить(ТипЦенБазовый);

	Выборка           = Шапка.Товары.Выбрать();

	Пока Выборка.Следующий() Цикл
		Если ЗначениеНеЗаполнено(Выборка.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;

		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Выборка.ХарактеристикаНоменклатуры);
		СтруктураОтбора.Вставить("Номенклатура",               Выборка.Номенклатура);

		СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТаблицаЦен, СтруктураОтбора);

		Если СтрокаТабличнойЧасти = Неопределено Тогда
			СтрокаТабличнойЧасти = ТаблицаЦен.Добавить();
			СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		КонецЕсли;

		// Заполним базовый тип цен
		Если ((ТипЗнч(ДокументПоступление) = Тип("ДокументСсылка.ОприходованиеТоваров"))) тогда 
					  БазоваяЦена = ПересчитатьЦенуПриИзмененииФлаговНалогов(
		              Выборка.Цена,
		              Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
		              ложь,
		              ТипЦенБазовый.ЦенаВключаетНДС,
		              ТипЦенБазовый.ЦенаВключаетНДС,
		              0);
		иначе 
		БазоваяЦена = ПересчитатьЦенуПриИзмененииФлаговНалогов(
		              Выборка.Цена,
		              Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
		              Шапка.СуммаВключаетНДС,
		              ТипЦенБазовый.ЦенаВключаетНДС,
		              ТипЦенБазовый.ЦенаВключаетНДС,
		              ПолучитьСтавкуНДС(Выборка.СтавкаНДС));
		конецесли;

		Если ((ТипЗнч(ДокументПоступление) = Тип("ДокументСсылка.ОприходованиеТоваров"))) тогда 
			СтрокаТабличнойЧасти["цена"    + НомерСоответствияТекущейКолонкиБазовый] = БазоваяЦена;
			СтрокаТабличнойЧасти["валюта"  + НомерСоответствияТекущейКолонкиБазовый] = Шапка.Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств;
			СтрокаТабличнойЧасти["единица" + НомерСоответствияТекущейКолонкиБазовый] = Выборка.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти["процент" + НомерСоответствияТекущейКолонкиБазовый] = 0;			
		иначе 
			СтрокаТабличнойЧасти["цена"    + НомерСоответствияТекущейКолонкиБазовый] = БазоваяЦена;
			СтрокаТабличнойЧасти["валюта"  + НомерСоответствияТекущейКолонкиБазовый] = Шапка.ВалютаДокумента;
			СтрокаТабличнойЧасти["единица" + НомерСоответствияТекущейКолонкиБазовый] = Выборка.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти["процент" + НомерСоответствияТекущейКолонкиБазовый] = 0;
			
			Отбор = новый Структура();
			Отбор.Вставить("ТипЦен",Выборка.ТипЦен);
			Отбор.Вставить("Номенклатура",Выборка.Номенклатура);
			НайденныеСтроки = ТЗПредыдущиеЦены.НайтиСтроки(Отбор);					
			Если НайденныеСтроки.Количество()<>0 тогда
				СтрокаТабличнойЧасти["пред_цена"+НомерСоответствияТекущейКолонкиБазовый] = НайденныеСтроки[НайденныеСтроки.Количество()-1].ПредыдущаяЦена;
			КонецЕсли;
			
        конецесли;
		// Заполним подчиненные типы цен
		Для Каждого Обход Из ПодчиненныеТипыЦен Цикл
			ТипЦенНоменклатуры       = Обход.ТипЦен;
			СтрокаТипаЦен = ТипыЦен.Найти(ТипЦенНоменклатуры);
			НомерСоответствияТекущейКолонки = СоответствиеТиповЦен.Получить(Обход.ТипЦен);

			ПроцентПоУмолчанию       = ТипЦенНоменклатуры.ПроцентСкидкиНаценки;
			ОкруглятьВБольшуюСторону = ТипЦенНоменклатуры.ОкруглятьВБольшуюСторону;
			ПорядокОкругления        = ТипЦенНоменклатуры.ПорядокОкругления;
			НетДанных                = Ложь;
			НовыйПроцент             = ПолучитьПроцентСкидкиНаценкиЦеныНоменклатуры(
			                           Выборка.Номенклатура,
			                           Выборка.ХарактеристикаНоменклатуры,
			                           ТипЦенНоменклатуры, Дата, Истина, НетДанных);

			// Если нет данных в регистре сведений о наценке,
			// то наценку берем из типа цен.
			Если НетДанных Тогда
				НовыйПроцент = ПроцентПоУмолчанию;
			КонецЕсли;

			// Если процент скидки наценки ноль,
			// то цену не пересчитываем и не округляем.
			Если НовыйПроцент <> 0 Тогда
				НоваяЦена = БазоваяЦена * (100 + НовыйПроцент) / 100;
				НоваяЦена = ОкруглитьЦену(НоваяЦена, ПорядокОкругления, ОкруглятьВБольшуюСторону);
			Иначе
				НоваяЦена = БазоваяЦена;
			КонецЕсли;

			СтрокаТабличнойЧасти["цена"    + НомерСоответствияТекущейКолонки] = НоваяЦена;
			СтрокаТабличнойЧасти["валюта"  + НомерСоответствияТекущейКолонки] = Шапка.ВалютаДокумента;
			СтрокаТабличнойЧасти["единица" + НомерСоответствияТекущейКолонки] = Выборка.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти["процент" + НомерСоответствияТекущейКолонки] = НовыйПроцент;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоПоступлению()

Процедура ЗаполнитьТабличнуюЧастьПоЗаказуИлиКорректировке(ДокументПоступление)
	
	//стр = ТипыЦен.добавить();
	ТипЦенЗакупка = Справочники.ТипыЦенНоменклатуры.НайтиПоНаименованию("Закупочная");
	//стр.типцен = ТипЦен;

	ТипЦенБазовый = ТипЦенЗакупка;

	// Получим подчиненные типы цен
	ПодчиненныеТипыЦен = ПолучитьПодчиненныеТипыЦен(ТипЦенБазовый);

	// Обновим список типов цен
	ТипыЦен.Очистить();
	СтрокаТабличнойЧасти        = ТипыЦен.Добавить();
	СтрокаТабличнойЧасти.ТипЦен = ТипЦенБазовый;

	Для Каждого Обход Из ПодчиненныеТипыЦен Цикл
		СтрокаТабличнойЧасти        = ТипыЦен.Добавить();
		СтрокаТабличнойЧасти.ТипЦен = Обход.ТипЦен;
	КонецЦикла;

	ЗаполнитьСписокТиповЦен();

	// Обновим состав колонок
	ОбновитьСоставКолонок();
	ПолучитьСтруктуруПоложенийКолонок();
	ВидимостьКолонок();

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументОснование", ДокументПоступление);
	Если ((ТипЗнч(ДокументПоступление) = Тип("ДокументСсылка.ЗаказПоставщику"))) Тогда 

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Док.ссылка.СуммаВключаетНДС,
	|	Док.ссылка.ВалютаДокумента,
	|	Док.Номенклатура,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.Цена,
	|	Док.ЕдиницаИзмерения,
	|	Док.СтавкаНДС, // для того, чтобы работала группировка
	|   &ТипЦен КАК ТипЦен
	|
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование";
	//Иначе     // корректировка заказа поставщику
	//Запрос.Текст = "
	//|	ВЫБРАТЬ
	//|	ЗаказПоставщику.СуммаВключаетНДС СуммаВключаетНДС,
	//|	ЗаказПоставщику.ВалютаДокумента ВалютаДокумента,
	//|	Номенклатура,
	//|	ХарактеристикаНоменклатуры,
	//|	Цена,
	//|	ЕдиницаИзмерения,
	//|	Номенклатура.СтавкаНДС
	//|ИЗ
	//|	РегистрНакопления.ЗаказыПоставщикам.Остатки (,ЗаказПоставщику=&ДокументОснование)";
	Запрос.УстановитьПараметр("ТипЦен",ТипЦенБазовый);
	Конецесли;

	//Шапка = Запрос.Выполнить().Выбрать();
	//Шапка.Следующий();

	НомерСоответствияТекущейКолонкиБазовый = СоответствиеТиповЦен.Получить(ТипЦенБазовый);
	
	Результат = Запрос.Выполнить();
	
	ТЗПредыдущиеЦены = ПолучитьПредыдущиеЦены(Результат);					  		

	Выборка           = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		Если ЗначениеНеЗаполнено(Выборка.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;

		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Выборка.ХарактеристикаНоменклатуры);
		СтруктураОтбора.Вставить("Номенклатура",               Выборка.Номенклатура);

		СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТаблицаЦен, СтруктураОтбора);

		Если СтрокаТабличнойЧасти = Неопределено Тогда
			СтрокаТабличнойЧасти = ТаблицаЦен.Добавить();
			СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		КонецЕсли;
              ставкаНДС_2019 = СтавкаНДСнаДату( ЭтотОбъект.Дата ); //+++ 09.01.2019
		БазоваяЦена = ПересчитатьЦенуПриИзмененииФлаговНалогов(
		              Выборка.Цена,
		              Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
		              Выборка.СуммаВключаетНДС,
		              ТипЦенБазовый.ЦенаВключаетНДС,
		              ТипЦенБазовый.ЦенаВключаетНДС,
		              ПолучитьСтавкуНДС(ставкаНДС_2019));//+++ 09.01.2019
			СтрокаТабличнойЧасти["цена"    + НомерСоответствияТекущейКолонкиБазовый] = БазоваяЦена;
			СтрокаТабличнойЧасти["валюта"  + НомерСоответствияТекущейКолонкиБазовый] = Выборка.ВалютаДокумента;
			СтрокаТабличнойЧасти["единица" + НомерСоответствияТекущейКолонкиБазовый] = Выборка.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти["процент" + НомерСоответствияТекущейКолонкиБазовый] = 0;
			
			//Если КолонкиТаблицыЦен.Найти("пред_цена"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
			Отбор = новый Структура();
			Отбор.Вставить("ТипЦен",ТипЦенБазовый);
			Отбор.Вставить("Номенклатура",Выборка.Номенклатура);
			НайденныеСтроки = ТЗПредыдущиеЦены.НайтиСтроки(Отбор);					
			Если  НайденныеСтроки.Количество()<>0 тогда
				СтрокаТабличнойЧасти["пред_цена"+НомерСоответствияТекущейКолонкиБазовый] = НайденныеСтроки[НайденныеСтроки.Количество()-1].ПредыдущаяЦена;
			КонецЕсли;
		//КонецЕсли;
			
			
 //      конецесли;
		// Заполним подчиненные типы цен
		Для Каждого Обход Из ПодчиненныеТипыЦен Цикл
			ТипЦенНоменклатуры       = Обход.ТипЦен;
			СтрокаТипаЦен = ТипыЦен.Найти(ТипЦенНоменклатуры);
			НомерСоответствияТекущейКолонки = СоответствиеТиповЦен.Получить(Обход.ТипЦен);

			ПроцентПоУмолчанию       = ТипЦенНоменклатуры.ПроцентСкидкиНаценки;
			ОкруглятьВБольшуюСторону = ТипЦенНоменклатуры.ОкруглятьВБольшуюСторону;
			ПорядокОкругления        = ТипЦенНоменклатуры.ПорядокОкругления;
			НетДанных                = Ложь;
			НовыйПроцент             = ПолучитьПроцентСкидкиНаценкиЦеныНоменклатуры(
			                           Выборка.Номенклатура,
			                           Выборка.ХарактеристикаНоменклатуры,
			                           ТипЦенНоменклатуры, Дата, Истина, НетДанных);

			// Если нет данных в регистре сведений о наценке,
			// то наценку берем из типа цен.
			Если НетДанных Тогда
				НовыйПроцент = ПроцентПоУмолчанию;
			КонецЕсли;

			// Если процент скидки наценки ноль,
			// то цену не пересчитываем и не округляем.
			Если НовыйПроцент <> 0 Тогда
				НоваяЦена = БазоваяЦена * (100 + НовыйПроцент) / 100;
				НоваяЦена = ОкруглитьЦену(НоваяЦена, ПорядокОкругления, ОкруглятьВБольшуюСторону);
			Иначе
				НоваяЦена = БазоваяЦена;
			КонецЕсли;

			СтрокаТабличнойЧасти["цена"    + НомерСоответствияТекущейКолонки] = НоваяЦена;
			СтрокаТабличнойЧасти["валюта"  + НомерСоответствияТекущейКолонки] = Выборка.ВалютаДокумента;
			СтрокаТабличнойЧасти["единица" + НомерСоответствияТекущейКолонки] = Выборка.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти["процент" + НомерСоответствияТекущейКолонки] = НовыйПроцент;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры	

// Заполняет список пунктов подменю "Изменить".
// Всем кнопкам назначается одно переданное действие.
//
// Параметры:
//  ЭлементМеню            - кнопка командной панели формы соответственного подменю,
//  ОбъектОбработкиВыбора  - действие, которое надо выполнить при выборе любого пункта подменю.
//
Процедура УстановитьПодменюВыбораИзмененияПоТипуЦен(ЭлементМеню, ОбъектОбработкиВыбора) Экспорт

	ЭлементМеню.Кнопки.Очистить();
	Для каждого СтрокаТипаЦен Из ТипыЦен Цикл
		НомерСоответствияТекущейКолонки = СоответствиеТиповЦен.Получить(СтрокаТипаЦен.ТипЦен);
		Если НомерСоответствияТекущейКолонки = Неопределено Тогда
			НомерСоответствияТекущейКолонки = СоответствиеТиповЦен.Количество();
			СоответствиеТиповЦен.Вставить(СтрокаТипаЦен.ТипЦен, НомерСоответствияТекущейКолонки);
		КонецЕсли;
		ЭлементМеню.Кнопки.Добавить("Кнопка_" + НомерСоответствияТекущейКолонки, ТипКнопкиКоманднойПанели.Действие,
		                            СтрокаТипаЦен.ТипЦен.Наименование, ОбъектОбработкиВыбора);
	КонецЦикла;

КонецПроцедуры // УстановитьПодменюВыбораИзмененияПоТипуЦен()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость колонок в зависимости от параметров документа
// и делает недоступной единицу хранения остатков
//
Процедура ВидимостьКолонок()

	БылаНоваяКолонка = Ложь;
	Для Каждого КолонкаТиповЦен Из ЭлементыФормы.ТаблицаЦен.Колонки Цикл
		ПризнакКолонки = Лев(КолонкаТиповЦен.Имя, 4);
		Если ПризнакКолонки = "цена" Тогда
			КолонкаТиповЦен.Видимость = ПоказыватьЦену;
			КолонкаТиповЦен.Положение = мСтруктураПоложенийКолонок.Цена;
			БылаНоваяКолонка = Истина;
		ИначеЕсли ПризнакКолонки = "валю" Тогда
			КолонкаТиповЦен.Видимость = ПоказыватьВалюту;
			КолонкаТиповЦен.Положение = ?(БылаНоваяКолонка, мСтруктураПоложенийКолонок.Валюта, ПоложениеКолонки.НоваяКолонка);
			БылаНоваяКолонка = Истина;
		ИначеЕсли ПризнакКолонки = "един" Тогда
			КолонкаТиповЦен.Видимость = ПоказыватьЕдиницуИзмерения;
			КолонкаТиповЦен.Положение = ?(БылаНоваяКолонка, мСтруктураПоложенийКолонок.ЕдиницаИзмерения, ПоложениеКолонки.НоваяКолонка);
			БылаНоваяКолонка = Истина;
		ИначеЕсли ПризнакКолонки = "проц" Тогда
			КолонкаТиповЦен.Видимость = ПоказыватьПроцентСкидкиНаценки;
			КолонкаТиповЦен.Положение = ?(БылаНоваяКолонка, мСтруктураПоложенийКолонок.ПроцентСкидкиНаценки, ПоложениеКолонки.НоваяКолонка);
			БылаНоваяКолонка = Истина;
			//+++Шарафутдинов
		ИначеЕсли ПризнакКолонки = "яштС" Тогда
			КолонкаТиповЦен.Видимость = ПоказыватьПроцентСкидкиНаценки;
			КолонкаТиповЦен.Положение = ?(БылаНоваяКолонка, мСтруктураПоложенийКолонок.ПроцентСкидкиНаценки, ПоложениеКолонки.НоваяКолонка);
			БылаНоваяКолонка = Истина;	
		ИначеЕсли ПризнакКолонки = "наце" Тогда  //***
			КолонкаТиповЦен.Видимость = ПоказыватьПроцентСкидкиНаценки;
			КолонкаТиповЦен.Положение = ?(БылаНоваяКолонка, мСтруктураПоложенийКолонок.ПроцентСкидкиНаценки, ПоложениеКолонки.НоваяКолонка);
			БылаНоваяКолонка = Истина;	
		ИначеЕсли ПризнакКолонки = "пред" Тогда
			КолонкаТиповЦен.Видимость = ПоказыватьПроцентСкидкиНаценки;
			КолонкаТиповЦен.Положение = ?(БылаНоваяКолонка, мСтруктураПоложенийКолонок.ПроцентСкидкиНаценки, ПоложениеКолонки.НоваяКолонка);
			БылаНоваяКолонка = Ложь;
			КолонкаТиповЦен.ТолькоПросмотр = истина;
			//---Шарафутдинов    	
		КонецЕсли;
	КонецЦикла;

	// Установить видимость колонок "ХарактеристикаНоменклатуры"
	УстновитьВидимостьКолонок(мКолонкиТовары, Новый Структура("ХарактеристикаНоменклатуры"), мИспользоватьХарактеристики);

КонецПроцедуры // ВидимостьКолонок()

// Процедура устанавливает доступность колонок в зависимости от типа цен документа.
//
Процедура ДоступностьКолонок()

	Для Каждого СтрокаТипаЦен Из ТипыЦен Цикл
		Если СтрокаТипаЦен.ТипЦен.Рассчитывается Тогда

			НомерСоответствияТекущейКолонки = СоответствиеТиповЦен.Получить(СтрокаТипаЦен.ТипЦен);
			ТекКолонка = ЭлементыФормы.ТаблицаЦен.Колонки.Найти("цена"+НомерСоответствияТекущейКолонки);
			Если ТекКолонка <> Неопределено Тогда
				ТекКолонка.ТолькоПросмотр = Истина;
			КонецЕсли;
			ТекКолонка = ЭлементыФормы.ТаблицаЦен.Колонки.Найти("валюта"+НомерСоответствияТекущейКолонки);
			Если ТекКолонка <> Неопределено Тогда
				ТекКолонка.ТолькоПросмотр = Истина;
			КонецЕсли;
			ТекКолонка = ЭлементыФормы.ТаблицаЦен.Колонки.Найти("единица"+НомерСоответствияТекущейКолонки);
			Если ТекКолонка <> Неопределено Тогда
				ТекКолонка.ТолькоПросмотр = Истина;
			КонецЕсли;

		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ДоступностьКолонок()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если ЭтоНовый() Тогда
		Если НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьЦенообразование") Тогда 
			Предупреждение("Операции ценообразования запрещены!");	
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;

	
	
	мПоказыватьКод                 = ВосстановитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьКод");
	мПоказыватьАртикул             = ВосстановитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьАртикул");
	ПоказыватьЦену                 = ВосстановитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьЦену");
	ПоказыватьВалюту               = ВосстановитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьВалюту");
	ПоказыватьЕдиницуИзмерения     = ВосстановитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьЕдиницуИзмерения");
	ПоказыватьПроцентСкидкиНаценки = ВосстановитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьПроцентСкидкиНаценки");

	мПоказыватьКод                 = ?(мПоказыватьКод = Неопределено, Ложь, мПоказыватьКод);
	мПоказыватьАртикул             = ?(мПоказыватьАртикул = Неопределено, Ложь, мПоказыватьАртикул);
	ПоказыватьЦену                 = ?(ПоказыватьЦену = Неопределено, Истина, ПоказыватьЦену);
	ПоказыватьВалюту               = ?(ПоказыватьВалюту = Неопределено, Истина, ПоказыватьВалюту);
	ПоказыватьЕдиницуИзмерения     = ?(ПоказыватьЕдиницуИзмерения = Неопределено, Истина, ПоказыватьЕдиницуИзмерения);
	ПоказыватьПроцентСкидкиНаценки = ?(ПоказыватьПроцентСкидкиНаценки = Неопределено, Истина, ПоказыватьПроцентСкидкиНаценки);
	СоответствиеТиповЦен = Новый Соответствие;

	// сформируем и заполним таблицу цен
	Для Каждого СтрокаТипаЦен Из ТипыЦен Цикл
		НомерСоответствияТекущейКолонки = ТипыЦен.Индекс(СтрокаТипаЦен);
		СоответствиеТиповЦен.Вставить(СтрокаТипаЦен.ТипЦен, НомерСоответствияТекущейКолонки);

		Если ТаблицаЦен.Колонки.Найти("цена"+НомерСоответствияТекущейКолонки) = Неопределено Тогда
			ТаблицаЦен.Колонки.Добавить("цена"+НомерСоответствияТекущейКолонки, ПолучитьОписаниеТиповЧисла(15, 2), СокрЛП(СтрокаТипаЦен.ТипЦен), 10);
		КонецЕсли;
		Если ТаблицаЦен.Колонки.Найти("валюта"+НомерСоответствияТекущейКолонки) = Неопределено Тогда
			ТаблицаЦен.Колонки.Добавить("валюта"+НомерСоответствияТекущейКолонки, Новый ОписаниеТипов("СправочникСсылка.Валюты"), "валюта", 8);
		КонецЕсли;
		Если ТаблицаЦен.Колонки.Найти("единица"+НомерСоответствияТекущейКолонки) = Неопределено Тогда
			ТаблицаЦен.Колонки.Добавить("единица"+НомерСоответствияТекущейКолонки, Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"), "единица", 8);
		КонецЕсли;
		Если ТаблицаЦен.Колонки.Найти("процент"+НомерСоответствияТекущейКолонки) = Неопределено Тогда
			ТаблицаЦен.Колонки.Добавить("процент"+НомерСоответствияТекущейКолонки, ПолучитьОписаниеТиповЧисла(15, 2), "% скидки (наценки)", 8);
		КонецЕсли;
		Если ТаблицаЦен.Колонки.Найти("яштСкидка"+НомерСоответствияТекущейКолонки) = Неопределено Тогда
			ТаблицаЦен.Колонки.Добавить("яштСкидка"+НомерСоответствияТекущейКолонки, ПолучитьОписаниеТиповЧисла(15, 2), "% скидки/наценки (яшт)", 8);
		КонецЕсли;
		Если ТаблицаЦен.Колонки.Найти("наценкаОтЗакупочной"+НомерСоответствияТекущейКолонки) = Неопределено Тогда
			ТаблицаЦен.Колонки.Добавить("наценкаОтЗакупочной"+НомерСоответствияТекущейКолонки, ПолучитьОписаниеТиповЧисла(15, 2), "% от закупочной", 8);
		КонецЕсли;
		Если ТаблицаЦен.Колонки.Найти("пред_цена"+НомерСоответствияТекущейКолонки) = Неопределено Тогда
			ТаблицаЦен.Колонки.Добавить("пред_цена"+НомерСоответствияТекущейКолонки, ПолучитьОписаниеТиповЧисла(15, 2), "предыдущая цена", 8);
		КонецЕсли;
	КонецЦикла;

	Если НЕ ЗначениеНеЗаполнено(ПараметрОснование)
//	   И ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
	   И (ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") или (ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ОприходованиеТоваров"))) Тогда
	
		Если ЗначениеНеЗаполнено(ПараметрОснование.ТипЦен) Тогда
			СообщитьОбОшибке("В документе " + СокрЛП(ПараметрОснование) + " не установлен тип цен! Заполнение невозможно.");
			Отказ = Истина;
			Возврат;
		КонецЕсли;

		Если ((ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг"))) Тогда
			Если ЗначениеНеЗаполнено(ПараметрОснование.ТипЦен.ТипЦеныНоменклатуры) Тогда
				СообщитьОбОшибке("В документе "  + СокрЛП(ПараметрОснование));
				СообщитьОбОшибке("для типа цен " + СокрЛП(ПараметрОснование.ТипЦен) + " не установлен базовый тип цен! Заполнение невозможно.");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
	    КонецЕсли;
		ЗаполнитьТабличнуюЧастьПоПоступлениюНаОсновании(ПараметрОснование);
		
	ИначеЕсли НЕ ЗначениеНеЗаполнено(ПараметрОснование)  И (ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ЗаказПоставщику") или (ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.КорректировкаЗаказаПоставщику"))) Тогда
		 ЗаполнитьТабличнуюЧастьПоЗаказуИлиКорректировке(ПараметрОснование);
		
	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	яштФормаДокументаПриОткрытии(ЭтотОбъект, ЭтаФорма);
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// быть может, это ввод на основании
		Если ЗначениеНеЗаполнено(ПараметрОснование) Тогда
			// Заполнить реквизиты значениями по умолчанию.
			ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь);
			УстановитьНомерДокумента(ЭтотОбъект);
		КонецЕсли;

		НеПроводитьНулевыеЗначения = Истина;
	КонецЕсли;

	// Проверим корректность записанного документа, если он некорректен, исправим его
	Если ТипыЦен.Количество() = 0 И Товары.Количество() > 0 Тогда
		СообщитьОбОшибке("Документ " + СокрЛП(Ссылка) + " был записан некорректно! Информация о ценах очищена.");
		Товары.Очистить();
	КонецЕсли;

	// обновим список типов цен
	ЗаполнитьСписокТиповЦен();

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("ЕдиницаХранения");

	// Установить ограничение - изменять видимоть колонок для таличного поля 
	// "ТаблицаЦен".
	УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ТаблицаЦен.Колонки, СтруктураКолонок);

	ЗаполнитьТаблицуЦенФормы();

	ЭлементыФормы.ТаблицаЦен.СоздатьКолонки();

	Для Каждого СтрокаТипаЦен Из ТипыЦен Цикл
		й = ЭлементыФормы.ТаблицаЦен.Колонки.Найти("цена"+СоответствиеТиповЦен[СтрокаТипаЦен.ТипЦен]);
		Если й <> Неопределено Тогда
			й.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
		КонецЕсли;
	КонецЦикла;
	
	// Установим недостающие параметры
	УстановитьНедостающиеПараметры();

	ПолучитьСтруктуруПоложенийКолонок();
	ВидимостьКолонок();
	ДоступностьКолонок();

	// Заполнить подменю выбора печатных форм.
	СписокМакетов = ЭтотОбъект.ПолучитьСписокПечатныхФорм();
	УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати,
										   СписокМакетов,
										   Новый Действие("ДействияФормыДействиеВыбратьПечатнуюФормы"));

	УстановитьПодменюВыбораИзмененияПоТипуЦен(ЭлементыФормы.КоманднаяПанельТаблицыТиповЦен.Кнопки.ДействиеИзменить,
	                                          Новый Действие("КоманднаяПанельТаблицыТиповЦенДействиеИзменить"));

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	// Установить печатную форму по умолчанию.
	УстановитьКнопкуПечати(ЭтотОбъект.Метаданные().Имя, ЭтаФорма, СписокМакетов, мПечатнаяФормаПоУмолчанию);

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	Если НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьЦенообразование") Тогда
		
		ЭтаФорма.ТолькоПросмотр = Истина;
		
	КонецЕсли;


	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 

	
КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

// Процедура - обработчик события "ПриЗакрытии" формы
//
Процедура ПриЗакрытии()

	СохранитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьКод",                  ЭлементыФормы.ТаблицаЦен.Колонки.Код.Видимость);
	СохранитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьАртикул",              ЭлементыФормы.ТаблицаЦен.Колонки.Артикул.Видимость);
	СохранитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьЦену",                 ПоказыватьЦену);
	СохранитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьВалюту",               ПоказыватьВалюту);
	СохранитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьЕдиницуИзмерения",     ПоказыватьЕдиницуИзмерения);
	СохранитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьПроцентСкидкиНаценки", ПоказыватьПроцентСкидкиНаценки);

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	СписокДобавленныхТиповЦен = Новый СписокЗначений;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Если ЗначениеВыбора.Команда = "ИзменениеТиповЦенСкидок" Тогда

			ТипыЦен.Очистить();
			Для Каждого ЭлементСпискаТиповЦен Из ЗначениеВыбора.СписокТиповЦенСкидок Цикл
				СтрокаТиповЦен = ТипыЦен.Добавить();
				СтрокаТиповЦен.ТипЦен = ЭлементСпискаТиповЦен.Значение;
				Если СписокТиповЦен.НайтиПоЗначению(СтрокаТиповЦен.ТипЦен) = Неопределено Тогда
					СписокДобавленныхТиповЦен.Добавить(СтрокаТиповЦен.ТипЦен);
				КонецЕсли;
			КонецЦикла;

			// Обновим список типов цен
			ЗаполнитьСписокТиповЦен();

			// Установим кнопки подменю "Изменить"
			УстановитьПодменюВыбораИзмененияПоТипуЦен(ЭлементыФормы.КоманднаяПанельТаблицыТиповЦен.Кнопки.ДействиеИзменить,
			                                          Новый Действие("КоманднаяПанельТаблицыТиповЦенДействиеИзменить"));

		ИначеЕсли ЗначениеВыбора.Команда = "НастройкаПараметров" Тогда

			ДеревоКолонок = ЗначениеВыбора.ДеревоКолонок;
			Для Каждого СтрокаДерева Из ДеревоКолонок.Строки Цикл
				ЭтаФорма[СтрокаДерева.КолонкаИмя] = СтрокаДерева.Пометка;
			КонецЦикла;

		ИначеЕсли ЗначениеВыбора.Команда = "ЗаполнениеТабличнойЧасти"
		      ИЛИ ЗначениеВыбора.Команда = "ПодборВТабличнуюЧасть" Тогда

			ОбработкаПодбора("Товары",ЗначениеВыбора);

		КонецЕсли;
	КонецЕсли;

	// обновим состав колонок
	ОбновитьСоставКолонок();
	ПолучитьСтруктуруПоложенийКолонок();
	ВидимостьКолонок();
	ДоступностьКолонок();

	// Если надо, заполним строки по новым типам цен
	ЗаполнитьПоНовымТипамЦен(СписокДобавленныхТиповЦен);

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	// сохраним таблицу значений в табличную часть товаров
	Товары.Очистить();
	Для Каждого СтрокаТаблицыТиповЦен Из ТаблицаЦен Цикл
		Для Каждого СтрокаТипаЦен Из ТипыЦен Цикл
			НомерСоответствияТекущейКолонки = СоответствиеТиповЦен.Получить(СтрокаТипаЦен.ТипЦен);
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ИндексСтрокиТаблицыЦен     = ТаблицаЦен.Индекс(СтрокаТаблицыТиповЦен);
			НоваяСтрока.Номенклатура               = СтрокаТаблицыТиповЦен.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТаблицыТиповЦен.ХарактеристикаНоменклатуры;
			НоваяСтрока.ТипЦен                     = СтрокаТипаЦен.ТипЦен;
			НоваяСтрока.Цена                       = СтрокаТаблицыТиповЦен["цена"    + НомерСоответствияТекущейКолонки];
			НоваяСтрока.Валюта                     = СтрокаТаблицыТиповЦен["валюта"  + НомерСоответствияТекущейКолонки];
			НоваяСтрока.ЕдиницаИзмерения           = СтрокаТаблицыТиповЦен["единица" + НомерСоответствияТекущейКолонки];
			НоваяСтрока.ПроцентСкидкиНаценки       = СтрокаТаблицыТиповЦен["процент" + НомерСоответствияТекущейКолонки];
		КонецЦикла;
	КонецЦикла;
	
	//+++ 07.09.2017 - пока как рекоментация с 17-00 до 2х ночи можно менять цены...
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение тогда
		Если НЕ (ТипыЦен.Количество()=1 и ТипыЦен[0].ТипЦен.Код = "00001") тогда // 24.10.2018  исключение для Одной Закупочной цены
			ТекущаяДата1 = ОценкаПроизводительностиВызовСервераПолныеПрава.ДатаИВремяНаСервере(); 
			ТекущееВремя1 = ТекущаяДата1 - НачалоДня(ТекущаяДата1);
			Если ( ТекущееВремя1<16.5*3600 или ТекущееВремя1>18.34*3600 ) тогда
				//+++ 17.12.2018 у новых товаров не было цены?! 
				Если ЭтоНеНовыеТовары() тогда 
				Предупреждение("                        ВНИМАНИЕ!
					 	   | Проводить новые цены разрешено ТОЛЬКО с 16:30 до 18:20 !!!
						   | Расхождения цен у клиентов в 1С и на сайте Terminal.YST.ru
						   |   Требуют установку цен только в вечернее время...", 180);
			   РежимЗаписи = РежимЗаписиДокумента.Запись;
			   КонецЕсли;
		   КонецЕсли;	
	   КонецЕсли;	
	КонецЕсли;	
	
	яштСменаПользователя(ЭтотОбъект, ЭтаФорма, глТекущийПользователь);
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Так как изменение таблицы цен не влечет с собой изменение объекта,
	// то при изменении формы надо установить и признак модифицированности объекта
	Если Модифицированность и Не Модифицированность() Тогда

		// Установим признак модифицированности объекта
		Комментарий = Комментарий;

	КонецЕсли;

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "НачалоВыбора" поля ввода типа цен.
//
Процедура СписокТиповЦенНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ОткрытьФормуВыбораТипаЦен();

КонецПроцедуры // СписокТиповЦенНачалоВыбора()

// Процедура - обработчик события "Очистка" поля ввода типа цен.
//
Процедура СписокТиповЦенОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ТипыЦен.Очистить();
	СписокТиповЦен.Очистить();

	// Обновим список типов цен
	ЗаполнитьСписокТиповЦен();

	УстановитьПодменюВыбораИзмененияПоТипуЦен(ЭлементыФормы.КоманднаяПанельТаблицыТиповЦен.Кнопки.ДействиеИзменить,
	                                          Новый Действие("КоманднаяПанельТаблицыТиповЦенДействиеИзменить"));

	// обновим состав колонок
	ОбновитьСоставКолонок();
	ПолучитьСтруктуруПоложенийКолонок();
	ВидимостьКолонок();

КонецПроцедуры // СписокТиповЦенОчистка()

// Процедура - обработчик события "ПриАктивизацииЯчейки" таблицы ТаблицаЦен
//
Процедура ТаблицаЦенПриАктивизацииЯчейки(Элемент)

	Если Элемент.ТекущаяКолонка <> Неопределено
	   И ЭлементыФормы.ТаблицаЦен.ТекущиеДанные <> Неопределено Тогда

		Если (Лев(Элемент.ТекущаяКолонка.Имя, 4) = "един")
		 Или (Элемент.ТекущаяКолонка.Имя = "ХарактеристикаНоменклатуры") Тогда
			ЭлементыФормы.ТаблицаЦен.Колонки[Элемент.ТекущаяКолонка.Имя].ЭлементУправления.ВыборПоВладельцу = ЭлементыФормы.ТаблицаЦен.ТекущиеДанные.Номенклатура;
		КонецЕсли;

		Если (Лев(Элемент.ТекущаяКолонка.Имя, 7) = "единица")
		 Или (Лев(Элемент.ТекущаяКолонка.Имя, 6) = "валюта")
		 Или Элемент.ТекущаяКолонка = ЭлементыФормы.ТаблицаЦен.Колонки["Номенклатура"] Тогда
			ЭлементыФормы.ТаблицаЦен.Колонки[Элемент.ТекущаяКолонка.Имя].ЭлементУправления.КнопкаОчистки   = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ТаблицаЦенПриАктивизацииЯчейки()

// Процедура - обработчик события "ПриВыводеСтроки" таблицы ТаблицаЦен
//
Процедура ТаблицаЦенПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.ТаблицаЦен.Колонки.Найти("ИндексСтрокиТаблицыЦен") <> Неопределено
	   И ЭлементыФормы.ТаблицаЦен.Колонки.ИндексСтрокиТаблицыЦен.Видимость Тогда
		ОформлениеСтроки.Ячейки.ИндексСтрокиТаблицыЦен.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ИндексСтрокиТаблицыЦен.Текст = Формат(ТаблицаЦен.Индекс(ДанныеСтроки) + 1,"ЧРГ=");
	КонецЕсли;

	Если ЭлементыФормы.ТаблицаЦен.Колонки.Найти("Код") <> Неопределено
	   И ЭлементыФормы.ТаблицаЦен.Колонки.Найти("Артикул") <> Неопределено Тогда
		ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	КонецЕсли;

	// Поставим автоотметку незаполненного.
	ЭтоНеУслуга = Не ДанныеСтроки.Номенклатура.Услуга;
	Для каждого СтрокаТипаЦен Из ТипыЦен Цикл

		НомерСоответствияТекущейКолонки = СоответствиеТиповЦен.Получить(СтрокаТипаЦен.ТипЦен);
		КолонкаЕдиницыТипаЦен = "единица" + НомерСоответствияТекущейКолонки;
		
		Если ЭлементыФормы.ТаблицаЦен.Колонки.Найти(КолонкаЕдиницыТипаЦен) <> Неопределено
		   И ЭлементыФормы.ТаблицаЦен.Колонки[КолонкаЕдиницыТипаЦен].Видимость Тогда
			ЯчейкаЕдиницы = ОформлениеСтроки.Ячейки[КолонкаЕдиницыТипаЦен];
			Если ЯчейкаЕдиницы <> Неопределено
			   И ЯчейкаЕдиницы.Видимость Тогда

				ЯчейкаЕдиницы.ОтметкаНезаполненного = ЭтоНеУслуга 
													 И ЗначениеНеЗаполнено(ДанныеСтроки[КолонкаЕдиницыТипаЦен]);										
			КонецЕсли;

		КонецЕсли;
		
		Если (Константы.ИспользоватьМеханизмЦенообразования.Получить()) Тогда 
			ЗначениеЦены = ДанныеСтроки["цена"+НомерСоответствияТекущейКолонки];
			Если (ИзмененоВТеченииПериода(ДанныеСтроки.Номенклатура,СтрокаТипаЦен, ЗначениеЦены)) Тогда 
				ЯчейкаЦены = ОформлениеСтроки.Ячейки["цена"+НомерСоответствияТекущейКолонки];
				ЯчейкаЦены.ЦветТекста = новый Цвет(255,0,0);
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
	//***
	Если НЕ ТипыЦен.Найти(Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00001")) = Неопределено Тогда  //закупочная
		НомерЗакупочнойЦены = СоответствиеТиповЦен.Получить(Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00001"));
		ЗначениеЗакупочнойЦены = ДанныеСтроки["цена"+НомерЗакупочнойЦены];
		ВсегоТиповЦен = ТипыЦен.Количество()-1;
		Пока ВсегоТиповЦен > 0 Цикл
			Если НЕ ЗначениеЗакупочнойЦены = 0 Тогда 
				НомерКолонки =  СоответствиеТиповЦен.Получить(ТипыЦен.Получить(ВсегоТиповЦен).ТипЦен);
				ЦенаПродажи = ДанныеСтроки["цена"+НомерКолонки];
				ДанныеСтроки["наценкаОтЗакупочной"+НомерКолонки] = ЦенаПродажи / ЗначениеЗакупочнойЦены * 100 - 100;
			КонецЕсли;
			ВсегоТиповЦен = ВсегоТиповЦен - 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаЦенПриВыводеСтроки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Настройка" командной панели формы
//
Процедура ДействияФормыНастройка(Кнопка)

	ФормаНастройки = Обработки.ФормированиеЦен.Создать().ПолучитьФорму("ФормаНастройкиКолонок", ЭтаФорма);
	ФормаНастройки.ЗаполнитьДерево();

	ФормаНастройки.ДобавитьВДеревоСтроку("Показывать цену",                   "ПоказыватьЦену",                 ПоказыватьЦену);
	ФормаНастройки.ДобавитьВДеревоСтроку("Показывать валюту",                 "ПоказыватьВалюту",               ПоказыватьВалюту);
	ФормаНастройки.ДобавитьВДеревоСтроку("Показывать единицу измерения",      "ПоказыватьЕдиницуИзмерения",     ПоказыватьЕдиницуИзмерения);
	ФормаНастройки.ДобавитьВДеревоСтроку("Показывать процент скидки/наценки", "ПоказыватьПроцентСкидкиНаценки", ПоказыватьПроцентСкидкиНаценки);

	ФормаНастройки.ОткрытьМодально();

КонецПроцедуры // ДействияФормыНастройка()

// Процедура вызывает сервисный механизм для заполнения табличной части
// Товары
//
// Параметры:
//  Кнопка - кнопка командной панели табличной части, которую
//           нажал пользователь
//
Процедура КоманднаяПанельТаблицыТиповЦенДействиеЗаполнитьПоЦенамНоменклатуры(Кнопка)

	ЗаполнитьТовары(Истина, Ложь, Ложь);

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенДействиеЗаполнитьПоЦенамНоменклатуры()

// Процедура вызывает сервисный механизм для заполнения табличной части
// Товары
//
// Параметры:
//  Кнопка - кнопка командной панели табличной части, которую
//           нажал пользователь
//
Процедура КоманднаяПанельТаблицыТиповЦенДействиеДобавитьПоЦенамНоменклатуры(Кнопка)

	ЗаполнитьТовары(Ложь, Ложь, Ложь);

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенДействиеДобавитьПоЦенамНоменклатуры()

// Процедура вызывает сервисный механизм для обновления табличной части
// Товары
//
// Параметры:
//  Кнопка - кнопка командной панели табличной части, которую
//           нажал пользователь
//
Процедура КоманднаяПанельТаблицыТиповЦенОбновитьПоЦенамНоменклатуры(Кнопка)

	ЗаполнитьТовары(Ложь, Истина, Ложь);

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенОбновитьПоЦенамНоменклатуры()

// Процедура вызывает сервисный механизм для заполнения табличной части
// Товары
//
// Параметры:
//  Кнопка - кнопка командной панели табличной части, которую
//           нажал пользователь
//
Процедура КоманднаяПанельТаблицыТиповЦенДействиеЗаполнитьПоЦенамНоменклатурыКонтрагентов(Кнопка)

	ЗаполнитьТовары(Истина, Ложь, Истина);

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенДействиеЗаполнитьПоЦенамНоменклатурыКонтрагентов()

// Процедура вызывает сервисный механизм для заполнения табличной части
// Товары
//
// Параметры:
//  Кнопка - кнопка командной панели табличной части, которую
//           нажал пользователь
//
Процедура КоманднаяПанельТаблицыТиповЦенДействиеДобавитьПоЦенамНоменклатурыКонтрагентов(Кнопка)

	ЗаполнитьТовары(Ложь, Ложь, Истина);

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенДействиеДобавитьПоЦенамНоменклатурыКонтрагентов()

// Процедура вызывает сервисный механизм для обновления табличной части
// Товары
//
// Параметры:
//  Кнопка - кнопка командной панели табличной части, которую
//           нажал пользователь
//
Процедура КоманднаяПанельТаблицыТиповЦенОбновитьПоЦенамНоменклатурыКонтрагентов(Кнопка)

	ЗаполнитьТовары(Ложь, Истина, Истина);

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенОбновитьПоЦенамНоменклатурыКонтрагентов()

// Процедура вызывает сервисный механизм для заполнения табличной части
// Товары
//
// Параметры:
//  Кнопка - кнопка командной панели табличной части, которую
//           нажал пользователь
//
Процедура КоманднаяПанельТаблицыТиповЦенЗаполнитьПоПоступлению(Кнопка)
	
	// Если заполняем, то почистим ТЧ
	Если ТаблицаЦен.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		ТаблицаЦен.Очистить();
	КонецЕсли;
	
	// Теперь нужно выбрать документ, по которому будем заполнять
	ФормаВыбора = Документы.ПоступлениеТоваровУслуг.ПолучитьФормуВыбора();
	ФормаВыбора.Заголовок = "Выберите документ ""Поступление товаров и услуг"" для заполнения документа установки цен";
	ФормаВыбора.РежимВыбора = Истина;

	ДокументПоступление = ФормаВыбора.ОткрытьМодально();

	Если ЗначениеНеЗаполнено(ДокументПоступление) Тогда 
		Возврат; // ничего не выбрали.
	КонецЕсли;

	ЗаполнитьТабличнуюЧастьПоПоступлению(ДокументПоступление);

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенЗаполнитьПоПоступлению()

// Процедура вызывает сервисный механизм для заполнения табличной части
// Товары
//
// Параметры:
//  Кнопка - кнопка командной панели табличной части, которую
//           нажал пользователь
//
Процедура КоманднаяПанельТаблицыТиповЦенДобавитьПоПоступлению(Кнопка)

	// Теперь нужно выбрать документ, по которому будем заполнять
	ФормаВыбора = Документы.ПоступлениеТоваровУслуг.ПолучитьФормуВыбора();
	ФормаВыбора.Заголовок = "Выберите документ ""Поступление товаров и услуг"" для заполнения документа установки цен";
	ФормаВыбора.РежимВыбора = Истина;

	ДокументПоступление = ФормаВыбора.ОткрытьМодально();

	Если ЗначениеНеЗаполнено(ДокументПоступление) Тогда 
		Возврат; // ничего не выбрали.
	КонецЕсли;

	ЗаполнитьТабличнуюЧастьПоПоступлению(ДокументПоступление, Ложь);

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенДобавитьПоПоступлению()

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	НапечататьДокументПоУмолчанию(ЭтотОбъект, глТекущийПользователь, мПечатнаяФормаПоУмолчанию, ЭтаФорма);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
//
Процедура ДействияФормыДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = Кнопка.Текст;
		СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		СписокМакетов = ПолучитьСписокПечатныхФорм();
		СтрокаМакетаВСписке = СписокМакетов.НайтиПоЗначению(Кнопка.Имя);
		Если СтрокаМакетаВСписке <> Неопределено Тогда
			Печать(СтрокаМакетаВСписке.Значение);
			СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
			СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;			
			
		Иначе
			СсылкаВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Кнопка.Имя, "_", "-")));
			Печать(СсылкаВнешнейФормы);
			СтруктураМакета.Макет = СсылкаВнешнейФормы;
			СтруктураМакета.ПредставлениеМакета = Кнопка.Текст;
		КонецЕсли;		
		
		мПечатнаяФормаПоУмолчанию = СтруктураМакета.Макет;
		СохранитьТекущуюКнопкуПечати(ЭтотОбъект.Метаданные().Имя, СтруктураМакета);
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывает печать прайса
//
Процедура КоманднаяПанельТаблицыТиповЦенПрайс(Кнопка)

	Если ЭтоНовый()
	 Или НЕ Проведен Тогда
		Предупреждение("Прайс можно распечатать только после проведения документа");
		Возврат;
	КонецЕсли;

	Если Не ПроверитьМодифицированностьВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	ФормаПрайса = Обработки.ПечатьПрайсЛиста.ПолучитьФорму("ФормаЗаполнения");

	Если ТаблицаЦен.Количество() > 0 Тогда
		СписокНоменклатуры = Новый СписокЗначений;
		СписокНоменклатуры.ЗагрузитьЗначения(ТаблицаЦен.ВыгрузитьКолонку("Номенклатура"));
		ФормаПрайса.мСписокНоменклатуры = СписокНоменклатуры;
	КонецЕсли;
	
	Если СписокТиповЦен.Количество() > 0 Тогда
		ФормаПрайса.мСписокТиповЦен = СписокТиповЦен;
	КонецЕсли;

	ФормаПрайса.Открыть();
	ФормаПрайса.ОбновитьОтчет();

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенОбновитьПоЦенамКомпании()

// Процедура вызывает сервисный механизм изменения цен для заполнения табличной части
// Товары
//
// Параметры:
//  Кнопка - кнопка командной панели табличной части, которую
//           нажал пользователь
//
Процедура КоманднаяПанельТаблицыТиповЦенДействиеИзменить(Кнопка)

	Если Кнопка <> Неопределено Тогда
		Если НЕ ПроверитьМодифицированностьФормы("Перед вызовом обработки ""Формирование цен""") Тогда
			Возврат;
		КонецЕсли;

		НомерСоответствияТекущейКолонки = Число(СтрЗаменить(Кнопка.Имя, "Кнопка_", ""));
		Для каждого СтрокаТипаЦен Из ТипыЦен Цикл
			Если СоответствиеТиповЦен.Получить(СтрокаТипаЦен.ТипЦен) = НомерСоответствияТекущейКолонки Тогда
				ТекСтрокаТипаЦен = СтрокаТипаЦен;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		ТипЦен = ТекСтрокаТипаЦен.ТипЦен;
		Если Не ЗначениеНеЗаполнено(ТипЦен) Тогда
			ФормированиеЦен = Обработки.ФормированиеЦен.Создать();

			// Установим реквизиты обработки
			ФормированиеЦен.ДатаЦенСкидок = Дата;

			ФормаФормированиеЦен = ФормированиеЦен.ПолучитьФорму();

			//Установим реквизиты формы
			ФормаФормированиеЦен.ТипЦен               = ТипЦен;
			ФормаФормированиеЦен.ДокументОбъект       = ЭтотОбъект;
			ФормаФормированиеЦен.ФормаДокументОбъекта = ЭтаФорма;

			Если НЕ ЗначениеНеЗаполнено(ТипЦен.БазовыйТипЦен) Тогда

				ВалютаЦены = ТипЦен.БазовыйТипЦен.ВалютаЦены;

				СтруктураВалюты = ПолучитьКурсВалюты(ВалютаЦены, Дата);
				КурсВалюты      = СтруктураВалюты.Курс;
				КратностьВалюты = СтруктураВалюты.Кратность;

				// Надо будет получать цену. Сформируем запрос по ценам
				СтруктураЗначений = Новый Структура;
				СтруктураЗначений.Вставить("НовыйТипЦен", ТипЦен.БазовыйТипЦен);
				СтруктураЗначений.Вставить("НовыйВалютаДокумента", ВалютаЦены);
				СтруктураЗначений.Вставить("НовыйКурсДокумента", КурсВалюты);
				СтруктураЗначений.Вставить("НовыйКратностьДокумента", КратностьВалюты);

				СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

				// Получить нужные цены запросом
				РезультатЗапросаЦен = СформироватьЗапросПоЦенам(СтруктураЗначений, 
				                                                СпособЗаполненияЦен, 
				                                                ТаблицаЦен.ВыгрузитьКолонку("Номенклатура"),
				                                                Дата, Неопределено);

				ВыборкаИзРезультатаЗапроса = РезультатЗапросаЦен.Выбрать();

				СтруктураПоиска = Новый Структура(); // стркутура для поиска в результате запроса

			КонецЕсли;
			
			//Перенесем табличную часть
			Для Каждого СтрокаТабличнойЧасти Из ТаблицаЦен Цикл
				НоваяСтрока = ФормированиеЦен.Товары.Добавить();
				НоваяСтрока.Пометка                    = Истина;
				НоваяСтрока.Номенклатура               = СтрокаТабличнойЧасти.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры;
				НоваяСтрока.Валюта                     = СтрокаТабличнойЧасти["валюта"  + НомерСоответствияТекущейКолонки];
				НоваяСтрока.ЕдиницаИзмерения           = СтрокаТабличнойЧасти["единица" + НомерСоответствияТекущейКолонки];
				НоваяСтрока.ПроцентСкидкиНаценки       = СтрокаТабличнойЧасти["процент" + НомерСоответствияТекущейКолонки];
				НоваяСтрока.Цена                       = СтрокаТабличнойЧасти["цена"    + НомерСоответствияТекущейКолонки];
				Если НЕ ЗначениеНеЗаполнено(ТипЦен.БазовыйТипЦен) Тогда

					СтруктураПоиска.Вставить("Номенклатура"              , СтрокаТабличнойЧасти.Номенклатура);
					СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);

					ВыборкаИзРезультатаЗапроса.Сбросить(); 
					Если ВыборкаИзРезультатаЗапроса.НайтиСледующий(СтруктураПоиска) Тогда // Нашли запись

						Если ЗначениеНеЗаполнено(ВыборкаИзРезультатаЗапроса.Цена) Тогда
							НоваяСтрока.ЦенаБазовая = 0;
						Иначе
							// Присваиваем значение цены и единицы цены
							Если СтруктураЗначений.НовыйТипЦен.Рассчитывается Тогда

								// Наценим и округлим базовую цену
								Цена = ВыборкаИзРезультатаЗапроса.Цена * (1 + ВыборкаИзРезультатаЗапроса.ПроцентСкидкиНаценки / 100);
								СтруктураВалюты = ПолучитьКурсВалюты(СтруктураЗначений.НовыйТипЦен.ВалютаЦены, ДокументОбъект.Дата);
								ПересчитатьИзВалютыВВалюту(Цена, 
															ВыборкаИзРезультатаЗапроса.ВалютаЦены,
															СтруктураЗначений.НовыйТипЦен.ВалютаЦены,
															ВыборкаИзРезультатаЗапроса.КурсВалютыЦены,
															СтруктураВалюты.Курс,
															ВыборкаИзРезультатаЗапроса.КратностьВалютыЦены,
															СтруктураВалюты.Кратность);
								НоваяСтрока.ЦенаБазовая = ОкруглитьЦену(Цена,
																			СтруктураЗначений.НовыйТипЦен.ПорядокОкругления,
																			СтруктураЗначений.НовыйТипЦен.ОкруглятьВБольшуюСторону);

							Иначе
								НоваяСтрока.ЦенаБазовая = ВыборкаИзРезультатаЗапроса.Цена;
							КонецЕсли;

							// Пересчитываем цену в ваюту документа
							Если ВыборкаИзРезультатаЗапроса.ВалютаЦены <> НоваяСтрока.Валюта Тогда

								НоваяСтрока.ЦенаБазовая = ПересчитатьЦенуПриИзмененииВалюты(НоваяСтрока.ЦенаБазовая, ВыборкаИзРезультатаЗапроса.ВалютаЦены, НоваяСтрока.Валюта, , , Дата);

							КонецЕсли;

						КонецЕсли;

					КонецЕсли;

				КонецЕсли;
			КонецЦикла;

			// Открываем форму обработки
			ФормаФормированиеЦен.Открыть();
						
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенДействиеИзменить()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
//  Кнопка - кнопка командной панели табличной части, которую
//           нажал пользователь
//
Процедура КоманднаяПанельТаблицыТиповЦенПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенПодбор()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ ЦЕН

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры таблицы цен.
//
Процедура ТаблицаЦенНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ТаблицаЦен.ТекущиеДанные;

	ПриИзмененииНоменклатуры(СтрокаТабличнойЧасти);

КонецПроцедуры // ТаблицаЦенНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры таблицы цен.
//
Процедура ТаблицаЦенХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ТаблицаЦен.ТекущиеДанные;

	ПриИзмененииХарактеристикиНоменклатуры(СтрокаТабличнойЧасти);

КонецПроцедуры // ТаблицаЦенНоменклатураПриИзменении()

// Обработчик внешнего события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	Если глТорговоеОборудование <> Неопределено Тогда
		Если Событие = "BarCodeValue" Тогда

			Команда         = "ПодборВТабличнуюЧасть";
			ИмяТабличнойЧасти = "Товары";

			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("Команда"              , Команда);
			СтруктураПараметров.Вставить("ИмяТабличнойЧасти"    , ИмяТабличнойЧасти);

			глТорговоеОборудование.ОбработатьВнешнееСобытиеОтСканераДляФормы(ЭтаФорма, ЭтотОбъект, СтруктураПараметров, Данные);

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ВнешнееСобытие()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "ТаблицаЦен".
//
Процедура ТаблицаЦенПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "");
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "ТаблицаЦен".
//
Процедура ТаблицаЦенПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПеретаскивание()

Процедура ТаблицаЦенВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура КоманднаяПанельТаблицыТиповЦенИзменитьПоАлгоритму(Кнопка)
	// Вставить содержимое обработчика.
	Форма = ПолучитьФорму("ФормаВыбораПринадлежности");
	Форма.СписокНоменклатуры = Товары.Выгрузить();
	Форма.СписокЦен = СписокТиповЦен;
	Результат = Форма.ОткрытьМодально();
	
	Если (Результат<>Неопределено) Тогда 
		// Обработка результата
		ТаблицаЦен.Очистить();
		Товары.Очистить();
		Для Каждого Стр из Результат Цикл
			ДобСтр 						= Товары.Добавить();
			ДобСтр.Валюта 				= Стр.Валюта;
			ДобСтр.ЕдиницаИзмерения 	= Стр.ЕдиницаИзмерения;
			ДобСтр.ИндексСтрокиТаблицыЦен = Стр.ИндексСтрокиТаблицыЦен;
			ДобСтр.Номенклатура 		= Стр.Номенклатура;
			ДобСтр.ПроцентСкидкиНаценки = Стр.ПроцентСкидкиНаценки;
			ДобСтр.ТипЦен 				= Стр.ТипЦен;
			ДобСтр.ХарактеристикаНоменклатуры = Стр.ХарактеристикаНоменклатуры;
			ДобСтр.Цена 				= Стр.Цена;
		КонецЦикла;
		ЗаполнитьТаблицуЦенФормы();
	КонецЕсли;
	
КонецПроцедуры

Функция ИзмененоВТеченииПериода(Номенклатура,СтрокаТипаЦен, Цена)
	
	Запрос = Новый ЗАпрос;
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	Запрос.УстановитьПараметр("ТипЦен",СтрокаТипаЦен.ТипЦен);
	Запрос.УстановитьПараметр("Цена",Цена);
	Запрос.УстановитьПараметр("ДатаНач",НачалоМесяца(ЭтотОбъект.Дата-Константы.ВеличинаПодсчетаПериодаВДокументеЦены.Получить()*86400));
	Запрос.УстановитьПараметр("ДатаКон",КонецМесяца(ЭтотОбъект.Дата));
	Запрос.Текст = "
	|Выбрать *
	| Из РегистрСведений.ЦеныНоменклатуры 
	|Где Номенклатура = &Номенклатура И ТипЦен = &ТипЦен и Цена<>&Цена и Регистратор.Дата Между &ДатаНач и &Датакон";
	
	Выб = Запрос.Выполнить().Выбрать();
	
	Если Выб.Следующий() Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

Процедура ПриЗаписи(Отказ)
	Если не РольДоступна("ПолныеПрава") тогда
		НГЛитые=справочники.НоменклатурныеГруппы.НайтиПоКоду("00026");
		НГШтамп=справочники.НоменклатурныеГруппы.НайтиПоКоду("00049");
		
		СмирновА = справочники.Пользователи.НайтиПоКоду("Смирнов А"); //+++ 02.08.2017 - можно устанавливать цены на диски
		Для каждого стр из товары цикл
			НГ=стр.Номенклатура.НоменклатурнаяГруппа;
			Если НГ = НГЛитые или
				НГ = НГШтамп тогда
				Если НЕ (глТекущийПользователь=СмирновА 
					     или глТекущийПользователь=НГЛитые.Ответственный 
						 или глТекущийПользователь=НГШтамп.Ответственный) тогда
					Предупреждение("Ответственный за группу "+НГ+" - "+НГ.Ответственный+"."+Символы.ПС+
					"Редактирование цен запрещено.", 30); 
					Отказ=истина;
					прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ТаблицаЦенЦенаПриИзменении(Элемент)

	Для Каждого СтрокаТипаЦен Из ТипыЦен Цикл
		цена = ЭлементыФормы.ТаблицаЦен.ТекущаяСтрока["цена"+СоответствиеТиповЦен[СтрокаТипаЦен.ТипЦен]];
		пред_цена = ЭлементыФормы.ТаблицаЦен.ТекущаяСтрока["пред_цена"+СоответствиеТиповЦен[СтрокаТипаЦен.ТипЦен]];
		Если пред_цена<>0 тогда
			ЭлементыФормы.ТаблицаЦен.ТекущаяСтрока["яштСкидка"+СоответствиеТиповЦен[СтрокаТипаЦен.ТипЦен]] = Окр((цена/пред_цена - 1)*100 ,2);
		иначе
			ЭлементыФормы.ТаблицаЦен.ТекущаяСтрока["яштСкидка"+СоответствиеТиповЦен[СтрокаТипаЦен.ТипЦен]] = 0;
		конецесли
	КонецЦикла;
	
КонецПроцедуры // ТаблицаЦенНоменклатураПриИзменении()
    

Процедура ТаблицаЦенЯштСкидкаПриИзменении(Элемент)

	Для Каждого СтрокаТипаЦен Из ТипыЦен Цикл
		скидка = ЭлементыФормы.ТаблицаЦен.ТекущаяСтрока["яштСкидка"+СоответствиеТиповЦен[СтрокаТипаЦен.ТипЦен]];
		пред_цена = ЭлементыФормы.ТаблицаЦен.ТекущаяСтрока["пред_цена"+СоответствиеТиповЦен[СтрокаТипаЦен.ТипЦен]];
		ЭлементыФормы.ТаблицаЦен.ТекущаяСтрока["цена"+СоответствиеТиповЦен[СтрокаТипаЦен.ТипЦен]] = Окр((скидка+100)*пред_цена/100 ,2);		
	КонецЦикла;

КонецПроцедуры // ТаблицаЦенЯштСкидкаПриИзменении()


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары = ЭлементыФормы.ТаблицаЦен.Колонки;
