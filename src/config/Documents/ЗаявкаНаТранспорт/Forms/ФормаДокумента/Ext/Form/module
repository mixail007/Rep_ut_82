
Процедура ДействияФормыДействие6(Кнопка)
	Если ЭтаФорма.Модифицированность тогда
		Предупреждение("Перед установкой категорий - документ будет перезаписан!", 5);
		ЭтаФорма.ЗаписатьВФорме();
	КонецЕсли;	
				
	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);//монопольно!
	
	ЭтаФорма.ДокументОбъект.Прочитать();  //перечитать данные

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ЭтоНовый() Тогда
		Статус = Перечисления.СтатусыЗаявокНаТранспорт.Подготовлен;
	КонецЕсли;
	
	Подразделение = ?(ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь.ОсновноеПодразделение),
	                    ПараметрыСеанса.ТекущийПользователь.ОсновноеПодразделение,
						Справочники.Подразделения.НайтиПоКоду("00005"));
КонецПроцедуры

Процедура ПриОткрытии()		
	
	Если ЭтоНовый() Тогда
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			
			Запрос = Новый Запрос;
			запрос.УстановитьПараметр("Контр",Основание.Контрагент);
			запрос.УстановитьПараметр("Адрес",Перечисления.ТипыКонтактнойИнформации.Адрес);
			запрос.УстановитьПараметр("Факт",Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
			Запрос.Текст = "ВЫБРАТЬ
			|	КонтактнаяИнформация.Представление
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Объект = &Контр
			|	И КонтактнаяИнформация.Вид = &Факт
			|	И КонтактнаяИнформация.Тип = &Адрес";
			Рез = Запрос.Выполнить().Выгрузить();
			Для каждого стр из Рез Цикл
				Отправитель = стр.Представление;
			КонецЦикла;
			
		иначе
			
			Отправитель = "150044, Ярославская обл, Ярославль г, Базовая ул, дом № 3, стр.2";
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
	Если РольДоступна("Логисты") или РольДоступна("ПравоЗавершенияРаботыПользователей") тогда
		ЭлементыФормы.ДействияФормы.Кнопки.НаТендер.Доступность = истина;
		ЭлементыФормы.Статус.Доступность = истина;
	КонецЕсли;	
			
КонецПроцедуры

Процедура ПолеВвода3ПриИзменении(Элемент)
    Маршрут = Отправитель;
	Для каждого стр из Точки Цикл
		Маршрут = Маршрут + " >>> " + стр.ТочкаМаршрута;
	КонецЦикла;
	Маршрут = Маршрут + " >>> " + Адрес;
	Направление = Маршрут;
КонецПроцедуры

Процедура ТабличноеПоле1ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Обратка Тогда
		Маршрут = Отправитель;
	    Для каждого стр из Точки Цикл
		    Маршрут = Маршрут + " >>> " + стр.ТочкаМаршрута;
	    КонецЦикла;
	    Направление = Маршрут;
	иначе
	    Маршрут = "";
	    Для каждого стр из Точки Цикл
		    Маршрут = Маршрут  + стр.ТочкаМаршрута + " >>> ";
	    КонецЦикла;
	    Направление = Маршрут;
	КонецЕсли;
КонецПроцедуры

Процедура ПолеВвода4ПриИзменении(Элемент)
	//Запрос = Новый Запрос;
	//запрос.УстановитьПараметр("Контр",Контрагент);
	//запрос.УстановитьПараметр("Адрес",Перечисления.ТипыКонтактнойИнформации.Адрес);
	//Запрос.Текст = "ВЫБРАТЬ
	//			   |	КонтактнаяИнформация.Представление
	//			   |ИЗ
	//			   |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	//			   |ГДЕ
	//			   |	КонтактнаяИнформация.Объект = &Контр
	//			   |	И КонтактнаяИнформация.Тип = &Адрес";
	//Рез = Запрос.Выполнить().Выгрузить();
	//Для каждого стр из Рез Цикл
	//	ЭлементыФормы.ПолеВвода3.СписокВыбора.Добавить(стр.Представление);
	//КонецЦикла;

	//+++ 19.03.2018
	Если (Статус = перечисления.СтатусыЗаявокНаТранспорт.НаТендере
		 или Статус = перечисления.СтатусыЗаявокНаТранспорт.ЕстьОтвет )
			и НЕ Контрагент.Пустая() тогда
		Статус = перечисления.СтатусыЗаявокНаТранспорт.ПеревозчикВыбран;
		//отправить в logistic подтверждение заявки
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеревозчикПриИзменении(Элемент)
	Если Обратка Тогда
	    Маршрут = Отправитель;
	    Для каждого стр из Точки Цикл
		    Маршрут = Маршрут + " >>> " + стр.ТочкаМаршрута;
	    КонецЦикла;
	    Направление = Маршрут;
	Иначе
		Маршрут = "";
	    Для каждого стр из Точки Цикл
		    Маршрут = Маршрут  + стр.ТочкаМаршрута + " >>> ";
	    КонецЦикла;
	    Направление = Маршрут;
	КонецЕсли;
КонецПроцедуры

Процедура ТабличноеПоле1КонтрагентПриИзменении(Элемент)
	КонецПроцедуры

Процедура ТабличноеПоле1ТочкаМаршрутаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элемент.СписокВыбора.очистить();
	Запрос = Новый Запрос;
	запрос.УстановитьПараметр("Контр",ЭлементыФормы.Точки.ТекущиеДанные.Контрагент);
	запрос.УстановитьПараметр("Адрес",Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтактнаяИнформация.Представление
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Объект = &Контр
	               |	И КонтактнаяИнформация.Тип = &Адрес";
	Рез = Запрос.Выполнить().Выгрузить();
	Для каждого стр из Рез Цикл
		Элемент.СписокВыбора.Добавить(стр.Представление);
    КонецЦикла;

КонецПроцедуры

Процедура ПолеВвода1ПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Водитель) тогда
		Комментарий = Комментарий + "   тел.водителя: "+ получитьТелефоны(Водитель);
		ТелефонВодителя = получитьТелефоны(Водитель);
		АвтомобильГосНомерАвтомобиля = ПолучитьКонтактнуюИнформацию(Водитель, "Другое");
		ГосНомер = ПолучитьКонтактнуюИнформацию(Водитель, "Другое");
		Комментарий = Комментарий +"
		|"+АвтомобильГосНомерАвтомобиля;   //автомобиль марка + госномер	
	КонецЕсли;

КонецПроцедуры

функция получитьТелефоны(ВодительСсылка)
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
|	КонтактнаяИнформация.Представление
|ИЗ
|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
|ГДЕ
|	КонтактнаяИнформация.Объект = &Объект
|	И КонтактнаяИнформация.Тип = &Тип";
Запрос.УстановитьПараметр("Объект", ВодительСсылка);
Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Телефон);

Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();
 рез = "";
Пока Выборка.Следующий() Цикл
	Если СокрЛП(Выборка.Представление)<>"" тогда
		рез = рез+СокрЛП(Выборка.Представление)+"; ";
	КонецЕсли;	
КонецЦикла;

возврат рез;
	
КонецФункции

Функция ПолучитьКонтактнуюИнформацию(об1, тип="Телефон")
	
	Если ТипЗнч(Об1)=Тип("Строка") Тогда
		возврат "";
	КонецЕсли;	
	
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	КонтактнаяИнформация.Представление,
               |	КонтактнаяИнформация.Вид
               |ИЗ
               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
               |ГДЕ
               |	КонтактнаяИнформация.Объект = &Объект
               |	И КонтактнаяИнформация.Тип = &Тип";

Запрос.УстановитьПараметр("Объект", Об1);
Если тип="Телефон" Тогда
	Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Телефон);
	Тип1="Тел: ";
иначеЕсли тип="Другое" Тогда
	Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Другое);
	Тип1="Доп.инфо: ";
иначеЕсли найти(тип,"Факт")>0 тогда
	Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.Текст = Запрос.Текст +" И КонтактнаяИнформация.Вид = &Вид";
	Запрос.УстановитьПараметр("Вид", справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	Тип1="Факт.адрес: ";
иначеЕсли найти(тип,"Юр")>0 тогда
	Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.Текст = Запрос.Текст +" И КонтактнаяИнформация.Вид = &Вид";
	Запрос.УстановитьПараметр("Вид", справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	Тип1="Юр.адрес: ";
КонецЕсли;
	
Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();
рез = "";
Если Выборка.Следующий() Тогда
	Если Строка(Выборка.Вид) = "Автомобиль" Тогда
		Тип1="Автомобиль: ";
	КонецЕсли;	
рез = рез + Тип1 +выборка.Представление;
КонецЕсли;

ПОКА Выборка.Следующий() ЦИКЛ
рез = рез + ", "+выборка.Представление;
КонецЦикла;

возврат рез;

КонецФункции

Процедура ДатаДоставкиСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Число(Формат(ТекущаяДата(),"ДФ=hh")) >= 15 и НачалоДня(ВыбранноеЗначение-24*60*60) = НачалоДня(ТекущаяДата()) Тогда
		СтандартнаяОбработка = Ложь;
		Сообщить("После 15.00 нельзя ставить дату поика машины на завтрашний день!!!");
	КонецЕсли;
КонецПроцедуры

Процедура ДатаДоставкиПоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Число(Формат(ТекущаяДата(),"ДФ=hh")) >= 15 и НачалоДня(ВыбранноеЗначение-24*60*60) = НачалоДня(ТекущаяДата()) Тогда
		СтандартнаяОбработка = Ложь;
		Сообщить("После 15.00 нельзя ставить дату поика машины на завтрашний день!!!");
	КонецЕсли;
КонецПроцедуры

Процедура ОбраткаПриИзменении(Элемент)
	Если Обратка Тогда
	    Маршрут = Отправитель;
	    Для каждого стр из Точки Цикл
		    Маршрут = Маршрут + " >>> " + стр.ТочкаМаршрута;
	    КонецЦикла;
	    Направление = Маршрут;
	Иначе
		Маршрут = "";
	    Для каждого стр из Точки Цикл
		    Маршрут = Маршрут  + стр.ТочкаМаршрута + " >>> ";
	    КонецЦикла;
	    Направление = Маршрут;
	КонецЕсли;

КонецПроцедуры

Процедура ДействияФормыНаТендер(Кнопка)
	
	ВыгрузитьВLogistic();

КонецПроцедуры

Процедура ПолеВвода4НачалоВыбора(Элемент, СтандартнаяОбработка)
	Если Статус = перечисления.СтатусыЗаявокНаТранспорт.ЕстьОтвет тогда
		СтандартнаяОбработка = ложь;
		
		табл = ПолучитьПеревозчиковСОтветами();
		
	//+++ 21.03.2018 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++	
		//списКонтр = новый СписокЗначений;
		//списКонтр.ЗагрузитьЗначения( табл.ВыгрузитьКолонку("Перевозчик") );

		//форма1 = справочники.Контрагенты.ПолучитьФормуВыбора();
		//эл1 = форма1.СправочникСписок.Отбор.Ссылка;
		//эл1.ВидСравнения = ВидСравнения.ВСписке;
		//эл1.Значение = списКонтр;
		//эл1.Использование = истина;
		//Контрагент = форма1.ОткрытьМодально();
		
		форма1 = этотОбъект.ПолучитьФорму("ФормаВыбораПоОтветам");
		форма1.ТаблОтветов = табл.Скопировать();
		Контрагент = форма1.ОткрытьМодально();
	//+++)
	
		Если не Контрагент.пустая() тогда
			Статус = перечисления.СтатусыЗаявокНаТранспорт.ПеревозчикВыбран;
			стр1 = табл.Найти( Контрагент, "Перевозчик");
			ii= найти(Комментарий,"#");
			Комментарий = прав(Комментарий, стрДлина(Комментарий) - ii);
			Комментарий = "Авто: "+СокрЛП(стр1.Авто)+"; Водитель: "+сокрЛП(стр1.Водитель)+"# "+Комментарий; 
			
			Сумма = стр1.Стоимость;
		    ФактическаяДата = стр1.ДатаПрибытия;
			
		Иначе // убираем данные по водителю и авто!
			Статус = перечисления.СтатусыЗаявокНаТранспорт.ЕстьОтвет;
			ii= найти(Комментарий,"#");
			Комментарий = прав(Комментарий, стрДлина(Комментарий) - ii);
			
			Сумма = 0;
			ФактическаяДата = '00010101';
		КонецЕсли;
		
    КонецЕсли;
КонецПроцедуры



функция ПолучитьПеревозчиковСОтветами()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтветыПеревозчиков.КодПеревозчика,
	               |	Контрагенты.Ссылка как Перевозчик,
	               |	ОтветыПеревозчиков.ДатаПрибытия,
	               |	ОтветыПеревозчиков.ДатаРазгрузки,
	               |	ОтветыПеревозчиков.Авто,
	               |	ОтветыПеревозчиков.Водитель,
	               |	ОтветыПеревозчиков.Стоимость
	               |ИЗ
	               |	РегистрСведений.ОтветыПеревозчиков КАК ОтветыПеревозчиков
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	               |		ПО ОтветыПеревозчиков.КодПеревозчика = Контрагенты.Код
	               |ГДЕ
	               |	ОтветыПеревозчиков.Документ = &Документ";
	Запрос.УстановитьПараметр("Документ", ссылка);
	Результат = Запрос.Выполнить();
	табл = результат.Выгрузить();
	возврат табл;
КонецФункции	

Процедура ПослеЗаписи()
	
	Если Проведен и Статус = перечисления.СтатусыЗаявокНаТранспорт.ПеревозчикВыбран тогда // при выборе!
		Если Вопрос("Подтвердить заявку на сайте Logistic.yst.ru ?", РежимДиалогаВопрос.ДаНет, 0)=КодВозвратаДиалога.Да тогда 
		ПодтвердитьЗаявкуВLogistic();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеВвода4Очистка(Элемент, СтандартнаяОбработка)
	
	Если Статус = перечисления.СтатусыЗаявокНаТранспорт.ПеревозчикВыбран тогда
		табл = ПолучитьПеревозчиковСОтветами();
		Если табл.Количество()>0 тогда
			Статус = перечисления.СтатусыЗаявокНаТранспорт.ЕстьОтвет;
		иначе
			Статус = перечисления.СтатусыЗаявокНаТранспорт.Подготовлен;
		КонецЕсли;	
		ii= найти(Комментарий,"#");
		Комментарий = прав(Комментарий, стрДлина(Комментарий) - ii);
	КонецЕсли;
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
		
КонецПроцедуры

Процедура УстановитьВидимостьДоступность()
	
	Если Не РольДоступна("Логисты") Тогда
		//ЭлементыФормы.НадписьВес.Видимость = Ложь;
		//ЭлементыФормы.Вес.Видимость = Ложь;
		//ЭлементыФормы.НадписьМашина.Видимость = Ложь;
		//ЭлементыФормы.Пробег.Видимость = Ложь;
		ЭлементыФормы.Надпись3.Видимость = Ложь;
		//ЭлементыФормы.Надпись5.Видимость = Ложь;
		ЭлементыФормы.НадписьДокументОтгрузки.Видимость = Ложь;
		//ЭлементыФормы.ПолеВвода2.Видимость = Ложь;
		//ЭлементыФормы.ПолеВвода4.Видимость = Ложь;
		ЭлементыФормы.ДокументОтгрузки.Видимость = Ложь;
		ЭлементыФормы.Сумма.Доступность = Ложь;
		ЭлементыФормы.ФактДата.Доступность = Ложь;
		ЭлементыФормы.Выполнил.Доступность = Ложь;
		ЭлементыФормы.Водитель1.Доступность = Ложь;
	Иначе
		ЭлементыФормы.ПолеВвода2.Доступность = Ложь;

		ЭлементыФормы.ДатаДоставкиС.Доступность = Ложь;
		ЭлементыФормы.ДатаДоставкиПо.Доступность = Ложь;
		ЭлементыФормы.Объем.Доступность = Ложь;
		ЭлементыФормы.Отправитель.Доступность = Ложь;
		ЭлементыФормы.Точки.Доступность = Ложь;
		ЭлементыФормы.Направление.Доступность = Ложь;
	КонецЕсли;
	
	если (Статус = Перечисления.СтатусыЗаявокНаТранспорт.ПеревозчикВыбран 
		или Статус = Перечисления.СтатусыЗаявокНаТранспорт.Доставлен) и не РольДоступна("Логисты") тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
		ЭлементыФормы.ПолеВвода2.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	ЭлементыФормы.ДействияФормы.Кнопки.НаТендер.Доступность = (Статус = Перечисления.СтатусыЗаявокНаТранспорт.Подготовлен
															ИЛИ Статус = Перечисления.СтатусыЗаявокНаТранспорт.НаТендере);
															
	ЭлементыФормы.ДействияФормы.Кнопки.НаТендерОблачнаяЛогистика.Доступность = (Статус = Перечисления.СтатусыЗаявокНаТранспорт.Подготовлен
																			ИЛИ Статус = Перечисления.СтатусыЗаявокНаТранспорт.НаТендере);
	
КонецПроцедуры

//ИНТЕГРАЦИЯ С ОБЛАЧНОЙ ЛОГИСТИКОЙ

Процедура ДействияФормыНаТендерОблачнаяЛогистика(Кнопка)
	
	Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОблачнаяЛогистикаRefreshToken") = "" Тогда
		Сообщить("Необходима авторизация пользователя на портале Облачная логистика");
		ФормаАвторизации = ЭтотОбъект.ПолучитьФорму("ФормаАвторизацииОблачнаяЛогистика");
		СтруктураПараметров = ФормаАвторизации.ОткрытьМодально();
	КонецЕсли;
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "Выполнить размещение тендера на перевозку на портале Облачная логистика?";
	Ответ = Вопрос(Текст, Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	Если ЭтаФорма.Модифицированность Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Текст = "Перед выполнением операции необходимо записать документ. Выполнить запись?";
		Ответ = Вопрос(Текст, Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		ЭтаФорма.ЗаписатьВФорме();
	КонецЕсли;
	
	ФайлЭкспорта = СформироватьФайлЭкспортаОЛ();
	
	ВыполнитьЭкспортВОЛ(ФайлЭкспорта, СтруктураПараметров);
			
КонецПроцедуры

Функция СформироватьФайлЭкспортаОЛ()
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("root");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("tender");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("status");
	ЗаписьXML.ЗаписатьТекст(Строка(0));
	ЗаписьXML.ЗаписатьКонецЭлемента();	
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("uid");
	ЗаписьXML.ЗаписатьТекст(Строка(Ссылка.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();	
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("description");
	ЗаписьXML.ЗаписатьТекст("Автомобильные шины, диски");
	ЗаписьXML.ЗаписатьКонецЭлемента();	
		
	ЗаписьXML.ЗаписатьНачалоЭлемента("size");
	ЗаписьXML.ЗаписатьТекст(Строка(Формат(Окр(Объем), "ЧГ=0")));
	ЗаписьXML.ЗаписатьКонецЭлемента();	
	
	 
	ЗаписьXML.ЗаписатьНачалоЭлемента("weight");
	Если Вес > 0 Тогда
		ЗаписьXML.ЗаписатьТекст(Строка(Формат(Окр(Вес), "ЧГ=0")));
	Иначе
		ЗаписьXML.ЗаписатьТекст(Строка(0));
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	
	//Точка загрузки
	ЗаписьXML.ЗаписатьНачалоЭлемента("point");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ord");
	ЗаписьXML.ЗаписатьТекст(Строка(0));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("type");
	ЗаписьXML.ЗаписатьТекст(Строка(0)); //загрузка
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("date");
	ЗаписьXML.ЗаписатьТекст(Формат(ДатаДоставкиС,"ДФ=yyyy-MM-dd"));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("address");
	ЗаписьXML.ЗаписатьТекст(СокрЛП(Отправитель));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();	
	
	Для каждого СтрТочки ИЗ Точки Цикл
		
		//Точка выгрузки
		ЗаписьXML.ЗаписатьНачалоЭлемента("point");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ord");
		ЗаписьXML.ЗаписатьТекст(Строка(СтрТочки.НомерСтроки+1));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("type");
		ЗаписьXML.ЗаписатьТекст(Строка(1)); //разгрузка
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("date");
		ЗаписьXML.ЗаписатьТекст(Формат(ДатаДоставкиПо,"ДФ=yyyy-MM-dd"));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("address");
		ЗаписьXML.ЗаписатьТекст(СокрЛП(СтрТочки.ТочкаМаршрута));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента();	
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.Закрыть();
	
	Возврат ИмяФайла;
	
КонецФункции

Процедура ВыполнитьЭкспортВОЛ(ФайлЭкспорта, СтруктураПараметровСайта = Неопределено)
	
	Если СтруктураПараметровСайта = Неопределено Тогда
		СтруктураПараметровСайта = ПолучитьСтруктуруПараметровДляСоединения();
	КонецЕсли;
	
	Если ПроверитьСоединение(СтруктураПараметровСайта) Тогда
		ТекстСообщенияВыгрузка = "";
		Попытка
			ОтправитьДанныеНаСайт(СтруктураПараметровСайта, ФайлЭкспорта);
		Исключение
			ТекстПредупреждения = "Ошибка при отправке пакета на портал ""Облачная логистика""." +ОписаниеОшибки();
			ЗаписатьОшибкуВЖурналРегистрации(ТекстПредупреждения);
		КонецПопытки;
		
		Если НЕ ПроверкаРезультатаПоЗаявке(СтруктураПараметровСайта) Тогда
			ПодключитьОбработчикОжидания("ЗапроситьОтвет", 3);
		Возврат;
	КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтруктуруПараметровДляСоединения()
	
	HTTPS = Истина;
	СтруктураПараметровСайта = Новый Структура;
	СтруктураПараметровСайта.Вставить("Сервер"							,"logist.cloud");//"api.logistcloud.ru");
	СтруктураПараметровСайта.Вставить("Порт"							,?(HTTPS,443,80));
	СтруктураПараметровСайта.Вставить("client_id"						,"3_17vttpjkjylckcg4cocw004kgccc8o4c0cg0kokgcos8wog4gg");
	СтруктураПараметровСайта.Вставить("client_secret"					,"cvek8xo6qggs8oow4wcwk8gwwkk4kccgkgk4048004kos804s");
	СтруктураПараметровСайта.Вставить("Username"						,"5712_3cf32a29a76ccb799ee5f00e03a6db5f3c8846d7");
	СтруктураПараметровСайта.Вставить("Password"						,"0odC27Rpmsje");
	СтруктураПараметровСайта.Вставить("redirect_uri"					,"https://logist.cloud/oauth/v2/auth/code");//"https://api.logistcloud.ru/oauth/v2/auth/code");
	СтруктураПараметровСайта.Вставить("access_token"					,""); //час   
	СтруктураПараметровСайта.Вставить("refresh_token"					,ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОблачнаяЛогистикаRefreshToken")); //не огр
	
	Возврат СтруктураПараметровСайта;

КонецФункции

Функция ПроверитьСоединение(СтруктураПараметровСайта)
	
	//обновление access_token

	ОтносительныйURL = "/oauth/v2/token?client_id=" + СтруктураПараметровСайта.client_id + "&client_secret=" + СтруктураПараметровСайта.client_secret + "&grant_type=refresh_token&refresh_token=" + СтруктураПараметровСайта.refresh_token;
		
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml; image/webp,image/apng,*/*;");
	
	SSL = Новый ЗащищенноеСоединениеOpenSSL;
	HttpЗапрос = Новый HTTPЗапрос(ОтносительныйURL, Заголовки);
	HttpСоединение = Новый HTTPСоединение(СтруктураПараметровСайта.Сервер, СтруктураПараметровСайта.Порт, Неопределено, Неопределено, Неопределено, Неопределено, SSL);
	
	Результат = "";
	
	Попытка
		HttpОтвет = HttpСоединение.Получить(HttpЗапрос);
		ТелоОтвета = HttpОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);		
		Результат = ЗаполнитьСтруктуруИзОтветаJSON(ТелоОтвета);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	access_token = "";
	refresh_token = "";
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Свойство("access_token") Тогда
			access_token = Результат.access_token;
			СтруктураПараметровСайта.Вставить("access_token", access_token);
		КонецЕсли;
		Если Результат.Свойство("refresh_token") Тогда
			refresh_token = Результат.refresh_token;
			СтруктураПараметровСайта.Вставить("refresh_token", refresh_token);
			УстановитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОблачнаяЛогистикаRefreshToken", refresh_token);
		КонецЕсли;
	КонецЕсли;
	Если access_token = "" И refresh_token = "" Тогда
		Возврат Ложь
	Иначе
		Возврат Истина
	КонецЕсли;
	
	////////упрощенная авторизация (для получения справочников)
	//////ОтносительныйURL = "/oauth/v2/token?client_id=" + СтруктураПараметровСайта.client_id + "&client_secret=" + СтруктураПараметровСайта.client_secret + "&grant_type=password&username=" + СтруктураПараметровСайта.Username + "&password=" + СтруктураПараметровСайта.Password;
	//////
	//////Заголовки = Новый Соответствие;
	//////Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml; image/webp,image/apng,*/*;");
	//////
	//////SSL = Новый ЗащищенноеСоединениеOpenSSL;
	//////
	//////HttpЗапрос = Новый HTTPЗапрос(ОтносительныйURL, Заголовки);
	//////
	//////HttpСоединение = Новый HTTPСоединение(СтруктураПараметровСайта.Сервер, СтруктураПараметровСайта.Порт,,,,,SSL);
	//////
	//////Результат = "";
	//////
	//////Попытка
	//////	HttpОтвет = HttpСоединение.Получить(HttpЗапрос);
	//////	
	//////	//обработка ответа  
	//////	ТелоОтвета = HttpОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);		
	//////	
	//////	Результат = ЗаполнитьСтруктуруИзОтветаJSON(ТелоОтвета);
	//////	
	//////	//результат запроса
	//////	//ТелоОтвета - {"access_token":"M2VlNTE2NWU3OTViNjllYzk3NTYzYWIyYjA4NGM4OGJkYzMxZWNhYjZhYWZlZjliM2QzMGU5MWFjZmI0YWVjZg","expires_in":3600,"token_type":"bearer","scope":null,"refresh_token":"ZGVlMGY3MjNhYzE1NDgyMzQ3NGNhODJlZjdmOGMxNjBiNWMzZjZmNDZkNzlkZGU4M2U1YjVmMDM2Zjk3MTdlMw"}
	//////	//Ответ - Структура
	//////	//access_token	"M2VlNTE2NWU3OTViNjllYzk3NTYzYWIyYjA4NGM4OGJkYzMxZWNhYjZhYWZlZjliM2QzMGU5MWFjZmI0YWVjZg"	Строка
	//////	//expires_in	3 600	Число
	//////	//refresh_token	"ZGVlMGY3MjNhYzE1NDgyMzQ3NGNhODJlZjdmOGMxNjBiNWMzZjZmNDZkNzlkZGU4M2U1YjVmMDM2Zjk3MTdlMw"	Строка
	//////	//scope		Неопределено
	//////	//token_type	"bearer"	Строка
	//////	
	//////Исключение
	//////	Сообщить(ОписаниеОшибки());
	//////КонецПопытки;
	//////
	////////получение справочников
	//////УпрощенныйТокен = "";
	//////Если ТипЗнч(Результат) = Тип("Структура") Тогда
	//////	Если Результат.Свойство("access_token") Тогда
	//////		УпрощенныйТокен = Результат.access_token;
	//////		СтруктураПараметровСайта.Вставить("Token", УпрощенныйТокен);
	//////	КонецЕсли;
	//////КонецЕсли;
	//////Если УпрощенныйТокен = "" Тогда
	//////	Возврат Ложь
	//////Иначе
	//////	Возврат Истина
	//////КонецЕсли;
	
КонецФункции

Процедура ОтправитьДанныеНаСайт(СтруктураПараметровСайта, ФайлЭкспорта) 
	
	Если НЕ Post(СтруктураПараметровСайта, ФайлЭкспорта) Тогда
		Возврат;
	КонецЕсли;
		
	//УдалитьФайлы(ФайлЭкспорта);	
		
КонецПроцедуры

функция Post(СтруктураПараметровСайта,Файл)
	
	Boundary = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");	
	
	ОтносительныйURL = "/api/upload-tender/upload-text/" + Справочники.Организации.НайтиПоКоду("00001").ИНН + "?access_token=" + СтруктураПараметровСайта.access_token;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml; image/webp,image/apng,*/*;");
	Заголовки.Вставить("Content-Type", "application/xml");
	
	SSL = Новый ЗащищенноеСоединениеOpenSSL;
	
	HttpЗапрос = Новый HTTPЗапрос(ОтносительныйURL, Заголовки);
	ТелоОтвета = "";
	
	HttpСоединение = Новый HTTPСоединение(СтруктураПараметровСайта.Сервер, СтруктураПараметровСайта.Порт, Неопределено, Неопределено, Неопределено, Неопределено, SSL);
	
	HttpЗапрос.УстановитьТелоИзДвоичныхДанных(Новый ДвоичныеДанные(Файл));
	имяВыходногоФайла = ПолучитьИмяВременногоФайла();
	Попытка
		HttpОтвет = HttpСоединение.ОтправитьДляОбработки(HttpЗапрос, имяВыходногоФайла);
	Исключение
		ЗаписатьОшибкуВЖурналРегистрации("Ошибка при отправке пакета на портал;" + ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;

	ФайлОтвета = Новый Файл(имяВыходногоФайла);
	
	Если ФайлОтвета.Существует() Тогда
		ТекстОтвета = Новый ТекстовыйДокумент();
		ТекстОтвета.Прочитать(имяВыходногоФайла);
		Если ТекстОтвета.КоличествоСтрок()>0 Тогда
			ОтветСервера = ТекстОтвета.ПолучитьТекст();
			Если Найти(СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера, 1))), """success"":true") > 0 Тогда
				Результат = ЗаполнитьСтруктуруИзОтветаJSON(ОтветСервера);
				Если Результат.Свойство("task_name") Тогда
					ID_ОблачнаяЛогистика = Результат.task_name;
					Записать();
				КонецЕсли;
				Если Результат.Свойство("success") Тогда
					success = Результат.success;
					Если success Тогда
						Возврат Истина;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ЗаписатьОшибкуВЖурналРегистрации("Не удалось установить соединение с сервером." + Символы.ПС + ОтветСервера);
				Возврат Ложь;
			КонецЕсли;
		Иначе
			ЗаписатьОшибкуВЖурналРегистрации("Отправка файла на сервер: Получен пустой ответ сервера.");
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ЗаписатьОшибкуВЖурналРегистрации("Отправка файла на сервер: Ответ сервера не получен.");
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

Процедура ЗапроситьОтвет()
	
	СтруктураПараметровСайта = ПолучитьСтруктуруПараметровДляСоединения();
	Если ПроверитьСоединение(СтруктураПараметровСайта) Тогда
		ПроверкаРезультатаПоЗаявке(СтруктураПараметровСайта);
	КонецЕсли;

КонецПроцедуры

Функция ПроверкаРезультатаПоЗаявке(СтруктураПараметровСайта)
	
	ЗаявкаОбработана = Ложь;
	
	Boundary = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");	
	
	ОтносительныйURL = "/api/upload-tender/check/" + СокрЛП(ID_ОблачнаяЛогистика) + "?access_token=" + СтруктураПараметровСайта.access_token;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml; image/webp,image/apng,*/*;");
	
	SSL = Новый ЗащищенноеСоединениеOpenSSL;
	HttpЗапрос = Новый HTTPЗапрос(ОтносительныйURL, Заголовки);
	HttpСоединение = Новый HTTPСоединение(СтруктураПараметровСайта.Сервер, СтруктураПараметровСайта.Порт, Неопределено, Неопределено, Неопределено, Неопределено, SSL);
	
	Результат = "";
	
	Попытка
		HttpОтвет = HttpСоединение.Получить(HttpЗапрос);
		ТелоОтвета = HttpОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);		
		Результат = ЗаполнитьСтруктуруИзОтветаJSON(ТелоОтвета);
		Если Результат.Свойство("success") Тогда
			Если Результат.success Тогда
				Если Результат.Свойство("tenders") Тогда
					Для каждого ЭлМассива ИЗ Результат.tenders Цикл
						Если ЭлМассива.uid = Строка(Ссылка.УникальныйИдентификатор()) Тогда 
							НомерЗаявки_ОблачнаяЛогистика = ЭлМассива.tender_id;
							Записать();
							ЗаявкаОбработана = Истина;
							ОтключитьОбработчикОжидания("ЗапроситьОтвет");
							Предупреждение("Отправка и подтверждение заявки выполнено успешно");
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Результат.Свойство("fail") Тогда
			Если Результат.fail Тогда
				ОтключитьОбработчикОжидания("ЗапроситьОтвет");
				Если Результат.Свойство("message") Тогда
					ЗаписатьОшибкуВЖурналРегистрации(Результат.message);
				КонецЕсли;
				ЗаявкаОбработана = Истина;
				Предупреждение("Отправка заявки не выполнена, подробнее в Журнале регистрации");
			КонецЕсли;
		ИначеЕсли Результат.Свойство("waiting") Тогда
			Если Результат.waiting Тогда
				Сообщить("Заявка в обработке. Не закрывайте форму заявки до окончания ее загрузки на портал!");
			КонецЕсли;
		ИначеЕсли Результат.Свойство("parsing") Тогда
			Если Результат.parsing Тогда
				Сообщить("Заявка в обработке. Не закрывайте форму заявки до окончания ее загрузки на портал!");
			КонецЕсли;
		ИначеЕсли Результат.Свойство("processing") Тогда
			Если Результат.processing Тогда
				Сообщить("Заявка в обработке. Не закрывайте форму заявки до окончания ее загрузки на портал!");
			КонецЕсли;
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат ЗаявкаОбработана;
		
КонецФункции

Процедура ЗаписатьОшибкуВЖурналРегистрации(Комментарий) Экспорт
	
	ЗаписьЖурналаРегистрации("Ошибка обмена 1С - Облачная логистика", УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
	
КонецПроцедуры

//КОНЕЦ ИНТЕГРАЦИЯ С ОБЛАЧНОЙ ЛОГИСТИКОЙ


