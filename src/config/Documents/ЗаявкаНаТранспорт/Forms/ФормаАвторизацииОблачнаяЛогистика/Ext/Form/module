Перем СтруктураПараметровСайта;

Процедура ПриОткрытии()
	
	ЭлементыФормы.ПолеHTMLДокумента1.Перейти(СтруктураПараметровСайта.Сервер + "/oauth/v2/auth?client_id=" + СтруктураПараметровСайта.client_id + "&redirect_uri=" + СтруктураПараметровСайта.redirect_uri + "&response_type=code");
	
КонецПроцедуры

Процедура ПолеHTMLДокумента1ДокументСформирован(Элемент)

	Если ПроверитьНаЗаполненностьПараметраКод(ЭлементыФормы.ПолеHTMLДокумента1.Документ.URLUnencoded) Тогда
		СтруктураПараметров = РазобратьСтрокуПоПараметрам(ЭлементыФормы.ПолеHTMLДокумента1.Документ.URLUnencoded);
		Если СтруктураПараметров.Свойство("code") Тогда 
			
			code = СтруктураПараметров.code;
			СтруктураПараметровСайта.Вставить("code", code);
			
			ОтносительныйURL = "/oauth/v2/token?code=" + СтруктураПараметровСайта.code + "&client_id=" + СтруктураПараметровСайта.client_id + "&client_secret=" + СтруктураПараметровСайта.client_secret + "&grant_type=authorization_code&redirect_uri=" + СтруктураПараметровСайта.redirect_uri;
			
			Заголовки = Новый Соответствие;
			Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml; image/webp,image/apng,*/*;");
			
			SSL = Новый ЗащищенноеСоединениеOpenSSL;
			
			HttpЗапрос = Новый HTTPЗапрос(ОтносительныйURL, Заголовки);
			
			HttpСоединение = Новый HTTPСоединение(СтруктураПараметровСайта.Сервер, СтруктураПараметровСайта.Порт, Неопределено, Неопределено, Неопределено, Неопределено,SSL);
			
			Результат = "";
			
			Попытка
				HttpОтвет = HttpСоединение.Получить(HttpЗапрос);
				ТелоОтвета = HttpОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);		
				Результат = ЗаполнитьСтруктуруИзОтветаJSON(ТелоОтвета);
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
			access_token = "";
			refresh_token = "";
			Если ТипЗнч(Результат) = Тип("Структура") Тогда
				Если Результат.Свойство("access_token") Тогда
					access_token = Результат.access_token;
					СтруктураПараметровСайта.Вставить("access_token", access_token);
				КонецЕсли;
				Если Результат.Свойство("refresh_token") Тогда
					refresh_token = Результат.refresh_token;
					СтруктураПараметровСайта.Вставить("refresh_token", refresh_token);
					УстановитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОблачнаяЛогистикаRefreshToken", refresh_token);
				КонецЕсли;
			КонецЕсли;
			
			Закрыть(СтруктураПараметровСайта);
			
		КонецЕсли;		
	КонецЕсли; 		
	
КонецПроцедуры

Функция ПроверитьНаЗаполненностьПараметраКод(СтрокаURLUnencoded)
	
	Если Найти(СтрокаURLUnencoded,"code=") = 0 Тогда 
		Возврат Ложь;
	КонецЕсли; 	
	
	Возврат Найти(СтрокаURLUnencoded,"code=")+10 <= СтрДлина(СтрокаURLUnencoded);
	
КонецФункции	

//Функция - Получает Строку с параметрами, через символ "&"
//Возвращает Структуру Параметров
//Параметры:
//СтрокаПараметров - Тип Строка, Строка содержащая пары ключ значение - параметров, идущие через "&"
Функция РазобратьСтрокуПоПараметрам(СтрокаПараметров) 	
	
	мСтрокаПараметров = СтрЗаменить(СтрокаПараметров, Лев(СтрокаПараметров,Найти(СтрокаПараметров,"?")),"");
	СтруктураПараметров = Новый Структура;	
	Попытка
		ПолиСтр = СтрЗаменить(мСтрокаПараметров,"&",Символы.ПС);	
		Для Счетчик =1 по СтрЧислоСтрок(ПолиСтр) Цикл
			Стр = СтрПолучитьСтроку(ПолиСтр, Счетчик);		
			СимволРавно = Найти(Стр,"=");
			Если НЕ СимволРавно >= СтрДлина(Стр) Тогда
				СтруктураПараметров.Вставить(Лев(Стр,СимволРавно-1),Прав(Стр,СтрДлина(Стр)-СимволРавно));			
			КонецЕсли;
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Возврат СтруктураПараметров;
	
КонецФункции



HTTPS = Истина;
СтруктураПараметровСайта = Новый Структура;
СтруктураПараметровСайта.Вставить("Сервер"							,"logist.cloud");//"api.logistcloud.ru");
СтруктураПараметровСайта.Вставить("Порт"							,?(HTTPS,443,80));
СтруктураПараметровСайта.Вставить("client_id"						,"3_17vttpjkjylckcg4cocw004kgccc8o4c0cg0kokgcos8wog4gg");
СтруктураПараметровСайта.Вставить("client_secret"					,"cvek8xo6qggs8oow4wcwk8gwwkk4kccgkgk4048004kos804s");
СтруктураПараметровСайта.Вставить("Username"						,"5712_3cf32a29a76ccb799ee5f00e03a6db5f3c8846d7");
СтруктураПараметровСайта.Вставить("Password"						,"0odC27Rpmsje");
СтруктураПараметровСайта.Вставить("redirect_uri"					,"https://logist.cloud/oauth/v2/auth/code");//"https://api.logistcloud.ru/oauth/v2/auth/code");
СтруктураПараметровСайта.Вставить("access_token"					,""); //час   
СтруктураПараметровСайта.Вставить("refresh_token"					,ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОблачнаяЛогистикаRefreshToken")); //не огр
