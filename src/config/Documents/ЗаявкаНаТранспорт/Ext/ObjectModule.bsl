
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	//{{__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		// Заполнение шапки
		ДатаДоставкиС = ДанныеЗаполнения.ДатаОтгрузки;
		ДатаДоставкиПо = ДанныеЗаполнения.ДатаОтгрузки;
		Ответственный = ДанныеЗаполнения.Ответственный;
		Основание = ДанныеЗаполнения.Ссылка;
		Контрагент = ДанныеЗаполнения.Контрагент;
		Сумма = ДанныеЗаполнения.СуммаДокумента;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда	
		//ДатаДоставкиС = ДанныеЗаполнения.ДатаОтгрузки;
		//ДатаДоставкиПо = ДанныеЗаполнения.ДатаОтгрузки;
		Ответственный = ДанныеЗаполнения.Ответственный;
		Основание = ДанныеЗаполнения.Ссылка;
		Контрагент = ДанныеЗаполнения.Контрагент;
		Сумма = ДанныеЗаполнения.СуммаДокумента;	
	КонецЕсли;
	//}}__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ЗначениеНеЗаполнено(ДатаДоставкиС) 
		или ЗначениеНеЗаполнено(ДатаДоставкиПо) 
		или (ЗначениеНеЗаполнено(Объем) и ЗначениеНеЗаполнено(Штуки)) Тогда
		Отказ = Истина;
		Сообщить("Не все ОБЯЗАТЕЛЬНЫЕ поля заполнены!!!");
	КонецЕсли;
	Если Точки.Количество() = 0 Тогда
		Отказ = Истина;
		Сообщить("Дожна быть указана хотя бы одна точка маршрута!!!");
	КонецЕсли;
	
КонецПроцедуры

//19.03.2018
Процедура ВыгрузитьВLogistic() экспорт
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	ВыгрузитьЗаявкуНаТранспортВФайл(ИмяФайла);
	#Если Клиент тогда
	сообщить("Сохранен файл "+ИмяФайла);
	#КонецЕсли
	
	Сервер = "logistic.yst.ru";
	Метод  = "/api/claims";
	ПолныйАдрес = Истина; 
		
	попытка
		удачно6 = лок_SIM_ВыгрузитьФайлНаСервер(ИмяФайла); //, Метод, Истина, Сервер, ПолныйАдрес, ЛОЖЬ
		#Если Клиент тогда
			Предупреждение("Заявка № "+ссылка.Номер+" 
		|	успешно выгружена на сайт "+Сервер, 30);
		#КонецЕсли
	исключение
		#Если Клиент тогда
		Сообщить("ОШИБКА при выгрузке Заявки № "+ссылка.Номер+" 
		|	 на сайт "+Сервер+" : "+ОписаниеОшибки(), СтатусСообщения.Внимание);
		#КонецЕсли
	КонецПопытки;
	
КонецПроцедуры	

Функция лок_SIM_ВыгрузитьФайлНаСервер(ИмяФайла="", ИмяПоТипуФайла="/api/claims", УдалитьФайлПослеУдачнойВыгрузки = Истина, сайт1="logistic.yst.ru",ПолныйАдрес=Истина, SSL=ЛОЖЬ )
	
	Если ИмяФайла="" или ИмяПоТипуФайла="" Тогда 
		возврат ЛОЖЬ 
	КонецЕсли;
	Если ПолныйАдрес Тогда
		Ресурс =  ИмяПоТипуФайла+"/";   //28.07.2017 
	иначе
		Ресурс =  "exchange/"+ИмяПоТипуФайла+"/";
	КонецЕсли;	
		
//СтрокаПодключения =	"LAPENKOV_vi:8090";
СтрокаПодключения =	сайт1; //+":80";
login="admin"; password="cegthvfhbj";

Соединение = Новый HTTPСоединение(СтрокаПодключения, , login, password, , SSL);    //+++ 15.08.2017  https (SSL)!

Если Соединение = Неопределено Тогда
	Возврат Ложь;
КонецЕсли;


Заголовки = Новый Соответствие();
//Заголовки.Вставить("host", СтрокаПодключения+":"+формат(порт,"ЧГ=0"));  //"http://lapenkov_vi:8090    /api/ystapi
Заголовки.Вставить("Content-Type", "text/xml; charset=utf-8");
//Заголовки.Вставить("Content-Type", "application/xml");
//Заголовки.Вставить("HASH", "D5790E89580D8B75927F804E738CFCE");  
 
	// посылаем запрос
	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла();
	HTTPОтвет = Соединение.ОтправитьДляОбработки( ИмяФайла, Ресурс, ИмяФайлаРезультата, Заголовки );
    //HTTPОтвет = Соединение.ОтправитьДляОбработки( ИмяФайла, Ресурс, ИмяФайлаРезультата );
 

Соединение = Неопределено; // разорвать соединение

 ТекстовыйФайлОтвет = Новый ТекстовыйДокумент;
 ТекстовыйФайлОтвет.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
 СтрокаJSONРезультат = ТекстовыйФайлОтвет.ПолучитьТекст();
 ТекстовыйФайлОтвет = Неопределено; // отключается от файла
//#Если Клиент Тогда
//сообщить("Статус ответа: "+строка(HTTPОтвет.КодСостояния)+"
//		 |Ответ сервера: '"+СтрокаJSONРезультат+"'" );
//#КонецЕсли

	Если HTTPОтвет.КодСостояния=200 Тогда
		рез = Истина;
			файл = новый ФАЙЛ(ИмяФайлаРезультата);
	 		УдалитьФайлы(файл.Путь, файл.Имя);	
			//сообщить("удален временный файл ответа "+ИмяФайлаРезультата);
		
		Если УдалитьФайлПослеУдачнойВыгрузки Тогда
			файл = новый ФАЙЛ(ИмяФайла);
			Если файл.Существует() Тогда
				путь = файл.Путь;
				УдалитьФайлы(путь, файл.Имя);
				#Если Клиент Тогда
				сообщить("После удачной выгрузки - удален файл: "+ИмяФайла, СтатусСообщения.Информация);
				#КонецЕсли
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		рез = ЛОЖЬ;
		сообщитьобОшибке("Статус ответа: "+строка(HTTPОтвет.КодСостояния)+"
			  		     |Ответ сервера: '"+СтрокаJSONРезультат+"'" );
	КонецЕсли;

возврат рез;

КонецФункции



//19.03.2018
процедура ВыгрузитьЗаявкуНаТранспортВФайл(ИмяФайла="")
	записьXML = новый ЗаписьXML();
	записьXML.ОткрытьФайл( имяФайла );
	записьXML.ЗаписатьНачалоЭлемента("ArrayOfClaimForTransport");
	//для i=0 по СписокДокументов.Количество()-1 цикл
		//док = СписокДокументов[i].Значение;
		док = ЭтотОбъект.Ссылка;
		записьXML.ЗаписатьНачалоЭлемента("ClaimForTransport");
		Если НЕ док.Контрагент.пустая() тогда
			записьXML.ЗаписатьНачалоЭлемента("CarrierId");
			записьXML.ЗаписатьТекст( СокрЛП(док.Контрагент.Код) ); // ОБЯЗАТЕЛЬНО без пробелов!
	    	записьXML.ЗаписатьКонецЭлемента();
			
			записьXML.ЗаписатьНачалоЭлемента("Comments");
			записьXML.ЗаписатьТекст(  СокрЛП(док.Комментарий) );
	    	записьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
			
		Если док.ДатаДоставкиС>'00010101' тогда
		записьXML.ЗаписатьНачалоЭлемента("DeadlineDate");
		датаТ = формат(док.ДатаДоставкиС,"ДФ=yyyy-MM-ddThh:mm:ss");  //дата наоборот T время
		записьXML.ЗаписатьТекст( датаТ );
    	записьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	
		записьXML.ЗаписатьНачалоЭлемента("DocDate");
		датаТ = формат(док.Дата,"ДФ=yyyy-MM-ddThh:mm:ss");  //дата наоборот T время
		записьXML.ЗаписатьТекст( датаТ );
		
    	записьXML.ЗаписатьКонецЭлемента();
		записьXML.ЗаписатьНачалоЭлемента("GuidIn1S");
		записьXML.ЗаписатьТекст( строка(док.УникальныйИдентификатор()) );
    	записьXML.ЗаписатьКонецЭлемента();
		записьXML.ЗаписатьНачалоЭлемента("NumberIn1S");
		записьXML.ЗаписатьТекст( СокрЛП(док.Номер) );
    	записьXML.ЗаписатьКонецЭлемента();
		записьXML.ЗаписатьНачалоЭлемента("Path");
		маршрут = док.Отправитель;
		маршрут = стрЗаменить(маршрут, "150044, Ярославская обл, ","");
		маршрут = "Из: "+ СокрЛП(маршрут) + " По маршруту: "+СокрЛП(док.Направление);
		записьXML.ЗаписатьТекст(  маршрут );
    	записьXML.ЗаписатьКонецЭлемента();
			
		записьXML.ЗаписатьНачалоЭлемента("Status");
		СтатусНом = получитьСтатусЗаявкиНаТранспорт(док);
		если СтатусНом<=0 тогда
			СтатусНом = 1;
		КонецЕсли;	
	 	записьXML.ЗаписатьТекст( формат( СтатусНом,"ЧН=0" ) );
		записьXML.ЗаписатьКонецЭлемента();
				
		записьXML.ЗаписатьНачалоЭлемента("Volume");
		записьXML.ЗаписатьТекст( строка( ОКР(док.Объем,0) ) );
    	записьXML.ЗаписатьКонецЭлемента();

		
    	записьXML.ЗаписатьКонецЭлемента();
	//КонецЦикла;
    записьXML.ЗаписатьКонецЭлемента();
	записьXML.Закрыть();
КонецПроцедуры

функция получитьСтатусЗаявкиНаТранспорт(ссылка1)
	соотв = новый Соответствие;
	соотв.Вставить(перечисления.СтатусыЗаявокНаТранспорт.Подготовлен, 0);
	
	соотв.Вставить(перечисления.СтатусыЗаявокНаТранспорт.НаТендере, 1);   
	соотв.Вставить(перечисления.СтатусыЗаявокНаТранспорт.ЕстьОтвет, 1);  // -------------и так понятно----------
	соотв.Вставить(перечисления.СтатусыЗаявокНаТранспорт.ПеревозчикВыбран, 3);
	соотв.Вставить(перечисления.СтатусыЗаявокНаТранспорт.НаПогрузке, 4);
	соотв.Вставить(перечисления.СтатусыЗаявокНаТранспорт.ВПути,5);
	соотв.Вставить(перечисления.СтатусыЗаявокНаТранспорт.Доставлен,6);
	соотв.Вставить(перечисления.СтатусыЗаявокНаТранспорт.Отменен,7);
	
	номСтатус = соотв.Получить( ссылка1.статус );
	Если номСтатус = неопределено тогда
		номСтатус = -1;
	КонецЕсли;
	
	возврат номСтатус;
КонецФункции


//19.03.2018
процедура ПодтвердитьЗаявкуВLogistic() экспорт
	
ИмяФайла1 = ПолучитьИмяВременногоФайла("json");

ТекстФайл = новый ТекстовыйДокумент;

КодКлиента = ссылка.Контрагент.Код;
уид  = Ссылка.УникальныйИдентификатор();

текст1 = "{""CarrierId"":"""+СокрЛП(КодКлиента)+""",
		|""GuidOfClaim"":"""+ уид +"""}";
		
текстФайл.УстановитьТекст(текст1);
текстФайл.Записать(ИмяФайла1, КодировкаТекста.ANSI); // !!! ANSI
 
ФайлОтправки = Новый Файл(ИмяФайла1);
РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
#Если Клиент тогда
 сообщить("Записан файл подтверждения: "+ИмяФайла1+"   размер:"+РазмерФайлаОтправки);
#КонецЕсли
//================================================================	
	
СтрокаПодключения =	"logistic.yst.ru"; //+":80";
login="admin"; password="cegthvfhbj";
SSL = ЛОЖЬ;
Соединение = Новый HTTPСоединение(СтрокаПодключения, , login, password, , SSL);    //+++ 15.08.2017  https (SSL)!

Если Соединение = Неопределено Тогда
	#Если Клиент Тогда
	сообщить("НЕТ соединения с сайтом: "+СтрокаПодключения);
    #КонецЕсли
	Возврат;
КонецЕсли;

Ресурс = "api/claims/choosecarrier";

Заголовки = Новый Соответствие();
 Заголовки.Вставить("Content-Length", РазмерФайлаОтправки);
 Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
 Заголовки.Вставить("HASH", "D5790E89580D8B75927F804E738CFCE");  

 ИмяФайлаРезультата = ПолучитьИмяВременногоФайла();
 
// посылаем запрос
  HTTPОтвет = Соединение.ОтправитьДляОбработки( ИмяФайла1, Ресурс, ИмяФайлаРезультата, Заголовки );

Соединение = Неопределено;	

Если HTTPОтвет.КодСостояния=200 Тогда
	#Если Клиент Тогда
	сообщить("Заявка "+Номер+" успешно подтверждена на сайте: "+СтрокаПодключения, СтатусСообщения.Информация);
	#КонецЕсли
Иначе
 ТекстовыйФайлОтвет = Новый ТекстовыйДокумент;
 ТекстовыйФайлОтвет.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
 СтрокаJSONРезультат = ТекстовыйФайлОтвет.ПолучитьТекст();
 ТекстовыйФайлОтвет = Неопределено; // отключается от файла
#Если Клиент Тогда
сообщить("Статус ответа: "+строка(HTTPОтвет.КодСостояния)+"
		 |Ответ сервера: '"+СтрокаJSONРезультат+"'" );
#КонецЕсли
КонецЕсли;

КонецПроцедуры
