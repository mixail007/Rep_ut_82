Перем мВалютаРегламентированногоУчета Экспорт;

// Форматирует сумму прописью документа
//
// Параметры: 
//  СуммаДок - число - Сумма, которую надо прописать
//
// Возвращаемое значение:
//  Строку прописью
//
Функция ФорматироватьСуммуПрописи(СуммаДок)

	Результат = СуммаДок;
	ФорматСтрока  = "Л=ru_RU; ДП=Ложь";
	ПарамПредмета = "рубль, рубля, рублей, м, копейка, копейки, копеек, ж";
	Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);

	Возврат Результат;

КонецФункции // ФорматироватьСуммуПрописи()

// Функция формирует наименование корреспондента для печати
Функция СформироватьНаименованиеКорреспондентов(Корресп)
	Если ТипЗнч(Корресп) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Если ПустаяСтрока(Корресп.Фамилия) и ПустаяСтрока(Корресп.Имя) и ПустаяСтрока(Корресп.Отчество) Тогда
			Результат = СокрЛП(Корресп.Наименование);
		Иначе	
			Результат = СокрЛП(Корресп.Фамилия) + " " + СокрЛП(Корресп.Имя) + " " + СокрЛП(Корресп.Отчество);
		КонецЕсли;	
	Иначе	
		Результат = ?(НЕ ПустаяСтрока(Корресп.НаименованиеПолное),СокрЛП(Корресп.НаименованиеПолное),СокрЛП(Корресп.Наименование));
	КонецЕсли;	
	
	Возврат Результат;
КонецФункции //	СформироватьНаименованиеКорреспондентов()

// Формирует строку корреспондента
//
// Параметры: 
//  БанкСчет - Банковский счет. 
//
// Возвращаемое значение:
//  сформированную строку корреспондента
//
Функция СформироватьСтрокуКорреспондента(БанкСчет)

	Если НЕ БанкСчет.Пустая() Тогда
		БанкДляРасчетов = БанкСчет.БанкДляРасчетов;
		ВладБанковскогоСчета = БанкСчет.Владелец;
		Результат = ?(ПустаяСтрока(ВладБанковскогоСчета.ИНН),"","ИНН " + ВладБанковскогоСчета.ИНН + " ") + 
					СформироватьНаименованиеКорреспондентов(ВладБанковскогоСчета) +
					?(БанкДляРасчетов.Пустая(),"", 
					" р/с "+СокрЛП(БанкСчет.НомерСчета) +" в "+СокрЛП(БанкСчет.Банк.Наименование) +
					" " + ?(НЕ ПустаяСтрока(БанкСчет.Банк.Город), " " + СокрЛП(БанкСчет.Банк.Город),""));
	Иначе
		Результат = "";			
	КонецЕсли;				
					
	Возврат Результат;

КонецФункции // СформироватьСтрокуКорреспондента()

// Формирует строку банка и его БИК
//
// Параметры:
//  БанкСчет - Банковский счет. 
//
// Возвращаемое значение:
//   Строку, сформированную из банка и БИКа
//
Функция СформироватьСтрокуБанкБик(БанкСчет)

	Если НЕ БанкСчет.Пустая() Тогда
	    БанкДляРасчетов = БанкСчет.БанкДляРасчетов;
	    Результат = ?(БанкДляРасчетов.Пустая(),
					"" + СокрЛП(БанкСчет.Банк.Наименование) + 
					?(НЕ ПустаяСтрока(БанкСчет.Банк.Город),", " + СокрЛП(БанкСчет.Банк.Город),"") + ", БИК " + СокрЛП(БанкСчет.Банк.Код),
					"" + СокрЛП(БанкДляРасчетов.Наименование) + 
					?(НЕ ПустаяСтрока(БанкДляРасчетов.Город),", " + СокрЛП(БанкДляРасчетов.Город),"") + ", БИК "+СокрЛП(БанкДляРасчетов.Код));
	Иначе
		Результат = "";			
	КонецЕсли;				
	Возврат Результат;

КонецФункции // СформироватьСтрокуБанкБик()

// Определяет номер расчетного счета по
// переданному банковскому счету
//
// Параметры:
//  БанкСчет - Банковский счет. 
//
// Возвращаемое значение:
//   Номер расчетного счета
//
Функция ВернутьРасчетныйСчет(БанкСчет)

    БанкДляРасчетов = БанкСчет.БанкДляРасчетов;
    Результат = ?(БанкДляРасчетов.Пустая(),БанкСчет.НомерСчета,БанкДляРасчетов.КоррСчет);
	Возврат Результат;

КонецФункции // ВернутьРасчетныйСчет()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если Клиент Тогда

// Формирует печатную форму реестра счетов
//
// Параметры:
//  ТабДок - Табличный документ
//
Функция ПечатьДокумента() Экспорт

	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеестрСчетов_РеестрСчетов";

	ФорматДаты = "ДФ='дд ММ гггг'";

	Макет      = ПолучитьМакет("РеестрСчетов");
	Область    = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.НаименованиеНомер    = "РЕЕСТР СЧЕТОВ № " + ПолучитьНомерНаПечать(ЭтотОбъект);
	
	Область.Параметры.БанкБикИсполняющий="" + СокрЛП(ИсполняющийБанк.Наименование) + 
					?(НЕ ПустаяСтрока(ИсполняющийБанк.Город),", " + СокрЛП(ИсполняющийБанк.Город),"") + ", БИК " + СокрЛП(ИсполняющийБанк.Код);	
	Область.Параметры.ДатаДокумента        = Формат(Дата,ФорматДаты);
	Область.Параметры.НомерАккредитива     = НомерАккредитива;
	Область.Параметры.ДатаАккредитива      = Формат(ДатаАккредитива,ФорматДаты);
	Область.Параметры.НомерСчетаПолучателя = ВернутьРасчетныйСчет(СчетОрганизации);
	Область.Параметры.БанкБикПолучателя    = СформироватьСтрокуБанкБик(СчетОрганизации);
	Область.Параметры.Получатель           = СформироватьСтрокуКорреспондента(СчетОрганизации);
	Область.Параметры.БанкБикПлательщика   = СформироватьСтрокуБанкБик(СчетКонтрагента);
	Область.Параметры.Плательщик           = СформироватьСтрокуКорреспондента(СчетКонтрагента);
	Область.Параметры.СуммаПрописью        = ФорматироватьСуммуПрописи(СуммаАккредитива);
	ТабДок.Вывести(Область);

	Для каждого СтрокаТабЧ Из Реестр Цикл
		Область    = Макет.ПолучитьОбласть("Строка");
		Область.Параметры.НомерСтроки       = Реестр.Индекс(СтрокаТабЧ)+1;
		Область.Параметры.пДатаОтгрузки     = Формат(СтрокаТабЧ.ДатаОтгрузки,ФорматДаты);
		Область.Параметры.пВидТранспорта    = СокрЛП(СтрокаТабЧ.ВидТранспорта);
		Область.Параметры.пНомераДокументов = СокрЛП(СтрокаТабЧ.НомерДокумента);
		Область.Параметры.пСумма            = СтрокаТабЧ.Сумма;
		ТабДок.Вывести(Область);
	КонецЦикла;

	Область = Макет.ПолучитьОбласть("Подвал");
	ТабДок.Вывести(Область);
	Возврат ТабДок;

КонецФункции // Печать()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи", 60);
		Возврат;
	КонецЕсли;

	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "РеестрСчетов" Тогда
		ТабДокумент = ПечатьДокумента();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();
	
	КонецЕсли;

	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;

	СписокМакетов.Добавить("РеестрСчетов", "Реестр счетов");

	ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

#КонецЕсли

Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.АккредитивПереданный") Тогда
		// Заполнение шапки
		Комментарий = Основание.Комментарий;
		Контрагент = Основание.Контрагент;
		Организация = Основание.Организация;
		Ответственный = Основание.Ответственный;
		ДокументОснование = Основание.Ссылка;
		СчетКонтрагента = Основание.СчетКонтрагента;
		СчетОрганизации = Основание.СчетОрганизации;
		
		НомерАккредитива=ПолучитьНомерНаПечать(Основание);
		ДатаАккредитива=Основание.Дата;
		СуммаАккредитива=Основание.СуммаДокумента;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 

КонецПроцедуры


мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
