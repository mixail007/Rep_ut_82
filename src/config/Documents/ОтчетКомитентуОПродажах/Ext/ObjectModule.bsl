Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьОтчетаКомитенту()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Контрагент,
	|	Организация,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	СтавкаНДСВознаграждения,
	|	СуммаВознаграждения,
	|	Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		КоличествоМест,
	|		Количество,
	|		ЕдиницаИзмерения.Представление     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|		ЦенаПоступления,
	|		СуммаПоступления,
	|		СуммаВознаграждения,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		СерияНоменклатуры КАК Серия
	|	)
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитентуОПродажах
	|
	|ГДЕ
	|	ОтчетКомитентуОПродажах.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетКомитентуОПродажах_ОтчетКомитентуОПродажах";
	Макет       = ПолучитьМакет("ОтчетКомитентуОПродажах");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Отчет комитенту");
	ТабДокумент.Вывести(ОбластьМакета);

	ПредставлениеОрганизации = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ПредставлениеКонтрагента = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата), "ПолноеНаименование,");


	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеКонтрагента;
	ОбластьМакета.Параметры.Поставщик               = Шапка.Контрагент;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.Получатель              = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	ФлагПечатиМест = (Товары.Итог("КоличествоМест") > 0);

	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы" + ?(ФлагПечатиМест, "Мест", ""));
	ТабДокумент.Вывести(ОбластьМакета);

	Итого         = 0;
	ОбластьМакета = Макет.ПолучитьОбласть("Строка" + ?(ФлагПечатиМест, "Мест", ""));
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.Товар = ВыборкаСтрокТовары.Товар + ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Вывести(ОбластьМакета);

		Итого = Итого + ВыборкаСтрокТовары.СуммаПоступления;

	КонецЦикла;

	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = Итого;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.СуммаПрописью       = СформироватьСуммуПрописью(Итого, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаВознаграждения = "Сумма комиссионного вознаграждения составила " 
	                                            + СформироватьСуммуПрописью(Шапка.СуммаВознаграждения, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.ИтоговаяСтрока      = "Всего наименований " + ВыборкаСтрокТовары.Количество() 
	                                            + ", на сумму " + ФорматСумм(Итого, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьОтчетаКомитенту()

//  Функция формирует табличиный документ как акт об оказании услуг
// на сумму вознаграждения
// 
Функция ПечатьАкта()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Контрагент КАК Получатель,
	|	Организация КАК Поставщик,
	|	Организация,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	СтавкаНДСВознаграждения,
	|	СуммаВознаграждения КАК Сумма
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитентуОПродажах
	|
	|ГДЕ
	|	ОтчетКомитентуОПродажах.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетКомитентуОПродажах_АктОбУслугах";
	Макет       = ПолучитьМакет("АктОбУслугах");

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ПолноеНаименование,");

	ОбластьМакета.Параметры.ТекстЗаголовка      = СформироватьЗаголовокДокумента(Шапка, "Акт об оказании услуг");
	ОбластьМакета.Параметры.ТекстОСуммеПрописью = 
		"Сумма комиссионного вознаграждения составила " 
		+ СформироватьСуммуПрописью(Шапка.Сумма, Шапка.ВалютаДокумента)
		+ ", в том числе НДС " + Шапка.СтавкаНДСВознаграждения;

	ТабДокумент.Вывести(ОбластьМакета);
	Возврат ТабДокумент;

КонецФункции // ПечатьАкта() 

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "ОтчетКомитентуОПродажах" Тогда

		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьОтчетаКомитенту();
	ИначеЕсли ИмяМакета = "АктОбОказанииУслуг" Тогда

		// Напечатаем акт об оказании услуг на сумму комисиионного вознаграждения
		Если УдержатьКомиссионноеВознаграждение Тогда
			Ответ = Вопрос("В этом документе комиссионное вознаграждение удерживается из суммы долга перед комитентом.
			               |В печати акта об оказании услуг на сумму комиссионного вознаграждения нет необходимости.
			               |Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ТабДокумент = ПечатьАкта();
			КонецЕсли;
		Иначе
			ТабДокумент = ПечатьАкта();
		КонецЕсли;

	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();

	КонецЕсли;

	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;

	СписокМакетов.Добавить("ОтчетКомитентуОПродажах", "Отчет комитенту");
	СписокМакетов.Добавить("АктОбОказанииУслуг", "Акт об оказании услуг");

	ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

#КонецЕсли

// Процедура выполняет заполниение табличной части.
//
// Параметры:
//  ДокументПоставки - ссылка на документ основание.
//
Процедура ЗаполнитьТовары(ДокументПоставки = Неопределено, Реализованными = Ложь) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);

	Если ЗначениеНеЗаполнено(Сделка) Тогда
		Запрос.УстановитьПараметр("Сделка", Неопределено);
	Иначе
		Запрос.УстановитьПараметр("Сделка", Сделка);
	КонецЕсли;

	Запрос.УстановитьПараметр("ДокументПоставки"      , ДокументПоставки);
	Запрос.УстановитьПараметр("ВидДвиженияРасход"     , ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("СтатусПолучения"       , Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию);
	Запрос.УстановитьПараметр("Купленный"             , Перечисления.СтатусыПартийТоваров.Купленный);
	Запрос.УстановитьПараметр("НаКомиссию"            , Перечисления.СтатусыПартийТоваров.НаКомиссию);
	Запрос.УстановитьПараметр("ВидДвиженияРасход"     , ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("ОперацияПередача",       Перечисления.КодыОперацийПартииТоваров.ПередачаНаКомиссию);
	Запрос.УстановитьПараметр("ОперацияРеализация",     Перечисления.КодыОперацийПартииТоваров.Реализация);

	ТекстНоменклатура = "Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура 
	|   ИЗ Документ.ПоступлениеТоваровУслуг.Товары
	|   ГДЕ Документ.ПоступлениеТоваровУслуг.Товары.Ссылка = &ДокументПоставки)";

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Полученные.Номенклатура                                     КАК Номенклатура,
	|	Полученные.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаХраненияОстатков,
	|	Полученные.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ЕдиницаХраненияОстатковКоэффициент,
	|	Полученные.ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры, 
	|" + ?(Реализованными, "СУММА(Партии.Количество)                КАК РасходПоПартиям,
	|   СУММА(ПартииПереданные.Количество)                          КАК КоличествоРеализованных,", "") + "
	|	СУММА(Полученные.КоличествоОстаток)                         КАК КоличествоОстаток,
	|	СУММА(Заказы.КоличествоОстаток)                             КАК ОстатокЗаказанного,
	|	СУММА(Полученные.СуммаВзаиморасчетовОстаток)                КАК СуммаВзаиморасчетовОстаток,
	|	СУММА(Заказы.СуммаВзаиморасчетовОстаток)                    КАК СуммаЗаказанного
	|ИЗ
	|	РегистрНакопления.ТоварыПолученные.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента
	|" + ?(ДокументПоставки <> Неопределено, ("И " + ТекстНоменклатура), "") + "
	|                                              И Сделка                = &Сделка
	|                                              И СтатусПолучения       = &СтатусПолучения) КАК Полученные
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента
	|                                              И ЗаказПоставщику        = &Сделка
	|                                              И СтатусПартии           = &Купленный) КАК Заказы
	|ПО
	|	Полученные.Номенклатура = Заказы.Номенклатура
	| И Полученные.ХарактеристикаНоменклатуры = Заказы.ХарактеристикаНоменклатуры 
	| " + ?(Реализованными, "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК Партии
	|ПО Партии.Номенклатура = Полученные.Номенклатура
	|	И Партии.ХарактеристикаНоменклатуры = Полученные.ХарактеристикаНоменклатуры
	|	" + ?(ДокументПоставки <> Неопределено, "И Партии.ДокументОприходования = &ДокументПоставки", "И Партии.ДокументОприходования.ДоговорКонтрагента = &ДоговорКонтрагента") + "
	|	И Партии.СтатусПартии = &НаКомиссию
	|	И Партии.КодОперации = &ОперацияРеализация
	|	" + ?(ДокументПоставки <> Неопределено, ("И Партии." + ТекстНоменклатура), "") + "
	|	И Партии.ВидДвижения = &ВидДвиженияРасход
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииПередача
	|ПО ПартииПередача.Номенклатура = Полученные.Номенклатура
	|	И ПартииПередача.ХарактеристикаНоменклатуры = Полученные.ХарактеристикаНоменклатуры
	|	" + ?(ДокументПоставки <> Неопределено, "И ПартииПередача.ДокументОприходования = &ДокументПоставки", "И ПартииПередача.ДокументОприходования.ДоговорКонтрагента = &ДоговорКонтрагента") + "
	|	И ПартииПередача.СтатусПартии = &НаКомиссию
	|	И ПартииПередача.КодОперации = &ОперацияПередача
	|	" + ?(ДокументПоставки <> Неопределено, ("И ПартииПередача." + ТекстНоменклатура), "") + "
	|	И ПартииПередача.ВидДвижения = &ВидДвиженияРасход
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрНакопления.ПартииТоваровПереданные КАК ПартииПереданные
	|		ПО ПартииПереданные.Номенклатура = ПартииПередача.Номенклатура
	|		   И ПартииПереданные.ХарактеристикаНоменклатуры = ПартииПередача.ХарактеристикаНоменклатуры
	|		   И ПартииПереданные.ДокументОприходования = ПартииПередача.ДокументОприходования
	|	       И ПартииПереданные.СтатусПартии = &НаКомиссию
	|	       И ПартииПереданные.КодОперации = &ОперацияРеализация
	|	       " + ?(ДокументПоставки <> Неопределено, ("И ПартииПереданные." + ТекстНоменклатура), "") + "
	|	       И ПартииПереданные.ВидДвижения = &ВидДвиженияРасход
	|", "") + "
	|СГРУППИРОВАТЬ ПО
	|	Полученные.Номенклатура,
	|	Полученные.Номенклатура.ЕдиницаХраненияОстатков,
	|	Полученные.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
	|	Полученные.ХарактеристикаНоменклатуры
	|";

	ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		КоличествоОстатокЗаказанного = ?(Выборка.ОстатокЗаказанного = NULL, 0, Выборка. ОстатокЗаказанного);
		СуммаВзаиморасчетовОстаток   = ?(Выборка.СуммаВзаиморасчетовОстаток = NULL, 0, Выборка.СуммаВзаиморасчетовОстаток);
		КоличествоОстаток            = ?(Выборка.КоличествоОстаток = NULL, 0, Выборка.КоличествоОстаток);

		СуммаЗаказанного = ?(Выборка.СуммаЗаказанного = NULL, 0, Выборка.СуммаЗаказанного);

		Если Не Реализованными Тогда
			КоличествоДляОтчета = Выборка.КоличествоОстаток - КоличествоОстатокЗаказанного; 
		Иначе
			РасходПоПартиям = ?(Выборка.РасходПоПартиям = NULL, 0, Выборка.РасходПоПартиям) + ?(Выборка.КоличествоРеализованных = NULL, 0, Выборка.КоличествоРеализованных);
			КоличествоДляОтчета = Мин(Выборка.КоличествоОстаток - КоличествоОстатокЗаказанного, РасходПоПартиям);
		КонецЕсли; 

		Если КоличествоДляОтчета <= 0 Тогда
			Продолжить;
		КонецЕсли;

		Если ЗначениеНеЗаполнено(Выборка.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = Товары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.Количество       = КоличествоДляОтчета;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент      = Выборка.ЕдиницаХраненияОстатковКоэффициент;
		СтрокаТабличнойЧасти.ЦенаПоступления  = ПересчитатьИзВалютыВВалюту(Выборка.СуммаВзаиморасчетовОстаток - СуммаЗаказанного, 
														ВалютаВзаиморасчетов, ВалютаДокумента, КурсВзаиморасчетов, 
														КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов, КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)) 
														 / (КоличествоОстаток - КоличествоОстатокЗаказанного);

		СтрокаТабличнойЧасти.СуммаПоступления    = СтрокаТабличнойЧасти.ЦенаПоступления * КоличествоДляОтчета;
		СтрокаТабличнойЧасти.Цена                = СтрокаТабличнойЧасти.ЦенаПоступления;
		СтрокаТабличнойЧасти.Сумма               = СтрокаТабличнойЧасти.СуммаПоступления;
		СтрокаТабличнойЧасти.ДокументПоступления = ДокументПоставки;

		Если СпособРасчетаКомиссионногоВознаграждения
			 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
			СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения / 100
			                                    * СтрокаТабличнойЧасти.Сумма;
			СтрокаТабличнойЧасти.СуммаНДСВознаграждения = РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаВознаграждения,
																		Истина, Истина, 
																		ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТовары()

// Процедура выполняет заполнение табличной части реализованными товарами
// на основании данных регистра "Реализованные товары комитента"
//
// ДокументПоставки - если задан, то заполняет товарами, полученными по 
//                    заданному документу
//
Процедура ЗаполнитьРеализованными(ДокументПоставки = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ДокументПоставки", ДокументПоставки);
	Если ЗначениеНеЗаполнено(Сделка) Тогда
		Запрос.УстановитьПараметр("Сделка", Неопределено);
	Иначе
		Запрос.УстановитьПараметр("Сделка", Сделка);
	КонецЕсли;

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Полученные.Номенклатура,
	|	Полученные.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	Полученные.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	Полученные.ХарактеристикаНоменклатуры,
	|	Реализованные.СерияНоменклатуры,
	|	Реализованные.ДокументПоставки,
	| 	МАКСИМУМ(Полученные.КоличествоОстаток)          КАК КоличествоПолученных, 
	|	МАКСИМУМ(Полученные.СуммаВзаиморасчетовОстаток) КАК СуммаПоступления,
	|	СУММА(Реализованные.ВыручкаОстаток)             КАК Выручка,
	|	СУММА(Реализованные.КоличествоОстаток)          КАК КоличествоРеализованных
	|ИЗ
	|   РегистрНакопления.ТоварыПолученные.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента
	|                                                И Сделка = &Сделка) КАК Полученные
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.РеализованныеТовары.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента И Сделка = &Сделка
	|                                                 " + ?(ЗначениеНеЗаполнено(ДокументПоставки), "", "И ДокументПоставки = &ДокументПоставки ") + ") КАК Реализованные
	|ПО
	|	Полученные.Номенклатура                 = Реализованные.Номенклатура
	|	И Полученные.ХарактеристикаНоменклатуры = Реализованные.ХарактеристикаНоменклатуры
	|СГРУППИРОВАТЬ ПО
	|	Полученные.Номенклатура,
	|	Полученные.ХарактеристикаНоменклатуры,
	|	Реализованные.СерияНоменклатуры,
	|	Реализованные.ДокументПоставки
	|
	|";	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		КоличествоРеализованных = ?(Выборка.КоличествоРеализованных = NULL, 0, Выборка.КоличествоРеализованных);
		Выручка                 = ?(Выборка.Выручка = NULL, 0, Выборка.Выручка);
		Количество              = Мин(Выборка.КоличествоПолученных, КоличествоРеализованных);

		Если Количество = 0 Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.ДокументПоступления        = Выборка.ДокументПоставки;
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент                = Выборка.Коэффициент;
		НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		НоваяСтрока.Количество                 = Количество;
		НоваяСтрока.Сумма                      = Выручка * НоваяСтрока.Количество / КоличествоРеализованных;
		НоваяСтрока.СуммаПоступления           = Выборка.СуммаПоступления * НоваяСтрока.Количество / Выборка.КоличествоПолученных;
		НоваяСтрока.Цена                       = НоваяСтрока.Сумма / НоваяСтрока.Количество;
		НоваяСтрока.ЦенаПоступления            = НоваяСтрока.СуммаПоступления / НоваяСтрока.Количество;

		Если СпособРасчетаКомиссионногоВознаграждения
			 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
			НоваяСтрока.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения
			                                    * НоваяСтрока.Сумма / 100;
			НоваяСтрока.СуммаНДСВознаграждения = РассчитатьСуммуНДС(НоваяСтрока.СуммаВознаграждения,
																		Истина, Истина, 
																		ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));
		ИначеЕсли СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтПрибыли Тогда
			НоваяСтрока.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения
			                                    * (НоваяСтрока.Сумма - НоваяСтрока.СуммаПоступления) / 100;
			НоваяСтрока.СуммаНДСВознаграждения = РассчитатьСуммуНДС(НоваяСтрока.СуммаВознаграждения,
																		Истина, Истина, 
																		ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьРеализованными()

Процедура ЗаполнитьДокументПоОснованиюУпр(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Если Не ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			Возврат;
		КонецЕсли;
		
		Если Основание.Проведен Тогда

			Сделка = Основание;
			СпособРасчетаКомиссионногоВознаграждения = ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
			ПроцентКомиссионногоВознаграждения       = ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;

			ЗаполнитьТовары();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьДокументПоОснованиюУпр()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Добавляем колонки, используемые при проведении.
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("Стоимость"          , ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок" , ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		// Колонка для проведения по регистру ТоварыПолученные, не зависит от флага удержания вознаграждения.
		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаПоступления;

		// Стимость для регистра "Продажи" - сумма комиссионного вознаграждения в валюте упр. учета
		СтрокаТаблицы.Стоимость = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВознаграждения, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Стоимость;

	КонецЦикла;

КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоДенежнымСредствам - результат запроса по табличной части "ДенежныеСредства",
//  СтруктураШапкиДокумента             - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуДенежныхСредств(РезультатЗапросаПоДенежнымСредствам, СтруктураШапкиДокумента)

	ТаблицаДенежныхСредств = РезультатЗапросаПоДенежнымСредствам.Выгрузить();

	// Вызываем отдельные процедуры подготовки для упр. учета
	ПодготовитьТаблицуДенежныхСредствУпр(ТаблицаДенежныхСредств, СтруктураШапкиДокумента);

	Возврат ТаблицаДенежныхСредств;

КонецФункции // ПодготовитьТаблицуДенежныхСредств()

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
// Параметры: 
//  РезультатЗапросаПоДенежнымСредствам - результат запроса по табличной части "ДенежныеСредства",
//  СтруктураШапкиДокумента             - выборка по результату запроса по шапке документа.
//
Процедура ПодготовитьТаблицуДенежныхСредствУпр(ТаблицаДенежныхСредств, СтруктураШапкиДокумента)

	// Надо добавить колонки.
	ТаблицаДенежныхСредств.Колонки.Добавить("СуммаВзаиморасчетов", ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаДенежныхСредств.Колонки.Добавить("СуммаУпр", ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаДенежныхСредств Цикл

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		                                    СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                                    СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		                                    СтруктураШапкиДокумента.КратностьДокумента,
		                                    КратностьВзаиморасчетов);

		СтрокаТаблицы.СуммаУпр            = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		                                    СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                    СтруктураШапкиДокумента.КурсДокумента,
		                                    СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                    СтруктураШапкиДокумента.КратностьДокумента,
		                                    СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуДенежныхСредствУпр()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Организация, ВалютаДокумента, Контрагент, ДоговорКонтрагента, СпособРасчетаКомиссионногоВознаграждения, КратностьВзаиморасчетов");

	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	 ИЛИ СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка");
	КонецЕсли;

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма, ДокументПоступления");

	КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, "Товары", СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "ДенежныеСредства".
//
// Параметры:
// Параметры: 
//  ТаблицаПоДенежнымСредствам - таблица значений, содержащая данные для проведения и проверки 
//                               ТЧ ТаблицаПоДенежнымСредствам
//  СтруктураШапкиДокумента    - выборка из результата запроса по шапке документа,
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиДенежныеСредства(ТаблицаПоДенежнымСредствам, СтруктураШапкиДокумента,
                                                            Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидОтчетаПоПлатежам, Сумма, СтавкаНДС");

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДенежныеСредства", СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиДенежныеСредства()

// По результатам запросов и данным документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения            - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента    - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам           - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  ТаблицаПоДенежнымСредствам - таблица значений, содержащая данные для проведения и проверки ТЧ ДенежныеСредства,
//  Отказ                      - флаг отказа в проведении,
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, 
                              ТаблицаПоДенежнымСредствам, Отказ, Заголовок);

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, 
	                       ТаблицаПоДенежнымСредствам, Отказ, Заголовок);

	ДвиженияПоРегистрамВзаиморасчетовДляНДС(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);

	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ДвиженияПоРегистрам()

// По результатам запросов и данным документа формируем движения по регистрам упр. учета.
//
// Параметры: 
//  РежимПроведения            - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента    - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам           - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  ТаблицаПоДенежнымСредствам - таблица значений, содержащая данные для проведения и проверки ТЧ ДенежныеСредства,
//  Отказ                      - флаг отказа в проведении,
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам,
                                 ТаблицаПоДенежнымСредствам, Отказ, Заголовок)
	
	Если ОтражатьВУправленческомУчете Тогда

		// Если комиссионное вознаграждение удерживается, то на него уменьшаем сумму долга.
		СуммаДолга = ?(СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение, СуммаДокумента - СуммаВознаграждения, СуммаДокумента);

		// По регистру ВзаиморасчетыСКонтрагентами.
		НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		// Заполним таблицу движений.
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.ДоговорКонтрагента  = ДоговорКонтрагента;
		СтрокаДвижений.Сделка              = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
		СтрокаДвижений.СуммаВзаиморасчетов = СуммаДолга;
		СтрокаДвижений.СуммаУпр            = ПересчитатьИзВалютыВВалюту(СуммаДолга, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
											 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
											 КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
											 КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		НаборДвижений.мПериод              = Дата;
		НаборДвижений.мТаблицаДвижений     = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
		КонецЕсли;

		// Долг перед комитентом за комиссионное вознаграждение фиксируем только тогда, когда оно не удерживается.
		Если Не СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение 
		   И СуммаВознаграждения <> 0 Тогда

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.ДоговорКонтрагента  = ДоговорКонтрагента;
			СтрокаДвижений.Сделка              = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
			СтрокаДвижений.СуммаВзаиморасчетов = СуммаВознаграждения;
			СтрокаДвижений.СуммаУпр            = ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
												 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
												 КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
												 КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			НаборДвижений.мПериод              = Дата;
			НаборДвижений.мТаблицаДвижений     = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();
			КонецЕсли;

		КонецЕсли;

	//+++( 01.04.2019 ВЫКЛЮЧЕНО движение по регистру "РасчетыСКонтрагентами".
		//НаборДвижений = Движения.РасчетыСКонтрагентами;

		//// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		//ТаблицаДвижений = НаборДвижений.Выгрузить();

		//// Заполним таблицу движений.
		//СтрокаДвижений = ТаблицаДвижений.Добавить();
		//СтрокаДвижений.РасчетыВозврат      = Перечисления.РасчетыВозврат.Расчеты;
		//СтрокаДвижений.ДоговорКонтрагента  = ДоговорКонтрагента;
		//СтрокаДвижений.Сделка              = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,, Истина);
		//СтрокаДвижений.СуммаВзаиморасчетов = СуммаДолга;
		//СтрокаДвижений.СуммаУпр            = ПересчитатьИзВалютыВВалюту(СуммаДолга, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		//									 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		//									 КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		//									 КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		//НаборДвижений.мПериод              = Дата;
		//НаборДвижений.мТаблицаДвижений     = ТаблицаДвижений;

		//Если Не Отказ Тогда
		//	Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
		//КонецЕсли;

		////--------- Долг перед комитентом за комиссионное вознаграждение фиксируем только тогда, когда оно не удерживается.
		//// При этих же условиях проводим по продажам.
		//Если Не СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение 
		//   И СуммаВознаграждения <> 0 Тогда

		//	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		//	ТаблицаДвижений = НаборДвижений.Выгрузить();
		//	ТаблицаДвижений.Очистить();

		//	// Заполним таблицу движений.
		//	СтрокаДвижений = ТаблицаДвижений.Добавить();
		//	СтрокаДвижений.РасчетыВозврат      = Перечисления.РасчетыВозврат.Расчеты;
		//	СтрокаДвижений.ДоговорКонтрагента  = ДоговорКонтрагента;
		//	СтрокаДвижений.Сделка              = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,, Истина);
		//	СтрокаДвижений.СуммаВзаиморасчетов = СуммаВознаграждения;
		//	СтрокаДвижений.СуммаУпр            = ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		//										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		//										 КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		//										 КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		//	НаборДвижений.мПериод              = Дата;
		//	НаборДвижений.мТаблицаДвижений     = ТаблицаДвижений;
		//	Если Не Отказ Тогда
		//		Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
		//	КонецЕсли;
		//КонецЕсли;
 //+++)
 
		// По регистру ПРОДАЖИ.
		НаборДвижений = Движения.Продажи;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		ТаблицаПродажи = ТаблицаПоТоварам.Скопировать();
		
		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПродажи, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументПродажи");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента), "ЗаказПокупателя");
		ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
		ТаблицаДвижений.ЗаполнитьЗначения(0, "Количество");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.Продажи.ВыполнитьДвижения();
		КонецЕсли;

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыПолученные.

		НаборДвижений = Движения.ТоварыПолученные;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента), "Сделка");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию,"СтатусПолучения");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		// Проверка осатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;

		Если Не Отказ Тогда
			Движения.ТоварыПолученные.ВыполнитьРасход();
		КонецЕсли;

		// ПО РЕГИСТРУ РеализованныеТовары
		
		НаборДвижений = Движения.РеализованныеТовары;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		ТаблицаПродажи = ТаблицаПоТоварам.Скопировать();
		
		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПродажи, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");

		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		   И ТипЗНЧ(СтруктураШапкиДокумента.Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда

			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка,"Сделка");
		КонецЕсли;

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.РеализованныеТовары.ВыполнитьРасход();
		КонецЕсли;
		
	КонецЕсли;

	//ДЕНЕЖНЫЕ СРЕДСТВА КОМИТЕНТА
	// По денежным средствам комитента проводим только если в договоре выставлен флаг.
	Если СтруктураШапкиДокумента.КонтролироватьДенежныеСредстваКомитента Тогда

		НаборДвижений = Движения.ДенежныеСредстваКомитента;

		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		ТаблицаДенежныеСредства = ТаблицаПоДенежнымСредствам.Скопировать();

		Сч = 0;
		// Зачеты аванса в движения не включаем.
		Пока Сч < ТаблицаДенежныеСредства.Количество() Цикл
			СтрокаТаблицы = ТаблицаДенежныеСредства.Получить(Сч);
			Если СтрокаТаблицы.ВидОтчетаПоПлатежам = Перечисления.ВидыОтчетовПоПлатежамКомиссия.ЗачетАванса Тогда 
				 ТаблицаДенежныеСредства.Удалить(СтрокаТаблицы);
			Иначе 
				Сч = Сч + 1;
			КонецЕсли; 
		КонецЦикла;
		
		ЗагрузитьВТаблицуЗначений(ТаблицаДенежныеСредства, ТаблицаДвижений);

		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента), "Сделка");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ДенежныеСредстваКомитента.ВыполнитьПриход();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Формирует движения по регистрам взаиморасчетов для НДС
//
// Параметры:
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамВзаиморасчетовДляНДС(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)

	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;

	// По регистру ВзаиморасчетыСПокупателямиДляНДС.
	НаборДвижений = Движения.ВзаиморасчетыСПоставщикамиДляНДС;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	СтрокаДвижений = ТаблицаДвижений.Добавить();

	СтрокаДвижений.Организация        = СтруктураШапкиДокумента.Организация;
	СтрокаДвижений.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
	СтрокаДвижений.Сделка             = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);;

	// Если комиссионное вознаграждение удерживается, то на него уменьшаем сумму долга.
	СуммаДолга = ?(СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение, СуммаДокумента - СуммаВознаграждения, СуммаДокумента);
	СтрокаДвижений.Сумма   = ПересчитатьИзВалютыВВалюту(СуммаДолга, ВалютаДокумента,
	                                                    мВалютаРегламентированногоУчета,
	                                                    КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
	                                                    1,
	                                                    КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
	                                                    1);

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ВзаиморасчетыСПоставщикамиДляНДС.ВыполнитьПриход();
	КонецЕсли;

	// Долг перед комитентом за комиссионное вознаграждение фиксируем только тогда, когда оно не удерживается
	Если Не СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение Тогда

		// По регистру ВзаиморасчетыСПоставщикамиДляНДС.
		НаборДвижений = Движения.ВзаиморасчетыСПокупателямиДляНДС;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		// Заполним таблицу движений.
		СтрокаДвижений = ТаблицаДвижений.Добавить();

		СтрокаДвижений.Организация        = СтруктураШапкиДокумента.Организация;
		СтрокаДвижений.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
		СтрокаДвижений.Сделка             = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);;

		СтрокаДвижений.Сумма   = ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, ВалютаДокумента,
		                                                    мВалютаРегламентированногоУчета,
		                                                    КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
		                                                    1,
		                                                    КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
		                                                    1);

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ВзаиморасчетыСПокупателямиДляНДС.ВыполнитьПриход();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамВзаиморасчетовДляНДС()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки" и "НДСПродажи"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)

	ТаблицаДвиженийПродажи = Движения.НДСПродажи.Выгрузить();
	ТаблицаДвиженийПродажи.Очистить();

	ПараметрыУчетнойПолитики = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.ПолучитьПоследнее(СтруктураШапкиДокумента.Дата, Новый Структура("Организация", СтруктураШапкиДокумента.Организация));

	// Отражаем в подсистеме НДС реализацию посреднических услуг
	СформироватьДвиженияВыбытияПоРегиструНДСПродажи(СтруктураШапкиДокумента, ПараметрыУчетнойПолитики, ТаблицаПоТоварам, ТаблицаДвиженийПродажи);
	
	// Переопределяем вид ценности 
	ТаблицаДвиженийПродажи.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.ПосредническиеУслуги, "ВидЦенности");

	Если ТаблицаДвиженийПродажи.Количество() > 0 Тогда
		Движения.НДСПродажи.мПериод          = Дата;
		Движения.НДСПродажи.мТаблицаДвижений = ТаблицаДвиженийПродажи;
		Движения.НДСПродажи.ДобавитьДвижение();
		Движения.НДСПродажи.Записать();
	КонецЕсли;
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке)
	
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");
	
КонецПроцедуры // ДополнитьДеревоПолейЗапросаПоШапкеУпр()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)


	СтавкаНДСВознаграждения = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяСтавкаНДС");
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		 ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			Сделка = Основание.Сделка;
		КонецЕсли;

		Если Не ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			СообщитьОбОшибке("Договор с контрагентом должен иметь вид договора с комитентом!");
			Возврат;
		КонецЕсли;

		СпособРасчетаКомиссионногоВознаграждения = ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
		ПроцентКомиссионногоВознаграждения       = ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
		Если Основание.Проведен Тогда
			ЗаполнитьРеализованными(Основание);
		КонецЕсли;

	КонецЕсли;
	
	ЗаполнитьДокументПоОснованиюУпр(Основание);

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	// Проверка заполнения единицы измерения мест и количества мест
	ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента      = Товары.Итог("Сумма");
	СуммаВознаграждения = Товары.Итог("СуммаВознаграждения");
	
	СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект);
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 

	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = СформироватьДеревоПолейЗапросаПоШапке();
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов"                  , "ВедениеВзаиморасчетов");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов"                   , "ВалютаВзаиморасчетов");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "РасчетыВУсловныхЕдиницах"               , "РасчетыВУсловныхЕдиницах");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"                            , "ДоговорОрганизация");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "КонтролироватьДенежныеСредстваКомитента", "КонтролироватьДенежныеСредстваКомитента");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка",               "ВидОперации"                            , "СделкаВидОперации");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка",               "Склад.ВидСклада"                        , "ВидСклада");

	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ЦенаПродажи"               , "Цена");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("Выручка"                   , "Сумма");
	СтруктураПолей.Вставить("СуммаПоступления"          , "СуммаПоступления");
	СтруктураПолей.Вставить("СуммаВознаграждения"       , "СуммаВознаграждения");
	СтруктураПолей.Вставить("СтавкаНДСВознаграждения"   , "Ссылка.СтавкаНДСВознаграждения");
	СтруктураПолей.Вставить("НДСВознаграждения"    		, "СуммаНДСВознаграждения");
	СтруктураПолей.Вставить("НомерСтроки"               , "НомерСтроки");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ДокументПоставки"          , "ДокументПоступления");

	РезультатЗапросаПоТоварам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	ТаблицаПоДенежнымСредствам = Новый ТаблицаЗначений();
	Если НЕ Отказ И СтруктураШапкиДокумента.КонтролироватьДенежныеСредстваКомитента Тогда

		СтруктураПолей = Новый Структура();
		СтруктураПолей.Вставить("ВидОтчетаПоПлатежам", "ВидОтчетаПоПлатежам");
		СтруктураПолей.Вставить("Сумма"              , "Сумма");
		СтруктураПолей.Вставить("СтавкаНДС"          , "СтавкаНДС");
		СтруктураПолей.Вставить("СуммаНДС"           , "СуммаНДС");

		РезультатЗапросаПоДенежнымСредствам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДенежныеСредства", СтруктураПолей);

		// Подготовим таблицу денежных средств для проведения.
		ТаблицаПоДенежнымСредствам = ПодготовитьТаблицуДенежныхСредств(РезультатЗапросаПоДенежнымСредствам, СтруктураШапкиДокумента);

		// Проверить заполнение ТЧ "ДенежныеСредства"
		ПроверитьЗаполнениеТабличнойЧастиДенежныеСредства(ТаблицаПоДенежнымСредствам, СтруктураШапкиДокумента, Отказ, Заголовок);

	КонецЕсли;

	ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Истина);
	
	//Проверим на возможность проведения в БУ и НУ.
	Если ОтражатьВБухгалтерскомУчете 
	 Или ОтражатьВНалоговомУчете Тогда
		ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, ВалютаДокумента,
		                                     ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, мВалютаРегламентированногоУчета, 
		                                     Ложь, Отказ, Заголовок, "", СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                                     СтруктураШапкиДокумента.РасчетыВУсловныхЕдиницах);
	КонецЕсли;

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, 
		                    ТаблицаПоДенежнымСредствам, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
