// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

// Хранит таблицу, использующуюся при проведении документа
Перем ТаблицаПлатежейУпр;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

//Заполняет сумму документа и расшифровку платежа по расчетному документу
 //
Процедура ЗаполнитьПоРасчетномуДокументуУпр() Экспорт
	
	Организация=РасчетныйДокумент.Организация;
	СчетОрганизации=РасчетныйДокумент.СчетОрганизации;
	
	Контрагент=РасчетныйДокумент.Контрагент;
	СчетКонтрагента=РасчетныйДокумент.СчетКонтрагента;
	
	ВалютаДокумента=РасчетныйДокумент.ВалютаДокумента;
	СтруктураКурсаДокумента   = ПолучитьКурсВалюты(ВалютаДокумента,Дата);
	КурсДокумента      = СтруктураКурсаДокумента.Курс;
	КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	
	ВидОперации=РасчетныйДокумент.ВидОперации;
	ЕстьРасчетыСКонтрагентами=ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=ЕстьРасчетыПоКредитам(ВидОперации);
	
	ОтраженоВОперУчете          = РасчетныйДокумент.ОтраженоВОперУчете;
	ОтражатьВБухгалтерскомУчете = РасчетныйДокумент.ОтражатьВБухгалтерскомУчете;
	ОтражатьВНалоговомУчете     = РасчетныйДокумент.ОтражатьВНалоговомУчете;
		
	ТекстЗапроса="ВЫБРАТЬ
	|	ДенежныеСредстваКПолучениюОстатки.ДокументПолучения,
	|	ДенежныеСредстваКПолучениюОстатки.СуммаОстаток,
	|	ДенежныеСредстваКПолучениюОстатки.СтатьяДвиженияДенежныхСредств,
	|	РасчетныйДокумент.ДоговорКонтрагента,
	|	РасчетныйДокумент.Сделка,
	|	РасчетныйДокумент.Ссылка.СуммаДокумента КАК СуммаДокумента,
	|	РасчетныйДокумент.СуммаПлатежа,
	|	РасчетныйДокумент.КурсВзаиморасчетов,
	|	РасчетныйДокумент.КратностьВзаиморасчетов,
	|	РасчетныйДокумент.СуммаВзаиморасчетов,
	|	РасчетныйДокумент.СтавкаНДС,
	|	РасчетныйДокумент.СуммаНДС,
	|	РасчетныйДокумент.ДокументПланированияПлатежа,
	|	РасчетныйДокумент.Проект 
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКПолучению.Остатки(, ДокументПолучения=&РасчетныйДокумент) КАК ДенежныеСредстваКПолучениюОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ."+РасчетныйДокумент.Метаданные().Имя+".РасшифровкаПлатежа КАК РасчетныйДокумент
	|		ПО ДенежныеСредстваКПолучениюОстатки.ДокументПолучения = РасчетныйДокумент.Ссылка
	|		И  ДенежныеСредстваКПолучениюОстатки.СтатьяДвиженияДенежныхСредств=РасчетныйДокумент.СтатьяДвиженияДенежныхСредств";
	
	Запрос=Новый Запрос;
	Запрос.Текст=ТекстЗапроса;
	Запрос.УстановитьПараметр("РасчетныйДокумент",РасчетныйДокумент);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
		
		СтрокаПлатеж.ДоговорКонтрагента=Результат.ДоговорКонтрагента;
		СтрокаПлатеж.Сделка=Результат.Сделка;
		СтрокаПлатеж.КурсВзаиморасчетов=Результат.КурсВзаиморасчетов;
		СтрокаПлатеж.КратностьВзаиморасчетов=Результат.КратностьВзаиморасчетов;
		СтрокаПлатеж.СтавкаНДС=Результат.СтавкаНДС;
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Результат.СтатьяДвиженияДенежныхСредств;
		СтрокаПлатеж.ДокументПланированияПлатежа=Результат.ДокументПланированияПлатежа;
		СтрокаПлатеж.Проект=Результат.Проект;
		
		КоэффициентПересчета=?(Результат.СуммаДокумента=0,0,Результат.СуммаОстаток/Результат.СуммаДокумента);
		
		СтрокаПлатеж.СуммаПлатежа=Результат.СуммаПлатежа*КоэффициентПересчета;
		СтрокаПлатеж.СуммаВзаиморасчетов=Результат.СуммаВзаиморасчетов*КоэффициентПересчета;
		СтрокаПлатеж.СуммаНДС=Результат.СуммаНДС*КоэффициентПересчета;
		
	КонецЦикла;
	
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры // ЗаполнитьПоРасчетномуДокументуУпр()

// Определяет номер расчетного счета по
// переданному банковскому счету
//
// Параметры:
//  СчетКонтра - справочник.БанковскиеСчета
//
// Возвращаемое значение
//  Номер расчетного счета
//
Функция ВернутьРасчетныйСчет(СчетКонтра)

	БанкДляРасчетов = СчетКонтра.БанкДляРасчетов;
	Возврат ?(БанкДляРасчетов.Пустая(), СчетКонтра.НомерСчета, БанкДляРасчетов.КоррСчет);

КонецФункции // ВернутьРасчетныйСчет()

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейОплатаУпр()

	СтруктураПолей=Новый Структура;
	СтруктураПолей.Вставить("СчетОрганизации");
	СтруктураПолей.Вставить("СуммаДокумента");
	СтруктураПолей.Вставить("ДатаОплаты","Не указана дата оплаты документа банком!");

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплатаУпр()

// Формирует структуру полей, обязательных для заполнения при отражении операции во 
// взаиморасчетах
// Возвращаемое значение:
//   СтруктурахПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейРасчетыУпр()

	СтруктураПолей= Новый Структура("Организация,СчетОрганизации, Ответственный,СуммаДокумента");

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейРасчетыУпр()

// Проверяет значение, необходимое при проведении
Процедура ПроверитьЗначение(Значение, Отказ, Заголовок, ИмяРеквизита)
	
	Если ЗначениеНеЗаполнено(Значение) Тогда 
		
		ОшибкаПриПроведении("Не заполнено значение реквизита """+ИмяРеквизита+"""",Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗначение()

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧ(Отказ, Заголовок)

	Для Каждого Платеж Из РасшифровкаПлатежа Цикл

		ПроверитьЗначение(Платеж.ДоговорКонтрагента,Отказ, Заголовок,"Договор");
		ПроверитьЗначение(Платеж.СуммаВзаиморасчетов,Отказ, Заголовок,"Сумма взаиморасчетов");
		
		Если Не Отказ Тогда
			
			// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
			Если Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
			 ИЛИ Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			 
				ПроверитьЗначение(Платеж.Сделка, Отказ, Заголовок,"Сделка");
				Если Отказ Тогда
					Сообщить("По выбранному договору установлен способ ведения взаиморасчетов ""по заказам""! 
					|Заполните поле ""Сделка""!");
				КонецЕсли;
				
			КонецЕсли;

			Если Не ЗначениеНеЗаполнено(Организация) 
				И Организация <> Платеж.ДоговорКонтрагента.Организация Тогда
				СообщитьОбОшибке("Выбран договор контрагента, не соответстветствующий организации, указанной в документе!", Отказ, Заголовок);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТЧ

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, Отказ, Заголовок)

	РасчетыВозврат=НаправленияДвиженияДляДокументаДвиженияДенежныхСредствУпр(ВидОперации);
	КоэффициентСторно=?(РасчетыВозврат=Перечисления.РасчетыВозврат.Возврат,-1,1);
	
	РасчетыСКонтрагентами = ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам;
		
	ДвиженияПоСтатьям=ТаблицаПлатежейУпр.Скопировать();
	ДвиженияПоПланируемымПлатежам=ТаблицаПлатежейУпр.Скопировать();
	ДвиженияПоРезерву=ТаблицаПлатежейУпр.Скопировать();
	ДвиженияПоКонтрагентам=ТаблицаПлатежейУпр.Скопировать();
	ДвиженияДенежныхСредств=ТаблицаПлатежейУпр.Скопировать();
	
	ДвиженияПоПланируемымПлатежам.Свернуть("ДокументПланированияПлатежа,ВключатьВПлатежныйКалендарь,ДоговорКонтрагента,Сделка,СтатьяДвиженияДенежныхСредств,Проект","СуммаПлатежа,СуммаВзаиморасчетов,СуммаПлатежаПлан,СуммаУпр");
	ДвиженияПоКонтрагентам.Свернуть("ДоговорКонтрагента,Сделка,ВидДоговора,КонтролироватьДенежныеСредстваКомитента","СуммаВзаиморасчетов,СуммаУпр,СуммаРегл");
	ДвиженияДенежныхСредств.Свернуть("ДокументПланированияПлатежа,ДоговорКонтрагента,Сделка,СтатьяДвиженияДенежныхСредств,Проект","СуммаПлатежа,СуммаУпр");
	ДвиженияПоСтатьям.Свернуть("СтатьяДвиженияДенежныхСредств","СуммаПлатежа");
	ДвиженияПоРезерву.Свернуть("ДокументПланированияПлатежа","СуммаПлатежа");
	
	ДвиженияДенежныхСредств.Колонки["СуммаПлатежа"].Имя="Сумма";
		
	// По регистру "Денежные средства"
	НаборДвиженийОстатки 		= Движения.ДенежныеСредства;
	ТаблицаДвиженийОстатки 		= НаборДвиженийОстатки.Выгрузить();

	// По регистру "Денежные средства к получению"
	НаборДвиженийПолучение   = Движения.ДенежныеСредстваКПолучению;
	ТаблицаДвиженийПолучение = НаборДвиженийПолучение.Выгрузить();
	
	СтрокаКурсыВалют=ТаблицаПлатежейУпр[0];
							
	СуммаУпр = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
			Константы.ВалютаУправленческогоУчета.Получить(), 
			СтрокаКурсыВалют.КурсДокумента,
			СтрокаКурсыВалют.КурсУпрУчета, 
			СтрокаКурсыВалют.КратностьДокумента,
			СтрокаКурсыВалют.КратностьУпрУчета);
				
	СтрокаДвиженийОстатки = ТаблицаДвиженийОстатки.Добавить();
	СтрокаДвиженийОстатки.БанковскийСчетКасса = СчетОрганизации;
	СтрокаДвиженийОстатки.ВидДенежныхСредств  = Перечисления.ВидыДенежныхСредств.Безналичные;
	СтрокаДвиженийОстатки.Сумма               = СуммаДокумента;
	СтрокаДвиженийОстатки.СуммаУпр            = СуммаУпр;
	
	НаборДвиженийОстатки.мПериод              = КонецДня(ДатаОплаты);
	НаборДвиженийОстатки.мТаблицаДвижений     = ТаблицаДвиженийОстатки;
	Движения.ДенежныеСредства.ВыполнитьПриход();
		
	// По регистру "Денежные средства к получению"
	Для Каждого СтрокаДвижение Из ДвиженияПоСтатьям Цикл
		
		СтрокаДвиженийПолучение = ТаблицаДвиженийПолучение.Добавить();
		СтрокаДвиженийПолучение.БанковскийСчетКасса = СчетОрганизации;
		СтрокаДвиженийПолучение.ВидДенежныхСредств  = Перечисления.ВидыДенежныхСредств.Безналичные;
		СтрокаДвиженийПолучение.Сумма               = СтрокаДвижение.СуммаПлатежа;
		СтрокаДвиженийПолучение.ДокументПолучения    = Ссылка;
		СтрокаДвиженийПолучение.СтатьяДвиженияДенежныхСредств=СтрокаДвижение.СтатьяДвиженияДенежныхСредств;
		
	КонецЦикла;
		
	НаборДвиженийПолучение.мПериод              = КонецДня(ДатаОплаты);
	НаборДвиженийПолучение.мТаблицаДвижений     = ТаблицаДвиженийПолучение;
	Движения.ДенежныеСредстваКПолучению.ВыполнитьРасход();
	
	Для Каждого СтрокаРезерв ИЗ ДвиженияПоРезерву Цикл
		
		// Резервируем денежные средства, если приход планировался и по нему размещались заявки
		Если НЕ СтрокаРезерв.ДокументПланированияПлатежа.Пустая() Тогда
			
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	РазмещениеЗаявокНаРасходованиеСредствОстатки.ДокументРезервирования КАК Заявка,
			|	РазмещениеЗаявокНаРасходованиеСредствОстатки.СуммаОстаток КАК СуммаОстаток,
			|	РазмещениеЗаявокНаРасходованиеСредствОстатки.ДокументРезервирования.ДатаРасхода КАК ДокументРезервированияДатаРасхода
			|ИЗ
			|	РегистрНакопления.РазмещениеЗаявокНаРасходованиеСредств.Остатки(, ДокументПланирования=&ДокументПланирования) КАК РазмещениеЗаявокНаРасходованиеСредствОстатки
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДокументРезервированияДатаРасхода";
			
			Запрос.УстановитьПараметр("ДокументПланирования",СтрокаРезерв.ДокументПланированияПлатежа);
			
			Результат=Запрос.Выполнить();
			
			Если НЕ Результат.Пустой() Тогда
				
				СуммаРезерв=СтрокаРезерв.СуммаПлатежа;	
				
				НаборРазмещение=Движения.РазмещениеЗаявокНаРасходованиеСредств;
				ТаблицаРазмещение=НаборРазмещение.Выгрузить();
				ТаблицаРазмещение.Очистить();
				
				НаборРезерв=Движения.ДенежныеСредстваВРезерве;
				ТаблицаРезерв=НаборРезерв.Выгрузить();
				ТаблицаРезерв.Очистить();
				
				Выборка=Результат.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					Если Выборка.СуммаОстаток>=СуммаРезерв Тогда
						
						СтрокаРазмещение=ТаблицаРазмещение.Добавить();
						СтрокаРазмещение.ДокументПланирования=СтрокаРезерв.ДокументПланированияПлатежа;
						СтрокаРазмещение.ДокументРезервирования=Выборка.Заявка;
						СтрокаРазмещение.Сумма=СуммаРезерв;
						
						СтрокаРезерв=ТаблицаРезерв.Добавить();
						СтрокаРезерв.БанковскийСчетКасса=СчетОрганизации;
						СтрокаРезерв.ВидДенежныхСредств=Перечисления.ВидыДенежныхСредств.Безналичные;
						СтрокаРезерв.ДокументРезервирования=Выборка.Заявка;
						СтрокаРезерв.Сумма=СуммаРезерв;
						
						Прервать;
						
					Иначе
						
						СтрокаРазмещение=ТаблицаРазмещение.Добавить();
						СтрокаРазмещение.ДокументПланирования=СтрокаРезерв.ДокументПланированияПлатежа;
						СтрокаРазмещение.ДокументРезервирования=Выборка.Заявка;
						СтрокаРазмещение.Сумма=Выборка.СуммаОстаток;
						
						СтрокаРезерв=ТаблицаРезерв.Добавить();
						СтрокаРезерв.БанковскийСчетКасса=СчетОрганизации;
						СтрокаРезерв.ВидДенежныхСредств=Перечисления.ВидыДенежныхСредств.Безналичные;
						СтрокаРезерв.ДокументРезервирования=Выборка.Заявка;
						СтрокаРезерв.Сумма=Выборка.СуммаОстаток;
						
						СуммаРезерв=СуммаРезерв-Выборка.СуммаОстаток;
						
					КонецЕсли;
					
				КонецЦикла;
				
				НаборРазмещение.мПериод=КонецДня(ДатаОплаты);
				НаборРазмещение.мТаблицаДвижений=ТаблицаРазмещение;
				Движения.РазмещениеЗаявокНаРасходованиеСредств.ВыполнитьРасход();
				
				НаборРезерв.мПериод=КонецДня(ДатаОплаты);
				НаборРезерв.мТаблицаДвижений=ТаблицаРезерв;
				Движения.ДенежныеСредстваВРезерве.ВыполнитьПриход();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Если ОтраженоВОперУчете Тогда
		
		Если РасчетныйДокумент=Неопределено Тогда
			
			// По регистру "Денежные средства к получению"
			НаборДвиженийДС   = Движения.ДенежныеСредстваКПолучению;
			ТаблицаДвиженийДС = НаборДвиженийДС.Выгрузить();
			ТаблицаДвиженийДС.Очистить();
			
			Для Каждого СтрокаДвижение Из ДвиженияПоСтатьям Цикл
				
				СтрокаДвиженийДС = ТаблицаДвиженийДС.Добавить();
				СтрокаДвиженийДС.БанковскийСчетКасса = СчетОрганизации;
				СтрокаДвиженийДС.ВидДенежныхСредств  = Перечисления.ВидыДенежныхСредств.Безналичные;
				СтрокаДвиженийДС.Сумма               = СтрокаДвижение.СуммаПлатежа;
				СтрокаДвиженийДС.ДокументПолучения    = Ссылка;
				СтрокаДвиженийДС.СтатьяДвиженияДенежныхСредств=СтрокаДвижение.СтатьяДвиженияДенежныхСредств;
				
			КонецЦикла;
			
			НаборДвиженийДС.мПериод              = Дата;
			НаборДвиженийДС.мТаблицаДвижений     = ТаблицаДвиженийДС;
			Движения.ДенежныеСредстваКПолучению.ВыполнитьПриход();
			
			ЕстьПланПоступление=Ложь;
			ЕстьРасчеты=Ложь;
			
			// По регистру "Планируемые поступления денежных средств"
			НаборДвиженийПлан  = Движения.ПланируемыеПоступленияДенежныхСредств;
			ТаблицаДвиженийПлан = НаборДвиженийПлан.Выгрузить();
			ТаблицаДвиженийПлан.Очистить();
			
			// Подготовим таблицу для движений по регистру "РасчетыСКонтрагентами"
			НаборДвиженийКонтрагенты   = Движения.РасчетыСКонтрагентами;
			ТаблицаДвиженийКонтрагенты = НаборДвиженийКонтрагенты.Выгрузить();
			ТаблицаДвиженийКонтрагенты.Очистить();
			
			// По строкам табличной части
			Для Каждого СтрокаПлатеж ИЗ ДвиженияПоПланируемымПлатежам Цикл
				
				ТекущаяСделка = ОпределитьСделкуСтрокиТЧ (ЭтотОбъект,СтрокаПлатеж);
				
				Если НЕ СтрокаПлатеж.ДокументПланированияПлатежа.Пустая() Тогда
					
					СуммаПлатежа=СтрокаПлатеж.СуммаПлатежаПлан;											
					СтрокаДвиженийЗаявки = ТаблицаДвиженийПлан.Добавить();
					СтрокаДвиженийЗаявки.СуммаУпр            			= СтрокаПлатеж.СуммаУпр;
					СтрокаДвиженийЗаявки.Сумма                			= СтрокаПлатеж.СуммаПлатежаПлан;
					СтрокаДвиженийЗаявки.СуммаВзаиморасчетов  			= СтрокаПлатеж.СуммаВзаиморасчетов;
					СтрокаДвиженийЗаявки.ДокументПланирования 			= СтрокаПлатеж.ДокументПланированияПлатежа;
					СтрокаДвиженийЗаявки.СтатьяДвиженияДенежныхСредств 	= СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
					СтрокаДвиженийЗаявки.Проект						 	= СтрокаПлатеж.Проект;
					СтрокаДвиженийЗаявки.ДоговорКонтрагента				= СтрокаПлатеж.ДоговорКонтрагента;
					СтрокаДвиженийЗаявки.Сделка							= СтрокаПлатеж.Сделка;
					
					ЕстьПланПоступление = Истина;
				
				Если НЕ СтрокаПлатеж.ВключатьВПлатежныйКалендарь Тогда // Документ не был проведен по оперативным взаиморасчетам
										
					ЕстьРасчеты=Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ((Не ЕстьПланПоступление) ИЛИ ЕстьРасчеты) И РасчетыСКонтрагентами Тогда // Первое упоминание о планируемом платеже в системе
					
					// По регистру "РасчетыСКонтрагентами"
					
					СтрокаДвиженийКонтрагенты = ТаблицаДвиженийКонтрагенты.Добавить();
					СтрокаДвиженийКонтрагенты.ДоговорКонтрагента  = СтрокаПлатеж.ДоговорКонтрагента;
					СтрокаДвиженийКонтрагенты.РасчетыВозврат      = РасчетыВозврат;
					СтрокаДвиженийКонтрагенты.Сделка              = ?(ЗначениеНеЗаполнено(СтрокаПлатеж.Сделка),ТекущаяСделка,СтрокаПлатеж.Сделка);
					СтрокаДвиженийКонтрагенты.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаВзаиморасчетов*КоэффициентСторно;
					СтрокаДвиженийКонтрагенты.СуммаУпр            = СтрокаПлатеж.СуммаУпр*КоэффициентСторно;
					
					ЕстьРасчеты = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьПланПоступление Тогда
				
				НаборДвиженийПлан.мПериод          = Дата;
				НаборДвиженийПлан.мТаблицаДвижений = ТаблицаДвиженийПлан;
				Движения.ПланируемыеПоступленияДенежныхСредств.ВыполнитьРасход();
				
			КонецЕсли;
			
			Если ЕстьРасчеты Тогда
				
				НаборДвиженийКонтрагенты.мПериод          = Дата;
				НаборДвиженийКонтрагенты.мТаблицаДвижений = ТаблицаДвиженийКонтрагенты;
				
				Если КоэффициентСторно=1 Тогда
					
					Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
					
				Иначе
					
					Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Проводим по фактическим взаиморасчетам
		
		// По регистру "Движения денежных средств"
		НаборДвижений = Движения.ДвиженияДенежныхСредств;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ДвиженияДенежныхСредств, ТаблицаДвижений);
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыДенежныхСредств.Безналичные,"ВидДенежныхСредств");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыДвиженийПриходРасход.Приход,"ПриходРасход");
		ТаблицаДвижений.ЗаполнитьЗначения(СчетОрганизации,"БанковскийСчетКасса");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументДвижения");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,"Контрагент");
		
		НаборДвижений.мПериод            = КонецДня(ДатаОплаты);
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Движения.ДвиженияДенежныхСредств.ВыполнитьДвижения();
		
		Если РасчетыСКонтрагентами Тогда
			
			// По регистрам взаиморасчетов с покукпателями и поставщиками для НДС.
			// Движение делается только если документ отражается в БУ.
			Если ОтражатьВБухгалтерскомУчете Тогда

				// Для целей НДС проводим платежи только по операциям с поставщиком и покупателем.
				Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком Тогда

					НаборДвиженийСПоставщиками   = Движения.ВзаиморасчетыСПоставщикамиДляНДС;
					ТаблицаДвиженийСПоставщиками = НаборДвиженийСПоставщиками.Выгрузить();

					// По строкам табличной части.
					Для Каждого СтрокаПлатеж ИЗ ДвиженияПоКонтрагентам Цикл

						СтрокаДвижений = ТаблицаДвиженийСПоставщиками.Добавить();
						СтрокаДвижений.Организация         = Организация;
						СтрокаДвижений.ДоговорКонтрагента  = СтрокаПлатеж.ДоговорКонтрагента;
						СтрокаДвижений.Сделка              = ОпределитьСделкуСтрокиТЧ (ЭтотОбъект,СтрокаПлатеж);
						СтрокаДвижений.Сумма               = СтрокаПлатеж.СуммаРегл*(-1);

					КонецЦикла;

					НаборДвиженийСПоставщиками.мПериод            = КонецДня(ДатаОплаты);
					НаборДвиженийСПоставщиками.мТаблицаДвижений   = ТаблицаДвиженийСПоставщиками;

					Движения.ВзаиморасчетыСПоставщикамиДляНДС.ВыполнитьРасход();

				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя Тогда

					НаборДвиженийСПокупателями   = Движения.ВзаиморасчетыСПокупателямиДляНДС;
					ТаблицаДвиженийСПокупателями = НаборДвиженийСПокупателями.Выгрузить();

					// По строкам табличной части.
					Для Каждого СтрокаПлатеж ИЗ ДвиженияПоКонтрагентам Цикл

						СтрокаДвижений = ТаблицаДвиженийСПокупателями.Добавить();
						СтрокаДвижений.Организация         = Организация;
						СтрокаДвижений.ДоговорКонтрагента  = СтрокаПлатеж.ДоговорКонтрагента;
						СтрокаДвижений.Сделка              = ОпределитьСделкуСтрокиТЧ (ЭтотОбъект,СтрокаПлатеж);;
						СтрокаДвижений.Сумма               = СтрокаПлатеж.СуммаРегл;

					КонецЦикла;

					НаборДвиженийСПокупателями.мПериод            = КонецДня(ДатаОплаты);
					НаборДвиженийСПокупателями.мТаблицаДвижений   = ТаблицаДвиженийСПокупателями;

					Движения.ВзаиморасчетыСПокупателямиДляНДС.ВыполнитьРасход();

				КонецЕсли;

			КонецЕсли;
			
			// По регистру "ВзаиморасчетыСКонтрагентами"
			НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			
			// По регистру "ДенежныеСредстваКомитента"
			
			ЕстьРасчетыСКомиссионером=Ложь;
			НаборДвиженийКомиссионер = Движения.ДенежныеСредстваКомиссионера;
			ТаблицаДвиженийКомиссионер = НаборДвиженийКомиссионер.Выгрузить();
			
			// По строкам табличной части
			Для Каждого СтрокаПлатеж ИЗ ДвиженияПоКонтрагентам Цикл
				
				ТекущаяСделка = ОпределитьСделкуСтрокиТЧ (ЭтотОбъект,СтрокаПлатеж);
				
				СтрокаДвижений = ТаблицаДвижений.Добавить();
				СтрокаДвижений.ДоговорКонтрагента  = СтрокаПлатеж.ДоговорКонтрагента;
				СтрокаДвижений.Сделка              = ТекущаяСделка;
				СтрокаДвижений.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаВзаиморасчетов*КоэффициентСторно;
				СтрокаДвижений.СуммаУпр            = СтрокаПлатеж.СуммаУпр*КоэффициентСторно;
				
				Если СтрокаПлатеж.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
					И СтрокаПлатеж.КонтролироватьДенежныеСредстваКомитента Тогда
					
					СтрокаДвиженийКомиссионер = ТаблицаДвиженийКомиссионер.Добавить();
					СтрокаДвиженийКомиссионер.ДоговорКонтрагента  = СтрокаПлатеж.ДоговорКонтрагента;
					СтрокаДвиженийКомиссионер.Сделка              = ТекущаяСделка;
					СтрокаДвиженийКомиссионер.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаВзаиморасчетов*КоэффициентСторно;
					СтрокаДвиженийКомиссионер.СуммаУпр            = СуммаУпр*КоэффициентСторно;
					
					ЕстьРасчетыСКомиссионером=Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
			НаборДвижений.мПериод            = КонецДня(ДатаОплаты);
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если КоэффициентСторно=1 Тогда
				
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
				
			Иначе
				
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();
				
			КонецЕсли;
			
			Если ЕстьРасчетыСКомиссионером Тогда
				
				НаборДвиженийКомиссионер.мПериод          = КонецДня(ДатаОплаты);
				НаборДвиженийКомиссионер.мТаблицаДвижений = ТаблицаДвижений;
				
				Если КоэффициентСторно=1 Тогда 
					
					Движения.ДенежныеСредстваКомиссионера.ВыполнитьРасход();
					
				Иначе
					
					Движения.ДенежныеСредстваКомиссионера.ВыполнитьПриход();
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументаУпр(Отказ, Режим, Заголовок)

	Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
		Сообщить(Заголовок+" 
		|не совпадают сумма документа и ее расшифровка.");

		Отказ = Истина;

	КонецЕсли;
	
	Если ОтраженоВОперУчете И Режим = РежимПроведенияДокумента.Оперативный И (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) Тогда
					
		КонтрольОстатковПоТЧ(Дата, РасшифровкаПлатежа, Отказ, Заголовок, Истина);			
		
	КонецЕсли;

	Если ОтраженоВОперУчете Тогда
		
		ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейРасчетыУпр(), Отказ, Заголовок);
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			ПроверитьЗаполнениеТЧ(Отказ, Заголовок);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция СформироватьСтруктуруКурсыВалютУпр()

	СтруктураГруппаВалют = Новый Структура;
	СтруктураГруппаВалют.Вставить("ВалютаУпрУчета",  Константы.ВалютаУправленческогоУчета.Получить().Код);
	СтруктураГруппаВалют.Вставить("ВалютаДокумента", ВалютаДокумента.Код);

	СтруктураКурсыВалют=ПолучитьКурсыДляГруппыВалют(СтруктураГруппаВалют,?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты)));

	Возврат СтруктураКурсыВалют;

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание=неопределено)
	
	Если Основание=неопределено тогда //23.08.2016
		возврат;
	КонецЕсли;	
	
	Если ЕстьРеквизитДокумента("Оплачено",Основание.Метаданные()) Тогда
		
		Если Основание.Оплачено Тогда
			Сообщить("Платежный ордер не вводится на основании документов, уже исполненных банком.");
			Возврат;
		КонецЕсли;
		
		РасчетныйДокумент = Основание.Ссылка;
		ЗаполнитьПоРасчетномуДокументуУпр();
		
	Иначе
		
		ЗаполнитьПриходПоОснованию(ЭтотОбъект, Основание, глТекущийПользователь);
		
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);
	
	СтруктураКурсаДокумента = ПолучитьКурсВалюты(ВалютаДокумента,Дата);
	КурсДокумента      = СтруктураКурсаДокумента.Курс;
	КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	
	ЕстьРасчетыСКонтрагентами=ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=ЕстьРасчетыПоКредитам(ВидОперации);
	
	ПроверитьЗаполнениеДокументаУпр(Отказ, Режим, Заголовок);
	
	ТаблицаПлатежейУпр=ПолучитьТаблицуПлатежейУпр(Дата,ВалютаДокумента,Ссылка, "ПлатежныйОрдерПоступлениеДенежныхСредств");
	
	// Проверим на возможность проведения в БУ и НУ
	Если ОтражатьВБухгалтерскомУчете или ОтражатьВНалоговомУчете тогда
		
		НомерСтроки=1;
		
		Для каждого СтрокаОплаты из ТаблицаПлатежейУпр Цикл
			
			Если ТаблицаПлатежейУпр.Количество()=1 Тогда
				ДополнениеЗаголовка="";
			Иначе
				ДополнениеЗаголовка="Строка "+НомерСтроки+" - ";
				НомерСтроки=НомерСтроки+1;
			КонецЕсли;
			
			ПроверкаВозможностиПроведенияВ_БУ_НУ(СтрокаОплаты.ДоговорКонтрагента, ВалютаДокумента,ОтражатьВБухгалтерскомУчете,
					ОтражатьВНалоговомУчете, мВалютаРегламентированногоУчета, Истина ,Отказ, Заголовок, ДополнениеЗаголовка,
					СтрокаОплаты.ВалютаВзаиморасчетов, СтрокаОплаты.РасчетыВУсловныхЕдиницах);
					
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Проверить заполнение подразделения, если нужно. 
	Если (Константы.ОбязательнаяУстановкаПодразделений.Получить() = Истина) Тогда 
		Если (Подразделение = Справочники.Подразделения.ПустаяСсылка()) Тогда 
			Отказ = Истина;
			Сообщить("Перед проведением, установите подразделение.", СтатусСообщения.Важное);
		КонецЕсли;
	КонецЕсли;

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрамУпр(Режим, Отказ, Заголовок);
	КонецЕсли;
	
	Если (Не РасчетныйДокумент=Неопределено) И (Не Отказ) И (Не РасчетныйДокумент.ЧастичнаяОплата) Тогда
		
		ИзменяемыйДокумент=РасчетныйДокумент.ПолучитьОбъект();
		
		ИзменяемыйДокумент.ЧастичнаяОплата=Истина;
		ИзменяемыйДокумент.Оплачено=Ложь;
		ИзменяемыйДокумент.ДатаОплаты='00010101';
		
		ИзменяемыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Проверим необходимость снятия флага частичной оплаты у расчетного документа
	
	Если Не РасчетныйДокумент=Неопределено Тогда
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		             |	ПлатежныйОрдерПоступлениеДенежныхСредств.Ссылка
		             |ИЗ
		             |	Документ.ПлатежныйОрдерПоступлениеДенежныхСредств КАК ПлатежныйОрдерПоступлениеДенежныхСредств
		             |
		             |ГДЕ
		             |	ПлатежныйОрдерПоступлениеДенежныхСредств.Ссылка <> &Ссылка И
					 |  ПлатежныйОрдерПоступлениеДенежныхСредств.РасчетныйДокумент=&РасчетныйДокумент И
		             |	ПлатежныйОрдерПоступлениеДенежныхСредств.Проведен";
		
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.УстановитьПараметр("РасчетныйДокумент",РасчетныйДокумент);
		
		Результат=Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			
			ИзменяемыйДокумент=РасчетныйДокумент.ПолучитьОбъект();
			
			ИзменяемыйДокумент.ЧастичнаяОплата=Ложь;		
			ИзменяемыйДокумент.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 

КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
