Перем мПечатнаяФормаПоУмолчанию;
Перем мВалютаРегламентированногоУчета;

Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьНомерДокумента(ЭтотОбъект);

	// Выполняем общие действия для всех документов при изменении Организация.
	ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);
	
	ПриИзмененииДоговора();

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;

	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);

	// Заказ можно оформлять по договору, взаиморасчеты по которому ведутся или по заказам или по 
	// договору в целом.
	СтруктураДополнительныхПараметров = Новый Структура();
	СтруктураОтбора = Новый Структура();
	СписокСпособовВеденияВзаиморасчетов = Новый СписокЗначений();
	СписокСпособовВеденияВзаиморасчетов.Добавить(Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом);
	СписокСпособовВеденияВзаиморасчетов.Добавить(Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
	
	СтруктураОтбора.Вставить("ЗначениеОтбора", СписокСпособовВеденияВзаиморасчетов);
	СтруктураОтбора.Вставить("ВидСравненияОтбора", ВидСравнения.ВСписке);
	СтруктураДополнительныхПараметров.Вставить("ВедениеВзаиморасчетов", СтруктураОтбора);

	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
	                                        СписокВидовДоговоров , СтандартнаяОбработка, СтруктураДополнительныхПараметров);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь, , "Продажа");
		УстановитьНомерДокумента(ЭтотОбъект);
	КонецЕсли;
	
	// Заполнить подменю выбора печатных форм.
	СписокМакетов = ЭтотОбъект.ПолучитьСписокПечатныхФорм();
	УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати,
	                                     СписокМакетов,
	                                     Новый Действие("ДействияФормыДействиеВыбратьПечатнуюФормы"));

	// Установить печатную форму по умолчанию.
	УстановитьКнопкуПечати(ЭтотОбъект.Метаданные().Имя, ЭтаФорма, СписокМакетов, мПечатнаяФормаПоУмолчанию)
	
КонецПроцедуры

Процедура КоманднаяПанель1ДобавитьПоЗаказу(Кнопка)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Укажите организацию !");
		возврат;
	КонецЕсли;	
	
	ФормаЗаказов = Документы.ЗаказПоставщикуКрышки.ПолучитьФормуВыбора();
	ФормаЗаказов.Заголовок = "Выберите заказ на крышки";
	
	ФормаЗаказов.ДокументСписок.Отбор.Организация.Значение = Организация;
	ФормаЗаказов.ДокументСписок.Отбор.Организация.Использование = Истина;
	ФормаЗаказов.ДокументСписок.Отбор.Организация.ВидСравнения = ВидСравнения.Равно;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ФормаЗаказов.ДокументСписок.Отбор.Контрагент.Значение = Контрагент;
		ФормаЗаказов.ДокументСписок.Отбор.Контрагент.Использование = Истина;
		ФормаЗаказов.ДокументСписок.Отбор.Контрагент.ВидСравнения = ВидСравнения.Равно;
	КонецЕсли;
	
	ФормаЗаказов.РежимВыбора = Истина;
	ВыбЗаказ = ФормаЗаказов.ОткрытьМодально();
	
	Если НЕ ЗначениеЗаполнено(ВыбЗаказ) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказыПоставщикамКрышки.Номенклатура,
	|	ЗаказыПоставщикамКрышки.КоличествоОстаток,
	|	ЗаказыПоставщикамКрышки.ЗаказПоставщикуКрышки,
	|	ЗаказыПоставщикамКрышки.СуммаВзаиморасчетовОстаток
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикамКрышки.Остатки(&МоментВремени, ЗаказПоставщикуКрышки = &ВыбЗаказ) КАК ЗаказыПоставщикамКрышки";
	
	
	Запрос.УстановитьПараметр("ВыбЗаказ", ВыбЗаказ);
	Если ЭтоНовый() Тогда
		Запрос.УстановитьПараметр("МоментВремени", КонецДня(Дата));
	Иначе
		Запрос.УстановитьПараметр("МоментВремени", Новый Граница(МоментВремени(),ВидГраницы.Исключая));
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		сообщить("Нет остатков по "+СокрЛП(ВыбЗаказ));
		возврат;
	КонецЕсли;
	
	Если ДоговорКонтрагента.ВалютаВзаиморасчетов <> ВыбЗаказ.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
		Сообщить("Различаются валюты договоров контрагентов в выбранном заказе и текущем документе поступления");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Контрагент = ВыбЗаказ.Контрагент;
		ДоговорКонтрагента = ВыбЗаказ.ДоговорКонтрагента;
	ИначеЕсли Контрагент <> ВыбЗаказ.Контрагент Тогда
        сообщить("Поставщик изменен на указанного в заказе");
		Контрагент = ВыбЗаказ.Контрагент;
		ДоговорКонтрагента = ВыбЗаказ.ДоговорКонтрагента;
	КонецЕсли;	
	
	Пока Выборка.Следующий() Цикл
		НовСтр = Товары.Добавить();
		НовСтр.Номенклатура = Выборка.Номенклатура;
		НовСтр.Количество = Выборка.КоличествоОстаток;
		НовСтр.ЗаказПоставщикуКрышки = Выборка.ЗаказПоставщикуКрышки;
		НовСтр.Сумма = Выборка.СуммаВзаиморасчетовОстаток;
		НовСтр.Цена = Выборка.СуммаВзаиморасчетовОстаток / Выборка.КоличествоОстаток;
	КонецЦикла;	
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	НапечататьДокументПоУмолчанию(ЭтотОбъект, глТекущийПользователь, мПечатнаяФормаПоУмолчанию);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
//
Процедура ДействияФормыДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = Кнопка.Текст;
		СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		СписокМакетов = ПолучитьСписокПечатныхФорм();
		СтрокаМакетаВСписке = СписокМакетов.НайтиПоЗначению(Кнопка.Имя);
		Если СтрокаМакетаВСписке <> Неопределено Тогда
			Печать(СтрокаМакетаВСписке.Значение);
			СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
			СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;			
			
		Иначе
			СсылкаВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Кнопка.Имя, "_", "-")));
			Печать(СсылкаВнешнейФормы);
			СтруктураМакета.Макет = СсылкаВнешнейФормы;
			СтруктураМакета.ПредставлениеМакета = Кнопка.Текст;
		КонецЕсли;		
		
		мПечатнаяФормаПоУмолчанию = СтруктураМакета.Макет;
		СохранитьТекущуюКнопкуПечати(ЭтотОбъект.Метаданные().Имя, СтруктураМакета);
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеВыбратьПечатнуюФормы()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Номенклатура <> Неопределено Тогда
		ОформлениеСтроки.Ячейки.Код.УстановитьТекст(ДанныеСтроки.Номенклатура.Код);
		ОформлениеСтроки.Ячейки.ЕдИзм.УстановитьТекст(ДанныеСтроки.Номенклатура.ЕдиницаХраненияОстатков);
		ОформлениеСтроки.Ячейки.КодСБИС.УстановитьТекст(ДанныеСтроки.Номенклатура.КодСБИС);
	Иначе
		ОформлениеСтроки.Ячейки.Код.УстановитьТекст("");
		ОформлениеСтроки.Ячейки.ЕдИзм.УстановитьТекст("");
		ОформлениеСтроки.Ячейки.КодСБИС.УстановитьТекст("");
	КонецЕсли;
	
КонецПроцедуры


Процедура ДействияФормыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	// Сохраняем текущие заначения реквизитов документа.
	ТекущиеЗначенияРеквизитов = Новый Структура();
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийТипЦен",				ТипЦен);
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийВалютаДокумента",	ВалютаДокумента); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийКурсДокумента",		КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийКратностьДокумента",	КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийУчитыватьНДС",		Ложь); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийСуммаВключаетНДС",	Ложь); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийИспользоватьПлановуюСебестоимость",	ЛОЖЬ);
	ТекущиеЗначенияРеквизитов.Вставить("Контрагент", Контрагент);

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            , "Товары");
	Если СтруктураЗначений <> Неопределено Тогда
		ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "Товары",
		                   мВалютаРегламентированногоУчета, , СтруктураЗначений, СуммаДокумента);

		//Если СтруктураЗначений.ТекущийТипЦен <> СтруктураЗначений.НовыйТипЦен Тогда
		//	ОбновитьФормуПодбора("ТипЦен");
		//КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры

Процедура ТоварыЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры

Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, глТекущийПользователь);
	
КонецПроцедуры

Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	// При изменении данных обновим суммы в подвале.
	СуммаВсего = ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары");
	ЭлементыФормы.Всего.Значение = ФорматСумм(СуммаВсего);

	ВременнаяСтрока = "";

	Если (НЕ ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента))
	   И (ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда

		ВременнаяСтрока = ВременнаяСтрока + КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета) +  ДокументОбъект.ВалютаДокумента
		                + " = " + КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
		                + мВалютаРегламентированногоУчета + ", ";

	КонецЕсли;

	Если НЕ ЗначениеНеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
	Иначе
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	КонецЕсли;
	
	Если ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииДоговора()

	ДокументОбъект.ВалютаДокумента   		 = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ДокументОбъект.КурсВзаиморасчетов		 = 1;
	ДокументОбъект.КратностьВзаиморасчетов	 = 1;
	
КонецПроцедуры

Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговора();	
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
