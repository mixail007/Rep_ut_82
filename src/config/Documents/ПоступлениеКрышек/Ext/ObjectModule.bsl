
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	//проверка заполнения полей
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = Новый Структура;
	СтруктураШапкиДокумента.Вставить("Организация");
	СтруктураШапкиДокумента.Вставить("Контрагент");
	СтруктураШапкиДокумента.Вставить("Склад");
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//еще раз, чтоб суммы упр и взаиморасчетов корректно рассчитались, Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = СформироватьДеревоПолейЗапросаПоШапке();
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов"             , "ВедениеВзаиморасчетов");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов"              , "ВалютаВзаиморасчетов");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, Константы.ВалютаРегламентированногоУчета.Получить());
	
	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("Номенклатура");
	СтруктураОбязательныхПолей.Вставить("ЗаказПоставщикуКрышки");
	//СтруктураОбязательныхПолей.Вставить("Цена");
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//проверка остатков по заказам на крышки
	Запрос = Новый Запрос;
	Запрос.Текст = 
	  "ВЫБРАТЬ
	  |	ВложенныйЗапрос.Номенклатура,
	  |	ВложенныйЗапрос.ЗаказПоставщикуКрышки,
	  |	ВложенныйЗапрос.Количество КАК КолДок,
	  |	ЕстьNull(ЗаказыПоставщикамКрышкиОстатки.КоличествоОстаток,0) КАК КолОст
	  |ИЗ
	  |	(ВЫБРАТЬ
	  |		ПоступлениеКрышекТовары.Номенклатура КАК Номенклатура,
	  |		ПоступлениеКрышекТовары.ЗаказПоставщикуКрышки КАК ЗаказПоставщикуКрышки,
	  |		СУММА(ПоступлениеКрышекТовары.Количество) КАК Количество
	  |	ИЗ
	  |		Документ.ПоступлениеКрышек.Товары КАК ПоступлениеКрышекТовары
	  |	ГДЕ
	  |		ПоступлениеКрышекТовары.Ссылка = &Ссылка
	  |	
	  |	СГРУППИРОВАТЬ ПО
	  |		ПоступлениеКрышекТовары.Номенклатура,
	  |		ПоступлениеКрышекТовары.ЗаказПоставщикуКрышки) КАК ВложенныйЗапрос
	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикамКрышки.Остатки(
	  |				&МоментВремени,
	  |				Номенклатура В (&СписокНом)
	  |					И ЗаказПоставщикуКрышки В (&СписокЗаказов)) КАК ЗаказыПоставщикамКрышкиОстатки
	  |		ПО ВложенныйЗапрос.Номенклатура = ЗаказыПоставщикамКрышкиОстатки.Номенклатура
	  |			И ВложенныйЗапрос.ЗаказПоставщикуКрышки = ЗаказыПоставщикамКрышкиОстатки.ЗаказПоставщикуКрышки";
	 
	 Запрос.УстановитьПараметр("СписокНом", Товары.ВыгрузитьКолонку("Номенклатура"));
	 Запрос.УстановитьПараметр("СписокЗаказов", Товары.ВыгрузитьКолонку("ЗаказПоставщикуКрышки"));
	 Запрос.УстановитьПараметр("МоментВремени", Новый Граница(МоментВремени(),ВидГраницы.Исключая));
	 Запрос.УстановитьПараметр("Ссылка", Ссылка);
	 
	 Выборка = Запрос.Выполнить().Выбрать();
	 Пока Выборка.Следующий() Цикл
		 Если Выборка.КолДок > Выборка.КолОст Тогда
			 сообщить("Недостаточно "+СокрЛП(Выборка.Номенклатура)+" поступило в кол-ве: "+СокрЛП(Выборка.КолДок)+", остаток по заказу "+СокрЛП(Выборка.ЗаказПоставщикуКрышки)+" в кол-ве: "+СокрЛП(Выборка.КолОст), СтатусСообщения.Важное);
		 КонецЕсли;	 
	 КонецЦикла;	 
	
	Если НЕ Отказ тогда
		Для Каждого ТекСтр Из Товары Цикл
			
			//расход по заказам на крышки
			Движение = Движения.ЗаказыПоставщикамКрышки.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Период = Дата; 
			Движение.ЗаказПоставщикуКрышки = ТекСтр.ЗаказПоставщикуКрышки;
			Движение.Номенклатура = ТекСтр.Номенклатура;
			Движение.Количество   = ТекСтр.Количество;
			Движение.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(ТекСтр.Сумма, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВзаиморасчетов);
			Движение.СуммаУпр    = ПересчитатьИзВалютыВВалюту(ТекСтр.Сумма, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			
			//приход товара на склад
			Движение = Движения.ТоварыНаСкладах.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Дата; 
			Движение.Склад = Склад;
			Движение.Номенклатура = ТекСтр.Номенклатура;
			Движение.Качество = Справочники.Качество.Новый;
			Движение.Количество = ТекСтр.Количество;
			
			//приход в регистр товары организаций
			Движение = Движения.ТоварыОрганизаций.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Дата;
			Движение.Организация = Организация;
			Движение.Номенклатура = ТекСтр.Номенклатура;
			Движение.Качество = Справочники.Качество.Новый;
			Движение.Количество = ТекСтр.Количество;
	  //  	
	  //  //+++( 28.06.2016 - ПАРТИИ товаров! 
	  //  //так как Наклейки и крышки списывают через документ "Списание товаров" ! 
	  //  // как в списании:
	  //  ПроводитьПоПартиям = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата).СписыватьПартииПриПроведенииДокументов;
	  //Если ПроводитьПоПартиям Тогда
	  //  	Движение = Движения.ПартииТоваровНаСкладах.Добавить();
	  //  	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	  //  	Движение.Период = Дата;
	  //  	Движение.Склад = Склад;
	  //  	Движение.Номенклатура = ТекСтр.Номенклатура;
	  //  	
	  //  	//Движение.ХарактеристикаНоменклатуры = ТекСтр.Характеристика;
	  //  	//Движение.СерияНоменклатуры		  = ТекСтр.СерияНоменклатуры;
	  //  	Движение.ДокументОприходования = Ссылка; //+++ 03.10.2016
	  //  	//Движение.Заказ = ТекСтр.ЗаказПоставщикуКрышки;
	  //  	Движение.СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный;
	  //  	Движение.Качество = Справочники.Качество.Новый;
	  //  	Движение.Количество = ТекСтр.Количество;
	  //   	Движение.Стоимость = 0;
	  //  КонецЕсли;
	  //  //+++)

		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	// Удаление записей регистрации из всех последовательностей
	Для Каждого НаборЗаписейРегистрацииВПоследовательности Из ПринадлежностьПоследовательностям Цикл
		НаборЗаписейРегистрацииВПоследовательности.Очистить();
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;
	СписокМакетов.Добавить("Ведомость", "Накладная на оприходование товаров");
   	ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "Ведомость" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьОприходованияТоваров();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();
	
	КонецЕсли;

	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект));

КонецПроцедуры // Печать


// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьОприходованияТоваров()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	Конецесли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Организация,
	|	Склад.Представление КАК Склад,
	|   0 КАК СуммаДокумента,
	|	Константы.ВалютаУправленческогоУчета КАК ВалютаДокумента,
	|	Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|		Номенклатура.НаименованиеПолное  КАК Товар,
	|		Количество,
	|		Номенклатура.ЕдиницаХраненияОстатков.Представление     КАК ЕдиницаИзмерения,
	|	)
	|ИЗ
	|	Документ.ПоступлениеКрышек КАК ОприходованиеТоваров,
	|	Константы
	|ГДЕ
	|	ОприходованиеТоваров.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеКрышек_Накладная";
	Макет       = ПолучитьМакет("Накладная");

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Поступление крышек");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ПредставлениеОрганизации = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.Получатель              = Шапка.Организация;
	ОбластьМакета.Параметры.ПредставлениеСклада     = Шапка.Склад;
	//ОбластьМакета.Параметры.ПредставлениеОснования  = Шапка.Основание;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.Колонка = Колонка;
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);

	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);

		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;

	// Вывести Итого
	ОбластьМакета                 = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ФорматСумм(Шапка.СуммаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести Сумму прописью
	ОбластьМакета                          = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ВыборкаСтрокТовары.Количество()
	                                       + ", на сумму " + ФорматСумм(Шапка.СуммаДокумента, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью  = СформироватьСуммуПрописью(Шапка.СуммаДокумента, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьОприходованияТоваров()
