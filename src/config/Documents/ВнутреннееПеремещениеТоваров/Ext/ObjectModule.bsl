Перем мВалютаРегламентированногоУчета Экспорт;


Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	
Если не Отказ тогда	
	
	// регистр ТоварыАдресноеХранение
	Для Каждого ТекСтрокаТовары Из Товары Цикл
		
		Если ТекСтрокаТовары.АдресОтправитель.Владелец<>СкладОтправитель тогда
			#Если Клиент тогда
			сообщить( строка(ТекСтрокаТовары.НомерСтроки)+") Адрес отправитель: "+строка(ТекСтрокаТовары.АдресОтправитель)+" не принадлежит Складу: "+ строка(СкладОтправитель), СтатусСообщения.Внимание);
			#КонецЕсли
			Отказ = истина;
			прервать;
		КонецЕсли;	
		
		Если ТекСтрокаТовары.АдресПолучатель.Владелец<>СкладПолучатель тогда
			#Если Клиент тогда
			сообщить( строка(ТекСтрокаТовары.НомерСтроки)+") Адрес получатель: "+строка(ТекСтрокаТовары.АдресОтправитель)+" не принадлежит Складу: "+ строка(СкладОтправитель), СтатусСообщения.Внимание);
			#КонецЕсли
			Отказ = истина;
			прервать;
		КонецЕсли;
		
		//+++ 13.11.2017 в Питере делают НЕПРАВИЛЬНО!  		//БЛОКИРУЕМ ПРОВЕДЕНИЕ В "---"
		Если НетТовараВЯчейкеОтправителе(ТекСтрокаТовары) тогда 
		#Если Клиент тогда
			сообщить( строка(ТекСтрокаТовары.НомерСтроки)+") На складе "+строка(СкладОтправитель)+" в адресе: "+строка(ТекСтрокаТовары.АдресОтправитель)+" недостаточно товара: "+ строка(ТекСтрокаТовары.Номенклатура.Код)+" "+строка(ТекСтрокаТовары.Номенклатура)+"!", СтатусСообщения.Внимание);
			#КонецЕсли
			Отказ = истина;
			прервать;
		КонецЕсли;
		
		// регистр ТоварыАдресноеХранение Приход
		Движение = Движения.ТоварыАдресноеХранение.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Дата;
		Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;
		Движение.Склад = СкладОтправитель;
		Движение.АдресХранения = ТекСтрокаТовары.АдресОтправитель;
		Движение.Количество = ТекСтрокаТовары.Количество;
		
		Движение = Движения.ТоварыАдресноеХранение.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;
		Движение.Склад = СкладПолучатель;
		Движение.АдресХранения = ТекСтрокаТовары.АдресПолучатель;
		Движение.Количество = ТекСтрокаТовары.Количество;

	КонецЦикла;
	
	Если Отказ тогда 
		ВОЗВРАТ
	КонецЕсли;
	
	// регистр ДанныеПоКладовщикам
	ДвиженияРегистровГрузчикиИКладовщики(ЭтотОбъект);	
	
	//+++(  это перемещение c 1 склада на 2 !  ------------- требуется партионное списание по складам---------------
	Если СкладПолучатель <> СкладОтправитель тогда 
		//#Если Клиент тогда
		//	Предупреждение("Для проведения по складам и партиям - введите на основании этого документа - Перемещение товаров!");
		//#КонецЕсли
		
	 ТЧТовары = Товары.Выгрузить();
	 ТЧТовары.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры", "Количество, Вес"); // без адресов - только Товары!
	 
	 
	 //Товары на складах - перемещение
	 Для каждого ТекСтрокаТовары из ТЧТовары цикл
		Движение = Движения.ТоварыНаСкладах.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Дата;
		Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;
		Движение.ХарактеристикаНоменклатуры = ТекСтрокаТовары.ХарактеристикаНоменклатуры;
		Движение.СерияНоменклатуры = ТекСтрокаТовары.СерияНоменклатуры;
		
		Движение.Качество     = справочники.Качество.Новый;
		Движение.Склад = СкладОтправитель;
		Движение.Количество = ТекСтрокаТовары.Количество;
			
		Движение = Движения.ТоварыНаСкладах.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;
		Движение.Качество     = справочники.Качество.Новый;
		Движение.Склад = СкладПолучатель;
		Движение.Количество = ТекСтрокаТовары.Количество;	 
	КонецЦикла;
	
	
//=====================партионный учет===================================	
	
	
		
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);
	
	
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("Склад", СкладОтправитель);
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = СформироватьДеревоПолейЗапросаПоШапке();
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"      ,      "ВалютаУправленческогоУчета",     "ВалютаУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"      ,      "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",      "ВестиПартионныйУчетПоСкладам",   "ВестиПартионныйУчетПоСкладам");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОтправитель",     "ВидСклада",                      "ВидСкладаОтправителя");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладПолучатель",      "ВидСклада",                      "ВидСкладаПолучателя");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ВнутреннийЗаказ",      "ВидЗаказа",                      "ВидВнутреннегоЗаказа");
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
 	

	Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам тогда
		
			// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"                , "Номенклатура");
	СтруктураПолей.Вставить("Количество"                  , "Количество");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"  , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"           , "СерияНоменклатуры");
	СтруктураПолей.Вставить("Услуга"                      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                       , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Качество"                    , "Качество");
	СтруктураПолей.Вставить("Цена"                        , "Цена");
	СтруктураПолей.Вставить("ДокументРезерва"             , "ДокументРезерва");
	СтруктураПолей.Вставить("СпособСписанияОстаткаТоваров", "СпособСписанияОстаткаТоваров");
	СтруктураПолей.Вставить("Склад"       , "Ссылка.СкладОтправитель");
 
	СтруктураПолей.Вставить("РезервБезПраваПродажи"       ,  "ДокументРезерва.БезПраваПродажи");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
	                        								 "ДокументРезерва.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");

	РезультатЗапросаПоТоварам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	ТаблицаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();

    ТаблицаПоТаре    = новый ТаблицаЗначений;
	
//СписанныеТовары	
	ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	
	
//ПартииТоваровНаСкладах		
		ТаблицаДвиженийПоСписаннымТоварам = Движения.СписанныеТовары.Выгрузить();
		Если ТаблицаДвиженийПоСписаннымТоварам.Количество()>0 тогда
			ДвижениеПартийТоваров(Ссылка, ТаблицаДвиженийПоСписаннымТоварам);
		КонецЕсли;
		
	 КонецЕсли;

 
КонецЕсли;

КонецЕсли; // не отказ

КонецПроцедуры

//+++ 13.11.2017
функция НетТовараВЯчейкеОтправителе(ТекСтр)
	рез = ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТоварыАдресноеХранениеОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыАдресноеХранение.Остатки( &ДатаДок,
	|			АдресХранения = &Адр
	|				И Номенклатура = &Ном
	|				И Склад = &Скл) КАК ТоварыАдресноеХранениеОстатки
	|ГДЕ
	|	ТоварыАдресноеХранениеОстатки.КоличествоОстаток >= &КоличествоОстаток";
	
	Запрос.УстановитьПараметр("ДатаДок", Новый Граница(ЭтотОбъект.Дата, ВидГраницы.Исключая) ); // без этого документа!
	Запрос.УстановитьПараметр("Адр", ТекСтр.АдресОтправитель);
	Запрос.УстановитьПараметр("Ном", ТекСтр.Номенклатура);
	Запрос.УстановитьПараметр("Скл", ТекСтр.АдресОтправитель.Владелец);
	Запрос.УстановитьПараметр("КоличествоОстаток", ТекСтр.Количество);
	
	Результат = Запрос.Выполнить();
			
	возврат Результат.Пустой();
	
КонецФункции

//копия из ПеремещенияТоваров
Процедура ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварамИсходная, ТаблицаПоТареИсходная,Отказ, Заголовок)

	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.
	
	ТаблицаПоТоварам = ТаблицаПоТоварамИсходная.Скопировать();

	// Удалим строки с документами резерва по ордерам
	Инд=0;
	Пока Инд<ТаблицаПоТоварам.Количество() Цикл
		Если ТаблицаПоТоварам[Инд].РезервБезПраваПродажи=Истина Тогда
			ТаблицаПоТоварам.Удалить(Инд);
		Иначе
			Инд=Инд+1;
		КонецЕсли;
	КонецЦикла;

	ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
	
	Для Каждого Строка Из ТаблицаПоТоварам Цикл
		
		Движение = ТаблицаДвижений[ТаблицаПоТоварам.Индекс(Строка)];
		
		Если Строка.ОбособленныйУчетТоваровПоЗаказамПокупателей=Истина Тогда
			Движение.ЗаказПартии = Строка.ДокументРезерва;
			Движение.ЗаказСписания = Строка.ДокументРезерва;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "СписыватьТолькоПоЗаказу");
	
	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
	КонецЦикла;
	
    // { Лапенков 20110202 
	Если ЗначениеНеЗаполнено(ВнутреннийЗаказ) Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(СкладОтправитель,"Склад");
	КонецЕсли;
    // } Лапенков
	
	ТаблицаДвижений.ЗаполнитьЗначения(СкладПолучатель,"СкладПолучатель");

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");

	Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция Тогда 
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,"ДопустимыйСтатус1");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,"ДопустимыйСтатус2");
	КонецЕсли;
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПеремещениеМеждуСкладами,"КодОперацииПартииТоваров");

	// Если Партионный учет по складам  в упр учете
	Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Организация,    "Организация");

	// Если перемещение по ордерам, то партии не списываются документом перемещения
	Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "НеСписывать");
	КонецЕсли;

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;

	// ТАРА ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	ТаблицаПоТаре = ТаблицаПоТареИсходная.Скопировать();
	Пока Инд<ТаблицаПоТаре.Количество() Цикл
		Если ТаблицаПоТаре[Инд].РезервБезПраваПродажи=Истина Тогда
			ТаблицаПоТаре.Удалить(Инд);
		Иначе
			Инд=Инд+1;
		КонецЕсли;
	КонецЦикла;

	// Заполним таблицу движений.
	ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

	// Недостающие поля.
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
	КонецЦикла;

	ТаблицаДвижений.ЗаполнитьЗначения(СкладОтправитель,"Склад");
	ТаблицаДвижений.ЗаполнитьЗначения(СкладПолучатель,"СкладПолучатель");

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПеремещениеМеждуСкладами,"КодОперацииПартииТоваров");

	// Если Партионный учет по складам  в упр учете
	Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");

	// Если перемещение по ордерам, то партии не списываются документом перемещения
	Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "НеСписывать");
	КонецЕсли;

	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если РежимЗаписи=РежимЗаписиДокумента.Проведение Тогда
		
		Если  ЗначениеНеЗаполнено(СкладОтправитель) Тогда
			СообщитьОбОшибке("Склад-отправитель не выбран. Необходимо заполнить склад-отправитель!",Отказ);
		КонецЕсли;	
		Если  Не СкладОтправитель.АдресноеХранение Тогда
			СообщитьОбОшибке("Склад-отправитель не является складом адресного хранения!
			|Для перемещения с обычного склада на адресный - используйте документ ""Перемещение товаров""!",Отказ);
		КонецЕсли;
		
		
		Если  ЗначениеНеЗаполнено(СкладПолучатель) Тогда
			СообщитьОбОшибке("Склад-получатель не выбран. Необходимо заполнить склад-получатель!",Отказ);
		КонецЕсли;	
		Если  Не СкладПолучатель.АдресноеХранение Тогда
			СообщитьОбОшибке("Склада-получатель не является складом адресного хранения!
			|Для перемещения с адресного склада на обычный - используйте документ ""Перемещение товаров""!",Отказ);
		КонецЕсли;
						
		Если ЗначениеНеЗаполнено(Ответственный) тогда
			Ответственный = ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(Подразделение) тогда
			Подразделение = Ответственный.ОсновноеПодразделение;
        КонецЕсли;
		
		Если НЕ ОтражатьВУправленческомУчете тогда
			ОтражатьВУправленческомУчете = истина;
		КонецЕсли;	
		//+++)
	КонецЕсли;
	
	ОбщийВес=Товары.Итог("Вес");
		 
КонецПроцедуры//ПередЗаписью()

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		// Заполнение шапки
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		
		ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
		
		Комментарий = "# На основании: "+строка(ДанныеЗаполнения)+" # "+ ДанныеЗаполнения.Комментарий;
		СкладОтправитель = ДанныеЗаполнения.СкладОтправитель;
		СкладПолучатель  = ДанныеЗаполнения.СкладПолучатель;
		Проверен = ЛОЖЬ;
		Проведен = ЛОЖЬ;
		ПометкаУдаления = ЛОЖЬ;
		
		Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств( НоваяСтрока, ТекСтрокаТовары );  // все поля такие же!
			
			НоваяСтрока.ЕдиницаИзмеренияМест = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
			НоваяСтрока.Коэффициент			 = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
			НоваяСтрока.КоличествоМест 		 = НоваяСтрока.Количество / НоваяСтрока.Коэффициент;
			
			НоваяСтрока.СпособСписанияОстаткаТоваров = ?(НоваяСтрока.СпособСписанияОстаткаТоваров=перечисления.СпособыСписанияОстаткаТоваров.ПустаяСсылка(), 
						перечисления.СпособыСписанияОстаткаТоваров.СоСклада, НоваяСтрока.СпособСписанияОстаткаТоваров);
			
		КонецЦикла;
		
	КонецЕсли;
	
		
	//{{__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, ВСЕ внесенные вручную изменения будут утеряны!!!
	
	//}}__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ

КонецПроцедуры //ОбработкаЗаполнения()
	
мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
