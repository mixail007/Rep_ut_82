Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой заказа или счета,
// разработанного методистами (с учетом внесенных корректировок)
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция ПечатьСчетаЗаказа(Тип)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Организация,
	|	Заказчик    КАК Заказчик,
	|	Организация КАК Руководители,
	|	Организация КАК Поставщик
	|ИЗ
	|	Документ.ВнутреннийЗаказ КАК ЗаказПокупателя
	|
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВнутреннийЗаказ_СчетЗаказ";

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	               |	ВложенныйЗапрос.Номенклатура.Код КАК Код,
	               |	ВложенныйЗапрос.Номенклатура.Артикул КАК Артикул,
	               |	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
	               |	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	               |	ВложенныйЗапрос.ХарактеристикаНоменклатуры КАК Характеристика,
	               |	NULL КАК Серия,
	               |	ВЫБОР
	               |		КОГДА (НЕ ВложенныйЗапрос.Номенклатура.Услуга)
	               |			ТОГДА 0
	               |		КОГДА ВложенныйЗапрос.Номенклатура.Услуга
	               |			ТОГДА 1
	               |	КОНЕЦ КАК УСЛУГА
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ЗаказПокупателя.Номенклатура КАК Номенклатура,
	               |		ЗаказПокупателя.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |		ЗаказПокупателя.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |		ЗаказПокупателя.Количество КАК Количество
	               |	ИЗ
	               |		Документ.ВнутреннийЗаказ.Товары КАК ЗаказПокупателя
	               |	ГДЕ
	               |		ЗаказПокупателя.Ссылка = &ТекущийДокумент
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		КорректировкаЗаказаПокупателя.Номенклатура,
	               |		КорректировкаЗаказаПокупателя.ЕдиницаИзмерения,
	               |		КорректировкаЗаказаПокупателя.ХарактеристикаНоменклатуры,
	               |		КорректировкаЗаказаПокупателя.Количество
	               |	ИЗ
	               |		Документ.КорректировкаЗаказаПокупателя.Товары КАК КорректировкаЗаказаПокупателя
	               |	ГДЕ
	               |		КорректировкаЗаказаПокупателя.Ссылка.ЗаказПокупателя = &ТекущийДокумент
	               |		И КорректировкаЗаказаПокупателя.Ссылка.Проведен = ИСТИНА) КАК ВложенныйЗапрос
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВложенныйЗапрос.Номенклатура,
	               |	ВложенныйЗапрос.ЕдиницаИзмерения,
	               |	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
	               |	ВложенныйЗапрос.Номенклатура.Артикул,
	               |	ВложенныйЗапрос.ЕдиницаИзмерения.Представление,
	               |	ВЫБОР
	               |		КОГДА (НЕ ВложенныйЗапрос.Номенклатура.Услуга)
	               |			ТОГДА 0
	               |		КОГДА ВложенныйЗапрос.Номенклатура.Услуга
	               |			ТОГДА 1
	               |	КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	УСЛУГА,
	               |	Номенклатура";
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	Макет = ПолучитьМакет("СчетЗаказ");

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Внутренний заказ");
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Заказчик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеЗаказчика = СокрЛП(Шапка.Заказчик.Наименование);
	ТабДокумент.Вывести(ОбластьМакета);

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");

	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 

		Если ВыборкаСтрокТовары.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар = ВыборкаСтрокТовары.Номенклатура.НаименованиеПолное + ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьДанных);

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ЗапросТовары.Количество();
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	
	//======================================
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаРасположение");
	ОбластьМакетаНом = Макет.ПолучитьОбласть("СтрокаНоменклатура");
	ОбластьМакетаНом2 = Макет.ПолучитьОбласть("СтрокаНоменклатура2");
	ОбластьМакетаСклад = Макет.ПолучитьОбласть("СтрокаСклад");
	ТабДокумент.Вывести(ОбластьМакета);

	ВыборкаНом = НайтиСклады(0, "ЛЕВОЕ"); //чтобы все строки были!
    итогоКол = 0;
	пока ВыборкаНом.Следующий() цикл
		Если ВыборкаНом.КоличествоОстаток < Ссылка.Товары[ВыборкаНом.НомерСтроки-1].Количество тогда
			ОбластьМакета = ОбластьМакетаНом2;
		иначе	
			ОбластьМакета = ОбластьМакетаНом;
		КонецЕсли;
    ОбластьМакета.Параметры.НомерСтроки = ВыборкаНом.НомерСтроки;
	ОбластьМакета.Параметры.Номенклатура = Ссылка.Товары[ВыборкаНом.НомерСтроки-1].Номенклатура;
	Если ОбластьМакета = ОбластьМакетаНом2 тогда
		ОбластьМакета.Параметры.КоличествоОстаток = Строка(ВыборкаНом.КоличествоОстаток)+"/"+Строка(Ссылка.Товары[ВыборкаНом.НомерСтроки-1].Количество);
	иначе
		ОбластьМакета.Параметры.КоличествоОстаток = ВыборкаНом.КоличествоОстаток; // Ссылка.Товары[ВыборкаНом.НомерСтроки-1].Количество;
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьМакета);
	итогоКол = итогоКол + ВыборкаНом.КоличествоОстаток;
	
		ВыборкаСклад = ВыборкаНом.Выбрать();
		пока ВыборкаСклад.Следующий() цикл
		    ОбластьМакетаСклад.Параметры.Склад = ВыборкаСклад.Склад;
			ОбластьМакетаСклад.Параметры.КоличествоОстаток = ВыборкаСклад.КоличествоОстаток;
			ТабДокумент.Вывести(ОбластьМакетаСклад);
		КонецЦикла;
		
	КонецЦикла;
    ОбластьМакета = Макет.ПолучитьОбласть("ИтогоСтрСклад");
	ОбластьМакета.Параметры.ИтогоКоличествоОстаток = итогоКол;
	ТабДокумент.Вывести(ОбластьМакета);
		
	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаЗаказаКорректировки()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	ИначеЕсли ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи!");
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

		// Получить экземпляр документа на печать
	Если ИмяМакета = "Заказ" тогда
		ТабДокумент = ПечатьСчетаЗаказа(ИмяМакета);
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();
	
	КонецЕсли;

	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, ""));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;

	СписокМакетов.Добавить("Заказ","Внутренний заказ");

	ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

//+++
Функция НайтиСклады(номерСтроки=0, ТипСоединения="ПОЛНОЕ", ТипКол="УБЫВ") Экспорт
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
               |	ТоварыНаСкладахОстатки.Склад КАК Склад,
               |	ВнутреннийЗаказТовары.НомерСтроки КАК НомерСтроки,
               |	ЕстьNull(ТоварыНаСкладахОстатки.КоличествоОстаток,0) КАК КоличествоОстаток
               |ИЗ
               |	Документ.ВнутреннийЗаказ.Товары КАК ВнутреннийЗаказТовары
               |		"+ТипСоединения+" СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
               |				&Дата,
               |				Номенклатура В (&СписокНоменклатуры)
               |					И Склад <> &Склад) КАК ТоварыНаСкладахОстатки
               |		ПО ВнутреннийЗаказТовары.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
               |			И ВнутреннийЗаказТовары.ХарактеристикаНоменклатуры = ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры
               |			И ВнутреннийЗаказТовары.Качество = ТоварыНаСкладахОстатки.Качество
               |			И ( ЕстьNull(ТоварыНаСкладахОстатки.КоличествоОстаток,0) > 0 )
			   //ВнутреннийЗаказТовары.Количество)
               |ГДЕ
               |	ВнутреннийЗаказТовары.Ссылка = &Ссылка
               |"; Если номерСтроки>0 тогда
				Запрос.Текст = Запрос.Текст +"И ВнутреннийЗаказТовары.номерСтроки = &номерСтроки
				|"; Запрос.УстановитьПараметр("номерСтроки", номерСтроки);
					КонецЕсли;
               Запрос.Текст = Запрос.Текст +"УПОРЯДОЧИТЬ ПО
               |	НомерСтроки,
               |	КоличествоОстаток "+ТипКол+",
               |	Склад
               |ИТОГИ
               |	СУММА(КоличествоОстаток)
               |ПО
               |	НомерСтроки
               |АВТОУПОРЯДОЧИВАНИЕ";

Запрос.УстановитьПараметр("Дата", Дата);
Запрос.УстановитьПараметр("Склад", Заказчик); //+++ еще надо доступные склады только...
Запрос.УстановитьПараметр("Ссылка", Ссылка);
Если номерСтроки>0 тогда
	Запрос.УстановитьПараметр("СписокНоменклатуры", ссылка.Товары[номерСтроки-1].Номенклатура);	
иначе
	Запрос.УстановитьПараметр("СписокНоменклатуры", ссылка.Товары.ВыгрузитьКолонку("Номенклатура") );
КонецЕсли;
Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

возврат Выборка;

Конецфункции



// Заполняет табличную часть при оперативном проведении, когда включены флаги авторазмещения и/или авторезервирования
//
// Параметры:
//  Отказ - отказ от дальнейшего проведения.
//
Процедура ЗаполнитьТабличныеЧастиПередПроведениемУпр(Отказ) Экспорт

	Если НЕ Авторезервирование И НЕ Авторазмещение Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапросСвободныйОстаток = Новый Запрос;
	ЗапросСвободныйОстаток.УстановитьПараметр( "ПредпочтительноеРазмещение", Заказчик);
	ЗапросСвободныйОстаток.УстановитьПараметр( "ДатаОтгрузки",   ?(ЗначениеНеЗаполнено(ДатаОтгрузки), Дата, ДатаОтгрузки));
	ЗапросСвободныйОстаток.УстановитьПараметр( "ДокументСсылка", Ссылка);

	КопияТовары = Товары.Выгрузить();
	КопияТовары.Свернуть("Номенклатура",);
	КопияВозвратнаяТара = ВозвратнаяТара.Выгрузить();
	КопияВозвратнаяТара.Свернуть("Номенклатура",);

	// Сформируем массив номенклатуры по товарам и таре для фильтров запросов.
	МассивНоменклатуры = КопияТовары.ВыгрузитьКолонку("Номенклатура");
	МассивНоменклатурыТара = КопияВозвратнаяТара.ВыгрузитьКолонку("Номенклатура");
	Для Каждого ЭлементТара Из МассивНоменклатурыТара Цикл
		МассивНоменклатуры.Добавить(ЭлементТара);
	КонецЦикла; 
	
	ТекстФильтраПоСкладам = "
	|(ВЫБРАТЬ
	|		ГруппыДоступности.Склад
	|	ИЗ
	|		РегистрСведений.СоставГруппДоступностиСкладов КАК ГруппыДоступности
	|	ГДЕ ГруппыДоступности.ГруппаДоступности = &ГруппаДоступностиСкладов)";
	ГруппаДоступностиСкладов = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ГруппаДоступностиСкладов");
	ЗапросСвободныйОстаток.УстановитьПараметр( "ГруппаДоступностиСкладов", ГруппаДоступностиСкладов);

	ЗапросСвободныйОстаток.УстановитьПараметр( "МассивНоменклатуры",       МассивНоменклатуры);
	ЗапросСвободныйОстаток.УстановитьПараметр( "СтатусПартии",             Перечисления.СтатусыПартийТоваров.Купленный);
		
	Если Авторезервирование Тогда
		ЗапросСвободныйОстаток.Текст = 
		"ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Номенклатура,
		|	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры,
		|	ТоварыНаСкладахОстатки.Склад                      КАК Размещение,
		|	NULL                                              КАК ТоварТара,
		|	NULL                                              КАК ДоговорКонтрагента,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток          КАК Количество,
		//|	ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток  КАК КоличествоРазмещенное,
		| 0 КАК КоличествоРазмещенное,
		//|	ТоварыКПередачеСоСкладовОстатки.КоличествоОстаток КАК КоличествоКПередаче,
		| 0  КАК КоличествоКПередаче,
		|	1                                                 КАК СортировкаРазмещение,
		|	ВЫБОР
		|		КОГДА Не ТоварыНаСкладахОстатки.Склад = &ПредпочтительноеРазмещение ТОГДА
		|			0
		|		ИНАЧЕ
		|			1
		|	КОНЕЦ                                             КАК СортировкаСклад,
		|	NULL                                              КАК ДатаПоступления
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(, 
		|		Номенклатура В (&МассивНоменклатуры)
		//+++  29.09.2011 
		//|" + ?(ЗначениеЗаполнено(ГруппаДоступностиСкладов), "И (Склад В " + ТекстФильтраПоСкладам + "
		//|       ИЛИ Не Склад = &ПредпочтительноеРазмещение)", "") + "
		|											  ) КАК ТоварыНаСкладахОстатки	
	
		//|ЛЕВОЕ СОЕДИНЕНИЕ
		//|   РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, Номенклатура В (&МассивНоменклатуры) 
		//|                                                     И ДокументРезерва <> &ДокументСсылка) КАК ТоварыВРезервеНаСкладахОстатки
		//|ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварыВРезервеНаСкладахОстатки.Номенклатура
		//|   И ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры = ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры
		//|   И ТоварыНаСкладахОстатки.Склад = ТоварыВРезервеНаСкладахОстатки.Склад
		//|ЛЕВОЕ СОЕДИНЕНИЕ
		//|   РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(, Номенклатура В (&МассивНоменклатуры)) КАК ТоварыКПередачеСоСкладовОстатки
		//|ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварыВРезервеНаСкладахОстатки.Номенклатура
		//|   И ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры = ТоварыКПередачеСоСкладовОстатки.ХарактеристикаНоменклатуры
		//|   И ТоварыНаСкладахОстатки.Склад = ТоварыКПередачеСоСкладовОстатки.Склад
		|
		|ГДЕ 
		|	ТоварыНаСкладахОстатки.Склад <> &ПредпочтительноеРазмещение";

	КонецЕсли; 
	Если Авторезервирование И Авторазмещение Тогда
		ЗапросСвободныйОстаток.Текст = ЗапросСвободныйОстаток.Текст +
		"
		|ОБЪЕДИНИТЬ ВСЕ
		|";
	КонецЕсли;
	Если Авторазмещение Тогда
		ЗапросСвободныйОстаток.Текст = ЗапросСвободныйОстаток.Текст +
		"ВЫБРАТЬ
		|	ЗаказыПоставщикамОстатки.Номенклатура,
		|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры,
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику                 КАК Размещение,
		|	ОстаткиРазмещенных.ТоварТара,
		|	ЗаказыПоставщикамОстатки.ДоговорКонтрагента,
		|	ЗаказыПоставщикамОстатки.КоличествоОстаток               КАК Количество,
		|	ОстаткиРазмещенных.КоличествоОстаток                     КАК КоличествоРазмещенное,
		|	0                                                        КАК КоличествоКПередаче,
		|	0                                                        КАК СортировкаРазмещение,
		|	1                                                        КАК СортировкаСклад,
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления КАК ДатаПоступления
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, 
		|		ЗаказПоставщику.ДатаПоступления <= &ДатаОтгрузки
		|       И ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ
		|		И Номенклатура В (&МассивНоменклатуры)
		|       И СтатусПартии = &СтатусПартии) КАК ЗаказыПоставщикамОстатки
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|   РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(, Номенклатура В (&МассивНоменклатуры)
		|                                                          И ЗаказПокупателя <> &ДокументСсылка) КАК ОстаткиРазмещенных
		|ПО ЗаказыПоставщикамОстатки.ЗаказПоставщику = ОстаткиРазмещенных.ЗаказПоставщику
		|" + ?(Не ЗначениеНеЗаполнено(ГруппаДоступностиСкладов), "
		|ГДЕ ЗаказыПоставщикамОстатки.ЗаказПоставщику.Склад В " + ТекстФильтраПоСкладам+ "
		|       ИЛИ ЗаказыПоставщикамОстатки.ЗаказПоставщику.Склад = &ПредпочтительноеРазмещение", "");
	КонецЕсли;
	Если Авторезервирование И Авторазмещение Тогда
		ЗапросСвободныйОстаток.Текст = ЗапросСвободныйОстаток.Текст + "
		|УПОРЯДОЧИТЬ ПО                 // Определяет стратегию авторезервирования и авторазмещения
		|	СортировкаРазмещение,       // Сначала в заказах, потом на складе
		|	СортировкаСклад,            // Сначала предпочтительный склад, затем остальные
		|	ДатаПоступления УБЫВ        // В порядке убывания даты отгрузки	";
	ИначеЕсли Авторезервирование Тогда
		ЗапросСвободныйОстаток.Текст = ЗапросСвободныйОстаток.Текст + "
		|УПОРЯДОЧИТЬ ПО                 // Определяет стратегию авторезервирования и авторазмещения
		|	СортировкаСклад             // Сначала предпочтительный склад, затем остальные ";
	ИначеЕсли Авторазмещение Тогда
		ЗапросСвободныйОстаток.Текст = ЗапросСвободныйОстаток.Текст + "
		|УПОРЯДОЧИТЬ ПО                 // Определяет стратегию авторезервирования и авторазмещения
		|	ДатаПоступления УБЫВ        // В порядке убывания даты отгрузки	";
	КонецЕсли;

	Таблица = ЗапросСвободныйОстаток.Выполнить().Выгрузить();
	
	// Сначала вычислим по каждой строке количества, которые можно разместить
	Для Каждого Строка из Таблица Цикл
		Строка.Количество = Строка.Количество - ?(Строка.КоличествоРазмещенное = NULL, 0, Строка.КоличествоРазмещенное)
											  - ?(Строка.КоличествоКПередаче = NULL, 0, Строка.КоличествоКПередаче);
	КонецЦикла;
	
	Сч = 0;
	Пока Сч < Таблица.Количество() Цикл
		СтрокаТаблицы = Таблица.Получить(Сч);
		Если СтрокаТаблицы.Количество = 0 Тогда
			 Таблица.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;

	ПустаяХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();

	// Сначала вычтем из найденных остатков количество, размещение по которому явно указано
	// в табличных частях документа. Для этого последовательно обойдем табличные части 
	// Товары и Возвратная тара.
	Для Сч = 0 По 1 Цикл

		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары = Ложь;
		КонецЕсли;

		Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл

			// Сначала обходим все строки с размещением и если размещение не указано, пропускаем строку.
			//+++ 29.09.2011 
			//Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Размещение) Тогда
			//	Продолжить;
			//КонецЕсли; 

			// Если не указано авторазмещение в заказах, то пропускаем все строки, в которых указан заказ.
			Если НЕ Авторазмещение И ТипЗнч(СтрокаТЧ.Размещение) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				Продолжить;
			КонецЕсли; 

			// Если не указано авторезервирование на складах, то пропускаем все строки, в которых указан склад.
			Если НЕ Авторезервирование И ТипЗнч(СтрокаТЧ.Размещение) = Тип("СправочникСсылка.Склады") Тогда
				Продолжить;
			КонецЕсли; 

			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
			СтруктураПоиска.Вставить("Размещение", СтрокаТЧ.Размещение);

			Если ЭтоТовары Тогда
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
			Иначе
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПустаяХарактеристикаНоменклатуры);
			КонецЕсли; 

			НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);

			// Погашаем количество в таблице. Пересчитаем количество в ТЧ в единицы хранения.
			КоличествоОсталосьПогасить = СтрокаТЧ.Количество;

			Для Каждого Строка Из НайденныеСтроки Цикл

				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;

				Если Строка.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;

				// Если это остаток из заказа, то дополнительно проверяем на тару/товар
				Если Строка.ТоварТара <> NULL Тогда
					Если ЭтоТовары И Строка.ТоварТара <> Перечисления.ТоварТара.Товар Тогда
						Продолжить;
					ИначеЕсли НЕ ЭтоТовары И Строка.ТоварТара <> Перечисления.ТоварТара.Тара Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли; 

				Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить/Строка.Количество;
				Иначе
					// Это ошибка: списываемое количество не должно быть больше остатка.
					// Такой документ не проведется оперативно.
					КоэффСписания = 1;
				КонецЕсли;

				СписанноеКоличество = Окр(Строка.Количество * КоэффСписания, 3, РежимОкругления.Окр15как20);

				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - СписанноеКоличество;

				Строка.Количество = Строка.Количество - СписанноеКоличество;

			КонецЦикла; 

			Если КоличествоОсталосьПогасить > 0 Тогда
				// Значит в документе неверно задано размещение. Заполнять не будем
				Возврат;
			КонецЕсли; 

		КонецЦикла;

	КонецЦикла;

	// Заполним массив, хранящий две таблицы значений, соответствующих авторазмещению товаров и тары
	МассивТаблицСтрок = Новый Массив(2);

	Для Сч = 0 По 1 Цикл

		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары = Ложь;
		КонецЕсли;

		ТаблицаТЧ = ТабличнаяЧасть.Выгрузить();
		ТаблицаТЧ.Колонки.Добавить("КоличествоЕдиницХранения");

		МассивТаблицСтрок[Сч] = ТабличнаяЧасть.Выгрузить();
		МассивТаблицСтрок[Сч].Очистить();
		МассивТаблицСтрок[Сч].Колонки.Добавить("ИндексИсходнойСтроки");

		Для Каждого СтрокаТЧ Из ТаблицаТЧ Цикл

			Если НЕ ЗначениеНеЗаполнено(СтрокаТЧ.Размещение) Тогда
				Продолжить;
			КонецЕсли; 

			// Пересчитаем в единицы хранения
			СтрокаТЧ.КоличествоЕдиницХранения = СтрокаТЧ.Количество;

			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);

			Если ЭтоТовары Тогда
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
			Иначе
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПустаяХарактеристикаНоменклатуры);
			КонецЕсли; 

			НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);

			// Погашаем количество в таблице
			КоличествоОсталосьПогасить               = СтрокаТЧ.КоличествоЕдиницХранения;

			// Погашаем количество в таблице, записывая размещение
			Для Каждого Строка Из НайденныеСтроки Цикл

				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;

				Если Строка.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;

				// Если это остаток по заказу поставщику, отберем товар и тару
				Если ЭтоТовары И Строка.ТоварТара = Перечисления.ТоварТара.Тара  Тогда
					Продолжить;
				ИначеЕсли НЕ ЭтоТовары И Строка.ТоварТара = Перечисления.ТоварТара.Товар  Тогда
					Продолжить;
				КонецЕсли;

				Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить / Строка.Количество;
				Иначе
					КоэффСписания = 1;
				КонецЕсли;

				СписанноеКоличество = Окр(Строка.Количество * КоэффСписания, 3, РежимОкругления.Окр15как20);

				// Добавляем строку с данными о размещенном количестве
				НоваяСтрока = МассивТаблицСтрок[Сч].Добавить();
				НоваяСтрока.ИндексИсходнойСтроки = ТаблицаТЧ.Индекс(СтрокаТЧ);

				НоваяСтрока.Номенклатура = СтрокаТЧ.Номенклатура;
				Если ЭтоТовары Тогда
					НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
					НоваяСтрока.ЕдиницаИзмерения           = СтрокаТЧ.ЕдиницаИзмерения;
					НоваяСтрока.Коэффициент                = СтрокаТЧ.Коэффициент;
				КонецЕсли;

				НоваяСтрока.Размещение  = Строка.Размещение;
				НоваяСтрока.Количество  = СписанноеКоличество;
				
				КоэффПогашения = СписанноеКоличество / КоличествоОсталосьПогасить;

				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - СписанноеКоличество;

				// Уменьшаем количество в исходной строке
				СтрокаТЧ.Количество = СтрокаТЧ.КоличествоЕдиницХранения - СписанноеКоличество;

				// Уменьшаем количество в строке остатков
				Строка.Количество   = Строка.Количество - СписанноеКоличество;

			КонецЦикла;
			Если КоличествоОсталосьПогасить > 0 Тогда
				// Добавляем строку с данными о размещенном количестве
				НоваяСтрока = МассивТаблицСтрок[Сч].Добавить();
				НоваяСтрока.ИндексИсходнойСтроки = ТаблицаТЧ.Индекс(СтрокаТЧ);
				НоваяСтрока.Номенклатура         = СтрокаТЧ.Номенклатура;

				Если ЭтоТовары Тогда
					НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
					НоваяСтрока.ЕдиницаИзмерения           = СтрокаТЧ.ЕдиницаИзмерения;
					НоваяСтрока.Коэффициент                = СтрокаТЧ.Коэффициент;
				КонецЕсли;

				НоваяСтрока.Количество = КоличествоОсталосьПогасить;

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

	// Изменяем табличную часть
	Для Сч = 0 По 1 Цикл
		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары = Ложь;
		КонецЕсли;

		ТекИндексИсходнойСтроки = Неопределено;
		Для Каждого Строка Из МассивТаблицСтрок[Сч] Цикл

			// Если строка с таким индексом уже обрабатывалась, то добавляем новую
			Если ТекИндексИсходнойСтроки = Строка.ИндексИсходнойСтроки Тогда
				Стр = ТабличнаяЧасть[Строка.ИндексИсходнойСтроки];
				РедактируемаяСтрока = ТабличнаяЧасть.Добавить();
				РедактируемаяСтрока.Номенклатура = Стр.Номенклатура;
				РедактируемаяСтрока.Качество     = СТр.Качество;
				Если ЭтоТовары Тогда
					РедактируемаяСтрока.ХарактеристикаНоменклатуры = Стр.ХарактеристикаНоменклатуры;
				КонецЕсли;
			Иначе
				РедактируемаяСтрока = ТабличнаяЧасть[Строка.ИндексИсходнойСтроки];
			КонецЕсли; 

			РедактируемаяСтрока.Размещение = Строка.Размещение;

			Если РедактируемаяСтрока.Количество = Строка.Количество Тогда
				Продолжить;
			КонецЕсли;

			РедактируемаяСтрока.Количество  = Строка.Количество;
			
			Если ЭтоТовары Тогда
				РедактируемаяСтрока.ЕдиницаИзмерения = Строка.ЕдиницаИзмерения;
				РедактируемаяСтрока.Коэффициент      = Строка.Коэффициент;
			КонецЕсли;

			ТекИндексИсходнойСтроки = Строка.ИндексИсходнойСтроки;

		КонецЦикла; 
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТабличныеЧастиПередПроведениемУпр()

// По виду операции определяет статус партии товаров (не возвратная тара!)
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Значение перечисления "Статусы партии товаров".
//
Функция ОпределитьСтатусПартии() 

	Статус = Перечисления.СтатусыПартийТоваров.Купленный; 
	
	Возврат Статус;

КонецФункции // ОпределитьСтатусПартииПрихода()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	Возврат РезультатЗапросаПоТоварам.Выгрузить();

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	ТаблицаТары.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТары.Колонки.Добавить("СерияНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));

	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");
					
	// Склад заполняем только, если у нас есть строки в таблице "Товары" или "Возвратная тара"
	Если Товары.Количество() > 0 ИЛИ ВозвратнаяТара.Количество() > 0 Тогда
		СтруктураОбязательныхПолей.Вставить("Заказчик");
	КонецЕсли;

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Качество, Количество");

	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь не должно быть размещений по НТТ
	ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	                                                      Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");

	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь не должно быть размещений по НТТ
	ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре,
	                          Отказ, Заголовок);

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам,
							ТаблицаПоТаре, Отказ, Заголовок);
							  
КонецПроцедуры // ДвиженияПоРегистрам()

// Формируем движения по упр. регистрам.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре,
	                          Отказ, Заголовок);

	Если Не Отказ Тогда
		НаборДвижений = Движения.ВнутренниеЗаказы;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения( Ссылка,                   "ВнутреннийЗаказ");
		ТаблицаДвижений.ЗаполнитьЗначения( Заказчик,                 "Заказчик");
		ТаблицаДвижений.ЗаполнитьЗначения( ОпределитьСтатусПартии(), "СтатусПартии");

		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		НаборДвижений.мПериод            = Дата;
		Движения.ВнутренниеЗаказы.ВыполнитьПриход();

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения( Ссылка,                                           "ВнутреннийЗаказ");
		ТаблицаДвижений.ЗаполнитьЗначения( Заказчик,                                         "Заказчик");
		ТаблицаДвижений.ЗаполнитьЗначения( Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "СтатусПартии");

		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		НаборДвижений.мПериод            = Дата;
		
		Движения.ВнутренниеЗаказы.ВыполнитьПриход();
		
	//	ТаблицаПоТоварамРазмещение = ТаблицаПоТоварам.Скопировать();
	//	Сч = 0;
	//	Пока Сч < ТаблицаПоТоварамРазмещение.Количество() Цикл
	//		СтрокаТаблицы = ТаблицаПоТоварамРазмещение.Получить(Сч);
	//		Если ЗначениеНеЗаполнено(СтрокаТаблицы.Размещение) 
	//		 или ТипЗнч(СтрокаТаблицы.Размещение) <> Тип("ДокументСсылка.ЗаказПоставщику") Тогда
	//			 ТаблицаПоТоварамРазмещение.Удалить(СтрокаТаблицы);
	//		Иначе 
	//			Сч = Сч + 1;
	//		КонецЕсли; 
	//	КонецЦикла;
	//	
	//	Если ТаблицаПоТоварамРазмещение.Количество() > 0 Тогда
	//		
	//		ТаблицаПоТоварамРазмещение.Колонки.Размещение.Имя = "ЗаказПоставщику";
	//		
	//		// По регистру РазмещениеЗаказовПокупателей
	//		НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
	//		
	//		ТаблицаДвижений = НаборДвижений.Выгрузить();
	//		
	//		// Заполним таблицу движений.
	//		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамРазмещение, ТаблицаДвижений);
	//		
	//		ТаблицаДвижений.ЗаполнитьЗначения( Ссылка,                       "ЗаказПокупателя");
	//		ТаблицаДвижений.ЗаполнитьЗначения( Перечисления.ТоварТара.Товар, "ТоварТара");
	//		
	//		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	//		НаборДвижений.мПериод            = Дата;
	//		
	//		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
	//			НаборДвижений.КонтрольОстатковПоЗаказамПоставщикам(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
	//		КонецЕсли;

	//		Если Не Отказ Тогда
	//			Движения.РазмещениеЗаказовПокупателей.ВыполнитьПриход();
	//		КонецЕсли;
	//	
	//	КонецЕсли;
	//	
	//	ТаблицаПоТареРазмещение = ТаблицаПоТаре.Скопировать();
	//	Сч = 0;
	//	Пока Сч < ТаблицаПоТареРазмещение.Количество() Цикл
	//		СтрокаТаблицы = ТаблицаПоТареРазмещение.Получить(Сч);
	//		Если ЗначениеНеЗаполнено(СтрокаТаблицы.Размещение) 
	//		 или ТипЗнч(СтрокаТаблицы.Размещение) <> Тип("ДокументСсылка.ЗаказПоставщику") Тогда
	//			 ТаблицаПоТареРазмещение.Удалить(СтрокаТаблицы);
	//		Иначе 
	//			Сч = Сч + 1;
	//		КонецЕсли; 
	//	КонецЦикла;
	//	
	//	Если ТаблицаПоТареРазмещение.Количество() > 0 Тогда
	//		
	//		ТаблицаПоТареРазмещение.Колонки.Размещение.Имя = "ЗаказПоставщику";
	//		
	//		// Сначала спишем свободные остатки с по заказу
	//		// По регистру РазмещениеЗаказовПокупателей
	//		НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
	//		
	//		ТаблицаДвижений = НаборДвижений.Выгрузить();
	//		ТаблицаДвижений.Очистить();
	//		
	//		// Заполним таблицу движений.
	//		ЗагрузитьВТаблицуЗначений(ТаблицаПоТареРазмещение, ТаблицаДвижений);
	//		
	//		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ЗаказПокупателя");
	//		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Тара, "ТоварТара");
	//		
	//		
	//		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	//		НаборДвижений.мПериод            = Дата;
	//		
	//		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
	//			НаборДвижений.КонтрольОстатковПоЗаказамПоставщикам(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
	//		КонецЕсли;

	//		Если Не Отказ Тогда
	//			Движения.РазмещениеЗаказовПокупателей.ВыполнитьПриход();
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//	
	//	ТаблицаПоТоварамРезервирование = ТаблицаПоТоварам.Скопировать();
	//	Сч = 0;
	//	Пока Сч < ТаблицаПоТоварамРезервирование.Количество() Цикл
	//		СтрокаТаблицы = ТаблицаПоТоварамРезервирование.Получить(Сч);
	//		Если ЗначениеНеЗаполнено(СтрокаТаблицы.Размещение) 
	//		 или ТипЗнч(СтрокаТаблицы.Размещение) <> Тип("СправочникСсылка.Склады") Тогда
	//			 ТаблицаПоТоварамРезервирование.Удалить(СтрокаТаблицы);
	//		Иначе 
	//			Сч = Сч + 1;
	//		КонецЕсли; 
	//	КонецЦикла;
	//	
	//	Инд = 0;
	//	
	//	Если ТаблицаПоТоварамРезервирование.Количество() > 0 Тогда
	//		ТаблицаПоТоварамРезервирование.Колонки.Размещение.Имя = "Склад";
	//		
	//		НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
	//		
	//		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	//		ТаблицаДвижений = НаборДвижений.Выгрузить();
	//		
	//		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамРезервирование, ТаблицаДвижений);
	//		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументРезерва");

	//		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	//		НаборДвижений.мПериод            = Дата;
	//		
	//		// Проверка осатков при оперативном проведении.
	//		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
	//			НаборДвижений.КонтрольСвободныхОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
	//		КонецЕсли;
	//		
	//		Движения.ТоварыВРезервеНаСкладах.ВыполнитьПриход();
	//		
	//	КонецЕсли;
	//	
	//	ТаблицаПоТареРезервирование = ТаблицаПоТаре.Скопировать();
	//	Сч = 0;
	//	Пока Сч < ТаблицаПоТареРезервирование.Количество() Цикл
	//		СтрокаТаблицы = ТаблицаПоТареРезервирование.Получить(Сч);
	//		Если ЗначениеНеЗаполнено(СтрокаТаблицы.Размещение) 
	//		 или ТипЗнч(СтрокаТаблицы.Размещение) <> Тип("СправочникСсылка.Склады") Тогда
	//			 ТаблицаПоТареРезервирование.Удалить(СтрокаТаблицы);
	//		Иначе 
	//			Сч = Сч + 1;
	//		КонецЕсли; 
	//	КонецЦикла;
	//	
	//	Если ТаблицаПоТареРезервирование.Количество() > 0 Тогда
	//		ТаблицаПоТареРезервирование.Колонки.Размещение.Имя = "Склад";
	//		
	//		НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
	//		
	//		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	//		ТаблицаДвижений = НаборДвижений.Выгрузить();
	//		ТаблицаДвижений.Очистить();
	//		
	//		ЗагрузитьВТаблицуЗначений(ТаблицаПоТареРезервирование, ТаблицаДвижений);
	//		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументРезерва");

	//		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	//		НаборДвижений.мПериод            = Дата;
	//		
	//		// Проверка осатков при оперативном проведении.
	//		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
	//			НаборДвижений.КонтрольСвободныхОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
	//		КонецЕсли;
	//		
	//		Движения.ТоварыВРезервеНаСкладах.ВыполнитьПриход();
	//		
	//	КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Заполняет колонки значениями, нужными для упр. учета
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,"ДопустимыйСтатус2");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"ОтражатьВУправленческомУчете");

КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр() 

// Заполняет колонки значениями, нужными для упр. учета
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоВозвратнойТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"ОтражатьВУправленческомУчете");
			
КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоВозвратнойТареУпр() 

// Формируем движения по регистру СписанныеТовары
//
Процедура ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, 
				                          ТаблицаПоТоварам, ТаблицаПоТаре,
											Отказ, Заголовок)
											
	ТаблицаПоТоварамРезервирование = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезервирование.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезервирование.Получить(Сч);
		Если ЗначениеНеЗаполнено(СтрокаТаблицы.Размещение) 
		 или ТипЗнч(СтрокаТаблицы.Размещение) <> Тип("СправочникСсылка.Склады") Тогда
			 ТаблицаПоТоварамРезервирование.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Инд = 0;
			
	Если ТаблицаПоТоварамРезервирование.Количество() > 0 Тогда
		ТаблицаПоТоварамРезервирование.Колонки.Размещение.Имя = "Склад";
		
		// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары
		НаборДвижений = Движения.СписанныеТовары;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамРезервирование, ТаблицаДвижений);
		
		// Недостающие поля.
		Инд = 0;
		Для каждого Строка Из ТаблицаДвижений Цикл
			Инд = Инд+1;
			Строка.НомерСтрокиДокумента = Инд;
		КонецЦикла;
		
		ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
		ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ,"КодОперацииПартииТоваров");
		
		// Списывать партии можно только по заказу (измерение Заказ - пустое).
		ТаблицаДвижений.ЗаполнитьЗначения(Ложь,"СписыватьТолькоПоЗаказу");
		
		// Заказ, на который списывать партию.
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ЗаказСписания");
		
		ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
												
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.СписанныеТовары.ВыполнитьДвижения();
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаПоТареРезервирование = ТаблицаПоТаре.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТареРезервирование.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТареРезервирование.Получить(Сч);
		Если ЗначениеНеЗаполнено(СтрокаТаблицы.Размещение) 
		 или ТипЗнч(СтрокаТаблицы.Размещение) <> Тип("СправочникСсылка.Склады") Тогда
			 ТаблицаПоТареРезервирование.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Если ТаблицаПоТареРезервирование.Количество() > 0 Тогда
		ТаблицаПоТареРезервирование.Колонки.Размещение.Имя = "Склад";
				
		// ТАРА ПО РЕГИСТРУ СписанныеТовары.
		НаборДвижений = Движения.СписанныеТовары;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТареРезервирование, ТаблицаДвижений);
		
		// Недостающие поля.
		Для каждого Строка Из ТаблицаДвижений Цикл
			Инд = Инд+1;
			Строка.НомерСтрокиДокумента = Инд;
		КонецЦикла;
		
		ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
		ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ,"КодОперацииПартииТоваров");
		
		ТаблицаДвижений.ЗаполнитьЗначения(Ложь,"СписыватьТолькоПоЗаказу");
		// Заказ, на который списывать партию.
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ЗаказСписания");
		
		ЗаполнитьКолонкиРегистраСписанныеТоварыПоВозвратнойТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
												
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.СписанныеТовары.ВыполнитьДвижения();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструСписанныеТовары()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.Событие") Тогда

		// Заполнение шапки
		ВремяНапоминания  = Основание.ВремяНапоминания;
		Комментарий       = Основание.Комментарий;
		НапомнитьОСобытии = Основание.НапомнитьОСобытии;
		Ответственный     = Основание.Ответственный;
		
    ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда  //+++ 17.08.2011
		
		
		текст1 = " "+Основание.Номер+" от "+Формат(Основание.Дата,"ДФ=dd.MM.yyyy")+";";
		//Если ПроверитьЗаказПок(текст1) тогда
		//	возврат;
		//КонецЕсли;
		
		// Заполнение шапки
		АвтоРазмещение      = Основание.АвтоРазмещение;
		АвтоРезервирование	= Основание.АвтоРезервирование;
		
		ДатаОтгрузки     = Основание.ДатаОтгрузки;
		Заказчик           = Основание.Склад;

		НапомнитьОСобытии  = Основание.НапомнитьОСобытии;
		ВремяНапоминания = Основание.ВремяНапоминания;
		
		Организация        = Основание.Организация;
		Подразделение      = Основание.Подразделение;
		Ответственный      = Основание.Ответственный;
		ДокументОснование  = Основание.Ссылка;
		Комментарий        = "# Заказ покупателя" + текст1;
		
		ЗаполнитьТабличнуюЧастьПоЗаказуПокупателяУпр(Товары,ДокументОснование);		
		//-------------------------------------------------------------------------------------
		//Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл
		//НоваяСтрока = Товары.Добавить();
		//	НоваяСтрока.Номенклатура               = ТекСтрокаТовары.Номенклатура;
		////	НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрокаТовары.ХарактеристикаНоменклатуры;
		//НоваяСтрока.ЕдиницаИзмерения           = ТекСтрокаТовары.ЕдиницаИзмерения;
		//	НоваяСтрока.Количество                 = ТекСтрокаТовары.Количество;
		//	
		//	НоваяСтрока.ЕдиницаИзмеренияМест       = ТекСтрокаТовары.ЕдиницаИзмеренияМест;
		//	НоваяСтрока.Коэффициент                = ТекСтрокаТовары.Коэффициент;
		//	НоваяСтрока.КоличествоМест             = ТекСтрокаТовары.КоличествоМест;
		//	
		//	НоваяСтрока.Качество				   = Справочники.Качество.Новый;
		//	Если ЗначениеЗаполнено(ТекСтрокаТовары.Размещение) и (ТекСтрокаТовары.Размещение<>Неопределено) тогда
		//		НоваяСтрока.Размещение			   = ТекСтрокаТовары.Размещение;
		//	иначе 
		//		НоваяСтрока.Размещение			   = Справочники.Склады.ПустаяСсылка(); // для ручного выбора склада
		//	КонецЕсли;
		//	
		//КонецЦикла;

        //-----------------возвратная тара-----------------------------------------------------
		//Для Каждого ТекСтрокаВозвратнаяТара Из Основание.ВозвратнаяТара Цикл
		//НоваяСтрока = ВозвратнаяТара.Добавить();
		//	НоваяСтрока.Номенклатура = ТекСтрокаВозвратнаяТара.Номенклатура;
		//	НоваяСтрока.Количество   = ТекСтрокаВозвратнаяТара.Количество;
		//	Если ЗначениеЗаполнено(ТекСтрокаВозвратнаяТара.Размещение) и (ТекСтрокаВозвратнаяТара.Размещение<>Неопределено) тогда
		//		НоваяСтрока.Размещение			   = ТекСтрокаВозвратнаяТара.Размещение;
		//	иначе 
		//		НоваяСтрока.Размещение			   = Справочники.Склады.ПустаяСсылка();// для ручного выбора склада
		//	КонецЕсли;
		//КонецЦикла;


	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда

		// Заполнение шапки
		АвтоРазмещение              = Истина;
		АдресДоставки    = Основание.АдресДоставки;
		ВремяНапоминания = Основание.ВремяНапоминания;
		ДатаОплаты       = Основание.ДатаОплаты;
		ДатаОтгрузки     = Основание.ДатаОтгрузки;
		Комментарий        = Основание.Комментарий;
		НапомнитьОСобытии  = Основание.НапомнитьОСобытии;
		Организация        = Основание.Организация;
		Ответственный      = Основание.Ответственный;
		Подразделение      = Основание.Подразделение;
		Заказчик           = Основание.Склад;

		Для Каждого ТекСтрокаВозвратнаяТара Из Основание.ВозвратнаяТара Цикл

			НоваяСтрока = ВозвратнаяТара.Добавить();
			НоваяСтрока.Количество   = ТекСтрокаВозвратнаяТара.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаВозвратнаяТара.Номенклатура;

		КонецЦикла;

		Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл

			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения           = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест       = ТекСтрокаТовары.ЕдиницаИзмеренияМест;
			НоваяСтрока.Количество                 = ТекСтрокаТовары.Количество;
			НоваяСтрока.КоличествоМест             = ТекСтрокаТовары.КоличествоМест;
			НоваяСтрока.Коэффициент                = ТекСтрокаТовары.Коэффициент;
			НоваяСтрока.Номенклатура               = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрокаТовары.ХарактеристикаНоменклатуры;

		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если Не ИспользоватьВнутренниеЗаказы(Истина) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Проверка заполнения единицы измерения мест и количества мест
	ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	
	Если ВидЗаказа = Перечисления.ВидыВнутреннегоЗаказа.ВПодразделение Тогда
		ВозвратнаяТара.Очистить();
	КонецЕсли;
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 


КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = СформироватьДеревоПолейЗапросаПоШапке();
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "ВестиПартионныйУчетПоСкладам", "ВестиПартионныйУчетПоСкладам");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("НомерСтроки"               , "НомерСтроки");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("Размещение"                , "Размещение");
	СтруктураПолей.Вставить("ВидСкладаРазмещения"       , "Размещение.ВидСклада");

	РезультатЗапросаПоТоварам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("НомерСтроки"               , "НомерСтроки");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");
	СтруктураПолей.Вставить("Размещение"                , "Размещение");
	СтруктураПолей.Вставить("ВидСкладаРазмещения"       , "Размещение.ВидСклада");

	РезультатЗапросаПоТаре = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары" и "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам,
							ТаблицаПоТаре, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ЗаполнитьТабличнуюЧастьПоЗаказуПокупателяУпр(Товары,ДокументОснование)  Экспорт
	    Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
	               |	МИНИМУМ(ЕСТЬNULL(ЗаказПокупателяТовары.НомерСтроки, 1000)) КАК НомерСтроки,
	               |	ВложенныйЗапрос.Номенклатура Номенклатура,
				   |	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
	               |	ВложенныйЗапрос.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	               |	0 КАК Цена,
	               |	0 КАК Сумма
	               |ИЗ
	               |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |		ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	               |		СУММА(ЗаказыПокупателейОстатки.КоличествоОстаток) КАК Количество
	               |	ИЗ
	               |		РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя = &ДокументОснование) КАК ЗаказыПокупателейОстатки
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ЗаказыПокупателейОстатки.Номенклатура) КАК ВложенныйЗапрос
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	               |			СУММА(ЗаказПокупателяТовары.Количество) КАК Количество,
	               |			МИНИМУМ(ЗаказПокупателяТовары.НомерСтроки) КАК НомерСтроки
	               |		ИЗ
	               |			Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	               |		ГДЕ
	               |			ЗаказПокупателяТовары.Ссылка = &ДокументОснование
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ЗаказПокупателяТовары.Номенклатура) КАК ЗаказПокупателяТовары
	               |		ПО ВложенныйЗапрос.Номенклатура = ЗаказПокупателяТовары.Номенклатура
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВложенныйЗапрос.Номенклатура
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки
	               |АВТОУПОРЯДОЧИВАНИЕ";
		Запрос.УстановитьПараметр("ДокументОснование",ДокументОснование);	
		Выборка=Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока=Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
			НоваяСтрока.ЕдиницаИзмеренияМест       = Выборка.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент                = 1;
			//НоваяСтрока.КоличествоМест             = 1;
			НоваяСтрока.Качество				   = Справочники.Качество.Новый;
			НоваяСтрока.Размещение			   = Справочники.Склады.ПустаяСсылка();
		КонецЦикла;	
					 
КонецПроцедуры	
//функция ПроверитьЗаказПок(текст111) экспорт
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
//				   |	ВнутреннийЗаказ.Ссылка
//				   |ИЗ
//				   |	Документ.ВнутреннийЗаказ КАК ВнутреннийЗаказ
//				   |ГДЕ
//				   |	ВнутреннийЗаказ.Комментарий ПОДОБНО &Комментарий
//				   |	И ВнутреннийЗаказ.Проведен = ИСТИНА
//				   |	И ВнутреннийЗаказ.ПометкаУдаления = ЛОЖЬ";
//	
//	Запрос.УстановитьПараметр("Комментарий", "%"+текст111 ); // в любом месте 
//	
//	Результат = Запрос.Выполнить();
//	Выборка = Результат.Выбрать();
//	
//	Если Выборка.Количество()>0 тогда
//		рез = истина;
//		Выборка.Следующий();
//		Предупреждение("Уже создан "+Выборка.Ссылка+" на основе Заказа покупателя "+текст111, 30);
//	иначе
//		рез = Ложь;
//	КонецЕсли;	
//	
//	возврат рез;
//	
//КонецФункции

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
