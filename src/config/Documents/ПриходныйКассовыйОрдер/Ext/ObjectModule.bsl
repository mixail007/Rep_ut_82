// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

// Хранит текущее распределение долга работника по займу
// на основную сумму займа и начисленные проценты
Перем СтруктураДолг Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

Перем ТаблицаПлатежейУпр;

//БАЛАНС (04.12.2007)                       
//
Перем мПроведениеИзФормы Экспорт; 

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
	// разработанной методистами
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма накладной
	//
Функция ПечатьПКО()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата  КАК ДатаДокумента,
	|	Организация КАК Орган,
	|	Организация,
	|	Организация КАК Руководители,
	|	Подразделение.Представление КАК ПредставлениеПодразделения,
	|	Подразделение               КАК Подразделение,
	|	Контрагент,
	|	Контрагент.Представление КАК Контрагент,
	|	ПринятоОт      КАК ПринятоОт,
	|	Основание      КАК Основание,
	|	Приложение     КАК Приложение,
	|	СуммаДокумента КАК Сумма,
	|	ВалютаДокумента,
	|	ВалютаДокумента.Представление КАК ВалютаПредставление
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйКассовыйОрдер_КО1";
	Макет       = ПолучитьОбщийМакет("КО1");
		
	ЕстьРасчетыСКонтрагентами=ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=ЕстьРасчетыПоКредитам(ВидОперации);

	// Выводим шапку ПКО

	СведенияОбОрганизации = СведенияОЮрФизЛице(Шапка.Орган, Шапка.ДатаДокумента);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	ОбластьМакета.Параметры.СуммаРубКоп       = ?(НЕ Касса.ВалютаДенежныхСредств=мВалютаРегламентированногоУчета,Формат(Шапка.Сумма,"ЧЦ=15; ЧДЦ=2")+" "+СокрЛП(Шапка.ВалютаДокумента),РубКоп(Шапка.Сумма));
	ОбластьМакета.Параметры.Сумма		      = Формат(Шапка.Сумма,"ЧЦ=15; ЧДЦ=2")+?(НЕ Касса.ВалютаДенежныхСредств=мВалютаРегламентированногоУчета," "+СокрЛП(Шапка.ВалютаДокумента),"");
	ОбластьМакета.Параметры.СуммаПрописью     = СформироватьСуммуПрописью(Шапка.Сумма, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.ОрганизацияПоОКПО = СведенияОбОрганизации.КодПоОКПО;
	ОбластьМакета.Параметры.ДатаДокумента     = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.НомерДокумента    = ПолучитьНомерНаПечать(Шапка);

	ТабНДС=РасшифровкаПлатежа.Выгрузить();
	
	ТабНДС.Свернуть("СтавкаНДС","СуммаНДС");
	
	ТекстСуммаНДС="";
	
	Для Каждого СтрокаНДС ИЗ ТабНДС цикл
		
		ТекстСуммаНДС = ТекстСуммаНДС+Символы.ПС + "НДС (" + ?(ЗначениеНеЗаполнено(СтрокаНДС.СтавкаНДС), "без налога", СтрокаНДС.СтавкаНДС) + ") " + Формат(СтрокаНДС.СуммаНДС, "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00")+" "+Шапка.ВалютаПредставление;
		
	КонецЦикла;
	
	ТекстСуммаНДС=Сред(ТекстСуммаНДС,2);
		
	ОбластьМакета.Параметры.ВТомЧисле=ТекстСуммаНДС;

	Руководители = ОтветственныеЛицаОрганизации(Шапка.Руководители, КонецДня(Шапка.ДатаДокумента),);
	
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	Кассир       = Руководители.Кассир;

	ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = Бухгалтер;
	ОбластьМакета.Параметры.ФИОКассира = Кассир;

	ТекстПринятоОт=Шапка.ПринятоОт;

	Если ТекстПринятоОт="" И НЕ ЗначениеНеЗаполнено(Контрагент) Тогда
		
		Если ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
			
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
			|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
			|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество
			|ИЗ
			|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо=&ФизЛицо) КАК ФИОФизЛицСрезПоследних";
			Запрос.УстановитьПараметр("Дата",Дата);
			Запрос.УстановитьПараметр("ФизЛицо",Контрагент);
			
			Результат=Запрос.Выполнить().Выбрать();
			Если Результат.Следующий() Тогда
				ТекстПринятоОт = ?(НЕ ПустаяСтрока(Результат.Фамилия), 
				Результат.Фамилия + ?(НЕ ПустаяСтрока(Результат.Имя)," " + Результат.Имя + " " + ?(НЕ ПустаяСтрока(Результат.Отчество),Результат.Отчество, ""), ""),"");
			КонецЕсли;
			
		ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			ТекстПринятоОт =?(Контрагент.НаименованиеПолное="",Контрагент.Наименование, Контрагент.НаименованиеПолное);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстОснование=Основание;
	
	Если Основание="" И Не ЗначениеНеЗаполнено(РасчетныйДокумент) Тогда
		
		ТекстОснование=Лев(Строка(РасчетныйДокумент),Найти(Строка(РасчетныйДокумент),Строка(РасчетныйДокумент.Дата))-1)+Формат(РасчетныйДокумент.Дата,"ДФ=dd.MM.yyyy");
		
	КонецЕсли;
	
	ОбластьМакета.Параметры.ПринятоОт  = ТекстПринятоОт;
	ОбластьМакета.Параметры.Основание  = ТекстОснование;
	ОбластьМакета.Параметры.Приложение = Приложение;
	
	ПроставитьПараметрыПечатиДокумента(ОбластьМакета, Организация, Ссылка.Метаданные().Имя);

	ТабДокумент.Вывести(ОбластьМакета);

	// Зададим параметры макета
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;

	Возврат ТабДокумент;

КонецФункции // ПечатьПКО()

// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходмое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "ПКО" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьПКО();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();

	КонецЕсли;

	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)));

КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт
	
	СписокМакетов = Новый СписокЗначений;
	
	СписокМакетов.Добавить("ПКО", "Приходный кассовый ордер");
	
	ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
	Возврат СписокМакетов;
	
КонецФункции // ПолучитьСписокПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж) Экспорт

	КурсДокумента=?(КурсДокумента=0,1, КурсДокумента);
	КратностьДокумента=?(КратностьДокумента=0,1, КратностьДокумента);
	
	Если Не СтрокаПлатеж=Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов=?(СтрокаПлатеж.КурсВзаиморасчетов=0,1,СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов=?(СтрокаПлатеж.КратностьВзаиморасчетов=0,1,СтрокаПлатеж.КратностьВзаиморасчетов);
	КонецЕсли;

КонецПроцедуры // ПроверкаКурсовВалют()

Функция РубКоп(Сумма)
	
	Руб=Цел(Сумма);
	Коп=ОКР(100*(Сумма-Руб),0,1);
	СуммаРубКоп=""+Руб+" руб. "+Цел(Коп/10)+(Коп-10*Цел(Коп/10))+" коп.";
	Возврат СуммаРубКоп;
	
КонецФункции

// Процедура выполняет заполнение суммы документа,
// по регистру "СуммыЗаказов".
//
// Параметры:
//  ДокументОснование  - документ ссылка (Заказ покупателя, Заказ поставщику).
//  ВалютаДокумента    - валюта документа (валюта регламентированного учета организаций)
//  КурсВзаиморасчетов - курс взаиморасчетов по договору
//  КратностьВзаиморасчетов - кратность взаиморасчетов по договору
//
Процедура ЗаполнитьПоЗаказуУпр(СтрокаПлатеж)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", ДокументОснование);

	Запрос.Текст ="ВЫБРАТЬ
	|	РасчетыСКонтрагентамиОстатки.Сделка Как Сделка,
	|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(, Сделка = &Заказ) КАК РасчетыСКонтрагентамиОстатки";
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПлатеж.Сделка=Выборка.Сделка;
		Если Выборка.Сумма > 0 Тогда
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.Сумма;
			СуммаДокумента = ПересчитатьИзВалютыВВалюту(Выборка.Сумма,
			                            СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
			                            ВалютаДокумента,
			                            СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
			                            СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
										
			СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоЗаказуУпр()

// Процедура выполняет заполнение суммы документа,
// суммы взаиморасчетов по регистру "ВзаиморачетыСКонтрагентами".
//
Процедура ЗаполнитьПоВзаиморасчетамУпр(СтрокаПлатеж)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорКонтрагента", СтрокаПлатеж.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка", СтрокаПлатеж.Сделка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СуммаВзаиморасчетовОстаток КАК СуммаДолга // в валюте взаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(,
	|	                                                      ДоговорКонтрагента = &ДоговорКонтрагента
	|	                                                    И Сделка = &Сделка)
	|ГДЕ
	|	СуммаВзаиморасчетовОстаток > 0
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаДолга;
		СуммаДокумента = ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
		СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента,
		СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
		СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоВзаиморасчетамУпр()

// Процедура выполняет заполнение суммы документа,
// суммы взаиморасчетов по регистру "ВзаиморасчетыСПодотчетнымиЛицами".
//
Процедура ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(СтрокаПлатеж) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПодОтчетник", Контрагент);
	Запрос.УстановитьПараметр("РасчетныйДокумент", РасчетныйДокумент);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетовПодотчетника", ВалютаВзаиморасчетовПодотчетника);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СуммаВзаиморасчетовОстаток КАК СуммаДолга // в валюте взаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(,
	|	                                                          ФизЛицо = &ПодОтчетник
	|	                                                        И РасчетныйДокумент = &РасчетныйДокумент
	|	                                                        И Валюта = &ВалютаВзаиморасчетовПодотчетника)
	|ГДЕ
	|	СуммаВзаиморасчетовОстаток > 0
	|";
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов = Выборка.СуммаДолга;
		СуммаДокумента = ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
						ВалютаВзаиморасчетовПодотчетника, ВалютаДокумента,
						СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
						СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
						
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр()

// Процедура выполняет заполнение суммы документа по регистру "РозничнаяВыручкаКомпании".
//
// Параметры:
//  КассаККМ - ссылка на справочник "Кассы ККМ".
//
Процедура ЗаполнитьПоРозничнойВыручкеУпр(СтрокаПлатеж)

	Запрос = Новый Запрос;
	Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
		Запрос.УстановитьПараметр("РозничнаяТочка", ДокументОснование.КассаККМ);
	Иначе
		Запрос.УстановитьПараметр("РозничнаяТочка", ДокументОснование.Склад);
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СуммаОстаток
	|ИЗ
	|	РегистрНакопления.РозничнаяВыручка.Остатки(, РозничнаяТочка = &РозничнаяТочка)
	|ГДЕ
	|	СуммаОстаток > 0  
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаДокумента = Мин(ПересчитатьИзВалютыВВалюту(Выборка.СуммаОстаток, 
		                                мВалютаРегламентированногоУчета, ВалютаДокумента,
		                                1, КурсДокумента, 1, КратностьДокумента),
		                                ПересчитатьИзВалютыВВалюту(ДокументОснование.СуммаДокумента,  мВалютаРегламентированногоУчета, ВалютаДокумента,
		                                1, КурсДокумента, 1, КратностьДокумента));
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;									
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоРозничнойВыручкеУпр()

Процедура ЗаполнитьПоСуммеДокументаУпр(СтрокаПлатеж)
	
	СтруктураКурсаОснования = ПолучитьКурсВалюты(ДокументОснование.ВалютаДокумента, ДокументОснование.Дата);
	КурсОснования=СтруктураКурсаОснования.Курс;
	КратностьОснования=СтруктураКурсаОснования.Кратность;

	ОснованиеСуммаДокумента  = ДокументОснование.СуммаДокумента;
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		ОснованиеСуммаДокумента = ОснованиеСуммаДокумента - ДокументОснование.СуммаВознаграждения;
	КонецЕсли;
	
	СтрокаПлатеж.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(ОснованиеСуммаДокумента, ДокументОснование.ВалютаДокумента, ДокументОснование.ДоговорКонтрагента.ВалютаВзаиморасчетов,
									 КурсОснования, ДокументОснование.КурсВзаиморасчетов, КратностьОснования, ДокументОснование.КратностьВзаиморасчетов);
	СуммаДокумента      = ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
									 КурсДокумента, СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);
	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
	
КонецПроцедуры

//Заполняет документ на основании расходного кассового ордера
//
Процедура ЗаполнитьПоРКОУпр()
	
	Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
		
		СтруктураКурсаОснования = ПолучитьКурсВалюты(ДокументОснование.ВалютаДокумента, ДокументОснование.Дата);
		КурсОснования=СтруктураКурсаОснования.Курс;
		КратностьОснования=СтруктураКурсаОснования.Кратность;
		ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком;
		
		//+++ 10.05.2012
		Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"УчетТолькоПоПодразделениюПользователя") тогда//+++ 10.05.2012
			 ОтражатьВБухгалтерскомУчете = ложь;
			 ОтражатьВНалоговомУчете = ложь;
		КонецЕсли;	 
			
			Контрагент = ДокументОснование.Контрагент;
			
		
		Для Каждого СтрокаОснование ИЗ ДокументОснование.РасшифровкаПлатежа Цикл
			
			СтрокаПлатеж      = РасшифровкаПлатежа.Добавить();
			
			СтрокаПлатеж.ДоговорКонтрагента  	 = СтрокаОснование.ДоговорКонтрагента;
			СтруктураКурсаВзаиморасчетов         = ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
			СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
			
			СтрокаПлатеж.СуммаПлатежа=СтрокаОснование.СуммаПлатежа;
						
			Если ЗначениеНеЗаполнено(СтрокаОснование.Сделка) И СтрокаОснование.ДоговорКонтрагента.ВедениеВзаиморасчетов = 
				Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
				СтрокаПлатеж.Сделка = ДокументОснование;
			Иначе
				СтрокаПлатеж.Сделка = СтрокаОснование.Сделка;
			КонецЕсли;
			
			СтрокаПлатеж.СтавкаНДС=СтрокаОснование.СтавкаНДС;
			
		КонецЦикла;
		
		ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета,РасшифровкаПлатежа);
		
		Для Индекс=0 По ДокументОснование.РасшифровкаПлатежа.Количество()-1 Цикл
			
			СтрокаПлатеж=РасшифровкаПлатежа[Индекс];
			СтрокаОснование=ДокументОснование.РасшифровкаПлатежа[Индекс];
			
			Если (НЕ ЗначениеНЕЗаполнено(СтрокаПлатеж.ДоговорКонтрагента))
				И СтрокаПлатеж.ДоговорКонтрагента=СтрокаОснование.ДоговорКонтрагента Тогда // Остался договор из основания
						
				СтрокаПлатеж.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СтрокаОснование.СуммаПлатежа, 
				ДокументОснование.ВалютаДокумента, 
				СтрокаОснование.ДоговорКонтрагента.ВалютаВзаиморасчетов,
				КурсОснования, СтрокаОснование.КурсВзаиморасчетов, 
				КратностьОснования, СтрокаОснование.КратностьВзаиморасчетов);
				
				СтрокаПлатеж.СуммаПлатежа     = ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
				СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,
				ВалютаДокумента,
				СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента, 
				СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);
				
			Иначе
				
				Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
					
					СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
					СтрокаПлатеж.КурсВзаиморасчетов=1;
					СтрокаПлатеж.КратностьВзаиморасчетов=1;
					
				Иначе
					
					СтрокаПлатеж.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, 
					ВалютаДокумента, 
					СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,
					КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов, 
					КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
					
				КонецЕсли;
				
			КонецЕсли;	
			
			ПересчитатьСуммуНДС(СтрокаПлатеж);
			
		КонецЦикла;
		
		СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
		
						
	ИначеЕсли ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю Тогда
		
		// Отказываем
		Возврат;
		
	ИначеЕсли ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		СтрокаПлатеж      = РасшифровкаПлатежа.Добавить();
		
		ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником;
		
		Контрагент                       = ДокументОснование.Контрагент;
		РасчетныйДокумент	             = ДокументОснование;
		ВалютаВзаиморасчетовПодотчетника = ДокументОснование.ВалютаВзаиморасчетовПодотчетника;
		СтруктураКурса                   = ПолучитьКурсВалюты(ВалютаВзаиморасчетовПодотчетника, ТекущаяДата());
		СтрокаПлатеж.КурсВзаиморасчетов               = СтруктураКурса.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов          = СтруктураКурса.Кратность;
		
		ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(СтрокаПлатеж);
		
	ИначеЕсли ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
		
		ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее;
		
		// Дальше заполняем по умолчанию
		Возврат;
		
	ИначеЕсли  ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		
		ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке;
		// Дальше заполняем по умолчанию
		Возврат;
		
	ИначеЕсли  ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ Тогда
		
		ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка;
		// Дальше заполняем по умолчанию
		Возврат;
			
	Иначе
		
		ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее;
		// Дальше заполняем по умолчанию
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоРКОУпр()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейОплатаУпр()

	СтруктураПолей=Новый Структура;
	СтруктураПолей.Вставить("Организация");
	СтруктураПолей.Вставить("Касса");
	СтруктураПолей.Вставить("СуммаДокумента");
	
	Если Не (ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке ИЛИ ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее) Тогда
		СтруктураПолей.Вставить("Контрагент");
	КонецЕсли;
		
	Если ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
		СтруктураПолей.Вставить("СчетОрганизации","Не указан счет организации");
	КонецЕсли;

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплатаУпр()

// Формирует структуру полей, обязательных для заполнения при отражении операции во 
// взаиморасчетах
// Возвращаемое значение:
//   СтруктурахПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейРасчеты()

	Если ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком ИЛИ
		 ВидОперации=Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда

		 СтруктураПолей= Новый Структура("Организация,Касса,
	                        |Контрагент, СуммаДокумента, Ответственный");

	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
		СтруктураПолей = Новый Структура("Организация,Касса,Контрагент,
	                        |ВалютаВзаиморасчетовПодотчетника, СуммаДокумента, Ответственный");
	Иначе
		СтруктураПолей= Новый Структура("Организация,Касса");
	КонецЕсли;

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()

// Проверяет значение, необходимое при проведении
Процедура ПроверитьЗначение(Значение, Отказ, Заголовок, ИмяРеквизита)
	
	Если ЗначениеНеЗаполнено(Значение) Тогда 
		//Если НЕ (ИмяРеквизита="Сделка" и Ссылка.Подразделение=справочники.Подразделения.НайтиПоКоду("00107")) тогда //+++ 18.05.2012 - для Москвы Сделка не нужна!!!
		ОшибкаПриПроведении("Не заполнено значение реквизита """+ИмяРеквизита+"""",Отказ, Заголовок);
		//КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗначение()

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧ(Отказ, Заголовок)
	
	Для Каждого Платеж Из РасшифровкаПлатежа Цикл
		
		ПроверитьЗначение(Платеж.ДоговорКонтрагента,Отказ, Заголовок,"Договор");
		ПроверитьЗначение(Платеж.СуммаВзаиморасчетов,Отказ, Заголовок,"Сумма взаиморасчетов");
		
		Если Не Отказ Тогда
			
			// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
			Если Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
			 ИЛИ Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			 Если  Константы.ОплатыРаспределяютМенеджеры.Получить() //и (яштАдминистративныеФункцииДоступны()или 
				 // (ВидОперации=Перечисления.ВидыОперацийПКО.ОплатаПокупателя
				 //и не ЗначениеНеЗаполнено(Контрагент.ОсновнойМенеджерПокупателя))) 
				 Тогда
			 Иначе	 
				ПроверитьЗначение(Платеж.Сделка, Отказ, Заголовок,"Сделка");
			 КонецЕсли;
			 	Если Отказ Тогда
					Если Подразделение=справочники.Подразделения.НайтиПоКоду("00107") тогда //+++ 18.05.2012 Для Москвы - можно!!!
						Отказ = ложь;
					иначе	
					Сообщить("По выбранному договору установлен способ ведения взаиморасчетов ""по заказам (счетам)""! 
					|Заполните поле ""Сделка""!");
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЗначениеНеЗаполнено(Организация) 
				И Организация <> Платеж.ДоговорКонтрагента.Организация Тогда
				СообщитьОбОшибке("Выбран договор контрагента, не соответстветствующий организации, указанной в документе!", Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТЧ

// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(Режим, Отказ, Заголовок)

	ДвиженияПоРегистрамУпр(Режим, Отказ, Заголовок);

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУпр(Режим, Отказ, Заголовок)

	Если Не ДенежныйЧек.Пустая() Тогда
		ПоДенежномуЧеку = Истина;
	Иначе
		ПоДенежномуЧеку = Ложь;
	КонецЕсли;

	РасчетыВозврат=НаправленияДвиженияДляДокументаДвиженияДенежныхСредствУпр(ВидОперации);
	КоэффициентСторно=?(РасчетыВозврат=Перечисления.РасчетыВозврат.Возврат,-1,1);
	
    РасчетыСКонтрагентами = ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам;
	
	ДвиженияПоСтатьям=ТаблицаПлатежейУпр.Скопировать();
	ДвиженияПоПланируемымПлатежам=ТаблицаПлатежейУпр.Скопировать();
	ДвиженияПоРезерву=ТаблицаПлатежейУпр.Скопировать();
	ДвиженияПоКонтрагентам=ТаблицаПлатежейУпр.Скопировать();
	ДвиженияДенежныхСредств=ТаблицаПлатежейУпр.Скопировать();
	
	ДвиженияПоПланируемымПлатежам.Свернуть("ДокументПланированияПлатежа,ВключатьВПлатежныйКалендарь,ДоговорКонтрагента,Сделка,СтатьяДвиженияДенежныхСредств,Проект","СуммаПлатежа,СуммаВзаиморасчетов,СуммаПлатежаПлан,СуммаУпр");
	ДвиженияПоКонтрагентам.Свернуть("ДоговорКонтрагента,Сделка,ВидДоговора,КонтролироватьДенежныеСредстваКомитента","СуммаВзаиморасчетов,СуммаУпр,СуммаРегл");
	ДвиженияДенежныхСредств.Свернуть("ДокументПланированияПлатежа,ДоговорКонтрагента,Сделка,СтатьяДвиженияДенежныхСредств,Проект","СуммаПлатежа,СуммаУпр");
	ДвиженияПоСтатьям.Свернуть("СтатьяДвиженияДенежныхСредств","СуммаПлатежа,СуммаУпр");
	ДвиженияПоРезерву.Свернуть("ДокументПланированияПлатежа","СуммаПлатежа");
	
	ДвиженияДенежныхСредств.Колонки["СуммаПлатежа"].Имя="Сумма";

	Если Оплачено Тогда
				
	// По регистру "Денежные средства"
	НаборДвиженийОстатки 		= Движения.ДенежныеСредства;
	ТаблицаДвиженийОстатки 		= НаборДвиженийОстатки.Выгрузить();

	// По регистру "Денежные средства к получению"
	НаборДвиженийПолучение   = Движения.ДенежныеСредстваКПолучению;
	ТаблицаДвиженийПолучение = НаборДвиженийПолучение.Выгрузить();
	
	СтрокаКурсыВалют=ТаблицаПлатежейУпр[0];
							
	СуммаУпр = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
			Константы.ВалютаУправленческогоУчета.Получить(), 
			СтрокаКурсыВалют.КурсДокумента,
			СтрокаКурсыВалют.КурсУпрУчета, 
			СтрокаКурсыВалют.КратностьДокумента,
			СтрокаКурсыВалют.КратностьУпрУчета);
				
	СтрокаДвиженийОстатки = ТаблицаДвиженийОстатки.Добавить();
	СтрокаДвиженийОстатки.БанковскийСчетКасса = Касса;
	СтрокаДвиженийОстатки.ВидДенежныхСредств  = Перечисления.ВидыДенежныхСредств.Наличные;
	СтрокаДвиженийОстатки.Сумма               = СуммаДокумента;
	СтрокаДвиженийОстатки.СуммаУпр            = СуммаУпр;
	
	НаборДвиженийОстатки.мПериод              = Дата;
	НаборДвиженийОстатки.мТаблицаДвижений     = ТаблицаДвиженийОстатки;
	Движения.ДенежныеСредства.ВыполнитьПриход();
		
	// По регистру "Денежные средства к получению"
	Для Каждого СтрокаДвижение Из ДвиженияПоСтатьям Цикл
		
		СтрокаДвиженийПолучение = ТаблицаДвиженийПолучение.Добавить();
		СтрокаДвиженийПолучение.БанковскийСчетКасса = Касса;
		СтрокаДвиженийПолучение.ВидДенежныхСредств  = Перечисления.ВидыДенежныхСредств.Наличные;
		СтрокаДвиженийПолучение.Сумма               = СтрокаДвижение.СуммаПлатежа;
		СтрокаДвиженийПолучение.ДокументПолучения    = Ссылка;
		СтрокаДвиженийПолучение.СтатьяДвиженияДенежныхСредств=СтрокаДвижение.СтатьяДвиженияДенежныхСредств;
		
	КонецЦикла;
		
	НаборДвиженийПолучение.мПериод              = Дата;
	НаборДвиженийПолучение.мТаблицаДвижений     = ТаблицаДвиженийПолучение;
	Движения.ДенежныеСредстваКПолучению.ВыполнитьРасход();
	
	Если ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке И НЕ ПоДенежномуЧеку Тогда
		
		// По регистру "Денежные средства"
		НаборДвижений   = Движения.ДенежныеСредства;
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.БанковскийСчетКасса = СчетОрганизации;
		СтрокаДвижений.ВидДенежныхСредств  = Перечисления.ВидыДенежныхСредств.Безналичные;
		СтрокаДвижений.Сумма               = СуммаДокумента;
		СтрокаДвижений.СуммаУпр            = СуммаУпр;
		
		НаборДвижений.мПериод              = Дата;
		НаборДвижений.мТаблицаДвижений     = ТаблицаДвижений;

		Движения.ДенежныеСредства.ВыполнитьРасход();
	
	КонецЕсли;
		
		// Резервируем денежные средства, если приход планировался и по нему размещались заявки
		Для Каждого СтрокаРезерв ИЗ ДвиженияПоРезерву Цикл
	
		// Резервируем денежные средства, если приход планировался и по нему размещались заявки
		Если НЕ СтрокаРезерв.ДокументПланированияПлатежа.Пустая() Тогда
			
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	РазмещениеЗаявокНаРасходованиеСредствОстатки.ДокументРезервирования КАК Заявка,
			|	РазмещениеЗаявокНаРасходованиеСредствОстатки.СуммаОстаток КАК СуммаОстаток,
			|	РазмещениеЗаявокНаРасходованиеСредствОстатки.ДокументРезервирования.ДатаРасхода КАК ДокументРезервированияДатаРасхода
			|ИЗ
			|	РегистрНакопления.РазмещениеЗаявокНаРасходованиеСредств.Остатки(, ДокументПланирования=&ДокументПланирования) КАК РазмещениеЗаявокНаРасходованиеСредствОстатки
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДокументРезервированияДатаРасхода";
			
			Запрос.УстановитьПараметр("ДокументПланирования",СтрокаРезерв.ДокументПланированияПлатежа);
			
			Результат=Запрос.Выполнить();
			
			Если НЕ Результат.Пустой() Тогда
				
				СуммаРезерв=СтрокаРезерв.СуммаПлатежа;	
				
				НаборРазмещение=Движения.РазмещениеЗаявокНаРасходованиеСредств;
				ТаблицаРазмещение=НаборРазмещение.Выгрузить();
				ТаблицаРазмещение.Очистить();
				
				НаборРезерв=Движения.ДенежныеСредстваВРезерве;
				ТаблицаРезерв=НаборРезерв.Выгрузить();
				ТаблицаРезерв.Очистить();
				
				Выборка=Результат.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					Если Выборка.СуммаОстаток>=СуммаРезерв Тогда
						
						СтрокаРазмещение=ТаблицаРазмещение.Добавить();
						СтрокаРазмещение.ДокументПланирования=СтрокаРезерв.ДокументПланированияПлатежа;
						СтрокаРазмещение.ДокументРезервирования=Выборка.Заявка;
						СтрокаРазмещение.Сумма=СуммаРезерв;
						
						СтрокаРезерв=ТаблицаРезерв.Добавить();
						СтрокаРезерв.БанковскийСчетКасса=Касса;
						СтрокаРезерв.ВидДенежныхСредств=Перечисления.ВидыДенежныхСредств.Наличные;
						СтрокаРезерв.ДокументРезервирования=Выборка.Заявка;
						СтрокаРезерв.Сумма=СуммаРезерв;
						
						Прервать;
						
					Иначе
						
						СтрокаРазмещение=ТаблицаРазмещение.Добавить();
						СтрокаРазмещение.ДокументПланирования=СтрокаРезерв.ДокументПланированияПлатежа;
						СтрокаРазмещение.ДокументРезервирования=Выборка.Заявка;
						СтрокаРазмещение.Сумма=Выборка.СуммаОстаток;
						
						СтрокаРезерв=ТаблицаРезерв.Добавить();
						СтрокаРезерв.БанковскийСчетКасса=Касса;
						СтрокаРезерв.ВидДенежныхСредств=Перечисления.ВидыДенежныхСредств.Наличные;
						СтрокаРезерв.ДокументРезервирования=Выборка.Заявка;
						СтрокаРезерв.Сумма=Выборка.СуммаОстаток;
						
						СуммаРезерв=СуммаРезерв-Выборка.СуммаОстаток;
						
					КонецЕсли;
					
				КонецЦикла;
				
				НаборРазмещение.мПериод=Дата;
				НаборРазмещение.мТаблицаДвижений=ТаблицаРазмещение;
				Движения.РазмещениеЗаявокНаРасходованиеСредств.ВыполнитьРасход();
				
				НаборРезерв.мПериод=Дата;
				НаборРезерв.мТаблицаДвижений=ТаблицаРезерв;
				Движения.ДенежныеСредстваВРезерве.ВыполнитьПриход();
				
			КонецЕсли;
			
		КонецЕсли;
		
		КонецЦикла;

	КонецЕсли;
	
	РасчетыСКонтрагентами = ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам;

	Если ОтраженоВОперУчете Тогда // Разнесено менеджером по оперативным взаиморасчетам
		
		Если НЕ ПоДенежномуЧеку Тогда
			
			// По регистру "Денежные средства к списанию"
			НаборДвиженийДС   = Движения.ДенежныеСредстваКПолучению;
			ТаблицаДвиженийДС = НаборДвиженийДС.Выгрузить();
			ТаблицаДвиженийДС.Очистить();
			
			Для Каждого СтрокаДвижение Из ДвиженияПоСтатьям Цикл
				
				СтрокаДвиженийДС = ТаблицаДвиженийДС.Добавить();
				СтрокаДвиженийДС.БанковскийСчетКасса = Касса;
				СтрокаДвиженийДС.ВидДенежныхСредств  = Перечисления.ВидыДенежныхСредств.Наличные;
				СтрокаДвиженийДС.Сумма               = СтрокаДвижение.СуммаПлатежа;
				СтрокаДвиженийДС.ДокументПолучения    = Ссылка;
				СтрокаДвиженийДС.СтатьяДвиженияДенежныхСредств=СтрокаДвижение.СтатьяДвиженияДенежныхСредств;
				
			КонецЦикла;
			
			НаборДвиженийДС.мПериод              = Дата;
			НаборДвиженийДС.мТаблицаДвижений     = ТаблицаДвиженийДС;
			Движения.ДенежныеСредстваКПолучению.ВыполнитьПриход();
			
		КонецЕсли;

		ЕстьПланПоступление=Ложь;
		ЕстьРасчеты=Ложь;
				
		// По регистру "Планируемые поступления денежных средств"
		НаборДвиженийПлан  = Движения.ПланируемыеПоступленияДенежныхСредств;
		ТаблицаДвиженийПлан = НаборДвиженийПлан.Выгрузить();
		ТаблицаДвиженийПлан.Очистить();
							
		// Подготовим таблицу для движений по регистру "РасчетыСКонтрагентами"
		НаборДвиженийКонтрагенты   = Движения.РасчетыСКонтрагентами;
		ТаблицаДвиженийКонтрагенты = НаборДвиженийКонтрагенты.Выгрузить();
		ТаблицаДвиженийКонтрагенты.Очистить();
		
		// По строкам табличной части
		Для Каждого СтрокаПлатеж ИЗ ДвиженияПоПланируемымПлатежам Цикл
			
			ТекущаяСделка = ОпределитьСделкуСтрокиТЧ (ЭтотОбъект,СтрокаПлатеж);
							
			Если НЕ СтрокаПлатеж.ДокументПланированияПлатежа.Пустая() Тогда
								
				СуммаПлатежа=СтрокаПлатеж.СуммаПлатежаПлан;											
				СтрокаДвиженийЗаявки = ТаблицаДвиженийПлан.Добавить();
				СтрокаДвиженийЗаявки.СуммаУпр            			= СтрокаПлатеж.СуммаУпр;
				СтрокаДвиженийЗаявки.Сумма                			= СтрокаПлатеж.СуммаПлатежаПлан;
				СтрокаДвиженийЗаявки.СуммаВзаиморасчетов  			= СтрокаПлатеж.СуммаВзаиморасчетов;
				СтрокаДвиженийЗаявки.ДокументПланирования 			= СтрокаПлатеж.ДокументПланированияПлатежа;
				СтрокаДвиженийЗаявки.СтатьяДвиженияДенежныхСредств 	= СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
				СтрокаДвиженийЗаявки.Проект						 	= СтрокаПлатеж.Проект;
				СтрокаДвиженийЗаявки.ДоговорКонтрагента				= СтрокаПлатеж.ДоговорКонтрагента;
				СтрокаДвиженийЗаявки.Сделка							= СтрокаПлатеж.Сделка;
				
				ЕстьПланПоступление = Истина;
				
				Если НЕ СтрокаПлатеж.ВключатьВПлатежныйКалендарь Тогда // Документ не был проведен по оперативным взаиморасчетам
										
					ЕстьРасчеты=Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ((Не ЕстьПланПоступление) ИЛИ ЕстьРасчеты) И РасчетыСКонтрагентами Тогда // Первое упоминание о планируемом платеже в системе
				
				// По регистру "РасчетыСКонтрагентами"
				
				СтрокаДвиженийКонтрагенты = ТаблицаДвиженийКонтрагенты.Добавить();
				СтрокаДвиженийКонтрагенты.ДоговорКонтрагента  = СтрокаПлатеж.ДоговорКонтрагента;
				СтрокаДвиженийКонтрагенты.РасчетыВозврат      = РасчетыВозврат;
				СтрокаДвиженийКонтрагенты.Сделка              = ?(ЗначениеНеЗаполнено(СтрокаПлатеж.Сделка),ТекущаяСделка,СтрокаПлатеж.Сделка);
				СтрокаДвиженийКонтрагенты.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаВзаиморасчетов*КоэффициентСторно;
				СтрокаДвиженийКонтрагенты.СуммаУпр            = СтрокаПлатеж.СуммаУпр*КоэффициентСторно;
				
				ЕстьРасчеты = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
				
		Если ЕстьПланПоступление Тогда
			
			НаборДвиженийПлан.мПериод          = Дата;
			НаборДвиженийПлан.мТаблицаДвижений = ТаблицаДвиженийПлан;
			Движения.ПланируемыеПоступленияДенежныхСредств.ВыполнитьРасход();
			
		КонецЕсли;
		
		Если ЕстьРасчеты Тогда
			
			НаборДвиженийКонтрагенты.мПериод          = Дата;
			НаборДвиженийКонтрагенты.мТаблицаДвижений = ТаблицаДвиженийКонтрагенты;
			
			Если КоэффициентСторно=1 Тогда
				
				Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
				
			Иначе
				
				Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

		Если Оплачено И ОтраженоВОперУчете Тогда  // Разнесено по оперативным взаиморасчетам
			// и принято кассиром: проводим по фактическим взаиморасчетам
			
			// По регистру "Движения денежных средств"
			НаборДвижений = Движения.ДвиженияДенежныхСредств;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ДвиженияДенежныхСредств, ТаблицаДвижений);
			
			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыДенежныхСредств.Наличные,"ВидДенежныхСредств");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыДвиженийПриходРасход.Приход,"ПриходРасход");
			ТаблицаДвижений.ЗаполнитьЗначения(Касса,"БанковскийСчетКасса");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументДвижения");
			ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,"Контрагент");
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Движения.ДвиженияДенежныхСредств.ВыполнитьДвижения();
			
			Если ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке И НЕ ПоДенежномуЧеку Тогда
				
				// По регистру "Движения денежных средств"
				НаборДвижений = Движения.ДвиженияДенежныхСредств;
				
				// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
				ТаблицаДвижений = НаборДвижений.Выгрузить();
				ТаблицаДвижений.Очистить();
				
				// Заполним таблицу движений.
				ЗагрузитьВТаблицуЗначений(ДвиженияДенежныхСредств, ТаблицаДвижений);
				
				// Недостающие поля.
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыДенежныхСредств.Безналичные,"ВидДенежныхСредств");
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыДвиженийПриходРасход.Расход,"ПриходРасход");
				ТаблицаДвижений.ЗаполнитьЗначения(СчетОрганизации,"БанковскийСчетКасса");
				ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументДвижения");
				
				НаборДвижений.мПериод            = Дата;
				НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
				
				Движения.ДвиженияДенежныхСредств.ВыполнитьДвижения();
				
			КонецЕсли;
			
			Если РасчетыСКонтрагентами Тогда
				
				// По регистрам взаиморасчетов с покукпателями и поставщиками для НДС.
				// Движение делается только если документ отражается в БУ.
				Если ОтражатьВБухгалтерскомУчете Тогда
					
					// Для целей НДС проводим платежи только по операциям с поставщиком и покупателем.
					Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком Тогда
						
						НаборДвиженийСПоставщиками   = Движения.ВзаиморасчетыСПоставщикамиДляНДС;
						ТаблицаДвиженийСПоставщиками = НаборДвиженийСПоставщиками.Выгрузить();
						
						// По строкам табличной части.
						Для Каждого СтрокаПлатеж ИЗ ДвиженияПоКонтрагентам Цикл
							
							СтрокаДвижений = ТаблицаДвиженийСПоставщиками.Добавить();
							СтрокаДвижений.Организация         = Организация;
							СтрокаДвижений.ДоговорКонтрагента  = СтрокаПлатеж.ДоговорКонтрагента;
							СтрокаДвижений.Сделка              = ОпределитьСделкуСтрокиТЧ (ЭтотОбъект,СтрокаПлатеж);
							СтрокаДвижений.Сумма               = СтрокаПлатеж.СуммаРегл;
							
						КонецЦикла;
						
						НаборДвиженийСПоставщиками.мПериод            = Дата;
						НаборДвиженийСПоставщиками.мТаблицаДвижений   = ТаблицаДвиженийСПоставщиками;
						
						Движения.ВзаиморасчетыСПоставщикамиДляНДС.ВыполнитьПриход();
						
					ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
						
						НаборДвиженийСПокупателями   = Движения.ВзаиморасчетыСПокупателямиДляНДС;
						ТаблицаДвиженийСПокупателями = НаборДвиженийСПокупателями.Выгрузить();
						
						// По строкам табличной части.
						Для Каждого СтрокаПлатеж ИЗ ДвиженияПоКонтрагентам Цикл
							
							СтрокаДвижений = ТаблицаДвиженийСПокупателями.Добавить();
							СтрокаДвижений.Организация         = Организация;
							СтрокаДвижений.ДоговорКонтрагента  = СтрокаПлатеж.ДоговорКонтрагента;
							СтрокаДвижений.Сделка              = ОпределитьСделкуСтрокиТЧ (ЭтотОбъект,СтрокаПлатеж);;
							СтрокаДвижений.Сумма               = СтрокаПлатеж.СуммаРегл;
							
						КонецЦикла;
						
						НаборДвиженийСПокупателями.мПериод            = Дата;
						НаборДвиженийСПокупателями.мТаблицаДвижений   = ТаблицаДвиженийСПокупателями;
						
						Движения.ВзаиморасчетыСПокупателямиДляНДС.ВыполнитьРасход();
						
					КонецЕсли;
					
				КонецЕсли;
				
				// По регистру "ВзаиморасчетыСКонтрагентами"
				НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;
				ТаблицаДвижений = НаборДвижений.Выгрузить();
				
				// По регистру "ДенежныеСредстваКомитента"
				
				ЕстьРасчетыСКомиссионером=Ложь;
				НаборДвиженийКомиссионер = Движения.ДенежныеСредстваКомиссионера;
				ТаблицаДвиженийКомиссионер = НаборДвиженийКомиссионер.Выгрузить();
				
				// По строкам табличной части
				Для Каждого СтрокаПлатеж ИЗ ДвиженияПоКонтрагентам Цикл
					
					ТекущаяСделка = ОпределитьСделкуСтрокиТЧ (ЭтотОбъект,СтрокаПлатеж);
					
					СтрокаДвижений = ТаблицаДвижений.Добавить();
					СтрокаДвижений.ДоговорКонтрагента  = СтрокаПлатеж.ДоговорКонтрагента;
					СтрокаДвижений.Сделка              = ТекущаяСделка;
					СтрокаДвижений.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаВзаиморасчетов*КоэффициентСторно;
					СтрокаДвижений.СуммаУпр            = СтрокаПлатеж.СуммаУпр*КоэффициентСторно;
					
					Если СтрокаПлатеж.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
						И СтрокаПлатеж.КонтролироватьДенежныеСредстваКомитента Тогда
						
						СтрокаДвиженийКомиссионер = ТаблицаДвиженийКомиссионер.Добавить();
						СтрокаДвиженийКомиссионер.ДоговорКонтрагента  = СтрокаПлатеж.ДоговорКонтрагента;
						СтрокаДвиженийКомиссионер.Сделка              = ТекущаяСделка;
						СтрокаДвиженийКомиссионер.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаВзаиморасчетов*КоэффициентСторно;
						СтрокаДвиженийКомиссионер.СуммаУпр            = СуммаУпр*КоэффициентСторно;
						
						ЕстьРасчетыСКомиссионером=Истина;
						
					КонецЕсли;
					
				КонецЦикла;
				
				НаборДвижений.мПериод            = Дата;
				НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
				
				Если КоэффициентСторно=1 Тогда
					
					Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
					
				Иначе
					
					Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();
					
				КонецЕсли;
				
				Если ЕстьРасчетыСКомиссионером Тогда
					
					НаборДвиженийКомиссионер.мПериод          = Дата;
					НаборДвиженийКомиссионер.мТаблицаДвижений = ТаблицаДвижений;
					
					Если КоэффициентСторно=1 Тогда
						
						Движения.ДенежныеСредстваКомиссионера.ВыполнитьРасход();
						
					Иначе
						
						Движения.ДенежныеСредстваКомиссионера.ВыполнитьПриход();
						
					КонецЕсли;
					
				КонецЕсли;
					
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
				
				Если ЗначениеНеЗаполнено(РасчетныйДокумент) Тогда
					РасчетныйДокументДвижения=Ссылка;
				Иначе
					РасчетныйДокументДвижения=РасчетныйДокумент;
				КонецЕсли;
				
				СтрокаПлатеж=ДвиженияПоКонтрагентам[0];
				
				// По регистру "ВзаиморасчетыСПодотчетнымиЛицами"
				НаборДвижений   = Движения.ВзаиморасчетыСПодотчетнымиЛицами;
				ТаблицаДвижений = НаборДвижений.Выгрузить();
				
				СтрокаДвижений = ТаблицаДвижений.Добавить();
				СтрокаДвижений.ФизЛицо             = Контрагент;
				СтрокаДвижений.РасчетныйДокумент   = РасчетныйДокументДвижения;
				СтрокаДвижений.Валюта              = ВалютаВзаиморасчетовПодотчетника;
				СтрокаДвижений.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаВзаиморасчетов;
				СтрокаДвижений.СуммаУпр            = СтрокаПлатеж.СуммаУпр;
				
				НаборДвижений.мПериод              = Дата;
				НаборДвижений.мТаблицаДвижений     = ТаблицаДвижений;
				
				Движения.ВзаиморасчетыСПодотчетнымиЛицами.ВыполнитьРасход();
				
			ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
				
				// По регистру "Розничная выручка"
				НаборДвижений   = Движения.РозничнаяВыручка;
				ТаблицаДвижений = НаборДвижений.Выгрузить();
				
				СтрокаДвижений = ТаблицаДвижений.Добавить();
				СтрокаДвижений.РозничнаяТочка  = Контрагент;
				СтрокаДвижений.Подразделение   = Подразделение;
				СтрокаДвижений.Сумма           = СуммаДокумента;
				
				НаборДвижений.мПериод          = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
				
				Движения.РозничнаяВыручка.ВыполнитьРасход();
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если  ОтражатьВЗатратах  Тогда	
			Если (ИтогоЗатрат<>0) и (СуммаДокумента<>ИтогоЗатрат) Тогда 
				Отказ = Истина;
				Сообщить("Не совпадают сумма сторнируемых затрат и сумма документа.", СтатусСообщения.Важное);
			КонецЕсли;
			ТаблицаЗатрат = СформироватьТаблицуЗатрат();
			//	ИтогоЗатрат = СформироватьИтогПоЗатратам();
			Если (ТаблицаЗатрат.Количество()>0) Тогда 
				Для Каждого Стр из ТаблицаЗатрат Цикл
					НаборДвижений   = Движения.Затраты.Добавить();
					Если (Стр.Подразделение = Справочники.Подразделения.ПустаяСсылка()) Тогда 
						Отказ = Истина;
						Сообщить("В табличной части ""Затраты (сторно)"" пропущено подразделение.", СтатусСообщения.Важное);
					КонецЕсли;	
					Если (Стр.СтатьяЗатрат = Справочники.СтатьиЗатрат.ПустаяСсылка()) Тогда 
						Отказ = Истина;
						Сообщить("В табличной части ""Затраты (сторно)"" пропущена статья.", СтатусСообщения.Важное);
					КонецЕсли;	
					Если ((Стр.Сумма = 0) или (Стр.Сумма = Неопределено)) Тогда 
						Отказ = Истина;
						Сообщить("В табличной части ""Затраты (сторно)"" пропущена сумма.", СтатусСообщения.Важное)
					КонецЕсли;	
					НаборДвижений.Подразделение  = Стр.Подразделение;
					НаборДвижений.СтатьяЗатрат   = Стр.СтатьяЗатрат;
					НаборДвижений.Сумма          = -Стр.Сумма*Расшифровкаплатежа[0].КурсВзаиморасчетов;
					НаборДвижений.Период          = Дата;
					Движения.Затраты .Записать();
				КонецЦикла;		
			Иначе 
				Если (Подразделение<>Справочники.Подразделения.ПустаяСсылка() и СтатьяЗатрат<>Справочники.СтатьиЗатрат.ПустаяСсылка()) Тогда 
					НаборДвижений   = Движения.Затраты.Добавить();
					НаборДвижений.Подразделение  = Подразделение;
					НаборДвижений.СтатьяЗатрат   = СтатьяЗатрат;
					НаборДвижений.Сумма          = -ИтогоЗатрат*Расшифровкаплатежа[0].КурсВзаиморасчетов;
					НаборДвижений.Период         = Дата;
					Движения.Затраты .Записать();				
				КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументаУпр(Отказ, Режим, Заголовок)

	Если Оплачено Тогда
		ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейОплатаУпр(), Отказ, Заголовок);
	КонецЕсли;
	
	Если ОтраженоВОперУчете И Режим = РежимПроведенияДокумента.Оперативный И (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) Тогда
					
		КонтрольОстатковПоТЧ(Дата, РасшифровкаПлатежа, Отказ, Заголовок, Истина);			
		
	КонецЕсли;

	Если (НЕ ОтраженоВОперУчете) И (НЕ Оплачено) И ОтражатьВУправленческомУчете Тогда

		Сообщить(Заголовок+"
		         |Не выбрано правило проведения (""Отражено в опер. учете"",""Оплачено"")");
		Отказ = Истина;

	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке 
		И НЕ СчетОрганизации.ВалютаДенежныхСредств=Касса.ВалютаДенежныхСредств Тогда
			Сообщить("Не совпадают валюты банковского счета и кассы");
			Отказ=Истина;
	КонецЕсли;

	Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда

		Сообщить(Заголовок+"
		         |не совпадают сумма документа и ее расшифровка.");
		Отказ = Истина;

	КонецЕсли;

	Если ОтраженоВОперУчете Тогда

		ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейРасчеты(), Отказ, Заголовок);

		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

			ПроверитьЗаполнениеТЧ(Отказ, Заголовок);
			
		ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником 
			И РасшифровкаПлатежа[0].СуммаВзаиморасчетов=0 Тогда
			
			ОшибкаПриПроведении("Не указана сумма взаиморасчетов с физическим лицом.",Отказ, Заголовок);
			
		КонецЕсли;

	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка 
		И НЕ Касса.ВалютаДенежныхСредств=мВалютаРегламентированногоУчета Тогда
		Сообщить("Прием розничной выручки производится только в валюте регламентированного учета.");
		Отказ=Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьСтруктуруКурсыВалютУпр()

	СтруктураГруппаВалют = Новый Структура;
	СтруктураГруппаВалют.Вставить("ВалютаУпрУчета",  Константы.ВалютаУправленческогоУчета.Получить().Код);
	СтруктураГруппаВалют.Вставить("ВалютаДокумента", ВалютаДокумента.Код);

	СтруктураКурсыВалют = ПолучитьКурсыДляГруппыВалют(СтруктураГруппаВалют,Дата);

	Возврат СтруктураКурсыВалют;

КонецФункции

Процедура ЗаполнитьРеквизитыПоУмолчаниюУпр()

	ОтраженоВОперУчете           = Истина;
	ОтражатьВУправленческомУчете = Истина;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если Основание  = Неопределено или ТипЗнч(Основание) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

	Если ЗначениеНеЗаполнено(Касса) Тогда
		Касса = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяКасса");
	КонецЕсли;

	ВалютаДокумента         = ?(НЕ Касса.ВалютаДенежныхСредств.Пустая(),Касса.ВалютаДенежныхСредств,мВалютаРегламентированногоУчета);

	СтруктураКурсаДокумента = ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсДокумента           = СтруктураКурсаДокумента.Курс;
	КратностьДокумента      = СтруктураКурсаДокумента.Кратность;

	ДокументОснование = Основание.Ссылка;
	СпособЗаполнения  = "Не заполнять";

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") 
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда

		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		ВидОперации  = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
		Контрагент   = Основание.Контрагент;

		СтрокаПлатеж.ДоговорКонтрагента   = Основание.ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов         = ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

		Если (ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя"))
			И (СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
			ИЛИ СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам) Тогда
			
			СтрокаПлатеж.Сделка=Основание;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") И СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			
			СтрокаПлатеж.Сделка=Основание;
			
		КонецЕсли;

		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") И Основание.Проведен  Тогда
			СпособЗаполнения = "По заказу";
		Иначе
			СпособЗаполнения = "По сумме документа";
		КонецЕсли;

		СтрокаПлатеж.СтавкаНДС = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяСтавкаНДС");

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		или (ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")) Тогда

		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		ВидОперации  = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
		Контрагент   = Основание.Контрагент;

		СтрокаПлатеж.ДоговорКонтрагента      = Основание.ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов         = ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			СтрокаПлатеж.Сделка = Основание;
			Если Основание.Проведен Тогда
				СпособЗаполнения = "По взаиморасчетам";
			КонецЕсли;
		Иначе
			СтрокаПлатеж.Сделка = Основание.Сделка;
			Если Основание.Проведен Тогда
				СпособЗаполнения = "По сумме документа";
			КонецЕсли;
		КонецЕсли;

		СтрокаПлатеж.СтавкаНДС = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяСтавкаНДС");

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда

		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		ВидОперации  = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком;
		Контрагент   = Основание.Контрагент;

		СтрокаПлатеж.ДоговорКонтрагента      = Основание.ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов         = ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			СтрокаПлатеж.Сделка = Основание;
			Если Основание.Проведен Тогда
				СпособЗаполнения = "По взаиморасчетам";
			КонецЕсли;
		Иначе
			СтрокаПлатеж.Сделка = Основание.Сделка;
			Если Основание.Проведен Тогда
				СпособЗаполнения = "По сумме документа";
			КонецЕсли;
		КонецЕсли;

		СтрокаПлатеж.СтавкаНДС = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяСтавкаНДС");

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда

		ЗаполнитьПоРКОУпр();
		
		//{ Лапенков 20061102 заполнить затраты из док. осн.
		
		Если (Основание.ВидОперации=Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю) Тогда
			ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
		ИначеЕсли 	(Основание.ВидОперации=Перечисления.ВидыОперацийРКО.ОплатаПоставщику) Тогда
			ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком;
		ИначеЕсли 		(Основание.ВидОперации=Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами) Тогда
			ВидОперации = Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами;
		ИначеЕсли 	(Основание.ВидОперации=Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами) Тогда
			ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами;
		КонецЕсли;	
	
	РасшифровкаПлатежа.Загрузить(Основание.РасшифровкаПлатежа.Выгрузить());		
	СуммаДокумента=Основание.СуммаДокумента;	
	ОтражатьВЗатратах=Основание.ОтражатьВЗатратах ;
	//	СтатьяЗатрат=Основание.СтатьяЗатрат ;
	//	ИтогоЗатрат=Основание.ИтогоЗатрат ;
	Если Основание.Затраты.Количество()>0 Тогда
		Затраты.Загрузить(Основание.Затраты.Выгрузить());
	ИначеЕсли не (Основание.Подразделение.Пустая()) и не (Основание.СтатьяЗатрат.Пустая()) Тогда
			стр=Затраты.Добавить();
		    стр.Подразделение=Основание.Подразделение;
			стр.СтатьяЗатрат=Основание.СтатьяЗатрат;
		    стр.Сумма=Основание.СуммаДокумента;
	КонецЕсли;	
	Списком2=Ложь;			
        //} Лапенков 20061102
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда

		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		ВидОперации  = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка;
		
		Если Основание.ВидОперации=Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
			ВидПриемаРозничнойВыручки=Перечисления.ВидПриемаРозничнойВыручки.ИзКассы; 	
			Контрагент   = Основание.КассаККМ;
		ИначеЕсли Основание.ВидОперации=Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда
			ВидПриемаРозничнойВыручки=Перечисления.ВидПриемаРозничнойВыручки.ИзНТТ; 	
			Контрагент   = Основание.Склад;
		КонецЕсли;

		СпособЗаполнения = "По розничной выручке";

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ДенежныйЧек") Тогда

		СтрокаПлатеж      = РасшифровкаПлатежа.Добавить();

		ВалютаДокумента = Основание.ВалютаДокумента;
		Касса           = Основание.Касса;
		СчетОрганизации = Основание.СчетОрганизации;
		Организация     = Основание.Организация;
		Ответственный   = Основание.Ответственный;
		СуммаДокумента  = Основание.СуммаДокумента;
		ВидОперации     = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке;
		
		ДенежныйЧек=Основание.Ссылка;

		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Основание.СтатьяДвиженияДенежныхСредств;

	ИначеЕсли ТипЗнч(Основание)=Тип("ДокументСсылка.ПланируемоеПоступлениеДенежныхСредств") Тогда
		
		ВидОперацииПоступление = Основание.ВидОперации;
		СтавкаНДС = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяСтавкаНДС");
		
		ОпределитьОперациюПоОснованиюУпр(ВидОперации,ВидОперацииПоступление);
		
		Организация = Основание.Организация;
		ВалютаДокумента = Основание.ВалютаДокумента;
		
		Если НЕ ЗначениеНеЗаполнено(Основание.БанковскийСчетКасса) Тогда
			Касса = Основание.БанковскийСчетКасса;
		КонецЕсли;
		
		Ответственный     = Основание.Ответственный;
		
		Если ВалютаДокумента.Пустая() Тогда
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		КонецЕсли;
		
		СтруктураКурсаДокумента = ПолучитьКурсВалюты(ВалютаДокумента,);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		
		Если ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
			
			ВидПриемаРозничнойВыручки=Основание.ВидПриемаРозничнойВыручки;
			Контрагент=Основание.КассаККМ;
						
		КонецЕсли;
		
		ЗаполнитьПоПланируемомуПоступлениюУпр(РасшифровкаПлатежа,
							Основание,
							СтавкаНДС, 
							ВалютаДокумента,
							КурсДокумента,
							КратностьДокумента,
							ВидОперации);
		
		СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");

	КонецЕсли;

	ПроверкаКурсовВалют(СтрокаПлатеж);

	Если СпособЗаполнения = "По заказу" Тогда
		// { Изменено Лапенковым для автозапчастей, сумму бререм из реквизита  - СуммаПредоплатыПоЗаказу
		//ЗаполнитьПоЗаказуУпр(СтрокаПлатеж);
		
		СтрокаПлатеж.СуммаВзаиморасчетов =Основание.СуммаПредоплатыПоЗаказу;
		СтрокаПлатеж.СуммаПлатежа=Основание.СуммаПредоплатыПоЗаказу;
		// }
		ПересчитатьСуммуНДС(СтрокаПлатеж);

	ИначеЕсли СпособЗаполнения = "По взаиморасчетам" Тогда
		ЗаполнитьПоВзаиморасчетамУпр(СтрокаПлатеж);
		ПересчитатьСуммуНДС(СтрокаПлатеж);

	ИначеЕсли СпособЗаполнения = "По взаиморасчетам с подотчетным лицом" Тогда
		ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(СтрокаПлатеж);

	ИначеЕсли СпособЗаполнения = "По розничной выручке" Тогда
		ЗаполнитьПоРозничнойВыручкеУпр(СтрокаПлатеж);

	ИначеЕсли СпособЗаполнения = "По сумме документа" Тогда
		ЗаполнитьПоСуммеДокументаУпр(СтрокаПлатеж);
		ПересчитатьСуммуНДС(СтрокаПлатеж);

	КонецЕсли;
	
	ЕстьРасчетыСКонтрагентами=ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=ЕстьРасчетыПоКредитам(ВидОперации);
	
	ОтраженоВОперУчете=Истина;
	Оплачено=Истина;
	ОтражатьВУправленческомУчете=Истина;
	
	Если ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником И
		(НЕ ВалютаВзаиморасчетовПодотчетника=ВалютаДокумента) Тогда
		
		ОтражатьВБухгалтерскомУчете=Ложь;
		ОтражатьВНалоговомУчете=Ложь;
		
	Иначе
		
		ОтражатьВБухгалтерскомУчете=Истина;
		
	КонецЕсли;

	Если ПринятоОт="" И НЕ ЗначениеНеЗаполнено(Контрагент) Тогда
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			ПринятоОт =?(Контрагент.НаименованиеПолное="",Контрагент.Наименование, Контрагент.НаименованиеПолное);
					
		ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
			
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
			|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
			|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество
			|ИЗ
			|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо=&ФизЛицо) КАК ФИОФизЛицСрезПоследних";
			Запрос.УстановитьПараметр("Дата",Дата);
			Запрос.УстановитьПараметр("ФизЛицо",Контрагент);
			
			Результат=Запрос.Выполнить().Выбрать();
			Если Результат.Следующий() Тогда
				
				ПринятоОт = ?(НЕ ПустаяСтрока(Результат.Фамилия), 
				Результат.Фамилия + ?(НЕ ПустаяСтрока(Результат.Имя)," " + Результат.Имя + " " + ?(НЕ ПустаяСтрока(Результат.Отчество),Результат.Отчество, ""), ""),"");
				
			КонецЕсли;
			
			Если Не ЗначениеНеЗаполнено(РасчетныйДокумент) Тогда
				
				ЭтотОбъект.Основание=Лев(Строка(РасчетныйДокумент),Найти(Строка(РасчетныйДокумент),Строка(РасчетныйДокумент.Дата))-1)+Формат(РасчетныйДокумент.Дата,"ДФ=dd.MM.yyyy");
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;	
	
	Ответственный = глТекущийПользователь;

	ЗаполнитьРеквизитыПоУмолчаниюУпр();

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);

	СтруктураКурсаДокумента   = ПолучитьКурсВалюты(ВалютаДокумента,Дата);
	КурсДокумента             = СтруктураКурсаДокумента.Курс;
	КратностьДокумента        = СтруктураКурсаДокумента.Кратность;

	ЕстьРасчетыСКонтрагентами = ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = ЕстьРасчетыПоКредитам(ВидОперации);

	СтруктураВидыУчета=Новый Структура;
	СтруктураВидыУчета.Вставить("ОтражатьВБухгалтерскомУчете", ОтражатьВБухгалтерскомУчете);
	СтруктураВидыУчета.Вставить("ОтражатьВНалоговомУчете", ОтражатьВНалоговомУчете);
	СтруктураВидыУчета.Вставить("ОтражатьВУправленческомУчете", ОтражатьВУправленческомУчете);
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ПроверитьПринадлежностьКВидамУчета(СтруктураВидыУчета, Отказ, Заголовок);

	ТаблицаПлатежейУпр=ПолучитьТаблицуПлатежейУпр(Дата,ВалютаДокумента,Ссылка, "ПриходныйКассовыйОрдер");
	
	//Проверим на возможность проведения в БУ и НУ
	Если ОтражатьВБухгалтерскомУчете или ОтражатьВНалоговомУчете тогда
		
		НомерСтроки=1;
		
		Для каждого СтрокаОплаты из ТаблицаПлатежейУпр Цикл
			
			Если ТаблицаПлатежейУпр.Количество()=1 Тогда
				ДополнениеЗаголовка="";
			Иначе
				ДополнениеЗаголовка="Строка "+НомерСтроки+" - ";
				НомерСтроки=НомерСтроки+1;
			КонецЕсли;
			
			ПроверкаВозможностиПроведенияВ_БУ_НУ(СтрокаОплаты.ДоговорКонтрагента, ВалютаДокумента,ОтражатьВБухгалтерскомУчете,
					ОтражатьВНалоговомУчете, мВалютаРегламентированногоУчета, Истина ,Отказ, Заголовок, ДополнениеЗаголовка,
					СтрокаОплаты.ВалютаВзаиморасчетов, СтрокаОплаты.РасчетыВУсловныхЕдиницах);
					
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПроверитьЗаполнениеДокументаУпр(Отказ, Режим, Заголовок);

	// Проверить заполнение подразделения, если нужно. 
	Если (Константы.ОбязательнаяУстановкаПодразделений.Получить() = Истина) Тогда 
		Если (Подразделение = Справочники.Подразделения.ПустаяСсылка()) Тогда 
			Отказ = Истина;
			Сообщить("Перед проведением, установите подразделение.", СтатусСообщения.Важное);
		КонецЕсли;
	КонецЕсли;

	Если Не Отказ Тогда
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ЭтоНовый() и ВалютаДокумента <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		ТекущийКурс = РегистрыСведений.КурсыВалютДляПоступления.СрезПоследних(Дата,Новый структура("Валюта",ВалютаДокумента));
		Если  ТекущийКурс.Количество()>0 Тогда
			КурсВзаиморасчетов  = ТекущийКурс[0].Курс-3;
			кратностьВзаиморасчетов = ТекущийКурс[0].Кратность;	
		конецЕсли;
	конецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником и не ЗначениеЗаполнено(РасчетныйДокумент) Тогда
		Предупреждение("Не выбран расчетный документ!");	
		Отказ= истина;
		возврат;
	конецЕсли;	
	яштДокументОбъектПередЗаписью(ЭтотОбъект, Отказ); 
	ПроверкаВозможностиИзмененияДокумента(ЭтотОбъект, Отказ);
	//яштПени.ПроверитьНачисленияПени(ЭтотОбъект.Ссылка, Отказ);

	//БАЛАНС (04.12.2007)                       
	//
	ЗарегистрироватьОбъект(ЭтотОбъект,Отказ,мПроведениеИзФормы);
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 
	
КонецПроцедуры

Функция СформироватьТаблицуЗатрат()
	
	ТаблицаЗатрат = Затраты.Выгрузить();
	ТаблицаЗатрат.Свернуть("Подразделение,СтатьяЗатрат","Сумма");
	
	Возврат ТаблицаЗатрат;
	
КонецФункции

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	//яштПени.ПроверитьНачисленияПени(ЭтотОбъект.Ссылка, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Ответственный = глТекущийПользователь;
	
КонецПроцедуры

//Функция СформироватьИтогПоЗатратам() Экспорт
//	
//	Итого = Затраты.Итог("Сумма");
//	Если (Итого=0 и Подразделение<>Справочники.Подразделения.ПустаяСсылка() и СтатьяЗатрат<>Справочники.СтатьиЗатрат.ПустаяСсылка()) Тогда 
//		Итого = СуммаДокумента;
//	КонецЕсли;
//	ИтогоЗатрат = Итого;	
//	
//	Возврат Итого;
//	
//КонецФункции


мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

//БАЛАНС (04.12.2007)                       
//
мПроведениеИзФормы = Ложь; 