////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов;

//Хранит текущую строку списка оплачиваемых документов
Перем СтрокаПлатеж;

Перем ИнвертироватьСуммы;

Перем мПечатнаяФормаПоУмолчанию;

Перем мТаблицаПлатежейПоДоговорам;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	ЭлементыФормы.НадписьРедактировать.Видимость = Ложь;
	ЭлементыФормы.Список.Видимость = Ложь;
	ЭлементыФормы.Список1.Видимость = Ложь;
	УстановитьТекущуюСтраницу("ПКО",ЭлементыФормы.ОсновнаяПанель);
	
	УстановитьТекущуюСтраницу("ПлатежПоНесколькимСделкам", ЭлементыФормы.ПанельПлатежи);
	
	ЭлементыФормы.РамкаРасшифровкаПлатежа.Заголовок = "Расшифровка платежа";
	ЭлементыФормы.Сделка.Доступность = Истина;
	
	ЭлементыФормы.НадписьРедактировать.Видимость = Истина;
	ЭлементыФормы.Список.Видимость = Истина;
    ЭлементыФормы.Сделка.Доступность=Истина;
	УстановитьДанныеДляРеквизитов();		
	ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации.Доступность=Ложь;
	
КонецПроцедуры // УстановитьВидимость()

// Процедура переопределяет источники данных для реквизитов "СуммаДокумента" и "СуммаВзаиморасчетов".
// В режиме расчетов с контрагентами без разбиения они меняются местами.
//
Процедура УстановитьДанныеДляРеквизитов()
		ЭлементыФормы.СуммаДокумента.Данные="СуммаДокумента";
		ЭлементыФормы.НадписьВалютаДокумент.Данные="НадписьВалютаДокумент";

		ЭлементыФормы.НадписьСуммаДокумент.Данные="";
		ЭлементыФормы.НадписьСуммаДокумент.Заголовок="Сумма: ";
		
		ИнвертироватьСуммы=Ложь;
	
КонецПроцедуры // УстановитьДанныеДляРеквизитов()


// Возвращает фокус на строку ТЧ "Расшифровка платежа" при его потере в режиме редактирования
// одиночного платежа.
Процедура УстановитьФокус()
	
	Если ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=Неопределено Тогда
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=СтрокаПлатеж;
	КонецЕсли;
	
КонецПроцедуры // УстановитьФокус()


// Процедура рассчитывает сумму взаиморасчетов
//
Процедура РассчитатьСуммуВзаиморасчетов()

	ПроверкаКурсовВалют(СтрокаПлатеж);

	ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	

	Если (СтрокаПлатеж.КурсВзаиморасчетов <> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов=ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, ВалютаДокумента,
			                                                  ВалютаВзаиморасчетов,
			                                                  КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
			                                                  КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);	
	Иначе
		СтрокаПлатеж.СуммаВзаиморасчетов = 0;
	КонецЕсли;
	
	Если СтрокаПлатеж.КурсВзаиморасчетовПлан>0 Тогда
	КонецЕсли;

КонецПроцедуры // РассчитатьСуммуВзаиморасчетов()

// Процедура рассчитывает сумму платежа по сумме взаиморасчетов.
//
Процедура РассчитатьСуммуПлатежа()
	
	ПроверкаКурсовВалют(СтрокаПлатеж);
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
		ВалютаВзаиморасчетов=ВалютаВзаиморасчетовПодотчетника;
	Иначе
		СтрокаПлатеж.СуммаПлатежа=СтрокаПлатеж.СуммаВзаиморасчетов;
		Возврат;
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаПлатежа=СтрокаПлатеж.СуммаВзаиморасчетов;
	
	ИначеЕсли (КурсДокумента <> 0) И (СтрокаПлатеж.КратностьВзаиморасчетов <> 0) И (СтрокаПлатеж.КурсВзаиморасчетов <> 0) Тогда
		СтрокаПлатеж.СуммаПлатежа=ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
															ВалютаДокумента,
			                                                СтрокаПлатеж.КурсВзаиморасчетов,КурсДокумента,
															СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);	
	Иначе
		СтрокаПлатеж.СуммаПлатежа = 0;
	КонецЕсли;
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		
		
	КонецЕсли;
	
	//Если РасшифровкаПлатежа.Количество()=1 Тогда
	//	СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
	//КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуПлатежа()


//Процедура рассчитывает курс взаиморасчетов документа
//
Процедура РассчитатьКурсВзаиморасчетов()
	
	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.СуммаВзаиморасчетов/ КратностьДокумента;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьКурсВзаиморасчетов

Процедура ПриИзмененииСчетаОрганизации()
	
	Если СчетОрганизации.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Организация.Пустая() Тогда
		Организация=СчетОрганизации.Владелец;
	КонецЕсли;
	
	ПриИзмененииЗначенияКассыБанковскогоСчета(ВалютаДокумента, КурсДокумента, КратностьДокумента, Дата, СуммаДокумента, СчетОрганизации.ВалютаДенежныхСредств);
	СуммаДокументаПриИзменении();
		
	Если НЕ Касса.Пустая() И НЕ СчетОрганизации.ВалютаДенежныхСредств=Касса.ВалютаДенежныхСредств Тогда
		Сообщить("Валюта кассы не соответствует валюте счета организации.");
		Касса=Новый(Тип("Справочник.Кассы"));
	КонецЕсли;	
			
КонецПроцедуры // ПриИзмененииСчетаОрганизации()

// Обрабатывает интерактивное и программное изменение валюты
// взаиморасчетов с подотчетником
//
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает тип поля "Контрагент" в зависимости от вида операции.
//
// Параметры:
//  Нет.
//
Процедура УстановитьТипКонтрагент()

	ИмяСправочника = "Контрагенты";
	ИмяРасчетногоДокумента="РасходныйКассовыйОрдер";
	
	ЕстьКонтрагент=Истина;
	ЕстьРасчетныйДокумент=Ложь;
	
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда

		ИмяСправочника = ?( ВидПриемаРозничнойВыручки = Перечисления.ВидПриемаРозничнойВыручки.ИзНТТ, "Склады", "КассыККМ");

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником  Тогда

		ИмяСправочника = "ФизическиеЛица";
		ЕстьРасчетныйДокумент=Истина;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда

		ЕстьКонтрагент=Ложь;

	КонецЕсли;

	Если ЕстьКонтрагент Тогда
		
		Если ТипЗнч(Контрагент) <> Тип("СправочникСсылка." + ИмяСправочника) Тогда
			Контрагент = Справочники[ИмяСправочника].ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		
		Если НЕ Контрагент=Неопределено Тогда
			Контрагент=Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьРасчетныйДокумент Тогда
		
		Если ТипЗнч(РасчетныйДокумент) <> Тип("ДокументСсылка." + ИмяРасчетногоДокумента) Тогда
			РасчетныйДокумент = Документы[ИмяРасчетногоДокумента].ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		
		Если Не ЗначениеНеЗаполнено(РасчетныйДокумент) Тогда
			
			РасчетныйДокумент=Документы[ИмяРасчетногоДокумента].ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // УстановитьТипКонтрагент()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

    ТаблицаПлатежей=ЗаполнитьТаблицуПлатежейПоДоговорамОтветственногоЛица();
	// заполняем таблицу в форме документа только по договорам в котором Пользователь=ЛицоОтветственноеПоДоговору
	ТаблицаПлатежейПоДоговорамОтветственногоЛица=ТаблицаПлатежей.Скопировать();
	
	ТаблицаПлатежей.Свернуть("ДоговорКонтрагента","СуммаПлатежа");
	// мТаблицаПлатежейПоДоговорам - таблица разноски платежей по договорам, держим ее в памяти до момента записи.
	мТаблицаПлатежейПоДоговорам=ТаблицаПлатежей.Скопировать();
	
	


	//СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;

			
	УстановитьКурсДокумента();
	ЕстьРасчетыСКонтрагентами=ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=ЕстьРасчетыПоКредитам(ВидОперации);
	
	
	
	
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                    ВернутьТаблицуДоступныхОперацийДляМенеджера(Ссылка),
	                                    Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	
	
	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Установить тип поля Контрагент.
	УстановитьТипКонтрагент();

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	
	
	Список=Истина;
	
	
	УстановитьВидимость();

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()


	//ЭлементыФормы.ИнфНадписьКурса.Заголовок = ПолучитьИнформациюКурсаВалютыСтрокой(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
	//																				 СтрокаПлатеж.КурсВзаиморасчетов,
	//																				 СтрокаПлатеж.КратностьВзаиморасчетов,
	//																				 мВалютаРегламентированногоУчета,
	//																				 Истина);
	НадписьВалютаДокумент=СокрЛП(ВалютаДокумента);
	
	//Если Не ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
	//			
	//	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
	//		
	//		ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	//		ТекстКурсаЗаявки= ПолучитьИнформациюКурсаВалютыСтрокой(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
	//						 СтрокаПлатеж.КурсВзаиморасчетовПлан,
	//						 СтрокаПлатеж.КратностьВзаиморасчетов,
	//						 мВалютаРегламентированногоУчета,
	//						 Истина);
	//						 
	//		ЭлементыФормы.ИнфНадписьКурсаЗаявки.Заголовок=ТекстКурсаЗаявки;
	//		
	//	КонецЕсли;
	//																					 
	//КонецЕсли;

	// Установим заголовки по значению поля "Контрагент" 
	// (это или контрагент или подотчетник или КассаККМ).
	//Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда

	//	// Надпись реквизита "Сделка".
	//	НадписьСделка = "Сделка";
	//	Если Не ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента)Тогда
	//		Если СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
	//			НадписьСделка = "Расчетный документ:";
	//		Иначе
	//			Если ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
	//				НадписьСделка = "Заказ покупателя:";
	//			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком Тогда
	//				НадписьСделка = "Заказ поставщику:";
	//			КонецЕсли; 
	//		КонецЕсли;
	//	КонецЕсли;

	//	ЭлементыФормы.НадписьСделка.Заголовок = НадписьСделка;

	//	// Надпись НадписьСуммаВзаиморасчетов
	//	ВалютаВзаиморасчетовПоДоговору = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	//	Если ЗначениеНеЗаполнено(ВалютаВзаиморасчетовПоДоговору) Тогда
	//		НадписьСуммаВзаиморасчетов = "Сумма <нет валюты>:";
	//	Иначе	
	//		НадписьСуммаВзаиморасчетов = "Сумма " + СокрЛП(ВалютаВзаиморасчетовПоДоговору) + ":";
	//	КонецЕсли;			

	//ИначеЕсли ТипЗнч(Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда

	//	// Надпись НадписьСуммаВзаиморасчетов
	//	Если ЗначениеНеЗаполнено(ВалютаВзаиморасчетовПодотчетника) Тогда
	//		НадписьСуммаВзаиморасчетов = "Сумма <нет валюты>:";
	//	Иначе
	//		НадписьСуммаВзаиморасчетов = "Сумма " + СокрЛП(ВалютаВзаиморасчетовПодотчетника) + ":";
	//	КонецЕсли;

	//КонецЕсли;
	//
	//ЭлементыФормы.НадписьИтогоСписок.Заголовок="Итого платежей по списку: "+
	//								Формат(РасшифровкаПлатежа.Итог("СуммаПлатежа"),"ЧЦ=15; ЧДЦ=2; ЧН=Ноль")+
	//								" "+СокрЛП(ВалютаДокумента.Наименование);
	//								
	//НадписьНомерЧека = ?(НомерЧекаККМ=0,"",
	//				   ?(НомерЧекаККМ>0,"Номер чека на ККМ: "+СокрЛП(НомерЧекаККМ),
	//									"Чек на ККМ пробит"));
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
		
		Если Вопрос("Не совпадают сумма документа и ее расшифровка. Пересчитать сумму документа?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			
			СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НапечататьДокументПоУмолчанию(ЭтотОбъект, глТекущийПользователь, мПечатнаяФормаПоУмолчанию);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()


// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)
    // пока ничего не будет
	//Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
	//	Если ВидОперации = Перечисления.ВидыОперацийПКО[Кнопка.Имя] Тогда
	//		Возврат;
	//	КонецЕсли; 
	//	ВидОперации = Перечисления.ВидыОперацийПКО[Кнопка.Имя];
	//Иначе
	//	Возврат;
	//КонецЕсли;
	//
	//РасшифровкаПлатежа.Очистить();
	//СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
	//
	//СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
	//
	//УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);

	//// Отобразить в заголовке формы вид операции.
	//УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	//
	//УстановитьФокус();
	//
	//ЕстьРасчетыСКонтрагентами=ЕстьРасчетыСКонтрагентами(ВидОперации);
	//ЕстьРасчетыПоКредитам=ЕстьРасчетыПоКредитам(ВидОперации);
	//
	//Если ОтражатьВБухгалтерскомУчете Тогда

	//	Если Не ЗначениеНеЗаполнено(Касса) Тогда
	//		ВалютаВзаиморасчетовПодотчетника=Касса.ВалютаДенежныхСредств;
	//	Иначе
	//		ВалютаВзаиморасчетовПодотчетника = мВалютаРегламентированногоУчета;
	//	КонецЕсли;
	//	
	//	
	//КонецЕсли;

	//УстановитьВидимость();

	////Надо определить тип поля "Контрагент"
	//УстановитьТипКонтрагент();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
//
Процедура ДействияФормыДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		
		Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
			
			Если Вопрос("Не совпадают сумма документа и ее расшифровка. Пересчитать сумму документа?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
				
				СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
				
			Иначе
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = Кнопка.Текст;
		СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		СписокМакетов = ПолучитьСписокПечатныхФорм();
		СтрокаМакетаВСписке = СписокМакетов.НайтиПоЗначению(Кнопка.Имя);
		Если СтрокаМакетаВСписке <> Неопределено Тогда
			Печать(СтрокаМакетаВСписке.Значение);
			СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
			СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;			
			
		Иначе
			СсылкаВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Кнопка.Имя, "_", "-")));
			Печать(СсылкаВнешнейФормы);
			СтруктураМакета.Макет = СсылкаВнешнейФормы;
			СтруктураМакета.ПредставлениеМакета = Кнопка.Текст;
		КонецЕсли;		
		
		мПечатнаяФормаПоУмолчанию = СтруктураМакета.Макет;
		СохранитьТекущуюКнопкуПечати(ЭтотОбъект.Метаданные().Имя, СтруктураМакета);
		
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	УстановитьКурсДокумента();
	РассчитатьСуммуВзаиморасчетов();
	
КонецПроцедуры // ДатаПриИзменении()

// Рассчитывает новый курс документа при смене даты
//
Процедура УстановитьКурсДокумента()
	
	СтруктураКурсаВалютаДокумента = ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
	КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;
	
КонецПроцедуры // УстановитьКурсДокумента()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьНомерДокумента(ЭтотОбъект);

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// проставим основной договор контрагента
	
	УстановитьФокус();

КонецПроцедуры // КонтрагентПриИзменении()


// Обработчик события "НачалоВыбора" реквизита "ДоговорКонтрагента"
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
				ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()


// Процедура - обработчик события "НачалоВыбора" поля ввода "Сделка".
//
Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	ПараметрыВыбора=ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, 
	                     ПараметрыВыбора.ВидДвиженияРасчеты, ПараметрыВыбора.ТипЗаказа);
					
КонецПроцедуры // СделкаНачалоВыбора()


// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаВзаиморасчетовПодотчетник".
// Процедура выполняет пересчет реквизитов при изменении суммы взаиморасчетов 
// с подотчетником.
//
Процедура СуммаДокументаРасчетыПриИзменении(Элемент)
	
	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
	
	Если СтрокаПлатеж.СуммаВзаиморасчетов=0 Тогда
		РассчитатьСуммуВзаиморасчетов();
	Иначе			
		РассчитатьКурсВзаиморасчетов();
	КонецЕсли;
		
КонецПроцедуры // СуммаВзаиморасчетовПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "РасходныйКассовыйОрдер".
// Процедура фильтрует список документов по выбранным значениям.
//
Процедура РасчетныйДокументНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ФормаВыбора = Документы["РасходныйКассовыйОрдер"].ПолучитьФормуВыбора(,Элемент,);
	
	// Отфильтруем список документов по Виду Операции.
	ФормаВыбора.Отбор.ВидОперации.Значение      = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику;
	ФормаВыбора.Отбор.ВидОперации.Использование = Истина;
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ВидОперации.Доступность=Ложь;
	
	// Отфильтруем список документов по Валюте взаиморасчетов, если она выбрано.
	Если Не ЗначениеНеЗаполнено(ВалютаВзаиморасчетовПодотчетника) Тогда
		ФормаВыбора.Отбор.ВалютаВзаиморасчетовПодотчетника.Значение      = ВалютаВзаиморасчетовПодотчетника;
		ФормаВыбора.Отбор.ВалютаВзаиморасчетовПодотчетника.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ВалютаВзаиморасчетовПодотчетника.Доступность=Ложь;
	КонецЕсли; 
	
	// Отфильтруем список документов по ФизЛицу, если оно выбрано.
	Если Не ЗначениеНеЗаполнено(Контрагент) Тогда
		ФормаВыбора.Отбор.Контрагент.Значение      = Контрагент;
		ФормаВыбора.Отбор.Контрагент.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Контрагент.Доступность=Ложь;
	КонецЕсли; 
	
	Если НЕ ЗначениеНеЗаполнено(Организация) Тогда
		ФормаВыбора.ДокументСписок.Отбор.Организация.Значение = Организация;
		ФормаВыбора.ДокументСписок.Отбор.Организация.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность=Ложь;
	КонецЕсли;
	
	Если Не ЗначениеНеЗаполнено(Элемент.Значение) Тогда
		
		ФормаВыбора.ПараметрТекущаяСтрока=Элемент.Значение;
		
	КонецЕсли;
	
	ФормаВыбора.РежимВыбора = Истина;
	ФормаВыбора.Открыть();
	
КонецПроцедуры // РасходныйКассовыйОрдерНачалоВыбора

// Процедура - обработчик события "ПриИзменении" поля ввода "РасходныйКассовыйОрдер".
// Процедура заполнение пустых полей на основании выбранного РКО.
//
Процедура РасчетныйДокументПриИзменении(Элемент)
	
	Если ЗначениеНеЗаполнено(РасчетныйДокумент) Тогда
		Возврат;
	КонецЕсли;

	Если Элемент.Значение.Метаданные().Имя="РасходныйКассовыйОрдер" Тогда
		
		Контрагент                       = РасчетныйДокумент.Контрагент;
		Организация                       = РасчетныйДокумент.Организация;
		ВалютаВзаиморасчетовПодотчетника = РасчетныйДокумент.ВалютаВзаиморасчетовПодотчетника;
		СтруктураКурса                   = ПолучитьКурсВалюты(ВалютаВзаиморасчетовПодотчетника, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов               = СтруктураКурса.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов          = СтруктураКурса.Кратность;
		
		ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(СтрокаПлатеж);
		
		Если НЕ ВалютаДокумента=ВалютаВзаиморасчетовПодотчетника Тогда
			ОтражатьВБухгалтерскомУчете=Ложь;
			ОтражатьВНалоговомУчете=Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимость();
		
КонецПроцедуры // РасходныйКассовыйОрдерПриИзменении()




////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ФизЛицо".
//
Процедура ФизЛицоПриИзменении(Элемент)
	
	Если ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
		РасчетныйДокумент=Документы.РасходныйКассовыйОрдер.ПустаяСсылка();
	Иначе
		РасчетныйДокумент=Документы.ДоговорЗаймаСРаботником.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ ЗначениеНеЗаполнено(Контрагент) Тогда
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		             |	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
		             |	ФИОФизЛицСрезПоследних.Имя КАК Имя,
		             |	ФИОФизЛицСрезПоследних.Отчество КАК Отчество
		             |ИЗ
		             |	РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо=&ФизЛицо) КАК ФИОФизЛицСрезПоследних";
		Запрос.УстановитьПараметр("Дата",Дата);
		Запрос.УстановитьПараметр("ФизЛицо",Контрагент);
		
		Результат=Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			ПринятоОт = ?(НЕ ПустаяСтрока(Результат.Фамилия), 
				Результат.Фамилия + ?(НЕ ПустаяСтрока(Результат.Имя)," " + Результат.Имя + " " + ?(НЕ ПустаяСтрока(Результат.Отчество),Результат.Отчество, ""), ""),"");
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура СуммаДокументаПодотчетникПриИзменении(Элемент)
	
	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
	
	Если СтрокаПлатеж.СуммаВзаиморасчетов=0 Тогда
		РассчитатьСуммуВзаиморасчетов();
	Иначе			
		РассчитатьКурсВзаиморасчетов();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
		
//0. Проверка, что договора указаны и лицо ответственное по договору - это текущий пользователь
	ТаблицаДляПроверки=ТаблицаПлатежейПоДоговорамОтветственногоЛица.Скопировать();
	
	Для каждого строкаТаблицы Из ТаблицаДляПроверки Цикл
		Если ЗначениеНеЗаполнено(строкаТаблицы.ДоговорКонтрагента) Тогда
			Сообщить("В строке №" +Строка(строкаТаблицы.НомерСтроки)+" не указан договор контрагента. Запись не может быть выполнена.",СтатусСообщения.Важное);
			Отказ=Истина;
			Возврат;
		КонецЕсли;
		
		Если строкаТаблицы.ДоговорКонтрагента.ОтветственноеЛицо<> глТекущийПользователь Тогда
			ЗакрепленныеОператорПомощник = ПолучитьЗакрпленныхЗаРегиономОператораПомощника(строкаТаблицы.ДоговорКонтрагента.Владелец.Регион, строкаТаблицы.ДоговорКонтрагента.Владелец);
			Если ЗакрепленныеОператорПомощник.Помощник <> глТекущийПользователь тогда  		
				Сообщить("В строке №" +Строка(строкаТаблицы.НомерСтроки)+" выбран договор, в котором лицо ответственное за договор "+
				Строка(строкаТаблицы.ДоговорКонтрагента.ОтветственноеЛицо)+". Запись не может быть выполнена.",СтатусСообщения.Важное);
				Отказ=Истина;
				Возврат;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	// 1. Проверка, что  договоры и суммы оплат по этим договорам совпадают с суммами,
	// которые были указаны основным менеджером контрагента
	
	ТаблицаДляПроверки.Свернуть("ДоговорКонтрагента","СуммаПлатежа");
	
	Отказ= не ТаблицыЗначенийИдентичны(ТаблицаДляПроверки,мТаблицаПлатежейПоДоговорам);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	// заполняем РасшифровкаПлатежа данными из ТаблицаПлатежейПоДоговорамОтветственногоЛица, предварительно удаляем оттуда данные по
	// договорам, где Пользователь=Лицо ответственное по договору
		сч=0;
					Пока сч < РасшифровкаПлатежа.Количество() Цикл
						Если РасшифровкаПлатежа[сч].ДоговорКонтрагента.ОтветственноеЛицо=глТекущийПользователь Тогда
							РасшифровкаПлатежа.Удалить(сч);
						Иначе 
							сч=сч+1;	
						КонецЕсли;	
					КонецЦикла;
					
	Для каждого строкаТЗ Из ТаблицаПлатежейПоДоговорамОтветственногоЛица Цикл
	СтрокаРасшифровкаПлатежа=РасшифровкаПлатежа.Добавить();	
	СтрокаРасшифровкаПлатежа.ДоговорКонтрагента=строкаТЗ.ДоговорКонтрагента;
	СтрокаРасшифровкаПлатежа.Сделка=строкаТЗ.Сделка;
	СтрокаРасшифровкаПлатежа.КурсВзаиморасчетов=1;
	СуммаПлатежа=строкаТЗ.СуммаПлатежа;
	СтрокаРасшифровкаПлатежа.СуммаПлатежа=СуммаПлатежа;
	СтрокаРасшифровкаПлатежа.СуммаВзаиморасчетов=СуммаПлатежа;
    СтрокаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПокупателя;					
	КонецЦикла;					
	
	
	Если  РасшифровкаПлатежа.Итог("СуммаПлатежа")<> СуммаДокумента Тогда
		Сообщить("Расшифровка суммы платежа не равна сумме  документа, документ не будет проведен.",СтатусСообщения.Важное);
		Отказ = Истина;
		Возврат;
	КонецЕсли;


	
	яштСменаПользователя(ЭтотОбъект, ЭтаФорма, глТекущийПользователь);
	ЭтотОбъект.ПроверенМенеджером=Истина; 
	КонецПроцедуры

Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)
	
	Если Не Элемент.Значение Тогда
		ОтраженоВОперУчете=Ложь;
		Оплачено=Ложь;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура СчетОрганизацииПриИзменении(Элемент)
	
	ПриИзмененииСчетаОрганизации();
	
КонецПроцедуры

Процедура КурсВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура СтавкаНДСПриИзменении(Элемент)
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

Процедура СуммаДокументаПриИзменении()
	
	Если ИнвертироватьСуммы Тогда
		
		РассчитатьСуммуПлатежа();
		
				
	Иначе
		
		Если РасшифровкаПлатежа.Количество()=1 Тогда
			
			СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
			
			Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
				
				ПересчитатьСуммуНДС(СтрокаПлатеж);
				
				Если СтрокаПлатеж.СуммаВзаиморасчетов=0 Тогда
					РассчитатьСуммуВзаиморасчетов();
				Иначе			
					РассчитатьКурсВзаиморасчетов();
				КонецЕсли;
				
			ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
				
				Если СтрокаПлатеж.СуммаВзаиморасчетов=0 Тогда
					РассчитатьСуммуВзаиморасчетов();
				Иначе			
					РассчитатьКурсВзаиморасчетов();
				КонецЕсли;
				
			Иначе
				
								
				СтрокаПлатеж.СуммаВзаиморасчетов=СуммаДокумента;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокПриИзменении(Элемент)
	
	Если Не Список И РасшифровкаПлатежа.Количество()>1 Тогда
		
		ТекстВопроса = "Все строки расшифровки платежа, кроме первой, будут удалены.
		|Продолжить?";
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Список=Истина;
			Возврат;
		КонецЕсли;
		
		Пока РасшифровкаПлатежа.Количество()>1 Цикл
			СтрокаУдаления=РасшифровкаПлатежа[1];
			РасшифровкаПлатежа.Удалить(СтрокаУдаления);
		КонецЦикла;
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
		СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		РассчитатьСуммуВзаиморасчетов();
		
	Иначе
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
		СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
	КонецЕсли;		
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговора();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
				ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);

КонецПроцедуры





Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПараметрыВыбора=ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, 
	                     ПараметрыВыбора.ВидДвиженияРасчеты, ПараметрыВыбора.ТипЗаказа);
					
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
		
	РассчитатьСуммуПлатежа();
	
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПриАктивизацииСтроки(Элемент)
	
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		Отказ=Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗначениеПриВыборе(ИсходноеЗначение,ЗначениеВыбора)
	
	Если ЗначениеНеЗаполнено(ИсходноеЗначение) Тогда
		ИсходноеЗначение=ЗначениеВыбора;
	КонецЕсли;
		
КонецПроцедуры // УстановитьЗначениеПриВыборе() 

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если НЕ ТипЗнч(ЗначениеВыбора)=Тип("Структура") Тогда
		
		Если ЗначениеВыбора="АвтоПодбор" Тогда
			
			Если РасшифровкаПлатежа.Количество()>1 Тогда
				Список=истина;
			ИначеЕсли РасшифровкаПлатежа.Количество()=0 Тогда
				Список=Ложь;
				НоваяСтрока=РасшифровкаПлатежа.Добавить();			
			КонецЕсли;
			
			СтрокаПлатеж=РасшифровкаПлатежа[0];
						
			УстановитьФокус();
			
			УстановитьВидимость();

			СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
			
			Возврат;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
			
	ИначеЕсли Источник.КлючУникальности="ФормаПодбораПланируемыхПлатежей" Тогда
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда	
				
				НДСПоУмолчанию=ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяСтавкаНДС");
				
				СтрокаПлатеж.ДоговорКонтрагента=ЗначениеВыбора.ДоговорКонтрагента;
				ПриИзмененииДоговора();
				
			КонецЕсли;
			
			СтрокаПлатеж.КурсВзаиморасчетовПлан=ЗначениеВыбора.КурсВзаиморасчетов;
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.Сделка,ЗначениеВыбора.Сделка);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.КурсВзаиморасчетов,ЗначениеВыбора.КурсВзаиморасчетов);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.КратностьВзаиморасчетов,ЗначениеВыбора.КратностьВзаиморасчетов);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СуммаВзаиморасчетов,ЗначениеВыбора.СуммаВзаиморасчетов);
			
			Если СтрокаПлатеж.СуммаПлатежа=ЗначениеВыбора.СуммаПлатежа 
				ИЛИ СтрокаПлатеж.СуммаПлатежа=0 Тогда
				
				СтрокаПлатеж.СуммаПлатежа=ЗначениеВыбора.СуммаПлатежа;
				СтрокаПлатеж.СуммаПлатежаПлан=ЗначениеВыбора.СуммаПлатежаПлан;
				
					
			КонецЕсли;
										
			ЗаполнитьРеквизитыРеглУчета(СтрокаПлатеж,Организация, Контрагент, НДСПоУмолчанию);
		
			СтрокаПлатеж.ДокументПланированияПлатежа=ЗначениеВыбора.ДокументПланирования;
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СтатьяДвиженияДенежныхСредств,ЗначениеВыбора.СтатьяДвиженияДенежныхСредств);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.Проект,ЗначениеВыбора.Проект);
			
		Иначе
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СуммаПлатежа,ЗначениеВыбора.СуммаПлатежа);
			
			СтрокаПлатеж.ДокументПланированияПлатежа=ЗначениеВыбора.ДокументПланирования;	
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СтатьяДвиженияДенежныхСредств,ЗначениеВыбора.СтатьяДвиженияДенежныхСредств);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.Проект,ЗначениеВыбора.Проект);
			
			СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаПлатежа;
			СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
					
		КонецЕсли;
						
	Иначе
		
		НДСПоУмолчанию=?(ЗначениеНеЗаполнено(СтрокаПлатеж.СтавкаНДС),ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяСтавкаНДС"),
						СтрокаПлатеж.СтавкаНДС);
		
		ОбработкаПодбораЗадолженностей(СтрокаПлатеж,РасшифровкаПлатежа,ЗначениеВыбора,
		Список,ВалютаДокумента,КурсДокумента,КратностьДокумента,
		Организация, Контрагент, НДСПоУмолчанию,ОтражатьВБухгалтерскомУчете);
		
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
	КонецЕсли;
		
	УстановитьФокус();
	
	УстановитьВидимость();
				
КонецПроцедуры

Процедура КнопкаПодборНажатие(Элемент)
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"					,ЭтаФорма);
	СтруктураПараметров.Вставить("Организация"						,Организация);
	СтруктураПараметров.Вставить("Контрагент"						,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"					,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"					,СуммаДокумента);
	СтруктураПараметров.Вставить("РасшифровкаПлатежаДок"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ДатаДок"							,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"					,ВидОперации);
	СтруктураПараметров.Вставить("КурсДокумента"					,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"				,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"					,">0");
    СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"				,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"		,Истина);
	СтруктураПараметров.Вставить("ФормаОплаты"						,Перечисления.ВидыДенежныхСредств.Наличные);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"					,"ПланируемыеПоступленияДенежныхСредств");
	СтруктураПараметров.Вставить("ВидОперацииПлан"					,ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"				,Касса);
	СтруктураПараметров.Вставить("Проект"							,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств"	,СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,ОтражатьВБухгалтерскомУчете);
	
	ПодборЗадолженностей(СтруктураПараметров);
	
КонецПроцедуры


Процедура КоманднаяПанельПлатежиЗаполнить(Кнопка)
	
	ЗаполнитьРасшифровкуПоДоговору();
	
	//ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
	//СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
КонецПроцедуры


Процедура СчетОрганизацииНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если НЕ Касса.Пустая() Тогда
		
		СтандартнаяОбработка=Ложь;
		ФормаВыбораСчета=Справочники.БанковскиеСчета.ПолучитьФормуВыбора(,Элемент,);
		
		ФормаВыбораСчета.Отбор.ВалютаДенежныхСредств.Значение=Касса.ВалютаДенежныхСредств;
		ФормаВыбораСчета.Отбор.ВалютаДенежныхСредств.Использование=Истина;
		ФормаВыбораСчета.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВалютаДенежныхСредств.Доступность=Ложь;
		
		ФормаВыбораСчета.Отбор.Владелец.Значение=Организация;
		ФормаВыбораСчета.Отбор.Владелец.Использование=Истина;
		ФормаВыбораСчета.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность=Ложь;
		
		ФормаВыбораСчета.РежимВыбора=Истина;
				
		Если Не ЗначениеНеЗаполнено(Элемент.Значение) Тогда
					
			ФормаВыбораСчета.ПараметрТекущаяСтрока=Элемент.Значение;
				
		КонецЕсли;
		
		ФормаВыбораСчета.Открыть();
		
	КонецЕсли;
		
КонецПроцедуры

Процедура КассаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
		
		СтандартнаяОбработка=Ложь;
		
		ФормаКассы=Справочники.Кассы.ПолучитьФормуВыбора(,Элемент,);
		ФормаКассы.Отбор.ВалютаДенежныхСредств.Значение=мВалютаРегламентированногоУчета;
		ФормаКассы.Отбор.ВалютаДенежныхСредств.Использование=Истина;
		ФормаКассы.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВалютаДенежныхСредств.Доступность=Ложь;
		
		Если Не ЗначениеНеЗаполнено(Элемент.Значение) Тогда
			
			ФормаКассы.ПараметрТекущаяСтрока=Элемент.Значение;
			
		КонецЕсли;
		
		ФормаКассы.РежимВыбора=Истина;
		
		ФормаКассы.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры



// Процедура обработчик события "ПриИзменении" поля ввода вида приема розничной выручки
//
Процедура ВидПриемаРозничнойВыручкиПриИзменении(Элемент)
	
	Если ВидПриемаРозничнойВыручки = Перечисления.ВидПриемаРозничнойВыручки.ИзКассы Тогда
		Если ТипЗнч(Контрагент)<>Тип("СправочникСсылка.КассыККМ") Тогда
			Контрагент = Справочники["КассыККМ"].ПустаяСсылка();
		КонецЕсли;
		ЭлементыФормы.КассаККМ.Подсказка = "В этом поле необходимо кассу ККМ, из которой осущесвляется прием выручки.";
	Иначе
		Если ТипЗнч(Контрагент)<>Тип("СправочникСсылка.Склады") Тогда
			Контрагент = Справочники["Склады"].ПустаяСсылка();
		КонецЕсли;
		ЭлементыФормы.КассаККМ.Подсказка = "В этом поле необходимо указать НТТ, с которой осуществляется прием выручки.";
	КонецЕсли;
 
КонецПроцедуры

 

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры


Процедура ПодразделениеКомпанииПриИзменении(Элемент)
	
	//+++Шарафутдинов 01.03.2018
	Если не ВозможностьВыбораПодразделения2018(Дата,Элемент.Значение) тогда
		Сообщить("Подразделение должно участвовать в бюджетном планировании. Выберите другое подразделение!");
		Элемент.Значение = Справочники.Подразделения.ПустаяСсылка();
		Возврат;		
	КонецЕсли;
	
	//---Шарафутдинов 01.03.2018


	
	УстановитьНомерДокумента(ЭтотОбъект);

КонецПроцедуры

Процедура ЗаполнитьРасшифровкуПоДоговору() 
	
	СуммаОплатыПоДоговору=0;
	
	Если ЗначениеНеЗаполнено(ЭлементыФормы.ТаблицаПлатежейПоДоговорамОтветственногоЛица.ТекущиеДанные.ДоговорКонтрагента) Тогда
	Возврат	;
	КонецЕсли;

    мДоговорКонтрагента=ЭлементыФормы.ТаблицаПлатежейПоДоговорамОтветственногоЛица.ТекущиеДанные.ДоговорКонтрагента;
	
	НайдСтрока=мТаблицаПлатежейПоДоговорам.Найти(мДоговорКонтрагента,"ДоговорКонтрагента");
	Если НайдСтрока=Неопределено Тогда
		    Сообщить("Основной менеджер контрагента не указал договор "+Строка(мДоговорКонтрагента), СтатусСообщения.Важное);
			Возврат;
		Иначе
		СуммаОплатыПоДоговору=НайдСтрока.СуммаПлатежа;	
	КонецЕсли;	
	
	Если (мДоговорКонтрагента.ОтветственноеЛицо<> глТекущийПользователь) Тогда
	Сообщить("Вы не являетесь лицом ответственным по договору "+СокрЛП(мДоговорКонтрагента.Наименование)+" и не можете разносить платежи по этому договору.",СтатусСообщения.Важное);
	Возврат;
	КонецЕсли;
	
	// позволим разносить платежи только по договору по заказам или р/д
	Если мДоговорКонтрагента.ВедениеВзаиморасчетов<>Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
	Сообщить("Автоматическое заполнение работает только ПО ЗАКАЗАМ. Договор '"+ мДоговорКонтрагента+"' " +Строка(мДоговорКонтрагента.ВедениеВзаиморасчетов));	
	Возврат;	
	КонецЕсли;	
	
   ТаблицаДолговПоСделкам=ПолучитьТаблицуДолговПоДоговору(ЭтотОбъект,мДоговорКонтрагента);
  
 
  Если ТаблицаДолговПоСделкам.Количество()=0 Тогда
  Сообщить("Долгов ПО ЗАКАЗАМ по договору "+СокрЛП(мДоговорКонтрагента.Наименование) +" не обнаружено. Заполнение не произведено.");	  
  Возврат;
  КонецЕсли;  
  
    // Заполняем таблицу
   //1. удаляем все старые строки по нашему договору
   сч=0;
   Пока сч < ТаблицаПлатежейПоДоговорамОтветственногоЛица.Количество() Цикл
	   Если ТаблицаПлатежейПоДоговорамОтветственногоЛица[сч].ДоговорКонтрагента=мДоговорКонтрагента Тогда
		   ТаблицаПлатежейПоДоговорамОтветственногоЛица.Удалить(сч);
	   Иначе 
		   сч=сч+1;	
	   КонецЕсли;	
   КонецЦикла;

   //2.копируем таблицу долгов по сделкам в Расшифровку платежа, чтобы не было превышения СуммыОплатыПоДоговору. 
   // СуммаОплатыПоДоговору - это сумма оплаты по договору, введенная основным менеджером контрагента
   
   ФлагНомерСтроки=0;
   номСтр=0;
   Для каждого строкаТЗ из ТаблицаДолговПоСделкам Цикл
	   номСтр=номСтр+1;
	Если СуммаОплатыПоДоговору<=0 Тогда
		Прервать;
	КонецЕсли;	
	СтрокаТаблицыПлатежей=ТаблицаПлатежейПоДоговорамОтветственногоЛица.Добавить();	
	СтрокаТаблицыПлатежей.ДоговорКонтрагента=мДоговорКонтрагента;
	СтрокаТаблицыПлатежей.Сделка=строкаТЗ.Сделка;
	Если ЗначениеНеЗаполнено(строкаТЗ.Сделка) Тогда
		ФлагНомерСтроки=номСтр;
	КонецЕсли;	
	СуммаПлатежа=Макс(Мин (СуммаОплатыПоДоговору,строкаТЗ.СуммаДолга),0);
	СуммаОплатыПоДоговору=СуммаОплатыПоДоговору-СуммаПлатежа;
	СтрокаТаблицыПлатежей.СуммаПлатежа=СуммаПлатежа;
	
КонецЦикла;	
// 3. остаток суммы оплаты по договору отнесем на  этот же договор, но по пустой аналитике
Если СуммаОплатыПоДоговору>0 Тогда
	Если ФлагНомерСтроки>0 Тогда // были долги отнесенные на пустую сделку, и чтобы не повторять платеж по пустой сделке
		ТаблицаПлатежейПоДоговорамОтветственногоЛица[ФлагНомерСтроки-1].СуммаПлатежа=ТаблицаПлатежейПоДоговорамОтветственногоЛица[ФлагНомерСтроки-1].СуммаПлатежа+СуммаОплатыПоДоговору;
	Иначе	
    СтрокаПлатеж=ТаблицаПлатежейПоДоговорамОтветственногоЛица.Добавить();
	СтрокаПлатеж.ДоговорКонтрагента=мДоговорКонтрагента;
	СтрокаПлатеж.СуммаПлатежа=СуммаОплатыПоДоговору;
	КонецЕсли;
КонецЕсли;  

КонецПроцедуры

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	СтрокаПлатеж.ДокументПланированияПлатежа=Документы.ПланируемоеПоступлениеДенежныхСредств.ПустаяСсылка();
	СтрокаПлатеж.Сделка=Неопределено;

	СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);

	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

	РассчитатьСуммуВзаиморасчетов();

	Если ЗначениеНеЗаполнено(Контрагент) Тогда
		Контрагент = СтрокаПлатеж.ДоговорКонтрагента.Владелец;
	КонецЕсли;
	
	УстановитьВидимость();

КонецПроцедуры // ПриИзмененииДоговора()

Процедура РасшифровкаПлатежаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ЗначениеНеЗаполнено(Элемент.ТекущиеДанные.ДоговорКонтрагента) Тогда
		Сообщить("Договор не выбран!",СтатусСообщения.Важное);
		Отказ=Истина;
		Возврат;
	КонецЕсли;
	
	Если не ЗначениеНеЗаполнено(Элемент.ТекущиеДанные.Сделка) Тогда
		ОстатокПоСделке=0;
		Запрос=Новый Запрос;	
		Запрос.Текст="ВЫБРАТЬ
		|	ЕстьNULL(Сумма(СуммаВзаиморасчетовОстаток),0) Сумма
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(,
		|		ДоговорКонтрагента = &ДоговорКонтрагента
		|			И Сделка = &Сделка) ";
	Запрос.УстановитьПараметр("ДоговорКонтрагента",Элемент.ТекущиеДанные.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка",Элемент.ТекущиеДанные.Сделка);
	ТаблицаОстатокПоСделке=Запрос.Выполнить().Выгрузить();
	Если ТаблицаОстатокПоСделке.Количество()>0 Тогда
	ОстатокПоСделке=ТаблицаОстатокПоСделке[0].Сумма;
	КонецЕсли;
	Если не ЭтоНовый() Тогда	
		Запрос.Текст="ВЫБРАТЬ 
		| ЕстьNULL(Сумма(СуммаВзаиморасчетов),0) Сумма ИЗ
		| РегистрНакопления.ВзаиморасчетыСКонтрагентами 
		|		ГДЕ ДоговорКонтрагента= &ДоговорКонтрагента  И Сделка=&Сделка
		|И	Регистратор = &Регистратор И ВидДвижения=&Расход ";
		Запрос.УстановитьПараметр("Регистратор",Ссылка);		
		Запрос.УстановитьПараметр("Расход",ВидДвиженияНакопления.Расход);
		Запрос.УстановитьПараметр("ДоговорКонтрагента",Элемент.ТекущиеДанные.ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Сделка",Элемент.ТекущиеДанные.Сделка);
		ДвиженияДокПоСделке=Запрос.Выполнить().Выгрузить();
		Если ДвиженияДокПоСделке.Количество()>0 Тогда
			ОстатокПоСделке=ОстатокПоСделке+ДвиженияДокПоСделке[0].Сумма;	
		КонецЕсли;	
	КонецЕсли;	
		
       	Если ОстатокПоСделке<Элемент.ТекущиеДанные.СуммаВзаиморасчетов Тогда
			Отказ=Истина;
			Сообщить("Долг по сделке "+Строка(Элемент.ТекущиеДанные.Сделка)+ " составляет "+Формат(ОстатокПоСделке,"ЧЦ=15; ЧДЦ=2")+ВалютаДокумента.Наименование+"."+Символы.ПС+"Введенная вами сумма "+Формат(Элемент.ТекущиеДанные.СуммаВзаиморасчетов,"ЧЦ=15; ЧДЦ=2")+"больше долга по этой сделке",СтатусСообщения.Важное);
		КонецЕсли;	
	//Иначе
	//	Сообщить("По данной сделке нет долга!",СтатусСообщения.Важное);
	//	Отказ=Истина;
	КонецЕсли;	

КонецПроцедуры

Процедура КоманднаяПанельПлатежиИнфКнопка(Кнопка)
Отчет = Отчеты.ВедомостьВзаиморасчетыСКонтрагентами.Создать();
	Отчет.ЗаполнитьНачальныеНастройки();
	ФормаОбработки = Отчет.ПолучитьОсновнуюФорму();
	ФормаОбработки.Открыть();
	
	//Отчет.ОбщийОтчет.ДатаКон = КонецДня(ДатаКон);
	
	Для Каждого СтрОтб из ФормаОбработки.ПостроительОтчета.Отбор Цикл
		СтрОтб.Использование = Ложь;	
	КонецЦикла;
	
	///
	Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("Контрагент") = Неопределено Тогда
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Контрагент");
	Иначе
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("Контрагент");
	КонецЕсли; 
	
	СтрОтб.ВидСравнения = ВидСравнения.Равно;
	СтрОтб.Значение = Ссылка.Контрагент;
	СтрОтб.Использование = Истина;

	Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагента") = Неопределено Тогда
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("ДоговорКонтрагента");
	Иначе
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагента");
	КонецЕсли;
	
	СтрОтб.ВидСравнения = ВидСравнения.Равно;
	СтрОтб.Значение = ЭлементыФормы.ТаблицаПлатежейПоДоговорамОтветственногоЛица.ТекущиеДанные.ДоговорКонтрагента;
	СтрОтб.Использование = Истина;	
	
	Если ФормаОбработки.ПостроительОтчета.ИзмеренияСтроки.Найти("Сделка") = Неопределено Тогда
		СтрОтб = ФормаОбработки.ПостроительОтчета.ИзмеренияСтроки.Добавить("Сделка");
	Иначе
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("Сделка");
	КонецЕсли;
	
	
	ФормаОбработки.ПостроительОтчета.ВыбранныеПоля.Очистить();
	
	ФормаОбработки.ПостроительОтчета.ВыбранныеПоля.Добавить(ФормаОбработки.ПостроительОтчета.ДоступныеПоля.Период.ПутьКДанным, ФормаОбработки.ПостроительОтчета.ДоступныеПоля.Период.Имя);
	ФормаОбработки.ПостроительОтчета.ВыбранныеПоля.Добавить(ФормаОбработки.ПостроительОтчета.ДоступныеПоля.ДоговорКонтрагента.Поля.ОтветственноеЛицо.ПутьКДанным, ФормаОбработки.ПостроительОтчета.ДоступныеПоля.ДоговорКонтрагента.Поля.ОтветственноеЛицо.Имя);
	
	ФормаОбработки.ОбновитьОтчет();
	
	Возврат;


КонецПроцедуры	

Процедура РасшифровкаПлатежаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ЗначениеНеЗаполнено(ДанныеСтроки.Сделка) Тогда
	ОформлениеСтроки.Ячейки.ДатаОплаты.ОтображатьТекст =ЛОЖЬ;	
	ИначеЕсли 	ТипЗнч(ДанныеСтроки.Сделка)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
	ОформлениеСтроки.Ячейки.ДатаОплаты.ОтображатьТекст =Истина;	
	ОформлениеСтроки.Ячейки.ДатаОплаты.Текст=Формат(ДанныеСтроки.Сделка.ДатаОплаты,"ДФ=dd.MM.yy");	
	КонецЕсли;	

КонецПроцедуры

Функция ЗаполнитьТаблицуПлатежейПоДоговорамОтветственногоЛица()
	 Запрос = Новый Запрос;
		  
	 Запрос.Текст=" ВЫБРАТЬ
						|	ДоговорКонтрагента,
						|   Сделка,
						|   СуммаПлатежа
						|ИЗ
						|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа 
						|ГДЕ Ссылка = &Ссылка И ДоговорКонтрагента.ОтветственноеЛицо=&ОтветственноеЛицо";
		Запрос.УстановитьПараметр("Ссылка",Ссылка);						
		Запрос.УстановитьПараметр("ОтветственноеЛицо",ПараметрыСеанса.ТекущийПользователь);
		ТЗПлатежей= Запрос.Выполнить().Выгрузить();
		
	Возврат	ТЗПлатежей;
КонецФункции

Функция ТаблицыЗначенийИдентичны(Таб1,Таб2) //2 столбца 'ДоговорКонтрагента' и 'СуммаПлатежа'
	
	    // проверяем для каждой строки из Таб1 на соответствие строке из Таб2
		Для каждого строкаТаб1 Из Таб1 Цикл
			НайдСтрока=Таб2.Найти(строкаТаб1.ДоговорКонтрагента,"ДоговорКонтрагента");
			Если НайдСтрока=Неопределено Тогда
				Сообщить("Договор '"+Строка(строкаТаб1.ДоговорКонтрагента)+"' не был указан основным менеджером контрагента.");
				Возврат Ложь;
			Иначе
				Если НайдСтрока.СуммаПлатежа<>строкаТаб1.СуммаПлатежа Тогда
							Сообщить("Сумма платежа по договору '"+Строка(строкаТаб1.ДоговорКонтрагента)+"'" +Строка(строкаТаб1.СуммаПлатежа)+
							" отличается от той, которая указана основным менеджером контрагента:"+Строка(НайдСтрока.СуммаПлатежа));
							Возврат Ложь;
				КонецЕсли;	
    		КонецЕсли;	
		КонецЦикла;	
	    //теперь в обратную сторону
		 Для каждого строкаТаб2 Из Таб2 Цикл
			НайдСтрока=Таб1.Найти(строкаТаб2.ДоговорКонтрагента,"ДоговорКонтрагента");
			Если НайдСтрока=Неопределено Тогда
				Сообщить("Договор '"+Строка(строкаТаб2.ДоговорКонтрагента)+"' был указан основным менеджером контрагента.");
				Возврат Ложь;
			Иначе
				Если НайдСтрока.СуммаПлатежа<>строкаТаб2.СуммаПлатежа Тогда
							Сообщить("Сумма платежа по договору '"+Строка(НайдСтрока.ДоговорКонтрагента)+"'" +Строка(НайдСтрока.СуммаПлатежа)+
							" отличается от той, которая указана основным менеджером контрагента:"+Строка(строкаТаб2.СуммаПлатежа));
							Возврат Ложь;
				КонецЕсли;	
    		КонецЕсли;	
		КонецЦикла;	
Возврат Истина;
	
КонецФункции

Процедура ТаблицаПлатежейПоДоговорамОтветственногоЛицаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
		Если  не ЗначениеНеЗаполнено(ДанныеСтроки.Сделка)
		И ТипЗнч(ДанныеСтроки.Сделка)=Тип("ДокументСсылка.ЗаказПокупателя") 
		И не ЗначениеНеЗаполнено(ДанныеСтроки.Сделка.ДатаОплаты) Тогда
		ОформлениеСтроки.Ячейки.ДатаОплаты.ОтображатьТекст=Истина;
	ОформлениеСтроки.Ячейки.ДатаОплаты.Текст=Формат(ДанныеСтроки.Сделка.ДатаОплаты,"ДФ=dd.MM.yyyy");
		
	КонецЕсли;	

КонецПроцедуры

Процедура ТаблицаПлатежейПоДоговорамОтветственногоЛицаДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ВыбранныйДоговор=?(ЗначениеНеЗаполнено(ЭлементыФормы.ТаблицаПлатежейПоДоговорамОтветственногоЛица.ТекущиеДанные.ДоговорКонтрагента),
	Справочники.ДоговорыКонтрагентов.ПустаяСсылка(),ЭлементыФормы.ТаблицаПлатежейПоДоговорамОтветственногоЛица.ТекущиеДанные.ДоговорКонтрагента);
	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент,ВыбранныйДоговор ,
				ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);

КонецПроцедуры

Процедура ТаблицаПлатежейПоДоговорамОтветственногоЛицаСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	
	ПараметрыВыбора=ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ЭлементыФормы.ТаблицаПлатежейПоДоговорамОтветственногоЛица.ТекущиеДанные.ДоговорКонтрагента, 
	Документы.ЗаказПокупателя.ПустаяСсылка(), СтандартнаяОбработка,  ПараметрыВыбора.ВидДвиженияРасчеты, ПараметрыВыбора.ТипЗаказа);

КонецПроцедуры





































