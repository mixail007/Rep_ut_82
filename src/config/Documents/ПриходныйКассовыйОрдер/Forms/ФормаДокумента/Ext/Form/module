////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов;

//Хранит текущую строку списка оплачиваемых документов
Перем СтрокаПлатеж;

Перем ИнвертироватьСуммы;

Перем мПечатнаяФормаПоУмолчанию;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	ЭлементыФормы.СтавкаНДС.Доступность = Истина;
	ЭлементыФормы.НадписьРедактировать.Видимость = Ложь;
	ЭлементыФормы.Список.Видимость = Ложь;
	ЭлементыФормы.Список1.Видимость = Ложь;

	Если ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
		УстановитьТекущуюСтраницу("ПриходДенежныхСредствРозничнаяВыручка",ЭлементыФормы.ОсновнаяПанель);
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки["Чек"].Доступность = Ложь;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
		УстановитьТекущуюСтраницу("ПолучениеНаличностиВБанке",ЭлементыФормы.ОсновнаяПанель);
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки["Чек"].Доступность = Ложь;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
		УстановитьТекущуюСтраницу("ВозвратПодотчетника",ЭлементыФормы.ОсновнаяПанель);
		ЭлементыФормы.ВалютаВзаиморасчетовПодотчетника.Доступность = НЕ ОтражатьВБухгалтерскомУчете;
		ЭлементыФормы.СтавкаНДС.Доступность = Ложь;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки["Чек"].Доступность = Ложь;

		ЭлементыФормы.РамкаПолучатель.Заголовок="Взаиморасчеты с подотчетным лицом";
		ЭлементыФормы.НадписьФизЛицо.Заголовок	="Подотчетник";
		ЭлементыФормы.НадписьДокумент.Заголовок="РКО";
		
		Если НЕ ВалютаДокумента=ВалютаВзаиморасчетовПодотчетника Тогда
			ЭлементыФормы.ОтражатьВБухгалтерскомУчете.Доступность=Ложь;
			ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность=Ложь;
		Иначе
			ЭлементыФормы.ОтражатьВБухгалтерскомУчете.Доступность=Истина;
		КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
		УстановитьТекущуюСтраницу("Прочее",ЭлементыФормы.ОсновнаяПанель);
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки["Чек"].Доступность = Истина;

	ИначеЕсли ЕстьРасчетыСКонтрагентами Тогда

		УстановитьТекущуюСтраницу("ПКО",ЭлементыФормы.ОсновнаяПанель);
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки["Чек"].Доступность = Истина;

		Если Список Тогда
			УстановитьТекущуюСтраницу("ПлатежПоНесколькимСделкам", ЭлементыФормы.ПанельПлатежи);
		Иначе
			УстановитьТекущуюСтраницу("ПлатежПоОднойСделке", ЭлементыФормы.ПанельПлатежи);
		КонецЕсли;

		ЭлементыФормы.РамкаРасшифровкаПлатежа.Заголовок = "Расшифровка платежа";
		ЭлементыФормы.Сделка.Доступность = Истина;

		ЭлементыФормы.НадписьРедактировать.Видимость = Истина;
		ЭлементыФормы.Список.Видимость = Истина;
		ЭлементыФормы.Список1.Видимость = Истина;
		
		Если СтрокаПлатеж.ДоговорКонтрагента.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			ЭлементыФормы.Сделка.Доступность=Ложь;
		Иначе
			ЭлементыФормы.Сделка.Доступность=Истина;
		КонецЕсли;

		Если Константы.ОплатыРаспределяютМенеджеры.Получить() 
			и ВидОперации=Перечисления.ВидыОперацийПКО.ОплатаПокупателя
			и не ЗначениеНеЗаполнено(Контрагент) и не ЗначениеНеЗаполнено(Контрагент.ОсновнойМенеджерПокупателя)  Тогда
            ЭлементыФормы.Сделка.Доступность=Ложь;
     	КонецЕсли;
	ИначеЕсли ЕстьРасчетыПоКредитам Тогда
		УстановитьТекущуюСтраницу("ПКО",ЭлементыФормы.ОсновнаяПанель);
		УстановитьТекущуюСтраницу("ПлатежПоОднойСделке", ЭлементыФормы.ПанельПлатежи);
		ЭлементыФормы.РамкаРасшифровкаПлатежа.Заголовок = "Расшифровка платежа";
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки["Чек"].Доступность = Ложь;

		ЭлементыФормы.Сделка.Доступность = Ложь;

		ЭлементыФормы.НадписьРедактировать.Видимость = Ложь;
		ЭлементыФормы.Список.Видимость = Ложь;
		ЭлементыФормы.Список1.Видимость = Ложь;
		
	КонецЕсли;

	Если ОтражатьВУправленческомУчете Тогда
		ЭлементыФормы.Оплачено.Доступность = Истина;
		ЭлементыФормы.ОтраженоВОперУчете.Доступность = Истина;
	Иначе
		ЭлементыФормы.Оплачено.Доступность = Ложь;
		ЭлементыФормы.ОтраженоВОперУчете.Доступность = Ложь;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность=Истина;
	Иначе
		ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность=Ложь;
	КонецЕсли;
	
	Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) И (Не Список) И ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
			
			ЭлементыФормы.КурсВзаиморасчетовПлан.Видимость=Ложь;
			ЭлементыФормы.СуммаПлатежаПлан.Видимость=Ложь;
			ЭлементыФормы.НадписьКурсВзаиморасчетовПлан.Видимость=Ложь;
			ЭлементыФормы.НадписьСуммаПлатежаПлан.Видимость=Ложь;
			ЭлементыФормы.ИнфНадписьКурсаЗаявки.Видимость=Ложь;
			
		Иначе
			
			ЭлементыФормы.КурсВзаиморасчетовПлан.Видимость=Истина;
			ЭлементыФормы.СуммаПлатежаПлан.Видимость=Истина;
			ЭлементыФормы.НадписьКурсВзаиморасчетовПлан.Видимость=Истина;
			ЭлементыФормы.НадписьСуммаПлатежаПлан.Видимость=Истина;
			ЭлементыФормы.ИнфНадписьКурсаЗаявки.Видимость=Истина;
			
		КонецЕсли;
		
	УстановитьДанныеДляРеквизитов();		
	ВидимостьРеквизитаПроект(ЭтотОбъект, ЭлементыФормы, "НадписьПроект,Проект,НадписьПроект1,Проект1,НадписьПроект2,Проект2,НадписьПроект3,Проект3,НадписьПроект4,Проект4,РасшифровкаПлатежа.Проект");	

	// { Лапенков 20061102
	Если (ЭлементыФормы.Списком2.Значение = Ложь) Тогда 
		ЭлементыФормы.Затраты.Видимость = Истина;
		ЭлементыФормы.СтатьяЗатрат.Видимость = Ложь;		
		ЭлементыФормы.НадписьСтатьяЗатрат.Видимость = Ложь;		
		ЭлементыФормы.КоманднаяПанель2.Видимость = Истина;
	Иначе 
		ЭлементыФормы.Затраты.Видимость = Ложь;
		ЭлементыФормы.СтатьяЗатрат.Видимость = Истина;
		ЭлементыФормы.НадписьСтатьяЗатрат.Видимость = Истина;
		ЭлементыФормы.КоманднаяПанель2.Видимость = Ложь;		
	КонецЕсли;
    // } Лапенков 20061102
	//21.08.17 Смирнов
	Если НомерЧекаККМ<>0 тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки["Чек"].Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры // УстановитьВидимость()

// Процедура переопределяет источники данных для реквизитов "СуммаДокумента" и "СуммаВзаиморасчетов".
// В режиме расчетов с контрагентами без разбиения они меняются местами.
//
Процедура УстановитьДанныеДляРеквизитов()
	
	Если ((ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) И Не Список)
		ИЛИ ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
		
		ЭлементыФормы.СуммаДокумента.Данные="ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.СуммаВзаиморасчетов";
		
		ЭлементыФормы.НадписьСуммаДокумент.Данные="НадписьСуммаВзаиморасчетов";
		ЭлементыФормы.НадписьВалютаДокумент.Данные="";
		ЭлементыФормы.НадписьВалютаДокумент.Заголовок="";
		ЭлементыФормы.НадписьВалютаВзаиморасчетов.Данные="НадписьВалютаДокумент";
		ЭлементыФормы.НадписьВалютаВзаиморасчетовПодотчет.Данные="НадписьВалютаДокумент";
				
		ИнвертироватьСуммы=Истина;
		
	Иначе
		
		ЭлементыФормы.СуммаДокумента.Данные="СуммаДокумента";
		ЭлементыФормы.НадписьВалютаДокумент.Данные="НадписьВалютаДокумент";

		ЭлементыФормы.НадписьСуммаДокумент.Данные="";
		ЭлементыФормы.НадписьСуммаДокумент.Заголовок="Сумма: ";
		
		ИнвертироватьСуммы=Ложь;
				
	КонецЕсли;
	
КонецПроцедуры // УстановитьДанныеДляРеквизитов()


// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	СтрокаПлатеж.ДокументПланированияПлатежа=Документы.ПланируемоеПоступлениеДенежныхСредств.ПустаяСсылка();
	СтрокаПлатеж.Сделка=Неопределено;

	//СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);

	//СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	//СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
 	ТекущийКурс = РегистрыСведений.КурсыВалютДляПоступления.СрезПоследних(Дата,Новый структура("Валюта",ВалютаДокумента));
	Если  ТекущийКурс.Количество()>0 Тогда
		СтрокаПлатеж.КурсВзаиморасчетов  = ТекущийКурс[0].Курс-3;
		СтрокаПлатеж.КратностьВзаиморасчетов = ТекущийКурс[0].Кратность;	
	конецЕсли;

	РассчитатьСуммуВзаиморасчетов();

	Если ЗначениеНеЗаполнено(Контрагент) Тогда
		Контрагент = СтрокаПлатеж.ДоговорКонтрагента.Владелец;
	КонецЕсли;
	
	УстановитьВидимость();

КонецПроцедуры // ПриИзмененииДоговора()

Процедура ПриИзмененииКонтрагента()

	РасшифровкаПлатежа.Очистить();

	СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
	
	Если ЗначениеНеЗаполнено(ДокументОбъект.Контрагент) Тогда 
		СтрокаПлатеж.ДоговорКонтрагента = Неопределено;
	ИначеЕсли (ТипЗнч(Контрагент)=Тип("СправочникСсылка.Контрагенты")) И (НЕ ОпределитьВидДоговораСКонтрагентом(ВидОперации).НайтиПоЗначению(Контрагент.ОсновнойДоговорКонтрагента.ВидДоговора)=Неопределено) Тогда
		Если Организация.Пустая() Тогда
			СтрокаПлатеж.ДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
			Организация=Контрагент.ОсновнойДоговорКонтрагента.Организация;
		ИначеЕсли Контрагент.ОсновнойДоговорКонтрагента.Организация.Пустая()
			ИЛИ Контрагент.ОсновнойДоговорКонтрагента.Организация=Организация Тогда
			СтрокаПлатеж.ДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
		КонецЕсли;
		
		ПринятоОт =?(Контрагент.НаименованиеПолное="",Контрагент.Наименование, Контрагент.НаименованиеПолное);	
		
	КонецЕсли;

	СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
	

КонецПроцедуры // ПриИзмененииКонтрагента

// Возвращает фокус на строку ТЧ "Расшифровка платежа" при его потере в режиме редактирования
// одиночного платежа.
Процедура УстановитьФокус()
	
	Если ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=Неопределено Тогда
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=СтрокаПлатеж;
	КонецЕсли;
	
КонецПроцедуры // УстановитьФокус()

// Процедура выполняет заполнение реквизита Контрагент значением по умолчанию.
//
Процедура ЗаполнитьКонтрагента()

	Если НЕ ЗначениеНеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ВремКонтрагент = Неопределено;
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
		ВремКонтрагент = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойПокупатель");

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
		ВремКонтрагент = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяКассаККМ");

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком Тогда
		ВремКонтрагент = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойПоставщик");
		
	КонецЕсли;
	
	Если ЗначениеНеЗаполнено(Контрагент) Тогда
		Контрагент = ВремКонтрагент;
		
		// проставим основной договор контрагента
		ПриИзмененииКонтрагента();	
		ПриИзмененииДоговора();
		УстановитьФокус();
		
	КонецЕсли;
		
КонецПроцедуры // ЗаполнитьКонтрагента()

// Процедура рассчитывает сумму взаиморасчетов
//
Процедура РассчитатьСуммуВзаиморасчетов()

	ПроверкаКурсовВалют(СтрокаПлатеж);

	Если ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
		ВалютаВзаиморасчетов=ВалютаВзаиморасчетовПодотчетника;
	Иначе
		ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КонецЕсли;

	Если (СтрокаПлатеж.КурсВзаиморасчетов <> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов=ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, ВалютаДокумента,
			                                                  ВалютаВзаиморасчетов,
			                                                  КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
			                                                  КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);	
	Иначе
		СтрокаПлатеж.СуммаВзаиморасчетов = 0;
	КонецЕсли;
	
	Если СтрокаПлатеж.КурсВзаиморасчетовПлан>0 Тогда
		РассчитатьСуммуПлатежаПлан();
	КонецЕсли;

КонецПроцедуры // РассчитатьСуммуВзаиморасчетов()

// Процедура рассчитывает сумму платежа по заявке.
//
Процедура РассчитатьСуммуПлатежаПлан()
	
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКурсовВалют(СтрокаПлатеж);
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Иначе
		СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаВзаиморасчетов;
		Возврат;
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаВзаиморасчетов;
	
	ИначеЕсли (КурсДокумента <> 0) И (СтрокаПлатеж.КратностьВзаиморасчетов <> 0) И (СтрокаПлатеж.КурсВзаиморасчетовПлан <> 0) Тогда
		СтрокаПлатеж.СуммаПлатежаПлан=ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
															ВалютаДокумента,
			                                                СтрокаПлатеж.КурсВзаиморасчетовПлан,КурсДокумента,
															СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);	
	Иначе
		СтрокаПлатеж.СуммаПлатежаПлан = 0;
	КонецЕсли;

КонецПроцедуры // РассчитатьСуммуПлатежаПлан()

// Процедура рассчитывает сумму платежа по сумме взаиморасчетов.
//
Процедура РассчитатьСуммуПлатежа()
	
	ПроверкаКурсовВалют(СтрокаПлатеж);
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
		ВалютаВзаиморасчетов=ВалютаВзаиморасчетовПодотчетника;
	Иначе
		СтрокаПлатеж.СуммаПлатежа=СтрокаПлатеж.СуммаВзаиморасчетов;
		Возврат;
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаПлатежа=СтрокаПлатеж.СуммаВзаиморасчетов;
	
	ИначеЕсли (КурсДокумента <> 0) И (СтрокаПлатеж.КратностьВзаиморасчетов <> 0) И (СтрокаПлатеж.КурсВзаиморасчетов <> 0) Тогда
		СтрокаПлатеж.СуммаПлатежа=ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
															ВалютаДокумента,
			                                                СтрокаПлатеж.КурсВзаиморасчетов,КурсДокумента,
															СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);	
	Иначе
		СтрокаПлатеж.СуммаПлатежа = 0;
	КонецЕсли;
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуПлатежа()

//Процедура рассчитывает курс взаиморасчетов по заявке
//
Процедура РассчитатьКурсВзаиморасчетовПлан()
	
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		Возврат;
	КонецЕсли;
	
	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетовПлан = СтрокаПлатеж.СуммаПлатежаПлан * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.СуммаВзаиморасчетов/ КратностьДокумента;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьКурсВзаиморасчетов

//Процедура рассчитывает курс взаиморасчетов документа
//
Процедура РассчитатьКурсВзаиморасчетов()
	
	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.СуммаВзаиморасчетов/ КратностьДокумента;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьКурсВзаиморасчетов

Процедура ПриИзмененииСчетаОрганизации()
	
	Если СчетОрганизации.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Организация.Пустая() Тогда
		Организация=СчетОрганизации.Владелец;
	КонецЕсли;
	
	ПриИзмененииЗначенияКассыБанковскогоСчета(ВалютаДокумента, КурсДокумента, КратностьДокумента, Дата, СуммаДокумента, СчетОрганизации.ВалютаДенежныхСредств);
	СуммаДокументаПриИзменении();
		
	Если НЕ Касса.Пустая() И НЕ СчетОрганизации.ВалютаДенежныхСредств=Касса.ВалютаДенежныхСредств Тогда
		Сообщить("Валюта кассы не соответствует валюте счета организации.");
		Касса=Новый(Тип("Справочник.Кассы"));
	КонецЕсли;	
			
КонецПроцедуры // ПриИзмененииСчетаОрганизации()

// Обрабатывает интерактивное и программное изменение валюты
// взаиморасчетов с подотчетником
//
Процедура ПриИзмененииВалютыПодотчетника()

	Если НЕ ВалютаДокумента=ВалютаВзаиморасчетовПодотчетника Тогда
		ОтражатьВБухгалтерскомУчете=Ложь;
		ОтражатьВНалоговомУчете=Ложь;
	КонецЕсли;
	
	СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(ВалютаВзаиморасчетовПодотчетника, Дата);
	СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
	РассчитатьСуммуВзаиморасчетов();
	УстановитьВидимость();

КонецПроцедуры // ПриИзмененииВалютыПодотчетника()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает тип поля "Контрагент" в зависимости от вида операции.
//
// Параметры:
//  Нет.
//
Процедура УстановитьТипКонтрагент()

	ИмяСправочника = "Контрагенты";
	ИмяРасчетногоДокумента="РасходныйКассовыйОрдер";
	
	ЕстьКонтрагент=Истина;
	ЕстьРасчетныйДокумент=Ложь;
	
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда

		ИмяСправочника = ?( ВидПриемаРозничнойВыручки = Перечисления.ВидПриемаРозничнойВыручки.ИзНТТ, "Склады", "КассыККМ");

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником  Тогда

		ИмяСправочника = "ФизическиеЛица";
		ЕстьРасчетныйДокумент=Истина;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда

		ЕстьКонтрагент=Ложь;

	КонецЕсли;

	Если ЕстьКонтрагент Тогда
		
		Если ТипЗнч(Контрагент) <> Тип("СправочникСсылка." + ИмяСправочника) Тогда
			Контрагент = Справочники[ИмяСправочника].ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		
		Если НЕ Контрагент=Неопределено Тогда
			Контрагент=Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьРасчетныйДокумент Тогда
		
		Если ТипЗнч(РасчетныйДокумент) <> Тип("ДокументСсылка." + ИмяРасчетногоДокумента) Тогда
			РасчетныйДокумент = Документы[ИмяРасчетногоДокумента].ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		
		Если Не ЗначениеНеЗаполнено(РасчетныйДокумент) Тогда
			
			РасчетныйДокумент=Документы[ИмяРасчетногоДокумента].ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // УстановитьТипКонтрагент()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	яштФормаДокументаПриОткрытии(ЭтотОбъект, ЭтаФорма);
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
	КонецЕсли;

	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = РасшифровкаПлатежа[0];

	СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;

	УстановитьКурсДокумента();

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ	
		
		// Заполнить реквизиты значениями по умолчанию.

		ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета,РасшифровкаПлатежа);
		УстановитьНомерДокумента(ЭтотОбъект);
		
		Если НЕ (ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке
			ИЛИ ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее) Тогда
			
			ЗаполнитьКонтрагента();
			
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(СтрокаПлатеж.СтатьяДвиженияДенежныхСредств) Тогда
			
			УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);
			
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(ВидПриемаРозничнойВыручки) Тогда
			ВидПриемаРозничнойВыручки = Перечисления.ВидПриемаРозничнойВыручки.ИзКассы;
		КонецЕсли;
		
		НомерЧекаККМ = 0;
		
	Иначе
		
		УстановитьКурсДокумента();
		ЕстьРасчетыСКонтрагентами=ЕстьРасчетыСКонтрагентами(ВидОперации);
		ЕстьРасчетыПоКредитам=ЕстьРасчетыПоКредитам(ВидОперации);
	
	КонецЕсли;
	
	
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                    ВидОперации.Метаданные().ЗначенияПеречисления,
	                                    Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Заполнить подменю выбора печатных форм.
	СписокМакетов = ЭтотОбъект.ПолучитьСписокПечатныхФорм();
	УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати,
	                                     СписокМакетов,
	                                     Новый Действие("ДействияФормыДействиеВыбратьПечатнуюФормы"));

	// Установить печатную форму по умолчанию.
	УстановитьКнопкуПечати(ЭтотОбъект.Метаданные().Имя, ЭтаФорма, СписокМакетов, мПечатнаяФормаПоУмолчанию);

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Установить тип поля Контрагент.
	УстановитьТипКонтрагент();

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Установить видимость реквизитов и заголовков колонок.
	Если РасшифровкаПлатежа.Количество()>1 Тогда
		Список=Истина;
	Иначе
		Список=Ложь;
	КонецЕсли;
	
	УстановитьВидимость();
	
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	РаботникШиномонтажа = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"РаботникШиномонтажа");
		
	Если (ПользовательИБ <> Неопределено
		И ПользовательИБ.ОсновнойИнтерфейс <> Неопределено И
		 ПользовательИБ.ОсновнойИнтерфейс.Имя = "ИнтерфейсКассира") или (РаботникШиномонтажа=истина) Тогда //Задействуем интерфейс кассира
	//Если ЭтоНовый() Тогда 	
		СуммаДокументаПриИзменении();
	//КонецЕсли;
		
	КонецЕсли; 

	//+++ 06.11.2015
	//Если ПроверенМенеджером и не яштАдминистративныеФункцииДоступны() и Константы.ОплатыРаспределяютМенеджеры.Получить() Тогда
	Если не ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"РазрешитьОткрыватьКассовыеДокументы") тогда 
		ЭлементыФормы.Список.Доступность=ЛОЖЬ;
		ЭлементыФормы.КоманднаяПанельПлатежи.Доступность=ЛОЖЬ;
      	ЭтаФорма.ТолькоПросмотр = Истина;
	КонецЕсли;	
	
    
	//БАЛАНС (04.12.2007)                       
	//
	мПроведениеИзФормы = Истина;
	
	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 

	//+++ 10.05.2012
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"УчетТолькоПоПодразделениюПользователя") тогда
		
		// не отражаем и не даем менять!
		ОтражатьВБухгалтерскомУчете = ложь;
		ОтражатьВНалоговомУчете = ложь;
		ЭлементыФормы.ОтражатьВБухгалтерскомУчете.Доступность = ложь;
		ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ложь;
		
		ЭлементыФормы.Организация.Доступность = ложь;
		// А.А. отбор по кассам перенесен в форму выбора кассы 15.09.15
		//ЭлементыФормы.Касса.Доступность = ложь;
		ЭлементыФормы.ПодразделениеКомпании.Доступность = ложь;
		
	КонецЕсли;	
	
	
КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()


	ЭлементыФормы.ИнфНадписьКурса.Заголовок = ПолучитьИнформациюКурсаВалютыСтрокой(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
																					 СтрокаПлатеж.КурсВзаиморасчетов,
																					 СтрокаПлатеж.КратностьВзаиморасчетов,
																					 мВалютаРегламентированногоУчета,
																					 Истина);
	НадписьВалютаДокумент=СокрЛП(ВалютаДокумента);
	
	Если Не ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
				
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			ТекстКурсаЗаявки= ПолучитьИнформациюКурсаВалютыСтрокой(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
							 СтрокаПлатеж.КурсВзаиморасчетовПлан,
							 СтрокаПлатеж.КратностьВзаиморасчетов,
							 мВалютаРегламентированногоУчета,
							 Истина);
							 
			ЭлементыФормы.ИнфНадписьКурсаЗаявки.Заголовок=ТекстКурсаЗаявки;
			
		КонецЕсли;
																						 
	КонецЕсли;

	// Установим заголовки по значению поля "Контрагент" 
	// (это или контрагент или подотчетник или КассаККМ).
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда

		// Надпись реквизита "Сделка".
		НадписьСделка = "Сделка";
		Если Не ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента)Тогда
			Если СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
				НадписьСделка = "Расчетный документ:";
			Иначе
				Если ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
					НадписьСделка = "Заказ покупателя:";
				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком Тогда
					НадписьСделка = "Заказ поставщику:";
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;

		ЭлементыФормы.НадписьСделка.Заголовок = НадписьСделка;

		// Надпись НадписьСуммаВзаиморасчетов
		ВалютаВзаиморасчетовПоДоговору = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		Если ЗначениеНеЗаполнено(ВалютаВзаиморасчетовПоДоговору) Тогда
			НадписьСуммаВзаиморасчетов = "Сумма <нет валюты>:";
		Иначе	
			НадписьСуммаВзаиморасчетов = "Сумма " + СокрЛП(ВалютаВзаиморасчетовПоДоговору) + ":";
		КонецЕсли;			

	ИначеЕсли ТипЗнч(Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда

		// Надпись НадписьСуммаВзаиморасчетов
		Если ЗначениеНеЗаполнено(ВалютаВзаиморасчетовПодотчетника) Тогда
			НадписьСуммаВзаиморасчетов = "Сумма <нет валюты>:";
		Иначе
			НадписьСуммаВзаиморасчетов = "Сумма " + СокрЛП(ВалютаВзаиморасчетовПодотчетника) + ":";
		КонецЕсли;

	КонецЕсли;
	
	ЭлементыФормы.НадписьИтогоСписок.Заголовок="Итого платежей по списку: "+
									Формат(РасшифровкаПлатежа.Итог("СуммаПлатежа"),"ЧЦ=15; ЧДЦ=2; ЧН=Ноль")+
									" "+СокрЛП(ВалютаДокумента.Наименование);
									
	НадписьНомерЧека = ?(НомерЧекаККМ=0,"",
	                   ?(НомерЧекаККМ>0,"Номер чека на ККМ: "+СокрЛП(НомерЧекаККМ),
	                                    "Чек на ККМ пробит"));
 ЭлементыФормы.ИтогоЗатрат.Заголовок=?( не Списком2,Затраты.Итог("Сумма"),?(СтатьяЗатрат.Пустая(),0,СуммаДокумента));																																					
 ЭлементыФормы.ПанельОболочка.Страницы["Затраты"].Видимость=ЭлементыФормы.ОтражатьВЗатратах.Значение;
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
		
		Если Вопрос("Не совпадают сумма документа и ее расшифровка. Пересчитать сумму документа?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			
			СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НапечататьДокументПоУмолчанию(ЭтотОбъект, глТекущийПользователь, мПечатнаяФормаПоУмолчанию);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура вызывается при нажатии кнопки "Чек" командной панели формы,
// вызывает печать на фискальном регистраторе.
//
Процедура ОсновныеДействияФормыЧек(Кнопка)
	Перем РезультатВыбора, Ответ;
	//Проверим кассу, можно ли по ней пробивать
	КассаРазрешена = КассаРазрешена(Касса);
	
	Если не КассаРазрешена тогда
		Предупреждение("Для выбраной кассы не предусмотрено пробитие чеков!",60);
		Возврат;
	КонецЕсли;

	Если НомерЧекаККМ <> 0 Тогда
		Предупреждение("Чек уже пробит на фискальном регистраторе!",60);
		Возврат;
	ИначеЕсли глТорговоеОборудование = Неопределено Тогда
		Предупреждение("Торговое оборудование не подключено!",60);
		Возврат;
	ИначеЕсли глТорговоеОборудование.млФР.Количество() = 0 и глТорговоеОборудование.млККТ.Количество() = 0 Тогда
		Предупреждение("Фискальный регистратор не подключен",60);
		Возврат;
	КонецЕсли;

	СписокФР = Новый СписокЗначений;
	Для Каждого ФР из глТорговоеОборудование.млФР Цикл
		Если ФР.КассаККМ.Владелец=Организация Тогда
			СписокФР.Добавить(ФР, ФР.КассаККМ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ФР из глТорговоеОборудование.млККТ Цикл
		Если ФР.КассаККМ.Владелец=Организация и Фр.КассаККМ = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяКассаККМ") Тогда
			СписокФР.Добавить(ФР, ФР.КассаККМ);
		КонецЕсли;
	КонецЦикла;


	Если СписокФР.Количество() = 0 Тогда
		Предупреждение("Фискальный регистратор, предназначенный для
		               |отражения наличных денежных расчетов, не подключен",60);
		Возврат;
	КонецЕсли;

	Если ПометкаУдаления Тогда
		Предупреждение("Документ помечен на удаление, поэтому
		               |нельзя пробить чек на фискальном регистраторе!",60);
		Возврат;
	ИначеЕсли НЕ Проведен Тогда

		Если Вопрос("Провести документ и пробить чек на фискальном регистраторе?",
		            РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;

		Попытка
			Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Возврат;
		КонецПопытки;

		Если Не Проведен Тогда
			Возврат;
		КонецЕсли;

	ИначеЕсли Модифицированность() Тогда
		Если Вопрос("Сохранить документ и пробить чек на фискальном регистраторе?",
		            РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;

		Попытка
			Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Возврат;
		КонецПопытки;

	КонецЕсли;

	СписокТовар = Новый ТаблицаЗначений;
	СписокТовар.Колонки.Добавить("Товар");
	СписокТовар.Колонки.Добавить("Цена");
	СписокТовар.Колонки.Добавить("Колво");
	СписокТовар.Колонки.Добавить("Скидка");
	СписокТовар.Колонки.Добавить("НДС");

	СуммаДокументаВВалютеРегУчета = ПересчитатьИзВалютыВВалюту(СуммаДокумента,
	                                           ВалютаДокумента, мВалютаРегламентированногоУчета,
	                                           КурсДокумента, 1,
	                                           КратностьДокумента, 1);

	Стр = СписокТовар.Добавить();
	Стр.Товар  = ?(ПустаяСтрока(ПринятоОт),"","Принято от ")+СокрЛП(СокрЛП(ПринятоОт)+" "+СокрЛП(Основание));
	Стр.Цена   = СуммаДокументаВВалютеРегУчета;
	Стр.Колво  = 1;
	Если СтрокаПлатеж.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		Стр.НДС    = 0;
	ИначеЕсли СтрокаПлатеж.СтавкаНДС = Перечисления.СтавкиНДС.НДС10 
	      ИЛИ СтрокаПлатеж.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		Стр.НДС    = 10;
	ИначеЕсли СтрокаПлатеж.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 
	      ИЛИ СтрокаПлатеж.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		Стр.НДС    = 18;
	ИначеЕсли СтрокаПлатеж.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 
	      ИЛИ СтрокаПлатеж.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
		Стр.НДС    = 20;
	КонецЕсли;

	// Параметры фискального регистратора
	// Попытка получить номер секции
	Если (ТипЗнч(ДокументОснование) = ТипЗнч(Документы.ЗаказПокупателя.ПустаяСсылка())) Тогда 
		Если (ДокументОснование.Склад<>Справочники.Склады.ПустаяСсылка()) Тогда 
			НомерСекцииЗаказ = ДокументОснование.Склад.НомерСекции;
		Иначе 
			НомерСекцииЗаказ = 1;
		Конецесли;
	Иначе 
		НомерСекцииЗаказ = 1
	КонецЕсли;
	Параметры = Новый Структура();
	Параметры.Вставить("СписокТоваров", СписокТовар                  );
	Параметры.Вставить("Получено"     , СуммаДокументаВВалютеРегУчета);
	Параметры.Вставить("Скидка"       , 0                            );
	Параметры.Вставить("ЧекНаВозврат" , ЛОЖЬ                         );
	Параметры.Вставить("НомерСекции"  , НомерСекцииЗаказ             );

	Если СписокФР.Количество() = 1 Тогда
		РезультатВыбора = СписокФР[0];
	Иначе
		РезультатВыбора = СписокФР.ВыбратьЭлемент("Выберите фискальный регистратор");
		Если РезультатВыбора = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//20.07.17 печать на ККТ
	ВидКассы = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент.ПолучитьВидКассы(РезультатВыбора.Значение.КассаККМ, ИмяКомпьютера());
	Если ВидКассы = Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор тогда
		глТорговоеОборудование.ПечататьЧекДляПКО(РезультатВыбора, Параметры, Ответ);
	ИначеЕсли ВидКассы = Перечисления.ВидыТорговогоОборудования.ККТсПередачейДанных тогда
		ОписаниеПКС = КассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(РезультатВыбора.Значение.КассаККМ);
		Если ОписаниеПКС = Неопределено ИЛИ ОписаниеПКС.Статус = Перечисления.СтатусыКассовойСмены.Закрыта Тогда
			Сообщить("Кассовая смена не открыта");
			Возврат;
		КонецЕсли;
		
		ПараметрыЧека = Неопределено;
		ПодготовитьДанныеДляФискализацииЧекаПКО(Ссылка, ПараметрыЧека,РезультатВыбора.Значение.КассаККМ,Параметры);
		
		ОбъектДрайвера = Неопределено;
		ОбработкаОбслуживания = Неопределено;
		
		ИскомаяСтрока = глТорговоеОборудование.млККТ.Найти(РезультатВыбора.Значение.КассаККМ, "КассаККМ");
		ОбъектДрайвера = ИскомаяСтрока.Объект;
		
		ФормаОбработки = глТорговоеОборудование.ПолучитьФормуОбработки(ИскомаяСтрока.Модель.ОбработкаОбслуживания);
		
		ОшибкаТО = ФормаОбработки.ФискализироватьЧек(ОбъектДрайвера, ПараметрыЧека);
		Если ЗначениеЗаполнено(ОшибкаТО) Тогда
			Сообщить(ОбъектДрайвера.ОписаниеОшибки);
			Если ЗначениеЗаполнено(ОбъектДрайвера.ВыходныеПараметры[1]) И ОбъектДрайвера.ВыходныеПараметры[1] >0  Тогда
				ЭтотОбъект.НомерЧекаККМ = ОбъектДрайвера.ВыходныеПараметры[1];
            КонецЕсли;
			Возврат;
		Иначе
			ЭтотОбъект.НомерЧекаККМ = ОбъектДрайвера.ВыходныеПараметры[1];
		КонецЕсли;
	КонецЕсли;
		 
	
	Если ПустаяСтрока(Ответ) Тогда
		Если ВидКассы = Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор тогда
			Параметры.Свойство("НомерЧека", НомерЧекаККМ);

			НомерЧекаККМ = ?(НомерЧекаККМ = 0, -1, НомерЧекаККМ);
		КонецЕсли;
		//мСтрокаФР = глТорговоеОборудование.млФР.Найти(РезультатВыбора, "Модель");
		КассаККМ = РезультатВыбора.Значение.КассаККМ;
		Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;

КонецПроцедуры

Функция КассаРазрешена(выбКасса)
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
				 |	СоответствиеСкладуОрганизацииИКассыККМ.КассаККМ,
				 |	СоответствиеСкладуОрганизацииИКассыККМ.Компьютер,
				 |	СоответствиеСкладуОрганизацииИКассыККМ.Касса
				 |ИЗ
				 |	РегистрСведений.СоответствиеСкладуОрганизацииИКассыККМ КАК СоответствиеСкладуОрганизацииИКассыККМ
				 |ГДЕ
				 |	СоответствиеСкладуОрганизацииИКассыККМ.Компьютер = &Компьютер
				 |	И СоответствиеСкладуОрганизацииИКассыККМ.Касса = &Касса
				 |	И СоответствиеСкладуОрганизацииИКассыККМ.КассаККМ <> ЗНАЧЕНИЕ(Справочник.КассыККМ.пустаяссылка)";
				 Запрос.УстановитьПараметр("Компьютер",ИмяКомпьютера());
				 Запрос.УстановитьПараметр("Касса",выбКасса);
				 Рез = Запрос.Выполнить().Выбрать();
				 Если Рез.Количество()>0 тогда
					 Возврат истина;
				 КонецЕсли;
Возврат ложь;	
КонецФункции

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		Если ВидОперации = Перечисления.ВидыОперацийПКО[Кнопка.Имя] Тогда
			Возврат;
		КонецЕсли; 
		ВидОперации = Перечисления.ВидыОперацийПКО[Кнопка.Имя];
	Иначе
		Возврат;
	КонецЕсли;
	
	РасшифровкаПлатежа.Очистить();
	СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
	
	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
	
	УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);

	// Отобразить в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда

		Если ЗначениеНеЗаполнено(ВалютаВзаиморасчетовПодотчетника) Тогда
			Если ОтражатьВБухгалтерскомУчете Тогда
				ВалютаВзаиморасчетовПодотчетника = мВалютаРегламентированногоУчета;
			Иначе
				ВалютаВзаиморасчетовПодотчетника = ВалютаДокумента;
			КонецЕсли;
			ПриИзмененииВалютыПодотчетника();
		КонецЕсли;

	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка 
		И НЕ Касса.ВалютаДенежныхСредств=мВалютаРегламентированногоУчета Тогда
		
		Сообщить("Прием розничной выручки производится только в валюте регламентированного учета.");
		СуммаДокумента=0;
		СтрокаПлатеж.СуммаПлатежа=0;
		
		Касса=Справочники.Кассы.ПустаяСсылка();
			
	КонецЕсли;

	УстановитьФокус();
	
	ЕстьРасчетыСКонтрагентами=ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=ЕстьРасчетыПоКредитам(ВидОперации);
	
	Если ОтражатьВБухгалтерскомУчете Тогда

		Если Не ЗначениеНеЗаполнено(Касса) Тогда
			ВалютаВзаиморасчетовПодотчетника=Касса.ВалютаДенежныхСредств;
		Иначе
			ВалютаВзаиморасчетовПодотчетника = мВалютаРегламентированногоУчета;
		КонецЕсли;
		
		ПриИзмененииВалютыПодотчетника();

	КонецЕсли;

	УстановитьВидимость();

	//Надо определить тип поля "Контрагент"
	УстановитьТипКонтрагент();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
//
Процедура ДействияФормыДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		
		Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
			
			Если Вопрос("Не совпадают сумма документа и ее расшифровка. Пересчитать сумму документа?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
				
				СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
				
			Иначе
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = Кнопка.Текст;
		СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		СписокМакетов = ПолучитьСписокПечатныхФорм();
		СтрокаМакетаВСписке = СписокМакетов.НайтиПоЗначению(Кнопка.Имя);
		Если СтрокаМакетаВСписке <> Неопределено Тогда
			Печать(СтрокаМакетаВСписке.Значение);
			СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
			СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;			
			
		Иначе
			СсылкаВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Кнопка.Имя, "_", "-")));
			Печать(СсылкаВнешнейФормы);
			СтруктураМакета.Макет = СсылкаВнешнейФормы;
			СтруктураМакета.ПредставлениеМакета = Кнопка.Текст;
		КонецЕсли;		
		
		мПечатнаяФормаПоУмолчанию = СтруктураМакета.Макет;
		СохранитьТекущуюКнопкуПечати(ЭтотОбъект.Метаданные().Имя, СтруктураМакета);
		
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	УстановитьКурсДокумента();
	РассчитатьСуммуВзаиморасчетов();
	
КонецПроцедуры // ДатаПриИзменении()

// Рассчитывает новый курс документа при смене даты
//
Процедура УстановитьКурсДокумента()
	
	СтруктураКурсаВалютаДокумента = ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
	КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;
	
КонецПроцедуры // УстановитьКурсДокумента()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ОтражатьВНалоговомУчете=ОтражатьВБухгалтерскомУчете;
	УстановитьВидимость();

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьНомерДокумента(ЭтотОбъект);

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// проставим основной договор контрагента
	ПриИзмененииКонтрагента();
	ПриИзмененииДоговора();
	УстановитьФокус();

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Обработчик события "НачалоВыбора" реквизита "ДоговорКонтрагента"
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
				ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "Нажатие" надписи о счете-фактуре.
//   Процедура выполняет либо ввод нового счета-фактуры, либо открывает
// форму уже существующего счета-фактуры, если тот был введен на основании
// текущего документа.
//
Процедура ГиперссылкаСчетФактураНажатие(Элемент)

	ВвестиСчетФактуру(ЭтотОбъект, ЭтаФорма, "СчетФактураВыданный");

КонецПроцедуры // ГиперссылкаСчетФактураНажатие()

// Процедура - обработчик события "НачалоВыбора" поля ввода "КурсВзаиморасчетов".
//
Процедура КурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;

	РассчитатьСуммуПлатежа();

КонецПроцедуры // КурсВзаиморасчетовНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Сделка".
//
Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	ПараметрыВыбора=ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, 
	                     ПараметрыВыбора.ВидДвиженияРасчеты, ПараметрыВыбора.ТипЗаказа);
					
КонецПроцедуры // СделкаНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "КурсВзаиморасчетовПодотчетник".
//
Процедура КурсВзаиморасчетовПодотчетникНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если ЗначениеНеЗаполнено(ВалютаВзаиморасчетовПодотчетника) Тогда
		Предупреждение("Не выбрана валюта взаиморасчетов подотчетника."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = ВалютаВзаиморасчетовПодотчетника;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;
					   
	РассчитатьСуммуВзаиморасчетов();

КонецПроцедуры // КурсВзаиморасчетовПодотчетникНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "КурсВзаиморасчетов".
// Процедура выполняет пересчет реквизитов при изменении курса взаиморасчетов
// с подотчетником
//
Процедура КурсВзаиморасчетовПодотчетникПриИзменении(Элемент)

	РассчитатьСуммуПлатежа();

КонецПроцедуры // КурсВзаиморасчетовПодотчетникПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "ВалютаВзаиморасчетовПодотчетника".
//
Процедура ВалютаВзаиморасчетовПодотчетникаПриИзменении(Элемент)

	РасчетныйДокумент=Документы.АвансовыйОтчет.ПустаяСсылка();	
	ПриИзмененииВалютыПодотчетника();

КонецПроцедуры // ВалютаВзаиморасчетовПодотчетникаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаВзаиморасчетовПодотчетник".
// Процедура выполняет пересчет реквизитов при изменении суммы взаиморасчетов 
// с подотчетником.
//
Процедура СуммаДокументаРасчетыПриИзменении(Элемент)
	
	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
	Если СтрокаПлатеж.СуммаВзаиморасчетов=0 Тогда
		РассчитатьСуммуВзаиморасчетов();
	Иначе			
		РассчитатьКурсВзаиморасчетов();
	КонецЕсли;
		
КонецПроцедуры // СуммаВзаиморасчетовПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "РасходныйКассовыйОрдер".
// Процедура фильтрует список документов по выбранным значениям.
//
Процедура РасчетныйДокументНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.РасчетныйДокумент КАК Документ,
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаОстаток
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(&Дата, ФизЛицо = &ФизЛицо) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
	|ГДЕ
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток > 0
	|	И ВзаиморасчетыСПодотчетнымиЛицамиОстатки.РасчетныйДокумент ССЫЛКА Документ.РасходныйКассовыйОрдер";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ФизЛицо", Контрагент);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Выбор= Результат.ВыбратьСтроку("Документы расчетов",);
	Если Выбор <> Неопределено Тогда
		РасчетныйДокумент = Выбор.Документ;
	конецЕсли;	
	
	
	
	
	//// В качестве владельца формы выбора устанавливаем данный элемент,
	//// чтобы выбранное значение было присвоено стандартно.
	//ФормаВыбора = Документы["РасходныйКассовыйОрдер"].ПолучитьФормуВыбора(,Элемент,);
	//
	//// Отфильтруем список документов по Виду Операции.
	//ФормаВыбора.Отбор.ВидОперации.Значение      = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику;
	//ФормаВыбора.Отбор.ВидОперации.Использование = Истина;
	//ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ВидОперации.Доступность=Ложь;
	//
	//// Отфильтруем список документов по Валюте взаиморасчетов, если она выбрано.
	//Если Не ЗначениеНеЗаполнено(ВалютаВзаиморасчетовПодотчетника) Тогда
	//	ФормаВыбора.Отбор.ВалютаВзаиморасчетовПодотчетника.Значение      = ВалютаВзаиморасчетовПодотчетника;
	//	ФормаВыбора.Отбор.ВалютаВзаиморасчетовПодотчетника.Использование = Истина;
	//	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ВалютаВзаиморасчетовПодотчетника.Доступность=Ложь;
	//КонецЕсли; 
	//
	//// Отфильтруем список документов по ФизЛицу, если оно выбрано.
	//Если Не ЗначениеНеЗаполнено(Контрагент) Тогда
	//	ФормаВыбора.Отбор.Контрагент.Значение      = Контрагент;
	//	ФормаВыбора.Отбор.Контрагент.Использование = Истина;
	//	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Контрагент.Доступность=Ложь;
	//КонецЕсли; 
	//
	//Если НЕ ЗначениеНеЗаполнено(Организация) Тогда
	//	ФормаВыбора.ДокументСписок.Отбор.Организация.Значение = Организация;
	//	ФормаВыбора.ДокументСписок.Отбор.Организация.Использование = Истина;
	//	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность=Ложь;
	//КонецЕсли;
	//
	//Если Не ЗначениеНеЗаполнено(Элемент.Значение) Тогда
	//	
	//	ФормаВыбора.ПараметрТекущаяСтрока=Элемент.Значение;
	//	
	//КонецЕсли;
	//
	//ФормаВыбора.РежимВыбора = Истина;
	//ФормаВыбора.Открыть();
	
КонецПроцедуры // РасходныйКассовыйОрдерНачалоВыбора

// Процедура - обработчик события "ПриИзменении" поля ввода "РасходныйКассовыйОрдер".
// Процедура заполнение пустых полей на основании выбранного РКО.
//
Процедура РасчетныйДокументПриИзменении(Элемент)
	
	Если ЗначениеНеЗаполнено(РасчетныйДокумент) Тогда
		Возврат;
	КонецЕсли;

	Если Элемент.Значение.Метаданные().Имя="РасходныйКассовыйОрдер" Тогда
		
		Контрагент                       = РасчетныйДокумент.Контрагент;
		Организация                       = РасчетныйДокумент.Организация;
		ВалютаВзаиморасчетовПодотчетника = РасчетныйДокумент.ВалютаВзаиморасчетовПодотчетника;
		СтруктураКурса                   = ПолучитьКурсВалюты(ВалютаВзаиморасчетовПодотчетника, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов               = СтруктураКурса.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов          = СтруктураКурса.Кратность;
		
		ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(СтрокаПлатеж);
		
		Если НЕ ВалютаДокумента=ВалютаВзаиморасчетовПодотчетника Тогда
			ОтражатьВБухгалтерскомУчете=Ложь;
			ОтражатьВНалоговомУчете=Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимость();
		
КонецПроцедуры // РасходныйКассовыйОрдерПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода"Касса". 
// Процедура устанавливает валюту документа, и предлагает пересчитать сумму документа.
//
Процедура КассаПриИзменении(Элемент)

	ПриИзмененииЗначенияКассыБанковскогоСчета(ВалютаДокумента, КурсДокумента, КратностьДокумента, Дата, СуммаДокумента, Касса.ВалютаДенежныхСредств);
	
	// Пересчитаем суммы платежей при изменении валюты
	
	Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) Тогда
		
		Для Каждого Строка Из РасшифровкаПлатежа Цикл
			
			ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			
			Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
				Строка.СуммаПлатежа=Строка.СуммаВзаиморасчетов;
				
			ИначеЕсли (КурсДокумента <> 0) И (Строка.КратностьВзаиморасчетов <> 0) И (Строка.КурсВзаиморасчетов <> 0) Тогда
				Строка.СуммаПлатежа=ПересчитатьИзВалютыВВалюту(Строка.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
				ВалютаДокумента,
				Строка.КурсВзаиморасчетов,КурсДокумента,
				Строка.КратностьВзаиморасчетов,КратностьДокумента);	
			Иначе
				Строка.СуммаПлатежа = 0;
			КонецЕсли;
					
			ПересчитатьСуммуНДС(Строка);
			
			Если Не ЗначениеНеЗаполнено(Строка.ДокументПланированияПлатежа) Тогда
				
				ВалютаПлатежаПлан=Строка.ДокументПланированияПлатежа.ВалютаДокумента;
				Если НЕ (ВалютаПлатежаПлан=Справочники.Валюты.ПустаяСсылка() ИЛИ ВалютаПлатежаПлан=ВалютаДокумента) Тогда
					Строка.ДокументПланированияПлатежа="";
					Строка.КурсВзаиморасчетовПлан=0;
					Строка.СуммаПлатежаПлан=0;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;	
		
		СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
		
		ВалютаВзаиморасчетов= ВалютаВзаиморасчетовПодотчетника;
		
		Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
			СтрокаПлатеж.СуммаПлатежа=СтрокаПлатеж.СуммаВзаиморасчетов;
			
		ИначеЕсли (КурсДокумента <> 0) И (СтрокаПлатеж.КратностьВзаиморасчетов <> 0) И (СтрокаПлатеж.КурсВзаиморасчетов <> 0) Тогда
			СтрокаПлатеж.СуммаПлатежа=ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
			ВалютаДокумента,
			СтрокаПлатеж.КурсВзаиморасчетов,КурсДокумента,
			СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);	
		Иначе
			СтрокаПлатеж.СуммаПлатежа = 0;
		КонецЕсли;
		
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
		
		Если Не ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
			
			ВалютаПлатежаПлан=СтрокаПлатеж.ДокументПланированияПлатежа.ВалютаДокумента;	
			Если НЕ (ВалютаПлатежаПлан=Справочники.Валюты.ПустаяСсылка() ИЛИ ВалютаПлатежаПлан=ВалютаДокумента) Тогда
				СтрокаПлатеж.ДокументПланированияПлатежа="";
				СтрокаПлатеж.КурсВзаиморасчетовПлан=0;
				СтрокаПлатеж.СуммаПлатежаПлан=0;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если Не ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
			
			ВалютаПлатежаПлан=СтрокаПлатеж.ДокументПланированияПлатежа.ВалютаДокумента;	
			Если НЕ (ВалютаПлатежаПлан=Справочники.Валюты.ПустаяСсылка() ИЛИ ВалютаПлатежаПлан=ВалютаДокумента) Тогда
				СтрокаПлатеж.ДокументПланированияПлатежа="";
				СтрокаПлатеж.КурсВзаиморасчетовПлан=0;
				СтрокаПлатеж.СуммаПлатежаПлан=0;
			КонецЕсли;
			
		КонецЕсли;
		
		СуммаДокументаПриИзменении();
		
	КонецЕсли;
	
	УстановитьФокус();
	УстановитьВидимость();
	
	Если ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником 
		И (НЕ ВалютаДокумента=ВалютаВзаиморасчетовПодотчетника) Тогда
		ОтражатьВБухгалтерскомУчете=Ложь;
		ОтражатьВНалоговомУчете=Ложь;
	КонецЕсли;
	
	Если (Не СчетОрганизации.Пустая()) И (НЕ СчетОрганизации.ВалютаДенежныхСредств=Касса.ВалютаДенежныхСредств) Тогда
		Если ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
		Сообщить("Валюта счета организации не соответствует валюте кассы.");
		КонецЕсли;
		СчетОрганизации=Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры // КассаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода
// "ВалютаДокумента". Процедура выдает предупреждение,
// объясняющее почему валюту документа нельзя выбирать произвольно.
//
Процедура ВалютаДокументаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Предупреждение("Валюта документа устанавливается при выборе кассы компании."
	               + Символы.ПС + "Вручную изменять валюту запрещено.");

КонецПроцедуры // ВалютаДокументаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода"СуммаДокумента". 
// Процедура при виде операции "возврат денег подотчетником" 
// заполняет сумму взаиморасчетов с подотчетником.
//
Процедура СуммаПлатежаПриИзменении(Элемент)

	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		
	КонецЕсли;
	
	РассчитатьСуммуВзаиморасчетов();

КонецПроцедуры // СуммаДокументаПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ФизЛицо".
//
Процедура ФизЛицоПриИзменении(Элемент)
	
	Если ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
		РасчетныйДокумент=Документы.РасходныйКассовыйОрдер.ПустаяСсылка();
	Иначе
		РасчетныйДокумент=Документы.ДоговорЗаймаСРаботником.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ ЗначениеНеЗаполнено(Контрагент) Тогда
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		             |	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
		             |	ФИОФизЛицСрезПоследних.Имя КАК Имя,
		             |	ФИОФизЛицСрезПоследних.Отчество КАК Отчество
		             |ИЗ
		             |	РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо=&ФизЛицо) КАК ФИОФизЛицСрезПоследних";
		Запрос.УстановитьПараметр("Дата",Дата);
		Запрос.УстановитьПараметр("ФизЛицо",Контрагент);
		
		Результат=Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			ПринятоОт = ?(НЕ ПустаяСтрока(Результат.Фамилия), 
				Результат.Фамилия + ?(НЕ ПустаяСтрока(Результат.Имя)," " + Результат.Имя + " " + ?(НЕ ПустаяСтрока(Результат.Отчество),Результат.Отчество, ""), ""),"");
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура СуммаДокументаПодотчетникПриИзменении(Элемент)
	
	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
	
	Если СтрокаПлатеж.СуммаВзаиморасчетов=0 Тогда
		РассчитатьСуммуВзаиморасчетов();
	Иначе			
		РассчитатьКурсВзаиморасчетов();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если Константы.ОплатыРаспределяютМенеджеры.Получить() и ВидОперации=Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		и не ЗначениеНеЗаполнено(Контрагент) и  РежимЗаписи=РежимЗаписиДокумента.Проведение  Тогда // и РежимЗаписи
		
		Отказ = не ПроверитьЗакрытиеДоговоровПенейИУслуг();
		
	КонецЕсли;

	

	Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
		
		Если Вопрос("Не совпадают сумма документа и ее расшифровка. Пересчитать сумму документа?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			
			СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
			
		Иначе
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Ответственный.Пустая() Тогда
		Ответственный     = глТекущийПользователь;
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		ДоговорКонтрагента=СтрокаПлатеж.ДоговорКонтрагента;

		Если СтрокаПлатеж.СтатьяДвиженияДенежныхСредств.Пустая() Тогда
			СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=СтатьяДвиженияДенежныхСредств;
		КонецЕсли;

	Иначе
		ДоговорКонтрагента=Новый(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	КонецЕсли;
	
	яштСменаПользователя(ЭтотОбъект, ЭтаФорма, глТекущийПользователь);
	
	ИтогоЗатрат=?( не Списком2,Затраты.Итог("Сумма"),?(СтатьяЗатрат.Пустая(),0,СуммаДокумента));
	
	//Адиянов<<<
	Если Не Отказ Тогда 
		
		Отказ = ПроверитьДоговорИВидОперации();
		
	КонецЕсли;
	//Адиянов>>>
КонецПроцедуры

//Адиянов
//Проверка в документе вида операции и договора
//Записать документ можно если операция "Оплата от покупателя" и в договоре есть "*".
//Задание Яковлевой Н. от 14.10.2016
Функция ПроверитьДоговорИВидОперации()
	
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда  
		Если Найти(ДоговорКонтрагента.Наименование,"*") = 0 Тогда 
			
			#Если Клиент Тогда
				Сообщить("ПКО можно провести только с договором со ""*""(звездой) ");
			#КонецЕсли
			Возврат Истина;
			
		КонецЕсли;
	КонецЕсли;
		 
	Возврат Ложь;
	
КонецФункции

Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)
	
	Если Не Элемент.Значение Тогда
		ОтраженоВОперУчете=Ложь;
		Оплачено=Ложь;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура СчетОрганизацииПриИзменении(Элемент)
	
	ПриИзмененииСчетаОрганизации();
	
КонецПроцедуры

Процедура КурсВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура СтавкаНДСПриИзменении(Элемент)
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

Процедура СуммаДокументаПриИзменении()
	
	Если ИнвертироватьСуммы Тогда
		
		РассчитатьСуммуПлатежа();
		
		Если СтрокаПлатеж.КурсВзаиморасчетовПлан>0 Тогда
			РассчитатьСуммуПлатежаПлан();
		КонецЕсли;
		
	Иначе
		
		Если РасшифровкаПлатежа.Количество()=1 Тогда
			
			СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
			
			Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
				
				ПересчитатьСуммуНДС(СтрокаПлатеж);
				
				Если СтрокаПлатеж.СуммаВзаиморасчетов=0 Тогда
					РассчитатьСуммуВзаиморасчетов();
				Иначе			
					РассчитатьКурсВзаиморасчетов();
				КонецЕсли;
				
			ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
				
				Если СтрокаПлатеж.СуммаВзаиморасчетов=0 Тогда
					РассчитатьСуммуВзаиморасчетов();
				Иначе			
					РассчитатьКурсВзаиморасчетов();
				КонецЕсли;
				
			Иначе
				
				Если Не ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
					
					СтрокаПлатеж.СуммаПлатежаПлан=СуммаДокумента;
							
				КонецЕсли;
				
				СтрокаПлатеж.СуммаВзаиморасчетов=СуммаДокумента;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокПриИзменении(Элемент)
	
	Если Не Список И РасшифровкаПлатежа.Количество()>1 Тогда
		
		ТекстВопроса = "Все строки расшифровки платежа, кроме первой, будут удалены.
		|Продолжить?";
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Список=Истина;
			Возврат;
		КонецЕсли;
		
		Пока РасшифровкаПлатежа.Количество()>1 Цикл
			СтрокаУдаления=РасшифровкаПлатежа[1];
			РасшифровкаПлатежа.Удалить(СтрокаУдаления);
		КонецЦикла;
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
		СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		РассчитатьСуммуВзаиморасчетов();
		
	Иначе
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
		СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
	КонецЕсли;		
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговора();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
				ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);

КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);	
	РассчитатьКурсВзаиморасчетов();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;

	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПараметрыВыбора=ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, 
	                     ПараметрыВыбора.ВидДвиженияРасчеты, ПараметрыВыбора.ТипЗаказа);
					
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
		
	РассчитатьСуммуПлатежа();
	
	Если СтрокаПлатеж.КурсВзаиморасчетовПлан>0 Тогда
		РассчитатьСуммуПлатежаПлан();
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПриАктивизацииСтроки(Элемент)
	
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		Отказ=Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗначениеПриВыборе(ИсходноеЗначение,ЗначениеВыбора)
	
	Если ЗначениеНеЗаполнено(ИсходноеЗначение) Тогда
		ИсходноеЗначение=ЗначениеВыбора;
	КонецЕсли;
		
КонецПроцедуры // УстановитьЗначениеПриВыборе() 

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если НЕ ТипЗнч(ЗначениеВыбора)=Тип("Структура") Тогда
		
		Если ЗначениеВыбора="АвтоПодбор" Тогда
			
			Если РасшифровкаПлатежа.Количество()>1 Тогда
				Список=истина;
			ИначеЕсли РасшифровкаПлатежа.Количество()=0 Тогда
				Список=Ложь;
				НоваяСтрока=РасшифровкаПлатежа.Добавить();			
			КонецЕсли;
			
			СтрокаПлатеж=РасшифровкаПлатежа[0];
						
			УстановитьФокус();
			
			УстановитьВидимость();

			СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
			
			Возврат;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
			
	ИначеЕсли Источник.КлючУникальности="ФормаПодбораПланируемыхПлатежей" Тогда
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда	
				
				НДСПоУмолчанию=ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяСтавкаНДС");
				
				СтрокаПлатеж.ДоговорКонтрагента=ЗначениеВыбора.ДоговорКонтрагента;
				ПриИзмененииДоговора();
				
			КонецЕсли;
			
			СтрокаПлатеж.КурсВзаиморасчетовПлан=ЗначениеВыбора.КурсВзаиморасчетов;
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.Сделка,ЗначениеВыбора.Сделка);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.КурсВзаиморасчетов,ЗначениеВыбора.КурсВзаиморасчетов);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.КратностьВзаиморасчетов,ЗначениеВыбора.КратностьВзаиморасчетов);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СуммаВзаиморасчетов,ЗначениеВыбора.СуммаВзаиморасчетов);
			
			Если СтрокаПлатеж.СуммаПлатежа=ЗначениеВыбора.СуммаПлатежа 
				ИЛИ СтрокаПлатеж.СуммаПлатежа=0 Тогда
				
				СтрокаПлатеж.СуммаПлатежа=ЗначениеВыбора.СуммаПлатежа;
				СтрокаПлатеж.СуммаПлатежаПлан=ЗначениеВыбора.СуммаПлатежаПлан;
				
			ИначеЕсли СтрокаПлатеж.КурсВзаиморасчетовПлан>0 Тогда
				
				РассчитатьСуммуПлатежаПлан();
				
			КонецЕсли;
										
			ЗаполнитьРеквизитыРеглУчета(СтрокаПлатеж,Организация, Контрагент, НДСПоУмолчанию);
		
			СтрокаПлатеж.ДокументПланированияПлатежа=ЗначениеВыбора.ДокументПланирования;
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СтатьяДвиженияДенежныхСредств,ЗначениеВыбора.СтатьяДвиженияДенежныхСредств);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.Проект,ЗначениеВыбора.Проект);
			
		Иначе
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СуммаПлатежа,ЗначениеВыбора.СуммаПлатежа);
			
			СтрокаПлатеж.ДокументПланированияПлатежа=ЗначениеВыбора.ДокументПланирования;	
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СтатьяДвиженияДенежныхСредств,ЗначениеВыбора.СтатьяДвиженияДенежныхСредств);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.Проект,ЗначениеВыбора.Проект);
			
			СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаПлатежа;
			СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
					
		КонецЕсли;
						
	Иначе
		
		НДСПоУмолчанию=?(ЗначениеНеЗаполнено(СтрокаПлатеж.СтавкаНДС),ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяСтавкаНДС"),
						СтрокаПлатеж.СтавкаНДС);
		
		ОбработкаПодбораЗадолженностей(СтрокаПлатеж,РасшифровкаПлатежа,ЗначениеВыбора,
		Список,ВалютаДокумента,КурсДокумента,КратностьДокумента,
		Организация, Контрагент, НДСПоУмолчанию,ОтражатьВБухгалтерскомУчете);
		
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
	КонецЕсли;
		
	УстановитьФокус();
	
	УстановитьВидимость();
				
КонецПроцедуры

Процедура КнопкаПодборНажатие(Элемент)
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"					,ЭтаФорма);
	СтруктураПараметров.Вставить("Организация"						,Организация);
	СтруктураПараметров.Вставить("Контрагент"						,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"					,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"					,СуммаДокумента);
	СтруктураПараметров.Вставить("РасшифровкаПлатежаДок"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ДатаДок"							,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"					,ВидОперации);
	СтруктураПараметров.Вставить("КурсДокумента"					,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"				,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"					,">0");
    СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"				,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"		,Истина);
	СтруктураПараметров.Вставить("ФормаОплаты"						,Перечисления.ВидыДенежныхСредств.Наличные);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"					,"ПланируемыеПоступленияДенежныхСредств");
	СтруктураПараметров.Вставить("ВидОперацииПлан"					,ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"				,Касса);
	СтруктураПараметров.Вставить("Проект"							,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств"	,СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,ОтражатьВБухгалтерскомУчете);
	
	ПодборЗадолженностей(СтруктураПараметров);
	
КонецПроцедуры

Процедура КоманднаяПанельПлатежиПодбор(Кнопка)
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"					,ЭтаФорма);
	СтруктураПараметров.Вставить("Организация"						,Организация);
	СтруктураПараметров.Вставить("Контрагент"						,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"					,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"					,СуммаДокумента);
	СтруктураПараметров.Вставить("РасшифровкаПлатежаДок"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ДатаДок"							,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"					,ВидОперации);
	СтруктураПараметров.Вставить("КурсДокумента"					,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"				,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"					,">0");
    СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"				,Ложь);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"		,Истина);
	СтруктураПараметров.Вставить("ФормаОплаты"						,Перечисления.ВидыДенежныхСредств.Наличные);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"					,"ПланируемыеПоступленияДенежныхСредств");
	СтруктураПараметров.Вставить("ВидОперацииПлан"					,ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"				,Касса);
	СтруктураПараметров.Вставить("Проект"							,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств"	,СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,ОтражатьВБухгалтерскомУчете);
	
	ПодборЗадолженностей(СтруктураПараметров);

	
КонецПроцедуры

Процедура КоманднаяПанельПлатежиЗаполнить(Кнопка)
	
	Если Константы.ОплатыРаспределяютМенеджеры.Получить() И 
		ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
		// в соответствии с установленными константами
		ЗаполнитьРасшифровкуПлатежаВСоответствииСДолгами();
		Возврат;
	КонецЕсли;	

	СтруктураПараметров=Новый Структура;
	
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СуммаДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"				,ВидОперации);
	СтруктураПараметров.Вставить("РасшифровкаПлатежа"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"				,">0");
	СтруктураПараметров.Вставить("Интерактивно"					,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Истина);
	СтруктураПараметров.Вставить("СтруктураПараметровАвто"		,Новый Структура);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Наличные);
	СтруктураПараметров.Вставить("ВидОперацииПлан"				,ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("ИмяРегистраПлан"				,"ПланируемыеПоступленияДенежныхСредств");
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,Касса);
	
	ЗаполнитьРасшифровкуПлатежей(СтруктураПараметров);
	
	Если РасшифровкаПлатежа.Количество()=0 Тогда
		НоваяСтрока=РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
КонецПроцедуры

Процедура РасчетныйДокументОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;	
	Элемент.Значение=Документы.РасходныйКассовыйОрдер.ПустаяСсылка();
	
КонецПроцедуры

Процедура СчетОрганизацииНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если НЕ Касса.Пустая() Тогда
		
		СтандартнаяОбработка=Ложь;
		ФормаВыбораСчета=Справочники.БанковскиеСчета.ПолучитьФормуВыбора(,Элемент,);
		
		ФормаВыбораСчета.Отбор.ВалютаДенежныхСредств.Значение=Касса.ВалютаДенежныхСредств;
		ФормаВыбораСчета.Отбор.ВалютаДенежныхСредств.Использование=Истина;
		ФормаВыбораСчета.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВалютаДенежныхСредств.Доступность=Ложь;
		
		ФормаВыбораСчета.Отбор.Владелец.Значение=Организация;
		ФормаВыбораСчета.Отбор.Владелец.Использование=Истина;
		ФормаВыбораСчета.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность=Ложь;
		
		ФормаВыбораСчета.РежимВыбора=Истина;
				
		Если Не ЗначениеНеЗаполнено(Элемент.Значение) Тогда
					
			ФормаВыбораСчета.ПараметрТекущаяСтрока=Элемент.Значение;
				
		КонецЕсли;
		
		ФормаВыбораСчета.Открыть();
		
	КонецЕсли;
		
КонецПроцедуры

Процедура КассаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
		
		СтандартнаяОбработка=Ложь;
		
		ФормаКассы=Справочники.Кассы.ПолучитьФормуВыбора(,Элемент,);
		ФормаКассы.Отбор.ВалютаДенежныхСредств.Значение=мВалютаРегламентированногоУчета;
		ФормаКассы.Отбор.ВалютаДенежныхСредств.Использование=Истина;
		ФормаКассы.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВалютаДенежныхСредств.Доступность=Ложь;
		
		Если Не ЗначениеНеЗаполнено(Элемент.Значение) Тогда
			
			ФормаКассы.ПараметрТекущаяСтрока=Элемент.Значение;
			
		КонецЕсли;
		
		ФормаКассы.РежимВыбора=Истина;
		
		ФормаКассы.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументПланированияПлатежаНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	СтандартнаяОбработка=Ложь;
		
	Если ЗначениеНеЗаполнено(Контрагент) Тогда
		Сообщить("Не указан контрагент.");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеНеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"				,ЭтаФорма);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Наличные);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ИмяРегистра"					,"ПланируемыеПоступленияДенежныхСредств");
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Истина);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СтрокаПлатеж.СуммаПлатежа);
    СтруктураПараметров.Вставить("ВидОперации"					,ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,Касса);
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Проект"						,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств",СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
    СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
    СтруктураПараметров.Вставить("ДоговорКонтрагента"			,СтрокаПлатеж.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Сделка"						,СтрокаПлатеж.Сделка);
	
	ПодборДокументовПланирования(СтруктураПараметров);

КонецПроцедуры

Процедура РасшифровкаПлатежаДокументПланированияПлатежаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
		
	Если ЗначениеНеЗаполнено(Контрагент) Тогда
		Сообщить("Не указан контрагент.");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеНеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"				,ЭтаФорма);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Наличные);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ИмяРегистра"					,"ПланируемыеПоступленияДенежныхСредств");
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Истина);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СтрокаПлатеж.СуммаПлатежа);
    СтруктураПараметров.Вставить("ВидОперации"					,ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,Касса);
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Проект"						,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств",СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
    СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
    СтруктураПараметров.Вставить("ДоговорКонтрагента"			,СтрокаПлатеж.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Сделка"						,СтрокаПлатеж.Сделка);
	
	ПодборДокументовПланирования(СтруктураПараметров);
	
КонецПроцедуры

Процедура ДокументПланированияПлатежаПрочиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
			
	Если ЗначениеНеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"				,ЭтаФорма);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Наличные);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ИмяРегистра"					,"ПланируемыеПоступленияДенежныхСредств");
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Ложь);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СтрокаПлатеж.СуммаПлатежа);
    СтруктураПараметров.Вставить("ВидОперации"					,ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,Касса);
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Проект"						,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств",СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
    СтруктураПараметров.Вставить("Контрагент"					,);
    СтруктураПараметров.Вставить("ДоговорКонтрагента"			,);
	СтруктураПараметров.Вставить("Сделка"						,);
	
	ПодборДокументовПланирования(СтруктураПараметров);

	
КонецПроцедуры

// Процедура обработчик события "ПриИзменении" поля ввода вида приема розничной выручки
//
Процедура ВидПриемаРозничнойВыручкиПриИзменении(Элемент)
	
	Если ВидПриемаРозничнойВыручки = Перечисления.ВидПриемаРозничнойВыручки.ИзКассы Тогда
		Если ТипЗнч(Контрагент)<>Тип("СправочникСсылка.КассыККМ") Тогда
			Контрагент = Справочники["КассыККМ"].ПустаяСсылка();
		КонецЕсли;
		ЭлементыФормы.КассаККМ.Подсказка = "В этом поле необходимо кассу ККМ, из которой осущесвляется прием выручки.";
	Иначе
		Если ТипЗнч(Контрагент)<>Тип("СправочникСсылка.Склады") Тогда
			Контрагент = Справочники["Склады"].ПустаяСсылка();
		КонецЕсли;
		ЭлементыФормы.КассаККМ.Подсказка = "В этом поле необходимо указать НТТ, с которой осуществляется прием выручки.";
	КонецЕсли;
 
КонецПроцедуры

// Процедура обработчик события "НачалоВыбора" поля ввода кассы ККМ
//
Процедура КассаККМНачалоВыбора(Элемент, СтандартнаяОбработка)
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
		Если ВидПриемаРозничнойВыручки = Перечисления.ВидПриемаРозничнойВыручки.ИзНТТ Тогда
			НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ВидСравнения.Равно, СтандартнаяОбработка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура СуммаПлатежаПланПриИзменении(Элемент)
	
	РассчитатьКурсВзаиморасчетовПлан();
	
КонецПроцедуры

Процедура КурсВзаиморасчетовПланПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

Процедура КурсВзаиморасчетовПланНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетовПлан;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетовПлан = СтруктураКурсаИКратности.КурсВалюты;

	КонецЕсли;
					   
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПланПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаПланПриИзменении(Элемент)
	
	РассчитатьКурсВзаиморасчетовПлан();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПланНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетовПлан;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетовПлан = СтруктураКурсаИКратности.КурсВалюты;

	КонецЕсли;
					   
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

Процедура ДокументПланированияПлатежаОчистка(Элемент, СтандартнаяОбработка)
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ДокументПланированияПлатежаКассаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
			
	Если ЗначениеНеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"				,ЭтаФорма);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Наличные);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ИмяРегистра"					,"ПланируемыеПоступленияДенежныхСредств");
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Ложь);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СтрокаПлатеж.СуммаПлатежа);
    СтруктураПараметров.Вставить("ВидОперации"					,ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,Касса);
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Проект"						,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств",СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
    СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
    СтруктураПараметров.Вставить("ДоговорКонтрагента"			,);
	СтруктураПараметров.Вставить("Сделка"						,);
	
	ПодборДокументовПланирования(СтруктураПараметров);
	
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

Процедура ДокументПланированияПлатежаПриИзменении(Элемент)
	
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		СтрокаПлатеж.КурсВзаиморасчетовПлан=0;
		СтрокаПлатеж.СуммаПлатежаПлан=0;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДокументПланированияПлатежаПриИзменении(Элемент)
	
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		СтрокаПлатеж.КурсВзаиморасчетовПлан=0;
		СтрокаПлатеж.СуммаПлатежаПлан=0;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанель2Перенести(Кнопка)
	
	Если (Затраты.Итог("Сумма")<>0) и не Списком2 Тогда
		СуммаДокумента=Затраты.Итог("Сумма");
		Если РасшифровкаПлатежа.Количество()=1 Тогда
			
			СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
			СтрокаПлатеж.СуммаВзаиморасчетов=СуммаДокумента;
            ПересчитатьСуммуНДС(СтрокаПлатеж);
        Иначе
			Сообщить("В табличной части ""Расшифровка платежа"" несколько строк, необходимо вручную поправить суммы расшифровки.", СтатусСообщения.Важное);									
        КонецЕсли ;
	КонецЕсли;

КонецПроцедуры


Процедура Список2ПриИзменении(Элемент)
	
	Если (ЭлементыФормы.Списком2.Значение <> Истина) Тогда  // списком
		Если (Подразделение <> Справочники.Подразделения.ПустаяСсылка() и СтатьяЗатрат <> Справочники.СтатьиЗатрат.ПустаяСсылка()) Тогда
			Стр 				= Затраты.Добавить();
			Стр.Подразделение 	= Подразделение;
			Стр.СтатьяЗатрат 	= СтатьяЗатрат;
			Стр.Сумма			= СуммаДокумента;
		КонецЕсли;		
		//Подразделение = Справочники.Подразделения.ПустаяСсылка();
		СтатьяЗатрат = Справочники.СтатьиЗатрат.ПустаяСсылка();
		ЭлементыФормы.Затраты.Видимость = Истина;
		ЭлементыФормы.СтатьяЗатрат.Видимость = Ложь;		
		ЭлементыФормы.НадписьСтатьяЗатрат.Видимость = Ложь;		
		ЭлементыФормы.КоманднаяПанель2.Видимость = Истина;
	Иначе 
		Если (Затраты.Количество()>0) Тогда
			Стр 				= Затраты.Получить(0);
			//Подразделение 		= Стр.Подразделение;
			СтатьяЗатрат		= Стр.СтатьяЗатрат;
		КонецЕсли;

		Затраты.Очистить();
		ЭлементыФормы.Затраты.Видимость = Ложь;
		ЭлементыФормы.СтатьяЗатрат.Видимость = Истина;
		ЭлементыФормы.НадписьСтатьяЗатрат.Видимость = Истина;
		ЭлементыФормы.КоманднаяПанель2.Видимость = Ложь;
		ИтогоЗатрат=СуммаДокумента;
	КонецЕсли;

КонецПроцедуры

Процедура ПодразделениеКомпанииПриИзменении(Элемент)
	
	//+++Шарафутдинов 01.03.2018
	Если не ВозможностьВыбораПодразделения2018(Дата,Элемент.Значение) тогда
		Сообщить("Подразделение должно участвовать в бюджетном планировании. Выберите другое подразделение!");
		Элемент.Значение = Справочники.Подразделения.ПустаяСсылка();
		Возврат;		
	КонецЕсли;
	
	//---Шарафутдинов 01.03.2018


	
	УстановитьНомерДокумента(ЭтотОбъект);

КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	
	
	Если не ЭтоНовый() И ВидОперации =  Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
		// проверяем на ответственного за договор
		
		ФлагОткрыватьПоДругойФорме=ПроверитьВДокументеПлатежаЕстьДоговорыПользователя(Ссылка);
		Если ФлагОткрыватьПоДругойФорме Тогда
			Отказ=Истина;
			СтандартнаяОбработка=Ложь;
			Форма=ДокументОбъект.ПолучитьФорму("ФормаДокументаДляОтветственногоЗаДоговор");
			Форма.Открыть();
			Возврат;
		ИначеЕсли  НЕ (РольДоступна("Кассир") ИЛИ РольДоступна("яштФинДиректор") ИЛИ РольДоступна("ПолныеПрава")) Тогда
			СообщитьОбОшибке("Вы не имеете права открывать документ.");
			Отказ=Истина;
		КонецЕсли;
	ИначеЕсли РольДоступна("Кассир") ИЛИ РольДоступна("яштФинДиректор") ИЛИ РольДоступна("ПолныеПрава") Тогда
		// можно открывать но по другой форме
	
	Иначе
		СообщитьОбОшибке("Вы не имеете права открывать документ.");
		Отказ=Истина;
		
	КонецЕсли;

	
	
	
КонецПроцедуры

Процедура ЗаполнитьРасшифровкуПлатежаВСоответствииСДолгами()
  	Если СуммаДокумента=0 Тогда
		Возврат;
	КонецЕсли;	
	
ТЗДолги=ПолучитьТаблицуДолговКонтрагентаПоПенямИПУ(ЭтотОбъект);

РасшифровкаПлатежа.Очистить();


ОстатокСуммыДолга=СуммаДокумента;

Для каждого строкаТЗ из ТЗДолги Цикл
	Если ОстатокСуммыДолга<=0 Тогда
		Прервать;
	КонецЕсли;	
	СтрокаРасшифровкаПлатежа=РасшифровкаПлатежа.Добавить();	
	СтрокаРасшифровкаПлатежа.ДоговорКонтрагента=строкаТЗ.ДоговорКонтрагента;
	СтрокаРасшифровкаПлатежа.Сделка=строкаТЗ.Сделка;
	СтрокаРасшифровкаПлатежа.КурсВзаиморасчетов=1;
	СуммаПлатежа=Макс(Мин (ОстатокСуммыДолга,строкаТЗ.СуммаДолга),0);
	ОстатокСуммыДолга=ОстатокСуммыДолга-СуммаПлатежа;
	СтрокаРасшифровкаПлатежа.СуммаПлатежа=СуммаПлатежа;
	СтрокаРасшифровкаПлатежа.СуммаВзаиморасчетов=СуммаПлатежа;
    СтрокаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПокупателя;
КонецЦикла;	

Если ОстатокСуммыДолга>0 Тогда // остаток суммы долга относим на договор НД
	
	Запрос= Новый Запрос;
	
	Запрос.Текст=
	"ВЫБРАТЬ
	|Ссылка ДоговорКонтрагента
	|ИЗ Справочник.ДоговорыКонтрагентов 
	|ГДЕ Владелец = &Контрагент И ТипДоговора = &НД";

Запрос.УстановитьПараметр("Контрагент",Контрагент);
Запрос.УстановитьПараметр("НД",Справочники.ТипыДоговоров.НД);

ВыборкаНД=Запрос.Выполнить().Выбрать();

Если ВыборкаНД.Следующий() Тогда
	СтрокаРасшифровкаПлатежа=РасшифровкаПлатежа.Добавить();	
	СтрокаРасшифровкаПлатежа.ДоговорКонтрагента=ВыборкаНД.ДоговорКонтрагента;
	СтрокаРасшифровкаПлатежа.КурсВзаиморасчетов=1;
	СтрокаРасшифровкаПлатежа.СуммаПлатежа=ОстатокСуммыДолга;
	СтрокаРасшифровкаПлатежа.СуммаВзаиморасчетов=ОстатокСуммыДолга;
	СтрокаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПокупателя;	
Иначе
	Сообщить("У контрагента "+СокрЛП(Контрагент.Наименование) + " нет договора типа 'НД'. Требуется добавить в базу такой договор.");
КонецЕсли;	
КонецЕсли;
ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;

	
КонецПроцедуры	

Функция ПроверитьЗакрытиеДоговоровПенейИУслуг()

	   // Если есть суммы платежей отнесенные на договоры факторинга, то проверка не выполняется
	Для каждого строкаРП Из РасшифровкаПлатежа Цикл
		Если не ЗначениеНеЗаполнено(строкаРП.ДоговорКонтрагента) Тогда
			Если строкаРП.ДоговорКонтрагента.ТипДоговора=Справочники.ТипыДоговоров.Факторинг Тогда
				    Возврат Истина;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	// Если НЕТ сумм платежей отнесенные на договоры факторинга
	
	СуммаОтнесенияНаДоговорыПеней=0;
	СуммаОтнесенияНаДоговорыПУ=0;
	СуммаОтнесенияНаДругиеДоговоры=0;
	
	Для каждого строкаРП из РасшифровкаПлатежа Цикл
		Если ДоговорКонтрагента.ТипДоговора=Справочники.ТипыДоговоров.Пени Тогда
			//СуммаОтнесенияНаДоговорыПеней=СуммаОтнесенияНаДоговорыПеней+строкаРП.СуммаПлатежа;
		ИначеЕсли ДоговорКонтрагента.ТипДоговора=Справочники.ТипыДоговоров.ВозмещаемыеУслуги Тогда 
			СуммаОтнесенияНаДоговорыПУ=СуммаОтнесенияНаДоговорыПУ+строкаРП.СуммаПлатежа;
		Иначе
			СуммаОтнесенияНаДругиеДоговоры=СуммаОтнесенияНаДругиеДоговоры+строкаРП.СуммаПлатежа;
		КонецЕсли;	
	КонецЦикла;	
	
	
	ТЗДолги=ПолучитьТаблицуДолговКонтрагентаПоПенямИПУ(ЭтотОбъект);
	
	Если ТЗДолги.Количество()>0 Тогда
		
		ТЗДолги.Колонки.Добавить("СуммаОплаты");
		СуммаВзаиморасчетов = РасшифровкаПлатежа.Итог("СуммаВзаиморасчетов");
		
	Для каждого строкаТЗ из ТЗДолги Цикл
		строкаТЗ.СуммаОплаты=0;
		
		Отбор= Новый Структура("ДоговорКонтрагента,Сделка");
		Отбор.ДоговорКонтрагента=строкаТЗ.ДоговорКонтрагента;
		Отбор.Сделка=строкаТЗ.Сделка;
		
		НайдСтроки=РасшифровкаПлатежа.НайтиСтроки(Отбор);
		
		
		Если НайдСтроки.Количество()=0 Тогда // не нашел
			
		Иначе
			строкаТЗ.СуммаОплаты=НайдСтроки[0].СуммаВзаиморасчетов;
		КонецЕсли;	 
		
	КонецЦикла;	
	
		
	ИтогоОплатыПоДоговорамУслугПеней=0;
	ФлагБылиДоговорыУслуг=Ложь;
	СписокДоговоровУслуг= Новый СписокЗначений;
	
	Для каждого строкаТЗ из ТЗДолги Цикл   // проверяем есть ли платежи , отнесенные не в полной мере сначала на пени, а потом на услуги
		ИтогоОплатыПоДоговорамУслугПеней=ИтогоОплатыПоДоговорамУслугПеней+строкаТЗ.СуммаОплаты;
		Если ИтогоОплатыПоДоговорамУслугПеней=СуммаВзаиморасчетов Тогда
			Прервать;
		КонецЕсли;	
		Если  строкаТЗ.СуммаОплаты<строкаТЗ.СуммаДолга Тогда //+++ 06.07.2015 - проводим, но предупреждения оставляем! 
			Если строкаТЗ.ДоговорКонтрагента.ТипДоговора=Справочники.ТипыДоговоров.Пени Тогда
				//Если СуммаОтнесенияНаДоговорыПУ+СуммаОтнесенияНаДругиеДоговоры>0 Тогда
				//	Сообщить("Сумма оплаты по договору '"+ СокрЛП(строкаТЗ.ДоговорКонтрагента.Наименование)+ 
				//	"' меньше долга по этому договору"+ ?(ЗначениеНеЗаполнено(строкаТЗ.Сделка),"",", сделке "+СокрЛП(Строка((строкаТЗ.Сделка)))),СтатусСообщения.Важное);
				//	//Возврат Ложь;
				//КонецЕсли;
			ИначеЕсли строкаТЗ.ДоговорКонтрагента.ТипДоговора=Справочники.ТипыДоговоров.ВозмещаемыеУслуги Тогда
					Если СуммаОтнесенияНаДругиеДоговоры>0 Тогда
						Сообщить("Сумма оплаты по договору '"+ СокрЛП(строкаТЗ.ДоговорКонтрагента.Наименование)+ 
						"' меньше долга по этому договору"+ ?(ЗначениеНеЗаполнено(строкаТЗ.Сделка),"",", сделке "+СокрЛП(Строка((строкаТЗ.Сделка)))),СтатусСообщения.Важное);
					//	Возврат Ложь;
					КонецЕсли;	
				КОнецЕсли;		
			КонецЕсли;	
		КонецЦикла; 
		
		Возврат Истина;  //+++ 06.07.2015 - проводим
		
		
	Иначе
		Возврат Истина; // Долга по договорам перевыст. услуг и пеням нет
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

Процедура ДокументОснованиеНажатие(Элемент)
	ДокументОснование.ПолучитьФорму().Открыть();
КонецПроцедуры

Процедура ЗаданиеНаОтгрузкуНажатие(Элемент)
	СсылкаЗаданиеНаОтгрузку.ПолучитьФорму().Открыть();
КонецПроцедуры

Процедура ПодготовитьДанныеДляФискализацииЧекаПКО(Ссылка, ОбщиеПараметры, КассаККМ, Параметры) 
	
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();

	//ОрганизацияЧека = Ссылка.Касса.Владелец;
	ОрганизацияЧека = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент.ПолучитьОрганизациюКассы(КассаККМ,ИмяКомпьютера());
	// Шапка
	ОбщиеПараметры.ДокументОснование = Ссылка;
	ОбщиеПараметры.ТипРасчета = ?(Ссылка.ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком,
		ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств"),
		ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств"));
//	ОбщиеПараметры.Кассир = Ссылка.Ответственный.Наименование;
	ОбщиеПараметры.Кассир = глТекущийПользователь.Наименование;
	
	ОбщиеПараметры.Электронно = Ложь; // Чек будет напечатан
	ОбщиеПараметры.Отправляет1СSMS = Ложь;
	ОбщиеПараметры.Отправляет1СEmail = Ложь;
	ОбщиеПараметры.ОрганизацияНазвание = ОрганизацияЧека.НаименованиеПолное;
	ОбщиеПараметры.ОрганизацияИНН = ОрганизацияЧека.ИНН;
	ОбщиеПараметры.ОрганизацияКПП = ОрганизацияЧека.КПП;
	ЕстьУслуги=Ложь;
	Для каждого Строка из Ссылка.РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(Строка.Сделка) И типЗнч(Строка.сделка)=Тип("ДокументСсылка.ЗаказНаряд") Тогда	
			ЕстьУслуги=Истина;
		КонецЕсли;
	КонецЦикла;
	ОбщиеПараметры.КодСистемыНалогообложения = МенеджерОборудованияКлиентСервер.КодСистемыНалогообложения(ОрганизацияЧека, Ссылка.Дата,ЕстьУслуги);  
	// Оплаты	
	СуммаТипаОплаты = СуммаДокумента;
	Если СуммаТипаОплаты <> 0 И СуммаТипаОплаты <> Неопределено Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", 0);
		СтрокаОплаты.Вставить("Наименование", "Наличная оплата");
		СтрокаОплаты.Вставить("Сумма", СуммаТипаОплаты);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	// Товарные позиции
	ЭтоАванс=Ложь;
	Если ЗначениеЗаполнено(ДокументОснование) И
//		(ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.ЗаказПокупателя") ИЛИ ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.РеализацияТоваровУслуг")) И
		  НЕ ДокументОснование.СуммаДокумента=СуммаТипаОплаты Тогда
		ЭтоАванс=Истина;
		КонецЕсли;
		
	РасчетыСПокупателем =НЕ ЭтоАванс И (ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаПокупателя"));
	
	МенеджерОборудованияВызовСервера.ЗаполнитьТоварныеПозицииВПараметрахЧека(Ссылка, ОбщиеПараметры, 
		РасчетыСПокупателем, Ложь, ПринятоОт, Основание,Параметры);
КонецПроцедуры

Процедура ЗатратыПодразделениеПриИзменении(Элемент)
	//+++Шарафутдинов 01.03.2018
	Если не ВозможностьВыбораПодразделения2018(Дата,Элемент.Значение) тогда
		Сообщить("Подразделение должно участвовать в бюджетном планировании. Выберите другое подразделение!");
		Элемент.Значение = Справочники.Подразделения.ПустаяСсылка();
		Возврат;		
	КонецЕсли;
	
	//---Шарафутдинов 01.03.2018


КонецПроцедуры










































