Перем мОбновлятьВладельца;

Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов; 

// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента; 

Перем мЧас;
Перем мМинута;

Перем мОбработкаТайпинга;
Перем мТекстТайпинга;
Перем мПоследнееЗначениеЭлементаТайпинга Экспорт;

Перем мКолонкиТовары, мКолонкиВозвратнаяТара;
Перем мРазрешитьНулевыеЦеныВОпте;

Перем мПечатнаяФормаПоУмолчанию;
Перем мФлагМожноМенятьДатуОплаты;

Перем СвойстваСписокВыбора;

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция формирует структуру параметров для тайпинка контактного лица контрагента.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Структура имен и значений параметров
//
Функция ПолучитьСтруктуруПараметровТайпинга()

	СтруктураПараметров = Новый Структура("ВидКонтактногоЛица", Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента);
	Если НЕ ЗначениеНеЗаполнено(Контрагент) Тогда
		СтруктураПараметров.Вставить("ОбъектВладелец", Контрагент);
	КонецЕсли;
	
	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровТайпинга()()

// Процедура вызывается при выборе времени из списка у ЭУ ВремяНапоминания
//
Процедура ВыбратьВремя(ДатаВремен, ТекЭлемент, ПолныйГод = Истина)

	СтруктураРабочихВремен = ОпределитьНачалоИОкончениеРабочегоДняПользователя();
	
	СписокВремен = Новый СписокЗначений;
	НачалоРабочегоДня = НачалоДня(ДатаВремен)+Час(СтруктураРабочихВремен.ДатаНачала)*60*60+Минута(СтруктураРабочихВремен.ДатаНачала)*60;
	ОкончаниеРабочегоДня = НачалоДня(ДатаВремен)+Час(СтруктураРабочихВремен.ДатаОкончания)*60*60+Минута(СтруктураРабочихВремен.ДатаОкончания)*60 - 60*60;

	НачалоРабочегоДняДляСпискаВыбора = НачалоЧаса(НачалоРабочегоДня);
	а = 0;
	Пока 1=1 Цикл
		ВремяСписка = НачалоРабочегоДняДляСпискаВыбора + а*30*60;
		Если НачалоЧаса(ВремяСписка) > НачалоЧаса(ОкончаниеРабочегоДня) Тогда
			Прервать;
		КонецЕсли;
		Если ПолныйГод Тогда
			СписокВремен.Добавить(ВремяСписка, Формат(ВремяСписка,"ДФ='дд.ММ.гггг ЧЧ:мм'"));
		Иначе
			СписокВремен.Добавить(ВремяСписка, Формат(ВремяСписка,"ДФ='дд.ММ.гг ЧЧ:мм'"));
		КонецЕсли; 
		а = а + 1;
	КонецЦикла; 

	НачальноеЗначение = СписокВремен.НайтиПоЗначению(ДатаВремен);
	Если НачальноеЗначение = Неопределено Тогда
		ВыбранноеВремя = ЭтаФорма.ВыбратьИзСписка(СписокВремен, ТекЭлемент);
	Иначе
		ВыбранноеВремя = ЭтаФорма.ВыбратьИзСписка(СписокВремен, ТекЭлемент, НачальноеЗначение);
	КонецЕсли; 

	Если ВыбранноеВремя <> Неопределено Тогда
		ДатаВремен = ВыбранноеВремя.Значение;
	КонецЕсли; 
	
КонецПроцедуры // ВыбратьВремя()

// Процедура изменяет доступность элемента формы .ВремяНапоминания
//
Процедура ДоступностьНапоминаний()

	ЭлементыФормы.ВремяНапоминания.Доступность = НапомнитьОСобытии;
	
КонецПроцедуры // ДоступностьНапоминаний()

// Процедура выполняет оповещение формы владельца о регистрации нового заказа
//
Функция ЗарегистрироватьЗаказВОбработке()
	
	Попытка
	
		ЭтотОбъект.Заблокировать();
		ОповеститьОЗаписиНовогоОбъекта(ЭтотОбъект);
		Возврат Истина;
	
	Исключение
		
		ЭтаФорма.Модифицированность = Истина;
		Предупреждение("Не удалось заблокировать запись. Действие (изменение, удаление или блокировка записи) не выполнено.");
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	ПриИзмененииЗначенияДоговора(ЭтотОбъект, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Покупка", "Товары", мТекущийДоговорКонтрагента);

	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	СформироватьНадписьДолга(ДоговорКонтрагента, Ссылка, ЭлементыФормы.ИнфНадписьДолга, , Истина);
	УстановитьЗаголовкиПоДоговору();
	// { Лапенков 20080829 Заккоментировал, т.к. Дата оплаты по договору поставки должна вводиться руками
	//УстановитьДатуОплатыПоДоговору("ДоговорКонтрагента");
	// } Лапенков 20080829 
	УстановитьВидимость();

КонецПроцедуры // ПриИзмененииДоговора()

// Выполняет необходимые действия при изменении вида склада.
//
Процедура ПриИзмененииВидаСклада()

	// Определим текущий вид склада
	ВидСклада = Склад.ВидСклада;

	// Оформление колонок таблицы
	ФлагАвтоОтметкиНезаполненого = Истина;

	Если (ВидСклада = Перечисления.ВидыСкладов.Оптовый ИЛИ ВидСклада = Неопределено) И мРазрешитьНулевыеЦеныВОпте Тогда
		ФлагАвтоОтметкиНезаполненого = Ложь;
	КонецЕсли;

	мКолонкиТовары.Сумма.АвтоОтметкаНезаполненного               = ФлагАвтоОтметкиНезаполненого;
	мКолонкиТовары.Цена.АвтоОтметкаНезаполненного                = ФлагАвтоОтметкиНезаполненого;
	мКолонкиВозвратнаяТара.Сумма.АвтоОтметкаНезаполненного       = ФлагАвтоОтметкиНезаполненого;
	мКолонкиВозвратнаяТара.Цена.АвтоОтметкаНезаполненного        = ФлагАвтоОтметкиНезаполненого;
	ЭлементыФормы.Услуги.Колонки.Сумма.АвтоОтметкаНезаполненного = ФлагАвтоОтметкиНезаполненого;
	ЭлементыФормы.Услуги.Колонки.Цена.АвтоОтметкаНезаполненного  = ФлагАвтоОтметкиНезаполненого;


КонецПроцедуры // ПриИзмененииВидаСклада()

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Если ТабличнаяЧасть = Товары Тогда
		СписокЗапросов.Добавить("ПриходЦеныКонтрагента",         "По ценам контрагента");
		СписокЗапросов.Добавить("ПриходНоменклатураКонтрагента", "По номенклатуре контрагента");
		СписокЗапросов.Добавить("ОстаткиНоменклатуры",           "По остаткам номенклатуры");
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		СписокЗапросов.Добавить("ПриходЦеныКонтрагента",         "По ценам контрагента");
	КонецЕсли;

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена  = Истина;
	ЕстьСерия = Ложь;

	Если ТабличнаяЧасть = Товары Тогда

		Команда = "ПодборВТабличнуюЧастьТовары";
		Валюта  = ВалютаДокумента;
		ИмяТабличнойЧасти = "Товары";

	ИначеЕсли ТабличнаяЧасть = Услуги Тогда

		Команда = "ПодборВТабличнуюЧастьУслуги";
		Валюта  = ВалютаДокумента;
		ИмяТабличнойЧасти = "Услуги";

	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

		Если ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
			Предупреждение("Не выбран договор контрагента!");
			Возврат;
		ИначеЕсли ЗначениеНеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
			Предупреждение("Не выбрана валюта взаиморасчетов по договору!");
			Возврат;
		КонецЕсли; 

		Команда = "ПодборВТабличнуюЧастьВозвратнаяТара";
		Валюта  = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		ИмяТабличнойЧасти = "Тара";
		
	КонецЕсли;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                , Склад);
	СтруктураПараметровПодбора.Вставить("ТипЦен"               , ТипЦен);
	СтруктураПараметровПодбора.Вставить("Контрагент"           , Контрагент);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	СтруктураПараметровПодбора.Вставить("Организация"          , Организация);

	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен", Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"           , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"          , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"    , Валюта);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, Цена, Характеристика, Серия;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);

	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("Цена"            , Цена);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);

	Если (ТабличнаяЧасть = Товары ИЛИ ТабличнаяЧасть = ВозвратнаяТара)
	   И Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	ИначеЕсли ТабличнаяЧасть = Услуги И Не Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте товары не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	СтруктураОтбора.Вставить("Номенклатура", Номенклатура);

	Если ТабличнаяЧасть = Товары Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	КонецЕсли;

	СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Итоговая информация об отклонение от плановой себестоимости
			СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;

		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;

			// Заполняем реквизиты табличной части.
			ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Пересчитаем цену в валюту документа.
			Цена = ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                 СпособЗаполненияЦен,
			                                                 ТипЦен.ЦенаВключаетНДС,
			                                                 УчитыватьНДС,
			                                                 СуммаВключаетНДС,
			                                                 ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Рассчитываем плановую себестоимость.
			РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);

			// Итоговая информация об отклонение от плановой себестоимости
			СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			// Пересчитаем цену в валюту документа.
			Цена = ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения.
			// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС
			// ставки берутся из номенклатуры.
			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                     СпособЗаполненияЦен,
			                                     ТипЦен.ЦенаВключаетНДС,
			                                     УчитыватьНДС,
			                                     Истина,
			                                     ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС));

			// Рассчитать реквизиты табличной части.
			РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			// Заполняем реквизиты табличной части.
			ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Пересчитаем цену в валюту документа.
			Цена = ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                 СпособЗаполненияЦен,
			                                                 ТипЦен.ЦенаВключаетНДС,
			                                                 УчитыватьНДС,
			                                                 СуммаВключаетНДС,
			                                                 ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
	КонецЕсли;

	ТабличнаяЧастьИмя = Метаданные.НайтиПоТипу(ТипЗнч(ТабличнаяЧасть)).Имя;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Заполняет переданную табличную часть по остаткам
//
// Параметры:
//  ТабличнаяЧасть  - табличная часть документа.
//	ЗаказПокупателя - заказ по которому производится заполнение
// 	Очистить		- очистить предварительно ТЧ или добавить в конец
//
Процедура ЗаполнитьТабличнуюЧастьПоЗаказуПокупателю(ТабличнаяЧасть, ЗаказПокупателя = Неопределено, Очистить = Истина, ТипДокумента = Неопределено)

	Если ЗначениеНеЗаполнено(ЗаказПокупателя) Тогда
		ФормаЗаказы = Документы[ТипДокумента].ПолучитьФормуВыбора();
		ФормаЗаказы.Заголовок = "Выберите заказ покупателя для заполнения заказа поставщику";
		ФормаЗаказы.РежимВыбора = Истина;
		ЗаказПокупателя = ФормаЗаказы.ОткрытьМодально();
	КонецЕсли; 

	Если ЗначениеНеЗаполнено(ЗаказПокупателя) Тогда
		Возврат;
	КонецЕсли;

	Если Очистить И ТабличнаяЧасть.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, Метаданные().Имя);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		ТабличнаяЧасть.Очистить();
	КонецЕсли;

	Если ТабличнаяЧасть = Товары Тогда
		ЗаполнитьТоварыПоЗаказуПокупателю(ЗаказПокупателя);
		
		// Итоговая информация об отклонение от плановой себестоимости
		СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);
		
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
		ЗаполнитьВозвратнуюТаруПоЗаказуПокупателю(ЗаказПокупателя);

	КонецЕсли;

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоЗаказуПокупателю()

// Заполняет переданную табличную часть по остаткам
//
// Параметры:
//  ТабличнаяЧасть  - табличная часть документа.
//	ЗаказПокупателя - заказ по которому производится заполнение
// 	Очистить		- очистить предварительно ТЧ или добавить в конец
//
Процедура ЗаполнитьТабличнуюЧастьПоВнутреннемуЗаказу(ТабличнаяЧасть, ВнутреннийЗаказ = Неопределено, Очистить = Истина, ТипДокумента = Неопределено)

	Если ЗначениеНеЗаполнено(ВнутреннийЗаказ) Тогда
		ФормаЗаказы = Документы[ТипДокумента].ПолучитьФормуВыбора();
		ФормаЗаказы.Заголовок = "Выберите внутренний заказ для заполнения заказа поставщику";
		ФормаЗаказы.РежимВыбора = Истина;
		ВнутреннийЗаказ = ФормаЗаказы.ОткрытьМодально();
	КонецЕсли; 

	Если ЗначениеНеЗаполнено(ВнутреннийЗаказ) Тогда
		Возврат;
	КонецЕсли;

	Если Очистить И ТабличнаяЧасть.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, Метаданные().Имя);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		ТабличнаяЧасть.Очистить();
	КонецЕсли;

	Если ТабличнаяЧасть = Товары Тогда
		ЗаполнитьТабличнуюЧастьПоОстаткамВнутреннийЗаказ( Товары, ВнутреннийЗаказ);
		
		// Итоговая информация об отклонение от плановой себестоимости
		СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);
		
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
		ЗаполнитьТабличнуюЧастьПоОстаткамВнутреннийЗаказ( ВозвратнаяТара, ВнутреннийЗаказ);
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоЗаказуПокупателю()

// Заполняет в табличной части "Товары" неразмещенные комплекты как комплектующие
//
// Параметры:
//  ЗаказПокупателя - Заказ покупателя, по которому производится расчет
//
Процедура ЗаполнитьКомплектующиеПоЗаказуПокупателю(ТабличнаяЧасть, ЗаказПокупателя)

	// Вызовем диалог размещения
	ФормаРаспределения = ПолучитьФорму("ФормаРаспределения", ЭтаФорма);
	ФормаРаспределения.ЗаказПокупателя = ЗаказПокупателя;
	ТаблицаНераспределенныхКомплектов = ФормаРаспределения.ТаблицаНераспределенныхКомплектов;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ЗаказПокупателя.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ТоварТара", Перечисления.ТоварТара.Товар);

	Если Не ЗначениеНеЗаполнено(ЗаказПокупателя.ДатаОтгрузки) И Не ЗначениеНеЗаполнено(ДатаПоступления) 
	   И (ЗаказПокупателя.ДатаОтгрузки < ДатаПоступления) Тогда
		Предупреждение("Отгрузку по заказу покупателя необходимо осуществить раньше даты поступления по данному документу!");
		Возврат;
	КонецЕсли;

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.Номенклатура               КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстатки.КоличествоОстаток
	|	 - ВЫБОР КОГДА ТоварыВРезервеОстатки.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТоварыВРезервеОстатки.КоличествоОстаток КОНЕЦ
	|	 - ВЫБОР КОГДА РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток КОНЕЦ КАК Количество
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента И ЗаказПокупателя = &ЗаказПокупателя) КАК ЗаказыПокупателейОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, ДокументРезерва = &ЗаказПокупателя) КАК ТоварыВРезервеОстатки
	|		ПО ЗаказыПокупателейОстатки.Номенклатура = ТоварыВРезервеОстатки.Номенклатура И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ТоварыВРезервеОстатки.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(, ЗаказПокупателя = &ЗаказПокупателя И ТоварТара = &ТоварТара) КАК РазмещениеЗаказовПокупателейОстатки
	|		ПО ЗаказыПокупателейОстатки.Номенклатура = РазмещениеЗаказовПокупателейОстатки.Номенклатура И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры
	|		СОЕДИНЕНИЕ РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
	|		ПО ЗаказыПокупателейОстатки.Номенклатура = КомплектующиеНоменклатуры.Номенклатура И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = КомплектующиеНоменклатуры.ХарактеристикаНоменклатуры
	|ИТОГИ МАКСИМУМ (Количество) ПО Номенклатура, ХарактеристикаНоменклатуры
	|";

	ВыборкаПоНоменклатуре = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоНоменклатуре.Следующий() Цикл
		ВыборкаПоХарактеристикам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоХарактеристикам.Следующий() Цикл
			Если ВыборкаПоХарактеристикам.Количество > 0 Тогда
				СтрокаТаблицы = ТаблицаНераспределенныхКомплектов.Добавить();
				СтрокаТаблицы.Номенклатура               = ВыборкаПоХарактеристикам.Номенклатура;
				СтрокаТаблицы.ХарактеристикаНоменклатуры = ВыборкаПоХарактеристикам.ХарактеристикаНоменклатуры;
				СтрокаТаблицы.НеРазмещено                = ВыборкаПоХарактеристикам.Количество;
				СтрокаТаблицы.Заполняем                  = ВыборкаПоХарактеристикам.Количество;
			КонецЕсли;
		КОнецЦикла;
	КОнецЦикла;

	Если ТаблицаНераспределенныхКомплектов.Количество()=0 Тогда
		Предупреждение("Неразмещенные комплекты отсутствуют!");
		Возврат;
	КонецЕсли;

	ФормаРаспределения.Открыть();

КонецПроцедуры // ЗаполнитьКомплектующиеПоЗаказуПокупателю()

// Заполняет в табличной части "Товары" неразмещенные комплекты как комплектующие
//
// Параметры:
//  ВнутреннийЗаказ - Внутренний Заказ, по которому производится расчет
//
Процедура ЗаполнитьКомплектующиеПоВнутреннемуЗаказу(ТабличнаяЧасть, ВнутреннийЗаказ)

	// Вызовем диалог размещения
	ФормаРаспределения = ПолучитьФорму("ФормаРаспределения", ЭтаФорма);
	ФормаРаспределения.ЗаказПокупателя = ВнутреннийЗаказ;
	ТаблицаНераспределенныхКомплектов  = ФормаРаспределения.ТаблицаНераспределенныхКомплектов;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВнутреннийЗаказ", ВнутреннийЗаказ);
	Запрос.УстановитьПараметр("ТоварТара", Перечисления.ТоварТара.Товар);

	Если Не ЗначениеНеЗаполнено(ВнутреннийЗаказ.ДатаОтгрузки) И Не ЗначениеНеЗаполнено(ДатаПоступления) 
	   И (ВнутреннийЗаказ.ДатаОтгрузки < ДатаПоступления) Тогда
		Предупреждение("Отгрузку по внутреннему заказу необходимо осуществить раньше даты поступления по данному документу!");
		Возврат;
	КонецЕсли;

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВнутренниеЗаказыОстатки.Номенклатура               КАК Номенклатура,
	|	ВнутренниеЗаказыОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВнутренниеЗаказыОстатки.КоличествоОстаток
	|	 - ВЫБОР КОГДА ТоварыВРезервеОстатки.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТоварыВРезервеОстатки.КоличествоОстаток КОНЕЦ
	|	 - ВЫБОР КОГДА РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток КОНЕЦ КАК Количество
	|ИЗ
	|	РегистрНакопления.ВнутренниеЗаказы.Остатки КАК ВнутренниеЗаказыОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, ДокументРезерва = &ВнутреннийЗаказ) КАК ТоварыВРезервеОстатки
	|		ПО ВнутренниеЗаказыОстатки.Номенклатура = ТоварыВРезервеОстатки.Номенклатура И ВнутренниеЗаказыОстатки.ХарактеристикаНоменклатуры = ТоварыВРезервеОстатки.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(, ЗаказПокупателя = &ВнутреннийЗаказ И ТоварТара = &ТоварТара) КАК РазмещениеЗаказовПокупателейОстатки
	|		ПО ВнутренниеЗаказыОстатки.Номенклатура = РазмещениеЗаказовПокупателейОстатки.Номенклатура И ВнутренниеЗаказыОстатки.ХарактеристикаНоменклатуры = РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры
	|		СОЕДИНЕНИЕ РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
	|		ПО ВнутренниеЗаказыОстатки.Номенклатура = КомплектующиеНоменклатуры.Номенклатура И ВнутренниеЗаказыОстатки.ХарактеристикаНоменклатуры = КомплектующиеНоменклатуры.ХарактеристикаНоменклатуры
	|ГДЕ
	|	ВнутренниеЗаказыОстатки.ВнутреннийЗаказ = &ВнутреннийЗаказ
	|ИТОГИ МАКСИМУМ (Количество) ПО Номенклатура, ХарактеристикаНоменклатуры
	|";

	ВыборкаПоНоменклатуре = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоНоменклатуре.Следующий() Цикл
		ВыборкаПоХарактеристикам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоХарактеристикам.Следующий() Цикл
			Если ВыборкаПоХарактеристикам.Количество > 0 Тогда
				СтрокаТаблицы = ТаблицаНераспределенныхКомплектов.Добавить();
				СтрокаТаблицы.Номенклатура               = ВыборкаПоХарактеристикам.Номенклатура;
				СтрокаТаблицы.ХарактеристикаНоменклатуры = ВыборкаПоХарактеристикам.ХарактеристикаНоменклатуры;
				СтрокаТаблицы.НеРазмещено                = ВыборкаПоХарактеристикам.Количество;
				СтрокаТаблицы.Заполняем                  = ВыборкаПоХарактеристикам.Количество;
			КонецЕсли;
		КОнецЦикла;
	КОнецЦикла;

	Если ТаблицаНераспределенныхКомплектов.Количество()=0 Тогда
		Предупреждение("Неразмещенные комплекты отсутствуют!");
		Возврат;
	КонецЕсли;

	ФормаРаспределения.Открыть();

КонецПроцедуры // ЗаполнитьКомплектующиеПоВнутреннемуЗаказу()

// Заполняет переданную табличную часть по остаткам
//
// Параметры:
//  ТабличнаяЧасть  - табличная часть документа.
//  Очистить        - очистить предварительно ТЧ или добавить в конец
//
Процедура ЗаполнитьТабличнуюЧастьПоЗаказуПокупателяКомплектующие(ТабличнаяЧасть, Очистить = Истина)
	
	ФормаЗаказы = Документы.ЗаказПокупателя.ПолучитьФормуВыбора();
	ФормаЗаказы.Заголовок = "Выберите заказ покупателя для заполнения заказа поставщику";
	ФормаЗаказы.РежимВыбора = Истина;
	ЗаказПокупателя = ФормаЗаказы.ОткрытьМодально();

	Если ЗначениеНеЗаполнено(ЗаказПокупателя) Тогда
		Возврат;
	КонецЕсли;

	Если Очистить И ТабличнаяЧасть.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, Метаданные().Имя);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		ТабличнаяЧасть.Очистить();
	КонецЕсли;

	ЗаполнитьКомплектующиеПоЗаказуПокупателю(ТабличнаяЧасть, ЗаказПокупателя);

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоЗаказуПокупателяКомплектующие()

// Заполняет переданную табличную часть по остаткам
//
// Параметры:
//  ТабличнаяЧасть  - табличная часть документа.
//  Очистить        - очистить предварительно ТЧ или добавить в конец
//
Процедура ЗаполнитьТабличнуюЧастьПоВнутреннемуЗаказуКомплектующие(ТабличнаяЧасть, Очистить = Истина)
	
	ФормаЗаказы = Документы.ВнутреннийЗаказ.ПолучитьФормуВыбора();
	ФормаЗаказы.Заголовок = "Выберите внутренний заказ для заполнения заказа поставщику";
	ФормаЗаказы.РежимВыбора = Истина;
	ВнутреннийЗаказ = ФормаЗаказы.ОткрытьМодально();

	Если ЗначениеНеЗаполнено(ВнутреннийЗаказ) Тогда
		Возврат;
	КонецЕсли;

	Если Очистить И ТабличнаяЧасть.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, Метаданные().Имя);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		ТабличнаяЧасть.Очистить();
	КонецЕсли;

	ЗаполнитьКомплектующиеПоВнутреннемуЗаказу(ТабличнаяЧасть, ВнутреннийЗаказ);

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоВнутреннемуЗаказуКомплектующие()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
	                                         Контрагент, ТипЦен, ДоговорКонтрагента, Дата,ВалютаДокумента, УчитыватьНДС,СуммаВключаетНДС);

	ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ПриИзмененииНоменклатурыТоваров()

// Производит заполнение и установку необходимых полей при изменении характеристики товара в табличной части.
//
Процедура ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
	                                         Контрагент, ТипЦен, ДоговорКонтрагента, Дата,ВалютаДокумента, УчитыватьНДС,СуммаВключаетНДС);

	ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

КонецПроцедуры // ПриИзмененииХарактеристикиНоменклатурыТоваров()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	
	Колонки    = ЭлементыФормы.Товары.Колонки;

	// Колонки налога показываем только тогда, когда его учитываем.
	Если УчитыватьНДС <> Колонки.СтавкаНДС.Видимость Тогда
		УстановитьВидимостьКолонкиТабЧасти( Колонки   .СтавкаНДС, УчитыватьНДС);
	КонецЕсли;

	Если УчитыватьНДС <> Колонки.СуммаНДС.Видимость Тогда
		УстановитьВидимостьКолонкиТабЧасти( Колонки   .СуммаНДС, УчитыватьНДС);
	КонецЕсли;
	
	СтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы;

	// Услуги на комиссию не принимаем.
	ВидимостьЗакладкиУслуг = ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = ВидимостьЗакладкиУслуг;
	
	ЭлементыФормы.НадписьДатыОплаты.Видимость = НЕ ИспользоватьЧислоДнейДоОплаты ;
	ЭлементыФормы.ДатаОплаты.Видимость = НЕ  ИспользоватьЧислоДнейДоОплаты;
    ЭлементыФормы.НадписьЧислоДнейДоОплаты.Видимость =  ИспользоватьЧислоДнейДоОплаты ;
	ЭлементыФормы.ЧислоДнейДоОплаты.Видимость =  ИспользоватьЧислоДнейДоОплаты;
	
	Если Контрагент = Справочники.Контрагенты.НайтиПоКоду("94072") тогда	   
	   ЭлементыФормы.КоманднаяПанельТовары.Кнопки.кнЦеныКлиента.Доступность = истина;
	иначе   
	   ЭлементыФормы.КоманднаяПанельТовары.Кнопки.кнЦеныКлиента.Доступность = ложь;
	КонецЕсли;

	
КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает заголовки по выбранному договору для:
// - элемента формы НадписьСуммаВзаиморасчетов.
//
// Параметры:
//  Нет.
//
Процедура УстановитьЗаголовкиПоДоговору()

	УстановитьНадписьСуммыВзаиморасчетов(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // УстановитьЗаголовкиПоДоговору()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = ФорматСумм(ПолучитьСуммуДокументаСНДС(ЭтотОбъект));
	ЭлементыФормы.ВсегоНДС.Значение = ФорматСумм(ПолучитьНДСДокумента(ЭтотОбъект));

	ВременнаяСтрока = "";

	Если (НЕ ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента))
	   И (ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда

		ВременнаяСтрока = ВременнаяСтрока + КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета) +  ДокументОбъект.ВалютаДокумента
		                + " = " + КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
		                + мВалютаРегламентированногоУчета + ", ";

	КонецЕсли;

	Если НЕ ЗначениеНеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
	Иначе
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	ЭлементыФормы.ОсновныеДействияФормы.Видимость                   = НЕ ФормаДляРегистрацииБезЗаписи;
	ЭлементыФормы.ОсновныеДействияФормыДляРежимаБезЗаписи.Видимость = ФормаДляРегистрацииБезЗаписи;
	ЭлементыФормы.ДействияФормы.Видимость                           = НЕ ФормаДляРегистрацииБезЗаписи;
	ЭлементыФормы.ДействияФормыДляРежимаБезЗаписи.Видимость         = ФормаДляРегистрацииБезЗаписи;
	//
	Если ФормаДляРегистрацииБезЗаписи Тогда
		ЭлементыФормы.ОсновныеДействияФормыДляРежимаБезЗаписи.Кнопки.ЗарегистрироватьИЗакрыть.КнопкаПоУмолчанию = Истина;
	КонецЕсли; 

    Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") 
		И НЕ ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "СтаршийМенеджерПодразделения") Тогда
		СообщитьОбОшибке("Вы не имеете права открывать заказы поставщикам!", Отказ);
 	КонецЕсли;

	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	яштФормаДокументаПриОткрытии(ЭтотОбъект, ЭтаФорма);

	СтруктураЗаказаПоставщикам = ЭтотОбъект;

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		Если ФормаДляРегистрацииБезЗаписи Тогда
			Если ЗначениеНеЗаполнено(Контрагент) И Товары.Количество() = 0 Тогда
				ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета, "Покупка");
				УстановитьНомерДокумента(ЭтотОбъект);
				//УстановитьДатуОплатыПоДоговору();
			КонецЕсли;
		Иначе
			ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета, "Покупка");
			УстановитьНомерДокумента(ЭтотОбъект);
			//УстановитьДатуОплатыПоДоговору();
		КонецЕсли;

		//{ Лапенков 20080829 Дату оплаты не заполняем даже при копировании
		ДатаОплаты= Дата('00010101');
    	//{ Лапенков 20080829 

	КонецЕсли;

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Цена");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("ЕдиницаХранения");

	// Установить ограничение - изменять видимоть колонок для таличной части 
	// "Возвратная тара".
	УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ВозвратнаяТара.Колонки, СтруктураКолонок);

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("СтавкаНДС");
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("ЕдиницаИзмерения");

	УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Товары.Колонки, СтруктураКолонок);
		
	Если НЕ ФормаДляРегистрацииБезЗаписи Тогда

		// Заполнить подменю выбора печатных форм.
		СписокМакетов = ЭтотОбъект.ПолучитьСписокПечатныхФорм();
		УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати,
		                                       СписокМакетов,
		                                       Новый Действие("ДействияФормыДействиеВыбратьПечатнуюФормы"));

		// Установить печатную форму по умолчанию.
		УстановитьКнопкуПечати(ЭтотОбъект.Метаданные().Имя, ЭтаФорма, СписокМакетов, мПечатнаяФормаПоУмолчанию);

	КонецЕсли; 
	

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Обновить содержание информационных строк.
	СформироватьНадписьДолга(ДоговорКонтрагента, Ссылка, ЭлементыФормы.ИнфНадписьДолга, , Истина);
	УстановитьЗаголовкиПоДоговору();

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;

	// Установить видимость колонок "ХарактеристикаНоменклатуры"
	УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	ПриИзмененииВидаСклада();
	ДоступностьНапоминаний();

	Если УстанавливатьМодифицированность Тогда
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли; 

	// Выполнить стандартные действия при определении режима использования плановой себестоимости
	ИзмененитьРежимИспользованияПлановойСебестоимости(ЭтотОбъект, ЭтаФорма, мВалютаРегламентированногоУчета);

	мПоследнееЗначениеЭлементаТайпинга = КонтактноеЛицо;

	// Итоговая информация об отклонение от плановой себестоимости
	СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	// { Лапенков 20080815 если уже были взаиморасчеты по заказу, то дату и число дней менять нельзя 
	ФлагМожноМенятьДатуОплаты= не яштПоЗаказуБылиВзаиморасчеты(Ссылка);
	ЭлементыФормы.ИспользоватьЧислоДнейДоОплаты.Доступность = ФлагМожноМенятьДатуОплаты;
	ЭлементыФормы.ДатаОплаты.Доступность = ФлагМожноМенятьДатуОплаты;
    ЭлементыФормы.ЧислоДнейДоОплаты.Доступность =  ФлагМожноМенятьДатуОплаты;
	// { Лапенков 20080815 

	КонецЕсли; 

	Если этотОбъект.ССайта или РольДоступна("ПолныеПрава") тогда //+++ 05.11.2013
		ЭтаФорма.ЭлементыФормы.НадписьНомерВходящегоДокумента.Видимость = истина;
		ЭтаФорма.ЭлементыФормы.НомерВходящегоДокумента.Видимость = истина;
		ЭтаФорма.ЭлементыФормы.ДатаВходящегоДокумента.Видимость = истина;
		
		ЭтаФорма.ЭлементыФормы.ОсновнаяПанель.Страницы.ДопПоля.Видимость = истина;
		ЭтаФорма.ЭлементыФормы.ДопПоля.ТолькоПросмотр = НЕ РольДоступна("ПолныеПрава");
	КонецЕсли;	
	
	ЭтаФорма.ЭлементыФормы.НадписьНомерКонтейнера.Видимость = истина;
	ЭтаФорма.ЭлементыФормы.НомерКонтейнера.Видимость = истина;
	
	ЭлементыФормы.Товары.Колонки.ПроцентОтклоненияОтСуммыПлановойСебестоимости.Видимость = истина;//+++ 27.11.2014	
 	Если ВидЗаказа = 1 Тогда //синхронизация с сезонным
	  ЭлементыФормы.СезонныйЗаказДляСинхронизации.Видимость = Истина;
	  ЭлементыФормы.НадписьСезонныйЗаказДляСинхронизации.Видимость = Истина;
	  ЭлементыФормы.Товары.ТолькоПросмотр = Истина; //ЭлементыФормы.Товары.Доступность = Ложь;	 //***заремила, т.к. если делать через доступность, нельзя даже проскроллить тч
	Иначе 
	  ЭлементыФормы.СезонныйЗаказДляСинхронизации.Видимость = Ложь;
	  ЭлементыФормы.НадписьСезонныйЗаказДляСинхронизации.Видимость = Ложь;
	  ЭлементыФормы.Товары.ТолькоПросмотр = Ложь;	
    конецЕсли; 
  
	Если не РольДоступна("ДополнительныеПраваВЭД") Тогда
		ЭлементыФормы.ДействияФормы.Кнопки.СоздатьДокументы.Доступность = ЛОжь;	
	КонецЕсли;
	
	ДоступностьДатаПоступленияУстановить();
	
	//ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документ_ЗаказПоставщику;
	//ОбновитьСвойства();
	
	ДатыДоставкиРежимРедактированияУстановить();
	
	//Для Белорусов показываем еще 1 колонку
	Если Контрагент = Справочники.Контрагенты.НайтиПоКоду("95728") тогда
		Этаформа.ЭлементыФормы.Товары.Колонки.ЦенаБ.Видимость = Истина;
	конецЕсли;
	
КонецПроцедуры//приОткрытии()

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
Процедура ДоступностьДатаПоступленияУстановить()
	
	Если ЗначениеЗаполнено(ДатаПоступления) Тогда
		РазрешитьМенятьДатуПоступленияВЗаказеПоставщику = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьМенятьДатуПоступленияВЗаказеПоставщику");
		ЭлементыФормы.ДатаПоступления.ТолькоПросмотр = НЕ РазрешитьМенятьДатуПоступленияВЗаказеПоставщику;
	КонецЕсли;
	
КонецПроцедуры // ДоступностьДатаПоступленияУстановить()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

		// Пересчитаем сумму взаиморасчетов.
	Если КурсВзаиморасчетов = 0 Тогда
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = 0;
	Иначе

		ЭлементыФормы.СуммаВзаиморасчетов.Значение = ФорматСумм(ПересчитатьИзВалютыВВалюту(ПолучитьСуммуДокументаСНДС(ЭтотОбъект),  
		                                             ВалютаДокумента, мТекущаяВалютаВзаиморасчетов,
		                                             КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета) , КурсВзаиморасчетов,
		                                             КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов));
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьКурса.Заголовок = ПолучитьИнформациюКурсаВалютыСтрокой(мТекущаяВалютаВзаиморасчетов, 
	                                                                                 КурсВзаиморасчетов,
	                                                                                 КратностьВзаиморасчетов,
	                                                                                 мВалютаРегламентированногоУчета,
	                                                                                 Истина);

	ОбновитьПодвал();

	СтраницаПанели = ЭлементыФормы.ОсновнаяПанель.Страницы;
	
	СтраницаПанели.Тара        .Заголовок = "Тара ("         + ВозвратнаяТара.Количество() + " поз.)";
	СтраницаПанели.Услуги      .Заголовок = "Услуги ("       + Услуги        .Количество() + " поз.)";
	СтраницаПанели.Товары.Заголовок = "Товары ("    + Товары.Количество() + " поз.)";

	УстановитьВидимость();

	ОбновлениеОтображенияВФормеПриТайпинге(ЭтаФорма, ЭтаФорма.ЭлементыФормы.КонтактноеЛицо, мОбработкаТайпинга, мТекстТайпинга);

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			
			ОбработкаПодбора(Товары, ЗначениеВыбора);

		ИначеЕсли Команда = "ПодборВТабличнуюЧастьУслуги" Тогда
			
			ОбработкаПодбора(Услуги, ЗначениеВыбора);
			
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
			
			ОбработкаПодбора(ВозвратнаяТара, ЗначениеВыбора);

		ИначеЕсли Команда = "ИзменениеТабличнойЧастиТовары" Тогда

			// Рассчитывает плановую себестоимость во всех строке табличной части документа
			РассчитатьПлановуюСебестоимостьВСтрокахТабЧасти(ЭтотОбъект, мВалютаРегламентированногоУчета);

		ИначеЕсли ЗначениеВыбора.Команда = "ЗаполнениеКомплектующих" Тогда

			Для Каждого ВыгружаемаяСтрока Из ЗначениеВыбора.Товары Цикл

				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Номенклатура               = ВыгружаемаяСтрока.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры = ВыгружаемаяСтрока.ХарактеристикаНоменклатуры;
				НоваяСтрока.ЕдиницаИзмерения           = ВыгружаемаяСтрока.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент                = ВыгружаемаяСтрока.Коэффициент;
				НоваяСтрока.Количество                 = ВыгружаемаяСтрока.Количество;
				НоваяСтрока.ЗаказПокупателя            = ЗначениеВыбора.ЗаказПокупателя;

				ПриИзмененииНоменклатурыТоваров(НоваяСтрока);

				// Рассчитываем реквизиты табличной части.
				РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
				РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);

				// Рассчитываем плановую себестоимость.
				РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(НоваяСтрока, ЭтотОбъект, мВалютаРегламентированногоУчета);

			КонецЦикла;
		ИначеЕсли ЗначениеВыбора.Команда = "ПодборПроданныхТоваров" Тогда
			Для каждого стр из ЗначениеВыбора.ВыбранныеТовары Цикл
				Если стр.флажок тогда
					нстр=Товары.Добавить();
					ЗаполнитьЗначенияСвойств(нстр,стр);
					РассчитатьКоличествоМестТабЧасти(нстр, ЭтотОбъект);
					РассчитатьСуммуТабЧасти(нстр, ЭтотОбъект);
					РассчитатьСуммуНДСТабЧасти(нстр, ЭтотОбъект);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	//17.04.15 если заказ на основании заказа по ОТХ то попробуем создать Операцию списания по ОТХ и поступление ТиУ
	Если Найти(Комментарий,"# Заказ по ответственному хранению")>0 тогда
		СоздатьДокументыПоОТХ(истина);
	КонецЕсли;
	
КонецПроцедуры // ПослеЗаписи()

// Обработчик внешнего события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	Если глТорговоеОборудование <> Неопределено Тогда
		Если Событие = "BarCodeValue" Тогда

			ИмяТекущейСтраницы = ЭтаФорма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
			Если ИмяТекущейСтраницы = "Товары" Тогда

				Команда         = "ПодборВТабличнуюЧастьТовары";
				Валюта          = ВалютаДокумента;
				ИмяТабличнойЧасти = "Товары";

			ИначеЕсли ИмяТекущейСтраницы = "Тара" Тогда

				Если ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
					Предупреждение("Не выбран договор контрагента!");
					Возврат;
				ИначеЕсли ЗначениеНеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
					Предупреждение("Не выбрана валюта взаиморасчетов по договору!");
					Возврат;
				КонецЕсли;

				Команда           = "ПодборВТабличнуюЧастьВозвратнаяТара";
				Валюта = ДоговорКонтрагента.ВалютаВзаиморасчетов;
				ИмяТабличнойЧасти = "ВозвратнаяТара";

			Иначе

				// Ничего не надо делать
				Возврат;

			КонецЕсли;

			ПредставлениеДок = Метаданные().Представление();
			ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);

			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("Команда"              , Команда);
			СтруктураПараметров.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
			СтруктураПараметров.Вставить("ТипЦен"               , ТипЦен);
			СтруктураПараметров.Вставить("Контрагент"           , Контрагент);
			СтруктураПараметров.Вставить("СпособЗаполненияЦен"  , Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов);
			СтруктураПараметров.Вставить("ВалютаЦены"           , Валюта);
			СтруктураПараметров.Вставить("ИмяТабличнойЧасти"    , ИмяТабличнойЧасти);

			глТорговоеОборудование.ОбработатьВнешнееСобытиеОтСканераДляФормы(ЭтаФорма, ЭтотОбъект, СтруктураПараметров, Данные);

		КонецЕсли;
	КонецЕсли;


КонецПроцедуры // ВнешнееСобытие()

// Процедура - обработчик события "ПриЗаписи" формы
//
Процедура ПриЗаписи(Отказ)
	//14.10.14 Смирнов транзитные заказы должны вводиться на основании сезонного заказа поставщику. 
	//Валюта нужна что бы обрабатывать только заказы китайцам
	СписокИсключаемыхПост = новый СписокЗначений;
	СписокИсключаемыхПост.Добавить(Справочники.Контрагенты.НайтиПоКоду("П012694")); //SHANDONG ZHONGYI RUBBER CO. LTD
	Если Транзит и не ЗначениеЗаполнено(Основание) и ВалютаДокумента=Справочники.Валюты.НайтиПоКоду("840") и СписокИсключаемыхПост.НайтиПоЗначению(Контрагент) = неопределено  тогда
		Отказ=истина;
		Сообщить("Заказ поставщику-транзит вводится только на основании сезонного заказа поставщику.",СтатусСообщения.Важное);
	конецЕсли;
	//Смирнов
	
	Если мОбновлятьВладельца Тогда
		ОповеститьОЗаписиНовогоОбъекта(Ссылка);
	КонецЕсли;
	
	//Если НЕ Отказ Тогда
	//	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений = Ссылка;
	//	Отказ = НЕ ОбработкаОбъектЗначенияСвойств.ЗаписатьЗначенияСвойств();
	//КонецЕсли;
	
КонецПроцедуры // ПриЗаписи()

// Процедура - обработчик события "ПередЗаписью" формы
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	// миронычев
	Если не УчитыватьНДС и не СуммаВключаетНДС тогда
		Сообщить("Проставте признак ""Учитывать НДС"" и ""Сумма Вкл. НДС"" Нажав на кнопку ""Цены и валюта...""!");
		Отказ = Истина;
		Возврат;
	КонецЕсли; 	
	
	Если ФормаДляРегистрацииБезЗаписи Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	Если ВидЗаказа=1 и не ЗначениеЗаполнено(СезонныйЗаказДляСинхронизации) тогда
		Сообщить("Не выбран сезонный заказ для синхронизации!");
		отказ=истина;
   конецЕсли;		
	
	Если НапомнитьОСобытии Тогда
		Если Ответственный.Пустая() Тогда
			Предупреждение("Выберите ответственное лицо, для напоминания.");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Если НЕ ПолучитьЗначениеПоУмолчанию(Ответственный, "ИспользоватьНапоминания") Тогда
			Предупреждение("Для ответственного лица, которое вы выбрали, недоступна система напоминаний.
						   |Для пользователя " + СокрЛП(Ответственный) + " необходимо установить флажок использования напоминаний.");
			Отказ = Истина;
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	
	//+++ 20.01.2016
	флМожно = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьРедактированиеЧужихДокументов");
	Если не флМожно тогда 
	 ПроверитьДоговорВЗаказеПокупателя(ЭтотОбъект,Отказ);
    КонецЕсли;
 
	Если ЭтаФорма.Модифицированность И ЭтаФорма.ВладелецФормы <> Неопределено И НЕ ЭтоНовый() Тогда
		мОбновлятьВладельца = Истина;
	КонецЕсли;
	
	Если ЭтаФорма.Модифицированность Тогда
		
		//+++ 02.06.2014 - ТОЛЬКО ДЛЯ ЭТИХ ПОСТАВЩИКОВ
		//списокКонтрагентовПоставщиков = новый Массив;
		//"94302"
		//"94442"
		//списокКонтрагентовПоставщиков.Добавить("91735"); //FREEMAN
		//списокКонтрагентовПоставщиков.Добавить("91535");// JIANGSU SAINTY MACHINERY I&E CORP. LTD
		//списокКонтрагентовПоставщиков.Добавить("92540");// FUJIAN SHUANGSHENG IM &EX CO., LTD
		//списокКонтрагентовПоставщиков.Добавить("93694"); //ZHEANGZHOU
		//списокКонтрагентовПоставщиков.Добавить("93695"); //NINGBO PARTNER INTERNATIONAL TRADE CO., LTD
		массивПоставщиковМиМ = новый массив;
		
		//+++ 22.12.2016  по свойству "ПриниматьЗаказыЧерезСайт И Поставщик"
		массивПоставщиковМиМ =	мПолучитьПоставщиковМиМ();  //22.12.2016
				
		//+++ 16.05.2014 - включаем флаг измененности для регистрации в плане обмена ОИМ в 
		Если ЭтотОбъект.Контрагент.ПриниматьЗаказыЧерезСайт и не Отказ 
		 //+++ 22.12.2016  поиск по массиву контр.
		 //	и списокКонтрагентовПоставщиков.Найти( СокрЛП(ЭтотОбъект.Контрагент.Код) )<>неопределено тогда 
			и массивПоставщиковМиМ.Найти(ЭтотОбъект.Контрагент)<>неопределено тогда  
			ЭтотОбъект.Проверен = Истина; //"флаг" изменения с ЯШТ для блокировки повторной записи из МиМ!
			//22.12.2016 - вес "приходит" из Коннекта, но при изменении в ЯШТ - отправляется в обратную сторону!
			ОбщийВес=Товары.Итог("Вес");  
		Иначе
			ЗаполнитьВесНетто(Товары);  // для всех "нормальных" заказов - вес считается автоматически!
			ОбщийВес=Товары.Итог("Вес");
		КонецЕсли;
		
	КонецЕсли;
	
	яштСменаПользователя(ЭтотОбъект, ЭтаФорма, глТекущийПользователь);
	
	//17.11.2015 КОНТРОЛЬ ДУБЛЕЙ - склеивает с одинаковой ценой, но разные строки для разных цен!	
	КоманднаяПанельТоварыСклеитьОдинаковыеСтроки(неопределено); //+++ 07.02.2014 - всегда проверять дубли строк - не надо!
	
	
	//26.01.17 Смирнов
	Если ВалютаДокумента<>Справочники.Валюты.НайтиПоКоду("643") тогда
		ПроверитьСтрокиДопРасходов();
		Если не РольДоступна("ПравоЗавершенияРаботыПользователей") и РежимЗаписи = РежимЗаписиДокумента.Проведение тогда
			текстОш="";
			Для каждого стр из ПлановыеДопРасходы цикл
				если стр.СуммаВзаиморасчетов=0 или стр.СуммаУпр=0 тогда
					текстОш = ТекстОш+Символы.ПС+"В строке: "+стр.НомерСтроки+" не заполнены суммы плановых доп. расходов";
					Отказ = Истина;
				КонецЕсли;
			КонецЦикла;
			Если текстОШ<>"" тогда
				Предупреждение(текстОш);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	   //07.02.2017  если манагеры делают не на основании заявки на возврат - согласовываем у руководителя направления продаж
	   Если ЗначениеЗаполнено(ГлТекущийПользователь.НаправлениеПродаж) тогда   
		   Если (ГлТекущийПользователь.НаправлениеПродаж.принадлежитЭлементу(Справочники.НаправленияПродаж.НайтиПоКоду("23"))или ГлТекущийПользователь.НаправлениеПродаж.принадлежитЭлементу(Справочники.НаправленияПродаж.НайтиПоКоду("26"))) и не согласованно тогда	
			   если ТипЗнч(Основание)<> Тип("ДокументСсылка.ЗаявкаНаВозвратТоваров") тогда	
				   //отправим на согласование
				   Если ГлТекущийПользователь = глТекущийПользователь.НаправлениеПродаж.Руководитель тогда
					   согласован = Истина;
				   иначе	 
					   
					   //+++ Шарафутдинов  21.02.2018 чтобы каждый раз при записи не создавалась задача
					   Если не ЭтоНовый()	тогда
						   Возврат
					   КонецЕсли;
					   //--- Шарафутдинов  21.02.2018
					   
					   РежимЗаписи = РежимЗаписиДокумента.Запись;
					   задача = задачи.ЗадачиПользователя.СоздатьЗадачу();
					   Задача.Исполнитель = глТекущийПользователь.НаправлениеПродаж.Руководитель;
					   задача.Товары.Очистить();
					   Для Каждого Стр Из Товары Цикл
						   ст = Задача.Товары.Добавить();
						   ЗаполнитьЗначенияСвойств(ст,стр);
					   КонецЦикла;		  
					   
					   задача.НаСогласование = Истина;
					   Задача.РеквизитДляСогласования = "Ссылка";
					   задача.Наименование = "Согласуйте заказ поставщику (не обратная продажа): "+строка(Контрагент.НаименованиеПолное); 
					   задача.Описание = "Создан Заказ поставщику от контрагента: "+строка(Контрагент.НаименованиеПолное)+ " на сумму "+Товары.Итог("сумма");
					   
					   задача.Инициатор   = глТекущийПользователь;
					   задача.Объект   	 = ссылка;
					   задача.Дата 		    = ТекущаяДата();
					   задача.СрокИсполнения = КонецДня( ТекущаяДата() ); 	
					   задача.Оповещение     = истина;
					   задача.СрокОповещения = ТекущаяДата(); 
					   Попытка
						   задача.Записать();
						   Сообщить(" + Сформирована ""Задача на согласование"" для сотрудника: "+строка(задача.Исполнитель), СтатусСообщения.Информация );	
					   исключение
						   Сообщить(" - Не удалось сформировать электронную Задачу на оповещение для сотрудника: "+строка(задача.Исполнитель), СтатусСообщения.Внимание );	
					   КонецПопытки;
				   конецЕсли;
				   
				   
				   
				   
			   конецЕсли;
		   конецЕсли;	
	   конецЕсли;
	   
	   Если Контрагент = Справочники.Контрагенты.НайтиПоКоду("95728") тогда //белорусы
		   //сравним, что бы итого было равно стоимости фоб+допники	
		   Расходы =  ПлановыеДопРасходы.Выгрузить(,"Номенклатура,СуммаФакт");
		   Если ДоставкаЖД тогда
		   стр=Расходы.Найти("FOR");
			иначе   
		   стр=Расходы.Найти("FOB");
		   конецЕсли;
		   Расходы.Удалить(стр);
		   СуммаДопРасходов = Расходы.Итог("СуммаФакт");
		   
		   //посчитаем сумму по FOB
		   итогоФОБ=0;
		   Для каждого стр из товары цикл
			   итогоФОБ=итогоФОБ+стр.Цена*стр.Количество;
		   конецЦикла;	
		   
		   Если ДоставкаЖД тогда
		   ст=ПлановыеДопРасходы.Найти("FOR");
			иначе   
		   ст=ПлановыеДопРасходы.Найти("FOB");
		   конецЕсли;
		   ст.суммаФакт = итогоФОБ;
		   
		   Если итогоФОБ+СуммаДопРасходов <>  товары.Итог("Сумма") тогда
			   Сообщить("Сумма документа не равна сумме FOB +доп.расходы");
			   Отказ=Истина;
		   конецЕсли;
	   конецесли;	   
		   
 КонецПроцедуры // ПередЗаписью()                                                                                         

 Процедура ПроверитьСтрокиДопРасходов()
	ВалютаДоллар = Справочники.Валюты.НайтиПоКоду("840");
	ВалютаРуб = Справочники.Валюты.НайтиПоКоду("643");
 
	 
	Если  ДоставкаЖД  тогда
	СтрокаДоставка = Справочники.Номенклатура.НайтиПоНаименованию("Доставка ж/д",,Справочники.Номенклатура.НайтиПоНаименованию("Услуги входящие 44"));
	СтрокаКомиссия = "Комиссия";
	СтрокаПрочие ="Прочие";
	СтрокаFob = "FOR";
	
	ПроверитьСтроку(СтрокаДоставка,ВалютаДоллар,120);
	ПроверитьСтроку(СтрокаКомиссия,ВалютаДоллар,30);
	ПроверитьСтроку(СтрокаПрочие,ВалютаДоллар,30);
	Если контрагент.Код = "91735" тогда
		ПроверитьСтроку(СтрокаFob,ВалютаДоллар,7);
	иначе
		ПроверитьСтроку(СтрокаFob,ВалютаДоллар,30);
	КонецЕсли;
	
	
	иначе
	СтрокаФрахт = Справочники.Номенклатура.НайтиПоНаименованию("Фрахт",,Справочники.Номенклатура.НайтиПоНаименованию("Услуги входящие 44")); //Фрахт
	СтрокаНалоги = Справочники.Номенклатура.НайтиПоНаименованию("Таможня, НДС",,Справочники.Номенклатура.НайтиПоНаименованию("Услуги входящие 44"));
	СтрокаПошлина = Справочники.Номенклатура.НайтиПоНаименованию("Таможенная пошлина",,Справочники.Номенклатура.НайтиПоНаименованию("Услуги входящие 44"));
	СтрокаБрокерские = Справочники.Номенклатура.НайтиПоНаименованию("Брокерские услуги",,Справочники.Номенклатура.НайтиПоНаименованию("Услуги входящие 44"));
	СтрокаДоставка = Справочники.Номенклатура.НайтиПоНаименованию("Автодоставка",,Справочники.Номенклатура.НайтиПоНаименованию("Услуги входящие 44"));
	СтрокаДоставкаГраница = Справочники.Номенклатура.НайтиПоНаименованию("Автодоставка (до границы)",,Справочники.Номенклатура.НайтиПоНаименованию("Услуги входящие 44"));
	
	СтрокаКомиссия = "Комиссия";
	СтрокаПрочие ="Прочие";
	СтрокаFob = "FOB";
	
	
	ПроверитьСтроку(СтрокаФрахт,ВалютаДоллар,60);
	ПроверитьСтроку(СтрокаНалоги,ВалютаДоллар,30);
	ПроверитьСтроку(СтрокаПошлина,ВалютаДоллар,30);
	ПроверитьСтроку(СтрокаБрокерские,ВалютаДоллар,120);
	ПроверитьСтроку(СтрокаДоставка,ВалютаДоллар,120);
	ПроверитьСтроку(СтрокаДоставкаГраница,ВалютаДоллар,120);
	ПроверитьСтроку(СтрокаКомиссия,ВалютаДоллар,30);
	ПроверитьСтроку(СтрокаПрочие,ВалютаДоллар,30);
	Если контрагент.Код = "91735" тогда
		ПроверитьСтроку(СтрокаFob,ВалютаДоллар,7);
	иначе
		ПроверитьСтроку(СтрокаFob,ВалютаДоллар,30);
	КонецЕсли;
	конецЕсли;
КонецПроцедуры

Процедура ПроверитьСтроку(Ном, вал,Отсрочка)
	стр = ПлановыеДопРасходы.Найти(Ном,"Номенклатура");
	Если стр = неопределено тогда
		нстр = ПлановыеДопРасходы.Добавить();
		нстр.Номенклатура = Ном;
		нстр.Валюта = вал;
		Если Ном="FOB" тогда
			нстр.СуммаВзаиморасчетов = СуммаДокумента;
			нстр.СуммаУпр = СуммаДокумента*КурсВзаиморасчетов;
		КонецЕсли;
		стр = нстр;
	ИначеЕсли стр.Номенклатура="FOB" и стр.СуммаВзаиморасчетов=0 тогда
		стр.СуммаВзаиморасчетов = СуммаДокумента;
		стр.СуммаУпр = СуммаДокумента*КурсВзаиморасчетов;
	КонецЕсли;
	
	если не значениеЗаполнено(стр.ДатаПлатежа) тогда
		стр.ДатаПлатежа=Дата+60*60*24*Отсрочка;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗакрытием" формы
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ФормаДляРегистрацииБезЗаписи Тогда
		Если ЭтаФорма.Модифицированность Тогда
			ОтветНаВопрос = Вопрос("Данные были изменены. Зарегистрировать изменения?", РежимДиалогаВопрос.ДаНетОтмена);;
			Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
				Если НЕ ЗарегистрироватьЗаказВОбработке() Тогда
					СтандартнаяОбработка = Ложь;
					Отказ = Истина;
					Возврат;
				КонецЕсли;
			ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
				СтандартнаяОбработка = Ложь;
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли; 
		ЭтаФорма.Модифицированность = Ложь;
	КонецЕсли; 
	
	СтруктураЗаказаПоставщикам = NULL;	
КонецПроцедуры // ПередЗакрытием()

// Процедура вызывается при нажатии кнопки "Анализ" командной панели формы,
// вызывает анализ текущего состояния заказа.
//
Процедура ДействияФормыДействиеАнализ(Кнопка)

	АнализЗаказа = Отчеты.АнализЗаказа.Создать();
	АнализЗаказаФорма = АнализЗаказа.ПолучитьФорму();

	АнализЗаказа.Заказ = Ссылка;

	АнализЗаказаФорма.Заголовок = "Анализ заказа поставщику";
	АнализЗаказа.СформироватьОтчет(АнализЗаказаФорма.ЭлементыФормы.ДокументРезультат);
	АнализЗаказаФорма.Открыть();

КонецПроцедуры // ДействияФормыДействиеАнализ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номенклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Услуги", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Услуги".
//
Процедура КоманднаяПанельУслугиПодбор(Кнопка)

	ДействиеПодбор(Услуги);

КонецПроцедуры // КоманднаяПанельУслугиПодбор()

// Процедура вызывается при нажатии кнопки "Изменить" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// группового изменения значений реквизитов табличной части "Товары".
//
Процедура КоманднаяПанельТоварыДействиеИзменить(Кнопка)

	// Получим контекст обработки
	ИзменениеТабличнойЧастиТовары      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменые формы.
	ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект       = ЭтотОбъект;
	ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента      = ЭтаФорма;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьНДС             = УчитыватьНДС; 
	ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице    = Ложь;
	ФормаИзменениеТабличнойЧастиТовары.мСпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
	
	//Перенесем табличную часть
	ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры // КоманднаяПанельТоварыДействиеИзменить()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	// Сохраняем текущие заначения реквизитов документа.
	ТекущиеЗначенияРеквизитов = Новый Структура();
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийТипЦен",				ТипЦен);
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийВалютаДокумента",	ВалютаДокумента); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийКурсДокумента",		КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийКратностьДокумента",	КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийУчитыватьНДС",		УчитыватьНДС); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийСуммаВключаетНДС",	СуммаВключаетНДС); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийИспользоватьПлановуюСебестоимость",	ИспользоватьПлановуюСебестоимость);

	СтруктураЗапрещенных = Неопределено;
	ТекущийКурс = РегистрыСведений.КурсыВалютДляПоступления.СрезПоследних(Дата,Новый структура("Валюта",ВалютаДокумента));
	Если  ТекущийКурс.Количество()>0 Тогда
		СтруктураЗапрещенных = Новый Структура("КурсВзаиморасчетов");
	конецЕсли;
	
	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,СтруктураЗапрещенных, "Товары");
	Если СтруктураЗначений <> Неопределено Тогда
		ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "Товары", мВалютаРегламентированногоУчета, , СтруктураЗначений);

		Если СтруктураЗначений.ТекущийТипЦен <> СтруктураЗначений.НовыйТипЦен Тогда
			ОбновитьФормуПодбора("ТипЦен");
		КонецЕсли;
	КонецЕсли;

	// Выполнить стандартные действия при изменении режима использования плановой себестоимости
	ИзмененитьРежимИспользованияПлановойСебестоимости(ЭтотОбъект, ЭтаФорма, мВалютаРегламентированногоУчета, ТекущиеЗначенияРеквизитов.ТекущийИспользоватьПлановуюСебестоимость);

	// Пересчитывает плановую себестоимость с учетом новой валюты и налогов
	ИзменитьВалютуНалогиПлановойСебестоимостиТабЧасти(ЭтотОбъект, ТекущиеЗначенияРеквизитов, мВалютаРегламентированногоУчета);

	// Итоговая информация об отклонение от плановой себестоимости
	СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

	УстановитьВидимость();

КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Возвратная тара", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеПодбор(Кнопка)

	ДействиеПодбор(ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	НапечататьДокументПоУмолчанию(ЭтотОбъект, глТекущийПользователь, мПечатнаяФормаПоУмолчанию);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
//
Процедура ДействияФормыДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = Кнопка.Текст;
		СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		СписокМакетов = ПолучитьСписокПечатныхФорм();
		СтрокаМакетаВСписке = СписокМакетов.НайтиПоЗначению(Кнопка.Имя);
		Если СтрокаМакетаВСписке <> Неопределено Тогда
			Печать(СтрокаМакетаВСписке.Значение);
			СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
			СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;			
			
		Иначе
			СсылкаВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Кнопка.Имя, "_", "-")));
			Печать(СсылкаВнешнейФормы);
			СтруктураМакета.Макет = СсылкаВнешнейФормы;
			СтруктураМакета.ПредставлениеМакета = Кнопка.Текст;
		КонецЕсли;		
		
		мПечатнаяФормаПоУмолчанию = СтруктураМакета.Макет;
		СохранитьТекущуюКнопкуПечати(ЭтотОбъект.Метаданные().Имя, СтруктураМакета);
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при выборе пункта меню "Заполнить по заказу" подменю 
// "Заполнить" командной панели товаров.
//
Процедура КоманднаяПанельТоварыЗаполнитьПоЗаказуПокупателя(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоЗаказуПокупателю(Товары, , , "ЗаказПокупателя");
	
КонецПроцедуры // КоманднаяПанельТоварыЗаполнитьПоЗаказуПокупателя()

// Процедура вызывается при выборе пункта меню "Заполнить по заказу покупателя комплектующие для комплектов" 
// подменю "Заполнить" командной панели товаров.
//
Процедура КоманднаяПанельТоварыЗаполнитьПоЗаказуПокупателяКомплектующие(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоЗаказуПокупателяКомплектующие(Товары, Истина);
	
КонецПроцедуры // КоманднаяПанельТоварыЗаполнитьПоЗаказуПокупателяКомплектующие()

// Процедура вызывается при выборе пункта меню "Добавить по заказу" подменю 
// "Заполнить" командной панели товаров.
//
Процедура КоманднаяПанельТоварыДобавитьПоЗаказуПокупателя(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоЗаказуПокупателю(Товары,,Ложь, "ЗаказПокупателя");
	
КонецПроцедуры // КоманднаяПанельТоварыДобавитьПоЗаказуПокупателя()

// Процедура вызывается при выборе пункта меню "Добавить по заказу покупателя комплектующие для комплектов" 
// подменю "Заполнить" командной панели товаров.
//
Процедура КоманднаяПанельТоварыДобавитьПоЗаказуПокупателяКомплектующие(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоЗаказуПокупателяКомплектующие(Товары,Ложь);
	
КонецПроцедуры // КоманднаяПанельТоварыДобавитьПоЗаказуПокупателяКомплектующие()

// Процедура вызывается при выборе пункта меню "Заполнить по внутреннему заказу" подменю 
// "Заполнить" командной панели товаров.
//
Процедура КоманднаяПанельТоварыЗаполнитьПоВнутреннемуЗаказу(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоВнутреннемуЗаказу(Товары, , , "ВнутреннийЗаказ");
	
КонецПроцедуры // КоманднаяПанельТоварыЗаполнитьПоВнутреннемуЗаказу()

// Процедура вызывается при выборе пункта меню "Заполнить по внутреннему заказу комплектующие для комплектов" 
// подменю "Заполнить" командной панели товаров.
//
Процедура КоманднаяПанельТоварыЗаполнитьПоВнутреннемуЗаказуКомплектующие(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоВнутреннемуЗаказуКомплектующие(Товары, Истина);
	
КонецПроцедуры // КоманднаяПанельТоварыЗаполнитьПоВнутреннемуЗаказуКомплектующие()

// Процедура вызывается при выборе пункта меню "Добавить по внутреннему заказу" подменю 
// "Заполнить" командной панели товаров.
//
Процедура КоманднаяПанельТоварыДобавитьПоВнутреннемуЗаказу(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоВнутреннемуЗаказу(Товары,,Ложь, "ВнутреннийЗаказ");
	
КонецПроцедуры // КоманднаяПанельТоварыДобавитьПоВнутреннемуЗаказу()

// Процедура вызывается при выборе пункта меню "Добавить по внутреннему заказу комплектующие для комплектов" 
// подменю "Заполнить" командной панели товаров.
//
Процедура КоманднаяПанельТоварыДобавитьПоВнутреннемуЗаказуКомплектующие(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоВнутреннемуЗаказуКомплектующие(Товары, Ложь);

КонецПроцедуры // КоманднаяПанельТоварыДобавитьПоВнутреннемуЗаказуКомплектующие()

// Процедура вызывается при выборе пункта меню "Заполнить по заказу" подменю 
// "Заполнить" командной панели возвратная тара.
//
Процедура КоманднаяПанельВозвратнаяТараЗаполнитьПоВнутреннемуЗаказу(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоВнутреннемуЗаказу(ВозвратнаяТара, , , "ВнутреннийЗаказ");
	
КонецПроцедуры // КоманднаяПанельВозвратнаяТараЗаполнитьПоВнутреннемуЗаказу()

// Процедура вызывается при выборе пункта меню "Добавить по внутреннему заказу" подменю 
// "Заполнить" командной панели тара.
//
Процедура КоманднаяПанельВозвратнаяТараДобавитьПоВнутреннемуЗаказу(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоВнутреннемуЗаказу(ВозвратнаяТара,,Ложь, "ВнутреннийЗаказ");
	
КонецПроцедуры

// Процедура вызывается при выборе пункта меню "Заполнить по заказу" подменю 
// "Заполнить" командной панели возвратная тара.
//
Процедура КоманднаяПанельВозвратнаяТараЗаполнитьПоЗаказуПокупателя(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоЗаказуПокупателю(ВозвратнаяТара, , , "ЗаказПокупателя");
	
КонецПроцедуры // КоманднаяПанельВозвратнаяТараЗаполнитьПоЗаказуПокупателя()

// Процедура вызывается при выборе пункта меню "Добавить по заказу" подменю 
// "Заполнить" командной панели товаров.
//
Процедура КоманднаяПанельВозвратнаяТараДобавитьПоЗаказуПокупателя(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоЗаказуПокупателю(ВозвратнаяТара,,Ложь, "ЗаказПокупателя");
	
КонецПроцедуры // КоманднаяПанельВозвратнаяТараДобавитьПоЗаказуПокупателя()

// Процедура вызывается при нажатии на кнопку Зарегистрировать командной панели формы
// ОсновныеДействияФормыДляРежимаБезЗаписи.
//
Процедура ОсновныеДействияФормыДляРежимаБезЗаписиЗарегистрировать(Кнопка)

	ЗарегистрироватьЗаказВОбработке();

КонецПроцедуры // ОсновныеДействияФормыДляРежимаБезЗаписиЗарегистрировать()

// Процедура вызывается при нажатии на кнопку ЗарегистрироватьИЗакрыть командной панели формы
// ОсновныеДействияФормыДляРежимаБезЗаписи.
//
Процедура ОсновныеДействияФормыДляРежимаБезЗаписиЗарегистрироватьИЗакрыть(Кнопка)
	
	Если НЕ ЗарегистрироватьЗаказВОбработке() Тогда
		Возврат;
	КонецЕсли;
	ЭтаФорма.Модифицированность = Ложь;
	Этаформа.Закрыть();
	
КонецПроцедуры

// Процедура вызывается при нажатии на кнопку Закрыть командной панели формы
// ОсновныеДействияФормыДляРежимаБезЗаписи.
//
Процедура ОсновныеДействияФормыДляРежимаБезЗаписиЗакрыть(Кнопка)

	Этаформа.Закрыть();

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ВыгрузитьВФорматеComerceMLФайл" ""подменю
//"Выгрузить в формате CommerceML." меню "Действия" командной панели формы
//
Процедура ДействияФормыВыгрузитьВФорматеComerceMLФайл(Кнопка)

	ОбработкаВыгрузки = Обработки.ВыгрузкаДанныхCommerceML.Создать();
	ОбработкаВыгрузки.ВыгрузитьИзДокумента(Ссылка);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ВыгрузитьВФорматеComerceMLЭлПочта" ""подменю
//"Выгрузить в формате CommerceML." меню "Действия" командной панели формы
//
Процедура ДействияФормыВыгрузитьВФорматеComerceMLЭлПочта(Кнопка)

	ОбработкаВыгрузки = Обработки.ВыгрузкаДанныхCommerceML.Создать();
	ОбработкаВыгрузки.ОтправитьИзДокумента(Ссылка);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ВыгрузитьВФорматеComerceMLФайлПанель"
// подменю "ВыгрузитьВФорматеComerceMLПанель" командной панели формы
//
Процедура ДействияФормыВыгрузитьВФорматеComerceMLФайлПанель(Кнопка)

	ОбработкаВыгрузки = Обработки.ВыгрузкаДанныхCommerceML.Создать();
	ОбработкаВыгрузки.ВыгрузитьИзДокумента(Ссылка);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ВыгрузитьВФорматеComerceMLЭлПочтаПанель"
// подменю "ВыгрузитьВФорматеComerceMLПанель" командной панели формы
//
Процедура ДействияФормыВыгрузитьВФорматеComerceMLЭлПочтаПанель(Кнопка)

	ОбработкаВыгрузки = Обработки.ВыгрузкаДанныхCommerceML.Создать();
	ОбработкаВыгрузки.ОтправитьИзДокумента(Ссылка);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	УстановитьДатуОплатыПоДоговору("ДатаДокумента");

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьНомерДокумента(ЭтотОбъект);

	// Выполняем общие действия для всех документов при изменении Организация.
	ПриИзмененииЗначенияОрганизации(ЭтотОбъект);

	// Надо установить банк. счет, если он принадлежит другой организации
	// или не заполнен.
	//Если ЗначениеНеЗаполнено(СтруктурнаяЕдиница) 
	// ИЛИ (ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") 
	//	  И (СтруктурнаяЕдиница.Владелец <> Организация)) Тогда

	//	СтруктурнаяЕдиница = Организация.ОсновнойБанковскийСчет;

	//КонецЕсли;

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);

	// Могли поменять договор.
	ПриИзмененииДоговора();

	Если ЗначениеНеЗаполнено(КонтактноеЛицо) Тогда
		КонтактноеЛицо = Контрагент.ОсновноеКонтактноеЛицо;
	Иначе
		Если КонтактноеЛицо.Владелец <> Контрагент Тогда
			КонтактноеЛицо = Контрагент.ОсновноеКонтактноеЛицо;
		КонецЕсли; 
	КонецЕсли;
	
	Если Контрагент = Справочники.Контрагенты.НайтиПоКоду("94072") тогда	   
	   ЭлементыФормы.КоманднаяПанельТовары.Кнопки.кнЦеныКлиента.Доступность = истина;
	иначе   
	   ЭлементыФормы.КоманднаяПанельТовары.Кнопки.кнЦеныКлиента.Доступность = ложь;
	КонецЕсли;

		//Для Белорусов показываем еще 1 колонку
	Если Контрагент = Справочники.Контрагенты.НайтиПоКоду("95728") тогда
		Этаформа.ЭлементыФормы.Товары.Колонки.ЦенаБ.Видимость = Истина;
	иначе
		Этаформа.ЭлементыФормы.Товары.Колонки.ЦенаБ.Видимость = Ложь;
	конецЕсли;

	
КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;

	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);

	// Заказ можно оформлять по договору, взаиморасчеты по которому ведутся или по заказам или по 
	// договору в целом.
	СтруктураДополнительныхПараметров = Новый Структура();
	СтруктураОтбора = Новый Структура();
	СписокСпособовВеденияВзаиморасчетов = Новый СписокЗначений();
	СписокСпособовВеденияВзаиморасчетов.Добавить(Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом);
	СписокСпособовВеденияВзаиморасчетов.Добавить(Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
	
	СтруктураОтбора.Вставить("ЗначениеОтбора", СписокСпособовВеденияВзаиморасчетов);
	СтруктураОтбора.Вставить("ВидСравненияОтбора", ВидСравнения.ВСписке);
	СтруктураДополнительныхПараметров.Вставить("ВедениеВзаиморасчетов", СтруктураОтбора);
	
	//ВЭД------------
	
	СписокТиповДоговоров  = Новый СписокЗначений;
	//СписокТиповДоговоров.Добавить(Справочники.ТипыДоговоров.TyreTechnology);
	СписокТиповДоговоров.Добавить(Справочники.ТипыДоговоров.WheelsGroupLimited);
	
	СтруктураОтбораТиповДоговоров = Новый Структура();
	СтруктураОтбораТиповДоговоров.Вставить("ЗначениеОтбора", СписокТиповДоговоров);
	СтруктураОтбораТиповДоговоров.Вставить("ВидСравненияОтбора", ВидСравнения.ВСписке);
	Если РольДоступна("ДополнительныеПраваВЭД") Тогда
	    СтруктураДополнительныхПараметров.Вставить("ТипДоговора", СтруктураОтбораТиповДоговоров);
	КонецЕсли;

	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
	                                        СписокВидовДоговоров, СтандартнаяОбработка, СтруктураДополнительныхПараметров);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "КурсВзаиморасчетов".
//
Процедура КурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Выберать дату курса и заполнить курс взаиморасчетов.
	ВыбратьКурсВзаиморасчетов(ЭтотОбъект);

КонецПроцедуры // КурсВзаиморасчетовНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода
// "Структурная единица". Процедура предлагает выбор пользователю из
// соттветствующих справочников и открывает форму списка для выбора 
// значения с отбором по текущему контрагенту. Выбранное значение обрабатывается 
// в процедуре-обработчике события формы "ОбработкаВыбора".
//
Процедура СтруктурнаяЕдиницаНачалоВыбора(Элемент, СтандартнаяОбработка)

НачалоВыбораЗначенияСтруктурнойЕдиницы(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода Склад
//
Процедура СкладНачалоВыбора(Элемент, СтандартнаяОбработка)

	//НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.НеРавно, СтандартнаяОбработка);

КонецПроцедуры // СкладНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода Склад.
//
Процедура СкладПриИзменении(Элемент)

	ПриИзмененииВидаСклада();

КонецПроцедуры // СкладПриИзменении()

// Процедура - обработчик события "Нажатие" кнопки "КнопкаПерерасчитатьДолг".
// Процедура вызывает сервисный механизм пересчета долга контрагента 
// по выбранному в форме договору взаиморасчетов и сделке.
//
Процедура КнопкаПерерасчитатьДолгНажатие(Элемент)

	СформироватьНадписьДолга(ДоговорКонтрагента, Ссылка, ЭлементыФормы.ИнфНадписьДолга);

КонецПроцедуры // КнопкаПерерасчитатьАвансДоговораНажатие()

// Процедура - обработчик события "ПриИзменении" элемента формы (Флажка) НапомнитьОСобытии 
//
Процедура НапомнитьОСобытииПриИзменении(Элемент)

	Если НапомнитьОСобытии Тогда
		Если ВремяНапоминания = Дата("00010101000000") Тогда
			ВремяНапоминания = Дата(ТекущаяДата() + ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ИнтервалНапоминанияДоНачалаСобытия")*60);
		КонецЕсли; 
	Иначе
		ВремяНапоминания = Дата("00010101000000");
	КонецЕсли; 
	
	ДоступностьНапоминаний();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" элемента формы ВремяНапоминания 
//
Процедура ВремяНапоминанияНачалоВыбора(Элемент, СтандартнаяОбработка)

	мЧас = Час(Элемент.Значение);
	мМинута = Минута(Элемент.Значение);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" элемента формы ВремяНапоминания 
//
Процедура ВремяНапоминанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Элемент.Значение = НачалоДня(ВыбранноеЗначение) + мЧас*60*60 + мМинута*60;
	мЧас = 0;
	мМинута = 0;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" элемента формы ВремяНапоминания 
//
Процедура ВремяНапоминанияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ВыбратьВремяИзСписка(Элемент, ЭтаФорма , Ответственный, СтандартнаяОбработка)
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы НадписьСобытия 
//
Процедура НадписьСобытияНажатие(Элемент)

	Если НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ФормаСобытий = Документы.Событие.ПолучитьФормуСписка(, , Ссылка);
	ФормаСобытий.ДокументСписок.Отбор.Основание.Значение = Ссылка;
	ФормаСобытий.ДокументСписок.Отбор.Основание.Использование = Истина;
	ФормаСобытий.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Основание.Доступность = Ложь;
	ФормаСобытий.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

функция получитьЦенуТовара(тов, КодТипаЦен="00005")
	
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
|	ЦеныНоменклатурыСрезПоследних.Цена
|ИЗ
|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура = &тов
|				И ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних";
Запрос.УстановитьПараметр("тов", тов);
Запрос.УстановитьПараметр("ТипЦен",справочники.ТипыЦенНоменклатуры.НайтиПоКоду(КодТипаЦен) );
Результат = Запрос.Выполнить();

если результат.Пустой() тогда
	возврат 0;
КонецЕсли;

Выборка = Результат.Выбрать();
Выборка.Следующий();

возврат выборка.цена;

КонецФункции

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Товары". Формирует данные в колонке "Всего".
// Формирует данные в колонке "ЕдиницаХранения".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.Товары.Колонки.Всего.Видимость Тогда
		ОформлениеСтроки.Ячейки.Всего.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Всего.Текст = ФорматСумм(ДанныеСтроки.Сумма
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС));
	КонецЕсли;

	//Если (Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый ИЛИ Склад.ВидСклада = Неопределено) И мРазрешитьНулевыеЦеныВОпте Тогда
	//	//ОформлениеСтроки.Ячейки.Сумма.АвтоОтметкаНезаполненного = Ложь;
	//	ОформлениеСтроки.Ячейки.Сумма.ОтметкаНезаполненного = Ложь;
	//КонецЕсли;

	ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

	// Рассчитать и показать в колонках информацию о сумме и отклонении от плановой себестоимости
	ЗаполнитьСуммуИОтклонениеОтПлановойСебестоимостиТабЧасти(ОформлениеСтроки, ДанныеСтроки, ЭтотОбъект);
	
 
	//+++( 26.11.2014 стандартное отклонение от "Закупочной" цены - никто не использует...
	// показываем макс. наценку от Кр.Опта
	Если ЭлементыФормы.Товары.Колонки.СуммаПлановойСебестоимости.Видимость 
		или ЭлементыФормы.Товары.Колонки.ПлановаяСебестоимость.Видимость
		или ЭлементыФормы.Товары.Колонки.СуммаОтклоненияОтСуммыПлановойСебестоимости.Видимость
		или ЭлементыФормы.Товары.Колонки.ПроцентОтклоненияОтСуммыПлановойСебестоимости.видимость тогда
		
		Если ДанныеСтроки.Номенклатура.ВидТовара <> перечисления.ВидыТоваров.Диски тогда
			ЭлементыФормы.Товары.Колонки.ПлановаяСебестоимость.ТекстШапки = "Цена Кр.Опт";
			ЭлементыФормы.Товары.Колонки.СуммаПлановойСебестоимости.ТекстШапки = "Сумма Кр.Опт";
			ЭлементыФормы.Товары.Колонки.СуммаОтклоненияОтСуммыПлановойСебестоимости.ТекстШапки = "Отклонение от Кр.Опта";
			ЭлементыФормы.Товары.Колонки.ПроцентОтклоненияОтСуммыПлановойСебестоимости.ТекстШапки = "% наценки от Кр.Опта";
		ОформлениеСтроки.ячейки.ПлановаяСебестоимость.ОтображатьТекст  = Истина;
		ОформлениеСтроки.ячейки.СуммаПлановойСебестоимости.ОтображатьТекст  = Истина;
		ОформлениеСтроки.ячейки.СуммаОтклоненияОтСуммыПлановойСебестоимости.ОтображатьТекст   = Истина;
		ОформлениеСтроки.ячейки.ПроцентОтклоненияОтСуммыПлановойСебестоимости.ОтображатьТекст = Истина;
		
		ценаКрОпт  = получитьЦенуТовара(ДанныеСтроки.Номенклатура);
		суммаКрОпт = ценаКрОпт * ДанныеСтроки.Количество;
		
		суммаОтклОтКрОпт = ДанныеСтроки.Сумма - суммаКрОпт;
		если суммаОтклОтКрОпт>0	тогда //цена закупки больше кр.опта!
			ОформлениеСтроки.цветТекста = webцвета.Красный;
		иначеесли суммаОтклОтКрОпт=0	тогда
			ОформлениеСтроки.цветТекста = webцвета.ТемноКрасный;
		КонецЕсли;	
		процСкидки = ?(суммаКрОпт = 0 , 999.9,  суммаОтклОтКрОпт/суммаКрОпт*100 );
		
		ОформлениеСтроки.ячейки.ПлановаяСебестоимость.текст = формат(ценаКрОпт,"ЧДЦ=2; ЧГ=3,0");
		ОформлениеСтроки.ячейки.СуммаПлановойСебестоимости.текст = формат(ценаКрОпт * ДанныеСтроки.Количество,"ЧДЦ=2; ЧГ=3,0");
		ОформлениеСтроки.ячейки.СуммаОтклоненияОтСуммыПлановойСебестоимости.текст = формат(суммаОтклОтКрОпт,"ЧДЦ=2; ЧГ=3,0");
		ОформлениеСтроки.ячейки.ПроцентОтклоненияОтСуммыПлановойСебестоимости.текст = формат(процСкидки,"ЧДЦ=1")+"%";
		
		КонецЕсли;
	КонецЕсли;
	//+++)
	
	//+++ расцветка по статусу 
		Если ДанныеСтроки.статус = перечисления.СтатусыСтрокЗаказа.Отменен тогда
		   ОформлениеСтроки.ЦветФона = WebЦвета.СветлоРозовый;
		//ИначеЕсли ДанныеСтроки.статус = перечисления.СтатусыСтрокЗаказа.Получен тогда
		//   ОформлениеСтроки.ЦветФона = WebЦвета.НейтральноЗеленый;
	КонецЕсли;
	
	//***2018.08.13 Задача 44909
	Если ЭлементыФормы.Товары.Колонки.ШтрихКод.Видимость Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Владелец", ДанныеСтроки.Номенклатура);
		Запрос.Текст = "ВЫБРАТЬ
		               |	Штрихкоды.Штрихкод
		               |ИЗ
		               |	РегистрСведений.Штрихкоды КАК Штрихкоды
		               |ГДЕ
		               |	Штрихкоды.Владелец = &Владелец";
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			ОформлениеСтроки.Ячейки.ШтрихКод.УстановитьТекст(Результат.Штрихкод);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ПриОкончанииРедактирования" табличной части "Товары".
//
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	// Итоговая информация об отклонение от плановой себестоимости
	СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

КонецПроцедуры // ТоварыПриОкончанииРедактирования()

// Процедура - обработчик события "ПослеУдаления" табличной части "Товары".
//
Процедура ТоварыПослеУдаления(Элемент)

	// Итоговая информация об отклонение от плановой себестоимости
	СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

КонецПроцедуры // ТоварыПослеУдаления()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Рассчитываем плановую себестоимость.
	РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти);

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Рассчитываем плановую себестоимость.
	РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	НачалоВыбораНоменклатурыКонтрагента(Элемент, СтандартнаяОбработка, Контрагент, СтрокаТабличнойЧасти.Номенклатура);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	// Сохраняем текущее значение коэффициента
	СтароеЗначениеКоэффициента = ЭлементыФормы.Товары.ТекущиеДанные.Коэффициент;

	// Выполнить общие действия для всех документов при изменении Единица.
	ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	// Пересчитываем плановую себестоимость.
	ПриИзмененииЕдиницыТабЧастиПлановаяСебестоимость(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект, СтароеЗначениеКоэффициента);

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	РассчитатьКоличествоТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода процента
// розничной наценки в строке табличной части "Товары".
//
Процедура ТоварыПроцентРозничнойНаценкиПриИзменении(Элемент)


КонецПроцедуры // ТоварыПроцентРозничнойНаценкиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены в рознице
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаВРозницеПриИзменении(Элемент)


КонецПроцедуры // ТоварыЦенаВРозницеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	
КонецПроцедуры // ТоварыСуммаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Суммы.
	ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект, глТекущийПользователь);

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ УСЛУГИ

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Услуги".
//
Процедура УслугиКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Услуги".
//
Процедура УслугиЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);


КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Услуги".
//
Процедура УслугиСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Суммы.
	ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект, глТекущийПользователь);

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Услуги".
//
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Заказ"
// в строке табличной части "Услуги".
//
Процедура УслугиЗаказПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Новый Структура(), "Услуги");
	
КонецПроцедуры // УслугиЗаказНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "Номенклатура"
// в строке табличной части "Услуги".
//
Процедура УслугиНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Заполняем реквизиты табличной части.
	ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект); 
	СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
	                                         Контрагент, ТипЦен, ДоговорКонтрагента, Дата,ВалютаДокумента, УчитыватьНДС,СуммаВключаетНДС);
	ЗаполнитьЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры // УслугиНоменклатураПриИзменении()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "ВозвратнаяТара". Формирует данные в колонке "ЕдиницаХранения".
//
Процедура ВозвратнаяТараПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.ВозвратнаяТара.Колонки.ЕдиницаХранения.Видимость Тогда
		ОформлениеСтроки.Ячейки.ЕдиницаХранения.УстановитьТекст(ДанныеСтроки.Номенклатура.ЕдиницаХраненияОстатков);
	КонецЕсли;

	ПоказатьКодАртикул(мКолонкиВозвратнаяТара, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении возвратной тары.
	ПриИзмененииВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

	// Заполнить реквизиты табличной части.
	ЗаполнитьЦенуВозвратнойТарыТабЧастиПоступление(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект); 

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении суммы.
	ПриИзмененииСуммыВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараСуммаПриИзменении()

Процедура ТоварыЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Новый Структура(), "Товары");

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода заказа покупателя
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараЗаказПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Новый Структура(), "ВозвратнаяТара");

КонецПроцедуры // ВозвратнаяТараЗаказПокупателяНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - РАБОТЫ С КОНТАКТНЫМИ ЛИЦАМИ

// Процедура - обработчик события "НачалоВыбора" элемента формы КонтактноеЛицо 
//
Процедура КонтактноеЛицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НачалоВыбораКонтактногоЛицаКонтрагента(Элемент, СтандартнаяОбработка, Контрагент);
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" элемента формы КонтактноеЛицо 
//
Процедура КонтактноеЛицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпинга(), Тип("СправочникСсылка.КонтактныеЛица"));
	
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" элемента формы КонтактноеЛицо 
//
Процедура КонтактноеЛицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпинга(), ЭтаФорма, Тип("СправочникСсылка.КонтактныеЛица"), мОбработкаТайпинга, мТекстТайпинга, мПоследнееЗначениеЭлементаТайпинга, Ложь);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы КонтактноеЛицо 
//
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	Если НЕ ЗначениеНеЗаполнено(КонтактноеЛицо) Тогда
		Если ЗначениеНеЗаполнено(Контрагент) ИЛИ КонтактноеЛицо.ОбъектВладелец <> Контрагент Тогда
			Контрагент = КонтактноеЛицо.ОбъектВладелец;
			ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);
			ПриИзмененииДоговора();
		КонецЕсли; 
	КонецЕсли; 
	
	мПоследнееЗначениеЭлементаТайпинга = Элемент.Значение;
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") 
		И НЕ ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "СтаршийМенеджерПодразделения") Тогда  //+++ 09.07.2014
		СообщитьОбОшибке("У Вас недостаточно прав для открытия структуры подчиненности!");
		Возврат;
 	КонецЕсли;

	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПеретаскивание()

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "ВозвратнаяТара");
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ВозвратнаяТараПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ВозвратнаяТараПеретаскивание()

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Услуги".
//
Процедура УслугиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Услуги");
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // УслугиПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Услуги".
//
Процедура УслугиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // УслугиПеретаскивание()

Процедура ДействияФормыЗаявка(Кнопка)
	
	// Вставить содержимое обработчика.
	ЗаявкаОбработка = Обработки.Заявка;	
	Форма = ЗаявкаОбработка.ПолучитьФорму("Форма");
	Форма.открытьмодально();	

КонецПроцедуры

Процедура ПодразделениеКомпанииПриИзменении(Элемент)
    Если ВидЗаказа = 0 Тогда	
	УстановитьНомерДокумента(ЭтотОбъект);	
    конецЕсли;	
КонецПроцедуры

Процедура КоманднаяПанельТоварыЗаполнитьПоЗаказуОтвХр(Кнопка)
	основание = документы.ЗаказПоОтветственномуХранению.ПустаяСсылка();
	Если ввестиЗначение(основание, "Выберите документ") тогда
		Товары.Очистить();
		табЗнач = основание.Товары.Выгрузить();
		Товары.Загрузить(табЗнач);
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанельТоварыДобавитьПоЗаказуОтвХр(Кнопка)
основание = документы.ЗаказПоОтветственномуХранению.ПустаяСсылка();
	Если ввестиЗначение(основание, "Выберите документ") тогда
	//	Товары.Очистить();
		табЗнач = основание.Товары.Выгрузить();
		для каждого стр1 из табЗнач цикл
			стр2 = Товары.добавить();
			ЗаполнитьЗначенияСвойств(стр2, стр1);
			стр2.ЕдиницаИзмерения = стр2.Номенклатура.ЕдиницаХраненияОстатков;
			стр2.Коэффициент = 1;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ОснованиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	форма1 = документы.ЗаказПоставщикуСезонный.ПолучитьФормуВыбора();
	
	форма1.ДокументСписок.Отбор.Контрагент.ВидСравнения = ВидСравнения.Равно;
	форма1.ДокументСписок.Отбор.Контрагент.Значение = ЭтотОбъект.Контрагент;
	форма1.ДокументСписок.Отбор.Контрагент.Использование = истина;
	
	форма1.ДокументСписок.Отбор.Подразделение.ВидСравнения = ВидСравнения.Равно;
	форма1.ДокументСписок.Отбор.Подразделение.Значение = ЭтотОбъект.Подразделение;
	форма1.ДокументСписок.Отбор.Подразделение.Использование = истина;

	Основание = форма1.ОткрытьМодально();
КонецПроцедуры

//+++ 07.02.2014
Процедура КоманднаяПанельТоварыСклеитьОдинаковыеСтроки(Кнопка)
	мод = ЭтаФорма.Модифицированность;
 табЗнач1 = Товары.Выгрузить();	
 Товары.Свернуть("Номенклатура, Основание, ЕдиницаИзмерения, Цена, СтавкаНДС", "Вес, Количество, КоличествоМест, Сумма, СуммаНДС");    //04.07.2017 - Основание
 
 //проверка контрольных сумм
 Если Товары.Количество()=табЗнач1.Количество() тогда
	 Товары.Загрузить(табЗнач1);
	 Если Кнопка<>неопределено тогда //перед записью - не надо выводить!
	 Предупреждение("В Таблице товаров - нет повторений.
	 				|    Товары - не изменилась.", 30);
	 КонецЕсли;				
	ЭтаФорма.Модифицированность = мод; // как было!
 Иначе	 
	//пересчитаем по формулам! 
	разнНДС = 0; разн=0; 
	Для Каждого стр1 из Товары Цикл 
		сумм1 = стр1.Сумма;
		
		//пересчет "средней" цены
	 	стр1.Цена = ?(стр1.Количество>0, Окр(сумм1 / стр1.Количество,2), сумм1);
	//+++ 26.01.2016 - НЕ НАДО пересчитывать!
	//стр1.Сумма = окр(стр1.Цена * стр1.Количество,2);   //обратный расчет - для бухгалтерии надо!
	
		Если сумм1<>стр1.Сумма тогда
			Сообщить(строка(стр1.НомерСтроки)+") Общая сумма товара "+строка(стр1.Номенклатура.Код)+" изменилась на "+формат(стр1.Сумма-сумм1,"ЧДЦ=2")+ЭтотОбъект.ВалютаДокумента.Наименование, СтатусСообщения.Внимание);
		КонецЕсли;
		
			стр1СуммаНДС = стр1.СуммаНДС;
//+++ 26.01.2016 - НЕ НАДО пересчитывать!
		 //стр1.СуммаНДС =  Окр( РассчитатьСуммуНДС(стр1.Сумма,
		 //							   УчитыватьНДС, СуммаВключаетНДС,
		 //							   ПолучитьСтавкуНДС(стр1.СтавкаНДС)), 2);
		Если стр1СуммаНДС<>стр1.СуммаНДС тогда
			Сообщить(строка(стр1.НомерСтроки)+") Общая сумма НДС по товару "+строка(стр1.Номенклатура.Код)+" изменилась на "+формат(стр1.СуммаНДС-стр1СуммаНДС,"ЧДЦ=2")+ЭтотОбъект.ВалютаДокумента.Наименование, СтатусСообщения.Внимание);
		КонецЕсли;												
		
	КонецЦикла;
	
	 Если товары.Итог("СуммаНДС") <> табЗнач1.Итог("СуммаНДС") тогда
		 разнНДС = строка( товары.Итог("СуммаНДС") - табЗнач1.Итог("СуммаНДС"));
	 КонецЕсли;	 
	 Если товары.Итог("Сумма") <> табЗнач1.Итог("Сумма") тогда
		 разн = строка( товары.Итог("Сумма") - табЗнач1.Итог("Сумма") );
	 КонецЕсли;	 
	 
	 Если разнНДС<>0 или разн<>0 тогда
		 Режим = РежимДиалогаВопрос.ДаНет;
		 //Ответ = Вопрос
		 Предупреждение("Устранены "+строка(табЗнач1.Количество() - Товары.Количество())+" повторяющихся товаров!"+?(разн = 0,"
		 |Общая Сумма - не изменилась.", " 
		 |ВНИМАНИЕ! Общая Сумма изменилась на "+строка(разн)+" "+ЭтотОбъект.ВалютаДокумента.Наименование+" из-за округления!")  +?(разнНДС = 0,"
		 |Общая Cумма НДС - не изменилась.", "
		 |ВНИМАНИЕ! Общая Сумма НДС именилась на "+строка(разнНДС)+ " "+ЭтотОбъект.ВалютаДокумента.Наименование+" !"), 30);
		 //+"Отменить ""Склеивание""?", Режим, 0);
	   //Если Ответ = КодВозвратаДиалога.Да Тогда
	   // Товары.Загрузить(табЗнач1);
	   //КонецЕсли;
   	Иначе
	 Предупреждение("В Таблице товаров устранено "+строка(табЗнач1.Количество()-Товары.Количество())+" повторений.
	 			    |    Общая Сумма и Сумма НДС - не изменились.", 30);					
	 КонецЕсли;	
 КонецЕсли;
 
КонецПроцедуры


Процедура ДействияФормыОтправитьЗаказПоставщикуПоЭлПочте(Кнопка)
	Если ЭтотОбъект.ЭтоНовый() тогда
		Предупреждение("Перед отправкой необходимо сохранить документ!");
		возврат;
	КонецЕсли;	
	рез = яштПоставщики.ОтправитьПисьмоПоставщику(ЭтотОбъект);
	Если рез тогда
		Комментарий = формат(ТекущаяДата(),"ДЛФ=D")+" @  "+Комментарий;
	КонецЕсли;  		
КонецПроцедуры


//+++ 24.06.2014
процедура подтверждено(знач1)
	для каждого стр1 из Товары цикл
		стр1.Статус = знач1;
	КонецЦикла;	
КонецПроцедуры

Процедура КоманднаяПанельТоварыВсеПодтверждено(Кнопка)
	подтверждено(перечисления.СтатусыСтрокЗаказа.Подтвержден);
	Статус = перечисления.СтатусыЗаказов.Подтвержден;
КонецПроцедуры

Процедура КоманднаяПанельТоварыВсеБезОтвета(Кнопка)
	подтверждено(перечисления.СтатусыСтрокЗаказа.ПустаяСсылка());
	Статус = перечисления.СтатусыЗаказов.ВОбработке;
КонецПроцедуры

Процедура КоманднаяПанельТоварыВсеНеПодтверждено(Кнопка)
	подтверждено(перечисления.СтатусыСтрокЗаказа.Отменен);
	Статус = перечисления.СтатусыЗаказов.Отменен;
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	Если не ЭтотОбъект.ЭтоНовый() тогда
		Если (ЭтотОбъект.Статус = перечисления.СтатусыЗаказов.ПустаяСсылка() 
			     или ЭтотОбъект.Статус = перечисления.СтатусыЗаказов.Новый)
			и НЕ (Ссылка.Статус = перечисления.СтатусыЗаказов.ПустаяСсылка() 
			     или Ссылка.Статус = перечисления.СтатусыЗаказов.Новый) тогда
				 Предупреждение("Нельзя изменять статус с "+Ссылка.Статус+" на "+ЭтотОбъект.Статус+"!",30);
				  Статус = Ссылка.Статус;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//30.06.2014
Процедура КоманднаяПанельТоварыЦенаКонтрагента(Кнопка)
	
	Если ЭтотОбъект.ЭтоНовый() тогда
		Предупреждение("Предварительно Запишите документ!");
		возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПоставщикуТовары.Номенклатура,
	               |	ЗаказПоставщикуТовары.НомерСтроки КАК НомерСтроки,
	               |	ЗаказПоставщикуТовары.Цена
	               |ПОМЕСТИТЬ ВТ_Заказ
	               |ИЗ
	               |	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	               |ГДЕ
	               |	ЗаказПоставщикуТовары.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗаказПоставщику.Номенклатура,
	               |	ЗаказПоставщику.НомерСтроки КАК НомерСтроки,
	               |	ЗаказПоставщику.Цена,
	               |	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК Цена1
	               |ИЗ
	               |	ВТ_Заказ КАК ЗаказПоставщику
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	               |				&Дата,
	               |				Номенклатура В (ВЫБРАТЬ ВТ_Заказ.Номенклатура
	               |										ИЗ ВТ_Заказ)
	               |				И ТипЦен = &ТипЦен
	               |				И Валюта = &Валюта
				   |					) КАК ЦеныНоменклатуры
	               |		ПО ЗаказПоставщику.Номенклатура = ЦеныНоменклатуры.Номенклатура
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Дата",   Дата);   // цены на дату документа
	Запрос.УстановитьПараметр("ТипЦен", справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00001") );
	Запрос.УстановитьПараметр("Валюта", ссылка.ВалютаДокумента ); //16.11.2016 - не было параметра
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		Если выборка.Цена1 <> 0 и выборка.Цена1<>выборка.Цена тогда
			сообщить(строка(Выборка.НомерСтроки)+") Цена: "+ строка(выборка.Цена)+" >> "+строка(выборка.Цена1) );
		товары[Выборка.НомерСтроки-1].Цена = выборка.Цена1;
		ТоварыЦенаПриИзменении(неопределено);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяСуднаПортыЗаполнитьИзФайла(Кнопка)
	Если СуднаПортыПерегруза.Количество()>0 тогда
		Если Вопрос("Табличная часть не пустая, переписать из файла?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да тогда
			СуднаПортыПерегруза.Очистить();
			ЗагрузитьПортыИзФайла();
		КонецЕсли;
	Иначе
		ЗагрузитьПортыИзФайла();
	КонецЕсли;
КонецПроцедуры
	
процедура ЗагрузитьПортыИзФайла()
	Сформировали=ложь;
	Попытка
		Эксель = Новый COMОбъект("Excel.Application");
		ПутьКФайлу="\\Novikova\Таблица11\таблица 11.xls";
		Файл = Новый Файл(ПутьКФайлу);
		Если Не Файл.Существует() Тогда
			Сообщить("Файл не существует!");
			Возврат;
		КонецЕсли; 
		Книга   = Эксель.Workbooks.Open(ПутьКФайлу);
		КоличествоЛистов = Книга.Sheets.Count;
		НомерЛиста=1;
		СписокЛистов=новый СписокЗначений;
		Пока НомерЛиста <= КоличествоЛистов Цикл
			СписокЛистов.Добавить(Книга.Sheets(НомерЛиста).Name);
			НомерЛиста=НомерЛиста+1;
		КонецЦикла;
		ЛистСезон=СписокЛистов.ВыбратьЭлемент("Укажите сезон");
		Если ЛистСезон<>неопределено тогда
			КолонкаПортВыгрузки = "K";
			КолонкаПортПрихода  = "N";
			КолонкаКонтейнер    = "I";
			КолонкаЛиния        = "M";
			КолонкаСудна        = "R";
			КолонкаПорты        = "S";
			
			КонтейнерИзДока=СокрЛП(НомерКонтейнера);
			Если КонтейнерИзДока<>"" тогда
				//Сформировали=истина;
				//ДокОб.СуднаПортыПерегруза.Очистить();
				Лист                = Книга.Worksheets(ЛистСезон.Значение);
				НСтр = Лист.Columns(КолонкаКонтейнер).Find(КонтейнерИзДока);
				Если НСтр<>Неопределено тогда
					СтрокаExcel=НСтр.Row;
					
					Линия =  СокрЛП(Лист.Cells(СтрокаExcel,  КолонкаЛиния).Value);
					Судна =  Лист.Cells(СтрокаExcel,  КолонкаСудна).Value;
					Порты =  Лист.Cells(СтрокаExcel,  КолонкаПорты).Value;
					ПортВыгрузки =  Лист.Cells(СтрокаExcel,  КолонкаПортВыгрузки).Value;
					ПортПрихода =  Лист.Cells(СтрокаExcel,  КолонкаПортПрихода).Value;
					ПортыМасс=РазложитьСтрокуВМассивПодстрок(Порты, "/");
					СуднаМасс=РазложитьСтрокуВМассивПодстрок(Судна, "/");
					к=0;
					ЭлЛиния=Справочники.ЛинииПеревозки.НайтиПоНаименованию(Линия);
					Если не ЗначениеЗаполнено(ЭлЛиния) тогда
						ЭлЛиния=Справочники.ЛинииПеревозки.СоздатьЭлемент();
						ЭлЛиния.Наименование=Линия;
						ЭлЛиния.Записать();
					КонецЕсли;
					Если СокрЛП(Судна)<>"" тогда //в файле есть судна
						Сформировали=истина;
						СуднаПортыПерегруза.Очистить();
						Для каждого элСудно из СуднаМасс Цикл
							ПортИзФайла=СокрЛП(?(к=0,ПортВыгрузки,ПортыМасс[к-1]));
							ЭлПорт=Справочники.Порты.НайтиПоНаименованию(ПортИзФайла);
							Если не значениеЗаполнено(ЭлПорт) тогда
								ЭлПорт=Справочники.Порты.СоздатьЭлемент();
								ЭлПорт.Наименование=ПортИзФайла;
								ЭлПорт.Записать();
							КонецЕсли;
							стр=СуднаПортыПерегруза.Добавить();
							стр.ЛинияПеревозки=ЭлЛиния.Ссылка;
							стр.Судно=элСудно;
							стр.ПортПерегруза=ЭлПорт.Ссылка;
							
							к=к+1;
						КонецЦикла;
						Если врег(ПортПрихода)="УСТЬ" тогда
							ПортПрихода="СПБ УСТЬ-ЛУГА (Россия)";
							Перевозчик=Справочники.Контрагенты.НайтиПоКоду("93345");
						ИначеЕсли  врег(ПортПрихода)="СПБ" тогда
							ПортПрихода="СПБ (Россия)";
							Перевозчик=Справочники.Контрагенты.НайтиПоКоду("93345");
						ИначеЕсли врег(ПортПрихода)="НОВ" тогда
							ПортПрихода="Новороссийск (Россия)";
							Перевозчик=Справочники.Контрагенты.НайтиПоКоду("93405");
						ИначеЕсли врег(ПортПрихода)="ВЛАД" тогда
							ПортПрихода="Владивосток (Россия)";
							Перевозчик=Справочники.Контрагенты.НайтиПоКоду("93763");	
						КонецЕсли;	
						ЭлПорт=Справочники.Порты.НайтиПоНаименованию(ПортПрихода);
						Если не значениеЗаполнено(ЭлПорт) тогда
							ЭлПорт=Справочники.Порты.СоздатьЭлемент();
							ЭлПорт.Наименование=ПортПрихода;
							ЭлПорт.Записать();
						КонецЕсли;
						стр=СуднаПортыПерегруза.Добавить();
						//стр.ЛинияПеревозки=ЭлЛиния.Ссылка;
						стр.Судно=Перевозчик;
						стр.ПортПерегруза=ЭлПорт.Ссылка;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если Сформировали тогда
			Иначе
				Сообщить("В файле не найден контейнер с номером: '"+НомерКонтейнера+"' или в нем не заполнено судно!");
			КонецЕсли;
		КонецЕсли;
		Эксель.DisplayAlerts = 0; 
		Эксель.Application.Quit();
	Исключение
		Сообщить(ОписаниеОшибки());       
	КонецПопытки;
КонецПроцедуры

Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоПродажам(Кнопка)
	ФормаЗаполнения = ПолучитьФорму("ФормаПодбораНоменклатуры", ЭтаФорма);
	ФормаЗаполнения.Контрагент=Контрагент;
	ФормаЗаполнения.Открыть();

КонецПроцедуры


Функция ПроверитьНаличиеПТиУ()
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ПоступлениеТоваровУслуг.Ссылка
	             |ИЗ
	             |	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	             |ГДЕ
	             |	ПоступлениеТоваровУслуг.Сделка = &Сделка
	             |	И ПоступлениеТоваровУслуг.Проведен = ИСТИНА";
	Запрос.УстановитьПараметр("Сделка",Ссылка);
	Рез=Запрос.Выполнить().Выбрать();
	Если Рез.Количество()>0 тогда
		Возврат Истина;
	Иначе
		Возврат ложь;
	КонецЕсли;
КонецФункции

Функция ПроверитьНаличиеОперацииОТХ(ЗаказПоОТХ)
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ОперацияПоОтветственномуХранению.Ссылка
	             |ИЗ
	             |	Документ.ОперацияПоОтветственномуХранению КАК ОперацияПоОтветственномуХранению
	             |ГДЕ
	             |	ОперацияПоОтветственномуХранению.ДокументОснование = &ДокументОснование
	             |	И ОперацияПоОтветственномуХранению.Проведен = ИСТИНА";
	Запрос.УстановитьПараметр("ДокументОснование",ЗаказПоОТХ);
	Рез=Запрос.Выполнить().Выбрать();
	Если Рез.Количество()>0 тогда
		Возврат Истина;
	Иначе
		Возврат ложь;
	КонецЕсли;
КонецФункции

Процедура ВидЗаказаПриИзменении(Элемент)
	Если ВидЗаказа = 0 Тогда
	  ЭлементыФормы.СезонныйЗаказДляСинхронизации.Видимость = Ложь;
	  ЭлементыФормы.НадписьСезонныйЗаказДляСинхронизации.Видимость = Ложь;
	  ЭлементыФормы.Товары.Доступность = Истина;	
	  УстановитьНовыйномер("ТК");
	ИначеЕсли ВидЗаказа = 1 Тогда //синхронизация с сезонным
	  ЭлементыФормы.СезонныйЗаказДляСинхронизации.Видимость = Истина;
	  ЭлементыФормы.НадписьСезонныйЗаказДляСинхронизации.Видимость = Истина;
	  ЭлементыФормы.Товары.Доступность = Ложь;	
	  Если не значениеЗаполнено(СезонныйЗаказДляСинхронизации) Тогда
	  УстановитьНовыйномер("СЗ");
	  конецЕсли;
	иначеесли ВидЗаказа = 2 Тогда //Пресформы	
	  ЭлементыФормы.СезонныйЗаказДляСинхронизации.Видимость = Ложь;
	  ЭлементыФормы.НадписьСезонныйЗаказДляСинхронизации.Видимость = Ложь;
	  ЭлементыФормы.Товары.Доступность = Истина;	
	  УстановитьНовыйномер("ПФ");
	конецЕсли;  
	КонецПроцедуры

Процедура СезонныйЗаказДляСинхронизацииПриИзменении(Элемент)
		
		ЗаказДубль=Документы.ЗаказПоставщику.НайтиПоРеквизиту("СезонныйЗаказДляСинхронизации",СезонныйЗаказДляСинхронизации);	
        Если ЗаказДубль<>Документы.ЗаказПоставщику.ПустаяСсылка() и ЗаказДубль= ссылка Тогда
		 Сообщить("По выбранному сезонному заказу уже есть дубльЗаказ!");
		 СезонныйЗаказДляСинхронизации = "";
		иначе
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,СезонныйЗаказДляСинхронизации);
		Товары.Загрузить(СезонныйЗаказДляСинхронизации.Товары.Выгрузить());
		Номер = "СЗ"+Прав(СезонныйЗаказДляСинхронизации.Номер,СтрДлина(СезонныйЗаказДляСинхронизации.Номер)-2);
		конецЕсли;
	КонецПроцедуры

//для Никитина И.Б.	
Процедура КоманднаяПанельТоварыБазовая(Кнопка)
	
	масЦен = получитьБазовуюЦену();
	
	Для каждого стр1 из Товары цикл
		стр2 = масЦен.Найти( стр1.Номенклатура, "Номенклатура" );
		сообщить(строка(стр1.НомерСтроки)+") цена: "+строка(стр1.Цена)+" >> "+строка(стр2.Цена));
		стр1.Цена = стр2.Цена;
		
		РассчитатьСуммуТабЧасти(стр1, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(стр1, ЭтотОбъект);
	КонецЦикла;	
	
КонецПроцедуры


функция получитьБазовуюЦену()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ различные
	|вт1.Номенклатура
	|ПОМЕСТИТЬ ВТ_ТОВАРЫ
	|из &Табл как ВТ1;
	|////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	ЕстьNull(ЦеныНоменклатурыСрезПоследних.Цена,0) как Цена
	|ИЗ
	|	ВТ_ТОВАРЫ КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, ТипЦен = &ТипЦенБазовая
	|															и Номенклатура в (выбрать вт2.Номенклатура из ВТ_ТОВАРЫ как вт2)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО Товары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура";
	Запрос.УстановитьПараметр( "Табл", ЭтотОбъект.Товары.Выгрузить(,"Номенклатура, Цена") );
	Запрос.УстановитьПараметр( "Дата", ТекущаяДата() );
	Запрос.УстановитьПараметр( "ТипЦенБазовая", справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00008") );

	Результат = Запрос.Выполнить();
	ТаблЦен   = Результат.Выгрузить();
	
	возврат таблЦен;
КонецФункции

Процедура ТоварыПриПолученииДанных(Элемент, ОформленияСтрок)
	итогОбъем = 0;	
Для каждого ОформлениеСтроки из ОформленияСтрок Цикл
	
	ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;	
    ПоказатьОбъем(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецЦикла;

//+++ 12.07.2012 - итоги по всей таблице, а не только по видимой части!
// общ.модули  яштПрочее.ВычислитьОбъемНоменклатуры(      в кубометрах!
Если мКолонкиТовары.Объем.Видимость Тогда
	итогОбъем = 0;
для каждого стр1 из Товары Цикл
	итогОбъем = итогОбъем + стр1.Количество * ВычислитьОбъемНоменклатуры(стр1.Номенклатура);
КонецЦикла;

ЭлементыФормы.Товары.Колонки.Объем.ТекстПодвала = строка(итогОбъем);
КонецЕсли;

КонецПроцедуры

Процедура ПлановыеДопРасходыВалютаПриИзменении(Элемент)
	ПересчитатьСуммыУпр(ЭлементыФормы.ПлановыеДопРасходы.ТекущиеДанные);
КонецПроцедуры

Процедура ПересчитатьСуммыУпр(стр)
	Если стр.Валюта = ВалютаДокумента тогда
		стр.СуммаУпр = стр.СуммаВзаиморасчетов*КурсВзаиморасчетов;
	Иначе
		стр.СуммаУпр = стр.СуммаВзаиморасчетов;
	КонецЕсли;
КонецПроцедуры

Процедура ПлановыеДопРасходыСуммаВзаиморасчетовПриИзменении(Элемент)
	ПересчитатьСуммыУпр(ЭлементыФормы.ПлановыеДопРасходы.ТекущиеДанные);
КонецПроцедуры

Процедура КоманднаяПанель2кнПересчитатьДопРасходы(Кнопка)
	Ответ = Вопрос("Пересчитать налоги?",РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да тогда
		Если ДоставкаЖД  тогда
			
			
			
		иначе
			ТаможняНДС = Справочники.Номенклатура.НайтиПоНаименованию("Таможня, НДС",,Справочники.Номенклатура.НайтиПоНаименованию("Услуги входящие 44"));
			НомПошлина = Справочники.Номенклатура.НайтиПоНаименованию("Таможенная пошлина",,Справочники.Номенклатура.НайтиПоНаименованию("Услуги входящие 44"));
			Фрахт = Справочники.Номенклатура.НайтиПоНаименованию("Фрахт",,Справочники.Номенклатура.НайтиПоНаименованию("Услуги входящие 44")); //Фрахт
			Пошлина=0;
			НДС = 0;
			СуммаФрахт = 0;
			
			стр = ПлановыеДопРасходы.Найти(Фрахт,"Номенклатура");
			
			Если стр<>Неопределено тогда
				СуммаФрахт = стр.СуммаВзаиморасчетов;
				Пошлина = (Товары.Итог("Сумма")+СуммаФрахт)/100*5;  //5%
			КонецЕсли;
			СтавкаНДС_2019 = СтавкаНДСнаДату( ЭтотОбъект.Дата ); //+++ 09.01.2019
			чНДС = ПолучитьСтавкуНДС( СтавкаНДС_2019 );
			НДС = (Пошлина+Товары.Итог("Сумма")+СуммаФрахт)/100*чНДС;
			Сообщить("Пошлина: "+Пошлина+Символы.ПС+"НДС: "+НДС);
			Налоги = НДС;
			
			стр = ПлановыеДопРасходы.Найти(ТаможняНДС,"Номенклатура");
			Если стр<>неопределено тогда
				стр.СуммаВзаиморасчетов = Налоги;
			Иначе
				нстр = ПлановыеДопРасходы.Добавить();
				нстр.Номенклатура = ТаможняНДС;
				нстр.валюта = ВалютаДокумента;
				нстр.СуммаВзаиморасчетов = Налоги;
			КонецЕсли;
			
			стр = ПлановыеДопРасходы.Найти(НомПошлина,"Номенклатура");
			Если стр<>неопределено тогда
				стр.СуммаВзаиморасчетов = Пошлина;
			Иначе
				нстр = ПлановыеДопРасходы.Добавить();
				нстр.Номенклатура = НомПошлина;
				нстр.валюта = ВалютаДокумента;
				нстр.СуммаВзаиморасчетов = Пошлина;
			КонецЕсли;
		конецЕсли;	
		Для каждого стр из ПлановыеДопРасходы Цикл
			ПересчитатьСуммыУпр(стр);
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

Процедура ДействияФормыСоздатьДокументы(Кнопка)
	Если Подразделение.ВЭД и Организация = Справочники.Организации.НайтиПоКоду("00005") Тогда
		
		Если Основание.ДокументОснование.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.TyreTechnology Тогда
			
			//WG=======================================================================
			
			//ищем доки созданные по сделке, если есть перезаполним документ
			
			
			НовоеПосупление = документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
			НовоеПосупление.Заполнить(Ссылка);
			для каждого стр из НовоеПосупление.Товары Цикл
				стр.Склад = Справочники.Склады.НайтиПоКоду("02210");	
			КонецЦикла;
			
			НовоеПосупление.Дата = ТекущаяДата();
			НовоеПосупление.Организация = Справочники.Организации.НайтиПоКоду("00005");
			НовоеПосупление.Подразделение = Справочники.Подразделения.НайтиПоКоду("00166");
			НовоеПосупление.УстановитьНовыйНомер("WG");
			
			//Попытка
			//	НовоеПосупление.Записать(РежимЗаписиДокумента.Проведение);
			//Исключение
				НовоеПосупление.Записать(РежимЗаписиДокумента.Запись);
			//КонецПопытки;
			//ищем 
			
			НоваяРеал = документы.РеализацияТоваровУслуг.СоздатьДокумент();
			НоваяРеал.Заполнить(НовоеПосупление.Ссылка);
			для каждого стр из НоваяРеал.Товары Цикл
				стр.Склад = Справочники.Склады.НайтиПоКоду("02210");	
			КонецЦикла;
			
			НоваяРеал.Дата = ТекущаяДата();
			НоваяРеал.Организация = Справочники.Организации.НайтиПоКоду("00005");
			НоваяРеал.Подразделение = Справочники.Подразделения.НайтиПоКоду("00166");
			НоваяРеал.УстановитьНовыйНомер("WG");
			НоваяРеал.Основание = Ссылка;

			//Попытка
			//	НоваяРеал.Записать(РежимЗаписиДокумента.Проведение);
			//Исключение
				НоваяРеал.Записать(РежимЗаписиДокумента.Запись);
			//КонецПопытки;
			
			//YST----------------------------------------------------------------------
			
			НовоеПосупление2 = документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
			НовоеПосупление2.Заполнить(НоваяРеал.Ссылка);
			для каждого стр из НовоеПосупление2.Товары Цикл
				стр.Склад = Справочники.Склады.НайтиПоКоду("02142");	
			КонецЦикла;
			
			НовоеПосупление2.Дата = ТекущаяДата();
			НовоеПосупление2.Организация = Справочники.Организации.НайтиПоКоду("00006");
			НовоеПосупление2.Контрагент = Справочники.Контрагенты.НайтиПоНаименованию("Wheels Group");
			НовоеПосупление2.ДоговорКонтрагента = НовоеПосупление2.Контрагент.ОсновнойДоговорКонтрагента;
			НовоеПосупление2.Подразделение = Справочники.Подразделения.НайтиПоКоду("00162");
			НовоеПосупление2.Сделка = НовоеПосупление.Сделка;
			НовоеПосупление2.УстановитьНовыйНомер("YS");
			
			//Попытка
			//	НовоеПосупление2.Записать(РежимЗаписиДокумента.Проведение);
			//Исключение
				НовоеПосупление2.Записать(РежимЗаписиДокумента.Запись);
			//КонецПопытки;
			
			НоваяРеал2 = документы.РеализацияТоваровУслуг.СоздатьДокумент();
			НоваяРеал2.Заполнить(НовоеПосупление2.Ссылка);
			для каждого стр из НоваяРеал2.Товары Цикл
				стр.Склад = Справочники.Склады.НайтиПоКоду("02142");	
			КонецЦикла;
			
			НоваяРеал2.Дата = ТекущаяДата();
			НоваяРеал2.Организация = Справочники.Организации.НайтиПоКоду("00006");
			НоваяРеал2.Контрагент = Основание.ДокументОснование.Контрагент;
			НоваяРеал2.ДоговорКонтрагента = НоваяРеал2.Контрагент.ОсновнойДоговорКонтрагента;
			НоваяРеал2.Подразделение = Справочники.Подразделения.НайтиПоКоду("00162");
			НоваяРеал2.УстановитьНовыйНомер("YS");
			НоваяРеал2.Основание = Ссылка;

			//Попытка
			//	НоваяРеал2.Записать(РежимЗаписиДокумента.Проведение);
			//Исключение
				НоваяРеал2.Записать(РежимЗаписиДокумента.Запись);
			//КонецПопытки;
		ИначеЕсли  Основание.ДокументОснование.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдТранзит Тогда

			
			НовоеПосупление = документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
			НовоеПосупление.Заполнить(Ссылка);
			для каждого стр из НовоеПосупление.Товары Цикл
				стр.Склад = Справочники.Склады.НайтиПоКоду("12536");	
			КонецЦикла;
			
			НовоеПосупление.Дата = ТекущаяДата();
			НовоеПосупление.Организация = Справочники.Организации.НайтиПоКоду("00001");
			НовоеПосупление.Подразделение = Справочники.Подразделения.НайтиПоКоду("00198");
			НовоеПосупление.УстановитьНовыйНомер("ШТ");
			
			//Попытка
			//	НовоеПосупление.Записать(РежимЗаписиДокумента.Проведение);
			//Исключение
				НовоеПосупление.Записать(РежимЗаписиДокумента.Запись);
			//КонецПопытки;
			
			НоваяРеал = документы.РеализацияТоваровУслуг.СоздатьДокумент();
			НоваяРеал.Заполнить(НовоеПосупление.Ссылка);
			для каждого стр из НоваяРеал.Товары Цикл
				стр.Склад = Справочники.Склады.НайтиПоКоду("12536");	
			КонецЦикла;
			
			НоваяРеал.Дата = ТекущаяДата();
			НоваяРеал.Организация = Справочники.Организации.НайтиПоКоду("00001");
			НоваяРеал.Подразделение = Справочники.Подразделения.НайтиПоКоду("00198");
			НоваяРеал.ПодразделениеДохода = Справочники.Подразделения.НайтиПоКоду("00198");

			НоваяРеал.УстановитьНовыйНомер("ШТ");
			
			//Попытка
			//	НоваяРеал.Записать(РежимЗаписиДокумента.Проведение);
			//Исключение
				НоваяРеал.Записать(РежимЗаписиДокумента.Запись);
			//КонецПопытки;
		Иначе
			
			НовоеПосупление = документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
			НовоеПосупление.Заполнить(Ссылка);
			для каждого стр из НовоеПосупление.Товары Цикл
				стр.Склад = Справочники.Склады.НайтиПоКоду("02210");	
			КонецЦикла;
			
			НовоеПосупление.Дата = ТекущаяДата();
			НовоеПосупление.Организация = Справочники.Организации.НайтиПоКоду("00005");
			НовоеПосупление.Подразделение = Справочники.Подразделения.НайтиПоКоду("00166");
			НовоеПосупление.УстановитьНовыйНомер("WG");
			
			//Попытка
			//	НовоеПосупление.Записать(РежимЗаписиДокумента.Проведение);
			//Исключение
				НовоеПосупление.Записать(РежимЗаписиДокумента.Запись);
			//КонецПопытки;
			
			НоваяРеал = документы.РеализацияТоваровУслуг.СоздатьДокумент();
			НоваяРеал.Заполнить(НовоеПосупление.Ссылка);
			для каждого стр из НоваяРеал.Товары Цикл
				стр.Склад = Справочники.Склады.НайтиПоКоду("02210");	
			КонецЦикла;
			
			НоваяРеал.Дата = ТекущаяДата();
			НоваяРеал.Организация = Справочники.Организации.НайтиПоКоду("00005");
			НоваяРеал.Подразделение = Справочники.Подразделения.НайтиПоКоду("00166");
			НоваяРеал.УстановитьНовыйНомер("WG");
			
			//Попытка
			//	НоваяРеал.Записать(РежимЗаписиДокумента.Проведение);
			//Исключение
				НоваяРеал.Записать(РежимЗаписиДокумента.Запись);
			//КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//Процедура СвойстваИЗначенияСвойствоНачалоВыбора(Элемент, СтандартнаяОбработка)
//	
//	СтандартнаяОбработка = Ложь;
//	
//	ФормаВыбораСвойств = ПланыВидовХарактеристик.СвойстваОбъектов.ПолучитьФормуВыбора(, Элемент);
//	ФормаВыбораСвойств.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
//	ФормаВыбораСвойств.Отбор.Ссылка.Значение = СвойстваСписокВыбора;
//	ФормаВыбораСвойств.Отбор.Ссылка.Использование = Истина;
//	ФормаВыбораСвойств.Открыть();
//	
//КонецПроцедуры

//Процедура СвойстваИЗначенияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

//	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Свойство) Тогда
//		ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(Элемент.ТекущиеДанные);
//	КонецЕсли;

//КонецПроцедуры

//Процедура СвойстваИЗначенияСвойствоПриИзменении(Элемент)
//	
//	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные);
//	
//КонецПроцедуры

//Процедура СвойстваИЗначенияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
//	
//	Если Не ОтменаРедактирования Тогда
//		Модифицированность = Истина;
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ОбновитьСвойства()

//	Если ЭтоНовый() Тогда
//		Возврат;
//	КонецЕсли; 
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	СвойстваОбъектов.Ссылка КАК Свойство,
//	|	тзЗначенияСвойств.Значение
//	|ИЗ
//	|	ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
//	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//	|			ЗначенияСвойствОбъектов.Свойство КАК Свойство,
//	|			ЗначенияСвойствОбъектов.Значение КАК Значение
//	|		ИЗ
//	|			РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
//	|		ГДЕ
//	|			ЗначенияСвойствОбъектов.Объект = &Объект
//	|			И ЗначенияСвойствОбъектов.Свойство В(&Свойство)) КАК тзЗначенияСвойств
//	|		ПО СвойстваОбъектов.Ссылка = тзЗначенияСвойств.Свойство
//	|ГДЕ
//	|	СвойстваОбъектов.Ссылка В(&Свойство)";
//	
//	Запрос.УстановитьПараметр("Объект"  , Ссылка);
//	Запрос.УстановитьПараметр("Свойство", СвойстваСписокВыбора);
//	
//	Результат = Запрос.Выполнить();
//	Выгрузка  = Результат.Выгрузить();
//	
//	//ДатаОриентировочнойДоставкиНаСкладОбновить(Выгрузка);
//	ДатаОриентировочнойДоставкиНаСкладETD60Обновить(Выгрузка);
//	
//	//ОбработкаОбъектЗначенияСвойств.СвойстваИЗначения.Загрузить(Выгрузка);
//	
//КонецПроцедуры

//Процедура ДатаОриентировочнойДоставкиНаСкладОбновить(ТабСвойстваИЗначения)
//	
//	//Парам = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90243");  // Дата ориентировочной доставки на склад
//	Парам = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90244");  // Дата ориентировочн. доставки на склад (ETD)+60 дн.
//	Если ЗначениеЗаполнено(Парам) Тогда
//		СтрПарам = ТабСвойстваИЗначения.Найти(Парам, "Свойство");
//		Если НЕ СтрПарам = Неопределено Тогда
//			Если НЕ СтрПарам.Значение = ДатаПоступления Тогда
//				СтрПарам.Значение = ДатаПоступления;
//				Если НЕ ЭтоНовый() Тогда
//					МенеджерЗаписи = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
//					МенеджерЗаписи.Объект   = Ссылка;
//					МенеджерЗаписи.Свойство = Парам;
//					МенеджерЗаписи.Значение = ДатаПоступления;
//					МенеджерЗаписи.Записать();
//				КонецЕсли;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//	
//КонецПроцедуры // ДатаОриентировочнойДоставкиНаСкладОбновить()

//Процедура ДатаОриентировочнойДоставкиНаСкладETD60Обновить(ТабСвойстваИЗначения)
//	
//	Парам60 = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90244");  // Дата ориентировочн. доставки на склад (ETD)+60 дн.
//	Если ЗначениеЗаполнено(Парам60) Тогда
//		СтрПарам60 = ТабСвойстваИЗначения.Найти(Парам60, "Свойство");
//		Если (НЕ СтрПарам60 = Неопределено) И (НЕ ЗначениеЗаполнено(СтрПарам60.Значение)) Тогда
//			
//			ПарамETD = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90239");  // Дата отправки (ETD)
//			Если НЕ ПарамETD.Пустая() Тогда
//				СтрПарамETD = ТабСвойстваИЗначения.Найти(ПарамETD, "Свойство");
//				Если НЕ СтрПарамETD = Неопределено Тогда 
//					Если ЗначениеЗаполнено(СтрПарамETD.Значение) Тогда
//						СтрПарам60.Значение = СтрПарамETD.Значение + 60*24*60*60;
//						Если НЕ ЭтоНовый() Тогда
//							МенеджерЗаписи = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
//							МенеджерЗаписи.Объект   = Ссылка;
//							МенеджерЗаписи.Свойство = Парам60;
//							МенеджерЗаписи.Значение = СтрПарам60.Значение;
//							МенеджерЗаписи.Записать();
//						КонецЕсли;
//					КонецЕсли;
//				КонецЕсли;
//			КонецЕсли;
//			
//		КонецЕсли;
//	КонецЕсли;
//	
//КонецПроцедуры // ДатаОриентировочнойДоставкиНаСкладETD60Обновить()

//Процедура СвойстваИЗначенияПослеУдаления(Элемент)
//	
//	Модифицированность = Истина;
//	
//КонецПроцедуры

Процедура ДатаПоступленияПриИзменении(Элемент)
	
	//ДатаОриентировочнойДоставкиНаСкладОбновить(ОбработкаОбъектЗначенияСвойств.СвойстваИЗначения);
	
	ДатаОриентировочнойДоставкиНаСклад = ДатаПоступления;

КонецПроцедуры

//Процедура СвойстваИЗначенияЗначениеПриИзменении(Элемент)
//	
//	//ПриИзмененииЗаченияСвойства();
//	
//КонецПроцедуры

//Процедура ПриИзмененииЗаченияСвойства()
//	
//	ТекСтр = ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные;
//	
//	//Парам = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90243");  // Дата ориентировочной доставки на склад
//	Парам = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90244");  // Дата ориентировочн. доставки на склад (ETD)+60 дн.
//	Если НЕ Парам.Пустая() Тогда
//		Если ТекСтр.Свойство = Парам Тогда
//			ДатаПоступления = ТекСтр.Значение;
//		КонецЕсли;
//	КонецЕсли;
//	
//	ПарамETD = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90239");  // Дата отправки (ETD)
//	
//	Если НЕ ПарамETD.Пустая() Тогда
//		Если ТекСтр.Свойство = ПарамETD Тогда
//			ПарамETD_2 = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90244");  // Дата ориентировочн. доставки на склад (ETD)+60 дн.
//			СтрПарамETD_2 = ОбработкаОбъектЗначенияСвойств.СвойстваИЗначения.Найти(ПарамETD_2, "Свойство");
//			Если НЕ СтрПарамETD_2 = Неопределено Тогда
//				СтрПарамETD_2.Значение = ТекСтр.Значение + 60*24*60*60;
//				ДатаПоступления = СтрПарамETD_2.Значение;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//	
//КонецПроцедуры // ПриИзмененииЗаченияСвойства()

//Процедура СвойстваИЗначенияПередНачаломИзменения(Элемент, Отказ)
//	
//	ТекСтр = ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные;
//	
//	Если НЕ ТекСтр = Неопределено Тогда
//		//Парам1 = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90243");  // Дата ориентировочной доставки на склад
//		Парам1 = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90244");  // Дата ориентировочн. доставки на склад (ETD)+60 дн.
//		Парам2 = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90239");  // Дата отправки (ETD)
//		Если ТекСтр.Свойство = Парам1 ИЛИ ТекСтр.Свойство = Парам2 Тогда
//			РазрешитьМенятьДатуПоступленияВЗаказеПоставщику = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьМенятьДатуПоступленияВЗаказеПоставщику");
//			Если НЕ РазрешитьМенятьДатуПоступленияВЗаказеПоставщику Тогда
//				Отказ = Истина;
//				Сообщить("У вас нет прав на изменение этого параметра");
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//	
//КонецПроцедуры

Процедура ДатыДоставкиРежимРедактированияУстановить()
	
	РазрешитьМенятьДатуПоступленияВЗаказеПоставщику = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьМенятьДатуПоступленияВЗаказеПоставщику");
	
	Если НЕ ЗначениеЗаполнено(ДатаОтправкиETD) Тогда
		ЭлементыФормы.ДатаОтправкиETD.ТолькоПросмотр                = Ложь;
	Иначе
		ЭлементыФормы.ДатаОтправкиETD.ТолькоПросмотр                = НЕ РазрешитьМенятьДатуПоступленияВЗаказеПоставщику;
	КонецЕсли;
	
	ЭлементыФормы.ДатаОриентировочнойДоставкиНаСклад.ТолькоПросмотр = НЕ РазрешитьМенятьДатуПоступленияВЗаказеПоставщику;
	
КонецПроцедуры // ДатыДоставкиРежимРедактированияУстановить()

Процедура ДатаОтправкиETDПриИзменении(Элемент)
	
	ДатаОриентировочнойДоставкиНаСклад = ДатаОтправкиETD + 60*24*60*60;
	
	ДатаПоступления = ДатаОриентировочнойДоставкиНаСклад;
	
КонецПроцедуры

Процедура ДатаОриентировочнойДоставкиНаСкладПриИзменении(Элемент)
	
	ДатаПоступления = ДатаОриентировочнойДоставкиНаСклад;
	
КонецПроцедуры

Процедура КоманднаяПанельТоварыкнЦеныКлиента(Кнопка)
	СписокНом = Новый СписокЗначений;
	СписокНом.ЗагрузитьЗначения( Товары.ВыгрузитьКолонку("Номенклатура") );
	
	табЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(Контрагент, СписокНом);
	
	Для каждого стр из товары Цикл
		найденнаяСтрока = табЗнач1.найти(стр.Номенклатура,"Номенклатура");
		
		Если НайденнаяСтрока <> неопределено тогда
			стр.Цена = НайденнаяСтрока.ЦенаСоСкидкойПредоплаты;
		Иначе
			стр.Цена = 0;
		КонецЕсли;
		
		ЗаполнитьСтавкуНДСТабЧасти(стр, ЭтотОбъект); 
		РассчитатьСуммуТабЧасти(стр, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(стр, ЭтотОбъект);

	КонецЦикла;
КонецПроцедуры

Процедура КоманднаяПанель2РаспределитьНаЦену(Кнопка)
	Расходы =  ПлановыеДопРасходы.Выгрузить(,"Номенклатура,СуммаФакт");
	
	стр=Расходы.Найти("FOB");
	Если стр<>Неопределено тогда //BugFix: часто НЕ бывает таких строк!
		Расходы.Удалить(стр);
	КонецЕсли;	
    	
	СуммаДляРаспределения = Расходы.Итог("СуммаФакт");
	
	//посчитаем сумму по FOB
	 итогоСтоимость=0;
	Для каждого стр из товары цикл
		итогоСтоимость=итогоСтоимость+стр.Цена*стр.Количество;
    конецЦикла;	
	
	//распределим пропорционально стоимости
	ОстатосьРаспределить = СуммаДляРаспределения;
	Для каждого стр из товары цикл
		Если стр.НомерСтроки = товары.Количество() тогда
		Доля = Окр(ОстатосьРаспределить/стр.Количество,2);
		иначе	
		Доля = Окр(СуммаДляРаспределения*стр.Цена*стр.Количество/итогоСтоимость/стр.Количество,2);
		ОстатосьРаспределить =ОстатосьРаспределить -Доля*стр.Количество;
		конецесли;
		
		
		стр.ЦенаБ = стр.Цена+ Доля;
		стр.Сумма = стр.ЦенаБ*стр.Количество;
		
		
    конецЦикла;	
	
	
	
	
	
	
КонецПроцедуры

Процедура ТоварыЦенаБПриИзменении(Элемент)
	Стр = Элементыформы.Товары.ТекущиеДанные;
	Стр.Сумма = Стр.ЦенаБ*стр.Количество;

КонецПроцедуры

Процедура ДействияФормыСравнитьСценамиFOB(Кнопка)
			  ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоКоду(746); 
			  ИмяФайла = ПолучитьИмяВременногоФайла(); 
			  ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
			  ДвоичныеДанные.Записать(ИмяФайла); 
			  
			  Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
			  Отчет.Период = ТекущаяДата();
			  Отчет.Заказ = ссылка;
			  ТабДок = Новый ТабличныйДокумент;
			  Отчет.СкомпоноватьРезультат(ТабДок);
			  ТабДок.ТолькоПросмотр = Истина;
			  ТабДок.ОтображатьСетку = Ложь;
			  ТабДок.ОтображатьЗаголовки = Ложь;
              ТабДок.Показать();

КонецПроцедуры

Процедура КоманднаяПанель2ЗаписатьЗакрытыйПериод(Кнопка)
		Объект = Ссылка.ПолучитьОбъект();

	Для каждого стр из Объект.ПлановыеДопРасходы цикл
		строкаФормы = ЭлементыФормы.ПлановыеДопРасходы.Значение[стр.НомерСтроки-1];
		ЗаполнитьЗначенияСвойств(стр,строкаФормы);
	КонецЦикла;
	Объект.Записать(РежимЗаписиДокумента.Запись);
	ЭтаФорма.Модифицированность = ложь;

КонецПроцедуры

Процедура ДоставкаЖДПриИзменении(Элемент)
	плановыеДопРасходы.Очистить();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//

мОбновлятьВладельца = Ложь;
мЧас = 0;
мМинута = 0;

мОбработкаТайпинга                 = Ложь;
мТекстТайпинга                     = "";
мПоследнееЗначениеЭлементаТайпинга = Неопределено;

мКолонкиТовары         = ЭлементыФормы.Товары.Колонки;
мКолонкиВозвратнаяТара = ЭлементыФормы.ВозвратнаяТара.Колонки;

мРазрешитьНулевыеЦеныВОпте = РазрешитьНулевыеЦеныВОпте();

СвойстваСписокВыбора = Новый СписокЗначений();
СвойстваСписокВыбора.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90238"));  // Дата заявки на букинг от отправителя
СвойстваСписокВыбора.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90239"));  // Дата отправки (ETD)
СвойстваСписокВыбора.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90240"));  // Дата прихода в порт или на таможню (ETA)
СвойстваСписокВыбора.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90241"));  // Дата подачи ДТ
СвойстваСписокВыбора.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90242"));  // Дата выпуска ДТ
//СвойстваСписокВыбора.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90243"));  // Дата ориентировочной доставки на склад
СвойстваСписокВыбора.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90244"));  // Дата ориентировочн. доставки на склад (ETD)+60 дн.

