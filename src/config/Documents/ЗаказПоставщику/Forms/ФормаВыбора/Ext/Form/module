// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	Если ЭлементыФормы.ДокументСписок.ТекущиеДанные = Неопределено тогда
		Возврат
	КонецЕсли;

	НапечататьДвиженияДокумента(ЭлементыФормы.ДокументСписок.ТекущиеДанные.Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при выборе пункта подменю "Структура подчиненности" меню "Перейти".
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	Если ЭлементыФормы.ДокументСписок.ТекущиеДанные = Неопределено тогда
		Возврат
	КонецЕсли;
	
	ПоказатьСтруктуруПодчиненностиДокумента(ЭтаФорма.ЭлементыФормы.ДокументСписок.ТекущаяСтрока);
	
КонецПроцедуры

Процедура ПриЗакрытии()
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ПриОткрытии()
	Если  ДокументСписок.Отбор.ДокументыПоДоговоруКонтрагента.Использование Тогда
		Возврат;		
	Иначе
		УстановитьОтборВЖурналеДокументов(ДокументСписок.Отбор, ЭлементыФормы.ДокументСписок);
	КонецЕсли;	
	
	//+++( 01.04.2014 - отбор по подразделению ВСЕГДА!
	Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") Тогда
		Если Отбор.Найти("Подразделение") = Неопределено Тогда 
			Отбор.Добавить("Подразделение");
		КонецЕсли;
		Отбор["Подразделение"].Использование = Истина;
		Отбор["Подразделение"].ВидСравнения = ВидСравнения.Равно;
		Отбор["Подразделение"].Значение	    = ПараметрыСеанса.ТекущийПользователь.ОсновноеПодразделение;
		ЭлементыФормы.ДокументСписок.НастройкаОтбора["Подразделение"].Доступность = Ложь;
	КонецЕсли;
	//+++)

КонецПроцедуры

Процедура ДокументСписокПриПолученииДанных(Элемент, ОформленияСтрок)
	
	СписокСделок = Новый СписокЗначений;	
	Для Каждого Строка Из ОформленияСтрок Цикл
	
	    ТекущаяСтрока = Строка.ДанныеСтроки;
		Строка.Ячейки.СуммаДолга.Значение  = ТекущийДолг(ТекущаяСтрока.Ссылка.ДоговорКонтрагента, ТекущаяСтрока.Ссылка, Неопределено);
		//Если (ОформлениеСтроки.Ячейки.СуммаДолга.Значение<>неопределено) и (ОформлениеСтроки.Ячейки.СуммаДолга.Значение<>0) Тогда 
		//	ОформлениеСтроки.ЦветФона = WebЦвета.Желтый;
		//КонецЕсли;
		//Найдем дату оплаты и дату поступления
		// + Сакулина
	//	СписокСделок.Добавить(ТекущаяСтрока.Ссылка);
		// - Сакулина
	КонецЦикла;
	//ТаблицаДат = НайтиДатуПоставкиИОплаты(СписокСделок);
	//Если ТипЗнч(ТаблицаДат) = Тип("ТаблицаЗначений") Тогда
	//	Для Каждого Строка из ОформленияСтрок Цикл
	//		ТекущаяСтрока = Строка.ДанныеСтроки;

	//		НайденнаяСтрока = ТаблицаДат.Найти(ТекущаяСтрока.Ссылка, "Сделка");
	//		Если НайденнаяСтрока <> Неопределено Тогда
	//			Строка.Ячейки.ДатаОплаты.Значение = НайденнаяСтрока.ДатаОплаты;
	//			Строка.Ячейки.ДатаПоступления.Значение = НайденнаяСтрока.ДатаПоставки;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	

	
КонецПроцедуры

// + Сакулина  
Функция НайтиДатуПоставкиИОплаты(СписокСделок)
	// Это + по взаиморасчетам
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентамиОбороты.Сделка,
	|	СУММА(ВзаиморасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовПриход) КАК СуммаОплаты,
	|	МИНИМУМ(ВзаиморасчетыСКонтрагентамиОбороты.Период) КАК ДатаОплаты
	|ПОМЕСТИТЬ ВТ_Оплата
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(, , День, Сделка В (&СписокСделок)) КАК ВзаиморасчетыСКонтрагентамиОбороты
	|ГДЕ
	|	ВзаиморасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовПриход > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыСКонтрагентамиОбороты.Сделка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВзаиморасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовРасход) КАК СуммаПоставки,
	|	ВзаиморасчетыСКонтрагентамиОбороты.Сделка,
	|	МИНИМУМ(ВзаиморасчетыСКонтрагентамиОбороты.Период) КАК ДатаПоставки
	|ПОМЕСТИТЬ ВТ_Поставка
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(, , День, Сделка В (&СписокСделок)) КАК ВзаиморасчетыСКонтрагентамиОбороты
	|ГДЕ
	|	ВзаиморасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовРасход > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыСКонтрагентамиОбороты.Сделка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_Оплата.Сделка, 0) = 0
	|			ТОГДА ВТ_Поставка.Сделка
	|		ИНАЧЕ ВТ_Оплата.Сделка
	|	КОНЕЦ КАК Сделка,
	|	ЕСТЬNULL(ВТ_Поставка.ДатаПоставки, 0) КАК ДатаПоставки,
	|	ЕСТЬNULL(ВТ_Оплата.ДатаОплаты, 0) КАК ДатаОплаты
	|ИЗ
	|	ВТ_Оплата КАК ВТ_Оплата
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Поставка КАК ВТ_Поставка
	|		ПО ВТ_Оплата.Сделка = ВТ_Поставка.Сделка";
	Запрос.УстановитьПараметр("СписокСделок",СписокСделок);
	Выборка = Запрос.Выполнить().Выгрузить();
	Если Выборка.Количество() > 0 Тогда	
		Возврат Выборка;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции
// - Сакулина


//+++ февраль 2012
//Процедура - обработчик внешнего события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	Перем СписокДок;

	Если Не(ВводДоступен()) Тогда
		Возврат;
	КонецЕсли;

	Если глТорговоеОборудование <> Неопределено Тогда
		Если Событие = "BarCodeValue" Тогда
			Если глТорговоеОборудование.ПолучитьВсеДокументыПоШтрихКоду(Данные, СписокДок) Тогда
				Если СписокДок.Количество() = 1 Тогда
					ОткрытьЗначение(СписокДок[0].Ссылка);
				ИначеЕсли СписокДок.Количество() > 1 Тогда
					СтрокаДок = СписокДок.ВыбратьСтроку("Выберите один из найденных документов.");
					Если СтрокаДок<>Неопределено Тогда
						ОткрытьЗначение(СтрокаДок.Ссылка);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			глТорговоеОборудование.СканерПосылкаДанных(1);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры
