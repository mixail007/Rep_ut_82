Перем мВалютаРегламентированногоУчета Экспорт;
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой заказа или счета,
// разработанного методистами
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
//ЭКСПОРТ НУЖЕН!
Функция ПечатьСчетаЗаказа(Тип,ПечататьАртикул = Ложь) экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДатаПоступления,
	|	ДоговорКонтрагента,
	|	Контрагент КАК Поставщик,
	|	Организация,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;

	Макет = ПолучитьМакет("СчетЗаказ");

	// Определим параметры запроса и табличного документа  
	// в зависимости от необходимости отображения артикула поставщика  
	Если Тип = "ЗаказПоДаннымПоставщика" Тогда

		ВыводитьКоды    = Истина;
		ТекстКодАртикул = "Код";
		Колонка         = "Код"+ Символы.ПС + "поставщика"; //+++ 24.06.2014 для Пауэра надо Код!
		//Колонка         ="Артикул" + Символы.ПС + "поставщика";
		ОбластьШапки    = Макет.ПолучитьОбласть("ШапкаСКодом");
		ОбластьСтроки   = Макет.ПолучитьОбласть("СтрокаСКодом");

		Запрос.УстановитьПараметр("Контрагент", ЭтотОбъект.Контрагент);

		ТекстПоляТовараДляТоваров = "
		|	ВЫБОР КОГДА (НаименованиеКонтрагента ЕСТЬ NULL ИЛИ НаименованиеКонтрагента = """") ТОГДА ВложенныйЗапрос.Номенклатура.НаименованиеПолное ИНАЧЕ НаименованиеКонтрагента КОНЕЦ КАК Товар,";

		ТекстПоляТовараДляУслуг = "
		|	ВЫБОР КОГДА (ВЫРАЗИТЬ (НаименованиеНоменклатурыКонтрагента КАК Строка(100)) ЕСТЬ NULL ИЛИ ВЫРАЗИТЬ (НаименованиеНоменклатурыКонтрагента КАК Строка(100)) = """") ТОГДА ЗаказПоставщику.Номенклатура.НаименованиеПолное ИНАЧЕ ВЫРАЗИТЬ (НаименованиеНоменклатурыКонтрагента КАК Строка(100)) КОНЕЦ КАК Товар,";

		ТекстПоляАртикула = ",
			|	АртикулКонтрагента";

		ТекстВыборкиАртикула = ", 
		    |	ЕстьNull(КодНоменклатурыКонтрагента, ЗаказПоставщику.Номенклатура.Артикул) КАК АртикулКонтрагента"; //+++ 24.06.2014
		//	|	АртикулНоменклатурыКонтрагента КАК АртикулКонтрагента";
        	
		ТекстВыборкиНоменклатуры = ", 
			|	ВЫРАЗИТЬ(НаименованиеНоменклатурыКонтрагента КАК Строка(100)) КАК НаименованиеКонтрагента";

		ТекстИсточникАртикула = "
			|	ЛЕВОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
			|	ПО НоменклатураКонтрагентов.Номенклатура = ЗаказПоставщику.Номенклатура
			|	И  НоменклатураКонтрагентов.Контрагент = &Контрагент";

		ТекстГруппировкиАртикулаИНоменклатуры = ", 
			|ЕстьNull(КодНоменклатурыКонтрагента, ЗаказПоставщику.Номенклатура.Артикул),
			//|	АртикулНоменклатурыКонтрагента, //+++ 24.06.2014
			|	ВЫРАЗИТЬ(НаименованиеНоменклатурыКонтрагента КАК Строка(100))";

	Иначе

		ТекстПоляТовараДляТоваров = "
		|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Товар,";

		ТекстПоляТовараДляУслуг = "
		|	ЗаказПоставщику.Содержание КАК Товар,";

//----------------Всегда для поставщика надо его артикул!---------------------------		
		ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
//+++ 12.11.2014 - раскомментарено! по константе!
		Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул или ПечататьАртикул Тогда
			ВыводитьКоды    = Истина;
			Колонка         = "Артикул";
			ТекстКодАртикул = "Артикул";
		ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
			ВыводитьКоды    = Истина;
			Колонка         = "Код";
			ТекстКодАртикул = "Код";
		Иначе
			ВыводитьКоды    = Ложь;
			Колонка         = "";
			ТекстКодАртикул = "Код";
		КонецЕсли;

		Если ВыводитьКоды Тогда
			ОбластьШапки  = Макет.ПолучитьОбласть("ШапкаСКодом");
			ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаСКодом");
		Иначе
			ОбластьШапки  = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
		Конецесли;

		ТекстПоляАртикула                     = "";
		ТекстВыборкиАртикула                  = ""; 
		ТекстИсточникАртикула                 = "";
		ТекстГруппировкиАртикулаИНоменклатуры = ""; 

	КонецЕсли;

	ОбластьШапки.Параметры.Товар = "Товар";

	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="

	|ВЫБРАТЬ
		//+++ 01.08.2014
	|	ВложенныйЗапрос.НомерСтроки,	
	|	ВложенныйЗапрос.Номенклатура," + ТекстПоляТовараДляТоваров + "
	|	ВложенныйЗапрос.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.Характеристика,
	|	NULL КАК Серия" + ТекстПоляАртикула + "
	|ИЗ
	|	(
	|	ВЫБРАТЬ
		//+++ 01.08.2014
	|	ЗаказПоставщику.НомерСтроки,	
	|		ЗаказПоставщику.Номенклатура,
	|		ЗаказПоставщику.ЕдиницаИзмерения,
	|		ЗаказПоставщику.Цена                        КАК Цена,
	|		СУММА(ЗаказПоставщику.Количество)           КАК Количество,
	|		СУММА(ЗаказПоставщику.Сумма     )           КАК Сумма,
	|		СУММА(ЗаказПоставщику.СуммаНДС  )           КАК СуммаНДС,
	|		ЗаказПоставщику.ХарактеристикаНоменклатуры  КАК Характеристика" + ТекстВыборкиАртикула + ТекстВыборкиНоменклатуры + "
	|	ИЗ
	|		Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщику" + ТекстИсточникАртикула + "
	|
	|	ГДЕ
	|		ЗаказПоставщику.Ссылка = &ТекущийДокумент
	|//СтатусНеОтменен
	|
	|	СГРУППИРОВАТЬ ПО
			//+++ 01.08.2014
|		ЗаказПоставщику.НомерСтроки,
	|		ЗаказПоставщику.Номенклатура,
	|		ЗаказПоставщику.ЕдиницаИзмерения,
	|		ЗаказПоставщику.Цена,
	|		ЗаказПоставщику.ХарактеристикаНоменклатуры" + ТекстГруппировкиАртикулаИНоменклатуры + "
	
	|) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
		//+++ 01.08.2014
	|	ЗаказПоставщику.НомерСтроки,	
	|	ЗаказПоставщику.Номенклатура," + ТекстПоляТовараДляУслуг + "
	|	ЗаказПоставщику.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	ЗаказПоставщику.Количество,
	|	ЗаказПоставщику.Номенклатура.ЕдиницаХраненияОстатков,
	|	ЗаказПоставщику.Цена,
	|	ЗаказПоставщику.Сумма,
	|	ЗаказПоставщику.СуммаНДС,
	|	NULL,
	|	NULL КАК Серия" + ТекстВыборкиАртикула + "
	|	
	|ИЗ
	|	Документ.ЗаказПоставщику.Услуги КАК ЗаказПоставщику" + ТекстИсточникАртикула + "
	|
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &ТекущийДокумент
		//+++ 01.08.2014
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|АВТОУПОРЯДОЧИВАНИЕ
	|";
	//+++ 30.06.2014			  
	Если Константы.ИспользоватьОстаткиСтороннихПоставщиков.Получить() тогда
	Запрос.Текст = стрЗаменить(Запрос.Текст, "//СтатусНеОтменен", " 
	| И  ЗаказПоставщику.Статус <> Значение(перечисление.СтатусыСтрокЗаказа.Отменен)");
	КонецЕсли;
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	Если Тип = "ЗаказПоДаннымПоставщика" Тогда
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПоставщику_СчетЗаказПоДаннымПоставщика";
	Иначе
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПоставщику_СчетЗаказ";
	КонецЕсли;

	Руководители = ОтветственныеЛицаОрганизации(Шапка.Организация, Шапка.Дата,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;

	// Выводим шапку накладной
	ОбластьМакета                          = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Заказ поставщику");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика  = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");;
	ОбластьМакета.Параметры.Получатель              = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	Если ВыводитьКоды Тогда
		ОбластьШапки.Параметры.Колонка = Колонка;
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьШапки);

	Сумма    = 0;
	СуммаНДС = 0;

	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьСтроки.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьСтроки.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ОбластьСтроки.Параметры.Товар = ВыборкаСтрокТовары.Товар + ПредставлениеСерий(ВыборкаСтрокТовары);

		Если ВыводитьКоды Тогда
			Если Тип = "ЗаказПоДаннымПоставщика" Тогда
				ОбластьСтроки.Параметры.КодАртикул = ВыборкаСтрокТовары.АртикулКонтрагента;
			Иначе
				ОбластьСтроки.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
			КонецЕсли;
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьСтроки);

		Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
		СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;

	КонецЦикла;

	// Вывести Итого
	ОбластьМакета                 = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьМакета                    = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ФорматСумм(ЗапросТовары.Итог("СуммаНДС"));
		ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета                          = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи                          = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований " + ЗапросТовары.Количество()
	                                       + ", на сумму " + ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью  = СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета                    = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Отпустил = "/"+ Руководитель + "/";
	ОбластьМакета.Параметры.Получил  = "/"+ Бухгалтер + "/";
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаЗаказа()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета      = "Заказ" Тогда

		// печать заявки от покупателя
		ТабДокумент     = ПечатьСчетаЗаказа(ИмяМакета);

	ИначеЕсли ИмяМакета      = "ЗаказПоДаннымПоставщика" Тогда

		// печать заявки от покупателя
		ТабДокумент     = ПечатьСчетаЗаказа(ИмяМакета);
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();

	КонецЕсли; 

	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;

	СписокМакетов.Добавить("Заказ", "Заказ поставщику");
	СписокМакетов.Добавить("ЗаказПоДаннымПоставщика", "Заказ поставщику (по данным поставщика)");

	ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

#КонецЕсли

// Очищает ненужные строки табличных частей
//
Процедура ОчиститьНенужныеТабличныеЧасти() Экспорт

	// Если договор с комитентом, то надо почистить закладку "Услуги".
	Если Услуги.Количество() > 0
	   И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

		Услуги.Очистить();

	КонецЕсли;

КонецПроцедуры // ОчиститьНенужныеТабличныеЧасти()

// Заполняет переданную табличную часть по остаткам
//
// Параметры:
//  ТабличнаяЧасть - табличная часть.
//
Процедура ЗаполнитьТабличнуюЧастьПоОстаткам(ТабличнаяЧасть, ЗаказПокупателя = Неопределено) Экспорт

	Если Не ЗначениеНеЗаполнено(ЗаказПокупателя.ДатаОтгрузки) И Не ЗначениеНеЗаполнено(ДатаПоступления)
	   И (ЗаказПокупателя.ДатаОтгрузки < ДатаПоступления) Тогда
#Если Клиент Тогда
		Предупреждение("Отгрузку по заказу покупателя необходимо осуществить раньше даты поступления по данному документу!");
#Иначе
		СообщитьОбОшибке("Отгрузку по заказу покупателя необходимо осуществить раньше даты поступления по данному документу!");
#КонецЕсли 
		Возврат;
	КонецЕсли;

	Если ТабличнаяЧасть = Товары Тогда
		ЭтоТовары = Истина;
	Иначе
		ЭтоТовары = Ложь;
	КонецЕсли;
	
	Если ЭтоТовары Тогда
		ТоварТара = Перечисления.ТоварТара.Товар;
	Иначе
		ТоварТара = Перечисления.ТоварТара.Тара;
	КонецЕсли; 
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ТоварТара", ТоварТара);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);

	Если ЭтоТовары Тогда
		Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный);
	Иначе
		Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	КонецЕсли;

	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);

	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.Номенклатура,
	|	ЗаказыПокупателейОстатки.Номенклатура.Услуга          КАК Услуга,
	|	ЗаказыПокупателейОстатки.Номенклатура.СтавкаНДС       КАК СтавкаНДС,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя,
	|	ЗаказыПокупателейОстатки.Цена,
	|	ЗаказыПокупателейОстатки.ЕдиницаИзмерения             КАК ЕдиницаХранения,
	//+++ 25.11.2013 нам везде надо коэффициенты = 1
	//|	ЗаказыПокупателейОстатки.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	1				  КАК Коэффициент,
	
	|	ЗаказыПокупателейОстатки.СуммаУпрОстаток              КАК Сумма,
	|	ЗаказыПокупателейОстатки.КоличествоОстаток            КАК Заказано,
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток            КАК ЗаказаноПоставщику,
	|	ТоварыВРезервеНаСкладах.КоличествоОстаток             КАК Зарезервировано
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя = &ЗаказПокупателя
	|		                И СтатусПартии = &СтатусПартии) КАК ЗаказыПокупателейОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(, ЗаказПокупателя = &ЗаказПокупателя
	|		                И ЗаказПоставщику <> &Ссылка
	|		                И ТоварТара = &ТоварТара) КАК ЗаказыПоставщикамОстатки
	|		ПО ЗаказыПокупателейОстатки.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура 
	|		 И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры 
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, ДокументРезерва = &ЗаказПокупателя) КАК ТоварыВРезервеНаСкладах
	|		ПО ЗаказыПокупателейОстатки.Номенклатура = ТоварыВРезервеНаСкладах.Номенклатура 
	|		 И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ТоварыВРезервеНаСкладах.ХарактеристикаНоменклатуры";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		Если Выборка.Услуга Тогда
			Продолжить;
		КонецЕсли;
		
		Количество = ?(Выборка.Заказано = NULL, 0, Выборка.Заказано)
				   - ?(Выборка.Зарезервировано = NULL, 0, Выборка.Зарезервировано)
				   - ?(Выборка.ЗаказаноПоставщику = NULL, 0, Выборка.ЗаказаноПоставщику);
		Если Количество > 0 Тогда
			СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
			СтрокаТабличнойЧасти.Номенклатура    = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество      = Количество;
			СтрокаТабличнойЧасти.ЗаказПокупателя = Выборка.ЗаказПокупателя;

			Если ЭтоТовары Тогда
				СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
				СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаХранения;
				СтрокаТабличнойЧасти.СтавкаНДС                  = Выборка.СтавкаНДС;
				СтрокаТабличнойЧасти.Коэффициент                = Выборка.Коэффициент;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// Получить нужные цены запросом
	НовыйВалютаДокумента    = ?(ЭтоТовары, ВалютаДокумента, ДоговорКонтрагента.ВалютаВзаиморасчетов);
	СтруктураКурса          = ПолучитьКурсВалюты(НовыйВалютаДокумента, Дата);
	НовыйКурсДокумента      = СтруктураКурса.Курс;
	НовыйКратностьДокумента = СтруктураКурса.Кратность;

	СтруктураЗначенийЦен = Новый Структура;
	СтруктураЗначенийЦен.Вставить("ПерезаполнитьПроцентСкидкиНаценки", Ложь);
	СтруктураЗначенийЦен.Вставить("НовыйТипЦен",                       ТипЦен);
	СтруктураЗначенийЦен.Вставить("НовыйВалютаДокумента",              НовыйВалютаДокумента);
	СтруктураЗначенийЦен.Вставить("НовыйКурсДокумента",                НовыйКурсДокумента);
	СтруктураЗначенийЦен.Вставить("НовыйКратностьДокумента",           НовыйКратностьДокумента);
	СтруктураЗначенийЦен.Вставить("ТекущийВалютаДокумента",            ВалютаДокумента);
	СтруктураЗначенийЦен.Вставить("НовыйУчитыватьНДС",                 ?(ЭтоТовары, УчитыватьНДС, Истина));
	СтруктураЗначенийЦен.Вставить("НовыйСуммаВключаетНДС",             ?(ЭтоТовары, СуммаВключаетНДС, Истина));
	СтруктураЗначенийЦен.Вставить("ЕстьСтавкаНДСВТабличнойЧасти",      ?(ЭтоТовары, Истина, Ложь));

	РезультатЗапросаЦен = СформироватьЗапросПоЦенам(СтруктураЗначенийЦен, 
	                                                Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов, 
	                                                ТабличнаяЧасть.ВыгрузитьКолонку("Номенклатура"),
	                                                Дата, Контрагент, ДоговорКонтрагента);

	ВыборкаРезультатЗапросаЦен = РезультатЗапросаЦен.Выбрать();

	Для каждого СтрокаТабличнойЧасти из ТабличнаяЧасть Цикл
		Если СтрокаТабличнойЧасти.Цена = 0 Тогда
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
			ЗаполнитьЦенуВСтрокеТабличнойЧасти(ЭтотОбъект,
			                                   СтрокаТабличнойЧасти,
			                                   СтруктураПоиска,
			                                   ВыборкаРезультатЗапросаЦен,
			                                   СтруктураЗначенийЦен,
			                                   Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
			                                   ?(ЭтоТовары, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Неопределено));
			Если ЭтоТовары Тогда
				ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			Если ЭтоТовары Тогда
				РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

			Если ЭтоТовары Тогда
				// Рассчитываем плановую себестоимость.
				РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
			КонецЕсли;

		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоОстаткам()

// Заполняет переданную табличную часть по остаткам
//
// Параметры:
//  ТабличнаяЧасть - табличная часть.
//
Процедура ЗаполнитьТабличнуюЧастьПоОстаткамВнутреннийЗаказ(ТабличнаяЧасть, ВнутреннийЗаказ = Неопределено) Экспорт

	Если Не ЗначениеНеЗаполнено(ВнутреннийЗаказ.ДатаОтгрузки)
	   И Не ЗначениеНеЗаполнено(ДатаПоступления)
	      И ВнутреннийЗаказ.ДатаОтгрузки < ДатаПоступления Тогда
#Если Клиент Тогда
		Предупреждение  ("Отгрузку по внутреннему заказу необходимо осуществить раньше даты поступления по данному документу!");
#Иначе
		СообщитьОбОшибке("Отгрузку по внутреннему заказу необходимо осуществить раньше даты поступления по данному документу!");
#КонецЕсли 
		Возврат;
	КонецЕсли;

	ЭтоТовары = ТабличнаяЧасть = Товары;
	ТоварТара = ?(ЭтоТовары, Перечисления.ТоварТара.Товар, Перечисления.ТоварТара.Тара);
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр( "ТоварТара", ТоварТара);
	Запрос.УстановитьПараметр( "Ссылка",    Ссылка);

	Если ЭтоТовары Тогда
		Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный);
	Иначе
		Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	КонецЕсли;
	Запрос.УстановитьПараметр("ВнутреннийЗаказ", ВнутреннийЗаказ);
	
	ТекстЗапросаПоНоменклатуре = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура 
	|   ИЗ  Документ.ВнутреннийЗаказ." + ?(ЭтоТовары, "Товары", "ВозвратнаяТара") + "
	|   ГДЕ Документ.ВнутреннийЗаказ." + ?(ЭтоТовары, "Товары", "ВозвратнаяТара") + ".Ссылка = &ВнутреннийЗаказ";

	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказыОстатки.Номенклатура,
	|	ЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаХраненияОстатков,
	//+++ 25.11.2013 всегда = 1
	//|	ЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	1 КАК Коэффициент,
	
	|	ЗаказыОстатки.Номенклатура.СтавкаНДС                           КАК СтавкаНДС,
	|	ЗаказыОстатки.ХарактеристикаНоменклатуры,
	|	ЗаказыОстатки.ВнутреннийЗаказ,
	|	ЗаказыОстатки.КоличествоОстаток КАК Заказано,
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток КАК ЗаказаноПоставщику,
	|	ТоварыВРезервеНаСкладах.КоличествоОстаток КАК Зарезервировано
	|ИЗ
	|	РегистрНакопления.ВнутренниеЗаказы.Остатки(, Номенклатура В (" + ТекстЗапросаПоНоменклатуре  + ")
	|						И ВнутреннийЗаказ = &ВнутреннийЗаказ
	|                       И СтатусПартии = &СтатусПартии) КАК ЗаказыОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(, Номенклатура В (" + ТекстЗапросаПоНоменклатуре  + ")
	|						И ЗаказПокупателя = &ВнутреннийЗаказ
	|                       И ЗаказПоставщику <> &Ссылка
	|                       И ТоварТара = &ТоварТара) КАК ЗаказыПоставщикамОстатки
	|		ПО ЗаказыОстатки.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура 
	|		 И ЗаказыОстатки.ХарактеристикаНоменклатуры = ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры 
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, Номенклатура В (" + ТекстЗапросаПоНоменклатуре  + ")
	|						И ДокументРезерва = &ВнутреннийЗаказ) КАК ТоварыВРезервеНаСкладах
	|		ПО ЗаказыОстатки.Номенклатура = ТоварыВРезервеНаСкладах.Номенклатура 
	|		 И ЗаказыОстатки.ХарактеристикаНоменклатуры = ТоварыВРезервеНаСкладах.ХарактеристикаНоменклатуры";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		Количество = ?(Выборка.Заказано           = NULL, 0, Выборка.Заказано)
				   - ?(Выборка.Зарезервировано    = NULL, 0, Выборка.Зарезервировано)
				   - ?(Выборка.ЗаказаноПоставщику = NULL, 0, Выборка.ЗаказаноПоставщику);
		Если Количество > 0 Тогда
			СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
			СтрокаТабличнойЧасти.Номенклатура    = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество      = Количество;
			СтрокаТабличнойЧасти.ЗаказПокупателя = Выборка.ВнутреннийЗаказ;
			
			Если ЭтоТовары Тогда
				СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
				СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаХраненияОстатков;
				СтрокаТабличнойЧасти.СтавкаНДС                  = Выборка.СтавкаНДС;
				СтрокаТабличнойЧасти.Коэффициент                = Выборка.Коэффициент;
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла; 
	
	// Получить нужные цены запросом
	СтруктураЗначенийЦен = Новый Структура;
	СтруктураЗначенийЦен.Вставить("ПерезаполнитьПроцентСкидкиНаценки", Ложь);
	СтруктураЗначенийЦен.Вставить("НовыйТипЦен", ТипЦен);
	СтруктураЗначенийЦен.Вставить("НовыйВалютаДокумента", ?(ЭтоТовары, ВалютаДокумента, ДоговорКонтрагента.ВалютаВзаиморасчетов));
	СтруктураЗначенийЦен.Вставить("ТекущийВалютаДокумента", ВалютаДокумента);
	СтруктураЗначенийЦен.Вставить("НовыйУчитыватьНДС", ?(ЭтоТовары, УчитыватьНДС, Истина));
	СтруктураЗначенийЦен.Вставить("НовыйСуммаВключаетНДС", ?(ЭтоТовары, СуммаВключаетНДС, Истина));
	СтруктураЗначенийЦен.Вставить("ЕстьСтавкаНДСВТабличнойЧасти", ?(ЭтоТовары, Истина, Ложь));

	РезультатЗапросаЦен = СформироватьЗапросПоЦенам(СтруктураЗначенийЦен, 
	                                                  Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов, 
	                                                  ТабличнаяЧасть.ВыгрузитьКолонку("Номенклатура"),
	                                                  Дата, Контрагент, ДоговорКонтрагента);

	ВыборкаРезультатЗапросаЦен = РезультатЗапросаЦен.Выбрать();

	Для каждого СтрокаТабличнойЧасти из ТабличнаяЧасть Цикл
		Если СтрокаТабличнойЧасти.Цена = 0 Тогда
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
			ЗаполнитьЦенуВСтрокеТабличнойЧасти(ЭтотОбъект,
			                                   СтрокаТабличнойЧасти,
			                                   СтруктураПоиска,
			                                   ВыборкаРезультатЗапросаЦен,
			                                   СтруктураЗначенийЦен,
			                                   Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
			                                   ?(ЭтоТовары, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Неопределено));

			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			Если ЭтоТовары Тогда
				РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

			Если ЭтоТовары Тогда
				// Рассчитываем плановую себестоимость.
				РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
			КонецЕсли;

		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоОстаткамВнутреннийЗаказ()

// Заполняет табличную часть "Товары" по остаткам заказа покупателя
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТоварыПоЗаказуПокупателю(ЗаказПокупателя) Экспорт

	ЗаполнитьТабличнуюЧастьПоОстаткам(Товары, ЗаказПокупателя);
	
КонецПроцедуры // ЗаполнитьТоварыПоЗаказуПокупателю()

// Заполняет табличную часть "Возвратная тара" по остаткам заказа покупателя
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьВозвратнуюТаруПоЗаказуПокупателю(ЗаказПокупателя) Экспорт

	ЗаполнитьТабличнуюЧастьПоОстаткам(ВозвратнаяТара, ЗаказПокупателя);

КонецПроцедуры // ЗаполнитьВозвратнуюТаруПоЗаказуПокупателю()

// По виду операции определяет статус партии товаров (не возвратная тара!)
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Значение перечисления "Статусы партии товаров".
//
Функция ОпределитьСтатусПартии(ИмяТЧ) 

	Возврат Перечисления.СтатусыПартийТоваров.Купленный;

КонецФункции // ОпределитьСтатусПартииПрихода()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Надо добавить колонки.
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС",         ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр",            ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		СуммаСНДС = СтрокаТаблицы.Сумма + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);


		// Рассчитаем сумму взаиморасчетов
		СтрокаТаблицы.СуммаУпр    = ПересчитатьИзВалютыВВалюту(СуммаСНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СуммаСНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВзаиморасчетов);
										 
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.НДС = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Услуги",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаУслуг = РезультатЗапросаПоТоварам.Выгрузить();

	// Надо добавить колонки.
	ТаблицаУслуг.Колонки.Добавить("СуммаБезНДС",         ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаУслуг.Колонки.Добавить("СуммаВзаиморасчетов", ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаУслуг.Колонки.Добавить("СуммаУпр",            ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаУслуг Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		СуммаСНДС = СтрокаТаблицы.Сумма + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);


		// Рассчитаем сумму взаиморасчетов
		СтрокаТаблицы.СуммаУпр    = ПересчитатьИзВалютыВВалюту(СуммаСНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СуммаСНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВзаиморасчетов);
										 
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.НДС = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

	Возврат ТаблицаУслуг;

КонецФункции // ПодготовитьТаблицуУслуг()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	// Надо добавить колонки.
	ТаблицаТары.Колонки.Добавить("СуммаБезНДС",                ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("НДС",                        ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТары.Колонки.Добавить("СерияНоменклатуры",          Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов",        ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("СуммаУпр",                   ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма; // Сумма по таре всегда с НДС в валюте взаиморасчетов

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		// Рассчитаем сумму взаиморасчетов
		СтрокаТаблицы.СуммаУпр    = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВзаиморасчетов);
		                                 
		СтрокаТаблицы.НДС = 0;

	КонецЦикла;

	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Организация, ВалютаДокумента, 
					|Контрагент, ДоговорКонтрагента, КратностьВзаиморасчетов");

	// Склад заполняем только, если у нас есть строки в таблице "Товары" или "Возвратная тара"
	//Если Товары.Количество() > 0 ИЛИ ВозвратнаяТара.Количество() > 0 Тогда
	//	СтруктураОбязательныхПолей.Вставить("Склад");
	//КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам 
	 Или СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ОшибкаПриПроведении("Документ можно выписывать только по договору, взаиморасчеты по которому ведутся  по заказам или по договору в целом!", Отказ, Заголовок);
	КонецЕсли;

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок, ИмяТабЧасти = "Товары")

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
		Новый Структура("Номенклатура, Количество, ЕдиницаИзмерения, Сумма");
	
	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, ИмяТабЧасти, ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, ИмяТабЧасти, ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  ТаблицаПоУслугам        - таблица значений, содержащая данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Содержание, Количество, Сумма");

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь товаров быть не должно.
	ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	                                                      Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество, Сумма");

	КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре,
	                          Отказ, Заголовок);

	// Движения по документу.
	Если Не Отказ Тогда
		
		// Проконтролируем лимиты возвратной тары
		НаборДвижений = РегистрыНакопления.ТоварыПолученные.СоздатьНабоРЗаписей();
		НаборДвижений.КонтрольЛимитовВозвратнойТары(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок);
		
		НаборДвижений = Движения.РасчетыСКонтрагентами;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		
		// Заполним таблицу движений.
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.РасчетыВозврат        = Перечисления.РасчетыВозврат.Расчеты;
		СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
		СтрокаДвижений.Сделка                = Ссылка; 
		
		//07.03.2016 Перенесено в процедуру Перед записью
		////+++(06.06.2014 - отмененные товары - не принимают участия в движениях!
		//Если Константы.ИспользоватьОстаткиСтороннихПоставщиков.Получить() тогда
		//	тз = ЭтотОбъект.Товары.Выгрузить();
		//	тз.Свернуть("Статус", "Сумма");
		//	сч=0;
		//	пока сч<тз.Количество() цикл
		//		Если ТЗ[сч].статус = перечисления.СтатусыСтрокЗаказа.Отменен тогда
		//			тз.Удалить(сч);
		//		иначе сч = сч+1;
		//		КонецЕсли;
		//	КонецЦикла;	  
		//	СуммаДокумента = тз.Итог("Сумма");	  
		//КонецЕсли;
		////+++)
	
		СтрокаДвижений.СуммаВзаиморасчетов   = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
												СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
												СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
												
		СтрокаДвижений.СуммаУпр              = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
												СтруктураШапкиДокумента.КурсДокумента, 
												СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
												СтруктураШапкиДокумента.КратностьДокумента, 
												СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
												
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		ЗаказСИСТ = ложь;
		Если Контрагент = Справочники.Контрагенты.НайтиПоКоду("94072") тогда
			Для Каждого ТекСтрокаТовары Из Товары Цикл
				Если ТипЗНЧ(ТекСтрокаТовары.Основание) = Тип("ДокументСсылка.ЗаказПоставщику") и ЗначениеЗаполнено(ТекСтрокаТовары.Основание) тогда
					ЗаказСИСТ = истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
		
		Если Не Отказ и не ЗаказСИСТ Тогда
			Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
		КонецЕсли;
		
		НаборДвижений = Движения.ЗаказыПоставщикам;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		// { Лапенков Автозапчасти : цена при поступлении может меняться, при этом 
		// измерение Цена не добавляется как по типовой УТ, а закрывается
		#Если Клиент тогда	
			Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь,"ПродажаАвтозапчастей") Тогда
				ТаблицаПоТоварам.ЗаполнитьЗначения(0,"Цена");
			КонецЕсли;
		#КонецЕсли
		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ЗаказПоставщику");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		Если Дата >= Дата("20170101000000") Тогда
		    ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
		    ТаблицаДвижений.ЗаполнитьЗначения(Подразделение.ВЭД,"ВЭД");
		КонецЕсли;
		ТаблицаДвижений.ЗаполнитьЗначения(ОпределитьСтатусПартии("Товары"), "СтатусПартии");

		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		НаборДвижений.мПериод            = Дата;
		Движения.ЗаказыПоставщикам.ВыполнитьПриход();

		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений.Очистить();
		
		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ЗаказПоставщику");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		Если Дата >= Дата("20170101000000") Тогда
		    ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
		    ТаблицаДвижений.ЗаполнитьЗначения(Подразделение.ВЭД,"ВЭД");
	    КонецЕсли;
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");

		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		НаборДвижений.мПериод            = Дата;
		Движения.ЗаказыПоставщикам.ВыполнитьПриход();

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений.Очистить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ЗаказПоставщику");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		Если Дата >= Дата("20170101000000") Тогда
		    ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
		    ТаблицаДвижений.ЗаполнитьЗначения(Подразделение.ВЭД,"ВЭД");
        КонецЕсли;
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "СтатусПартии");

		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		НаборДвижений.мПериод            = Дата;
		Движения.ЗаказыПоставщикам.ВыполнитьПриход();
			 	
		//+++( 06.06.2014 нам нужна именно вся таблица товаров... как она есть
		Если Константы.ИспользоватьОстаткиСтороннихПоставщиков.Получить() тогда
			ТаблицаПоТоварамРазмещение = ЭтотОбъект.Товары.Выгрузить();
			ТаблицаПоТоварамРазмещение.Свернуть("Номенклатура, ЗаказПокупателя, Статус", "Количество, Сумма");
	  	Иначе // как было
	  		ТаблицаПоТоварамРазмещение = ТаблицаПоТоварам.Скопировать();
	  	КонецЕсли;
		//+++)
		
		Сч = 0; 
		Пока Сч < ТаблицаПоТоварамРазмещение.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоТоварамРазмещение.Получить(Сч);
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) Тогда
			 //или ТипЗнч(СтрокаТаблицы.ЗаказПокупателя) <> Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				 ТаблицаПоТоварамРазмещение.Удалить(СтрокаТаблицы);
			 Иначе 
				Сч = Сч + 1;
			КонецЕсли; 
		КонецЦикла;
		
		
		
		
		
		
		//+++ 06.06.2014 ЗДЕСЬ ВЫКЛЮЧЕНО движение по регистру РазмещениеЗаказовПокупателей-------------------------
		//-----------в регистр РазмещениеЗаказовПокупателей - пишется в Заказе Покупателя--------------------------
		//----Здесь - только для информации и обратной связи с заказом покупателя----------------------------------
		Если Константы.ИспользоватьОстаткиСтороннихПоставщиков.Получить() тогда
			#Если Клиент тогда
				delta = ЭтотОбъект.Товары.Количество() - ТаблицаПоТоварамРазмещение.Количество();
				Если delta<>0 и ТаблицаПоТоварамРазмещение.Количество()>0 тогда
					сообщить("Таблица размещения по заказам покупателей не совпадает с таблицей товаров на "+строка(delta)+" строк!", СтатусСообщения.Внимание);	  
				КонецЕсли;
			#КонецЕсли
			
			//+++ 06.06.2014 ----------------------синхронизация с заказами покупателей по статусам-----------------
			Для Каждого стр1 из ТаблицаПоТоварамРазмещение Цикл
				закОб = стр1.ЗаказПокупателя.ПолучитьОбъект();
				
				закОб.статус = этотОбъект.Статус; //статусы документов совпадают 
				
				НомерСтроки2 = закОбТоварыНайти(стр1); // найдем запросом (для SQL так быстрее)
				Если НомерСтроки2>0 тогда
					стр2 = закОб.Товары.Найти(НомерСтроки2, "НомерСтроки");
					стр2.Статус = стр1.Статус;     // статус строки
					
					Если стр2.Количество>стр1.Количество тогда // Количество НЕ совпадает!
						//+++ еще как то надо эту строку заказа поставщика изменить...
						Если стр1.Статус = перечисления.СтатусыСтрокЗаказа.Подтвержден тогда
							закОб.Комментарий = строка(стр2.НомерСтроки)+") Подтверждено: "
							+строка(стр1.Количество)+" из "+строка(стр2.Количество)+" "+закОб.Комментарий;
							
							стр2.Количество = стр1.Количество; //количество подтверждено устанавливаем в Заказ покупателя!
							
							закОб.Статус = перечисления.СтатусыЗаказов.ЧастичноПодтвержен; //заказ покупателя будет частично подтвержден
						КонецЕсли;
					КонецЕсли;
					
					//весь заказа подтвержден, а в строках НЕ проставили!
					Если ЭтотОбъект.Статус = перечисления.СтатусыЗаказов.Подтвержден 
						и стр1.Статус = перечисления.СтатусыСтрокЗаказа.ПустаяСсылка() тогда   
						стр2.Статус = перечисления.СтатусыСтрокЗаказа.Подтвержден;
					КонецЕсли;
					
				КонецЕсли;
				
				попытка	 
					
					Если закОб.статус = перечисления.СтатусыЗаказов.Отменен тогда // сразу удалим документ!
						закОб.ПометкаУдаления = истина;
						закОб.Комментарий = "Отменен поставщиком. "+закОб.Комментарий;
						
						если закОб.проведен тогда
							закОб.Записать(РежимЗаписиДокумента.ОтменаПроведения);  // запишем документ в режиме загрузки, а потом выключим!
						иначе
							закОб.Записать();
						КонецЕсли;	
					Иначе
						закОб.ПометкаУдаления = ложь; // если был удален и "вдруг" стал не удаленным
						закОб.Записать();    // запишем документ в режиме загрузки, БЕЗ перепроведения!
					КонецЕсли;	
					
				исключение
					#Если Клиент тогда
						Сообщить("Не удалось синхронизировать данные с "+строка(закОб)+" : "+ОписаниеОшибки(),  СтатусСообщения.Внимание );
					#КонецЕсли
				КонецПопытки;
				
			КонецЦикла;
			
			//----------------------------------------конец синхронизации с заказами покупателя------------------------------------		
		Иначе // как было - движение по резервированию...
			
			Если ТаблицаПоТоварамРазмещение.Количество() > 0 Тогда 
				
				// По регистру РазмещениеЗаказовПокупателей
				НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
				
				ТаблицаДвижений = НаборДвижений.Выгрузить();
				
				// Заполним таблицу движений.
				ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамРазмещение, ТаблицаДвижений);
				
				ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ЗаказПоставщику");
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Товар, "ТоварТара");
				
				
				НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
				НаборДвижений.мПериод            = Дата;
				
				Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
					НаборДвижений.КонтрольОстатковПоЗаказам(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
				КонецЕсли;
				
				Движения.РазмещениеЗаказовПокупателей.ВыполнитьПриход();
				
			КонецЕсли;
			
			ТаблицаПоТареРазмещение = ТаблицаПоТаре.Скопировать();
			Сч = 0;
			Пока Сч < ТаблицаПоТареРазмещение.Количество() Цикл
				СтрокаТаблицы = ТаблицаПоТареРазмещение.Получить(Сч);
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) Тогда 
					//или ТипЗнч(СтрокаТаблицы.ЗаказПокупателя) <> Тип("ДокументСсылка.ЗаказПокупателя") Тогда
					ТаблицаПоТареРазмещение.Удалить(СтрокаТаблицы);
				Иначе 
					Сч = Сч + 1;
				КонецЕсли; 
			КонецЦикла;
			
			Если ТаблицаПоТареРазмещение.Количество() > 0 Тогда 
				
				// По регистру РазмещениеЗаказовПокупателей
				НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
				
				ТаблицаДвижений = НаборДвижений.Выгрузить();
				ТаблицаДвижений.Очистить();
				
				// Заполним таблицу движений.
				ЗагрузитьВТаблицуЗначений(ТаблицаПоТареРазмещение, ТаблицаДвижений);
				
				ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ЗаказПоставщику");
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Тара, "ТоварТара");
				
				
				НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
				НаборДвижений.мПериод            = Дата;
				
				Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
					НаборДвижений.КонтрольОстатковПоЗаказам(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
				КонецЕсли;
				
				Движения.РазмещениеЗаказовПокупателей.ВыполнитьПриход();
				
			КонецЕсли;
		КонецЕсли;//+++)		
		 
		 
		
	КонецЕсли; // не отказ

КонецПроцедуры // ДвиженияПоРегистрам()

//+++ 06.06.2014
функция закОбТоварыНайти(стрТовЗакПост)
	
	рез = 0;

	Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	ЗаказПокупателяТовары.НомерСтроки
	 |ИЗ
	 |	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	 |ГДЕ
	 |	ЗаказПокупателяТовары.Ссылка = &Ссылка
	 |	И ЗаказПокупателяТовары.Номенклатура = &Номенклатура
	 |	И ЗаказПокупателяТовары.Размещение = &Размещение";
	 
	 Запрос.УстановитьПараметр("Ссылка",       стрТовЗакПост.ЗаказПокупателя);
	 Запрос.УстановитьПараметр("Номенклатура", стрТовЗакПост.Номенклатура);
	 Запрос.УстановитьПараметр("Размещение",   ЭтотОбъект.Ссылка);
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Если Выборка.Количество()=0 тогда // в заказе покупателя Удалили строку ?!
		 #Если Клиент тогда
			 сообщить("Не найден товар: "+строка(стрТовЗакПост.Номенклатура.Код)+") "+строка(стрТовЗакПост.Номенклатура)+" в "+строка(стрТовЗакПост.ЗаказПокупателя), СтатусСообщения.Внимание);
		 #КонецЕсли	 
	 ИначеЕсли Выборка.Количество()>1 тогда // дубли строк в заказе покупателя с одинаковым размещением и номенклатуров!
		 #Если Клиент тогда
			 сообщить("Найдены повторяющиеся строки с товаром: "+строка(стрТовЗакПост.Номенклатура.Код)+") "+строка(стрТовЗакПост.Номенклатура)+" в "+строка(стрТовЗакПост.ЗаказПокупателя), СтатусСообщения.Внимание);
		 #КонецЕсли
		 выборка.Следующий();  // берем 1-ю строку
	 	 рез = выборка.НомерСтроки;
	 Иначе // 1 позиция
		 выборка.Следующий();
	 	 рез = выборка.НомерСтроки;
	 КонецЕсли;
	
	возврат рез;
	
КонецФункции

// Процедура заполнения реквизита "ДатаОплаты" по договору.
//
// Параметры: 
//  РежимВызова - режим вызова процедуры.
//
Процедура УстановитьДатуОплатыПоДоговору(РежимВызова = "")Экспорт

	Если ЗначениеНеЗаполнено(Дата) Тогда
		Возврат;
	ИначеЕсли ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ВидВзаиморасчетов = ДоговорКонтрагента.ВедениеВзаиморасчетов;

	Если ЗначениеНеЗаполнено(ВидВзаиморасчетов) Тогда
		Возврат;
	КонецЕсли;

	Если ВидВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
		Если ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности Тогда
			ЧислоДнейДоОплаты = ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности;
		Иначе
			ЧислоДнейДоОплаты = 0;
		КонецЕсли;
	Иначе
		Если ДоговорКонтрагента.ДержатьРезервБезОплатыОграниченноеВремя Тогда
			ЧислоДнейДоОплаты = ДоговорКонтрагента.ЧислоДнейРезерваБезОплаты;
		Иначе
			ЧислоДнейДоОплаты = 0;
		КонецЕсли;
	КонецЕсли;

	//+++ только если включен флаг!!!
	Если ИспользоватьЧислоДнейДоОплаты и ЧислоДнейДоОплаты > 0 тогда
		
		ДатаОплатыНовая = ДатаОплатыНовая + ЧислоДнейДоОплаты*86400;
		
	Иначе // прямо в тот же день как пришел - оплата!?
		
		ДатаОплатыНовая = НачалоДня(Дата);
		
	КонецЕсли;
	
	// если это суббота или воскресенье - то сдвигаем на понедельник - ОДИН раз!
	Если ДеньНедели(ДатаОплатыНовая) > 5 тогда
		ДатаОплатыНовая = ДатаОплатыНовая + (8 -  ДеньНедели(ДатаОплатыНовая)); 
	КонецЕсли;


Если ДатаОплаты <> ДатаОплатыНовая Тогда
	
    // Проверка режима вызова процедуры
	Если НЕ ПустаяСтрока(РежимВызова) Тогда
		Если РежимВызова = "ДатаДокумента" Тогда
			ТекстВопроса = "Изменилась дата документа.";
		Иначе
			ТекстВопроса = "Изменился договор с контрагентом.";
			
		КонецЕсли;
	КонецЕсли;
				
	//+++( 28.11.2014 - для роботов или в режиме Сервер - только в сторону УВЕЛИЧЕНИЯ срока оплаты!			
	Если ДатаОплаты='00010101' тогда // дата пустая - ничего не спрашиваем, а сразу пишем 
		ДатаОплаты = ДатаОплатыНовая;
	Иначе
	//+++ 28.11.2014 - и в сторону УВЕЛИЧЕНИЯ  и в сторону УМЕНЬШЕНИЯ - решает Пользователь !!!
 		#Если Клиент Тогда
			Если Вопрос(ТекстВопроса + "
				|Вы действитель хотите "+?(ДатаОплаты < ДатаОплатыНовая, "Увеличить", "уменьшить")
				                 +" Дату Оплаты с "+формат(ДатаОплаты,"ДЛФ=DD")+" на "+формат(ДатаОплатыНовая,"ДЛФ=DD")+" ?", 
			РежимДиалогаВопрос.ДаНет, 30) = КодВозвратаДиалога.Да Тогда // 30 сек!
			ДатаОплаты = ДатаОплатыНовая;
		КонецЕсли; 
		//---------------роботы или перепроведение - только в большую сторону могут менять срок оплаты-------------
		#Иначе  
			Если ДатаОплатыНовая > ДатаОплаты Тогда 
			ДатаОплаты = ДатаОплатыНовая;
			КонецЕсли;
		#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	//+++)

КонецПроцедуры // УстановитьДатуОплатыПоДоговору()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

	
//+++ 22.12.2016  -  замена фикс.списка, на динамический 
//по свойству  ПриниматьЗаказыЧерезСайт и  Поставщик
		//"94302" //ZHANGZHOU LIYANG MACHINE CO., LTD
		//"94442" //JIANGSU SIBORUI IMPORT AND EXPORT CO., LTD
		//списокКонтрагентовПоставщиков.Добавить("91735"); //FREEMAN
		//списокКонтрагентовПоставщиков.Добавить("91535");// JIANGSU SAINTY MACHINERY I&E CORP. LTD
		//списокКонтрагентовПоставщиков.Добавить("92540");// FUJIAN SHUANGSHENG IM &EX CO., LTD
		//списокКонтрагентовПоставщиков.Добавить("93694"); //ZHEANGZHOU
		//списокКонтрагентовПоставщиков.Добавить("93695"); //NINGBO PARTNER INTERNATIONAL TRADE CO., LTD
функция мПолучитьПоставщиковМиМ() Экспорт  
	
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
|	Контрагенты.Ссылка
|ИЗ
|	Справочник.Контрагенты КАК Контрагенты
|ГДЕ
|	Контрагенты.ПометкаУдаления = ЛОЖЬ
|	И Контрагенты.Поставщик
|	И Контрагенты.ПриниматьЗаказыЧерезСайт";
Результат = Запрос.Выполнить();
табл = Результат.Выгрузить();

возврат табл.ВыгрузитьКолонку("Ссылка");

КонецФункции

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ЭтоНовый() и ВалютаДокумента <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		ТекущийКурс = РегистрыСведений.КурсыВалютДляПоступления.СрезПоследних(Дата,Новый структура("Валюта",ВалютаДокумента));
		Если  ТекущийКурс.Количество()>0 Тогда
			КурсВзаиморасчетов  = ТекущийКурс[0].Курс;
			кратностьВзаиморасчетов = ТекущийКурс[0].Кратность;	
		конецЕсли;
	конецЕсли;
	
	ОчиститьНенужныеТабличныеЧасти();
	
	// Проверка заполнения единицы измерения мест и количества мест
	ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	
	
	//Проверим дату поступления
	//+++ 21.06.2016 - по согласованию с Егором + 2 месяца от даты документа (текущей даты)!
	Если ЭтотОбъект.ДатаПоступления='00010101' Тогда
		ЭтотОбъект.Дата = ?(ЭтотОбъект.Дата='00010101', ТекущаяДата(), ЭтотОбъект.Дата);
	    ЭтотОбъект.ДатаПоступления = ДобавитьМесяц( ЭтотОбъект.Дата, + 2 ); // 60-61 день... сразу появится в товарах в пути > 45 дней !
		#Если Клиент тогда
			Сообщить("Дата поступления товара заполнена - автоматически! Введена 'максимальная' дата поступления (+2 мес): "=формат(ЭтотОбъект.ДатаПоступления,"ДЛФ=D"), СтатусСообщения.Информация);
		#КонецЕсли
	КонецЕсли;	


	//+++ 30.06.2014 ---------защита от дублей-------------------
	Если НЕ Ссылка.Пустая() тогда
		ПроверитьПовторяющиесяТовары(Отказ); //05.11.2014 с учетом заказов!
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	Если константы.ИспользоватьОстаткиСтороннихПоставщиков.Получить() тогда
		для каждого стр1 из Товары цикл
			если стр1.Статус  = перечисления.СтатусыСтрокЗаказа.Отменен тогда
				стр1.Сумма    = 0;
				стр1.СуммаНДС = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	СуммаДокумента = ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары");
	
	СуммаДокумента = СуммаДокумента + ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "ВозвратнаяТара");
	СуммаДокумента = СуммаДокумента + ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	
	ПроверкаВозможностиИзмененияДокумента(ЭтотОбъект, Отказ);
	
	//Если это ВЭД, то только два типа договора, Плотников 26.01.17
	Если РольДоступна("ДополнительныеПраваВЭД") 
		//и ДоговорКонтрагента.ТипДоговора <> Справочники.ТипыДоговоров.TyreTechnology 
		и ДоговорКонтрагента.ТипДоговора <> Справочники.ТипыДоговоров.WheelsGroupLimited Тогда 
		сообщить("Тип договора должен быть Tyre Technology или Wheels Group Limited!!!");
	    Отказ = истина;	
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
			
		//05.11.2014 - если не определен пользователь - значит это Робот...
		#Если Клиент тогда
			Если НЕ ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь) тогда
				ПараметрыСеанса.ТекущийПользователь = справочники.Пользователи.НайтиПоКоду("Робот (магазин)");
				глТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
			КонецЕсли;
			
			 //02.08.2016 - подразделение по ответственному (по родителю подразделения!)
			 Если Подразделение.Пустая() тогда
				Если Ответственный.Пустая() тогда
					Ответственный = глТекущийПользователь;
				КонецЕсли;
				
				Если не Ответственный.ОсновноеПодразделение.Родитель.Родитель.Пустая() тогда
					Подразделение = Ответственный.ОсновноеПодразделение.Родитель.Родитель;
                ИначеЕсли не Ответственный.ОсновноеПодразделение.Родитель.Пустая() тогда
					Подразделение = Ответственный.ОсновноеПодразделение.Родитель;
                иначеЕсли не Ответственный.ОсновноеПодразделение.Пустая() тогда
					Подразделение = Ответственный.ОсновноеПодразделение;
				ИначеЕсли Организация.Код = "00001" тогда  //ЯШТ ТК
					Подразделение = Справочники.Подразделения.НайтиПоКоду("00005"); //Головное
				КонецЕсли;
				
				//И ставим нужное подразделение, если ВЭД
				Если РольДоступна("ДополнительныеПраваВЭД") и не Отказ Тогда
					//СоответствиеПодразделений = Новый Соответствие;
					//СоответствиеПодразделений.Вставить(Справочники.ТипыДоговоров.TyreTechnology,Справочники.Подразделения.НайтиПоКоду("00162"));
					//СоответствиеПодразделений.Вставить(Справочники.ТипыДоговоров.WheelsGroupLimited,Справочники.Подразделения.НайтиПоКоду("00166"));
					
					Подразделение = Справочники.Подразделения.НайтиПоКоду("00166");	
				КонецЕсли;
			КонецЕсли;
		#КонецЕсли
		
		//+++( 24.02.2014 - для роботов!	
		если сокрЛП(номер)="" тогда
			СтрокаПрефикс = Организация.Префикс; //"ТК";
			Если подразделение.ПрефиксИБ<>"" тогда
				СтрокаПрефикс = подразделение.ПрефиксИБ;
			КонецЕсли;	
			ЭтотОбъект.УстановитьНовыйНомер(СтрокаПрефикс);	
		КонецЕсли;
		//+++)	

		//+++( 16.05.2014 фикс.список
		//"94302"
		//"94442"
		//списокКонтрагентовПоставщиков.Добавить("91735"); //FREEMAN
		//списокКонтрагентовПоставщиков.Добавить("91535");// JIANGSU SAINTY MACHINERY I&E CORP. LTD
		//списокКонтрагентовПоставщиков.Добавить("92540");// FUJIAN SHUANGSHENG IM &EX CO., LTD
		//списокКонтрагентовПоставщиков.Добавить("93694"); //ZHEANGZHOU
		//списокКонтрагентовПоставщиков.Добавить("93695"); //NINGBO PARTNER INTERNATIONAL TRADE CO., LTD
		
		//+++ 22.12.2016 заменен на "динамический"
		массивПоставщиковМиМ = мПолучитьПоставщиковМиМ();  
		
		Если ЭтотОбъект.Проверен //изменен в ЯШТ УТ
			и ЭтотОбъект.Контрагент.ПриниматьЗаказыЧерезСайт // достаточно только этого условия!
			и массивПоставщиковМиМ.найти(ЭтотОбъект.Контрагент)<>неопределено Тогда  //необходимо - ещё ограничение, для обмена в обратную сторону!
			Попытка
				ОбменСУТИнтернетМагазин.ВключитьРегистрациюОбъектаОИМ(ЭтотОбъект, Истина); //22.12.2016
			Исключение
				#Если Клиент тогда
					СообщитьОбОшибке( ?(ЭтотОбъект.ЭтоНовый(), "Текущий документ", строка(ссылка))+
					" не может быть добавлен в план обмена! "+ОписаниеОшибки() );
				#КонецЕсли	
			КонецПопытки;
		КонецЕсли; 
		//+++)
		
		//***07.2015
		ПринадлежностьПоследовательностям.ЗаказыПоставщикамСезонные.Очистить();
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказПоставщикуСезонный.Контрагент
		|ИЗ
		|	Документ.ЗаказПоставщикуСезонный КАК ЗаказПоставщикуСезонный";
		Результат = Запрос.Выполнить().Выгрузить();
		Если НЕ Результат.Найти(Контрагент) = Неопределено Тогда
			ЗаписьРегистрации = ПринадлежностьПоследовательностям.ЗаказыПоставщикамСезонные.Добавить();
			ЗаписьРегистрации.Период		= Дата;
			ЗаписьРегистрации.Регистратор	= Ссылка;
		КонецЕсли;
        //***
		
		//***14.01.2016
		#Если Клиент тогда
			
			//+++ 20.01.2016 - по настройке - можно менять заказы поставщикам для "чужих" договоров
			флМожно = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьРедактированиеЧужихДокументов");

			Если НЕ (РольДоступна("ПравоЗавершенияРаботыПользователей") 
				ИЛИ РольДоступна("ПолныеПрава")
				ИЛИ глТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Робот (магазин)") 
				ИЛИ глТекущийПользователь = ДоговорКонтрагента.ОтветственноеЛицо
				ИЛИ глТекущийПользователь = ДоговорКонтрагента.Владелец.ОсновнойМенеджерКонтрагента
				или флМожно) Тогда 
				Сообщить("Документ создан по договору менеджера "+строка(ДоговорКонтрагента.ОтветственноеЛицо)+". Редактирование чужих документов - не рекомендуется!", СтатусСообщения.Внимание);
				//Отказ = Истина; 
			КонецЕсли;
			
		#КонецЕсли
		//***
		
	КонецЕсли; 
	
			//+++(06.06.2014 - отмененные товары - не принимают участия в движениях!
		Если Константы.ИспользоватьОстаткиСтороннихПоставщиков.Получить() тогда
			тз = ЭтотОбъект.Товары.Выгрузить();
			тз.Свернуть("Статус", "Сумма");
			сч=0;
			пока сч<тз.Количество() цикл
				Если ТЗ[сч].статус = перечисления.СтатусыСтрокЗаказа.Отменен тогда
					тз.Удалить(сч);
				иначе сч = сч+1;
				КонецЕсли;
			КонецЦикла;	  
			СуммаДокумента = тз.Итог("Сумма");	  
		КонецЕсли;
		//+++)
		//18.01.17 Смирнов, Малышев Егор попросил убрать проверку крепежа
		//ПроверитьКрепеж();
		// Смирнов

//=======================Сразу Отправить стороннему поставщику=======================================
	Если не Отказ и РежимЗаписи = РежимЗаписиДокумента.Проведение
		и Константы.ИспользоватьДележкуЗаказовВМинус.Получить() Тогда
   			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	СрокиДоставки.Поставщик,
			               |	СрокиДоставки.СрокДоставки,
			               |	СрокиДоставки.ОтправлятьЗаказыПоставщику,
			               |	СрокиДоставки.ОдинЗаказПоставщикуВДень
			               |ИЗ
			               |	РегистрСведений.СрокиДоставки КАК СрокиДоставки
			               |ГДЕ
			               |	СрокиДоставки.ОТХ = ЛОЖЬ
			               |	И СрокиДоставки.Поставщик = &Поставщик";
			
			Запрос.УстановитьПараметр("Поставщик", ЭтотОбъект.Контрагент);
			Результат = Запрос.Выполнить();
			если результат.Пустой() тогда
				возврат;
			КонецЕсли;
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
//----------- 18.01.2017 отключена отправка писем Поставщику! ------------
		//	Если Выборка.ОтправлятьЗаказыПоставщику 
		//		и Статус=перечисления.СтатусыЗаказов.Подтвержден тогда  //только после подтверждения!
		//				
		//		Если Выборка.ОдинЗаказПоставщикуВДень и Дата<>НачалоДня(Дата) тогда
		//			#Если Клиент тогда
		//				Сообщить("Для поставщика "+строка(Контрагент)+" установлен [v] Один Заказ Поставщику В День
		//				|Требуется объединить заказы перед отправкой поставщику
		//				|и установить Дату документа на начало дня 00:00:00");
		//			#КонецЕсли
		//			возврат;
		//		КонецЕсли;	
		//		//Если Найти(Комментарий,"@")>0 тогда
		//		//	возврат; // уже отправлено письмо поставщику
		//		//КонецЕсли;	

		//		Попытка
		//		//Если Контрагент = справочники.Контрагенты.НайтиПоКоду("00128") Тогда // ПАУЭР	
		//		//	 СписокЗаказов = новый СписокЗначений;
		//		//	 СписокЗаказов.Добавить( ЭтотОбъект.Ссылка );// 1 заказ
		//		//	 яштПоставщики.ПауэрПроверкаСтатусов(СписокЗаказов);
		//		//	 продолжить;
		//		//КонецЕсли;
		//		#Если Клиент тогда
		//		сообщить(строка(ТекущаяДата())+" --- начало отправки письма поставщику ---");	 
		//		#КонецЕсли
		//		резОтправки = яштПоставщики.ОтправитьПисьмоПоставщику(Ссылка); // на @ поставщика !
		//		
		//		//можно обработать резОтправки 
		//		Если резОтправки Тогда
		//			ЭтотОбъект.Комментарий = "@ "+формат(ТекущаяДата(),"ДЛФ=D")+" - отправлено письмо поставщику# " +ЭтотОбъект.Комментарий;
		//		Иначе
		//			ЭтотОбъект.Комментарий = "Письмо НЕ отправлено! "+ЭтотОбъект.Комментарий;
		//		КонецЕсли;
		//		
		//		ЭтотОбъект.Статус = перечисления.СтатусыЗаказов.ВОбработке; //отправлен поставщику @ и сразу считаем, что он в обработке у поставщика
		//		//Статус = перечисления.СтатусыЗаказов.Подтвержден - ставит менеджер после реального подтверждения заказа!
		//		
		//		#Если Клиент тогда
		//		сообщить(строка(ТекущаяДата())+" --- отправка письма поставщику по заказу № "+Номер+" успешно завершена---");	 
		//		#КонецЕсли
		//		
		//		Исключение	 
		//		ЭтотОбъект.Статус = перечисления.СтатусыЗаказов.ПодтвержденПокупателем; //статус "ПодтвержденПокупателем", потому что проведение делается из Задачи...
		//			#Если Клиент Тогда
		//			 сообщить("Ошибка отправки заказа поставщику: "+строка(Контрагент)+" : "+ОписаниеОшибки(), СтатусСообщения.Внимание); 
		//		 	#КонецЕсли	 
		//			Комментарий = строка(ТекущаяДата())+" !ошибка при отправке эл.почты!"+Комментарий;
		//	 	КонецПопытки; 
		//	КонецЕсли;
		//
		КонецЕсли;//@
		
		
	Если НЕ Отказ тогда		
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	КонецЕсли;	
	
КонецПроцедуры // ПередЗаписью

Процедура ПроверитьКрепеж()
	#Если Клиент тогда	
		 ТабБезКрепежа = Новый ТаблицаЗначений;
		 ТабБезкрепежа.Колонки.Добавить("Номенклатура");
		Для каждого стр из Товары Цикл
			Если стр.Номенклатура.Производитель = Справочники.Производители.НайтиПоКоду("65") или  стр.Номенклатура.Производитель = Справочники.Производители.НайтиПоКоду("3333") Тогда
				Выборка = РегистрыСведений.КомплектующиеНоменклатуры.Выбрать(новый Структура("номенклатура",стр.Номенклатура));
				нашли = Ложь;
				пока выборка.Следующий() Цикл
					если выборка.Комплектующая.родитель = Справочники.Номенклатура.НайтиПоКоду("0000702")или выборка.Комплектующая.родитель = Справочники.Номенклатура.НайтиПоКоду("0000713")  Тогда
						нашли = истина;
					конецЕсли;	 
				конецЦикла;
				если не нашли Тогда
					Сообщить("Для номенклатуры "+ стр.Номенклатура.Код+" не задан крепеж!");	
					//Отказ = Истина; //***2015.03.31 заремлено, т.к. не для всей номенклатуры бывает известен крепеж. 
					новСтр= ТабБезКрепежа.Добавить();
					НовСтр.номенклатура = стр.Номенклатура;
				конецЕсли;	
			конецЕсли;
		КонецЦикла;
		
		// создадим задачу
		Если ТабБезКрепежа.Количество()>0 Тогда		
			попытка  
				задача = задачи.ЗадачиПользователя.СоздатьЗадачу();
				Задача.Исполнитель = Справочники.Пользователи.НайтиПоКоду("Малышев Егор");
				задача.Наименование = "Для номенклатуры в документе ""Поступление от поставщика"" не задан крепеж!"; 
				задача.Описание = "Для номенклатуры в документе ""Поступление от поставщика"" не задан крепеж! Перечень номенклатуры, для которой не задан крепеж, на закладке ""Товары""";
				Если параметрыСеанса.ТекущийПользователь = справочники.Пользователи.ПустаяСсылка() тогда
					параметрыСеанса.ТекущийПользователь = справочники.Пользователи.НайтиПоКоду("Робот (центр - номенклатура)");
				КонецЕсли;
				задача.Инициатор   = параметрыСеанса.ТекущийПользователь;
				Задача.Товары.Загрузить(ТабБезКрепежа);
				задача.Объект   	 = ЭтотОбъект.ссылка;
				задача.Дата 		    = ТекущаяДата();
				задача.СрокИсполнения = КонецДня( ТекущаяДата() ); 	
				задача.Оповещение     = истина;
				задача.СрокОповещения = ТекущаяДата(); 
				задача.Записать();
			исключение
			КонецПопытки;
			попытка
				ДубльЗадача = Задача.Скопировать();
				Дубльзадача.Дата = ТекущаяДата();
				ДубльЗадача.Исполнитель = Справочники.Пользователи.НайтиПоКоду("Горицкий А. И.");
				ДубльЗадача.Записать();
				
			исключение
			КонецПопытки;
		конецЕсли;
		
		
		//сравним цены с ФОП
		если валютаДокумента <> константы.ВалютаРегламентированногоУчета.Получить() и дата>Дата('20161001000000') Тогда
		//	сравнитьЦенысФОП();
		конецЕсли;
		
	#КонецЕсли
	

конецпроцедуры

функция проверитьВесМаксНагрузка()
	результат= Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПоставщикуТовары.Номенклатура,
		|	ЕдиницыИзмерения.Вес,
		|	ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, 0) КАК МаксНагрузка,
		|	ЗаказПоставщикуТовары.Номенклатура.ВидТовара как ВидТовара
		|ИЗ
		|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|		ПО ЗаказПоставщикуТовары.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО ЗаказПоставщикуТовары.Номенклатура = ЗначенияСвойствОбъектов.Объект
		|			И (ЗначенияСвойствОбъектов.Свойство = &Свойство)
		|ГДЕ
		|	ЗаказПоставщикуТовары.Ссылка = &Ссылка
		|	И ЗаказПоставщикуТовары.Номенклатура.ВидТовара В(&СписокТовара)";
    СписокТовара = Новый СписокЗначений;
	СписокТовара.Добавить(Перечисления.ВидыТоваров.Диски);
	СписокТовара.Добавить(Перечисления.ВидыТоваров.Шины);
	Запрос.УстановитьПараметр("Свойство", планывидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90157"));
	Запрос.УстановитьПараметр("СписокТовара", СписокТовара);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		Если  выборка.Вес = 0 тогда  // И ДЛЯ ШИН И ДЛЯ Дисков!
			Сообщить("Для номенклатуры "+Выборка.Номенклатура+", (Код "+Выборка.Номенклатура.код+" ) не указан Вес!");
		    результат = Истина;
		конецЕсли;	
		Если  выборка.МаксНагрузка = 0
			и выборка.ВидТовара = Перечисления.ВидыТоваров.Диски тогда  //+++ 20.06.2016 - ТОЛЬКО ДЛЯ ДИСКОВ !
			Сообщить("Для номенклатуры "+Выборка.Номенклатура+", (Код "+Выборка.Номенклатура.код+" ) не указано свойство ""Максимальная нагрузка""!");
		    результат = Истина;
		конецЕсли;	
	КонецЦикла;

	 возврат   результат;
 конецфункции

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
		
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если видЗаказа = 0 Тогда
		
		//Проверим,для всей ли Replica заведены крепежи
		
		//16.06.16 по указанию Егора с разрешения Лапенкова. не проводим без даты поступления, веса, максимальной нагрузки.   
		
		//проверим Вес  и макс. нагрузку 
		// Отказ = проверитьВесМаксНагрузка(); //+++ 21.06.2016 - убрана проверка по просьбе Новиковой (по согласованию с Егором)
		
		
		// Заголовок для сообщений об ошибках проведения.
		Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
		
		// Сформируем структуру реквизитов шапки документа
		СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
		
		// Заполним по шапке документа дерево параметров, нужных при проведении.
		ДеревоПолейЗапросаПоШапке      = СформироватьДеревоПолейЗапросаПоШапке();
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов"             , "ВедениеВзаиморасчетов");
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов"              , "ВалютаВзаиморасчетов");
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"                       , "ДоговорОрганизация");
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"                 , "ВидСклада"                         , "ВидСклада");
		
		// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
		СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
		
		// Проверим правильность заполнения шапки документа
		ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
		
		//Смирнов 27.02.15
		//Смирнов 26.02.15 убираем поверку
		//ПроверитьПовторяющиесяТовары(Отказ);
		
		// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
		СтруктураПолей = Новый Структура();
		СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
		СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
		СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
		СтруктураПолей.Вставить("Количество"                , "Количество"); //+++ 25.11.2013   * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
		СтруктураПолей.Вставить("ЗаказПокупателя"           , "ЗаказПокупателя");
		СтруктураПолей.Вставить("Цена"                      , "Цена");
		СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "ЕдиницаИзмерения");
		СтруктураПолей.Вставить("Сумма"                     , "Сумма");
		СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
		СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
		СтруктураПолей.Вставить("НомерСтроки"               , "НомерСтроки");
		СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
		
		//+++ 06.06.2014
		Если Константы.ИспользоватьОстаткиСтороннихПоставщиков.Получить() тогда 
			СтруктураПолей.Вставить("Статус"              , "Статус");
		КонецЕсли;
		
		РезультатЗапросаПоТоварам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
		
		// Подготовим таблицу товаров для проведения.
		ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
		
		если контрагент.код = "95728" тогда
			Для каждого стр из таблицаПоТоварам Цикл
			стр.СуммаВзаиморасчетов = стр.количество*стр.Цена;	
			стр.СуммаБезНДС = стр.количество*стр.Цена*КурсВзаиморасчетов;
			стр.СуммаУпр = стр.количество*стр.Цена*КурсВзаиморасчетов;	
		    конецЦикла;
		конецесли;
		//+++ 06.06.2014 - удаляем из всех движений отмененные товары...
		Если Константы.ИспользоватьОстаткиСтороннихПоставщиков.Получить() тогда 
			Сч = 0; 
			Пока Сч < ТаблицаПоТоварам.Количество() Цикл
				Если ТаблицаПоТоварам[Сч].статус = перечисления.СтатусыСтрокЗаказа.Отменен Тогда
					ТаблицаПоТоварам.Удалить(Сч);
				Иначе 
					Сч = Сч + 1;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
		
		
		// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Услуги".
		СтруктураПолей = Новый Структура();
		СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
		СтруктураПолей.Вставить("Содержание"                , "Содержание");
		СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
		СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
		СтруктураПолей.Вставить("Количество"                , "Количество");
		СтруктураПолей.Вставить("Цена"                      , "Цена");
		СтруктураПолей.Вставить("Сумма"                     , "Сумма");
		СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
		СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
		СтруктураПолей.Вставить("НомерСтроки"               , "НомерСтроки");
		
		РезультатЗапросаПоУслугам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);
		
		// Подготовим таблицу услуг для проведения.
		ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);
		
		// Получим необходимые данные для проведения и проверки заполенения данные 
		// по табличной части "Возвратная тара".
		СтруктураПолей = Новый Структура();
		СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
		СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
		СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
		СтруктураПолей.Вставить("Количество"                , "Количество");
		СтруктураПолей.Вставить("Цена"                      , "Цена");
		СтруктураПолей.Вставить("Сумма"                     , "Сумма");
		СтруктураПолей.Вставить("ЗаказПокупателя"           , "ЗаказПокупателя");
		СтруктураПолей.Вставить("НомерСтроки"               , "НомерСтроки");
		СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");
		
		РезультатЗапросаПоТаре = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);
		
		// Подготовим таблицу тары для проведения.
		ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);
		
		// Проверить заполнение ТЧ "Товары", "Услуги", "Возвратная тара".
		ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам,      СтруктураШапкиДокумента, Отказ, Заголовок);
		ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам,      СтруктураШапкиДокумента, Отказ, Заголовок);
		ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
		
		// Проверить заполнение подразделения, если нужно. 
		Если (Константы.ОбязательнаяУстановкаПодразделений.Получить() = Истина) Тогда 
			Если (Подразделение = Справочники.Подразделения.ПустаяСсылка()) Тогда 
				Отказ = Истина;
				Сообщить("Перед проведением, установите подразделение.", СтатусСообщения.Важное);
			КонецЕсли;
		КонецЕсли;
		
		// { Лапенков 20080829 обязательно заполнение даты оплаты или числа дней до оплаты в заказе
		Если не Константы.РозничнаяБаза.Получить() Тогда
			Если НЕ ЗначениеЗаполнено(ДатаОплаты)  И не ИспользоватьЧислоДнейДоОплаты Тогда
				Сообщить("Должна быть указана 'Дата оплаты' или 'число дней до оплаты' заказа.",СтатусСообщения.Важное);
				Отказ = Истина;
			КонецЕсли;		
		КонецЕсли;	
		// } Лапенков 20080829 
		
		// Движения по документу
		Если Не Отказ Тогда
			
			ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
			ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре,
			Отказ, Заголовок);
			
			////+++ 11.12.2013							
			//Если не Основание.Пустая() тогда
			//  Для Каждого ТекСтрокаТовары Из Товары Цикл
			//	// регистр ЗаказыПоставщикуСезонные Приход
			//	Движение = Движения.ЗаказыПоставщикамСезонные.Добавить();
			//	Движение.Регистратор = ссылка; // этот документ!
			//	Движение.ВидДвижения = ВидДвиженияНакопления.расход;
			//	Движение.Период = Дата; // дата регистрации в регистре накопления = дате документа!
			//	Движение.ЗаказПоставщикуСезонный = ?(ТекСтрокаТовары.Основание.Пустая(), Основание, ТекСтрокаТовары.Основание);
			//	Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;
			//	Движение.Количество   = ТекСтрокаТовары.Количество;
			//	Движение.Дата = ЭтотОбъект.ДатаПоступления; // дата поступления в порт
			//  КонецЦикла;
			//КонецЕсли; 
			////+++)
			
			
			//13.10.14 Смирнов
			
			//20.02.18 Смирнов
			НЕПроводитьПоСезоннымИСТ = ложь;
			Если Контрагент = Справочники.Контрагенты.НайтиПоКоду("94072") тогда
				Для Каждого ТекСтрокаТовары Из Товары Цикл
					Если ТипЗНЧ(ТекСтрокаТовары.Основание) = Тип("ДокументСсылка.ЗаказПоставщику") и ЗначениеЗаполнено(ТекСтрокаТовары.Основание) тогда
						НЕПроводитьПоСезоннымИСТ = истина;
						Прервать;
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;
			
			Если Контрагент = Справочники.Контрагенты.НайтиПоКоду("94072") и НЕПроводитьПоСезоннымИСТ тогда //по сезонным не проводим, но проводим с - по заказам поставщику
				Для Каждого ТекСтрокаТовары Из Товары Цикл
					// регистр ЗаказыПоставщикуСезонные Приход
					Если ЗначениеЗаполнено(ТекСтрокаТовары.Основание) и ТипЗНЧ(ТекСтрокаТовары.Основание) = Тип("ДокументСсылка.ЗаказПоставщику") тогда
						Движение = Движения.ЗаказыПоставщикам.Добавить();
						Движение.Регистратор = ссылка; // этот документ!
						Движение.ВидДвижения = ВидДвиженияНакопления.приход;
						Движение.Период = Дата; // дата регистрации в регистре накопления = дате документа!
						Движение.ДоговорКонтрагента = ЭтотОбъект.ДоговорКонтрагента;
						Движение.ЗаказПоставщику = ТекСтрокаТовары.Основание;
						Движение.СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный;
						Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;
						Движение.Цена = ТекСтрокаТовары.Цена;
						Движение.ЕдиницаИзмерения = ТекСтрокаТовары.ЕдиницаИзмерения;
						Движение.Подразделение = ЭтотОбъект.Подразделение;
						Движение.ВЭД = Подразделение.ВЭД;
						Движение.Количество   = - ТекСтрокаТовары.Количество;
						Движение.СуммаВзаиморасчетов   = - ПересчитатьИзВалютыВВалюту(ТекСтрокаТовары.Сумма, ВалютаДокумента,
						СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
						СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
						СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
						;
						Движение.СуммаУпр  = - ПересчитатьИзВалютыВВалюту(ТекСтрокаТовары.Сумма, ВалютаДокумента,
						СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
						СтруктураШапкиДокумента.КурсДокумента, 
						СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
						СтруктураШапкиДокумента.КратностьДокумента, 
						СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
					КонецЕсли;
				КонецЦикла;
				
				
			ИначеЕсли  Контрагент <> Справочники.Контрагенты.НайтиПоКоду("94072") или (Контрагент = Справочники.Контрагенты.НайтиПоКоду("94072") и не НЕПроводитьПоСезоннымИСТ) тогда
				//Если заказ транзитный, то проводим как и раньше, если нет, то по ФИФО по сроку действия
				Если ((Основание <> Неопределено) И НЕ Основание.Пустая() И Транзит) или (контрагент = Справочники.Контрагенты.НайтиПоКоду("91735") и Дата>Дата(2017,03,12,0,0,0)) или (Дата>Дата(2017,05,01,0,0,0))   Тогда
					Если ТипЗНЧ(Основание) = Тип("ДокументСсылка.ЗаказПоставщикуСезонный")или (контрагент = Справочники.Контрагенты.НайтиПоКоду("91735") и Дата>Дата(2017,03,12,0,0,0))или (Дата>Дата(2017,05,01,0,0,0))  Тогда
						
						Для Каждого ТекСтрокаТовары Из Товары Цикл
							// регистр ЗаказыПоставщикуСезонные Приход
							Движение = Движения.ЗаказыПоставщикамСезонные.Добавить();
							Движение.Регистратор = ссылка; // этот документ!
							Движение.ВидДвижения = ВидДвиженияНакопления.расход;
							Движение.Период = Дата; // дата регистрации в регистре накопления = дате документа!
							Движение.ЗаказПоставщикуСезонный = ?(не ЗначениеЗаполнено(ТекСтрокаТовары.Основание), Основание, ТекСтрокаТовары.Основание);
							Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;
							Движение.Подразделение = ЭтотОбъект.Подразделение;
							Движение.ВЭД = Подразделение.ВЭД;
							Движение.Количество   = ТекСтрокаТовары.Количество;
							Движение.Дата = ЭтотОбъект.ДатаПоступления; // дата поступления в порт
						КонецЦикла;
					КонецЕсли;
				Иначе
					//по сезонным заказам поставщика проводим только если заказ в валюте и в нем только диски
					Если ПроводитьПоСезоннымПоставщиов() тогда
						СписатьЗаказыСезонные(РежимПроведения);
					КонецЕсли;	
				КонецЕсли; 
			КонецЕсли;
			//Смирнов
			
			//Алексеева
			// зачет авансов с сезонного заказа
			ТабДвижений=Движения.ЗаказыПоставщикамСезонные.Выгрузить();
			
			Если ТабДвижений.Количество()>0 тогда	  
				
				суммаПредоплат =  яштПоставщики.РассчитатьСуммуЗачетаАванса(ТабДвижений,Дата);
				Если СуммаПредоплат.Итог("СуммаПредоплаты")>0 Тогда	  
					НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;
					ТаблицаДвижений = НаборДвижений.Выгрузить();
					ТаблицаДвижений.Очистить();
					Для каждого стр из СуммаПредоплат Цикл
						Если стр.СуммаПредоплаты>0 и стр.ЗаказпоставщикуСезонный.ЗаказДубль.Договорконтрагента=ДоговорКонтрагента тогда
							СтрокаДвижений = ТаблицаДвижений.Добавить();
							СтрокаДвижений.ДоговорКонтрагента  = стр.ЗаказпоставщикуСезонный.ЗаказДубль.Договорконтрагента;
							СтрокаДвижений.Сделка              = стр.ЗаказпоставщикуСезонный.ЗаказДубль;
							Если стр.СуммаСписания = Стр.СуммаОстаткаЗаказа  и стр.ЕстьПереплата =0 Тогда //если закрываем заказ и нет переплаты, списываем все деньги
								СтрокаДвижений.СуммаВзаиморасчетов = стр.Остаток;
								СтрокаДвижений.СуммаУпр            = стр.ОстатокУпр;
							иначе	  
								СтрокаДвижений.СуммаВзаиморасчетов = Окр(стр.СуммаПредоплаты,2);
								СтрокаДвижений.СуммаУпр            = Окр(стр.СуммаПредоплаты*(стр.остатокУпр/стр.остаток),2);
							конецЕсли;
						конецЕсли;
					конецЦикла;
					НаборДвижений.мПериод            = дата;
					НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
					Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
					
					таблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");   //приходуем на договор заказа
					таблицаДвижений.ЗаполнитьЗначения(Ссылка,"Сделка");
					НаборДвижений.мПериод            = дата;
					НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
					Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();
				конецЕсли;
				
			конецЕсли;
			
			//пени за просрочку и перегруз
			//***если док не принадлежит последовательности, значит, по этому контрагенту нет ни одного сезонного заказа, штрафы и пени бессмысленны  
			Если ПринадлежностьПоследовательностям.ЗаказыПоставщикамСезонные.Количество() > 0 Тогда
				ДвиженияПоРегиструПениШтрафыПоставщикам(ТабДвижений);
			КонецЕсли; //***
			
			
			//+++ 23.09.2014 - проверка по цене Кр.Опта  для шин - для Доколина...
			#Если Клиент тогда	
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	ЗаказПоставщикуТовары.НомерСтроки,
				|	ЗаказПоставщикуТовары.Номенклатура.Код КАК КодТов,
				|	ЗаказПоставщикуТовары.Номенклатура,
				|	ЗаказПоставщикуТовары.Цена,
				|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК ЦенаКрОпт,
				|	ЗаказПоставщикуТовары.Цена - ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК delta
				|ИЗ
				|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаДок, 	ТипЦен = &КрОпт
				|					И Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ докЗакПост.Номенклатура	
				|									 ИЗ Документ.ЗаказПоставщику.Товары КАК докЗакПост
				|						ГДЕ докЗакПост.Ссылка = &Ссылка И докЗакПост.Номенклатура.ВидТовара = &ВидТовара)) КАК ЦеныНоменклатурыСрезПоследних
				|		ПО ЗаказПоставщикуТовары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
				|ГДЕ
				|	ЗаказПоставщикуТовары.Ссылка = &Ссылка
				|	И ЗаказПоставщикуТовары.Цена >= ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
				|	И ЗаказПоставщикуТовары.Номенклатура.ВидТовара = &ВидТовара";
				
				Запрос.УстановитьПараметр("Ссылка", Ссылка);
				Запрос.УстановитьПараметр("ДатаДок", Ссылка.Дата);
				Запрос.УстановитьПараметр("КрОпт", справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005") ); //Кр.Опт
				Запрос.УстановитьПараметр("ВидТовара", перечисления.ВидыТоваров.Шины ); //Кр.Опт
				
				Результат = Запрос.Выполнить();
				Выборка = Результат.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					//Если выборка.delta>=0.00 и не РольДоступна("ПравоЗавершенияРаботыПользователей") тогда // > 1 рубля - запрет
					//	Отказ = истина;
					//КонецЕсли;	
					
					сообщить(строка(выборка.НомерСтроки)+" строка:  Цена > Кр.Опта!   Для товара: "+строка(Выборка.КодТов)+" - "+строка(Выборка.Номенклатура)+" Цена закупки: "+строка(выборка.Цена)+"р. БОЛЬШЕ Цены продажи по Кр.опту: "+строка(Выборка.ЦенаКрОпт)+"р. на "+формат(выборка.delta,"ЧДЦ=2")+"р.", СтатусСообщения.Внимание );
				КонецЦикла;
			#КонецЕсли
			//+++)
		КонецЕсли; // не отказ
	конецЕсли;
	
КонецПроцедуры	// ОбработкаПроведения()

// Процедура устанавливает номер документа.
//
// Параметры:
//  ДокументОбъект  - ДокументОбъект. Экземпляр документа, которому 
//                    необходимо присвоить новый номер
//
Процедура УстановитьНомерДокументаЛок(ДокументОбъект) 
  МетаданныеДокумента = ДокументОбъект.Метаданные();

	СтрокаПрефикс="00";
	
	Если МетаданныеДокумента.Имя = "ЗаказПоставщикуСезонный" Тогда // префикса нет
		СтрокаПрефикс="00";

	ИначеЕсли ЕстьРеквизитДокумента("Подразделение", МетаданныеДокумента) И 
		ЗначениеЗаполнено(ДокументОбъект.Подразделение.ПрефиксИБ) Тогда
		СтрокаПрефикс=СокрЛП(ДокументОбъект.Подразделение.ПрефиксИБ);
	ИначеЕсли ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) И
		ЗначениеЗаполнено(ДокументОбъект.Организация.Префикс) Тогда
		СтрокаПрефикс=СокрЛП(ДокументОбъект.Организация.Префикс);
		
	ИначеЕсли ЕстьРеквизитДокумента("ЗаказПокупателя", МетаданныеДокумента) тогда //+++ 21.08.2012 для Корректировок
		// префикс - аналогично, но по Заказу покупателя, реквизиты есть точно,
		//но могут быть не заполнены
		ДокументОбъектЗаказПокупателя = ДокументОбъект.ЗаказПокупателя;
		Если ЗначениеЗаполнено(ДокументОбъектЗаказПокупателя.Подразделение)
			и ЗначениеЗаполнено(ДокументОбъектЗаказПокупателя.Подразделение.ПрефиксИБ) Тогда
			СтрокаПрефикс=СокрЛП(ДокументОбъектЗаказПокупателя.Подразделение.ПрефиксИБ);
		ИначеЕсли ЗначениеЗаполнено(ДокументОбъектЗаказПокупателя.Организация) 
			и ЗначениеЗаполнено(ДокументОбъектЗаказПокупателя.Организация.Префикс) Тогда
			СтрокаПрефикс=СокрЛП(ДокументОбъектЗаказПокупателя.Организация.Префикс);  //ТК
		Иначе // если нет организации в заказе покупателя?!
			СтрокаПрефикс="0";
		КонецЕсли;

	Иначе
		СтрокаПрефикс="00";
	КонецЕсли;

		
	ДокументОбъект.УстановитьНовыйНомер(СтрокаПрефикс);	
    

КонецПроцедуры // УстановитьНомерДокумента()

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание) Экспорт

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоОтветственномуХранению") Тогда 
		// Заполнение шапки
		Организация    = Основание.Организация;
		Контрагент     = Основание.Контрагент;
		//29.04.15 Смирнов
		//ДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
		ДоговорКонтрагента = Основание.ДоговорКонтрагента;
		//29.04.15
		ТипЦен=ДоговорКонтрагента.ТипЦен; 
		ВалютаДокумента=Константы.ВалютаУправленческогоУчета.Получить();
		
		ДатаПоступления=ТекущаяДата();
		Ответственный      = Основание.Ответственный;
		
		//+++ 28.07.2015 - номер по подраздлению! СП-Ео-РД-ТК-МС
		Подразделение      = Основание.Подразделение;
		Если Подразделение.Код<>"00005" тогда
			УстановитьНомерДокументаЛок(ЭтотОбъект);
		КонецЕсли;	
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ	Номенклатура,
		|Номенклатура.ЕдиницаХраненияОстатков ЕдиницаИзмерения
		|, Количество, 	1 КАК Коэффициент
		|ИЗ  Документ.ЗаказПоОтветственномуХранению.Товары 
		|ГДЕ Ссылка = &ДокументОснование";
		
		Запрос.УстановитьПараметр("ДокументОснование", Основание);
				
		Результат = Запрос.Выполнить();
		табЗнач = Результат.Выгрузить();		
		табЗнач.Колонки.Добавить("СтавкаНДС");
		табЗнач.ЗаполнитьЗначения(перечисления.СтавкиНДС.НДС18, "СтавкаНДС");
		  
		Товары.Загрузить(табЗнач);
		
 //+++ 28.07.2015
 		Если НЕ ЗначениеЗаполнено(ТипЦен) тогда 
//			если товары[0].Номенклатура.ВидТовара=перечисления.ВидыТоваров.Шины тогда
				типЦен = справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005"); // для шин Кр.Опт
			сообщить("Не установлен тип цен в договоре контрагента! Будут установлены цены Кр.Опт!",СтатусСообщения.Внимание);
//			ИначеЕсли товары[0].Номенклатура.ВидТовара=перечисления.ВидыТоваров.Диски тогда 
//				типЦен = справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00008"); // для дисков Базовая
//			сообщить("Не установлен тип цен в договоре контрагента! Будут установлены цены по типу Базовая!",СтатусСообщения.Внимание);
//			КонецЕсли; 			
		КонецЕсли;	

		Для каждого СтрокаТовары ИЗ Товары  Цикл
				СтрокаТовары.Цена=ПолучитьЦенуКонтрагента (СтрокаТовары.Номенклатура, , Контрагент, ТипЦен, ТекущаяДата(), , 
				, , , ДоговорКонтрагента);
				РассчитатьСуммуТабЧасти(СтрокаТовары, ЭтотОбъект);
				РассчитатьСуммуНДСТабЧасти(СтрокаТовары, ЭтотОбъект);

		КОнецЦикла;	
		Комментарий = "# "+строка(Основание)+" # ";
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.Событие") Тогда
		// Заполнение шапки
		КонтактноеЛицо = Основание.КонтактноеЛицо;
		Контрагент     = Основание.Контрагент;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщикуСезонный") Тогда
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект,Основание);
		заполнитьОснование(Основание);
		ПортНазначения = Основание.ПортНазначения;
		Для каждого стр из Основание.Товары Цикл
			НовСтр = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,Стр);	
		КонецЦикла;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда

		// Заполнение шапки
		ВалютаДокумента    = Основание.ВалютаДокумента;
		ВремяНапоминания   = Основание.ВремяНапоминания;
		ДатаОплаты         = Основание.ДатаОплаты;
		ДатаПоступления    = Основание.ДатаПоступления;
		ДоговорКонтрагента = Основание.ДоговорКонтрагента;
		ИспользоватьПлановуюСебестоимость = Основание.ИспользоватьПлановуюСебестоимость;
		ИтогПлановаяСебестоимость         = Основание.ИтогПлановаяСебестоимость;
		КратностьВзаиморасчетов           = Основание.КратностьВзаиморасчетов;
		Комментарий             = СокрЛП(Лев(Основание.Комментарий,100));  //+++ 07.03.2012
		КонтактноеЛицо          = Основание.КонтактноеЛицо;
		Контрагент              = Основание.Контрагент;
		КурсВзаиморасчетов = Основание.КурсВзаиморасчетов;
		НапомнитьОСобытии  = Основание.НапомнитьОСобытии;
		Организация        = Основание.Организация;
		Ответственный      = Основание.Ответственный;
		Подразделение      = Основание.Подразделение;
		Склад              = Основание.Склад;
		СтруктурнаяЕдиница = Основание.СтруктурнаяЕдиница;
		СуммаВключаетНДС   = Основание.СуммаВключаетНДС;
		СуммаДокумента     = Основание.СуммаДокумента;
		ТипЦен             = Основание.ТипЦен;
		УчитыватьНДС       = Основание.УчитыватьНДС;

		УстановитьДатуОплатыПоДоговору();

		Для Каждого ТекСтрокаВозвратнаяТара Из Основание.ВозвратнаяТара Цикл
			НоваяСтрока = ВозвратнаяТара.Добавить();
			НоваяСтрока.Количество   = ТекСтрокаВозвратнаяТара.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаВозвратнаяТара.Номенклатура;
			НоваяСтрока.Сумма        = ТекСтрокаВозвратнаяТара.Сумма;
			НоваяСтрока.Цена         = ТекСтрокаВозвратнаяТара.Цена;
		КонецЦикла;
		Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Количество     = ТекСтрокаТовары.Количество;
			НоваяСтрока.КоличествоМест = ТекСтрокаТовары.КоличествоМест;
			НоваяСтрока.Коэффициент    = ТекСтрокаТовары.Коэффициент;
			НоваяСтрока.Номенклатура   = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.СтавкаНДС      = ТекСтрокаТовары.СтавкаНДС;
			НоваяСтрока.Цена           = ТекСтрокаТовары.Цена;
			НоваяСтрока.Сумма          = ТекСтрокаТовары.Сумма;
			НоваяСтрока.СуммаНДС       = ТекСтрокаТовары.СуммаНДС;
			НоваяСтрока.ЕдиницаИзмерения           = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрокаТовары.ХарактеристикаНоменклатуры;
			НоваяСтрока.ПлановаяСебестоимость      = ТекСтрокаТовары.ПлановаяСебестоимость;
		КонецЦикла;
		Для Каждого ТекСтрокаУслуги Из Основание.Услуги Цикл
			НоваяСтрока = Услуги.Добавить();
			НоваяСтрока.Количество   = ТекСтрокаУслуги.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаУслуги.Номенклатура;
			НоваяСтрока.Содержание   = ТекСтрокаУслуги.Содержание;
			НоваяСтрока.СтавкаНДС    = ТекСтрокаУслуги.СтавкаНДС;
			НоваяСтрока.Сумма        = ТекСтрокаУслуги.Сумма;
			НоваяСтрока.СуммаНДС     = ТекСтрокаУслуги.СуммаНДС;
			НоваяСтрока.Цена         = ТекСтрокаУслуги.Цена;
		КонецЦикла;
	//+АЧ. Для заявки на возварат товаров 
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваров") Тогда

		Если не Основание.Подготовлен тогда
			//Предупреждение("Документ не подготовлен, формирование возврата невозможно!");
			Возврат;
		КонецЕсли;
				
		// Заполнение шапки
		// Проверка. 
				
		Если Основание.Товары.Количество()=0 Тогда 
			//Предупреждение("В заявке на возврат пустая табличная часть, формирование возврата невозможно !");
			Возврат;						
		КонецЕсли;
		
		Реализация0 						= Основание.Товары[0].Реализация;
		Заказ0 								= Реализация0.Сделка;
		ВалютаДокумента    					= Реализация0.ВалютаДокумента;
		
		Попытка 
			ВремяНапоминания  	 				= Заказ0.ВремяНапоминания;
			ДатаОплаты         					= Заказ0.ДатаОплаты;
			ИспользоватьПлановуюСебестоимость 	= Заказ0.ИспользоватьПлановуюСебестоимость;
			ИтогПлановаяСебестоимость         	= Заказ0.ИтогПлановаяСебестоимость;
			КонтактноеЛицо          			= Заказ0.КонтактноеЛицо;
			НапомнитьОСобытии  					= Заказ0.НапомнитьОСобытии;
			СтруктурнаяЕдиница 					= Заказ0.СтруктурнаяЕдиница;
		Исключение
			;
		КонецПопытки;
		
	//	ДоговорКонтрагента 					= Реализация0.ДоговорКонтрагента;
		КратностьВзаиморасчетов           	= Реализация0.КратностьВзаиморасчетов;
		КурсВзаиморасчетов 					= Реализация0.КурсВзаиморасчетов;
		Организация        					= Реализация0.Организация;
		СуммаВключаетНДС   					= Реализация0.СуммаВключаетНДС;
		
		Комментарий             			= Основание.Комментарий;  
		Контрагент              			= Основание.Контрагент;
		Ответственный      					= Основание.Ответственный;		
		Подразделение      					= Основание.Подразделение;
		УчитыватьНДС       					= Реализация0.УчитыватьНДС;
		ЭтотОбъект.Основание				= Основание;

		УстановитьДатуОплатыПоДоговору();
		
		//Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		//                      |	заявканавозвраттоваровтовары.Номенклатура,
		//                      |	заявканавозвраттоваровтовары.Количество,
		//                      |	заявканавозвраттоваровтовары.ЦенаРеализации,
		//                      |	ЕСТЬNULL(Заказ.Количество, 0) КАК общееКоличество
		//                      |ИЗ
		//                      |	(ВЫБРАТЬ
		//                      |		ЗаявкаНаВозвратТоваровТовары.Номенклатура КАК Номенклатура,
		//                      |		МИНИМУМ(ЗаявкаНаВозвратТоваровТовары.ЦенаРеализации) КАК ЦенаРеализации,
		//                      |		СУММА(ЗаявкаНаВозвратТоваровТовары.Количество) КАК Количество
		//                      |	ИЗ
		//                      |		Документ.ЗаявкаНаВозвратТоваров.Товары КАК ЗаявкаНаВозвратТоваровТовары
		//                      |	ГДЕ
		//                      |		ЗаявкаНаВозвратТоваровТовары.Ссылка = &ссылка
		//                      |	
		//                      |	СГРУППИРОВАТЬ ПО
		//                      |		ЗаявкаНаВозвратТоваровТовары.Номенклатура) КАК заявканавозвраттоваровтовары
		//                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		//                      |			ЗАказПоставщикуТовары.Номенклатура КАК Номенклатура,
		//                      |			СУММА(ЗАказПоставщикуТовары.Количество) КАК Количество
		//                      |		ИЗ
		//                      |			Документ.ЗаказПоставщику.Товары КАК ЗАказПоставщикуТовары
		//                      |		ГДЕ
		//                      |			ЗАказПоставщикуТовары.Ссылка.Основание = &ссылка
		//                      |		
		//                      |		СГРУППИРОВАТЬ ПО
		//                      |			ЗАказПоставщикуТовары.Номенклатура) КАК Заказ
		//                      |		ПО заявканавозвраттоваровтовары.Номенклатура = Заказ.Номенклатура
		//                      |ГДЕ
		//                      |	заявканавозвраттоваровтовары.Количество - ЕСТЬNULL(Заказ.Количество, 0) > 0");
							  
		  Товары.очистить();
		Запрос = Новый Запрос(  "ВЫБРАТЬ
		                        |	ЗаявкаНаВозвратТоваровТовары.Номенклатура,
		                        |	ЗаявкаНаВозвратТоваровТовары.Количество,
		                        |	ЗаявкаНаВозвратТоваровТовары.ЦенаРеализации
		                        |ИЗ
		                        |	Документ.ЗаявкаНаВозвратТоваров.Товары КАК ЗаявкаНаВозвратТоваровТовары
		                        |ГДЕ
		                        |	ЗаявкаНаВозвратТоваровТовары.Ссылка = &Ссылка
		                        |	И ЗаявкаНаВозвратТоваровТовары.Статус = &Подтвержден");
		
		
		Запрос.УстановитьПараметр("Ссылка",Основание);
		//31.05.2016 Добавлено условие, чтобы в ТЧ попадали только строки со статусом "Подтвержден"		
		Запрос.УстановитьПараметр("Подтвержден",Перечисления.СтатусыСтрокЗаказа.Подтвержден);
		
		Выб = Запрос.Выполнить().Выгрузить();
		
		Для Каждого ТекСтрокаТовары Из Выб Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Количество     = ТекСтрокаТовары.Количество;
			НоваяСтрока.Номенклатура   = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.СтавкаНДС	   = Перечисления.СтавкиНДС.НДС18;
			НоваяСтрока.ЕдиницаИзмерения  = ТекСтрокаТовары.Номенклатура.ЕдиницаХраненияОстатков;			
			НоваяСтрока.Цена           = ТекСтрокаТовары.ЦенаРеализации;
			РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
			РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

Процедура заполнитьОснование(ОснованиеДок)
	Основание = ОснованиеДок;
КонецПроцедуры

Функция ПроводитьПоСезоннымПоставщиов()
	ВалютаUSD=Справочники.Валюты.НайтиПоКоду("840");
	
	ПроводитьПоСезонным=Ложь;
	Если ДоговорКонтрагента.ВалютаВзаиморасчетов=ВалютаUSD тогда
		ПроводитьПоСезонным=истина;
		толькоДиски=истина;
		//Для каждого товар из товары цикл
		//	Если товар.Номенклатура.ВидТовара<>Перечисления.ВидыТоваров.Диски тогда
		//		толькоДиски=Ложь;
		//		прервать;
		//	КонецЕсли;
		//КонецЦикла;
	КонецЕсли;
	Возврат ПроводитьПоСезонным и толькоДиски;
КонецФункции

Процедура СписатьЗаказыСезонные(РежимПроведения)
	
	
	
	
	
	
	
	
	
	
	
	
	тзДляСписания=Новый ТаблицаЗначений;
	тзДляСписания.Колонки.Добавить("ЗаказПоставщикуСезонный", Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщикуСезонный"));
	тзДляСписания.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	тзДляСписания.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
	
	
	ТабНоменклатуры=Товары.Выгрузить(,"Номенклатура,Количество");
	
	сч = ТабНоменклатуры.Количество()-1;
	Пока сч >=0 Цикл
		Если табНоменклатуры[сч].Номенклатура.ВидТовара <> Перечисления.ВидыТоваров.Диски и не (табНоменклатуры[сч].Номенклатура.ПринадлежитЭлементу(Справочники.Номенклатура.НайтиПоКоду("0000701"))) Тогда
			ТабНоменклатуры.Удалить(сч);
		конецЕсли;
		 сч=сч-1;
  	конецЦикла;
	
	ТабНоменклатуры.Свернуть("Номенклатура","Количество");
	
	Запрос = новый Запрос;        //***20150715 добавлено ограничение - только по незакрытым ЗПС         
	Запрос.Текст="ВЫБРАТЬ
	             |	А.ЗаказПоставщикуСезонный,
	             |	А.Номенклатура КАК Номенклатура,
	             |	А.Количество,
	             |	А.ЗакрытыйЗаказПоставщикуСезонный,
	             |	А.ДатаЗакрытия
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		ЗаказыПоставщикамСезонныеОстатки.ЗаказПоставщикуСезонный КАК ЗаказПоставщикуСезонный,
	             |		ЗаказыПоставщикамСезонныеОстатки.Номенклатура КАК Номенклатура,
	             |		ЗаказыПоставщикамСезонныеОстатки.КоличествоОстаток КАК Количество,
	             |		ЕСТЬNULL(ЗакрытияЗПС.ЗакрытыйЗаказПоставщикуСезонный, 0) КАК ЗакрытыйЗаказПоставщикуСезонный,
	             |		ЕСТЬNULL(ЗакрытияЗПС.ДатаЗакрытия, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаЗакрытия
	             |	ИЗ
	             |		РегистрНакопления.ЗаказыПоставщикамСезонные.Остатки(
	             |				&ДатаЗаказа,
	             |				ЗаказПоставщикуСезонный.ДоговорКонтрагента.Владелец = &Контрагент
	             |					И НЕ ЗаказПоставщикуСезонный.Транзит
				 |                  И ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = &ВЭД //ОтборСсылка и ЗаказПоставщикуСезонный = &Ссылка
	             |					И Номенклатура В (&СписокНоменклатуры)) КАК ЗаказыПоставщикамСезонныеОстатки
	             |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |				ЗакрытиеЗаказовПоставщикамСезонных.ЗаказПоставщикуСезонный КАК ЗакрытыйЗаказПоставщикуСезонный,
	             |				ЗакрытиеЗаказовПоставщикамСезонных.Ссылка.Дата КАК ДатаЗакрытия
	             |			ИЗ
	             |				Документ.ЗакрытиеЗаказовПоставщикамСезонных.Заказы КАК ЗакрытиеЗаказовПоставщикамСезонных
	             |			ГДЕ
	             |				ЗакрытиеЗаказовПоставщикамСезонных.Ссылка.Проведен) КАК ЗакрытияЗПС
	             |			ПО ЗаказыПоставщикамСезонныеОстатки.ЗаказПоставщикуСезонный = ЗакрытияЗПС.ЗакрытыйЗаказПоставщикуСезонный
	             |	ГДЕ
	             |		ЗаказыПоставщикамСезонныеОстатки.КоличествоОстаток > 0
	             |	
	             |	ДЛЯ ИЗМЕНЕНИЯ) КАК А
	             |ГДЕ
	             |	(А.ЗакрытыйЗаказПоставщикуСезонный = 0
	             |			ИЛИ А.ДатаЗакрытия > &ДатаЗаказа)
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	А.ЗаказПоставщикуСезонный.ДатаДействияПо,
	             |	А.ЗаказПоставщикуСезонный.Дата,
	             |	Номенклатура
	             |АВТОУПОРЯДОЧИВАНИЕ";
	
	
	//ГраницаБезДок=?(РежимПроведения = РежимПроведенияДокумента.НеОперативный,МоментВремени(),'00010101');
	Запрос.УстановитьПараметр("ДатаЗаказа",Дата);				 
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Запрос.УстановитьПараметр("ВЭД", Подразделение.ВЭД);
	Если Подразделение.ВЭД Тогда
		запрос.Текст = СтрЗаменить(Запрос.Текст,"//ОтборСсылка","");
	    Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	КонецЕсли;
	Запрос.УстановитьПараметр("СписокНоменклатуры",Товары.Выгрузить(,"Номенклатура"));
	тзРез=Запрос.Выполнить().Выгрузить();
	
	Отбор=Новый структура("Номенклатура");
	Для Каждого стрТЧ из ТабНоменклатуры Цикл
		ОсталосьСписать=стрТЧ.Количество;
		Отбор.Номенклатура=стрТЧ.Номенклатура;
		строкиНоменклатуры=тзРез.НайтиСтроки(Отбор);
		Для Каждого эл из строкиНоменклатуры Цикл
			КоличествоДляСписания=?(ОсталосьСписать>=эл.Количество,эл.Количество,ОсталосьСписать);
			стрСписания=тзДляСписания.Добавить();
			стрСписания.Номенклатура=стрТЧ.Номенклатура;
			стрСписания.ЗаказПоставщикуСезонный=эл.ЗаказПоставщикуСезонный;
			стрСписания.Количество=КоличествоДляСписания;
			ОсталосьСписать=ОсталосьСписать-КоличествоДляСписания;
			Если ОсталосьСписать<=0 тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		Если  ОсталосьСписать>0 тогда
			стрСписания=тзДляСписания.Добавить();
			стрСписания.Номенклатура=стрТЧ.Номенклатура;
			стрСписания.Количество=ОсталосьСписать;
			//Если не нашли на какой сезонник списать, значит это перегруз. Спишем в минус на последний, который был по этой номенклатуре

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаказыПоставщикамСезонныеОбороты.ЗаказПоставщикуСезонный,
		|	ЗаказыПоставщикамСезонныеОбороты.ЗаказПоставщикуСезонный.Дата КАК ЗаказПоставщикуСезонныйДата
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикамСезонные.Обороты(
		|			&ДатаНач,
		|			&Дата,
		|			,
		|			Номенклатура = &Номенклатура
		|			И НЕ ЗаказПоставщикуСезонный.Транзит
		|				И ЗаказПоставщикуСезонный.Контрагент = &Контрагент
		|               И ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = &ВЭД
		|				И ЗаказПоставщикуСезонный.ДатаДействияПо > &ТекДата) КАК ЗаказыПоставщикамСезонныеОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказПоставщикуСезонныйДата УБЫВ";

	Запрос.УстановитьПараметр("ДатаНач", ДобавитьМесяц(Дата,-8));
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ВЭД", Подразделение.ВЭД);
	Запрос.УстановитьПараметр("ТекДата", НачалоДня(Дата)-30*24*60*60);//перегрузы в течении 29 дней после окончания даты действия сезонного заказа
	Запрос.УстановитьПараметр("Номенклатура", стрТЧ.Номенклатура);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);

	последняяЗапись = Запрос.Выполнить().Выбрать();
	Если ПоследняяЗапись.Следующий() Тогда
				стрСписания.ЗаказПоставщикуСезонный=ПоследняяЗапись.ЗаказПоставщикуСезонный;
	конецЕсли;		
		КонецЕсли;
	КонецЦикла;

	Для Каждого стр из тзДляСписания Цикл
		// регистр ЗаказыПоставщикуСезонные Приход
		Движение = Движения.ЗаказыПоставщикамСезонные.Добавить();
		Движение.Регистратор = ссылка; // этот документ!
		Движение.ВидДвижения = ВидДвиженияНакопления.расход;
		Движение.Период = Дата; // дата регистрации в регистре накопления = дате документа!
		Движение.ЗаказПоставщикуСезонный = стр.ЗаказПоставщикуСезонный;
		Движение.Подразделение = стр.ЗаказПоставщикуСезонный.Подразделение;
		Движение.Номенклатура = стр.Номенклатура;
		Движение.Количество   = стр.Количество;
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьПовторяющиесяТовары(Отказ)
	Запрос=Новый Запрос;
	//Запрос.Текст=" ВЫБРАТЬ
	//|	ЗаказПокупателяТовары.Номенклатура Номенклатура, Количество(*) КоличествоСтрок
	//|ИЗ Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	//|ГДЕ ЗаказПокупателяТовары.Ссылка = &Ссылка
	//|СГРУППИРОВАТЬ ПО 	ЗаказПокупателяТовары.Номенклатура
	//|ИМЕЮЩИЕ 	Количество(*)>1" ;
	
	//+++ 15.11.2011
	Запрос.Текст="ВЫБРАТЬ
	             |	ЗаказПоставщикуТовары.Номенклатура КАК Номенклатура,
	             |	КОЛИЧЕСТВО(*) КАК КоличествоСтрок,
	             |	ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
				 //04.07.2017 !!!
	             |	ЗаказПоставщикуТовары.Основание
	             |ИЗ
	             |	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	             |ГДЕ
	             |	ЗаказПоставщикуТовары.Ссылка = &Ссылка
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ЗаказПоставщикуТовары.Номенклатура,
	             |	ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры,
	             |	ЗаказПоставщикуТовары.Основание
	             |
	             |ИМЕЮЩИЕ
	             |	КОЛИЧЕСТВО(*) > 1" ;
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.КоличествоСтрок>1 тогда
			Отказ=Истина;
			СообщитьОбОшибке("Товар "+Строка(Выборка.Номенклатура.Код)+", " +Строка(Выборка.Номенклатура) +" "+Строка(Выборка.ХарактеристикаНоменклатуры) +" повторяется "+строка(Выборка.КоличествоСтрок)+" раза.");
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	

#Если Клиент тогда
	
	процедура СравнитьЦеныСФоп()
		если Организация = справочники.Организации.НайтиПоКоду("00001") тогда
			ЭтоЭкспорт = Ложь;
		иначе 
			ЭтоЭкспорт = Истина;
		конецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	//|	ЗаказПоставщикуТовары.Ссылка КАК Ссылка,
	|	ЗаказПоставщикуТовары.Номенклатура КАК Номенклатура,
	|	ЗаказПоставщикуТовары.Количество КАК Количество,
	|	ЗаказПоставщикуТовары.Цена КАК Цена,
	|	ЗаказПоставщикуТовары.Сумма КАК Сумма
	|ПОМЕСТИТЬ ЗаказыПоставщику
	|ИЗ
	|	&Товары КАК ЗаказПоставщикуТовары
	//|ГДЕ
	//|	ЗаказПоставщикуТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	//|	ЗаказыПоставщику.Ссылка КАК Ссылка,
	|	ЗаказыПоставщику.Номенклатура.Код КАК Код,
	|	ЗаказыПоставщику.Номенклатура КАК Номенклатура,
	|	ЗаказыПоставщику.Количество,
	|	ЗаказыПоставщику.Цена,
	|	ЕСТЬNULL(ЦеныФОП.Цена, 0) КАК ЦенаФОП,
	|	ЗаказыПоставщику.Сумма
	|ПОМЕСТИТЬ ЦенаСкомплектующими
	|ИЗ
	|	ЗаказыПоставщику КАК ЗаказыПоставщику
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныФОП.СрезПоследних(&Дата, ) КАК ЦеныФОП
	|		ПО ЗаказыПоставщику.Номенклатура = ЦеныФОП.Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	//|	ЗаказыПоставщику.Ссылка,
	|	ЗаказыПоставщику.Номенклатура.Код,
	|	ЗаказыПоставщику.Номенклатура,
	|	0,
	|	0,
	|	КомплектующиеНоменклатуры.Количество * ЕСТЬNULL(ЦеныФОП.Цена, 0),
	|	0
	|ИЗ
	|	ЗаказыПоставщику КАК ЗаказыПоставщику
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныФОП"+?(ЭтоЭкспорт,"Экспорт","")+".СрезПоследних(&Дата, ) КАК ЦеныФОП
	|			ПО КомплектующиеНоменклатуры.Комплектующая = ЦеныФОП.Номенклатура
	|		ПО ЗаказыПоставщику.Номенклатура = КомплектующиеНоменклатуры.Номенклатура
	|ГДЕ
	|	КомплектующиеНоменклатуры.Комплектующая.Родитель В(&Родитель)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	//|	ЦенаСкомплектующими.Ссылка КАК Ссылка,
	|	ЦенаСкомплектующими.Код КАК Код,
	|	ЦенаСкомплектующими.Номенклатура КАК Номенклатура,
	|	СУММА(ЦенаСкомплектующими.Количество) КАК Количество,
	|	СУММА(ЦенаСкомплектующими.Цена) КАК Цена,
	|	СУММА(ЦенаСкомплектующими.ЦенаФОП) КАК ЦенаФОП,
	|	СУММА(ЦенаСкомплектующими.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ИтоговаяТаблица
	|ИЗ
	|	ЦенаСкомплектующими КАК ЦенаСкомплектующими
	|
	|СГРУППИРОВАТЬ ПО
	//|	ЦенаСкомплектующими.Ссылка,
	|	ЦенаСкомплектующими.Код,
	|	ЦенаСкомплектующими.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	//|	ИтоговаяТаблица.Ссылка КАК Ссылка,
	|	ИтоговаяТаблица.Код,
	|	ИтоговаяТаблица.Номенклатура КАК Номенклатура,
	|	ИтоговаяТаблица.Количество,
	|	ИтоговаяТаблица.Цена,
	|	ИтоговаяТаблица.ЦенаФОП,
	|	ИтоговаяТаблица.Сумма
	|ИЗ
	|	ИтоговаяТаблица КАК ИтоговаяТаблица
	|ГДЕ
	|	ИтоговаяТаблица.Цена > ИтоговаяТаблица.ЦенаФОП
	|
	|УПОРЯДОЧИТЬ ПО
	//|	Ссылка,
	|	Номенклатура";
	
	Запрос.УстановитьПараметр("USD", Справочники.Валюты.НайтиПоНаименованию("USD"));
	//Запрос.УстановитьПараметр("НачДата", НачДата);
	Запрос.УстановитьПараметр("Товары", Товары);
	список = новый списокЗначений();
	Список.добавить(справочники.Номенклатура.НайтиПоКоду("0000702"));
	Список.Добавить(справочники.Номенклатура.НайтиПоКоду("0000713"));
	Запрос.УстановитьПараметр("Родитель", Список);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если результат.Количество()> 0 Тогда
	Для каждого стр из  результат Цикл
	 сообщить("Для номенклатуры "+стр.Номенклатура+" установлена цена "+стр.Цена+ ", которая выше цены ФОП "+стр.ЦенаФОП +" !");
	 СтрокаДляИсправления =  Товары.Найти(СТР.Номенклатура,"номенклатура");
	 строкаДляИсправления.Цена = стр.Ценафоп;
	 сообщить("Для номенклатуры "+стр.Номенклатура+" цена изменена  на цену ФОБ");
	конецЦикла;

		
		//попытка //11.03.16 Смирнов 
		//	//при создании через ws переменная глТекущийПользователь переменная неопределена, поэтому начало попытки перенес в самое начало
		//	задача = задачи.ЗадачиПользователя.СоздатьЗадачу();
		//	Задача.Исполнитель = Справочники.Пользователи.НайтиПоКоду("Горицкий А. И.");
		//	задача.Наименование = "Цены в заказе поставщику превысили цены ФОП"; 
		//	задача.Описание = "Цены в заказе поставщику превысили цены ФОП: " +"
		//	|";
		//	Для каждого стр из результат Цикл
		//		Задача.Описание = Задача.Описание+ " "+стр.номенклатура+ ", код: "+стр.код+ ",  цена: "+стр.цена+ ",  цена ФОП: "+стр.ценаФОП+"
		//		|";
		//	конецЦикла;
		//	
		//	//14.03.2016
		//	//задача.Инициатор   =глТекущийПользователь;
		//	Если параметрыСеанса.ТекущийПользователь = справочники.Пользователи.ПустаяСсылка() тогда
		//		параметрыСеанса.ТекущийПользователь = справочники.Пользователи.НайтиПоКоду("Робот (центр - номенклатура)");
		//	КонецЕсли;
		//	задача.Инициатор   = параметрыСеанса.ТекущийПользователь;
		//	
		//	задача.Объект   	 = ЭтотОбъект.ссылка;
		//	задача.Дата 		    = ТекущаяДата();
		//	задача.СрокИсполнения = КонецДня( ТекущаяДата() ); 	
		//	задача.Оповещение     = истина;
		//	задача.СрокОповещения = ТекущаяДата(); 
		//	
		//	//Попытка 11.03.16 Смирнов
		//	задача.Записать();
		//исключение
		//КонецПопытки;
		//попытка
		//	ДубльЗадача = Задача.Скопировать();
		//	Дубльзадача.Дата = ТекущаяДата();
		//	ДубльЗадача.Исполнитель = Справочники.Пользователи.НайтиПоКоду("Серебренникова А.А.");
		//	ДубльЗадача.Записать();
		//	
		//исключение
		//КонецПопытки;
		
	конецЕсли;
	
конецпроцедуры	

#КонецЕсли

Процедура ПриКопировании(ОбъектКопирования)
СезонныйЗаказДляСинхронизации = Документы.ЗаказПоставщикуСезонный.ПустаяСсылка();
КонецПроцедуры

#Если Клиент тогда

//17.04.15 Смирнов
процедура СоздатьДокументыПоОТХ(ПечататьКомментарий = Ложь,СписокРазрешенныхГрупп = Неопределено) Экспорт
	//надо еще как то проверять были ли уже доки по этому заказу
	// найдем заказ по ОТХ
	//# Заказ по ответственному хранению СП000211 от 12.02.2015 15:29:21 # 
	Стр=СтрЗаменить(Комментарий,"# Заказ по ответственному хранению","");
	номерЗОТХ=СокрЛП(Лев(Стр,Найти(стр," от ")));
	стр=Сред(стр,найти(стр," от ")+4);
	попытка
		ПериодЗаказа=Дата(СокрЛП(лев(стр,найти(стр," #"))));
	исключение
		ПериодЗаказа=Дата("00010101000000");
	конецпопытки;
	Если номерЗОТХ="" или ПериодЗаказа=Дата("00010101000000") тогда
		Сообщить("не удалось найти заказ из комментария");
	иначе
		ЗаказПоОТХ=Документы.ЗаказПоОтветственномуХранению.НайтиПоНомеру(номерЗОТХ,ПериодЗаказа);
		ЕстьПоступлениеПоЗаказу=ПроверитьНаличиеПТиУ();
		ЕстьОперацияПоЗаказу=ПроверитьНаличиеОперацииОТХ(ЗаказПоОТХ);
		Если ЗаказПоОТХ<>неопределено тогда
			нехватает=ложь;
			//Сформируем операцию(списание по ОТХ) и поступление ТиУ
			//Операция по ОТХ списание
			ОперацияОб=Документы.ОперацияПоОтветственномуХранению.СоздатьДокумент();
			ОперацияОб.Дата					= ТекущаяДата();//--- иначе идет списание в  минус----Алексеева 15.08..16//ЗаказПоОТХ.Дата+1;
			ОперацияОб.ВидОперации 			= ЗаказПоОТХ.ВидОперации;
			ОперацияОб.Контрагент 			= ЗаказПоОТХ.Контрагент;
			ОперацияОб.ДоговорКонтрагента 	= ЗаказПоОТХ.ДоговорКонтрагента;
			ОперацияОб.Организация 			= ЗаказПоОТХ.Организация;
			ОперацияОб.Комментарий 			= ЗаказПоОТХ.Комментарий;
			ОперацияОб.Подразделение 		= ЗаказПоОТХ.Подразделение;
			ОперацияОб.ДокументОснование 	= ЗаказПоОТХ.Ссылка;
			//товары
			ТоварыОТХ = ЗаказПоОТХ.Товары.Выгрузить(,"Номенклатура,Количество");
			ТоварыОТХ.Свернуть("Номенклатура","Количество");
			
			ТоварыДляСписания=ОперацияОб.Товары.Выгрузить();
			
			СписокТоваровОТХ=ТоварыОТХ.ВыгрузитьКолонку("Номенклатура");
			ЗапросОстаткиОТХ=Новый Запрос;
			ЗапросОстаткиОТХ.Текст="ВЫБРАТЬ
			                       |	а.Номенклатура,
			                       |	а.Склад,
			                       |	а.КоличествоОстаток
			                       |ИЗ
			                       |	(ВЫБРАТЬ
			                       |		ТоварыНаОтветственномХраненииОстатки.Номенклатура КАК Номенклатура,
			                       |		ТоварыНаОтветственномХраненииОстатки.Склад КАК Склад,
			                       |		СУММА(ТоварыНаОтветственномХраненииОстатки.КоличествоОстаток) КАК КоличествоОстаток
			                       |	ИЗ
			                       |		РегистрНакопления.ТоварыНаОтветственномХранении.Остатки(
			                       |				&ДатаОТХ,
			                       |				ДоговорКонтрагента = &Договор
			                       |					И Номенклатура В (&СписокНоменклатурыОТХ)
			                       |					И Склад.Подразделение В(&Подразделение)
			                       |					И Склад.ЗапретитьИспользование = ЛОЖЬ
								   |			//Усл	И Склад.ГруппаСкладов В (&СписокСк)
								   |) КАК ТоварыНаОтветственномХраненииОстатки
			                       |	
			                       |	СГРУППИРОВАТЬ ПО
			                       |		ТоварыНаОтветственномХраненииОстатки.Номенклатура,
			                       |		ТоварыНаОтветственномХраненииОстатки.Склад) КАК а
			                       |ГДЕ
			                       |	а.КоличествоОстаток > 0";
								   
						 Если СписокРазрешенныхГрупп <> Неопределено Тогда		   
							 ЗапросОстаткиОТХ.Текст = СтрЗаменить(ЗапросОстаткиОТХ.Текст,"//Усл","");		   
							 ЗапросОстаткиОТХ.УстановитьПараметр("СписокСк",СписокРазрешенныхГрупп);		   
						 КонецЕсли;
						 
						 ЗапросОстаткиОТХ.УстановитьПараметр("Договор",ЗаказПоОТХ.ДоговорКонтрагента);
						 ЗапросОстаткиОТХ.УстановитьПараметр("СписокНоменклатурыОТХ",СписокТоваровОТХ);
						 СписокПодразделение = Новый СписокЗначений;
						 СписокПодразделение.Добавить(ЗаказПоОТХ.Подразделение);
						 Если ЗаказПоОТХ.Подразделение = Справочники.Подразделения.НайтиПоКоду("00005") Тогда
						 СписокПодразделение.Добавить(Справочники.Подразделения.ПустаяСсылка());
						 конецесли;
						 ЗапросОстаткиОТХ.УстановитьПараметр("Подразделение",СписокПодразделение);
				         // ЗапросОстаткиОТХ.УстановитьПараметр("ДатаОТХ",ЗаказПоОТХ.Дата+1);
						 ЗапросОстаткиОТХ.УстановитьПараметр("ДатаОТХ",ТекущаяДата());
						 ОстаткиОТХ=ЗапросОстаткиОТХ.Выполнить().выгрузить();
						 отбор=новый Структура("Номенклатура");
						 Для каждого стр из  ТоварыОТХ цикл
							 ОсталосьСписать=стр.Количество;
							 отбор.Номенклатура=стр.Номенклатура;
							 МассивСтр=ОстаткиОТХ.НайтиСтроки(отбор);
							 Для каждого эл из МассивСтр цикл
								 Если осталосьСписать>0 тогда
									 нстр=ТоварыДляСписания.Добавить();
									 нстр.Номенклатура=эл.Номенклатура;
									 нстр.Склад=эл.Склад;
									 КолСписать= ?(осталосьСписать<=эл.КоличествоОстаток,осталосьСписать,эл.КоличествоОстаток);
									 нстр.Количество=КолСписать;
									 ОсталосьСписать=ОсталосьСписать-КолСписать;
									 Если ОсталосьСписать<=0 тогда
										 прервать;
									 КонецЕсли;
								 КонецЕсли;
							 КонецЦикла;
							 Если ОсталосьСписать>0 тогда
								 Сообщить("Для "+стр.Номенклатура+" остатка на складах ОТХ подраделения "+ЗаказПоОТХ.Подразделение+", не хватает "+ОсталосьСписать+" шт.");
								 нехватает=истина;
							 КонецЕсли;
						 КонецЦикла;
						 
						 Если ПечататьКомментарий Тогда
						     ОперацияОб.Комментарий = ОперацияОб.Комментарий + " <<>> " +  ЗаказПоОТХ.Комментарий;
						 КонецЕсли;
						 
						 Если нехватает=ложь и не ЕстьОперацияПоЗаказу тогда
							 ОперацияОб.Товары.Загрузить(ТоварыДляСписания);
							 Попытка
								 ОперацияОб.Записать(РежимЗаписиДокумента.Проведение);
							 Исключение
								 Сообщить("Запись/проведение Операции по ОТХ: "+ОписаниеОшибки());
								 Возврат;
							 КонецПопытки;
						 КонецЕсли;
						 
						 если нехватает=Ложь и не ЕстьПоступлениеПоЗаказу тогда
							 ПоступлениеТиУ=Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
							 
							 ЗаполнитьШапкуДокументаПоОснованию(ПоступлениеТиУ, Ссылка);
							 
							 ПоступлениеТиУ.ОтражатьВУправленческомУчете = Истина;
							 //ПоступлениеТиУ.ОтражатьВБухгалтерскомУчете = Истина;
							 //ПоступлениеТиУ.ОтражатьВНалоговомУчете = Истина;
							 ПоступлениеТиУ.ВалютаДокумента 			 = Ссылка.ВалютаДокумента;
							 ПоступлениеТиУ.КурсВзаиморасчетов           = Ссылка.КурсВзаиморасчетов;
							 ПоступлениеТиУ.КратностьВзаиморасчетов      = Ссылка.КратностьВзаиморасчетов;
							 ПоступлениеТиУ.СуммаВключаетНДС             = Истина;
							 ПоступлениеТиУ.Сделка = Ссылка;
							 ПоступлениеТиУ.Дата = ТекущаяДата();///Ссылка.Дата+1;
							 ПоступлениеТиУ.СкладОрдер     = Ссылка.Склад;
							 ПоступлениеТиУ.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
							 ПоступлениеТиУ.РегистрироватьЦеныПоставщика = ложь;
							 
							 
							 ПТиУТовары = ПоступлениеТиУ.Товары;
							 для каждого стр из ТоварыДляСписания цикл
								 нстр=ПТиУТовары.Добавить();
								 
								 
								 нстр.Номенклатура               = стр.Номенклатура;
								 ПриИзмененииНоменклатурыТабЧасти(нстр, ПоступлениеТиУ);
								 нстр.ЕдиницаИзмерения = нстр.Номенклатура.ЕдиницаХраненияОстатков;
								 нстр.Коэффициент = нстр.ЕдиницаИзмерения.Коэффициент;
								 РассчитатьКоличествоТабЧасти(нстр, ПоступлениеТиУ);
								 ЗаполнитьСтавкуНДСТабЧасти(нстр, ПоступлениеТиУ);
								 нстр.Склад = стр.Склад;
								 нстр.Количество = стр.Количество;
								 
								 
								 нстр.Цена = Товары.Найти(нстр.Номенклатура,"Номенклатура").Цена;
								 нстр.Сумма = нстр.Цена * нстр.Количество;
								 
								 ПриИзмененииСуммыТабЧасти(нстр,    ПоступлениеТиУ, ПараметрыСеанса.ТекущийПользователь);
								 РассчитатьСуммуНДСТабЧасти(нстр,   ПоступлениеТиУ);
							 КонецЦикла;
							 
							ГрафикОплаты=ПоступлениеТиУ.ГрафикОплаты;
							нстр=ГрафикОплаты.Добавить();
							//25.05.15 Смирнов
							нстр.Дата=?(не ИспользоватьЧислоДнейДоОплаты,ДатаОплаты,ДатаПоступления+60*60*ЧислоДнейДоОплаты);
							//25.05.15 Смирнов
							нстр.ПроцентОплаты=100;
							
							Если ПечататьКомментарий Тогда
							    ПоступлениеТиУ.Комментарий = ПоступлениеТиУ.Комментарий + " <<>> " +  ЗаказПоОТХ.Комментарий;
							КонецЕсли;
							
							УстановитьНомерДокумента(ПоступлениеТиУ);
							
							Попытка
								 ПоступлениеТиУ.Записать(РежимЗаписиДокумента.Проведение);
							Исключение
								 //ПоступлениеТиУ.Записать(РежимЗаписиДокумента.Проведение);
								 Сообщить("Запись/проведение Поступления ТиУ: "+ОписаниеОшибки());
								 ОперацияОб.ПометкаУдаления = Истина;
			                     ОперацияОб.Записать(РежимЗаписиДокумента.ОтменаПроведения);
							КонецПопытки;
						 конецесли;
		иначе
			Сообщить("не удалось найти заказ из комментария");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецЕсли

Функция ПроверитьНаличиеПТиУ()
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ПоступлениеТоваровУслуг.Ссылка
	             |ИЗ
	             |	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	             |ГДЕ
	             |	ПоступлениеТоваровУслуг.Сделка = &Сделка
	             |	И ПоступлениеТоваровУслуг.Проведен = ИСТИНА";
	Запрос.УстановитьПараметр("Сделка",Ссылка);
	Рез=Запрос.Выполнить().Выбрать();
	Если Рез.Количество()>0 тогда
		Возврат Истина;
	Иначе
		Возврат ложь;
	КонецЕсли;
КонецФункции

Функция ПроверитьНаличиеОперацииОТХ(ЗаказПоОТХ)
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ОперацияПоОтветственномуХранению.Ссылка
	             |ИЗ
	             |	Документ.ОперацияПоОтветственномуХранению КАК ОперацияПоОтветственномуХранению
	             |ГДЕ
	             |	ОперацияПоОтветственномуХранению.ДокументОснование = &ДокументОснование
	             |	И ОперацияПоОтветственномуХранению.Проведен = ИСТИНА";
	Запрос.УстановитьПараметр("ДокументОснование",ЗаказПоОТХ);
	Рез=Запрос.Выполнить().Выбрать();
	Если Рез.Количество()>0 тогда
		Возврат Истина;
	Иначе
		Возврат ложь;
	КонецЕсли;
КонецФункции

Процедура ДвиженияПоРегиструПениШтрафыПоставщикам(ТабДвижений) Экспорт
	Если не ЗначениеЗаполнено(ДоговорКонтрагента.Поставщик) тогда
	поставщик = Контрагент;
	иначе
	поставщик = ДоговорКонтрагента.Поставщик;
	конецесли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыДляНачисленияПениПоставщикам.Контрагент КАК Контрагент,
	|	ПараметрыДляНачисленияПениПоставщикам.КоличествоВСезонномЗаказе КАК КоличествоВСезонномЗаказе,
	|	ПараметрыДляНачисленияПениПоставщикам.ПроцентНедогруза,
	|	ПараметрыДляНачисленияПениПоставщикам.ПроцентПерегруза,
	|	ПараметрыДляНачисленияПениПоставщикам.ДеньНачисленияПени,
	|	ПараметрыДляНачисленияПениПоставщикам.ДеньШтрафа,
	|	ПараметрыДляНачисленияПениПоставщикам.РазмерПени,
	|	ПараметрыДляНачисленияПениПоставщикам.РазмерШтрафа,
	|	ПараметрыДляНачисленияПениПоставщикам.РазмерШтрафаПерегруз
	|ИЗ
	|	РегистрСведений.ПараметрыДляНачисленияПениПоставщикам КАК ПараметрыДляНачисленияПениПоставщикам
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент,
	|	КоличествоВСезонномЗаказе";
	
	
	ПараметрыНачисленияПеней = Запрос.Выполнить().Выгрузить();
	
	НужныеПараметры  =Параметрыначисленияпеней.НайтиСтроки(Новый Структура("Контрагент",поставщик));
	Если НужныеПараметры.Количество()=0 Тогда //Если персональных нет, тогда по общим
		НужныеПараметры  =Параметрыначисленияпеней.НайтиСтроки(Новый Структура("Контрагент",Справочники.Контрагенты.ПустаяСсылка()));
	конецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабДвижений.ЗаказпоставщикуСезонный,
	|	ТабДвижений.Номенклатура,
	|	ТабДвижений.Количество
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТабДвижений КАК ТабДвижений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыПоставщикамСезонныеОстаткиИОбороты.ЗаказПоставщикуСезонный,
	|	ЗаказыПоставщикамСезонныеОстаткиИОбороты.Номенклатура,
	|	ЕСТЬNULL(ЗаказыПоставщикамСезонныеОстаткиИОбороты.КоличествоКонечныйОстаток, 0) КАК КоличествоОстаток,
	|	ЗаказыПоставщикамСезонныеОстаткиИОбороты.КоличествоПриход,
	|	ЕСТЬNULL(ЗаказПоставщикуСезонныйТовары.Цена,0) как Цена
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикамСезонные.ОстаткиИОбороты(
	|			,
	|			&Дата,
	|			,
	|			,
	|			(ЗаказПоставщикуСезонный, Номенклатура) В
	|				(ВЫБРАТЬ
	|					ВТ.ЗаказпоставщикуСезонный,
	|					ВТ.Номенклатура
	|				ИЗ
	|					ВТ КАК ВТ)
	|           И ЕСТЬNULL(ВЭД, ЛОЖЬ) = &ВЭД) КАК ЗаказыПоставщикамСезонныеОстаткиИОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщикуСезонный.Товары КАК ЗаказПоставщикуСезонныйТовары
	|		ПО ЗаказыПоставщикамСезонныеОстаткиИОбороты.ЗаказПоставщикуСезонный = ЗаказПоставщикуСезонныйТовары.Ссылка
	|			И ЗаказыПоставщикамСезонныеОстаткиИОбороты.Номенклатура = ЗаказПоставщикуСезонныйТовары.Номенклатура";
	
	Запрос.УстановитьПараметр("ТабДвижений", ТабДвижений);
	Запрос.УстановитьПараметр("ВЭД", Подразделение.ВЭД);
	//Запрос.УстановитьПараметр("Дата", Дата);  //***замена на границу, чтоб корректно формировались движения при вызове этой процедуры для очистки устаревших записей регистра пени/штрафы из формы констант
	ГраницаБезДок = Новый Граница(МоментВремени(), ВидГраницы.Исключая);
	Запрос.УстановитьПараметр("Дата", ГраницаБезДок);
	ОстаткиПоЗаказам = Запрос.Выполнить().Выгрузить();
	
	ТабДвиженийКопия = ТабДвижений.Скопировать();
	ТабДвиженийКопия.Свернуть("ДоговорКонтрагента,ЗаказПоставщикуСезонный,Номенклатура","Количество");
	
	Для каждого стр из ТабДвиженийКопия Цикл
		Если (стр.ЗаказПоставщикуСезонный.НеРассчитыватьПени  или стр.ЗаказПоставщикуСезонный.Дата < Константы.ДатаНачалаРасчетаШтрафовПоСезоннымЗаказамПоставщикам.Получить()) и не стр.ЗаказПоставщикуСезонный.Пустая()  Тогда
			продолжить;
		ИначеЕсли стр.ЗаказПоставщикуСезонный.Пустая() тогда 
			Если Дата < Константы.ДатаНачалаРасчетаШтрафовПоПерегрузамСезонныхЗаказовПоставщикам.Получить() Тогда
				Продолжить;
			КонецЕсли;
			//это точно перегруз начислим по 1 строке из нужных параметров. Для рассчета штрафа используем цену ФОБ.
			если Организация = Справочники.Организации.НайтиПоКоду("00001") тогда
				ЦеныФоб = РегистрыСведений.ЦеныФОП.ПолучитьПоследнее(Дата,Новый Структура("Номенклатура",стр.номенклатура));
				ЦенаФОБ = ЦеныФоб.цена;
			иначе
				ЦеныФоб = РегистрыСведений.ЦеныФопЭкспорт.ПолучитьПоследнее(Дата,Новый Структура("Номенклатура",стр.номенклатура));
				ЦенаФОБ = ЦеныФоб.цена;
			конецесли;
			РазмерШтрафаЗаПерегруз = НужныеПараметры[0].РазмерШтрафаПерегруз;
			Перегруз = -стр.Количество;
			Движение = Движения.ПениИШтрафыПоставщикам.Добавить();
			Движение.Регистратор = ссылка; // этот документ!
			Движение.Период = Дата; // дата регистрации в регистре накопления = дате документа!
			Движение.ЗаказПоставщику = ссылка;
			//Движение.ЗаказПоставщикуСезонный = стр.ЗаказпоставщикуСезонный;
			//	Движение.КоличествоДней = (НачалоДня(Дата)- стр.ЗаказпоставщикуСезонный.ДатаДействияПо)/(24*60*60);
			Движение.Контрагент = поставщик;
			Движение.Количество = Перегруз; 
			Движение.Номенклатура = стр.Номенклатура;
			Движение.Штраф = -Перегруз*РазмерШтрафаЗаПерегруз*ЦенаФОБ/100;				
		иначе	
			Отбор = Новый Структура();
			Отбор.Вставить("ЗаказПоставщикуСезонный",стр.ЗаказПоставщикуСезонный);
			Отбор.Вставить("номенклатура",стр.Номенклатура);
			ОСтаткиНом =ОстаткиПоЗаказам.НайтиСтроки(Отбор); 
			Если ОстаткиНом.Количество()>0 тогда
				УжеВыполненоПоСезонному= ОстаткиНом[0];
			иначе
				продолжить;
			конецЕсли;
			
			РазрешенныйНедогруз =0;
			ПениЗаНедогруз = 0;
			РазрешенныйПерегруз =0;
			ДеньНачисленияПени =0;
			ДеньШтрафа=0;
			РазмерШтрафаЗаПерегруз =0;
			Для каждого стрН из НужныеПараметры Цикл
				Если УжеВыполненоПоСезонному.КоличествоПриход> стрН.КоличествоВСезонномЗаказе Тогда
					РазрешенныйНедогруз = Окр(УжеВыполненоПоСезонному.КоличествоПриход*стрН.ПроцентНедогруза/100,0);
					ПениЗаНедогруз = стрН.РазмерПени;
					РазрешенныйПерегруз = Окр(УжеВыполненоПоСезонному.КоличествоПриход*стрН.ПроцентПерегруза/100,0);
					РазрешенныйПерегруз = РазрешенныйПерегруз+(4-Разрешенныйперегруз%4);
					ДеньНачисленияПени =стрН.ПроцентНедогруза;
					ДеньШтрафа= стрН.ДеньШтрафа;
					РазмерШтрафаЗаПерегруз = стрН.РазмерШтрафаПерегруз;
				иначе
					прервать; 
				конецЕсли;
			конецЦикла;
			
			
			
			Если УжеВыполненоПоСезонному.КоличествоОстаток<0 тогда    //Это точно перегруз
				Если РазрешенныйПерегруз< -УжеВыполненоПоСезонному.КоличествоОстаток  Тогда //за предыдущий перегруз уже начислили штраф, начисляем только за текущий
					Перегруз = -стр.Количество;
				иначеЕсли РазрешенныйПерегруз< (стр.количество-УжеВыполненоПоСезонному.КоличествоОстаток)  Тогда	//проверим с учетом предыдущих перегрузов
					перегруз = -(стр.количество-УжеВыполненоПоСезонному.КоличествоОстаток-Окр(РазрешенныйПерегруз,0)); 
				иначе продолжить;
				конецЕсли;
				Если не стр.ЗаказпоставщикуСезонный.неСчитатьПерегруз Тогда
					Движение = Движения.ПениИШтрафыПоставщикам.Добавить();
					Движение.Регистратор = ссылка; // этот документ!
					Движение.Период = Дата; // дата регистрации в регистре накопления = дате документа!
					Движение.ЗаказПоставщику = ссылка;
					Движение.ЗаказПоставщикуСезонный = стр.ЗаказпоставщикуСезонный;
					//	Движение.КоличествоДней = (НачалоДня(Дата)- стр.ЗаказпоставщикуСезонный.ДатаДействияПо)/(24*60*60);
					Движение.Контрагент = поставщик;
					Движение.Количество = Перегруз; 
					Движение.Номенклатура = стр.Номенклатура;
					Движение.Штраф = -Перегруз*РазмерШтрафаЗаПерегруз*УжеВыполненоПоСезонному.Цена/100;
				конецЕсли;
				
				
			иначеЕсли НачалоДня(Дата) > стр.заказПоставщикуСезонный.ДатаДействияПо+ДеньНачисленияПени*24*60*60 и НачалоДня(Дата) < стр.заказПоставщикуСезонный.ДатаДействияПо+ДеньШтрафа*24*60*60	и стр.количество<=УжеВыполненоПоСезонному.КоличествоОстаток и РазрешенныйНедогруз< УжеВыполненоПоСезонному.КоличествоОстаток тогда
				Движение = Движения.ПениИШтрафыПоставщикам.Добавить();
				Движение.Регистратор = ссылка; // этот документ!
				Движение.Период = Дата; // дата регистрации в регистре накопления = дате документа!
				Движение.ЗаказПоставщику = ссылка;
				Движение.ЗаказПоставщикуСезонный = стр.ЗаказпоставщикуСезонный;
				Движение.КоличествоДней = (НачалоДня(Дата)- стр.ЗаказпоставщикуСезонный.ДатаДействияПо)/(24*60*60);
				Движение.Контрагент = поставщик;
				Движение.Количество = стр.Количество; 
				Движение.Номенклатура = стр.Номенклатура;
				Движение.Пени = (НачалоДня(Дата)- стр.ЗаказпоставщикуСезонный.ДатаДействияПо)/(24*60*60)*ПениЗаНедогруз*УжеВыполненоПоСезонному.Цена/100;
				
				
			иначеЕсли стр.количество>УжеВыполненоПоСезонному.КоличествоОстаток тогда
				Если РазрешенныйПерегруз<стр.количество-УжеВыполненоПоСезонному.КоличествоОстаток  Тогда //сейчас может перевалить за разрешенный перегруз
					перегруз = -(стр.количество-УжеВыполненоПоСезонному.КоличествоОстаток-Окр(РазрешенныйПерегруз,0)); 
				иначе продолжить;
				конецЕсли;
				Если не стр.ЗаказпоставщикуСезонный.неСчитатьПерегруз Тогда
					Движение = Движения.ПениИШтрафыПоставщикам.Добавить();
					Движение.Регистратор = ссылка; // этот документ!
					Движение.Период = Дата; // дата регистрации в регистре накопления = дате документа!
					Движение.ЗаказПоставщику = ссылка;
					Движение.ЗаказПоставщикуСезонный = стр.ЗаказпоставщикуСезонный;
					//Движение.КоличествоДней = (НачалоДня(Дата)- стр.ЗаказпоставщикуСезонный.ДатаДействияПо)/(24*60*60);
					Движение.Контрагент = поставщик;
					Движение.Количество = Перегруз; 
					Движение.Номенклатура = стр.Номенклатура;
					Движение.Штраф = -Перегруз*РазмерШтрафаЗаПерегруз*УжеВыполненоПоСезонному.Цена/100;
				конецЕсли;
			конецЕсли;
		конецЕсли;	
		
	конецЦикла;
	
КонецПроцедуры


мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
