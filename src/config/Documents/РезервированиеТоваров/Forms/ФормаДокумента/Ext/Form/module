// Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мТекущаяДатаДокумента;

Перем мКолонкиТовары, мКолонкиВозвратнаяТара;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Если ТабличнаяЧасть = Товары Тогда

		Команда           = "ПодборВТабличнуюЧастьТовары";
		ИмяТабличнойЧасти = "Товары";

	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
		
		Если ЗаказПокупателя.Пустая() Тогда
			Предупреждение("Не выбран заказ поставщику!");
			Возврат;
		КонецЕсли;

		Команда           = "ПодборВТабличнуюЧастьВозвратнаяТара";
		ИмяТабличнойЧасти = "Тара";

	КонецЕсли;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                , Неопределено);
	СтруктураПараметровПодбора.Вставить("Заказ"                , ЗаказПокупателя);
	СтруктураПараметровПодбора.Вставить("Организация"          , Неопределено);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , Ложь);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"            , Ложь);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
										ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);

	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("КоличествоМест"  , КоличествоМест);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"           , Серия);
	
	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	Если ТабличнаяЧасть = Товары Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	Иначе
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;

	СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		Иначе

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

		КонецЕсли;

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;

		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;

			// Рассчитать реквизиты табличной части.
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		Иначе

			СтрокаТабличнойЧасти.Количество       = Количество;

		КонецЕсли;
	КонецЕсли; // СтрокаТабличнойЧасти <> Неопределено

	Если ТабличнаяЧасть = Товары Тогда
		ТабличнаяЧастьИмя = "Товары";
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
		ТабличнаяЧастьИмя = "ВозвратнаяТара";
	КонецЕсли;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Заполняет переданную табличную часть по остаткам
//
// Параметры:
//  ТабличнаяЧасть - табличная часть документа.
//
Процедура ЗаполнитьТабличнуюЧастьПоОстаткам(ТабличнаяЧасть)


	ЗаполнятьТабличнуюЧасть = Ложь;
	Если ЗначениеНеЗаполнено(ЗаказПокупателя) Тогда
		ТекстПредупреждения = "Не выбран заказ покупателя. Заполнение невозможно.";
	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, , Метаданные().Представление());
		Возврат;
	КонецЕсли;

	Если ТабличнаяЧасть.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;

		ТабличнаяЧасть.Очистить();

	КонецЕсли;

	Если ТабличнаяЧасть = Товары Тогда

		Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
			ТабОстатки = ОстаткиТоваровПоВнутреннемуЗаказу(ЗаказПокупателя, Дата);
			ЗаполнитьТабЧастьТоварыПоВнутреннемуЗаказу(ЭтотОбъект, Товары, ТабОстатки);
			
			//Для Каждого СтрокаТЧ Из Товары Цикл
			//	СтрокаТЧ.ДокументРезерва = Основание;
			//КонецЦикла;
		Иначе
			ЗаполнитьТоварыПоОстаткамУпр();
		КонецЕсли;

	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

		Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
			ТабОстатки = ОстаткиТоваровПоВнутреннемуЗаказу(ЗаказПокупателя, Дата, Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
			ЗаполнитьТабЧастьТараПоВнутреннемуЗаказу(ЭтотОбъект, ВозвратнаяТара, ТабОстатки);
		Иначе
			ЗаполнитьВозвратнуюТаруПоОстаткамУпр();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоОстаткам()

// Размешает в табличной части "Товары" комплекты в качестве комплектующих
//
// Параметры:
//  Нет
//
Процедура РазместитьКомплектыКакКомплектующие()

	ЗаполнятьТабличнуюЧасть = Ложь;
	Если ЗначениеНеЗаполнено(ЗаказПокупателя) Тогда
		ТекстПредупреждения = "Не выбран заказ покупателя. Заполнение невозможно.";
	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, 60, Метаданные().Представление());
		Возврат;
	КонецЕсли;

	Если Товары.Количество() > 0 Тогда

		ТекстВопроса = "Перед размещением комплектующих табличная часть товаров будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;

		Товары.Очистить();

	КонецЕсли;

	// Вызовем диалог размещения
	ФормаРаспределения = ПолучитьФорму("ФормаРаспределения", ЭтаФорма);
	ТаблицаНераспределенныхКомплектов = ФормаРаспределения.ТаблицаНераспределенныхКомплектов;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	Запрос.УстановитьПараметр("ТоварТара", Перечисления.ТоварТара.Товар);
	Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ЗаказПокупателя.ДоговорКонтрагента);
		ТекстУслПоДоговору = " ДоговорКонтрагента = &ДоговорКонтрагента И ";
	Иначе
		ТекстУслПоДоговору = "";
	КонецЕсли;

	Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВнутренниеЗаказыОстатки.Номенклатура               КАК Номенклатура,
		|	ВнутренниеЗаказыОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ВнутренниеЗаказыОстатки.КоличествоОстаток
		|	 - ВЫБОР КОГДА ТоварыВРезервеОстатки.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТоварыВРезервеОстатки.КоличествоОстаток КОНЕЦ
		|	 - ВЫБОР КОГДА РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток КОНЕЦ КАК Количество
		|ИЗ
		|	РегистрНакопления.ВнутренниеЗаказы.Остатки КАК ВнутренниеЗаказыОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, ДокументРезерва = &ЗаказПокупателя) КАК ТоварыВРезервеОстатки
		|		ПО ВнутренниеЗаказыОстатки.Номенклатура = ТоварыВРезервеОстатки.Номенклатура И ВнутренниеЗаказыОстатки.ХарактеристикаНоменклатуры = ТоварыВРезервеОстатки.ХарактеристикаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(, ЗаказПокупателя = &ЗаказПокупателя И ТоварТара = &ТоварТара) КАК РазмещениеЗаказовПокупателейОстатки
		|		ПО ВнутренниеЗаказыОстатки.Номенклатура = РазмещениеЗаказовПокупателейОстатки.Номенклатура И ВнутренниеЗаказыОстатки.ХарактеристикаНоменклатуры = РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры
		|		СОЕДИНЕНИЕ РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
		|		ПО ВнутренниеЗаказыОстатки.Номенклатура = КомплектующиеНоменклатуры.Номенклатура И ВнутренниеЗаказыОстатки.ХарактеристикаНоменклатуры = КомплектующиеНоменклатуры.ХарактеристикаНоменклатуры
		|ГДЕ
		|	ВнутренниеЗаказыОстатки.ВнутреннийЗаказ = &ЗаказПокупателя
		|ИТОГИ МАКСИМУМ (Количество) ПО Номенклатура, ХарактеристикаНоменклатуры
		|";
	Иначе
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЗаказыПокупателейОстатки.Номенклатура               КАК Номенклатура,
		|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЗаказыПокупателейОстатки.КоличествоОстаток
		|	 - ВЫБОР КОГДА ТоварыВРезервеОстатки.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТоварыВРезервеОстатки.КоличествоОстаток КОНЕЦ
		|	 - ВЫБОР КОГДА РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток КОНЕЦ КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(, " + ТекстУслПоДоговору + " ЗаказПокупателя = &ЗаказПокупателя) КАК ЗаказыПокупателейОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, ДокументРезерва = &ЗаказПокупателя) КАК ТоварыВРезервеОстатки
		|		ПО ЗаказыПокупателейОстатки.Номенклатура = ТоварыВРезервеОстатки.Номенклатура И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ТоварыВРезервеОстатки.ХарактеристикаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(, ЗаказПокупателя = &ЗаказПокупателя И ТоварТара = &ТоварТара) КАК РазмещениеЗаказовПокупателейОстатки
		|		ПО ЗаказыПокупателейОстатки.Номенклатура = РазмещениеЗаказовПокупателейОстатки.Номенклатура И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры
		|		СОЕДИНЕНИЕ РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
		|		ПО ЗаказыПокупателейОстатки.Номенклатура = КомплектующиеНоменклатуры.Номенклатура И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = КомплектующиеНоменклатуры.ХарактеристикаНоменклатуры
		|ГДЕ
		|	ЗаказыПокупателейОстатки.ЗаказПокупателя = &ЗаказПокупателя
		|ИТОГИ МАКСИМУМ (Количество) ПО Номенклатура, ХарактеристикаНоменклатуры
		|";
	КонецЕсли;

	ВыборкаПоНоменклатуре = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоНоменклатуре.Следующий() Цикл
		ВыборкаПоХарактеристикам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоХарактеристикам.Следующий() Цикл
			Если ВыборкаПоХарактеристикам.Количество > 0 Тогда
				СтрокаТаблицы = ТаблицаНераспределенныхКомплектов.Добавить();
				СтрокаТаблицы.Номенклатура               = ВыборкаПоХарактеристикам.Номенклатура;
				СтрокаТаблицы.ХарактеристикаНоменклатуры = ВыборкаПоХарактеристикам.ХарактеристикаНоменклатуры;
				СтрокаТаблицы.НеРазмещено                = ВыборкаПоХарактеристикам.Количество;
				СтрокаТаблицы.Размещаем                  = ВыборкаПоХарактеристикам.Количество;
			КонецЕсли;
		КОнецЦикла;
	КОнецЦикла;

	Если ТаблицаНераспределенныхКомплектов.Количество()=0 Тогда
		Предупреждение("Неразмещенные комплекты отсутствуют!");
		Возврат;
	КонецЕсли;

	ФормаРаспределения.Открыть();

КонецПроцедуры // РазместитьКомплектыКакКомплектующие()

// Процедура обрабатывает выбор размещения в табличной части.
//
// Параметры:
//  Элемент      - Элемент формы, из которого был вызван выбор.
//  СтандартнаяОбработка - Признак стандартной обработки события
//
Процедура ВыборРазмещения(Элемент, СтандартнаяОбработка)

	Если ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров.ПоСкладамИЗаказам Тогда

		СтандартнаяОбработка = Ложь;

		СписокТипов = Новый СписокЗначений;
		СписокТипов.Добавить(Справочники.Склады, Метаданные.Справочники.Склады.Синоним);
		СписокТипов.Добавить(Документы.ЗаказПоставщику, Метаданные.Документы.ЗаказПоставщику.Синоним);

		ВыбранныйЭлемент = ВыбратьИзСписка(СписокТипов, Элемент);

		Если ВыбранныйЭлемент = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Если ВыбранныйЭлемент.Значение = Справочники.Склады Тогда
			//НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.НеРавно, СтандартнаяОбработка);
			НачалоВыбораСкладаНТТ(
				ЭтотОбъект, ЭтаФорма, Элемент, Элемент.Значение, ВидСравнения.НеРавно, СтандартнаяОбработка);
		Иначе
			// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
			// значение было присвоено стандартно.
			ФормаВыбора = ВыбранныйЭлемент.Значение.ПолучитьФормуВыбора(,Элемент,);

			ФормаВыбора.РежимВыбора = Истина;
			ФормаВыбора.Открыть();
		КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров.ПоСкладам Тогда

		НачалоВыбораСкладаНТТ(
				ЭтотОбъект, ЭтаФорма, Элемент, Элемент.Значение, ВидСравнения.НеРавно, СтандартнаяОбработка);

	КонецЕсли;

КонецПроцедуры // ВыборРазмещения()

// Процедура обрабатывает очистку размещения в табличной части.
//
// Параметры:
//  Элемент      - Элемент формы, из которого была вызвана очистка.
//  СтандартнаяОбработка - Признак стандартной обработки события
//
Процедура ОчисткаРазмещения(ИмяТЧ, ИмяКолонки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров.ПоСкладам Тогда

		ЭлементыФормы[ИмяТЧ].ТекущиеДанные[ИмяКолонки] = Справочники.Склады.ПустаяСсылка();

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров.ПоЗаказам Тогда

		ЭлементыФормы[ИмяТЧ].ТекущиеДанные[ИмяКолонки] = Документы.ЗаказПоставщику.ПустаяСсылка();

	Иначе

		ЭлементыФормы[ИмяТЧ].ТекущиеДанные[ИмяКолонки] = Неопределено;

	КонецЕсли;

КонецПроцедуры // ВыборРазмещения()

// Процедура обрабатывает очистку размещения в табличной части.
//
// Параметры:
//  СтрокаТЧ     - Строка табличной части, в которой нужно очистить размещение.
//  ПустоеЗначениеРазмещения - Пустое значение, которое необходимо присвоить 
//                 "неправильным" размещениям.
//
Процедура ОчисткаРазмещенияПриСменеВидаОперации(СтрокаТЧ, ПустоеЗначениеРазмещения)

	Если Не ТипЗнч(СтрокаТЧ.ИсходноеРазмещение) = ТипЗнч(ПустоеЗначениеРазмещения) Тогда
		СтрокаТЧ.ИсходноеРазмещение = ПустоеЗначениеРазмещения;
	КонецЕсли; 

	Если Не ТипЗнч(СтрокаТЧ.НовоеРазмещение) = ТипЗнч(ПустоеЗначениеРазмещения) Тогда
		СтрокаТЧ.НовоеРазмещение = ПустоеЗначениеРазмещения;
	КонецЕсли; 

КонецПроцедуры // ОчисткаРазмещенияПриСменеВидаОперации()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость(ИзменятьЗначения = Истина)

	Колонки     = ЭлементыФормы.Товары.Колонки;
	КолонкиТары = ЭлементыФормы.ВозвратнаяТара.Колонки;

	Если ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров.ПоЗаказам Тогда
		
		ЭлементыФормы.АвтоРазмещение    .Доступность = Истина;
		ЭлементыФормы.АвтоРезервирование.Доступность = Ложь;
		Если АвтоРезервирование Тогда
			АвтоРезервирование = Ложь;
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров.ПоСкладам Тогда
		
		ЭлементыФормы.АвтоРазмещение    .Доступность = Ложь;
		ЭлементыФормы.АвтоРезервирование.Доступность = Истина;
		Если АвтоРазмещение Тогда
			АвтоРазмещение = Ложь;
		КонецЕсли;
		
	Иначе
		
		ЭлементыФормы.АвтоРазмещение    .Доступность = Истина;
		ЭлементыФормы.АвтоРезервирование.Доступность = Истина;
		
	КонецЕсли;

	УстановитьДоступностьКнопкиЗаполнитьИПровести();

КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает доступность кнопки "Заполнить и провести". Кнопка доступна,
// если документ - внешний заказ, его дата совпадает с текущей и установлен хотя бы один
// из флагов Авторазмещение или Авторезервирование.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьКнопкиЗаполнитьИПровести()

	ЭлементыФормы.ДействияФормы.Кнопки.ДействиеЗаполнитьИПровести.Доступность = 
	((НачалоДня(Дата) = НачалоДня(ТекущаяДата())) И (Авторазмещение ИЛИ Авторезервирование));

КонецПроцедуры // УстановитьДоступностьКнопкиЗаполнитьИПровести

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь);
		УстановитьНомерДокумента(ЭтотОбъект);

	КонецЕсли;

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("ИсходноеРазмещение");
	СтруктураКолонок.Вставить("НовоеРазмещение");
	СтруктураКолонок.Вставить("ЕдиницаХранения");

	// Установить ограничение - изменять видимоть колонок для таличной части "Возвратная тара".
	УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ВозвратнаяТара.Колонки, СтруктураКолонок);

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("ЕдиницаИзмерения");

	// Установить ограничение - изменять видимоть колонок для таличной части "Товары".
	УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Товары.Колонки, СтруктураКолонок);

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;

	// Установить видимость колонок "ХарактеристикаНоменклатуры"
	УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость(Ложь);

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);
		
		Если ЗначениеВыбора.Команда = "РазмещениеКомплектующих" Тогда
			Для Каждого ВыгружаемаяСтрока Из ЗначениеВыбора.Товары Цикл
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Номенклатура               = ВыгружаемаяСтрока.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры = ВыгружаемаяСтрока.ХарактеристикаНоменклатуры;
				НоваяСтрока.ЕдиницаИзмерения           = ВыгружаемаяСтрока.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент                = ВыгружаемаяСтрока.Коэффициент;
				НоваяСтрока.Количество                 = ВыгружаемаяСтрока.Количество;

				// Рассчитать реквизиты табличной части.
				РассчитатьКоличествоТабЧасти(НоваяСтрока, ЭтотОбъект);

			КонецЦикла;
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);

		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
			ОбработкаПодбора(ВозвратнаяТара, ЗначениеВыбора);
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Подсчитаем количество строк в табличных частях.
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если СтраницаПанели.Имя = "Тара" Тогда
			СтраницаПанели.Заголовок = "Тара (" + ДокументОбъект.ВозвратнаяТара.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "Товары" Тогда
			СтраницаПанели.Заголовок = "Товары (" + ДокументОбъект.Товары.Количество() + " поз.)";
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ПриЗаписи" формы.
//
Процедура ПередЗаписью(Отказ)

	Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") И НЕ ЗаказПокупателя.Пустая() Тогда
		Контрагент = ЗаказПокупателя.Контрагент;
	КонецЕсли; 
	
	яштСменаПользователя(ЭтотОбъект, ЭтаФорма, глТекущийПользователь);
	
КонецПроцедуры

// Обработчик внешнего события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	Если глТорговоеОборудование <> Неопределено Тогда
		Если Событие = "BarCodeValue" Тогда

			ИмяТекущейСтраницы = ЭтаФорма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
			Если ИмяТекущейСтраницы = "Товары" Тогда

				Команда         = "ПодборВТабличнуюЧастьТовары";
				ИмяТабличнойЧасти = "Товары";

			ИначеЕсли ИмяТекущейСтраницы = "Тара" Тогда

				Команда           = "ПодборВТабличнуюЧастьВозвратнаяТара";
				ИмяТабличнойЧасти = "ВозвратнаяТара";

			Иначе

				// Ничего не надо делать
				Возврат;

			КонецЕсли;

			ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);

			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("Команда"              , Команда);
			СтруктураПараметров.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
			СтруктураПараметров.Вставить("ИмяТабличнойЧасти"    , ИмяТабличнойЧасти);

			глТорговоеОборудование.ОбработатьВнешнееСобытиеОтСканераДляФормы(ЭтаФорма, ЭтотОбъект, СтруктураПараметров, Данные);

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Возвратная тара", вызывает сервисный механизм для заполнения табличной части
//
// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции

		// Определим выбранный вид операции и присвоим нужное значение пустому
		// значению размещения. Потом будем использовать присвоенное значение
		// как признак необходимости очистики ТЧ.
		Если Кнопка.Имя = "РаспределениеПоСкладам" Тогда
			ПустоеЗначениеРазмещения = Справочники.Склады.ПустаяСсылка();
		ИначеЕсли Кнопка.Имя = "РаспределениеПоЗаказам" Тогда
			ПустоеЗначениеРазмещения = Документы.ЗаказПоставщику.ПустаяСсылка();
		Иначе
			ПустоеЗначениеРазмещения = Неопределено;
		КонецЕсли;

		// Выбран вид операции, при котором возможно надо очищать ТЧ
		Если Не ПустоеЗначениеРазмещения = Неопределено Тогда

			// Есть строки ТЧ, значит будем очищать
			Если Не Товары.Количество() = 0 или Не ВозвратнаяТара.Количество() = 0 Тогда

				// Предупредим об очистке и спросим согласия.
				Если Кнопка.Имя = "РаспределениеПоСкладам" Тогда
					Ответ = Вопрос("Данные о размещении в заказах поставщикам будут очищены.", РежимДиалогаВопрос.ОКОтмена);
				ИначеЕсли Кнопка.Имя = "РаспределениеПоЗаказам" Тогда
					Ответ = Вопрос("Данные о размещении на складах будут очищены.", РежимДиалогаВопрос.ОКОтмена);
				КонецЕсли;

				// Если согласие не дано отказываемся от выбора вида операции.
				Если Не Ответ = КодВозвратаДиалога.ОК Тогда
					Возврат;
				КонецЕсли;

				// В противном случае очищаем "неправильные" размещения в обоих табличных частях.
				Для каждого СтрокаТабличнойЧасти Из Товары Цикл
					ОчисткаРазмещенияПриСменеВидаОперации(СтрокаТабличнойЧасти, ПустоеЗначениеРазмещения);
				КонецЦикла;

				Для каждого СтрокаТары Из ВозвратнаяТара Цикл
					ОчисткаРазмещенияПриСменеВидаОперации(СтрокаТары, ПустоеЗначениеРазмещения);
				КонецЦикла;

			КонецЕсли;

		КонецЕсли; 

		ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров[Кнопка.Имя];

	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров.ПоЗаказам Тогда
		ТипРазмещ = Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику");
		Для Каждого СтрокаТЧ Из Товары Цикл
			СтрокаТЧ.ИсходноеРазмещение = ТипРазмещ.ПривестиЗначение(СтрокаТЧ.ИсходноеРазмещение);
			СтрокаТЧ.НовоеРазмещение    = ТипРазмещ.ПривестиЗначение(СтрокаТЧ.НовоеРазмещение);
		КонецЦикла;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров.ПоСкладам Тогда
		ТипРазмещ = Новый ОписаниеТипов("СправочникСсылка.Склады");
		Для Каждого СтрокаТЧ Из Товары Цикл
			СтрокаТЧ.ИсходноеРазмещение = ТипРазмещ.ПривестиЗначение(СтрокаТЧ.ИсходноеРазмещение);
			СтрокаТЧ.НовоеРазмещение    = ТипРазмещ.ПривестиЗначение(СтрокаТЧ.НовоеРазмещение);
		КонецЦикла;
	КонецЕсли;

	// Отобразить в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при нажатии кнопки "Заполнить и провести" командной панели формы,
// вызывает заполнение документа с проведением.
//
Процедура ДействияФормыДействиеЗаполнитьИПровести(Кнопка)

	Если Авторазмещение ИЛИ Авторезервирование Тогда

		// Заполнять с проведением можно документы с текущую датой
		Если НачалоДня(Дата) = НачалоДня(ТекущаяДата()) Тогда
			Если НЕ ЭтоНовый() Тогда
				// Если документ ранее был записан, то он будет переноситься в конец дня из-за оперативного проведения, о чем следует предупредить.
				Ответ = Вопрос("В режиме заполнения с проведением документ будет проводиться оперативно. " + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
				Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
					Возврат;
				КонецЕсли; 
			КонецЕсли; 
		Иначе
			Возврат;
		КонецЕсли; 

		// Обработка выполняется в транзакции. Она будет отменена, если заполнить не удалось
		НачатьТранзакцию();
		Отказ = Ложь;

		// Очистим записи документа по размещению, если он был ранее проведен
		Если Проведен Тогда
			НаборОстаткиТоваров = РегистрыНакопления.ТоварыВРезервеНаСкладах.СоздатьНаборЗаписей();
			НаборОстаткиТоваров.Отбор.Регистратор.Установить(Ссылка);
			НаборОстаткиТоваров.Прочитать();
			НаборОстаткиТоваров.Очистить();
			НаборОстаткиТоваров.Записать();
			НаборЗаказыПоставщикам  = РегистрыНакопления.РазмещениеЗаказовПокупателей.СоздатьНаборЗаписей();
			НаборЗаказыПоставщикам.Отбор.Регистратор.Установить(Ссылка);
			НаборЗаказыПоставщикам.Прочитать();
			НаборЗаказыПоставщикам.Очистить();
			НаборЗаказыПоставщикам.Записать();
		КонецЕсли;

		// Заполнение документа
		ЗаполнитьТабличныеЧастиПередПроведением(Отказ);

		// Если заполнить удалось, то запись документа с проведением

		НеПроведен = Ложь;
		Если НЕ Отказ Тогда
			Попытка
				Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
			Исключение
				НеПроведен = Истина;
			КонецПопытки;
		КонецЕсли;

		Если Отказ ИЛИ НеПроведен Тогда
			ОтменитьТранзакцию();
			Если НеПроведен Тогда
				Предупреждение("Операция не выполнена!");
			КонецЕсли;
			
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли; 

	Иначе
		Предупреждение("Для режима заполнения с проведением требуется установка флагов ""Авторазмещение"" или ""Авторезервирование""");
	КонецЕсли; 

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при выборе пункта меню "Заполнить по остаткам" подменю 
// "Заполнить" командной панели Товары.
//
Процедура КоманднаяПанельТоварыЗаполнитьПоОстаткам(Кнопка)

	Если Не ЗначениеНеЗаполнено(ЗаказПокупателя) Тогда
		ЗаполнитьТабличнуюЧастьПоОстаткам(Товары);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельТоварыЗаполнитьПоОстаткам()

// Процедура вызывается при выборе пункта меню "Распределить по комплектующим" подменю 
// "Заполнить" командной панели Товары.
//
Процедура КоманднаяПанельТоварыРазместитьПоКомплектующим(Кнопка)

	РазместитьКомплектыКакКомплектующие();

КонецПроцедуры // КоманднаяПанельТоварыРазместитьПоКомплектующим()

// Процедура вызывается при выборе пункта меню "Заполнить по остаткам" подменю 
// "Заполнить" командной панели возвратной тары.
//
Процедура КоманднаяПанельВозвратнаяТараЗаполнитьПоОстаткам(Кнопка)
	ЗаполнитьТабличнуюЧастьПоОстаткам(ВозвратнаяТара);
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Возвратная тара", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеПодбор(Кнопка)

	ДействиеПодбор(ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеПодбор()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	УстановитьДоступностьКнопкиЗаполнитьИПровести();
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "При изменении" флажка Авторазмещение
//
Процедура АвтоРазмещениеПриИзменении(Элемент)

	УстановитьДоступностьКнопкиЗаполнитьИПровести();
	
КонецПроцедуры // АвтоРазмещениеПриИзменении()

// Процедура - обработчик события "При изменении" флажка Авторезервирование
//
Процедура АвтоРезервированиеПриИзменении(Элемент)

	УстановитьДоступностьКнопкиЗаполнитьИПровести();
	
КонецПроцедуры // АвтоРезервированиеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "ЗаказПокупателя".
//
Процедура ЗаказПокупателяПриИзменении(Элемент)

	Если ЗначениеНеЗаполнено(ЗаказПокупателя) Тогда
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	Иначе
		Если ЕстьРеквизитДокумента("Контрагент", ЗаказПокупателя.Метаданные()) тогда
			Контрагент = ЗаказПокупателя.Контрагент;
		Иначе
			Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;

		Если ЕстьРеквизитДокумента("Организация", ЗаказПокупателя.Метаданные()) тогда
			Организация = ЗаказПокупателя.Организация;
		КонецЕсли;
		Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			Если ЗаказПокупателя.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				УстановитьВидимость();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаказПокупателяПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "ЗаказПокупателя".
//
Процедура ЗаказПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктОтбора = Новый Структура();
	Если Не Организация.Пустая() Тогда
		Если Не Организация.Пустая() Тогда
			СтруктОтбора.Вставить("Организация", Организация);
		КонецЕсли;
	КонецЕсли;

	НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктОтбора, "");

КонецПроцедуры // ЗаказПокупателяНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьНомерДокумента(ЭтотОбъект);
	
	Если Не ЗначениеНеЗаполнено(ЗаказПокупателя) Тогда
		МетаДок = ЗаказПокупателя.Метаданные();
		Если ЕстьРеквизитДокумента("Организация", МетаДок)
		И Не Организация = ЗаказПокупателя.Организация Тогда
			ЗаказПокупателя = Неопределено;
			ЗаказПокупателяПриИзменении(ЭлементыФормы.ЗаказПокупателя);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОрганизацияПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриНачалеРедактирования"
// строки табличной части "Товары".
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров.ПоСкладам Тогда

		Если Не ТипЗнч(Элемент.ТекущиеДанные.ИсходноеРазмещение) = Тип("СправочникСсылка.Склады") Тогда
			Элемент.ТекущиеДанные.ИсходноеРазмещение = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;

		Если Не ТипЗнч(Элемент.ТекущиеДанные.НовоеРазмещение) = Тип("СправочникСсылка.Склады") Тогда
			Элемент.ТекущиеДанные.НовоеРазмещение = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров.ПоЗаказам Тогда

		Если Не ТипЗнч(Элемент.ТекущиеДанные.ИсходноеРазмещение) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			Элемент.ТекущиеДанные.ИсходноеРазмещение = Документы.ЗаказПоставщику.ПустаяСсылка();
		КонецЕсли;

		Если Не ТипЗнч(Элемент.ТекущиеДанные.НовоеРазмещение) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			Элемент.ТекущиеДанные.НовоеРазмещение = Документы.ЗаказПоставщику.ПустаяСсылка();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Берем из самого реквизита Номенклатура
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ИсходноеРазмещение"
// строки табличной части "Товары".
//
Процедура ТоварыИсходноеРазмещениеНачалоВыбора(Элемент, СтандартнаяОбработка)

	ВыборРазмещения(Элемент, СтандартнаяОбработка);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ИсходноеРазмещение"
// строки табличной части "Товары".
//
Процедура ТоварыИсходноеРазмещениеПриИзменении(Элемент)

КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода "ИсходноеРазмещение"
// строки табличной части "Товары".
//
Процедура ТоварыИсходноеРазмещениеОчистка(Элемент, СтандартнаяОбработка)

	ОчисткаРазмещения("Товары", "ИсходноеРазмещение", СтандартнаяОбработка);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "НовоеРазмещение"
// строки табличной части "Товары".
//
Процедура ТоварыНовоеРазмещениеНачалоВыбора(Элемент, СтандартнаяОбработка)

	ВыборРазмещения(Элемент, СтандартнаяОбработка);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "НовоеРазмещение"
// строки табличной части "Товары".
//
Процедура ТоварыНовоеРазмещениеПриИзменении(Элемент)

КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода "НовоеРазмещение"
// строки табличной части "Товары".
//
Процедура ТоварыНовоеРазмещениеОчистка(Элемент, СтандартнаяОбработка)

	ОчисткаРазмещения("Товары", "НовоеРазмещение", СтандартнаяОбработка);

КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" поля ввода "ИсходнаяЦена"
// строки табличной части "Товары".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	// Исходная цена в рознице
	Автоотметка = Ложь;
	Если НЕ ЗначениеНеЗаполнено(ДанныеСтроки.ИсходноеРазмещение) Тогда
	КонецЕсли;

	// Новая цена в рознице
	Автоотметка = Ложь;
	Если НЕ ЗначениеНеЗаполнено(ДанныеСтроки.НовоеРазмещение) Тогда
	КонецЕсли;

	ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	РассчитатьКоличествоТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении возвратной тары.
	ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараНоменклатураПриИзменении()

// Процедура - обработчик события "ПриНачалеРедактирования"
// строки табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров.ПоСкладам Тогда

		Если Не ТипЗнч(Элемент.ТекущиеДанные.ИсходноеРазмещение) = Тип("СправочникСсылка.Склады") Тогда
			Элемент.ТекущиеДанные.ИсходноеРазмещение = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;

		Если Не ТипЗнч(Элемент.ТекущиеДанные.НовоеРазмещение) = Тип("СправочникСсылка.Склады") Тогда
			Элемент.ТекущиеДанные.НовоеРазмещение = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров.ПоЗаказам Тогда

		Если Не ТипЗнч(Элемент.ТекущиеДанные.ИсходноеРазмещение) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			Элемент.ТекущиеДанные.ИсходноеРазмещение = Документы.ЗаказПоставщику.ПустаяСсылка();
		КонецЕсли;

		Если Не ТипЗнч(Элемент.ТекущиеДанные.НовоеРазмещение) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			Элемент.ТекущиеДанные.НовоеРазмещение = Документы.ЗаказПоставщику.ПустаяСсылка();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ИсходноеРазмещение"
// строки табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараИсходноеРазмещениеНачалоВыбора(Элемент, СтандартнаяОбработка)

	ВыборРазмещения(Элемент, СтандартнаяОбработка);

КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода "ИсходноеРазмещение"
// строки табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараИсходноеРазмещениеОчистка(Элемент, СтандартнаяОбработка)

	ОчисткаРазмещения("ВозвратнаяТара", "ИсходноеРазмещение", СтандартнаяОбработка);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "НовоеРазмещение"
// строки табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараНовоеРазмещениеНачалоВыбора(Элемент, СтандартнаяОбработка)

	ВыборРазмещения(Элемент, СтандартнаяОбработка);

КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода "НовоеРазмещение"
// строки табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараНовоеРазмещениеОчистка(Элемент, СтандартнаяОбработка)

	ОчисткаРазмещения("ВозвратнаяТара", "НовоеРазмещение", СтандартнаяОбработка);

КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Возвратная тара". 
//
Процедура ВозвратнаяТараПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.ВозвратнаяТара.Колонки.ЕдиницаХранения.Видимость	Тогда
		ОформлениеСтроки.Ячейки.ЕдиницаХранения.УстановитьТекст(ДанныеСтроки.Номенклатура.ЕдиницаХраненияОстатков);
	КонецЕсли;

	ПоказатьКодАртикул(мКолонкиВозвратнаяТара, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПеретаскивание()

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "ВозвратнаяТара");
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ВозвратнаяТараПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ВозвратнаяТараПеретаскивание()


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары         = ЭлементыФормы.Товары.Колонки;
мКолонкиВозвратнаяТара = ЭлементыФормы.ВозвратнаяТара.Колонки;
