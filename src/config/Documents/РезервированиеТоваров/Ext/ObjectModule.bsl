
Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Заполняет переданную табличную часть по остаткам
//
// Параметры:
//  ТабличнаяЧасть - табличная часть.
//
Процедура ЗаполнитьТабличнуюЧастьПоОстаткамУпр(ТабличнаяЧасть)

	Если ТабличнаяЧасть = Товары Тогда
		ЭтоТовары = Истина;
	Иначе
		ЭтоТовары = Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", ЗаказПокупателя);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ЗаказПокупателя.ДоговорКонтрагента);
	
	Если ЭтоТовары Тогда
		Запрос.УстановитьПараметр("ТоварТара", Перечисления.ТоварТара.Товар);
		Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный);
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("ТоварТара", Перечисления.ТоварТара.Тара);
		Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	КонецЕсли; 

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.Номенклатура                                     КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.Номенклатура.Услуга                              КАК Услуга,
	|	ЗаказыПокупателейОстатки.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаИзмерения,
	|	ЗаказыПокупателейОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ЕдиницаИзмеренияКоэффициент,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстатки.КоличествоОстаток                                КАК Количество,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику                                  КАК Размещение,
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток                                КАК КоличествоРазмещение
	|
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента И ЗаказПокупателя = &Заказ И СтатусПартии = &СтатусПартии) КАК ЗаказыПокупателейОстатки
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(, ЗаказПокупателя = &Заказ И ТоварТара = &ТоварТара) КАК ЗаказыПоставщикамОстатки
	|ПО ЗаказыПокупателейОстатки.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура 
	|	И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры
	|
	|ГДЕ
	|	ЗаказыПокупателейОстатки.СтатусПартии = &СтатусПартии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.Номенклатура                                     КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.Номенклатура.Услуга                              КАК Услуга,
	|	ЗаказыПокупателейОстатки.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаИзмерения,
	|	ЗаказыПокупателейОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ЕдиницаИзмеренияКоэффициент,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстатки.КоличествоОстаток                                КАК Количество,
	|	ОстаткиТоваровОстатки.Склад                                               КАК Размещение,
	|	ОстаткиТоваровОстатки.КоличествоОстаток                                   КАК КоличествоРазмещение
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента И ЗаказПокупателя = &Заказ И СтатусПартии = &СтатусПартии) КАК ЗаказыПокупателейОстатки
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, ДокументРезерва = &Заказ) КАК ОстаткиТоваровОстатки
	|ПО ЗаказыПокупателейОстатки.Номенклатура = ОстаткиТоваровОстатки.Номенклатура 
	|	И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ОстаткиТоваровОстатки.ХарактеристикаНоменклатуры
	|
	|ГДЕ
	|	ЗаказыПокупателейОстатки.СтатусПартии = &СтатусПартии
	|
	|ИТОГИ МАКСИМУМ (Количество) ПО Номенклатура КАК Номенклатура, ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры";

	ВыборкаПоНоменклатуре = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Если ЭтоТовары Тогда
		ТабЧастьЗаказа = ЗаказПокупателя.Товары.Выгрузить();
	Иначе
		ТабЧастьЗаказа = ЗаказПокупателя.ВозвратнаяТара.Выгрузить();
	КонецЕсли;

	Пока ВыборкаПоНоменклатуре.Следующий() Цикл

		// Услуги пропускаем
		Если ВыборкаПоНоменклатуре.Услуга = Истина Тогда
			Продолжить;
		КонецЕсли;

		ВыборкаПоХарактеристикам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоХарактеристикам.Следующий() Цикл

			ЕдиницаИзмеренияКоэффициент = ?(ВыборкаПоХарактеристикам.ЕдиницаИзмеренияКоэффициент <> NULL, ВыборкаПоХарактеристикам.ЕдиницаИзмеренияКоэффициент, 0);

			КоличествоОсталосьПогасить = ВыборкаПоХарактеристикам.Количество;

			// Выберем детальные записи
			Выборка = ВыборкаПоХарактеристикам.Выбрать();

			Пока Выборка.Следующий() Цикл

				// При обходе детальных записей заполним размещение
				Если Выборка.Размещение <> NULL Тогда

					КоличествоРазмещение       = Окр(Мин(Выборка.КоличествоРазмещение, КоличествоОсталосьПогасить), 2, 1);

					КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - КоличествоРазмещение;

					// Если вид операции ограничивает какой-то из вариантов распределения, нужно пропускать соответствующие строки
					// таким образом, в документ будут добавляться строки без размещения
					Если ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров.ПоСкладам
						И ТипЗнч(Выборка.Размещение) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
						Продолжить;
					ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров.ПоЗаказам
						И ТипЗнч(Выборка.Размещение) = Тип("СправочникСсылка.Склады") Тогда
						Продолжить;
					КонецЕсли;

					НоваяСтрока                    = ТабличнаяЧасть.Добавить();
					НоваяСтрока.Номенклатура       = Выборка.Номенклатура;
					НоваяСтрока.ИсходноеРазмещение = Выборка.Размещение;
					НоваяСтрока.Количество         = КоличествоРазмещение;

					Если ЭтоТовары Тогда
						НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
						НоваяСтрока.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
						НоваяСтрока.Коэффициент                = ЕдиницаИзмеренияКоэффициент;
					КонецЕсли;

					ОтборСтрок = Новый Структура("Номенклатура", Выборка.Номенклатура);
					Если ЭтоТовары Тогда
						ОтборСтрок.Вставить("ХарактеристикаНоменклатуры", Выборка.ХарактеристикаНоменклатуры);
					КонецЕсли;

				КонецЕсли;

			КонецЦикла;

			// Если при обходе детальных записей размещение не погасило все заказанное количество,
			// добавим его отдельной строкой.
			Если КоличествоОсталосьПогасить > 0 Тогда
				НоваяСтрока                  = ТабличнаяЧасть.Добавить();
				НоваяСтрока.Номенклатура     = ВыборкаПоХарактеристикам.Номенклатура;
				НоваяСтрока.Количество       = КоличествоОсталосьПогасить;

				ОтборСтрок = Новый Структура("Номенклатура", ВыборкаПоХарактеристикам.Номенклатура);

				Если ЭтоТовары Тогда
					НоваяСтрока.ЕдиницаИзмерения = ВыборкаПоХарактеристикам.ЕдиницаИзмерения;
					НоваяСтрока.Коэффициент      = ЕдиницаИзмеренияКоэффициент;
					НоваяСтрока.ХарактеристикаНоменклатуры = ВыборкаПоХарактеристикам.ХарактеристикаНоменклатуры;

					ОтборСтрок.Вставить("ХарактеристикаНоменклатуры", ВыборкаПоХарактеристикам.ХарактеристикаНоменклатуры);
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоОстаткамУпр()

// Заполняет табличную часть "Товары" по остаткам
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТоварыПоОстаткамУпр() Экспорт

	ЗаполнитьТабличнуюЧастьПоОстаткамУпр(Товары);
	
КонецПроцедуры // ЗаполнитьТоварыПоОстаткамУпр()

Процедура ЗаполнитьТоварыПоЗаказуПокупателяИОстаткам() Экспорт
	Запрос=Новый Запрос;
	
	Запрос.УстановитьПараметр("ЗаказПокупателя",ЗаказПокупателя);
	
	Запрос.Текст="ВЫБРАТЬ
|	Номенклатура,
|	Склад,
|	КоличествоОстаток
|	ПОМЕСТИТЬ ВТ_Остатки
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.Остатки( 	,	Номенклатура В
|				(ВЫБРАТЬ Номенклатура	ИЗ	Документ.ЗаказПокупателя.Товары	ГДЕ
|					Ссылка = &ЗаказПокупателя) И Не Склад.ЗапретитьИспользование И Не Склад.Транзитный  )
|;
|ВЫБРАТЬ ВТ_Остатки.Номенклатура Номенклатура, ВТ_Остатки.Склад Склад ,ВТ_Остатки.КоличествоОстаток Количество
|ПОМЕСТИТЬ ВТ_МаксОстаткиПоСкладам
|ИЗ
| ( ВЫБРАТЬ Номенклатура,
|	МАКСИМУМ (КоличествоОстаток) КоличествоОстаток ИЗ ВТ_Остатки					
|	СГРУППИРОВАТЬ ПО Номенклатура ) СводныеОстатки
|ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Остатки 
|ПО СводныеОстатки.Номенклатура= ВТ_Остатки.Номенклатура
|И  СводныеОстатки.КоличествоОстаток=ВТ_Остатки.КоличествоОстаток
|;
|  ВЫБРАТЬ  РАЗЛИЧНЫЕ ЗаказыПокупателейОстатки.Номенклатура ,
|  ВТ_МаксОстаткиПоСкладам.Склад Склад,
| ЕстьNULL(ЗаказПокупателяТовары.НомерСтроки,1000) НомерСтроки,
| ЕстьNULL(ЗаказыПокупателейОстатки.КоличествоОстаток,0) КоличествоЗаказано,
| ЕстьNULL(ТоварыВРезервеОстатки.КоличествоОстаток,0) КоличествоЗарезервировано,
| ЕстьNULL(ЗаказыПокупателейОстатки.КоличествоОстаток,0) - ЕстьNULL(ТоварыВРезервеОстатки.КоличествоОстаток,0) КоличествоДляРезерва
| //ПОМЕСТИТЬ ВТ_НоменклатураПоЗаказу
| ИЗ РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя = &ЗаказПокупателя) ЗаказыПокупателейОстатки
|  ЛЕВОЕ СОЕДИНЕНИЕ
| (ВЫБРАТЬ НомерСтроки, Номенклатура ИЗ Документ.ЗаказПокупателя.Товары ГДЕ Ссылка=&ЗаказПокупателя ) ЗаказПокупателяТовары
| ПО ЗаказыПокупателейОстатки.Номенклатура=ЗаказПокупателяТовары.Номенклатура
| ЛЕВОЕ СОЕДИНЕНИЕ  РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, ДокументРезерва = &ЗаказПокупателя) ТоварыВРезервеОстатки
| ПО ЗаказыПокупателейОстатки.Номенклатура=ТоварыВРезервеОстатки.Номенклатура
| ЛЕВОЕ СОЕДИНЕНИЕ  ВТ_МаксОстаткиПоСкладам
| ПО ЗаказыПокупателейОстатки.Номенклатура=ВТ_МаксОстаткиПоСкладам.Номенклатура
|УПОРЯДОЧИТЬ ПО  ЕстьNULL(ЗаказПокупателяТовары.НомерСтроки,1000)" ;

Выборка=Запрос.Выполнить().Выбрать();

Пока Выборка.Следующий() Цикл
 	НоваяСтрока = Товары.Добавить();
	НоваяСтрока.Номенклатура = Выборка.Номенклатура;
	НоваяСтрока.ЕдиницаИзмерения= Выборка.Номенклатура.ЕдиницаХраненияОстатков;
	НоваяСтрока.Коэффициент =1;
	НоваяСтрока.Количество =Выборка.КоличествоДляРезерва;
	НоваяСтрока.НовоеРазмещение =Выборка.Склад;
	
	
КонецЦикла;	
	
КонецПроцедуры	

// Заполняет табличную часть "ВозвратнаяТара" по остаткам
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьВозвратнуюТаруПоОстаткамУпр() Экспорт

	ЗаполнитьТабличнуюЧастьПоостаткамУпр(ВозвратнаяТара);
	
КонецПроцедуры // ЗаполнитьВозвратнуюТаруПоОстаткамУпр()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Заполняет табличную часть при оперативном проведении, когда включены флаги авторазмещения и/или авторезервирования
//
// Параметры:
//  Отказ - отказ от дальнейшего проведения.
//
Процедура ЗаполнитьТабличныеЧастиПередПроведением(Отказ) Экспорт

	Если ЗначениеНеЗаполнено(ЗаказПокупателя) ИЛИ НЕ Авторезервирование И НЕ Авторазмещение Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапросСвободныйОстаток = Новый Запрос;
	ЗапросСвободныйОстаток.УстановитьПараметр("ПустойЗаказПокупателя", Неопределено);
	Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		ЗапросСвободныйОстаток.УстановитьПараметр("ПредпочтительноеРазмещение", ЗаказПокупателя.Заказчик);
	Иначе
		ЗапросСвободныйОстаток.УстановитьПараметр("ПредпочтительноеРазмещение", ЗаказПокупателя.Склад);
	КонецЕсли;
	
	// Дату отгрузки берем из документа. Если не заполнена, то из заказа, если и в заказе дата отгрузки не заполнеа, 
	ЗапросСвободныйОстаток.УстановитьПараметр("ДатаОтгрузки", ?(ЗначениеНеЗаполнено(ЗаказПокупателя.ДатаОтгрузки), Дата, ЗаказПокупателя.ДатаОтгрузки));
	ЗапросСвободныйОстаток.УстановитьПараметр("ДокументСсылка", ЗаказПокупателя);

	КопияТовары = Товары.Выгрузить();
	КопияТовары.Свернуть("Номенклатура",);
	КопияВозвратнаяТара = ВозвратнаяТара.Выгрузить();
	КопияВозвратнаяТара.Свернуть("Номенклатура",);

	// Сформируем массив номенклатуры по товарам и таре для фильтров запросов.
	МассивНоменклатуры = КопияТовары.ВыгрузитьКолонку("Номенклатура");
	МассивНоменклатурыТара = КопияВозвратнаяТара.ВыгрузитьКолонку("Номенклатура");
	Для Каждого ЭлементТара Из МассивНоменклатурыТара Цикл
		МассивНоменклатуры.Добавить(ЭлементТара);
	КонецЦикла; 
	
	ТекстФильтраПоСкладам = "
	|(
	|	ВЫБРАТЬ
	|		ГруппыДоступности.Склад
	|	ИЗ
	|		РегистрСведений.СоставГруппДоступностиСкладов КАК ГруппыДоступности
	|	ГДЕ ГруппыДоступности.ГруппаДоступности = &ГруппаДоступностиСкладов)";
	
	ГруппаДоступностиСкладов = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ГруппаДоступностиСкладов");
	
	ЗапросСвободныйОстаток.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	ЗапросСвободныйОстаток.УстановитьПараметр("ГруппаДоступностиСкладов", ГруппаДоступностиСкладов);
	
	Если Авторезервирование Тогда
		ЗапросСвободныйОстаток.Текст = 
		"ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Номенклатура,
		|	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры,
		|	ТоварыНаСкладахОстатки.Склад                      КАК Размещение,
		|	NULL                                              КАК ТоварТара,
		|	NULL                                              КАК ДоговорКонтрагента,
		|	NULL                                              КАК СтатусПартии,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток          КАК Количество,
		|	ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток  КАК КоличествоРазмещенное,
		|	ТоварыКПередачеСоСкладовОстатки.КоличествоОстаток КАК КоличествоКПередаче,
		|	1                                                 КАК СортировкаРазмещение,
		|	ВЫБОР
		|		КОГДА ТоварыНаСкладахОстатки.Склад = &ПредпочтительноеРазмещение ТОГДА
		|			0
		|		ИНАЧЕ
		|			1
		|	КОНЕЦ                                             КАК СортировкаСклад,
		|	NULL                                              КАК ДатаПоступления
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(, 
		|		Номенклатура В (&МассивНоменклатуры)
		|" + ?(Не ЗначениеНеЗаполнено(ГруппаДоступностиСкладов), "И (Склад В" + ТекстФильтраПоСкладам + "
		|       ИЛИ Склад = &ПредпочтительноеРазмещение)", "") + ") КАК ТоварыНаСкладахОстатки	
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|   РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, Номенклатура В (&МассивНоменклатуры) 
		|                                                     И ДокументРезерва <> &ДокументСсылка) КАК ТоварыВРезервеНаСкладахОстатки
		|ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварыВРезервеНаСкладахОстатки.Номенклатура
		|   И ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры = ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры
		|   И ТоварыНаСкладахОстатки.Склад = ТоварыВРезервеНаСкладахОстатки.Склад
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|   РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(, Номенклатура В (&МассивНоменклатуры)) КАК ТоварыКПередачеСоСкладовОстатки
		|ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварыВРезервеНаСкладахОстатки.Номенклатура
		|   И ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры = ТоварыКПередачеСоСкладовОстатки.ХарактеристикаНоменклатуры
		|   И ТоварыНаСкладахОстатки.Склад = ТоварыКПередачеСоСкладовОстатки.Склад
		|";

	КонецЕсли; 
	Если Авторезервирование И Авторазмещение Тогда
		ЗапросСвободныйОстаток.Текст = ЗапросСвободныйОстаток.Текст +
		"
		|ОБЪЕДИНИТЬ ВСЕ
		|";
	КонецЕсли;
	Если Авторазмещение Тогда
		ЗапросСвободныйОстаток.Текст = ЗапросСвободныйОстаток.Текст +
		"ВЫБРАТЬ
		|	ЗаказыПоставщикамОстатки.Номенклатура,
		|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры,
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику                 КАК Размещение,
		|	ОстаткиРазмещенных.ТоварТара,
		|	ЗаказыПоставщикамОстатки.ДоговорКонтрагента,
		|	ЗаказыПоставщикамОстатки.СтатусПартии,
		|	ЗаказыПоставщикамОстатки.КоличествоОстаток               КАК Количество,
		|	ОстаткиРазмещенных.КоличествоОстаток                     КАК КоличествоРазмещенное,
		|	0                                                        КАК КоличествоКПередаче,
		|	0                                                        КАК СортировкаРазмещение,
		|	1                                                        КАК СортировкаСклад,
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления КАК ДатаПоступления
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, 
		|		ЗаказПоставщику.ДатаПоступления <= &ДатаОтгрузки
		|		И Номенклатура В (&МассивНоменклатуры) ) КАК ЗаказыПоставщикамОстатки
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|   РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(, Номенклатура В (&МассивНоменклатуры)
		|                                                          И ЗаказПокупателя <> &ДокументСсылка) КАК ОстаткиРазмещенных
		|ПО ЗаказыПоставщикамОстатки.ЗаказПоставщику = ОстаткиРазмещенных.ЗаказПоставщику
		|" + ?(Не ЗначениеНеЗаполнено(ГруппаДоступностиСкладов), "
		|ГДЕ ЗаказыПоставщикамОстатки.ЗаказПоставщику.Склад В " + ТекстФильтраПоСкладам+ "
		|       ИЛИ ЗаказыПоставщикамОстатки.ЗаказПоставщику.Склад = &ПредпочтительноеРазмещение", "");
	КонецЕсли;
	Если Авторезервирование И Авторазмещение Тогда
		ЗапросСвободныйОстаток.Текст = ЗапросСвободныйОстаток.Текст + "
		|УПОРЯДОЧИТЬ ПО                 // Определяет стратегию авторезервирования и авторазмещения
		|	СортировкаРазмещение,       // Сначала на складе, потом в заказах
		|	СортировкаСклад,            // Сначала предпочтительный склад, затем остальные
		|	ДатаПоступления УБЫВ        // В порядке убывания даты отгрузки	";
	ИначеЕсли Авторезервирование Тогда
		ЗапросСвободныйОстаток.Текст = ЗапросСвободныйОстаток.Текст + "
		|УПОРЯДОЧИТЬ ПО                 // Определяет стратегию авторезервирования и авторазмещения
		|	СортировкаСклад             // Сначала предпочтительный склад, затем остальные ";
	ИначеЕсли Авторазмещение Тогда
		ЗапросСвободныйОстаток.Текст = ЗапросСвободныйОстаток.Текст + "
		|УПОРЯДОЧИТЬ ПО                 // Определяет стратегию авторезервирования и авторазмещения
		|	ДатаПоступления УБЫВ        // В порядке убывания даты отгрузки	";
	КонецЕсли;

	Таблица = ЗапросСвободныйОстаток.Выполнить().Выгрузить();
	
	// Сначала вычислим по каждой строке количества, которые можно разместить
	Для Каждого Строка из Таблица Цикл
		Строка.Количество = Строка.Количество - ?(Строка.КоличествоРазмещенное = NULL, 0, Строка.КоличествоРазмещенное)
											  - ?(Строка.КоличествоКПередаче = NULL, 0, Строка.КоличествоКПередаче);
	КонецЦикла;
	
	Сч = 0;
	Пока Сч < Таблица.Количество() Цикл
		СтрокаТаблицы = Таблица.Получить(Сч);
		Если СтрокаТаблицы.Количество = 0 Тогда
			 Таблица.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;

	ПустаяХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();

	// Сначала вычтем из найденных остатков количество, размещение по которому явно указано
	// в табличных частях документа. Для этого последовательно обойдем табличные части 
	// Товары и Возвратная тара.
	Для Сч = 0 По 1 Цикл

		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары = Ложь;
		КонецЕсли;

		Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл

			// Сначала обходим все строки с размещением и если размещение не указано, пропускаем строку.
			Если ЗначениеНеЗаполнено(СтрокаТЧ.НовоеРазмещение) Тогда
				Продолжить;
			КонецЕсли; 

			// Если не указано авторазмещение в заказах, то пропускаем все строки, в которых указан заказ.
			Если НЕ Авторазмещение И ТипЗнч(СтрокаТЧ.НовоеРазмещение) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				Продолжить;
			КонецЕсли; 

			// Если не указано авторезервирование на складах, то пропускаем все строки, в которых указан склад.
			Если НЕ Авторезервирование И ТипЗнч(СтрокаТЧ.НовоеРазмещение) = Тип("СправочникСсылка.Склады") Тогда
				Продолжить;
			КонецЕсли; 

			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
			СтруктураПоиска.Вставить("Размещение", СтрокаТЧ.НовоеРазмещение);

			Если ЭтоТовары Тогда
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПустаяХарактеристикаНоменклатуры);
			КонецЕсли; 

			НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);

			// Погашаем количество в таблице. 
			Если ЭтоТовары Тогда
				// Пересчитаем количество в ТЧ в единицы хранения.
				КоличествоОсталосьПогасить = СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент 
								/ СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
			Иначе
				КоличествоОсталосьПогасить = СтрокаТЧ.Количество;				
			КонецЕсли; 

			Для Каждого Строка Из НайденныеСтроки Цикл

				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;

				Если Строка.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;

				// Если это остаток из заказа, то дополнительно проверяем на тару/товар
				Если Строка.ТоварТара <> NULL Тогда
					Если ЭтоТовары И Строка.ТоварТара <> Перечисления.ТоварТара.Товар Тогда
						Продолжить;
					ИначеЕсли НЕ ЭтоТовары И Строка.ТоварТара <> Перечисления.ТоварТара.Тара Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли; 

				Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить/Строка.Количество;
				Иначе
					// Это ошибка: списываемое количество не должно быть больше остатка.
					// Такой документ не проведется оперативно.
					КоэффСписания = 1;
				КонецЕсли;

				СписанноеКоличество = Окр(Строка.Количество * КоэффСписания, 3, РежимОкругления.Окр15как20);

				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - СписанноеКоличество;

				Строка.Количество = Строка.Количество - СписанноеКоличество;

			КонецЦикла; 

			Если КоличествоОсталосьПогасить > 0 Тогда
				// Значит в документе неверно задано размещение. Заполнять не будем
				Возврат;
			КонецЕсли; 

		КонецЦикла;

	КонецЦикла;

	// Заполним массив, хранящий две таблицы значений, соответствующих авторазмещению товаров и тары
	МассивТаблицСтрок = Новый Массив(2);

	Для Сч = 0 По 1 Цикл

		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары = Ложь;
		КонецЕсли;

		ТаблицаТЧ = ТабличнаяЧасть.Выгрузить();
		ТаблицаТЧ.Колонки.Добавить("КоличествоЕдиницХранения");

		МассивТаблицСтрок[Сч] = ТабличнаяЧасть.Выгрузить();
		МассивТаблицСтрок[Сч].Очистить();
		МассивТаблицСтрок[Сч].Колонки.Добавить("ИндексИсходнойСтроки");

		Для Каждого СтрокаТЧ Из ТаблицаТЧ Цикл

			Если НЕ ЗначениеНеЗаполнено(СтрокаТЧ.НовоеРазмещение) Тогда
				Продолжить;
			КонецЕсли; 

			// Пересчитаем в единицы хранения

			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);

			Если ЭтоТовары Тогда
				СтрокаТЧ.КоличествоЕдиницХранения = СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент 
										/ СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
			Иначе
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПустаяХарактеристикаНоменклатуры);
				СтрокаТЧ.КоличествоЕдиницХранения = СтрокаТЧ.Количество;
			КонецЕсли; 

			НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);

			// Погашаем количество в таблице
			КоличествоОсталосьПогасить = СтрокаТЧ.КоличествоЕдиницХранения;

			// Погашаем количество в таблице, записывая размещение
			Для Каждого Строка Из НайденныеСтроки Цикл

				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;

				Если Строка.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;

				// Если это остаток по заказу поставщику, отберем товар и тару
				Если ЭтоТовары И Строка.ТоварТара = Перечисления.ТоварТара.Тара  Тогда
					Продолжить;
				ИначеЕсли НЕ ЭтоТовары И Строка.ТоварТара = Перечисления.ТоварТара.Товар  Тогда
					Продолжить;
				ИначеЕсли ЭтоТовары И Строка.СтатусПартии = Перечисления.СтатусыПартийТоваров.ВозвратнаяТара Тогда
					Продолжить;
				ИначеЕсли НЕ ЭтоТовары И Строка.СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный  Тогда
					Продолжить;
				КонецЕсли;

				Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить / Строка.Количество;
				Иначе
					КоэффСписания = 1;
				КонецЕсли;

				СписанноеКоличество = Окр(Строка.Количество * КоэффСписания, 3, РежимОкругления.Окр15как20);

				// Добавляем строку с данными о размещенном количестве
				НоваяСтрока = МассивТаблицСтрок[Сч].Добавить();
				НоваяСтрока.ИндексИсходнойСтроки = ТаблицаТЧ.Индекс(СтрокаТЧ);

				НоваяСтрока.Номенклатура = СтрокаТЧ.Номенклатура;
				
				Если ЭтоТовары Тогда
					НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
					НоваяСтрока.ЕдиницаИзмерения = СтрокаТЧ.ЕдиницаИзмерения;
					НоваяСтрока.Коэффициент = СтрокаТЧ.Коэффициент;
				КонецЕсли;

				НоваяСтрока.НовоеРазмещение = Строка.Размещение;
				
				НоваяСтрока.Количество = СписанноеКоличество;

				КоэффПогашения = СписанноеКоличество / КоличествоОсталосьПогасить;

				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - СписанноеКоличество;

				// Уменьшаем количество в исходной строке
				СтрокаТЧ.Количество = СтрокаТЧ.КоличествоЕдиницХранения - СписанноеКоличество;

				// Уменьшаем количество в строке остатков
				Строка.Количество   = Строка.Количество - СписанноеКоличество;

			КонецЦикла;
			
			Если КоличествоОсталосьПогасить > 0 Тогда
				
				// Добавляем строку с данными о размещенном количестве
				НоваяСтрока = МассивТаблицСтрок[Сч].Добавить();
				НоваяСтрока.ИндексИсходнойСтроки = ТаблицаТЧ.Индекс(СтрокаТЧ);
				НоваяСтрока.Номенклатура         = СтрокаТЧ.Номенклатура;
				Если ЭтоТовары Тогда
					НоваяСтрока.ЕдиницаИзмерения     = СтрокаТЧ.ЕдиницаИзмерения;
					НоваяСтрока.Коэффициент = СтрокаТЧ.Коэффициент;
					НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
				КонецЕсли;

				НоваяСтрока.Количество = КоличествоОсталосьПогасить;

			КонецЕсли; 

		КонецЦикла;
	КонецЦикла;

	// Изменяем табличную часть
	Для Сч = 0 По 1 Цикл
		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары = Ложь;
		КонецЕсли;

		ТекИндексИсходнойСтроки = Неопределено;
		Для Каждого Строка Из МассивТаблицСтрок[Сч] Цикл

			// Если строка с таким индексом уже обрабатывалась, то добавляем новую
			Если ТекИндексИсходнойСтроки = Строка.ИндексИсходнойСтроки Тогда
				Стр = ТабличнаяЧасть[Строка.ИндексИсходнойСтроки];
				РедактируемаяСтрока              = ТабличнаяЧасть.Добавить();
				РедактируемаяСтрока.Номенклатура = Стр.Номенклатура;
				Если ЭтоТовары Тогда
					РедактируемаяСтрока.ХарактеристикаНоменклатуры = Стр.ХарактеристикаНоменклатуры;
				КонецЕсли;
			Иначе
				РедактируемаяСтрока = ТабличнаяЧасть[Строка.ИндексИсходнойСтроки];
			КонецЕсли; 

			РедактируемаяСтрока.НовоеРазмещение = Строка.НовоеРазмещение;

			Если РедактируемаяСтрока.Количество = Строка.Количество Тогда
				Продолжить;
			КонецЕсли;

			РедактируемаяСтрока.Количество = Строка.Количество;
			
			Если ЭтоТовары Тогда
				РедактируемаяСтрока.ЕдиницаИзмерения = Строка.ЕдиницаИзмерения;
				РедактируемаяСтрока.Коэффициент      = Строка.Коэффициент;
			КонецЕсли;

			ТекИндексИсходнойСтроки = Строка.ИндексИсходнойСтроки;

		КонецЦикла; 
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТабличныеЧастиПередПроведением()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Вызываем отдельные процедуры подготовки для упр. учета
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	// Вызываем отдельные процедуры подготовки для упр. учета
	ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
Процедура ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента)

КонецПроцедуры // ПодготовитьТаблицуТарыУпр()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("ВидОперации, ЗаказПокупателя");

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
//  ТаблицаПоПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество");

	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь не должно быть размещений по НТТ
	ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок, "ВидСкладаИсходногоРазмещения");
	ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок, "ВидСкладаНовогоРазмещения");

	Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
		Если ТипЗнч(СтрокаТЧ.НовоеРазмещение) = Тип("СправочникСсылка.Склады") Тогда
			Если СтрокаТЧ.НовоеРазмещение.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
				ОшибкаПриПроведении("В строка № " + СтрокаТЧ.НомерСтроки + " выбрана неавтоматизированная торгвая точка. Нельзя выбирать неавтоматизированные торговые точки.", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	                                                      Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество");

	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()


Процедура КонтрольПревышенияКоличестваВЗаказеПокупателя (Отказ=Ложь)
 Запрос = Новый Запрос;
 
 Запрос.Текст=" ВЫБРАТЬ Резерв.Номенклатура, Резерв.Количество РезервКоличество,
| ЗаказыПокупателейОстатки.КоличествоОстаток  ЗаказаноКоличество
|   ИЗ
|( ВЫБРАТЬ Номенклатура, СУММА(Количество) Количество
| ИЗ
| (ВЫБРАТЬ
|	ТоварыВРезервеНаСкладахОстатки.Номенклатура,
|	ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток Количество
|ИЗ
|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаДок, ДокументРезерва = &ЗаказПокупателя) КАК ТоварыВРезервеНаСкладахОстатки
|ОБЪЕДИНИТЬ
|ВЫБРАТЬ Номенклатура, Количество
|ИЗ Документ.РезервированиеТоваров.Товары РезервированиеТоваров ГДЕ Ссылка=&Ссылка ) А
|СГРУППИРОВАТЬ ПО Номенклатура ) Резерв
|ЛЕВОЕ СОЕДИНЕНИЕ
|РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаДок, ЗаказПокупателя = &ЗаказПокупателя) КАК ЗаказыПокупателейОстатки
|ПО Резерв.Номенклатура=ЗаказыПокупателейОстатки.Номенклатура
|ГДЕ  Резерв.Количество > ЕстьNULL(ЗаказыПокупателейОстатки.КоличествоОстаток,0)";

Запрос.УстановитьПараметр("ЗаказПокупателя",ЗаказПокупателя);
Запрос.УстановитьПараметр("Ссылка",Ссылка);
Запрос.УстановитьПараметр("ДатаДок",Новый Граница(МоментВремени(), ВидГраницы.Исключая));

Выборка=Запрос.Выполнить().Выбрать();

Пока Выборка.Следующий() Цикл
	 СообщитьОбОшибке("По товару : " +Выборка.Номенклатура.Наименование +" зарезервировано "+Строка(Выборка.РезервКоличество) + ", а заказано "+ Строка(Выборка.ЗаказаноКоличество), Отказ);
КонецЦикла;	


КонецПроцедуры

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре,
	                          Отказ, Заголовок);
							  
							  
	КонтрольПревышенияКоличестваВЗаказеПокупателя(Отказ);
	Если Отказ Тогда Возврат КонецЕсли; 
		
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, 
							ТаблицаПоТаре, Отказ, Заголовок);
							  
	//Если СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
	//							  
	//	ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам,
	//										ТаблицаПоТаре, Отказ, Заголовок);
	//	
	//	
	//	УчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата);
	//	
	//	Если УчетнаяПолитика.СписыватьПартииПриПроведенииДокументов Тогда
	//		
	//		ДвижениеПартийТоваров(Ссылка);
	//		
	//		ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
	//		ЗаписьРегистрации.Период = Дата;
	//		ЗаписьРегистрации.Регистратор = Ссылка;

	//	Иначе
	//		
	//		// В неоперативном режиме границы последовательностей сдвигаются назад, если они позже документа.
	//		Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
	//			СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация, Истина, Ложь, Ложь)
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре,
	                          Отказ, Заголовок);

	// Таблица товаров с непустым исходным размещением - заказом поставщику
	ТаблицаПоТоварамРазмещение = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРазмещение.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРазмещение.Получить(Сч);
		Если ЗначениеНеЗаполнено(СтрокаТаблицы.ИсходноеРазмещение) 
		 или ТипЗнч(СтрокаТаблицы.ИсходноеРазмещение) <> Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			 ТаблицаПоТоварамРазмещение.Удалить(СтрокаТаблицы);
		 Иначе
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;

	Если ТаблицаПоТоварамРазмещение.Количество() > 0 Тогда
		ТаблицаПоТоварамРазмещение.Колонки.ИсходноеРазмещение.Имя = "ЗаказПоставщику";
		ТаблицаПоТоварамРазмещение.Колонки.Количество.Имя = "МинусКоличество";
		ТаблицаПоТоварамРазмещение.Колонки.Добавить("Количество");
		
		Для каждого СтрокаТаблицы Из ТаблицаПоТоварамРазмещение Цикл
			СтрокаТаблицы.Количество = - СтрокаТаблицы.МинусКоличество;
		КонецЦикла;

		// По регистру РазмещениеЗаказовПокупателей
		НаборДвижений = Движения.РазмещениеЗаказовПокупателей;

		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамРазмещение, ТаблицаДвижений);

		ТаблицаДвижений.ЗаполнитьЗначения(ЗаказПокупателя,"ЗаказПокупателя");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Товар, "ТоварТара");

		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		НаборДвижений.мПериод          = Дата;
		
		Если Не Отказ Тогда
			Движения.РазмещениеЗаказовПокупателей.ВыполнитьПриход();
        КонецЕсли;
	КонецЕсли;

	// Таблица тары с непустым исходным размещением - заказом поставщику
	ТаблицаПоТареРазмещение = ТаблицаПоТаре.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТареРазмещение.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТареРазмещение.Получить(Сч);
		Если ЗначениеНеЗаполнено(СтрокаТаблицы.ИсходноеРазмещение) 
		 или ТипЗнч(СтрокаТаблицы.ИсходноеРазмещение) <> Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			 ТаблицаПоТареРазмещение.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;

	Если ТаблицаПоТареРазмещение.Количество() > 0 Тогда
		ТаблицаПоТареРазмещение.Колонки.ИсходноеРазмещение.Имя = "ЗаказПоставщику";
		ТаблицаПоТареРазмещение.Колонки.Количество.Имя = "МинусКоличество";
		ТаблицаПоТареРазмещение.Колонки.Добавить("Количество");
		
		Для каждого СтрокаТаблицы Из ТаблицаПоТареРазмещение Цикл
			СтрокаТаблицы.Количество = - СтрокаТаблицы.МинусКоличество;
		КонецЦикла;

		// По регистру РазмещениеЗаказовПокупателей
		НаборДвижений = Движения.РазмещениеЗаказовПокупателей;

		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТареРазмещение, ТаблицаДвижений);

		ТаблицаДвижений.ЗаполнитьЗначения(ЗаказПокупателя,"ЗаказПокупателя");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Тара, "ТоварТара");

		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		НаборДвижений.мПериод          = Дата;
		
		Если Не Отказ Тогда
			Движения.РазмещениеЗаказовПокупателей.ВыполнитьПриход();
		КонецЕсли;
			
	КонецЕсли;

	// Таблица товаров с непустым исходным размещением - складом
	ТаблицаПоТоварамРезервирование = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезервирование.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезервирование.Получить(Сч);
		Если ЗначениеНеЗаполнено(СтрокаТаблицы.ИсходноеРазмещение) 
		 или ТипЗнч(СтрокаТаблицы.ИсходноеРазмещение) <> Тип("СправочникСсылка.Склады") Тогда
			 ТаблицаПоТоварамРезервирование.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;

	Если ТаблицаПоТоварамРезервирование.Количество() > 0 Тогда
		ТаблицаПоТоварамРезервирование.Колонки.ИсходноеРазмещение.Имя = "Склад";
		ТаблицаПоТоварамРезервирование.Колонки.Количество.Имя = "МинусКоличество";
		ТаблицаПоТоварамРезервирование.Колонки.Добавить("Количество");
		
		Для каждого СтрокаТаблицы Из ТаблицаПоТоварамРезервирование Цикл
			СтрокаТаблицы.Количество = - СтрокаТаблицы.МинусКоличество;
		КонецЦикла;

		НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамРезервирование, ТаблицаДвижений);
		ТаблицаДвижений.ЗаполнитьЗначения(ЗаказПокупателя,"ДокументРезерва");

		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		НаборДвижений.мПериод          = Дата;

		Движения.ТоварыВРезервеНаСкладах.ВыполнитьПриход();

	КонецЕсли;

	// Таблица тары с непустым исходным размещением - складом
	ТаблицаПоТареРезервирование = ТаблицаПоТаре.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТареРезервирование.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТареРезервирование.Получить(Сч);
		Если ЗначениеНеЗаполнено(СтрокаТаблицы.ИсходноеРазмещение) 
		 или ТипЗнч(СтрокаТаблицы.ИсходноеРазмещение) <> Тип("СправочникСсылка.Склады") Тогда
			 ТаблицаПоТареРезервирование.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;

	Если ТаблицаПоТареРезервирование.Количество() > 0 Тогда
		ТаблицаПоТареРезервирование.Колонки.ИсходноеРазмещение.Имя = "Склад";
		ТаблицаПоТареРезервирование.Колонки.Количество.Имя = "МинусКоличество";
		ТаблицаПоТареРезервирование.Колонки.Добавить("Количество");
		
		Для каждого СтрокаТаблицы Из ТаблицаПоТареРезервирование Цикл
			СтрокаТаблицы.Количество = - СтрокаТаблицы.МинусКоличество;
		КонецЦикла;

		НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		ЗагрузитьВТаблицуЗначений(ТаблицаПоТареРезервирование, ТаблицаДвижений);
		ТаблицаДвижений.ЗаполнитьЗначения(ЗаказПокупателя,"ДокументРезерва");

		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		НаборДвижений.мПериод          = Дата;

		Движения.ТоварыВРезервеНаСкладах.ВыполнитьПриход();

	КонецЕсли;

	// Таблица товаров с непустым новым размещением - заказом поставщику
	ТаблицаПоТоварамРазмещение = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРазмещение.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРазмещение.Получить(Сч);
		Если ЗначениеНеЗаполнено(СтрокаТаблицы.НовоеРазмещение) 
		 или ТипЗнч(СтрокаТаблицы.НовоеРазмещение) <> Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			 ТаблицаПоТоварамРазмещение.Удалить(СтрокаТаблицы);
		 Иначе
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;

	Если ТаблицаПоТоварамРазмещение.Количество() > 0 Тогда
		ТаблицаПоТоварамРазмещение.Колонки.НовоеРазмещение.Имя = "ЗаказПоставщику";

		// По регистру РазмещениеЗаказовПокупателей
		НаборДвижений = Движения.РазмещениеЗаказовПокупателей;

		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамРазмещение, ТаблицаДвижений);

		ТаблицаДвижений.ЗаполнитьЗначения(ЗаказПокупателя,"ЗаказПокупателя");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Товар, "ТоварТара");

		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		НаборДвижений.мПериод          = Дата;
		
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатковПоЗаказамПоставщикам(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;

		Если Не Отказ Тогда
			Движения.РазмещениеЗаказовПокупателей.ВыполнитьПриход();
		КонецЕсли;

	КонецЕсли;

	// Таблица тары с непустым новым размещением - заказом поставщику
	ТаблицаПоТареРазмещение = ТаблицаПоТаре.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТареРазмещение.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТареРазмещение.Получить(Сч);
		Если ЗначениеНеЗаполнено(СтрокаТаблицы.НовоеРазмещение) 
		 или ТипЗнч(СтрокаТаблицы.НовоеРазмещение) <> Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			 ТаблицаПоТареРазмещение.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;

	Если ТаблицаПоТареРазмещение.Количество() > 0 Тогда

		ТаблицаПоТареРазмещение.Колонки.НовоеРазмещение.Имя = "ЗаказПоставщику";

		// По регистру РазмещениеЗаказовПокупателей
		НаборДвижений = Движения.РазмещениеЗаказовПокупателей;

		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТареРазмещение, ТаблицаДвижений);

		ТаблицаДвижений.ЗаполнитьЗначения(ЗаказПокупателя,"ЗаказПокупателя");
		ТаблицаДвижений.ЗаполнитьЗначения(ЗаказПокупателя,"ЗаказПокупателя");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Тара, "ТоварТара");

		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		НаборДвижений.мПериод          = Дата;
		
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатковПоЗаказамПоставщикам(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;

		Если Не Отказ Тогда
			Движения.РазмещениеЗаказовПокупателей.ВыполнитьРасход();
		КонецЕсли;

	КонецЕсли;

	// Таблица товаров с непустым новым размещением - складом
	ТаблицаПоТоварамРезервирование = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезервирование.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезервирование.Получить(Сч);
		Если ЗначениеНеЗаполнено(СтрокаТаблицы.НовоеРазмещение) 
		 или ТипЗнч(СтрокаТаблицы.НовоеРазмещение) <> Тип("СправочникСсылка.Склады") Тогда
			 ТаблицаПоТоварамРезервирование.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;

	Если ТаблицаПоТоварамРезервирование.Количество() > 0 Тогда
		ТаблицаПоТоварамРезервирование.Колонки.НовоеРазмещение.Имя = "Склад";

		НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамРезервирование, ТаблицаДвижений);
		ТаблицаДвижений.ЗаполнитьЗначения(ЗаказПокупателя,"ДокументРезерва");

		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		НаборДвижений.мПериод          = Дата;

		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольСвободныхОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;

		Движения.ТоварыВРезервеНаСкладах.ВыполнитьПриход();

	КонецЕсли;

	// Таблица тары с непустым новым размещением - складом
	ТаблицаПоТареРезервирование = ТаблицаПоТаре.Скопировать();
	Сч = 0;

	Пока Сч < ТаблицаПоТареРезервирование.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТареРезервирование.Получить(Сч);
		Если ЗначениеНеЗаполнено(СтрокаТаблицы.НовоеРазмещение) 
		 или ТипЗнч(СтрокаТаблицы.НовоеРазмещение) <> Тип("СправочникСсылка.Склады") Тогда
			 ТаблицаПоТареРезервирование.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;

	Если ТаблицаПоТареРезервирование.Количество() > 0 Тогда
		ТаблицаПоТареРезервирование.Колонки.НовоеРазмещение.Имя = "Склад";

		НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		ЗагрузитьВТаблицуЗначений(ТаблицаПоТареРезервирование, ТаблицаДвижений);
		ТаблицаДвижений.ЗаполнитьЗначения(ЗаказПокупателя,"ДокументРезерва");

		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		НаборДвижений.мПериод          = Дата;

		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольСвободныхОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;

		Движения.ТоварыВРезервеНаСкладах.ВыполнитьПриход();

	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Заполняет колонки значениями, нужными для упр. учета
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,"ДопустимыйСтатус2");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"ОтражатьВУправленческомУчете");

КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр() 

// Заполняет колонки значениями, нужными для упр. учета
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоВозвратнойТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"ОтражатьВУправленческомУчете");
			
КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоВозвратнойТареУпр() 

// Формируем движения по регистру СписанныеТовары
//
Процедура ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, 
				                          ТаблицаПоТоварам, ТаблицаПоТаре,
											Отказ, Заголовок)
											
	Инд = 0; // Индекс для регистра СписанныеТовары
	
	// Таблица товаров с непустым исходным размещением - складом
	ТаблицаПоТоварамРезервирование = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезервирование.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезервирование.Получить(Сч);
		Если ЗначениеНеЗаполнено(СтрокаТаблицы.ИсходноеРазмещение) 
		 или ТипЗнч(СтрокаТаблицы.ИсходноеРазмещение) <> Тип("СправочникСсылка.Склады") Тогда
			 ТаблицаПоТоварамРезервирование.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Если ТаблицаПоТоварамРезервирование.Количество() > 0 Тогда
		ТаблицаПоТоварамРезервирование.Колонки.ИсходноеРазмещение.Имя = "Склад";
		
		// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары
		Если СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
			
			НаборДвижений = Движения.СписанныеТовары;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамРезервирование, ТаблицаДвижений);
			
			// Недостающие поля.
			Для каждого Строка Из ТаблицаДвижений Цикл
				Инд = Инд+1;
				Строка.НомерСтрокиДокумента = Инд;
			КонецЦикла;
			
			ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ,"КодОперацииПартииТоваров");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"СписыватьТолькоПоЗаказу");
			
			// Отмена резервирования:
			// 1. Заказ, с которого списать партию - текущий
			ТаблицаДвижений.ЗаполнитьЗначения(ЗаказПокупателя,"ЗаказПартии");
			// 2. Заказ, на который оприходовать партию  - пустой
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"ЗаказСписания");
			
			ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.СписанныеТовары.ВыполнитьДвижения();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Таблица тары с непустым исходным размещением - заказом поставщику
	ТаблицаПоТареРазмещение = ТаблицаПоТаре.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТареРазмещение.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТареРазмещение.Получить(Сч);
		Если ЗначениеНеЗаполнено(СтрокаТаблицы.ИсходноеРазмещение) 
		 или ТипЗнч(СтрокаТаблицы.ИсходноеРазмещение) <> Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			 ТаблицаПоТареРазмещение.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	// Таблица тары с непустым исходным размещением - складом
	ТаблицаПоТареРезервирование = ТаблицаПоТаре.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТареРезервирование.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТареРезервирование.Получить(Сч);
		Если ЗначениеНеЗаполнено(СтрокаТаблицы.ИсходноеРазмещение) 
		 или ТипЗнч(СтрокаТаблицы.ИсходноеРазмещение) <> Тип("СправочникСсылка.Склады") Тогда
			 ТаблицаПоТареРезервирование.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Если ТаблицаПоТареРезервирование.Количество() > 0 Тогда
		ТаблицаПоТареРазмещение.Колонки.ИсходноеРазмещение.Имя = "Склад";
		
		// ТАРА ПО РЕГИСТРУ СписанныеТовары.
		Если СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
			
			НаборДвижений = Движения.СписанныеТовары;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТареРезервирование, ТаблицаДвижений);
			
			// Недостающие поля.
			Для каждого Строка Из ТаблицаДвижений Цикл
				Инд = Инд+1;
				Строка.НомерСтрокиДокумента = Инд;
			КонецЦикла;
			
			ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ,"КодОперацииПартииТоваров");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"СписыватьТолькоПоЗаказу");
			
			// Отмена резервирования:
			// 1. Заказ, с которого списать партию - текущий
			ТаблицаДвижений.ЗаполнитьЗначения(ЗаказПокупателя,"ЗаказПартии");
			// 2. Заказ, на который оприходовать партию  - пустой
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"ЗаказСписания");
			
			ЗаполнитьКолонкиРегистраСписанныеТоварыПоВозвратнойТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.СписанныеТовары.ВыполнитьДвижения();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Таблица товаров с непустым новым размещением - складом
	ТаблицаПоТоварамРезервирование = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезервирование.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезервирование.Получить(Сч);
		Если ЗначениеНеЗаполнено(СтрокаТаблицы.НовоеРазмещение) 
		 или ТипЗнч(СтрокаТаблицы.НовоеРазмещение) <> Тип("СправочникСсылка.Склады") Тогда
			 ТаблицаПоТоварамРезервирование.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Если ТаблицаПоТоварамРезервирование.Количество() > 0 Тогда
		ТаблицаПоТоварамРезервирование.Колонки.НовоеРазмещение.Имя = "Склад";
		
		// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары
		Если СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда

			НаборДвижений = Движения.СписанныеТовары;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамРезервирование, ТаблицаДвижений);

			// Недостающие поля.
			Для каждого Строка Из ТаблицаДвижений Цикл
				Инд = Инд+1;
				Строка.НомерСтрокиДокумента = Инд;
			КонецЦикла;
			
			ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ,"КодОперацииПартииТоваров");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"СписыватьТолькоПоЗаказу");
			
			// Резервирование:
			// 1. Заказ, с которого списать партию - пустой
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"ЗаказПартии");
			// 2. Заказ, на который оприходовать партию  - текущий
			ТаблицаДвижений.ЗаполнитьЗначения(ЗаказПокупателя,"ЗаказСписания");
			
			ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.СписанныеТовары.ВыполнитьДвижения();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Таблица тары с непустым новым размещением - складом
	ТаблицаПоТареРезервирование = ТаблицаПоТаре.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТареРезервирование.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТареРезервирование.Получить(Сч);
		Если ЗначениеНеЗаполнено(СтрокаТаблицы.НовоеРазмещение) 
		 или ТипЗнч(СтрокаТаблицы.НовоеРазмещение) <> Тип("СправочникСсылка.Склады") Тогда
			 ТаблицаПоТареРезервирование.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Если ТаблицаПоТареРезервирование.Количество() > 0 Тогда
		ТаблицаПоТареРезервирование.Колонки.НовоеРазмещение.Имя = "Склад";
		
		// ТАРА ПО РЕГИСТРУ СписанныеТовары.
		Если СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
			
			НаборДвижений = Движения.СписанныеТовары;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТареРезервирование, ТаблицаДвижений);
			
			// Недостающие поля.
			Для каждого Строка Из ТаблицаДвижений Цикл
				Инд = Инд+1;
				Строка.НомерСтрокиДокумента = Инд;
			КонецЦикла;
			
			ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ,"КодОперацииПартииТоваров");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"СписыватьТолькоПоЗаказу");
			
			// Резервирование:
			// 1. Заказ, с которого списать партию - пустой
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"ЗаказПартии");
			// 2. Заказ, на который оприходовать партию  - текущий
			ТаблицаДвижений.ЗаполнитьЗначения(ЗаказПокупателя,"ЗаказСписания");
			
			ЗаполнитьКолонкиРегистраСписанныеТоварыПоВозвратнойТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.СписанныеТовары.ВыполнитьДвижения();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструСписанныеТовары()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ЗаказПокупателя = Основание;

		//ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров.ПоСкладамИЗаказам;
		ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров.ПоСкладам;

		ДатаОтгрузки = Основание.ДатаОтгрузки;

		Если Основание.Проведен Тогда

			// Заполним табличные части неотгруженными товарми по заказу покупателя.
			ЗаполнитьТоварыПоЗаказуПокупателяИОстаткам();
			//ЗаполнитьТоварыПоОстаткамУпр();
			//ЗаполнитьВозвратнуюТаруПоОстаткамУпр();
		КонецЕсли;	

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
	
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ЗаказПокупателя = Основание;
		ВидОперации     = Перечисления.ВидыОперацийРезервированиеТоваров.ПоСкладамИЗаказам;
		ДатаОтгрузки    = Основание.ДатаОтгрузки;
		
		Если Основание.Проведен Тогда
			ТабОстатки = ОстаткиТоваровПоВнутреннемуЗаказу(Основание, Дата);
			ЗаполнитьТабЧастьТоварыПоВнутреннемуЗаказу(ЭтотОбъект, Товары, ТабОстатки);
			
			ТабОстатки = ОстаткиТоваровПоВнутреннемуЗаказу(Основание, Дата, Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
			ЗаполнитьТабЧастьТараПоВнутреннемуЗаказу(ЭтотОбъект, ВозвратнаяТара, ТабОстатки);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	// Проверка заполнения единицы измерения мест и количества мест
	ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	
	Для каждого СтрокаТовары ИЗ Товары Цикл
		СкладРезерва=СтрокаТовары.НовоеРазмещение;
		Если ТипЗнч(СкладРезерва)= Тип("СправочникСсылка.Склады") И СкладРезерва.Транзитный И СкладРезерва.ЗапретитьИспользование  Тогда
			СообщитьОбОшибке("В строке №" + СтрокаТовары.НомерСтроки + " указан транзитный склад. Резерв на этом складе запрещен", Отказ );
		КонецЕсли;
	КонецЦикла;	
	
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
		
	Иначе
		Возврат;
	КонецЕсли; 

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = СформироватьДеревоПолейЗапросаПоШапке();
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ЗаказыПокупателей", "ДоговорКонтрагента"       , "ДоговорКонтрагента");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"  , "ВестиПартионныйУчетПоСкладам", "ВестиПартионныйУчетПоСкладам");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ЗаказыПокупателей", "Организация"                 , "Организация");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ЗаказыПокупателей", "ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей", "ОбособленныйУчетТоваровПоЗаказамПокупателей");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	Если СтруктураШапкиДокумента.Свойство("ОбособленныйУчетТоваровПоЗаказамПокупателей") Тогда
		Если СтруктураШапкиДокумента["ОбособленныйУчетТоваровПоЗаказамПокупателей"] = NULL Тогда
			СтруктураШапкиДокумента.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", Ложь);
		КонецЕсли;
	КонецЕсли;

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"                 , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                       , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                        , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"                   , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("НомерСтроки"                  , "НомерСтроки");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"   , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("ИсходноеРазмещение"           , "ИсходноеРазмещение");
	СтруктураПолей.Вставить("НовоеРазмещение"              , "НовоеРазмещение");
	СтруктураПолей.Вставить("ВидСкладаИсходногоРазмещения" , "ИсходноеРазмещение.ВидСклада");
	СтруктураПолей.Вставить("ВидСкладаНовогоРазмещения"    , "НовоеРазмещение.ВидСклада");

	РезультатЗапросаПоТоварам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"                 , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                       , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                        , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"                   , "Количество");
	СтруктураПолей.Вставить("НомерСтроки"                  , "НомерСтроки");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам"   , "Номенклатура.ВестиУчетПоХарактеристикам");
	СтруктураПолей.Вставить("ИсходноеРазмещение"           , "ИсходноеРазмещение");
	СтруктураПолей.Вставить("НовоеРазмещение"              , "НовоеРазмещение");

	РезультатЗапросаПоТаре = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары" и "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	// Удаление записей регистрации из всех последовательностей
	Для Каждого НаборЗаписейРегистрацииВПоследовательности Из ПринадлежностьПоследовательностям Цикл
		НаборЗаписейРегистрацииВПоследовательности.Очистить();
	КонецЦикла;
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
