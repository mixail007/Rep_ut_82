Перем мВалютаРегламентированногоУчета Экспорт;

//БАЛАНС (04.12.2007)                       
//
Перем мПроведениеИзФормы Экспорт; 

// Финкция возвращает пустую таблицу значений под
// табличную часть документа основания.
// 
Функция ИнициализацияТаблицыСтрок()

	Товары = Новый ТаблицаЗначений();

	Товары.Колонки.Добавить("Товар");
	Товары.Колонки.Добавить("ТоварНаименование");
	Товары.Колонки.Добавить("СтранаПроисхождения");
	Товары.Колонки.Добавить("ПредставлениеСтраны");
	Товары.Колонки.Добавить("НомерГТД");
	Товары.Колонки.Добавить("ПредставлениеГТД");
	Товары.Колонки.Добавить("Количество");
	Товары.Колонки.Добавить("ЕдиницаИзмерения");
	Товары.Колонки.Добавить("Цена");
	Товары.Колонки.Добавить("СтавкаНДС");
	Товары.Колонки.Добавить("СуммаНДС");
	Товары.Колонки.Добавить("Сумма");

	Возврат Товары;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция собирает данные по Организации и 
// в том случае если организация является физлицом, возвращает
// ФИО предпринимателя, иначе возвращвется пустая строка
// 
Функция ПолучитьФИОПредпринимателя(Организация, ДатаСреза, ЮрФизЛицо)
	
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда

		ЗапросПоЛицам = Новый Запрос();
		ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
		ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
		ЗапросПоЛицам.Текст = "
		|ВЫБРАТЬ
		|	ФИОФизЛицСрезПоследних.Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя,
		|	ФИОФизЛицСрезПоследних.Отчество,
		|	ФИОФизЛицСрезПоследних.Фамилия + "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + ""."" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + ""."" КАК ФИОПолное
		|ИЗ
		|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо = &Организация) КАК ФИОФизЛицСрезПоследних";
		
		Выборка = ЗапросПоЛицам.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда
			Возврат Выборка.ФИОПолное;
		КонецЕсли;

	КонецЕсли;
	
	Возврат "";
	
КонецФункции
	
// Функция собирает данные по документу основанию ОтчетаКомитенту и 
// возвращает типизированную структуру с данными
// 
Функция СобратьДанныеПоОтчетКомитентуОПродажах()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организация,
	|	Организация   КАК Поставщик,
	|	Организация   КАК Грузоотправитель,
	|	Контрагент    КАК Покупатель,
	|	Контрагент    КАК Грузополучатель,
	|	Организация.ЮрФизЛицо   КАК ЮрФизЛицо,
	|	СуммаДокумента          КАК Сумма,
	|	СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	ВалютаДокумента         КАК Валюта,
	|	Товары.(
	|		СУММА(СуммаВознаграждения) КАК Сумма
	|	)
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитентуОПродажах
	|
	|ГДЕ
	|	ОтчетКомитентуОПродажах.Ссылка = &ДокументОснование";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Истина);
	Руководители = ОтветственныеЛицаОрганизации(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить("ФИОРуководителя",       Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);
	ДанныеДляПечати.Вставить("ФИОПБОЮЛ", 			  ПолучитьФИОПредпринимателя(Шапка.Организация, Дата, Шапка.ЮрФизЛицо));
	
	Товары = ИнициализацияТаблицыСтрок();

	Если ВыборкаСтрокТовары.Следующий() Тогда
		Строчка = Товары.Добавить();
		Строчка.Товар               = "Комиссионное вознаграждение";
		Строчка.ТоварНаименование   = "Комиссионное вознаграждение";
		Строчка.СтранаПроисхождения = "";
		Строчка.ПредставлениеСтраны = "";
		Строчка.НомерГТД            = "";
		Строчка.ПредставлениеГТД    = "";
		Строчка.Количество          = 0;
		Строчка.ЕдиницаИзмерения    = "";
		Строчка.СтавкаНДС = Шапка.СтавкаНДС;
		СуммаДляПечати    = ?(ВыборкаСтрокТовары.Сумма = Null, 0, ВыборкаСтрокТовары.Сумма);
		Строчка.СуммаНДС  = РассчитатьСуммуНДС(СуммаДляПечати, Истина, Истина, ПолучитьСтавкуНДС(Шапка.СтавкаНДС));
		Строчка.Сумма     = СуммаДляПечати;
		Строчка.Цена      = 0;
	КонецЕсли;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоОтчетКомитентуОПродажах()

// Функция собирает данные по документу основанию ОтчетаКомисиионера и 
// возвращает типизированную структуру с данными
// 
Функция СобратьДанныеПоОтчетКомиссионераОПродажах()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организация,
	|	Организация   КАК Поставщик,
	|	Организация   КАК Грузоотправитель,
	|	Организация.ЮрФизЛицо   КАК ЮрФизЛицо,
	|	Контрагент    КАК Покупатель,
	|	Контрагент    КАК Грузополучатель,
	|	СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	СуммаДокумента          КАК Сумма,
	|	ВалютаДокумента         КАК Валюта,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	Товары.(
	|		Номенклатура КАК Товар,
	|		ВЫРАЗИТЬ (Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|		СерияНоменклатуры.СтранаПроисхождения                    КАК СтранаПроисхождения,
	|		СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|		СерияНоменклатуры.НомерГТД                               КАК НомерГТД,
	|		СерияНоменклатуры.НомерГТД.Представление                 КАК ПредставлениеГТД,
	|		ЕдиницаИзмерения,
	|		Количество,
	|		Сумма,
	|		СтавкаНДС,
	|		СуммаНДС
	|	)
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
	|
	|ГДЕ
	|	ОтчетКомиссионераОПродажах.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);
	Руководители = ОтветственныеЛицаОрганизации(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить("ФИОРуководителя",       Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);
	ДанныеДляПечати.Вставить("ФИОПБОЮЛ", 			  ПолучитьФИОПредпринимателя(Шапка.Организация, Дата, Шапка.ЮрФизЛицо));

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() Цикл
		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = ВыборкаСтрокТовары.ТоварНаименование;
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.ПредставлениеСтраны = ?(ЗначениеНеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
		Строчка.Цена                = ?(ВыборкаСтрокТовары.Количество=0,(ВыборкаСтрокТовары.Сумма - ВыборкаСтрокТовары.СуммаНДС), (ВыборкаСтрокТовары.Сумма - ВыборкаСтрокТовары.СуммаНДС) / ВыборкаСтрокТовары.Количество); //+++ 28.12.2018
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоОтчетКомиссионераОПродажах()

// Функция собирает данные по документу основанию реализации и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоРеализацияТоваровУслуг()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование.Ссылка);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Организация,
	|	Организация      КАК Поставщик,
	|	Грузоотправитель КАК Грузоотправитель,
	|	Организация.ЮрФизЛицо КАК ЮрФизЛицо,
	|	Контрагент       КАК Покупатель,
	|	Грузополучатель  КАК Грузополучатель,
	|	СуммаДокумента   КАК Сумма,
	|	ВалютаДокумента  КАК Валюта,
	|	УчитыватьНДС     КАК УчитыватьНДС,
	|	СуммаВключаетНДС КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Номенклатура КАК Товар,
	|	ВЫРАЗИТЬ (Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ХарактеристикаНоменклатуры                                  КАК Характеристика,
	|	СерияНоменклатуры                                           КАК Серия,
	|	СерияНоменклатуры.СтранаПроисхождения                       КАК СтранаПроисхождения,
	|	СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное    КАК ПредставлениеСтраны,
	|	ЕдиницаИзмерения.Представление                              КАК ЕдиницаИзмерения,
	|	СерияНоменклатуры.НомерГТД                                  КАК НомерГТД,
	|	СерияНоменклатуры.НомерГТД.Представление                    КАК ПредставлениеГТД,
	|	Количество                                                  КАК Количество,
	|	Цена                                                        КАК Цена,
	|	СтавкаНДС                                                   КАК СтавкаНДС,
	|	СуммаНДС                                                    КАК СуммаНДС,
	|	Сумма                                                       КАК Сумма,
	|	НомерСтроки                                                 КАК НомерСтроки,
	|	1                                                           КАК Метка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура КАК Товар,
	|	Содержание   КАК ТоварНаименование,
	|	NULL         КАК Характеристика,
	|	NULL         КАК Серия,
	|	NULL         КАК СтранаПроисхождения,
	|	""""         КАК ПредставлениеСтраны,
	|	NULL         КАК ЕдиницаИзмерения,
	|	NULL         КАК НомерГТД,
	|	""""         КАК ПредставлениеГТД,
	|	Количество   КАК Количество,
	|	Цена         КАК Цена,
	|	СтавкаНДС    КАК СтавкаНДС,
	|	СуммаНДС     КАК СуммаНДС,
	|	Сумма        КАК Сумма,
	|	НомерСтроки  КАК НомерСтроки,
	|	2            КАК Метка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Метка ВОЗР, НомерСтроки ВОЗР
	|";

	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);

	Руководители = ОтветственныеЛицаОрганизации(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить("ФИОРуководителя",       Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);
 	ДанныеДляПечати.Вставить("ФИОПБОЮЛ", 			  ПолучитьФИОПредпринимателя(Шапка.Организация, Дата, Шапка.ЮрФизЛицо));

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.ПредставлениеСтраны = ?(ЗначениеНеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.Цена                = ВыборкаСтрокТовары.Цена;
		Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;

	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоРеализацияТоваровУслуг()

// Функция собирает данные по документу основанию ОтчетаКомитенту и 
// возвращает типизированную структуру с данными
// 
Функция СобратьДанныеПоПКО()

	Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
		Возврат Неопределено;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организация,
	|	Номер,
	|	Дата,
	|	Организация КАК Поставщик,
	|	Организация КАК Грузоотправитель,
	|	Организация.ЮрФизЛицо   КАК ЮрФизЛицо,
	|	Контрагент  КАК Покупатель,
	|	Контрагент  КАК Грузополучатель,
	|	СуммаДокумента        КАК Сумма,
	|	СтавкаНДС             КАК СтавкаНДС,
	|	ВалютаДокумента       КАК Валюта
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Истина);

	Руководители = ОтветственныеЛицаОрганизации(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить("ФИОРуководителя",       Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);
	ДанныеДляПечати.Вставить("ФИОПБОЮЛ", 			  ПолучитьФИОПредпринимателя(Шапка.Организация, Дата, Шапка.ЮрФизЛицо));

	Товары   = ИнициализацияТаблицыСтрок();

	Строчка  = Товары.Добавить();

	Строчка.Товар               = "Авансовый платеж";
	Строчка.ТоварНаименование   = "Авансовый платеж";
	Строчка.СтранаПроисхождения = "";
	Строчка.ПредставлениеСтраны = "";
	Строчка.НомерГТД            = "";
	Строчка.ПредставлениеГТД    = "";
	Строчка.Количество          = 1;
	Строчка.ЕдиницаИзмерения    = "";
	Строчка.СтавкаНДС           = Шапка.СтавкаНДС;
	Строчка.СуммаНДС            = СуммаНДС;
	Строчка.Сумма               = Сумма;
	Строчка.Цена                = Сумма;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПКО()

// Функция собирает данные по документу основанию ПлатежноеПоручениеВходящее и 
// возвращает типизированную структуру с данными
// 
Функция СобратьДанныеПоСВП()

	Запрос = Новый Запрос;
 	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организация,
	|	Номер,
	|	Дата,
	|	Организация КАК Поставщик,
	|	Организация КАК Грузоотправитель,
	|	Организация.ЮрФизЛицо   КАК ЮрФизЛицо,
	|	Контрагент  КАК Покупатель,
	|	Контрагент  КАК Грузополучатель,
	|	ВалютаДокумента       КАК Валюта
	|ИЗ
	|	Документ.ПлатежноеПоручениеВходящее КАК ПлатежноеПоручениеВходящее
	|
	|ГДЕ
	|	ПлатежноеПоручениеВходящее.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Истина);

	Руководители = ОтветственныеЛицаОрганизации(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить("ФИОРуководителя",       Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);
	ДанныеДляПечати.Вставить("ФИОПБОЮЛ", 			  ПолучитьФИОПредпринимателя(Шапка.Организация, Дата, Шапка.ЮрФизЛицо));

	Товары = ИнициализацияТаблицыСтрок();

	Строчка = Товары.Добавить();
	Строчка.Товар               = "Авансовый платеж";
	Строчка.ТоварНаименование   = "Авансовый платеж";
	Строчка.СтранаПроисхождения = "";
	Строчка.ПредставлениеСтраны = "";
	Строчка.НомерГТД            = "";
	Строчка.ПредставлениеГТД    = "";
	Строчка.Количество          = 1;
	Строчка.ЕдиницаИзмерения    = "";

	Строчка.СтавкаНДС = СтавкаНДСнаДату(Шапка.Дата);//+++ 28.12.2018
	//Если Шапка.Дата < '20040101' 
	//	Тогда Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120;
	//	Иначе Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118;
	//КонецЕсли;
		
	Строчка.СуммаНДС  = СуммаНДС;
	Строчка.Сумма     = Сумма;
	Строчка.Цена      = Сумма;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоСВП()

// Функция собирает данные по документу основанию ОтражениеРеализацииТоваровИУслуг возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоОтражениюРеализацииТоваровИУслуг()


	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование.Ссылка);

	Запрос.Текст = "ВЫБРАТЬ
	|	Организация,
	|	Организация КАК Поставщик,
	|	Организация КАК Грузоотправитель,
	|	Организация.ЮрФизЛицо   КАК ЮрФизЛицо,
	|	Контрагент  КАК Покупатель,
	|	Контрагент  КАК Грузополучатель,
	|	СуммаДокумента	 КАК Сумма,
	|	""""			 КАК Валюта,
	|	Истина			 КАК УчитыватьНДС,
	|	Ложь			 КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ОтражениеРеализацииТоваровИУслугНДС КАК ОтражениеРеализацииТоваровИУслугНДС
	|
	|ГДЕ
	|	ОтражениеРеализацииТоваровИУслугНДС.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
					|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Номенклатура КАК Товар,
					|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Номенклатура.Представление КАК ТоварНаименование,
					|	"""" КАК СтранаПроисхождения,
					|	"""" КАК ПредставлениеСтраны,
					|	"""" КАК НомерГТД,
					|	"""" КАК ПредставлениеГТД,
					|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Количество,
					|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.ЕдиницаИзмерения,
					|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.ЕдиницаИзмерения.Представление КАК ПредставлениеЕдиницыИзмерения,
					|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Цена,
					|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.СтавкаНДС,
					|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.СуммаНДС,
					|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Сумма
					|ИЗ
					|	Документ.ОтражениеРеализацииТоваровИУслугНДС.ТоварыИУслуги КАК ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги

					|ГДЕ
					|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Ссылка = &ДокументОснование

					|УПОРЯДОЧИТЬ ПО
					|	Товар";
						
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            0);
	ДанныеДляПечати.Вставить("Валюта",           мВалютаРегламентированногоУчета);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Ложь);

	Руководители = ОтветственныеЛицаОрганизации(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить("ФИОРуководителя",       Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);
	ДанныеДляПечати.Вставить("ФИОПБОЮЛ", 			  ПолучитьФИОПредпринимателя(Шапка.Организация, Дата, Шапка.ЮрФизЛицо));

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = ВыборкаСтрокТовары.ТоварНаименование;
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.ПредставлениеСтраны = ВыборкаСтрокТовары.ПредставлениеСтраны;
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ПредставлениеЕдиницыИзмерения;
		Строчка.Цена                = ВыборкаСтрокТовары.Сумма;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;

	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПередачеОС()

// Проверяет правильность заполнения шапки документа.
// проставляет прочерки в незаполненных полях печатной формы счета-фактуры
//
Процедура ПроставитьПрочеркиВПустыеПоля(ОбластьМакета)

	Для т = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		
		ТекПараметр = ОбластьМакета.Параметры.Получить(т);
		
		Если (Найти(ТекПараметр, "Продавец:") <> 0)
		   и (СокрЛП(ТекПараметр) = "Продавец:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Продавец: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Адрес:") <> 0)
			    и (СокрЛП(ТекПараметр) = "Адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Идентификационный номер продавца (ИНН):") <> 0)
			    и (СокрЛП(ТекПараметр) = "Идентификационный номер продавца (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер продавца (ИНН): ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Грузоотправитель и его адрес:") <> 0)
			    и (СокрЛП(ТекПараметр) = "Грузоотправитель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузоотправитель и его адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Грузополучатель и его адрес:") <> 0)
		   		и (СокрЛП(ТекПараметр) = "Грузополучатель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузополучатель и его адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "К платежно-расчетному документу №") <> 0)
		   		и (СокрЛП(ТекПараметр) = "К платежно-расчетному документу №  от") Тогда
			ОбластьМакета.Параметры.Установить(т, "К платежно-расчетному документу № -- от --");
			
		ИначеЕсли (Найти(ТекПараметр, "Покупатель:") <> 0)
		   		и (СокрЛП(ТекПараметр) = "Покупатель:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Покупатель: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Идентификационный номер покупателя (ИНН):") <> 0)
			    и (СокрЛП(ТекПараметр) = "Идентификационный номер покупателя (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер покупателя (ИНН): ----");
			
		ИначеЕсли ЗначениеНеЗаполнено(ТекПараметр) Тогда
			ОбластьМакета.Параметры.Установить(т, "--");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроставитьПрочеркиВПустыеПоля()

// Функция создает табличный документ ун. формы счета-фактуры
//
// Параметры 
//  ДанныеДляПечати - типизированная струтктура данных для заполнения параметров макета
//
Функция ПечатьСчетаФактуры(ДанныеДляПечати)

	ТабДокумент = Новый ТабличныйДокумент;

	Если Дата < '20040216' Тогда
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура575";
		Макет = ПолучитьОбщийМакет("СчетФактура575");
	Иначе
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура84";
		Макет = ПолучитьОбщийМакет("СчетФактура84");
	КонецЕсли;

	СведенияОГрузоотправителе = СведенияОЮрФизЛице(ДанныеДляПечати.Грузоотправитель, Дата);
	СведенияОбПокупателе = СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, Дата);
	СведенияОГрузополучателе = СведенияОЮрФизЛице(ДанныеДляПечати.Грузополучатель, Дата);
	СведенияОПоставщике  = СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, Дата);

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	ОбластьМакета.Параметры.Номер = СформироватьЗаголовокДокумента(ДанныеДляПечати, "Счет-фактура");
	Если Дата < '20040216' Тогда
		ОбластьМакета.Параметры.ПредставлениеПоставщика       = "Продавец: "                                 + ОписаниеОрганизации(СведенияОПоставщике,  "ПолноеНаименование,");
		ОбластьМакета.Параметры.АдресПоставщика               = "Адрес: "                                    + ОписаниеОрганизации(СведенияОПоставщике,  "ЮридическийАдрес,");
		ОбластьМакета.Параметры.ИННпоставщика                 = "Идентификационный номер продавца (ИНН): "   + ОписаниеОрганизации(СведенияОПоставщике,  "ИНН,", Ложь); 
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: "             + ОписаниеОрганизации(СведенияОГрузоотправителе,  "ПолноеНаименование,ФактическийАдрес,");
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = "Грузополучатель и его адрес: "              + ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ФактическийАдрес,");
		ОбластьМакета.Параметры.ПоДокументу                   = "К платежно-расчетному документу № " + НомерПлатежноРасчетногоДокумента + " от " + Формат(ДатаПлатежноРасчетногоДокумента, "ДФ=dd.MM.yyyy");
		ОбластьМакета.Параметры.ПредставлениеПокупателя       = "Покупатель: "                               + ОписаниеОрганизации(СведенияОбПокупателе, "ПолноеНаименование,");
		ОбластьМакета.Параметры.АдресПокупателя               = "Адрес: "                                    + ОписаниеОрганизации(СведенияОбПокупателе, "ЮридическийАдрес,");
		ОбластьМакета.Параметры.ИННПокупателя                 = "Идентификационный номер покупателя (ИНН): " + ОписаниеОрганизации(СведенияОбПокупателе, "ИНН,", Ложь);
	Иначе
		ОбластьМакета.Параметры.ПредставлениеПоставщика       = "Продавец: "                         + ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		ОбластьМакета.Параметры.АдресПоставщика               = "Адрес: "                            + ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,");
		КПП = ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
		Если НЕ ЗначениеНеЗаполнено(КПП) Тогда
			КПП = "/" + КПП;
		КонецЕсли;
		ОбластьМакета.Параметры.ИННпоставщика                 = "ИНН/КПП продавца: "                 + ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП;
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: "     + ОписаниеОрганизации(СведенияОГрузоотправителе,  "ПолноеНаименование,ФактическийАдрес,");
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = "Грузополучатель и его адрес: "      + ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ФактическийАдрес,");
		ОбластьМакета.Параметры.ПоДокументу                   = "К платежно-расчетному документу № " + НомерПлатежноРасчетногоДокумента + " от " + Формат(ДатаПлатежноРасчетногоДокумента, "ДФ=dd.MM.yyyy");
		ОбластьМакета.Параметры.ПредставлениеПокупателя       = "Покупатель: "                       + ОписаниеОрганизации(СведенияОбПокупателе, "ПолноеНаименование,");
		ОбластьМакета.Параметры.АдресПокупателя               = "Адрес: "                            + ОписаниеОрганизации(СведенияОбПокупателе, "ЮридическийАдрес,");
		КПП = ОписаниеОрганизации(СведенияОбПокупателе, "КПП,", Ложь);
		Если НЕ ЗначениеНеЗаполнено(КПП) Тогда
			КПП = "/" + КПП;
		КонецЕсли;
		ОбластьМакета.Параметры.ИННПокупателя                 = "ИНН/КПП покупателя: "               + ОписаниеОрганизации(СведенияОбПокупателе, "ИНН,", Ложь) + КПП;
	КонецЕсли;
	
	ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");

	ИтогоСуммаНДС = 0;
	ИтогоВсего    = 0;

	ВыборкаСтрокТовары = ДанныеДляПечати.ТабличнаяЧасть;

	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		ОбластьМакета.Параметры.Заполнить(Строчка);

		Если Строка(Строчка.ПредставлениеСтраны) = "Россия" Тогда
			ОбластьМакета.Параметры.ПредставлениеСтраны  = "----";
		КонецЕсли; 

		СуммаСНДС = Строчка.Сумма + ?(ДанныеДляПечати.СуммаВключаетНДС, 0, Строчка.СуммаНДС);

		Количество  = Строчка.Количество;
		СуммаНДСТаб = Строчка.СуммаНДС;
		Если (Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120)
		 или (Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118)
		 или (Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110) Тогда
			СуммаБезНДС = СуммаСНДС;
		Иначе
			СуммаБезНДС = СуммаСНДС - СуммаНДСТаб;
		КонецЕсли;

		ОбластьМакета.Параметры.Количество = Количество;
		ОбластьМакета.Параметры.Цена       = ?(Количество = 0, 0, СуммаБезНДС / Количество);
		
		Если НаАванс Тогда
			// В счетах фактурах на аванс колонка 5 не выводится
			ОбластьМакета.Параметры.Стоимость  = 0;
		Иначе
			ОбластьМакета.Параметры.Стоимость  = СуммаБезНДС;
		КонецЕсли;	
			
		ОбластьМакета.Параметры.СуммаНДС   = СуммаНДСТаб;
		ОбластьМакета.Параметры.Всего      = СуммаСНДС;
		ОбластьМакета.Параметры.СтавкаНДС  = Строчка.СтавкаНДС;

		ИтогоСуммаНДС = ИтогоСуммаНДС + СуммаНДСТаб;
		ИтогоВсего    = ИтогоВсего    + СуммаСНДС;

		ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.ИтогоСуммаНДС = ИтогоСуммаНДС;
	ОбластьМакета.Параметры.ИтогоВсего    = ИтогоВСего;
	
	ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаФактуры()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли;

	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "СчетФактура" Тогда

		// Получить экземпляр документа на печать
		ТипОснования = ТипЗнч(ДокументОснование);

		Если ТипОснования      = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			ДанныеДляПечати    = СобратьДанныеПоОтчетКомитентуОПродажах();
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ДанныеДляПечати    = СобратьДанныеПоРеализацияТоваровУслуг();
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			ДанныеДляПечати    = СобратьДанныеПоОтчетКомиссионераОПродажах();
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
			ДанныеДляПечати    = СобратьДанныеПоПКО();
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда
			ДанныеДляПечати    = СобратьДанныеПоСВП();
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС") Тогда
			ДанныеДляПечати    = СобратьДанныеПоОтражениюРеализацииТоваровИУслуг();
		КонецЕсли;

		Если ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Тогда
			Возврат;
		ИначеЕсли ДанныеДляПечати = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ТабДокумент = ПечатьСчетаФактуры(ДанныеДляПечати);

	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда

		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;

		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();

	КонецЕсли;

	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;

	СписокМакетов.Добавить("СчетФактура", "Счет-фактура");

	ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

#КонецЕсли

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДокументОснование");

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);

	Если НаАванс Тогда
		ДвиженияПоРегиструНДСПродажи(СтруктураШапкиДокумента, Отказ, Заголовок);
		ДвиженияПоРегиструНДСПокупки(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

// Формирование движений по регистру НДСПродажи.
//
// Параметры: 
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегиструНДСПродажи(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = Движения.НДСПродажи.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.
	СтрокаДвижений = ТаблицаДвижений.Добавить();
	
	СтрокаДвижений.Организация = 	СтруктураШапкиДокумента.Организация;
	Если Под0 Тогда
		СтрокаДвижений.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0;
	Иначе
		СтрокаДвижений.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные;
	КонецЕсли;
	
	СтрокаДвижений.Покупатель = 	СтруктураШапкиДокумента.Контрагент;
	
	Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ВводНачальныхОстатковНДС") Тогда
		СтрокаДвижений.СчетФактура = Ссылка;
	Иначе
		СтрокаДвижений.СчетФактура = СтруктураШапкиДокумента.Ссылка;
	КонецЕсли;
	
	СтрокаДвижений.Событие = 		Перечисления.СобытияПоНДСПродажи.ПолученАванс;
	СтрокаДвижений.СтавкаНДС = 		СтавкаНДС;
	
	СтрокаДвижений.СуммаБезНДС = 	Сумма - СуммаНДС;
	СтрокаДвижений.НДС = 			СуммаНДС;
	
	Движения.НДСПродажи.мПериод = Дата;
	Движения.НДСПродажи.мТаблицаДвижений = ТаблицаДвижений;
	Движения.НДСПродажи.ДобавитьДвижение();
	
КонецПроцедуры // ДвиженияПоРегиструНДСПродажи()

// Формирование движений по регистру НДСПокупки.
//
// Параметры: 
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегиструНДСПокупки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = Движения.НДСПокупки.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	// Заполним таблицу движений.
	СтрокаДвижений = ТаблицаДвижений.Добавить();
	
	СтрокаДвижений.Организация = 	СтруктураШапкиДокумента.Организация;
	Если Под0 Тогда
		СтрокаДвижений.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0;
	Иначе
		СтрокаДвижений.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные;
	КонецЕсли;
	
	СтрокаДвижений.Поставщик = 		СтруктураШапкиДокумента.Контрагент;
	
	Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ВводНачальныхОстатковНДС") Тогда
		СтрокаДвижений.СчетФактура = Ссылка;
	Иначе
		СтрокаДвижений.СчетФактура = СтруктураШапкиДокумента.Ссылка;
	КонецЕсли;
	
	СтрокаДвижений.Событие = 		Перечисления.СобытияПоНДСПокупки.ПолученСчетФактура;
	СтрокаДвижений.СтавкаНДС = 		СтавкаНДС;
	
	СтрокаДвижений.СуммаБезНДС = 	Сумма - СуммаНДС;
	СтрокаДвижений.НДС = 			СуммаНДС;
	
	Движения.НДСПокупки.мПериод = Дата;
	Движения.НДСПокупки.мТаблицаДвижений = ТаблицаДвижений;
	Движения.НДСПокупки.ДобавитьДвижение();
	
КонецПроцедуры // ДвиженияПоРегиструНДСПокупки()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Дата = Основание.Дата;
	ДокументОснование = Основание.Ссылка;

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ)

	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);

	СтруктураШапкиДокумента   = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = СформироватьДеревоПолейЗапросаПоШапке();

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	ДокОснование = ДокументОснование.ПолучитьОбъект();
	
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ДокОснование);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = СформироватьДеревоПолейЗапросаПоШапке();
	
	Если ТипЗнч(ДокОснование) = Тип("ДокументОбъект.ВводНачальныхОстатковНДС") Тогда
		// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
		СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ДокОснование, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, );
		
		// Определим доп. параметры счета-фактуры
		Результат = "";
		ПолучитьПараметрыСчетаФактуры(ЭтотОбъект, мВалютаРегламентированногоУчета, Результат);		
		
		СтруктураШапкиДокумента.Вставить("Контрагент", Результат.Контрагент);
		СтруктураШапкиДокумента.Вставить("ДоговорКонтрагента", Результат.Договор);
		
		ТекДоговор = Результат.Договор.ПолучитьОбъект();
		
		СтруктураШапкиДокумента.Вставить("УчетАгентскогоНДС", 	  ТекДоговор.УчетАгентскогоНДС);
		СтруктураШапкиДокумента.Вставить("ВидАгентскогоДоговора", ТекДоговор.ВидАгентскогоДоговора);
		
	Иначе
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "УчетАгентскогоНДС",       "УчетАгентскогоНДС");
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидАгентскогоДоговора",   "ВидАгентскогоДоговора");
		// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
		СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ДокОснование, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, );
		
	КонецЕсли;
	
	// Движения по документу
	Если (Не Отказ)
	   и (ДокументОснование <> Неопределено) Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	//БАЛАНС (04.12.2007)                       
	//
	ЗарегистрироватьОбъект(ЭтотОбъект,Отказ,мПроведениеИзФормы);
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

//БАЛАНС (04.12.2007)                       
//
мПроведениеИзФормы = Ложь; 