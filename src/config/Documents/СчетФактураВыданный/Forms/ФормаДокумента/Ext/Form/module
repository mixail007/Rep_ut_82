////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

Перем мПечатнаяФормаПоУмолчанию;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если НЕ ЗначениеНеЗаполнено(ДокументОснование) Тогда
		Если ДокументОснование.Метаданные().Имя = "РеализацияТоваровУслуг" Тогда
			Если ДокументОснование.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				Отказ = Истина;
				Предупреждение("При передаче на комиссию выписка счета-фактуры не требуется.");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета);
		
		Если ДокументОснование <> Неопределено Тогда
			НаАвансПриИзменении(Истина, ДокументОснование);
		КонецЕсли;
		
	КонецЕсли;

	// Заполнить подменю выбора печатных форм.
	СписокМакетов = ЭтотОбъект.ПолучитьСписокПечатныхФорм();
	УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати,
	                                       СписокМакетов,
	                                       Новый Действие("ДействияФормыДействиеВыбратьПечатнуюФормы"));

	// Установить печатную форму по умолчанию.
	УстановитьКнопкуПечати(ЭтотОбъект.Метаданные().Имя, ЭтаФорма, СписокМакетов, мПечатнаяФормаПоУмолчанию);

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;

	// Если форма открыта из формы документа, то не будем давать 
	// менять основание
	Если (ВладелецФормы <> Неопределено) И (Не ЗначениеНеЗаполнено(ДокументОснование)) или (НаАванс)Тогда
		ЭлементыФормы.ДокументОснование.ТолькоПросмотр = Истина;
	КонецЕсли; 

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
    
	//БАЛАНС (04.12.2007)                       
	//
	мПроведениеИзФормы = Истина;
	
	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 
	
	//Если используется ограничение на редактирвоание документа по ответственному,
	// и пользователю запрещено редактировать чужие документы, тогда открываем только для просмотра
	Если Константы.ИспользоватьОграничениеПоОтветственномуНаПроведение.Получить() Тогда
		Если НЕ ЭтоНовый() И ЭтотОбъект.Ответственный <> глТекущийПользователь Тогда
			Если НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьРедактированиеЧужихДокументов") Тогда
				ЭтаФорма.ТолькоПросмотр = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//+++( 31.07.2014 - для полных прав, кассиров филиалов и тем, у кого РазрешитьРедактированиеЧужихДокументов
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") тогда
		Если НЕ ( ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьРедактированиеЧужихДокументов") 
			     или РольДоступна("ПолныеПрава") 
				 или РольДоступна("Кассир") 
				 ) Тогда
    		ЭтаФорма.ТолькоПросмотр = Истина;
			Предупреждение("Вы не можете вносить никаких изменений в Реализацию!",30);
		КонецЕсли;
	КонецЕсли;
    //+++)

КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()
	Попытка
		Результат = "";
		ПолучитьПараметрыСчетаФактуры(Ссылка, мВалютаРегламентированногоУчета, Результат);
			
		ЭлементыФормы.ТекстКонтрагент.Заголовок = Результат.Контрагент;
		ЭлементыФормы.СуммаДокумента.Заголовок = "" + Результат.СуммаДокумента + " " + Результат.ВалютаДокумента;
		
	Исключение
	КонецПопытки; 
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Если открыли данную форму из формы документа, то там надо поменять текст
	Если  НЕ ЗначениеНеЗаполнено(ВладелецФормы) Тогда

		Если ТипЗнч(ВладелецФормы) = Тип("Форма") тогда

			// Надо поменять текст про счет-фактуру в форме-владельце
			ВладелецФормы.ЗаполнитьТекстПроСчетФактуру();
		КонецЕсли;

	КонецЕсли; 

КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	НапечататьДокументПоУмолчанию(ЭтотОбъект, глТекущийПользователь, мПечатнаяФормаПоУмолчанию);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
//
Процедура ДействияФормыДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = Кнопка.Текст;
		СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		СписокМакетов = ПолучитьСписокПечатныхФорм();
		СтрокаМакетаВСписке = СписокМакетов.НайтиПоЗначению(Кнопка.Имя);
		Если СтрокаМакетаВСписке <> Неопределено Тогда
			Печать(СтрокаМакетаВСписке.Значение);
			СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
			СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;			
			
		Иначе
			СсылкаВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Кнопка.Имя, "_", "-")));
			Печать(СсылкаВнешнейФормы);
			СтруктураМакета.Макет = СсылкаВнешнейФормы;
			СтруктураМакета.ПредставлениеМакета = Кнопка.Текст;
		КонецЕсли;		
		
		мПечатнаяФормаПоУмолчанию = СтруктураМакета.Макет;
		СохранитьТекущуюКнопкуПечати(ЭтотОбъект.Метаданные().Имя, СтруктураМакета);
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

Процедура ДокументОснованиеНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Метаданные.Документы.ОтчетКомиссионераОПродажах.Имя, Метаданные.Документы.ОтчетКомиссионераОПродажах.Синоним);
	СписокТипов.Добавить(Метаданные.Документы.ОтчетКомитентуОПродажах.Имя,    Метаданные.Документы.ОтчетКомитентуОПродажах.Синоним);
	СписокТипов.Добавить(Метаданные.Документы.РеализацияТоваровУслуг.Имя,     Метаданные.Документы.РеализацияТоваровУслуг.Синоним);

	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокТипов,Элемент);

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Элемент.Значение = Документы[ВыбранныйЭлемент.Значение].ПустаяСсылка();

	// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
	// значение было присвоено стандартно.
	ФормаВыбора = Документы[ВыбранныйЭлемент.Значение].ПолучитьФормуВыбора(, Элемент,);

	ФормаВыбора.РежимВыбора = Истина;
	ФормаВыбора.Открыть();

КонецПроцедуры

Процедура ДокументОснованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	НаАвансПриИзменении(Истина, ВыбранноеЗначение);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ДокументОснование <> Неопределено Тогда
		Если НЕ ЗначениеНеЗаполнено(ДокументОснование) Тогда
			Организация = ДокументОснование.Организация;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура НаАвансПриИзменении(Элемент, ВыбранноеЗначение)
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		Если НЕ ЗначениеНеЗаполнено(ВыбранноеЗначение.Организация) Тогда
			Если ЗначениеНеЗаполнено(ВыбранноеЗначение.Организация.Префикс) Тогда
				УстановитьНовыйНомер(?(НаАванс,"А","") + "0");
			Иначе
				УстановитьНовыйНомер(?(НаАванс,"А","") + ВыбранноеЗначение.Организация.Префикс);
			КонецЕсли;
		КонецЕсли;
		
		ТипОснования = ТипЗнч(ВыбранноеЗначение);

		Если ТипОснования = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда
			НомерПлатежноРасчетногоДокумента = ВыбранноеЗначение.НомерВходящегоДокумента;
			ДатаПлатежноРасчетногоДокумента =  ВыбранноеЗначение.ДатаВходящегоДокумента;
			
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
			НомерПлатежноРасчетногоДокумента = ПолучитьНомерНаПечать(ВыбранноеЗначение);
			ДатаПлатежноРасчетногоДокумента =  ВыбранноеЗначение.Дата;
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();
