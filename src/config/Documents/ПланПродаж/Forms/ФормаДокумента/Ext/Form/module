Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мМожноМенятьЦенуВДокументе; // Устанавливается в значение "Истина", если пользователю можно менять цену в документе
Перем мФормаПодбораПоНоменклатурнымГруппам; // Хранит текущую форму подбора номенклатурных групп
Перем мТекущийСценарий; // Хранит текущий сценарий
Перем мКолонкиТовары; // Хранит колонки табличноно поля "Товары"

Перем мПечатнаяФормаПоУмолчанию;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция формирует список запросов для передачи в форму подбора.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора()

	СписокЗапросов      = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");
	СписокЗапросов.Добавить("ОстаткиНоменклатуры", "По остаткам номенклатуры");
	СписокЗапросов.Добавить("ОстаткиВсейНоменклатуры", "По остаткам номенклатуры (вся номенклатура)");
	СписокЗапросов.Добавить("РасходЦеныПлановойСебестоимостиНоменклатуры", "По ценам плановой себестоимости");
	СписокЗапросов.Добавить("РасходЦеныНоменклатуры", "По ценам номенклатуры");
	СписокЗапросов.Добавить("РасходОстаткиИЦеныНоменклатуры", "По остаткам и ценам номенклатуры");

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)
	
	Если Сценарий.ДетализацияПланирования = Перечисления.ДетализацияПланирования.НоменклатурныеГруппы Тогда
		
		ФормаПодбора = Справочники.НоменклатурныеГруппы.ПолучитьФорму("ФормаПодбора", ЭтаФорма, ЭтаФорма);
		
		ФормаПодбора.РазрешитьСоединятьОкно = Истина;
		ФормаПодбора.СоединяемоеОкно = Истина;
		ФормаПодбора.РазрешитьСостояниеПрикрепленное = Истина;
		ФормаПодбора.ПоложениеПрикрепленногоОкна = ВариантПрикрепленияОкна.Право;
		ФормаПодбора.СостояниеОкна = ВариантСостоянияОкна.Прикрепленное;
		ФормаПодбора.РазрешитьСостояниеОбычное = Ложь;
		ФормаПодбора.ЗакрыватьПриВыборе = Ложь;
		ФормаПодбора.МножественныйВыбор = Истина;
		ФормаПодбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
		ФормаПодбора.РежимВыбора = Истина;
		
		ФормаПодбора.Открыть();
		
		мФормаПодбораПоНоменклатурнымГруппам = ФормаПодбора;
		
	Иначе

		СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора();
		ПредставлениеДок = Метаданные().Представление();

		СтруктураПараметровПодбора = Новый Структура();
		СтруктураПараметровПодбора.Вставить("Команда", "ПодборВТабличнуюЧастьТовары");
		СтруктураПараметровПодбора.Вставить("СписокВидовПодбора", СписокВидовПодбора);

		// Параметры запросов.
		СтруктураПараметровПодбора.Вставить("ДатаРасчетов", ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата));
		СтруктураПараметровПодбора.Вставить("ТипЦен", ТипЦен);
		СтруктураПараметровПодбора.Вставить("Склад", Неопределено);
		СтруктураПараметровПодбора.Вставить("Организация", Неопределено);
		СтруктураПараметровПодбора.Вставить("Контрагент", Неопределено);
		СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента", Неопределено);
		СтруктураПараметровПодбора.Вставить("ЕстьЦена", мМожноМенятьЦенуВДокументе);
		СтруктураПараметровПодбора.Вставить("ЕстьСерия", Ложь);
		СтруктураПараметровПодбора.Вставить("ВалютаДокумента", ВалютаДокумента);
		СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + ПредставлениеДок + " № " + Номер);

		ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);
		
	КонецЕсли;

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора номенклатуры данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбораНоменклатура(ТабличнаяЧасть, ЗначениеВыбора)

	Перем СпособЗаполненияЦен, ВалютаЦены, Номенклатура, ЕдиницаИзмерения, Количество, Цена, Характеристика;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены", ВалютаЦены);
	ЗначениеВыбора.Свойство("Номенклатура", Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество", Количество);
	ЗначениеВыбора.Свойство("Цена", Цена);
	ЗначениеВыбора.Свойство("Характеристика", Характеристика);
	
	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	// Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	
	Если Номенклатура.Услуга Тогда
		
		СтруктураОтбора = Новый Структура("Номенклатура", Номенклатура);
		
	Иначе
		
		СтруктураОтбора = Новый Структура("ЕдиницаИзмерения, ХарактеристикаНоменклатуры", ЕдиницаИзмерения, Характеристика);
		
	КонецЕсли;
	
	СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура = Номенклатура;
		СтрокаТабличнойЧасти.Количество = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;

		// Заполняем реквизиты табличной части.
		ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		// Пересчитаем цену в валюту документа.
		Цена = ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, КурсДокумента, КратностьДокумента, Дата);

		СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, СпособЗаполненияЦен, ТипЦен.ЦенаВключаетНДС, УчитыватьНДС, СуммаВключаетНДС, ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

		// Рассчитываем реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	Иначе
		
		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

		// Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	КонецЕсли;

	ЭлементыФормы.Товары.ТекущаяСтрока = СтрокаТабличнойЧасти;
	
	Попытка // На случай, если колонка не видима, отключена программно
		
		ЭлементыФормы.Товары.ТекущаяКолонка = мКолонкиТовары["Количество"];
		
	Исключение
		
	КонецПопытки;

КонецПроцедуры // ОбработкаПодбораНоменклатура()

// Производит заполнение документа переданными из формы подбора номенклатурной группы данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатурной группы;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбораНоменклатурнойГруппы(ТабличнаяЧасть, ЗначениеВыбора)

	Перем НоменклатурнаяГруппа, Количество;
	
	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
	ЗначениеВыбора.Свойство("Количество", Количество);
	
	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	// Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура("Номенклатура, ЕдиницаИзмерения", НоменклатурнаяГруппа, НоменклатурнаяГруппа.ЕдиницаХраненияОстатков);
	
	СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура = НоменклатурнаяГруппа;
		СтрокаТабличнойЧасти.Количество = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = НоменклатурнаяГруппа.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

		// Заполняем реквизиты табличной части.
		ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		// Рассчитываем реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	Иначе
		
		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

		// Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	КонецЕсли;

	ЭлементыФормы.Товары.ТекущаяСтрока = СтрокаТабличнойЧасти;
	
	Попытка // На случай, если колонка не видима, отключена программно
		
		ЭлементыФормы.Товары.ТекущаяКолонка = мКолонкиТовары["Количество"];
		
	Исключение
		
	КонецПопытки;

КонецПроцедуры // ОбработкаПодбораНоменклатурнойГруппы()

// Процедура предназначена для установки текста надписи ДатаПланирования
//
//
Процедура ТекстПериодичности()

	ЭлементыФормы.НадписьДатаПланирования.Заголовок = "Дата планирования (период-ть: "+Сценарий.Периодичность+"):";

КонецПроцедуры // ТекстПериодичности()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	// Колонки налога показываем только тогда, когда его учитываем.
	Если УчитыватьНДС <> мКолонкиТовары.СтавкаНДС.Видимость Тогда
		
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СтавкаНДС, УчитыватьНДС);
		
	КонецЕсли;

	Если УчитыватьНДС <> мКолонкиТовары.СуммаНДС.Видимость Тогда
		
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СуммаНДС, УчитыватьНДС);
		
	КонецЕсли;

	УстановитьДоступКСуммамИКоличеству();
	
	ВидимостьРеквизитаПроект(ЭтотОбъект, ЭлементыФормы, "НадписьПроект,Проект");

КонецПроцедуры // УстановитьВидимость()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = ФорматСумм(ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары"));
	ЭлементыФормы.ВсегоНДС.Значение = ФорматСумм(Товары.Итог("СуммаНДС"));

	ВременнаяСтрока = "";

	Если (НЕ ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента)) И (ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда

		ВременнаяСтрока = ВременнаяСтрока + КратностьДокумента + ВалютаДокумента + " = " + КурсДокумента + мВалютаРегламентированногоУчета + ", ";

	КонецЕсли;

	Если НЕ ЗначениеНеЗаполнено(ТипЦен) Тогда
		
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
		
	Иначе
		
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
		
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если ЗначениеНеЗаполнено(ВалютаДокумента) Тогда
		
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
		
	Иначе
		
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ВалютаДокумента) +"):";
		
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
		
	Иначе
		
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
		
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

Процедура УстановитьДоступКСуммамИКоличеству()
	
	Если ЗначениеНеЗаполнено(мТекущийСценарий) Тогда
		
		Возврат;
		
	КонецЕсли; 

	Если мТекущийСценарий.ДетализацияПланирования <> Перечисления.ДетализацияПланирования.СвойстваНоменклатуры Тогда
		
		// установим для сумм
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.Сумма, мТекущийСценарий.УчетПоСуммам);
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СтавкаНДС, мТекущийСценарий.УчетПоСуммам);
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СуммаНДС, мТекущийСценарий.УчетПоСуммам);
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.Всего, мТекущийСценарий.УчетПоСуммам);
		
		// установим для количества
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.ЕдиницаИзмерения, мТекущийСценарий.УчетПоКоличеству);
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.Коэффициент, мТекущийСценарий.УчетПоКоличеству);
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.Количество, мТекущийСценарий.УчетПоКоличеству);
		
		// установим для цены
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.Цена, мТекущийСценарий.УчетПоСуммам И мТекущийСценарий.УчетПоКоличеству);

		
	Иначе	
		
				// установим для сумм
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.Сумма, мТекущийСценарий.УчетПоСуммам);
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СтавкаНДС, мТекущийСценарий.УчетПоСуммам);
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СуммаНДС, мТекущийСценарий.УчетПоСуммам);
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.Всего, мТекущийСценарий.УчетПоСуммам);
	
	
	КонецЕсли; 

		// установим для количества
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.ЕдиницаИзмерения, Ложь);
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.Коэффициент, Ложь);
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.Количество, мТекущийСценарий.УчетПоКоличеству);
	 	// установим для цены
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.Цена, Ложь);

	
	//// установим для сумм
	//УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.Сумма, мТекущийСценарий.УчетПоСуммам);
	//УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СтавкаНДС, мТекущийСценарий.УчетПоСуммам);
	//УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СуммаНДС, мТекущийСценарий.УчетПоСуммам);
	//УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.Всего, мТекущийСценарий.УчетПоСуммам);

	//// установим для количества
	//УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.ЕдиницаИзмерения, мТекущийСценарий.УчетПоКоличеству);
	//УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.Коэффициент, мТекущийСценарий.УчетПоКоличеству);
	//УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.Количество, мТекущийСценарий.УчетПоКоличеству);

	//// установим для цены
	//УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.Цена, мТекущийСценарий.УчетПоСуммам И мТекущийСценарий.УчетПоКоличеству);

	
	
КонецПроцедуры // УстановитьДоступКСуммамИКоличеству()

Процедура УстановитьДоступКХарактеристикеНоменклатуры()
	
	Если ЗначениеНеЗаполнено(мТекущийСценарий) Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.ХарактеристикаНоменклатуры, мТекущийСценарий.ДетализацияПланирования = Перечисления.ДетализацияПланирования.Номенклатура);
	
КонецПроцедуры // УстановитьДоступКХарактеристикеНоменклатуры()

Процедура УстановитьВозможностьИзмененияВидимости()

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура("Номенклатура, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, ЕдиницаИзмерения");

	УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиТовары, СтруктураКолонок);

КонецПроцедуры // УстановитьВозможностьИзмененияВидимости()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь, Константы.ВалютаУправленческогоУчета.Получить(), "Покупка");
		УстановитьНомерДокумента(ЭтотОбъект);
		
		Если РольДоступна("ДополнительныеПраваВЭД") Тогда
			
			Подразделение = Справочники.Подразделения.НайтиПоКоду("00166");

		КонецЕсли;
		
	КонецЕсли;

	// Заполнить подменю выбора печатных форм.
	СписокМакетов = ЭтотОбъект.ПолучитьСписокПечатныхФорм();
	УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати,
	                                       СписокМакетов,
	                                       Новый Действие("ДействияФормыДействиеВыбратьПечатнуюФормы"));

	// Установить печатную форму по умолчанию.
	УстановитьКнопкуПечати(ЭтотОбъект.Метаданные().Имя, ЭтаФорма, СписокМакетов, мПечатнаяФормаПоУмолчанию);

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	мТекущийСценарий      = Сценарий;

	// Установить видимость колонок "ХарактеристикаНоменклатуры"
	УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВозможностьИзмененияВидимости();
	УстановитьВидимость();

	// установим доступность колонки "Цена" для редактирования
	мМожноМенятьЦенуВДокументе = РазрешитьРедактированиеЦенВДокументах();

	ЭлементыФормы.Товары.Колонки.Цена.ЭлементУправления.ТолькоПросмотр     = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.Товары.Колонки.Сумма.ЭлементУправления.ТолькоПросмотр    = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.Товары.Колонки.СуммаНДС.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	ТекстПериодичности();

	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 

	
КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	ОбновитьПодвал();

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;
	
	Если Источник = мФормаПодбораПоНоменклатурнымГруппам Тогда
		
		ОбработкаПодбораНоменклатурнойГруппы(Товары, ЗначениеВыбора);
		
	Иначе
		
		Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
			
			ЗначениеВыбора.Свойство("Команда", Команда);

			Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
				
				ОбработкаПодбораНоменклатура(Товары, ЗначениеВыбора);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	Если НЕ ЗначениеНеЗаполнено(Сценарий) И Сценарий.ДетализацияПланирования <> Перечисления.ДетализацияПланирования.Номенклатура Тогда
		
		СтруктураНедоступныхРеквизитов = Новый Структура("ТипЦен");
		
	КонецЕсли; 
	
	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета, СтруктураНедоступныхРеквизитов, "Товары");
	
	Если СтруктураЗначений <> Неопределено Тогда
		
		ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "Товары", мВалютаРегламентированногоУчета, , СтруктураЗначений);

		Если СтруктураЗначений.ТекущийТипЦен <> СтруктураЗначений.НовыйТипЦен Тогда
			ОбновитьФормуПодбора("ТипЦен");
		КонецЕсли;

	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели
// табличного поля "Товары", вызывает сервисный механизм для заполнения
// табличной части  "Товары".
//
Процедура КоманднаяПанельТоварыДействиеЗаполнить(Кнопка)
	
	ПомощникПланирования = Обработки.ПомощникПланирования.ПолучитьФорму(, ЭтаФорма);
	
	Если ПомощникПланирования.Открыта() Тогда
		
		ПомощникПланирования.Активизировать();
		
		Если Вопрос("Предыдущая операция заполнения плана продаж не завершена.
			|Завершить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да Тогда
			
			ПомощникПланирования.Закрыть();
			
		КонецЕсли;
		
	КонецЕсли;	
	
	ПомощникПланирования.мДокумент = ЭтотОбъект;
	
	ПомощникПланирования.Открыть();
	
КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнить()

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	НапечататьДокументПоУмолчанию(ЭтотОбъект, глТекущийПользователь, мПечатнаяФормаПоУмолчанию);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
//
Процедура ДействияФормыДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = Кнопка.Текст;
		СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		СписокМакетов = ПолучитьСписокПечатныхФорм();
		СтрокаМакетаВСписке = СписокМакетов.НайтиПоЗначению(Кнопка.Имя);
		Если СтрокаМакетаВСписке <> Неопределено Тогда
			Печать(СтрокаМакетаВСписке.Значение);
			СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
			СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;			
			
		Иначе
			СсылкаВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Кнопка.Имя, "_", "-")));
			Печать(СсылкаВнешнейФормы);
			СтруктураМакета.Макет = СсылкаВнешнейФормы;
			СтруктураМакета.ПредставлениеМакета = Кнопка.Текст;
		КонецЕсли;		
		
		мПечатнаяФормаПоУмолчанию = СтруктураМакета.Макет;
		СохранитьТекущуюКнопкуПечати(ЭтотОбъект.Метаданные().Имя, СтруктураМакета);
		
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	Если ЭтоНовый() Тогда
		
		Вопрос = "Перед началом работы со свойствами необходимо записать документ. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);

		Если Ответ = КодВозвратаДиалога.ОК Тогда
			
			ЗаписатьВФорме();
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;

	Форма = Обработки.ЗначенияСвойствОбъекта.ПолучитьФорму("ЗначенияСвойствОбъекта", ЭтаФорма, Ссылка);

	Форма.НазначениеСвойств      = Новый СписокЗначений;
	Форма.ОбъектОтбораЗначений   = Ссылка;
	Форма.ОбъектОтбораНазначений = Ссылка;

	Форма.НазначениеСвойств.Добавить(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты);
	Форма.НазначениеСвойств.Добавить(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы);

	Форма.ПрочитатьЗаполнитьСвойстваИЗначения();
	Форма.Открыть();

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	Если ЭтоНовый() Тогда
		
		Вопрос = "Перед началом работы с категориями необходимо записать документ. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);

		Если Ответ = КодВозвратаДиалога.ОК Тогда
			
			ЗаписатьВФорме();
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;

	Форма = Обработки.КатегорииОбъекта.ПолучитьФорму("КатегорииОбъекта", ЭтаФорма, Ссылка);

	Форма.НазначениеКатегорий   = Новый СписокЗначений;
	Форма.ОбъектОтбораКатегорий = Ссылка;

	Форма.НазначениеКатегорий.Добавить(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты);
	Форма.НазначениеКатегорий.Добавить(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы);

	Форма.ПрочитатьЗаполнитьКатегорииОбъекта();
	Форма.Открыть();

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ДатаПланирования
// в строке табличной части "Товары".
//
Процедура ДатаПланированияПриИзменении(Элемент)

	ВыровнятьДатуПоНачалуПериода(ДатаПланирования, Сценарий.Периодичность);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода Сценарий
//
Процедура ПриИзмененииСценария(Элемент)
	
	Если (НЕ мТекущийСценарий.ДетализацияПланирования = Сценарий.ДетализацияПланирования) И
		(НЕ (ЗначениеНеЗаполнено(мТекущийСценарий) И Сценарий.ДетализацияПланирования = Перечисления.ДетализацияПланирования.Номенклатура)) И
		(НЕ (ЗначениеНеЗаполнено(Сценарий) И мТекущийСценарий.ДетализацияПланирования = Перечисления.ДетализацияПланирования.Номенклатура)) Тогда
		
		Если Товары.Количество() Тогда
			
			КодВозврата = Вопрос("Выбранный сценарий имеет другую детализацию планирования. Очистить табличную часть ""Товары""?", РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет);
			
			Если КодВозврата = КодВозвратаДиалога.Да Тогда
				
				Товары.Очистить();
				
			Иначе
				
				Сценарий = мТекущийСценарий;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	мТекущийСценарий = Сценарий;
	
	Если мТекущийСценарий.ДетализацияПланирования = Перечисления.ДетализацияПланирования.СвойстваНоменклатуры Тогда
		
		ЭлементыФормы.Товары.Колонки.ЗначениеСвойства.Видимость = Истина;
		ЭлементыФормы.Товары.Колонки.Номенклатура.ТекстШапки = "Свойство";
		
	Иначе				
		
		ЭлементыФормы.Товары.Колонки.ЗначениеСвойства.Видимость = Ложь;
		ЭлементыФормы.Товары.Колонки.Номенклатура.ТекстШапки = "Номенклатура";
		
	КонецЕсли; 


	ТекстПериодичности();
	ВыровнятьДатуПоНачалуПериода(ДатаПланирования, Сценарий.Периодичность);

	// установки по типу планируемых показателей
	УстановитьДоступКСуммамИКоличеству();
	УстановитьДоступКХарактеристикеНоменклатуры();

КонецПроцедуры // ПриИзмененииСценария()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Товары". Формирует данные в колонке "Всего".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ЭлементыФормы.Товары.Колонки.Всего.Видимость Тогда
		ОформлениеСтроки.Ячейки.Всего.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Всего.Текст = ФорматСумм(ДанныеСтроки.Сумма + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС));
	КонецЕсли;

	ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
	цветВалПрибыли = получитьЦветРасхождения(ВаловаяПрибыль, товары.Итог("ВаловаяПрибыль") );
	ЭлементыФормы.ВаловаяПрибыль.ЦветТекстаПоля = цветВалПрибыли;
	
	расчВалПрибыль = ПолучитьВалПрибыльСтроки(ДанныеСтроки); //26.12.2018 - до рублей...
	цветВалПрибыли = получитьЦветРасхождения( окр(ДанныеСтроки.ВаловаяПрибыль,0) , окр(расчВалПрибыль,0) ); 
	ОформлениеСтроки.Ячейки.ВаловаяПрибыль.ЦветТекста = цветВалПрибыли;
	
КонецПроцедуры // ТоварыПриВыводеСтроки()

Функция ПолучитьВалПрибыльСтроки( СтрокаТаблицы )
	Если ПроцентНаценки=0 тогда // 26.12.2018 - Задача № 58230 
		СтрокаТаблицыВаловаяПрибыль = 0;
	иначе	
		коэф = ?(ПроцентНаценки=-100, -999, ПроцентНаценки/(100 + ПроцентНаценки));
		суммаСНДС = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС,0,СтрокаТаблицы.СуммаНДС);
		СтрокаТаблицыВаловаяПрибыль = Окр(суммаСНДС * коэф, 2); // до копеек
	КонецЕсли;
	возврат СтрокаТаблицыВаловаяПрибыль;
КонецФункции

функция получитьЦветРасхождения(Сумма1, Сумма2 );
	Если Сумма1 = Сумма2 тогда //99.9%
		цветВалПрибыли = webЦвета.Черный;
	ИначеЕсли Сумма1 > Сумма2 тогда
		цветВалПрибыли = webЦвета.ТемноКрасный;
	ИначеЕсли Сумма1< Сумма2 тогда
		цветВалПрибыли = webЦвета.ТемноСиний;
	КонецЕсли;
	возврат цветВалПрибыли;
КонецФункции

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	ЕстьСценарий = Истина;
	ПоСвойствам = Ложь;
	
	Если ЗначениеНеЗаполнено(мТекущийСценарий) Тогда
		ЕстьСценарий = Ложь;
	КонецЕсли; 
	
	Если ЕстьСценарий Тогда
		Если мТекущийСценарий.ДетализацияПланирования = Перечисления.ДетализацияПланирования.СвойстваНоменклатуры Тогда
			ПоСвойствам = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
	ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект); //20% или 18%
	
	Если не ПоСвойствам Тогда
		// Выполнить общие действия для всех документов при изменении номенклатуры.
		ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		// Заполняем реквизиты табличной части.
		ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект); 
		ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
	КонецЕсли; 

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	Если ПроцентНаценки<>0 тогда //26.12.2018 - Задача № 58230 
		ПроцентНаценкиПриИзменении(неопределено, Истина);
	КонецЕсли;

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "ХарактеристикаНоменклатуры"
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ТипЗнч(Элемент.ВыборПоВладельцу) = Тип("СправочникСсылка.НоменклатурныеГруппы") ИЛИ Сценарий.ДетализацияПланирования = Перечисления.ДетализацияПланирования.НоменклатурныеГруппы Тогда
		
		СтандартнаяОбработка = Ложь;
		Предупреждение("Для номенклатурных групп не ведется учет по характеристикам!");
		
	КонецЕсли;
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТаблицы = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТаблицы, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, ЭтотОбъект);
	
	СтрокаТаблицы.ВаловаяПрибыль = ПолучитьВалПрибыльСтроки( СтрокаТаблицы );//26.12.2018

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТаблицы = ЭлементыФормы.Товары.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении Суммы.
	ПриИзмененииСуммыТабЧасти(СтрокаТаблицы, ЭтотОбъект, глТекущийПользователь);

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, ЭтотОбъект);

	СтрокаТаблицы.ВаловаяПрибыль = ПолучитьВалПрибыльСтроки( СтрокаТаблицы );// 26.12.2018
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части "Товары".
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока И ЗначениеНеЗаполнено(Элемент.ТекущиеДанные.Номенклатура) Тогда
		
		Если Сценарий.ДетализацияПланирования = Перечисления.ДетализацияПланирования.НоменклатурныеГруппы Тогда
			
			Элемент.ТекущиеДанные.Номенклатура = Справочники.НоменклатурныеГруппы.ПустаяСсылка();
			
		ИначеЕсли  Сценарий.ДетализацияПланирования = Перечисления.ДетализацияПланирования.Номенклатура Тогда
			
			Элемент.ТекущиеДанные.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
			
		ИначеЕсли  Сценарий.ДетализацияПланирования = Перечисления.ДетализацияПланирования.СвойстваНоменклатуры Тогда
						
			Элемент.ТекущиеДанные.Номенклатура = ПланыВидовХарактеристик.СвойстваОбъектов.ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ТоварыПриНачалеРедактирования()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПеретаскивание()

Процедура ТоварыНоменклатураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ТипЗнч(Элемент.Значение) = Тип("ПланВидовХарактеристикСсылка.СвойстваОбъектов") Тогда
		
		ФормаВыбораСвойств = ПланыВидовХарактеристик.СвойстваОбъектов.ПолучитьФормуВыбора();
		ОтборСписка = ФормаВыбораСвойств.ЭлементыФормы.ПланВидовХарактеристикСписок.Значение.Отбор;
		
		
		Если ОтборСписка.Найти("НазначениеСвойства") = Неопределено Тогда 
			
			ОтборСписка.Добавить("НазначениеСвойства");
			
		КонецЕсли;
		
		ОтборСписка["НазначениеСвойства"].Использование = Истина;
		ОтборСписка["НазначениеСвойства"].ВидСравнения = ВидСравнения.Равно;
		ОтборСписка["НазначениеСвойства"].Значение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;
		
		ФормаВыбораСвойств.ЭлементыФормы.ПланВидовХарактеристикСписок.НастройкаОтбора["НазначениеСвойства"].Доступность = Ложь;
		
		ЗначениеВыбора = ФормаВыбораСвойств.ОткрытьМодально();
		
		Если ЗначениеВыбора <> Неопределено Тогда
			
			Элемент.Значение = ЗначениеВыбора;
			
			ЭлементыФормы.Товары.ТекущаяСтрока.ЗначениеСвойства = Справочники.ЗначенияСвойствОбъектов.ПустаяСсылка();
			
			ТоварыНоменклатураПриИзменении(Элемент);
			
		КонецЕсли; 
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли; 
	
	
КонецПроцедуры

Процедура ТоварыЗначениеСвойстваНачалоВыбора(Элемент, СтандартнаяОбработка)
			
	Если ЗначениеНеЗаполнено(Элемент.Значение) Тогда
	
		Элемент.Значение = Справочники.ЗначенияСвойствОбъектов.ПустаяСсылка();
	
	КонецЕсли; 

КонецПроцедуры

//+++( 23.03.2012
Процедура ПроцентНаценкиПриИзменении(Элемент, неСпрашивать = Неопределено )
	
	ВПвТЧ = Товары.Итог("ВаловаяПрибыль");
	СуммаДокумента = Товары.Итог("Сумма") + ?(СуммаВключаетНДС, 0, товары.Итог("СуммаНДС"));  //26.12.2018 Задача № 58230 от Доколина
	
	ВаловаяПрибыль = ?(ПроцентНаценки=-100, -999*СуммаДокумента, СуммаДокумента * ПроцентНаценки / (100 + ПроцентНаценки) );
	Если ВПвТЧ=0 тогда 
		РаспределитьНажатие(неопределено);
	 ИначеЕсли ВПвТЧ<>ВаловаяПрибыль тогда
		Если неСпрашивать=Неопределено тогда
			Если Вопрос("Сумма Валовой прибыли в табличной части: "+строка(ВПвТЧ)+"
						|не совпадает с общей Вал.Прибылью: "+строка(ВаловаяПрибыль)+"
						|""Распределить"" общую Вал.Прибыль по строкам?",РежимДиалогаВопрос.ДаНет, 30 )=КодВозвратаДиалога.Да тогда
				РаспределитьНажатие(неопределено);
	    	КонецЕсли;
		ИначеЕсли неСпрашивать тогда //не спрашивая сразу распределяем!
			РаспределитьНажатие(неопределено);
		КонецЕсли;
	КонецЕсли;
		  
КонецПроцедуры

Процедура ВаловаяПрибыльПриИзменении(Элемент)
	
	СуммаДокумента = товары.Итог("Сумма"); //26.12.2018 Задача № 58230 от Доколина
	
	Если ВаловаяПрибыль>СуммаДокумента*0.90908 тогда
		ВаловаяПрибыль=Цел(СуммаДокумента*0.90908*100)/100;//округляем вниз!
		ПроцентНаценки = 999.9;
		Предупреждение("Достигнута Максимальная Наценка +999.9% !? Валовая прибыль НЕ может быть больше Суммы документа!", 30);
		
	ИначеЕсли ВаловаяПрибыль<-999*СуммаДокумента тогда
		ПроцентНаценки = -99.9;
		ВаловаяПрибыль = -999*СуммаДокумента;
		Предупреждение("Достигнут максимальный убыток (отрицательная Валовая приыбль)!?", 30);
		
	ИначеЕсли ВаловаяПрибыль<-СуммаДокумента тогда
		Если Вопрос("Достигнут максимальный убыток (отрицательная Валовая прибыль), равный Сумме документа!?
			        |Вы действительно уверены, что правильно ввели отрицательную Валовую прибыль?", РежимДиалогаВопрос.ДаНет,0)<>КодВозвратаДиалога.Да тогда
		ПроцентНаценки = -50;
		ВаловаяПрибыль = -СуммаДокумента;
		КонецЕсли;
	ИначеЕсли ВаловаяПрибыль>СуммаДокумента/2 тогда
		Если Вопрос("        Достигнута Наценка более 100%!?
			         |Вы уверены, что правильно ввели Валовую прибыль?",РежимДиалогаВопрос.ДаНет,0)<>КодВозвратаДиалога.Да тогда
			ПроцентНаценки = 100;
			ВаловаяПрибыль = СуммаДокумента/2;
		КонецЕсли;			
	Иначе
		себест = (СуммаДокумента-ВаловаяПрибыль);
		ПроцентНаценки = ?( себест=0, 0,  Окр( 100*ВаловаяПрибыль /себест, 1) );
	КонецЕсли;		
	
	
	ВаловаяПрибыльТЧ = Товары.Итог("ВаловаяПрибыль");
	Если ВаловаяПрибыльТЧ=0 тогда
	     РаспределитьНажатие(неопределено);
	иначеЕсли ВаловаяПрибыльТЧ<>ВаловаяПрибыль тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Сумма валовой прибыли по строкам: "+строка(ВаловаяПрибыльТЧ)+"
					   |не равна Общей Валовой прибыли  : "+строка(ВаловаяПрибыль)+"
					   |""Распределить"" Прибыль по строкам?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
		     РаспределитьНажатие(неопределено);
    	КонецЕсли;
					   
	КонецЕсли;

КонецПроцедуры

Процедура РаспределитьНажатие(Элемент)
	
	//+++ 30.03.2012 - как раньше при проведении...
	СуммаДокумента = Товары.Итог("Сумма") + ?(ссылка.СуммаВключаетНДС,0,товары.Итог("СуммаНДС")); 
	себест  = (СуммаДокумента - ВаловаяПрибыль);
	ПроцПрибыли = ?(себест=0,0, 100 * ВаловаяПрибыль /себест); //ПроцентПрибыли - слишком грубо! до 0.1%
	
	н= 0; максВП=0; сумВП=0;
	
	// Надо расчитать стоимость без НДС.
	Для каждого СтрокаТаблицы Из Товары Цикл
												 
		//+++ 23.03.2012 для полной стоимости с учетом НДС (как СуммаДокумента)
		СтрокаТаблицы.ВаловаяПрибыль = Окр(  (СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС,0,СтрокаТаблицы.СуммаНДС)) * ПроцПрибыли/(100 + ПроцПрибыли), 2); // до копеек
	    сумВП = сумВП + СтрокаТаблицы.ВаловаяПрибыль;
		Если СтрокаТаблицы.ВаловаяПрибыль>максВП тогда   // находим строку с каксимальной ВП
			максВП = СтрокаТаблицы.ВаловаяПрибыль; 
			номМакс = н;
		КонецЕсли;
		н= н+1;
		
	КонецЦикла;
	
		//+++ 23.03.2012 - остаток в строку с максимальной ВП - дает минимальную погрешность
		delta = (ВаловаяПрибыль - сумВП);
		Если delta<>0 тогда
			сообщить("При распределении Валовой прибыли по строкам - погрешность округления составила: "+Формат(delta,"")+" руб. и будет записана в строку №"+строка(номМакс+1)+"  с максимальным значением ВП = "+ строка(Товары[номМакс].ВаловаяПрибыль)+" руб." );
	        Товары[номМакс].ВаловаяПрибыль = Товары[номМакс].ВаловаяПрибыль + delta;
		КонецЕсли;

КонецПроцедуры

Процедура ВаловаяПрибыльРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ВаловаяПрибыльПриИзменении(неопределено);
	
КонецПроцедуры

Процедура ТоварыВаловаяПрибыльПриИзменении(Элемент)
	
	текCтр = ЭлементыФормы.Товары.ТекущиеДанные;
	
	Если текCтр.ВаловаяПрибыль>(текCтр.Сумма + ?(ссылка.СуммаВключаетНДС,0,текCтр.СуммаНДС) ) тогда
		Предупреждение("Валовая прибыль не может быть больше Суммы!",10);
		текCтр.ВаловаяПрибыль = текCтр.Сумма + ?(ссылка.СуммаВключаетНДС, 0, текCтр.СуммаНДС);
	КонецЕсли;
	
	ВаловаяПрибыль = Товары.Итог("ВаловаяПрибыль"); // итоговая сумма
	ВаловаяПрибыльПриИзменении(неопределено);

КонецПроцедуры

Процедура ПроцентНаценкиРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ПроцентНаценкиПриИзменении(неопределено, истина);
КонецПроцедуры

Процедура ВаловаяПрибыльОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	Если Вопрос("Вы уверены, что хотите ОЧИСТИТЬ Валовую прибыль по всем строкам?",
		РежимДиалогаВопрос.ДаНет,0)=КодВозвратаДиалога.Да тогда
		ВаловаяПрибыль = 0;
	Иначе
		ВаловаяПрибыль = товары.Итог("ВаловаяПрибыль");
	КонецЕсли;
	ВаловаяПрибыльПриИзменении(неопределено);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары = ЭлементыФормы.Товары.Колонки;