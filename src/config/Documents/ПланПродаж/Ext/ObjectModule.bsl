Перем мВалютаРегламентированногоУчета Экспорт;

// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьПланаПродаж()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПланПродаж.Номер,
	|	ПланПродаж.Дата,
	|	NULL                                   КАК Организация,
	|	NULL                                   КАК ПредставлениеОрганизации,
	|	ПланПродаж.ДатаПланирования,
	|	ПланПродаж.Сценарий.Периодичность      КАК Период,
	|	ПланПродаж.Сценарий                    КАК Сценарий,
	|	ПланПродаж.Проект                      КАК Проект,
	|	ПланПродаж.Подразделение               КАК Подразделение,
	|	ПланПродаж.Подразделение.Представление КАК ПредставлениеПодразделения,
	|	ПланПродаж.УчитыватьНДС,
	|	ПланПродаж.СуммаВключаетНДС,
	|	ПланПродаж.Ответственный.Представление КАК ОтветственныйПредставление,
	|	ПланПродаж.Ответственный               КАК Ответственный,
	|	ПланПродаж.Товары.(
	|		НомерСтроки,
	|		Номенклатура          КАК Товар,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		NULL КАК Серия,
	|		ВЫБОР КОГДА Номенклатура.НаименованиеПолное ЕСТЬ NULL ТОГДА
	|			Номенклатура.Наименование
	|		ИНАЧЕ
	|			Номенклатура.НаименованиеПолное
	|		КОНЕЦ КАК ПредставлениеТовара,
	|		Количество,
	|		ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|		Цена,
	|		Сумма,
	|		СуммаНДС,
	|		)
	|ИЗ
	|	Документ.ПланПродаж КАК ПланПродаж
	|ГДЕ
	|	ПланПродаж.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланПродаж.Товары.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаТоваров = Шапка.Товары.Выбрать();
	
	ТабДокумент   = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПланПродаж_ПланПродаж";
	Макет         = ПолучитьМакет("ПланПродаж");

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "План продаж");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	ПериодСтр = Строка(Шапка.Период);
	Если      ПериодСтр = "День" тогда
		ПредставлениеПериода = Формат(Шапка.ДатаПланирования, "ДФ=dd.MM.yyyy");
	ИначеЕсли ПериодСтр = "Неделя" тогда
		ДатаНачала    = НачалоНедели(Шапка.ДатаПланирования);
		ДатаОкончания = КонецНедели (Шапка.ДатаПланирования);
		ПредставлениеПериода = ПредставлениеПериода(ДатаНачала,ДатаОкончания, "ФП=Истина");
	ИначеЕсли ПериодСтр = "Месяц" тогда
		ДатаНачала    = НачалоМесяца(Шапка.ДатаПланирования);
		ДатаОкончания = КонецМесяца (Шапка.ДатаПланирования);
		ПредставлениеПериода = ПредставлениеПериода(ДатаНачала,ДатаОкончания, "ФП=Истина");
	ИначеЕсли ПериодСтр = "Квартал" тогда
		ДатаНачала    = НачалоКвартала(Шапка.ДатаПланирования);
		ДатаОкончания = КонецКвартала (Шапка.ДатаПланирования);
		ПредставлениеПериода = ПредставлениеПериода(ДатаНачала,ДатаОкончания, "ФП=Истина");
	ИначеЕсли ПериодСтр = "Год" тогда
		ДатаНачала    = НачалоГода(Шапка.ДатаПланирования);
		ДатаОкончания = КонецГода (Шапка.ДатаПланирования);
		ПредставлениеПериода = ПредставлениеПериода(ДатаНачала,ДатаОкончания, "ФП=Истина");
	Иначе
		ПредставлениеПериода = Формат(Шапка.ДатаПланирования, "ДФ=dd.MM.yyyy");
	КонецЕсли;

	ОбластьМакета.Параметры.ДатаПланирования = ПредставлениеПериода;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
	ВыборкаТоваров = Шапка.Товары.Выбрать();
	Пока ВыборкаТоваров.Следующий() Цикл
		ОбластьСтроки.Параметры.Заполнить(ВыборкаТоваров);
		ОбластьСтроки.Параметры.ПредставлениеТовара = ВыборкаТоваров.ПредставлениеТовара + ПредставлениеСерий(ВыборкаТоваров);
		ОбластьСтроки.Параметры.Всего = ВыборкаТоваров.Сумма+?(Шапка.СуммаВключаетНДС=Истина,0,ВыборкаТоваров.СуммаНДС);

		ТабДокумент.Вывести(ОбластьСтроки);
	КонецЦикла;

	ОбластьМакета = Макет.ПолучитьОбласть("Итоги");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОтветственныйПредставление = Шапка.ОтветственныйПредставление;
	ОбластьМакета.Параметры.ОтветственныйПредставление = "/"+ОтветственныйПредставление + "/";
	ОбластьМакета.Параметры.ИтогоВсего = Товары.Итог("Сумма")+?(Шапка.СуммаВключаетНДС=Истина,0,Товары.Итог("СуммаНДС"));
	ОбластьМакета.Параметры.ИтогоСтоимость     = Товары.Итог("Сумма");
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПланаПродаж()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеНеЗаполнено(Сценарий) Тогда
		Сообщить("Не указан сценарий планирования!");
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "ПланПродаж" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьПланаПродаж();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();
	
	КонецЕсли;

	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;

	СписокМакетов.Добавить("ПланПродаж", "План продаж");

	ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  ВыборкаПоШапкеДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, ВыборкаПоШапкеДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Переименуем колонку "Сумма" в "Стоимость" (как в регистрах).
	ТаблицаТоваров.Колонки.Сумма.Имя = "Стоимость";

	//+++ 23.03.2012  - 30.03.2012 сделана колонка в ТЧ и распределение
	//ТаблицаТоваров.Колонки.Добавить("ВаловаяПрибыль");
	//ПроцПрибыли = 100 * Ссылка.ВаловаяПрибыль / (Ссылка.СуммаДокумента - Ссылка.ВаловаяПрибыль); //ПроцентПрибыли - слишком грубо
	//н= 0; максВП=0; сумВП=0;
		
	
	// Надо расчитать стоимость без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.Стоимость = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
		                                 ВыборкаПоШапкеДокумента.ВалютаУправленческогоУчета, 
		                                 КурсДокумента,
		                                 ВыборкаПоШапкеДокумента.КурсВалютыУправленческогоУчета, 
		                                 КратностьДокумента,
		                                 ВыборкаПоШапкеДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.НДС = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		                                 ВыборкаПоШапкеДокумента.ВалютаУправленческогоУчета, 
		                                 КурсДокумента,
		                                 ВыборкаПоШапкеДокумента.КурсВалютыУправленческогоУчета, 
		                                 КратностьДокумента,
		                                 ВыборкаПоШапкеДокумента.КратностьВалютыУправленческогоУчета);
										 
		//+++ 23.03.2012 для полной стоимости с учетом НДС (как СуммаДокумента)
		//СтрокаТаблицы.ВаловаяПрибыль = Окр(  (СтрокаТаблицы.Стоимость + СтрокаТаблицы.НДС) * ПроцПрибыли/(100 + ПроцПрибыли), 2); // до копеек
		//сумВП = сумВП + СтрокаТаблицы.ВаловаяПрибыль;
		//Если СтрокаТаблицы.ВаловаяПрибыль>максВП тогда
		//	максВП = СтрокаТаблицы.ВаловаяПрибыль; 
		//	номМакс = н;
		//КонецЕсли;
		//н= н+1;
		
	КонецЦикла;
	
		//+++ 23.03.2012 - остаток в строку с максимальной ВП - дает минимальную погрешность
		//delta = (Ссылка.ВаловаяПрибыль - сумВП);
		//Если delta<>0 тогда
		//	сообщить("При распределении Валовой прибыли по строкам - погрешность округления составила: "+Формат(delta,"")+" руб. и будет записана в строку №"+строка(номМакс+1)+"  с максимальным значением ВП = "+ строка(ТаблицаТоваров[номМакс].ВаловаяПрибыль)+" руб." );
		//	ТаблицаТоваров[номМакс].ВаловаяПрибыль = ТаблицаТоваров[номМакс].ВаловаяПрибыль + delta;
		//КонецЕсли;
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВалютаДокумента, КурсДокумента, КратностьДокумента,
	                        					 |ДатаПланирования, Сценарий");

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, ВыборкаПоШапкеДокумента, 
	                                              Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура");
	
	Если Сценарий.УчетПоКоличеству Тогда
		СтруктураОбязательныхПолей.Вставить("Количество");
	КонецЕсли;
	Если Сценарий.УчетПоСуммам Тогда
		СтруктураОбязательныхПолей.Вставить("Сумма");
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  ВыборкаПоШапкеДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, ТаблицаПоТоварам, Отказ, Заголовок);

	// ПО РЕГИСТРУ ПланыПродаж.
	
	НаборДвижений = Движения.ПланыПродаж;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	// Заполним таблицу движений.
	ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
	
	Если НЕ Сценарий.УчетПоКоличеству Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(0, "Количество");
	КонецЕсли;
	
	Если НЕ Сценарий.УчетПоСуммам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(0, "Стоимость");
		ТаблицаДвижений.ЗаполнитьЗначения(0, "НДС");
		ТаблицаДвижений.ЗаполнитьЗначения(0, "ВаловаяПрибыль");//+++ 23.03.2012
	КонецЕсли;
	
	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Сценарий,      "Сценарий");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение, "Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(Проект,        "Проект");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,        "ДокументПланирования");
	
	НаборДвижений.мПериод            = ДатаПланирования;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.ПланыПродаж.ДобавитьДвижение();
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары");
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 


КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	ГраницаФиксации = ПолучитьГраницуФиксацииПериодов(Перечисления.ВидыПланирования.Продажи, Подразделение, Проект, Сценарий);

	Если ДатаПланирования <= ГраницаФиксации Тогда
		
		ОшибкаПриПроведении("Документ не может быть проведен, поскольку дата планирования находится в закрытом периоде (до " + Формат(ГраницаФиксации, "ДФ=dd.MM.yyyy; ДЛФ=D") + ").", Отказ);
		Возврат;
		
	КонецЕсли;

	
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = СформироватьДеревоПолейЗапросаПоШапке();
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = СформироватьСтруктуруПолейТовары();
	СтруктураПолей.Вставить("Набор", "Номенклатура.Набор");
	СтруктураПолей.Удалить("СерияНоменклатуры");
	
	СтруктураПолей.Вставить("ЗначениеСвойства", "ЗначениеСвойства");
	СтруктураПолей.Вставить("Менеджер", "Менеджер");

	Если Сценарий.ДетализацияПланирования = Перечисления.ДетализацияПланирования.СвойстваНоменклатуры
		ИЛИ  Сценарий.ДетализацияПланирования = Перечисления.ДетализацияПланирования.НоменклатурныеГруппы Тогда
		
		СтруктураПолей.Удалить("Количество");
		СтруктураПолей.Вставить("Количество", "Количество");
		
	КонецЕсли; 
 

	РезультатЗапросаПоТоварам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	
	//+++ 30.03.2012
	ВПвТЧ = Товары.Итог("ВаловаяПрибыль");
	Если Ссылка.ВаловаяПрибыль<>ВПвТЧ тогда
		Предупреждение("Валовая прибыль в табл.части: " +Строка(ВПвТЧ)+"
		|не соответствует общей Валовой прибыли: "+строка(Ссылка.ВаловаяПрибыль)+"
		|Выполните ""Распределение"" общей Валовой прибыли по строкам Табл.Части
		|или исправьте сумму Валовой прибыли в строках Табл.Части.
		|Проведение отменено!");
		Отказ = истина; 
	КонецЕсли;	
	
	
	// Движения по документу
	Если Не Отказ Тогда

		ДвиженияПоРегистрам(РежимПроведения, ТаблицаПоТоварам, Отказ, Заголовок);

	КонецЕсли; 

КонецПроцедуры	// ОбработкаПроведения


мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
