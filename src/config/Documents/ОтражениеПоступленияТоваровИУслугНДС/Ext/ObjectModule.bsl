Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, ДоговорКонтрагента");

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаТоваров.Колонки.Добавить("Период");
	ТаблицаТоваров.Колонки.Добавить("Активность");
	ТаблицаТоваров.Колонки.Добавить("ВидЦенности");
	ТаблицаТоваров.Колонки.Добавить("Организация");
	ТаблицаТоваров.Колонки.Добавить("Поставщик");
	ТаблицаТоваров.Колонки.Добавить("Событие");
	ТаблицаТоваров.Колонки.Добавить("СчетФактура");

	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,       "Организация");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент,        "Поставщик");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка, 			"СчетФактура");
	ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком, "Событие");

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ТоварыИУслуги";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма, СтавкаНДС, СуммаНДС");

	// Теперь вызовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Процедура выполняет движения по регистрам
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)

	ТаблицаПоТоварам.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.Товары, "ВидЦенности");
	
	ПараметрыУчетнойПолитики = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.ПолучитьПоследнее(СтруктураШапкиДокумента.Ссылка.Дата, Новый Структура("Организация", СтруктураШапкиДокумента.Организация));
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра НДСПокупки.
	ТаблицаДвиженийПокупки = Движения.НДСПокупки.Выгрузить();
	ТаблицаДвиженийПокупки.Очистить();
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра НДСПартииТоваров.
	ТаблицаДвиженийПартии = Движения.НДСПартииТоваров.Выгрузить();
	ТаблицаДвиженийПартии.Очистить();
	
	Для Каждого СтрокаДок Из ТаблицаПоТоварам Цикл
		
		Если ЗначениеНеЗаполнено(СтруктураШапкиДокумента.РасчетныйДокумент) Тогда
			// Если это ввод ручной записи в книгу покупок
			СтрокаДвижения = ТаблицаДвиженийПокупки.Добавить();
			СтрокаДвижения.Организация = СтруктураШапкиДокумента.Организация;
			СтрокаДвижения.ВидЦенности = СтрокаДок.ВидЦенности;

			СтрокаДвижения.Поставщик   = СтруктураШапкиДокумента.Контрагент;
			СтрокаДвижения.СчетФактура = СтруктураШапкиДокумента.Ссылка;

			СтрокаДвижения.Событие     = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету;
			СтрокаДвижения.СтавкаНДС   = СтрокаДок.СтавкаНДС;
			СтрокаДвижения.СуммаБезНДС = СтрокаДок.СуммаБезНДС;
			СтрокаДвижения.НДС         = СтрокаДок.НДС;
			
		Иначе
			// Это ввод начальных остатков.
			// нужно выполнить движение по регистру "НДСПартииТоваров"
			СтрокаДвижения2 = ТаблицаДвиженийПартии.Добавить();

			СтрокаДвижения2.Организация = 	СтруктураШапкиДокумента.Организация;
			СтрокаДвижения2.Номенклатура = 	СтрокаДок.Номенклатура;
			СтрокаДвижения2.Поставщик   = 	СтруктураШапкиДокумента.Контрагент;
			СтрокаДвижения2.СчетФактура = 	СтруктураШапкиДокумента.Ссылка;
			
			СтрокаДвижения2.СтавкаНДС   = 	СтрокаДок.СтавкаНДС;
			СтрокаДвижения2.ДокументОприходования = СтруктураШапкиДокумента.Ссылка;
			
			СтрокаДвижения2.Количество = 	СтрокаДок.Количество;
			СтрокаДвижения2.Стоимость = 	СтрокаДок.СуммаБезНДС;
			СтрокаДвижения2.НДС       = 	СтрокаДок.НДС;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если (ТипЗнч(СтруктураШапкиДокумента.РасчетныйДокумент) = Тип("ДокументСсылка.ВводНачальныхОстатковНДС"))
	   и ( НЕ ЗначениеНеЗаполнено(СтруктураШапкиДокумента.РасчетныйДокумент) ) Тогда
		
		ДокОснованиеОбъект = СтруктураШапкиДокумента.РасчетныйДокумент.ПолучитьОбъект();
		
		СтруктураПолей = Новый Структура;
		СтруктураПолей.Вставить("СчетФактура", "СчетФактура");
		СтруктураПолей.Вставить("СуммаБезНДС", "СуммаБезНДС");
		СтруктураПолей.Вставить("НДС", 		   "НДС");
		СтруктураПолей.Вставить("СуммаБезНДСОплата", "СуммаБезНДСОплата");
		СтруктураПолей.Вставить("НДСОплата", 		 "НДСОплата");

		РезультатЗапросаПоТабЧасти = СформироватьЗапросПоТабличнойЧасти(ДокОснованиеОбъект, "ДанныеПоСФ", СтруктураПолей);
		
		СформироватьДвиженияВводаОстатковПоРегиструВзаиморасчетыСПоставщикамиДляНДС(СтруктураШапкиДокумента, РезультатЗапросаПоТабЧасти.Выгрузить(), Отказ, Заголовок);
		
	КонецЕсли;
	
	Если ТаблицаДвиженийПокупки.Количество() > 0 Тогда
		Движения.НДСПокупки.мПериод          = Дата;
		Движения.НДСПокупки.мТаблицаДвижений = ТаблицаДвиженийПокупки;
		Движения.НДСПокупки.ДобавитьДвижение();
		Движения.НДСПокупки.Записать();
	КонецЕсли;
	
	Если ТаблицаДвиженийПартии.Количество() > 0 Тогда
		Движения.НДСПартииТоваров.мПериод          = Дата;
		Движения.НДСПартииТоваров.мТаблицаДвижений = ТаблицаДвиженийПартии;
		Движения.НДСПартииТоваров.ВыполнитьПриход();
		Движения.НДСПартииТоваров.Записать();
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура формирования движений по регистру Взаиморасчеты с поставщиками для НДС при вводе
// остатков НДС по полученным ценностям.
//
Процедура СформироватьДвиженияВводаОстатковПоРегиструВзаиморасчетыСПоставщикамиДляНДС(СтруктураШапкиДокумента, ТаблицаДокументаОснования, Отказ, Заголовок)
	
	ТаблицаДвиженийПоставщики = Движения.ВзаиморасчетыСПоставщикамиДляНДС.Выгрузить();
	ТаблицаДвиженийПоставщики.Очистить();
	
	ТаблицаДокументаОснования.Свернуть("СчетФактура", "СуммаБезНДС, НДС, СуммаБезНДСОплата, НДСОплата");
	
	СтрокаДок = ТаблицаДокументаОснования.Найти(СтруктураШапкиДокумента.Ссылка, "СчетФактура");
	
	Если СтрокаДок <> Неопределено Тогда
		СтрокаДвижения = ТаблицаДвиженийПоставщики.Добавить();
		
		СтрокаДвижения.Организация = СтруктураШапкиДокумента.Организация;
		СтрокаДвижения.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
		СтрокаДвижения.Сделка = СтруктураШапкиДокумента.Сделка;
		СтрокаДвижения.Сумма = (СтрокаДок.СуммаБезНДС + СтрокаДок.НДС) - (СтрокаДок.СуммаБезНДСОплата + СтрокаДок.НДСОплата);
		
	КонецЕсли;
		
	Если ТаблицаДвиженийПоставщики.Количество() > 0 Тогда
		Движения.ВзаиморасчетыСПоставщикамиДляНДС.мПериод          = Дата;
		Движения.ВзаиморасчетыСПоставщикамиДляНДС.мТаблицаДвижений = ТаблицаДвиженийПоставщики;
		Движения.ВзаиморасчетыСПоставщикамиДляНДС.ВыполнитьПриход();
		Движения.ВзаиморасчетыСПоставщикамиДляНДС.Записать();
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияВводаОстатковПоРегиструВзаиморасчетыСПоставщикамиДляНДС()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Количество", 	"Количество");
	СтруктураПолей.Вставить("СуммаБезНДС", 	"Сумма");
	СтруктураПолей.Вставить("СтавкаНДС", 	"СтавкаНДС");
	СтруктураПолей.Вставить("НДС", 			"СуммаНДС");

	РезультатЗапросаПоТоварам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ТоварыИУслуги", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 

КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
