////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 
Перем мОтражатьВРегламентированномУчете;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

Перем мПечатнаяФормаПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

 Перем мКолонкиТовары;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	//мДеревоМакетов = ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	//УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	//УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	//Если Не мПодменюПечати = Неопределено Тогда
	//	СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	//КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	//мКнопкиЗаполненияТЧ = ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	//СоответствиеТЧ = Новый Соответствие;
	//СоответствиеТЧ.Вставить(ЭлементыФормы.СуммыДолга,ЭлементыФормы.КоманднаяПанельСуммыДолга.Кнопки.ПодменюЗаполнить);
	//СоответствиеТЧ.Вставить(ЭлементыФормы.СуммыДолгаУменьшение,ЭлементыФормы.КоманднаяПанельСуммыДолгаУменьшение.Кнопки.ПодменюЗаполнить);
	//
	//СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры




////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает видимость реквизитов субконто и подписей к ним.
//
Процедура УстановитьВидимость()

ЭлементыФормы.НадписьСкладПолучатель.Видимость = ВидОперации=Перечисления.ВидыОперацийПоОтветственномуХранению.ПеремещениеМеждуСкладами;
ЭлементыФормы.СкладПолучатель.Видимость = ВидОперации=Перечисления.ВидыОперацийПоОтветственномуХранению.ПеремещениеМеждуСкладами;

ЭлементыФормы.НадписьКонтрагент.Доступность=ЗначениеНеЗаполнено(ДокументОснование);
ЭлементыФормы.Контрагент.Доступность=ЗначениеНеЗаполнено(ДокументОснование);

// договор контрагента имеет место только тогда когда есть Заказ
ЭлементыФормы.НадписьДоговорКонтрагента.Видимость=не ЗначениеНеЗаполнено(ДокументОснование)
ИЛИ  ВидОперации = Перечисления.ВидыОперацийПоОтветственномуХранению.ПеремещениеМеждуСкладами ;
ЭлементыФормы.ДоговорКонтрагента.Видимость=не ЗначениеНеЗаполнено(ДокументОснование)
ИЛИ  ВидОперации = Перечисления.ВидыОперацийПоОтветственномуХранению.ПеремещениеМеждуСкладами ;

//25.02.2016  для бухгалтерии - открыт доступ всегда, + основной менеджер тоже может менять
Если (ЗначениеЗаполнено(Контрагент) и Контрагент.ОсновнойМенеджерКонтрагента = глТекущийПользователь)
	   ИЛИ РольДоступна("ПолныеПрава") Тогда
	ЭлементыФормы.ДоговорКонтрагента.Доступность = Истина;
Иначе
	ЭлементыФормы.ДоговорКонтрагента.Доступность=(ВидОперации=Перечисления.ВидыОперацийПоОтветственномуХранению.ПеремещениеМеждуСкладами);
КонецЕсли;

КонецПроцедуры // УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	//БАЛАНС (15.03.2010)                       
	//
	мПроведениеИзФормы = Истина;
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		//ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь,,,ПараметрОбъектКопирования,ПараметрОснование);
        ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь, Константы.ВалютаРегламентированногоУчета.Получить(), "ОперацияПоОтветственномуХранению");
		
		Если ЗначениеНеЗаполнено(ДокументОснование) Тогда
		ВидОперации=Перечисления.ВидыОперацийПоОтветственномуХранению.Поступление;
		КОнецЕсли;
		УстановитьНомерДокумента(ЭтотОбъект);
       
	КонецЕсли;
    //УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);
   СписокМакетов = ЭтотОбъект.ПолучитьСписокПечатныхФорм();
	УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати,
	                                       СписокМакетов,
	                                       Новый Действие("КоманднаяПанельФормыДействиеВыбратьПечатнуюФормы"));

	// Установить печатную форму по умолчанию.
	УстановитьКнопкуПечати(ЭтотОбъект.Метаданные().Имя, ЭтаФорма, СписокМакетов, мПечатнаяФормаПоУмолчанию);


	

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента             = Дата;

	// Установить видимость элементов
	УстановитьВидимость();

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");


	УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиТовары, СтруктураКолонок);
	
	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	ВывестиНадписи();
    
	
	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 

	
КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийПоОтветственномуХранению[Кнопка.Имя];
	КонецЕсли;

	// Отобразить в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьНомерДокумента(ЭтотОбъект);
    //УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);

	
	УстановитьВидимость();
	
КонецПроцедуры // ОрганизацияПриИзменении()


// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

Процедура ВывестиНадписи() 

КонецПроцедуры



// Процедура - обработчик события "ПриНачалеРедактирования" строки табличного поля
// "СуммыДолга"
//

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	//ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	//Если НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
	//	
	//	УстановитьКнопкиПечати();
	//	
	//КонецЕсли; 
	
	
КонецПроцедуры


 
Процедура ОбновлениеОтображения()
	ВывестиНадписи();
КонецПроцедуры

Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры


Процедура КоманднаяПанель1ДействиеЗаполнитьПоОстаткам(Кнопка)
	Если ЗначениеНеЗаполнено(ДоговорКонтрагента) или ЗначениеНеЗаполнено(Контрагент) Тогда
		Сообщить("Необходимо указать поклажедателя и договор");
		Возврат;
	КонецЕсли;	
	
	Товары.Очистить();
	
	Запрос=Новый Запрос;
	Запрос.Текст= "ВЫБРАТЬ
	              |	ТоварыНаОтветственномХраненииОстатки.Номенклатура КАК Номенклатура,
	              |	ТоварыНаОтветственномХраненииОстатки.КоличествоОстаток КАК Количество,
	              |	ТоварыНаОтветственномХраненииОстатки.Склад КАК Склад
	              |ИЗ
	              |	РегистрНакопления.ТоварыНаОтветственномХранении.Остатки(,Контрагент = &Контрагент
	              |				И ДоговорКонтрагента = &ДоговорКонтрагента
				  |			   //Отбор по складам подразделения
				  | ) КАК ТоварыНаОтветственномХраненииОстатки
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	Склад,
	              |	Номенклатура
	              |АВТОУПОРЯДОЧИВАНИЕ";
				  
	Запрос.УстановитьПараметр("Контрагент",Контрагент);				  
	Запрос.УстановитьПараметр("ДоговорКонтрагента",ДоговорКонтрагента);				  
	
//12.11.2014 отбор по складам только 1 подразделения
Если НЕ Подразделение.ОбособленноеПодразделение тогда	
	Запрос.Текст = стрЗаменить(Запрос.Текст, "//Отбор по складам подразделения","И НЕ Склад.Транзитный");
Иначе
	Запрос.Текст = стрЗаменить(Запрос.Текст, "//Отбор по складам подразделения","И (Склад.Транзитный И Склад.Подразделение = &Подразделение)");
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
КонецЕсли;

    Товары.Загрузить(Запрос.Выполнить().Выгрузить());			
КонецПроцедуры

Процедура КоманднаяПанель1ДействиеЗаполнитьПоЗаказу(Кнопка)
	
	Если Товары.Количество()>0 тогда
		Если Вопрос("Перед заполнением все текущие строки будут удалены!
			|Продолжить заполнение по документу-основанию?",РежимДиалогаВопрос.ДаНет,0)<>КодВозвратаДиалога.Да тогда
			возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	Товары.Очистить();
	ОбработкаЗаполнения(ДокументОснование); // как при вводе на основании
	
КонецПроцедуры


 Процедура КоманднаяПанельФормыДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = Кнопка.Текст;
		СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		СписокМакетов = ПолучитьСписокПечатныхФорм();
		СтрокаМакетаВСписке = СписокМакетов.НайтиПоЗначению(Кнопка.Имя);
		Если СтрокаМакетаВСписке <> Неопределено Тогда
			Печать(СтрокаМакетаВСписке.Значение);
			СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
			СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;			
			
		Иначе
			СсылкаВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Кнопка.Имя, "_", "-")));
			Печать(СсылкаВнешнейФормы);
			СтруктураМакета.Макет = СсылкаВнешнейФормы;
			СтруктураМакета.ПредставлениеМакета = Кнопка.Текст;
		КонецЕсли;		
		
		мПечатнаяФормаПоУмолчанию = СтруктураМакета.Макет;
		СохранитьТекущуюКнопкуПечати(ЭтотОбъект.Метаданные().Имя, СтруктураМакета);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельФормыДействиеВыбратьПечатнуюФормы()

//Процедура ДанныеПоПогрузкеПередНачаломДобавления(Элемент, Отказ, Копирование)
//	
//	
//	Если (ОбщийВес = 0) Тогда
//		ОбщийВес = РассчитатьВесПоТоварам();
//	КонецЕсли;
//	
//	ПоставитьВес();	
//	

//КонецПроцедуры

 Процедура ПоставитьВес()
КоличествоСтрок=ДанныеПоПогрузке.Количество();	

Для сч=0 по КоличествоСтрок-1 Цикл
ДанныеПоПогрузке[сч].Вес=ОбщийВес/КоличествоСтрок;	
КонецЦикла;	

КонецПроцедуры 

//Процедура ДанныеПоПогрузкеПослеУдаления(Элемент)
//	
//		ОбщийВес = РассчитатьВесПоТоварам();
//		Для й=0 по ДанныеПоПогрузке.Количество()-1 Цикл
//			Стр = ДанныеПоПогрузке.Получить(й);
//			Стр.Вес = Окр(ОбщийВес/ДанныеПоПогрузке.Количество(),3,0);
//		КонецЦикла;
//		ПоставитьВес();

//КонецПроцедуры

//Процедура ДанныеПоПогрузкеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
//	Если (НоваяСтрока) Тогда 
//		
//		ОбщийВес = РассчитатьВесПоТоварам();
//		Для й=0 по ДанныеПоПогрузке.Количество()-1 Цикл
//			Стр = ДанныеПоПогрузке.Получить(й);
//			Стр.Вес = Окр(ОбщийВес/ДанныеПоПогрузке.Количество(),3,0);
//		КонецЦикла;
//		
//	КонецЕсли;

//	ТекущаяСтр = Элемент.ТекущиеДанные;
//	НомерСтр = ТекущаяСтр.Номерстроки;
//	Если (ТекущаяСтр.Бригадир = Истина) Тогда
//		Для й=0 по ДанныепоПогрузке.Количество()-1 Цикл
//			Если (й<>(НомерСтр-1)) Тогда
//				Стр = ДанныепоПогрузке.Получить(й);
//				Стр.Бригадир = Ложь;
//			КонецЕсли;	
//		КонецЦикла;
//	КонецЕсли;

//КонецПроцедуры

Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	ЗаполнитьВесВТабличнойЧасти(СтрокаТабличнойЧасти);
КонецПроцедуры

Процедура КонтрагентПриИзменении(Элемент)
	ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
КонецПроцедуры

Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;

	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
	                                        СписокВидовДоговоров, СтандартнаяОбработка);
КонецПроцедуры


// не удалять
Процедура КоманднаяПанельДанныеПоПогрузкеЗаполнить(Кнопка)
	
	ЗаполнитьВесНетто(Товары);
	ОбщийВес=Товары.Итог("Вес");
	
	ДанныеПоПогрузке.Очистить();
	
	//+++ перераспределение КТУ по грузчикам по группам складов
	
	//+++ 23.05.2013 - если Да - то по складам, иначе - все!
		яштРезервыПоТоварам.ЗаполнениеКТУГрузчиков(ЭтотОбъект);
		Если ДанныеПоПогрузке.Количество()>0 тогда
			возврат;
		КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|Ссылка Грузчик
	|ИЗ
	|	Справочник.ФизическиеЛица
	|ГДЕ Официальный";
	
	Выборка=Запрос.Выполнить().Выбрать();
	КоличествоСтрок=Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл
		Строка=ДанныеПоПогрузке.Добавить();
		Строка.Грузчик=Выборка.Грузчик;
		Строка.Вес=1;
	КонецЦикла;	
	
КонецПроцедуры


Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	ЗаполнитьВесНетто(Товары);
	ОбщийВес=Товары.Итог("Вес");
КонецПроцедуры

Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)
	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);
КонецПроцедуры

Процедура ТоварыАдресноеХранениеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	 ПоказатьКодАртикул(ЭлементыФормы.ТоварыАдресноеХранение.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);	 	
	
КонецПроцедуры

 //// +++ 27.12.2012 
// Процедура вызывается при выборе пункта "Из терминала сбора данных"
// меню кнопки "Заполнить" командной панели табличного поля "ТоварыАдресноеХранение"
//
Процедура КоманднаяПанельАдресноеХранениеИзТерминалаСбораДанных(Кнопка)
Перем Ответ, Данные, ВремТовар, ВремЕдиница;

	//+++ переподключение принудительное
	Если глТорговоеОборудование = Неопределено или глТорговоеОборудование.млТерминал.Количество() = 0 Тогда
		глТорговоеОборудование.ПодключитьОборудование();
	КонецЕсли;
	
	Если глТорговоеОборудование = Неопределено или глТорговоеОборудование.млТерминал.Количество() = 0 Тогда
		Предупреждение("Терминал сбора данных не подключен!");
	Иначе
		Если глТорговоеОборудование.млТерминал.Количество() = 1 Тогда

			РезультатВыбора = глТорговоеОборудование.млТерминал[0];

		Иначе

			СписокТерминаловСбораДанных = Новый СписокЗначений;
			Для Каждого ТерминалСбораДанных из глТорговоеОборудование.млТерминал Цикл
				СписокТерминаловСбораДанных.Добавить(ТерминалСбораДанных, ТерминалСбораДанных.Модель);
			КонецЦикла;
			РезультатВыбора = СписокТерминаловСбораДанных.ВыбратьЭлемент("Выберите терминал сбора данных");
			Если РезультатВыбора = Неопределено Тогда
				Возврат;
			КонецЕсли;
			РезультатВыбора = РезультатВыбора.Значение;

		КонецЕсли;
		
		нетАдреса = ЛОЖЬ; //+++ это ВАЖНО !!!
		Ответ = глТорговоеОборудование.ЗагрузитьДанныеИзТерминалаСбораДанных(РезультатВыбора, Данные, нетАдреса);
		
		Если Не ПустаяСтрока(Ответ) Тогда
			Предупреждение(Ответ);
		ИначеЕсли Данные.Количество() = 0 Тогда
			Предупреждение("Из терминала сбора данных не загружено ни одного товара...");
		Иначе
			
			i=0;    
			пустойСклад = справочники.Склады.ПустаяСсылка();
	//--------------------------------------------------------------------------------------------------------------------------		
			Для Каждого СтрокаДанных Из Данные Цикл
				i=i+1;
				//+++ Если глТорговоеОборудование.ПолучитьТоварПоШтрихкоду(СтрокаДанных.Штрихкод, ВремТовар) Тогда
				ВремТовар = Справочники.Номенклатура.НайтиПоКоду(СтрокаДанных.Код);  //+++
				//09.11.2015 - Аксессуары
				Если НЕ ЗначениеЗаполнено(ВремТовар) тогда
					ВремТоварТабл = новый ТаблицаЗначений;
					глТорговоеОборудование.ПолучитьТоварПоШтрихкоду(СтрокаДанных.Штрихкод, ВремТоварТабл);
					Если ВремТоварТабл.Количество()>0 тогда
						ВремТовар = ВремТоварТабл[0].Номенклатура;
					КонецЕсли;	

					#Если Клиент тогда 
					Если ЗначениеЗаполнено(ВремТовар) тогда 
						Сообщить("По ШК: "+СокрЛП(СтрокаДанных.Штрихкод)+" Найден товар: "+строка(ВремТовар.Код)+" "+строка(ВремТовар), СтатусСообщения.Информация);
					иначе	
						Сообщить("По ШК: "+СокрЛП(СтрокаДанных.Штрихкод)+" НЕ Найден товар!", СтатусСообщения.Внимание);
					КонецЕсли;	
					#КонецЕсли	
				КонецЕсли;	

				Если ЗначениеЗаполнено(ВремТовар) тогда
					
					//+++ 24.12.2012
					Адрес = справочники.АдресаХранения.НайтиПоКоду(СтрокаДанных.Адрес);
					Если НЕ ЗначениеЗаполнено(Адрес) тогда
						сообщить(строка(i)+" строка - Нет Адреса Хранения: "+СтрокаДанных.Адрес, СтатусСообщения.Внимание);
					КонецЕсли;
					
					СтруктураОтбора = Новый Структура();
					СтруктураОтбора.Вставить("Номенклатура", ВремТовар);
					СтруктураОтбора.Вставить("АдресХранения",Адрес);
					
					СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТоварыАдресноеХранение, СтруктураОтбора);  //+++
					
					Если СтрокаТабличнойЧасти <> Неопределено Тогда
 						// Нашли, увеличиваем количество в первой найденной строке.
						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаДанных.Количество;
 					Иначе
 						// Не нашли - добавляем новую строку.
						СтрокаТабличнойЧасти = ТоварыАдресноеХранение.Добавить();
						СтрокаТабличнойЧасти.Номенклатура           = ВремТовар;  //+++
						
						СтрокаТабличнойЧасти.Количество             = СтрокаДанных.Количество;
						
						СтрокаТабличнойЧасти.АдресХранения			= Адрес;
						СтрокаТабличнойЧасти.Склад					= ?(ЗначениеЗаполнено(Адрес), Адрес.Владелец, пустойСклад );
						
						// Выполнить общие действия для всех документов при изменении номенклатуры.
						ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

					КонецЕсли;

					// Рассчитать реквизиты табличной части.
					//РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
					//РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

					ЭлементыФормы.ТоварыАдресноеХранение.ТекущаяСтрока  = СтрокаТабличнойЧасти;
				КонецЕсли;
			КонецЦикла;

			Ответ = Вопрос("Очистить память терминала сбора данных?", РежимДиалогаВопрос.ДаНет,60,КодВозвратаДиалога.Да,"Очистка ТСД");
			Если Ответ = КодВозвратаДиалога.Да Тогда
				СтрокаТаблицыТерминала = неопределено;
				Если глТорговоеОборудование = Неопределено 
					или глТорговоеОборудование.млТерминал.Количество()>0 тогда
					СтрокаТаблицыТерминала = новый Структура; //+++ 09.01.2012
					СтрокаТаблицыТерминала.Вставить("Объект" , глТорговоеОборудование.млТерминал[0].Объект );
					СтрокаТаблицыТерминала.Вставить("НомерЛУ", глТорговоеОборудование.млТерминал[0].НомерЛУ);
					СтрокаТаблицыТерминала.Вставить("Модель",  глТорговоеОборудование.млТерминал[0].Модель);
				//иначе // ТСД не подключен.	
				КонецЕсли;
				Ответ = глТорговоеОборудование.ОчиститьПамятьТерминалаСбораДанных(СтрокаТаблицыТерминала);
				Если Не ПустаяСтрока(Ответ) Тогда
					Предупреждение(Ответ);
				КонецЕсли;
			КонецЕсли;
		
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ДокументОснование) и ТипЗнч(ДокументОснование) <> Тип("ДокументСсылка.ЗаявкаНаБрак") тогда
		Если ДокументОснование.ДоговорКонтрагента<>ДоговорКонтрагента тогда
			Предупреждение("В заказе - указан другой договор!", 30);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

Процедура КоманднаяПанельАдресноеХранениеИзТоваров(Кнопка)
	
	Если ЭтоНовый() или ЭтотОбъект.Модифицированность() тогда
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос("Перед выполнением обработки требуется записать документ. Выполнить?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Предупреждение("Обработка отменена!", 10);
		    Возврат;
		иначе
			ЭтотОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если ТоварыАдресноеХранение.Количество()>0 тогда
		Если Вопрос("Таблица ""Адреса хранения"" не пустая!
			|Очистить таблицу перед заполненением?", РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да тогда
		ТоварыАдресноеХранение.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ПеремещениеТоваровТовары.Номенклатура,
	                |	СУММА(ПеремещениеТоваровТовары.Количество) КАК Количество,
	                |	ПеремещениеТоваровТовары.Склад
	                |ИЗ
	                |	Документ.ОперацияПоОтветственномуХранению.Товары КАК ПеремещениеТоваровТовары
	                |ГДЕ
	                |	ПеремещениеТоваровТовары.Склад.АдресноеХранение
	                |	И ПеремещениеТоваровТовары.Ссылка = &Ссылка
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ПеремещениеТоваровТовары.Номенклатура,
	                |	ПеремещениеТоваровТовары.Склад";
	 
	 Запрос.УстановитьПараметр("Ссылка", Ссылка);
	 
	 Результат = Запрос.Выполнить();
	 ТоварыАдресноеХранение.Загрузить( Результат.Выгрузить() );
	 Если ТоварыАдресноеХранение.Количество()=0 тогда
		 Предупреждение("Нет складов адресного хранения в таблице ""Товары"".",30);
	 КонецЕсли;
	 

КонецПроцедуры

// как в реализации
Процедура КоманднаяПанель1ВыполнитьСоответствиеТоварыАдреса(Кнопка)
	
	Если ТоварыАдресноеХранение.Количество()=0 тогда
		Предупреждение("Не заполнена таблица ""Адресное хранение"".");
		возврат;
	КонецЕсли;
	
	Если ЭтоНовый() или ЭтотОбъект.Модифицированность() тогда
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос("Перед выполнением обработки требуется записать документ. Выполнить?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Предупреждение("Обработка отменена!", 10);
		    Возврат;
		иначе
			ЭтотОбъект.Записать();
		КонецЕсли;
	КонецЕсли;

// +АЧ 19.08.2015 Если товаров нет - берем из адресов.
Если (Товары.Количество()=0) Тогда 
// Заполнить товары

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПеремещениеТоваровТоварыАдресноеХранение.Номенклатура,
	                      |	ПеремещениеТоваровТоварыАдресноеХранение.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	                      |	ПеремещениеТоваровТоварыАдресноеХранение.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмеренияМест,
	                      |	СУММА(ПеремещениеТоваровТоварыАдресноеХранение.Количество) КАК Количество,
	                      |	СУММА(ПеремещениеТоваровТоварыАдресноеХранение.Количество) КАК КоличествоМест,
	                      |	ПеремещениеТоваровТоварыАдресноеХранение.Склад
	                      |ИЗ
	                      |	Документ.ПеремещениеТоваров.ТоварыАдресноеХранение КАК ПеремещениеТоваровТоварыАдресноеХранение
	                      |ГДЕ
	                      |	ПеремещениеТоваровТоварыАдресноеХранение.Ссылка = &Ссылка
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ПеремещениеТоваровТоварыАдресноеХранение.Номенклатура.ЕдиницаХраненияОстатков,
	                      |	ПеремещениеТоваровТоварыАдресноеХранение.Склад,
	                      |	ПеремещениеТоваровТоварыАдресноеХранение.Номенклатура,
	                      |	ПеремещениеТоваровТоварыАдресноеХранение.Номенклатура.ЕдиницаХраненияОстатков");
						  
						  
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Выб = Запрос.Выполнить().Выгрузить();
	
	Для каждого Строка из Выб Цикл
		СтрУ = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрУ,Строка);
		СтрУ.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		СтрУ.Качество = Справочники.Качество.Новый;
		//РассчитатьКоличествоТабЧасти(СтрУ,ЭтотОбъект);
		СтрУ.Коэффициент = 1;
	КонецЦикла;
	
	Возврат; //все заполнили из Адресов
КонецЕсли;
// 

Если ( Товары.Количество()>0 ) тогда //склейка по товарам и складам - 
Запрос = Новый Запрос;

//+++ 10.04.2013 - берем сразу из ТабЧастей! - быстрее и рабтоает даже если документ не записан!
  Запрос.Текст = "ВЫБРАТЬ
                 |	ВТ_А.Номенклатура КАК Номенклатура,
                 |	ВТ_А.Количество КАК Количество,
				 |	ВТ_А.Склад КАК Склад
                 |ПОМЕСТИТЬ ВТ_А
                 |ИЗ
                 |	&ВТ_А КАК ВТ_А
                 |;
                 |
                 |////////////////////////////////////////////////////////////////////////////////
                 |ВЫБРАТЬ
                 |	ВТ_Т.Количество КАК Количество,
                 |	ВТ_Т.Номенклатура КАК Номенклатура,
                 |	ВТ_Т.Склад КАК Склад,
                 |	ВТ_Т.НомерСтроки КАК НомерСтроки
                 |ПОМЕСТИТЬ ВТ_Т
                 |ИЗ
                 |	&ВТ_Т КАК ВТ_Т
                 |;
                 |
                 |////////////////////////////////////////////////////////////////////////////////
                 |ВЫБРАТЬ РАЗЛИЧНЫЕ
                 |	ЕСТЬNULL(ВТ_Т.Номенклатура, ВТ_А.Номенклатура) КАК Номенклатура,
                 |	ЕСТЬNULL(ВТ_Т.НомерСтроки, 0) КАК НомерСтрокиТ,
                 |	ЕСТЬNULL(ВТ_Т.Склад,ВТ_А.Склад) КАК СкладТ,
                 |	ЕСТЬNULL(ВТ_Т.Количество, 0) КАК КоличествоТ,
                 |	ЕСТЬNULL(ВТ_А.Количество, 0) КАК КоличествоА
                 |ИЗ
                 |	ВТ_А КАК ВТ_А
                 |		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
                 |			ВТ_Т1.Количество КАК Количество,
                 |			ВТ_Т1.Номенклатура КАК Номенклатура,
                 |			ВТ_Т1.Склад КАК Склад,
                 |			ВТ_Т1.НомерСтроки КАК НомерСтроки
                 |		ИЗ
                 |			ВТ_Т КАК ВТ_Т1) КАК ВТ_Т
                 |		ПО ВТ_А.Номенклатура = ВТ_Т.Номенклатура
                |		       И  ВТ_А.Склад = ВТ_Т.Склад
                 |
                 |УПОРЯДОЧИТЬ ПО
                 |	НомерСтрокиТ
                 |ИТОГИ
                 |	МИНИМУМ(НомерСтрокиТ),
                 |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СкладТ),
                 |	СУММА(КоличествоТ),
                 |	МАКСИМУМ(КоличествоА)
                 |ПО
                 |	Номенклатура
                 |АВТОУПОРЯДОЧИВАНИЕ";
 табЗначА = ТоварыАдресноеХранение.Выгрузить();
 табЗначА.Свернуть("Номенклатура, Склад", "Количество");
Запрос.УстановитьПараметр("ВТ_А", табЗначА);

табЗначТ = Товары.Выгрузить();
Запрос.УстановитьПараметр("ВТ_Т", табЗначТ );

Результат = Запрос.Выполнить();
ВыборкаНоменклатура = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

складА = ТоварыАдресноеХранение[0].Склад; // хотя бы 1 строка обязательно есть...

//----------------------осн.цикл----------------------------
Пока ВыборкаНоменклатура.Следующий() Цикл

	ВсегоТовараТ = ВыборкаНоменклатура.КоличествоТ; // всего со всех складов!
	ВсегоТовараA = ВыборкаНоменклатура.КоличествоА; // всего по адресам 5000
	КолТА=0;
	ВыборкаСклады = ВыборкаНоменклатура.Выбрать();
	// -------------внутренний цикл по строкам Складов-----------
	Пока ВыборкаСклады.Следующий() Цикл
		КолТ = ВыборкаСклады.КоличествоТ; // Количество товара, отгружаемого со СкладаТ
		
	//    2-0) СкладT=СкладА  - ничего не исправляем... ошибка количества - обнаружится при проверка после полного цикла...
		Если ВыборкаСклады.СкладТ = складА тогда 
			    ВсегоТовараТ = ВсегоТовараТ - КолТ;
				ВсегоТовараA = ВсегоТовараA - КолТ; // остаток "нераспределенного" количества адр.хранения также уменьшается!
				продолжить; // склад уже 5000...
			КонецЕсли;
			Если ВсегоТовараA <=0 тогда // все кол-во по адресам пере-проверено
				Прервать;
			КонецЕсли;	
			Если ВыборкаСклады.НомерСтрокиТ=0 тогда
				Сообщить("В Таб.части ""Адресное хранение"" есть номенклатура: "+строка(ВыборкаСклады.Номенклатура.Код)+" - "+строка(ВыборкаСклады.Номенклатура)+"- которой нет в Таб.Части ""Товары""!",СтатусСообщения.Внимание );
				Продолжить;
			КонецЕсли;
			
	стрТов = Товары[ВыборкаСклады.НомерСтрокиТ-1];
		//-----------проверка условий изменения склада и количества--------------------
//    2а) КолА>КолТ и СкладT<>СкладА  -> СкладТ = 5000 
	Если ВсегоТовараA>=КолТ тогда  
	
	сообщить("В строке № "+строка(ВыборкаСклады.НомерСтрокиТ)+" - изменен склад "+строка(стрТов.Склад)+" на "+строка(СкладА), СтатусСообщения.Информация);
	стрТов.Склад = СкладА;
	
//    2б) КолА<КолТ  и СкладT<>СкладА  -> меняем количество в строке КолТ=КолТ-КолА на складе СкладT
//					   и добавляем такую же строку, с параметрами Склад = 5000, Количество=КолА 
	ИначеЕсли ВсегоТовараA<КолТ тогда
		
		КолТА=КолТА + (КолТ-ВсегоТовараA); // сумма расхождений
		
		  сообщить("В строке № "+строка(ВыборкаСклады.НомерСтрокиТ)+" - изменено количество: "+строка(КолТ)+" на "+строка(КолТ-ВсегоТовараA)+" и пересчитаны сумма и сумма НДС.", СтатусСообщения.Информация);
	      стрТов.Количество = (КолТ-ВсегоТовараA); // разность на том же складе!
		  
		  РассчитатьСуммуТабЧасти(стрТов, ЭтотОбъект); //+++ 10.04.2013  - пересчет сумм обязателен!
		  РассчитатьСуммуНДСТабЧасти(стрТов, ЭтотОбъект);

		  КолТ = ВсегоТовараA;
		  
		  стрТов2 =Товары.Добавить();
		  ЗаполнитьЗначенияСвойств(стрТов2, стрТов); // все как в строке тов
		  стрТов2.Склад = складА;//на 5000 будет количество: ВсегоТовараA 
		  стрТов2.Количество = ВсегоТовараA;
		  РассчитатьСуммуТабЧасти(стрТов2, ЭтотОбъект); //+++ 10.04.2013  - пересчет сумм обязателен!
		  РассчитатьСуммуНДСТабЧасти(стрТов2, ЭтотОбъект);
		  сообщить("Добавлена новая строка № "+строка(стрТов2.НомерСтроки)+" количество ="+строка(ВсегоТовараA)+", склад = "+строка(складА), СтатусСообщения.Информация);
	  КонецЕсли;
	  
	    ВсегоТовараТ = ВсегоТовараТ - КолТ;
		ВсегоТовараA = ВсегоТовараA - КолТ; // остаток "нераспределенного" количества адр.хранения также уменьшается!
	КонецЦикла;
	
	Если КолТА<>0 или ВсегоТовараA<>0 тогда
	
		попытка
			стрТов = Товары[ВыборкаНоменклатура.НомерСтрокиТ-1];
			Если Вопрос("Хотите изменить количество в ТЧ ""Товары"" 
					    |по товару: "+строка(ВыборкаНоменклатура.Номенклатура.Код)+" "+строка(ВыборкаНоменклатура.Номенклатура)+"
				        | c прежнего: "+строка(стрТов.Количество)+" шт. на новое: "+Строка(стрТов.Количество-КолТА+ВсегоТовараA)+" шт.?", РежимДиалогаВопрос.ДаНет, 10, КодВозвратаДиалога.Нет)=КодВозвратаДиалога.Да тогда
				стрТов.Количество = стрТов.Количество - (КолТА-ВсегоТовараA);
				стрТов.КоличествоМест = стрТов.Количество;
			    РассчитатьСуммуТабЧасти(стрТов2, ЭтотОбъект); //+++ 10.04.2013  - пересчет сумм обязателен!
				РассчитатьСуммуНДСТабЧасти(стрТов2, ЭтотОбъект);
				Сообщить("Расхождение по товару: "+строка(ВыборкаНоменклатура.Номенклатура.Код)+" по складу: "+строка(СкладА)+" изменено на "+Строка(-КолТА+ВсегоТовараA)+" шт.", СтатусСообщения.Информация);
			Иначе
				Сообщить("Есть расхождение по товару: "+строка(ВыборкаНоменклатура.Номенклатура.Код)+" по количеству! По складу: "+строка(СкладА)+" Товары - Адреса = "+Строка(КолТА-ВсегоТовараA)+" шт.", СтатусСообщения.Внимание);
			КонецЕсли;
		исключение // нет товара в ТЧ Товары
		КонецПопытки;
		
	КонецЕсли;

КонецЦикла;

//+++ 20.01.2014 - свертка по всем полям требуется чтобы их "не потерять"
Товары.Свернуть("Номенклатура, Склад, Цена, Качество, Коэффициент, ЕдиницаИзмерения, ЕдиницаИзмеренияМест, СпособСписанияОстаткаТоваров, ДокументРезерва, ХарактеристикаНоменклатуры, СерияНоменклатуры",
"Количество, КоличествоМест, Вес");   //Сумма, СуммаНДС, 
КонецЕсли;

Предупреждение("Обработка выполнена", 10);
	
КонецПроцедуры

Процедура ПодразделениеКомпанииПриИзменении(Элемент)
	//+++( 11.07.2016 - новый номер!	
	СтрокаПрефикс = "ТК";
	Если подразделение.ПрефиксИБ<>"" Тогда
		СтрокаПрефикс = подразделение.ПрефиксИБ;
	КонецЕсли;	
	ЭтотОбъект.УстановитьНовыйНомер(СтрокаПрефикс);	
КонецПроцедуры


мКолонкиТовары         = ЭлементыФормы.Товары.Колонки;


