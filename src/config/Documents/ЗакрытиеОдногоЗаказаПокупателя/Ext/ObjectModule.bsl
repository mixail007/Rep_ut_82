


Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	
	Если не РольДоступна("ПолныеПрава") тогда
		Если РежимЗаписи=РежимЗаписиДокумента.ОтменаПроведения тогда
			Сообщить("У Вас недостаточно прав для удаления или отмены проведения документа Закрытие заказа!", СтатусСообщения.Внимание);
			Отказ = истина;
		ИначеЕсли РежимЗаписи=РежимЗаписиДокумента.Проведение
			и не (ПараметрыСеанса.ТекущийПользователь=ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо
				или ПараметрыСеанса.ТекущийПользователь=ЗаказПокупателя.Контрагент.ОсновнойМенеджерКонтрагента) 
				и (ЗаказПокупателя.ТипЗаказа <> 13 и ПараметрыСеанса.ТекущийПользователь <> Справочники.Пользователи.НайтиПоКоду("Доколин")) тогда
			Сообщить("Вы не можете закрывать Заказ покупателя другого менеджера!", СтатусСообщения.Внимание);
			Отказ = истина;
		КонецЕсли;
	КонецЕсли;
	
	//если проведение и пометка - то не записываем такой заказ!
	//Если РежимЗаписи = РежимЗаписиДокумента.Проведение и ПометкаУдаления тогда
	//	 Отказ = истина;
	//КонецЕсли;	
		 
	Если Отказ Тогда
		возврат;
	КонецЕсли; 	
	
	//	Дата = ТекущаяДата(); // всегда оперативно! 
	РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	
	//01.11.2016
	ОбменСУТИнтернетМагазин.ВключитьРегистрациюОбъектаОИМ(ЗаказПокупателя, ЗаказПокупателя.Контрагент.ПриниматьЗаказыЧерезСайт);
		
	//Отправить письсмо для отмены сбора крышек
	
	Если ЗаказПокупателя.ТребуютсяКрышки и яштПоЗаказуБылиОтгрузки(ЗаказПокупателя) = Ложь тогда
		 УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("no-reply@yst76.ru");
		 Тема = "Отменить наборку для каонтрагента "+ ЗаказПокупателя.Контрагент.Наименование +" !!!";
		 ТекстСообщения = "Для заказа №" +ЗаказПокупателя. Номер + ",для контрагента " + ЗаказПокупателя.Контрагент.Наименование + " отменить сбор крышек";
						
		 АдресПолучателя = "sbcaps@yandex.ru";
		#Если Клиент тогда				
		 Состояние(строка(ТекущаяДата())+" идет отправка письма на адрес: "+АдресПолучателя);
		#КонецЕсли 
		 Если ЗначениеЗаполнено(АдресПолучателя) Тогда
			 яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресПолучателя,, УЗ, ТекстСообщения, Тема);
	     КонецЕсли;
	КонецЕсли;//Крышки
		
	
	Если НЕ Отказ И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда // 18.04.2017 - тот кто провел (закрыл) заказ!
		Ответственный = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
			
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
 	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДоговорКонтрагента,
	               |	ЗаказПокупателя,
	               |	СтатусПартии,
	               |	Номенклатура,
	               |	ХарактеристикаНоменклатуры,
	               |	Цена,
	               |	ЕдиницаИзмерения,
	               |	ПроцентСкидкиНаценки,
	               |	ПроцентАвтоматическихСкидок,
	               |	УсловиеАвтоматическойСкидки,
	               |	ЗначениеУсловияАвтоматическойСкидки,
	               |	КоличествоОстаток КАК Количество,
	               |	СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	               |	СуммаУпрОстаток КАК СуммаУпр
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя = &ЗаказПокупателя) ";
	
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	//Отказ = (Выборка.Количество()=0); // если уже все закрыто - то ничего...
	//ПометкаУдаления = Отказ; // 
	
   СуммаДокумента = 0;
	Пока Выборка.Следующий() Цикл
		Движение = Движения.ЗаказыПокупателей.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Дата;
		ЗаполнитьЗначенияСвойств(Движение, Выборка);
		СуммаДокумента = СуммаДокумента + Выборка.СуммаВзаиморасчетов; //для Структуры подчиненности
	КонецЦикла;
	
	//+++( 06.11.2014 закрытие резервов по Размещению заказов покупателей
	ТаблицаПоРазмещению = ПодготовитьТаблицуПоРазмещениюУпр();
	для i=0 по ТаблицаПоРазмещению.Количество()-1 цикл
		Движение = Движения.РазмещениеЗаказовПокупателей.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход; // закрывает в 0 именно этот заказ по всем товарам, которые еще числятся в 
		Движение.Период = Дата;
		ЗаполнитьЗначенияСвойств(Движение, ТаблицаПоРазмещению[i]);
	КонецЦикла;
	//+++)
	
//+++( 18.01.2016 ===========РЕЗЕРВ ИМ====================
	ТаблицаПоРезервамИМ = ПодготовитьТаблицуПоРезервамИМ(); 	
	Если ТаблицаПоРезервамИМ.Количество() > 0 Тогда
		
		НаборДвижений = Движения.РезервДляИМ;
		
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		
		ЗагрузитьВТаблицуЗначений(ТаблицаПоРезервамИМ, ТаблицаДвижений);
		
		НаборДвижений.мПериод = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Движения.РезервДляИМ.ВыполнитьДвижения(); //в обе стороны! "обратное" движение по резерву
		#если Клиент тогда
			сообщить("Выполнено обратное движение по ""Резерв для ИМ"" для "+строка(ТаблицаПоРезервамИМ.Количество())+" товаров.");
		#КонецЕсли	
			//14.01.2016 --сторнирование по "-" движениям обычных заказов где Заказ<>Регистратор
	//             по остаткам Заказов по LIFO!
	
		ТаблицаПоСторно = получитьТаблСторно();
		Если ТаблицаПоСторно.Количество()>0 тогда
		НаборДвижений = Движения.ЗаказыПокупателей;
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		
		ТаблицаДвижений.Очистить();
		ЗагрузитьВТаблицуЗначений(ТаблицаПоСторно, ТаблицаДвижений);
		
		НаборДвижений.мПериод = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Движения.ЗаказыПокупателей.ВыполнитьПриход();
		#если Клиент тогда
			сообщить("Выполнено сторно по резервным Заказам покупателей Клиента ИМ для "+строка(ТаблицаПоСторно.Количество())+" товаров.");
		#КонецЕсли	

		КонецЕсли;
	
	КонецЕсли;
//+++)

 // по сезонным заказам покупателя
 	Запрос = Новый Запрос;
	Запрос.Текст = 
				   "ВЫБРАТЬ
				   |	ЗаказыПокупателейСезонныеОстатки.Контрагент,
				   |	ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателяСезонный,
				   |	ЗаказыПокупателейСезонныеОстатки.Номенклатура,
				   |	ЗаказыПокупателейСезонныеОстатки.Аналог,
				   |	ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателя,
				   |	ЗаказыПокупателейСезонныеОстатки.ВРезерве,
				   |	ЗаказыПокупателейСезонныеОстатки.КоличествоОстаток КАК Количество,
				   |	ЗаказыПокупателейСезонныеОстатки.Подразделение,
				   |	&ВидДвижения
				   |ИЗ
				   |	РегистрНакопления.ЗаказыПокупателейСезонные.Остатки(&МоментДокумента, ЗаказПокупателя = &ЗаказПокупателя) КАК ЗаказыПокупателейСезонныеОстатки";
				   
				
	Запрос.УстановитьПараметр("МоментДокумента", ссылка.МоментВремени());
	Запрос.УстановитьПараметр("ДокЗакрытия", ссылка);
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Расход);
	
	Запрос.УстановитьПараметр("ЗаказПокупателя",  Ссылка.ЗаказПокупателя);
	
	ТаблицаДвиженийПоЗаказам = Запрос.Выполнить().Выгрузить();

   	Если ТаблицаДвиженийПоЗаказам.Количество()>0 Тогда
		НаборДвижений = Движения.ЗаказыПокупателейСезонные;
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		ЗагрузитьВТаблицуЗначений(ТаблицаДвиженийПоЗаказам, ТаблицаДвижений);
		
		НаборДвижений.мПериод = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Движения.ЗаказыПокупателейСезонные.ВыполнитьРасход();

	КонецЕсли;
	
	//+++ 17.11.2016 закрытие ТоварыВОжиданииОтПоставщика
	Если Константы.ИспользоватьДележкуЗаказовВМинус.Получить() тогда
		
		Запрос = Новый Запрос; // заказано ещё есть...  св.остаток прибавляется как Приход!
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаказыПокупателей.Номенклатура,
					   //ЗаказыПокупателей.КоличествоОстаток - ЕСТЬNULL(ТоварыВОжиданииОтПоставщикаОбороты.КоличествоОборот, 0) 
		               |	0 КАК Количество
		               |ИЗ
		               |	РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя = &ЗаказПокупателя) КАК ЗаказыПокупателей
		               //|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВОжиданииОтПоставщика.Обороты(, , , ЗаказПокупателя = &ЗаказПокупателя) КАК ТоварыВОжиданииОтПоставщикаОбороты
		               //|		ПО  ЗаказыПокупателей.Номенклатура = ТоварыВОжиданииОтПоставщикаОбороты.Номенклатура
					   |";
 		Запрос.УстановитьПараметр("ЗаказПокупателя",  Ссылка.ЗаказПокупателя);
		ТаблТов = Запрос.Выполнить().Выгрузить();
		
	// УДАЛЯЕМ ДВИЖЕНИЕ по ТоварыВОжиданииОтПоставщика по Заказу!		
		набор = РегистрыНакопления.ТоварыВОжиданииОтПоставщика.СоздатьНаборЗаписей();
		набор.Отбор.Регистратор.ВидСравнения = ВидСравнения.Равно;
		набор.Отбор.Регистратор.Значение 	 = Ссылка.ЗаказПокупателя;
		набор.Отбор.Регистратор.Использование= Истина;
		набор.Записать(); 
		
//---------исключаем заказанный товар по этому заказу-------------		
	    мас = новый Массив;
		мас.Добавить(  Ссылка.ЗаказПокупателя );
		
		//--------- обратное распределение по этим товарам - на другие заказы ------------------	
		ОбменСУТИнтернетМагазин.ДвижениеТоваровВОжидании( таблТов,  Ссылка.ЗаказПокупателя.Подразделение, мас );
		
	КонецЕсли;


КонецПроцедуры	// ОбработкаПроведения()

 //18.01.2016 - как в Закрытии заказов, только на 1 заказ
 функция ПодготовитьТаблицуПоРезервамИМ()
	 
 	СписокЗаказов = новый СписокЗначений;
	СписокЗаказов.Добавить(ЗаказПокупателя);// 1 заказ

	Запрос = Новый Запрос;
	Запрос.Текст = 
				   "ВЫБРАТЬ
				   |	ЗаказыПокупателейОстатки.ЗаказПокупателя.Подразделение КАК Подразделение,
				   //|	ЗаказыПокупателейОстатки.ДоговорКонтрагента.Владелец.КонтрагентДляРезерваИМ КАК КонтрагентДляРезерваИМ, //123Заменить
	     		   |	ЗаказыПокупателейОстатки.ДоговорКонтрагента.КонтрагентДляРезерваИМ КАК КонтрагентДляРезерваИМ,
				   |	ЗаказыПокупателейОстатки.Номенклатура,
				   |	СУММА(ЗаказыПокупателейОстатки.КоличествоОстаток) КАК Количество,
				   |	ЗаказыПокупателейОстатки.ЗаказПокупателя
				   |ПОМЕСТИТЬ ВТ_ОстаткиТоваровПоЗаказам
				   |ИЗ
				   |	РегистрНакопления.ЗаказыПокупателей.Остатки(
				   |			&МоментДокумента,
				   |			ЗаказПокупателя В (&СписокЗаказов)
				   //|				И ДоговорКонтрагента.Владелец.КонтрагентДляРезерваИМ <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) //123Заменить
				   |				И ДоговорКонтрагента.КонтрагентДляРезерваИМ <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
				   |) КАК ЗаказыПокупателейОстатки
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	ЗаказыПокупателейОстатки.ЗаказПокупателя.Подразделение,
				  // |	ЗаказыПокупателейОстатки.ДоговорКонтрагента.Владелец.КонтрагентДляРезерваИМ, //123Заменить
				   |	ЗаказыПокупателейОстатки.ДоговорКонтрагента.КонтрагентДляРезерваИМ, 
				   |	ЗаказыПокупателейОстатки.Номенклатура,
				   |	ЗаказыПокупателейОстатки.ЗаказПокупателя
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	&МоментДокумента КАК Период,
				   |	&ДокЗакрытия КАК Регистратор,
				   |	ВЫБОР
				   |		КОГДА РезервДляИМ.ВидДвижения = &Приход
				   |			ТОГДА &Расход
				   |		ИНАЧЕ &Приход
				   |	КОНЕЦ КАК ВидДвижения,
				   |	РезервДляИМ.Подразделение,
				   |	РезервДляИМ.КонтрагентДляРезерваИМ,
				   |	РезервДляИМ.Номенклатура,
				   |	ВЫБОР
				   |		КОГДА РезервДляИМ.Количество > ОстаткиТоваровПоЗаказам.Количество
				   |			ТОГДА ОстаткиТоваровПоЗаказам.Количество
				   |		ИНАЧЕ РезервДляИМ.Количество
				   |	КОНЕЦ КАК Количество,
				   |	РезервДляИМ.Активность
				   |ИЗ
				   |	РегистрНакопления.РезервДляИМ КАК РезервДляИМ
				   |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				   |			ВТ_ОстаткиТоваровПоЗаказам.Подразделение КАК Подразделение,
				   |			ВТ_ОстаткиТоваровПоЗаказам.КонтрагентДляРезерваИМ КАК КонтрагентДляРезерваИМ,
				   |			ВТ_ОстаткиТоваровПоЗаказам.Номенклатура КАК Номенклатура,
				   |			ВТ_ОстаткиТоваровПоЗаказам.Количество КАК Количество,
				   |			ВТ_ОстаткиТоваровПоЗаказам.ЗаказПокупателя КАК ЗаказПокупателя
				   |		ИЗ
				   |			ВТ_ОстаткиТоваровПоЗаказам КАК ВТ_ОстаткиТоваровПоЗаказам) КАК ОстаткиТоваровПоЗаказам
				   |		ПО РезервДляИМ.Номенклатура = ОстаткиТоваровПоЗаказам.Номенклатура
				   |			И РезервДляИМ.Подразделение = ОстаткиТоваровПоЗаказам.Подразделение
				   |			И РезервДляИМ.КонтрагентДляРезерваИМ = ОстаткиТоваровПоЗаказам.КонтрагентДляРезерваИМ
				   |			И РезервДляИМ.Регистратор = ОстаткиТоваровПоЗаказам.ЗаказПокупателя
				   |ГДЕ
				   |	РезервДляИМ.Регистратор В(&СписокЗаказов)
				   |	И РезервДляИМ.Номенклатура В
				   |			(ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |				ВТ_ОстаткиТоваровПоЗаказам.Номенклатура
				   |			ИЗ
				   |				ВТ_ОстаткиТоваровПоЗаказам)
				   |	И РезервДляИМ.КонтрагентДляРезерваИМ В
				   |			(ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |				ВТ_ОстаткиТоваровПоЗаказам.КонтрагентДляРезерваИМ
				   |			ИЗ
				   |				ВТ_ОстаткиТоваровПоЗаказам)
				   |	И РезервДляИМ.Подразделение В
				   |			(ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |				ВТ_ОстаткиТоваровПоЗаказам.Подразделение
				   |			ИЗ
				   |				ВТ_ОстаткиТоваровПоЗаказам)";
				   
				
	Запрос.УстановитьПараметр("МоментДокумента", ссылка.Дата);
	Запрос.УстановитьПараметр("ДокЗакрытия", ссылка);
	// вид движения - наоборот!
	Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);
	
	Запрос.УстановитьПараметр("СписокЗаказов",  СписокЗаказов);
	
	ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗаказов;
	
КонецФункции

//18.01.2016 - как в Закрытии заказов, только на 1 заказ
функция получитьТаблСторно()
	
  	СписокЗаказов = новый массив;
	СписокЗаказов.Добавить(ЗаказПокупателя);// 1 заказ

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказыПокупателейОбороты.Регистратор КАК Регистратор,
	               |	ЗаказыПокупателейОбороты.ЗаказПокупателя,
	               |	ЗаказыПокупателейОбороты.Номенклатура КАК Номенклатура,
   |	Истина как Активность,
	|	Значение(Справочник.ПричиныЗакрытияЗаказов.ПустаяСсылка) КАК ПричинаЗакрытияЗаказа,
	
//------------именно ЗаказПокупателя из ОБОРОТОВ!--------------------------------
	|	ЗаказыПокупателейОбороты.ЗаказПокупателя.ДоговорКонтрагента как ДоговорКонтрагента,
	|	ЗаказыПокупателейОбороты.ЗаказПокупателя.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей КАК ОбособленныйУчетТоваровПоЗаказамПокупателей,
	|	ЗаказыПокупателейОбороты.ЗаказПокупателя.Организация КАК Организация,
	
	|	ЗаказыПокупателейОбороты.ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОбороты.СтатусПартии, 
	|	ЗаказыПокупателейОбороты.Цена,
	|	ЗаказыПокупателейОбороты.ЕдиницаИзмерения,
	|	ЗаказыПокупателейОбороты.ПроцентСкидкиНаценки,
	|	ЗаказыПокупателейОбороты.ПроцентАвтоматическихСкидок,

	               |	ЗаказыПокупателейОбороты.КоличествоРасход КАК Количество,
	               |	ЗаказыПокупателейОбороты.СуммаВзаиморасчетовРасход КАК СуммаВзаиморасчетов,
	               |	ЗаказыПокупателейОбороты.СуммаУпрРасход КАК СуммаУпр,  
				   
				   |	ЗаказыПокупателейОстатки.КоличествоОстаток КАК КоличествоОстаток
				   
				   |ИЗ
	               |	РегистрНакопления.ЗаказыПокупателей.Остатки(
	               |			&КонДата,
	               |			ЗаказПокупателя В (&СписокЗаказов)
	               //|				И ДоговорКонтрагента.Владелец <> ДоговорКонтрагента.Владелец.КонтрагентДляРезерваИМ //123Заменить
				   |				И ДоговорКонтрагента.Владелец <> ДоговорКонтрагента.КонтрагентДляРезерваИМ
	               //|				И ДоговорКонтрагента.Владелец.КонтрагентДляРезерваИМ <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) //123Заменить
				  |				И ДоговорКонтрагента.КонтрагентДляРезерваИМ <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
				   |) КАК ЗаказыПокупателейОстатки
	              // |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Обороты(&НачДата, &КонДата, Регистратор, ДоговорКонтрагента.Владелец = ДоговорКонтрагента.Владелец.КонтрагентДляРезерваИМ //123Заменить
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Обороты(&НачДата, &КонДата, Регистратор, ДоговорКонтрагента.Владелец = ДоговорКонтрагента.КонтрагентДляРезерваИМ
				   |) КАК ЗаказыПокупателейОбороты
	               |		ПО ЗаказыПокупателейОстатки.ЗаказПокупателя = ЗаказыПокупателейОбороты.Регистратор
	               |			И ЗаказыПокупателейОстатки.Номенклатура = ЗаказыПокупателейОбороты.Номенклатура
	               |ГДЕ
	               |	ЗаказыПокупателейОбороты.КоличествоРасход > 0
	               |	И ЗаказыПокупателейОбороты.Регистратор <> ЗаказыПокупателейОбороты.ЗаказПокупателя
	               |	И ЗаказыПокупателейОбороты.Регистратор В(&СписокЗаказов)
	               |	И ЗаказыПокупателейОстатки.КоличествоОстаток > 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Номенклатура,
	               |	ЗаказыПокупателейОбороты.ЗаказПокупателя.Дата УБЫВ
	               |ИТОГИ
	               |	СУММА(Количество),
	               |	СУММА(СуммаВзаиморасчетов),
	               |	СУММА(СуммаУпр),
	               |	МАКСИМУМ(КоличествоОстаток)
	               |ПО
	               |	Регистратор,
	               |	Номенклатура
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   
	НачДата = ссылка.Дата; 
	// находим нач.дату как дату самого раннего заказа -1 сек.
	для i=0 по СписокЗаказов.Количество()-1 цикл
		если начДата>СписокЗаказов[i].Дата тогда
			начДата=СписокЗаказов[i].Дата-1;
		КонецЕсли;
	КонецЦикла;	
				
	Запрос.УстановитьПараметр("НачДата", НачДата);
	Запрос.УстановитьПараметр("КонДата", ссылка.Дата);
	Запрос.УстановитьПараметр("ДокЗакрытия", ссылка);
	
	// вид движения - наоборот!
	//Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
	//Запрос.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("СписокЗаказов",  СписокЗаказов);
	
	выборкаРегистратор = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТаблицаЗаказов = новый ТаблицаЗначений;
	ТаблицаЗаказов.Колонки.Добавить("ЗаказПокупателя");
	ТаблицаЗаказов.Колонки.Добавить("Номенклатура");
	
	ТаблицаЗаказов.Колонки.Добавить("Активность");
	ТаблицаЗаказов.Колонки.Добавить("ПричинаЗакрытияЗаказа");
	ТаблицаЗаказов.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаЗаказов.Колонки.Добавить("ОбособленныйУчетТоваровПоЗаказамПокупателей");
	
	ТаблицаЗаказов.Колонки.Добавить("Организация");
	ТаблицаЗаказов.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаЗаказов.Колонки.Добавить("СтатусПартии");
	ТаблицаЗаказов.Колонки.Добавить("Цена");
	ТаблицаЗаказов.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаЗаказов.Колонки.Добавить("ПроцентСкидкиНаценки");
	
	ТаблицаЗаказов.Колонки.Добавить("Количество");
	ТаблицаЗаказов.Колонки.Добавить("СуммаВзаиморасчетов");
	ТаблицаЗаказов.Колонки.Добавить("СуммаУпр");
	
	//===================LIFO========================================
	Пока выборкаРегистратор.Следующий() цикл
		выборкаТов = выборкаРегистратор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока выборкаТов.Следующий() цикл
			КолОстаток = выборкаТов.КоличествоОстаток; // остаток списания по заказу
			выборкаЗак = выборкаТов.Выбрать();
			Пока выборкаЗак.Следующий() цикл
				Если выборкаЗак.Количество<=КолОстаток тогда // по 2м заказам
					
					стр1 = ТаблицаЗаказов.Добавить();
					ЗаполнитьЗначенияСвойств(стр1, выборкаЗак); 
					
					стр1.Цена =?(стр1.Цена>0, стр1.Цена, Окр(стр1.СуммаВзаиморасчетов * КолОстаток / выборкаЗак.Количество, 2));
					КолОстаток = КолОстаток - выборкаЗак.Количество;
					
				ИначеЕсли выборкаЗак.Количество>КолОстаток тогда
					
					стр1 = ТаблицаЗаказов.Добавить();
					ЗаполнитьЗначенияСвойств(стр1, выборкаЗак); 
					
					стр1.Количество = КолОстаток;  //пересчет сумм
					стр1.СуммаВзаиморасчетов = Окр(стр1.СуммаВзаиморасчетов * КолОстаток / выборкаЗак.Количество,2);
					стр1.СуммаУпр = Окр(стр1.СуммаУпр * КолОстаток / выборкаЗак.Количество,2);
					стр1.Цена = Окр(стр1.СуммаВзаиморасчетов /стр1.Количество, 2);
					КолОстаток = 0;
					
				КонецЕсли;
				
				если КолОстаток = 0 тогда
					прервать;
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;	
		
	
	Возврат ТаблицаЗаказов;
КонецФункции	


//+++ 06.11.2014 функция как в документе "Закрытии заказов покупателей"
Функция ПодготовитьТаблицуПоРазмещениюУпр()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментДокумента",    МоментВремени());
	Запрос.УстановитьПараметр("ЗаказПокупателя",    ЭтотОбъект.ЗаказПокупателя);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РазмещениеЗаказовПокупателейОстатки.ЗаказПоставщику,
	               |	РазмещениеЗаказовПокупателейОстатки.Номенклатура,
	               |	РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры,
	               |	РазмещениеЗаказовПокупателейОстатки.ТоварТара,
	               |	РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя,
	               |	РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток КАК Количество
	               |ИЗ
	               |	РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&МоментДокумента, ЗаказПокупателя = &ЗаказПокупателя) КАК РазмещениеЗаказовПокупателейОстатки
	               |ГДЕ
	               |	РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток <> 0";
	
	ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗаказов;

КонецФункции // ПодготовитьТаблицуПоРазмещениюУпр()


Процедура ОбработкаЗаполнения(Основание)
	ЗаказПокупателя = Основание;
КонецПроцедуры
