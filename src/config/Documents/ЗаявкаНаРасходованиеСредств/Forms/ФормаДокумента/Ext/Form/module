////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов;

Перем мТекущееРасширениеФайла;

//Хранит текущую строку списка оплачиваемых документов
Перем СтрокаПлатеж;

Перем СтараяВалютаДокумента;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Устанавливает значение реквизита указанным для выбранного элемента справочника
// "СтатьиОборотов" значением по умолчанию.
//
// Параметры
//  Объект  – реквизит документа, для которого устанавливается значение.
//  Значение - значение по умолчанию
//
//Процедура УстановитьЗначениеПоУмолчанию(Объект,Значение)
//	
//	Если Объект=Неопределено ИЛИ Объект.Пустая() Тогда
//		
//		Если ТипЗнч(Объект)=ТипЗнч(Значение) Тогда
//			
//			Объект=Значение;
//			
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//КонецПроцедуры // УстановитьЗначениеПоУмолчанию()

// Процедура устанавливает автоотметку незаполненного для тех реквизитов,
// обязательность заполнения которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьАвтоотметку()

	Автоотметка = Ложь;
	
	Если НЕ ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Если СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		 ИЛИ СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			АвтоОтметка = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлементыФормы.Сделка.АвтоОтметкаНезаполненного <> Автоотметка Тогда
		ЭлементыФормы.Сделка.АвтоОтметкаНезаполненного = Автоотметка;
	КонецЕсли;

	Если ЭлементыФормы.Сделка.ОтметкаНезаполненного <> Автоотметка И ЗначениеНеЗаполнено(СтрокаПлатеж.Сделка) Тогда
		ЭлементыФормы.Сделка.ОтметкаНезаполненного     = Автоотметка;
	КонецЕсли;

КонецПроцедуры // УстановитьАвтоотментку()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	СтрокаПлатеж.Сделка = Неопределено; // Для сделки нет значения по умолчанию в договоре

	// Надо поменять валюту и курс взаиморасчетов
	мТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(мТекущаяВалютаВзаиморасчетов, Дата);
	
	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	//***20150526 по служ. Серебренниковой автоматически рассчитывать курс в заявке 
	//как средний курс остатков дс на расчетных счетах
	Если НЕ мТекущаяВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоКоду("643") Тогда
		Если Найти(СтрокаПлатеж.ДоговорКонтрагента.Наименование, "#") > 0 Тогда
			
			//После знака # указывается название банка в наименовании договора
			ПозицияСимвола = Найти(СтрокаПлатеж.ДоговорКонтрагента.Наименование, "#")+1;
			Пока НЕ Сред(СтрокаПлатеж.ДоговорКонтрагента.Наименование, ПозицияСимвола, 1) = " " И НЕ Сред(СтрокаПлатеж.ДоговорКонтрагента.Наименование, ПозицияСимвола, 1) = "" Цикл
				ПозицияСимвола = ПозицияСимвола + 1;
			КонецЦикла;
			НаименованиеБанкаВДоговоре = Сред(СтрокаПлатеж.ДоговорКонтрагента.Наименование, Найти(СтрокаПлатеж.ДоговорКонтрагента.Наименование, "#")+1, ПозицияСимвола-Найти(СтрокаПлатеж.ДоговорКонтрагента.Наименование, "#")+1);
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Организация", Организация);
			Запрос.УстановитьПараметр("ВалютаДенежныхСредств", мТекущаяВалютаВзаиморасчетов);
			Запрос.УстановитьПараметр("ПустаяДата", '00010101000000');
			Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
			Запрос.УстановитьПараметр("Наименование", "%"+НаименованиеБанкаВДоговоре+"%");
			Запрос.Текст = "ВЫБРАТЬ
			               |	СУММА(ВЫБОР
			               |			КОГДА А.СуммаОстаток = 0
			               |				ТОГДА 1
			               |			ИНАЧЕ А.СуммаУпрОстаток / А.СуммаОстаток
			               |		КОНЕЦ) КАК СреднийКурс
			               |ИЗ
			               |	(ВЫБРАТЬ
			               |		СУММА(ЕСТЬNULL(ДенежныеСредстваОстатки.СуммаОстаток, 0)) КАК СуммаОстаток,
			               |		СУММА(ДенежныеСредстваОстатки.СуммаУпрОстаток) КАК СуммаУпрОстаток
			               |	ИЗ
			               |		Справочник.БанковскиеСчета КАК БанковскиеСчета
			               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредства.Остатки КАК ДенежныеСредстваОстатки
			               |			ПО (ДенежныеСредстваОстатки.БанковскийСчетКасса = БанковскиеСчета.Ссылка)
			               |	ГДЕ
			               |		БанковскиеСчета.Владелец = &Организация
			               |		И БанковскиеСчета.ВалютаДенежныхСредств = &ВалютаДенежныхСредств
			               |		И (БанковскиеСчета.ДатаЗакрытия = &ПустаяДата
			               |				ИЛИ БанковскиеСчета.ДатаЗакрытия > &ТекущаяДата)
			               |		И БанковскиеСчета.НомерСчета > """"
			               |		И БанковскиеСчета.Наименование ПОДОБНО &Наименование) КАК А
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	А.СуммаОстаток";
			Результат = Запрос.Выполнить().Выбрать();
			Если Результат.Следующий() Тогда
				СтрокаПлатеж.КурсВзаиморасчетов = Результат.СреднийКурс;
				Сообщить("Рассчитан средний курс валюты");
			КонецЕсли;
		КонецЕсли;			   
	КонецЕсли;
	//***
		
	РассчитатьСуммуВзаиморасчетов();

	Если ЗначениеНеЗаполнено(Контрагент) Тогда
		Контрагент = СтрокаПлатеж.ДоговорКонтрагента.Владелец;
	КонецЕсли;
	
	УстановитьАвтоотметку();
	УстановитьВидимость();

КонецПроцедуры // ПриИзмененииДоговора()

Процедура ПриИзмененииКонтрагента()
	
	РасшифровкаПлатежа.Очистить();
	
	СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
	
	//После очистки необходимо заново заполнить статью ддс
	УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж, ВидОперации);	
			Если 	ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику  Тогда
		СтрокаПлатеж.статьяРасхода=Справочники.СтатьиРасходов.ОплатаПоставщику;
		конецЕсли;

	Если ЗначениеНеЗаполнено(ДокументОбъект.Контрагент) Тогда 
		СтрокаПлатеж.ДоговорКонтрагента = Неопределено;
	ИначеЕсли НЕ ОпределитьВидДоговораСКонтрагентом(ВидОперации).НайтиПоЗначению(Контрагент.ОсновнойДоговорКонтрагента.ВидДоговора)=Неопределено Тогда
		Если Организация.Пустая() Тогда
			СтрокаПлатеж.ДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
			Организация=Контрагент.ОсновнойДоговорКонтрагента.Организация;
		ИначеЕсли Контрагент.ОсновнойДоговорКонтрагента.Организация.Пустая()
			ИЛИ Контрагент.ОсновнойДоговорКонтрагента.Организация=Организация Тогда
			СтрокаПлатеж.ДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
		КонецЕсли;
	КонецЕсли;

	СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
	
	БанковскийСчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
		
КонецПроцедуры // ПриИзмененииКонтрагента

// Возвращает фокус на строку ТЧ "Расшифровка платежа" при его потере в режиме редактирования
// одиночного платежа.
Процедура УстановитьФокус()
	
	Если ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=Неопределено Тогда
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=СтрокаПлатеж;
	КонецЕсли;
	
КонецПроцедуры // УстановитьФокус()

// Процедура выполняет заполнение реквизита Получатель значением по умолчанию.
//
Процедура ЗаполнитьПолучателя()

	ВремПолучатель = Неопределено;
	Если ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику Тогда
		ВремКонтрагент = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойПоставщик");

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю Тогда
		ВремКонтрагент = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойПокупатель");

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствКассеККМ Тогда
		ВремПолучатель = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяКассаККМ");
	КонецЕсли;

	Если ЗначениеНеЗаполнено(Получатель) Тогда
		Получатель = ВремПолучатель;
	КонецЕсли;
	
	Если ЗначениеНеЗаполнено(Контрагент) Тогда
		Контрагент = ВремКонтрагент;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПолучателя()

// Процедура рассчитывает сумму взаиморасчетов.
//
Процедура РассчитатьСуммуПлатежа()
	
	Если ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
		//***ВалютаВзаиморасчетов = ВалютаВзаиморасчетовПодотчетника;
		ВалютаВзаиморасчетов = ВалютаДокумента;
	ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Иначе
		СтрокаПлатеж.СуммаПлатежа=СтрокаПлатеж.СуммаВзаиморасчетов;
		СуммаДокумента=СтрокаПлатеж.СуммаВзаиморасчетов;
		Возврат;
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаПлатежа=СтрокаПлатеж.СуммаВзаиморасчетов;
	
	ИначеЕсли (КурсДокумента <> 0) И (СтрокаПлатеж.КратностьВзаиморасчетов <> 0) И (СтрокаПлатеж.КурсВзаиморасчетов <> 0) Тогда
		СтрокаПлатеж.СуммаПлатежа=ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
															ВалютаДокумента,
			                                                СтрокаПлатеж.КурсВзаиморасчетов,КурсДокумента,
															СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);	
	Иначе
		СтрокаПлатеж.СуммаПлатежа = 0;
	КонецЕсли;
	
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");

КонецПроцедуры // РассчитатьСуммуПлатежа()

//Процедура рассчитывает курс взаиморасчетов
//
Процедура РассчитатьКурсВзаиморасчетов()
	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
	
		ТекущийКурс = РегистрыСведений.КурсыВалютДляПоступления.СрезПоследних(Дата,Новый структура("Валюта",ВалютаДокумента));
		Если  ТекущийКурс.Количество()>0 Тогда
			СтрокаПлатеж.КурсВзаиморасчетов  = ТекущийКурс[0].Курс;
			СтрокаПлатеж.кратностьВзаиморасчетов = ТекущийКурс[0].Кратность;	
		иначе
		СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
		конецЕсли;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьКурсВзаиморасчетов

// Процедура рассчитывает сумму взаиморасчетов.
//
Процедура РассчитатьСуммуВзаиморасчетов()
	
	Если ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
		//***ВалютаВзаиморасчетов = ВалютаВзаиморасчетовПодотчетника;
		ВалютаВзаиморасчетов = ВалютаДокумента;
	ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		
	Иначе
		СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
		Возврат;
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
			
	ИначеЕсли (СтрокаПлатеж.КурсВзаиморасчетов <> 0) И (КратностьДокумента <> 0) И (СтрокаПлатеж.КурсВзаиморасчетов <> 0) Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов=ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, ВалютаДокумента,
			                                                  ВалютаВзаиморасчетов,
			                                                  КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
															  КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);	
	Иначе
		СтрокаПлатеж.СуммаВзаиморасчетов = 0;
	КонецЕсли;
	
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");


КонецПроцедуры // РассчитатьСуммуВзаиморасчетов()

// Очищает реквизиты, относящиеся к платежам: при очистке валюты документа они становятся неопределенными.
//
Процедура ПриОчисткеВалютыДокумента()
	
		СуммаДокумента=0;
		КурсДокумента=0;
		КратностьДокумента=0;
		СтараяВалютаДокумента=Справочники.Валюты.ПустаяСсылка();
		
		Для Каждого Платеж Из РасшифровкаПлатежа Цикл
			Платеж.СуммаПлатежа=0;
		КонецЦикла;
		
		БанковскийСчетКасса=Неопределено;
		ВключатьВПлатежныйКалендарь=Ложь;
		
		РазмещениеЗаявки.Очистить();

		УстановитьВидимость();
	
КонецПроцедуры // ПриОчисткеВалютыДокумента()

Процедура ЗаполнитьРазмещение(Отказ)
	
	ТекстУсловия="";
	
	Если ВалютаДокумента.Пустая() Тогда
		Сообщить("Не указана валюта заявки.");
		Отказ=Истина;
		Возврат;
	КонецЕсли;
	
	Если ФормаОплаты.Пустая() Тогда
		Сообщить("Не указана форма оплаты.");
		Отказ=Истина;
		Возврат;
	КонецЕсли;
	
	Запрос=Новый Запрос;
	
	ТекстУсловияОстатки="ВидДенежныхСредств=&ФормаОплаты И БанковскийСчетКасса.ВалютаДенежныхСредств=&ВалютаДокумента";
	ТекстУсловияПоступления="ДокументПланирования.ФормаОплаты=&ФормаОплаты И ДокументПланирования.ВалютаДокумента=&ВалютаДокумента";
	
	Если ФормаОплаты=Перечисления.ВидыДенежныхСредств.Безналичные И Не Организация.Пустая() Тогда
		ТекстУсловияОстатки=ТекстУсловияОстатки+" И БанковскийСчетКасса.Владелец=&Организация";
		ТекстУсловияПоступления=ТекстУсловияПоступления+" И  ДокументПланирования.Организация=&Организация";
		Запрос.УстановитьПараметр("Организация",Организация);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ФормаОплаты",ФормаОплаты );
	Запрос.УстановитьПараметр("ВалютаДокумента",ВалютаДокумента);
	Запрос.УстановитьПараметр("ДатаРасхода",КонецДня(ДатаРасхода));
	Запрос.УстановитьПараметр("ТекущаяЗаявка",Ссылка);
	
	Запрос.УстановитьПараметр("ПредпочтительноеРазмещение",БанковскийСчетКасса);
	
	ТекстЗапросаОстатки="ВЫБРАТЬ
	|	ДенежныеСредстваОстатки.СуммаОстаток 
	|	- ВЫБОР КОГДА НЕ((ДенежныеСредстваВРезервеОстатки.СуммаОстаток) ЕСТЬ NULL ) 
	|		ТОГДА ДенежныеСредстваВРезервеОстатки.СуммаОстаток 
	|		ИНАЧЕ 0 КОНЕЦ 
	|	- ВЫБОР КОГДА НЕ((ДенежныеСредстваКСписаниюОстатки.СуммаОстаток) ЕСТЬ NULL ) 
	|		ТОГДА ДенежныеСредстваКСписаниюОстатки.СуммаОстаток 
	|		ИНАЧЕ 0 КОНЕЦ КАК СвободныйОстаток,
	|	ДенежныеСредстваОстатки.БанковскийСчетКасса КАК МестоРазмещения,
	|	0                                                КАК СортировкаРазмещение,
	|	ВЫБОР
	|		КОГДА ДенежныеСредстваОстатки.БанковскийСчетКасса = &ПредпочтительноеРазмещение ТОГДА
	|			0
	|		ИНАЧЕ
	|			1
	|	КОНЕЦ                                            КАК СортировкаРезерв,
	|	NULL                                             КАК ДатаПоступления
	|	ИЗ
	|	РегистрНакопления.ДенежныеСредства.Остатки(&ДатаРасхода, "+ТекстУсловияОстатки+") КАК ДенежныеСредстваОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваВРезерве.Остатки(&ДатаРасхода, "+ТекстУсловияОстатки+" И НЕ(ДокументРезервирования = &ТекущаяЗаявка)) КАК ДенежныеСредстваВРезервеОстатки
	|		ПО ДенежныеСредстваОстатки.БанковскийСчетКасса = ДенежныеСредстваВРезервеОстатки.БанковскийСчетКасса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваКСписанию.Остатки(&ДатаРасхода, "+ТекстУсловияОстатки+") КАК ДенежныеСредстваКСписаниюОстатки
	|		ПО ДенежныеСредстваОстатки.БанковскийСчетКасса = ДенежныеСредстваКСписаниюОстатки.БанковскийСчетКасса";
	
	ТекстЗапросаРазмещение="ВЫБРАТЬ
	|	ПланируемыеПоступленияДенежныхСредствОстатки.СуммаОстаток 
	|	- ВЫБОР КОГДА НЕ((РазмещениеЗаявокНаРасходованиеСредствОстатки.СуммаОстаток) ЕСТЬ NULL ) 
	|		ТОГДА РазмещениеЗаявокНаРасходованиеСредствОстатки.СуммаОстаток 
	|		ИНАЧЕ 0 КОНЕЦ КАК СвободныйОстаток,
	|	ПланируемыеПоступленияДенежныхСредствОстатки.ДокументПланирования КАК МестоРазмещения,
	|	1                                                        КАК СортировкаРазмещение,
	|	1                                                        КАК СортировкаРезерв,
	|	ПланируемыеПоступленияДенежныхСредствОстатки.ДокументПланирования.ДатаПоступления КАК ДатаПоступления
	|ИЗ
	|	РегистрНакопления.ПланируемыеПоступленияДенежныхСредств.Остатки(&ДатаРасхода,"+ТекстУсловияПоступления+") КАК ПланируемыеПоступленияДенежныхСредствОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаявокНаРасходованиеСредств.Остатки(, НЕ ДокументРезервирования=&ТекущаяЗаявка) КАК РазмещениеЗаявокНаРасходованиеСредствОстатки
	|		ПО ПланируемыеПоступленияДенежныхСредствОстатки.ДокументПланирования = РазмещениеЗаявокНаРасходованиеСредствОстатки.ДокументПланирования";
			
	Если АвтоРазмещениеПоЗаявке И АвтоРезервированиеПоЗаявке Тогда 
		ТекстЗапроса=ТекстЗапросаОстатки+"
		|ОБЪЕДИНИТЬ ВСЕ
		|"+ТекстЗапросаРазмещение+"
		|УПОРЯДОЧИТЬ ПО                 // Определяет стратегию авторезервирования и авторазмещения
		|	СортировкаРазмещение,       // Сначала на местах хранения, потом в планируемых поступлениях
		|	СортировкаРезерв,            // Сначала предпочтительное место хранения, затем остальные
		|	ДатаПоступления УБЫВ        // В порядке убывания даты поступления	";

	ИначеЕсли АвтоРазмещениеПоЗаявке Тогда
		ТекстЗапроса=ТекстЗапросаРазмещение+"
		|УПОРЯДОЧИТЬ ПО                 // Определяет стратегию авторезервирования и авторазмещения
		|	ДатаПоступления УБЫВ        // В порядке убывания даты поступления	";
	ИначеЕсли АвтоРезервированиеПоЗаявке Тогда
		ТекстЗапроса=ТекстЗапросаОстатки+"
		|УПОРЯДОЧИТЬ ПО                 // Определяет стратегию авторезервирования и авторазмещения
		|	СортировкаРезерв             // Сначала предпочтительное место хранения, затем остальные";
		
	КонецЕсли;
	
	Запрос.Текст=ТекстЗапроса;
	
	Таблица=Запрос.Выполнить().Выгрузить();
	
	РазмещеноВручную=РазмещениеЗаявки.Итог("СуммаПлатежа");
	
	ОсталосьРазместить=СуммаДокумента-РазмещеноВручную;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если Строка.СвободныйОстаток>=ОсталосьРазместить Тогда
			
			Размещение=РазмещениеЗаявки.Добавить();
			Размещение.МестоРазмещения=Строка.МестоРазмещения;
			Размещение.СуммаПлатежа=ОсталосьРазместить;
			
			Прервать;
			
		Иначе
			
			Размещение=РазмещениеЗаявки.Добавить();
			Размещение.МестоРазмещения=Строка.МестоРазмещения;
			Размещение.СуммаПлатежа=Строка.СвободныйОстаток;
			
			ОсталосьРазместить=ОсталосьРазместить-Размещение.СуммаПлатежа;
			
		КонецЕсли;
		
	КонецЦикла;
		

КонецПроцедуры // ЗаполнитьРазмещение()

Процедура НачалоВыбораРазмещенияЗаявки(ФормаДокумента, ЭлементФормы, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Метаданные.Документы.ПланируемоеПоступлениеДенежныхСредств.Имя, Метаданные.Документы.ПланируемоеПоступлениеДенежныхСредств.Синоним);
	
	Если ФормаОплаты=Перечисления.ВидыДенежныхСредств.Безналичные Тогда
		СписокТипов.Добавить(Метаданные.Справочники.БанковскиеСчета.Имя, Метаданные.Справочники.БанковскиеСчета. Синоним);
	Иначе
		СписокТипов.Добавить(Метаданные.Справочники.Кассы.Имя, Метаданные.Справочники.Кассы. Синоним);
	КонецЕсли;

	ВыбранныйЭлемент = ФормаДокумента.ВыбратьИзСписка(СписокТипов,ЭлементФормы);

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = Метаданные.Документы.ПланируемоеПоступлениеДенежныхСредств.Имя Тогда
		
		СтандартнаяОбработка=Ложь;
				
		СтруктураПараметров=Новый Структура;
		СтруктураПараметров.Вставить("ФормаДокумента"				,ЭтаФорма);
		СтруктураПараметров.Вставить("ФормаОплаты"					,ФормаОплаты);
		СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
		СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
		СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
		СтруктураПараметров.Вставить("ДатаДок"						,ДатаРасхода);
		СтруктураПараметров.Вставить("ИмяРегистра"					,"ПланируемыеПоступленияДенежныхСредств");
		СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			,Истина);
		СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Ложь);
		СтруктураПараметров.Вставить("СуммаДокумента"				,СуммаДокумента);
		СтруктураПараметров.Вставить("ВидОперации"					,);
		СтруктураПараметров.Вставить("БанковскийСчетКасса"			,БанковскийСчетКасса);
		СтруктураПараметров.Вставить("Организация"					,Организация);
		СтруктураПараметров.Вставить("Проект"						,);
		СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств",);
		СтруктураПараметров.Вставить("Контрагент"					,);
		СтруктураПараметров.Вставить("ДоговорКонтрагента"			,);
		СтруктураПараметров.Вставить("Сделка"						,);
		
		ПодборДокументовПланирования(СтруктураПараметров);
		
	Иначе

		// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
		// значение было присвоено стандартно.
		ФормаВыбора = Справочники[ВыбранныйЭлемент.Значение].ПолучитьФормуВыбора(,ЭлементФормы,);
		
		ФормаВыбора.Отбор.ВалютаДенежныхСредств.Значение=ВалютаДокумента;
		ФормаВыбора.Отбор.ВалютаДенежныхСредств.Использование=Истина;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВалютаДенежныхСредств.Доступность=Ложь;
		
		Если ФормаОплаты=Перечисления.ВидыДенежныхСредств.Безналичные И НЕ ЗначениеНеЗаполнено(Организация)Тогда
			
			ФормаВыбора.Отбор.Владелец.Значение=Организация;
			ФормаВыбора.Отбор.Владелец.Использование=Истина;
		    ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность=Ложь;
			
		КонецЕсли;
			
			ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
		
		Если Не ЗначениеНеЗаполнено(ЭлементыФормы.РазмещениеЗаявки.ТекущиеДанные.МестоРазмещения)
			И ТипЗнч(ЭлементыФормы.РазмещениеЗаявки.ТекущиеДанные.МестоРазмещения)=Тип("СправочникСсылка."+ВыбранныйЭлемент.Значение) Тогда
			
			ФормаВыбора.ПараметрТекущаяСтрока=ЭлементыФормы.РазмещениеЗаявки.ТекущиеДанные.МестоРазмещения;
			
		КонецЕсли;
		
		ФормаВыбора.Открыть();
		
	КонецЕсли;
		
КонецПроцедуры // НачалоВыбораРазмещенияЗаявки()

Процедура РассчитатьСуммуПлатежаТаблица()
	
	Для Каждого Строка Из РасшифровкаПлатежа Цикл
		
		Если ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
			//***ВалютаВзаиморасчетов = ВалютаВзаиморасчетовПодотчетника;
			ВалютаВзаиморасчетов = ВалютаДокумента;
		ИначеЕсли ЕстьРасчетыПоКредитам ИЛИ ЕстьРасчетыСКонтрагентами Тогда
			ВалютаВзаиморасчетов= Строка.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		Иначе
			Строка.СуммаПлатежа=Строка.СуммаВзаиморасчетов;
			Продолжить;
		КонецЕсли;
		
		Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
		Строка.СуммаПлатежа=Строка.СуммаВзаиморасчетов;
	
		ИначеЕсли (КурсДокумента <> 0) И (Строка.КратностьВзаиморасчетов <> 0) И (Строка.КурсВзаиморасчетов <> 0) Тогда
			Строка.СуммаПлатежа=ПересчитатьИзВалютыВВалюту(Строка.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
			ВалютаДокумента,
			Строка.КурсВзаиморасчетов,КурсДокумента,
			Строка.КратностьВзаиморасчетов,КратностьДокумента);	
		Иначе
			Строка.СуммаПлатежа = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	СтрокаПлатеж=РасшифровкаПлатежа[0];
	
КонецПроцедуры // РассчитатьСуммуПлатежаТаблица()



// Процедура вызывается при нажатии кнопки "Заполнить и провести" командной панели формы,
// вызывает заполнение документа с проведением.
//
Процедура ДействияФормыДействиеЗаполнитьИПровести(Кнопка)
	
	Если РазмещениеЗаявки.Итог("СуммаПлатежа")=СуммаДокумента Тогда
		Сообщить("Заявка размещена полностью.");
		Возврат;
	КонецЕсли;
	
	Если АвтоРазмещениеПоЗаявке ИЛИ АвтоРезервированиеПоЗаявке Тогда
				
		Если НЕ ЭтоНовый() Тогда
			
			// Если документ ранее был записан, то он будет переноситься в конец дня из-за оперативного проведения, о чем следует предупредить.
			Ответ = Вопрос("В режиме заполнения с проведением документ будет проводиться оперативно. " + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
		КонецЕсли; 
		
		// Обработка выполняется в транзакции. Она будет отменена, если заполнить не удалось
		НачатьТранзакцию();
		Отказ = Ложь;

		// Очистим записи документа по размещению, если он был ранее проведен
		Если Проведен Тогда
			НаборОстаткиРезерв = РегистрыНакопления.ДенежныеСредстваВРезерве.СоздатьНаборЗаписей();
			НаборОстаткиРезерв.Отбор.Регистратор.Установить(Ссылка);
			НаборОстаткиРезерв.Прочитать();
			НаборОстаткиРезерв.Очистить();
			НаборОстаткиРезерв.Записать();
			НаборПланируемоеПоступление  = РегистрыНакопления.РазмещениеЗаявокНаРасходованиеСредств.СоздатьНаборЗаписей();
			НаборПланируемоеПоступление.Отбор.Регистратор.Установить(Ссылка);
			НаборПланируемоеПоступление.Прочитать();
			НаборПланируемоеПоступление.Очистить();
			НаборПланируемоеПоступление.Записать();
		КонецЕсли;

		// Заполнение документа
		ЗаполнитьРазмещение(Отказ);

		// Если заполнить удалось, то запись документа с проведением

		НеПроведен = Ложь;
		Если НЕ Отказ Тогда
			Попытка
				Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
			Исключение
				НеПроведен = Истина;
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;

		Если Отказ ИЛИ НеПроведен Тогда
			ОтменитьТранзакцию();
			Если НеПроведен Тогда
				Предупреждение("Операция не выполнена!");
			КонецЕсли;
			
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли; 

	Иначе
		Предупреждение("Для режима заполнения с проведением требуется установка флагов ""Авторазмещение"" или ""Авторезервирование""");
	КонецЕсли; 

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеЗаполнитьИПровести()

// Процедура - обработчик события "Файлы".
//
Процедура ДействияФормыФайлы(Кнопка)
	
	Если Ссылка.Пустая() Тогда
		Предупреждение("Сначала запишите документ.");
		Возврат;
	КонецЕсли;

	ФормаФайлов = Справочники.ХранилищеДополнительнойИнформации.ПолучитьФорму("ФормаСпискаФайловИИзображений", ЭтаФорма);
	
	ФормаФайлов.Изображения.Отбор.Объект.Использование                               = Истина;
	ФормаФайлов.Изображения.Отбор.Объект.Значение                                    = Ссылка;
	ФормаФайлов.ЭлементыФормы.Изображения.НастройкаОтбора.Объект.Доступность         = Ложь;
	ФормаФайлов.ЭлементыФормы.Изображения.Колонки.Объект.Видимость                   = Ложь;

	ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Использование                       = Истина;
	ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Значение                            = Ссылка;
	ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.НастройкаОтбора.Объект.Доступность = Ложь;
	ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.Колонки.Объект.Видимость           = Ложь;

	ОбязательныеОтборы = Новый Структура;
	ОбязательныеОтборы.Вставить("Объект",Ссылка);

	ФормаФайлов.ОбязательныеОтборы = ОбязательныеОтборы;
	
	ФормаФайлов.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость ренквизитов формы
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	
	Для Индекс=1 по ЭлементыФормы.ОсновнаяПанель.Страницы.Количество() Цикл
		
		ЭлементыФормы.ОсновнаяПанель.Страницы[Индекс-1].Видимость=Истина;
		
	КонецЦикла;
	
	ЭлементыФормы.КонтрТранзит.Видимость = (ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю);
	ЭлементыФормы.Транзитный.Видимость = (ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю);

	
	Если ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы["ВыдачаПодотчетнику"];
		
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Заголовок="Выдача подотчетнику";
		ЭлементыФормы.НадписьФизЛицо.Заголовок="Подотчетник";
		ЭлементыФормы.НадписьДокумент.Заголовок="Авансовый отчет";
		
		ЭлементыФормы.ОсновнаяПанель.Страницы["Расчеты"].Видимость=Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы["ВыдачаКассеККМ"].Видимость=Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы["Прочие"].Видимость=Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы["СтраницаПеречислениеНалогов"].Видимость=Ложь;
		
		ЭлементыФормы.НадписьРедактировать.Видимость = Ложь;
		ЭлементыФормы.Список.Видимость = Ложь;
		ЭлементыФормы.Список1.Видимость = Ложь;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствКассеККМ Тогда
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы["ВыдачаКассеККМ"];
		
		ЭлементыФормы.ОсновнаяПанель.Страницы["Расчеты"].Видимость=Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы["ВыдачаПодотчетнику"].Видимость=Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы["Прочие"].Видимость=Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы["СтраницаПеречислениеНалогов"].Видимость=Ложь;
		
		ЭлементыФормы.НадписьРедактировать.Видимость = Ложь;
		ЭлементыФормы.Список.Видимость = Ложь;
		ЭлементыФормы.Список1.Видимость = Ложь;
		
	ИначеЕсли ЕстьРасчетыСКонтрагентами Тогда
		
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы["Расчеты"];
		
		ЭлементыФормы.ОсновнаяПанель.Страницы["ВыдачаКассеККМ"].Видимость=Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы["ВыдачаПодотчетнику"].Видимость=Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы["Прочие"].Видимость=Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы["СтраницаПеречислениеНалогов"].Видимость=Ложь;
		
		Если Список Тогда
			УстановитьТекущуюСтраницу("ПлатежПоНесколькимСделкам", ЭлементыФормы.ПанельПлатежи);
		Иначе
			УстановитьТекущуюСтраницу("ПлатежПоОднойСделке", ЭлементыФормы.ПанельПлатежи);
		КонецЕсли;
		
		ЭлементыФормы.Сделка.Доступность=Истина;
		
		ЭлементыФормы.НадписьРедактировать.Видимость = Истина;
		ЭлементыФормы.Список.Видимость = Истина;
		ЭлементыФормы.Список1.Видимость = Истина;
		
		Если СтрокаПлатеж.ДоговорКонтрагента.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			ЭлементыФормы.Сделка.Доступность=Ложь;
		Иначе
			ЭлементыФормы.Сделка.Доступность=Истина;
		КонецЕсли;
		
	ИначеЕсли ЕстьРасчетыПоКредитам Тогда
		
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы["Расчеты"];
		
		ЭлементыФормы.ОсновнаяПанель.Страницы["ВыдачаКассеККМ"].Видимость=Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы["ВыдачаПодотчетнику"].Видимость=Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы["Прочие"].Видимость=Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы["СтраницаПеречислениеНалогов"].Видимость=Ложь;
		
		УстановитьТекущуюСтраницу("ПлатежПоОднойСделке", ЭлементыФормы.ПанельПлатежи);
		
		ЭлементыФормы.Сделка.Доступность=Ложь;
		
		ЭлементыФормы.НадписьРедактировать.Видимость = Ложь;
		ЭлементыФормы.Список.Видимость = Ложь;
		ЭлементыФормы.Список1.Видимость = Ложь;
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПеречислениеНалога 
		или ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщикуСКодомКБК Тогда
		
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы["СтраницаПеречислениеНалогов"];
		
		ЭлементыФормы.ОсновнаяПанель.Страницы["Расчеты"].Видимость=Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы["ВыдачаПодотчетнику"].Видимость=Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы["ВыдачаКассеККМ"].Видимость=Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы["Прочие"].Видимость=Ложь;
		
		ЭлементыФормы.НадписьРедактировать.Видимость = Ложь;
		ЭлементыФормы.Список.Видимость = Ложь;
		ЭлементыФормы.Список1.Видимость = Ложь;
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочийРасходДенежныхСредств Тогда
		
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы["Прочие"];
		
		ЭлементыФормы.ОсновнаяПанель.Страницы["Расчеты"].Видимость=Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы["ВыдачаПодотчетнику"].Видимость=Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы["ВыдачаКассеККМ"].Видимость=Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы["СтраницаПеречислениеНалогов"].Видимость=Ложь;
		
		ЭлементыФормы.НадписьРедактировать.Видимость = Ложь;
		ЭлементыФормы.Список.Видимость = Ложь;
		ЭлементыФормы.Список1.Видимость = Ложь;
	КонецЕсли;
	 Если видОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику Тогда
	 ЭлементыФормы.РаспределитьПоЗаказам.Видимость = Истина;
     иначе
	 ЭлементыФормы.РаспределитьПоЗаказам.Видимость = Ложь;
	 конецЕсли;

	Если НЕ БанковскийСчетКасса=Неопределено И НЕ БанковскийСчетКасса.Пустая() Тогда
		ЭлементыФормы.ВалютаДокумента.Доступность=Ложь;
	Иначе
		ЭлементыФормы.ВалютаДокумента.Доступность=Истина;
	КонецЕсли;
	
	Если Список Тогда
		ЭлементыФормы.ПанельПлатежи.Страницы["ПлатежПоОднойСделке"].Видимость=Ложь;
		ЭлементыФормы.ПанельПлатежи.Страницы["ПлатежПоНесколькимСделкам"].Видимость=Истина;
		ЭлементыФормы.ПанельПлатежи.ТекущаяСтраница=ЭлементыФормы.ПанельПлатежи.Страницы["ПлатежПоНесколькимСделкам"];
	Иначе
		ЭлементыФормы.ПанельПлатежи.Страницы["ПлатежПоОднойСделке"].Видимость=Истина;
		ЭлементыФормы.ПанельПлатежи.Страницы["ПлатежПоНесколькимСделкам"].Видимость=Ложь;
	КонецЕсли;
	
	УстановитьДоступностьКнопкиЗаполнитьИПровести();
	
	Если ВалютаДокумента.Пустая() Тогда
		
		ЭлементыФормы.КурсДокумента.Доступность=Ложь;
		ЭлементыФормы.БанковскийСчетКасса.Доступность=Ложь;
		ЭлементыФормы.ВключатьВПлатежныйКалендарь.Доступность=Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы["Размещение"].Видимость=Ложь;
		ЭлементыФормы.РасшифровкаПлатежа.Колонки.СуммаПлатежа.Доступность=Ложь;
		ЭлементыФормы.СуммаПлатежа.Доступность=Ложь;
		ЭлементыФормы.СуммаПлатежаПодотчет.Доступность=Ложь;
		
	Иначе
		
		ЭлементыФормы.КурсДокумента.Доступность=Истина;
		ЭлементыФормы.БанковскийСчетКасса.Доступность=Истина;
		ЭлементыФормы.ВключатьВПлатежныйКалендарь.Доступность=Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы["Размещение"].Видимость=Истина;
		ЭлементыФормы.РасшифровкаПлатежа.Колонки.СуммаПлатежа.Доступность=Истина;
		ЭлементыФормы.СуммаПлатежа.Доступность=Истина;
		ЭлементыФормы.СуммаПлатежаПодотчет.Доступность=Истина;
		
	КонецЕсли;
	
	
	
	// { Лапенков 20081009 скрываем лишние реквизиты
	ЭлементыФормы.ВключатьВПлатежныйКалендарь.Видимость=Ложь;
	ЭлементыФормы.БанковскийСчетКасса.Видимость=Ложь;
	ЭлементыФормы.НадписьСчетКасса.Видимость=Ложь;
	// } Лапенков 20081009 
	
	//ВидимостьРеквизитаПроект(ЭтотОбъект, ЭлементыФормы, "НадписьПроект,Проект,НадписьПроект1,Проект1,НадписьПроект2,Проект2,НадписьПроект3,Проект3,РасшифровкаПлатежа.Проект");
	
	
	// { Лапенков 20081010 отображаем кнопки "Согласовать", "Утвердить" и "Отклонить" в зависимости от прав пользователя и состояния документа
	
	ЭлементыФормы.НадписьПричинаОтклонения.Видимость=(Состояние=Перечисления.СостоянияОбъектов.Подготовлен) ИЛИ (Состояние=Перечисления.СостоянияОбъектов.Отклонен);
	ЭлементыФормы.ПричинаОтклонения.Видимость=(Состояние=Перечисления.СостоянияОбъектов.Подготовлен) ИЛИ (Состояние=Перечисления.СостоянияОбъектов.Отклонен);
	
	ЭлементыФормы.ДействияФормы.Кнопки.ДействиеПодготовить.Доступность=ЗначениеНеЗаполнено(Состояние);
	
	ЭлементыФормы.ДействияФормы.Кнопки.ДействиеУтвердить.Доступность=(Состояние=Перечисления.СостоянияОбъектов.Подготовлен) И ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьУтверждатьЗаявки") И РольДоступна("яштФинДиректор");
	
	Если Подразделение.ОбособленноеПодразделение Тогда
		//***20151225 Заявки на наличку в ОП создает и подготавливает пользователь, согласовывает руководитель ОП, утверждает Серков
		Если ФормаОплаты = Перечисления.ВидыДенежныхСредств.Наличные И НЕ РольДоступна("яштФинДиректор") Тогда
			ЭлементыФормы.ДействияФормы.Кнопки.ДействиеУтвердить.Доступность = (Состояние=Перечисления.СостоянияОбъектов.Согласован) И ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьУтверждатьЗаявки");
		Иначе
			ЭлементыФормы.ДействияФормы.Кнопки.ДействиеУтвердить.Доступность = (Состояние=Перечисления.СостоянияОбъектов.Подготовлен ИЛИ Состояние=Перечисления.СостоянияОбъектов.Согласован) И ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьУтверждатьЗаявки");
		КонецЕсли;
	КонецЕсли;
	
	//***2016.03.28 чтоб статью ддс не выбирали, а выбирали Вид операции!!!
	Если глТекущийПользователь.ОсновноеПодразделение.ОбособленноеПодразделение Тогда
		Если Список Тогда
			ЭлементыФормы.РасшифровкаПлатежа.Колонки.СтатьяДвиженияДенежныхСредств.Доступность = Ложь;
		Иначе
			ЭлементыФормы.СтатьяДвиженияДенежныхСредств.Доступность = Ложь;
			ЭлементыФормы.СтатьяДвиженияДенежныхСредств1.Доступность = Ложь;
			ЭлементыФормы.СтатьяДвиженияДенежныхСредств2.Доступность = Ложь;
			ЭлементыФормы.СтатьяДвиженияДенежныхСредств3.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	//***
	
	ЭлементыФормы.ДействияФормы.Кнопки.ДействиеОтклонить.Доступность = (Состояние=Перечисления.СостоянияОбъектов.Подготовлен ИЛИ Состояние=Перечисления.СостоянияОбъектов.Согласован) И ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьУтверждатьЗаявки");
	
	Если Ссылка.Проведен Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОК.Доступность = ЗначениеНеЗаполнено(Состояние);
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Записать.Доступность = ЗначениеНеЗаполнено(Состояние);
	Иначе
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОК.Доступность = Истина;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Записать.Доступность = Истина;
	КонецЕсли;
	//
	
	ОтображатьПериод=Константы.ОплатыРаспределяютМенеджеры.Получить();
	ЭлементыФормы.Надпись4.Видимость=не ОтображатьПериод;
	ЭлементыФормы.ДатаРасхода.Видимость=не ОтображатьПериод;
	ЭлементыФормы.НадписьПериодПланирования.Видимость= ОтображатьПериод;
	ЭлементыФормы.ПериодПланирования.Видимость= ОтображатьПериод;
	
	//*** Расчетный счет контрагента, на который надо перевести д/с указывается в заявке только на безналичные
	ЭлементыФормы.БанковскийСчетКонтрагента1.Видимость			 = (ФормаОплаты=Перечисления.ВидыДенежныхСредств.Безналичные);
	ЭлементыФормы.НадписьБанковскийСчетКонтрагента1.Видимость	 = (ФормаОплаты=Перечисления.ВидыДенежныхСредств.Безналичные);
	
КонецПроцедуры // УстановитьВидимость()

// Устанавливает тип поля "Получатель" в зависимости от вида операции.
//
// Параметры:
//  Нет.
//
Процедура УстановитьТипПолучатель()
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСправочника = "Контрагенты";
	ИмяРасчетногоДокумента="АвансовыйОтчет";

	Если ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствКассеККМ Тогда
		
		ИмяСправочника = "КассыККМ";
			
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		ИмяСправочника = "ФизическиеЛица";
		
	КонецЕсли;
	
	Если ТипЗнч(Получатель) <> Тип("СправочникСсылка." + ИмяСправочника) Тогда
		Получатель = Справочники[ИмяСправочника].ПустаяСсылка();
	КонецЕсли; 
	
	Если ТипЗнч(РасчетныйДокумент) <> Тип("ДокументСсылка." + ИмяРасчетногоДокумента) Тогда
		РасчетныйДокумент = Документы[ИмяРасчетногоДокумента].ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры // УстановитьТипПолучатель()

// Процедура устанавливает доступность кнопки "Заполнить и провести". Кнопка доступна,
// если документ - внешний заказ, его дата совпадает с текущей и установлен хотя бы один
// из флагов Авторазмещение или Авторезервирование.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьКнопкиЗаполнитьИПровести()

	ЭлементыФормы.КоманднаяПанель1.Кнопки.ДействиеЗаполнитьИПровести.Доступность = 
		НачалоДня(Дата) = НачалоДня(ТекущаяДата()) И (АвтоРезервированиеПоЗаявке ИЛИ АвтоРазмещениеПоЗаявке);

КонецПроцедуры // УстановитьДоступностьКнопкиЗаполнитьИПровести

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ


// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	Если РасшифровкаПлатежа.Количество()=0 Тогда
		НоваяСтрока=РасшифровкаПлатежа.Добавить();
		
		///заполнить статью бюджета ДС по умолчанию
		новаястрока.ОтветственныйЗаПланирование = глТекущийПользователь;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПользователей.Значение
		|ИЗ
		|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
		|ГДЕ
		|	НастройкиПользователей.Пользователь = &Пользователь
		|	И НастройкиПользователей.Настройка = &Настройка";
		
		Запрос.УстановитьПараметр("Настройка", планыВидовХарактеристик.НастройкиПользователей.НайтиПоКоду("00192"));
		Запрос.УстановитьПараметр("Пользователь", глТекущийПользователь);
		
		Результат = Запрос.Выполнить();
		
		Если не Результат.Пустой() Тогда
			новаястрока.СтатьяРасхода = Результат.Выгрузить()[0].Значение;
		конецесли;

		
	КонецЕсли;
	
	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
	СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если ЭтоНовый() Тогда
		
		ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета,РасшифровкаПлатежа);
		ФормаОплаты = Перечисления.ВидыДенежныхСредств.Безналичные;
		УстановитьНомерДокумента(ЭтотОбъект);
		
		// Заполнить реквизит Получатель значением по умолчанию.
		ЗаполнитьПолучателя();
		Ответственный = глТекущийПользователь;
		Организация = Справочники.Организации.НайтиПоКоду("00001");
		Подразделение = глТекущийПользователь.ОсновноеПодразделение;
		УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);
		Если 	ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику и не ЗначениеЗаполнено(СтрокаПлатеж.статьяРасхода) Тогда
			СтрокаПлатеж.статьяРасхода=Справочники.СтатьиРасходов.ОплатаПоставщику;
		конецЕсли;
		// { Лапенков 20081013 - у новой заявки всегда состояние = Пусто
		Состояние = Перечисления.СостоянияОбъектов.ПустаяСсылка();
		утвердил = Справочники.Пользователи.ПустаяСсылка();
		// } Лапенков 20081013 
		
		
		
	Иначе
		
		ЭтаФорма.ТолькоПросмотр = НЕ ЗначениеНеЗаполнено(Состояние) И НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьУтверждатьЗаявки");
		ЕстьРасчетыСКонтрагентами = ЕстьРасчетыСКонтрагентами(ВидОперации);
		ЕстьРасчетыПоКредитам = ЕстьРасчетыПоКредитам(ВидОперации);
		
	КонецЕсли;
	
	
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	Если глТекущийПользователь.ОсновноеПодразделение.ОбособленноеПодразделение Тогда 
		УстановитьУрезанныйВидПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));
	Иначе
		УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));
	КонецЕсли;

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Установить тип поля Получатель.
	Если НЕ Проведен Тогда
		УстановитьТипПолучатель();
	КонецЕсли;
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	
	Если РасшифровкаПлатежа.Количество()>1 Тогда
		Список = Истина;
	Иначе
		Список = Ложь;
	КонецЕсли;	
			
	СтараяВалютаДокумента = ВалютаДокумента;	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	
	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 

	Если видОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику Тогда
	ЭлементыФормы.РаспределитьПоЗаказам.Видимость = Истина;
	конецЕсли;
	
КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	//ЭлементыФормы.ИнфНадписьКурса.Заголовок = ПолучитьИнформациюКурсаВалютыСтрокой(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
	//																				 СтрокаПлатеж.КурсВзаиморасчетов,
	//																				 СтрокаПлатеж.КратностьВзаиморасчетов,
	//																				 мВалютаРегламентированногоУчета,
	//																				 Истина);
																					 
	// Установим заголовки по значению поля "Получатель" 
	// (это или контрагент или подотчетник или КассаККМ).
	Если ЕстьРасчетыПоКредитам ИЛИ ЕстьРасчетыСКонтрагентами Тогда

		// Надпись реквизита "Сделка".
		//НадписьСделка = "Сделка";
		//Если Не ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		//	Если СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
		//		НадписьСделка = "Расчетный документ:";
		//	Иначе
		//		Если ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
		//			НадписьСделка = "Заказ покупателя:";
		//		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком Тогда
		//			НадписьСделка = "Заказ поставщику:";
		//		КонецЕсли; 
		//	КонецЕсли;
		//КонецЕсли;

		//ЭлементыФормы.НадписьСделка.Заголовок = НадписьСделка;

		// Надпись НадписьСуммаВзаиморасчетов
		ВалютаВзаиморасчетовПоДоговору = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		Если ЗначениеНеЗаполнено(ВалютаВзаиморасчетовПоДоговору) Тогда
			ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма <нет валюты>:";
		Иначе	
			ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма " + СокрЛП(ВалютаВзаиморасчетовПоДоговору) + ":";
		КонецЕсли;	

	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда

		// Надпись НадписьСуммаВзаиморасчетов
		Если ЗначениеНеЗаполнено(ВалютаВзаиморасчетовПодотчетника) Тогда
			//***ЭлементыФормы.НадписьСуммаВзаиморасчетовПодотчетник.Заголовок = "Сумма <нет валюты>:";
			ЭлементыФормы.НадписьСуммаВзаиморасчетовПодотчетник.Заголовок = "Сумма " + СокрЛП(ВалютаВзаиморасчетовПодотчетника) + ":";
		Иначе	
			ЭлементыФормы.НадписьСуммаВзаиморасчетовПодотчетник.Заголовок = "Сумма " + СокрЛП(ВалютаДокумента) + ":";
		КонецЕсли;
		
		//***ЭлементыФормы.ИнфНадписьКурса1.Заголовок = ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаВзаиморасчетовПодотчетника, 
																					 //СтрокаПлатеж.КурсВзаиморасчетов,
																					 //СтрокаПлатеж.КратностьВзаиморасчетов,
	                                                                                 //мВалютаРегламентированногоУчета,
																					 //Истина);
																					 
	КонецЕсли;
	
	ЭлементыФормы.НадписьИтогоСписок.Заголовок="Итого платежей по списку: "+
									Формат(РасшифровкаПлатежа.Итог("СуммаПлатежа"),"ЧЦ=15; ЧДЦ=2; ЧН=Ноль")+
									" "+СокрЛП(ВалютаДокумента.Наименование);
									
	//ЭлементыФормы.НадписьИтогоРазмещено.Заголовок="Итого размещено: "+
	//								Формат(РазмещениеЗаявки.Итог("СуммаПлатежа"),"ЧЦ=15; ЧДЦ=2; ЧН=Ноль")+
	//								" "+СокрЛП(ВалютаДокумента.Наименование);
									
	Если ВалютаДокумента.Пустая() Тогда
		
		ЭлементыФормы.НадписьСуммаДокумента.Заголовок="Не указана валюта расхода денежных средств!";
		ЭлементыФормы.НадписьСуммаДокумента.ЦветТекста=ЦветаСтиля.ТекстПредупреждающейНадписи;
		
	Иначе
		
		ЭлементыФормы.НадписьСуммаДокумента.Заголовок="Всего по заявке: "+
									Формат(СуммаДокумента,"ЧЦ=15; ЧДЦ=2; ЧН=Ноль")+
									" "+СокрЛП(ВалютаДокумента.Наименование);
									
		ЭлементыФормы.НадписьСуммаДокумента.ЦветТекста=ЦветаСтиля.ТекстИнформационнойНадписи;
		
	КонецЕсли;
	
	ТекстВалюта=Строка(ВалютаДокумента);
	
	ЭлементыФормы.НадписьВалютаДокумент.Заголовок=ТекстВалюта;
	ЭлементыФормы.НадписьВалютаДокумент1.Заголовок=ТекстВалюта;
    ЭлементыФормы.НадписьВалютаДокумент2.Заголовок=ТекстВалюта;
	ЭлементыФормы.НадписьВалютаДокумент3.Заголовок=ТекстВалюта;
	ЭлементыФормы.НадписьВалютаДокумент4.Заголовок=ТекстВалюта;
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.Размещение.Видимость=Ложь;
	
	ЭлементыФормы.НадписьПериодПланирования.Значение="Период планирования: "+?(ЗначениеНеЗаполнено(ПериодПланирования),"",Формат(ПериодПланирования,"ДФ='MMMM yyyy'"));
		
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	НапечататьДокументПоУмолчанию(ЭтотОбъект, глТекущийПользователь, Кнопка.Текст);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование[Кнопка.Имя];
	КонецЕсли;
	
	РасшифровкаПлатежа.Очистить();
	СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
	
		///заполнить статью бюджета ДС по умолчанию
		СтрокаПлатеж.ОтветственныйЗаПланирование = глТекущийПользователь;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПользователей.Значение
		|ИЗ
		|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
		|ГДЕ
		|	НастройкиПользователей.Пользователь = &Пользователь
		|	И НастройкиПользователей.Настройка = &Настройка";
		
		Запрос.УстановитьПараметр("Настройка", планыВидовХарактеристик.НастройкиПользователей.НайтиПоКоду("00192"));
		Запрос.УстановитьПараметр("Пользователь", глТекущийПользователь);
		
		Результат = Запрос.Выполнить();
		
		Если не Результат.Пустой() Тогда
			СтрокаПлатеж.СтатьяРасхода = Результат.Выгрузить()[0].Значение;
		конецесли;


	
	
	
	
	УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);
	Если ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику и не ЗначениеЗаполнено(СтрокаПлатеж.СтатьяРасхода) Тогда
		СтрокаПлатеж.статьяРасхода=Справочники.СтатьиРасходов.ОплатаПоставщику;
	конецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику  Тогда
		ФормаОплаты = Перечисления.ВидыДенежныхСредств.Наличные;
	конецЕсли;

	
	ЕстьРасчетыСКонтрагентами=ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=ЕстьРасчетыПоКредитам(ВидОперации);

	// Отобразить в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);
	
	УстановитьФокус();

	//Надо определить тип поля "Получатель"
	УстановитьТипПолучатель();	
		
	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	Если ЗначениеНеЗаполнено(ДатаРасхода) И НЕ ВалютаДокумента.Пустая() Тогда
		
		УстановитьКурсДокумента(Дата);
		РассчитатьСуммуПлатежаТаблица();
		
	КонецЕсли;
	
	УстановитьДоступностьКнопкиЗаполнитьИПровести();
			
КонецПроцедуры // ДатаПриИзменении()

// Рассчитывает новый курс документа при смене даты
//
Процедура УстановитьКурсДокумента(ДатаКурса)
	
	СтруктураКурсаВалютаДокумента = ПолучитьКурсВалюты(ВалютаДокумента, ДатаКурса);
	КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
	КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;
	
КонецПроцедуры // УстановитьКурсДокумента()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// проставим основной договор контрагента
	ПриИзмененииКонтрагента();	
	
	
	//+++ 08.04.2014 для Серебренниковой
	Если ЗначениеЗаполнено(Контрагент) тогда
		//отдел сбыта
		Если ПараметрыСеанса.ТекущийПользователь.ОсновноеПодразделение = справочники.Подразделения.НайтиПоКоду("00006") тогда
			договор1 = найтиДоговорПоставщика();
			Если договор1<>неопределено тогда
				Если РасшифровкаПлатежа.Количество()=0 тогда
				СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
				СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
				иначе //Если РасшифровкаПлатежа.Количество()>=1 тогда
				СтрокаПлатеж = РасшифровкаПлатежа[0];
				КонецЕсли;
				СтрокаПлатеж.ДоговорКонтрагента = договор1;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	//+++)
	
	ПриИзмененииДоговора();
	
	УстановитьФокус();

КонецПроцедуры // КонтрагентПриИзменении()

//+++ 08.04.2014
функция найтиДоговорПоставщика()
	
	Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	ДоговорыКонтрагентов.Ссылка
	 |ИЗ
	 |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	 |ГДЕ
	 |	ДоговорыКонтрагентов.Владелец = &Владелец
	 |	И ДоговорыКонтрагентов.ОтветственноеЛицо = &ОтветственноеЛицо
	 |	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
	 |	И ДоговорыКонтрагентов.Организация = &Организация";
	 
	 Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	 Запрос.УстановитьПараметр("Организация", ЭтотОбъект.Организация);
	 Запрос.УстановитьПараметр("Владелец", ЭтотОбъект.Контрагент);
	 Запрос.УстановитьПараметр("ОтветственноеЛицо", ПараметрыСеанса.ТекущийПользователь);
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Если Выборка.Следующий() тогда
		рез = выборка.ссылка;
	 Иначе
		рез = Неопределено;
	 КонецЕсли;
	 
	 возврат рез;
	 
КонецФункции	

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаДокумента".
//
Процедура СуммаПлатежаПриИзменении(Элемент)

	РассчитатьКурсВзаиморасчетов();
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");

КонецПроцедуры // СуммаДокументаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "КурсДокумента".
//
Процедура КурсДокументаПриИзменении(Элемент)

	РассчитатьСуммуПлатежаТаблица();

КонецПроцедуры // КурсДокументаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "КурсВзаиморасчетов".
//
Процедура КурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = ?(ДатаРасхода='00010101',Дата,ДатаРасхода);

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;
					   
	РассчитатьСуммуПлатежа();

КонецПроцедуры // КурсВзаиморасчетовНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Сделка".
//
Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	//Смирнов
	// Заполним возможный список типов документов, которые могут быть расчетными.
	СписокТипов = Новый СписокЗначений;
    СписокТипов.Добавить( "Стандартно", "Стандартно");
	СписокТипов.Добавить( Метаданные.Документы["ЗаказПоПрессФормам"].Имя,        Метаданные.Документы["ЗаказПоПрессФормам"].Представление());
	
	// Пользователь выбирает тип расчетного документа
	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокТипов, Элемент);

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат; // пользователь отказался от выбора
	КонецЕсли;

	ТипДокументаСделки = ВыбранныйЭлемент.Значение;
	Если ТипДокументаСделки="Стандартно" тогда 
		ПараметрыВыбора=ОпределитьПараметрыВыбораСделки(ВидОперации);
	иначе
		//Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику
		ПараметрыВыбора=Новый Структура("ВидДвиженияРасчеты,ТипЗаказа","Расход","ЗаказПоПрессФормам");
	КонецЕсли;
	
	НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, 
	                     ПараметрыВыбора.ВидДвиженияРасчеты, ПараметрыВыбора.ТипЗаказа);
					
КонецПроцедуры // СделкаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "КурсВзаиморасчетов".
// Процедура выполняет пересчет реквизитов при изменении курса взаиморасчетов
// с подотчетником
//
Процедура КурсВзаиморасчетовПриИзменении(Элемент)

	РассчитатьСуммуПлатежа();

КонецПроцедуры // КурсВзаиморасчетовПодотчетникПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "ВалютаВзаиморасчетовПодотчетника".
//
Процедура ВалютаВзаиморасчетовПодотчетникаПриИзменении(Элемент)

	СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(ВалютаВзаиморасчетовПодотчетника, Дата);
	СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
	РассчитатьСуммуПлатежа();

КонецПроцедуры // ВалютаВзаиморасчетовПодотчетникаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода"БанковскийСчетКассаКасса". 
// Процедура устанавливает валюту документа, и предлагает пересчитать сумму документа.
//
Процедура БанковскийСчетКассаПриИзменении(Элемент)

	Если (НЕ БанковскийСчетКасса=Неопределено) И (НЕ БанковскийСчетКасса.Пустая()) Тогда
		ПриИзмененииЗначенияКассыБанковскогоСчета(ВалютаДокумента, КурсДокумента, КратностьДокумента, ДатаРасхода, СуммаДокумента, БанковскийСчетКасса.ВалютаДенежныхСредств);
		ЭлементыФормы.ВалютаДокумента.Доступность=Ложь;
		
		РазмещениеЗаявки.Очистить();
		СуммаДокументаПриИзменении();
		
		Если ТипЗнч(БанковскийСчетКасса)=Тип("СправочникСсылка.БанковскиеСчета") Тогда
			Если Организация.Пустая() Тогда
				Организация=БанковскийСчетКасса.Владелец;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ЭлементыФормы.ВалютаДокумента.Доступность=Истина;
	КонецЕсли;
	
	РассчитатьСуммуПлатежаТаблица();
	
	УстановитьВидимость();
	СтараяВалютаДокумента = ВалютаДокумента;
	
КонецПроцедуры // БанковскийСчетКассаПриИзменении()

Процедура СуммаДокументаПриИзменении()
			 
	Если ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		РассчитатьКурсВзаиморасчетов();
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствКассеККМ
		ИЛИ ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПеречислениеНалога Тогда
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		СтрокаПлатеж.СуммаВзаиморасчетов=СуммаДокумента;
		
	ИначеЕсли РасшифровкаПлатежа.Количество()=1 Тогда
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		РассчитатьКурсВзаиморасчетов();
		
	КонецЕсли;
			 
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "АвансовыйОтчет".
//
Процедура РасчетныйДокументНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Документы.АвансовыйОтчет.ПолучитьФормуВыбора(,Элемент,);
		
	Если НЕ ЗначениеНеЗаполнено(ВалютаВзаиморасчетовПодотчетника) Тогда
		ФормаВыбора.ДокументСписок.Отбор.ВалютаДокумента.Значение = ВалютаВзаиморасчетовПодотчетника;
		ФормаВыбора.ДокументСписок.Отбор.ВалютаДокумента.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ВалютаДокумента.Доступность=Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеНеЗаполнено(Получатель) Тогда
						
			ФормаВыбора.ДокументСписок.Отбор.ФизЛицо.Значение = Получатель;
			ФормаВыбора.ДокументСписок.Отбор.ФизЛицо.Использование = Истина;
			ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ФизЛицо.Доступность=Ложь;
					
	КонецЕсли;
	
	Если Не ЗначениеНеЗаполнено(Элемент.Значение) Тогда
		
		ФормаВыбора.ПараметрТекущаяСтрока=Элемент.Значение;
		
	КонецЕсли;
	
	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "АвансовыйОтчет".
//
Процедура РасчетныйДокументПриИзменении(Элемент)

	Если НЕ ЗначениеНеЗаполнено(РасчетныйДокумент) Тогда
		
		Получатель                       = РасчетныйДокумент.ФизЛицо;
		ВалютаВзаиморасчетовПодотчетника = РасчетныйДокумент.ВалютаДокумента;
		СтруктураКурсаВзаиморасчетов     = ПолучитьКурсВалюты(ВалютаВзаиморасчетовПодотчетника, ДатаРасхода);
		СтрокаПлатеж.КурсВзаиморасчетов               = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов          = СтруктураКурсаВзаиморасчетов.Кратность; 
		
		Если ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
			
			ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицом(СтрокаПлатеж);
			
		Иначе
			
			СтрокаПлатеж.СуммаВзаиморасчетов=РасчетныйДокумент.СуммаЗайма;
			СуммаДокумента = ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
			ВалютаВзаиморасчетовПодотчетника, ВалютаДокумента,
			СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
			СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
			
			СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
			
		КонецЕсли;		
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

Процедура СуммаВзаиморасчетовПодотчетникПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура СуммаВзаиморасчетовПриИзменении(Элемент)
		
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура ФормаОплатыПриИзменении(Элемент)
	
	Если ФормаОплаты=Перечисления.ВидыДенежныхСредств.Безналичные Тогда
		БанковскийСчетКасса=Новый(Тип("СправочникСсылка.БанковскиеСчета"));
	ИначеЕсли ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные Тогда
		БанковскийСчетКасса=Новый(Тип("СправочникСсылка.Кассы"));
   	Иначе
		БанковскийСчетКасса=Неопределено;
	КонецЕсли;
	
	РазмещениеЗаявки.Очистить();
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ФормаОплаты=Перечисления.ВидыДенежныхСредств.Безналичные Тогда
		
		БанковскийСчетКасса=Новый(Тип("СправочникСсылка.БанковскиеСчета"));
		ЭлементыФормы.БанковскийСчетКасса.ВыборПоВладельцу=Организация;
		
		РазмещениеЗаявки.Очистить();
		
	КонецЕсли;
	
	УстановитьНомерДокумента(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
		
		Если Вопрос("Не совпадают сумма документа и ее расшифровка. Пересчитать сумму документа?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			
			СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
			
		Иначе
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Ответственный.Пустая()  Тогда
		Ответственный     = глТекущийПользователь;
	КонецЕсли;
	
	Если СокрЛП(НазначениеПлатежа)<>"" Тогда
		//проверка на кол-во символов - в общем не должно превышать 210, поэтому на сумму выделим 40 символов
		АдресСуммы=Найти(НазначениеПлатежа,"Сумма");
		Если АдресСуммы=0 Тогда
			Если СтрДлина(СокрЛП(НазначениеПлатежа))>170 Тогда
				сообщить("Назначение платежа не должно превышать 170 символов !");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//обязательно должна быть заполненена статья расходов
	Если Дата> Дата(2017,07,01,00,00,00)  тогда
		Для каждого стр из РасшифровкаПлатежа Цикл	
			Если не ЗначениеЗаполнено(стр.СтатьяРасхода)тогда
				Сообщить("В строке № "+стр.НомерСтроки+" не заполнена статья расходов!");
				отказ = Истина;
			конецЕсли;	
		конецЦикла;	
	конецЕсли;
	Если  не ЗначениеЗаполнено(НазначениеПлатежа) Тогда
		отказ = Истина;
		Сообщить("Не заполнено назначение платежа!");
	конецЕсли;
	
	
КонецПроцедуры

Процедура СписокПриИзменении(Элемент)
	
	Если Не Список И РасшифровкаПлатежа.Количество()>1 Тогда
		
		ТекстВопроса = "Все строки расшифровки платежа, кроме первой, будут удалены.
		|Продолжить?";
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Список=Истина;
			Возврат;
		КонецЕсли;
		
		Пока РасшифровкаПлатежа.Количество()>1 Цикл
			СтрокаУдаления=РасшифровкаПлатежа[1];
			РасшифровкаПлатежа.Удалить(СтрокаУдаления);
		КонецЦикла;
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
		СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
		РассчитатьСуммуПлатежа();
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
		
	Иначе
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
		СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
	КонецЕсли;		
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговора();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПриАктивизацииСтроки(Элемент)
	
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПараметрыВыбора=ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, 
	                     ПараметрыВыбора.ВидДвиженияРасчеты, ПараметрыВыбора.ТипЗаказа);
					
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	РассчитатьКурсВзаиморасчетов();
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = ?(ДатаРасхода='00010101',Дата,ДатаРасхода);

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;
					   
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, ?(ЗначениеЗаполнено(КонтрагентТранзит),КонтрагентТранзит,Контрагент), ?(ЗначениеЗаполнено(КонтрагентТранзит) и Транзитный,КонтрагентТранзит.ОсновнойДоговорКонтрагента,ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента),
				ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);
КонецПроцедуры

Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, ?(ЗначениеЗаполнено(КонтрагентТранзит),КонтрагентТранзит,Контрагент), ?(ЗначениеЗаполнено(КонтрагентТранзит) и Транзитный,КонтрагентТранзит.ОсновнойДоговорКонтрагента,ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента),
				ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);
	
КонецПроцедуры

Процедура КурсВзаиморасчетовПодотчетникаПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура КурсВзаиморасчетовПодотчетникаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	//Если ЗначениеНеЗаполнено(ВалютаВзаиморасчетовПодотчетника) Тогда
	//	Предупреждение("Не выбрана валюта взаиморасчетов подотчетника."); 
	//	Возврат;
	//КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = ВалютаДокумента;//***ВалютаВзаиморасчетовПодотчетника;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = ?(ДатаРасхода='00010101',Дата,ДатаРасхода);

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;
					   
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура СуммаВзаиморасчетовПодотчетникаПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры


Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		Отказ=Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ЗначениеВыбора.Свойство("ДокументПланирования") Тогда
		
		ЭлементыФормы.РазмещениеЗаявки.ТекущиеДанные.МестоРазмещения=ЗначениеВыбора.ДокументПланирования;
		СуммаКРазмещению=СуммаДокумента-РазмещениеЗаявки.Итог("СуммаПлатежа");
		СуммаПлатежа=?(ЗначениеВыбора.СуммаПлатежа<=СуммаКРазмещению,ЗначениеВыбора.СуммаПлатежа,СуммаКРазмещению);
		
		ЭлементыФормы.РазмещениеЗаявки.ТекущиеДанные.СуммаПлатежа=СуммаПлатежа;


	Иначе
	
		ОбработкаПодбораЗадолженностей(СтрокаПлатеж,РасшифровкаПлатежа,ЗначениеВыбора,
											Список,ВалютаДокумента,КурсДокумента,КратностьДокумента,
											Организация, Контрагент);
											
		СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
	КонецЕсли;
					
	УстановитьФокус();
				
КонецПроцедуры

Процедура КнопкаПодборНажатие(Элемент)
	
	СтруктураПараметров=Новый Структура;
	
	СтруктураПараметров.Вставить("ФормаДокумента"					,ЭтаФорма);
	СтруктураПараметров.Вставить("Организация"						,Организация);
	СтруктураПараметров.Вставить("Контрагент"						,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"					,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"					,СуммаДокумента);
	СтруктураПараметров.Вставить("РасшифровкаПлатежаДок"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ДатаДок"							,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"					,ВидОперации);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,Неопределено);
	СтруктураПараметров.Вставить("КурсДокумента"					,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"				,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"					,"<0");
    СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"				,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"		,Истина);
	СтруктураПараметров.Вставить("ФормаОплаты"						,);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"					,);
	СтруктураПараметров.Вставить("ВидОперацииПлан"					,);
	СтруктураПараметров.Вставить("БанковскийСчетКасса"				,);
	СтруктураПараметров.Вставить("Проект"							,);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств"	,);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,Неопределено);
	
	ПодборЗадолженностей(СтруктураПараметров);
	
КонецПроцедуры


Процедура КоманднаяПанельПлатежиЗаполнить(Кнопка)
	Если Константы.ОплатыРаспределяютМенеджеры.Получить() Тогда
	ЗаполнитьРасшифровкуПлатежаПоПлатежномуКалендарюПоставщикам();
	Иначе
	Если  НЕ Состояние = Перечисления.СостоянияОбъектов.Подготовлен Тогда
		      Предупреждение("Заполнение не возможно, если статус документа "+Строка(Состояние));
			  Возврат;
	КонецЕсли;	
	СтруктураПараметров=Новый Структура;
	
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СуммаДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"				,ВидОперации);
	СтруктураПараметров.Вставить("РасшифровкаПлатежа"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"	,Неопределено);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"				,"<0");
	СтруктураПараметров.Вставить("Интерактивно"					,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Истина);
	СтруктураПараметров.Вставить("СтруктураПараметровАвто"		,Новый Структура);
	СтруктураПараметров.Вставить("ФормаОплаты"					,);
	СтруктураПараметров.Вставить("ВидОперацииПлан"				,);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"				,);
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,);
	
	ЗаполнитьРасшифровкуПлатежей(СтруктураПараметров);
	
	Если РасшифровкаПлатежа.Количество()=0 Тогда
		НоваяСтрока=РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	КонецЕсли;
КонецПроцедуры

Процедура КурсДокументаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если ЗначениеНеЗаполнено(ВалютаДокумента) Тогда
		Предупреждение("Не выбрана валюта расхода денежных средств."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = ВалютаДокумента;
	ФормаВводаКурсаИКратности.КратностьВалюты = КратностьДокумента;
	ФормаВводаКурсаИКратности.КурсВалюты      = КурсДокумента;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = ?(ДатаРасхода='00010101',Дата,ДатаРасхода);

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		КурсДокумента = СтруктураКурсаИКратности.КурсВалюты;
		КратностьДокумента = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;
					   
	РассчитатьСуммуПлатежаТаблица();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)

	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура РазмещениеЗаявкиМестоРазмещенияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НачалоВыбораРазмещенияЗаявки(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура РазмещениеЗаявкиПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если ВалютаДокумента.Пустая() Тогда
		Сообщить("Не указана валюта заявки.");
		Отказ=Истина;
	КонецЕсли;
	
	Если ФормаОплаты.Пустая() Тогда
		Сообщить("Не указана форма оплаты.");
		Отказ=Истина;
	КонецЕсли;
		
КонецПроцедуры


Процедура ВалютаДокументаПриИзменении(Элемент)
	
	Если ВалютаДокумента.Пустая() Тогда
		
		ПриОчисткеВалютыДокумента();
		
	ИначеЕсли НЕ ВалютаДокумента=СтараяВалютаДокумента Тогда
		
		РазмещениеЗаявки.Очистить();
		

		ТекущийКурс = РегистрыСведений.КурсыВалютДляПоступления.СрезПоследних(Дата,Новый структура("Валюта",ВалютаДокумента));
		Если  ТекущийКурс.Количество()>0 Тогда
			КурсДокумента  = ТекущийКурс[0].Курс;
			КратностьДокумента = ТекущийКурс[0].Кратность;	
        Иначе		
		СтруктураКурсаВалютаДокумента = ПолучитьКурсВалюты(ВалютаДокумента,?(ДатаРасхода='00010101',Дата,ДатаРасхода));
		
		КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
		КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;
        конецЕсли;
		РассчитатьСуммуПлатежаТаблица();	
		УстановитьВидимость();
		
	КонецЕсли;
	
	СтараяВалютаДокумента=ВалютаДокумента;
	
КонецПроцедуры

Процедура БанковскийСчетКассаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если ФормаОплаты=Перечисления.ВидыДенежныхСредств.Безналичные Тогда
		БанковскийСчетКасса=Справочники.БанковскиеСчета.ПустаяСсылка();
	Иначе
		БанковскийСчетКасса=Справочники.Кассы.ПустаяСсылка();
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыПечатьЗаявки(Кнопка)
	
	ПечатьЗаявки();
	
КонецПроцедуры

Процедура АвтоРезервированиеПриИзменении(Элемент)
	
	УстановитьДоступностьКнопкиЗаполнитьИПровести();
	
КонецПроцедуры

Процедура АвтоРазмещениеПриИзменении(Элемент)
	
	УстановитьДоступностьКнопкиЗаполнитьИПровести();
	
КонецПроцедуры

Процедура ВалютаДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	ПриОчисткеВалютыДокумента();
	
КонецПроцедуры

Процедура СуммаПлатежаПодотчетПриИзменении(Элемент)
	
	РассчитатьКурсВзаиморасчетов();
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры

Процедура СуммаВзаиморасчетовККМПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура СуммаВзаиморасчетовПрочиеПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура ДатаРасходаПриИзменении(Элемент)
	
	Если НЕ(ЗначениеНеЗаполнено(ДатаРасхода) ИЛИ ВалютаДокумента.Пустая()) Тогда
		
		УстановитьКурсДокумента(ДатаРасхода);
		РассчитатьСуммуПлатежаТаблица();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормаОплатыОчистка(Элемент, СтандартнаяОбработка)
	
	БанковскийСчетКасса=Неопределено;
	
КонецПроцедуры

// Процедура обработчик события "ПриИзменении" поля ввода вида выдачи денежных средств
//
Процедура ВидВыдачиДенежныхСредствПриИзменении(Элемент)
	
	Если ВидВыдачиДенежныхСредств = Перечисления.ВидВыдачиДенежныхСредств.КассеККМ Тогда
		Если ТипЗнч(Получатель)<>Тип("СправочникСсылка.КассыККМ") Тогда
			Получатель = Справочники["КассыККМ"].ПустаяСсылка();
		КонецЕсли;
		ЭлементыФормы.КассаККМ.Подсказка = "В этом поле необходимо кассу ККМ, которой выдаются денежные средства.";
	Иначе
		Если ТипЗнч(Получатель)<>Тип("СправочникСсылка.Склады") Тогда
			Получатель = Справочники["Склады"].ПустаяСсылка();
		КонецЕсли;
		ЭлементыФормы.КассаККМ.Подсказка = "В этом поле необходимо указать НТТ, которой выдаются денежные средства.";
	КонецЕсли;
 
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

Процедура ДействияФормыДействиеПодготовить(Кнопка)
	
	//+++( 06.05.2014
	Если ЭлементыФормы.КурсВзаиморасчетов.Значение > 1 Тогда // эта Валютная заявка!
		Если (ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами) И ОжидаемыйСрокПоставки='00010101' Тогда
			Предупреждение("Заполните поле: Ожидаемый срок поставки!
						   |   Подготовка документа отменена!");
			возврат;
		КонецЕсли;
	КонецЕсли;
	//+++)	
	
	//05.12.17 Смирнов заявки ИМ могут подготавливать только нижеперечисленные пользователи (задача №36554) 
	Если Подразделение = Справочники.Подразделения.НайтиПоКоду("00139") тогда  //Отдел интернет-продаж
		Если глТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Федунов") или
			глТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Левченко Е.") или
			глТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Яковлева Анна") или
			рольДоступна("ПравоЗавершенияРаботыПользователей")
			тогда //можно
		иначе
			Предупреждение("Вам запрещено подготавливать заявку для подразделения "+Подразделение+"
						   |   Подготовка документа отменена!");
			возврат;
		КонецЕсли;
	КонецЕсли;
	
	Состояние = Перечисления.СостоянияОбъектов.Подготовлен;
	Записать(РежимЗаписиДокумента.Проведение);
	УстановитьВидимость();

КонецПроцедуры

Процедура ДействияФормыДействиеУтвердить(Кнопка)
	
	Состояние = Перечисления.СостоянияОбъектов.Утвержден;
	Утвердил = глТекущийПользователь;
	Записать(РежимЗаписиДокумента.Проведение);
	УстановитьВидимость();

КонецПроцедуры

Процедура ДействияФормыДействиеОтклонить(Кнопка)
	Состояние=Перечисления.СостоянияОбъектов.Отклонен;
	Записать(РежимЗаписиДокумента.Проведение);
	УстановитьВидимость();

КонецПроцедуры


Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику Тогда
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщику;
		Если не ЗначениеЗаполнено(СтрокаПлатеж.СтатьяРасхода) тогда
		СтрокаПлатеж.СтатьяРасхода = Справочники.СтатьиРасходов.ОплатаПоставщику;	
        конецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРасшифровкуПлатежаПоПлатежномуКалендарюПоставщикам();
	
	Если ЗначениеНеЗаполнено(ПериодПланирования) Тогда
		Сообщить("Обязательно указание периода планирования",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;	
	
	ТЗДолги= Новый ТаблицаЗначений;	
	ТЗДолги.Колонки.Добавить("Контрагент");
	ТЗДолги.Колонки.Добавить("ДоговорКонтрагента");
	ТЗДолги.Колонки.Добавить("Сделка");
	ТЗДолги.Колонки.Добавить("ДатаОплаты");
	ТЗДолги.Колонки.Добавить("ОстатокДолга");
	
	НачДата = НачалоМесяца(ПериодПланирования);
	КонДата = КонецМесяца(ПериодПланирования);	
	
	
	// Заполнение по платежному календарю
	
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ДоговорКонтрагента.Владелец Контрагент,
	|	ДоговорКонтрагента.Ссылка ДоговорКонтрагента,
	|   Сделка Сделка,
	|	-СуммаВзаиморасчетовОстаток  ОстатокДолга
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&КонДата, ДоговорКонтрагента.ВедениеВзаиморасчетов = &ПоЗаказам
	|	И ДоговорКонтрагента.ВидДоговора = &СПоставщиком И ДоговорКонтрагента.ОтветственноеЛицо = &Ответственный 
	|   И Сделка ССЫЛКА Документ.ЗаказПоставщику И ДоговорКонтрагента.Владелец=&Контрагент) 
	| 	ГДЕ СуммаВзаиморасчетовОстаток<0";
	
	
	
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Запрос.УстановитьПараметр("Ответственный",глТекущийПользователь);
	Запрос.УстановитьПараметр("СПоставщиком",Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	Запрос.УстановитьПараметр("ПоЗаказам",Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
	Запрос.УстановитьПараметр("КонДата",КонецДня(КонДата));
	
	Результат=Запрос.Выполнить();
	
	Выборка=Результат.Выбрать();
	
	Если  Результат.Пустой() Тогда
		Возврат;	  
	КонецЕсли;  
	
	Пока Выборка.Следующий() Цикл
		Если не ЗначениеНеЗаполнено(Выборка.Сделка) Тогда
			ПолучитьДолгиПоставщикуПоСделке(Выборка.Сделка,Выборка.ОстатокДолга,ТЗДолги);
		КонецЕсли;
	КонецЦикла;  
	
	ФлагЕстьОплатыПередНачДата=Ложь;
	ПереноситьОплатуНаНачДата=Ложь;
	
	Для каждого строка из ТЗДолги Цикл
		Если ЗначениеНеЗаполнено(строка.ДатаОплаты)  Тогда
			строка.ДатаОплаты=ПустоеЗначениеТипа(Тип("Дата"));
		КОнецЕсли;	
		Если строка.ДатаОплаты<НачДата Тогда
			ФлагЕстьОплатыПередНачДата=Истина;
		КонецЕсли;	  
	КонецЦикла;
	
	Если  ФлагЕстьОплатыПередНачДата Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ=Вопрос("Обнаружен долг перед контрагентом, по которому оплата должна быть осуществлена ранее периода планирования." +Символы.ПС+"Перенести эту оплату на "+Строка(НачДата)+"?",Режим,0);
		Если Ответ=КодВозвратаДиалога.Да Тогда
			ПереноситьОплатуНаНачДата=Истина;
		КонецЕсли;	
	КонецЕсли;
	
	Если ПереноситьОплатуНаНачДата Тогда 	  // долги за предыдущий месяц переносим на 1-ое число следующего месяца 
		Для каждого строка из ТЗДолги Цикл
			Если строка.ДатаОплаты<НачДата Тогда
				строка.ДатаОплаты=НачДата;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
	ТЗДолги.Свернуть("Контрагент,ДоговорКонтрагента,ДатаОплаты,Сделка","ОстатокДолга");
	ТЗДолги.Сортировать("ДатаОплаты Возр,ДоговорКонтрагента Возр, Сделка Возр");
	
	РасшифровкаПлатежа.Очистить();
	Для каждого строкаДолги Из ТЗДолги Цикл
		Если //НачалоДня(строкаДолги.ДатаОплаты)< НачалоДня(НачДата)  // когда оплата ранее начала месяца
			//ИЛИ
			НачалоДня(строкаДолги.ДатаОплаты)> НачалоДня(КонДата) // когда оплата позднее конца месяца
			Тогда Продолжить; 
		КонецЕсли;
		строкаДокумента=РасшифровкаПлатежа.Добавить();
		строкаДокумента.ДоговорКонтрагента=строкаДолги.ДоговорКонтрагента;
		строкаДокумента.Сделка=строкаДолги.Сделка;
		строкаДокумента.КурсВзаиморасчетов=1;
		строкаДокумента.КратностьВзаиморасчетов=1;
		строкаДокумента.СуммаПлатежа=строкаДолги.ОстатокДолга;
		строкаДокумента.СуммаВзаиморасчетов=строкаДолги.ОстатокДолга;
		строкаДокумента.ДатаРасхода=строкаДолги.ДатаОплаты;
		строкаДокумента.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщику;
	КонецЦикла;  
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;

КонецПроцедуры

Процедура ПериодПланированияПриИзменении(Элемент)
	Если не ЗначениеНеЗаполнено(ПериодПланирования) Тогда
		ПериодПланирования=НачалоМесяца(ПериодПланирования);
	КонецЕсли;	
КонецПроцедуры

Процедура РасшифровкаПлатежаПриПолученииДанных(Элемент, ОформленияСтрок)
	Для Каждого Строка Из ОформленияСтрок Цикл
		ТекущаяСтрока = Строка.ДанныеСтроки;
		
		СуммаДолга= ТекущийДолг(ТекущаяСтрока.ДоговорКонтрагента, ТекущаяСтрока.Сделка, Неопределено);
		Строка.Ячейки.СуммаДолга.Значение  = СуммаДолга;
		//***заремлено старое, т.к. не понятна логика выделения цветом.
		//Если Строка.Ячейки.СуммаВзаиморасчетов.Значение>-СуммаДолга 
		//	И ЗначениеЗаполнено(Строка.Ячейки.ДатаРасхода.Значение)
		//	И ЗначениеЗаполнено(Строка.Ячейки.Сделка.Значение)
		//	И НачалоДня(Строка.Ячейки.ДатаРасхода.Значение)>=НачалоДня(ТекущаяДата()) Тогда
		//	Строка.ЦветФона= WebЦвета.Лосось;
		//КонецЕсли;	
		Если ЗначениеЗаполнено(ТекущаяСтрока.Сделка) И ТипЗнч(ТекущаяСтрока.Сделка)=Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
			Строка.Ячейки.НомерСчета.Значение = ТекущаяСтрока.Сделка.НомерСчета;
			Строка.Ячейки.ДатаСчета.Значение = ТекущаяСтрока.Сделка.ДатаСчета;
		КонецЕсли;	
		
	КонецЦикла;
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	Если ЭтоНовый() и СокрЛП(ПричинаОтклонения)<>"" тогда
		Предупреждение("Заявка отклонена по причине: "+ПричинаОтклонения, 30);
		Отказ = истина;
	КонецЕсли;	
КонецПроцедуры

Процедура УстановитьУрезанныйВидПодменюВыбораВидаОперации(ЭлементМеню, ОбъектЗаполнения, ОбъектОбработкиВыбораОперации)

	Для каждого ЭлементЗаполнения Из ОбъектЗаполнения Цикл
		Если ЭлементЗаполнения.Имя = "ОплатаПоставщику"
			ИЛИ ЭлементЗаполнения.Имя = "ВозвратДенежныхСредствПокупателю"
			ИЛИ ЭлементЗаполнения.Имя = "ВыдачаДенежныхСредствПодотчетнику"
			ИЛИ ЭлементЗаполнения.Имя = "ПрочиеРасчетыСКонтрагентами"
			ИЛИ ЭлементЗаполнения.Имя = "ПрочийРасходДенежныхСредств" Тогда
				ПунктМеню = ЭлементМеню.Кнопки.Добавить(ЭлементЗаполнения.Имя, ТипКнопкиКоманднойПанели.Действие, 
				                                        ЭлементЗаполнения.Синоним, ОбъектОбработкиВыбораОперации);
				ПунктМеню.ИзменяетДанные = Истина;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьПодменюВыбораВидаОперации()

Процедура КоманднаяПанель2ЗаполнитьИзСправочника(Кнопка)
	
	ФормаПодбораСправочникаПН = Справочники.НалогиВПлатежныхПоручениях.ПолучитьФормуВыбора();
	
	///////////Плотников   выбор из справочника с отбором
	
	списокКонтр = Новый СписокЗначений;
	списокКонтр.Добавить(Контрагент);
	списокКонтр.Добавить(Справочники.Контрагенты.ПустаяСсылка());
	ФормаПодбораСправочникаПН.Отбор.Контрагент.ВидСравнения = ВидСравнения.ВСписке;
    ФормаПодбораСправочникаПН.Отбор.Контрагент.Значение = списокКонтр;
    ФормаПодбораСправочникаПН.Отбор.Контрагент.Использование = ИСТИНА;
 	//////////Плотников
	
	ВыбранныйЭлемент = ФормаПодбораСправочникаПН.ОткрытьМодально();
	
	Если НЕ ВыбранныйЭлемент = Неопределено Тогда
		
		СтатусСоставителя = ВыбранныйЭлемент.СтатусСоставителя;
		КодБК = ВыбранныйЭлемент.КодБК;
		КодОКАТО = ВыбранныйЭлемент.КодОКАТО;
		ПоказательОснования = ВыбранныйЭлемент.ПоказательОснования;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспределитьПоЗаказамНажатие(Элемент)
	Если не ЗначениеЗаполнено(РасшифровкаПлатежа[0].договорконтрагента) или не ЗначениеЗаполнено(РасшифровкаПлатежа[0].СуммаВзаиморасчетов) Тогда
		Сообщить ("Перед распределением необходимо указать договор контрагента и сумму!");
	иначе
		Ответ = Вопрос("Распределить указанную сумму по заказам поставщикам?", РежимДиалогаВопрос.ДаНет, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.Сделка, ЗаказыПоставщикамОстатки.ЗаказПоставщику) КАК Сделка,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток, 0) < 0
			|			ТОГДА -ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток
			|		КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток, 0) > 0
			|			ТОГДА ЕСТЬNULL(ЗаказыПоставщикамОстатки.СуммаВзаиморасчетовОстаток, 0) - ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток
			|		ИНАЧЕ ЗаказыПоставщикамОстатки.СуммаВзаиморасчетовОстаток
			|	КОНЕЦ КАК Сумма,
			|	ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты, ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаОплаты) КАК ДатаОплаты,
			|	NULL КАК Номенклатура,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток, 0) < 0
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК Важность
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
			|			&ТекДата,
			|			ДоговорКонтрагента = &Договор
			|				И Сделка ССЫЛКА Документ.ЗаказПоставщику) КАК ВзаиморасчетыСКонтрагентамиОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки(,ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ) КАК ЗаказыПоставщикамОстатки
			|		ПО ВзаиморасчетыСКонтрагентамиОстатки.Сделка = ЗаказыПоставщикамОстатки.ЗаказПоставщику
			|ГДЕ
			|	-ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток <> ВзаиморасчетыСКонтрагентамиОстатки.Сделка.СуммаДокумента
			|	И ВЫБОР
			|			КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток, 0) < 0
			|				ТОГДА -ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток
			|			КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток, 0) > 0
			|				ТОГДА ЕСТЬNULL(ЗаказыПоставщикамОстатки.СуммаВзаиморасчетовОстаток, 0) - ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток
			|			ИНАЧЕ ЗаказыПоставщикамОстатки.СуммаВзаиморасчетовОстаток
			|		КОНЕЦ > 0
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗаказыПоставщикамСезонныеОстатки.ЗаказПоставщикуСезонный.ЗаказДубль,
			|	СУММА(ЗаказыПоставщикамСезонныеОстатки.КоличествоОстаток * ЗаказПоставщикуСезонныйТовары.Цена * 0.2),
			|	ЗаказыПоставщикамСезонныеОстатки.ЗаказПоставщикуСезонный.Дата,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПоставщикамСезонныеОстатки.Номенклатура),
			|	2
			|ИЗ
			|	РегистрНакопления.ЗаказыПоставщикамСезонные.Остатки(, ЗаказПоставщикуСезонный.ДоговорКонтрагента = &Договор) КАК ЗаказыПоставщикамСезонныеОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщикуСезонный.Товары КАК ЗаказПоставщикуСезонныйТовары
			|		ПО ЗаказыПоставщикамСезонныеОстатки.Номенклатура = ЗаказПоставщикуСезонныйТовары.Номенклатура
			|			И ЗаказыПоставщикамСезонныеОстатки.ЗаказПоставщикуСезонный = ЗаказПоставщикуСезонныйТовары.Ссылка
			|ГДЕ
			|	НЕ ЗаказыПоставщикамСезонныеОстатки.ЗаказПоставщикуСезонный.ЗаказДубль ЕСТЬ NULL 
			|	И ЗаказыПоставщикамСезонныеОстатки.ЗаказПоставщикуСезонный.ЗаказДубль <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаказыПоставщикамСезонныеОстатки.ЗаказПоставщикуСезонный.Дата,
			|	ЗаказыПоставщикамСезонныеОстатки.ЗаказПоставщикуСезонный.ЗаказДубль
			|
			|УПОРЯДОЧИТЬ ПО
			|	Важность,
			|	ДатаОплаты";
			
			Запрос.УстановитьПараметр("Договор", РасшифровкаПлатежа[0].договорКонтрагента);
			Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
			
			Результат = Запрос.Выполнить();
			
			Выборка = Результат.Выбрать();
			
			СуммаКРаспределению = РасшифровкаПлатежа[0].СуммаВзаиморасчетов; 
			ОсталосьРаспределить = СуммаКРаспределению;
			Если Выборка.Следующий() Тогда
				//Если Выборка.Сумма>0  Тогда
				////	ОстатокПоДокументу = Выборка.Сделка.суммаДокумента+Выборка.Сумма;   // если только авнас добиваем до суммы документа
				////иначе	
					ОстатокПоДокументу = Выборка.Сумма; // если задолженность, погашаем ее
				//иначе	
				//  продолжить;	
				//конецЕсли;	
					Если ОсталосьРаспределить< ОстатокПоДокументу тогда
					Распределяем = ОсталосьРаспределить;
				иначе
					Распределяем = ОстатокПоДокументу;
				конецЕсли;
				РасшифровкаПлатежа[0].Сделка = Выборка.Сделка;
				РасшифровкаПлатежа[0].СуммаВзаиморасчетов = Распределяем;
				РасшифровкаПлатежа[0].СуммаПлатежа = Распределяем;
				//РасшифровкаПлатежа[0].СуммаДолга = ОстатокПоДокументу;
				ОсталосьРаспределить = ОсталосьРаспределить-Распределяем;
			иначе
				Сообщить("По выбранному договору нет неоплаченных заказов!");
			конецЕсли;
			Пока Выборка.Следующий() и ОсталосьРаспределить>0 Цикл
				
				//Если Выборка.Сумма<0 Тогда
				//	ОстатокПоДокументу = Выборка.Сделка.суммаДокумента+Выборка.Сумма;   // если только авнас добиваем до суммы документа
				//иначе	
				    ОстатокПоДокументу = Выборка.Сумма; // если задолженность, погашаем ее
				//конецЕсли;	
				Если ОстатокПоДокументу =0 Тогда
					продолжить;
				конецЕсли;
			    Если ОсталосьРаспределить< ОстатокПоДокументу тогда
					Распределяем = ОсталосьРаспределить;
				иначе
					Распределяем = ОстатокПоДокументу;
				конецЕсли;
				Если Распределяем<> 0 Тогда
				новыйРасш = РасшифровкаПлатежа.Добавить();
				ЗаполнитьЗначенияСвойств(новыйРасш,РасшифровкаПлатежа[0]);
				новыйРасш.Сделка = Выборка.Сделка;
				новыйРасш.СуммаВзаиморасчетов = Распределяем;
				новыйРасш.СуммаПлатежа = Распределяем;
				ОсталосьРаспределить = ОсталосьРаспределить-Распределяем;
				конецЕсли;
			КонецЦикла;
			если ОсталосьРаспределить> 0 Тогда
				Сообщить("Не удалось распределить по заказам сумму остатка: "+Осталосьраспределить);
			конецЕсли;
		конецЕсли;
	КонецЕсли;
	если РасшифровкаПлатежа.Количество() > 1 Тогда
		список = Истина;
	конецЕсли;	
	
	
    	УстановитьВидимость();

КонецПроцедуры

Процедура КоманднаяПанельПлатежиПодборСделокСДатами(Кнопка)
	ТаблицаСделок = Новый ТаблицаЗначений;
	ТаблицаСделок.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику"),"Сделка",40);
	ТаблицаСделок.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"),"Сумма",10);
	ТаблицаСделок.Колонки.Добавить("СуммаДолга", Новый ОписаниеТипов("Число"),"СуммаДолга",10);
    ТаблицаСделок.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.Подразделения"),"Подразделение",20);
    ТаблицаСделок.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"),"Комментарий",40);
    ТаблицаСделок.Колонки.Добавить("ДатаОплаты", Новый ОписаниеТипов("Дата"),"ДатаОплаты",7);
    ТаблицаСделок.Колонки.Добавить("ДатаПоставки", Новый ОписаниеТипов("Дата"),"ДатаПоставки",7);

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Дата,
	|	ЗаказПоставщику.Номер,
	|	ЗаказПоставщику.СуммаДокумента,
	|	ЗаказПоставщику.ВалютаДокумента,
	|	ЗаказПоставщику.Контрагент,
	|	ЗаказПоставщику.ДоговорКонтрагента,
	|	ЗаказПоставщику.Организация,
	|	ЗаказПоставщику.Подразделение,
	|	ЗаказПоставщику.Комментарий,
	|	ЗаказПоставщику.Ответственный,
	|	ЗаказПоставщику.Ссылка
	|ПОМЕСТИТЬ ВТ_Заказы
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Контрагент = &Контрагент
	|	И ЗаказПоставщику.ДоговорКонтрагента = &ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентамиОбороты.Сделка,
	|	СУММА(ВзаиморасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовПриход) КАК СуммаОплаты,
	|	МИНИМУМ(ВзаиморасчетыСКонтрагентамиОбороты.Период) КАК ДатаОплаты
	|ПОМЕСТИТЬ ВТ_Оплата
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(
	|			,
	|			,
	|			День,
	|			Сделка В
	|				(ВЫБРАТЬ
	|					ВТ_Заказы.Ссылка
	|				ИЗ
	|					ВТ_Заказы КАК ВТ_Заказы)) КАК ВзаиморасчетыСКонтрагентамиОбороты
	|ГДЕ
	|	ВзаиморасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовПриход > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыСКонтрагентамиОбороты.Сделка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВзаиморасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовРасход) КАК СуммаПоставки,
	|	ВзаиморасчетыСКонтрагентамиОбороты.Сделка,
	|	МИНИМУМ(ВзаиморасчетыСКонтрагентамиОбороты.Период) КАК ДатаПоставки
	|ПОМЕСТИТЬ ВТ_Поставка
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(
	|			,
	|			,
	|			День,
	|			Сделка В
	|				(ВЫБРАТЬ
	|					ВТ_Заказы.Ссылка
	|				ИЗ
	|					ВТ_Заказы КАК ВТ_Заказы)) КАК ВзаиморасчетыСКонтрагентамиОбороты
	|ГДЕ
	|	ВзаиморасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовРасход > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыСКонтрагентамиОбороты.Сделка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Заказы.Ссылка,
	|	ВТ_Заказы.СуммаДокумента КАК Сумма,
	|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаДолга,
	|	ВТ_Заказы.Подразделение,
	|	ВТ_Заказы.Комментарий,
	|	ЕСТЬNULL(ВТ_Оплата.ДатаОплаты, 0) КАК ДатаОплаты,
	|	ЕСТЬNULL(ВТ_Поставка.ДатаПоставки, 0) КАК ДатаПоставки,
	|	ВТ_Заказы.Ответственный
	|ИЗ
	|	ВТ_Заказы КАК ВТ_Заказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Оплата КАК ВТ_Оплата
	|		ПО ВТ_Заказы.Ссылка = ВТ_Оплата.Сделка
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Поставка КАК ВТ_Поставка
	|		ПО ВТ_Заказы.Ссылка = ВТ_Поставка.Сделка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	|				,
	|				Сделка В
	|					(ВЫБРАТЬ
	|						ВТ_Заказы.Ссылка
	|					ИЗ
	|						ВТ_Заказы КАК ВТ_Заказы)) КАК ВзаиморасчетыСКонтрагентамиОстатки
	|		ПО ВТ_Заказы.Ссылка = ВзаиморасчетыСКонтрагентамиОстатки.Сделка";
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента",ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока.ДоговорКОнтрагента);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрТЗ = ТаблицаСделок.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТЗ,Выборка);
	КонецЦикла;
	
	ВыбЗначение = ТаблицаСделок.ВыбратьСтроку("Выберите сделку");
	Если ВыбЗначение <> Неопределено Тогда
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока.Сделка =   ВыбЗначение.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеВвода2НачалоВыбора(Элемент, СтандартнаяОбработка)
	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, КонтрагентТранзит, КонтрагентТранзит.ОсновнойДоговорКонтрагента,
				ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);
КонецПроцедуры

Процедура КонтрТранзитПриИзменении(Элемент)
	ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента  = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
КонецПроцедуры



