Перем мВалютаРегламентированногоУчета Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Формирует печатную форму 
// заявки
//
Процедура ПечатьЗаявки() Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли;

	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьРасчетыСКонтрагентами=ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=ЕстьРасчетыПоКредитам(ВидОперации);

	Отказ=Ложь;
	//Проверим заполнение реквизитов документов
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейШапка(), Отказ,);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
		
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявкаНаРасходованиеСредств";
	
	Макет = ПолучитьМакет("ЗаявкаНаРасходованиеСредств");
	Обл   = Макет.ПолучитьОбласть("Заголовок");
	
	Обл.Параметры.ЗаголовокЗаявки=""+ЭтотОбъект+Символы.ПС+ВидОперации;
	Обл.Параметры.Заполнить(ЭтотОбъект);
	
	ТабДокумент.Вывести(Обл);
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		Обл = Макет.ПолучитьОбласть("ЗаголовокРасчеты");
		Обл.Параметры.Контрагент=Контрагент;
		ТабДокумент.Вывести(Обл);
		
		Запрос=Новый Запрос;
		//Запрос.Текст="ВЫБРАТЬ
		//|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		//|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		//|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Сделка КАК Сделка,
		//|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
		//|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		//|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		//|	//ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов КАК ТекущийДолг ,
		//|	-ЕстьNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток,0)  ТекущийДолг,
		//|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов + ЕстьNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток,0) КАК ТекущийДолгСУчетомЗаявки
		//|//	ВЫБОР КОГДА НЕ((РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток) ЕСТЬ NULL ) 
		//|//		ТОГДА 
		//|//			ВЫБОР КОГДА НЕ ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.Проведен
		//|//			ТОГДА РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток+ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов
		//|//			ИНАЧЕ РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КОНЕЦ
		//|//		ИНАЧЕ ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов КОНЕЦ КАК ТекущийДолг
		//|ИЗ
		//|	Документ.ЗаявкаНаРасходованиеСредств.РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(, ДоговорКонтрагента.Владелец=&Контрагент) КАК ВзаиморасчетыСКонтрагентамиОстатки
		//|		ПО ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ДоговорКонтрагента = ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента
		//|  И ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Сделка = ВзаиморасчетыСКонтрагентамиОстатки.Сделка
		//|
		//|ГДЕ
		//|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка = &Ссылка";
		
		Запрос.Текст="ВЫБРАТЬ
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Сделка КАК Сделка,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	//ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов КАК ТекущийДолг ,
		|	ЕстьNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток,0)  ТекущийДолг,
		|	ЗаявкиОиО.СуммаРасход ОплаченоПоЗаявке,
		|	ЗаявкиОиО.СуммаКонечныйОстаток  ТекущийДолгСУчетомЗаявки
		|
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеСредств.РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(, ДоговорКонтрагента.Владелец=&Контрагент) КАК ВзаиморасчетыСКонтрагентамиОстатки
		|		ПО ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ДоговорКонтрагента = ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента
		|  И ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Сделка = ВзаиморасчетыСКонтрагентамиОстатки.Сделка
		|  ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаявкиНаРасходованиеСредств.ОстаткиИОбороты(,,,,ЗаявкаНаРасходование=&Ссылка) КАК ЗаявкиОиО
		|   ПО ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Сделка = ЗаявкиОиО.Сделка
		|   И ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка = ЗаявкиОиО.ЗаявкаНаРасходование
		|   
		|ГДЕ
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.УстановитьПараметр("Контрагент",Контрагент);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			Обл=Макет.ПолучитьОбласть("СтрокаРасчеты");
			Обл.Параметры.Заполнить(Результат);
			ТабДокумент.Вывести(Обл);
			
		КонецЦикла;
		
		Обл=Макет.ПолучитьОбласть("ПодвалРасчеты");
		ТабДокумент.Вывести(Обл);
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		Обл=Макет.ПолучитьОбласть("ЗаголовокПодотчет");
		Обл.Параметры.Получатель=Получатель;
		Обл.Параметры.ТекстВыдачаФизЛицу="Выдача денежных средств под отчет";
		Обл.Параметры.РасчетныйДокумент=РасчетныйДокумент;
		ТабДокумент.Вывести(Обл);
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.ВалютаВзаиморасчетовПодотчетника КАК ВалютаВзаиморасчетовПодотчетника,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ВЫБОР КОГДА НЕ((ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток) ЕСТЬ NULL ) 
		|		ТОГДА ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток + ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов 
		|		ИНАЧЕ ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов КОНЕЦ КАК ТекущийДолг
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеСредств.РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
		|		ПО ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.Получатель = ВзаиморасчетыСПодотчетнымиЛицамиОстатки.ФизЛицо 
		|		И ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.ВалютаВзаиморасчетовПодотчетника = ВзаиморасчетыСПодотчетнымиЛицамиОстатки.Валюта 
		|		И ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.РасчетныйДокумент = ВзаиморасчетыСПодотчетнымиЛицамиОстатки.РасчетныйДокумент
		|
		|ГДЕ
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			
			Обл=Макет.ПолучитьОбласть("СтрокаПодотчет");
			Обл.Параметры.ДатаПогашенияАванса=ДатаПогашенияАванса;
			Обл.Параметры.Заполнить(Результат);
			ТабДокумент.Вывести(Обл);
			
		КонецЕсли;
		
		Обл=Макет.ПолучитьОбласть("ПодвалПодотчет");
		ТабДокумент.Вывести(Обл);
				
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствКассеККМ Тогда
		
		Обл=Макет.ПолучитьОбласть("ЗаголовокВыдачаКассеККМ");
		Обл.Параметры.Получатель=Получатель;
		ТабДокумент.Вывести(Обл);
		
	КонецЕсли;
	
	Обл=Макет.ПолучитьОбласть("ЗаголовокРазмещениеЗаявки");
	
	Если РазмещениеЗаявки.Количество()=0 Тогда
		
		Обл.Параметры.ТекстРазмещениеЗаявки="Не размещено";
		ТабДокумент.Вывести(Обл);
		
	Иначе
		
		Обл.Параметры.ТекстРазмещениеЗаявки="Таблица размещения";
		ТабДокумент.Вывести(Обл);
		
		Обл=Макет.ПолучитьОбласть("ШапкаРазмещениеЗаявки");
		ТабДокумент.Вывести(Обл);
		
		ТабРазмещениеЗаявки=РазмещениеЗаявки.Выгрузить();
		ТабРазмещениеЗаявки.Свернуть("МестоРазмещения","СуммаПлатежа");
		
		Для Каждого Строка Из ТабРазмещениеЗаявки Цикл
			
			Если Строка.МестоРазмещения=Неопределено Тогда
				Продолжить;
			ИначеЕсли ТипЗнч(Строка.МестоРазмещения)= Тип("ДокументСсылка.ПланируемоеПоступлениеДенежныхСредств") Тогда
				
				Обл=Макет.ПолучитьОбласть("СтрокаРазмещениеЗаявки");
				
				ОстатокКРазмещению=ПолучитьНеразмещенныйОстаток(Строка.МестоРазмещения,КонецДня(ДатаРасхода),Ссылка);
				
				Обл.Параметры.МестоРазмещения=Строка.МестоРазмещения;
				Обл.Параметры.СуммаПлатежа=Строка.СуммаПлатежа;
				Обл.Параметры.ТекущийОстаток=ОстатокКРазмещению-Строка.СуммаПлатежа;
				
			Иначе
				
				// Проверяем остаток доступных денежных средств
				Обл=Макет.ПолучитьОбласть("СтрокаРазмещениеЗаявки");
				
				СвободныйОстаток=ПолучитьСвободныйОстатокДС(Строка.МестоРазмещения,КонецДня(ДатаРасхода),Ссылка);
				
				Обл.Параметры.МестоРазмещения=Строка.МестоРазмещения;
				Обл.Параметры.СуммаПлатежа=Строка.СуммаПлатежа;
				Обл.Параметры.ТекущийОстаток=СвободныйОстаток-Строка.СуммаПлатежа;
				
			КонецЕсли;
			
			ТабДокумент.Вывести(Обл);
			
		КонецЦикла;
		
		Обл=Макет.ПолучитьОбласть("ПодвалРазмещение");
		ТабДокумент.Вывести(Обл);
		
	КонецЕсли;
	
	Если НЕ Описание="" Тогда
		
		Обл=Макет.ПолучитьОбласть("ОписаниеЗаявки");
		Обл.Параметры.Описание=Описание;
		ТабДокумент.Вывести(Обл);
		
	КонецЕсли;
		
    Обл=Макет.ПолучитьОбласть("Подвал");
	ТабДокумент.Вывести(Обл);
	
	// Первую колонку не печатаем
	ТабДокумент.ОбластьПечати = ТабДокумент.Область(1,1,ТабДокумент.ВысотаТаблицы,ТабДокумент.ШиринаТаблицы);
	
	НапечататьДокумент(ТабДокумент, 1, Ложь, СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));
			
КонецПроцедуры // ПечатьЗаявки()
	
#КонецЕсли

// Возвращает структуру, содержащую поля шапки, обязательные для заполнения
//
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей - структура с именами реквизитов шапки
//
Функция СтруктураОбязательныхПолейШапка()
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		Если ФормаОплаты = Перечисления.ВидыДенежныхСредств.Безналичные Тогда
			СтруктураПолей = Новый Структура("Контрагент,БанковскийСчетКонтрагента,Ответственный,Состояние");
		Иначе
			СтруктураПолей = Новый Структура("Контрагент,Ответственный,Состояние");
		КонецЕсли;
				
		Если Константы.ОплатыРаспределяютМенеджеры.Получить() Тогда
			СтруктураПолей.Вставить("ПериодПланирования");
		КонецЕсли;	
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		СтруктураПолей = Новый Структура("Получатель,Ответственный,Состояние");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочийРасходДенежныхСредств Тогда
		
		СтруктураПолей = Новый Структура("Ответственный,Состояние,ВалютаДокумента,Контрагент");
				
	Иначе
		
		СтруктураПолей = Новый Структура("Ответственный,Состояние,ВалютаДокумента");
		
	КонецЕсли;
	
	Если ВключатьВПлатежныйКалендарь Тогда
		СтруктураПолей.Вставить("ФормаОплаты");
		СтруктураПолей.Вставить("ВалютаДокумента");
	КонецЕсли;
	
	Возврат СтруктураПолей;
	
КонецФункции // СтруктураОбязательныхПолейШапка()

// Проверяет значение, необходимое при проведении
Процедура ПроверитьЗначение(Значение, Отказ, Заголовок,ИмяРеквизита)
	
	Если ЗначениеНеЗаполнено(Значение) Тогда 
		
		ОшибкаПриПроведении("Не заполнено значение реквизита """+ИмяРеквизита+"""",Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗначение()

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧ(Отказ, Заголовок)
		
	Для Каждого Платеж Из РасшифровкаПлатежа Цикл
		
		ПроверитьЗначение(Платеж.СтатьяДвиженияДенежныхСредств, Отказ, Заголовок,"Статья движения денежных средств");
		ПроверитьЗначение(Платеж.ДатаРасхода, Отказ, Заголовок,"Дата расхода");
				
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			ПроверитьЗначение(Платеж.ДоговорКонтрагента,Отказ, Заголовок,"Договор");
			ПроверитьЗначение(Платеж.СуммаВзаиморасчетов,Отказ, Заголовок,"Сумма взаиморасчетов");
			
			Если Не Отказ Тогда
				
				// Лапенков 20110721 - отключаем обязательное поле "Сделка"
				// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
				//Если Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
				// ИЛИ Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				//	ПроверитьЗначение(Платеж.Сделка,Отказ, Заголовок,"Сделка");
				//	Если Отказ Тогда
				//		Сообщить("По выбранному договору установлен способ ведения взаиморасчетов ""по заказам"". 
				//		|Заполните поле ""Сделка""!");
				//	КонецЕсли;
				//	
				//КонецЕсли;
				
				Если НЕ ЗначениеНеЗаполнено(Организация) И Организация <> Платеж.ДоговорКонтрагента.Организация Тогда
					СообщитьОбОшибке("Выбран договор контрагента, не соответстветствующий организации, указанной в документе!", Отказ, Заголовок);
				КонецЕсли;
				
			КонецЕсли;
			
			Если Константы.ОплатыРаспределяютМенеджеры.Получить() Тогда // проверка на соответвтвие датам в табл. части периоду планирования
				Если ПериодПланирования <> НачалоМесяца(Платеж.ДатаРасхода) Тогда
					Сообщить("Дата расхода в строке № "+Строка(Платеж.НомерСтроки) + "  не соответствует периоду планирования!");	
					Отказ = Истина;
					Возврат;
				КонецЕсли;	
			КонецЕсли;	
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
			
			ПроверитьЗначение(Платеж.СуммаВзаиморасчетов,Отказ, Заголовок,"Сумма взаиморасчетов");
						
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочийРасходДенежныхСредств Тогда
			
			ПроверитьЗначение(Платеж.ДатаРасхода, Отказ, Заголовок, "Статья затрат");			
			
		КонецЕсли;
		
		//Если ВключатьВПлатежныйКалендарь Тогда
		//	ПроверитьЗначение(Платеж.СуммаПлатежа,Отказ, Заголовок,"Сумма платежа");
		//КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // ПроверитьЗаполнениеТЧ

// Процедура выполняет заполнение суммы документа,
// по регистру "СуммыЗаказов".
//
// Параметры:
//  ДокументОснование  - документ ссылка (Заказ покупателя, Заказ поставщику).
//  ВалютаДокумента    - валюта документа (валюта регламентированного учета организаций)
//  КурсВзаиморасчетов - курс взаиморасчетов по договору
//  КратностьВзаиморасчетов - кратность взаиморасчетов по договору
//
Процедура ЗаполнитьПоЗаказу(ДокументОснование, СтрокаПлатеж)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", ДокументОснование);

	Запрос.Текст ="ВЫБРАТЬ
	|	РасчетыСКонтрагентамиОстатки.Сделка Как Сделка,
	|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(, Сделка = &Заказ) КАК РасчетыСКонтрагентамиОстатки";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПлатеж.Сделка=Выборка.Сделка;
		Если Выборка.Сумма < 0 Тогда
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.Сумма*(-1);
			СуммаДокумента = ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов,
			                            СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
			                            ВалютаДокумента,
			                            СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
			                            СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
			СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;							
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоЗаказу()

// Процедура выполняет заполнение суммы документа,
// суммы взаиморасчетов по регистру "КонтрагентыВзаиморасчетыКомпании".
//
Процедура ЗаполнитьПоВзаиморасчетам(СтрокаПлатеж)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорКонтрагента", СтрокаПлатеж.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка", СтрокаПлатеж.Сделка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СуммаВзаиморасчетовОстаток КАК СуммаДолга // в валюте взаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(,
	|	                                                    ДоговорКонтрагента = &ДоговорКонтрагента
	|	                                                    И Сделка = &Сделка)
	|ГДЕ
	|	СуммаВзаиморасчетовОстаток < 0
	|
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаДолга*(-1);
		СуммаДокумента = ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
		                            СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента,
		                            СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
		                            СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
									
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;							
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоВзаиморасчетам()

// Процедура выполняет заполнение суммы документа,
// суммы взаиморасчетов по регистру "ВзаиморасчетыСПодотчетнымиЛицами".
//
Процедура ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицом(СтрокаПлатеж) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Получатель", Получатель);
	Запрос.УстановитьПараметр("РасчетныйДокумент", РасчетныйДокумент);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетовПодотчетника", ВалютаДокумента);//***ВалютаВзаиморасчетовПодотчетника);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СуммаВзаиморасчетовОстаток КАК СуммаДолга // в валюте взаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(,
	|	                                                           ФизЛицо = &Получатель
	|	                                                         И РасчетныйДокумент = &РасчетныйДокумент
	|	                                                         И Валюта = &ВалютаВзаиморасчетовПодотчетника)
	|ГДЕ
	|	СуммаВзаиморасчетовОстаток < 0
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов = - Выборка.СуммаДолга;
		//***СуммаДокумента = ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
		//							ВалютаВзаиморасчетовПодотчетника, ВалютаДокумента,
		//							СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
		//							СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
		
		СуммаДокумента = ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
		                            ВалютаДокумента, ВалютаДокумента,
		                            КурсДокумента, КурсДокумента,
		                            КратностьДокумента, КратностьДокумента);
									
		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;							
									
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицом()


// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(СтруктураДанныхШапки, Отказ, Заголовок, СтруктураКурсыВалют)
		
	РасчетыВозврат=НаправленияДвиженияДляДокументаДвиженияДенежныхСредствУпр(ВидОперации);
	КоэффициентСторно=?(РасчетыВозврат=Перечисления.РасчетыВозврат.Возврат,-1,1);
												
	Если РазмещениеЗаявки.Количество()>0 Тогда
		
		ТабРазмещениеЗаявки=РазмещениеЗаявки.Выгрузить();
		ТабРазмещениеЗаявки.Свернуть("МестоРазмещения","СуммаПлатежа");
		
		НаборРазмещение=Движения.РазмещениеЗаявокНаРасходованиеСредств;
		ТаблицаРазмещение=НаборРазмещение.Выгрузить();
		ТаблицаРазмещение.Очистить();
		
		НаборРезерв=Движения.ДенежныеСредстваВРезерве;
		ТаблицаРезерв=НаборРезерв.Выгрузить();
		ТаблицаРезерв.Очистить();

		Для Каждого Строка Из ТабРазмещениеЗаявки Цикл
			
			Если Строка.МестоРазмещения=Неопределено Тогда
				Продолжить;
			ИначеЕсли ТипЗнч(Строка.МестоРазмещения)= Тип("ДокументСсылка.ПланируемоеПоступлениеДенежныхСредств") Тогда
				
				ОстатокКРазмещению=ПолучитьНеразмещенныйОстаток(Строка.МестоРазмещения,КонецДня(ДатаРасхода),Ссылка);
				
				Если ОстатокКРазмещению<Строка.СуммаПлатежа Тогда
					Сообщить(Заголовок+"
					|Размещаемая сумма превышает неразмещенный остаток
					|по "+Строка.МестоРазмещения+".
					|Возможный к использованию остаток: "+Формат(ОстатокКРазмещению,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаДокумента+"
					|Резервируемая сумма = "+Формат(Строка.СуммаПлатежа,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаДокумента);				
					
					Отказ = Истина;
					Возврат;
							
				КонецЕсли;
				
				СтрокаРазмещение=ТаблицаРазмещение.Добавить();
				СтрокаРазмещение.ДокументПланирования=Строка.МестоРазмещения;
				СтрокаРазмещение.ДокументРезервирования=Ссылка;
				СтрокаРазмещение.Сумма=Строка.СуммаПлатежа;
				
			Иначе
				
				// Проверяем остаток доступных денежных средств
				СвободныйОстаток=ПолучитьСвободныйОстатокДС(Строка.МестоРазмещения,КонецДня(ДатаРасхода),Ссылка);
				Если СвободныйОстаток<Строка.СуммаПлатежа Тогда
					Сообщить(Заголовок+"
					|Резервируемая сумма превышает возможный к использованию остаток денежных средств
					|по "+Строка.МестоРазмещения.Наименование+".
					|Возможный к использованию остаток: "+Формат(СвободныйОстаток,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаДокумента+"
					|Резервируемая сумма = "+Формат(Строка.СуммаПлатежа,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаДокумента);
					
					Если НЕ ЕстьРазрешениеПревышатьСвободныйОстатокДС() Тогда
						Отказ = Истина;
						Возврат;
					КонецЕсли;
					
				КонецЕсли;
				
				СтрокаРезерв=ТаблицаРезерв.Добавить();
				СтрокаРезерв.БанковскийСчетКасса=Строка.МестоРазмещения;
				СтрокаРезерв.ДокументРезервирования=Ссылка;
				СтрокаРезерв.ВидДенежныхСредств=ФормаОплаты;
				СтрокаРезерв.Сумма=Строка.СуммаПлатежа;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НаборРазмещение.мПериод=КонецДня(ДатаРасхода);
		НаборРазмещение.мТаблицаДвижений=ТаблицаРазмещение;
		Движения.РазмещениеЗаявокНаРасходованиеСредств.ВыполнитьПриход();
		
		НаборРезерв.мПериод=ДатаРасхода;
		НаборРезерв.мТаблицаДвижений=ТаблицаРезерв;
		Движения.ДенежныеСредстваВРезерве.ВыполнитьПриход();
		
	КонецЕсли;
		
	// По регистру "ЗаявкиНаРасходованиеСредств"
	
	НаборДвиженийЗаявки = Движения.ЗаявкиНаРасходованиеСредств;
	ТаблицаДвиженийЗаявки = НаборДвиженийЗаявки.Выгрузить();
	ТаблицаДвиженийЗаявки.Очистить();
	
	// По регистру "РасчетыСКонтрагентами"	
	НаборДвиженийКонтрагенты = Движения.РасчетыСКонтрагентами;
	ТаблицаДвиженийКонтрагенты = НаборДвиженийКонтрагенты.Выгрузить();
	ТаблицаДвиженийКонтрагенты.Очистить();
	
	Для Каждого Платеж Из РасшифровкаПлатежа Цикл
		
		Если ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
			//***ВалютаВзаиморасчетов = ВалютаВзаиморасчетовПодотчетника;
			ВалютаВзаиморасчетов = ВалютаДокумента;
		ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			ВалютаВзаиморасчетов = Платеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		Иначе
			ВалютаВзаиморасчетов = ВалютаДокумента;
		КонецЕсли;
			
		СтруктураКурсВзаиморасчетов=ПолучитьКурсВалюты(ВалютаВзаиморасчетов,?(ДатаРасхода='00010101',Дата,КонецДня(ДатаРасхода)));
				
		СуммаУпр = ПересчитатьИзВалютыВВалюту(Платеж.СуммаВзаиморасчетов,ВалютаВзаиморасчетов,, 
												СтруктураКурсВзаиморасчетов.Курс,
												СтруктураКурсыВалют.ВалютаУпрУчетаКурс, 
												СтруктураКурсВзаиморасчетов.Кратность,
												СтруктураКурсыВалют.ВалютаУпрУчетаКратность);

		
		СтрокаДвиженийЗаявки = ТаблицаДвиженийЗаявки.Добавить();
		если ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщикуСКодомКБК Тогда
			СтрокаДвиженийЗаявки.ДоговорКонтрагента           			= Контрагент.ОсновнойДоговорКонтрагента;
		иначе
		    СтрокаДвиженийЗаявки.ДоговорКонтрагента           			= Платеж.ДоговорКонтрагента;
		КонецЕсли;
		СтрокаДвиженийЗаявки.Сделка 								= Платеж.Сделка;
		СтрокаДвиженийЗаявки.СуммаВзаиморасчетов      				= Платеж.СуммаВзаиморасчетов;
		СтрокаДвиженийЗаявки.СуммаУпр    							= СуммаУпр;
		СтрокаДвиженийЗаявки.Сумма    								= Платеж.СуммаПлатежа;
		СтрокаДвиженийЗаявки.ЗаявкаНаРасходование                 	= Ссылка;
		СтрокаДвиженийЗаявки.СтатьяДвиженияДенежныхСредств          = Платеж.СтатьяДвиженияДенежныхСредств;
		СтрокаДвиженийЗаявки.Проект							        = Платеж.Проект;
		Если Константы.ОплатыРаспределяютМенеджеры.Получить() Тогда
			СтрокаДвиженийЗаявки.ДатаРасхода = Платеж.ДатаРасхода;
		КонецЕсли;	
		
		Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) И ВключатьВПлатежныйКалендарь Тогда
								
			СтрокаДвиженийКонтрагенты = ТаблицаДвиженийКонтрагенты.Добавить();
			СтрокаДвиженийКонтрагенты.ДоговорКонтрагента    	= Платеж.ДоговорКонтрагента;
			СтрокаДвиженийКонтрагенты.РасчетыВозврат          	= РасчетыВозврат;	
			СтрокаДвиженийКонтрагенты.Сделка			 		= Платеж.Сделка;
			СтрокаДвиженийКонтрагенты.СуммаВзаиморасчетов      	= Платеж.СуммаВзаиморасчетов*КоэффициентСторно;
			СтрокаДвиженийКонтрагенты.СуммаУпр    				= СуммаУпр*КоэффициентСторно;
				
		КонецЕсли;
		
	КонецЦикла;
	
	Если Константы.ОплатыРаспределяютМенеджеры.Получить() Тогда
		НаборДвиженийЗаявки.мПериод            = ?(ПериодПланирования='00010101',Дата,ПериодПланирования);		
	Иначе
		НаборДвиженийЗаявки.мПериод            = ?(ДатаРасхода='00010101',Дата,ДатаРасхода);
	КонецЕсли;
	НаборДвиженийЗаявки.мТаблицаДвижений   = ТаблицаДвиженийЗаявки;	
	Движения.ЗаявкиНаРасходованиеСредств.ВыполнитьПриход();
	
	Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) И ВключатьВПлатежныйКалендарь Тогда
		
		НаборДвиженийКонтрагенты.мПериод            = ?(ДатаРасхода='00010101',Дата,ДатаРасхода);
		НаборДвиженийКонтрагенты.мТаблицаДвижений   = ТаблицаДвиженийКонтрагенты;
		
		Если КоэффициентСторно=1 Тогда
			
			Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
			
		Иначе
			
			Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
			
		КонецЕсли;
		
	КонецЕсли;
    /////////////////////////////////////////// контрольпланового расхода дс
		
		НаборПланРасход=Движения.КонтрольПланируемыхРасходовДС;
		ТаблицаПланРасход=НаборПланРасход.Выгрузить();
		ТаблицаПланРасход.Очистить();
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтрольПланируемыхРасходовДСОстатки.Контрагент,
		|	КонтрольПланируемыхРасходовДСОстатки.СтатьяРасхода,
		|	КонтрольПланируемыхРасходовДСОстатки.ПериодПланирования,
		|	ЕСТЬNULL(КонтрольПланируемыхРасходовДСОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
		|	КонтрольПланируемыхРасходовДСОстатки.Ответственный
		|ПОМЕСТИТЬ Остатки
		|ИЗ
		|	РегистрНакопления.КонтрольПланируемыхРасходовДС.Остатки(&МоментВремени, ПериодПланирования = &Период) КАК КонтрольПланируемыхРасходовДСОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.Контрагент,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СтатьяРасхода,
		|	НАЧАЛОПЕРИОДА(ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ДатаРасхода, МЕСЯЦ) КАК ПериодРасхода,
		|	СУММА(ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаПлатежа) КАК СуммаПлатежа,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ОтветственныйЗаПланирование
		|ПОМЕСТИТЬ ДанныеДокумента
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеСредств.РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа
		|ГДЕ
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка = &Ссылка
		|	И НАЧАЛОПЕРИОДА(ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ДатаРасхода, МЕСЯЦ) >= &НачалоКонтроля
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СтатьяРасхода,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.Контрагент,
		|	НАЧАЛОПЕРИОДА(ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ДатаРасхода, МЕСЯЦ),
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ОтветственныйЗаПланирование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.СтатьяРасхода,
		|	ДанныеДокумента.ПериодРасхода,
		|	ДанныеДокумента.СуммаПлатежа,
		|	ЕСТЬNULL(Остатки.СуммаОстаток, 0) КАК СуммаОстаток,
		|	ДанныеДокумента.ОтветственныйЗаПланирование
		|ИЗ
		|	ДанныеДокумента КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
		|		ПО ДанныеДокумента.ПериодРасхода = Остатки.ПериодПланирования
		|			И ДанныеДокумента.СтатьяРасхода = Остатки.СтатьяРасхода
		|			И (ВЫБОР
		|				КОГДА ДанныеДокумента.СтатьяРасхода.ПоКонтрагентам
		|					ТОГДА ДанныеДокумента.Контрагент = Остатки.Контрагент
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|			И ДанныеДокумента.ОтветственныйЗаПланирование = Остатки.Ответственный";
		
		Запрос.УстановитьПараметр("МоментВремени", ?(Дата<ДатаРасхода,ДатаРасхода+1,МоментВремени()));
		Запрос.УстановитьПараметр("НачалоКонтроля", Дата(2017,08,01,00,00,00));
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("Период", НачалоМесяца(ДатаРасхода));
		Результат = Запрос.Выполнить();
		
		
		Если не Результат.Пустой() Тогда
			выборка  = Результат.Выбрать();
			пока выборка.Следующий() цикл
				Если не Выборка.СтатьяРасхода.ПоКонтрагентам и Выборка.суммаПлатежа>Выборка.суммаОстаток и (не Выборка.статьяРасхода.неконтролировать) Тогда
					Отказ = Истина;
					Сообщить("Перерасход по статье расходов денежных средств "+Выборка.СтатьяРасхода + ". ");
				иначеесли Выборка.суммаПлатежа>Выборка.суммаОстаток и (не Выборка.СтатьяРасхода.неконтролировать) Тогда
					Отказ = Истина;
					Сообщить("Перерасход по статье расходов денежных средств "+Выборка.СтатьяРасхода + ". По контрагенту "+выборка.Контрагент);    //
				иначе	
					СтрокаПланРасход=ТаблицаПланРасход.Добавить();
					Если  Выборка.статьяРасхода.поконтрагентам Тогда
					СтрокаПланРасход.Контрагент=Выборка.Контрагент;
				    конецЕсли; 
				    СтрокаПланРасход.Ответственный=Выборка.ОтветственныйЗаПланирование;
					СтрокаПланРасход.СтатьяРасхода=Выборка.статьяРасхода;
					СтрокаПланРасход.ПериодПланирования =ПериодПланирования;
					Если Выборка.статьяРасхода.Ввалюте Тогда
						Курс = Регистрысведений.КурсыВалютДляПоступления.Получить(НачалоМесяца(ДатаРасхода)-6*24*60*60,новый структура("Валюта",Выборка.статьяРасхода.Валюта)); 
					иначе
						курс =1;
					конецЕсли;	
					СтрокаПланРасход.Сумма=Выборка.суммаПлатежа;
				конецЕсли;
			конецЦикла;
		конецЕсли;
		НаборПланРасход.мПериод=ДатаРасхода;
		НаборПланРасход.мТаблицаДвижений=ТаблицаПланРасход;
		Движения.КонтрольПланируемыхРасходовДС.ВыполнитьРасход();
КонецПроцедуры // ДвиженияПоРегистрам() 

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если Основание  = Неопределено или ТипЗнч(Основание) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

	СпособЗаполнения = "Не заполнять";
	ВалютаДокумента  = мВалютаРегламентированногоУчета;
	
	СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику")
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда

	    ДатаРасхода=Основание.ДатаОплаты;
	 
	 	ДокументОснование = Основание;
		СтрокаПлатеж.ДоговорКонтрагента    = Основание.ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов 	= ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ДатаРасхода);
		СтрокаПлатеж.КурсВзаиморасчетов           	= СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов      	= СтруктураКурсаВзаиморасчетов.Кратность;
		
		Если (ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику"))
			И (СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
			ИЛИ СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам) Тогда
			
			СтрокаПлатеж.Сделка=Основание;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") И СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			
			СтрокаПлатеж.Сделка=Основание;
			
		КонецЕсли;
		
        ВидОперации						= Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику;
		
		
		Если НЕ ЗначениеНеЗаполнено(Основание.СтруктурнаяЕдиница) Тогда
			
			Если ТипЗнч(Основание.СтруктурнаяЕдиница)=Тип("СправочникСсылка.Кассы") Тогда
				ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные;
			Иначе
				ФормаОплаты=Перечисления.ВидыДенежныхСредств.Безналичные;
			КонецЕсли;
			
			БанковскийСчетКасса = Основание.СтруктурнаяЕдиница;
		Иначе
			ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные;
			БанковскийСчетКасса = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяКасса");
		КонецЕсли;

		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") И Основание.Проведен  Тогда
			СпособЗаполнения = "По заказу";
		Иначе
			СпособЗаполнения = "По сумме документа";
		КонецЕсли;
		
		Если НЕ ЗначениеНеЗаполнено(БанковскийСчетКасса) Тогда
			ВалютаДокумента=БанковскийСчетКасса.ВалютаДенежныхСредств;
		Иначе
			ВалютаДокумента=мВалютаРегламентированногоУчета;
		КонецЕсли;
		
		СтруктураКурсаДокумента           = ПолучитьКурсВалюты(ВалютаДокумента,КонецДня(ДатаРасхода));
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;

//====================================================================================================================		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
			или (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеДопРасходов")) 
		  	или (ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")) 
		  	или (ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")) Тогда
			
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю
		Иначе
			ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику;
		КонецЕсли;

		Контрагент  = Основание.Контрагент;
		СтрокаПлатеж.ДоговорКонтрагента        = Основание.ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;

		Если СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = 
				                    Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") И СтрокаПлатеж.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				СтрокаПлатеж.Сделка = Неопределено;
			Иначе
				СтрокаПлатеж.Сделка = Основание;
			КонецЕсли;
			Если Основание.Проведен Тогда
				СпособЗаполнения = "По взаиморасчетам";
			КонецЕсли;
		Иначе
			СтрокаПлатеж.Сделка = Основание.Сделка;
			Если Основание.Проведен Тогда
				СпособЗаполнения = "По сумме документа";
			КонецЕсли;
		КонецЕсли;
				
		ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные;
		БанковскийСчетКасса = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяКасса");
				
		Если НЕ ЗначениеНеЗаполнено(БанковскийСчетКасса) Тогда
			ВалютаДокумента=БанковскийСчетКасса.ВалютаДенежныхСредств;
		Иначе
			ВалютаДокумента=мВалютаРегламентированногоУчета;
		КонецЕсли;

		СтруктураКурсаДокумента           = ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;	
		
//============================================================================================
ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.АвансовыйОтчет")
			или ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаКомандировку")   //23.11.2015 - как Авансовый отчет!
	Тогда

		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаКомандировку")  тогда
			
			Получатель                   = Основание.Сотрудник;
			
			НазначениеПлатежа = "Командировочные на поездку в "+Основание.МестоКомандировки;
			
			Если Основание.Состояние = Перечисления.СостоянияОбъектов.Утвержден тогда
				ВключатьВПлатежныйКалендарь = Истина;
			Иначе	
				ПричинаОтклонения = "Заявка на командировку еще НЕ УТВЕРЖЕНА!";
			КонецЕсли;
			ЗаполнитьЗначенияСвойств( ЭтотОбъект, Основание);
			//СуммаДокумента			= Основание.СуммаДокумента; // сумма документа, а не расшифровки по видам затрат!
			//Подраздление				= Основание.Подразделение;
			//Описание				 	= Основание.Описание;
			Ответственный 				= глТекущийПользователь;
			Комментарий = "На основании Заявки на командировку "+Основание.Номер+" от "+формат(Основание.Дата,"ДЛФ=DD");
			
		 	СпособЗаполнения = "";
			СтрокаПлатеж.СуммаПлатежа 	     = Основание.СуммаДокумента;
			СтрокаПлатеж.СуммаВзаиморасчетов = Основание.СуммаДокумента;
			
			СтрокаПлатеж.Сделка = Основание;// для структуры подчиненности
			
			ДатаПогашенияАванса = Макс(Основание.ДатаКомандировки, Основание.Дата); // до начала Командировки - надо выдать деньги
			ПериодПланирования  = ДатаПогашенияАванса;
			ОжидаемыйСрокПоставки = ДатаПогашенияАванса;
		Иначе
			Получатель                  = Основание.ФизЛицо;
			СпособЗаполнения = "По взаиморасчетам с подотчетным лицом";
		КонецЕсли;	
		
		ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику;
		ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные;
		
		РасчетныйДокумент                = Основание;
		ВалютаВзаиморасчетовПодотчетника = Основание.ВалютаДокумента;
		СтруктураКурсаВзаиморасчетов     = ПолучитьКурсВалюты(ВалютаВзаиморасчетовПодотчетника, ТекущаяДата());
		СтрокаПлатеж.КурсВзаиморасчетов               = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов          = СтруктураКурсаВзаиморасчетов.Кратность;
		
		Если СтрокаПлатеж.КурсВзаиморасчетов>0 тогда //+++ 23.11.2015
			 СтрокаПлатеж.СуммаПлатежа = СтрокаПлатеж.СуммаВзаиморасчетов * СтрокаПлатеж.КурсВзаиморасчетов;
			 СуммаДокумента = СуммаДокумента * СтрокаПлатеж.КурсВзаиморасчетов;
        КонецЕсли;
		
		БанковскийСчетКасса = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяКасса");
		
		Если НЕ ЗначениеНеЗаполнено(БанковскийСчетКасса) Тогда
			ВалютаДокумента=БанковскийСчетКасса.ВалютаДенежныхСредств;
		Иначе
			ВалютаДокумента=мВалютаРегламентированногоУчета;
		КонецЕсли;
		
		СтруктураКурсаДокумента           = ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		
		Если Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда

			ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю;
			ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные;
			Контрагент	= Основание.Контрагент;
			
			СтрокаПлатеж.ДоговорКонтрагента=Основание.ДоговорКонтрагента;
			
			СпособЗаполнения = "По сумме документа";

			Если ЗначениеНеЗаполнено(Основание.Сделка) И СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = 
				                    Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
				СтрокаПлатеж.Сделка = Основание;
			Иначе
				СтрокаПлатеж.Сделка = Основание.Сделка;
			КонецЕсли;
			
			СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,Дата);
			СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
			
			БанковскийСчетКасса = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяКасса");
			
			Если НЕ ЗначениеНеЗаполнено(БанковскийСчетКасса) Тогда
				ВалютаДокумента=БанковскийСчетКасса.ВалютаДенежныхСредств;
			Иначе
				ВалютаДокумента=мВалютаРегламентированногоУчета;
			КонецЕсли;
			
			СтруктураКурсаДокумента           = ПолучитьКурсВалюты(ВалютаДокумента, Дата);
			КурсДокумента      = СтруктураКурсаДокумента.Курс;
			КратностьДокумента = СтруктураКурсаДокумента.Кратность;
			
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком Тогда
			
			// Отказ
			// Документ не вводится на основании ПКО с видом операции "Возврат денежных средств от поставщика".
			Возврат;
			
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
			
			// Отказ
			// Документ не вводится на основании ПКО с видом операции "Возврат денежных средств от подотчетника".
			Возврат;
			
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
			
			// Отказ
			// Документ не вводится на основании ПКО с видом операции "Прием розничной выручки".
			Возврат;
			
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
			
			// Отказ
			// Документ не вводится на основании ПКО с видом операции "Прочий приход денежных средств".
			Возврат;
			
		КонецЕсли;
				
	КонецЕсли;

	Если СпособЗаполнения = "По заказу" Тогда

		ЗаполнитьПоЗаказу(Основание,СтрокаПлатеж);

	ИначеЕсли СпособЗаполнения = "По взаиморасчетам" Тогда
		ЗаполнитьПоВзаиморасчетам(СтрокаПлатеж);
	ИначеЕсли СпособЗаполнения = "По взаиморасчетам с подотчетным лицом" Тогда
		ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицом(СтрокаПлатеж);
	ИначеЕсли СпособЗаполнения = "По сумме документа" Тогда
		
		// Если основание - отчет комитенту, то надо вычесть вознаграждение
		ОснованиеСуммаДокумента = Основание.СуммаДокумента;
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			ОснованиеСуммаДокумента = Основание.СуммаДокумента - Основание.СуммаВознаграждения;
		КонецЕсли;

		СтруктураКурсаОснования = ПолучитьКурсВалюты(Основание.ВалютаДокумента, Основание.Дата);
		КурсОснования=СтруктураКурсаОснования.Курс;
		КратностьОснования=СтруктураКурсаОснования.Кратность;

		СтрокаПлатеж.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(ОснованиеСуммаДокумента, Основание.ВалютаДокумента, Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		                                 КурсОснования, Основание.КурсВзаиморасчетов, КратностьОснования, Основание.КратностьВзаиморасчетов);
		СуммаДокумента      = ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		                                 КурсДокумента, СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
										 
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;

	КонецЕсли;

	Ответственный=глТекущийПользователь;
	
		
		
	ДокументОснование = Основание.Ссылка;
		
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);
	
	ЕстьРасчетыСКонтрагентами=ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=ЕстьРасчетыПоКредитам(ВидОперации);
		
	Если РазмещениеЗаявки.Итог("СуммаПлатежа")>СуммаДокумента Тогда
		Сообщить(Заголовок+" 
		|сумма размещения превышает сумму документа.");
		
		Отказ=Истина;
		
	КонецЕсли;

	//Проверим заполнение реквизитов документов
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейШапка(), Отказ, Заголовок);
	ПроверитьЗаполнениеТЧ(Отказ, Заголовок);
	
	СтруктураДанныхШапки=Новый Структура;

	СтруктураГруппаВалют = Новый Структура;
	СтруктураГруппаВалют.Вставить("ВалютаУпрУчета",Константы.ВалютаУправленческогоУчета.Получить().Код);
	СтруктураГруппаВалют.Вставить("ВалютаДокумента",ВалютаДокумента.Код);
	
	СтруктураКурсыВалют=ПолучитьКурсыДляГруппыВалют(СтруктураГруппаВалют,?(ДатаРасхода='00010101',Дата,КонецДня(ДатаРасхода)));

	Если Не Отказ Тогда

		ДвиженияПоРегистрам(СтруктураДанныхШапки, Отказ, Заголовок, СтруктураКурсыВалют);

	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если Этоновый() тогда
		Если ЗначениеЗаполнено(Подразделение.ПрефиксИБ) Тогда 
			УстановитьНовыйНомер(СокрЛП(Подразделение.ПрефиксИБ));
		Иначе 
			УстановитьНовыйНомер(СокрЛП(Организация.Префикс));
		КонецЕсли;
	конецЕсли;
	
	
	
	Если не ПараметрыСеанса.ИдетОбменРаспределеннойБазы Тогда
		// Заявки может править только Ответственный или с правами "РазрешитьУтверждатьЗаявки"
		Если не ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьУтверждатьЗаявки") Тогда
			Если ЗначениеНеЗаполнено(Ответственный) ИЛИ Ответственный=глТекущийПользователь Тогда
			Иначе // правит чужую заявку
				Если (Состояние = Перечисления.СостоянияОбъектов.Подготовлен ИЛИ Состояние = Перечисления.СостоянияОбъектов.Согласован) И ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьСогласовыватьЗаявки") Тогда
					//Согласовывающий заявки может их редактировать
				Иначе
					Отказ = Истина;
					Сообщить("Вы не имеете права редактировать чужую заявку!",СтатусСообщения.Важное);
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	// если ВЭД платит ецам
	//Если глТекущийПользователь.ОсновноеПодразделение = справочники.Подразделения.НайтиПоКоду("00006")   Тогда
	//	Для каждого стр из Расшифровкаплатежа Цикл
	//		Если не ЗначениеЗаполнено(стр.Сделка) и  стр.ДоговорКонтрагента.ВалютаВзаиморасчетов<>Константы.ВалютаРегламентированногоУчета.Получить() и ЗначениеЗаполнено(стр.ДоговорКонтрагента) Тогда
	//			Сообщить("В строке "+стр.НомерСтроки+ " заполните сделку по оплате!");
	//			отказ= истина;
	//		конецЕсли;	
	//	конецЦикла;
	//конецЕсли;	
	
	Если не отказ и ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику Тогда
		// для всех оплат поставщикам обязательна сделка. распоряжение ИИ 03,10,16
		Для каждого стр из Расшифровкаплатежа Цикл
			Если не ЗначениеЗаполнено(стр.Сделка)  и ЗначениеЗаполнено(стр.ДоговорКонтрагента) и стр.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
				Сообщить("В строке "+стр.НомерСтроки+ " заполните сделку по оплате!");
				отказ= истина;
			конецЕсли;	
		конецЦикла;
	конецЕсли;
	Если не отказ и ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику Тогда
		
		//ПроверитьРазмерПредоплаты = Новый СписокЗначений;
		Отбор = Новый структура;
		Отбор.Вставить("Объект",Контрагент);
		Отбор.Вставить("Свойство",планыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90217"));
		Свойство = РегистрыСведений.ЗначенияСвойствОбъектов.Получить(Отбор);
		Для каждого стр из Расшифровкаплатежа Цикл
			Если Организация = Справочники.Организации.НайтиПоКоду("00001") и ЗначениеЗаполнено(стр.Сделка) и ТипЗнч(стр.Сделка)=Тип("ДокументСсылка.ЗаказПоставщику")и стр.ДоговорКонтрагента.ВалютаВзаиморасчетов<>Константы.ВалютаРегламентированногоУчета.Получить() и ЗначениеЗаполнено(стр.ДоговорКонтрагента) и Свойство.Значение<>Истина  Тогда
				МаксПредоплата = яштПоставщики.РассчитатьСуммуМаксимальнойОплаты(Стр.Сделка,МоментВремени());
				Если стр.СуммаВзаиморасчетов > МаксПредоплата Тогда
					Ответ=вопрос("По сделке "+стр.Сделка+" максимально допустимая сумма платежа "+МаксПредоплата+". Изменить на максимальную сумму?",РежимДиалогаВопрос.ДаНет,0);
					Если Ответ = КодВозвратаДиалога.Да Тогда
						стр.СуммаВзаиморасчетов =МаксПредоплата;
						стр.СуммаПлатежа = стр.СуммаВзаиморасчетов; 
						СуммаДокумента = Расшифровкаплатежа.Итог("СуммаПлатежа");
					иначе
						стр.СуммаВзаиморасчетов =0;
						стр.СуммаПлатежа =0; 
						СуммаДокумента = Расшифровкаплатежа.Итог("СуммаПлатежа");
					конецЕсли;
				конецЕсли;	
			конецЕсли;	
		конецЦикла;
	конецЕсли;	
	
	
	Если РасшифровкаПлатежа.Количество() =1 Тогда
		ДатаРасхода=РасшифровкаПлатежа[0].ДатаРасхода;
	КонецЕсли;
	
		//05.12.17 Смирнов заявки ИМ могут подготавливать только нижеперечисленные пользователи (задача №36554) 
	Если Подразделение = Справочники.Подразделения.НайтиПоКоду("00139") и состояние = Перечисления.СостоянияОбъектов.Подготовлен тогда  //Отдел интернет-продаж
		Если глТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Федунов") или
			глТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Левченко Е.") или
			глТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Яковлева Анна") или
			рольДоступна("ПравоЗавершенияРаботыПользователей")
			тогда //можно
		иначе
			Предупреждение("Вам запрещено подготавливать заявку для подразделения "+Подразделение+"
						   |   Подготовка документа отменена!");
			возврат;
		КонецЕсли;
	КонецЕсли;

	
	Если НЕ Отказ Тогда
		
		обЗаписатьПротоколИзменений(ЭтотОбъект);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	БанковскийСчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка(); 
	Утвердил = Справочники.Пользователи.ПустаяСсылка();
	Состояние = Перечисления.СостоянияОбъектов.ПустаяСсылка();
	Для каждого стр из РасшифровкаПлатежа Цикл
	стр.РасчетныйСчетКомпании = Справочники.БанковскиеСчета.ПустаяСсылка();	
	конецЦикла;	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
