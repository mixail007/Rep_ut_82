Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьРасходныйОрдерНаТовары()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	Конецесли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Контрагент,
	|	Организация,
	|	Товары.(
	|		Номенклатура,
	|		Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|		Номенклатура.НаименованиеПолное     КАК Товар,
	|		КоличествоМест,
	|		Количество,
	|		0                                   КАК Цена,
	|		0                                   КАК Сумма,
	|		ЕдиницаИзмерения.Представление      КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест.Представление  КАК ЕдиницаИзмеренияМест,
	|		ХарактеристикаНоменклатуры          КАК Характеристика,
	|		СерияНоменклатуры КАК Серия
	|	),
	|	ВозвратнаяТара.(
	|		Номенклатура,
	|		Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|		Номенклатура.НаименованиеПолное     КАК Товар,
	|		Количество,
	|		0                                   КАК Цена,
	|		0                                   КАК Сумма,
	|		Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения
	|	)
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|
	|ГДЕ
	|	РасходныйОрдерНаТовары.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки,
	|	ВозвратнаяТара.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	ВыборкаСтрокТара   = Шапка.ВозвратнаяТара.Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходныйОрдерНаТовары_Накладная";

	Макет = ПолучитьМакет("Накладная");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Расходный ордер на товары");
	ТабДокумент.Вывести(ОбластьМакета);

	ПредставлениеОрганизации = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ПредставлениеКонтрагента = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата), "ПолноеНаименование,");

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.Поставщик = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеКонтрагента;
	ОбластьМакета.Параметры.Получатель = Шапка.Контрагент;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.Колонка = Колонка;
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
	Итого         = 0;
	Ном           = 0;

	// Товары
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.НомерСтроки = Ном;
		ОбластьМакета.Параметры.Товар       = ВыборкаСтрокТовары.Товар + ПредставлениеСерий(ВыборкаСтрокТовары);

		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакета);

		Итого = Итого + ВыборкаСтрокТовары.Сумма;

	КонецЦикла;

	// Тара
	Пока ВыборкаСтрокТара.Следующий() Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТара);
		ОбластьМакета.Параметры.НомерСтроки = Ном;
		ОбластьМакета.Параметры.Товар       = ВыборкаСтрокТара.Товар + " (возвратная тара)";

		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТара.КодАртикул;
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакета);

		Итого = Итого + ВыборкаСтрокТара.Сумма;

	КонецЦикла;

	// Вывести Итого
	ОбластьМакета                 = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ФорматСумм(Итого);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести Сумму прописью
	ОбластьМакета                          = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ВыборкаСтрокТовары.Количество()
	                                       + ", на сумму " + ФорматСумм(Итого);
	ОбластьМакета.Параметры.СуммаПрописью  = СформироватьСуммуПрописью(Итого, Константы.ВалютаУправленческогоУчета.Получить());
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьРасходныйОрдерНаТовары()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "Ордер" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьРасходныйОрдерНаТовары();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();

	КонецЕсли;

	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;

	СписокМакетов.Добавить("Ордер", "Расходный ордер");

	ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

#КонецЕсли

// Процедура выполняет заполнение табличной части по приходному ордеру на товары.
//
Процедура ЗаполнитьТовары() Экспорт

#Если ВнешнееСоединение Тогда
	Если Товары.Количество() > 0 Тогда
		Товары.Очистить();
	КонецЕсли;
#КонецЕсли

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Склад",             Склад);
	Запрос.УстановитьПараметр("СтатусПартии",      Перечисления.СтатусыПартийТоваров.Купленный);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументПередачи);

	ТекстЗапросаПоПриходномуОрдеру =
	"ВЫБРАТЬ
	|	Остатки.Номенклатура,
	|	Остатки.СерияНоменклатуры,
	|	Остатки.ХарактеристикаНоменклатуры,
	|	Остатки.Качество,
	|	Неопределено КАК ДокументРезерва,
	|	Остатки.КоличествоОстаток             КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(, ДокументПолучения = &ДокументОснование 
	|                                                      И Склад        = &Склад
	|                                                      И СтатусПартии = &СтатусПартии) КАК Остатки
	|";

	ТекстЗапросаПоНакладной =
	"ВЫБРАТЬ
	|	Остатки.Номенклатура,
	|	Остатки.СерияНоменклатуры,
	|	Остатки.ХарактеристикаНоменклатуры,
	|	Остатки.Качество,
	|	Остатки.ДокументРезерва,
	|	Остатки.КоличествоОстаток          КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(, ДокументПередачи = &ДокументОснование И Склад = &Склад И СтатусПартии = &СтатусПартии) КАК Остатки
	|";

	ВидыОперацийРасходныйОрдер = Перечисления.ВидыОперацийРасходныйОрдер;

	ЗначениеДокументРезерва = Неопределено;
	Если ВидОперации = ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру Тогда
		Запрос.Текст = ТекстЗапросаПоПриходномуОрдеру;
	Иначе
		Запрос.Текст = ТекстЗапросаПоНакладной;
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		Количество = Выборка.КоличествоОстаток;
		Если Количество = 0 ИЛИ Количество = NULL Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество                 = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент                = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

		// Рассчитать реквизиты табличной части.
		РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.ДокументРезерва            = Выборка.ДокументРезерва;
		СтрокаТабличнойЧасти.Качество                   = Выборка.Качество;

		Если ЗначениеНеЗаполнено(Выборка.СерияНоменклатуры) Тогда
			СтрокаТабличнойЧасти.СерияУказываетсяПриОтпускеСоСклада = Истина;
		Иначе
			СтрокаТабличнойЧасти.СерияУказываетсяПриОтпускеСоСклада = Ложь;
		КонецЕсли;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;

	КонецЦикла; // Выборка.Следующий()

КонецПроцедуры // ЗаполнитьТовары()

// Процедура выполняет заполнение табличной части по приходному ордеру на товары.
//
Процедура ЗаполнитьВозвратнуюТару() Экспорт

#Если ВнешнееСоединение Тогда
	Если ВозвратнаяТара.Количество() > 0 Тогда
		ВозвратнаяТара.Очистить();
	КонецЕсли;
#КонецЕсли
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Склад"    , Склад);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументПередачи);
	Запрос.УстановитьПараметр("СтатусПартии",      Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);

	ТекстЗапросаПоПриходномуОрдеру =
	"ВЫБРАТЬ
	|	Остатки.Номенклатура,
	|	Неопределено КАК ДокументРезерва,
	|	Остатки.КоличествоОстаток    КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(, ДокументПолучения = &ДокументОснование 
	|                                                      И Склад        = &Склад
	|                                                      И СтатусПартии = &СтатусПартии) КАК Остатки
	|";

	ТекстЗапросаПоНакладной =
	"ВЫБРАТЬ
	|	Остатки.Номенклатура,
	|	Остатки.ДокументРезерва,
	|	Остатки.КоличествоОстаток    КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(, ДокументПередачи = &ДокументОснование И Склад = &Склад И СтатусПартии = &СтатусПартии) КАК Остатки
	|";
	
	ВидыОперацийРасходныйОрдер = Перечисления.ВидыОперацийРасходныйОрдер;

	ЗначениеДокументРезерва = Неопределено;
	Если ВидОперации = ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру Тогда
		Запрос.Текст = ТекстЗапросаПоПриходномуОрдеру;
	Иначе
		Запрос.Текст = ТекстЗапросаПоНакладной;
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		Количество = Выборка.КоличествоОстаток;
		Если Количество = 0 ИЛИ Количество = NULL Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = ВозвратнаяТара.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Количество;
		СтрокаТабличнойЧасти.ДокументРезерва            = Выборка.ДокументРезерва;

	КонецЦикла; // Выборка.Следующий()

КонецПроцедуры // ЗаполнитьВозвратнуюТару()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// По виду операции определяет статус партии прихода товаров (не возвратная тара!)
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Значение перечисления "Статусы партии товаров".
//
Функция ОпределитьСтатусПартииПрихода() 

	Статус = Перечисления.СтатусыПартийТоваров.ПустаяСсылка();

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваров.ПоступлениеТоваров 
	 Или ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваров.ПоступлениеТоваровНеОтфактурованных
	 Или ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваров.ПоступлениеТоваровХранение Тогда

		Статус = Перечисления.СтатусыПартийТоваров.Купленный; 

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваров.ПоступлениеТоваровКомиссия 
	      Или ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваров.ПоступлениеТоваровНеОтфактурованныхКомиссия
	      Или ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваров.ПоступлениеТоваровХранениеКомиссия Тогда

		Статус = Перечисления.СтатусыПартийТоваров.НаКомиссию; 

	Иначе    

		Сообщить("По виду операции """ +
		ВидОперации + """ не удалось определить статус партии товаров!", СтатусСообщения.Важное); 
	КонецЕсли; 

	Возврат Статус;

КонецФункции // ОпределитьСтатусПартииПрихода()

// Заполняет в таблице движений по регитстру ПартииТоваровНаСкладах нестандартные поля.
//
// Параметры:
//  ТаблицаТЧ       - таблица значений, соответствующая табличной части документа
//  ТаблицаДвижений - таблица значений, соответствующая набору записей регистра,
//  СтатусПартии    - значение перечисления статусов партий. 
//
Процедура ЗаполнитьПоляПартииТоваровНаСкладах(ТаблицаТЧ, ТаблицаДвижений, СтатусПартии)

	Для каждого СтрокаДвижений Из ТаблицаДвижений Цикл

		СтрокаДвижений.Склад                 = Склад;
		СтрокаДвижений.ДокументОприходования = Ссылка;
		СтрокаДвижений.СтатусПартии          = СтатусПартии;

		// Заказ заполняем если его указали в документе и по договору ведется обособленный учет товаров по заказам.
		СтрокаТЧ = ТаблицаТЧ.Найти(СтрокаДвижений.НомерСтроки, "НомерСтроки");
		ОбособленныйУчет = СтрокаТЧ .ОбособленныйУчетТоваровПоЗаказамПокупателей;
		СтрокаДвижений.Заказ = ?(ОбособленныйУчет <> NULL И ОбособленныйУчет 
		        И Не (ЗначениеНеЗаполнено(СтрокаТЧ.ЗаказПокупателя)), СтрокаТЧ.ЗаказПокупателя, Неопределено);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоляПартииТоваровНаСкладах()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();
	
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей =  Новый Структура("ВидОперации, Организация, Склад, ДокументПередачи");

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		ОшибкаПриПроведении("Документ не может быть оформлен на неавтоматизированную торговую точку!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.Перемещение Тогда
		Если СтруктураШапкиДокумента.Склад <> СтруктураШапкиДокумента.СкладОтправитель Тогда
			ОшибкаПриПроведении("Склад документа должен соответствовать складу-отправителю документа перемещения!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;		

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Качество");

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	                                                      Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");

	// Теперь позовем общую процедуру проверки заполнения.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара",СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоТаре,
	Отказ, Заголовок);

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
	НаборДвижений = Движения.ТоварыНаСкладах;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	// Проверка осатков при оперативном проведении.
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	Если Не Отказ Тогда
		Движения.ТоварыНаСкладах.ВыполнитьРасход();
	КонецЕсли;

	// ТАРА ПО РЕГИСТРУ ТоварыНаСкладах.
	НаборДвижений = Движения.ТоварыНаСкладах;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	ТаблицаДвижений.Очистить();
	ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	// Проверка осатков при оперативном проведении.
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	Если Не Отказ Тогда
		Движения.ТоварыНаСкладах.ВыполнитьРасход();
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийРасходныйОрдер.Перемещение Тогда
			
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
		НаборДвижений = Движения.ТоварыОрганизаций;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		// Проверка осатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;

		Если Не Отказ Тогда
			Движения.ТоварыОрганизаций.ВыполнитьРасход();
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.РасходПоНакладной 
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.Перемещение 
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоставщику Тогда

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПередачеСоСкладов
		НаборДвижений = Движения.ТоварыКПередачеСоСкладов;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		
		// Если в табличной части установлен флаг "Серия указывается при отпуске со склада",
		// то по данному регистру необходимо списывать пустую серию
		ТаблицаПоТоварамКПередаче = ТаблицаПоТоварам.Скопировать();
		Для каждого СтрокаТаблицы ИЗ ТаблицаПоТоварамКПередаче Цикл
			Если СтрокаТаблицы.СерияУказываетсяПриОтпускеСоСклада Тогда
				СтрокаТаблицы.СерияНоменклатуры = Неопределено;
			КонецЕсли;
		КонецЦикла;

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамКПередаче, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Склад,                        "Склад");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");
		ТаблицаДвижений.ЗаполнитьЗначения(ДокументПередачи,             "ДокументПередачи");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		// Проверка осатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
		
		Если Не Отказ Тогда
			Движения.ТоварыКПередачеСоСкладов.ВыполнитьРасход();
		КонецЕсли;
		
		// ТАРА ПО РЕГИСТРУ ТоварыКПередачеСоСкладов

		НаборДвижений = Движения.ТоварыКПередачеСоСкладов;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		// Заполним таблицу движений.
		ТаблицаДвижений.Очистить();
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Склад,                       "Склад");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "СтатусПартии");
		ТаблицаДвижений.ЗаполнитьЗначения(ДокументПередачи,            "ДокументПередачи");
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый,            "Качество");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		// Проверка осатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
		
		Если Не Отказ Тогда
			Движения.ТоварыКПередачеСоСкладов.ВыполнитьРасход();
		КонецЕсли;

		Если ВидОперации <> Перечисления.ВидыОперацийРасходныйОрдер.Перемещение Тогда
			
			// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПередачеОрганизаций
			НаборДвижений = Движения.ТоварыКПередачеОрганизаций;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамКПередаче, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(ДокументПередачи, "ДокументПередачи");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			// Проверка осатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;
			
			Если Не Отказ Тогда
				Движения.ТоварыКПередачеОрганизаций.ВыполнитьРасход();
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру 
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.Перемещение Тогда
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПолучениюНаСклады
		
		НаборДвижений = Движения.ТоварыКПолучениюНаСклады;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(ДокументПередачи, "ДокументПолучения");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СкладПолучатель, "Склад");
 		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		// Проверка осатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный
		   И ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;

		Если Не Отказ Тогда
			Движения.ТоварыКПолучениюНаСклады.ВыполнитьРасход();
		КонецЕсли;
		
		// ТАРА ПО РЕГИСТРУ ТоварыКПолучениюНаСклады

		НаборДвижений = Движения.ТоварыКПолучениюНаСклады;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		// Заполним таблицу движений.
		ТаблицаДвижений.Очистить();
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(ДокументПередачи, "ДокументПолучения");
 		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СкладПолучатель, "Склад");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "СтатусПартии");
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый,            "Качество");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		// Проверка осатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный
		   И ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;

		Если Не Отказ Тогда
			Движения.ТоварыКПолучениюНаСклады.ВыполнитьРасход();
		КонецЕсли;
		
		// Если поступление по приходному ордеру было без права продажи, то надо снять резерв
		Если СтруктураШапкиДокумента.СниматьРезерв Тогда
			
			НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
			
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
			
			ТаблицаДвижений.ЗаполнитьЗначения(ДокументПередачи, "ДокументРезерва");
			ТаблицаДвижений.ЗаполнитьЗначения(Склад, "Склад");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			// Проверка осатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;
			
			Если Не Отказ Тогда
				Движения.ТоварыВРезервеНаСкладах.ВыполнитьРасход();
			КонецЕсли;

			ТаблицаДвижений.Очистить();
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

			ТаблицаДвижений.ЗаполнитьЗначения(ДокументПередачи, "ДокументРезерва");
			ТаблицаДвижений.ЗаполнитьЗначения(Склад, "Склад");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			// Проверка осатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;
			
			Если Не Отказ Тогда
				Движения.ТоварыВРезервеНаСкладах.ВыполнитьРасход();
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары. (для списания партий товаров)
	Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.РасходПоНакладной
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоставщику Тогда
		
		// Если партии были оприходованы с правом перепродажи, то нужно списывать партии
		Если НЕ СтруктураШапкиДокумента.СниматьРезерв Тогда
			
			НаборДвижений = Движения.СписанныеТовары;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			
			ТаблицаБезНаклеек = ТаблицаПоТоварам.скопировать();
			сч = ТаблицаБезНаклеек.Количество()-1;
			Пока сч>=0 Цикл
				Если ТаблицаБезНаклеек[сч].Номенклатура.видТовара = Перечисления.ВидыТоваров.КрышкиНаклейки Тогда
					ТаблицаБезНаклеек.Удалить(сч);
				конецЕсли;	
				сч=сч-1;
			конецЦикла;
			
			
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаБезНаклеек, ТаблицаДвижений);
			
			// Недостающие поля.
			Инд = 0;
			Для каждого Строка Из ТаблицаДвижений Цикл
				
				Инд = Инд+1;
				Строка.НомерСтрокиДокумента = Инд;
				
			КонецЦикла;
			
			// Если ПУ по складам
			Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");
			КонецЕсли;
			
			ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
			ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
			
			// Документ передачи для списания по реализации
			ТаблицаДвижений.ЗаполнитьЗначения(ДокументПередачи,"ОсновнойДокумент");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.СписаниеПоОрдеру,"КодОперацииПартииТоваров");
			
			// Расходный ордер отражается только в упр. учете
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"ОтражатьВУправленческомУчете");
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.СписанныеТовары.ВыполнитьДвижения();
			КонецЕсли;
			
			
			УчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата);
			
			Если УчетнаяПолитика.СписыватьПартииПриПроведенииДокументов Тогда
				
				ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
				
				ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
				ЗаписьРегистрации.Период = Дата;
				ЗаписьРегистрации.Регистратор = Ссылка;
				
			Иначе
				
				// В неоперативном режиме границы последовательностей сдвигаются назад, если они позже документа.
				Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
					СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация, Истина, Ложь, Ложь)
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ДвиженияПоРегистрам()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда

		// Заполним реквизиты из стандартного набора.
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру;

		ДокументПередачи = Основание;

		Если Основание.Проведен Тогда

			ЗаполнитьТовары();
			ЗаполнитьВозвратнуюТару();
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда

		// Заполним реквизиты из стандартного набора.
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.РасходПоНакладной;

		ДокументПередачи = Основание;

		Если Основание.Проведен Тогда

			ЗаполнитьТовары();
			ЗаполнитьВозвратнуюТару();
		КонецЕсли;
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда

		// Заполним реквизиты из стандартного набора.
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.Перемещение;
		Склад = Основание.СкладОтправитель;
		ДокументПередачи = Основание;

		Если Основание.Проведен Тогда

			ЗаполнитьТовары();
			ЗаполнитьВозвратнуюТару();
		КонецЕсли;
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		// Заполним реквизиты из стандартного набора.
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоставщику;

		ДокументПередачи = Основание;

		Если Основание.Проведен Тогда

			ЗаполнитьТовары();
			ЗаполнитьВозвратнуюТару();
		КонецЕсли;
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.НаборкаКрышек") Тогда
		ДокументОснование=Основание;
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	// Проверка заполнения единицы измерения мест и количества мест
	ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = ПолучитьСуммуДокументаСНДС(ЭтотОбъект);

	Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.Перемещение Тогда
		Контрагент = Неопределено;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру Тогда

		//Если без права продажи, то документ резерва - приходный ордер.
		Если ДокументПередачи.БезПраваПродажи Тогда

			Для Каждого СтрокаТЧ Из Товары Цикл
				СтрокаТЧ.ДокументРезерва = ДокументПередачи;
			КонецЦикла;

			Для Каждого СтрокаТЧ Из ВозвратнаяТара Цикл
				СтрокаТЧ.ДокументРезерва = ДокументПередачи;
			КонецЦикла;

		Иначе

			ОчиститьРеквизитТЧ(ЭтотОбъект.Товары, "ДокументРезерва");
			ОчиститьРеквизитТЧ(ЭтотОбъект.ВозвратнаяТара, "ДокументРезерва");

		КонецЕсли;

	Иначе

		ОчиститьРеквизитТЧ(ЭтотОбъект.Товары, "ДокументРезерва");
		ОчиститьРеквизитТЧ(ЭтотОбъект.ВозвратнаяТара, "ДокументРезерва");

	КонецЕсли;

	ЗаполнитьКачествоПоУмолчанию(Товары);
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 


КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;


	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	//для роли крышечницы допускается проводить документы только с номенклатурой из группы крышки,
	//с видом операции РасходКрышек, со склада Ошиповка (комплектующие материалы)
	Если РольДоступна("Крышечницы") тогда
		ПроверитьВозможностьПроведения(Отказ, Заголовок);
	КонецЕсли;
	//
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	СтруктураШапкиДокумента.Вставить("СниматьРезерв", Ложь); // инициализация значения
	
	Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру Тогда
		
		ЗапросПоШапке = Новый Запрос;
		ЗапросПоШапке.УстановитьПараметр("ДокументОснование", ДокументПередачи);
		
		ЗапросПоШапке.Текст = "ВЫБРАТЬ БезПраваПродажи 
							|ИЗ Документ.ПриходныйОрдерНаТовары
							|ГДЕ Документ.ПриходныйОрдерНаТовары.Ссылка = &ДокументОснование";
							
		ВыборкаПоШапке = ЗапросПоШапке.Выполнить().Выбрать();
		Если ВыборкаПоШапке.Следующий() Тогда
			СтруктураШапкиДокумента.Вставить("СниматьРезерв", ВыборкаПоШапке.БезПраваПродажи);
		КонецЕсли;
		
	КонецЕсли;

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = СформироватьДеревоПолейЗапросаПоШапке();
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"       , "ВестиПартионныйУчетПоСкладам"      , "ВестиПартионныйУчетПоСкладам");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"                 , "ВидСклада"                         , "ВидСклада");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДокументПередачи"   , "СкладОтправитель"                  , "СкладОтправитель");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДокументПередачи"   , "СкладПолучатель"                  , "СкладПолучатель");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НомерСтроки"                       , "НомерСтроки");
	СтруктураПолей.Вставить("Номенклатура"                      , "Номенклатура");
	СтруктураПолей.Вставить("Количество"                        , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("СерияНоменклатуры"                 , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"        , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("ДокументРезерва"                   , "ДокументРезерва");
	СтруктураПолей.Вставить("Качество"                          , "Качество");
	СтруктураПолей.Вставить("СерияУказываетсяПриОтпускеСоСклада", "СерияУказываетсяПриОтпускеСоСклада");
	СтруктураПолей.Вставить("Услуга"                            , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                             , "Номенклатура.Набор");

	РезультатЗапросаПоТоварам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НомерСтроки"               , "НомерСтроки");
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("ДокументРезерва"           , "ДокументРезерва");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");

	РезультатЗапросаПоТаре = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);
	
	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, 
											Отказ, Заголовок);
	
	// Проверить заполнение ТЧ "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
											Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоТоварам, ТаблицаПоТаре,
							Отказ, Заголовок);

	КонецЕсли; 

КонецПроцедуры	// ОбработкаПроведения()

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)

	// Удаление записей регистрации из всех последовательностей
	Для Каждого НаборЗаписейРегистрацииВПоследовательности Из ПринадлежностьПоследовательностям Цикл
		НаборЗаписейРегистрацииВПоследовательности.Очистить();
	КонецЦикла;
	
	
КонецПроцедуры

процедура ПроверитьВозможностьПроведения(Отказ, Заголовок)
	СтрокаСообщения="";
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	РасходныйОрдерНаТоварыТовары.Номенклатура
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.Товары КАК РасходныйОрдерНаТоварыТовары
	|ГДЕ
	|	(НЕ РасходныйОрдерНаТоварыТовары.Номенклатура В ИЕРАРХИИ (&Крышки))
	|	И РасходныйОрдерНаТоварыТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Крышки",Справочники.Номенклатура.НайтиПоКоду("0080004"));
	Рез=Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() Цикл
		СтрокаСообщения=СтрокаСообщения+"Номенклатура: """+Рез.Номенклатура+""" не является крышкой/наклейкой."+Символы.ПС;
		Отказ=истина;
	КонецЦикла;
	Если отказ=Истина тогда
		ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
	КонецЕсли;
	
	Если ЭтотОбъект.ВидОперации<>Перечисления.ВидыОперацийРасходныйОрдер.РасходКрышек тогда
		Отказ=истина;
		ОшибкаПриПроведении("Вид операции должен быть ""Расход крышек""", Отказ, Заголовок);
	КонецЕсли;	
	
	Если ЭтотОбъект.Склад<>Справочники.Склады.НайтиПоКоду("00393") тогда
		Отказ=истина;
		ОшибкаПриПроведении("Склад должен быть ""Ошиповка (комплектующие материалы)""", Отказ, Заголовок);
	КонецЕсли;	
КонецПроцедуры	
мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
