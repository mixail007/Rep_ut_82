
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	#Если Клиент Тогда
		ИмМожно = Новый СписокЗначений;
		ИмМожно.Добавить(Справочники.Пользователи.НайтиПоКоду("Малышев Егор"));
		ИмМожно.Добавить(Справочники.Пользователи.НайтиПоКоду("Ульянов С."));
		ИмМожно.Добавить(Справочники.Пользователи.НайтиПоКоду("Левченко Ф.С."));
		ИмМожно.Добавить(Справочники.Пользователи.НайтиПоКоду("Куртов К.Д."));
		ИмМожно.Добавить(Справочники.Пользователи.НайтиПоКоду("Капченко И."));

		Если ПустаяСтрока(ИзФормулы) Тогда
			
			N = 12; //запрет учета прошлогодних шин и дисков
			
			Если (Расшифровка.Количество()=0) и не БракОбнаруженНаСкладе Тогда 
				Если не значениеЗаполнено(Реализация) тогда
					Сообщить("Заявка на брак № "+строка(Номер)+" : Поле <Реализация> не заполнено!", СтатусСообщения.Внимание);
					                                       //12 >> N
				иначеЕсли Реализация.Дата < ДобавитьМесяц(Дата,-N) и ИмМожно.НайтиПоЗначению(глТекущийПользователь)=Неопределено 
					и Не ВидТовара = Перечисления.ВидыТоваров.АКБ  и не ВидТовара = Перечисления.ВидыТоваров.Аксессуары Тогда    // Сакулина Добавила исключение На АКБ
					Сообщить("Реализация была проведена более "+строка(N)+" месяцев назад!");
					отказ = Истина;
				КонецЕсли;
				
				Если не значениеЗаполнено(Контрагент) и не БракОбнаруженНаСкладе тогда
					Сообщить("Заявка на брак № "+строка(Номер)+" : Поле <Контрагент> не заполнено!");
				КонецЕсли;
				
			ИначеЕсли не БракОбнаруженНаСкладе тогда 
				Для каждого стр из Расшифровка цикл
					если 	стр.Реализация.Дата < ДобавитьМесяц(Дата,-N) и ИмМожно.НайтиПоЗначению(глТекущийПользователь)=Неопределено
						и Не ВидТовара = Перечисления.ВидыТоваров.АКБ и не ВидТовара = Перечисления.ВидыТоваров.Аксессуары тогда  // Сакулина Добавила исключение На АКБ
					Сообщить("Реализация была проведена более "+строка(N)+" месяцев назад!");
					отказ = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
	
	// Сакулина  - ДЛЯ ФОРМУЛЫ
	Если Не ПустаяСтрока(ИзФормулы) и Не Отказ тогда
		
		//Создаем поступление на ОТХ и создаем задание на перемещение
		запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОперацияПоОтветственномуХранению.Ссылка
		|ИЗ
		|	Документ.ОперацияПоОтветственномуХранению КАК ОперацияПоОтветственномуХранению
		|ГДЕ
		|	ОперацияПоОтветственномуХранению.ДокументОснование = &Ссылка
		|	И ОперацияПоОтветственномуХранению.ПометкаУдаления = ЛОЖЬ";
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() тогда	
			ДокументОТХ  = Документы.ОперацияПоОтветственномуХранению.СоздатьДокумент();
			ДокументОТХ.Организация = Справочники.Организации.НайтиПоКоду("00001");
			ДокументОТХ.ВидОперации = Перечисления.ВидыОперацийПоОтветственномуХранению.Поступление;
			ДокументОТХ.Дата = ТекущаяДата();
			ДокументОТХ.ДокументОснование = Ссылка;
			ДокументОТХ.Контрагент = Контрагент;
			ДокументОТХ.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоКоду("Г7121");
			
			Для Каждого СтрТовар из Расшифровка Цикл
				НовСтр = ДокументОТХ.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр,СтрТовар);
				НовСтр.Склад = Справочники.Склады.НайтиПоКоду("02183");
			КонецЦикла;
			Попытка
				ДокументОТХ.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ОтменитьТранзакцию = Истина;
			КонецПопытки;
			
			// Сделаем Задание на перемещение
			Задание = Документы.ЗаданиеНаПеремещение.СоздатьДокумент();
			Задание.Дата = ТекущаяДата();
			Задание.ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Расход;
			Задание.Ассортимент = "АКБ";
			Задание.СкладПолучатель = Справочники.Склады.НайтиПоКоду("02184");
		    Задание.Организация = Справочники.Организации.НайтиПоКоду("00001");
			Задание.Контрагент = Контрагент;
			Задание.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоКоду("Г7121");

			Для Каждого СтрТовар из Расшифровка Цикл
				НовСтр = Задание.ЗаявкиНаБрак.Добавить();
				НовСтр.Заявка = Ссылка;
				НовСтр.Контрагент = Контрагент;
				НовСтр.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоКоду("Г7121"); // Договор хранения
				НовСтр.ДокументОтгрузки = ДокументОТХ.Ссылка;
				НовСтр.Номенклатура = СтрТовар.Номенклатура;
				НовСтр.Количество = СтрТовар.Количество;
				НовСтр.Склад = Справочники.Склады.НайтиПоКоду("02183");
				НовСтр.Вес = СтрТовар.Номенклатура.ЕдиницаХраненияОстатков.Вес * НовСтр.Количество;
				НовСтр.Объем = СтрТовар.Номенклатура.ЕдиницаХраненияОстатков.Объем * НовСтр.Количество;
			КонецЦикла;
			Задание.ВводитьТолькоПеремещение = Истина;
			Попытка
				Задание.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				# Если Клиент Тогда
				Сообщить("" + ОписаниеОшибки());
				# КОНЕЦЕсли
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
	// Сакулина
	
	#Если Клиент Тогда
		Если Не Отказ тогда
			СоздатьЗадачуНаПретензию();	
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

Функция НапечататьРекламационнуюКарточку() Экспорт
	//Если ВидТовара = Перечисления.ВидыТоваров.АКБ Тогда
	//	ТабДок = ПечатьРекламационнойКарточкиАКБ();
	//Иначе
		ТабДок = ПечатьРекламационнойКарточки();
	//КонецЕсли;
    Возврат ТабДок;
 КонецФункции

Функция ПечатьРекламационнойКарточки()	
	ТабДок=Новый ТабличныйДокумент;
	Макет=ПолучитьМакет("МакетРекламационнаяКарточка");
	Область=Макет.ПолучитьОбласть("Шапка");
	СведенияОГрузополучателе  = СведенияОЮрФизЛице(Контрагент,  Дата);
	Область.Параметры.АдресТелефон	= ОписаниеОрганизацииЗ(СведенияОГрузополучателе, "ФактическийАдрес,Телефоны");
	Область.Параметры.Дата = Формат(Дата,"ДФ=dd.MM.yyyy");
	Область.Параметры.Номер = Номер;
	Область.Параметры.Контрагент = Контрагент.НаименованиеПолное;
	Область.Параметры.ИННКонтрагент = Контрагент.ИНН;
	ТабДок.Вывести(Область);
	
	Область=Макет.ПолучитьОбласть("Строка");
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ЗаявкаНаБрак.Ссылка,
	|	ЗаявкаНаБрак.Ссылка.Номер,
	|	ЗаявкаНаБрак.Ссылка.Дата,
	|	ЗаявкаНаБрак.Ссылка.Контрагент,
	|	ЗаявкаНаБрак.Номенклатура,
	|	ЗаявкаНаБрак.Количество,
	|	ЗаявкаНаБрак.НомерРеализации,
	|	ЗаявкаНаБрак.ДатаРеализации,
	|	ЗаявкаНаБрак.СостояниеТовара КАК СостояниеДиска,
	|	ЗаявкаНаБрак.ДатаПроизводства,
	|	ВЫБОР
	|		КОГДА ЗаявкаНаБрак.Качество = &Биение
	|			ТОГДА ЗаявкаНаБрак.Комментарий
	|	КОНЕЦ КАК Биение,
	|	ВЫБОР
	|		КОГДА ЗаявкаНаБрак.Качество = &ДефектЛитья
	|			ТОГДА ЗаявкаНаБрак.Комментарий
	|	КОНЕЦ КАК ДефектЛитья,
	|	ВЫБОР
	|		КОГДА ЗаявкаНаБрак.Качество = &ДефектЛКП
	|			ТОГДА ЗаявкаНаБрак.Комментарий
	|	КОНЕЦ КАК ДефектЛКП,
	|	ВЫБОР
	|		КОГДА ЗаявкаНаБрак.Качество = &Дисбаланс
	|			ТОГДА ЗаявкаНаБрак.Комментарий
	|	КОНЕЦ КАК Дисбаланс,
	|	ВЫБОР
	|		КОГДА ЗаявкаНаБрак.Качество = &МеханическиеПовреждения
	|			ТОГДА ЗаявкаНаБрак.Комментарий
	|	КОНЕЦ КАК МеханическиеПовреждения,
	|	ВЫБОР
	|		КОГДА ЗаявкаНаБрак.Качество = &НеПодходитНаЗаявленныйАвто
	|			ТОГДА ЗаявкаНаБрак.Комментарий
	|	КОНЕЦ КАК НеПодходитНаЗаявленныйАвто,
	|	ВЫБОР
	|		КОГДА ЗаявкаНаБрак.Качество = &Комплектация
	|			ТОГДА ЗаявкаНаБрак.Комментарий
	|	КОНЕЦ КАК Комплектация,
	|	ВЫБОР
	|		КОГДА ЗаявкаНаБрак.Качество = &Пересорт
	|			ТОГДА ЗаявкаНаБрак.Комментарий
	|	КОНЕЦ КАК Пересорт,
	|	ЗаявкаНаБрак.Комментарий,
	|	ЗаявкаНаБрак.Ссылка.СостояниеЗаявки,
	|	ЗаявкаНаБрак.НачалоЭкспертизы,
	|	ЗаявкаНаБрак.ОкончаниеЭкспертизы,
	|	ЗаявкаНаБрак.Ссылка.Ответственный,
	|	ЗаявкаНаБрак.Ссылка.ОтветственныйСоСтороныКлиента,
	|	ЗаявкаНаБрак.ВидБрака,
	|	ЗаявкаНаБрак.МетодУстранения,
	|	ЗаявкаНаБрак.Заключение,
	|	ЗаявкаНаБрак.Действие,
	|	ЗаявкаНаБрак.Ссылка.КомментарийСклада,
	|	ЗаявкаНаБрак.ДополнительныеСвойства,
	|	ЗаявкаНаБрак.СерийныйНомер,
	|	ЗаявкаНаБрак.Марка,
	|	ЗаявкаНаБрак.Пробег,
	|	ЗаявкаНаБрак.Качество,
	|	ЗаявкаНаБрак.ДатаВыявленияДефекта,
	|	ЗаявкаНаБрак.ДатаПродажиКонПотребитель,
	|	ЗаявкаНаБрак.ИнфоКонечныйПотребитель
	|ИЗ
	|	Документ.ЗаявкаНаБрак.Расшифровка КАК ЗаявкаНаБрак
	|ГДЕ
	|	ЗаявкаНаБрак.Ссылка = &ссылка
	|	И ЗаявкаНаБрак.Ссылка.Контрагент = &Контрагент
	|	И ЗаявкаНаБрак.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И ЗаявкаНаБрак.Номенклатура <> &Пусто
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаявкаНаБрак.Ссылка,
	|	ЗаявкаНаБрак.Номер,
	|	ЗаявкаНаБрак.Дата,
	|	ЗаявкаНаБрак.Контрагент,
	|	ЗаявкаНаБрак.Номенклатура,
	|	ЗаявкаНаБрак.Количество,
	|	ЗаявкаНаБрак.НомерРеализации,
	|	ЗаявкаНаБрак.ДатаРеализации,
	|	ЗаявкаНаБрак.СостояниеДиска,
	|	ЗаявкаНаБрак.ДатаПроизводства,
	|	ЗаявкаНаБрак.Биение,
	|	ЗаявкаНаБрак.ДефектЛитья,
	|	ЗаявкаНаБрак.ДефектЛКП,
	|	ЗаявкаНаБрак.Дисбаланс,
	|	ЗаявкаНаБрак.МеханическиеПовреждения,
	|	ЗаявкаНаБрак.НеПодходитНаЗаявленныйАвто,
	|	ЗаявкаНаБрак.Комплектация,
	|	ЗаявкаНаБрак.Пересорт,
	|	ЗаявкаНаБрак.Комментарий,
	|	ЗаявкаНаБрак.СостояниеЗаявки,
	|	ЗаявкаНаБрак.НачалоЭкспертизы,
	|	ЗаявкаНаБрак.ОкончаниеЭкспертизы,
	|	ЗаявкаНаБрак.Ответственный,
	|	ЗаявкаНаБрак.ОтветственныйСоСтороныКлиента,
	|	ЗаявкаНаБрак.ВидБрака,
	|	ЗаявкаНаБрак.МетодУстранения,
	|	ЗаявкаНаБрак.Заключение,
	|	ЗаявкаНаБрак.Действие,
	|	ЗаявкаНаБрак.КомментарийСклада,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.ЗаявкаНаБрак КАК ЗаявкаНаБрак
	|ГДЕ
	|	ЗаявкаНаБрак.Контрагент = &Контрагент
	|	И ЗаявкаНаБрак.Дата МЕЖДУ &ДатаН И &ДатаК
	|	И ЗаявкаНаБрак.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И НЕ ЗаявкаНаБрак.ПометкаУдаления
	|	И ЗаявкаНаБрак.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("ДатаН",НачалоДня(Дата));
	Запрос.УстановитьПараметр("ДатаК",КонецДня(Дата));
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Запрос.УстановитьПараметр("Номенклатура",Справочники.Номенклатура.ПустаяСсылка());
	Запрос.УстановитьПараметр("Пусто",Справочники.Номенклатура.ПустаяСсылка());
	Запрос.УстановитьПараметр("Биение",Справочники.Качество.Биение);
	Запрос.УстановитьПараметр("ДефектЛитья",Справочники.Качество.ДефектЛитья);
	Запрос.УстановитьПараметр("ДефектЛКП",Справочники.Качество.ДефектЛКП);
	Запрос.УстановитьПараметр("Дисбаланс",Справочники.Качество.Дисбаланс);
	Запрос.УстановитьПараметр("МеханическиеПовреждения",Справочники.Качество.МеханическиеПовреждения);
	Запрос.УстановитьПараметр("НеПодходитНаЗаявленныйАвто",Справочники.Качество.НеПодходитНаАвто);
	Запрос.УстановитьПараметр("Комплектация",Справочники.Качество.ДефектКомплектации);
	Запрос.УстановитьПараметр("Пересорт",Справочники.Качество.Пересорт);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Рез=Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() Цикл
		
		Область.Параметры.Код			=""+Рез.Номенклатура.Код;
		
		//Область.Параметры.Количество			=""+Номенклатура.Количество;
		Область.Параметры.Заполнить(Рез);
		Область.Параметры.ДатаРеализации = Формат(Рез.ДатаРеализации,"ДФ=dd.MM.yyyy");
		Наименование=Рез.Номенклатура.Наименование;
		Наименование=СтрЗаменить(Наименование," Replica "," ");
		Наименование=СтрЗаменить(Наименование," replica "," ");
		Наименование=СтрЗаменить(Наименование," REPLICA "," ");
		Область.Параметры.Номенклатура=Наименование;
		
		Если ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
			Область.Параметры.ВыявленныеДефекты=""+ 
			?(ЗначениеЗаполнено(Рез.Биение)," Биение: "+Рез.Биение+",","")+
			?(ЗначениеЗаполнено(Рез.ДефектЛитья)," Дефект литья: "+Рез.ДефектЛитья+",","")+
			?(ЗначениеЗаполнено(Рез.ДефектЛКП)," Дефект ЛКП: "+Рез.ДефектЛКП+",","")+
			?(ЗначениеЗаполнено(Рез.Дисбаланс)," Дисбаланс: "+Рез.Дисбаланс+",","")+
			?(ЗначениеЗаполнено(Рез.МеханическиеПовреждения)," Механические повреждения: "+Рез.МеханическиеПовреждения+",","")+
			?(ЗначениеЗаполнено(Рез.НеПодходитНаЗаявленныйАвто)," Не подходит на заявленный авто: "+Рез.НеПодходитНаЗаявленныйАвто+",","")+
			?(ЗначениеЗаполнено(Рез.Комплектация)," Комплектация: "+Рез.Комплектация+",","")+
			?(ЗначениеЗаполнено(Рез.Пересорт)," Пересорт: "+Рез.Пересорт,"");
			
			ДопИнформация		=""+
			?(ЗначениеЗаполнено(Рез.СостояниеДиска)," Состояние диска: "+Рез.СостояниеДиска,"") + Символы.ПС;
			ДопИнформация = ДопИнформация + ?(ЗначениеЗаполнено(Рез.Марка)," марка авто: " + Рез.Марка + Символы.ПС,"");
			ДопИнформация = ДопИнформация + ?(ЗначениеЗаполнено(Рез.Пробег)," пробег авто: " + Рез.Пробег + Символы.ПС,"");
			Область.Параметры.ДопИнформация = ДопИнформация;
		ИначеЕсли ВидТовара = Перечисления.ВидыТоваров.Шины Тогда
			Область.Параметры.ВыявленныеДефекты = "" + ?(ЗначениеЗаполнено(Рез.Качество), "" + Рез.Качество + ";","") + Рез.Комментарий;
			ДопИнформация		=""+
			?(ЗначениеЗаполнено(Рез.СостояниеДиска)," Состояние шины: "+Рез.СостояниеДиска,"") + Символы.ПС;
			ДопИнформация = ДопИнформация + ?(ЗначениеЗаполнено(Рез.Марка)," марка авто: " + Рез.Марка + Символы.ПС,"");
			ДопИнформация = ДопИнформация + ?(ЗначениеЗаполнено(Рез.Пробег)," пробег авто: " + Рез.Пробег + Символы.ПС,"");
			ДопИнформация = ДопИнформация + Рез.ДополнительныеСвойства;
			Область.Параметры.ДопИнформация = ДопИнформация;
			Область.Параметры.ДатаПроизводства  = "" + Рез.ДатаПроизводства + 
			?(ЗначениеЗаполнено(Рез.СерийныйНомер),Символы.ПС + "серийный №: " + Рез.СерийныйНомер,  ""); 
			
		ИначеЕсли ВидТовара = Перечисления.ВидыТоваров.Аксессуары Тогда
			Область.Параметры.ВыявленныеДефекты = "" + ?(ЗначениеЗаполнено(Рез.Качество), "" + Рез.Качество + ";","") + Рез.Комментарий;
			ДопИнформация		=""+
			?(ЗначениеЗаполнено(Рез.СостояниеДиска)," Состояние товара: "+Рез.СостояниеДиска,"") + Символы.ПС;
			ДопИнформация = ДопИнформация + Рез.ДополнительныеСвойства;
			Область.Параметры.ДопИнформация = ДопИнформация;
			Область.Параметры.ДатаПроизводства  = "" + Рез.ДатаПроизводства + 
			?(ЗначениеЗаполнено(Рез.СерийныйНомер),Символы.ПС + "серийный №: " + Рез.СерийныйНомер,  ""); 
		ИначеЕсли  ВидТовара = Перечисления.ВидыТоваров.АКБ Тогда
			Область.Параметры.ВыявленныеДефекты = "" + ?(ЗначениеЗаполнено(Рез.Качество), "" + Рез.Качество + ";","") + Рез.Комментарий;
			ДопИнформация		=""+
			?(ЗначениеЗаполнено(Рез.СостояниеДиска)," Состояние АКБ: "+Рез.СостояниеДиска,"") + Символы.ПС;
			ДопИнформация = ДопИнформация + ?(ЗначениеЗаполнено(Рез.Марка)," инфо об автомобиле: " + Рез.Марка + Символы.ПС,"");
			ДопИнформация = ДопИнформация + ?(ЗначениеЗаполнено(Рез.ИнфоКонечныйПотребитель)," инфо о клиенте: " + Рез.ИнфоКонечныйПотребитель + Символы.ПС,"");
			ДопИнформация = ДопИнформация + ?(ЗначениеЗаполнено(Рез.ДатаПродажиКонПотребитель)," дата продажи кон. потребителю: " + Рез.ДатаПродажиКонПотребитель + Символы.ПС,"");
			ДопИнформация = ДопИнформация + ?(ЗначениеЗаполнено(Рез.ДатаВыявленияДефекта)," дата выявления дефекта: " + Рез.ДатаВыявленияДефекта + Символы.ПС,"");
			
			ДопИнформация = ДопИнформация + Рез.ДополнительныеСвойства;
			Область.Параметры.ДопИнформация = ДопИнформация;
			Область.Параметры.ДатаПроизводства  = "" + Рез.ДатаПроизводства + 
			?(ЗначениеЗаполнено(Рез.СерийныйНомер),Символы.ПС + "серийный №: " + Рез.СерийныйНомер,  ""); 
			
		КонецЕсли;
		ТабДок.Вывести(Область);
	КонецЦикла;
	
	Если ВидТовара = Перечисления.ВидыТоваров.АКБ Тогда
		Область=Макет.ПолучитьОбласть("ПодвалАКБ");
	Иначе
		Область=Макет.ПолучитьОбласть("Подвал");
	КонецЕсли;
		
	Область.Параметры.ВидТовара =?(ВидТовара = Перечисления.ВидыТоваров.Диски,"дисков","шин");
	ТабДок.Вывести(Область);
	Если ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
		Область  = Макет.ПолучитьОбласть("Согласовано");
		ТабДок.Вывести(Область);
	КонецЕсли;
	

	
	ТабДок.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	ТабДок.АвтоМасштаб = Истина;
	Возврат ТабДок;
КонецФункции

Функция ПечатьРекламационнойКарточкиАКБ()
	ТабДок=Новый ТабличныйДокумент;
	Макет=ПолучитьМакет("МакетРекламационнойКарточкиДляАКБ");
	Область=Макет.ПолучитьОбласть("Шапка");
	СведенияОГрузополучателе  = СведенияОЮрФизЛице(Контрагент,  Дата);
	Область.Параметры.АдресТелефон	= ОписаниеОрганизацииЗ(СведенияОГрузополучателе, "ФактическийАдрес,Телефоны");
	Область.Параметры.Дата = Дата;
	Область.Параметры.Контрагент = Контрагент;
	ТабДок.Вывести(Область);
	
	Область=Макет.ПолучитьОбласть("Товар");

	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ЗаявкаНаБрак.Ссылка,
	             |	ЗаявкаНаБрак.Ссылка.Номер,
	             |	ЗаявкаНаБрак.Ссылка.Дата,
	             |	ЗаявкаНаБрак.Ссылка.Контрагент,
	             |	ЗаявкаНаБрак.Номенклатура,  
	             |	ЗаявкаНаБрак.НомерРеализации,
	             |	ЗаявкаНаБрак.ДатаРеализации,
	             |	ЗаявкаНаБрак.ДатаПроизводства,
	             |	ЗаявкаНаБрак.Ссылка.Комментарий,
	             |	ЗаявкаНаБрак.ОкончаниеЭкспертизы,
	             |	ЗаявкаНаБрак.ВидБрака,
	             |	ЗаявкаНаБрак.МетодУстранения,
	             |	ЗаявкаНаБрак.Заключение,
	             |	ЗаявкаНаБрак.Действие,
	             |	ЗаявкаНаБрак.Ссылка.КомментарийСклада,
	             |	ЗаявкаНаБрак.Комментарий КАК ДефектКомментарий,
	             |	ЗаявкаНаБрак.Марка,
	             |	ЗаявкаНаБрак.СерийныйНомер,
	             |	ЗаявкаНаБрак.ИнфоКонечныйПотребитель,
	             |	ЗаявкаНаБрак.ДатаПродажиКонПотребитель,
	             |	ЗаявкаНаБрак.ДатаВыявленияДефекта,
	             |	ЗаявкаНаБрак.ДополнительныеСвойства
	             |ИЗ
	             |	Документ.ЗаявкаНаБрак.Расшифровка КАК ЗаявкаНаБрак
	             |ГДЕ
	             |	ЗаявкаНаБрак.Ссылка = &ссылка
	             |	И ЗаявкаНаБрак.Ссылка.Контрагент = &Контрагент
	             |	И ЗаявкаНаБрак.Ссылка.ПометкаУдаления = ЛОЖЬ
	             |	И ЗаявкаНаБрак.Номенклатура <> &Пусто";
				 
				 Запрос.УстановитьПараметр("ДатаН",НачалоДня(Дата));
				 Запрос.УстановитьПараметр("ДатаК",КонецДня(Дата));
				 Запрос.УстановитьПараметр("Контрагент",Контрагент);
				 Запрос.УстановитьПараметр("Номенклатура",Справочники.Номенклатура.ПустаяСсылка());
				 Запрос.УстановитьПараметр("Пусто",Справочники.Номенклатура.ПустаяСсылка());
				 Запрос.УстановитьПараметр("Ссылка",Ссылка);
								 
				 РезультатЗапроса = Запрос.Выполнить();
				 Выборка = РезультатЗапроса.Выбрать();
				 СписокНоменклатуры = "";
				 Пока Выборка.Следующий() Цикл
					 Область.Параметры.Заполнить(Выборка);
					 Наименование = Выборка.Номенклатура.Наименование;
					 Наименование = СтрЗаменить(Наименование," Replica "," ");
					 Наименование = СтрЗаменить(Наименование," replica "," ");
					 Наименование = СтрЗаменить(Наименование," REPLICA "," ");
					 Область.Параметры.Номенклатура = Наименование;
					 Область.Параметры.ВыявленныеДефекты = Выборка.ДефектКомментарий;
					 Область.Параметры.Торг12 = "№ "+ Выборка.НомерРеализации + " от " + Формат(Выборка.ДатаРеализации,"ДЛФ=DD");	
					 Область.Параметры.ДатаВыявленияДефекта = ?(Выборка.ДатаВыявленияДефекта = Дата(1,1,1),"",
					                                    Формат(Выборка.ДатаВыявленияДефекта,"ДЛФ=DD"));
				     Область.Параметры.ДатаПродажиКонПотребитель = ?(Выборка.ДатаПродажиКонПотребитель = Дата(1,1,1),"",
					                                    Формат(Выборка.ДатаПродажиКонПотребитель,"ДЛФ=DD"));

					 ТабДок.Вывести(Область);
					 ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
					 СписокНоменклатуры = СписокНоменклатуры + Наименование+ "; "; 
				 КонецЦикла;
	
	
	Область=Макет.ПолучитьОбласть("Заключение");
	Область.Параметры.ДатаДок = Формат(Выборка.Дата,"ДЛФ=DD");
	Область.Параметры.СписокТовара = СписокНоменклатуры;

    ТабДок.Вывести(Область);
	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	ТабДок.ОриентацияСтраницы=ОриентацияСтраницы.Портрет;
	ТабДок.АвтоМасштаб = Истина;

	Возврат ТабДок;
КонецФункции

Функция НапечататьЗаключение() Экспорт
	ТабДок=Новый ТабличныйДокумент;
	Макет=ПолучитьМакет("МакетЗаключениеЭксперта");
	Область=Макет.ПолучитьОбласть("Заключение");
	Область.Параметры.НачалоЭкспертизы=Формат(НачалоЭкспертизы,"ДФ='dd MMMM yyyy hh:mm'; ДП=-");
	Область.Параметры.ОкончаниеЭкспертизы=Формат(ОкончаниеЭкспертизы,"ДФ='dd MMMM yyyy hh:mm'; ДП=-");

	Область.Параметры.ИсследуемыйДиск="Легкосплавные автомобильный диск "+Номенклатура+" ("+Номенклатура.Код+").";
	Область.Параметры.Исследование=Исследование;
	Область.Параметры.Вывод=Вывод;
	
	ТабДок.Вывести(Область);
    Возврат ТабДок;
КонецФункции

Функция НапечататьЗаключениеКраткое() Экспорт
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ЗаявкаНаБрак.Ссылка,
	             |	ЗаявкаНаБрак.Номер,
	             |	ЗаявкаНаБрак.Дата,
	             |	ЗаявкаНаБрак.Контрагент,
	             |	ЗаявкаНаБрак.Номенклатура,
	             |	ЗаявкаНаБрак.Количество,
	             |	ЗаявкаНаБрак.НомерРеализации,
	             |	ЗаявкаНаБрак.ДатаРеализации,
	             |	ЗаявкаНаБрак.СостояниеДиска,
	             |	ЗаявкаНаБрак.ДатаПроизводства,
	             |	ЗаявкаНаБрак.Биение,
	             |	ЗаявкаНаБрак.ДефектЛитья,
	             |	ЗаявкаНаБрак.ДефектЛКП,
	             |	ЗаявкаНаБрак.Дисбаланс,
	             |	ЗаявкаНаБрак.МеханическиеПовреждения,
	             |	ЗаявкаНаБрак.НеПодходитНаЗаявленныйАвто,
	             |	ЗаявкаНаБрак.Комплектация,
	             |	ЗаявкаНаБрак.Пересорт,
	             |	ЗаявкаНаБрак.Комментарий,
	             |	ЗаявкаНаБрак.Реализация,
	             |	ЗаявкаНаБрак.СостояниеЗаявки,
	             |	ЗаявкаНаБрак.НачалоЭкспертизы,
	             |	ЗаявкаНаБрак.ОкончаниеЭкспертизы,
	             |	ЗаявкаНаБрак.Ответственный,
	             |	ЗаявкаНаБрак.ОтветственныйСоСтороныКлиента,
	             |	ЗаявкаНаБрак.Подразделение,
	             |	ЗаявкаНаБрак.ВидБрака,
	             |	ЗаявкаНаБрак.МетодУстранения,
	             |	ЗаявкаНаБрак.Заключение,
	             |	ЗаявкаНаБрак.Действие,
	             |	ЗаявкаНаБрак.КомментарийСклада
	             |ИЗ
	             |	Документ.ЗаявкаНаБрак КАК ЗаявкаНаБрак
	             |ГДЕ
	             |	ЗаявкаНаБрак.Дата МЕЖДУ &ДатаН И &ДатаК
	             |	И ЗаявкаНаБрак.Контрагент = &Контрагент
	             |	И (ЗаявкаНаБрак.СостояниеЗаявки = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявкиНаБрак.Отклонить)
	             |			ИЛИ ЗаявкаНаБрак.СостояниеЗаявки = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявкиНаБрак.ПризнатьБрак))
	             |	И ЗаявкаНаБрак.ПометкаУдаления = ЛОЖЬ
	             |	И ЗаявкаНаБрак.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	             |	И ЗаявкаНаБрак.Ссылка = &Ссылка
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	ЗаявкаНаБрак.Ссылка,
	             |	ЗаявкаНаБрак.Ссылка.Номер,
	             |	ЗаявкаНаБрак.Ссылка.Дата,
	             |	ЗаявкаНаБрак.Ссылка.Контрагент,
	             |	ЗаявкаНаБрак.Номенклатура,
	             |	ЗаявкаНаБрак.Количество,
	             |	ЗаявкаНаБрак.НомерРеализации,
	             |	ЗаявкаНаБрак.ДатаРеализации,
	             |	ЗаявкаНаБрак.СостояниеТовара,
	             |	ЗаявкаНаБрак.ДатаПроизводства,
	             |	ВЫБОР
	             |		КОГДА ЗаявкаНаБрак.Качество = &Биение
	             |			ТОГДА ЗаявкаНаБрак.Комментарий
	             |	КОНЕЦ,
	             |	ВЫБОР
	             |		КОГДА ЗаявкаНаБрак.Качество = &ДефектЛитья
	             |			ТОГДА ЗаявкаНаБрак.Комментарий
	             |	КОНЕЦ,
	             |	ВЫБОР
	             |		КОГДА ЗаявкаНаБрак.Качество = &ДефектЛКП
	             |			ТОГДА ЗаявкаНаБрак.Комментарий
	             |	КОНЕЦ,
	             |	ВЫБОР
	             |		КОГДА ЗаявкаНаБрак.Качество = &Дисбаланс
	             |			ТОГДА ЗаявкаНаБрак.Комментарий
	             |	КОНЕЦ,
	             |	ВЫБОР
	             |		КОГДА ЗаявкаНаБрак.Качество = &МеханическиеПовреждения
	             |			ТОГДА ЗаявкаНаБрак.Комментарий
	             |	КОНЕЦ,
	             |	ВЫБОР
	             |		КОГДА ЗаявкаНаБрак.Качество = &НеПодходитНаЗаявленныйАвто
	             |			ТОГДА ЗаявкаНаБрак.Комментарий
	             |	КОНЕЦ,
	             |	ВЫБОР
	             |		КОГДА ЗаявкаНаБрак.Качество = &Комплектация
	             |			ТОГДА ЗаявкаНаБрак.Комментарий
	             |	КОНЕЦ,
	             |	ВЫБОР
	             |		КОГДА ЗаявкаНаБрак.Качество = &Пересорт
	             |			ТОГДА ЗаявкаНаБрак.Комментарий
	             |	КОНЕЦ,
	             |	ЗаявкаНаБрак.Комментарий,
	             |	ЗаявкаНаБрак.Реализация,
	             |	ЗаявкаНаБрак.Ссылка.СостояниеЗаявки,
	             |	ЗаявкаНаБрак.НачалоЭкспертизы,
	             |	ЗаявкаНаБрак.ОкончаниеЭкспертизы,
	             |	ЗаявкаНаБрак.Ссылка.Ответственный,
	             |	ЗаявкаНаБрак.Ссылка.ОтветственныйСоСтороныКлиента,
	             |	ЗаявкаНаБрак.Ссылка.Подразделение,
	             |	ЗаявкаНаБрак.ВидБрака,
	             |	ЗаявкаНаБрак.МетодУстранения,
	             |	ЗаявкаНаБрак.Заключение,
	             |	ЗаявкаНаБрак.Действие,
	             |	ЗаявкаНаБрак.Ссылка.КомментарийСклада
	             |ИЗ
	             |	Документ.ЗаявкаНаБрак.Расшифровка КАК ЗаявкаНаБрак
	             |ГДЕ
	             |	ЗаявкаНаБрак.Ссылка = &ссылка
	             |	И (ЗаявкаНаБрак.Ссылка.СостояниеЗаявки = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявкиНаБрак.Отклонить)
	             |			ИЛИ ЗаявкаНаБрак.Ссылка.СостояниеЗаявки = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявкиНаБрак.ПризнатьБрак)
				 |			ИЛИ ЗаявкаНаБрак.Ссылка.СостояниеЗаявки = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявкиНаБрак.ВРассмотрении))
	             |	И НЕ ЗаявкаНаБрак.Ссылка.ПометкаУдаления
	             |	И НЕ ЗаявкаНаБрак.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";
				 Запрос.УстановитьПараметр("ДатаН",НачалоДня(Дата));
				 Запрос.УстановитьПараметр("ДатаК",КонецДня(Дата));
				 Запрос.УстановитьПараметр("Контрагент",Контрагент);
				 Запрос.УстановитьПараметр("Контрагент",Контрагент);
				 Запрос.УстановитьПараметр("Номенклатура",Справочники.Номенклатура.ПустаяСсылка());
				 Запрос.УстановитьПараметр("Биение",Справочники.Качество.Биение);
				 Запрос.УстановитьПараметр("ДефектЛитья",Справочники.Качество.ДефектЛитья);
				 Запрос.УстановитьПараметр("ДефектЛКП",Справочники.Качество.ДефектЛКП);
				 Запрос.УстановитьПараметр("Дисбаланс",Справочники.Качество.Дисбаланс);
				 Запрос.УстановитьПараметр("МеханическиеПовреждения",Справочники.Качество.МеханическиеПовреждения);
				 Запрос.УстановитьПараметр("НеПодходитНаЗаявленныйАвто",Справочники.Качество.НеПодходитНаАвто);
				 Запрос.УстановитьПараметр("Комплектация",Справочники.Качество.ДефектКомплектации);
				 Запрос.УстановитьПараметр("Пересорт",Справочники.Качество.Пересорт);
				 Запрос.УстановитьПараметр("Ссылка",Ссылка);


				 Рез=Запрос.Выполнить().Выбрать();

	
	
	ТабДок=Новый ТабличныйДокумент;
	Макет=ПолучитьМакет("МакетЗаключениеЭкспертаКраткое");
	Область=Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Номер = Номер;
	Область.Параметры.НачалоЭкспертизы=Формат(Расшифровка[0].ОкончаниеЭкспертизы,"ДФ='dd MMMM yyyy'; ДП=-");
	Область.Параметры.Контрагент=Контрагент.НаименованиеПолное;
    ТабДок.Вывести(Область);
	//Шина = ложь; 
	//Акс  = ложь;//17.01.2017
	Пока Рез.Следующий() Цикл
		Область=Макет.ПолучитьОбласть("Строка");
		//Если рез.Номенклатура.видТовара = Перечисления.ВидыТоваров.Шины 
		//	или рез.Номенклатура.видТовара = Перечисления.ВидыТоваров.АКБ Тогда
		//	Шина = Истина;
		//ИначеЕсли рез.Номенклатура.видТовара = Перечисления.ВидыТоваров.Аксессуары Тогда //17.01.2017
		//	Акс  = Истина;
		//КонецЕсли;

		Наименование=Рез.Номенклатура.Наименование;
					 Наименование=СтрЗаменить(Наименование," Replica "," ");
					 Наименование=СтрЗаменить(Наименование," replica "," ");
					 Наименование=СтрЗаменить(Наименование," REPLICA "," ");
					 Область.Параметры.Номенклатура=Наименование;

		Область.Параметры.Код=Рез.Номенклатура.Код;
		Область.Параметры.Количество=Рез.Количество;
		Область.Параметры.Видбрака=Рез.Видбрака;
		Область.Параметры.Состояние=Рез.СостояниеДиска;
		Область.Параметры.Заключение=Рез.Заключение;
		Область.Параметры.МетодУстранения=Рез.МетодУстранения;
		Область.Параметры.Действие=Рез.Действие;

		ТабДок.Вывести(Область);
	КонецЦикла;
	
	//Если Шина или Акс Тогда
	//	Область=Макет.ПолучитьОбласть("Подвал1");
	//	Область.Параметры.Составитель = ?(Шина, "Левченко Ф.С.", "Уманский В.А.");  //17.01.2017
	//Иначе
	//	Область=Макет.ПолучитьОбласть("Подвал");
	//КонецЕсли;
	
	#Если Клиент Тогда
		ТекПользовательКодЛок = СокрЛП(глТекущийПользователь.Код);
		ТекПользовательЛок    = глТекущийПользователь;
	#Иначе
		ТекПользовательКодЛок = "";
		ТекПользовательЛок    = "";
	#КонецЕсли

	Область=Макет.ПолучитьОбласть("Подвал");
	Если ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
		Если СокрЛП(ТекПользовательКодЛок) = "Левченко Ф.С." ИЛИ СокрЛП(ТекПользовательКодЛок) = "Капченко И." Тогда 
			Область.Параметры.Составитель = ТекПользовательЛок;
		Иначе
			Область.Параметры.Составитель = "______________________________";
		КонецЕсли;
	ИначеЕсли ВидТовара = Перечисления.ВидыТоваров.Шины ИЛИ ВидТовара = Перечисления.ВидыТоваров.АКБ Тогда
		Область.Параметры.Составитель = "Куртов К.Д.";
	ИначеЕсли ВидТовара = Перечисления.ВидыТоваров.Аксессуары Тогда
		Область.Параметры.Составитель = "Уманский В.А.";
	Иначе
		Область.Параметры.Составитель = "______________________________";
	КонецЕсли;
	
	Область.Параметры.ОкончаниеЭкспертизы=Формат(Расшифровка[0].ОкончаниеЭкспертизы,"ДФ='dd MMMM yyyy'; ДП=-");

	ТабДок.Вывести(Область);
	
	Если ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
		ОблСогласование = Макет.ПолучитьОбласть("Согласов");
		ТабДок.Вывести(ОблСогласование);
	КонецЕсли;
	
	ТабДок.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	Возврат ТабДок;
КонецФункции


// Возвращает структуру данных со сводным описанием контрагента
//
// Параметры: 
//  СписокСведений - список значений со значенийми параметров организации
//   СписокСведений формируется функцией СведенияОЮрФизЛице
//  Список         - список запрашиваемых параметров организаиии
//  СПрефиксом     - Признак выводить или нет префикс параметра организации
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизацииЗ(СписокСведений, Список = "", СПрефиксом = Истина) Экспорт

	
	Если ПустаяСтрока(Список) Тогда
		Список = "ПолноеНаименование,ИНН,ОГРН,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет";
	КонецЕсли; 

	Результат = "";

	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("ПолноеНаименование", " ");
	СоответствиеПараметров.Вставить("ИНН",        " ИНН ");
	СоответствиеПараметров.Вставить("КПП",        " КПП ");
	СоответствиеПараметров.Вставить("ОГРН",        " ОГРН ");
	СоответствиеПараметров.Вставить("ЮридическийАдрес",   " ");
	СоответствиеПараметров.Вставить("Телефоны",   " тел.: ");
	СоответствиеПараметров.Вставить("НомерСчета", " р/с ");
	СоответствиеПараметров.Вставить("Банк",       " в банке ");
	СоответствиеПараметров.Вставить("БИК",        " БИК ");
	СоответствиеПараметров.Вставить("КоррСчет",   " к/с ");
	СоответствиеПараметров.Вставить("КодПоОКПО",  " Код по ОКПО ");

	ЧислоПараметров = СтрЧислоВхождений(Список, ",");
	Для Счетчик = 1 по ЧислоПараметров Цикл

		ПозЗапятой = Найти(Список, ",");

		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));

			Попытка
				СтрокаДополнения = "";
				СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения);

				Если ПустаяСтрока(СтрокаДополнения) Тогда
					Продолжить;
				КонецЕсли;

				Префикс = СоответствиеПараметров[ИмяПараметра];
				Если Не ПустаяСтрока(Результат)  Тогда
					Результат = Результат + ",";
				КонецЕсли; 

				Результат = Результат + ?(СПрефиксом = Истина, Префикс, "") + СтрокаДополнения;
			Исключение
				#Если Клиент Тогда
					Сообщить("Не удалось определить значение параметра организации: " + ИмяПараметра, СтатусСообщения.Внимание);
				#КонецЕсли
			КонецПопытки;

		КонецЕсли;

	КонецЦикла;

	Возврат СокрЛП(Результат);

КонецФункции // ОписаниеОрганизации()

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;
	ДобавитьВСписокДополнительныеФормы1(СписокМакетов, Метаданные());
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

Процедура ДобавитьВСписокДополнительныеФормы1(СписокМакетов, МетаданныеОбъекта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеПечатныеФормыПринадлежность.Ссылка,
	               |	ДополнительныеПечатныеФормыПринадлежность.Ссылка.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.ДополнительныеПечатныеФормы.Принадлежность КАК ДополнительныеПечатныеФормыПринадлежность
	               |ГДЕ
	               |	НЕ ДополнительныеПечатныеФормыПринадлежность.Ссылка.ПометкаУдаления
	               |	И ДополнительныеПечатныеФормыПринадлежность.СсылкаОбъекта = &Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Наименование";
	
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Документы[МетаданныеОбъекта.Имя].ПустаяСсылка());
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Справочники[МетаданныеОбъекта.Имя].ПустаяСсылка());
	Иначе
		Возврат;
	КонецЕсли;
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	БылРазделитель = Ложь;
	Пока Выборка.Следующий() Цикл
		Если Не БылРазделитель Тогда
			СписокМакетов.Добавить(Неопределено);			
			БылРазделитель = Истина;
		КонецЕсли;
		СписокМакетов.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;	
	
КонецПроцедуры // ДобавитьВСписокДополнительныеФормы()

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗНЧ(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваров")Тогда
		Контрагент= ДанныеЗаполнения.Контрагент;	
		Подразделение = ДанныеЗаполнения.Подразделение;
		ДокументОснование = ДанныеЗаполнения;
		Для каждого стр из ДанныеЗаполнения.Товары Цикл
			новСтр= Расшифровка.Добавить();
			НовСтр.Номенклатура = Стр.Номенклатура;
			НовСтр.Количество = Стр.Количество;
			НовСтр.Реализация = Стр.реализация;
			НовСтр.ДатаРеализации = стр.реализация.дата;
			НовСтр.НомерРеализации = стр.реализация.номер;
		КонецЦикла;	
	Конецесли;	
	//Ответственный = глТекущийпользователь;
КонецПроцедуры


// Сакулина - ВСЕ проверки только при записи из формы?!
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	#Если Клиент Тогда
	Если не БракОбнаруженНаСкладе Тогда	
		ОтказВсе = Ложь;
		Для Каждого СтрРасшифровка из Расшифровка Цикл
			
			Если Не ЗначениеЗаполнено(СтрРасшифровка.СостояниеТовара) Тогда
				Сообщить("Не заполнено состояние по товару: " + СтрРасшифровка.Номенклатура, СтатусСообщения.Внимание);
				ОтказВсе =Истина;
			КонецЕсли;
			
			//Если Не ЗначениеЗаполнено(СтрРасшифровка.Качество) Тогда
			//	Сообщить("Не заполнено дефект по товару: " + СтрРасшифровка.Номенклатура);
			//	ОтказВсе =Истина;
			//КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрРасшифровка.Комментарий) И СостояниеЗаявки <> Перечисления.СостоянияЗаявкиНаБрак.Отклонить Тогда
				Сообщить("Не заполнен комментарий к дефекту по товару: " + СтрРасшифровка.Номенклатура, СтатусСообщения.Внимание);
				ОтказВсе =Истина;
			КонецЕсли;
			
			Если СтрРасшифровка.СостояниеТовара  = Перечисления.БракВидыСостоянийДиска.Ставленный Тогда
				Если ВидТовара = Перечисления.ВидыТоваров.АКБ Тогда
					
					Если   Не ЗначениеЗаполнено(СтрРасшифровка.ИнфоКонечныйПотребитель) Тогда
						Сообщить("Не заполнена информация о конечном потребителе по товару: " + СтрРасшифровка.Номенклатура, СтатусСообщения.Внимание);
						ОтказВсе =Истина;
					КонецЕсли;
					Если   Не ЗначениеЗаполнено(СтрРасшифровка.Марка) Тогда
						Сообщить("Не заполнена информация об автомобиле по товару: " + СтрРасшифровка.Номенклатура, СтатусСообщения.Внимание);
						ОтказВсе =Истина;
					КонецЕсли;
					Если   Не ЗначениеЗаполнено(СтрРасшифровка.ДатаПродажиКонПотребитель) Тогда
						Сообщить("Не заполнена дата продажи конечному потребителю по товару: " + СтрРасшифровка.Номенклатура, СтатусСообщения.Внимание);
						ОтказВсе =Истина;
                    КонецЕсли;
                    Если   Не ЗначениеЗаполнено(СтрРасшифровка.ДатаВыявленияДефекта) Тогда
						Сообщить("Не заполнена дата выявления дефекта по товару: " + СтрРасшифровка.Номенклатура, СтатусСообщения.Внимание);
						ОтказВсе =Истина;
					КонецЕсли;
					
			//16.08.2018 - ещё 3 условия проверки - не работали уже давно!		
				//ИначеЕсли ВидТовара = Перечисления.ВидыТоваров.АКБ Тогда
					Если   Не ЗначениеЗаполнено(СтрРасшифровка.Марка) Тогда
						Сообщить("Не заполнена Марка автомобиля по товару: " + СтрРасшифровка.Номенклатура, СтатусСообщения.Внимание);
						ОтказВсе =Истина;
					КонецЕсли;
					Если   Не ЗначениеЗаполнено(СтрРасшифровка.ДополнительныеСвойства) Тогда
						Сообщить("Не заполнены доп. свойста по товару: " + СтрРасшифровка.Номенклатура, СтатусСообщения.Внимание);
						ОтказВсе =Истина;
					КонецЕсли;
					Если   Не ЗначениеЗаполнено(СтрРасшифровка.Пробег) Тогда
						Сообщить("Не заполнен пробег по товару: " + СтрРасшифровка.Номенклатура, СтатусСообщения.Внимание);
						ОтказВсе =Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;	
		
		// Проверим соответствие Номенклатуры
		Запрос = Новый Запрос;
		
		Если ПустаяСтрока(ИзФормулы) Тогда
			// + Сакулина.28.11.2016 Проверим по тому ли контрагенту выбрана реализация 
			ПокупательДПД = Справочники.Контрагенты.НайтиПоКоду("94247");
			ПокупательПодорожник = Справочники.Контрагенты.НайтиПоКоду("П005342");
            
			Для Каждого СтрРасшифровка из Расшифровка Цикл
				Если ЗначениеЗаполнено(СтрРасшифровка.Реализация) и ТипЗнч(СтрРасшифровка.Реализация) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					Если  СтрРасшифровка.Реализация.Контрагент <>  Контрагент  
						и СтрРасшифровка.Реализация.Контрагент <> ПокупательДПД 
						и СтрРасшифровка.Реализация.Контрагент <> ПокупательПодорожник Тогда
						Сообщить("Контрагент в реализации в строке №: " + СтрРасшифровка.НомерСтроки + " не совпадает с контрагентом из документа!", СтатусСообщения.Внимание);
						ОтказВсе = Истина;
					КонецЕсли; 	
				ИначеЕсли ЗначениеЗаполнено(СтрРасшифровка.Реализация) и ТипЗнч(СтрРасшифровка.Реализация) = Тип("Строка") Тогда //орп
					//ничего...
				иначе //Если НЕ ЗначениеЗаполнено(СтрРасшифровка.Реализация) тогда	
					Сообщить("Необходимо выбрать реализацию в строке №: " + СтрРасшифровка.НомерСтроки, СтатусСообщения.Внимание);
					ОтказВсе = Истина;
				КонецЕсли;
			КонецЦикла;
			
			попытка
				ТЗДляЗапроса = Расшифровка.Выгрузить(,"Номенклатура,Реализация,Количество");
				//МассивРеализаций = Расшифровка.ВыгрузитьКолонку("Реализация");
				//СписокРеализаций =  Новый СписокЗначений;
				//СписокРеализаций.ЗагрузитьЗначения(МассивРеализаций);
				Запрос.УстановитьПараметр("ТЧНоменклатура",ТЗДляЗапроса);
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ТЧНоменклатура.Номенклатура,
				|	ТЧНоменклатура.Реализация,
				|	ТЧНоменклатура.Количество
				|ПОМЕСТИТЬ ДокНоменклатура
				|ИЗ
				|	&ТЧНоменклатура КАК ТЧНоменклатура
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	РеализацияТоваровУслугТовары.Номенклатура,
				|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
				|	РеализацияТоваровУслугТовары.Ссылка КАК Реализация
				|ПОМЕСТИТЬ ВртРеализации
				|ИЗ
				|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
				|ГДЕ
				|	РеализацияТоваровУслугТовары.Ссылка В
				|			(ВЫБРАТЬ
				|				ДокНоменклатура.Реализация
				|			ИЗ
				|				ДокНоменклатура КАК ДокНоменклатура)
				|	И РеализацияТоваровУслугТовары.Ссылка.Проведен
				|
				|СГРУППИРОВАТЬ ПО
				|	РеализацияТоваровУслугТовары.Номенклатура,
				|	РеализацияТоваровУслугТовары.Ссылка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ДокНоменклатура.Номенклатура,
				|	ДокНоменклатура.Реализация,
				|	ДокНоменклатура.Количество,
				|	ЕСТЬNULL(ТЧРеализации.Количество, 0) КАК КоличествоИзРеализации
				|ИЗ
				|	ДокНоменклатура КАК ДокНоменклатура
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВртРеализации КАК ТЧРеализации
				|		ПО ДокНоменклатура.Номенклатура = ТЧРеализации.Номенклатура
				|			И ДокНоменклатура.Реализация = ТЧРеализации.Реализация";
				РезультатЗапроса = Запрос.Выполнить();
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					Если Выборка.Количество > Выборка.КоличествоИзРеализации Тогда
						Сообщить("Номенклатуры " + Выборка.Номенклатура + " не хватает в реализации №" + Выборка.Реализация.Номер, СтатусСообщения.Внимание);
						ОтказВсе = Истина;
					КонецЕсли;
				КонецЦикла;
			Исключение
			КонецПопытки;
		КонецЕсли;
		Отказ = ОтказВсе;
	КонецЕсли;
	
    // Создаем задачу ответственному менеджеру, если поменяли статус на "Признать брак" 
	Если СостояниеЗаявки = Перечисления.СостоянияЗаявкиНаБрак.ПризнатьБрак и СостояниеЗаявки <> Ссылка.СостояниеЗаявки Тогда
		
		//+++Шарафутдинов по задаче 48022 
		кому = ПолучитьОператораМенеджера(); //+++ 16.08.2018 - оператор, и, если его нет - осн.менеджер контрагента
		Если УжеЕстьЗадачаПоЗаявкеНаИсполнителя( кому.Пользователь ) тогда
			возврат;
		КонецЕсли;	
		//---Шарафутдинов по задаче 48022 
		
		//16.08.2018 - вынесена в процедуру для "читабельности"
		СоздатьЗадачуНаПризнаниеБрака(кому);
		
	КонецЕсли;
		
#КонецЕсли
КонецПроцедуры

// {{ Печать ОтветНаПеренаправлениеПретензии

Функция ПолучитьИнженераПоКачеству(ВидТовара) Экспорт
	
	Если ВидТовара = Перечисления.ВидыТоваров.АКБ ИЛИ ВидТовара = Перечисления.ВидыТоваров.Шины Тогда
		ИнженерПоКачеству = "Куртов К.Д.";
	ИначеЕсли ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
		#Если Клиент Тогда
			ТекПользовательКодЛок = СокрЛП(глТекущийПользователь.Код);
			ТекПользовательЛок    = глТекущийПользователь;
		#Иначе
			ТекПользовательКодЛок = "";
			ТекПользовательЛок    = "";
		#КонецЕсли
		Если ТекПользовательКодЛок = "Левченко Ф.С." ИЛИ ТекПользовательКодЛок = "Капченко И." Тогда
			ИнженерПоКачеству = ТекПользовательЛок;
		Иначе
			ИнженерПоКачеству = "______________________________";
		КонецЕсли;
	ИначеЕсли ВидТовара = Перечисления.ВидыТоваров.Аксессуары Тогда
		ИнженерПоКачеству = "Уманский В.А.";
	Иначе
		ИнженерПоКачеству = "______________________________";
	КонецЕсли;
	
	Возврат ИнженерПоКачеству;
	
КонецФункции // ПолучитьИнженераПоКачеству()

Функция ПолучитьВидТовараПоНоменклатуреМнЧисло(Номенклатура)
	
	ВидТовараНоменклатура = Номенклатура.ВидТовара;
	
	Если ВидТовараНоменклатура = Перечисления.ВидыТоваров.АвтоЗапчасти Тогда
		ВидТовМнЧисло = "Автозапчасти";
	ИначеЕсли ВидТовараНоменклатура = Перечисления.ВидыТоваров.АКБ Тогда
		ВидТовМнЧисло = "АКБ";
	ИначеЕсли ВидТовараНоменклатура = Перечисления.ВидыТоваров.Аксессуары Тогда
		ВидТовМнЧисло = "Аксессуары";
	ИначеЕсли ВидТовараНоменклатура = Перечисления.ВидыТоваров.Диски Тогда
		ВидТовМнЧисло = "Диски";
	ИначеЕсли ВидТовараНоменклатура = Перечисления.ВидыТоваров.КрышкиНаклейки Тогда
		ВидТовМнЧисло = "Крышки/наклейки";
	ИначеЕсли ВидТовараНоменклатура = Перечисления.ВидыТоваров.РекламнаяПродукция Тогда
		ВидТовМнЧисло = "Рекламная продукция";
	ИначеЕсли ВидТовараНоменклатура = Перечисления.ВидыТоваров.Шины Тогда
		ВидТовМнЧисло = "Шины";
	Иначе
		ВидТовМнЧисло = "";
	КонецЕсли;
	
	Возврат ВидТовМнЧисло;
	
КонецФункции // ПолучитьВидТовараПоНоменклатуреМнЧисло()

Процедура ВывестиСтрокуТоваров(ТабДок, Обл, ТекСтр, НомерСтроки)
	
	Обл.Параметры.НомерСтроки  = НомерСтроки;
	Обл.Параметры.ВидТовараМнЧ = ПолучитьВидТовараПоНоменклатуреМнЧисло(ТекСтр.Номенклатура) + " ";
	Обл.Параметры.Номенклатура = ТекСтр.Номенклатура.Наименование;
	Обл.Параметры.Количество   = ТекСтр.Количество;
	Обл.Параметры.Поставщик    = ТекСтр.Номенклатура.ОсновнойПоставщик.Наименование;
	ТабДок.Вывести(Обл);
	
КонецПроцедуры // ВывестиСтрокуТоваров()

Процедура ВывестиТоварыПострочно(ТабДок, Обл, Товары)
	
	ТоварыКолич = Товары.Количество();
	Если ТоварыКолич = 0 Тогда
		Возврат;
	ИначеЕсли ТоварыКолич = 1 Тогда
		ТекСтр = Товары[0];
		НомерСтроки = "";
		ВывестиСтрокуТоваров(ТабДок, Обл, ТекСтр, НомерСтроки);
	Иначе
		Для Каждого ТекСтр Из Товары Цикл
			НомерСтроки = "" + ТекСтр.Номерстроки + ") ";
			ВывестиСтрокуТоваров(ТабДок, Обл, ТекСтр, НомерСтроки);
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры // ВывестиТоварыПострочно()

Функция НапечататьОтветНаПеренаправлениеПретензии() Экспорт
	
	Товары     = Расшифровка;
	
	ТабДок = Новый ТабличныйДокумент;
	Макет  = ЭтотОбъект.ПолучитьМакет("ОтветНаПеренаправлениеПретензии");
	
	// Шапка
	Обл = Макет.ПолучитьОбласть("Шапка");
	СведенияОКонтрагенте  = СведенияОЮрФизЛице(Контрагент, Дата);
	Обл.Параметры.Контрагент        = ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование,");
	Обл.Параметры.КонтрагентЮрАдрес = ОписаниеОрганизации(СведенияОКонтрагенте, "ЮридическийАдрес,");
	ИнженерПоКачеству = ПолучитьИнженераПоКачеству(ВидТовара);
	Обл.Параметры.ИнженерПоКачеству = ИнженерПоКачеству;
	ТабДок.Вывести(Обл);
	
	// ТелоШапка
	Обл = Макет.ПолучитьОбласть("ТелоШапка");
	ТабДок.Вывести(Обл);
	
	// ТелоСтр
	Обл = Макет.ПолучитьОбласть("ТелоСтр");
	ВывестиТоварыПострочно(ТабДок, Обл, Товары);
	
	// ТелоПдвл
	Обл = Макет.ПолучитьОбласть("ТелоПдвл");
	ТабДок.Вывести(Обл);
	
	// Подвал
	Обл = Макет.ПолучитьОбласть("Подвал");
	Обл.Параметры.ДатаОтвета        = Формат(Дата, "ДФ=dd.MM.yyyy");
	Обл.Параметры.ИнженерПоКачеству = ИнженерПоКачеству; 
	ТабДок.Вывести(Обл);
	
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОтображатьСетку     = Ложь;
	ТабДок.ТолькоПросмотр      = Ложь;
	
	Возврат ТабДок;
	
КонецФункции // НапечататьОтветНаПеренаправлениеПретензии()
// }} Печать ОтветНаПеренаправлениеПретензии

Функция ПолучитьЦену(Номенклатура, Параметр) Экспорт 
	товары = Новый СписокЗначений;
    товары.Добавить(Номенклатура);
	Если Параметр = 1 тогда
		Цена = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(Контрагент,товары);
	Иначе
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Цена
		|ИЗ
		|	Документ.ЗаявкаНаБрак.Расшифровка КАК ЗаявкаНаБракРасшифровка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ПО ЗаявкаНаБракРасшифровка.Реализация = РеализацияТоваровУслугТовары.Ссылка
		|			И ЗаявкаНаБракРасшифровка.Номенклатура = РеализацияТоваровУслугТовары.Номенклатура
		|ГДЕ
		|	ЗаявкаНаБракРасшифровка.Ссылка = &Ссылка
		|	И ЗаявкаНаБракРасшифровка.Номенклатура = &Номенклатура";

	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Цена = ВыборкаДетальныеЗаписи.Цена;
	КонецЦикла;
		
	КонецЕсли;
		
	Возврат Цена;
КонецФункции


//--------------вспомогательные функции----------------------------

функция УжеЕстьЗадачаПоЗаявкеНаИсполнителя(Исполнитель1=Неопределено, ТолькоСогласование=ЛОЖЬ) Экспорт
    рез = ЛОЖЬ;
	
	//+++ Шарафутдинов 01.02.2018     ищем уже созданные задачи от заявки на брак
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачиПользователя.Ссылка КАК Задача,
		|	ЗадачиПользователя.Дата,
		|	ЗадачиПользователя.СрокОповещения,
		|	ЗадачиПользователя.СрокИсполнения,
		|	ЗадачиПользователя.ДатаИсполнения,
		|	ЗадачиПользователя.Выполнена,
		|	ЗадачиПользователя.ПометкаУдаления,
		|	ЗадачиПользователя.Наименование как ЗадачаНаименование,
	    |	ЗадачиПользователя.Исполнитель
		|ИЗ
		|	Задача.ЗадачиПользователя КАК ЗадачиПользователя
		|ГДЕ
		|	ЗадачиПользователя.Объект = &Объект
		
	|//Исполнитель	И ЗадачиПользователя.ПометкаУдаления = ЛОЖЬ
	|//Исполнитель	И ЗадачиПользователя.Исполнитель = &Исполнитель
	
	|"+?(ТолькоСогласование, " И ЗадачиПользователя.НаСогласование = Истина","")+"
	    |
		|УПОРЯДОЧИТЬ ПО
		//сначала по Сроку оповещения... если его нет... то по дате
		|	ЗадачиПользователя.СрокОповещения,
		|	ЗадачиПользователя.Дата
		|АВТОУПОРЯДОЧИВАНИЕ"; 
		
	Если Исполнитель1<>Неопределено тогда	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//Исполнитель","");

	Запрос.УстановитьПараметр("Исполнитель", Исполнитель1);
	КонецЕсли;
//+++)	
	Запрос.УстановитьПараметр("Объект", Ссылка);
	Результат = Запрос.Выполнить();

	Если Исполнитель1=Неопределено тогда	
		рез = Результат.Выгрузить(); //таблица всех задач!
    Иначе
		Если НЕ Результат.Пустой() тогда
			выборка = результат.Выбрать();
			выборка.Следующий();
			#Если Клиент тогда
			Сообщить("Уже Есть задача от "+формат(выборка.Дата,"ДЛФ=DD")+" на Исполнителя: "+строка(Исполнитель1)+" с оповещением на "+формат(выборка.СрокОповещения,"ДЛФ=DD")+" по данной Заявке на брак № "+строка(ЭтотОбъект.Номер), СтатусСообщения.Внимание);
			#КонецЕсли	
			рез = Истина; 						// Если есть уже задачи от заявки - ничего не создаем
		КонецЕсли;
	КонецЕсли;	
	возврат рез;
КонецФункции

функция ПолучитьОператораМенеджера() Экспорт
	
	рез = новый Структура("Роль, Пользователь",
					"Оператор", справочники.Пользователи.ПустаяСсылка());
	
ЗакрепленныеОператорПомощник = ПолучитьЗакрпленныхЗаРегиономОператораПомощника(Контрагент.Регион, Контрагент);
	оператор = ЗакрепленныеОператорПомощник.Оператор;
	помощник = ЗакрепленныеОператорПомощник.Помощник;
	
	Пользователь = оператор;
	
	Если ЗначениеНЕЗаполнено(Пользователь) тогда
		рез.Роль = "Осн.Менеджер";
		Пользователь = Контрагент.ОсновнойМенеджерКонтрагента;
	КонецЕсли;
	
	рез.Пользователь = Пользователь;
	
	возврат рез;	
КонецФункции


//===========Задачи=================================

//ПризнатьБрак из формы -> выгрузить в Формулу
Процедура СоздатьЗадачуНаПроставлениеДокумента() Экспорт
	задача = задачи.ЗадачиПользователя.СоздатьЗадачу();
	задача.Объект = Ссылка;
	Задача.Исполнитель = Справочники.Пользователи.НайтиПоКоду("Никулин А.В.");
	задача.Наименование = "Проставить Контрагента по рекламационным товарам "+строка(ВидТовара)+" из Формулы"; 
	задача.Описание     = "Необходимо в Заявке на брак № "+строка(Номер)+" выбрать Контрагента и Реализацию, 
						   |по которой отгружались "+строка(ВидТовара)+" из данной заявки на Брак.";
	задача.Инициатор    = ПараметрыСеанса.ТекущийПользователь;
	задача.Постановщик	= Ответственный;
	задача.Дата 		  = ТекущаяДата();
	задача.СрокИсполнения = КонецДня( ТекущаяДата() ); 	
	задача.Оповещение     = Истина;
	задача.СрокОповещения = ТекущаяДата();
	задача.Записать();
КонецПроцедуры

//при каждом проведении из формы!
Процедура СоздатьЗадачуНаПретензию()
	
Исполнитель1 = Справочники.Пользователи.НайтиПоКоду("Захарова Светлана");

//+++ Шарафутдинов 01.02.2018     ищем уже созданные задачи по Этой Заявке на брак (не помеченные на удаление!)
	Если УжеЕстьЗадачаПоЗаявкеНаИсполнителя( Исполнитель1) тогда
		возврат;
	КонецЕсли;	
//--- Шарафутдинов 

	// всегда делается задача на 1 исполнителя ?!
	Задача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
	Задача.Исполнитель 		= Исполнитель1;
	задача.Наименование 	= "Выставить претензию на брак товара"; 
	задача.Описание = "Для Оператора #
					  |	Необходимо Выставить Претензию на брак товара, 
					  |по товарам, в которых (Виновник Возникновения Дефекта = Логистика)
					  |	от покупателя: "+строка(Контрагент.НаименованиеПолное)+"
					  | по Заявке на брак № "+строка(Номер)+" 
					  | состояние заявки: "+строка(СостояниеЗаявки);//15.08.2018
	задача.Инициатор   		= ПараметрыСеанса.ТекущийПользователь;
	задача.Постановщик		= Ответственный;
	задача.Объект   	 	= Ссылка;
	задача.Дата 		  	= ТекущаяДата();	
	задача.Оповещение     	= Истина;
	задача.НаСогласование   = ЛОЖЬ;
	задача.СрокОповещения 	= ТекущаяДата();
	задача.СрокИсполнения 	= КонецДня( ТекущаяДата() ); 	
	//Задача.УстановитьНовыйНомер();
	Для Каждого стр из Расшифровка цикл 
		Если стр.ВиновникВозникновенияДефекта = Перечисления.ВиновникиВозникновенияДефекта.Логистика тогда
		    
			Ст = Задача.Товары.Добавить();
			Ст.Номенклатура = ?(Стр.Качество = Справочники.Качество.Пересорт, Справочники.Номенклатура.НайтиПоКоду(СокрЛП(Сред(стр.Заключение,найти(стр.Заключение,"#"), СтрДлина(Стр.Заключение)))),Стр.Номенклатура);
			Ст.Количество = Стр.Количество;
			Если Стр.Номенклатура <> Ст.Номенклатура тогда
				Ст.Цена = ПолучитьЦену(Ст.Номенклатура, 1);
			Иначе
				Ст.Цена = ПолучитьЦену(Стр.Номенклатура, 2);
			КонецЕсли;
			Ст.Сумма = Ст.Цена * Ст.Количество;
			Ст.НомерСтрокиОснования = Стр.НомерСтроки;
			Ст.Статус = Перечисления.СтатусыСтрокЗаказа.Подтвержден;
			
		КонецЕсли;
	КонецЦикла;	
	
	//+++ Щарафутдинов 01.02.2018
	Если Задача.Товары.Количество()=0 тогда
		Задача = Неопределено;
		#Если Клиент тогда
			Сообщить(" - Нет товаров для выставления Претензии на брак, где Виновник = Логистика!", СтатусСообщения.Внимание );	
		#КонецЕсли
		Возврат;
	КонецЕсли;
	//--- Щарафутдинов 01.02.2018
	
	Попытка
		задача.Записать();
		#Если Клиент тогда
			Сообщить(" + Сформирована задача по выставлению претензии о браке товара (Виновник = Логистика) для сотрудника: "+строка(задача.Исполнитель), СтатусСообщения.Информация );
		#КонецЕсли	
	исключение
		#Если Клиент тогда
			Сообщить(" - Не удалось сформировать задачу по выставлению претензии о браке товара (Виновник = Логистика) для сотрудника: "+строка(задача.Исполнитель), СтатусСообщения.Внимание );	
		#КонецЕсли	
	КонецПопытки;

КонецПроцедуры

//16.08.2018 - вынесена в процедуру для "читабельности"
процедура СоздатьЗадачуНаПризнаниеБрака( кому )
	
		Задача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
		Задача.Исполнитель = кому.Пользователь;	
		
		задача.НаСогласование = Ложь;
		задача.Наименование = "Запросить документы на Возврат товара от покупателя: "+строка(Контрагент); 
		задача.Описание = "Для "+кому.Роль+"а # 
						  |		Требуется запросить документы на возврат товара
						  |		от Покупателя: "+строка(Контрагент.Код)+" - "+строка(Контрагент.НаименованиеПолное)+"
						  |
						  |		по Заявке на брак № "+Номер+" ("+строка(СостояниеЗаявки)+")";	
		задача.Инициатор     = ПараметрыСеанса.ТекущийПользователь;
		задача.Постановщик	 = Ответственный;
		задача.Объект   	 = ссылка;
		задача.Дата 		    = ТекущаяДата();
		задача.СрокИсполнения = КонецДня( ТекущаяДата() ); 	
		задача.Оповещение     = Истина;
		задача.СрокОповещения = ТекущаяДата();        
		Попытка
			задача.Записать();
			Сообщить(" + Сформирована ""Задача на получение документов"" для "+ кому.Роль+"а: "+строка(задача.Исполнитель), СтатусСообщения.Информация );	
		исключение
			Сообщить(" - Не удалось сформировать электронную Задачу на получение документов для "+ кому.Роль+"а: "+строка(задача.Исполнитель), СтатусСообщения.Внимание );	
		КонецПопытки;
	
КонецПроцедуры

//+++ 17.08.2018 - удаляем все невыполненные задачи по Согласованию (работает из любой Задачи! или из Формы!)
Процедура ПриЗаписи(Отказ)
	Если   СогласованВозвратКлиенту 
		 и СостояниеЗаявки = перечисления.СостоянияЗаявкиНаБрак.Отклонить 
		 и Проведен тогда
		 таблЗадач = УжеЕстьЗадачаПоЗаявкеНаИсполнителя(,Истина);  //на согласование
		 Для каждого стр1 из таблЗадач Цикл
			 // только невыполненные и не удаленные задачи без ограницений по стр1.СрокОповещения
			 Если не стр1.Выполнена и НЕ стр1.ПометкаУдаления тогда 
				 задОб = стр1.Задача.ПолучитьОбъект();
				 задОб.ПометкаУдаления = Истина;
				 задОб.Записать();
				 #Если Клиент тогда
				 сообщить("Удалена задача на согласование для "+строка(стр1.Исполнитель) +" на "+формат(стр1.СрокОповещения,"ДЛФ=DD")+" ->"+стр1.ЗадачаНаименование, СтатусСообщения.Информация);
				 #КонецЕсли
			 КонецЕсли;	 
		 КонецЦикла;
	КонецЕсли;	
КонецПроцедуры

