Перем ЭтоНовый;
Процедура Пауза(Сек)
	scr = Новый COMОбъект("WScript.Shell");
	scr.Run("sleep "+СокрЛП(Число(Сек)),0,1);
КонецПроцедуры

Процедура СостояниеЗаявкиПриИзменении(Элемент)
	
	Записать();
	ПроставитьКартинку();
	
	Если СостояниеЗаявки=Перечисления.СостоянияЗаявкиНаБрак.ВРассмотрении тогда
		Если не ЕстьПоступленияНаОтвХранение() тогда
			//предложим ввести поступление на ответ хранение
			Если ЗначениеЗаполнено(Контрагент) тогда
				Если Вопрос("Ввести поступление на ответ. хранение?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да тогда
					
					ДокПоступлениеНаОтвХранение=Документы.ОперацияПоОтветственномуХранению.СоздатьДокумент();
					ДокПоступлениеНаОтвХранение.ВидОперации=Перечисления.ВидыОперацийПоОтветственномуХранению.Поступление;
					ДокПоступлениеНаОтвХранение.Контрагент=Контрагент;
					ДокПоступлениеНаОтвХранение.Дата=ТекущаяДата();
					ДокПоступлениеНаОтвХранение.Организация=Справочники.Организации.НайтиПоКоду("00001");
					//ДокПоступлениеНаОтвХранение.Организация=ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяОрганизация");
					ДокПоступлениеНаОтвХранение.Ответственный=глТекущийПользователь;
					
					СтрокаТовары=ДокПоступлениеНаОтвХранение.Товары.Добавить();
					СтрокаТовары.Номенклатура=Номенклатура;
					СтрокаТовары.Количество=Количество;
					СтрокаТовары.Склад=Справочники.Склады.НайтиПоКоду("00417");//Брак (К-15)
					ДокПоступлениеНаОтвХранение.Записать(РежимЗаписиДокумента.Проведение);
					стрДоки= ДокументыПоЗаявке.Добавить();
					СтрДоки.Документ=ДокПоступлениеНаОтвХранение.Ссылка;
					
					Записать(РежимЗаписиДокумента.Запись);
					ПроставитьКартинку();
					ДокПоступлениеНаОтвХранение.ПолучитьФорму("ФормаДокумента").Открыть();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли СостояниеЗаявки=Перечисления.СостоянияЗаявкиНаБрак.ПризнатьБрак или СостояниеЗаявки=Перечисления.СостоянияЗаявкиНаБрак.Отклонить тогда	
		Если ЕстьПоступленияНаОтвХранение() тогда
			Если не ЕстьСписаниеСОтвХранения() тогда
				//1. Формируем списание с отв хранения
				Если Вопрос("Ввести списание с ответ. хранения?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да тогда
					ДокПоступлениеНаОтвХранение=Документы.ОперацияПоОтветственномуХранению.СоздатьДокумент();
					ДокПоступлениеНаОтвХранение.ВидОперации=Перечисления.ВидыОперацийПоОтветственномуХранению.Списание;
					ДокПоступлениеНаОтвХранение.Контрагент=Контрагент;
					ДокПоступлениеНаОтвХранение.Дата=ТекущаяДата();
					//ДокПоступлениеНаОтвХранение.Организация=ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяОрганизация");
					ДокПоступлениеНаОтвХранение.Организация=Справочники.Организации.НайтиПоКоду("00001");
					ДокПоступлениеНаОтвХранение.Ответственный=глТекущийПользователь;
					
					СтрокаТовары=ДокПоступлениеНаОтвХранение.Товары.Добавить();
					СтрокаТовары.Номенклатура=Номенклатура;
					СтрокаТовары.Количество=Количество;
					СтрокаТовары.Склад=Справочники.Склады.НайтиПоКоду("00417");//Брак (К-15)
					ДокПоступлениеНаОтвХранение.Записать(РежимЗаписиДокумента.Проведение);
					стрДоки= ДокументыПоЗаявке.Добавить();
					СтрДоки.Документ=ДокПоступлениеНаОтвХранение.Ссылка;
					ДокПоступлениеНаОтвХранение.ПолучитьФорму("ФормаДокумента").Открыть();
					Записать(РежимЗаписиДокумента.Запись);
					ПроставитьКартинку();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//Задача № 35734 ответственному менеджеру>>оператора
		Если Вопрос("Отправить сообщение Оператору покупателя?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да тогда
			ЕМаил=ПолучитьАдресОтветственногоМенеджера(Контрагент);
			Если ЕМаил<>"" Тогда
				Если СостояниеЗаявки=Перечисления.СостоянияЗаявкиНаБрак.ПризнатьБрак тогда
					ОтправитьСообщениеОБраке(Истина,ЕМаил);
				Иначе  //Отклонить
					ОтправитьСообщениеОБраке(Ложь,ЕМаил);
				КонецЕсли;
			Иначе
				Сообщить("Для контрагента "+Контрагент+" не указан электронный адрес Оператора! Сообщение не доставлено!", СтатусСообщения.Внимание);
			КонецЕсли;
		иначе   //сразу не отправили...
			ЭлементыФормы.ОсновныеДействияФормы.Кнопки.кнОтправитьПисьмо.доступность = Истина;
		КонецЕсли;
		
		//Задача № 35734 п.2 --- задача на согласование! ---
		если СостояниеЗаявки=Перечисления.СостоянияЗаявкиНаБрак.Отклонить тогда
			Если Вопрос("Отправить Задачу на согласование Оператору покупателя?", РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да тогда
				СоздатьЗадачуНаСогласованиеОтправкиТовараПокупателю(); //сразу создаём
			иначе
				ЭлементыФормы.ОсновныеДействияФормы.Кнопки.НаСогласование.доступность = Истина; //только кнопка доступна
			КонецЕсли;	
		КонецЕсли;
			
	КонецЕсли;	
КонецПроцедуры

Функция ЕстьПоступленияНаОтвХранение()
	Для Каждого стр из ДокументыПоЗаявке Цикл
		Если типЗнч(стр.Документ)=Тип("ДокументСсылка.ОперацияПоОтветственномуХранению") тогда
			Если стр.Документ.ВидОперации=Перечисления.ВидыОперацийПоОтветственномуХранению.Поступление тогда
				Возврат истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат ложь;	
КонецФункции

Функция ЕстьСписаниеСОтвХранения()
	Для Каждого стр из ДокументыПоЗаявке Цикл
		Если типЗнч(стр.Документ)=Тип("ДокументСсылка.ОперацияПоОтветственномуХранению") тогда
			Если стр.Документ.ВидОперации=Перечисления.ВидыОперацийПоОтветственномуХранению.Списание тогда
				Возврат истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат ложь;	
КонецФункции

Функция ЕстьВозврат()
	Для Каждого стр из ДокументыПоЗаявке Цикл
		Если типЗнч(стр.Документ)=Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") тогда
			Возврат истина;
		КонецЕсли;
	КонецЦикла;
	Возврат ложь;	
КонецФункции

Процедура ДействияФормыДействиеОформитьВозврат(Кнопка)
	Если СостояниеЗаявки=Перечисления.СостоянияЗаявкиНаБрак.ПризнатьБрак тогда
		Если не ЕстьСписаниеСОтвХранения() тогда
			//1. Формируем списание с отв хранения
			ДокПоступлениеНаОтвХранение=Документы.ОперацияПоОтветственномуХранению.СоздатьДокумент();
			ДокПоступлениеНаОтвХранение.ВидОперации=Перечисления.ВидыОперацийПоОтветственномуХранению.Списание;
			ДокПоступлениеНаОтвХранение.Контрагент=Контрагент;
			ДокПоступлениеНаОтвХранение.Дата=ТекущаяДата();
			ДокПоступлениеНаОтвХранение.Организация=ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяОрганизация");
			ДокПоступлениеНаОтвХранение.Ответственный=глТекущийПользователь;
			
			СтрокаТовары=ДокПоступлениеНаОтвХранение.Товары.Добавить();
			СтрокаТовары.Номенклатура=Номенклатура;
			СтрокаТовары.Количество=Количество;
			СтрокаТовары.Склад=Справочники.Склады.НайтиПоКоду("00417");//Брак (К-15)
			ДокПоступлениеНаОтвХранение.Записать(РежимЗаписиДокумента.Проведение);
			стрДоки= ДокументыПоЗаявке.Добавить();
			СтрДоки.Документ=ДокПоступлениеНаОтвХранение.Ссылка;
			ДокПоступлениеНаОтвХранение.ПолучитьФорму("ФормаДокумента").Открыть();
		КонецЕсли;
		//***********************************************************
		//Возврат
		//Возврат не делаем, менеджеру отправляется сообщение и он делает заявку на возврат
		//Если не ЕстьВозврат() тогда
		//	Запрос = новый Запрос;
		//	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
		//	|	ЗаявкаНаБрак.Номенклатура,
		//	|	ЗаявкаНаБрак.Количество,
		//	|	ЗаявкаНаБрак.Реализация КАК ДокументПартии,
		//	|	&Склад КАК Склад,
		//	|	ЗаявкаНаБрак.Реализация.Сделка КАК Сделка,
		//	|	РеализацияТоваровУслугТовары.Цена,
		//	|	РеализацияТоваровУслугТовары.СтавкаНДС,
		//	|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения,
		//	|	РеализацияТоваровУслугТовары.ЕдиницаИзмеренияМест,
		//	|	РеализацияТоваровУслугТовары.Коэффициент КАК Коэффициент,
		//	|	ЗНАЧЕНИЕ(Справочник.Качество.Новый) КАК Качество
		//	|ИЗ
		//	|	Документ.ЗаявкаНаБрак КАК ЗаявкаНаБрак
		//	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		//	|		ПО ЗаявкаНаБрак.Номенклатура = РеализацияТоваровУслугТовары.Номенклатура
		//	|			И ЗаявкаНаБрак.Реализация = РеализацияТоваровУслугТовары.Ссылка
		//	|ГДЕ
		//	|	ЗаявкаНаБрак.Ссылка = &Ссылка";
		//	Запрос.УстановитьПараметр("Ссылка",Ссылка);
		//	Запрос.УстановитьПараметр("Склад",Справочники.Склады.НайтиПоКоду("00417")); //Брак (К-15)
		//	Рез=Запрос.Выполнить().Выбрать();
		//	Если Рез.Количество()>0 тогда
		//		Рез.Следующий();
		//		
		//		ДокВозврат=Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
		//		ДокВозврат.Дата=ТекущаяДата();
		//		ДокВозврат.ВидПоступления=Перечисления.ВидыПоступленияТоваров.НаСклад;
		//		ДокВозврат.Ответственный=глТекущийПользователь;
		//		ДокВозврат.Сделка=Рез.Сделка;
		//		ЗаполнитьШапкуДокументаПоОснованию(ДокВозврат, Рез.Сделка);
		//		ДокВозврат.СкладОрдер  = Рез.Склад;
		//		
		//		СтрокаТабличнойЧасти = ДокВозврат.Товары.Добавить();
		//		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,Рез);
		//		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокВозврат);
		//		РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокВозврат);
		//		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокВозврат);
		//		ДокВозврат.Записать(РежимЗаписиДокумента.Проведение);
		//		
		//		стрДоки= ДокументыПоЗаявке.Добавить();
		//		СтрДоки.Документ=ДокВозврат.Ссылка;
		//		ДокВозврат.ПолучитьФорму("ФормаДокумента").Открыть();
		//		Записать(РежимЗаписиДокумента.Проведение);
		//	КонецЕсли;
		//	
		//КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОсновныеДействияФормыкнПечатьЗаключения(Кнопка)
	ТабДок=НапечататьЗаключение();
	ТабДок.Показать();
КонецПроцедуры

Процедура ДокументыПоЗаявкеПриПолученииДанных(Элемент, ОформленияСтрок)
	Для Каждого Строка Из ОформленияСтрок Цикл
		Если НЕ Строка.ДанныеСтроки.Документ.пустая() Тогда
			Строка.Ячейки.ВидОперации.Значение= Строка.ДанныеСтроки.Документ.ВидОперации;
		КонецЕсли;
    КонецЦикла
КонецПроцедуры

Процедура ОсновныеДействияФормыкнПечатьРекламационнаяКарточка(Кнопка)
	Если ЭтотОбъект.Модифицированность() Тогда
		Сообщить("Перед печатью необходимо записать документ");
	Иначе	
		ТабДок=НапечататьРекламационнуюКарточку();
		ТабДок.Показать();
	КонецЕсли;
КонецПроцедуры

Процедура ОтправитьСообщениеОБраке(БракПризнан, Адресат)
	Каталог=КаталогВременныхФайлов();
	ТабДокумент = НапечататьРекламационнуюКарточку();
	
	ИмяФайлаРеклКарточка = Каталог + "\"+"РекламационнаяКарточка " + СокрЛП(Номер) + " контрагент "+Контрагент+" от " + Формат(Дата, "ДЛФ=D") + ".xls";	
	ТабДокумент.Записать(ИмяФайлаРеклКарточка, ТипФайлаТабличногоДокумента.XLS);
	
	ТабДокументЗаключение = НапечататьЗаключениеКраткое();
	
	ИмяФайлаЗаключение = Каталог + "\"+"Заключение " + СокрЛП(Номер) + " контрагент "+Контрагент+" от " + Формат(Дата, "ДЛФ=D") + ".xls";	
	ТабДокументЗаключение.Записать(ИмяФайлаЗаключение, ТипФайлаТабличногоДокумента.XLS);
	
	Почта=Новый ИнтернетПочта;
		УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("no-reply@yst76.ru");
		ИПП=Новый ИнтернетПочтовыйПрофиль;
		ИПП.АдресСервераSMTP=УЗ.SMTPСервер;
		ИПП.ПортSMTP=УЗ.ПортSMTP;
		Если УЗ.ТребуетсяSMTPАутентификация Тогда
			ИПП.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
			ИПП.ПарольSMTP         = УЗ.ПарольSMTP;
			ИПП.ПользовательSMTP   = УЗ.ЛогинSMTP;
		Иначе
			ИПП.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
			ИПП.ПарольSMTP         = "";
			ИПП.ПользовательSMTP   = "";
		КонецЕсли;
		
		Письмо=Новый ИнтернетПочтовоеСообщение;
		Письмо.Отправитель=УЗ.АдресЭлектроннойПочты;
		//Письмо.Получатели.Добавить("smirnov@yst.ru");
		//Письмо.Получатели.Добавить("sakulina@yst.ru");
        Письмо.Получатели.Добавить(Адресат);

		Если БракПризнан тогда
			Письмо.Тема="Брак ПРИЗНАН "+Контрагент;
		Иначе
			Письмо.Тема="Брак НЕ признан "+Контрагент;
		КонецЕсли;
		Письмо.ИмяОтправителя =""+глТекущийПользователь;
		Письмо.Организация ="ТК ""Яршинторг""";
		
		Вложение1ZIP=КаталогВременныхФайлов()+"\Вложение.zip";
		Архив = Новый ЗаписьZIPФайла(Вложение1ZIP,,,
		МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный, МетодШифрованияZIP.Zip20);
		Архив.Добавить(ИмяФайлаРеклКарточка, РежимСохраненияПутейZIP.НеСохранятьПути);
		Архив.Добавить(ИмяФайлаЗаключение, РежимСохраненияПутейZIP.НеСохранятьПути);
		Архив.Записать();
        Письмо.Вложения.Добавить(Вложение1ZIP);
		
		Если БракПризнан тогда
			Письмо.Тексты.Добавить("Брак признан.
			|"+Контрагент+"
			|"+Реализация,ТипТекстаПочтовогоСообщения.ПростойТекст);
		Иначе
			Письмо.Тексты.Добавить("Брак НЕ признан.
			|"+Контрагент+"
			|"+Реализация,ТипТекстаПочтовогоСообщения.ПростойТекст);
		КонецЕсли;
		Письмо.ОбработатьТексты();
		
		флНЕОтправлен = истина;//15.08.2018
		попытка
			Почта.Подключиться(ИПП);
			Почта.Послать(Письмо);
			Почта.Отключиться();
			#Если Клиент Тогда
				сообщить(" >>>  Письмо на адрес "+Адресат+" отправлено", СтатусСообщения.Информация);
			#КонецЕсли
			флНЕОтправлен = ложь;
		исключение
		конецПопытки;	
		
	Если флНЕОтправлен тогда
		попытка
			Пауза(2);
			Почта.Подключиться(ИПП);
			Почта.Послать(Письмо);
			Почта.Отключиться();
			#Если Клиент Тогда
				сообщить(" >>>  Письмо на адрес "+Адресат+" отправлено со второй попытки", СтатусСообщения.Информация);
			#КонецЕсли
		исключение
			#Если Клиент Тогда
				сообщить("xxxxx Ошибка при отправке письма - "+ОписаниеОшибки(), СтатусСообщения.Внимание);
			#КонецЕсли
		конецПопытки;
	КонецЕсли;
	
КонецПроцедуры

//+++ 15.08.2018
процедура СоздатьЗадачуНаСогласованиеОтправкиТовараПокупателю()
	
	Если СостояниеЗаявки<>Перечисления.СостоянияЗаявкиНаБрак.Отклонить тогда
		Предупреждение("Согласование работает только для Статуса: "+строка(Перечисления.СостоянияЗаявкиНаБрак.Отклонить),30);
		возврат;
	КонецЕсли;

	Если Контрагент.Пустая() тогда
		Предупреждение("НЕ Заполнен Контрагент!", 30);
		возврат;
	КонецЕсли;
		
	Если СогласованВозвратКлиенту тогда
		Предупреждение("Признак [v]""Согласован Возврат покупателю"" - УЖЕ установлен! Согласование НЕ требуется!", 30);
		возврат;
	КонецЕсли;
	
	КолВозврата = Расшифровка.Итог("Количество") - Расшифровка.Итог("КоличествоПринято");
	Если КолВозврата<=0 тогда
		Предупреждение("Признак [v]""Согласован Возврат покупателю"" - УЖЕ установлен! Согласование с Оператором НЕ требуется!", 30);
		возврат;
	КонецЕсли;
	
	оперМен = ПолучитьОператораМенеджера();
	Если УжеЕстьЗадачаПоЗаявкеНаИсполнителя(оперМен.Пользователь) тогда 
		возврат;
	КонецЕсли;
	
//================Создаём все задачи по списку===========================================
	таблицаСогласования = СоздатьТаблицуСогласования();
	
	ЗадачиНаСогласование.Очистить();
		для каждого стр1 из таблицаСогласования цикл		
		 	Задача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
			
			ЗаполнитьЗначенияСвойств(Задача, стр1); //Исполнитель и срокОповещения...
			
			ЗаполнитьЗадачуПоЗаявкеНаБрак(Задача, КолВозврата, стр1.очередь);
			стр1.СрокИсполнения = задача.СрокИсполнения;
			Задача.Описание ="Задача для "+стр1.Роль+" # "+Задача.Описание;
			попытка
				Задача.Записать(); 
				Сообщить(" Создана Задача на согласование Для "+стр1.Роль+": "+строка(Задача.Исполнитель)+". После её Утверждения будет [v]""Согласован возврат клиенту"".", СтатусСообщения.Информация);
			Исключение
				Сообщить("Ошибка при создании Задача на согласование Для "+стр1.Роль+": "+строка(Задача.Исполнитель)+".", СтатусСообщения.Внимание);
			КонецПопытки;
			
			стр2 = ЗадачиНаСогласование.Добавить();
			ЗаполнитьЗначенияСвойств(стр2, стр1);
			стр2.Задача = Задача.Ссылка;
		КонецЦикла;
		

КонецПроцедуры //СоздатьЗадачуНаСогласованиеОтправкиТовараПокупателю

//16.08.2018 - такая схема... 4 задачи!
функция СоздатьТаблицуСогласования()
таблицаСогласования =новый ТаблицаЗначений;
	таблицаСогласования.Колонки.Добавить("Очередь");
	таблицаСогласования.Колонки.Добавить("Роль");
	таблицаСогласования.Колонки.Добавить("Исполнитель");
	таблицаСогласования.Колонки.Добавить("СрокОповещения");
Очередь = 1;	
// 1)----------------создаём задачу на Оператора------------------------------------
	оперМен = ПолучитьОператораМенеджера();
	Nday = 0; //сразу!
		стр1 = таблицаСогласования.Добавить();
		стр1.СрокОповещения = ТекущаяДата()+Nday*86400; 
		стр1.Роль = оперМен.Роль+"а";
		стр1.Исполнитель = оперМен.Пользователь;
		стр1.Очередь = Очередь;
	Очередь = Очередь +1;
	
// 2)----------------создаём задачу на Менеджера------------------------------------
	Если  оперМен.Роль<>"Осн.Менеджер" тогда
	оперМен.Роль = "Осн.Менеджера";
	оперМен.Пользователь = Контрагент.ОсновнойМенеджерКонтрагента;
	Nday = 7;//через неделю, если Оператор ничего не сделает
 		стр1 = таблицаСогласования.Добавить();
		стр1.СрокОповещения = ТекущаяДата()+Nday*86400; 
		стр1.Роль = оперМен.Роль;
		стр1.Исполнитель = оперМен.Пользователь;
		стр1.Очередь = Очередь;
	Очередь = Очередь +1;
	КонецЕсли;
	
// 3)----------------создаём задачу на Руководителя менеджера------------------------------------
	оперМен.Роль = "Руководителя менеджера";
	оперМен.Пользователь = оперМен.Пользователь.НаправлениеПродаж.Руководитель;
	Nday = 14;  //через 2 недели, если Оператор и Менеджер ничего не сделают!
		стр1 = таблицаСогласования.Добавить();
		стр1.СрокОповещения = ТекущаяДата()+Nday*86400; 
		стр1.Роль = оперМен.Роль;
		стр1.Исполнитель = оперМен.Пользователь;
		стр1.Очередь = Очередь;
	Очередь = Очередь +1;
		
// 4)----------------создаём задачу на того, кто сделал заявку на брак --------------------------
	оперМен.Роль = "Ответственного";
	оперМен.Пользователь = Ответственный;
	Nday = 30; //через месяц!
		стр1 = таблицаСогласования.Добавить();
		стр1.Роль = оперМен.Роль;
		стр1.Исполнитель = оперМен.Пользователь;
		стр1.СрокОповещения = ДобавитьМесяц( ТекущаяДата(), 1); //через месяц!
		стр1.Очередь = Очередь;
	Очередь = Очередь +1;
		
возврат таблицаСогласования;
КонецФункции


//одинаково для всех!
процедура ЗаполнитьЗадачуПоЗаявкеНаБрак(Задача, колВозврат=0, Очередь=0)
	
		Задача.Дата = ТекущаяДата();
		Задача.Оповещение = Истина; // обязательно надо!
		Задача.СрокИсполнения = Задача.СрокОповещения + 7*86400; //через 7 дней - задача будет "просроченной"! 
		
		Задача.Объект = Ссылка;
		Задача.Инициатор = Ответственный; //кто делал эту Заявку - придёт обратное уведомление
		
		Задача.НаСогласование = Истина;  //обязательно!
		Задача.РеквизитДляСогласования = "СогласованВозвратКлиенту";
		Задача.ЗначениеРеквизитаДляСогласования = Истина; // при Утверждении - будет установлено ЭТО значение
				
		Задача.Постановщик = Ответственный;
		Задача.Наименование = строка(Очередь)+". Утвердите Возврат Отклоненного Брака Покупателю "+Контрагент.Наименование;
		Задача.Описание = "Утвердите Возврат Отклоненного Брака Покупателю: " + Контрагент.НаименованиеПолное + "
						   |на основании Заявки на Брак № " + Номер + " от "+формат(Дата, "ДЛФ=DD")+"
						   |в количестве: "+строка(колВозврат)+" шт.
						   |
						   |список товаров см. на закладке ""Товары"".";
		
	   Для каждого стр из Расшифровка Цикл
			колВозврата1 = Стр.Количество - стр.КоличествоПринято;
			Если колВозврата1<=0 тогда 
				продолжить;
			КонецЕсли;	
			Ст = Задача.Товары.Добавить();
			Ст.Номенклатура = ?( Стр.Качество = Справочники.Качество.Пересорт, 
									Справочники.Номенклатура.НайтиПоКоду(СокрЛП(Сред(стр.Заключение,найти(стр.Заключение,"#"),СтрДлина(Стр.Заключение))))
									,Стр.Номенклатура);
			
			Ст.Количество = колВозврата1;//только ТО, что на возврат!
				Если Стр.Номенклатура <> Ст.Номенклатура тогда
				Ст.Цена = ПолучитьЦену(Ст.Номенклатура, 1);  //из модуля!
			Иначе
				Ст.Цена = ПолучитьЦену(Стр.Номенклатура, 2);
			КонецЕсли;
			Ст.Сумма = Ст.Цена * Ст.Количество;
			Ст.НомерСтрокиОснования = Стр.НомерСтроки;
			Ст.Статус = Перечисления.СтатусыСтрокЗаказа.НаСогласовании; //!!!
		КонецЦикла;	
		
КонецПроцедуры
	
Функция ПолучитьАдресОтветственногоМенеджера(Контрагент)
	ЕМаил="";
	
	//Задача № 35734 
	ОперМен = ПолучитьОператораМенеджера();
	Пользователь = ОперМен.Пользователь;
	роль = ОперМен.Роль;
	
	операторФизЛицо = неопределено;
		Если ЗначениеЗаполнено(Пользователь.ФизЛицо) тогда // адрес эл.почты сначала ищем по физ.лицу!
			операторФизЛицо = Пользователь.ФизЛицо;
			видЕмайла = Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("38852"); //Служебный адрес электронной почты физ.лица
		иначе
			операторФизЛицо = Пользователь; //пользователь
			видЕмайла = Справочники.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя;
		КонецЕсли;
	
	Если операторФизЛицо = неопределено тогда
	возврат ЕМаил;
	КонецЕсли;
		
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	КонтактнаяИнформация.Представление КАК ЕМаил
	             |ИЗ
	             |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	             |ГДЕ
	             |	КонтактнаяИнформация.Объект = &операторФизЛицо
				 
				 |	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	             |	И КонтактнаяИнформация.Вид = &видЕмайла";
	Запрос.УстановитьПараметр("операторФизЛицо",операторФизЛицо);
	Запрос.УстановитьПараметр("видЕмайла",видЕмайла);
	выборка=Запрос.Выполнить().Выбрать();
	Если выборка.Следующий() тогда
		ЕМаил=СокрЛП(выборка.ЕМаил);
	КонецЕсли;
	Возврат ЕМаил;
КонецФункции

Процедура ОсновныеДействияФормыкнОтправитьПисьмо(Кнопка)
	ЕМаил=ПолучитьАдресОтветственногоМенеджера(Контрагент);
	Если ЕМаил<>"" Тогда
		Если СостояниеЗаявки=Перечисления.СостоянияЗаявкиНаБрак.ПризнатьБрак тогда
			
			ОтправитьСообщениеОБраке(Истина,ЕМаил);
			СоздатьЗадачуПоОтправкеПочты(ЕМаил);
			
		ИначеЕсли СостояниеЗаявки=Перечисления.СостоянияЗаявкиНаБрак.Отклонить тогда
			
			//п.1 по задаче № 35734 -> получает E-mail Оператора клиента...
			ОтправитьСообщениеОБраке(Ложь,ЕМаил);
			СоздатьЗадачуПоОтправкеПочты(ЕМаил); // для списка задач, чтобы видеть факт отправки!
			
		Иначе
			Предупреждение("Отправка эл.писем предназначена только для Признания брака или Отклонения брака!", 30);
		КонецЕсли;
	Иначе
		Сообщить("Для контрагента "+Контрагент+" не указан электронный адрес Оператора! Сообщение не доставлено!", СтатусСообщения.Внимание);
	КонецЕсли;
КонецПроцедуры

//создание задачи вдобавку или вместо @
Процедура СоздатьЗадачуПоОтправкеПочты(Емаил)
	
	задача = задачи.ЗадачиПользователя.СоздатьЗадачу();
	задача.Объект = Ссылка;
	
	ОперМен = ПолучитьОператораМенеджера();
	
	Задача.Исполнитель = ОперМен.Пользователь;
	задача.Наименование = "Вам отправлено @письмо по Заявке на брак № "+строка(Номер)+" по Контрагенту: "+строка(Контрагент); 
	задача.Описание     = "Для "+ОперМен.Роль+" # 
						   |"+формат(ТекущаяДата(),"ДЛФ=DT")+" "+задача.Наименование+"
						   |на Вашу электронную почту: "+Емаил+" 
						   |=> Заявка на брак переведена в Состояние: "+строка(СостояниеЗаявки);						   
	задача.Инициатор     = глТекущийПользователь;
	задача.Дата 		  = ТекущаяДата();
	задача.СрокИсполнения = КонецДня( ТекущаяДата() ); 	
	
////БЕЗ оповещения! потому что на почту - это и так оповещение!
	//задача.Оповещение     = истина;
	//задача.СрокОповещения = ТекущаяДата();
	
	// чтобы не мешала создавать другие задачи!
	задача.ПометкаУдаления = Истина; 
	
	задача.Записать();
	
КонецПроцедуры


Процедура КартинкаНажатие(Элемент)
   ЗапуститьПриложение("http://"+Элемент.значение);
КонецПроцедуры

Процедура ОсновныеДействияФормыкнЗаключениеКраткое(Кнопка)
	Если СостояниеЗаявки = Перечисления.СостоянияЗаявкиНаБрак.ПризнатьБрак 
		или СостояниеЗаявки = Перечисления.СостоянияЗаявкиНаБрак.Отклонить 
		или СостояниеЗаявки = Перечисления.СостоянияЗаявкиНаБрак.ВРассмотрении Тогда   //в рассмотрении - по задаче 47743 
		Если ЭтотОбъект.Модифицированность() Тогда
			Сообщить("Перед печатью необходимо записать документ");
		Иначе		
			ТабДок=НапечататьЗаключениеКраткое();
			ТабДок.Показать();
		КонецЕсли;
		
	Иначе
		Сообщить("Заключение распечатывается только когда поле ""Состояния заявки"" равно: Отклонить или Признать брак");
	КонецЕсли;
КонецПроцедуры

Процедура ПриОткрытии()	
	
	списокМенеджеровПоБраку = новый СписокЗначений; 
	//см. ПолучитьИнженераПоКачеству() в модуле для печати...
	
	//Шины
	списокМенеджеровПоБраку.Добавить( Справочники.Пользователи.НайтиПоНаименованию("Виноградов"),"Шины"); 					//уволен?!
	списокМенеджеровПоБраку.Добавить( Справочники.Пользователи.НайтиПоНаименованию("Беляков Николай Александрович"),"Шины");  //уволен?!
	списокМенеджеровПоБраку.Добавить( Справочники.Пользователи.НайтиПоКоду("Куртов К.Д."),"Шины" ); 
	//диски
	списокМенеджеровПоБраку.Добавить( Справочники.Пользователи.НайтиПоКоду("Ульянов С.")   ,"Диски" ); 
	списокМенеджеровПоБраку.Добавить( Справочники.Пользователи.НайтиПоКоду("Левченко Ф.С."),"Диски" );
	списокМенеджеровПоБраку.Добавить( Справочники.Пользователи.НайтиПоКоду("Капченко И.")  ,"Диски" );
	//Аксессуары
	списокМенеджеровПоБраку.Добавить( Справочники.Пользователи.НайтиПоНаименованию("Уманский В. А."),"Аксессуары" ); 
	
	элСписка = списокМенеджеровПоБраку.НайтиПоЗначению(глТекущийПользователь);  //сразу найдём в списке
	
	Если Не ( РольДоступна("ПолныеПрава") или элСписка<>неопределено  //полные права или Есть в списке
			 ) тогда
		ЭлементыФормы.РасшифровкаВкладка.Страницы.Заключение.Доступность=Ложь;
		
		ЭлементыФормы.СостояниеЗаявки.Доступность=Ложь;
		
		Если не Контрагент.Пустая() тогда
		ЭлементыФормы.Контрагент.ТолькоПросмотр  = Истина;
		ЭлементыФормы.Контрагент1.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		ЭлементыФормы.Дата.ТолькоПросмотр = Истина;
		
		//ЭлементыФормы.Расшифровка.Колонки.НачалоЭкспертизы.Доступность = ложь;
		ЭлементыФормы.Расшифровка.Колонки.ОкончаниеЭкспертизы.Доступность = ложь;
		ЭлементыФормы.Расшифровка.Колонки.ВидБрака.Доступность = ложь;
		//ЭлементыФормы.Расшифровка.Колонки.Исследование.Доступность = ложь;
		//ЭлементыФормы.Расшифровка.Колонки.Вывод.Доступность = ложь;
		ЭлементыФормы.Расшифровка.Колонки.Заключение.Доступность = ложь;
		ЭлементыФормы.Расшифровка.Колонки.МетодУстранения.Доступность = ложь;
		ЭлементыФормы.Расшифровка.Колонки.Действие.Доступность = ложь;
	КонецЕсли;
	
	ОбновитьНадписьОператор();
	
	//Сакулина 24.08.2016 - для всех!
	ЭлементыФормы.ПанельЗаявкаСтарая.Доступность = Ложь;
	ЭлементыФормы.ПанельЗаключение.Доступность = Ложь;
	ЭлементыФормы.ПанельДокументы.Доступность = Ложь;
	//Сакулина 24.08.2016
	
	СписокМакетов = ЭтотОбъект.ПолучитьСписокПечатныхФорм();
	УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.кнПечать,
	                                       СписокМакетов,
										   Новый Действие("КоманднаяПанельФормыДействиеВыбратьПечатнуюФормы"));	
										   
	Если ЭтоНовый() и НЕ ЗначениеЗаполнено(ВидТовара) Тогда 
		
		Если элСписка<>неопределено тогда	//15.08.2018 по списку с Пометкой!
			
			Если элСписка.Представление = "Шины" тогда
			ВидТовара = Перечисления.ВидыТоваров.Шины;
			
			иначеЕсли элСписка.Представление = "Диски" тогда
			//ИначеЕсли (глТекущийПользователь=Справочники.Пользователи.НайтиПоНаименованию("Ульянов С.")) Тогда 
			ВидТовара = Перечисления.ВидыТоваров.диски;
			
			иначеЕсли элСписка.Представление = "АКБ" тогда
			ВидТовара = Перечисления.ВидыТоваров.АКБ;
			
			иначеЕсли элСписка.Представление = "Аксессуары" тогда
			ВидТовара = Перечисления.ВидыТоваров.Аксессуары;
			
			КонецЕсли;
		
		конецЕсли;
		
	КонецЕсли;
	
	// Сакулина
	УстановитьВидимостьПоВидуТовара();
	// Сакулина
		
	//15.08.2018 всегда актуальный список!
	ЭлементыФормы.Филиал.СписокВыбора.Очистить();
	СписокФилиалов = яштПоставщики.ПолучитьМассивФилиалов();
	
	ЭлементыФормы.Подразделение.СписокВыбора.Добавить( СписокФилиалов[0] );

	для i=1 по СписокФилиалов.Количество()-1 цикл  
		ЭлементыФормы.Филиал.СписокВыбора.Добавить( СписокФилиалов[i].Контрагент ); //это Контрагенты!
		ЭлементыФормы.Подразделение.СписокВыбора.Добавить( СписокФилиалов[i] );   //а тут Подразделения!
	КонецЦикла;

	Если глТекущийПользователь=Справочники.Пользователи.НайтиПоНаименованию("Фролов") Тогда
		ЭлементыФормы.КомментарийЗавСкладом.Доступность = Истина;
	КонецЕсли;
	
	//15.08.2018 --- 2 кнопки 
	Если СостояниеЗаявки=Перечисления.СостоянияЗаявкиНаБрак.ПризнатьБрак 
	  или СостояниеЗаявки=Перечисления.СостоянияЗаявкиНаБрак.Отклонить тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.НаСогласование.доступность = Истина;
		
		если СостояниеЗаявки=Перечисления.СостоянияЗаявкиНаБрак.Отклонить тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.кнОтправитьПисьмо.доступность = Истина;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

//16.08.2018 --- получаем ВСЕ задачи по этой заявке----------
процедура ПолучитьЗадачиНаСогласование()
   табл = УжеЕстьЗадачаПоЗаявкеНаИсполнителя();
   ЗадачиНаСогласование.Очистить();
   
   для каждого стр1 из табл цикл
	   
	   стр2 = ЗадачиНаСогласование.Добавить();
	   ЗаполнитьЗначенияСвойств(стр2, стр1);
	   стр2.Очередь = 0;
	   стр2.Роль    = "";
	   
	   //в начале должно быть: Задача для Оператора#
	   Роль    = лев(стр1.Задача.Описание, найти(стр1.Задача.Описание,"#")-2);
	   Роль = стрЗаменить(Роль, "Задача ","");
	   стр2.Роль    = Роль; //"для Оператора"
	   
	   попытка
	   стр2.Очередь = число( лев(стр1.Задача.Наименование,1) );
	   Исключение
	   КонецПопытки;	 
	   
   КонецЦикла;	   
КонецПроцедуры	

Процедура ОбновитьНадписьОператор()
	Если Контрагент.Пустая() тогда
		ЭлементыФормы.НадписьОператор.Заголовок = "";
	иначе	
		ОперМен = ПолучитьОператораМенеджера();
		ЕМаил=ПолучитьАдресОтветственногоМенеджера(Контрагент);
		ЭлементыФормы.НадписьОператор.Заголовок = ОперМен.Роль+": "+строка(ОперМен.Пользователь)+" E-mail: "+ЕМаил;
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанельФормыДействиеВыбратьПечатнуюФормы(Кнопка)

	СсылкаВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Кнопка.Имя, "_", "-")));
	Печать(СсылкаВнешнейФормы,,,ЭтаФорма);

КонецПроцедуры // КоманднаяПанельФормыДействиеВыбратьПечатнуюФормы()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, Форма = Неопределено) Экспорт

		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();
		

	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект));
    
КонецПроцедуры // Печать

Процедура РасшифровкаКартинкаОткрытие(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = ложь;
	ЗапуститьПриложение(Элемент.значение);
КонецПроцедуры

Процедура РасшифровкаНомерРеализацииОткрытие(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = ложь;
	ДатаРеализации = ЭлементыФормы.Расшифровка.ТекущиеДанные.ДатаРеализации;
	
	ДокументР = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ДатаРеализации) Тогда 
		ДокументР = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Элемент.Значение,ДатаРеализации);
	Иначе 
		ДокументР = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Элемент.Значение,ТекущаяДата());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументР) Тогда 
		ДокументР.ПолучитьФорму("ФормаДокумента").Открыть();
	Иначе
		Предупреждение("Документ не найден.");
	КонецЕсли;
 	
КонецПроцедуры

Процедура КоманднаяПанель2ЗагрузкаИзЭксель(Кнопка)
	// Вставить содержимое обработчика.
	ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
	ОбъектВнешнейФормы = Справочники.ВнешниеОбработки.НайтиПоКоду("657");
	Если ОбъектВнешнейФормы = Неопределено Тогда
		Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
		
	ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
	ДвоичныеДанные.Записать(ИмяФайла);
	Обработка = ВнешниеОбработки.Создать(ИмяФайла);
	Обработка.ФормаДокумента = ЭтаФорма;
	Обработка.ПолучитьФорму("Форма").ОткрытьМодально();

КонецПроцедуры

Процедура РасшифровкаДокументПриИзменении(Элемент)
	ТекСтрока= Элементыформы.Расшифровка.текущиеДанные;
	Продали = Текстрока.Реализация.Товары.найтиСтроки("Номенклатура",ТекСтрока.Номенклатура);
	Отгружено = 0;
	Для каждого ст из Продали Цикл
	Отгружено= Отгружено+ст.количество;	
   конецЦикла;
   Если Отгружено =0 Тогда
	Сообщить("Указанной номенклатуры в выбранной реализации не достаточно!", СтатусСообщения.Внимание);  
	ТекСтрока.Реализация = "";
   иначе	   
	Если ТипЗнч(ТекСтрока.Реализация) = Тип("ДокументСсылка.РеализацияТоваровУслуг") тогда
		ТекСтрока.ДатаРеализации = ТекСтрока.Реализация.Дата;
		ТекСтрока.номерРеализации = ТекСтрока.Реализация.Номер;
	конецЕсли;
   конецесли;	
КонецПроцедуры

Процедура ДействияФормыСтруктураПодчиненности(Кнопка)
		ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);	
КонецПроцедуры


Процедура РасшифровкаДефектНачалоВыбора(Элемент, СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
	//нФормаВыбора = Справочники.ВидыДефектовДляУценки.ПолучитьФормуВыбора(, Элемент);
	//нФормаВыбора.Отбор.ВидТовара.ВидСравнения = ВидСравнения.Равно;
	//нФормаВыбора.Отбор.ВидТовара.Значение = ЭлементыФормы.Расшифровка.ТекущиеДанные.Номенклатура.ВидТовара;
	//нФормаВыбора.Отбор.ВидТовара.Использование = Истина;
	//нФормаВыбора.Открыть();

КонецПроцедуры

Процедура УстановитьВидимостьПоВидуТовара()
	Если  ЗначениеЗаполнено(ВидТовара) и ВидТовара = Перечисления.ВидыТоваров.АКБ Тогда
		ЭлементыФормы.Расшифровка.Колонки.Пробег.Видимость = Ложь;
		ЭлементыФормы.Расшифровка.Колонки.Марка.ТекстШапки = "Данные об авто";
		ЭлементыФормы.Расшифровка.Колонки.ДополнительныеСвойства.Видимость = Ложь;
		ЭлементыФормы.Расшифровка.Колонки.ИнфоКонечныйПотребитель.Видимость = Истина;
		ЭлементыФормы.Расшифровка.Колонки.ДатаПродажиКонПотребитель.Видимость = Истина;
        ЭлементыФормы.Расшифровка.Колонки.ДатаВыяленияДефекта.Видимость = Истина;
		ЭлементыФормы.РасшифровкаДопИнфо.Заголовок = "В ""данные об авто"" необходимо указать: модель/год выпуска/объем двигателя автомобиля";
		ЭлементыФормы.РасшифровкаДопИнфо.Видимость = Истина;
	ИначеЕсли ЗначениеЗаполнено(ВидТовара) и ВидТовара = Перечисления.ВидыТоваров.Шины Тогда
        ЭлементыФормы.Расшифровка.Колонки.Пробег.Видимость = Истина;
		ЭлементыФормы.Расшифровка.Колонки.Марка.ТекстШапки = "Марка";
		ЭлементыФормы.Расшифровка.Колонки.ДополнительныеСвойства.Видимость = Истина;
		ЭлементыФормы.Расшифровка.Колонки.ИнфоКонечныйПотребитель.Видимость = Ложь;
		ЭлементыФормы.Расшифровка.Колонки.ДатаПродажиКонПотребитель.Видимость = Ложь;
        ЭлементыФормы.Расшифровка.Колонки.ДатаВыяленияДефекта.Видимость = Ложь;
		ЭлементыФормы.РасшифровкаДопИнфо.Заголовок = "В ""доп. инофрмациии"" для шин необходимо указать: размер диска, давление в шине, расположение шины.";
		ЭлементыФормы.РасшифровкаДопИнфо.Видимость = Истина;
	Иначе
		ЭлементыФормы.Расшифровка.Колонки.Пробег.Видимость = Истина;
		ЭлементыФормы.Расшифровка.Колонки.Марка.ТекстШапки = "Марка";
		ЭлементыФормы.Расшифровка.Колонки.ДополнительныеСвойства.Видимость = Ложь;
		ЭлементыФормы.Расшифровка.Колонки.ИнфоКонечныйПотребитель.Видимость = Ложь;
		ЭлементыФормы.Расшифровка.Колонки.ДатаПродажиКонПотребитель.Видимость = Ложь;
        ЭлементыФормы.Расшифровка.Колонки.ДатаВыяленияДефекта.Видимость = Ложь;
		ЭлементыФормы.РасшифровкаДопИнфо.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

Процедура АдресДоставкиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элемент.СписокВыбора.очистить();
	Запрос = Новый Запрос;
	запрос.УстановитьПараметр("Контр",Контрагент);
	запрос.УстановитьПараметр("Адрес",Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтактнаяИнформация.Представление
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Объект = &Контр
	               |	И КонтактнаяИнформация.Тип = &Адрес";
	Рез = Запрос.Выполнить().Выгрузить();
	Для каждого стр из Рез Цикл
		Элемент.СписокВыбора.Добавить(стр.Представление);
    КонецЦикла;
КонецПроцедуры

Процедура БракОбнаруженНаСкладеПриИзменении(Элемент)
	если БракОбнаруженНаСкладе тогда
		ответ = Вопрос("При установке этого признака будут очищены привязки к реализациям. Продолжить?",РежимДиалогаВопрос.ДаНет);
		Если ответ = КодВозвратаДиалога.Да Тогда
			Для каждого стр из Расшифровка Цикл
				стр.Реализация = "";
				стр.НомерРеализации = "";
				стр.ДатаРеализации = "";
			конецЦикла;	
		иначе
			БракОбнаруженНаСкладе = Ложь;
		конецЕсли;
	конецЕсли;	
КонецПроцедуры

Процедура ДействияФормыВыгрузитьВФормулу(Кнопка)
	Если ЗаключениеВФормуле Тогда
		Сообщить("Заключение уже выгружено");
		Возврат;
	КонецЕсли;
	Если ЭтотОбъект.Модифицированность() Тогда
		Сообщить("Запишите документ");
		Возврат;
	КонецЕсли;
	Если  Не ПустаяСтрока(ИзФормулы) и  (СостояниеЗаявки = Перечисления.СостоянияЗаявкиНаБрак.Отклонить
		или СостояниеЗаявки = Перечисления.СостоянияЗаявкиНаБрак.ПризнатьБрак) Тогда
		
		UsrPwd = "Usr=""Робот (центр - номенклатура)"";Pwd=""09876""";
		//Base  = "File=""C:\Базы 1с\УТ Формула""";
		Base   =  "Srvr=""sigma:2041"";Ref=""v82ib_formula_ut""";
		v8connect = Новый COMОбъект("V82.ComConnector");
		
		СтрокаСоединенияCOM = Base+";"+UsrPwd;
		Попытка
			Соединение = v8connect.Connect(СтрокаСоединенияCOM);
			#Если Клиент Тогда
				Сообщить(строка(ТекущаяДата())+" Успешно Установлено подключение к базе 1С V82: "+base, СтатусСообщения.Информация);
			#КонецЕсли
		Исключение
			#Если Клиент Тогда
				Сообщить("НЕТ подключения к базе 1С V82: "+base+" ! ", СтатусСообщения.Внимание);
			#КонецЕсли
			Возврат;
		КонецПопытки;
        ЗаявкаНаБракФСсылка = Соединение.Документы.ЗаявкаНаБрак.НайтиПоНомеру(Ссылка.ИзФормулы);
		ЗаявкаНаБракФ = ЗаявкаНаБракФСсылка.GetObject();
		Если ЗаявкаНаБракФ = Неопределено Тогда
			Сообщить("Документ заявка на брак в Базе Формулы не найден! "+ ИзФормулы, СтатусСообщения.Внимание);
			Возврат;
		Иначе
			Для Каждого СтрТовар из Расшифровка Цикл
				Отбор = Соединение.NewObject("Структура");
				НоменклатураССылка  = Соединение.Справочники.Номенклатура.НайтиПокоду(СтрТовар.Номенклатура.Код);
				Отбор.Вставить("Номенклатура",НоменклатураССылка);
				Отбор.Вставить("СерийныйНомер",СтрТовар.СерийныйНомер);

				Строки = ЗаявкаНаБракФ.Товары.Найтистроки(Отбор);
 				Для Каждого СтрТоварФормула из Строки  Цикл
					СтрТоварФормула.Действие = СтрТовар.Действие;
					СтрТоварФормула.Заключение = СтрТовар.Заключение;
					СтрТоварФормула.МетодУстранения = СтрТовар.МетодУстранения;
				КонецЦикла;
				ДатаПроверки = СтрТовар.НачалоЭкспертизы;
			КонецЦикла;
			Если СостояниеЗаявки = Перечисления.СостоянияЗаявкиНаБрак.ПризнатьБрак Тогда
				ЗаявкаНаБракФ.СостояниеЗаявки = Соединение.Перечисления.СостоянияЗаявкиНаБрак.ПризнатьБрак;
			ИначеЕсли  СостояниеЗаявки = Перечисления.СостоянияЗаявкиНаБрак.Отклонить Тогда
				ЗаявкаНаБракФ.СостояниеЗаявки = Соединение.Перечисления.СостоянияЗаявкиНаБрак.Отклонить;
			КонецЕсли;
			ЗаявкаНаБракФ.ДатаПроведенияЭкспертизы = ДатаПроверки;
			Попытка
				ЗаявкаНаБракФ.Записать();
				ЗаключениеВФормуле = Истина;
				Записать();
				ПроставитьКартинку();
			Исключение
				Сообщить("Произошла ошибка при записи заявки на брак в Формуле: " + ОписаниеОшибки(), СтатусСообщения.Внимание);
			КонецПопытки;
			
		КонецЕсли;	
		
		Если ЗаключениеВФормуле = Истина Тогда
			Если СостояниеЗаявки = Перечисления.СостоянияЗаявкиНаБрак.Отклонить Тогда
				СоздатьЗаданиеНаПеремещение();
			ИначеЕсли СостояниеЗаявки = Перечисления.СостоянияЗаявкиНаБрак.ПризнатьБрак Тогда
				СоздатьЗадачуНаПроставлениеДокумента(); //в модуле
			КонецЕсли;
		КонецЕсли;

	Иначе
       Сообщить("Нельзя выгрузить заявку на брак в Формулу!", СтатусСообщения.ОченьВажное);
   КонецЕсли;
   
    
КонецПроцедуры

Функция ПередатьЗначениеВCОМ(ВнешнСоед,Значение) Экспорт 

       Возврат ВнешнСоед.ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(Значение)); 

КонецФункции

Процедура ОсновныеДействияФормыАктПриемаПередачи(Кнопка)
	ТабДок=Новый ТабличныйДокумент;
	Макет=ПолучитьМакет("АктПриемаПередачи");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
    ОбластьТовар = Макет.ПолучитьОбласть("Строка");
    ОбластьИтоги = Макет.ПолучитьОбласть("Итоги");
	
	ТабДок.Вывести(ОбластьШапка);
	Для Каждого СтрТовар из Расшифровка Цикл
		ОбластьТовар.Параметры.Заполнить(СтрТовар);
		ТабДок.Вывести(ОбластьТовар);
	КонецЦикла;	
	ОбластьИтоги.Параметры.КоличествоИтого = Расшифровка.Итог("Количество");
	ТабДок.Вывести(ОбластьИтоги);
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.Показать();

КонецПроцедуры

//+ Сакулина
Процедура СоздатьЗаданиеНаПеремещение()
	
	Если ВидТовара <> перечисления.ВидыТоваров.АКБ тогда
		Предупреждение("Задание на Перемещение должно быть по Виду товара АКБ!", 30);
	КонецЕсли;
	
	// каждый раз делается Задание на перемещение!?
	Задание = Документы.ЗаданиеНаПеремещение.СоздатьДокумент();
	Задание.Дата = ТекущаяДата();
	Задание.ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Расход;
	
	Задание.Ассортимент = строка(ВидТовара);
	СкладОтправитель = Справочники.Склады.НайтиПоКоду("02184");  		// Экспертиза АКБ
	Задание.СкладПолучатель = Справочники.Склады.НайтиПоКоду("02185"); // АКБ проверенные в Формуле
	Задание.Организация = Справочники.Организации.НайтиПоКоду("00001");
	
	Задание.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоКоду("Г7121");// Договор хранения  //Малышева О.В. ИП+ 
	Задание.Контрагент = Задание.ДоговорКонтрагента.Владелец; //Контрагент;
	
	Для Каждого СтрТовар из Расшифровка Цикл
		НовСтр = Задание.ЗаявкиНаБрак.Добавить();
		
		НовСтр.Заявка = Ссылка;
		НовСтр.Контрагент = Контрагент; 
		НовСтр.ДоговорКонтрагента = Задание.ДоговорКонтрагента; //тот же самый!
		НовСтр.Регистратор = этотОбъект.ДокументОснование; //16.08.2018 обычно вводится на основании  ЗаявкаНаВозвратТоваров
		
	//	НовСтр.ДокументОтгрузки = ДокументОТХ.Ссылка;
		НовСтр.Номенклатура = СтрТовар.Номенклатура;
		НовСтр.Количество 	= СтрТовар.Количество;
		НовСтр.Склад 		= СкладОтправитель;
		НовСтр.Вес   = СтрТовар.Номенклатура.ЕдиницаХраненияОстатков.Вес   * НовСтр.Количество;
		НовСтр.Объем = СтрТовар.Номенклатура.ЕдиницаХраненияОстатков.Объем * НовСтр.Количество;
	КонецЦикла;
	Задание.ВводитьТолькоПеремещение = Истина;
	
	Попытка
		Задание.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		Сообщить("Ошибка при записи Задания на перемещения : " + ОписаниеОшибки(), СтатусСообщения.Внимание);
	КонецПопытки;
	
КонецПроцедуры
//- Сакулина


//+ Сакулина
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Для каждого стр из Расшифровка Цикл
		Если СокрЛП(стр.Заключение)<>"" и не ЗначениеЗаполнено(стр.ВиновникВозникновенияДефекта) тогда
			Сообщить("В строке "+стр.НомерСтроки+" не заполнен виновник возникновения дефекта. Заявка не будет записана");
			отказ = истина;
		КонецЕсли;
	КонецЦикла;
	
	ЭтоНовый = ЭтоНовый();
	
КонецПроцедуры

Процедура РасшифровкаПодразделениеПриИзменении(Элемент)
	Если  ЗначениеЗаполнено(Элемент.Значение) Тогда
		Если Элемент.Значение = Справочники.Подразделения.НайтиПоКоду("00005") тогда
			Предупреждение("Нельзя выбрирать Головное подразделение");
			Элемент.Значение = Справочники.Подразделения.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура РасшифровкаВиновникВозникновенияДефектаПриИзменении(Элемент)
		Если  ЗначениеЗаполнено(Элемент.Значение) Тогда
		Если Элемент.Значение = Перечисления.ВиновникиВозникновенияДефекта.Склад тогда
			ЭлементыФормы.Расшифровка.ТекущиеДанные.Подразделение = Справочники.Подразделения.НайтиПоКоду("00005"); //Головное подразделение Ярославль
		ИначеЕсли Элемент.Значение = Перечисления.ВиновникиВозникновенияДефекта.Логистика тогда
			ЭлементыФормы.Расшифровка.ТекущиеДанные.Подразделение = Справочники.Подразделения.НайтиПоКоду("00013"); //Служба логистики и транспорта
		ИначеЕсли Элемент.Значение = Перечисления.ВиновникиВозникновенияДефекта.ПодразделениеЕкб тогда
			ЭлементыФормы.Расшифровка.ТекущиеДанные.Подразделение = Справочники.Подразделения.НайтиПоКоду("00138"); //Обособленное подразделение Екатеринбург
		ИначеЕсли Элемент.Значение = Перечисления.ВиновникиВозникновенияДефекта.ПодразделениеРНД тогда
			ЭлементыФормы.Расшифровка.ТекущиеДанные.Подразделение = Справочники.Подразделения.НайтиПоКоду("00106"); //Подразделение Ростов на Дону	
		ИначеЕсли Элемент.Значение = Перечисления.ВиновникиВозникновенияДефекта.ПодразделениеСпб тогда
			ЭлементыФормы.Расшифровка.ТекущиеДанные.Подразделение = Справочники.Подразделения.НайтиПоКоду("00112"); //Подразделение Санкт-Петербург	
		ИначеЕсли Элемент.Значение = Перечисления.ВиновникиВозникновенияДефекта.ИнтернетМагазинKOLESATYT тогда
			ЭлементыФормы.Расшифровка.ТекущиеДанные.Подразделение = Справочники.Подразделения.НайтиПоКоду("00139"); //Отдел интернет-продаж		
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура РасшифровкаРеализацияПриИзменении(Элемент)
	стр = ЭлементыФормы.Расшифровка.ТекущиеДанные;
	Если значениеЗаполнено(стр.Реализация) тогда
	Стр.номерРеализации = стр.Реализация.Номер;
	стр.ДатаРеализации = стр.Реализация.Дата;
	конецЕсли;
КонецПроцедуры
//- Сакулина


Процедура ОсновныеДействияФормыОтветНаПеренаправлениеПретензии(Кнопка)
	
	Если Модифицированность() Тогда
		Сообщить("Перед печатью необходимо записать документ");
	Иначе		
		ТабДок = НапечататьОтветНаПеренаправлениеПретензии();
		ТабДок.Показать();
		Если ПустаяСтрока(КомментарийСклада) Тогда
			КомментарийСклада = "На рассмотрении у поставщика";
			ЗаписатьВФорме();
			ПроставитьКартинку();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НЕ НоваяСтрока Тогда
		ТекКолонкаИмя = Элемент.ТекущаяКолонка.Имя;
		Если ТекКолонкаИмя = "Картинка" Тогда
			ОткрытьСсылкуНаКартинку(Элемент.ТекущиеДанные.Картинка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьМассивИменФайловИзКартинки(КартинкиСтр)
	
	МасСтроки = РазложитьСтрокуВМассивПодстрок(КартинкиСтр, ",");
	
	КоличЭлементов = МасСтроки.Количество();
	Для ТекЭлемСчетчик = 0 По КоличЭлементов - 1 Цикл
		Пока Найти(МасСтроки[ТекЭлемСчетчик], """") <> 0 Цикл
			МасСтроки[ТекЭлемСчетчик] = СтрЗаменить(МасСтроки[ТекЭлемСчетчик], """", "");
		КонецЦикла;
	КонецЦикла;
	
	Возврат МасСтроки;
	
КонецФункции // СформироватьМассивИменФайловИзКартинки()

Процедура ОткрытьСсылкуНаКартинку(Картинка)
	
	Если Картинка = "[]" ИЛИ ПустаяСтрока(Картинка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Лев(Картинка, 1) = "[" И Прав(Картинка, 1) = "]" Тогда
		КартинкиСтр = Сред(Картинка, 2);
		КартинкиСтр = Лев(КартинкиСтр, СтрДлина(КартинкиСтр) - 1);
		МасИменаФайлов = СформироватьМассивИменФайловИзКартинки(КартинкиСтр);
		СсылкаПрефикс = "http://service.yst.ru/uploads/";
		Если МасИменаФайлов.Количество() = 1 Тогда
			Если ЗначениеЗаполнено(МасИменаФайлов[0]) Тогда
				КартинкаСсылка = СсылкаПрефикс + МасИменаФайлов[0];
				ЗапуститьПриложение(КартинкаСсылка);
			КонецЕсли;
		Иначе
			СписКартинки = Новый СписокЗначений;
			СписКартинки.ЗагрузитьЗначения(МасИменаФайлов);
			СписКартинки.ОтметитьЭлементы("Укажите картинки для просмотра");
			Для Каждого ТекКартинка Из СписКартинки Цикл
				Если ТекКартинка.Пометка И ЗначениеЗаполнено(ТекКартинка.Значение) Тогда
					КартинкаСсылка = СсылкаПрефикс + ТекКартинка.Значение;
					ЗапуститьПриложение(КартинкаСсылка);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОткрытьСсылкуНаКартинку()

Процедура ПриЗаписи(Отказ)	
	
	Если не Отказ и ЭтоНовый тогда
		   ПроставитьКартинку();
	КонецЕсли;

КонецПроцедуры

Процедура ПроставитьКартинку()
	    Если не СозданЧерезТерминал тогда
			для каждого стр из  Расшифровка цикл
				Если ПустаяСтрока(стр.Картинка) тогда 					
					стр.Картинка = "http://terminal.yst.ru/Claims/DetailsAdmin?guid="+ Ссылка.УникальныйИдентификатор();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
КонецПроцедуры

//----------------------------интерфейсные функции------------------

Процедура ДатаПриИзменении(Элемент)
	Если Дата< НачалоДня(ТекущаяДата())- 7*24*60*60 Тогда
	Сообщить("Нельзя заводить заявку раньше чем 7 дней от текущей даты");
	Дата = НачалоДня(ТекущаяДата())- 7*24*60*60;
	конецЕсли;	
КонецПроцедуры

Процедура ВидТовараПриИзменении(Элемент)
	УстановитьВидимостьПоВидуТовара();
КонецПроцедуры

Процедура РеализацияПриИзменении(Элемент)
	Если не Реализация.Пустая() тогда
		ДатаРеализации  = Реализация.Дата;
		НомерРеализации = Реализация.Номер;
		Подразделение   = Реализация.Подразделение;
		Контрагент = Реализация.Контрагент;
	КонецЕсли;
КонецПроцедуры

Процедура СогласованПриИзменении(Элемент)
	Если не РольДоступна("ПолныеПрава") тогда
		Предупреждение("У Вас недостаточно прав для изменения Согласования возврата!", 30);
		СогласованВозвратКлиенту = Ссылка.СогласованВозвратКлиенту;
	КонецЕсли;	
КонецПроцедуры

Процедура КонтрагентПриИзменении(Элемент)
	Если Контрагент.Пустая() тогда	
		ЭлементыФормы.НадписьОператор.Заголовок = " ";
	иначе	
		ОбновитьНадписьОператор();
	КонецЕсли;	
КонецПроцедуры

//15.08.2018
Процедура ОсновныеДействияФормыНаСогласование(Кнопка)
			
	//п.2 по задаче № 35734 -> получает E-mail Оператора клиента...
	СоздатьЗадачуНаСогласованиеОтправкиТовараПокупателю();

КонецПроцедуры

Процедура ЗадачиНаСогласованиеПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого Строка из ОформленияСтрок цикл
		
		инд = -1; // нет задачи
		задача =  Строка.ДанныеСтроки.Задача;
		Если ЗначениеЗаполнено(задача) тогда
		Строка.ДанныеСтроки.ЗадачаНаименование = задача.Наименование;
		
			инд = 0; //в ожидании
			
			Если задача.пометкаУдаления Тогда
				инд = -1; // удалена задача, никакой картинки нет!
				Строка.ЦветТекста = webЦвета.Серый;
				
			ИначеЕсли Строка.ДанныеСтроки.ДатаИсполнения = '00010101'
				и Строка.ДанныеСтроки.СрокИсполнения < НачалоДня(ТекущаяДата()) тогда
				Строка.ЦветТекста = webЦвета.Красный; //просроченная и невыполненная задача!
			КонецЕсли;
		
			Если задача.выполнена тогда
				Строка.Шрифт = новый Шрифт(Строка.Шрифт,,,Истина);//жирный
				
				Если (задача.НаСогласование и Найти(задача.Наименование, "НЕ УТВЕРЖДЕНО:")>0 ) тогда
					инд = 2;//отклонено
					
				ИначеЕсли ( задача.НаСогласование и Найти(задача.Наименование, "УТВЕРЖДЕНО:")>0 )
					или (не задача.НаСогласование) Тогда // другие задачи - выполнены
					инд = 1; //утвержедено/выполнено
					
				КонецЕсли;
			//Иначе не выполнена!
			КонецЕсли;	
			
		КонецЕсли;
		
		Если инд>-1 тогда
			Строка.Ячейки.Картинка.ОтображатьКартинку = истина;
			Строка.Ячейки.Картинка.ИндексКартинки = инд;
		КонецЕсли;
	
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПанельОбщаяПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = 2 тогда
		ПолучитьЗадачиНаСогласование();
	КонецЕсли;	
КонецПроцедуры

Процедура ЗадачиНаСогласованиеПередУдалением(Элемент, Отказ)
	Предупреждение("Для удаления задачи - откройте её в списке задач!", 30);
	Отказ = истина;
КонецПроцедуры


Процедура ЗадачиНаСогласованиеЗадачаНаименованиеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	стр  = ЭлементыФормы.ЗадачиНаСогласование.ТекущиеДанные;
	стр.Задача.ПолучитьФорму("ФормаЗадачи").Открыть();
КонецПроцедуры

