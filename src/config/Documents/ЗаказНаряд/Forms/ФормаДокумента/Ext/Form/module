
Перем мВалютаРегламентированногоУчета;
Перем мМожноМенятьЦенуВДокументе;
Перем мМинимальныеЦены;
Перем  мСписокФильтров, мРассчитыватьАвтоматическиеСкидки;
Перем мСуммаДокументаБезСкидок;
Перем мКлассАвтомобиля;
Перем мПечатнаяФормаПоУмолчанию;


Процедура ПриОткрытии()
	// Вставить содержимое обработчика.
	
	Если ЭтоНовый() Тогда
		ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета,"Продажа");
		УстановитьНомерДокумента(ЭтотОбъект);
		ДатаСоздания = ТекущаяДата();
		Состояние=Перечисления.СостояниеЗаказНаряда.Заявка;
		Заказчик = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнойПокупатель");
		Цех = Справочники.Цеха.ОсновнойЦех;
		КассаККМ = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяКассаККМ");
		Склад = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнойСклад");
		Контрагент = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнойПокупатель");
	Иначе 
		Если РольДоступна("ПолныеПрава") Тогда
		ЭлементыФормы.тДокументПродажи.Заголовок=ПолучитьДокументПродажиПоЗаказНаряду();
		КонецЕсли;
	КонецЕсли;

	
	мМожноМенятьЦенуВДокументе = РазрешитьРедактированиеЦенВДокументах();

	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	мМинимальныеЦены = Новый ТаблицаЗначений;
	мМинимальныеЦены.Колонки.Добавить("Номенклатура");
	мМинимальныеЦены.Колонки.Добавить("ХарактеристикаНоменклатуры");
	мМинимальныеЦены.Колонки.Добавить("Цена");

	мСписокФильтров = ПолучитьЗначениеПраваПользователя(
					ПланыВидовХарактеристик.ПраваПользователей.НеОтпускатьТоварСЦенойНижеОпределенногоТипа,
					Неопределено);
    мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
    мКлассАвтомобиля=Автомобиль.Модель.КлассАвтомобиля;
	
	Если (Состояние = Перечисления.СостояниеЗаказНаряда.Закрыт) Тогда
		ЭлементыФормы.Состояние.Доступность = Ложь;
		ЭлементыФормы.Автомобиль.Доступность = Ложь;
		ЭлементыФормы.ДисконтнаяКарта.Доступность = Ложь;
	КонецЕсли;
	СписокМакетов = ПолучитьСписокПечатныхФорм();

	УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати,
	                                       СписокМакетов,
	                                       Новый Действие("КоманднаяПанельФормыДействиеВыбратьПечатнуюФормы"));
    УстановитьКнопкуПечати(ЭтотОбъект.Метаданные().Имя, ЭтаФорма, СписокМакетов, мПечатнаяФормаПоУмолчанию);
	
	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 

	ДисконтнаяКартаПриИзменении(ЭтаФорма);
	
КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	


Функция РассчитыватьАвтоматическиеСкидки() Экспорт

	Если НЕ мРассчитыватьАвтоматическиеСкидки
	 Или Проведен
	 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции


Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	мРассчитыватьАвтоматическиеСкидки = Истина;

КонецПроцедуры

Процедура КоманднаяПанельТоварыПодбор(Кнопка)
	// Вставить содержимое обработчика.
	ДействиеПодбор(Товары);
КонецПроцедуры

Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена  = мМожноМенятьЦенуВДокументе;
	ЕстьСерия = Истина;

	

		Команда         = "ПодборВТабличнуюЧастьТовары";
		Валюта          = ВалютаДокумента;
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
		ИмяТабличнойЧасти = "Товары";

	
	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                , Склад);
	СтруктураПараметровПодбора.Вставить("ТипЦен"               , ТипЦен);
	//СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	//СтруктураПараметровПодбора.Вставить("Контрагент"           ,Контрагент);
	//СтруктураПараметровПодбора.Вставить("Сделка"               , Сделка);
	СтруктураПараметровПодбора.Вставить("Организация"          , Организация);

	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен"  , СпособЗаполненияЦен);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"            , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"      , Валюта);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);

КонецПроцедуры // ДействиеПодбор()

Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Если ТабличнаяЧасть = Товары Тогда
		СписокЗапросов.Добавить("РасходЦеныНоменклатуры", "По ценам номенклатуры");
		СписокЗапросов.Добавить("ОстаткиИКачествоНоменклатуры",           "По остаткам и качеству номенклатуры ");
		СписокЗапросов.Добавить("РасходОстаткиКачествоИЦеныНоменклатуры", "По остаткам, качеству и ценам номенклатуры");
		ИначеЕсли ТабличнаяЧасть = Работы Тогда
		СписокЗапросов.Добавить("РасходУслуги",    "По услугам предприятия");
		СписокЗапросов.Добавить("РасходЦеныУслуг", "По ценам и услугам предприятия");
	КонецЕсли;

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()
Процедура ОбновитьФормуПодбора(Реквизит)

	ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия, Качество;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);

	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("КоличествоМест"  , КоличествоМест);
	ЗначениеВыбора.Свойство("Цена"            , Цена);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"           , Серия);
	ЗначениеВыбора.Свойство("Качество"        , Качество);

	Если ТабличнаяЧасть = Товары   И Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	ИначеЕсли ТабличнаяЧасть = Работы И Не Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте товары не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	Если ТабличнаяЧасть = Товары Тогда
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
//		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	//	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	//	СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);
//		Если НЕ ЗначениеНеЗаполнено(Качество) Тогда
//			СтруктураОтбора.Вставить("Качество"         , Качество);
//		КонецЕсли;
		Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам Тогда
			СтруктураОтбора.Вставить("Цена", Цена);
		КонецЕсли;
	Иначе
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;
	
	СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда

			СуммаСтрокиДоИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			//Расчет скидок
			Если РассчитыватьАвтоматическиеСкидки() Тогда
				СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
				Разница = СуммаСтрокиПослеИзменения - СуммаСтрокиДоИзменения;

				мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + Разница;
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
				СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
				СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		//		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		//		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
				СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
				РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
			Иначе // Рассчитать реквизиты табличной части.
				РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		//		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

//			СтрокаТабличнойЧасти.Склад = Склад;

	ИначеЕсли ТабличнаяЧасть = Работы Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		//	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;
		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

//			ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
//			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
//			СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;
//			Если НЕ ЗначениеНеЗаполнено(Качество) Тогда
//				СтрокаТабличнойЧасти.Качество          = Качество;
//			КонецЕсли;

			// Заполняем реквизиты табличной части.
		//	ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Пересчитаем цену в валюту документа.
			Цена = ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);
            
			//СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			//												 СпособЗаполненияЦен,
			//												 ТипЦен.ЦенаВключаетНДС,
			//												 УчитыватьНДС,
			//												 СуммаВключаетНДС,
			//												 ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			СтрокаТабличнойЧасти.Цена =Цена;
			// Рассчитываем реквизиты табличной части.
//			СтрокаТабличнойЧасти.Склад = Склад;
//			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			//Расчет скидок
			Если РассчитыватьАвтоматическиеСкидки() Тогда
				СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

				мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения;
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
				СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
				СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		//		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		//		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
				СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
				РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
			Иначе // Рассчитать реквизиты табличной части.
				РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		//		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

			//Если ЗначениеНеЗаполнено(Качество) Тогда
			//	ЗаполнитьКачествоНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			//КонецЕсли;

		ИначеЕсли ТабличнаяЧасть = Работы Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			// Заполняем реквизиты табличной части.
			ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			//Если ПроверитьУслугаОблагаетсяЕНВД(СтрокаТабличнойЧасти.Номенклатура, Организация, Дата,
			//								   мОрганизацияЯвляетсяПлательщикомЕНВД) Тогда
			//	СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			//Иначе
			//	ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			//КонецЕсли;

			// Пересчитаем цену в валюту документа.
			Цена = ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);
            СтрокаТабличнойЧасти.Цена =Цена;
			//СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			//												 СпособЗаполненияЦен,
			//												 ТипЦен.ЦенаВключаетНДС,
			//												 УчитыватьНДС,
			//												 СуммаВключаетНДС,
			//												 ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		//	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;

	КонецЕсли;

	ТабличнаяЧастьИмя = Метаданные.НайтиПоТипу(ТипЗнч(ТабличнаяЧасть)).Имя;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	// Вставить содержимое обработчика.


	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);
		
		//ИначеЕсли Команда = "ЗаполнениеТабличныхЧастей" Тогда

		//	Если ЗначениеВыбора.ЗаполнятьТовары Тогда
		//		ОбработкаЗаполнения(Товары, ЗначениеВыбора.Товары);
		//	КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

Процедура ТоварыКоличествоПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
    Если РассчитыватьАвтоматическиеСкидки() Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

Процедура ТоварыНоменклатураПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

		мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения - СуммаСтроки;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;	

КонецПроцедуры

Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполнение цены зависит от розничности операции.
	ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 

	

КонецПроцедуры

Процедура ДисконтнаяКартаПриИзменении(Элемент)
	Если Элемент<> ЭтаФорма Тогда // вызов инициирован сменой дисконтной карты
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
			СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
			СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
			СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
			РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
			РассчитатьСкидкиАвтоРабот();
	КонецЕсли;
		// Вставить содержимое обработчика.
	//ЭлементыФормы.Всего.Значение=ФорматСумм(ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары")+ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Работы"));
	//ЭлементыФормы.НадписьВсего.Значение="Всего,"+СокрЛП(Строка(Константы.ВалютаУправленческогоУчета.Получить()))+":";
	ЭлементыФормы.тАвтомобильИнформация.Значение=?(ЗначениенеЗаполнено(Автомобиль),"",СокрЛП(Автомобиль.Модель.Наименование)+"; VIN"+СокрЛП(Автомобиль.VIN)+"; гос. №"+СокрЛП(Автомобиль.ГосНомер));
	//ЭлементыФормы.тДатаНачала.Значение="Дата начала: "+Строка(ДатаНачала);
	ЭлементыФормы.тДатаОкончания.Значение=?(ЗначениеНеЗаполнено (ДатаОкончания),"","Дата окончания: "+Строка(ДатаОкончания));
	
	Если не ЗначениеНеЗаполнено(ДисконтнаяКарта) Тогда
	Если ДисконтнаяКарта.СтатусДисконтнойКарты = Перечисления.СтатусыДисконтнойКарты.Активна Тогда
			   Если ДисконтнаяКарта.ВидСкидки = Перечисления.ВидыСкидокИнформационныхКарт.Накопительная Тогда
			    Запрос = Новый Запрос;
				Запрос.Текст = "
				|ВЫБРАТЬ СтоимостьОборот КАК ВыбраннаяСумма
				|ИЗ РегистрНакопления.Продажи.Обороты(,,, ДисконтнаяКарта = &парамДисконтнаяКарта)
				|";
	
				Запрос.УстановитьПараметр("парамДисконтнаяКарта", ДисконтнаяКарта);
				Результат = Запрос.Выполнить();
				Выборка = Результат.Выбрать();
				
				Если Выборка.Следующий()
					И Выборка.ВыбраннаяСумма <> NULL Тогда
					врВыбраннаяСумма = Выборка.ВыбраннаяСумма;
				Иначе
					врВыбраннаяСумма = 0;
				КонецЕсли; 
				врСтрВыбраннаяСумма = ". Накоп. сумма:" + врВыбраннаяСумма + Константы.ВалютаУправленческогоУчета.Получить();
			Иначе
				врСтрВыбраннаяСумма = ". " + ДисконтнаяКарта.ПроцентСкидки + "%";
			КонецЕсли; 
		Иначе
			врСтрВыбраннаяСумма = ". " + ДисконтнаяКарта.СтатусДисконтнойКарты;
		КонецЕсли; 
	   
		ЭлементыФормы.ДисконтнаяКарта.Заголовок = "Дисконтная карта: " + ДисконтнаяКарта + врСтрВыбраннаяСумма;
		ЭлементыФормы.ДисконтнаяКарта.ЦветТекста = WebЦвета.Черный;
		ИначеЕсли Товары.Количество()=0 Тогда
		ЭлементыФормы.ДисконтнаяКарта.Заголовок = "Спросить дисконтную карту!";
		ЭлементыФормы.ДисконтнаяКарта.ЦветТекста = WebЦвета.Красный;
	КонецЕсли; 

КонецПроцедуры

Процедура ТоварыПроцентСкидкиНаценкиПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	 СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

Процедура РаботыРаботаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
СтрокаТабличнойЧасти=	ЭлементыФормы.Работы.ТекущиеДанные;
СтрокаТабличнойЧасти.Коэффициент=ПолучитьНормочасыАвтоработы(СтрокаТабличнойЧасти.Работа,мКлассАвтомобиля);
СтрокаТабличнойЧасти.Цена=ПолучитьЦенуЗаЧасАвтоработы(мКлассАвтомобиля);	
ПересчитатьСтоимостьРаботСкидкиНаценки(ЭлементыФормы.Работы.ТекущиеДанные);
КонецПроцедуры

Процедура АвтомобильПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	мКлассАвтомобиля=Автомобиль.Модель.КлассАвтомобиля;
	КонецПроцедуры

Процедура ПересчитатьСтоимостьРаботСкидкиНаценки(СтрокаТабличнойЧасти)
	
    СтрокаТабличнойЧасти.Сумма=СтрокаТабличнойЧасти.Количество*СтрокаТабличнойЧасти.Коэффициент* СтрокаТабличнойЧасти.Цена;
	
	СуммаСтроки = СтрокаТабличнойЧасти.Сумма;
	СуммаСкидки = 0;

	Если СуммаСтроки>0 Тогда
		СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок=ПолучитьПроцентАвтоматическихСкидокАвтоРабот(ДисконтнаяКарта,ДокументОбъект);
		
		СтрокаТабличнойЧасти.СуммаСкидки = СуммаСтроки * (СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок + СтрокаТабличнойЧасти.ПроцентСкидкиНаценки) / 100;
		
		Если СтрокаТабличнойЧасти.СуммаСкидки>0 Тогда
			СтрокаТабличнойЧасти.Сумма = СуммаСтроки - СтрокаТабличнойЧасти.СуммаСкидки;
			СтрокаТабличнойЧасти.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте;
	//		СтрокаТабличнойЧасти.ЗначениеПоДисконтнойКарте   = ДисконтнаяКарта;
			СтрокаТабличнойЧасти.ЗначениеУсловияАвтоматическойСкидки=?(ДисконтнаяКарта.ТипКарты=Перечисления.ВидыСкидокИнформационныхКарт.Фиксированная,Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте,Перечисления.УсловияСкидкиНаценки.ПоВыбраннойДисконтнойКартойСумме);
		КонецЕсли;
    КонецЕсли;
	
КонецПроцедуры	

Процедура РаботыКоличествоПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ПересчитатьСтоимостьРаботСкидкиНаценки(ЭлементыФормы.Работы.ТекущиеДанные);
КонецПроцедуры

Процедура РаботыЦенаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ПересчитатьСтоимостьРаботСкидкиНаценки(ЭлементыФормы.Работы.ТекущиеДанные);
КонецПроцедуры

Процедура РассчитатьСкидкиАвтоРабот()
	Для каждого  СтрокаТабличнойЧасти Из Работы Цикл
		ПересчитатьСтоимостьРаботСкидкиНаценки(СтрокаТабличнойЧасти);
	КонецЦикла;
	СуммаДокумента=Работы.Итог("Сумма") ;
КонецПроцедуры

Процедура РаботыПередНачаломДобавления(Элемент, Отказ, Копирование)
	// Вставить содержимое обработчика.
	Если (Состояние = Перечисления.СостояниеЗаказНаряда.Закрыт) Тогда 
		Предупреждение("Невозможно, так как Заказ наряд уже закрыт !!!!");
		Отказ = Истина;
	КонецЕсли;
	Если Автомобиль.Пустая() Тогда
		Сообщить("Сначала требуется выбрать автомобиль для расчета норм и цен работ",СтатусСообщения.Важное);
		Отказ=Истина;
	КонецЕсли;	
КонецПроцедуры

Процедура РаботыПроцентСкидкиНаценкиПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ПересчитатьСтоимостьРаботСкидкиНаценки(ЭлементыФормы.Работы.ТекущиеДанные);
КонецПроцедуры

Процедура АвтомобильНачалоВыбора(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
   Если Работы.Количество()>0 Тогда
		Если КодВозвратаДиалога.Да=Вопрос("Работы уже введены и расчитаны. Для перерасчета норм и цен требуется очистка табличной части работ. Продолжить?",РежимДиалогаВопрос.ДаНет) Тогда
			Работы.Очистить();
			Исполнители.Очистить();
		Иначе
			СтандартнаяОбработка=Ложь;
		КонецЕсли;	
	КонецЕсли; 

КонецПроцедуры

Процедура АвтомобильОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура КоманднаяПанельРаботыПодборРабот(Кнопка)
	// Вставить содержимое обработчика.


		ФормаПодбораРабот=Справочники.Автоработы.ПолучитьФорму("ФормаПодбора",ЭтаФорма);
		ФормаПодбораРабот.ТабличноеПоле="Работы";
		Если ЗначениеНеЗаполнено(Автомобиль) Тогда
			ФормаПодбораРабот.КлассАвтомобиля=Неопределено;
			ФормаПодбораРабот.НачальноеЗначениеВыбора=Неопределено;
		Иначе
			ФормаПодбораРабот.КлассАвтомобиля=Автомобиль.Модель.КлассАвтомобиля;
//			ФормаПодбораРабот.НачальноеЗначениеВыбора=Автомобиль.Модель.Автоработы;
		КонецЕсли; 
		ФормаПодбораРабот.Открыть();




КонецПроцедуры

Процедура РаботыПриАктивизацииСтроки(Элемент)
	// Вставить содержимое обработчика.
	// Отображает исполнителей 
	Если не ЗначениеНеЗаполнено(Элемент.ТекущиеДанные) Тогда
   ЭлементыФормы.Исполнители.ОтборСтрок.Работа.ВидСравнения = ВидСравнения.Равно;
   ЭлементыФормы.Исполнители.ОтборСтрок.Работа.Значение = Элемент.ТекущиеДанные.Работа ;
   ЭлементыФормы.Исполнители.ОтборСтрок.Работа.Использование = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура РаботыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры


Процедура ИсполнителиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	// Вставить содержимое обработчика.
	Если не ОтменаРедактирования и (Элемент.ТекущиеДанные.Процент>100 или Элемент.ТекущиеДанные.Процент<=0) Тогда
		Предупреждение("Процент выработки исполнителем для данной работы должен быть от 0 до 100.");
		Отказ=Истина;
		Возврат;
	КонецЕсли;	
	Если (Работы.Количество()=0) Тогда 
		Предупреждение("Не введено ни одной работы.");
		Возврат;
	КонецЕсли;
	
	Если не ОтменаРедактирования и ЗначениеНеЗаполнено (Элемент.ТекущиеДанные.Исполнитель) Тогда
		Предупреждение("Для данной работы исполнитель должен быть выбран.");
		Отказ=Истина;
		Возврат;
	КонецЕсли;	
	
	Если  не ОтменаРедактирования Тогда
	найдСтроки=Исполнители.НайтиСтроки(Новый Структура("Работа,Исполнитель",ЭлементыФормы.Работы.ТекущиеДанные.Работа,Элемент.ТекущиеДанные.Исполнитель));
	Если найдСтроки.Количество()>1 Тогда
		Предупреждение("Для данной работы выработка исполнителя "+Строка(Элемент.ТекущиеДанные.Исполнитель) +" уже задана.");
		Отказ=Истина;
		Возврат;
	КонецЕсли;	
	КонецЕсли;
	Элемент.ТекущиеДанные.Работа=ЭлементыФормы.Работы.ТекущиеДанные.Работа;
	
КонецПроцедуры

Процедура РаботыПередУдалением(Элемент, Отказ)
	
	Если (Состояние = Перечисления.СостояниеЗаказНаряда.Закрыт) Тогда 
		Отказ = Истина;
	КонецЕсли;
	
	сч=0;
	Пока сч < Исполнители.Количество() Цикл
		Если Исполнители[сч].Работа=Элемент.ТекущиеДанные.Работа Тогда
			Исполнители.Удалить(сч);
		Иначе 
			сч=сч+1;	
		КонецЕсли;	
	КонецЦикла;

КонецПроцедуры

Процедура АвтомобильОчистка(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	  Если Работы.Количество()>0 Тогда
		Если КодВозвратаДиалога.Да=Вопрос("Работы уже введены и расчитаны. Для перерасчета норм и цен требуется очистка табличной части работ. Продолжить?",РежимДиалогаВопрос.ДаНет) Тогда
			Работы.Очистить();
			Исполнители.Очистить();
		Иначе
			СтандартнаяОбработка=Ложь;
		КонецЕсли;	
	КонецЕсли; 

КонецПроцедуры

Процедура КоманднаяПанельИсполнителиОдинаковыеДляВсехРабот(Кнопка)
	// Вставить содержимое обработчика. 
	Перем ТЗ;
	Если не ЗначениеНеЗаполнено(ЭлементыФормы.Работы.ТекущиеДанные.Работа) Тогда	
	ТЗ=Исполнители.Выгрузить().Скопировать();
	найдСтроки=ТЗ.НайтиСтроки(Новый Структура("Работа",ЭлементыФормы.Работы.ТекущиеДанные.Работа));

	Исполнители.Очистить();
	Для Каждого стрРабота Из Работы Цикл
		Для каждого стр из  найдстроки Цикл
			стрИсп=Исполнители.Добавить();
			стрИсп.Работа=стрРабота.Работа;
			стрИсп.Процент=стр.Процент;
			стрИсп.Исполнитель=стр.Исполнитель;
		КонецЦикла;	
	КонецЦикла;	
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанельИсполнителиУстановитьДляВсех(Кнопка)
	// Вставить содержимое обработчика.
	Если не ЗначениеНеЗаполнено(ЭлементыФормы.Работы.ТекущиеДанные.Работа) Тогда
	РаспределитьРаботыПоИсполнителям(Исполнители,ЭлементыФормы.Работы.ТекущиеДанные.Работа);
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанельИсполнителиРаспределитьПроцентУчастия(Кнопка)
	// Вставить содержимое обработчика.
	Если не ЗначениеНеЗаполнено(ЭлементыФормы.Работы.ТекущиеДанные.Работа) Тогда
	УстановитьРавныеПроценты(Исполнители,ЭлементыФормы.Работы.ТекущиеДанные.Работа);
	КонецЕсли;
КонецПроцедуры

Процедура ПослеЗаписи()
	// Вставить содержимое обработчика.
	УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);
	ДействияФормыДатаЗаказНаряда(Неопределено);
	Обновить();
	
КонецПроцедуры

//Процедура ОбновлениеОтображения()
//		
//КонецПроцедуры

Процедура ТоварыЦенаПриИзменении(Элемент)
		СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
    Если РассчитыватьАвтоматическиеСкидки() Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

Процедура ВнешнееСобытие(Источник, Событие, Данные)
	Если (Состояние = Перечисления.СостояниеЗаказНаряда.Закрыт) Тогда 
		Предупреждение("Документ уже закрыт. Нельзя менять карту");
		Возврат;
	КонецЕсли;
	// Вставить содержимое обработчика.
	Если глТорговоеОборудование <> Неопределено Тогда
		СтруктураПараметров = Новый Структура();

		Если Событие = "MagneticStripeCardValue" Тогда
          // если дисконт
			Если Товары.Количество()>0 Тогда							
				Предупреждение("    В документе существуют продажи!
					       |     Невозможно установить скидки!
						   | Чтобы произвести продажу по данной карте
						   |необходимо сделать возврат на текущий документ
						   |и начать продажу с регистрации дисконтной карты", 3);
				Возврат;					
			КонецЕсли;	
			СтруктураПараметров.Вставить("Команда"              , "");
			СтруктураПараметров.Вставить("Пользователь"         , Неопределено);
			глТорговоеОборудование.ОбработатьВнешнееСобытиеОтРидераДляФормы(ЭтаФорма, ЭтотОбъект, СтруктураПараметров, Данные);

		КонецЕсли;

	КонецЕсли;	
	Пользователь = Неопределено;
		Команда = "";
		СтруктураПараметров.Свойство("Пользователь", Пользователь);
		СтруктураПараметров.Свойство("Команда", Команда);
		
		Если Пользователь <> Неопределено Тогда

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ПарольКассираФР", ПланыВидовХарактеристик.НастройкиПользователей.ПарольКассираФискальногоРегистратора);
			Запрос.УстановитьПараметр("ПарольАдминистратораФР", ПланыВидовХарактеристик.НастройкиПользователей.ПарольАдминистратораФискальногоРегистратора);
			Запрос.УстановитьПараметр("ПустойПароль", "");

			Запрос.Текст ="
			|ВЫБРАТЬ
			|	НастройкиПользователей.Пользователь,
			|	НастройкиПользователей.Настройка,
			|	НастройкиПользователей.Значение
			|ИЗ
			|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
			|		ПО НастройкиПользователей.Пользователь = Пользователи.Ссылка
			|
			|ГДЕ
			|	   (НастройкиПользователей.Настройка = &ПарольКассираФР И НастройкиПользователей.Значение <> &ПустойПароль
			|	ИЛИ НастройкиПользователей.Настройка = &ПарольАдминистратораФР И НастройкиПользователей.Значение <> &ПустойПароль)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Пользователь
			|АВТОУПОРЯДОЧИВАНИЕ
			|";

			ТаблицаПользователей = Запрос.Выполнить().Выгрузить();

			ФормаАвторизации = ПолучитьФорму("ФормаАвторизации");
			ФормаАвторизации.мТаблицаПользователей = ТаблицаПользователей;
			ФормаАвторизации.Пользователь = Пользователь;
			ВидПользователя = ФормаАвторизации.ВыполнитьАвторизацию( Истина);

			Если ВидПользователя <> Неопределено Тогда

				ЭлементыФормы.НадписьТекущийПользователь.Заголовок = ВидПользователя + глТекущийПользователь;
				//ПроверитьДоступностьсервисныхФункций(глТекущийПользователь);

			КонецЕсли;

		//Расчет скидок
		ИначеЕсли Команда = "РассчитатьДисконтныеСкидки" Тогда
			
			//ПриИзмененииДисконтнойКарты();
			  ДисконтнаяКартаПриИзменении(ЭлементыФормы.ДисконтнаяКарта);

		КонецЕсли;

КонецПроцедуры

Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	// Вставить содержимое обработчика.
	СсылкаНаОбъект=Ссылка;
	ТабДок= Новый ТабличныйДокумент;
	Макет=ПолучитьМакет("ЗаявкаНаРемонт");
	ОбластьЗаголовок=Макет.ПолучитьОбласть("Заголовок");
	ОбластьИтог=Макет.ПолучитьОбласть("ИтогоСумма");
    ОбластьПодвал=Макет.ПолучитьОбласть("Подвал");
	
	ОбластьЗаголовок.Параметры.ОрганизацияНаименование=Организация.Наименование;      
	ЮрАдресОрганизации   = авПолучитьДанныеКонтактнойИнформации(Организация, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	ОбластьЗаголовок.Параметры.ОрганизацияАдрес=?(ЮрАдресОрганизации.Количество() = 0, "", ЮрАдресОрганизации[0].Представление) ;
	ТелефонОрганизации   = авПолучитьДанныеКонтактнойИнформации(Организация, Перечисления.ТипыКонтактнойИнформации.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	ОбластьЗаголовок.Параметры.ОрганизацияТелефоны=?(ТелефонОрганизации.Количество() = 0, "", ТелефонОрганизации[0].Представление) ;
    ОбластьЗаголовок.Параметры.ОрганизацияРасчетныйСчет=Строка (Организация.ОсновнойБанковскийСчет.НомерСчета) +" в "+Организация.ОсновнойБанковскийСчет.Банк.Наименование;
	
	
	ОбластьЗаголовок.Параметры.Номер = СсылкаНаОбъект.Номер;
	ОбластьЗаголовок.Параметры.Дата = Формат(СсылкаНаОбъект.Дата,"ДЛФ=Д");
	ОбластьЗаголовок.Параметры.ЗаказчикПолноеНаименование = Заказчик.НаименованиеПолное;
	ОбластьЗаголовок.Параметры.КонтрагентПолноеНаименование = Заказчик.НаименованиеПолное;
	ОбластьЗаголовок.Параметры.КонтрагентИНН=СокрЛП(Заказчик.ИНН);
	//ОбластьЗаголовок.Параметры.КонтрагентПочтовыйАдрес=авПолучитьДанныеКонтактнойИнформации();
	
	 
	ЮрАдрес   = авПолучитьДанныеКонтактнойИнформации(Заказчик, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	ОбластьЗаголовок.Параметры.КонтрагентПочтовыйАдрес=?(ЮрАдрес.Количество() = 0, "", ЮрАдрес[0].Представление) ;
	//Секция.Параметры.ЮрАдрес   = ?(ЮрАдрес.Количество() = 0, "", ЮрАдрес[0].Представление);
	//Секция.Параметры.ФактАдрес = ?(ФактАдрес.Количество() = 0, "", ФактАдрес[0].Представление);
	Телефон   = авПолучитьДанныеКонтактнойИнформации(Заказчик, Перечисления.ТипыКонтактнойИнформации.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	ОбластьЗаголовок.Параметры.КонтрагентТелефоны=?(Телефон.Количество() = 0, "", Телефон[0].Представление);
	//Секция.Параметры.Телефон   = ?(Телефон.Количество() = 0, "", Телефон[0].Представление);

	
	ОбластьЗаголовок.Параметры.АвтомобильМодель =Автомобиль.Модель.Наименование;
	ОбластьЗаголовок.Параметры.АвтомобильГодВыпуска =Формат(Автомобиль.ГодВыпуска,"ДФ=гггг");
	ОбластьЗаголовок.Параметры.АвтомобильГосНомер=СокрЛП(Автомобиль.ГосНомер);
	ОбластьЗаголовок.Параметры.АвтомобильКод=СокрЛП(Автомобиль.VIN);
	ОбластьЗаголовок.Параметры.АвтомобильНомерДвигателя=СокрЛП(Автомобиль.НомерДвигателя);
	ОбластьЗаголовок.Параметры.АвтомобильНомерШасси=СокрЛП(Автомобиль.НомерШасси);
	ОбластьЗаголовок.Параметры.АвтомобильНомерКузова=СокрЛП(Автомобиль.НомерКузова);
	ОбластьЗаголовок.Параметры.АвтомобильЦвет=СокрЛП(Автомобиль.Цвет);
	ОбластьЗаголовок.Параметры.АвтомобильПробег=Строка(Автомобиль.Пробег);
	
	
	Если Работы.Итог("СуммаСкидки")=0 Тогда
	ОбластьШапка=Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрока=Макет.ПолучитьОбласть("Строка");
	Иначе
	ОбластьШапка=Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой");
	ОбластьСтрока=Макет.ПолучитьОбласть("СтрокаСоСкидкой");
	КонецЕсли;
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапка);
	НомерСтроки=0;
	Для каждого строкаРабота из Работы Цикл
		НомерСтроки=НомерСтроки+1;
		ОбластьСтрока.Параметры.Работа=СокрЛП(строкаРабота.Работа.Наименование);
		ОбластьСтрока.Параметры.Количество=строкаРабота.Количество;
		ОбластьСтрока.Параметры.Единица="шт.";
		ОбластьСтрока.Параметры.Цена=строкаРабота.Цена;
		ОбластьСтрока.Параметры.Сумма=строкаРабота.Сумма;
		ОбластьСтрока.Параметры.КоличествоНЧ=строкаРабота.Коэффициент;
		Если Работы.Итог("СуммаСкидки")>0 Тогда
			ОбластьСтрока.Параметры.Скидка=строкаРабота.СуммаСкидки;
			ОбластьСтрока.Параметры.СуммаБезСкидки=строкаРабота.Сумма+строкаРабота.СуммаСкидки;
		КонецЕсли;	
		//выбИсполнители=Исполнители.НайтиСтроки( Новый Структура ("Работа",строкаРабота.Работа));
		//Если не ЗначениеНеЗаполнено(выбисполнители) Тогда
		//ОбластьСтрока.Параметры.Исполнитель=?(выбИсполнители.Количество() = 0, "", СокрЛП(Строка(выбИсполнители[0].Исполнитель))) ;
	    // Иначе
		//ОбластьСтрока.Параметры.Исполнитель="";
		//КонецЕсли;
		ОбластьСтрока.Параметры.НомерСтроки=НомерСтроки;
		ТабДок.Вывести(ОбластьСтрока);
	КонецЦикла;	
	ОбластьПодвал.Параметры.МастерСтрока 		= Мастер.Наименование; 
	ОбластьПодвал.Параметры.ЗаказчикСтрока 		= Заказчик.НаименованиеПолное;
	ОбластьПодвал.Параметры.Комментарий 		= Комментарий;
	
	ОбластьИтог.Параметры.Сумма=Работы.Итог("Сумма");
	ТабДок.Вывести(ОбластьИтог);
	ТабДок.Вывести(ОбластьПодвал);
	ТабДок.ОтображатьЗаголовки=Ложь;
	ТабДок.ОтображатьСетку=Ложь;
	ТабДок.Показать();
	//ОбластьЗаголовок.Параметры.АвтомобильТехпаспорт=СокрЛП(Автомобиль.Т);	
КонецПроцедуры

Процедура СостояниеПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Если Состояние=Перечисления.СостояниеЗаказНаряда.Закрыт Тогда
		Ответ = Вопрос("Вы уверены, что хотите закрыть заказ-наряд ?",РежимДиалогаВопрос.ДаНет);
		Если (Ответ = КодВозвратаДиалога.Да) Тогда
			ДатаОкончания=ТекущаяДата();
		Иначе 
			Состояние = Перечисления.СостояниеЗаказНаряда.ВРаботе;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если СуммаДокумента<>Работы.Итог("Сумма") Тогда
		СуммаДокумента=Работы.Итог("Сумма"); 
	КонецЕсли;	

КонецПроцедуры

Процедура СостояниеНачалоВыбора(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка= не Состояние=Перечисления.СостояниеЗаказНаряда.Закрыт;
КонецПроцедуры

Процедура тСчетНаОплатуНажатие(Элемент)
	// Вставить содержимое обработчика.
	СчетНаОплату=Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
	СчетНаОплату.Заполнить(Ссылка);
	СчетНаОплатуФорма=СчетНаОплату.ПолучитьФорму(,ЭтаФорма);
	СчетНаОплатуФорма.Открыть();
КонецПроцедуры

Процедура ЗаказчикПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Если (Заказчик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо) Тогда 
		ДисконтнаяКарта = Справочники.ИнформационныеКарты.ПустаяСсылка();
		ДисконтнаяКартаПриИзменении(Элемент);
	КонецЕсли;
	Контрагент=Заказчик;
	ПриИзмененииЗначенияКонтрагента(ДокументОбъект);
КонецПроцедуры

Процедура КонтрагентПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ПриИзмененииЗначенияКонтрагента(ДокументОбъект);
КонецПроцедуры

Процедура ОсновныеДействияФормыСоздатьЧекККМ(Кнопка)
	// Вставить содержимое обработчика.
	Если (Заказчик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо) Тогда
		Возврат;
	КонецЕсли;	

	Если (Проведен = Ложь) Тогда 
		Предупреждение("Документ сначала надо провести.");
		Возврат;
	КонецЕсли;
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("ЗаказНаряд",Ссылка);
	Запрос.Текст = "
	|Выбрать Ссылка Из Документ.ЧекККМ
	|Где ЗаказНаряд = &ЗаказНаряд И Ссылка.Проведен = Истина
	|Объединить все 
	|Выбрать Ссылка из Документ.ОтчетОРозничныхПродажах.Товары Где
	|ДокументОснование=&ЗаказНаряд";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не(Выборка.Следующий()) Тогда
		ЧекККМНов = Документы.ЧекККМ.СоздатьДокумент();
	Иначе 	
		ЧекККМНов = Выборка.Ссылка;
		Если (ЧекККМНов.ПометкаУдаления = Истина) Тогда
			Предупреждение("ЧекККМ помечен на удаление !!!");
		КонецЕсли;
		Если (ТипЗнч(ЧекККМНов) = ТипЗнч(Документы.ОтчетОРозничныхПродажах.ПустаяСсылка())) Тогда 
			Возврат;
		КонецЕсли;
		ЧекККМНов = Выборка.ссылка.ПолучитьОбъект();
	КонецЕсли; 
		
	Если ((Состояние = Перечисления.СостояниеЗаказНаряда.Закрыт) и (Проведен)) Тогда 
		ЧекККМНов.Автомобиль = Автомобиль;
		ЧекККМНов.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа;
		ЧекККМНов.Дата = ТекущаяДата();
		ЧекККМНов.ДисконтнаяКарта = ДисконтнаяКарта;
		ЧекККМНов.ЗаказНаряд = Ссылка;
		ЧекККМНов.КассаККМ = КассаККМ;
		ЧекККМНов.Склад = ?(Склад=Справочники.Склады.ПустаяСсылка(),ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнойСклад"),Склад);
		ЧекККМНов.Ответственный = глТекущийПользователь;
		ЧекККМНов.Подразделение = Подразделение;
		ЧекККМНов.Услуги = Истина;
		ЧекККМНов.Товары.Очистить();
			
		Для Каждого Стр из Работы Цикл
			СтрЧека = ЧекККМНов.Товары.Добавить();
			СтрЧека.Номенклатура = Стр.Работа.Номенклатура;
			СтрЧека.ЕдиницаИзмерения = Стр.Работа.Номенклатура.ЕдиницаХраненияОстатков;			
			СтрЧека.Количество = Стр.Количество * Стр.Коэффициент;
			СтрЧека.Коэффициент = 1;
			СтрЧека.ПроцентАвтоматическихСкидок = Стр.ПроцентАвтоматическихСкидок;
			СтрЧека.ПроцентСкидкиНаценки = Стр.ПроцентСкидкиНаценки;
			СтрЧека.Сумма = Стр.Сумма;
			СтрЧека.Цена = Стр.Цена;
		КонецЦикла;
		
		ЧекККМНов.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
	Если (Состояние = Перечисления.СостояниеЗаказНаряда.Закрыт) Тогда
		ЭлементыФормы.Состояние.Доступность = Ложь;
		ЭлементыФормы.Автомобиль.Доступность = Ложь;
		ЭлементыФормы.ДисконтнаяКарта.Доступность = Ложь;
	КонецЕсли;

	ПечатьАкта();
КонецПроцедуры

Процедура ОсновныеДействияФормыСчетНаОплату(Кнопка)
	
	Если (Заказчик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо) Тогда
		Возврат;
	КонецЕсли;	
	
	Если (Проведен = Ложь) Тогда 
		Предупреждение("Документ сначала надо провести.");
		Возврат;
	КонецЕсли;
	
	Если (ДисконтнаяКарта<>Справочники.ИнформационныеКарты.ПустаяСсылка()) Тогда
		Предупреждение("Нельзя делать реализацию по дисконтной карте.");
		Возврат;
	КонецЕсли;
		
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("ЗаказНаряд",Ссылка);
	Запрос.Текст = "
	|Выбрать Ссылка из Документ.СчетНаОплатуПокупателю Где
	|ЗаказНаряд=&ЗаказНаряд";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если (Выборка.Следующий()) Тогда
		
		ФормаСчета = Выборка.Ссылка.ПолучитьФорму("ФормаДокумента"); 
		
	Иначе 
	
		ФормаСчета = Документы.СчетНаОплатуПокупателю.ПолучитьФормуНовогоДокумента(, ЭтотОбъект);
		
		ФормаСчета.Организация = Константы.ОрганизацияДляСчетов.Получить();
		
		//Орг = ФормаСчета.Организация;
		
		//СпрДоговоров = Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию("Основной договор продажи",,,Орг.Ссылка);
		//
		//ФормаСчета.ДоговорКонтрагент = СпрДоговоров.Ссылка;
		
		СпрКассы = Константы.КассаДляБезналичныхСредств.Получить();
		
		ФормаСчета.СтруктурнаяЕдиница 	= СпрКассы.Ссылка;
		ФормаСчета.изОбработки 			= Ложь;
		ФормаСчета.ЗаказНаряд 			= Ссылка;
		ФормаСчета.Автомобиль 			= Автомобиль;
		
		Для Каждого Стр из Работы Цикл
			
			СтрУслугиСчета 				= ФормаСчета.Услуги.Добавить();
			СтрУслугиСчета.Количество 	= Стр.Количество*Стр.Коэффициент;
			СтрУслугиСчета.Номенклатура	= Стр.Работа.Номенклатура;
			СтрУслугиСчета.Содержание 	= Стр.Работа.Номенклатура.Наименование;
			СтрУслугиСчета.Цена			= Стр.Цена;
			СтрУслугиСчета.Сумма		= Стр.Сумма;
			СтрУслугиСчета.СтавкаНДС	= Перечисления.СтавкиНДС.БезНДС;
			СтрУслугиСчета.СуммаНДС		= 0;
			СтрУслугиСчета.ПроцентСкидкиНаценки = Стр.ПроцентСкидкиНаценки + Стр.ПроцентАвтоматическихСкидок;
			
		КонецЦикла;
	КонецЕсли;	
	
	ФормаСчета.ОткрытьМодально();
	Товары.Очистить();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыЧекВозврата(Кнопка)
	
	ФормаВыбора = ПолучитьФорму("ФормаВыбора");
	ФормаВыбора.РежимВыбора = Истина;

	ФормаВыбора.ДокументСписок.Отбор.КассаККМ.Значение = КассаККМ;
	ФормаВыбора.ДокументСписок.Отбор.КассаККМ.Использование = Истина;
	ФормаВыбора.ДокументСписок.Отбор.КассаККМ.ВидСравнения = ВидСравнения.Равно;
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.КассаККМ.Доступность = Ложь;

	ФормаВыбора.ДокументСписок.Отбор.Проведен.Значение = Истина;
	ФормаВыбора.ДокументСписок.Отбор.Проведен.Использование = Истина;
	ФормаВыбора.ДокументСписок.Отбор.Проведен.ВидСравнения = ВидСравнения.Равно;
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Проведен.Доступность = Ложь;

	ФормаВыбора.ДокументСписок.Отбор.ВидОперации.Значение = Перечисления.ВидыОперацийЧекККМ.Продажа;
	ФормаВыбора.ДокументСписок.Отбор.ВидОперации.Использование = Истина;
	ФормаВыбора.ДокументСписок.Отбор.ВидОперации.ВидСравнения = ВидСравнения.Равно;
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ВидОперации.Доступность = Ложь;
	
	ФормаВыбора.ДокументСписок.Отбор.Дата.Значение = НачалоДня(ТекущаяДата());
	ФормаВыбора.ДокументСписок.Отбор.Дата.Использование = Истина;
	ФормаВыбора.ДокументСписок.Отбор.Дата.ВидСравнения = ВидСравнения.БольшеИлиРавно;
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Дата.Доступность = Ложь;
	
	
	НовыйЧек = Документы.ЧекККМ.СоздатьДокумент();
	ЧекККМ = ФормаВыбора.ОткрытьМодально();
	
	Если НЕ ЗначениеНеЗаполнено(ЧекККМ) Тогда
		НовыйЧек.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
		НовыйЧек.Товары.Загрузить(ЧекККМ.Товары.Выгрузить());
		Для каждого СтрокаТовара Из НовыйЧек.Товары Цикл
			СтрокаТовара.РегистрацияПродажи = Ложь;
		КонецЦикла;
		НовыйЧек.ДисконтнаяКарта = ЧекККМ.ДисконтнаяКарта;
	    НовыйЧек.ЧекККМ = ЧекККМ;
		НовыйЧек.Услуги = ЧекККМ.Услуги;
		НовыйЧек.Автомобиль = ЧекККМ.Автомобиль;
		НовыйЧек.Подразделение = ЧекККМ.Подразделение;
		НовыйЧек.ЗаказНаряд = ЧекККМ.ЗаказНаряд;
		ФормаНовогоЧека = НовыйЧек.ПолучитьФорму("ФормаДокумента");
		ФормаНовогоЧека.ОткрытьМодально();		
		УстановитьПометкуУдаления(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыВозврат(Кнопка)
	
	Если Не(Проведен) Тогда 
		Возврат;
	КонецЕсли;
	// Если есть реализация, то надо смотреть возвратный РКО именно в ней.
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("ЗаказНаряд",Ссылка);
	Запрос.Текст = "
	|Выбрать Ссылка Из Документ.РеализацияТоваровУслуг
	|Где (ЗаказНаряд = &ЗаказНаряд) И (Ссылка.Проведен = Истина)";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
	    Реализация = Выборка.Ссылка;
		Запрос1 = новый Запрос;
		Запрос1.УстановитьПараметр("Документ",Реализация);
		Запрос1.Текст = "
		|Выбрать Ссылка Из Документ.РасходныйКассовыйОрдер
		|Где (ДокументОснование = &Документ) И (Ссылка.Проведен = Истина)";		
		Выборка = Запрос1.Выполнить().Выбрать();
		Если (Выборка.Следующий()) Тогда
			// Есть уже возврат в реализации. Откроем его.
			РКО = Выборка.Ссылка;
		Иначе 
			ФормаРеализации = Реализация.ПолучитьФорму("ФормаДокумента");
			ФормаРеализации.Открыть();
		КонецЕсли;
		Возврат;
	КонецЕсли;	
		
	// Посмотрим в чеках
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("ЗаказНаряд",Ссылка);
	Запрос.Текст = "
	|Выбрать Ссылка Из Документ.ЧекККМ
	|Где (ЗаказНаряд = &ЗаказНаряд) И (Ссылка.Проведен = Истина)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Предупреждение("Смена по данному заказ-наряду еще не закрыта. Сделайте чек возврата.");
		Возврат;
	КонецЕсли;
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("ЗаказНаряд",Ссылка);
	Запрос.Текст = "
	|Выбрать Ссылка Из Документ.РасходныйКассовыйОрдер
	|Где ДокументОснование = &ЗаказНаряд И Ссылка.Проведен = Истина";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не(Выборка.Следующий()) Тогда
		РКОНов = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
	Иначе 	
		РКОНов = Выборка.ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	РКОНОВ.ОбработкаЗаполнения(Ссылка);
	Форма = РКОНОв.ПолучитьФорму("ФормаДокумента");
	Форма.Открыть();
	//ЗаписатьВФорме(РежимЗаписиДокумента.ОтменаПроведения);
	УстановитьПометкуУдаления(Истина);
КонецПроцедуры

Процедура ОсновныеДействияФормыРеализация(Кнопка)
	// Вставить содержимое обработчика.
	Если (ССылка = Документы.ЗаказНаряд.ПустаяСсылка()) Тогда
		Возврат;
	КонецЕсли;
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("ЗаказНаряд",Ссылка);
	Запрос.Текст = "
	|Выбрать Ссылка из Документ.РеализацияТоваровУслуг Где
	|ЗаказНаряд=&ЗаказНаряд";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если (Выборка.Следующий()) Тогда
		Форма = Выборка.Ссылка.ПолучитьФорму("ФормаДокумента");	
		Форма.ОткрытьМодально();
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОсновныеДействияФормыАкт(Кнопка)
	
	ПечатьАкта();
	
КонецПроцедуры

Процедура ПечатьАкта()
	// Печать Акта о выполненных услугах
   	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("ЗаказНаряд",Ссылка);
	Запрос.Текст = "
	|Выбрать Ссылка Из Документ.ЧекККМ
	|Где ЗаказНаряд = &ЗаказНаряд
	|Объединить все 
	|Выбрать Ссылка из Документ.ОтчетОРозничныхПродажах.Товары Где
	|ДокументОснование=&ЗаказНаряд";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если (Выборка.Следующий()) Тогда 
		ЧекККМ = Выборка.Ссылка;
	Иначе 
		Предупреждение("Сначала создайте Чек ККМ.");
		Возврат;
	КонецЕсли;
	
	Если (СуммаДокумента<>ЧекККМ.СуммаДокумента) Тогда
		Предупреждение("Сумма чека не совпадает с суммой документа.");
		Возврат;
	КонецЕсли;		
		
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Заказчик КАК Получатель,
	|	Организация КАК Поставщик,
	|	Организация,
	|	СуммаДокумента,
	| 	ДисконтнаяКарта
	|ИЗ
	|	Документ.ЗаказНаряд
	|
	|ГДЕ
	|	Ссылка = &ТекущийДокумент";
	Шапка = ЗапросШапка.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросУслуги.Текст =
	"ВЫБРАТЬ
	|	Работа,
	//|	Работа.Номенклатура.НаименованиеПолное КАК Товар,
	|	Работа.НаименованиеПолное КАК Товар,
	|	Количество,
	|	Коэффициент,
	//|	ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|	Цена,
	|	Сумма,
	|	ПроцентСкидкиНаценки КАК Скидка,
	| 	ПроцентАвтоматическихСкидок     КАК СкидкаАвтоматическая	
	|ИЗ
	|	Документ.ЗаказНаряд.Работы КАК ЧекККМ
	|
	|ГДЕ
	|	Ссылка = &ТекущийДокумент
	|
	|";
	
	ТаблицаУслуги = ЗапросУслуги.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Акт";
	Макет       = ПолучитьМакет("Акт");

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = "Акт об оказанных услугах" + " № " + ПолучитьНомерНаПечатьЛок(ЧекККМ)+ " от " + Формат(ЧекККМ.Дата, "ДФ='дд ММММ гггг'");
	ТабДокумент.Вывести(ОбластьМакета);

	Организация = Организация;
	Валюта		= ВалютаДокумента;
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОЮрФизЛице(Организация, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
	ОбластьМакета.Параметры.Поставщик = Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
    ОбластьМакета.Параметры.ПредставлениеПолучателя = ОписаниеОрганизации(СведенияОЮрФизЛице(Заказчик, Шапка.Дата), "ПолноеНаименование,");
	ТабДокумент.Вывести(ОбластьМакета);

	ЕстьСкидки = ТаблицаУслуги.Итог("Скидка") <> 0 или ТаблицаУслуги.Итог("СкидкаАвтоматическая");
	Попытка 
		ПроцентРучнойСкидки = ТаблицаУслуги.Получить(0).Скидка;
		ПроцентАвтоматическойСкидки = ТаблицаУслуги.Получить(0).СкидкаАвтоматическая;
	Исключение
		;
	КонецПопытки;
	// Вывести табличную часть
	Если ЕстьСкидки  Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой");
		ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаСоСкидкой");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьМакета);
	НомерСтроки = 0;

	Для Каждого СтрокаТабличнойЧасти Из ТаблицаУслуги Цикл	

		НомерСтроки = НомерСтроки + 1;
		          
		ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
		ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
		ОбластьСтроки.Параметры.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Работа.Номенклатура.БазоваяЕдиницаИзмерения;
		ОбластьСтроки.Параметры.Сумма = СтрокаТабличнойЧасти.Сумма;
		ОбластьСтроки.Параметры.НормоЧасов = СтрокаТабличнойЧасти.Коэффициент;
		//ОбластьСтроки.Параметры.ПроцентСкидкиНаценки = СтрокаТабличнойЧасти.ПроцентСкидкиНаценки;
		//ОбластьСтроки.Параметры.СкидкаАвтоматическая = СтрокаТабличнойЧасти.ПроцентСкидкиНаценки;
		//ОбластьСтроки.Параметры.Количество = СтрокаТабличнойЧасти.Количество;
		//ОбластьСтроки.Параметры.Цена = СтрокаТабличнойЧасти.Цена;
		//ОбластьСтроки.Параметры.Сумма = СтрокаТабличнойЧасти.Сумма;
		//ОбластьСтроки.Параметры.ПроцентСкидкиНаценки = СтрокаТабличнойЧасти.ПроцентСкидкиНаценки;

		Если ЕстьСкидки Тогда
			Скидка 			= СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Коэффициент - СтрокаТабличнойЧасти.Сумма;
			ОбластьСтроки.Параметры.Сумма = СтрокаТабличнойЧасти.Сумма;
			ОбластьСтроки.Параметры.Скидка         = Скидка;
			ОбластьСтроки.Параметры.СуммаБезСкидки = СтрокаТабличнойЧасти.Сумма + Скидка;
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьСтроки);

	КонецЦикла;

	Если ТаблицаУслуги <> Неопределено Тогда

		Сумма    = ТаблицаУслуги.Итог("Сумма");
		
	Иначе

		Сумма    = 0;
		СуммаНДС = 0;

	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьМакета);
					   
	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		
	ОбластьМакета.Параметры.ВсегоНДС = "Без НДС";
	
	ТабДокумент.Вывести(ОбластьМакета);

	СуммаКПрописи = Сумма;
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего оказано услуг " + НомерСтроки
	                                      + ", на сумму " + ФорматСумм(СуммаКПрописи, Валюта);
	ОбластьМакета.Параметры.СуммаПрописью  = СформироватьСуммуПрописью(СуммаКПрописи, Валюта);
	ТабДокумент.Вывести(ОбластьМакета);

	ДисконтнаяКарта = Шапка.ДисконтнаяКарта;
	
	Если (ТаблицаУслуги.Итог("Скидка") и ТаблицаУслуги.Итог("СкидкаАвтоматическая")) Тогда 
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаИнформацииОДисконтнойКарте");
		ОбластьМакета.Параметры.ДисконтнаяКарта = "Скидки по дисконтной карте - " + ДисконтнаяКарта + "=" + ПроцентАвтоматическойСкидки + "%." + " Ручная скидка = " + ПроцентРучнойСкидки + " %.";
		ТабДокумент.Вывести(ОбластьМакета);	
	ИначеЕсли (ТаблицаУслуги.Итог("Скидка")) тогда 
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаИнформацииОДисконтнойКарте");
		ОбластьМакета.Параметры.ДисконтнаяКарта = "Ручная скидка = " + ПроцентРучнойСкидки + "%.";
		ТабДокумент.Вывести(ОбластьМакета);			
	ИначеЕсли (ТаблицаУслуги.Итог("СкидкаАвтоматическая")) тогда 
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаИнформацииОДисконтнойКарте");
		ОбластьМакета.Параметры.ДисконтнаяКарта = "Скидки по дисконтной карте - " + ДисконтнаяКарта + "=" + ПроцентАвтоматическойСкидки + "%.";
		ТабДокумент.Вывести(ОбластьМакета);				
	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если (Автомобиль <> Неопределено) тогда 
		ОбластьМакета = Макет.ПолучитьОбласть("НомерИМаркаАвтомобиля");		
		ОбластьМакета.Параметры.МаркаАвтомобиля = СокрЛП(Автомобиль.Модель.Наименование)+"; VIN"+СокрЛП(Автомобиль.VIN);
		ОбластьМакета.Параметры.КлассАвтомобиля = СокрЛП(Автомобиль.Модель.КлассАвтомобиля);
		ОбластьМакета.Параметры.НомерАвтомобиля = СокрЛП(Автомобиль.ГосНомер);
		//ОбластьМакета.Параметры.МаркаАвтомобиля = ?(Автомобиль.Наименование<>"","Марка автомобиля: " + Автомобиль.Наименование,"");
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	ТабДокумент.Показать();
КонецПроцедуры

Процедура Кнопка1Нажатие(Элемент)

	Если (Состояние<>Перечисления.СостояниеЗаказНаряда.Закрыт) Тогда
		ДисконтнаяКарта = Справочники.ИнформационныеКарты.ПустаяСсылка();
		ДисконтнаяКартаПриИзменении(Элемент);
	Конецесли;
КонецПроцедуры

Функция ПолучитьНомерНаПечатьЛок(Документ) Экспорт

	Если Документ = Неопределено Тогда 
		Возврат 0;
	КонецЕсли;

	НомерД = СокрЛП(Документ.Номер);

	Если ЗначениеНеЗаполнено(ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяОрганизация")) Тогда
			Предупреждение("Для текущего пользователя """ + СокрЛП(глТекущийПользователь) 
						   + """ не задана основная организация."
						   + Символы.ПС + "Печать чека невозможна."); 
			Возврат ложь;	
	КонецЕсли; 
		
	Префикс = "";	
	Организация = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяОрганизация");
	Префикс = СокрЛП(Организация.Префикс);	

	// удаление префикса из номера документа
	Если Найти(НомерД, Префикс)=1 Тогда 
		НомерД = Сред(НомерД, СтрДлина(Префикс)+1);
	КонецЕсли;

	// так же, может остаться "минус" впереди
	Если Лев(НомерД, 1) = "-" Тогда
		НомерД = Сред(НомерД, 2);
	КонецЕсли;

	// удаление ведущих нулей
	Пока Лев(НомерД, 1)="0" Цикл
		НомерД=Сред(НомерД, 2);
	КонецЦикла;

	Возврат НомерД;

КонецФункции // ПолучитьНомерНаПечать()

Процедура РаботыРаботаНачалоВыбора(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура РаботыРаботаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура РаботыПередНачаломИзменения(Элемент, Отказ)
	
	Если (Состояние = Перечисления.СостояниеЗаказНаряда.Закрыт) Тогда 
		Предупреждение("Невозможно, так как Заказ наряд уже закрыт !!!!");
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ИсполнителиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	// Вставить содержимое обработчика.
	Элемент.ТекущиеДанные.Процент = 1;
КонецПроцедуры

/// Eugene_VK

Процедура ДействияФормыВвестиВремя(Кнопка)
	//дкДействияФормыВвестиВремя(ЭтаФорма,Кнопка);
КонецПроцедуры

//Ввод дат создания, начала и окончания заказ-наряда
Процедура ДействияФормыДатаЗаказНаряда(Кнопка)
	Если Кнопка<>Неопределено Тогда
		ФормаВводаДат=ПолучитьФорму("ФормаВводаДат",ЭтаФорма);
		Если Кнопка.Имя="ДатаСоздания" Тогда
			ФормаВводаДат.ТекущийЭлемент=ФормаВводаДат.ЭлементыФормы.ДатаСозданияДата;
		ИначеЕсли Кнопка.Имя="ДатаНачала" Тогда
			ФормаВводаДат.ТекущийЭлемент=ФормаВводаДат.ЭлементыФормы.ДатаНачалаДата;
		ИначеЕсли Кнопка.Имя="ДатаОкончания" Тогда
			ФормаВводаДат.ТекущийЭлемент=ФормаВводаДат.ЭлементыФормы.ДатаОкончанияДата;
		КонецЕсли;
		ФормаВводаДат.ОткрытьМодально();
	КонецЕсли; 
	//Отображение дат создания, начала и окончания заказ-наряда в меню
	//Отображение даты создания заказ-наряда в меню
	Если ЗначениеНеЗаполнено(ДатаСоздания) Тогда
		ЭлементыФормы.ДействияФормы.Кнопки.Время.Кнопки.ДатаСоздания.Текст="Дата создания не задана";
	Иначе
		ЭлементыФормы.ДействияФормы.Кнопки.Время.Кнопки.ДатаСоздания.Текст="Дата создания "+Формат(ДатаСоздания,"ДФ=dd.MM.yyyy чч:мм:сс");
	КонецЕсли; 
	//Отображение даты начала заказ-наряда в меню
	Если ЗначениеНеЗаполнено(ДатаНачала) Тогда
		ЭлементыФормы.ДействияФормы.Кнопки.Время.Кнопки.ДатаНачала.Текст="Дата начала не задана";
	Иначе
		ЭлементыФормы.ДействияФормы.Кнопки.Время.Кнопки.ДатаНачала.Текст="Дата начала "+Формат(ДатаНачала,"ДФ=dd.MM.yyyy чч:мм:сс");
	КонецЕсли; 
	//Отображение даты окончания заказ-наряда в меню
	Если ЗначениеНеЗаполнено(ДатаОкончания) Тогда
		ЭлементыФормы.ДействияФормы.Кнопки.Время.Кнопки.ДатаОкончания.Текст="Дата окончания не задана";
	Иначе
		ЭлементыФормы.ДействияФормы.Кнопки.Время.Кнопки.ДатаОкончания.Текст="Дата окончания "+Формат(ДатаОкончания,"ДФ=dd.MM.yyyy чч:мм:сс");
	КонецЕсли; 
КонецПроцедуры

Процедура ОсновныеДействияФормыЗаказНаряд(Кнопка)
	// Вставить содержимое обработчика.
	СсылкаНаОбъект=Ссылка;
	ТабДок= Новый ТабличныйДокумент;
	Макет=ПолучитьМакет("ЗаказНаряд");
	ОбластьЗаголовок=Макет.ПолучитьОбласть("Заголовок");
	ОбластьИтог=Макет.ПолучитьОбласть("ИтогоСумма");
    ОбластьПодвал=Макет.ПолучитьОбласть("Подвал");
	
	ОбластьЗаголовок.Параметры.ОрганизацияНаименование=Организация.Наименование;      
	ЮрАдресОрганизации   = авПолучитьДанныеКонтактнойИнформации(Организация, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	ОбластьЗаголовок.Параметры.ОрганизацияАдрес=?(ЮрАдресОрганизации.Количество() = 0, "", ЮрАдресОрганизации[0].Представление) ;
	ТелефонОрганизации   = авПолучитьДанныеКонтактнойИнформации(Организация, Перечисления.ТипыКонтактнойИнформации.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	ОбластьЗаголовок.Параметры.ОрганизацияТелефоны=?(ТелефонОрганизации.Количество() = 0, "", ТелефонОрганизации[0].Представление) ;
    ОбластьЗаголовок.Параметры.ОрганизацияРасчетныйСчет=Строка (Организация.ОсновнойБанковскийСчет.НомерСчета) +" в "+Организация.ОсновнойБанковскийСчет.Банк.Наименование;
	
	
	ОбластьЗаголовок.Параметры.Номер = СсылкаНаОбъект.Номер;
	ОбластьЗаголовок.Параметры.Дата = Формат(СсылкаНаОбъект.Дата,"ДЛФ=Д");
	ОбластьЗаголовок.Параметры.ЗаказчикПолноеНаименование = Заказчик.НаименованиеПолное;
	ОбластьЗаголовок.Параметры.КонтрагентПолноеНаименование = Заказчик.НаименованиеПолное;
	ОбластьЗаголовок.Параметры.КонтрагентИНН=СокрЛП(Заказчик.ИНН);
	//ОбластьЗаголовок.Параметры.КонтрагентПочтовыйАдрес=авПолучитьДанныеКонтактнойИнформации();
	
	 
	ЮрАдрес   = авПолучитьДанныеКонтактнойИнформации(Заказчик, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	ОбластьЗаголовок.Параметры.КонтрагентПочтовыйАдрес=?(ЮрАдрес.Количество() = 0, "", ЮрАдрес[0].Представление) ;
	//Секция.Параметры.ЮрАдрес   = ?(ЮрАдрес.Количество() = 0, "", ЮрАдрес[0].Представление);
	//Секция.Параметры.ФактАдрес = ?(ФактАдрес.Количество() = 0, "", ФактАдрес[0].Представление);
	Телефон   = авПолучитьДанныеКонтактнойИнформации(Заказчик, Перечисления.ТипыКонтактнойИнформации.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	ОбластьЗаголовок.Параметры.КонтрагентТелефоны=?(Телефон.Количество() = 0, "", Телефон[0].Представление);
	//Секция.Параметры.Телефон   = ?(Телефон.Количество() = 0, "", Телефон[0].Представление);

	
	ОбластьЗаголовок.Параметры.АвтомобильМодель =Автомобиль.Модель.Наименование;
	ОбластьЗаголовок.Параметры.АвтомобильГодВыпуска =Формат(Автомобиль.ГодВыпуска,"ДФ=гггг");
	ОбластьЗаголовок.Параметры.АвтомобильГосНомер=СокрЛП(Автомобиль.ГосНомер);
	ОбластьЗаголовок.Параметры.АвтомобильКод=СокрЛП(Автомобиль.VIN);
	ОбластьЗаголовок.Параметры.АвтомобильНомерДвигателя=СокрЛП(Автомобиль.НомерДвигателя);
	ОбластьЗаголовок.Параметры.АвтомобильНомерШасси=СокрЛП(Автомобиль.НомерШасси);
	ОбластьЗаголовок.Параметры.АвтомобильНомерКузова=СокрЛП(Автомобиль.НомерКузова);
	ОбластьЗаголовок.Параметры.АвтомобильЦвет=СокрЛП(Автомобиль.Цвет);
	ОбластьЗаголовок.Параметры.АвтомобильПробег=Строка(Автомобиль.Пробег);
	
	
	Если Работы.Итог("СуммаСкидки")=0 Тогда
	ОбластьШапка=Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрока=Макет.ПолучитьОбласть("Строка");
	Иначе
	ОбластьШапка=Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой");
	ОбластьСтрока=Макет.ПолучитьОбласть("СтрокаСоСкидкой");
	КонецЕсли;
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапка);
	НомерСтроки=0;
	Для каждого строкаРабота из Работы Цикл
		НомерСтроки=НомерСтроки+1;
		ОбластьСтрока.Параметры.Работа=СокрЛП(строкаРабота.Работа.Наименование);
		ОбластьСтрока.Параметры.Количество=строкаРабота.Количество;
		ОбластьСтрока.Параметры.Единица="шт.";
		ОбластьСтрока.Параметры.Цена=строкаРабота.Цена;
		ОбластьСтрока.Параметры.Сумма=строкаРабота.Сумма;
		ОбластьСтрока.Параметры.КоличествоНЧ=строкаРабота.Коэффициент;
		Если Работы.Итог("СуммаСкидки")>0 Тогда
			ОбластьСтрока.Параметры.Скидка=строкаРабота.СуммаСкидки;
			ОбластьСтрока.Параметры.СуммаБезСкидки=строкаРабота.Сумма+строкаРабота.СуммаСкидки;
		КонецЕсли;	
		//выбИсполнители=Исполнители.НайтиСтроки( Новый Структура ("Работа",строкаРабота.Работа));
		//Если не ЗначениеНеЗаполнено(выбисполнители) Тогда
		//ОбластьСтрока.Параметры.Исполнитель=?(выбИсполнители.Количество() = 0, "", СокрЛП(Строка(выбИсполнители[0].Исполнитель))) ;
	    // Иначе
		//ОбластьСтрока.Параметры.Исполнитель="";
		//КонецЕсли;
		ОбластьСтрока.Параметры.НомерСтроки=НомерСтроки;
		ТабДок.Вывести(ОбластьСтрока);
	КонецЦикла;	
	ОбластьПодвал.Параметры.МастерСтрока 		= Мастер.Наименование; 
	ОбластьПодвал.Параметры.ЗаказчикСтрока 		= Заказчик.НаименованиеПолное;
	ОбластьПодвал.Параметры.Комментарий 		= Комментарий;
	
	ОбластьИтог.Параметры.Сумма=Работы.Итог("Сумма");
	ТабДок.Вывести(ОбластьИтог);
	ТабДок.Вывести(ОбластьПодвал);
	ТабДок.ОтображатьЗаголовки=Ложь;
	ТабДок.ОтображатьСетку=Ложь;
	ТабДок.Показать();
	//ОбластьЗаголовок.Параметры.АвтомобильТехпаспорт=СокрЛП(Автомобиль.Т);	
	
КонецПроцедуры

Процедура ИсполнителиПередНачаломИзменения(Элемент, Отказ)
	
	Если (Состояние = Перечисления.СостояниеЗаказНаряда.Закрыт) Тогда 
		Предупреждение("Невозможно, так как Заказ наряд уже закрыт !!!!");
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ОсновныеДействияФормыОстаткиНаСкладах(Кнопка)
	// Вставить содержимое обработчика.
	
	ФормаОстатков = ПолучитьФорму("");
	
	
КонецПроцедуры

Процедура КоманднаяПанельФормыДействиеВыбратьПечатнуюФормы(Кнопка)

Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = Кнопка.Текст;
		СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		СписокМакетов = ПолучитьСписокПечатныхФорм();
		СтрокаМакетаВСписке = СписокМакетов.НайтиПоЗначению(Кнопка.Имя);
		Если СтрокаМакетаВСписке <> Неопределено Тогда
			Печать(СтрокаМакетаВСписке.Значение);
			СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
			СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;			
			
		Иначе
			СсылкаВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Кнопка.Имя, "_", "-")));
			Печать(СсылкаВнешнейФормы);
			СтруктураМакета.Макет = СсылкаВнешнейФормы;
			СтруктураМакета.ПредставлениеМакета = Кнопка.Текст;
		КонецЕсли;		
		
		мПечатнаяФормаПоУмолчанию = СтруктураМакета.Макет;
		СохранитьТекущуюКнопкуПечати(ЭтотОбъект.Метаданные().Имя, СтруктураМакета);
	КонецЕсли;
КонецПроцедуры

Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)
	
КонецПроцедуры

Функция ПолучитьДокументПродажиПоЗаказНаряду()
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("НачДата",НачалоМесяца(Ссылка.Дата));
	Запрос.УстановитьПараметр("КонДата",КонецМесяца(Ссылка.Дата));
	Запрос.УстановитьПараметр("ЗаказНаряд",Ссылка);
		
	Запрос.Текст="Выбрать Ссылка Из Документ.ЧекККМ
	|Где ЗаказНаряд = &ЗаказНаряд И Ссылка.Проведен И Ссылка.Дата МЕЖДУ &НачДата И &КонДата
	|Объединить  
	|Выбрать Ссылка из Документ.ОтчетОРозничныхПродажах.Товары Где
	|ДокументОснование=&ЗаказНаряд И ДокументОснование.Проведен И ДокументОснование.Дата МЕЖДУ &НачДата И &КонДата";
	
	Результат=Запрос.Выполнить();
	Если   Результат.Пустой() Тогда
		Возврат ("");
	Иначе
		Выборка=Результат.Выбрать();
		Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	    КонецЕсли;
  	КонецЕсли;	
		Возврат ("");
		
	КонецФункции	

	Процедура тДокументПродажиНажатие(Элемент)
		ДокСсылка=ПолучитьДокументПродажиПоЗаказНаряду();
		Если  не ЗначениеНеЗаполнено(ДокСсылка) Тогда
			ДокСсылка.ПолучитьФорму().Открыть();  
		КонецЕсли;	
	КонецПроцедуры

	Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);		
		
	КонецПроцедуры

	Процедура РаботыПослеУдаления(Элемент)
		СуммаДокумента=Работы.Итог("Сумма");
	КонецПроцедуры

	Процедура РаботыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
		СуммаДокумента=Работы.Итог("Сумма");
	КонецПроцедуры


	