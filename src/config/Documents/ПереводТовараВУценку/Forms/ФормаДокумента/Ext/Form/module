
Процедура КоманднаяПанель1Заполнить(Кнопка)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Склад,
		|	ТоварыНаСкладахОстатки.Номенклатура,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток как количество
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			,
		|			Склад = &Склад
		|				И Номенклатура.ВидДефектаДляУценки = ЗНАЧЕНИЕ(Справочник.ВидыДефектовДляУценки.ПустаяСсылка)) КАК ТоварыНаСкладахОстатки";

	Запрос.УстановитьПараметр("Склад", ОбщийСклад);

	Результат = Запрос.Выполнить();
    Если не результат.Пустой() Тогда
     Товары.Загрузить(Результат.Выгрузить());
	конецЕсли;	
КонецПроцедуры

Процедура КоманднаяПанель1ПодобратьСоздатьКарточки(Кнопка)
	Для каждого строка из Товары Цикл
		Если не ЗначениеЗаполнено(строка.Дефект) Тогда
		Сообщить("В строке № "+строка.НомерСтроки+" не заполнен дефект. Подбор карточки уценки не требуется!");	
		иначе
			//поищем карточку
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.ВидДефектаДляУценки = &ВидДефектаДляУценки
			|	И ВЫРАЗИТЬ(Номенклатура.Артикул КАК СТРОКА(7)) ПОДОБНО &Артикул";
			
			Запрос.УстановитьПараметр("Артикул", Строка.Номенклатура.Код);
			Запрос.УстановитьПараметр("ВидДефектаДляУценки", строка.Дефект);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Если Выборка.Следующий() Тогда
				строка.НоменклатураУценка = Выборка.ссылка;
			иначе                                                                         
				//создадим новую карточку 
				НомУц =  Строка.номенклатура.Скопировать();
				НомУц.Наименование = НомУц.Наименование+ "*("+СокрЛП(строка.дефект)+")";
				НомУц.НаименованиеПолное = НомУц.НаименованиеПолное+ "*("+СокрЛП(строка.дефект)+")";
				НомУц.Артикул = Строка.Номенклатура.Код+"_"+строка.дефект.Код;
				НомУц.ВидДефектаДляУценки = строка.Дефект;
				
				Если НомУц.ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
					НомУц.Родитель = Справочники.Номенклатура.НайтиПоКоду("9198845");
				ИначеЕсли НомУц.ВидТовара = Перечисления.ВидыТоваров.Аксессуары Тогда
					НомУц.Родитель = Справочники.Номенклатура.НайтиПоКоду("9198847");
				//+++ 17.01.2018 по задаче № 38790
				ИначеЕсли НомУц.ВидТовара = Перечисления.ВидыТоваров.Шины 
							И ( Строка.Номенклатура.НоменклатурнаяГруппа = справочники.НоменклатурныеГруппы.НайтиПоКоду("00016") //Импорт зима
							ИЛИ Строка.Номенклатура.НоменклатурнаяГруппа = справочники.НоменклатурныеГруппы.НайтиПоКоду("00017") //Импорт лето
								) И СокрЛП(Строка.Номенклатура.Артикул)<>"" тогда 
					НомУц.Артикул = СокрЛП(Строка.Номенклатура.Артикул)+"_"+строка.дефект.Код;
				конецЕсли;
				
				
				
				НомУц.Записать();	
				// создадим единицу измерения
				
				ЕдИзм = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
				ЕдИзм.Владелец = НомУц.Ссылка;
				ЕдИзм.ЕдиницаПоКлассификатору = НомУц.БазоваяЕдиницаИзмерения;
				ЕдИзм.Наименование = НомУц.БазоваяЕдиницаИзмерения;
				ЕдИзм.Коэффициент =1;
				ЕдИзм.Записать();
				
				НомУц.ЕдиницаХраненияОстатков = едИзм.Ссылка;
				НомУц.ОбменДанными.Загрузка = истина;
				НомУц.Записать();
				
				// для аксов создадим ШК
				
				Если НомУц.ВидТовара = Перечисления.ВидыТоваров.Аксессуары Тогда
					ТекЗапись = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
					
					Штрихкод = ПолучитьНовыйКодДляШтрихКодаЯШТ(НомУц.Код); 
					
					ТекЗапись.Код          =  НомУц.Код;
					ТекЗапись.Владелец              =  НомУц.ссылка;
					ТекЗапись.ТипШтрихкода 			= ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
					ТекЗапись.ЕдиницаИзмерения      =  НомУц.ЕдиницаХраненияОстатков;
					ТекЗапись.Качество              = Справочники.Качество.Новый;
					ТекЗапись.Штрихкод     = ШтрихКод;
					попытка
						ТекЗапись.Записать();
					исключение
					КонецПопытки;	
				КонецЕсли;
				
				
				
				
				
				// скопируем свойства
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЗначенияСвойствОбъектов.Свойство,
				|	ЗначенияСвойствОбъектов.Значение
				|ИЗ
				|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
				|ГДЕ
				|	ЗначенияСвойствОбъектов.Объект = &Объект";
				
				Запрос.УстановитьПараметр("Объект", Строка.Номенклатура);
				
				Результат = Запрос.Выполнить();
				ВыборкаСвойств = Результат.Выбрать();
				
				Пока ВыборкаСвойств.Следующий() Цикл
					Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
					Запись.Объект = НомУц.ссылка;
					Запись.Свойство = ВыборкаСвойств.Свойство;
					Запись.Значение = ВыборкаСвойств.Значение;
					Запись.Записать();
				КонецЦикла;
				
				// скопируем комплектующие
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	КомплектующиеНоменклатуры.ХарактеристикаНоменклатуры,
				|	КомплектующиеНоменклатуры.Комплектующая,
				|	КомплектующиеНоменклатуры.ХарактеристикаКомплектующей,
				|	КомплектующиеНоменклатуры.Количество,
				|	КомплектующиеНоменклатуры.ЕдиницаИзмерения,
				|	КомплектующиеНоменклатуры.ДоляСтоимости
				|ИЗ
				|	РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
				|ГДЕ
				|	КомплектующиеНоменклатуры.Номенклатура = &Номенклатура";
				
				Запрос.УстановитьПараметр("Номенклатура", Строка.Номенклатура);
				
				Результат = Запрос.Выполнить();
				ВыборкаКомплектующих = Результат.Выбрать();
				
				Пока ВыборкаКомплектующих.Следующий() Цикл
					Запись = РегистрыСведений.КомплектующиеНоменклатуры.СоздатьМенеджерЗаписи();
					Запись.Номенклатура = НомУц.ссылка;
					Запись.ХарактеристикаНоменклатуры = ВыборкаКомплектующих.ХарактеристикаНоменклатуры;
					Запись.Комплектующая = ВыборкаКомплектующих.Комплектующая;
					Запись.ХарактеристикаКомплектующей = ВыборкаКомплектующих.ХарактеристикаКомплектующей;
					Запись.Количество = ВыборкаКомплектующих.Количество;
					Запись.ЕдиницаИзмерения = ВыборкаКомплектующих.ЕдиницаИзмерения;
					Запись.ДоляСтоимости = ВыборкаКомплектующих.ДоляСтоимости;
					Запись.Записать();
				КонецЦикла;
				строка.НоменклатураУценка =  НомУц.ссылка;
			конецЕсли;
		КонецЕсли;
	конецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанель1СоздатьДокументы(Кнопка)
	отказ = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПереводТовараВУценкуТовары.Склад,
	|	ПереводТовараВУценкуТовары.Номенклатура,
	|	СУММА(ПереводТовараВУценкуТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ДокТЧ
	|ИЗ
	|	Документ.ПереводТовараВУценку.Товары КАК ПереводТовараВУценкуТовары
	|ГДЕ
	|	ПереводТовараВУценкуТовары.Ссылка = &Ссылка
	|	И ПереводТовараВУценкуТовары.Комплектация = ЗНАЧЕНИЕ(Документ.Комплектацияноменклатуры.Пустаяссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПереводТовараВУценкуТовары.Склад,
	|	ПереводТовараВУценкуТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Склад,
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			&Дата,
	|			(Склад,Номенклатура) В
	|				(ВЫБРАТЬ
	|					ДокТЧ.Склад,
	|					ДокТЧ.Номенклатура
	|				ИЗ
	|					ДокТЧ КАК ДокТЧ)) КАК ТоварыНаСкладахОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокТЧ.Склад,
	|	ДокТЧ.Номенклатура,
	|	ЕСТЬNULL(Остатки.КоличествоОстаток, 0) - ДокТЧ.Количество КАК Разница
	|ИЗ
	|	ДокТЧ КАК ДокТЧ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|		ПО ДокТЧ.Склад = Остатки.Склад
	|			И ДокТЧ.Номенклатура = Остатки.Номенклатура
	|ГДЕ
	|	ЕСТЬNULL(Остатки.КоличествоОстаток, 0) - ДокТЧ.Количество < 0";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Если  не Результат.Пустой()  Тогда
		отказ = Истина;
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Сообщить("На складе "+Выборка.склад+ " не достаточно номенклатуры "+Выборка.номенклатура+" Код: "+Выборка.Номенклатура.Код+". Не хватает "+(-Выборка.Разница)+" шт.");
		КонецЦикла;
	конецЕсли;
	
	
	Если не отказ тогда	
		
		
		
		Для каждого строка из Товары Цикл
			Если Не ЗначениеЗаполнено(Строка.Комплектация) и ЗначениеЗаполнено(строка.НоменклатураУценка) Тогда
				Док = Документы.КомплектацияНоменклатуры.СоздатьДокумент();
		    	Док.ВидКомплектации = Перечисления.ВидыКомплектации.Сборка;
				Док.ВидОперации =  Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация;
				Док.Склад = строка.Склад;
				Док.Организация = Организация;
				Док.Подразделение = Подразделение;
				Док.ОтражатьВУправленческомУчете = Истина;
				Док.ОтражатьВБухгалтерскомУчете = Истина;
				Док.Дата = ТекущаяДата();        
				Док.Номенклатура = Строка.НоменклатураУценка;
				Док.Количество = Строка.Количество;
				Док.Коэффициент = 1;
				Док.ЕдиницаИзмерения = Строка.НоменклатураУценка.ЕдиницаХраненияОстатков;
				стр=Док.Комплектующие.Добавить();
				стр.Номенклатура = Строка.Номенклатура;
				стр.Количество = Строка.Количество;
				стр.ЕдиницаИзмерения = Строка.Номенклатура.ЕдиницаХраненияОстатков;
				
				стр.Коэффициент = 1; 
				Док.Записать(РежимЗаписиДокумента.Проведение);
				строка.Комплектация = Док.Ссылка;
			конецЕсли;
		конецЦикла;	
		Записать(РежимЗаписиДокумента.проведение);
		 // Для аксов установим цену по типу цен Базовая
		 

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПереводТовараВУценкуТовары.Номенклатура
		|ПОМЕСТИТЬ ВТ_Док
		|ИЗ
		|	Документ.ПереводТовараВУценку.Товары КАК ПереводТовараВУценкуТовары
		|ГДЕ
		|	ПереводТовараВУценкуТовары.Ссылка = &Ссылка
		|	И ПереводТовараВУценкуТовары.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Аксессуары)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Цена,
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура.Код КАК Код
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			,
		|			Номенклатура В
		|					(ВЫБРАТЬ
		|						ВТ_Док.Номенклатура
		|					ИЗ
		|						ВТ_Док КАК ВТ_Док)
		|				И ТипЦен = &Базовая) КАК ЦеныНоменклатурыСрезПоследних";

	Запрос.УстановитьПараметр("Базовая", Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00008"));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Результат = Запрос.Выполнить();
	Если не результат.пустой() тогда
		ТабЦен = Результат.Выгрузить();
		
		ДокЦена = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
		ДокЦена.Проверен = Истина;
		ТЦ =ДокЦена.ТипыЦен.Добавить();
		ТЦ.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00008");
		
		Для каждого стр из Товары Цикл
			стрн =ДокЦена.Товары.Добавить();
			стрн.ИндексСтрокиТаблицыЦен = ТЦ.НомерСтроки;
			стрн.ТипЦен = ТЦ.ТипЦен;
			стрн.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
			стрн.Номенклатура =стр.НоменклатураУценка;
			стрн.ЕдиницаИзмерения = стр.НоменклатураУценка.ЕдиницаХраненияОстатков;
			
			кодДляПоиска = Лев(стр.НоменклатураУценка.Артикул,7);
			ценаНом = ТабЦен.Найти(кодДляПоиска,"Код");
			если ценаНом <>неопределено тогда
				стрн.Цена = ЦенаНом.Цена;
			конецЕсли;	 
			
		конецЦикла;
		ДокЦена.Дата = Дата;
		ДокЦена.НеПроводитьНулевыеЗначения = Истина;
		ДокЦена.УстановитьНовыйНомер("УЦ");
		ДокЦена.Записать(РежимЗаписиДокумента.Проведение);
	конецЕсли;	 
		 
		 
		 
		 
		 
		 
		
		
		
		///оповещение 
		
		ТабНом = Товары.Выгрузить(,"НоменклатураУценка,Количество");
		ТабНом.колонки.добавить("Ответственный");
		Для каждого стр из ТабНом Цикл
			Если стр.НоменклатураУценка.видТовара <> Перечисления.ВидыТоваров.Диски Тогда
				Стр.Ответственный = стр.НоменклатураУценка.НоменклатурнаяГруппа.Ответственный;
			конецЕсли;
		КонецЦикла;
		Отв = ТабНом.скопировать();
		Отв.Свернуть("Ответственный");
		Для каждого ст из Отв Цикл
			Если ст.ответственный<> неопределено тогда
				задача = задачи.ЗадачиПользователя.СоздатьЗадачу();
				Задача.Исполнитель = ст.Ответственный;
				задача.Товары.Очистить();
				
				НужныеТовары =  ТабНом.найтиСтроки(новый структура("Ответственный",ст.Ответственный));
				
				Для Каждого Стр Из НужныеТовары Цикл
					ст = Задача.Товары.Добавить();
					ст.Номенклатура = Стр.НоменклатураУценка;
					ст.Количество = стр.Количество;
				КонецЦикла;		  
				
				задача.НаСогласование = Ложь;
				задача.Наименование = "Товар переведен в Уценку"; 
				задача.Описание = "Создан документ по переводу товара в уценку";
				задача.Инициатор   = глТекущийПользователь;
				задача.Объект   	 = ссылка;
				задача.Дата 		    = ТекущаяДата();
				задача.СрокИсполнения = КонецДня( ТекущаяДата() ); 	
				задача.Оповещение     = истина;
				задача.СрокОповещения = ТекущаяДата(); 
				Попытка
					задача.Записать();
					Сообщить(" + Сформирована ""Задача на оповещение"" для сотрудника: "+строка(задача.Исполнитель), СтатусСообщения.Информация );	
				исключение
					Сообщить(" - Не удалось сформировать электронную Задачу на оповещение для сотрудника: "+строка(задача.Исполнитель), СтатусСообщения.Внимание );	
				КонецПопытки;
			конецЕсли;
		конецЦикла;
	конецЕсли;	
	
	КонецПроцедуры

Процедура ПриОткрытии()
	Если ЭтоНовый() Тогда
		Если глТекущийПользователь.ОсновноеПодразделение.ОбособленноеПодразделение тогда
			Подразделение = глТекущийПользователь.ОсновноеПодразделение;
		Иначе // для всех пользователей Ярославля с любым подраздлением - будет Ярославль!
			Подразделение = Справочники.Подразделения.НайтиПоКоду("00005");
		КонецЕсли;	
		Организация   = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяОрганизация");
	конецЕсли;	
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		Элементыформы.НадписьКонтрагент.Заголовок = ДокументОснование.Контрагент.Наименование;
	конецЕсли;	
КонецПроцедуры

Процедура ДокументОснованиеНажатие(Элемент)
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		ДокументОснование.ПолучитьФорму().Открыть();
	конецЕсли;	
КонецПроцедуры

Процедура ТоварыДефектПриИзменении(Элемент)
	текСтрока= ЭлементыФормы.Товары.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекСтрока.НоменклатураУценка) Тогда
		Если текСтрока.дефект <> ТекСтрока.НоменклатураУценка.ВидДефектаДляУценки Тогда
			текСтрока.НоменклатураУценка= "";
		конецЕсли;	
	конецЕсли;	
КонецПроцедуры

Процедура ТоварыПриПолученииДанных(Элемент, ОформленияСтрок)
	Для каждого ОформлениеСтроки из ОформленияСтрок Цикл
		Данныестроки = ОформлениеСтроки.Данныестроки;
		ОформлениеСтроки.Ячейки.Код.ОтображатьТекст = истина;
		ОформлениеСтроки.Ячейки.Код.Текст = Данныестроки.Номенклатура.Код;
		ОформлениеСтроки.Ячейки.КодУценки.ОтображатьТекст = истина;
		ОформлениеСтроки.Ячейки.КодУценки.Текст = Данныестроки.НоменклатураУценка.Код;
		
		Если ЗначениеЗаполнено(ДанныеСтроки.Комплектация) Тогда
			ОформлениеСтроки.Ячейки.Дефект.ТолькоПросмотр=Истина;
			ОформлениеСтроки.Ячейки.Номенклатура.ТолькоПросмотр=Истина;
			//ОформлениеСтроки.Ячейки.НоменклатураУценка.ТолькоПросмотр=Истина;
			ОформлениеСтроки.Ячейки.Количество.ТолькоПросмотр=Истина;
			ОформлениеСтроки.Ячейки.Склад.ТолькоПросмотр=Истина;
			
		конецЕсли;
	конецЦикла;	
КонецПроцедуры

Процедура ТоварыНоменклатураПриИзменении(Элемент)
	ТекСтрока = Элементыформы.Товары.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекСтрока.Склад) Тогда
		ТекСтрока.Склад = Общийсклад;
	конецЕсли;	
КонецПроцедуры

Процедура КоманднаяПанель1ПечатьШК(Кнопка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ЭтоНовый() Тогда
	Ответственный  = глТекущийПользователь;	
    конецесли;
	Если Не ЗначениеЗаполнено(Организация) Тогда
	Сообщить("Не заполнена организация!");
	отказ = Истина;
	конецЕсли;
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
	Сообщить("Не заполнено подразделение!");
	отказ = Истина;
	конецЕсли;
КонецПроцедуры

Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока и не копирование Тогда
	ЭлементыФормы.Товары.ТекущиеДанные.склад = ОбщийСклад;	
    конецЕсли;
    Если копирование Тогда
	ЭлементыФормы.Товары.ТекущиеДанные.НоменклатураУценка = "";
	ЭлементыФормы.Товары.ТекущиеДанные.Комплектация = "";	
	конецесли;	
КонецПроцедуры


функция ПолучитьНовыйКодДляШтрихКодаЯШТ(Код)

Если стрДлина(Код)<7 тогда
	код1 = Формат(число(Код), "ЧЦ=7; ЧВН=");
иначе 
	код1 = код;
КонецЕсли;	
	
ШтрихКод = "05000"+ Код;
ШтрихКод = ШтрихКод + КонтрольныйСимволEAN(ШтрихКод, 13);

возврат ШтрихКод;

КонецФункции

Процедура ТоварыДефектНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	нФормаВыбора = Справочники.ВидыДефектовДляУценки.ПолучитьФормуВыбора(, Элемент);
	нФормаВыбора.Отбор.ВидТовара.ВидСравнения = ВидСравнения.Равно;
	нФормаВыбора.Отбор.ВидТовара.Значение = ЭлементыФормы.Товары.ТекущиеДанные.Номенклатура.ВидТовара;
	нФормаВыбора.Отбор.ВидТовара.Использование = Истина;
	нФормаВыбора.Открыть();

КонецПроцедуры


Процедура ТоварыПередУдалением(Элемент, Отказ)
	Если проведен Тогда
		Сообщить("Нельзя удалять строчки в проведенном документе! Сначала отмените проведение!");
		отказ = Истина;
	конецЕсли;	
КонецПроцедуры

