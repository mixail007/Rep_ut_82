////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мОбновлятьВладельца Экспорт;

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит текущее значение учетной политики, организация является плательщиком ЕНВД
Перем мОрганизацияЯвляетсяПлательщикомЕНВД;

// Хранит текущее значение организации для контроля учетной политики, организация является плательщиком ЕНВД
Перем мТекущаяОрганизация;

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов;
Перем мВидДоговора;
//Перем мОписаниеТипаНоменклатуры;

Перем мИспользоватьХарактеристики;
Перем мИспользоватьСерии;

Перем мКолонкиТовары;
Перем мКолонкиУслуги;
Перем мКнопкиЗаполненияТЧ;

Перем мФормаСоставНабора;
Перем мТекущаяСтрокаНабор;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура выполняет необходимые действия при изменении номенклатуры в ТЧ.
//
Процедура ПриИзмененииНоменклатурыТЧ(Элемент, ИмяТабличнойЧасти)

	СтрокаТабличнойЧасти = ЭлементыФормы[ИмяТабличнойЧасти].ТекущиеДанные;
	
	//Если ИмяТабличнойЧасти = "Товары" И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
	//	СтрокаТабличнойЧасти.Номенклатура = мОписаниеТипаНоменклатуры.ПривестиЗначение(СтрокаТабличнойЧасти.Номенклатура);
	//КонецЕсли;
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	//ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
	// Заполняем реквизиты табличной части.
	Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		Если ИмяТабличнойЧасти = "Товары" Тогда
			ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 
		Иначе
			ЗаполнитьЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 
		КонецЕсли;
	Иначе
		СтрокаТабличнойЧасти.Коэффициент = 1;
	КонецЕсли;

	// Рассчитать реквизиты табличной части.
	ПриИзмененииЦеныТЧ(Элемент, ИмяТабличнойЧасти);
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		
		ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
		// Ввод состава набора
		Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			//ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);
		КонецЕсли;
		
	Иначе
		
		ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииНоменклатурыТЧ()

// Процедура выполняет необходимые действия при изменении количества в ТЧ.
//
Процедура ПриИзмененииКоличестваТЧ(Элемент, ИмяТабличнойЧасти, СуффиксИмениРеквизита = "")
	
	СтрокаТабличнойЧасти = ЭлементыФормы[ИмяТабличнойЧасти].ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(СуффиксИмениРеквизита)
	 И ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда // изменен реквизит Количество
		РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;
	Если ЭлементыФормы[ИмяТабличнойЧасти].Колонки.Найти("ОтражатьТоварныйУчет") <> Неопределено Тогда
		СтрокаТабличнойЧасти.ОтражатьТоварныйУчет = Истина;
	КонецЕсли;
	
	// Рассчитать реквизиты табличной части.
	ПриИзмененииЦеныТЧ(Элемент, ИмяТабличнойЧасти, СуффиксИмениРеквизита);
	
КонецПроцедуры // ПриИзмененииКоличестваТЧ()

// Процедура выполняет необходимые действия при изменении цены в ТЧ.
//
Процедура ПриИзмененииЦеныТЧ(Элемент, ИмяТабличнойЧасти, СуффиксИмениРеквизита = "")
	
	СтрокаТабличнойЧасти = ЭлементыФормы[ИмяТабличнойЧасти].ТекущиеДанные;
	
	СтрокаТабличнойЧасти["Сумма" + СуффиксИмениРеквизита] = 
		СтрокаТабличнойЧасти["Цена" + СуффиксИмениРеквизита] * СтрокаТабличнойЧасти["Количество" + СуффиксИмениРеквизита];
	
	СтрокаТабличнойЧасти["СуммаНДС" + СуффиксИмениРеквизита] = 
		РассчитатьСуммуНДС(
			СтрокаТабличнойЧасти["Сумма" + СуффиксИмениРеквизита],
			УчитыватьНДС,
			СуммаВключаетНДС,
			ПолучитьСтавкуНДС(
				ПолучитьСтавкуНДССтрокиТабличнойЧасти(СтрокаТабличнойЧасти, СуффиксИмениРеквизита)));
    Если ЭлементыФормы[ИмяТабличнойЧасти].Колонки.Найти("ОтражатьТоварныйУчет") <> Неопределено Тогда
		СтрокаТабличнойЧасти.ОтражатьТоварныйУчет = Истина;
	КонецЕсли;	
КонецПроцедуры // ПриИзмененииЦеныТЧ()

// Процедура выполняет необходимые действия при изменении ставки НДС в ТЧ.
//
Процедура ПриИзмененииСтавкиНДСТЧ(Элемент, ИмяТабличнойЧасти, СуффиксИмениРеквизита = "")
	
	СтрокаТабличнойЧасти = ЭлементыФормы[ИмяТабличнойЧасти].ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(СуффиксИмениРеквизита) Тогда // изменет реквизит СтавкаНДС
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	Иначе
		СтрокаТабличнойЧасти.СуммаНДСДоИзменения =
			РассчитатьСуммуНДС(
				СтрокаТабличнойЧасти.СуммаДоИзменения,
				УчитыватьНДС,
				СуммаВключаетНДС,
				ПолучитьСтавкуНДС(
					СтрокаТабличнойЧасти.СтавкаНДСДоИзменения));
		СтрокаТабличнойЧасти.СуммаНДСДоКорректировки =
			РассчитатьСуммуНДС(
				СтрокаТабличнойЧасти.СуммаДоКорректировки,
				УчитыватьНДС,
				СуммаВключаетНДС,
				ПолучитьСтавкуНДС(
					СтрокаТабличнойЧасти.СтавкаНДСДоИзменения));
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииСтавкиНДСТЧ()

// Процедура выполняет необходимые действия при изменении суммы в ТЧ.
//
Процедура ПриИзмененииСуммыТЧ(Элемент, ИмяТабличнойЧасти, СуффиксИмениРеквизита = "")
	
	СтрокаТабличнойЧасти = ЭлементыФормы[ИмяТабличнойЧасти].ТекущиеДанные;
	
	СтрокаТабличнойЧасти["Цена" + СуффиксИмениРеквизита] =
		?(СтрокаТабличнойЧасти["Количество" + СуффиксИмениРеквизита] = 0,
			0,
			СтрокаТабличнойЧасти["Сумма" + СуффиксИмениРеквизита] /
			СтрокаТабличнойЧасти["Количество" + СуффиксИмениРеквизита]);
	
	СтрокаТабличнойЧасти["СуммаНДС" + СуффиксИмениРеквизита] = 
		РассчитатьСуммуНДС(
			СтрокаТабличнойЧасти["Сумма" + СуффиксИмениРеквизита],
			УчитыватьНДС,
			СуммаВключаетНДС,
			ПолучитьСтавкуНДС(
				ПолучитьСтавкуНДССтрокиТабличнойЧасти(СтрокаТабличнойЧасти, СуффиксИмениРеквизита)));
	
КонецПроцедуры // ПриИзмененииСуммыТЧ()

// Процедура выполняет необходимые действия перед началом редактирования строки ТЧ.
//
Процедура ПриНачалеРедактированияСтрокиТЧ(Элемент, ИмяТабличнойЧасти, НоваяСтрока)
	
	Если НЕ НоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти = ЭлементыФормы[ИмяТабличнойЧасти].ТекущиеДанные;
	
	СтрокаТабличнойЧасти.ЕстьВДокументеРеализации = Ложь;
	
	Если КорректироватьБУиНУ Тогда
		
		СтрокаТабличнойЧасти.КоличествоДоКорректировки 	= 0;
		СтрокаТабличнойЧасти.ЦенаДоКорректировки 		= 0;
		СтрокаТабличнойЧасти.СуммаДоКорректировки 		= 0;
		СтрокаТабличнойЧасти.СуммаНДСДоКорректировки 	= 0;
		
		СтрокаТабличнойЧасти.КоличествоДоИзменения 		= 0;
		СтрокаТабличнойЧасти.ЦенаДоИзменения 			= 0;
		СтрокаТабличнойЧасти.СуммаДоИзменения 			= 0;
		СтрокаТабличнойЧасти.СуммаНДСДоИзменения 		= 0;
		СтрокаТабличнойЧасти.СтавкаНДСДоИзменения 		= Перечисления.СтавкиНДС.ПустаяСсылка();
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя)
	 И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		
		//СтрокаТабличнойЧасти.Номенклатура = мОписаниеТипаНоменклатуры.ПривестиЗначение(СтрокаТабличнойЧасти.Номенклатура);
		СтрокаТабличнойЧасти.Качество 	  = ПолучитьКачествоНоменклатуры(СтрокаТабличнойЧасти.Качество);
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
			СтрокаТабличнойЧасти.Склад    = Склад;
		КонецЕсли;
		
		Элемент.ТекущиеДанные.КлючСтроки = ПолучитьНовыйКлючСтроки(ЭтотОбъект);
		Элемент.ТекущиеДанные.КлючСвязи  = 0;
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя)
			И СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва
		Тогда
			СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеРедактированияСтрокиТЧ()

// Процедура выполняет необходимые действия перед удалением строки ТЧ.
//
Процедура ПередУдалениемСтрокиТЧ(Элемент, ИмяТабличнойЧасти, Отказ)
	
	СтрокаТабличнойЧасти = ЭлементыФормы[ИмяТабличнойЧасти].ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕстьВДокументеРеализации И КорректироватьБУиНУ Тогда
		Отказ = Истина;
		Сообщить("Для удаления строки исходного документа необходимо очистить все суммовые и количественные показатели.");
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПередУдалениемСтрокиТЧ()

// Процедура выполняет необходимые действия при получении данных строк ТЧ.
//
Процедура ПриПолученииДанныхСтрокиТЧ(Элемент, ИмяТабличнойЧасти, ОформленияСтрок)
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		мКолонки = мКолонкиТовары;
	Иначе
		мКолонки = мКолонкиУслуги;
	КонецЕсли;
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки 	   = ОформлениеСтроки.ДанныеСтроки;
		ЭтоТипНоменклатура = ЗначениеЗаполнено(ДанныеСтроки.Номенклатура) И ТипЗнч(ДанныеСтроки.Номенклатура) = Тип("СправочникСсылка.Номенклатура");
		
		Если мКолонки.ВсегоДоКорректировки.Видимость Тогда
			ТекСумма = ДанныеСтроки.СуммаДоКорректировки + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДСДоКорректировки);
			ОформлениеСтроки.Ячейки.ВсегоДоКорректировки.УстановитьТекст(Формат(ТекСумма,"ЧЦ=15;ЧДЦ=2"));
		КонецЕсли;
		Если мКолонки.ВсегоДоИзменения.Видимость Тогда
			ТекСумма = ДанныеСтроки.СуммаДоИзменения + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДСДоИзменения);
			ОформлениеСтроки.Ячейки.ВсегоДоИзменения.УстановитьТекст(Формат(ТекСумма,"ЧЦ=15;ЧДЦ=2"));
		КонецЕсли;
		Если мКолонки.Всего.Видимость Тогда
			ТекСумма = ДанныеСтроки.Сумма + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС);
			ОформлениеСтроки.Ячейки.Всего.УстановитьТекст(Формат(ТекСумма,"ЧЦ=15;ЧДЦ=2"));
		КонецЕсли;
		
		УстановитьСвойствоЯчеекСтрокиТЧ(
			ОформлениеСтроки,
			"Номенклатура,Склад,ЗаказПокупателя,СпособСписанияОстаткаТоваров,Качество",
			"ТолькоПросмотр",
			ДанныеСтроки.ЕстьВДокументеРеализации И КорректироватьБУиНУ);
		УстановитьСвойствоЯчеекСтрокиТЧ(
			ОформлениеСтроки,
			"ХарактеристикаНоменклатуры,СерияНоменклатуры,Единица",
			"ТолькоПросмотр",
			ДанныеСтроки.ЕстьВДокументеРеализации И КорректироватьБУиНУ ИЛИ НЕ ЭтоТипНоменклатура);
		УстановитьСвойствоЯчеекСтрокиТЧ(
			ОформлениеСтроки,
			"СтавкаНДС",
			"ТолькоПросмотр",
			ДанныеСтроки.ЕстьВДокументеРеализации И КорректироватьБУиНУ И ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);
			
		УстановитьСвойствоЯчеекСтрокиТЧ(
			ОформлениеСтроки,
			"Количество",
			"ОтметкаНезаполненного",
			КорректироватьБУиНУ И НЕ ДанныеСтроки.ЕстьВДокументеРеализации И НЕ ЗначениеЗаполнено(ДанныеСтроки.Количество));
		УстановитьСвойствоЯчеекСтрокиТЧ(
			ОформлениеСтроки,
			"Сумма",
			"ОтметкаНезаполненного",
			КорректироватьБУиНУ И НЕ ДанныеСтроки.ЕстьВДокументеРеализации И НЕ ЗначениеЗаполнено(ДанныеСтроки.Сумма));
		
		Если ИмяТабличнойЧасти = "Товары" Тогда
			Если ЭтоТипНоменклатура Тогда
				ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
				ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеСтроки.СерияНоменклатуры) Тогда
				Если мКолонкиТовары.НомерГТД.Видимость Тогда
					ОформлениеСтроки.Ячейки.НомерГТД.УстановитьТекст(ДанныеСтроки.СерияНоменклатуры.НомерГТД);
				КонецЕсли;
				Если мКолонкиТовары.СтранаПроисхождения.Видимость Тогда
					ОформлениеСтроки.Ячейки.СтранаПроисхождения.УстановитьТекст(ДанныеСтроки.СерияНоменклатуры.СтранаПроисхождения);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПриПолученииДанныхСтрокиТЧ()

Процедура ПроверитьЗаполнениеСчетаФактуры()
		Возврат;
КонецПроцедуры

// Обновляет текущее значение учетной политики розничная торговля облагается ЕНВД.
//
Процедура ПриИзмененииОблагаетсяЕНВД(РежимВызова = "")

//	Если НЕ ЗначениеЗаполнено(РежимВызова) Тогда
//		мОрганизацияЯвляетсяПлательщикомЕНВД = УчетнаяПолитикаНалоговыйУчет("ОрганизацияЯвляетсяПлательщикомЕНВД", Организация, Дата);
//		мТекущаяОрганизация                  = Организация;
//	Иначе
//		РаботаСДиалогами.ПриИзмененииОрганизацияЯвляетсяПлательщикомЕНВД(ЭтотОбъект, РежимВызова, Услуги,
//														мОрганизацияЯвляетсяПлательщикомЕНВД, мТекущаяОрганизация);
//	КонецЕсли;

КонецПроцедуры // ПриИзмененииОблагаетсяЕНВД()

// Функция получает качество для подстановки значения качества при построчном вводе в табличную часть "Товары"
// или при подборе номенклатуры с помощью обработки "Подбор номенклатуры" или обработки ввод серийных номеров
// Рассчитывает качество только для вида операции "Брак", для других случаев качество по умолчанию новое.
//
// Параметры:
// Качество                  - СправочникСсылка.Качество, необязательный параметр, если параметр заполнен он же возвращается,
//                             ситуация возможна при варианте подбора через обработку подбор номенклатуры или обработку ввода серийных номеров.
//
// Возвращаемое значение:
// СправочникСсылка.Качество - для вида операции "Брак" возвращается качество отличное от Нового и если количество таких элементов равное одному,
//                             в остальных случаях пустая ссылка справочника качество.
//                           - для остальных видов операций качество по умолчанию новое.
//
Функция ПолучитьКачествоНоменклатуры(Качество = Неопределено)
	
	Если ЗначениеЗаполнено(Качество) Тогда
		Возврат Качество;
	КонецЕсли;
	
	Возврат Справочники.Качество.Новый;
	
КонецФункции // ПолучитьКачествоНоменклатуры()

Функция ПолучитьСтавкуНДССтрокиТабличнойЧасти(СтрокаТабличнойЧасти, СуффиксИмениРеквизита = "")
	
	Возврат
		?(ЗначениеЗаполнено(СуффиксИмениРеквизита)
			И ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки,
				СтрокаТабличнойЧасти.СтавкаНДСДоИзменения,
				СтрокаТабличнойЧасти.СтавкаНДС);
	
КонецФункции

// ПОДБОР В ТАБЛИЧНЫЕ ЧАСТИ

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)
	
	СписокЗапросов = Новый СписокЗначений;
	СписокЗапросов.Добавить(,"По справочнику");
	
	ПустойТипЦен = НЕ ЗначениеЗаполнено(ТипЦен);
	
	Если ТабличнаяЧасть = Товары Тогда
		
		Если НЕ ПустойТипЦен ИЛИ (ЗначениеЗаполнено(ДоговорКонтрагента) И ДоговорКонтрагента.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.СДополнительнымиУсловиями) Тогда
			СписокЗапросов.Добавить("РасходЦеныНоменклатуры", "По ценам номенклатуры");
		КонецЕсли;
		
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		
		СписокЗапросов.Добавить("РасходУслуги",        "По услугам предприятия");
		
		Если НЕ ПустойТипЦен ИЛИ (ЗначениеЗаполнено(ДоговорКонтрагента) И ДоговорКонтрагента.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.СДополнительнымиУсловиями) Тогда
			СписокЗапросов.Добавить("РасходЦеныУслуг", "По ценам и услугам предприятия");
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат СписокЗапросов;
	
КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	//РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	РазворачиватьДоКачества = Ложь;
	ЕстьЦена                = Истина;
	ЕстьСерия               = Истина;
	Валюта                  = ВалютаДокумента;
	СпособЗаполненияЦен     = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	Качество                = Справочники.Качество.Новый;
	ПодбиратьУслуги         = Ложь;
	СкрыватьХарактеристику  = Ложь;
	
	ЕстьСкладВТабличнойЧасти = ПолучитьСвойстваСкладаВТабличнойЧасти().ВидимостьСклада;
	Если ТабличнаяЧасть = Товары Тогда
		Команда                  = "ПодборВТабличнуюЧастьТовары";
		ИмяТабличнойЧасти        = "Товары";
		РазворачиватьДоКачества  = Ложь;
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		Команда                  = "ПодборВТабличнуюЧастьУслуги";
		ЕстьСерия                = Ложь;
		ИмяТабличнойЧасти        = "Услуги";
		Качество                 = Неопределено;
		ЕстьСкладВТабличнойЧасти = Ложь;
		ПодбиратьУслуги          = Истина;
		СкрыватьХарактеристику   = Истина;
	КонецЕсли;

	СписокВидовПодбора 		= СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ПредставлениеДок   		= Метаданные().Представление();
	ВременнаяДатаРасчетов 	= ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);

	СтруктураПараметровПодбора = Новый Структура;
	СтруктураПараметровПодбора.Вставить("Команда"                 , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора"      , СписокВидовПодбора);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"            , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("КачествоПоУмолчанию"     , ПолучитьКачествоНоменклатуры());
	СтруктураПараметровПодбора.Вставить("Склад"                   , Склад);
	СтруктураПараметровПодбора.Вставить("ТипЦен"                  , ТипЦен);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента"      , ДоговорКонтрагента);
	СтруктураПараметровПодбора.Вставить("Контрагент"              , Контрагент);
	СтруктураПараметровПодбора.Вставить("Сделка"                  , Сделка);
	СтруктураПараметровПодбора.Вставить("Организация"             , Организация);
	СтруктураПараметровПодбора.Вставить("Качество"                , Качество);
	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен"     , СпособЗаполненияЦен);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"                , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"               , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"         , Валюта);
	СтруктураПараметровПодбора.Вставить("РазворачиватьДоКачества" , РазворачиватьДоКачества);
	СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги"         , ПодбиратьУслуги);
	СтруктураПараметровПодбора.Вставить("СкрыватьХарактеристику"  , СкрыватьХарактеристику);
	СтруктураПараметровПодбора.Вставить("Заголовок"				  , "Подбор номенклатуры в документ " + ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");
	СтруктураПараметровПодбора.Вставить("УсловиеПродаж"           , УсловиеПродаж);
	СтруктураПараметровПодбора.Вставить("ЕстьСкладВТабличнойЧасти", ЕстьСкладВТабличнойЧасти);

	ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт
    
	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия, Качество;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);

	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("КоличествоМест"  , КоличествоМест);
	ЗначениеВыбора.Свойство("Цена"            , Цена);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"           , Серия);
	ЗначениеВыбора.Свойство("Качество"        , Качество);

	Если (ТабличнаяЧасть = Товары)
	   И Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	ИначеЕсли ТабличнаяЧасть = Услуги И Не Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте товары не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	Если ТабличнаяЧасть = Товары Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
		СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);
		Если НЕ ЗначениеНеЗаполнено(Качество) Тогда
			СтруктураОтбора.Вставить("Качество"         , Качество);
		КонецЕсли;
		Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам Тогда
			СтруктураОтбора.Вставить("Цена", Цена);
		КонецЕсли;
	Иначе
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;
	
	СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда

			СуммаСтрокиДоИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			//Расчет скидок
			//Если РассчитыватьАвтоматическиеСкидки() Тогда
			//	СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
			//	Разница = СуммаСтрокиПослеИзменения - СуммаСтрокиДоИзменения;

			//	мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + Разница;
			//	СтруктураПараметров = Новый Структура;
			//	СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
			//	СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
			//	СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
			//	СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
			//	СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
			//	СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
			//	//РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
			//Иначе // Рассчитать реквизиты табличной части.
				РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			//КонецЕсли;

			СтрокаТабличнойЧасти.Склад = Склад;

		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;
		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;
			Если НЕ ЗначениеНеЗаполнено(Качество) Тогда
				СтрокаТабличнойЧасти.Качество          = Качество;
			КонецЕсли;

			// Заполняем реквизиты табличной части.
			ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Пересчитаем цену в валюту документа.
			Цена = ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                 СпособЗаполненияЦен,
			                                                 ТипЦен.ЦенаВключаетНДС,
			                                                 УчитыватьНДС,
			                                                 СуммаВключаетНДС,
			                                                 ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			СтрокаТабличнойЧасти.Склад = Склад;
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			//Расчет скидок
			//Если РассчитыватьАвтоматическиеСкидки() Тогда
			//	СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

			//	мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения;
			//	СтруктураПараметров = Новый Структура;
			//	СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
			//	СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
			//	СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
			//	СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
			//	СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
			//	СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
			//	//РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
			//Иначе // Рассчитать реквизиты табличной части.
				РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			////КонецЕсли;

			Если ЗначениеНеЗаполнено(Качество) Тогда
				ЗаполнитьКачествоНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			// Заполняем реквизиты табличной части.
			ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			Если ПроверитьУслугаОблагаетсяЕНВД(СтрокаТабличнойЧасти.Номенклатура, Организация, Дата,
				                               мОрганизацияЯвляетсяПлательщикомЕНВД) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Иначе
				ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

			// Пересчитаем цену в валюту документа.
			Цена = ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                 СпособЗаполненияЦен,
			                                                 ТипЦен.ЦенаВключаетНДС,
			                                                 УчитыватьНДС,
			                                                 СуммаВключаетНДС,
			                                                 ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;

	КонецЕсли;

	ТабличнаяЧастьИмя = Метаданные.НайтиПоТипу(ТипЗнч(ТабличнаяЧасть)).Имя;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	//
	//мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	//
	//СоответствиеТЧ = Новый Соответствие;
	//СоответствиеТЧ.Вставить(ЭлементыФормы.Товары, ЭлементыФормы.КоманднаяПанельТовары);
	//СоответствиеТЧ.Вставить(ЭлементыФормы.Услуги, ЭлементыФормы.КоманднаяПанельУслуги);
	//
	//УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ, СоответствиеТЧ);
	
КонецПроцедуры

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	
	//ЗаполнитьТекстПроСчетФактуру();
	ЗаполнитьТекстИсправляемыйДокументРеализации();
	
	// Отображение страниц
	ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = (мВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	
	// Отображение реквизитов шапки документа
	ЭлементыФормы.КорректироватьБУиНУ.Доступность = true;//ДоступнаКорректировкаБУиНУ();
	
	// Отображение табличных частей
	СвойстваСклада = ПолучитьСвойстваСкладаВТабличнойЧасти();
	СвойстваЗаказа = ПолучитьСвойстваЗаказаВТабличнойЧасти();
	ИсправлениеКорректировки =
		ЗначениеЗаполнено(ИсправляемыйДокументРеализации)
		И ТипЗнч(ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации")
		И ИсправляемыйДокументРеализации.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение
		И (НЕ ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);
	
	// Колонка Номенклатуры и связанные с ней колонки
	
	УстановитьСвойствоКолонокТЧ(
		"ХарактеристикаНоменклатуры",
		"Видимость",
		мИспользоватьХарактеристики);
	УстановитьСвойствоКолонокТЧ(
		"СерияНоменклатуры",
		"Видимость",
		мИспользоватьСерии);
	УстановитьСвойствоКолонокТЧ(
		"Единица,Коэффициент",
		"Видимость",
		Истина);
	
	УстановитьСвойствоКолонокТЧ(
		"Номенклатура",
		"АвтоотметкаНеЗаполненного",
		КорректироватьБУиНУ);
	УстановитьСвойствоКолонокТЧ(
		"Единица,Содержание",
		"АвтоотметкаНеЗаполненного",
		КорректироватьБУиНУ И ЭтоКорректировкаРТиУ());
		
	УстановитьСвойствоКолонокТЧ(
		"ОтражатьТоварныйУчет",
		"Видимость",
		КорректироватьБУиНУ);
		
	// Колонка Склад
	УстановитьСвойствоКолонокТЧ(
		"Склад",
		"Видимость",
		СвойстваСклада.ВидимостьСклада);
	УстановитьСвойствоКолонокТЧ(
		"Склад",
		"АвтоотметкаНеЗаполненного",
		СвойстваСклада.ОбязательноеЗаполнениеСклада);
		
	// Колонка ЗаказПокупателя и подчиненные колонки
	УстановитьСвойствоКолонокТЧ(
		"ЗаказПокупателя",
		"Видимость",
		СвойстваЗаказа.ВидимостьЗаказа);
	УстановитьСвойствоКолонокТЧ(
		"ЗаказПокупателя",
		"АвтоотметкаНеЗаполненного",
		СвойстваЗаказа.ОбязательноеЗаполнениеЗаказа);
	УстановитьСвойствоКолонокТЧ(
		"СпособСписанияОстаткаТоваров",
		"Видимость",
		СвойстваЗаказа.ВидимостьСпособаСписания);
	УстановитьСвойствоКолонокТЧ(
		"СпособСписанияОстаткаТоваров",
		"АвтоотметкаНеЗаполненного",
		СвойстваЗаказа.ОбязательноеЗаполнениеСпособаСписания);
	
	// Видимость колонок корректировки
	УстановитьСвойствоКолонокТЧ(
		"КоличествоДоКорректировки,ЦенаДоКорректировки,СуммаДоКорректировки,СуммаНДСДоКорректировки,ВсегоДоКорректировки",
		"Видимость",
		ИсправлениеКорректировки);
	УстановитьСвойствоКолонокТЧ(
		"СтавкаНДС,СуммаНДС,СуммаНДСДоИзменения",
		"Видимость",
		УчитыватьНДС);
	УстановитьСвойствоКолонокТЧ(
		"СтавкаНДСДоИзменения",
		"Видимость",
		УчитыватьНДС И ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки);
	
	// Доступность колонок корректировки
	УстановитьСвойствоКолонокТЧ(
		"КоличествоДоИзменения,ЦенаДоИзменения,СуммаДоИзменения,СуммаНДСДоИзменения,СтавкаНДСДоИзменения,КоличествоДоКорректировки,ЦенаДоКорректировки,СуммаДоКорректировки,СуммаНДСДоКорректировки,СодержаниеДоИзменения",
		"ТолькоПросмотр",
		КорректироватьБУиНУ);
	
	// Положение колонок корректировки
	УстановитьСвойствоКолонокТЧ(
		"СтавкаНДС",
		"Положение",
		?(ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки, ПоложениеКолонки.НаСледующейСтроке, ПоложениеКолонки.НоваяКолонка));
	УстановитьСвойствоКолонокТЧ(
		"КоличествоДоИзменения,ЦенаДоИзменения,СуммаДоИзменения,СуммаНДСДоИзменения,ВсегоДоИзменения",
		"Положение",
		?(ИсправлениеКорректировки, ПоложениеКолонки.НаСледующейСтроке, ПоложениеКолонки.НоваяКолонка));
		
КонецПроцедуры // УстановитьВидимость()

Процедура УстановитьСвойствоКолонокТЧ(ИменаКолонок, ИмяСвойства, ЗначениеСвойства)
	
	СтруктураКолонок = Новый Структура(ИменаКолонок);
	
	Для Каждого КлючИЗначение Из СтруктураКолонок Цикл
		Если мКолонкиТовары.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			мКолонкиТовары[КлючИЗначение.Ключ][ИмяСвойства] = ЗначениеСвойства;
		КонецЕсли;
		Если мКолонкиУслуги.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			мКолонкиУслуги[КлючИЗначение.Ключ][ИмяСвойства] = ЗначениеСвойства;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСвойствоЯчеекСтрокиТЧ(ОформлениеСтроки, ИменаЯчеек, ИмяСвойства, ЗначениеСвойства)
	
	СтруктураКолонок = Новый Структура(ИменаЯчеек);
	
	Для Каждого КлючИЗначение Из СтруктураКолонок Цикл
		Если ОформлениеСтроки.Ячейки.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			ОформлениеСтроки.Ячейки[КлючИЗначение.Ключ][ИмяСвойства] = ЗначениеСвойства;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()
	
	УчитыватьУслуги = (мВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	
	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары")+?(УчитыватьУслуги,ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги"),0);
	ЭлементыФормы.ВсегоНДС.Значение = Товары.Итог("СуммаНДС")+?(УчитыватьУслуги,Услуги.Итог("СуммаНДС"),0);

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

// Процедура заполняет текст про исправляемый документ
//
Процедура ЗаполнитьТекстИсправляемыйДокументРеализации()
	
	Если ЗначениеЗаполнено(ИсправляемыйДокументРеализации) Тогда
		ЭлементыФормы.ГиперссылкаИсправляемыйДокументРеализации.Гиперссылка = Истина;
		ЭлементыФормы.ГиперссылкаИсправляемыйДокументРеализации.Заголовок = Строка(ИсправляемыйДокументРеализации)
	Иначе
		ЭлементыФормы.ГиперссылкаИсправляемыйДокументРеализации.Гиперссылка = Ложь;
		ЭлементыФормы.ГиперссылкаИсправляемыйДокументРеализации.Заголовок = "Не указан";
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();

	// Начало ЭлектронныеДокументы
	//РаботаСДиалогами.УдалитьКнопкуЭД(ЭлементыФормы.ДействияФормы.Кнопки, мИспользоватьОбменЭД);
	// Конец ЭлектронныеДокументы
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
// Параметры
//  Нет
//
Процедура ПриОткрытии()

	Если НЕ ЭтоНовый() Тогда 
		//НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	Иначе
		
		ЗаполнитьШапкуДокумента(ЭтотОбъект, "Продажа", ПараметрОбъектКопирования); 
		
		Если ЗначениеЗаполнено(ДокументРеализации) Тогда
			ДокументРеализацииМетаданные = ДокументРеализации.Метаданные();
			ОтражатьВУправленческомУчете = ?(ЕстьРеквизитДокумента("ОтражатьВУправленческомУчете", ДокументРеализацииМетаданные), ДокументРеализации.ОтражатьВУправленческомУчете, ОтражатьВУправленческомУчете);
			ОтражатьВБухгалтерскомУчете  = ?(ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", ДокументРеализацииМетаданные), ДокументРеализации.ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);
			ОтражатьВНалоговомУчете      = ?(ЕстьРеквизитДокумента("ОтражатьВНалоговомУчете", ДокументРеализацииМетаданные), ДокументРеализации.ОтражатьВНалоговомУчете, ОтражатьВНалоговомУчете);
		КонецЕсли;
		
	КонецЕсли;
	
	мДокументРеализацииСсылка = ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Истина);
	
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Установить печатную форму по умолчанию.
	//УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	мВидДоговора                 = ДоговорКонтрагента.ВидДоговора;

	ПриИзмененииОблагаетсяЕНВД();

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	// Управление видимостью серийных номеров и наборов
	//РаботаСДиалогами.УстановитьДоступностьКнопкиСерийныеНомера(ЭлементыФормы.КоманднаяПанельТовары.Кнопки);
	ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Удалить(
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.СоставНабора); // наборы пока не поддерживаются
	
	// Редактрование номера документа
	//МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	// Начало ЭлектронныеДокументы
	ЭлементыФормы.РамкаЭлектронныеДокументы.Видимость 	= ложь;
	ЭлементыФормы.НадписьСостояниеЭД.Видимость 			= ложь;
	ЭлементыФормы.ТекстСостоянияЭД.Видимость 			= ложь;
	
	// Конец ЭлектронныеДокументы
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	мФормаСоставНабора = Неопределено;

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Пересчитаем сумму взаиморасчетов.
	Если КурсВзаиморасчетов = 0 Тогда
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = 0;
	Иначе
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = ПересчитатьИзВалютыВВалюту(ПолучитьСуммуДокументаСНДС(ЭтотОбъект),  
													ВалютаДокумента, мТекущаяВалютаВзаиморасчетов,
													КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КурсВзаиморасчетов,
													КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов);
	КонецЕсли;

	УстановитьНадписьСуммыВзаиморасчетов(ЭтотОбъект, ЭтаФорма);
	ЭлементыФормы.ИнфНадписьКурса.Заголовок = ПолучитьИнформациюКурсаВалютыСтрокой(мТекущаяВалютаВзаиморасчетов, 
	                                                                                 КурсВзаиморасчетов,
	                                                                                 КратностьВзаиморасчетов,
	                                                                                 мВалютаРегламентированногоУчета,
	                                                                                 Истина);

	ОбновитьПодвал();

	// Подсчитаем количество строк в табличных частях.
	СтраницаПанели = ЭлементыФормы.ОсновнаяПанель.Страницы;
	СтраницаПанели.Товары.Заголовок = "Товары (" + ДокументОбъект.Товары.Количество() + " поз.)";
	СтраницаПанели.Услуги.Заголовок = "Услуги (" + ДокументОбъект.Услуги.Количество() + " поз.)";
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);
			
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьУслуги" Тогда
			ОбработкаПодбора(Услуги, ЗначениеВыбора);
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЭтаФорма.Модифицированность И ЭтаФорма.ВладелецФормы <> Неопределено Тогда
		мОбновлятьВладельца = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Проверка заполнения счета-фактуры, введенного на основании документа
	ПроверитьЗаполнениеСчетаФактуры();
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	//МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	Если мОбновлятьВладельца Тогда
		ОповеститьОЗаписиНовогоОбъекта(ЭтотОбъект);
	КонецЕсли;

	#Если Клиент тогда
		СравнитьЦеныСЗаказом();
	#КонецЕсли	
	
	// Начало ЭлектронныеДокументы
	//Если мИспользоватьОбменЭД Тогда
	//	ТекстСостоянияЭД = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Ссылка, ЭтаФорма);
	//КонецЕсли;
	// Конец ЭлектронныеДокументы

		//+++( 18.04.2017  задача №25624
		Если ЭтотОбъект.Проведен и ЗначениеЗаполнено(ЭтотОбъект.ДокументРеализации) тогда
			Если ЭтотОбъект.ДокументРеализации.ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.Факторинг 
				или ЭтотОбъект.ДокументРеализации.ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ФакторингПредоплата тогда //18.05.2017
				
				ИзмениласьСумма = Товары.Итог("Сумма") - Товары.Итог("СуммаДоИзменения") - Товары.Итог("СуммаДоКорректировки");
				ИзменилосьКолво = Товары.Итог("Количество") - Товары.Итог("КоличествоДоИзменения")- Товары.Итог("КоличествоДоКорректировки");
				
			 УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("no-reply@yst76.ru");
			 Тема = "По договору "+строка(ЭтотОбъект.ДокументРеализации.ДоговорКонтрагента.ТипДоговора)+" сформирована "+строка(ЭтотОбъект)+?(ИзмениласьСумма<>0, " на сумму: "+строка(ИзмениласьСумма)+"р.", "");
			 
			 ТекстСообщения = Тема +"
			 					    |по документу: "+строка(ЭтотОбъект.ДокументРеализации)+"
			 						|для контрагента: " + (ЭтотОбъект.ДокументРеализации.Контрагент) +"
			                        | по договору: "+строка(ЭтотОбъект.ДокументРеализации.ДоговорКонтрагента)+"
			                        |"+?(ИзмениласьСумма<>0, " Изменилась сумма на "+строка(ИзмениласьСумма)+"р.", "")+"
								    |"+?(ИзменилосьКолво<>0," Изменилось Кол-во на "+строка(ИзменилосьКолво)+" шт.","");
							
			 АдресПолучателя = "titova@yst.ru;ogorodnikov@yst.ru";
			#Если Клиент тогда				
			 Состояние(строка(ТекущаяДата())+" идет отправка письма на адрес: "+АдресПолучателя);
			#КонецЕсли 
			Если ЗначениеЗаполнено(АдресПолучателя) Тогда
				 списокФайлов = новый СписокЗначений;
				 яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресПолучателя, списокФайлов, УЗ, ТекстСообщения, Тема);
		     	КонецЕсли;
			КонецЕсли;
		КонецЕсли;
        //+++)
		
КонецПроцедуры // ПослеЗаписи()

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ЭлектронныеДокументы
	//Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
	//	ТекстСостоянияЭД = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Ссылка, ЭтаФорма);
	//КонецЕсли;
	// Конец ЭлектронныеДокументы
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ И ТАБЛИЧНЫХ ЧАСТЕЙ

// КОМАНДНАЯ ПАНЕЛЬ ФОРМЫ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	//МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	ПредыдущийВидОперации = ВидОперации; // Сохраним пред. вид операции для его сравнения с новым
	
	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации[Кнопка.Имя];
	КонецЕсли;
	
	// Если операция не поменялась, то ничего делать не надо
	Если ПредыдущийВидОперации = ВидОперации Тогда 
		Возврат;
	КонецЕсли;
	
	КорректировкаКорректировочногоСчетаФактуры = Ложь;
		
	Если ТипЗнч(ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Ложь)) = Тип("ДокументСсылка.КорректировкаРеализации") 
		И ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		КорректировкаКорректировочногоСчетаФактуры = Истина;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Если КорректировкаКорректировочногоСчетаФактуры Тогда
			ИсправляемыйДокументРеализации = ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Ложь);
		Иначе
			ИсправляемыйДокументРеализации = ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Истина);
		КонецЕсли;	
	Иначе
		ИсправляемыйДокументРеализации = ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Ложь);
	КонецЕсли;
	      	
	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		
		Для Каждого СтрокаТЧ Из Товары Цикл
			Если СтрокаТЧ.ЕстьВДокументеРеализации И СтрокаТЧ.СтавкаНДС <> СтрокаТЧ.СтавкаНДСДоИзменения Тогда
				СтрокаТЧ.СтавкаНДС = СтрокаТЧ.СтавкаНДСДоИзменения;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТЧ Из Услуги Цикл
			Если СтрокаТЧ.ЕстьВДокументеРеализации И СтрокаТЧ.СтавкаНДС <> СтрокаТЧ.СтавкаНДСДоИзменения Тогда
				СтрокаТЧ.СтавкаНДС = СтрокаТЧ.СтавкаНДСДоИзменения;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации) , ЭтотОбъект, ЭтаФорма);

	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	//НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	//УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// КОМАНДНЫЕ ПАНЕЛИ ТАБЛИЧНЫХ ЧАСТЕЙ

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "СерийныеНомера" командной панели
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыСерийныеНомера(Кнопка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено
	 ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура)
	 ИЛИ НЕ ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Предупреждение("Не выбрана номенклатура!");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура", 				СтрокаТабличнойЧасти.Номенклатура);
	СтруктураПараметров.Вставить("ХарактеристикаНоменклатуры", 	СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	СтруктураПараметров.Вставить("СерияНоменклатуры", 			СтрокаТабличнойЧасти.СерияНоменклатуры);
	СтруктураПараметров.Вставить("Количество", 					СтрокаТабличнойЧасти.Количество);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения", 			СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("СозданиеНовыхСерийныхНомеров",Ложь);
	СтруктураПараметров.Вставить("ДокументОбъект", 				ЭтотОбъект);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", 			"Товары");
	СтруктураПараметров.Вставить("НомерСтрокиТабличнойЧасти", 	СтрокаТабличнойЧасти.НомерСтроки);
	СтруктураПараметров.Вставить("СтрокаТабличнойЧасти", 		СтрокаТабличнойЧасти);
	СтруктураПараметров.Вставить("Качество", 					СтрокаТабличнойЧасти.Качество);
	СтруктураПараметров.Вставить("ПараметрыСвязиСтрокТЧ", 		мПараметрыСвязиСтрокТЧ);
	
	// Открываем форму подбора.
	ФормаВводСерийныхНомеров = Обработки.ВводСерийныхНомеров.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	ФормаВводСерийныхНомеров.СтруктураИсходныхПараметров = СтруктураПараметров;
	ФормаВводСерийныхНомеров.Открыть();

КонецПроцедуры // КоманднаяПанельТоварыСерийныеНомера()

// Процедура вызывается при нажатии кнопки "СоставНабора" командной панели
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыСоставНабора(Кнопка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено
	 ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура)
	 ИЛИ НЕ ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Предупреждение("Не выбрана номенклатура!");
		Возврат;
	ИначеЕсли НЕ СтрокаТабличнойЧасти.Номенклатура.Комплект Тогда
		Предупреждение("Номенклатура не является набором-комплектом!");
		Возврат;
	КонецЕсли;

	мТекущаяСтрокаНабор = СтрокаТабличнойЧасти;

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура",      СтрокаТабличнойЧасти.Номенклатура);
	СтруктураПараметров.Вставить("Количество",        СтрокаТабличнойЧасти.Количество);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения",  СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("ДокументОбъект",    ЭтотОбъект);
	СтруктураПараметров.Вставить("ФормаДокумента",    ЭтаФорма);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", "Товары");
	СтруктураПараметров.Вставить("КлючСтроки",        СтрокаТабличнойЧасти.КлючСтроки);
	СтруктураПараметров.Вставить("ТолькоПросмотр",    Не СтрокаТабличнойЧасти.Номенклатура.Комплект);
	СтруктураПараметров.Вставить("ЗаголовокФормы",    "Состав набора-комплекта");

	// Открываем форму "Состав набора".
	мФормаСоставНабора = Обработки.СоставНабора.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	мФормаСоставНабора.СтруктураИсходныхПараметров = СтруктураПараметров;
	мФормаСоставНабора.Открыть();

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Услуги", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Услуги".
//
Процедура КоманднаяПанельУслугиДействиеПодбор(Кнопка)

	ДействиеПодбор(Услуги);

КонецПроцедуры // КоманднаяПанельУслугиДействиеПодбор()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	//УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(
	//	мКнопкиЗаполненияТЧ.Строки.Найти(
	//		Кнопка.Имя,
	//		"Имя",
	//		Истина),
	//	ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)
	
	ПроверитьНомерДокумента(ЭтотОбъект, Дата);
	
	//МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
	ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	ПриИзмененииОблагаетсяЕНВД("ДатаДокумента");
	
	УстановитьВидимость();

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДокументРеализации) И Организация <> ДокументРеализации.Организация Тогда
		
	 	Если Вопрос("Организация не соответствует организации документа основания.
		 			|Основание будет очищено. Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
					
			Организация = мТекущаяОрганизация;
			Возврат;
			
		КонецЕсли;
		
		ДокументРеализации = Неопределено;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Номер) Тогда
		//МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;

	// Выполняем общие действия для всех документов при изменении Организация.
	ПриИзмененииЗначенияОрганизации(ЭтотОбъект);

	ПриИзмененииОблагаетсяЕНВД("Организация");
	
	УстановитьВидимость();
	
КонецПроцедуры // ОрганизацияПриИзменении()

Процедура КорректироватьБУиНУПриИзменении(Элемент)
	
	Если КорректироватьБУиНУ И ЗначениеЗаполнено(ДокументРеализации) Тогда
		
		Если Вопрос("Перезаполнить документ по основанию?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			ЗаполнитьСвойстваШапки();
			ЗаполнитьПоДокументу();
		Иначе
			КорректироватьБУиНУ = Ложь;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ДокументРеализацииНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Отбор = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор.Вставить("Организация", Организация);
	КонецЕсли;
	
	НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "");
	
КонецПроцедуры

Процедура ДокументРеализацииПриИзменении(Элемент)
	Если ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.РеализацияТоваровУслуг")  Тогда
		Предупреждение("Корректировка реализации вводится только на основании корректировки заказа!");
		ДокументРеализации = неопределено;
		возврат;
	конецЕсли;	
	
	СтруктураЗаполнения = Новый Структура();
	СтруктураЗаполнения.Вставить("ДокументОснование", ДокументРеализации);
	СтруктураЗаполнения.Вставить("ПерезаполнятьДокумент", Истина);
	СтруктураЗаполнения.Вставить("ИнтерактивноеЗаполнение", Истина);
	Заполнить(СтруктураЗаполнения);
	
	ЗаполнитьСвойстваШапки();
	ЗаполнитьПоДокументу();
	
	УстановитьВидимость();
	
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	мВидДоговора                 = ДоговорКонтрагента.ВидДоговора;
	
КонецПроцедуры

Процедура ДокументРеализацииОчистка(Элемент, СтандартнаяОбработка)
	
	ДокументРеализацииПриИзменении(Элемент);
	
КонецПроцедуры

Процедура ГиперссылкаСчетФактураНажатие(Элемент)

	//РаботаСДиалогами.ВвестиСчетФактуру(ЭтотОбъект, ЭтаФорма, "СчетФактураВыданный");

КонецПроцедуры // ГиперссылкаСчетФактураНажатие()

Процедура ГиперссылкаИсправляемыйДокументРеализацииНажатие(Элемент)
	
	Если ЗначениеЗаполнено(ИсправляемыйДокументРеализации) Тогда
		ИсправляемыйДокументРеализации.ПолучитьФорму().Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура АдресДоставкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	//ЗаполнениеДокументов.ВыбратьАдресДоставки(СтандартнаяОбработка, ЭтаФорма, ЭтотОбъект);
	
КонецПроцедуры

Процедура АдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	//АдресДоставки = УправлениеКонтактнойИнформацией.ПолучитьПолныйАдрес(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура АдресДоставкиОчистка(Элемент, СтандартнаяОбработка)
	
	АдресДоставки = "";
	ДополнениеКАдресуДоставки = "";
	
КонецПроцедуры

Процедура АдресДоставкиОткрытие(Элемент, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	//ЗаполнениеДокументов.РедактированиеАдресаДоставки(АдресДоставки, Элемент, ЭтотОбъект);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части "Товары".
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	ПриНачалеРедактированияСтрокиТЧ(Элемент, "Товары", НоваяСтрока);
	
КонецПроцедуры // ТоварыПриНачалеРедактирования()

// Процедура - обработчик события "ПередУдалением" табличной части "Товары".
//
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ПередУдалениемСтрокиТЧ(Элемент, "Товары", Отказ);
	
КонецПроцедуры // ТоварыПередУдалением()

// Процедура - обработчик события "ПослеУдаления" табличной части "Товары".
//
Процедура ТоварыПослеУдаления(Элемент)
	
	мПараметрыСвязиСтрокТЧ["Товары"].ФлагМодификации = Истина;
	
КонецПроцедуры // ТоварыПослеУдаления()

// Процедура - обработчик события "ПриПолученииДанных" табличной части "Товары".
//
Процедура ТоварыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ПриПолученииДанныхСтрокиТЧ(Элемент, "Товары", ОформленияСтрок);
	
КонецПроцедуры

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	//УправлениеКонтактами.ПроверкаПеретаскиванияВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Товары");

КонецПроцедуры

// Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	//УправлениеКонтактами.ПеретаскиваниеВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Товары", ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ПриИзмененииНоменклатурыТЧ(Элемент, "Товары");

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	// Заполняем реквизиты табличной части.
	ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 
	
	ПриИзмененииЦеныТЧ(Элемент, "Товары");
	
	// Состав набора зависит от его характеристики.
	//УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении Единица.
	ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	// Рассчитать реквизиты табличной части.
	ПриИзмененииЦеныТЧ(Элемент, "Товары");
	
КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	ПриИзмененииКоличестваТЧ(Элемент, "Товары");

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ПриИзмененииЦеныТЧ(Элемент, "Товары");
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ПриИзмененииСтавкиНДСТЧ(Элемент, "Товары");
	
КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ПриИзмененииСуммыТЧ(Элемент, "Товары");
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоДоКорректировкиПриИзменении(Элемент)
	
	ПриИзмененииКоличестваТЧ(Элемент, "Товары", "ДоКорректировки");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоДоИзмененияПриИзменении(Элемент)
	
	ПриИзмененииКоличестваТЧ(Элемент, "Товары", "ДоИзменения");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаДоКорректировкиПриИзменении(Элемент)
	
	ПриИзмененииЦеныТЧ(Элемент, "Товары", "ДоКорректировки");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаДоИзмененияПриИзменении(Элемент)
	
	ПриИзмененииЦеныТЧ(Элемент, "Товары", "ДоИзменения");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСДоИзмененияПриИзменении(Элемент)
	
	ПриИзмененииСтавкиНДСТЧ(Элемент, "Товары", "ДоИзменения");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаДоКорректировкиПриИзменении(Элемент)
	
	ПриИзмененииСуммыТЧ(Элемент, "Товары", "ДоКорректировки");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаДоИзмененияПриИзменении(Элемент)
	
	ПриИзмененииСуммыТЧ(Элемент, "Товары", "ДоИзменения");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ПриИзмененииЕдиницыМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	// Рассчитать новое количество
	РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	// Рассчитать реквизиты табличной части.
	ПриИзмененииЦеныТЧ(Элемент, "Товары");
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" реквизита "ЗаказПокупателя"
// в строке табличной части "Товары".
Процедура ТоварыЗаказПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить( "Организация", Организация);
	СтруктураОтбора.Вставить( "Контрагент",  Контрагент);
	НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Элемент.Значение, СтандартнаяОбработка, 
							 "ЗаказПокупателя" ,СтруктураОтбора);		

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Склад"
// в строке табличной части "Товары".
Процедура ТоварыСкладНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	//РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Элемент.Значение, ВидСравнения.НеРавно, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" поля табличной части "Услуги"
//
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	ПриНачалеРедактированияСтрокиТЧ(Элемент, "Услуги", НоваяСтрока);
	
КонецПроцедуры

// Процедура - обработчик события "ПриПолученииДанных" поля табличной части "Услуги"
//
Процедура УслугиПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ПриПолученииДанныхСтрокиТЧ(Элемент, "Услуги", ОформленияСтрок);
	
КонецПроцедуры

Процедура УслугиПередУдалением(Элемент, Отказ)
	
	ПередУдалениемСтрокиТЧ(Элемент, "Услуги", Отказ);
	
КонецПроцедуры

// Процедура - обработчик события "ПроверкаПеретаскивания" поля табличной части "Услуги"
//
Процедура УслугиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	//УправлениеКонтактами.ПроверкаПеретаскиванияВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Услуги");
	
КонецПроцедуры

// Процедура - обработчик события "Перетаскивание" поля табличной части "Услуги"
//
Процедура УслугиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	//УправлениеКонтактами.ПеретаскиваниеВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Услуги", ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатура
// в строке табличной части "Услуги".
//
Процедура УслугиНоменклатураПриИзменении(Элемент)

	ПриИзмененииНоменклатурыТЧ(Элемент, "Услуги");
	
КонецПроцедуры // УслугиНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Услуги".
//
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	ПриИзмененииКоличестваТЧ(Элемент, "Услуги");
	
КонецПроцедуры // УслугиКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Услуги".
//
Процедура УслугиЦенаПриИзменении(Элемент)
	
	ПриИзмененииЦеныТЧ(Элемент, "Услуги");
	
КонецПроцедуры // УслугиЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Услуги".
//
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	
	ПриИзмененииСтавкиНДСТЧ(Элемент, "Услуги");
	
КонецПроцедуры // УслугиСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Услуги".
//
Процедура УслугиСуммаПриИзменении(Элемент)
	
	ПриИзмененииСуммыТЧ(Элемент, "Услуги");
	
КонецПроцедуры// УслугиСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Услуги".
//
Процедура УслугиКоличествоДоКорректировкиПриИзменении(Элемент)
	
	ПриИзмененииКоличестваТЧ(Элемент, "Услуги", "ДоКорректировки");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Услуги".
//
Процедура УслугиКоличествоДоИзмененияПриИзменении(Элемент)
	
	ПриИзмененииКоличестваТЧ(Элемент, "Услуги", "ДоИзменения");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Услуги".
//
Процедура УслугиЦенаДоКорректировкиПриИзменении(Элемент)
	
	ПриИзмененииЦеныТЧ(Элемент, "Услуги", "ДоКорректировки");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Услуги".
//
Процедура УслугиЦенаДоИзмененияПриИзменении(Элемент)
	
	ПриИзмененииЦеныТЧ(Элемент, "Услуги", "ДоИзменения");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Услуги".
//
Процедура УслугиСтавкаНДСДоИзмененияПриИзменении(Элемент)
	
	ПриИзмененииСтавкиНДСТЧ(Элемент, "Услуги", "ДоИзменения");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Услуги".
//
Процедура УслугиСуммаДоКорректировкиПриИзменении(Элемент)
	
	ПриИзмененииСуммыТЧ(Элемент, "Услуги", "ДоКорректировки");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Услуги".
//
Процедура УслугиСуммаДоИзмененияПриИзменении(Элемент)
	
	ПриИзмененииСуммыТЧ(Элемент, "Услуги", "ДоИзменения");
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" реквизита "ЗаказПокупателя"
// в строке табличной части "Услуги".
Процедура УслугиЗаказПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить( "Организация", Организация);
	СтруктураОтбора.Вставить( "Контрагент",  Контрагент);
	НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Элемент.Значение, СтандартнаяОбработка, 
							 "ЗаказПокупателя" ,СтруктураОтбора);
	
КонецПроцедуры

Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	ТекущиеДанные = ЭлементыФормы.Товары.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ЭлементыФормы.Товары.ТекущаяКолонка.Имя = "ОтражатьТоварныйУчет" Тогда
			Если ТекущиеДанные.КоличествоДоИзменения = ТекущиеДанные.Количество Тогда
				Элемент.Колонки.ОтражатьТоварныйУчет.ТолькоПросмотр = Истина;
			Иначе
				Элемент.Колонки.ОтражатьТоварныйУчет.ТолькоПросмотр = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.КоличествоДоИзменения = ДанныеСтроки.Количество Тогда
		ОформлениеСтроки.Ячейки.ОтражатьТоварныйУчет.Текст = "";
	КонецЕсли;
КонецПроцедуры

Процедура УслугиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.КоличествоДоИзменения = ДанныеСтроки.Количество Тогда
		ОформлениеСтроки.Ячейки.ОтражатьТоварныйУчет.Текст = "";
	КонецЕсли;
КонецПроцедуры

Процедура УслугиПриАктивизацииЯчейки(Элемент)
	ТекущиеДанные = ЭлементыФормы.Услуги.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ЭлементыФормы.Услуги.ТекущаяКолонка.Имя = "ОтражатьТоварныйУчет" Тогда
			Если ТекущиеДанные.КоличествоДоИзменения = ТекущиеДанные.Количество Тогда
				Элемент.Колонки.ОтражатьТоварныйУчет.ТолькоПросмотр = Истина;
			Иначе
				Элемент.Колонки.ОтражатьТоварныйУчет.ТолькоПросмотр = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ для работы с электронными документами

Процедура ДействияФормыПодписатьИОтправить(Кнопка)
	//
	//Если НЕ ЭлектронныеДокументыКлиент.ОбъектМодифицирован(ЭтотОбъект, ЭтаФорма) Тогда
	///	ЭлектронныеДокументыКлиент.СформироватьПодписатьОтправитьЭД(Ссылка);
	//КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыСформироватьНовый(Кнопка)
	
	//Если НЕ ЭлектронныеДокументыКлиент.ОбъектМодифицирован(ЭтотОбъект, ЭтаФорма) Тогда
	//	ЭлектронныеДокументыКлиент.СформироватьНовыйЭД(Ссылка);
	//КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыОткрытьАктуальныйЭД(Кнопка)
	
	//ЭлектронныеДокументыКлиент.ОткрытьАктуальныйЭД(Ссылка, ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияФормыСписокЭлектронныхДокументов(Кнопка)
	
	//ПараметрыОткрытия = Новый Структура;
	//ПараметрыОткрытия.Вставить("Уникальность", 	Ссылка.УникальныйИдентификатор());
	//ПараметрыОткрытия.Вставить("Источник", 		ЭтаФорма);
	
	//ЭлектронныеДокументыКлиент.ОткрытьДеревоЭД(Ссылка, ПараметрыОткрытия);
	
КонецПроцедуры

Процедура ТекстСостоянияЭДНажатие(Элемент)
	//
	//ПараметрыОткрытия = Новый Структура;
	//ПараметрыОткрытия.Вставить("Уникальность", 	Ссылка.УникальныйИдентификатор());
	//ПараметрыОткрытия.Вставить("Источник", 		ЭтаФорма);
	//
	//ЭлектронныеДокументыКлиент.ОткрытьДеревоЭД(Ссылка, ПараметрыОткрытия);
	
КонецПроцедуры
Функция ПолучитьНовыйКлючСтроки(ДокументОбъект, ИмяТЧ = "Товары") Экспорт

	Если ДокументОбъект[ИмяТЧ].Количество() = 0 Тогда
		МаксКлюч = 1;
	Иначе
		// Если в табл. части уже присутствуют строки, то новое «свободное» значение ключа
		// рассчитывается от максимального существующего значения.
		СписокКлючей = Новый СписокЗначений;
		СписокКлючей.ЗагрузитьЗначения(ДокументОбъект[ИмяТЧ].ВыгрузитьКолонку("КлючСтроки"));
		СписокКлючей.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		МаксКлюч = СписокКлючей[0].Значение + 1;
	КонецЕсли;

	Возврат МаксКлюч;

КонецФункции // ПолучитьНовыйКлючСвязи()

Процедура СравнитьЦеныСЗаказом()
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказПокупателяТовары.Номенклатура,
	|	ЗаказПокупателяТовары.Цена
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|ГДЕ
	|	ЗаказПокупателяТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",ДокументРеализации.Сделка);
	тз=Запрос.Выполнить().Выгрузить();
	для каждого стр из Товары цикл
		стрЗаказа=тз.Найти(стр.Номенклатура,"Номенклатура");
		Если стрЗаказа=неопределено тогда
			Сообщить("Цена для ("+стр.Номенклатура.Код+")"+стр.Номенклатура+" в корректировке: "+стр.Цена+", в заказе: 0");
		ИначеЕсли стрЗаказа.Цена<>стр.Цена тогда
			Сообщить("Цена для ("+стр.Номенклатура.Код+")"+стр.Номенклатура+" в корректировке: "+стр.Цена+", в заказе: "+стрЗаказа.Цена);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДокументРеализацииСсылка   = ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Истина);

мОбновлятьВладельца         = Ложь;

мКолонкиТовары              = ЭлементыФормы.Товары.Колонки;
мКолонкиУслуги              = ЭлементыФормы.Услуги.Колонки;

мИспользоватьХарактеристики = Константы.ИспользоватьХарактеристикиНоменклатуры.Получить();
мИспользоватьСерии          = Константы.ИспользоватьСерииНоменклатуры.Получить();
