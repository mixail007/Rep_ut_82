Перем мВалютаРегламентированногоУчета Экспорт;
Перем мУказаниеСкладов ;
Перем мУказаниеСкладовВТЧ Экспорт;
Перем мДокументРеализацииСсылка Экспорт;
Перем мПараметрыСвязиСтрокТЧ Экспорт;
Перем мСтруктураПараметровВзаиморасчетов Экспорт;
Перем мПорядокСписанияПартий; // (Общ)

Функция ПолучитьСвойстваСкладаВТабличнойЧасти() Экспорт
	
	СвойстваСклада = Новый Структура;
	
	//СвойстваСклада.Вставить("ВидимостьСклада",              КорректироватьБУиНУ И ЭтоКорректировкаРТиУ() И мУказаниеСкладовВТЧ);
	СвойстваСклада.Вставить("ВидимостьСклада",              КорректироватьБУиНУ И ЭтоКорректировкаРТиУ());
	СвойстваСклада.Вставить("ОбязательноеЗаполнениеСклада", СвойстваСклада.ВидимостьСклада);
	
	Возврат СвойстваСклада;
	
КонецФункции

Функция ЭтоКорректировкаРТиУ() Экспорт
	
	Возврат (ТипЗнч(мДокументРеализацииСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	
КонецФункции

Функция ПолучитьСвойстваЗаказаВТабличнойЧасти() Экспорт
	
	ВедениеВзаиморасчетов = ДоговорКонтрагента.ВедениеВзаиморасчетов;
	СвойстваЗаказа        = Новый Структура;
	
	// Заказ в ТЧ виден, если взаиморасчеты по договору ведутся по заказам или по договору в целом (не ведутся по счетам)
	// Заполнение заказа обязательно, если если взаиморасчеты по договору ведутся по заказам
	СвойстваЗаказа.Вставить("ВидимостьЗаказа",
		ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам
		И КорректироватьБУиНУ
		И ЭтоКорректировкаРТиУ() И ложь);
	СвойстваЗаказа.Вставить("ОбязательноеЗаполнениеЗаказа",
		СвойстваЗаказа.ВидимостьЗаказа
		И ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
	СвойстваЗаказа.Вставить("ВидимостьСпособаСписания",
		СвойстваЗаказа.ВидимостьЗаказа);
	СвойстваЗаказа.Вставить("ОбязательноеЗаполнениеСпособаСписания",
		СвойстваЗаказа.ВидимостьСпособаСписания
		И ЗначениеЗаполнено(Сделка));
	
	Возврат СвойстваЗаказа;
	
КонецФункции

Процедура ЗаполнитьСвойстваШапки(ЗаполнятьРедактируемыеРеквизиты = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументРеализации) Тогда
		Возврат;
	КонецЕсли;
	
	// Перед заполнением сохраним реквизиты шапки документа, не заполняемые из основания
	НезаполняемыеРеквизиты =
		"ПометкаУдаления, Проведен, Дата, Номер, ВидОперации,
		|ДокументРеализации, КорректироватьБУиНУ, Ответственный, Комментарий, ВидПередачи";
		
	Если НЕ ЗаполнятьРедактируемыеРеквизиты Тогда
		НезаполняемыеРеквизиты = НезаполняемыеРеквизиты
			+ ",АдресДоставки, ДополнениеКАдресуДоставки,
				|БанковскийСчетОрганизации, Грузоотправитель, Грузополучатель";
	КонецЕсли;
	
	СтруктураНезаполняемыеРеквизиты = Новый Структура(НезаполняемыеРеквизиты);
	ЗаполнитьЗначенияСвойств(СтруктураНезаполняемыеРеквизиты, ЭтотОбъект);
	
	// Очистим реквизиты шапки документа
	Для Каждого Реквизит из ЭтотОбъект.Метаданные().Реквизиты Цикл
		Если НЕ СтруктураНезаполняемыеРеквизиты.Свойство(Реквизит.Имя) Тогда
			ЭтотОбъект[Реквизит.Имя] = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	мДокументРеализацииСсылка = ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Истина);
	
	Если ЗначениеЗаполнено(мДокументРеализацииСсылка) Тогда
		
		// Заполненим основные реквизиты шапки по первичному документу
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, мДокументРеализацииСсылка);		
		// Заполним реквизиты учета НДС в случае, если таких реквизитов нет в первичном документе
		МетаданныеДокументаОснования = мДокументРеализацииСсылка.Метаданные();
		Если МетаданныеДокументаОснования.Реквизиты.Найти("УчитыватьНДС") = Неопределено Тогда
			УчитыватьНДС = Истина;
		КонецЕсли;
		Если МетаданныеДокументаОснования.Реквизиты.Найти("СуммаВключаетНДС") = Неопределено Тогда
			СуммаВключаетНДС = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если КорректироватьБУиНУ Тогда
		// Перезаполним шапку по документу основания 
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДокументРеализации);
	КонецЕсли;
	
	// Восстановим незаполняемые реквизиты
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНезаполняемыеРеквизиты);
	
	КорректировкаКорректировочногоСчетаФактуры = Ложь;
		
	Если ТипЗнч(ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Ложь)) = Тип("ДокументСсылка.КорректировкаРеализации") 
		И ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		КорректировкаКорректировочногоСчетаФактуры = Истина;
	КонецЕсли;	

	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Если КорректировкаКорректировочногоСчетаФактуры Тогда
			ИсправляемыйДокументРеализации = ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Ложь);
		Иначе
			ИсправляемыйДокументРеализации = ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Истина);
		КонецЕсли;	
	Иначе
		ИсправляемыйДокументРеализации = ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Ложь);
	КонецЕсли;
	
	// Установим значение Неопределено для незаполненных реквизитов составного типа
	Если НЕ ЗначениеЗаполнено(Сделка) И Сделка <> Неопределено Тогда
		Сделка = Неопределено;
	КонецЕсли;
	СтруктураКурсаДокумента = ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
	КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	
	// Цены в документе всегда указываем вручную
	ТипЦен = Неопределено;
	
КонецПроцедуры

Функция ПолучитьИсправляемыйДокументРеализации(ДокРеализации, Исходный = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(ДокРеализации) 
		И ТипЗнч(ДокРеализации) = Тип("ДокументСсылка.КорректировкаРеализации")
		И (ДокРеализации.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки ИЛИ Исходный) Тогда
		
		Возврат ПолучитьИсправляемыйДокументРеализации(ДокРеализации.ДокументРеализации, Исходный);
		
	Иначе
		Возврат ДокРеализации;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьПоДокументу() Экспорт
	
	Если ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
	 ИЛИ ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		ЗаполнитьПоРеализации();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоРеализации()
	
	Если НЕ ЗначениеЗаполнено(ДокументРеализации) Тогда
		Возврат;
	КонецЕсли;
	
	Товары.Очистить();
	Услуги.Очистить();
	СерийныеНомера.Очистить();
	СоставНабора.Очистить();
	СерийныеНомераСоставНабора.Очистить();
	
	ИмяВидаДокумента = ДокументРеализации.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументРеализации);
	
	Текст =
	"ВЫБРАТЬ
	|	КорректировкаРеализацииТовары.НомерСтроки КАК НомерСтрокиОснования,
	|	КорректировкаРеализацииТовары.Количество,
	|	КорректировкаРеализацииТовары.Количество КАК КоличествоДоИзменения,
	|	КорректировкаРеализацииТовары.Цена,
	|	КорректировкаРеализацииТовары.Цена КАК ЦенаДоИзменения,
	|	КорректировкаРеализацииТовары.Сумма,
	|	КорректировкаРеализацииТовары.Сумма КАК СуммаДоИзменения,
	|	КорректировкаРеализацииТовары.СтавкаНДС,
	|	КорректировкаРеализацииТовары.СтавкаНДС КАК СтавкаНДСДоИзменения,
	|	КорректировкаРеализацииТовары.СуммаНДС,
	|	КорректировкаРеализацииТовары.СуммаНДС КАК СуммаНДСДоИзменения,
	|	""Товары"" КАК ТЧ,";
	
	Если ИмяВидаДокумента = "КорректировкаРеализации" Тогда
		Текст = Текст + "
		|	КорректировкаРеализацииТовары.КоличествоДоКорректировки,
		|	КорректировкаРеализацииТовары.ЦенаДоКорректировки,
		|	КорректировкаРеализацииТовары.СуммаДоКорректировки,
		|	КорректировкаРеализацииТовары.СуммаНДСДоКорректировки,";
	Иначе
		Текст = Текст + "
		|	0 КАК КоличествоДоКорректировки,
		|	0 КАК ЦенаДоКорректировки,
		|	0 КАК СуммаДоКорректировки,
		|	0 КАК СуммаНДСДоКорректировки,";
	КонецЕсли;
	
	Текст = Текст + "
	|	ИСТИНА КАК ЕстьВДокументеРеализации,
	|	NULL КАК Содержание,
	|	NULL КАК СодержаниеДоИзменения
	|ИЗ
	|	Документ."+ИмяВидаДокумента+".Товары КАК КорректировкаРеализацииТовары
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализацииУслуги.НомерСтроки,
	|	КорректировкаРеализацииУслуги.Количество,
	|	КорректировкаРеализацииУслуги.Количество,
	|	КорректировкаРеализацииУслуги.Цена,
	|	КорректировкаРеализацииУслуги.Цена,
	|	КорректировкаРеализацииУслуги.Сумма,
	|	КорректировкаРеализацииУслуги.Сумма,
	|	КорректировкаРеализацииУслуги.СтавкаНДС,
	|	КорректировкаРеализацииУслуги.СтавкаНДС,
	|	КорректировкаРеализацииУслуги.СуммаНДС,
	|	КорректировкаРеализацииУслуги.СуммаНДС,
	|	""Услуги"",";
	
	Если ИмяВидаДокумента = "КорректировкаРеализации" Тогда
		Текст = Текст + "
		|	КорректировкаРеализацииУслуги.КоличествоДоКорректировки,
		|	КорректировкаРеализацииУслуги.ЦенаДоКорректировки,
		|	КорректировкаРеализацииУслуги.СуммаДоКорректировки,
		|	КорректировкаРеализацииУслуги.СуммаНДСДоКорректировки,";
	Иначе
		Текст = Текст + "
		|	0,
		|	0,
		|	0,
		|	0,";
	КонецЕсли;
	
	Текст = Текст + "
	|	ИСТИНА,
	|	КорректировкаРеализацииУслуги.Содержание,
	|	КорректировкаРеализацииУслуги.Содержание
	|ИЗ
	|	Документ."+ИмяВидаДокумента+".Услуги КАК КорректировкаРеализацииУслуги
	|ГДЕ
	|	КорректировкаРеализацииУслуги.Ссылка = &Ссылка";
	
	Запрос.Текст = Текст;
	Результат = Запрос.Выполнить().Выбрать();
	
	ДокументРеализацииТовары = ДокументРеализации.Товары;
	ДокументРеализацииУслуги = ДокументРеализации.Услуги;
	
	Пока Результат.Следующий() Цикл
		
		Если Результат.ТЧ = "Товары" Тогда
			СтрокаТоваров = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоваров, ДокументРеализацииТовары[Результат.НомерСтрокиОснования - 1]);
			ЗаполнитьЗначенияСвойств(СтрокаТоваров, Результат);
		Иначе // услуги
			СтрокаУслуг = Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаУслуг, ДокументРеализацииУслуги[Результат.НомерСтрокиОснования - 1]);
			ЗаполнитьЗначенияСвойств(СтрокаУслуг, Результат);
		КонецЕсли;
		
	КонецЦикла;
	
	// Загрузим табличную часть СерийныеНомера
//	СерийныеНомера.Загрузить(ДокументРеализации.СерийныеНомера.Выгрузить());
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ПереименоватьКолонку(Таблица, СтруктураИменКолонок)
	
	СтруктураПерезаполнения = Новый Структура();
	Для каждого ОбрабатываемыеКолонки Из СтруктураИменКолонок Цикл
		Если Таблица.Колонки.Найти(ОбрабатываемыеКолонки.Ключ) = Неопределено Тогда
			Таблица.Колонки[ОбрабатываемыеКолонки.Значение].Имя = ОбрабатываемыеКолонки.Ключ;
		Иначе
			СтруктураПерезаполнения.Вставить(ОбрабатываемыеКолонки.Ключ, ОбрабатываемыеКолонки.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураПерезаполнения.Количество() > 0.00 Тогда
		Для каждого СтрокаИсходнойТаблицы Из Таблица Цикл
			Для каждого ОбрабатываемыеКолонки Из СтруктураПерезаполнения Цикл
				СтрокаИсходнойТаблицы[ОбрабатываемыеКолонки.Ключ] = СтрокаИсходнойТаблицы[ОбрабатываемыеКолонки.Значение]
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
Процедура ПодготовитьТаблицуТоваровУпрВозврат(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Надо добавить колонки.
	ТаблицаТоваров.Колонки.Добавить("МинусКоличество"     , ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаТоваров.Колонки.Добавить("МинусСебестоимость"  , ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ПлюсСебестоимость"   , ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов" , ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок"  , ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДок"        , ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"              , ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"            , ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		Если СтрокаТаблицы.КоличествоДок = NULL Тогда
			СтрокаТаблицы.КоличествоДок = 0;
		КонецЕсли;

		СтрокаТаблицы.МинусКоличество  = - СтрокаТаблицы.КоличествоДок;
		
		СтрокаТаблицы.СтоимостьПродажи = СтрокаТаблицы.Сумма + 
		                                 ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Цена * СтрокаТаблицы.КоличествоВЕдиницахДокумента;
		Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
			СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.СтоимостьБезСкидок + РассчитатьСуммуНДС(СтрокаТаблицы.СтоимостьБезСкидок, 
												УчитыватьНДС, СуммаВключаетНДС, ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
		КонецЕсли;

		СтрокаТаблицы.СуммаВзаиморасчетов = - ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьПродажи, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов, 
										 СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

		СтрокаТаблицы.СтоимостьБезСкидок  = - ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьБезСкидок, ВалютаДокумента, 
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.СтоимостьПродажи    = - ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьПродажи, СтруктураШапкиДокумента.ВалютаДокумента,
		                                     СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                     СтруктураШапкиДокумента.КурсДокумента,
		                                     СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                     СтруктураШапкиДокумента.КратностьДокумента,
		                                     СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.СуммаУпр = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
											СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
											СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
											СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

											 
		СтрокаТаблицы.НДСУпр    = - ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                     СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                     СтруктураШапкиДокумента.КурсДокумента,
		                                     СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                     СтруктураШапкиДокумента.КратностьДокумента,
		                                     СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.ПлюсСебестоимость   = ПересчитатьИзВалютыВВалюту(0.00, СтруктураШапкиДокумента.ВалютаДокумента,
		                                     СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                     СтруктураШапкиДокумента.КурсДокумента,
		                                     СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                     СтруктураШапкиДокумента.КратностьДокумента,
		                                     СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета) * СтрокаТаблицы.КоличествоДок;
											 
		СтрокаТаблицы.МинусСебестоимость= - СтрокаТаблицы.ПлюсСебестоимость;

		СтрокаТаблицы.СуммаСНДСДок = СтрокаТаблицы.СуммаДок + ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

	КонецЦикла;

	ТаблицаТоваров.Колонки.Добавить("СуммаПродажная", ПолучитьОписаниеТиповЧисла(15, 2));
КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Надо добавить колонки "СуммаБезНДС".
	ТаблицаТоваров.Колонки.Добавить("ЦенаВВалютеЗаказа"  , ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("Стоимость"          , ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"           , ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок" , ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДок"       , ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"             , ПолучитьОписаниеТиповЧисла(15,2));
	
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетовФлагОперации", ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпрФлагОперации"           , ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДокФлагОперации"       , ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("НДСУпрФлагОперации"             , ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

		// Счиатем, что реализация выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, ВалютаДокумента, 
			                                  СтруктураШапкиДокумента.ВалютаЗаказа,
			                                  СтруктураШапкиДокумента.КурсДокумента, 
			                                  СтруктураШапкиДокумента.КурсЗаказа,
			                                  СтруктураШапкиДокумента.КратностьДокумента, 
			                                  СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Количество) Тогда
			СтрокаТаблицы.Количество = 0;
		КонецЕсли;

		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Цена * СтрокаТаблицы.КоличествоДок;
		Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
			СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.СтоимостьБезСкидок + РассчитатьСуммуНДС(СтрокаТаблицы.СтоимостьБезСкидок, 
			УчитыватьНДС, СуммаВключаетНДС, ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
		КонецЕсли;

		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		СтрокаТаблицы.СуммаУпр = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КурсДокумента, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.СтоимостьБезСкидок = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьБезСкидок, ВалютаДокумента, 
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КурсДокумента, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                                 СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
										 КратностьВзаиморасчетов);

		СтрокаТаблицы.Стоимость = СтрокаТаблицы.СуммаУпр;
		
		СтрокаТаблицы.СуммаСНДСДок = СтрокаТаблицы.СуммаДок + ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		
		СтрокаТаблицы.НДСУпр = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);		
		
		СтрокаТаблицы.СуммаВзаиморасчетовФлагОперации = ?(СтрокаТаблицы.СуммаВзаиморасчеты < 0.00, - СтрокаТаблицы.СуммаВзаиморасчетов, СтрокаТаблицы.СуммаВзаиморасчетов);
		СтрокаТаблицы.СуммаУпрФлагОперации = ?(СтрокаТаблицы.СуммаВзаиморасчеты < 0.00, - СтрокаТаблицы.СуммаУпр, СтрокаТаблицы.СуммаУпр);
		СтрокаТаблицы.НДСУпрФлагОперации = ?(СтрокаТаблицы.НДСВзаиморасчеты < 0.00, - СтрокаТаблицы.НДС, СтрокаТаблицы.НДС);
		
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ТаблицаПоТоварамВозврат, ТаблицаПоТоварамВзаиморасчеты)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	ТаблицаПоТоварамВозврат = ТаблицаТоваров.СкопироватьКолонки();
	// Удалим из таблицы строки, по которым не было изменений
	КоличествоСтрок = ТаблицаТоваров.Количество();
	Для Индекс = 1 по КоличествоСтрок Цикл
		
		СтрокаТаблицы = ТаблицаТоваров[КоличествоСтрок - Индекс];
		
		Если СтрокаТаблицы.Количество = 0 И СтрокаТаблицы.Сумма = 0 И СтрокаТаблицы.НДС = 0 Тогда
			ТаблицаТоваров.Удалить(СтрокаТаблицы);
		Иначе
			Если СтрокаТаблицы.ФлагОперации = ЛОЖЬ И СтрокаТаблицы.ОтражатьТоварныйУчет Тогда
			//Если СтрокаТаблицы.ОтражатьТоварныйУчет Тогда
				СтрокаТовараВозврат = ТаблицаПоТоварамВозврат.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТовараВозврат, СтрокаТаблицы);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьПродажи", ПолучитьОписаниеТиповЧисла(15,2));
	
	ТаблицаПоТоварамВозврат.Колонки.Добавить("СуммаБезНДС", ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаПоТоварамВозврат.Колонки.Добавить("СтоимостьПродажи", ПолучитьОписаниеТиповЧисла(15,2));
	
	// Вызываем отдельные процедуры подготовки для упр. учета
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	ПодготовитьТаблицуТоваровУпрВозврат(ТаблицаПоТоварамВозврат, СтруктураШапкиДокумента);
	
	ТаблицаПоТоварамВзаиморасчеты = ТаблицаТоваров.Скопировать();
	
	СтруктураИменКолонок = Новый Структура();
	СтруктураИменКолонок.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетовФлагОперации");
	СтруктураИменКолонок.Вставить("СуммаУпр", "СуммаУпрФлагОперации");
	СтруктураИменКолонок.Вставить("СуммаСНДСДок", "СуммаСНДСДокФлагОперации");
	СтруктураИменКолонок.Вставить("НДСУпр", "НДСУпрФлагОперации");

	ПереименоватьКолонку(ТаблицаПоТоварамВзаиморасчеты, СтруктураИменКолонок);
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента)

	ТаблицаУслуг = РезультатЗапросаПоУслугам.Выгрузить();
	
	// Удалим из таблицы строки, по которым не было изменений
	КоличествоСтрок = ТаблицаУслуг.Количество();
	Для Индекс = 1 по КоличествоСтрок Цикл
		
		СтрокаТаблицы = ТаблицаУслуг[КоличествоСтрок - Индекс];
		
		Если СтрокаТаблицы.Количество = 0 И СтрокаТаблицы.Сумма = 0 И СтрокаТаблицы.НДС = 0 Тогда
			ТаблицаУслуг.Удалить(СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаУслуг.Колонки.Добавить("СуммаБезНДС", ПолучитьОписаниеТиповЧисла(15,2));
	Для каждого СтрокаТаблицы Из ТаблицаУслуг Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

	КонецЦикла;
	
	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	ПодготовитьТаблицуУслугУпр(ТаблицаУслуг, СтруктураШапкиДокумента);

	Возврат ТаблицаУслуг;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуУслугУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Надо добавить нужные при проведении колонки.
	ТаблицаТоваров.Колонки.Добавить("ЦенаВВалютеЗаказа"   , ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов" , ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("Стоимость"           , ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"            , ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок"  , ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"              , ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		// Счиатем, что реализация выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, ВалютаДокумента, 
			                                  СтруктураШапкиДокумента.ВалютаЗаказа,
			                                  СтруктураШапкиДокумента.КурсДокумента, 
			                                  СтруктураШапкиДокумента.КурсЗаказа,
			                                  СтруктураШапкиДокумента.КратностьДокумента, 
			                                  СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;

		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
		Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
			СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.СтоимостьБезСкидок + РассчитатьСуммуНДС(СтрокаТаблицы.СтоимостьБезСкидок, 
			УчитыватьНДС, СуммаВключаетНДС, ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
		КонецЕсли;

		СтрокаТаблицы.СтоимостьБезСкидок = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьБезСкидок, ВалютаДокумента, 
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КурсДокумента, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);


		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;

		СтрокаТаблицы.СуммаУпр = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента,
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента,
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов,
		   ВалютаДокумента,
		   СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		   СтруктураШапкиДокумента.КурсДокумента,
		   КурсВзаиморасчетов,
		   СтруктураШапкиДокумента.КратностьДокумента,
		   КратностьВзаиморасчетов);

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.НДСУпр     = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.Стоимость = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДСУпр;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуУслугУпр()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(
		СтруктураШапкиДокумента,
		ТаблицаПоТоварам,
		ТаблицаПоУслугам,
		ТаблицаПоТоварамВозврат,
		ТаблицаПоТоварамВзаиморасчеты,
		ТаблицаПоТоварамНДС
	) Экспорт

	// Получим необходимые данные для проведения и проверки заполнения данных по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"                       , "Номенклатура");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"                   , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Цена"                               , "Цена");
	СтруктураПолей.Вставить("Номенклатура"                       , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                             , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                              , "Номенклатура.Набор");
	//СтруктураПолей.Вставить("Комплект"                           , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Качество"                           , "Качество");
	СтруктураПолей.Вставить("Склад"                              , "Склад");
	СтруктураПолей.Вставить("ВидСклада"                          , "Склад.ВидСклада");
	СтруктураПолей.Вставить("СтавкаНДС"                          , "СтавкаНДС");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"         , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"                  , "СерияНоменклатуры");
	СтруктураПолей.Вставить("КлючСтроки"                         , "КлючСтроки");
	СтруктураПолей.Вставить("ЗаказПокупателя"                    , "ЗаказПокупателя");
	СтруктураПолей.Вставить("СпособСписанияОстаткаТоваров"       , "СпособСписанияОстаткаТоваров");
	СтруктураПолей.Вставить("Цена"                               , "Цена");
	СтруктураПолей.Вставить("ОтражатьТоварныйУчет"               , "ОтражатьТоварныйУчет");
	СтруктураПолей.Вставить("ДокументПартии"                     , "Ссылка.ИсправляемыйДокументРеализации");
	
	
	// Сформируем структуру сложных полей
	СтруктураСложныхПолей = Новый Структура;
	СтруктураСложныхПолей.Вставить("КоличествоВзаиморасчеты"      , "(Количество - КоличествоДоИзменения) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураСложныхПолей.Вставить("Количество"                   , "
	|ВЫБОР	КОГДА (Количество - КоличествоДоИзменения) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент > 0.00
	|		ТОГДА (Количество - КоличествоДоИзменения) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		КОГДА (Количество - КоличествоДоИзменения) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент < 0.00
	|		ТОГДА - (Количество - КоличествоДоИзменения) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		ИНАЧЕ (Количество - КоличествоДоИзменения) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|КОНЕЦ");
	
	СтруктураСложныхПолей.Вставить("КоличествоДокВзаиморасчеты"   , "(Количество - КоличествоДоИзменения) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураСложныхПолей.Вставить("КоличествоДок"                , "
	|ВЫБОР	КОГДА (Количество - КоличествоДоИзменения) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент > 0.00
	|		ТОГДА (Количество - КоличествоДоИзменения) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		КОГДА (Количество - КоличествоДоИзменения) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент < 0.00
	|		ТОГДА - (Количество - КоличествоДоИзменения) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		ИНАЧЕ (Количество - КоличествоДоИзменения) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|КОНЕЦ");
	
	СтруктураСложныхПолей.Вставить("КоличествоВЕдиницахДокументаВзаиморасчеты" , "Количество - КоличествоДоИзменения");
	СтруктураСложныхПолей.Вставить("КоличествоВЕдиницахДокумента" , "
	|ВЫБОР	КОГДА Количество - КоличествоДоИзменения > 0.00
	|		ТОГДА Количество - КоличествоДоИзменения
	|		КОГДА Количество - КоличествоДоИзменения < 0.00
	|		ТОГДА - (Количество - КоличествоДоИзменения)
	|		ИНАЧЕ Количество - КоличествоДоИзменения
	|КОНЕЦ");
	
	СтруктураСложныхПолей.Вставить("СуммаВзаиморасчеты"           , "Сумма - СуммаДоИзменения");
	СтруктураСложныхПолей.Вставить("Сумма"                        , "
	|ВЫБОР	КОГДА Сумма - СуммаДоИзменения > 0.00
	|		ТОГДА Сумма - СуммаДоИзменения
	|		КОГДА Сумма - СуммаДоИзменения < 0.00
	|		ТОГДА - (Сумма - СуммаДоИзменения)
	|		ИНАЧЕ Сумма - СуммаДоИзменения
	|КОНЕЦ");
	
	СтруктураСложныхПолей.Вставить("СуммаДокВзаиморасчеты"        , "Сумма - СуммаДоИзменения");
	СтруктураСложныхПолей.Вставить("СуммаДок"                     , "
	|ВЫБОР	КОГДА Сумма - СуммаДоИзменения > 0.00
	|		ТОГДА Сумма - СуммаДоИзменения
	|		КОГДА Сумма - СуммаДоИзменения < 0.00
	|		ТОГДА - (Сумма - СуммаДоИзменения)
	|		ИНАЧЕ Сумма - СуммаДоИзменения
	|КОНЕЦ");
	
	СтруктураСложныхПолей.Вставить("НДСВзаиморасчеты"             , "СуммаНДС - СуммаНДСДоИзменения");
	СтруктураСложныхПолей.Вставить("НДС"                          , "
	|ВЫБОР	КОГДА СуммаНДС - СуммаНДСДоИзменения > 0.00
	|		ТОГДА СуммаНДС - СуммаНДСДоИзменения
	|		КОГДА СуммаНДС - СуммаНДСДоИзменения < 0.00
	|		ТОГДА - (СуммаНДС - СуммаНДСДоИзменения)
	|		ИНАЧЕ СуммаНДС - СуммаНДСДоИзменения
	|КОНЕЦ");
	СтруктураСложныхПолей.Вставить("НДСДокВзаиморасчеты"          , "СуммаНДС - СуммаНДСДоИзменения");
	СтруктураСложныхПолей.Вставить("НДСДок"                       , "
	|ВЫБОР	КОГДА СуммаНДС - СуммаНДСДоИзменения > 0.00
	|		ТОГДА СуммаНДС - СуммаНДСДоИзменения
	|		КОГДА СуммаНДС - СуммаНДСДоИзменения < 0.00
	|		ТОГДА - (СуммаНДС - СуммаНДСДоИзменения)
	|		ИНАЧЕ СуммаНДС - СуммаНДСДоИзменения
	|КОНЕЦ");
	
	СтруктураСложныхПолей.Вставить("ФлагОперации"                 , "
	|ВЫБОР	КОГДА (Количество - КоличествоДоИзменения) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент > 0.00 ИЛИ Цена-ЦенаДоИзменения>0.00
	|		ТОГДА ИСТИНА
	|		КОГДА (Количество - КоличествоДоИзменения) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент < 0.00 ИЛИ Цена-ЦенаДоИзменения<0.00
	|		ТОГДА ЛОЖЬ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|КОНЕЦ");

	РезультатЗапросаПоТоварам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей,СтруктураСложныхПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ТаблицаПоТоварамВозврат, ТаблицаПоТоварамВзаиморасчеты);

	// Получим необходимые данные для проведения и проверки заполнения данных по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"                       , "Номенклатура");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"                   , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Цена"                               , "Цена");
	СтруктураПолей.Вставить("Номенклатура"                       , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                             , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                              , "Номенклатура.Набор");
	//СтруктураПолей.Вставить("Комплект"                           , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Качество"                           , "Качество");
	СтруктураПолей.Вставить("Склад"                              , "Склад");
	СтруктураПолей.Вставить("ВидСклада"                          , "Склад.ВидСклада");
	СтруктураПолей.Вставить("СтавкаНДС"                          , "СтавкаНДС");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"         , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"                  , "СерияНоменклатуры");
	СтруктураПолей.Вставить("КлючСтроки"                         , "КлючСтроки");
	СтруктураПолей.Вставить("ЗаказПокупателя"                    , "ЗаказПокупателя");
	СтруктураПолей.Вставить("СпособСписанияОстаткаТоваров"       , "СпособСписанияОстаткаТоваров");
	СтруктураПолей.Вставить("Цена"                               , "Цена");
	СтруктураПолей.Вставить("ОтражатьТоварныйУчет"               , "ОтражатьТоварныйУчет");
	СтруктураПолей.Вставить("ДокументПартии"                     , "Ссылка.ИсправляемыйДокументРеализации");
	
	// Сформируем структуру сложных полей
	СтруктураСложныхПолей = Новый Структура();
	СтруктураСложныхПолей.Вставить("Количество"  , "(Количество - КоличествоДоИзменения) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураСложныхПолей.Вставить("Сумма"       , "Сумма - СуммаДоИзменения");
	СтруктураСложныхПолей.Вставить("НДС"         , "СуммаНДС - СуммаНДСДоИзменения");
	СтруктураСложныхПолей.Вставить("СуммаНДС"	 , "СуммаНДС - СуммаНДСДоИзменения");
	
	РезультатЗапросаПоТоварамНДС = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей,СтруктураСложныхПолей);
	ТаблицаПоТоварамНДС = РезультатЗапросаПоТоварамНДС.Выгрузить();
	ТаблицаПоТоварамНДС.Колонки.Добавить("СуммаБезНДС", ПолучитьОписаниеТиповЧисла(15,2));
	
	// Получим необходимые данные для проведения и проверки заполнения данных по табличной части "Услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"        , "Номенклатура");
	СтруктураПолей.Вставить("Содержание"          , "Содержание");
	СтруктураПолей.Вставить("Услуга"              , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"               , "Номенклатура.Набор");
	//СтруктураПолей.Вставить("Комплект"            , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Цена"                , "Цена");
	СтруктураПолей.Вставить("СтавкаНДС"           , "СтавкаНДС");
	СтруктураПолей.Вставить("ЗаказПокупателя"     , "ЗаказПокупателя");
	СтруктураПолей.Вставить("ОтражатьТоварныйУчет", "ОтражатьТоварныйУчет");
	
	// Сформируем структуру сложных полей
	СтруктураСложныхПолей = Новый Структура;
	СтруктураСложныхПолей.Вставить("Количество"   , "Количество - КоличествоДоИзменения");
	СтруктураСложныхПолей.Вставить("Сумма"        , "Сумма - СуммаДоИзменения");
	СтруктураСложныхПолей.Вставить("НДС"          , "СуммаНДС - СуммаНДСДоИзменения");

	//Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам 
	//	И Не ЗначениеЗаполнено(Проект)
	//Тогда
	//	СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	//КонецЕсли;
	
	РезультатЗапросаПоУслугам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей,СтруктураСложныхПолей);

	// Подготовим таблицу тары для проведения.
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);

КонецПроцедуры // СформироватьТаблицыДокумента()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТоварамВозврат, ТаблицаПоТоварамВзаиморасчеты, ТаблицаПоТоварамНДС;
	Перем ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам;
	
	//Если мУдалятьДвижения Тогда
	//	УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	//КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(
		СтруктураШапкиДокумента,
		ТаблицаПоТоварам,
		ТаблицаПоУслугам,
		ТаблицаПоТоварамВозврат,
		ТаблицаПоТоварамВзаиморасчеты,
		ТаблицаПоТоварамНДС
	);
	
	//Проверим на возможность проведения в БУ и НУ.
	Если ОтражатьВБухгалтерскомУчете 
		ИЛИ ОтражатьВНалоговомУчете
	Тогда
		ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, ВалютаДокумента,
											 ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, мВалютаРегламентированногоУчета, 
											 Ложь, Отказ, Заголовок, "", СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
											 СтруктураШапкиДокумента.РасчетыВУсловныхЕдиницах);
	КонецЕсли;
	
	Если (СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером 
		ИЛИ ТипЗнч(СтруктураШапкиДокумента.ДокументРеализацииСсылка) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"))
		И НЕ Отказ Тогда
		
		СтруктураТаблицыВыручки = Новый структура("НомерСтроки, Номенклатура, ВидЦенности, Ценность, Партия, Услуга 
		|,СтавкаНДС, Сумма, СуммаВал, НДС, НДСВал, СуммаБезНДС, СуммаБезНДСВал
		|,Комиссионный,Комитент,ДоговорКомиссии,ВалютаРасчетовСКомитентом
		|,СуммаСписания, Количество");
		
		//Формируем таблицу выручки с нужной структурой и заполняем по таблице услуг
		ТаблицаВыручки = СформироватьТаблицуЗначений(ТаблицаПоУслугам,СтруктураТаблицыВыручки,,Истина);
		
		ВыручкаПоТоварам = СформироватьТаблицуЗначений(ТаблицаПоТоварамНДС,СтруктураТаблицыВыручки,,Истина);
		ЗагрузитьВТаблицуЗначений(ВыручкаПоТоварам,ТаблицаВыручки);
		
		ТаблицаВыручки.ЗаполнитьЗначения(Ложь, "Комиссионный");
		ТаблицаВыручки.ЗаполнитьЗначения(0,    "Количество");
		
		ТаблицаАвансов = Новый ТаблицаЗначений;
		ТаблицаАвансов.Колонки.Добавить("ДокументОплаты");
		//ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаВыручки, ТаблицаАвансов, Отказ, Заголовок);
		
	КонецЕсли;

	Если СтруктураШапкиДокумента.КорректироватьБУиНУ И НЕ Отказ Тогда
		
		ПроводитьПоВзаиморасчетам = СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
		мСтруктураПараметровВзаиморасчетов.Вставить("ПроводитьПоВзаиморасчетам", ПроводитьПоВзаиморасчетам);

		ТаблицаПоТоварамРеализация    = ТаблицаПоТоварам.СкопироватьКолонки();
		ТаблицаПоУслугамРеализация    = ТаблицаПоУслугам.СкопироватьКолонки();
		
		Для итератор = 0 По Макс(ТаблицаПоТоварам.Количество(), ТаблицаПоУслугам.Количество()) Цикл
			Если итератор <= ТаблицаПоТоварам.Количество() - 1 Тогда
				СтрокаТаблицы = ТаблицаПоТоварам.Получить(итератор);
				
				Если СтрокаТаблицы.ФлагОперации = ИСТИНА И СтрокаТаблицы.ОтражатьТоварныйУчет Тогда
				//Если СтрокаТаблицы.ОтражатьТоварныйУчет Тогда
					СтрокаТоваровРеализация = ТаблицаПоТоварамРеализация.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТоваровРеализация, СтрокаТаблицы);
				КонецЕсли;
			КонецЕсли;
			Если итератор <= ТаблицаПоУслугам.Количество() - 1 Тогда
				СтрокаТаблицы = ТаблицаПоУслугам.Получить(итератор);
				Если СтрокаТаблицы.Количество <> 0.00 И СтрокаТаблицы.ОтражатьТоварныйУчет Тогда
					СтрокаУслугРеализация = ТаблицаПоУслугамРеализация.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаУслугРеализация, СтрокаТаблицы);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураПодготовленныхТаблиц = Новый Структура("Товары, Услуги", ТаблицаПоТоварамВзаиморасчеты, ТаблицаПоУслугам);
		мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураПодготовленныхТаблиц", СтруктураПодготовленныхТаблиц);
		ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(
			ТаблицаПоВзаиморасчетам,
			ТаблицаПоРасчетам,
			ЭтотОбъект,
			мСтруктураПараметровВзаиморасчетов,
			СтруктураШапкиДокумента,
			Отказ,
			Заголовок
		);

		// Проверить заполнение ТЧ.
		ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам,      СтруктураШапкиДокумента, Отказ, Заголовок);
		ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам,      СтруктураШапкиДокумента, Отказ, Заголовок);
		
		ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок);
		
		// Проверить заполнение ТЧ "Состав набора".
		СтруктураПолей = Новый Структура;
		СтруктураПолей.Вставить("Номенклатура");
		СтруктураПолей.Вставить("Количество");
		СтруктураПолей.Вставить("Цена");
		ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "СоставНабора", СтруктураПолей, Отказ, Заголовок);
		
		// Движения по документу
		Если Не Отказ Тогда
			// Подготовим таблицу скидок для проведения.
			ТаблицаПоСкидкам = Новый ТаблицаЗначений();
			ДвиженияПоРегистрам(
				РежимПроведения,
				СтруктураШапкиДокумента,
				ТаблицаПоТоварамРеализация,
				ТаблицаПоСкидкам,
				ТаблицаПоУслугамРеализация,
				ТаблицаПоТоварамВозврат,
				ТаблицаПоВзаиморасчетам,
				ТаблицаПоРасчетам,
                Отказ,
				Заголовок
			);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ОбработкаПроведения()

Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения = Неопределено) Экспорт

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Для определения где нужно проверять склад: в шапке или в ТЧ.
	СтруктураШапкиДокумента.Вставить("СкладВТабличнойЧасти", мУказаниеСкладовВТЧ);

	// Для определения где нужно проверять заказ: в шапке или в ТЧ.
	ЗаказВТабличнойЧасти = ЕстьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента);
	СтруктураШапкиДокумента.Вставить("ЗаказВТабличнойЧасти", ЗаказВТабличнойЧасти);
	
	// Дополним шапку исходным исправляемым документом реализации
	СтруктураШапкиДокумента.Вставить("ИсходныйИсправляемыйДокументРеализации", ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Истина));

	СтруктураШапкиДокумента.Вставить("ВидДокумента", Метаданные().Имя);
	СтруктураШапкиДокумента.Вставить("ПредставлениеДокумента", СокрЛП(ЭтотОбъект));
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = СформироватьДеревоПолейЗапросаПоШапке();
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов",                       "ВедениеВзаиморасчетов");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "РасчетыВУсловныхЕдиницах",                    "РасчетыВУсловныхЕдиницах");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов",                        "ВалютаВзаиморасчетов");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация",                                 "ДоговорОрганизация");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора",                                 "ВидДоговора");
	//ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВестиПоДокументамРасчетовСКонтрагентом",      "ВестиПоДокументамРасчетовСКонтрагентом");
	//ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ОбособленныйУчетТоваровПоЗаказамПокупателей", "ОбособленныйУчетТоваровПоЗаказамПокупателей");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организации",          "ОтражатьВРегламентированномУчете",            "ОтражатьВРегламентированномУчете");
	//ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка",               "ВидОперации",                                 "СделкаВидОперации");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад",                "ВидСклада",                                   "ВидСклада");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",      "ВестиПартионныйУчетПоСкладам",                "ВестиПартионныйУчетПоСкладам");
	//ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",      "ВестиУчетТоваровОрганизацийВРазрезеСкладов",  "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	//ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",     "ВедениеУчетаПоПроектам",                       "ВедениеУчетаПоПроектам");
	
	// Если сделка - Заказ покупателя, то надо цену для проведения пересчитать в валюту заказа.
	Если ЗначениеЗаполнено(Сделка) 
		И ТипЗнч(Сделка) <> Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "ВалютаДокумента"                            , "ВалютаЗаказа");
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "КурсВзаиморасчетов"                         , "КурсВзаиморасчетовЗаказа");
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "КратностьВзаиморасчетов"                    , "КратностьВзаиморасчетовЗаказа");
	КонецЕсли;

	// Дополним полями, нужными для регл. и упр. учета
	
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Если надо пересчитывать цену в валюту заказа. то в структуре должна быть заполнена валюта заказа.
	ВалютаЗаказа = Неопределено;
	НужнаЦенаЗаказа = Ложь;
	Если СтруктураШапкиДокумента.Свойство("ВалютаЗаказа", ВалютаЗаказа) Тогда
		НужнаЦенаЗаказа = Истина;
		Если ВалютаЗаказа = мВалютаРегламентированногоУчета Тогда
			КурсЗаказа      = 1;
			КратностьЗаказа = 1;
		Иначе //ВалютаЗаказа = ВалютаВзаиморасчетов
			КурсЗаказа      = СтруктураШапкиДокумента.КурсВзаиморасчетовЗаказа;
			КратностьЗаказа = СтруктураШапкиДокумента.КратностьВзаиморасчетовЗаказа;
		КонецЕсли;
		СтруктураШапкиДокумента.Вставить("КурсЗаказа"     , КурсЗаказа);
		СтруктураШапкиДокумента.Вставить("КратностьЗаказа", КратностьЗаказа);
	КонецЕсли;

	СтруктураШапкиДокумента.Вставить("НужнаЦенаЗаказа", НужнаЦенаЗаказа);

	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "";//ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);
	
	////////////////////////////////////////////////////////////////////
	// Сведения о корректируемом документе
	ДокументРеализацииСсылка = ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Истина);
	СтруктураШапкиДокумента.Вставить("ДокументРеализацииДата", 	?(ЗначениеЗаполнено(ДокументРеализацииСсылка),ДокументРеализацииСсылка.Дата, Дата));
	СтруктураШапкиДокумента.Вставить("ДокументРеализацииСсылка", 	ДокументРеализацииСсылка);
    СтруктураШапкиДокумента.Вставить("ДокументОснование",	 		ДокументРеализации);
	СтруктураШапкиДокумента.Вставить("ДокументОснованиеДата",	 	?(ЗначениеЗаполнено(ДокументРеализации), ДокументРеализации.Дата, Дата));

КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.КорректироватьБУиНУ Тогда
		// Укажем, что надо проверить:
		СтруктураОбязательныхПолей = Новый Структура("Организация, ДокументРеализации");
	Иначе
		// Укажем, что надо проверить:
		СтруктураОбязательныхПолей = Новый Структура("Организация, ДокументРеализации, ВалютаДокумента, Контрагент, ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов");
		// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
			И НЕ ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента) Тогда
			СтруктураОбязательныхПолей.Вставить("Сделка", 
			"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам""! 
			|Заполните поле ""Заказ покупателя""!");
		ИначеЕсли СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			СтруктураОбязательныхПолей.Вставить("Сделка", 
			"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам""! 
			|Заполните поле ""Счет покупателю""!");
		КонецЕсли;

		// Склад заполняем только, если у нас есть строки в таблице "Товары"
		// и склад не в ТЧ.
		Если  Не мУказаниеСкладовВТЧ
		    И Товары.Количество() > 0 Тогда
			СтруктураОбязательныхПолей.Вставить("Склад");
		КонецЕсли;
		СтруктураОбязательныхПолей.Вставить("ВидПередачи");
		
		Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			СообщитьОбОшибке("Документ не может осуществлять реализацию с НТТ!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
	// Вызовем общую процедуру для проверки проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	
	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументРеализации", ДокументРеализации);
		Запрос.УстановитьПараметр("ЭтотДокумент", Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КорректировкаРеализации.Ссылка
		|ИЗ
		|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|ГДЕ
		|	КорректировкаРеализации.ДокументРеализации = &ДокументРеализации
		|	И КорректировкаРеализации.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение)
		|	И КорректировкаРеализации.Ссылка <> &ЭтотДокумент
		|	И КорректировкаРеализации.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	КорректировкаРеализации.Дата УБЫВ";
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			СообщитьОбОшибке("К документу "+ ДокументРеализации +" введено больше одного корректировочного документа с видом операции ""Исправление первичных документов"". 
			|Каждую последующую корректировку следует вводить на основании предыдущей.", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
	                                                      ДокументОбъект, СтруктураПараметров, СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт
														  
	Если СтруктураПараметров.Свойство("ПроводитьПоВзаиморасчетам") И НЕ СтруктураПараметров.ПроводитьПоВзаиморасчетам Тогда
		ТаблицаПоВзаиморасчетам = Новый ТаблицаЗначений;
		ТаблицаПоРасчетам       = Новый ТаблицаЗначений;
		Возврат;
	КонецЕсли; 
	
	ПроверитьЗаполнениеТабличнойЧастиДокументыРасчетовСКонтрагентом(ДокументОбъект, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ТаблицаСделок = СформироватьТаблицуСделокДляПроведенияПоВзаиморасчетам(СтруктураПараметров, СтруктураШапкиДокумента);
	
	ТаблицаПоВзаиморасчетам = ПодготовитьТаблицуПоВзаиморасчетам(ДокументОбъект, СтруктураПараметров, СтруктураШапкиДокумента, ТаблицаСделок, Отказ, Заголовок);
	
	ТаблицаПоРасчетам = ПодготовитьТаблицуПоРасчетам(ТаблицаСделок, СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры // ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам()

Процедура ПроверитьЗаполнениеТабличнойЧастиДокументыРасчетовСКонтрагентом(ДокументОбъект, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ВидДокумента = "КорректировкаПоступления"
			ИЛИ СтруктураШапкиДокумента.ВидДокумента = "КорректировкаРеализации" Тогда
		// Табличной части ДокументыРасчетовСКонтрагентом нет - проверку выполнять не нужно
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
		
		// Укажем, что надо проверить:
		СтруктураОбязательныхПолей = Новый Структура("ДокументРасчетовСКонтрагентом, СуммаВзаиморасчетов");
		Если СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете 
			И СтруктураШапкиДокумента.ВалютаВзаиморасчетов <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			СтруктураОбязательныхПолей.Вставить("СуммаРегл");
		КонецЕсли;
		
		// Теперь вызовем общую процедуру проверки.
		ПроверитьЗаполнениеТабличнойЧасти(ДокументОбъект, "ДокументыРасчетовСКонтрагентом", СтруктураОбязательныхПолей, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиДокументыРасчетовСКонтрагентом()

Функция СформироватьТаблицуСделокДляПроведенияПоВзаиморасчетам(СтруктураПараметров, СтруктураШапкиДокумента) 
	
	//МогутБытьЗаказыВТабличныхЧастях = СтруктураШапкиДокумента.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам;
	МогутБытьЗаказыВТабличныхЧастях = ложь;
	Если МогутБытьЗаказыВТабличныхЧастях 
		И СтруктураПараметров.Свойство("ЕстьЗаказыВТабличныхЧастях") И СтруктураПараметров.ЕстьЗаказыВТабличныхЧастях = Истина Тогда
		ЕстьЗаказыВТабличныхЧастях = Истина;
		ИмяКолонкиСделка = СтруктураПараметров.ИмяЗаказаВТабличныхЧастях;
	Иначе
		ЕстьЗаказыВТабличныхЧастях = Ложь;
		ИмяКолонкиСделка = "Сделка";
	КонецЕсли;
	
	ТаблицаСделок = Новый ТаблицаЗначений;
	ТаблицаСделок.Колонки.Добавить(ИмяКолонкиСделка);
	
	ОбщиеЧисловыеКолонки = "СуммаВзаиморасчетов, СуммаРегл, СуммаУпр";
	Если СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеДопРасходов" Тогда
		ДопЧисловыеКолонки = "СуммаВзаиморасчетовРаспределения, СуммаРеглРаспределения, СуммаУпрРаспределения";
	КонецЕсли;
	ЧисловыеКолонки = ОбщиеЧисловыеКолонки + ", " + ДопЧисловыеКолонки;
	СтруктураЧисловыхКолонок = Новый Структура(ЧисловыеКолонки);
	Для каждого ЧисловаяКолонка Из СтруктураЧисловыхКолонок Цикл
		ТаблицаСделок.Колонки.Добавить(ЧисловаяКолонка.Ключ, ПолучитьОписаниеТиповЧисла(15,2));
	КонецЦикла;
	
	Если НЕ СтруктураПараметров.Свойство("ИмяСделкиВШапкеДокумента") Тогда
		ИмяСделкиВШапкеДокумента = "Сделка";
	Иначе // Например, для некоторых документов это может быть "Заказ"
		ИмяСделкиВШапкеДокумента = СтруктураПараметров.ИмяСделкиВШапкеДокумента;
	КонецЕсли;
	
	Для каждого ПодготовленнаяТаблица Из СтруктураПараметров.СтруктураПодготовленныхТаблиц Цикл
		
		ИмяТаблицы = ПодготовленнаяТаблица.Ключ;
		Таблица    = ПодготовленнаяТаблица.Значение;
		
		Для каждого СтрокаТаблицы Из Таблица Цикл
			СтрокаСделки = ТаблицаСделок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСделки, СтрокаТаблицы);
			Если НЕ ЕстьЗаказыВТабличныхЧастях Тогда
				СтрокаСделки[ИмяКолонкиСделка] = СтруктураШапкиДокумента[ИмяСделкиВШапкеДокумента];
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеДопРасходов" Тогда
		Для каждого СтрокаСделки Из ТаблицаСделок Цикл
			СтрокаСделки.СуммаВзаиморасчетов = СтрокаСделки.СуммаВзаиморасчетов + СтрокаСделки.СуммаВзаиморасчетовРаспределения;
			СтрокаСделки.СуммаРегл           = СтрокаСделки.СуммаРегл + СтрокаСделки.СуммаРеглРаспределения;
			СтрокаСделки.СуммаУпр            = СтрокаСделки.СуммаУпр + СтрокаСделки.СуммаУпрРаспределения;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаСделок.Свернуть(ИмяКолонкиСделка, ОбщиеЧисловыеКолонки);
	
	ТаблицаСделок.Колонки[ИмяКолонкиСделка].Имя = "Сделка";
	
	Если ТипЗнч(СтруктураШапкиДокумента) = Тип("Структура") И СтруктураШапкиДокумента.Свойство("Ссылка")
		И (ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КорректировкаПоступления") ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации"))
		И (ТаблицаСделок.Итог("СуммаВзаиморасчетов") = 0.00 И ТаблицаСделок.Итог("СуммаУпр") = 0.00)
	Тогда
		ТаблицаСделок.Очистить();
	КонецЕсли;
	
	Возврат ТаблицаСделок;
	
КонецФункции

Функция ПодготовитьТаблицуПоВзаиморасчетам(ДокументОбъект, СтруктураПараметров, СтруктураШапкиДокумента, ТаблицаСделокДокумента, Отказ, Заголовок)
	
	Если Отказ Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	ТаблицаСделок = ТаблицаСделокДокумента.Скопировать();
	Для каждого СтрокаСделки Из ТаблицаСделок Цикл
		Если СтрокаСделки.СуммаУпр = 0 Тогда
			СтрокаСделки.СуммаУпр = ПересчитатьИзВалютыВВалюту(СтрокаСделки.СуммаВзаиморасчетов, 
			                        СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			                        СтруктураШапкиДокумента.КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		    	                    СтруктураШапкиДокумента.КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			ТаблицаСделок.ЗаполнитьЗначения(Неопределено, "Сделка");
		Иначе //.ПоСчетам
			ТаблицаСделок.ЗаполнитьЗначения(СтруктураШапкиДокумента["Сделка"], "Сделка");
		КонецЕсли;
		ТаблицаСделок.Свернуть("Сделка", "СуммаВзаиморасчетов, СуммаРегл, СуммаУпр");
	КонецЕсли;
	
	//Если НЕ СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
	//	
	//	ТаблицаПоВзаиморасчетам = ТаблицаСделок.Скопировать();
	//	
	//	Возврат ТаблицаПоВзаиморасчетам;
	//	
	//КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		СделкаДляВзаиморасчетов = Неопределено;
	Иначе //.ПоСчетам или .ПоЗаказам (по заказам - если в ТЧ ДокументыРасчетовСКонтрагентом нет колонки Сделка)
		СделкаДляВзаиморасчетов = СтруктураШапкиДокумента["Сделка"];
	КонецЕсли;
	
	// Создаем колонки таблицы явным образом, а не загружаем таб.часть документа,
	// чтобы не устанавливалось ограничение типов колонок в соответствие с типом реквизитов документа
	ТаблицаПоВзаиморасчетам = Новый ТаблицаЗначений;
	ТаблицаПоВзаиморасчетам.Колонки.Добавить("Сделка");
	ТаблицаПоВзаиморасчетам.Колонки.Добавить("ДокументРасчетовСКонтрагентом");
	ТаблицаПоВзаиморасчетам.Колонки.Добавить("ДатаОплаты", ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТаблицаПоВзаиморасчетам.Колонки.Добавить("СуммаВзаиморасчетов", ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаПоВзаиморасчетам.Колонки.Добавить("СуммаРегл", ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаПоВзаиморасчетам.Колонки.Добавить("СуммаУпр", ПолучитьОписаниеТиповЧисла(15,2));
	Если СтруктураШапкиДокумента.ВидДокумента <> "КорректировкаПоступления"
		И СтруктураШапкиДокумента.ВидДокумента <> "КорректировкаРеализации" Тогда
		
		Для каждого СтрокаТабЧасти Из ДокументОбъект.ДокументыРасчетовСКонтрагентом Цикл
			СтрокаВзаиморасчетов = ТаблицаПоВзаиморасчетам.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВзаиморасчетов, СтрокаТабЧасти);
			Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаВзаиморасчетов.Сделка) Тогда
				СтрокаВзаиморасчетов.Сделка = СделкаДляВзаиморасчетов;
			КонецЕсли;
			СтрокаВзаиморасчетов.СуммаУпр = ПересчитатьИзВалютыВВалюту(СтрокаВзаиморасчетов.СуммаВзаиморасчетов, 
			                                СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			                                СтруктураШапкиДокумента.КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
			                                СтруктураШапкиДокумента.КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета
			);
		КонецЦикла;
			
	КонецЕсли;
	
	ЭтоВозврат = СтруктураПараметров.Свойство("ЭтоВозврат") И СтруктураПараметров.ЭтоВозврат;
	Если ЭтоВозврат Тогда
		ИзменитьЗнакКолонокТаблицы(ТаблицаПоВзаиморасчетам, Новый Структура("СуммаВзаиморасчетов, СуммаРегл, СуммаУпр"));
	КонецЕсли;
	
	ДокументРасчетовСКонтрагентом = ПолучитьДокументРасчетовСКонтрагентом(СтруктураШапкиДокумента);
	
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
		
		ВсегоСуммаВзаиморасчетов = ТаблицаСделок.Итог("СуммаВзаиморасчетов");
		ВсегоСуммаПредоплаты     = ТаблицаПоВзаиморасчетам.Итог("СуммаВзаиморасчетов");
		Если ВсегоСуммаВзаиморасчетов <> ВсегоСуммаПредоплаты Тогда
			СтрокаВзаиморасчетов = ТаблицаПоВзаиморасчетам.Добавить();
			
			СтрокаВзаиморасчетов.Сделка                        = СделкаДляВзаиморасчетов;
			СтрокаВзаиморасчетов.ДокументРасчетовСКонтрагентом = ДокументРасчетовСКонтрагентом;
			
			СтрокаВзаиморасчетов.СуммаВзаиморасчетов = ВсегоСуммаВзаиморасчетов - ВсегоСуммаПредоплаты;
			СтрокаВзаиморасчетов.СуммаРегл           = ПересчитатьИзВалютыВВалюту(СтрокаВзаиморасчетов.СуммаВзаиморасчетов,
				СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
				СтруктураШапкиДокумента.КурсВзаиморасчетов, 1,
				СтруктураШапкиДокумента.КратностьДокумента, 1);
			СтрокаВзаиморасчетов.СуммаУпр            = ТаблицаСделок.Итог("СуммаУпр") - ТаблицаПоВзаиморасчетам.Итог("СуммаУпр");
		КонецЕсли; 
		
	Иначе //.ПоЗаказам
		
		// Рассчитаем неоплаченные суммы по каждой строке таблицы сделок
		Для каждого СтрокаСделки Из ТаблицаСделок Цикл
			Для каждого СтрокаВзаиморасчетов Из ТаблицаПоВзаиморасчетам Цикл
				Если СтрокаСделки.Сделка = СтрокаВзаиморасчетов.Сделка Тогда
					СтрокаСделки.СуммаВзаиморасчетов = СтрокаСделки.СуммаВзаиморасчетов - СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
					СтрокаСделки.СуммаУпр            = СтрокаСделки.СуммаУпр - СтрокаВзаиморасчетов.СуммаУпр;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Теперь по каждой строке таблицы сделок, где предоплата не совпадает с реализацией (поступлением), 
		// добавляем строки в таблицу взаиморасчетов со ссылкой на проводимый документ
		Для каждого СтрокаСделки Из ТаблицаСделок Цикл
			Если СтрокаСделки.СуммаВзаиморасчетов <> 0 Тогда
				СтрокаВзаиморасчетов = ТаблицаПоВзаиморасчетам.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаВзаиморасчетов, СтрокаСделки);
				
				СтрокаВзаиморасчетов.ДокументРасчетовСКонтрагентом = ДокументРасчетовСКонтрагентом;
				СтрокаВзаиморасчетов.СуммаРегл           = ПересчитатьИзВалютыВВалюту(СтрокаВзаиморасчетов.СуммаВзаиморасчетов,
					СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
					СтруктураШапкиДокумента.КурсВзаиморасчетов, 1,
					СтруктураШапкиДокумента.КратностьДокумента, 1);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидДокумента <> "КорректировкаПоступления"
		И СтруктураШапкиДокумента.ВидДокумента <> "КорректировкаРеализации" Тогда
		Множитель = ?(ЭтоВозврат, -1, 1);
		Для каждого СтрокаВзаиморасчетов Из ТаблицаПоВзаиморасчетам Цикл
			
			Если СтрокаВзаиморасчетов.СуммаВзаиморасчетов * Множитель < 0 Тогда
				ПредставлениеСделки = ?(НЕ ЗначениеЗаполнено(СтрокаВзаиморасчетов.Сделка), "не указана", Строка(СтрокаВзаиморасчетов.Сделка));
				СообщитьОбОшибке("Указана сумма предоплаты (сделка: " + ПредставлениеСделки + ") больше возможной по документу на " 
				+ (-1 * СтрокаВзаиморасчетов.СуммаВзаиморасчетов * Множитель) + " " + СтруктураШапкиДокумента.ВалютаВзаиморасчетов, Отказ, Заголовок);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаПоВзаиморасчетам;
	
КонецФункции // ПодготовитьТаблицуПоВзаиморасчетам()

Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, ЕдиницаИзмерения");

	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");

	Если ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента) Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПокупателя");
	КонецЕсли;

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия Тогда
		СтруктураОбязательныхПолей.Вставить("Качество");
	КонецЕсли;

	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	// Складов с видом НТТ здесь быть не должно.
	ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок, "ВидСклада");

	// Вызовем общую процедуру для проверки проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	//ПроверитьРеквизитыЗаказов(ЭтотОбъект, "Товары", "ЗаказПокупателя", Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок)

	ИмяТабличнойЧасти = "Услуги";

	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		Если ТаблицаПоУслугам.Количество() > 0 Тогда
			Сообщить("Документ передачи на комиссию не может содержать услуг!");
		КонецЕсли;
	КонецЕсли;

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Содержание");

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	Если ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента) Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПокупателя");
	КонецЕсли;

	КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	// Вызовем общую процедуру для проверки проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь товаров быть не должно.
	ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Функция ЕстьЗаказВТабличнойЧасти(а=неопределено,б=неопределено)
	возврат ложь;
КонецФункции
Функция ПроверятьЗаказВТабличнойЧасти(а=неопределено,б=неопределено)
	возврат ложь;
КонецФункции

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок) Экспорт

	мУчетнаяПолитика   = ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ);
	ТабУчетнаяПолитика = ПолучитьУчетнуюПолитику(Дата);

	мПорядокСписанияПартий = Новый Структура("Упр,Бух,Нал");

	Если ОтражатьВУправленческомУчете Тогда
		ПодготовитьПараметрыУчетнойПолитикиУпр(ТабУчетнаяПолитика, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()
// Процедура определяет параметры упр. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиУпр(ТабУчетнаяПолитика, Отказ, Заголовок)

	// Получим метод списания партий FIFO / LIFO / По средней
	СтрокаУчетнойПолитики = ТабУчетнаяПолитика[0];
	мПорядокСписанияПартий.Вставить("Упр", СтрокаУчетнойПолитики.СпособОценкиМПЗУпр);

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиУпр()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения)

	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"                  , "ВалютаУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета"              , "КурсВалютыУправленческогоУчета");

	// Для контроля остатков по взаиморасчетам
	ДополнитьДеревоПолейЗапросаПоШапкеДляКонтроляВзаиморасчетовУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);

КонецПроцедуры

Процедура ИзменитьЗнакКолонокТаблицы(Таблица, СтруктураКолонок) Экспорт

	Для каждого СтрокаТаблицы Из Таблица Цикл
		Для каждого ОписаниеКолонки Из СтруктураКолонок Цикл
		
			ИмяКолонки = ОписаниеКолонки.Ключ;
			ЗначениеКолонки = СтрокаТаблицы[ИмяКолонки];
			Если ТипЗнч(ЗначениеКолонки) = Тип("Число") Тогда
				СтрокаТаблицы[ИмяКолонки] = -1 * ЗначениеКолонки;
			КонецЕсли;
		
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры


// Функция возвращает документ расчетов с контрагентом
//
Функция ПолучитьДокументРасчетовСКонтрагентом(СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ВидДокумента = "КорректировкаПоступления" Тогда
		Возврат СтруктураШапкиДокумента.ИсходныйИсправляемыйДокументПоступления;
	ИначеЕсли СтруктураШапкиДокумента.ВидДокумента = "КорректировкаРеализации" Тогда
		Возврат СтруктураШапкиДокумента.ИсходныйИсправляемыйДокументРеализации;
	Иначе
		Возврат СтруктураШапкиДокумента.Ссылка;
	КонецЕсли;
	
КонецФункции
// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	Если ЗначениеЗаполнено(Сделка) Тогда
		СтруктураОбязательныхПолей.Вставить("СпособСписанияОстаткаТоваров");
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьТаблицуПоРасчетам(ТаблицаСделок, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если Отказ ИЛИ НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	ТаблицаПоРасчетам = ТаблицаСделок.Скопировать();
	
	УдаляемыеСтроки = Новый Массив;
	Для каждого СтрокаТаблицы Из ТаблицаПоРасчетам Цикл
		
		ДолжноБытьДвижениеПоРасчетам = НЕ ЗначениеЗаполнено(СтрокаТаблицы.Сделка) 
		                           ИЛИ (ТипЗнч(СтрокаТаблицы.Сделка) <> Тип("ДокументСсылка.ЗаказПокупателя") 
								     И ТипЗнч(СтрокаТаблицы.Сделка) <> Тип("ДокументСсылка.ЗаказПоставщику"));
		Если НЕ ДолжноБытьДвижениеПоРасчетам Тогда
			УдаляемыеСтроки.Добавить(СтрокаТаблицы);
		КонецЕсли;
	
	КонецЦикла;
	
	Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ТаблицаПоРасчетам.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	Для каждого СтрокаСделки Из ТаблицаПоРасчетам Цикл
		Если СтрокаСделки.СуммаУпр = 0 Тогда
			СтрокаСделки.СуммаУпр = ПересчитатьИзВалютыВВалюту(СтрокаСделки.СуммаВзаиморасчетов, 
				СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
				СтруктураШапкиДокумента.КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
				СтруктураШапкиДокумента.КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаПоРасчетам;

КонецФункции

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  ТаблицаПоСкидкам          - таблица значений, содержащая данные для проведения и проверки ТЧ Скидки,
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ "Услуги",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(
		РежимПроведения,
		СтруктураШапкиДокумента,
		ТаблицаПоТоварамРеализация,
		ТаблицаПоСкидкам,
		ТаблицаПоУслугам,
		ТаблицаПоТоварамВозврат,
		ТаблицаПоВзаиморасчетам,
		ТаблицаПоРасчетам,
		Отказ,
		Заголовок
	)
	
	// Проводить по партиям сразу нужно если установлен параметр
	// учетной политики СписыватьПартииПриПроведенииДокументов
	ПроводитьПоПартиям = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата).СписыватьПартииПриПроведенииДокументов;
	
	ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(
		ЭтотОбъект,
		СтруктураШапкиДокумента,
		мСтруктураПараметровВзаиморасчетов,
		ТаблицаПоВзаиморасчетам,
		ТаблицаПоРасчетам,
		ВидДвиженияНакопления.Приход,
		Отказ,
		Заголовок
	);
		
	//Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
	//	ДвиженияПоРегистрамОперативныхВзаиморасчетов(
	//		РежимПроведения,
	//		ТаблицаПоВзаиморасчетам,
	//		Отказ,
	//		Заголовок,
	//		СтруктураШапкиДокумента
	//	);
	//КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		возврат;
	КонецЕсли;
	
	///////////////////////////////////////
	// Проводится как реализация товаров //
	///////////////////////////////////////
	Если ТаблицаПоТоварамРеализация.Количество() > 0.00
		ИЛИ ТаблицаПоУслугам.Количество() > 0.00
	Тогда

		ТаблицаПоКомплектам = СформироватьТаблицуКомплектующих(ТаблицаПоТоварамРеализация, ЭтотОбъект);

		ДвиженияПоРегистрамУпрРеализация(
			РежимПроведения,
			СтруктураШапкиДокумента,
			ТаблицаПоТоварамРеализация,
			ТаблицаПоКомплектам,
			ТаблицаПоСкидкам,
			ТаблицаПоУслугам,
			ТаблицаПоВзаиморасчетам,
			ТаблицаПоРасчетам,
			Отказ,
			Заголовок
		);

		ДвиженияПоРегиструТоварыОрганизацийРеализация(
			РежимПроведения,
			СтруктураШапкиДокумента,
			ТаблицаПоКомплектам,
			ТаблицаПоУслугам,
			Отказ,
			Заголовок
		);

		ДвиженияПоРегиструСписанныеТоварыРеализация(
			СтруктураШапкиДокумента,
			ТаблицаПоКомплектам,
			Отказ,
			Заголовок
		);

		Если ТаблицаПоКомплектам.Количество() > 0.00 тогда

			// Зарегистрируем в последовательности УУ
			Если ОтражатьВУправленческомУчете Тогда
				ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
				ЗаписьРегистрации.Период      = Дата;
			КонецЕсли;
		КонецЕсли;

		Если ПроводитьПоПартиям Тогда
			//ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
			//ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
			//Плотников, для онлайн магазинов движения по рег. ПродажиСебестоимость нужно
			// провести по другому подразделению 25.03.2016
			//17.05.16 Смирнов

			//Если Контрагент.КонтрагентДляРезерваИМ <> Справочники.Контрагенты.ПустаяСсылка() Тогда
			//	ТаблицаСЗамененнымПодразделением = Движения.СписанныеТовары.Выгрузить();
			//	ТаблицаСЗамененнымПодразделением.ЗаполнитьЗначения(Справочники.Подразделения.НайтиПоКоду("00139"), "Подразделение");
			//	ДвижениеПартийТоваров(Ссылка, ТаблицаСЗамененнымПодразделением);
			//Иначе
				ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
			//КонецЕсли; //Плотников 25.03.2016

		Иначе
			// В неоперативном режиме границы последовательностей сдвигаются назад, если они позже документа.
			Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
				СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	//////////////////////////////////////////////////
	// Проводится как возврат товаров от покупателя //
	//////////////////////////////////////////////////
	Если ТаблицаПоТоварамВозврат.Количество() > 0.00 Тогда
		ТаблицаПоКомплектам = СформироватьТаблицуКомплектующих(ТаблицаПоТоварамВозврат, ЭтотОбъект, СтруктураШапкиДокумента);

		ДвиженияПоРегистрамУпрВозврат(
			РежимПроведения,
			СтруктураШапкиДокумента,
			ТаблицаПоТоварамВозврат,
			ТаблицаПоКомплектам,
			ТаблицаПоВзаиморасчетам,
			ТаблицаПоРасчетам,
			ТаблицаПоСкидкам,
			Отказ,
			Заголовок
		);
		ДвиженияПоРегиструТоварыОрганизацийВозврат(
			РежимПроведения,
			ТаблицаПоКомплектам,
			Отказ,
			Заголовок,
			СтруктураШапкиДокумента
		);
		
		ДвиженияПоРегиструСписанныеТоварыВозврат(
			СтруктураШапкиДокумента,
			ТаблицаПоКомплектам,
			Отказ,
			Заголовок
		);
		
		Если ТаблицаПоТоварамВозврат.Количество() > 0 Тогда
			// Зарегистрируем в последовательности УУ
			Если ОтражатьВУправленческомУчете Тогда
				ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
				ЗаписьРегистрации.Период      = Дата;
			КонецЕсли;
		КонецЕсли;

		Если ПроводитьПоПартиям Тогда
			// Проводки формируются и в модуле документа, и при списании партий
			Если ОтражатьВУправленческомУчете Тогда
				Движения.ПартииТоваровНаСкладах.Записать();
				Движения.ПродажиСебестоимость.Записать();
			КонецЕсли;
			
			//ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
			//Плотников, для онлайн магазинов движения по рег. ПродажиСебестоимость нужно
			// провести по другому подразделению 25.03.2016
			//15.05.16 Смирнов
			//Если Контрагент.КонтрагентДляРезерваИМ <> Справочники.Контрагенты.ПустаяСсылка() Тогда
			//	ТаблицаСЗамененнымПодразделением = Движения.СписанныеТовары.Выгрузить();
			//	ТаблицаСЗамененнымПодразделением.ЗаполнитьЗначения(Справочники.Подразделения.НайтиПоКоду("00139"), "Подразделение");
			//	ДвижениеПартийТоваров(Ссылка, ТаблицаСЗамененнымПодразделением);
			//Иначе
				ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
			//КонецЕсли; //Плотников 25.03.2016

		Иначе
			// В неоперативном режиме границы последовательностей сдвигаются назад, если они позже документа.
			Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
				СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете)
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Формирует копию таблицы значений, с заменой "комплекта" на "комплектующие".
//
// Параметры:
//  ТаблицаИсточник         - таблица значений источник, содержащая комплекты,
//  ДокументОбъект          – объект редактируемого документа,
//  СтруктураШапкиДокумента - структура шапки документа.
//
// Возвращаемое значение:
//  Таблица значений.
//
Функция СформироватьТаблицуКомплектующих(ТаблицаИсточник, ДокументОбъект, СтруктураШапкиДокумента = Неопределено) Экспорт

	ТаблицаРезультат   = ТаблицаИсточник.Скопировать();
	ТаблицаРезультат.Колонки.Добавить("НоменклатураКомплекта");
	ТаблицаРезультат.Колонки.Добавить("ХарактеристикаКомплекта");
	ТаблицаРезультат.Колонки.Добавить("КоличествоКомплекта");
	Возврат ТаблицаРезультат;

КонецФункции // СформироватьТаблицуКомплектующих()

Процедура ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(ДокументОбъект, СтруктураШапкиДокумента, 
	                                                    СтруктураПараметров, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
	                                                    ВидДвижения, Отказ, Заголовок) Экспорт
													  
	// По регистру ВзаиморасчетыСКонтрагентами
	
	Если ТаблицаПоВзаиморасчетам.Количество() > 0 Тогда
		
		НаборДвиженийВзаиморасчеты = ДокументОбъект.Движения.ВзаиморасчетыСКонтрагентами;
		
		ТаблицаДвижений = НаборДвиженийВзаиморасчеты.Выгрузить();
		
		ЗагрузитьВТаблицуЗначений(ТаблицаПоВзаиморасчетам, ТаблицаДвижений);
		
		//ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
		//ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент, "Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");
		
		НаборДвиженийВзаиморасчеты.мПериод          = СтруктураШапкиДокумента.Дата;
		НаборДвиженийВзаиморасчеты.мТаблицаДвижений = ТаблицаДвижений;
		
		// Проверка остатков при оперативном проведении
		ОтключитьКонтрольВзаиморасчетов = СтруктураШапкиДокумента.Свойство("ОтключитьКонтрольВзаиморасчетов") 
		                                И СтруктураШапкиДокумента.ОтключитьКонтрольВзаиморасчетов;
		Если СтруктураШапкиДокумента.РежимПроведения = РежимПроведенияДокумента.Оперативный
			И НЕ ОтключитьКонтрольВзаиморасчетов Тогда
			НаборДвиженийВзаиморасчеты.КонтрольОстатков(ДокументОбъект, "ДокументыРасчетовСКонтрагентом", СтруктураШапкиДокумента, Отказ, Заголовок, "СуммаВзаиморасчетов");
		КонецЕсли;
		
		Если Не Отказ Тогда
			ВыполнитьДвижениеПоРегистру(НаборДвиженийВзаиморасчеты, ВидДвижения);
		КонецЕсли;
		
	КонецЕсли;
	
	// По регистру РасчетыСКонтрагентами
	
	Если ТаблицаПоРасчетам.Количество() > 0 Тогда
		
		НаборДвиженийРасчеты = ДокументОбъект.Движения.РасчетыСКонтрагентами;
		
		ТаблицаДвижений = НаборДвиженийРасчеты.Выгрузить();
		
		ЗагрузитьВТаблицуЗначений(ТаблицаПоРасчетам, ТаблицаДвижений);
		
		//ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
		//ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент, "Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");
		
		Если СтруктураПараметров.Свойство("ЭтоВозврат") И СтруктураПараметров.ЭтоВозврат Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.РасчетыВозврат.Возврат, "РасчетыВозврат");
		Иначе
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.РасчетыВозврат.Расчеты, "РасчетыВозврат");
		КонецЕсли;
		
		НаборДвиженийРасчеты.мПериод          = СтруктураШапкиДокумента.Дата;
		НаборДвиженийРасчеты.мТаблицаДвижений = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			ВыполнитьДвижениеПоРегистру(НаборДвиженийРасчеты, ВидДвижения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамУпрРеализация(
		РежимПроведения,
		СтруктураШапкиДокумента,
		ТаблицаПоТоварам,
		ТаблицаПоКомплектам,
		ТаблицаПоСкидкам,
		ТаблицаПоУслугам,
		ТаблицаПоВзаиморасчетам,
		ТаблицаПоРасчетам,
		Отказ,
		Заголовок
	)

		
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		Если СуммаДокумента <> 0 Тогда

		// ТОВАРЫ ПО РЕГИСТРУ Продажи.

		НаборДвижений = Движения.Продажи;

		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		СтруктураИменКолонок = Новый Структура("НДСВрем", "НДС");
		ПереименоватьКолонку(ТаблицаПоТоварам, СтруктураИменКолонок);
		СтруктураИменКолонок = Новый Структура("НДС", "НДСУпр");
		ПереименоватьКолонку(ТаблицаПоТоварам, СтруктураИменКолонок);
		
		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
		
		ИсходныйДокументРеализации = ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Истина);
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		//ТаблицаДвижений.ЗаполнитьЗначения(Контрагент , "Контрагент");
		//ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(ИсходныйДокументРеализации,"ДокументПродажи");
		
		//ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
		//Плотников, для онлайн магазинов движения по рег. ПродажиСебестоимость нужно
			// провести по другому подразделению 25.03.2016
			//15.05.16 Смирнов
			//Если Контрагент.КонтрагентДляРезерваИМ <> Справочники.Контрагенты.ПустаяСсылка() Тогда
		//	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Подразделения.НайтиПоКоду("00139"),"Подразделение");
		//Иначе
			ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
		//КонецЕсли;
			//Плотников
		
		// Когда взаиморасчеты ведутся по счетам, поле заказ покупателя в таб.части будет пустое (нет типа Документ.СчетНаОплату)
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам или
			СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка, "ЗаказПокупателя");
		КонецЕсли;


		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.Продажи.ВыполнитьДвижения();
		КонецЕсли;

		// УСЛУГИ ПО РЕГИСТРУ Продажи.

		НаборДвижений = Движения.Продажи;

		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		СтруктураИменКолонок = Новый Структура("НДСВрем", "НДС");
		ПереименоватьКолонку(ТаблицаПоУслугам, СтруктураИменКолонок);
		СтруктураИменКолонок = Новый Структура("НДС", "НДСУпр");
		ПереименоватьКолонку(ТаблицаПоУслугам, СтруктураИменКолонок);

		// Заполним таблицу движений.
			
		ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаДвижений);
		
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		//ТаблицаДвижений.ЗаполнитьЗначения(Контрагент , "Контрагент");
		//ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументПродажи");
		ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
		// Когда взаиморасчеты ведутся по счетам, поле заказ покупателя в таб.части будет пустое (нет типа Документ.СчетНаОплату)
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам или 
			СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка, "ЗаказПокупателя");
		КонецЕсли;

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.Продажи.ВыполнитьДвижения();
		КонецЕсли;
		
		СтруктураИменКолонок = Новый Структура("НДСУпр", "НДС");
		ПереименоватьКолонку(ТаблицаПоТоварам, СтруктураИменКолонок);
		СтруктураИменКолонок = Новый Структура("НДС", "НДСВрем");
		ПереименоватьКолонку(ТаблицаПоТоварам, СтруктураИменКолонок);
		СтруктураИменКолонок = Новый Структура("НДСУпр", "НДС");
		ПереименоватьКолонку(ТаблицаПоУслугам, СтруктураИменКолонок);
		СтруктураИменКолонок = Новый Структура("НДС", "НДСВрем");
		ПереименоватьКолонку(ТаблицаПоУслугам, СтруктураИменКолонок);
		
	КонецЕсли;

	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада Тогда
		 //ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.

		ВидСкладаОпт  = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Оптовый);
		РезультатЗапросаКомплектыОпт = ОтобратьСтрокиПоКритериям(ТаблицаПоКомплектам, ВидСкладаОпт);

		Если Не РезультатЗапросаКомплектыОпт.Пустой() Тогда
		
			Если НЕ Отказ Тогда
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("КомплектыОпт", РезультатЗапросаКомплектыОпт.Выгрузить());

				ТаблицыДанныхДокумента = ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыНаСкладах, СтруктТаблицДокумента);
				
				ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			КонецЕсли;

		КонецЕсли;

		ВидСкладаРозн = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Розничный);
		РезультатЗапросаКомплектыРозн = ОтобратьСтрокиПоКритериям(ТаблицаПоКомплектам, ВидСкладаРозн);

		//Если Не РезультатЗапросаКомплектыРозн.Пустой() Тогда

		//	Если Не Отказ Тогда
		//		ТаблицаКомплектыРозн = РезультатЗапросаКомплектыРозн.Выгрузить();

		//		ТаблицаКомплектыРозн.Колонки.Добавить("СуммаПродажная", ПолучитьОписаниеТиповЧисла(15, 2));

		//		Если ТаблицаКомплектыРозн.Количество() <> 0 Тогда
		//			ТаблицаПоЦенам = СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаКомплектыРозн.ВыгрузитьКолонку("Склад"),
		//			ТаблицаКомплектыРозн.ВыгрузитьКолонку("Номенклатура")).Выгрузить();

		//			ЗаполнитьКолонкуСуммаПродажная(ТаблицаКомплектыРозн, ТаблицаПоЦенам, "ВидСклада");
		//		КонецЕсли;
		//		
		//		СтруктТаблицДокумента = Новый Структура;
		//		СтруктТаблицДокумента.Вставить("КомплектыРозн", ТаблицаКомплектыРозн);

		//		ТаблицыДанныхДокумента = ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРознице, СтруктТаблицДокумента);

		//		ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРознице, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		//	КонецЕсли;

		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам", ТаблицаПоУслугам);
		
		ТаблицыДанныхДокумента = ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ЗаказыПокупателей, СтруктТаблицДокумента);
		//УдалитьСтрокиИзТаблицДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя");
		
		УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
		УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Перечисления.СтатусыПартийТоваров.Купленный, "ТаблицаПоТоварам,ТаблицаПоУслугам");
		УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя",    СтруктураШапкиДокумента.Сделка);
		
		ЗаписатьТаблицыДокументаВРегистр(Движения.ЗаказыПокупателей, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
	КонецЕсли;

	// Если есть списание из резерва, то надо списать резерв
	ТаблицаПоТоварамИзРезерва = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамИзРезерва.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамИзРезерва.Получить(Сч);
		Если СтрокаТаблицы.СпособСписанияОстаткаТоваров <> Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) Тогда
			ТаблицаПоТоварамИзРезерва.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;

	Если ТаблицаПоТоварамИзРезерва.Количество() > 0 Тогда
		НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		// Заполним таблицу движений.
		СтруктураИменКолонок = Новый Структура("ДокументРезерва", "ЗаказПокупателя");
		ПереименоватьКолонку(ТаблицаПоТоварамИзРезерва, СтруктураИменКолонок);
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамИзРезерва, ТаблицаДвижений);

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		//// Проверка остатков при оперативном проведении.
		//Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		//	НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		//КонецЕсли;

		Если Не Отказ Тогда
			Движения.ТоварыВРезервеНаСкладах.ВыполнитьРасход();
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамУпрРеализация()

// Процедура формирует движение в регистр на основании данных в таблицах документов
//
//Параметры:
//  Движение              - движение документа, в которое необходимо произвести добавление записей (т.е. регистр)
//  ВидДвижения           - вид движения накопления (приход/расход)
//  СтруктТаблицДокумента - структура таблиц документа, сформированная функцией ЗагрузитьТаблицыДокументаВСтруктуру()
//  ДатаДвижения          - дата на которую будут формироваться записи
//
Процедура ЗаписатьТаблицыДокументаВРегистр(Движение, ВидДвижения, СтруктТаблицДокумента, ДатаДвижения) Экспорт
	
	Движение.мПериод = ДатаДвижения;
	Для Каждого ТабЧасть Из СтруктТаблицДокумента Цикл
	
		Если ТабЧасть.Значение.Количество() = 0 Тогда
			Продолжить; // Пропускаем пустые табличные части
		КонецЕсли;
		
		Движение.мТаблицаДвижений = ТабЧасть.Значение;
		Если ВидДвижения = Неопределено Тогда // Регистр сведений
			ВыполнитьДвижениеПоРегистру(Движение);
		Иначе // Регистр накопления
			ВыполнитьДвижениеПоРегистру(Движение, ВидДвижения);
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры // ЗаписатьТаблицыДокументаВРегистр()


// Процедура заполняет структуру таблиц документа, значением которое будет одинаковым для всех таблиц (например значением шапки документа)
//
// Параметры:
//  СтруктТаблицДокумента   - структура таблиц документа, сформированная функцией ЗагрузитьТаблицыДокументаВСтруктуру()
//  ИмяПоля                 - имя колонки в таблицах локумента, в которую будет установлено новое значение
//  УстанавливаемоеЗначение - значение, которое надо установить в таблицы документа
//  СтрТабЧасти             - имена таб. частей документа в которые необходимо установить новое значение. строка, в которой
//                            имена таб. частей разделены запятыми. необязательный параметр, по умолчанию - все таблицы.
//
Процедура УстановитьЗначениеВТаблицыДокумента(СтруктТаблицДокумента, ИмяПоля, УстанавливаемоеЗначение, СтрТабЧасти = "") Экспорт
	
	СтруктТабЧасти = ?( ПустаяСтрока(СтрТабЧасти), СтруктТаблицДокумента, Новый Структура(СтрТабЧасти));
	Для Каждого ТабЧасть Из СтруктТабЧасти Цикл
	
		Если СтруктТаблицДокумента[ТабЧасть.Ключ].Количество() > 0 Тогда
		    СтруктТаблицДокумента[ТабЧасть.Ключ].ЗаполнитьЗначения( УстанавливаемоеЗначение, ИмяПоля);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // УстановитьЗначениеВТаблицыДокумента()

Процедура УдалитьСтрокиИзТаблицДокумента(ТаблицыДляДвиженийПоЗаказам, ИмяПоля) Экспорт

	Для Каждого ТабЧасть Из ТаблицыДляДвиженийПоЗаказам Цикл
		КолвоСтрок = ТабЧасть.Значение.Количество();
		Для Инд = 1 По КолвоСтрок Цикл
			ТекСтрока = ТабЧасть.Значение[КолвоСтрок - Инд];

			Если НЕ ЗначениеЗаполнено(ТекСтрока[ИмяПоля]) Тогда
				ТабЧасть.Значение.Удалить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // УдалитьСтрокиИзТаблицДокумента()


// Функция загружает таблицы документа в таблицы соответствующие структуре регистров
//
// Параметры:
//  Движение - движение документа (т.е. регистр)
//  СтруктТаблицДокумента - структура содержашая таблицы документа. ключ - имя таблицы, значение - таблица значений с данными документа.
//
// Возвращаемое значение:
//  Структура, в которой ключ - это имя таблицы документа, соответствующий параметру СтруктТаблицДокумента,
//  значение - таблица значений, со структурой соответствующей структуре параметра (т.е. регистра) Движение
//  В таблицы значений данные загружаются по соответствию с имен полей.
//
Функция ЗагрузитьТаблицыДокументаВСтруктуру(Движение, СтруктТаблицДокумента) Экспорт
	
	ПустаяТабРегистра = Движение.Выгрузить();
	ПустаяТабРегистра.Очистить();
	
	СтруктДанных = Новый Структура;
	Для Каждого ТабЧасть Из СтруктТаблицДокумента Цикл
	
		ТабРегистра = ПустаяТабРегистра.Скопировать();
		
		Если ТабЧасть.Значение <> Неопределено И ТабЧасть.Значение.Количество() > 0 Тогда
			ЗагрузитьВТаблицуЗначений( ТабЧасть.Значение, ТабРегистра);
		КонецЕсли;
		
		СтруктДанных.Вставить( ТабЧасть.Ключ, ТабРегистра);
		
	КонецЦикла;
	
	Возврат СтруктДанных;

КонецФункции // ЗагрузитьТаблицыДокументаВСтруктуру()

Процедура ДвиженияПоРегиструТоварыОрганизацийРеализация(
		РежимПроведения,
		СтруктураШапкиДокумента,
		ТаблицаПоТоварам,
		ТаблицаПоУслугам,
		Отказ,
		Заголовок
	)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
	 Или Отказ Тогда
		Возврат;
	КонецЕсли;

	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада Тогда
								  
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
		НаборДвижений = Движения.ТоварыОрганизаций;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");

		//Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
		//	ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
		//КонецЕсли;

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		//// Проверка остатков при оперативном проведении.
		//Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		//	НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		//КонецЕсли;

		Если Не Отказ Тогда
			Движения.ТоварыОрганизаций.ВыполнитьРасход();
		КонецЕсли;
		
	КонецЕсли;

	// Перекинем остатки по организации на комиссионера.
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
		НаборДвижений = Движения.ТоварыОрганизаций;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,"Комиссионер");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ТоварыОрганизаций.ВыполнитьПриход();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизаций()

Процедура ДвиженияПоРегиструСписанныеТоварыРеализация(
		СтруктураШапкиДокумента,
		ТаблицаПоТоварам,
		Отказ,
		Заголовок
	) Экспорт

	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.

	ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

	// Недостающие поля.
	Для каждого Строка Из ТаблицаДвижений Цикл

		Строка.НомерСтрокиДокумента = Строка.НомерСтроки;
		//Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Товары;

	КонецЦикла;

	// Если резервирование под заказ - заказ партии
	//Если СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
	//	ТаблицаЗаказов = ТаблицаПоТоварам.ВыгрузитьКолонку("ЗаказПокупателя");
	//	ТаблицаДвижений.ЗагрузитьКолонку(ТаблицаЗаказов, "ЗаказПартии");
	//КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");

	Если Не ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	КонецЕсли;

	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.Реализация, "КодОперацииПартииТоваров");

	ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПередачаНаКомиссию, "КодОперацииПартииТоваров");

		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,                "ДокументПередачи");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию, "СтатусПередачи");

	КонецЕсли;
	
	// Документы с видом передачи по ордеру сразу не проводятся
	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "НеСписывать");
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");

	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	// Данные для регл учета (НДС)
	//ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);

	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	Если Движения.СписанныеТовары.Модифицированность() Тогда
		Движения.СписанныеТовары.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструСписанныеТоварыРеализация()

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,"ДопустимыйСтатус3");

	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	
	// Данные для заполнения отчетов комитенту
	ТаблицаДвижений.ЗаполнитьЗначения(ВалютаДокумента, "ВалютаДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.КурсДокумента, "КурсДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.КратностьДокумента, "КратностьДокумента");
	
	Для каждого Строка Из ТаблицаДвижений Цикл
		
		СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));
		Строка.СуммаЗадолженности   = СтрокаТЧ.СуммаСНДСДок;
		
		Если СтруктураШапкиДокумента.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			Строка.ЗаказСписания = СтруктураШапкиДокумента.Сделка;//Для заполнения счета в регистре ПродажиСебестоимость
		Иначе	
			Строка.ЗаказСписания = СтрокаТЧ.ЗаказПокупателя;
		КонецЕсли;	
	КонецЦикла;
	
	// Учет по проектам
	//ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВедениеУчетаПоПроектам,   "ВедениеУчетаПоПроектам");
	//Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И ЗначениеЗаполнено(Проект) Тогда
	//	ТаблицаДвижений.ЗаполнитьЗначения(Проект,"Проект");
	//КонецЕсли;

КонецПроцедуры 

// По результату запроса по шапке документа формируем движения по упр. регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпрВозврат(
		РежимПроведения,
		СтруктураШапкиДокумента,
		ТаблицаПоТоварам,
		ТаблицаПоКомплектам,
		ТаблицаПоВзаиморасчетам,
		ТаблицаПоРасчетам,
		ТаблицаПоСкидкам,
		Отказ,
		Заголовок
	);

	Если ОтражатьВУправленческомУчете Тогда
		// Таблица для движений с отрицательным количеством
		ТаблицаПоТоварамМинус = ТаблицаПоТоварам.Скопировать();
		СтруктураИменКолонок = Новый Структура("Количество", "МинусКоличество");
		ПереименоватьКолонку(ТаблицаПоТоварамМинус, СтруктураИменКолонок);
		
		// Таблица для движений с положительным количеством
		ТаблицаПоТоварамПлюс = ТаблицаПоТоварам.Скопировать();
		СтруктураИменКолонок = Новый Структура("Количество", "КоличествоДок");
		ПереименоватьКолонку(ТаблицаПоТоварамПлюс, СтруктураИменКолонок);
		
		// Таблица для движений с отрицательным количеством
		ТаблицаПоКомплектамМинус = ТаблицаПоКомплектам.Скопировать();
		СтруктураИменКолонок = Новый Структура("Количество", "МинусКоличество");
		ПереименоватьКолонку(ТаблицаПоКомплектамМинус, СтруктураИменКолонок);

		// Таблица для движений с положительным количеством
		ТаблицаПоКомплектамПлюс = ТаблицаПоКомплектам.Скопировать();
		СтруктураИменКолонок = Новый Структура("Количество", "КоличествоДок");
		ПереименоватьКолонку(ТаблицаПоКомплектамПлюс, СтруктураИменКолонок);
		
		ТабЗаказыПокупателей = ТаблицаПоТоварамМинус.Скопировать();
		МассивУдаляемыхСтрок = Новый Массив;
		Для Каждого СтрокаТЧ Из ТабЗаказыПокупателей Цикл
			//Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ЗаказПокупателя) Тогда
			//	МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
			//КонецЕсли;
		КонецЦикла;

		Если ТабЗаказыПокупателей.Количество() > МассивУдаляемыхСтрок.Количество() Тогда // Есть строки с Заказом покупателя
		
			ТабЗаказыПокупателей.Колонки.Добавить("СтатусПартии", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПартийТоваров"));

			Для Каждого СтрокаТЧ Из МассивУдаляемыхСтрок Цикл
				ТабЗаказыПокупателей.Удалить(СтрокаТЧ);
			КонецЦикла;
			Для Каждого СтрокаТЧ Из ТабЗаказыПокупателей Цикл
				СтрокаТЧ.СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный;
				СтрокаТЧ.ЗаказПокупателя = СтруктураШапкиДокумента.Сделка;
			КонецЦикла;
			
			// Движения по заказам покупателей.
			НаборДвижений = Движения.ЗаказыПокупателей;
			
			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТабЗаказыПокупателей, ТаблицаДвижений);
			
			// Считаем что нельзя выбирать заказы с разными договорами, т.е. договор в шапке = договору в заказе покупателя в таб.части
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			//по заказам движения не делаем
			Если Не Отказ Тогда
				НаборДвижений.ВыполнитьРасход();
			КонецЕсли;
			
		КонецЕсли;		

		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
		   И СуммаДокумента <> 0 Тогда

			// Движения по документу.

			// По регистру ПродажиПоДисконтнымКартам.
			//Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ДисконтнаяКарта) Тогда

			//	НаборДвижений = Движения.ПродажиПоДисконтнымКартам;

			//	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			//	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			//	// Заполним таблицу движений.
			//	СтрокаДвижений = ТаблицаДвижений.Добавить();
			//	СтрокаДвижений.ДисконтнаяКарта = СтруктураШапкиДокумента.ДисконтнаяКарта;
			//	СтрокаДвижений.ВладелецДисконтнойКарты = СтруктураШапкиДокумента.Контрагент;
			//	СтрокаДвижений.Сумма = ПересчитатьИзВалютыВВалюту(-СуммаДокумента, ВалютаДокумента,
			//						   СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			//						   СтруктураШапкиДокумента.КурсДокумента,
			//						   СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			//						   СтруктураШапкиДокумента.КратностьДокумента,
			//						   СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

			//	НаборДвижений.мПериод          = Дата;
			//	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			//	Если Не Отказ Тогда
			//		НаборДвижений.ВыполнитьДвижения();
			//	КонецЕсли;
			//КонецЕсли;
		
		КонецЕсли;

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
		Если ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада Тогда
		
			Если НЕ Отказ Тогда
				
				ОтборСкладОпт  = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Оптовый);
				ОтборСкладРозн = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Розничный);
				ОтборСкладНТТ  = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка);
				
				РезультатЗапросаТоварыОпт = ОтобратьСтрокиПоКритериям(ТаблицаПоКомплектамМинус, ОтборСкладОпт);
				
				Если Не РезультатЗапросаТоварыОпт.Пустой() Тогда
				
					НаборДвиженийОпт = Движения.ТоварыНаСкладах;

					ТаблицаТоварыОпт = РезультатЗапросаТоварыОпт.Выгрузить();
					СтруктТаблицДокументаОпт = Новый Структура;
					СтруктТаблицДокументаОпт.Вставить("ТаблицаПоТоварам", ТаблицаТоварыОпт);

					ТаблицыДанныхДокументаОпт = ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвиженийОпт, СтруктТаблицДокументаОпт);

					ЗаписатьТаблицыДокументаВРегистр(НаборДвиженийОпт, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокументаОпт,  Дата);

				КонецЕсли;
				
				РезультатЗапросаТоварыРозн = ОтобратьСтрокиПоКритериям(ТаблицаПоКомплектамМинус, ОтборСкладРозн);
				Если НЕ РезультатЗапросаТоварыРозн.Пустой() Тогда
					
					НаборДвиженийРозн = Движения.ТоварыВРознице;
					ТаблицаТоварыРозн = РезультатЗапросаТоварыРозн.Выгрузить();
				
					СтруктТаблицДокументаРозн = Новый Структура;
					СтруктТаблицДокументаРозн.Вставить("ТаблицаПоТоварам", ТаблицаТоварыРозн);
					
					ТаблицыДанныхДокументаРозн = ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвиженийРозн, СтруктТаблицДокументаРозн);
					
					ЗаписатьТаблицыДокументаВРегистр( НаборДвиженийРозн, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокументаРозн, Дата);
					
				КонецЕсли;

				РезультатЗапросаТоварыНТТ = ОтобратьСтрокиПоКритериям(ТаблицаПоКомплектамМинус, ОтборСкладНТТ);

				Если Не РезультатЗапросаТоварыНТТ.Пустой() Тогда
				
					НаборДвиженийНТТ = Движения.ТоварыВНТТ;
					ТаблицаТоварыНТТ = РезультатЗапросаТоварыНТТ.Выгрузить();
					СтруктураИменКолонок = Новый Структура("ЦенаВРознице", "Цена");
					ПереименоватьКолонку(ТаблицаТоварыНТТ, СтруктураИменКолонок);
					
					СтруктТаблицДокументаНТТ = Новый Структура;
					СтруктТаблицДокументаНТТ.Вставить("ТаблицаПоТоварам", ТаблицаТоварыНТТ);
					
					ТаблицыДанныхДокументаНТТ = ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвиженийНТТ, СтруктТаблицДокументаНТТ);
					УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокументаНТТ, "ТоварТара", Перечисления.ТоварТара.Товар);
					
					ЗаписатьТаблицыДокументаВРегистр( НаборДвиженийНТТ, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокументаНТТ, Дата);
					
				КонецЕсли;
				
			КонецЕсли; // Если НЕ Отказ Тогда
			
		КонецЕсли;

		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
				
			// По регистру Продажи
			НаборДвижений = Движения.Продажи;
			ТаблицаПродаж = ТаблицаПоТоварамМинус.Скопировать();
			СтруктураИменКолонок = Новый Структура("ДокументПродажи", "ДокументПартии");
			ПереименоватьКолонку(ТаблицаПродаж, СтруктураИменКолонок);
			СтруктураИменКолонок = Новый Структура("Стоимость", "СтоимостьПродажи");
			ПереименоватьКолонку(ТаблицаПродаж, СтруктураИменКолонок);
			СтруктураИменКолонок = Новый Структура("НДСВрем", "НДС");
			ПереименоватьКолонку(ТаблицаПродаж, СтруктураИменКолонок);
			СтруктураИменКолонок = Новый Структура("НДС", "НДСУпр");
			ПереименоватьКолонку(ТаблицаПродаж, СтруктураИменКолонок);
			
			Для каждого СтрокаТаблицы из ТаблицаПродаж Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументПродажи) Тогда
					СтрокаТаблицы.ДокументПродажи = Ссылка;
				КонецЕсли;
			КонецЦикла;

			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
				
			ЗагрузитьВТаблицуЗначений(ТаблицаПродаж, ТаблицаДвижений);
				
			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
			//ТаблицаДвижений.ЗаполнитьЗначения(Организация,        "Организация");
			//ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,         "Контрагент");
			ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,      "Подразделение");
			Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам 
				или СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка, "ЗаказПокупателя");
			КонецЕсли;
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.Продажи.ВыполнитьДвижения();
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

			// ТОВАРЫ ПО РЕГИСТРУ ТоварыПереданные.
			НаборДвижений = Движения.ТоварыПереданные;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			КопияТовары = ТаблицаПоТоварамМинус.Скопировать();
			СтруктураИменКолонок = Новый Структура("Сделка", "ЗаказПокупателя");
			ПереименоватьКолонку(КопияТовары, СтруктураИменКолонок);
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(КопияТовары, ТаблицаДвижений);

			Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(Сделка, "Сделка");
			КонецЕсли;

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
			ТаблицаДвижений.ЗаполнитьЗначения(Контрагент , "Контрагент");
			ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию,"СтатусПередачи");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.ТоварыПереданные.ВыполнитьПриход();
			КонецЕсли;
			
		КонецЕсли;

		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя
		ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратОтКомиссионера
		Иначе
			КодОперацииПартииТоваров = Неопределено;
		КонецЕсли;
		
		// Для строк документа, в которых не указан документ продажи необходимо сразу сформировать
		// движения по партиям, кроме того надо сторнировать движения по регистру "Продажи себестоимость"
		ТаблицаПоТоварамПартии = ТаблицаПоКомплектамПлюс.Скопировать();
		
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			// Движения возврата товаров от комиссионера всегда выполняются партионным учетом
			ТаблицаПоТоварамПартии.Очистить();
		КонецЕсли;
		
		Сч = 0;
		Пока Сч < ТаблицаПоТоварамПартии.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоТоварамПартии.Получить(Сч);
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументПартии) Тогда
				 ТаблицаПоТоварамПартии.Удалить(СтрокаТаблицы);
			Иначе 
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
		СтруктураИменКолонок = Новый Структура("Стоимость", "ПлюсСебестоимость");
		ПереименоватьКолонку(ТаблицаПоТоварамПартии, СтруктураИменКолонок);
		
		// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах.
		НаборДвижений = Движения.ПартииТоваровНаСкладах;
			
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвиженийПартииТоваровНаСкладах = НаборДвижений.ВыгрузитьКолонки();
		ТаблицаДвижений = ТаблицаДвиженийПартииТоваровНаСкладах.Скопировать();
			
		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамПартии, ТаблицаДвижений);
			
		// Недостающие поля.
		ЗаполнитьПоляПартииТоваровНаСкладахУпр(ТаблицаПоТоварамПартии, ТаблицаДвижений, Перечисления.СтатусыПартийТоваров.Купленный, СтруктураШапкиДокумента);
			
		// Код операции
		ТаблицаДвижений.ЗаполнитьЗначения(КодОперацииПартииТоваров, "КодОперации");
			
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
		Если Не Отказ Тогда
			Движения.ПартииТоваровНаСкладах.ВыполнитьПриход();
		КонецЕсли;
			
		// При поступлении по ордеру нужно сторнировать партию ордера
		//Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		Если ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру Тогда
				
			ТаблицаПартииПоОрдерам = ТаблицаПоТоварамМинус.Скопировать();
				
			Сч = 0;
			Пока Сч < ТаблицаПартииПоОрдерам.Количество() Цикл
				СтрокаТаблицы = ТаблицаПартииПоОрдерам.Получить(Сч);
				Если СтрокаТаблицы.БезПраваПродажи = Истина Тогда
					ТаблицаПартииПоОрдерам.Удалить(СтрокаТаблицы);
				Иначе
					Сч = Сч + 1;
				КонецЕсли;
			КонецЦикла;
				
			Если ТаблицаПартииПоОрдерам.Количество() > 0 Тогда
					
				ТаблицаПоТоварамПартии = ТаблицаПартииПоОрдерам.Скопировать();
				СтруктураИменКолонок = Новый Структура("ДокументОприходования", "ДокументПолучения");
				ПереименоватьКолонку(ТаблицаПоТоварамПартии, СтруктураИменКолонок);
				СтруктураИменКолонок = Новый Структура("Стоимость", "МинусСебестоимость");
				ПереименоватьКолонку(ТаблицаПоТоварамПартии, СтруктураИменКолонок);
				ТаблицаДвижений.Очистить();
				
				ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамПартии, ТаблицаДвижений);
			
				ЗаполнитьПоляПартииТоваровНаСкладахУпр(ТаблицаПоТоварамПартии, ТаблицаДвижений, Перечисления.СтатусыПартийТоваров.ПоОрдеру, СтруктураШапкиДокумента, Ложь);
					
				ТаблицаДвижений.ЗаполнитьЗначения(0, "Стоимость");
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ПоОрдеру, "СтатусПартии");
					
				// Код операции - поступление по ордеру (сторно)
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПоступлениеПоОрдеру, "КодОперации");
					
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
					
				Если Не Отказ Тогда
					Движения.ПартииТоваровНаСкладах.ВыполнитьПриход();
				КонецЕсли;
			КонецЕсли;
				
		КонецЕсли;
			
		ТаблицаПоТоварамПартии = ТаблицаПоКомплектамМинус.Скопировать();
		Сч = 0;
		Пока Сч < ТаблицаПоТоварамПартии.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоТоварамПартии.Получить(Сч);
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументПартии) Тогда
				 ТаблицаПоТоварамПартии.Удалить(СтрокаТаблицы);
			Иначе 
				Сч = Сч + 1;
			КонецЕсли; 
		КонецЦикла;
		СтруктураИменКолонок = Новый Структура("Стоимость", "МинусСебестоимость");
		ПереименоватьКолонку(ТаблицаПоТоварамПартии, СтруктураИменКолонок);
		
		// ТОВАРЫ ПО РЕГИСТРУ ПродажиСебестоимость
		НаборДвижений = Движения.ПродажиСебестоимость;
			
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвиженийПродажиСебестоимость = НаборДвижений.ВыгрузитьКолонки();
		ТаблицаДвижений = ТаблицаДвиженийПродажиСебестоимость.Скопировать();
			
		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамПартии, ТаблицаДвижений);
			
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка ,"ДокументОприходования");
		ТаблицаДвижений.ЗаполнитьЗначения(Подразделение, "Подразделение");
			
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам или 
			СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка, "ЗаказПокупателя");
		КонецЕсли;
		
		Если Не Отказ Тогда
			Движения.ПродажиСебестоимость.ВыполнитьДвижения();
		КонецЕсли;
	КонецЕсли; // Если ОтражатьВУправленчискомУчете...
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Заполняет в таблице движений по регитстру ПартииТоваровНаСкладах нестандартные поля.
//
// Параметры:
//  ТаблицаТЧ       - таблица значений, соответствующая табличной части документа
//  ТаблицаДвижений - таблица значений, соответствующая набору записей регистра,
//  СтатусПартии    - значение перечисления статусов партий. 
//
Процедура ЗаполнитьПоляПартииТоваровНаСкладахУпр(ТаблицаТЧ, ТаблицаДвижений, СтатусПартии, СтруктураШапкиДокумента, ПерезаполнятьДокумент = Истина)

	ТаблицаТЧ.Индексы.Добавить("НомерСтроки");
	
	Для каждого СтрокаДвижений Из ТаблицаДвижений Цикл

		Если НЕ СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
			СтрокаДвижений.Склад = Неопределено;
		КонецЕсли;

		Если ПерезаполнятьДокумент И Не мПорядокСписанияПартий.Упр = Перечисления.СпособыОценки.ПоСредней Тогда
			СтрокаДвижений.ДокументОприходования = Ссылка;
		КонецЕсли;
		
		СтрокаДвижений.СтатусПартии          = СтатусПартии;

		// Заказ заполняем если его указали в документе и по договору ведется обособленный учет товаров по заказам.
		СтрокаТЧ = ТаблицаТЧ.Найти(СтрокаДвижений.НомерСтроки, "НомерСтроки");

		// Если партионный учет по сериям не ведется, то надо очистить серию
		Если  СтатусПартии <> Перечисления.СтатусыПартийТоваров.ВозвратнаяТара И НЕ СтрокаТЧ.ВестиПартионныйУчетПоСериям Тогда
			СтрокаДвижений.СерияНоменклатуры = Неопределено;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоляПартииТоваровНаСкладахУпр()

Процедура ДвиженияПоРегиструТоварыОрганизацийВозврат(
		РежимПроведения,
		ТаблицаПоТоварам,
		Отказ,
		Заголовок,
		СтруктураШапкиДокумента
	)

	// Таблица для движений с отрицательным количеством
	ТаблицаПоТоварамМинус = ТаблицаПоТоварам.Скопировать();
	СтруктураИменКолонок = Новый Структура("Количество", "МинусКоличество");
	ПереименоватьКолонку(ТаблицаПоТоварамМинус, СтруктураИменКолонок);
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
	НаборДвижений = Движения.ТоварыОрганизаций;

	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада Тогда

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамМинус, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Организация , "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Комиссионер");
		
		//Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
		//	ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
		//КонецЕсли;

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ТоварыОрганизаций.ВыполнитьРасход();
		КонецЕсли;
		
	КонецЕсли;
	
	// Спишем остатки по организации с комиссионера.
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
		НаборДвижений = Движения.ТоварыОрганизаций;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамМинус, ТаблицаДвижений);

		// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,"Комиссионер");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Склад");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ТоварыОрганизаций.ВыполнитьПриход();
		КонецЕсли;

	КонецЕсли;


КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизаций()

// Формируем движения по регистру СписанныеТовары
//
Процедура ДвиженияПоРегиструСписанныеТоварыВозврат(
		СтруктураШапкиДокумента,
		ТаблицаПоТоварам,
		Отказ,
		Заголовок
	) Экспорт

	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	СтруктураИменКолонок = Новый Структура("ДокументПартии", "ДокументПартии");
	ПереименоватьКолонку(ТаблицаПоТоварам, СтруктураИменКолонок);
	СтруктураИменКолонок = Новый Структура("Количество", "КоличествоДок");
	ПереименоватьКолонку(ТаблицаПоТоварам, СтруктураИменКолонок);
    //asm
	ТаблицаПоТоварам.Колонки.ДокументПартии.Имя = "ВозвратОтПокупателяДокументПартии";
	// Заполним таблицу движений.
	ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

	// Недостающие поля.
	Для каждого Строка Из ТаблицаДвижений Цикл
		
		Строка.НомерСтрокиДокумента = Строка.НомерСтроки;
		//Строка.ДокументПередачи = Строка.ДокументПартии;
		
	КонецЦикла;
	
	// Если ПУ по складам
	Если НЕ СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");

	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя,   "КодОперацииПартииТоваров");
		
	ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ВозвратОтКомиссионера, "КодОперацииПартииТоваров");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию,      "ДопустимыйСтатусПередачи");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента,                   "ДоговорКонтрагента");
		
	КонецЕсли;
	
	//+++( 11.02.2015 - НУЖНОЕ движение!	
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпрВозврат(ТаблицаДвижений,  СтруктураШапкиДокумента, ТаблицаПоТоварам);

	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРеглВозврат(ТаблицаДвижений,  СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;

	Если Движения.СписанныеТовары.Модифицированность() Тогда
		Движения.СписанныеТовары.Записать(Истина);
	КонецЕсли;
	//+++)
КонецПроцедуры // ДвиженияПоРегиструСписанныеТоварыВозврат()


// Заполняет колонки значениями, нужными для регл. учета
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРеглВозврат(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВНалоговомУчете,     "ОтражатьВНалоговомУчете");

	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	
	Для каждого Строка Из ТаблицаДвижений Цикл

		СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			
			Строка.СуммаЗадолженностиБУ = СтрокаТЧ.СуммаБезНДС+СтрокаТЧ.НДС;
			Строка.СуммаНДС = СтрокаТЧ.НДС;
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл() 

// Заполняет колонки значениями, нужными для упр. учета
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпрВозврат(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,  "ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию, "ДопустимыйСтатус2");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение, "Подразделение");
	
	// Данные для заполнения отчетов комитенту
	ТаблицаДвижений.ЗаполнитьЗначения(ВалютаДокумента, "ВалютаДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.КурсДокумента, "КурсДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.КратностьДокумента, "КратностьДокумента");

	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете, "ОтражатьВУправленческомУчете");
	
	Для каждого Строка Из ТаблицаДвижений Цикл
		
		СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));
		Строка.СуммаЗадолженности   = СтрокаТЧ.СуммаСНДСДок;
		
		Если СтруктураШапкиДокумента.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			Строка.ЗаказСписания = СтруктураШапкиДокумента.Сделка;//Для заполнения счета в регистре ПродажиСебестоимость
		Иначе	
			Строка.ЗаказСписания = СтрокаТЧ.ЗаказПокупателя;
		КонецЕсли;	
		
	КонецЦикла;
	
	// Учет по проектам
	//ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВедениеУчетаПоПроектам,   "ВедениеУчетаПоПроектам");
	//Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И ЗначениеЗаполнено(Проект) Тогда
	//	ТаблицаДвижений.ЗаполнитьЗначения(Проект,"Проект");
	//КонецЕсли;

КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр()

Функция СформироватьЗапросПоДеревуПолей103(ДокументОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, ВалютаРегламентированногоУчета)  Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ";

	СтрокиЗапроса           = "";
	ТаблицыЗапроса          = "";
	НуженКурсВалютыУпрУчета = Ложь;
	ЕстьУчетнаяПолитика     = Ложь;
	
	ДокументОбъектМетаданные = ДокументОбъект.Метаданные();
	
	
	// Реквизиты договора взаиморасчетов.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ДоговорыКонтрагентов", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ДоговорКонтрагента." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты договора взаиморасчетов регл.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ДоговорыКонтрагентовРегл", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ДоговорКонтрагентаРегл." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты организации.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("Организации", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.Организация." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты сделки.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("Сделка", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		Если ЗначениеЗаполнено(ДокументОбъект.Сделка) Тогда
			СделкаМетаданные = ДокументОбъект.Сделка.Метаданные();
		Иначе
			СделкаМетаданные = Неопределено;
		КонецЕсли;
		
		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + ?(СделкаМетаданные = Неопределено ИЛИ СделкаМетаданные.Реквизиты.Найти(СокрЛП(СтрокаПоля.Поле)) = Неопределено,
								"NULL",
								"ВЫРАЗИТЬ(Док.Сделка КАК Документ." + СделкаМетаданные.Имя + ")." + СокрЛП(СтрокаПоля.Поле)) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты расчетного документа.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("РасчетныйДокумент", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		Если ЗначениеЗаполнено(ДокументОбъект.РасчетныйДокумент) Тогда
			СделкаМетаданные = ДокументОбъект.РасчетныйДокумент.Метаданные();
		Иначе
			СделкаМетаданные = Неопределено;
		КонецЕсли;
		
		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + ?(СделкаМетаданные = Неопределено, "NULL", "ВЫРАЗИТЬ(Док.РасчетныйДокумент КАК Документ." + СделкаМетаданные.Имя + ")." + СокрЛП(СтрокаПоля.Поле)) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты склада.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("Склад", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.Склад." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты склада-группы.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("СкладГруппа", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.СкладГруппа." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты склада-отправителя
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("СкладОтправитель", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.СкладОтправитель." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты склада-отправителя
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ДокументПеремещения", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ДокументПеремещения." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты склада-отправителя
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ДокументПередачи", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ДокументПередачи." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты склада-получателя
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("СкладПолучатель", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.СкладПолучатель." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты склада-ордера
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("СкладОрдер", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.СкладОрдер." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("Заказ", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.Заказ." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ВнутреннийЗаказ", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ВнутреннийЗаказ." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты заказа покупателя
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ЗаказПокупателя", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ЗаказПокупателя." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты заказа поставщику
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ЗаказПоставщику", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ЗаказПоставщику." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;

	// Реквизиты номенклатуры
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("Номенклатура", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.Номенклатура." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;

	// Реквизиты документа основания
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ДокументОснование", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ДокументОснование." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Пустые реквизиты.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("NULL", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "NULL" +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Константы.
	ТаблицыЗапроса = ТаблицыЗапроса + ", Константы";

	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("Константы", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			Если СтрокаПоля.Поле = "КурсВалютыУправленческогоУчета" Тогда

				СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
				Символы.Таб + "КурсыВалютСрезПоследних.Курс КАК КурсВалютыУправленческогоУчета";
			
				СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
				Символы.Таб + "КурсыВалютСрезПоследних.Кратность КАК КратностьВалютыУправленческогоУчета";
			
				НуженКурсВалютыУпрУчета = Истина;

			Иначе

				СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
				Символы.Таб + "Константы." + СокрЛП(СтрокаПоля.Поле) +
				?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("УчетнаяПолитика", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда
		ЕстьУчетнаяПолитика = Истина;
		
		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл
			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС + 
			Символы.Таб + "УчетнаяПолитикаСрезПоследних." + СокрЛП(СтрокаПоля.Поле) +
				?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));
		КонецЦикла;
			
	КонецЕсли;

	// Надо добавить константу ВалютаРегламнтированногоУчета
	СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС + 
	Символы.Таб + "Константы.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета";

	СтрокаЗапросаКурсВалютыУпрУчета = Символы.ПС + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента,) КАК КурсыВалютСрезПоследних
	|	ПО Константы.ВалютаУправленческогоУчета = КурсыВалютСрезПоследних.Валюта";

	СтрокаРегистраУчетнойПолитики = Символы.ПС + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика.СрезПоследних(&ДатаДокумента,) КАК УчетнаяПолитикаСрезПоследних
	|	ПО Истина";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ " + Сред(СтрокиЗапроса, 2) + "
	                | ИЗ 
	                |      Документ." + ДокументОбъектМетаданные.Имя + " КАК Док "+ ТаблицыЗапроса +
	                ?(НуженКурсВалютыУпрУчета, СтрокаЗапросаКурсВалютыУпрУчета,"") + Символы.ПС + 
	                ?(ЕстьУчетнаяПолитика, СтрокаРегистраУчетнойПолитики,"") + Символы.ПС + "
	                |     ГДЕ Док.Ссылка = &ДокументСсылка";

	// Установим параметры запроса.
	Запрос.УстановитьПараметр("ДокументСсылка" , ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента"  , ?(ЕстьРеквизитДокумента("ПериодРегистрации", ДокументОбъектМетаданные), КонецМесяца(ДокументОбъект.ПериодРегистрации), ДокументОбъект.Дата));

	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();

	Для Каждого Колонка из ТаблицаЗапроса.Колонки Цикл
		Если ТаблицаЗапроса.Количество() = 0 Тогда
			СтруктураШапкиДокумента.Вставить(Колонка.Имя, Неопределено);
		Иначе
			СтруктураШапкиДокумента.Вставить(Колонка.Имя, ТаблицаЗапроса[0][Колонка.Имя]);
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.Свойство("ВалютаДокумента") Тогда
		Если ЕстьРеквизитДокумента("ВалютаДокумента", ДокументОбъектМетаданные) Тогда
			СтруктураШапкиДокумента.Вставить("КурсДокумента", 		КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета));
			СтруктураШапкиДокумента.Вставить("КратностьДокумента", 	КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета));
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураШапкиДокумента;
	
КонецФункции // СформироватьЗапросПоДеревуПолей()

// Формирует структуру параметров для получения договора продажи со значениями по умолчанию.
//
// Возвращаемое значение:
//   Стуртура – структура параметров для получения договора продажи.
//
Функция ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи()  Экспорт

	СтруктураПараметровДляПолученияДоговора = Новый Структура();

	СписокДопустимыхВидовДоговоров = Новый СписокЗначений();
	СписокДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СписокДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);

	СтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров", СписокДопустимыхВидовДоговоров);
	Возврат СтруктураПараметровДляПолученияДоговора;

КонецФункции // ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи()


// Отбирает из переданной таблицы строки по заданным критериям.
//
// Параметры:
//  Источник - ТаблицаЗначений, РезультатЗапроса, ОбластьЯчеекТабличногоДокумента. Таблица-источник.
//  СтруктураКритериев - Структура. Названия отборов и значения, по которым нужно отобрать строки.
//  СтруктураСложныхКритериев - Структура. Если свойство передано, то значение содержит вид сравнения.
//
// Возвращаемое значение:
//  РезультатЗапроса - таблица с нужными строками.
//
Функция ОтобратьСтрокиПоКритериям(Источник, СтруктураКритериев, СтруктураСложныхКритериев = Неопределено) Экспорт

	Перем ВидСравненияСложный;

	Если СтруктураСложныхКритериев = Неопределено Тогда
		СтруктураСложныхКритериев = Новый Структура;
	КонецЕсли;

	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(Источник);

	Для Каждого Критерий Из СтруктураКритериев Цикл
		НовыйОтбор = ПостроительЗапроса.Отбор.Добавить(Критерий.Ключ);

		СтруктураСложныхКритериев.Свойство(Критерий.Ключ, ВидСравненияСложный);

		Если ВидСравненияСложный = Неопределено Тогда
			НовыйОтбор.Установить(Критерий.Значение);
		Иначе
			НовыйОтбор.Использование = Истина;
			НовыйОтбор.ВидСравнения = ВидСравненияСложный;
			НовыйОтбор.Значение = Критерий.Значение;
		КонецЕсли;
	КонецЦикла;

	Возврат ПостроительЗапроса.Результат;

КонецФункции // ОтобратьСтрокиПоКритериям()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	   Если Дата > '20151031235959' тогда
		ЗарегистрироватьОбъект(ЭтотОбъект,Отказ,Истина);
	   конецЕсли;	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		// Заполнение шапки
		АдресДоставки = ДанныеЗаполнения.АдресДоставки;
		БанковскийСчетОрганизации = ДанныеЗаполнения.БанковскийСчетОрганизации;
		ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
		ВидОперации = ДанныеЗаполнения.ВидОперации;
		ВидПередачи = ДанныеЗаполнения.ВидПередачи;
		Грузоотправитель = ДанныеЗаполнения.Грузоотправитель;
		Грузополучатель = ДанныеЗаполнения.Грузополучатель;
		ДисконтнаяКарта = ДанныеЗаполнения.ДисконтнаяКарта;
		ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
		ДокументРеализации = ДанныеЗаполнения.ДокументРеализации;
		ДополнениеКАдресуДоставки = ДанныеЗаполнения.ДополнениеКАдресуДоставки;
		ИсправляемыйДокументРеализации = ДанныеЗаполнения.ИсправляемыйДокументРеализации;
		Комментарий = ДанныеЗаполнения.Комментарий;
		Контрагент = ДанныеЗаполнения.Контрагент;
		КорректироватьБУиНУ = ДанныеЗаполнения.КорректироватьБУиНУ;
		КратностьВзаиморасчетов = ДанныеЗаполнения.КратностьВзаиморасчетов;
		КурсВзаиморасчетов = ДанныеЗаполнения.КурсВзаиморасчетов;
		Организация = ДанныеЗаполнения.Организация;
		Ответственный = ДанныеЗаполнения.Ответственный;
		ОтражатьВБухгалтерскомУчете = ДанныеЗаполнения.ОтражатьВБухгалтерскомУчете;
		ОтражатьВНалоговомУчете = ДанныеЗаполнения.ОтражатьВНалоговомУчете;
		ОтражатьВУправленческомУчете = ДанныеЗаполнения.ОтражатьВУправленческомУчете;
		Подразделение = ДанныеЗаполнения.Подразделение;
		Проект = ДанныеЗаполнения.Проект;
		Сделка = ДанныеЗаполнения.Сделка;
		Склад = ДанныеЗаполнения.Склад;
		СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
		СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
		ТипЦен = ДанныеЗаполнения.ТипЦен;
		УсловиеПродаж = ДанныеЗаполнения.УсловиеПродаж;
		УчитыватьНДС = ДанныеЗаполнения.УчитыватьНДС;
		Для Каждого ТекСтрокаСерийныеНомера Из ДанныеЗаполнения.СерийныеНомера Цикл
			НоваяСтрока = СерийныеНомера.Добавить();
			НоваяСтрока.КлючСвязи = ТекСтрокаСерийныеНомера.КлючСвязи;
			НоваяСтрока.СерийныйНомер = ТекСтрокаСерийныеНомера.СерийныйНомер;
		КонецЦикла;
		Для Каждого ТекСтрокаСерийныеНомераСоставНабора Из ДанныеЗаполнения.СерийныеНомераСоставНабора Цикл
			НоваяСтрока = СерийныеНомераСоставНабора.Добавить();
			НоваяСтрока.КлючСвязи = ТекСтрокаСерийныеНомераСоставНабора.КлючСвязи;
			НоваяСтрока.СерийныйНомер = ТекСтрокаСерийныеНомераСоставНабора.СерийныйНомер;
		КонецЦикла;
		Для Каждого ТекСтрокаСоставНабора Из ДанныеЗаполнения.СоставНабора Цикл
			НоваяСтрока = СоставНабора.Добавить();
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаСоставНабора.ЕдиницаИзмерения;
			НоваяСтрока.Качество = ТекСтрокаСоставНабора.Качество;
			НоваяСтрока.КлючСвязи = ТекСтрокаСоставНабора.КлючСвязи;
			НоваяСтрока.КлючСтроки = ТекСтрокаСоставНабора.КлючСтроки;
			НоваяСтрока.Количество = ТекСтрокаСоставНабора.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаСоставНабора.Номенклатура;
			НоваяСтрока.ПринятыеСчетУчетаБУ = ТекСтрокаСоставНабора.ПринятыеСчетУчетаБУ;
			НоваяСтрока.ПринятыеСчетУчетаНУ = ТекСтрокаСоставНабора.ПринятыеСчетУчетаНУ;
			НоваяСтрока.СерияНоменклатуры = ТекСтрокаСоставНабора.СерияНоменклатуры;
			НоваяСтрока.Склад = ТекСтрокаСоставНабора.Склад;
			НоваяСтрока.СпособСписанияОстаткаТоваров = ТекСтрокаСоставНабора.СпособСписанияОстаткаТоваров;
			НоваяСтрока.СчетУчетаБУ = ТекСтрокаСоставНабора.СчетУчетаБУ;
			НоваяСтрока.СчетУчетаНУ = ТекСтрокаСоставНабора.СчетУчетаНУ;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрокаСоставНабора.ХарактеристикаНоменклатуры;
			НоваяСтрока.Цена = ТекСтрокаСоставНабора.Цена;
		КонецЦикла;
		Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест = ТекСтрокаТовары.ЕдиницаИзмеренияМест;
			НоваяСтрока.ЕстьВДокументеРеализации = ТекСтрокаТовары.ЕстьВДокументеРеализации;
			НоваяСтрока.ЗаказПокупателя = ТекСтрокаТовары.ЗаказПокупателя;
			НоваяСтрока.Качество = ТекСтрокаТовары.Качество;
			НоваяСтрока.КлючСвязи = ТекСтрокаТовары.КлючСвязи;
			НоваяСтрока.КлючСтроки = ТекСтрокаТовары.КлючСтроки;
			НоваяСтрока.Количество = ТекСтрокаТовары.Количество;
			НоваяСтрока.КоличествоДоИзменения = ТекСтрокаТовары.КоличествоДоИзменения;
			НоваяСтрока.КоличествоДоКорректировки = ТекСтрокаТовары.Количество;
			НоваяСтрока.КоличествоМест = ТекСтрокаТовары.КоличествоМест;
			НоваяСтрока.Коэффициент = ТекСтрокаТовары.Коэффициент;
			НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.ОтражатьТоварныйУчет = ТекСтрокаТовары.ОтражатьТоварныйУчет;
			НоваяСтрока.ПринадлежностьНоменклатуры = ТекСтрокаТовары.ПринадлежностьНоменклатуры;
			НоваяСтрока.СерияНоменклатуры = ТекСтрокаТовары.СерияНоменклатуры;
			НоваяСтрока.Склад = ТекСтрокаТовары.Склад;
			НоваяСтрока.СпособСписанияОстаткаТоваров = ТекСтрокаТовары.СпособСписанияОстаткаТоваров;
			НоваяСтрока.СтавкаНДС = ТекСтрокаТовары.СтавкаНДС;
			НоваяСтрока.СтавкаНДСДоИзменения = ТекСтрокаТовары.СтавкаНДСДоИзменения;
			НоваяСтрока.Сумма = ТекСтрокаТовары.Сумма;
			НоваяСтрока.СуммаДоИзменения = ТекСтрокаТовары.СуммаДоИзменения;
			НоваяСтрока.СуммаДоКорректировки = ТекСтрокаТовары.Сумма;
			НоваяСтрока.СуммаНДС = ТекСтрокаТовары.СуммаНДС;
			НоваяСтрока.СуммаНДСДоИзменения = ТекСтрокаТовары.СуммаНДСДоИзменения;
			НоваяСтрока.СуммаНДСДоКорректировки = ТекСтрокаТовары.СуммаНДС;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрокаТовары.ХарактеристикаНоменклатуры;
			НоваяСтрока.Цена = ТекСтрокаТовары.Цена;
			НоваяСтрока.ЦенаДоИзменения = ТекСтрокаТовары.ЦенаДоИзменения;
			НоваяСтрока.ЦенаДоКорректировки = ТекСтрокаТовары.ЦенаДоКорректировки;

		КонецЦикла;
		Для Каждого ТекСтрокаУслуги Из ДанныеЗаполнения.Услуги Цикл
			НоваяСтрока = Услуги.Добавить();
			НоваяСтрока.ЕстьВДокументеРеализации = ТекСтрокаУслуги.ЕстьВДокументеРеализации;
			НоваяСтрока.ЗаказПокупателя = ТекСтрокаУслуги.ЗаказПокупателя;
			НоваяСтрока.Количество = ТекСтрокаУслуги.Количество;
			НоваяСтрока.КоличествоДоИзменения = ТекСтрокаУслуги.КоличествоДоИзменения;
			НоваяСтрока.КоличествоДоКорректировки = ТекСтрокаУслуги.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаУслуги.Номенклатура;
			НоваяСтрока.ОтражатьТоварныйУчет = ТекСтрокаУслуги.ОтражатьТоварныйУчет;
			НоваяСтрока.Содержание = ТекСтрокаУслуги.Содержание;
			НоваяСтрока.СодержаниеДоИзменения = ТекСтрокаУслуги.СодержаниеДоИзменения;
			НоваяСтрока.СтавкаНДС = ТекСтрокаУслуги.СтавкаНДС;
			НоваяСтрока.СтавкаНДСДоИзменения = ТекСтрокаУслуги.СтавкаНДСДоИзменения;
			НоваяСтрока.Сумма = ТекСтрокаУслуги.Сумма;
			НоваяСтрока.СуммаДоИзменения = ТекСтрокаУслуги.СуммаДоИзменения;
			НоваяСтрока.СуммаДоКорректировки = ТекСтрокаУслуги.Сумма;
			НоваяСтрока.СуммаНДС = ТекСтрокаУслуги.СуммаНДС;
			НоваяСтрока.СуммаНДСДоИзменения = ТекСтрокаУслуги.СуммаНДСДоИзменения;
			НоваяСтрока.СуммаНДСДоКорректировки = ТекСтрокаУслуги.СуммаНДС;
			НоваяСтрока.Цена = ТекСтрокаУслуги.Цена;
			НоваяСтрока.ЦенаДоИзменения = ТекСтрокаУслуги.ЦенаДоИзменения;
			НоваяСтрока.ЦенаДоКорректировки = ТекСтрокаУслуги.ЦенаДоКорректировки;
			Если НоваяСтрока.Цена <> НоваяСтрока.ЦенаДоИзменения Тогда
				НоваяСтрока.ОтражатьТоварныйУчет = Истина;
			конецЕсли;	
		КонецЦикла;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КорректировкаЗаказаПокупателяР") Тогда
		//Проверим, были ли возвраты
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВозвратТоваровОтПокупателяТовары.Ссылка
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
		|ГДЕ
		|	ВозвратТоваровОтПокупателяТовары.ДокументПартии = &ДокументПартии";
		
		Запрос.УстановитьПараметр("ДокументПартии", ДанныеЗаполнения.ДокументРеализации);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Сообщить("По данной реализации были возвраты!");	
		КонецЕсли;
		
		
		// Заполнение шапки
		ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение;
		ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
		ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
		ВидПередачи = ДанныеЗаполнения.ДокументРеализации.Видпередачи;
		//ДополнениеКАдресуДоставки = ДанныеЗаполнения.ДокументРеализации;
		АдресДоставки = ДанныеЗаполнения.ДокументРеализации.АдресДоставки;
		КорректироватьБУиНУ = истина;
		ИсправляемыйДокументРеализации = ДанныеЗаполнения.ДокументРеализации;
		ДокументРеализации = ДанныеЗаполнения.ДокументРеализации;
		//УсловиеПродаж = ДанныеЗаполнения.ДокументРеализации;
		Склад = Справочники.Склады.НайтиПоНаименованию("1");
		Сделка = ДанныеЗаполнения.ДокументРеализации.Сделка;
		Проект = ДанныеЗаполнения.ДокументРеализации.Проект;
		ДисконтнаяКарта = ДанныеЗаполнения.ДокументРеализации.ДисконтнаяКарта;
		БанковскийСчетОрганизации = ДанныеЗаполнения.ДокументРеализации.БанковскийСчетОрганизации;
		Грузополучатель = ДанныеЗаполнения.ДокументРеализации.Грузополучатель;
		Грузоотправитель = ДанныеЗаполнения.ДокументРеализации.Грузоотправитель;
		ОтражатьВУправленческомУчете = ДанныеЗаполнения.ДокументРеализации.ОтражатьВУправленческомУчете;
		Если Найти(ДоговорКонтрагента.Наименование,"*")= 0 Тогда
		ОтражатьВБухгалтерскомУчете = ДанныеЗаполнения.ДокументРеализации.ОтражатьВБухгалтерскомУчете;
		ОтражатьВНалоговомУчете = ДанныеЗаполнения.ДокументРеализации.ОтражатьВНалоговомУчете;
		конецесли;
		//Комментарий = ДанныеЗаполнения.Комментарий;
		Контрагент = ДанныеЗаполнения.Контрагент;
		КратностьВзаиморасчетов = ДанныеЗаполнения.КратностьВзаиморасчетов;
		КурсВзаиморасчетов = ДанныеЗаполнения.КурсВзаиморасчетов;
		Организация = ДанныеЗаполнения.Организация;
		Ответственный = глТекущийпользователь;
		Подразделение = ДанныеЗаполнения.Подразделение;
		СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
		СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
		ТипЦен = ДанныеЗаполнения.ТипЦен;
		УчитыватьНДС = ДанныеЗаполнения.УчитыватьНДС;
		Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест = ТекСтрокаТовары.ЕдиницаИзмеренияМест;
			НоваяСтрока.Количество = ТекСтрокаТовары.Количество;
			НоваяСтрока.КоличествоДоИзменения = ТекСтрокаТовары.КоличествоДоИзменения;
			НоваяСтрока.КоличествоДоКорректировки = ТекСтрокаТовары.КоличествоДоКорректировки;
			НоваяСтрока.КоличествоМест = ТекСтрокаТовары.КоличествоМест;
			НоваяСтрока.Коэффициент = ТекСтрокаТовары.Коэффициент;
			НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.СтавкаНДС = ТекСтрокаТовары.СтавкаНДС;
			НоваяСтрока.СтавкаНДСДоИзменения = ТекСтрокаТовары.СтавкаНДСДоИзменения;
			НоваяСтрока.Сумма = ТекСтрокаТовары.Сумма;
			НоваяСтрока.СуммаДоИзменения = ТекСтрокаТовары.СуммаДоИзменения;
			НоваяСтрока.СуммаДоКорректировки = ТекСтрокаТовары.СуммаДоКорректировки;
			НоваяСтрока.СуммаНДС = ТекСтрокаТовары.СуммаНДС;
			НоваяСтрока.СуммаНДСДоИзменения = ТекСтрокаТовары.СуммаНДСДоИзменения;
			НоваяСтрока.СуммаНДСДоКорректировки = ТекСтрокаТовары.СуммаНДСДоКорректировки;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрокаТовары.ХарактеристикаНоменклатуры;
			НоваяСтрока.Цена = ТекСтрокаТовары.Цена;
			НоваяСтрока.ЦенаДоИзменения = ТекСтрокаТовары.ЦенаДоИзменения;
			НоваяСтрока.ЦенаДоКорректировки = ТекСтрокаТовары.ЦенаДоКорректировки;
			НоваяСтрока.Склад = ТекСтрокаТовары.Склад;
			НоваяСтрока.ЗаказПокупателя = ДанныеЗаполнения.ЗаказПокупателя;
			НоваяСтрока.СпособСписанияОстаткаТоваров = ТекСтрокаТовары.СпособСписанияОстаткаТоваров;
			Если НоваяСтрока.Цена <> НоваяСтрока.ЦенаДоИзменения Тогда
				НоваяСтрока.ОтражатьТоварныйУчет = Истина;
			конецЕсли;	
		КонецЦикла;
		Для Каждого ТекСтрокаУслуги Из ДанныеЗаполнения.Услуги Цикл
			НоваяСтрока = Услуги.Добавить();
			НоваяСтрока.Количество = ТекСтрокаУслуги.Количество;
			НоваяСтрока.КоличествоДоИзменения = ТекСтрокаУслуги.КоличествоДоИзменения;
			НоваяСтрока.Номенклатура = ТекСтрокаУслуги.Номенклатура;
			НоваяСтрока.Содержание = ТекСтрокаУслуги.Содержание;
			НоваяСтрока.СтавкаНДС = ТекСтрокаУслуги.СтавкаНДС;
			НоваяСтрока.СтавкаНДСДоИзменения = ТекСтрокаУслуги.СтавкаНДСДоИзменения;
			НоваяСтрока.Сумма = ТекСтрокаУслуги.Сумма;
			НоваяСтрока.СуммаДоИзменения = ТекСтрокаУслуги.СуммадоИзменения;
			НоваяСтрока.СуммаНДСДоИзменения = ТекСтрокаУслуги.СуммаНДСДоИзменения;
			НоваяСтрока.ЦенаДоИзменения = ТекСтрокаУслуги.ЦенаДоИзменения;
			НоваяСтрока.Цена = ТекСтрокаУслуги.Цена;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры


мУказаниеСкладовВТЧ=истина;
мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));
мПараметрыСвязиСтрокТЧ.Вставить("СоставНабора", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();


мЕстьКолонкаСерии = ложь;

мСтруктураПараметровВзаиморасчетов = Новый Структура;
мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Товары, Услуги"));
мСтруктураПараметровВзаиморасчетов.Вставить("Направление", "Реализация");
мСтруктураПараметровВзаиморасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Истина);
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяЗаказаВТабличныхЧастях", "ЗаказПокупателя");

мДокументРеализацииСсылка = ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Истина);

мСтруктураПараметровДляПолученияДоговора = ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи();

мУказаниеСкладов = истина;
мУказаниеСкладовВТЧ = (мУказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
                  Или (мУказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);

   
мИспользоватьОбменЭД = ложь
