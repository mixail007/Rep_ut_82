////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 
Перем мПроисходитРедактирование;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	Колонки     = ЭлементыФормы.ДанныеПоСФ.Колонки;

	ЭтоВводОстатковПоАвансам = ?(ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным, Истина, Ложь);
	ЭтоВводОстатковПоНДСПокупателей = ?(ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей, Истина, Ложь);
	ЭтоВводОстатковПоПоставщикам = ?(ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям, Истина, Ложь);
	
	УстановитьВидимостьКолонкиТабЧасти(Колонки.ДатаПлатежноРасчетногоДокумента,  ЭтоВводОстатковПоАвансам);
	УстановитьВидимостьКолонкиТабЧасти(Колонки.НомерПлатежноРасчетногоДокумента, ЭтоВводОстатковПоАвансам);
	
	УстановитьВидимостьКолонкиТабЧасти(Колонки.Номенклатура,		ЭтоВводОстатковПоНДСПокупателей);
	
	УстановитьВидимостьКолонкиТабЧасти(Колонки.ПредъявленСФ, 		ЭтоВводОстатковПоПоставщикам);
	УстановитьВидимостьКолонкиТабЧасти(Колонки.СуммаБезНДСОплата, 	ЭтоВводОстатковПоПоставщикам);
	УстановитьВидимостьКолонкиТабЧасти(Колонки.НДСОплата, 			ЭтоВводОстатковПоПоставщикам);
	УстановитьВидимостьКолонкиТабЧасти(Колонки.СуммаБезНДСПредъявлено,			ЭтоВводОстатковПоПоставщикам);
	УстановитьВидимостьКолонкиТабЧасти(Колонки.НДСПредъявлено, 					ЭтоВводОстатковПоПоставщикам);
	УстановитьВидимостьКолонкиТабЧасти(Колонки.СуммаБезНДСВключеноВСтоимость,	ЭтоВводОстатковПоПоставщикам);
	УстановитьВидимостьКолонкиТабЧасти(Колонки.НДСВключеноВСтоимость, 			ЭтоВводОстатковПоПоставщикам);
	УстановитьВидимостьКолонкиТабЧасти(Колонки.СуммаБезНДССтавка0,				ЭтоВводОстатковПоПоставщикам);
	УстановитьВидимостьКолонкиТабЧасти(Колонки.НДССтавка0, 						ЭтоВводОстатковПоПоставщикам);
	УстановитьВидимостьКолонкиТабЧасти(Колонки.СуммаБезНДСПредъявлено0,			ЭтоВводОстатковПоПоставщикам);
	УстановитьВидимостьКолонкиТабЧасти(Колонки.НДСПредъявлено0, 				ЭтоВводОстатковПоПоставщикам);
	
	ЭлементыФормы.ПанельСФ.Страницы.ДополнительныеСведения.Видимость = ЭтоВводОстатковПоПоставщикам;
	ЭлементыФормы.ПанельСФ.Страницы.ДополнительныеСведения.Доступность = ЭтоВводОстатковПоПоставщикам;
	
КонецПроцедуры //УстановитьВидимость()

// Процедура вызывается по кнопке при изменении активной строки в таблице косвенных 
// расходов, а также при переходе на закладку "Косвенные расходы".
Процедура ОтобразитьДополнительныеСведения()

	ТекСтрокаОстатков = ЭлементыФормы.ДанныеПоСФ.ТекущаяСтрока;
	
	// Включаем отбор тех дополнительных сведений, которые относятся к текущей строке,
	// выбранной в табличной части "ДанныеПоСФ"
	Если ТекСтрокаОстатков <> Неопределено Тогда
		// Включаем отбор ключу из текущей строки табличной части "ДополнительныеСведения"
		ЭлементыФормы.ДополнительныеСведения.ТолькоПросмотр = Ложь;
		ЭлементыФормы.ДополнительныеСведения.ОтборСтрок.КлючСтроки.Значение = ТекСтрокаОстатков.КлючСтроки;

	Иначе
		// Текущая строка в таблице косвенных расходов не установлена
		ЭлементыФормы.ДополнительныеСведения.ТолькоПросмотр = Истина;
		Если ДанныеПоСФ.Количество() = 0 Тогда
			ДополнительныеСведения.Очистить();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОтобразитьДополнительныеСведения()

// Функция анализирует таблицу ДополнительныеСведения и рассчитывает сумму 
// без НДС или сумму НДС по определенному событию.
Функция РассчитатьСуммуСобытия(КлючСтроки, ТекСобытие, Параметр = "СуммаБезНДС")

	ТекСтрокаСФ = ЭлементыФормы.ДанныеПоСФ.ТекущаяСтрока;
	СтруктураПоиска   = Новый Структура("КлючСтроки,Событие", КлючСтроки, ТекСобытие);
	Строки            = ДополнительныеСведения.НайтиСтроки(СтруктураПоиска);

	Счетчик = 0;
	
	Если Строки.Количество() > 0 Тогда
		Для Каждого Строка Из Строки Цикл
			Счетчик = Счетчик + Строка[Параметр];
		КонецЦикла;
	КонецЕсли;
	
	Возврат Счетчик;
	
КонецФункции // РассчитатьСуммуСобытия()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		Если ВидОперации <> Перечисления.ВидыОперацийВводНачОстатковНДС[Кнопка.Имя] Тогда
			ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС[Кнопка.Имя];
			
			Если (ДанныеПоСФ.Количество() > 0) Тогда
				// При смене вида операции табличная часть документа должна быть очищена
				Если Вопрос("При изменении вида операции табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ОКОтмена, 60, КодВозвратаДиалога.Отмена, "Изменение вида операции") = КодВозвратаДиалога.ОК Тогда
					ДанныеПоСФ.Очистить();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации) , ЭтотОбъект, ЭтаФорма);

	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь);
		УстановитьНомерДокумента(ЭтотОбъект);

	КонецЕсли;

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));
										  
	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	// Предполагается использовать отбор по таблице "ДополнительныеСведения"
	ЭлементыФормы.ДополнительныеСведения.ОтборСтрок.КлючСтроки.Использование = Истина;
	ЭлементыФормы.ДополнительныеСведения.ОтборСтрок.КлючСтроки.Значение = 0;

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	СформироватьСчетаФактурыНаАвансДляСтрокДокумента();
	
	СформироватьОтраженияРеализацииИСчетаФакутрыДляСтрокДокумента();
	
	СформироватьОтраженияПоступленийИСчетаФактурыДляСтрокДокумента();

КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	ОбновитьСсылкиВПодчиненныхДокументах();
	
КонецПроцедуры // ПослеЗаписи()

// Процедура вызывается из обработчика события "ПослеЗаписи".
// Осуществляет обновление ссылок на текущий документ у документов
// "Отражение поступления товаров и услуг для НДС", "Отражение 
// реализации товаров и услуг для НДС" и "Счет Фактура Выданный"
// выбранных в табличной части.
//
Процедура ОбновитьСсылкиВПодчиненныхДокументах()
	
	Для Каждого СтрокаСчета Из ДанныеПоСФ Цикл
		
		Если Не ЗначениеНеЗаполнено(СтрокаСчета.СчетФактура) Тогда
			ТекСФ = СтрокаСчета.СчетФактура.ПолучитьОбъект();
			
			Если ТекСФ <> Неопределено Тогда
				Если ТипЗнч(ТекСФ) = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
					ТекСФ.ДокументОснование = Ссылка;
				ИначеЕсли ТипЗнч(ТекСФ) = Тип("ДокументОбъект.ОтражениеРеализацииТоваровИУслугНДС") Тогда
					ТекСФ.РасчетныйДокумент = Ссылка;
				ИначеЕсли ТипЗнч(ТекСФ) = Тип("ДокументОбъект.ОтражениеПоступленияТоваровИУслугНДС") Тогда
					ТекСФ.РасчетныйДокумент = Ссылка;
				КонецЕсли;
			
				ТекСФ.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события "ПередУдалением" формы.
//
Процедура ПередУдалением(Отказ)
	
	ТаблицаСФ = ПолучитьТаблицуПодчиненныхСчетовФактур(Ссылка);

	Для Каждого СтрокаСчета Из ТаблицаСФ Цикл
		ТекСФ = СтрокаСчета.Ссылка.ПолучитьОбъект();
		ТекСФ.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - РЕАЛИЗУЮЩИЕ ФУНКЦИИ СОЗДАНИЯ СЧЕТОВ-ФАКТУР НА АВАНС

// Процедура вызывается сразу перед записью документа.
// выполняется поиск счета-фактуры на аванс по заданным 
// параметрам.
Функция НайтиСчетФактуруВСписке(ТаблицаСФ, СтрокаОстатка)
	
	СФнаАванс = Неопределено;
	
	Для Каждого СтрокаПоискаСФ Из ТаблицаСФ Цикл
		// Поиск счета-фактуры на аванс выполняется по его номеру.
		// Предполагается, что в пределах одной организации не может быть выписано два разных счета фактуры
		// на аванс с одним и тем же номером
		Если (Врег(СокрЛП(СтрокаПоискаСФ.Номер)) = Врег(СокрЛП(СтрокаОстатка.НомерСФ)))
		   и (Врег(СокрЛП(СтрокаПоискаСФ.Дата)) = Врег(СокрЛП(СтрокаОстатка.ДатаСФ))) Тогда
			// найден подходящий счет-фактура
			СФнаАванс = СтрокаПоискаСФ.Ссылка.ПолучитьОбъект();
			Если ТаблицаСФ.Колонки.Найти("Использован") <> Неопределено Тогда
				СтрокаПоискаСФ.Использован = Истина;
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СФнаАванс;
		
КонецФункции // НайтиСчетФактуруВСписке()

// Процедура вызывается сразу же после записи документа.
//
Функция ПолучитьТаблицуПодчиненныхСчетовФактур(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Запрос.Текст = "ВЫБРАТЬ
					|	ВводНачальныхОстатковНДСДанныеПоСФ.Контрагент,
					|	ВводНачальныхОстатковНДСДанныеПоСФ.ДоговорКонтрагента,
					|	СчетФактураВыданный.Номер,
					|	СчетФактураВыданный.Дата,
					|	СчетФактураВыданный.НомерПлатежноРасчетногоДокумента,
					|	СчетФактураВыданный.ДатаПлатежноРасчетногоДокумента,
					|	СчетФактураВыданный.Организация,
					|	СчетФактураВыданный.СтавкаНДС,
					|	СчетФактураВыданный.Под0,
					|	СчетФактураВыданный.Ссылка,
					|	СУММА(СчетФактураВыданный.Сумма) КАК Сумма,
					|	СУММА(СчетФактураВыданный.СуммаНДС) КАК СуммаНДС
					|ИЗ
					|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
					|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ВводНачальныхОстатковНДСДанныеПоСФ
					|		ПО СчетФактураВыданный.Ссылка = ВводНачальныхОстатковНДСДанныеПоСФ.СчетФактура

					|ГДЕ
					|	СчетФактураВыданный.ДокументОснование = &ДокументОснование И
					|	СчетФактураВыданный.НаАванс = Истина

					|СГРУППИРОВАТЬ ПО
					|	СчетФактураВыданный.Номер,
					|	СчетФактураВыданный.Дата,
					|	СчетФактураВыданный.НомерПлатежноРасчетногоДокумента,
					|	СчетФактураВыданный.ДатаПлатежноРасчетногоДокумента,
					|	СчетФактураВыданный.Организация,
					|	СчетФактураВыданный.СтавкаНДС,
					|	СчетФактураВыданный.Под0,
					|	СчетФактураВыданный.Ссылка,
					|	ВводНачальныхОстатковНДСДанныеПоСФ.Контрагент,
					|	ВводНачальныхОстатковНДСДанныеПоСФ.ДоговорКонтрагента";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуПодчиненныхСчетовФактур()

// Процедура вызывается сразу же после записи документа.
// Выполняется сопоставление строк документа и соответствующих им
// счетов - факутр на аванс. Результаты данного сопоставления
// фиксируются в строках документа, в реквизите "СчетФакутра"
//
Процедура СформироватьСчетаФактурыНаАвансДляСтрокДокумента()

	// В данной таблице содержится информация о том, какие счета-фактуры уже были
	// выписаны ранее на основании данных документов
	ТаблицаСФ = ПолучитьТаблицуПодчиненныхСчетовФактур(Ссылка);
	ТаблицаСФ.Колонки.Добавить("Использован");
	ТаблицаСФ.ЗаполнитьЗначения(Ложь, "Использован");
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		
		ТаблицаПоОстаткам = Новый ТаблицаЗначений;
		ТаблицаПоОстаткам.Колонки.Добавить("Контрагент");
		ТаблицаПоОстаткам.Колонки.Добавить("ДоговорКонтрагента");
		ТаблицаПоОстаткам.Колонки.Добавить("ДатаСФ");
		ТаблицаПоОстаткам.Колонки.Добавить("НомерСФ");
		ТаблицаПоОстаткам.Колонки.Добавить("ДатаПлатежноРасчетногоДокумента");
		ТаблицаПоОстаткам.Колонки.Добавить("НомерПлатежноРасчетногоДокумента");
		ТаблицаПоОстаткам.Колонки.Добавить("СчетФактура");
		ТаблицаПоОстаткам.Колонки.Добавить("ВидЦенности");
		ТаблицаПоОстаткам.Колонки.Добавить("СтавкаНДС");
		ТаблицаПоОстаткам.Колонки.Добавить("СуммаБезНДС");
		ТаблицаПоОстаткам.Колонки.Добавить("НДС");
		
		// подготовим таблицу остатков
		Для Каждого СтрокаДок Из ДанныеПоСФ Цикл
			Если ЗначениеНеЗаполнено(СтрокаДок.ДатаСФ) Тогда
				Предупреждение("В строке №" + СтрокаДок.НомерСтроки + " не указана дата счета-фактуры на аванс. СФ на аванс создан не будет.");
				Продолжить;
			ИначеЕсли ЗначениеНеЗаполнено(СтрокаДок.НомерСФ) Тогда
				Предупреждение("В строке №" + СтрокаДок.НомерСтроки + " не указана номер счета-фактуры на аванс. СФ на аванс создан не будет.");
				Продолжить;
			КонецЕсли;
			
			СтрокаОстатка = ТаблицаПоОстаткам.Добавить();
			
			СтрокаОстатка.Контрагент = 			СтрокаДок.Контрагент;
			СтрокаОстатка.ДоговорКонтрагента = 	СтрокаДок.ДоговорКонтрагента;
			
			СтрокаОстатка.ДатаСФ = 	СтрокаДок.ДатаСФ;
			СтрокаОстатка.НомерСФ = СтрокаДок.НомерСФ;
			СтрокаОстатка.ДатаПлатежноРасчетногоДокумента =  СтрокаДок.ДатаПлатежноРасчетногоДокумента;
			СтрокаОстатка.НомерПлатежноРасчетногоДокумента = СтрокаДок.НомерПлатежноРасчетногоДокумента;
			
			СтрокаОстатка.СчетФактура = СтрокаДок.СчетФактура;
			СтрокаОстатка.ВидЦенности = СтрокаДок.ВидЦенности;
			СтрокаОстатка.СтавкаНДС = 	СтрокаДок.СтавкаНДС;
			СтрокаОстатка.СуммаБезНДС = СтрокаДок.СуммаБезНДС;
			СтрокаОстатка.НДС = 		СтрокаДок.НДС;
			
		КонецЦикла;
		
		// В данной таблице содержится информация о том, какие счета-фактуры необходимо выписать
		ТаблицаПоОстаткам.Свернуть("Контрагент, ДоговорКонтрагента, ДатаСФ, НомерСФ, ДатаПлатежноРасчетногоДокумента, НомерПлатежноРасчетногоДокумента, СтавкаНДС, ВидЦенности", "СуммаБезНДС, НДС");
		
		Для Каждого СтрокаОстатка Из ТаблицаПоОстаткам Цикл
			// Цикл поиска существующего счета-фактуры
			СФнаАванс = НайтиСчетФактуруВСписке(ТаблицаСФ, СтрокаОстатка);
			
			Если СФнаАванс = Неопределено Тогда
				// Если существующий счет-фактура не найден, нужно создать новую счет-фактуру
				СФнаАванс = Документы.СчетФактураВыданный.СоздатьДокумент();
				
				НовыйСФ = Истина;
				// Эту новую счет-фактуру нужно зафиксировать в таблице счетов-фактур
				СтрокаСФ = ТаблицаСФ.Добавить();
				
			Иначе
				НовыйСФ = Ложь;
				// Информацию об этом счете-фактуре нужно обновить в таблице счетов-фактур
				СтрокаСФ = ТаблицаСФ.Найти(СФнаАванс.Ссылка, "Ссылка");
				
			КонецЕсли;
			
			СФнаАванс.ДокументОснование = 	Ссылка;
			СФнаАванс.Организация = 		Организация;
			СФнаАванс.Дата =  СтрокаОстатка.ДатаСФ;
			СФнаАванс.Номер = СтрокаОстатка.НомерСФ;
			СФнаАванс.Ответственный = Ответственный;
			СФнаАванс.ДатаПлатежноРасчетногоДокумента =  СтрокаОстатка.ДатаПлатежноРасчетногоДокумента;
			СФнаАванс.НомерПлатежноРасчетногоДокумента = СтрокаОстатка.НомерПлатежноРасчетногоДокумента;
			СФнаАванс.НаАванс = 	Истина;
			СФнаАванс.Под0 =  	  	?(СтрокаОстатка.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0, Истина, Ложь);
			СФнаАванс.СтавкаНДС = 	СтрокаОстатка.СтавкаНДС;
			СФнаАванс.Сумма = 		СтрокаОстатка.СуммаБезНДС + СтрокаОстатка.НДС;
			СФнаАванс.СуммаНДС = 	СтрокаОстатка.НДС;
			СФнаАванс.СтавкаНДС = 	СтрокаОстатка.СтавкаНДС;
			
			СФнаАванс.ПометкаУдаления = Ложь;
			СФнаАванс.Записать();
			
			Если НовыйСФ Тогда
				СтрокаСФ.Контрагент = 			СтрокаОстатка.Контрагент;
				СтрокаСФ.ДоговорКонтрагента = 	СтрокаОстатка.ДоговорКонтрагента;
				СтрокаСФ.Номер = 				СФнаАванс.Номер;
				СтрокаСФ.Дата =  				СФнаАванс.Дата;
				СтрокаСФ.ДатаПлатежноРасчетногоДокумента = 	СФнаАванс.ДатаПлатежноРасчетногоДокумента;
				СтрокаСФ.НомерПлатежноРасчетногоДокумента = СФнаАванс.НомерПлатежноРасчетногоДокумента;
				СтрокаСФ.Организация = 	СФнаАванс.Организация;
				СтрокаСФ.Под0 = 	   	СфнаАванс.Под0;
				СтрокаСФ.Ссылка = 	   	СФнаАванс.Ссылка;
				СтрокаСФ.Сумма = 		СФнаАванс.Сумма;
				СтрокаСФ.СуммаНДС = 	СФнаАванс.СуммаНДС;
				
			КонецЕсли;
				
		КонецЦикла;
	
		// далее необходимо прописать ссылки на созданные счета фактуры на аванс в строки документа
		Для Каждого СтрокаДок Из ДанныеПоСФ Цикл
			Если ЗначениеНеЗаполнено(СтрокаДок.ДатаСФ)
			 или ЗначениеНеЗаполнено(СтрокаДок.НомерСФ) Тогда
				Продолжить;
			КонецЕсли;
			
			СчФактураНаАванс = НайтиСчетФактуруВСписке(ТаблицаСФ, СтрокаДок);
			Если СчФактураНаАванс <> Неопределено Тогда
				СтрокаДок.СчетФактура = СчФактураНаАванс.Ссылка;
			Иначе
				// Ошибочная ситуация!
				Предупреждение("Для строки №" + СтрокаДок.НомерСтроки + " не удалось выписать счет фактуру на аванс.");
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;

	// удаляем незадействованные счета-фактуры
	Для Каждого СтрокаСчета Из ТаблицаСФ Цикл
		Если НЕ СтрокаСчета.Использован Тогда
			ТекСФ = СтрокаСчета.Ссылка.ПолучитьОбъект();
			ТекСФ.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьСчетаФактурыНаАвансДляСтрокДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - РЕАЛИЗУЮЩИЕ ФУНКЦИИ СОЗДАНИЯ ДОКУМЕНТОВ ОТРАЖЕНИЯ РЕАЛИЗАЦИИ ПОКУПАТЕЛЯМ

// Процедура вызывается сразу перед записью документа.
// выполняется поиск документа "Отражение реализации... " по заданным 
// параметрам.
Функция НайтиОтражениеРеализацииВСписке(ТаблицаРеализаций, СтрокаОстатка)
	
	ДокРеализации = Неопределено;
	
	Для Каждого СтрокаРеализации Из ТаблицаРеализаций Цикл
		// Поиск документа "Отражение реализации..." выполняется по Контрагенту, договору и номеру счета-факутры.
		Если (СтрокаРеализации.Контрагент = СтрокаОстатка.Контрагент)
		   и (СтрокаРеализации.ДоговорКонтрагента = СтрокаОстатка.ДоговорКонтрагента)
		   и ( (Врег(СокрЛП(СтрокаРеализации.Номер)) = Врег(СокрЛП(СтрокаОстатка.НомерСФ))) или (СтрокаРеализации.СсылкаСФ = Неопределено) ) Тогда
		   
		   Если (Не ЗначениеНеЗаполнено(СтрокаОстатка.Сделка))
			  и (Не ЗначениеНеЗаполнено(СтрокаРеализации.Сделка)) Тогда
				// если в строке ввода остатков сделка непустая и в документе "Отражение...." не пустая
				// дополнительно сравниваем эти сделки
				Если (СтрокаРеализации.Сделка <> СтрокаОстатка.Сделка) Тогда
					Продолжить;
				КонецЕсли;
				
			ИначеЕсли (Не ЗначениеНеЗаполнено(СтрокаОстатка.Сделка))
				    и (ЗначениеНеЗаполнено(СтрокаРеализации.Сделка)) Тогда
				// если в строке ввода остатков сделка не пустая, а в документе "Отражение...." сделка пустая - фильтруем
				Продолжить;
				
			ИначеЕсли Не ЗначениеНеЗаполнено(СтрокаРеализации.Сделка) Тогда
				// если в строке ввода остатков сделка пустая а в документе "Отражение...." не пустая - фильтруем
				Продолжить;
				
			КонецЕсли;
			
			// найден подходящий документ реализации
			
			ДокРеализации = СтрокаРеализации.Ссылка.ПолучитьОбъект();
			Если ТаблицаРеализаций.Колонки.Найти("Использован") <> Неопределено Тогда
				СтрокаРеализации.Использован = Истина;
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДокРеализации;
		
КонецФункции // НайтиОтражениеРеализацииВСписке()

// Процедура вызывается из тела процедуры СформироватьОтраженияРеализацииИСчетаФакутрыДляСтрокДокумента.
// Формируется таблица, содержащая перечень документов вида "ОтражениеРеализацииТоваровИУслугДляНДС" в
// которых, в качестве расчетного документа указан настоящий документ ввода остатков.
//
Функция ПолучитьТаблицуПодчиненныхОтраженийРеализации(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Запрос.Текст = "ВЫБРАТЬ
					|	ОтражениеРеализацииТоваровИУслугНДС.Ссылка,
					|	ОтражениеРеализацииТоваровИУслугНДС.Контрагент,
					|	ОтражениеРеализацииТоваровИУслугНДС.ДоговорКонтрагента,
					|	ОтражениеРеализацииТоваровИУслугНДС.Сделка,
					|	ОтражениеРеализацииТоваровИУслугНДС.СуммаДокумента,
					|	СчетФактураВыданный.Ссылка КАК СсылкаСФ,
					|	СчетФактураВыданный.Номер,
					|	СчетФактураВыданный.Дата,
					|	СУММА(СчетФактураВыданный.Сумма) КАК Сумма,
					|	СУММА(СчетФактураВыданный.СуммаНДС) КАК СуммаНДС
					|ИЗ
					|	Документ.ОтражениеРеализацииТоваровИУслугНДС КАК ОтражениеРеализацииТоваровИУслугНДС
					|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
					|		ПО ОтражениеРеализацииТоваровИУслугНДС.Ссылка = СчетФактураВыданный.ДокументОснование.Ссылка

					|ГДЕ
					|	ОтражениеРеализацииТоваровИУслугНДС.РасчетныйДокумент = &ДокументОснование

					|СГРУППИРОВАТЬ ПО
					|	СчетФактураВыданный.Номер,
					|	СчетФактураВыданный.Дата,
					|	СчетФактураВыданный.Ссылка,
					|	ОтражениеРеализацииТоваровИУслугНДС.Контрагент,
					|	ОтражениеРеализацииТоваровИУслугНДС.ДоговорКонтрагента,
					|	ОтражениеРеализацииТоваровИУслугНДС.СуммаДокумента,
					|	ОтражениеРеализацииТоваровИУслугНДС.Ссылка";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуПодчиненныхОтраженийРеализации()

// Процедура вызывается сразу же после записи документа.
// Выполняется сопоставление строк документа и соответствующих им
// документов ОтражениеРеализацииТоваровИУслугНДС. Результаты данного 
// сопоставления фиксируются в строках документа, в реквизите "СчетФакутра"
//
Процедура СформироватьОтраженияРеализацииИСчетаФакутрыДляСтрокДокумента()

	// В данной таблице содержится информация о том, какие счета-фактуры уже были
	// выписаны ранее на основании данных документов
	ТаблицаДок = ПолучитьТаблицуПодчиненныхОтраженийРеализации(Ссылка);
	ТаблицаДок.Колонки.Добавить("Использован");
	ТаблицаДок.ЗаполнитьЗначения(Ложь, "Использован");
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда
		
		ТаблицаПоОстаткам = Новый ТаблицаЗначений;
		ТаблицаПоОстаткам.Колонки.Добавить("Контрагент");
		ТаблицаПоОстаткам.Колонки.Добавить("ДоговорКонтрагента");
		ТаблицаПоОстаткам.Колонки.Добавить("Сделка");
		ТаблицаПоОстаткам.Колонки.Добавить("ДатаСФ");
		ТаблицаПоОстаткам.Колонки.Добавить("НомерСФ");
		ТаблицаПоОстаткам.Колонки.Добавить("СчетФактура");
		ТаблицаПоОстаткам.Колонки.Добавить("ВидЦенности");
		ТаблицаПоОстаткам.Колонки.Добавить("СтавкаНДС");
		ТаблицаПоОстаткам.Колонки.Добавить("Номенклатура");
		ТаблицаПоОстаткам.Колонки.Добавить("СуммаБезНДС");
		ТаблицаПоОстаткам.Колонки.Добавить("НДС");
		
		// подготовим таблицу остатков
		Для Каждого СтрокаДок Из ДанныеПоСФ Цикл
			Если ЗначениеНеЗаполнено(СтрокаДок.ДатаСФ) Тогда
				Предупреждение("В строке №" + СтрокаДок.НомерСтроки + " не указана дата счета-фактуры. Остатков по НДС для данной строки введено не будет.");
				Продолжить;
			ИначеЕсли ЗначениеНеЗаполнено(СтрокаДок.НомерСФ) Тогда
				Предупреждение("В строке №" + СтрокаДок.НомерСтроки + " не указан номер счета-фактуры. Остатков по НДС для данной строки введено не будет.");
				Продолжить;
			КонецЕсли;
			
			СтрокаОстатка = ТаблицаПоОстаткам.Добавить();
			
			СтрокаОстатка.Контрагент = 			СтрокаДок.Контрагент;
			СтрокаОстатка.ДоговорКонтрагента = 	СтрокаДок.ДоговорКонтрагента;
			
			СтрокаОстатка.Сделка = 				ОпределитьСделкуСтрокиТЧ(ЭтотОбъект, СтрокаДок);
			СтрокаДок.Сделка =					СтрокаОстатка.Сделка;
			
			СтрокаОстатка.ДатаСФ = 				СтрокаДок.ДатаСФ;
			СтрокаОстатка.НомерСФ = 			СтрокаДок.НомерСФ;
			СтрокаОстатка.СчетФактура = 		СтрокаДок.СчетФактура;
			СтрокаОстатка.ВидЦенности =			СтрокаДок.ВидЦенности;
			СтрокаОстатка.СтавкаНДС = 			СтрокаДок.СтавкаНДС;
			СтрокаОстатка.Номенклатура = 		СтрокаДок.Номенклатура;
			
			СтрокаОстатка.СуммаБезНДС = СтрокаДок.СуммаБезНДС;
			СтрокаОстатка.НДС = 		СтрокаДок.НДС;
			
		КонецЦикла;
		
		// В данной таблице содержится информация о том, какие документы "Отражение реализации" необходимо выписать
		ТаблицаПоОстаткам.Свернуть("Контрагент, ДоговорКонтрагента, Сделка, ДатаСФ, НомерСФ, СтавкаНДС, ВидЦенности", "СуммаБезНДС, НДС");
		
		Для Каждого СтрокаОстатка Из ТаблицаПоОстаткам Цикл
			// Цикл поиска существующего документа "ОтражениеРеализации..."
			ДокРеализации = НайтиОтражениеРеализацииВСписке(ТаблицаДок, СтрокаОстатка);
			
			Если ДокРеализации = Неопределено Тогда
				// Если документ реализации не найден, нужно создать новый
				ДокРеализации = Документы.ОтражениеРеализацииТоваровИУслугНДС.СоздатьДокумент();
				ДокРеализации.РасчетныйДокумент = Ссылка;
				ДокРеализации.Организация = Организация;
				ДокРеализации.Дата = СтрокаОстатка.ДатаСФ;
				
				УстановитьНомерДокумента(ДокРеализации);
				
				ДокРеализации.Контрагент = 		   СтрокаОстатка.Контрагент;
				ДокРеализации.ДоговорКонтрагента = СтрокаОстатка.ДоговорКонтрагента;
				ДокРеализации.Сделка = 			   СтрокаОстатка.Сделка;

				ДокРеализации.Комментарий = "Создан автоматически при вводе начальных остатков по НДС";
				ДокРеализации.Записать();
				
				НовыйДок = Истина;
				// Этот новый документ нужно зафиксировать в таблице подчиненных документов
				СтрокаДок = ТаблицаДок.Добавить();
				СтрокаДок.Использован = Ложь;
				
			Иначе
				НовыйДок = Ложь;
				// Информацию об этом документе нужно обновить 
				СтрокаДок = ТаблицаДок.Найти(ДокРеализации.Ссылка, "Ссылка");
				
			КонецЕсли;
			
			ДокРеализации.ПометкаУдаления = Ложь;
			ДокРеализации.Записать();
			
			Если НовыйДок Тогда
				СтрокаДок.Ссылка = 				ДокРеализации.Ссылка;
				СтрокаДок.Контрагент = 			ДокРеализации.Контрагент;
				СтрокаДок.ДоговорКонтрагента = 	ДокРеализации.ДоговорКонтрагента;
				СтрокаДок.Сделка = 				ДокРеализации.Сделка;
				СтрокаДок.СуммаДокумента = 		ДокРеализации.СуммаДокумента;
				
			КонецЕсли;
			
			Если СтрокаДок.СсылкаСФ = Неопределено Тогда
				// для данного документа реализации не выписан на его основании документ Счет-фактура
				// надо выписать.
				ДокСФ = Документы.СчетФактураВыданный.СоздатьДокумент();
			Иначе
				ДокСФ = СтрокаДок.СсылкаСФ.ПолучитьОбъект();
			КонецЕсли;
			
			ДокСФ.ДокументОснование = ДокРеализации.Ссылка;
			ДокСФ.Организация = 	  ДокРеализации.Организация;
			ДокСФ.Ответственный = 	  Ответственный;
			
			ДокСФ.Дата =  СтрокаОстатка.ДатаСФ;
			ДокСФ.Номер = СтрокаОстатка.НомерСФ;
			
			ДокСФ.НаАванс = Ложь;
			ДокСФ.Под0 = ?(СтрокаОстатка.СтавкаНДС = Перечисления.СтавкиНДС.НДС0, Истина, Ложь);
			
			ДокСФ.СтавкаНДС = СтрокаОстатка.СтавкаНДС;
			ДокСФ.Сумма = 	  СтрокаОстатка.СуммаБезНДС;
			ДокСФ.СуммаНДС =  СтрокаОстатка.НДС;
			ДокСФ.Комментарий = "Создан автоматически при вводе начальных остатков по НДС";
			
			Попытка
				ДокСФ.Записать();
			Исключение
				// Ошибочная ситуация!
				Предупреждение("Не удалось выписать документ счет фактура выданный с номером: " + СтрокаОстатка.НомерСФ + " Возможно счет фактура с таким номером уже есть.");
			КонецПопытки;
			
			// обновим данные в таблице документов
			СтрокаДок.СсылкаСФ = ДокСФ.Ссылка;
			СтрокаДок.Дата  = 	 ДокСФ.Дата;
			СтрокаДок.Номер = 	 ДокСФ.Номер;
			СтрокаДок.Сумма  = 	 ДокСФ.Сумма;
			СтрокаДок.СуммаНДС = ДокСФ.СуммаНДС;
				
		КонецЦикла;
	
		// далее необходимо прописать ссылки на созданные документы реализации в строки документа ввода остатков
		Для Каждого СтрокаДок Из ДанныеПоСФ Цикл
			ДокРеализации = НайтиОтражениеРеализацииВСписке(ТаблицаДок, СтрокаДок);
			Если ДокРеализации <> Неопределено Тогда
				СтрокаДок.СчетФактура = ДокРеализации.Ссылка;
			Иначе
				// Ошибочная ситуация!
				Предупреждение("Для строки №" + СтрокаДок.НомерСтроки + " не удалось выписать документ отражения реализации.");
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;

	// удаляем незадействованные документы реализации и счета фактуры
	Для Каждого СтрокаДок Из ТаблицаДок Цикл
		Если НЕ СтрокаДок.Использован Тогда
			ДокРеал = СтрокаДок.Ссылка.ПолучитьОбъект();
			ДокРеал.УстановитьПометкуУдаления(Истина);
			
			Если (ТипЗнч(СтрокаДок.СсылкаСФ) = Тип("ДокументСсылка.СчетФактураВыданный"))
			   и (Не ЗначениеНеЗаполнено(СтрокаДок.СсылкаСФ)) Тогда
				ДокСФ = СтрокаДок.СсылкаСФ.ПолучитьОбъект();
				ДокСФ.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьОтраженияРеализацииИСчетаФакутрыДляСтрокДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - РЕАЛИЗУЮЩИЕ ФУНКЦИИ СОЗДАНИЯ ДОКУМЕНТОВ ОТРАЖЕНИЯ ПОСТУПЛЕНИЙ ОТ ПОСТАВЩИКОВ

// Процедура вызывается сразу перед записью документа.
// выполняется поиск документа "Отражение поступления... " по заданным 
// параметрам.
Функция НайтиОтражениеПоступленияВСписке(ТаблицаПоступлений, СтрокаОстатка)
	
	Док = Неопределено;
	
	Для Каждого СтрокаДок Из ТаблицаПоступлений Цикл
		// Поиск документа "Отражение поступления..." выполняется по Контрагенту, договору и номеру счета-факутры.
		Если (СтрокаДок.Контрагент = СтрокаОстатка.Контрагент)
		   и (СтрокаДок.ДоговорКонтрагента = СтрокаОстатка.ДоговорКонтрагента)
		   и ( (Врег(СокрЛП(СтрокаДок.Номер)) = Врег(СокрЛП(СтрокаОстатка.НомерСФ))) или НЕ СтрокаОстатка.ПредъявленСФ)
		   и ( (Врег(СокрЛП(СтрокаДок.Дата)) = Врег(СокрЛП(СтрокаОстатка.ДатаСФ))) или НЕ СтрокаОстатка.ПредъявленСФ) Тогда
		   
		   Если (Не ЗначениеНеЗаполнено(СтрокаОстатка.Сделка))
			  и (Не ЗначениеНеЗаполнено(СтрокаДок.Сделка)) Тогда
				// если в строке ввода остатков сделка непустая и в документе "Отражение...." не пустая
				// дополнительно сравниваем эти сделки
				Если (СтрокаДок.Сделка <> СтрокаОстатка.Сделка) Тогда
					Продолжить;
				КонецЕсли;
				
			ИначеЕсли (Не ЗначениеНеЗаполнено(СтрокаОстатка.Сделка))
				    и (ЗначениеНеЗаполнено(СтрокаДок.Сделка)) Тогда
				// если в строке ввода остатков сделка не пустая, а в документе "Отражение...." сделка пустая - фильтруем
				Продолжить;
				
			ИначеЕсли Не ЗначениеНеЗаполнено(СтрокаДок.Сделка) Тогда
				// если в строке ввода остатков сделка пустая а в документе "Отражение...." не пустая - фильтруем
				Продолжить;
				
			КонецЕсли;
		   
			// найден подходящий документ поступления
			
			Док = СтрокаДок.Ссылка.ПолучитьОбъект();
			Если ТаблицаПоступлений.Колонки.Найти("Использован") <> Неопределено Тогда
				СтрокаДок.Использован = Истина;
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Док;
		
КонецФункции // НайтиОтражениеПоступленияВСписке()

// Процедура вызывается из тела процедуры СформироватьОтраженияПоступленийИСчетаФактурыДляСтрокДокумента.
// Формируется таблица, содержащая перечень документов вида "ОтражениеПоступленийТоваровИУслугДляНДС" в
// которых, в качестве расчетного документа указан настоящий документ ввода остатков.
//
Функция ПолучитьТаблицуПодчиненныхОтраженийПоступления(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Запрос.Текст = "ВЫБРАТЬ
					|	ОтражениеПоступленияТоваровИУслугНДС.Ссылка КАК Ссылка,
					|	ОтражениеПоступленияТоваровИУслугНДС.Контрагент,
					|	ОтражениеПоступленияТоваровИУслугНДС.ДоговорКонтрагента,
					|	ОтражениеПоступленияТоваровИУслугНДС.Сделка,
					|	СчетФактураПолученный.Ссылка КАК СсылкаСФ,
					|	СчетФактураПолученный.НомерВходящегоДокумента КАК Номер,
					|	СчетФактураПолученный.ДатаВходящегоДокумента КАК Дата
					|ИЗ
					|	Документ.ОтражениеПоступленияТоваровИУслугНДС КАК ОтражениеПоступленияТоваровИУслугНДС
					|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
					|		ПО ОтражениеПоступленияТоваровИУслугНДС.Ссылка = СчетФактураПолученный.ДокументОснование.Ссылка

					|ГДЕ
					|	ОтражениеПоступленияТоваровИУслугНДС.РасчетныйДокумент = &ДокументОснование

					|УПОРЯДОЧИТЬ ПО
					|	Ссылка";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуПодчиненныхОтраженийПоступления()

// Процедура вызывается сразу же после записи документа.
// Выполняется сопоставление строк документа и соответствующих им
// документов ОтражениеПоступленияТоваровИУслугНДС. Результаты данного 
// сопоставления фиксируются в строках документа, в реквизите "СчетФакутра"
//
Процедура СформироватьОтраженияПоступленийИСчетаФактурыДляСтрокДокумента()

	// В данной таблице содержится информация о том, какие счета-фактуры уже были
	// выписаны ранее на основании данных документов
	ТаблицаДок = ПолучитьТаблицуПодчиненныхОтраженийПоступления(Ссылка);
	ТаблицаДок.Колонки.Добавить("Использован");
	ТаблицаДок.Колонки.Добавить("ПредъявленСФ");
	ТаблицаДок.ЗаполнитьЗначения(Ложь, "Использован");
	ТаблицаДок.ЗаполнитьЗначения(Ложь, "ПредъявленСФ");
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
		
		ТаблицаПоОстаткам = Новый ТаблицаЗначений;
		ТаблицаПоОстаткам.Колонки.Добавить("Контрагент");
		ТаблицаПоОстаткам.Колонки.Добавить("ДоговорКонтрагента");
		ТаблицаПоОстаткам.Колонки.Добавить("Сделка");
		ТаблицаПоОстаткам.Колонки.Добавить("ДатаСФ");
		ТаблицаПоОстаткам.Колонки.Добавить("НомерСФ");
		ТаблицаПоОстаткам.Колонки.Добавить("СчетФактура");
		ТаблицаПоОстаткам.Колонки.Добавить("ВидЦенности");
		ТаблицаПоОстаткам.Колонки.Добавить("СтавкаНДС");
		ТаблицаПоОстаткам.Колонки.Добавить("ПредъявленСФ");
		ТаблицаПоОстаткам.Колонки.Добавить("СуммаБезНДС");
		ТаблицаПоОстаткам.Колонки.Добавить("НДС");
		
		// подготовим таблицу остатков
		Для Каждого СтрокаДок Из ДанныеПоСФ Цикл
			СтрокаОстатка = ТаблицаПоОстаткам.Добавить();
			
			СтрокаОстатка.Контрагент = 			СтрокаДок.Контрагент;
			СтрокаОстатка.ДоговорКонтрагента = 	СтрокаДок.ДоговорКонтрагента;
			
			СтрокаДок.Сделка = 					ОпределитьСделкуСтрокиТЧ(ЭтотОбъект, СтрокаДок);
			СтрокаОстатка.Сделка = 				СтрокаДок.Сделка;
			
			СтрокаОстатка.ДатаСФ = 				СтрокаДок.ДатаСФ;
			СтрокаОстатка.НомерСФ = 			СтрокаДок.НомерСФ;
			СтрокаОстатка.СчетФактура = 		СтрокаДок.СчетФактура;
			СтрокаОстатка.ВидЦенности =			СтрокаДок.ВидЦенности;
			СтрокаОстатка.СтавкаНДС = 			СтрокаДок.СтавкаНДС;
			СтрокаОстатка.ПредъявленСФ = 		СтрокаДок.ПредъявленСФ;
			
			СтрокаОстатка.СуммаБезНДС = СтрокаДок.СуммаБезНДС;
			СтрокаОстатка.НДС = 		СтрокаДок.НДС;
			
		КонецЦикла;
		
		// В данной таблице содержится информация о том, какие документы "Отражение поступления..." необходимо выписать
		ТаблицаПоОстаткам.Свернуть("Контрагент, ДоговорКонтрагента, Сделка, ДатаСФ, НомерСФ, СтавкаНДС, ВидЦенности, ПредъявленСФ", "СуммаБезНДС, НДС");
		
		Для Каждого СтрокаОстатка Из ТаблицаПоОстаткам Цикл
			// Цикл поиска существующего документа "ОтражениеПоступления..."
			ДокПоступления = НайтиОтражениеПоступленияВСписке(ТаблицаДок, СтрокаОстатка);
			
			Если ДокПоступления = Неопределено Тогда
				// Если документ реализации не найден, нужно создать новый
				ДокПоступления = Документы.ОтражениеПоступленияТоваровИУслугНДС.СоздатьДокумент();
				ДокПоступления.РасчетныйДокумент = Ссылка;
				ДокПоступления.Организация = Организация;
				ДокПоступления.Дата = Дата;
				
				УстановитьНомерДокумента(ДокПоступления);
				
				ДокПоступления.Контрагент = 		СтрокаОстатка.Контрагент;
				ДокПоступления.ДоговорКонтрагента = СтрокаОстатка.ДоговорКонтрагента;
				ДокПоступления.Сделка = 			СтрокаОстатка.Сделка;
				
				ДокПоступления.Комментарий = "Создан автоматически при вводе начальных остатков по НДС";
				ДокПоступления.Записать();
				
				НовыйДок = Истина;
				// Этот новый документ нужно зафиксировать в таблице подчиненных документов
				СтрокаДок = ТаблицаДок.Добавить();
				СтрокаДок.Использован = Ложь;
				
			Иначе
				НовыйДок = Ложь;
				// Информацию об этом документе нужно обновить 
				СтрокаДок = ТаблицаДок.Найти(ДокПоступления.Ссылка, "Ссылка");
				
			КонецЕсли;
			
			ДокПоступления.ПометкаУдаления = Ложь;
			ДокПоступления.Записать();
			
			Если НовыйДок Тогда
				СтрокаДок.Ссылка = 				ДокПоступления.Ссылка;
				СтрокаДок.Контрагент = 			ДокПоступления.Контрагент;
				СтрокаДок.ДоговорКонтрагента = 	ДокПоступления.ДоговорКонтрагента;
				СтрокаДок.Сделка = 				ДокПоступления.Сделка;
			КонецЕсли;
			
			Если СтрокаОстатка.ПредъявленСФ Тогда
				
				СтрокаНачалаСообщенияОбОшибке = "Для контрагента: """ + СокрЛП(СтрокаОстатка.Контрагент) +
		    		                            """ для договора: """ + СокрЛП(СтрокаОстатка.ДоговорКонтрагента) + """. ";
				
				Если ЗначениеНеЗаполнено(СтрокаОстатка.НомерСФ) Тогда
					СтрокаСообщения = "Не заполнено значение реквизита ""НомерСФ"". Счет-фактура создана не будет!";
					СтрокаДок.ПредъявленСФ = Ложь;
					Сообщить(СтрокаСообщения);
					Продолжить;
					
				КонецЕсли;
				
				Если ЗначениеНеЗаполнено(СтрокаОстатка.ДатаСФ) Тогда
					СтрокаСообщения = "Не заполнено значение реквизита ""ДатаСФ"". Счет-фактура создана не будет!";
					СтрокаДок.ПредъявленСФ = Ложь;
					Сообщить(СтрокаСообщения);
					Продолжить;
					
				КонецЕсли;

				Если СтрокаДок.СсылкаСФ = Неопределено Тогда
					// для данного документа реализации не выписан на его основании документ Счет-фактура
					// надо выписать.
					ДокСФ = Документы.СчетФактураПолученный.СоздатьДокумент();
				Иначе
					ДокСФ = СтрокаДок.СсылкаСФ.ПолучитьОбъект();
				КонецЕсли;
				
				ДокСФ.ДокументОснование = ДокПоступления.Ссылка;
				
				ДокСФ.Дата = ДокПоступления.Дата;
				ДокСФ.УстановитьНовыйНомер(ДокПоступления.Организация.Префикс);
				
				ДокСФ.ДатаВходящегоДокумента = СтрокаОстатка.ДатаСФ;
				ДокСФ.НомерВходящегоДокумента = СтрокаОстатка.НомерСФ;
				
				ДокСФ.Комментарий = "Создан автоматически при вводе начальных остатков по НДС";
				ДокСФ.Записать();
				
				// обновим данные в таблице документов
				СтрокаДок.СсылкаСФ = ДокСФ.Ссылка;
				СтрокаДок.Дата  = 	 ДокСФ.ДатаВходящегоДокумента;
				СтрокаДок.Номер = 	 ДокСФ.НомерВходящегоДокумента;
				СтрокаДок.ПредъявленСФ = Истина;

			Иначе
				// Не должно быть выставленного счета-фактуры
				СтрокаДок.ПредъявленСФ = Ложь;
				
			КонецЕсли;
				
		КонецЦикла;
	
		// далее необходимо прописать ссылки на созданные документы реализации в строки документа ввода остатков
		Для Каждого СтрокаДок Из ДанныеПоСФ Цикл
			ДокПоступления = НайтиОтражениеПоступленияВСписке(ТаблицаДок, СтрокаДок);
			Если ДокПоступления <> Неопределено Тогда
				СтрокаДок.СчетФактура = ДокПоступления.Ссылка;
			Иначе
				// Ошибочная ситуация!
				Предупреждение("Для строки №" + СтрокаДок.НомерСтроки + " не удалось выписать документ отражения поступления. Обратите внимание на номер счета-фактуры, указанного в строке. Возможно с ним какие-то проблемы.");
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;

	// удаляем незадействованные документы реализации и счета фактуры
	Для Каждого СтрокаДок Из ТаблицаДок Цикл
		Если НЕ СтрокаДок.Использован Тогда
			ДокРеал = СтрокаДок.Ссылка.ПолучитьОбъект();
			ДокРеал.УстановитьПометкуУдаления(Истина);
			
			Если ТипЗнч(СтрокаДок.СсылкаСФ) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
				ДокСФ = СтрокаДок.СсылкаСФ.ПолучитьОбъект();
				ДокСФ.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
			
		ИначеЕсли НЕ СтрокаДок.ПредъявленСФ Тогда
			// Предявлен НДС, но нет счета-фактуры
			Если ТипЗнч(СтрокаДок.СсылкаСФ) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
				ДокСФ = СтрокаДок.СсылкаСФ.ПолучитьОбъект();
				ДокСФ.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
			
		ИначеЕсли СтрокаДок.ПредъявленСФ Тогда
			// Предявлен НДС, и есть счета-фактуры
			Если ТипЗнч(СтрокаДок.СсылкаСФ) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
				ДокСФ = СтрокаДок.СсылкаСФ.ПолучитьОбъект();
				ДокСФ.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьОтраженияПоступленийИСчетаФактурыДляСтрокДокумента()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьНомерДокумента(ЭтотОбъект);
	ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	
КонецПроцедуры // ОрганизацияПриИзменении()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоСФСтавкаНДСПриИзменении(Элемент)
	
	ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные.НДС = РассчитатьСуммуНДС(ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные.СуммаБезНДС,
						Истина,
						Ложь,
						ПолучитьСтавкуНДС(ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные.СтавкаНДС));

КонецПроцедуры // ДанныеПоСФСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоСФСуммаБезНДСПриИзменении(Элемент)
	
	Суффикс = СтрЗаменить(ЭлементыФормы.ДанныеПоСФ.ТекущаяКолонка.Имя, "СуммаБезНДС", "");
	
	ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные["НДС" + Суффикс] = РассчитатьСуммуНДС(ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные["СуммаБезНДС" + Суффикс],
						Истина,
						Ложь,
						ПолучитьСтавкуНДС(ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные.СтавкаНДС));
	
КонецПроцедуры // ДанныеПоСФСуммаБезНДСПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода вида ценности
// в строке табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоСФВидЦенностиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ПосредническиеУслуги);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.Товары);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.Товары);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ПосредническиеУслуги);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля договора
// в строке табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоСФДоговорНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	мСписокВидовДоговоров = Новый СписокЗначений;
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	Иначе
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	КонецЕсли;	
		
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные.Контрагент, ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные.ДоговорКонтрагента,
	                                        мСписокВидовДоговоров, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "При изменении" поля договора
// в строке табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоСФДоговорКонтрагентаПриИзменении(Элемент)
	
	Если Не ЗначениеНеЗаполнено(ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные.ДоговорКонтрагента) Тогда
		ЗаказПокупателя = Истина;
		Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
			ЗаказПокупателя = Ложь;
		КонецЕсли;
			
		УстановитьТипСделки(ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные, ЗаказПокупателя);
			
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля сделка
// в строке табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоСФСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Сделка = ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные.Сделка;
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
		Если ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			ТипЗаказа = "СчетНаОплатуПоставщика";
		Иначе
			ТипЗаказа = "ЗаказПоставщику";
		КонецЕсли;
		
		ВидДвиженияРасчеты = "Расход";
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда
		Если ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			ТипЗаказа = "СчетНаОплатуПокупателю";
		Иначе
			ТипЗаказа = "ЗаказПокупателя";
		КонецЕсли;

		ВидДвиженияРасчеты = "Приход";
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		Если ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			ТипЗаказа = "СчетНаОплатуПокупателю";
		Иначе
			ТипЗаказа = "ЗаказПокупателя";
		КонецЕсли;

		ВидДвиженияРасчеты = "Приход";
		
	КонецЕсли;
		
	НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные.ДоговорКонтрагента, ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные.Сделка, СтандартнаяОбработка, 
	                     	   ВидДвиженияРасчеты, ТипЗаказа);
	
КонецПроцедуры

// Процедура - обработчик события "При изменении" поля Контрагента
// в строке табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоСФКонтрагентПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные;
	СтрокаТабличнойЧасти.ДоговорКонтрагента = СтрокаТабличнойЧасти.Контрагент.ОсновнойДоговорКонтрагента;
	ДанныеПоСФДоговорКонтрагентаПриИзменении("");

КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииСтроки" 
// для табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоСФПриАктивизацииСтроки(Элемент)
	
	ОтобразитьДополнительныеСведения();
	
	Элемент.Колонки.Сделка.ЭлементУправления.ТолькоПросмотр = Ложь;
	
КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииКолонки" 
// для табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоСФПриАктивизацииКолонки(Элемент)
	
	Если мПроисходитРедактирование Тогда 
		 
		ТекущаяКолонка = Элемент.ТекущаяКолонка; 
		 
		Если ТекущаяКолонка = Элемент.Колонки.Сделка Тогда
			ТекущаяКолонка.ЭлементУправления.ТолькоПросмотр =  НЕ РазрешенДоступ(Элемент.ТекущиеДанные.ДоговорКонтрагента); 
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Функция - проверяет возможность доступа к колонке 
// "Сделка" у табличной части ДанныеПоСФ.
//
Функция РазрешенДоступ(Значение) 

	Если Не ЗначениеНеЗаполнено(Значение) Тогда
		Если Значение.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции  

// Процедура - обработчик события "ПередНачалоИзменения" 
// для табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоСФПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущаяКолонка = Элемент.Колонки.Сделка Тогда
		// Проверка возможности редактирования колонки "Сделка"
		Отказ = НЕ  РазрешенДоступ (Элемент.ТекущиеДанные.ДоговорКонтрагента); 
		
	Иначе
		
		Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
			
			ТекСобытие = Неопределено;
				
			Если (Элемент.ТекущаяКолонка.Имя = "СуммаБезНДС")
			 или (Элемент.ТекущаяКолонка.Имя = "НДС") Тогда
				ТекСобытие = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком; 
				
			ИначеЕсли  (Элемент.ТекущаяКолонка.Имя = "СуммаБезНДСОплата")
				   или (Элемент.ТекущаяКолонка.Имя = "НДСОплата") Тогда
				ТекСобытие = Перечисления.СобытияПоНДСПокупки.НДСОплачен; 
				   
			ИначеЕсли  (Элемент.ТекущаяКолонка.Имя = "СуммаБезНДСВключеноВСтоимость")
				   или (Элемент.ТекущаяКолонка.Имя = "НДСВключеноВСтоимость") Тогда
				ТекСобытие = Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость; 
				   
			ИначеЕсли  (Элемент.ТекущаяКолонка.Имя = "СуммаБезНДССтавка0")
				   или (Элемент.ТекущаяКолонка.Имя = "НДССтавка0") Тогда
				ТекСобытие = Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0; 
				   
			ИначеЕсли  (Элемент.ТекущаяКолонка.Имя = "СуммаБезНДСПредъявлено")
				   или (Элемент.ТекущаяКолонка.Имя = "НДСПредъявлено") Тогда
				ТекСобытие = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету; 
				
			ИначеЕсли  (Элемент.ТекущаяКолонка.Имя = "СуммаБезНДСПредъявлено0")
				   или (Элемент.ТекущаяКолонка.Имя = "НДСПредъявлено0") Тогда
				ТекСобытие = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0; 
				
			КонецЕсли;
			
			// Проверяем наличие дополнительных сведений по данному событию
			Если ТекСобытие <> Неопределено Тогда
				Если Найти(Элемент.ТекущаяКолонка.Имя, "СуммаБезНДС") > 0 Тогда
					СуммаДоп = РассчитатьСуммуСобытия(Элемент.ТекущаяСтрока.КлючСтроки, ТекСобытие, "СуммаБезНДС");
				Иначе
					СуммаДоп = РассчитатьСуммуСобытия(Элемент.ТекущаяСтрока.КлючСтроки, ТекСобытие, "НДС");
				КонецЕсли;
				
				Если СуммаДоп <> 0 Тогда
					Предупреждение("Значение данного реквизита следует редактировать на закладке ""Дополнительные сведения"", путем корректировки сумм соответствующих событий.");
					Отказ = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
    
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактированияСтроки" 
// для табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоСФПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	мПроисходитРедактирование = Истина;
	
	Если НоваяСтрока Тогда

		// Инициализируем значение "КлючСтроки" для установки связи данной таблицы с таблицей 
		// "ДанныеПоСФ".
		// Значение должно быть уникальным в пределах таблицы ДополнительныеСведения
		НеУстановлено = Истина;
		Кандидат = ДанныеПоСФ.Количество();

		Пока НеУстановлено Цикл
			Если ДанныеПоСФ.Найти(Кандидат, "КлючСтроки") = Неопределено Тогда
				// Уникальное значение ключа
				ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные.КлючСтроки = Кандидат;
				НеУстановлено = Ложь;

			Иначе
				// Такое значение ключа уже использовано
				Кандидат = Кандидат + 1;

			КонецЕсли;

		КонецЦикла;
		
		ОтобразитьДополнительныеСведения();

	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ДанныеПоСФПриОкончанииРедактирования" 
// для табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоСФПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	мПроисходитРедактирование = Ложь;
	
КонецПроцедуры

// Процедура - обработчик события "ПередУдалением" 
// строки табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоСФПередУдалением(Элемент, Отказ)
	
	// Необходимо очистить дополнительные сведения
	КлючПоиска = Новый Структура("КлючСтроки" , ЭлементыФормы.ДополнительныеСведения.ОтборСтрок.КлючСтроки.Значение);
	
	НайденныеСтроки = ДополнительныеСведения.НайтиСтроки(КлючПоиска);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		ДополнительныеСведения.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеУдаления" 
// для табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоСФПослеУдаления(Элемент)
	
	ОтобразитьДополнительныеСведения();
	
КонецПроцедуры


// Процедура - обработчик события "НачалоВыбораИзСписка" поля событие
// в строке табличной части "Дополнительные сведения".
//
Процедура ДополнительныеСведенияСобытиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	
	Элемент.СписокВыбора.Добавить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком);
	Элемент.СписокВыбора.Добавить(Перечисления.СобытияПоНДСПокупки.НДСОплачен);
	Элемент.СписокВыбора.Добавить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету);
	Элемент.СписокВыбора.Добавить(Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость);
	Элемент.СписокВыбора.Добавить(Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0);
	Элемент.СписокВыбора.Добавить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля СуммаБезНДС
// в строке табличной части "Дополнительные сведения".
//
Процедура ДополнительныеСведенияСуммаБезНДСПриИзменении(Элемент)
	
	ТекСобытие = ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные.Событие;
	
	Если ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные.Событие = Неопределено Тогда
		Предупреждение("В текущей строке не указано событие!");
		ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные.СуммаБезНДС = 0;
		Возврат;
	КонецЕсли;
	
	СписокСобытий = Новый СписокЗначений;
	
	СписокСобытий.Добавить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком, "");
	СписокСобытий.Добавить(Перечисления.СобытияПоНДСПокупки.НДСОплачен, 	"Оплата");
	СписокСобытий.Добавить(Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость, 		"ВключеноВСтоимость");
	СписокСобытий.Добавить(Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0, 		"Ставка0");
	СписокСобытий.Добавить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету, 		"Предъявлено");
	СписокСобытий.Добавить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, 		"Предъявлено0");
	
	Суффикс = СписокСобытий.НайтиПоЗначению(ТекСобытие);
	
	Если Суффикс <> Неопределено Тогда
		ТекСтрокаСФ = ЭлементыФормы.ДанныеПоСФ.ТекущаяСтрока;
		ТекСтрокаСФ["СуммаБезНДС" + Суффикс.Представление] = РассчитатьСуммуСобытия(ТекСтрокаСФ.КлючСтроки, ТекСобытие, "СуммаБезНДС");
	КонецЕсли;
	
	СуммаНДС = РассчитатьСуммуНДС(ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные.СуммаБезНДС,
						Истина,
						Ложь,
						ПолучитьСтавкуНДС(ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные.СтавкаНДС));
						
	ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные.НДС = СуммаНДС;					
	ДополнительныеСведенияНДСПриИзменении(Элемент);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля НДС
// в строке табличной части "Дополнительные сведения".
//
Процедура ДополнительныеСведенияНДСПриИзменении(Элемент)
	
	ТекСобытие = ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные.Событие;
	
	Если ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные.Событие = Неопределено Тогда
		Предупреждение("В текущей строке не указано событие!");
		ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные.НДС = 0;
		Возврат;
	КонецЕсли;
	
	СписокСобытий = Новый СписокЗначений;
	
	СписокСобытий.Добавить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком, "");
	СписокСобытий.Добавить(Перечисления.СобытияПоНДСПокупки.НДСОплачен, "Оплата");
	СписокСобытий.Добавить(Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость, "ВключеноВСтоимость");
	СписокСобытий.Добавить(Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0, "Ставка0");
	СписокСобытий.Добавить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету,  "Предъявлено");
	СписокСобытий.Добавить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, "Предъявлено0");
	
	Суффикс = СписокСобытий.НайтиПоЗначению(ТекСобытие);
	
	Если Суффикс <> Неопределено Тогда
		ТекСтрокаСФ = ЭлементыФормы.ДанныеПоСФ.ТекущаяСтрока;
		ТекСтрокаСФ["НДС" + Суффикс.Представление] = РассчитатьСуммуСобытия(ТекСтрокаСФ.КлючСтроки, ТекСобытие, "НДС");
	КонецЕсли;
	
КонецПроцедуры


// Процедура - обработчик события "ПриНачалеРедактирования"
// строки табличной части "Дополнительные сведения".
//
Процедура ДополнительныеСведенияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные.КлючСтроки = ЭлементыФормы.ДополнительныеСведения.ОтборСтрок.КлючСтроки.Значение;
	КонецЕсли; 
	
КонецПроцедуры


// Процедура вызывается при переключении закладок страниц табличной части.
// Устанавливается отбор в табличной части ДополнительныеСведения в зависимости
// от текущей строки в таблице ДанныеПоСФ.
//
Процедура ПанельСФПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элемент.ТекущаяСтраница.Имя = "ДополнительныеСведения" Тогда
		ОтобразитьДополнительныеСведения();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

мПроисходитРедактирование = Ложь;
