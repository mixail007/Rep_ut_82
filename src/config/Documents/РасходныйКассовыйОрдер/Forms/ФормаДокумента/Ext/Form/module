////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

//Хранит текущую строку списка оплачиваемых документов
Перем СтрокаПлатеж;

//Хранит текущую строку списка ведомостей на выплату ЗП
Перем СтрокаВыплата;

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов;

Перем ИнвертироватьСуммы;

Перем мПечатнаяФормаПоУмолчанию;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	СтрокаПлатеж.Сделка = Неопределено; // Для сделки нет значения по умолчанию в договоре	
	СтрокаПлатеж.ДокументПланированияПлатежа=Документы.ЗаявкаНаРасходованиеСредств.ПустаяСсылка();

	СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);

	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

	РассчитатьСуммуВзаиморасчетов();

	Если ЗначениеНеЗаполнено(Контрагент) Тогда
		Контрагент = СтрокаПлатеж.ДоговорКонтрагента.Владелец;
	КонецЕсли;
	
	УстановитьВидимость();

КонецПроцедуры // ПриИзмененииДоговора()

Процедура ПриИзмененииКонтрагента()
	
	РасшифровкаПлатежа.Очистить();
	
	СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
	
	Если ЗначениеНеЗаполнено(ДокументОбъект.Контрагент) Тогда 
		СтрокаПлатеж.ДоговорКонтрагента = Неопределено;
	ИначеЕсли (ТипЗнч(Контрагент)=Тип("СправочникСсылка.Контрагенты")) И (НЕ ОпределитьВидДоговораСКонтрагентом(ВидОперации).НайтиПоЗначению(Контрагент.ОсновнойДоговорКонтрагента.ВидДоговора)=Неопределено) Тогда
		Если Организация.Пустая() Тогда
			СтрокаПлатеж.ДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
			Организация=Контрагент.ОсновнойДоговорКонтрагента.Организация;
		ИначеЕсли Контрагент.ОсновнойДоговорКонтрагента.Организация.Пустая()
			ИЛИ Контрагент.ОсновнойДоговорКонтрагента.Организация=Организация Тогда
			СтрокаПлатеж.ДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
		КонецЕсли;
		
		Выдать =?(Контрагент.НаименованиеПолное="",Контрагент.Наименование, Контрагент.НаименованиеПолное);
		
	КонецЕсли;
	
	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
	
КонецПроцедуры // ПриИзмененииКонтрагента

// Процедура выполняет заполнение реквизита Контрагент значением по умолчанию.
//
Процедура ЗаполнитьКонтрагента()

	ВремКонтрагент = Контрагент;
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
		ВремКонтрагент = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойПоставщик");

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю Тогда
		ВремКонтрагент = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойПокупатель");

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ Тогда
		ВремКонтрагент = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяКассаККМ");
	КонецЕсли;

	Если ЗначениеНеЗаполнено(Контрагент) Тогда
		Контрагент = ВремКонтрагент;
		ПриИзмененииКонтрагента();
		ПриИзмененииДоговора();
		УстановитьФокус();
	КонецЕсли;
		
КонецПроцедуры // ЗаполнитьПолучателя()

// Возвращает фокус на строку ТЧ "Расшифровка платежа" при его потере в режиме редактирования
// одиночного платежа.
Процедура УстановитьФокус()
	
	Если ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=Неопределено Тогда
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=СтрокаПлатеж;
	КонецЕсли;
	
КонецПроцедуры // УстановитьФокус()

// Процедура рассчитывает сумму взаиморасчетов подотчетника.
//
Процедура РассчитатьСуммуВзаиморасчетов()

	ПроверкаКурсовВалют(СтрокаПлатеж);
	
	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		ВалютаВзаиморасчетов=ВалютаВзаиморасчетовПодотчетника;
	Иначе
		ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КонецЕсли;
	
	Если (СтрокаПлатеж.КурсВзаиморасчетов <> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов=ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, ВалютаДокумента,
			                                                  ВалютаВзаиморасчетов,
			                                                  КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
															  КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);	
	Иначе
		СтрокаПлатеж.СуммаВзаиморасчетов = 0;
	КонецЕсли;
	
	Если СтрокаПлатеж.КурсВзаиморасчетовПлан>0 Тогда
		РассчитатьСуммуПлатежаПлан();
	КонецЕсли;
		
КонецПроцедуры // РассчитатьСуммуВзаиморасчетов

// Процедура рассчитывает сумму платежа по заявке.
//
Процедура РассчитатьСуммуПлатежаПлан()
	
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКурсовВалют(СтрокаПлатеж);
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Иначе
		СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаВзаиморасчетов;
		Возврат;
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаВзаиморасчетов;
	
	ИначеЕсли (КурсДокумента <> 0) И (СтрокаПлатеж.КратностьВзаиморасчетов <> 0) И (СтрокаПлатеж.КурсВзаиморасчетовПлан <> 0) Тогда
		СтрокаПлатеж.СуммаПлатежаПлан=ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
															ВалютаДокумента,
			                                                СтрокаПлатеж.КурсВзаиморасчетовПлан,КурсДокумента,
															СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);	
	Иначе
		СтрокаПлатеж.СуммаПлатежаПлан = 0;
	КонецЕсли;

КонецПроцедуры // РассчитатьСуммуПлатежаПлан()

// Процедура рассчитывает сумму платежа по сумме взаиморасчетов.
//
Процедура РассчитатьСуммуПлатежа()
	
	ПроверкаКурсовВалют(СтрокаПлатеж);
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		ВалютаВзаиморасчетов=ВалютаВзаиморасчетовПодотчетника;
	Иначе
		СтрокаПлатеж.СуммаПлатежа=СтрокаПлатеж.СуммаВзаиморасчетов;
		Возврат;
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаПлатежа=СтрокаПлатеж.СуммаВзаиморасчетов;
	
	ИначеЕсли (КурсДокумента <> 0) И (СтрокаПлатеж.КратностьВзаиморасчетов <> 0) И (СтрокаПлатеж.КурсВзаиморасчетов <> 0) Тогда
		СтрокаПлатеж.СуммаПлатежа=ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
															ВалютаДокумента,
			                                                СтрокаПлатеж.КурсВзаиморасчетов,КурсДокумента,
															СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);	
	Иначе
		СтрокаПлатеж.СуммаПлатежа = 0;
	КонецЕсли;
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуПлатежа()

//Процедура рассчитывает курс взаиморасчетов по заявке
//
Процедура РассчитатьКурсВзаиморасчетовПлан()
	
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		Возврат;
	КонецЕсли;
	
	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетовПлан = СтрокаПлатеж.СуммаПлатежаПлан * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.СуммаВзаиморасчетов/ КратностьДокумента;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьКурсВзаиморасчетов

//Процедура рассчитывает курс взаиморасчетов документа
//
Процедура РассчитатьКурсВзаиморасчетов()
	
	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.СуммаВзаиморасчетов/ КратностьДокумента;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьКурсВзаиморасчетов

// Обрабатывает интерактивное и программное изменение валюты
// взаиморасчетов с подотчетником
//
Процедура ПриИзмененииВалютыПодотчетника()
	
	Если НЕ ВалютаДокумента=ВалютаВзаиморасчетовПодотчетника Тогда
		ОтражатьВБухгалтерскомУчете=Ложь;
		ОтражатьВНалоговомУчете=Ложь;
	КонецЕсли;
	
	СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(ВалютаВзаиморасчетовПодотчетника, Дата);
	СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
	РассчитатьСуммуВзаиморасчетов();
	УстановитьВидимость();

КонецПроцедуры // ПриИзмененииВалютыПодотчетника()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
    	
		ЭлементыФормы.ПанельОболочка.Страницы.Страница1.Видимость = Истина;
		
		Если ЭтоНовый() Тогда
		
			Если ОписьДенежнойНаличности.Количество() = 0 Тогда
			
				ЗаполнитьОписьДенежныхСредств();
			
			КонецЕсли; 
			
		ИначеЕсли ОписьДенежнойНаличности.Количество() = 0 Тогда
	
	
			Если Вопрос("Заполнить таблицу описи денежных средств?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да  Тогда
			
				ЗаполнитьОписьДенежныхСредств();
			
			КонецЕсли; 
			
		КонецЕсли; 
		
	Иначе
		
		ЭлементыФормы.ПанельОболочка.Страницы.Страница1.Видимость = Ложь;
		
	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
    	
		Если ОписьДенежнойНаличности.Количество() = 0 Тогда
		
			ЭлементыФормы.ПанельОболочка.Страницы.Страница1.Видимость = Ложь;
		
		КонецЕсли; 
		
		
	КонецЕсли;

	
	ЭлементыФормы.СтавкаНДС.Доступность                   = Истина;
	ЭлементыФормы.ОтражатьВБухгалтерскомУчете.Доступность = Истина;
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность     = Истина;

	ЭлементыФормы.НадписьРедактировать.Видимость = Ложь;
	ЭлементыФормы.Список.Видимость = Ложь;
	ЭлементыФормы.Список1.Видимость = Ложь;

	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		УстановитьТекущуюСтраницу("ВыдачаПодотчетнику",ЭлементыФормы.ОсновнаяПанель);

		Если НЕ ВалютаДокумента=ВалютаВзаиморасчетовПодотчетника Тогда
			ЭлементыФормы.ОтражатьВБухгалтерскомУчете.Доступность=Ложь;
			ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность=Ложь;
		КонецЕсли;

		ЭлементыФормы.РамкаПлательщикПодотчет.Заголовок="Взаиморасчеты с подотчетным лицом";
		ЭлементыФормы.НадписьФизЛицо.Заголовок="Подотчетник";
		ЭлементыФормы.НадписьДокумент.Заголовок="Авансовый отчет";
		
		Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
			
			ЭлементыФормы.КурсВзаиморасчетовПланПодотчет.Видимость=Ложь;
			ЭлементыФормы.СуммаПлатежаПланПодотчет.Видимость=Ложь;
			ЭлементыФормы.НадписьКурсВзаиморасчетовПланПодотчет.Видимость=Ложь;
			ЭлементыФормы.НадписьСуммаПлатежаПланПодотчет.Видимость=Ложь;
			ЭлементыФормы.ИнфНадписьКурсаЗаявкиПодотчет.Видимость=Ложь;
			
		Иначе
			
			ЭлементыФормы.КурсВзаиморасчетовПлан.Видимость=Истина;
			ЭлементыФормы.СуммаПлатежаПлан.Видимость=Истина;
			ЭлементыФормы.НадписьКурсВзаиморасчетовПлан.Видимость=Истина;
			ЭлементыФормы.НадписьСуммаПлатежаПлан.Видимость=Истина;
			ЭлементыФормы.ИнфНадписьКурсаЗаявки.Видимость=Истина;
			
		КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		УстановитьТекущуюСтраницу("ВзносНаличнымиВБанк",ЭлементыФормы.ОсновнаяПанель);

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
		УстановитьТекущуюСтраницу("Прочее",ЭлементыФормы.ОсновнаяПанель);

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ Тогда
		УстановитьТекущуюСтраницу("ВыдачаКассеККМ",ЭлементыФормы.ОсновнаяПанель);
		ЭлементыФормы.ОтражатьВБухгалтерскомУчете.Доступность = Ложь;
		ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = Ложь;

	ИначеЕсли ЕстьРасчетыСКонтрагентами Тогда

		УстановитьТекущуюСтраницу("РКО",ЭлементыФормы.ОсновнаяПанель);
		Если Список Тогда
			УстановитьТекущуюСтраницу("ПлатежПоНесколькимСделкам", ЭлементыФормы.ПанельПлатежи);
		Иначе
			УстановитьТекущуюСтраницу("ПлатежПоОднойСделке", ЭлементыФормы.ПанельПлатежи);
		КонецЕсли;

		ЭлементыФормы.РамкаРасшифровкаПлатежа.Заголовок="Расшифровка платежа";
		ЭлементыФормы.Сделка.Доступность=Истина;

		ЭлементыФормы.НадписьРедактировать.Видимость = Истина;
		ЭлементыФормы.Список.Видимость = Истина;
		ЭлементыФормы.Список1.Видимость = Истина;
		
		Если СтрокаПлатеж.ДоговорКонтрагента.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			ЭлементыФормы.Сделка.Доступность=Ложь;
		Иначе
			ЭлементыФормы.Сделка.Доступность=Истина;
		КонецЕсли;
				
		Если (Не Список) И ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
			
			ЭлементыФормы.КурсВзаиморасчетовПлан.Видимость=Ложь;
			ЭлементыФормы.СуммаПлатежаПлан.Видимость=Ложь;
			ЭлементыФормы.НадписьКурсВзаиморасчетовПлан.Видимость=Ложь;
			ЭлементыФормы.НадписьСуммаПлатежаПлан.Видимость=Ложь;
			ЭлементыФормы.ИнфНадписьКурсаЗаявки.Видимость=Ложь;
			
		Иначе
			
			ЭлементыФормы.КурсВзаиморасчетовПлан.Видимость=Истина;
			ЭлементыФормы.СуммаПлатежаПлан.Видимость=Истина;
			ЭлементыФормы.НадписьКурсВзаиморасчетовПлан.Видимость=Истина;
			ЭлементыФормы.НадписьСуммаПлатежаПлан.Видимость=Истина;
			ЭлементыФормы.ИнфНадписьКурсаЗаявки.Видимость=Истина;
			
		КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда

		УстановитьТекущуюСтраницу("РКО",ЭлементыФормы.ОсновнаяПанель);
		УстановитьТекущуюСтраницу("ПлатежПоОднойСделке", ЭлементыФормы.ПанельПлатежи);

		ЭлементыФормы.РамкаРасшифровкаПлатежа.Заголовок="Расшифровка платежа";

		ЭлементыФормы.Сделка.Доступность=Ложь;

		ЭлементыФормы.НадписьРедактировать.Видимость = Ложь;
		ЭлементыФормы.Список.Видимость = Ложь;
		ЭлементыФормы.Список1.Видимость = Ложь;

	КонецЕсли;

	Если ОтражатьВУправленческомУчете Тогда
		ЭлементыФормы.Оплачено.Доступность           = Истина;
		ЭлементыФормы.ОтраженоВОперУчете.Доступность = Истина;
	Иначе
		ЭлементыФормы.Оплачено.Доступность           = Ложь;
		ЭлементыФормы.ОтраженоВОперУчете.Доступность = Ложь;
	КонецЕсли;

	Если Список Тогда
		ЭлементыФормы.ПанельПлатежи.Страницы["ПлатежПоОднойСделке"].Видимость       = Ложь;
		ЭлементыФормы.ПанельПлатежи.Страницы["ПлатежПоНесколькимСделкам"].Видимость = Истина;
		ЭлементыФормы.ПанельПлатежи.ТекущаяСтраница=ЭлементыФормы.ПанельПлатежи.Страницы["ПлатежПоНесколькимСделкам"];
	Иначе
		ЭлементыФормы.ПанельПлатежи.Страницы["ПлатежПоОднойСделке"].Видимость       = Истина;
		ЭлементыФормы.ПанельПлатежи.Страницы["ПлатежПоНесколькимСделкам"].Видимость = Ложь;
	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю ИЛИ
			ВидОперации=Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
			
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки["Чек"].Доступность = Истина;
		
	Иначе
		
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки["Чек"].Доступность = Ложь;
		
	КонецЕсли;
	
	УстановитьДанныеДляРеквизитов();
	
	ВидимостьРеквизитаПроект(ЭтотОбъект, ЭлементыФормы, "НадписьПроект,Проект,НадписьПроект1,Проект1,НадписьПроект2,Проект2,НадписьПроект3,Проект3,НадписьПроект4,Проект4,РасшифровкаПлатежа.Проект");
	
	Если (ЭлементыФормы.Списком2.Значение = Ложь) Тогда 
		ЭлементыФормы.Затраты.Видимость = Истина;
		ЭлементыФормы.СтатьяЗатрат.Видимость = Ложь;		
		ЭлементыФормы.НадписьСтатьяЗатрат.Видимость = Ложь;		
		ЭлементыФормы.КоманднаяПанель2.Видимость = Истина;
	Иначе 
		ЭлементыФормы.Затраты.Видимость = Ложь;
		ЭлементыФормы.СтатьяЗатрат.Видимость = Истина;
		ЭлементыФормы.НадписьСтатьяЗатрат.Видимость = Истина;
		ЭлементыФормы.КоманднаяПанель2.Видимость = Ложь;		
	КонецЕсли;
	
	Если (ОтражатьВЗатратах) Тогда
		ЭлементыФормы.ПанельОболочка.Страницы.Страница2.Видимость = Истина;
	Иначе 
		ЭлементыФормы.ПанельОболочка.Страницы.Страница2.Видимость = Ложь;
	КонецЕсли;
	
	//21.08.17 Смирнов
	Если НомерЧекаККМ<>0 тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки["Чек"].Доступность = Ложь;
	КонецЕсли;

КонецПроцедуры // УстановитьВидимость()

// Процедура переопределяет источники данных для реквизитов "СуммаДокумента" и "СуммаВзаиморасчетов".
// В режиме расчетов с контрагентами без разбиения они меняются местами.
//
Процедура УстановитьДанныеДляРеквизитов()
	
	Если ((ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) И Не Список)
		ИЛИ ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		ЭлементыФормы.СуммаДокумента.Данные="ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.СуммаВзаиморасчетов";
		
		ЭлементыФормы.НадписьСуммаДокумент.Данные="НадписьСуммаВзаиморасчетов";
		ЭлементыФормы.НадписьВалютаДокумент.Данные="";
		ЭлементыФормы.НадписьВалютаДокумент.Заголовок="";
		ЭлементыФормы.НадписьВалютаВзаиморасчетов.Данные="НадписьВалютаДокумент";
		ЭлементыФормы.НадписьВалютаВзаиморасчетовПодотчет.Данные="НадписьВалютаДокумент";
				
		ИнвертироватьСуммы=Истина;
		
	Иначе
		
		ЭлементыФормы.СуммаДокумента.Данные="СуммаДокумента";
		ЭлементыФормы.НадписьВалютаДокумент.Данные="НадписьВалютаДокумент";

		ЭлементыФормы.НадписьСуммаДокумент.Данные="";
		ЭлементыФормы.НадписьСуммаДокумент.Заголовок="Сумма: ";
		
		ИнвертироватьСуммы=Ложь;
				
	КонецЕсли;
	
КонецПроцедуры // УстановитьДанныеДляРеквизитов()

// Устанавливает тип поля "Контрагент" в зависимости от вида операции.
//
// Параметры:
//  Нет.
//
Процедура УстановитьТипКонтрагент()

	ИмяСправочника         = "Контрагенты";
	ИмяРасчетногоДокумента ="АвансовыйОтчет";
	
	ЕстьКонтрагент=Истина;
	ЕстьРасчетныйДокумент=Ложь;

	Если      ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ Тогда
		ИмяСправочника = "КассыККМ";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику  Тогда
		ИмяСправочника = "ФизическиеЛица";
		ЕстьРасчетныйДокумент=Истина;
	ИначеЕсли //ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее ИЛИ  //*** 2016.03 обязательно укащывать контрагента, чтоб видеть, кому выдали деньги
		ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		
		ЕстьКонтрагент=Ложь;
		
	КонецЕсли;
	
	Если ЕстьКонтрагент Тогда
		
		Если ТипЗнч(Контрагент) <> Тип("СправочникСсылка." + ИмяСправочника) Тогда
			Контрагент = Справочники[ИмяСправочника].ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		
		Если НЕ Контрагент=Неопределено Тогда
			Контрагент=Неопределено;
		КонецЕсли;
		
	КонецЕсли;

	Если ЕстьРасчетныйДокумент Тогда
		
		Если ТипЗнч(РасчетныйДокумент) <> Тип("ДокументСсылка." + ИмяРасчетногоДокумента) Тогда
			РасчетныйДокумент = Документы[ИмяРасчетногоДокумента].ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		
		Если Не ЗначениеНеЗаполнено(РасчетныйДокумент) Тогда
			
			РасчетныйДокумент=Документы[ИмяРасчетногоДокумента].ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЕсли;


КонецПроцедуры // УстановитьТипКонтрагент()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ЗаполнитьОписьДенежныхСредств()

	
	ВалютаОписи = ВалютаДокумента.Наличность;

	Для каждого Сч Из ВалютаОписи Цикл
	
		НоваяСтрока = ОписьДенежнойНаличности.Добавить();
		НоваяСтрока.Цена = Сч.ЕдиницаПересчета;
		НоваяСтрока.НаименованиеНоминала = Сч.НаименованиеНоминала;
	
	КонецЦикла; 

КонецПроцедуры
 


// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	яштФормаДокументаПриОткрытии(ЭтотОбъект, ЭтаФорма);
	
	
	Если РасшифровкаПлатежа.Количество()=0 Тогда
		НоваяСтрока=РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ	
		
		// Заполнить реквизиты значениями по умолчанию.

		ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета,РасшифровкаПлатежа);
		УстановитьНомерДокумента(ЭтотОбъект);
		
		Если НЕ (ВидОперации=Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
			ИЛИ ВидОперации=Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее) Тогда
			
			ЗаполнитьКонтрагента();
			
		КонецЕсли;
		
		
		Если ЗначениеНеЗаполнено(СтрокаПлатеж.СтатьяДвиженияДенежныхСредств) Тогда
			
			УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);
			
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(ВидВыдачиДенежныхСредств) Тогда
			ВидВыдачиДенежныхСредств = Перечисления.ВидВыдачиДенежныхСредств.КассеККМ;
		КонецЕсли;
		
		НомерЧекаККМ = 0;
		
	Иначе
		
		УстановитьКурсДокумента();
		ЕстьРасчетыСКонтрагентами=ЕстьРасчетыСКонтрагентами(ВидОперации);
		ЕстьРасчетыПоКредитам=ЕстьРасчетыПоКредитам(ВидОперации);
	
	КонецЕсли;
		
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Заполнить подменю выбора печатных форм.
	СписокМакетов = ЭтотОбъект.ПолучитьСписокПечатныхФорм();
	УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати,
	                                       СписокМакетов,
	                                       Новый Действие("ДействияФормыДействиеВыбратьПечатнуюФормы"));

	// Установить печатную форму по умолчанию.
	УстановитьКнопкуПечати(ЭтотОбъект.Метаданные().Имя, ЭтаФорма, СписокМакетов, мПечатнаяФормаПоУмолчанию);

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Установить тип поля Контрагент.
	УстановитьТипКонтрагент();
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	// Установить видимость реквизитов и заголовков колонок.
	Если РасшифровкаПлатежа.Количество()>1 Тогда
		Список=Истина;
	Иначе
		Список=Ложь;
	КонецЕсли;
	
	Если Затраты.Количество()>0 Тогда 
		ЭлементыФормы.Списком2.Значение = Ложь;
	Иначе 
		ЭлементыФормы.Списком2.Значение = Истина;
	КонецЕсли;
	

	УстановитьВидимость();
	
	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		
		Если ОписьДенежнойНаличности.Количество() = 0 Тогда
		
			ЗаполнитьОписьДенежныхСредств();
		
		КонецЕсли; 
		
		
		ПользовательИБ 			= ПользователиИнформационнойБазы.ТекущийПользователь();
		РаботникШиномонтажа 	= ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"РаботникШиномонтажа"); 
		
		Если (ПользовательИБ <> Неопределено
			И ПользовательИБ.ОсновнойИнтерфейс <> Неопределено
			И ПользовательИБ.ОсновнойИнтерфейс.Имя = "ИнтерфейсКассира") или (РаботникШиномонтажа) Тогда //Задействуем интерфейс кассира
			
			//Установить страницу
			
			ЭлементыФормы.ПанельОболочка.ТекущаяСтраница = ЭлементыФормы.ПанельОболочка.Страницы.Страница1;
			
			Если АвтоСоздание Тогда
				
				СуммаДокументаПриИзменении();
				
			КонецЕсли;
			
			
		КонецЕсли; 
		
	КонецЕсли;
	
	// { Лапенков 20070321 отражать в затратах всегда истина, если не работаем по заказам автозапчасти
	// в этом случае РКО - возврат аванса покупателю не является затратой
	Если (ЭтоНовый() и не ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.ЗаказПокупателя")) Тогда 
		ОтражатьВЗатратах = Истина;
		ЭлементыФормы.ПанельОболочка.Страницы.Страница2.Видимость = Истина;
	КонецЕсли;
    
	//БАЛАНС (04.12.2007)                       
	//
	мПроведениеИзФормы = Истина;
	
	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 
	
	//***2018.10.18 Задача № 56734
	Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "РазрешитьРедактироватьНоменклатурныеГруппыВДокументахПриОтраженииВЗатратах") Тогда
		ЭтаФорма.ТолькоПросмотр = Ложь;
		Для каждого Элемент из ЭлементыФормы Цикл
			Попытка
				Элемент.ТолькоПросмотр = Истина;
				Если Элемент.Имя = "Затраты" Тогда  											
					Элемент.ТолькоПросмотр = Ложь;
					Для каждого Колонка ИЗ Элемент.Колонки Цикл
						Если Колонка.Имя <> "НоменклатурнаяГруппа" Тогда   //доступна только колонка Номенклатурная группа
							Колонка.ТолькоПросмотр = Истина;       
						КонецЕсли;
					КонецЦикла;				
				ИначеЕсли Элемент.Имя = "НоменклатурнаяГруппа" Тогда  											
					Элемент.ТолькоПросмотр = Ложь;
				КонецЕсли;
			Исключение
				Если Элемент.Имя = "ПанельОболочка" Тогда  			//на ней расположены табл часть, поэтому её оставляем доступной
					Элемент.Доступность = Истина;
				Иначе
					Элемент.Доступность = Ложь;
				КонецЕсли;
			КонецПопытки;
		КонецЦикла;  
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	
	ЭлементыФормы.ИнфНадписьКурса.Заголовок = ПолучитьИнформациюКурсаВалютыСтрокой(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
																					 СтрокаПлатеж.КурсВзаиморасчетов,
																					 СтрокаПлатеж.КратностьВзаиморасчетов,
	                                                                                 мВалютаРегламентированногоУчета,
																					 Истина);
																					 
	НадписьВалютаДокумент=СокрЛП(ВалютаДокумента);
    ЭлементыФормы.СуммаОписи.Заголовок = "Сумма описи " + ?(ОписьДенежнойНаличности.Итог("Сумма") = 0, "0,00", Строка(Формат(ОписьДенежнойНаличности.Итог("Сумма"), "ЧДЦ=2"))) + " " + ВалютаДокумента.Наименование;
	// Установим заголовки по значению поля "Контрагент" 
	// (это или контрагент или подотчетник или КассаККМ).
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда

		// Надпись реквизита "Сделка".
		НадписьСделка = "Сделка";
		Если Не ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
			Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
				НадписьСделка = "Расчетный документ:";
			Иначе
				Если ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю Тогда
					НадписьСделка = "Заказ покупателя:";
				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
					НадписьСделка = "Заказ поставщику:";
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;

		ЭлементыФормы.НадписьСделка.Заголовок = НадписьСделка;

		// Надпись НадписьСуммаВзаиморасчетов
		ВалютаВзаиморасчетовПоДоговору = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		Если ЗначениеНеЗаполнено(ВалютаВзаиморасчетовПоДоговору) Тогда
			НадписьСуммаВзаиморасчетов = "Сумма <нет валюты>:";
		Иначе
			НадписьСуммаВзаиморасчетов = "Сумма " + СокрЛП(ВалютаВзаиморасчетовПоДоговору) + ":";
		КонецЕсли;

	ИначеЕсли ТипЗнч(Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда

		// Надпись НадписьСуммаВзаиморасчетов
		Если ЗначениеНеЗаполнено(ВалютаВзаиморасчетовПодотчетника) Тогда
			НадписьСуммаВзаиморасчетов = "Сумма <нет валюты>:";
		Иначе
			НадписьСуммаВзаиморасчетов = "Сумма " + СокрЛП(ВалютаВзаиморасчетовПодотчетника) + ":";
		КонецЕсли;

	КонецЕсли;
	
	ЭлементыФормы.НадписьИтогоСписок.Заголовок="Итого платежей по списку: "+
									Формат(РасшифровкаПлатежа.Итог("СуммаПлатежа"),"ЧЦ=15; ЧДЦ=2; ЧН=Ноль")+
									" "+СокрЛП(ВалютаДокумента.Наименование);
//	ЭлементыФормы.СтатьяЗатрат.Доступность=ОтражатьВЗатратах;

	СформироватьИтогПоЗатратам();
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
		
		Если Вопрос("Не совпадают сумма документа и ее расшифровка. Пересчитать сумму документа?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			
			СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	НапечататьДокументПоУмолчанию(ЭтотОбъект, глТекущийПользователь, мПечатнаяФормаПоУмолчанию);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура вызывается при нажатии кнопки "Чек" командной панели формы,
// вызывает печать на фискальном регистраторе.
//
Процедура ОсновныеДействияФормыЧек(Кнопка)
	Перем РезультатВыбора, Ответ;

		//Проверим кассу, можно ли по ней пробивать
	КассаРазрешена = КассаРазрешена(Касса);
	Если не КассаРазрешена тогда
		Предупреждение("Для выбраной кассы не предусмотрено пробитие чеков!",60);
		Возврат;
	КонецЕсли;

	
	Если НомерЧекаККМ <> 0 Тогда
		Предупреждение("Чек уже пробит на фискальном регистраторе!",60);
		Возврат;
	ИначеЕсли глТорговоеОборудование = Неопределено Тогда
		Предупреждение("Торговое оборудование не подключено!",60);
		Возврат;
	ИначеЕсли глТорговоеОборудование.млФР.Количество() = 0 и глТорговоеОборудование.млККТ.Количество() = 0 Тогда
		Предупреждение("Фискальный регистратор не подключен",60);
		Возврат;
	КонецЕсли;

	СписокФР = Новый СписокЗначений;
	Для Каждого ФР из глТорговоеОборудование.млФР Цикл
		Если ФР.ДляПриемаНаличныхОтЮрЛиц Тогда
			СписокФР.Добавить(ФР, ФР.КассаККМ);
		КонецЕсли;
	КонецЦикла;

	Для Каждого ФР из глТорговоеОборудование.млККТ Цикл
		Если ФР.КассаККМ.Владелец=Организация и Фр.КассаККМ = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяКассаККМ") Тогда
			СписокФР.Добавить(ФР, ФР.КассаККМ);
		КонецЕсли;
	КонецЦикла;

	
	Если СписокФР.Количество() = 0 Тогда
		Предупреждение("Фискальный регистратор, предназначенный для
		               |отражения наличных денежных расчетов, не подключен",60);
		Возврат;
	КонецЕсли;

	Если ПометкаУдаления Тогда
		Предупреждение("Документ помечен на удаление, поэтому
		               |нельзя пробить чек на фискальном регистраторе!",60);
		Возврат;
	ИначеЕсли НЕ Проведен Тогда

		Если Вопрос("Провести документ и пробить чек на фискальном регистраторе?",
		            РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;

		Попытка
			Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Возврат;
		КонецПопытки;

		Если Не Проведен Тогда
			Возврат;
		КонецЕсли;

	ИначеЕсли Модифицированность() Тогда
		Если Вопрос("Сохранить документ и пробить чек на фискальном регистраторе?",
		            РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;

		Попытка
			Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Возврат;
		КонецПопытки;

	КонецЕсли;

	СписокТовар = Новый ТаблицаЗначений;
	СписокТовар.Колонки.Добавить("Товар");
	СписокТовар.Колонки.Добавить("Цена");
	СписокТовар.Колонки.Добавить("Колво");
	СписокТовар.Колонки.Добавить("Скидка");
	СписокТовар.Колонки.Добавить("НДС");

	СуммаДокументаВВалютеРегУчета = ПересчитатьИзВалютыВВалюту(СуммаДокумента,
	                                           ВалютаДокумента, мВалютаРегламентированногоУчета,
	                                           КурсДокумента, 1,
	                                           КратностьДокумента, 1);

	Стр = СписокТовар.Добавить();
	Стр.Товар  = ?(ПустаяСтрока(Выдать),"","Выдать ")+СокрЛП(СокрЛП(Выдать)+" "+СокрЛП(Основание));
	Стр.Цена   = СуммаДокументаВВалютеРегУчета;
	Стр.Колво  = 1;
	Если СтрокаПлатеж.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		Стр.НДС    = 0;
	ИначеЕсли СтрокаПлатеж.СтавкаНДС = Перечисления.СтавкиНДС.НДС10 
	      ИЛИ СтрокаПлатеж.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		Стр.НДС    = 10;
	ИначеЕсли СтрокаПлатеж.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 
	      ИЛИ СтрокаПлатеж.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		Стр.НДС    = 18;
	ИначеЕсли СтрокаПлатеж.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 
	      ИЛИ СтрокаПлатеж.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
		Стр.НДС    = 20;
	КонецЕсли;

	// параметры фискального регистратора
	Параметры = Новый Структура();
	Параметры.Вставить("СписокТоваров", СписокТовар                       );
	Параметры.Вставить("Получено"     , СуммаДокументаВВалютеРегУчета);
	Параметры.Вставить("Скидка"       , 0                            );
	Параметры.Вставить("ЧекНаВозврат" , ЛОЖЬ                         );
	Параметры.Вставить("НомерСекции"  , 1                            );

	Если СписокФР.Количество() = 1 Тогда
		РезультатВыбора = СписокФР[0];
	Иначе
		РезультатВыбора = СписокФР.ВыбратьЭлемент("Выберите фискальный регистратор");
		Если РезультатВыбора = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	//глТорговоеОборудование.ПечататьЧекДляПКО(РезультатВыбора, Параметры, Ответ);

	//Если ПустаяСтрока(Ответ) Тогда
	//	Параметры.Свойство("НомерЧека", НомерЧекаККМ);
	//	НомерЧекаККМ = ?(НомерЧекаККМ = 0, -1, НомерЧекаККМ);
	//	Записать(РежимЗаписиДокумента.Запись);
	//КонецЕсли;
    //20.07.17 печать на ККТ
	ВидКассы = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент.ПолучитьВидКассы(РезультатВыбора.Значение.КассаККМ, ИмяКомпьютера());
	Если ВидКассы = Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор тогда
		глТорговоеОборудование.ПечататьЧекДляПКО(РезультатВыбора, Параметры, Ответ);
	ИначеЕсли ВидКассы = Перечисления.ВидыТорговогоОборудования.ККТсПередачейДанных тогда
		ОписаниеПКС = КассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(РезультатВыбора.Значение.КассаККМ);
		Если ОписаниеПКС = Неопределено ИЛИ ОписаниеПКС.Статус = Перечисления.СтатусыКассовойСмены.Закрыта Тогда
			Сообщить("Кассовая смена не открыта");
			Возврат;
		КонецЕсли;
		
		ПараметрыЧека = Неопределено;
		ПодготовитьДанныеДляФискализацииЧекаРКО(Ссылка, ПараметрыЧека,РезультатВыбора.Значение.КассаККМ,Параметры);
		
		ОбъектДрайвера = Неопределено;
		ОбработкаОбслуживания = Неопределено;
		
		ИскомаяСтрока = глТорговоеОборудование.млККТ.Найти(РезультатВыбора.Значение.КассаККМ, "КассаККМ");
		ОбъектДрайвера = ИскомаяСтрока.Объект;
		
		ФормаОбработки = глТорговоеОборудование.ПолучитьФормуОбработки(ИскомаяСтрока.Модель.ОбработкаОбслуживания);
		
		ОшибкаТО = ФормаОбработки.ФискализироватьЧек(ОбъектДрайвера, ПараметрыЧека);
		Если ЗначениеЗаполнено(ОшибкаТО) Тогда
			Сообщить(ОбъектДрайвера.ОписаниеОшибки);
			Если ЗначениеЗаполнено(ОбъектДрайвера.ВыходныеПараметры[1]) И ОбъектДрайвера.ВыходныеПараметры[1] >0  Тогда
				ЭтотОбъект.НомерЧекаККМ = ОбъектДрайвера.ВыходныеПараметры[1];
            КонецЕсли;
			Возврат;
		Иначе
			ЭтотОбъект.НомерЧекаККМ = ОбъектДрайвера.ВыходныеПараметры[1];
		КонецЕсли;
	КонецЕсли;
		 
	
	Если ПустаяСтрока(Ответ) Тогда
		Если ВидКассы = Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор тогда
			Параметры.Свойство("НомерЧека", НомерЧекаККМ);

			НомерЧекаККМ = ?(НомерЧекаККМ = 0, -1, НомерЧекаККМ);
		КонецЕсли;
		//мСтрокаФР = глТорговоеОборудование.млФР.Найти(РезультатВыбора, "Модель");
		КассаККМ = РезультатВыбора.Значение.КассаККМ;
		Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;

	Закрыть();
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийРКО[Кнопка.Имя] Тогда
		Возврат;
	КонецЕсли; 
	
	РасшифровкаПлатежа.Очистить();

	СтрокаПлатеж              = РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;

	ВидОперации = Перечисления.ВидыОперацийРКО[Кнопка.Имя];
	
	УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);

	// Отобразить в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда

		Если ЗначениеНеЗаполнено(ВалютаВзаиморасчетовПодотчетника) Тогда
			ВалютаВзаиморасчетовПодотчетника = ВалютаДокумента;
			ПриИзмененииВалютыПодотчетника();
		ИначеЕсли НЕ ВалютаДокумента = ВалютаВзаиморасчетовПодотчетника Тогда
			ОтражатьВБухгалтерскомУчете = Ложь;
			ОтражатьВналоговомУчете=Ложь;
		КонецЕсли;

		СтавкаНДС = "";
		СуммаНДС  = 0;
		ЭлементыФормы.СтавкаНДС.Доступность = Ложь;

	Иначе
		ЭлементыФормы.СтавкаНДС.Доступность = Истина;
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ Тогда
		ОтражатьВБухгалтерскомУчете = Ложь;
		ОтражатьВНалоговомУчете = Ложь;
		
		Если (НЕ Касса.ВалютаДенежныхСредств=мВалютаРегламентированногоУчета)
			ИЛИ (НЕ ВалютаДокумента=мВалютаРегламентированногоУчета) Тогда
			
			Касса=Справочники.Кассы.ПустаяСсылка();
			СуммаДокумента=0;
			СуммаДокументаПриИзменении();
			
			ВалютаДокумента=мВалютаРегламентированногоУчета;
			
		КонецЕсли;
		
	КонецЕсли;

	УстановитьТипКонтрагент(); //Надо определить тип поля "Контрагент"

	УстановитьФокус();
	ЕстьРасчетыСКонтрагентами=ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=ЕстьРасчетыПоКредитам(ВидОперации);

	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
//
Процедура ДействияФормыДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		
		Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
			
			Если Вопрос("Не совпадают сумма документа и ее расшифровка. Пересчитать сумму документа?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
				
				СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
				
			Иначе
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = Кнопка.Текст;
		СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		СписокМакетов = ПолучитьСписокПечатныхФорм();
		СтрокаМакетаВСписке = СписокМакетов.НайтиПоЗначению(Кнопка.Имя);
		Если СтрокаМакетаВСписке <> Неопределено Тогда
			Печать(СтрокаМакетаВСписке.Значение);
			СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
			СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;			
			
		Иначе
			СсылкаВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Кнопка.Имя, "_", "-")));
			Печать(СсылкаВнешнейФормы);
			СтруктураМакета.Макет = СсылкаВнешнейФормы;
			СтруктураМакета.ПредставлениеМакета = Кнопка.Текст;
		КонецЕсли;		
		
		мПечатнаяФормаПоУмолчанию = СтруктураМакета.Макет;
		СохранитьТекущуюКнопкуПечати(ЭтотОбъект.Метаданные().Имя, СтруктураМакета);
		
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	УстановитьКурсДокумента();
	РассчитатьСуммуВзаиморасчетов();
	
КонецПроцедуры // ДатаПриИзменении()

// Рассчитывает новый курс документа при смене даты
//
Процедура УстановитьКурсДокумента()
	
	СтруктураКурсаВалютаДокумента = ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
	КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;
	
КонецПроцедуры // УстановитьКурсДокумента()

Процедура ПриИзмененииСчетаОрганизации()
	
	Если СчетОрганизации.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Организация.Пустая() Тогда
		Организация=СчетОрганизации.Владелец;
	КонецЕсли;
	
	ПриИзмененииЗначенияКассыБанковскогоСчета(ВалютаДокумента, КурсДокумента, КратностьДокумента, Дата, СуммаДокумента, СчетОрганизации.ВалютаДенежныхСредств);
	СуммаДокументаПриИзменении();
		
	Если НЕ Касса.Пустая() И НЕ СчетОрганизации.ВалютаДенежныхСредств=Касса.ВалютаДенежныхСредств Тогда
		Сообщить("Валюта кассы не соответствует валюте счета организации.");
		Касса=Новый(Тип("Справочник.Кассы"));
	КонецЕсли;	
			
КонецПроцедуры // ПриИзмененииСчетаОрганизации()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете;
	УстановитьВидимость();

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьНомерДокумента(ЭтотОбъект);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// проставим основной договор контрагента
	ПриИзмененииКонтрагента();	
	ПриИзмененииДоговора();
	УстановитьФокус();

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Обработчик события "НачалоВыбора" реквизита "ДоговорКонтрагента"
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, Элемент.Значение,
				ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "Нажатие" надписи о счете-фактуре.
//   Процедура выполняет либо ввод нового счета-фактуры, либо открывает
// форму уже существующего счета-фактуры, если тот был введен на основании
// текущего документа.
//
Процедура ГиперссылкаСчетФактураНажатие(Элемент)

	ВвестиСчетФактуру(ЭтотОбъект, ЭтаФорма, "СчетФактураВыданный");

КонецПроцедуры // ГиперссылкаСчетФактураНажатие()

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаДокумента".
//
Процедура СуммаДокументаПриИзменении()

	Если ИнвертироватьСуммы Тогда
		
		РассчитатьСуммуПлатежа();
		
		Если СтрокаПлатеж.КурсВзаиморасчетовПлан>0 Тогда
			РассчитатьСуммуПлатежаПлан();
		КонецЕсли;
		
	Иначе
		
		Если РасшифровкаПлатежа.Количество()=1 Тогда
			
			СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
			
			Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
				
				ПересчитатьСуммуНДС(СтрокаПлатеж);
				
				Если СтрокаПлатеж.СуммаВзаиморасчетов=0 Тогда
					РассчитатьСуммуВзаиморасчетов();
				Иначе			
					РассчитатьКурсВзаиморасчетов();
				КонецЕсли;
				
			ИначеЕсли ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
				
				Если СтрокаПлатеж.СуммаВзаиморасчетов=0 Тогда
					РассчитатьСуммуВзаиморасчетов();
				Иначе			
					РассчитатьКурсВзаиморасчетов();
				КонецЕсли;
				
			Иначе
				
				Если Не ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
					
					СтрокаПлатеж.СуммаПлатежаПлан=СуммаДокумента;
							
				КонецЕсли;
				
				СтрокаПлатеж.СуммаВзаиморасчетов=СуммаДокумента;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;


КонецПроцедуры // СуммаДокументаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода
// "ВалютаДокумента". Процедура выдает предупреждение,
// объясняющее почему валюту документа нельзя выбирать произвольно.
//
Процедура ВалютаДокументаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Предупреждение("Валюта документа устанавливается при выборе кассы."
	               + Символы.ПС + "Вручную изменять валюту запрещено.");

КонецПроцедуры // ВалютаДокументаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "КурсДокумента".
//
Процедура КурсДокументаПриИзменении(Элемент)

	РассчитатьСуммуВзаиморасчетов();

КонецПроцедуры // КурсДокументаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "КурсВзаиморасчетов".
//
Процедура КурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;

	РассчитатьСуммуПлатежа();

КонецПроцедуры // КурсВзаиморасчетовНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Сделка".
//
Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	ПараметрыВыбора=ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, 
	                     ПараметрыВыбора.ВидДвиженияРасчеты, ПараметрыВыбора.ТипЗаказа);
					
КонецПроцедуры // СделкаНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "КурсВзаиморасчетовПодотчетник".
//
Процедура КурсВзаиморасчетовПодотчетникНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если ЗначениеНеЗаполнено(ВалютаВзаиморасчетовПодотчетника) Тогда
		Предупреждение("Не выбрана валюта взаиморасчетов подотчетника."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = ВалютаВзаиморасчетовПодотчетника;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;
					   
	РассчитатьСуммуПлатежа();

КонецПроцедуры // КурсВзаиморасчетовПодотчетникНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "КурсВзаиморасчетов".
// Процедура выполняет пересчет реквизитов при изменении курса взаиморасчетов
// с подотчетником
//
Процедура КурсВзаиморасчетовПриИзменении(Элемент)

	РассчитатьСуммуПлатежа();

КонецПроцедуры // КурсВзаиморасчетовПодотчетникПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "ВалютаВзаиморасчетовПодотчетника".
//
Процедура ВалютаВзаиморасчетовПодотчетникаПриИзменении(Элемент)

	ПриИзмененииВалютыПодотчетника();
	
КонецПроцедуры // ВалютаВзаиморасчетовПодотчетникаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода"Касса". 
// Процедура устанавливает валюту документа, и предлагает пересчитать сумму документа.
//
Процедура КассаПриИзменении(Элемент)
	
	ПриИзмененииЗначенияКассыБанковскогоСчета(ВалютаДокумента, КурсДокумента, КратностьДокумента, Дата, СуммаДокумента, Касса.ВалютаДенежныхСредств);
	
	// Пересчитаем суммы платежей при изменении валюты
	
	Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) Тогда
		
		Для Каждого Строка Из РасшифровкаПлатежа Цикл
			
			ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			
			Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
				Строка.СуммаПлатежа=Строка.СуммаВзаиморасчетов;
				
			ИначеЕсли (КурсДокумента <> 0) И (Строка.КратностьВзаиморасчетов <> 0) И (Строка.КурсВзаиморасчетов <> 0) Тогда
				Строка.СуммаПлатежа=ПересчитатьИзВалютыВВалюту(Строка.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
				ВалютаДокумента,
				Строка.КурсВзаиморасчетов,КурсДокумента,
				Строка.КратностьВзаиморасчетов,КратностьДокумента);	
			Иначе
				Строка.СуммаПлатежа = 0;
			КонецЕсли;
					
			ПересчитатьСуммуНДС(Строка);
			
			Если Не ЗначениеНеЗаполнено(Строка.ДокументПланированияПлатежа) Тогда
				
				ВалютаПлатежаПлан=Строка.ДокументПланированияПлатежа.ВалютаДокумента;
				Если НЕ (ВалютаПлатежаПлан=Справочники.Валюты.ПустаяСсылка() ИЛИ ВалютаПлатежаПлан=ВалютаДокумента) Тогда
					Строка.ДокументПланированияПлатежа="";
					Строка.КурсВзаиморасчетовПлан=0;
					Строка.СуммаПлатежаПлан=0;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;	
		
		СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		ВалютаВзаиморасчетов= ВалютаВзаиморасчетовПодотчетника;
		
		Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
			СтрокаПлатеж.СуммаПлатежа=СтрокаПлатеж.СуммаВзаиморасчетов;
			
		ИначеЕсли (КурсДокумента <> 0) И (СтрокаПлатеж.КратностьВзаиморасчетов <> 0) И (СтрокаПлатеж.КурсВзаиморасчетов <> 0) Тогда
			СтрокаПлатеж.СуммаПлатежа=ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
			ВалютаДокумента,
			СтрокаПлатеж.КурсВзаиморасчетов,КурсДокумента,
			СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);	
		Иначе
			СтрокаПлатеж.СуммаПлатежа = 0;
		КонецЕсли;
		
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
		
		Если Не ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
			
			ВалютаПлатежаПлан=СтрокаПлатеж.ДокументПланированияПлатежа.ВалютаДокумента;	
			Если НЕ (ВалютаПлатежаПлан=Справочники.Валюты.ПустаяСсылка() ИЛИ ВалютаПлатежаПлан=ВалютаДокумента) Тогда
				СтрокаПлатеж.ДокументПланированияПлатежа="";
				СтрокаПлатеж.КурсВзаиморасчетовПлан=0;
				СтрокаПлатеж.СуммаПлатежаПлан=0;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если Не ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
			
			ВалютаПлатежаПлан=СтрокаПлатеж.ДокументПланированияПлатежа.ВалютаДокумента;	
			Если НЕ (ВалютаПлатежаПлан=Справочники.Валюты.ПустаяСсылка() ИЛИ ВалютаПлатежаПлан=ВалютаДокумента) Тогда
				СтрокаПлатеж.ДокументПланированияПлатежа="";
				СтрокаПлатеж.КурсВзаиморасчетовПлан=0;
				СтрокаПлатеж.СуммаПлатежаПлан=0;
			КонецЕсли;
			
		КонецЕсли;
		
		СуммаДокументаПриИзменении();
		
	КонецЕсли;
	
	УстановитьФокус();
	УстановитьВидимость();
		
	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику 
		И НЕ ВалютаДокумента=ВалютаВзаиморасчетовПодотчетника Тогда
		ОтражатьВБухгалтерскомУчете=Ложь;
		ОтражатьВНалоговомУчете=Ложь;
	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк И (Не СчетОрганизации.Пустая()) И (НЕ СчетОрганизации.ВалютаДенежныхСредств=Касса.ВалютаДенежныхСредств) Тогда
		
		Сообщить("Валюта счета организации не соответствует валюте кассы.");
		СчетОрганизации=Справочники.БанковскиеСчета.ПустаяСсылка();
		
	КонецЕсли;
	

КонецПроцедуры // КассаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "АвансовыйОтчет".
//
Процедура РасчетныйДокументНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		ФормаВыбора = Документы.АвансовыйОтчет.ПолучитьФормуВыбора(,Элемент,);
				
	КонецЕсли;
	
	Если НЕ ЗначениеНеЗаполнено(Организация) Тогда
		ФормаВыбора.ДокументСписок.Отбор.Организация.Значение = Организация;
		ФормаВыбора.ДокументСписок.Отбор.Организация.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность=Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеНеЗаполнено(ВалютаВзаиморасчетовПодотчетника) Тогда
		ФормаВыбора.ДокументСписок.Отбор.ВалютаДокумента.Значение = ВалютаВзаиморасчетовПодотчетника;
		ФормаВыбора.ДокументСписок.Отбор.ВалютаДокумента.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ВалютаДокумента.Доступность=Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеНеЗаполнено(Контрагент) Тогда
		
		ФормаВыбора.ДокументСписок.Отбор.ФизЛицо.Значение = Контрагент;
		ФормаВыбора.ДокументСписок.Отбор.ФизЛицо.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ФизЛицо.Доступность=Ложь;	
		
	КонецЕсли;
	
	Если Не ЗначениеНеЗаполнено(Элемент.Значение) Тогда
		
		ФормаВыбора.ПараметрТекущаяСтрока=Элемент.Значение;
		
	КонецЕсли;
	
	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "АвансовыйОтчет".
//
Процедура РасчетныйДокументПриИзменении(Элемент)

	Если НЕ ЗначениеНеЗаполнено(РасчетныйДокумент) Тогда
		
		Контрагент                       = РасчетныйДокумент.ФизЛицо;
		ВалютаВзаиморасчетовПодотчетника = РасчетныйДокумент.ВалютаДокумента;
		Организация = РасчетныйДокумент.Организация;
		СтруктураКурсаВзаиморасчетов     = ПолучитьКурсВалюты(ВалютаВзаиморасчетовПодотчетника, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов               = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов          = СтруктураКурсаВзаиморасчетов.Кратность; 
		
		Если ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
			
			ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(СтрокаПлатеж);
			
		Иначе
			
			СтрокаПлатеж.СуммаВзаиморасчетов=РасчетныйДокумент.СуммаЗайма;
			СуммаДокумента = ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
			ВалютаВзаиморасчетовПодотчетника, ВалютаДокумента,
			СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
			СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
			
			СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
			
		КонецЕсли;
		
		Если НЕ ВалютаДокумента=ВалютаВзаиморасчетовПодотчетника Тогда
			ОтражатьВБухгалтерскомУчете=Ложь;
			ОтражатьВНалоговомУчете=Ложь;
		КонецЕсли;	
		
	КонецЕсли;
	
	УстановитьВидимость();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ФизЛицо".
//
Процедура ФизЛицоПриИзменении(Элемент)

	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		РасчетныйДокумент=Документы.АвансовыйОтчет.ПустаяСсылка();
	Иначе
		РасчетныйДокумент=Документы.ДоговорЗаймаСРаботником.ПустаяСсылка();
	КонецЕсли;

	Если НЕ ЗначениеНеЗаполнено(Контрагент) Тогда
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		             |	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
		             |	ФИОФизЛицСрезПоследних.Имя КАК Имя,
		             |	ФИОФизЛицСрезПоследних.Отчество КАК Отчество
		             |ИЗ
		             |	РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо=&ФизЛицо) КАК ФИОФизЛицСрезПоследних";
		Запрос.УстановитьПараметр("Дата",Дата);
		Запрос.УстановитьПараметр("ФизЛицо",Контрагент);
		
		Результат=Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			Выдать = ?(НЕ ПустаяСтрока(Результат.Фамилия), 
			Результат.Фамилия + ?(НЕ ПустаяСтрока(Результат.Имя)," " + Результат.Имя + " " + ?(НЕ ПустаяСтрока(Результат.Отчество),Результат.Отчество, ""), ""),"");
		КонецЕсли;

		ДокФизЛица = ПаспортныеДанные(Контрагент, Дата);

		Если НЕ ЗначениеНеЗаполнено(ДокФизЛица) Тогда
			ПоДокументу = Строка(ДокФизЛица.Вид) + " серия " +
						  ДокФизЛица.Серия       + ", номер " +
						  ДокФизЛица.Номер       + ", выданый " +
						  Формат(ДокФизЛица.ДатаВыдачи, "ДФ=dd.MM.yyyy")  + " " +
						  ДокФизЛица.Выдан;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура СуммаДокументаПодотчетникПриИзменении(Элемент)

	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
	
	Если СтрокаПлатеж.СуммаВзаиморасчетов=0 Тогда
		РассчитатьСуммуВзаиморасчетов();
	Иначе			
		РассчитатьКурсВзаиморасчетов();
	КонецЕсли;

КонецПроцедуры

Процедура СуммаДокументаРасчетыПриИзменении(Элемент)

	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
	Если СтрокаПлатеж.СуммаВзаиморасчетов=0 Тогда
		РассчитатьСуммуВзаиморасчетов();
	Иначе			
		РассчитатьКурсВзаиморасчетов();
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
				
	Если ОписьДенежнойНаличности.Итог("Сумма") > 0 Тогда
		
		Если НЕ ОписьДенежнойНаличности.Итог("Сумма")= СуммаДокумента Тогда
			
			Если Вопрос("Не совпадают сумма документа и описи денежных средств. Пересчитать сумму документа?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
				
				СуммаДокумента=ОписьДенежнойНаличности.Итог("Сумма");
				СуммаДокументаПриИзменении();
				
			Иначе
				
				Отказ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;				
	
	Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
		
		Если мЗадаватьВопросы = Неопределено Тогда 
			мЗадаватьВопросы = Истина;
		КонецЕсли;
		
		Если мЗадаватьВопросы Тогда 
			Если Вопрос("Не совпадают сумма документа и ее расшифровка. Пересчитать сумму документа?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
				
				СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
				
			Иначе
				
				Отказ = Истина;
				
			КонецЕсли;
			
		Иначе 
			СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Ответственный.Пустая() Тогда
		Ответственный = глТекущийПользователь;
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		ДоговорКонтрагента=СтрокаПлатеж.ДоговорКонтрагента;

		Если СтрокаПлатеж.СтатьяДвиженияДенежныхСредств.Пустая() Тогда
			СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		
	Иначе
		ДоговорКонтрагента=Новый(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	КонецЕсли;

	яштСменаПользователя(ЭтотОбъект, ЭтаФорма, глТекущийПользователь);
	
	//не относятся на затраты все, кроме РКО с видом операции Прочий расход дс
	Если ВидОперации <> Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
		Если (Затраты.Количество()>0) Тогда
			Сообщить("Операция """ + ВидОперации + """ не относится на затраты!", СтатусСообщения.Важное);
			Отказ = Истина;
		ИначеЕсли СтатьяЗатрат <> Справочники.СтатьиЗатрат.ПустаяСсылка() Тогда
			Сообщить("Операция """ + ВидОперации + """ не относится на затраты!", СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	//////////////////////////Плотников Если вид операции Выдача подотчет, тогда обязательно заполнить Срок аванса
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику и ЗначениеНеЗаполнено(ДатаПогашенияАванса) Тогда
		Сообщить("Для вида операции Выдача подотчетнику обязательно заполнение реквизита СРОК АВАНСА!!!");
		Отказ = Истина;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику И НЕ ЗначениеЗаполнено(РасчетныйДокумент) Тогда
		Результат = яштПодотчетники.ПолучитьДолгиПередПодотчетником(Ссылка);
		Если Результат.Количество()>0 Тогда
			ответ = вопрос("У организации есть задолженность перед сотрудником." + Символы.ПС +"Рекомендуется связать выплату с документами задолженности." + Символы.ПС + "Заполнить связь?",РежимДиалогаВопрос.ДаНет,0);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Результат = яштПодотчетники.ПолучитьДолгиПередПодотчетником(Ссылка);
				Выбор = Результат.ВыбратьСтроку("Документы расчетов",);
				Если Выбор <> Неопределено Тогда
					РасчетныйДокумент = Выбор.Документ;
				КонецЕсли;
				Отказ = Истина;
				//Возврат;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
	 
КонецПроцедуры

Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)

	Если Не Элемент.Значение Тогда
		ОтраженоВОперУчете = Ложь;
		Оплачено        = Ложь;
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры

Процедура СчетОрганизацииПриИзменении(Элемент)

	ПриИзмененииСчетаОрганизации();

КонецПроцедуры

Процедура РасшифровкаПлатежаПриАктивизацииСтроки(Элемент)
	
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
КонецПроцедуры

Процедура СписокПриИзменении(Элемент)
	
	Если Не Список И РасшифровкаПлатежа.Количество()>1 Тогда
		
		ТекстВопроса = "Все строки расшифровки платежа, кроме первой, будут удалены.
		|Продолжить?";
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Список=Истина;
			Возврат;
		КонецЕсли;
		
		Пока РасшифровкаПлатежа.Количество()>1 Цикл
			СтрокаУдаления=РасшифровкаПлатежа[1];
			РасшифровкаПлатежа.Удалить(СтрокаУдаления);
		КонецЦикла;
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
		СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
		РассчитатьСуммуВзаиморасчетов();
		
	Иначе
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
		СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
	КонецЕсли;		
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговора();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
				ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);

КонецПроцедуры

Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПараметрыВыбора=ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, 
	                     ПараметрыВыбора.ВидДвиженияРасчеты, ПараметрыВыбора.ТипЗаказа);
					
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);	
	РассчитатьКурсВзаиморасчетов();
	
КонецПроцедуры

Процедура СуммаПлатежаПриИзменении(Элемент)
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);	
	РассчитатьСуммуВзаиморасчетов();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;

	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура СтавкаНДСПриИзменении(Элемент)
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
	Если СтрокаПлатеж.КурсВзаиморасчетовПлан>0 Тогда
		РассчитатьСуммуПлатежаПлан();
	КонецЕсли;
	
КонецПроцедуры

Процедура КурсВзаиморасчетовПодотчетникПриИзменении(Элемент)
	
	 РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		Отказ=Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗначениеПриВыборе(ИсходноеЗначение,ЗначениеВыбора)
	
	Если ЗначениеНеЗаполнено(ИсходноеЗначение) Тогда
		ИсходноеЗначение=ЗначениеВыбора;
	КонецЕсли;
		
КонецПроцедуры // УстановитьЗначениеПриВыборе() 

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если НЕ ТипЗнч(ЗначениеВыбора)=Тип("Структура") Тогда
		
		Если ЗначениеВыбора="АвтоПодбор" Тогда
			
			Если РасшифровкаПлатежа.Количество()>1 Тогда
				Список=истина;
			ИначеЕсли РасшифровкаПлатежа.Количество()=0 Тогда
				Список=Ложь;
				НоваяСтрока=РасшифровкаПлатежа.Добавить();			
			КонецЕсли;
			
			СтрокаПлатеж=РасшифровкаПлатежа[0];
						
			УстановитьФокус();
			
			УстановитьВидимость();

			СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
			
			Возврат;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
			
	ИначеЕсли Источник.КлючУникальности="ФормаПодбораПланируемыхПлатежей" Тогда
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда	
				
				НДСПоУмолчанию=ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяСтавкаНДС");
				
				СтрокаПлатеж.ДоговорКонтрагента=ЗначениеВыбора.ДоговорКонтрагента;
				ПриИзмененииДоговора();
				
			КонецЕсли;
			
			СтрокаПлатеж.КурсВзаиморасчетовПлан=ЗначениеВыбора.КурсВзаиморасчетов;
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.Сделка,ЗначениеВыбора.Сделка);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.КурсВзаиморасчетов,ЗначениеВыбора.КурсВзаиморасчетов);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.КратностьВзаиморасчетов,ЗначениеВыбора.КратностьВзаиморасчетов);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СуммаВзаиморасчетов,ЗначениеВыбора.СуммаВзаиморасчетов);
			
			Если СтрокаПлатеж.СуммаПлатежа=ЗначениеВыбора.СуммаПлатежа 
				ИЛИ СтрокаПлатеж.СуммаПлатежа=0 Тогда
				
				СтрокаПлатеж.СуммаПлатежа=ЗначениеВыбора.СуммаПлатежа;
				СтрокаПлатеж.СуммаПлатежаПлан=ЗначениеВыбора.СуммаПлатежаПлан;
				
			ИначеЕсли СтрокаПлатеж.КурсВзаиморасчетовПлан>0 Тогда
				
				РассчитатьСуммуПлатежаПлан();
				
			КонецЕсли;
										
			ЗаполнитьРеквизитыРеглУчета(СтрокаПлатеж,Организация, Контрагент, НДСПоУмолчанию);
		
			СтрокаПлатеж.ДокументПланированияПлатежа=ЗначениеВыбора.ДокументПланирования;
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СтатьяДвиженияДенежныхСредств,ЗначениеВыбора.СтатьяДвиженияДенежныхСредств);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.Проект,ЗначениеВыбора.Проект);
			
		Иначе
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СуммаПлатежа,ЗначениеВыбора.СуммаПлатежа);
			
			СтрокаПлатеж.ДокументПланированияПлатежа=ЗначениеВыбора.ДокументПланирования;	
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СтатьяДвиженияДенежныхСредств,ЗначениеВыбора.СтатьяДвиженияДенежныхСредств);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.Проект,ЗначениеВыбора.Проект);
			
			СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаПлатежа;
			СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
					
		КонецЕсли;
						
	Иначе
		
		НДСПоУмолчанию=?(ЗначениеНеЗаполнено(СтрокаПлатеж.СтавкаНДС),ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяСтавкаНДС"),
						СтрокаПлатеж.СтавкаНДС);
		
		ОбработкаПодбораЗадолженностей(СтрокаПлатеж,РасшифровкаПлатежа,ЗначениеВыбора,
		Список,ВалютаДокумента,КурсДокумента,КратностьДокумента,
		Организация, Контрагент, НДСПоУмолчанию,ОтражатьВБухгалтерскомУчете);
		
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
	КонецЕсли;
	
	УстановитьФокус();
	
	УстановитьВидимость();
				
КонецПроцедуры

Процедура КнопкаПодборНажатие(Элемент)
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"					,ЭтаФорма);
	СтруктураПараметров.Вставить("Организация"						,Организация);
	СтруктураПараметров.Вставить("Контрагент"						,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"					,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"					,СуммаДокумента);
	СтруктураПараметров.Вставить("РасшифровкаПлатежаДок"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ДатаДок"							,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"					,ВидОперации);
	СтруктураПараметров.Вставить("КурсДокумента"					,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"				,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"					,"<0");
    СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"				,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"		,Истина);
	СтруктураПараметров.Вставить("ФормаОплаты"						,Перечисления.ВидыДенежныхСредств.Наличные);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"					,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("ВидОперацииПлан"					,ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"				,Касса);
	СтруктураПараметров.Вставить("Проект"							,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств"	,СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,ОтражатьВБухгалтерскомУчете);
	
	ПодборЗадолженностей(СтруктураПараметров);
	
КонецПроцедуры

Процедура КоманднаяПанельПлатежиПодбор(Кнопка)
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"					,ЭтаФорма);
	СтруктураПараметров.Вставить("Организация"						,Организация);
	СтруктураПараметров.Вставить("Контрагент"						,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"					,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"					,СуммаДокумента);
	СтруктураПараметров.Вставить("РасшифровкаПлатежаДок"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ДатаДок"							,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"					,ВидОперации);
	СтруктураПараметров.Вставить("КурсДокумента"					,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"				,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"					,"<0");
    СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"				,Ложь);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"		,Истина);
	СтруктураПараметров.Вставить("ФормаОплаты"						,Перечисления.ВидыДенежныхСредств.Наличные);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"					,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("ВидОперацииПлан"					,ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"				,Касса);
	СтруктураПараметров.Вставить("Проект"							,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств"	,СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,ОтражатьВБухгалтерскомУчете);
	
	ПодборЗадолженностей(СтруктураПараметров);
	
КонецПроцедуры

Процедура КоманднаяПанельПлатежиЗаполнить(Кнопка)
	
	СтруктураПараметров=Новый Структура;
	
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СуммаДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"				,ВидОперации);
	СтруктураПараметров.Вставить("РасшифровкаПлатежа"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"				,"<0");
	СтруктураПараметров.Вставить("Интерактивно"					,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Истина);
	СтруктураПараметров.Вставить("СтруктураПараметровАвто"		,Новый Структура);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Наличные);
	СтруктураПараметров.Вставить("ВидОперацииПлан"				,ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("ИмяРегистраПлан"				,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,Касса);
	СтруктураПараметров.Вставить("ДоговорКонтрагента"			,ДоговорКонтрагента);
	
	ЗаполнитьРасшифровкуПлатежей(СтруктураПараметров);
	
	Если РасшифровкаПлатежа.Количество()=0 Тогда
		НоваяСтрока=РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
КонецПроцедуры

Процедура РасчетныйДокументОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка=Ложь;

	Элемент.Значение=Документы.АвансовыйОтчет.ПустаяСсылка();

КонецПроцедуры

Процедура СчетОрганизацииНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если НЕ Касса.Пустая() Тогда
		
		СтандартнаяОбработка=Ложь;
		ФормаВыбораСчета=Справочники.БанковскиеСчета.ПолучитьФормуВыбора(,Элемент,);
		
		ФормаВыбораСчета.Отбор.ВалютаДенежныхСредств.Значение=Касса.ВалютаДенежныхСредств;
		ФормаВыбораСчета.Отбор.ВалютаДенежныхСредств.Использование=Истина;
		ФормаВыбораСчета.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВалютаДенежныхСредств.Доступность=Ложь;
		
		ФормаВыбораСчета.Отбор.Владелец.Значение=Организация;
		ФормаВыбораСчета.Отбор.Владелец.Использование=Истина;
		ФормаВыбораСчета.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность=Ложь;
		
		ФормаВыбораСчета.РежимВыбора=Истина;
		
		Если Не ЗначениеНеЗаполнено(Элемент.Значение) Тогда
					
			ФормаВыбораСчета.ПараметрТекущаяСтрока=Элемент.Значение;
				
		КонецЕсли;
		
		ФормаВыбораСчета.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КассаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ Тогда
		
		СтандартнаяОбработка=Ложь;
		
		ФормаКассы=Справочники.Кассы.ПолучитьФормуВыбора(,Элемент,);
		ФормаКассы.Отбор.ВалютаДенежныхСредств.Значение=мВалютаРегламентированногоУчета;
		ФормаКассы.Отбор.ВалютаДенежныхСредств.Использование=Истина;
		ФормаКассы.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВалютаДенежныхСредств.Доступность=Ложь;
		
		Если Не ЗначениеНеЗаполнено(Элемент.Значение) Тогда
			
			ФормаКассы.ПараметрТекущаяСтрока=Элемент.Значение;
			
		КонецЕсли;
		
		ФормаКассы.РежимВыбора=Истина;
		
		ФормаКассы.Открыть();
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ДокументПланированияПлатежаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если ЗначениеНеЗаполнено(Контрагент) Тогда
		Сообщить("Не указан контрагент.");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеНеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"				,ЭтаФорма);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Наличные);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ИмяРегистра"					,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Истина);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СтрокаПлатеж.СуммаПлатежа);
    СтруктураПараметров.Вставить("ВидОперации"					,ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,Касса);
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Проект"						,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств",СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
    СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
    СтруктураПараметров.Вставить("ДоговорКонтрагента"			,СтрокаПлатеж.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Сделка"						,СтрокаПлатеж.Сделка);
	
	ПодборДокументовПланирования(СтруктураПараметров);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДокументПланированияПлатежаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если ЗначениеНеЗаполнено(Контрагент) Тогда
		Сообщить("Не указан контрагент.");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеНеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"				,ЭтаФорма);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Наличные);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ИмяРегистра"					,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Истина);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СтрокаПлатеж.СуммаПлатежа);
    СтруктураПараметров.Вставить("ВидОперации"					,ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,Касса);
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Проект"						,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств",СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
    СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
    СтруктураПараметров.Вставить("ДоговорКонтрагента"			,СтрокаПлатеж.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Сделка"						,СтрокаПлатеж.Сделка);
	
	ПодборДокументовПланирования(СтруктураПараметров);
	
КонецПроцедуры

Процедура ДокументПланированияПлатежаПрочиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
		
	Если ЗначениеНеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"				,ЭтаФорма);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Наличные);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ИмяРегистра"					,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Истина);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СтрокаПлатеж.СуммаПлатежа);
    СтруктураПараметров.Вставить("ВидОперации"					,ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,Касса);
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Проект"						,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств",СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
    СтруктураПараметров.Вставить("Контрагент"					,);
    СтруктураПараметров.Вставить("ДоговорКонтрагента"			,Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	СтруктураПараметров.Вставить("Сделка"						,Неопределено);
	
	ПодборДокументовПланирования(СтруктураПараметров);

									
КонецПроцедуры

Процедура ДокументПланированияПлатежаКассаККМНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если ЗначениеНеЗаполнено(Контрагент) Тогда
		Сообщить("Не указан получатель (касса ККМ, НТТ).");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеНеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"				,ЭтаФорма);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Наличные);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ИмяРегистра"					,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Истина);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СтрокаПлатеж.СуммаПлатежа);
    СтруктураПараметров.Вставить("ВидОперации"					,ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,Касса);
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Проект"						,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств",СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
    СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
    СтруктураПараметров.Вставить("ДоговорКонтрагента"			,Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	СтруктураПараметров.Вставить("Сделка"						,Неопределено);
	
	ПодборДокументовПланирования(СтруктураПараметров);

	
КонецПроцедуры

// Процедура обработчик события "НачалоВыбора" поля ввода кассы ККМ
//
Процедура КассаККМНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ Тогда
		Если ВидВыдачиДенежныхСредств = Перечисления.ВидВыдачиДенежныхСредств.НТТ Тогда
			НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ВидСравнения.Равно, СтандартнаяОбработка);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура обработчик события "ПриИзменении" поля ввода вида выдачи денежных средств
//
Процедура ВидВыдачиДенежныхСредствПриИзменении(Элемент)
	
	Если ВидВыдачиДенежныхСредств = Перечисления.ВидВыдачиДенежныхСредств.КассеККМ Тогда
		Если ТипЗнч(Контрагент)<>Тип("СправочникСсылка.КассыККМ") Тогда
			Контрагент = Справочники["КассыККМ"].ПустаяСсылка();
		КонецЕсли;
		ЭлементыФормы.КассаККМ.Подсказка = "В этом поле необходимо кассу ККМ, которой выдаются денежные средства.";
	Иначе
		Если ТипЗнч(Контрагент)<>Тип("СправочникСсылка.Склады") Тогда
			Контрагент = Справочники["Склады"].ПустаяСсылка();
		КонецЕсли;
		ЭлементыФормы.КассаККМ.Подсказка = "В этом поле необходимо указать НТТ, которой выдаются денежные средства.";
	КонецЕсли;
 
КонецПроцедуры

Процедура СуммаПлатежаПланПриИзменении(Элемент)
	
	РассчитатьКурсВзаиморасчетовПлан();
	
КонецПроцедуры

Процедура КурсВзаиморасчетовПланПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

Процедура КурсВзаиморасчетовПланНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетовПлан;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетовПлан = СтруктураКурсаИКратности.КурсВалюты;

	КонецЕсли;
					   
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПланПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаПланПриИзменении(Элемент)
	
	РассчитатьКурсВзаиморасчетовПлан();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПланНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетовПлан;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетовПлан = СтруктураКурсаИКратности.КурсВалюты;

	КонецЕсли;
					   
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

Процедура ДокументПланированияПлатежаОчистка(Элемент, СтандартнаяОбработка)
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

Процедура ДокументПланированияПлатежаПриИзменении(Элемент)
	
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		СтрокаПлатеж.КурсВзаиморасчетовПлан=0;
		СтрокаПлатеж.СуммаПлатежаПлан=0;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ДокументПланированияПлатежаПодотчетПриИзменении(Элемент)
	
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		СтрокаПлатеж.КурсВзаиморасчетовПлан=0;
		СтрокаПлатеж.СуммаПлатежаПлан=0;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДокументПланированияПлатежаПриИзменении(Элемент)
	
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		СтрокаПлатеж.КурсВзаиморасчетовПлан=0;
		СтрокаПлатеж.СуммаПлатежаПлан=0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыПровести(Кнопка)
	// Вставить содержимое обработчика.
	
		Попытка
			Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Возврат;
		КонецПопытки;

КонецПроцедуры

Процедура ИзменениеКоличестваОписи(Элемент)
	// Вставить содержимое обработчика.
	
	РассчитатьСуммуТабЧасти(ЭлементыФормы.ОписьДенежнойНаличности.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры

Процедура КоманднаяПанель1Перенести(Кнопка)
	
	Если (ИтогоЗатрат<>0) Тогда
		ЭлементыФормы.СуммаДокумента.Значение = ИтогоЗатрат;
		ЭлементыФормы.СуммаДокументаРасчеты.Значение = ИтогоЗатрат;
	КонецЕсли;
	
	СтрокаПлатеж.СуммаПлатежа = ИтогоЗатрат - (РасшифровкаПлатежа.Итог("СуммаПлатежа")-СтрокаПлатеж.СуммаПлатежа);
	
КонецПроцедуры

Процедура ЗатратыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	СформироватьИтогПоЗатратам();

КонецПроцедуры

Процедура Список2ПриИзменении(Элемент)
	
	Если (ЭлементыФормы.Списком2.Значение <> Истина) Тогда 
		Если ((Подразделение <> Справочники.Подразделения.ПустаяСсылка()) или (СтатьяЗатрат <> Справочники.СтатьиЗатрат.ПустаяСсылка())) Тогда
			Стр 				= Затраты.Добавить();
			Стр.Подразделение 	= Подразделение;
			Стр.СтатьяЗатрат 	= СтатьяЗатрат;
			Стр.Сумма			= СуммаДокумента;
		КонецЕсли;		
		//Подразделение = Справочники.Подразделения.ПустаяСсылка();
		СтатьяЗатрат = Справочники.СтатьиЗатрат.ПустаяСсылка();
		ЭлементыФормы.Затраты.Видимость = Истина;
		ЭлементыФормы.СтатьяЗатрат.Видимость = Ложь;
		ЭлементыФормы.НоменклатурнаяГруппа.Видимость = Ложь;
		ЭлементыФормы.НадписьСтатьяЗатрат.Видимость = Ложь;	
		ЭлементыФормы.НадписьНоменклатурнаяГруппа.Видимость = Ложь;	
		ЭлементыФормы.КоманднаяПанель2.Видимость = Истина;
	Иначе 
		Если (Затраты.Количество()>0) Тогда
			Стр 				= Затраты.Получить(0);
			//Подразделение 		= Стр.Подразделение;
			СтатьяЗатрат		= Стр.СтатьяЗатрат;
		КонецЕсли;

		Затраты.Очистить();
		ЭлементыФормы.Затраты.Видимость = Ложь;
		ЭлементыФормы.СтатьяЗатрат.Видимость = Истина;
		ЭлементыФормы.НоменклатурнаяГруппа.Видимость = Истина;
		ЭлементыФормы.НадписьСтатьяЗатрат.Видимость = Истина;
		ЭлементыФормы.НадписьНоменклатурнаяГруппа.Видимость = Истина;	
		ЭлементыФормы.КоманднаяПанель2.Видимость = Ложь;		
	КонецЕсли;

КонецПроцедуры

Процедура ЗатратыПослеУдаления(Элемент)
	
	СформироватьИтогПоЗатратам();
	
КонецПроцедуры

Процедура ОтражатьВЗатратахПриИзменении(Элемент)
	
	Если (ОтражатьВЗатратах) Тогда
		ЭлементыФормы.ПанельОболочка.Страницы.Страница2.Видимость = Истина;
	Иначе 
		ЭлементыФормы.ПанельОболочка.Страницы.Страница2.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодразделениеКомпанииПриИзменении(Элемент)
	
	//+++Шарафутдинов 01.03.2018
	//Если не ВозможностьВыбораПодразделения2018(Дата,Элемент.Значение) тогда
	//	Сообщить("Подразделение должно участвовать в бюджетном планировании. Выберите другое подразделение!");
	//	Элемент.Значение = Справочники.Подразделения.ПустаяСсылка();
	//	Возврат;		
	//КонецЕсли;
	
	//---Шарафутдинов 01.03.2018

	
	УстановитьНомерДокумента(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Вставить содержимое обработчика.
	РазрешитьОткрывать = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"РазрешитьОткрыватьКассовыеДокументы");
	Если не(РазрешитьОткрывать) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	//+++ 10.05.2012
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"УчетТолькоПоПодразделениюПользователя") тогда
		// не отражаем и не даем менять!
		ОтражатьВБухгалтерскомУчете = ложь;
		ОтражатьВНалоговомУчете = ложь;
		ЭлементыФормы.ОтражатьВБухгалтерскомУчете.Доступность = ложь;
		ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ложь;
		
		ЭлементыФормы.Организация.Доступность = ложь;
		// А.А. отбор по кассам перенесен в форму выбора кассы 15.09.15
		//ЭлементыФормы.Касса.Доступность = ложь;
		ЭлементыФормы.ПодразделениеКомпании.Доступность = ложь;
	КонецЕсли;	
	
КонецПроцедуры

Процедура РассчитатьКурсНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Касса) Тогда
		Сообщить("Не выбрана касса организации");
		Возврат;
	КонецЕсли;
	
	Если Проведен Тогда
		Сообщить("Необходимо выполнить отмену проведения документа");
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", Касса);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ДенежныеСредстваОстатки.СуммаОстаток = 0
	               |			ТОГДА 1
	               |		ИНАЧЕ ДенежныеСредстваОстатки.СуммаУпрОстаток / ДенежныеСредстваОстатки.СуммаОстаток
	               |	КОНЕЦ КАК Курс,
	               |	ДенежныеСредстваОстатки.СуммаУпрОстаток КАК ОстатокРуб,
	               |	ДенежныеСредстваОстатки.СуммаОстаток КАК ОстатокВал
	               |ИЗ
	               |	РегистрНакопления.ДенежныеСредства.Остатки(&Период, БанковскийСчетКасса = &Счет) КАК ДенежныеСредстваОстатки";
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		КурсВзаиморасчетов = Результат.Курс;
		Сообщить("Остаток в валюте: " + Строка(Результат.ОстатокВал));
		Сообщить("Остаток в рублях: " + Строка(Результат.ОстатокРуб));
	Иначе
		КурсВзаиморасчетов = 1;
	КонецЕсли;
	
	Для каждого СтрРасшифровкаПлатежа ИЗ РасшифровкаПлатежа Цикл
		СтрРасшифровкаПлатежа.КурсВзаиморасчетов = КурсВзаиморасчетов;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьДанныеДляФискализацииЧекаРКО(Ссылка, ОбщиеПараметры, КассаККМ, Параметры) 
	
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	
	//ОрганизацияЧека = Ссылка.Касса.Владелец;
	ОрганизацияЧека = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент.ПолучитьОрганизациюКассы(КассаККМ,ИмяКомпьютера());
	// Шапка
	ОбщиеПараметры.ДокументОснование = Ссылка;
	ОбщиеПараметры.ТипРасчета = ?(Ссылка.ВидОперации=Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю,
	ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств"),
	ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств"));
	//	ОбщиеПараметры.Кассир = Ссылка.Ответственный.Наименование;
	ОбщиеПараметры.Кассир = глТекущийПользователь.Наименование;
	
	ОбщиеПараметры.Электронно = Ложь; // Чек будет напечатан
	ОбщиеПараметры.Отправляет1СSMS = Ложь;
	ОбщиеПараметры.Отправляет1СEmail = Ложь;
	ОбщиеПараметры.ОрганизацияНазвание = ОрганизацияЧека.НаименованиеПолное;
	ОбщиеПараметры.ОрганизацияИНН = ОрганизацияЧека.ИНН;
	ОбщиеПараметры.ОрганизацияКПП = ОрганизацияЧека.КПП;
	
	ЕстьУслуги=Ложь;
	Для каждого Строка из Ссылка.РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(Строка.Сделка) И типЗнч(Строка.сделка)=Тип("ДокументСсылка.ЗаказНаряд") Тогда	
			ЕстьУслуги=Истина;
		КонецЕсли;
	КонецЦикла;
	ОбщиеПараметры.КодСистемыНалогообложения = МенеджерОборудованияКлиентСервер.КодСистемыНалогообложения(ОрганизацияЧека, Ссылка.Дата,ЕстьУслуги);  
	// Оплаты	
	СуммаТипаОплаты = СуммаДокумента;
	Если СуммаТипаОплаты <> 0 И СуммаТипаОплаты <> Неопределено Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", 0);
		СтрокаОплаты.Вставить("Наименование", "Наличная оплата");
		СтрокаОплаты.Вставить("Сумма", СуммаТипаОплаты);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	// Товарные позиции
	
	РасчетыСПокупателем =(ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю"));
	//МенеджерОборудованияВызовСервера.ЗаполнитьТоварныеПозицииВПараметрахЧека(Ссылка, ОбщиеПараметры, 
	//	ЭтоОплатаПокупателя, ПринятоОт, Основание, параметры,ОрганизацияЧека,Истина);
	МенеджерОборудованияВызовСервера.ЗаполнитьТоварныеПозицииВПараметрахЧека(Ссылка, ОбщиеПараметры, 
	РасчетыСПокупателем, Истина, Выдать, Основание,Параметры);
	
КонецПроцедуры
	
	Функция КассаРазрешена(выбКасса)
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
				 |	СоответствиеСкладуОрганизацииИКассыККМ.КассаККМ,
				 |	СоответствиеСкладуОрганизацииИКассыККМ.Компьютер,
				 |	СоответствиеСкладуОрганизацииИКассыККМ.Касса
				 |ИЗ
				 |	РегистрСведений.СоответствиеСкладуОрганизацииИКассыККМ КАК СоответствиеСкладуОрганизацииИКассыККМ
				 |ГДЕ
				 |	СоответствиеСкладуОрганизацииИКассыККМ.Компьютер = &Компьютер
				 |	И СоответствиеСкладуОрганизацииИКассыККМ.Касса = &Касса
				 |	И СоответствиеСкладуОрганизацииИКассыККМ.КассаККМ <> ЗНАЧЕНИЕ(Справочник.КассыККМ.пустаяссылка)";
				 Запрос.УстановитьПараметр("Компьютер",ИмяКомпьютера());
				 Запрос.УстановитьПараметр("Касса",выбКасса);
				 Рез = Запрос.Выполнить().Выбрать();
				 Если Рез.Количество()>0 тогда
					 Возврат истина;
				 КонецЕсли;
Возврат ложь;	
КонецФункции

Процедура ЗатратыПодразделениеПриИзменении(Элемент)
	
	//+++Шарафутдинов 01.03.2018
	Если не ВозможностьВыбораПодразделения2018(Дата,Элемент.Значение) тогда
		Сообщить("Подразделение должно участвовать в бюджетном планировании. Выберите другое подразделение!");
		Элемент.Значение = Справочники.Подразделения.ПустаяСсылка();
		Возврат;		
	КонецЕсли;
	
	//---Шарафутдинов 01.03.2018


КонецПроцедуры






















