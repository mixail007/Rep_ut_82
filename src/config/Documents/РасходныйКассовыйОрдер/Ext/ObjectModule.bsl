// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мЗадаватьВопросы Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

//Хранит таблицу, использующуюся при проведении документа
Перем ТаблицаПлатежейУпр;

//БАЛАНС (04.12.2007)                       
//
Перем мПроведениеИзФормы Экспорт; 

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьРКО()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата                          КАК ДатаДокумента,
	|	Организация,
	|	Организация                   КАК ЮрФизЛицо,
	|	Организация                   КАК Руководители,
	|	Подразделение,
	|	Подразделение.Представление   КАК ПредставлениеПодразделения,
	|	СуммаДокумента                КАК Сумма,
	|	Контрагент,
	|	Контрагент.Представление      КАК ФИОПолучателя,
	|	ВалютаДокумента               КАК Валюта,
	|	ВалютаДокумента.Представление КАК ВалютаПредставление,
	|	Выдать,
	|	Приложение,
	|	ПоДокументу,
	|	Основание
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент   = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходныйКассовыйОрдер_КО2";
	Макет         = ПолучитьОбщийМакет("КО2");
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ЕстьРасчетыСКонтрагентами=ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=ЕстьРасчетыПоКредитам(ВидОперации);

	СведенияОбОрганизации = СведенияОЮрФизЛице(Шапка.ЮрФизЛицо, Шапка.ДатаДокумента);
	
	// Выводим шапку накладной
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации   = ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	ОбластьМакета.Параметры.ПредставлениеПодразделения = Шапка.ПредставлениеПодразделения;
	ОбластьМакета.Параметры.СуммаПрописью     = СформироватьСуммуПрописью(Шапка.Сумма, Шапка.Валюта);
	ОбластьМакета.Параметры.ОрганизацияПоОКПО = СведенияОбОрганизации.КодПоОКПО;
	ОбластьМакета.Параметры.ДатаДокумента     = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.НомерДокумента    = ПолучитьНомерНаПечать(Шапка);
	
	Руководители = ОтветственныеЛицаОрганизации(Шапка.Руководители, КонецДня(Шапка.ДатаДокумента),);
	Руководитель = Руководители.Руководитель;
	РуководительДолжность = Руководители.РуководительДолжность;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	Кассир       = Руководители.Кассир;

	ОбластьМакета.Параметры.ФИОРуководителя       = Руководитель;
	ОбластьМакета.Параметры.ДолжностьРуководителя = РуководительДолжность;

	ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = Бухгалтер;
	ОбластьМакета.Параметры.ФИОКассира            = Кассир;
	
	ТекстОснование=Шапка.Основание;
	
	Если ТекстОснование="" И Не ЗначениеНеЗаполнено(РасчетныйДокумент) Тогда
		
		ТекстОснование=Лев(Строка(РасчетныйДокумент),Найти(Строка(РасчетныйДокумент),Строка(РасчетныйДокумент.Дата))-1)+Формат(РасчетныйДокумент.Дата,"ДФ=dd.MM.yyyy");
		
	КонецЕсли;

	ОбластьМакета.Параметры.Основание             = ТекстОснование;
	ОбластьМакета.Параметры.Приложение            = Шапка.Приложение;
	
	ТекстВыдать=Шапка.Выдать;
	ТекстПоДокументу=Шапка.ПоДокументу;
		
	Если ТекстВыдать="" И НЕ ЗначениеНеЗаполнено(Контрагент) Тогда
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			ТекстВыдать =?(Контрагент.НаименованиеПолное="",Контрагент.Наименование, Контрагент.НаименованиеПолное);
			
			
		ИначеЕсли ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
			
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
			|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
			|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество
			|ИЗ
			|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо=&ФизЛицо) КАК ФИОФизЛицСрезПоследних";
			Запрос.УстановитьПараметр("Дата",Дата);
			Запрос.УстановитьПараметр("ФизЛицо",Контрагент);
			
			Результат=Запрос.Выполнить().Выбрать();
			Если Результат.Следующий() Тогда
				
				ТекстВыдать = ?(НЕ ПустаяСтрока(Результат.Фамилия), 
				Результат.Фамилия + ?(НЕ ПустаяСтрока(Результат.Имя)," " + Результат.Имя + " " + ?(НЕ ПустаяСтрока(Результат.Отчество),Результат.Отчество, ""), ""),"");
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
			
	Если ТекстПоДокументу="" И (НЕ ЗначениеНеЗаполнено(Контрагент)) И ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда	
		
		ДокФизЛица = ПаспортныеДанные(Контрагент, Дата);
		
		Если НЕ ЗначениеНеЗаполнено(ДокФизЛица) Тогда
			ТекстПоДокументу = Строка(ДокФизЛица.Вид) + " серия " +
			ДокФизЛица.Серия       + ", номер " +
			ДокФизЛица.Номер       + ", выданый " +
			Формат(ДокФизЛица.ДатаВыдачи, "ДФ=dd.MM.yyyy")  + " " +
			ДокФизЛица.Выдан;
		КонецЕсли;
		
	КонецЕсли;
		
	ОбластьМакета.Параметры.ФИОПолучателя         = ТекстВыдать;
	ОбластьМакета.Параметры.РеквизитыДокументаУдостоверяющегоЛичность = ТекстПоДокументу;
	
	ПроставитьПараметрыПечатиДокумента(ОбластьМакета, Организация, Ссылка.Метаданные().Имя);

	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьРКО()


Функция ПечатьСВ()
    Перем КоличествоСтрокОписи;
	
	КоличествоСтрокОписи = 18;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата                          		КАК ДатаДокумента,
	|	Организация,
	|	Организация                   		КАК ЮрФизЛицо,
	|	СуммаДокумента                		КАК Сумма,
	|	ВалютаДокумента               		КАК Валюта,
	|	ВалютаДокумента.Представление 		КАК ВалютаПредставление,
	|	ВалютаДокумента.НаименованиеПолное	КАК ВалютаИмя,
	|   ВалютаДокумента.Код 		  		КАК КодВалюты,
	|	СчетОрганизации.НомерСчета    		КАК Счет,
	|	СчетОрганизации.Банк		  		КАК Банк,
	|	НомерСумки,
	|	Выдать,
	|	Приложение,
	|	ПоДокументу,
	|	Основание
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент   = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходныйКассовыйОрдер_КО2";
	Макет         		= ПолучитьОбщийМакет("ПрепроводительнаяВедомость");
	
	ОбластьМакета 		= Макет.ПолучитьОбласть("Шапка_1");
	ОбластьМакета2		= Макет.ПолучитьОбласть("Шапка_2");
	ОбластьМакета3 		= Макет.ПолучитьОбласть("Шапка_3");
	ОбластьШапкиОписи 	= Макет.ПолучитьОбласть("ШапкаОписи");
	ОбластьСтрокиОписи 	= Макет.ПолучитьОбласть("СтрокаОписи");
	ОбластьПодвалаОписи = Макет.ПолучитьОбласть("ПодвалОписи");
	ОбластьПустойСтроки = Макет.ПолучитьОбласть("ПустаяСтрока");
	
	СписокОбластей = Новый СписокЗначений;
	СписокОбластей.Добавить(ОбластьМакета);
	СписокОбластей.Добавить(ОбластьМакета2);
	СписокОбластей.Добавить(ОбластьМакета3);
	
	СведенияОбОрганизации = СведенияОЮрФизЛице(Шапка.ЮрФизЛицо, Шапка.ДатаДокумента);
	
	Для каждого Область Из СписокОбластей Цикл
		
		Область.Значение.Параметры.Заполнить(Шапка);
		Область.Значение.Параметры.ПредставлениеОрганизации    = ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		Область.Значение.Параметры.СуммаПрописью     		   = СформироватьСуммуПрописью(Шапка.Сумма, Шапка.Валюта);
		Область.Значение.Параметры.Сумма		      		   = Формат(Шапка.Сумма, "ЧДЦ=0");
		Область.Значение.Параметры.НомерСчета				   = Шапка.Счет;
		Область.Значение.Параметры.БанкПолучателя			   = Шапка.Банк;
		Область.Значение.Параметры.ДатаДокумента     		   = Формат(Шапка.ДатаДокумента, "ДФ='дд ММММ гггг ""г.""'"); //Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
		Область.Значение.Параметры.НомерСумки				   = ?(СокрЛП(Шапка.НомерСумки) = "", "", СокрЛП(Шапка.НомерСумки));
	
	КонецЦикла; 
	// Выводим шапку накладной
	
	
	ИмяВалютыДокумента = Шапка.ВалютаИмя;
	КодВалюты = Шапка.КодВалюты;
	
	
	
	//ОбластьМакета.Параметры.ОрганизацияПоОКПО = СведенияОбОрганизации.КодПоОКПО;
	
	
	
	//ОбластьМакета.Параметры.НомерДокумента    = ПолучитьНомерНаПечать(Шапка);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст = "
	|ВЫБРАТЬ 
	|   НаименованиеНоминала	КАК Имя,
	|   Цена					КАК Коэффициент,
	|	Количество				КАК КоличествоВалюты,
	|	Сумма
	|ИЗ 
	|   Документ.РасходныйКассовыйОрдер.ОписьДенежнойНаличности КАК Опись   
	|ГДЕ
	|   Опись.Ссылка = &ТекущийДокумент
	|ИТОГИ
	|	СУММА(КоличествоВалюты), СУММА(Сумма) ПО Общие
	|";
	
	
	Опись = Запрос.Выполнить().Выбрать();
	
	ТабДокумент.Вывести(ОбластьМакета);
	ТабДокумент.Вывести(ОбластьШапкиОписи);
	
	СтрокВыведено = 0;
	
	Пока Опись.Следующий() Цикл
		
		Если Опись.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда
		
			ОбщееКоличество = Опись.КоличествоВалюты;
			ОбщаяСумма = Опись.Сумма;
			
		Иначе
			
			ОбластьСтрокиОписи.Параметры.НаименованиеВалюты	= ИмяВалютыДокумента;
			ОбластьСтрокиОписи.Параметры.КодВалюты			= КодВалюты;
			ОбластьСтрокиОписи.Параметры.НоминалВалюты		= Опись.Имя;
			ОбластьСтрокиОписи.Параметры.КоличествоВалюты	= Формат(Опись.КоличествоВалюты, "ЧН=--");
			ОбластьСтрокиОписи.Параметры.СуммаВалюты        = Формат(Опись.Сумма, "ЧДЦ=2; ЧН=--");
			ТабДокумент.Вывести(ОбластьСтрокиОписи);
			СтрокВыведено = СтрокВыведено + 1;
			//ОбластьПодвалаОписи = Макет.ПолучитьОбласть("ПодвалОписи");

		КонецЕсли; 
		
		//Сообщить(Опись.Имя);
		
	
	КонецЦикла;
	
	Если СтрокВыведено < КоличествоСтрокОписи - 1 Тогда
		
		Для СчСтр =  1 По КоличествоСтрокОписи - 1 - СтрокВыведено Цикл
			
			ТабДокумент.Вывести(ОбластьПустойСтроки);
			
		КонецЦикла; 
		
	КонецЕсли;
	
	
	ОбластьПодвалаОписи.Параметры.ИтогКоличестваВалюты = ОбщееКоличество;
	ОбластьПодвалаОписи.Параметры.ИтогСуммыВалюты = Формат(ОбщаяСумма, "ЧДЦ=2");
    ТабДокумент.Вывести(ОбластьПодвалаОписи);
	
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	
	//Руководители = ОтветственныеЛицаОрганизации(Шапка.Руководители, КонецДня(Шапка.ДатаДокумента),);
	//Руководитель = Руководители.Руководитель;
	//РуководительДолжность = Руководители.РуководительДолжность;
	//Бухгалтер    = Руководители.ГлавныйБухгалтер;
	//Кассир       = Руководители.Кассир;

	//ОбластьМакета.Параметры.ФИОРуководителя       = Руководитель;
	//ОбластьМакета.Параметры.ДолжностьРуководителя = РуководительДолжность;

	//ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = Бухгалтер;
	//ОбластьМакета.Параметры.ФИОКассира            = Кассир;
	
	//ТекстОснование=Шапка.Основание;
	
	//Если ТекстОснование="" И Не ЗначениеНеЗаполнено(РасчетныйДокумент) Тогда
	//	
	//	ТекстОснование=Лев(Строка(РасчетныйДокумент),Найти(Строка(РасчетныйДокумент),Строка(РасчетныйДокумент.Дата))-1)+Формат(РасчетныйДокумент.Дата,"ДФ=dd.MM.yyyy");
	//	
	//КонецЕсли;

	//ОбластьМакета.Параметры.Основание             = ТекстОснование;
	//ОбластьМакета.Параметры.Приложение            = Шапка.Приложение;
	//
	//ТекстВыдать=Шапка.Выдать;
	//ТекстПоДокументу=Шапка.ПоДокументу;
		
	//Если ТекстВыдать="" И НЕ ЗначениеНеЗаполнено(Контрагент) Тогда
	//	
	//	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
	//		
	//		ТекстВыдать =?(Контрагент.НаименованиеПолное="",Контрагент.Наименование, Контрагент.НаименованиеПолное);
	//		
	//		
	//	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
	//		
	//		Запрос=Новый Запрос;
	//		Запрос.Текст="ВЫБРАТЬ
	//		|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
	//		|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
	//		|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество
	//		|ИЗ
	//		|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо=&ФизЛицо) КАК ФИОФизЛицСрезПоследних";
	//		Запрос.УстановитьПараметр("Дата",Дата);
	//		Запрос.УстановитьПараметр("ФизЛицо",Контрагент);
	//		
	//		Результат=Запрос.Выполнить().Выбрать();
	//		Если Результат.Следующий() Тогда
	//			
	//			ТекстВыдать = ?(НЕ ПустаяСтрока(Результат.Фамилия), 
	//			Результат.Фамилия + ?(НЕ ПустаяСтрока(Результат.Имя)," " + Результат.Имя + " " + ?(НЕ ПустаяСтрока(Результат.Отчество),Результат.Отчество, ""), ""),"");
	//			
	//		КонецЕсли;
	//			
	//	КонецЕсли;
	//	
	//КонецЕсли;
			
	//Если ТекстПоДокументу="" И (НЕ ЗначениеНеЗаполнено(Контрагент)) И ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда	
	//	
	//	ДокФизЛица = ПаспортныеДанные(Контрагент, Дата);
	//	
	//	Если НЕ ЗначениеНеЗаполнено(ДокФизЛица) Тогда
	//		ТекстПоДокументу = Строка(ДокФизЛица.Вид) + " серия " +
	//		ДокФизЛица.Серия       + ", номер " +
	//		ДокФизЛица.Номер       + ", выданый " +
	//		Формат(ДокФизЛица.ДатаВыдачи, "ДФ=dd.MM.yyyy")  + " " +
	//		ДокФизЛица.Выдан;
	//	КонецЕсли;
	//	
	//КонецЕсли;
		
	//ОбластьМакета.Параметры.ФИОПолучателя         = ТекстВыдать;
	//ОбластьМакета.Параметры.РеквизитыДокументаУдостоверяющегоЛичность = ТекстПоДокументу;

	
	ТабДокумент.Вывести(ОбластьМакета2);
	
	ТабДокумент.Вывести(ОбластьШапкиОписи);
	
	СтрокВыведено = 0;
	
	Опись.Сбросить();
	Опись.Выбрать();
	
	Пока Опись.Следующий() Цикл
		
		Если Опись.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда
		
			ОбщееКоличество = Опись.КоличествоВалюты;
			ОбщаяСумма = Опись.Сумма;
			
		Иначе
			
			ОбластьСтрокиОписи.Параметры.НаименованиеВалюты	= ИмяВалютыДокумента;
			ОбластьСтрокиОписи.Параметры.КодВалюты			= КодВалюты;
			ОбластьСтрокиОписи.Параметры.НоминалВалюты		= Опись.Имя;
			ОбластьСтрокиОписи.Параметры.КоличествоВалюты	= Формат(Опись.КоличествоВалюты, "ЧН=--");
			ОбластьСтрокиОписи.Параметры.СуммаВалюты        = Формат(Опись.Сумма, "ЧДЦ=2; ЧН=--");
			ТабДокумент.Вывести(ОбластьСтрокиОписи);
			СтрокВыведено = СтрокВыведено + 1;
			//ОбластьПодвалаОписи = Макет.ПолучитьОбласть("ПодвалОписи");

		КонецЕсли; 
		
		//Сообщить(Опись.Имя);
		
	
	КонецЦикла;
	
	Если СтрокВыведено < КоличествоСтрокОписи - 1 Тогда
		
		Для СчСтр =  1 По КоличествоСтрокОписи - 1 - СтрокВыведено Цикл
			
			ТабДокумент.Вывести(ОбластьПустойСтроки);
			
		КонецЦикла; 
		
	КонецЕсли;
	
	
	ОбластьПодвалаОписи.Параметры.ИтогКоличестваВалюты = ОбщееКоличество;
	ОбластьПодвалаОписи.Параметры.ИтогСуммыВалюты = Формат(ОбщаяСумма, "ЧДЦ=2");
    ТабДокумент.Вывести(ОбластьПодвалаОписи);
    ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	ТабДокумент.Вывести(ОбластьМакета3);

	Возврат ТабДокумент;

КонецФункции // ПечатьСВ()


// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "РКО" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьРКО();
		
	ИначеЕсли ИмяМакета = "СВ" Тогда
		
		ТабДокумент = ПечатьСВ();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();
	
	КонецЕсли;

	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;

	СписокМакетов.Добавить("РКО", "Расходный кассовый ордер");
	СписокМакетов.Добавить("СВ", "Препроводительная ведомость");

	ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
	
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж) Экспорт

	КурсДокумента=?(КурсДокумента=0,1, КурсДокумента);
	КратностьДокумента=?(КратностьДокумента=0,1, КратностьДокумента);
	СтрокаПлатеж.КурсВзаиморасчетов=?(СтрокаПлатеж.КурсВзаиморасчетов=0,1,СтрокаПлатеж.КурсВзаиморасчетов);
	СтрокаПлатеж.КратностьВзаиморасчетов=?(СтрокаПлатеж.КратностьВзаиморасчетов=0,1,СтрокаПлатеж.КратностьВзаиморасчетов);

КонецПроцедуры // ПроверкаКурсовВалют()

// Процедура выполняет заполнение суммы документа,
// по регистру "СуммыЗаказов".
//
// Параметры:
//  ДокументОснование  - документ ссылка (Заказ покупателя, Заказ поставщику).
//  ВалютаДокумента    - валюта документа (валюта регламентированного учета организаций)
//  КурсВзаиморасчетов - курс взаиморасчетов по договору
//  КратностьВзаиморасчетов - кратность взаиморасчетов по договору
//
Процедура ЗаполнитьПоЗаказуУпр(СтрокаПлатеж)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", ДокументОснование);

	Запрос.Текст ="ВЫБРАТЬ
	|	РасчетыСКонтрагентамиОстатки.Сделка Как Сделка,
	|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(, Сделка = &Заказ) КАК РасчетыСКонтрагентамиОстатки";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПлатеж.Сделка=Выборка.Сделка;
		Если Выборка.Сумма < 0 Тогда
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.Сумма*(-1);
			СуммаДокумента = ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов,
			                            СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
			                            ВалютаДокумента,
			                            СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
			                            СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
										
			СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;							
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоЗаказуУпр()

// Процедура выполняет заполнение суммы документа,
// суммы взаиморасчетов по регистру "КонтрагентыВзаиморасчетыКомпании".
//
Процедура ЗаполнитьПоВзаиморасчетамУпр(СтрокаПлатеж)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорКонтрагента", СтрокаПлатеж.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка", СтрокаПлатеж.Сделка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СуммаВзаиморасчетовОстаток КАК СуммаДолга // в валюте взаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(,
	|	                                                    ДоговорКонтрагента = &ДоговорКонтрагента
	|	                                                    И Сделка = &Сделка)
	|ГДЕ
	|	СуммаВзаиморасчетовОстаток < 0
	|
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаДолга*(-1);
		СуммаДокумента = ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
		                            СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента,
		                            СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
		                            СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
									
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
									
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоВзаиморасчетамУпр()

// Процедура выполняет заполнение суммы документа,
// суммы взаиморасчетов по регистру "ПодотчетныеЛицаВзаиморасчетыКомпании".
//
Процедура ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(СтрокаПлатеж) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("РасчетныйДокумент", РасчетныйДокумент);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетовПодотчетника", ВалютаВзаиморасчетовПодотчетника);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СуммаВзаиморасчетовОстаток КАК СуммаДолга // в валюте взаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(,
	|	                                                           ФизЛицо = &Контрагент
	|	                                                         И РасчетныйДокумент = &РасчетныйДокумент
	|	                                                         И Валюта = &ВалютаВзаиморасчетовПодотчетника)
	|ГДЕ
	|	СуммаВзаиморасчетовОстаток < 0
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		СтрокаПлатеж.СуммаВзаиморасчетов = - Выборка.СуммаДолга;
		СуммаДокумента = ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
		                            ВалютаВзаиморасчетовПодотчетника, ВалютаДокумента,
		                            СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
		                            СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;							
									
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр()

// Заполняет сумму документа и сумму взаиморасчетов на основании остатка
// по заявке в регистре "ЗаявкиНаРасходованиеСредств"
//
Процедура ЗаполнитьПоЗаявкеРКОУпр() Экспорт
	
	// Проверяем соответствие суммы взаиморасчетов документа сумме взаиморасчетов заявки
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаявкиНаРасходованиеСредствОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	               |	ЗаявкиНаРасходованиеСредствОстатки.СуммаОстаток КАК СуммаПлатежа,
	               |	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	               |	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.Контрагент КАК Контрагент,
	               |	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента.Владелец.ОсновнойБанковскийСчет КАК СчетКонтрагента,
	               |	ЗаявкиНаРасходованиеСредствОстатки.Сделка КАК Сделка,
	               |	ЗаявкиНаРасходованиеСредствОстатки.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	               |	ЗаявкиНаРасходованиеСредствОстатки.Проект КАК Проект,
	               |	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.ВалютаВзаиморасчетовПодотчетника КАК ВалютаВзаиморасчетовПодотчетника,
	               |	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.РасчетныйДокумент КАК РасчетныйДокумент,
	               |	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.Ссылка КАК ЗаявкаНаРасходование,
	               |	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.Получатель КАК Получатель,
	               |	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.ВидВыдачиДенежныхСредств КАК ВидВыдачиДенежныхСредств
	               |ИЗ
	               |	РегистрНакопления.ЗаявкиНаРасходованиеСредств.Остатки(, ЗаявкаНаРасходование = &ДокументЗаявка) КАК ЗаявкиНаРасходованиеСредствОстатки";
	
	Запрос.УстановитьПараметр("ДокументЗаявка",ДокументОснование);
	
	СтавкаНДС=ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяСтавкаНДС");
	
	РезультатЗапроса=Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
			
			СтрокаПлатеж   = РасшифровкаПлатежа.Добавить();
			СтрокаПлатеж.СуммаПлатежа = Выборка.СуммаПлатежа;
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаПлатежа;
			
			СтатьяЗатрат = Выборка.ЗаявкаНаРасходование.РасшифровкаПлатежа[0].СтатьяЗатрат;
			
			Контрагент = Выборка.Контрагент;
			
			Комментарий = СтрЗаменить(Выборка.ЗаявкаНаРасходование.Описание, Символы.ПС, " ");
			
		ИначеЕсли ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ Тогда
				
			СтрокаПлатеж   = РасшифровкаПлатежа.Добавить();
			СтрокаПлатеж.СуммаПлатежа = Выборка.СуммаПлатежа;
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаПлатежа;
			
			ВидВыдачиДенежныхСредств=Выборка.ВидВыдачиДенежныхСредств;
				
			Контрагент = Выборка.Получатель;
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
			
			СтрокаПлатеж   = РасшифровкаПлатежа.Добавить();
			
			СтрокаПлатеж.СуммаПлатежа = Выборка.СуммаПлатежа;
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаВзаиморасчетов;
			
			Если ВалютаДокумента = Выборка.ВалютаВзаиморасчетовПодотчетника Тогда
				СтрокаПлатеж.КурсВзаиморасчетов      = КурсДокумента;
				СтрокаПлатеж.КратностьВзаиморасчетов = КратностьДокумента;
			Иначе
				СтруктураКурсВзаиморасчетов=ПолучитьКурсВалюты(Выборка.ВалютаВзаиморасчетовПодотчетника,);
				СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсВзаиморасчетов.Кратность;
				
				Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
					СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
					/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
				КонецЕсли;
				
			КонецЕсли;									
			
			Контрагент    		 = Выборка.Получатель;
			РасчетныйДокумент	 = Выборка.РасчетныйДокумент;
			ВалютаВзаиморасчетовПодотчетника=Выборка.ВалютаВзаиморасчетовПодотчетника;
			
		Иначе
			
			Контрагент = Выборка.Контрагент;
									
			СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
			
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаВзаиморасчетов;
			СтрокаПлатеж.СуммаПлатежа = Выборка.СуммаПлатежа;
			
			Если ВалютаДокумента = Выборка.ВалютаВзаиморасчетов Тогда
				СтрокаПлатеж.КурсВзаиморасчетов      = КурсДокумента;
				СтрокаПлатеж.КратностьВзаиморасчетов = КратностьДокумента;
			Иначе
				
				СтруктураКурсВзаиморасчетов=ПолучитьКурсВалюты(Выборка.ВалютаВзаиморасчетов,);
				СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсВзаиморасчетов.Кратность;
				
				Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
					СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
					/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
				КонецЕсли;
				
			КонецЕсли;	
			
		СтрокаПлатеж.СтавкаНДС=СтавкаНДС;
		СтрокаПлатеж.Сделка=Выборка.Сделка;
		СтрокаПлатеж.ДоговорКонтрагента=Выборка.ДоговорКонтрагента;
	
		ПересчитатьСуммуНДС(СтрокаПлатеж);
	
		КонецЕсли;
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Выборка.СтатьяДвиженияДенежныхСредств;
		СтрокаПлатеж.Проект=Выборка.Проект;
		СтрокаПлатеж.ДокументПланированияПлатежа=Выборка.ЗаявкаНаРасходование;
		СтрокаПлатеж.КурсВзаиморасчетовПлан=СтрокаПлатеж.КурсВзаиморасчетов;
		СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаПлатежа;
				
	КонецЦикла;
	
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");

КонецПроцедуры // ЗаполнитьПоЗаявкеУпр()

Процедура ЗаполнитьПоЗаявкеНаРасходованиеСредствУпр(Основание) 
	
	Организация             = Основание.Организация;
	Ответственный           = Основание.Ответственный;

	Касса                   = Основание.БанковскийСчетКасса;
	ВалютаДокумента         = Основание.ВалютаДокумента;

	СтруктураКурсаДокумента = ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсДокумента           = СтруктураКурсаДокумента.Курс;
	КратностьДокумента      = СтруктураКурсаДокумента.Кратность;

	ОтражатьВУправленческомУчете=Истина;
	ОтражатьВБухгалтерскомУчете=Истина;

	ЗаполнитьКассу(ЭтотОбъект, глТекущийПользователь);
	
	ВидОперацииЗаявка=Основание.ВидОперации;
	
	ОпределитьОперациюПоОснованиюУпр(ВидОперации,ВидОперацииЗаявка);
	
	Ответственный     = Основание.Ответственный;
	ДокументОснование = Основание.Ссылка;
	
	Если ВалютаДокумента.Пустая() Тогда
		ВалютаДокумента = мВалютаРегламентированногоУчета;
	КонецЕсли;

	СтруктураКурсаДокумента = ПолучитьКурсВалюты(ВалютаДокумента,Дата);
	КурсДокумента      = СтруктураКурсаДокумента.Курс;
	КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	
	ЗаполнитьПоЗаявкеРКОУпр();
		
КонецПроцедуры

// Заполняет документ на основании приходного кассового ордера\
//
Процедура ЗаполнитьПоПКОУпр()
	
	Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
		
		СтруктураКурсаОснования = ПолучитьКурсВалюты(ДокументОснование.ВалютаДокумента, ДокументОснование.Дата);
		КурсОснования=СтруктураКурсаОснования.Курс;
		КратностьОснования=СтруктураКурсаОснования.Кратность;
		
		ВидОперации=Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю;
		
		//+++ 10.05.2012
		Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"УчетТолькоПоПодразделениюПользователя") тогда
			// не отражаем и не даем менять!
			ОтражатьВБухгалтерскомУчете = ложь;
			ОтражатьВНалоговомУчете = ложь;
		КонецЕсли;
	
		   Контрагент = ДокументОснование.Контрагент;
		
		
		Для Каждого СтрокаОснование ИЗ ДокументОснование.РасшифровкаПлатежа Цикл
			
			СтрокаПлатеж      = РасшифровкаПлатежа.Добавить();
			
			СтрокаПлатеж.ДоговорКонтрагента  	 = СтрокаОснование.ДоговорКонтрагента;
			СтруктураКурсаВзаиморасчетов         = ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
			СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
			
			СтрокаПлатеж.СуммаПлатежа=СтрокаОснование.СуммаПлатежа;
						
			Если ЗначениеНеЗаполнено(СтрокаОснование.Сделка) И СтрокаОснование.ДоговорКонтрагента.ВедениеВзаиморасчетов = 
				Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
				СтрокаПлатеж.Сделка = ДокументОснование;
			Иначе
				СтрокаПлатеж.Сделка = СтрокаОснование.Сделка;
			КонецЕсли;
			
			СтрокаПлатеж.СтавкаНДС=СтрокаОснование.СтавкаНДС;
			
		КонецЦикла;
		
		ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета,РасшифровкаПлатежа);
		
		Для Индекс=0 По ДокументОснование.РасшифровкаПлатежа.Количество()-1 Цикл
			
			СтрокаПлатеж=РасшифровкаПлатежа[Индекс];
			СтрокаОснование=ДокументОснование.РасшифровкаПлатежа[Индекс];
			
			Если (НЕ ЗначениеНЕЗаполнено(СтрокаПлатеж.ДоговорКонтрагента))
				И СтрокаПлатеж.ДоговорКонтрагента=СтрокаОснование.ДоговорКонтрагента Тогда // Остался договор из основания
						
				СтрокаПлатеж.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СтрокаОснование.СуммаПлатежа, 
				ДокументОснование.ВалютаДокумента, 
				СтрокаОснование.ДоговорКонтрагента.ВалютаВзаиморасчетов,
				КурсОснования, СтрокаОснование.КурсВзаиморасчетов, 
				КратностьОснования, СтрокаОснование.КратностьВзаиморасчетов);
				
				СтрокаПлатеж.СуммаПлатежа     = ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
				СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,
				ВалютаДокумента,
				СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента, 
				СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);
				
			Иначе
				
				Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
					
					СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
					СтрокаПлатеж.КурсВзаиморасчетов=1;
					СтрокаПлатеж.КратностьВзаиморасчетов=1;
					
				Иначе
					
					СтрокаПлатеж.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, 
					ВалютаДокумента, 
					СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,
					КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов, 
					КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
					
				КонецЕсли;
				
			КонецЕсли;	
			
			ПересчитатьСуммуНДС(СтрокаПлатеж);
			
		КонецЦикла;
		
		СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
		
	Иначе
		
		ВидОперации=Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее;
		// Документ не вводится на основании ПКО с другими видами операций
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоПКОУпр()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейОплатаУпр()

	СтруктураПолей=Новый Структура;
	СтруктураПолей.Вставить("Касса");
	СтруктураПолей.Вставить("СуммаДокумента");
	СтруктураПолей.Вставить("Ответственный");
	
	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		СтруктураПолей.Вставить("СчетОрганизации","Не указан счет организации");
	КонецЕсли;
	
	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплатаУпр()

// Формирует структуру полей, обязательных для заполнения при отражении операции во 
// взаиморасчетах
// Возвращаемое значение:
//   СтруктурахПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейРасчетыУпр()

	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

		СтруктураПолей = Новый Структура("Организация,Касса,
	                        |Контрагент, Ответственный");

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		СтруктураПолей = Новый Структура("Организация,Касса,Контрагент,
	                        |ВалютаВзаиморасчетовПодотчетника,Ответственный");
	Иначе
		СтруктураПолей = Новый Структура("Организация,Касса,Ответственный");
	КонецЕсли;

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплатаУпр()

// Проверяет значение, необходимое при проведении
Процедура ПроверитьЗначение(Значение, Отказ, Заголовок, ИмяРеквизита)
	
	Если ЗначениеНеЗаполнено(Значение) Тогда 
		
		ОшибкаПриПроведении("Не заполнено значение реквизита """+ИмяРеквизита+"""",Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗначение()

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧ(Отказ, Заголовок)

	Для Каждого Платеж Из РасшифровкаПлатежа Цикл

		ПроверитьЗначение(Платеж.ДоговорКонтрагента,Отказ,  Заголовок, "Договор");
		ПроверитьЗначение(Платеж.СуммаВзаиморасчетов,Отказ, Заголовок, "Сумма взаиморасчетов");

		Если Не Отказ Тогда

			// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
			Если Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
			 ИЛИ Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				 Если НЕ Константы.ОплатыРаспределяютМенеджеры.Получить() Тогда
					 ПроверитьЗначение(Платеж.Сделка, Отказ, Заголовок,"Сделка");
				 КонецЕсли;
				 Если Отказ Тогда
					 Сообщить("По выбранному договору установлен способ ведения взаиморасчетов ""по заказам (счетам)""! 
					 |Заполните поле ""Сделка""!");
				 КонецЕсли;

			КонецЕсли;

			Если Не ЗначениеНеЗаполнено(Организация) 
				И Организация <> Платеж.ДоговорКонтрагента.Организация Тогда
				СообщитьОбОшибке("Выбран договор контрагента, не соответстветствующий организации, указанной в документе!", Отказ, Заголовок);
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТЧ

// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(Режим, Отказ, Заголовок)

	Перем ТекущаяСделка;

	Если (НЕ ОбъявлениеНаВзносНаличными.Пустая()) И ВидОперации=Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		ПоОбъявлениюНаВзнос = Истина;
	Иначе
		ПоОбъявлениюНаВзнос = Ложь;
	КонецЕсли;

	РасчетыВозврат=НаправленияДвиженияДляДокументаДвиженияДенежныхСредствУпр(ВидОперации);
	КоэффициентСторно=?(РасчетыВозврат=Перечисления.РасчетыВозврат.Возврат,-1,1);
	
	РасчетыСКонтрагентами = ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам;
		
	ДвиженияПоСтатьям=ТаблицаПлатежейУпр.Скопировать();
	ДвиженияПоЗаявкам=ТаблицаПлатежейУпр.Скопировать();
	ДвиженияПоРезерву=ТаблицаПлатежейУпр.Скопировать();
	ДвиженияПоКонтрагентам=ТаблицаПлатежейУпр.Скопировать();
	ДвиженияДенежныхСредств=ТаблицаПлатежейУпр.Скопировать();
	
	ДвиженияПоЗаявкам.Свернуть("ДокументПланированияПлатежа,ВключатьВПлатежныйКалендарь,ДоговорКонтрагента,Сделка,СтатьяДвиженияДенежныхСредств,Проект","СуммаПлатежа,СуммаВзаиморасчетов,СуммаПлатежаПлан,СуммаУпр");
	ДвиженияПоКонтрагентам.Свернуть("ДоговорКонтрагента,Сделка,ВидДоговора, КонтролироватьДенежныеСредстваКомитента","СуммаВзаиморасчетов,СуммаУпр,СуммаРегл");
	ДвиженияДенежныхСредств.Свернуть("ДокументПланированияПлатежа,ДоговорКонтрагента,Сделка,СтатьяДвиженияДенежныхСредств,Проект","СуммаПлатежа,СуммаУпр");
	ДвиженияПоСтатьям.Свернуть("СтатьяДвиженияДенежныхСредств","СуммаПлатежа");
	ДвиженияПоРезерву.Свернуть("ДокументПланированияПлатежа","СуммаПлатежаПлан");
	
	ДвиженияДенежныхСредств.Колонки["СуммаПлатежа"].Имя="Сумма";
				
	Если Оплачено Тогда
		
		// По регистру "Денежные средства"
		НаборДвиженийОстатки 		= Движения.ДенежныеСредства;
		ТаблицаДвиженийОстатки 		= НаборДвиженийОстатки.Выгрузить();
		
		// По регистру "Денежные средства к списанию"
		НаборДвиженийСписание   = Движения.ДенежныеСредстваКСписанию;
		ТаблицаДвиженийСписание = НаборДвиженийСписание.Выгрузить();
		
		СтрокаКурсыВалют=ТаблицаПлатежейУпр[0];
		
		СуммаУпр = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
				Константы.ВалютаУправленческогоУчета.Получить(), 
				СтрокаКурсыВалют.КурсДокумента,
				СтрокаКурсыВалют.КурсУпрУчета, 
				СтрокаКурсыВалют.КратностьДокумента,
				СтрокаКурсыВалют.КратностьУпрУчета);
		
		СтрокаДвиженийОстатки = ТаблицаДвиженийОстатки.Добавить();
		СтрокаДвиженийОстатки.БанковскийСчетКасса = Касса;
		СтрокаДвиженийОстатки.ВидДенежныхСредств  = Перечисления.ВидыДенежныхСредств.Наличные;
		СтрокаДвиженийОстатки.Сумма               = СуммаДокумента;
		СтрокаДвиженийОстатки.СуммаУпр            = СуммаУпр;
		
		НаборДвиженийОстатки.мПериод              = Дата;
		НаборДвиженийОстатки.мТаблицаДвижений     = ТаблицаДвиженийОстатки;
		Движения.ДенежныеСредства.ВыполнитьРасход();
		
		Если ВидОперации=Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк И НЕ ПоОбъявлениюНаВзнос Тогда
			
			ТаблицаДвиженийОстатки.Очистить();
			
			СтрокаДвиженийОстатки = ТаблицаДвиженийОстатки.Добавить();
			СтрокаДвиженийОстатки.БанковскийСчетКасса = СчетОрганизации;
			СтрокаДвиженийОстатки.ВидДенежныхСредств  = Перечисления.ВидыДенежныхСредств.Безналичные;
			СтрокаДвиженийОстатки.Сумма               = СуммаДокумента;
			СтрокаДвиженийОстатки.СуммаУпр            = СуммаУпр;
			
			НаборДвиженийОстатки.мПериод              = Дата;
			НаборДвиженийОстатки.мТаблицаДвижений     = ТаблицаДвиженийОстатки;
			Движения.ДенежныеСредства.ВыполнитьПриход();
			
		КонецЕсли;
		
		// По регистру "Денежные средства к списанию"
		Для Каждого СтрокаДвижение Из ДвиженияПоСтатьям Цикл
			
			СтрокаДвиженийСписание = ТаблицаДвиженийСписание.Добавить();
			СтрокаДвиженийСписание.БанковскийСчетКасса = Касса;
			СтрокаДвиженийСписание.ВидДенежныхСредств  = Перечисления.ВидыДенежныхСредств.Наличные;
			СтрокаДвиженийСписание.Сумма               = СтрокаДвижение.СуммаПлатежа;
			СтрокаДвиженийСписание.ДокументСписания    = ?(ПоОбъявлениюНаВзнос,ОбъявлениеНаВзносНаличными,Ссылка);
			СтрокаДвиженийСписание.СтатьяДвиженияДенежныхСредств=СтрокаДвижение.СтатьяДвиженияДенежныхСредств;
			
		КонецЦикла;
			
		НаборДвиженийСписание.мПериод              = Дата;
		НаборДвиженийСписание.мТаблицаДвижений     = ТаблицаДвиженийСписание;
		Движения.ДенежныеСредстваКСписанию.ВыполнитьРасход();	
		
	КонецЕсли;

	Если ОтраженоВОперУчете И Не ПоОбъявлениюНаВзнос Тогда
			
		// По регистру "Денежные средства к списанию"
		НаборДвиженийДС   = Движения.ДенежныеСредстваКСписанию;
		ТаблицаДвиженийДС = НаборДвиженийДС.Выгрузить();
		ТаблицаДвиженийДС.Очистить();
		
		Для Каждого СтрокаДвижение Из ДвиженияПоСтатьям Цикл
			
			СтрокаДвиженийДС = ТаблицаДвиженийДС.Добавить();
			СтрокаДвиженийДС.БанковскийСчетКасса = Касса;
			СтрокаДвиженийДС.ВидДенежныхСредств  = Перечисления.ВидыДенежныхСредств.Наличные;
			СтрокаДвиженийДС.Сумма               = СтрокаДвижение.СуммаПлатежа;
			СтрокаДвиженийДС.ДокументСписания    = Ссылка;
			СтрокаДвиженийДС.СтатьяДвиженияДенежныхСредств=СтрокаДвижение.СтатьяДвиженияДенежныхСредств;
			
		КонецЦикла;
			
		НаборДвиженийДС.мПериод              = Дата;
		НаборДвиженийДС.мТаблицаДвижений     = ТаблицаДвиженийДС;
		Движения.ДенежныеСредстваКСписанию.ВыполнитьПриход();
			
		ЕстьРезерв=Ложь;
		ЕстьРазмещение=Ложь;
		ЕстьЗаявка=Ложь;
		ЕстьРасчеты=Ложь;
		
		// По регистру "Денежные средства в резерве"
		НаборДвиженийРезерв   = Движения.ДенежныеСредстваВРезерве;
		ТаблицаДвиженийРезерв = НаборДвиженийРезерв.Выгрузить();
		ТаблицаДвиженийРезерв.Очистить();
		
		// По регистру "Размещение заявок на расходование средств"
		НаборДвиженийРазмещение  = Движения.РазмещениеЗаявокНаРасходованиеСредств;
		ТаблицаДвиженийРазмещение = НаборДвиженийРазмещение.Выгрузить();
		ТаблицаДвиженийРазмещение.Очистить();
		
		// По регистру "Заявки на расходование средств"
		НаборДвиженийЗаявки   = Движения.ЗаявкиНаРасходованиеСредств;
		ТаблицаДвиженийЗаявки = НаборДвиженийЗаявки.Выгрузить();
		ТаблицаДвиженийЗаявки.Очистить();
		
		// Проверим необходимость списания суммы платежного поручения по заявкам из регистра "ДенежныеСредстваРезерв"
		Для Каждого СтрокаЗаявка Из ДвиженияПоРезерву Цикл
			
			Если НЕ СтрокаЗаявка.ДокументПланированияПлатежа.Пустая() Тогда
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("ДокументЗаявка",СтрокаЗаявка.ДокументПланированияПлатежа);
				Запрос.УстановитьПараметр("БанковскийСчетКасса",Касса);
				Запрос.Текст = "ВЫБРАТЬ
				|	ДенежныеСредстваВРезервеОстатки.СуммаОстаток КАК СуммаОстаток
				|ИЗ
				|	РегистрНакопления.ДенежныеСредстваВРезерве.Остатки(, ДокументРезервирования = &ДокументЗаявка И БанковскийСчетКасса=&БанковскийСчетКасса) КАК ДенежныеСредстваВРезервеОстатки";
				Результат = Запрос.Выполнить().Выбрать();
				
				Если Результат.Следующий() И (НЕ Результат.СуммаОстаток=NULL) Тогда
					
					СтрокаДвижений = ТаблицаДвиженийРезерв.Добавить();
					СтрокаДвижений.БанковскийСчетКасса = Касса;
					СтрокаДвижений.ВидДенежныхСредств  = Перечисления.ВидыДенежныхСредств.Наличные;
					СтрокаДвижений.Сумма               = ?(Результат.СуммаОстаток <СтрокаЗаявка.СуммаПлатежаПлан,Результат.СуммаОстаток,СтрокаЗаявка.СуммаПлатежаПлан);
					СтрокаДвижений.ДокументРезервирования = СтрокаЗаявка.ДокументПланированияПлатежа;
					
					ЕстьРезерв=Истина;
					
				КонецЕсли;
				
				Запрос=Новый Запрос;
				Запрос.Текст="ВЫБРАТЬ
				|	РазмещениеЗаявок.ДокументПланирования КАК ДокументПланирования,
				|	РазмещениеЗаявок.СуммаОстаток КАК СуммаОстаток,
				// Ранжируем планиуемые поступления для закрытия. Первыми закрывается размещение по планируемым поступлениям,
				// у которых совпадает счет, затем форма оплаты, затем организация.
				|	(ВЫБОР КОГДА РазмещениеЗаявок.ДокументПланирования.БанковскийСчетКасса=&Касса
				|		Тогда 4
				|	Иначе 0
				|	Конец
				|  + ВЫБОР КОГДА РазмещениеЗаявок.ДокументПланирования.ФормаОплаты=&ФормаОплаты
				|		Тогда 2
				|	Иначе 0
				|	Конец
				|  + ВЫБОР КОГДА РазмещениеЗаявок.ДокументПланирования.Организация=&Организация
				|		Тогда 1
				|	Иначе 0
				|	Конец) КАК Релевантность,
				|	РазмещениеЗаявок.ДокументПланирования.ДатаПоступления КАК ДатаПоступления
				|ИЗ
				|	РегистрНакопления.РазмещениеЗаявокНаРасходованиеСредств.Остатки(, ДокументРезервирования=&ДокументРезервирования) КАК РазмещениеЗаявок
				|ГДЕ НЕ((РазмещениеЗаявок.СуммаОстаток) ЕСТЬ NULL )";
				
				Запрос.УстановитьПараметр("Касса",Касса);
				Запрос.УстановитьПараметр("ФормаОплаты",Перечисления.ВидыДенежныхСредств.Наличные);
				Запрос.УстановитьПараметр("Организация",Организация);
				Запрос.УстановитьПараметр("ДокументРезервирования",СтрокаЗаявка.ДокументПланированияПлатежа);
				
				ТабРазмещение=Запрос.Выполнить().Выгрузить();
				
				ТабРазмещение.Сортировать("Релевантность Убыв,ДатаПоступления Возр");
				
				СуммаКСписанию=СтрокаЗаявка.СуммаПлатежаПлан;
				
				Для Каждого Строка Из ТабРазмещение Цикл
					
					ЕстьРазмещение=Истина;
					
					СтрокаДвижение=ТаблицаДвиженийРазмещение.Добавить();
					СтрокаДвижение.ДокументПланирования=Строка.ДокументПланирования;
					СтрокаДвижение.ДокументРезервирования=СтрокаЗаявка.ДокументПланированияПлатежа;
					
					Если Строка.СуммаОстаток>=СуммаКСписанию Тогда
						
						СтрокаДвижение.Сумма=СуммаКСписанию;
						Прервать;
						
					Иначе
						
						СтрокаДвижение.Сумма=Строка.СуммаОстаток;
						СуммаКСписанию=СуммаКСписанию-Строка.СуммаОстаток;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьРезерв тогда
			
			НаборДвиженийРезерв.мПериод          = Дата;
			НаборДвиженийРезерв.мТаблицаДвижений = ТаблицаДвиженийРезерв;	
			Движения.ДенежныеСредстваВРезерве.ВыполнитьРасход();
			
		КонецЕсли;
		
		Если ЕстьРазмещение Тогда
			
			НаборДвиженийРазмещение.мПериод          = Дата;
			НаборДвиженийРазмещение.мТаблицаДвижений = ТаблицаДвиженийРазмещение;	
			Движения.РазмещениеЗаявокНаРасходованиеСредств.ВыполнитьРасход();
			
		КонецЕсли;
					
		// Подготовим таблицу для движений по регистру "РасчетыСКонтрагентами"
		НаборДвиженийКонтрагенты   = Движения.РасчетыСКонтрагентами;
		ТаблицаДвиженийКонтрагенты = НаборДвиженийКонтрагенты.Выгрузить();
		ТаблицаДвиженийКонтрагенты.Очистить();
		
		// По строкам табличной части
		Для Каждого СтрокаПлатеж ИЗ ДвиженияПоЗаявкам Цикл
			
			ТекущаяСделка = ОпределитьСделкуСтрокиТЧ (ЭтотОбъект,СтрокаПлатеж);
							
			Если НЕ СтрокаПлатеж.ДокументПланированияПлатежа.Пустая() Тогда
								
				СуммаПлатежа=СтрокаПлатеж.СуммаПлатежаПлан;											
				СтрокаДвиженийЗаявки = ТаблицаДвиженийЗаявки.Добавить();
				СтрокаДвиженийЗаявки.СуммаУпр            			= СтрокаПлатеж.СуммаУпр;
				СтрокаДвиженийЗаявки.Сумма                			= СтрокаПлатеж.СуммаПлатежаПлан;
				СтрокаДвиженийЗаявки.СуммаВзаиморасчетов  			= СтрокаПлатеж.СуммаВзаиморасчетов;
				СтрокаДвиженийЗаявки.ЗаявкаНаРасходование 			= СтрокаПлатеж.ДокументПланированияПлатежа;
				СтрокаДвиженийЗаявки.СтатьяДвиженияДенежныхСредств 	= СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
				СтрокаДвиженийЗаявки.Проект						 	= СтрокаПлатеж.Проект;
				СтрокаДвиженийЗаявки.ДоговорКонтрагента				= СтрокаПлатеж.ДоговорКонтрагента;
				СтрокаДвиженийЗаявки.Сделка							= СтрокаПлатеж.Сделка;
				
				ЕстьЗаявка = Истина;
				
				Если НЕ СтрокаПлатеж.ВключатьВПлатежныйКалендарь Тогда // Документ не был проведен по оперативным взаиморасчетам
										
					ЕстьРасчеты=Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ((Не ЕстьЗаявка) ИЛИ ЕстьРасчеты) И РасчетыСКонтрагентами Тогда // Первое упоминание о планируемом платеже в системе
				
				// По регистру "РасчетыСКонтрагентами"
				
				СтрокаДвиженийКонтрагенты = ТаблицаДвиженийКонтрагенты.Добавить();
				СтрокаДвиженийКонтрагенты.ДоговорКонтрагента  = СтрокаПлатеж.ДоговорКонтрагента;
				СтрокаДвиженийКонтрагенты.РасчетыВозврат      = РасчетыВозврат;
				СтрокаДвиженийКонтрагенты.Сделка              = ?(ЗначениеНеЗаполнено(СтрокаПлатеж.Сделка),ТекущаяСделка,СтрокаПлатеж.Сделка);
				СтрокаДвиженийКонтрагенты.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаВзаиморасчетов*КоэффициентСторно;
				СтрокаДвиженийКонтрагенты.СуммаУпр            = СтрокаПлатеж.СуммаУпр*КоэффициентСторно;
				
				ЕстьРасчеты = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
				
		Если ЕстьЗаявка Тогда
			
			//***20151225 Проверка осатков при оперативном проведении.
			Если НЕ ОбменДанными.Загрузка И Режим = РежимПроведенияДокумента.Оперативный И Константы.ВводитьИсходящиеПлатежиТолькоНаОснованииЗаявки.Получить() Тогда
				Отказ = НаборДвиженийЗаявки.КонтрольОстатков(ЭтотОбъект, "РасшифровкаПлатежа", Заголовок);
			КонецЕсли;
			//***
			
			НаборДвиженийЗаявки.мПериод          = Дата;
			НаборДвиженийЗаявки.мТаблицаДвижений = ТаблицаДвиженийЗаявки;
			Движения.ЗаявкиНаРасходованиеСредств.ВыполнитьРасход();
			
		КонецЕсли;
		
		Если ЕстьРасчеты Тогда
			
			НаборДвиженийКонтрагенты.мПериод          = Дата;
			НаборДвиженийКонтрагенты.мТаблицаДвижений = ТаблицаДвиженийКонтрагенты;
			
			Если КоэффициентСторно=1 Тогда
				
				Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
				
			Иначе
				
				Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Оплачено И ОтраженоВОперУчете Тогда  // Разнесено по оперативным взаиморасчетам
		// и принято кассиром: проводим по фактическим взаиморасчетам

		// По регистру "Движения денежных средств"
		НаборДвижений = Движения.ДвиженияДенежныхСредств;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ДвиженияДенежныхСредств, ТаблицаДвижений);
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыДенежныхСредств.Наличные,"ВидДенежныхСредств");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыДвиженийПриходРасход.Расход,"ПриходРасход");
		ТаблицаДвижений.ЗаполнитьЗначения(Касса,"БанковскийСчетКасса");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументДвижения");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,"Контрагент");
				
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Движения.ДвиженияДенежныхСредств.ВыполнитьДвижения();
		
		Если ВидОперации=Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк И НЕ ПоОбъявлениюНаВзнос Тогда
			
			// По регистру "Движения денежных средств"
			НаборДвижений = Движения.ДвиженияДенежныхСредств;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ДвиженияДенежныхСредств, ТаблицаДвижений);
			
			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыДенежныхСредств.Безналичные,"ВидДенежныхСредств");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыДвиженийПриходРасход.Приход,"ПриходРасход");
			ТаблицаДвижений.ЗаполнитьЗначения(СчетОрганизации,"БанковскийСчетКасса");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументДвижения");
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Движения.ДвиженияДенежныхСредств.ВыполнитьДвижения();
			
		КонецЕсли;
		
		Если РасчетыСКонтрагентами Тогда

			// По регистрам взаиморасчетов с покукпателями и поставщиками для НДС.
			// Движение делается только если документ отражается в БУ.
			Если ОтражатьВБухгалтерскомУчете Тогда

				// Для целей НДС проводим платежи только по операциям с поставщиком и покупателем.
				Если ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда

					НаборДвиженийСПоставщиками   = Движения.ВзаиморасчетыСПоставщикамиДляНДС;
					ТаблицаДвиженийСПоставщиками = НаборДвиженийСПоставщиками.Выгрузить();

					// По строкам табличной части.
					Для Каждого СтрокаПлатеж ИЗ ДвиженияПоКонтрагентам Цикл

						СтрокаДвижений = ТаблицаДвиженийСПоставщиками.Добавить();
						СтрокаДвижений.Организация         = Организация;
						СтрокаДвижений.ДоговорКонтрагента  = СтрокаПлатеж.ДоговорКонтрагента;
						СтрокаДвижений.Сделка              = ОпределитьСделкуСтрокиТЧ (ЭтотОбъект,СтрокаПлатеж);
						СтрокаДвижений.Сумма               = СтрокаПлатеж.СуммаРегл;

					КонецЦикла;

					НаборДвиженийСПоставщиками.мПериод            = Дата;
					НаборДвиженийСПоставщиками.мТаблицаДвижений   = ТаблицаДвиженийСПоставщиками;

					Движения.ВзаиморасчетыСПоставщикамиДляНДС.ВыполнитьРасход();

				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю Тогда

					НаборДвиженийСПокупателями   = Движения.ВзаиморасчетыСПокупателямиДляНДС;
					ТаблицаДвиженийСПокупателями = НаборДвиженийСПокупателями.Выгрузить();

					// По строкам табличной части.
					Для Каждого СтрокаПлатеж ИЗ ДвиженияПоКонтрагентам Цикл

						СтрокаДвижений = ТаблицаДвиженийСПокупателями.Добавить();
						СтрокаДвижений.Организация         = Организация;
						СтрокаДвижений.ДоговорКонтрагента  = СтрокаПлатеж.ДоговорКонтрагента;
						СтрокаДвижений.Сделка              = ОпределитьСделкуСтрокиТЧ (ЭтотОбъект,СтрокаПлатеж);;
						СтрокаДвижений.Сумма               = СтрокаПлатеж.СуммаРегл;

					КонецЦикла;

					НаборДвиженийСПокупателями.мПериод            = Дата;
					НаборДвиженийСПокупателями.мТаблицаДвижений   = ТаблицаДвиженийСПокупателями;

					Движения.ВзаиморасчетыСПокупателямиДляНДС.ВыполнитьПриход();

				КонецЕсли;

			КонецЕсли;

			// По регистру "ВзаиморасчетыСКонтрагентами"
			НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;
			ТаблицаДвижений = НаборДвижений.Выгрузить();

			// По регистру "ДенежныеСредстваКомитента"
			
			ЕстьРасчетыСКомитентом=Ложь;
			НаборДвиженийКомитент = Движения.ДенежныеСредстваКомитента;
			ТаблицаДвиженийКомитент = НаборДвиженийКомитент.Выгрузить();
		
			// По строкам табличной части
			Для Каждого СтрокаПлатеж ИЗ ДвиженияПоКонтрагентам Цикл

				ТекущаяСделка = ОпределитьСделкуСтрокиТЧ (ЭтотОбъект,СтрокаПлатеж);

				СтрокаДвижений = ТаблицаДвижений.Добавить();
				СтрокаДвижений.ДоговорКонтрагента  = СтрокаПлатеж.ДоговорКонтрагента;
				СтрокаДвижений.Сделка              = ТекущаяСделка;
				СтрокаДвижений.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаВзаиморасчетов*КоэффициентСторно;
				СтрокаДвижений.СуммаУпр            = СтрокаПлатеж.СуммаУпр*КоэффициентСторно;
				
				Если СтрокаПлатеж.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
					И СтрокаПлатеж.КонтролироватьДенежныеСредстваКомитента Тогда
					
					СтрокаДвиженийКомитент = ТаблицаДвиженийКомитент.Добавить();
					СтрокаДвиженийКомитент.ДоговорКонтрагента  = СтрокаПлатеж.ДоговорКонтрагента;
					СтрокаДвиженийКомитент.Сделка              = ТекущаяСделка;
					СтрокаДвиженийКомитент.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаВзаиморасчетов*КоэффициентСторно;
					СтрокаДвиженийКомитент.СуммаУпр            = СуммаУпр*КоэффициентСторно;
					
					ЕстьРасчетыСКомитентом=Истина;
					
				КонецЕсли;
		   
			КонецЦикла;
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если КоэффициентСторно=1 Тогда
				
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();
				
			Иначе
				
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
				
			КонецЕсли;
			
			Если ЕстьРасчетыСКомитентом Тогда
				
				НаборДвиженийКомитент.мПериод          = Дата;
				НаборДвиженийКомитент.мТаблицаДвижений = ТаблицаДвижений;
				
				Если КоэффициентСторно=1 Тогда
					
					Движения.ДенежныеСредстваКомитента.ВыполнитьРасход();
					
				Иначе
					
					Движения.ДенежныеСредстваКомитента.ВыполнитьПриход();
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
			
			Если ЗначениеНеЗаполнено(РасчетныйДокумент) Тогда
				РасчетныйДокументДвижения=Ссылка;
			Иначе
				РасчетныйДокументДвижения=РасчетныйДокумент;
			КонецЕсли;
			
			СтрокаПлатеж=ТаблицаПлатежейУпр[0];
						
			// По регистру "ВзаиморасчетыСПодотчетнымиЛицами"
			НаборДвижений = Движения.ВзаиморасчетыСПодотчетнымиЛицами;
			
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.ФизЛицо             	= Контрагент;
			СтрокаДвижений.РасчетныйДокумент   	= РасчетныйДокументДвижения;
			СтрокаДвижений.Валюта              	= ВалютаВзаиморасчетовПодотчетника;
			СтрокаДвижений.СуммаВзаиморасчетов 	= СтрокаПлатеж.СуммаВзаиморасчетов;
			СтрокаДвижений.СуммаУпр    		   	= СтрокаПлатеж.СуммаУпр;
			
			НаборДвижений.мПериод              = Дата;
			НаборДвижений.мТаблицаДвижений     = ТаблицаДвижений;
			
			Движения.ВзаиморасчетыСПодотчетнымиЛицами.ВыполнитьПриход();
			
		ИначеЕсли ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ Тогда
			
			// По регистру "Розничная выручка"
			НаборДвижений   = Движения.РозничнаяВыручка;
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.РозничнаяТочка  = Контрагент;
			СтрокаДвижений.Подразделение   = Подразделение;
			СтрокаДвижений.Сумма           = СуммаДокумента;
			
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			Движения.РозничнаяВыручка.ВыполнитьПриход();
						
		КонецЕсли

	КонецЕсли;

	//{ 20060828 Лапенков (20061013 и не только)
	Если  ОтражатьВЗатратах  Тогда		
		Если (ИтогоЗатрат<>0) и (СуммаДокумента<>ИтогоЗатрат) Тогда 
			Отказ = Истина;
			Сообщить("Не совпадают сумма затрат и сумма документа.", СтатусСообщения.Важное);
		КонецЕсли;
		ТаблицаЗатрат = СформироватьТаблицуЗатрат();
		ИтогоЗатрат = СформироватьИтогПоЗатратам();
		Если (ТаблицаЗатрат.Количество()>0) Тогда 
			Для Каждого Стр из ТаблицаЗатрат Цикл
				НаборДвижений   = Движения.Затраты.Добавить();
				Если (Стр.Подразделение = Справочники.Подразделения.ПустаяСсылка()) Тогда 
					Отказ = Истина;
					Сообщить("В табличной части ""Затраты"" пропущено подразделение.", СтатусСообщения.Важное);
				КонецЕсли;	
				Если (Стр.СтатьяЗатрат = Справочники.СтатьиЗатрат.ПустаяСсылка()) Тогда 
					Отказ = Истина;
					Сообщить("В табличной части ""Затраты"" пропущена статья.", СтатусСообщения.Важное);
				КонецЕсли;	
				Если ((Стр.Сумма = 0) или (Стр.Сумма = Неопределено)) Тогда 
					Отказ = Истина;
					Сообщить("В табличной части ""Затраты"" пропущена сумма.", СтатусСообщения.Важное)
				КонецЕсли;	
				НаборДвижений.Подразделение  = Стр.Подразделение;
				НаборДвижений.СтатьяЗатрат   = Стр.СтатьяЗатрат;
				НаборДвижений.НоменклатурнаяГруппа   = Стр.НоменклатурнаяГруппа;
				НаборДвижений.Сумма          = Стр.Сумма*?(расшифровкаПлатежа[0].КурсВзаиморасчетов=0,1,расшифровкаПлатежа[0].КурсВзаиморасчетов);
				НаборДвижений.Период          = Дата;
				Движения.Затраты .Записать();
			КонецЦикла;		
		Иначе 
			Если (Подразделение<>Справочники.Подразделения.ПустаяСсылка() и СтатьяЗатрат<>Справочники.СтатьиЗатрат.ПустаяСсылка()) Тогда 
				НаборДвижений   = Движения.Затраты.Добавить();
				НаборДвижений.Подразделение  = Подразделение;
				НаборДвижений.СтатьяЗатрат   = СтатьяЗатрат;
				НаборДвижений.Сумма          = ИтогоЗатрат*?(расшифровкаПлатежа[0].КурсВзаиморасчетов=0,1,расшифровкаПлатежа[0].КурсВзаиморасчетов);
				НаборДвижений.Период         = Дата;
				Движения.Затраты .Записать();				
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	//}	

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ПроверитьЗаполнениеДокументаУпр(Отказ, Режим, Заголовок)
	
	Если (НЕ ОтраженоВОперУчете) И (НЕ Оплачено) И ОтражатьВУправленческомУчете Тогда
		Сообщить(Заголовок+"
			|Не выбрано правило проведения (""Отразить в опер. учете"",""Оплачено"")");
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
		Сообщить(Заголовок+" 
		|не совпадают сумма документа и ее расшифровка.");
		
		Отказ=Истина;
		
	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
		И НЕ СчетОрганизации.ВалютаДенежныхСредств=Касса.ВалютаДенежныхСредств Тогда
			Сообщить("Не совпадают валюты банковского счета и кассы");
			Отказ=Истина;
		КонецЕсли;
		
	Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) И ОтраженоВОперУчете Тогда
		
		ПроверитьЗаполнениеТЧ(Отказ, Заголовок);
		
	КонецЕсли;

	Если ОтражатьВУправленческомУчете 
		И ОтраженоВОперУчете  
		И (Режим = РежимПроведенияДокумента.Оперативный) Тогда

		Если Не Оплачено Тогда
			
			ПроверитьОстаткиПоЗаявке(Дата,Отказ,Заголовок,Касса,СуммаДокумента,ТаблицаПлатежейУпр);
			
			Отказ=Отказ И НЕ ЕстьРазрешениеПроводитьБезЗаявки();
			
			// Проверяем остаток доступных денежных средств
			СвободныйОстаток = ПолучитьСвободныйОстатокДС(Касса,Дата,ТаблицаПлатежейУпр.ВыгрузитьКолонку("ДокументПланированияПлатежа"));
			Если СвободныйОстаток < СуммаДокумента Тогда
				
				Сообщить(Заголовок+"
				|Сумма документа превышает возможный к использованию остаток денежных средств
				|по "+Касса.Наименование+".
				|Возможный к использованию остаток: "+Формат(СвободныйОстаток,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаДокумента+"
				|Сумма документа = "+Формат(СуммаДокумента,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаДокумента);
				
				Если НЕ ЕстьРазрешениеПревышатьСвободныйОстатокДС() Тогда
					Отказ = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			КонтрольОстатковПоТЧ(Дата, РасшифровкаПлатежа, Отказ, Заголовок,?(Оплачено,Истина,Ложь));
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Если Оплачено Тогда
		ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейОплатаУпр(), Отказ, Заголовок);		
	КонецЕсли;

	Если ОтраженоВОперУчете Тогда
		
		ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейРасчетыУпр(), Отказ, Заголовок);
					
	КонецЕсли;
		
	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ 
		И НЕ Касса.ВалютаДенежныхСредств=мВалютаРегламентированногоУчета Тогда
		Сообщить("Выдача денежных средств в кассу ККМ производится только в валюте регламентированного учета.");
		Отказ=Истина;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание) Экспорт

	Если Основание  = Неопределено или ТипЗнч(Основание) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

	Если ЗначениеНеЗаполнено(Касса) Тогда

		Касса = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяКасса");
		
	КонецЕсли;

	ВалютаДокумента         = ?(НЕ Касса.ВалютаДенежныхСредств.Пустая(),Касса.ВалютаДенежныхСредств,мВалютаРегламентированногоУчета);
	
	СтруктураКурсаДокумента = ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	
	КурсДокумента      = СтруктураКурсаДокумента.Курс;	
	КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	
	ДокументОснование  = Основание.Ссылка;

	СпособЗаполнения = "Не заполнять";

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") 
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		
		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();

		ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику;
		Контрагент  = Основание.Контрагент;

		СтрокаПлатеж.ДоговорКонтрагента        = Основание.ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;

		Если (ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику"))
			И (СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
			ИЛИ СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам) Тогда
			
			СтрокаПлатеж.Сделка=Основание;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") И СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			
			СтрокаПлатеж.Сделка=Основание;
			
		КонецЕсли;
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") И Основание.Проведен  Тогда
			СпособЗаполнения = "По заказу";
		Иначе
			СпособЗаполнения = "По сумме документа";
		КонецЕсли;

		ОтражатьВУправленческомУчете = Истина;
		ОтражатьВБухгалтерскомУчете  = Истина;

		ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику;

		СтрокаПлатеж.СтавкаНДС=ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяСтавкаНДС");

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		или (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеДопРасходов")) 
		или (ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")) 
		или (ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"))
		или (ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказНаряд")) Тогда
	
		Если ((ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")) или (ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказНаряд"))) Тогда
			ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику;
		КонецЕсли;

		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
		
		Контрагент  = Основание.Контрагент;
		СтрокаПлатеж.ДоговорКонтрагента        = Основание.ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;

		Если СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = 
				                    Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") И СтрокаПлатеж.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				СтрокаПлатеж.Сделка = Неопределено;
			Иначе
				СтрокаПлатеж.Сделка = Основание;
			КонецЕсли;
			Если Основание.Проведен Тогда
				СпособЗаполнения = "По взаиморасчетам";
			КонецЕсли;
		Иначе
			СтрокаПлатеж.Сделка = Основание.Сделка;
			Если Основание.Проведен Тогда
				СпособЗаполнения = "По сумме документа";
			КонецЕсли;
		КонецЕсли;

		ОтражатьВУправленческомУчете=Истина;
		ОтражатьВБухгалтерскомУчете=Истина;

		СтрокаПлатеж.СтавкаНДС=ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяСтавкаНДС");

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда

		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
		
		ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику;
		Контрагент                       = Основание.ФизЛицо;
		РасчетныйДокумент                = Основание;
		ВалютаВзаиморасчетовПодотчетника = Основание.ВалютаДокумента;
		СтруктураКурсаВзаиморасчетов     = ПолучитьКурсВалюты(ВалютаВзаиморасчетовПодотчетника, ТекущаяДата());
		СтрокаПлатеж.КурсВзаиморасчетов               = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов          = СтруктураКурсаВзаиморасчетов.Кратность;

		СпособЗаполнения = "По взаиморасчетам с подотчетным лицом";
		ОтражатьВУправленческомУчете=Истина;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда

		ЗаполнитьПоПКОУпр();
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОбъявлениеНаВзносНаличными") Тогда

		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
		
		ВидОперации     = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк;
		СчетОрганизации = Основание.СчетОрганизации;

		Касса                   	= Основание.Касса;
		ВалютаДокумента         	= Основание.ВалютаДокумента;
		ОбъявлениеНаВзносНаличными 	= Основание.Ссылка;

		СтруктураКурсаДокумента = ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;

		СуммаДокумента=Основание.СуммаДокумента;
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Основание.СтатьяДвиженияДенежныхСредств;
		
		ОтражатьВУправленческомУчете=Истина;
		ОтражатьВБухгалтерскомУчете=Истина;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда

		Если Основание.ФормаОплаты=Перечисления.ВидыДенежныхСредств.Безналичные Тогда
			Сообщить("Заявка оформлена на расходование безналичных денежных средств.");
			Возврат;
		КонецЕсли;

		ЗаполнитьПоЗаявкеНаРасходованиеСредствУпр(Основание);
	  // { Лапенков 20070321   для возврата аванса по заказам автозапчасти
    ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда 	
		
		Организация = Основание.Организация;
		Контрагент  = Основание.Контрагент;
        ВидОперации     = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю;
		ОтражатьВЗатратах=ЛОЖЬ;
		ОтражатьВУправленческомУчете=Истина;
		ОтражатьВБухгалтерскомУчете=Истина;

		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
    	СтрокаПлатеж.ДоговорКонтрагента        = Основание.ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
    	СтрокаПлатеж.Сделка=Основание;
		
		СпособЗаполнения="По взаиморасчетам";
	//}	
	КонецЕсли;
	
	//{Чарчан
	Если (ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказНаряд")) Тогда		
		СуммаДокумента 				= Основание.СуммаДокумента;
		СтрокаПлатеж.СуммаВзаиморасчетов 	= Основание.СуммаДокумента;
		СтрокаПлатеж.СуммаПлатежа 			= Основание.СуммаДокумента;
		Возврат;	
	КонецЕсли;
	//}	
	
	Если СпособЗаполнения = "По заказу" Тогда
		ПроверкаКурсовВалют(СтрокаПлатеж);
		ЗаполнитьПоЗаказуУпр(СтрокаПлатеж);
		ПересчитатьСуммуНДС(СтрокаПлатеж);
	ИначеЕсли СпособЗаполнения = "По взаиморасчетам" Тогда
		ПроверкаКурсовВалют(СтрокаПлатеж);
		ЗаполнитьПоВзаиморасчетамУпр(СтрокаПлатеж);
		ПересчитатьСуммуНДС(СтрокаПлатеж);
	ИначеЕсли СпособЗаполнения = "По взаиморасчетам с подотчетным лицом" Тогда
		ПроверкаКурсовВалют(СтрокаПлатеж);
		ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(СтрокаПлатеж);
	ИначеЕсли СпособЗаполнения = "По сумме документа" Тогда

		ПроверкаКурсовВалют(СтрокаПлатеж);
		
		// Если основание - отчет комитенту, то надо вычесть вознаграждение
		ОснованиеСуммаДокумента = Основание.СуммаДокумента;
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			ОснованиеСуммаДокумента = Основание.СуммаДокумента - Основание.СуммаВознаграждения;
		КонецЕсли;

		СтруктураКурсаОснования = ПолучитьКурсВалюты(Основание.ВалютаДокумента, Основание.Дата);
		КурсОснования=СтруктураКурсаОснования.Курс;
		КратностьОснования=СтруктураКурсаОснования.Кратность;

		СтрокаПлатеж.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(ОснованиеСуммаДокумента, Основание.ВалютаДокумента, Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		                                 КурсОснования, Основание.КурсВзаиморасчетов, КратностьОснования, Основание.КратностьВзаиморасчетов);
		СуммаДокумента                   = ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		                                 КурсДокумента, СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);

		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
		ПересчитатьСуммуНДС(СтрокаПлатеж);

	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику И
		(НЕ ВалютаВзаиморасчетовПодотчетника=ВалютаДокумента) Тогда
		
		ОтражатьВБухгалтерскомУчете=Ложь;
		ОтражатьВНалоговомУчете=Ложь;
		
	Иначе
		
		ОтражатьВБухгалтерскомУчете=Истина;
		
	КонецЕсли;
	
	ЕстьРасчетыСКонтрагентами=ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=ЕстьРасчетыПоКредитам(ВидОперации);
	
	Если Выдать="" И НЕ ЗначениеНеЗаполнено(Контрагент) Тогда
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			Выдать =?(Контрагент.НаименованиеПолное="",Контрагент.Наименование, Контрагент.НаименованиеПолное);
					
		ИначеЕсли ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
			
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
			|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
			|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество
			|ИЗ
			|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо=&ФизЛицо) КАК ФИОФизЛицСрезПоследних";
			Запрос.УстановитьПараметр("Дата",Дата);
			Запрос.УстановитьПараметр("ФизЛицо",Контрагент);
			
			Результат=Запрос.Выполнить().Выбрать();
			Если Результат.Следующий() Тогда
				
				Выдать = ?(НЕ ПустаяСтрока(Результат.Фамилия), 
				Результат.Фамилия + ?(НЕ ПустаяСтрока(Результат.Имя)," " + Результат.Имя + " " + ?(НЕ ПустаяСтрока(Результат.Отчество),Результат.Отчество, ""), ""),"");
				
			КонецЕсли;
			
			Если Не ЗначениеНеЗаполнено(РасчетныйДокумент) Тогда
				
				ЭтотОбъект.Основание=Лев(Строка(РасчетныйДокумент),Найти(Строка(РасчетныйДокумент),Строка(РасчетныйДокумент.Дата))-1)+Формат(РасчетныйДокумент.Дата,"ДФ=dd.MM.yyyy");
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
			
	Если ПоДокументу="" И НЕ ЗначениеНеЗаполнено(Контрагент) И ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда	
		
		ДокФизЛица = ПаспортныеДанные(Контрагент, Дата);
		
		Если НЕ ЗначениеНеЗаполнено(ДокФизЛица) Тогда
			ПоДокументу = Строка(ДокФизЛица.Вид) + " серия " +
			ДокФизЛица.Серия       + ", номер " +
			ДокФизЛица.Номер       + ", выданый " +
			Формат(ДокФизЛица.ДатаВыдачи, "ДФ=dd.MM.yyyy")  + " " +
			ДокФизЛица.Выдан;
		КонецЕсли;
		
	КонецЕсли;
	
	Ответственный = глТекущийПользователь;

	ОтраженоВОперУчете = Истина;
	Оплачено           = Истина;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);
	
	СтруктураКурсаДокумента = ПолучитьКурсВалюты(ВалютаДокумента,Дата);
	КурсДокумента      = СтруктураКурсаДокумента.Курс;
	КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	
	ЕстьРасчетыСКонтрагентами=ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=ЕстьРасчетыПоКредитам(ВидОперации);
	
	СтруктураВидыУчета=Новый Структура;
	СтруктураВидыУчета.Вставить("ОтражатьВБухгалтерскомУчете", ОтражатьВБухгалтерскомУчете);
	СтруктураВидыУчета.Вставить("ОтражатьВНалоговомУчете", ОтражатьВНалоговомУчете);
	СтруктураВидыУчета.Вставить("ОтражатьВУправленческомУчете", ОтражатьВУправленческомУчете);
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ПроверитьПринадлежностьКВидамУчета(СтруктураВидыУчета, Отказ, Заголовок);

	ТаблицаПлатежейУпр=ПолучитьТаблицуПлатежейУпр(Дата,ВалютаДокумента,Ссылка, "РасходныйКассовыйОрдер");
	
	//Проверим на возможность проведения в БУ и НУ
	Если ОтражатьВБухгалтерскомУчете или ОтражатьВНалоговомУчете тогда
		
		НомерСтроки=1;
		
		Для каждого СтрокаОплаты из ТаблицаПлатежейУпр Цикл
			
			Если ТаблицаПлатежейУпр.Количество()=1 Тогда
				ДополнениеЗаголовка="";
			Иначе
				ДополнениеЗаголовка="Строка "+НомерСтроки+" - ";
				НомерСтроки=НомерСтроки+1;
			КонецЕсли;
			
			ПроверкаВозможностиПроведенияВ_БУ_НУ(СтрокаОплаты.ДоговорКонтрагента, ВалютаДокумента,ОтражатьВБухгалтерскомУчете,
					ОтражатьВНалоговомУчете, мВалютаРегламентированногоУчета, Истина ,Отказ, Заголовок, ДополнениеЗаголовка,
					СтрокаОплаты.ВалютаВзаиморасчетов, СтрокаОплаты.РасчетыВУсловныхЕдиницах);
					
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда	
		ПроверитьЗаполнениеДокументаУпр(Отказ, Режим, Заголовок);	
	КонецЕсли;
	
	// Проверить заполнение подразделения, если нужно. 
	Если (Константы.ОбязательнаяУстановкаПодразделений.Получить() = Истина) Тогда 
		Если (Подразделение = Справочники.Подразделения.ПустаяСсылка()) Тогда 
			Отказ = Истина;
			Сообщить("Перед проведением, установите подразделение.", СтатусСообщения.Важное);
		КонецЕсли;
	КонецЕсли;
	
	//***20151225
	Если НЕ Отказ И НЕ ОбменДанными.Загрузка Тогда
		
		ПроверитьВводНаОснованииЗаявки(Ссылка,Отказ);
		
		Если НЕ Отказ И ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику И НЕ ЗначениеЗаполнено(РасчетныйДокумент) Тогда
			яштПодотчетники.ПроверитьНаличиеДолгаЗаПодотчетником(Ссылка,Отказ);		
		КонецЕсли;
		
	КонецЕсли;
	//***

	Если Не Отказ Тогда
		ДвиженияПоРегистрамУпр(Режим, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	СформироватьИтогПоЗатратам();
	яштДокументОбъектПередЗаписью(ЭтотОбъект, Отказ);
	ПроверкаВозможностиИзмененияДокумента(ЭтотОбъект, Отказ);

	//БАЛАНС (04.12.2007)                       
	//
	ЗарегистрироватьОбъект(ЭтотОбъект,Отказ,мПроведениеИзФормы);
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 

	
КонецПроцедуры

Функция СформироватьТаблицуЗатрат()
	
	ТаблицаЗатрат = Затраты.Выгрузить();
	ТаблицаЗатрат.Свернуть("Подразделение,СтатьяЗатрат,НоменклатурнаяГруппа","Сумма");
	
	Возврат ТаблицаЗатрат;
	
КонецФункции

Функция СформироватьИтогПоЗатратам() Экспорт
	
	Итого = Затраты.Итог("Сумма");
	Если (Итого=0 и Подразделение<>Справочники.Подразделения.ПустаяСсылка() и СтатьяЗатрат<>Справочники.СтатьиЗатрат.ПустаяСсылка()) Тогда 
		Итого = СуммаДокумента;
	КонецЕсли;
	Если (ИтогоЗатрат <> Итого) Тогда 
		ИтогоЗатрат = Итого;	
	КонецЕсли;
	
	Возврат Итого;
	
КонецФункции

Процедура ПриКопировании(ОбъектКопирования)
	
	Ответственный = глТекущийПользователь;
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

//БАЛАНС (04.12.2007)                       
//
мПроведениеИзФормы = Ложь; 