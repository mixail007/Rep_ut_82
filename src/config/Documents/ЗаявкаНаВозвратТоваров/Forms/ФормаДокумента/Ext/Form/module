
Процедура РеализацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=ложь;
	ФормаВыбора = Документы.РеализацияТоваровУслуг.ПолучитьФормуВыбора(,Элемент,);
	
	// Отфильруем список документов по договору.
	ФормаВыбора.Отбор.ДокументыПоКонтрагенту.Значение      = Контрагент;
	ФормаВыбора.Отбор.ДокументыПоКонтрагенту.Использование = Истина;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура КоманднаяПанель1Действие(Кнопка)
	//Если ЗначениеЗаполнено(Реализация) тогда
	//	тзРеал=Реализация.Товары;
	//	Для каждого стр из тзРеал Цикл
	//		нстр=Товары.Добавить();
	//		ЗаполнитьЗначенияСвойств(нстр,стр);
	//		нстр.СкладРеализации=?(ЗначениеЗаполнено(стр.Склад),стр.Склад,Реализация.Склад);
	//	КонецЦикла;
	//КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанель1Действие1(Кнопка)
	ФормаЗаполнения = ПолучитьФорму("ФормаПодбораНоменклатуры", ЭтаФорма);
	ФормаЗаполнения.Контрагент=Контрагент;
	ФормаЗаполнения.Подразделение=Подразделение;
	//07.10.14 Модально не удобно
	//ФормаЗаполнения.ОткрытьМодально();
	ФормаЗаполнения.Открыть();
КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	Если ТипЗнч(ЗначениеВыбора) = Тип("ТаблицаЗначений") Тогда
		Для каждого стр из ЗначениеВыбора Цикл
			//14.06.2016 добавлено условие чтобы не переносились услуги
			Если стр.флажок и не Стр.Номенклатура.Услуга тогда
				нстр=Товары.Добавить();
				ЗаполнитьЗначенияСвойств(нстр,стр);
				нстр.Сумма = Стр.количество*стр.ценаРеализации;
				
				//15.08.2017 ->ошибка - нет одного из реквизитов!
				//нстр.СкладВозврата   = стр.СкладРеализации;
				
				Если ТипЗнч(Стр.Реализация)=Тип("ДокументСсылка.ПеремещениеТоваров") тогда
					если ЗначениеЗаполнено(Стр.Реализация.ВнутреннийЗаказ) тогда // со многих на 1 складПолучатель
						нстр.СкладРеализации = стр.Реализация.СкладПолучатель;
					Иначе // перемещение было с 1 на много
						нстр.СкладВозврата     = Стр.Реализация.СкладОтправитель;
					КонецЕсли;	
				КонецЕсли;
				
				//14.06.2016
			ИначеЕсли стр.флажок и Стр.Номенклатура.Услуга тогда
				Сообщить("В переносимых строках содержится услуга " + Стр.Номенклатура.Наименование + ". Перенос услуг блокируется.");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПриОткрытии()
	
	ПричинаВозвратаСписокВыбора = ПричинаВозвратаСформироватьСписокВыбора();
	ЭлементыФормы.ПричинаВозвратаЭлементФормы.СписокВыбора = ПричинаВозвратаСписокВыбора;
	
	Если ЭтоНовый() тогда
		Ответственный=глТекущийПользователь;
		Подразделение=ПараметрыСеанса.ТекущийПользователь.ОсновноеПодразделение;
	Иначе
		//ЭлементыФормы.ПричинаВозвратаЭлементФормы.Значение = ПричинаВозвратаСписокВыбора.НайтиПоЗначению(ПричинаВозврата);
		ЭлементыФормы.ПричинаВозвратаЭлементФормы.Значение = ПричинаВозврата;
	КонецЕсли;
	ЭлементыФормы.тКатегорияКонтрагента.Заголовок =Контрагент.КатегорияПокупателя;
	УправлениеВидимостью();
	
	СписокКомуМожно = Новый СписокЗначений;
	СписокКомуМожно.Добавить(Справочники.Пользователи.НайтиПоКоду("Фролов"));
	СписокКомуМожно.Добавить(Справочники.Пользователи.НайтиПоКоду("Цверава В.У."));
	СписокКомуМожно.Добавить(Справочники.Пользователи.НайтиПоКоду("Гаричев"));
	СписокКомуМожно.Добавить(Справочники.Пользователи.НайтиПоКоду("Ловыгина Е.И."));
	СписокКомуМожно.Добавить(Справочники.Пользователи.НайтиПоКоду("Невежина И.Н."));
	
	Если СписокКомуМожно.НайтиПоЗначению(глТекущийпользователь)= Неопределено Тогда
		ЭлементыФормы.Комментарий2.Доступность=Ложь;
	конецесли;
	
	УстановитьДоступностьРеквизитов();
	
	//Миронычев
	Если ПричинаВозврата = Перечисления.ПричиныВозвратаТовара.ПоискНедогруза или ПричинаВозврата = Перечисления.ПричиныВозвратаТовара.Пересорт тогда
		ЭлементыФормы.НадписьВиновникНедогруза.Видимость = Истина;
		ЭлементыФормы.ВиновникНедогруза.Видимость = Истина;
		ЭлементыФормы.РаботаетПоОбратнойПродаже.Видимость = Истина;

	Иначе
		ЭлементыФормы.НадписьВиновникНедогруза.Видимость = Ложь;
		ЭлементыФормы.ВиновникНедогруза.Видимость = Ложь;
		ЭлементыФормы.РаботаетПоОбратнойПродаже.Видимость = Ложь;

	КонецЕсли;
	//КонецМиронычев
	
КонецПроцедуры

Процедура КоманднаяПанель1СоздатьВозвраты(Кнопка)
	//СписокРеализаций=Товары.ВыгрузитьКолонку("Реализация");
	//
	//Запрос=новый Запрос;
	//Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	//			 |	РеализацияТоваровУслуг.Сделка КАК ЗаказПокупателя,
	//			 |	РеализацияТоваровУслуг.Ссылка КАК Реализация
	//			 |ИЗ
	//			 |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//			 |ГДЕ
	//			 |	РеализацияТоваровУслуг.Ссылка В(&СписокРеализаций)
	//			 |ИТОГИ ПО
	//			 |	ЗаказПокупателя";
	//			 Запрос.УстановитьПараметр("СписокРеализаций",СписокРеализаций);
	//			 ВыборкаЗаказ=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//			 Пока ВыборкаЗаказ
	
КонецПроцедуры

Процедура ДействияФормыДействиеСформироватьВозвраты(Кнопка)
	
	Если не Согласованно Тогда
		Сообщить ("Заявка должна быть согласована!");
		возврат;
	конецЕсли;
	
	//Миронычев
	Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ЗапретСозданияДокументовВозврата")  Тогда	
		Сообщить("Вам запрещено создавать документы Возврат товаров от покупателя");
		возврат;
	конецЕсли;
	//КонецМиронычев
	
	//{ 10.08.2017 Огородников --- добавлены Перемещения! ----------
	для каждого стр1 из Товары цикл
		Если ТипЗнч(стр1.Реализация)=тип("ДокументСсылка.ПеремещениеТоваров") тогда
			Предупреждение("Нельзя создавать Возврат по Перемещению!", 30);
			Возврат;
		КонецЕсли;
	КонецЦикла;	
	//}
	
	//Плотников, проверка есть ли товар из заявки на ОТХ
	//ЗапросОТХ = Новый Запрос;
	//ЗапросОТХ.УстановитьПараметр("Основание",ЭтотОбъект.Ссылка);
	//ЗапросОТХ.Текст = "ВЫБРАТЬ
	//                  |	ТоварыНаОтветственномХраненииОбороты.Номенклатура,
	//                  |	СУММА(ЕСТЬNULL(ТоварыНаОтветственномХраненииОбороты.КоличествоОборот, 0)) КАК КоличествоОборот
	//                  |ИЗ
	//                  |	РегистрНакопления.ТоварыНаОтветственномХранении.Обороты(, , Регистратор, ) КАК ТоварыНаОтветственномХраненииОбороты
	//                  |ГДЕ
	//                  |	ТоварыНаОтветственномХраненииОбороты.Регистратор.ДокументОснование = &основание
	//                  |
	//                  |СГРУППИРОВАТЬ ПО
	//                  |	ТоварыНаОтветственномХраненииОбороты.Номенклатура";
	//Результат = ЗапросОТХ.Выполнить().Выгрузить();
	//
	//Если Результат.Количество() > 0 Тогда
	//	Если Результат.Итог("КоличествоОборот") > 0 Тогда
	//		Предупреждение("Товар из этой заявки находится на ОТХ, перед тем как сделать возврат следует сделать списание с ОТХ!");
	//	    Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	//Плотников
	
	//14.06.2016 
	ЗапросОТХ = Новый Запрос;
	ЗапросОТХ.УстановитьПараметр("Основание",ЭтотОбъект.Ссылка);
	ЗапросОТХ.Текст = "ВЫБРАТЬ
	|	ОперацияПоОтветственномуХранению.Ссылка
	|ПОМЕСТИТЬ ВТ_Регистратор
	|ИЗ
	|	Документ.ОперацияПоОтветственномуХранению КАК ОперацияПоОтветственномуХранению
	|ГДЕ
	|	ОперацияПоОтветственномуХранению.ДокументОснование = &Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ТоварыНаОтветственномХраненииОбороты.КоличествоОборот, 0)) КАК КоличествоОборот
	|ПОМЕСТИТЬ Вт_1
	|ИЗ
	|	РегистрНакопления.ТоварыНаОтветственномХранении.Обороты(, , Регистратор, ) КАК ТоварыНаОтветственномХраненииОбороты
	|ГДЕ
	|	ТоварыНаОтветственномХраненииОбороты.Регистратор В
	|			(ВЫБРАТЬ
	|				ВТ_Регистратор.Ссылка
	|			ИЗ
	|				ВТ_Регистратор КАК ВТ_Регистратор)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Вт_1.КоличествоОборот, 0) КАК КоличествоОборот
	|ИЗ
	|	Вт_1 КАК Вт_1";
	
	
	Результат = ЗапросОТХ.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Если Результат.КоличествоОборот > 0 Тогда 
			Предупреждение("Товар из этой заявки находится на ОТХ, перед тем как сделать возврат следует сделать списание с ОТХ!");
			Возврат;
		КонецЕсли;
	КонецЕсли;   	
	
	Если не Подготовлен тогда
		Предупреждение("Документ не подготовлен, формирование возврата невозможно!");
		Возврат;
	КонецЕсли;
	Если Модифицированность тогда
		Ответ=Вопрос("Документ изменен, записать?",РежимДиалогаВопрос.ДаНет);
		Если Ответ=КодВозвратаДиалога.Да тогда
			Записать();
		Иначе
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	//10.06.2016=======================================================================
	
	Запрос = новый Запрос;	
	Запрос.Текст= ПолучитьТекстЗапросаДляВозвратов();
	
	//смотрим обороты за 3 месяца с наименьшей даты из реализаций в ТЧ Товары
	СтруктураРез = ВернутьНачДатаКоличествоРеализаций();
	КонДата = ТекущаяДата();	
	Запрос.УстановитьПараметр("Ссылка",Ссылка); 
	Запрос.УстановитьПараметр("Реализация",Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	Запрос.УстановитьПараметр("ОтчетОРозничныхПродажах",Тип("ДокументСсылка.ОтчетОРозничныхПродажах"));
	Запрос.УстановитьПараметр("НачДата", ДобавитьМесяц(СтруктураРез.Дата,-2) ); // за 3 месяца до даты документа-основания
	Запрос.УстановитьПараметр("КонДата", КонДата );
	Сообщить("Цены сформированы по регистру ""Продажи"" за период с "+формат(СтруктураРез.Дата,"ДЛФ=DD")+" по "+формат(КонДата,"ДЛФ=DD")+"
	|  c отборот по товарам " +?(СтруктураРез.Количество=1,"из документа: " + Товары[СтруктураРез.Количество-1].Реализация, "из списка "+СтруктураРез.Количество+" реализаций") ); 
	
	
	//Плотников 23.05.16, запрос для определения весь ли товар возвращается по первичному заказу,
	//Если весь, то нужно в документ возврата добавить возврат услуг, если они были
	
	ТаблицаЗаказов = Товары.Выгрузить();
	ТаблицаЗаказов.Свернуть("НомерЗаказаИМ","Количество");
	МенеджерТаб = Новый МенеджерВременныхТаблиц;
	запросКоличество = Новый Запрос;
	запросКоличество.МенеджерВременныхТаблиц = МенеджерТаб;
	запросКоличество.УстановитьПараметр("ТаблицаЗаказов",ТаблицаЗаказов);
	запросКоличество.Текст = "ВЫБРАТЬ
	|	ТаблицаЗаказов.НомерЗаказаИМ,
	|	ТаблицаЗаказов.Количество
	|ПОМЕСТИТЬ Заказы
	|ИЗ
	|	&ТаблицаЗаказов КАК ТаблицаЗаказов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЗаказПокупателяТовары.Количество) КАК КоличествоВЗаказе,
	|	Заказы.Количество КАК КоличествоВВозврате,
	|	Заказы.НомерЗаказаИМ КАК НомерЗаказа,
	|	МАКСИМУМ(ЗаказПокупателяТовары.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ КоличествоТоваров
	|ИЗ
	|	Заказы КАК Заказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|		ПО Заказы.НомерЗаказаИМ = ЗаказПокупателяТовары.Ссылка.НомерВходящегоДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	Заказы.НомерЗаказаИМ,
	|	Заказы.Количество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоличествоТоваров.Ссылка КАК ЗаказПокупателя,
	|	КоличествоТоваров.НомерЗаказа
	|ИЗ
	|	КоличествоТоваров КАК КоличествоТоваров
	|ГДЕ
	|	КоличествоТоваров.КоличествоВЗаказе = КоличествоТоваров.КоличествоВВозврате";
	
	Заказы = запросКоличество.Выполнить().Выгрузить();   //Если заказ есть в этой таблице, значит по нему надо
	//делать возврат услуг 23.05.16
	//----------------------------------------------------------------------------
	
	ТЧПеремещение = Новый ТаблицаЗначений;    //Плотников, создание перемещений
	ТЧПеремещение.Колонки.Добавить("Номенклатура");
	ТЧПеремещение.Колонки.Добавить("Количество");
	ТЧПеремещение.Колонки.Добавить("Склад");
	ТЧПеремещение.Колонки.Добавить("СкладВозврата");
	
	КолДок = 0;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	ВыборкаЗаказ=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаказ.Следующий() Цикл
		ДокВозврат=СоздатьВозврат(ВыборкаЗаказ.Заказ);
		ВыборкаДетали=ВыборкаЗаказ.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			если ВыборкаДетали.Цена <=0  тогда //29.12.2015
				Сообщить("По товару: "+строка(ВыборкаДетали.Номенклатура.Код)+" - "+строка(ВыборкаДетали.Номенклатура)
				+" цена равна "+строка(ВыборкаДетали.Цена)+"р. Уже есть возврат этого товара!", СтатусСообщения.Внимание);
				продолжить;
			КонецЕсли;			
			Если ЗначениеЗаполнено(ВыборкаДетали.СкладВозврата) и ВыборкаДетали.Склад <> ВыборкаДетали.СкладВозврата Тогда
				Строка = ТЧПеремещение.Добавить();
				ЗаполнитьЗначенияСвойств(Строка,ВыборкаДетали);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаДетали.Заказ) и не ВыборкаДетали.Заказ = Документы.ЗаказПокупателя.ПустаяСсылка() Тогда
				ДокВозврат.Сделка = ВыборкаДетали.Заказ;
			КонецЕсли;
			
			
			СтрокаТабличнойЧасти = ДокВозврат.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,ВыборкаДетали);
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокВозврат);
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокВозврат);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокВозврат);
			
			
			Строка =Заказы.Найти(ВыборкаДетали.НомерЗаказаИМ,"НомерЗаказа");
			
			Если Строка <> Неопределено тогда
				Если строка.ЗаказПокупателя.Услуги.Количество() > 0 Тогда
					Для каждого стр из строка.ЗаказПокупателя.Услуги Цикл
						СтрокаТабличнойЧасти = ДокВозврат.Услуги.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,стр);
						РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокВозврат);
						РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокВозврат);
						РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокВозврат);
					КонецЦикла;
				КонецЕсли;
				Заказы.Удалить(Строка);
			КонецЕсли;
		КонецЦикла;
		
		Если ДокВозврат.Товары.Количество()>0 тогда  //если нет ничего... не открываем
			Форма=ДокВозврат.ПолучитьФорму("ФормаДокумента");
			Форма.Открыть();
			КолДок = КолДок+1;
		КонецЕсли;	 		
		//ДокВозврат.Номер >> строку?!
	КонецЦикла;
	
	Если ТЧПеремещение.Количество() > 0 Тогда //Плотников, если товар возвращается на другой склад сразу создаются перемещения
		ОбъектВЗ = Документы.ВнутреннийЗаказ.СоздатьДокумент();
		ЗаполнитьШапкуДокумента(ОбъектВЗ,глТекущийПользователь);
		ОбъектВЗ.Заказчик = Справочники.Склады.НайтиПоКоду("00294");
		ОбъектВЗ.ВидЗаказа = Перечисления.ВидыВнутреннегоЗаказа.НаСклад;
		ОбъектВЗ.Организация = Справочники.Организации.НайтиПоКоду("00001");
		
		Для каждого стр из ТЧПеремещение Цикл
			НовТовар = ОбъектВЗ.Товары.Добавить();
			НовТовар.Номенклатура = стр.номенклатура;
			НовТовар.Количество = стр.Количество;
			НовТовар.Размещение = стр.Склад;
			НовТовар.ЕдиницаИзмерения = стр.номенклатура.ЕдиницаХраненияОстатков;
			НовТовар.Коэффициент = 1;
			НовТовар.Качество = Справочники.Качество.Новый;
			//НовТовар.СпособСписанияТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
			//НовТовар.Вес = стр.номенклатура.ЕдиницаХраненияОстатков.Вес;
		КонеЦЦИкла;
		
		
		ОбъектВЗ.Дата = ТекущаяДата()+2;;
		ОбъектВЗ.Записать(РежимЗаписиДокумента.Проведение);
		
		
		НовыйДок = Документы.ПеремещениеТоваров.СоздатьДокумент();
		НовыйДок.Дата = ТекущаяДата()+2;
		НовыйДок.УстановитьНовыйНомер();
		
		НовыйДок.ВидОперации                  = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
		НовыйДок.ОтражатьВУправленческомУчете = Истина;
		НовыйДок.ОтражатьВБухгалтерскомУчете  = Истина;
		НовыйДок.ОтражатьВНалоговомУчете  = Истина;
		
		НовыйДок.Подразделение    = ЭтотОбъект.Подразделение;
		НовыйДок.Ответственный    = глТекущийПользователь;
		НовыйДок.Организация      = Справочники.Организации.НайтиПоКоду("00001");
		//НовыйДок.СкладОтправитель = стр.Склад;
		НовыйДок.СкладПолучатель  = Справочники.Склады.НайтиПоКоду("00294");
		НовыйДок.ВнутреннийЗаказ  = ОбъектВЗ.Ссылка;
		
		Для каждого стр из ТЧПеремещение Цикл
			НовТовар = НовыйДок.Товары.Добавить();
			НовТовар.Номенклатура = стр.номенклатура;
			НовТовар.Количество = стр.Количество;
			НовТовар.Склад = стр.Склад;
			НовТовар.ЕдиницаИзмерения = стр.номенклатура.ЕдиницаХраненияОстатков;
			НовТовар.Коэффициент = 1;
			НовТовар.Качество = Справочники.Качество.Новый;
			НовТовар.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
			НовТовар.Вес = стр.номенклатура.ЕдиницаХраненияОстатков.Вес;	
		КонецЦикла;
		
		Форма=НовыйДок.ПолучитьФорму("ФормаДокумента");
		Форма.Открыть();
		
		НовыйДок = Документы.ПеремещениеТоваров.СоздатьДокумент();
		НовыйДок.Дата = ТекущаяДата()+2;
		НовыйДок.УстановитьНовыйНомер();
		
		НовыйДок.ВидОперации                  = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
		НовыйДок.ОтражатьВУправленческомУчете = Истина;
		НовыйДок.ОтражатьВБухгалтерскомУчете  = Истина;
		НовыйДок.ОтражатьВНалоговомУчете  = Истина;
		
		НовыйДок.Подразделение    = ?(ЗначениеЗаполнено(ТЧПеремещение[0].СкладВозврата.Подразделение),ТЧПеремещение[0].СкладВозврата.Подразделение,Справочники.Подразделения.НайтиПоКоду("00005"));
		НовыйДок.Ответственный    = глТекущийПользователь;
		НовыйДок.Организация      = Справочники.Организации.НайтиПоКоду("00001");
		НовыйДок.СкладОтправитель = Справочники.Склады.НайтиПоКоду("00294");
		НовыйДок.СкладПолучатель  = ТЧПеремещение[0].СкладВозврата;
		//НовыйДок.ВнутреннийЗаказ  = ОбъектВЗ.Ссылка;
		
		Для каждого стр из ТЧПеремещение Цикл
			НовТовар = НовыйДок.Товары.Добавить();
			НовТовар.Номенклатура = стр.номенклатура;
			НовТовар.Количество = стр.Количество;
			НовТовар.Склад = стр.СкладВозврата;
			НовТовар.ЕдиницаИзмерения = стр.номенклатура.ЕдиницаХраненияОстатков;
			НовТовар.Коэффициент = 1;
			НовТовар.Качество = Справочники.Качество.Новый;
			НовТовар.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
			НовТовар.Вес = стр.номенклатура.ЕдиницаХраненияОстатков.Вес;	
		КонецЦикла;
		
		
		Форма=НовыйДок.ПолучитьФорму("ФормаДокумента");
		Форма.Открыть();
	КонецЕсли;          //Плотников
	
	
	
	Если КолДок=0 тогда
		Предупреждение("Создания Возвратов - не требуется!",30);
	КонецЕсли;
КонецПроцедуры

Функция СоздатьВозврат(Заказ)
	// Заполним реквизиты из стандартного набора по документу основанию.
	ДокВозврат=Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
	ДокВозврат.Дата=ТекущаяДата();
	ДокВозврат.ВидПоступления=Перечисления.ВидыПоступленияТоваров.НаСклад;
	ДокВозврат.Ответственный=глТекущийПользователь;
	Если Контрагент = Заказ.Контрагент Тогда 
		ЗаполнитьШапкуДокументаПоОснованию(ДокВозврат, Заказ);
	Иначе
		ЗаполнитьШапкуДокументаПоОснованию(ДокВозврат, Ссылка);
		Если ЗначениеЗаполнено(Контрагент.ОсновнойДоговорРеализации) Тогда 
			ДокВозврат.ДоговорКонтрагента = Контрагент.ОсновнойДоговорРеализации;
		КонецЕсли;
	КонецЕсли;
	ДокВозврат.Организация = Заказ.Организация;
	ДокВозврат.ЗаявкаОснование = ссылка;
	ДокВозврат.СкладОрдер  = Заказ.Склад;
	ДокВозврат.МаркаАвтомобиля = МаркаАвтомобиля;
	Доквозврат.ГосНомерАвтомобиля = ГосНомерАвтомобиля;
	ДокВозврат.Водитель = водитель;
	
	
	// Тип выбираемого значения зависит от договора.
	//Если ДокВозврат.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
	//	ИЛИ ДокВозврат.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	//	ИЛИ ДокВозврат.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
	//	
	ДокВозврат.Сделка = Заказ; // заполняем сделку заказом поставщику
	//	
	//	Если Заказ.Проведен
	//	//	ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") 
	//	Тогда
	//	//	// Заполним табличные части по заказу покупателя.
	//		ДокВозврат.ЗаполнитьТоварыПоОснованию(Заказ);
	//		ДокВозврат.ЗаполнитьВозвратнуюТаруПоОснованию(Заказ);
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	Возврат ДокВозврат;
КонецФункции

Процедура ТоварыРеализацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	//выбор между реализацией и отчетом о розничных продажах
	СписокТипов = Новый СписокЗначений; 	
	СписокТипов.Добавить(Метаданные.Документы["РеализацияТоваровУслуг"].Имя,    Метаданные.Документы["РеализацияТоваровУслуг"].Представление());
	СписокТипов.Добавить(Метаданные.Документы["ОтчетОРозничныхПродажах"].Имя,	Метаданные.Документы["ОтчетОРозничныхПродажах"].Представление());
	//Миронычев
	СписокТипов.Добавить(Метаданные.Документы["ПеремещениеТоваров"].Имя,	    Метаданные.Документы["ПеремещениеТоваров"].Представление());
	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокТипов, Элемент);
	
	Если ВыбранныйЭлемент.Значение = "РеализацияТоваровУслуг" Тогда 
		ФормаВыбора = Документы.РеализацияТоваровУслуг.ПолучитьФормуВыбора(,Элемент,);
		//Миронычев
	ИначеЕсли ВыбранныйЭлемент.Значение = "ПеремещениеТоваров" Тогда 
		ФормаВыбора = Документы.ПеремещениеТоваров.ПолучитьФормуВыбора(,Элемент,);
	Иначе 
		ФормаВыбора = Документы.ОтчетОРозничныхПродажах.ПолучитьФормуВыбора(,Элемент,);
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(Контрагент) Тогда
	//	ФормаВыбора.Отбор.контрагент.Значение      = Контрагент;
	//	ФормаВыбора.Отбор.контрагент.Использование = Истина;
	//КонецЕсли;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура КонтрагентПриИзменении(Элемент)
	ЭлементыФормы.тКатегорияКонтрагента.Заголовок =Контрагент.КатегорияПокупателя;
КонецПроцедуры

Процедура ТоварыПриПолученииДанных(Элемент, ОформленияСтрок)
	к=1;
	ТекДата=НачалоДня(ТекущаяДата());
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		Данныестроки = ОформлениеСтроки.Данныестроки;
		Если ЗначениеЗаполнено(Данныестроки.Реализация) Тогда 
			ОформлениеСтроки.Ячейки.ДнейСДатыОтгрузки.Значение = Окр((ТекДата-НачалоДня(Данныестроки.Реализация.Дата))/60/60/24);
		КонецЕсли;
		ОформлениеСтроки.Ячейки.Код.ОтображатьТекст = истина;
		ОформлениеСтроки.Ячейки.Код.Текст = Данныестроки.Номенклатура.Код;
		Если ДанныеСтроки.Статус = Перечисления.СтатусыСтрокЗаказа.Согласован Тогда
			ОформлениеСтроки.ЦветФона = WebЦвета.СветлоЖелтый;
		ИначеЕсли ДанныеСтроки.Статус = Перечисления.СтатусыСтрокЗаказа.Подтвержден Тогда
			ОформлениеСтроки.ЦветФона = WebЦвета.Роса;
		ИначеЕсли ДанныеСтроки.Статус = Перечисления.СтатусыСтрокЗаказа.Отменен Тогда
			ОформлениеСтроки.ЦветФона = WebЦвета.СветлоРозовый;
		конецЕсли;	
	КонецЦикла;
КонецПроцедуры

Процедура ДействияФормыПерейтиСтруктураПодчиненности(Кнопка)
	// Вставить содержимое обработчика.
	Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") 
		И НЕ ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "СтаршийМенеджерПодразделения") Тогда  //+++ 09.07.2014
		СообщитьОбОшибке("У Вас недостаточно прав для открытия структуры подчиненности!");
		Возврат;
	КонецЕсли;
	
	//	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);	
	
	реализация = неопределено;
	
	если Товары.Количество()>0 тогда
		реализация = Товары[0].реализация;
		Для каждого стр1 из Товары цикл
			если реализация <> стр1.реализация тогда
				реализация = неопределено;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(реализация) тогда
		ПоказатьСтруктуруПодчиненностиДокумента(реализация);	
	Иначе
		ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);	
	КонецЕсли;
	
	
КонецПроцедуры


Процедура УправлениеВидимостью()
	ЭлементыФормы.ДействияФормы.Кнопки.ДействиеСформироватьВозвраты.Доступность = Истина;
	//Если ПричинаВозврата = Перечисления.ПричиныВозвратаТовара.ОтказПокупателя Тогда
	//табДок = Товары.Выгрузить();
	//ТабДок.Свернуть("реализация");
	//Для каждого стр из Табдок Цикл
	//	Если НачалоДНя(ТекущаяДата())-НачалоДня(Стр.Реализация.Дата)> 60*60*14 Тогда
	//		ЭлементыФормы.ДействияФормы.Кнопки.ДействиеСформироватьВозвраты.Доступность = Ложь;
	//    конецЕсли;
	//КонецЦикла;	
	//конецЕсли;
	//Элементыформы.Товары.Доступность = не Подготовлен;
	//Элементыформы.Контрагент.Доступность = Не Подготовлен;
	//ЭлементыФормы.ПричинаВозврата.Доступность = Не Подготовлен;
	//ЭлементыФормы.Подготовлен.Доступность = Не Подготовлен;
	
	ЗаказПоставщику = НайтиподчиненныйЗаказ();
	Если Заказпоставщику = Неопределено Тогда
		Элементыформы.ГиперссылкаЗаказПоставщику.Заголовок = "Ввести заказ поставщику";
	иначе
		Элементыформы.ГиперссылкаЗаказПоставщику.Заголовок = Строка(ЗаказПоставщику);
	конецЕсли;
	Если причинавозврата =перечисления.ПричиныВозвратаТовара.ОбратнаяПродажа Тогда
		Элементыформы.ГиперссылкаЗаказПоставщику.Доступность =  Подготовлен;
	Иначе
		Элементыформы.ГиперссылкаЗаказПоставщику.Видимость = Ложь;
	конецесли;
	Если ЗначениеЗаполнено(Контрагент.КонтрагентДляРезерваИМ) тогда
		ЭлементыФормы.Товары.Колонки.НомерЗаказаИМ.Видимость 		  = истина;
		ЭлементыФормы.Товары.Колонки.НомерЗаказаТК.Видимость 		  = истина;
		//ЭлементыФормы.Товары.Колонки.Повреждение.Видимость 			  = истина;
		ЭлементыФормы.Товары.Колонки.Отправитель.Видимость 			  = истина;
		ЭлементыФормы.Товары.Колонки.ПретензияУдовлетворена.Видимость = истина;
	КонецЕсли;
	Редактирующие = Новый СписокЗначений;
	Редактирующие.Добавить(Справочники.Пользователи.НайтиПоКоду("Фролов"));
	Редактирующие.Добавить(Справочники.Пользователи.НайтиПоКоду("Гаричев"));
	Редактирующие.Добавить(Справочники.Пользователи.НайтиПоКоду("Цверава В.У."));
	Редактирующие.Добавить(Справочники.Пользователи.НайтиПоКоду("Ловыгина Е.И."));
	Редактирующие.Добавить(Справочники.Пользователи.НайтиПоКоду("Невежина И.Н."));
	Редактирующие.Добавить(Справочники.Пользователи.НайтиПоКоду("Алексеева А.Е."));
	Редактирующие.Добавить(Справочники.Пользователи.НайтиПоКоду("Сибриков М.А."));
	Если Редактирующие.НайтиПоЗначению(ПараметрыСеанса.ТекущийПользователь) = Неопределено Тогда
		ЭлементыФормы.ВРаботе1.Доступность = Ложь;
		Элементыформы.ВРаботе2.Доступность = ложь;
	иначе
		ЭлементыФормы.ВРаботе1.Доступность = Истина;
		Элементыформы.ВРаботе2.Доступность = Истина;
	конецЕсли;
	
	Если ПричинаВозврата = Перечисления.ПричиныВозвратаТовара.ВозвратСМаршрута Тогда
		ЭлементыФормы.ИзРейса.Видимость = Истина;
		ЭлементыФормы.НадписьПричиныВозвратаТоваровИзРейса.Видимость = Истина;
	Иначе
		ЭлементыФормы.ИзРейса.Видимость = Ложь;
		ЭлементыФормы.НадписьПричиныВозвратаТоваровИзРейса.Видимость = Ложь;
	КонецЕсли;
	
конецпроцедуры

Процедура ПодготовленПриИзменении(Элемент)
	УправлениеВидимостью();
	Если Подготовлен Тогда
		Записать();
	конецесли;	
КонецПроцедуры

Процедура ТоварыРеализацияПриИзменении(Элемент)
	УправлениеВидимостью();
	Если Элемент.Значение <> неопределено Тогда 
		ПроверитьНоменклатуруВРеализации(ЭлементыФормы.Товары.ТекущаяСтрока);	
	КонецЕсли;
КонецПроцедуры

//Процедура ПричинаВозвратаНачалоВыбора(Элемент, СтандартнаяОбработка)
//	//стандартнаяОбработка = Ложь;
//	Список = новый СписокЗначений;
//	
//	Если  ТипЗнч(ДокументОснование) <> Тип("ДокументСсылка.ЗаявкаНаБрак") Тогда
//		Список.Добавить(Перечисления.ПричиныВозвратаТовара.ОтказПокупателя);
//		Список.Добавить(Перечисления.ПричиныВозвратаТовара.ОтказКлиентаНеактуально);
//		Список.Добавить(Перечисления.ПричиныВозвратаТовара.ОкончаниеСрокаГодности);
//		Список.Добавить(Перечисления.ПричиныВозвратаТовара.Недогруз);
//		Список.Добавить(Перечисления.ПричиныВозвратаТовара.ИзлишекСклад);
//		Список.Добавить(Перечисления.ПричиныВозвратаТовара.излишекПоВинеОператора);
//		Список.Добавить(Перечисления.ПричиныВозвратаТовара.излишекПоВинеВодителя);
//		Список.Добавить(Перечисления.ПричиныВозвратаТовара.ОшибкаМенеджера);
//		Список.Добавить(Перечисления.ПричиныВозвратаТовара.ОбратнаяПродажа);
//		Список.Добавить(Перечисления.ПричиныВозвратаТовара.Пересорт);
//		Список.Добавить(Перечисления.ПричиныВозвратаТовара.ПересортВнутритарный);
//		Список.Добавить(Перечисления.ПричиныВозвратаТовара.НеУспелиВыгрузить);
//		Список.Добавить(Перечисления.ПричиныВозвратаТовара.БракВыгрузка);
//		Список.Добавить(Перечисления.ПричиныВозвратаТовара.ВозвратСМаршрута);

//		//Список.Добавить(Перечисления.ПричиныВозвратаТовара.БракАКБ);
//	иначе
//		Список.Добавить(Перечисления.ПричиныВозвратаТовара.Брак);
//	конецЕсли;	
//	ВыбранноеЗначение = ВыбратьИзСписка(Список,ЭлементыФормы.ПричинаВозврата);
//	Если  ВыбранноеЗначение <> Неопределено Тогда
//		Элемент.Значение = ВыбранноеЗначение.Значение;
//	Конецесли;   
//КонецПроцедуры

//Процедура ПричинаВозвратаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
//	
//	//стандартнаяОбработка = Ложь;
//	
//	Список = ПричинаВозвратаСформироватьСписокВыбора();
//	
//	ВыбранноеЗначение = ВыбратьИзСписка(Список,ЭлементыФормы.ПричинаВозврата);
//	Если  ВыбранноеЗначение <> Неопределено Тогда
//		Элемент.Значение = ВыбранноеЗначение.Значение;
//	Конецесли;   
//КонецПроцедуры

//Процедура ПричинаВозвратаПриИзменении(Элемент)
//	Если (ПричинаВозврата = Перечисления.ПричиныВозвратаТовара.Брак или ПричинаВозврата = Перечисления.ПричиныВозвратаТовара.БракАКБ )  и  ТипЗнч(ДокументОснование)<> Тип("ДокументСсылка.ЗаявкаНаБрак")   Тогда
//		причинаВозврата ="";
//		Сообщить("Заявку на возврат с причиной ""Брак заводской"" нужно вводить на основании заявки на брак ")
//	конецЕсли;		
//	УправлениеВидимостью();
//КонецПроцедуры

Процедура ГиперссылкаЗаказПоставщикуНажатие(Элемент)
	ЗаказПоставщику = НайтиподчиненныйЗаказ();
	Если  Заказпоставщику = Неопределено Тогда
		ОбъектЗаказПоставшику = Документы.ЗаказПоставщику.ПолучитьФормуНовогоДокумента(, ЭтаФорма, Строка(ЭтотОбъект));
		
		ОбъектЗаказПоставшику.ЭтотОбъект.Заполнить(ЭтотОбъект.Ссылка); 
		
		ОбъектЗаказПоставшику.Открыть(); 
	иначе
		ЗаказПоставщику.ПолучитьФорму(, ЭтаФорма , Строка(ЭтотОбъект)).Открыть();
	конецесли;	
КонецПроцедуры

Функция НайтиПодчиненныйЗаказ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Основание = &Основание";
	
	Запрос.УстановитьПараметр("Основание", Этотобъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ссылка;
	иначе
		Возврат неопределено;
	КонецЕсли;
конецФункции	

Процедура ОсновныеДействияФормыСогласовать(Кнопка)
	Записать();
	
	//+ 05.02.2018 Лукьяненков
	СогласованиеОбязательно = ЛОЖЬ;
	//- 05.02.2018 Лукьяненков
	ЭтоОператор = ЭтоОператор(глТекущийПользователь);
	пользователь = ?(ЭтоОператор,ЭтотОбъект.Контрагент.ОсновнойМенеджерКонтрагента,глТекущийПользователь);
	
	//Миронычев
	Если ПричинаВозврата = Перечисления.ПричиныВозвратаТовара.Пересорт тогда
		Если Товары.Итог("Количество")> 0 Тогда
			Сообщить("Введите Номенклатуру (либо проверьте количество) по факту полученную клиентом с Минусовым количеством!");
			Возврат;
		ИначеЕсли Товары.Итог("Количество")< 0 Тогда
			Сообщить("Введите Номенклатуру (либо проверьте количество) по реализации с Плюсовым количеством!");
			Возврат;
        КонецЕсли;
	КонецЕсли;
	Если ПричинаВозврата = Перечисления.ПричиныВозвратаТовара.Пересорт или ПричинаВозврата = Перечисления.ПричиныВозвратаТовара.ПоискНедогруза тогда
		СогласованиеОбязательно = Истина;
	КонецЕсли;
	
	// Сакулина
	Если Проведен = Ложь Тогда
		Предупреждение("Нельзя отправлять на согласование непроведенный документ! Проведите документ!", 30);
		Возврат;
	КонецЕсли;
	//Сакулина
	
	Если Согласованно Тогда
		Предупреждение("Заявка уже согласована!", 30);
		Возврат;
	КонецЕсли;	
	
	//Режим = РежимДиалогаВопрос.ДаНет;
	//Ответ = Вопрос("Отправить запрос на согласование?", Режим, 0);
	//Если Ответ = КодВозвратаДиалога.Нет Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Сакулина
	ТзРеализаций = Товары.Выгрузить(,"Реализация");
	ТЗРеализаций.Свернуть("Реализация");
	Для каждого СТрРеализаций из ТзРеализаций Цикл
		ДнейПрошло = Окр((НачалоДня(Дата)- НачалоДня(СТрРеализаций.Реализация.Дата))/60/60/24); 
		ДопОписание = Символы.ПС + "С момента реализации № " + СТрРеализаций.Реализация.Номер + " от " 
		+ Формат(СТрРеализаций.Реализация.Дата,"ДФ=dd.MM.yyyy") +"  прошло " + ДнейПрошло + " дней.";
	КонецЦикла;
	// Сакулина
	
	//Если глТекущийПользователь.направлениеПродаж = Справочники.НаправленияПродаж.ПустаяСсылка()
	Если пользователь.направлениеПродаж = Справочники.НаправленияПродаж.ПустаяСсылка()
		и причинаВозврата=перечисления.ПричиныВозвратаТовара.ВозвратСМаршрута Тогда /// ориентируемся по менеджеру договора
		
		Для Каждого стр из Товары Цикл
			стр.Статус = Перечисления.СтатусыСтрокЗаказа.Подтвержден;
		КонецЦикла;
		Согласованно = Истина;
		
		Предупреждение("Заявка по причине ""ВозвратСМаршрута"" не требует согласования!", 30);
	 	возврат;
		
		///Качалову без согласования - сразу подтверждён
	ИначеЕсли РольДоступна("МенеджерПоПродажамИМ") И не СогласованиеОбязательно тогда //+++ 19.07.2016 - новая роль
		// не согласовываем кроме дисков
		нетДисков = Истина;
		
		Для Каждого стр из Товары Цикл
			Если стр.Номенклатура.ВидТовара <> Перечисления.ВидыТоваров.Диски Тогда
				стр.Статус = Перечисления.СтатусыСтрокЗаказа.Подтвержден;
			иначе
				нетДисков = Ложь;
			конецЕсли;
		КонецЦикла;
		Если нетДисков Тогда
			Согласованно = Истина;
			Возврат;
		конецЕсли;
			
	Иначе 
		//Руководитель = глТекущийпользователь.НаправлениеПродаж.руководитель;
		Руководитель = пользователь.НаправлениеПродаж.руководитель;
	конецЕсли;	 
	
	
	//Общая таблица для всех условий по Товарным группам
	ТабВид = Товары.Выгрузить();
	ТабВид.Колонки.Добавить("ВидТовара");
	ЕстьАКБ   = ЛОЖЬ;
	ЕстьДиски = ЛОЖЬ;
	Для каждого стр из ТабВид Цикл
		стр.ВидТовара = стр.номенклатура.видТовара;
		Если стр.ВидТовара = перечисления.ВидыТоваров.АКБ тогда
			ЕстьАКБ   = Истина; //04.10.2017 - по задаче № 33736 - все согласования по АКБ отдельно!
		ИначеЕсли стр.ВидТовара = перечисления.ВидыТоваров.Диски тогда
			ЕстьДиски = Истина; 
		КонецЕсли;	
	конецЦикла;
	ТабВид.Свернуть("ВидТовара", "Количество, Сумма");

	//Миронычев
	Если  причинаВозврата = Перечисления.ПричиныВозвратаТовара.ПоискНедогруза 
		   или причинаВозврата = Перечисления.ПричиныВозвратаТовара.Пересорт Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ	ЗадачиПользователя.Объект
			|ИЗ Задача.ЗадачиПользователя КАК ЗадачиПользователя
			|ГДЕ ЗадачиПользователя.Объект.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
		Результат = Запрос.Выполнить().Выгрузить();

		Если Результат.Количество() = 0 Тогда  //нет ни одной задачи
			задача = задачи.ЗадачиПользователя.СоздатьЗадачу();
			Задача.Исполнитель = Справочники.Пользователи.НайтиПоКоду("Фролов");
			задача.Товары.Очистить();
			Для Каждого Стр Из Товары Цикл
				стр.Статус = Перечисления.СтатусыСтрокЗаказа.НаСогласовании;
				ст = Задача.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(ст,стр);
				ст.Цена = Стр.ЦенаРеализации;
				ст.НомерСтрокиОснования = стр.НомерСтроки;
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	РеализацияТоваровУслугТовары.Склад,
				|	РеализацияТоваровУслугТоварыАдресноеХранение.АдресХранения
				|ИЗ
				|	Документ."+ ?(ТипЗнч(Стр.Реализация) = Тип("ДокументСсылка.ПеремещениеТоваров"), "ПеремещениеТоваров", "РеализацияТоваровУслуг" ) + ".Товары КАК РеализацияТоваровУслугТовары
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.ТоварыАдресноеХранение КАК РеализацияТоваровУслугТоварыАдресноеХранение
				|		ПО РеализацияТоваровУслугТовары.Ссылка = РеализацияТоваровУслугТоварыАдресноеХранение.Ссылка
				|			И РеализацияТоваровУслугТовары.Номенклатура = РеализацияТоваровУслугТоварыАдресноеХранение.Номенклатура
				|			И РеализацияТоваровУслугТовары.Склад = РеализацияТоваровУслугТоварыАдресноеХранение.Склад
				|ГДЕ
				|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
				|	И РеализацияТоваровУслугТовары.Номенклатура = &Номенклатура" ;
				
				Запрос.УстановитьПараметр("Номенклатура", Стр.Номенклатура);
				Запрос.УстановитьПараметр("Ссылка", Стр.Реализация);
				
				Результат = Запрос.Выполнить().Выгрузить();
				Если Результат.Количество() > 0 тогда
					Ст.Склад = Результат[0].Склад;
					Ст.АдресХранения = Результат[0].АдресХранения;
				КонецЕсли;
			конецЦикла;		  
			
			задача.НаСогласование = ИСТИНА;
			задача.Наименование = ?(причинаВозврата = Перечисления.ПричиныВозвратаТовара.Пересорт, "Пересорт","Недогруз")+" товара клиенту: "+строка(Контрагент.НаименованиеПолное); 
			задача.Описание = "Поиск "+?(причинаВозврата = Перечисления.ПричиныВозвратаТовара.Пересорт, "пересорченого","не отгруженного")+" товара клиенту: "+строка(Контрагент.НаименованиеПолное)+ " на сумму "+Товары.Итог("сумма") + ". Менеджер: "+строка(товары[0].Реализация.ДоговорКонтрагента.ответственноеЛицо);
			Задача.Описание = задача.Описание + ДопОписание; // Сакулина
			задача.Инициатор = глТекущийПользователь;
			задача.Объект   	 = ссылка;
			задача.Дата 		    = ТекущаяДата();
			задача.СрокИсполнения = КонецДня( ТекущаяДата() ); 	
			задача.Оповещение     = истина;
			задача.СрокОповещения = ТекущаяДата(); 
			Если Задача.Товары.Количество()>0 Тогда
				попытка
					задача.Записать();
					//15.09.17 Смрнов, сами себе сразу разу согласуем
					Если задача.Инициатор = Задача.Исполнитель тогда 
						для каждого стр1 из задача.Товары цикл
							Если (не ЗначениеЗаполнено(стр1.Статус)) или (стр1.статус = Перечисления.СтатусыСтрокЗаказа.НаСогласовании) Тогда
								стр1.Статус = перечисления.СтатусыСтрокЗаказа.Подтвержден;
							конецЕсли;
						КонецЦикла;	
						
						задача.ИзменитьНазваниеЗадачиИОписаниеПриСогласовании(1);
						задача.ИзменитьСтатусыВЗаявке();
						
					КонецЕсли;
					
					Сообщить(" + Сформирована ""Задача на согласование"" для сотрудника: "+строка(задача.Исполнитель), СтатусСообщения.Информация );
					Если ЗначениенеЗаполнено(ДатаОтправкиНаСогласование) тогда
						ДатаОтправкиНаСогласование = ТекущаяДата();
						Записать(РежимЗАписиДокумента.Запись);
						ЭтаФорма.Обновить();
					КонецЕсли;
	

				исключение
					Сообщить(" - Не удалось сформировать электронную Задачу на согласование для сотрудника: "+строка(задача.Исполнитель), СтатусСообщения.Внимание );	
				КонецПопытки;
			конецЕсли;
		Иначе	
			Сообщить("Нельзя формировать повторную задачу по поиску недогруза!");
		КонецЕсли;	

	ИначеЕсли причинаВозврата = перечисления.ПричиныВозвратаТовара.Брак 
		ИЛИ (ЕстьАКБ И причинаВозврата <> Перечисления.ПричиныВозвратаТовара.ОбратнаяПродажа) Тогда //04.10.2017 --- согласования по АКБ, но не для Обратной продажи !
		
		//04.10.2017 - брак согласовывается ТОЛЬКО по дискам!
		Если не ( ЕстьДиски  
		        или (ЕстьАКБ И причинаВозврата <> перечисления.ПричиныВозвратаТовара.Брак)
			    ) Тогда 
			Согласованно = Истина;
			Возврат;
		конецЕсли;
		
		//согласуем только диски	
		Для каждого стрТ из ТабВид Цикл
			Если стрТ.ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
				Если СоздаватьЗадачу(ссылка,Справочники.Пользователи.НайтиПоКоду("Малышев Егор"),Истина) тогда
					задача = задачи.ЗадачиПользователя.СоздатьЗадачу();
					Задача.Исполнитель = Справочники.Пользователи.НайтиПоКоду("Малышев Егор");
					задача.Товары.Очистить();
					Для Каждого Стр Из Товары Цикл
						если Стр.Номенклатура.ВидТовара = стрТ.Видтовара Тогда
							стр.Статус = Перечисления.СтатусыСтрокЗаказа.НаСогласовании;
							ст = Задача.Товары.Добавить();
							ЗаполнитьЗначенияСвойств(ст,стр);
							ст.Цена = Стр.ЦенаРеализации;
							ст.НомерСтрокиОснования = стр.НомерСтроки;
						конецЕсли;
					конецЦикла;
						
					Заявка = Неопределено;
					Если ТипЗнч(Документоснование) = Тип("ДокументСсылка.ЗаявкаНаБрак") Тогда
						Заявка = ДокументОснование;
					иначе
						//поищем Заявки на брак, где эта заявка является основанием
						
						Запрос = Новый Запрос;
						Запрос.Текст = 
						"ВЫБРАТЬ
						|	ЗаявкаНаБрак.Ссылка
						|ИЗ
						|	Документ.ЗаявкаНаБрак КАК ЗаявкаНаБрак
						|ГДЕ
						|	ЗаявкаНаБрак.ДокументОснование = &ДокументОснование";
						
						Запрос.УстановитьПараметр("ДокументОснование", ссылка);
						Результат = Запрос.Выполнить();
						
						Если не Результат.Пустой() тогда
							Выборка = Результат.Выбрать();
							Выборка.Следующий();
							Заявка = Выборка.ссылка;
						конецЕсли;
					конецЕсли;
					ТабДисков = Новый ТаблицаЗначений;
					ТабДисков.Колонки.Добавить("Номенклатура");
					ТабДисков.Колонки.Добавить("Ставленный");
					ТабДисков.Колонки.Добавить("Мехповреждения");

					Если Заявка <> Неопределено Тогда
						//проверим на ставленные и мех. повреждения.
						Для каждого стр из Заявка.Расшифровка Цикл
							Если Стр.Номенклатура.ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
								Если Стр.СостояниеТовара = Перечисления.БракВидыСостоянийДиска.Ставленный или стр.ВидДефектаДляУценки = Справочники.ВидыДефектовДляУценки.НайтиПоКоду("0008")Тогда
									ст =ТабДисков.Добавить();
									ст.номенклатура = стр.Номенклатура;
									ст.Ставленный = Стр.СостояниеТовара;
									ст.Мехповреждения = стр.ВидДефектаДляУценки;
								конецЕсли;	
							конецЕсли;
						конецЦикла;
					конецЕсли;
					задача.НаСогласование = ИСТИНА;
					задача.Наименование = "Согласуйте заявку на возврат для клиента: "+строка(Контрагент.НаименованиеПолное)+?(ТабДисков.Количество()>0,"ВНИМАНИЕ!!!",""); 
					задача.Описание = "Согласуйте заявку на возврат для клиента: "+строка(Контрагент.НаименованиеПолное)+" на сумму "+Товары.Итог("сумма")+ " по причине "+ПричинаВозврата;
					Для каждого стр из ТабДисков Цикл
						задача.Описание = задача.Описание + " Номенклатура "+ стр.номенклатура+ " код: "+ стр.номенклатура.код+" состояние: "+стр.Ставленный+" Дефект: "+стр.Мехповреждения; 
					конецЦикла;
					Задача.Описание = задача.Описание + ДопОписание; // Сакулина
					задача.Инициатор   = глТекущийПользователь;
					задача.Объект   	 = ссылка;
					задача.Дата 		    = ТекущаяДата();
					задача.СрокИсполнения = КонецДня( ТекущаяДата() ); 	
					задача.Оповещение     = истина;
					задача.СрокОповещения = ТекущаяДата(); 
					попытка
						задача.Записать();
						Сообщить(" + Сформирована ""Задача на согласование"" для сотрудника: "+строка(задача.Исполнитель), СтатусСообщения.Информация );	
						//15.09.17 Смрнов, сами себе сразу разу согласуем
						Если задача.Инициатор = Задача.Исполнитель тогда 
							для каждого стр1 из задача.Товары цикл
								Если (не ЗначениеЗаполнено(стр1.Статус)) или (стр1.статус = Перечисления.СтатусыСтрокЗаказа.НаСогласовании) Тогда
									стр1.Статус = перечисления.СтатусыСтрокЗаказа.Подтвержден;
								конецЕсли;
							КонецЦикла;	
							
							задача.ИзменитьНазваниеЗадачиИОписаниеПриСогласовании(1);
							задача.ИзменитьСтатусыВЗаявке();
							
						КонецЕсли;
						
					исключение
						Сообщить(" - Не удалось сформировать электронную Задачу на согласование для сотрудника: "+строка(задача.Исполнитель), СтатусСообщения.Внимание );	
					КонецПопытки;
				КонецЕсли;
			КонецЕсли; 
		конецЦикла;
		
		Для каждого стрТ из ТабВид Цикл
			если стрТ.ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
				Исполнитель = Справочники.Пользователи.НайтиПоКоду("Ульянов С. "); //менеджер по браку дисков
			Иначеесли стрТ.ВидТовара = Перечисления.ВидыТоваров.Шины Тогда
				Исполнитель = Справочники.Пользователи.НайтиПоКоду("Левченко Ф.С.");//менеджер по браку шин - уже должен согласовать Заявку на брак
			Иначеесли стрТ.ВидТовара = Перечисления.ВидыТоваров.АКБ Тогда
				Исполнитель = справочники.НоменклатурныеГруппы.НайтиПоКоду("00060").Ответственный; //   АКБ,	"Сухачева А.В.";
			Иначеесли стрТ.ВидТовара = Перечисления.ВидыТоваров.Аксессуары Тогда
				Исполнитель = справочники.НоменклатурныеГруппы.НайтиПоКоду("00073").Ответственный; //Аксессуары, "Голубева В.С."  - уже должен согласовать Заявку на брак
			конецЕсли; 
			
			Если СоздаватьЗадачу(ссылка, Исполнитель, Истина) тогда // уже есть задача по этому документу!
				задача = задачи.ЗадачиПользователя.СоздатьЗадачу();
				Задача.Исполнитель = Исполнитель; 
				задача.Товары.Очистить();
				Для Каждого Стр Из Товары Цикл
					если Стр.Номенклатура.ВидТовара = стрТ.Видтовара Тогда
						стр.Статус = Перечисления.СтатусыСтрокЗаказа.НаСогласовании; //желтый
						ст = Задача.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(ст,стр);
						ст.НомерСтрокиОснования = стр.НомерСтроки;
						ст.Цена 	  = Стр.ЦенаРеализации;
						ст.Количество = стр.Количество;
						ст.Сумма	  = стр.Сумма;		//04.10.2017
					конецЕсли;
				конецЦикла;
			
			задача.НаСогласование = ИСТИНА;
			задача.Наименование = "Согласуйте заявку на возврат для клиента: "+строка(Контрагент.НаименованиеПолное) ; 
			
			задача.Описание = "Согласуйте заявку на возврат для клиента: "+строка(Контрагент.НаименованиеПолное)+"
							  |по причине: "+ПричинаВозврата +"
							  |на сумму: "+задача.Товары.Итог("сумма")+ "р. 
							  |" + ". Менеджер: "+строка(товары[0].Реализация.ДоговорКонтрагента.ответственноеЛицо);
			Задача.Описание = задача.Описание + ДопОписание; // Сакулина
			
			задача.Инициатор      = глТекущийПользователь;
			задача.Объект   	  = ссылка;
			задача.Дата 		  = ТекущаяДата();
			задача.СрокИсполнения = КонецДня( ТекущаяДата() ); 	
			задача.Оповещение     = истина;
			задача.СрокОповещения = ТекущаяДата(); 
			
			попытка
				задача.Записать();
				Сообщить(" + Сформирована ""Задача на согласование"" для сотрудника: "+строка(задача.Исполнитель)
				                   +" (По виду товара: "+строка(стрТ.ВидТовара)+")", СтатусСообщения.Информация );	
				
				//15.09.17 Смирнов, сами себе сразу согласуют
				Если задача.Инициатор = Задача.Исполнитель тогда 
					для каждого стр1 из задача.Товары цикл
						Если (не ЗначениеЗаполнено(стр1.Статус)) или (стр1.статус = Перечисления.СтатусыСтрокЗаказа.НаСогласовании) Тогда
							стр1.Статус = перечисления.СтатусыСтрокЗаказа.Подтвержден;
						конецЕсли;
					КонецЦикла;	
					
					задача.ИзменитьНазваниеЗадачиИОписаниеПриСогласовании(1);
					задача.ИзменитьСтатусыВЗаявке();
					
				КонецЕсли;
				
			исключение
				Сообщить(" - Не удалось сформировать ""Задачу на согласование"" для сотрудника: "+строка(задача.Исполнитель)+"
					     |"+ОписаниеОшибки(), СтатусСообщения.Внимание );	
			КонецПопытки;
			КонецЕсли;
		конецЦикла;
		возврат;
		
				
	ИначеЕсли  причинаВозврата <> Перечисления.ПричиныВозвратаТовара.ОбратнаяПродажа Тогда
		//диски отдельно Егору  если не из подразделений
		//Если не глТекущийпользователь.ОсновноеПодразделение.ОбособленноеПодразделение  тогда
		Если не пользователь.ОсновноеПодразделение.ОбособленноеПодразделение  тогда
			Если не СоздаватьЗадачу(ссылка,Справочники.Пользователи.НайтиПоКоду("Малышев Егор"),Истина) тогда
			иначе
				задача = задачи.ЗадачиПользователя.СоздатьЗадачу();
				
				Задача.Исполнитель = Справочники.Пользователи.НайтиПоКоду("Малышев Егор");
				задача.Товары.Очистить();
				Для Каждого Стр Из Товары Цикл
					Если стр.Номенклатура.ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
						стр.Статус = Перечисления.СтатусыСтрокЗаказа.НаСогласовании;
						ст = Задача.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(ст,стр);
						ст.Цена = Стр.ЦенаРеализации;
						ст.НомерСтрокиОснования = стр.НомерСтроки;
					конецЕсли;
				конецЦикла;		  
				
				Записать();
				
				задача.НаСогласование = ИСТИНА;
				задача.Наименование = "Согласуйте заявку на возврат для клиента: "+строка(Контрагент.НаименованиеПолное); 
				задача.Описание = "Согласуйте заявку на возврат для клиента: "+строка(Контрагент.НаименованиеПолное)+ " на сумму "+Товары.Итог("сумма")+" по причине "+ПричинаВозврата + ". Менеджер: "+строка(товары[0].Реализация.ДоговорКонтрагента.ответственноеЛицо);
				Задача.Описание = задача.Описание + ДопОписание; // Сакулина
				
				задача.Инициатор   = глТекущийПользователь;
				задача.Объект   	 = ссылка;
				задача.Дата 		    = ТекущаяДата();
				задача.СрокИсполнения = КонецДня( ТекущаяДата() ); 	
				задача.Оповещение     = истина;
				задача.СрокОповещения = ТекущаяДата(); 
				Если Задача.Товары.Количество()>0 Тогда
					попытка
						задача.Записать();
						//15.09.17 Смрнов, сами себе сразу разу согласуем
						Если задача.Инициатор = Задача.Исполнитель тогда 
							для каждого стр1 из задача.Товары цикл
								Если (не ЗначениеЗаполнено(стр1.Статус)) или (стр1.статус = Перечисления.СтатусыСтрокЗаказа.НаСогласовании) Тогда
									стр1.Статус = перечисления.СтатусыСтрокЗаказа.Подтвержден;
								конецЕсли;
							КонецЦикла;	
							
							задача.ИзменитьНазваниеЗадачиИОписаниеПриСогласовании(1);
							задача.ИзменитьСтатусыВЗаявке();
							
						КонецЕсли;
						
						Сообщить(" + Сформирована ""Задача на согласование"" для сотрудника: "+строка(задача.Исполнитель), СтатусСообщения.Информация );	
					исключение
						Сообщить(" - Не удалось сформировать электронную Задачу на согласование для сотрудника: "+строка(задача.Исполнитель), СтатусСообщения.Внимание );	
					КонецПопытки;
				конецЕсли;
			конецЕсли;
		конецЕсли;
		//-------новая задача------------
		
		//Если глТекущийпользователь.ОсновноеПодразделение.ОбособленноеПодразделение тогда  
		Если пользователь.ОсновноеПодразделение.ОбособленноеПодразделение тогда  
			//Исполнитель = глТекущийпользователь.ОсновноеПодразделение.Руководитель;
			Исполнитель = пользователь.ОсновноеПодразделение.Руководитель;
		иначеЕсли ЗначениеЗаполнено(руководитель)  Тогда
			Исполнитель = руководитель;
		иначе
			Исполнитель = Справочники.Пользователи.НайтиПоКоду("Горохов");
		конецЕсли;
		
		Если не СоздаватьЗадачу(ссылка,Исполнитель,Истина) тогда
		иначе         
			
			задача = задачи.ЗадачиПользователя.СоздатьЗадачу();
			задача.Исполнитель = Исполнитель;
			//если сотрудник - работник филиала - то Исполнитель = Руководитель филиала
			задача.Товары.Очистить();
			Для Каждого Стр Из Товары Цикл
				//Если (стр.Номенклатура.ВидТовара <> Перечисления.ВидыТоваров.Диски) или глТекущийпользователь.ОсновноеПодразделение.ОбособленноеПодразделение Тогда
				Если (стр.Номенклатура.ВидТовара <> Перечисления.ВидыТоваров.Диски) или пользователь.ОсновноеПодразделение.ОбособленноеПодразделение Тогда
					стр.Статус = Перечисления.СтатусыСтрокЗаказа.НаСогласовании;
					ст = Задача.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(ст,стр);
					ст.Цена = Стр.ЦенаРеализации;
					ст.НомерСтрокиОснования = стр.НомерСтроки;
				КонецЕсли;
			конецЦикла;		  
			Записать();
			задача.НаСогласование = ИСТИНА;
			задача.Наименование = "Согласуйте заявку на возврат для клиента: "+строка(Контрагент.НаименованиеПолное) ; 
			задача.Описание = "Согласуйте заявку на возврат для клиента: "+строка(Контрагент.НаименованиеПолное)+ " на сумму "+Товары.Итог("сумма")+" по причине "+ПричинаВозврата  + ". Менеджер: "+строка(товары[0].Реализация.ДоговорКонтрагента.ответственноеЛицо);
			Задача.Описание = задача.Описание + ДопОписание; // Сакулина
			
			задача.Инициатор   = глТекущийПользователь;
			задача.Объект   	 = ссылка;
			задача.Дата 		    = ТекущаяДата();
			задача.СрокИсполнения = КонецДня( ТекущаяДата() ); 	
			задача.Оповещение     = истина;
			задача.СрокОповещения = ТекущаяДата(); 
			Если Задача.Товары.Количество()>0 Тогда
				попытка
					задача.Записать();
					Сообщить(" + Сформирована ""Задача на согласование"" для сотрудника: "+строка(задача.Исполнитель), СтатусСообщения.Информация );	
					//15.09.17 Смрнов, сами себе сразу разу согласуем
					Если задача.Инициатор = Задача.Исполнитель тогда 
						для каждого стр1 из задача.Товары цикл
							Если (не ЗначениеЗаполнено(стр1.Статус)) или (стр1.статус = Перечисления.СтатусыСтрокЗаказа.НаСогласовании) Тогда
								стр1.Статус = перечисления.СтатусыСтрокЗаказа.Подтвержден;
							конецЕсли;
						КонецЦикла;	
						
						задача.ИзменитьНазваниеЗадачиИОписаниеПриСогласовании(1);
						задача.ИзменитьСтатусыВЗаявке();
						задача.Записать();
					КонецЕсли;
					
				исключение
					Сообщить(" - Не удалось сформировать электронную Задачу на согласование для сотрудника: "+строка(задача.Исполнитель), СтатусСообщения.Внимание );	
				КонецПопытки;
			конецЕсли;
		конецЕсли;
		
	Иначе	//ОбратнаяПродажа
		Для каждого стрТ из ТабВид Цикл
			
			Если (стрТ.Видтовара = Перечисления.ВидыТоваров.АКБ и стрТ.Количество>10)
				или СтрТ.Сумма>=100000 Тогда //100 тыс.
				
				Если  ПараметрыСеанса.ТекущийПользователь.НаправлениеПродаж.Родитель.Код = "20" тогда
					ОтвМенеджер =  ПараметрыСеанса.ТекущийПользователь.НаправлениеПродаж.Руководитель; // "Филатова С.В.");	
				ИначеЕсли ПараметрыСеанса.ТекущийПользователь.НаправлениеПродаж.Родитель.Код = "21" тогда
					ОтвМенеджер = ПараметрыСеанса.ТекущийПользователь.НаправлениеПродаж.Руководитель; // "Бондаренко Е.Д. (снабжение)";
				Иначе
					ОтвМенеджер = Справочники.Пользователи.НайтиПоКоду("Серков");
				конецЕсли;
				
			Иначе
				//если сотрудник - работник филиала - то Исполнитель = Руководитель филиала
				Если СтрТ.ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
					ОтвМенеджер = Справочники.Пользователи.НайтиПоКоду("Малышев Егор");
					
				//ИначеЕсли глТекущийпользователь.ОсновноеПодразделение.ОбособленноеПодразделение тогда
				ИначеЕсли пользователь.ОсновноеПодразделение.ОбособленноеПодразделение тогда
					//ОтвМенеджер = глТекущийпользователь.ОсновноеПодразделение.Руководитель; // Руководитель филиала!
					ОтвМенеджер = пользователь.ОсновноеПодразделение.Руководитель; // Руководитель филиала!
					
				ИначеЕсли ЗначениеЗаполнено(руководитель)  Тогда
					ОтвМенеджер = руководитель;
					
				Иначе
					ОтвМенеджер = Справочники.Пользователи.НайтиПоКоду("Горохов");
				конецЕсли;
			КонецЕсли; 
			
			задача = задачи.ЗадачиПользователя.СоздатьЗадачу();
			Задача.Исполнитель = ОтвМенеджер;
			
			задача.Товары.Очистить();
			Для Каждого Стр Из Товары Цикл
				Если Стр.Номенклатура.ВидТовара = стрТ.Видтовара Тогда
					стр.Статус = Перечисления.СтатусыСтрокЗаказа.НаСогласовании;
					ст = Задача.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(ст,стр);
					ст.Цена = Стр.ЦенаРеализации;
					ст.НомерСтрокиОснования = стр.НомерСтроки;
				КонецЕсли;
			КонецЦикла;
			
			Записать();
			
			задача.НаСогласование = Истина;
			задача.Наименование = "Согласуйте заявку на возврат для клиента: "+строка(Контрагент.НаименованиеПолное); 
			задача.Описание = "Согласуйте заявку на возврат для клиента: "+строка(Контрагент.НаименованиеПолное)+ "
							   |по причине: "+ПричинаВозврата+"
							   |на сумму: "+Товары.Итог("сумма")+"р.
							   |"  + ". Менеджер: "+строка(товары[0].Реализация.ДоговорКонтрагента.ответственноеЛицо);
			Задача.Описание = задача.Описание + ДопОписание; // Сакулина
			
			задача.Инициатор   = глТекущийПользователь;
			задача.Объект   	 = ссылка;
			задача.Дата 		    = ТекущаяДата();
			задача.СрокИсполнения = КонецДня( ТекущаяДата() ); //просроченная задача на завтра будет	
			задача.Оповещение     = Истина;
			
			//+Лукьяненков 20.09.2017
			Если Задача.Исполнитель = Справочники.Пользователи.НайтиПоКоду("Серков") Тогда
				задача.Оповещение     = Ложь;
			КонецЕсли;
			//-Лукьяненков 20.09.2017
			
			задача.СрокОповещения = ТекущаяДата(); 
			
			Если СоздаватьЗадачу(Ссылка,Задача.Исполнитель,Задача.НаСогласование) тогда 
				попытка
					задача.Записать();
					Сообщить(" + Сформирована ""Задача на согласование"" для сотрудника: "+строка(задача.Исполнитель), СтатусСообщения.Информация );	
					//15.09.17 Смрнов, сами себе сразу разу согласуем
					Если задача.Инициатор = Задача.Исполнитель тогда 
						для каждого стр1 из задача.Товары цикл
							Если (не ЗначениеЗаполнено(стр1.Статус)) или (стр1.статус = Перечисления.СтатусыСтрокЗаказа.НаСогласовании) Тогда
								стр1.Статус = перечисления.СтатусыСтрокЗаказа.Подтвержден;
							конецЕсли;
						КонецЦикла;	
						
						задача.ИзменитьНазваниеЗадачиИОписаниеПриСогласовании(1);
						задача.ИзменитьСтатусыВЗаявке();
						задача.Записать();
					КонецЕсли;
				исключение
					Сообщить(" - Не удалось сформировать электронную Задачу на согласование для сотрудника: "+строка(задача.Исполнитель), СтатусСообщения.Внимание );	
				КонецПопытки;
			Иначе
			КонецЕсли;
		конецЦикла;
		
	конецЕсли;
	Если Согласованно тогда
		Записать(РежимЗАписиДокумента.Запись);
	иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

функция ЭтоОператор(Пользователь)
	
	 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоответствиеМенеджеровРегионам.Пользователь
		|ИЗ
		|	РегистрСведений.СоответствиеМенеджеровРегионам КАК СоответствиеМенеджеровРегионам
		|ГДЕ
		|	СоответствиеМенеджеровРегионам.ВидСотрудника = ЗНАЧЕНИЕ(перечисление.ВидыСотрудниковОтделаПродаж.Оператор)
		|	И СоответствиеМенеджеровРегионам.Пользователь = &Пользователь" ;
		
	Запрос.УстановитьПараметр("Пользователь",Пользователь);	

	Результат = Запрос.Выполнить();

	
	если Результат.Пустой() тогда
		возврат ложь;
	иначе
		возврат истина;
		
	КонецЕсли;        
	
	
КонецФункции


Процедура ТипАвтомобиляПриИзменении(Элемент)
	ВесМакс   = Элемент.Значение.Вес;
	ОбъемМакс = Элемент.Значение.Объем;
	имя1 = Строка(Элемент.Значение);
	имя1 = СокрЛП(лев(имя1, найти(имя1,"(")-1));
	Если имя1<>"" Тогда //и СокрЛП(МаркаАвтомобиля)="" 
		МаркаАвтомобиля = имя1;
	КонецЕсли;
КонецПроцедуры

Процедура ПолеВвода1НачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	форма1 = справочники.ФизическиеЛица.ПолучитьФормуВыбора();
	//+++ 29.07.2014 - водители где угодно уже
	//форма1.СправочникСписок.отбор.Ссылка.ВидСравнения  = ВидСравнения.ВИерархии;
	//форма1.СправочникСписок.отбор.Ссылка.Значение	   = справочники.ФизическиеЛица.НайтиПоНаименованию("Водители");   //Водители
	//форма1.СправочникСписок.отбор.Ссылка.Использование = Истина;
	
	форма1.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = ложь;
	Водитель1 = форма1.ОткрытьМодально();
	Если строка(Водитель1)<>"" Тогда
		Водитель  = ФамилияИнициалыФизЛица(Водитель1);
		//ТелефонВодителя = получитьТелефоны(Водитель1);
		
		АвтомобильГосНомерАвтомобиля  = ПолучитьКонтактнуюИнформацию(Водитель1, "Другое");
		Если Найти(АвтомобильГосНомерАвтомобиля, "Автомобиль: ")>0 Тогда
			АвтомобильГосНомерАвтомобиля = стрЗаменить(АвтомобильГосНомерАвтомобиля, "Автомобиль: ","");
			i= найти(АвтомобильГосНомерАвтомобиля, " ");  //первое наименование...
			Если i>0 Тогда
				МаркаАвтомобиля 	 = Лев(АвтомобильГосНомерАвтомобиля, i-1);
				ГосНомерАвтомобиля = Прав(АвтомобильГосНомерАвтомобиля, стрДлина(АвтомобильГосНомерАвтомобиля) - i);
			КонецЕсли;
			//+++ определяем тип авто	
			Если МаркаАвтомобиля<>"" и ГосНомерАвтомобиля<>"" Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	ТипАвтомобиля.Ссылка,
				|	ТипАвтомобиля.Объем,
				|	ТипАвтомобиля.Вес
				|ИЗ
				|	Справочник.ТипАвтомобиля КАК ТипАвтомобиля
				|ГДЕ
				|	ТипАвтомобиля.ПолноеНаименование ПОДОБНО (&Марка)
				|	И ТипАвтомобиля.ПолноеНаименование ПОДОБНО (&Номер)";
				Запрос.УстановитьПараметр("Марка", "%"+МаркаАвтомобиля+"%" );
				Запрос.УстановитьПараметр("Номер", "%"+ГосНомерАвтомобиля+"%" );
				
				Результат = Запрос.Выполнить();
				Выборка = Результат.Выбрать();
				
				Если Выборка.Следующий() Тогда
					ТипАвтомобиля = выборка.ссылка;
					
				КонецЕсли;
			КонецЕсли;
			//+++)
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеревозчикНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка= ЛОЖЬ;
	ФормаВыбораКонтрагента=Справочники.Контрагенты.ПолучитьФормуВыбора();
	ВыбКонтрагент=ФормаВыбораКонтрагента.ОткрытьМодально();
	Перевозчик=?(ЗначениеЗаполнено(ВыбКонтрагент),СокрЛП(ВыбКонтрагент.НаименованиеПолное),"");
КонецПроцедуры

Функция ПолучитьКонтактнуюИнформацию(об1, тип="Телефон")
	
	Если ТипЗнч(Об1)=Тип("Строка") Тогда
		Возврат "";
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление,
	|	КонтактнаяИнформация.Вид
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И КонтактнаяИнформация.Тип = &Тип";
	
	Запрос.УстановитьПараметр("Объект", Об1);
	Если тип="Телефон" Тогда
		Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Телефон);
		Тип1="Тел: ";
	ИначеЕсли тип="Другое" Тогда
		Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Другое);
		Тип1="Доп.инфо: ";
	ИначеЕсли найти(тип,"доставки")>0 Тогда
		Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Адрес);
		Запрос.Текст = Запрос.Текст +" И КонтактнаяИнформация.Вид = &Вид";
		Запрос.УстановитьПараметр("Вид", справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00021") );    //+++ 30.04.2015
		Тип1="адрес доставки: ";
	ИначеЕсли найти(тип,"Факт")>0 Тогда
		Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Адрес);
		Запрос.Текст = Запрос.Текст +" И КонтактнаяИнформация.Вид = &Вид";
		Запрос.УстановитьПараметр("Вид", справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
		Тип1="Факт.адрес: ";
	ИначеЕсли найти(тип,"Юр")>0 Тогда
		Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Адрес);
		Запрос.Текст = Запрос.Текст +" И КонтактнаяИнформация.Вид = &Вид";
		Запрос.УстановитьПараметр("Вид", справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
		Тип1="Юр.адрес: ";
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	рез = "";
	Если Выборка.Следующий() Тогда
		Если Строка(Выборка.Вид) = "Автомобиль" Тогда
			Тип1="Автомобиль: ";
		КонецЕсли;	
		рез = рез + Тип1 +выборка.Представление;
	КонецЕсли;
	
	ПОКА Выборка.Следующий() ЦИКЛ
		рез = рез + ", "+выборка.Представление;
	КонецЦикла;
	
	Возврат рез;
	
КонецФункции	

Процедура ТоварыКоличествоПриИзменении(Элемент)
	стр= ЭлементыФормы.Товары.ТекущиеДанные;
	стр.сумма= стр.Количество*стр.ЦенаРеализации;
	//---14.06.2016
	ПроверитьНоменклатуруВРеализации(стр);
КонецПроцедуры

Процедура МаршрутныйЛистНажатие(Элемент)
	МаршрутныйЛист.ПолучитьФорму().Открыть();
КонецПроцедуры

Процедура хНажатие(Элемент)
	МаршрутныйЛист = Документы.ЗаданиеНаОтгрузку.ПустаяСсылка();
КонецПроцедуры

Процедура ВРаботеПриИзменении(Элемент)
	Если вработе и  ДатавРаботе = Дата(1,1,1) Тогда
		ДатаВРаботе = ТекущаяДата();
	конецЕсли;	
КонецПроцедуры


Процедура АдресДоставкиОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	Предупреждение("Вводить адрес вручную - нельзя!
	|Выберите адрес из списка!", 10);
	АдресДоставки = "";
КонецПроцедуры


Процедура АдресДоставкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	
	ФормаВыбора = РегистрыСведений.КонтактнаяИнформация.ПолучитьФормуСписка("ФормаСписка", ЭтаФорма);
	ФормаВыбора.РежимВыбора = Истина;
	
	ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Значение = Контрагент;
	ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Использование = Истина;
	
	СтруктураОтбораАдресов = Новый СписокЗначений;
	СтруктураОтбораАдресов.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Значение = СтруктураОтбораАдресов;
	ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Использование = Истина;
	ФормаВыбора.ЭлементыФормы.РегистрСведенийСписок.Колонки.Тип.Видимость = Ложь;
	
	ВыбАдресДоставки = ФормаВыбора.ОткрытьМодально();
	
	Если Не ЗначениеНеЗаполнено(ВыбАдресДоставки) Тогда
		АдресДоставки = ВыбАдресДоставки;
	КонецЕсли;
	
КонецПроцедуры


Процедура ОсновныеДействияФормыПечатьСлужебнаяЗаписка(Кнопка)
	Если ЭтаФорма.Модифицированность тогда
		Предупреждение("Перед печатью документ будет перезаписан!", 5);
		ЭтаФорма.ЗаписатьВФорме();
	КонецЕсли;	
	печать();
КонецПроцедуры


Процедура ОсновныеДействияФормыПечатьТОРГ2(Кнопка)
	Если ЭтаФорма.Модифицированность тогда
		Предупреждение("Перед печатью документ будет перезаписан!", 5);
		ЭтаФорма.ЗаписатьВФорме();
	КонецЕсли;	
	табДок = ПечатьТорг2();
	ТабДок.ОтображатьСетку = ложь;
	ТабДок.АвтоМасштаб=истина;
	ТабДок.Показать("ТОРГ-2 "+ЭтотОбъект);
КонецПроцедуры


Процедура ОсновныеДействияФормыкнПечатьАкт(Кнопка)
	Если ЭтаФорма.Модифицированность тогда
		Предупреждение("Перед печатью документ будет перезаписан!", 5);
		ЭтаФорма.ЗаписатьВФорме();
	КонецЕсли;	
	ПечатьАКТ();
КонецПроцедуры


Процедура КоманднаяПанель1ЗаказИМ(Кнопка)
	НомерИМ="";
	Если ВвестиСтроку(НомерИМ,"Введите номер заказа Интернет-магазина",0,ложь) тогда
		Запрос = новый Запрос;
		Запрос.УстановитьПараметр("НомерВходящегоДокумента",НомерИМ);
		Запрос.Текст="ВЫБРАТЬ
		|	ЗаказПокупателяТовары.Ссылка КАК ЗаказПокупателя,
		|	ЗаказПокупателяТовары.Номенклатура,
		|	ЗаказПокупателяТовары.Количество
		|ПОМЕСТИТЬ втИсходныеЗаказыТовары
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|ГДЕ
		|	ЗаказПокупателяТовары.Ссылка.НомерВходящегоДокумента = &НомерВходящегоДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втИсходныеЗаказыТовары.ЗаказПокупателя КАК ЗаказПокупателя
		|ПОМЕСТИТЬ втИсходныеЗаказы
		|ИЗ
		|	втИсходныеЗаказыТовары КАК втИсходныеЗаказыТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	А.ЗаказПокупателя
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ЗаказПокупателяЗаказы.Ссылка КАК ЗаказПокупателя
		|	ИЗ
		|		Документ.ЗаказПокупателя.Заказы КАК ЗаказПокупателяЗаказы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втИсходныеЗаказы КАК втИсходныеЗаказы
		|			ПО ЗаказПокупателяЗаказы.ЗаказПокупателя = втИсходныеЗаказы.ЗаказПокупателя
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		втИсходныеЗаказы.ЗаказПокупателя
		|	ИЗ
		|		втИсходныеЗаказы КАК втИсходныеЗаказы) КАК А
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Ссылка КАК Реализация,
		|	РеализацияТоваровУслугТовары.НомерСтроки,
		|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения,
		|	РеализацияТоваровУслугТовары.ЕдиницаИзмеренияМест,
		|	РеализацияТоваровУслугТовары.Качество,
		|	РеализацияТоваровУслугТовары.Количество,
		|	РеализацияТоваровУслугТовары.КоличествоМест,
		|	РеализацияТоваровУслугТовары.Коэффициент,
		|	РеализацияТоваровУслугТовары.Номенклатура,
		|	РеализацияТоваровУслугТовары.ПроцентСкидкиНаценки,
		|	РеализацияТоваровУслугТовары.СерияНоменклатуры,
		|	РеализацияТоваровУслугТовары.СпособСписанияОстаткаТоваров,
		|	РеализацияТоваровУслугТовары.СтавкаНДС,
		|	РеализацияТоваровУслугТовары.Сумма,
		|	РеализацияТоваровУслугТовары.СуммаНДС,
		|	РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры,
		|	РеализацияТоваровУслугТовары.Цена,
		|	РеализацияТоваровУслугТовары.Склад КАК СкладРеализации,
		|	РеализацияТоваровУслугТовары.ПроцентАвтоматическихСкидок,
		|	РеализацияТоваровУслугТовары.УсловиеАвтоматическойСкидки,
		|	РеализацияТоваровУслугТовары.ЗначениеУсловияАвтоматическойСкидки,
		|	РеализацияТоваровУслугТовары.Вес,
		|	вт.ЗаказПокупателя,
		|	&НомерВходящегоДокумента КАК НомерЗаказаИМ
		|ИЗ
		|	вт КАК вт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ПО вт.ЗаказПокупателя = РеализацияТоваровУслугТовары.Ссылка.Сделка
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Номенклатура В
		|			(ВЫБРАТЬ
		|				втИсходныеЗаказыТовары.Номенклатура
		|			ИЗ
		|				втИсходныеЗаказыТовары)";
		Рез = Запрос.Выполнить().Выбрать();
		//рез.ВыбратьСтроку();
		Пока рез.Следующий() цикл
			нстр = товары.Добавить();
			ЗаполнитьЗначенияСвойств(нстр,рез);
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

Функция ВернутьНачДатаКоличествоРеализаций()
	N=0;
	НачДата =  ДобавитьМесяц(ЭтотОбъект.Дата,-2);
	СтруктураРез = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаВозвратТоваровТовары.Ссылка КАК Ссылка,
	|	ЗаявкаНаВозвратТоваровТовары.Реализация.Дата КАК Дата
	|ПОМЕСТИТЬ ВТ_1
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваров.Товары КАК ЗаявкаНаВозвратТоваровТовары
	|ГДЕ
	|	ЗаявкаНаВозвратТоваровТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_1.Ссылка) КАК Количество,
	|	МИНИМУМ(ВТ_1.Дата) КАК Дата
	|ИЗ
	|	ВТ_1 КАК ВТ_1";
	
	
	Запрос.Параметры.Вставить("Ссылка",Ссылка);	
	РезультатЗапроса = Запрос.Выполнить(); 	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Дата< ЭтотОбъект.Дата-1 Тогда 		
			НачДата = ДобавитьМесяц(ВыборкаДетальныеЗаписи.Дата,-2);
		КонецЕсли;
		N=ВыборкаДетальныеЗаписи.Количество;
	КонецЦикла;
	
	СтруктураРез.Вставить("Количество",N);
	СтруктураРез.Вставить("Дата",НачДата); 	
	Возврат СтруктураРез;
КонецФункции	

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗначениеНеЗаполнено(АдресДоставки) Тогда
		//Сообщить("Для заявки на возврат обязательно указание Адреса загрузки/выгрузки товара!!!");
	КонецЕсли;
	
	Если ПричинаВозврата = перечисления.ПричиныВозвратаТовара.Брак Тогда
		для Каждого стр из Товары Цикл
			стр.Статус = Перечисления.СтатусыСтрокЗаказа.Подтвержден;
		КонецЦикла;
		Согласованно = Истина;
		Возврат;
	конецЕсли;
	
	Если ПричинаВозврата = перечисления.ПричиныВозвратаТовара.ВозвратСМаршрута Тогда
		Если ЗначениеНеЗаполнено(ПричиныВозвратаТоваровИзРейса) Тогда
			Сообщить("Для этой причины возврата обязательно указать ""Причину возврата из рейса""!!!");
			отказ = Истина;
		КонецЕсли;
		
		Если Водитель = "" Тогда
			Сообщить("Для этой причины возврата обязательно указать Водителя!!!");
			отказ = Истина;
		КонецЕсли;
	конецЕсли;
	
	ОпределитьСтатусДокументаРозничныхПокупателей();
	
КонецПроцедуры

//Адиянов<<<
//Если заявка на возврат делается на основании отчета о розниных продажах или
//продажа была розниным покупателям - утснавливаем статус "Согласован"
Процедура ОпределитьСтатусДокументаРозничныхПокупателей()
	
	СтатусыСтрокЗаказаПодтвержден = Перечисления.СтатусыСтрокЗаказа.Подтвержден;
	
	//Проанализируем документ по контрагенту
	СписокКодовРозниныхКонрагентов = Новый СписокЗначений;
	СписокКодовРозниныхКонрагентов.Добавить("94247");   //ДПД 
	СписокКодовРозниныхКонрагентов.Добавить("94121");   //Армадилло Бизнес Посылка
	СписокКодовРозниныхКонрагентов.Добавить("П005342"); //Розничный покупатель Подорожник
	СписокКодовРозниныхКонрагентов.Добавить("П005344"); //Розничный покупатель СПСР
	
	Если СписокКодовРозниныхКонрагентов.НайтиПоЗначению(СокрЛП(Контрагент.Код)) <> Неопределено Тогда 
		
		Согласованно = Истина;
		
		Для Каждого СтрТовары Из Товары Цикл 
			СтрТовары.Статус = СтатусыСтрокЗаказаПодтвержден;
		КонецЦикла;	 
		
		Возврат;
		
	КонецЕсли;
	
	//Проанализируем документ по табличной части
	ТипДокуменаОтчетОРП = Тип("ДокументСсылка.ОтчетОРозничныхПродажах");
	//ДокументСогласован = Ложь;
	
	Для Каждого СтрТовары Из Товары Цикл 
		
		Если ТипЗнч(СтрТовары.Реализация) = ТипДокуменаОтчетОРП Тогда 
			СтрТовары.Статус = СтатусыСтрокЗаказаПодтвержден;
			Согласованно = Истина;
		КонецЕсли;	
		
	КонецЦикла;	 
	
	//Для каждого стр из Док.Товары Цикл
	//	Если стр.Статус <> Перечисления.СтатусыСтрокЗаказа.Подтвержден Тогда
	//		согласованно = ложь;
	//		прервать;
	//	конецЕсли;	
	//конецЦикла;
	
	
	
	
КонецПроцедуры
//Адиянов>>>


Процедура ОсновныеДействияФормыПечатьПретензииВТК(Кнопка)
	Если ЭтаФорма.Модифицированность тогда
		Предупреждение("Перед печатью документ будет перезаписан!", 5);
		ЭтаФорма.ЗаписатьВФорме();
	КонецЕсли;	
	табДок = ПечатьПретензии();
	ТабДок.ОтображатьСетку = ложь;
	ТабДок.АвтоМасштаб=истина;
	ТабДок.Показать("Претензия "+ЭтотОбъект);
КонецПроцедуры

Процедура ДатаПриИзменении(Элемент) // Сакулина
	Если НачалоДня(Дата) + 7*24*60*60 < НачалоДня(ТекущаяДата()) Тогда
		Сообщить("Нельзя устанавливать дату документа ранее 7 дней с текущей даты ",СтатусСообщения.Важное);
		Если ЭтоНовый() Тогда
			Дата = ТекущаяДата();
		Иначе
			Дата = Ссылка.Дата;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры  // Сакулина

Процедура ВРаботе1ПриИзменении(Элемент)
	Если вработе и  ДатавРаботе = Дата(1,1,1) Тогда
		ДатаВРаботе = ТекущаяДата();
	конецЕсли;	
	
КонецПроцедуры

Процедура ИзРейсаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	стандартнаяОбработка = Ложь;
	Список = новый СписокЗначений;
	
	Запрос = Новый Запрос;
	запрос.Текст = "ВЫБРАТЬ
	|	ПричиныВозвратаТоваровИзРейса.Ссылка
	|ИЗ
	|	Перечисление.ПричиныВозвратаТоваровИзРейса КАК ПричиныВозвратаТоваровИзРейса";
	рез = Запрос.Выполнить().Выгрузить();
	
	Для каждого стр из рез Цикл
		Список.Добавить(стр.Ссылка);
	КонецЦикла;
	
	ВыбранноеЗначение = ВыбратьИзСписка(Список,ЭлементыФормы.ИзРейса);
	Если  ВыбранноеЗначение <> Неопределено Тогда
		Элемент.Значение = ВыбранноеЗначение.Значение;
	Конецесли;
КонецПроцедуры


Функция ПолучитьЗадачиПоЗаявке(ЗаявкаНаВозврат,Исполнитель, НаСогласование)
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ЗадачиПользователя.Ссылка КАК Задача,
	|	ЗадачиПользователя.Выполнена
	|ИЗ
	|	Задача.ЗадачиПользователя КАК ЗадачиПользователя
	|ГДЕ
	|	ЗадачиПользователя.Исполнитель = &Исполнитель
	|	И ЗадачиПользователя.Объект = &ЗаявкаНаВозврат
	|	И ЗадачиПользователя.НаСогласование = &НаСогласование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Задача
	|АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("ЗаявкаНаВозврат",ЗаявкаНаВозврат);
	Запрос.УстановитьПараметр("Исполнитель",Исполнитель);
	Запрос.УстановитьПараметр("НаСогласование",НаСогласование);
	Рез =Запрос.Выполнить().Выгрузить();
	Возврат Рез;
КонецФункции

Функция СоздаватьЗадачу(ЗаявкаНаВозврат,Исполнитель,НаСогласование) 
	НадоСоздаватьЗадачу = ложь;
	отбор = новый Структура("Выполнена");
	СписокЗадач = ПолучитьЗадачиПоЗаявке(ЗаявкаНаВозврат,Исполнитель, НаСогласование);
	Если СписокЗадач.Количество() = 0 тогда //Задач нет - создаем
		Возврат истина;
	Иначе
		отбор.Выполнена = Истина;
		НайденныеСтроки = СписокЗадач.НайтиСтроки(отбор);
		Если НайденныеСтроки.Количество()>0 тогда //есть выполненные задачи - сообщаем и спрашиваем создавать ли
			стрСообщение = "";
			Для каждого стрЗ из НайденныеСтроки цикл
				стрСообщение=стрСообщение+"По этой заявке уже есть ВЫПОЛНЕННАЯ задача: "+стрЗ.Задача+Символы.ПС;
			КонецЦикла;
			
			Ответ = Вопрос("Есть выполненные задачи: "+Символы.ПС+стрСообщение+"Все равно создать новую?",РежимДиалогаВопрос.ДаНет,60,,"Уже есть задачи по этой заявке!");
			
			Если Ответ = КодВозвратаДиалога.Да Тогда
				НадоСоздаватьЗадачу = истина;
			КонецЕсли;
		КонецЕсли;
		
		///
		отбор.Выполнена = ложь;
		НайденныеСтроки = СписокЗадач.НайтиСтроки(отбор);
		Если НайденныеСтроки.Количество()>0 тогда //есть невыполненные задачи - сообщаем, но задачу не создаем
			Для каждого стрЗ из НайденныеСтроки цикл
				Сообщить("По этой заявке уже есть задача "+ стрЗ.Задача);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	НадоСоздаватьЗадачу = истина;
	Возврат НадоСоздаватьЗадачу;
	
КонецФункции

Функция ПричинаВозвратаСформироватьСписокВыбора()
	
	Список = новый СписокЗначений;
	Если  ТипЗнч(ДокументОснование) <> Тип("ДокументСсылка.ЗаявкаНаБрак") Тогда
		Список.Добавить(Перечисления.ПричиныВозвратаТовара.ОтказПокупателя);
		Список.Добавить(Перечисления.ПричиныВозвратаТовара.ОтказКлиентаНеактуально);
		Список.Добавить(Перечисления.ПричиныВозвратаТовара.ОкончаниеСрокаГодности);
		Список.Добавить(Перечисления.ПричиныВозвратаТовара.Недогруз);
		Список.Добавить(Перечисления.ПричиныВозвратаТовара.ИзлишекСклад);
		Список.Добавить(Перечисления.ПричиныВозвратаТовара.излишекПоВинеОператора);
		Список.Добавить(Перечисления.ПричиныВозвратаТовара.излишекПоВинеВодителя);
		Список.Добавить(Перечисления.ПричиныВозвратаТовара.ОшибкаМенеджера);
		Список.Добавить(Перечисления.ПричиныВозвратаТовара.ОбратнаяПродажа);
		Список.Добавить(Перечисления.ПричиныВозвратаТовара.Пересорт);
		//Список.Добавить(Перечисления.ПричиныВозвратаТовара.ПересортВнутритарный);
		Список.Добавить(Перечисления.ПричиныВозвратаТовара.НеУспелиВыгрузить);
		Список.Добавить(Перечисления.ПричиныВозвратаТовара.БракВыгрузка);
		Список.Добавить(Перечисления.ПричиныВозвратаТовара.ВозвратСМаршрута);
		Список.Добавить(Перечисления.ПричиныВозвратаТовара.ПоискНедогруза);
		//Список.Добавить(Перечисления.ПричиныВозвратаТовара.БракАКБ); 
	иначе
		Список.Добавить(Перечисления.ПричиныВозвратаТовара.Брак);
	конецЕсли;
	
	Возврат Список;
	
КонецФункции // ПричинаВозвратаСформироватьСписокВыбора()

Процедура ПричинаВозвратаЭлементФормыПриИзменении(Элемент)
	
	ПричинаВозврата = ЭлементыФормы.ПричинаВозвратаЭлементФормы.Значение;
	
	Если (ПричинаВозврата = Перечисления.ПричиныВозвратаТовара.Брак или ПричинаВозврата = Перечисления.ПричиныВозвратаТовара.БракАКБ )  
		и  ТипЗнч(ДокументОснование)<> Тип("ДокументСсылка.ЗаявкаНаБрак")   Тогда
		причинаВозврата ="";
		ЭлементыФормы.ПричинаВозвратаЭлементФормы.Значение = Перечисления.ПричиныВозвратаТовара.ПустаяСсылка();
		Сообщить("Заявку на возврат с причиной ""Брак заводской"" нужно вводить на основании заявки на брак!")
	конецЕсли;
	
	УправлениеВидимостью();
	
	//Миронычев
	Если ПричинаВозврата = Перечисления.ПричиныВозвратаТовара.ПоискНедогруза или ПричинаВозврата = Перечисления.ПричиныВозвратаТовара.Пересорт  тогда
		ЭлементыФормы.НадписьВиновникНедогруза.Видимость = Истина;
		ЭлементыФормы.ВиновникНедогруза.Видимость = Истина;
		ЭлементыФормы.РаботаетПоОбратнойПродаже.Видимость = Истина;
	Иначе
		ЭлементыФормы.НадписьВиновникНедогруза.Видимость = Ложь;
		ЭлементыФормы.ВиновникНедогруза.Видимость = Ложь;
		ЭлементыФормы.РаботаетПоОбратнойПродаже.Видимость = Ложь;
	КонецЕсли;
	//КонецМиронычев
	
КонецПроцедуры

Функция ПолучитьТекстЗапросаДляВозвратов()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявкаНаВозвратТоваровТовары.Номенклатура
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваров.Товары КАК ЗаявкаНаВозвратТоваровТовары
	|ГДЕ
	|	ЗаявкаНаВозвратТоваровТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявкаНаВозвратТоваровТовары.Реализация
	|ПОМЕСТИТЬ ВТ_Реализация
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваров.Товары КАК ЗаявкаНаВозвратТоваровТовары
	|ГДЕ
	|	ЗаявкаНаВозвратТоваровТовары.Реализация ССЫЛКА Документ.РеализацияТоваровУслуг
	|	И ЗаявкаНаВозвратТоваровТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявкаНаВозвратТоваровТовары.Реализация
	|ПОМЕСТИТЬ ВТ_ОтчетОрозничныхПродажах
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваров.Товары КАК ЗаявкаНаВозвратТоваровТовары
	|ГДЕ
	|	ЗаявкаНаВозвратТоваровТовары.Реализация ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|	И ЗаявкаНаВозвратТоваровТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявкаНаВозвратТоваровТовары.Номенклатура,
	|	ВЫБОР
	|		КОГДА ЗаявкаНаВозвратТоваровТовары.Количество > ЕСТЬNULL(Продажи.Количество, 0)
	|			ТОГДА ЕСТЬNULL(Продажи.Количество, 0)
	|		ИНАЧЕ ЗаявкаНаВозвратТоваровТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	ЗаявкаНаВозвратТоваровТовары.Реализация КАК ДокументПартии,
	|	ЗаявкаНаВозвратТоваровТовары.СкладРеализации КАК Склад,
	|	ЗаявкаНаВозвратТоваровТовары.СкладВозврата КАК СкладВозврата,
	|	ЗаявкаНаВозвратТоваровТовары.НомерЗаказаИМ КАК НомерЗаказаИМ,
	|	ЗаявкаНаВозвратТоваровТовары.Реализация.Сделка КАК Заказ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Продажи.Цена, 0) > 0
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Ссылка.Сделка КАК Документ.ЗаказПокупателя).БонусПрименен
	|						ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(Продажи.Цена, 0) * (100 - ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Ссылка.Сделка КАК Документ.ЗаказПокупателя).ПроцентСкидкиНал) / 100 КАК ЧИСЛО(15, 0))
	|					ИНАЧЕ ЕСТЬNULL(Продажи.Цена, 0)
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(ТоварыПереданныеОстатки.КоличествоОстаток, 0) > 0
	|					ТОГДА ЕСТЬNULL(ТоварыПереданныеОстатки.СуммаВзаиморасчетовОстаток, 0) / ТоварыПереданныеОстатки.КоличествоОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК Цена,
	|	РеализацияТоваровУслугТовары.СтавкаНДС,
	|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения,
	|	РеализацияТоваровУслугТовары.ЕдиницаИзмеренияМест,
	|	РеализацияТоваровУслугТовары.Коэффициент КАК Коэффициент,
	|	ЗНАЧЕНИЕ(Справочник.Качество.Новый) КАК Качество
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваров.Товары КАК ЗаявкаНаВозвратТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ПО ЗаявкаНаВозвратТоваровТовары.Реализация = РеализацияТоваровУслугТовары.Ссылка
	|			И ЗаявкаНаВозвратТоваровТовары.Номенклатура = РеализацияТоваровУслугТовары.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Продажи.Реализация КАК Реализация,
	|			Продажи.Номенклатура КАК Номенклатура,
	|			СУММА(Продажи.Количество) КАК Количество,
	|			Продажи.Цена КАК Цена
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ПродажиОбороты.ДокументПродажи КАК Реализация,
	|				ПродажиОбороты.Номенклатура КАК Номенклатура,
	|				СУММА(ПродажиОбороты.КоличествоОборот) КАК Количество,
	|				ВЫБОР
	|					КОГДА СУММА(ПродажиОбороты.КоличествоОборот) > 0
	|						ТОГДА ВЫРАЗИТЬ(СУММА(ПродажиОбороты.СтоимостьОборот) / СУММА(ПродажиОбороты.КоличествоОборот) КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК Цена
	|			ИЗ
	|				РегистрНакопления.Продажи.Обороты(
	|						&НачДата,
	|						,
	|						,
	|						ДокументПродажи В
	|								(ВЫБРАТЬ
	|									ВТ_Реализация.Реализация
	|								ИЗ
	|									ВТ_Реализация КАК ВТ_Реализация)
	|							И Номенклатура В
	|								(ВЫБРАТЬ
	|									ВТ_Номенклатура.Номенклатура
	|								ИЗ
	|									ВТ_Номенклатура КАК ВТ_Номенклатура)) КАК ПродажиОбороты
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ПродажиОбороты.ДокументПродажи,
	|				ПродажиОбороты.Номенклатура
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ТоварыПереданныеОбороты.Регистратор,
	|				ТоварыПереданныеОбороты.Номенклатура,
	|				СУММА(ТоварыПереданныеОбороты.КоличествоОборот),
	|				ВЫБОР
	|					КОГДА ТоварыПереданныеОбороты.КоличествоОборот > 0
	|						ТОГДА ВЫРАЗИТЬ(ТоварыПереданныеОбороты.СуммаВзаиморасчетовОборот / ТоварыПереданныеОбороты.КоличествоОборот КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|			ИЗ
	|				РегистрНакопления.ТоварыПереданные.Обороты(
	|						,
	|						,
	|						Регистратор,
	|						Номенклатура В
	|							(ВЫБРАТЬ
	|								ВТ_Номенклатура.Номенклатура
	|							ИЗ
	|								ВТ_Номенклатура КАК ВТ_Номенклатура)) КАК ТоварыПереданныеОбороты
	|			ГДЕ
	|				ТоварыПереданныеОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	|				И ТоварыПереданныеОбороты.Регистратор В
	|						(ВЫБРАТЬ
	|							ВТ_Реализация.Реализация
	|						ИЗ
	|							ВТ_Реализация КАК ВТ_Реализация)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ТоварыПереданныеОбороты.Регистратор,
	|				ТоварыПереданныеОбороты.Номенклатура,
	|				ВЫБОР
	|					КОГДА ТоварыПереданныеОбороты.КоличествоОборот > 0
	|						ТОГДА ВЫРАЗИТЬ(ТоварыПереданныеОбороты.СуммаВзаиморасчетовОборот / ТоварыПереданныеОбороты.КоличествоОборот КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК Продажи
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Продажи.Реализация,
	|			Продажи.Номенклатура,
	|			Продажи.Цена) КАК Продажи
	|		ПО ЗаявкаНаВозвратТоваровТовары.Реализация = Продажи.Реализация
	|			И ЗаявкаНаВозвратТоваровТовары.Номенклатура = Продажи.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыПереданные.Остатки КАК ТоварыПереданныеОстатки
	|		ПО ЗаявкаНаВозвратТоваровТовары.Номенклатура = ТоварыПереданныеОстатки.Номенклатура
	|			И ЗаявкаНаВозвратТоваровТовары.Реализация.Сделка = ТоварыПереданныеОстатки.Сделка
	|ГДЕ
	|	ЗаявкаНаВозвратТоваровТовары.Ссылка = &Ссылка
	|	И ЗаявкаНаВозвратТоваровТовары.ДокументВозврата = ЗНАЧЕНИЕ(Документ.ВозвратТоваровОтПокупателя.ПустаяСсылка)
	|	И ВЫБОР
	|			КОГДА ЕСТЬNULL(Продажи.Цена, 0) > 0
	|				ТОГДА ЕСТЬNULL(Продажи.Цена, 0)
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЕСТЬNULL(ТоварыПереданныеОстатки.КоличествоОстаток, 0) > 0
	|						ТОГДА ЕСТЬNULL(ТоварыПереданныеОстатки.СуммаВзаиморасчетовОстаток, 0) / ТоварыПереданныеОстатки.КоличествоОстаток
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОНЕЦ > 0
	|	И ЗаявкаНаВозвратТоваровТовары.Реализация В
	|			(ВЫБРАТЬ
	|				ВТ_Реализация.Реализация
	|			ИЗ
	|				ВТ_Реализация КАК ВТ_Реализация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаявкаНаВозвратТоваровТовары.Номенклатура,
	|	ВЫБОР
	|		КОГДА ЗаявкаНаВозвратТоваровТовары.Количество > ЕСТЬNULL(Продажи.Количество, 0)
	|			ТОГДА ЕСТЬNULL(Продажи.Количество, 0)
	|		ИНАЧЕ ЗаявкаНаВозвратТоваровТовары.Количество
	|	КОНЕЦ,
	|	ЗаявкаНаВозвратТоваровТовары.Реализация,
	|	ЗаявкаНаВозвратТоваровТовары.СкладРеализации,
	|	ЗаявкаНаВозвратТоваровТовары.СкладВозврата,
	|	ЗаявкаНаВозвратТоваровТовары.НомерЗаказаИМ,
	|	ЗаявкаНаВозвратТоваровТовары.ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Продажи.Цена, 0) > 0
	|			ТОГДА ЕСТЬNULL(Продажи.Цена, 0)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(ТоварыПереданныеОстатки.КоличествоОстаток, 0) > 0
	|					ТОГДА ЕСТЬNULL(ТоварыПереданныеОстатки.СуммаВзаиморасчетовОстаток, 0) / ТоварыПереданныеОстатки.КоличествоОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ОтчетОРозничныхПродажахТовары.СтавкаНДС,
	|	ОтчетОРозничныхПродажахТовары.ЕдиницаИзмерения,
	|	ОтчетОРозничныхПродажахТовары.ЕдиницаИзмерения,
	|	ОтчетОРозничныхПродажахТовары.Коэффициент,
	|	ЗНАЧЕНИЕ(Справочник.Качество.Новый)
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваров.Товары КАК ЗаявкаНаВозвратТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПродажиОбороты.ДокументПродажи КАК Реализация,
	|			ПродажиОбороты.Номенклатура КАК Номенклатура,
	|			СУММА(ПродажиОбороты.КоличествоОборот) КАК Количество,
	|			ВЫБОР
	|				КОГДА СУММА(ПродажиОбороты.КоличествоОборот) > 0
	|					ТОГДА ВЫРАЗИТЬ(СУММА(ПродажиОбороты.СтоимостьОборот) / СУММА(ПродажиОбороты.КоличествоОборот) КАК ЧИСЛО(15, 2))
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК Цена
	|		ИЗ
	|			РегистрНакопления.Продажи.Обороты(
	|					&НачДата,
	|					,
	|					,
	|					ДокументПродажи В
	|							(ВЫБРАТЬ
	|								ВТ_ОтчетОрозничныхПродажах.Реализация
	|							ИЗ
	|								ВТ_ОтчетОрозничныхПродажах КАК ВТ_ОтчетОрозничныхПродажах)
	|						И Номенклатура В
	|							(ВЫБРАТЬ
	|								ВТ_Номенклатура.Номенклатура
	|							ИЗ
	|								ВТ_Номенклатура КАК ВТ_Номенклатура)) КАК ПродажиОбороты
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПродажиОбороты.ДокументПродажи,
	|			ПродажиОбороты.Номенклатура) КАК Продажи
	|		ПО ЗаявкаНаВозвратТоваровТовары.Номенклатура = Продажи.Номенклатура
	|			И ЗаявкаНаВозвратТоваровТовары.Реализация = Продажи.Реализация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыПереданные.Остатки КАК ТоварыПереданныеОстатки
	|		ПО ЗаявкаНаВозвратТоваровТовары.Номенклатура = ТоварыПереданныеОстатки.Номенклатура
	|			И ЗаявкаНаВозвратТоваровТовары.Реализация.Сделка = ТоварыПереданныеОстатки.Сделка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахТовары
	|		ПО ЗаявкаНаВозвратТоваровТовары.Реализация = ОтчетОРозничныхПродажахТовары.Ссылка
	|			И ЗаявкаНаВозвратТоваровТовары.Номенклатура = ОтчетОРозничныхПродажахТовары.Номенклатура
	|ГДЕ
	|	ЗаявкаНаВозвратТоваровТовары.Ссылка = &Ссылка
	|	И ЗаявкаНаВозвратТоваровТовары.ДокументВозврата = ЗНАЧЕНИЕ(Документ.ВозвратТоваровОтПокупателя.ПустаяСсылка)
	|	И ВЫБОР
	|			КОГДА ЕСТЬNULL(Продажи.Цена, 0) > 0
	|				ТОГДА ЕСТЬNULL(Продажи.Цена, 0)
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЕСТЬNULL(ТоварыПереданныеОстатки.КоличествоОстаток, 0) > 0
	|						ТОГДА ЕСТЬNULL(ТоварыПереданныеОстатки.СуммаВзаиморасчетовОстаток, 0) / ТоварыПереданныеОстатки.КоличествоОстаток
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОНЕЦ > 0
	|	И ЗаявкаНаВозвратТоваровТовары.Реализация В
	|			(ВЫБРАТЬ
	|				ВТ_ОтчетОрозничныхПродажах.Реализация
	|			ИЗ
	|				ВТ_ОтчетОрозничныхПродажах КАК ВТ_ОтчетОрозничныхПродажах)
	|ИТОГИ ПО
	|	Заказ";
	
	//Запрос использовался до 2017.03.22
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ЗаявкаНаВозвратТоваровТовары.Номенклатура
	//|ПОМЕСТИТЬ ВТ_Номенклатура
	//|ИЗ
	//|	Документ.ЗаявкаНаВозвратТоваров.Товары КАК ЗаявкаНаВозвратТоваровТовары
	//|ГДЕ
	//|	ЗаявкаНаВозвратТоваровТовары.Ссылка = &Ссылка
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ЗаявкаНаВозвратТоваровТовары.Реализация
	//|ПОМЕСТИТЬ ВТ_Реализация
	//|ИЗ
	//|	Документ.ЗаявкаНаВозвратТоваров.Товары КАК ЗаявкаНаВозвратТоваровТовары
	//|ГДЕ
	//|	ТИПЗНАЧЕНИЯ(ЗаявкаНаВозвратТоваровТовары.Реализация) = &Реализация
	//|	И ЗаявкаНаВозвратТоваровТовары.Ссылка = &Ссылка
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ЗаявкаНаВозвратТоваровТовары.Реализация
	//|ПОМЕСТИТЬ ВТ_ОтчетОрозничныхПродажах
	//|ИЗ
	//|	Документ.ЗаявкаНаВозвратТоваров.Товары КАК ЗаявкаНаВозвратТоваровТовары
	//|ГДЕ
	//|	ТИПЗНАЧЕНИЯ(ЗаявкаНаВозвратТоваровТовары.Реализация) = &ОтчетОРозничныхПродажах
	//|	И ЗаявкаНаВозвратТоваровТовары.Ссылка = &Ссылка
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ЗаявкаНаВозвратТоваровТовары.Номенклатура,
	//|	ВЫБОР
	//|		КОГДА ЗаявкаНаВозвратТоваровТовары.Количество > ЕСТЬNULL(Продажи.Количество, 0)
	//|			ТОГДА ЕСТЬNULL(Продажи.Количество, 0)
	//|		ИНАЧЕ ЗаявкаНаВозвратТоваровТовары.Количество
	//|	КОНЕЦ КАК Количество,
	//|	ЗаявкаНаВозвратТоваровТовары.Реализация КАК ДокументПартии,
	//|	ЗаявкаНаВозвратТоваровТовары.СкладРеализации КАК Склад,
	//|	ЗаявкаНаВозвратТоваровТовары.СкладВозврата КАК СкладВозврата,
	//|	ЗаявкаНаВозвратТоваровТовары.НомерЗаказаИМ КАК НомерЗаказаИМ,
	//|	ЗаявкаНаВозвратТоваровТовары.Реализация.Сделка КАК Заказ,
	//|	ВЫБОР
	//|		КОГДА ЕСТЬNULL(Продажи.Цена, 0) > 0
	//|			ТОГДА ЕСТЬNULL(Продажи.Цена, 0)
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА ЕСТЬNULL(ТоварыПереданныеОстатки.КоличествоОстаток, 0) > 0
	//|					ТОГДА ЕСТЬNULL(ТоварыПереданныеОстатки.СуммаВзаиморасчетовОстаток, 0) / ТоварыПереданныеОстатки.КоличествоОстаток
	//|				ИНАЧЕ 0
	//|			КОНЕЦ
	//|	КОНЕЦ КАК Цена,
	//|	РеализацияТоваровУслугТовары.СтавкаНДС,
	//|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения,
	//|	РеализацияТоваровУслугТовары.ЕдиницаИзмеренияМест,
	//|	РеализацияТоваровУслугТовары.Коэффициент КАК Коэффициент,
	//|	ЗНАЧЕНИЕ(Справочник.Качество.Новый) КАК Качество
	//|ИЗ
	//|	Документ.ЗаявкаНаВозвратТоваров.Товары КАК ЗаявкаНаВозвратТоваровТовары
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	//|		ПО ЗаявкаНаВозвратТоваровТовары.Реализация = РеализацияТоваровУслугТовары.Ссылка
	//|			И ЗаявкаНаВозвратТоваровТовары.Номенклатура = РеализацияТоваровУслугТовары.Номенклатура
	//|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//|			ПродажиОбороты.ДокументПродажи КАК Реализация,
	//|			ПродажиОбороты.Номенклатура КАК Номенклатура,
	//|			СУММА(ПродажиОбороты.КоличествоОборот) КАК Количество,
	//|			ВЫБОР
	//|				КОГДА СУММА(ПродажиОбороты.КоличествоОборот) > 0
	//|					ТОГДА ВЫРАЗИТЬ(СУММА(ПродажиОбороты.СтоимостьОборот) / СУММА(ПродажиОбороты.КоличествоОборот) КАК ЧИСЛО(15, 2))
	//|				ИНАЧЕ 0
	//|			КОНЕЦ КАК Цена
	//|		ИЗ
	//|			РегистрНакопления.Продажи.Обороты(
	//|					&НачДата,
	//|					,
	//|					,
	//|					ДокументПродажи В
	//|							(ВЫБРАТЬ
	//|								ВТ_Реализация.Реализация
	//|							ИЗ
	//|								ВТ_Реализация КАК ВТ_Реализация)
	//|						И Номенклатура В
	//|							(ВЫБРАТЬ
	//|								ВТ_Номенклатура.Номенклатура
	//|							ИЗ
	//|								ВТ_Номенклатура КАК ВТ_Номенклатура)) КАК ПродажиОбороты
	//|		
	//|		СГРУППИРОВАТЬ ПО
	//|			ПродажиОбороты.ДокументПродажи,
	//|			ПродажиОбороты.Номенклатура) КАК Продажи
	//|		ПО ЗаявкаНаВозвратТоваровТовары.Реализация = Продажи.Реализация
	//|			И ЗаявкаНаВозвратТоваровТовары.Номенклатура = Продажи.Номенклатура
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыПереданные.Остатки КАК ТоварыПереданныеОстатки
	//|		ПО ЗаявкаНаВозвратТоваровТовары.Номенклатура = ТоварыПереданныеОстатки.Номенклатура
	//|			И ЗаявкаНаВозвратТоваровТовары.Реализация.Сделка = ТоварыПереданныеОстатки.Сделка
	//|ГДЕ
	//|	ЗаявкаНаВозвратТоваровТовары.Ссылка = &Ссылка
	//|	И ЗаявкаНаВозвратТоваровТовары.ДокументВозврата = ЗНАЧЕНИЕ(Документ.ВозвратТоваровОтПокупателя.ПустаяСсылка)
	//|	И ВЫБОР
	//|			КОГДА ЕСТЬNULL(Продажи.Цена, 0) > 0
	//|				ТОГДА ЕСТЬNULL(Продажи.Цена, 0)
	//|			ИНАЧЕ ВЫБОР
	//|					КОГДА ЕСТЬNULL(ТоварыПереданныеОстатки.КоличествоОстаток, 0) > 0
	//|						ТОГДА ЕСТЬNULL(ТоварыПереданныеОстатки.СуммаВзаиморасчетовОстаток, 0) / ТоварыПереданныеОстатки.КоличествоОстаток
	//|					ИНАЧЕ 0
	//|				КОНЕЦ
	//|		КОНЕЦ > 0
	//|	И ЗаявкаНаВозвратТоваровТовары.Реализация В
	//|			(ВЫБРАТЬ
	//|				ВТ_Реализация.Реализация
	//|			ИЗ
	//|				ВТ_Реализация КАК ВТ_Реализация)
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	ЗаявкаНаВозвратТоваровТовары.Номенклатура,
	//|	ВЫБОР
	//|		КОГДА ЗаявкаНаВозвратТоваровТовары.Количество > ЕСТЬNULL(Продажи.Количество, 0)
	//|			ТОГДА ЕСТЬNULL(Продажи.Количество, 0)
	//|		ИНАЧЕ ЗаявкаНаВозвратТоваровТовары.Количество
	//|	КОНЕЦ,
	//|	ЗаявкаНаВозвратТоваровТовары.Реализация,
	//|	ЗаявкаНаВозвратТоваровТовары.СкладРеализации,
	//|	ЗаявкаНаВозвратТоваровТовары.СкладВозврата,
	//|	ЗаявкаНаВозвратТоваровТовары.НомерЗаказаИМ,
	//|	ЗаявкаНаВозвратТоваровТовары.ЗаказПокупателя,
	//|	ВЫБОР
	//|		КОГДА ЕСТЬNULL(Продажи.Цена, 0) > 0
	//|			ТОГДА ЕСТЬNULL(Продажи.Цена, 0)
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА ЕСТЬNULL(ТоварыПереданныеОстатки.КоличествоОстаток, 0) > 0
	//|					ТОГДА ЕСТЬNULL(ТоварыПереданныеОстатки.СуммаВзаиморасчетовОстаток, 0) / ТоварыПереданныеОстатки.КоличествоОстаток
	//|				ИНАЧЕ 0
	//|			КОНЕЦ
	//|	КОНЕЦ,
	//|	ОтчетОРозничныхПродажахТовары.СтавкаНДС,
	//|	ОтчетОРозничныхПродажахТовары.ЕдиницаИзмерения,
	//|	ОтчетОРозничныхПродажахТовары.ЕдиницаИзмерения,
	//|	ОтчетОРозничныхПродажахТовары.Коэффициент,
	//|	ЗНАЧЕНИЕ(Справочник.Качество.Новый)
	//|ИЗ
	//|	Документ.ЗаявкаНаВозвратТоваров.Товары КАК ЗаявкаНаВозвратТоваровТовары
	//|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//|			ПродажиОбороты.ДокументПродажи КАК Реализация,
	//|			ПродажиОбороты.Номенклатура КАК Номенклатура,
	//|			СУММА(ПродажиОбороты.КоличествоОборот) КАК Количество,
	//|			ВЫБОР
	//|				КОГДА СУММА(ПродажиОбороты.КоличествоОборот) > 0
	//|					ТОГДА ВЫРАЗИТЬ(СУММА(ПродажиОбороты.СтоимостьОборот) / СУММА(ПродажиОбороты.КоличествоОборот) КАК ЧИСЛО(15, 2))
	//|				ИНАЧЕ 0
	//|			КОНЕЦ КАК Цена
	//|		ИЗ
	//|			РегистрНакопления.Продажи.Обороты(
	//|					&НачДата,
	//|					,
	//|					,
	//|					ДокументПродажи В
	//|							(ВЫБРАТЬ
	//|								ВТ_ОтчетОрозничныхПродажах.Реализация
	//|							ИЗ
	//|								ВТ_ОтчетОрозничныхПродажах КАК ВТ_ОтчетОрозничныхПродажах)
	//|						И Номенклатура В
	//|							(ВЫБРАТЬ
	//|								ВТ_Номенклатура.Номенклатура
	//|							ИЗ
	//|								ВТ_Номенклатура КАК ВТ_Номенклатура)) КАК ПродажиОбороты
	//|		
	//|		СГРУППИРОВАТЬ ПО
	//|			ПродажиОбороты.ДокументПродажи,
	//|			ПродажиОбороты.Номенклатура) КАК Продажи
	//|		ПО ЗаявкаНаВозвратТоваровТовары.Номенклатура = Продажи.Номенклатура
	//|			И ЗаявкаНаВозвратТоваровТовары.Реализация = Продажи.Реализация
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыПереданные.Остатки КАК ТоварыПереданныеОстатки
	//|		ПО ЗаявкаНаВозвратТоваровТовары.Номенклатура = ТоварыПереданныеОстатки.Номенклатура
	//|			И ЗаявкаНаВозвратТоваровТовары.Реализация.Сделка = ТоварыПереданныеОстатки.Сделка
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахТовары
	//|		ПО ЗаявкаНаВозвратТоваровТовары.Реализация = ОтчетОРозничныхПродажахТовары.Ссылка
	//|			И ЗаявкаНаВозвратТоваровТовары.Номенклатура = ОтчетОРозничныхПродажахТовары.Номенклатура
	//|ГДЕ
	//|	ЗаявкаНаВозвратТоваровТовары.Ссылка = &Ссылка
	//|	И ЗаявкаНаВозвратТоваровТовары.ДокументВозврата = ЗНАЧЕНИЕ(Документ.ВозвратТоваровОтПокупателя.ПустаяСсылка)
	//|	И ВЫБОР
	//|			КОГДА ЕСТЬNULL(Продажи.Цена, 0) > 0
	//|				ТОГДА ЕСТЬNULL(Продажи.Цена, 0)
	//|			ИНАЧЕ ВЫБОР
	//|					КОГДА ЕСТЬNULL(ТоварыПереданныеОстатки.КоличествоОстаток, 0) > 0
	//|						ТОГДА ЕСТЬNULL(ТоварыПереданныеОстатки.СуммаВзаиморасчетовОстаток, 0) / ТоварыПереданныеОстатки.КоличествоОстаток
	//|					ИНАЧЕ 0
	//|				КОНЕЦ
	//|		КОНЕЦ > 0
	//|	И ЗаявкаНаВозвратТоваровТовары.Реализация В
	//|			(ВЫБРАТЬ
	//|				ВТ_ОтчетОрозничныхПродажах.Реализация
	//|			ИЗ
	//|				ВТ_ОтчетОрозничныхПродажах КАК ВТ_ОтчетОрозничныхПродажах)
	//|ИТОГИ ПО
	//|	Заказ";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаДляВозвратов()

Процедура КоманднаяПанель1кнЗаявкаНаБрак(Кнопка)
	Если ЭтоНовый() или Модифицированность() тогда
		Ответ = Вопрос("Документ был изменен, Записать документ?",РежимДиалогаВопрос.ДаНет,,,"Внимание!!!");
		Если Ответ =  КодВозвратаДиалога.Да тогда
			Записать();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	табЗаявкиНаБрак = новый ТаблицаЗначений;
	табЗаявкиНаБрак.Колонки.Добавить("ВидТовара");
	табЗаявкиНаБрак.Колонки.Добавить("Номенклатура");
	табЗаявкиНаБрак.Колонки.Добавить("Количество");
	табЗаявкиНаБрак.Колонки.Добавить("Реализация");
	табЗаявкиНаБрак.Колонки.Добавить("ДатаРеализации");
	табЗаявкиНаБрак.Колонки.Добавить("НомерРеализации");
	табЗаявкиНаБрак.Колонки.Добавить("СостояниеТовара");
	табЗаявкиНаБрак.Колонки.Добавить("Комментарий");
	
	СкладАнгарИРозничныйРаспред = Справочники.Склады.НайтиПоКоду("02203"); //Ангар-И розничный (распред.)
	СкладАнгарИРозничныйБрак = Справочники.Склады.НайтиПоКоду("02176"); //Ангар-И розничный (брак)
	
	
	Для каждого стр из Товары Цикл
		если стр.СкладРеализации = СкладАнгарИРозничныйРаспред или стр.СкладРеализации = СкладАнгарИРозничныйБрак тогда
			нстр = табЗаявкиНаБрак.Добавить();
			нстр.ВидТовара = стр.Номенклатура.ВидТовара;
			нстр.Номенклатура = стр.Номенклатура;
			нстр.Количество = стр.Количество;
			нстр.Реализация = стр.Реализация;
			нстр.ДатаРеализации = стр.Реализация.Дата;
			нстр.НомерРеализации = стр.Реализация.Номер;
			нстр.СостояниеТовара = Перечисления.БракВидыСостоянийДиска.Неставленный;
			нстр.Комментарий = "Брак";
		КонецЕсли;
	КонецЦикла;
	
	Контрагент = Контрагент;
	
	отб = новый Структура("ВидТовара");
	//Диски
	отб.ВидТовара= Перечисления.ВидыТоваров.Диски;
	НайденныеСтроки = табЗаявкиНаБрак.НайтиСтроки(отб);
	СоздатьЗаявкуНаБрак(отб.ВидТовара, НайденныеСтроки, Контрагент, ссылка);
	//Шины
	отб.ВидТовара= Перечисления.ВидыТоваров.Шины;
	НайденныеСтроки = табЗаявкиНаБрак.НайтиСтроки(отб);
	СоздатьЗаявкуНаБрак(отб.ВидТовара, НайденныеСтроки, Контрагент, ссылка);
	//Аксы
	отб.ВидТовара= Перечисления.ВидыТоваров.Аксессуары;
	НайденныеСтроки = табЗаявкиНаБрак.НайтиСтроки(отб);
	СоздатьЗаявкуНаБрак(отб.ВидТовара, НайденныеСтроки, Контрагент, ссылка);
	
	//Прочее
	отб.ВидТовара= Перечисления.ВидыТоваров.Прочее;
	НайденныеСтроки = табЗаявкиНаБрак.НайтиСтроки(отб);
	СоздатьЗаявкуНаБрак(отб.ВидТовара, НайденныеСтроки, Контрагент, ссылка);
	
	//Акб
	отб.ВидТовара= Перечисления.ВидыТоваров.АКБ;
	НайденныеСтроки = табЗаявкиНаБрак.НайтиСтроки(отб);
	СоздатьЗаявкуНаБрак(отб.ВидТовара, НайденныеСтроки, Контрагент, ссылка);
КонецПроцедуры

Процедура СоздатьЗаявкуНаБрак(ВидТовара, строки, Контрагент, ЗаявкаНаВозврат=неопределено)
	Если Строки.Количество()>0 тогда
		ДокЗаявкаНаБрак = Документы.ЗаявкаНаБрак.СоздатьДокумент();
		ДокЗаявкаНаБрак.Дата = ТекущаяДата();
		ДокЗаявкаНаБрак.Контрагент = Контрагент;
		ДокЗаявкаНаБрак.Ответственный = Ответственный;
		ДокЗаявкаНаБрак.ВидТовара = ВидТовара;
		ДокЗаявкаНаБрак.ДокументОснование = ЗаявкаНаВозврат;
		
		Если ЗаявкаНаВозврат <> неопределено тогда
			ДокЗаявкаНаБрак.ДокументОснование = ЗаявкаНаВозврат;
		КонецЕсли;
		
		Расшифровка = ДокЗаявкаНаБрак.Расшифровка;
		Для каждого стр из строки цикл
			нстр = Расшифровка.Добавить();
			ЗаполнитьЗначенияСвойств(нстр,стр);
		КонецЦикла;
		ДокЗаявкаНаБрак.ПолучитьФорму("ФормаДокумента").Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура ОсновныеДействияФормыПечатьТТН(Кнопка)
	Обр = Справочники.ДополнительныеПечатныеФормы.НайтиПоКоду();
	Обр.ПолучитьФорму("Форма");
КонецПроцедуры

Процедура УстановитьДоступностьРеквизитов()
	ЭлементыФормы.НетДокументов.Доступность = РольДоступна("ПолныеПрава"); 
	РазрешитьКомментарийБухгалтерииЗаявкаНаВозврат = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьКомментарийБухгалтерииЗаявкаНаВозврат");
	ЭлементыФормы.КомментарийБухгалтерии.ТолькоПросмотр = НЕ РазрешитьКомментарийБухгалтерииЗаявкаНаВозврат;
	
КонецПроцедуры // УстановитьДоступностьРеквизитов()


// Миронычев
СписокМакетов = ЭтотОбъект.ПолучитьСписокПечатныхФорм();
УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.кнПечать,
СписокМакетов,
Новый Действие("КоманднаяПанельФормыДействиеВыбратьПечатнуюФормы"));

//+++Шарафутдинов 09.02.2018
//ЭлементыФормы.Товары.ТолькоПросмотр 						= ЗначениеЗаполнено(ДатаОтправкиНаСогласование);
ЗаполненаДОС =  ЗначениеЗаполнено(ДатаОтправкиНаСогласование);
для каждого кол из ЭлементыФормы.Товары.Колонки цикл
	если кол.Имя <> "Документ" тогда
		кол.Доступность = не ЗаполненаДОС;
	иначе
		//для колонки Документ необходимо просматривать документ реализации при недоступности ТЧ
		кол.Доступность = истина;
		кол.ЭлементУправления.КнопкаВыбора = не ЗаполненаДОС;
		кол.ЭлементУправления.КнопкаОчистки = не ЗаполненаДОС;
		кол.ЭлементУправления.ТолькоПросмотр =  ЗаполненаДОС;
	КонецЕсли;
КонецЦикла;
//---Шарафутдинов 09.02.2018

ЭлементыФормы.ДатаОтправкиНаСогласование.ТолькоПросмотр 	= ЗаполненаДОС;
ЭлементыФормы.ДатаСогласованияБухгалтерии.ТолькоПросмотр 	= ЗначениеЗаполнено(ДатаСогласованияБухгалтерии);
ЭлементыФормы.ДатаСогласованияЛогистов.ТолькоПросмотр 		= ЗначениеЗаполнено(ДатаСогласованияЛогистов);
ЭлементыФормы.ДатаСогласованияСклада.ТолькоПросмотр 		= ЗначениеЗаполнено(ДатаСогласованияСклада);