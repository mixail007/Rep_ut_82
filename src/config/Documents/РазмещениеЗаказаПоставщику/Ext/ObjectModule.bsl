Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Заполняет переданную табличную часть по остаткам
//
// Параметры:
//  ТабличнаяЧасть - табличная часть.
//
Процедура ЗаполнитьТабличнуюЧастьПоОстаткам(ТабличнаяЧасть)

	Если ТабличнаяЧасть = Товары Тогда
		ЭтоТовары = Истина;
	Иначе
		ЭтоТовары = Ложь;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", ЗаказПоставщику);

	Если ЭтоТовары Тогда
		Запрос.УстановитьПараметр("ТоварТара", Перечисления.ТоварТара.Товар);
		Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный);
	Иначе
		Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
		Запрос.УстановитьПараметр("ТоварТара", Перечисления.ТоварТара.Тара);
	КонецЕсли;

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя,
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток КАК Количество,
	|	ЗаказыПоставщикамОстатки.Номенклатура,
	|	ЗаказыПоставщикамОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	ЗаказыПоставщикамОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ЕдиницаИзмеренияКоэффициент,
	|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику = &Заказ И СтатусПартии = &СтатусПартии) КАК ЗаказыПоставщикамОстатки
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|   РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(, ЗаказПоставщику = &Заказ И ТоварТара = &ТоварТара) КАК РазмещениеЗаказовПокупателейОстатки
	|ПО ЗаказыПоставщикамОстатки.Номенклатура = РазмещениеЗаказовПокупателейОстатки.Номенклатура
	|   И ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры = РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры
	|ГДЕ ЗаказыПоставщикамОстатки.КоличествоОстаток > 0
	|    И НЕ ЗаказыПоставщикамОстатки.Номенклатура.Услуга";
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		ЕдиницаИзмеренияКоэффициент = ?(Выборка.ЕдиницаИзмеренияКоэффициент <> NULL, Выборка.ЕдиницаИзмеренияКоэффициент, 0);

		НоваяСтрока = ТабличнаяЧасть.Добавить();
		НоваяСтрока.Номенклатура       = Выборка.Номенклатура;
		НоваяСтрока.ИсходноеРазмещение = Выборка.ЗаказПокупателя;
		НоваяСтрока.Количество         = Выборка.Количество;

		Если ЭтоТовары Тогда
			НоваяСтрока.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент                = ЕдиницаИзмеренияКоэффициент;
			НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоОстаткам()

// Заполняет табличную часть "Товары" по остаткам
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТоварыПоОстаткам() Экспорт

	ЗаполнитьТабличнуюЧастьПоОстаткам(Товары);
	
КонецПроцедуры // ЗаполнитьТоварыПоОстаткам()

// Заполняет табличную часть "ВозвратнаяТара" по остаткам
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьВозвратнуюТаруПоОстаткам() Экспорт

	ЗаполнитьТабличнуюЧастьПоостаткам(ВозвратнаяТара);
	
КонецПроцедуры // ЗаполнитьВозвратнуюТаруПоОстаткам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("ЗаказПоставщику");

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество");

	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	                                                      Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество");

	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре,
	                          Отказ, Заголовок);

	ТаблицаПоТоварамРазмещение = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРазмещение.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРазмещение.Получить(Сч);
		Если ЗначениеНеЗаполнено(СтрокаТаблицы.ИсходноеРазмещение) Тогда
			 ТаблицаПоТоварамРазмещение.Удалить(СтрокаТаблицы);
		 Иначе
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Если ТаблицаПоТоварамРазмещение.Количество() > 0 Тогда
		ТаблицаПоТоварамРазмещение.Колонки.ИсходноеРазмещение.Имя = "ЗаказПокупателя";
		ТаблицаПоТоварамРазмещение.Колонки.Количество.Имя = "МинусКоличество";
		ТаблицаПоТоварамРазмещение.Колонки.Добавить("Количество");
		
		Для каждого СтрокаТаблицы Из ТаблицаПоТоварамРазмещение Цикл
			СтрокаТаблицы.Количество = - СтрокаТаблицы.МинусКоличество;
		КонецЦикла;
		
		НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамРазмещение, ТаблицаДвижений);
		ТаблицаДвижений.ЗаполнитьЗначения(ЗаказПоставщику,"ЗаказПоставщику");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Товар, "ТоварТара");

		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		НаборДвижений.мПериод            = Дата;
		
		// Проверка осатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
		
		Если Не Отказ Тогда
			Движения.РазмещениеЗаказовПокупателей.ВыполнитьПриход();
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаПоТареРазмещение = ТаблицаПоТаре.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТареРазмещение.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТареРазмещение.Получить(Сч);
		Если ЗначениеНеЗаполнено(СтрокаТаблицы.ИсходноеРазмещение) Тогда
			 ТаблицаПоТареРазмещение.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Если ТаблицаПоТареРазмещение.Количество() > 0 Тогда
		ТаблицаПоТареРазмещение.Колонки.ИсходноеРазмещение.Имя = "ЗаказПокупателя";
		ТаблицаПоТареРазмещение.Колонки.Количество.Имя = "МинусКоличество";
		ТаблицаПоТареРазмещение.Колонки.Добавить("Количество");
		
		Для каждого СтрокаТаблицы Из ТаблицаПоТареРазмещение Цикл
			СтрокаТаблицы.Количество = - СтрокаТаблицы.МинусКоличество;
		КонецЦикла;
		
		НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТареРазмещение, ТаблицаДвижений);
		ТаблицаДвижений.ЗаполнитьЗначения(ЗаказПоставщику,"ЗаказПоставщику");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Тара, "ТоварТара");

		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		НаборДвижений.мПериод            = Дата;
		
		// Проверка осатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
		
		Если Не Отказ Тогда
			Движения.РазмещениеЗаказовПокупателей.ВыполнитьПриход();
		КонецЕсли;
		
		// Теперь вернем снятое размещение в свободные остатки по заказу
		ТаблицаДвижений.Очистить();
		
	КонецЕсли;
	
	ТаблицаПоТоварамРазмещение = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРазмещение.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРазмещение.Получить(Сч);
		Если ЗначениеНеЗаполнено(СтрокаТаблицы.НовоеРазмещение) Тогда
			 ТаблицаПоТоварамРазмещение.Удалить(СтрокаТаблицы);
		 Иначе
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Если ТаблицаПоТоварамРазмещение.Количество() > 0 Тогда
		ТаблицаПоТоварамРазмещение.Колонки.НовоеРазмещение.Имя = "ЗаказПокупателя";
		
		НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамРазмещение, ТаблицаДвижений);
		ТаблицаДвижений.ЗаполнитьЗначения(ЗаказПоставщику,"ЗаказПоставщику");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Товар, "ТоварТара");

		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		НаборДвижений.мПериод            = Дата;
		
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатковПоЗаказам(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
		
		Если Не Отказ Тогда
			Движения.РазмещениеЗаказовПокупателей.ВыполнитьПриход();
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаПоТареРазмещение = ТаблицаПоТаре.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТареРазмещение.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТареРазмещение.Получить(Сч);
		Если ЗначениеНеЗаполнено(СтрокаТаблицы.НовоеРазмещение) Тогда
			 ТаблицаПоТареРазмещение.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Если ТаблицаПоТареРазмещение.Количество() > 0 Тогда
		
		ТаблицаПоТареРазмещение.Колонки.НовоеРазмещение.Имя = "ЗаказПокупателя";
		
		НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТареРазмещение, ТаблицаДвижений);
		ТаблицаДвижений.ЗаполнитьЗначения(ЗаказПоставщику,"ЗаказПоставщику");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Тара, "ТоварТара");

		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		НаборДвижений.мПериод            = Дата;
		
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатковПоЗаказам(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
		
		Если Не Отказ Тогда
			Движения.РазмещениеЗаказовПокупателей.ВыполнитьПриход();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ЗаказПоставщику = Основание;

		Если Основание.Проведен Тогда

			// Заполним табличные части неотгруженными товаров по заказу покупателя.
			ЗаполнитьТоварыПоОстаткам();
			ЗаполнитьВозвратнуюТаруПоОстаткам();
		КонецЕсли;	

	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	// Проверка заполнения единицы измерения мест и количества мест
	ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 


КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;


	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЗаказПоставщику);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = СформироватьДеревоПолейЗапросаПоШапке();
	//ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ЗаказыПоставщикам", "ДоговорКонтрагента"              , "ДоговорКонтрагента");
 
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	//СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЗаказПоставщику, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ИсходноеРазмещение"        , "ИсходноеРазмещение");
	СтруктураПолей.Вставить("НовоеРазмещение"           , "НовоеРазмещение");
	СтруктураПолей.Вставить("НомерСтроки"               , "НомерСтроки");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");

	РезультатЗапросаПоТоварам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("ИсходноеРазмещение"        , "ИсходноеРазмещение");
	СтруктураПолей.Вставить("НовоеРазмещение"           , "НовоеРазмещение");
	СтруктураПолей.Вставить("НомерСтроки"               , "НомерСтроки");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");
	
	РезультатЗапросаПоТаре = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);
	
	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);
	
	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, 
											Отказ, Заголовок);
	// Проверить заполнение ТЧ "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
											Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоТоварам, ТаблицаПоТаре,
							Отказ, Заголовок);
	КонецЕсли; 

КонецПроцедуры	// ОбработкаПроведения()

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
