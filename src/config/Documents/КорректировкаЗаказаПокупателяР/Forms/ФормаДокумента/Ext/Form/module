
Перем мКолонкиТовары, мКолонкиВозвратнаяТара;

//// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
//// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов; 


//// Процедура устанавливает видимость для тех колонок в табличной части 
//// "Товары", видимость которых определяется реквизитами документа.
////
//// Параметры:
////  Нет.
////
Процедура УстановитьВидимость()

	
	
	Колонки      = ЭлементыФормы.Товары.Колонки;
	
	ИсправлениеКорректировки =(ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.КорректировкаЗаказаПокупателяР")); 

	
	
	Колонки.КоличествоДоКорректировки.Видимость = ИсправлениеКорректировки;
	Колонки.КоличествоДоИзменения.Положение 	= ?(ИсправлениеКорректировки, ПоложениеКолонки.НаСледующейСтроке, ПоложениеКолонки.НоваяКолонка); 
	Колонки.СуммаДоКорректировки.Видимость 		= ИсправлениеКорректировки;
	Колонки.СуммаДоИзменения.Положение 			= ?(ИсправлениеКорректировки, ПоложениеКолонки.НаСледующейСтроке, ПоложениеКолонки.НоваяКолонка); 
	Колонки.СуммаНДСДоКорректировки.Видимость 	= ИсправлениеКорректировки;
	Колонки.СуммаНДСДоИзменения.Положение 		= ?(ИсправлениеКорректировки, ПоложениеКолонки.НаСледующейСтроке, ПоложениеКолонки.НоваяКолонка); 
	Колонки.СтавкаНДСДоКорректировки.Видимость 	= ИсправлениеКорректировки;
	Колонки.СтавкаНДСДоИзменения.Положение 		= ?(ИсправлениеКорректировки, ПоложениеКолонки.НаСледующейСтроке, ПоложениеКолонки.НоваяКолонка); 
	Колонки.ЦенаДоКорректировки.Видимость 		= ИсправлениеКорректировки;
	Колонки.ЦенаДоИзменения.Положение 			= ?(ИсправлениеКорректировки, ПоложениеКолонки.НаСледующейСтроке, ПоложениеКолонки.НоваяКолонка);
	Колонки.ВсегоДоКорректировки.Видимость 		= ИсправлениеКорректировки;
	Колонки.ВсегоДоИзменения.Положение 			= ?(ИсправлениеКорректировки, ПоложениеКолонки.НаСледующейСтроке, ПоложениеКолонки.НоваяКолонка);
	
КонецПроцедуры // УстановитьВидимость()


//// Процедура формирует текст в информационной надписи об итогах документа.
////
//// Параметры:
////  Нет.
////
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	СуммаВсего = ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	СуммаВсегоНДС = ПолучитьНДСДокумента(ЭтотОбъект, "Товары") + ПолучитьНДСДокумента(ЭтотОбъект, "Услуги");
	ЭлементыФормы.Всего.Значение    = ФорматСумм(СуммаВсего);
	ЭлементыФормы.ВсегоНДС.Значение = ФорматСумм(СуммаВсегоНДС);

	ВременнаяСтрока = "";

	Если (НЕ ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента))
	   И (ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда

		ВременнаяСтрока = ВременнаяСтрока + КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета) +  ДокументОбъект.ВалютаДокумента
		                + " = " + КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
		                + мВалютаРегламентированногоУчета + ", ";

	КонецЕсли;

	Если НЕ ЗначениеНеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
	Иначе
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

// 
//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ


//// Процедура - обработчик события "ПриОткрытии" формы
////
Процедура ПриОткрытии()

			
		
		мРазрешитьРедактироватьЗаказ = Ложь; // по умолчанию
		
		мТекущийДоговорКонтрагента = ДоговорКонтрагента;//+++ 11.09.2015 тикущий договор!
		
		//+++(19.08.2014 Исключительный Случай - редактирует заказ ТОЛЬКО Менеджер = ОтветственноеЛицо за договор!
		// по служебке от 19.08.2014 (от Кураповой) - ТОЛЬКО для "Формула Авто Плюс" (код: "92797  ")
		Если СокрЛП(Контрагент.Код)="92797" Тогда
			
			Если ДоговорКонтрагента.ОтветственноеЛицо = глТекущийПользователь Тогда
				мРазрешитьРедактироватьЗаказ = Истина;    
			Иначе
				Сообщить("У Вас нет доступа для редактирования заказа клиента: "+строка(Контрагент), СтатусСообщения.Внимание); 
            КонецЕсли;
		
		 // бухгалтера, кладовщики, начальники... и с полными правами...
	 	ИначеЕсли РольДоступна("ПолныеПрава") Тогда
		//+++)
		
		//Если РольДоступна("ПолныеПрава") Тогда
		
			мРазрешитьРедактироватьЗаказ = Истина;    
			
		ИначеЕсли 
			(Контрагент.ОсновнойМенеджерКонтрагента = глТекущийПользователь 
			 ИЛИ ДоговорКонтрагента.ОтветственноеЛицо = глТекущийПользователь)
			ИЛИ (НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "УчетТолькоПоПодразделениюПользователя")
			      И ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьРедактированиеЧужихДокументов") 
		         )
			Тогда
			мРазрешитьРедактироватьЗаказ = Истина;
			
		ИначеЕсли ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") Тогда
			
			//+++( 02.06.2015 - отбор по 1 или нескольким подразделениям
			ОдноПодразделение = ?(РольДоступна("Партнер"), ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновноеПодразделение"), глТекущийПользователь.ОсновноеПодразделение);
			списокПодразделенийПользователя = получитьСписокРазрешенныхОбъектовПользователя(глТекущийПользователь, "Подразделения"); 
			
			Если ОдноПодразделение = Ссылка.Подразделение 
				или списокПодразделенийПользователя.найтиПоЗначению(Ссылка.Подразделение)<>неопределено Тогда
				
				//+++ 09.07.2014 - любой менеджер может изменить любой заказ подразделения?
				//   	мРазрешитьРедактироватьЗаказ = Истина; // заказ своего подразделения
				//
				Если рольДоступна("Кассир") 
					или ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "СтаршийМенеджерПодразделения") Тогда 
					
					мРазрешитьРедактироватьЗаказ = Истина; // заказ своего подразделения
					
					Предупреждение("Не рекомендуется редактировать 'чужой' документ, 
									|оформленный на менеджера: "+строка(ДоговорКонтрагента.ОтветственноеЛицо), 60); 
									
				ИначеЕсли НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьРедактированиеЧужихДокументов") Тогда	 
									
					мРазрешитьРедактироватьЗаказ = ЛОЖЬ; 
					Сообщить("У Вас нет доступа для редактирования документов, оформленных на другого менеджера!", СтатусСообщения.Внимание); 
					
				КонецЕсли;
				//+++)
				
			Иначе	
				мРазрешитьРедактироватьЗаказ = Ложь; // заказ не своего подразделения
			КонецЕсли;	
		Иначе		
			мРазрешитьРедактироватьЗаказ = Ложь; 
		КонецЕсли;	
		
	  //Найдем Корректировку реализации
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорректировкаРеализации.Ссылка
		|ИЗ
		|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|ГДЕ
		|	КорректировкаРеализации.ДокументРеализации = &ДокументРеализации
		|	И КорректировкаРеализации.Проведен";
	
	Запрос.УстановитьПараметр("ДокументРеализации", ДокументРеализации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		 мРазрешитьРедактироватьЗаказ = Ложь;
	КонецЕсли;
	
		
		
		
				
			
			ЭтаФорма.ТолькоПросмотр = НЕ мРазрешитьРедактироватьЗаказ;
			


	
	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("ЕдиницаХранения");

	// Установить ограничение - изменять видимоть колонок для таличной части 
	// "Возвратная тара".
	УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ВозвратнаяТара.Колонки, СтруктураКолонок);

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("СтавкаНДС");
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("ПроцентСкидкиНаценки");
	СтруктураКолонок.Вставить("ЕдиницаХранения");
	
	УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Товары.Колонки, СтруктураКолонок);

	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;


	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	

Если РольДоступна("ПолныеПрава") Тогда //+++ 18.09.2013 
	ЭлементыФормы.Номер.Доступность    = Истина;
	ЭлементыФормы.Номер.ТолькоПросмотр = ЛОЖЬ;
	
КонецЕсли;

КонецПроцедуры //при открытии


//// Процедура - обработчик события "ОбновлениеОтображения" формы.
////
Процедура ОбновлениеОтображения()

	ОбновитьПодвал();
	
КонецПроцедуры // ОбновлениеОтображения()


//// Процедура вызывается при нажатии кнопки "Анализ" командной панели формы,
//// вызывает анализ текущего состояния заказа.
////
Процедура ДействияФормыДействиеАнализ(Кнопка)

	АнализЗаказа = Отчеты.АнализЗаказаПокупателяЯШТ.Создать();
	АнализЗаказаФорма = АнализЗаказа.ПолучитьФорму();

	АнализЗаказа.Заказ = ЗаказПокупателя;

	АнализЗаказа.СформироватьОтчет(АнализЗаказаФорма.ЭлементыФормы.ДокументРезультат);
	АнализЗаказаФорма.Открыть();

КонецПроцедуры // ДействияФормыДействиеАнализ()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()


//// Процедура - обработчик события "ПриИзменении" поля ввода цены
//// в строке табличной части "Товары".
////
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыЦенаПриИзменении()



//// Процедура - обработчик события "ПриИзменении" поля ввода количества
//// в строке табличной части "Товары".
////
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
		// Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
    СуммаДокумента = Товары.Итог("Сумма") + Услуги.Итог("Сумма");
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

//// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
//// в строке табличной части "Товары".
////
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;

	// Рассчитать новое количество
	РассчитатьКоличествоТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
    СуммаДокумента = Товары.Итог("Сумма") + Услуги.Итог("Сумма");

КонецПроцедуры // ТоварыКоличествоМестПриИзменении()


//// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
//// в строке табличной части "Товары".
////
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

//// Процедура - обработчик события "ПриИзменении" поля ввода суммы
//// в строке табличной части "Товары".
////
Процедура ТоварыСуммаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, глТекущийПользователь);

	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыСуммаПриИзменении()


Процедура ТоварыПриПолученииДанных(Элемент, ОформленияСтрок)
	
Для каждого ОформлениеСтроки из ОформленияСтрок Цикл
	
	ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;

	Если ЭлементыФормы.Товары.Колонки.Всего.Видимость Тогда
		ОформлениеСтроки.Ячейки.Всего.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Всего.Текст = ФорматСумм(ДанныеСтроки.Сумма
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС));
 	КонецЕсли;
	Если ЭлементыФормы.Товары.Колонки.ВсегоДоИзменения.Видимость Тогда
		ОформлениеСтроки.Ячейки.ВсегоДоИзменения.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ВсегоДоИзменения.Текст = ФорматСумм(ДанныеСтроки.СуммаДоИзменения
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДСДоИзменения));
 	КонецЕсли;
	Если ЭлементыФормы.Товары.Колонки.ВсегоДоКорректировки.Видимость Тогда
		ОформлениеСтроки.Ячейки.ВсегоДоИзменения.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ВсегоДоИзменения.Текст = ФорматСумм(ДанныеСтроки.СуммаДоИзменения
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДСДоИзменения));
 	КонецЕсли;
	
	
	
	ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
КонецЦикла;


КонецПроцедуры

Процедура Печать(Элемент)
	Если модифицированность() Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Документ был изменен. Записать документ? ", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Записать();
		иначе	
			возврат;
         конецЕсли;
	конецЕсли;	
		
		
	ТабДок = Новый ТабличныйДокумент;
	Табдок.АвтоМасштаб = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;

	Макет = Документы.КорректировкаЗаказаПокупателяР.ПолучитьМакет("Печать");
	// Шапка
	Шапка = Макет.ПолучитьОбласть("Шапка");
	Подвал = Макет.ПолучитьОбласть("Подпись");
	Пустая = Макет.ПолучитьОбласть("Пустая");
	Шапка.Параметры.Заполнить(ЭтотОбъект);
	Подвал.Параметры.Заполнить(ЭтотОбъект);
	чтоИсправить= "";
	Если Товары.Итог("Количество") <> Товары.Итог("КоличествоДоИзменения") Тогда
	   чтоисправить = "количество";
    КонецЕсли;
	Если Товары.Итог("Цена") <> Товары.Итог("ЦенаДоИзменения") Тогда
		Если чтоисправить <> "" Тогда
		чтоисправить = чтоисправить+  " и цены";
		иначе	
		чтоисправить = "цены";
		конецЕсли;
	КонецЕсли;
	Попытка
		ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаСклоненияФИО", "Decl", ТипВнешнейКомпоненты.Native); 
		Объект = Новый("AddIn.Decl.CNameDecl");
	Исключение
		Сообщить("Не удалось подключить внешнюю компоненту по причине: " + ОписаниеОшибки()); 
	КонецПопытки;
	
	Падеж = 2; //Родительный: кого? 	
	РезультатФИО = "";
	Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
	Иначе
		если не Ответственный.ФизЛицо.Пустая() тогда //14.03.2016
			СтрокаФИО = Ответственный.ФизЛицо.Наименование; // представление ФИО
		иначе 
			СтрокаФИО = Ответственный.Наименование; 
		КонецЕсли;	
		РезультатФИО = Объект.Просклонять(СтрокаФИО, Падеж);
	КонецЕсли;		

	
    Шапка.Параметры.РезультатФИО = РезультатФИО;
	Шапка.Параметры.чтоисправить = чтоисправить;
	Шапка.Параметры.НомерРеализации = ДокументРеализации.Номер;
	Шапка.Параметры.ДатаРеализации = Формат(ДокументРеализации.Дата,"ДФ=dd.MM.yy");
	ТабДок.Вывести(Шапка);
	//ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	
	// Товары
	Область = Макет.ПолучитьОбласть("ТоварыШапка");
	Область.Параметры.Номер = Номер;
	Область.Параметры.Дата = Формат(Дата,"ДФ=dd.MM.yy");
	ТабДок.Вывести(Область);
	ОбластьТовары = Макет.ПолучитьОбласть("Товары");
	Для Каждого ТекСтрокаТовары Из Товары Цикл
		ОбластьТовары.Параметры.Заполнить(ТекСтрокаТовары);
		ОбластьТовары.Параметры.Код = ТекСтрокаТовары.Номенклатура.Код;
		ТабДок.Вывести(ОбластьТовары);
	КонецЦикла;
    ОбластьИтого = Макет.ПолучитьОбласть("Итого");
	ОбластьИтого.Параметры.Количество = Товары.Итог("Количество");
	ОбластьИтого.Параметры.КоличествоДоИзменения = Товары.Итог("КоличествоДоИзменения");
	ОбластьИтого.Параметры.Сумма = Товары.Итог("Сумма");
	ОбластьИтого.Параметры.СуммаДоИзменения = Товары.Итог("СуммаДоИзменения");
	Табдок.Вывести(ОбластьИтого);
	
	массивОбластей =новый Массив;
	массивОбластей.Добавить(Пустая);
	массивОбластей.Добавить(Подвал);
	Пока ТабДок.ПроверитьВывод(массивОбластей) Цикл /// Далее следует простая проверка на возможность уместить массив из областей на листе. 
		ТабДок.Вывести(Пустая); 
	КонецЦикла; 
	
	Табдок.Вывести(Подвал);
		
	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	ТабДок.Показать();
КонецПроцедуры

Процедура ТоварыПередУдалением(Элемент, Отказ)
	Отказ = истина;
КонецПроцедуры

Процедура УслугиКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;
	СтрокаТабличнойЧасти.Сумма =СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество; 

	// Рассчитать новое количество
	РассчитатьКоличествоТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

	//РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	СуммаДокумента = Товары.Итог("Сумма") + Услуги.Итог("Сумма");	
КонецПроцедуры

Процедура УслугиЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;
	СтрокаТабличнойЧасти.Сумма =СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;
	СуммаДокумента = Товары.Итог("Сумма") + Услуги.Итог("Сумма");
КонецПроцедуры

Процедура УслугиСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
 	ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, глТекущийПользователь);
	Если не СтрокаТабличнойЧасти.Цена = 0 Тогда 
	СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Сумма/СтрокаТабличнойЧасти.Цена;
	КонецЕсли;
	
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
 	СуммаДокумента = Товары.Итог("Сумма") + Услуги.Итог("Сумма");
КонецПроцедуры



мКолонкиТовары         = ЭлементыФормы.Товары.Колонки;
мКолонкиВозвратнаяТара = ЭлементыФормы.ВозвратнаяТара.Колонки;

