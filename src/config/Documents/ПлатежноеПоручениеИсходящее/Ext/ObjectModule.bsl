// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

//Хранит таблицу, использующуюся при проведении документа
Перем ТаблицаПлатежейУпр;

//БАЛАНС (04.12.2007)                       
//
Перем мПроведениеИзФормы Экспорт; 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Определяет номер расчетного счета по
// переданному банковскому счету
//
// Параметры:
//  СчетКонтра - справочник.БанковскиеСчета
//
// Возвращаемое значение
//  Номер расчетного счета
//
Функция ВернутьРасчетныйСчет(СчетКонтрагента)
	
	БанкДляРасчетов = СчетКонтрагента.БанкДляРасчетов;
	Результат       = ?(БанкДляРасчетов.Пустая(), СчетКонтрагента.НомерСчета, СчетКонтрагента.Банк.КоррСчет);

	Возврат Результат;
	
КонецФункции // ВернутьРасчетныйСчет()

// Форматирует сумму прописью документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо представить прописью 
//  СуммаБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСуммуПрописи(СуммаДок,СуммаБезКопеек)

	Результат     = СуммаДок;
	ЦелаяЧасть    = Цел(СуммаДок);
	ФорматСтрока  = "Л=ru_RU; ДП=Ложь";
	ПарамПредмета = "рубль, рубля, рублей, м, копейка, копейки, копеек, ж";

	Если (Результат - ЦелаяЧасть) = 0 Тогда
		Если СуммаБезКопеек Тогда
			Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
			Результат = Лев(Результат,Найти(Результат,"0") - 1) + "=";
		Иначе
			Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
		КонецЕсли;
	Иначе
		Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
	КонецЕсли;

	Возврат Результат;

КонецФункции // ФорматироватьСуммуПрописи()

// Форматирует сумму  документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо отформатировать
//  СуммаБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСумму(СуммаДок,СуммаБезКопеек)
	
	Результат  = СуммаДок;
	ЦелаяЧасть = Цел(СуммаДок);
	
	Если (Результат - ЦелаяЧасть) = 0 Тогда
		Если СуммаБезКопеек Тогда
			Результат = Формат(Результат,"ЧДЦ=2; ЧРД='='; ЧГ=0");
			Результат = Лев(Результат,Найти(Результат,"="));
		Иначе
			Результат = Формат(Результат,"ЧДЦ=2; ЧРД='-'; ЧГ=0");
		КонецЕсли;
	Иначе
		Результат = Формат(Результат,"ЧДЦ=2; ЧРД='-'; ЧГ=0");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСумму()

// Процедура выполняет заполнение суммы документа,
// по регистру "СуммыЗаказов".
//
// Параметры:
//  ДокументОснование  - документ ссылка (Заказ покупателя, Заказ поставщику).
//  ВалютаДокумента    - валюта документа (валюта регламентированного учета организаций)
//  КурсВзаиморасчетов - курс взаиморасчетов по договору
//  КратностьВзаиморасчетов - кратность взаиморасчетов по договору
//
Процедура ЗаполнитьПоЗаказуУпр(ДокументОснование, СтрокаПлатеж)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", ДокументОснование);
	
	Запрос.Текст ="ВЫБРАТЬ
	|	РасчетыСКонтрагентамиОстатки.Сделка Как Сделка,
	|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(, Сделка = &Заказ) КАК РасчетыСКонтрагентамиОстатки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Сделка = Выборка.Сделка;
		Если Выборка.Сумма < 0 Тогда
			СтрокаПлатеж.СуммаВзаиморасчетов = Выборка.Сумма*(-1);
			СуммаДокумента = ПересчитатьИзВалютыВВалюту(Выборка.Сумма*(-1),
			СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
			ВалютаДокумента,
			СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
			СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
			
			СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоЗаказуУпр()

// Процедура выполняет заполнение суммы документа,
// суммы взаиморасчетов по регистру "КонтрагентыВзаиморасчетыКомпании".
//
Процедура ЗаполнитьПоВзаиморасчетамУпр(СтрокаПлатеж)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорКонтрагента", СтрокаПлатеж.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка", СтрокаПлатеж.Сделка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СуммаВзаиморасчетовОстаток КАК СуммаДолга // в валюте взаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(,
	|	                                                    ДоговорКонтрагента = &ДоговорКонтрагента
	|	                                                    И Сделка = &Сделка)
	|ГДЕ
	|	СуммаВзаиморасчетовОстаток < 0
	|
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаДолга*(-1);
		СуммаДокумента = ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
		                            СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента,
		                            СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
		                            СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
									
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;							
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоВзаиморасчетамУпр()

// Заполняет сумму документа и сумму взаиморасчетов на основании остатка
// по заявке в регистре "ЗаявкиНаРасходованиеСредств"
//
Процедура ЗаполнитьПоЗаявкеППУпр() Экспорт
	
	// Проверяем соответствие суммы взаиморасчетов документа сумме взаиморасчетов заявки
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗаявкиНаРасходованиеСредствОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	|	ЗаявкиНаРасходованиеСредствОстатки.СуммаОстаток КАК СуммаПлатежа,
	|	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.Контрагент КАК Контрагент,
	|	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента.Владелец.ОсновнойБанковскийСчет КАК СчетКонтрагента,
	|	ЗаявкиНаРасходованиеСредствОстатки.Сделка КАК Сделка,
	|   ЗаявкиНаРасходованиеСредствОстатки.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|   ЗаявкиНаРасходованиеСредствОстатки.Проект КАК Проект,
	|   ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.ВалютаВзаиморасчетовПодотчетника КАК ВалютаВзаиморасчетовПодотчетника,
	|   ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.РасчетныйДокумент КАК РасчетныйДокумент,
	|   ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.Ссылка КАК ЗаявкаНаРасходование,
	|   ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.Получатель КАК Получатель
	|	
	|ИЗ
	|	РегистрНакопления.ЗаявкиНаРасходованиеСредств.Остатки(, ЗаявкаНаРасходование = &ДокументЗаявка) КАК ЗаявкиНаРасходованиеСредствОстатки";
	
	Запрос.УстановитьПараметр("ДокументЗаявка",ДокументОснование);
	
	СтавкаНДС=ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяСтавкаНДС");
	
	РезультатЗапроса=Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога
			ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщикуСКодомКБК Тогда
			
			СтрокаПлатеж   = РасшифровкаПлатежа.Добавить();
			СтрокаПлатеж.СуммаПлатежа = Выборка.СуммаПлатежа;
			Контрагент=Выборка.Контрагент;
						
		Иначе
			
			Контрагент = Выборка.Контрагент;
			
			Если НЕ ЗначениеНеЗаполнено(Контрагент) Тогда
				СчетКонтрагента = Выборка.СчетКонтрагента;
			КонецЕсли;
						
			СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
			
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаВзаиморасчетов;
			СтрокаПлатеж.СуммаПлатежа = Выборка.СуммаПлатежа;
			
			Если ВалютаДокумента = Выборка.ВалютаВзаиморасчетов Тогда
				СтрокаПлатеж.КурсВзаиморасчетов      = КурсДокумента;
				СтрокаПлатеж.КратностьВзаиморасчетов = КратностьДокумента;
			Иначе
				
				СтруктураКурсВзаиморасчетов=ПолучитьКурсВалюты(Выборка.ВалютаВзаиморасчетов,);
				СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсВзаиморасчетов.Кратность;
				
				Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
					СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
					/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
				КонецЕсли;
				
			КонецЕсли;	
			
			СтрокаПлатеж.СтавкаНДС=СтавкаНДС;
			СтрокаПлатеж.Сделка=Выборка.Сделка;
			СтрокаПлатеж.ДоговорКонтрагента=Выборка.ДоговорКонтрагента;
			ПересчитатьСуммуНДС(СтрокаПлатеж);
			
		КонецЕсли;
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Выборка.СтатьяДвиженияДенежныхСредств;
		СтрокаПлатеж.Проект=Выборка.Проект;
		СтрокаПлатеж.ДокументПланированияПлатежа=Выборка.ЗаявкаНаРасходование;
		СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаПлатежа;
		СтрокаПлатеж.КурсВзаиморасчетовПлан=СтрокаПлатеж.КурсВзаиморасчетов;
		
	КонецЦикла;
	
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры // ЗаполнитьПоЗаявкеППУпр()

Процедура ЗаполнитьПоЗаявкеЯШТ(ПерезаполнятьРасшифровкуПлатежа = Ложь)  Экспорт
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику ИЛИ
		ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщикуСКодомКБК ИЛИ
		ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами ИЛИ
		ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами ИЛИ
		ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств ИЛИ 
		ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога или
		ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю ИЛИ
		ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику
		Тогда
	Иначе	
		Возврат;
	КонецЕсли;	
	
	Если ДокументОснование.ФормаОплаты <> Перечисления.ВидыДенежныхСредств.Безналичные Тогда
		Сообщить("На основании документа заявки возможен ввод только наличных денежных средств",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;	
	
	СтавкаНДС = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяСтавкаНДС");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.КурсВзаиморасчетов,
	               |	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.КратностьВзаиморасчетов,
	               |	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СтавкаНДС,
	               |	ЗаявкиНаРасходованиеСредствОстатки.СуммаУпрОстаток КАК СуммаПлатежа,
	               |	ЗаявкиНаРасходованиеСредствОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	               |	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ДоговорКонтрагента,
	               |	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Сделка,
	               |	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка,
	               |	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СтатьяЗатрат,
	               |	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.Подразделение КАК Подразделение
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.Контрагент КАК Контрагент,
	               |		ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	               |		ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	               |		ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
	               |		ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	               |		ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	               |		ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка КАК Ссылка,
	               |		ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |		ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Сделка КАК Сделка,
	               |		ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СтатьяЗатрат КАК СтатьяЗатрат
	               |	ИЗ
	               |		Документ.ЗаявкаНаРасходованиеСредств.РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа
	               |	ГДЕ
	               |		ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка = &ДокументЗаявка) КАК ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаявкиНаРасходованиеСредств.Остатки КАК ЗаявкиНаРасходованиеСредствОстатки
	               |		ПО ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка = ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование
	               |			И ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Сделка = ЗаявкиНаРасходованиеСредствОстатки.Сделка";
		
	Запрос.УстановитьПараметр("ДокументЗаявка",ДокументОснование);
	//Запрос.УстановитьПараметр("ДатаРасхода",?(ЗначениеНеЗаполнено(ДатаОплаты),Дата,ДатаОплаты));
	//ОЛ 04.12.2014 вместо верхнего, т.к. при заполнении на основании Дата еще не заполнена
	//***рудимент Запрос.УстановитьПараметр("ДатаРасхода",?(ЗначениеНеЗаполнено(ДатаОплаты),?(ЗначениеНеЗаполнено(Дата),НачалоДня(ТекущаяДата()),Дата),ДатаОплаты));
	//конец ОЛ
	
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если НЕ ПерезаполнятьРасшифровкуПлатежа Тогда
		Контрагент = ДокументОснование.Контрагент;
		СчетКонтрагента = ДокументОснование.БанковскийСчетКонтрагента; 
	КонецЕсли;
	
	СтрОплатаПоСчету = "";
	ТЗсчетов = Новый ТаблицаЗначений;
	ТЗсчетов.Колонки.Добавить("НомерСчета", Новый ОписаниеТипов("Строка"));
	ТЗсчетов.Колонки.Добавить("СуммаСчета", Новый ОписаниеТипов("Число"));
	ТЗсчетов.Колонки.Добавить("СуммаСчетаНДС", Новый ОписаниеТипов("Число"));
		
	сч=0;
	Пока Выборка.Следующий() Цикл
		Если ПерезаполнятьРасшифровкуПлатежа и сч=0 Тогда 
			// первую строку не удаляем, а перезаписываем
			СтрокаПлатеж = РасшифровкаПлатежа[0];
		Иначе	
			// если ввод на основании заявки
			СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		КонецЕсли;	
		СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаВзаиморасчетов;
		СтрокаПлатеж.СуммаПлатежа = Выборка.СуммаПлатежа;
		СтрокаПлатеж.КурсВзаиморасчетов      = Выборка.КурсВзаиморасчетов;
		СтрокаПлатеж.КратностьВзаиморасчетов = Выборка.КратностьВзаиморасчетов;
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику ИЛИ
			ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами ИЛИ
			ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами или
			ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю 
		Тогда
			СтрокаПлатеж.ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
			СтрокаПлатеж.Сделка = Выборка.Сделка;
		КонецЕсли;
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику Тогда 
			СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщику;
		КонецЕсли;
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога 
			или ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщикуСКодомКБК  Тогда
			СтатусСоставителя	 = Выборка.Ссылка.СтатусСоставителя;
			КодБК				 = Выборка.Ссылка.КодБК;
			КодОКАТО			 = Выборка.Ссылка.КодОКАТО;
			ПоказательОснования	 = Выборка.Ссылка.ПоказательОснования;
			ПоказательПериода	 = Выборка.Ссылка.ПоказательПериода;
			ПоказательДаты		 = Выборка.Ссылка.ПоказательДаты;
			Код					 = Выборка.Ссылка.Код;
			СерияНомерПаспорта	 = Выборка.Ссылка.СерияНомерПаспорта;
			//Плотников 22.12.2016
			КонтрагентТранзит    = ДокументОснование.КонтрагентТранзит;
			ДоговорТранзит       = ДокументОснование.ДоговорТранзит;
			//
		КонецЕсли;
		
		//***2018.04.22
		Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
			ФизЛицо								 = ДокументОснование.Получатель;
			РасчетныйДокументРаботника			 = ДокументОснование.РасчетныйДокумент;
			ДатаПогашенияАванса					 = ДокументОснование.ДатаПогашенияАванса;
			ВалютаВзаиморасчетовРаботника		 = ДокументОснование.ВалютаДокумента;
			СтрокаПлатеж.КурсВзаиморасчетов      = КурсДокумента;
			СтрокаПлатеж.КратностьВзаиморасчетов = КратностьДокумента;
			СтрокаПлатеж.СуммаВзаиморасчетов	 = ДокументОснование.СуммаДокумента;
			СтрокаПлатеж.СуммаПлатежа			 = ДокументОснование.СуммаДокумента;
			СтрокаПлатеж.КурсВзаиморасчетовПлан  = ДокументОснование.КурсДокумента;
		КонецЕсли;
		
		Если НЕ Выборка.СтатьяЗатрат = Справочники.СтатьиЗатрат.ПустаяСсылка() Тогда
			ОтражатьВЗатратах = Истина;
			СтрТЧЗатраты				 = Затраты.Добавить();
			СтрТЧЗатраты.СтатьяЗатрат	 = Выборка.СтатьяЗатрат;
			СтрТЧЗатраты.Подразделение	 = Выборка.Подразделение;
			СтрТЧЗатраты.Сумма			 = Выборка.СуммаПлатежа;
		КонецЕсли;
			
		СтрокаПлатеж.ДокументПланированияПлатежа = ДокументОснование.Ссылка;
		СтрокаПлатеж.СуммаПлатежаПлан = Выборка.СуммаПлатежа;
		//по доп. расходам заполнение суммы НДС из счета, заполнение назначения платежа номерами счетов
		Если ЗначениеЗаполнено(СтрокаПлатеж.Сделка) И ТипЗнч(СтрокаПлатеж.Сделка) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
			СтрокаПлатеж.СтавкаНДС = СтрокаПлатеж.Сделка.СтавкаНДС;
			Если ЗначениеНеЗаполнено(СтрокаПлатеж.СтавкаНДС) Тогда
				СтрокаПлатеж.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			КонецЕсли;	
			Если Выборка.СуммаПлатежа = СтрокаПлатеж.Сделка.СуммаДокумента Тогда
				СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.Сделка.СуммаНДС;
			ИначеЕсли СтрокаПлатеж.Сделка.СуммаДокумента <> 0 Тогда 
				//НДС пропорционально сумме оплаты
				СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.Сделка.СуммаНДС*(Выборка.СуммаПлатежа/СтрокаПлатеж.Сделка.СуммаДокумента);
			Иначе
				СтрокаПлатеж.СуммаНДС = 0;
			КонецЕсли;	
			Если СокрЛП(СтрокаПлатеж.Сделка.НомерСчета)<>"" Тогда
				ТекСтрОплатаПоСчету = СокрЛП(СтрокаПлатеж.Сделка.НомерСчета)+" от "+Формат(СтрокаПлатеж.Сделка.ДатаСчета, "ДФ=dd.MM.yyyy");
				Если Найти(СтрОплатаПоСчету, ТекСтрОплатаПоСчету)=0 Тогда
					СтрОплатаПоСчету = СтрОплатаПоСчету+ТекСтрОплатаПоСчету+", ";
				КонецЕсли;	
			КонецЕсли;
			//ОЛ 26.12.2014
			//Для Юниверсал логистик сумма НДС считается по каждому счету как сумма/118*18 и потом суммируется
			Если СокрЛП(Контрагент.Код) = "93345" Тогда
				ТЗсчетовСтр = ТЗсчетов.Добавить();
				ТЗсчетовСтр.НомерСчета = СтрокаПлатеж.Сделка.НомерСчета;
				ТЗсчетовСтр.СуммаСчета = Выборка.СуммаПлатежа;
			КонецЕсли;
			//конец ОЛ
		Иначе
			Если ЗначениеЗаполнено(Выборка.СтавкаНДС) Тогда
				СтрокаПлатеж.СтавкаНДС=Выборка.СтавкаНДС;
			Иначе	
				СтрокаПлатеж.СтавкаНДС=СтавкаНДС;
			КонецЕсли;
			ПересчитатьСуммуНДС(СтрокаПлатеж);
		КонецЕсли;
		
		сч=сч+1;		
	КонецЦикла;
	СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
	//ОЛ 26.12.2014
	//для Юниверсал логистик сумма НДС должна совпадать с суммой НДС по всем счетам
	Если ТЗсчетов.Количество() > 0 И СокрЛП(Контрагент.Код) = "93345" Тогда
		ТЗсчетов.Свернуть("НомерСчета", "СуммаСчета, СуммаСчетаНДС");
		Для Каждого ТЗсчетовСтр из ТЗсчетов Цикл
			ТЗсчетовСтр.СуммаСчетаНДС = Окр(ТЗсчетовСтр.СуммаСчета/118*18,2,1);
		КонецЦикла;
		Если ТЗсчетов.Итог("СуммаСчетаНДС")<>РасшифровкаПлатежа.Итог("СуммаНДС") Тогда
			//нужно в расшифровке платежа заполнить сумму НДС, чтобы итоги совпадали
			Для Каждого РасшифровкаПлатежаСтр из РасшифровкаПлатежа Цикл
				Если ТипЗнч(РасшифровкаПлатежаСтр.Сделка)=Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
					РасшифровкаПлатежаСтр.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
					ТекНомСчета = РасшифровкаПлатежаСтр.Сделка.НомерСчета;
					НайденнаяСтрока  = ТЗсчетов.Найти(ТекНомСчета,"НомерСчета");
					Если НайденнаяСтрока <> Неопределено Тогда
						РасшифровкаПлатежаСтр.СуммаНДС = макс(0,мин(Окр(РасшифровкаПлатежаСтр.СуммаПлатежа/118*18,2,1), НайденнаяСтрока.СуммаСчетаНДС));
						НайденнаяСтрока.СуммаСчетаНДС = НайденнаяСтрока.СуммаСчетаНДС-РасшифровкаПлатежаСтр.СуммаНДС;
						Если НайденнаяСтрока.СуммаСчетаНДС < 0 Тогда
							НайденнаяСтрока.СуммаСчетаНДС = 0;
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
			Если ТЗсчетов.Итог("СуммаСчетаНДС") <> 0 и РасшифровкаПлатежа.Количество() > 0 Тогда
				//остались копейки, в первую строку их
				РасшифровкаПлатежа[0].СуммаНДС = РасшифровкаПлатежа[0].СуммаНДС+ТЗсчетов.Итог("СуммаСчетаНДС");
			КонецЕсли;	 
		КонецЕсли;	
	КонецЕсли;
	//конец ОЛ
	
	//19.08.14 Смирнов
	ОжидаемыйСрокПоставки = ДокументОснование.ОжидаемыйСрокПоставки;
	
	//заполнение назначения платежа
	СтрОплатаПоСчету = СокрЛП(СтрОплатаПоСчету);
	Если СтрОплатаПоСчету<>"" Тогда
		СтрОплатаПоСчету = Лев(СтрОплатаПоСчету, СтрДлина(СтрОплатаПоСчету)-1);
		НазначениеПлатежа = "Оплата по счету "+СтрОплатаПоСчету+Символы.ПС+"Сумма";
	ИначеЕсли СокрЛП(ДокументОснование.НазначениеПлатежа)<>"" Тогда
		НазначениеПлатежа = СокрЛП(ДокументОснование.НазначениеПлатежа)+Символы.ПС+"Сумма";
	КонецЕсли;
		
КонецПроцедуры	



Функция Проверить()

	Ошибка = Новый СписокЗначений();

	П101 = СокрЛП(СтатусСоставителя);
	П104 = СокрЛП(КодБК);
	П105 = СокрЛП(КодОКАТО);
	П106 = СокрЛП(ПоказательОснования);
	П107 = ?(ПустаяСтрока(СокрЛП(СтрЗаменить(ПоказательПериода,".","")))=1,"", ПоказательПериода);
	П107 = ?(СокрЛП(СтрЗаменить(ПоказательПериода,".",""))="0","",ПоказательПериода);
	П108 = СокрЛП(ПоказательНомера);
	П109 = ПоказательДаты;
	П110 = СокрЛП(ПоказательТипа);

	Если (Найти("01,02,03,04,05,06,07,08,09,10,11,12,13,14,15", П101) =0) или
		(ПустаяСтрока(СокрЛП(П101))) Тогда

		Ошибка.Добавить("Неверное значение поля ""Статус составителя"".");
	КонецЕсли;

	Если (СтрЗаменить(П104,"0","")="")и(Найти("06,07", П101) =0) Тогда

		Ошибка.Добавить("Необходимо заполнить поле ""Код БК"".");
	КонецЕсли;
	
	Если ПустаяСтрока(П105) Тогда
		Ошибка.Добавить("Необходимо заполнить поле ""Код ОКАТО"".");
	КонецЕсли;

	// Проверяем в зависимости от статуса составителя
	Если П101 = "08" Тогда
		Если СтрЗаменить(П106,"0","")<>"" Тогда 
			Ошибка.Добавить("При статусе составителя ""08"" не следует заполнять поле ""Основание платежа"".");
		КонецЕсли;
		Если СтрЗаменить(П107,"0","")<>"" Тогда
			Ошибка.Добавить("При статусе составителя ""08"" не следует заполнять поле ""Период"".");
		КонецЕсли;
		Если СтрЗаменить(П108,"0","")<>"" Тогда
			Ошибка.Добавить("При статусе составителя ""08"" не следует заполнять поле ""Номер"".");
		КонецЕсли;
		Если ЗначениеНеЗаполнено(П109) = Ложь Тогда
			Ошибка.Добавить("При статусе составителя ""08"" не следует заполнять поле ""Дата"".");
		КонецЕсли;
		Если СтрЗаменить(П110,"0","")<>"" Тогда
			Ошибка.Добавить("При статусе составителя ""08"" не следует заполнять поле ""Тип платежа"".");
		КонецЕсли;
	Иначе
		// Проверяем в зависимости от основания платежа
		Если СтрЗаменить(СокрЛП(П106),"0","") = "" Тогда
			Если СтрЗаменить(П107,"0","")<>"" Тогда
				Если ЗначениеНеЗаполнено(П107) Тогда
					Ошибка.Добавить("Возможно, неверно указана дата в поле ""Период""."); 
				КонецЕсли;
			КонецЕсли;
			Если СтрЗаменить(П109,"0","")<>"" Тогда
				Если ЗначениеНеЗаполнено(Дата(П109)) Тогда
					Ошибка.Добавить("Возможно, неверно указана дата в поле ""Дата""."); 
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрДлина(П106)<>2 Тогда
			Ошибка.ДобавитьЗначение("Возможно, неверно заполнено поле ""Основание платежа"".");
			Если СтрЗаменить(П107,"0","")<>"" Тогда
				Если ЗначениеНеЗаполнено(П107) Тогда
					Ошибка.Добавить("Возможно, неверно указана дата в поле ""Период""."); 
				КонецЕсли;
			КонецЕсли;
			Если СтрЗаменить(П109,"0","")<>"" Тогда
				Если ЗначениеНеЗаполнено(Дата(П109)) Тогда
					Ошибка.Добавить("Возможно, неверно указана дата в поле ""Дата""."); 
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Найти("АП, АР", П106) > 0 Тогда
			Если СтрЗаменить(П107,"0","")<>"" Тогда
				Ошибка.Добавить("При основании платежа ""АП"" или ""АР"" в поле ""Период"" необходимо указывать ""0"".");
			КонецЕсли;
		ИначеЕсли Найти("ТР, РС, ОТ, РТ, ВУ, ПР", П106) > 0 Тогда
			Если СтрЗаменить(П107,"0","")<>"" Тогда
				Если ЗначениеНеЗаполнено(П107) Тогда
					Ошибка.Добавить("Возможно, неверно указана дата в поле ""Период""."); 
				КонецЕсли;
			КонецЕсли;
			Если СтрЗаменить(П109,"0","")<>"" Тогда
				Если ЗначениеНеЗаполнено(Дата(П109)) Тогда
					Ошибка.Добавить("Возможно, неверно указана дата в поле ""Дата""."); 
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Найти("ТП ,ЗД ", П106) > 0 Тогда
			Если СтрЗаменить(П107,"0","")<>"" Тогда
				ДД = Сред((П107), 1, 2);
				ММ = Сред((П107), 4, 2);
				ГГ = Сред((П107), 7, 4);
				
				Если НЕ ММ="" Тогда
					ММ = Число(Сред((П107), 4, 2));
				Иначе
					ММ = 0;
				КонецЕсли;	
							
				Если НЕ ГГ="" Тогда
					ГГ = Число(Сред((П107), 7, 4));
				Иначе
					ГГ = 0;
				КонецЕсли;
				
				Если (Найти("Д1, Д2, Д3, МС", ДД) > 0) Тогда
					Если (ММ<1)или
						(ММ>12)или 
						(ГГ<2000)или
						(СтрДлина(П107)-СтрДлина(СтрЗаменить(П107,".",""))<>2) Тогда
						Ошибка.Добавить("Возможно, неверно указана дата в поле ""Период""."); 
					КонецЕсли;
				ИначеЕсли (Найти("КВ", ДД) > 0) Тогда
					Если (ММ<1)или
						(ММ>4)или 
						(ГГ<2000)или
						(СтрДлина(П107)-СтрДлина(СтрЗаменить(П107,".",""))<>2) Тогда
							Ошибка.Добавить("Неверно указан показатель налогового периода в поле ""Период"".");
					КонецЕсли;
				ИначеЕсли (Найти("ПЛ", ДД) > 0) Тогда
					Если (ММ<1)или
						(ММ>2)или 
						(ГГ<2000)или
						(СтрДлина(П107)-СтрДлина(СтрЗаменить(П107,".",""))<>2) Тогда
							Ошибка.Добавить("Неверно указан показатель налогового периода в поле ""Период"".");
					КонецЕсли;
				ИначеЕсли (Найти("ГД", ДД) > 0) Тогда
					Если (ММ<>0)или
						(ГГ<2000)или
						(СтрДлина(П107)-СтрДлина(СтрЗаменить(П107,".",""))<>2) Тогда
							Ошибка.Добавить("Неверно указан показатель налогового периода в поле ""Период"".");
					КонецЕсли;
				Иначе
					Если ЗначениеНеЗаполнено(П107) Тогда
						Ошибка.Добавить("Возможно, неверно указана дата в поле ""Период""."); 
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если СтрЗаменить(П108,"0","")<>"" Тогда
				Ошибка.Добавить("При основании платежа ""ТП"" или ""ЗД"" в поле ""Номер"" необходимо указывать ""0"".");
			КонецЕсли;
			Если Найти("ЗД ", П106) > 0 Тогда
				Если СтрЗаменить(П109,"0","")<>"" Тогда
					Ошибка.Добавить("Не должна заполнятся дата");
				КонецЕсли;
			Иначе
				Если СтрЗаменить(П109,"0","")<>"" Тогда
					Если ЗначениеНеЗаполнено(Дата(П109)) Тогда
						Ошибка.Добавить("Возможно, неверно указана дата в поле ""Дата""."); 
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Найти("БФ", П106) > 0 Тогда
		Иначе
			Ошибка.Добавить("Неверно указано значение в поле ""Основание платежа"".");
		КонецЕсли;
		Если СтрЗаменить(П110,"0","")="" Тогда
		ИначеЕсли Найти("НС, АВ, ПЕ, ПЦ, СА, АШ, ИШ, ПЛ, ГП, ВЗ", П110) > 0 Тогда
		Иначе
			Ошибка.Добавить("Некорректный тип платежа");
		КонецЕсли;
	КонецЕсли;

	//Выводим список найденых ошибок
	Для Ном = 0 по Ошибка.Количество()-1 Цикл
		Сообщить(Ошибка.Получить(Ном), СтатусСообщения.Важное);
	КонецЦикла;

	Возврат Ошибка;

КонецФункции // Проверить()


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Формирует печатную форму 
// платежного поручения
//
// Параметры:
//  ТабДок - табличный документ
//
Функция ПечатьПлатежногоПоручения() Экспорт

	Если Организация.Пустая() Тогда
		Сообщить("Не указана организация.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;

	Если Контрагент.Пустая() Тогда
		Сообщить("Не указан контрагент.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	НомерПечать=ПолучитьНомерНаПечать(ЭтотОбъект);
	
	Если Прав(НомерПечать,3)="000" Тогда
		Сообщить("Номер платежного поручения не может оканчиваться на ""000""!", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПлатежноеПоручение_ПлатежноеПоручение";
	
	Макет = ПолучитьОбщийМакет("ПлатежноеПоручение");
	Обл   = Макет.ПолучитьОбласть("ЗаголовокТаблицы");

	МесяцПрописью   = СчетОрганизации.МесяцПрописью;
	СуммаБезКопеек  = СчетОрганизации.СуммаБезКопеек;
	ФорматДаты      = "ДФ=" + ?(МесяцПрописью = 1,"'дд ММММ гггг'","'дд.ММ.гггг'");
	БанкОрганизации = ?(ЗначениеНеЗаполнено(СчетОрганизации.БанкДляРасчетов), СчетОрганизации.Банк, СчетОрганизации.БанкДляРасчетов);
	БанкКонтрагента = ?(ЗначениеНеЗаполнено(СчетКонтрагента.БанкДляРасчетов), СчетКонтрагента.Банк, СчетКонтрагента.БанкДляРасчетов);

	Обл.Параметры.НаименованиеНомер       = "ПЛАТЕЖНОЕ ПОРУЧЕНИЕ № " + НомерПечать;
	Обл.Параметры.ДатаДокумента           = Формат(Дата,ФорматДаты);
	Обл.Параметры.ВидПлатежа              = ВидПлатежа;
	Обл.Параметры.СуммаЧислом             = ФорматироватьСумму(СуммаДокумента,СуммаБезКопеек);
	Обл.Параметры.СуммаПрописью           = ФорматироватьСуммуПрописи(СуммаДокумента,СуммаБезКопеек);

	Обл.Параметры.ПлательщикИНН           = "ИНН " + ?(ПустаяСтрока(ИННПлательщика), Организация.ИНН, СокрЛП(ИННПлательщика));
	Обл.Параметры.ПлательщикКПП           = "КПП " + ?(ПустаяСтрока(КППплательщика),?(ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога,"0",""),СокрЛП(КППплательщика));
	Обл.Параметры.Плательщик              = ?(ПустаяСтрока(ТекстПлательщика),Организация.НаименованиеПолное,СокрЛП(ТекстПлательщика));
	Обл.Параметры.БанкПлательщика         = "" + БанкОрганизации + " " + БанкОрганизации.Город;

	Обл.Параметры.НомерСчетаПлательщика   = ВернутьРасчетныйСчет(СчетОрганизации);

	Обл.Параметры.БикБанкаПлательщика     = БанкОрганизации.Код;
	Обл.Параметры.СчетБанкаПлательщика    = БанкОрганизации.КоррСчет;
			
//	Если Контрагент2.Пустая() Тогда
		Обл.Параметры.ПолучательИНН           = "ИНН " + ?(ПустаяСтрока(ИННПолучателя), Контрагент.ИНН, СокрЛП(ИННПолучателя));
		Обл.Параметры.ПолучательКПП           = "КПП " + ?(ПустаяСтрока(КПППолучателя),?(ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога,"0",""),СокрЛП(КПППолучателя));
		Обл.Параметры.Получатель              = ?(ПустаяСтрока(ТекстПолучателя),Контрагент.НаименованиеПолное,СокрЛП(ТекстПолучателя));
					
		Обл.Параметры.БанкПолучателя          = "" + БанкКонтрагента + " " + БанкКонтрагента.Город;
		Обл.Параметры.БикБанкаПолучателя      = БанкКонтрагента.Код;
		Обл.Параметры.СчетБанкаПолучателя     = БанкКонтрагента.КоррСчет;

		Обл.Параметры.НомерСчетаПолучателя    = ВернутьРасчетныйСчет(СчетКонтрагента);
	//Иначе
	//	Обл.Параметры.ПолучательИНН           = "ИНН " + Контрагент2.ИНН;
	//	Обл.Параметры.ПолучательКПП           = "КПП " + ?(ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога,"0","");
	//	Обл.Параметры.Получатель              = Контрагент2.НаименованиеПолное;
	//				
	//	БанкКонтрагента = ?(ЗначениеНеЗаполнено(СчетКонтрагента2.БанкДляРасчетов), СчетКонтрагента2.Банк, СчетКонтрагента2.БанкДляРасчетов);
	//	
	//	Обл.Параметры.БанкПолучателя          = "" + БанкКонтрагента + " " + БанкКонтрагента.Город;
	//	Обл.Параметры.БикБанкаПолучателя      = БанкКонтрагента.Код;
	//	Обл.Параметры.СчетБанкаПолучателя     = БанкКонтрагента.КоррСчет;

	//	Обл.Параметры.НомерСчетаПолучателя    = ВернутьРасчетныйСчет(СчетКонтрагента2);
	//КонецЕсли;	

	Обл.Параметры.НазначениеПлатежа       = СокрЛП(НазначениеПлатежа);
	Обл.Параметры.Очередность             = ОчередностьПлатежа;
	Обл.Параметры.СрокПлатежа             = "";
	//***2014.04.09
	Обл.Параметры.Код			          = Код;

	Если ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда

		Проверить();

		Обл.Параметры.СтатусСоставителя   = ?(ПустаяСтрока(СтатусСоставителя),"0",СокрЛП(СтатусСоставителя));
		Обл.Параметры.КодБК               = ?(ПустаяСтрока(КодБК),"",СокрЛП(КодБК));
		Обл.Параметры.КодОКАТО            = ?(ПустаяСтрока(КодОКАТО),"",СокрЛП(КодОКАТО));
		Обл.Параметры.ПоказательОснования = ?(ПустаяСтрока(ПоказательОснования),"0",СокрЛП(ПоказательОснования));
		
		Обл.Параметры.ПоказательНомера    = ?(ПустаяСтрока(СерияНомерПаспорта),"","01;"+СокрЛП(СерияНомерПаспорта));       //23.11.2017 меняем на паспортные данные
		
		Обл.Параметры.ПоказательДаты      = ?(ПоказательДаты = '00010101000000',"0",Формат(ПоказательДаты,"ДФ='дд.ММ.гггг'"));
		Обл.Параметры.ПоказательТипа      = ?(ПустаяСтрока(ПоказательТипа),"0",СокрЛП(ПоказательТипа));
		Если (ПустаяСтрока(ПоказательПериода)) ИЛИ (ПоказательПериода = "  .  .    ") Тогда
			Обл.Параметры.ПоказательПериода = "0";
		Иначе
			Обл.Параметры.ПоказательПериода = СокрЛП(ПоказательПериода);
		КонецЕсли;

	КонецЕсли;

	ТабДокумент.Вывести(Обл);

	Возврат ТабДокумент;

КонецФункции // ПечатьПлатежногоПоручения()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "ПлатежноеПоручение" тогда

		// Управленческая печатная форма документа
		ТабДокумент = ПечатьПлатежногоПоручения();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();

	КонецЕсли;

	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;

	СписокМакетов.Добавить("ПлатежноеПоручение", "Платежное поручение");

	ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

#КонецЕсли

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейОплата()

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");
	СтруктураПолей.Вставить("СуммаДокумента");
	СтруктураПолей.Вставить("ДатаОплаты","Не указана дата оплаты документа банком!");

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()

// Формирует структуру полей, обязательных для заполнения при отражении операции во 
// взаиморасчетах
// Возвращаемое значение:
//   СтруктурахПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейРасчеты()
    		
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

		СтруктураПолей = Новый Структура("Организация, Контрагент, Ответственный");
		СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");

	Иначе

		СтруктураПолей = Новый Структура("Организация, СуммаДокумента,Ответственный");
		СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");

	КонецЕсли;

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()

// Проверяет значение, необходимое при проведении
Процедура ПроверитьЗначение(Значение, Отказ, Заголовок, ИмяРеквизита)

	Если ЗначениеНеЗаполнено(Значение) Тогда 

		ОшибкаПриПроведении("Не заполнено значение реквизита """+ИмяРеквизита+"""",Отказ, Заголовок);

	КонецЕсли;

КонецПроцедуры // ПроверитьЗначение()

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧ(Отказ, Заголовок)

	Для Каждого Платеж Из РасшифровкаПлатежа Цикл

		ПроверитьЗначение(Платеж.ДоговорКонтрагента,Отказ, Заголовок,"Договор");
		ПроверитьЗначение(Платеж.СуммаВзаиморасчетов,Отказ, Заголовок,"Сумма взаиморасчетов");

		Если Не Отказ Тогда

			// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
			Если Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
			 ИЛИ Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
              Если не Константы.ОплатыРаспределяютМенеджеры.Получить() Тогда
				ПроверитьЗначение(Платеж.Сделка, Отказ, Заголовок,"Сделка");
			  КонецЕсли;	
				Если Отказ Тогда
					Сообщить("По выбранному договору установлен способ ведения взаиморасчетов ""по заказам""! 
					|Заполните поле ""Сделка""!");
				КонецЕсли;

			КонецЕсли;

			Если Не ЗначениеНеЗаполнено(Организация) 
				И Организация <> Платеж.ДоговорКонтрагента.Организация Тогда
				СообщитьОбОшибке("Выбран договор контрагента, не соответстветствующий организации, указанной в документе!", Отказ, Заголовок);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТЧ

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, Отказ, Заголовок)

	РасчетыВозврат=НаправленияДвиженияДляДокументаДвиженияДенежныхСредствУпр(ВидОперации);
	КоэффициентСторно=?(РасчетыВозврат=Перечисления.РасчетыВозврат.Возврат,-1,1);
	
	РасчетыСКонтрагентами = ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам;
	
	ДвиженияПоСтатьям=ТаблицаПлатежейУпр.Скопировать();
	ДвиженияПоЗаявкам=ТаблицаПлатежейУпр.Скопировать();
	ДвиженияПоРезерву=ТаблицаПлатежейУпр.Скопировать();
	ДвиженияПоКонтрагентам=ТаблицаПлатежейУпр.Скопировать();
	ДвиженияДенежныхСредств=ТаблицаПлатежейУпр.Скопировать();
	
	ДвиженияПоЗаявкам.Свернуть("ДокументПланированияПлатежа,ВключатьВПлатежныйКалендарь,ДоговорКонтрагента,Сделка,СтатьяДвиженияДенежныхСредств,Проект","СуммаПлатежа,СуммаВзаиморасчетов,СуммаПлатежаПлан,СуммаУпр");
	ДвиженияПоКонтрагентам.Свернуть("ДоговорКонтрагента,Сделка,ВидДоговора, КонтролироватьДенежныеСредстваКомитента","СуммаВзаиморасчетов,СуммаУпр,СуммаРегл");
	ДвиженияДенежныхСредств.Свернуть("ДокументПланированияПлатежа,ДоговорКонтрагента,Сделка,СтатьяДвиженияДенежныхСредств,Проект","СуммаПлатежа,СуммаУпр");
	ДвиженияПоСтатьям.Свернуть("СтатьяДвиженияДенежныхСредств","СуммаПлатежа");
	ДвиженияПоРезерву.Свернуть("ДокументПланированияПлатежа","СуммаПлатежаПлан");
	
	ДвиженияДенежныхСредств.Колонки["СуммаПлатежа"].Имя="Сумма";
	
	Если Оплачено Тогда
		
		// По регистру "Денежные средства"
		НаборДвиженийОстатки 		= Движения.ДенежныеСредства;
		ТаблицаДвиженийОстатки 		= НаборДвиженийОстатки.Выгрузить();
		
		// По регистру "Денежные средства к списанию"
		НаборДвиженийСписание   = Движения.ДенежныеСредстваКСписанию;
		ТаблицаДвиженийСписание = НаборДвиженийСписание.Выгрузить();
		
		СтрокаКурсыВалют=ТаблицаПлатежейУпр[0];
		
		СуммаУпр = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
		Константы.ВалютаУправленческогоУчета.Получить(), 
		СтрокаКурсыВалют.КурсДокумента,
		СтрокаКурсыВалют.КурсУпрУчета, 
		СтрокаКурсыВалют.КратностьДокумента,
		СтрокаКурсыВалют.КратностьУпрУчета);
		
		СтрокаДвиженийОстатки = ТаблицаДвиженийОстатки.Добавить();
		СтрокаДвиженийОстатки.БанковскийСчетКасса = СчетОрганизации;
		СтрокаДвиженийОстатки.ВидДенежныхСредств  = Перечисления.ВидыДенежныхСредств.Безналичные;
		СтрокаДвиженийОстатки.Сумма               = СуммаДокумента;
		СтрокаДвиженийОстатки.СуммаУпр            = СуммаУпр;
		
		// По регистру "Денежные средства к списанию"
		Для Каждого СтрокаДвижение Из ДвиженияПоСтатьям Цикл
			
			СтрокаДвиженийСписание = ТаблицаДвиженийСписание.Добавить();
			СтрокаДвиженийСписание.БанковскийСчетКасса = СчетОрганизации;
			СтрокаДвиженийСписание.ВидДенежныхСредств  = Перечисления.ВидыДенежныхСредств.Безналичные;
			СтрокаДвиженийСписание.Сумма               = СтрокаДвижение.СуммаПлатежа;
			СтрокаДвиженийСписание.ДокументСписания    = Ссылка;
			СтрокаДвиженийСписание.СтатьяДвиженияДенежныхСредств=СтрокаДвижение.СтатьяДвиженияДенежныхСредств;
			
		КонецЦикла;
		
		НаборДвиженийОстатки.мПериод              = ДатаОплаты; //КонецДня(ДатаОплаты);
		НаборДвиженийОстатки.мТаблицаДвижений     = ТаблицаДвиженийОстатки;
		Движения.ДенежныеСредства.ВыполнитьРасход();
		
		НаборДвиженийСписание.мПериод              = ДатаОплаты; //КонецДня(ДатаОплаты);
		НаборДвиженийСписание.мТаблицаДвижений     = ТаблицаДвиженийСписание;
		Движения.ДенежныеСредстваКСписанию.ВыполнитьРасход();	
		
	КонецЕсли;
	
	Если ОтраженоВОперУчете Тогда
		
		// По регистру "Денежные средства к списанию"
		НаборДвиженийДС   = Движения.ДенежныеСредстваКСписанию;
		ТаблицаДвиженийДС = НаборДвиженийДС.Выгрузить();
		ТаблицаДвиженийДС.Очистить();
		
		Для Каждого СтрокаДвижение Из ДвиженияПоСтатьям Цикл
			
			СтрокаДвиженийДС = ТаблицаДвиженийДС.Добавить();
			СтрокаДвиженийДС.БанковскийСчетКасса = СчетОрганизации;
			СтрокаДвиженийДС.ВидДенежныхСредств  = Перечисления.ВидыДенежныхСредств.Безналичные;
			//Плотников, пересчет валюты, если переводим со счета на счет
			Если СчетКонтрагента.ВалютаДенежныхСредств <> СчетОрганизации.ВалютаДенежныхСредств Тогда
				СтрокаДвиженийДС.Сумма = СуммаКорреспондента;
			иначе
				СтрокаДвиженийДС.Сумма = СтрокаДвижение.СуммаПлатежа;
			КонецЕсли;
			СтрокаДвиженийДС.ДокументСписания    = Ссылка;
			Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
				СтрокаДвиженийДС.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ПеречислениеМеждуСчетами;	
			Иначе
				СтрокаДвиженийДС.СтатьяДвиженияДенежныхСредств=СтрокаДвижение.СтатьяДвиженияДенежныхСредств;
			КонецЕсли;
		КонецЦикла;
		
		// { Лапенков 20061117  для перемещения Д/C между счетами
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
			ДвижениеПриход=Движения.ДенежныеСредства.ДобавитьПриход();
			ДвижениеПриход.Период= ДатаОплаты; //КонецДня(ДатаОплаты);
			ДвижениеПриход.БанковскийСчетКасса= СчетКонтрагента ;
			ДвижениеПриход.ВидДенежныхСредств=Перечисления.ВидыДенежныхСредств.Безналичные;
			//Плотников, пересчет валюты, если переводим со счета на счет
			Если СчетКонтрагента.ВалютаДенежныхСредств <> СчетОрганизации.ВалютаДенежныхСредств Тогда
				ДвижениеПриход.Сумма=СуммаКорреспондента;
			иначе
				ДвижениеПриход.Сумма=СуммаДокумента;
			КонецЕсли;
			ДвижениеПриход.СуммаУпр=СуммаУпр;
			// Расход по регистру  Движения ДС
			
			ДвижениеДСРасход=Движения.ДвиженияДенежныхСредств.Добавить();
			ДвижениеДСРасход.Период= ДатаОплаты; //КонецДня(ДатаОплаты);
			ДвижениеДСРасход.БанковскийСчетКасса= СчетКонтрагента ;
			ДвижениеДСРасход.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ПеречислениеМеждуСчетами;
			ДвижениеДСРасход.ВидДенежныхСредств=Перечисления.ВидыДенежныхСредств.Безналичные;
			ДвижениеДСРасход.ПриходРасход=Перечисления.ВидыДвиженийПриходРасход.Приход;
			ДвижениеДСРасход.ДокументДвижения=Ссылка;
			//Плотников, пересчет валюты, если переводим со счета на счет
			Если СчетКонтрагента.ВалютаДенежныхСредств <> СчетОрганизации.ВалютаДенежныхСредств Тогда
				ДвижениеДСРасход.Сумма=СуммаКорреспондента;
			иначе
				ДвижениеДСРасход.Сумма=СуммаДокумента;
			КонецЕсли;
			ДвижениеДСРасход.СуммаУпр=СуммаУпр ;
			
		КонецЕсли;	
		// } Лапенков 20061117
		
		НаборДвиженийДС.мПериод              = Дата;
		НаборДвиженийДС.мТаблицаДвижений     = ТаблицаДвиженийДС;
		Движения.ДенежныеСредстваКСписанию.ВыполнитьПриход();
		
		ЕстьРезерв=Ложь;
		ЕстьРазмещение=Ложь;
		ЕстьЗаявка=Ложь;
		ЕстьРасчеты=Ложь;
		
		// По регистру "Денежные средства в резерве"
		НаборДвиженийРезерв   = Движения.ДенежныеСредстваВРезерве;
		ТаблицаДвиженийРезерв = НаборДвиженийРезерв.Выгрузить();
		ТаблицаДвиженийРезерв.Очистить();
		
		// По регистру "Размещение заявок на расходование средств"
		НаборДвиженийРазмещение  = Движения.РазмещениеЗаявокНаРасходованиеСредств;
		ТаблицаДвиженийРазмещение = НаборДвиженийРазмещение.Выгрузить();
		ТаблицаДвиженийРазмещение.Очистить();
		
		// По регистру "Заявки на расходование средств"
		НаборДвиженийЗаявки   = Движения.ЗаявкиНаРасходованиеСредств;
		ТаблицаДвиженийЗаявки = НаборДвиженийЗаявки.Выгрузить();
		ТаблицаДвиженийЗаявки.Очистить();
		
		// Проверим необходимость списания суммы платежного поручения по заявкам из регистра "ДенежныеСредстваРезерв"
		Для Каждого СтрокаЗаявка Из ДвиженияПоРезерву Цикл
			
			Если НЕ СтрокаЗаявка.ДокументПланированияПлатежа.Пустая() Тогда
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("ДокументЗаявка",СтрокаЗаявка.ДокументПланированияПлатежа);
				Запрос.УстановитьПараметр("БанковскийСчетКасса",СчетОрганизации);
				Запрос.Текст = "ВЫБРАТЬ
				|	ДенежныеСредстваВРезервеОстатки.СуммаОстаток КАК СуммаОстаток
				|ИЗ
				|	РегистрНакопления.ДенежныеСредстваВРезерве.Остатки(, ДокументРезервирования = &ДокументЗаявка И БанковскийСчетКасса=&БанковскийСчетКасса) КАК ДенежныеСредстваВРезервеОстатки";
				Результат = Запрос.Выполнить().Выбрать();
				
				Если Результат.Следующий() И (НЕ Результат.СуммаОстаток=NULL) Тогда
					
					СтрокаДвижений = ТаблицаДвиженийРезерв.Добавить();
					СтрокаДвижений.БанковскийСчетКасса = СчетОрганизации;
					СтрокаДвижений.ВидДенежныхСредств  = Перечисления.ВидыДенежныхСредств.Безналичные;
					СтрокаДвижений.Сумма               = ?(Результат.СуммаОстаток <СтрокаЗаявка.СуммаПлатежаПлан,Результат.СуммаОстаток,СтрокаЗаявка.СуммаПлатежаПлан);
					СтрокаДвижений.ДокументРезервирования = СтрокаЗаявка.ДокументПланированияПлатежа;
					
					ЕстьРезерв=Истина;
					
				КонецЕсли;
				
				Запрос=Новый Запрос;
				Запрос.Текст="ВЫБРАТЬ
				|	РазмещениеЗаявок.ДокументПланирования КАК ДокументПланирования,
				|	РазмещениеЗаявок.СуммаОстаток КАК СуммаОстаток,
				// Ранжируем планиуемые поступления для закрытия. Первыми закрывается размещение по планируемым поступлениям,
				// у которых совпадает счет, затем форма оплаты, затем организация.
				|	(ВЫБОР КОГДА РазмещениеЗаявок.ДокументПланирования.БанковскийСчетКасса=&СчетОрганизации
				|		Тогда 4
				|	Иначе 0
				|	Конец
				|  + ВЫБОР КОГДА РазмещениеЗаявок.ДокументПланирования.ФормаОплаты=&ФормаОплаты
				|		Тогда 2
				|	Иначе 0
				|	Конец
				|  + ВЫБОР КОГДА РазмещениеЗаявок.ДокументПланирования.Организация=&Организация
				|		Тогда 1
				|	Иначе 0
				|	Конец) КАК Релевантность,
				|	РазмещениеЗаявок.ДокументПланирования.ДатаПоступления КАК ДатаПоступления
				|ИЗ
				|	РегистрНакопления.РазмещениеЗаявокНаРасходованиеСредств.Остатки(, ДокументРезервирования=&ДокументРезервирования) КАК РазмещениеЗаявок
				|ГДЕ НЕ((РазмещениеЗаявок.СуммаОстаток) ЕСТЬ NULL )";
				
				Запрос.УстановитьПараметр("СчетОрганизации",СчетОрганизации);
				Запрос.УстановитьПараметр("ФормаОплаты",Перечисления.ВидыДенежныхСредств.Безналичные);
				Запрос.УстановитьПараметр("Организация",Организация);
				Запрос.УстановитьПараметр("ДокументРезервирования",СтрокаЗаявка.ДокументПланированияПлатежа);
				
				ТабРазмещение=Запрос.Выполнить().Выгрузить();
				
				ТабРазмещение.Сортировать("Релевантность Убыв,ДатаПоступления Возр");
				
				СуммаКСписанию=СтрокаЗаявка.СуммаПлатежаПлан;
				
				Для Каждого Строка Из ТабРазмещение Цикл
					
					ЕстьРазмещение=Истина;
					
					СтрокаДвижение=ТаблицаДвиженийРазмещение.Добавить();
					СтрокаДвижение.ДокументПланирования=Строка.ДокументПланирования;
					СтрокаДвижение.ДокументРезервирования=СтрокаЗаявка.ДокументПланированияПлатежа;
					
					Если Строка.СуммаОстаток>=СуммаКСписанию Тогда
						
						СтрокаДвижение.Сумма=СуммаКСписанию;
						Прервать;
						
					Иначе
						
						СтрокаДвижение.Сумма=Строка.СуммаОстаток;
						СуммаКСписанию=СуммаКСписанию-Строка.СуммаОстаток;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьРезерв тогда
			
			НаборДвиженийРезерв.мПериод          = Дата;
			НаборДвиженийРезерв.мТаблицаДвижений = ТаблицаДвиженийРезерв;	
			Движения.ДенежныеСредстваВРезерве.ВыполнитьРасход();
			
		КонецЕсли;
		
		Если ЕстьРазмещение Тогда
			
			НаборДвиженийРазмещение.мПериод          = Дата;
			НаборДвиженийРазмещение.мТаблицаДвижений = ТаблицаДвиженийРазмещение;	
			Движения.РазмещениеЗаявокНаРасходованиеСредств.ВыполнитьРасход();
			
		КонецЕсли;
		
		// Подготовим таблицу для движений по регистру "РасчетыСКонтрагентами"
		НаборДвиженийКонтрагенты   = Движения.РасчетыСКонтрагентами;
		ТаблицаДвиженийКонтрагенты = НаборДвиженийКонтрагенты.Выгрузить();
		ТаблицаДвиженийКонтрагенты.Очистить();
		
		// По строкам табличной части
		Для Каждого СтрокаПлатеж ИЗ ДвиженияПоЗаявкам Цикл
			
			ТекущаяСделка = ОпределитьСделкуСтрокиТЧ (ЭтотОбъект,СтрокаПлатеж);
			
			Если НЕ СтрокаПлатеж.ДокументПланированияПлатежа.Пустая() Тогда
				
				СуммаПлатежа=СтрокаПлатеж.СуммаПлатежаПлан;											
				СтрокаДвиженийЗаявки = ТаблицаДвиженийЗаявки.Добавить();
				СтрокаДвиженийЗаявки.СуммаУпр            			= СтрокаПлатеж.СуммаУпр;
				СтрокаДвиженийЗаявки.Сумма                			= СтрокаПлатеж.СуммаПлатежаПлан;
				СтрокаДвиженийЗаявки.СуммаВзаиморасчетов  			= СтрокаПлатеж.СуммаВзаиморасчетов;
				СтрокаДвиженийЗаявки.ЗаявкаНаРасходование 			= СтрокаПлатеж.ДокументПланированияПлатежа;
				СтрокаДвиженийЗаявки.СтатьяДвиженияДенежныхСредств 	= СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
				СтрокаДвиженийЗаявки.Проект						 	= СтрокаПлатеж.Проект;
				СтрокаДвиженийЗаявки.ДоговорКонтрагента				= СтрокаПлатеж.ДоговорКонтрагента;
				СтрокаДвиженийЗаявки.Сделка							= СтрокаПлатеж.Сделка;
				
				ЕстьЗаявка = Истина;
				
				Если НЕ СтрокаПлатеж.ВключатьВПлатежныйКалендарь Тогда // Документ не был проведен по оперативным взаиморасчетам
					
					ЕстьРасчеты=Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ((Не ЕстьЗаявка) ИЛИ ЕстьРасчеты) И РасчетыСКонтрагентами Тогда // Первое упоминание о планируемом платеже в системе
				
				// По регистру "РасчетыСКонтрагентами"
				
				СтрокаДвиженийКонтрагенты = ТаблицаДвиженийКонтрагенты.Добавить();
				//Плотников
				Если (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщикуСКодомКБК или ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю) 
					и ЗначениеЗаполнено(ДоговорТранзит) Тогда
					СтрокаДвиженийКонтрагенты.ДоговорКонтрагента  = ДоговорТранзит;
				иначе
					СтрокаДвиженийКонтрагенты.ДоговорКонтрагента  = СтрокаПлатеж.ДоговорКонтрагента;
				КонецЕсли;
				//Плотников
				СтрокаДвиженийКонтрагенты.РасчетыВозврат      = РасчетыВозврат;
				СтрокаДвиженийКонтрагенты.Сделка              = ?(ЗначениеНеЗаполнено(СтрокаПлатеж.Сделка),ТекущаяСделка,СтрокаПлатеж.Сделка);
				СтрокаДвиженийКонтрагенты.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаВзаиморасчетов*КоэффициентСторно;
				СтрокаДвиженийКонтрагенты.СуммаУпр            = СтрокаПлатеж.СуммаУпр*КоэффициентСторно;
				
				ЕстьРасчеты = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьЗаявка Тогда
			
			//***20151225 Проверка осатков при оперативном проведении.
			Если НЕ ОбменДанными.Загрузка И РежимПроведения = РежимПроведенияДокумента.Оперативный И Константы.ВводитьИсходящиеПлатежиТолькоНаОснованииЗаявки.Получить() Тогда
				Отказ = НаборДвиженийЗаявки.КонтрольОстатков(ЭтотОбъект, "РасшифровкаПлатежа", Заголовок);
			КонецЕсли;
			//***
			
			НаборДвиженийЗаявки.мПериод          = Дата;
			НаборДвиженийЗаявки.мТаблицаДвижений = ТаблицаДвиженийЗаявки;
			Движения.ЗаявкиНаРасходованиеСредств.ВыполнитьРасход();
			
		КонецЕсли;
		
		Если ЕстьРасчеты Тогда
			
			НаборДвиженийКонтрагенты.мПериод          = Дата;
			НаборДвиженийКонтрагенты.мТаблицаДвижений = ТаблицаДвиженийКонтрагенты;
			
			Если КоэффициентСторно=1 Тогда
				
				Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
				
			Иначе
				
				Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Оплачено И ОтраженоВОперУчете Тогда  // Проводим по фактическим взаиморасчетам
		
		// По регистру "Движения денежных средств"
		НаборДвижений = Движения.ДвиженияДенежныхСредств;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ДвиженияДенежныхСредств, ТаблицаДвижений);
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыДенежныхСредств.Безналичные,"ВидДенежныхСредств");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыДвиженийПриходРасход.Расход,"ПриходРасход");
		ТаблицаДвижений.ЗаполнитьЗначения(СчетОрганизации,"БанковскийСчетКасса");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументДвижения");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,"Контрагент");
		
		// { Лапенков 20090325
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.СтатьиДвиженияДенежныхСредств.ПеречислениеМеждуСчетами,"СтатьяДвиженияДенежныхСредств");
		КонецЕсли;
		// }		
		НаборДвижений.мПериод            = ДатаОплаты; //КонецДня(ДатаОплаты);
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Движения.ДвиженияДенежныхСредств.ВыполнитьДвижения();
		
		Если РасчетыСКонтрагентами Тогда
			
			// По регистрам взаиморасчетов с покукпателями и поставщиками для НДС.
			// Движение делается только если документ отражается в БУ.
			Если ОтражатьВБухгалтерскомУчете Тогда
				
				// Для целей НДС проводим платежи только по операциям с поставщиком и покупателем.
				Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику 
					или ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщикуСКодомКБК Тогда
					
					НаборДвиженийСПоставщиками   = Движения.ВзаиморасчетыСПоставщикамиДляНДС;
					ТаблицаДвиженийСПоставщиками = НаборДвиженийСПоставщиками.Выгрузить();
					
					если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщикуСКодомКБК 
						или ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю Тогда //Плотников
						
						СтрокаДвижений = ТаблицаДвиженийСПоставщиками.Добавить();
						СтрокаДвижений.Организация         = Организация;
						СтрокаДвижений.ДоговорКонтрагента  = ?(ЗначениеЗаполнено(ДоговорТранзит),ДоговорТранзит,СтрокаПлатеж.ДоговорКонтрагента);
						//СтрокаДвижений.Сделка              = ОпределитьСделкуСтрокиТЧ (ЭтотОбъект,СтрокаПлатеж);
						СтрокаДвижений.Сумма               = СуммаДокумента;
						
					иначе
						
						// По строкам табличной части.
						Для Каждого СтрокаПлатеж ИЗ ДвиженияПоКонтрагентам Цикл
							
							СтрокаДвижений = ТаблицаДвиженийСПоставщиками.Добавить();
							СтрокаДвижений.Организация         = Организация;
							СтрокаДвижений.ДоговорКонтрагента  = СтрокаПлатеж.ДоговорКонтрагента;
							СтрокаДвижений.Сделка              = ОпределитьСделкуСтрокиТЧ (ЭтотОбъект,СтрокаПлатеж);
							СтрокаДвижений.Сумма               = СтрокаПлатеж.СуммаРегл;
							
						КонецЦикла;
						
						
					КонецЕсли;
					
					
					НаборДвиженийСПоставщиками.мПериод            = ДатаОплаты; //КонецДня(ДатаОплаты);
					НаборДвиженийСПоставщиками.мТаблицаДвижений   = ТаблицаДвиженийСПоставщиками;
					
					Движения.ВзаиморасчетыСПоставщикамиДляНДС.ВыполнитьРасход();
					
				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю Тогда
					
					НаборДвиженийСПокупателями   = Движения.ВзаиморасчетыСПокупателямиДляНДС;
					ТаблицаДвиженийСПокупателями = НаборДвиженийСПокупателями.Выгрузить();
					
					// По строкам табличной части.
					Для Каждого СтрокаПлатеж ИЗ ДвиженияПоКонтрагентам Цикл
						
						СтрокаДвижений = ТаблицаДвиженийСПокупателями.Добавить();
						СтрокаДвижений.Организация         = Организация;
						СтрокаДвижений.ДоговорКонтрагента  = СтрокаПлатеж.ДоговорКонтрагента;
						СтрокаДвижений.Сделка              = ОпределитьСделкуСтрокиТЧ (ЭтотОбъект,СтрокаПлатеж);;
						СтрокаДвижений.Сумма               = СтрокаПлатеж.СуммаРегл;
						
					КонецЦикла;
					
					НаборДвиженийСПокупателями.мПериод            = ДатаОплаты; //КонецДня(ДатаОплаты);
					НаборДвиженийСПокупателями.мТаблицаДвижений   = ТаблицаДвиженийСПокупателями;
					
					Движения.ВзаиморасчетыСПокупателямиДляНДС.ВыполнитьПриход();
					
				КонецЕсли;
				
			КонецЕсли;
			
			///( таблица для расчета курсовых разниц   А.А. 22.09.15
			Если ВалютаДокумента <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Сделка,
				|	СУММА(ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СуммаПлатежа) КАК СуммаПлатежа,
				|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.КурсВзаиморасчетов,
				|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДоговорКонтрагента
				|ПОМЕСТИТЬ ВТ_сделки
				|ИЗ
				|	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеИсходящееРасшифровкаПлатежа
				|ГДЕ
				|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка = &Ссылка
				|	И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Сделка <> НЕОПРЕДЕЛЕНО
				|
				|СГРУППИРОВАТЬ ПО
				|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Сделка,
				|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.КурсВзаиморасчетов,
				|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДоговорКонтрагента
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_сделки.Сделка,
				|	ВТ_сделки.ДоговорКонтрагента КАК Договор,
				|	-ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток - ВТ_сделки.СуммаПлатежа * ВТ_сделки.КурсВзаиморасчетов КАК КурсоваяРазница
				|ИЗ
				|	ВТ_сделки КАК ВТ_сделки
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
				|				&МоментВремени,
				|				Сделка В
				|					(ВЫБРАТЬ
				|						ВТ_сделки.Сделка
				|					ИЗ
				|						ВТ_сделки КАК ВТ_сделки)) КАК ВзаиморасчетыСКонтрагентамиОстатки
				|		ПО ВТ_сделки.Сделка = ВзаиморасчетыСКонтрагентамиОстатки.Сделка
				|ГДЕ
				|	-ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток = ВТ_сделки.СуммаПлатежа";
				
				Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
				Запрос.УстановитьПараметр("Ссылка", Ссылка);
				
				ТаблицаКурсовыхРазниц = Запрос.Выполнить().Выгрузить();
				
			КонецЕсли;	  //)
			
			// По регистру "ВзаиморасчетыСКонтрагентами"
			НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвиженийКР = ТаблицаДвижений.Скопировать();
			// По регистру "ДенежныеСредстваКомитента"
			
			ЕстьРасчетыСКомитентом=Ложь;
			НаборДвиженийКомитент = Движения.ДенежныеСредстваКомитента;
			ТаблицаДвиженийКомитент = НаборДвиженийКомитент.Выгрузить();
			
			// По строкам табличной части
			Для Каждого СтрокаПлатеж ИЗ ДвиженияПоКонтрагентам Цикл
				
				ТекущаяСделка = ОпределитьСделкуСтрокиТЧ (ЭтотОбъект,СтрокаПлатеж);
				
				СтрокаДвижений = ТаблицаДвижений.Добавить();
				//Плотников
				Если (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщикуСКодомКБК или ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю) 
					и ЗначениеЗаполнено(ДоговорТранзит) Тогда
					СтрокаДвижений.ДоговорКонтрагента  = ДоговорТранзит;
				иначе
					СтрокаДвижений.ДоговорКонтрагента  = СтрокаПлатеж.ДоговорКонтрагента;
				КонецЕсли;
				//Плотников
				СтрокаДвижений.Сделка              = ТекущаяСделка;
									Если ДоговорКонтрагента.ВалютаВзаиморасчетов = константы.ВалютаРегламентированногоУчета.Получить() и счетОрганизации.ВалютаДенежныхСредств<> константы.ВалютаРегламентированногоУчета.Получить() тогда
				СтрокаДвижений.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаУпр*КоэффициентСторно;
				СтрокаДвижений.СуммаУпр            = СтрокаПлатеж.СуммаУпр*КоэффициентСторно;
					иначе
				СтрокаДвижений.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаВзаиморасчетов*КоэффициентСторно;
				СтрокаДвижений.СуммаУпр            = СтрокаПлатеж.СуммаУпр*КоэффициентСторно;
					конецЕсли;

				
				Если СтрокаПлатеж.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
					И СтрокаПлатеж.КонтролироватьДенежныеСредстваКомитента Тогда
					
					СтрокаДвиженийКомитент = ТаблицаДвиженийКомитент.Добавить();
					СтрокаДвиженийКомитент.ДоговорКонтрагента  = СтрокаПлатеж.ДоговорКонтрагента;
					СтрокаДвиженийКомитент.Сделка              = ТекущаяСделка;
					СтрокаДвиженийКомитент.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаВзаиморасчетов*КоэффициентСторно;
					СтрокаДвиженийКомитент.СуммаУпр            = СуммаУпр*КоэффициентСторно;
					
					ЕстьРасчетыСКомитентом=Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
			НаборДвижений.мПериод            = ДатаОплаты; //КонецДня(ДатаОплаты);
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если КоэффициентСторно=1 Тогда
				
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();
				
			Иначе
				
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
			КонецЕсли;
		Иначе
			
			//***2018.04.22
			Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
				
				Если ЗначениеНеЗаполнено(РасчетныйДокументРаботника) Тогда
					РасчетныйДокументДвижения = Ссылка;
				Иначе
					РасчетныйДокументДвижения = РасчетныйДокументРаботника;
				КонецЕсли;
				
				СтрокаПлатеж = ТаблицаПлатежейУпр[0];
				
				// По регистру "ВзаиморасчетыСПодотчетнымиЛицами"
				НаборДвижений = Движения.ВзаиморасчетыСПодотчетнымиЛицами;
				
				ТаблицаДвижений = НаборДвижений.Выгрузить();
				
				СтрокаДвижений = ТаблицаДвижений.Добавить();
				СтрокаДвижений.ФизЛицо             	= ФизЛицо;
				СтрокаДвижений.РасчетныйДокумент   	= РасчетныйДокументДвижения;
				СтрокаДвижений.Валюта              	= ВалютаВзаиморасчетовРаботника;
				СтрокаДвижений.СуммаВзаиморасчетов 	= СтрокаПлатеж.СуммаВзаиморасчетов;
				СтрокаДвижений.СуммаУпр    		   	= СтрокаПлатеж.СуммаУпр;
				
				НаборДвижений.мПериод              = Дата;
				НаборДвижений.мТаблицаДвижений     = ТаблицаДвижений;
				
				Движения.ВзаиморасчетыСПодотчетнымиЛицами.ВыполнитьПриход();
				
			КонецЕсли;
			
		КонецЕсли;
		НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		//курсовые разницы
		Если ВалютаДокумента <> Константы.ВалютаРегламентированногоУчета.Получить() и РасчетыСКонтрагентами Тогда	
			Для каждого стр из ТаблицаКурсовыхРазниц Цикл
				СтрокаДвижений = ТаблицаДвижений.Добавить();
				СтрокаДвижений.ДоговорКонтрагента = стр.Договор;
				СтрокаДвижений.Сделка                = стр.Сделка;
				СтрокаДвижений.СуммаВзаиморасчетов   = 0;
				СтрокаДвижений.СуммаУпр   = -стр.курсоваяРазница;
			конецЦикла;
		конецЕсли;
		НаборДвижений.мПериод            = ДатаОплаты; //КонецДня(ДатаОплаты);
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
				
	КонецЕсли;
	
	// Лапенков 
	// Формируем движения по регистру ВзаиморасчетыСКонтрагентами для отражения выплаты З/П 
	Если  ВидОперации= Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога И НЕ ЗначениеНеЗаполнено(Контрагент2) Тогда
		// По регистру "ВзаиморасчетыСКонтрагентами"
		НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		Если не ЗначениеЗаполнено(СчетОрганизации.Подразделение) тогда
			СтрокаДвижений.ДоговорКонтрагента  = Контрагент2.ОсновнойДоговорКонтрагента;
		иначе
			Если СчетОрганизации.Подразделение = Справочники.Подразделения.НайтиПоКоду("00170") тогда  //шинтрейд
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ДоговорыКонтрагентов.Ссылка
				|ИЗ
				|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				|ГДЕ
				|	ДоговорыКонтрагентов.ТипДоговора = &ТипДоговора
				|	И ДоговорыКонтрагентов.Владелец = &Владелец";
				
				Запрос.УстановитьПараметр("ТипДоговора",Справочники.ТипыДоговоров.ШинтрейдЯрославль);
				Запрос.УстановитьПараметр("Владелец",Контрагент2);
				
				Результат = Запрос.Выполнить();
				
				Выборка = Результат.Выбрать();
				
				Если  Выборка.Следующий() тогда
					СтрокаДвижений.ДоговорКонтрагента  = Выборка.ссылка;
				иначе	
					СтрокаДвижений.ДоговорКонтрагента  = Контрагент2.ОсновнойДоговорКонтрагента;
				конецЕсли;	 
			иначеЕсли  СчетОрганизации.Подразделение = Справочники.Подразделения.НайтиПоКоду("00171") тогда  //формула автоплюс 
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ДоговорыКонтрагентов.Ссылка
				|ИЗ
				|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				|ГДЕ
				|	ДоговорыКонтрагентов.ТипДоговора = &ТипДоговора
				|	И ДоговорыКонтрагентов.Владелец = &Владелец";
				
				Запрос.УстановитьПараметр("ТипДоговора",Справочники.ТипыДоговоров.ФормулаАвтоПлюс);
				Запрос.УстановитьПараметр("Владелец",Контрагент2);
				
				Результат = Запрос.Выполнить();
				
				Выборка = Результат.Выбрать();
				
				Если  Выборка.Следующий() тогда
					СтрокаДвижений.ДоговорКонтрагента  = Выборка.ссылка;
				иначе	
					СтрокаДвижений.ДоговорКонтрагента  = Контрагент2.ОсновнойДоговорКонтрагента;
				конецЕсли;	 
				
			иначе	
				СтрокаДвижений.ДоговорКонтрагента  = Контрагент2.ОсновнойДоговорКонтрагента;
				
			конецЕсли;
			
		конецЕсли;
		
		
		
		//СтрокаДвижений.Сделка              = ТекущаяСделка;
		СтрокаДвижений.СуммаВзаиморасчетов = СуммаДокумента;
		СтрокаДвижений.СуммаУпр            = СуммаДокумента;
		
		НаборДвижений.мПериод            = ДатаОплаты; //КонецДня(ДатаОплаты);
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();
	КонецЕсли;
	
	
	//ЗАТРАТЫ
	
	Если ОтражатьВЗатратах Тогда		
		
		Если (ИтогоЗатрат <> 0) И (СуммаДокумента <> ИтогоЗатрат) Тогда 
			Отказ = Истина;
			Сообщить("Не совпадают сумма затрат и сумма документа.", СтатусСообщения.Важное);
		КонецЕсли;
		
		ТаблицаЗатрат = СформироватьТаблицуЗатрат();
		ИтогоЗатрат = СформироватьИтогПоЗатратам();
		
		Если (ТаблицаЗатрат.Количество() > 0) Тогда 
			Для Каждого Стр из ТаблицаЗатрат Цикл
				НаборДвижений   = Движения.Затраты.Добавить();
				Если (Стр.Подразделение = Справочники.Подразделения.ПустаяСсылка()) Тогда 
					Отказ = Истина;
					Сообщить("В табличной части ""Затраты"" пропущено подразделение.", СтатусСообщения.Важное);
				КонецЕсли;	
				Если (Стр.СтатьяЗатрат = Справочники.СтатьиЗатрат.ПустаяСсылка()) Тогда 
					Отказ = Истина;
					Сообщить("В табличной части ""Затраты"" пропущена статья.", СтатусСообщения.Важное);
				КонецЕсли;	
				Если ((Стр.Сумма = 0) или (Стр.Сумма = Неопределено)) Тогда 
					Отказ = Истина;
					Сообщить("В табличной части ""Затраты"" пропущена сумма.", СтатусСообщения.Важное)
				КонецЕсли;	
				//Адиянов<<< Начало СтатьяЗатратУпр
				Если (Стр.СтатьяЗатратУпр = Справочники.СтатьиЗатратУПР.ПустаяСсылка()) Тогда 
					Отказ = Истина;
					Сообщить("В табличной части ""Затраты"" пропущена статья затрат УПР.", СтатусСообщения.Важное);
				КонецЕсли;	
				//Адиянов>>> Конец СтатьяЗатратУпр
				НаборДвижений.Подразделение   = Стр.Подразделение;
				НаборДвижений.СтатьяЗатрат    = Стр.СтатьяЗатрат;
				НаборДвижений.НоменклатурнаяГруппа   = Стр.НоменклатурнаяГруппа;
				НаборДвижений.Сумма           = Стр.Сумма;
				НаборДвижений.Период          = Дата;
				//Адиянов<<< Начало СтатьяЗатратУпр
				НаборДвижений.СтатьяЗатратУпр = Стр.СтатьяЗатратУпр;
				//Адиянов>>> Конец СтатьяЗатратУпр
				Движения.Затраты .Записать();
			КонецЦикла;		
		Иначе 
			Если (Подразделение <> Справочники.Подразделения.ПустаяСсылка() И Контрагент2 =  Справочники.Контрагенты.ПустаяСсылка()) Тогда 
				НаборДвижений = Движения.Затраты.Добавить();
				НаборДвижений.Подразделение  = Подразделение;
				НаборДвижений.СтатьяЗатрат   = СтатьяЗатрат;
				НаборДвижений.НоменклатурнаяГруппа   = НоменклатурнаяГруппа;
				НаборДвижений.Сумма          = СуммаУпр; //***ИтогоЗатрат;
				НаборДвижений.Период         = Дата;
				//Адиянов<<< Начало СтатьяЗатратУпр
				НаборДвижений.СтатьяЗатратУпр   = СтатьяЗатратУПР;
				//Адиянов>>> Конец СтатьяЗатратУпр				
				Движения.Затраты .Записать();
			ИначеЕсли Подразделение = Справочники.Подразделения.ПустаяСсылка() тогда
				Отказ = Истина;
				Сообщить(?(ЗначениеЗаполнено(Подразделение),"","Не заполнено подраздедение."));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	
	//}	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументаУпр(Отказ, Режим, Заголовок)

	Если ОтраженоВОперУчете И (Режим = РежимПроведенияДокумента.Оперативный) Тогда

		Если Не Оплачено Тогда
			
			ПроверитьОстаткиПоЗаявке(Дата,Отказ,Заголовок,СчетОрганизации,СуммаДокумента,ТаблицаПлатежейУпр);
			
			Отказ=Отказ И НЕ ЕстьРазрешениеПроводитьБезЗаявки();
			
			// Проверяем остаток доступных денежных средств
			СвободныйОстаток = ПолучитьСвободныйОстатокДС(СчетОрганизации,Дата,ТаблицаПлатежейУпр.ВыгрузитьКолонку("ДокументПланированияПлатежа"));
			Если СвободныйОстаток < СуммаДокумента Тогда
				
				Сообщить(Заголовок+"
				|Сумма документа превышает возможный к использованию остаток денежных средств
				|по "+СчетОрганизации.Наименование+".
				|Возможный к использованию остаток: "+Формат(СвободныйОстаток,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаДокумента+"
				|Сумма документа = "+Формат(СуммаДокумента,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаДокумента);
				
				Если НЕ ЕстьРазрешениеПревышатьСвободныйОстатокДС() Тогда
					Отказ = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;

		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			Если Оплачено Тогда
				
				КонтрольОстатковПоТЧ(ДатаОплаты, РасшифровкаПлатежа, Отказ, Заголовок, Истина);    //КонецДня(ДатаОплаты)
				
			Иначе
				
				КонтрольОстатковПоТЧ(Дата, РасшифровкаПлатежа, Отказ, Заголовок);
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;

	Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) И ОтраженоВОперУчете Тогда

		ПроверитьЗаполнениеТЧ(Отказ, Заголовок);

	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДокументПоОснованиюУпр(Основание)

	Если НЕ (ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств")) Тогда
		Возврат;
	КонецЕсли;

	Если Основание.ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные Тогда
		Сообщить("Заявка оформлена на расходование наличных денежных средств.");
		Возврат;
	КонецЕсли;

	ВидОперацииЗаявка = Основание.ВидОперации;

	ОпределитьОперациюПоОснованиюУпр(ВидОперации,ВидОперацииЗаявка);

	Организация = Основание.Организация;
    ВалютаДокумента = Основание.ВалютаДокумента;

	Если НЕ ЗначениеНеЗаполнено(Основание.БанковскийСчетКасса) Тогда
		СчетОрганизации = Основание.БанковскийСчетКасса;
	ИначеЕсли Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств=ВалютаДокумента Тогда
		СчетОрганизации= Организация.ОсновнойБанковскийСчет;
	КонецЕсли;

	Ответственный     = Основание.Ответственный;
	ДокументОснование = Основание.Ссылка;
	
	Если ВалютаДокумента.Пустая() Тогда
		ВалютаДокумента = мВалютаРегламентированногоУчета;
	КонецЕсли;

	СтруктураКурсаДокумента = ПолучитьКурсВалюты(ВалютаДокумента,Дата);
	КурсДокумента      = СтруктураКурсаДокумента.Курс;
	КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	
	//ЗаполнитьПоЗаявкеППУпр();
	ЗаполнитьПоЗаявкеЯШТ();
	
КонецПроцедуры

// Возвращает список статусов отправителя п/п
//
// Возвращаемое значение:
//  СписокЗначений – в котором создаются элементы со статусами отправителя/
//
Функция ПолучитьСписокСтатусовОтправителя() Экспорт

	Список = Новый СписокЗначений;
	Список.Добавить("01", "01 - налогоплательщик (плательщик сборов) - юридическое лицо");
	Список.Добавить("02", "02 - налоговый агент");
	Список.Добавить("03", "03 - сборщик налогов и сборов");
	Список.Добавить("04", "04 - налоговый орган");
	Список.Добавить("05", "05 - территориальные органы Федеральной службы судебных приставов");
	Список.Добавить("06", "06 - участник внешнеэкономической деятельности");
	Список.Добавить("07", "07 - таможенный орган");
	Список.Добавить("08", "08 - плательщик иных платежей, осуществляющий перечисление платежей в бюджетную систему Российской Федерации (кроме платежей, администрируемых налоговыми органами)");
	
	Если Дата >= '20050101' Тогда
	
		Список.Добавить("09", "09 - налогоплательщик (плательщик сборов) – индивидуальный предприниматель");
		Список.Добавить("10", "10 - налогоплательщик (плательщик сборов) – частный нотариус");
		Список.Добавить("11", "11 - налогоплательщик (плательщик сборов) – адвокат, учредивший адвокатский кабинет");
		Список.Добавить("12", "12 - налогоплательщик (плательщик сборов) – глава крестьянского (фермерского) хозяйства");
		Список.Добавить("13", "13 - налогоплательщик (плательщик сборов) – иное физическое лицо – клиент банка (владелец счета)");
		Список.Добавить("14", "14 - налогоплательщик, производящий выплаты физическим лицам (п.п. 1 п.1 ст. 235 Налогового кодекса Российской Федерации)");
		Список.Добавить("15", "15 - кредитная организация, оформившая расчетный документ на общую сумму на перечисление налогов, сборов и иных платежей в бюджетную систему Российской Федерации, уплачиваемых физическими лицами без открытия банковского счета");
	
	КонецЕсли;
	
	Возврат Список;

КонецФункции // ПолучитьСписокСтатусовОтправителя()

// Возвращает список статусов отправителя п/п
//
// Возвращаемое значение:
//  СписокЗначений – в котором создаются элементы со статусами отправителя/
//
Функция ПолучитьСписокОснованийПлатежа() Экспорт

	ОснованиеПлатежа = Новый СписокЗначений;
	ОснованиеПлатежа.Добавить("ТП", "ТП - платежи текущего года");
	ОснованиеПлатежа.Добавить("ЗД", "ЗД - добровольное погашение задолженности по истекшим налоговым периодам");
	
	Если Дата >= '20050101' Тогда
		ОснованиеПлатежа.Добавить("БФ","БФ - текущие платежи физических лиц – клиентов банка (владельцев счета), уплачиваемые со своего банковского счета");
	КонецЕсли;

	ОснованиеПлатежа.Добавить("ТР", "ТР - погашение задолженности по требованию об уплате налогов (сборов) от налогового органа");
	ОснованиеПлатежа.Добавить("РС", "РС - погашение рассроченной задолженности");
	ОснованиеПлатежа.Добавить("ОТ", "ОТ - погашение отсроченной задолженности");
	ОснованиеПлатежа.Добавить("РТ", "РТ - погашение реструктурируемой задолженности");
	ОснованиеПлатежа.Добавить("ВУ", "ВУ - погашение отсроченной задолженности в связи с введением внешнего управления");
	ОснованиеПлатежа.Добавить("ПР", "ПР - погашение задолженности, приостановленной к взысканию");
	ОснованиеПлатежа.Добавить("АП", "АП - погашение задолженности по акту проверки");
	ОснованиеПлатежа.Добавить("АР", "АР - погашение задолженности по исполнительному документу");
		
	ОснованиеПлатежа.Добавить("0", "0 - Невозможно указать конкретное значение показателя");
	
	Возврат ОснованиеПлатежа;

КонецФункции // ПолучитьСписокСтатусовОтправителя()

// Возвращает список статусов отправителя п/п
//
// Возвращаемое значение:
//  СписокЗначений – в котором создаются элементы со статусами отправителя/
//
Функция ПолучитьСписокПоказателейТипа() Экспорт

	Список = Новый СписокЗначений;
	Список.Добавить("НС", "НС - уплата налога или сбора");
	
	Если Дата >= '20050101' Тогда
		Список.Добавить("ПЛ", "ПЛ - уплата платежа");
		Список.Добавить("ГП", "ГП - уплата пошлины");
		Список.Добавить("ВЗ", "ВЗ - уплата взноса");
	КонецЕсли;
	
	Список.Добавить("АВ", "АВ - уплата аванса или предоплата (в том числе декадные платежи)");
	Список.Добавить("ПЕ", "ПЕ - уплата пени");
	Список.Добавить("ПЦ", "ПЦ - уплата процентов");
	Список.Добавить("СА", "СА - налоговые санкции, установленные Налоговым кодексом РФ");
	Список.Добавить("АШ", "АШ - административные штрафы");
	Список.Добавить("ИШ", "ИШ - иные штрафы, установленные соответствующими нормативными актами");
	Список.Добавить("0", "0 - Конкретное значение указать невозможно");
	
	Возврат Список;

КонецФункции // ПолучитьСписокСтатусовОтправителя()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если Основание  = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

	СпособЗаполнения = "Не заполнять";
	ВалютаДокумента  = мВалютаРегламентированногоУчета;

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику")
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда

		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();

		ВидОперации  = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
		СтрокаПлатеж.ДоговорКонтрагента      = Основание.ДоговорКонтрагента;

		СтруктураКурсаВзаиморасчетов         = ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

		Если (ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику"))
			И (СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
			ИЛИ СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам) Тогда
			
			СтрокаПлатеж.Сделка=Основание;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") И СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			
			СтрокаПлатеж.Сделка=Основание;
			
		КонецЕсли;

		Если НЕ ЗначениеНеЗаполнено(Контрагент.ОсновнойБанковскийСчет) Тогда
			СчетКонтрагента = Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;

		Если НЕ ЗначениеНеЗаполнено(Основание.СтруктурнаяЕдиница) Тогда
			СчетОрганизации = Основание.СтруктурнаяЕдиница;
		Иначе
			СчетОрганизации = Организация.ОсновнойБанковскийСчет;
		КонецЕсли;

		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") И Основание.Проведен  Тогда
			СпособЗаполнения = "По заказу";
		Иначе
			СпособЗаполнения = "По сумме документа";
		КонецЕсли;

		Если НЕ СчетОрганизации.Пустая() Тогда
			ВалютаДокумента = СчетОрганизации.ВалютаДенежныхСредств;
		Иначе
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		КонецЕсли;

		СтруктураКурсаДокумента = ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;	
		СтрокаПлатеж.СтавкаНДС  =ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяСтавкаНДС");

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
			или (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеДопРасходов")) 
			или (ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")) 
			или (ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")) Тогда

		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
		КонецЕсли;

		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		Контрагент   = Основание.Контрагент;

		СтрокаПлатеж.ДоговорКонтрагента      = Основание.ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов         = ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

		Если СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = 
			 Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда

			Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") И СтрокаПлатеж.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				СтрокаПлатеж.Сделка = Неопределено;
			Иначе
				СтрокаПлатеж.Сделка = Основание;
			КонецЕсли;

			Если Основание.Проведен Тогда
				СпособЗаполнения = "По взаиморасчетам";
			КонецЕсли;

		Иначе
			СтрокаПлатеж.Сделка = Основание.Сделка;
			Если Основание.Проведен Тогда
				СпособЗаполнения = "По сумме документа";
			КонецЕсли;
		КонецЕсли;

		СчетОрганизации  = Организация.ОсновнойБанковскийСчет;

		Если НЕ ЗначениеНеЗаполнено(Контрагент.ОсновнойБанковскийСчет) И Контрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств=СчетОрганизации.ВалютаДенежныхСредств Тогда
			СчетКонтрагента = Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;

		Если НЕ СчетОрганизации.Пустая() Тогда
			ВалютаДокумента = СчетОрганизации.ВалютаДенежныхСредств;
		Иначе
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		КонецЕсли;

		СтруктураКурсаДокумента = ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;	

		СтрокаПлатеж.СтавкаНДС=ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяСтавкаНДС");

	КонецЕсли;
	
	ЗаполнитьДокументПоОснованиюУпр(Основание);

	Если СпособЗаполнения = "По заказу" Тогда

		ЗаполнитьПоЗаказуУпр(Основание, СтрокаПлатеж);
		ПересчитатьСуммуНДС(СтрокаПлатеж);

	ИначеЕсли СпособЗаполнения = "По взаиморасчетам" Тогда
		ЗаполнитьПоВзаиморасчетамУпр(СтрокаПлатеж);
		ПересчитатьСуммуНДС(СтрокаПлатеж);

	ИначеЕсли СпособЗаполнения = "По сумме документа" Тогда

		// Если основание - отчет комитенту, то надо вычесть вознаграждение
		ОснованиеСуммаДокумента = Основание.СуммаДокумента;
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			ОснованиеСуммаДокумента = Основание.СуммаДокумента - Основание.СуммаВознаграждения;
		КонецЕсли;

		СтруктураКурсаОснования = ПолучитьКурсВалюты(Основание.ВалютаДокумента, Основание.Дата);
		КурсОснования           = СтруктураКурсаОснования.Курс;
		КратностьОснования      = СтруктураКурсаОснования.Кратность;

		СтрокаПлатеж.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(ОснованиеСуммаДокумента, Основание.ВалютаДокумента, Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		                                 КурсОснования, Основание.КурсВзаиморасчетов, КратностьОснования, Основание.КратностьВзаиморасчетов);
		СуммаДокумента = ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		                                 КурсДокумента, СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);

		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;

		ПересчитатьСуммуНДС(СтрокаПлатеж);

	КонецЕсли;

	Ответственный      = глТекущийПользователь;
	ОтраженоВОперУчете = Истина;
	ДокументОснование  = Основание.Ссылка;

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим)
		
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);
	
	СтруктураКурсаДокумента = ПолучитьКурсВалюты(ВалютаДокумента,Дата);
	КурсДокумента      = СтруктураКурсаДокумента.Курс;
	КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		
	ЕстьРасчетыСКонтрагентами=ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=ЕстьРасчетыПоКредитам(ВидОперации);
			
	Если НЕ ОтраженоВОперУчете И НЕ Оплачено Тогда
		Сообщить(Заголовок+"
		|Не выбрано правило проведения (""Отразить в опер. учете"",""Оплачено"")");
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
		Сообщить(Заголовок+" 
		|не совпадают сумма документа и ее расшифровка.");
		
		Отказ=Истина;
		
	КонецЕсли;
	
	Если Оплачено Тогда
		ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейОплата(), Отказ, Заголовок);
	КонецЕсли;
	
	Если ОтраженоВОперУчете Тогда
		
		ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейРасчеты(), Отказ, Заголовок);
				
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога и НЕ ОтражатьВЗатратах Тогда
		СообщитьОбОшибке("Для операции 'Перечисление налога' ОБЯЗАТЕЛЬНО отнесение на затраты'", Отказ);
		
	КонецЕсли;	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	ТаблицаПлатежейУпр=ПолучитьТаблицуПлатежейУпр(?(Оплачено,ДатаОплаты,Дата),ВалютаДокумента,Ссылка, "ПлатежноеПоручениеИсходящее"); //КонецДня(ДатаОплаты)
	
	//Проверим на возможность проведения в БУ и НУ
	Если ОтражатьВБухгалтерскомУчете или ОтражатьВНалоговомУчете тогда
		
		НомерСтроки=1;
		
		Для каждого СтрокаОплаты из ТаблицаПлатежейУпр Цикл
			
			Если ТаблицаПлатежейУпр.Количество()=1 Тогда
				ДополнениеЗаголовка="";
			Иначе
				ДополнениеЗаголовка="Строка "+НомерСтроки+" - ";
				НомерСтроки=НомерСтроки+1;
			КонецЕсли;
			
			ПроверкаВозможностиПроведенияВ_БУ_НУ(СтрокаОплаты.ДоговорКонтрагента, ВалютаДокумента,ОтражатьВБухгалтерскомУчете,
					ОтражатьВНалоговомУчете, мВалютаРегламентированногоУчета, Истина ,Отказ, Заголовок, ДополнениеЗаголовка,
					СтрокаОплаты.ВалютаВзаиморасчетов, СтрокаОплаты.РасчетыВУсловныхЕдиницах);
					
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда	
		ПроверитьЗаполнениеДокументаУпр(Отказ, Режим, Заголовок);	
	КонецЕсли;
	
	Если НЕ Отказ и не ЗначениеЗаполнено(СчетОрганизации.Подразделение) Тогда
		ПроверитьВводНаОснованииЗаявки(Ссылка,Отказ);
	КонецЕсли;
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрамУпр(Режим, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если  (ЭтоНовый()) Тогда 
		ТекущееПодразделение = ?(СчетОрганизации.Подразделение = Справочники.Подразделения.ПустаяСсылка(),?(Подразделение = Справочники.Подразделения.ПустаяСсылка(),Справочники.Подразделения.НайтиПоКоду("00005"),подразделение), СчетОрганизации.Подразделение);
		Подразделение = ТекущееПодразделение;
		Если (СчетОрганизации.Подразделение<>Справочники.Подразделения.ПустаяСсылка()) Тогда 
			УстановитьНовыйНомер(СокрЛП(ТекущееПодразделение.ПрефиксИБ));
		Иначе 
			УстановитьНовыйНомер(СокрЛП(Организация.Префикс));
		КонецЕсли;
  КонецЕсли;

	
	
	//*** 20150514
	Если ЗначениеЗаполнено(РасшифровкаПлатежа[0].ДокументПланированияПлатежа) Тогда
		
		Для каждого СтрРасшифровки ИЗ РасшифровкаПлатежа Цикл
			Если СтрРасшифровки.ДокументПланированияПлатежа.Контрагент <> Контрагент и СтрРасшифровки.ДокументПланированияПлатежа.Контрагент <> КонтрагентТранзит Тогда
				Сообщить("Контрагент-получатель отличается от контрагента, указанного в " + Строка(СтрРасшифровки.ДокументПланированияПлатежа));
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	//***
	
	СформироватьИтогПоЗатратам();
	
	НомерПечать=ПолучитьНомерНаПечать(ЭтотОбъект);
	
	Если Прав(НомерПечать,3)="000" Тогда
		Сообщить("Номер платежного поручения не может оканчиваться на ""000""!", СтатусСообщения.Важное);
		Отказ=Истина;
	КонецЕсли;
	
	ПроверкаВозможностиИзмененияДокумента(ЭтотОбъект, Отказ);
	
    ПроверкаВозможностиОтнесенияНаЗатраты(ЭтотОбъект, Отказ);
	
	
	//Адиянов<<<
	Если НЕ Отказ И мПроведениеИзФормы Тогда
		ПроверкаЗаполненияСтатьиЗатратУпр(ЭтотОбъект,Отказ);
	КонецЕсли; 		
	//Адиянов>>>

	//БАЛАНС (04.12.2007)                       
	//
	
	Если не ЗначениеЗаполнено(СчетОрганизации.Подразделение) тогда
	ЗарегистрироватьОбъект(ЭтотОбъект,Отказ,мПроведениеИзФормы);
	конецЕсли;
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 
	
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если ЧастичнаяОплата Тогда
		Сообщить("По документу "+ПредставлениеДокументаПриПроведении(Ссылка)+" уже прошла частичная оплата.
		|Перед отменой проведения документа необходимо отменить проведение платежных ордеров.");
		Отказ=Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьТаблицуЗатрат()
	
	ТаблицаЗатрат = Затраты.Выгрузить();
	//Адиянов<<< Начало СтатьяЗатратУпр
	//{{ТаблицаЗатрат.Свернуть("Подразделение,СтатьяЗатрат,НоменклатурнаяГруппа","Сумма");
	ТаблицаЗатрат.Свернуть("Подразделение,СтатьяЗатрат,НоменклатурнаяГруппа,СтатьяЗатратУпр","Сумма");
	//Адиянов>>> Конец СтатьяЗатратУпр
	
	Возврат ТаблицаЗатрат;
	
КонецФункции

Функция СформироватьИтогПоЗатратам() Экспорт
	
	Итого = Затраты.Итог("Сумма");
	Если (Итого = 0 И Подразделение <> Справочники.Подразделения.ПустаяСсылка() И СтатьяЗатрат <> Справочники.СтатьиЗатрат.ПустаяСсылка()) Тогда 
		Итого = СуммаДокумента;
	КонецЕсли;
	Если (ИтогоЗатрат <> Итого) Тогда 
		ИтогоЗатрат = Итого;	
	КонецЕсли;
	
	Возврат Итого;
	
КонецФункции

Процедура ПроверкаВозможностиОтнесенияНаЗатраты(ЭтотОбъект, Отказ)
	
	Если (ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога) 
		И (ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств) 
		И (ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщикуСКодомКБК) Тогда
		Если (Затраты.Количество()>0) Тогда
			Сообщить("Операция """ + ВидОперации + """ не относится на затраты!", СтатусСообщения.Важное);
			Отказ = Истина;
		ИначеЕсли СтатьяЗатрат <> Справочники.СтатьиЗатрат.ПустаяСсылка() Тогда
			Сообщить("Операция """ + ВидОперации + """ не относится на затраты!", СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	КодБК = "";
	КодОКАТО = "";
	ПоказательОснования = "";
	ПоказательПериода = "";
	ПоказательНомера =  "";
	
КонецПроцедуры

// Процедура выполняет заполнение суммы документа и суммы взаиморасчетов по регистру расчетов с подотчетными лицами
//
Процедура ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(СтрокаПлатеж) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",          Организация);
	Запрос.УстановитьПараметр("ФизЛицо",              Контрагент);
	Запрос.УстановитьПараметр("РасчетныйДокумент",    РасчетныйДокументРаботника);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаДокумента);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаДолга
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(
	|			,
	|			Организация = &Организация
	|				И ФизЛицо = &ФизЛицо
	|				И РасчетныйДокумент = &РасчетныйДокумент
	|				И Валюта = &ВалютаВзаиморасчетов) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
	|ГДЕ
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток < 0";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		СтрокаПлатеж.СуммаВзаиморасчетов = - Выборка.СуммаДолга;
		
		СуммаДокумента = ПересчитатьИзВалютыВВалюту(
			СтрокаПлатеж.СуммаВзаиморасчетов, 
		    ВалютаДокумента, ВалютаДокумента,
		    СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
		    СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;							
									
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр()



мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

//БАЛАНС (04.12.2007)                       
//
мПроведениеИзФормы = Ложь;