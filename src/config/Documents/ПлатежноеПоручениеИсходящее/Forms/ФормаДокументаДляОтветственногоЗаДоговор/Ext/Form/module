////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;
//Хранит текущую строку списка оплачиваемых документов
Перем СтрокаПлатеж;

//Хранит текущую строку списка ведомостей на выплату ЗП
Перем СтрокаВыплата;

Перем ИнвертироватьСуммы;

Перем мПечатнаяФормаПоУмолчанию;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура выполняет необходимые действия формирования текста назначения платежа
//
Процедура СформироватьНазначениеПлатежа()

	АдресСуммы=Найти(НазначениеПлатежа,"Сумма");
	
	Если АдресСуммы>0 Тогда
		ТекстНазначение=Лев(НазначениеПлатежа,АдресСуммы-2);
	Иначе
		ТекстНазначение=НазначениеПлатежа;
	КонецЕсли;
	
	Если ТекстНазначение="" И НЕ СчетКонтрагента.Пустая() Тогда
		ТекстНазначение = СчетКонтрагента.ТекстНазначения;
	КонецЕсли;	

	ТекстСумма="Сумма " + Формат(СуммаДокумента, "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00") + Символы.ПС;
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		ТабНДС=РасшифровкаПлатежа.Выгрузить();
		
		ТабНДС.Свернуть("СтавкаНДС","СуммаНДС");
		
		Для Каждого СтрокаНДС ИЗ ТабНДС цикл
			
			ТекстСумма = ТекстСумма + "НДС(" + ?(ЗначениеНеЗаполнено(СтрокаНДС.СтавкаНДС), "без налога", СтрокаНДС.СтавкаНДС) + ") " + Формат(СтрокаНДС.СуммаНДС, "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00")+Символы.ПС;
			
		КонецЦикла;
		
	КонецЕсли;
	
	НазначениеПлатежа=ТекстНазначение+Символы.ПС+ТекстСумма;

КонецПроцедуры // СформироватьНазначениеПлатежа()

// Возвращает фокус на строку ТЧ "Расшифровка платежа" при его потере в режиме редактирования
// одиночного платежа.
Процедура УстановитьФокус()

	Если ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = Неопределено Тогда

		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = СтрокаПлатеж;

	КонецЕсли;

КонецПроцедуры // УстановитьФокус()


// Процедура устанавливает видимость закладок. 
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	
	
	ЭлементыФормы.ПанельПлатежи.Видимость=Истина;
	ЭлементыФормы.РамкаРасшифровкаПлатежа.Видимость=Истина;
	
	ЭлементыФормы.Надпись5.Видимость = Истина;
	ЭлементыФормы.Контрагент.Видимость        = Истина;
	
	
	УстановитьТекущуюСтраницу("ПлатежПоНесколькимСделкам", ЭлементыФормы.ПанельПлатежи);
	
	
	ЭлементыФормы.РамкаРасшифровкаПлатежа.Заголовок="Расшифровка платежа";
	
	ЭлементыФормы.Сделка.Доступность=Истина;
	
	
	
	
	
	
	
	УстановитьДанныеДляРеквизитов();
		
	
КонецПроцедуры // УстановитьВидимость()

// Процедура переопределяет источники данных для реквизитов "СуммаДокумента" и "СуммаВзаиморасчетов".
// В режиме расчетов с контрагентами без разбиения они меняются местами.
//
Процедура УстановитьДанныеДляРеквизитов()
	
	Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) И Не Список тогда
		
		ЭлементыФормы.СуммаДокумента.Данные="ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.СуммаВзаиморасчетов";
		
		ЭлементыФормы.НадписьСуммаДокумент.Данные="НадписьСуммаВзаиморасчетов";
		ЭлементыФормы.НадписьВалютаДокумент.Данные="";
		ЭлементыФормы.НадписьВалютаДокумент.Заголовок="";
		ЭлементыФормы.НадписьВалютаВзаиморасчетов.Данные="НадписьВалютаДокумент";
				
		ИнвертироватьСуммы=Истина;
		
	Иначе
		
		ЭлементыФормы.СуммаДокумента.Данные="СуммаДокумента";
		ЭлементыФормы.НадписьВалютаДокумент.Данные="НадписьВалютаДокумент";

		ЭлементыФормы.НадписьСуммаДокумент.Данные="";
		ЭлементыФормы.НадписьСуммаДокумент.Заголовок="Сумма: ";
		
		ИнвертироватьСуммы=Ложь;
				
	КонецЕсли;
	
КонецПроцедуры // УстановитьДанныеДляРеквизитов()



// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	Если Контрагент.Пустая() Тогда
		Контрагент=СтрокаПлатеж.ДоговорКонтрагента.Владелец;
	КонецЕсли;

	// { Лапенков (договор документа каждый раз должен устанавливаться при выборе договора)
	Если РасшифровкаПлатежа.Количество()>0 Тогда
		Если не ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		ДоговорКонтрагента=СтрокаПлатеж.ДоговорКонтрагента;		
		КонецЕсли;
	КонецЕсли;
    //  }

	СтрокаПлатеж.Сделка=Неопределено;
	
	мТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;

	СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(мТекущаяВалютаВзаиморасчетов, ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты)));

	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

	РассчитатьСуммуВзаиморасчетов();
	
	УстановитьВидимость();

КонецПроцедуры // ПриИзмененииДоговора()

Процедура ПриИзмененииКонтрагента()
	
	РасшифровкаПлатежа.Очистить();
	
	СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
	
	Если ЗначениеНеЗаполнено(ДокументОбъект.Контрагент) Тогда 
		СтрокаПлатеж.ДоговорКонтрагента = Неопределено;
	ИначеЕсли НЕ ОпределитьВидДоговораСКонтрагентом(ВидОперации).НайтиПоЗначению(Контрагент.ОсновнойДоговорКонтрагента.ВидДоговора)=Неопределено Тогда
		Если Организация.Пустая() Тогда
			СтрокаПлатеж.ДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
			Организация=Контрагент.ОсновнойДоговорКонтрагента.Организация;
		ИначеЕсли Контрагент.ОсновнойДоговорКонтрагента.Организация.Пустая()
			ИЛИ Контрагент.ОсновнойДоговорКонтрагента.Организация=Организация Тогда
			СтрокаПлатеж.ДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
		КонецЕсли;
	КонецЕсли;

	ИННПолучателя = Контрагент.ИНН;
	КПППолучателя = Контрагент.КПП;
	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
КонецПроцедуры // ПриИзмененииКонтрагента



// Процедура рассчитывает сумму взаиморасчетов.
//
Процедура РассчитатьСуммуВзаиморасчетов()
	
	
	мТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			
	СтрокаПлатеж.СуммаВзаиморасчетов=ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, ВалютаДокумента,
									мТекущаяВалютаВзаиморасчетов,
									КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
									КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
									
		
КонецПроцедуры // РассчитатьСуммуВзаиморасчетов()


// Процедура рассчитывает сумму платежа по сумме взаиморасчетов.
//
Процедура РассчитатьСуммуПлатежа()
	
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Иначе
		СтрокаПлатеж.СуммаПлатежа=СтрокаПлатеж.СуммаВзаиморасчетов;
		Возврат;
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаПлатежа=СтрокаПлатеж.СуммаВзаиморасчетов;
	
	ИначеЕсли (КурсДокумента <> 0) И (СтрокаПлатеж.КратностьВзаиморасчетов <> 0) И (СтрокаПлатеж.КурсВзаиморасчетов <> 0) Тогда
		СтрокаПлатеж.СуммаПлатежа=ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
															ВалютаДокумента,
			                                                СтрокаПлатеж.КурсВзаиморасчетов,КурсДокумента,
															СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);	
	Иначе
		СтрокаПлатеж.СуммаПлатежа = 0;
	КонецЕсли;
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		
	КонецЕсли;
	
	СформироватьНазначениеПлатежа();

КонецПроцедуры // РассчитатьСуммуПлатежа()

//Процедура рассчитывает курс взаиморасчетов по заявке
//

//Процедура рассчитывает курс взаиморасчетов документа
//
Процедура РассчитатьКурсВзаиморасчетов()
	
	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.СуммаВзаиморасчетов/ КратностьДокумента;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьКурсВзаиморасчетов
								


// Процедура выполняет действия, необходимые при выборе счета контрагента
//
// Параметры:
//  Нет.
//
Процедура ПриИзмененииСчетаКонтрагента()

	Если СчетКонтрагента.Пустая() Тогда
		ТекстПолучателя = "";
		Возврат;
	КонецЕсли;
		
	Если Контрагент.Пустая() Тогда
		Контрагент=СчетКонтрагента.Владелец;
		ПриИзмененииКонтрагента();
	КонецЕсли;
	
	Если НЕ СчетКонтрагента.Пустая() И НЕ СчетОрганизации.ВалютаДенежныхСредств=СчетКонтрагента.ВалютаДенежныхСредств Тогда
		Сообщить("Валюта счета контрагента не соответствует валюте счета организации!");
		СчетКонтрагента="";
		Возврат;
	КонецЕсли;	
	
	Если НЕ СчетКонтрагента.Пустая() Тогда
		ТекстПолучателя   = СчетКонтрагента.ТекстКорреспондента;
	Иначе	
		ТекстПолучателя   = "";
	КонецЕсли;	

	СформироватьНазначениеПлатежа();

КонецПроцедуры // ПриИзмененииСчетаКонтрагента()

Процедура НачальноеЗаполнениеПриВыбореКонтрагента()

	Если НЕ Контрагент.Пустая() Тогда
		
		ИННПолучателя = Контрагент.ИНН;
		КПППолучателя = Контрагент.КПП;
		
		Если НЕ СчетКонтрагента.Пустая() Тогда
			ТекстПолучателя   = СчетКонтрагента.ТекстКорреспондента;
		Иначе	
			ТекстПолучателя   = "";
		КонецЕсли;
		
	Иначе
		
		ИННПолучателя = "";
		КПППолучателя = "";
		СчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
		
	КонецЕсли;


КонецПроцедуры

// Процедура выполняет действия, необходимые при выборе организации
//
// Параметры:
//  Нет.
//
Процедура НачальноеЗаполнениеПриВыбореОрганизации()

	Если НЕ Организация.Пустая() Тогда

		ИННПлательщика  = Организация.ИНН; 
		КПППлательщика  = Организация.КПП; 
		
		Если НЕ СчетОрганизации.Пустая() Тогда
			ТекстПлательщика  = СчетОрганизации.ТекстКорреспондента;
		Иначе	
			ТекстПлательщика  = "";
		КонецЕсли;
	
	Иначе	
		
		ИННПлательщика  = Организация.ИНН; 
		КПППлательщика  = Организация.КПП; 
		СчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
		
	КонецЕсли;	

КонецПроцедуры	// НачальноеЗаполнениеПриВыбореОрганизации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	// Заполнить подменю выбора печатных форм.
	СписокМакетов = ЭтотОбъект.ПолучитьСписокПечатныхФорм();
	УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати,
	                                     СписокМакетов,
										 
										 Новый Действие("ДействияФормыДействиеВыбратьПечатнуюФормы"));

	// Установить печатную форму по умолчанию.
	УстановитьКнопкуПечати(ЭтотОбъект.Метаданные().Имя, ЭтаФорма, СписокМакетов, мПечатнаяФормаПоУмолчанию);

	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
	КонецЕсли;

	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = РасшифровкаПлатежа[0];
	СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;

	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.

		ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета,РасшифровкаПлатежа);
		НачальноеЗаполнениеПриВыбореОрганизации();
		НачальноеЗаполнениеПриВыбореКонтрагента();
		УстановитьНомерДокумента(ЭтотОбъект);
		
		УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);

		Если ЗначениеНеЗаполнено(ВидПлатежа) Тогда	
			ВидПлатежа         = ЭлементыФормы.ВидПлатежа.СписокВыбора[2];
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(ОчередностьПлатежа) Тогда	
			ОчередностьПлатежа         = 5; //6;  Изменено 2013.12.24
		КонецЕсли;
		
		СформироватьНазначениеПлатежа();

	Иначе

		ЕстьРасчетыСКонтрагентами = ЕстьРасчетыСКонтрагентами(ВидОперации);
		ЕстьРасчетыПоКредитам     = ЕстьРасчетыПоКредитам(ВидОперации);

	КонецЕсли;

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
		
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	
	
	УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
										ВернутьТаблицуДоступныхОперацийДляМенеджера(Ссылка), 
										Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	Список = Истина;
	
	
	УстановитьВидимость();

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ПриЗаписи" формы.
//
Процедура ПриЗаписи(Отказ)
	
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
		
		Если Вопрос("Не совпадают сумма документа и ее расшифровка. Пересчитать сумму документа?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			
			СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
			СформироватьНазначениеПлатежа();
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НапечататьДокументПоУмолчанию(ЭтотОбъект, глТекущийПользователь, мПечатнаяФормаПоУмолчанию);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
//
Процедура ДействияФормыДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		
		Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
			
			Если Вопрос("Не совпадают сумма документа и ее расшифровка. Пересчитать сумму документа?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
				
				СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
				СформироватьНазначениеПлатежа();
				
			Иначе
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
				
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = Кнопка.Текст;
		СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		СписокМакетов = ПолучитьСписокПечатныхФорм();
		СтрокаМакетаВСписке = СписокМакетов.НайтиПоЗначению(Кнопка.Имя);
		Если СтрокаМакетаВСписке <> Неопределено Тогда
			Печать(СтрокаМакетаВСписке.Значение);
			СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
			СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;			
			
		Иначе
			СсылкаВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Кнопка.Имя, "_", "-")));
			Печать(СсылкаВнешнейФормы);
			СтруктураМакета.Макет = СсылкаВнешнейФормы;
			СтруктураМакета.ПредставлениеМакета = Кнопка.Текст;
		КонецЕсли;		
		
		мПечатнаяФормаПоУмолчанию = СтруктураМакета.Макет;
		СохранитьТекущуюКнопкуПечати(ЭтотОбъект.Метаданные().Имя, СтруктураМакета);
		
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()



// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции

		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее[Кнопка.Имя] Тогда
			Возврат;
		КонецЕсли; 
		
		ВидОперации = Перечисления.ВидыОперацийППИсходящее[Кнопка.Имя];
		
		РасшифровкаПлатежа.Очистить();
		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
		УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);
		
		УстановитьФокус();
		СформироватьНазначениеПлатежа();
		
		ЕстьРасчетыСКонтрагентами=ЕстьРасчетыСКонтрагентами(ВидОперации);
		ЕстьРасчетыПоКредитам=ЕстьРасчетыПоКредитам(ВидОперации);
		
		УстановитьВидимость();
		
	КонецЕсли;

	// Отобразить в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура заполняет реквизиты документа по созданному в режиме обработки "Клиент банк" контрагенту
//
Процедура ЗаполнитьРеквизитыПоКонтрагенту(НовыйКонтрагент,НовыйДоговор);
	
	Если Контрагент.Пустая() Тогда
		
		Контрагент            	=НовыйКонтрагент;
		СчетКонтрагента			=НовыйКонтрагент.ОсновнойБанковскийСчет;
		
		СтрокаПлатеж.ДоговорКонтрагента             =?(НовыйДоговор.Пустая(),НовыйКонтрагент.ОсновнойДоговорКонтрагента,НовыйДоговор);
		
		ВалютаВзаиморасчетов=СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		
		СтруктураКурсаВзаиморасчетов         = ПолучитьКурсВалюты(ВалютаВзаиморасчетов, КонецДня(ДатаОплаты));
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		
		
		СтрокаПлатеж.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,
		ВалютаДокумента, 
		ВалютаВзаиморасчетов,
		КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
		
		РеквизитыКонтрагента.Очистить();
		
		//Установка меню Клиент-Банк
		УстановкаПодменюКлиентБанк(ЭлементыФормы.ДействияФормы.Кнопки.КлиентБанк.Кнопки, ЭтотОбъект);
		
		ОтражатьВБухгалтерскомУчете =Истина;
		ОтраженоВОперУчете          =Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРеквизитыПоКонтрагенту()




////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ




// Обработчик события "ПриИзменении" реквизита "СуммаДокумента"
//
Процедура СуммаПлатежаПриИзменении(Элемент)
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	СформироватьНазначениеПлатежа();
	
	РассчитатьКурсВзаиморасчетов();

КонецПроцедуры // СуммаДокументаПриИзменении()

// Обработчик события "ПриИзменении" реквизита "ДоговорКонтрагента"
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Обработчик события "НачалоВыбора" реквизита "ДоговорКонтрагента"
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
				ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()



// Обработчик события "НачалоВыбораИзСписка" реквизита "ПоказательОснования"
//
Процедура ПоказательОснованияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокВыбора =ПолучитьСписокОснованийПлатежа(); 

	ВыбранныйЭлемент = СписокВыбора.ВыбратьЭлемент("Выберите показатель основания",СписокВыбора);
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;	

	ПоказательОснования = ВыбранныйЭлемент;
	
КонецПроцедуры // ПоказательОснованияНачалоВыбораИзСписка()

// Обработчик события "НачалоВыбораИзСписка" реквизита "ПоказательТипа"
//
Процедура ПоказательТипаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокВыбора =ПолучитьСписокПоказателейТипа(); 

	ВыбранныйЭлемент = СписокВыбора.ВыбратьЭлемент("Выберите показатель типа",СписокВыбора);
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;		

	ПоказательТипа = ВыбранныйЭлемент;
	
КонецПроцедуры // ПоказательТипаНачалоВыбораИзСписка()

// Обработчик события "НачалоВыбора" реквизита "ПоказательПериода"
//
Процедура ПоказательПериодаНачалоВыбора(Элемент, СтандартнаяОбработка)

	ФормаПер = Документы.ПлатежноеПоручениеИсходящее.ПолучитьФорму("ФормаПериода",ЭтаФорма);
	ФормаПер.Открыть();

КонецПроцедуры // ПоказательПериодаНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "КурсВзаиморасчетов".
//
Процедура КурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;

	РассчитатьСуммуПлатежа();

КонецПроцедуры // КурсВзаиморасчетовНачалоВыбора()

Процедура СуммаДокументаРасчетыПриИзменении(Элемент)

	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
	Если СтрокаПлатеж.СуммаВзаиморасчетов=0 Тогда
		РассчитатьСуммуВзаиморасчетов();
	Иначе			
		РассчитатьКурсВзаиморасчетов();
	КонецЕсли;
	
	СформироватьНазначениеПлатежа();
			
КонецПроцедуры

Процедура КурсВзаиморасчетовПриИзменении(Элемент)

	РассчитатьСуммуПлатежа();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Контрагент".
//
Процедура КонтрагентПриИзменении(Элемент)

	// проставим основной договор контрагента
	ПриИзмененииКонтрагента();

	Если НЕ ЗначениеНеЗаполнено(Контрагент) Тогда
		СчетКонтрагента=Контрагент.ОсновнойБанковскийСчет;
	Иначе
		СчетКонтрагента=Неопределено;
	КонецЕсли;

	ПриИзмененииСчетаКонтрагента();

	ПриИзмененииДоговора();
	УстановитьФокус();

КонецПроцедуры

Процедура ОбновлениеОтображения()

	Если СтрокаПлатеж <> Неопределено Тогда
	
		//ЭлементыФормы.ИнфНадписьКурса.Заголовок = ПолучитьИнформациюКурсаВалютыСтрокой(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
		//																				 СтрокаПлатеж.КурсВзаиморасчетов,
		//																				 СтрокаПлатеж.КратностьВзаиморасчетов,
		//																				 мВалютаРегламентированногоУчета,
		//																				 Истина);
		НадписьВалютаДокумент=СчетОрганизации.ВалютаДенежныхСредств.Наименование;
		
		// Надпись НадписьСуммаВзаиморасчетов
		//ВалютаВзаиморасчетовПоДоговору = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		//Если ЗначениеНеЗаполнено(ВалютаВзаиморасчетовПоДоговору) Тогда
		//	НадписьСуммаВзаиморасчетов = "Сумма <нет валюты>:";
		//Иначе
		//	НадписьСуммаВзаиморасчетов = "Сумма " + СокрЛП(ВалютаВзаиморасчетовПоДоговору) + ":";
		//КонецЕсли;
		
		ЭлементыФормы.НадписьИтогоСписок.Заголовок="Итого платежей по списку: "+
										Формат(РасшифровкаПлатежа.Итог("СуммаПлатежа"),"ЧЦ=15; ЧДЦ=2; ЧН=Ноль")+
										" "+СокрЛП(ВалютаДокумента.Наименование);
		Если СуммаДокумента<>РасшифровкаПлатежа.Итог("СуммаПлатежа") Тогда
			ЭлементыФормы.НадписьИтогоСписок.Заголовок=ЭлементыФормы.НадписьИтогоСписок.Заголовок+" Разность: "+Строка(СуммаДокумента-РасшифровкаПлатежа.Итог("СуммаПлатежа"));
		КонецЕсли;	
										
	
	КонецЕсли; 
	
		//ЭлементыФормы.Подразделение.Доступность=ОтражатьВЗатратах;
	    //ЭлементыФормы.СтатьяЗатрат.Доступность=ОтражатьВЗатратах;
		
		
КонецПроцедуры

Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ОтражатьВНалоговомУчете=ОтражатьВБухгалтерскомУчете;
	УстановитьВидимость();

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
		
	Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
		СообщитьОбОшибке("Не совпадают сумма документа и расшифровка." );
		Отказ = Истина;
	КонецЕсли;
		
	// Лапенков (договор документа должен устанавливаться при выборе договора)
	Если ЗначениеНеЗаполнено(ДоговорКонтрагента) и РасшифровкаПлатежа.Количество()>0 Тогда
		ДоговорКонтрагента=СтрокаПлатеж.ДоговорКонтрагента;		 
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		 
		//ДоговорКонтрагента=СтрокаПлатеж.ДоговорКонтрагента;
		
		Если СтрокаПлатеж.СтатьяДвиженияДенежныхСредств.Пустая() Тогда
			СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
	КонецЕсли;
	
	ПроверкаОплатПоставщику();
	
	яштСменаПользователя(ЭтотОбъект, ЭтаФорма, глТекущийПользователь);
	
КонецПроцедуры

Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПараметрыВыбора=ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, 
	                     ПараметрыВыбора.ВидДвиженияРасчеты, ПараметрыВыбора.ТипЗаказа);
					
КонецПроцедуры

Процедура РасшифровкаПлатежаПриАктивизацииСтроки(Элемент)
	
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураДополнительныхПараметров=Новый Структура();
	СтруктураОтбора= Новый Структура();
	СтруктураОтбора.Вставить("ЗначениеОтбора", глТекущийПользователь);
	СтруктураОтбора.Вставить("ВидСравненияОтбора", ВидСравнения.Равно);
	СтруктураДополнительныхПараметров.Вставить("ОтветственноеЛицо", СтруктураОтбора);

	
	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
				ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка,СтруктураДополнительныхПараметров);

КонецПроцедуры

Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПараметрыВыбора=ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, 
	                     ПараметрыВыбора.ВидДвиженияРасчеты, ПараметрыВыбора.ТипЗаказа);
					
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговора();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
		
	РассчитатьКурсВзаиморасчетов();
	
КонецПроцедуры


Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры


Процедура СуммаДокументаПриИзменении()
	
	Если ИнвертироватьСуммы Тогда
		
		РассчитатьСуммуПлатежа();
		
		
	Иначе	
		
		Если РасшифровкаПлатежа.Количество()=1 Тогда
			
			СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
			
			Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
				
				ПересчитатьСуммуНДС(СтрокаПлатеж);
				
				Если СтрокаПлатеж.СуммаВзаиморасчетов=0 Тогда
					РассчитатьСуммуВзаиморасчетов();
				Иначе			
					РассчитатьКурсВзаиморасчетов();
				КонецЕсли;
				
			Иначе
				
								
			КонецЕсли;
			
			СформироватьНазначениеПлатежа();
			
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры

Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ЗначениеНеЗаполнено(Элемент.ТекущиеДанные.ДоговорКонтрагента) И
		 НЕ ЗначениеНеЗаполнено(Элемент.ТекущиеДанные.Сделка) И ТипЗнч(Элемент.ТекущиеДанные.Сделка)=Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		// проверяем задолженность по сделке, при условии, что ее нет в движениях документа
		  //Сообщить(ТекущийДолг(Элемент.ТекущиеДанные.ДоговорКонтрагента,
		  //Элемент.ТекущиеДанные.Сделка,Неопределено));
	КонецЕсли;	
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПослеУдаления(Элемент)
	
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		Отказ=Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура НадписьЧастичнаяОплатаНажатие(Элемент)
	
	ФормаДокументОплаты=Документы.ПлатежныйОрдерСписаниеДенежныхСредств.ПолучитьФормуСписка();
	
	ФормаДокументОплаты.Отбор.РасчетныйДокумент.Значение=Ссылка;
	ФормаДокументОплаты.Отбор.РасчетныйДокумент.Использование=Истина;
	
	ФормаДокументОплаты.ЭлементыФормы.ДокументСписок.НастройкаОтбора.РасчетныйДокумент.Доступность=Ложь;
	
	ФормаДокументОплаты.Открыть();
	
КонецПроцедуры

// Заполняет ИНН плательщика при нажатии на кнопку
//
Процедура ЗаполнитьИННПлательщикаНажатие(Элемент)

	Если НЕ Организация.Пустая() Тогда
		ИННПлательщика  = Организация.ИНН;
	КонецЕсли;

КонецПроцедуры

// Заполняет КПП плательщика при нажатии на кнопку
//
Процедура ЗаполнитьКПППлательщикаНажатие(Элемент)

	Если НЕ Организация.Пустая() Тогда
			КПППлательщика = Организация.КПП;
	КонецЕсли;

КонецПроцедуры

// Заполняет ИНН получателя при нажатии на кнопку
//
Процедура ЗаполнитьИННПолучателяНажатие(Элемент)

	Если НЕ Контрагент.Пустая() Тогда
		ИННПолучателя = Контрагент.ИНН;
	КонецЕсли;

КонецПроцедуры

// Заполняет КПП получателя при нажатии на кнопку
//
Процедура ЗаполнитьКПППолучателяНажатие(Элемент)

	Если НЕ Контрагент.Пустая() Тогда
		КПППолучателя = Контрагент.КПП;
	КонецЕсли;

КонецПроцедуры


Процедура УстановитьЗначениеПриВыборе(ИсходноеЗначение,ЗначениеВыбора)
	
	Если ЗначениеНеЗаполнено(ИсходноеЗначение) Тогда
		ИсходноеЗначение=ЗначениеВыбора;
	КонецЕсли;
		
КонецПроцедуры // УстановитьЗначениеПриВыборе() 

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если НЕ ТипЗнч(ЗначениеВыбора)=Тип("Структура") Тогда
		
		Если ЗначениеВыбора="АвтоПодбор" Тогда
			
			Если РасшифровкаПлатежа.Количество()>1 Тогда
				Список=истина;
			ИначеЕсли РасшифровкаПлатежа.Количество()=0 Тогда
				Список=Ложь;
				НоваяСтрока=РасшифровкаПлатежа.Добавить();			
			КонецЕсли;
			
			СтрокаПлатеж=РасшифровкаПлатежа[0];
						
			УстановитьФокус();
			
			УстановитьВидимость();

			СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
			
			Возврат;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
			

	Иначе
		
		НДСПоУмолчанию=?(ЗначениеНеЗаполнено(СтрокаПлатеж.СтавкаНДС),ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяСтавкаНДС"),
						СтрокаПлатеж.СтавкаНДС);
		
		ОбработкаПодбораЗадолженностей(СтрокаПлатеж,РасшифровкаПлатежа,ЗначениеВыбора,
		Список,ВалютаДокумента,КурсДокумента,КратностьДокумента,
		Организация, Контрагент, НДСПоУмолчанию,ОтражатьВБухгалтерскомУчете);
		
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
	КонецЕсли;
	
	СформироватьНазначениеПлатежа();
	
	УстановитьФокус();
	
	УстановитьВидимость();
				
КонецПроцедуры

Процедура КнопкаПодборНажатие(Элемент)
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"					,ЭтаФорма);
	СтруктураПараметров.Вставить("Организация"						,Организация);
	СтруктураПараметров.Вставить("Контрагент"						,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"					,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"					,СуммаДокумента);
	СтруктураПараметров.Вставить("РасшифровкаПлатежаДок"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ДатаДок"							,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"					,ВидОперации);
	СтруктураПараметров.Вставить("КурсДокумента"					,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"				,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"					,"<0");
    СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"				,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"		,Истина);
	СтруктураПараметров.Вставить("ФормаОплаты"						,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"					,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("ВидОперацииПлан"					,ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"				,СчетОрганизации);
	СтруктураПараметров.Вставить("Проект"							,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств"	,СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,ОтражатьВБухгалтерскомУчете);
	
	ПодборЗадолженностей(СтруктураПараметров);
	
КонецПроцедуры

Процедура КоманднаяПанельПлатежиПодбор(Кнопка)
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"					,ЭтаФорма);
	СтруктураПараметров.Вставить("Организация"						,Организация);
	СтруктураПараметров.Вставить("Контрагент"						,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"					,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"					,СуммаДокумента);
	СтруктураПараметров.Вставить("РасшифровкаПлатежаДок"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ДатаДок"							,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"					,ВидОперации);
	СтруктураПараметров.Вставить("КурсДокумента"					,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"				,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"					,"<0");
    СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"				,Ложь);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"		,Истина);
	СтруктураПараметров.Вставить("ФормаОплаты"						,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"					,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("ВидОперацииПлан"					,ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"				,СчетОрганизации);
	СтруктураПараметров.Вставить("Проект"							,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств"	,СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,ОтражатьВБухгалтерскомУчете);
	
	ПодборЗадолженностей(СтруктураПараметров);
	
КонецПроцедуры

Процедура КоманднаяПанельПлатежиЗаполнить(Кнопка)
 	
   ЗаполнитьРасшифровкуПлатежейДляМенеджеров();

	
	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
КонецПроцедуры


Процедура СписокПриИзменении(Элемент)
	
	Если Не Список И РасшифровкаПлатежа.Количество()>1 Тогда
		
		ТекстВопроса = "Все строки расшифровки платежа, кроме первой, будут удалены.
		|Продолжить?";
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Список=Истина;
			Возврат;
		КонецЕсли;
		
		Пока РасшифровкаПлатежа.Количество()>1 Цикл
			СтрокаУдаления=РасшифровкаПлатежа[1];
			РасшифровкаПлатежа.Удалить(СтрокаУдаления);
		КонецЦикла;
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
		СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
		РассчитатьСуммуПлатежа();
		
	Иначе
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
		СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
	КонецЕсли;		
		
	СформироватьНазначениеПлатежа();
	
	УстановитьВидимость();
	
КонецПроцедуры








Процедура ОплаченоПриИзменении(Элемент)
	
	Если Оплачено Тогда
		ЭлементыФормы.ДатаОплаты.АвтоОтметкаНезаполненного=Истина;
	Иначе
		ЭлементыФормы.ДатаОплаты.АвтоОтметкаНезаполненного=Ложь;
		ЭлементыФормы.ДатаОплаты.ОтметкаНезаполненного=Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры



Процедура ЗаполнитьРасшифровкуПлатежейДляМенеджеров() 
	
ТЗДолги= Новый ТаблицаЗначений;	
ТЗДолги.Колонки.Добавить("Контрагент");
ТЗДолги.Колонки.Добавить("ДоговорКонтрагента");
ТЗДолги.Колонки.Добавить("Сделка");
ТЗДолги.Колонки.Добавить("ДатаОплаты");
ТЗДолги.Колонки.Добавить("ОстатокДолга");

	
	
	
	Если РасшифровкаПлатежа.Количество() > 0 Тогда
			
			ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
	КонецЕсли;

	
    ЗапросПоДоговорам=Новый Запрос;
    ЗапросПоДоговорам.Текст="ВЫБРАТЬ Ссылка ДоговорКонтрагента ИЗ   Справочник.ДоговорыКонтрагентов 
    | ГДЕ Владелец = &Владелец И ВедениеВзаиморасчетов = Значение(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам) И ОтветственноеЛицо=&ОтветственноеЛицо
	| И ВидДоговора=Значение(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)";
    ЗапросПоДоговорам.УстановитьПараметр("Владелец",Контрагент);
    ЗапросПоДоговорам.УстановитьПараметр("ОтветственноеЛицо", глТекущийПользователь);
    ФормаВыбораДоговора=Обработки.ПодборРасшифровкаПлатежаДляМенеджеров.ПолучитьФорму("ФормаВыбораДоговоров");
    ФормаВыбораДоговора.ОбработкаОбъект.ДоговорыКонтрагентов.Загрузить(ЗапросПоДоговорам.Выполнить().Выгрузить());
    ФормаВыбораДоговора.ОбработкаОбъект.Контрагент=Контрагент;
    //ФормаВыбораДоговора.СписокДоговоры.ЗагрузитьЗначения(ЗапросПоДоговорам.Выполнить().Выгрузить().ВыгрузитьКолонку("ДоговорКонтрагента"));
    СписокВыбранныхДоговоров=ФормаВыбораДоговора.ОткрытьМодально();
    Если  ЗначениеНеЗаполнено(СписокВыбранныхДоговоров) Тогда 
    	Сообщить("Ни выбран ни один из договоров контрагента.",СтатусСообщения.Важное);	
    	Возврат;
    КонецЕсли;
    
    Если СписокВыбранныхДоговоров.Количество()=0 Тогда
    	Сообщить("Ни выбран ни один из договоров контрагента.",СтатусСообщения.Важное);
    	Возврат;
    КонецЕсли;	
  
 Запрос = Новый Запрос;
Запрос.Текст="ВЫБРАТЬ
|	ДоговорКонтрагента.Владелец Контрагент,
|	ДоговорКонтрагента.Ссылка ДоговорКонтрагента,
|   Сделка Сделка,
|	-СуммаВзаиморасчетовОстаток  ОстатокДолга
|ИЗ
|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(, 
|	 ДоговорКонтрагента.ВидДоговора = Значение(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)  
|	И Сделка ССЫЛКА Документ.ЗаказПоставщику
| 	И ДоговорКонтрагента В (&ДоговорыКонтрагента) 
| ) 	ГДЕ СуммаВзаиморасчетовОстаток<0";


Если не ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
Запрос.УстановитьПараметр("ДоговорыКонтрагента",СписокВыбранныхДоговоров);
КонецЕсли;

Результат=Запрос.Выполнить();

  Выборка=Результат.Выбрать();
  
  Если  Результат.Пустой() Тогда
	Возврат;	  
  КонецЕсли;  
  
  Пока Выборка.Следующий() Цикл
	  Если не ЗначениеНеЗаполнено(Выборка.Сделка) Тогда
		        ПолучитьДолгиПоставщикуПоСделке(Выборка.Сделка,Выборка.ОстатокДолга,ТЗДолги);
	  КонецЕсли;
  КонецЦикла;  
  
  Для каждого строка из ТЗДолги Цикл
	  Если ЗначениеНеЗаполнено(строка.ДатаОплаты)  Тогда
		  строка.ДатаОплаты=ПустоеЗначениеТипа(Тип("Дата"));
	  КОнецЕсли;	
	  
	КонецЦикла;

  
  
  ТЗДолги.Сортировать("ДатаОплаты Возр,Сделка Возр");
  
  ТЗДолгиПоЗаказам=ТЗДолги.Скопировать();
  ТЗДолгиПоЗаказам.Свернуть("Контрагент,ДоговорКонтрагента,ДатаОплаты,Сделка","ОстатокДолга");
  
 ТЗДолги.Свернуть("Контрагент,ДоговорКонтрагента,ДатаОплаты","ОстатокДолга");
 ТЗДолги.Сортировать("ДатаОплаты,Контрагент,ДоговорКонтрагента");

//ТЗДатаОплаты - таблица только дат оплаты


	//+++ 21.07.2014
	суммаПлатежа 		= РасшифровкаПлатежа[0].СуммаПлатежа;
	СуммаВзаиморасчетов = РасшифровкаПлатежа[0].СуммаВзаиморасчетов;
	
    курс    = РасшифровкаПлатежа[0].СуммаПлатежа/РасшифровкаПлатежа[0].СуммаВзаиморасчетов;
	
	курсДок = РасшифровкаПлатежа[0].КурсВзаиморасчетов;
	ставкаНДС = РасшифровкаПлатежа[0].СтавкаНДС;
	РасшифровкаПлатежа.Очистить();
	
		СуммаОплатыПоДоговору = СуммаВзаиморасчетов; // распределение идет по суммам взаиморасчетов
		НарастающийИтог = 0;
	//+++)
	
Для каждого строка ИЗ ТЗДолгиПоЗаказам Цикл
	
	СуммаДолгаЗачтена = Мин(строка.ОстатокДолга,Макс(СуммаОплатыПоДоговору-НарастающийИтог,0));
	
	Если СуммаДолгаЗачтена>0 Тогда
		
		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
		
		СтрокаПлатеж.ДоговорКонтрагента=строка.ДоговорКонтрагента;
		СтрокаПлатеж.Сделка=строка.Сделка;
	
		СтрокаПлатеж.СуммаВзаиморасчетов = СуммаДолгаЗачтена;
	
	//+++ 21.07.2014	
	//СтрокаПлатеж.СуммаПлатежа=строка.ОстатокДолга;
	//СтрокаПлатеж.КурсВзаиморасчетов = 1;
 	//СтрокаПлатеж.СтавкаНДС=Перечисления.СтавкиНДС.НДС18;
	СтрокаПлатеж.СуммаПлатежа=СтрокаПлатеж.СуммаВзаиморасчетов * курс;
	СтрокаПлатеж.КурсВзаиморасчетов = курсДок;
 	СтрокаПлатеж.СтавкаНДС=ставкаНДС;
	//+++)
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
	СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщику;

	НарастающийИтог = НарастающийИтог + СуммаДолгаЗачтена;
	КонецЕсли;
	
КонецЦикла;	

//+++ 21.07.2014
СуммаАванса=Макс(СуммаОплатыПоДоговору-НарастающийИтог,0);
// если осталась сумма аванса, то относим ее по договору ВыбранныйДоговор на пустой заказ
Если СуммаАванса>0 Тогда
	СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.ДоговорКонтрагента=строка.ДоговорКонтрагента;
	СтрокаПлатеж.СуммаВзаиморасчетов = СуммаАванса;
	СтрокаПлатеж.СуммаПлатежа=СуммаАванса * курс;
	СтрокаПлатеж.КурсВзаиморасчетов = курсДок;
    СтрокаПлатеж.СтавкаНДС=ставкаНДС;
    ПересчитатьСуммуНДС(СтрокаПлатеж);
	СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщику;
КонецЕсли;			
	//+++)
	

КонецПроцедуры

  Процедура КоманднаяПанельПлатежиИнфКнопка(Кнопка)
	// производим анализ данного ППИсх
	ПлатежейПоСделкам=0;
	Если РасшифровкаПлатежа.Количество()=0 Тогда
		Предупреждение("Не выбрано ни одного платежа в расшифровке");
	Иначе
		Для каждого строкаРасшифровки ИЗ РасшифровкаПлатежа Цикл
			Если не ЗначениеНеЗаполнено(строкаРасшифровки.ДоговорКонтрагента) Тогда
				Если  (строкаРасшифровки.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам или
					строкаРасшифровки.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам или
					строкаРасшифровки.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам)
					И не ЗначениеНеЗаполнено(строкаРасшифровки.Сделка) Тогда
					ПлатежейПоСделкам=ПлатежейПоСделкам+строкаРасшифровки.СуммаПлатежа;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
		Предупреждение("По данному документу сумма платежей по отгрузкам: "+Формат(ПлатежейПоСделкам,"ЧЦ=15; ЧДЦ=2; ЧН=0")+Строка(ВалютаДокумента)+"."+Символы.ПС+"отнесено на  аванс:"+Формат(РасшифровкаПлатежа.Итог("СуммаПлатежа")-ПлатежейПоСделкам,"ЧЦ=15; ЧДЦ=2; ЧН=0")+Строка(ВалютаДокумента)+".");	
		
	КонецЕсли;	
	 
КонецПроцедуры


Процедура РасшифровкаПлатежаСделкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекущиеДанные=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	Если Не ЗначениеНеЗаполнено(ВыбранноеЗначение) И
		ТекущиеДанные.СуммаВзаиморасчетов=0 Тогда
		ТекущиеДанные.СуммаВзаиморасчетов=-ТекущийДолг(ТекущиеДанные.ДоговорКонтрагента,ВыбранноеЗначение,Неопределено); 
		ТекущиеДанные.КурсВзаиморасчетов=1;
		ТекущиеДанные.СуммаПлатежа=ТекущиеДанные.СуммаВзаиморасчетов;
		ТекущиеДанные.СтавкаНДС=Перечисления.СтавкиНДС.НДС18;
		ПересчитатьСуммуНДС(ТекущиеДанные);

	КонецЕсли;	
КонецПроцедуры

Процедура КоманднаяПанельПлатежиДействиеУравнять(Кнопка)
	
	Если  РасшифровкаПлатежа.Итог("СуммаПлатежа")<> СуммаДокумента И СуммаДокумента>0 Тогда
		СуммаНакоп=0;
		// удаляем строки не соответствующие текущей кассе
		сч=0;
		Пока сч < РасшифровкаПлатежа.Количество() Цикл
			СуммаНакоп=СуммаНакоп+РасшифровкаПлатежа[сч].СуммаПлатежа;
			Если СуммаНакоп>=СуммаДокумента Тогда
				РасшифровкаПлатежа[сч].СуммаВзаиморасчетов=РасшифровкаПлатежа[сч].СуммаВзаиморасчетов-СуммаНакоп+СуммаДокумента;
				РасшифровкаПлатежа[сч].КурсВзаиморасчетов=1;
				РасшифровкаПлатежа[сч].СуммаПлатежа = РасшифровкаПлатежа[сч].СуммаВзаиморасчетов;
				РасшифровкаПлатежа[сч].СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
				ПересчитатьСуммуНДС(РасшифровкаПлатежа[сч]);
				Прервать;
			КонецЕсли;
				сч=сч+1;
			КонецЦикла;
				сч=сч+1;
	
			Пока сч < РасшифровкаПлатежа.Количество() Цикл
				РасшифровкаПлатежа.Удалить(сч);
		    КонецЦикла;  
	КонецЕсли;			
КонецПроцедуры

Процедура КоманднаяПанельПлатежиДействиеПодбор(Кнопка)
	ФормаПодбора =  Документы.ЗаказПоставщику.ПолучитьФорму("ФормаВыбора",ЭлементыФормы.РасшифровкаПлатежа);
	Если Не ЗначениеНеЗаполнено(ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента) Тогда
		ФормаПодбора.Отбор.ДокументыПоДоговоруКонтрагента.Значение      = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента;
		ФормаПодбора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Истина;
		ФормаПодбора.РежимВыбора = Истина;
		ФормаПодбора.ЗакрыватьПриВыборе  = Ложь;
		//ФормаПодбора.МножественныйВыбор  = Истина;
		ФормаПодбора.Открыть();
	Иначе
		//Сообщить("Спозиционируйтесь ");
	КонецЕсли;
КонецПроцедуры

Процедура РасшифровкаПлатежаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		СуммаДолга=ТекущийДолг(ВыбранноеЗначение.ДоговорКонтрагента,
		  ВыбранноеЗначение,Неопределено);
		  Если СуммаДолга<0 Тогда // действительно кредиторка
			  СуммаДолга=-СуммаДолга;
		  Иначе
			  Возврат;
		  КонецЕсли;
		  
		НоваяСтрока=РасшифровкаПлатежа.Добавить();
		НоваяСтрока.ДоговорКонтрагента=ВыбранноеЗначение.ДоговорКонтрагента;
		НоваяСтрока.Сделка=ВыбранноеЗначение;
		НоваяСтрока.СуммаВзаиморасчетов=СуммаДолга;
		НоваяСтрока.КурсВзаиморасчетов=1;
		НоваяСтрока.СуммаПлатежа=СуммаДолга;
		НоваяСтрока.СтавкаНДС=Перечисления.СтавкиНДС.НДС18;
		ПересчитатьСуммуНДС(НоваяСтрока);
	КонецЕсли;
КонецПроцедуры

Процедура ПроверкаОплатПоставщику()
	//ТаблицаОплат=РасшифровкаПлатежа.ВыгрузитьКолонки("ДоговорКонтрагента,Сделка,СуммаВзаиморасчетов");
	
	ТаблицаОплат=РасшифровкаПлатежа.Выгрузить();
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ДоговорКонтрагента,
	|	Сделка,
	|	-СУММА(СуммаВзаиморасчетов) СуммаВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами
	|   ГДЕ  Регистратор = &Регистратор
	|	И ДоговорКонтрагента.ВедениеВзаиморасчетов = Значение(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам)
	|	И ВидДвижения = &ВидДвиженияПриход
	|	СГРУППИРОВАТЬ ПО ДоговорКонтрагента,
	|	Сделка";
	
	Запрос.УстановитьПараметр("ВидДвиженияПриход",ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("Регистратор",Ссылка);
	
	Результат=Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка=Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
		строкаТО=ТаблицаОплат.Добавить();	
		ЗаполнитьЗначенияСвойств(строкаТО,Выборка);
		КонецЦикла;	
	КонецЕсли;	
	
	ТаблицаОплат.Свернуть("ДоговорКонтрагента,Сделка","СуммаВзаиморасчетов");
	
	Для каждого строка ИЗ ТаблицаОплат Цикл
		Если ЗначениеЗаполнено(строка.ДоговорКонтрагента) И
			ЗначениеЗаполнено(строка.Сделка) И 
			строка.СуммаВзаиморасчетов + ТекущийДолг(строка.ДоговорКонтрагента,
		  строка.Сделка,Неопределено)>0 Тогда
 	   Сообщить("Сумма оплаты превышает текущий долг по сделке: "+Строка(строка.Сделка));
	    КонецЕсли;
	КонецЦикла;
	
		
	
КонецПроцедуры



							
