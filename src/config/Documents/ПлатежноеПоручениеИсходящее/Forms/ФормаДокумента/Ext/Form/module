////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;
//Хранит текущую строку списка оплачиваемых документов
Перем СтрокаПлатеж;

//Хранит текущую строку списка ведомостей на выплату ЗП
Перем СтрокаВыплата;

Перем ИнвертироватьСуммы;

Перем мПечатнаяФормаПоУмолчанию;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура выполняет необходимые действия формирования текста назначения платежа
//
Процедура СформироватьНазначениеПлатежа()

	АдресСуммы=Найти(НазначениеПлатежа,"Сумма");
	
	Если АдресСуммы>0 Тогда
		ТекстНазначение=Лев(НазначениеПлатежа,АдресСуммы-2);
	Иначе
		ТекстНазначение=НазначениеПлатежа;
	КонецЕсли;
	
	Если ТекстНазначение="" И НЕ СчетКонтрагента.Пустая() Тогда
		ТекстНазначение = СчетКонтрагента.ТекстНазначения;
	КонецЕсли;	

	ТекстСумма="Сумма " + Формат(СуммаДокумента, "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00") + Символы.ПС;
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		ТабНДС=РасшифровкаПлатежа.Выгрузить();
		//Миронычев 03,06,17
		//ТабНДС.Свернуть("СтавкаНДС","СуммаНДС");
		ТабНДС.Свернуть("СтавкаНДС","СуммаНДС, СуммаПлатежа");
		//КонецМиронвчев
		Для Каждого СтрокаНДС ИЗ ТабНДС цикл
			//Миронычев 03,06,17
			ЗначениеСтавкиНДС = ПолучитьСтавкуНДС(СтрокаНДС.СтавкаНДС);
			СуммаНДС = СтрокаНДС.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
			
			//ТекстСумма = ТекстСумма + "НДС(" + ?(ЗначениеНеЗаполнено(СтрокаНДС.СтавкаНДС), "без налога", СтрокаНДС.СтавкаНДС) + ") " + Формат(СтрокаНДС.СуммаНДС, "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00")+Символы.ПС;
			ТекстСумма = ТекстСумма + "НДС(" + ?(ЗначениеНеЗаполнено(СтрокаНДС.СтавкаНДС), "без налога", СтрокаНДС.СтавкаНДС) + ") " + Формат(СуммаНДС, "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00")+Символы.ПС;
			//КонецМиронвчев
		КонецЦикла;
		
	КонецЕсли;
	
	НазначениеПлатежа=ТекстНазначение+Символы.ПС+ТекстСумма;

КонецПроцедуры // СформироватьНазначениеПлатежа()

// Возвращает фокус на строку ТЧ "Расшифровка платежа" при его потере в режиме редактирования
// одиночного платежа.
Процедура УстановитьФокус()

	Если ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = Неопределено Тогда

		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = СтрокаПлатеж;

	КонецЕсли;

КонецПроцедуры // УстановитьФокус()


// Процедура устанавливает видимость закладок. 
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	
	ЭлементыФормы.Панель1.Страницы["СтраницаПеречислениеНалогов"].Видимость = Ложь;
	ЭлементыФормы.ПанельПлатежи.Видимость=Истина;
	ЭлементыФормы.РамкаРасшифровкаПлатежа.Видимость=Истина;
	//{Лапенков 20061123
	ЭлементыФормы.Надпись5.Видимость = Истина;
	ЭлементыФормы.Контрагент.Видимость = Истина;
	//}Лапенков 20061123
	//***2014.12.08
	ЭлементыФормы.НомерАккредитива.Видимость = Ложь;
	ЭлементыФормы.НадписьНомерАккредитива.Видимость = Ложь;
	//***
	
	//Плотников
	ЭлементыФормы.Транзитный.Видимость = (ВидОперации=Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю);
	ЭлементыФормы.КонтрТранзит.Видимость = (ВидОперации=Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю 
		или ВидОперации=Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщикуСКодомКБК);
		
	ЭлементыФормы.КонтрагентТранзит.Видимость = (ВидОперации=Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщикуСКодомКБК или ВидОперации=Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю);
	ЭлементыФормы.ДоговорТранзит.Видимость = (ВидОперации=Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщикуСКодомКБК или ВидОперации=Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю);
	ЭлементыФормы.ПолеДоговорТранзит.Видимость = (ВидОперации=Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщикуСКодомКБК или ВидОперации=Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю);
	
	//ЭлементыФормы.КонтрагентТранзит.Видимость = (ВидОперации=Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщикуСКодомКБК );
	//ЭлементыФормы.ДоговорТранзит.Видимость = (ВидОперации=Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщикуСКодомКБК );
	//ЭлементыФормы.ПолеДоговорТранзит.Видимость = (ВидОперации=Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщикуСКодомКБК );
	//Плотников	
		
	Если ЕстьРасчетыСКонтрагентами и не ВидОперации=Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщикуСКодомКБК  Тогда
		
		Если Список Тогда
			УстановитьТекущуюСтраницу("ПлатежПоНесколькимСделкам", ЭлементыФормы.ПанельПлатежи);
		Иначе
			УстановитьТекущуюСтраницу("ПлатежПоОднойСделке", ЭлементыФормы.ПанельПлатежи);
		КонецЕсли;
		
		ЭлементыФормы.РамкаРасшифровкаПлатежа.Заголовок="Расшифровка платежа";
		
		ЭлементыФормы.Сделка.Доступность=Истина;
		
		ЭлементыФормы.НадписьРедактировать.Видимость = НЕ ЧастичнаяОплата;
		ЭлементыФормы.Список.Видимость = НЕ ЧастичнаяОплата;
		ЭлементыФормы.Список1.Видимость = НЕ ЧастичнаяОплата;
		
		Если СтрокаПлатеж.ДоговорКонтрагента.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			ЭлементыФормы.Сделка.Доступность=Ложь;
		Иначе
			ЭлементыФормы.Сделка.Доступность=Истина;
		КонецЕсли;
		
		//***2014.12.08
		ЭлементыФормы.НомерАккредитива.Видимость = Истина;
		ЭлементыФормы.НадписьНомерАккредитива.Видимость = Истина;
		//***
				
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
		
		ЭлементыФормы.РамкаРасшифровкаПлатежа.Заголовок="Прочее списание денежных средств";
		УстановитьТекущуюСтраницу("ПлатежПрочие", ЭлементыФормы.ПанельПлатежи);	
		
		ЭлементыФормы.НадписьРедактировать.Видимость = Ложь;
		ЭлементыФормы.Список.Видимость = Ложь;
		ЭлементыФормы.Список1.Видимость = Ложь;
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога 
		или ВидОперации=Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщикуСКодомКБК Тогда
		
		УстановитьТекущуюСтраницу("ПлатежПрочие", ЭлементыФормы.ПанельПлатежи);
		ЭлементыФормы.Панель1.Страницы["СтраницаПеречислениеНалогов"].Видимость = Истина;
		
		ЭлементыФормы.НадписьРедактировать.Видимость = Ложь;
		ЭлементыФормы.Список.Видимость = Ложь;
		ЭлементыФормы.Список1.Видимость = Ложь;
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		УстановитьТекущуюСтраницу("ПереводНаДругойСчет", ЭлементыФормы.ПанельПлатежи);
		
		//Если СчетОрганизации.ВалютаДенежныхСредств = СчетКонтрагента.ВалютаДенежныхСредств Тогда
			ЭлементыФормы.Надпись47.Видимость = СчетОрганизации.ВалютаДенежныхСредств <> СчетКонтрагента.ВалютаДенежныхСредств;
			ЭлементыФормы.Надпись48.Видимость = СчетОрганизации.ВалютаДенежныхСредств <> СчетКонтрагента.ВалютаДенежныхСредств;
			ЭлементыФормы.КурсВзаиморасчетовПереводМеждуСчетами1.Видимость = СчетОрганизации.ВалютаДенежныхСредств <> СчетКонтрагента.ВалютаДенежныхСредств;
		    ЭлементыФормы.ПолеВвода1.Видимость = СчетОрганизации.ВалютаДенежныхСредств <> СчетКонтрагента.ВалютаДенежныхСредств;
		    ЭлементыФормы.ВалютаНадпись.Видимость = СчетОрганизации.ВалютаДенежныхСредств <> СчетКонтрагента.ВалютаДенежныхСредств;
			ЭлементыФормы.РассчитатьКурс3.Видимость = СчетОрганизации.ВалютаДенежныхСредств <> СчетКонтрагента.ВалютаДенежныхСредств;
		//иначе
			ЭлементыФормы.РассчитатьКурс2.Видимость = СчетОрганизации.ВалютаДенежныхСредств = СчетКонтрагента.ВалютаДенежныхСредств;
		//КонецЕсли;
						  
		//делаем невидимым надпись контрагента
		ЭлементыФормы.Надпись5.Видимость = Ложь;
		ЭлементыФормы.Контрагент.Видимость        = Ложь;
		ЭлементыФормы.Список.Видимость = Ложь;
		ЭлементыФормы.Список1.Видимость = Ложь;
		ЭлементыФормы.НадписьРедактировать.Видимость  = Ложь;
		//ЭлементыФормы.ОтражатьВЗатратах.Значение  = Ложь;
		
	ИначеЕсли ЕстьРасчетыПоКредитам Тогда
		
		УстановитьТекущуюСтраницу("ПлатежПоОднойСделке", ЭлементыФормы.ПанельПлатежи);
		
		ЭлементыФормы.РамкаРасшифровкаПлатежа.Заголовок="Расшифровка платежа";
		
		ЭлементыФормы.Сделка.Доступность=Ложь;
		
		ЭлементыФормы.НадписьРедактировать.Видимость = Ложь;
		ЭлементыФормы.Список.Видимость = Ложь;
		ЭлементыФормы.Список1.Видимость = Ложь;
		
	КонецЕсли;
	
	Если ЧастичнаяОплата Тогда
		ЭтаФорма.ТолькоПросмотр=Истина;
		ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации.Доступность=Ложь;
		УстановитьТекущуюСтраницу("СтраницаЧастичнаяОплата", ЭлементыФормы.ПанельОплата);
		ЭлементыФормы.КнопкаПодборДоговор.Доступность=Ложь;
		ЭлементыФормы.КоманднаяПанельПлатежи.Кнопки.Заполнить.Доступность=Ложь;
		ЭлементыФормы.КоманднаяПанельПлатежи.Кнопки.Подбор.Доступность=Ложь;
	Иначе
		ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации.Доступность=Истина;
		УстановитьТекущуюСтраницу("СтраницаОплата", ЭлементыФормы.ПанельОплата);
		ЭлементыФормы.КнопкаПодборДоговор.Доступность=Истина;
		ЭлементыФормы.КоманднаяПанельПлатежи.Кнопки.Заполнить.Доступность=Истина;
		ЭлементыФормы.КоманднаяПанельПлатежи.Кнопки.Подбор.Доступность=Истина;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность=Истина;
	Иначе
		ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность=Ложь;
	КонецЕсли;
	
	Если Не Список И ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		ЭлементыФормы.КурсВзаиморасчетовПлан.Видимость=Ложь;
		ЭлементыФормы.СуммаПлатежаПлан.Видимость=Ложь;
		ЭлементыФормы.НадписьКурсВзаиморасчетовПлан.Видимость=Ложь;
		ЭлементыФормы.НадписьСуммаПлатежаПлан.Видимость=Ложь;
		ЭлементыФормы.ИнфНадписьКурсаЗаявки.Видимость=Ложь;
		
	Иначе
		ЭлементыФормы.КурсВзаиморасчетовПлан.Видимость=Истина;
		ЭлементыФормы.СуммаПлатежаПлан.Видимость=Истина;
		ЭлементыФормы.НадписьКурсВзаиморасчетовПлан.Видимость=Истина;
		ЭлементыФормы.НадписьСуммаПлатежаПлан.Видимость=Истина;
		ЭлементыФормы.ИнфНадписьКурсаЗаявки.Видимость=Истина;
		
	КонецЕсли;
	
	УстановитьДанныеДляРеквизитов();
	
	ВидимостьРеквизитаПроект(ЭтотОбъект, ЭлементыФормы, "НадписьПроект,Проект,НадписьПроект1,Проект1,РасшифровкаПлатежа.Проект");
	
	Если (ЭлементыФормы.Списком2.Значение = Ложь) Тогда 
		ЭлементыФормы.Затраты.Видимость = Истина;
		ЭлементыФормы.Подразделение.Видимость = Ложь;
		ЭлементыФормы.СтатьяЗатрат.Видимость = Ложь;		
		ЭлементыФормы.НоменклатурнаяГруппа.Видимость = Ложь;
		ЭлементыФормы.НадписьПодразделение.Видимость = Ложь;
		ЭлементыФормы.НадписьСтатьяЗатрат.Видимость = Ложь;
		ЭлементыФормы.НадписьНоменклатурнаяГруппа.Видимость = Ложь;
		ЭлементыФормы.КоманднаяПанель2.Видимость = Истина;
		//Адиянов<<< Начало СтатьяЗатратУпр
		ЭлементыФормы.СтатьяЗатратУПР.Видимость = Ложь;		
		ЭлементыФормы.НадписьСтатьяЗатратУПР.Видимость = Ложь;
		//Адиянов>>> Конец СтатьяЗатратУпр
		
	Иначе 
		ЭлементыФормы.Затраты.Видимость = Ложь;
		ЭлементыФормы.Подразделение.Видимость = Истина;
		ЭлементыФормы.СтатьяЗатрат.Видимость = Истина;
		ЭлементыФормы.НоменклатурнаяГруппа.Видимость = Истина;
		ЭлементыФормы.НадписьПодразделение.Видимость = Истина;
		ЭлементыФормы.НадписьСтатьяЗатрат.Видимость = Истина;	
		ЭлементыФормы.НадписьНоменклатурнаяГруппа.Видимость = Истина;
		ЭлементыФормы.КоманднаяПанель2.Видимость = Ложь;
		//Адиянов<<< Начало СтатьяЗатратУпр
		ЭлементыФормы.СтатьяЗатратУПР.Видимость = Истина;
		ЭлементыФормы.НадписьСтатьяЗатратУПР.Видимость = Истина;	
		//Адиянов>>> Конец СтатьяЗатратУпр
	КонецЕсли;
	
	Если (ОтражатьВЗатратах) Тогда
		ЭлементыФормы.Панель1.Страницы.Страница1.Видимость = Истина;
	Иначе 
		ЭлементыФормы.Панель1.Страницы.Страница1.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимость()

// Процедура переопределяет источники данных для реквизитов "СуммаДокумента" и "СуммаВзаиморасчетов".
// В режиме расчетов с контрагентами без разбиения они меняются местами.
//
Процедура УстановитьДанныеДляРеквизитов()
	
	Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) И Не Список тогда
		
		ЭлементыФормы.СуммаДокумента.Данные="ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.СуммаВзаиморасчетов";
		
		ЭлементыФормы.НадписьСуммаДокумент.Данные="НадписьСуммаВзаиморасчетов";
		ЭлементыФормы.НадписьВалютаДокумент.Данные="";
		ЭлементыФормы.НадписьВалютаДокумент.Заголовок="";
		ЭлементыФормы.НадписьВалютаВзаиморасчетов.Данные="НадписьВалютаДокумент";
				
		ИнвертироватьСуммы=Истина;
		
	Иначе
		
		ЭлементыФормы.СуммаДокумента.Данные="СуммаДокумента";
		ЭлементыФормы.НадписьВалютаДокумент.Данные="НадписьВалютаДокумент";

		ЭлементыФормы.НадписьСуммаДокумент.Данные="";
		ЭлементыФормы.НадписьСуммаДокумент.Заголовок="Сумма: ";
		
		ИнвертироватьСуммы=Ложь;
				
	КонецЕсли;
	
КонецПроцедуры // УстановитьДанныеДляРеквизитов()


// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют()

	КурсДокумента=?(КурсДокумента=0,1, КурсДокумента);
	КратностьДокумента=?(КратностьДокумента=0,1, КратностьДокумента);
	СтрокаПлатеж.КурсВзаиморасчетов=?(СтрокаПлатеж.КурсВзаиморасчетов=0,1,СтрокаПлатеж.КурсВзаиморасчетов);
	СтрокаПлатеж.КратностьВзаиморасчетов=?(СтрокаПлатеж.КратностьВзаиморасчетов=0,1,СтрокаПлатеж.КратностьВзаиморасчетов);

КонецПроцедуры // ПроверкаКурсовВалют()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	Если Контрагент.Пустая() Тогда
		Контрагент=СтрокаПлатеж.ДоговорКонтрагента.Владелец;
	КонецЕсли;

	// { Лапенков (договор документа каждый раз должен устанавливаться при выборе договора)
	Если РасшифровкаПлатежа.Количество()>0 Тогда
		Если не ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		ДоговорКонтрагента=СтрокаПлатеж.ДоговорКонтрагента;		
		КонецЕсли;
	КонецЕсли;
    //  }

	СтрокаПлатеж.ДокументПланированияПлатежа=Документы.ЗаявкаНаРасходованиеСредств.ПустаяСсылка();
	СтрокаПлатеж.Сделка=Неопределено;
	
	мТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;

	СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(мТекущаяВалютаВзаиморасчетов, ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты)));

	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	РассчитатьСуммуВзаиморасчетов();
	
	УстановитьВидимость();

КонецПроцедуры // ПриИзмененииДоговора()

Процедура ПриИзмененииКонтрагента()
			
		РасшифровкаПлатежа.Очистить();
		
		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
		
		Если ЗначениеНеЗаполнено(ДокументОбъект.Контрагент) Тогда 
			СтрокаПлатеж.ДоговорКонтрагента = Неопределено;
		ИначеЕсли НЕ ОпределитьВидДоговораСКонтрагентом(ВидОперации).НайтиПоЗначению(Контрагент.ОсновнойДоговорКонтрагента.ВидДоговора)=Неопределено Тогда
			Если Организация.Пустая() Тогда
				СтрокаПлатеж.ДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
				Организация=Контрагент.ОсновнойДоговорКонтрагента.Организация;
			ИначеЕсли Контрагент.ОсновнойДоговорКонтрагента.Организация.Пустая()
				ИЛИ Контрагент.ОсновнойДоговорКонтрагента.Организация=Организация Тогда
				СтрокаПлатеж.ДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
			КонецЕсли;
		КонецЕсли;
		
		ИННПолучателя = Контрагент.ИНН;
		КПППолучателя = Контрагент.КПП;
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
			
КонецПроцедуры // ПриИзмененииКонтрагента


// Процедура выполняет действия, необходимые при выборе счета организации
//
// Параметры:
//  Нет.
//
Процедура ПриИзмененииСчетаОрганизации()
	
	Если СчетОрганизации.Пустая() Тогда
		ТекстПлательщика = "";
		Возврат;
	КонецЕсли;
	
	Если Организация.Пустая() Тогда
		Организация=СчетОрганизации.Владелец;
	КонецЕсли;
	
	ПриИзмененииЗначенияКассыБанковскогоСчета(ВалютаДокумента, КурсДокумента, КратностьДокумента, ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты)), СуммаДокумента, СчетОрганизации.ВалютаДенежныхСредств);
	
	// Пересчитаем суммы платежей при изменении валюты
	
	Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) Тогда
		
		Для Каждого Строка Из РасшифровкаПлатежа Цикл
			
			ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			
			Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
				Строка.СуммаПлатежа=Строка.СуммаВзаиморасчетов;
				
			ИначеЕсли (КурсДокумента <> 0) И (Строка.КратностьВзаиморасчетов <> 0) И (Строка.КурсВзаиморасчетов <> 0) Тогда
				Строка.СуммаПлатежа=ПересчитатьИзВалютыВВалюту(Строка.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
				ВалютаДокумента,
				Строка.КурсВзаиморасчетов,КурсДокумента,
				Строка.КратностьВзаиморасчетов,КратностьДокумента);	
			Иначе
				Строка.СуммаПлатежа = 0;
			КонецЕсли;
					
			ПересчитатьСуммуНДС(Строка);
			
			Если НЕ ЗначениеНеЗаполнено(Строка.ДокументПланированияПлатежа) Тогда
				
				ВалютаПлатежаПлан=Строка.ДокументПланированияПлатежа.ВалютаДокумента;
				Если НЕ (ВалютаПлатежаПлан=Справочники.Валюты.ПустаяСсылка() ИЛИ ВалютаПлатежаПлан=ВалютаДокумента) Тогда
					Строка.ДокументПланированияПлатежа="";
					Строка.КурсВзаиморасчетовПлан=0;
					Строка.СуммаПлатежаПлан=0;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;	
		
		СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
		СформироватьНазначениеПлатежа();
		
	Иначе
		
		Если НЕ ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
			
			ВалютаПлатежаПлан=СтрокаПлатеж.ДокументПланированияПлатежа.ВалютаДокумента;
			Если НЕ (ВалютаПлатежаПлан=Справочники.Валюты.ПустаяСсылка() ИЛИ ВалютаПлатежаПлан=ВалютаДокумента) Тогда
				СтрокаПлатеж.ДокументПланированияПлатежа="";
				СтрокаПлатеж.КурсВзаиморасчетовПлан=0;
				СтрокаПлатеж.СуммаПлатежаПлан=0;
			КонецЕсли;
			
		КонецЕсли;
		
		СуммаДокументаПриИзменении();
		
	КонецЕсли;
	
	УстановитьФокус();
	УстановитьВидимость();	
	
	Если НЕ СчетКонтрагента.Пустая() И НЕ СчетОрганизации.ВалютаДенежныхСредств=СчетКонтрагента.ВалютаДенежныхСредств Тогда
		Сообщить("Валюта счета контрагента не соответствует валюте счета организации!");
		СчетКонтрагента="";
	КонецЕсли;	
	
	НадписьВалютаДокумент=СчетОрганизации.ВалютаДенежныхСредств.Наименование;
	
	Если НЕ СчетОрганизации.Пустая() Тогда
		ТекстПлательщика  = СчетОрганизации.ТекстКорреспондента;
	Иначе	
		ТекстПлательщика  = "";
	КонецЕсли;
		
КонецПроцедуры // ПриИзмененииСчетаОрганизации()

// Процедура рассчитывает сумму взаиморасчетов.
//
Процедура РассчитатьСуммуВзаиморасчетов()
	
	ПроверкаКурсовВалют();
			
	мТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			
	СтрокаПлатеж.СуммаВзаиморасчетов=ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, ВалютаДокумента,
									мТекущаяВалютаВзаиморасчетов,
									КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
									КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
									
	Если СтрокаПлатеж.КурсВзаиморасчетовПлан>0 Тогда
		РассчитатьСуммуПлатежаПлан();
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуВзаиморасчетов()

// Процедура рассчитывает сумму платежа по заявке.
//
Процедура РассчитатьСуммуПлатежаПлан()
	
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКурсовВалют();
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Иначе
		СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаВзаиморасчетов;
		Возврат;
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаВзаиморасчетов;
	
	ИначеЕсли (КурсДокумента <> 0) И (СтрокаПлатеж.КратностьВзаиморасчетов <> 0) И (СтрокаПлатеж.КурсВзаиморасчетовПлан <> 0) Тогда
		СтрокаПлатеж.СуммаПлатежаПлан=ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
															ВалютаДокумента,
			                                                СтрокаПлатеж.КурсВзаиморасчетовПлан,КурсДокумента,
															СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);	
	Иначе
		СтрокаПлатеж.СуммаПлатежаПлан = 0;
	КонецЕсли;

КонецПроцедуры // РассчитатьСуммуПлатежаПлан()

// Процедура рассчитывает сумму платежа по сумме взаиморасчетов.
//
Процедура РассчитатьСуммуПлатежа()
	
	ПроверкаКурсовВалют();
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Иначе
		СтрокаПлатеж.СуммаПлатежа=СтрокаПлатеж.СуммаВзаиморасчетов;
		Возврат;
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаПлатежа=СтрокаПлатеж.СуммаВзаиморасчетов;
	
	ИначеЕсли (КурсДокумента <> 0) И (СтрокаПлатеж.КратностьВзаиморасчетов <> 0) И (СтрокаПлатеж.КурсВзаиморасчетов <> 0) Тогда
		СтрокаПлатеж.СуммаПлатежа=ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
															ВалютаДокумента,
			                                                СтрокаПлатеж.КурсВзаиморасчетов,КурсДокумента,
															СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);	
	Иначе
		СтрокаПлатеж.СуммаПлатежа = 0;
	КонецЕсли;
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
	КонецЕсли;
	
	СформироватьНазначениеПлатежа();

КонецПроцедуры // РассчитатьСуммуПлатежа()

//Процедура рассчитывает курс взаиморасчетов по заявке
//
Процедура РассчитатьКурсВзаиморасчетовПлан()
	
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		Возврат;
	КонецЕсли;
	
	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетовПлан = СтрокаПлатеж.СуммаПлатежаПлан * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.СуммаВзаиморасчетов/ КратностьДокумента;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьКурсВзаиморасчетов

//Процедура рассчитывает курс взаиморасчетов документа
//
Процедура РассчитатьКурсВзаиморасчетов()
	
	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.СуммаВзаиморасчетов/ КратностьДокумента;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьКурсВзаиморасчетов
								


// Процедура выполняет действия, необходимые при выборе счета контрагента
//
// Параметры:
//  Нет.
//
Процедура ПриИзмененииСчетаКонтрагента()

	Если СчетКонтрагента.Пустая() Тогда
		ТекстПолучателя = "";
		Возврат;
	КонецЕсли;
		
	Если Контрагент.Пустая() Тогда
		Контрагент=СчетКонтрагента.Владелец;
		ПриИзмененииКонтрагента();
	КонецЕсли;
	
	Если НЕ СчетКонтрагента.Пустая() И НЕ СчетОрганизации.ВалютаДенежныхСредств=СчетКонтрагента.ВалютаДенежныхСредств и ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		Сообщить("Валюта счета контрагента не соответствует валюте счета организации!");
		СчетКонтрагента="";
		Возврат;
	КонецЕсли;	
	
	Если НЕ СчетКонтрагента.Пустая() Тогда
		ТекстПолучателя   = СчетКонтрагента.ТекстКорреспондента;
	Иначе	
		ТекстПолучателя   = "";
	КонецЕсли;	

	СформироватьНазначениеПлатежа();
	
	УстановитьВидимость();

КонецПроцедуры // ПриИзмененииСчетаКонтрагента()

Процедура НачальноеЗаполнениеПриВыбореКонтрагента()

	Если НЕ Контрагент.Пустая() Тогда
		
		ИННПолучателя = Контрагент.ИНН;
		КПППолучателя = Контрагент.КПП;
		
		Если НЕ СчетКонтрагента.Пустая() Тогда
			ТекстПолучателя   = СчетКонтрагента.ТекстКорреспондента;
		Иначе	
			ТекстПолучателя   = "";
		КонецЕсли;
		
	Иначе
		
		ИННПолучателя = "";
		КПППолучателя = "";
		СчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
		
	КонецЕсли;


КонецПроцедуры

// Процедура выполняет действия, необходимые при выборе организации
//
// Параметры:
//  Нет.
//
Процедура НачальноеЗаполнениеПриВыбореОрганизации()

	Если НЕ Организация.Пустая() Тогда

		ИННПлательщика  = Организация.ИНН; 
		КПППлательщика  = Организация.КПП; 
		
		Если НЕ СчетОрганизации.Пустая() Тогда
			ТекстПлательщика  = СчетОрганизации.ТекстКорреспондента;
		Иначе	
			ТекстПлательщика  = "";
		КонецЕсли;
	
	Иначе	
		
		ИННПлательщика  = Организация.ИНН; 
		КПППлательщика  = Организация.КПП; 
		СчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
		
	КонецЕсли;	

КонецПроцедуры	// НачальноеЗаполнениеПриВыбореОрганизации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	// Заполнить подменю выбора печатных форм.
	СписокМакетов = ЭтотОбъект.ПолучитьСписокПечатныхФорм();
	УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати,
	                                     СписокМакетов,
	                                     Новый Действие("ДействияФормыДействиеВыбратьПечатнуюФормы"));

	// Установить печатную форму по умолчанию.
	УстановитьКнопкуПечати(ЭтотОбъект.Метаданные().Имя, ЭтаФорма, СписокМакетов, мПечатнаяФормаПоУмолчанию);

	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
	КонецЕсли;

	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = РасшифровкаПлатежа[0];
	СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;

	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.

		ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета,РасшифровкаПлатежа);
		НачальноеЗаполнениеПриВыбореОрганизации();
		НачальноеЗаполнениеПриВыбореКонтрагента();
		УстановитьНомерДокумента(ЭтотОбъект);
		
		УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);

		Если ЗначениеНеЗаполнено(ВидПлатежа) Тогда	
			ВидПлатежа         = ЭлементыФормы.ВидПлатежа.СписокВыбора[2];
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(ОчередностьПлатежа) Тогда	
			ОчередностьПлатежа         = 5; //6; Изменено 2013.12.24
		КонецЕсли;
		
		СформироватьНазначениеПлатежа();

	Иначе

		УстановитьКурсДокумента();
		ЕстьРасчетыСКонтрагентами = ЕстьРасчетыСКонтрагентами(ВидОперации);
		ЕстьРасчетыПоКредитам     = ЕстьРасчетыПоКредитам(ВидОперации);

	КонецЕсли;

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
		
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
										ВидОперации.Метаданные().ЗначенияПеречисления, 
										Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	
	Если РасшифровкаПлатежа.Количество()>1 Тогда
		Список = Истина;
	Иначе
		Список = Ложь;
	КонецЕсли;

	Если ЧастичнаяОплата Тогда
		ЭлементыФормы.НадписьЧастичнаяОплата.Заголовок = СформироватьТекстЧастичнаяОплата(Ссылка,"ДенежныеСредстваКСписанию","ДокументСписания");
	КонецЕсли;

	//Установка меню Клиент-Банк
	УстановкаПодменюКлиентБанк(ЭлементыФормы.ДействияФормы.Кнопки.КлиентБанк.Кнопки, ЭтотОбъект);
	
	Если Оплачено Тогда
		ЭлементыФормы.ДатаОплаты.АвтоОтметкаНезаполненного=Истина;
	Иначе
		ЭлементыФормы.ДатаОплаты.АвтоОтметкаНезаполненного=Ложь;
		ЭлементыФормы.ДатаОплаты.ОтметкаНезаполненного=Ложь;
	КонецЕсли;
	
	Если Затраты.Количество()>0 Тогда 
		ЭлементыФормы.Списком2.Значение = Ложь;
	Иначе 
		ЭлементыФормы.Списком2.Значение = Истина;
	КонецЕсли;
	
	//Если (ЭтоНовый()) Тогда 
	//	ОтражатьВЗатратах = Истина;
	//КонецЕсли;
	УстановитьВидимость();
    Если ПроверенМенеджером и не яштАдминистративныеФункцииДоступны() и Константы.ОплатыРаспределяютМенеджеры.Получить() Тогда
		ЭлементыФормы.Список.Доступность=ЛОЖЬ;
		ЭлементыФормы.КоманднаяПанельПлатежи.Доступность=ЛОЖЬ;
      	ЭтаФорма.ТолькоПросмотр = Истина;
	КонецЕсли;	
    
	//БАЛАНС (04.12.2007)                       
	//
	мПроведениеИзФормы = Истина;
	
	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 

	
КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ПриЗаписи" формы.
//
Процедура ПриЗаписи(Отказ)
	
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
		
		Если Вопрос("Не совпадают сумма документа и ее расшифровка. Пересчитать сумму документа?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			
			СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
			СформироватьНазначениеПлатежа();
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НапечататьДокументПоУмолчанию(ЭтотОбъект, глТекущийПользователь, мПечатнаяФормаПоУмолчанию);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
//
Процедура ДействияФормыДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		
		Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
			
			Если Вопрос("Не совпадают сумма документа и ее расшифровка. Пересчитать сумму документа?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
				
				СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
				СформироватьНазначениеПлатежа();
				
			Иначе
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
				
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = Кнопка.Текст;
		СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		СписокМакетов = ПолучитьСписокПечатныхФорм();
		СтрокаМакетаВСписке = СписокМакетов.НайтиПоЗначению(Кнопка.Имя);
		Если СтрокаМакетаВСписке <> Неопределено Тогда
			Печать(СтрокаМакетаВСписке.Значение);
			СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
			СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;			
			
		Иначе
			СсылкаВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Кнопка.Имя, "_", "-")));
			Печать(СсылкаВнешнейФормы);
			СтруктураМакета.Макет = СсылкаВнешнейФормы;
			СтруктураМакета.ПредставлениеМакета = Кнопка.Текст;
		КонецЕсли;		
		
		мПечатнаяФормаПоУмолчанию = СтруктураМакета.Макет;
		СохранитьТекущуюКнопкуПечати(ЭтотОбъект.Метаданные().Имя, СтруктураМакета);
		
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при выборе пункта "Перечисление налога" командной панели
// панели формы. Процедура вызывает форму заполнения реквизитов для 
// перечисления налогов.
//
Процедура КоманднаяПанельПанелиДействиеПеречислениеНалога(Кнопка)
	ФормаПер = Документы.ПлатежноеПоручениеИсходящее.ПолучитьФорму("ПеречислениеНалога",ЭтаФорма);
	ФормаПер.Открыть();
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции

		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее[Кнопка.Имя] Тогда
			Возврат;
		КонецЕсли; 
		
		ВидОперации = Перечисления.ВидыОперацийППИсходящее[Кнопка.Имя];
		
		РасшифровкаПлатежа.Очистить();
		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
		УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);
		
		УстановитьФокус();
		СформироватьНазначениеПлатежа();
		
		ЕстьРасчетыСКонтрагентами=ЕстьРасчетыСКонтрагентами(ВидОперации);
		ЕстьРасчетыПоКредитам=ЕстьРасчетыПоКредитам(ВидОперации);
		
		// { Лапенков 20090325
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
			ЭлементыФормы.ОтражатьВЗатратах.Значение  = Истина;
		Иначе
			ЭлементыФормы.ОтражатьВЗатратах.Значение  = Ложь;
		КонецЕсли;	
		// }
		
		УстановитьВидимость();
		
	КонецЕсли;

	// Отобразить в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура заполняет реквизиты документа по созданному в режиме обработки "Клиент банк" контрагенту
//
Процедура ЗаполнитьРеквизитыПоКонтрагенту(НовыйКонтрагент,НовыйДоговор);
	
	Если Контрагент.Пустая() Тогда
		
		Контрагент            	=НовыйКонтрагент;
		СчетКонтрагента			=НовыйКонтрагент.ОсновнойБанковскийСчет;
		
		СтрокаПлатеж.ДоговорКонтрагента             =?(НовыйДоговор.Пустая(),НовыйКонтрагент.ОсновнойДоговорКонтрагента,НовыйДоговор);
		
		ВалютаВзаиморасчетов=СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		
		СтруктураКурсаВзаиморасчетов         = ПолучитьКурсВалюты(ВалютаВзаиморасчетов, КонецДня(ДатаОплаты));
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		
		
		СтрокаПлатеж.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,
		ВалютаДокумента, 
		ВалютаВзаиморасчетов,
		КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
		
		РеквизитыКонтрагента.Очистить();
		
		//Установка меню Клиент-Банк
		УстановкаПодменюКлиентБанк(ЭлементыФормы.ДействияФормы.Кнопки.КлиентБанк.Кнопки, ЭтотОбъект);
		
		ОтражатьВБухгалтерскомУчете =Истина;
		ОтраженоВОперУчете          =Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРеквизитыПоКонтрагенту()


//Процедура вызывается при выборе пункта подменю "Клиент-Банк" командной панели
//
Процедура ОсновныеДействияФормыКнопкиКонтрагента(Кнопка)
	
	Если РеквизитыКонтрагента.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Обработка =Обработки.КлиентБанк.Создать();
	Обработка.Организация =Организация;
	ТипКонтрагента=РеквизитыКонтрагента[0].ТипКонтрагента;
	
	Если Кнопка.Имя = "ПросмотрКонтрагента" Тогда
		
		СтрокаИНН=РеквизитыКонтрагента.Найти(РеквизитыКонтрагента[0].ТипКонтрагента+"ИНН","Реквизит");
		
		Если НЕ СтрокаИНН=Неопределено Тогда
			
			ИННКраткий=СтрокаИНН.Значение;
			НовыйКонтрагент =Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",ИННКраткий);
			
			Если НЕ НовыйКонтрагент.Пустая() Тогда
				
				НовыйДоговор =Обработка.СоздатьНужныйДоговор(НовыйКонтрагент, Организация, ТипКонтрагента="ПЛАТЕЛЬЩИК");
				ЗаполнитьРеквизитыПоКонтрагенту(НовыйКонтрагент,НовыйДоговор);
				ОткрытьЗначение(НовыйКонтрагент);
				
			Иначе
				
				Обработка.СписокНеНайденных(РеквизитыКонтрагента,,Истина);
				
				Если РеквизитыКонтрагента.Количество()>0 Тогда
					
					ФормаКонтрагентов =Обработка.ПолучитьФорму("ФормаКонтрагентов",ЭтаФорма);
					ФормаКонтрагентов.ОткрытьМодально();
					
					// Проверяем, не был ли создан контрагент в сеансе работы с обработкой
					НовыйКонтрагент =Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",ИННКраткий);
					
					Если НЕ НовыйКонтрагент.Пустая() Тогда
						
						НовыйДоговор =Обработка.СоздатьНужныйДоговор(НовыйКонтрагент, Организация, ТипКонтрагента="ПЛАТЕЛЬЩИК");
						ЗаполнитьРеквизитыПоКонтрагенту(НовыйКонтрагент,НовыйДоговор);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;		
		
	Иначе
		
		НовыйКонтрагент       =Обработка.СоздатьКонтрагента(,РеквизитыКонтрагента, Организация);
		
		Если НЕ НовыйКонтрагент.Пустая() Тогда
			
			НовыйДоговор =Обработка.СоздатьНужныйДоговор(НовыйКонтрагент, Организация, ТипКонтрагента="ПЛАТЕЛЬЩИК");
			ЗаполнитьРеквизитыПоКонтрагенту(НовыйКонтрагент,НовыйДоговор);
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	УстановитьКурсДокумента();
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры // ДатаПриИзменении()

// Рассчитывает новый курс документа при смене даты
//
Процедура УстановитьКурсДокумента()
	
	СтруктураКурсаВалютаДокумента = ПолучитьКурсВалюты(ВалютаДокумента, ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты)));
	КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
	КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;
	
КонецПроцедуры // УстановитьКурсДокумента()

// Обработчик события "ПриИзменении" реквизита "Организация"
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	НачальноеЗаполнениеПриВыбореОрганизации();
	
	Если НЕ ЗначениеНеЗаполнено(Организация) Тогда
		СчетОрганизации=Организация.ОсновнойБанковскийСчет;
	Иначе
		СчетОрганизации=Неопределено;
	КонецЕсли;
	
	ПриИзмененииСчетаОрганизации();
	УстановитьНомерДокумента(ЭтотОбъект);

КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события "ПриИзменении" реквизита "СчетКонтрагента"
//
Процедура СчетКонтрагентаПриИзменении(Элемент)

	ПриИзмененииСчетаКонтрагента();
	
КонецПроцедуры // СчетКонтрагентаПриИзменении()

// Обработчик события "ПриИзменении" реквизита "СчетОрганизации"
//
Процедура СчетОрганизацииПриИзменении(Элемент)

	ПриИзмененииСчетаОрганизации();
	
КонецПроцедуры // СчетОрганизацииПриИзменении()

// Обработчик события "ПриИзменении" реквизита "СуммаДокумента"
//
Процедура СуммаПлатежаПриИзменении(Элемент)
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	СформироватьНазначениеПлатежа();
	
	РассчитатьКурсВзаиморасчетов();

КонецПроцедуры // СуммаДокументаПриИзменении()

// Обработчик события "ПриИзменении" реквизита "ДоговорКонтрагента"
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Обработчик события "НачалоВыбора" реквизита "ДоговорКонтрагента"
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если Транзитный тогда
	    КонтрВыбор = КонтрагентТранзит;
	иначе
		КонтрВыбор = Контрагент;
	КонецЕсли;

	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, КонтрВыбор, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
				ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Обработчик события "ПриИзменении" реквизита "СтавкаНДС"
//
Процедура СтавкаНДСПриИзменении(Элемент)

	ПересчитатьСуммуНДС(СтрокаПлатеж);
	СформироватьНазначениеПлатежа();

КонецПроцедуры // СтавкаНДСПриИзменении()

// Обработчик события "ПриИзменении" реквизита "СуммаНДС"
//
Процедура СуммаНДСПриИзменении(Элемент)

	СформироватьНазначениеПлатежа();

КонецПроцедуры


// Обработчик события "НачалоВыбора" реквизита "СтатусСоставителя"
//
Процедура СтатусСоставителяНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокВыбора = ПолучитьСписокСтатусовОтправителя();
	
	ВыбранныйЭлемент = СписокВыбора.ВыбратьЭлемент("Выберите статус составителя",СписокВыбора);
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;	

	СтатусСоставителя = ВыбранныйЭлемент;
	
КонецПроцедуры // СтатусСоставителяНачалоВыбораИзСписка()

// Обработчик события "НачалоВыбораИзСписка" реквизита "ПоказательОснования"
//
Процедура ПоказательОснованияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокВыбора =ПолучитьСписокОснованийПлатежа(); 

	ВыбранныйЭлемент = СписокВыбора.ВыбратьЭлемент("Выберите показатель основания",СписокВыбора);
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;	

	ПоказательОснования = ВыбранныйЭлемент;
	
КонецПроцедуры // ПоказательОснованияНачалоВыбораИзСписка()

// Обработчик события "НачалоВыбораИзСписка" реквизита "ПоказательТипа"
//
Процедура ПоказательТипаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокВыбора =ПолучитьСписокПоказателейТипа(); 

	ВыбранныйЭлемент = СписокВыбора.ВыбратьЭлемент("Выберите показатель типа",СписокВыбора);
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;		

	ПоказательТипа = ВыбранныйЭлемент;
	
КонецПроцедуры // ПоказательТипаНачалоВыбораИзСписка()

// Обработчик события "НачалоВыбора" реквизита "ПоказательПериода"
//
Процедура ПоказательПериодаНачалоВыбора(Элемент, СтандартнаяОбработка)

	ФормаПер = Документы.ПлатежноеПоручениеИсходящее.ПолучитьФорму("ФормаПериода",ЭтаФорма);
	ФормаПер.Открыть();

КонецПроцедуры // ПоказательПериодаНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "КурсВзаиморасчетов".
//
Процедура КурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;

	РассчитатьСуммуПлатежа();

КонецПроцедуры // КурсВзаиморасчетовНачалоВыбора()

Процедура СуммаДокументаРасчетыПриИзменении(Элемент)

	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
	Если СтрокаПлатеж.СуммаВзаиморасчетов=0 Тогда
		РассчитатьСуммуВзаиморасчетов();
	Иначе			
		РассчитатьКурсВзаиморасчетов();
	КонецЕсли;
	
	СформироватьНазначениеПлатежа();
			
КонецПроцедуры

Процедура КурсВзаиморасчетовПриИзменении(Элемент)

	РассчитатьСуммуПлатежа();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Контрагент".
//
Процедура КонтрагентПриИзменении(Элемент)
	Если не Транзитный Тогда
		
		// проставим основной договор контрагента
		ПриИзмененииКонтрагента();
	КонецЕсли;
	
	Если НЕ ЗначениеНеЗаполнено(Контрагент) Тогда
		СчетКонтрагента=Контрагент.ОсновнойБанковскийСчет;
	Иначе
		СчетКонтрагента=Неопределено;
	КонецЕсли;
	
	Если не Транзитный Тогда	
		ПриИзмененииСчетаКонтрагента();
		
		ПриИзмененииДоговора();
		УстановитьФокус();
	КонецЕсли;	

КонецПроцедуры

Процедура ОбновлениеОтображения()

	Если СтрокаПлатеж <> Неопределено Тогда
	
		ЭлементыФормы.ИнфНадписьКурса.Заголовок = ПолучитьИнформациюКурсаВалютыСтрокой(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
		                                                                                 СтрокаПлатеж.КурсВзаиморасчетов,
		                                                                                 СтрокаПлатеж.КратностьВзаиморасчетов,
		                                                                                 мВалютаРегламентированногоУчета,
		                                                                                 Истина);
																						 
		НадписьВалютаДокумент=СчетОрганизации.ВалютаДенежныхСредств.Наименование;
		
		// Надпись НадписьСуммаВзаиморасчетов
		ВалютаВзаиморасчетовПоДоговору = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		Если ЗначениеНеЗаполнено(ВалютаВзаиморасчетовПоДоговору) Тогда
			НадписьСуммаВзаиморасчетов = "Сумма <нет валюты>:";
		Иначе
			НадписьСуммаВзаиморасчетов = "Сумма " + СокрЛП(ВалютаВзаиморасчетовПоДоговору) + ":";
		КонецЕсли;
		
		ЭлементыФормы.НадписьИтогоСписок.Заголовок="Итого платежей по списку: "+
										Формат(РасшифровкаПлатежа.Итог("СуммаПлатежа"),"ЧЦ=15; ЧДЦ=2; ЧН=Ноль")+
										" "+СокрЛП(ВалютаДокумента.Наименование);
										
			Если Не ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
				
				Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
					ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				КонецЕсли;

			
			ТекстКурсаЗаявки= ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаВзаиморасчетов, 
							 СтрокаПлатеж.КурсВзаиморасчетовПлан,
							 СтрокаПлатеж.КратностьВзаиморасчетов,
							 мВалютаРегламентированногоУчета,
							 Истина);
							 
		ЭлементыФормы.ИнфНадписьКурсаЗаявки.Заголовок=ТекстКурсаЗаявки;
																						 
		КонецЕсли;
	
	КонецЕсли; 
	
		//ЭлементыФормы.Подразделение.Доступность=ОтражатьВЗатратах;
	    //ЭлементыФормы.СтатьяЗатрат.Доступность=ОтражатьВЗатратах;
		
	СформироватьИтогПоЗатратам();
	
КонецПроцедуры

Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ОтражатьВНалоговомУчете=ОтражатьВБухгалтерскомУчете;
	УстановитьВидимость();

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
		
	Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
		
		Если Вопрос("Не совпадают сумма документа и ее расшифровка. Пересчитать сумму документа?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			
			СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
			СформироватьНазначениеПлатежа();
			
		Иначе
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если Ответственный.Пустая() Тогда
		Ответственный     = глТекущийПользователь;
	КонецЕсли;
	// Лапенков (договор документа должен устанавливаться при выборе договора)
	Если ЗначениеНеЗаполнено(ДоговорКонтрагента) и РасшифровкаПлатежа.Количество()>0 Тогда
		ДоговорКонтрагента=СтрокаПлатеж.ДоговорКонтрагента;		 
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		 
		//ДоговорКонтрагента=СтрокаПлатеж.ДоговорКонтрагента;
		
		Если СтрокаПлатеж.СтатьяДвиженияДенежныхСредств.Пустая() Тогда
			СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		
		ЗаявкаНаРасходованиеСредств=СтрокаПлатеж.ДокументПланированияПлатежа;
		
	Иначе
		
		//ДоговорКонтрагента=Новый(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
		ЗаявкаНаРасходованиеСредств=Документы.ЗаявкаНаРасходованиеСредств.ПустаяСсылка();
		
	КонецЕсли;
	
	  Если не отказ и ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику Тогда
    	Для каждого стр из Расшифровкаплатежа Цикл
    		Если ЗначениеЗаполнено(стр.Сделка) и ТипЗнч(стр.Сделка)=Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				МаксПредоплата = яштПоставщики.РассчитатьСуммуМаксимальнойОплаты(Стр.Сделка,МоментВремени());
				Если стр.СуммаВзаиморасчетов > МаксПредоплата Тогда
					Ответ=вопрос("По сделке "+стр.Сделка+" максимально допустимая сумма платежа "+МаксПредоплата+". Изменить на максимальную сумму?",РежимДиалогаВопрос.ДаНет,0);
					Если Ответ = КодВозвратаДиалога.Да Тогда
					стр.СуммаВзаиморасчетов =МаксПредоплата;
					стр.СуммаПлатежа = стр.СуммаВзаиморасчетов*стр.КурсВзаиморасчетов; 
					СуммаДокумента = Расшифровкаплатежа.Итог("СуммаПлатежа");
				    иначе
					стр.СуммаВзаиморасчетов =0;
					стр.СуммаПлатежа =0; 
					СуммаДокумента = Расшифровкаплатежа.Итог("СуммаПлатежа");
					конецЕсли;
				конецЕсли;	
			конецЕсли;	
   	 конецЦикла;
   конецЕсли;	

	
	
	
	яштСменаПользователя(ЭтотОбъект, ЭтаФорма, глТекущийПользователь);
	
КонецПроцедуры

Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	//Смирнов
	// Заполним возможный список типов документов, которые могут быть расчетными.
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить( "Стандартно", "Стандартно");
	СписокТипов.Добавить( Метаданные.Документы["ЗаказПоПрессФормам"].Имя,        Метаданные.Документы["ЗаказПоПрессФормам"].Представление());
	
	// Пользователь выбирает тип расчетного документа
	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокТипов, Элемент);
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат; // пользователь отказался от выбора
	КонецЕсли;
	
	ТипДокументаСделки = ВыбранныйЭлемент.Значение;
	
	Если ТипДокументаСделки="Стандартно" тогда
		ПараметрыВыбора=ОпределитьПараметрыВыбораСделки(ВидОперации);
	иначе
		//Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику
		ПараметрыВыбора=Новый Структура("ВидДвиженияРасчеты,ТипЗаказа","Расход","ЗаказПоПрессФормам");
	КонецЕсли;
	
	Если Транзитный тогда
	    ДоговорВыбор = КонтрагентТранзит.ОсновнойДоговорКонтрагента;
	иначе
		ДоговорВыбор = СтрокаПлатеж.ДоговорКонтрагента;
	КонецЕсли;
	
	НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорВыбор, СтрокаПлатеж.Сделка, СтандартнаяОбработка, 
	ПараметрыВыбора.ВидДвиженияРасчеты, ПараметрыВыбора.ТипЗаказа);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПриАктивизацииСтроки(Элемент)
	
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
				ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);

КонецПроцедуры

Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПараметрыВыбора=ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, 
	                     ПараметрыВыбора.ВидДвиженияРасчеты, ПараметрыВыбора.ТипЗаказа);
					
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговора();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
	РассчитатьКурсВзаиморасчетов();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;

	РассчитатьСуммуПлатежа();

	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
	Если СтрокаПлатеж.КурсВзаиморасчетовПлан>0 Тогда
		РассчитатьСуммуПлатежаПлан();
	КонецЕсли;					
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

Процедура СуммаДокументаПриИзменении()
	
	Если ИнвертироватьСуммы Тогда
		
		РассчитатьСуммуПлатежа();
		
		Если СтрокаПлатеж.КурсВзаиморасчетовПлан>0 Тогда
			РассчитатьСуммуПлатежаПлан();
		КонецЕсли;
		
	Иначе	
		
		Если РасшифровкаПлатежа.Количество()=1 Тогда
			
			СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
			
			Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
				
				ПересчитатьСуммуНДС(СтрокаПлатеж);
				
				Если СтрокаПлатеж.СуммаВзаиморасчетов=0 Тогда
					РассчитатьСуммуВзаиморасчетов();
				Иначе			
					РассчитатьКурсВзаиморасчетов();
				КонецЕсли;
				
			Иначе
				
				Если Не ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
					
					СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаПлатежа;
					СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СформироватьНазначениеПлатежа();
			
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры

Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПослеУдаления(Элемент)
	
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		Отказ=Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура НадписьЧастичнаяОплатаНажатие(Элемент)
	
	ФормаДокументОплаты=Документы.ПлатежныйОрдерСписаниеДенежныхСредств.ПолучитьФормуСписка();
	
	ФормаДокументОплаты.Отбор.РасчетныйДокумент.Значение=Ссылка;
	ФормаДокументОплаты.Отбор.РасчетныйДокумент.Использование=Истина;
	
	ФормаДокументОплаты.ЭлементыФормы.ДокументСписок.НастройкаОтбора.РасчетныйДокумент.Доступность=Ложь;
	
	ФормаДокументОплаты.Открыть();
	
КонецПроцедуры

// Заполняет ИНН плательщика при нажатии на кнопку
//
Процедура ЗаполнитьИННПлательщикаНажатие(Элемент)

	Если НЕ Организация.Пустая() Тогда
		ИННПлательщика  = Организация.ИНН;
	КонецЕсли;

КонецПроцедуры

// Заполняет КПП плательщика при нажатии на кнопку
//
Процедура ЗаполнитьКПППлательщикаНажатие(Элемент)

	Если НЕ Организация.Пустая() Тогда
			КПППлательщика = Организация.КПП;
	КонецЕсли;

КонецПроцедуры

// Заполняет ИНН получателя при нажатии на кнопку
//
Процедура ЗаполнитьИННПолучателяНажатие(Элемент)

	Если НЕ Контрагент.Пустая() Тогда
		ИННПолучателя = Контрагент.ИНН;
	КонецЕсли;

КонецПроцедуры

// Заполняет КПП получателя при нажатии на кнопку
//
Процедура ЗаполнитьКПППолучателяНажатие(Элемент)

	Если НЕ Контрагент.Пустая() Тогда
		КПППолучателя = Контрагент.КПП;
	КонецЕсли;

КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаНДСПриИзменении(Элемент)
	
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

Процедура УстановитьЗначениеПриВыборе(ИсходноеЗначение,ЗначениеВыбора)
	
	Если ЗначениеНеЗаполнено(ИсходноеЗначение) Тогда
		ИсходноеЗначение=ЗначениеВыбора;
	КонецЕсли;
		
КонецПроцедуры // УстановитьЗначениеПриВыборе() 

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если НЕ ТипЗнч(ЗначениеВыбора)=Тип("Структура") Тогда
		
		Если ЗначениеВыбора="АвтоПодбор" Тогда
			
			Если РасшифровкаПлатежа.Количество()>1 Тогда
				Список=истина;
			ИначеЕсли РасшифровкаПлатежа.Количество()=0 Тогда
				Список=Ложь;
				НоваяСтрока=РасшифровкаПлатежа.Добавить();			
			КонецЕсли;
			
			СтрокаПлатеж=РасшифровкаПлатежа[0];
						
			УстановитьФокус();
			
			УстановитьВидимость();

			СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
			
			Возврат;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
			
	ИначеЕсли Источник.КлючУникальности="ФормаПодбораПланируемыхПлатежей" Тогда
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда	
				
				НДСПоУмолчанию=ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяСтавкаНДС");
				
				СтрокаПлатеж.ДоговорКонтрагента=ЗначениеВыбора.ДоговорКонтрагента;
				ПриИзмененииДоговора();
				
			КонецЕсли;
			
			СтрокаПлатеж.КурсВзаиморасчетовПлан=ЗначениеВыбора.КурсВзаиморасчетов;
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.Сделка,ЗначениеВыбора.Сделка);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.КурсВзаиморасчетов,ЗначениеВыбора.КурсВзаиморасчетов);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.КратностьВзаиморасчетов,ЗначениеВыбора.КратностьВзаиморасчетов);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СуммаВзаиморасчетов,ЗначениеВыбора.СуммаВзаиморасчетов);
			
			Если СтрокаПлатеж.СуммаПлатежа=ЗначениеВыбора.СуммаПлатежа 
				ИЛИ СтрокаПлатеж.СуммаПлатежа=0 Тогда
				
				СтрокаПлатеж.СуммаПлатежа=ЗначениеВыбора.СуммаПлатежа;
				СтрокаПлатеж.СуммаПлатежаПлан=ЗначениеВыбора.СуммаПлатежаПлан;
				
			ИначеЕсли СтрокаПлатеж.КурсВзаиморасчетовПлан>0 Тогда
				
				РассчитатьСуммуПлатежаПлан();
				
			КонецЕсли;
										
			ЗаполнитьРеквизитыРеглУчета(СтрокаПлатеж,Организация, Контрагент, НДСПоУмолчанию);
		
			СтрокаПлатеж.ДокументПланированияПлатежа=ЗначениеВыбора.ДокументПланирования;
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СтатьяДвиженияДенежныхСредств,ЗначениеВыбора.СтатьяДвиженияДенежныхСредств);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.Проект,ЗначениеВыбора.Проект);
			
		Иначе
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СуммаПлатежа,ЗначениеВыбора.СуммаПлатежа);
			
			СтрокаПлатеж.ДокументПланированияПлатежа=ЗначениеВыбора.ДокументПланирования;	
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СтатьяДвиженияДенежныхСредств,ЗначениеВыбора.СтатьяДвиженияДенежныхСредств);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.Проект,ЗначениеВыбора.Проект);
			
			СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаПлатежа;
			СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
					
		КонецЕсли;
						
	Иначе
		
		НДСПоУмолчанию=?(ЗначениеНеЗаполнено(СтрокаПлатеж.СтавкаНДС),ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяСтавкаНДС"),
						СтрокаПлатеж.СтавкаНДС);
		
		ОбработкаПодбораЗадолженностей(СтрокаПлатеж,РасшифровкаПлатежа,ЗначениеВыбора,
		Список,ВалютаДокумента,КурсДокумента,КратностьДокумента,
		Организация, Контрагент, НДСПоУмолчанию,ОтражатьВБухгалтерскомУчете);
		
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
	КонецЕсли;
	
	СформироватьНазначениеПлатежа();
	
	УстановитьФокус();
	
	УстановитьВидимость();
				
КонецПроцедуры

Процедура КнопкаПодборНажатие(Элемент)
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"					,ЭтаФорма);
	СтруктураПараметров.Вставить("Организация"						,Организация);
	СтруктураПараметров.Вставить("Контрагент"						,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"					,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"					,СуммаДокумента);
	СтруктураПараметров.Вставить("РасшифровкаПлатежаДок"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ДатаДок"							,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"					,ВидОперации);
	СтруктураПараметров.Вставить("КурсДокумента"					,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"				,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"					,"<0");
    СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"				,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"		,Истина);
	СтруктураПараметров.Вставить("ФормаОплаты"						,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"					,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("ВидОперацииПлан"					,ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"				,СчетОрганизации);
	СтруктураПараметров.Вставить("Проект"							,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств"	,СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,ОтражатьВБухгалтерскомУчете);
	
	ПодборЗадолженностей(СтруктураПараметров);
	
КонецПроцедуры

Процедура КоманднаяПанельПлатежиПодбор(Кнопка)
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"					,ЭтаФорма);
	СтруктураПараметров.Вставить("Организация"						,Организация);
	СтруктураПараметров.Вставить("Контрагент"						,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"					,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"					,СуммаДокумента);
	СтруктураПараметров.Вставить("РасшифровкаПлатежаДок"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ДатаДок"							,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"					,ВидОперации);
	СтруктураПараметров.Вставить("КурсДокумента"					,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"				,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"					,"<0");
    СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"				,Ложь);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"		,Истина);
	СтруктураПараметров.Вставить("ФормаОплаты"						,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"					,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("ВидОперацииПлан"					,ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"				,СчетОрганизации);
	СтруктураПараметров.Вставить("Проект"							,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств"	,СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,ОтражатьВБухгалтерскомУчете);
	
	ПодборЗадолженностей(СтруктураПараметров);
	
КонецПроцедуры

Процедура КоманднаяПанельПлатежиЗаполнить(Кнопка)
	
	// Заполнение осуществляется по платежному  календарю
	Если Константы.ОплатыРаспределяютМенеджеры.Получить() Тогда
		ВыделенныйДоговор=ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока.ДоговорКонтрагента;
		
		//+++ 16.07.2014 - разнесение платежей идет по сумме Взаиморасчетов!
		//
		//СуммаОплатыПоДоговору  = ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока.СуммаПлатежа;
		СуммаОплатыПоДоговору    = ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока.СуммаВзаиморасчетов;
		КурсПлатежа = ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока.СуммаПлатежа / ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока.СуммаВзаиморасчетов;
		ПроцентНДС  = ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока.СуммаНДС / ?(ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока.СуммаПлатежа=0,1,ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока.СуммаПлатежа);
		
		ЭтотОбъект.КурсДокумента = ?(ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока.КурсВзаиморасчетов=0,1,ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока.КурсВзаиморасчетов);
		
		Если не ЗначениеНеЗаполнено(ВыделенныйДоговор) Тогда
			Режим = РежимДиалогаВопрос.ДаНет;
			Ответ = Вопрос("Подобрать заказы по договору' "+Строка(ВыделенныйДоговор)+"' отв. лицо '"+Строка(ВыделенныйДоговор.ОтветственноеЛицо)+" на сумму "+Строка(СуммаОплатыПоДоговору)+" ?", Режим, 0);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
		
			
			ЗаполнитьРасшифровкуПлатежаДолгамиПоДоговору(ВыделенныйДоговор, СуммаОплатыПоДоговору, КурсПлатежа, ПроцентНДС);
			ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
        	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;

		Иначе
			Предупреждение("Заполнение не произведено, поскольку не указан договор. Выделите тот договор, по которому хотите распределить ден. средства по заказам");
		КонецЕсли;	
	
		Возврат;	
	КонецЕсли;	
	
	
	СтруктураПараметров=Новый Структура;
	
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СуммаДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"				,ВидОперации);
	СтруктураПараметров.Вставить("РасшифровкаПлатежа"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"				,"<0");
	СтруктураПараметров.Вставить("Интерактивно"					,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Истина);
	СтруктураПараметров.Вставить("СтруктураПараметровАвто"		,Новый Структура);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ВидОперацииПлан"				,ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("ИмяРегистраПлан"				,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,СчетОрганизации);
	СтруктураПараметров.Вставить("ДоговорКонтрагента"			,ДоговорКонтрагента);
	
	ЗаполнитьРасшифровкуПлатежей(СтруктураПараметров);
	
	Если РасшифровкаПлатежа.Количество()=0 Тогда
		НоваяСтрока=РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	СформироватьНазначениеПлатежа();
	
	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
КонецПроцедуры

Процедура КоманднаяПанельПлатежиЗаполнитьПоНомеруАккредитива(Кнопка)
	
	Если РасшифровкаПлатежа.Количество() > 1 Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Текст = "Расшифровка платежа непустая. Перед заполнением данные будут очищены. Продолжить?";
		Ответ = Вопрос(Текст, Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НадоДозаполнить = СуммаДокумента;
	
	//заполним сделками с таким же номером аккредитива
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерАккредитива", "%"+НомерАккредитива+"%");
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПоставщику.НомерАккредитива КАК НомерАккредитива,
	               |	ЗаказПоставщику.Ссылка,
	               |	ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток, 0) КАК СуммаВзОстаток,
	               |	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток
	               |ИЗ
	               |	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&Период) КАК ВзаиморасчетыСКонтрагентамиОстатки
	               |		ПО (ВзаиморасчетыСКонтрагентамиОстатки.Сделка = ЗаказПоставщику.Ссылка)
	               |ГДЕ
	               |	ЗаказПоставщику.НомерАккредитива ПОДОБНО &НомерАккредитива
	               |	И ЗаказПоставщику.Проведен
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЗаказПоставщику.Дата
	               |АВТОУПОРЯДОЧИВАНИЕ";
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		Если НЕ Результат.СуммаВзОстаток = 0 Тогда
			Если НадоДозаполнить > 0 Тогда
				СтрокаРасш = РасшифровкаПлатежа.Добавить();
				СтрокаРасш.ДоговорКонтрагента = Результат.Ссылка.ДоговорКонтрагента;
				СтрокаРасш.Сделка = Результат.Ссылка;
				СтрокаРасш.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
				СтрокаРасш.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщику;
				Если Результат.СуммаВзОстаток *(-1) > НадоДозаполнить Тогда
					СтрокаРасш.СуммаПлатежа = НадоДозаполнить;
					СтрокаРасш.СуммаВзаиморасчетов = НадоДозаполнить;
					НадоДозаполнить = 0;
				Иначе
					СтрокаРасш.СуммаПлатежа = Результат.СуммаВзОстаток *(-1);
					СтрокаРасш.СуммаВзаиморасчетов = Результат.СуммаВзОстаток *(-1);
					НадоДозаполнить = НадоДозаполнить - Результат.СуммаВзОстаток *(-1);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если НадоДозаполнить > 0 Тогда
		СтрокаРасш = РасшифровкаПлатежа.Добавить();
		СтрокаРасш.ДоговорКонтрагента = Результат.Ссылка.ДоговорКонтрагента;
		СтрокаРасш.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		СтрокаРасш.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщику;
		СтрокаРасш.СуммаПлатежа = НадоДозаполнить;
		СтрокаРасш.СуммаВзаиморасчетов = НадоДозаполнить;
	КонецЕсли;
	РасшифровкаПлатежа.Удалить(0);
	СтрокаПлатеж = РасшифровкаПлатежа[0]; 
	
	//и сразу курс заполним
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", СчетОрганизации);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ДенежныеСредстваОстатки.СуммаОстаток = 0
	               |			ТОГДА 1
	               |		ИНАЧЕ ДенежныеСредстваОстатки.СуммаУпрОстаток / ДенежныеСредстваОстатки.СуммаОстаток
	               |	КОНЕЦ КАК Курс,
	               |	ДенежныеСредстваОстатки.СуммаУпрОстаток КАК ОстатокРуб,
	               |	ДенежныеСредстваОстатки.СуммаОстаток КАК ОстатокВал
	               |ИЗ
	               |	РегистрНакопления.ДенежныеСредства.Остатки(&Период, БанковскийСчетКасса = &Счет) КАК ДенежныеСредстваОстатки";
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		КурсВзаиморасчетов = Результат.Курс;
		Сообщить("Остаток в валюте: " + Строка(Результат.ОстатокВал));
		Сообщить("Остаток в рублях: " + Строка(Результат.ОстатокРуб));
	Иначе
		КурсВзаиморасчетов = 1;
	КонецЕсли;
	
	Для каждого СтрРасшифровкаПлатежа ИЗ РасшифровкаПлатежа Цикл
		СтрРасшифровкаПлатежа.КурсВзаиморасчетов = КурсВзаиморасчетов;
	КонецЦикла;
			
КонецПроцедуры


Процедура СписокПриИзменении(Элемент)
	
	Если Не Список И РасшифровкаПлатежа.Количество()>1 Тогда
		
		ТекстВопроса = "Все строки расшифровки платежа, кроме первой, будут удалены.
		|Продолжить?";
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Список=Истина;
			Возврат;
		КонецЕсли;
		
		Пока РасшифровкаПлатежа.Количество()>1 Цикл
			СтрокаУдаления=РасшифровкаПлатежа[1];
			РасшифровкаПлатежа.Удалить(СтрокаУдаления);
		КонецЦикла;
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
		СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
		РассчитатьСуммуПлатежа();
		
	Иначе
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
		СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
	КонецЕсли;		
		
	СформироватьНазначениеПлатежа();
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ДокументПланированияПлатежаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
    Если ЗначениеНеЗаполнено(Контрагент) Тогда
		Сообщить("Не указан контрагент.");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеНеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация.");
		Возврат;
	КонецЕсли;

	
	ФормаВыбора = Документы.ЗаявкаНаРасходованиеСредств.ПолучитьФормуВыбора(,Элемент,);

	// Отфильруем список документов по договору.
	ФормаВыбора.Отбор.ДокументыПоКонтрагенту.Значение      = Контрагент;
	ФормаВыбора.Отбор.ДокументыПоКонтрагенту.Использование = Истина;

	ФормаВыбора.Отбор.ПериодПланирования.ВидСравнения =ВидСравнения.Равно;
	ФормаВыбора.Отбор.ПериодПланирования.Значение= НачалоМесяца(?(ЗначениеНеЗаполнено(ДатаОплаты),Дата,ДатаОплаты));
	ФормаВыбора.Отбор.ПериодПланирования.Использование = Истина;
	
	ФормаВыбора.Отбор.Состояние.ВидСравнения =ВидСравнения.Равно;
	ФормаВыбора.Отбор.Состояние.Значение= Перечисления.СостоянияОбъектов.Утвержден;
	ФормаВыбора.Отбор.Состояние.Использование = Истина;

	ФормаВыбора.Открыть();

	
	//СтруктураПараметров=Новый Структура;
	//СтруктураПараметров.Вставить("ФормаДокумента"				,ЭтаФорма);
	//СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Безналичные);
	//СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	//СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	//СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	//СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	//СтруктураПараметров.Вставить("ИмяРегистра"					,"ЗаявкиНаРасходованиеСредств");
	//СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			,Истина);
	//СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Истина);
	//СтруктураПараметров.Вставить("СуммаДокумента"				,СтрокаПлатеж.СуммаПлатежа);
	//СтруктураПараметров.Вставить("ВидОперации"					,ОпределитьВидОперацииПлан(ВидОперации));
	//СтруктураПараметров.Вставить("БанковскийСчетКасса"			,СчетОрганизации);
	//СтруктураПараметров.Вставить("Организация"					,Организация);
	//СтруктураПараметров.Вставить("Проект"						,СтрокаПлатеж.Проект);
	//СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств",СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
	//СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
	//СтруктураПараметров.Вставить("ДоговорКонтрагента"			,СтрокаПлатеж.ДоговорКонтрагента);
	//СтруктураПараметров.Вставить("Сделка"						,СтрокаПлатеж.Сделка);
	//
	//ПодборДокументовПланирования(СтруктураПараметров);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДокументПланированияПлатежаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если ЗначениеНеЗаполнено(Контрагент) Тогда
		Сообщить("Не указан контрагент.");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеНеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"				,ЭтаФорма);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ИмяРегистра"					,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Истина);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СтрокаПлатеж.СуммаПлатежа);
    СтруктураПараметров.Вставить("ВидОперации"					,ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,СчетОрганизации);
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Проект"						,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств",СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
    СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
    СтруктураПараметров.Вставить("ДоговорКонтрагента"			,СтрокаПлатеж.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Сделка"						,СтрокаПлатеж.Сделка);
	
	ПодборДокументовПланирования(СтруктураПараметров);
			
КонецПроцедуры

Процедура ДокументПланированияПлатежаПрочиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если ЗначениеНеЗаполнено(Контрагент) Тогда
		Сообщить("Не указан контрагент.");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеНеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	//*** 2016.03.25 заремлено 
	//СтруктураПараметров=Новый Структура;
	//СтруктураПараметров.Вставить("ФормаДокумента"				,ЭтаФорма);
	//СтруктураПараметров.Вставить("ФормаОплаты"				,Перечисления.ВидыДенежныхСредств.Безналичные);
	//СтруктураПараметров.Вставить("ВалютаДокумента"			,ВалютаДокумента);
	//СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	//СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	//СтруктураПараметров.Вставить("ДатаДок"					,Дата);
	//СтруктураПараметров.Вставить("ИмяРегистраПлан"			,"ЗаявкиНаРасходованиеСредств");
	//СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			,Истина);
	//СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов",Истина);
	//СтруктураПараметров.Вставить("СуммаДокумента"				,СтрокаПлатеж.СуммаПлатежа);
	//СтруктураПараметров.Вставить("ВидОперации"				,ОпределитьВидОперацииПлан(ВидОперации));
	//СтруктураПараметров.Вставить("БанковскийСчетКасса"		,СчетОрганизации);
	//СтруктураПараметров.Вставить("Организация"				,Организация);
	//СтруктураПараметров.Вставить("Проект"						,СтрокаПлатеж.Проект);
	//СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств",СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
	//СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
	//СтруктураПараметров.Вставить("ДоговорКонтрагента"			,Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	//СтруктураПараметров.Вставить("Сделка"						,Неопределено);
	
	//ПодборДокументовПланирования(СтруктураПараметров);
	
	ОбработкаОбъект = Обработки.ПодборПараметровРасшифровкиПлатежа.Создать();
	
	ОбработкаОбъект.ФормаОплаты 					= Перечисления.ВидыДенежныхСредств.Безналичные;
	ОбработкаОбъект.ВалютаДокумента 				= ВалютаДокумента;
	ОбработкаОбъект.КурсДокумента					= КурсДокумента;
	ОбработкаОбъект.КратностьДокумента				= КратностьДокумента;
	ОбработкаОбъект.ИмяРегистраПлан					= "ЗаявкиНаРасходованиеСредств";
	ОбработкаОбъект.ВидОперацииПлан 				= ОпределитьВидОперацииПлан(ВидОперации);
	ОбработкаОбъект.Организация 					= Организация;
	ОбработкаОбъект.Проект 							= СтрокаПлатеж.Проект;
	ОбработкаОбъект.СтатьяДвиженияДенежныхСредств 	= СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
	ОбработкаОбъект.Контрагент						= Контрагент;
	ОбработкаОбъект.ДоговорКонтрагента				= Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	ОбработкаОбъект.ПлатежПоСуммеВзаиморасчетов		= Истина;
	
	ФормаПодбора = ОбработкаОбъект.ПолучитьФорму("ФормаПодбораПланируемыхДвижений", ЭтаФорма, "ФормаПодбораПланируемыхПлатежей");
	
	ФормаПодбора.РежимВыбора=Истина;
	ФормаПодбора.ЗакрыватьПриВыборе = Истина;
	
	ФормаПодбора.Открыть();
										
КонецПроцедуры

Процедура СуммаПлатежаПланПриИзменении(Элемент)
	
	РассчитатьКурсВзаиморасчетовПлан();
	
КонецПроцедуры

Процедура КурсВзаиморасчетовПланПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

Процедура КурсВзаиморасчетовПланНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетовПлан;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты));

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетовПлан = СтруктураКурсаИКратности.КурсВалюты;

	КонецЕсли;
					   
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПланПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаПланПриИзменении(Элемент)
	
	РассчитатьКурсВзаиморасчетовПлан();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПланНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетовПлан;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты));

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетовПлан = СтруктураКурсаИКратности.КурсВалюты;

	КонецЕсли;
					   
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

Процедура ОплаченоПриИзменении(Элемент)
	
	Если Оплачено Тогда
		ЭлементыФормы.ДатаОплаты.АвтоОтметкаНезаполненного=Истина;
	Иначе
		ЭлементыФормы.ДатаОплаты.АвтоОтметкаНезаполненного=Ложь;
		ЭлементыФормы.ДатаОплаты.ОтметкаНезаполненного=Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

Процедура ДокументПланированияПлатежаПриИзменении(Элемент)
	
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		Возврат;
	//	СтрокаПлатеж.КурсВзаиморасчетовПлан=0;
	//	СтрокаПлатеж.СуммаПлатежаПлан=0;
	КонецЕсли;
	
	// заполнить по заявке
	//ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДокументПланированияПлатежа
	ДокументОснование = РасшифровкаПлатежа[0].ДокументПланированияПлатежа;
	ДокументОбъект.ЗаполнитьПоЗаявкеЯШТ(Истина);
	
	Если РасшифровкаПлатежа.Количество()>1 Тогда
		Список = Истина;
	Иначе
		Список = Ложь;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДокументПланированияПлатежаПриИзменении(Элемент)
	
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		СтрокаПлатеж.КурсВзаиморасчетовПлан=0;
		СтрокаПлатеж.СуммаПлатежаПлан=0;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанель2ОбщаяСумма(Кнопка)

	Если (ИтогоЗатрат<>0) Тогда 
		ЭлементыФормы.СуммаДокумента.Значение = ИтогоЗатрат;
		ЭлементыФормы.СуммаДокументаРасчеты.Значение = ИтогоЗатрат;
	КонецЕсли;	
	
	СтрокаПлатеж.СуммаПлатежа = ИтогоЗатрат - (РасшифровкаПлатежа.Итог("СуммаПлатежа")-СтрокаПлатеж.СуммаПлатежа);
	
КонецПроцедуры

Процедура ЗатратыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	СформироватьИтогПоЗатратам();	
	
КонецПроцедуры

Процедура Список2ПриИзменении(Элемент)
	
	Если (ЭлементыФормы.Списком2.Значение <> Истина) Тогда 
		Если ((Подразделение <> Справочники.Подразделения.ПустаяСсылка()) или (СтатьяЗатрат <> Справочники.СтатьиЗатрат.ПустаяСсылка())) Тогда
			Стр 				= Затраты.Добавить();
			Стр.Подразделение 	= Подразделение;
			Стр.СтатьяЗатрат 	= СтатьяЗатрат;
			Стр.Сумма			= СуммаДокумента;
			//Адиянов<<< Начало СтатьяЗатратУпр
			Стр.СтатьяЗатратУПР	= СтатьяЗатратУПР;
			//Адиянов>>> Конец СтатьяЗатратУпр
		КонецЕсли;		
		Подразделение = Справочники.Подразделения.ПустаяСсылка();
		СтатьяЗатрат = Справочники.СтатьиЗатрат.ПустаяСсылка();
		ЭлементыФормы.Затраты.Видимость = Истина;
		ЭлементыФормы.Подразделение.Видимость = Ложь;
		ЭлементыФормы.СтатьяЗатрат.Видимость = Ложь;		
		ЭлементыФормы.НоменклатурнаяГруппа.Видимость = Ложь;
		ЭлементыФормы.НадписьПодразделение.Видимость = Ложь;
		ЭлементыФормы.НадписьСтатьяЗатрат.Видимость = Ложь;		
		ЭлементыФормы.НадписьНоменклатурнаяГруппа.Видимость = Ложь;
		ЭлементыФормы.КоманднаяПанель2.Видимость = Истина;
		//Адиянов<<< Начало СтатьяЗатратУпр
		СтатьяЗатратУпр = Справочники.СтатьиЗатратУПР.ПустаяСсылка();
		ЭлементыФормы.СтатьяЗатратУпр.Видимость = Ложь;
		ЭлементыФормы.НадписьСтатьяЗатратУПР.Видимость = Ложь;		
		//Адиянов>>> Конец СтатьяЗатратУпр
	Иначе 
		Если (Затраты.Количество()>0) Тогда
			Стр 				= Затраты.Получить(0);
			Подразделение 		= Стр.Подразделение;
			СтатьяЗатрат		= Стр.СтатьяЗатрат;
			//Адиянов<<< Начало СтатьяЗатратУпр
			СтатьяЗатратУпр     = Стр.СтатьяЗатратУПР;
			//Адиянов>>> Конец СтатьяЗатратУпр
		КонецЕсли;

		Затраты.Очистить();
		ЭлементыФормы.Затраты.Видимость = Ложь;
		ЭлементыФормы.Подразделение.Видимость = Истина;
		ЭлементыФормы.СтатьяЗатрат.Видимость = Истина;
		ЭлементыФормы.НоменклатурнаяГруппа.Видимость = Истина;
		ЭлементыФормы.НадписьПодразделение.Видимость = Истина;
		ЭлементыФормы.НадписьСтатьяЗатрат.Видимость = Истина;
		ЭлементыФормы.НадписьНоменклатурнаяГруппа.Видимость = Истина;
		ЭлементыФормы.КоманднаяПанель2.Видимость = Ложь;		
		//Адиянов<<< Начало СтатьяЗатратУпр
		ЭлементыФормы.СтатьяЗатратУпр.Видимость = Истина;	
		ЭлементыФормы.НадписьСтатьяЗатратУПР.Видимость = Истина;
		//Адиянов>>> Конец СтатьяЗатратУпр
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗатратыПослеУдаления(Элемент)
	
	СформироватьИтогПоЗатратам();	
	
КонецПроцедуры

Процедура ПриПовторномОткрытии(СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ОтражатьВЗатратахПриИзменении(Элемент)
	
	Если (ОтражатьВЗатратах) Тогда
		ЭлементыФормы.Панель1.Страницы.Страница1.Видимость = Истина;
	Иначе 
		ЭлементыФормы.Панель1.Страницы.Страница1.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура СчетКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если  ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		СтандартнаяОбработка=Ложь;
		ФормаСчета = Справочники.БанковскиеСчета.ПолучитьФормуВыбора(,Элемент);	
		Если НЕ Организация.Пустая() Тогда
			
			ФормаСчета.Отбор.Владелец.ВидСравнения  = ВидСравнения.Равно;
			ФормаСчета.Отбор.Владелец.Значение      = Организация;
			ФормаСчета.Отбор.Владелец.Использование = Истина;
			
			Если Не СчетОрганизации.Пустая() и ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
				
				ФормаСчета.Отбор.ВалютаДенежныхСредств.ВидСравнения  = ВидСравнения.Равно;
				ФормаСчета.Отбор.ВалютаДенежныхСредств.Значение      = СчетОрганизации.ВалютаДенежныхСредств;
				ФормаСчета.Отбор.ВалютаДенежныхСредств.Использование = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		ФормаСчета.РежимВыбора = Истина;
		ФормаСчета.Открыть();
		
	Иначе	
		СтандартнаяОбработка=Истина;
	КонецЕсли;	

КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ ПараметрОбъектКопирования = Неопределено Тогда
		Сообщить("Платежные поручения должны вводится на основании Заявки на расходование. Копирование запрещено.");
		Отказ = Истина;
	КонецЕсли;
	
	Если РольДоступна("Кассир") ИЛИ РольДоступна ("ПолныеПрава") Тогда Возврат; КонецЕсли; // Открывается по обычной форме
	Если НЕ ЭтоНовый() и Константы.ОплатыРаспределяютМенеджеры.Получить() Тогда
		ФлагОткрыватьПоДругойФорме=ПроверитьВДокументеПлатежаЕстьДоговорыПользователя(Ссылка,Истина);
		Если ФлагОткрыватьПоДругойФорме Тогда
			Отказ=Истина;
			СтандартнаяОбработка=Ложь;
			Форма=ДокументОбъект.ПолучитьФорму("ФормаДокументаДляОтветственногоЗаДоговор");
			Форма.Открыть();
		Иначе
			СообщитьОбОшибке("Вы не имеете права открывать данный документ",Отказ);
		КонецЕсли;	
	КонецЕсли;	

КонецПроцедуры

Процедура КоманднаяПанель1ПеречислениеНалогаИзСправочника(Кнопка)
	
	ФормаПодбораСправочникаПН = Справочники.НалогиВПлатежныхПоручениях.ПолучитьФормуВыбора();
	
	
	///////////Плотников   выбор из справочника с отбором
	
	списокКонтр = Новый СписокЗначений;
	списокКонтр.Добавить(Контрагент);
	списокКонтр.Добавить(Справочники.Контрагенты.ПустаяСсылка());
	ФормаПодбораСправочникаПН.Отбор.Контрагент.ВидСравнения = ВидСравнения.ВСписке;
    ФормаПодбораСправочникаПН.Отбор.Контрагент.Значение = списокКонтр;
    ФормаПодбораСправочникаПН.Отбор.Контрагент.Использование = ИСТИНА;
 	//////////Плотников
	
	ВыбранныйЭлемент = ФормаПодбораСправочникаПН.ОткрытьМодально();
	
	Если НЕ ВыбранныйЭлемент = Неопределено Тогда
		
		СтатусСоставителя = ВыбранныйЭлемент.СтатусСоставителя;
		КодБК = ВыбранныйЭлемент.КодБК;
		КодОКАТО = ВыбранныйЭлемент.КодОКАТО;
		ПоказательОснования = ВыбранныйЭлемент.ПоказательОснования;
		ПоказательТипа = ВыбранныйЭлемент.ПоказательТипа;
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ЗаполнитьРасшифровкуПлатежаДолгамиПоДоговору(ВыбранныйДоговор,СуммаОплатыПоДоговору, КурсПлатежа=1, процентНДС=0)
	
	Если ВыбранныйДоговор.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
		Сообщить("Заполнение не произведено, поскольку ведение взаиморасчетов по договору '"+Строка(ВыбранныйДоговор.ВедениеВзаиморасчетов)+"'");
		Возврат;
	КонецЕсли;	
	
	// Проверка, что данной платежкой нет отнесения на сделки по регистру ВзаиморасчетыСКонтрагентами по договору		
	
	Если Не ЭтоНовый() Тогда
		Запрос=Новый Запрос;		
		Запрос.Текст="ВЫБРАТЬ
		|	ДоговорКонтрагента,Сделка,
		|	СуммаВзаиморасчетов
		|ИЗ РегистрНакопления.ВзаиморасчетыСКонтрагентами 
		|ГДЕ	Регистратор = &Регистратор
		|	И ДоговорКонтрагента = &ДоговорКонтрагента
		|	И Сделка ССЫЛКА Документ.ЗаказПоставщику";
		
		Запрос.УстановитьПараметр("ДоговорКонтрагента",ВыбранныйДоговор);
		Запрос.УстановитьПараметр("Регистратор",Ссылка);
		
		Выборка=Запрос.Выполнить().Выбрать();	 
		
		Если  Выборка.Следующий() Тогда
		Предупреждение("В данном документе уже есть строки оплат, отнесенные по заказам по договору'"+ Строка(ВыбранныйДоговор)+"' "+
		Символы.ПС+"Удалите такие строки, затем проведите документ, затем снова нажмите кнопку 'Заполнить'.")	;
		Возврат	;
		КонецЕсли;
		
	КонецЕсли;
	
	
ТЗДолги= Новый ТаблицаЗначений;	
ТЗДолги.Колонки.Добавить("Контрагент");
ТЗДолги.Колонки.Добавить("ДоговорКонтрагента");
ТЗДолги.Колонки.Добавить("Сделка");
ТЗДолги.Колонки.Добавить("ДатаОплаты");
ТЗДолги.Колонки.Добавить("ОстатокДолга");

Запрос = Новый Запрос;
Запрос.Текст="ВЫБРАТЬ
|	ДоговорКонтрагента.Владелец Контрагент,
|	ДоговорКонтрагента.Ссылка ДоговорКонтрагента,
|   Сделка Сделка,
|	-СуммаВзаиморасчетовОстаток  ОстатокДолга
|ИЗ
|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(, 
|ДоговорКонтрагента.ВедениеВзаиморасчетов = &ПоЗаказам
|И ДоговорКонтрагента.ВидДоговора = &СПоставщиком  
|И Сделка ССЫЛКА Документ.ЗаказПоставщику  
|И ДоговорКонтрагента=&ДоговорКонтрагента) 	
|ГДЕ СуммаВзаиморасчетовОстаток<0";

Запрос.УстановитьПараметр("ДоговорКонтрагента",ВыбранныйДоговор);
Запрос.УстановитьПараметр("СПоставщиком",Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
Запрос.УстановитьПараметр("ПоЗаказам",Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
//Запрос.УстановитьПараметр("КонДата",НачалоДня(КонецДня(ДатаОплаты)+1));


  Выборка=Запрос.Выполнить().Выбрать();
  
  Пока Выборка.Следующий() Цикл
	  Если не ЗначениеНеЗаполнено(Выборка.Сделка) Тогда
		        ПолучитьДолгиПоставщикуПоСделке(Выборка.Сделка,Выборка.ОстатокДолга,ТЗДолги);
	  КонецЕсли;
  КонецЦикла;  
  
  Для каждого строка из ТЗДолги Цикл
	  Если ЗначениеНеЗаполнено(строка.ДатаОплаты)  Тогда
		  строка.ДатаОплаты=ПустоеЗначениеТипа(Тип("Дата"));
	  КОнецЕсли;	
	  
  КонецЦикла;

  
  ТЗДолги.Свернуть("Контрагент,ДоговорКонтрагента,Сделка,ДатаОплаты","ОстатокДолга");
  ТЗДолги.Сортировать("ДатаОплаты Возр,Сделка Возр");
  
  НарастающийИтог=0;
  
  // удаляем строки по договору ВыбранныйДоговор из Расшифровки платежа
  
  сч=0;
  Пока сч < РасшифровкаПлатежа.Количество() Цикл
	  Если РасшифровкаПлатежа[сч].ДоговорКонтрагента=ВыбранныйДоговор Тогда
		  РасшифровкаПлатежа.Удалить(сч);
	  Иначе 
		  сч=сч+1;	
	  КонецЕсли;	
  КонецЦикла;

  

 // Заполним расшифровку по данным из ТЗДолги на сумму не превосходящую СуммаОплатыПоДоговору
 
 Для каждого строкаТЗ ИЗ ТЗДолги Цикл
	 СуммаДолгаЗачтена = Мин(строкаТЗ.ОстатокДолга,Макс(СуммаОплатыПоДоговору-НарастающийИтог,0));
	 Если СуммаДолгаЗачтена>0 Тогда
		 СтрокаРасшифровкаПлатежа=РасшифровкаПлатежа.Добавить();	
		 СтрокаРасшифровкаПлатежа.ДоговорКонтрагента=ВыбранныйДоговор;
		 СтрокаРасшифровкаПлатежа.Сделка=строкаТЗ.Сделка;
		 
		 //+++ 16.07.2014 - учет валютных сумм!
		 СтрокаРасшифровкаПлатежа.КурсВзаиморасчетов = ЭтотОбъект.КурсДокумента;
		 СтрокаРасшифровкаПлатежа.СуммаВзаиморасчетов= СуммаДолгаЗачтена;
		 СтрокаРасшифровкаПлатежа.СуммаПлатежа = СуммаДолгаЗачтена * КурсПлатежа;//СтрокаРасшифровкаПлатежа.КурсВзаиморасчетов;
		  СтрокаРасшифровкаПлатежа.СтавкаНДС   = ?(процентНДС=0, перечисления.СтавкиНДС.БезНДС, перечисления.СтавкиНДС.НДС18);
		  СтрокаРасшифровкаПлатежа.СуммаНДС    = СтрокаРасшифровкаПлатежа.СуммаПлатежа * процентНДС;
		  
    	 СтрокаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщику;
	 Иначе
		 Возврат;
	 КонецЕсли;
	 НарастающийИтог=НарастающийИтог+СуммаДолгаЗачтена;	
КонецЦикла;	

СуммаАванса=Макс(СуммаОплатыПоДоговору-НарастающийИтог,0);
// если осталась сумма аванса, то относим ее по договору ВыбранныйДоговор на пустой заказ
Если СуммаАванса>0 Тогда
	СтрокаРасшифровкаПлатежа=РасшифровкаПлатежа.Добавить();	
	СтрокаРасшифровкаПлатежа.ДоговорКонтрагента=ВыбранныйДоговор;
	
		
	СтрокаРасшифровкаПлатежа.СуммаВзаиморасчетов = СуммаАванса;
	//+++ 16.07.2014 - учет валютных сумм!
	СтрокаРасшифровкаПлатежа.КурсВзаиморасчетов  = ЭтотОбъект.КурсДокумента;
	СтрокаРасшифровкаПлатежа.СуммаПлатежа=СуммаАванса * КурсПлатежа; //СтрокаРасшифровкаПлатежа.КурсВзаиморасчетов;
  	СтрокаРасшифровкаПлатежа.СтавкаНДС   =  ?(процентНДС=0, перечисления.СтавкиНДС.БезНДС, перечисления.СтавкиНДС.НДС18);
	 СтрокаРасшифровкаПлатежа.СуммаНДС    = СтрокаРасшифровкаПлатежа.СуммаПлатежа * процентНДС;
			  
	СтрокаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщику;
	
	Сообщить("Сумма платежа "+Строка(СуммаАванса)+" отнесена на аванс. Требуется указать заказ для отнесения суммы.");
КонецЕсли;	
 

КонецПроцедуры	

Процедура РассчитатьКурсНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СчетОрганизации) Тогда
		Сообщить("Не выбран счет организации");
		Возврат;
	КонецЕсли;
	
	Если Проведен Тогда
		Сообщить("Необходимо выполнить отмену проведения документа");
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", СчетОрганизации);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ДенежныеСредстваОстатки.СуммаОстаток = 0
	               |			ТОГДА 1
	               |		ИНАЧЕ ДенежныеСредстваОстатки.СуммаУпрОстаток / ДенежныеСредстваОстатки.СуммаОстаток
	               |	КОНЕЦ КАК Курс,
	               |	ДенежныеСредстваОстатки.СуммаУпрОстаток КАК ОстатокРуб,
	               |	ДенежныеСредстваОстатки.СуммаОстаток КАК ОстатокВал
	               |ИЗ
	               |	РегистрНакопления.ДенежныеСредства.Остатки(&Период, БанковскийСчетКасса = &Счет) КАК ДенежныеСредстваОстатки";
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		КурсВзаиморасчетов = Результат.Курс;
		Сообщить("Остаток в валюте: " + Строка(Результат.ОстатокВал));
		Сообщить("Остаток в рублях: " + Строка(Результат.ОстатокРуб));
	Иначе
		КурсВзаиморасчетов = 1;
	КонецЕсли;
	
	Для каждого СтрРасшифровкаПлатежа ИЗ РасшифровкаПлатежа Цикл
		СтрРасшифровкаПлатежа.КурсВзаиморасчетов = КурсВзаиморасчетов;
	КонецЦикла;
	
КонецПроцедуры

Процедура КурсВзаиморасчетовПрочийРасходПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ПолеДоговорТранзитНачалоВыбора(Элемент, СтандартнаяОбработка)
	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, КонтрагентТранзит, КонтрагентТранзит.ОсновнойДоговорКонтрагента,
				ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);
КонецПроцедуры

Процедура РассчитатьКурс3Нажатие(Элемент)
	Если НЕ ЗначениеЗаполнено(СчетОрганизации) Тогда
		Сообщить("Не выбран счет организации");
		Возврат;
	КонецЕсли;
	
	Если Проведен Тогда
		Сообщить("Необходимо выполнить отмену проведения документа");
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", СчетОрганизации);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ДенежныеСредстваОстатки.СуммаОстаток = 0
	               |			ТОГДА 1
	               |		ИНАЧЕ ДенежныеСредстваОстатки.СуммаУпрОстаток / ДенежныеСредстваОстатки.СуммаОстаток
	               |	КОНЕЦ КАК Курс,
	               |	ДенежныеСредстваОстатки.СуммаУпрОстаток КАК ОстатокРуб,
	               |	ДенежныеСредстваОстатки.СуммаОстаток КАК ОстатокВал
	               |ИЗ
	               |	РегистрНакопления.ДенежныеСредства.Остатки(&Период, БанковскийСчетКасса = &Счет) КАК ДенежныеСредстваОстатки";
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		КурсВзаиморасчетов1 = Результат.Курс;
		Сообщить("Остаток в валюте: " + Строка(Результат.ОстатокВал));
		Сообщить("Остаток в рублях: " + Строка(Результат.ОстатокРуб));
	Иначе
		КурсВзаиморасчетов = 1;
	КонецЕсли;
	
	Для каждого СтрРасшифровкаПлатежа ИЗ РасшифровкаПлатежа Цикл
		СтрРасшифровкаПлатежа.КурсВзаиморасчетов = КурсВзаиморасчетов1;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(СчетКонтрагента) Тогда
		Сообщить("Не выбран счет контрагента");
		Возврат;
	КонецЕсли;
	
	Если Проведен Тогда
		Сообщить("Необходимо выполнить отмену проведения документа");
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", СчетКонтрагента);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ДенежныеСредстваОстатки.СуммаОстаток = 0
	               |			ТОГДА 1
	               |		ИНАЧЕ ДенежныеСредстваОстатки.СуммаУпрОстаток / ДенежныеСредстваОстатки.СуммаОстаток
	               |	КОНЕЦ КАК Курс,
	               |	ДенежныеСредстваОстатки.СуммаУпрОстаток КАК ОстатокРуб,
	               |	ДенежныеСредстваОстатки.СуммаОстаток КАК ОстатокВал
	               |ИЗ
	               |	РегистрНакопления.ДенежныеСредства.Остатки(&Период, БанковскийСчетКасса = &Счет) КАК ДенежныеСредстваОстатки";
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		КурсВзаиморасчетов2 = Результат.Курс;
		Сообщить("Остаток в валюте: " + Строка(Результат.ОстатокВал));
		Сообщить("Остаток в рублях: " + Строка(Результат.ОстатокРуб));
		Если КурсВзаиморасчетов2 = 1 Тогда
			Отбор = Новый Структура;
		    Отбор.Вставить("Валюта",СчетКонтрагента.ВалютаДенежныхСредств);
		    ТАб = РегистрыСведений.КурсыВалют.СрезПоследних();
		    КурсВзаиморасчетов2 = Таб[0].курс;
		КонецЕсли;
	Иначе
		Отбор = Новый Структура;
		Отбор.Вставить("Валюта",СчетКонтрагента.ВалютаДенежныхСредств);
		ТАб = РегистрыСведений.КурсыВалют.СрезПоследних();
		КурсВзаиморасчетов2 = Таб[0].курс; 
	КонецЕсли;
	КурсКорреспондента = КурсВзаиморасчетов2;
	
	СуммаВРублях = СуммаДокумента*КурсВзаиморасчетов1;
	
	СуммаКорреспондента = СуммаВРублях/КурсВзаиморасчетов2;
	
КонецПроцедуры

Процедура ПолеВвода1ПриИзменении(Элемент)
	Для каждого СтрРасшифровкаПлатежа ИЗ РасшифровкаПлатежа Цикл
	    КурсВзаиморасчетов1 = СтрРасшифровкаПлатежа.КурсВзаиморасчетов;
	КонецЦикла;
	
	СуммаВРублях = СуммаДокумента*КурсВзаиморасчетов1;
		
	КурсКорреспондента  = СуммаВРублях/СуммаКорреспондента
КонецПроцедуры


							
////////////////////////////////////////////////////////////////////////////////
// ТЕЛО МОДУЛЯ

ЭлементыФормы.ВидПлатежа.СписокВыбора.Добавить("Почтой");
ЭлементыФормы.ВидПлатежа.СписокВыбора.Добавить("Телеграфом");
ЭлементыФормы.ВидПлатежа.СписокВыбора.Добавить("Электронно");