Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Возвращает таблицу стоимости по товарам
//
Функция ПолучитьТаблицуСтоимостиТоваров()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ВидДвижения",     ВидДвиженияНакопления.Расход);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	СУММА(ПартииТоваровНаСкладах.Стоимость) КАК Стоимость
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|
	|ГДЕ
	|	ПартииТоваровНаСкладах.Регистратор   = &ТекущийДокумент
	|	И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвижения
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры
	|";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьСтоимостьПоПартиямТоваров()

// Возвращает стоимость товара
//
Функция ПолучитьСтоимостьТовара(Таблица, Номенклатура, Характеристика = Неопределено, Серия = Неопределено)

	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура",                   Номенклатура);
	Если НЕ ЗначениеНеЗаполнено(Характеристика) Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	КонецЕсли;
	Если НЕ ЗначениеНеЗаполнено(Серия) Тогда
		СтруктураПоиска.Вставить("СерияНоменклатуры",          Серия);
	КонецЕсли;

	Строки = Таблица.НайтиСтроки(СтруктураПоиска);

	Если Строки.Количество() > 0 Тогда
		Стоимость = Строки[0].Стоимость;
	Иначе
		Стоимость = 0;
	КонецЕсли;

	Возврат Стоимость;

КонецФункции // ПолучитьСтоимостьПоПартиямТоваров()

// Формирует табличный документ по унифицированной форме ТОРГ-13
// 
// Возвращаемое значение
//  Табличный документ - унифицированная форма ТОРГ-13
//
Функция ПечатьТОРГ13()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;

	ВалютаПечати = мВалютаРегламентированногоУчета;
	Запрос       = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер КАК НомерДокумента,
	|	Дата  КАК ДатаДокумента,
	|	Организация,
	|	СкладОтправитель КАК ОтправительПодразделение,
	|	СкладПолучатель  КАК ПолучательПодразделение,
	|	СкладОтправитель.ВидСклада КАК ОтправительВидСклада,
	|	СкладПолучатель.ВидСклада  КАК ПолучательВидСклада,
	|	Товары.(
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|		Номенклатура." + ТоварКод + " КАК ТоварКод,
	|		Цена,
	|		Количество,
	|		КоличествоМест,
	|		ЕдиницаИзмерения.Представление               КАК ЕдиницаИзмеренияНаименование,
	|		ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|		ЕдиницаИзмеренияМест.Представление           КАК ЕдиницаИзмеренияМестНаименование,
	|		ВЫБОР
	|			КОГДА КоличествоМест > 0 ТОГДА ЕдиницаИзмеренияМест.Коэффициент / Коэффициент
	|			ИНАЧЕ NULL
	|		КОНЕЦ КАК КоличествоВОдномМесте,
	|		ХарактеристикаНоменклатуры  КАК Характеристика,
	|		СерияНоменклатуры           КАК Серия
	|	),
	|	ВозвратнаяТара.(
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|		Номенклатура." + ТоварКод + " КАК ТоварКод,
	|		0 КАК Цена,
	|		0 КАК Сумма,
	|		0 КАК КоличествоВОдномМесте,
	|		Количество,
	|		Номенклатура.ЕдиницаХраненияОстатков.Представление               КАК ЕдиницаИзмеренияНаименование,
	|		Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ
	|	)
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки,
	|	ВозвратнаяТара.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	ВыборкаСтрокТара   = Шапка.ВозвратнаяТара.Выбрать();

	ЭтоСкладНТТ = (Шапка.ОтправительВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка
	              ИЛИ Шапка.ПолучательВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка);

	Если НЕ ЭтоСкладНТТ Тогда
		ТаблицаСтоимости        = ПолучитьТаблицуСтоимостиТоваров();
		ВалютаУпрУчета          = Константы.ВалютаУправленческогоУчета.Получить();
		Параметры               = ПолучитьКурсВалюты(ВалютаУпрУчета, Дата);
		КурсВалютыУпрУчета      = Параметры.Курс;
		КратностьВалютыУпрУчета = Параметры.Кратность;
	КонецЕсли;

	Макет = ПолучитьОбщийМакет("ТОРГ13");

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_ТОРГ13";

	// Выводим общие реквизиты шапки
	СведенияОбОрганизации = СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	ОбластьМакета         = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента));
	ОбластьМакета.Параметры.НомерДокумента           = ПолучитьНомерНаПечать(ЭтотОбъект);
	ОбластьМакета.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
	ТабДокумент.Вывести(ОбластьМакета);

	СтрокНаСтранице = 23;
	СтрокШапки      = 10;
	СтрокПодвала    = 9;
	НомерСтраницы   = 1;

	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	КоличествоСтрок = ВыборкаСтрокТовары.Количество();

	Если КоличествоСтрок = 1 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// инициализация итогов по странице
	ИтогКоличествоМестПоСтранице = 0;
	ИтогМассаБруттоПоСтранице    = 0;
	ИтогМассыНеттоПоСтранице     = 0;
	ИтогСуммыПоСтранице          = 0;

	// инициализация итогов по документу
	ИтогоКоличество  = 0;
	ИтогоМассаБрутто = 0;
	ИтогоМассаНетто  = 0;
	ИтогоСумма       = 0;

	Ном = 0;

	// Выводим многострочную часть докмента
	ВыборкаСтрокТовары      = Шапка.Товары.Выбрать();
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
	ОбластьМакета           = Макет.ПолучитьОбласть("Строка");

	// Выборка товаров
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;
		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице;

			ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

			// инициализация итогов по странице
			ИтогКоличествоМестПоСтранице = 0;
			ИтогМассаБруттоПоСтранице    = 0;
			ИтогМассаНеттоПоСтранице     = 0;
			ИтогСуммыПоСтранице          = 0;

			НомерСтраницы = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);

		КоличествоМест = Формат(ВыборкаСтрокТовары.Количество, "ЧЦ=15; ЧДЦ=3");

		Если ВыборкаСтрокТовары.КоличествоМест <> 0 И НЕ ЗначениеНеЗаполнено(ВыборкаСтрокТовары.ЕдиницаИзмеренияМестНаименование) Тогда
			КоличествоМест = КоличествоМест 
			                 + Символы.ПС
			                 + " (" + Формат(ВыборкаСтрокТовары.КоличествоМест,"ЧЦ=15; ЧДЦ=0")
			                 + " "
			                 + ВыборкаСтрокТовары.ЕдиницаИзмеренияМестНаименование
			                 + ")";
		КонецЕсли;

		ОбластьМакета.Параметры.КоличествоМест    = КоличествоМест;
		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрокТовары.ТоварНаименование + ПредставлениеСерий(ВыборкаСтрокТовары);

		Если ЭтоСкладНТТ Тогда
			Сумма = ВыборкаСтрокТовары.Количество * ВыборкаСтрокТовары.Цена;
		Иначе
			Если ВыборкаСтрокТовары.Количество = 0 Тогда
				Сумма = 0;
				Цена  = 0;
			Иначе
				Сумма = ПолучитьСтоимостьТовара(ТаблицаСтоимости,
				                                ВыборкаСтрокТовары.Номенклатура,
				                                ВыборкаСтрокТовары.Характеристика,
				                                ВыборкаСтрокТовары.Серия);
				Сумма = ПересчитатьИзВалютыВВалюту(Сумма, ВалютаУпрУчета, ВалютаПечати, КурсВалютыУпрУчета, 1, КратностьВалютыУпрУчета, 1);
				Цена  = Окр(Сумма / ВыборкаСтрокТовары.Количество, 2);
			КонецЕсли;

			ОбластьМакета.Параметры.Цена = Цена;
		КонецЕсли;

		ОбластьМакета.Параметры.Сумма = Сумма;

		ТабДокумент.Вывести(ОбластьМакета);

		// Обновим итоги по странице
		ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице + ВыборкаСтрокТовары.Количество;
		ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице    + 0;
		ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице     + 0;
		ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице          + Сумма;

		// Обновим итогов по документу
		ИтогоКоличество  = ИтогоКоличество  + ВыборкаСтрокТовары.Количество;
		ИтогоМассаБрутто = ИтогоМассаБрутто + 0;
		ИтогоМассаНетто  = ИтогоМассаНетто  + 0;
		ИтогоСумма       = ИтогоСумма       + Сумма;

	КонецЦикла;

	// Выборка возвратная тара
	Пока ВыборкаСтрокТара.Следующий() Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;
		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице;

			ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

			// инициализация итогов по странице
			ИтогКоличествоМестПоСтранице = 0;
			ИтогМассаБруттоПоСтранице    = 0;
			ИтогМассаНеттоПоСтранице     = 0;
			ИтогСуммыПоСтранице          = 0;

			НомерСтраницы = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТара);

		ОбластьМакета.Параметры.КоличествоМест    = Формат(ВыборкаСтрокТара.Количество, "ЧЦ=15; ЧДЦ=3");
		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрокТара.ТоварНаименование + " (возвратная тара)";

		ТабДокумент.Вывести(ОбластьМакета);

		// Обновим итоги по странице
		ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице + ВыборкаСтрокТара.Количество;
		ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице    + 0;
		ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице     + 0;
		ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице          + 0;

		// Обновим итогов по документу
		ИтогоКоличество  = ИтогоКоличество  + ВыборкаСтрокТара.Количество;
		ИтогоМассаБрутто = ИтогоМассаБрутто + 0;
		ИтогоМассаНетто  = ИтогоМассаНетто  + 0;
		ИтогоСумма       = ИтогоСумма       + 0;

	КонецЦикла;

	ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице;

	ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогоКоличествоМест = ИтогоКоличество;
	ОбластьМакета.Параметры.ИтогоМассаБрутто    = ИтогоМассаБрутто;
	ОбластьМакета.Параметры.ИтогоМассаНетто     = ИтогоМассаНетто;
	ОбластьМакета.Параметры.ИтогоСумма          = ИтогоСумма;

	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ИтогоСуммаПрописью = СформироватьСуммуПрописью(ИтогоСумма, ВалютаПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	// Зададим параметры макета
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	Возврат ТабДокумент;

КонецФункции // ПечатьТОРГ13()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Ведомость" Тогда

		//ТабДокумент = ПечатьПеремещениеТоваров();
	ИначеЕсли ИмяМакета = "ТОРГ13" тогда

		// Унифицированная форма ТОРГ-13 (накладаня на внутрнее перемещение)
		ТабДокумент = ПечатьТОРГ13();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();

	КонецЕсли; 

	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;
	
	ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка
	 или СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		ТаблицаТоваров.Колонки.Цена.Имя = "ЦенаВРознице";
	КонецЕсли;

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, Склад");

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	//ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка 
	//   И ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам Тогда
	//	ОшибкаПриПроведении("Перемещение с неавтоматизированной торговой точки по ордерам не осуществляется!", Отказ, Заголовок);
	//КонецЕсли;	
	//
	//Если Не ЗначениеНеЗаполнено(СтруктураШапкиДокумента.ВнутреннийЗаказ)
	//   И Не СтруктураШапкиДокумента.ВидВнутреннегоЗаказа = Перечисления.ВидыВнутреннегоЗаказа.НаСклад Тогда
	//	ОшибкаПриПроведении("Перемещение можно осуществлять только по внутреннему заказу с видом заказа на склад!", Отказ, Заголовок);
	//КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	СтруктураОбязательныхПолей.Вставить("Качество");

	КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСкладаОтправителя, СтруктураОбязательныхПолей);

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");

	// Теперь позовем общую процедуру проверки заполнения.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара",СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок);

	//ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок);
    ДвиженияРегистровГрузчикиИКладовщики(Отказ);

	//// Отражение в партионном учете
	//Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
	//	
	//	ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок);
	//	
	//	ТаблицаДвиженийПоСписаннымТоварам = Движения.СписанныеТовары.Выгрузить();
	//	Если ТаблицаДвиженийПоСписаннымТоварам.Количество()>0 Тогда
	//		
	//		// Проводить по партиям сразу нужно если установлен параметр
	//		// учетной политики СписыватьПартииПриПроведенииДокументов
	//		ПроводитьПоПартиям = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата).СписыватьПартииПриПроведенииДокументов;
	//		Если ПроводитьПоПартиям Тогда
	//			
	//			ДвижениеПартийТоваров(Ссылка, ТаблицаДвиженийПоСписаннымТоварам);
	//			
	//			// Зарегистрируем в пследовательности
	//			ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
	//			ЗаписьРегистрации.Период = Дата;
	//			ЗаписьРегистрации.Регистратор = Ссылка;
	//			
	//		Иначе
	//			
	//			// В неоперативном режиме границы последовательностей сдвигаются назад, если они позже документа.
	//			Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
	//				СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете)
	//			КонецЕсли;
	//			
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда

		Если Не ИспользоватьВнутренниеЗаказы() Тогда
			Возврат;
		КонецЕсли;

		// Заполнение шапки
		ОтражатьВУправленческомУчете = Истина;
		ОтражатьВБухгалтерскомУчете  = Ложь;
		ОтражатьВНалоговомУчете      = Ложь;
		СкладПолучатель    = Основание.Заказчик;
		Организация        = Основание.Организация;
		Ответственный      = Основание.Ответственный;
		Подразделение      = Основание.Подразделение;
		ВнутреннийЗаказ    = Основание.Ссылка;
		Комментарий        = Основание.Комментарий;

		//ТабОстатки = ОстаткиТоваровПоВнутреннемуЗаказу(Основание, Дата);
		//ЗаполнитьТабЧастьТоварыПоВнутреннемуЗаказу(ЭтотОбъект, Товары, ТабОстатки);

		//Для Каждого СтрокаТЧ Из Товары Цикл
		//	СтрокаТЧ.ДокументРезерва = Основание;
		//	СтрокаТЧ.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;
		//КонецЦикла;
		//
		//ТабОстатки = ОстаткиТоваровПоВнутреннемуЗаказу(Основание, Дата, Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
		//ЗаполнитьТабЧастьТараПоВнутреннемуЗаказу(ЭтотОбъект, ВозвратнаяТара, ТабОстатки);
		//
		//Для Каждого СтрокаТЧ Из ВозвратнаяТара Цикл
		//	СтрокаТЧ.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;
		//КонецЦикла;
		
		Склад = Неопределено;
		Если НЕ ВвестиЗначение(Склад, "Выберите склад отправитель", Тип("СправочникСсылка.Склады")) Тогда
			Склад = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойСклад");
		КонецЕсли;
		СкладОтправитель = Склад;
		
		ЗаполнитьОстаткамиТоваровСРезервомПоВнутреннемуЗаказу( ЭтотОбъект, Основание, Товары,         Склад, Дата);
		ЗаполнитьОстаткамиТоваровСРезервомПоВнутреннемуЗаказу( ЭтотОбъект, Основание, ВозвратнаяТара, Склад, Дата, Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);

	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	// Проверка заполнения единицы измерения мест и количества мест
	ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	
	Если Не(ЗначениеНеЗаполнено(ПараметрыСеанса.ИдетОбменРаспределеннойБазы)) Тогда 
		Если Не(ПараметрыСеанса.ИдетОбменРаспределеннойБазы) Тогда 
			
			ОбщийВесДляПроверки = РассчитатьВесПоТоварам();	
			Вес = РассчитатьВесПоТоварамТЧ();
			Если (Вес<>ОбщийВес) или (Вес<>ОбщийВесДляПроверки) Тогда
				ЗаполнитьВесВТоварах();
				ОбщийВес = Вес;
				Сообщить("Вес у товаров был пересчитан.");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	
	Если Не(ЗначениеНеЗаполнено(ПараметрыСеанса.ИдетОбменРаспределеннойБазы)) Тогда 
		Если Не(ПараметрыСеанса.ИдетОбменРаспределеннойБазы) Тогда 
			
			ОбщийВесДляПроверки = РассчитатьВесПоТоварам();	
			Вес = РассчитатьВесПоТоварамТЧ();
			Если (Вес<>ОбщийВес) или (Вес<>ОбщийВесДляПроверки) Тогда
				ЗаполнитьВесВТоварах();
				ОбщийВес = Вес;
				Сообщить("Вес у товаров был пересчитан.");
			КонецЕсли;
			ВесПоГрузчикам = РассчитатьВесПоГрузчикам();
			Если (Окр(ОбщийВес,0,1)) < (Окр(ВесПоГрузчикам,0,0)) Тогда 
				Сообщить("Общий вес товаров меньше веса по грузчикам. 
				|Пересчитайте вес по грузчикам.");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Движения по документу
	Если Не Отказ Тогда
		//ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
		ДвиженияРегистровГрузчикиИКладовщики(Отказ);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	// Удаление записей регистрации из всех последовательностей
	Для Каждого НаборЗаписейРегистрацииВПоследовательности Из ПринадлежностьПоследовательностям Цикл
		НаборЗаписейРегистрацииВПоследовательности.Очистить();
	КонецЦикла;
	
КонецПроцедуры

Функция РассчитатьВесПоТоварам() Экспорт	
	Вес = 0;	
	КоэффициентПерекатки		= Константы.КоэффициентПерекатки.Получить();
	КоэффициентПерекатки		= ?(КоэффициентПерекатки=0,1,КоэффициентПерекатки);	
	
	Для й=0 по Товары.Количество()-1 Цикл		
		Стр 			= Товары.Получить(й); 
		Типоразмер 		= Стр.Номенклатура.Типоразмер;
		//НормаЗагрузки 	= Справочники.НормыЗагрузки.НайтиПоРеквизиту("Типоразмер",Типоразмер);		
		НормаЗагрузки 		= НайтиНормуЗагрузки(Стр.Номенклатура.ВидТовара,Типоразмер); 
		Если (НормаЗагрузки <> Справочники.НормыЗагрузки.ПустаяСсылка()) Тогда
			НовыйВес		= (НормаЗагрузки.Вес * Стр.Количество)/?(НормаЗагрузки.КоэффициентКоличества=0,1,НормаЗагрузки.КоэффициентКоличества);
			НовыйВес        = НовыйВес * ?(Стр.Номенклатура.Импорт,НормаЗагрузки.КоэффициентИмпорта,1);
			НовыйВес        = НовыйВес * КоэффициентПерекатки;
			НовыйВес        = НовыйВес * ПолучитьКоэффициентВидаПродукции(Дата,Стр.Номенклатура.ВидТовара);
			Вес = Вес + НовыйВес;
		КонецЕсли;		
	КонецЦикла;
	
	Возврат Вес;	
КонецФункции

Функция РассчитатьВесПоГрузчикам() Экспорт
	
	Вес = 0;	
	Для й=0 по ДанныеПоПогрузке.Количество()-1 Цикл		
		Стр 			= ДанныеПоПогрузке.Получить(й); 
		Вес 			= Вес + Стр.Вес;
	КонецЦикла;
	
	Возврат Вес;		
КонецФункции

Процедура ЗаполнитьВесВТабличнойЧасти(СтрокаТабличнойЧасти) Экспорт
	
	Номенклатура 				= СтрокаТабличнойЧасти.Номенклатура;
	Количество					= СтрокаТабличнойЧасти.Количество;
	Типоразмер					= Номенклатура.Типоразмер;
	СтрокаТабличнойЧасти.Вес	= 0;
	КоэффициентПерекатки		= Константы.КоэффициентПерекатки.Получить();
	КоэффициентПерекатки		= ?(КоэффициентПерекатки=0,1,КоэффициентПерекатки);	
	
	Если (Типоразмер = Справочники.Типоразмеры.ПустаяСсылка()) Тогда
		СтрокаТабличнойЧасти.Вес = 0;
		Возврат;
	КонецЕсли;
	
	//НормаВеса					= Справочники.НормыЗагрузки.НайтиПоРеквизиту("Типоразмер",Типоразмер);
	НормаВеса 					= НайтиНормуЗагрузки(Номенклатура.ВидТовара,Типоразмер); 
	
	Если (НормаВеса = Справочники.НормыЗагрузки.ПустаяСсылка()) Тогда 
		СтрокаТабличнойЧасти.Вес = 0;
		Возврат;
	КонецЕсли;
	
	ВесДляРасчета				= 0;
	ВесДляРасчета 	= НормаВеса.Вес*(Количество/(?(НормаВеса.КоэффициентКоличества=0,1,НормаВеса.КоэффициентКоличества)));
	ВесДляРасчета 	= ВесДляРасчета*?(Номенклатура.Импорт=Истина,НормаВеса.КоэффициентИмпорта,1);
	ВесДляРасчета 	= ВесДляРасчета*КоэффициентПерекатки;
	ВесДляРасчета   = ВесДляРасчета*ПолучитьКоэффициентВидаПродукции(Дата,Номенклатура.ВидТовара);
	СтрокаТабличнойЧасти.Вес = ВесДляРасчета;
	ОбщийВес 					= ОбщийВес + ВесДляРасчета;
	
	ДанныеПоПогрузкеПанельВесПропорциональноОбщ();
	
КонецПроцедуры

//Процедура ДвиженияРегистровГрузчикиИКладовщики(Отказ)
//	
//	ТаблицаДанныхПоПогрузке = новый ТаблицаЗначений;
//	ТаблицаДанныхПоПогрузке.Колонки.Добавить("Сотрудник");
//	ТаблицаДанныхПоПогрузке.Колонки.Добавить("Вес");
//	ТаблицаДанныхПоПогрузке.Колонки.Добавить("ВесНетто");
//	
//	Для й=0 по ДанныеПоПогрузке.Количество()-1 Цикл
//		Стр 				= ДанныеПоПогрузке.Получить(й);
//		Если (Стр.Грузчик <> Справочники.ФизическиеЛица.ПустаяСсылка()) и (Стр.Вес<>0) Тогда  
//			Стр1 				= ТаблицаДанныхПоПогрузке.Добавить();
//			Стр1.Сотрудник 		= Стр.Грузчик;
//			Стр1.Вес			= Стр.Вес;
//			Стр1.ВесНетто		= Стр.ВесНетто;
//		КонецЕсли;
//	КонецЦикла;
//	
//	ТаблицаДанныхПоПогрузке.Свернуть("Сотрудник","Вес,ВесНетто");
//	
//	Для й=0 по ТаблицаДанныхПоПогрузке.Количество()-1 Цикл
//		
//		Стр 				= ТаблицаДанныхПоПогрузке.Получить(й);
//		Если (Стр.Вес<0) Тогда 
//			Сообщить("По сотруднику " + Стр.Сотрудник + " отрицательный вес погрузки. 
//					  |Проверьте заполнение табличной части ""Данные по отгрузке"" ", СтатусСообщения.Важное);
//			Отказ	= Истина;
//			Прервать;
//		Иначе 					
//			
//			Движ = Движения.ДанныеПоГрузчикам.Добавить();
//			Движ.Регистратор 	= ЭтотОбъект;
//			Движ.Дата 			= Дата;
//			Движ.Сотрудник 		= Стр.Сотрудник;
//			Движ.Период 		= Дата;
//			Движ.Вес 			= Стр.Вес;
//			Движ.ВесНетто		= Стр.ВесНетто;
//			
//		КонецЕсли;			
//	КонецЦикла;
//	Движения.ДанныеПоГрузчикам.Записать(Истина);
//	
//	// Кладовщики
//	ТаблицаДанныхПоКладовщикам = новый ТаблицаЗначений;
//	ТаблицаДанныхПоКладовщикам.Колонки.Добавить("Сотрудник");
//	ТаблицаДанныхПоКладовщикам.Колонки.Добавить("ОтработанноеВремя");
//	
//	Для й=0 по Кладовщики.Количество()-1 Цикл		
//		Стр 					= Кладовщики.Получить(й);
//		Если (Стр.Кладовщик <> Справочники.ФизическиеЛица.ПустаяСсылка()) и (Стр.ВремяОкончания - Стр.ВремяНачала<>0) Тогда  
//			Стр1 					= ТаблицаДанныхПоКладовщикам.Добавить();
//			Стр1.Сотрудник 			= Стр.Кладовщик;
//			Стр1.ОтработанноеВремя	= Стр.ВремяОкончания - Стр.ВремяНачала;
//		КонецЕсли;
//	КонецЦикла;
//	
//	ТаблицаДанныхПоКладовщикам.Свернуть("Сотрудник","ОтработанноеВремя");
//	
//	Для й=0 по ТаблицаДанныхПоКладовщикам.Количество()-1 Цикл
//		
//		Стр 						= ТаблицаДанныхПоКладовщикам.Получить(й);
//		Если (Стр.ОтработанноеВремя<0) Тогда 
//			Сообщить("По кладовщику " + Стр.Сотрудник + " отрицательное время. 
//					  |Проверьте заполнение табличной части ""Кладовщики"" ", СтатусСообщения.Важное);
//			Отказ	= Истина;		  
//			Прервать;
//		Иначе 			

//			Движ 						= Движения.ДанныеПоКладовщикам.Добавить();
//			Движ.Регистратор 			= ЭтотОбъект;
//			Движ.Дата 					= Дата;
//			Движ.Сотрудник 				= Стр.Сотрудник;
//			Движ.Период 				= Дата;
//			Движ.ОтработанноеВремя		= Стр.ОтработанноеВремя;

//		КонецЕсли;		
//	КонецЦикла;
//	Движения.ДанныеПоКладовщикам.Записать(Истина);
//	
//КонецПроцедуры

Процедура ЗаполнитьВесВТоварах() Экспорт
	
	Для й=0 по Товары.Количество()-1 Цикл
		Стр = Товары.Получить(й);
		ЗаполнитьВесВТабличнойЧасти(Стр);	
	КонецЦикла;
	
КонецПроцедуры

Процедура ДанныеПоПогрузкеПанельВесПропорциональноОбщ() Экспорт
	
	// Рассчитать общий вес	
	ОбщийВес 			= РассчитатьВесПоТоварам();
	ОбщийВесНетто		= РассчитатьВесПоТоварамНетто(Товары);
	КоличествоАвтоматом = 0;
	ВесВручную			= 0;
	
	Для й=0 по ДанныеПОПогрузке.Количество()-1 Цикл
		Стр = ДанныеПОПогрузке.Получить(й);
		Если Не(Стр.Вручную) Тогда
			КоличествоАвтоматом = КоличествоАвтоматом + 1;
		Иначе 
			ВесВручную			= ВесВручную + Стр.Вес;
		КонецЕсли;
	КонецЦикла;
	
	Для й=0 по ДанныеПоПогрузке.Количество()-1 Цикл
		Стр = ДанныеПоПогрузке.Получить(й);
		Если Не(Стр.Вручную) Тогда
			Стр.Вес = Окр((ОбщийВес-ВесВручную)/КоличествоАвтоматом,3,0);
			Стр.ВесНетто = Окр((ОбщийВесНетто)/ДанныеПОПогрузке.Количество(),3,0);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция РассчитатьВесПоТоварамТЧ()
	
	КоэффициентПерекатки		= Константы.КоэффициентПерекатки.Получить();
	КоэффициентПерекатки		= ?(КоэффициентПерекатки=0,1,КоэффициентПерекатки);
	
	Вес = 0;
	Для й=0 по Товары.Количество()-1 Цикл
		Стр 			= Товары.Получить(й);
		Номенклатура 	= Стр.Номенклатура;
		Количество		= Стр.Количество;
		Типоразмер 		= Номенклатура.Типоразмер;
		//НормаВеса 			= Справочники.НормыЗагрузки.НайтиПоРеквизиту("Типоразмер",Типоразмер); 
		НормаВеса 		= НайтиНормуЗагрузки(Номенклатура.ВидТовара,Типоразмер); 
		Если (НормаВеса <> Справочники.НормыЗагрузки.ПустаяСсылка()) Тогда 
			ВесСтр 	= НормаВеса.Вес*(Количество/(?(НормаВеса.КоэффициентКоличества=0,1,НормаВеса.КоэффициентКоличества)));
			ВесСтр 	= ВесСтр*?(Номенклатура.Импорт=Истина,НормаВеса.КоэффициентИмпорта,1);
			ВесСтр	= ВесСтр*КоэффициентПерекатки;			
			ВесСтр  = ВесСтр*ПолучитьКоэффициентВидаПродукции(Дата,Номенклатура.ВидТовара); 
			Вес 	= Вес + ВесСтр;	
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Вес;
КонецФункции

Функция НайтиНормуЗагрузки(ВидТовара,ТРазмер) 
	
	Запрос = новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ Ссылка из Справочник.НормыЗагрузки
	|Где ВидПродукции = &ВидПродукции И Типоразмер = &Типоразмер";
	
	Запрос.УстановитьПараметр("ВидПродукции",ВидТовара);
	Запрос.УстановитьПараметр("Типоразмер",ТРазмер);
	Выб = Запрос.Выполнить().Выбрать();
	
	Если (Выб.Следующий()) Тогда 
		Возврат Выб.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.НормыЗагрузки.ПустаяСсылка(); 
	
КонецФункции

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
