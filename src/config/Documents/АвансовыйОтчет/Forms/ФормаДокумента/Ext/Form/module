////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

Перем мКолонкиТовары, мКолонкиВозвратнаяТара, мКолонкиОплата, мКолонкиВыданныеАвансы, мКолонкиПрочее;
Перем мРазрешитьНулевыеЦеныВОпте;

// Автоотметка СкладОредра без учета заполненности ТЧ.
Перем мАвтоОтметкаСкладОрдера;
Перем мСкладИзШапки;

Перем мПечатнаяФормаПоУмолчанию;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Рассчитывает сумму взаиморасчетов в строке ТЧ "Оплата поставщикам".
//
Процедура РассчитатьСуммуВзаиморасчетов()

	СтрокаТабличнойЧасти = ЭлементыФормы.ОплатаПоставщикам.ТекущиеДанные;

	ВалютаВзаиморасчетов = СтрокаТабличнойЧасти.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	СтрокаТабличнойЧасти.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, ВалютаДокумента,
	                                ВалютаВзаиморасчетов, 
	                                КурсДокумента, СтрокаТабличнойЧасти.КурсВзаиморасчетов,
	                                КратностьДокумента,СтрокаТабличнойЧасти.КратностьВзаиморасчетов);

КонецПроцедуры // РассчитатьСуммуВзаиморасчетов()

// Выполняет необходимые действия при изменении договора в строке ТЧ "Оплата поставщикам".
//
Процедура ПриИзмененииДоговора()

	СтрокаТабличнойЧасти = ЭлементыФормы.ОплатаПоставщикам.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Сделка = Неопределено; // Для сделки нет значения по умолчанию в договоре
	
	СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(СтрокаТабличнойЧасти.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);

	СтрокаТабличнойЧасти.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаТабличнойЧасти.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

	РассчитатьСуммуВзаиморасчетов();
	
КонецПроцедуры // ПриИзмененииДоговора()

// Выполняет необходимые действия при изменении вида склада.
//
Процедура ПриИзмененииВидаСклада()

	// Определим текущий вид склада
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		ВидСклада = СкладОрдер.ВидСклада;
	Иначе
		ВидСклада = СкладОрдер.Склад.ВидСклада;
	КонецЕсли;

	// Оформление колонок таблицы
	ФлагАвтоОтметкиНезаполненого = Истина;

	Если (ВидСклада = Перечисления.ВидыСкладов.Оптовый ИЛИ ВидСклада = Неопределено) И мРазрешитьНулевыеЦеныВОпте Тогда
		ФлагАвтоОтметкиНезаполненого = Ложь;
	КонецЕсли;

	мКолонкиТовары.Сумма.АвтоОтметкаНезаполненного         = ФлагАвтоОтметкиНезаполненого;
	мКолонкиТовары.Цена.АвтоОтметкаНезаполненного          = ФлагАвтоОтметкиНезаполненого;
	мКолонкиВозвратнаяТара.Сумма.АвтоОтметкаНезаполненного = ФлагАвтоОтметкиНезаполненого;
	мКолонкиВозвратнаяТара.Цена.АвтоОтметкаНезаполненного  = ФлагАвтоОтметкиНезаполненого;

КонецПроцедуры // ПриИзмененииВидаСклада()

// Функция проверяет принадлежность операции к множеству торговых операций
// поступления по ордеру.
//
// Параметры:
//  ВидПоступления - ссылка на элемент перечисления, определяет вид поступления
//                документа.
//
// Возвращаемое значение:
//  Истина - принадлежит множеству торговых операций поступления
//           по ордеру;
//  Ложь   - не принадлежит
//
Функция ОперацияПоОрдеру(ВидПоступления)

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции // ОперацияПоОрдеру()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Если ТабличнаяЧасть = Товары Тогда
		Команда = "ПодборВТабличнуюЧастьТовары";
		ИмяТабличнойЧасти = "Товары";
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
		Команда = "ПодборВТабличнуюЧастьВозвратнаяТара";
		ИмяТабличнойЧасти = "Тара";
	КонецЕсли;

	СписокВидовПодбора = Новый СписокЗначений();
	СписокВидовПодбора.Добавить(,"По справочнику");
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);

	СтруктураПараметровПодбора.Вставить("ТипЦен"               , ТипЦен);

	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен", Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"          , ТабличнаяЧасть = Товары);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"           , Истина);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"    , ВалютаДокумента);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                     ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);
	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("КоличествоМест"  , КоличествоМест);
	ЗначениеВыбора.Свойство("Цена"            , Цена);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"           , Серия);
	
	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	Если ТабличнаяЧасть = Товары Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
		СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);
	Иначе
		СтруктураОтбора.Вставить("Номенклатура"              , Номенклатура);
	КонецЕсли;
	
	СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			
			// Рассчитать реквизиты табличной части.
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура        = Номенклатура;

		Если ТабличнаяЧасть = Товары Тогда
			СтрокаТабличнойЧасти.Количество          = Количество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения    = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент         = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;

			// Заполняем реквизиты табличной части.
			ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Пересчитаем цену в валюту документа.
			Цена = ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, КурсДокумента, КратностьДокумента, Дата);

			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                 СпособЗаполненияЦен,
			                                                 ТипЦен.ЦенаВключаетНДС,
			                                                 УчитыватьНДС,
			                                                 СуммаВключаетНДС,
			                                                 ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС,
			// ставки берутся из номенклатуры. Здесь цена тары в валюте документа
			СтрокаТабличнойЧасти.Количество          = Количество;
			Цена = ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, КурсДокумента, КратностьДокумента, Дата);
			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                     СпособЗаполненияЦен,
			                                     ТипЦен.ЦенаВключаетНДС,
			                                     УчитыватьНДС,
			                                     Истина,
			                                     ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС));

			// Рассчитать реквизиты табличной части.
			РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
	КонецЕсли;

	ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ТабличнаяЧастьИмя = ?(ТабличнаяЧасть = Товары, "Товары", "ВозвратнаяТара");
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);

	// Заполняем реквизиты табличной части.
	ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект); 

КонецПроцедуры

// Производит заполнение и установку необходимых полей при изменении характеристики товара в табличной части.
//
Процедура ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 

КонецПроцедуры // ПриИзмененииХарактеристикиНоменклатурыТоваров()

// Процедура в зависимости от вида поступления определяет тип для выбора СкладаОрдера
//
Процедура УстановитьТипСкладаОрдера()

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		Если ТипЗнч(СкладОрдер)<>Тип("СправочникСсылка.Склады") Тогда
			СкладОрдер = Справочники["Склады"].ПустаяСсылка();
		КонецЕсли;
		ЭлементыФормы.СкладОрдер.Подсказка = "В этом поле необходимо указать склад, на который необходимо оформить поступление товаров.";
	Иначе
		Если ТипЗнч(СкладОрдер)<>Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			СкладОрдер = Документы["ПриходныйОрдерНаТовары"].ПустаяСсылка();
		КонецЕсли;
		ЭлементыФормы.СкладОрдер.Подсказка = "В этом поле необходимо указать приходный ордер, по которому ранее было оформлено поступление товаров.";
	КонецЕсли;

КонецПроцедуры // УстановитьТипСкладаОрдера()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

Процедура УстановитьВидимостьДоступность()

	// Колонки налога показываем только тогда, когда его учитываем.
	Если УчитыватьНДС <> мКолонкиТовары.СтавкаНДС.Видимость Тогда
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СтавкаНДС, УчитыватьНДС);
	КонецЕсли;

	Если УчитыватьНДС <> мКолонкиТовары.СуммаНДС.Видимость Тогда
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СуммаНДС, УчитыватьНДС);
	КонецЕсли;

	Если УчитыватьНДС <> мКолонкиПрочее.СтавкаНДС.Видимость Тогда
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиПрочее.СтавкаНДС, УчитыватьНДС);
	КонецЕсли;

	Если УчитыватьНДС <> мКолонкиПрочее.СуммаНДС.Видимость Тогда
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиПрочее.СуммаНДС, УчитыватьНДС);
	КонецЕсли;
	
	ВидимостьПриходногоОрдера = (ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру);
	Если ВидимостьПриходногоОрдера <> мКолонкиТовары.ПриходныйОрдер.Видимость Тогда
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.ПриходныйОрдер, ВидимостьПриходногоОрдера);
	КонецЕсли;
	Если ВидимостьПриходногоОрдера <> мКолонкиВозвратнаяТара.ПриходныйОрдер.Видимость Тогда
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиВозвратнаяТара.ПриходныйОрдер, ВидимостьПриходногоОрдера);
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьАвтоотметку()

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		Если мСкладИзШапки Тогда
			Автоотметка = мАвтоОтметкаСкладОрдера;
		Иначе
			Автоотметка = мАвтоОтметкаСкладОрдера
			              И (Товары.Количество() > 0 ИЛИ ВозвратнаяТара.Количество() > 0);
		КонецЕсли;

		ЭлементыФормы.СкладОрдер.АвтоотметкаНезаполненного = Автоотметка;

		Если ЭлементыФормы.СкладОрдер.ОтметкаНезаполненного <> Автоотметка И ЗначениеНеЗаполнено(СкладОрдер) Тогда
			ЭлементыФормы.СкладОрдер.ОтметкаНезаполненного = Автоотметка;
		КонецЕсли;
	Иначе
		Автоотметка = Ложь;

		ЭлементыФормы.СкладОрдер.АвтоотметкаНезаполненного = Автоотметка;

		Если ЭлементыФормы.СкладОрдер.ОтметкаНезаполненного <> Автоотметка Тогда
			ЭлементыФормы.СкладОрдер.ОтметкаНезаполненного = Автоотметка;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	Перем ВсегоТовары;
	
	// Итого по отчету:
	ЭлементыФормы.ВсегоАвансов.Значение         = ФорматСумм(ВыданныеАвансы.Итог("Сумма"));
	ЭлементыФормы.НадписьВсегоАвансов.Заголовок = "Авансов, " + СокрЛП(ВалютаДокумента) + ":";

	// Вычислим,сумму по закупке.
	ВсегоТовары    = Товары.Итог("Сумма");
	ВсегоТоварыНДС = Товары.Итог("СуммаНДС");
	Если УчитыватьНДС 
	   И Не СуммаВключаетНДС Тогда
		ВсегоТовары = ВсегоТовары + ВсегоТоварыНДС;
	КонецЕсли;

	ВсегоПоОтчету = ВсегоТовары;

	// При изменении данных обновим суммы в подвале.
	// Суммы на невидимых страницах считать не будем.
	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы["Товары"] Тогда
		
		// При изменении данных обновим суммы в подвале.
		ЭлементыФормы.ВсегоНДС.Значение = ФорматСумм(ВсегоТоварыНДС);

		ВременнаяСтрока = "";

		Если (НЕ ЗначениеНеЗаполнено(ЭтотОбъект.ВалютаДокумента))
			И (ЭтотОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда

			ВременнаяСтрока = ВременнаяСтрока + КратностьДокумента + ВалютаДокумента
			+ " = " + КурсДокумента
			+ мВалютаРегламентированногоУчета + ", ";

		КонецЕсли;

		Если НЕ ЗначениеНеЗаполнено(ЭтотОбъект.ТипЦен) Тогда
			ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ЭтотОбъект.ТипЦен;
		Иначе
			ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
		КонецЕсли;

		ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

		Если ЗначениеНеЗаполнено(ЭтотОбъект.ВалютаДокумента) Тогда
			ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
		Иначе
			ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ЭтотОбъект.ВалютаДокумента) +"):";
		КонецЕсли;

		Если УчитыватьНДС Тогда

			ЭлементыФормы.НадписьВсегоНДС.Видимость = Истина;
			ЭлементыФормы.ВсегоНДС       .Видимость = Истина;
			
			Если СуммаВключаетНДС Тогда
				ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
			Иначе
				ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
				ВсегоПоОтчету = ВсегоПоОтчету; 
			КонецЕсли;
		Иначе
			ЭлементыФормы.НадписьВсегоНДС.Видимость = Ложь;
			ЭлементыФормы.ВсегоНДС       .Видимость = Ложь;
		КонецЕсли;
		
		ЭлементыФормы.Всего.Значение = ФорматСумм(Товары.Итог("Сумма"));

	КонецЕсли;

	ЭлементыФормы.ВсегоПоОтчету.Значение         = ФорматСумм(ВсегоПоОтчету + ОплатаПоставщикам.Итог("Сумма")
	                                              + Прочее.Итог("Сумма"));
	ЭлементыФормы.НадписьВсегоПоОтчету.Заголовок = "По отчету, " + СокрЛП(ВалютаДокумента) + ":";
	

КонецПроцедуры // ОбновитьПодвал()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

Процедура ПриИзмененииСерии()
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

КонецПроцедуры

// Процедура очищает Сделку в табличной части "ВозвратнаяТара".
//
Процедура ОчиститьСделкуВТабЧастиВозвратнаяТара(СтрокаТабличнойЧасти)

	Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Сделка) Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.ДоговорКонтрагента) Тогда
		ВедениеВзаиморасчетов = СтрокаТабличнойЧасти.ДоговорКонтрагента.ВедениеВзаиморасчетов;
		ТипЗначенияСделки     = ТипЗнч(СтрокаТабличнойЧасти.Сделка);

		Если ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			СтрокаТабличнойЧасти.Сделка = Неопределено;
		ИначеЕсли ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам
			И ТипЗначенияСделки <> Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			СтрокаТабличнойЧасти.Сделка = Неопределено;
		ИначеЕсли ТипЗначенияСделки <> Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			СтрокаТабличнойЧасти.Сделка = Неопределено;
		КонецЕсли;
	Иначе
		СтрокаТабличнойЧасти.Сделка = Неопределено;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если Не ЗначениеНеЗаполнено(ПараметрОснование) Тогда
		Если ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			Если ПараметрОснование.ВидОперации <> Перечисления.ВидыОперацийПриходныйОрдер.ОтПодотчетника Тогда
				Предупреждение("Авансовый отчет можно вводить только на основании приходного ордера от подотчетника!");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета, "Покупка");
		УстановитьНомерДокумента(ЭтотОбъект);

		Если Не ЗначениеНеЗаполнено(ПараметрОснование)
		   И ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			ОтражатьВУправленческомУчете = Истина;
		КонецЕсли;
	КонецЕсли;

	ПроверитьВидПоступленияПередачи(ЭтотОбъект, ЭтаФорма);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	// ТЧ Возвратная тара
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Цена");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("ЕдиницаХранения");

	// Установить ограничение - изменять видимоть колонок для таличной части 
	// "Возвратная тара".
	УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиВозвратнаяТара, СтруктураКолонок);

	// Установить колонки, видимостью которых пользователь управлять не может.
	// ТЧ Товары
	СтруктураКолонок.Вставить("СтавкаНДС");
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("ЕдиницаИзмерения");
	
	УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиТовары, СтруктураКолонок);

	//ТЧ Авансы 
	СтруктураКолонок.Очистить();
	СтруктураКолонок.Вставить("РасходныйКассовыйОрдер");
	СтруктураКолонок.Вставить("Сумма");
	
	УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиВыданныеАвансы, СтруктураКолонок);


	// ТЧ Оплата поставщикам
	СтруктураКолонок.Очистить();
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("Контрагент");
	СтруктураКолонок.Вставить("ДоговорКонтрагента");
	
	УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиОплата, СтруктураКолонок);

	// ТЧ прочее
	СтруктураКолонок.Очистить();
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("СтатьяЗатрат");
	
	УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиПрочее, СтруктураКолонок);

	// Заполнить подменю выбора печатных форм.
	СписокМакетов = ЭтотОбъект.ПолучитьСписокПечатныхФорм();
	УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати,
	                                       СписокМакетов,
	                                       Новый Действие("ДействияФормыДействиеВыбратьПечатнуюФормы"));

	// Установить печатную форму по умолчанию.
	УстановитьКнопкуПечати(ЭтотОбъект.Метаданные().Имя, ЭтаФорма, СписокМакетов, мПечатнаяФормаПоУмолчанию);

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидПоступления), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;

	// Установить в зависимости от вида поступления тип для выбора СкладаОрдера
	УстановитьТипСкладаОрдера();

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	УстановитьВидимостьСерииНоменклатуры(мКолонкиТовары);

	УстановитьВидимостьОбязательностьСклада(мКолонкиТовары, мКолонкиВозвратнаяТара, ЭлементыФормы.СкладОрдер, "Склад", "Поступление");

	//Запомним автоотметку поля шапки СкладОрдер
	мАвтоОтметкаСкладОрдера = ЭлементыФормы.СкладОрдер.АвтоОтметкаНезаполненного;

	УстановитьВидимостьДоступность();
	ПриИзмененииВидаСклада();
	УстановитьАвтоотметку();

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;
    
	//БАЛАНС (04.12.2007)                       
	//
	мПроведениеИзФормы = Истина;
	
	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 

	
КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	ОбновитьПодвал();

	// Подсчитаем количество строк в табличных частях.
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если СтраницаПанели.Имя = "Тара" Тогда
			СтраницаПанели.Заголовок = "Тара (" + ЭтотОбъект.ВозвратнаяТара.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "Товары" Тогда
			СтраницаПанели.Заголовок = "Товары (" + ЭтотОбъект.Товары.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "Авансы" Тогда
			СтраницаПанели.Заголовок = "Авансы (" + ЭтотОбъект.ВыданныеАвансы.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "ОплатаПоставщикам" Тогда
			СтраницаПанели.Заголовок = "Оплата (" + ЭтотОбъект.ОплатаПоставщикам.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "Прочее" Тогда
			СтраницаПанели.Заголовок = "Прочее (" + ЭтотОбъект.Прочее.Количество() + " поз.)";
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);

		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
			ОбработкаПодбора(ВозвратнаяТара, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
		Если ВыданныеАвансы.Итог("Сумма")= 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.РасчетныйДокумент КАК Документ,
		|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(&Дата, ФизЛицо = &ФизЛицо) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
		|ГДЕ
		|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток >0";
		
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
		
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество()>0 Тогда
			ответ = вопрос("У сотрудника есть задолженность перед организацией. Хотите связать Авансовый отчет с выданными авансами?",РежимДиалогаВопрос.ДаНет,0);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Отказ = Истина;
				возврат;
			конецЕсли;	
		конецЕсли;
	конецЕсли;

	яштСменаПользователя(ЭтотОбъект, ЭтаФорма, глТекущийПользователь);
	СформироватьСчетаФактурыПолученныеДляСтрокДокумента();
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(Строка(ВидПоступления), ЭтотОбъект, ЭтаФорма);
	
	ОбновитьСсылкиСчетовФактур();
	
КонецПроцедуры // ПослеЗаписи()

// Обработчик внешнего события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	Если глТорговоеОборудование <> Неопределено Тогда
		Если Событие = "BarCodeValue" Тогда

			ИмяТекущейСтраницы = ЭтаФорма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
			Валюта             = ВалютаДокумента;
			Если ИмяТекущейСтраницы = "Товары" Тогда

				Команда           = "ПодборВТабличнуюЧастьТовары";
				ИмяТабличнойЧасти = "Товары";

			ИначеЕсли ИмяТекущейСтраницы = "Тара" Тогда

				Команда           = "ПодборВТабличнуюЧастьВозвратнаяТара";
				ИмяТабличнойЧасти = "ВозвратнаяТара";

			Иначе

				// Ничего не надо делать
				Возврат;

			КонецЕсли;

			ПредставлениеДок = Метаданные().Представление();
			ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);

			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("Команда"              , Команда);
			СтруктураПараметров.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
			СтруктураПараметров.Вставить("ТипЦен"               , ТипЦен);
			СтруктураПараметров.Вставить("СпособЗаполненияЦен"  , Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);
			СтруктураПараметров.Вставить("ВалютаЦены"           , Валюта);
			СтруктураПараметров.Вставить("ИмяТабличнойЧасти"    , ИмяТабличнойЧасти);

			глТорговоеОборудование.ОбработатьВнешнееСобытиеОтСканераДляФормы(ЭтаФорма, ЭтотОбъект, СтруктураПараметров, Данные);

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ, РЕАЛИЗУЮЩИЕ ФУНКЦИИ СОЗДАНИЯ СЧЕТОВ-ФАКТУР

// Процедура вызывается сразу перед записью документа.
// выполняется поиск существующего счета-фактуры  по заданным 
// параметрам.
Функция НайтиСчетФактуруВСписке(ТаблицаСФ, СтрокаДокумента)
	
	ДокСФ = Неопределено;
	
	Для Каждого СтрокаСФ Из ТаблицаСФ Цикл
		// Поиск существующего счета-фактуры выполняется по его номеру дате и контрагенту.
		Если (Врег(СокрЛП(СтрокаСФ.НомерВходящегоДокумента)) = Врег(СокрЛП(СтрокаДокумента.НомерВходящегоДокумента)))
		   и ( Врег(СокрЛП(СтрокаСФ.Поставщик)) = Врег(СокрЛП(СтрокаДокумента.Поставщик)) или (СтрокаСФ.Поставщик = Неопределено) ) Тогда
			// найден подходящий счет-фактура
			ДокСФ = СтрокаСФ.Ссылка.ПолучитьОбъект();
			Если ТаблицаСФ.Колонки.Найти("Использован") <> Неопределено Тогда
				СтрокаСФ.Использован = Истина;
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДокСФ;
		
КонецФункции // НайтиСчетФактуруВСписке()

// Процедура вызывается сразу же после записи документа.
// Формирует перечень документов счет-фактура полученный, введенных на 
// основании текущего документа "Авансовый отчет".
//
Функция ПолучитьТаблицуПодчиненныхСчетовФактур(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Запрос.Текст = "ВЫБРАТЬ
					|	СчетФактураТовары.Ссылка КАК Ссылка,
					|	СчетФактураТовары.НомерВходящегоДокумента,
					|	СчетФактураТовары.ДатаВходящегоДокумента,
					|	АвансовыйОтчетТовары.Поставщик,
					|	АвансовыйОтчетТовары.НомерВходящегоДокумента КАК НомерВходящегоДокументаАО,
					|	АвансовыйОтчетТовары.ДатаВходящегоДокумента КАК ДатаВходящегоДокументаАО,
					|	АвансовыйОтчетПрочее.Поставщик КАК ПоставщикПрочее,
					|	АвансовыйОтчетПрочее.НомерВходящегоДокумента КАК НомерВходящегоДокументаПрочее,
					|	АвансовыйОтчетПрочее.ДатаВходящегоДокумента КАК ДатаВходящегоДокументаПрочее,
					|	АвансовыйОтчетПрочее.Ссылка КАК СсылкаПрочее,
					|	АвансовыйОтчетТовары.Ссылка КАК СсылкаТовары
					|ИЗ
					|	Документ.СчетФактураПолученный КАК СчетФактураТовары
					|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
					|		ПО СчетФактураТовары.Ссылка = АвансовыйОтчетТовары.СчетФактура
					|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее
					|		ПО СчетФактураТовары.Ссылка = АвансовыйОтчетПрочее.СчетФактура

					|ГДЕ
					|	СчетФактураТовары.ДокументОснование.Ссылка = &ДокументОснование

					|УПОРЯДОЧИТЬ ПО
					|	Ссылка";
	
	РезТаблица = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрРезТаблица Из РезТаблица Цикл
		Если (СтрРезТаблица.СсылкаТовары = Null)
		   и (СтрРезТаблица.СсылкаПрочее <> Null) Тогда
		   // Перебрасываем значения в основные колонки
		   СтрРезТаблица.Поставщик = СтрРезТаблица.ПоставщикПрочее;
		   СтрРезТаблица.НомерВходящегоДокументаАО = СтрРезТаблица.НомерВходящегоДокументаПрочее;
		   СтрРезТаблица.ДатаВходящегоДокументаАО = СтрРезТаблица.ДатаВходящегоДокументаПрочее;
		   
		КонецЕсли;
	КонецЦикла;	
	
	Возврат РезТаблица;
	
КонецФункции // ПолучитьТаблицуПодчиненныхСчетовФактур()

// Процедура вызывается сразу же после записи документа.
// Выполняется сопоставление строк документа и соответствующих им
// полученных счетов - факутр. Результаты данного сопоставления
// фиксируются в строках документа, в реквизите "СчетФакутра"
//
Процедура СформироватьСчетаФактурыПолученныеДляСтрокДокумента()

	// В данной таблице содержится информация о том, какие счета-фактуры уже были
	// выписаны ранее на основании данных документов
	ТаблицаСФ = ПолучитьТаблицуПодчиненныхСчетовФактур(Ссылка);
	ТаблицаСФ.Колонки.Добавить("Использован");
	ТаблицаСФ.ЗаполнитьЗначения(Ложь, "Использован");
	
	СписокТабЧастей = Новый СписокЗначений;
	СписокТабЧастей.Добавить("Товары");
	СписокТабЧастей.Добавить("Прочее");
	
	Для Каждого ТабЧасть Из СписокТабЧастей Цикл
		ТаблицаДокумента = Новый ТаблицаЗначений;
		ТаблицаДокумента.Колонки.Добавить("Поставщик");
		ТаблицаДокумента.Колонки.Добавить("НомерВходящегоДокумента");
		ТаблицаДокумента.Колонки.Добавить("ДатаВходящегоДокумента");
		ТаблицаДокумента.Колонки.Добавить("СчетФактура");
		ТаблицаДокумента.Колонки.Добавить("СтавкаНДС");
		ТаблицаДокумента.Колонки.Добавить("СуммаБезНДС");
		ТаблицаДокумента.Колонки.Добавить("НДС");
			
		// подготовим таблицу документа
		Для Каждого СтрокаДок Из ЭтотОбъект[ТабЧасть.Значение] Цикл
			СтрокаТаблицыДок = ТаблицаДокумента.Добавить();
			СтрокаТаблицыДок.Поставщик = 		 СтрокаДок.Поставщик;
			СтрокаТаблицыДок.НомерВходящегоДокумента = СтрокаДок.НомерВходящегоДокумента;
			СтрокаТаблицыДок.ДатаВходящегоДокумента =  СтрокаДок.ДатаВходящегоДокумента;
			СтрокаТаблицыДок.СчетФактура = 	  	 СтрокаДок.СчетФактура;
			СтрокаТаблицыДок.СтавкаНДС = 	 	 СтрокаДок.СтавкаНДС;
			
			Если СуммаВключаетНДС Тогда
				СтрокаТаблицыДок.СуммаБезНДС = СтрокаДок.Сумма - СтрокаДок.СуммаНДС;
				СтрокаТаблицыДок.НДС = 		   СтрокаДок.СуммаНДС;
			Иначе
				СтрокаТаблицыДок.СуммаБезНДС = СтрокаДок.Сумма;
				СтрокаТаблицыДок.НДС = 		   СтрокаДок.СуммаНДС;
			КонецЕсли;
			
		КонецЦикла;
			
		// В данной таблице содержится информация о том, какие счета-фактуры необходимо выписать
		ТаблицаДокумента.Свернуть("Поставщик, НомерВходящегоДокумента, ДатаВходящегоДокумента, СчетФактура, СтавкаНДС", "СуммаБезНДС, НДС");
			
		Для Каждого СтрокаТаблицыДок Из ТаблицаДокумента Цикл
			Если (СтрокаТаблицыДок.Поставщик = Неопределено)
			 или (ПустаяСтрока(СтрокаТаблицыДок.НомерВходящегоДокумента)) Тогда
			    // В строке авансового отчета не указаны параметры для создания счета-фактуры
				Продолжить;
			КонецЕсли;
			
			// Поиск существующего документа счет-фактура полученный
			ДокСФ = НайтиСчетФактуруВСписке(ТаблицаСФ, СтрокаТаблицыДок);
			
			Если ДокСФ = Неопределено Тогда
				// Если существующий счет-фактура не найден, нужно создать новую счет-фактуру
				ДокСФ = Документы.СчетФактураПолученный.СоздатьДокумент();
				
				ДокСФ.ДокументОснование = Ссылка;
				
				ДокСФ.Дата = Дата;
				ДокСФ.УстановитьНовыйНомер(Организация.Префикс);
				
				ДокСФ.ДатаВходящегоДокумента =  СтрокаТаблицыДок.ДатаВходящегоДокумента;
				ДокСФ.НомерВходящегоДокумента = СтрокаТаблицыДок.НомерВходящегоДокумента;
				
				ДокСФ.Комментарий = "Создан автоматически на основании авансового отчета";
				ДокСФ.Записать();
				
				НовыйСФ = Истина;
				// Эту новую счет-фактуру нужно зафиксировать в таблице счетов-фактур
				СтрокаСФ = ТаблицаСФ.Добавить();
				
			Иначе
				НовыйСФ = Ложь;
				// Информацию об этом счете-фактуре нужно обновить в таблице счетов-фактур
				СтрокаСФ = ТаблицаСФ.Найти(ДокСФ.Ссылка, "Ссылка");
				
			КонецЕсли;
			
			ДокСФ.ПометкаУдаления = Ложь;
			ДокСФ.Записать();
			
			Если НовыйСФ Тогда
				СтрокаСФ.Поставщик = СтрокаТаблицыДок.Поставщик;
				СтрокаСФ.НомерВходящегоДокумента =  ДокСФ.НомерВходящегоДокумента;
				СтрокаСФ.ДатаВходящегоДокумента = ДокСФ.ДатаВходящегоДокумента;
				СтрокаСФ.Ссылка = ДокСФ.Ссылка;
			КонецЕсли;
			
		КонецЦикла;
	
		// далее необходимо прописать ссылки на созданные счета фактуры на аванс в строки документа
		Для Каждого СтрокаДок Из ЭтотОбъект[ТабЧасть.Значение] Цикл
			ДокСФ = НайтиСчетФактуруВСписке(ТаблицаСФ, СтрокаДок);
			Если ДокСФ <> Неопределено Тогда
				// Если есть счет-фактура - регистрируем ее в строке табличной части
				СтрокаДок.СчетФактура = ДокСФ.Ссылка;
			Иначе
				// Для строки не создана счет-фактура
				СтрокаДок.СчетФактура = Неопределено;
			КонецЕсли;
		КонецЦикла;
	
	КонецЦикла;

	// удаляем незадействованные счета-фактуры
	Для Каждого СтрокаСчета Из ТаблицаСФ Цикл
		ТекСФ = СтрокаСчета.Ссылка.ПолучитьОбъект();
		Если НЕ СтрокаСчета.Использован Тогда
			ТекСФ.УстановитьПометкуУдаления(Истина);
			ТекСФ.Записать();
		ИначеЕсли ТекСФ.ПометкаУдаления = Истина Тогда
			ТекСФ.УстановитьПометкуУдаления(Ложь);
			ТекСФ.Записать();
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры // СформироватьСчетаФактурыНаАвансДляСтрокДокумента()

// Процедура "просматривает" строки табличных частей документа.
// и для тех строк, в которых указан счет-фактура полученый,
// обновляет ссылку на текущий документ "Авансовый отчет"
// в этом счете - фактуре.
//
Процедура ОбновитьСсылкиСчетовФактур()

	СписокТабЧастей = Новый СписокЗначений;
	СписокТабЧастей.Добавить("Товары");
	СписокТабЧастей.Добавить("Прочее");
	
	Для Каждого ТабЧасть Из СписокТабЧастей Цикл
		Для Каждого СтрокаДок Из ЭтотОбъект[ТабЧасть.Значение] Цикл
			
			Если НЕ СтрокаДок.СчетФактура.Пустая() Тогда
				ДокСФ = СтрокаДок.СчетФактура.ПолучитьОбъект();
				Если ДокСФ.ДокументОснование <> Ссылка Тогда
					// Необходимо модифицировать ссылку в счете-фактуре
					ДокСФ.ДокументОснование = Ссылка;
					ДокСФ.Записать();
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры // ОбновитьСсылкиСчетовФактур()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик события "ПриСменеСтраницы" основной панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)

	ОбновитьПодвал();
	
КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Возвратная тара", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеПодбор(Кнопка)

	ДействиеПодбор(ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеПодбор()

// Процедура вызывается при выборе пункта меню "Заполнить по остаткам"по кнопке "Заполнить" командной панели 
// табличного поля "ВыданныеАвансы", вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельВыданныеАвансыЗаполнитьПоОстаткам(Кнопка)

	Если ВыданныеАвансы.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		ВыданныеАвансы.Очистить();
	КонецЕсли;

	ЭтотОбъект.ЗаполнитьВыданныеАвансы();

КонецПроцедуры // КоманднаяПанельВыданныеАвансыЗаполнитьПоОстаткам()

// Процедура вызывается при выборе пункта меню "Распределить сумму по РКО"по кнопке "Заполнить" командной панели 
// табличного поля "ВыданныеАвансы", вызывает сервисный механизм для распределения суммы по РКО.
//
Процедура КоманднаяПанельВыданныеАвансыРаспределитьСуммуПоРКО(Кнопка)
	
	Если Проведен Тогда
		Предупреждение("Операция может выполняться только для непроведенного документа!");
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	Запрос.УстановитьПараметр("СписокРКО", ВыданныеАвансы.ВыгрузитьКолонку("РасходныйКассовыйОрдер"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.РасчетныйДокумент,
	|	Остатки.СуммаВзаиморасчетовОстаток
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(,
	|				ФизЛицо  = &ФизЛицо
	|				И РасчетныйДокумент ССЫЛКА Документ.РасходныйКассовыйОрдер
	|				И РасчетныйДокумент В (&СписокРКО)
	|				И Валюта = &ВалютаДокумента) КАК Остатки
	|";

	ТаблицаОстатковВзаиморасчетов = Запрос.Выполнить().Выгрузить();

	СуммаПогашения = Товары.Итог("Сумма") + ОплатаПоставщикам.Итог("Сумма") + Прочее.Итог("Сумма");
	Для Каждого СтрокаВыданныеАвансы Из ВыданныеАвансы Цикл
		Если СуммаПогашения = 0 Тогда
			СтрокаВыданныеАвансы.Сумма = 0;
		Иначе
			СтрокаТаблицыОстатковВзаиморасчетов = ТаблицаОстатковВзаиморасчетов.Найти(СтрокаВыданныеАвансы.РасходныйКассовыйОрдер, "РасчетныйДокумент");
			Если СтрокаТаблицыОстатковВзаиморасчетов = Неопределено Тогда
				СтрокаВыданныеАвансы.Сумма = 0;
			Иначе
				СтрокаВыданныеАвансы.Сумма = Мин(СуммаПогашения, СтрокаТаблицыОстатковВзаиморасчетов.СуммаВзаиморасчетовОстаток);
				СуммаПогашения = СуммаПогашения - СтрокаВыданныеАвансы.Сумма;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если СуммаПогашения > 0 Тогда
		Предупреждение("Сумма в "+СуммаПогашения+СокрЛП(ВалютаДокумента)+" осталась нераспределенной!");
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельВыданныеАвансыРаспределитьСуммуПоРКО()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);
	СтруктураРеквизитовДокумента.Вставить("НДСВключенВСтоимость");

	ТекущаяВалютаДокумента = ВалютаДокумента;

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            , "Товары");
	Если СтруктураЗначений <> Неопределено Тогда
		ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "Товары", мВалютаРегламентированногоУчета, , СтруктураЗначений);

		НовыйСуммаВключаетНДС  = СтруктураЗначений.НовыйСуммаВключаетНДС;
		СтарыйСуммаВключаетНДС = СтруктураЗначений.ТекущийСуммаВключаетНДС;
		ПересчитатьСумму       = НЕ (НовыйСуммаВключаетНДС = СтарыйСуммаВключаетНДС);

		Для каждого СтрокаТабличнойЧасти Из Прочее Цикл

			Если ПересчитатьСумму Тогда
				Если НовыйСуммаВключаетНДС Тогда
					СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
				Иначе
					СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаНДС;
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;

		Если СтруктураЗначений.ТекущийТипЦен <> СтруктураЗначений.НовыйТипЦен Тогда
			ОбновитьФормуПодбора("ТипЦен");
		КонецЕсли;
	КонецЕсли;

	Если (ТекущаяВалютаДокумента <> ВалютаДокумента) И (ВыданныеАвансы.Количество() > 0) Тогда
		Ответ = Вопрос("Изменилась валюта документа. Погашаемые данным документом авансы должны быть выписаны в той же валюте.
		|Очистить табличную часть ""Авансы""?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			ВыданныеАвансы.Очистить();

		КонецЕсли;
	КонецЕсли;

	УстановитьВидимостьДоступность();

КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()

// Процедура вызывается при пункта "Заполнить по приходному ордеру" подменю
// кнопки "Заполнить" командной панели табличного поля "Товары", вызывает 
// сервисный механизм заполнения ТЧ по приходному ордеру
//
Процедура КоманднаяПанельТоварыЗаполитьПоПриходномуОрдеру(Кнопка)

	Если ВидПоступления <> Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		Предупреждение("Заполнять на основании приходного ордера можно только авансовый отчет по ордеру!");
		Возврат;
	КонецЕсли;	

	ФормаВыбора = Документы.ПриходныйОрдерНаТовары.ПолучитьФормуВыбора();
	ФормаВыбора.Заголовок = "Выберите приходный ордер для заполнения таблицы закупок";
	ФормаВыбора.РежимВыбора = Истина;

	ФормаВыбора.Отбор.ФизЛицо.Значение          = ФизЛицо;
	ФормаВыбора.Отбор.ФизЛицо.Использование     = Истина;
	
	ПриходныйОрдерНаТовары = ФормаВыбора.ОткрытьМодально();
   	Если ЗначениеНеЗаполнено(ПриходныйОрдерНаТовары) Тогда
		Возврат;
	КонецЕсли;

	Если Товары.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		Товары.Очистить();
	КонецЕсли;
	
	ЗаполнитьТоварыПоОснованию(ПриходныйОрдерНаТовары);

КонецПроцедуры

// Процедура вызывается при пункта "Заполнить по приходному ордеру" подменю
// кнопки "Заполнить" командной панели табличного поля "Товары", вызывает 
// сервисный механизм заполнения ТЧ по приходному ордеру
//
Процедура КоманднаяПанельТоварыДобавитьПоПриходномуОрдеру(Кнопка)

	Если ВидПоступления <> Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		Предупреждение("Заполнять на основании приходного ордера можно только авансовый отчет по ордеру!");
		Возврат;
	КонецЕсли;	

	ФормаВыбора = Документы.ПриходныйОрдерНаТовары.ПолучитьФормуВыбора();
	ФормаВыбора.Заголовок = "Выберите приходный ордер для заполнения таблицы закупок";
	ФормаВыбора.РежимВыбора = Истина;

	ФормаВыбора.Отбор.ФизЛицо.Значение          = ФизЛицо;
	ФормаВыбора.Отбор.ФизЛицо.Использование     = Истина;
	
	ПриходныйОрдерНаТовары = ФормаВыбора.ОткрытьМодально();
   	Если ЗначениеНеЗаполнено(ПриходныйОрдерНаТовары) Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьТоварыПоОснованию(ПриходныйОрдерНаТовары);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	НапечататьДокументПоУмолчанию(ЭтотОбъект, глТекущийПользователь, мПечатнаяФормаПоУмолчанию);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
//
Процедура ДействияФормыДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = Кнопка.Текст;
		СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		СписокМакетов = ПолучитьСписокПечатныхФорм();
		СтрокаМакетаВСписке = СписокМакетов.НайтиПоЗначению(Кнопка.Имя);
		Если СтрокаМакетаВСписке <> Неопределено Тогда
			Печать(СтрокаМакетаВСписке.Значение);
			СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
			СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;			
			
		Иначе
			СсылкаВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Кнопка.Имя, "_", "-")));
			Печать(СсылкаВнешнейФормы);
			СтруктураМакета.Макет = СсылкаВнешнейФормы;
			СтруктураМакета.ПредставлениеМакета = Кнопка.Текст;
		КонецЕсли;		
		
		мПечатнаяФормаПоУмолчанию = СтруктураМакета.Макет;
		СохранитьТекущуюКнопкуПечати(ЭтотОбъект.Метаданные().Имя, СтруктураМакета);
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеВыбратьПечатнуюФормы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)
	Перем ФлагИзмененияКурса;

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета, ФлагИзмененияКурса);

	// Если изменился курс пересчитаем оплату
	Если ФлагИзмененияКурса Тогда
		Для каждого СтрокаТаблицы Из ОплатаПоставщикам Цикл
			Если НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
				ВалютаДоговора                        = СтрокаТаблицы.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				СтруктураВалюты                       = ПолучитьКурсВалюты(ВалютаДоговора, Дата);
				СтрокаТаблицы.КурсВзаиморасчетов      = СтруктураВалюты.Курс;
				СтрокаТаблицы.КратностьВзаиморасчетов = СтруктураВалюты.Кратность;
				СтрокаТаблицы.СуммаВзаиморасчетов     = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма,
				                                        ВалютаДокумента, ВалютаДоговора,
				                                        КурсДокумента, СтрокаТаблицы.КурсВзаиморасчетов,
				                                        КратностьДокумента,СтрокаТаблицы.КратностьВзаиморасчетов);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = Элемент.Значение;
	ОтражатьВНалоговомУчете = Элемент.Значение;

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьНомерДокумента(ЭтотОбъект);

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "ФизЛицо".
// Процедура очищает все табличные части при изменении ФизЛица.
//
Процедура ФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если ВыбранноеЗначение <> ФизЛицо Тогда

		// Проверим, заполены ли табличные части документа.
		ДокументЗаполнен =     (ЭлементыФормы.ВыданныеАвансы   .Количество() > 0) 
		                   Или (ЭлементыФормы.Товары       .Количество() > 0) 
		                   Или (ЭлементыФормы.ВозвратнаяТара   .Количество() > 0) 
		                   Или (ЭлементыФормы.ОплатаПоставщикам.Количество() > 0) 
		                   Или (ЭлементыФормы.Прочее           .Количество() > 0);

		// При изменении подотчетника надо почистить все ТЧ, это были данные другого лица.
		Если ДокументЗаполнен Тогда

			Ответ = Вопрос("При изменении подотчетника все табличные части документа будут очищены."
			               + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

			Если Ответ = КодВозвратаДиалога.Да Тогда

				ЭлементыФормы.ВыданныеАвансы   .Очистить();
				ЭлементыФормы.Товары       .Очистить();
				ЭлементыФормы.ВозвратнаяТара   .Очистить();
				ЭлементыФормы.ОплатаПоставщикам.Очистить();
				ЭлементыФормы.Прочее           .Очистить();

			Иначе 
				СтандартнаяОбработка = Ложь; // отказ от выбора
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли; 

КонецПроцедуры // ФизЛицоОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода СкладОрдер
//
Процедура СкладОрдерПриИзменении(Элемент)

	УстановитьЗаголовокФормыДокумента(Строка(ВидПоступления), ЭтотОбъект, ЭтаФорма);

	// Установить тип реквизита для ввода (если, например, поле очистили)
	УстановитьТипСкладаОрдера();

	УстановитьВидимостьДоступность();
	ПриИзмененииВидаСклада();

КонецПроцедуры // СкладОрдерПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода СкладОрдер
//
Процедура СкладОрдерНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Определить в зависимости от вида поступления тип для выбора СкладаОрдера
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда

		НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, СкладОрдер, ВидСравнения.НеРавно, СтандартнаяОбработка);

	Иначе

		СтандартнаяОбработка = Ложь;

		// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
		// значение было присвоено стандартно.
		ФормаВыбора = Документы.ПриходныйОрдерНаТовары.ПолучитьФормуВыбора(,Элемент,);

		// Оставим для выбора только нужные ордера
		ФормаВыбора.ДокументСписок.Отбор.ВидОперации.Значение      = Перечисления.ВидыОперацийПриходныйОрдер.ОтПодотчетника;
		ФормаВыбора.ДокументСписок.Отбор.ВидОперации.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ВидОперации.Доступность = Ложь;

		ФормаВыбора.Открыть();

	КонецЕсли;

КонецПроцедуры // СкладОрдерНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ВидПоступления".
//
Процедура ВидПоступленияПриИзменении(Элемент)

	УстановитьТипСкладаОрдера();
	ПриИзмененииВидаСклада();
	УстановитьАвтоотметку();
	УстановитьВидимостьДоступность();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка ОтражатьВУправленческомУчете
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)

	ПроверитьВидПоступленияПередачи(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВЫДАННЫЕ АВАНСЫ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "ВыданныеАвансы". Формирует данные в колонках ТЧ "Сумма РКО", "Валюта РКО", "Выдано".
//
Процедура ВыданныеАвансыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если Не ЗначениеНеЗаполнено(ДанныеСтроки.РасходныйКассовыйОрдер) Тогда

		Если мКолонкиВыданныеАвансы.СуммаРКО.Видимость Тогда
			ОформлениеСтроки.Ячейки.СуммаРКО .ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.СуммаРКО. Текст           = ФорматСумм(ДанныеСтроки.РасходныйКассовыйОрдер.СуммаДокумента);
		КонецЕсли;

		Если мКолонкиВыданныеАвансы.ВалютаРКО.Видимость Тогда
			ОформлениеСтроки.Ячейки.ВалютаРКО.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.ВалютаРКО.Текст           = ФорматСумм(ДанныеСтроки.РасходныйКассовыйОрдер.ВалютаДокумента);
		КонецЕсли;

		Если НЕ ЗначениеНеЗаполнено(ДанныеСтроки.РасходныйКассовыйОрдер) Тогда
			Если мКолонкиВыданныеАвансы.Выдано.Видимость
			   И ДанныеСтроки.РасходныйКассовыйОрдер.РасшифровкаПлатежа.Количество() > 0 Тогда
				ОформлениеСтроки.Ячейки.Выдано.ОтображатьТекст = Истина;
				ОформлениеСтроки.Ячейки.Выдано.Текст           = ФорматСумм(ДанныеСтроки.РасходныйКассовыйОрдер.РасшифровкаПлатежа[0].СуммаВзаиморасчетов);
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ВыданныеАвансыПриВыводеСтроки()

// Процедура - обработчик события "НачалоВыбора" поля ввода РКО
// в строке табличной части "ВыданныеАвансы".
//
Процедура ВыданныеАвансыРасходныйКассовыйОрдерНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Надо отфильтровать список РКО по физ. лицу и валюте взаиморасчетов.
	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Документы.РасходныйКассовыйОрдер.ПолучитьФормуВыбора(,Элемент,);
	
	// Надо отфильтровать список РКО по физ. лицу (если есть необходимость) и валюте взаиморасчетов подотчетника
	Если Не ЗначениеНеЗаполнено(ФизЛицо) Тогда
		ФормаВыбора.Отбор.Контрагент.Значение      = ФизЛицо;
		ФормаВыбора.Отбор.Контрагент.Использование = Истина;
	КонецЕсли;
	
	ФормаВыбора.Отбор.ВалютаВзаиморасчетовПодотчетника.Значение      = ВалютаДокумента;
	ФормаВыбора.Отбор.ВалютаВзаиморасчетовПодотчетника.Использование = Истина;

	ФормаВыбора.Открыть();

КонецПроцедуры // ВыданныеАвансыРасходныйКассовыйОрдерНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода РКО
// в строке табличной части "ВыданныеАвансы".
//
Процедура ВыданныеАвансыРасходныйКассовыйОрдерПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВыданныеАвансы.ТекущиеДанные;
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.РасходныйКассовыйОрдер.СуммаДокумента;

	// Если ФизЛицо еще не было выбрано, заполним его по РКО
	Если Не ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.РасходныйКассовыйОрдер)
	   И ЗначениеНеЗаполнено(ФизЛицо) Тогда
		ФизЛицо = СтрокаТабличнойЧасти.РасходныйКассовыйОрдер.Контрагент;
	КонецЕсли;

КонецПроцедуры // ВыданныеАвансыРасходныйКассовыйОрдерПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ЗАКУПКА ТОВАРОВ

// Процедура - обработчик события "ПриВыводеСтроки" поля табличной части "Товары".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если НЕ ЗначениеНеЗаполнено(ДанныеСтроки.СерияНоменклатуры) Тогда
		Если мКолонкиТовары.НомерГТД.Видимость Тогда
			ОформлениеСтроки.Ячейки.НомерГТД.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.НомерГТД.Текст = ДанныеСтроки.СерияНоменклатуры.НомерГТД;
		КонецЕсли;
		Если мКолонкиТовары.СтранаПроисхождения.Видимость	Тогда
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.Текст = ДанныеСтроки.СерияНоменклатуры.СтранаПроисхождения;
		КонецЕсли;
	КонецЕсли;

	ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" поля табличной части "Товары"
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
		ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования" поля табличной части "Товары"
//
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УстановитьАвтоотметку();
КонецПроцедуры //ТоварыПриОкончанииРедактирования()

// Процедура - обработчик события "ПослеУдаления" поля табличной части "Товары".
//
Процедура ТоварыПослеУдаления(Элемент)
	УстановитьАвтоотметку();
КонецПроцедуры //ТоварыПослеУдаления()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении возвратной тары.
	ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти);

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода серии номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыСерияНоменклатурыПриИзменении(Элемент)

	ПриИзмененииСерии();

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	РассчитатьКоличествоТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаНДСПриИзменении(Элемент)

КонецПроцедуры // ТоварыСуммаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Суммы.
	ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект, глТекущийПользователь);

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ОПЛАТА

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента
// в строке табличной части "Оплата поставщикам".
//
Процедура ОплатаПоставщикамКонтрагентПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ОплатаПоставщикам.ТекущиеДанные;
	СтрокаТабличнойЧасти.ДоговорКонтрагента = СтрокаТабличнойЧасти.Контрагент.ОсновнойДоговорКонтрагента;

	ПриИзмененииДоговора();

КонецПроцедуры // ОплатаПоставщикамКонтрагентПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода договора контрагента
// в строке табличной части "Оплата поставщикам".
//
Процедура ОплатаПоставщикамДоговорКонтрагентаПриИзменении(Элемент)
	ПриИзмененииДоговора();
КонецПроцедуры // ОплатаПоставщикамДоговорКонтрагентаПриИзменении

// Процедура - обработчик события "НачалоВыбора" поля ввода сделки
// в строке табличной части "Оплата поставщикам".
//
Процедура ОплатаПоставщикамСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти = ЭлементыФормы.ОплатаПоставщикам.ТекущиеДанные;
	НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, 
	                     СтрокаТабличнойЧасти.ДоговорКонтрагента, СтрокаТабличнойЧасти.Сделка, СтандартнаяОбработка, 
	                     "Приход","ЗаказПоставщику");

КонецПроцедуры // ОплатаПоставщикамСделкаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Оплата поставщикам".
//
Процедура ОплатаПоставщикамСуммаПриИзменении(Элемент)

	// Надо пересчичать сумму взаиморасчетов.
	РассчитатьСуммуВзаиморасчетов();

КонецПроцедуры // ОплатаПоставщикамСуммаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "КурсВзаиморасчетов"
// в строке табличной части "Оплата поставщикам".
//
Процедура ОплатаПоставщикамКурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	СтрокаТабличнойЧасти = ЭлементыФормы.ОплатаПоставщикам.ТекущиеДанные;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаТабличнойЧасти.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаТабличнойЧасти.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаТабличнойЧасти.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаТабличнойЧасти.КурсВзаиморасчетов      = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаТабличнойЧасти.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;

	РассчитатьСуммуВзаиморасчетов();

КонецПроцедуры // ОплатаПоставщикамКурсВзаиморасчетовНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "КурсВзаиморасчетов"
// в строке табличной части "Оплата поставщикам".
//
Процедура ОплатаПоставщикамКурсВзаиморасчетовПриИзменении(Элемент)

	РассчитатьСуммуВзаиморасчетов();

КонецПроцедуры // ОплатаПоставщикамКурсВзаиморасчетовПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
// в строке табличной части "Оплата поставщикам".
//
Процедура ОплатаПоставщикамДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти = ЭлементыФормы.ОплатаПоставщикам.ТекущиеДанные;
	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаТабличнойЧасти.Контрагент, СтрокаТабличнойЧасти.ДоговорКонтрагента,
	                                           Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, СтандартнаяОбработка);

КонецПроцедуры // ОплатаПоставщикамДоговорКонтрагентаНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "ВозвратнаяТара". Формирует данные в колонке "ЕдиницаХранения".
//
Процедура ВозвратнаяТараПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если мКолонкиВозвратнаяТара.ЕдиницаХранения.Видимость Тогда
		ОформлениеСтроки.Ячейки.ЕдиницаХранения.УстановитьТекст(ДанныеСтроки.Номенклатура.ЕдиницаХраненияОстатков);
	КонецЕсли;

	ПоказатьКодАртикул(мКолонкиВозвратнаяТара, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

	СделкаТолькоПросмотр =Ложь;
	СделкаАвтоОтметка    =Ложь;
	Если НЕ ЗначениеНеЗаполнено(ДанныеСтроки.ДоговорКонтрагента) Тогда
		СделкаТолькоПросмотр = (ДанныеСтроки.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам);

		Если НЕ СделкаТолькоПросмотр И ЗначениеНеЗаполнено(ДанныеСтроки.Сделка) Тогда
			СделкаАвтоОтметка = (ДанныеСтроки.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
		КонецЕсли;
	КонецЕсли;

	ОформлениеСтроки.Ячейки.Сделка.ТолькоПросмотр        = СделкаТолькоПросмотр;
	ОформлениеСтроки.Ячейки.Сделка.ОтметкаНезаполненного = СделкаАвтоОтметка;

КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" поля табличной части "ВозвратнаяТара"
//
Процедура ВозвратнаяТараПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;
		ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования" поля табличной части "ВозвратнаяТара"
//
Процедура ВозвратнаяТараПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УстановитьАвтоотметку();
КонецПроцедуры //ВозвратнаяТараПриОкончанииРедактирования()

// Процедура - обработчик события "ПослеУдаления" поля табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПослеУдаления(Элемент)
	УстановитьАвтоотметку();
КонецПроцедуры //ВозвратнаяТараПослеУдаления()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении возвратной тары.
	ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Заполнить цену
	ЗаполнитьЦенуВозвратнойТарыТабЧастиПоступление(СтрокаТабличнойЧасти, ЭтотОбъект); 

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении суммы.
	ПриИзмененииСуммыВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараКонтрагентПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;
	ДоговорКонтрагента   = СтрокаТабличнойЧасти.Контрагент.ОсновнойДоговорКонтрагента;

	Если ЗначениеНеЗаполнено(Организация) Тогда
		Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			СтрокаТабличнойЧасти.ДоговорКонтрагента = ДоговорКонтрагента;
		Иначе
			СтрокаТабличнойЧасти.ДоговорКонтрагента = Неопределено;
		КонецЕсли;
	ИначеЕсли ДоговорКонтрагента.Организация = Организация Тогда
		Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			СтрокаТабличнойЧасти.ДоговорКонтрагента = ДоговорКонтрагента;
		Иначе
			СтрокаТабличнойЧасти.ДоговорКонтрагента = Неопределено;
		КонецЕсли;
	Иначе
		СтрокаТабличнойЧасти.ДоговорКонтрагента = Неопределено;
	КонецЕсли;

	ОчиститьСделкуВТабЧастиВозвратнаяТара(СтрокаТабличнойЧасти);

КонецПроцедуры // ВозвратнаяТараКонтрагентПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ покупателя
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараЗаказПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Метаданные.Документы.ЗаказПокупателя.Имя, Метаданные.Документы.ЗаказПокупателя.Синоним);

	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокТипов,Элемент);

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;

	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ФормаВыбора = Документы.ЗаказПокупателя.ПолучитьФормуВыбора(,Элемент,);

	// Отфильруем список документов по договору.
	Если Не ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.ДоговорКонтрагента) Тогда

		ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Значение      = СтрокаТабличнойЧасти.ДоговорКонтрагента;
		ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Истина;

	КонецЕсли; 

	ФормаВыбора.Открыть();

КонецПроцедуры // ВозвратнаяТараЗаказПокупателяНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
// в строке табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;
	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаТабличнойЧасти.Контрагент, СтрокаТабличнойЧасти.ДоговорКонтрагента,
	                                        Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, СтандартнаяОбработка);
	ОчиститьСделкуВТабЧастиВозвратнаяТара(СтрокаТабличнойЧасти);

КонецПроцедуры // ВозвратнаяТараДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "Очистка" поля ввода Контрагент
// в строке табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараКонтрагентОчистка(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти                    = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;
	СтрокаТабличнойЧасти.ДоговорКонтрагента = Неопределено;
	СтрокаТабличнойЧасти.Сделка             = Неопределено;

КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода ДоговорКонтрагента
// в строке табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараДоговорКонтрагентаОчистка(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти        = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;
	СтрокаТабличнойЧасти.Сделка = Неопределено;

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода Сделка
// в строке табличной части "ВозвратнаяТара".
Процедура ВозвратнаяТараСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	ДоговорКонтрагента   = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные.ДоговорКонтрагента;
	СтандартнаяОбработка = Ложь;

	// Без договора сделку выбирать не будем.
	Если ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
		Предупреждение("Не выбран договор контрагента!");
		ЭлементыФормы.ВозвратнаяТара.ТекущаяКолонка = ЭлементыФормы.ВозвратнаяТара.Колонки.Найти("ДоговорКонтрагента");
		Возврат;
	КонецЕсли;

	// Заполним возможный список типов документов, которые могут быть расчетными.
	СписокТипов = Новый СписокЗначений;

	//Список документов зависит от вида договора.
	Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда

		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда

			СписокТипов.Добавить(Метаданные.Документы["ЗаказПоставщику"].Имя       , Метаданные.Документы["ЗаказПоставщику"]       .Представление());

		ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда

			СписокТипов.Добавить(Метаданные.Документы["СчетНаОплатуПоставщика"].Имя, Метаданные.Документы["СчетНаОплатуПоставщика"].Представление());

		Иначе

			СписокТипов.Добавить(Метаданные.Документы["ЗаказПоставщику"].Имя       , Метаданные.Документы["ЗаказПоставщику"]       .Представление());
			СписокТипов.Добавить(Метаданные.Документы["СчетНаОплатуПоставщика"].Имя, Метаданные.Документы["СчетНаОплатуПоставщика"].Представление());

		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

	Если СписокТипов.Количество() = 1 Тогда
		ТипДокументаСделки = СписокТипов[0].Значение;
	Иначе
		// Пользователь выбирает тип расчетного документа
		ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокТипов, Элемент);

		Если ВыбранныйЭлемент = Неопределено Тогда
			Возврат; // пользователь отказался от выбора
		КонецЕсли;

		ТипДокументаСделки = ВыбранныйЭлемент.Значение;
	КонецЕсли;

	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ФормаВыбора = Документы[ТипДокументаСделки].ПолучитьФормуВыбора(,Элемент,);

	// Отфильруем список документов по договору.
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Значение      = ДоговорКонтрагента;
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Истина;

	ФормаВыбора.Открыть();

КонецПроцедуры // ВозвратнаяТараСделкаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "Номенклатура"
// в строке табличной части "Причее".
//
Процедура ПрочееНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Прочее.ТекущиеДанные;

	Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.СтатьяЗатрат) Тогда
		СтрокаТабличнойЧасти.СтатьяЗатрат = СтрокаТабличнойЧасти.Номенклатура.СтатьяЗатрат;
	КонецЕсли;
	Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.НоменклатурнаяГруппа) Тогда
		СтрокаТабличнойЧасти.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппаЗатрат;
	КонецЕсли;
	 	
	ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ПрочееНоменклатураПриИзменении()

Процедура ПрочееСуммаПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Прочее.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

Процедура ПрочееСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Прочее.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ЭтотОбъект, "Товары");
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПеретаскивание()

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ЭтотОбъект, "ВозвратнаяТара");
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ВозвратнаяТараПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ВозвратнаяТараПеретаскивание()

Процедура ПодразделениеКомпанииПриИзменении(Элемент)
	
	//+++Шарафутдинов 01.03.2018
	Если не ВозможностьВыбораПодразделения2018(Дата,Подразделение) тогда
		Сообщить("Подразделение должно участвовать в бюджетном планировании. Выберите другое подразделение!");
		Подразделение = Справочники.Подразделения.ПустаяСсылка();
		Возврат;		
	КонецЕсли;
	
	//---Шарафутдинов 01.03.2018
	
	
	УстановитьНомерДокумента(ЭтотОбъект);
	
	
КонецПроцедуры

Процедура ФизЛицоПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Если  ЗначениеЗаполнено(ФизЛицо) тогда		
		Подразделение = ФизЛицо.ПодразделениеОформления;
	КонецЕсли;
КонецПроцедуры

Процедура ПрочееПодразделениеПриИзменении(Элемент)
	//+++Шарафутдинов 01.03.2018
	Если не ВозможностьВыбораПодразделения2018(Дата,Элемент.Значение) тогда
		Сообщить("Подразделение должно участвовать в бюджетном планировании. Выберите другое подразделение!");
		Элемент.Значение = Справочники.Подразделения.ПустаяСсылка();
		Возврат;		
	КонецЕсли;
	
	//---Шарафутдинов 01.03.2018

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиВыданныеАвансы = ЭлементыФормы.ВыданныеАвансы.Колонки;
мКолонкиТовары         = ЭлементыФормы.Товары.Колонки;
мКолонкиВозвратнаяТара = ЭлементыФормы.ВозвратнаяТара.Колонки;
мКолонкиОплата         = ЭлементыФормы.ОплатаПоставщикам.Колонки;
мКолонкиПрочее         = ЭлементыФормы.Прочее.Колонки;

УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
мСкладИзШапки   =   (УказаниеСкладов <> Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
                  И (УказаниеСкладов <> Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления);

мРазрешитьНулевыеЦеныВОпте = РазрешитьНулевыеЦеныВОпте();