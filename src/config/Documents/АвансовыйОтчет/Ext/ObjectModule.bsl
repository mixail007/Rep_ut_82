Перем мВалютаРегламентированногоУчета Экспорт;

//БАЛАНС (04.12.2007)                        
//
Перем мПроведениеИзФормы Экспорт; 
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьАвансовогоОтчета()

	// Запрос по Шапке.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.УстановитьПараметр("Курс",            КурсДокумента);
	Запрос.УстановитьПараметр("Кратность",       КратностьДокумента);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата                  КАК ДатаДокумента,
	|	ФизЛицо               КАК ПодотчетноеЛицо,
	|	ФизЛицо.Представление КАК ПредставлениеПодотчетногоЛица,
	|	Организация           КАК Руководители,
	|	Организация.Ссылка    КАК Организация,
	|	НазначениеАванса,
	|	Подразделение,
	|	Подразделение.Представление КАК ПредставлениеПодразделения,
	|	Подразделение.Код КАК КодПодразделения,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	ВалютаДокумента,
	|	КурсДокумента,
	|	КратностьДокумента,
	|	ВалютаДокумента.Представление       КАК ПредставлениеВалютыДокумента,
	|	СуммаДокумента * &Курс / &Кратность КАК СуммаДокумента
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	// Запрос по Авансам.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВалютаДокумента КАК ВалютаРКО,
	|	ВЫБОР
	|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.СуммаДокумента ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.СуммаДокумента
	|	КОНЕЦ КАК СуммаАванса,
	|	ВЫБОР
	|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.КурсВзаиморасчетов ЕСТЬ NULL ТОГДА 1
	|		ИНАЧЕ РасходныйКассовыйОрдерРасшифровкаПлатежа.КурсВзаиморасчетов
	|	КОНЕЦ КАК КурсВзаиморасчетовРКО,
	|	ВЫБОР
	|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.КратностьВзаиморасчетов ЕСТЬ NULL ТОГДА 1
	|		ИНАЧЕ РасходныйКассовыйОрдерРасшифровкаПлатежа.КратностьВзаиморасчетов
	|	КОНЕЦ КАК КратностьВзаиморасчетовРКО
	|ИЗ
	|	Документ.АвансовыйОтчет.ВыданныеАвансы КАК АвансовыйОтчетВыданныеАвансы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
	|		ПО АвансовыйОтчетВыданныеАвансы.РасходныйКассовыйОрдер = РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка
	|
	|ГДЕ
	|	АвансовыйОтчетВыданныеАвансы.Ссылка = &ТекущийДокумент";

	ВыборкаАвансы = Запрос.Выполнить().Выбрать();

	ТабДокумент  = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АвансовыйОтчет_АвансовыйОтчет";
	Макет        = ПолучитьМакет("АвансовыйОтчет");
	ВалютаРег    = мВалютаРегламентированногоУчета;

	// ТИТУЛЬНЫЙ ЛИСТ

	// Надо получить все ненулевые остатки регистра по этому подотчетнику и этой валюте (взаиморасчетов),
	// которые возникли до данного авансового отчета,
	// при этом курс и кратность взаиморасчетов надо брать из расчетного документа.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Валюта"     , ВалютаДокумента);
	Запрос.УстановитьПараметр("ФизЛицо"    , ФизЛицо);
	Запрос.УстановитьПараметр("ДатаОстатка", Дата - 1);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.Валюта КАК ВалютаВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КурсВзаиморасчетов ЕСТЬ NULL ТОГДА 1
	|		ИНАЧЕ ВложенныйЗапрос.КурсВзаиморасчетов
	|	КОНЕЦ КАК КурсВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КратностьВзаиморасчетов ЕСТЬ NULL ТОГДА 1
	|		ИНАЧЕ ВложенныйЗапрос.КратностьВзаиморасчетов
	|	КОНЕЦ КАК КратностьВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(&ДатаОстатка, Валюта = &Валюта И ФизЛицо = &ФизЛицо) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			АвансовыйОтчет.Ссылка КАК РасчетныйДокумент,
	|			АвансовыйОтчет.КурсДокумента КАК КурсВзаиморасчетов,
	|			АвансовыйОтчет.КратностьДокумента КАК КратностьВзаиморасчетов
	|		ИЗ
	|			Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|
	|		ГДЕ
	|			АвансовыйОтчет.Организация = &Организация И
	|			АвансовыйОтчет.ВалютаДокумента = &Валюта И
	|			АвансовыйОтчет.ФизЛицо = &ФизЛицо И
	|			АвансовыйОтчет.Дата <= &ДатаОстатка
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ
	|			ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка,
	|			ПриходныйКассовыйОрдерРасшифровкаПлатежа.КурсВзаиморасчетов,
	|			ПриходныйКассовыйОрдерРасшифровкаПлатежа.КратностьВзаиморасчетов
	|		ИЗ
	|			Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	|
	|		ГДЕ
	|			ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Организация = &Организация И
	|			ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВалютаВзаиморасчетовПодотчетника = &Валюта И
	|			ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Контрагент = &ФизЛицо И
	|			ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата <= &ДатаОстатка
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ
	|			РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка,
	|			РасходныйКассовыйОрдерРасшифровкаПлатежа.КурсВзаиморасчетов,
	|			РасходныйКассовыйОрдерРасшифровкаПлатежа.КратностьВзаиморасчетов
	|		ИЗ
	|			Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
	|
	|		ГДЕ
	|			РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Организация = &Организация И
	|			РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВалютаВзаиморасчетовПодотчетника = &Валюта И
	|			РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Контрагент = &ФизЛицо И
	|			РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата <= &ДатаОстатка) КАК ВложенныйЗапрос
	|
	|		ПО ВзаиморасчетыСПодотчетнымиЛицамиОстатки.РасчетныйДокумент = ВложенныйЗапрос.РасчетныйДокумент
	|
	|	ГДЕ
	|		ВзаиморасчетыСПодотчетнымиЛицамиОстатки.РасчетныйДокумент.Организация = &Организация
	|";

	ПредыдущийАванс = Запрос.Выполнить().Выбрать();

	СуммаДоДокумента = 0;
	Пока ПредыдущийАванс.Следующий() Цикл
		Если ПредыдущийАванс.ВалютаВзаиморасчетов = ВалютаРег Тогда
			СуммаДоДокумента = СуммаДоДокумента + ПредыдущийАванс.СуммаВзаиморасчетов;
		Иначе
			СуммаДоДокумента = СуммаДоДокумента + ПредыдущийАванс.СуммаВзаиморасчетов 
			                                    * ПредыдущийАванс.КурсВзаиморасчетов
			                                    / ПредыдущийАванс.КратностьВзаиморасчетов;
		КонецЕсли;
	КонецЦикла;

	// теперь отнимем сумму расходных ордеров в первой вкладке
	ПолученоИзКассы    = 0;
	ПолученоИзКассыВал = 0;

	Пока ВыборкаАвансы.Следующий() Цикл

		ПолученоИзКассыВал = ПолученоИзКассыВал + ВыборкаАвансы.СуммаАванса;

		Если ВалютаДокумента = ВалютаРег Тогда // валюта документа совпадает с валютой взаиморасчетов подотчетника

			ПолученоИзКассы = ПолученоИзКассы + ВыборкаАвансы.СуммаАванса ;

		Иначе

			ПолученоИзКассы = ПолученоИзКассы + ВыборкаАвансы.СуммаАванса 
			                                  * ВыборкаАвансы.КурсВзаиморасчетовРКО 
			                                  / ВыборкаАвансы.КратностьВзаиморасчетовРКО;

		КонецЕсли;
	КонецЦикла;

	Если СуммаДоДокумента >= 0 Тогда
		СуммаДоДокумента = СуммаДоДокумента - ПолученоИзКассы;
	Иначе
		СуммаДоДокумента = СуммаДоДокумента + ПолученоИзКассы;
	КонецЕсли;

	// Выводим титульный лист авансового отчета
	ОбластьМакета = Макет.ПолучитьОбласть("Титул");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.НомерДокумента                = ПолучитьНомерНаПечать(ЭтотОбъект);
	ФамилияИмяОтчествоФизЛица                             = ФамилияИмяОтчество(Шапка.ПодотчетноеЛицо, Шапка.ДатаДокумента);
	ФамилияИмяОтчествоПодотчетного                        = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
	ОбластьМакета.Параметры.ПредставлениеПодотчетногоЛица = ФамилияИмяОтчествоПодотчетного;

	Если Шапка.ВалютаДокумента = ВалютаРег Тогда
		ОбластьМакета.Параметры.ПолученоИзКассы = ПолученоИзКассы;
	Иначе
		ОбластьМакета.Параметры.ПолученоИзКассы = ПолученоИзКассы;
		ОбластьМакета.Параметры.ПолученоИзКассыВВалюте = ПолученоИзКассыВал;
	КонецЕсли;

	Если СуммаДоДокумента >= 0 тогда
		ОбластьМакета.Параметры.НачальныйОстаток    =   СуммаДоДокумента;
	Иначе
		ОбластьМакета.Параметры.НачальныйПерерасход = - СуммаДоДокумента;
	КонецЕсли;

	ОбластьМакета.Параметры.ИтогоПолучено = ПолученоИзКассы;
	ОбластьМакета.Параметры.Израсходовано = Шапка.СуммаДокумента;

	ОстатокНаКонец = СуммаДоДокумента + ПолученоИзКассы - Шапка.СуммаДокумента;
	Если ОстатокНаКонец >= 0  Тогда
		ОбластьМакета.Параметры.КонечныйОстаток    = ОстатокНаКонец;
	Иначе
		ОбластьМакета.Параметры.КонечныйПерерасход = - ОстатокНаКонец;
	КонецЕсли;

	СведенияОбОрганизации = СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	ПредставлениеОрганизации = ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");

	Руководители = ОтветственныеЛицаОрганизации(Шапка.Руководители, Шапка.ДатаДокумента,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	Кассир       = Руководители.Кассир;

	ИспСумма     = Окр(Шапка.СуммаДокумента, 2, 1);
	ЦелСумма     = Цел(Шапка.СуммаДокумента);
	КопСумма     = 100 * (Окр(ИспСумма - ЦелСумма, 2, 1));

	ОбластьМакета.Параметры.ИзрасходованоРуб    = ЦелСумма;
	ОбластьМакета.Параметры.ИзрасходованоКоп    = Формат(КопСумма,"ЧН=00");

	ОбластьМакета.Параметры.ДатаДокумента       = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.Руководитель        = Руководитель;
	ОбластьМакета.Параметры.ГлавныйБухгалтер    = Бухгалтер;
	ОбластьМакета.Параметры.Бухгалтер           = Бухгалтер;
	ОбластьМакета.Параметры.Кассир              = Кассир;
	ОбластьМакета.Параметры.ОрганизацияПоОКПО   = СведенияОбОрганизации.КодПоОКПО;
	ОбластьМакета.Параметры.СуммаОтчетаПрописью = СформироватьСуммуПрописью(Шапка.СуммаДокумента, ВалютаРег);

	ОбластьМакета.Параметры.ПредставлениеОрганизации        = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.ПредставлениеГлавногоБухгалтера = Бухгалтер;
	ОбластьМакета.Параметры.РуководительПредставление       = Руководитель;

	ТабДокумент.Вывести(ОбластьМакета);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	// ОБОРОТНАЯ СТОРОНА
	ЗапросТовары = Новый Запрос();
	ЗапросТовары.УстановитьПараметр("Курс",            ЭтотОбъект.КурсДокумента);
	ЗапросТовары.УстановитьПараметр("Кратность",       ЭтотОбъект.КратностьДокумента);
	ЗапросТовары.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросТовары.УстановитьПараметр("Валюта",          ЭтотОбъект.ВалютаДокумента);
	ЗапросТовары.Текст = "
	|ВЫБРАТЬ
	|	АвансовыйОтчет.НомерВходящегоДокумента КАК ДокументНомер,
	|	АвансовыйОтчет.ДатаВходящегоДокумента  КАК ДокументДата,
	|	""Куплены товары""                     КАК НаименованиеРасхода,
	|	СУММА(АвансовыйОтчет.Сумма * &Курс / &Кратность)    КАК ПоОтчету,
	|	СУММА(АвансовыйОтчет.Сумма)                         КАК ПоОтчетуВВалюте,
	|	СУММА(АвансовыйОтчет.СуммаНДС * &Курс / &Кратность) КАК СуммаНДС,
	|	NULL                                                КАК Договор
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчет
	|
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.Содержание,
	|	СУММА(АвансовыйОтчет.Сумма * &Курс / &Кратность),
	|	СУММА(АвансовыйОтчет.Сумма),
	|	0,
	|	АвансовыйОтчет.ДоговорКонтрагента
	|ИЗ
	|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК АвансовыйОтчет
	|
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.Содержание,
	|	АвансовыйОтчет.ДоговорКонтрагента
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.Содержание,
	|	СУММА(АвансовыйОтчет.Сумма * &Курс / &Кратность),
	|	СУММА(АвансовыйОтчет.Сумма),
	|	0,
	|	NULL
	|ИЗ
	|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчет
	|
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.Содержание";

	Товар = ЗапросТовары.Выполнить().Выбрать();

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим табличные части
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	НомерСтроки   = 0;

	ИтогоПоОтчету        = 0;
	ИтогоПоОтчетуВВалюте = 0;
	СуммаВВалюте = 0;

	Пока Товар.Следующий() Цикл

		ОбластьМакета.Параметры.Заполнить(Товар);
		НомерСтроки = НомерСтроки + 1;
		ОбластьМакета.Параметры.НомерСтроки         = НомерСтроки;
		ОбластьМакета.Параметры.ДокументДата        = Товар.ДокументДата;
		ОбластьМакета.Параметры.НаименованиеРасхода = Товар.НаименованиеРасхода;

		Сумма = Товар.ПоОтчету 
			+ ?(Шапка.СуммаВключаетНДС, 0, Товар.СуммаНДС);

		ОбластьМакета.Параметры.ПоОтчету        = Сумма;
		СуммаВВалюте = Товар.ПоОтчетуВВалюте;

		ИтогоПоОтчету = ИтогоПоОтчету + Сумма;

		Если Шапка.ВалютаДокумента = ВалютаРег Тогда
			ОбластьМакета.Параметры.ПоОтчетуВВалюте = 0;
		Иначе
			ИтогоПоОтчетуВВалюте = ИтогоПоОтчетуВВалюте + СуммаВВалюте;
			СуммаВВалюте = 0;
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// Выводим подвал авансовго отчета
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ИтогоПоОтчету                 = ИтогоПоОтчету;
	ОбластьМакета.Параметры.ИтогоПоОтчетувВалюте          = ИтогоПоОтчетуВВалюте;
	ОбластьМакета.Параметры.ПредставлениеПодотчетногоЛица = ФамилияИнициалыФизЛица(ФамилияИмяОтчествоПодотчетного);

	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьАвансовогоОтчета()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "Аванс_Отчет" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьАвансовогоОтчета();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();
		
	КонецЕсли;


	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидПоступления)));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;

	СписокМакетов.Добавить("Аванс_Отчет", "Авансовый отчет");

	ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

#КонецЕсли

// Процедура выполняет заполнение табличной части выданные авансы.
//
Процедура ЗаполнитьВыданныеАвансы() Экспорт

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.РасчетныйДокумент,
	|	Остатки.СуммаВзаиморасчетовОстаток
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(,
	|				ФизЛицо  = &ФизЛицо
	|				И РасчетныйДокумент ССЫЛКА Документ.РасходныйКассовыйОрдер
	|				И Валюта = &ВалютаДокумента) КАК Остатки
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаВыданныеАвансы = ВыданныеАвансы.Добавить();

		СтрокаВыданныеАвансы.РасходныйКассовыйОрдер = Выборка.РасчетныйДокумент;
		СтрокаВыданныеАвансы.Сумма                  = Выборка.СуммаВзаиморасчетовОстаток;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьВыданныеАвансы()

// Процедура выполняет заполнение табличной части по приходному ордеру товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (приходный ордер товаров).
//
Процедура ЗаполнитьТоварыПоОснованию(ДокументОснование) Экспорт

	// Сформируем запрос по шапке документа-основания
	ЗапросПоШапке = Новый Запрос;

	ЗапросПоШапке.УстановитьПараметр("ДокументОснование", ДокументОснование);

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Склад"            , СкладОрдер);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокТовары.Номенклатура                 КАК Номенклатура,
	|	ДокТовары.СерияНоменклатуры            КАК СерияНоменклатуры,
	|	ДокТовары.ХарактеристикаНоменклатуры   КАК ХарактеристикаНоменклатуры,
	|	СУММА(ДокТовары.Количество)            КАК КоличествоПоСерии, 
	|	МАКСИМУМ(Остатки.КоличествоОстаток)    КАК КоличествоОстатокКомпании
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ДокТовары
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(, ДокументПолучения = &ДокументОснование) КАК Остатки
	|ПО
	|	ДокТовары.Номенклатура = Остатки.Номенклатура И
	|	ДокТовары.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
	|
	|ГДЕ
	|	ДокТовары.Ссылка = &ДокументОснование
	|	И Остатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокТовары.Номенклатура,
	|	ДокТовары.СерияНоменклатуры,
	|	ДокТовары.ХарактеристикаНоменклатуры";

	РезультатЗапроса = Запрос.Выполнить();

	Поставщик = ДокументОснование.Контрагент;
	Выборка   = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество                 = Мин(Выборка.КоличествоОстатокКомпании, Выборка.КоличествоПоСерии);
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент                = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.СтавкаНДС                  = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
		СтрокаТабличнойЧасти.Поставщик                  = Поставщик;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.ПриходныйОрдер             = ДокументОснование;
		СтрокаТабличнойЧасти.Склад                      = ДокументОснование.Склад;

		ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, глТекущийПользователь);

	КонецЦикла; // Выборка.Следующий()

КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

// Процедура выполняет заполнение табличной части по приходному ордеру на товары.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (приходный ордер товаров).
//
Процедура ЗаполнитьВозвратнуюТаруПоОснованию(ДокументОснование) Экспорт

	// Сформируем запрос по шапке документа-основания
	ЗапросПоШапке = Новый Запрос;

	ЗапросПоШапке.УстановитьПараметр("ДокументОснование", ДокументОснование);

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Склад"            , СкладОрдер);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокВозвратнаяТара.Номенклатура                 КАК Номенклатура,
	|	СУММА(ДокВозвратнаяТара.Количество)            КАК КоличествоПоСерии,
	|	МАКСИМУМ(Остатки.КоличествоОстаток)            КАК КоличествоОстатокКомпании
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.ВозвратнаяТара КАК ДокВозвратнаяТара
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(, ДокументПолучения = &ДокументОснование) КАК Остатки
	|ПО
	|	ДокВозвратнаяТара.Номенклатура = Остатки.Номенклатура
	|
	|ГДЕ
	|	ДокВозвратнаяТара.Ссылка = &ДокументОснование
	|	И Остатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокВозвратнаяТара.Номенклатура";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = ВозвратнаяТара.Добавить();

		СтрокаТабличнойЧасти.Номенклатура   = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество     = Мин(Выборка.КоличествоОстатокКомпании, Выборка.КоличествоПоСерии);
		СтрокаТабличнойЧасти.Контрагент     = ДокументОснование.Контрагент;
		СтрокаТабличнойЧасти.ПриходныйОрдер = ДокументОснование;
		СтрокаТабличнойЧасти.Склад          = ДокументОснование.Склад;

		Если Не ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Контрагент) Тогда
			СтрокаТабличнойЧасти.ДоговорКонтрагента = ДокументОснование.Контрагент.ОсновнойДоговорКонтрагента;
		КонецЕсли;

	КонецЦикла; // Выборка.Следующий()

КонецПроцедуры // ЗаполнитьВозвратнуюТаруПоОснованию()

// Процедура выполняет заполнение документа по документу-основанию.
//
// Параметры:
//  Основание - ссылка на документ основание (приходный ордер товаров).
//
Процедура ОбработкаЗаполненияУпр(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда

		// Заполним реквизиты из стандартного набора.
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ВидПоступления               = Перечисления.ВидыПоступленияТоваров.ПоОрдеру;
		СкладОрдер                   = Основание;
		ФизЛицо                      = Основание.ФизЛицо;
		УчитыватьНДС                 = Истина;
		СуммаВключаетНДС             = Истина;
		ВалютаДокумента              = мВалютаРегламентированногоУчета;

		Если НЕ ЗначениеНеЗаполнено(Основание.Контрагент)
		   И НЕ ЗначениеНеЗаполнено(Основание.Контрагент.ОсновнойДоговорКонтрагента)
		   И НЕ ЗначениеНеЗаполнено(Основание.Контрагент.ОсновнойДоговорКонтрагента.ТипЦен) Тогда

			// Тип цен заполняем, только если в договоре указаны тип цен контрагента (он - поставщик).
			ТипЦенКонтрагента = Основание.Контрагент.ОсновнойДоговорКонтрагента.ТипЦен;
			Если ТипЗнч(ТипЦенКонтрагента) = Тип("СправочникСсылка.ТипыЦенНоменклатурыКонтрагентов") Тогда
				ТипЦен = ТипЦенКонтрагента.ТипЦеныНоменклатуры;
			КонецЕсли;
		КонецЕсли;

		Если Основание.Проведен Тогда
			// Заполним табличные части по приходному ордеру на товары.
			ЗаполнитьТоварыПоОснованию(Основание);
			ЗаполнитьВозвратнуюТаруПоОснованию(Основание);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполненияУпр()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// По виду операции определяет статус партии прихода товаров (не возвратная тара!)
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Значение перечисления "Статусы партии товаров".
//
Функция ОпределитьСтатусПартииПрихода() 

	Статус = Перечисления.СтатусыПартийТоваров.Купленный; 

	Возврат Статус;

КонецФункции // ОпределитьСтатусПартииПрихода()

// Заполняет в таблице движений по регитстру ПартииТоваровНаСкладах нестандартные поля.
//
// Параметры:
//  ТаблицаТЧ       - таблица значений, соответствующая табличной части документа
//  ТаблицаДвижений - таблица значений, соответствующая набору записей регистра,
//  СтатусПартии    - значение перечисления статусов партий. 
//
Процедура ЗаполнитьПоляПартииТоваровНаСкладахУпр(ТаблицаТЧ, СтруктураШапкиДокумента, ТаблицаДвижений, СтатусПартии, СпособОценкиМПЗ)

	Для каждого СтрокаДвижений Из ТаблицаДвижений Цикл

		Если СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда
			СтрокаДвижений.ДокументОприходования = Неопределено;
		Иначе
			СтрокаДвижений.ДокументОприходования = Ссылка;
		КонецЕсли;
		СтрокаДвижений.СтатусПартии          = СтатусПартии;
		СтрокаДвижений.Качество              = Справочники.Качество.Новый;

		// Заказ заполняем если его указали в документе и по договору ведется обособленный учет товаров по заказам.
		СтрокаТЧ = ТаблицаТЧ.Найти(СтрокаДвижений.НомерСтроки, "НомерСтроки");
		ОбособленныйУчет = СтрокаТЧ .ОбособленныйУчетТоваровПоЗаказамПокупателей;
		СтрокаДвижений.Заказ = ?(ОбособленныйУчет <> NULL И ОбособленныйУчет 
		        И Не (ЗначениеНеЗаполнено(СтрокаТЧ.ЗаказПокупателя)), СтрокаТЧ.ЗаказПокупателя, Неопределено);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоляПартииТоваровНаСкладах()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Создаем колонку "Стоимость" и копируем в нее колонку "Сумма"
	ТаблицаТоваров.Колонки.Добавить("Стоимость");
	ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("Сумма") , "Стоимость");
	
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)
	
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр",    ПолучитьОписаниеТиповЧисла(15,2));
	
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл		

		СтоимостьСНДС  = СтрокаТаблицы.Стоимость + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Если СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий Тогда
			СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Иначе
			СтрокаТаблицы.Стоимость = СтоимостьСНДС;
		КонецЕсли;


		СтрокаТаблицы.СуммаУпр = ПересчитатьИзВалютыВВалюту(СтоимостьСНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.Стоимость = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

	
КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()	

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	// Переименуем колонку "Сумма" в "Стоимость" (как в регистрах).
	ТаблицаТары.Колонки.Сумма.Имя = "Стоимость";

	ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента);

	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

Процедура ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента)

	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов", ПолучитьОписаниеТиповЧисла(15,2));

	// Надо расчитать сумму без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		СтруктураКурса = ПолучитьКурсВалюты(СтрокаТаблицы.ВалютаДоговора, Дата);

		СтрокаТаблицы.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
		                                 СтрокаТаблицы.ВалютаДоговора, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураКурса.Курс, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураКурса.Кратность);

		// Суммы пересчитаем в валюту упр. учета. По таре считаем, что СуммаБезНДС = Сумма
		СтрокаТаблицы.Стоимость = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		Если НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
			Если СтрокаТаблицы.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
				СтрокаТаблицы.Сделка = Неопределено;
			КонецЕсли;
		Иначе
			СтрокаТаблицы.Сделка = Неопределено;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТарыУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуПоОплате(РезультатЗапросаПоОплате, СтруктураШапкиДокумента)

	ТаблицаПоОплате = РезультатЗапросаПоОплате.Выгрузить();

	ПодготовитьТаблицуПоОплатеУпр(ТаблицаПоОплате, СтруктураШапкиДокумента);

	Возврат ТаблицаПоОплате;

КонецФункции // ПодготовитьТаблицуПоОплате()

Процедура ПодготовитьТаблицуПоОплатеУпр(ТаблицаПоОплате, СтруктураШапкиДокумента)
	
	ТаблицаПоОплате.Колонки.Добавить("СуммаУпр",    ПолучитьОписаниеТиповЧисла(15,2));	
	
	// Надо расчитать сумму без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаПоОплате Цикл

		// Суммы пересчитаем в валюту упр. учета.
		СтрокаТаблицы.СуммаУпр = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуПоОплатеУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоПрочие  - результат запроса по табличной части "Прочие",
//  СтруктураШапкиДокумента  - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуПрочие(РезультатЗапросаПоПрочее, СтруктураШапкиДокумента)

	ТаблицаПрочие = РезультатЗапросаПоПрочее.Выгрузить();

	ПодготовитьТаблицуПрочиеУпр(ТаблицаПрочие, СтруктураШапкиДокумента);

	Возврат ТаблицаПрочие;

КонецФункции // ПодготовитьТаблицуПрочие()

Процедура ПодготовитьТаблицуПрочиеУпр(ТаблицаПрочие, СтруктураШапкиДокумента)

	КолонкаСумма = ТаблицаПрочие.Колонки["Сумма"];
	КолонкаСуммаУпр = ТаблицаПрочие.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов(КолонкаСумма.ТипЗначения));
	КолонкаСуммаУпр = ТаблицаПрочие.Колонки.Добавить("Стоимость", Новый ОписаниеТипов(КолонкаСумма.ТипЗначения));

	Для Каждого СтрокаТаблицы Из ТаблицаПрочие Цикл
		
		// Пересчитаем сумму по курсу
		СтрокаТаблицы.СуммаУпр = СтрокаТаблицы.Сумма *
			((СтруктураШапкиДокумента.КурсДокумента * СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета) /
			(СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета * СтруктураШапкиДокумента.КратностьДокумента));
			
		СтрокаТаблицы.Стоимость  = СтрокаТаблицы.Сумма + 
		                          ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.Стоимость = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуПрочиеУпр()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидПоступления, Организация, ФизЛицо, ВалютаДокумента");
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Если склад указывается в ТЧ, то в шапке он может быть не заполнен или указан неправильно,
	// это ни на что не влияет, потому что при проведении используется склад в ТЧ.
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад
	   И Не СтруктураШапкиДокумента.СкладВТабличнойЧасти 
	   И СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		ОшибкаПриПроведении("Документ не может осуществлять поступление на неавтоматизированную торговую точку!", Отказ, Заголовок);
	КонецЕсли;

	// Израсходованная сумма
	Если ВыданныеАвансы.Итог("Сумма") > СуммаДокумента Тогда
		ОшибкаПриПроведении("Израсходованная сумма превышает сумму по документу!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Выданные авансы".
//
// Параметры:
// Параметры: 
//  РезультатЗапросаПоУслугам - результат запроса, содержащий данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  Отказ                     - флаг отказа в проведении.
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВыданныеАвансы(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("РасходныйКассовыйОрдер, Сумма");
	
	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВыданныеАвансы",СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВыданныеАвансы()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = СформироватьСтруктуруОбязательныхПолейТовары();

	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураОбязательныхПолей.Вставить("ПриходныйОрдер");
	КонецЕсли;

	КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, "Товары", СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  РезультатЗапросаПоУслугам - результат запроса, содержащий данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  Отказ                     - флаг отказа в проведении.
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОплатаПоставщикам(ТаблицаПоОплате, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ОплатаПоставщикам";
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Контрагент, ДоговорКонтрагента, Сумма");

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти,СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Проверим заполнение заказов поставщикам
	ПроверитьСделкуВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоОплате, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договорах взаиморасчетов.
	ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоОплате, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОплатаПоставщикам()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  ТаблицаПоПрочее         - таблица значений, содержащая результат запроса с данными для проведения и проверки ТЧ Прочее
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПрочее(ТаблицаПоПрочее, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	РеквизитыСтр = "Содержание, Сумма, СтатьяЗатрат";
	
	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Прочее", Новый Структура(РеквизитыСтр), Отказ, Заголовок);

	// Здесь товаров быть не должно.
	ПроверитьЧтоНетТоваров(ЭтотОбъект, "Прочее", ТаблицаПоПрочее, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Прочее", ТаблицаПоПрочее, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиПрочее()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	                                                      Отказ, Заголовок)

	ИмяТабличнойЧасти = "ВозвратнаяТара";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = СформироватьСтруктуруОбязательныхПолейТара();
	СтруктураОбязательныхПолей.Вставить("Контрагент");
	СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента");

	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураОбязательныхПолей.Вставить("ПриходныйОрдер");
	КонецЕсли;
	КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	// Теперь позовем общую процедуру проверки заполнения.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти,СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТаре, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договорах взаиморасчетов.
	ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТаре, Отказ, Заголовок);

	// Если ведение взаиморасчетов "По заказам", "Сделка" должна быть заполнена.
	ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	Для каждого СтрокаТаблицы Из ТаблицаПоТаре Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

		Если НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента)
		   И СтрокаТаблицы.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		   И ЗначениеНеЗаполнено(СтрокаТаблицы.Сделка) Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Сделка""!";
			ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// Формируем движения по ТЧ "ВыданныеАвансы"
//
// Параметры: 
//  СтруктураШапкиДокумента                  - выборка из результата запроса по шапке документа
//  ВыборкаПоВыданныеАвансы		             - выборка из результата запроса по ТЧ "ВыданныеАвансы" 
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//  Режим									 - режим проведения
//  Отказ   			                     - флаг отказа в проведении.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДвиженияПоПодотчетникамУпр(СтруктураШапкиДокумента, ТаблицаПоВыданныеАвансы, Режим, Отказ, Заголовок)

	// Если НДС и не включаются в сумму документа, то его надо добавить 
	// к общей сумме
	Налоги = 0;
	Если СуммаВключаетНДС = 0 Тогда
		Налоги = Налоги + Товары.Итог("СуммаНДС");
	КонецЕсли;

	// Следующие переменные будут содержать текущие (непогашенные) остатки сумм
	// по табличным частям документа
	ОстПогСуммаТовары = Товары.Итог("Сумма") + Налоги;
	ОстПогСуммаОплата = ОплатаПоставщикам.Итог("Сумма");
	ОстПогСуммаПрочее = Прочее.Итог("Сумма");
	
	НаборДвижений   = Движения.ВзаиморасчетыСПодотчетнымиЛицами;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для каждого СтрокаТаблицы Из ТаблицаПоВыданныеАвансы Цикл

		Если Отказ Тогда
			Продолжить;
		КонецЕсли;

		ОстПогРКО = СтрокаТаблицы.Сумма;
		
		// Будем последовательно списывать суммы по табличным частям документа,
		// делая движения с соответствующими кодами операций
		Пока ОстПогРКО > 0 Цикл
			
			// ОстПог - текущий остаток по текущей ТЧ документа, который надо погасить
			Если ОстПогСуммаТовары > 0 Тогда
				ОстПог					= ОстПогСуммаТовары;  
				//КодОперации				= Перечисления.КодыОпераций.АвансовыйОтчетЗакупкаТМЦ;
				ОстПогСуммаТовары	= ОстПогСуммаТовары - Мин(ОстПог, ОстПогРКО);
			ИначеЕсли ОстПогСуммаОплата > 0 Тогда
				ОстПог					= ОстПогСуммаОплата;
				//КодОперации				= Перечисления.КодыОпераций.АвансовыйОтчетОплатаПоставщикам;
				ОстПогСуммаОплата		= ОстПогСуммаОплата - Мин(ОстПог, ОстПогРКО);
			ИначеЕсли ОстПогСуммаПрочее > 0 Тогда
				ОстПог					= ОстПогСуммаПрочее;
				//КодОперации				= Перечисления.КодыОпераций.АвансовыйОтчетПрочее;
				ОстПогСуммаПрочее		= ОстПогСуммаПрочее - Мин(ОстПог, ОстПогРКО);
			Иначе
				Прервать;
			КонецЕсли;
				
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			
			// Измерения
			СтрокаДвижений.ФизЛицо	 	        = ФизЛицо;
			СтрокаДвижений.РасчетныйДокумент    = СтрокаТаблицы.РасходныйКассовыйОрдер;
			СтрокаДвижений.Валюта			    = ВалютаДокумента;

			// Ресурсы
			СтрокаДвижений.СуммаВзаиморасчетов  = Мин(ОстПог, ОстПогРКО);
			СтрокаДвижений.СуммаУпр             = ПересчитатьИзВалютыВВалюту(СтрокаДвижений.СуммаВзаиморасчетов,
								ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, КурсДокумента,
								СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, КратностьДокумента,
								СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

			ОстПогРКО = ОстПогРКО - СтрокаДвижений.СуммаВзаиморасчетов;
			
		КонецЦикла;
			
	КонецЦикла; 

	// Если все суммы выданных авансов списаны, а суммы по расходам списаны неполностью,
	// то возникает перерасход
	Перерасход = ОстПогСуммаТовары + ОстПогСуммаОплата + ОстПогСуммаПрочее;

	Если Перерасход > 0 И НЕ Отказ Тогда

		СтрокаДвижений = ТаблицаДвижений.Добавить();
		
		// Измерения
		СтрокаДвижений.ФизЛицо	 	        = ФизЛицо;
		СтрокаДвижений.РасчетныйДокумент    = Ссылка;
		СтрокаДвижений.Валюта			    = ВалютаДокумента;

		// Ресурсы
		СтрокаДвижений.СуммаВзаиморасчетов  = Перерасход;
		СтрокаДвижений.СуммаУпр             = ПересчитатьИзВалютыВВалюту(СтрокаДвижений.СуммаВзаиморасчетов,
								ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, КурсДокумента,
								СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, КратностьДокумента,
								СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЕсли;

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.ВзаиморасчетыСПодотчетнымиЛицами.ВыполнитьРасход();
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоПодотчетникам()

// Проводит табличные части "Товары" и "Возвратная тара" по регистрам
//
// Параметры:
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ТоварыИТараПоРегистрамОстатковИПартий(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоПрочее, Отказ, Заголовок)

	ТоварыИТараПоРегистрамОстатковИПартийУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоПрочее, Отказ, Заголовок);

КонецПроцедуры // ТоварыИТараПоРегистрамОстатковИПартий()

Процедура ТоварыИТараПоРегистрамОстатковИПартийУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоПрочее, Отказ, Заголовок)
	
	УчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата);
	
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
		НаборДвижений = Движения.ТоварыНаСкладах;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвиженийТоварыНаСкладах = НаборДвижений.Выгрузить();
		ТаблицаДвиженийТоварыНаСкладах.Очистить();
		ТаблицаДвижений = ТаблицаДвиженийТоварыНаСкладах.Скопировать();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ТоварыНаСкладах.ВыполнитьПриход();
		КонецЕсли;

		// ТАРА ПО РЕГИСТРУ ТоварыНаСкладах.
		НаборДвижений = Движения.ТоварыНаСкладах;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = ТаблицаДвиженийТоварыНаСкладах.Скопировать();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);


		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ТоварыНаСкладах.ВыполнитьПриход();
		КонецЕсли;

	Иначе   // по ордеру

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПолучениюНаСклады.
		НаборДвижений = Движения.ТоварыКПолучениюНаСклады;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвиженийТоварыНаСкладах = НаборДвижений.Выгрузить();
		ТаблицаДвиженийТоварыНаСкладах.Очистить();
		ТаблицаДвижений = ТаблицаДвиженийТоварыНаСкладах.Скопировать();

		// Заполним таблицу движений.
		ТаблицаКПолучению = ТаблицаПоТоварам.Скопировать();
		ТаблицаКПолучению.Колонки.Добавить("ДокументРезерва");

		// Документ резерва - приходный ордрер без права продажи.
		Для каждого СтрокаТаблицы из ТаблицаКПолучению Цикл

			Если СтрокаТаблицы.БезПраваПродажи Тогда
				СтрокаТаблицы.ДокументРезерва = СтрокаТаблицы.ДокументПолучения;
			КонецЕсли;

		КонецЦикла;

		ЗагрузитьВТаблицуЗначений(ТаблицаКПолучению, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			// Проверка осатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;

		Если Не Отказ Тогда
			Движения.ТоварыКПолучениюНаСклады.ВыполнитьРасход();
		КонецЕсли;

		// ТАРА ПО РЕГИСТРУ ТоварыКПолучениюНаСклады.
		НаборДвижений = Движения.ТоварыКПолучениюНаСклады;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = ТаблицаДвиженийТоварыНаСкладах.Скопировать();

		// Заполним таблицу движений.
		ТаблицаКПолучению = ТаблицаПоТаре.Скопировать();
		ТаблицаКПолучению.Колонки.Добавить("ДокументРезерва");

		// Документ резерва - приходный ордрер без права продажи.
		Для каждого СтрокаТаблицы из ТаблицаКПолучению Цикл

			Если СтрокаТаблицы.БезПраваПродажи Тогда
				СтрокаТаблицы.ДокументРезерва = СтрокаТаблицы.ДокументПолучения;
			КонецЕсли;

		КонецЦикла;

		ЗагрузитьВТаблицуЗначений(ТаблицаКПолучению, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "СтатусПартии");
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		// Проверка осатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;

		Если Не Отказ Тогда
			Движения.ТоварыКПолучениюНаСклады.ВыполнитьРасход();
		КонецЕсли;

		// Если товары поступили по ордеру без права продажи, то надо снять резерв
		Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда

			// Сначала удалим из таблицы строки, по которым не надо списывать резерв.
			ТаблицаПоТоварамПоОрдерамБезПраваПродажи = ТаблицаПоТоварам.Скопировать();
			ТаблицаПоТоварамПоОрдерамБезПраваПродажи.Колонки.ДокументПолучения.Имя = "ДокументРезерва";
			Сч = 0;
			Пока Сч < ТаблицаПоТоварамПоОрдерамБезПраваПродажи.Количество() Цикл

				СтрокаТаблицы = ТаблицаПоТоварамПоОрдерамБезПраваПродажи.Получить(Сч);
				Если Не СтрокаТаблицы.БезПраваПродажи Тогда
					ТаблицаПоТоварамПоОрдерамБезПраваПродажи.Удалить(СтрокаТаблицы);
				Иначе
					Сч = Сч + 1;
				КонецЕсли;

			КонецЦикла;

			// Если осталась хоть одна строка., то делаем движения.
			Если ТаблицаПоТоварамПоОрдерамБезПраваПродажи.Количество() > 0 Тогда 

				НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

				// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
				ТаблицаДвиженийРезервы = НаборДвижений.Выгрузить();
				ТаблицаДвиженийРезервы.Очистить();
				ТаблицаДвижений = ТаблицаДвиженийРезервы.Скопировать();

				// Заполним таблицу движений.
				ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамПоОрдерамБезПраваПродажи, ТаблицаДвижений);

				НаборДвижений.мПериод            = Дата;
				НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

				Если Не Отказ Тогда
					Движения.ТоварыВРезервеНаСкладах.ВыполнитьРасход();
				КонецЕсли;

			КонецЕсли;

			ТаблицаДвижений.Очистить();

			// Сначала удалим из таблицы строки, по которым не надо списывать резерв.
			ТаблицаПоТареПоОрдерамБезПраваПродажи = ТаблицаПоТаре.Скопировать();
			ТаблицаПоТареПоОрдерамБезПраваПродажи.Колонки.ДокументПолучения.Имя = "ДокументРезерва";
			Сч = 0;
			Пока Сч < ТаблицаПоТареПоОрдерамБезПраваПродажи.Количество() Цикл

				СтрокаТаблицы = ТаблицаПоТареПоОрдерамБезПраваПродажи.Получить(Сч);
				Если Не СтрокаТаблицы.БезПраваПродажи Тогда
					ТаблицаПоТареПоОрдерамБезПраваПродажи.Удалить(СтрокаТаблицы);
				Иначе
					Сч = Сч + 1;
				КонецЕсли;

			КонецЦикла;

			// Если осталась хоть одна строка., то делаем движения.
			Если ТаблицаПоТареПоОрдерамБезПраваПродажи.Количество() > 0 Тогда 

				// Заполним таблицу движений.
				ЗагрузитьВТаблицуЗначений(ТаблицаПоТареПоОрдерамБезПраваПродажи, ТаблицаДвижений);

				НаборДвижений.мПериод            = Дата;
				НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

				Если Не Отказ Тогда
					Движения.ТоварыВРезервеНаСкладах.ВыполнитьРасход();
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	// Резервирование по заказам покупателей
	// Сначала удалим из таблицы строки, по которым не надо ничего резервировать
	// (реквизит ЗаказПокупателя пуст)
	ТаблицаПоТоварамЗаказамПокупателей = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамЗаказамПокупателей.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамЗаказамПокупателей.Получить(Сч);
		Если ЗначениеНеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) Тогда
			ТаблицаПоТоварамЗаказамПокупателей.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;

	Если ТаблицаПоТоварамЗаказамПокупателей.Количество() > 0 Тогда

		ТаблицаПоТоварамЗаказамПокупателей.Колонки.ЗаказПокупателя.Имя = "ДокументРезерва";

		НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвиженийРезервы = НаборДвижений.Выгрузить();
		ТаблицаДвиженийРезервы.Очистить();
		ТаблицаДвижений = ТаблицаДвиженийРезервы.Скопировать();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамЗаказамПокупателей, ТаблицаДвижений);

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ТоварыВРезервеНаСкладах.ВыполнитьПриход();
		КонецЕсли;

		ТаблицаДвижений.Очистить();
		
	КонецЕсли;
	
		// Теперь зарезервируем возвратную тару
	// Сначала удалим из таблицы строки, по которым не надо ничего резервировать
	// (реквизит ЗаказПокупателя пуст)
	ТаблицаПоТареЗаказамПокупателей = ТаблицаПоТаре.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТареЗаказамПокупателей.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТареЗаказамПокупателей.Получить(Сч);
		Если ЗначениеНеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) Тогда
			ТаблицаПоТареЗаказамПокупателей.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;

	Если ТаблицаПоТареЗаказамПокупателей.Количество() > 0 Тогда

		ТаблицаПоТареЗаказамПокупателей.Колонки.ЗаказПокупателя.Имя = "ДокументРезерва";

		НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвиженийРезервы = НаборДвижений.Выгрузить();
		ТаблицаДвиженийРезервы.Очистить();
		ТаблицаДвижений = ТаблицаДвиженийРезервы.Скопировать();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТареЗаказамПокупателей, ТаблицаДвижений);

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ТоварыВРезервеНаСкладах.ВыполнитьПриход();
		КонецЕсли;

		ТаблицаДвижений.Очистить();

	КонецЕсли;


	Если ОтражатьВУправленческомУчете Тогда
		
		// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах.
		
		НаборДвижений = Движения.ПартииТоваровНаСкладах;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвиженийПартииТоваровНаСкладах = НаборДвижений.Выгрузить();
		ТаблицаДвиженийПартииТоваровНаСкладах.Очистить();
		ТаблицаДвижений = ТаблицаДвиженийПартииТоваровНаСкладах.Скопировать();
		
		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
		
		// Недостающие поля.
		ЗаполнитьПоляПартииТоваровНаСкладахУпр(ТаблицаПоТоварам, СтруктураШапкиДокумента, ТаблицаДвижений, ОпределитьСтатусПартииПрихода(), УчетнаяПолитика.СпособОценкиМПЗ);
		
		// Код операции - поступление
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.Поступление, "КодОперации");
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.ПартииТоваровНаСкладах.ВыполнитьПриход();
		КонецЕсли;
		
		// При поступлении по ордеру нужно сторнировать партию ордера
		Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда

			ТаблицаДвижений.Очистить();

			ТаблицаПартииПоОрдерам = ТаблицаПоТоварам.Скопировать();
			ТаблицаПартииПоОрдерам.Колонки.Добавить("ДокументОприходования");
			
			Сч = 0;
			Пока Сч < ТаблицаПартииПоОрдерам.Количество() Цикл
				СтрокаТаблицы = ТаблицаПартииПоОрдерам.Получить(Сч);
				Если СтрокаТаблицы.БезПраваПродажи = Истина Тогда
					ТаблицаПартииПоОрдерам.Удалить(СтрокаТаблицы);
				Иначе

					// Документ оприходования - приходный ордрер
					СтрокаТаблицы.ДокументОприходования = СтрокаТаблицы.ДокументПолучения;
					Сч = Сч + 1;
				КонецЕсли;
			КонецЦикла;
			
			Если ТаблицаПартииПоОрдерам.Количество() > 0 Тогда

				// Заполним таблицу движений.
				ЗагрузитьВТаблицуЗначений(ТаблицаПартииПоОрдерам, ТаблицаДвижений);
				
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ПоОрдеру, "СтатусПартии");
				ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
				

				Для каждого Строка Из ТаблицаДвижений Цикл
					Строка.Количество = - Строка.Количество;
				КонецЦикла;

				ТаблицаДвижений.ЗаполнитьЗначения(0, "Стоимость");
			
				// Код операции - поступление по ордеру (сторно)
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПоступлениеПоОрдеру, "КодОперации");

				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

				Если Не Отказ Тогда
					Движения.ПартииТоваровНаСкладах.ВыполнитьПриход();
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;
		
		// ТОВАРЫ ПО РЕГИСТРУ Закупки.
		
		НаборДвижений = Движения.Закупки;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвиженийЗакупки = НаборДвижений.Выгрузить();
		ТаблицаДвиженийЗакупки.Очистить();
		ТаблицаДвижений = ТаблицаДвиженийЗакупки.Скопировать();
		
		// Стоимость в регистре Закупки должна быть с НДС при любых настройках НеВключатьНДСВСтоимостьПартий.
		КопияТаблицыТоваров = ТаблицаПоТоварам.Скопировать();
		КопияТаблицыТоваров.ЗагрузитьКолонку(КопияТаблицыТоваров.ВыгрузитьКолонку("СуммаУпр"), "Стоимость");

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(КопияТаблицыТоваров, ТаблицаДвижений);
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,      "Подразделение");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "ДокументЗакупки");
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.Закупки.ВыполнитьДвижения();
		КонецЕсли;
		
		// ПРОЧЕЕ ПО РЕГИСТРУ Закупки.
		
		НаборДвижений = Движения.Закупки;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвиженийЗакупки = НаборДвижений.Выгрузить();
		ТаблицаДвиженийЗакупки.Очистить();
		ТаблицаДвижений = ТаблицаДвиженийЗакупки.Скопировать();
		
		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоПрочее, ТаблицаДвижений);
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "ДокументЗакупки");
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.Закупки.ВыполнитьДвижения();
		КонецЕсли;
		
		
		// ТАРА ПО РЕГИСТРУ ПартииТоваровНаСкладах.
		
		НаборДвижений = Движения.ПартииТоваровНаСкладах;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = ТаблицаДвиженийПартииТоваровНаСкладах.Скопировать();
		
		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);
		
		// Недостающие поля.
		ЗаполнитьПоляПартииТоваровНаСкладахУпр(ТаблицаПоТаре, СтруктураШапкиДокумента, ТаблицаДвижений, 
		Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, УчетнаяПолитика.СпособОценкиМПЗ);
		
		// Код операции - поступление
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.Поступление, "КодОперации");
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.ПартииТоваровНаСкладах.ВыполнитьПриход();
		КонецЕсли;
		
		
		// При поступлении по ордеру нужно сторнировать партию ордера
		Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда

			ТаблицаДвижений.Очистить();

			ТаблицаПартииПоОрдерам = ТаблицаПоТаре.Скопировать();
			ТаблицаПартииПоОрдерам.Колонки.Добавить("ДокументОприходования");
			
			Сч = 0;
			Пока Сч < ТаблицаПартииПоОрдерам.Количество() Цикл
				СтрокаТаблицы = ТаблицаПартииПоОрдерам.Получить(Сч);
				Если СтрокаТаблицы.БезПраваПродажи = Истина Тогда
					ТаблицаПартииПоОрдерам.Удалить(СтрокаТаблицы);
				Иначе

					// Документ оприходования - приходный ордрер
					СтрокаТаблицы.ДокументОприходования = СтрокаТаблицы.ДокументПолучения;
					Сч = Сч + 1;
				КонецЕсли;
			КонецЦикла;
			
			Если ТаблицаПартииПоОрдерам.Количество() > 0 Тогда

				// Заполним таблицу движений.
				ЗагрузитьВТаблицуЗначений(ТаблицаПартииПоОрдерам, ТаблицаДвижений);
				
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ПоОрдеру, "СтатусПартии");
				ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
				

				Для каждого Строка Из ТаблицаДвижений Цикл
					Строка.Количество = - Строка.Количество;
				КонецЦикла;

				ТаблицаДвижений.ЗаполнитьЗначения(0, "Стоимость");
			
				// Код операции - поступление по ордеру (сторно)
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПоступлениеПоОрдеру, "КодОперации");

				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

				Если Не Отказ Тогда
					Движения.ПартииТоваровНаСкладах.ВыполнитьПриход();
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ТоварыИТараПоРегистрамОстатковИПартийУпр()	

// Проводит табличную часть "Оплата поставщикам" по регистрам
//
// Параметры:
//  ТаблицаПоОплатаПоставщикам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ОплатаПоставщикамУпр(РежимПроведения, ТаблицаПоОплатаПоставщикам, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.ВзаиморасчетыСКонтрагентами;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	ЗагрузитьВТаблицуЗначений(ТаблицаПоОплатаПоставщикам, ТаблицаДвижений);
	
	НаборДвижений.мПериод           = Дата;
	НаборДвижений.мТаблицаДвижений  = ТаблицаДвижений;
	
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ОплатаПоставщикам", СтруктураШапкиДокумента, Отказ, Заголовок, "СуммаВзаиморасчетов")
	КонецЕсли;
					
	Если Не Отказ Тогда
		Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();
	КонецЕсли;
	
КонецПроцедуры // ОплатаПоставщикамУпр()

// По результатам запросовформируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения            - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента    - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам           - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре              - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  ТаблицаПоВыданныеАвансы    - таблица значений, содержащая данные для проведения и проверки ТЧ "ТаблицаПоВыданныеАвансы",
//  ТаблицаПоОплатаПоставщикам - таблица значений, содержащая данные для проведения и проверки ТЧ "ТаблицаПоОплатаПоставщикам",
//  ТаблицаПоПрочее            - таблица значений, содержащая данные для проведения и проверки ТЧ "ТаблицаПоПрочее",
//  Отказ                      - флаг отказа в проведении,
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатаПоставщикам, ТаблицаПоПрочее,
	                Отказ, Заголовок);

	ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента,
	                ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатаПоставщикам, ТаблицаПоПрочее,
	                Отказ, Заголовок);

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента,
	                ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатаПоставщикам, ТаблицаПоПрочее,
	                Отказ, Заголовок);

	ДвиженияПоРегистрамВзаиморасчетовДляНДС(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоОплатаПоставщикам, Отказ, Заголовок);

	ДвиженияРегистровПодсистемыНДС(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоПрочее, Отказ, Заголовок);

	ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента,
	                ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатаПоставщикам, ТаблицаПоПрочее,
	                Отказ, Заголовок);

	// По партиям, оприходованным по ордеру с парвом продажи, возможно следует выполнить 
	// корректировку списания
	Если ОтражатьВУправленческомУчете
		И ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда

		Движения.ПартииТоваровНаСкладах.Записать();

		УчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата);

		Если УчетнаяПолитика.СписыватьПартииПриПроведенииДокументов Тогда

			ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());

			Если Движения.СписанныеТовары.Количество()>0 Тогда
				ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
				ЗаписьРегистрации.Период = Дата;
			КонецЕсли;
			
		Иначе

			// В неоперативном режиме границы последовательностей сдвигаются назад, если они позже документа.
			Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
				СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация, ОтражатьВУправленческомУчете, Ложь, Ложь)
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатаПоставщикам, ТаблицаПоПрочее,
	Отказ, Заголовок);

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
	НаборДвижений = Движения.ТоварыОрганизаций;

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		
		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.ТоварыОрганизаций.ВыполнитьПриход();
		КонецЕсли;
			
	Иначе // По ордеру

		// По ордеру нужно сторнировать движения по товарам организаций,
		// если в ордере была указана не та организация.
		// Удалим строки, по которым не нужно делать движений (организации совпадают).
		КопияТаблицыТоваров = ТаблицаПоТоварам.Скопировать();
		КолвоЭлементовКоллекции = КопияТаблицыТоваров.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
			ЭлементКоллекции = КопияТаблицыТоваров[КолвоЭлементовКоллекции - ОбратныйИндекс];
			Если ЭлементКоллекции.ОрганизацияДокументаПолучения = СтруктураШапкиДокумента.Организация Тогда
				КопияТаблицыТоваров.Удалить(ЭлементКоллекции);
			КонецЕсли;
		КонецЦикла;

		Если КопияТаблицыТоваров.Количество() > 0 Тогда // Есть что проводить.

			// Вначале сторнируем
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(КопияТаблицыТоваров, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗагрузитьКолонку(КопияТаблицыТоваров.ВыгрузитьКолонку("ОрганизацияДокументаПолучения"), "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ТоварыОрганизаций.ВыполнитьРасход();
			КонецЕсли;

			// Теперь сделаем движения с правильной организацией.
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ТоварыОрганизаций.ВыполнитьПриход();
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатаПоставщикам, ТаблицаПоПрочее,
	Отказ, Заголовок);
	
	// По партиям, оприходованным по ордеру с правом продажи, возможно следует выполнить корректировку списания
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		
		// ПО РЕГИСТРУ СписанныеТовары: формируем запись с указанием приходного ордера, которая будет обрабатываться при списании
		НаборДвижений = Движения.СписанныеТовары;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.ПоступлениеПриходныйОрдер = СкладОрдер;
		
		// Недостающие поля.
		Инд = 0;
		Для каждого Строка Из ТаблицаДвижений Цикл
			Инд = Инд+1;
			Строка.НомерСтрокиДокумента = Инд;
		КонецЦикла;
		
		ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
		ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
		
		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.СписанныеТовары.ВыполнитьДвижения();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// По результатам запросовформируем движения по регистрам упр. учета.
//
// Параметры: 
//  РежимПроведения            - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента    - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам           - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре              - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  ТаблицаПоВыданныеАвансы    - таблица значений, содержащая данные для проведения и проверки ТЧ "ТаблицаПоВыданныеАвансы",
//  ТаблицаПоОплатаПоставщикам - таблица значений, содержащая данные для проведения и проверки ТЧ "ТаблицаПоОплатаПоставщикам",
//  ТаблицаПоПрочее            - таблица значений, содержащая данные для проведения и проверки ТЧ "ТаблицаПоПрочее",
//  Отказ                      - флаг отказа в проведении,
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатаПоставщикам, ТаблицаПоПрочее,
	Отказ, Заголовок);
	
	Если Не ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	// ПО РЕГИСТРУ ВзаиморасчетыСПодотчетнымиЛицами.
	ДвиженияПоПодотчетникамУпр(СтруктураШапкиДокумента, ТаблицаПоВыданныеАвансы, РежимПроведения, Отказ, Заголовок);

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
	// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах.
	// ТАРА ПО РЕГИСТРУ ТоварыНаСкладах.
	// ТАРА ПО РЕГИСТРУ ПартииТоваровНаСкладах.
	// ТОВАРЫ ПО РЕГИСТРУ Закупки
	ТоварыИТараПоРегистрамОстатковИПартий(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоПрочее, Отказ, Заголовок);

	// ПО РЕГИСТРУ ВзаиморасчетыСКонтрагентами
	ОплатаПоставщикамУпр(РежимПроведения, ТаблицаПоОплатаПоставщикам, Отказ, Заголовок, СтруктураШапкиДокумента);

	// ТАРА ПО РЕГИСТРУ ТоварыПолученные.
	НаборДвижений = Движения.ТоварыПолученные;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.
	ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара,"СтатусПолучения");

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ТоварыПолученные.ВыполнитьПриход();
	КонецЕсли;

	Если Не Отказ Тогда

		СтруктДопПараметры = Новый Структура;
		СтруктДопПараметры.Вставить("ЕстьНДС", Истина);
		ДвиженияПоПрочимЗатратамУпр( ЭтотОбъект, ТаблицаПоПрочее, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета, СтруктДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()	

// Формирует движения по регистрам взаиморасчетов для НДС
//
// Параметры:
//  РежимПроведения            - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента    - выборка из результата запроса по шапке документа,
//  ТаблицаПоОплатаПоставщикам - таблица значений, содержащая данные для проведения и проверки ТЧ ОплатаПоставщикам,
//  Отказ                      - флаг отказа в проведении,
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамВзаиморасчетовДляНДС(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоОплатаПоставщикам, Отказ, Заголовок)

	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;

	НаборДвиженийСПоставщиками = Движения.ВзаиморасчетыСПоставщикамиДляНДС;

	// Получим таблицы значений, совпадающие со струкутрой набора записей регистра.
	ТаблицаДвиженийСПоставщиками = НаборДвиженийСПоставщиками.Выгрузить();
	
	Для каждого СтрокаТаблицы Из ТаблицаПоОплатаПоставщикам Цикл
	
		СтрокаТаблицыДвижений = ТаблицаДвиженийСПоставщиками.Добавить();

		СтрокаТаблицыДвижений.Организация        = СтруктураШапкиДокумента.Организация;
		СтрокаТаблицыДвижений.ДоговорКонтрагента = СтрокаТаблицы.ДоговорКонтрагента;
		СтрокаТаблицыДвижений.Сделка             = СтрокаТаблицы.Сделка;

		СтрокаТаблицыДвижений.Сумма = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма,
		                                                         СтруктураШапкиДокумента.ВалютаДокумента,
		                                                         мВалютаРегламентированногоУчета,
		                                                         СтруктураШапкиДокумента.КурсДокумента,
		                                                         1,
		                                                         СтруктураШапкиДокумента.КратностьДокумента,
		                                                         1);
	
	КонецЦикла;

	// По регистру ВзаиморасчетыСПоставщикамиДляНДС.
	НаборДвиженийСПоставщиками.мПериод            = Дата;
	НаборДвиженийСПоставщиками.мТаблицаДвижений   = ТаблицаДвиженийСПоставщиками;

	Если Не Отказ Тогда
		Движения.ВзаиморасчетыСПоставщикамиДляНДС.ВыполнитьРасход();
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамВзаиморасчетовДляНДС()

Процедура ДвиженияРегистровПодсистемыНДС(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоПрочее, Отказ, Заголовок);
	
	ТаблицыДокумента = Новый Структура();
	ТаблицыДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
	ТаблицыДокумента.Вставить("ТаблицаПоПрочее",  ТаблицаПоПрочее);
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра НДСПокупки.
	ТаблицаДвиженийПокупки = Движения.НДСПокупки.Выгрузить();
	ТаблицаДвиженийПокупки.Очистить();
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра НДСПартииТоваров.
	ТаблицаДвиженийПартии = Движения.НДСПартииТоваров.Выгрузить();
	ТаблицаДвиженийПартии.Очистить();
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра НДСКосвенныеРасходы.
	ТаблицаДвиженийКосвенных = Движения.НДСКосвенныеРасходы.Выгрузить();
	ТаблицаДвиженийКосвенных.Очистить();
	
	Для Каждого ТаблицаДокумента Из ТаблицыДокумента Цикл

		ИдТабЧасти = ТаблицаДокумента.Ключ;
		ТабЧасть   = ТаблицаДокумента.Значение;

		Если ТабЧасть.Количество()> 0 Тогда 
			СформироватьДвиженияПоРегиструНДСПокупки(СтруктураШапкиДокумента, ТабЧасть, ИдТабЧасти, ТаблицаДвиженийПокупки);
			
			Если ИдТабЧасти = "ТаблицаПоТоварам" Тогда
				СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, ТабЧасть, ИдТабЧасти, ТаблицаДвиженийПартии);
			КонецЕсли;	
				
			Если ИдТабЧасти = "ТаблицаПоПрочее" Тогда
				СформироватьДвиженияПоступленияПоРегиструНДСКосвенныхРасходов(СтруктураШапкиДокумента, ТабЧасть, ИдТабЧасти, ТаблицаДвиженийКосвенных);
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаДвиженийПокупки.Количество() > 0 Тогда
		Движения.НДСПокупки.мПериод          = Дата;
		Движения.НДСПокупки.мТаблицаДвижений = ТаблицаДвиженийПокупки;
		Движения.НДСПокупки.ДобавитьДвижение();
		Движения.НДСПокупки.Записать();
	КонецЕсли;
	
	Если ТаблицаДвиженийПартии.Количество() > 0 Тогда
		Движения.НДСПартииТоваров.мПериод            = Дата;
		Движения.НДСПартииТоваров.мТаблицаДвижений   = ТаблицаДвиженийПартии;
		Движения.НДСПартииТоваров.ВыполнитьПриход();
		Движения.НДСПартииТоваров.Записать();
	КонецЕсли;
	
	Если ТаблицаДвиженийКосвенных.Количество() > 0 Тогда
		Движения.НДСКосвенныеРасходы.мПериод          = Дата;
		Движения.НДСКосвенныеРасходы.мТаблицаДвижений = ТаблицаДвиженийКосвенных;
		Движения.НДСКосвенныеРасходы.ДобавитьДвижение();
		Движения.НДСКосвенныеРасходы.Записать();
	КонецЕсли;
	
	// Далее необходимо провести подчиненные счета-фактуры, для того чтобы сформировались события
	// "Получен счет-фактура"
	ОбработкаПодчиненныхДокументовСчетФактутра(Истина, ТаблицаДвиженийПокупки);
	
КонецПроцедуры // ДвиженияПоРегистрамПодсистемыНДС()

Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке)

	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"       , "ВалютаУправленческогоУчета"    ,     "ВалютаУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"       , "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика" , "НеВключатьНДСВСтоимостьПартий" , "НеВключатьНДСВСтоимостьПартий");

КонецПроцедуры // ДополнитьДеревоПолейЗапросаПоШапкеУпр()	

Процедура ДополнитьСтруктуруПолейТабличнойЧастиПрочееУпр(СтруктураПолей)

	СтруктураПолей.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппа");

КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиПрочееУпр()	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ ПОДЧИНЕННЫМИ ДОКУМЕНТАМИ

// Процедура проведения подчиненных документов счет-фактура.
// Выбирает все счета-фактуры в которых в качестве документа
// основания указан текущий документ и перепроводит их.
//
Процедура ОбработкаПодчиненныхДокументовСчетФактутра(Провести = Истина, ТаблицаДвиженийПокупки = "")

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
					|	СчетФактура.Ссылка КАК Ссылка
					|ИЗ
					|	Документ.СчетФактураПолученный КАК СчетФактура

					|ГДЕ
					|	СчетФактура.ПометкаУдаления = Ложь И
					|	СчетФактура.ДокументОснование.Ссылка = &ДокументОснование

					|УПОРЯДОЧИТЬ ПО
					|	Ссылка";
	
	ТабРез = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрРез Из ТабРез Цикл
		ТекСчетФактура = СтрРез.Ссылка.ПолучитьОбъект();
		
		Если Провести Тогда
			// строки движений по документу "Авансовый отчет", которые относятся к данной СФ 
			СтруктураПоиска = Новый Структура("СчетФактура, Событие", ТекСчетФактура.Ссылка, Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком);
			ДвиженияПоступления = ТаблицаДвиженийПокупки.НайтиСтроки(СтруктураПоиска);
			
			// таблица движений по документу "СчетФактураПолученный" 
			ТаблицаДвиженийПокупкиСФ = ТаблицаДвиженийПокупки.Скопировать();
			ТаблицаДвиженийПокупкиСФ.Очистить();
			
			// заполняем таблицу ТаблицаДвиженийПокупкиСФ по данным таблицы ТаблицаДвиженийПокупки 
			Для Каждого СтрокаДвиженияАО Из ДвиженияПоступления Цикл
				
				СтрокаДвиженияСФ = ТаблицаДвиженийПокупкиСФ.Добавить();

				Для Каждого Колонка Из ТаблицаДвиженийПокупки.Колонки Цикл
					Если Колонка.Имя = "Событие" Тогда
						// переопределяем событие в движении по счету фактуре
						СтрокаДвиженияСФ[Колонка.Имя] = Перечисления.СобытияПоНДСПокупки.ПолученСчетФактура;
					Иначе
						// копируем параметр
						СтрокаДвиженияСФ[Колонка.Имя] = СтрокаДвиженияАО[Колонка.Имя];
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
			// "подсовываем" сформированные движения к документу (эмулируем проведение)
			ТекСчетФактура.Движения.НДСПокупки.мПериод = Дата;
			ТекСчетФактура.Движения.НДСПокупки.мТаблицаДвижений = ТаблицаДвиженийПокупкиСФ;
			ТекСчетФактура.Движения.НДСПокупки.ДобавитьДвижение();
			ТекСчетФактура.Проведен = Провести;
			ТекСчетФактура.Записать();
			
		Иначе
			// делаем счет-фактуру непроведенным
			ТекСчетФактура.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			
		КонецЕсли;
		
		
	КонецЦикла;

КонецПроцедуры // ОбработкаПодчиненныхДокументовСчетФактутра()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	ОбработкаЗаполненияУпр(Основание);

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	// Проверка заполнения единицы измерения мест и количества мест
	ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

	// Заполнить склад и ордер в табличных частях
	УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
	СкладИзШапки    =  (УказаниеСкладов <> Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
	                 И (УказаниеСкладов <> Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления);

	ЗаполнитьСкладИОрдерВСтрокахТабЧасти(ЭтотОбъект, Товары,         СкладИзШапки);
	ЗаполнитьСкладИОрдерВСтрокахТабЧасти(ЭтотОбъект, ВозвратнаяТара, СкладИзШапки);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + ОплатаПоставщикам.Итог("Сумма") + Прочее.Итог("Сумма");

	//БАЛАНС (04.12.2007)                       
	//
	
	//Адиянов<<<
	Если НЕ Отказ И мПроведениеИзФормы Тогда
		ПроверкаЗаполненияСтатьиЗатратУпр(ЭтотОбъект,Отказ);
	КонецЕсли; 		
	//Адиянов>>>

	ЗарегистрироватьОбъект(ЭтотОбъект,Отказ,мПроведениеИзФормы);
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Для определения где нужно проверять склад: в шапке или в ТЧ.
	УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
	СкладВТабличнойЧасти =    (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
		                  Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления);
	СтруктураШапкиДокумента.Вставить("СкладВТабличнойЧасти", СкладВТабличнойЧасти);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = СформироватьДеревоПолейЗапросаПоШапке();
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер", "ВидСклада",       "ВидСклада");
	Иначе
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер", "Склад.ВидСклада", "ВидСклада");
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер", "Склад",           "СкладПриходногоОрдера");
	КонецЕсли;

	// Дополним полями, нужными для упр. учета
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = СформироватьСтруктуруПолейТовары();

	СтруктураПолей.Вставить("Услуга"                        , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                         , "Номенклатура.Набор");
	СтруктураПолей.Вставить("ЗаказПокупателя"               , "ЗаказПокупателя");
	СтруктураПолей.Вставить("Склад"                         , "Склад");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя"         , "ЗаказПокупателя.Склад");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
	                                                "ЗаказПокупателя.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Вставить("Поставщик"                     , "Поставщик"); 
	СтруктураПолей.Вставить("ДокументПолучения"             , "ПриходныйОрдер");
	СтруктураПолей.Вставить("ОрганизацияДокументаПолучения" , "ПриходныйОрдер.Организация");
	СтруктураПолей.Вставить("БезПраваПродажи"               , "ПриходныйОрдер.БезПраваПродажи");
	СтруктураПолей.Вставить("СчетФактура"                   , "СчетФактура"); 

	РезультатЗапросаПоТоварам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = СформироватьСтруктуруПолейТара();
	СтруктураПолей.Вставить("Набор"                         , "Номенклатура.Набор");
	СтруктураПолей.Вставить("ЗаказПокупателя"               , "ЗаказПокупателя");
	СтруктураПолей.Вставить("ВалютаДоговора"                , "ДоговорКонтрагента.ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить("ДоговорКонтрагента"            , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("ДоговорОрганизация"            , "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("Склад"                         , "Склад");
	СтруктураПолей.Вставить("ДокументПолучения"             , "ПриходныйОрдер");
	СтруктураПолей.Вставить("ОрганизацияДокументаПолучения" , "ПриходныйОрдер.Организация");
	СтруктураПолей.Вставить("БезПраваПродажи"               , "ПриходныйОрдер.БезПраваПродажи");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя"         , "ЗаказПокупателя.Склад");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
	                        "ЗаказПокупателя.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Вставить("Контрагент"                    , "Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента"            , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("Сделка"                        , "Сделка");

	РезультатЗапросаПоТаре = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Авансы".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("РасходныйКассовыйОрдер", "РасходныйКассовыйОрдер");
	СтруктураПолей.Вставить("Сумма", "Сумма");

	РезультатЗапросаПоВыданнымАвансам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВыданныеАвансы", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Оплата поставщикам".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Контрагент"              , "Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента"      , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетов"   , "ДоговорКонтрагента.ВедениеВзаиморасчетов");
	СтруктураПолей.Вставить("РасчетыВУсловныхЕдиницах", "ДоговорКонтрагента.РасчетыВУсловныхЕдиницах");
	СтруктураПолей.Вставить("ВалютаДоговора"          , "ДоговорКонтрагента.ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить("ДоговорОрганизация"      , "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("Сделка"                  , "Сделка");
	СтруктураПолей.Вставить("Сумма"                   , "Сумма");
	СтруктураПолей.Вставить("СуммаВзаиморасчетов"     , "СуммаВзаиморасчетов");

	РезультатЗапросаПоОплатеПоставщикам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОплатаПоставщикам", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Прочее".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Содержание",          "Содержание");
	СтруктураПолей.Вставить("Номенклатура",        "Номенклатура");
	СтруктураПолей.Вставить("Услуга",              "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор" ,              "Номенклатура.Набор");
	СтруктураПолей.Вставить("Заказ",               "Заказ");
	СтруктураПолей.Вставить("СтатьяЗатрат",        "СтатьяЗатрат");
	СтруктураПолей.Вставить("ОтнесениеРасходовКДеятельностиЕНВД", "СтатьяЗатрат.ОтнесениеРасходовКДеятельностиЕНВД");
	СтруктураПолей.Вставить("Сумма",               "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС",           "СтавкаНДС");
	СтруктураПолей.Вставить("НДС",                 "СуммаНДС");
	СтруктураПолей.Вставить("Подразделение",       "Подразделение");
	СтруктураПолей.Вставить("Поставщик",           "Поставщик"); 
	СтруктураПолей.Вставить("СчетФактура",         "СчетФактура"); 
	
	//Адиянов<<< Начало СтатьяЗатратУпр
	СтруктураПолей.Вставить("СтатьяЗатратУпр",         "СтатьяЗатратУпр"); 
	//Адиянов>>> Конец СтатьяЗатратУпр
	
	// Дополним полями, нужными для упр. и регл. учета
	ДополнитьСтруктуруПолейТабличнойЧастиПрочееУпр(СтруктураПолей);

	РезультатЗапросаПоПрочее = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Прочее", СтруктураПолей);

	// Подготовим таблицы для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	ТаблицаПоТаре    = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);
	ТаблицаПоАвансам = РезультатЗапросаПоВыданнымАвансам.Выгрузить();
	ТаблицаПоОплате  = ПодготовитьТаблицуПоОплате(РезультатЗапросаПоОплатеПоставщикам, СтруктураШапкиДокумента);
	ТаблицаПоПрочее  = ПодготовитьТаблицуПрочие(РезультатЗапросаПоПрочее, СтруктураШапкиДокумента);

	//Проверим на возможность проведения в БУ и НУ
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете или СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда

		Для Каждого СтрокаОплаты из ТаблицаПоОплате Цикл
			ПроверкаВозможностиПроведенияВ_БУ_НУ(СтрокаОплаты.ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
			                                     СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
			                                     СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
			                                     мВалютаРегламентированногоУчета, Истина, Отказ, Заголовок,
			                                     "Оплата поставщикам, строка "+СтрокаОплаты.НомерСтроки+": ",
			                                     СтрокаОплаты.ВалютаДоговора,
			                                     СтрокаОплаты.РасчетыВУсловныхЕдиницах);
		КонецЦикла;

	КонецЕсли;

	// Проверить заполнение ТЧ
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиПрочее(ТаблицаПоПрочее, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВыданныеАвансы(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиОплатаПоставщикам(ТаблицаПоОплате, СтруктураШапкиДокумента, Отказ, Заголовок);

	ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость, мВалютаРегламентированногоУчета);
	ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоПрочее,  СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость, мВалютаРегламентированногоУчета);

	// Проверить заполнение подразделения, если нужно. 
	Если (Константы.ОбязательнаяУстановкаПодразделений.Получить() = Истина) Тогда 
		Если (Подразделение = Справочники.Подразделения.ПустаяСсылка()) Тогда 
			Отказ = Истина;
			Сообщить("Перед проведением, установите подразделение.", СтатусСообщения.Важное);
		КонецЕсли;
	КонецЕсли;
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоАвансам, ТаблицаПоОплате, ТаблицаПоПрочее,
							Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбработкаПодчиненныхДокументовСчетФактутра(Ложь);
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	// Удаление записей регистрации из всех последовательностей
	Для Каждого НаборЗаписейРегистрацииВПоследовательности Из ПринадлежностьПоследовательностям Цикл
		НаборЗаписейРегистрацииВПоследовательности.Очистить();
	КонецЦикла;
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

//БАЛАНС (04.12.2007)                       
//
мПроведениеИзФормы = Ложь; 