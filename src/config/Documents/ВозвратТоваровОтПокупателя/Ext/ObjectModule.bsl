Перем мВалютаРегламентированногоУчета Экспорт;
Перем мПорядокСписанияПартий; // (Общ)

//БАЛАНС (04.12.2007)                       
//
Перем мПроведениеИзФормы Экспорт; 

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьВозвратаОтПокупателя()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Контрагент КАК Контрагент,
	|	Организация,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Номенклатура.Код                КАК Код,
	|		Номенклатура.Артикул            КАК Артикул,
	//11.09.2017
	|		Номенклатура.ВидТовара как ВидТовара,
	
	|		Количество,
	|		ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|		Цена,
	|		Сумма,
	|		СуммаНДС,
	|		ПроцентСкидкиНаценки КАК Скидка,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		СерияНоменклатуры КАК Серия
	|	)
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратТоваровОтПокупателя_Накладная";

	Макет = ПолучитьМакет("Накладная");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Возврат от покупателя");
	ТабДокумент.Вывести(ОбластьМакета);

	ПредставлениеОрганизации = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ПредставлениеКонтрагента = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата), "ПолноеНаименование,");

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеКонтрагента;
	ОбластьМакета.Параметры.Поставщик = Шапка.Контрагент;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.Получатель = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	ЕстьСкидки = Ложь;
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		Если ВыборкаСтрокТовары.Скидка <> 0 Тогда
			ЕстьСкидки = Истина;
		КонецЕсли; 
	КонецЦикла;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьСуммы);

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	Если НЕ ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("СуммаБезСкидки").ШиринаКолонки +
											Макет.Область("СуммаСкидки").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;
	СуммаНП  = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар       = ВыборкаСтрокТовары.Товар + ПредставлениеСерий(ВыборкаСтрокТовары);
		
		//+++ 11.09.2017 -- для АКБ и Акс - нужен Артикул
		Если ВыборкаСтрокТовары.ВидТовара = перечисления.ВидыТоваров.АКБ 
			или ВыборкаСтрокТовары.ВидТовара = перечисления.ВидыТоваров.Аксессуары Тогда
			ОбластьДанных.Параметры.Товар = ВыборкаСтрокТовары.Артикул+": "+ОбластьДанных.Параметры.Товар;			
		КонецЕсли;
	    //+++)
		
		ТабДокумент.Присоединить(ОбластьДанных);

		Скидка = ВыборкаСтрокТовары.Сумма  / (100 - ВыборкаСтрокТовары.Скидка) * ВыборкаСтрокТовары.Скидка;
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;

	КонецЦикла;

	// Вывести Итого
    ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
	    ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = ФорматСумм(Товары.Итог("СуммаНДС"));
		ТабДокумент.Присоединить(ОбластьСуммы);
	КонецЕсли;

	// Вывести Сумму прописью
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ВыборкаСтрокТовары.Количество()
	+ ", на сумму " + ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьВозвратаОтПокупателя()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "Накладная" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьВозвратаОтПокупателя();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();

	КонецЕсли;
	
	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;

	СписокМакетов.Добавить("Накладная", "Возврат от покупателя");

	ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

#КонецЕсли

// Заполняет в таблице движений по регитстру ПартииТоваровНаСкладах нестандартные поля.
//
// Параметры:
//  ТаблицаТЧ       - таблица значений, соответствующая табличной части документа
//  ТаблицаДвижений - таблица значений, соответствующая набору записей регистра,
//  СтатусПартии    - значение перечисления статусов партий. 
//
Процедура ЗаполнитьПоляПартииТоваровНаСкладахУпр(ТаблицаТЧ, ТаблицаДвижений, СтатусПартии, СтруктураШапкиДокумента, ПерезаполнятьДокумент = Истина)

	Для каждого СтрокаДвижений Из ТаблицаДвижений Цикл

		Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
		Иначе
			СтрокаДвижений.Склад = Неопределено;
		КонецЕсли;

		Если ПерезаполнятьДокумент И Не мПорядокСписанияПартий.Упр = Перечисления.СпособыОценки.ПоСредней Тогда
			СтрокаДвижений.ДокументОприходования = Ссылка;
		КонецЕсли;
		
		СтрокаДвижений.СтатусПартии          = СтатусПартии;

		// Заказ заполняем если его указали в документе и по договору ведется обособленный учет товаров по заказам.
		СтрокаТЧ = ТаблицаТЧ.Найти(СтрокаДвижений.НомерСтроки, "НомерСтроки");
		ОбособленныйУчет = СтруктураШапкиДокумента.ОбособленныйУчет;
		СтрокаДвижений.Заказ = ?(ОбособленныйУчет <> NULL И ОбособленныйУчет 
			    И Не (ЗначениеНеЗаполнено(Сделка)), Сделка, Неопределено);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоляПартииТоваровНаСкладахУпр()

// Процедура выполняет заполнение табличной части по приходному ордеру товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (приходный ордер товаров).
//
Процедура ЗаполнитьТоварыПоОрдеруУпр(ДокументОснование, ТабличнаяЧасть) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

	Если ТабличнаяЧасть = ВозвратнаяТара Тогда
		ИмяТабличнойЧасти = "ВозвратнаяТара";
	Иначе
		ИмяТабличнойЧасти = "Товары";
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокТовары.Номенклатура,
	|	СУММА(ДокТовары.Количество)                        КАК КоличествоПоДокументу,
	|	NULL                                               КАК ЦенаВРознице, " + 
	?(ТабличнаяЧасть = Товары, "
	|	ДокТовары.СерияНоменклатуры,
	|	ДокТовары.ХарактеристикаНоменклатуры, ", "") + "
	|	СУММА(ДокТовары.Количество)                        КАК КоличествоПоСерии, 
	|	МАКСИМУМ(Остатки.КоличествоОстаток)                КАК КоличествоОстатокКомпании
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары." + ИмяТабличнойЧасти + " КАК ДокТовары
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(, ДокументПолучения = &ДокументОснование) КАК Остатки
	|ПО
	|	ДокТовары.Номенклатура = Остатки.Номенклатура" + 
	?(ТабличнаяЧасть = Товары, "
	| И ДокТовары.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры", "") + " 
	|
	|ГДЕ
	|	ДокТовары.Ссылка = &ДокументОснование
	|	И Остатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокТовары.Номенклатура" +
	?(ТабличнаяЧасть = Товары, ",
	|	ДокТовары.СерияНоменклатуры,
	|	ДокТовары.ХарактеристикаНоменклатуры", "");

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти = Товары.Добавить();

			СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество                 = Мин(Выборка.КоличествоОстатокКомпании, Выборка.КоличествоПоСерии);
			СтрокаТабличнойЧасти.ЕдиницаИзмерения           = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
			СтрокаТабличнойЧасти.Коэффициент                = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.СтавкаНДС                  = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			СтрокаТабличнойЧасти.Качество                   = Справочники.Качество.Новый;

			ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, глТекущийПользователь);
		Иначе

			СтрокаТабличнойЧасти = ВозвратнаяТара.Добавить();

			СтрокаТабличнойЧасти.Номенклатура = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество   = Мин(Выборка.КоличествоОстатокКомпании, Выборка.КоличествоПоСерии);

			ЗаполнитьЦенуВозвратнойТарыТабЧастиОтпуск(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		КонецЕсли;

		ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	КонецЦикла; // Выборка.Следующий()

КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

// Процедура выполняет заполнение табличной части Товары по документу основанию.
// При заполнении копируется состав документа.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьТоварыПоОснованию(ДокументОснование) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Качество", Справочники.Качество.Новый);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("СтатусПередачи",     Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию);

	Если ЗначениеНеЗаполнено(Сделка) Тогда
		Запрос.УстановитьПараметр("Сделка", Неопределено);
	Иначе
		Запрос.УстановитьПараметр("Сделка", Сделка);
	КонецЕсли;

	//+АЧ Является ли основание - розничным заказом ? 
	ОснованиеРозничныйЗаказ = ЗначениеЗаполнено(ДокументОснование) 
		и ТипЗнч(ДокументОснование)=ТипЗнч(Документы.ЗаказПокупателя.ПустаяСсылка())
		и ДокументОснование.контрагент=Справочники.Контрагенты.НайтиПоКоду("94143  "); 
	ОРП = неопределено;
	Если ОснованиеРозничныйЗаказ Тогда 
		ОРП = НайтиОРП(ДокументОснование);
	КонецЕсли;

	ОснованиеРеализацияТоваров = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	ОтКомиссионера = (ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);

	МетаданныеДокументаОснования = ДокументОснование.Метаданные();
	ДокументОснованиеИмя = МетаданныеДокументаОснования.Имя;

	ЕстьАвтоматическиеСкидки = ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок",МетаданныеДокументаОснования, "Товары");

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка.ВалютаДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|       Док.Ссылка.КурсВзаиморасчетов
	|   ИНАЧЕ
	|       1
	|   КОНЕЦ                           КАК КурсДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|       Док.Ссылка.КратностьВзаиморасчетов
	|   ИНАЧЕ
	|       1
	|   КОНЕЦ                           КАК КратностьДокумента,
	|	Док.Ссылка.УчитыватьНДС,
	|	Док.Ссылка.СуммаВключаетНДС,
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.ЕдиницаИзмеренияМест,
	|	Док.Коэффициент,
	|	Док.СтавкаНДС,
	|	Док.Количество,
//+++ 29.12.2015 ------ Цена с учетом корректировки - из регистра Продажи---------------------------------
//|	Док.Цена,
	|	ЕстьNull(Продажи.Цена,0) как Цена,
	
	|	Док.ХарактеристикаНоменклатуры,
	|"
	+ ?(ЕстьАвтоматическиеСкидки,"
	|	Док.ПроцентСкидкиНаценки 
	| + Док.ПроцентАвтоматическихСкидок КАК ПроцентСкидкиНаценки,
	|","
	|	Док.ПроцентСкидкиНаценки        КАК ПроцентСкидкиНаценки,
	|")
	+ ?(ОснованиеРеализацияТоваров, "
	|	Док.Качество КАК Качество
	|", "
	|	&Качество КАК Качество
	|");

	ДополнительныеПоляЗапросаРегл = "";

	Если ОснованиеРеализацияТоваров Тогда

		Запрос.Текст = Запрос.Текст + ",
		|	Док.СерияНоменклатуры" + 
			ДополнительныеПоляЗапросаРегл + "
		|"
	КонецЕсли; 

	Если ОтКомиссионера Тогда

		Запрос.Текст = Запрос.Текст + ",
		|	Остатки.КоличествоОстаток          КАК КоличествоОстатокПереданных,
		|	Остатки.СуммаВзаиморасчетовОстаток КАК СтоимостьОтданнаяВалОстаток";

	КонецЕсли;

	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Документ." + ДокументОснованиеИмя + ".Товары   КАК Док
	|";

	Если ОтКомиссионера Тогда
		
		Запрос.Текст = Запрос.Текст + ",
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ТоварыПереданные.Остатки(,
		|	                                             ДоговорКонтрагента   = &ДоговорКонтрагента
		|											   И СтатусПередачи = &СтатусПередачи			 
		|											   И Сделка = &Сделка
		|	                                                     ) КАК Остатки
		|ПО
		|	Док.Номенклатура = Остатки.Номенклатура 
		|   И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
		|";

	КонецЕсли;

	
	
	
//29.12.2015----------------------------------------------------------------------------
ДокументРеализации = неопределено;
	Если ОснованиеРеализацияТоваров тогда
		ДокументРеализации =  ДокументОснование;
	иначеЕсли ОснованиеРозничныйЗаказ Тогда 
		ДокументРеализации =  ОРП;
	КонецЕсли;
	
	Если значениеЗаполнено(ДокументРеализации) тогда
	Запрос.Текст = Запрос.Текст + "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(ВЫБРАТЬ
	|	ПродажиОбороты.Номенклатура,
	|	ВЫБОР
	|		КОГДА СУММА(ПродажиОбороты.КоличествоОборот) <> 0
	|			ТОГДА выразить( СУММА(ПродажиОбороты.СтоимостьОборот) / СУММА(ПродажиОбороты.КоличествоОборот) как число(15,2))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(&НачДата, &КонДата, , ДокументПродажи = &ДокументРеализации) КАК ПродажиОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ПродажиОбороты.Номенклатура) как Продажи 
	|ПО
	|	Док.Номенклатура = Продажи.Номенклатура
	|"; 
	    начДата = ДокументОснование.Дата - 3* 31 * 86400;
		конДата = ТекущаяДата();
		
		//смотрим обороты за 3 месяца
		Запрос.УстановитьПараметр("ДокументРеализации", ДокументРеализации);
		Запрос.УстановитьПараметр("НачДата", начДата); // за 3 месяца до даты документа-основания
		Запрос.УстановитьПараметр("КонДата", КонДата );
	Сообщить("Цены сформированы по регистру ""Продажи"" за период с "+формат(начДата,"ДЛФ=DD")+" по "+формат(КонДата,"ДЛФ=DD")+"
			 |  c отборот по товарам из документу: "+строка(ДокументРеализации)); 
	иначе
		Запрос.Текст  = стрЗаменить(Запрос.Текст ,"ЕстьNull(Продажи.Цена,0)", "Док.Цена");
	Сообщить("Цены сформированы по документу: "+строка(ДокументРеализации)); 
	КонецЕсли;
//----------------------------------------------------------------------------





	Запрос.Текст = Запрос.Текст + "
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование 
	|";

	
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		если Выборка.Цена<=0 тогда //29.12.2015
			Сообщить("По товару: "+строка(Выборка.Номенклатура.Код)+" - "+строка(Выборка.Номенклатура)+" цена равна "+строка(Выборка.Цена)+"р. Уже есть возврат этого товара!", СтатусСообщения.Внимание);
			продолжить;
		КонецЕсли;	
		
		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура         = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество           = Выборка.Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения     = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = Выборка.ЕдиницаИзмеренияМест;
		СтрокаТабличнойЧасти.Коэффициент          = Выборка.Коэффициент;
		СтрокаТабличнойЧасти.СтавкаНДС            = Выборка.СтавкаНДС;
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Выборка.ПроцентСкидкиНаценки;
		СтрокаТабличнойЧасти.Качество             = Выборка.Качество;

		Если ОтКомиссионера Тогда
			
			КолвоПереданных = ?(Выборка.КоличествоОстатокПереданных = NULL, 0, Выборка.КоличествоОстатокПереданных);
			Сумма = ПересчитатьИзВалютыВВалюту(Выборка.СтоимостьОтданнаяВалОстаток * СтрокаТабличнойЧасти.Количество / КолвоПереданных, 
		                   ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, КурсВзаиморасчетов, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
		                   КратностьВзаиморасчетов, КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));

			СтрокаТабличнойЧасти.Сумма = ПересчитатьЦенуПриИзмененииФлаговНалогов(Сумма, Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, 
											  Истина, УчитыватьНДС, СуммаВключаетНДС, ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, глТекущийПользователь);

		Иначе

			СтрокаТабличнойЧасти.Цена                 = Выборка.Цена;

			// Пересчитаем цену в валюту документа (может отличаться от валюты основания).
			Цена = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, 
					Выборка.КурсДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
					Выборка.КратностьДокумента, КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));

			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
										Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
										Выборка.УчитыватьНДС И Выборка.СуммаВключаетНДС,
										УчитыватьНДС, СуммаВключаетНДС,
										ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;

		РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;

		ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
		Если ОснованиеРеализацияТоваров Тогда

			СтрокаТабличнойЧасти.СерияНоменклатуры      = Выборка.СерияНоменклатуры;
			СтрокаТабличнойЧасти.ДокументПартии         = ДокументОснование;

		КонецЕсли;
		
		Если ОснованиеРозничныйЗаказ и ЗначениеЗаполнено(ОРП) Тогда 
			СтрокаТабличнойЧасти.ДокументПартии         = ОРП;		
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

// Процедура выполняет заполнение возвратной тары по документу основанию.
// При заполнении копируется состав документа.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьВозвратнуюТаруПоОснованию(ДокументОснование) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

	ДокументОснованиеИмя = ДокументОснование.Метаданные().Имя;
	ДобавкаСчетов = "";

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Док.Ссылка.ВалютаДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Док.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ КАК КурсДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Док.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ КАК КратностьДокумента,"
	+ ДобавкаСчетов + "
	|	Док.Номенклатура,
	|	Док.Количество,
	|	Док.Цена
	|ИЗ
	|	Документ." + ДокументОснованиеИмя + ".ВозвратнаяТара КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|";
		 
	РезультатЗапроса = Запрос.Выполнить();
				 
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаВозвратнойТары = ВозвратнаяТара.Добавить();

		СтрокаВозвратнойТары.Номенклатура     = Выборка.Номенклатура;
		СтрокаВозвратнойТары.Количество       = Выборка.Количество;
		СтрокаВозвратнойТары.Цена             = Выборка.Цена;

		// Пересчитаем цену в валюту взаиморасчетов (в документах договоры могут отличаться).
		Цена = ПересчитатьИзВалютыВВалюту(СтрокаВозвратнойТары.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, 
						  Выборка.КурсДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
						  Выборка.КратностьДокумента, КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));

		РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаВозвратнойТары, ЭтотОбъект);

		ЗаполнитьСкладИОрдерТабЧасти(СтрокаВозвратнойТары, ЭтотОбъект);
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьВозвратнуюТаруПоОснованию()

Процедура ЗаполнитьТоварыНереализованнымиУпр(СпособЗаполнения, ДокументРеализации = Неопределено) Экспорт

	// Добудем нереализованные товары
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);

	Если СпособЗаполнения = "ПоДокументу" Тогда

		// Вложенный запрос, ограничивающий список номенклатуры
		// документ типа Внутренний заказ не может быть основанием для возврата с комиссии  
		ТекстЗапросаСписокНоменклатуры = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Номенклатура 
		|ИЗ 
		|	Документ.РеализацияТоваровУслуг.Товары   
		|ГДЕ Ссылка = &ДокументОснование";

		Запрос.УстановитьПараметр("ДокументОснование", ДокументРеализации);

		Если ЗначениеНеЗаполнено(ДокументРеализации.Сделка) Тогда
			Запрос.УстановитьПараметр("Сделка",            Неопределено);
		Иначе
			Запрос.УстановитьПараметр("Сделка",            ДокументРеализации.Сделка);
		КонецЕсли;

	КонецЕсли;

	ДополнительныеПоляЗапросаРегл = "";
	
	МетаданныеДокументаОснования = ДокументРеализации.Метаданные();
	ЕстьАвтоматическиеСкидки = ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок",МетаданныеДокументаОснования, "Товары");

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.Номенклатура,
	|	Док.СтавкаНДС,
	|	Док.ЕдиницаИзмерения,
	|	Док.Коэффициент,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаХраненияОстатков,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентХраненияОстатков,
	|	Док.Количество                                           КАК КоличествоРеализации,
	|	Док.Цена,
	|"
	+ ?(ЕстьАвтоматическиеСкидки,"
	|	Док.ПроцентСкидкиНаценки 
	| + Док.ПроцентАвтоматическихСкидок КАК ПроцентСкидкиНаценки,
	|","
	|	Док.ПроцентСкидкиНаценки        КАК ПроцентСкидкиНаценки,
	|") + "
	|	Остатки.ХарактеристикаНоменклатуры," + 
		ДополнительныеПоляЗапросаРегл + "
	|	Док.СерияНоменклатуры,
	|	Док.Ссылка.ВалютаДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|       Док.Ссылка.КурсВзаиморасчетов
	|   ИНАЧЕ
	|       1
	|   КОНЕЦ                         КАК КурсДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|       Док.Ссылка.КратностьВзаиморасчетов
	|   ИНАЧЕ
	|       1
	|   КОНЕЦ                         КАК КратностьДокумента,
	|	Док.Ссылка.УчитыватьНДС,
	|	Док.Ссылка.СуммаВключаетНДС,
	|   Остатки.СуммаВзаиморасчетовОстаток                       КАК СтоимостьОтданнаяВалОстаток,
	|	Остатки.КоличествоОстаток                                КАК КоличествоОстатокРеализации
	|ИЗ
	|	РегистрНакопления.ТоварыПереданные.Остатки(,
	|";

	Если СпособЗаполнения = "ПоДокументу" Тогда
		Запрос.Текст = Запрос.Текст + "
		|	          Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
		|	        И ДоговорКонтрагента = &Договор
		|	        И Сделка                = &Сделка
		|	        ) КАК Остатки
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.РеализацияТоваровУслуг.Товары КАК Док
		|ПО
		|   Док.Номенклатура                 = Остатки.Номенклатура
		| И Док.ХарактеристикаНоменклатуры   = Остатки.ХарактеристикаНоменклатуры
		|
		|ГДЕ
		|	  Остатки.КоличествоОстаток > 0
		|	 И Док.Ссылка = &ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	Док.НомерСтроки
		|";
	Иначе // по договору
		Запрос.Текст = Запрос.Текст + "
		|	        ДоговорКонтрагента = &Договор
		|	        ) КАК Остатки
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.РеализацияТоваровУслуг.Товары КАК Док
		|ПО
		|   Док.Номенклатура               = Остатки.Номенклатура
		| И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
		|
		|ГДЕ
		|	  Остатки.КоличествоОстаток > 0
		|";
	КонецЕсли; 
	РезультатЗапроса = Запрос.Выполнить();
	Выборка          = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();

		НетДокумента = (Выборка.КоличествоРеализации = NULL);
		ОстатокПереданных = ?(Выборка.КоличествоОстатокРеализации = NULL, 0, Выборка.КоличествоОстатокРеализации);
		Если НетДокумента Тогда
			Количество = Выборка.КоличествоОстатокРеализации;
		Иначе
			Количество = Мин(Выборка.КоличествоРеализации, Выборка.КоличествоОстатокРеализации);
		КонецЕсли;

		СтрокаТабличнойЧасти.Номенклатура         = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество           = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения     = ?(НетДокумента, Выборка.ЕдиницаХраненияОстатков, Выборка.ЕдиницаИзмерения);
		СтрокаТабличнойЧасти.Коэффициент          = ?(НетДокумента, Выборка.КоэффициентХраненияОстатков, Выборка.Коэффициент);
		СтрокаТабличнойЧасти.СтавкаНДС            = ?(НетДокумента, Выборка.Номенклатура.СтавкаНДС,Выборка.СтавкаНДС);
		СтрокаТабличнойЧасти.Цена                 = ПересчитатьИзВалютыВВалюту(Выборка.СтоимостьОтданнаяВалОстаток / ОстатокПереданных, ДоговорКонтрагента.ВалютаВзаиморасчетов,
														ВалютаДокумента,
														КурсВзаиморасчетов, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
			                  							КратностьВзаиморасчетов, КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = ?(НетДокумента, 0, Выборка.ПроцентСкидкиНаценки);
		СтрокаТабличнойЧасти.КоличествоМест       = ?(СтрокаТабличнойЧасти.Коэффициент = 0, 0, Количество / СтрокаТабличнойЧасти.Коэффициент);

		Если НЕ НетДокумента Тогда

			// Пересчитаем цену в валюту документа (может отличаться от валюты основания).
			Цена = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, 
			                  Выборка.КурсДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
			                  Выборка.КратностьДокумента, КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));

			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                            Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
			                            Истина, УчитыватьНДС, СуммаВключаетНДС,
			                            ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		КонецЕсли;

		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.ДокументПартии             = ДокументРеализации;
		СтрокаТабличнойЧасти.Качество                   = Справочники.Качество.Новый;

		ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
		Если НЕ НетДокумента Тогда
			СтрокаТабличнойЧасти.СерияНоменклатуры   = Выборка.СерияНоменклатуры;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Процедура выполняет заполнение документа по документу-основанию.
//
// Параметры:
//  Основание - ссылка на документ основание (приходный ордер товаров).
//
Процедура ЗаполнитьДокументПоОснованиюУпр(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ОтражатьВУправленческомУчете = Истина;
		СкладОрдер                   = Основание;
		ВидПоступления               = Перечисления.ВидыПоступленияТоваров.ПоОрдеру;
		УчитыватьНДС                 = Истина;

		Если НЕ ЗначениеНеЗаполнено(Контрагент) Тогда
			ДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;

			// Тип цен заполняем, только если в договоре указаны тип цен номенклатуры (он - покупатель или комиссионер).
			ТипЦенКонтрагента = ДоговорКонтрагента.ТипЦен;
			Если НЕ ЗначениеНеЗаполнено(ТипЦенКонтрагента)
			   И ТипЗнч(ТипЦенКонтрагента) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
				ТипЦен = ТипЦенКонтрагента;
			КонецЕсли;
		КонецЕсли;

		Если ЗначениеНеЗаполнено(ТипЦен) Тогда
			СуммаВключаетНДС = Истина;
		Иначе
			СуммаВключаетНДС = ТипЦен.ЦенаВключаетНДС;
		КонецЕсли;

		Если ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		Иначе
			ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли;

		СтруктураКурса          = ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсВзаиморасчетов      = СтруктураКурса.Курс;
		КратностьВзаиморасчетов = СтруктураКурса.Кратность;

		Если Основание.Проведен Тогда

			// Заполним табличные части по заказу поставщику.
			ЗаполнитьТоварыПоОрдеруУпр(Основание, Товары);
			ЗаполнитьТоварыПоОрдеруУпр(Основание, ВозвратнаяТара);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Надо добавить колонки "СуммаБезНДС"
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС",          ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьПродажи",     ПолучитьОписаниеТиповЧисла(15,2));

	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Надо добавить колонки.
	ТаблицаТоваров.Колонки.Добавить("МинусКоличество"     , ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаТоваров.Колонки.Добавить("МинусСебестоимость"  , ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов" , ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок"  , ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДок"        , ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.МинусКоличество  = - СтрокаТаблицы.КоличествоДок;
		
		СтрокаТаблицы.СтоимостьПродажи = СтрокаТаблицы.Сумма + 
		                                 ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Цена * СтрокаТаблицы.КоличествоДок + 
		                          ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

		СтрокаТаблицы.СуммаВзаиморасчетов = - ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьПродажи, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                 КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КурсВзаиморасчетов, КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
		                                 КратностьВзаиморасчетов);

		СтрокаТаблицы.СтоимостьБезСкидок = - ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьБезСкидок, ВалютаДокумента, 
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                 КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.СтоимостьПродажи = - ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьПродажи, СтруктураШапкиДокумента.ВалютаДокумента,
		                                     СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                     СтруктураШапкиДокумента.КурсДокумента,
		                                     СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                     СтруктураШапкиДокумента.КратностьДокумента,
		                                     СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.МинусСебестоимость= - ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Себестоимость, СтруктураШапкиДокумента.ВалютаДокумента,
		                                     СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                     СтруктураШапкиДокумента.КурсДокумента,
		                                     СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                     СтруктураШапкиДокумента.КратностьДокумента,
		                                     СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета) * СтрокаТаблицы.КоличествоДок;

		СтрокаТаблицы.СуммаСНДСДок = СтрокаТаблицы.СуммаДок + ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

// Добавляет в таблицу колонки, необходимые для регл. проведения.
//
Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Надо добавить колонки
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСумма"   ,     ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСуммаНДС",     ПолучитьОписаниеТиповЧисла(15,2));

	ВалютаРег = мВалютаРегламентированногоУчета;
	Данные    = ПолучитьКурсВалюты(ВалютаРег, Дата);

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		// Суммы пересчитаем в валюту упр. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРег Тогда
			СтрокаТаблицы.ПроводкаСумма    = СтрокаТаблицы.СуммаБезНДС;
			СтрокаТаблицы.ПроводкаСуммаНДС = СтрокаТаблицы.НДС;
		Иначе
			СтрокаТаблицы.ПроводкаСумма = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, СтруктураШапкиДокумента.ВалютаДокумента,
											 мВалютаРегламентированногоУчета, 
											 СтруктураШапкиДокумента.КурсДокумента,
											 Данные.Курс, 
											 СтруктураШапкиДокумента.КратностьДокумента,
											 Данные.Кратность);
			СтрокаТаблицы.ПроводкаСуммаНДС = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, СтруктураШапкиДокумента.ВалютаДокумента,
											 мВалютаРегламентированногоУчета, 
											 СтруктураШапкиДокумента.КурсДокумента,
											 Данные.Курс, 
											 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета,
											 Данные.Кратность);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	// Надо добавить колонки.
	ТаблицаТары.Колонки.Добавить("СуммаБезНДС",                ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("НДС",                        ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТары.Колонки.Добавить("СерияНоменклатуры",          Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма; // Сумма по таре всегда с НДС в валюте взаиморасчетов

	КонецЦикла;

	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
Процедура ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента)

	// Надо добавить колонки
	ТаблицаТары.Колонки.Добавить("МинусКоличество", ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаТары.Колонки.Добавить("Стоимость",       ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов");

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		СтрокаТаблицы.МинусКоличество  = - СтрокаТаблицы.КоличествоДок;
		
		СтрокаТаблицы.СуммаВзаиморасчетов = - ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                 КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КурсВзаиморасчетов, КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
		                                 КратностьВзаиморасчетов);

		СтрокаТаблицы.Стоимость   = - ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.НДС = 0;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТарыУпр()

// Проверяет правильность заполнения упр. реквизитов шапки
//
Процедура ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения)
	
	// Если склад указывается в ТЧ, то в шапке он может быть не заполнен или указан неправильно,
	// это ни на что не влияет, потому что при проведении используется склад в ТЧ.
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад
	   И Не СтруктураШапкиДокумента.СкладВТабличнойЧасти 
	   И СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		ОшибкаПриПроведении("Документ не может осуществлять возврат на неавтоматизированную торговую точку!", Отказ, Заголовок);
	КонецЕсли;

	Если РежимПроведения = РежимПроведенияДокумента.Оперативный
		И Не ЗначениеНеЗаполнено(ДисконтнаяКарта)
		И ДисконтнаяКарта.СтатусДисконтнойКарты <> Перечисления.СтатусыДисконтнойКарты.Активна Тогда
		
		ОшибкаПриПроведении("Дисконтная карта, указанная в документе, не является активной!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапкиУпр()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Организация, ВалютаДокумента, 
					|Контрагент, ДоговорКонтрагента, КратностьВзаиморасчетов");

	Если  Не СтруктураШапкиДокумента.СкладВТабличнойЧасти Тогда
		СтруктураОбязательныхПолей.Вставить("СкладОрдер");
	КонецЕсли;

	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	 ИЛИ СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка");
	КонецЕсли;

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Качество, Количество, Сумма, СтавкаНДС, ДокументПартии");

	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураОбязательныхПолей.Вставить("ПриходныйОрдер");
	КонецЕсли;

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);
	Иначе
		КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, , СтруктураОбязательныхПолей);
	КонецЕсли;

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	                                                      Отказ, Заголовок)

	ИмяТабличнойЧасти = "ВозвратнаяТара";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество, Сумма");

	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураОбязательныхПолей.Вставить("ПриходныйОрдер");
	КонецЕсли;

	// Теперь позовем общую процедуру проверки заполнения.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти,СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// По виду операции определяет статус партии прихода товаров (не возвратная тара!)
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Значение перечисления "Статусы партии товаров".
//
Функция ОпределитьСтатусПартииПрихода(СтруктураШапкиДокумента) 

	Статус = Перечисления.СтатусыПартийТоваров.ПустаяСсылка();

    Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		Статус = Перечисления.СтатусыПартийТоваров.Купленный; 
	ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		Статус = Перечисления.СтатусыПартийТоваров.НаКомиссию; 
	Иначе    
		Сообщить("По виду договора """ +
		СтруктураШапкиДокумента.ВидДоговора + """ не удалось определить статус партии товаров!", СтатусСообщения.Важное); 
	КонецЕсли; 

	Возврат Статус;

КонецФункции // ОпределитьСтатусПартииПрихода()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);

	ДвиженияПоРегиструВзаиморасчетыДляНДС(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);

	ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок, СтруктураШапкиДокумента);
	
	ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);

	ДвиженияРегистровГрузчикиИКладовщики(ЭтотОбъект);
	
	УчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата);
	
	Если УчетнаяПолитика.СписыватьПартииПриПроведенииДокументов Тогда

		// Проводки формируются и в модуле документа, и при списании партий
		Если ОтражатьВУправленческомУчете Тогда
			Движения.ПартииТоваровНаСкладах.Записать();
		КонецЕсли;

		//ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
		
		//Плотников, для онлайн магазинов движения по рег. ПродажиСебестоимость нужно
			// провести по другому подразделению 25.03.2016
			//17.05.16 Смирнов
			//Если Контрагент.КонтрагентДляРезерваИМ <> Справочники.Контрагенты.ПустаяСсылка() Тогда
		//	ТаблицаСЗамененнымПодразделением = Движения.СписанныеТовары.Выгрузить();
		//	ТаблицаСЗамененнымПодразделением.ЗаполнитьЗначения(Справочники.Подразделения.НайтиПоКоду("00139"), "Подразделение");
		//	ДвижениеПартийТоваров(Ссылка, ТаблицаСЗамененнымПодразделением);
		//Иначе
			ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
		//КонецЕсли; //Плотников 25.03.2016

		
		Если ОтражатьВУправленческомУчете Тогда
			ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
			ЗаписьРегистрации.Период = Дата;
			ЗаписьРегистрации.Регистратор = Ссылка;
		КонецЕсли;

	Иначе
		
		// В неоперативном режиме границы последовательностей сдвигаются назад, если они позже документа.
		Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
			СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете)
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

// Формирует движения по регистру взаиморасчетов для НДС
//
// Параметры:
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегиструВзаиморасчетыДляНДС(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)

	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;

	// По регистру ВзаиморасчетыСПокупателямиДляНДС.
	НаборДвижений = Движения.ВзаиморасчетыСПокупателямиДляНДС;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	СтрокаДвижений = ТаблицаДвижений.Добавить();

	СтрокаДвижений.Организация        = СтруктураШапкиДокумента.Организация;
	СтрокаДвижений.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
	СтрокаДвижений.Сделка             = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);;

	СтрокаДвижений.Сумма   = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
	                                                    мВалютаРегламентированногоУчета,
	                                                    КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
	                                                    1,
	                                                    КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
	                                                    1);

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ВзаиморасчетыСПокупателямиДляНДС.ВыполнитьРасход();
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструВзаиморасчетыДляНДС()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС: "НДСПродажи", "НДСПокупки" и "НДСПартии"
// отражающие возврат от покупателя
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		// Возврат товаров, переданных на комисиию, не отражается в подсистеме учета НДС
		Возврат;
	КонецЕсли;
	
	ПараметрыУчетнойПолитики = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.ПолучитьПоследнее(СтруктураШапкиДокумента.Ссылка.Дата, Новый Структура("Организация", СтруктураШапкиДокумента.Организация));
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра НДСПокупки.
	ТаблицаДвиженийПокупки = Движения.НДСПокупки.Выгрузить();
	ТаблицаДвиженийПокупки.Очистить();
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра НДСПартииТоваров.
	ТаблицаДвиженийПартии = Движения.НДСПартииТоваров.Выгрузить();
	ТаблицаДвиженийПартии.Очистить();
	
	// Дополнительно реализуем механизм учета НДС в качестве налогового агента
	ТаблицаДвиженийПродажи = Движения.НДСПродажи.Выгрузить();
	ТаблицаДвиженийПродажи.Очистить();
				
	Если ТаблицаПоТоварам.Количество() > 0 Тогда 
		
		СформироватьДвиженияВозвратаНДСПродажи(СтруктураШапкиДокумента, ПараметрыУчетнойПолитики, ТаблицаПоТоварам, ТаблицаДвиженийПродажи);
		
		// Движения в случае, когда документ реализации не указан
		Если ПараметрыУчетнойПолитики.СложныйУчетНДС Тогда
			//СформироватьДвиженияВозвратаНДСПокупкиНДСПартии(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаДвиженийПокупки, ТаблицаДвиженийПартии);
		КонецЕсли;
			
	КонецЕсли;
	
	Если ТаблицаДвиженийПокупки.Количество() > 0 Тогда
		Движения.НДСПокупки.мПериод          = Дата;
		Движения.НДСПокупки.мТаблицаДвижений = ТаблицаДвиженийПокупки;
		Движения.НДСПокупки.ДобавитьДвижение();
		Движения.НДСПокупки.Записать();
	КонецЕсли;
	
	Если ТаблицаДвиженийПартии.Количество() > 0 Тогда
		Движения.НДСПартииТоваров.мПериод            = Дата;
		Движения.НДСПартииТоваров.мТаблицаДвижений   = ТаблицаДвиженийПартии;
		Движения.НДСПартииТоваров.ВыполнитьПриход();
		Движения.НДСПартииТоваров.Записать();
	КонецЕсли;
	
	Если ТаблицаДвиженийПродажи.Количество() > 0 Тогда
		Движения.НДСПродажи.мПериод          = Дата;
		Движения.НДСПродажи.мТаблицаДвижений = ТаблицаДвиженийПродажи;
		Движения.НДСПродажи.ДобавитьДвижение();
		Движения.НДСПродажи.Записать();
	КонецЕсли;
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

// Процедура вызывается из тела процедуры ДвиженияРегистровПодсистемыНДС
// Формирует движения, отражающие возврат от покупателя в регистре НДСПродажи
Процедура СформироватьДвиженияВозвратаНДСПродажи(СтруктураШапкиДокумента, ПараметрыУчетнойПолитики, ТаблицаПоТоварам, ТаблицаДвиженийПродажи)

	Для Каждого СтрокаВозврата Из ТаблицаПоТоварам Цикл
		
		Если (СтрокаВозврата.СуммаБезНДС + СтрокаВозврата.НДС) <> 0 Тогда

			СтрокаДвижения = ТаблицаДвиженийПродажи.Добавить();

			СтрокаДвижения.Организация = СтруктураШапкиДокумента.Организация;
			СтрокаДвижения.ВидЦенности = СтрокаВозврата.ВидЦенности;
			
			Если СтруктураШапкиДокумента.Свойство("Контрагент") Тогда
				СтрокаДвижения.Покупатель  = СтруктураШапкиДокумента.Контрагент;
			КонецЕсли;	
			
			Если ТипЗнч(СтрокаВозврата.ВозвратОтПокупателяДокументПартии) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			 или ТипЗнч(СтрокаВозврата.ВозвратОтПокупателяДокументПартии) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			    СтрокаДвижения.СчетФактура = СтрокаВозврата.ВозвратОтПокупателяДокументПартии;
			Иначе
				СтрокаДвижения.СчетФактура = СтруктураШапкиДокумента.Ссылка;
			КонецЕсли;
			
			СтрокаДвижения.Событие     = Перечисления.СобытияПоНДСПродажи.Возврат;
			СтрокаДвижения.СтавкаНДС   = СтрокаВозврата.СтавкаНДС;
			СтрокаДвижения.СуммаБезНДС = СтрокаВозврата.СуммаБезНДС;
			СтрокаДвижения.НДС         = СтрокаВозврата.НДС;

			// Устанавливаем реквизиты движения
			СтрокаДвижения.Номенклатура = СтрокаВозврата.Ценность;
			
			Если (ТипЗнч(СтрокаВозврата.ВозвратОтПокупателяДокументПартии) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") )
			   и (ПараметрыУчетнойПолитики.РозничнаяТорговляОблагаетсяЕНВД) Тогда
				СтрокаДвижения.ВариантРеализации = Перечисления.ВариантРеализации.ЕНВД;
			Иначе
				СтрокаДвижения.ВариантРеализации = Перечисления.ВариантРеализации.НеЕНВД;
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;
		
КонецПроцедуры // СформироватьДвиженияВозвратаНДСПродажи()

// Процедура вызывается из тела процедуры ДвиженияРегистровПодсистемыНДС
// Формирует движения, отражающие возврат от покупателя в регистре НДСПродажи
Процедура СформироватьДвиженияВозвратаНДСПокупкиНДСПартии(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаДвиженийПокупки, ТаблицаДвиженийПартии)

	Для Каждого СтрокаВозврата Из ТаблицаПоТоварам Цикл
		
		Если (СтрокаВозврата.СуммаБезНДС + СтрокаВозврата.НДС) <> 0 Тогда

			Если ТипЗнч(СтрокаВозврата.ВозвратОтПокупателяДокументПартии) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			 или ТипЗнч(СтрокаВозврата.ВозвратОтПокупателяДокументПартии) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			 
			 // Обрабатывается при проведении по партиям
			Иначе
				// Документ отгрузки не указан, поэтому отражать данный возврат в регистре
				// НДСПокупки не имеет смысла, а в регистре НДСПартииТоваров нужно выполнить приход
				СтрокаДвижения = ТаблицаДвиженийПартии.Добавить();
				
				СтрокаДвижения.Организация  = СтруктураШапкиДокумента.Организация;
				СтрокаДвижения.Номенклатура = СтрокаВозврата.Номенклатура;
				СтрокаДвижения.Поставщик    = СтрокаВозврата.Поставщик;
				СтрокаДвижения.СчетФактура  = СтрокаВозврата.ВозвратОтПокупателяДокументПартии;
				СтрокаДвижения.СтавкаНДС    = СтрокаВозврата.СтавкаНДС;
				СтрокаДвижения.ДокументОприходования = СтрокаВозврата.ВозвратОтПокупателяДокументПартии;

				СтрокаДвижения.Количество   = СтрокаВозврата.Количество;
				СтрокаДвижения.Стоимость    = СтрокаВозврата.СуммаБезНДС;
				СтрокаДвижения.НДС          = СтрокаВозврата.НДС;
				
			КонецЕсли;	
				
			
		КонецЕсли;

	КонецЦикла;
			
КонецПроцедуры // СформироватьДвиженияВозвратаНДСПокупкиНДСПартии()

Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок, СтруктураШапкиДокумента)

	// Таблица для движений с отрицательным количеством
	ТаблицаПоТоварамМинус = ТаблицаПоТоварам.Скопировать();
	ТаблицаПоТоварамМинус.Колонки.МинусКоличество.Имя = "Количество";
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
	НаборДвижений = Движения.ТоварыОрганизаций;

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамМинус, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Организация , "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Комиссионер");
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ТоварыОрганизаций.ВыполнитьРасход();
		КонецЕсли;

		// Если договор с комиссионером, то надо сторнировать остатки.
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Контрагент , "Комиссионер");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ТоварыОрганизаций.ВыполнитьПриход();
			КонецЕсли;

		КонецЕсли;

	Иначе // По ордеру

		// По ордеру нужно сторнировать движения по товарам организаций,
		// если в ордере была указана не та организация.
		// Удалим строки, по которым не нужно делать движений (организации совпадают).
		КопияТаблицыТоваров = ТаблицаПоТоварам.Скопировать();
		КолвоЭлементовКоллекции = КопияТаблицыТоваров.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
			ЭлементКоллекции = КопияТаблицыТоваров[КолвоЭлементовКоллекции - ОбратныйИндекс];
			Если ЭлементКоллекции.ОрганизацияДокументаПолучения = СтруктураШапкиДокумента.Организация Тогда
				КопияТаблицыТоваров.Удалить(ЭлементКоллекции);
			КонецЕсли;
		КонецЦикла;

		Если КопияТаблицыТоваров.Количество() > 0 Тогда // Есть что проводить.

			// Вначале сторнируем
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(КопияТаблицыТоваров, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗагрузитьКолонку(КопияТаблицыТоваров.ВыгрузитьКолонку("ОрганизацияДокументаПолучения"), "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ТоварыОрганизаций.ВыполнитьРасход();
			КонецЕсли;

			// Теперь сделаем движения с правильной организацией.
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ТоварыОрганизаций.ВыполнитьПриход();
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизаций()

// По результату запроса по шапке документа формируем движения по упр. регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);

	Если ОтражатьВУправленческомУчете Тогда

		// Таблица для движений с отрицательным количеством
		ТаблицаПоТоварамМинус = ТаблицаПоТоварам.Скопировать();
		ТаблицаПоТоварамМинус.Колонки.МинусКоличество.Имя = "Количество";

		// Таблица для движений с положительным количеством
		ТаблицаПоТоварамПлюс = ТаблицаПоТоварам.Скопировать();
		ТаблицаПоТоварамПлюс.Колонки.КоличествоДок.Имя = "Количество";

		// Таблица для движений с отрицательным количеством
		ТаблицаПоТареМинус = ТаблицаПоТаре.Скопировать();
		ТаблицаПоТареМинус.Колонки.МинусКоличество.Имя = "Количество";

		// Таблица для движений с положительным количеством
		ТаблицаПоТареПлюс = ТаблицаПоТаре.Скопировать();
		ТаблицаПоТареПлюс.Колонки.КоличествоДок.Имя = "Количество";

		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
		   И СуммаДокумента <> 0 Тогда

			// Движения по документу.

			// По регистру ВзаиморасчетыСКонтрагентами.
			НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
			СтрокаДвижений.Сделка                = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
			СтрокаДвижений.СуммаВзаиморасчетов   = - ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
													СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
													СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
			СтрокаДвижений.СуммаУпр              = - ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, 
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, 
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "", СтруктураШапкиДокумента, Отказ, Заголовок)
			КонецЕсли;
			
			Если Не Отказ Тогда
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();
			КонецЕсли;

			НаборДвижений = Движения.РасчетыСКонтрагентами;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.РасчетыВозврат        = Перечисления.РасчетыВозврат.Возврат;
			СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
			СтрокаДвижений.Сделка                = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,, Истина);
			СтрокаДвижений.СуммаВзаиморасчетов   = - ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
													СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
													СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
			СтрокаДвижений.СуммаУпр              = - ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, 
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, 
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
			КонецЕсли;
		КонецЕсли;

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
		Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда

			НаборДвижений = Движения.ТоварыНаСкладах;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();

			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамМинус, ТаблицаДвижений);


			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ТоварыНаСкладах.ВыполнитьРасход();
			КонецЕсли;

		Иначе

			// Сторнируем приход по ордреу и сделаем расход с минусом, поскольку для правильного 
			// отражения в отчетах возврат должен формировать не приход товара, а расход с минусом
			НаборДвижений = Движения.ТоварыНаСкладах;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();

			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамМинус, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый,               "Качество");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ТоварыНаСкладах.ВыполнитьПриход();	
			КонецЕсли;
			
			ТаблицаДвижений.Очистить();
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамМинус, ТаблицаДвижений);

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ТоварыНаСкладах.ВыполнитьРасход();
			КонецЕсли;

			НаборДвижений = Движения.ТоварыКПолучениюНаСклады;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвиженийТоварыКПолучению = НаборДвижений.Выгрузить();
			ТаблицаДвиженийТоварыКПолучению.Очистить();
			ТаблицаДвижений = ТаблицаДвиженийТоварыКПолучению.Скопировать();

			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамПлюс, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			// Проверка осатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;

			Если Не Отказ Тогда
				Движения.ТоварыКПолучениюНаСклады.ВыполнитьРасход();
			КонецЕсли;

		КонецЕсли;

		// ТАРА ПО РЕГИСТРУ ТоварыНаСкладах.
		Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда

			НаборДвижений = Движения.ТоварыНаСкладах;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТареМинус, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый,"Качество");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ТоварыНаСкладах.ВыполнитьРасход();
			КонецЕсли;

		Иначе

			НаборДвижений = Движения.ТоварыНаСкладах;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТареМинус, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый,               "Качество");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ТоварыНаСкладах.ВыполнитьПриход();
			КонецЕсли;
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТареМинус, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый,               "Качество");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ТоварыНаСкладах.ВыполнитьРасход();
			КонецЕсли;

			НаборДвижений = Движения.ТоварыКПолучениюНаСклады;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = ТаблицаДвиженийТоварыКПолучению.Скопировать();

			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТареПлюс, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "СтатусПартии");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			// Проверка осатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;

			Если Не Отказ Тогда
				Движения.ТоварыКПолучениюНаСклады.ВыполнитьРасход();
			КонецЕсли;

			
		КонецЕсли;
		
	//+++( 27.08.2014 - Здесь контроля не надо!?
		//
		//ТОВАРЫ ПО РЕГИСТРУ ТоварыАдресноеХранение.
		Если ТоварыАдресноеХранение.Количество() > 0 и Не Отказ Тогда
			
			//+++ 13.11.2017 - Питер - Вербовская как-то смогла ввести адрес <> складу
			Для каждого стр1 из ТоварыАдресноеХранение цикл
				Если стр1.АдресХранения.Владелец <> стр1.Склад тогда
					#Если Клиент тогда
						сообщить(строка(стр1.НомерСтроки)+") адрес хранения: "+строка(стр1.АдресХранения)+" не принадлежит складу: "+строка(стр1.Склад)+" !!!", СтатусСообщения.ОченьВажное); 
					#КонецЕсли	
				Отказ = Истина;
				КонецЕсли;
			КонецЦикла;
			 
			Если Отказ тогда// дальше не продолжаем!
			 ВОЗВРАТ;
			КонецЕсли;	 
			 
			яштАдресноеХранение.ДвиженияПоРегиструТоварыАдресноеХранение(Движения.ТоварыАдресноеХранение, ЭтотОбъект);
		КонецЕсли;
		//+++)	


		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
				
				// По регистру Продажи
			НаборДвижений = Движения.Продажи;
			ТаблицаПродаж = ТаблицаПоТоварамМинус.Скопировать();
			ТаблицаПродаж.Колонки.ДокументПартии.Имя = "ДокументПродажи";
			ТаблицаПродаж.Колонки.СтоимостьПродажи.Имя = "Стоимость";

			
			
				БылиБонусыЗаНал = Ложь;
				ТаблицаПоТоварамБ = ТаблицаПродаж.Скопировать();
				ТаблицаПоТоварамБ.Колонки.Добавить("Бонус");
				ТаблицаПоТоварамБ.Колонки.Добавить("номенклатурнаяГруппа");
				Для каждого стр из ТаблицаПоТоварамБ Цикл 
					Если стр.ДокументПродажи.сделка.БонусПрименен тогда
                     БылиБонусыЗаНал = Истина;
					Цена = Окр((стр.Стоимость/стр.Количество)/((100-стр.ДокументПродажи.Сделка.ПроцентСкидкиНал)/100),0); 
					стр.Бонус = -(цена*стр.Количество-стр.Стоимость);
                    стр.Стоимость = -цена*стр.Количество;
					стр.СтоимостьБезСкидок = -цена*стр.Количество;
					стр.номенклатурнаяГруппа = стр.Номенклатура.НоменклатурнаяГруппа;
					конецЕсли;
				КонецЦикла;

			
			
			//---15.06.2016 если у Контрагента заполнен реквизит "Контрагент для резерва ИМ"
			// тогда движения Продажи по договору из партии
			
			//Если ЗначениеЗаполнено(Контрагент.КонтрагентДляРезерваИМ) Тогда 
			//	ТаблицаПродаж.Колонки.Добавить("ДоговорКонтрагента");
			//	Для каждого Стр из ТаблицаПродаж Цикл 
								
			//		Стр.ДоговорКонтрагента = ДоговорКонтрагентаПродажи;
			//	КонецЦикла;
			//КонецЕсли;	
			//
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			Если БылиБонусыЗаНал тогда
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамБ, ТаблицаДвижений);
			иначе	
			ЗагрузитьВТаблицуЗначений(ТаблицаПродаж, ТаблицаДвижений);
            конецесли;
			
			
			
			// Плотников, возврат услуг 20.05.2016
			Для каждого стр из Услуги Цикл
				Нов = ТаблицаДвижений.Добавить();
				Нов.Номенклатура = стр.Номенклатура;
				Нов.ДокументПродажи = Товары[0].ДокументПартии;
				Нов.Количество = -стр.Количество;
				Нов.Стоимость = -стр.сумма;
				Нов.СтоимостьБезСкидок = -стр.сумма;
				//---15.06.2016 
				//Если ЗначениеЗаполнено(Контрагент.КонтрагентДляРезерваИМ) Тогда 
				//Нов.ДоговорКонтрагента = ДоговорКонтрагентаПродажи;	
				//КонецЕсли;	
				//---15.06.2016
			КонецЦикла;  //Плотников

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Сделка,             "ЗаказПокупателя");
			
			
			//---15.06.2016 если у Контрагента заполнен реквизит "Контрагент для резерва ИМ"
			// тогда движения Продажи по договору из партии
			Если ЗначениеЗаполнено(Товары[0].ДокументПартии) Тогда
				Если ТипЗнч(Товары[0].ДокументПартии) = тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					//Если ЗначениеЗаполнено(Товары[0].ДокументПартии.Контрагент.КонтрагентДляРезерваИМ)или  //123 заменить
					Если ЗначениеЗаполнено(Товары[0].ДокументПартии.ДоговорКонтрагента.КонтрагентДляРезерваИМ)
				       и Контрагент <> Товары[0].ДокументПартии.Контрагент Тогда
				        ДоговорКонтрагентаПродажи = ВернутьДоговорКонтрагентаИзДокументаПродажи(Товары[0]);
				        ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагентаПродажи, "ДоговорКонтрагента");
			        иначе	
			            ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");			
					КонецЕсли;
				Иначе
					ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
				КонецЕсли;
			иначе
				ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
			КонецЕсли;
			
			//Плотников, для онлайн магазинов движения по рег. ПродажиСебестоимость нужно
			// провести по другому подразделению 25.03.2016
			//15.05.16 Смирнов
			//Если Контрагент.КонтрагентДляРезерваИМ <> Справочники.Контрагенты.ПустаяСсылка() Тогда
			//	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Подразделения.НайтиПоКоду("00139"),"Подразделение");
			//Иначе
			    ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
			//КонецЕсли;
			//Плотников

			Если ЭтотОбъект.Дата >= '20180101' Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(ПодразделениеДохода,"Подразделение");
			Иначе
			ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
			КонецЕсли; 

			
			

			ТаблицаДвижений.ЗаполнитьЗначения(Проект,             "Проект");
			ТаблицаДвижений.ЗаполнитьЗначения(ДисконтнаяКарта,    "ДисконтнаяКарта");
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.Продажи.ВыполнитьДвижения();
			КонецЕсли;
			
			// ПО регистру ЗАТРАТЫ 
				Если БылиБонусыЗаНал тогда
					СкидкаНал = ТаблицаПоТоварамБ.Итог("Бонус");
					ТаблицаПоТоварамБ.Свернуть("Номенклатурнаягруппа","Бонус");
					Если СкидкаНал>0 тогда
						
						Для каждого стр из ТаблицаПоТоварамБ Цикл
							НаборДвижений   = Движения.Затраты.Добавить();
							НаборДвижений.Подразделение   = ПодразделениеДохода;
							НаборДвижений.СтатьяЗатрат    = Справочники.СтатьиЗатрат.НайтиПоКоду("О0217");
							НаборДвижений.НоменклатурнаяГруппа   = Стр.НоменклатурнаяГруппа;
							НаборДвижений.Сумма           = -Стр.Бонус;
							НаборДвижений.Период          = Дата;
							Движения.Затраты .Записать();
						конецЦикла;
						
					конецЕсли;
				конецЕсли;

		КонецЕсли;
		
		// ТАРА ПО РЕГИСТРУ ТоварыПереданные.
		НаборДвижений = Движения.ТоварыПереданные;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТареМинус, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,,, Истина),"Сделка");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара,"СтатусПередачи");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ТоварыПереданные.ВыполнитьПриход();
		КонецЕсли;

		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

			// ТОВАРЫ ПО РЕГИСТРУ ТоварыПереданные.
			НаборДвижений = Движения.ТоварыПереданные;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамМинус, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
			ТаблицаДвижений.ЗаполнитьЗначения(ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента),"Сделка");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию,"СтатусПередачи");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ТоварыПереданные.ВыполнитьПриход();
			КонецЕсли;
			
		КонецЕсли;

		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя
		ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратОтКомиссионера
		Иначе
			КодОперацииПартииТоваров = Неопределено;
		КонецЕсли;
		
		ТаблицаПоТоварамПартии = ТаблицаПоТоварамМинус.Скопировать();
		Сч = 0;
		Пока Сч < ТаблицаПоТоварамПартии.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоТоварамПартии.Получить(Сч);
			Если НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.ДокументПартии) Тогда
				 ТаблицаПоТоварамПартии.Удалить(СтрокаТаблицы);
			Иначе 
				Сч = Сч + 1;
			КонецЕсли; 
		КонецЦикла;
		ТаблицаПоТоварамПартии.Колонки.МинусСебестоимость.Имя = "Стоимость";
		
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			
			// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах.
			НаборДвижений = Движения.ПартииТоваровНаСкладах;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвиженийПартииТоваровНаСкладах = НаборДвижений.Выгрузить();
			ТаблицаДвиженийПартииТоваровНаСкладах.Очистить();
			ТаблицаДвижений = ТаблицаДвиженийПартииТоваровНаСкладах.Скопировать();
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамПартии, ТаблицаДвижений);
			
			// Недостающие поля.
			ЗаполнитьПоляПартииТоваровНаСкладахУпр(ТаблицаПоТоварамПартии, ТаблицаДвижений, ОпределитьСтатусПартииПрихода(СтруктураШапкиДокумента), СтруктураШапкиДокумента);
			
			// Код операции
			ТаблицаДвижений.ЗаполнитьЗначения(КодОперацииПартииТоваров, "КодОперации");
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.ПартииТоваровНаСкладах.ВыполнитьРасход();
			КонецЕсли;
			
			// При поступлении по ордеру нужно сторнировать партию ордера
			Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
				
				ТаблицаПоТоварамПартии = ТаблицаПоТоварамМинус.Скопировать();
				ТаблицаПоТоварамПартии.Колонки.ДокументПолучения.Имя = "ДокументОприходования";
				ТаблицаПоТоварамПартии.Колонки.МинусСебестоимость.Имя = "Стоимость";
				ТаблицаДвижений.Очистить();
				ЗаполнитьПоляПартииТоваровНаСкладахУпр(ТаблицаПоТоварамПартии, ТаблицаДвижений, Перечисления.СтатусыПартийТоваров.ПоОрдеру, СтруктураШапкиДокумента, Ложь);
				
				ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамПартии, ТаблицаДвижений);
				ТаблицаДвижений.ЗаполнитьЗначения(0, "Стоимость");
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ПоОрдеру, "СтатусПартии");
				
				// Код операции - поступление по ордеру (сторно)
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПоступлениеПоОрдеру, "КодОперации");
				
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
				
				Если Не Отказ Тогда
					Движения.ПартииТоваровНаСкладах.ВыполнитьПриход();
				КонецЕсли;
				
			КонецЕсли;

		ТаблицаПоТареПартии = ТаблицаПоТареМинус.Скопировать();
		
		// ТАРА ПО РЕГИСТРУ ПартииТоваровНаСкладах.

		НаборДвижений = Движения.ПартииТоваровНаСкладах;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = ТаблицаДвиженийПартииТоваровНаСкладах.Скопировать();
		ТаблицаДвижений.Очистить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТареПартии, ТаблицаДвижений);

		// Недостающие поля.
		ЗаполнитьПоляПартииТоваровНаСкладахУпр(ТаблицаПоТареПартии, ТаблицаДвижений, 
		Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, СтруктураШапкиДокумента);
		
		// Код операции
		ТаблицаДвижений.ЗаполнитьЗначения(КодОперацииПартииТоваров, "КодОперации");
		
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ПартииТоваровНаСкладах.ВыполнитьРасход();
		КонецЕсли;

		// При поступлении по ордеру нужно сторнировать партию ордера
		Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда

			ТаблицаПоТареПартии = ТаблицаПоТареМинус.Скопировать();
			ТаблицаПоТареПартии.Колонки.ДокументПолучения.Имя = "ДокументОприходования";
			ТаблицаДвижений.Очистить();
			
			ЗаполнитьПоляПартииТоваровНаСкладахУпр(ТаблицаПоТоварамПартии, ТаблицаДвижений, Перечисления.СтатусыПартийТоваров.ПоОрдеру, СтруктураШапкиДокумента, Ложь);
			
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТареПартии, ТаблицаДвижений);

			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ПоОрдеру, "СтатусПартии");
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

			ТаблицаДвижений.ЗаполнитьЗначения(0, "Стоимость");
			
			// Код операции - поступление по ордеру (сторно)
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПоступлениеПоОрдеру, "КодОперации");

			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ПартииТоваровНаСкладах.ВыполнитьПриход();
			КонецЕсли;

		КонецЕсли;
				КонецЕсли;

	КонецЕсли; // Если ОтражатьВУправленчискомУчете...

КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Заполняет колонки значениями, нужными для упр. учета
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,  "ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию, "ДопустимыйСтатус2");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение, "Подразделение");
	Если ЭтотОбъект.Дата >= '20180101' Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(ПодразделениеДохода, "Подразделение");
	Иначе
		ТаблицаДвижений.ЗаполнитьЗначения(Подразделение, "Подразделение");
	КонецЕсли; 
	
	
	
	
	// Данные для заполнения отчетов комитенту
	ТаблицаДвижений.ЗаполнитьЗначения(ВалютаДокумента, "ВалютаДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), "КурсДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), "КратностьДокумента");

	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете, "ОтражатьВУправленческомУчете");
	
	Для каждого Строка Из ТаблицаДвижений Цикл
		
		СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));
		Строка.СуммаЗадолженности   = СтрокаТЧ.СуммаСНДСДок;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр() 

// Заполняет колонки значениями, нужными для регл. учета
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВНалоговомУчете,     "ОтражатьВНалоговомУчете");

	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	
	Для каждого Строка Из ТаблицаДвижений Цикл

		СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			
			Строка.СуммаЗадолженностиБУ = СтрокаТЧ.ПроводкаСумма+СтрокаТЧ.ПроводкаСуммаНДС;
			Строка.СуммаНДС             = СтрокаТЧ.ПроводкаСуммаНДС;
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл() 

// Формируем движения по регистру СписанныеТовары
//
Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок)

	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	ТаблицаПоТоварам.Колонки.ДокументПартии.Имя = "ВозвратОтПокупателяДокументПартии";
	ТаблицаПоТоварам.Колонки.КоличествоДок.Имя  = "Количество";

	// Заполним таблицу движений.
	ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл

		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;

	КонецЦикла;

	// Если ПУ по складам
//{{MRG[ <-> ]
	//Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
	//	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
	//		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СкладОрдер, "Склад");
	//	Иначе
	//		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СкладПриходногоОрдера, "Склад");
	//	КонецЕсли; 			
	//КонецЕсли;
//}}MRG[ <-> ]
//{{MRG[ <-> ]
// 	Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
// 		Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
// 			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СкладОрдер, "Склад");
// 		Иначе
// 			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СкладПриходногоОрдера, "Склад");
// 		КонецЕсли; 			
// 	КонецЕсли;
//}}MRG[ <-> ]

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");

	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя,   "КодОперацииПартииТоваров");
		
	ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ВозвратОтКомиссионера, "КодОперацииПартииТоваров");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию,      "ДопустимыйСтатусПередачи");
		
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Сделка, "ЗаказСписания");

	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений,  СтруктураШапкиДокумента, ТаблицаПоТоварам);

	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений,  СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструСписанныеТовары()

// Дополняет полями, нужными для упр. учета
//
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке)

	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");

КонецПроцедуры // ДополнитьДеревоПолейЗапросаПоШапкеУпр()

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок)

	мУчетнаяПолитика   = ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ);
	ТабУчетнаяПолитика = ПолучитьУчетнуюПолитику(Дата);

	мПорядокСписанияПартий = Новый Структура("Упр,Бух,Нал");

	Если ОтражатьВУправленческомУчете Тогда
		ПодготовитьПараметрыУчетнойПолитикиУпр(ТабУчетнаяПолитика, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура определяет параметры упр. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиУпр(ТабУчетнаяПолитика, Отказ, Заголовок)

	// Получим метод списания партий FIFO / LIFO / По средней
	СтрокаУчетнойПолитики = ТабУчетнаяПолитика[0];
	мПорядокСписанияПартий.Вставить("Упр", СтрокаУчетнойПолитики.СпособОценкиМПЗУпр);

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиУпр()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		СкладОрдер = Основание.Склад;
		Проект     = Основание.Проект;

		// Тип выбираемого значения зависит от договора.
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
		 или ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		 ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда

			Сделка = Основание.Сделка; // заполняем сделку заказом покупателя
		Иначе
			Сделка = Основание; // взаиморасчеты по расчетным документам
		КонецЕсли;

		Если Основание.Проведен Тогда

			Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				ЗаполнитьТоварыНереализованнымиУпр("ПоДокументу", Основание);
				ЗаполнитьВозвратнуюТаруПоОснованию(Основание);
			Иначе
				// Скопируем табличные части из документа основания.
				ЗаполнитьТоварыПоОснованию(Основание);
				ЗаполнитьВозвратнуюТаруПоОснованию(Основание);
			КонецЕсли;

		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя")
		  ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		СкладОрдер  = Основание.Склад;

		// Тип выбираемого значения зависит от договора.
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
		 ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		 ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда

			Сделка = Основание; // заполняем сделку заказом поставщику

			Если Сделка.Проведен
			 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда

				// Заполним табличные части по заказу поставщику.
				ЗаполнитьТоварыПоОснованию(Сделка);
				ЗаполнитьВозвратнуюТаруПоОснованию(Сделка);

			КонецЕсли;

		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваров") Тогда 
		ЗаявкаОснование = Основание;

		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		Сделка = Основание; // заполняем сделку заказом поставщику
		
		Если Основание.Товары.Количество()>0 тогда
			СкладОрдер  = Основание.Товары[0].СкладРеализации;
			ДоговорКонтрагента = Основание.Товары[0].Реализация.ДоговорКонтрагента;
        КонецЕсли;
	
		//		ЗаполнитьТоварыПоОснованию(Основание);
		для каждого стр1 из  Основание.Товары цикл //29.12.2015
			
			стрОст = найтиЦену(стр1);
			Если стрОст.Цена<=0 тогда
				Сообщить("По товару: "+строка(стр1.Номенклатура.Код)+" - "+строка(стр1.Номенклатура) +" и документу: "+строка( стр1.Реализация )+"
						 |		цена равна "+строка(стрОст.Цена)+"р.  Уже есть возврат этого товара!", СтатусСообщения.Внимание);
				продолжить;
			КонецЕсли;	

			стр2 = Товары.Добавить();
			ЗаполнитьЗначенияСвойств( стр2, стр1);
			стр2.Качество = справочники.Качество.Новый;
			стр2.СтавкаНДС = перечисления.СтавкиНДС.НДС18;
			стр2.Коэффициент = 1;
			стр2.Вес = стр2.Номенклатура.ЕдиницаХраненияОстатков.Вес;
			стр2.ЕдиницаИзмерения 	  = стр2.Номенклатура.ЕдиницаХраненияОстатков;
			стр2.ЕдиницаИзмеренияМест = стр2.Номенклатура.ЕдиницаХраненияОстатков;
			
			стр2.Количество      = ?(стр1.Количество>стрОст.Количество, стрОст.Количество, стр1.Количество); //15.01.2015
			стр2.КоличествоМест  = стр2.Количество;
			
			стр2.ДокументПартии = стр1.Реализация;
			//по просьбе фролова и Яковлевой 01.04.16
			//стр2.Склад 		    = стр1.СкладРеализации;
			
			Если стрОст.Цена<>стр1.ЦенаРеализации тогда //сообщим об изменении цены
				сообщить(строка(стр2.НомерСтроки)+") "+строка(стр2.Номенклатура.Код)+" - "+строка(стр2.Номенклатура)
				+" Цена (с учетом корректировок): "+строка(стрОст.Цена)+"р. отличается от цены по Заявке: "+строка(стр1.ЦенаРеализации)+"р.");
			КонецЕсли;	
			стр2.Цена           = стрОст.Цена; //стр1.ЦенаРеализации;
			
			стр2.Сумма 			= стр2.Цена  * стр2.Количество;
			стр2.СуммаНДС		= стр2.Сумма * 18/118;
			//стр2.Себестоимость  = стр1.Сумма;
		КонецЦикла;
	
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") тогда 
		ЗаполнитьДокументПоОснованиюУпр(Основание);
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

функция найтиЦену(стрЗаявки)
	рез = 0;
	Если ЗначениеНеЗаполнено(стрЗаявки.Реализация)
		или ЗначениеНеЗаполнено(стрЗаявки.Номенклатура) тогда
	рез = стрЗаявки.ЦенаРеализации;
	Иначе
	  запрос1 = новый запрос;
	  запрос1.Текст = "ВЫБРАТЬ
	|	ПродажиОбороты.ДокументПродажи как Реализация,
	|	ПродажиОбороты.Номенклатура,
	|	СУММА(ПродажиОбороты.КоличествоОборот) как Количество,
	|	ВЫБОР
	//+++ 15.01.2016 ------------ только по "+" остаткам делается возврат! --------
	|		КОГДА СУММА(ПродажиОбороты.КоличествоОборот) > 0
	|			ТОГДА выразить( СУММА(ПродажиОбороты.СтоимостьОборот) / СУММА(ПродажиОбороты.КоличествоОборот) как число(15,2))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(&НачДата, &КонДата, , 
	|		ДокументПродажи = &Док 
	|		 и Номенклатура = &Ном ) КАК ПродажиОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ПродажиОбороты.ДокументПродажи,
	|	ПродажиОбороты.Номенклатура";
	запрос1.УстановитьПараметр("НачДата",стрЗаявки.Реализация.Дата-1);
	запрос1.УстановитьПараметр("КонДата",ТекущаяДата() );
	запрос1.УстановитьПараметр("док",стрЗаявки.Реализация );
	запрос1.УстановитьПараметр("Ном",стрЗаявки.Номенклатура );
	выборка = запрос1.Выполнить().Выбрать();
		если выборка.Следующий() тогда
			рез = выборка;
		иначе
			рез = новый Структура("Цена, Количество", 0, 0);
		КонецЕсли;
	КонецЕсли;
	
	возврат рез;
КонецФункции

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ЭтоНовый() тогда
		Если Договорконтрагента.ТипДоговора = Справочники.ТипыДоговоров.ФормулаАвтоПлюс Тогда
			подразделениеДохода =  справочники.Подразделения.НайтиПоКоду("00171");
		ИначеЕсли Договорконтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль Тогда
			подразделениеДохода =   справочники.Подразделения.НайтиПоКоду("00170");
		ИначеЕсли Договорконтрагента.ТипДоговора = Справочники.ТипыДоговоров.TyreTechnology Тогда //гонконг
			подразделениеДохода =   справочники.Подразделения.НайтиПоКоду("00166");
		ИначеЕсли Договорконтрагента.ТипДоговора = Справочники.ТипыДоговоров.WheelsGroupLimited Тогда  //турция
			подразделениеДохода =   справочники.Подразделения.НайтиПоКоду("00162");
		иначе
			подразделениеДохода = ?(ЗначениеЗаполнено(ДоговорКонтрагента.ОтветственноеЛицо.ПодразделениеБюджет),ДоговорКонтрагента.ОтветственноеЛицо.ПодразделениеБюджет,ДоговорКонтрагента.ОтветственноеЛицо.ОсновноеПодразделение);	
		конецЕсли;
	конецЕсли;
	//Миронычев
	Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ЗапретСозданияДокументовВозврата")  Тогда
		Отказ = истина;
		Сообщить("Вам запрещено создавать документы Возврат товаров от покупателя");
	КонецЕсли;
	//КонецМиронычев

	яштДокументОбъектПередЗаписью(ЭтотОбъект, Отказ);
	
	// Проверка заполнения единицы измерения мест и количества мест
	ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары")+ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");

	// Заполнить склад и ордер в табличных частях
	УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
	СкладИзШапки    =  (УказаниеСкладов <> Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
	                 И (УказаниеСкладов <> Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления);

	ЗаполнитьСкладИОрдерВСтрокахТабЧасти(ЭтотОбъект, Товары,         СкладИзШапки);
	ЗаполнитьСкладИОрдерВСтрокахТабЧасти(ЭтотОбъект, ВозвратнаяТара, СкладИзШапки);

	
	ПроверкаВозможностиИзмененияДокумента(ЭтотОбъект, Отказ);

	// проверка соответствия веса	
	ВесИтого=ПолучитьОбщийВесНетто(Товары);
	Если ВесИтого<>ОбщийВес Тогда
		ЗаполнитьВесНетто(Товары);
	ОбщийВес=ВесИтого;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
	    //БАЛАНС (04.12.2007)                       
		//11.09.14 Смирнов
		Если  ОтражатьВБухгалтерскомУчете тогда
			ЗарегистрироватьОбъект(ЭтотОбъект,Отказ,мПроведениеИзФормы);
		КонецЕсли;
		
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 

	
КонецПроцедуры // ПередЗаписью()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Для определения где нужно проверять склад: в шапке или в ТЧ.
	УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
	СкладВТабличнойЧасти =    (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
		                  Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления);
	СтруктураШапкиДокумента.Вставить("СкладВТабличнойЧасти", СкладВТабличнойЧасти);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = СформироватьДеревоПолейЗапросаПоШапке();
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов"                      , "ВедениеВзаиморасчетов");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "РасчетыВУсловныхЕдиницах"                   , "РасчетыВУсловныхЕдиницах");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов"                       , "ВалютаВзаиморасчетов");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"                                , "ДоговорОрганизация");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора"                                , "ВидДоговора");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ОбособленныйУчетТоваровПоЗаказамПокупателей", "ОбособленныйУчет");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"              , "ВидОперации"                                , "СделкаВидОперации");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиПартионныйУчетПоСкладам"               , "ВестиПартионныйУчетПоСкладам");
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер"      , "ВидСклада"                                  , "ВидСклада");
	Иначе
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер"      , "Склад.ВидСклада"                            , "ВидСклада");
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер"      , "Склад"                                      , "СкладПриходногоОрдера");
	КонецЕсли;

	// Дополним полями, нужными для упр. учета
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Здесь контролировать сумму задолженности, предоплату и число дней задолженности не надо
	СтруктураШапкиДокумента.Вставить("КонтролироватьСуммуЗадолженности", Ложь);
	СтруктураШапкиДокумента.Вставить("ПроцентПредоплаты", 0);
	СтруктураШапкиДокумента.Вставить("КонтролироватьЧислоДнейЗадолженности", Ложь);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"                 , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                       , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                        , "Номенклатура.Набор");
	СтруктураПолей.Вставить("КоличествоДок"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("Цена"                         , "Цена");
	СтруктураПолей.Вставить("Сумма"                        , "Сумма");
	СтруктураПолей.Вставить("СуммаДок"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                    , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                          , "СуммаНДС");
	СтруктураПолей.Вставить("НДСДок"                       , "СуммаНДС");
	СтруктураПолей.Вставить("НомерСтроки"                  , "НомерСтроки");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"   , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"            , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ДокументПартии"               , "ДокументПартии");
	СтруктураПолей.Вставить("Себестоимость"                , "Себестоимость");
	СтруктураПолей.Вставить("Качество"                     , "Качество");
	СтруктураПолей.Вставить("Склад"                        , "Склад");
	СтруктураПолей.Вставить("ДокументПолучения"            , "ПриходныйОрдер");
	СтруктураПолей.Вставить("ОрганизацияДокументаПолучения", "ПриходныйОрдер.Организация");

	РезультатЗапросаПоТоварам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Удалить ("Количество");
	СтруктураПолей.Вставить("КоличествоДок"             , "Количество"); // Количество нужно выгружать с другим псевдонимом, иначе нельзя будет использовать отрицательные значения
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("НомерСтроки"               , "НомерСтроки");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");
	СтруктураПолей.Вставить("Склад"                     , "Склад");
	СтруктураПолей.Вставить("ДокументПолучения"         , "ПриходныйОрдер");

	РезультатЗапросаПоТаре = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары" и "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	яштАдресноеХранение.ПроверитьЗаполнениеТабЧастиТоварыАдресноеХранение(ЭтотОбъект.Ссылка, Отказ);  //+++ 31.07.2014
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);

	ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок);

	ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Ложь, мВалютаРегламентированногоУчета);
	
	//Проверим на возможность проведения в БУ и НУ
	Если ОтражатьВБухгалтерскомУчете 
	 Или ОтражатьВНалоговомУчете Тогда
		ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, ВалютаДокумента,
		                                     ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, мВалютаРегламентированногоУчета, 
		                                     Ложь, Отказ, Заголовок, "", СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                                     СтруктураШапкиДокумента.РасчетыВУсловныхЕдиницах);
	КонецЕсли;

	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
		
		Если Найти(ссылка.ДоговорКонтрагента.наименование,"*")=0 тогда //+++ 17.04.2012 не за наличку
 			ИзменитьРегСведДанныеПоДокументам(); //+++ 10.04.2012
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭтотОбъект.Сделка) и ТипЗнч(ЭтотОбъект.Сделка)=Тип("ДокументСсылка.ЗаказПокупателя") тогда  //+++ 20.05.2013
				//ЗаказПокупателяОбъект = ЭтотОбъект.Сделка.ПолучитьОбъект(); // ЗаказПокупателяОбъект из сделки
		    	//ОбменСУТИнтернетМагазин.ВключитьРегистрациюОбъектаОИМ(ЗаказПокупателяОбъект); // заказ станет "Отгружен частично"!
				ОбменСУТИнтернетМагазин.ВключитьРегистрациюОбъектаОИМ(ЭтотОбъект.Сделка, Контрагент.ПриниматьЗаказыЧерезСайт); // 01.11.2016
		//	КонецЕсли;
		КонецЕсли;

	КонецЕсли;
			//Миронычев
		Если не отказ тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостояниеЗаказовИМ.Номенклатура,
		|	СостояниеЗаказовИМ.ЗаказОбщий,
		|	СостояниеЗаказовИМ.ЗаказПервичный,
		|	СостояниеЗаказовИМ.Состояние
		|ИЗ
		|	РегистрСведений.СостояниеЗаказовИМ КАК СостояниеЗаказовИМ
		|ГДЕ
		|	ВЫБОР
		|			КОГДА СостояниеЗаказовИМ.ЗаказПервичный.TerminalОтгрузкаТранспортнойКомпанией = &Terminal
		|				ТОГДА СостояниеЗаказовИМ.ЗаказПервичный = &ЗаказПервичный
		|			КОГДА &ЗаказПервичныйТип = 10
		|				ТОГДА СостояниеЗаказовИМ.ЗаказПервичный = &ЗаказПервичный
		|			ИНАЧЕ СостояниеЗаказовИМ.ЗаказОбщий = &ЗаказПервичный
		|		КОНЕЦ
		|	И СостояниеЗаказовИМ.Номенклатура В(&Номенклатура)
		|	И СостояниеЗаказовИМ.Состояние = &Состояние";
		
		Запрос.УстановитьПараметр("Terminal", ЭтотОбъект.Сделка.TerminalОтгрузкаТранспортнойКомпанией);
    	Запрос.УстановитьПараметр("ЗаказПервичныйТип", ЭтотОбъект.Сделка.ТипЗаказа);
		Запрос.УстановитьПараметр("ЗаказПервичный", ЭтотОбъект.Сделка);
		Запрос.УстановитьПараметр("Номенклатура", Товары.ВыгрузитьКолонку("Номенклатура"));
		Запрос.УстановитьПараметр("Состояние", Перечисления.СостояниеЗаказовИМ.Отгружен);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ЗаписатьРегистрСтатусов(ВыборкаДетальныеЗаписи.ЗаказПервичный, ВыборкаДетальныеЗаписи.ЗаказОбщий, Перечисления.СостояниеЗаказовИМ.Возвращен, , ВыборкаДетальныеЗаписи.Номенклатура);	
		КонецЦикла;
	КонецЕсли;
//КонецМиронычев
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	// Удаление записей регистрации из всех последовательностей
	Для Каждого НаборЗаписейРегистрацииВПоследовательности Из ПринадлежностьПоследовательностям Цикл
		НаборЗаписейРегистрацииВПоследовательности.Очистить();
	КонецЦикла;
	
	Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Если Значениезаполнено(Сделка)Тогда
			//ДокументОбъект=Сделка.ПолучитьОбъект();
			//ДокументОбъект.ОбменДанными.Загрузка = истина; //+++ 19.10.2011 для перезаписи даже в закрытом периоде?!
			Попытка
			//	ОбменСУТИнтернетМагазин.ВключитьРегистрациюОбъектаОИМ(ДокументОбъект,Истина);
			ОбменСУТИнтернетМагазин.ВключитьРегистрациюОбъектаОИМ(Сделка, Контрагент.ПриниматьЗаказыЧерезСайт);
			исключение
			КонецПопытки;
		конецЕсли;	
	конецЕсли;
КонецПроцедуры

 
//+++ 10.04.2012
// меняем все записи по реализациям которые созданы на основании Заказа
// и в которых есть номенклатура на возврат!
//
процедура ИзменитьРегСведДанныеПоДокументам() 
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Сделка) тогда
		возврат;
	КонецЕсли;
	
	Если ТипЗнч(ЭтотОбъект.Сделка)<>Тип("ДокументСсылка.ЗаказПокупателя") тогда
		возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	 			   |	Продажи.ДокументПродажи.ссылка как ссылка,
				   |	Продажи.ДокументПродажи.Номер КАК Номер,
				   |	Продажи.ДокументПродажи.Дата КАК Дата,
				   |	Продажи.ДокументПродажи.Контрагент КАК Контрагент
				   |ИЗ
				   |	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
				   |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(&Дата, &Дата1, , ЗаказПокупателя = &Сделка) КАК Продажи
				   |		ПО ВозвратТоваровОтПокупателяТовары.Номенклатура = Продажи.Номенклатура
				   |			И ВозвратТоваровОтПокупателяТовары.ХарактеристикаНоменклатуры = Продажи.ХарактеристикаНоменклатуры
				   |			И ВозвратТоваровОтПокупателяТовары.Ссылка.Сделка = Продажи.ЗаказПокупателя
				   |ГДЕ
				   |	ВозвратТоваровОтПокупателяТовары.Ссылка = &СсылкаЭтотДок";
	
	Запрос.УстановитьПараметр("СсылкаЭтотДок", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Сделка", ЭтотОбъект.Сделка);
	Запрос.УстановитьПараметр("Дата", НачалоДня(ЭтотОбъект.Сделка.Дата) );  // реализация не раньше Заказа покупателя!
	Запрос.УстановитьПараметр("Дата1",ТекущаяДата() );  // реализация не позже Возврата от покупателя!
	
	
	Результат = Запрос.Выполнить();
	Основание = Результат.Выбрать();
	
	//+++( 10.04.2012 
	Если Основание.Количество()=0 тогда
		сообщить("Не найдено ни одного проведенного документа ""Реализация товаров и услуг"" по сделке: "+строка(ЭтотОбъект.Сделка));
	КонецЕсли;	
	// ВСЕ РЕАЛИЗАЦИИ !!!
	
	//+++ 19.11.2013 - регистр уже не используется!
	//Пока Основание.Следующий() Цикл
	//	
	//	регСвед = регистрыСведений.ДанныеДляУчетаОтгрузок.СоздатьМенеджерЗаписи();
	//		  регСвед.Контрагент      = Сделка.Контрагент;
	//		  регСвед.НомерРеализации = СокрЛП(Основание.Номер);
	//		  регСвед.Период = НачалоДня(Основание.Дата);
	//		  регСвед.Прочитать();
	//		  
	//	  Если регСвед = неопределено тогда
	//		  сообщить("в регистре сведений ""Данные для учета отгрузок"" - не найдена реализация № "+строка(Основание.Номер));
	//	  иначе  
	//		  регСвед.Контрагент =  Сделка.Контрагент;
	//		  регСвед.НомерЗаявки	  = Сделка.Номер;
	//		  регСвед.НомерРеализации = Основание.Номер;
	//		  регСвед.Период = НачалоДня(Основание.Дата);
	//		  
	//		  регСвед.Статус = Перечисления.СтатусыДокументовОтгрузки.Изменен;
	//		  регСвед.Примечание = регСвед.Примечание+"/Сумма изменена док.""Возврат от Покупателя"" №"+строка(ЭтотОбъект.Номер)+" от "+строка(ЭтотОбъект.Дата)+" (старая сумма: "+формат(регСвед.СуммаОтгрузки,"ЧДЦ=2") +"р.)/";
	//		  регСвед.ОтветственноеЛицо = ЭтотОбъект.Ответственный;
	//		  
	//		  сумРеализации = Основание.ссылка.Товары.Итог("Сумма") + Основание.ссылка.Услуги.Итог("Сумма");
	//		  регСвед.СуммаОтгрузки = сумРеализации - ЭтотОбъект.Товары.Итог("Сумма");   // НДС обычно входит в сумму
	//		  
	//		  регСвед.Статус = Перечисления.СтатусыДокументовОтгрузки.Изменен;
	//		  регСвед.Примечание = "сумма: "+формат(сумРеализации,"ЧДЦ=2")+"р. >> Возврат №"+строка(Номер)+" от "+формат(Дата,"ДЛФ=D");
	//		  
	//			попытка	
	//				регСвед.Записать(истина); // с замещением!
	//				сообщить("в регистре сведений ""Данные для учета отгрузок"" - изменена запись для документа № "+строка(Основание.Номер)+" от "+формат(Основание.Дата,"ДФ=dd.MM.yyyy"), СтатусСообщения.Информация);
	//			исключение
	//				сообщить("Ошибка записи в регистре сведений ""Данные для учета отгрузок"": "+ОписаниеОшибки(), СтатусСообщения.Внимание);
	//				//сообщить("ТРЕБУЕТСЯ изменить запись для документа № "+строка(Основание.Номер)+" от "+формат(Основание.Дата,"ДФ=dd.MM.yyyy"), СтатусСообщения.Внимание);
	//			КонецПопытки;	
	//	
	//		КонецЕсли;
	//КонецЦикла;
	////+++)

	
	
КонецПроцедуры

Функция НайтиОРП(ДокументОснование)
	Запрос = Новый Запрос("Выбрать Различные Ссылка Из Документ.ОтчетОРозничныхПродажах.Товары Где Ссылка.Проведен и ДокументОснование=&Ссылка");
	Запрос.УстановитьПараметр("Ссылка",ДокументОснование);
	Выб = Запрос.Выполнить().Выбрать();
	
	Если выб.Следующий() Тогда 
		Возврат Выб.ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
		
КонецФункции

//---15.06.2016 определение Договора контрагента. 
//Регистр Продажи - у Контрагента заполнен реквизит "Контрагент дял резерва ИМ"

Функция ВернутьДоговорКонтрагентаИзДокументаПродажи(Стр)	
	Если ТипЗнч(Стр.ДокументПартии)  = тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтчетОРозничныхПродажахТовары.ДокументОснование.ДоговорКонтрагента как ДоговорКонтрагента
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахТовары
		|ГДЕ
		|	ОтчетОРозничныхПродажахТовары.Номенклатура = &Номенклатура
		|	И ОтчетОРозничныхПродажахТовары.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Номенклатура", Стр.Номенклатура);
		Запрос.УстановитьПараметр("Ссылка", Стр.ДокументПартии);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ДоговорКонтрагентаПродажи = ВыборкаДетальныеЗаписи.ДоговорКонтрагента;			
		КонецЕсли;	
		Возврат ДоговорКонтрагентаПродажи;
	КонецЕсли;
	
	МетаданныеДокументаПродажи = Стр.ДокументПартии.Метаданные();	
	
	Если МетаданныеДокументаПродажи.Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено Тогда 
		ДоговорКонтрагентаПродажи = Стр.ДокументПартии.ДоговорКонтрагента;
		Возврат ДоговорКонтрагентаПродажи;
	КонецЕсли;	
	
	ДоговорКонтрагентаПродажи = ДоговорКонтрагента;
	возврат ДоговорКонтрагентаПродажи;
КонецФункции

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

//БАЛАНС (04.12.2007)                       
//
мПроведениеИзФормы = Ложь; 