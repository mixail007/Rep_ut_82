////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов; 

// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента; 

// Устанавливается в значение "Истина", если пользователю можно менять цену
// в документе
Перем мМожноМенятьЦенуВДокументе;

Перем мКолонкиТовары, мКолонкиВозвратнаяТара;

Перем мПечатнаяФормаПоУмолчанию;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	ПриИзмененииЗначенияДоговора(ЭтотОбъект, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Продажа", "Товары", мТекущийДоговорКонтрагента);

	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Если типЗнч(Сделка)<>тип("ДокументСсылка.ЗаявкаНаВозвратТоваров") тогда//29.12.2015
		СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка, Истина);
	КонецЕсли;
	УстановитьЗаголовкиПоДоговору();

	УстановитьВидимость();
	УстановитьАвтоотметку();

КонецПроцедуры // ПриИзмененииДоговора()

// Считывает необходимые для копирования табличной части документа данные из другого документа.
//
// Параметры: 
//  ДокументСсылка - ссылка на документ, чью табличную часть будем копировать, 
//  ТабличнаяЧасть - табличная часть, которую заполняем.
//
// Возвращаемое значение:
//  Выборка из результата запроса.
//
Функция ПолучитьДанныеДляКопирования(ДокументСсылка, ТабличнаяЧасть)

	// Считываем нужную информацию по документу Реализации
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.Количество,
	|	Док.Цена,
	|	Док.Ссылка.ВалютаДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|       Док.Ссылка.КурсВзаиморасчетов
	|   ИНАЧЕ
	|       1
	|   КОНЕЦ                         КАК КурсДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|       Док.Ссылка.КратностьВзаиморасчетов
	|   ИНАЧЕ
	|       1
	|   КОНЕЦ                         КАК КратностьДокумента,";
	Если ТабличнаяЧасть = Товары Тогда
		Запрос.Текст = Запрос.Текст + "
		|	Док.ЕдиницаИзмерения,
		|	Док.ЕдиницаИзмеренияМест,
		|	Док.Коэффициент,
		|	Док.КоличествоМест,
		|	Док.Ссылка                         КАК ДокументПартии,
		|	Док.Ссылка.УчитыватьНДС,
		|	Док.Ссылка.СуммаВключаетНДС,
		|	Док.ПроцентСкидкиНаценки,
		|	Док.СтавкаНДС,
		|	Док.Качество,
		|	Док.ХарактеристикаНоменклатуры,
		|	Док.СерияНоменклатуры ";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов  КАК ВалютаВзаиморасчетов,
		|	Док.Ссылка.КурсВзаиморасчетов, 
		|	Док.Ссылка.КратностьВзаиморасчетов ";
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Документ."+ ДокументСсылка.Метаданные().Имя + ?(ТабличнаяЧасть = Товары,".Товары",".ВозвратнаяТара") + " КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование 
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Возврат Выборка;

КонецФункции // ПолучитьДанныеДляКопирования()

// Процедура выполняет копирование табличной части из заданного в форме заказа покупателя.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, которую необходимо заполнить.
//
Процедура ЗаполнитьТабличнуюЧастьПоЗаказуПокупателя(ТабличнаяЧасть)

	ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам;
	Если ЗначениеНеЗаполнено(Сделка) Тогда
		ПредставлениеЗаказПокупателя = НРег(Лев(ЭлементыФормы.НадписьСделка.Заголовок, СтрДлина(ЭлементыФормы.НадписьСделка.Заголовок)-1));
	Иначе
		ПредставлениеЗаказПокупателя = Сделка.Метаданные().Представление();
	КонецЕсли;

	ЗаполнятьТабличнуюЧасть = Ложь;
	Если ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстПредупреждения = "Не выбран договор. Заполнение невозможно.";

	ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = ВедениеВзаиморасчетов.ПоРасчетнымДокументам Тогда
		ТекстПредупреждения = "Заполнение производится только для договоров,
		                      |взаиморасчеты по которым ведутся по заказам (счетам) или
		                      |по договору в целом.";

	ИначеЕсли ЗначениеНеЗаполнено(Сделка)
		  ИЛИ (НЕ ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")
		    И  НЕ ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю")) Тогда
		  
		ТекстПредупреждения = "Не выбран "+ПредставлениеЗаказПокупателя +".
		                      |Заполнение невозможно.";

	ИначеЕсли Не Сделка.Проведен И Не ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ТекстПредупреждения = ПредставлениеЗаказПокупателя  + " не проведен.
		                      |Заполнение невозможно.";
	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, , Метаданные().Представление());
		Возврат;
	КонецЕсли;

	Если ТабличнаяЧасть.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		ТабличнаяЧасть.Очистить();
	КонецЕсли;

	Если ТабличнаяЧасть = Товары Тогда
		ЗаполнитьТоварыПоОснованию(Сделка);
		
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
		ЗаполнитьВозвратнуюТаруПоОснованию(Сделка);

	КонецЕсли;

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоЗаказуПокупателя()

// Процедура выполняет заполнение табличной части 
// копированием из выбранного пользователем документа РеализацияТоваровУслуг.
//
// Параметры:
//  ТабличнаяЧасть   - табличная часть, которую необходимо заполнить.
//  СпособЗаполнения - строка ("Заполнить" или "Добавить"), определяет способ заполнения.
//
Процедура ЗаполнитьТабличнуюЧастьПоРеализации(ТабличнаяЧасть, СпособЗаполнения)


	// Оценочная стоимость возвратной тары учитывается в валюте взаиморасчетов по договору,
	// поэтому перед заполнением договор должен быть выбран.
	Если ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
		Предупреждение("Не выбран договор контрагента!");
		Возврат;
	ИначеЕсли ЗначениеНеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
		Предупреждение("Не выбрана валюта взаиморасчетов по договору!");
		Возврат;
	КонецЕсли; 

	// Если заполняем, то почистим ТЧ
	Если СпособЗаполнения = "Заполнить"
	   И ТабличнаяЧасть.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		ТабличнаяЧасть.Очистить();
	КонецЕсли;
	
	// Теперь нужно выбрать документ, по которому будем заполнять
	ФормаВыбора = Документы.РеализацияТоваровУслуг.ПолучитьФормуВыбора();
	ФормаВыбора.Заголовок   = "Выберите документ Реализация для заполнения возврата от покупателя";
	ФормаВыбора.РежимВыбора = Истина;

	// По умолчанию поставим отбор по договору
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Значение      = ДоговорКонтрагента;
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Истина;

	ДокументРеализации = ФормаВыбора.ОткрытьМодально();

	Если ЗначениеНеЗаполнено(ДокументРеализации) Тогда 
		Возврат; // ничего не выбрали.
	КонецЕсли;

	// Будем работать только с проведенными документами, потому что только у проведенных документов
	// проверено заполнение необходимых реквизитов.
	Если Не ДокументРеализации.Проведен Тогда

		Предупреждение("Документ " + ДокументРеализации.Метаданные().Представление() + " не проведен.
		               |Заполнение невозможно.", , Метаданные().Представление());
		Возврат;

	КонецЕсли;

	// Вызываем процедуру заполнения.
	Если СпособЗаполнения = "Заполнить" Тогда

		Если ТабличнаяЧасть = Товары Тогда

			ЗаполнитьТоварыПоОснованию(ДокументРеализации);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			ЗаполнитьВозвратнуюТаруПоОснованию(ДокументРеализации);

		КонецЕсли;
	
	Иначе // При добавлении надо сворачивать дубли строк, аналогично подбору

		ДобавитьСтрокиТабличнойЧастиИзДокументаРеализации(ПолучитьДанныеДляКопирования(ДокументРеализации, ТабличнаяЧасть), ТабличнаяЧасть);

	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоРеализации()

// Процедура выполняет заполнение табличной части 
// копированием из выбранного пользователем документа РеализацияТоваровУслуг.
//
// Параметры:
//  ТабличнаяЧасть   - табличная часть, которую необходимо заполнить.
//  СпособЗаполнения - строка ("Заполнить" или "Добавить"), определяет способ заполнения.
//
Процедура ЗаполнитьТабличнуюЧастьПоОрдеру(ТабличнаяЧасть)
	
	// Почистим ТЧ
	Если ТабличнаяЧасть.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		ТабличнаяЧасть.Очистить();
	КонецЕсли;
	
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		Если ЗначениеНеЗаполнено(СкладОрдер) Тогда
			Предупреждение("Не заполнен приходный ордер! Заполнение невозможно!");
		Иначе
			ЗаполнитьТоварыПоОрдеруУпр(СкладОрдер, ТабличнаяЧасть);
		КонецЕсли;
	Иначе
		Предупреждение("Заполнения по ордеру возможно только для возврата по ордеру!");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоРеализации()

// Добавляет с необходимым пересчетом строки табличной части из выбранного документа Реализация
//
// Параметры: 
//  Выборка         - выборка из результата запроса по документу, из которого надо добавить строки табличной части,
//  ТабличнаяЧасть  - табличная часть, в которую надо добавить строки.
//
Процедура ДобавитьСтрокиТабличнойЧастиИзДокументаРеализации(Выборка, ТабличнаяЧасть)

	// Обходим строки Реализации
	СтруктураОтбора = Новый Структура();
	Пока Выборка.Следующий() Цикл

		// Ищем текущую позицию основания в табличной части документа возврата.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора.Вставить("Номенклатура", Выборка.Номенклатура);

		Если ТабличнаяЧасть = Товары Тогда
			СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Выборка.ХарактеристикаНоменклатуры);
			СтруктураОтбора.Вставить("СерияНоменклатуры",          Выборка.СерияНоменклатуры);
			СтруктураОтбора.Вставить("ЕдиницаИзмерения",           Выборка.ЕдиницаИзмерения);
			СтруктураОтбора.Вставить("ЕдиницаИзмеренияМест",       Выборка.ЕдиницаИзмеренияМест);
		КонецЕсли;

		СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
		Если СтрокаТабличнойЧасти <> Неопределено Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество =  СтрокаТабличнойЧасти.Количество + Выборка.Количество;

			Если ТабличнаяЧасть = Товары Тогда

				// Рассчитать реквизиты табличной части.
				РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

				// Рассчитать реквизиты табличной части.
				РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			КонецЕсли;
		Иначе

			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
			СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
			
			Если ТабличнаяЧасть = Товары Тогда

				СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
				СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест       = Выборка.ЕдиницаИзмеренияМест;
				СтрокаТабличнойЧасти.Коэффициент                = Выборка.ЕдиницаИзмерения.Коэффициент;
				СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
				СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
				СтрокаТабличнойЧасти.ПроцентСкидкиНаценки       = Выборка.ПроцентСкидкиНаценки;
				СтрокаТабличнойЧасти.ДокументПартии             = Выборка.ДокументПартии;
				СтрокаТабличнойЧасти.Качество                   = Выборка.Качество;

				// Заполняем реквизиты табличной части.
				ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

				// Пересчитаем цену в валюту документа.
				Цена = ПересчитатьИзВалютыВВалюту(Выборка.Цена, 
				                  Выборка.ВалютаДокумента,    ВалютаДокумента, 
				                  Выборка.КурсДокумента,      КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				                  Выборка.КратностьДокумента, КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));

				СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
				                                                 Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				                                                 Выборка.УчитыватьНДС 
				                                               И Выборка.СуммаВключаетНДС,
				                                                 УчитыватьНДС,
																 СуммаВключаетНДС,
				                                                 ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

				// Рассчитываем реквизиты табличной части.
				РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

				// Пересчитаем цену в валюту взаиморасчетов (в документах договоры могут отличаться).
				СтрокаТабличнойЧасти.Цена = ПересчитатьИзВалютыВВалюту(Выборка.Цена, 
				                  Выборка.ВалютаДокумента, ДоговорКонтрагента.ВалютаВзаиморасчетов,
				                  Выборка.КурсДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				                  Выборка.КратностьДокумента, КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));

				// По флагам налогообложения тару пересчитывать не надо,
				// Считаем, для тары флаги одинакове (с НДС),

				// Рассчитать реквизиты табличной части.
				РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			КонецЕсли;
		КонецЕсли; // СтрокаТабличнойЧасти <> Неопределено

	КонецЦикла;

КонецПроцедуры // ДобавитьСтрокиТабличнойЧастиИзДокументаРеализации()

// Процедура выполняет заполнение табличной части не реализованными товарами.
//
// Параметры:
//  СпособЗаполнения - строка способа заполнения ("ПоДокументу" или "ПоДоговору").
//
Процедура ЗаполнитьТоварыНереализованнымиТоварами(СпособЗаполнения)

	ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам;
	ПредставлениеЗаказПокупателя = Метаданные.Документы.ЗаказПокупателя.Представление();

	ЗаполнятьТабличнуюЧасть = Ложь;
	Если ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстПредупреждения = "Не выбран договор. Заполнение невозможно.";

	ИначеЕсли ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ТекстПредупреждения = "Заполнение производится только для документов оформленных по договору с комиссионером.";

	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, , Метаданные().Представление());
		Возврат;
	КонецЕсли;
	
	Если Товары.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		Товары.Очистить();
	КонецЕсли;

	// Добудем нереализованные товары
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Договор"          , ДоговорКонтрагента);
	
	Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	 ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		Запрос.УстановитьПараметр("Сделка"           , Сделка);
	Иначе
		Запрос.УстановитьПараметр("Сделка"           , Неопределено);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СтатусПередачи"   , Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию);

	Если СпособЗаполнения = "ПоДокументу" Тогда

		// Выберем документ
		ФормаВыбора = Документы.РеализацияТоваровУслуг.ПолучитьФормуВыбора();
	
		ФормаВыбора.Заголовок = "Выберите документ Реализация для заполнения возврата от покупателя";
		ФормаВыбора.РежимВыбора = Истина;

		// По умолчанию поставим отбор по договору
		ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Значение = ДоговорКонтрагента;
		ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Истина;
	
		ДокументРеализации = ФормаВыбора.ОткрытьМодально();

		Если ЗначениеНеЗаполнено(ДокументРеализации) Тогда 
			Возврат; // ничего не выбрали.
		КонецЕсли;

		Запрос.УстановитьПараметр("ДокументОснование", ДокументРеализации);
		
		// Вложенный запрос, ограничивающий список номенклатуры
		// документ типа Внутренний заказ не может быть основанием для возврата с комиссии  
		ТекстЗапросаСписокНоменклатуры = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Номенклатура 
		|ИЗ 
		|	Документ.РеализацияТоваровУслуг.Товары   
		|ГДЕ Ссылка = &ДокументОснование";

	КонецЕсли; 

	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.СтавкаНДС,
	|	Док.ЕдиницаИзмерения,
	|	Док.Коэффициент,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентХраненияОстатков,
	|	Док.Количество                                       КАК КоличествоРеализации,
	|	Док.Цена,
	|	Док.ПроцентСкидкиНаценки,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры,
	|	Док.Ссылка.ВалютаДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|       Док.Ссылка.КурсВзаиморасчетов
	|   ИНАЧЕ
	|       1
	|   КОНЕЦ                         КАК КурсДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|       Док.Ссылка.КратностьВзаиморасчетов
	|   ИНАЧЕ
	|       1
	|   КОНЕЦ                         КАК КратностьДокумента,
	|	Док.Ссылка.УчитыватьНДС,
	|	Док.Ссылка.СуммаВключаетНДС,
	|	Остатки.КоличествоОстаток                            КАК КоличествоОстатокРеализации,
	|	Остатки.СуммаВзаиморасчетовОстаток                   КАК СуммаВзаиморасчетовОстаток,
	|	Док.Ссылка                                           КАК ДокументПередачи
	|ИЗ
	|	РегистрНакопления.ТоварыПереданные.Остатки(,
	|";
	
	Если СпособЗаполнения = "ПоДокументу" Тогда
		Запрос.Текст = Запрос.Текст + "
		|	          Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
		|	        И ДоговорКонтрагента = &Договор
		|	        И Сделка                = &Сделка
		|           И СтатусПередачи        = &СтатусПередачи
		|	        ) КАК Остатки
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.РеализацияТоваровУслуг.Товары КАК Док
		|ПО
		|   Док.Номенклатура               = Остатки.Номенклатура
		|   И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
		|
		|ГДЕ
		|	  Остатки.КоличествоОстаток > 0
		|	 И Док.Ссылка = &ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	Док.НомерСтроки
		|";
	Иначе // по договору
			Запрос.Текст = Запрос.Текст + "
		|	        ДоговорКонтрагента = &Договор
		|	      И Сделка                = &Сделка
		|	      И СтатусПередачи        = &СтатусПередачи
		|	        ) КАК Остатки
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.РеализацияТоваровУслуг.Товары КАК Док
		|ПО
		|   Док.Номенклатура               = Остатки.Номенклатура
		|   И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
		|
		|ГДЕ
		|	  Остатки.КоличествоОстаток > 0
		|	И Док.Ссылка.ДоговорКонтрагента = &Договор
		|";
	КонецЕсли; 

	РезультатЗапроса = Запрос.Выполнить();
				 
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура         = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество           = Мин(Выборка.КоличествоРеализации, 
																		Выборка.КоличествоОстатокРеализации);
		СтрокаТабличнойЧасти.КоличествоМест      = Мин(Выборка.КоличествоРеализации, 
		                                           ?(Выборка.Коэффициент = 0, 0, Выборка.КоличествоОстатокРеализации
		                                                 * Выборка.КоэффициентХраненияОстатков/Выборка.Коэффициент));
		СтрокаТабличнойЧасти.ЕдиницаИзмерения     = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент          = Выборка.Коэффициент;
		СтрокаТабличнойЧасти.СтавкаНДС            = Выборка.СтавкаНДС;
		СтрокаТабличнойЧасти.Цена                 = Выборка.СуммаВзаиморасчетовОстаток / Выборка.КоличествоОстатокРеализации;
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Выборка.ПроцентСкидкиНаценки;
		
		// Пересчитаем цену в валюту документа (может отличаться от валюты основания).
		Цена = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, 
		                  КурсВзаиморасчетов, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
		                  КратностьВзаиморасчетов, КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));

		СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
		                                                 Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
		                                                 Истина,
		                                                 УчитыватьНДС,
		                                                 СуммаВключаетНДС,
		                                                 ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.ДокументПартии             = Выборка.ДокументПередачи;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыНереализованнымиТоварами()

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)

	СписокЗапросов      = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");
	
	Если ТабличнаяЧасть = Товары Тогда
		Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			СписокЗапросов.Добавить("ОстаткиУКомиссионеров", "По остаткам номенклатуры у комиссионера");
		Иначе
			СписокЗапросов.Добавить("РасходЦеныНоменклатуры", "По ценам номенклатуры");
		КонецЕсли; 
	КонецЕсли;

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для
// подбора номеклатуры в табличную часть.
//
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена  = мМожноМенятьЦенуВДокументе;
	ЕстьСерия = Истина;

	Если ТабличнаяЧасть = Товары Тогда
		Команда         = "ПодборВТабличнуюЧастьТовары";
		Валюта          = ВалютаДокумента;
		ИмяТабличнойЧасти = "Товары";
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

		Если ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
			Предупреждение("Не выбран договор контрагента!");
			Возврат;
		ИначеЕсли ЗначениеНеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
			Предупреждение("Не выбрана валюта взаиморасчетов по договору!");
			Возврат;
		КонецЕсли; 

		Команда           = "ПодборВТабличнуюЧастьВозвратнаяТара";
		Валюта            = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		ЕстьСерия         = Ложь;
		ИмяТабличнойЧасти = "Тара";
	КонецЕсли;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                , СкладОрдер);
	
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		Если СкладОрдер.ВидСклада <> Перечисления.ВидыСкладов.Оптовый И НЕ СкладОрдер.ТипЦенРозничнойТорговли.Пустая() Тогда
			СтруктураПараметровПодбора.Вставить("ТипЦен"           , СкладОрдер.ТипЦенРозничнойТорговли);
		Иначе
			СтруктураПараметровПодбора.Вставить("ТипЦен"           , ТипЦен);
		КонецЕсли;
	Иначе
		Если СкладОрдер.Склад.ВидСклада <> Перечисления.ВидыСкладов.Оптовый И НЕ СкладОрдер.Склад.ТипЦенРозничнойТорговли.Пустая() Тогда
			СтруктураПараметровПодбора.Вставить("ТипЦен"           , СкладОрдер.Склад.ТипЦенРозничнойТорговли);
		Иначе
			СтруктураПараметровПодбора.Вставить("ТипЦен"           , ТипЦен);
		КонецЕсли;		
	КонецЕсли;
		
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	СтруктураПараметровПодбора.Вставить("Контрагент"           , Контрагент);
	СтруктураПараметровПодбора.Вставить("Организация"          , Организация);

	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен"  , Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"            , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"      , Валюта);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия, Качество;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);

	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("КоличествоМест"  , КоличествоМест);
	ЗначениеВыбора.Свойство("Цена"            , Цена);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"           , Серия);
	ЗначениеВыбора.Свойство("Качество"        , Качество);
	
	Если ТабличнаяЧасть = ВозвратнаяТара И Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	Если ТабличнаяЧасть = Товары Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
		СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);
		Если ЗначениеНеЗаполнено(Качество) Тогда
			Качество = Справочники.Качество.Новый;
		КонецЕсли;
		СтруктураОтбора.Вставить("Качество"         , Качество);
	Иначе
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;
	
	СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура        = Номенклатура;

		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти.Количество          = Количество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения    = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент         = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;
			СтрокаТабличнойЧасти.Качество                   = Качество;

			// Заполняем реквизиты табличной части.
			ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Пересчитаем цену в валюту документа.
			Цена = ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                 СпособЗаполненияЦен,
			                                                 ТипЦен.ЦенаВключаетНДС,
			                                                 УчитыватьНДС,
			                                                 СуммаВключаетНДС,
			                                                 ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			СтрокаТабличнойЧасти.Количество          = Количество;

			// Пересчитаем цену в валюту документа.
			Цена = ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);
			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения.
			// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС,
			// ставки берутся из номенклатуры.
			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                     СпособЗаполненияЦен,
			                                     ТипЦен.ЦенаВключаетНДС,
			                                     УчитыватьНДС,
			                                     Истина,
			                                     ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС));

			// Рассчитать реквизиты табличной части.
			РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
	КонецЕсли;

	ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ТабличнаяЧастьИмя = ?(ТабличнаяЧасть = Товары, "Товары", "ВозвратнаяТара");
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ЗаполнитьСтавкуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект); 
	ЗаполнитьЕдиницуЦенуПродажиТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект, мВалютаРегламентированногоУчета); 

КонецПроцедуры // ПриИзмененииНоменклатурыТоваров()

// Производит заполнение и установку необходимых полей при изменении характеристики товара в табличной части.
//
Процедура ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 

КонецПроцедуры // ПриИзмененииХарактеристикиНоменклатурыТоваров()

// Процедура в зависимости от вида поступления определяет тип для выбора СкладаОрдера
//
Процедура УстановитьТипСкладаОрдера()

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		Если ТипЗнч(СкладОрдер)<>Тип("СправочникСсылка.Склады") Тогда
			СкладОрдер = Справочники["Склады"].ПустаяСсылка();
		КонецЕсли;
		ЭлементыФормы.СкладОрдер.Подсказка = "В этом поле необходимо указать склад, с которого оформляется возврат товаров.";
	Иначе
		Если ТипЗнч(СкладОрдер)<>Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			СкладОрдер = Документы["ПриходныйОрдерНаТовары"].ПустаяСсылка();
		КонецЕсли;
		ЭлементыФормы.СкладОрдер.Подсказка = "В этом поле необходимо указать приходный ордер, по которому ранее было оформлено поступление товаров.";
	КонецЕсли;

КонецПроцедуры // УстановитьТипСкладаОрдера()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	// Колонки налога показываем только тогда, когда его учитываем.
	Если УчитыватьНДС <> мКолонкиТовары.СтавкаНДС.Видимость Тогда
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СтавкаНДС, УчитыватьНДС);
	КонецЕсли;

	Если УчитыватьНДС <> мКолонкиТовары.СуммаНДС.Видимость Тогда
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СуммаНДС, УчитыватьНДС);
	КонецЕсли;

	// Колонку "Себестоимость" не надо показывать при возврате с реализации.
	ВозвратСРеализации = (ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.Себестоимость, Не ВозвратСРеализации);

	ВидимостьСчетов = НЕ (ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ЭтоКомиссия     =    (ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);

	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность          = ОтражатьВБухгалтерскомУчете;

	ВидимостьПриходногоОрдера = (ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру);
	мКолонкиТовары.ПриходныйОрдер.ИзменятьВидимость         = Истина;
	мКолонкиТовары.ПриходныйОрдер.Видимость                 = ВидимостьПриходногоОрдера;
	мКолонкиТовары.ПриходныйОрдер.ИзменятьВидимость         = ВидимостьПриходногоОрдера;
	мКолонкиВозвратнаяТара.ПриходныйОрдер.ИзменятьВидимость = Истина;
	мКолонкиВозвратнаяТара.ПриходныйОрдер.Видимость         = ВидимостьПриходногоОрдера;
	мКолонкиВозвратнаяТара.ПриходныйОрдер.ИзменятьВидимость = ВидимостьПриходногоОрдера;

	ВидимостьРеквизитаПроект(ЭтотОбъект, ЭлементыФормы, "НадписьПроект,Проект");

КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает автоотметку незаполненного для тех колонок в табличной части 
// "Товары", обязательность заполнения которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьАвтоотметку()

	Автоотметка = Ложь;
	
	Если НЕ ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	 	 ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			АвтоОтметка = Истина;
		КонецЕсли;
	КонецЕсли;

	Если ЭлементыФормы.Сделка.АвтоОтметкаНезаполненного <> Автоотметка Тогда
		ЭлементыФормы.Сделка.АвтоОтметкаНезаполненного = Автоотметка;
	КонецЕсли;

	Если ЭлементыФормы.Сделка.ОтметкаНезаполненного <> Автоотметка И ЗначениеНеЗаполнено(Сделка) Тогда
		ЭлементыФормы.Сделка.ОтметкаНезаполненного     = Автоотметка;
	КонецЕсли;

КонецПроцедуры // УстановитьАвтоотметку()

// Процедура устанавливает заголовки по выбранному договору для:
// - элементов формы НадписьСделки, НадписьСуммаВзаиморасчетов.
//
// Параметры:
//  Нет.
//
Процедура УстановитьЗаголовкиПоДоговору()

	УстановитьНадписьСделки(ЭтотОбъект, ЭтаФорма);
	УстановитьНадписьСуммыВзаиморасчетов(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // УстановитьЗаголовкиПоДоговору()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = ФорматСумм(ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары")+ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги"));
	ЭлементыФормы.ВсегоНДС.Значение = ФорматСумм(Товары.Итог("СуммаНДС")+Услуги.Итог("СуммаНДС"));

	ВременнаяСтрока = "";

	Если (НЕ ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента))
	   И (ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда

		ВременнаяСтрока = ВременнаяСтрока + КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета) + ДокументОбъект.ВалютаДокумента
		                + " = " + КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
		                + мВалютаРегламентированногоУчета + ", ";

	КонецЕсли;

	Если НЕ ЗначениеНеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
	Иначе
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если Не ЗначениеНеЗаполнено(ПараметрОснование) Тогда 
		Если ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			Если ПараметрОснование.ВидОперации <> Перечисления.ВидыОперацийПриходныйОрдер.ОтПокупателя Тогда
				Предупреждение("Возврат товаров от покупателя можно вводить только на основании приходного ордера от покупателя!");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	яштФормаДокументаПриОткрытии(ЭтотОбъект, ЭтаФорма);
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета, "Продажа");
		УстановитьНомерДокумента(ЭтотОбъект);

		Если Не ЗначениеНеЗаполнено(ПараметрОснование)
		   И ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			ОтражатьВУправленческомУчете = Истина;
		КонецЕсли;

	КонецЕсли;

	ПроверитьВидПоступленияПередачи(ЭтотОбъект, ЭтаФорма);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Цена");
	СтруктураКолонок.Вставить("Сумма");

	// Установить ограничение - изменять видимоть колонок для таличной части 
	// "Возвратная тара".
	УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиВозвратнаяТара, СтруктураКолонок);

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("СтавкаНДС");
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("ДокументПартии");
	СтруктураКолонок.Вставить("Себестоимость");
	СтруктураКолонок.Вставить("ЕдиницаИзмерения");

	УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиТовары, СтруктураКолонок);

	// Заполнить подменю выбора печатных форм.
	СписокМакетов = ЭтотОбъект.ПолучитьСписокПечатныхФорм();
	УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати,
	                                       СписокМакетов,
	                                       Новый Действие("ДействияФормыДействиеВыбратьПечатнуюФормы"));

	// Установить печатную форму по умолчанию.
	УстановитьКнопкуПечати(ЭтотОбъект.Метаданные().Имя, ЭтаФорма, СписокМакетов, мПечатнаяФормаПоУмолчанию);

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидПоступления), ЭтотОбъект, ЭтаФорма);

	// Обновить содержание информационных строк.
	Если типЗнч(Сделка)<>тип("ДокументСсылка.ЗаявкаНаВозвратТоваров") тогда//29.12.2015
		СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка, Истина);
	КонецЕсли;	
	УстановитьЗаголовкиПоДоговору();

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;

	// Установить в зависимости от вида поступления тип для выбора СкладаОрдера
	УстановитьТипСкладаОрдера();

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	УстановитьВидимостьСерииНоменклатуры(мКолонкиТовары);

	УстановитьВидимостьОбязательностьСклада(мКолонкиТовары, мКолонкиВозвратнаяТара, ЭлементыФормы.СкладОрдер, "Склад", "Поступление");

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	// Установить автоотметку незаполненного
	УстановитьАвтоотметку();
	
	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	// установим доступность колонки "Цена" для редактирования
	мМожноМенятьЦенуВДокументе = РазрешитьРедактированиеЦенВДокументах() И ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьРедактированиеЦенВДокументахВозврата");

	мКолонкиТовары.Цена.ЭлементУправления.ТолькоПросмотр                 = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиТовары.Сумма.ЭлементУправления.ТолькоПросмотр                = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиТовары.ПроцентСкидкиНаценки.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиТовары.СуммаНДС.ЭлементУправления.ТолькоПросмотр             = НЕ мМожноМенятьЦенуВДокументе;

	мКолонкиВозвратнаяТара.Цена.ЭлементУправления.ТолькоПросмотр         = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиВозвратнаяТара.Сумма.ЭлементУправления.ТолькоПросмотр        = НЕ мМожноМенятьЦенуВДокументе;

	    
	//БАЛАНС (04.12.2007)                       
	//
	мПроведениеИзФормы = Истина;
	
	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 

	
КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Пересчитаем сумму взаиморасчетов.
	Если КурсВзаиморасчетов = 0 Тогда
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = 0;
	Иначе

	ЭлементыФормы.СуммаВзаиморасчетов.Значение = ФорматСумм(ПересчитатьИзВалютыВВалюту(ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары"),  
												ВалютаДокумента, мТекущаяВалютаВзаиморасчетов,
												КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета) , КурсВзаиморасчетов,
												КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов));
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьКурса.Заголовок = ПолучитьИнформациюКурсаВалютыСтрокой(мТекущаяВалютаВзаиморасчетов, 
	                                                                               КурсВзаиморасчетов,
	                                                                               КратностьВзаиморасчетов,
	                                                                               мВалютаРегламентированногоУчета,
	                                                                               Истина);

	ОбновитьПодвал();

	// Подсчитаем количество строк в табличных частях.
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если СтраницаПанели.Имя = "Тара" Тогда
			СтраницаПанели.Заголовок = "Тара (" + ДокументОбъект.ВозвратнаяТара.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "Товары" Тогда
			СтраницаПанели.Заголовок = "Товары (" + ДокументОбъект.Товары.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "Услуги" Тогда
			СтраницаПанели.Заголовок = "Услуги (" + ДокументОбъект.Услуги.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "АдресаХранения" Тогда
			СтраницаПанели.Заголовок = "Адреса (" + ДокументОбъект.ТоварыАдресноеХранение.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "ДанныеПоПогрузке" Тогда
			СтраницаПанели.Заголовок = "Данные по погрузке (" + ДокументОбъект.ДанныеПоПогрузке.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "Кладовщики" Тогда
			СтраницаПанели.Заголовок = "Кладовщики (" + ДокументОбъект.Кладовщики.Количество() + " поз.)";
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);

		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
			ОбработкаПодбора(ВозвратнаяТара, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(Строка(ВидПоступления), ЭтотОбъект, ЭтаФорма);
	
	//+++( 18.04.2017  задача №25624
	Если ЭтотОбъект.Проведен и ЗначениеЗаполнено(ЭтотОбъект.Сделка) тогда
		Если ЭтотОбъект.Сделка.ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.Факторинг
			или ЭтотОбъект.Сделка.ДоговорКонтрагента.ТипДоговора =справочники.ТипыДоговоров.ФакторингПредоплата тогда //18.05.2017
			
			ИзмениласьСумма = Товары.Итог("Сумма");
			ИзменилосьКолво = Товары.Итог("Количество");
			
		 УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("no-reply@yst76.ru");
		 Тема = "По договору ФАКТОРИНГА сформирован Возврат от покупателя № "+ ЭтотОбъект.Номер;
		 
		 ТекстСообщения = Тема +" по документу: "+строка(ЭтотОбъект.Сделка)+"
		 						| для контрагента: " + (ЭтотОбъект.Сделка.Контрагент) +"
		                        | по договору: "+строка(ЭтотОбъект.Сделка.ДоговорКонтрагента)+"
		                        |"+?(ИзмениласьСумма<>0, " Изменилась сумма на "+строка(ИзмениласьСумма)+"р.", "")+"
							    |"+?(ИзменилосьКолво<>0," Изменилось Кол-во на "+строка(ИзменилосьКолво)+" шт.","");
						
		 АдресПолучателя = "titova@yst.ru;ogorodnikov@yst.ru";
		#Если Клиент тогда				
		 Состояние(строка(ТекущаяДата())+" идет отправка письма на адрес: "+АдресПолучателя);
		#КонецЕсли 
		 	Если ЗначениеЗаполнено(АдресПолучателя) Тогда
		 		 списокФайлов = новый СписокЗначений;
				 яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресПолучателя, списокФайлов, УЗ, ТекстСообщения, Тема);
     	КонецЕсли;
		КонецЕсли;
	КонецЕсли;
    //+++)

КонецПроцедуры // ПослеЗаписи()

Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	Если глТорговоеОборудование <> Неопределено Тогда
		Если Событие = "BarCodeValue" Тогда

			Валюта          = ВалютаДокумента;
			ИмяТекущейСтраницы = ЭтаФорма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
			Если ИмяТекущейСтраницы = "Товары" Тогда

				Команда         = "ПодборВТабличнуюЧастьТовары";
				ИмяТабличнойЧасти = "Товары";

			ИначеЕсли ИмяТекущейСтраницы = "Тара" Тогда

				Команда           = "ПодборВТабличнуюЧастьВозвратнаяТара";
				ИмяТабличнойЧасти = "ВозвратнаяТара";

			Иначе

				// Ничего не надо делать
				Возврат;

			КонецЕсли;

			ПредставлениеДок = Метаданные().Представление();
			ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);

			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("Команда"              , Команда);
			СтруктураПараметров.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
			СтруктураПараметров.Вставить("ТипЦен"               , ТипЦен);
			СтруктураПараметров.Вставить("СпособЗаполненияЦен"  , Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);
			СтруктураПараметров.Вставить("ВалютаЦены"           , Валюта);
			СтруктураПараметров.Вставить("ИмяТабличнойЧасти"    , ИмяТабличнойЧасти);

			глТорговоеОборудование.ОбработатьВнешнееСобытиеОтСканераДляФормы(ЭтаФорма, ЭтотОбъект, СтруктураПараметров, Данные);

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ВнешнееСобытие()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта меню "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм копирования
// табличной части из Заказу покупателя
//
Процедура КоманднаяПанельТоварыЗаполнитьПоЗаказуПокупателя(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоЗаказуПокупателя(Товары);
	
КонецПроцедуры // КоманднаяПанельТоварыЗаполнитьПоЗаказуПокупателя()

// Процедура вызывается при выборе пункта меню "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм копирования
// табличной части из документа РеализацияТоваровУслуг.
//
Процедура КоманднаяПанельТоварыЗаполнитьПоРеализации(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоРеализации(Товары, "Заполнить");
КонецПроцедуры // КоманднаяПанельТоварыЗаполнитьПоРеализации()

// Процедура вызывается при выборе пункта меню "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм добавления
// табличной части из документа РеализацияТоваровУслуг.
//
Процедура КоманднаяПанельТоварыДобавитьИзРеализации(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоРеализации(Товары, "Добавить");
КонецПроцедуры // КоманднаяПанельТоварыДобавитьИзРеализации()

// Процедура вызывается при выборе пункта меню "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм заполнения
// табличной части не реализованными товарами по выбранному документу РеализацияТоваровУслуг.
//
Процедура КоманднаяПанельТоварыЗаполнитьНереализованнымиТоварамиПоДокументуПередачи(Кнопка)
	
	ЗаполнитьТоварыНереализованнымиТоварами("ПоДокументу");
КонецПроцедуры // КоманднаяПанельТоварыЗаполнитьНереализованнымиТоварамиПоДокументуПередачи()

// Процедура вызывается при выборе пункта меню "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм заполнения
// табличной части не реализованными товарами по данному договору.
//
Процедура КоманднаяПанельТоварыЗаполнитьНереализованнымиТоварамиПоДоговору(Кнопка)
	
	ЗаполнитьТоварыНереализованнымиТоварами("ПоДоговору");
КонецПроцедуры // КоманднаяПанельТоварыЗаполнитьНереализованнымиТоварамиПоДоговору()

// Процедура вызывается при выборе пункта меню "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм заполнения
// табличной части по документу "Приходный ордер на товары".
//
Процедура КоманднаяПанельТоварыЗаполнитьПоПриходномуОрдеру(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоОрдеру(Товары);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);
	
КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Изменить" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// группового изменения значений реквизитов табличной части "Товары".
//
Процедура КоманднаяПанельТоварыДействиеИзменить(Кнопка)

	// Получим контекст обработки
	ИзменениеТабличнойЧастиТовары      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменые формы.
	ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект             = ЭтотОбъект;
	ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента            = ЭтаФорма;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьНДС                   = УчитыватьНДС; 
	ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице          = Ложь;
	ФормаИзменениеТабличнойЧастиТовары.мСпособЗаполненияЦен       = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	//Перенесем табличную часть
	ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры // КоманднаяПанельТоварыДействиеИзменить()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            , "Товары");
	Если СтруктураЗначений <> Неопределено Тогда
		ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "Товары", мВалютаРегламентированногоУчета, , СтруктураЗначений);

		Если СтруктураЗначений.ТекущийТипЦен <> СтруктураЗначений.НовыйТипЦен Тогда
			ОбновитьФормуПодбора("ТипЦен");
		КонецЕсли;
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры // КоманднаяПанельТоварыДействиеЦеныВалюта()

// Процедура вызывается при выборе пункта меню "Заполнить" командной панели 
// табличного поля "Возвратная тара", вызывает сервисный механизм копирования
// табличной части из Заказу покупателя
//
Процедура КоманднаяПанельВозвратнаяТараЗаполнитьПоЗаказуПокупателя(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоЗаказуПокупателя(ВозвратнаяТара);
	
КонецПроцедуры // КоманднаяПанельВозвратнаяТараЗаполнитьПоЗаказуПокупателя()

// Процедура вызывается при выборе пункта меню "Заполнить" командной панели 
// табличного поля "Возвратная тара", вызывает сервисный механизм копирования
// табличной части из документа РеализацияТоваровУслуг.
//
Процедура КоманднаяПанельВозвратнаяТараЗаполнитьПоРеализации(Кнопка)

	ЗаполнитьТабличнуюЧастьПоРеализации(ВозвратнаяТара, "Заполнить");

КонецПроцедуры // КоманднаяПанельВозвратнаяТараЗаполнитьПоРеализации()

// Процедура вызывается при выборе пункта меню "Заполнить" командной панели 
// табличного поля "Возвратная тара", вызывает сервисный механизм добавления
// табличной части из документа РеализацияТоваровУслуг.
//
Процедура КоманднаяПанельВозвратнаяТараДобавитьИзРеализации(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоРеализации(ВозвратнаяТара, "Добавить");
КонецПроцедуры // КоманднаяПанельВозвратнаяТараДобавитьИзРеализации()

// Процедура вызывается при выборе пункта меню "Заполнить" командной панели 
// табличного поля "Возвратная тара", вызывает сервисный механизм заполнения
// табличной части по документу "Приходный ордер на товары".
//
Процедура КоманднаяПанельВозвратнаяТараЗаполнитьПоПриходномуОрдеру(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоОрдеру(ВозвратнаяТара);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Возвратная тара", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеПодбор(Кнопка)

	ДействиеПодбор(ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	НапечататьДокументПоУмолчанию(ЭтотОбъект, глТекущийПользователь, мПечатнаяФормаПоУмолчанию)

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
//
Процедура ДействияФормыДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = Кнопка.Текст;
		СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		СписокМакетов = ПолучитьСписокПечатныхФорм();
		СтрокаМакетаВСписке = СписокМакетов.НайтиПоЗначению(Кнопка.Имя);
		Если СтрокаМакетаВСписке <> Неопределено Тогда
			Печать(СтрокаМакетаВСписке.Значение);
			СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
			СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;			
			
		Иначе
			СсылкаВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Кнопка.Имя, "_", "-")));
			Печать(СсылкаВнешнейФормы);
			СтруктураМакета.Макет = СсылкаВнешнейФормы;
			СтруктураМакета.ПредставлениеМакета = Кнопка.Текст;
		КонецЕсли;		
		
		мПечатнаяФормаПоУмолчанию = СтруктураМакета.Макет;
		СохранитьТекущуюКнопкуПечати(ЭтотОбъект.Метаданные().Имя, СтруктураМакета);
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в бухгалтерском учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = Элемент.Значение;
	ОтражатьВНалоговомУчете = Элемент.Значение;

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьНомерДокумента(ЭтотОбъект);

	// Выполняем общие действия для всех документов при изменении Организация.
	ПриИзмененииЗначенияОрганизации(ЭтотОбъект);

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ЗаказСтарый = Сделка;
	
	ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);

	// Могли поменять договор.
	ПриИзмененииДоговора();

	
	Если не ЗначениеЗаполнено(Сделка) и ЗначениеЗаполнено(ЗаказСтарый) И Контрагент = Справочники.Контрагенты.НайтиПоКоду("94143  ") Тогда 
		Сделка = ЗаказСтарый;
	КонецЕсли;
КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;

	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
	                                        СписокВидовДоговоров, СтандартнаяОбработка);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Сделка".
//
Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Данный документ выполняет расход по регистру взаиморасчетов.
	НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Сделка, СтандартнаяОбработка, 
	                     "Расход", "ЗаказПокупателя");

КонецПроцедуры // СделкаНачалоВыбора()

// Процедура - обработчик события "Нажатие" кнопки "КнопкаПерерасчитатьДолг".
// Процедура вызывает сервисный механизм пересчета долга контрагента 
// по выбранному в форме договору взаиморасчетов и сделке.
//
Процедура КнопкаПерерасчитатьДолгНажатие(Элемент)

	Если типЗнч(Сделка)<>тип("ДокументСсылка.ЗаявкаНаВозвратТоваров") тогда//29.12.2015
		СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка);
	КонецЕсли;
	
КонецПроцедуры // КнопкаПерерасчитатьАвансДоговораНажатие()

// Процедура - обработчик события "ПриИзменении" поля ввода СкладОрдер
//
Процедура СкладОрдерПриИзменении(Элемент)

	УстановитьЗаголовокФормыДокумента(Строка(ВидПоступления), ЭтотОбъект, ЭтаФорма);

	// Установить тип реквизита для ввода (если, например, поле очистили)
	УстановитьТипСкладаОрдера();

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

КонецПроцедуры // СкладОрдерПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода СкладОрдер
//
Процедура СкладОрдерНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Определить в зависимости от вида поступления тип для выбора СкладаОрдера
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда

		НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, СкладОрдер, ВидСравнения.НеРавно, СтандартнаяОбработка);

	Иначе

		СтандартнаяОбработка = Ложь;

		// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
		// значение было присвоено стандартно.
		ФормаВыбора = Документы.ПриходныйОрдерНаТовары.ПолучитьФормуВыбора(,Элемент,);

		// Оставим для выбора только нужные ордера
		ФормаВыбора.ДокументСписок.Отбор.ВидОперации.Значение      = Перечисления.ВидыОперацийПриходныйОрдер.ОтПокупателя;
		ФормаВыбора.ДокументСписок.Отбор.ВидОперации.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ВидОперации.Доступность = Ложь;

		ФормаВыбора.Открыть();

	КонецЕсли;

КонецПроцедуры // СкладОрдерНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ВидПоступления".
//
Процедура ВидПоступленияПриИзменении(Элемент)

	УстановитьТипСкладаОрдера();
	УстановитьВидимость();

КонецПроцедуры // ВидПоступленияПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка ОтражатьВУправленческомУчете
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)

	ПроверитьВидПоступленияПередачи(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Товары". Формирует данные в колонке "Всего", "Себестоимость" и "ЕдиницаХранения"
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если мКолонкиТовары.Всего.Видимость Тогда
		ОформлениеСтроки.Ячейки.Всего.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Всего.Текст = ФорматСумм(ДанныеСтроки.Сумма
	                                        + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС));

	КонецЕсли;

	ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

	// Если заполнен документ партии, то себестоимость будет браться из него.
	// Поэтому если колонка видна, будем выводить в нее текст.
	Если мКолонкиТовары.Себестоимость.Видимость
	   И Не ЗначениеНеЗаполнено(ДанныеСтроки.ДокументПартии) Тогда

		ОформлениеСтроки.Ячейки.Себестоимость.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Себестоимость.ТолькоПросмотр  = Истина;
		ОформлениеСтроки.Ячейки.Себестоимость.Текст           = "Из документа партии";

	КонецЕсли;

	Если НЕ ЗначениеНеЗаполнено(ДанныеСтроки.СерияНоменклатуры) Тогда
		Если мКолонкиТовары.НомерГТД.Видимость Тогда
			ОформлениеСтроки.Ячейки.НомерГТД.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.НомерГТД.Текст = ДанныеСтроки.СерияНоменклатуры.НомерГТД;
		КонецЕсли;
		Если мКолонкиТовары.СтранаПроисхождения.Видимость	Тогда
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.Текст = ДанныеСтроки.СерияНоменклатуры.СтранаПроисхождения;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти);

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода серии номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыСерияНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	РассчитатьКоличествоТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Суммы.
	ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект, глТекущийПользователь);

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля процента скидки-наценки
// в строке табличной части "Товары".
//
Процедура ТоварыПроцентСкидкиНаценкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыПроцентСкидкиНаценкиПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода документа партии
// в строке табличной части "Товары".
//
Процедура ТоварыДокументПартииНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Для возврата с реализации можно выбирать только документы РеализацияТоваровУслуг
	// С видом операции "Передача на реализацию".
	Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

		СтандартнаяОбработка = Ложь;

		Если ТипЗнч(Элемент.Значение) <> Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Элемент.Значение = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
		КонецЕсли;

		// В качестве владельца формы выбора устанавливаем данный элемент,
		// чтобы выбранное значение было присвоено стандартно.
		ФормаВыбора = Документы.РеализацияТоваровУслуг.ПолучитьФормуВыбора(,Элемент);

		// Отфильруем список документов.по виду операции
		ФормаВыбора.Отбор.ДоговорКонтрагента.Значение      = ДоговорКонтрагента;
		ФормаВыбора.Отбор.ДоговорКонтрагента.Использование = Истина;

		ФормаВыбора.Открыть();

	Иначе // м.б. любой тип
		Если НЕ ЗначениеНеЗаполнено(Сделка) Тогда
			СтруктураОтбора = Новый Структура("Сделка", Сделка);
		Иначе
			СтруктураОтбора = Новый Структура();
		КонецЕсли;

		НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, 
	                                     СтандартнаяОбработка, СтруктураОтбора, "Товары");
	КонецЕсли;

КонецПроцедуры // ТоварыДокументПартииНачалоВыбора()

// Процедура - обработчик события "ПриНачалеРедактирования" строки табличной части "Товары".
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	//Если НоваяСтрока Тогда
	//	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	//	ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	//	Элемент.ТекущиеДанные.Качество = Справочники.Качество.Новый;
	//	ЗаполнитьВесВТабличнойЧасти(СтрокаТабличнойЧасти);
	//КонецЕсли;
	
КонецПроцедуры // ТоварыПриНачалеРедактирования()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Склад"
// в строке табличной части "Товары".
Процедура ТоварыСкладНачалоВыбора(Элемент, СтандартнаяОбработка)
	НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, СкладОрдер, ВидСравнения.НеРавно, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении возвратной тары.
	ПриИзмененииВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

	// Заполнить реквизиты табличной части.
	ЗаполнитьЦенуВозвратнойТарыТабЧастиОтпуск(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект); 

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении суммы.
	ПриИзмененииСуммыВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараСуммаПриИзменении()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ПоказатьКодАртикул(мКолонкиВозвратнаяТара, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры // ВозвратнаяТараПриВыводеСтроки()

// Процедура - обработчик события "ПриНачалеРедактирования" поля табличной части "Возвратная тара"
//
Процедура ВозвратнаяТараПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;
		ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Склад"
// в строке табличной части "ВозвратнаяТара".
Процедура ВозвратнаяТараСкладНачалоВыбора(Элемент, СтандартнаяОбработка)
	НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, СкладОрдер, ВидСравнения.НеРавно, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПеретаскивание()

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "ВозвратнаяТара");
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ВозвратнаяТараПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ВозвратнаяТараПеретаскивание()

Процедура ПриЗакрытии()
	
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	//КассирРаботает = Ложь;

	
	Если ПользовательИБ <> Неопределено
	   И ПользовательИБ.ОсновнойИнтерфейс <> Неопределено
	   И ПользовательИБ.ОсновнойИнтерфейс.Имя = "ИнтерфейсКассира" Тогда //Задействуем интерфейс кассира

		ДокРКО = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
		//ДокРКО.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю;
		ДокРКО.ОбработкаЗаполнения(Ссылка);
		//ДокРКО.ДокументОснование = Ссылка;
		//ДокРКО.СуммаДокумента = СуммаДокумента;
		ДокРКО.ПолучитьФорму().Открыть();
		
		//Док = ДокРКО.ПолучитьФорму("ФормаДокумента");
		//ДокРКО.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю;
		//ДокРКО.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("810");
		//ДокРКО.ДокументОснование = Ссылка;
		//Док.Открыть();
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	яштСменаПользователя(ЭтотОбъект, ЭтаФорма, глТекущийПользователь);
	ЗаполнитьВесНетто(Товары);
	ОбщийВес=Товары.Итог("Вес");
КонецПроцедуры


//// +++ 27.12.2012 
// Процедура вызывается при выборе пункта "Из терминала сбора данных"
// меню кнопки "Заполнить" командной панели табличного поля "ТоварыАдресноеХранение"
//
Процедура КоманднаяПанельАдресноеХранениеИзТерминалаСбораДанных(Кнопка)
Перем Ответ, Данные, ВремТовар, ВремЕдиница;
	
		//+++ переподключение принудительное - всегда!
			глТорговоеОборудование.ОтключитьОборудование();
		    глТорговоеОборудование.ПодключитьОборудование();

	Если глТорговоеОборудование = Неопределено Тогда
		Предупреждение("Торговое оборудование не подключено");
	ИначеЕсли глТорговоеОборудование.млТерминал.Количество() = 0 Тогда
		Предупреждение("Терминал сбора данных не подключен");
	Иначе
		Если глТорговоеОборудование.млТерминал.Количество() = 1 Тогда

			РезультатВыбора = глТорговоеОборудование.млТерминал[0];

		Иначе

			СписокТерминаловСбораДанных = Новый СписокЗначений;
			Для Каждого ТерминалСбораДанных из глТорговоеОборудование.млТерминал Цикл
				СписокТерминаловСбораДанных.Добавить(ТерминалСбораДанных, ТерминалСбораДанных.Модель);
			КонецЦикла;
			РезультатВыбора = СписокТерминаловСбораДанных.ВыбратьЭлемент("Выберите терминал сбора данных");
			Если РезультатВыбора = Неопределено Тогда
				Возврат;
			КонецЕсли;
			РезультатВыбора = РезультатВыбора.Значение;

		КонецЕсли;
		
		нетАдреса = ЛОЖЬ; //+++ это ВАЖНО !!!
		Ответ = глТорговоеОборудование.ЗагрузитьДанныеИзТерминалаСбораДанных(РезультатВыбора, Данные, нетАдреса);
		
		Если Не ПустаяСтрока(Ответ) Тогда
			Предупреждение(Ответ);
		ИначеЕсли Данные.Количество() = 0 Тогда
			Предупреждение("Из терминала сбора данных не загружено ни одного товара...");
		Иначе
			
			i=0;    
			пустойСклад = справочники.Склады.ПустаяСсылка();
	//--------------------------------------------------------------------------------------------------------------------------		
			Для Каждого СтрокаДанных Из Данные Цикл
				i=i+1;
				//+++ Если глТорговоеОборудование.ПолучитьТоварПоШтрихкоду(СтрокаДанных.Штрихкод, ВремТовар) Тогда
				ВремТовар = Справочники.Номенклатура.НайтиПоКоду(СтрокаДанных.Код);  //+++
				
				Если ЗначениеЗаполнено(ВремТовар) тогда
					
					//+++ 24.12.2012
					Адрес = справочники.АдресаХранения.НайтиПоКоду(СтрокаДанных.Адрес);
					Если НЕ ЗначениеЗаполнено(Адрес) тогда
						сообщить(строка(i)+" строка - Нет Адреса Хранения: "+СтрокаДанных.Адрес, СтатусСообщения.Внимание);
					КонецЕсли;
					
					СтруктураОтбора = Новый Структура();
					СтруктураОтбора.Вставить("Номенклатура", ВремТовар);
					СтруктураОтбора.Вставить("АдресХранения",Адрес);
					
					СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТоварыАдресноеХранение, СтруктураОтбора);  //+++
					
					Если СтрокаТабличнойЧасти <> Неопределено Тогда
 						// Нашли, увеличиваем количество в первой найденной строке.
						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаДанных.Количество;
 					Иначе
 						// Не нашли - добавляем новую строку.
						СтрокаТабличнойЧасти = ТоварыАдресноеХранение.Добавить();
						СтрокаТабличнойЧасти.Номенклатура           = ВремТовар;  //+++
						
						СтрокаТабличнойЧасти.Количество             = СтрокаДанных.Количество;
						
						СтрокаТабличнойЧасти.АдресХранения			= Адрес;
						СтрокаТабличнойЧасти.Склад					= ?(ЗначениеЗаполнено(Адрес), Адрес.Владелец, пустойСклад );
						
						// Выполнить общие действия для всех документов при изменении номенклатуры.
						ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

					КонецЕсли;

					// Рассчитать реквизиты табличной части.
					//РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
					//РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

					ЭлементыФормы.ТоварыАдресноеХранение.ТекущаяСтрока  = СтрокаТабличнойЧасти;
				КонецЕсли;
			КонецЦикла;

			Ответ = Вопрос("Очистить память терминала сбора данных?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				СтрокаТаблицыТерминала = неопределено;
				Если глТорговоеОборудование = Неопределено 
					или глТорговоеОборудование.млТерминал.Количество()>0 тогда
					СтрокаТаблицыТерминала = новый Структура; //+++ 09.01.2012
					СтрокаТаблицыТерминала.Вставить("Объект" , глТорговоеОборудование.млТерминал[0].Объект );
					СтрокаТаблицыТерминала.Вставить("НомерЛУ", глТорговоеОборудование.млТерминал[0].НомерЛУ);
					СтрокаТаблицыТерминала.Вставить("Модель",  глТорговоеОборудование.млТерминал[0].Модель);
				//иначе // ТСД не подключен.	
				КонецЕсли;
				Ответ = глТорговоеОборудование.ОчиститьПамятьТерминалаСбораДанных(СтрокаТаблицыТерминала);
				Если Не ПустаяСтрока(Ответ) Тогда
					Предупреждение(Ответ);
				КонецЕсли;
			КонецЕсли;
		
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


Функция ЧасМин(Сек)
	Возврат ?(СтрДлина(Строка(Цел(Сек/3600))) < 2, "0" + Строка(Цел(Сек/3600)), Строка(Цел(Сек/3600))) + 
			 ":" + ?(СтрДлина(Строка(Цел((Сек/3600 - Цел(Сек/3600))*60))) < 2, "0" + Строка(Цел((Сек/3600 - Цел(Сек/3600))*60)),
			 Строка(Цел((Сек/3600 - Цел(Сек/3600))*60)));
КонецФункции


Процедура ПодразделениеПриИзменении(Элемент)
	
	УстановитьНомерДокумента(ЭтотОбъект);
	
КонецПроцедуры

Процедура КоманднаяПанель2ЗАполнить(Кнопка)
	//ЗаполнитьВесНетто(Товары);
	//ОбщийВес=Товары.Итог("Вес");
	ДанныеПоПогрузке.Очистить();
	//+++ перераспределение КТУ по грузчикам по группам складов
	Если Константы.КТУгрузчиковПоСкладам.Получить() тогда 
		яштРезервыПоТоварам.ЗаполнениеКТУГрузчиков(ЭтотОбъект);
		возврат;
	КонецЕсли;
	//ДанныеПоПогрузке.Очистить();
	//Запрос=Новый Запрос;
	//Запрос.Текст="ВЫБРАТЬ
	//|Ссылка Грузчик
	//|ИЗ
	//|	Справочник.ФизическиеЛица
	//|ГДЕ Официальный";
	//
	//Выборка=Запрос.Выполнить().Выбрать();
	//КоличествоСтрок=Выборка.Количество();
	//
	//Пока Выборка.Следующий() Цикл
	//	Строка=ДанныеПоПогрузке.Добавить();
	//	Строка.Грузчик=Выборка.Грузчик;
	//	Строка.Вес=1;
	//КонецЦикла;	

КонецПроцедуры

Процедура ДокументОснованиеНажатие(Элемент)
	ЗаявкаОснование.ПолучитьФорму().Открыть();
КонецПроцедуры

Процедура КоманднаяПанельТовары1ИзТоваров(Кнопка)
	
	Если ЭтоНовый() или ЭтотОбъект.Модифицированность() тогда
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос("Перед выполнением обработки требуется записать документ. Выполнить?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Предупреждение("Обработка отменена!", 10);
		    Возврат;
		иначе
			ЭтотОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если ТоварыАдресноеХранение.Количество()>0 тогда
		Если Вопрос("Таблица ""Адреса хранения"" не пустая!
			|Очистить таблицу перед заполненением?", РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да тогда
		ТоварыАдресноеХранение.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ПеремещениеТоваровТовары.Номенклатура,
	                |	СУММА(ПеремещениеТоваровТовары.Количество) КАК Количество,
	                |	ПеремещениеТоваровТовары.Склад
	                |ИЗ
	                |	Документ.ВозвратТоваровОтПокупателя.Товары КАК ПеремещениеТоваровТовары
	                |ГДЕ
	                |	ПеремещениеТоваровТовары.Склад.АдресноеХранение
	                |	И ПеремещениеТоваровТовары.Ссылка = &Ссылка
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ПеремещениеТоваровТовары.Номенклатура,
	                |	ПеремещениеТоваровТовары.Склад";
	 
	 Запрос.УстановитьПараметр("Ссылка", Ссылка);
	 
	 Результат = Запрос.Выполнить();
	 ТоварыАдресноеХранение.Загрузить(  Результат.Выгрузить() );
	 Если ТоварыАдресноеХранение.Количество()=0 тогда
		 Предупреждение("Нет складов адресного хранения в таблице ""Товары"".",30);
	 КонецЕсли;
	 

КонецПроцедуры

Процедура УслугиСуммаПриИзменении(Элемент)
	ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект, глТекущийПользователь);

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

Процедура УслугиЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
КонецПроцедуры

Процедура УслугиКоличествоПриИзменении(Элемент)
	РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

Процедура УслугиНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Заполняем реквизиты табличной части.
	ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	//Если ПроверитьУслугаОблагаетсяЕНВД(СтрокаТабличнойЧасти.Номенклатура, Организация, Дата,
	//								   мОрганизацияЯвляетсяПлательщикомЕНВД) Тогда
	//	СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	//Иначе
		ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	//КонецЕсли;

	// Заполнение цены зависит от розничности операции.
	ЗаполнитьЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры

Процедура ТоварыАдресноеХранениеАдресХраненияПриИзменении(Элемент)
	
	текСтр = ЭлементыФормы.ТоварыАдресноеХранение.ТекущиеДанные;
	Если не текСтр.АдресХранения.пустая() и не текСтр.Склад.пустая() тогда
		Если текСтр.Склад <> текСтр.АдресХранения.Владелец тогда
			Предупреждение("Поле Склад должен совпадать со складом ячейки: "+строка(текСтр.АдресХранения.Владелец)+"!", 10);
			текСтр.Склад = текСтр.АдресХранения.Владелец;
		КонецЕсли;
	ИначеЕсли не текСтр.АдресХранения.пустая() и текСтр.Склад.пустая() тогда // без склада!
		текСтр.Склад = текСтр.АдресХранения.Владелец;
	КонецЕсли;	

КонецПроцедуры

Процедура ТоварыАдресноеХранениеСкладПриИзменении(Элемент)
	
	текСтр = ЭлементыФормы.ТоварыАдресноеХранение.ТекущиеДанные;//+++ склад нельзя менять без привязки к адресу!
	Если не текСтр.АдресХранения.пустая() и не текСтр.Склад.пустая() тогда
		Если текСтр.Склад <> текСтр.АдресХранения.Владелец тогда
			Предупреждение("Склад не может отличаться от склада ячейки!", 10);
			текСтр.Склад = текСтр.АдресХранения.Владелец;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары         = ЭлементыФормы.Товары.Колонки;
мКолонкиВозвратнаяТара = ЭлементыФормы.ВозвратнаяТара.Колонки;