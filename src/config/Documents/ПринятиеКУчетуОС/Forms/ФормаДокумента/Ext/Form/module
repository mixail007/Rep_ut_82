////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Переменные содержат курсы валют упр. и регл. учета
Перем мВалютаРегламентированногоУчета;
Перем мВалютаУправленческогоУчета;
Перем КурсВал;
Перем КратностьВал;
Перем ИмяВалБух;
Перем ИмяВалУпр;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;
Перем мОтражатьВРегламентированномУчете;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	//мДеревоМакетов = ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	//УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	//УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	//Если Не мПодменюПечати = Неопределено Тогда
	//	СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	//КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	//мКнопкиЗаполненияТЧ = ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	//
	//СоответствиеТЧ = Новый Соответствие;
	//СоответствиеТЧ.Вставить(ЭлементыФормы.ОсновныеСредства,ЭлементыФормы.КоманднаяПанельОС);
	//СоответствиеТЧ.Вставить(ЭлементыФормы.Оплата,ЭлементыФормы.КоманднаяПанель1);
	//
	//СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Функция возвращает список значений доступных способов амортизации для бух. учета
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   СписокЗначений
Функция ПолучитьСписокСпособовАмортизацииБУ() Экспорт

	СписокПеречисления = Новый СписокЗначений;
	
	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.Линейный);
	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции);
	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка);
	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования);
	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ);
	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега);
	
	Возврат СписокПеречисления;

КонецФункции // ПолучитьСписокСпособовАмортизацииБУ()

Процедура ПересчетСуммыНДСХозспособ()
	
	СуммаНДС = РассчитатьСуммуНДС( СтоимостьБУХоз, Истина, Ложь, ПолучитьСтавкуНДС(СтавкаНДС));
	
КонецПроцедуры // ПересчетСуммыНДСХозспособ()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает видимость элементов формы в зависимости от вида операции и 
// взведенных флагов
//
Процедура УстановитьВидимость()
	
	// Установка видимости панелей формы в зависимости от вида операции
	ЭлементыФормы.ПанельВнеоборотныеАктивы.Страницы.ОССоСклада.Видимость           = (ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование);
	ЭлементыФормы.ПанельВнеоборотныеАктивы.Страницы.ОбъектыСтроительства.Видимость = (ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства);
	ЭлементыФормы.ПанельВнеоборотныеАктивы.Страницы.Прочее.Видимость               = (ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Прочее);

	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		ЭлементыФормы.ПанельВнеоборотныеАктивы.ТекущаяСтраница =  ЭлементыФормы.ПанельВнеоборотныеАктивы.Страницы.ОССоСклада;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
		ЭлементыФормы.ПанельВнеоборотныеАктивы.ТекущаяСтраница =  ЭлементыФормы.ПанельВнеоборотныеАктивы.Страницы.ОбъектыСтроительства;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Прочее Тогда
		ЭлементыФормы.ПанельВнеоборотныеАктивы.ТекущаяСтраница =  ЭлементыФормы.ПанельВнеоборотныеАктивы.Страницы.Прочее;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Прочее Тогда
		ЭлементыФормы.ЗаполнитьУУ.Видимость = Ложь;
	Иначе
		ЭлементыФормы.ЗаполнитьУУ.Видимость = Истина;
	КонецЕсли;


	ЭтоУСН          = ЛОЖЬ;
	ПрименениеПБУ18 = ИСТИНА;

	ЭтоРасходыУСН = Ложь;
	

	Если ЭтоРасходыУСН Тогда
		ЭлементыФормы.НадписьПорядокВключенияСтоимостиВСоставРасходовУСН.Видимость 	= НЕ (Дата < Дата("20060101"));
		ЭлементыФормы.ПорядокВключенияСтоимостиВСоставРасходовУСН.Видимость 		= НЕ (Дата < Дата("20060101"));
	КонецЕсли;
	
	//**************
	// Установка видимости элементов формы в зависимости от вида учета

	ЭлементыФормы.СчетУчетаНУВнеоборотногоАктива.Видимость         = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН);
	ЭлементыФормы.СчетУчетаНУВнеоборотногоАктива1.Видимость        = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН);

	ЭлементыФормы.НадписьСчетУчетаНУВнеоборотногоАктива.Видимость  = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН);
	ЭлементыФормы.НадписьСчетУчетаНУВнеоборотногоАктива1.Видимость = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН);

	ЭлементыФормы.НадписьСтоимостьНУ.Видимость                     = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН);
	ЭлементыФормы.СтоимостьНУ.Видимость                            = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН);
	ЭлементыФормы.НадписьСтоимостьНУХоз.Видимость                  = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН);
	ЭлементыФормы.СтоимостьНУХоз.Видимость                         = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН);
	ЭлементыФормы.НадписьСтоимостьПР.Видимость                     = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН) И ПрименениеПБУ18;
	ЭлементыФормы.СтоимостьПР.Видимость                            = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН) И ПрименениеПБУ18;
	ЭлементыФормы.НадписьСтоимостьПРХоз.Видимость                  = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН) И ПрименениеПБУ18;
	ЭлементыФормы.СтоимостьПРХоз.Видимость                         = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН) И ПрименениеПБУ18;
	ЭлементыФормы.НадписьСтоимостьВР.Видимость                     = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН) И ПрименениеПБУ18;
	ЭлементыФормы.СтоимостьВР.Видимость                            = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН) И ПрименениеПБУ18;
	ЭлементыФормы.НадписьСтоимостьВРХоз.Видимость                  = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН) И ПрименениеПБУ18;
	ЭлементыФормы.СтоимостьВРХоз.Видимость                         = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН) И ПрименениеПБУ18;

	ЭлементыФормы.УпрВалюта.Видимость                              = ОтражатьВУправленческомУчете;
	ЭлементыФормы.РеглВалюта1.Видимость                            = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.РеглВалюта2.Видимость                            = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.РеглВалюта3.Видимость                            = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН);
	ЭлементыФормы.РеглВалюта4.Видимость                            = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН);
	ЭлементыФормы.РеглВалюта5.Видимость                            = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН) И ПрименениеПБУ18;
	ЭлементыФормы.РеглВалюта6.Видимость                            = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН) И ПрименениеПБУ18;
	ЭлементыФормы.РеглВалюта7.Видимость                            = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН) И ПрименениеПБУ18;
	ЭлементыФормы.РеглВалюта8.Видимость                            = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН) И ПрименениеПБУ18;
	
	// Установка видимости страниц панелей в зависимости от вида учета
	ЭлементыФормы.ОсновнаяПанель.Страницы.УпрУчет.Видимость        = ОтражатьВУправленческомУчете;
	ЭлементыФормы.ОсновнаяПанель.Страницы.БухУчет.Видимость        = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.ОсновнаяПанель.Страницы.НалУчет.Видимость        = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН);
	ЭлементыФормы.ОсновнаяПанель.Страницы.УСНУчет.Видимость        = ОтражатьВНалоговомУчете И ЭтоРасходыУСН;

	//**************
	// Установка видимости элементов формы в зависимости от вида учета

	ЭлементыФормы.СчетУчетаБУВнеоборотногоАктива.Видимость         = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.СчетУчетаБУВнеоборотногоАктива1.Видимость        = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.СчетУчетаНУВнеоборотногоАктива.Видимость         = ОтражатьВНалоговомУчете И НЕ ЭтоУСН;
	ЭлементыФормы.СчетУчетаНУВнеоборотногоАктива1.Видимость        = ОтражатьВНалоговомУчете И НЕ ЭтоУСН;

	ЭлементыФормы.НадписьСчетУчетаБУВнеоборотногоАктива.Видимость  = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.НадписьСчетУчетаБУВнеоборотногоАктива1.Видимость = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.НадписьСчетУчетаНУВнеоборотногоАктива.Видимость  = ОтражатьВНалоговомУчете И НЕ ЭтоУСН;
	ЭлементыФормы.НадписьСчетУчетаНУВнеоборотногоАктива1.Видимость = ОтражатьВНалоговомУчете И НЕ ЭтоУСН;

	ЭлементыФормы.НадписьСтоимость.Видимость                       = ОтражатьВУправленческомУчете;
	ЭлементыФормы.Стоимость.Видимость                              = ОтражатьВУправленческомУчете;
	ЭлементыФормы.НадписьСтоимостьБУ.Видимость                     = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.СтоимостьБУ.Видимость                            = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.НадписьСтоимостьБУХоз.Видимость                  = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.СтоимостьБУХоз.Видимость                         = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.НадписьСтоимостьНУ.Видимость                     = ОтражатьВНалоговомУчете И НЕ ЭтоУСН;
	ЭлементыФормы.СтоимостьНУ.Видимость                            = ОтражатьВНалоговомУчете И НЕ ЭтоУСН;
	ЭлементыФормы.НадписьСтоимостьНУХоз.Видимость                  = ОтражатьВНалоговомУчете И НЕ ЭтоУСН;
	ЭлементыФормы.СтоимостьНУХоз.Видимость                         = ОтражатьВНалоговомУчете И НЕ ЭтоУСН;

	// Установка видимости элементов формы в зависимости от вида операции
	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
		ЭлементыФормы.СтавкаНДС           .Видимость = ОтражатьВБухгалтерскомУчете;
		ЭлементыФормы.НадписьСтавкаНДС    .Видимость = ОтражатьВБухгалтерскомУчете;
		ЭлементыФормы.СуммаНДС            .Видимость = ОтражатьВБухгалтерскомУчете;
		ЭлементыФормы.НадписьНДС          .Видимость = ОтражатьВБухгалтерскомУчете;
		ЭлементыФормы.НДСВключенВСтоимость.Видимость = ОтражатьВБухгалтерскомУчете;
	КонецЕсли;
	
	// Установка видимости реквизитов отражения в составе МПЗ в зависимости
	// от вида операции
	//ВидОперацииПрочее = (ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Прочее);
	
	//ЭлементыФормы.РамкаГруппыОтражениеВСоставеМПЗ.Видимость = НЕ ВидОперацииПрочее;
	//ЭлементыФормы.НадписьМПЗ.Видимость                      = НЕ ВидОперацииПрочее;
	//ЭлементыФормы.НадписьХарактеристикаМПЗ.Видимость        = НЕ ВидОперацииПрочее;
	//ЭлементыФормы.НадписьСерияМПЗ.Видимость                 = НЕ ВидОперацииПрочее;
	//ЭлементыФормы.НадписьСчетУчетаМПЗБУ.Видимость           = НЕ ВидОперацииПрочее;
	//ЭлементыФормы.НадписьСкладМПЗ.Видимость                 = НЕ ВидОперацииПрочее;
	//ЭлементыФормы.ОтразитьВСоставеМПЗ.Видимость             = НЕ ВидОперацииПрочее;
	//ЭлементыФормы.НоменклатураМПЗ.Видимость                 = НЕ ВидОперацииПрочее;
	//ЭлементыФормы.ХарактеристикаМПЗ.Видимость               = НЕ ВидОперацииПрочее;
	//ЭлементыФормы.СерияМПЗ.Видимость                        = НЕ ВидОперацииПрочее;
	//ЭлементыФормы.СкладМПЗ.Видимость                        = НЕ ВидОперацииПрочее;
	//ЭлементыФормы.СчетУчетаМПЗБУ.Видимость                  = НЕ ВидОперацииПрочее;
	
	
	ЭлементыФормы.РамкаГруппыОтражениеВСоставеМПЗ.Видимость = ЛОЖЬ;
	ЭлементыФормы.НадписьМПЗ.Видимость                      = ЛОЖЬ;
	ЭлементыФормы.НадписьХарактеристикаМПЗ.Видимость        = ЛОЖЬ;
	ЭлементыФормы.НадписьСерияМПЗ.Видимость                 = ЛОЖЬ;
	ЭлементыФормы.НадписьСчетУчетаМПЗБУ.Видимость           = ЛОЖЬ;
	ЭлементыФормы.НадписьСкладМПЗ.Видимость                 = ЛОЖЬ;
	ЭлементыФормы.ОтразитьВСоставеМПЗ.Видимость             = ЛОЖЬ;
	ЭлементыФормы.НоменклатураМПЗ.Видимость                 = ЛОЖЬ;
	ЭлементыФормы.ХарактеристикаМПЗ.Видимость               = ЛОЖЬ;
	ЭлементыФормы.СерияМПЗ.Видимость                        = ЛОЖЬ;
	ЭлементыФормы.СкладМПЗ.Видимость                        = ЛОЖЬ;
	ЭлементыФормы.СчетУчетаМПЗБУ.Видимость                  = ЛОЖЬ;
	
	ЭлементыФормы.ОтразитьВСоставеМПЗ.Видимость = ЛОЖЬ;
	
	// Установка доступности реквизитов формы в зависимости от флажка
	// "Отразить в составе материально-производственных запасов (упр. и бух. учет)"
	//ЭлементыФормы.НоменклатураМПЗ.АвтоОтметкаНезаполненного   = ОтразитьВСоставеМПЗ;
	//ЭлементыФормы.СкладМПЗ.АвтоОтметкаНезаполненного          = ОтразитьВСоставеМПЗ;
	//ЭлементыФормы.СчетУчетаМПЗБУ.АвтоОтметкаНезаполненного    = ОтразитьВСоставеМПЗ;
	//
	//ЭлементыФормы.НоменклатураМПЗ.ОтметкаНезаполненного = ОтразитьВСоставеМПЗ;
	//ЭлементыФормы.СкладМПЗ.ОтметкаНезаполненного        = ОтразитьВСоставеМПЗ;
	//ЭлементыФормы.СчетУчетаМПЗБУ.ОтметкаНезаполненного  = ОтразитьВСоставеМПЗ;
	//
	//ЭлементыФормы.НоменклатураМПЗ.АвтоВыборНезаполненного = ОтразитьВСоставеМПЗ;
	//ЭлементыФормы.СкладМПЗ.АвтоВыборНезаполненного        = ОтразитьВСоставеМПЗ;
	//ЭлементыФормы.СчетУчетаМПЗБУ.АвтоВыборНезаполненного  = ОтразитьВСоставеМПЗ;
	//
	//ЭлементыФормы.НоменклатураМПЗ.Доступность   = ОтразитьВСоставеМПЗ;
	//ЭлементыФормы.ХарактеристикаМПЗ.Доступность = ОтразитьВСоставеМПЗ;
	//ЭлементыФормы.СерияМПЗ.Доступность          = ОтразитьВСоставеМПЗ;
	//ЭлементыФормы.СкладМПЗ.Доступность          = ОтразитьВСоставеМПЗ;
	//ЭлементыФормы.СчетУчетаМПЗБУ.Доступность    = ОтразитьВСоставеМПЗ;
	
	ЭлементыФормы.Подразделение.Доступность                 = НЕ (ОтразитьВСоставеМПЗ ИЛИ СписыватьПриПринятииКУчету);
	ЭлементыФормы.СоставОсновногоСредства.Доступность       = НЕ (ОтразитьВСоставеМПЗ ИЛИ СписыватьПриПринятииКУчету);
	ЭлементыФормы.МОЛУУ.Доступность                         = НЕ (ОтразитьВСоставеМПЗ ИЛИ СписыватьПриПринятииКУчету);
	//ЭлементыФормы.СобытиеПринятиеКУчету.Доступность         = НЕ (ОтразитьВСоставеМПЗ ИЛИ СписыватьПриПринятииКУчету);
	ЭлементыФормы.СпособНачисленияАмортизацииУУ.Доступность = НЕ (ОтразитьВСоставеМПЗ ИЛИ СписыватьПриПринятииКУчету);
	ЭлементыФормы.СрокПолезногоИспользованияУУ.Доступность  = НЕ (ОтразитьВСоставеМПЗ ИЛИ СписыватьПриПринятииКУчету);
	ЭлементыФормы.ЗаполнитьУУ.Доступность                   = НЕ (ОтразитьВСоставеМПЗ ИЛИ СписыватьПриПринятииКУчету);
	
	ЭлементыФормы.ПодразделениеОрганизации.Доступность      = НЕ (ОтразитьВСоставеМПЗ ИЛИ СписыватьПриПринятииКУчету);
	ЭлементыФормы.МОЛБУ.Доступность                         = НЕ (ОтразитьВСоставеМПЗ ИЛИ СписыватьПриПринятииКУчету);
	ЭлементыФормы.СпособПоступления.Доступность             = НЕ (ОтразитьВСоставеМПЗ ИЛИ СписыватьПриПринятииКУчету);
	ЭлементыФормы.СобытиеПринятиеКУчетуРегл.Доступность     = НЕ (ОтразитьВСоставеМПЗ ИЛИ СписыватьПриПринятииКУчету) ИЛИ (ОтразитьВСоставеМПЗ И ОтражатьВНалоговомУчете); 
	ЭлементыФормы.СпособНачисленияАмортизацииБУ.Доступность = НЕ (ОтразитьВСоставеМПЗ ИЛИ СписыватьПриПринятииКУчету);
	ЭлементыФормы.СрокПолезногоИспользованияБУ.Доступность  = НЕ (ОтразитьВСоставеМПЗ ИЛИ СписыватьПриПринятииКУчету);
	ЭлементыФормы.СчетНачисленияАмортизацииБУ.Доступность   = НЕ (ОтразитьВСоставеМПЗ ИЛИ СписыватьПриПринятииКУчету);
	ЭлементыФормы.СчетУчетаБУ.Доступность                   = НЕ (ОтразитьВСоставеМПЗ ИЛИ СписыватьПриПринятииКУчету);
	ЭлементыФормы.ЗаполнитьБУ.Доступность                   = НЕ (ОтразитьВСоставеМПЗ ИЛИ СписыватьПриПринятииКУчету);
	
	ЭлементыФормы.НДСВключенВСтоимость.Доступность = Не ОтразитьВСоставеМПЗ;
	
	// Установка доступности флажков Бух и Нал в зависимости от вида операции
	ЭлементыФормы.ОтражатьВБухгалтерскомУчете.Доступность = НЕ (ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Прочее);// И мОтражатьВРегламентированномУчете;
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность     = НЕ (ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Прочее) И ОтражатьВБухгалтерскомУчете;
	
	ЭлементыФормы.СписыватьПриПринятииКУчету.Доступность = (ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование) И НЕ ОтразитьВСоставеМПЗ;
	
	ЭлементыФормы.СобытиеВводаВЭксплуатацию.Доступность                   = НЕ (ОтразитьВСоставеМПЗ ИЛИ СписыватьПриПринятииКУчету) И ЭлементыФормы.ПринятиеКУчетуОдновременноСВводомВЭксплуатацию.Значение;
	ЭлементыФормы.СобытиеВводаВЭксплуатациюРегл.Доступность               = ЭлементыФормы.ПринятиеКУчетуОдновременноСВводомВЭксплуатациюРегл.Значение;
	ЭлементыФормы.СобытиеВводаВЭксплуатациюРегл.ОтметкаНезаполненного     = ЭлементыФормы.ПринятиеКУчетуОдновременноСВводомВЭксплуатациюРегл.Значение И ЗначениеНеЗаполнено(СобытиеВводВЭксплуатациюРегл);
	ЭлементыФормы.СобытиеВводаВЭксплуатациюРегл.АвтоОтметкаНезаполненного = ЭлементыФормы.ПринятиеКУчетуОдновременноСВводомВЭксплуатациюРегл.Значение;
	ЭлементыФормы.СобытиеВводаВЭксплуатациюРегл.АвтоВыборНезаполненного   = ЭлементыФормы.ПринятиеКУчетуОдновременноСВводомВЭксплуатациюРегл.Значение;

	ЭлементыФормы.ПринятиеКУчетуОдновременноСВводомВЭксплуатацию.Доступность     = НЕ (ОтразитьВСоставеМПЗ ИЛИ СписыватьПриПринятииКУчету);
	ЭлементыФормы.ПринятиеКУчетуОдновременноСВводомВЭксплуатациюРегл.Доступность = НЕ (ОтразитьВСоставеМПЗ ИЛИ СписыватьПриПринятииКУчету) ИЛИ (ОтразитьВСоставеМПЗ И ОтражатьВНалоговомУчете);
	
	ЭлементыФормы.СобытиеПринятиеКУчетуРегл.АвтоВыборНезаполненного =   НЕ (ОтразитьВСоставеМПЗ ИЛИ СписыватьПриПринятииКУчету) ИЛИ (ОтразитьВСоставеМПЗ И ОтражатьВНалоговомУчете);
	ЭлементыФормы.СобытиеПринятиеКУчетуРегл.АвтоОтметкаНезаполненного = НЕ (ОтразитьВСоставеМПЗ ИЛИ СписыватьПриПринятииКУчету) ИЛИ (ОтразитьВСоставеМПЗ И ОтражатьВНалоговомУчете);
	
	// доступность реквизита Начислять амортизацию в зависимости от ввода в эксплуатацию
	ЭлементыФормы.НачислятьАмортизациюУУ.Доступность   = ЭлементыФормы.ПринятиеКУчетуОдновременноСВводомВЭксплуатацию.Значение;
	ЭлементыФормы.НачислятьАмортизациюБУ.Доступность   = ЭлементыФормы.ПринятиеКУчетуОдновременноСВводомВЭксплуатациюРегл.Значение;
	ЭлементыФормы.НачислятьАмортизациюНУ.Доступность   = ЭлементыФормы.ПринятиеКУчетуОдновременноСВводомВЭксплуатациюРегл.Значение;
	
	ЭлементыФормы.НачислятьАмортизациюВТекущемМесяце.Доступность   = ЭлементыФормы.НачислятьАмортизациюУУ.Значение;
	
	Если ОтражатьВУправленческомУчете Тогда

		// зависимость объема работ от способа амортизации
		Если  (СпособНачисленияАмортизацииУУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега)
			И (СпособНачисленияАмортизацииУУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции) Тогда
			ЭлементыФормы.ПредполагаемыйОбъемПродукцииУУ.Доступность = Ложь;
			ЭлементыФормы.ПараметрВыработкиУУ.Доступность = Ложь;
		Иначе
			ЭлементыФормы.ПредполагаемыйОбъемПродукцииУУ.Доступность = НЕ ОтразитьВСоставеМПЗ;
			ЭлементыФормы.ПараметрВыработкиУУ.Доступность = НЕ ОтразитьВСоставеМПЗ;
		КонецЕсли;

		// зависимость коэффициента ускорения от способа амортизации
		Если  (СпособНачисленияАмортизацииУУ <> Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка) Тогда
			ЭлементыФормы.КоэффициентУскоренияУУ .Доступность = Ложь;
		Иначе
			ЭлементыФормы.КоэффициентУскоренияУУ .Доступность = НЕ ОтразитьВСоставеМПЗ;
		КонецЕсли;

		// зависимость годовой нормы амортизации от способа амортизации
		Если  (СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега)
			ИЛИ (СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ) Тогда
			ЭлементыФормы.ГодоваяНормаАмортизацииУУ.Доступность = НЕ ОтразитьВСоставеМПЗ;
		Иначе
			ЭлементыФормы.ГодоваяНормаАмортизацииУУ.Доступность = Ложь;
		КонецЕсли;

		// зависимость годового графика амортизации от способа амортизации
		Если  (СпособНачисленияАмортизацииУУ <> Перечисления.СпособыНачисленияАмортизацииОС.Линейный)
			И (СпособНачисленияАмортизацииУУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ)
			И (СпособНачисленияАмортизацииУУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования)
			И (СпособНачисленияАмортизацииУУ <> Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка) Тогда
			ЭлементыФормы.ГрафикАмортизацииПоГодуУУ.Доступность = Ложь;
		Иначе
			ЭлементыФормы.ГрафикАмортизацииПоГодуУУ.Доступность = НЕ ОтразитьВСоставеМПЗ;
		КонецЕсли;

		// зависимость индивидуального графика амортизации от способа амортизации
		Если (СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоИндивидуальномуГрафику) Тогда
			ЭлементыФормы.ИндивидуальныйГрафикАмортизации.Доступность = НЕ ОтразитьВСоставеМПЗ;
		Иначе
			ЭлементыФормы.ИндивидуальныйГрафикАмортизации.Доступность = Ложь;
		КонецЕсли;

	КонецЕсли;

	Если ОтражатьВБухгалтерскомУчете Тогда

		// зависимость объема работ от способа амортизации
		Если  (СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега)
			И (СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции) Тогда
			ЭлементыФормы.ПредполагаемыйОбъемПродукцииБУ.Доступность = Ложь;
			ЭлементыФормы.ПараметрВыработкиБУ.Доступность = Ложь;
		Иначе
			ЭлементыФормы.ПредполагаемыйОбъемПродукцииБУ.Доступность = НЕ ОтразитьВСоставеМПЗ;
			ЭлементыФормы.ПараметрВыработкиБУ.Доступность = НЕ ОтразитьВСоставеМПЗ;
		КонецЕсли;

		// зависимость коэффициента ускорения от способа амортизации
		Если  (СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка) Тогда
			ЭлементыФормы.КоэффициентУскоренияБУ .Доступность = Ложь;
		Иначе
			ЭлементыФормы.КоэффициентУскоренияБУ .Доступность = НЕ ОтразитьВСоставеМПЗ;
		КонецЕсли;

		// зависимость годовой нормы амортизации от способа амортизации
		Если  (СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега)
			ИЛИ (СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ) Тогда
			ЭлементыФормы.ГодоваяНормаАмортизацииБУ.Доступность = НЕ ОтразитьВСоставеМПЗ;
		Иначе
			ЭлементыФормы.ГодоваяНормаАмортизацииБУ.Доступность = Ложь;
		КонецЕсли;

		// зависимость годового графика амортизации от способа амортизации
		Если  (СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.Линейный)
			И (СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ)
			И (СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования)
			И (СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка) Тогда
			ЭлементыФормы.ГрафикАмортизацииПоГодуБУ.Доступность = Ложь;
		Иначе
			ЭлементыФормы.ГрафикАмортизацииПоГодуБУ.Доступность = НЕ ОтразитьВСоставеМПЗ;
		КонецЕсли;

	КонецЕсли;
	
	// { Добавлено 20070926
	ЭлементыФормы.НадписьПараметрВыработки.Видимость = ЛОЖЬ;
	ЭлементыФормы.ПараметрВыработкиУУ.Видимость = ЛОЖЬ;
	ЭлементыФормы.ЕдиницаНормыУУ.Видимость = ЛОЖЬ;
	ЭлементыФормы.НадписьПредполагаемыйОбъемВыработки.Видимость=ЛОЖЬ;
	ЭлементыФормы.ПредполагаемыйОбъемПродукцииУУ.Видимость = ЛОЖЬ;
	ЭлементыФормы.НадписьКоэффициентУскоренияУУ.Видимость= ЛОЖЬ;
	ЭлементыФормы.ГодоваяНормаАмортизацииУУ.Видимость = ЛОЖЬ;
	ЭлементыФормы.НадписьГрафикАмортизацииПоГодуУУ.Видимость = ЛОЖЬ;
	ЭлементыФормы.ГрафикАмортизацииПоГодуУУ.Видимость = ЛОЖЬ;
	ЭлементыФормы.НадписьИндивидуальныйГрафикАмортизацииУУ.Видимость=ЛОЖЬ;
	ЭлементыФормы.ИндивидуальныйГрафикАмортизации.Видимость=ЛОЖЬ;
	ЭлементыФормы.ЕдиницаНормы.Видимость=ЛОЖЬ;
	
	ЭлементыФормы.НадписьПараметрВыработки1.Видимость = ЛОЖЬ;
	ЭлементыФормы.ПараметрВыработкиБУ.Видимость = ЛОЖЬ;
	ЭлементыФормы.ЕдиницаНормыБУ.Видимость = ЛОЖЬ;
	ЭлементыФормы.НадписьПредполагаемыйОбъемРаботБУ.Видимость=ЛОЖЬ;
	ЭлементыФормы.ПредполагаемыйОбъемПродукцииБУ.Видимость = ЛОЖЬ;
	ЭлементыФормы.НадписьПроцентГодовойАмортизацииБУ.Видимость= ЛОЖЬ;
	ЭлементыФормы.ГодоваяНормаАмортизацииБУ.Видимость = ЛОЖЬ;
	ЭлементыФормы.НадписьГрафикАмортизацииПоГодуБУ.Видимость = ЛОЖЬ;
	ЭлементыФормы.ГрафикАмортизацииПоГодуБУ.Видимость = ЛОЖЬ;
    ЭлементыФормы.ЕдиницаНормы1.Видимость = ЛОЖЬ;
	// Установка отметки незаполенного реквизиту "Способы отражения расходов по амортизации"
	//СпособыОтраженияРасходовПоАмортизацииОтметкаНезаполненного =
	//НЕ ((ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы) И ОтразитьВСоставеМПЗ);
	//
	//ЭлементыФормы.СпособыОтраженияРасходовПоАмортизации.ОтметкаНезаполненного     = СпособыОтраженияРасходовПоАмортизацииОтметкаНезаполненного И ЗначениеНеЗаполнено(СпособыОтраженияРасходовПоАмортизации);
	//ЭлементыФормы.СпособыОтраженияРасходовПоАмортизации.АвтоОтметкаНезаполненного = СпособыОтраженияРасходовПоАмортизацииОтметкаНезаполненного;
	//ЭлементыФормы.СпособыОтраженияРасходовПоАмортизации.АвтоВыборНезаполненного   = СпособыОтраженияРасходовПоАмортизацииОтметкаНезаполненного;
	//
	//// Установка видимости страниц панели ПанельПорядокВключенияСтоимостиВСоставРасходовНУ в завивисмости от 
	//// выбранного варианта включения стоимости в состав расходов
	//Если ЗначениеНеЗаполнено(ПорядокВключенияСтоимостиВСоставРасходовНУ) Тогда
	//	ЭлементыФормы.ПанельПорядокВключенияСтоимостиВСоставРасходовНУ.Видимость = Ложь;
	//Иначе
	//	ЭлементыФормы.ПанельПорядокВключенияСтоимостиВСоставРасходовНУ.Видимость = Истина;
	//	ЭлементыФормы.ПанельПорядокВключенияСтоимостиВСоставРасходовНУ.ТекущаяСтраница = ЭлементыФормы.ПанельПорядокВключенияСтоимостиВСоставРасходовНУ.Страницы[ПорядокВключенияСтоимостиВСоставРасходовНУ.Метаданные().ЗначенияПеречисления[Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.Индекс(ПорядокВключенияСтоимостиВСоставРасходовНУ)].Имя];
	//КонецЕсли;
	
	//СписокДоступныхЗначенийПриОтраженииВСоставеМПЗ = Новый СписокЗначений();
	//СписокДоступныхЗначенийПриОтраженииВСоставеМПЗ.Добавить(Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации);
	//СписокДоступныхЗначенийПриОтраженииВСоставеМПЗ.Добавить(Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы);
	//
	//ЭлементыФормы.ПорядокВключенияСтоимостиВСоставРасходовНУ.ДоступныеЗначения = ?(ОтразитьВСоставеМПЗ ИЛИ ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства,
	//																			   СписокДоступныхЗначенийПриОтраженииВСоставеМПЗ,
	//																			   Новый СписокЗначений());
	//
	//// Установка видимости надписи с расшифровкой срока полезного использования
	//ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияНУ.Заголовок  = РасшифровкаСрокаПолезногоИспользования(СрокПолезногоИспользованияНУ);
	//
	//// Установка доступности реквизитов, устанавливающих 
	//// порядок включения капитальных вложений в состав расходов
	//ЭлементыФормы.НадписьВПроцентахОтПервоначальнойСтоимости.Доступность        = ВключитьКапитальныеВложенияВРасходыНУ;
	//ЭлементыФормы.НадписьНеБолее10Процентов.Доступность                         = ВключитьКапитальныеВложенияВРасходыНУ;
	//ЭлементыФормы.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ.ТолькоПросмотр = НЕ ВключитьКапитальныеВложенияВРасходыНУ;

	//КолонкиТЧ = ЭлементыФормы.ОсновныеСредства.Колонки;
	//УстановитьВидимостьКолонкиТабЧасти(КолонкиТЧ.ИнвентарныйНомер, ОтражатьВБухгалтерскомУчете);
	
Конецпроцедуры // УстановитьВидимость()

// Заполнение реквизитов шапки документа значениями по умолчанию
//
Процедура ЗаполнитьДаннымиПоУмолчанию(ДокументОбъект)

	Если ЗначениеНеЗаполнено(ДокументОбъект.ВидОперации) Тогда
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование;
	КонецЕсли;

	Если ЗначениеНеЗаполнено(ДокументОбъект.ПринятиеКУчетуОдновременноСВводомВЭксплуатацию) Тогда

		ДокументОбъект.ПринятиеКУчетуОдновременноСВводомВЭксплуатацию = Истина;
		ДокументОбъект.НачислятьАмортизациюУУ       = Истина;
		ДокументОбъект.НачислятьАмортизациюБУ       = Истина;
		ДокументОбъект.НачислятьАмортизациюНУ       = Истина;

	КонецЕсли;

КонецПроцедуры

// Процедура формирует надпись с укзанием суммы документа
//
Процедура ОбновитьНадписьСуммаДокумента()
	
	Текст = "Сумма документа: ";
	Если ОтражатьВУправленческомУчете Тогда
		Текст = Текст + Формат( Стоимость, "ЧЦ=12; ЧДЦ=2; ЧН=0") + " " + ИмяВалУпр;
		Если ОтражатьВБухгалтерскомУчете Тогда
			Текст = Текст + " (" + Формат( СтоимостьБУ, "ЧЦ=12; ЧДЦ=2; ЧН=0") + " " + ИмяВалБух + ")";
		КонецЕсли;
	Иначе
		Текст = Текст + Формат( СтоимостьБУ, "ЧЦ=12; ЧДЦ=2; ЧН=0") + " " + ИмяВалБух;
	КонецЕсли;
	
	ЭлементыФормы.НадписьСуммаДокумента.Заголовок = Текст;
	
КонецПроцедуры // ОбновитьНадписьСуммаДокумента()

// Процедура пересчитывает сумму документа с учетом курсов валют.
//
Процедура ПересчетВалСумм()
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	мВалютаУправленческогоУчета     = Константы.ВалютаУправленческогоУчета.Получить();

	КурсВалюты   = ПолучитьКурсВалюты(мВалютаУправленческогоУчета, Дата);
	КурсВал      = КурсВалюты.Курс;
	КратностьВал = КурсВалюты.Кратность;
	ИмяВалБух    = "" + мВалютаРегламентированногоУчета;
	ИмяВалУпр    = "" + мВалютаУправленческогоУчета;
	
КонецПроцедуры // ПересчетВалСумм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") Тогда
		Сообщить("У вас недостаточно прав для просмотра документа!");
		отказ = Истина;
		возврат;
	КонецЕсли;

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		УстановитьНомерДокумента(ЭтотОбъект);
		ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь);
		
		Если ПараметрОбъектКопирования = Неопределено И ПараметрОснование = Неопределено Тогда
			// Заполнить реквизиты значениями по умолчанию.
			
			УстановитьНомерДокумента(ЭтотОбъект);
			ЗаполнитьДаннымиПоУмолчанию(ЭтотОбъект);
			//СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
			//СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСприПриобретенииОсновныхСредств;
			//
			//ПорядокВключенияСтоимостиВСоставРасходовУСН = Перечисления.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.ВключитьВСоставАмортизируемогоИмущества;
			//
			//
			//	СпециальныйКоэффициентНУ = 1;
			
			
		КонецЕсли;
		
	КонецЕсли;
 //УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,,глТекущийПользователь);
   // УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.

	УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
										  ВидОперации.Метаданные().ЗначенияПеречисления,
										  Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Отобразить в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	ВалютаУУ = Константы.ВалютаУправленческогоУчета.Получить();
	ЭлементыФормы.УпрВалюта.Заголовок   = ВалютаУУ;
	ЭлементыФормы.УпрВалюта1.Заголовок  = ВалютаУУ;

	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	ЭлементыФормы.РеглВалюта1.Заголовок = ВалютаРегл;
	ЭлементыФормы.РеглВалюта2.Заголовок = ВалютаРегл;
	ЭлементыФормы.РеглВалюта3.Заголовок = ВалютаРегл;
	ЭлементыФормы.РеглВалюта4.Заголовок = ВалютаРегл;
	ЭлементыФормы.РеглВалюта5.Заголовок = ВалютаРегл;
	ЭлементыФормы.РеглВалюта6.Заголовок = ВалютаРегл;
	ЭлементыФормы.РеглВалюта7.Заголовок = ВалютаРегл;
	ЭлементыФормы.РеглВалюта8.Заголовок = ВалютаРегл;
	ПараметрВыработкиУУПриИзменении(ЭлементыФормы.ПараметрВыработкиУУ);
	ПараметрВыработкиБУПриИзменении(ЭлементыФормы.ПараметрВыработкиБУ);
	
	ВключитьКапитальныеВложенияВРасходыНУ = НЕ ЗначениеНеЗаполнено(ПроцентКапитальныхВложенийВключаемыхВРасходыНУ);
	
	УстановитьВидимость();

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	мТекущаяДатаДокумента = Дата;
	
	ПересчетВалСумм();
	
	//{ Добавлено 20071008
	ЭлементыФормы.СчетУчетаБУ.СписокВыбора.Добавить("01.01");
	ЭлементыФормы.СчетУчетаНУ.СписокВыбора.Добавить("01.01");
	
	ЭлементыФормы.СчетУчетаБУВнеоборотногоАктива.СписокВыбора.Добавить("08.01");
	ЭлементыФормы.СчетУчетаБУВнеоборотногоАктива.СписокВыбора.Добавить("08.02");
	ЭлементыФормы.СчетУчетаБУВнеоборотногоАктива.СписокВыбора.Добавить("08.03");
	ЭлементыФормы.СчетУчетаБУВнеоборотногоАктива.СписокВыбора.Добавить("08.04");
	
	ЭлементыФормы.СчетУчетаНУВнеоборотногоАктива.СписокВыбора.Добавить("08.01");
	ЭлементыФормы.СчетУчетаНУВнеоборотногоАктива.СписокВыбора.Добавить("08.02");
	ЭлементыФормы.СчетУчетаНУВнеоборотногоАктива.СписокВыбора.Добавить("08.03");
	ЭлементыФормы.СчетУчетаНУВнеоборотногоАктива.СписокВыбора.Добавить("08.04");
	
	ЭлементыФормы.СчетНачисленияАмортизацииБУ.СписокВыбора.Добавить("02.01");
	ЭлементыФормы.СчетНачисленияАмортизацииНУ.СписокВыбора.Добавить("02.01");
	
	
	
	//} Добавлено 20071008
	
	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 

	
КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	// Если открыли данную форму из формы документа, то там надо поменять текст
	Если НЕ ЗначениеНеЗаполнено(ВладелецФормы) Тогда

		// Надо поменять текст про документ в форме-владельце
		Если ТипЗнч(ВладелецФормы) = Тип("Форма") тогда
			ВладелецФормы.ЗаполнитьТекстПроДокументы();
		КонецЕсли;

	КонецЕсли; 
	

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Если НЕ ЗначениеНеЗаполнено(ЗначениеВыбора) Тогда

		Если ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ОсновныеСредства") Тогда

			СтрокаТабличнойЧасти = ОсновныеСредства.Найти(ЗначениеВыбора,"ОсновноеСредство");
			Если СтрокаТабличнойЧасти <> Неопределено Тогда
				Предупреждение("Это основное средство уже подобрано!",60);
			Иначе
				НоваяСтрока = ОсновныеСредства.Добавить();
				НоваяСтрока.ОсновноеСредство = ЗначениеВыбора;
				НоваяСтрока.ИнвентарныйНомер = ЗначениеВыбора.Код;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств[Кнопка.Имя];
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		Если ЗначениеНеЗаполнено(Номенклатура) Тогда
			СчетУчетаБУВнеоборотногоАктива = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			СчетУчетаНУВнеоборотногоАктива = ПланыСчетов.Налоговый.ПустаяСсылка();
		КонецЕсли;
	Иначе

		СписыватьПриПринятииКУчету = Ложь;
		
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОБъектыСтроительства Тогда

		Если ЗначениеНеЗаполнено(ОбъектСтроительства) Тогда
			//СчетУчетаБУВнеоборотногоАктива = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			//СчетУчетаНУВнеоборотногоАктива = ПланыСчетов.Налоговый.ПустаяСсылка();
		КонецЕсли;
		
		Номенклатура = Неопределено;

		Если ОтражатьВНалоговомУчете Тогда
			
			//Если ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
			//	
			//	ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации;
			//	Сообщить("Порядок учета (НУ) изменен на ""Начисление амортизации"".");
			//	
			//КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Прочее Тогда
		ОтражатьВУправленческомУчете = Истина;
		ОтражатьВБухгалтерскомУчете  = Ложь;
		ОтражатьВНалоговомУчете      = Ложь;
		УстановитьНомерДокумента(ЭтотОбъект);
	КонецЕсли;

	Если ВидОперации <> Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОБъектыСтроительства Тогда
		ОбъектСтроительства = Справочники.ОбъектыСтроительства.ПустаяСсылка();
	КонецЕсли;
	
	// Отобразить в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при нажатии кнопки "ЗаполнитьБУ" командной панели формы
//
Процедура КоманднаяПанельЗаполнитьЗаполнитьБУ(Кнопка)

	Если СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоИндивидуальномуГрафику Тогда
		Предупреждение("В бухгалтерском учете способ начисления амортизации по индивидуальному графику не используется.");
		Возврат;
	Иначе
		СпособНачисленияАмортизацииБУ  = СпособНачисленияАмортизацииУУ;
		ПараметрВыработкиБУ            = ПараметрВыработкиУУ;
		СрокПолезногоИспользованияБУ   = СрокПолезногоИспользованияУУ;
		ПредполагаемыйОбъемПродукцииБУ = ПредполагаемыйОбъемПродукцииУУ;
		КоэффициентУскоренияБУ         = КоэффициентУскоренияУУ;
		Если ПринятиеКУчетуОдновременноСВводомВЭксплуатациюРегл тогда
			НачислятьАмортизациюБУ     = НачислятьАмортизациюУУ;
		КонецЕсли;
		ГрафикАмортизацииПоГодуБУ      = ГрафикАмортизацииПоГодуУУ;
		УстановитьВидимость();
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ЗаполнитьУУ" командной панели формы
//
Процедура КоманднаяПанельЗаполнитьЗаполнитьУУ(Кнопка)

	СпособНачисленияАмортизацииУУ  = СпособНачисленияАмортизацииБУ;
	ПараметрВыработкиУУ            = ПараметрВыработкиБУ;
	СрокПолезногоИспользованияУУ   = СрокПолезногоИспользованияБУ;
	ПредполагаемыйОбъемПродукцииУУ = ПредполагаемыйОбъемПродукцииБУ;
	КоэффициентУскоренияУУ         = КоэффициентУскоренияБУ;
	Если ПринятиеКУчетуОдновременноСВводомВЭксплуатацию тогда
		НачислятьАмортизациюУУ     = НачислятьАмортизациюБУ;
	КонецЕсли;
	ГрафикАмортизацииПоГодуУУ      = ГрафикАмортизацииПоГодуБУ;
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "По наименованию" из меню "Заполнить"
// командной панели формы. Процедура добавляет в табличную часть основные средства,
// наименование которых совпадает с наименованием текущего выбранного в табличной части ОС
//
Процедура КоманднаяПанельОСЗаполнитьПоНаименованию(Кнопка)
	
	Если ЭлементыФормы.ОсновныеСредства.ТекущаяСтрока = Неопределено Тогда
		СообщитьОбОшибке("Данные для заполнения отсутствуют.",,, СтатусСообщения.Обычное);
		Возврат;
	КонецЕсли;
	
	ОсновноеСредство = ЭлементыФормы.ОсновныеСредства.ТекущиеДанные.ОсновноеСредство;
	
	Если ОсновноеСредство = Неопределено Тогда
		СообщитьОбОшибке("Данные для заполнения отсутствуют.",,, СтатусСообщения.Обычное);
		Возврат;
	КонецЕсли;
	
	ОсновноеСредствоНаименование = Строка(ОсновноеСредство);
	
	СписокОС = ОсновныеСредства.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("СписокОС",     СписокОС);
	Запрос.УстановитьПараметр("Наименование", ОсновноеСредствоНаименование);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК ОсновноеСредство,
	|	ОсновныеСредства.Код КАК ОсновноеСредствоКод
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.Наименование = &Наименование
	|	И ОсновныеСредства.Ссылка НЕ В (&СписокОС)
	|	И ОсновныеСредства.ПометкаУдаления = ЛОЖЬ
	|	И ОсновныеСредства.ЭтоГруппа = ЛОЖЬ";
	
	ВыборкаОсновныеСредства = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаОсновныеСредства.Количество() = 0 Тогда
		СообщитьОбОшибке("Другие элементы справочника с наименованием <" + ОсновноеСредствоНаименование + "> в справочнике ""Основные средства"" отсутствуют.",,, СтатусСообщения.Обычное);
		Возврат;
	КонецЕсли;
	
	Пока ВыборкаОсновныеСредства.Следующий() Цикл
		НоваяСтрока = ОсновныеСредства.Добавить();
		НоваяСтрока.ОсновноеСредство = ВыборкаОсновныеСредства.ОсновноеСредство;
		НоваяСтрока.ИнвентарныйНомер = ВыборкаОсновныеСредства.ОсновноеСредствоКод;
	КонецЦикла; 
	
КонецПроцедуры // КоманднаяПанельОСЗаполнитьПоНаименованию()

// Процедура вызывается при нажании кнопки Подбор командной панели "КоманднаяПанельОС"
//
Процедура КоманднаяПанельОСПодбор(Кнопка)
	
	ФормаПодбора =  Справочники.ОсновныеСредства.ПолучитьФорму("ФормаПодбора",ЭтаФорма);
	ФормаПодбора.РежимВыбора = Истина;
	ФормаПодбора.ЗакрыватьПриВыборе  = Ложь;
	ФормаПодбора.Открыть();
	

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	УстановитьВидимость();
	ПересчетВалСумм();
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Организация 
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьНомерДокумента(ЭтотОбъект);
	
	ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	
	// Документ с видом операции "Прочее" не отражается в регл учете
	Если НЕ (ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Прочее) Тогда
		//УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);
	КонецЕсли;

	// попробуем заполнить подразделение организации 
	//ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
	//											  ПодразделениеОрганизации,
	//											  Подразделение,
	//											  Организация);
												  
	УстановитьВидимость();
	
КонецПроцедуры //ОрганизацияПриИзменении()

// Процедура - обработчик события "При изменении" поля ввода Подразделение
// 
Процедура ПодразделениеПриИзменении(Элемент)
	
	// попробуем заполнить подразделение организации 
	//ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
	//											  ПодразделениеОрганизации,
	//											  Подразделение,
	//											  Организация);

КонецПроцедуры //ПодразделениеПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделенияОрганизации
//
Процедура ПодразделениеОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	//ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
	//										 Элемент,
	//										 ПодразделениеОрганизации,
	//										 Подразделение,
	//										 Организация,
	//										 ЭтаФорма);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флага ОтражатьВУправленческомУчете
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)

	Если НЕ ОтражатьВБухгалтерскомУчете
	   И НЕ ОтражатьВНалоговомУчете
	   И НЕ ОтражатьВУправленческомУчете
	   И НЕ (ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Прочее) Тогда

		ОтражатьВБухгалтерскомУчете = Истина;
		ОтражатьВБухгалтерскомУчетеПриИзменении(ЭлементыФормы.ОтражатьВБухгалтерскомУчете);

	КонецЕсли;
	
	УстановитьВидимость();
	УстановитьКнопкиПечати();

КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага ОтражатьВБухгалтерскомУчете 
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
	
	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете; //И ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОтражатьДокументыВНалоговомУчете");
	
	Если НЕ ОтражатьВБухгалтерскомУчете
	   И НЕ ОтражатьВНалоговомУчете
	   И НЕ ОтражатьВУправленческомУчете Тогда
		ОтражатьВУправленческомУчете = Истина;
	КонецЕсли;
	
	УстановитьВидимость();
	
	// попробуем заполнить подразделение организации 
	//ЗаполнениеПодразделенияОрганизацииПоРегистру(ОтражатьВБухгалтерскомУчете,
	//											 ПодразделениеОрганизации,
	//											 Подразделение,
	//											 Организация);
	УстановитьКнопкиПечати();

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага ОтражатьВНалоговомУчете 
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)

	Если НЕ ОтражатьВБухгалтерскомУчете
	   И НЕ ОтражатьВНалоговомУчете
	   И НЕ ОтражатьВУправленческомУчете Тогда
		ОтражатьВУправленческомУчете = Истина;
		ОтражатьВУправленческомУчетеПриИзменении(Элемент);
	КонецЕсли;
	
	Если НЕ ОтражатьВНалоговомУчете 
	   И ОтражатьВБухгалтерскомУчете
	   И ОтразитьВСоставеМПЗ Тогда
		СобытиеПринятиеКУчетуРегл = Справочники.СобытияОС.ПустаяСсылка();
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля СпособНачисленияАмортизацииБУ
//
Процедура СпособНачисленияАмортизацииБУПриИзменении(Элемент)

	// зависимость объема работ от способа амортизации
	Если  (СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега)
		И (СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции) Тогда
		ПредполагаемыйОбъемПродукцииБУ = 0;
//		ПараметрВыработкиБУ = Справочники.ПараметрыВыработкиОС.ПустаяСсылка();
	КонецЕсли;

	// зависимость коэффициента ускорения от способа амортизации
	Если  (СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка) Тогда
		КоэффициентУскоренияБУ = 0;
	КонецЕсли;

	// зависимость годовой нормы амортизации от способа амортизации
	Если НЕ ( (СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега)
		ИЛИ (СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка)
		ИЛИ (СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ)) Тогда
		ГодоваяНормаАмортизацииБУ = 0;
	КонецЕсли;

	// зависимость годового графика амортизации от способа амортизации
	Если  (СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.Линейный)
		И (СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ)
		И (СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования)
		И (СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка) Тогда
		ГрафикАмортизацииПоГодуБУ = 0;
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры // СпособНачисленияАмортизацииБУПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода физического лица -  
//
// Параметры:
//  Элемент - элемент формы, который отображает физическое лицо
//
Процедура МОЛНачалоВыбора(Элемент, СтандартнаяОбработка)
	// переопеределим выбор физлица на выбор из списка регистра сведений
	//ОткрытьФормуВыбораРаботника(ЭлементыФормы.МОЛУУ, СтандартнаяОбработка, Ссылка, Подразделение);
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода физического лица -  
//
// Параметры:
//  Элемент - элемент формы, который отображает физическое лицо
//
Процедура МОЛОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")Тогда
		СтандартнаяОбработка = Ложь;
		МОЛУУ = ВыбранноеЗначение.Физлицо;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура МОЛАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)

	//ТекстАвтоПодбора     = ПодобратьФИОРаботникаКандидата("Работники", Текст);
	//СтандартнаяОбработка = Ложь;

КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура МОЛОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)

	//Значение             = ПодобратьСписокРаботниковКандидатов("Работники", Текст, Элемент.Значение);
	//СтандартнаяОбработка = (Значение = Неопределено);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура МОЛОрганизацииНачалоВыбора(Элемент, СтандартнаяОбработка)

	//ОткрытьФормуВыбораРаботникаОрганизации(ЭлементыФормы.МОЛБУ, СтандартнаяОбработка, Ссылка, Организация, ПодразделениеОрганизации);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода физического лица -  
//
// Параметры:
//  Элемент - элемент формы, который отображает физическое лицо
//
Процедура МОЛОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")Тогда
		СтандартнаяОбработка = Ложь;
		МОЛБУ = ВыбранноеЗначение.Физлицо;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура МОЛОрганизацииАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)

	//ТекстАвтоПодбора     = ПодобратьФИОРаботникаКандидата("РаботникиОрганизации", Текст, Организация);
	//СтандартнаяОбработка = Ложь;

КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура МОЛОрганизацииОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)

	//Значение = ПодобратьСписокРаботниковКандидатов("РаботникиОрганизации", Текст, Элемент.Значение, Организация);
	//СтандартнаяОбработка = (Значение = Неопределено);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ОбъектСтроительства
//
Процедура ОбъектСтроительстваПриИзменении(Элемент)

	УстановитьВидимость();

КонецПроцедуры // ОбъектСтроительстваПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Склад
//
Процедура СкладНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.НеРавно, СтандартнаяОбработка);

КонецПроцедуры // СкладНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода СчетУчетаБУ
//
Процедура СчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	//СтандартнаяОбработка = СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода СчетНачисленияАмортизации
//
Процедура СчетНачисленияАмортизацииБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	//СтандартнаяОбработка = СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода СчетУчетаНУ
//
Процедура СчетУчетаНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	//СтандартнаяОбработка = СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода СчетНачисленияАмортизацииНУ
//
Процедура СчетНачисленияАмортизацииНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	//СтандартнаяОбработка = СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка "Включить капитальные
// вложения в состав расходов по п. 1.1 ст. 259 НК РФ".
//
// Очищает значение процента капитальных вложений и вызывает процедуру
// установки видимости.
// 
Процедура ВключитьКапитальныеВложенияВРасходыНУПриИзменении(Элемент)
	
	Если ВключитьКапитальныеВложенияВРасходыНУ = Ложь Тогда
	
		Если НЕ ЗначениеНеЗаполнено(ПроцентКапитальныхВложенийВключаемыхВРасходыНУ) Тогда
			
			ТекстВопроса =
			"Установленное значение процента капитальных вложений будет очищено.
			|Продолжить?";
			
			Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена) = КодВозвратаДиалога.ОК Тогда
				
				ПроцентКапитальныхВложенийВключаемыхВРасходыНУ = 0;
				
			Иначе
				
				ВключитьКапитальныеВложенияВРасходыНУ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // ВключитьКапитальныеВложенияВРасходыНУПриИзменении()


// Процедура - обработчик события "ПриИзменении" флага ПринятиеКУчетуОдновременноСВводомВЭксплуатацию 
//
Процедура ПринятиеКУчетуОдновременноСВводомВЭксплуатациюПриИзменении(Элемент)

	Если Не(ПринятиеКУчетуОдновременноСВводомВЭксплуатацию) тогда
		СобытиеВводаВЭксплуатацию          = Справочники.СобытияОС.ПустаяСсылка();
		НачислятьАмортизациюУУ             = Ложь;
		НачислятьАмортизациюВТекущемМесяце = Ложь;
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры

Процедура ПринятиеКУчетуОдновременноСВводомВЭксплуатациюПриИзмененииРегл(Элемент)
	
	Если Не(ПринятиеКУчетуОдновременноСВводомВЭксплуатациюРегл) тогда
		СобытиеВводаВЭксплуатацию          = Справочники.СобытияОС.ПустаяСсылка();
		НачислятьАмортизациюБУ             = Ложь;
		НачислятьАмортизациюНУ             = Ложь;

	КонецЕсли;

	УстановитьВидимость();

	
КонецПроцедуры


// Процедура - обработчик события "ПриИзменении" поля ввода Номенклатура
//
Процедура НоменклатураПриИзменении(Элемент)

	Если Номенклатура <> СерияНоменклатуры.Владелец Тогда
		СерияНоменклатуры = Неопределено;
	КонецЕсли; 

	Если Номенклатура <> ХарактеристикаНоменклатуры.Владелец Тогда
		ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;

	//Если ЗначениеНеЗаполнено(Номенклатура) Тогда
	//	СчетУчетаБУВнеоборотногоАктива = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	//	СчетУчетаНУВнеоборотногоАктива = ПланыСчетов.Налоговый.ПустаяСсылка();
	//Иначе
	//	СчетаУчета = ПолучитьСчетаУчетаНоменклатуры(Организация, Номенклатура);
	//	СчетУчетаБУВнеоборотногоАктива = СчетаУчета.СчетУчетаБУ;
	//	СчетУчетаНУВнеоборотногоАктива = СчетаУчета.СчетУчетаНУ;
	//КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаБУ
//
Процедура СчетУчетаБУВнеоборотногоАктиваОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	//СтандартнаяОбработка = СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СчетУчетаБУ
//
Процедура СчетУчетаБУВнеоборотногоАктиваПриИзменении(Элемент)

	//СчетУчетаНУВнеоборотногоАктива = ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетУчетаБУВнеоборотногоАктива));

КонецПроцедуры // ТоварыСчетУчетаБУПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага СписыватьПриПринятииКУчету
//
Процедура СписыватьПриПринятииКУчетуПриИзменении(Элемент)

	Если Элемент.Значение Тогда
	
		ПринятиеКУчетуОдновременноСВводомВЭксплуатацию     = Ложь;
		СобытиеВводВЭксплуатацию                           = Справочники.СобытияОС.ПустаяСсылка();
		НачислятьАмортизациюУУ                             = Ложь;
		НачислятьАмортизациюВТекущемМесяце                 = Ложь;
		ПринятиеКУчетуОдновременноСВводомВЭксплуатациюРегл = Ложь;
		СобытиеВводВЭксплуатациюРегл                       = Справочники.СобытияОС.ПустаяСсылка();
		НачислятьАмортизациюБУ                             = Ложь;
			
		Подразделение                                      = Справочники.Подразделения.ПустаяСсылка();
		СоставОсновногоСредства                            = Справочники.ОсновныеСредства.ПустаяСсылка();
		МОЛУУ                                              = Справочники.ФизическиеЛица.ПустаяСсылка();
		СобытиеПринятиеКУчету                              = Справочники.СобытияОС.ПустаяСсылка();
		СобытиеПринятиеКУчетуРегл                          = Справочники.СобытияОС.ПустаяСсылка();
		СпособНачисленияАмортизацииУУ                      = Перечисления.СпособыНачисленияАмортизацииОС.ПустаяСсылка();
		//ПараметрВыработкиУУ                                = Справочники.ПараметрыВыработкиОС.ПустаяСсылка();
		ПредполагаемыйОбъемПродукцииУУ                     = 0;
		СрокПолезногоИспользованияУУ                       = 0;
		ГодоваяНормаАмортизацииУУ                          = 0;
	//	ГрафикАмортизацииПоГодуУУ                          = Справочники.ГодовыеГрафикиАмортизацииОС.ПустаяСсылка();
		КоэффициентУскоренияУУ                             = 0;
	//	ИндивидуальныйГрафикАмортизации                    = Справочники.ИндивидуальныеГрафикиАмортизации.ПустаяСсылка();
			                                        
//		ПодразделениеОрганизации                           = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		МОЛБУ                                              = Справочники.ФизическиеЛица.ПустаяСсылка();
		СпособПоступления                                  = Перечисления.СпособыПоступленияАктивов;
		СпособНачисленияАмортизацииБУ                      = Перечисления.СпособыНачисленияАмортизацииОС.ПустаяСсылка();
		//ПараметрВыработкиБУ                                = Справочники.ПараметрыВыработкиОС.ПустаяСсылка();
		ПредполагаемыйОбъемПродукцииБУ                     = 0;
		СрокПолезногоИспользованияБУ                       = 0;
		ГодоваяНормаАмортизацииБУ                          = 0;
		//ГрафикАмортизацииПоГодуБУ                          = Справочники.ГодовыеГрафикиАмортизацииОС.ПустаяСсылка();;
		КоэффициентУскоренияБУ                             = 0;
//		СчетНачисленияАмортизацииБУ                        = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
//		СчетУчетаБУ                                        = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		
	КонецЕсли;
	
	УстановитьВидимость();

КонецПроцедуры // СписыватьПриПринятииКУчетуПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СпособНачисленияАмортизацииУУ
//
Процедура СпособНачисленияАмортизацииУУПриИзменении(Элемент)

	// зависимость объема работ от способа амортизации
	Если  (СпособНачисленияАмортизацииУУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега)
		И (СпособНачисленияАмортизацииУУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции) Тогда
		ПредполагаемыйОбъемПродукцииУУ = 0;
//		ПараметрВыработкиУУ            = Справочники.ПараметрыВыработкиОС.ПустаяСсылка();

	КонецЕсли;

	// зависимость коэффициента ускорения от способа амортизации
	Если  (СпособНачисленияАмортизацииУУ <> Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка) Тогда
		КоэффициентУскоренияУУ = 0;
	КонецЕсли;

	// зависимость годовой нормы амортизации от способа амортизации
	Если НЕ ( (СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега)
		ИЛИ (СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка)
		ИЛИ (СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ)) Тогда
		ГодоваяНормаАмортизацииУУ = 0;
	КонецЕсли;

	// зависимость годового графика амортизации от способа амортизации
	Если  (СпособНачисленияАмортизацииУУ <> Перечисления.СпособыНачисленияАмортизацииОС.Линейный)
		И (СпособНачисленияАмортизацииУУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ)
		И (СпособНачисленияАмортизацииУУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования)
		И (СпособНачисленияАмортизацииУУ <> Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка) Тогда
		ГрафикАмортизацииПоГодуУУ = 0;
	КонецЕсли;

	// зависимость индивидуального графика амортизации от способа амортизации
	Если (СпособНачисленияАмортизацииУУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоИндивидуальномуГрафику) Тогда
		ИндивидуальныйГрафикАмортизации = 0;
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры

// Процедура - обработчик события "Нажание" кнопки РассчитатьСтоимость
//
Процедура РассчитатьСтоимостьНажатие(Элемент)

	СтруктураСтоимости = РасчитатьСтоимостьОбъектаСтроительства(ОтражатьВУправленческомУчете,
	                                                            ОтражатьВБухгалтерскомУчете,
	                                                            ОтражатьВНалоговомУчете,
	                                                            СчетУчетаБУВнеоборотногоАктива,
	                                                            СчетУчетаНУВнеоборотногоАктива,
	                                                            ОбъектСтроительства,
	                                                            Организация,
	                                                            ?(ЭтоНовый(), КонецДня(Дата), Дата));

	ЭлементыФормы.СтоимостьУУ.Значение    = СтруктураСтоимости.СтоимостьУУ;
	ЭлементыФормы.СтоимостьБУ.Значение    = СтруктураСтоимости.СтоимостьБУ;
	ЭлементыФормы.СтоимостьБУХоз.Значение = СтруктураСтоимости.СтоимостьБУХоз;
	ЭлементыФормы.СтоимостьНУ.Значение    = СтруктураСтоимости.СтоимостьНУ;
	ЭлементыФормы.СтоимостьНУХоз.Значение = СтруктураСтоимости.СтоимостьНУХоз;
	ЭлементыФормы.СтоимостьПР.Значение    = СтруктураСтоимости.СтоимостьПР;
	ЭлементыФормы.СтоимостьПРХоз.Значение = СтруктураСтоимости.СтоимостьПРХоз;
	ЭлементыФормы.СтоимостьВР.Значение    = СтруктураСтоимости.СтоимостьВР;
	ЭлементыФормы.СтоимостьВРХоз.Значение = СтруктураСтоимости.СтоимостьВРХоз;

	ПересчетСуммыНДСХозспособ();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода СпособНачисленияАмортизацииБУ
//
Процедура СпособНачисленияАмортизацииБУНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	УстановитьСписокПоляВыбора(ЭлементыФормы.СпособНачисленияАмортизацииБУ, ПолучитьСписокСпособовАмортизацииБУ());

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода СобытиеПринятиеКУчету
//
Процедура СобытиеПринятиеКУчетуНачалоВыбора(Элемент, СтандартнаяОбработка)

	СписокСобытий = Новый СписокЗначений;
	СписокСобытий.Добавить(Перечисления.ВидыСобытийОС.ПринятиеКУчету);
	НачалоВыбораЗначенияСобытияОС(Элемент, СписокСобытий, СтандартнаяОбработка);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода СостояниеВводаВЭксплуатацию
//
Процедура СобытиеВводаВЭксплуатациюНачалоВыбора(Элемент, СтандартнаяОбработка)

	СписокСобытий = Новый СписокЗначений;
	СписокСобытий.Добавить(Перечисления.ВидыСобытийОС.ВводВЭксплуатацию);
	НачалоВыбораЗначенияСобытияОС(Элемент, СписокСобытий, СтандартнаяОбработка);

КонецПроцедуры

Процедура СобытиеПринятиеКУчетуНачалоВыбораРегл(Элемент, СтандартнаяОбработка)
	
	СобытиеПринятиеКУчетуНачалоВыбора(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СобытиеВводаВЭксплуатациюНачалоВыбораРегл(Элемент, СтандартнаяОбработка)
	
	СобытиеВводаВЭксплуатациюНачалоВыбора(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры


Процедура ГодоваяНормаАмортизацииУУНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СписокВыбора = Новый СписокЗначений;
	НормаПоЕНАОФ = 0;

	Если НЕ ЗначениеНеЗаполнено(ШифрПоЕНАОФ) Тогда

		Если    (СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ) Тогда
			НормаПоЕНАОФ = ШифрПоЕНАОФ.НормаАмортизационныхОтчислений;

		ИначеЕсли (СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега) Тогда
			НормаПоЕНАОФ = ШифрПоЕНАОФ.ПроцентОтСтоимостиМашины;

		КонецЕсли;

		СписокВыбора.Добавить(НормаПоЕНАОФ);

	КонецЕсли;

	ЭлементыФормы.ГодоваяНормаАмортизацииУУ.СписокВыбора = СписокВыбора;

КонецПроцедуры

Процедура ГодоваяНормаАмортизацииБУНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СписокВыбора = Новый СписокЗначений;
	НормаПоЕНАОФ = 0;

	Если НЕ ЗначениеНеЗаполнено(ШифрПоЕНАОФ) Тогда
		Если    (СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ) Тогда
			НормаПоЕНАОФ = ШифрПоЕНАОФ.НормаАмортизационныхОтчислений;

		ИначеЕсли (СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега) Тогда
			НормаПоЕНАОФ = ШифрПоЕНАОФ.ПроцентОтСтоимостиМашины;

		КонецЕсли;

		СписокВыбора.Добавить(НормаПоЕНАОФ);

	КонецЕсли;

	ЭлементыФормы.ГодоваяНормаАмортизацииБУ.СписокВыбора = СписокВыбора;

КонецПроцедуры

Процедура ПараметрВыработкиУУПриИзменении(Элемент)

	Если ЗначениеНеЗаполнено(ПараметрВыработкиУУ) ТОгда
		ЭлементыФормы.ЕдиницаНормыУУ.Заголовок = "";

	Иначе
		ЭлементыФормы.ЕдиницаНормыУУ.Заголовок = ПараметрВыработкиУУ.ЕдиницаИзмерения.Наименование;

	КонецЕсли;

КонецПроцедуры

Процедура ПараметрВыработкиБУПриИзменении(Элемент)

	Если ЗначениеНеЗаполнено(ПараметрВыработкиБУ) ТОгда
		ЭлементыФормы.ЕдиницаНормыБУ.Заголовок = "";

	Иначе
		ЭлементыФормы.ЕдиницаНормыБУ.Заголовок = ПараметрВыработкиБУ.ЕдиницаИзмерения.Наименование;

	КонецЕсли;

КонецПроцедуры

Процедура ОсновныеСредстваОсновноеСредствоПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.ОсновныеСредства.ТекущиеДанные;
	СтрокаТЧ.ИнвентарныйНомер = СтрокаТЧ.ОсновноеСредство.Код;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода серии номенклатуры
//
Процедура СерияНоменклатурыПриИзменении(Элемент)

	Если ЗначениеНеЗаполнено(Номенклатура) Тогда
		Номенклатура = Элемент.Значение.Владелец;
	КонецЕсли;

КонецПроцедуры

Процедура НачислятьАмортизациюУУПриИзменении(Элемент)

	Если НЕ НачислятьАмортизациюУУ Тогда
		НачислятьАмортизациюВТекущемМесяце = Ложь;

	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СчетУчетаБУ
//
Процедура СчетУчетаБУПриИзменении(Элемент)
	
	//СчетУчетаНУ = ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", СчетУчетаБУ));
	
КонецПроцедуры // СчетУчетаБУПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетНачисленияАмортизацииБУ
//
Процедура СчетНачисленияАмортизацииБУПриИзменении(Элемент)
	
	//СчетНачисленияАмортизацииНУ = ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", СчетНачисленияАмортизацииБУ));
	
КонецПроцедуры // СчетНачисленияАмортизацииБУПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Порядок учета"(НУ)
//
Процедура ПорядокВключенияСтоимостиВСоставРасходовНУПриИзменении(Элемент)
	
	УстановитьВидимость();

КонецПроцедуры // ПорядокВключенияСтоимостиВСоставРасходовНУПриИзменении(

// Процедура - обработчик события "ПриИзменении" поля ввода "Срок полезного
// использования (в месяцах)"(НУ)
//
Процедура СрокПолезногоИспользованияНУПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // СрокПолезногоИспользованияНУПриИзменении()

// Процедура - обработчик события ОбновлениеОтображения формы документа
//
Процедура ОбновлениеОтображения()
	
	ОбновитьНадписьСуммаДокумента();
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПриИзменении" флажка "Отразить в составе
// МПЗ (бух. учет)".
//
//  Вызывает процедуру установки видимости элементов формы.
//
Процедура ОтразитьВСоставеМПЗПриИзменении(Элемент)
	
	Если НЕ ОтразитьВСоставеМПЗ Тогда
		
		НоменклатураМПЗ   = Справочники.Номенклатура.ПустаяСсылка();
		ХарактеристикаМПЗ = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		СерияМПЗ          = Справочники.СерииНоменклатуры.ПустаяСсылка();
		СкладМПЗ          = Справочники.Склады.ПустаяСсылка();
		СчетУчетаМПЗБУ    = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СчетУчетаМПЗНУ    = ПланыСчетов.Налоговый.ПустаяСсылка();
		
	Иначе
		
		Если ОтражатьВНалоговомУчете Тогда
			
			Если ЗначениеНеЗаполнено(СчетУчетаНУ) Тогда
				СчетУчетаНУ = ПланыСчетов.Налоговый.ОСвСоставеМПЗвБУ;
			КонецЕсли;
			
			Если ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
				
				ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации;
				Сообщить("Порядок учета (НУ) изменен на ""Начисление амортизации"".");
				
			КонецЕсли;
			
		КонецЕсли;
		
		СписыватьПриПринятииКУчету                         = Ложь;
		НДСВключенВСтоимость							   = Ложь;
		
		ПринятиеКУчетуОдновременноСВводомВЭксплуатацию     = Ложь;
		СобытиеВводВЭксплуатацию                           = Справочники.СобытияОС.ПустаяСсылка();
		НачислятьАмортизациюУУ                             = Ложь;
		НачислятьАмортизациюВТекущемМесяце                 = Ложь;
		ПринятиеКУчетуОдновременноСВводомВЭксплуатациюРегл = Ложь;
		СобытиеВводВЭксплуатациюРегл                       = Справочники.СобытияОС.ПустаяСсылка();
		НачислятьАмортизациюБУ                             = Ложь;
		НачислятьАмортизациюНУ                             = Ложь;
		
		Подразделение                                      = Справочники.Подразделения.ПустаяСсылка();
		СоставОсновногоСредства                            = Справочники.ОсновныеСредства.ПустаяСсылка();
		МОЛУУ                                              = Справочники.ФизическиеЛица.ПустаяСсылка();
		СобытиеПринятиеКУчету                              = Справочники.СобытияОС.ПустаяСсылка();
		СпособНачисленияАмортизацииУУ                      = Перечисления.СпособыНачисленияАмортизацииОС.ПустаяСсылка();
		ПараметрВыработкиУУ                                = Справочники.ПараметрыВыработкиОС.ПустаяСсылка();
		ПредполагаемыйОбъемПродукцииУУ                     = 0;
		СрокПолезногоИспользованияУУ                       = 0;
		ГодоваяНормаАмортизацииУУ                          = 0;
		ГрафикАмортизацииПоГодуУУ                          = Справочники.ГодовыеГрафикиАмортизацииОС.ПустаяСсылка();
		КоэффициентУскоренияУУ                             = 0;
		ИндивидуальныйГрафикАмортизации                    = Справочники.ИндивидуальныеГрафикиАмортизации.ПустаяСсылка();
		                                        
		ПодразделениеОрганизации                           = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		МОЛБУ                                              = Справочники.ФизическиеЛица.ПустаяСсылка();
		СпособПоступления                                  = Перечисления.СпособыПоступленияАктивов;
		СпособНачисленияАмортизацииБУ                      = Перечисления.СпособыНачисленияАмортизацииОС.ПустаяСсылка();
		ПараметрВыработкиБУ                                = Справочники.ПараметрыВыработкиОС.ПустаяСсылка();
		ПредполагаемыйОбъемПродукцииБУ                     = 0;
		СрокПолезногоИспользованияБУ                       = 0;
		ГодоваяНормаАмортизацииБУ                          = 0;
		ГрафикАмортизацииПоГодуБУ                          = Справочники.ГодовыеГрафикиАмортизацииОС.ПустаяСсылка();;
		КоэффициентУскоренияБУ                             = 0;
		СчетНачисленияАмортизацииБУ                        = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СчетУчетаБУ                                        = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		
		Если НЕ ОтражатьВНалоговомУчете 
		   И ОтражатьВБухгалтерскомУчете Тогда
			СобытиеПринятиеКУчетуРегл = Справочники.СобытияОС.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // ОтразитьВСоставеМПЗПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Номенклатура".
//
Процедура НоменклатураМПЗПриИзменении(Элемент)
	
	Если НоменклатураМПЗ <> СерияМПЗ.Владелец Тогда
		СерияМПЗ = Неопределено;
	КонецЕсли; 

	Если НоменклатураМПЗ <> ХарактеристикаМПЗ.Владелец Тогда
		ХарактеристикаМПЗ = Неопределено;
	КонецЕсли;

	//Если ЗначениеНеЗаполнено(НоменклатураМПЗ) Тогда
	//	СчетУчетаМПЗБУ = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	//Иначе
	//	СчетаУчета  = ПолучитьСчетаУчетаНоменклатуры(Организация, НоменклатураМПЗ);
	//	СчетУчетаМПЗБУ = СчетаУчета.СчетУчетаБУ;
	//КонецЕсли;
	
КонецПроцедуры // МПЗПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода СчетУчетаМПЗБУ
//
Процедура СчетУчетаМПЗБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)
	
КонецПроцедуры // СчетУчетаМПЗБУОбработкаВыбора()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "ОсновныеСредства". Формирует данные в колонке "Инв. №".
//
Процедура ОСПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.ОсновныеСредства.Колонки.ИнвНомер.Видимость Тогда

		ОформлениеСтроки.Ячейки.ИнвНомер.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ИнвНомер.Текст           = ДанныеСтроки.ОсновноеСредство.Код;

	КонецЕсли;

КонецПроцедуры // ОСПриВыводеСтроки()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура вызывается по кнопке при изменении активной строки в таблице основных 
// средств, а также при переходе на закладку "Налоговый учет (УСН)".
Процедура ОтобразитьОплаты()

	ТекСтрока = ЭлементыФормы.ОсновныеСредстваДляУСН.ТекущаяСтрока;
	// Включаем отбор тех оплат, которые относятся к текущему основному средству, выбранному
	// в табличной части "ОсновныеСредстваДляУСН"

	Если ТекСтрока <> Неопределено Тогда
		// Включаем отбор ключу из текущей строки табличной части "СоставКосвенныхРасходов"
		ЭлементыФормы.Оплата.ТолькоПросмотр = Ложь;
		ЭлементыФормы.Оплата.ОтборСтрок.ОсновноеСредство.Значение = ТекСтрока.ОсновноеСредство;

	Иначе
		// Текущая строка в таблице косвенных расходов не установлена
		ЭлементыФормы.Оплата.ТолькоПросмотр = Истина;
		Если ОсновныеСредства.Количество() = 0 Тогда
			Оплата.Очистить();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОтобразитьНаправленияСписания()

Процедура ОсновныеСредстваДляУСНПриАктивизацииСтроки(Элемент)

	ОтобразитьОплаты();
	
КонецПроцедуры // ОсновныеСредстваДляУСНПриАктивизацииСтроки()

Процедура ОплатаПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если НоваяСтрока Тогда
		ЭлементыФормы.Оплата.ТекущиеДанные.ОсновноеСредство = ЭлементыФормы.Оплата.ОтборСтрок.ОсновноеСредство.Значение;
	КонецЕсли;
	
КонецПроцедуры // ОплатаПриНачалеРедактирования()

Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)

	Если Элемент.ТекущаяСтраница.Имя = "УСНУчет" Тогда
		ЭлементыФормы.Оплата.ОтборСтрок.ОсновноеСредство.Использование = Истина;
		ЭлементыФормы.Оплата.ОтборСтрок.ОсновноеСредство.Значение = Справочники.ОсновныеСредства.ПустаяСсылка();
		ОтобразитьОплаты();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеСредстваПередУдалением(Элемент, Отказ)

	Если НЕ ЗначениеНеЗаполнено(Оплата.Найти(Элемент.ТекущиеДанные.ОсновноеСредство)) Тогда
		Ответ = Вопрос("При удалении основного средства, на закладке ""Налоговый учет УСН"" будет очищена информация о его оплатах."+
		"Продожить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			КолвоЭлементовКоллекции = Оплата.Количество(); 
			Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
				ЭлементКоллекции = Оплата[КолвоЭлементовКоллекции - ОбратныйИндекс];
				Если ЭлементКоллекции.ОсновноеСредство = Элемент.ТекущиеДанные.ОсновноеСредство Тогда
					Оплата.Удалить(ЭлементКоллекции);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Отказ = Истина;
		КонецЕслИ;
	КонецЕсли;
	
КонецПроцедуры // ОсновныеСредстваПередУдалением()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	//ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	//ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	//ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	//Если НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
	//	
	//	УстановитьКнопкиПечати();
	//	
	//КонецЕсли; 
	
	
КонецПроцедуры

Процедура СтоимостьБУХозПриИзменении(Элемент)
	
	ПересчетСуммыНДСХозспособ();
	
КонецПроцедуры

Процедура СтавкаНДСПриИзменении(Элемент)
	
	ПересчетСуммыНДСХозспособ();
	
КонецПроцедуры

Процедура СтавкаНДСОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура НДСВключенВСтоимостьПриИзменении(Элемент)
	
	СтоимостьБУ = Макс( СтоимостьБУ + ?( НДСВключенВСтоимость, СуммаНДС, -СуммаНДС), 0);
	
КонецПроцедуры

// Процедура открывате журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	//ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывате журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	//ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры

