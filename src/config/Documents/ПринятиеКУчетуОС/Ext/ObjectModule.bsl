Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

// Признак того, что документ создан копированием
Перем мДокументСозданКопированием Экспорт;

Перем мУчетнаяПолитикаУпр;
Перем мУчетнаяПолитикаБух;
Перем мУчетнаяПолитикаНал;
Перем мУчетнаяПолитикаРегл;

Перем мВалютаРегламентированногоУчета;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для управленческого учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

	мСтрокаРеквизитыУпрУчета =  "Стоимость,
								|МОЛУУ,
								|СпособНачисленияАмортизацииУУ,
								|Подразделение,
								|СоставОсновногоСредства,
								|ПараметрВыработкиУУ,
								|ПредполагаемыйОбъемПродукцииУУ,
								|СрокПолезногоИспользованияУУ,
								|ГодоваяНормаАмортизацииУУ,
								|ГрафикАмортизацииПоГодуУУ,
								|ИндивидуальныйГрафикАмортизации,
								|КоэффициентУскоренияУУ,
								|НачислятьАмортизациюВТекущемМесяце,
								|НачислятьАмортизациюУУ,
								|";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

	мСтрокаРеквизитыБухУчета = "
		|СтоимостьБУ,
		|СтоимостьБУХоз,
		|СчетУчетаБУВнеоборотногоАктива,
		|ОС.ИнвентарныйНомер,
		|МОЛБУ,
		|ПодразделениеОрганизации,
		|СпособПоступления,
		|СпособНачисленияАмортизацииБУ,
		|ПараметрВыработкиБУ,
		|ПредполагаемыйОбъемПродукцииБУ,
		|СрокПолезногоИспользованияБУ,
		|ГодоваяНормаАмортизацииБУ,
		|ГрафикАмортизацииПоГодуБУ,
		|СчетУчетаБУ,
		|СчетУчетаНДС,
		|СтавкаНДС,
		|СуммаНДС,
		|СчетНачисленияАмортизацииБУ,
		|КоэффициентУскоренияБУ,
		|НачислятьАмортизациюБУ";

	мСтрокаРеквизитыНалУчета = "
		|СтоимостьНУ,
		|СтоимостьНУХоз,
		|СтоимостьПР,
		|СтоимостьПРХоз,
		|СтоимостьВР,
		|СтоимостьВРХоз,
		|СчетУчетаНУВнеоборотногоАктива,
		|СпособНачисленияАмортизацииНУ,
		|СчетУчетаНУ,
		|СчетНачисленияАмортизацииНУ,
		|СрокПолезногоИспользованияНУ,
		|СпециальныйКоэффициентНУ,
		|НачислятьАмортизациюНУ";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой ОС-1,ОС-1а,ОС-1б
// в зависимости вида и количества ОС в документе
// Возвращаемое значение:
//  Табличный документ - печатная форма акиа о приеме - передаче объекта ОС,
//  в случае ОС-1,ОС-1а либо неопредлено для ОС-1б
//
Функция ПечатьОС1(ПечатьПоДаннымУпрУчета = Истина)
	
	Если ОтразитьВСоставеМПЗ тогда
		Сообщить("Актив переквалифицирован в МПЗ. Печать формы ""ОС-1"" невозможна.");
		Возврат Неопределено;
	КонецЕсли;

	ЗапросПоШапке = Новый Запрос();
	ЗапросПоШапке.УстановитьПараметр("Ссылка", Ссылка);
	ЗапросПоШапке.УстановитьПараметр("ПечатьПоДаннымУпрУчета", ПечатьПоДаннымУпрУчета);
	
	Если ПечатьПоДаннымУпрУчета тогда
		ТекстПодразделения ="	ПринятиеКУчетуОС.Подразделение КАК Подразделение,
							|	ПринятиеКУчетуОС.Подразделение КАК ПодрПолучателя,
							|	ПринятиеКУчетуОС.Подразделение КАК Местонахождение,";
	Иначе 
		ТекстПодразделения ="	ПринятиеКУчетуОС.ПодразделениеОрганизации КАК Подразделение,
							|	ПринятиеКУчетуОС.ПодразделениеОрганизации КАК ПодрПолучателя,
							|	ПринятиеКУчетуОС.ПодразделениеОрганизации КАК Местонахождение,
							|	ПринятиеКУчетуОС.Организация,
							|	ПринятиеКУчетуОС.Организация.НаименованиеПолное  КАК ОрганизацияПолучатель,
							|	ПринятиеКУчетуОС.Организация.КодПоОКПО			 КАК ПолучательКодПоОКПО,";
	КонецЕсли;

	ТекстЗапросаПоШапке = "ВЫБРАТЬ
	|	ПринятиеКУчетуОС.Номер КАК НомерАкта,
	|	ПринятиеКУчетуОС.Дата  КАК ДатаДок,
	|	ПринятиеКУчетуОС.Дата  КАК ДатаПринятия,
	|	ПринятиеКУчетуОС.ИндивидуальныйГрафикАмортизации,
	|	ПринятиеКУчетуОС.КоэффициентУскоренияУУ КАК КоэффициентУскорения,
	|	ПринятиеКУчетуОС.МОЛУУ КАК МОЛ,
	|	ПринятиеКУчетуОС.ГодоваяНормаАмортизацииУУ КАК НормаАморт,"
	+ТекстПодразделения+"
	|	ПринятиеКУчетуОС.Ответственный,
	|	ПринятиеКУчетуОС.СерияНоменклатуры,
	|	ПринятиеКУчетуОС.Склад,
	|	ПринятиеКУчетуОС.СпособПоступления,
	|	ПринятиеКУчетуОС.СрокПолезногоИспользованияУУ КАК СрокПолезнИспПриПост,
	|	ПринятиеКУчетуОС.Стоимость,
	|	ПринятиеКУчетуОС.ХарактеристикаНоменклатуры,
	|	ПринятиеКУчетуОС.СпособНачисленияАмортизацииУУ КАК СпособАмортизации
	|ИЗ
	|	Документ.ПринятиеКУчетуОС КАК ПринятиеКУчетуОС
	|ГДЕ
	|	ПринятиеКУчетуОС.Ссылка = &Ссылка";
	
	Если Не ПечатьПоДаннымУпрУчета тогда
		ТекстЗапросаПоШапке = СтрЗаменить(ТекстЗапросаПоШапке,"УУ","БУ");
	КонецЕсли;
	ЗапросПоШапке.Текст = ТекстЗапросаПоШапке;
	
	ВыборкаПоШапкеДокумента = ЗапросПоШапке.Выполнить().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	СведенияОПоставщикеПолучателе = Неопределено;
	
	НазваниеРегистра = "СтоимостьОС";
	
	Запрос = Новый Запрос();
	
	Если ПечатьПоДаннымУпрУчета тогда
////		
		кВидуУчета			= "управленческому";
		cВидаУчета 	 	  	= "управленческого";
		кВидуУчетаПеренос 	= "управ- ленческому";
		ВалютаПечати = Константы.ВалютаУправленческогоУчета.Получить().Наименование;
////		
		СоединениеПоСчетам = "";
		СтрокиСчетов	   = "";
		
	Иначе
////		
		кВидуУчета 		 	= "бухгалтерскому";
		cВидаУчета 		 	= "бухгалтерского";
		кВидуУчетаПеренос 	= "бухгал- терскому";
		ВалютаПечати 		= Константы.ВалютаРегламентированногоУчета.Получить().Наименование;
////		
		СведенияОПоставщикеПолучателе = ПолучитьСведенияОПоставщикеПолучателе(Неопределено,
										ВыборкаПоШапкеДокумента.Организация,ВыборкаПоШапкеДокумента.ДатаДок);
		СтрокиСчетов	   = "	СчетаБухгалтерскогоУчетаОС.СчетУчета КАК СубСчет,
							  |	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации,";
		СоединениеПоСчетам = "		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&Дата,
							 |Организация = &Организация) КАК СчетаБухгалтерскогоУчетаОС
							 |		ПО ПринятиеКУчетуОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОС.ОсновноеСредство";
		Запрос.УстановитьПараметр("Организация", ВыборкаПоШапкеДокумента.Организация);
		Запрос.УстановитьПараметр("Дата", ВыборкаПоШапкеДокумента.ДатаДок);
	КонецЕсли;	

	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	ТекстЗапроса	= "ВЫБРАТЬ "
	+СтрокиСчетов+"
	|	ПринятиеКУчетуОС.НомерСтроки,
	|	ПринятиеКУчетуОС.ОсновноеСредство,
	|	ПринятиеКУчетуОС.ОсновноеСредство.Код КАК ИнвНомерУпр,
	|	ПринятиеКУчетуОС.ОсновноеСредство.ГруппаОС КАК ГруппаОС,
	|	ПринятиеКУчетуОС.ОсновноеСредство.НаименованиеПолное КАК НаименованиеОС,
	|	ПринятиеКУчетуОС.ОсновноеСредство.Изготовитель КАК Изготовитель,
	|	(ВЫРАЗИТЬ(ПринятиеКУчетуОС.ОсновноеСредство.АмортизационнаяГруппа.Порядок КАК ЧИСЛО)) + 1 КАК НомерГруппы,
	|	ПринятиеКУчетуОС.ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
	|	ПринятиеКУчетуОС.ОсновноеСредство.ДатаВыпуска КАК ГодВыпуска,
	|	ПринятиеКУчетуОС.ОсновноеСредство.КодПоОКОФ.Код КАК КодОКОФ,
	|	ВЫБОР
	|	КОГДА ПринятиеКУчетуОС.Ссылка.СписыватьПриПринятииКУчету ТОГДА ОССписанныеНаЗатраты.Стоимость
	|	ИНАЧЕ СтоимостьОС.Стоимость КОНЕЦ КАК НачСтоимость
	| ИЗ
	|	Документ.ПринятиеКУчетуОС.ОсновныеСредства КАК ПринятиеКУчетуОС
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС КАК СтоимостьОС
	|		ПО ПринятиеКУчетуОС.ОсновноеСредство = СтоимостьОС.ОсновноеСредство
	|		И ПринятиеКУчетуОС.Ссылка = СтоимостьОС.Регистратор
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОССписанныеНаЗатраты КАК ОССписанныеНаЗатраты
	|		ПО ПринятиеКУчетуОС.ОсновноеСредство = ОССписанныеНаЗатраты.ОсновноеСредство
	|		И ПринятиеКУчетуОС.Ссылка = ОССписанныеНаЗатраты.Регистратор
	|"+ СоединениеПоСчетам+	"
	| ГДЕ
	|	ПринятиеКУчетуОС.Ссылка = &Регистратор";
	
	Если не ПечатьПоДаннымУпрУчета тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"РегистрНакопления.СтоимостьОС","РегистрНакопления.СтоимостьОСБухгалтерскийУчет");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"РегистрНакопления.ОССписанныеНаЗатраты","РегистрНакопления.ОССписанныеНаЗатратыОрганизаций");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапросаПоОС = Запрос.Выполнить();
	
	Если РезультатЗапросаПоОС.Пустой() тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаПоОС = РезультатЗапросаПоОС.Выбрать();

	Если ВыборкаПоОС.Количество() = 1 Тогда

		ВыборкаПоОС.Следующий();

		ТабДокумент   = Новый ТабличныйДокумент();
		
		Если НЕ(ВыборкаПоОС.ГруппаОС = Перечисления.ГруппыОС.Здания ИЛИ
			    ВыборкаПоОС.ГруппаОС = Перечисления.ГруппыОС.Сооружения) Тогда
				
			ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПринятиеКУчетуОС_ОС1";
			Макет         = ПолучитьОбщийМакет("ОС1");
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");

		Иначе

			Макет 		   = ПолучитьОбщийМакет("ОС1а");
			ОбластьМакета  = Макет.ПолучитьОбласть("Заголовок");
			ОбластьМакета.Параметры.кВидуУчетаПеренос 	= кВидуУчетаПеренос;

		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоОС);
		
		Если НЕ(ВыборкаПоОС.ГруппаОС = Перечисления.ГруппыОС.Здания ИЛИ
			    ВыборкаПоОС.ГруппаОС = Перечисления.ГруппыОС.Сооружения) Тогда
				ОбластьМакета.Параметры.ГодВыпуска = Неопределено;
		КонецЕсли;
		
		Если СведенияОПоставщикеПолучателе <> Неопределено тогда
			ОбластьМакета.Параметры.Заполнить(СведенияОПоставщикеПолучателе);
		КонецЕсли;
		ОбластьМакета.Параметры.Валюта = ВалютаПечати;
		ОбластьМакета.Параметры.кВидуУчета 	 = кВидуУчета;
		ОбластьМакета.Параметры.cВидаУчета 	 = cВидаУчета;
		
		Если ПустаяСтрока(ВыборкаПоОС.НаименованиеОС) Тогда
			ОбластьМакета.Параметры.НаименованиеОС = СокрЛП(ВыборкаПоОС.ОсновноеСредство);
		КонецЕсли; 

		Если ПечатьПоДаннымУпрУчета тогда
			ОбластьМакета.Параметры.ИнвНомер = ВыборкаПООС.ИнвНомерУпр;
		Иначе
			ВыборкаЗаписей = РегистрыСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.ПолучитьПоследнее(ВыборкаПоШапкеДокумента.ДатаДок,
											Новый Структура("ОсновноеСредство",ВыборкаПоОС.ОсновноеСредство));
			ИнвНомерБух    = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.ИнвентарныйНомер,0);
			ОбластьМакета.Параметры.ИнвНомер = ИнвНомерБух;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

		Возврат ТабДокумент;

	Иначе // Объектов много - групповая печать.

		ОС1б_Страница1 = Новый ТабличныйДокумент();
		ОС1б_Страница2 = Новый ТабличныйДокумент();
		ОС1б_Страница3 = Новый ТабличныйДокумент();
		ОС1б_Страница4 = Новый ТабличныйДокумент();

		МакетОС1б      = ПолучитьОбщийМакет("ОС1б");
		
		Шапка1ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка1");
		Шапка2ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка2");
		Строка2ОС1б    = МакетОС1б.ПолучитьОбласть("Строка2");
		Строка2ПОС1б   = МакетОС1б.ПолучитьОбласть("Строка2П");
		Подвал2        = МакетОС1б.ПолучитьОбласть("Подвал2");
		Шапка3ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка3");
		Строка3ОС1б    = МакетОС1б.ПолучитьОбласть("Строка3");
		Строка3ПОС1б   = МакетОС1б.ПолучитьОбласть("Строка3П");
		Подвал3        = МакетОС1б.ПолучитьОбласть("Подвал3");
		Шапка4ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка4");

		Шапка1ОС1б.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
		ВыборкаПоОС.Следующий();
		Шапка1ОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ВыборкаПоОС.Сбросить();
		
		Если СведенияОПоставщикеПолучателе <> Неопределено тогда
			Шапка1ОС1б.Параметры.Заполнить(СведенияОПоставщикеПолучателе);
		КонецЕсли;
		
		ОС1б_Страница1.Вывести(Шапка1ОС1б);

		Шапка2ОС1б.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
		Шапка2ОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница2.Вывести(Шапка2ОС1б);

		Шапка3ОС1б.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
		Шапка3ОС1б.Параметры.Заполнить(ВыборкаПоОС);
		Шапка3ОС1б.Параметры.Валюта = ВалютаПечати;
		Шапка3ОС1б.Параметры.кВидуУчета = кВидуУчетаПеренос;
		ОС1б_Страница3.Вывести(Шапка3ОС1б);

		Шапка4ОС1б.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
		Шапка4ОС1б.Параметры.Заполнить(ВыборкаПоОС);
		Если СведенияОПоставщикеПолучателе <> Неопределено тогда
			Шапка4ОС1б.Параметры.Заполнить(СведенияОПоставщикеПолучателе);
		КонецЕсли;
			
		ОС1б_Страница4.Вывести(Шапка4ОС1б);

		НомПП = 0;
		ИтогНачСтоимость = 0;
		Пока ВыборкаПоОС.Следующий() Цикл

			НомПП = НомПП + 1;
			Строка2ОС1б.Параметры.Нс = НомПП;
			
			Строка2ОС1б.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
			Строка2ОС1б.Параметры.Заполнить(ВыборкаПоОС);
			Если ПустаяСтрока(ВыборкаПоОС.НаименованиеОС) Тогда
				Строка2ОС1б.Параметры.НаименованиеОС = СокрЛП(ВыборкаПоОС.ОсновноеСредство);
			КонецЕсли; 
			Если ПечатьПоДаннымУпрУчета тогда
				Строка2ОС1б.Параметры.ИнвНомер = ВыборкаПоОС.ИнвНомерУпр;
			Иначе
				ВыборкаЗаписей = РегистрыСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.ПолучитьПоследнее(ВыборкаПоШапкеДокумента.ДатаДок,
								 Новый Структура("ОсновноеСредство",ВыборкаПоОС.ОсновноеСредство));
				ИнвНомерБух    = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.ИнвентарныйНомер,0);
				Строка2ОС1б.Параметры.ИнвНомер = ИнвНомерБух;
			КонецЕсли;				
			ОС1б_Страница2.Вывести(Строка2ОС1б);
			
			ИтогНачСтоимость = ИтогНачСтоимость +ВыборкаПоОС.НачСтоимость;

			Строка3ОС1б.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
			Строка3ОС1б.Параметры.Заполнить(ВыборкаПоОС);
			ОС1б_Страница3.Вывести(Строка3ОС1б);

		КонецЦикла;

		Строка2ПОС1б.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
		Строка2ПОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница2.Вывести(Строка2ПОС1б);

		Подвал2.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
		Подвал2.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница2.Вывести(Подвал2);

		Строка3ПОС1б.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
		Строка3ПОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница3.Вывести(Строка3ПОС1б);

		Подвал3.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
		Подвал3.Параметры.Заполнить(ВыборкаПоОС);
		Подвал3.Параметры.ИтогНачСтоимость = ИтогНачСтоимость;

		ОС1б_Страница3.Вывести(Подвал3);

		ОС1б_Страница1.ВывестиГоризонтальныйРазделительСтраниц();
		ОС1б_Страница1.Вывести(ОС1б_Страница2);
		ОС1б_Страница1.ВывестиГоризонтальныйРазделительСтраниц();
		ОС1б_Страница1.Вывести(ОС1б_Страница3);
		ОС1б_Страница1.ВывестиГоризонтальныйРазделительСтраниц();
		ОС1б_Страница1.Вывести(ОС1б_Страница4);
		Возврат ОС1б_Страница1;

	КонецЕсли;

КонецФункции // ПечатьОС1()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи и проведения!");
		Возврат;
	ИначеЕсли Не Проведен Тогда
		Предупреждение("Документ можно распечатать только после его проведения!");
		Возврат;
	КонецЕсли;

	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "ОС1упр" тогда
		ТабДокумент = ПечатьОС1();
		
	ИначеЕсли ИмяМакета = "ОС1бух" тогда
		ТабДокумент = ПечатьОС1(Ложь);
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		//ТабДокумент = НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	//НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, "Принятие к учету основных средств"), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;

	Если  ОтражатьВУправленческомУчете тогда 
		СтруктураМакетов.Вставить("ОС1упр", "Форма ОС-1(упр. учет)");
	КонецЕсли;
	Если  ОтражатьВБухгалтерскомУчете тогда 
		СтруктураМакетов.Вставить("ОС1бух", "Форма ОС-1(бух. учет)");
	КонецЕсли;
	
	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;

	Если  ОтражатьВУправленческомУчете тогда 
		СписокМакетов.Добавить( "ОС1упр","Форма ОС-1(упр. учет)");
	КонецЕсли;
	Если  ОтражатьВБухгалтерскомУчете тогда 
		СписокМакетов.Добавить("ОС1бух", "Форма ОС-1(бух. учет)");
	КонецЕсли;
	
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

// Формирует структуру полей, обязательных для заполнения
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейШапки(СтруктураШапкиДокумента)

	СтруктураПолей = Новый Структура;

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		СтруктураПолей.Вставить("Номенклатура","Не указана номенклатура!");
		СтруктураПолей.Вставить("Склад");
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
		СтруктураПолей.Вставить("ОбъектСтроительства");
	КонецЕсли;

	//Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
	//   И НЕ СтруктураШапкиДокумента.ОтразитьВСоставеМПЗ Тогда
	//	СтруктураПолей.Вставить("СобытиеПринятиеКУчету");
	//	Если СтруктураШапкиДокумента.ПринятиеКУчетуОдновременноСВводомВЭксплуатацию Тогда
	//		СтруктураПолей.Вставить("СобытиеВводВЭксплуатацию");
	//	КонецЕсли;
	//КонецЕсли;
	
	Если (ОтражатьВБухгалтерскомУчете И НЕ СтруктураШапкиДокумента.ОтразитьВСоставеМПЗ) ИЛИ ОтражатьВНалоговомУчете Тогда
		СтруктураПолей.Вставить("СобытиеПринятиеКУчетуРегл");
		Если СтруктураШапкиДокумента.ПринятиеКУчетуОдновременноСВводомВЭксплуатациюРегл Тогда
			СтруктураПолей.Вставить("СобытиеВводВЭксплуатациюРегл");
		КонецЕсли;
	КонецЕсли;

	Если СтруктураШапкиДокумента.СписыватьПриПринятииКУчету ИЛИ СтруктураШапкиДокумента.НачислятьАмортизациюУУ Тогда
		СтруктураПолей.Вставить("СпособыОтраженияРасходовПоАмортизации");
	КонецЕсли;

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейШапки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Дополняет список обязательных параметров шапки
// упр. параметрами
Процедура ДополнитьОбязательныеРеквизитыШапкиУпр(Реквизиты,СтруктураШапкиДокумента)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтразитьВСоставеМПЗ Тогда
		Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "НоменклатураМПЗ,СкладМПЗ,СчетУчетаМПЗБУ";	
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства 
	 ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Прочее Тогда
		Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "Стоимость";
	КонецЕсли;

	Если НЕ СтруктураШапкиДокумента.СписыватьПриПринятииКУчету 
	   И НЕ СтруктураШапкиДокумента.ОтразитьВСоставеМПЗ Тогда

		Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СпособНачисленияАмортизацииУУ";
		
		Если СтруктураШапкиДокумента.СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СрокПолезногоИспользованияУУ";

		ИначеЕсли СтруктураШапкиДокумента.СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "ГодоваяНормаАмортизацииУУ";

		ИначеЕсли СтруктураШапкиДокумента.СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "ГодоваяНормаАмортизацииУУ,ПараметрВыработкиУУ";

		ИначеЕсли СтруктураШапкиДокумента.СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоИндивидуальномуГрафику Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "ИндивидуальныйГрафикАмортизации";

		ИначеЕсли СтруктураШапкиДокумента.СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СрокПолезногоИспользованияУУ";

		ИначеЕсли СтруктураШапкиДокумента.СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "ПредполагаемыйОбъемПродукцииУУ,ПараметрВыработкиУУ";

		ИначеЕсли СтруктураШапкиДокумента.СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СрокПолезногоИспользованияУУ,КоэффициентУскоренияУУ";

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры //  ДополнитьОбязательныеРеквизитыШапкиУпр()

// Дополняет список обязательных параметров шапки
// регл. параметрами
Процедура ДополнитьОбязательныеРеквизитыШапкиРегл(Реквизиты,СтруктураШапкиДокумента)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
		Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СтоимостьБУ,СчетУчетаБУВнеоборотногоАктива";

		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И СтруктураШапкиДокумента.НачислятьАмортизациюНУ Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СчетУчетаНУВнеоборотногоАктива";
		КонецЕсли;
		Если СуммаНДС > 0 Тогда
			Реквизиты = Реквизиты + ", СчетУчетаНДС, СтавкаНДС";
		КонецЕсли;

	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		//Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СчетУчетаБУВнеоборотногоАктива";

		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И СтруктураШапкиДокумента.НачислятьАмортизациюНУ Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СчетУчетаНУВнеоборотногоАктива";
		КонецЕсли;

	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	   И СтруктураШапкиДокумента.ОтразитьВСоставеМПЗ Тогда
		Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СчетУчетаМПЗБУ,НоменклатураМПЗ,СкладМПЗ";	
	КонецЕсли;		
	
	Если НЕ СтруктураШапкиДокумента.ОтразитьВСоставеМПЗ Тогда
		Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СчетУчетаБУ";
	КонецЕсли;	

	Если НЕ СтруктураШапкиДокумента.СписыватьПриПринятииКУчету 
	   И НЕ СтруктураШапкиДокумента.ОтразитьВСоставеМПЗ Тогда
	   
   		Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СпособНачисленияАмортизацииБУ,СчетНачисленияАмортизацииБУ";

		Если СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СрокПолезногоИспользованияБУ";

		ИначеЕсли СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "ГодоваяНормаАмортизацииБУ";

		ИначеЕсли СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "ГодоваяНормаАмортизацииБУ,ПараметрВыработкиБУ";

		ИначеЕсли СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СрокПолезногоИспользованияБУ";

		ИначеЕсли СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "ПредполагаемыйОбъемПродукцииБУ,ПараметрВыработкиБУ";

		ИначеЕсли СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СрокПолезногоИспользованияБУ,КоэффициентУскоренияБУ";

		КонецЕсли;

	КонецЕсли;
		
	//Если НЕ ((ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы) И ОтразитьВСоставеМПЗ) Тогда
	//	
	//	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СпособыОтраженияРасходовПоАмортизации";
	//	
	//КонецЕсли;
	
	//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
	//	
	//	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СчетУчетаНУ,ПорядокВключенияСтоимостиВСоставРасходовНУ";
	//	
	//	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
	//	
	//		Если НЕ СтруктураШапкиДокумента.ПрименениеПБУ18 Тогда
	//			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СтоимостьНУ";
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//	Если СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
	//		
	//		Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СпособНачисленияАмортизацииНУ,СчетНачисленияАмортизацииНУ,СрокПолезногоИспользованияНУ,СпециальныйКоэффициентНУ,СпособНачисленияАмортизацииНУ";
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения упр. реквизитов шапки
Процедура ПроверитьЗаполнениеШапкиУпр(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок)
	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
			
			ВыборкаЗаписей = РегистрыНакопления.СтроительствоОбъектовОсновныхСредств.Остатки(Дата,Новый Структура("ОбъектСтроительства",СтруктураШапкиДокумента.ОбъектСтроительства));
			ОстатокСтоимости = 0;
			Если ВыборкаЗаписей.Количество() > 0 Тогда;
				ОстатокСтоимости = ВыборкаЗаписей[0].Сумма;
			КонецЕсли;
			Требуется = СтруктураШапкиДокумента.Стоимость;
			Если Требуется > ОстатокСтоимости Тогда
				
				ОшибкаПриПроведении("По управленческому учету для объекта строительства остаток суммы меньше суммы модернизации"+ Символы.ПС + Символы.Таб +
				"Не хватает " + ?(ОстатокСтоимости > 0 , Требуется - ОстатокСтоимости, Требуется ) +
				"; Остаток " + ОстатокСтоимости +
				"; Требуется " + Требуется , Отказ,Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.СобытиеПринятиеКУчету.Представление();
	ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.СобытиеПринятиеКУчету.ВидСобытияОС,
								  Перечисления.ВидыСобытийОС.ПринятиеКУчету,
								  ПредставлениеРеквизита,Отказ);
								  
    ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.СобытиеВводВЭксплуатацию.Представление();
	ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.СобытиеВводВЭксплуатацию.ВидСобытияОС,
								  Перечисления.ВидыСобытийОС.ВводВЭксплуатацию,
								  ПредставлениеРеквизита,Отказ);
	
КонецПроцедуры

// Проверяет остаток по бухгалтерскому или налоговому учету (для объектов строительства)
Процедура ПроверитьОстаток(СтруктураШапкиДокумента, СчетУчета, Стоимость, Отказ, Заголовок, Хозрасчетный = Истина)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	Остатки.СуммаОстаток КАК Остаток
				   |ИЗ
				   |	РегистрБухгалтерии.Хозрасчетный.Остатки(
				   |		&КонецПериода,
				   |		Счет = &Счет,
				   |		&ВидыСубконто,
				   |		Организация = &Организация
				   |		    И Субконто1 = &Объект) КАК Остатки";
	Запрос.УстановитьПараметр("КонецПериода",СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("Счет",СчетУчета);
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
	Запрос.УстановитьПараметр("ВидыСубконто",ВидыСубконто);
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Объект",СтруктураШапкиДокумента.ОбъектСтроительства);
	
	ТекстУчета = "бухгалтерскому";
	
	Если НЕ Хозрасчетный Тогда
	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Хозрасчетный", "Налоговый");
		ТекстУчета = "налоговому";
	
	КонецЕсли; 
			
	Выборка = Запрос.Выполнить().Выбрать();
	Остаток = 0;
	
	Если Выборка.Следующий() Тогда
			
		Остаток = Выборка.Остаток;
			
	КонецЕсли; 
			
	Если Остаток < Стоимость Тогда
			
		ОшибкаПриПроведении("По "+ТекстУчета+" учету для объекта строительства остаток суммы меньше суммы модернизации"+ Символы.ПС + Символы.Таб +
		"Не хватает " + ?(Остаток > 0 , Стоимость - Остаток, Стоимость ) +
		"; Остаток " + Остаток +
		"; Требуется " + Стоимость, Отказ,Заголовок);
			
	КонецЕсли; 

КонецПроцедуры//ПроверитьОстаток

// Проверяет правильность заполнения регл. реквизитов шапки
//
Процедура ПроверитьЗаполнениеШапкиРегл(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) И (НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеНеЗаполнено(СтруктураШапкиДокумента.Организация) Тогда
		ОшибкаПриПроведении("Не заполнено поле Организация", Отказ,Заголовок);
	КонецЕсли;
	
	ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.СобытиеПринятиеКУчетуРегл.Представление();
	
	ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.СобытиеПринятиеКУчетуРегл.ВидСобытияОС,
								  Перечисления.ВидыСобытийОС.ПринятиеКУчету,
								  ПредставлениеРеквизита,Отказ);
								  
    ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.СобытиеВводВЭксплуатациюРегл.Представление();
								  
	ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.СобытиеВводВЭксплуатациюРегл.ВидСобытияОС,
								  Перечисления.ВидыСобытийОС.ВводВЭксплуатацию,
								  ПредставлениеРеквизита,Отказ);

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
		
		// Проверка остатков на счетах для объектов строительства
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				ПроверитьОстаток(СтруктураШапкиДокумента, СтруктураШапкиДокумента.СчетУчетаБУ,СтруктураШапкиДокумента.СтоимостьБУ, Отказ, Заголовок )
			КонецЕсли;
		КонецЕсли;
			
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			Если СтруктураШапкиДокумента.ПрименениеПБУ18 Тогда
				Если (СтруктураШапкиДокумента.СтоимостьНУ + СтруктураШапкиДокумента.СтоимостьПР + СтруктураШапкиДокумента.СтоимостьВР) = 0 Тогда
					ОшибкаПриПроведении("Не заполнены значения реквизитов ""Стоимость (НУ)"", ""Стоимость (ПР)"", ""Стоимость (ВР)""!", Отказ, Заголовок);
				Конецесли;
			КонецЕсли;
			
			// Проверка остатков на счетах для объектов строительства
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				ПроверитьОстаток(СтруктураШапкиДокумента, СтруктураШапкиДокумента.СчетУчетаНУ,СтруктураШапкиДокумента.СтоимостьНУ, Отказ, Заголовок,   Ложь)
			КонецЕсли;
				
		КонецЕсли;
			
		
	КонецЕсли;
								  
	// Проверим, не превышает ли допустимую величину процент капитальных вложений, включаемых в состав расходов.
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете
	   И НЕ СтруктураШапкиДокумента.СписыватьПриПринятииКУчету
	   И НЕ ЗначениеНеЗаполнено(СтруктураШапкиДокумента.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ) Тогда
		
		Если СтруктураШапкиДокумента.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ > 10 Тогда
			ОшибкаПриПроведении("Налог. учет: Процент капитальных вложений, включаемых в состав расходов, превышает 10% от первоначальной стоимости!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
								  
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок)

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "";

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование
	 И СтруктураШапкиДокумента.СписыватьПриПринятииКУчету Тогда
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "СпособыОтраженияРасходовПоАмортизации";
	КонецЕсли;

	Если СтруктураШапкиДокумента.ПринятиеКУчетуОдновременноСВводомВЭксплуатацию Тогда
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "СобытиеВводВЭксплуатацию";
	КонецЕсли;

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "ОбъектСтроительства";
	КонецЕсли;

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "Номенклатура, Склад";
	КонецЕсли;

	ДополнитьОбязательныеРеквизитыШапкиУпр(ОбязательныеРеквизитыШапки,СтруктураШапкиДокумента);
	ДополнитьОбязательныеРеквизитыШапкиРегл(ОбязательныеРеквизитыШапки,СтруктураШапкиДокумента);

	//НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, ОбязательныеРеквизитыШапки, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);

	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);

	// Теперь вызовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	ПроверитьЗаполнениеШапкиУпр(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеШапкиРегл(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры

// Проверка реквизитов в ТЧ по упр. учету
// 
Процедура ПроверкаРеквизитовТЧУпр(РежимПроведения,ТаблицаПоОС,СтруктураШапкиДокумента,Отказ, Заголовок)
	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
			// Проверка осатков при оперативном проведении.
			ТоварыНаСкладах = 0;
			ТоварыВРезервеНаСкладах = 0;
			ТоварыКПередачеСоСкладов = 0;
			
			СтруктураПолей = Новый Структура;
			СтруктураПолей.Вставить("Склад", СтруктураШапкиДокумента.Склад);
			СтруктураПолей.Вставить("Номенклатура", СтруктураШапкиДокумента.Номенклатура);
			СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", СтруктураШапкиДокумента.ХарактеристикаНоменклатуры);
			СтруктураПолей.Вставить("СерияНоменклатуры", СтруктураШапкиДокумента.СерияНоменклатуры);
			СтруктураПолей.Вставить("Качество", Справочники.Качество.Новый);
			
			ВыборкаЗаписей = РегистрыНакопления.ТоварыНаСкладах.Остатки(Дата,СтруктураПолей);
			Если ВыборкаЗаписей.Количество() > 0 Тогда;
				ТоварыНаСкладах = ВыборкаЗаписей.Итог("Количество");
			КонецЕсли;
			
			СтруктураПолей = Новый Структура;
			СтруктураПолей.Вставить("Склад", СтруктураШапкиДокумента.Склад);
			СтруктураПолей.Вставить("Номенклатура", СтруктураШапкиДокумента.Номенклатура);
			СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", СтруктураШапкиДокумента.ХарактеристикаНоменклатуры);
			ВыборкаЗаписей = РегистрыНакопления.ТоварыВРезервеНаСкладах.Остатки(Дата,СтруктураПолей);
			Если ВыборкаЗаписей.Количество() > 0 Тогда;
				ТоварыВРезервеНаСкладах = ВыборкаЗаписей[0].Количество;
			КонецЕсли;
			
			ВыборкаЗаписей = РегистрыНакопления.ТоварыКПередачеСоСкладов.Остатки(Дата,СтруктураПолей);
			Если ВыборкаЗаписей.Количество() > 0 Тогда;
				ТоварыКПередачеСоСкладов = ВыборкаЗаписей[0].Количество;
			КонецЕсли;
			
			Если ТоварыНаСкладах - (ТоварыВРезервеНаСкладах + ТоварыКПередачеСоСкладов) < ТаблицаПоОС.Количество() Тогда
				
				СтрокаСообщения = ?(ТоварыВРезервеНаСкладах > 0, "Свободного остатка ", "Остатка ") + 
				ПредставлениеНоменклатуры(СтруктураШапкиДокумента.Номенклатура.Наименование, 
				СтруктураШапкиДокумента.ХарактеристикаНоменклатуры.Наименование,
				СтруктураШапкиДокумента.СерияНоменклатуры.Наименование) +									  
				" на складе """ + СокрЛП(СтруктураШапкиДокумента.Склад) +
				""" недостаточно.";
				
				ОшибкаНетОстатка(СтрокаСообщения, ТоварыНаСкладах - (ТоварыВРезервеНаСкладах + ТоварыКПередачеСоСкладов), ТаблицаПоОС.Количество(),
				СтруктураШапкиДокумента.Номенклатура.ЕдиницаХраненияОстатков.Наименование, Отказ, Заголовок);
				Сообщить("Зарезервировано " + (ТоварыВРезервеНаСкладах + ТоварыКПередачеСоСкладов) + " " + СтруктураШапкиДокумента.Номенклатура.ЕдиницаХраненияОстатков.Наименование);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.НачислятьАмортизациюУУ Тогда
		Для каждого строка из ТаблицаПоОС Цикл
			Если Строка.ОсновноеСредство.ПодлежитАмортизации = Ложь Тогда
				Сообщить("Для основного средства "+Строка.ОсновноеСредство.Наименование + " в справочнике не установлен признак того, что оно подлежит амортизации.",СтатусСообщения.Внимание);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Проверка реквизитов в ТЧ по регл. учету
// 
Процедура ПроверкаРеквизитовТЧРегл(РежимПроведения,ТаблицаПоОС,СтруктураШапкиДокумента,Отказ, Заголовок)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) И (НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
		Возврат;
	КонецЕсли;
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
			ТоварыОрганизаций =0;
			// Проверка осатков при оперативном проведении.
			СтруктураПолей = Новый Структура;
			СтруктураПолей.Вставить("Организация", СтруктураШапкиДокумента.Организация);
			СтруктураПолей.Вставить("Номенклатура", СтруктураШапкиДокумента.Номенклатура);
			СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", СтруктураШапкиДокумента.ХарактеристикаНоменклатуры);
			СтруктураПолей.Вставить("СерияНоменклатуры", СтруктураШапкиДокумента.СерияНоменклатуры);
			СтруктураПолей.Вставить("Качество", Справочники.Качество.Новый);
			
			ВыборкаЗаписей = РегистрыНакопления.ТоварыОрганизаций.Остатки(Дата,СтруктураПолей);
			Если ВыборкаЗаписей.Количество() > 0 Тогда;
				ТоварыОрганизаций = ВыборкаЗаписей.Итог("Количество");
			КонецЕсли;
			Если ТоварыОрганизаций < ТаблицаПоОС.Количество() Тогда
				
				СтрокаСообщения = ?(ТоварыОрганизаций > 0, "Остатка по организации ", "Остатка ") + 
				ПредставлениеНоменклатуры(СтруктураШапкиДокумента.Номенклатура.Наименование, 
				СтруктураШапкиДокумента.ХарактеристикаНоменклатуры.Наименование,
				СтруктураШапкиДокумента.СерияНоменклатуры.Наименование) +									  
				" на складе """ + СокрЛП(СтруктураШапкиДокумента.Склад) +
				""" недостаточно.";
				
				//Если НЕ РазрешеноПревышениеОстаткаТоваровОрганизации(СтруктураШапкиДокумента.Организация) Тогда
				//	ОшибкаНетОстатка(СтрокаСообщения, ТоварыОрганизаций, ТаблицаПоОС.Количество(),
				//	СтруктураШапкиДокумента.Номенклатура.ЕдиницаХраненияОстатков.Наименование, Отказ, Заголовок);
				//Иначе
				//	СтрокаСообщения = СтрокаСообщения + Символы.ПС + Символы.Таб
				//	+ "Не хватает " + (ТаблицаПоОС.Количество() - ТоварыОрганизаций) + " " + СтруктураШапкиДокумента.Номенклатура.ЕдиницаХраненияОстатков.Наименование
				//	+ "; Остаток " + ТоварыОрганизаций + " " + СтруктураШапкиДокумента.Номенклатура.ЕдиницаХраненияОстатков.Наименование
				//	+ "; Требуется " + ТаблицаПоОС.Количество() + " " + СтруктураШапкиДокумента.Номенклатура.ЕдиницаХраненияОстатков.Наименование;
				//	СообщитьОбОшибке(СтрокаСообщения);
				//КонецЕсли;
				
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиОплата(ТаблицаПоСтрокам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОсновноеСредство, ДатаОплаты, СуммаОплаты");

	// Теперь вызовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Оплата", СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Дополняет список обязательных параметров табл. части
// упр. параметрами
Процедура ДополнитьОбязательныеРеквизитыТабОСУпр(Реквизиты)

	//Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СтоимостьУУ";

КонецПроцедуры

// Дополняет список обязательных параметров табл. части
// регл. параметрами
Процедура ДополнитьОбязательныеРеквизитыТабОСРегл(Реквизиты)

	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "ИнвентарныйНомер";

КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(РежимПроведения,ТаблицаОС,СтруктураШапкиДокумента,Отказ, Заголовок) Экспорт

	Если ТаблицаОС.Количество()= 0 тогда
		Отказ = Истина;
		ОшибкаПриПроведении( "Табличная часть ""Основные средства"" пуста" , Отказ, Заголовок);
		Возврат;
	КонецЕсли;
	
	РеквизитыТабОС = "ОсновноеСредство"; //через запятую
	ДополнитьОбязательныеРеквизитыТабОСУпр(РеквизитыТабОС);
	ДополнитьОбязательныеРеквизитыТабОСРегл(РеквизитыТабОС);
	//НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабОС, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "ОС");
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОсновныеСредства", Новый Структура(РеквизитыТабОС), Отказ, Заголовок);

	// Логические проверки
	ПроверкаРеквизитовТЧУпр(РежимПроведения,ТаблицаОС,СтруктураШапкиДокумента,Отказ, Заголовок);
	ПроверкаРеквизитовТЧРегл(РежимПроведения,ТаблицаОС,СтруктураШапкиДокумента,Отказ, Заголовок);
	
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		Для Каждого СтрокаТЧ Из ТаблицаОС Цикл
			Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете тогда
				ПроверитьВозможностьПринятияКУчетуОС(СтрокаТЧ.ОсновноеСредство,СтруктураШапкиДокумента.Дата,Отказ);
			КонецЕсли;
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете тогда
				ПроверитьВозможностьПринятияКУчетуОС(СтрокаТЧ.ОсновноеСредство,СтруктураШапкиДокумента.Дата,Отказ,СтруктураШапкиДокумента.Организация) 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ПроверкаРеквизитов()

// Процедура формирования движений регистров
//
Процедура ФормированиеДвижений(РежимПроведения,СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаОплат, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		
		ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоОС);
		
		ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
		
		Если СтруктураШапкиДокумента.СписыватьПриПринятииКУчету Тогда
			НаборДвиженийУпр = Движения.ОССписанныеНаЗатраты;
			//НаборДвиженийБух = Движения.ОССписанныеНаЗатратыОрганизаций;
			//НаборДвиженийНал = Движения.ОССписанныеНаЗатратыОрганизаций;
		Иначе
			НаборДвиженийУпр = Движения.СтоимостьОС;
			//НаборДвиженийБух = Движения.СтоимостьОСБухгалтерскийУчет;
			//НаборДвиженийНал = Движения.СтоимостьОСНалоговыйУчет;
		КонецЕсли;
		
		НаборДвиженийУпр.Прочитать();
		//НаборДвиженийБух.Прочитать();
		//НаборДвиженийНал.Прочитать();

		МассивКоэф = Новый Массив(ТаблицаПоОС.Количество());
		Для К = 0 По МассивКоэф.ВГраница() Цикл
			МассивКоэф[К] = 1;
		КонецЦикла;
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			СуммаУпр = НаборДвиженийУпр.Итог("Стоимость");
			МассивСуммУпр = РаспределитьПропорционально(СуммаУпр, МассивКоэф, 2);
		КонецЕсли;
		//Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		//	СуммаБух = НаборДвиженийБух.Итог("Стоимость");
		//	МассивСуммБух = РаспределитьПропорционально(СуммаБух, МассивКоэф, 2);
		//КонецЕсли;
		//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		//	СуммаНал = НаборДвиженийНал.Итог("Стоимость");
		//	МассивСуммНал = РаспределитьПропорционально(СуммаНал, МассивКоэф, 2);
		//КонецЕсли;
		
		Для К = 0 По МассивКоэф.ВГраница() Цикл
			Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
				Если НЕ МассивСуммУпр = Неопределено Тогда
					ТаблицаПоОС[К].СуммаОС_УУ = МассивСуммУпр[К];
				КонецЕсли;
			КонецЕсли;
			//Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			//	Если НЕ МассивСуммБух = Неопределено Тогда
			//		ТаблицаПоОС[К].СуммаОС_БУ = МассивСуммБух[К];
			//	КонецЕсли;
			//КонецЕсли;
			//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			//	Если НЕ МассивСуммНал = Неопределено Тогда
			//		ТаблицаПоОС[К].СуммаОС_НУ = МассивСуммНал[К];
			//	КонецЕсли;
			//КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		ДвиженияПоРегиструТоварыОрганизаций(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ);
		Если Отказ тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ФормированиеДвиженийУпр(РежимПроведения,СтруктураШапкиДокумента,  ТаблицаПоОС, Отказ, Заголовок);
	//ФормированиеДвиженийРегл(РежимПроведения,СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаОплат, Отказ, Заголовок);

КонецПроцедуры // ФормированиеДвижений()


Процедура ЗаполнитьКолонкиРегистраСписанныеТовары(ТаблицаДвижений, СтруктураШапкиДокумента)

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Номенклатура,   "Номенклатура");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ХарактеристикаНоменклатуры,   "ХарактеристикаНоменклатуры");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СерияНоменклатуры,   "СерияНоменклатуры");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,   "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(1,   "Количество");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,   "Склад");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый,   "Качество");
//	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Оборудование,   "ДопустимыйСтатус1");
	
//	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива,   "СчетУчетаБУ");
//	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива,   "СчетУчетаНУ");
//	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаБУ,   "КорСчетБУ");
//	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаНУ,   "КорСчетНУ");

КонецПроцедуры

Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоОС);

	НаборДвижений = Движения.СписанныеТовары;
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	Инд = 0;

	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете или СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ТаблицаДвижений.Очистить();
		// Заполним таблицу движений.
		
		Для каждого Строка  Из ТаблицаПоОС Цикл
		
			Движение = ТаблицаДвижений.Добавить();
			Инд = Инд+1;
			Движение.НомерСтрокиДокумента = Инд;
			Движение.ОсновноеСредство = Строка.ОсновноеСредство;
		//	Движение.КорСубконтоБУ1   = Строка.ОсновноеСредство;
			
		КонецЦикла;
		
		ЗаполнитьКолонкиРегистраСписанныеТовары(ТаблицаДвижений, СтруктураШапкиДокумента);
		
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВУправленческомУчете,   "ОтражатьВУправленческомУчете");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,   "ОтражатьВБухгалтерскомУчете");
		
		Если СтруктураШапкиДокумента.СписыватьПриПринятииКУчету Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПринятиеКУчетуОССоСписаниемНаЗатраты,   "КодОперацииПартииТоваров");
		Иначе
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПринятиеКУчетуОС,   "КодОперацииПартииТоваров");
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтразитьВСоставеМПЗ Тогда
			
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ВключениеАктиваВСоставМПЗ,   "КодОперацииПартииТоваров");
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.НоменклатураМПЗ,   "НоменклатураНовая");
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ХарактеристикаМПЗ,   "ХарактеристикаНоменклатурыНовая");
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СерияМПЗ,   "СерияНоменклатурыНовая");
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СкладМПЗ,   "СкладПолучатель");
		//	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаМПЗБУ,   "КорСчетБУ");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,   "ДокументОприходованияНовый");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,   "ИзменитьСерию");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,   "ИзменитьХарактеристику");
			
		КонецЕсли;

		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		Движения.СписанныеТовары.ВыполнитьДвижения();
	
	КонецЕсли;
	
	//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
	//	
	//	ТаблицаДвижений.Очистить();
	//	
	//	Для каждого Строка  Из ТаблицаПоОС Цикл
	//		
	//		Движение = ТаблицаДвижений.Добавить();
	//		Инд = Инд+1;
	//		Движение.НомерСтрокиДокумента = Инд;
	//		Движение.ОсновноеСредство = Строка.ОсновноеСредство;
	//		Движение.КорСубконтоБУ1   = Строка.ОсновноеСредство;
	//		
	//	КонецЦикла;
	//	
	//	ПорядокВключенияСтоимости = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ;
	//	
	//	Если СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = ПорядокВключенияСтоимости.ВключениеВРасходыПриПринятииКУчету тогда
	//		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПринятиеКУчетуОССоСписаниемНаЗатраты,   "КодОперацииПартииТоваров");
	//	Иначе
	//		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПринятиеКУчетуОС,   "КодОперацииПартииТоваров");
	//	КонецЕсли;

	//	ЗаполнитьКолонкиРегистраСписанныеТовары(ТаблицаДвижений, СтруктураШапкиДокумента);
	//	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,   "ОтражатьВНалоговомУчете");

	//	НаборДвижений.мПериод          = Дата;
	//	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	//	Движения.СписанныеТовары.ВыполнитьДвижения();
	//
	//КонецЕсли;
	//
	//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
	//	
	//	ТаблицаДвижений.Очистить();
	//	
	//	Для каждого Строка  Из ТаблицаПоОС Цикл
	//		
	//		Движение = ТаблицаДвижений.Добавить();
	//		Инд = Инд+1;
	//		Движение.НомерСтрокиДокумента = Инд;
	//		Движение.ОсновноеСредство = Строка.ОсновноеСредство;
	//		Движение.КорСубконтоБУ1   = Строка.ОсновноеСредство;
	//		
	//	КонецЦикла;
	//	
	//	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПринятиеКУчетуОС,  "КодОперацииПартииТоваров");
	//	
	//	ЗаполнитьКолонкиРегистраСписанныеТовары(ТаблицаДвижений, СтруктураШапкиДокумента);
	//	
	//	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН,   	"ОтражатьВНалоговомУчете");
	//	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива,   "СчетУчетаНУ");
	//	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаБУ,   					"КорСчетНУ");

	//	НаборДвижений.мПериод          = Дата;
	//	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	//	Движения.СписанныеТовары.ВыполнитьДвижения();
	//
	//КонецЕсли;
	
	Движения.СписанныеТовары.Записать(Истина);

КонецПроцедуры // ДвиженияПоРегиструСписанныеТовары()

// Процедура формирования движений упр. регистров
//
Процедура ФормированиеДвиженийУпр(РежимПроведения,СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ДатаДока   = Дата;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		
		НаборДвижений = Движения.ТоварыНаСкладах;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		
		// Заполним таблицу движений.
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.Склад = СтруктураШапкиДокумента.Склад;
		СтрокаДвижений.Номенклатура = СтруктураШапкиДокумента.Номенклатура;
		СтрокаДвижений.ХарактеристикаНоменклатуры = СтруктураШапкиДокумента.ХарактеристикаНоменклатуры;
		СтрокаДвижений.СерияНоменклатуры = СтруктураШапкиДокумента.СерияНоменклатуры;
		СтрокаДвижений.Качество = Справочники.Качество.Новый;
		СтрокаДвижений.Количество = ТаблицаПоОС.Количество();
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		//---------------------------------------------
		Если Не Отказ Тогда
			Движения.ТоварыНаСкладах.ВыполнитьРасход();
		Иначе
			Возврат;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.СписыватьПриПринятииКУчету Тогда
			
			ТаблицаОССписанныхНаЗатратыУпр = ТаблицаПоОС.Скопировать();
			ТаблицаОССписанныхНаЗатратыУпр.Колонки.СуммаОС_УУ.Имя = "Сумма";
			ТаблицаОССписанныхНаЗатратыУпр.Колонки.ОсновноеСредство.Имя = "ОбъектУчета";
			ТаблицаОССписанныхНаЗатратыУпр.Свернуть("ОбъектУчета", "Сумма");
			
			ТаблицаОССписанныхНаЗатратыУпр.Колонки.Добавить("НаправлениеАмортизации");
			ТаблицаОССписанныхНаЗатратыУпр.ЗаполнитьЗначения(СтруктураШапкиДокумента.СпособыОтраженияРасходовПоАмортизации, "НаправлениеАмортизации");
			
			// далее нужно распределить суммы по направлениям начисления амортизации
			ТабЗатрат = ПолучитьРаспределениеАмортизацииПоНаправлениямУпр(ЭтотОбъект, Отказ, Заголовок, ТаблицаОССписанныхНаЗатратыУпр, СтруктураШапкиДокумента);
			
		КонецЕсли;
		
		НоменклатураОС = Движения.НоменклатураОсновныхСредств;
		
		Для Каждого Строка Из ТаблицаПоОС Цикл
			
			Движение = НоменклатураОС.Добавить();
			
			Движение.Период           = ДатаДока;
			Движение.ОсновноеСредство = Строка.ОсновноеСредство;
			Движение.Номенклатура     = СтруктураШапкиДокумента.Номенклатура;
			Движение.Характеристика   = СтруктураШапкиДокумента.ХарактеристикаНоменклатуры;
			
		КонецЦикла;
		
	ИначеЕсли НЕ СтруктураШапкиДокумента.ОтразитьВСоставеМПЗ Тогда
		// не оборудование
		
		// движения по регистру АмортизацияОС
		АмортизацияОС               = Движения.СтоимостьОС;
		ТаблицаДвиженийАмортизация  = АмортизацияОС.Выгрузить();
		
		Для Каждого Строка Из ТаблицаПоОС Цикл
			
			ТекОС = Строка.ОсновноеСредство;
			
			// Движения по регистру СтоимостьОС
			Движение = ТаблицаДвиженийАмортизация.Добавить();
			
			Движение.ОсновноеСредство = ТекОС;
			Движение.Амортизация      = 0;
			Движение.Стоимость        = Строка.СуммаОС_УУ;
			
		КонецЦикла;
		
		АмортизацияОС.мПериод = ДатаДока;
		АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
		Движения.СтоимостьОС.ВыполнитьПриход();
		
	КонецЕсли;
	
	// спишем сумму с регистра объектов строительства
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
		
		СтроительствоОС = Движения.СтроительствоОбъектовОсновныхСредств;
		
		ТаблицаДвиженийСтроительствоОС = СтроительствоОС.Выгрузить();
		
		Движение = ТаблицаДвиженийСтроительствоОС.Добавить();
		Движение.ОбъектСтроительства = СтруктураШапкиДокумента.ОбъектСтроительства;
		Движение.Сумма               = СтруктураШапкиДокумента.Стоимость;
		
		СтроительствоОС.мПериод = ДатаДока;
		СтроительствоОС.мТаблицаДвижений = ТаблицаДвиженийСтроительствоОС;
		Движения.СтроительствоОбъектовОсновныхСредств.ВыполнитьРасход();
		
		Если СтруктураШапкиДокумента.ОтразитьВСоставеМПЗ Тогда	
			
			///////////////////////////////////////////////////////////////
			// Движения по регистру ПартииТоваровНаСкладахУправленческийУчет
			НаборДвижений = Движения.ПартииТоваровНаСкладах;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвиженийПартииТоваровНаСкладах = НаборДвижений.Выгрузить();
			ТаблицаДвиженийПартииТоваровНаСкладах.Очистить();
			ТаблицаДвижений = ТаблицаДвиженийПартииТоваровНаСкладах.Скопировать();
			
			Движение = ТаблицаДвижений.Добавить();
			
			// измерения
			Движение.Номенклатура                 = СтруктураШапкиДокумента.НоменклатураМПЗ;
			
			Если мУчетнаяПолитикаУпр.ВестиПартионныйУчетПоСкладам тогда
				Движение.Склад                        = СтруктураШапкиДокумента.СкладМПЗ;
			Иначе
				Движение.Склад                        = Неопределено;
			КонецЕсли;
			
			Если мУчетнаяПолитикаУпр.СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней тогда
				Движение.ДокументОприходования        = Ссылка;
			Иначе
				Движение.ДокументОприходования        = Неопределено;
			КонецЕсли;
			
			Движение.ХарактеристикаНоменклатуры   = СтруктураШапкиДокумента.ХарактеристикаМПЗ;
			
			Если СтруктураШапкиДокумента.НоменклатураМПЗ.ВестиПартионныйУчетПоСериям тогда
				Движение.СерияНоменклатуры            = СтруктураШапкиДокумента.СерияМПЗ;
			Иначе
				Движение.СерияНоменклатуры            = Неопределено;
			КонецЕсли;
			
			Движение.СтатусПартии                 = Перечисления.СтатусыПартийТоваров.Купленный;
			
			Движение.Качество                     = Справочники.Качество.Новый;
			
			// Ресурсы
			Движение.Количество = ТаблицаПоОС.Количество();
			Движение.Стоимость = СтруктураШапкиДокумента.Стоимость;
			
			// Реквизиты
			Движение.КодОперации             = Перечисления.КодыОперацийПартииТоваров.ВключениеАктиваВСоставМПЗ;
			НаборДвижений.мПериод            = ДатаДока;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.ПартииТоваровНаСкладах.ВыполнитьПриход();
			КонецЕсли;
			
			// Движения по регистру ПартииТоваровНаСкладахУправленческийУчет
			///////////////////////////////////////////////////////////////
		КонецЕсли;//Если СтруктураШапкиДокумента.ОтразитьВСоставеМПЗ Тогда	

	КонецЕсли;//Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда

	Если НЕ СтруктураШапкиДокумента.ОтразитьВСоставеМПЗ Тогда	
		
		// движения по регистрам, общим для всех видов операции
//		ГрафикиАмортизацииОС   = Движения.ГрафикиАмортизацииОС;
		МестонахождениеОС      = Движения.МестонахождениеОС;
	НаправлениеАмортизации = Движения.СпособыОтраженияРасходовПоАмортизацииОС;
		НачислениеАмортизации  = Движения.НачислениеАмортизацииОС;
		ПервоначальныеСведения = Движения.ПервоначальныеСведенияОС;
		ПараметрыАмортизации   = Движения.ПараметрыАмортизацииОС;
		СобытиеОС              = Движения.СобытияОС;
		СостояниеОС            = Движения.СостоянияОС;
		СоставОС               = Движения.СоставОС;
		
		
		Для Каждого Строка Из ОсновныеСредства Цикл
			
			ТекОС = Строка.ОсновноеСредство;
			СтрокаТабОС = ТаблицаПоОС.Найти( ТекОС, "ОсновноеСредство");
			
			// Движения по регистру ГрафикиАмортизацииОС
			//Движение = ГрафикиАмортизацииОС.Добавить();
			//Движение.Период                      = ДатаДока;
			//Движение.ОсновноеСредство            = ТекОС;
			//
			//Если СтруктураШапкиДокумента.СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоИндивидуальномуГрафику Тогда
			//	ТекГрафик = СтруктураШапкиДокумента.ИндивидуальныйГрафикАмортизации;
			//Иначе
			//	ТекГрафик = СтруктураШапкиДокумента.ГрафикАмортизацииПоГодуУУ;
			//КонецЕсли;
			//Движение.ГрафикАмортизации           = ТекГрафик;
			
			// Движения по регистру МестонахождениеОС
			Движение = МестонахождениеОС.Добавить();
			Движение.Период                      = ДатаДока;
			Движение.ОсновноеСредство            = ТекОС;
			Движение.Местонахождение             = СтруктураШапкиДокумента.Подразделение;
			Движение.МОЛ                         = СтруктураШапкиДокумента.МОЛУУ;
			
			 //Движения по регистру СпособыОтраженияРасходовПоАмортизацииОС
			Движение = НаправлениеАмортизации.Добавить();
			Движение.Период                      = ДатаДока;
			Движение.ОсновноеСредство            = ТекОС;
			Движение.СпособыОтраженияРасходовПоАмортизации = СтруктураШапкиДокумента.СпособыОтраженияРасходовПоАмортизации;
			//
			// Движения по регистру НачислениеАмортизации
			Движение = НачислениеАмортизации.Добавить();
			Движение.Период                      = ДатаДока;
			Движение.ОсновноеСредство            = ТекОС;
			Движение.НачислятьАмортизацию        = СтруктураШапкиДокумента.НачислятьАмортизациюУУ;
			Движение.НачислятьАмортизациюВТекущемМесяце = СтруктураШапкиДокумента.НачислятьАмортизациюВТекущемМесяце;
			
			// Движения по регистру ПервоначальныеСведенияОС
			Движение = ПервоначальныеСведения.Добавить();
			Движение.Период                      = ДатаДока;
			Движение.ОсновноеСредство            = ТекОС;
			Движение.ПервоначальнаяСтоимость     = СтрокаТабОС.СуммаОС_УУ;
			Движение.СпособНачисленияАмортизации = СтруктураШапкиДокумента.СпособНачисленияАмортизацииУУ;
			Движение.ПараметрВыработки = СтруктураШапкиДокумента.ПараметрВыработкиУУ;
			
			// Движения по регистру ПараметрыАмортизации
			Если Не СписыватьПриПринятииКУчету Тогда
				Движение = ПараметрыАмортизации.Добавить();
				Движение.Период                      = ДатаДока;
				Движение.ОсновноеСредство            = ТекОС;
				Движение.КоэффициентАмортизации      = СтруктураШапкиДокумента.ГодоваяНормаАмортизацииУУ;
				Движение.КоэффициентУскорения        = СтруктураШапкиДокумента.КоэффициентУскоренияУУ;
				Движение.ОбъемПродукцииРабот         = СтруктураШапкиДокумента.ПредполагаемыйОбъемПродукцииУУ;
				Движение.ПрименитьВТекущемМесяце     = СтруктураШапкиДокумента.НачислятьАмортизациюВТекущемМесяце;
				Движение.СрокПолезногоИспользования  = СтруктураШапкиДокумента.СрокПолезногоИспользованияУУ;
				Движение.СрокИспользованияДляВычисленияАмортизации   = СтруктураШапкиДокумента.СрокПолезногоИспользованияУУ;
				Движение.СтоимостьДляВычисленияАмортизации           = СтрокаТабОС.СуммаОС_УУ;
				Движение.ОбъемПродукцииРаботДляВычисленияАмортизации = СтруктураШапкиДокумента.ПредполагаемыйОбъемПродукцииУУ;
			КонецЕсли;
			
			// Движения по регистру СобытиеОС
			Движение = СобытиеОС.Добавить();
			Движение.Период                      = ДатаДока;
			Движение.ОсновноеСредство            = ТекОС;
			Движение.Событие                     = СтруктураШапкиДокумента.СобытиеПринятиеКУчету;
			Движение.НазваниеДокумента 		   	 = Метаданные().Представление();
			Движение.НомерДокумента    		   	 = Номер;
			
			Если СтруктураШапкиДокумента.ПринятиеКУчетуОдновременноСВводомВЭксплуатацию Тогда
				Движение = СобытиеОС.Добавить();
				Движение.Период                  = ДатаДока;
				Движение.ОсновноеСредство        = ТекОС;
				Движение.Событие                 = СтруктураШапкиДокумента.СобытиеВводВЭксплуатацию;
				Движение.НазваниеДокумента 		 = Метаданные().Представление();
				Движение.НомерДокумента    		 = Номер;
			КонецЕсли;
			
			// Движения по регистру СостоянияОС
			Движение = СостояниеОС.Добавить();
			Движение.Период                      = ДатаДока;
			Движение.ОсновноеСредство            = ТекОС;
			Движение.Состояние                   = Перечисления.СостоянияОС.ПринятоКУчету;
			Движение.ДатаСостояния				 = ДатаДока;
			
			Если СтруктураШапкиДокумента.ПринятиеКУчетуОдновременноСВводомВЭксплуатацию Тогда
				
				Движение = СостояниеОС.Добавить();
				Движение.Период                      = ДатаДока;
				Движение.ОсновноеСредство            = ТекОС;
				Движение.Состояние                   = Перечисления.СостоянияОС.ВведеноВЭксплуатацию;
				Движение.ДатаСостояния				 = ДатаДока;
				
			КонецЕсли;
			
			
			// Движения по регистру СоставОС
			Движение = СоставОС.Добавить();
			Движение.Период                      = ДатаДока;
			Движение.ОсновноеСредство            = ТекОС;
			Движение.ВСоставе                    = СтруктураШапкиДокумента.СоставОсновногоСредства;
			
		КонецЦикла;
		
	Иначе
		
		НаборДвижений = Движения.ТоварыНаСкладах;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		// Заполним таблицу движений.
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.Склад = СтруктураШапкиДокумента.СкладМПЗ;
		СтрокаДвижений.Номенклатура = СтруктураШапкиДокумента.НоменклатураМПЗ;
		СтрокаДвижений.ХарактеристикаНоменклатуры = СтруктураШапкиДокумента.ХарактеристикаМПЗ;
		СтрокаДвижений.СерияНоменклатуры = СтруктураШапкиДокумента.СерияМПЗ;
		СтрокаДвижений.Качество = Справочники.Качество.Новый;
		СтрокаДвижений.Количество = ТаблицаПоОС.Количество();
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.ТоварыНаСкладах.ВыполнитьПриход();
		КонецЕсли;
		
		
	КонецЕсли;
	
	
КонецПроцедуры // ФормированиеДвиженийУпр()

Процедура ДвиженияПоРегистрамСобытийИСостоянийРегл(СтруктураШапкиДокумента, СобытиеОС, СостояниеОС, ТекОС, ДатаДока)
	
	// Движения по регистру СобытияОСОрганизаций
	Движение = СобытиеОС.Добавить();
	Движение.Период                    = ДатаДока;
	Движение.ОсновноеСредство          = ТекОС;
	Движение.Организация               = СтруктураШапкиДокумента.Организация;
	Движение.Событие                   = СтруктураШапкиДокумента.СобытиеПринятиеКУчетуРегл;
	Движение.НазваниеДокумента 		   = Метаданные().Представление();
	Движение.НомерДокумента    		   = Номер;

	Если СтруктураШапкиДокумента.ПринятиеКУчетуОдновременноСВводомВЭксплуатациюРегл Тогда

		Движение = СобытиеОС.Добавить();
		Движение.Период                = ДатаДока;
		Движение.ОсновноеСредство      = ТекОС;
		Движение.Организация           = СтруктураШапкиДокумента.Организация;
		Движение.Событие               = СтруктураШапкиДокумента.СобытиеВводВЭксплуатациюРегл;
		Движение.НазваниеДокумента 	   = Метаданные().Представление();
		Движение.НомерДокумента    	   = Номер;

	КонецЕсли;
				
	// Движения по регистру СостоянияОСОрганизаций
	Движение = СостояниеОС.Добавить();
	Движение.Период                     = ДатаДока;
	Движение.ОсновноеСредство           = ТекОС;
	Движение.Организация                = СтруктураШапкиДокумента.Организация;
	Движение.Состояние                  = Перечисления.СостоянияОС.ПринятоКУчету;
	Движение.ДатаСостояния				= ДатаДока;
				
	Если СтруктураШапкиДокумента.ПринятиеКУчетуОдновременноСВводомВЭксплуатациюРегл Тогда
					
		Движение = СостояниеОС.Добавить();
		Движение.Период                      = ДатаДока;
		Движение.ОсновноеСредство            = ТекОС;
		Движение.Организация                 = СтруктураШапкиДокумента.Организация;
		Движение.Состояние                   = Перечисления.СостоянияОС.ВведеноВЭксплуатацию;
		Движение.ДатаСостояния				 = ДатаДока;
		
	КонецЕсли;

КонецПроцедуры

Процедура ДвиженияПоОтражениюАктиваВСоставеМПЗ(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	
	НаборДвижений = Движения.ТоварыОрганизаций;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	// Заполним таблицу движений.
	СтрокаДвижений = ТаблицаДвижений.Добавить();
	СтрокаДвижений.Организация = Организация;
	СтрокаДвижений.Номенклатура = СтруктураШапкиДокумента.НоменклатураМПЗ;
	СтрокаДвижений.ХарактеристикаНоменклатуры = СтруктураШапкиДокумента.ХарактеристикаМПЗ;
	СтрокаДвижений.СерияНоменклатуры = СтруктураШапкиДокумента.СерияМПЗ;
	СтрокаДвижений.Качество = Справочники.Качество.Новый;
	СтрокаДвижений.Количество = ТаблицаПоОС.Количество();
	
	Если Не СтруктураШапкиДокумента.ВестиУчетПоСкладамВРазрезеОрганизаций Тогда
		СтрокаДвижений.Склад =  Неопределено;
	Иначе
		СтрокаДвижений.Склад =  СтруктураШапкиДокумента.СкладМПЗ;
	КонецЕсли;
		
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	//---------------------------------------------
	Если Не Отказ Тогда
		Движения.ТоварыОрганизаций.ВыполнитьПриход();
	КонецЕсли;
	
	//ПроводкиБУ = Движения.Хозрасчетный;
	//
	//Если НЕ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
	//	
	//	Проводка = ПроводкиБУ.Добавить();
	//	Проводка.Период       = Дата;
	//	Проводка.Организация  = СтруктураШапкиДокумента.Организация;
	//	Проводка.НомерЖурнала = "ОС";
	//	Проводка.Содержание   = "Оприходованы МПЗ";
	//	Проводка.Сумма        = ТаблицаПоОС.Итог("СуммаОС_БУ");
	//	
	//	Проводка.КоличествоДт = ТаблицаПоОС.Количество();
	//	
	//	Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаМПЗБУ;
	//	УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтруктураШапкиДокумента.НоменклатураМПЗ);
	//	УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",       СтруктураШапкиДокумента.СкладМПЗ);
	//	
	//	Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива;
	//	УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
	//	УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Подрядный);
	//	
	//	///////////////////////////////////////////////////////////////
	//	// Движения по регистру ПартииТоваровНаСкладахБухгалтерскийУчет
	//	НаборДвижений = Движения.ПартииТоваровНаСкладахБухгалтерскийУчет;
	//	
	//	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	//	ТаблицаДвиженийПартииТоваровНаСкладах = НаборДвижений.Выгрузить();
	//	ТаблицаДвиженийПартииТоваровНаСкладах.Очистить();
	//	ТаблицаДвижений = ТаблицаДвиженийПартииТоваровНаСкладах.Скопировать();
	//	
	//	Движение = ТаблицаДвижений.Добавить();
	//	
	//	// измерения
	//	Движение.Номенклатура                 = СтруктураШапкиДокумента.НоменклатураМПЗ;
	//	Движение.СчетУчета                    = СтруктураШапкиДокумента.СчетУчетаМПЗБУ;
	//	Движение.Организация                  = СтруктураШапкиДокумента.Организация;
	//	
	//	Если мУчетнаяПолитикаРегл.ВестиСуммовойИПартионныйУчетПоСкладам тогда
	//		Движение.Склад                        = СтруктураШапкиДокумента.СкладМПЗ;
	//	Иначе
	//		Движение.Склад                        = Неопределено;
	//	КонецЕсли;
	//	
	//	Если мУчетнаяПолитикаБух.СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней тогда
	//		Движение.ДокументОприходования        = Ссылка;
	//	Иначе
	//		Движение.ДокументОприходования        = Неопределено;
	//	КонецЕсли;
	//	
	//	Движение.ХарактеристикаНоменклатуры   = СтруктураШапкиДокумента.ХарактеристикаМПЗ;
	//	
	//	Если СтруктураШапкиДокумента.НоменклатураМПЗ.ВестиПартионныйУчетПоСериям тогда
	//		Движение.СерияНоменклатуры            = СтруктураШапкиДокумента.СерияМПЗ;
	//	Иначе
	//		Движение.СерияНоменклатуры            = Неопределено;
	//	КонецЕсли;
	//	
	//	Движение.Качество                     = Справочники.Качество.Новый;
	//	
	//	// Ресурсы
	//	Движение.Количество = Проводка.КоличествоДт;
	//	Движение.Стоимость = Проводка.Сумма;
	//	
	//	// Реквизиты
	//	Движение.КодОперации          = Перечисления.КодыОперацийПартииТоваров.ВключениеАктиваВСоставМПЗ;
	//	
	//	НаборДвижений.мПериод            = Дата;
	//	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	//	
	//	Если Не Отказ Тогда
	//		Движения.ПартииТоваровНаСкладахБухгалтерскийУчет.ВыполнитьПриход();
	//	КонецЕсли;
	//	// Движения по регистру ПартииТоваровНаСкладахБухгалтерскийУчет
	//	///////////////////////////////////////////////////////////////
	//	
	//	// Отражение принятия ОС к учету в подсистеме НДС
	//	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	//	
	//КонецЕсли;
	//
КонецПроцедуры // ДвиженияПоОтражениюАктиваВСоставеМПЗ()

Процедура ДвиженияПоРегиструТоварыОрганизаций(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ)
	
	НаборДвижений = Движения.ТоварыОрганизаций;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	// Заполним таблицу движений.
	СтрокаДвижений = ТаблицаДвижений.Добавить();
	СтрокаДвижений.Организация				  = СтруктураШапкиДокумента.Организация;
	СтрокаДвижений.Номенклатура				  = СтруктураШапкиДокумента.Номенклатура;
	СтрокаДвижений.ХарактеристикаНоменклатуры = СтруктураШапкиДокумента.ХарактеристикаНоменклатуры;
	СтрокаДвижений.СерияНоменклатуры		  = СтруктураШапкиДокумента.СерияНоменклатуры;
	СтрокаДвижений.Качество					  = Справочники.Качество.Новый;
	СтрокаДвижений.Количество				  = ТаблицаПоОС.Количество();
	
	//Если Не СтруктураШапкиДокумента.ВестиУчетПоСкладамВРазрезеОрганизаций Тогда
    //	СтрокаДвижений.Склад =  Неопределено;
	//Иначе
		//СтрокаДвижений.Склад =  СтруктураШапкиДокумента.Склад;
	//КонецЕсли;
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.ТоварыОрганизаций.ВыполнитьРасход();
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирования движений регл. регистров
//
Процедура ФормированиеДвиженийРегл(РежимПроведения,СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаОплат, Отказ, Заголовок)

	//Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) И (НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
	//	Возврат;
	//КонецЕсли;

	ДатаДока       = Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;

	СобытиеОС      = Движения.СобытияОСОрганизаций;
	СостояниеОС    = Движения.СостоянияОСОрганизаций;
	//
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда 
	//	
		Если СтруктураШапкиДокумента.ОтразитьВСоставеМПЗ Тогда
	//		
	//		ДвиженияПоОтражениюАктиваВСоставеМПЗ(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	//		
		Иначе
	//	
	//		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
	//			
	//			Если СтруктураШапкиДокумента.СписыватьПриПринятииКУчету Тогда
	//			
	//				ТаблицаОССписанныхНаЗатратыБух = ТаблицаПоОС.Скопировать();
	//				ТаблицаОССписанныхНаЗатратыБух.Колонки.СуммаОС_БУ.Имя = "Сумма";
	//				ТаблицаОССписанныхНаЗатратыБух.Колонки.ОсновноеСредство.Имя = "ОбъектУчета";
	//				ТаблицаОССписанныхНаЗатратыБух.Свернуть("ОбъектУчета", "Сумма");
	//				
	//				ТаблицаОССписанныхНаЗатратыБух.Колонки.Добавить("НаправлениеАмортизации");
	//				ТаблицаОССписанныхНаЗатратыБух.ЗаполнитьЗначения(СтруктураШапкиДокумента.СпособыОтраженияРасходовПоАмортизации, "НаправлениеАмортизации");
	//				ТаблицаОССписанныхНаЗатратыБух.Колонки.Добавить("СчетАмортизации");
	//				ТаблицаОССписанныхНаЗатратыБух.ЗаполнитьЗначения(СчетУчетаБУ,"СчетАмортизации");
	//				ТаблицаОССписанныхНаЗатратыБух.Колонки.Добавить("СчетАмортизацииНУ");
	//				ТаблицаОССписанныхНаЗатратыБух.Колонки.Добавить("ИмяСубконто");
	//				ТаблицаОССписанныхНаЗатратыБух.ЗаполнитьЗначения("ОсновныеСредства", "ИмяСубконто");
	//				
	//				// далее нужно распределить суммы по направлениям начисления амортизации
	//				ТабЗатрат = ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТаблицаОССписанныхНаЗатратыБух, СтруктураШапкиДокумента, "Бух", "ОС", "Списание стоимости объекта ОС");
	//				
	//			КонецЕсли;

	//		Иначе // не оборудование

	//			//Заполним таблицу значений для проведения по регистрам, не зависящим от вида операции и сделаем 
	//			// движения по регистру СтоимостьОСБухгалтерскийУчет
	//			АмортизацияОС               = Движения.СтоимостьОСБухгалтерскийУчет;
	//			ТаблицаДвиженийАмортизация  = АмортизацияОС.Выгрузить();
	//			Для Каждого Строка Из ТаблицаПоОС Цикл
	//				ТекОС = Строка.ОсновноеСредство;

	//				// Движения по регистру СтоимостьОС
	//				Движение = ТаблицаДвиженийАмортизация.Добавить();
	//				Движение.Организация      = ТекОрганизация;
	//				Движение.ОсновноеСредство = ТекОС;
	//				Движение.Амортизация      = 0;
	//				Движение.Стоимость        = Строка.СуммаОС_БУ;
	//				Движение.ВидОперации      = Перечисления.ВидыСобытийОС.ПринятиеКУчету;

	//			КонецЦикла;

	//			АмортизацияОС.мПериод = ДатаДока;
	//			АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
	//			Движения.СтоимостьОСБухгалтерскийУчет.ВыполнитьПриход();

	//		КонецЕсли;

			ГрафикиАмортизации     = Движения.ГрафикиАмортизацииОСБухгалтерскийУчет;
			МестонахождениеОС      = Движения.МестонахождениеОСБухгалтерскийУчет;
			НаправлениеАмортизации = Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет;
			НачислениеАмортизации  = Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
			ПервоначальныеСведения = Движения.ПервоначальныеСведенияОСБухгалтерскийУчет;
			ПараметрыАмортизации   = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет;
			СобытиеОС	           = Движения.СобытияОСОрганизаций;
			СостояниеОС            = Движения.СостоянияОСОрганизаций;
			АмортизацияОС          = Движения.СтоимостьОСБухгалтерскийУчет;
			СчетаУчетаОС           = Движения.СчетаБухгалтерскогоУчетаОС;
			ПроводкиБУ             = Движения.Хозрасчетный;

			Для Каждого Строка Из ОсновныеСредства Цикл

		ТекОС = Строка.ОсновноеСредство;
			СтрокаТабОС = ТаблицаПоОС.Найти( ТекОС, "ОсновноеСредство");

				//Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда

				//	Если (СтрокаТабОС.СуммаОС_БУ - СтрокаТабОС.СуммаОС_БУ_Хоз) > 0 Тогда

				//		Проводка = ПроводкиБУ.Добавить();
				//		Проводка.Период       = ДатаДока;
				//		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				//		Проводка.НомерЖурнала = "ОС";
				//		Проводка.Содержание   = "Списана стоим. внеоб. актива";
				//		Проводка.Сумма        = СтрокаТабОС.СуммаОС_БУ - СтрокаТабОС.СуммаОС_БУ_Хоз - ?(СтруктураШапкиДокумента.НДСВключенВСтоимость, СтрокаТабОС.СуммаОС_НДС, 0);

				//		Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаБУ;
				//		//УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

				//		Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива;
				//		УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
				//		УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Подрядный);

				//	КонецЕсли;

				//	Если СтрокаТабОС.СуммаОС_БУ_Хоз > 0 Тогда

				//		Проводка = ПроводкиБУ.Добавить();
				//		Проводка.Период       = ДатаДока;
				//		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				//		Проводка.НомерЖурнала = "ОС";
				//		Проводка.Содержание   = "Списана стоим. внеоб. актива";
				//		Проводка.Сумма        = СтрокаТабОС.СуммаОС_БУ_Хоз;

				//		Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаБУ;
				//		УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

				//		Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива;
				//		УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
				//		УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Хозспособ);

				//	КонецЕсли;
				//КонецЕсли;

				// Движения по регистру ГрафикиАмортизацииОС
				Движение = ГрафикиАмортизации.Добавить();
				Движение.Период                      = ДатаДока;
				Движение.ОсновноеСредство            = ТекОС;
				Движение.Организация                 = ТекОрганизация;
				Движение.ГрафикАмортизации           = СтруктураШапкиДокумента.ГрафикАмортизацииПоГодуБУ;

				// Движения по регистру МестонахождениеОС
				Движение = МестонахождениеОС.Добавить();
				Движение.Период                      = ДатаДока;
				Движение.ОсновноеСредство            = ТекОС;
				Движение.Организация                 = ТекОрганизация;
				Движение.Местонахождение             = СтруктураШапкиДокумента.ПодразделениеОрганизации;
				Движение.МОЛ                         = СтруктураШапкиДокумента.МОЛБУ;

				// Движения по регистру СпособыОтраженияРасходовПоАмортизацииОС
				Движение = НаправлениеАмортизации.Добавить();
				Движение.Период                      = ДатаДока;
				Движение.ОсновноеСредство            = ТекОС;
				Движение.Организация                 = ТекОрганизация;
				Движение.СпособыОтраженияРасходовПоАмортизации = СтруктураШапкиДокумента.СпособыОтраженияРасходовПоАмортизации;

				// Движения по регистру НачислениеАмортизации
				Движение = НачислениеАмортизации.Добавить();
				Движение.Период                      = ДатаДока;
				Движение.ОсновноеСредство            = ТекОС;
				Движение.Организация                 = ТекОрганизация;
				Движение.НачислятьАмортизацию        = СтруктураШапкиДокумента.НачислятьАмортизациюБУ;

				// Движения по регистру ПервоначальныеСведенияОС
				Движение = ПервоначальныеСведения.Добавить();
				Движение.Период                      = ДатаДока;
				Движение.ОсновноеСредство            = ТекОС;
				Движение.Организация                 = ТекОрганизация;
				Движение.ПервоначальнаяСтоимость     = СтрокаТабОС.СуммаОС_БУ;
				Движение.СпособНачисленияАмортизации = СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ;
				Движение.СпособПоступления           = СтруктураШапкиДокумента.СпособПоступления;
				ТекСтрокаОС = ТаблицаПоОС.Найти(ТекОС,"ОсновноеСредство");
				Движение.ИнвентарныйНомер = ?(ТекСтрокаОС = Неопределено,Неопределено,ТекСтрокаОС.ИнвентарныйНомер);
				Движение.ПараметрВыработки = СтруктураШапкиДокумента.ПараметрВыработкиБУ;

				// Движения по регистру ПараметрыАмортизации
				Если Не СписыватьПриПринятииКУчету Тогда
					Движение = ПараметрыАмортизации.Добавить();
					Движение.Период                                      = ДатаДока;
					Движение.ОсновноеСредство                            = ТекОС;
					Движение.Организация                                 = ТекОрганизация;
					Движение.КоэффициентАмортизации                      = СтруктураШапкиДокумента.ГодоваяНормаАмортизацииБУ;
					Движение.КоэффициентУскорения                        = СтруктураШапкиДокумента.КоэффициентУскоренияБУ;
					Движение.ОбъемПродукцииРабот                         = СтруктураШапкиДокумента.ПредполагаемыйОбъемПродукцииБУ;
					Движение.СрокПолезногоИспользования                  = СтруктураШапкиДокумента.СрокПолезногоИспользованияБУ;
					Движение.СрокИспользованияДляВычисленияАмортизации   = СтруктураШапкиДокумента.СрокПолезногоИспользованияБУ;
					Движение.СтоимостьДляВычисленияАмортизации           = СтрокаТабОС.СуммаОС_БУ;
					Движение.ОбъемПродукцииРаботДляВычисленияАмортизации = СтруктураШапкиДокумента.ПредполагаемыйОбъемПродукцииБУ;
				КонецЕсли;

				ДвиженияПоРегистрамСобытийИСостоянийРегл(СтруктураШапкиДокумента, СобытиеОС, СостояниеОС, ТекОС, ДатаДока);
				
				// Движения по регистру СчетаБухгалтерскогоУчетаОС
				Движение = СчетаУчетаОС.Добавить();
				Движение.Период                    = ДатаДока;
				Движение.ОсновноеСредство          = ТекОС;
				Движение.Организация               = ТекОрганизация;
				Движение.СчетУчета                 = СтруктураШапкиДокумента.СчетУчетаБУ;
				Движение.СчетНачисленияАмортизации = СтруктураШапкиДокумента.СчетНачисленияАмортизацииБУ;

			КонецЦикла;

			// Отражение принятия ОС к учету в подсистеме НДС
			ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
			
		КонецЕсли;

	КонецЕсли;

	//ТЗДанныеОС = Новый ТаблицаЗначений;
	//ТЗДанныеОС.Колонки.Добавить("ОбъектУчета");
	//ТЗДанныеОС.Колонки.Добавить("Сумма");
	//ТЗДанныеОС.Колонки.Добавить("СуммаХоз");
	//ТЗДанныеОС.Колонки.Добавить("СуммаПР");
	//ТЗДанныеОС.Колонки.Добавить("СуммаПРХоз");
	//ТЗДанныеОС.Колонки.Добавить("СуммаВР");
	//ТЗДанныеОС.Колонки.Добавить("СуммаВРХоз");
	//ТЗДанныеОС.Колонки.Добавить("СуммаВРМинус");
	//ТЗДанныеОС.Колонки.Добавить("СуммаКапитальныхВложений");

	//// Отражение в налоговом учете.
	//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда 
	//	
	//	// Признак заполнения сведений об объекте ОС в регистрах сведений.
	//	ОтражатьВРегистрахНУ = Истина;
	//	
	//	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
	//		
	//		Запрос = Новый Запрос;
	//		
	//		Запрос.УстановитьПараметр("Регистратор", Ссылка);
	//		Запрос.УстановитьПараметр("Вид",         ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	//		Запрос.УстановитьПараметр("ВидУчетаНУ",  Перечисления.ВидыУчетаПоПБУ18.НУ);
	//		Запрос.УстановитьПараметр("ВидУчетаПР",  Перечисления.ВидыУчетаПоПБУ18.ПР);
	//		Запрос.УстановитьПараметр("ВидУчетаВР",  Перечисления.ВидыУчетаПоПБУ18.ВР);
	//		
	//		Запрос.Текст =
	//		"ВЫБРАТЬ
	//		|	НалоговыйСубконто.Значение КАК ОбъектУчета,
	//		|	ВЫБОР КОГДА Налоговый.ВидУчетаДт = &ВидУчетаНУ ТОГДА Налоговый.Сумма ИНАЧЕ 0 КОНЕЦ КАК Сумма,
	//		|	ВЫБОР КОГДА Налоговый.ВидУчетаДт = &ВидУчетаНУ ТОГДА - Налоговый.Сумма ИНАЧЕ 0 КОНЕЦ КАК СуммаВРМинус,
	//		|	ВЫБОР КОГДА Налоговый.ВидУчетаДт = &ВидУчетаПР ТОГДА Налоговый.Сумма ИНАЧЕ 0 КОНЕЦ КАК СуммаПР,
	//		|	ВЫБОР КОГДА Налоговый.ВидУчетаДт = &ВидУчетаВР ТОГДА Налоговый.Сумма ИНАЧЕ 0 КОНЕЦ КАК СуммаВР,
	//		|	0 КАК СуммаХоз,
	//		|	0 КАК СуммаПРХоз,
	//		|	0 КАК СуммаВРХоз,
	//		|	0 КАК СуммаКапитальныхВложений,
	//		|	Налоговый.ВидУчетаДт КАК ВидУчета
	//		|ИЗ
	//		|	РегистрБухгалтерии.Налоговый КАК Налоговый
	//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Субконто КАК НалоговыйСубконто
	//		|		ПО Налоговый.Регистратор = НалоговыйСубконто.Регистратор И Налоговый.НомерСтроки = НалоговыйСубконто.НомерСтроки
	//		|
	//		|ГДЕ
	//		|	Налоговый.Регистратор = &Регистратор И
	//		|	(Налоговый.Активность) И
	//		|	НалоговыйСубконто.Вид = &Вид";
	//		ТЗДанныеОС = Запрос.Выполнить().Выгрузить();
	//		
	//		Если СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
	//			
	//			ТЗДанныеОС.Колонки.Добавить("НаправлениеАмортизации");
	//			ТЗДанныеОС.ЗаполнитьЗначения(СтруктураШапкиДокумента.СпособыОтраженияРасходовПоАмортизации, "НаправлениеАмортизации");
	//			ТЗДанныеОС.Колонки.Добавить("СчетАмортизацииНУ");
	//			ТЗДанныеОС.ЗаполнитьЗначения(СчетУчетаНУ,"СчетАмортизацииНУ");
	//			ТЗДанныеОС.Колонки.Добавить("СчетАмортизации");
	//			ТЗДанныеОС.Колонки.Добавить("ИмяСубконто", ПолучитьОписаниеТиповСтроки(16));
	//			ТЗДанныеОС.ЗаполнитьЗначения("ОсновныеСредства", "ИмяСубконто");

	//			// Распредение стоимости по направлениям начисления амортизации.
	//			ТабЗатрат = ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТЗДанныеОС, СтруктураШапкиДокумента, "Нал", "ОС", "Списание стоимости объекта ОС");
	//			
	//			// Объект не должен отражаться в составе ОС в НУ (в регистрах).
	//			ОтражатьВРегистрахНУ = Ложь;
	//			
	//		КонецЕсли;

	//	Иначе // не оборудование
			
			// Заполним таблицу значений для проведения по регистрам, не зависящим от вида операции и сделаем 
			// движения по регистру СтоимостьОСНалоговыйУчет
           // ПоддержкаПБУ18 = ПрименениеПБУ18(Организация, Дата);

			//АмортизацияОС = Движения.СтоимостьОСНалоговыйУчет;
			//ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();

			//Для Каждого Строка Из ОсновныеСредства Цикл

			//	ТекОС = Строка.ОсновноеСредство;
			//	СтрокаТабОС = ТаблицаПоОС.Найти( ТекОС, "ОсновноеСредство");

			//	// Движения по регистру СтоимостьОС
			//	Движение = ТаблицаДвиженийАмортизация.Добавить();
			//	Движение.Организация      = ТекОрганизация;
			//	Движение.ОсновноеСредство = ТекОС;
			//	Движение.Амортизация      = 0;
			//	Движение.Стоимость        = СтрокаТабОС.СуммаОС_НУ;
			//	Движение.ВидОперации      = Перечисления.ВидыСобытийОС.ПринятиеКУчету;

			//	НоваяСтрока = ТЗДанныеОС.Добавить();
			//	НоваяСтрока.ОбъектУчета = ТекОС;
			//	НоваяСтрока.Сумма       = СтрокаТабОС.СуммаОС_НУ;
			//	НоваяСтрока.СуммаХоз    = СтрокаТабОС.СуммаОС_НУ_Хоз;
			//	НоваяСтрока.СуммаПР     =  ?(ПоддержкаПБУ18, СтрокаТабОС.СуммаОС_ПР, 0);
			//	НоваяСтрока.СуммаПРХоз  =  ?(ПоддержкаПБУ18, СтрокаТабОС.СуммаОС_ПР_Хоз, 0);
			//	НоваяСтрока.СуммаВР     =  ?(ПоддержкаПБУ18, СтрокаТабОС.СуммаОС_ВР, 0);
			//	НоваяСтрока.СуммаВРХоз  =  ?(ПоддержкаПБУ18, СтрокаТабОС.СуммаОС_ВР_Хоз, 0);
			//	НоваяСтрока.СуммаВРМинус= ?(ПоддержкаПБУ18, - НоваяСтрока.Сумма - НоваяСтрока.СуммаХоз, 0);

			//КонецЦикла;

			//АмортизацияОС.мПериод          = ДатаДока;
			//АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
			//Движения.СтоимостьОСНалоговыйУчет.ВыполнитьПриход();

	//	КонецЕсли;
		
		// Рассчитаем сумму капитальных вложений, включаемых в расходы.
		//Если СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
		//	Для Каждого СтрокаОС Из ТЗДанныеОС Цикл
		//		СтрокаОС.СуммаКапитальныхВложений = Окр(СтрокаОС.Сумма * (СтруктураШапкиДокумента.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ / 100), 2);
		//	КонецЦикла;
		//КонецЕсли;

		//Если ОтражатьВРегистрахНУ тогда
		//	
		//	ПервоначальныеСведения = Движения.ПервоначальныеСведенияОСНалоговыйУчет;
		//	СчетаУчетаОСНУ         = Движения.СчетаНалоговогоУчетаОС;
		//	
		//	Если СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
		//	
		//		НачислениеАмортизации  = Движения.НачислениеАмортизацииОСНалоговыйУчет;
		//		НаправлениеАмортизации = Движения.СпособыОтраженияРасходовПоАмортизацииОСНалоговыйУчет;
		//		ПараметрыАмортизации   = Движения.ПараметрыАмортизацииОСНалоговыйУчет;
		//		СпецКоэффициент        = Движения.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет;
		//		
		//	КонецЕсли;
		//	
		//КонецЕсли;

		//ПроводкиНУ = Движения.Налоговый;
		//Для Каждого Строка Из ОсновныеСредства Цикл

		//	ТекОС = Строка.ОсновноеСредство;
		//	СтрокаТабОС = ТаблицаПоОС.Найти(ТекОС, "ОсновноеСредство");

		//	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда

		//		Если (СтрокаТабОС.СуммаОС_НУ - СтрокаТабОС.СуммаОС_НУ_Хоз) > 0 Тогда

		//			Проводка = ПроводкиНУ.Добавить();

		//			Проводка.Период      = ДатаДока;
		//			Проводка.Организация = СтруктураШапкиДокумента.Организация;
		//			Проводка.Сумма       = СтрокаТабОС.СуммаОС_НУ - СтрокаТабОС.СуммаОС_НУ_Хоз;
		//			Проводка.Содержание  = "Принят к учету объект ОС";
		//			
		//			Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаНУ;
		//			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

		//			Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
		//			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
		//			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Подрядный);
		//			
		//		КонецЕсли;
		//		
		//		Если СтрокаТабОС.СуммаОС_НУ_Хоз > 0 Тогда

		//			Проводка = ПроводкиНУ.Добавить();

		//			Проводка.Период      = ДатаДока;
		//			Проводка.Организация = СтруктураШапкиДокумента.Организация;
		//			Проводка.Сумма       = СтрокаТабОС.СуммаОС_НУ_Хоз;
		//			Проводка.Содержание  = "Принят к учету объект ОС";

		//			Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаНУ;
		//			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

		//			Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
		//			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
		//			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Хозспособ);
		//			
		//		КонецЕсли;

		//	
		//		Если (СтрокаТабОС.СуммаОС_ПР - СтрокаТабОС.СуммаОС_ПР_Хоз) > 0 Тогда

		//			Проводка = ПроводкиНУ.Добавить();

		//			Проводка.Период      = ДатаДока;
		//			Проводка.Организация = СтруктураШапкиДокумента.Организация;
		//			Проводка.Сумма       = СтрокаТабОС.СуммаОС_ПР - СтрокаТабОС.СуммаОС_ПР_Хоз;
		//			Проводка.Содержание  = "Принят к учету объект ОС";
		//			
		//			Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаНУ;
		//			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

		//			Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
		//			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
		//			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Подрядный);
		//			Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.Пр;
		//			Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.Пр;

		//		КонецЕсли;
		//		
		//		Если СтрокаТабОС.СуммаОС_ПР_Хоз > 0 Тогда

		//			Проводка = ПроводкиНУ.Добавить();

		//			Проводка.Период      = ДатаДока;
		//			Проводка.Организация = СтруктураШапкиДокумента.Организация;
		//			Проводка.Сумма       = СтрокаТабОС.СуммаОС_ПР_Хоз;
		//			Проводка.Содержание  = "Принят к учету объект ОС";

		//			Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаНУ;
		//			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

		//			Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
		//			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
		//			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Хозспособ);
		//			Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.Пр;
		//			Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.Пр;
		//			
		//		КонецЕсли;
		//		Если (СтрокаТабОС.СуммаОС_ВР - СтрокаТабОС.СуммаОС_ВР_Хоз) > 0 Тогда

		//			Проводка = ПроводкиНУ.Добавить();

		//			Проводка.Период      = ДатаДока;
		//			Проводка.Организация = СтруктураШапкиДокумента.Организация;
		//			Проводка.Сумма       = СтрокаТабОС.СуммаОС_ВР - СтрокаТабОС.СуммаОС_ВР_Хоз;
		//			Проводка.Содержание  = "Принят к учету объект ОС";
		//			
		//			Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаНУ;
		//			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

		//			Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
		//			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
		//			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Подрядный);
		//			Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.Вр;
		//			Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.Вр;

		//		КонецЕсли;
		//		
		//		Если СтрокаТабОС.СуммаОС_ВР_Хоз > 0 Тогда

		//			Проводка = ПроводкиНУ.Добавить();

		//			Проводка.Период      = ДатаДока;
		//			Проводка.Организация = СтруктураШапкиДокумента.Организация;
		//			Проводка.Сумма       = СтрокаТабОС.СуммаОС_ВР_Хоз;
		//			Проводка.Содержание  = "Принят к учету объект ОС";

		//			Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаНУ;
		//			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

		//			Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
		//			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
		//			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Хозспособ);
		//			Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.Вр;
		//			Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.Вр;
		//			
		//		КонецЕсли;
		//	КонецЕсли;
		//	
		//КонецЦикла;

	//	Для Каждого Строка Из ТЗДанныеОС Цикл
	//		
	//		Если ОтражатьВРегистрахНУ 
	//			И (ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование 
	//			И Строка.ВидУчета = Перечисления.ВидыУчетаПоПБУ18.НУ) 
	//			ИЛИ ВидОперации <> Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
	//			
	//			ТекОС = Строка.ОбъектУчета;
	//			СтрокаТабОС = ТаблицаПоОС.Найти( ТекОС, "ОсновноеСредство");
	//			
	//			// Движения по регистру ПеровначальныеСведенияОСНалоговый учет
	//			Движение = ПервоначальныеСведения.Добавить();
	//			Движение.Период                                   = ДатаДока;
	//			Движение.ОсновноеСредство                         = ТекОС;
	//			Движение.Организация                              = ТекОрганизация;
	//			Движение.ПервоначальнаяСтоимостьНУ                = СтрокаТабОС.СуммаОС_НУ;
	//			Движение.МетодНачисленияАмортизации               = СтруктураШапкиДокумента.СпособНачисленияАмортизацииНУ;
	//			Движение.ПорядокВключенияСтоимостиВСоставРасходов = СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ;
	//			
	//			// Движения по регистру СчетаБухгалтерскогоУчетаОС
	//			Движение = СчетаУчетаОСНУ.Добавить();
	//			Движение.Период                     = ДатаДока;
	//			Движение.ОсновноеСредство           = ТекОС;
	//			Движение.Организация                = ТекОрганизация;
	//			Движение.СчетУчета                  = СтруктураШапкиДокумента.СчетУчетаНУ;
	//			Движение.СчетНачисленияАмортизации  = СтруктураШапкиДокумента.СчетНачисленияАмортизацииНУ;
	//			
	//			// Движения по регистрам событий и состояний ОС
	//			Если СтруктураШапкиДокумента.ОтразитьВСоставеМПЗ Тогда
	//				ДвиженияПоРегистрамСобытийИСостоянийРегл(СтруктураШапкиДокумента, СобытиеОС, СостояниеОС, ТекОС, ДатаДока);
	//			КонецЕсли;
	//			
	//			Если СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
	//			
	//				// Движения по регистру ПараметрыАмортизации
	//				Движение = ПараметрыАмортизации.Добавить();
	//				Движение.Период                     = ДатаДока;
	//				Движение.ОсновноеСредство           = ТекОС;
	//				Движение.Организация                = ТекОрганизация;
	//				Движение.СрокПолезногоИспользования = СтруктураШапкиДокумента.СрокПолезногоИспользованияНУ;
	//				
	//				// Движения по регистру НачислениеАмортизации
	//				Движение = НачислениеАмортизации.Добавить();
	//				Движение.Период                     = ДатаДока;
	//				Движение.ОсновноеСредство           = ТекОС;
	//				Движение.Организация                = ТекОрганизация;
	//				Движение.НачислятьАмортизацию       = СтруктураШапкиДокумента.НачислятьАмортизациюНУ;
	//			
	//				// Движения по регистру СпособыОтраженияРасходовПоАмортизацииОС
	//				Движение = НаправлениеАмортизации.Добавить();
	//				Движение.Период                      = ДатаДока;
	//				Движение.ОсновноеСредство            = ТекОС;
	//				Движение.Организация                 = ТекОрганизация;
	//				Движение.СпособыОтраженияРасходовПоАмортизации = СтруктураШапкиДокумента.СпособыОтраженияРасходовПоАмортизации;

	//				// Движения по регистру СпециальныйКоэффициент
	//				Движение = СпецКоэффициент.Добавить();
	//				Движение.Период                     = ДатаДока;
	//				Движение.ОсновноеСредство           = ТекОС;
	//				Движение.Организация                = ТекОрганизация;
	//				Движение.СпециальныйКоэффициент     = СтруктураШапкиДокумента.СпециальныйКоэффициентНУ;
	//			
	//			КонецЕсли;
	//			
	//			Если СтруктураШапкиДокумента.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ > 0 Тогда
	//				
	//				// Проводка по счету КВ "Расходы на капитальные вложения по п. 1.1 ст. 259 НК РФ"
	//				Если НЕ ЗначениеНеЗаполнено(Строка.СуммаКапитальныхВложений) Тогда
	//				
	//					Проводка = ПроводкиНУ.Добавить();

	//					Проводка.Период       = ДатаДока;
	//					Проводка.Организация  = СтруктураШапкиДокумента.Организация;
	//					Проводка.НомерЖурнала = "ОС";
	//					Проводка.Содержание   = "Капитальные вложения, включаемые в состав расходов";
	//					Проводка.Сумма        = Строка.СуммаКапитальныхВложений;

	//					Проводка.СчетДт       = ПланыСчетов.Налоговый.РасходыНаКапитальныеВложения;
	//					УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
	//					
	//				КонецЕсли;
	//				
	//			КонецЕсли;
	//			
	//		КонецЕсли;
	//		
	//	КонецЦикла;

	//	ПоддержкаПБУ18 = ПрименениеПБУ18(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
	//	Если СтруктураШапкиДокумента.ОтразитьВСоставеМПЗ И ПоддержкаПБУ18 Тогда
	//		
	//		
	//		НаборДвижений = РегистрыНакопления.ПартииТоваровНаСкладахНалоговыйУчет;
	//		НаборЗаписей = НаборДвижений.СоздатьНаборЗаписей();
	//		Док = НаборЗаписей.Отбор.Регистратор;
	//		Док.Установить(Ссылка);
	//		НаборЗаписей.Прочитать();
	//		
	//		ТаблицаДвиженийПартииТоваровНаСкладах = НаборЗаписей.Выгрузить();
	//		СуммаНУ = ТаблицаДвиженийПартииТоваровНаСкладах.Итог("Стоимость") + ?(ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства, СтоимостьНУ, 0);
	//		СуммаВР = ТаблицаДвиженийПартииТоваровНаСкладах.Итог("ВременнаяРазница") +  ?(ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства, СтоимостьПР, 0);
	//		СуммаПР = ТаблицаДвиженийПартииТоваровНаСкладах.Итог("ПостояннаяРазница") + ?(ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства, СтоимостьВР, 0);
	//		
	//		Проводка = ПроводкиНУ.Добавить();
	//		Проводка.Период       = ДатаДока;
	//		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
	//		Проводка.НомерЖурнала = "ОС";
	//		Проводка.Содержание   = "Оприходованы МПЗ";
	//								
	//		Проводка.КоличествоДт = ТаблицаПоОС.Количество();
	//		Проводка.Сумма = 0; 
	//		
	//		Проводка.СчетДт       = ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ;
	//		УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтруктураШапкиДокумента.НоменклатураМПЗ);
	//		УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",       СтруктураШапкиДокумента.СкладМПЗ);

	//		Проводка = ПроводкиНУ.Добавить();
	//		
	//		Проводка.Период       = ДатаДока;
	//		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
	//		Проводка.НомерЖурнала = "ОС";
	//		Проводка.Содержание   = "Оприходованы МПЗ";
	//		Проводка.Сумма        = СуммаНУ + СуммаВР;
	//		
	//		Проводка.СчетДт       = ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ;
	//		УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтруктураШапкиДокумента.НоменклатураМПЗ);
	//		УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",       СтруктураШапкиДокумента.СкладМПЗ);
	//		
	//		Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ВР;
	//		
	//		Если СуммаПР <> 0 Тогда
	//		Проводка = ПроводкиНУ.Добавить();
	//		
	//		Проводка.Период       = ДатаДока;
	//		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
	//		Проводка.НомерЖурнала = "ОС";
	//		Проводка.Содержание   = "Оприходованы МПЗ";
	//		Проводка.Сумма        = СуммаПР;
	//		
	//		Проводка.СчетДт       = ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ;
	//		УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтруктураШапкиДокумента.НоменклатураМПЗ);
	//		УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",       СтруктураШапкиДокумента.СкладМПЗ);
	//		
	//		Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ПР;
	//	КонецЕсли;
	//	
	//		
	//		Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
	//		Проводка = ПроводкиНУ.Добавить();
	//		
	//		Проводка.Период       = ДатаДока;
	//		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
	//		Проводка.НомерЖурнала = "ОС";
	//		Проводка.Содержание   = "Оприходованы МПЗ";
	//		Проводка.Сумма        = (- СуммаНУ - СуммаВР) / ТаблицаПоОС.Количество();
	//		
	//		Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаНУ;
	//		УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
	//		Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ВР;
	//		
	//		Если СуммаПр <> 0 Тогда
	//			Проводка = ПроводкиНУ.Добавить();
	//			
	//			Проводка.Период       = ДатаДока;
	//			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
	//			Проводка.НомерЖурнала = "ОС";
	//			Проводка.Содержание   = "Оприходованы МПЗ";
	//			Проводка.Сумма        = - СуммаПР / ТаблицаПоОС.Количество();
	//			
	//			Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаНУ;
	//			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
	//			Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ПР;
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//		
	//		///////////////////////////////////////////////////////////////
	//		// Движения по регистру ПартииТоваровНаСкладахНалоговыйУчет
	//		НаборДвижений = Движения.ПартииТоваровНаСкладахНалоговыйУчет;
	//		
	//		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	//		ТаблицаДвиженийПартииТоваровНаСкладах = НаборДвижений.Выгрузить();
	//		ТаблицаДвиженийПартииТоваровНаСкладах.Очистить();
	//		ТаблицаДвижений = ТаблицаДвиженийПартииТоваровНаСкладах.Скопировать();
	//		
	//		Движение = ТаблицаДвижений.Добавить();
	//		
	//		// измерения
	//		Движение.Номенклатура                 = СтруктураШапкиДокумента.НоменклатураМПЗ;
	//		Движение.СчетУчета                    = ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ;
	//		Движение.Организация                  = СтруктураШапкиДокумента.Организация;
	//		
	//		Если мУчетнаяПолитикаРегл.ВестиСуммовойИПартионныйУчетПоСкладам тогда
	//			Движение.Склад                        = СтруктураШапкиДокумента.СкладМПЗ;
	//		Иначе
	//			Движение.Склад                        = Неопределено;
	//		КонецЕсли;
	//		
	//		Если мУчетнаяПолитикаНал.СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней тогда
	//			Движение.ДокументОприходования        = Ссылка;
	//		Иначе
	//			Движение.ДокументОприходования        = Неопределено;
	//		КонецЕсли;
	//		
	//		Движение.ХарактеристикаНоменклатуры   = СтруктураШапкиДокумента.ХарактеристикаМПЗ;
	//		
	//		Если СтруктураШапкиДокумента.НоменклатураМПЗ.ВестиПартионныйУчетПоСериям тогда
	//			Движение.СерияНоменклатуры            = СтруктураШапкиДокумента.СерияМПЗ;
	//		Иначе
	//			Движение.СерияНоменклатуры            = Неопределено;
	//		КонецЕсли;
	//		
	//		Движение.Качество                     = Справочники.Качество.Новый;
	//		
	//		// Ресурсы
	//		Движение.Количество = ТаблицаПоОС.Количество();
	//		Движение.Стоимость = 0;
	//		Движение.ВременнаяРазница = СуммаНУ + СуммаВР;
	//		Движение.ПостояннаяРазница = СуммаПР;
	//		
	//		// Реквизиты
	//		Движение.КодОперации          = Перечисления.КодыОперацийПартииТоваров.ВключениеАктиваВСоставМПЗ;
	//		
	//		НаборДвижений.мПериод            = ДатаДока;
	//		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	//		
	//		Если Не Отказ Тогда
	//			Движения.ПартииТоваровНаСкладахНалоговыйУчет.ВыполнитьПриход();
	//			Движения.ПартииТоваровНаСкладахНалоговыйУчет.Записать(Ложь);
	//		КонецЕсли;
	//		// Движения по регистру ПартииТоваровНаСкладахНалоговыйУчет
	//		///////////////////////////////////////////////////////////////
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//
	//		// Отражение разниц
	//	Если СтруктураШапкиДокумента.СписыватьПриПринятииКУчету  
	//	   И НЕ (СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету) Тогда
	//	   
	//		ТаблицаДляСписания = ТЗДанныеОС.Скопировать();
	//	   
	//		ТаблицаДляСписания.Колонки.Добавить("НаправлениеАмортизации");
	//		ТаблицаДляСписания.ЗаполнитьЗначения(СтруктураШапкиДокумента.СпособыОтраженияРасходовПоАмортизации, "НаправлениеАмортизации");
	//		ТаблицаДляСписания.Колонки.Добавить("СчетАмортизацииНУ");
	//		ТаблицаДляСписания.ЗаполнитьЗначения(СчетУчетаНУ, "СчетАмортизацииНУ");
	//		ТаблицаДляСписания.Колонки.Добавить("СчетАмортизации");
	//		ТаблицаДляСписания.Колонки.Добавить("ИмяСубконто", ПолучитьОписаниеТиповСтроки(16));
	//		ТаблицаДляСписания.ЗаполнитьЗначения("ОсновныеСредства", "ИмяСубконто");
	//		
	//		ТабЗатрат = ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТаблицаДляСписания, СтруктураШапкиДокумента, "ВР", "ОС", "Списание стоимости объекта ОС");
	//		
	//	КонецЕсли;
	//	
	//	Если СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету 
	//	   И НЕ (СтруктураШапкиДокумента.СписыватьПриПринятииКУчету) Тогда		
	//		 
	//		ТаблицаДляСписания = ТЗДанныеОС.Скопировать();
	//		
	//		ТаблицаДляСписания.Колонки.Сумма.Имя = "СуммаНУ";
	//		ТаблицаДляСписания.Колонки.СуммаВРМинус.Имя = "Сумма";
	//		
	//		ТабЗатрат = ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТаблицаДляСписания, СтруктураШапкиДокумента, "ВР", "ОС", "Списание стоимости объекта ОС");
	//		
	//	КонецЕсли;
	//	
	//	Если СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету 
	//	   И СтруктураШапкиДокумента.СписыватьПриПринятииКУчету Тогда		
	//	   
	//		НаправлениеСписания = СтруктураШапкиДокумента.СпособыОтраженияРасходовПоАмортизации;
	//		
	//		ТЗДанныеОС.Колонки.Сумма.Имя = "СуммаНУ";
	//		ТЗДанныеОС.Колонки.СуммаПР.Имя = "Сумма";
	//		
	//		// далее нужно распределить суммы по направлениям начисления амортизации
	//		ТабЗатрат = ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТЗДанныеОС, СтруктураШапкиДокумента, "ПР", "ОС", "Списание стоимости объекта ОС");
	//		
	//		ТЗДанныеОС.Колонки.Сумма.Имя = "СуммаПР";
	//		ТЗДанныеОС.Колонки.СуммаВР.Имя = "Сумма";
	//		
	//		// далее нужно распределить суммы по направлениям начисления амортизации
	//		ТабЗатрат = ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТЗДанныеОС, СтруктураШапкиДокумента, "ВР", "ОС", "Списание стоимости объекта ОС");
	//	   
	//	КонецЕсли;

	//
	//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда 

	//	Если СтруктураШапкиДокумента.ОтразитьВСоставеМПЗ Тогда
	//			
	//		///////////////////////////////////////////////////////////////
	//		// Движения по регистру ПартииТоваровНаСкладахНалоговыйУчет
	//		НаборДвижений = Движения.ПартииТоваровНаСкладахНалоговыйУчет;
	//		
	//		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	//		ТаблицаДвиженийПартииТоваровНаСкладах = НаборДвижений.Выгрузить();
	//		ТаблицаДвиженийПартииТоваровНаСкладах.Очистить();
	//		ТаблицаДвижений = ТаблицаДвиженийПартииТоваровНаСкладах.Скопировать();
	//		
	//		Движение = ТаблицаДвижений.Добавить();
	//		
	//		// измерения
	//		Движение.Номенклатура                 = СтруктураШапкиДокумента.НоменклатураМПЗ;
	//		Движение.СчетУчета                    = СтруктураШапкиДокумента.СчетУчетаМПЗБУ;
	//		Движение.Организация                  = СтруктураШапкиДокумента.Организация;
	//		
	//		Если мУчетнаяПолитикаРегл.ВестиСуммовойИПартионныйУчетПоСкладам тогда
	//			Движение.Склад                        = СтруктураШапкиДокумента.СкладМПЗ;
	//		Иначе
	//			Движение.Склад                        = Неопределено;
	//		КонецЕсли;
	//		
	//		Движение.ДокументОприходования        = Ссылка;
	//		
	//		Движение.ХарактеристикаНоменклатуры   = СтруктураШапкиДокумента.ХарактеристикаМПЗ;
	//		
	//		Если СтруктураШапкиДокумента.НоменклатураМПЗ.ВестиПартионныйУчетПоСериям тогда
	//			Движение.СерияНоменклатуры            = СтруктураШапкиДокумента.СерияМПЗ;
	//		Иначе
	//			Движение.СерияНоменклатуры            = Неопределено;
	//		КонецЕсли;
	//		
	//		Движение.Качество                     = Справочники.Качество.Новый;
	//		
	//		// Ресурсы
	//		Движение.Количество = ТаблицаПоОС.Количество();
	//		Движение.Стоимость = 0;
	//		
	//		// Реквизиты
	//		Движение.КодОперации          = Перечисления.КодыОперацийПартииТоваров.ВключениеАктиваВСоставМПЗ;
	//		
	//		НаборДвижений.мПериод            = ДатаДока;
	//		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	//		
	//		Если Не Отказ Тогда
	//			Движения.ПартииТоваровНаСкладахНалоговыйУчет.ВыполнитьПриход();
	//			Движения.ПартииТоваровНаСкладахНалоговыйУчет.Записать(Ложь);
	//		КонецЕсли;
	//		// Движения по регистру ПартииТоваровНаСкладахНалоговыйУчет
	//		///////////////////////////////////////////////////////////////
	//		
	//	КонецЕсли;
	//	
	//	ОтражатьВРегистрахУСН  = Истина;
	//	ПервоначальныеСведения = Движения.ПервоначальныеСведенияОСНалоговыйУчетУСН;

	//	Для Каждого Строка Из ТаблицаПоОС Цикл

	//		ТекОС = Строка.ОсновноеСредство;

	//		Если ОтражатьВРегистрахУСН тогда

	//			// Движения по регистру ПервоначальныеСведенияОСНалоговыйУчетУСН
	//			Движение = ПервоначальныеСведения.Добавить();

	//			Движение.Период                     = ДатаДока;
	//			Движение.ОсновноеСредство           = ТекОС;
	//			Движение.Организация                = ТекОрганизация;
	//			Движение.ПервоначальнаяСтоимостьУСН = СтруктураШапкиДокумента.СтоимостьУСН;
	//			Движение.СрокПолезногоИспользования = СтруктураШапкиДокумента.СрокПолезногоИспользованияУСН;
	//			Движение.ДатаПриобретения           = СтруктураШапкиДокумента.ДатаПриобретения;
	//			Движение.ПорядокВключенияСтоимостиВСоставРасходовУСН = СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовУСН;

	//		КонецЕсли;
	//		
	//		Если СтруктураШапкиДокумента.ОтразитьВСоставеМПЗ Тогда
	//			
	//			ДвиженияПоРегистрамСобытийИСостоянийРегл(СтруктураШапкиДокумента, СобытиеОС, СостояниеОС, ТекОС, ДатаДока);
	//				
	//		КонецЕсли;

	//	КонецЦикла;

	//	РегОплаты = Движения.ОплатыОСДляУСН;

	//	Для Каждого Запись Из ТаблицаОплат Цикл

	//		СтрокаОплаты  = РегОплаты.Добавить();

	//		СтрокаОплаты.Период           = Запись.ДатаОплаты;
	//		СтрокаОплаты.Организация      = СтруктураШапкиДокумента.Организация;
	//		СтрокаОплаты.ОсновноеСредство = Запись.ОсновноеСредство;
	//		СтрокаОплаты.ДатаОплаты       = Запись.ДатаОплаты;
	//		СтрокаОплаты.СуммаОплаты      = Запись.СуммаОплаты;

	//	КонецЦикла

	//КонецЕсли;
	//
	//Движения.Хозрасчетный.Записать(Ложь);
	//Движения.Налоговый.Записать(Ложь);

КонецПроцедуры // ФормированиеДвиженийРегл()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС 
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок, ФормироватьПроводки = Истина) Экспорт

	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаПоОС.Количество()=0  Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли; 
	
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		// Все необходимые движения делаются в партионном учете
		
	ИначеЕсли ОтразитьВСоставеМПЗ И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
			
		ТаблицаДляНДСПартии = Новый ТаблицаЗначений;
		ТаблицаДляНДСПартии.Колонки.Добавить("Номенклатура", 				Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаДляНДСПартии.Колонки.Добавить("ХарактеристикаНоменклатуры", 	Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаДляНДСПартии.Колонки.Добавить("СерияНоменклатуры", 			Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		ТаблицаДляНДСПартии.Колонки.Добавить("Количество",                  ПолучитьОписаниеТиповЧисла( 15, 3));
		ТаблицаДляНДСПартии.Колонки.Добавить("СчетУчетаБУ",                 Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		ТаблицаДляНДСПартии.Колонки.Добавить("Склад", 						Новый ОписаниеТипов("СправочникСсылка.Склады"));
			
		НоваяСтрока = ТаблицаДляНДСПартии.Добавить();
		НоваяСтрока.Номенклатура 				= СтруктураШапкиДокумента.НоменклатураМПЗ;
		НоваяСтрока.ХарактеристикаНоменклатуры 	= СтруктураШапкиДокумента.ХарактеристикаМПЗ;
		НоваяСтрока.СерияНоменклатуры 			= СтруктураШапкиДокумента.СерияМПЗ;
		НоваяСтрока.СчетУчетаБУ 				= СтруктураШапкиДокумента.СчетУчетаМПЗБУ;
		НоваяСтрока.Склад 						= СтруктураШапкиДокумента.СкладМПЗ;
		НоваяСтрока.Количество 					= ТаблицаПоОС.Количество();
			
		ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаДляНДСПартии, СтруктураШапкиДокумента, Ложь, мВалютаРегламентированногоУчета);
			
		ТаблицаДвиженийНДСПартии = Движения.НДСПартииТоваров;
		СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, ТаблицаДляНДСПартии, ТаблицаДвиженийНДСПартии, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства 
		Тогда

		//Отражения ввода в эксплуатацию объекта строительства
			
		//Вычислим коэффициент распределения
		Запрос = Новый Запрос;
			
		Запрос.УстановитьПараметр("КонецПериода"     	, Новый граница(новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка), ВидГраницы.Исключая));
		Запрос.УстановитьПараметр("Счет"       			, СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива);
		Запрос.УстановитьПараметр("Организация"			, СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("Объект"				, СтруктураШапкиДокумента.ОбъектСтроительства);
			
		ВидыСубконто = Новый Массив;
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
		
		ЕстьСубконто_СпособыСтроительства = не (СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства,"ВидСубконто") = Неопределено);
		
		Если ЕстьСубконто_СпособыСтроительства Тогда
			ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства);
			Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
			Запрос.УстановитьПараметр("ХозСпособСтроительства",  Перечисления.СпособыСтроительства.Хозспособ);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СУММА(ВЫБОР
			|			КОГДА Остатки.Субконто2 = &ХозСпособСтроительства
			|				ТОГДА 0
			|			ИНАЧЕ Остатки.СуммаОстаток
			|		КОНЕЦ) КАК СуммаОстаток,
			|	СУММА(ВЫБОР
			|			КОГДА Остатки.Субконто2 = &ХозСпособСтроительства
			|				ТОГДА Остатки.СуммаОстаток
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК Хозспособ_Остаток
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|		&КонецПериода,
			|		Счет = &Счет,
			|		&ВидыСубконто,
			|		Организация = &Организация
			|		    И Субконто1 = &Объект) КАК Остатки";
		Иначе
			Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);	
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Остатки.СуммаОстаток КАК СуммаОстаток,
			|	0 КАК Хозспособ_Остаток
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|		&КонецПериода,
			|		Счет = &Счет,
			|		&ВидыСубконто,
			|		Организация = &Организация
			|		    И Субконто1 = &Объект) КАК Остатки";
				
		КонецЕсли; 
			
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			СуммаОстатка = 0;
			СуммаОстатка_Хозспособ = 0;
		иначе
			Результат = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
			СуммаОстатка  = Результат.Итог("СуммаОстаток");
			СуммаОстатка_Хозспособ = Результат.Итог("Хозспособ_Остаток");
		КонецЕсли; 

		Если (СтруктураШапкиДокумента.СтоимостьБУ - СтруктураШапкиДокумента.СтоимостьБУХоз) > 0 Тогда
			
			Если (СуммаОстатка = 0) тогда
				СообщитьОбОшибке("Отстутствует (не определен) остаток по счету """ + СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива + """"+?(ЕстьСубконто_СпособыСтроительства," по способу строительства ""Подрядный""","")+" для объекта <"+СтруктураШапкиДокумента.ОбъектСтроительства + ">.",,Заголовок);
				КоэффициентРаспределения = 1;
			ИначеЕсли (СуммаОстатка < 0) Тогда
				СообщитьОбОшибке("Определен отрицательный остаток ("+Формат(СуммаОстатка, "ЧЦ=15; ЧДЦ=2")+") по счету """ + СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива + """"+?(ЕстьСубконто_СпособыСтроительства," по способу строительства ""Подрядный""","")+" для объекта <"+СтруктураШапкиДокумента.ОбъектСтроительства + ">.",,Заголовок);
				КоэффициентРаспределения = 1;
			Иначе
				КоэффициентРаспределения = (СтруктураШапкиДокумента.СтоимостьБУ - СтруктураШапкиДокумента.СтоимостьБУХоз)*ТаблицаПоОС.Количество()/СуммаОстатка;
			КонецЕсли;
			
			//Разблокируем полностью или частично вычет
			// отразим погашение события ОжидаетсяПринятиеКУчетуОбъектаСтроительства
			//СформироватьДвиженияПоРегиструНДСпоОСиНМА_ИзменениеТекущегоСостоянияНДС(СтруктураШапкиДокумента,
			//								СтруктураШапкиДокумента.ОбъектСтроительства,
			//								Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОбъектаСтроительства,
			//								Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство,СтруктураШапкиДокумента.Дата,
			//								КоэффициентРаспределения, Движения, Отказ);
		КонецЕсли;
		
		//Добавим необходимые события в рег. НДСпоОСиНМА по каждому ОС в табличной части		
		ТаблицаДвижений_НДСпоОСиНМА = Движения.НДСпоОСиНМА.Выгрузить();
		
		ОсобыеУсловияБлокировкиВычета2006 = (СтруктураШапкиДокумента.Дата >= '20060101');

		// Отразим НДС при принятии к учету ОС хоз способом.
	 //  	Если СтруктураШапкиДокумента.СтоимостьБУХоз > 0 Тогда
	 //   	
	 //   	СуммаНДСПоХозСпособу = РассчитатьСуммуНДС(СтруктураШапкиДокумента.СтоимостьБУХоз*ТаблицаПоОС.Количество(), Истина, Ложь, ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18));
	 //   	Если СтруктураШапкиДокумента.Дата >= '20060101' Тогда
	 //   		// НДС по хозспособу на джданный моемнт может быть уже начислен.
	 //   		// Необходимо определить долю погашения ранее начисленного НДС и долю текущего начисления
	 //   		Если (СуммаОстатка_Хозспособ = 0) тогда
	 //   			СообщитьОбОшибке("Отстутствует (не определен) остаток по счету """ + СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива + """"+?(ЕстьСубконто_СпособыСтроительства," по способу строительства ""Хозспособ""","")+" для объекта <"+СтруктураШапкиДокумента.ОбъектСтроительства + ">.",,Заголовок);
	 //   			КоэффициентРаспределения = 1;
	 //   		ИначеЕсли (СуммаОстатка_Хозспособ < 0) Тогда
	 //   			СообщитьОбОшибке("Определен отрицательный остаток ("+Формат(СуммаОстатка, "ЧЦ=15; ЧДЦ=2")+") по счету """ + СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива + """"+?(ЕстьСубконто_СпособыСтроительства," по способу строительства ""Хозспособ""","")+" для объекта <"+СтруктураШапкиДокумента.ОбъектСтроительства + ">.",,Заголовок);
	 //   			КоэффициентРаспределения = 1;
	 //   		Иначе
	 //   			КоэффициентРаспределения = (СтруктураШапкиДокумента.СтоимостьБУХоз)*ТаблицаПоОС.Количество()/СуммаОстатка_Хозспособ;
	 //   		КонецЕсли;
	 //   		
	 //   		// Отразим погашение события ОжидаетсяПринятиеКУчетуОбъектаСтроительства по СМР собственными силами (НДС начислен ранее).
	 //   		//СуммаБезНДСПоХозСпособу_НачисленоРанее = СформироватьДвиженияПоРегиструНДСпоОСиНМА_ИзменениеТекущегоСостоянияНДС_Хозспособ(СтруктураШапкиДокумента,
	 //   		//								СтруктураШапкиДокумента.ОбъектСтроительства,
	 //   		//								Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОбъектаСтроительства,
	 //   		//								Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство,СтруктураШапкиДокумента.Дата,
	 //   		//								КоэффициентРаспределения, Движения, Отказ);
	 //   										
	 //   		СуммаБезНДСПоХозСпособу = СтруктураШапкиДокумента.СтоимостьБУХоз - СуммаБезНДСПоХозСпособу_НачисленоРанее;
	 //   		СуммаНДСПоХозСпособу = РассчитатьСуммуНДС(СуммаБезНДСПоХозСпособу, Истина, Ложь, ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18));
	 //   		
	 //   		СтруктураШапкиДокумента.Вставить("СтоимостьБУХоз",СуммаБезНДСПоХозСпособу);
	 //   		
	 //   		ТаблицаДвижений_НДСпоОСиНМА = Движения.НДСпоОСиНМА.Выгрузить();
	 //   	КонецЕсли; 
	 //   	
	 //	  	Если СтруктураШапкиДокумента.СтоимостьБУХоз > 0 Тогда
	 //   		СформироватьДвиженияПоРегиструНДСНачисленныйПредъявленный_ПринятиеКУчету_ХозСпособ(СтруктураШапкиДокумента, Движения, Отказ,СтруктураШапкиДокумента.СтоимостьБУХоз*ТаблицаПоОС.Количество(),СуммаНДСПоХозСпособу);
	 //   		
	 //   		//Дополним ТаблицаДвижений_НДСпоОСиНМА 
	 //   		ТаблицаДвижений_НДСНачисленныйПредъявленный = Движения.НДСПредъявленный.Выгрузить();
	 //   		ЗагрузитьВТаблицуЗначений(ТаблицаДвижений_НДСНачисленныйПредъявленный,ТаблицаДвижений_НДСпоОСиНМА);
	 //   		//Дополним последнюю строку таблицы ТаблицаДвижений_НДСпоОСиНМА
	 //   		ТаблицаДвижений_НДСпоОСиНМА[ТаблицаДвижений_НДСпоОСиНМА.Количество()-1].Объект				 = СтруктураШапкиДокумента.ОбъектСтроительства;
	 //   		ТаблицаДвижений_НДСпоОСиНМА[ТаблицаДвижений_НДСпоОСиНМА.Количество()-1].НДСВключенВСтоимость = Ложь;
	 //   		ТаблицаДвижений_НДСпоОСиНМА[ТаблицаДвижений_НДСпоОСиНМА.Количество()-1].НеВлияетНаВычет = ОсобыеУсловияБлокировкиВычета2006;
	 //   		
	 //   		// Проводка по уплате НДС в бюджет
	 //   		Если СтруктураШапкиДокумента.СуммаНДС <> 0 И ФормироватьПроводки Тогда
	 //   			ПроводкаБУ = Движения.Хозрасчетный.Добавить();
	 //   			ПроводкаБУ.Период = СтруктураШапкиДокумента.Дата;
	 //   			ПроводкаБУ.Организация = СтруктураШапкиДокумента.Организация;
	 //   			ПроводкаБУ.Содержание = "Начислен НДС по строительству хоз. способом";
	 //   			
	 //   			ПроводкаБУ.СчетДт = ПланыСчетов.Хозрасчетный.НДСприСтроительствеОсновныхСредств;
	 //   			УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, "СФПолученные", СтруктураШапкиДокумента.Ссылка);
	 //   			
	 //   			ПроводкаБУ.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
	 //   			УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
	 //   			
	 //   			ПроводкаБУ.Сумма = СтруктураШапкиДокумента.СуммаНДС;
	 //   			
	 //   			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И Не Отказ Тогда
	 //   				Движения.Хозрасчетный.Записать(Ложь);
	 //   			КонецЕсли; 
	 //   		КонецЕсли;
	
////			КонецЕслИ;	
	 //   КонецЕсли;
		
		ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(Перечисления.НДССостоянияОСНМА.ОжидаетсяВводВЭксплуатацию,"Состояние");
		Если ОсобыеУсловияБлокировкиВычета2006 тогда
			 ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(Истина, "НеВлияетНаВычет");
		КонецЕсли;
		 
		Если СтруктураШапкиДокумента.ПринятиеКУчетуОдновременноСВводомВЭксплуатацию Тогда
			
			// По объектам строительства НДС можно принять к вычету только на следующий месяц после ввода в эксплуатацию
			// (в момент, когда можно начислять амортизацию по объекту). Необходимо заблокировать вычет до этого момента.
			// Так как дальнейшая обработка по подсистеме НДС полученных объектов ОС не планируется,
			// не производим разделение по конкрентным ОС, отражаем целиком по объекту строительства

            // Заблокируем вычет в текущем месяце
			Движения.НДСпоОСиНМА.мПериод          = СтруктураШапкиДокумента.Дата;
			Движения.НДСпоОСиНМА.мТаблицаДвижений = ТаблицаДвижений_НДСпоОСиНМА;
			Движения.НДСпоОСиНМА.ВыполнитьПриход();
			
			//на след. месяц разблокируем вычет по ОС введенн. в экспл.
			ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(НачалоМесяца(ДобавитьМесяц((СтруктураШапкиДокумента.Дата),1)),"Период");
			Движения.НДСпоОСиНМА.мТаблицаДвижений = ТаблицаДвижений_НДСпоОСиНМА;
			Движения.НДСпоОСиНМА.ВыполнитьРасход();
			
		Иначе
			// По объектам строительства НДС можно принятть к вычету только на следующий месяц после ввода в эксплуатацию
			// (в момент, когда можно начислять амортизацию по объекту). Необходимо заблокировать вычет до этого момента.
			// Дальше объект строительства фигурировать не будет, 
			// необходимо распределить НДС по конкретным ОС для дальнейшей обработки (при принятии к учету).
			ТаблицаДвижений_НДСпоОСиНМА_Базовая = ТаблицаДвижений_НДСпоОСиНМА.Скопировать();
			ТаблицаДвижений_НДСпоОСиНМА.Очистить();
			Для каждого СтрокаОС Из ТаблицаПоОС Цикл
				ТаблицаДвижений_НДСпоОСиНМА_Базовая.ЗаполнитьЗначения(СтрокаОС.ОсновноеСредство,"Объект");
				ЗагрузитьВТаблицуЗначений(ТаблицаДвижений_НДСпоОСиНМА_Базовая,ТаблицаДвижений_НДСпоОСиНМА);
			КонецЦикла; 
			
			Распределение = Новый Структура("СуммаБезНДС,НДС");
			Отбор         = Новый Структура("СчетФактура,ВидЦенности,СтавкаНДС,СчетУчетаНДС,НДСВключенВСтоимость");
			
			ТаблицаДвижений_НДСпоОСиНМА = СформироватьКорректирующиеЗаписи(ТаблицаДвижений_НДСпоОСиНМА_Базовая,ТаблицаДвижений_НДСпоОСиНМА,Распределение,Отбор); 
			
			// Заблокируем вычет в текущем месяце
			Движения.НДСпоОСиНМА.мПериод          = СтруктураШапкиДокумента.Дата;
			Движения.НДСпоОСиНМА.мТаблицаДвижений = ТаблицаДвижений_НДСпоОСиНМА;
			Движения.НДСпоОСиНМА.ВыполнитьПриход();
			
		КонецЕсли; 	
		
				
	КонецЕсли;
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

// Процедура формирует стоимость ОС, в соответствии с количеством ОС в таб.части
//
Процедура ПодготовитьТаблицаОС( СтруктураШапкиДокумента, ТаблицаПоОС)
	
	ТипЧисло = ПолучитьОписаниеТиповЧисла( 15, 2);
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		ТаблицаПоОС.Колонки.Добавить("СуммаОС_УУ",     ТипЧисло);
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ТаблицаПоОС.Колонки.Добавить("СуммаОС_БУ",     ТипЧисло);
		ТаблицаПоОС.Колонки.Добавить("СуммаОС_БУ_Хоз", ТипЧисло);
		ТаблицаПоОС.Колонки.Добавить("СуммаОС_НДС",    ТипЧисло);
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ТаблицаПоОС.Колонки.Добавить("СуммаОС_НУ",     ТипЧисло);
		ТаблицаПоОС.Колонки.Добавить("СуммаОС_НУ_Хоз", ТипЧисло);
		ТаблицаПоОС.Колонки.Добавить("СуммаОС_ПР",     ТипЧисло);
		ТаблицаПоОС.Колонки.Добавить("СуммаОС_ПР_Хоз", ТипЧисло);
		ТаблицаПоОС.Колонки.Добавить("СуммаОС_ВР",     ТипЧисло);
		ТаблицаПоОС.Колонки.Добавить("СуммаОС_ВР_Хоз", ТипЧисло);
	КонецЕсли;
	
	МассивКоэф = Новый Массив(ТаблицаПоОС.Количество());
	Для К = 0 По МассивКоэф.ВГраница() Цикл
		МассивКоэф[К] = 1;
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		МассивСуммУУ     = РаспределитьПропорционально( СтруктураШапкиДокумента.Стоимость,      МассивКоэф, 2);
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		МассивСуммБУ     = РаспределитьПропорционально( СтруктураШапкиДокумента.СтоимостьБУ,    МассивКоэф, 2);
		МассивСуммБУ_Хоз = РаспределитьПропорционально( СтруктураШапкиДокумента.СтоимостьБУХоз, МассивКоэф, 2);
		МассивСуммБУ_НДС = РаспределитьПропорционально( СтруктураШапкиДокумента.СуммаНДС,       МассивКоэф, 2);
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		МассивСуммНУ     = РаспределитьПропорционально( СтруктураШапкиДокумента.СтоимостьНУ,    МассивКоэф, 2);
		МассивСуммНУ_Хоз = РаспределитьПропорционально( СтруктураШапкиДокумента.СтоимостьНУХоз, МассивКоэф, 2);
		МассивСуммПР     = РаспределитьПропорционально( СтруктураШапкиДокумента.СтоимостьПР,    МассивКоэф, 2);
		МассивСуммПР_Хоз = РаспределитьПропорционально( СтруктураШапкиДокумента.СтоимостьПРХоз, МассивКоэф, 2);
		МассивСуммВР     = РаспределитьПропорционально( СтруктураШапкиДокумента.СтоимостьВР,    МассивКоэф, 2);
		МассивСуммВР_Хоз = РаспределитьПропорционально( СтруктураШапкиДокумента.СтоимостьвРХоз, МассивКоэф, 2);
	КонецЕсли;
	
	Для К = 0 По МассивКоэф.ВГраница() Цикл
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			Если НЕ МассивСуммУУ     = Неопределено Тогда
				ТаблицаПоОС[К].СуммаОС_УУ     = МассивСуммУУ    [К];
			КонецЕсли;
		КонецЕсли;
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			Если НЕ МассивСуммБУ     = Неопределено Тогда
				ТаблицаПоОС[К].СуммаОС_БУ     = МассивСуммБУ    [К];
			КонецЕсли;
			Если НЕ МассивСуммБУ_НДС = Неопределено Тогда
				ТаблицаПоОС[К].СуммаОС_НДС    = МассивСуммБУ_НДС[К];
			КонецЕсли;
			Если НЕ МассивСуммБУ_Хоз = Неопределено Тогда
				ТаблицаПоОС[К].СуммаОС_БУ_Хоз = МассивСуммБУ_Хоз[К];
			КонецЕсли;
		КонецЕсли;
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			Если НЕ МассивСуммНУ     = Неопределено Тогда
				ТаблицаПоОС[К].СуммаОС_НУ     = МассивСуммНУ    [К];
			КонецЕсли;
			Если НЕ МассивСуммНУ_Хоз = Неопределено Тогда
				ТаблицаПоОС[К].СуммаОС_НУ_Хоз = МассивСуммНУ_Хоз[К];
			КонецЕсли;
			Если НЕ МассивСуммПР     = Неопределено Тогда
				ТаблицаПоОС[К].СуммаОС_ПР     = МассивСуммПР    [К];
			КонецЕсли;
			Если НЕ МассивСуммПР_Хоз = Неопределено Тогда
				ТаблицаПоОС[К].СуммаОС_ПР_Хоз = МассивСуммПР_Хоз[К];
			КонецЕсли;
			Если НЕ МассивСуммВР     = Неопределено Тогда
				ТаблицаПоОС[К].СуммаОС_ВР     = МассивСуммВР    [К];
			КонецЕсли;
			Если НЕ МассивСуммВР_Хоз = Неопределено Тогда
				ТаблицаПоОС[К].СуммаОС_ВР_Хоз = МассивСуммВР_Хоз[К];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицаОС()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
		СтрокаТабличнойЧасти = ОсновныеСредства.Добавить();
		СтрокаТабличнойЧасти.ОсновноеСредство = Основание.Ссылка;
		СтрокаТабличнойЧасти.ИнвентарныйНомер = Основание.Код;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = СформироватьДеревоПолейЗапросаПоШапке();
	
	//ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетПоСкладамВРазрезеОрганизаций"   , "ВестиУчетПоСкладамВРазрезеОрганизаций");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		мУчетнаяПолитикаУпр   = ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ);
	КонецЕсли;
	
	//Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда 
	//	мУчетнаяПолитикаБух   = ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ, СтруктураШапкиДокумента.Организация, "Бух");
	//КонецЕсли;
	//
	//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
	//	мУчетнаяПолитикаНал   = ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ, СтруктураШапкиДокумента.Организация, "Нал");
	//КонецЕсли;
	//
	//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
	//	мУчетнаяПолитикаРегл = РегистрыСведений.УчетнаяПолитикаОбщаяДляРегламентированногоУчета.ПолучитьПоследнее(Дата);
	//КонецЕсли;

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ = Ложь) Экспорт
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ОсновноеСредство", "ОсновноеСредство");
	СтруктураПолей.Вставить("ИнвентарныйНомер", "ИнвентарныйНомер");

	РезультатЗапросаПоОС = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОсновныеСредства", СтруктураПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();
	
	Отказ = Отказ Или ТаблицаПоОС.Количество()=0;

	Если НЕ Отказ Тогда
		
		ПодготовитьТаблицаОС( СтруктураШапкиДокумента, ТаблицаПоОС);
	
	КонецЕсли;

КонецПроцедуры // СформироватьТаблицыДокумента()

Процедура ОбработкаПроведения(Отказ,РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоОС;
	
	//Если мУдалятьДвижения Тогда
	//	УдалитьДвиженияРегистратора(ЭтотОбъект,Отказ);
	//КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейШапки(СтруктураШапкиДокумента), Отказ, Заголовок);

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ);
	
	ПроверкаРеквизитовТЧ( РежимПроведения, ТаблицаПоОС, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
	//	
	//	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Строки".
	//	СтруктураПолей = Новый Структура();
	//	СтруктураПолей.Вставить("ОсновноеСредство"	,"ОсновноеСредство");
	//	СтруктураПолей.Вставить("ДатаОплаты"		,"ДатаОплаты");
	//	СтруктураПолей.Вставить("СуммаОплаты"  		,"СуммаОплаты");
	//	
	//	РезультатЗапросаПоСтрокам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Оплата", СтруктураПолей);
	//	ТаблицаОплат = РезультатЗапросаПоСтрокам.Выгрузить();
	//	
	//	ПроверитьЗаполнениеТабличнойЧастиОплата( ТаблицаОплат, СтруктураШапкиДокумента, Отказ, Заголовок);
	//	
	//Иначе
	//	
		ТаблицаОплат = Оплата.Выгрузить();
	//	
	//КонецЕсли;

	ПодготовитьПараметрыУчетнойПолитики(Отказ, СтруктураШапкиДокумента);
	
	Если НЕ Отказ Тогда
		// Формирование движений регистров, бухгалтерских и налоговых проводок.
		ФормированиеДвижений(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаОплат, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗначениеНеЗаполнено(СтавкаНДС) Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
	Если Оплата.Количество() > 0 Тогда
		КоличествоСтрок = Оплата.Количество();
		Для Счетчик = 1 По (КоличествоСтрок) Цикл
			Строка = Оплата[КоличествоСтрок - Счетчик];
			Если ОсновныеСредства.Найти(Строка.ОсновноеСредство, "ОсновноеСредство") = Неопределено Тогда
				Оплата.Удалить(КоличествоСтрок - Счетчик);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	  //{Лапенков
	//ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект);
	//}Лапенков
	мУдалятьДвижения = НЕ ЭтоНовый();
	
		
	Если НЕ Отказ Тогда
		
		обЗаписатьПротоколИзменений(ЭтотОбъект);
		
	КонецЕсли; 


КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	мДокументСозданКопированием = Истина;

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	
	//УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, ложь);

КонецПроцедуры // ОбработкаУдаленияПроведения

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	//ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	//РегистрацияОбъектовДоступаДокумента(Ссылка, Новый Структура("Организация",
	//														Организация));
КонецПроцедуры


мДокументСозданКопированием = Ложь;
мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
