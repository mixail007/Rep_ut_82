////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период

Перем мСтруктураПоложенийКолонок;
Перем мКолонкиТовары;
Перем мПоказыватьКод, мПоказыватьАртикул;

// Флаги показа колонок
Перем ПоказыватьКоличество Экспорт;
Перем ПоказыватьСумму Экспорт;
Перем СоответствиеМесяцев Экспорт;

Перем мПечатнаяФормаПоУмолчанию;



Процедура СформироватьКолонкиТЧ()
	СписокМ=Новый СписокЗначений;
	
	СтандартнаяОбработка = Ложь;
	СписокМ.Очистить();
	НачПериод=НачалоМесяца(ДатаНачалаПланирования);
	Конпериод=НачалоМесяца(ДатаОкончанияПланирования);
	пПериод=НачПериод;
	
	Пока пПериод<=Конпериод цикл
		СписокМ.Добавить(пПериод,Формат(пПериод,"ДФ='MMMM yyyy'"));
		пПериод=ДобавитьМесяц(пПериод,1);
	КонецЦикла;	
	//ОткрытьФормуВыбораПроизводителей();
	
	//
	СписокДобавленныхМесяцев = Новый СписокЗначений;
	
	Месяцы.Очистить();
	Для Каждого ЭлементСпискаМесяцев Из СписокМ Цикл
		СтрокаМесяцы = Месяцы.Добавить();
		СтрокаМесяцы.Месяц = ЭлементСпискаМесяцев.Значение;
		Если СписокМесяцев.НайтиПоЗначению(СтрокаМесяцы.Месяц) = Неопределено Тогда
			СписокДобавленныхМесяцев.Добавить(СтрокаМесяцы.Месяц);
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьСписокМесяцев();
	
	// Установим кнопки подменю "Изменить"
	//УстановитьПодменюВыбораИзмененияПоТипуЦен(ЭлементыФормы.КоманднаяПанельТаблицыТиповЦен.Кнопки.ДействиеИзменить,
	//                                          Новый Действие("КоманднаяПанельТаблицыТиповЦенДействиеИзменить"));
	
	
	// обновим состав колонок
	ОбновитьСоставКолонок();
	ПолучитьСтруктуруПоложенийКолонок();
	ВидимостьКолонок();

КонецПроцедуры

//Функция ОткрытьФормуВыбораПроизводителей()

//	ФормаВыбораПроизводителей = ПолучитьФорму("ФормаВыбораПроизводителей", ЭтаФорма);

//	ФормаВыбораПроизводителей.СписокПроизводителей.ЗагрузитьЗначения(Производители.ВыгрузитьКолонку("Производитель"));

//	Возврат ФормаВыбораПроизводителей.ОткрытьМодально();

//КонецФункции // ОткрытьФормуВыбораПроизводителей()


//Процедура СписокПроизводителейОчистка(Элемент, СтандартнаяОбработка)

//	СтандартнаяОбработка = Ложь;

//	Производители.Очистить();
//	СписокПроизводителей.Очистить();

//	// Обновим список Производителей
//	ЗаполнитьСписокПроизводителей();

//	//УстановитьПодменюВыбораИзмененияПоТипуЦен(ЭлементыФормы.КоманднаяПанельТаблицыТиповЦен.Кнопки.ДействиеИзменить,
//	//										  Новый Действие("КоманднаяПанельТаблицыТиповЦенДействиеИзменить"));

//	// обновим состав колонок
//	ОбновитьСоставКолонок();
//	ПолучитьСтруктуруПоложенийКолонок();
//	ВидимостьКолонок();

//КонецПроцедуры

Процедура ЗаполнитьСписокМесяцев()

	СписокМесяцев.Очистить();
	Для Каждого СтрокаМесяцев Из Месяцы Цикл
		Если  ЗначениеЗаполнено(СтрокаМесяцев.Месяц) Тогда
			СписокМесяцев.Добавить(СтрокаМесяцев.Месяц,Формат(СтрокаМесяцев.Месяц,"ДФ='MMMM yyyy'"));
		КонецЕсли;
	КонецЦИкла;

КонецПроцедуры // ЗаполнитьСписокПроизводителей()

Процедура ОбновитьСоставКолонок()

	// надо расположить все нужные колонки в правильном порядке
	// сначала должна идти колонка номенклатуры
	КолонкиТаблицыМесяцев = ТаблицаМесяцев.Колонки;
	ОчереднойНомерКолонки = 1;

	ТекущаяКолонка = КолонкиТаблицыМесяцев.Найти("СтатьяЗатрат");
	СдвинутьКолонку(ТекущаяКолонка, ОчереднойНомерКолонки);

	Для Каждого СтрокаМесяцы Из Месяцы Цикл

		Если не ЗначениеЗаполнено(СтрокаМесяцы.Месяц) Тогда
			Продолжить;
		КонецЕсли;

		НомерСоответствияТекущейКолонки = СоответствиеМесяцев.Получить(СтрокаМесяцы.Месяц);
		Если НомерСоответствияТекущейКолонки = Неопределено Тогда
			НомерСоответствияТекущейКолонки = СоответствиеМесяцев.Количество();
			СоответствиеМесяцев.Вставить(СтрокаМесяцы.Месяц, СоответствиеМесяцев.Количество());
		КонецЕсли;

		//ТекущаяКолонка = КолонкиТаблицыМесяцев.Найти("количество" + НомерСоответствияТекущейКолонки);
		//Если ТекущаяКолонка = Неопределено Тогда
		//	// надо вставить
		//	ТаблицаМесяцев.Колонки.Вставить(ОчереднойНомерКолонки, "количество" + НомерСоответствияТекущейКолонки, ПолучитьОписаниеТиповЧисла(15, 2), Формат(СтрокаМесяцы.Месяц,"ДФ='MMMM yyyy'"), 10);
		//	ОчереднойНомерКолонки = ОчереднойНомерКолонки + 1;
		//Иначе
		//	СдвинутьКолонку(ТекущаяКолонка, ОчереднойНомерКолонки);
		//КонецЕсли;
		
		ТекущаяКолонка = КолонкиТаблицыМесяцев.Найти("сумма" + НомерСоответствияТекущейКолонки);
		Если ТекущаяКолонка = Неопределено Тогда
			// надо вставить
			ТаблицаМесяцев.Колонки.Вставить(ОчереднойНомерКолонки, "сумма" + НомерСоответствияТекущейКолонки, ПолучитьОписаниеТиповЧисла(15, 2), Формат(СтрокаМесяцы.Месяц,"ДФ='MMMM yyyy'"), 10);
			ОчереднойНомерКолонки = ОчереднойНомерКолонки + 1;
		Иначе
			СдвинутьКолонку(ТекущаяКолонка, ОчереднойНомерКолонки);
		КонецЕсли;


	КонецЦикла;

	// все, что за пределами, надо удалить
	Для НомерУдаляемойКолонки = ОчереднойНомерКолонки По КолонкиТаблицыМесяцев.Количество()-1 Цикл
		КолонкиТаблицыМесяцев.Удалить(ОчереднойНомерКолонки);
	КонецЦикла;

	ЭлементыФормы.ТаблицаМесяцев.СоздатьКолонки();

	Для Каждого СтрокаМесяцы Из Месяцы Цикл
		//й = ЭлементыФормы.ТаблицаМесяцев.Колонки.Найти("количество"+СоответствиеМесяцев[СтрокаМесяцы.Месяц]);
		//Если й <> Неопределено Тогда
		//	й.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
		//КонецЕсли;
		й = ЭлементыФормы.ТаблицаМесяцев.Колонки.Найти("сумма"+СоответствиеМесяцев[СтрокаМесяцы.Месяц]);
		Если й <> Неопределено Тогда
			й.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
		КонецЕсли;

	КонецЦикла;
	
	// Установим недостающие параметры
	УстановитьНедостающиеПараметры();

КонецПроцедуры // ОбновитьСоставКолонок()

Процедура УстановитьНедостающиеПараметры()

	// Добавим недостающие колонки

	ЭлементыФормы.ТаблицаМесяцев.Колонки.ИндексСтрокиТаблицыМесяцев.ТолькоПросмотр = Истина;

	// Установим необходимые параметры номенклатуры
	//ЭлементыФормы.ТаблицаПроизводителей.Колонки.Контрагент.ЭлементУправления.УстановитьДействие("ПриИзменении", Новый Действие("ТаблицаПроизводителейПриИзменении"));
	ЭлементыФормы.ТаблицаМесяцев.Колонки.СтатьяЗатрат.ЭлементУправления.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ЭлементыФормы.ТаблицаМесяцев.Колонки.СтатьяЗатрат.АвтоОтметкаНезаполненного = Истина;
	
	
	ЭлементыФормы.ТаблицаПродаж.Колонки.ИндексСтрокиТаблицыМесяцев.ТолькоПросмотр = Истина;

	// Установим необходимые параметры номенклатуры
	//ЭлементыФормы.ТаблицаПроизводителей.Колонки.Контрагент.ЭлементУправления.УстановитьДействие("ПриИзменении", Новый Действие("ТаблицаПроизводителейПриИзменении"));

	ЭлементыФормы.ТаблицаПродаж.Колонки.ВидТовара.АвтоОтметкаНезаполненного = Истина;

КонецПроцедуры // УстановитьНедостающиеПараметры()

Процедура ПолучитьСтруктуруПоложенийКолонок()

	ИмяСохраненныхЗначений = Метаданные().Имя
							 + "_" + ПоказыватьСумму;
							 

	мСтруктураПоложенийКолонок = Новый Структура();
	попытка
	мСтруктураПоложенийКолонок.Вставить("Количество",ПоложениеКолонки.НаСледующейСтроке);
	мСтруктураПоложенийКолонок.Вставить("ПроцентНаценки",ПоложениеКолонки.НаСледующейСтроке);

	Исключение
	КонецПопытки;
    мСтруктураПоложенийКолонок.Вставить("Сумма"    , ПоложениеКолонки.НоваяКолонка);
    
КонецПроцедуры // ПолучитьСтруктуруПоложенийКолонок()

Процедура ВидимостьКолонок()

	БылаНоваяКолонка = Ложь;
	Для Каждого КолонкаМесяцы Из ЭлементыФормы.ТаблицаМесяцев.Колонки Цикл
		ПризнакКолонки = Лев(КолонкаМесяцы.Имя, 4);
		Если ПризнакКолонки = "коли" Тогда
			КолонкаМесяцы.Видимость = ПоказыватьКоличество;
			КолонкаМесяцы.Положение = мСтруктураПоложенийКолонок.Количество;
			БылаНоваяКолонка = Истина;
		ИначеЕсли ПризнакКолонки = "сумм" Тогда
			КолонкаМесяцы.Видимость = ПоказыватьСумму;
			КолонкаМесяцы.Положение = мСтруктураПоложенийКолонок.Сумма;
			БылаНоваяКолонка = Истина;
        КонецЕсли
	КонецЦикла;
	
	БылаНоваяКолонка = Ложь;
	Для Каждого КолонкаПродажи Из ЭлементыФормы.ТаблицаПродаж.Колонки Цикл
		ПризнакКолонки = Лев(КолонкаПродажи.Имя, 4);
		Если ПризнакКолонки = "коли" Тогда
			КолонкаПродажи.Видимость = истина;
			КолонкаПродажи.Положение = мСтруктураПоложенийКолонок.Количество;
			БылаНоваяКолонка = Истина;
		ИначеЕсли ПризнакКолонки = "сумм" Тогда
			КолонкаПродажи.Видимость = истина;
			КолонкаПродажи.Положение = мСтруктураПоложенийКолонок.Сумма;
			БылаНоваяКолонка = Истина;
		ИначеЕсли ПризнакКолонки = "проц" Тогда
			КолонкаПродажи.Видимость = истина;
			КолонкаПродажи.Положение = мСтруктураПоложенийКолонок.ПроцентНаценки;
			БылаНоваяКолонка = Истина;	
        КонецЕсли
	КонецЦикла;


КонецПроцедуры // ВидимостьКолонок()

Процедура СдвинутьКолонку(Колонка, ОчереднойНомерКолонки)

	КолонкиМесяцев = ТаблицаМесяцев.Колонки;

	ТекущийНомерКолонки = КолонкиМесяцев.Индекс(Колонка);
	Если ТекущийНомерКолонки <> ОчереднойНомерКолонки Тогда
		// сдвинем колонку
		КолонкиМесяцев.Сдвинуть(ТекущийНомерКолонки, ОчереднойНомерКолонки - ТекущийНомерКолонки);
	КонецЕсли;

	ВсегоКолонок          = КолонкиМесяцев.Количество();
	ОчереднойНомерКолонки = ОчереднойНомерКолонки + 1;
	ОчереднойНомерКолонки = ?(ОчереднойНомерКолонки > ВсегоКолонок, ВсегоКолонок, ОчереднойНомерКолонки);

КонецПроцедуры // СдвинутьКолонку()

Функция ПолучитьПоложениеКолонки(ИмяСохраненногоЗначения)

	ПоложениеКолонкиСтрока = ВосстановитьЗначение(ИмяСохраненногоЗначения);

	Если ПоложениеКолонкиСтрока = "На следующей строке" Тогда
		Возврат ПоложениеКолонки.НаСледующейСтроке;
	ИначеЕсли ПоложениеКолонкиСтрока = "В той же колонке" Тогда
		Возврат ПоложениеКолонки.ВТойЖеКолонке;
	ИначеЕсли ПоложениеКолонкиСтрока = "Новая колонка" Тогда
		Возврат ПоложениеКолонки.НоваяКолонка;
	Иначе

		// Значение еще не было сохранено
		// Надо взять настройку по умолчанию и сохранить ее для последующей работы
		Если Прав(ИмяСохраненногоЗначения, 1) = "0" Тогда
			// Цена на новой колонке
			ПоложениеКолонкиСтрока = "Новая колонка";
		ИначеЕсли Прав(ИмяСохраненногоЗначения, 1) = "1" Тогда
			// Валюта на следующей строке
			ПоложениеКолонкиСтрока = "На следующей строке";
		Иначе
			// Основная единица измерения и процент скидки/наценки в той же колонке
			ПоложениеКолонкиСтрока = "В той же колонке";
		КонецЕсли;
		СохранитьЗначение(ИмяСохраненногоЗначения, ПоложениеКолонкиСтрока);

		Возврат ПолучитьПоложениеКолонки(ИмяСохраненногоЗначения);
	КонецЕсли;

КонецФункции // ПолучитьПоложениеКолонки()

//Процедура ТаблицаПроизводителейПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
//	Если ЭлементыФормы.ТаблицаПроизводителей.Колонки.Найти("ИндексСтрокиТаблицыПроизводителей") <> Неопределено
//		И ЭлементыФормы.ТаблицаПроизводителей.Колонки.ИндексСтрокиТаблицыПроизводителей.Видимость Тогда
//		ОформлениеСтроки.Ячейки.ИндексСтрокиТаблицыПроизводителей.ОтображатьТекст = Истина;
//		ОформлениеСтроки.Ячейки.ИндексСтрокиТаблицыПроизводителей.Текст = Формат(ТаблицаПроизводителей.Индекс(ДанныеСтроки) + 1,"ЧРГ=");
//	КонецЕсли;
//		
//	// Поставим автоотметку незаполненного.
//	Для каждого СтрокаПроизводители Из Производители Цикл
//		
//		НомерСоответствияТекущейКолонки = СоответствиеПроизводителей.Получить(СтрокаПроизводители.Производитель);
//	
//	КонецЦикла;
//	
//КонецПроцедуры


Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	СписокДобавленныхМесяцев = Новый СписокЗначений;
	
	Месяцы.Очистить();
	Для Каждого ЭлементСпискаМесяцев Из ЗначениеВыбора.СписокМесяцев Цикл
		СтрокаМесяцы = Месяцы.Добавить();
		СтрокаМесяцы.Месяц = ЭлементСпискаМесяцев.Значение;
		Если СписокМесяцев.НайтиПоЗначению(СтрокаМесяцы.Месяц) = Неопределено Тогда
			СписокДобавленныхМесяцев.Добавить(СтрокаМесяцы.Месяц);
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьСписокМесяцев();
	
	// Установим кнопки подменю "Изменить"
	//УстановитьПодменюВыбораИзмененияПоТипуЦен(ЭлементыФормы.КоманднаяПанельТаблицыТиповЦен.Кнопки.ДействиеИзменить,
	//                                          Новый Действие("КоманднаяПанельТаблицыТиповЦенДействиеИзменить"));
	
	
	// обновим состав колонок
	//ОбновитьСоставКолонок();
	//ПолучитьСтруктуруПоложенийКолонок();
	//ВидимостьКолонок();
	//ДоступностьКолонок();
	
КонецПроцедуры // ОбработкаВыбора()


//Процедура ТаблицаПроизводителейВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
//	// Вставить содержимое обработчика.
//КонецПроцедуры


Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

    ПоказыватьСумму                = истина;
	//ПоказыватьКоличество           = ?(ПоказыватьКоличество = Неопределено, Истина, ПоказыватьКоличество);
	СоответствиеМесяцев = Новый Соответствие;

	Для Каждого СтрокаМесяцы Из Месяцы Цикл
		НомерСоответствияТекущейКолонки = Месяцы.Индекс(СтрокаМесяцы);
		СоответствиеМесяцев.Вставить(СтрокаМесяцы.Месяц, НомерСоответствияТекущейКолонки);

		Если ТаблицаМесяцев.Колонки.Найти("сумма" + НомерСоответствияТекущейКолонки) = Неопределено Тогда
			ТаблицаМесяцев.Колонки.Добавить("сумма" + НомерСоответствияТекущейКолонки, ПолучитьОписаниеТиповЧисла(15, 2), Формат(СтрокаМесяцы.Месяц,"ДФ='MMMM yyyy'"), 15);
		КонецЕсли;
		
		Если ТаблицаПродаж.Колонки.Найти("сумма" + НомерСоответствияТекущейКолонки) = Неопределено Тогда
			ТаблицаПродаж.Колонки.Добавить("сумма" + НомерСоответствияТекущейКолонки, ПолучитьОписаниеТиповЧисла(15, 2), Формат(СтрокаМесяцы.Месяц,"ДФ='MMMM yyyy'")+"(сумм.)", 30);
		КонецЕсли;
		
		Если ТаблицаПродаж.Колонки.Найти("количество" + НомерСоответствияТекущейКолонки) = Неопределено Тогда
			ТаблицаПродаж.Колонки.Добавить("количество" + НомерСоответствияТекущейКолонки, ПолучитьОписаниеТиповЧисла(15, 0), Формат(СтрокаМесяцы.Месяц,"ДФ='MMMM yyyy'")+"(кол.)", 30);
		КонецЕсли;
		
		Если ТаблицаПродаж.Колонки.Найти("процнаценки" + НомерСоответствияТекущейКолонки) = Неопределено Тогда
			ТаблицаПродаж.Колонки.Добавить("процнаценки" + НомерСоответствияТекущейКолонки, ПолучитьОписаниеТиповЧисла(15, 2), Формат(СтрокаМесяцы.Месяц,"ДФ='MMMM yyyy'")+"(% наценки)", 30);
		КонецЕсли;



	КонецЦикла;

КонецПроцедуры


Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	СтатьиЗатрат.Очистить();
	Для Каждого СтрокаТаблицыМесяцев Из ТаблицаМесяцев Цикл
		Для Каждого СтрокаМесяцы Из Месяцы Цикл
			НомерСоответствияТекущейКолонки = СоответствиеМесяцев.Получить(СтрокаМесяцы.Месяц);
			НоваяСтрока = СтатьиЗатрат.Добавить();
			НоваяСтрока.ИндексСтрокиТаблицыМесяцев     = ТаблицаМесяцев.Индекс(СтрокаТаблицыМесяцев);
			НоваяСтрока.СтатьяЗатрат                = СтрокаТаблицыМесяцев.СтатьяЗатрат;
			НоваяСтрока.Месяц             	  = СтрокаМесяцы.Месяц;
			НоваяСтрока.Сумма           	  = СтрокаТаблицыМесяцев["сумма"    + НомерСоответствияТекущейКолонки];
		КонецЦикла;
	КонецЦикла;
	
	Продажи.Очистить();
	Для Каждого СтрокаТаблицыПродаж Из ТаблицаПродаж Цикл
		Для Каждого СтрокаМесяцы Из Месяцы Цикл
			НомерСоответствияТекущейКолонки = СоответствиеМесяцев.Получить(СтрокаМесяцы.Месяц);
			НоваяСтрока = Продажи.Добавить();
			НоваяСтрока.ИндексСтрокиТаблицыМесяцев     = ТаблицаПродаж.Индекс(СтрокаТаблицыПродаж);
			НоваяСтрока.ВидТовара                = СтрокаТаблицыПродаж.ВидТовара;
			НоваяСтрока.Месяц             	  = СтрокаМесяцы.Месяц;
			НоваяСтрока.Сумма           	  = СтрокаТаблицыПродаж["сумма"    + НомерСоответствияТекущейКолонки];
			НоваяСтрока.Количество           	  = СтрокаТаблицыПродаж["Количество"    + НомерСоответствияТекущейКолонки];
			НоваяСтрока.ПроцНаценки           	  = СтрокаТаблицыПродаж["ПроцНаценки"    + НомерСоответствияТекущейКолонки];
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры


Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// быть может, это ввод на основании
		//===Если ЗначениеНеЗаполнено(ПараметрОснование) Тогда
		//	// Заполнить реквизиты значениями по умолчанию.
			
			////#ИСПРАВИТЬ 
			//ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь") ,,ПараметрОбъектКопирования,ПараметрОснование);
			ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
			ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь, ВалютаРегламентированногоУчета, "");
									//(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),, ТипОперации = "")	
		//	УстановитьНомерДокумента(ЭтотОбъект);
		//КонецЕсли;

	КонецЕсли;

	// Проверим корректность записанного документа, если он некорректен, исправим его
	Если Месяцы.Количество() = 0 И СтатьиЗатрат.Количество() > 0 Тогда
		Сообщить("Документ " + СокрЛП(Ссылка) + " был записан некорректно! Информация о планах очищена.");
		СтатьиЗатрат.Очистить();
	КонецЕсли;
	
	Если Месяцы.Количество() = 0 И Продажи.Количество() > 0 Тогда
		Сообщить("Документ " + СокрЛП(Ссылка) + " был записан некорректно! Информация о планах очищена.");
		Продажи.Очистить();
	КонецЕсли;


	ЗаполнитьСписокМесяцев();

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("СтатьяЗатрат");

	// Установить ограничение - изменять видимоть колонок для таличного поля 
	//УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ТаблицаМесяцев.Колонки, СтруктураКолонок);

	ЗаполнитьТаблицуМесяцевФормы();
	ЗаполнитьТаблицуПродажФормы();

	ЭлементыФормы.ТаблицаМесяцев.СоздатьКолонки();
	
	ЭлементыФормы.ТаблицаПродаж.СоздатьКолонки();

	Для Каждого СтрокаМесяцы Из Месяцы Цикл
		й = ЭлементыФормы.ТаблицаМесяцев.Колонки.Найти("сумма"+СоответствиеМесяцев[СтрокаМесяцы.Месяц]);
		Если й <> Неопределено Тогда
			й.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
		КонецЕсли;

	КонецЦикла;
	
	Для Каждого СтрокаМесяцы Из Месяцы Цикл
		й = ЭлементыФормы.ТаблицаПродаж.Колонки.Найти("сумма"+СоответствиеМесяцев[СтрокаМесяцы.Месяц]);
		Если й <> Неопределено Тогда
			й.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
		КонецЕсли;
		
		й = ЭлементыФормы.ТаблицаПродаж.Колонки.Найти("количество"+СоответствиеМесяцев[СтрокаМесяцы.Месяц]);
		Если й <> Неопределено Тогда
			й.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
		КонецЕсли;
		
		й = ЭлементыФормы.ТаблицаПродаж.Колонки.Найти("ПроцНаценки"+СоответствиеМесяцев[СтрокаМесяцы.Месяц]);
		Если й <> Неопределено Тогда
			й.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
		КонецЕсли;



	КонецЦикла;
	
	// Установим недостающие параметры
	УстановитьНедостающиеПараметры();

	ПолучитьСтруктуруПоложенийКолонок();
	ВидимостьКолонок();
	//ДоступностьКолонок();

	// Заполнить подменю выбора печатных форм.
	//СписокМакетов = ЭтотОбъект.ПолучитьСписокПечатныхФорм();
	//УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати,
	//									   СписокМакетов,
	//									   Новый Действие("ДействияФормыДействиеВыбратьПечатнуюФормы"));

	//УстановитьПодменюВыбораИзмененияПоТипуЦен(ЭлементыФормы.КоманднаяПанельТаблицыТиповЦен.Кнопки.ДействиеИзменить,
	//                                          Новый Действие("КоманднаяПанельТаблицыТиповЦенДействиеИзменить"));

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	// Установить печатную форму по умолчанию.
	//УстановитьКнопкуПечати(ЭтотОбъект.Метаданные().Имя, ЭтаФорма, СписокМакетов, мПечатнаяФормаПоУмолчанию);

	// Вывести в заголовке формы вид операции.
	//УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Установить активный реквизит.
	//АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	

	Если НЕ ЭтоНовый() Тогда
		
		//УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 
КонецПроцедуры

Процедура ЗаполнитьТаблицуМесяцевФормы()

	Если Месяцы.Количество() = 0 Тогда

		// Документ пуст
		Возврат;

	КонецЕсли;

	ТаблицаСтатейЗатрат = СтатьиЗатрат.Выгрузить();
	ТаблицаСтатейЗатрат.Сортировать("ИндексСтрокиТаблицыМесяцев, СтатьяЗатрат, Месяц");

	// Заполним все требуемые реквизиты

	КолонкиТаблицыМесяцев = ТаблицаМесяцев.Колонки;

	ТекущийИндексСтрокиТаблицыМесяцев = Неопределено;
	НоваяСтрока = Неопределено;
	Для Каждого СтрокаТаблицыСтатейЗатрат Из ТаблицаСтатейЗатрат Цикл

		Если ТекущийИндексСтрокиТаблицыМесяцев <> СтрокаТаблицыСтатейЗатрат.ИндексСтрокиТаблицыМесяцев
		 Или НоваяСтрока.СтатьяЗатрат <> СтрокаТаблицыСтатейЗатрат.СтатьяЗатрат  Тогда
			НоваяСтрока = ТаблицаМесяцев.Добавить();
			НоваяСтрока.СтатьяЗатрат               = СтрокаТаблицыСтатейЗатрат.СтатьяЗатрат;
			ТекущийИндексСтрокиТаблицыМесяцев = СтрокаТаблицыСтатейЗатрат.ИндексСтрокиТаблицыМесяцев;
		КонецЕсли;

		НомерСоответствияТекущейКолонки = СоответствиеМесяцев.Получить(СтрокаТаблицыСтатейЗатрат.Месяц);

        НоваяСтрока["сумма" + НомерСоответствияТекущейКолонки] = СтрокаТаблицыСтатейЗатрат.сумма;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТаблицуПроизводителейФормы()

Процедура ЗаполнитьТаблицуПродажФормы()

	Если Продажи.Количество() = 0 Тогда

		// Документ пуст
		Возврат;

	КонецЕсли;

	ТаблицаПродаж2 = Продажи.Выгрузить();
	ТаблицаПродаж2.Сортировать("ИндексСтрокиТаблицыМесяцев, ВидТовара, Месяц");

	// Заполним все требуемые реквизиты

	КолонкиТаблицыПродаж = ТаблицаПродаж.Колонки;

	ТекущийИндексСтрокиТаблицыПродаж = Неопределено;
	НоваяСтрока = Неопределено;
	Для Каждого СтрокаТаблицыПродаж Из ТаблицаПродаж2 Цикл

		Если ТекущийИндексСтрокиТаблицыПродаж <> СтрокаТаблицыПродаж.ИндексСтрокиТаблицыМесяцев
		 Или НоваяСтрока.ВидТовара <> СтрокаТаблицыПродаж.ВидТовара  Тогда
			НоваяСтрока = ТаблицаПродаж.Добавить();
			НоваяСтрока.ВидТовара               = СтрокаТаблицыПродаж.ВидТовара;
			ТекущийИндексСтрокиТаблицыПродаж = СтрокаТаблицыПродаж.ИндексСтрокиТаблицыМесяцев;
		КонецЕсли;

		НомерСоответствияТекущейКолонки = СоответствиеМесяцев.Получить(СтрокаТаблицыПродаж.Месяц);

        НоваяСтрока["сумма" + НомерСоответствияТекущейКолонки] = СтрокаТаблицыПродаж.сумма;
		НоваяСтрока["количество" + НомерСоответствияТекущейКолонки] = СтрокаТаблицыПродаж.Количество;
		НоваяСтрока["ПроцНаценки" + НомерСоответствияТекущейКолонки] = СтрокаТаблицыПродаж.ПроцНаценки;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТаблицуПроизводителейФормы()

//Функция ПолучитьОписаниеТиповЧисла(Разрядность,РазрядностьДробнойЧасти=0) Экспорт
//	
//	Массив = Новый Массив;
//	Массив.Добавить(Тип("Число"));
//	КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность,РазрядностьДробнойЧасти);
//	Возврат Новый ОписаниеТипов(Массив, КвалификаторЧисла);
//	
//КонецФункции

Процедура ДатаНачалаПланированияПриИзменении(Элемент)
	СформироватьКолонкиТЧ();
КонецПроцедуры

Процедура ДатаОкончанияПланированияПриИзменении(Элемент)
	СформироватьКолонкиТЧ();
КонецПроцедуры

Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(ДатаНачалаПланирования, ?(ДатаОкончанияПланирования='0001-01-01', ДатаОкончанияПланирования, КонецДня(ДатаОкончанияПланирования)));
	Если НастройкаПериода.Редактировать() Тогда
		ДатаНачалаПланирования = НастройкаПериода.ПолучитьДатуНачала();
		ДатаОкончанияПланирования = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
	
	СформироватьКолонкиТЧ();
КонецПроцедуры


