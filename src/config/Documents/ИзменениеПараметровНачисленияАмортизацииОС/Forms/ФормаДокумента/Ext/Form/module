////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мОтражатьВРегламентированномУчете;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	//мДеревоМакетов = ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	//УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	//УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	//Если Не мПодменюПечати = Неопределено Тогда
	//	СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	//КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	//мКнопкиЗаполненияТЧ = ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОС,ЭлементыФормы.КоманднаяПанельОС.Кнопки.ПодменюЗаполнить);
	
	//СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры


// Процедура заполняет табличную част ьданными из регистров сведений
//
Процедура ЗаполнитьОС()

	Если ЭтоНовый() Тогда
		Предупреждение("Заполнение возможно только в записанном документе" , 60,);
		Возврат;
	КонецЕсли;
	
	Если Проведен Тогда
		Предупреждение("Заполнение возможно только в непроведенном документе" , 60,);
		Возврат;
	КонецЕсли;

	Если Вопрос("При заполнении существующие данные будут пересчитаны! Продолжить?", 
		РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если (ОтражатьВБухгалтерскомУчете ИЛИ ОтражатьВНалоговомУчете) И ЗначениеНеЗаполнено(Организация) Тогда
		Предупреждение("Не выбрана организация", 60);
		Возврат;
	КонецЕсли;
	СписокОС        = ОС.ВыгрузитьКолонку("ОсновноеСредство");
	ПустоеСостояние = Справочники.СобытияОС.ПустаяСсылка();

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр( "СписокОС",        СписокОС);
	Запрос.УстановитьПараметр( "Организация",     Организация);
	Запрос.УстановитьПараметр( "ПустоеСостояние", ПустоеСостояние);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования КАК СрокПолезногоИспользованияБУ,
	|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРабот КАК ОбъемПродукцииРаботБУ,
	|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.СрокИспользованияДляВычисленияАмортизации КАК СрокИспользованияДляВычисленияАмортизацииБУ,
	|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации КАК СтоимостьДляВычисленияАмортизацииБУ,
	|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизацииБУ,
	|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации КАК КоэффициентАмортизацииБУ,
	|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.КоэффициентУскорения КАК КоэффициентУскоренияБУ,
	|	ПараметрыАмортизацииСрезПоследних.СрокПолезногоИспользования КАК СрокПолезногоИспользованияУУ,
	|	ПараметрыАмортизацииСрезПоследних.ОбъемПродукцииРабот КАК ОбъемПродукцииРаботУУ,
	|	ПараметрыАмортизацииСрезПоследних.СрокИспользованияДляВычисленияАмортизации КАК СрокИспользованияДляВычисленияАмортизацииУУ,
	|	ПараметрыАмортизацииСрезПоследних.СтоимостьДляВычисленияАмортизации КАК СтоимостьДляВычисленияАмортизацииУУ,
	|	ПараметрыАмортизацииСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизацииУУ,
	|	ПараметрыАмортизацииСрезПоследних.КоэффициентАмортизации КАК КоэффициентАмортизацииУУ,
	|	ПараметрыАмортизацииСрезПоследних.КоэффициентУскорения КАК КоэффициентУскоренияУУ,
	|	ВЫБОР КОГДА НЕ((ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство) ЕСТЬ NULL ) ТОГДА ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство КОГДА НЕ((ПараметрыАмортизацииСрезПоследних.ОсновноеСредство) ЕСТЬ NULL ) ТОГДА ПараметрыАмортизацииСрезПоследних.ОсновноеСредство ИНАЧЕ NULL КОНЕЦ КАК ОсновноеСредство
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(, Организация = &Организация И ОсновноеСредство В (&СписокОС)) КАК ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОС.СрезПоследних(, ОсновноеСредство В (&СписокОС)) КАК ПараметрыАмортизацииСрезПоследних
	|		ПО ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ПараметрыАмортизацииСрезПоследних.ОсновноеСредство
	|";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТЧ Из ОС Цикл
		
		СтрокаТЗ = ТЗ.Найти(СтрокаТЧ.ОсновноеСредство,"ОсновноеСредство");
		
		Если СтрокаТЗ = Неопределено Тогда
			СтрокаТЧ.СрокПолезногоИспользованияУУ                  = 0;
			СтрокаТЧ.СрокИспользованияДляВычисленияАмортизацииУУ   = 0;
			СтрокаТЧ.ОбъемПродукцииРаботУУ                         = 0;
			СтрокаТЧ.ОбъемПродукцииРаботДляВычисленияАмортизацииУУ = 0;
			СтрокаТЧ.СтоимостьДляВычисленияАмортизацииУУ            = 0;
			СтрокаТЧ.КоэффициентАмортизацииУУ                      = 0;
			СтрокаТЧ.КоэффициентУскоренияУУ                        = 0;
			СтрокаТЧ.СрокПолезногоИспользованияБУ                  = 0;
			СтрокаТЧ.СрокИспользованияДляВычисленияАмортизацииБУ   = 0;
			СтрокаТЧ.ОбъемПродукцииРаботБУ                         = 0;
			СтрокаТЧ.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ = 0;
			СтрокаТЧ.СтоимостьДляВычисленияАмортизацииБУ            = 0;
			СтрокаТЧ.КоэффициентАмортизацииБУ                      = 0;
			СтрокаТЧ.КоэффициентУскоренияБУ                        = 0;
		Иначе
			
			Если ОтражатьВУправленческомУчете Тогда
				СтруктПараметров 	= ПолучитьАтрибутыСостоянияОС(СтрокаТЧ.ОсновноеСредство,Перечисления.ВидыСостоянийОС.СнятоСУчета);
				Если НЕ ЗначениеНеЗаполнено(СтруктПараметров["Дата"])тогда
					Сообщить("Упр. учет: Основное средство """ + СтрокаТЧ.ОсновноеСредство + """ в строке № " + СтрокаТЧ.НомерСтроки + " снято с учета!", СтатусСообщения.Важное);
				Иначе
					СтрокаТЧ.СрокПолезногоИспользованияУУ                  = СтрокаТЗ.СрокПолезногоИспользованияУУ;
					СтрокаТЧ.СрокИспользованияДляВычисленияАмортизацииУУ   = СтрокаТЗ.СрокИспользованияДляВычисленияАмортизацииУУ;
					СтрокаТЧ.ОбъемПродукцииРаботУУ                         = СтрокаТЗ.ОбъемПродукцииРаботУУ;
					СтрокаТЧ.ОбъемПродукцииРаботДляВычисленияАмортизацииУУ = СтрокаТЗ.ОбъемПродукцииРаботДляВычисленияАмортизацииУУ;
					СтрокаТЧ.СтоимостьДляВычисленияАмортизацииУУ            = СтрокаТЗ.СтоимостьДляВычисленияАмортизацииУУ;
					СтрокаТЧ.КоэффициентАмортизацииУУ                      = СтрокаТЗ.КоэффициентАмортизацииУУ;
					СтрокаТЧ.КоэффициентУскоренияУУ                        = СтрокаТЗ.КоэффициентУскоренияУУ;
				КонецЕсли;
			КонецЕсли;
			Если ОтражатьВБухгалтерскомУчете Тогда
				СтруктПараметров = ПолучитьАтрибутыСостоянияОС(СтрокаТЧ.ОсновноеСредство,Перечисления.ВидыСостоянийОС.СнятоСУчета,Ложь,Организация);
				Если НЕ ЗначениеНеЗаполнено(СтруктПараметров["Дата"])тогда
					Сообщить("Бух. учет: Основное средство """ + СтрокаТЧ.ОсновноеСредство + """ в строке № " + СтрокаТЧ.НомерСтроки + " снято с учета!", СтатусСообщения.Важное);
				Иначе
					СтрокаТЧ.СрокПолезногоИспользованияБУ                  = СтрокаТЗ.СрокПолезногоИспользованияБУ;
					СтрокаТЧ.СрокИспользованияДляВычисленияАмортизацииБУ   = СтрокаТЗ.СрокИспользованияДляВычисленияАмортизацииБУ;
					СтрокаТЧ.ОбъемПродукцииРаботБУ                         = СтрокаТЗ.ОбъемПродукцииРаботБУ;
					СтрокаТЧ.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ = СтрокаТЗ.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ;
					СтрокаТЧ.СтоимостьДляВычисленияАмортизацииБУ            = СтрокаТЗ.СтоимостьДляВычисленияАмортизацииБУ;
					СтрокаТЧ.КоэффициентАмортизацииБУ                      = СтрокаТЗ.КоэффициентАмортизацииБУ;
					СтрокаТЧ.КоэффициентУскоренияБУ                        = СтрокаТЗ.КоэффициентУскоренияБУ;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельСоставОСЗаполнить()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость элементов формы
//
Процедура УстановитьВидимость()
	
	ЭлементыФормы.ПрименятьПараметрыВТекущемМесяце.Видимость = ОтражатьВУправленческомУчете;
	ЭлементыФормы.ОтражатьВБухгалтерскомУчете.Доступность = мОтражатьВРегламентированномУчете;
	ЭлементыФормы.ОтражатьВНалоговомУчете    .Доступность = мОтражатьВРегламентированномУчете;
	
	ЭлементыФормы.Событие.Видимость		   = ОтражатьВУправленческомУчете;
	ЭлементыФормы.НадписьСобытие.Видимость = ОтражатьВУправленческомУчете;
	
	ЭлементыФормы.СобытиеРегл.Видимость		   = ОтражатьВБухгалтерскомУчете Или ОтражатьВНалоговомУчете;
	ЭлементыФормы.НадписьСобытиеРегл.Видимость = ОтражатьВБухгалтерскомУчете Или ОтражатьВНалоговомУчете;
	
КонецПроцедуры //УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры

// Заполняет табличну часть основными средствами
// 
Процедура КоманднаяПанельОСЗаполнить(Кнопка)

	ЗаполнитьОС();

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "По наименованию" из меню "Заполнить"
// командной панели формы. Процедура добавляет в табличную часть основные средства,
// наименование которых совпадает с наименованием текущего выбранного в табличной части ОС
//
Процедура КоманднаяПанельОСЗаполнитьПоНаименованию(Кнопка)
	
	Если ЭлементыФормы.ОС.ТекущаяСтрока = Неопределено Тогда
		СообщитьОбОшибке("Данные для заполнения отсутствуют.",,, СтатусСообщения.Обычное);
		Возврат;
	КонецЕсли;
	
	ОсновноеСредство = ЭлементыФормы.ОС.ТекущиеДанные.ОсновноеСредство;
	
	Если ОсновноеСредство = Неопределено Тогда
		СообщитьОбОшибке("Данные для заполнения отсутствуют.",,, СтатусСообщения.Обычное);
		Возврат;
	КонецЕсли;
	
	ОсновноеСредствоНаименование = Строка(ОсновноеСредство);
	
	СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("СписокОС",     СписокОС);
	Запрос.УстановитьПараметр("Наименование", ОсновноеСредствоНаименование);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК ОсновноеСредство,
	|	ОсновныеСредства.Код КАК ОсновноеСредствоКод
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.Наименование = &Наименование
	|	И ОсновныеСредства.Ссылка НЕ В (&СписокОС)
	|	И ОсновныеСредства.ПометкаУдаления = ЛОЖЬ
	|	И ОсновныеСредства.ЭтоГруппа = ЛОЖЬ";
	
	ВыборкаОС = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаОС.Количество() = 0 Тогда
		СообщитьОбОшибке("Другие элементы справочника с наименованием <" + ОсновноеСредствоНаименование + "> в справочнике ""Основные средства"" отсутствуют.",,, СтатусСообщения.Обычное);
		Возврат;
	КонецЕсли;
	
	Пока ВыборкаОС.Следующий() Цикл
		НоваяСтрока = ОС.Добавить();
		НоваяСтрока.ОсновноеСредство = ВыборкаОС.ОсновноеСредство;
	КонецЦикла; 
	
КонецПроцедуры // КоманднаяПанельОСЗаполнитьПоНаименованию()

// Процедура вызывается при нажании кнопки Подбор командной панели "КоманднаяПанельОС"
//
Процедура КоманднаяПанельОСПодбор(Кнопка)
	
	ФормаПодбора =  Справочники.ОсновныеСредства.ПолучитьФорму("ФормаПодбора",ЭтаФорма);
	ФормаПодбора.РежимВыбора = Истина;
	ФормаПодбора.ЗакрыватьПриВыборе  = Ложь;
	ФормаПодбора.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		// Заполнить реквизиты значениями по умолчанию если документ не скопирован
		ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь);//,,,ПараметрОбъектКопирования,ПараметрОснование);
		УстановитьНомерДокумента(ЭтотОбъект);
	КонецЕсли;
	
	УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);

	// Установим видимость и доступность реквизитов
	//УправлениеПризнакомОтраженияВРеглУчете( ЭтотОбъект, ЭтаФорма,,, мОтражатьВРегламентированномУчете);
	УстановитьВидимость();

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	мТекущаяДатаДокумента = Дата;
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	Если НЕ ЗначениеНеЗаполнено(ЗначениеВыбора) Тогда
		Если ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
			СтрокаТабличнойЧасти = ОС.Найти(ЗначениеВыбора,"ОсновноеСредство");
			Если СтрокаТабличнойЧасти <> Неопределено Тогда
				Предупреждение("Это основное средство уже подобрано!",60);
			Иначе
				НоваяСтрока = ОС.Добавить();
				НоваяСтрока.ОсновноеСредство = ЗначениеВыбора;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьНомерДокумента(ЭтотОбъект);
	ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	
	//УправлениеПризнакомОтраженияВРеглУчете( ЭтотОбъект, ЭтаФорма,,, мОтражатьВРегламентированномУчете, Истина);
	УстановитьВидимость();

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в управленческом учете
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)

	УстановитьВидимость();
	ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
	
	Если Не ОтражатьВБухгалтерскомУчете И Не ОтражатьВНалоговомУчете Тогда
		УстановитьНомерДокумента(ЭтотОбъект);
	КонецЕсли;
	
	УстановитьВидимость();
	ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)
	
	Если Не ОтражатьВБухгалтерскомУчете И Не ОтражатьВНалоговомУчете Тогда
		УстановитьНомерДокумента(ЭтотОбъект);
	КонецЕсли;
	
	УстановитьВидимость();
	ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
КонецПроцедуры

//Процедура - обработчик события "НачалоВыбора" элемента формы Событие
//
Процедура СобытиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
   	ВидыСобытий = Новый СписокЗначений;
	ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.Прочее);
    НачалоВыбораЗначенияСобытияОС(Элемент,ВидыСобытий , СтандартнаяОбработка);

КонецПроцедуры

//Процедура - обработчик события "НачалоВыбора" элемента формы СобытиеРегл
//
Процедура СобытиеРеглНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СобытиеНачалоВыбора(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Оборудование". Формирует данные в колонке "Инв. номер".
//
Процедура ОСПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.ОС.Колонки.ИнвентарныйНомер.Видимость Тогда

		ОформлениеСтроки.Ячейки.ИнвентарныйНомер.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ИнвентарныйНомер.Текст           = ДанныеСтроки.ОсновноеСредство.Код;

	КонецЕсли;

КонецПроцедуры // ОСПриВыводеСтроки()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	//ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	//ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	//ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	//Если НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
	//	
	//	УстановитьКнопкиПечати();
	//	
	//КонецЕсли; 
	
	
КонецПроцедуры


