////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

Перем мКолонкиКомплектующие;

Перем мПечатнаяФормаПоУмолчанию;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора()

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");
	СписокЗапросов.Добавить("ОстаткиНоменклатуры", "По остаткам номенклатуры");

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  Нет
//
Процедура ДействиеПодбор()

	Перем Команда;

	ЕстьЦена  = Ложь;
	ЕстьСерия = Истина;

	Команда = "ПодборВТабличнуюЧастьТовары";
	ИмяТабличнойЧасти = "Комплектующие";

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора();
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов" , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"       , Склад);
	СтруктураПараметровПодбора.Вставить("Организация" , Организация);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"            , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"      , мВалютаРегламентированногоУчета);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер);

	ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)Экспорт

	Перем Номенклатура, ЕдиницаИзмерения, Количество, Характеристика, Серия;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"           , Серия);

	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);

	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры" , Характеристика);
	СтруктураОтбора.Вставить("СерияНоменклатуры"          , Серия);
	
	СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура                = Номенклатура;
		СтрокаТабличнойЧасти.Количество                  = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения            = ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент                 = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры  = Характеристика;
		СтрокаТабличнойЧасти.СерияНоменклатуры           = Серия;
		ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);
		ЗаполнитьСпособСписанияОстаткаКомплектующихТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

	ЭлементыФормы.Комплектующие.ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы.Комплектующие.ТекущаяКолонка = ЭлементыФормы.Комплектующие.Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	ЗаполнитьСпособСписанияОстаткаКомплектующихТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает доступность кнопки "Заполнить и провести". Кнопка доступна,
// если его дата совпадает с текущей и вид операции документа = Комплектация.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьКнопкиЗаполнитьИПровести()

	ЭлементыФормы.ДействияФормы.Кнопки.ДействиеЗаполнитьИПровести.Доступность = 
	((НачалоДня(Дата) = НачалоДня(ТекущаяДата())) И (ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация));

КонецПроцедуры // УстановитьДоступностьКнопкиЗаполнитьИПровести

// Процедура устанавливает видимость для тех колонок, видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	КолонкиКомплектующие              = ЭлементыФормы.Комплектующие.Колонки;
	ВидОперацииРазукомплектация       = (ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация);
	ВидОперацииКомплектация           = (ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация);
	ВидимостьСпособаСписанияКомплекта = (ВидОперацииРазукомплектация И НЕ ЗначениеНеЗаполнено(ЗаказПокупателя));

	УстановитьВидимостьКолонкиТабЧасти(КолонкиКомплектующие.ДоляСтоимости,  ВидОперацииРазукомплектация);
	УстановитьВидимостьКолонкиТабЧасти(КолонкиКомплектующие.СпособСписания, ВидОперацииКомплектация И НЕ ЗначениеНеЗаполнено(ЗаказПокупателя));

	КолонкиКомплектующие.ДоляСтоимости.АвтоОтметкаНезаполненного = ВидОперацииРазукомплектация;
	ЭлементыФормы.НадписьСпособСписания.Видимость                = ВидимостьСпособаСписанияКомплекта;
	ЭлементыФормы.СпособСписания.Видимость                       = ВидимостьСпособаСписанияКомплекта;
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность            = ОтражатьВБухгалтерскомУчете;

КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает доступность для тех элементов формы, доступность которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьДоступность()

	УстановитьДоступностьКнопкиЗаполнитьИПровести();

	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;

КонецПроцедуры // УстановитьДоступность()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// быть может, это ввод на основании заказа покупателя
	Если ЭтоНовый() и Не ЗначениеНеЗаполнено(ПараметрОснование) Тогда
		Если ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ЗаказПокупателя")
		 Или ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда

			// определим, сколько в нем комплектов
			Запрос = новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", ПараметрОснование);
			Запрос.УстановитьПараметр("Товар", Перечисления.ТоварТара.Товар);

			Если ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				Запрос.Текст = "
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ЗаказыПокупателей.Номенклатура,
				|	ЗаказыПокупателей.ХарактеристикаНоменклатуры,
				|	ЗаказыПокупателей.КоличествоОстаток
				|	- ВЫБОР КОГДА Резервы.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Резервы.КоличествоОстаток КОНЕЦ
				|	- ВЫБОР КОГДА Размещения.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Размещения.КоличествоОстаток КОНЕЦ
				|	КАК КоличествоОстаток
				|
				|ИЗ
				|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя = &Ссылка) КАК ЗаказыПокупателей
				|
				|СОЕДИНЕНИЕ РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
				|ПО
				|	КомплектующиеНоменклатуры.Номенклатура               = ЗаказыПокупателей.Номенклатура
				| И КомплектующиеНоменклатуры.ХарактеристикаНоменклатуры = ЗаказыПокупателей.ХарактеристикаНоменклатуры
				|
				|ЛЕВОЕ СОЕДИНЕНИЕ // Остатки зарезервированного товара
				|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, ДокументРезерва = &Ссылка) КАК Резервы
				|ПО
				|	Резервы.Номенклатура                = ЗаказыПокупателей.Номенклатура
				| И Резервы.ХарактеристикаНоменклатуры  = ЗаказыПокупателей.ХарактеристикаНоменклатуры
				|
				|ЛЕВОЕ СОЕДИНЕНИЕ // Остатки размещенного товара
				|	РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(, ЗаказПокупателя  = &Ссылка И ТоварТара = &Товар) КАК Размещения
				|ПО
				|	Размещения.Номенклатура                = ЗаказыПокупателей.Номенклатура
				| И Размещения.ХарактеристикаНоменклатуры  = ЗаказыПокупателей.ХарактеристикаНоменклатуры
				|ИТОГИ СУММА(КоличествоОстаток) ПО ЗаказыПокупателей.Номенклатура, ЗаказыПокупателей.ХарактеристикаНоменклатуры
				|";
			ИначеЕсли ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
				Запрос.Текст = "
				|ВЫБРАТЬ
				|	СчетНаОплатуПокупателюТовары.Номенклатура,
				|	СчетНаОплатуПокупателюТовары.ХарактеристикаНоменклатуры,
				|	МАКСИМУМ(СчетНаОплатуПокупателюТовары.Количество) КАК КоличествоОстаток
				|ИЗ
				|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
				|
				|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
				|	РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
				|
				|ПО
				|	КомплектующиеНоменклатуры.Номенклатура = СчетНаОплатуПокупателюТовары.Номенклатура
				|	И
				|	КомплектующиеНоменклатуры.ХарактеристикаНоменклатуры = СчетНаОплатуПокупателюТовары.ХарактеристикаНоменклатуры
				|
				|ГДЕ
				|	СчетНаОплатуПокупателюТовары.Ссылка = &Ссылка
				|
				|СГРУППИРОВАТЬ ПО
				|
				|	СчетНаОплатуПокупателюТовары.Номенклатура,
				|	СчетНаОплатуПокупателюТовары.ХарактеристикаНоменклатуры
				|
				|ИТОГИ СУММА(КоличествоОстаток) ПО СчетНаОплатуПокупателюТовары.Номенклатура, СчетНаОплатуПокупателюТовары.ХарактеристикаНоменклатуры
				|";
			КонецЕсли;

			ТаблицаКомплектов = Новый ТаблицаЗначений;
			ТаблицаКомплектов.Колонки.Добавить("Номенклатура",,,10);
			ТаблицаКомплектов.Колонки.Добавить("ХарактеристикаНоменклатуры",,"Характеристика номенклатуры",10);
			ТаблицаКомплектов.Колонки.Добавить("Количество",,,5);
			ВыборкаПоНоменклатуре = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоНоменклатуре.Следующий() Цикл
				ВыборкаПоХарактеристикам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоХарактеристикам.Следующий() Цикл
					Если ВыборкаПоХарактеристикам.КоличествоОстаток>0 Тогда
						НоваяСтрока = ТаблицаКомплектов.Добавить();
						НоваяСтрока.Номенклатура               = ВыборкаПоХарактеристикам.Номенклатура;
						НоваяСтрока.ХарактеристикаНоменклатуры = ВыборкаПоХарактеристикам.ХарактеристикаНоменклатуры;
						НоваяСтрока.Количество                 = ВыборкаПоХарактеристикам.КоличествоОстаток;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Если ТаблицаКомплектов.Количество() = 0 Тогда
				СообщитьОбОшибке("В документе "+СокрЛП(ПараметрОснование)+" комплекты отсутствуют!");
				Возврат;
			ИначеЕсли ТаблицаКомплектов.Количество() = 1 Тогда
				ВыбраннаяСтрока = ТаблицаКомплектов[0];
			Иначе
				ВыбраннаяСтрока = ТаблицаКомплектов.ВыбратьСтроку();
			КонецЕсли;
			Если ВыбраннаяСтрока <> Неопределено Тогда
				ЗаказПокупателя              = ПараметрОснование;
				ВидОперации                  = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация;
				Номенклатура                 = ВыбраннаяСтрока.Номенклатура;
				ХарактеристикаНоменклатуры   = ВыбраннаяСтрока.ХарактеристикаНоменклатуры;
				Количество                   = ВыбраннаяСтрока.Количество;
				ЕдиницаИзмерения             = Номенклатура.ЕдиницаХраненияОстатков;
				Коэффициент                  = ЕдиницаИзмерения.Коэффициент;
				Склад                        = ПараметрОснование.Склад;
				ЗаполнитьКомплектующие();

				// Заполнение документа
				Отказ = Ложь;
				ЗаполнитьТабличныеЧастиПередПроведением(Отказ);

			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	//+++ 13.01.2012   
	// при наличии заказа -  происходит резервирование в РН.ТоварыВрезервахНаСкладах!!!
	Если не РольДоступна("ПолныеПрава") тогда
		ЭлементыФормы.ЗаказПокупателя.Доступность = ЛОЖЬ;
	КонецЕсли;	
		
		
		
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь);
		УстановитьНомерДокумента(ЭтотОбъект);

		Если ЗначениеНеЗаполнено(Склад) Тогда
			Склад = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойСклад");
		КонецЕсли;
		Если ЗначениеНеЗаполнено(СпособСписания) Тогда
			СпособСписания = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		КонецЕсли;

	КонецЕсли;

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("ДоляСтоимости");
	СтруктураКолонок.Вставить("СпособСписания");

	// Установить ограничение - изменять видимоть колонок для таличной части 
	// "Комплектующие".
	УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Комплектующие.Колонки, СтруктураКолонок);

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Заполнить подменю выбора печатных форм.
	СписокМакетов = ЭтотОбъект.ПолучитьСписокПечатныхФорм();
	УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати,
	                                       СписокМакетов,
	                                       Новый Действие("ДействияФормыДействиеВыбратьПечатнуюФормы"));

	// Установить печатную форму по умолчанию.
	УстановитьКнопкуПечати(ЭтотОбъект.Метаданные().Имя, ЭтаФорма, СписокМакетов, мПечатнаяФормаПоУмолчанию);

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(ЭтотОбъект.Метаданные().Синоним + ", "+СокрЛП(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиКомплектующие);
	УстановитьВидимостьСерииНоменклатуры(мКолонкиКомплектующие);

	// Установить видимость/доступность реквизитов и заголовков колонок.
	УстановитьВидимость();
	УстановитьДоступность();

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
    
	//БАЛАНС (04.12.2007)                       
	//
	мПроведениеИзФормы = Истина;
	
	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 

	
КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Подсчитаем количество строк в табличных частях.
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если СтраницаПанели.Имя = "Комплектующие" Тогда
			СтраницаПанели.Заголовок = "Комплектующие (" + ДокументОбъект.Комплектующие.Количество() + " поз.)";
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ОбработкаПодбора(Комплектующие, ЗначениеВыбора);
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(ЭтотОбъект.Метаданные().Синоним + ", "+СокрЛП(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры[Кнопка.Имя];
	КонецЕсли;

	// Отобразить в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(ЭтотОбъект.Метаданные().Синоним + ", "+СокрЛП(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Установить видимость/доступность реквизитов по виду операции.
	УстановитьВидимость();
	УстановитьДоступность();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	НапечататьДокументПоУмолчанию(ЭтотОбъект, глТекущийПользователь, мПечатнаяФормаПоУмолчанию);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
//
Процедура ДействияФормыДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = Кнопка.Текст;
		СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		СписокМакетов = ПолучитьСписокПечатныхФорм();
		СтрокаМакетаВСписке = СписокМакетов.НайтиПоЗначению(Кнопка.Имя);
		Если СтрокаМакетаВСписке <> Неопределено Тогда
			Печать(СтрокаМакетаВСписке.Значение);
			СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
			СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;			
			
		Иначе
			СсылкаВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Кнопка.Имя, "_", "-")));
			Печать(СсылкаВнешнейФормы);
			СтруктураМакета.Макет = СсылкаВнешнейФормы;
			СтруктураМакета.ПредставлениеМакета = Кнопка.Текст;
		КонецЕсли;		
		
		мПечатнаяФормаПоУмолчанию = СтруктураМакета.Макет;
		СохранитьТекущуюКнопкуПечати(ЭтотОбъект.Метаданные().Имя, СтруктураМакета);
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Комплектующие", вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельКомплектующиеЗаполнить(Кнопка)

	Если Количество = 0 Тогда
		Предупреждение("Количество "+СокрЛП(Номенклатура)+" равно нулю! Заполнение невозможно.");
		Возврат;
	КонецЕсли;

	ЗаполнитьКомплектующие();

КонецПроцедуры // КоманднаяПанельТоварыЗаполнить()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Комплектующие", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Комплектующие".
//
Процедура КоманднаяПанельКомплектующиеДействиеПодбор(Кнопка)

	ДействиеПодбор();

КонецПроцедуры // КоманднаяПанельКомплектующиеДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Заполнить и провести" командной панели формы,
// вызывает заполнение документа с проведением.
//
Процедура ДействияФормыДействиеЗаполнитьИПровести(Кнопка)

	// Заполнять с проведением можно документы с текущую датой
	Если НачалоДня(Дата) = НачалоДня(ТекущаяДата()) Тогда
		Если НЕ ЭтоНовый() Тогда

			// Если документ ранее был записан, то он будет переноситься в конец дня из-за оперативного проведения, о чем следует предупредить.
			Ответ = Вопрос("В режиме заполнения с проведением документ будет проводиться оперативно. " + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли; 

	// Обработка выполняется в транзакции. Она будет отменена, если заполнить не удалось
	НачатьТранзакцию();
	Отказ = Ложь;

	// Очистим записи документа, если он был ранее проведен
	Если Проведен Тогда
		НаборОстаткиТоваровКомпании = РегистрыНакопления.ТоварыВРезервеНаСкладах.СоздатьНаборЗаписей();
		НаборОстаткиТоваровКомпании.Отбор.Регистратор.Установить(Ссылка);
		НаборОстаткиТоваровКомпании.Прочитать();
		НаборОстаткиТоваровКомпании.Очистить();
		НаборОстаткиТоваровКомпании.Записать();
		НаборОстаткиТоваровОрганизаций = РегистрыНакопления.ТоварыНаСкладах.СоздатьНаборЗаписей();
		НаборОстаткиТоваровОрганизаций.Отбор.Регистратор.Установить(Ссылка);
		НаборОстаткиТоваровОрганизаций.Прочитать();
		НаборОстаткиТоваровОрганизаций.Очистить();
		НаборОстаткиТоваровОрганизаций.Записать();
		НаборОстаткиТоваровОрганизаций = РегистрыНакопления.ТоварыОрганизаций.СоздатьНаборЗаписей();
		НаборОстаткиТоваровОрганизаций.Отбор.Регистратор.Установить(Ссылка);
		НаборОстаткиТоваровОрганизаций.Прочитать();
		НаборОстаткиТоваровОрганизаций.Очистить();
		НаборОстаткиТоваровОрганизаций.Записать();
	КонецЕсли;

	// Заполнение документа
	ЗаполнитьТабличныеЧастиПередПроведением(Отказ);

	// Если заполнить удалось, то запись документа с проведением

	НеПроведен = Ложь;
	Если НЕ Отказ Тогда
		Попытка
			Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		Исключение
			НеПроведен = Истина;
		КонецПопытки;
	КонецЕсли;

	Если Отказ ИЛИ НеПроведен Тогда
		ОтменитьТранзакцию();
		Если НеПроведен Тогда
			Предупреждение("Операция не выполнена!");
		КонецЕсли;
		
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли; 

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(ЭтотОбъект.Метаданные().Синоним + ", "+СокрЛП(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеЗаполнитьИПровести()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	УстановитьДоступностьКнопкиЗаполнитьИПровести();

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ОтражатьВНалоговомУчете = Элемент.Значение;
	УстановитьВидимость();

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьНомерДокумента(ЭтотОбъект);

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода заказа покупателя.
//
Процедура ЗаказПокупателяПриИзменении(Элемент)

	УстановитьВидимость();
	Если Не ЗначениеНеЗаполнено(ЗаказПокупателя) Тогда
		СпособСписания = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;
	Иначе
		СпособСписания = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
	КонецЕсли;

КонецПроцедуры // ЗаказПокупателяПриИзменении()

// Процедура - обработчик события "Очистка" поля ввода заказа покупателя.
//
Процедура ЗаказПокупателяОчистка(Элемент, СтандартнаяОбработка)

	УстановитьВидимость();

КонецПроцедуры // ЗаказПокупателяОчистка()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры.
//
Процедура НоменклатураПриИзменении(Элемент)

	// При изменении номенклатуры очистим ссылки на подчиненные справочники
	Если Номенклатура <> ЕдиницаИзмерения.Владелец Тогда
		ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
		Коэффициент      = ЕдиницаИзмерения.Коэффициент;
	КонецЕсли; 

	Если Номенклатура <> СерияНоменклатуры.Владелец Тогда
		СерияНоменклатуры = Неопределено;
	КонецЕсли; 

	Если Номенклатура <> ХарактеристикаНоменклатуры.Владелец Тогда
		ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;

КонецПроцедуры // НоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количество комплектов.
//
Процедура КоличествоПриИзменении(Элемент)

	Если Количество <> 0 Тогда
		ТекстВопроса = "Заполнить табличную часть комплектующих?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЗаполнитьКомплектующие();
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // КоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля едницы измерения.
//
Процедура ЕдиницаИзмеренияПриИзменении(Элемент)

	// Установить коэффициент
	Коэффициент = ЕдиницаИзмерения.Коэффициент; 

КонецПроцедуры // ЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля СкладКомпании.
//
Процедура СкладКомпанииНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.НеРавно, СтандартнаяОбработка);

КонецПроцедуры // СкладКомпанииНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ КОМПЛЕКТУЮЩИЕ

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Комплектующие".
//
Процедура КомплектующиеНоменклатураПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Комплектующие.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ПриИзмененииНоменклатурыТабЧасти(СтрокаТЧ, ЭтотОбъект);

	СтрокаТЧ.ЕдиницаИзмерения = СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТЧ.Коэффициент      = СтрокаТЧ.ЕдиницаИзмерения.Коэффициент;

	ПриИзмененииНоменклатурыТоваров(СтрокаТЧ);

КонецПроцедуры // КомплектующиеНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Комплектующие".
//
Процедура КомплектующиеЕдиницаИзмеренияПриИзменении(Элемент)

	// Установить коэффициент
	СтрокаТабличнойЧасти = ЭлементыФормы.Комплектующие.ТекущиеДанные;
	СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент; 

КонецПроцедуры // КомплектующиеЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Комплектующие".
//
Процедура КомплектующиеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ПоказатьКодАртикул(мКолонкиКомплектующие, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

	Если НЕ ЗначениеНеЗаполнено(ДанныеСтроки.СерияНоменклатуры) Тогда
		Если ЭлементыФормы.Комплектующие.Колонки.НомерГТД.Видимость Тогда
			ОформлениеСтроки.Ячейки.НомерГТД.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.НомерГТД.Текст = ДанныеСтроки.СерияНоменклатуры.НомерГТД;
		КонецЕсли;
		Если ЭлементыФормы.Комплектующие.Колонки.СтранаПроисхождения.Видимость	Тогда
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.Текст = ДанныеСтроки.СерияНоменклатуры.СтранаПроисхождения;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Обработчик внешнего события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	Если глТорговоеОборудование <> Неопределено Тогда
		Если Событие = "BarCodeValue" Тогда

			Команда         = "ПодборВТабличнуюЧастьКомплектующие";
			ИмяТабличнойЧасти = "Комплектующие";

			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("Команда"              , Команда);
			СтруктураПараметров.Вставить("ИмяТабличнойЧасти"    , ИмяТабличнойЧасти);

			глТорговоеОборудование.ОбработатьВнешнееСобытиеОтСканераДляФормы(ЭтаФорма, ЭтотОбъект, СтруктураПараметров, Данные);

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ВнешнееСобытие()

Процедура СерияНоменклатурыПриИзменении(Элемент)
	
	Если НЕ ЗначениеНеЗаполнено(СерияНоменклатуры) Тогда
		ЭлементыФормы.НомерГТД.Значение                     = СерияНоменклатуры.НомерГТД;
		ЭлементыФормы.СтранаПроисхождения.Значение          = СерияНоменклатуры.СтранаПроисхождения;
	КонецЕсли;

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Комплектующие".
//
Процедура КомплектующиеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Комплектующие".
//
Процедура КомплектующиеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПеретаскивание()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	
	ОбщийВес = ПолучитьВесНетто(Номенклатура)*Количество;
	
	Если ЗначениеНеЗаполнено(ВидКомплектации) Тогда
	
		СообщитьОбОшибке("Не заполнено значение ""Вид комплектации""!", Отказ);
	
	КонецЕсли; 
	
	яштСменаПользователя(ЭтотОбъект, ЭтаФорма, глТекущийПользователь);
	
КонецПроцедуры


Процедура КоманднаяПанель1ЗаполнитьСписокГрузчиков(Кнопка)
//	ОбщийВес=ПолучитьВесНетто(Номенклатура);

	ДанныеПоПогрузке.Очистить();
//+++( 25.07.2013 - перераспределение КТУ по грузчикам по группам складов - как в реализации
	Если Константы.КТУгрузчиковПоСкладам.Получить() тогда 
		яштРезервыПоТоварам.ЗаполнениеКТУГрузчиков(ЭтотОбъект);
		возврат;
	КонецЕсли;
//+++)

//------------ Старый вариант грузчиков - если выключена константа "КТУгрузчиковПоСкладам" --------------
	ДанныеПоПогрузке.Очистить();
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|Ссылка Грузчик
	|ИЗ
	|	Справочник.ФизическиеЛица
	|ГДЕ Официальный";
	
	Выборка=Запрос.Выполнить().Выбрать();
	КоличествоСтрок=Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл
		Строка=ДанныеПоПогрузке.Добавить();
		Строка.Грузчик=Выборка.Грузчик;
		Строка.Вес=1;
	КонецЦикла;	

КонецПроцедуры
 
Процедура ДействияФормыСоздатьПеремещение(Кнопка)
	
	//Если комплектующих нет в достаточном количестве на складе
	//то формируются документы Перемещение товаров для каждой комплектующей
	//на склад комплектации
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Сообщить("Не заполнена номенклатура", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Сообщить("Не заполнен склад", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	Если Комплектующие.Количество() = 0 Тогда
		Сообщить("Не заполнены комплектующие", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Для каждого СтрКомпл ИЗ Комплектующие Цикл
		
		Если НЕ СтрКомпл.Номенклатура.ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
			
			ДокПеремещение 								= Документы.ПеремещениеТоваров.СоздатьДокумент();
			ДокПеремещение.Дата							= Дата - 1;
			Докперемещение.Организация 					= Организация;
			ДокПеремещение.СкладПолучатель				= Склад;
			ДокПеремещение.ОтражатьВУправленческомУчете	= Истина;
			СтрокаТовар 								= ДокПеремещение.Товары.Добавить();
			СтрокаТовар.Номенклатура					= СтрКомпл.Номенклатура;
			СтрокаТовар.Коэффициент						= СтрКомпл.Коэффициент;
			СтрокаТовар.Количество						= СтрКомпл.Количество;
			СтрокаТовар.Качество						= Справочники.Качество.Новый;
			
			Если Номенклатура.ВидТовара=Перечисления.ВидыТоваров.Диски Тогда
				ДокПеремещение.СкладОтправитель=Справочники.Склады.НайтиПоКоду("00393");  // все крышки берем со склада ОШИПОВКА
			КонецЕсли;	
			ДокПеремещение.ПолучитьФорму().Открыть();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДействияФормыДействиеУдалитьКрышки(Кнопка)
	сч=0;
	Пока сч < Комплектующие.Количество() Цикл
		Если Не ЗначениеНеЗаполнено(Комплектующие[сч].Номенклатура) И Найти(Комплектующие[сч].Номенклатура,"Крышк")>0 Тогда
			Комплектующие.Удалить(сч);
		Иначе 
			сч=сч+1;	
		КонецЕсли;	
	КонецЦикла;

	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиКомплектующие = ЭлементыФормы.Комплектующие.Колонки;
