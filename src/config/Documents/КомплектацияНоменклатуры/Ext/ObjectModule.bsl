Перем мВалютаРегламентированногоУчета Экспорт;
Перем мПорядокСписанияПартий;           // (Общ)

//БАЛАНС (04.12.2007)                       
//
Перем мПроведениеИзФормы Экспорт; 

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура заполняет табличную часть Комплектующих из регистра сведений
// КомплектующиеНоменклатуры
//
Процедура ЗаполнитьКомплектующие() Экспорт

	Если Комплектующие.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		Комплектующие.Очистить();
	КонецЕсли;

	// заполним по регистру КомплектующиеНоменклатуры
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура" ,               Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры" , ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("Коэффициент" ,                Коэффициент);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Комплектующая КАК Номенклатура,
	|	ХарактеристикаКомплектующей КАК ХарактеристикаНоменклатуры,
	|	Количество * &Коэффициент КАК Количество,
	|	ЕдиницаИзмерения,
	|	ДоляСтоимости
	|ИЗ
	|	РегистрСведений.КомплектующиеНоменклатуры
	|
	|ГДЕ
	|	Номенклатура = &Номенклатура И
	|	ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		НоваяСтрока = Комплектующие.Добавить();

		НоваяСтрока.Номенклатура                     = Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры       = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.Количество                       = Выборка.Количество * Количество;
		НоваяСтрока.ЕдиницаИзмерения                 = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.ДоляСтоимости                    = Выборка.ДоляСтоимости;
		НоваяСтрока.Коэффициент                      = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;

		ЗаполнитьСпособСписанияОстаткаКомплектующихТабЧасти(НоваяСтрока, ЭтотОбъект);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьКомплектующие()

// Функция формирует табличный документ
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьКомплектацияНоменклатуры()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Номенклатура.НаименованиеПолное Как Комплект,
	|	ЕдиницаИзмерения,
	|	Количество,
	|	Ответственный,
	|	Организация
	|ИЗ
	|	Документ.КомплектацияНоменклатуры КАК КомплектацияНоменклатуры
	|
	|ГДЕ
	|	КомплектацияНоменклатуры.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;

	Макет = ПолучитьМакет("Комплектация");

	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Количество,
	|	ЕдиницаИзмерения,
	|	НомерСтроки
	|
	|ИЗ
	|	Документ.КомплектацияНоменклатуры.Комплектующие КАК КомплектацияНоменклатурыКомплектующие
	|
	|ГДЕ
	|	КомплектацияНоменклатурыКомплектующие.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки ВОЗР
	|";

	ЗапросКомплектующие = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КомплектацияНоменклатуры_Комплектация";

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, ?(ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация, "Комплектация", "Разукомплектация")+" номенклатуры");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Комплект");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.КоличествоНаПечать = ""+Шапка.Количество+" ("+Шапка.ЕдиницаИзмерения+")";
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);

	Для каждого ВыборкаСтрокКомплектующие Из ЗапросКомплектующие Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокКомплектующие.Номенклатура) Тогда
			СообщитьОбОшибке("В одной из строк не заполнено значение комплектующей - строка при печати пропущена.");
			Продолжить;
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокКомплектующие);
		ОбластьМакета.Параметры.НомерСтроки = ЗапросКомплектующие.Индекс(ВыборкаСтрокКомплектующие) + 1;
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.ОтветственныйПредставление = "/"+ Шапка.Ответственный + "/";
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПеремещениеТоваров()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "Комплектация" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьКомплектацияНоменклатуры();	
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();

	КонецЕсли;

	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));

КонецПроцедуры // Печать()

//// Возвращает доступные варианты печати документа
////
//// Вовращаемое значение:
////  Струткура, каждая строка которой соответствует одному из вариантов печати
////  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;

	СписокМакетов.Добавить("Комплектация", "Комплектация номенклатуры");

	ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

#КонецЕсли

// Заолняет табличную часть по сериям при оперативном проведении
//
Процедура ЗаполнитьПоСериям()

	ТоварыТабличнойЧасти = Комплектующие.Выгрузить();
	ТоварыТабличнойЧасти.Свернуть("Номенклатура"); 

	МассивНоменклатуры = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");

	ТаблицаСерий = ПолучитьТаблицуОстатковПоСериям(Склад, Организация, МассивНоменклатуры);
	ТоварыТабличнойЧасти=Комплектующие.Выгрузить();
	Комплектующие.Очистить();

	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;

	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл
		
		СтуктураПоиска = Новый Структура;
		СтуктураПоиска.Вставить("Номенклатура",               ИсходнаяСтрока.Номенклатура);
		СтуктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтуктураПоиска.Вставить("Качество",                   Справочники.Качество.Новый);
		НайденныеСтроки = ТаблицаСерий.НайтиСтроки(СтуктураПоиска);
		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;
		СтрокаСПустойСерией = Неопределено;

		Для Каждого Строка Из НайденныеСтроки Цикл
			Если КоличествоОсталосьПогасить<=0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;
			ОстатокВЕдиницахДокумента = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент;
			
			Если ОстатокВЕдиницахДокумента  >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить/ОстатокВЕдиницахДокумента;
			Иначе
				КоэффСписания = 1
			КонецЕсли;

			СписанноеКоличество = Окр(ОстатокВЕдиницахДокумента * КоэффСписания, 3, РежимОкругления.Окр15как20);
			НоваяСтрока = Комплектующие.Добавить();
			НоваяСтрока.Номенклатура               = ИсходнаяСтрока.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения           = ИсходнаяСтрока.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент                = ИсходнаяСтрока.Коэффициент;
			НоваяСтрока.ХарактеристикаНоменклатуры = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры          = Строка.СерияНоменклатуры;
			НоваяСтрока.СпособСписания             = ИсходнаяСтрока.СпособСписания;
			НоваяСтрока.ДоляСтоимости              = ИсходнаяСтрока.ДоляСтоимости;
			НоваяСтрока.Количество                 = СписанноеКоличество; 
			Если ЗначениеНеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток = Строка.Остаток;
		КонецЦикла;
		
		Если КоличествоОсталосьПогасить>0 Тогда
			Если СтрокаСПустойСерией = Неопределено Тогда
				НоваяСтрока = Комплектующие.Добавить();
				НоваяСтрока.Номенклатура               = ИсходнаяСтрока.Номенклатура;
				НоваяСтрока.ЕдиницаИзмерения           = ИсходнаяСтрока.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент                = ИсходнаяСтрока.Коэффициент;
				НоваяСтрока.ДоляСтоимости              = ИсходнаяСтрока.ДоляСтоимости;
				НоваяСтрока.ХарактеристикаНоменклатуры = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
				НоваяСтрока.СерияНоменклатуры          = ИсходнаяСтрока.СерияНоменклатуры;
				НоваяСтрока.СпособСписания             = ИсходнаяСтрока.СпособСписания;
				НоваяСтрока.Количество                 = КоличествоОсталосьПогасить;
			Иначе
				СтрокаСПустойСерией.Количество = СтрокаСПустойСерией.Количество+КоличествоОсталосьПогасить;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ЗаполнитьПоСериям()

// Заполняет табличную часть при оперативном проведении
//
// Параметры:
//  Отказ - отказ от дальнейшего проведения.
//
Процедура ЗаполнитьТабличныеЧастиПередПроведением(Отказ) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	Запрос.УстановитьПараметр("Склад", Склад);

	// Сформируем массив комплектующих для фильтров запросов.
	МассивКомплектующих = Комплектующие.ВыгрузитьКолонку("Номенклатура");
	Запрос.УстановитьПараметр("Комплектующие", МассивКомплектующих);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыВРезервеНаСкладах.Номенклатура                КАК Номенклатура,
	|	ТоварыВРезервеНаСкладах.ХарактеристикаНоменклатуры  КАК ХарактеристикаНоменклатуры,
	|	ТоварыВРезервеНаСкладах.КоличествоОстаток           КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(,ДокументРезерва = &ЗаказПокупателя
	|              И Склад = &Склад
	|              И Номенклатура В (&Комплектующие)) КАК ТоварыВРезервеНаСкладах
	|";

	Таблица = Запрос.Выполнить().Выгрузить();

	// Сначала вычтем из найденных остатков количество, размещение по которому явно указан
	// способ списания "из резерва". Для этого последовательно обойдем табличную часть 
	// Комплектующие
	Для Каждого СтрокаТЧ Из Комплектующие Цикл

		// Сначала обходим все строки, у которых уже установлен способ списание "из резерва",
		// если способ списание "со склада" или не установлен - пропускаем строку
		Если ЗначениеНеЗаполнено(СтрокаТЧ.СпособСписания) ИЛИ СтрокаТЧ.СпособСписания = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада Тогда
			Продолжить;
		КонецЕсли; 

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);

		НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);

		// Погашаем количество в таблице. Пересчитаем количество в ТЧ в единицы хранения.
		КоличествоОсталосьПогасить = СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент 
						/ СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;

		Для Каждого Строка Из НайденныеСтроки Цикл

			Если КоличествоОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;

			Если Строка.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли;

			Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить/Строка.Количество;
			Иначе
				// Это ошибка: списываемое количество не должно быть больше остатка.
				// Такой документ не проведется оперативно.
				КоэффСписания = 1;
			КонецЕсли;

			СписанноеКоличество = Окр(Строка.Количество * КоэффСписания, 3, РежимОкругления.Окр15как20);

			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - СписанноеКоличество;

			Строка.Количество = Строка.Количество - СписанноеКоличество;

		КонецЦикла; 

		Если КоличествоОсталосьПогасить > 0 Тогда
			// Значит в документе неверно задан способ списания. Заполнять не будем
			Возврат;
		КонецЕсли; 

	КонецЦикла;

	// Заполним массив, хранящий две таблицы значений, в которых задано распределение по
	// способу списания для товаров и возвратной тары
	МассивТаблицСтрок = Новый Массив;

	ТаблицаТЧ = Комплектующие.Выгрузить();
	ТаблицаТЧ.Колонки.Добавить("КоличествоЕдиницХранения");

	МассивТаблицСтрок = Комплектующие.Выгрузить();
	МассивТаблицСтрок.Очистить();
	МассивТаблицСтрок.Колонки.Добавить("ИндексИсходнойСтроки");
	МассивТаблицСтрок.Колонки.Добавить("СкладКомпанииРозничный");

	Для Каждого СтрокаТЧ Из ТаблицаТЧ Цикл

		Если СтрокаТЧ.СпособСписания = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
			Продолжить;
		КонецЕсли; 

		// Пересчитаем в единицы хранения
		СтрокаТЧ.КоличествоЕдиницХранения = СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент 
								/ СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);

		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);

		НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);

		// Погашаем количество в таблице
		КоличествоОсталосьПогасить = СтрокаТЧ.КоличествоЕдиницХранения;

		// Погашаем количество в таблице, записывая способ списания
		Для Каждого Строка Из НайденныеСтроки Цикл

			Если КоличествоОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;

			Если Строка.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли;

			Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить / Строка.Количество;
			Иначе
				КоэффСписания = 1;
			КонецЕсли;

			СписанноеКоличество = Окр(Строка.Количество * КоэффСписания, 3, РежимОкругления.Окр15как20);

			// Добавляем строку с данными о размещенном количестве
			НоваяСтрока = МассивТаблицСтрок.Добавить();
			НоваяСтрока.ИндексИсходнойСтроки = ТаблицаТЧ.Индекс(СтрокаТЧ);

			НоваяСтрока.Номенклатура     = СтрокаТЧ.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения = СтрокаТЧ.ЕдиницаИзмерения;

			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;

			НоваяСтрока.Количество = ?(СтрокаТЧ.Коэффициент <> 0, СписанноеКоличество
			* НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / СтрокаТЧ.Коэффициент 
										, 0);
			НоваяСтрока.Коэффициент = СтрокаТЧ.Коэффициент;

			КоэффПогашения = СписанноеКоличество / КоличествоОсталосьПогасить;

			НоваяСтрока.СпособСписания = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;
			
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - СписанноеКоличество;

			// Уменьшаем количество в исходной строке
			СтрокаТЧ.Количество = СтрокаТЧ.КоличествоЕдиницХранения - СписанноеКоличество;

			// Уменьшаем количество в строке остатков
			Строка.Количество   = Строка.Количество - СписанноеКоличество;

		КонецЦикла;
		
		Если КоличествоОсталосьПогасить > 0 Тогда

			// Добавляем строку с данными о размещенном количестве
			НоваяСтрока = МассивТаблицСтрок.Добавить();
			НоваяСтрока.ИндексИсходнойСтроки = ТаблицаТЧ.Индекс(СтрокаТЧ);
			НоваяСтрока.Номенклатура = СтрокаТЧ.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения = СтрокаТЧ.ЕдиницаИзмерения;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;

			НоваяСтрока.Количество = ?(СтрокаТЧ.Коэффициент <>0, КоличествоОсталосьПогасить 
			* НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент/ СтрокаТЧ.Коэффициент 
										, 0);
			НоваяСтрока.Коэффициент = СтрокаТЧ.Коэффициент;

			НоваяСтрока.СпособСписания = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;

		КонецЕсли; 

	КонецЦикла;

	// Изменяем табличную часть
	ТекИндексИсходнойСтроки = Неопределено;
	Для Каждого Строка Из МассивТаблицСтрок Цикл

		// Если строка с таким индексом уже обрабатывалась, то добавляем новую
		Если ТекИндексИсходнойСтроки = Строка.ИндексИсходнойСтроки Тогда
			Стр = Комплектующие[Строка.ИндексИсходнойСтроки];
			РедактируемаяСтрока = Комплектующие.Добавить();
			РедактируемаяСтрока.Номенклатура = Стр.Номенклатура;
			РедактируемаяСтрока.ХарактеристикаНоменклатуры = Стр.ХарактеристикаНоменклатуры;
		Иначе
			РедактируемаяСтрока = Комплектующие[Строка.ИндексИсходнойСтроки];
		КонецЕсли; 

		РедактируемаяСтрока.СпособСписания = Строка.СпособСписания;

		Если РедактируемаяСтрока.Количество = Строка.Количество Тогда
			Продолжить;
		КонецЕсли;

		РедактируемаяСтрока.ЕдиницаИзмерения = Строка.ЕдиницаИзмерения;
		РедактируемаяСтрока.Коэффициент = Строка.Коэффициент;
		РедактируемаяСтрока.Количество = Строка.Количество;

		ТекИндексИсходнойСтроки = Строка.ИндексИсходнойСтроки;

	КонецЦикла; 
	
	ЗаполнитьПоСериям();

КонецПроцедуры // ЗаполнитьТабличныеЧастиПередПроведением()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ

// Процедура заполняет начальными значениями документ
Процедура ЗаполнитьНачальнымиЗначениями() Экспорт

	// Вызвать общую процедуру для заполнения основных реквизитов
	//ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь);

	// Дозаполнить особенные для формы реквизиты

КонецПроцедуры // ЗаполнитьНачальнымиЗначениями()

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Записать суммы документа в соответствующие реквизиты шапки для показа в журналах
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
Процедура РасчетСуммДокумента()

	СуммаДокумента = Комплектующие.Итог("Сумма");

КонецПроцедуры // РасчетСуммДокумента

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - текст для дополнительной информации об ошибки проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Организация, Склад, ВидОперации, Номенклатура, Количество, ЕдиницаИзмерения");
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Вид склада
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		СообщитьОбОшибке("Комплектация номенклатуры не может проводится на неавтоматизированной торговой точке!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоКомплектующим - результат запроса по табличной части "Комплектующие",
//  СтруктураШапкиДокумента         - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуКомплектующих(РезультатЗапросаПоКомплектующим, СтруктураШапкиДокумента)

	ТаблицаКомплектующих = РезультатЗапросаПоКомплектующим.Выгрузить();

	Возврат ТаблицаКомплектующих;

КонецФункции // ПодготовитьТаблицуКомплектующих()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоКомплектующим - результат запроса по табличной части "Комплектующие",
//  СтруктураШапкиДокумента         - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений по комплектам.
//
Функция ПодготовитьТаблицуКомплектов(РезультатЗапросаПоКомплектующим, СтруктураШапкиДокумента)

	// подготовим структуру таблицы
	ТаблицаКомплектов = РезультатЗапросаПоКомплектующим.Выгрузить();
	ТаблицаКомплектов.Очистить();

	НоваяСтрока = ТаблицаКомплектов.Добавить();
	НоваяСтрока.Номенклатура                 = СтруктураШапкиДокумента.Номенклатура;
	НоваяСтрока.Услуга                       = СтруктураШапкиДокумента.Услуга;
	НоваяСтрока.Количество                   = СтруктураШапкиДокумента.Количество;
	НоваяСтрока.НомерСтроки                  = 0;
	НоваяСтрока.ХарактеристикаНоменклатуры   = СтруктураШапкиДокумента.ХарактеристикаНоменклатуры;
	НоваяСтрока.СерияНоменклатуры            = СтруктураШапкиДокумента.СерияНоменклатуры;
	НоваяСтрока.ЗаказПартии                  = СтруктураШапкиДокумента.ЗаказПокупателя;
	НоваяСтрока.СпособСписанияОстаткаТоваров = СтруктураШапкиДокумента.СпособСписания;

	Возврат ТаблицаКомплектов;

КонецФункции // ПодготовитьТаблицуКомплектов()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоКомплектующим  - таблица значений, содержащая данные для проведения и проверки ТЧ Комплектующие
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиКомплектующих(ТаблицаПоКомплектующим, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Комплектующие";

	// Укажем, что надо проверить:
	Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация Тогда
		СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, ДоляСтоимости");
	Иначе
		СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	КонецЕсли;

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Комплектующие",СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "Комплектующие", ТаблицаПоКомплектующим, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Комплектующие", ТаблицаПоКомплектующим, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиКомплектующих()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоКомплектующим    - таблица значений, содержащая данные для проведения и проверки ТЧ ТаблицаПоКомплектующим
//  ТаблицаПоКомплектам       - таблица значений, содержащая данные для проведения и проверки по комплектам,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектующим, ТаблицаПоКомплектам, Отказ, Заголовок);

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектующим, ТаблицаПоКомплектам, Отказ, Заголовок);
	ДвиженияПоТоварамОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектующим, ТаблицаПоКомплектам, Отказ, Заголовок);
	ДвиженияПоСписаннымТоварам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектующим, ТаблицаПоКомплектам, Отказ, Заголовок);

	ДвиженияРегистровГрузчикиИКладовщикиКомплектация(Отказ);
		
	УчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата);

	Если УчетнаяПолитика.СписыватьПартииПриПроведенииДокументов Тогда

		ДвижениеПартийТоваров(Ссылка,Движения.СписанныеТовары.Выгрузить());

		Если ОтражатьВУправленческомУчете Тогда
			ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
			ЗаписьРегистрации.Период      = Дата;
			ЗаписьРегистрации.Регистратор = Ссылка;
		КонецЕсли;

	Иначе

		// В неоперативном режиме границы последовательностей сдвигаются назад, если они позже документа.
		Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
			СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете)
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектующим, ТаблицаПоКомплектам, Отказ, Заголовок)
	
	// Движения по документу.

	Если ОтражатьВУправленческомУчете Тогда

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах

		// По комплектующим

		НаборДвижений = Движения.ТоварыНаСкладах;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоКомплектующим, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
			// Проверка осатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Комплектующие", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;

		Если Не Отказ Тогда
			Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
				Движения.ТоварыНаСкладах.ВыполнитьРасход();
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация Тогда
				Движения.ТоварыНаСкладах.ВыполнитьПриход();
			КОнецЕсли;
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
			// Если есть списание из резерва, то надо списать резерв
			ТаблицаПоКомплектующимИзРезерва = ТаблицаПоКомплектующим.Скопировать();
			Сч = 0;
			Пока Сч < ТаблицаПоКомплектующимИзРезерва.Количество() Цикл
				СтрокаТаблицы = ТаблицаПоКомплектующимИзРезерва.Получить(Сч);
				Если СтрокаТаблицы.СпособСписанияОстаткаТоваров <> Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
					 ТаблицаПоКомплектующимИзРезерва.Удалить(СтрокаТаблицы);
				Иначе 
					Сч = Сч + 1;
				КонецЕсли; 
			КонецЦикла;
				
			Если ТаблицаПоКомплектующимИзРезерва.Количество() > 0 Тогда
				НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

				// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
				ТаблицаДвижений = НаборДвижений.Выгрузить();

				// Заполним таблицу движений.
				ЗагрузитьВТаблицуЗначений(ТаблицаПоКомплектующимИзРезерва, ТаблицаДвижений);

				// Недостающие поля.
				ТаблицаДвижений.ЗаполнитьЗначения(Склад, "Склад");
				ТаблицаДвижений.ЗаполнитьЗначения(ЗаказПокупателя,"ДокументРезерва");

				НаборДвижений.мПериод            = Дата;
				НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

				// Проверка осатков при оперативном проведении.
				Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
					НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Комплектующие", СтруктураШапкиДокумента, Отказ, Заголовок);
				КонецЕсли;
				
				Если Не Отказ Тогда
					Движения.ТоварыВРезервеНаСкладах.ВыполнитьРасход();
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;

		// По комплектам

		НаборДвижений = Движения.ТоварыНаСкладах;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоКомплектам, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация Тогда
			
			// Проверка осатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатковРазукомплектация(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;

		Если Не Отказ Тогда
			Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
				Движения.ТоварыНаСкладах.ВыполнитьПриход();
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация Тогда
				Движения.ТоварыНаСкладах.ВыполнитьРасход();
			КОнецЕсли;
		КонецЕсли;
		
		// По резервам
		ТаблицаПоКомплектамИзРезерва = ТаблицаПоКомплектам.Скопировать();
		
		Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация Тогда
			//Если есть списание из резерва, то надо списать резерв		
			Сч = 0;
			Пока Сч < ТаблицаПоКомплектамИзРезерва.Количество() Цикл
				СтрокаТаблицы = ТаблицаПоКомплектамИзРезерва.Получить(Сч);
				Если СтрокаТаблицы.СпособСписанияОстаткаТоваров <> Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
					 ТаблицаПоКомплектамИзРезерва.Удалить(СтрокаТаблицы);
				Иначе 
					Сч = Сч + 1;
				КонецЕсли; 
			КонецЦикла;
			
			Если ТаблицаПоКомплектамИзРезерва.Количество() > 0 Тогда
				НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

				// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
				ТаблицаДвижений = НаборДвижений.Выгрузить();
				ТаблицаДвижений.Очистить();

				// Заполним таблицу движений.
				ЗагрузитьВТаблицуЗначений(ТаблицаПоКомплектамИзРезерва, ТаблицаДвижений);

				// Недостающие поля.
				ТаблицаДвижений.ЗаполнитьЗначения(Склад, "Склад");
				ТаблицаДвижений.ЗаполнитьЗначения(ЗаказПокупателя,"ДокументРезерва");

				НаборДвижений.мПериод            = Дата;
				НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

				// Проверка осатков при оперативном проведении.
				Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
					НаборДвижений.КонтрольОстатковРазукомплектация(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок);
				КонецЕсли;
				
				Если Не Отказ Тогда
					Движения.ТоварыВРезервеНаСкладах.ВыполнитьРасход();
				КонецЕсли;
			КонецЕсли;
					
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
			
			Если ТаблицаПоКомплектамИзРезерва.Количество() > 0
				И НЕ ЗначениеНеЗаполнено(ЗаказПокупателя) Тогда
				
				НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

				// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
				ТаблицаДвижений = НаборДвижений.Выгрузить();
				ТаблицаДвижений.Очистить();

				// Заполним таблицу движений.
				ЗагрузитьВТаблицуЗначений(ТаблицаПоКомплектамИзРезерва, ТаблицаДвижений);

				// Недостающие поля.
				ТаблицаДвижений.ЗаполнитьЗначения(Склад, "Склад");
				ТаблицаДвижений.ЗаполнитьЗначения(ЗаказПокупателя,"ДокументРезерва");

				НаборДвижений.мПериод            = Дата;
				НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
				
				Движения.ТоварыВРезервеНаСкладах.ВыполнитьПриход();
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоТоварамОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектующим, ТаблицаПоКомплектам, Отказ, Заголовок)

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.

	// По комплектующим

	НаборДвижений = Движения.ТоварыОрганизаций;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	ЗагрузитьВТаблицуЗначений(ТаблицаПоКомплектующим, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
		// Проверка осатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Комплектующие", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

	Если Не Отказ Тогда
		Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
			Движения.ТоварыОрганизаций.ВыполнитьРасход();
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация Тогда
			Движения.ТоварыОрганизаций.ВыполнитьПриход();
		КонецЕсли;
	КонецЕсли;

	// По комплектам

	НаборДвижений = Движения.ТоварыОрганизаций;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.
	ЗагрузитьВТаблицуЗначений(ТаблицаПоКомплектам, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация Тогда
		// Проверка осатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатковРазукомплектация(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

	Если Не Отказ Тогда
		Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
			Движения.ТоварыОрганизаций.ВыполнитьПриход();
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация Тогда
			Движения.ТоварыОрганизаций.ВыполнитьРасход();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ДвиженияПоСписаннымТоварам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектующим, ТаблицаПоКомплектам, Отказ, Заголовок)

	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.

	ТаблицаПоТоварам = ТаблицаПоКомплектующим.Скопировать();

	// Количество комплекта распределяется на комплектующие
	СтрокаКомплекта = ТаблицаПоКомплектам[0];

	Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда

		ТаблицаПоТоварам.Колонки.Добавить("НоменклатураНовая");
		ТаблицаПоТоварам.Колонки.Добавить("ХарактеристикаНоменклатурыНовая");
		ТаблицаПоТоварам.Колонки.Добавить("СерияНоменклатурыНовая");
		ТаблицаПоТоварам.Колонки.Добавить("КоличествоПоступление");

		Если ТаблицаПоТоварам.Количество()<>0 Тогда
			КоличествоКомплекта = Окр(СтрокаКомплекта.Количество/ТаблицаПоТоварам.Количество(), 3);
		Иначе
			КоличествоКомплекта = 0;
		КонецЕсли;

		НеРаспределеноКоличествоКомплекта = СтрокаКомплекта.Количество;

		Для каждого Строка Из ТаблицаПоТоварам Цикл

			Строка.НоменклатураНовая               = СтрокаКомплекта.Номенклатура;
			Строка.ХарактеристикаНоменклатурыНовая = СтрокаКомплекта.ХарактеристикаНоменклатуры;
			Строка.СерияНоменклатурыНовая          = СтрокаКомплекта.СерияНоменклатуры;

			НеРаспределеноКоличествоКомплекта = НеРаспределеноКоличествоКомплекта-КоличествоКомплекта;

			Строка.КоличествоПоступление = КоличествоКомплекта;

			Если ТаблицаПоТоварам.Индекс(Строка)=ТаблицаПоТоварам.Количество()-1 Тогда
				Строка.КоличествоПоступление = Строка.КоличествоПоступление + НеРаспределеноКоличествоКомплекта;
			КонецЕсли;

		КонецЦикла;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация Тогда

		ТаблицаПоТоварам.Колонки.Номенклатура.Имя               = "НоменклатураНовая";
		ТаблицаПоТоварам.Колонки.ХарактеристикаНоменклатуры.Имя = "ХарактеристикаНоменклатурыНовая";
		ТаблицаПоТоварам.Колонки.СерияНоменклатуры.Имя          = "СерияНоменклатурыНовая"; 
		ТаблицаПоТоварам.Колонки.Количество.Имя                 = "КоличествоПоступление";

		ТаблицаПоТоварам.Колонки.Добавить("Номенклатура");
		ТаблицаПоТоварам.Колонки.Добавить("ХарактеристикаНоменклатуры");
		ТаблицаПоТоварам.Колонки.Добавить("СерияНоменклатуры");
		ТаблицаПоТоварам.Колонки.Добавить("Количество");

		НеРаспределеноКоличествоКомплекта = СтрокаКомплекта.Количество;

		ВсегоДолейСтоимости = ТаблицаПоТоварам.Итог("ДоляСтоимости");

		Для каждого Строка Из ТаблицаПоТоварам Цикл

			КоэффициентСтроки   = ?(ВсегоДолейСтоимости = 0, 0, Строка.ДоляСтоимости/ВсегоДолейСтоимости);
			КоличествоКомплекта = Окр(СтрокаКомплекта.Количество*КоэффициентСтроки, 3);

			Строка.Номенклатура               = СтрокаКомплекта.Номенклатура;
			Строка.ХарактеристикаНоменклатуры = СтрокаКомплекта.ХарактеристикаНоменклатуры;
			Строка.СерияНоменклатуры          = СтрокаКомплекта.СерияНоменклатуры;

			НеРаспределеноКоличествоКомплекта = НеРаспределеноКоличествоКомплекта-КоличествоКомплекта;

			Строка.Количество = КоличествоКомплекта;

			Если ТаблицаПоТоварам.Индекс(Строка)=ТаблицаПоТоварам.Количество()-1 Тогда
				Строка.Количество = Строка.Количество + НеРаспределеноКоличествоКомплекта;
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;
	
	ТаблицаПоТоварам.Колонки.Добавить("ДокументОприходованияНовый");
	ТаблицаПоТоварам.ЗаполнитьЗначения(Ссылка, "ДокументОприходованияНовый");

	ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.Комплектация, "КодОперацииПартииТоваров");

	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд + 1;
		Строка.НомерСтрокиДокумента = Инд;
	КонецЦикла;

	// Если ПУ по складам
	Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");
	КонецЕсли;

	// Если резервирование под заказ - заказ партии
	Если ЗаказПокупателя.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда

		ТаблицаДвижений.ЗаполнитьЗначения(?(НЕ ЗначениеНеЗаполнено(ЗаказПокупателя), ЗаказПокупателя, Неопределено),"ЗаказПартии");

		// Заказ, на который списывается
		ТаблицаДвижений.ЗаполнитьЗначения(?(НЕ ЗначениеНеЗаполнено(ЗаказПокупателя), ЗаказПокупателя, Неопределено),"ЗаказСписания");
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,  "ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию, "ДопустимыйСтатус2");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ПоОрдеру,   "ДопустимыйСтатус3");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.Комплектация, "КодОперацииПартииТоваров");

	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");

	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете, "ОтражатьВУправленческомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВБухгалтерскомУчете,  "ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВНалоговомУчете,      "ОтражатьВНалоговомУчете");

	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;

КонецПроцедуры

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок)

	мУчетнаяПолитика   = ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ);
	ТабУчетнаяПолитика = ПолучитьУчетнуюПолитику(Дата);

	мПорядокСписанияПартий = Новый Структура("Упр,Бух,Нал");

	Если ОтражатьВУправленческомУчете Тогда
		ПодготовитьПараметрыУчетнойПолитикиУпр(ТабУчетнаяПолитика, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура определяет параметры упр. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиУпр(ТабУчетнаяПолитика, Отказ, Заголовок)

	// Получим метод списания партий FIFO / LIFO / По средней
	СтрокаУчетнойПолитики = ТабУчетнаяПолитика[0];
	мПорядокСписанияПартий.Вставить("Упр", СтрокаУчетнойПолитики.СпособОценкиМПЗУпр);

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиУпр()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = СформироватьДеревоПолейЗапросаПоШапке();
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"      , "ВалютаУправленческогоУчета",     "ВалютаУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"      , "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад",           "ВидСклада",                      "ВидСклада");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Номенклатура"   , "Услуга",                         "Услуга");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "ВестиПартионныйУчетПоСкладам"  , "ВестиПартионныйУчетПоСкладам");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	//Надо позвать проверку заполнения реквизитов шапки
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"                 , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                       , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                        , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"                   , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("НомерСтроки"                  , "НомерСтроки");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"   , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"            , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ЗаказПартии"                  , "Ссылка.ЗаказПокупателя");
	СтруктураПолей.Вставить("СпособСписанияОстаткаТоваров" , "СпособСписания");
	СтруктураПолей.Вставить("ДоляСтоимости"                , "ДоляСтоимости");

	РезультатЗапросаПоКомплектующим = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Комплектующие", СтруктураПолей);

	// Подготовим таблицы для проведения.
	ТаблицаПоКомплектующим = ПодготовитьТаблицуКомплектующих(РезультатЗапросаПоКомплектующим, СтруктураШапкиДокумента);
	ТаблицаПоКомплектам    = ПодготовитьТаблицуКомплектов(РезультатЗапросаПоКомплектующим, СтруктураШапкиДокумента);;

	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиКомплектующих(ТаблицаПоКомплектующим, СтруктураШапкиДокумента, Отказ, Заголовок);

	ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок);


	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектующим, ТаблицаПоКомплектам, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры	// ОбработкаПроведения()



Процедура ДвиженияРегистровГрузчикиИКладовщикиКомплектация(Отказ)
Если ОбщийВес=0 ИЛИ ДанныеПоПогрузке.Количество()=0 ИЛИ ДанныеПоПогрузке.Итог("Вес")=0 Тогда
	  Возврат;	  
КонецЕсли;	  
	
КТУПоДокументу=ДанныеПоПогрузке.Итог("Вес");
	
СсылкаГрузовые=Справочники.Номенклатура.НайтиПоКоду("0001748"); // папка Грузовые шины

ВесНетто=ОбщийВес;
Вес=ВесНетто;
ВесДиски=0;
ВесИмпорт=0;
ВесВыходные=0;

Если Номенклатура.ВидТовара=Перечисления.ВидыТоваров.Диски Тогда
ВесДиски=ВесНетто;	
ИначеЕсли Номенклатура.ВидТовара=Перечисления.ВидыТоваров.Шины И 
Номенклатура.Импорт И НЕ Номенклатура.ПринадлежитЭлементу(СсылкаГрузовые) Тогда
ВесИмпорт=0.2*ВесНетто;	
КонецЕсли;	

Если ДеньНедели (Дата) = 6 ИЛИ ДеньНедели (Дата) = 7 ТОГДА
ВесВыходные=ВесНетто;	
КонецЕсли;	

Для каждого строкаПогрузка Из ДанныеПоПогрузке Цикл
			Движ = Движения.ДанныеПоГрузчикам.Добавить();
			Движ.Регистратор 	= ЭтотОбъект;
			Движ.Период 		= ЭтотОбъект.Дата;
			Движ.Сотрудник		=строкаПогрузка.Грузчик;
			Движ.ВесНетто		=ВесНетто*строкаПогрузка.Вес/КТУПоДокументу;
			Движ.ВесДиски		=ВесДиски*строкаПогрузка.Вес/КТУПоДокументу;
			Движ.ВесИмпорт		=ВесИмпорт*строкаПогрузка.Вес/КТУПоДокументу;
			Движ.ВесВыходные	=ВесВыходные*строкаПогрузка.Вес/КТУПоДокументу;
			Движ.Вес		= Движ.ВесНетто+Движ.ВесДиски+Движ.ВесИмпорт+Движ.ВесВыходные;
			
	КонецЦикла;	
	
	Движения.ДанныеПоГрузчикам.Записать(Истина);
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

		ВесИтого = ПолучитьВесНетто(Номенклатура)*Количество;
		Если ВесИтого<>ОбщийВес Тогда
		ОбщийВес=ВесИтого;
		КонецЕсли;

	// Посчитать суммы документа 
	РасчетСуммДокумента();

	
	//БАЛАНС (04.12.2007)                       
	//
	ЗарегистрироватьОбъект(ЭтотОбъект,Отказ,мПроведениеИзФормы);
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 
	
КонецПроцедуры // ПередЗаписью()

Процедура ОбработкаЗаполнения(Основание)

	// Заполним реквизиты из стандартного набора по документу основанию.
	Если Основание <> Неопределено Тогда
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
    КонецЕсли;
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда

		// Заполнение шапки
		Комментарий     = Основание.Комментарий;
		ЗаказПокупателя = Основание.Ссылка;
		СуммаДокумента  = Основание.СуммаДокумента;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда

		// Заполнение шапки
		ОтражатьВУправленческомУчете = Истина;
		ОтражатьВНалоговомУчете      = Ложь;
		ОтражатьВБухгалтерскомУчете  = Ложь;
		Комментарий    = Основание.Комментарий;
		СуммаДокумента = Основание.СуммаДокумента;

	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	// Удаление записей регистрации из всех последовательностей
	Для Каждого НаборЗаписейРегистрацииВПоследовательности Из ПринадлежностьПоследовательностям Цикл
		НаборЗаписейРегистрацииВПоследовательности.Очистить();
	КонецЦикла;
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

//БАЛАНС (04.12.2007)                       
//
мПроведениеИзФормы = Ложь; 