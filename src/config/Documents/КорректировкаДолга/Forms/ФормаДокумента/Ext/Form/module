////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

Перем мПечатнаяФормаПоУмолчанию;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

//Очищает табличную часть документа при смене контрагента, организации
Процедура ОчиститьСтрокиТабЧасти(ВыбранноеЗначение, ОбъектСравнения, ТекстВопроса, СтандартнаяОбработка)
	Если СуммыДолга.Количество() > 0
	   И СуммыДолга[0].ДоговорКонтрагента[ОбъектСравнения] <> ВыбранноеЗначение Тогда

		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СуммыДолга.Очистить();
		Иначе  
			//Отказ от выбора
			СтандартнаяОбработка = Ложь;
		КонецЕсли; 		
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь);
		УстановитьНомерДокумента(ЭтотОбъект);

	КонецЕсли;

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("ДоговорКонтрагента");
	СтруктураКолонок.Вставить("Сделка");
	СтруктураКолонок.Вставить("КурсВзаиморасчетов");

	УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.СуммыДолга.Колонки, СтруктураКолонок);

	// Заполнить подменю выбора печатных форм.
	СписокМакетов = ЭтотОбъект.ПолучитьСписокПечатныхФорм();
	УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати,
	                                       СписокМакетов,
	                                       Новый Действие("ДействияФормыДействиеВыбратьПечатнуюФормы"));

	// Установить печатную форму по умолчанию.
	УстановитьКнопкуПечати(ЭтотОбъект.Метаданные().Имя, ЭтаФорма, СписокМакетов, мПечатнаяФормаПоУмолчанию);

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
    
	//БАЛАНС (04.12.2007)                       
	//
	мПроведениеИзФормы = Истина;

	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 

	
КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм для заполнения табличной части
//
Процедура КоманднаяПанельСуммыДолгаДействиеЗаполнитьОстаткамиПоВзаиморасчетам(Кнопка)

	Если ЗначениеНеЗаполнено(Контрагент) Тогда
		Предупреждение("Не выбран контрагент! Заполнение невозможно!");
		Возврат;
	КонецЕсли;

	Если СуммыДолга.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		СуммыДолга.Очистить();

	КонецЕсли;

	ЗаполнитьОстаткамиВзаиморасчетовУпр();

КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнить()

Процедура КоманднаяПанельТоварыЗаполнитьКурсовымиРазницами(Кнопка)

	Если ЗначениеНеЗаполнено(Контрагент) Тогда
		Предупреждение("Не выбран контрагент! Заполнение невозможно!");
		Возврат;
	КонецЕсли;

	Если СуммыДолга.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		СуммыДолга.Очистить();

	КонецЕсли;

	ЗаполнитьКурсовымиРазницами();
	
КонецПроцедуры


// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	НапечататьДокументПоУмолчанию(ЭтотОбъект, глТекущийПользователь, мПечатнаяФормаПоУмолчанию);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
//
Процедура ДействияФормыДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = Кнопка.Текст;
		СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		СписокМакетов = ПолучитьСписокПечатныхФорм();
		СтрокаМакетаВСписке = СписокМакетов.НайтиПоЗначению(Кнопка.Имя);
		Если СтрокаМакетаВСписке <> Неопределено Тогда
			Печать(СтрокаМакетаВСписке.Значение);
			СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
			СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;			
			
		Иначе
			СсылкаВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Кнопка.Имя, "_", "-")));
			Печать(СсылкаВнешнейФормы);
			СтруктураМакета.Макет = СсылкаВнешнейФормы;
			СтруктураМакета.ПредставлениеМакета = Кнопка.Текст;
		КонецЕсли;		
		
		мПечатнаяФормаПоУмолчанию = СтруктураМакета.Макет;
		СохранитьТекущуюКнопкуПечати(ЭтотОбъект.Метаданные().Имя, СтруктураМакета);

	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);

	// Проверка необходимости пересчета
	ФлагПересчета = Ложь;

	Для каждого СтрокаТаблицы Из СуммыДолга Цикл
		Если НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
			ВалютаДоговора  = СтрокаТаблицы.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			СтруктураВалюты = ПолучитьКурсВалюты(ВалютаДоговора, мТекущаяДатаДокумента);
			СтарыйКурс      = СтруктураВалюты.Курс;
			СтараяКратность = СтруктураВалюты.Кратность;
			СтруктураВалюты = ПолучитьКурсВалюты(ВалютаДоговора, Дата);
			НовыйКурс       = СтруктураВалюты.Курс;
			НоваяКратность  = СтруктураВалюты.Кратность;

			Если НЕ (НовыйКурс = СтарыйКурс И НоваяКратность = СтараяКратность) Тогда
				ФлагПересчета = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// Если изменился курс пересчитаем взаиморасчеты
	Если ФлагПересчета Тогда
		ТекстВопроса = "На дату документа у валюты взаиморасчетов был задан другой курс.
		               |Установить курс взаиморасчетов в соответствии с курсом валюты?";
		Ответ        = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			Для каждого СтрокаТаблицы Из СуммыДолга Цикл
				Если НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
					ВалютаДоговора                        = СтрокаТаблицы.ДоговорКонтрагента.ВалютаВзаиморасчетов;
					СтруктураВалюты                       = ПолучитьКурсВалюты(ВалютаДоговора, Дата);
					СтрокаТаблицы.КурсВзаиморасчетов      = СтруктураВалюты.Курс;
					СтрокаТаблицы.КратностьВзаиморасчетов = СтруктураВалюты.Кратность;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьНомерДокумента(ЭтотОбъект);

КонецПроцедуры // ОрганизацияПриИзменении()

Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОчиститьСтрокиТабЧасти(ВыбранноеЗначение, "Организация", 
						   "При смене организации табличная часть будет очищена. Продолжить?", СтандартнаяОбработка); 
						   
КонецПроцедуры // ОрганизацияОбработкаВыбора()


// Процедура - обработчик события "ОбработкаВыбора" поля ввода контрагента.
//
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// Если заполнена табличная часть, то ее надо очищать при несовпадении владельца с выбранным значением.
	ОчиститьСтрокиТабЧасти(ВыбранноеЗначение, "Владелец", 
						   "При смене контрагента табличная часть будет очищена. Продолжить?", СтандартнаяОбработка);
	
КонецПроцедуры // КонтрагентОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	МетаданныеДокумента = ЭтотОбъект.Метаданные();

	// Перезаполним Юр./Физ. лицо.
	Если ЕстьРеквизитДокумента("ЮрФизЛицоКонтрагента", МетаданныеДокумента)Тогда
		ЮрФизЛицоКонтрагента = Контрагент.ОсновноеЮрФизЛицо;
	КонецЕсли; 

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ЮрФизЛицоКонтрагента
//
Процедура ЮрФизЛицоКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ЮрФизЛицоКонтрагента = ВыбранноеЗначение;
	Если НЕ ЗначениеНеЗаполнено(ЮрФизЛицоКонтрагента) Тогда
		Если ЗначениеНеЗаполнено(Контрагент) Тогда
			Контрагент = ЮрФизЛицоКонтрагента.Контрагент;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ СУММЫДОЛГА

// Процедура - обработчик события "ПриИзменении" поля ввода договора.
//
Процедура СуммыДолгаДоговорКонтрагентаПриИзменении(Элемент)

	//  Для сделки нет значения по умолчанию в договоре, поэтому заполняем ее пустым значением.
	ЭлементыФормы.СуммыДолга.ТекущиеДанные.Сделка = Неопределено;

	// Курс надо тоже заполнить
	Если Не ЗначениеНеЗаполнено(Элемент.Значение) Тогда
		
	//+++( 22.07.2011  SAO - прямо из Сделки
	стр1 = ЭлементыФормы.СуммыДолга.ТекущиеДанные;
		Если ЗначениеЗаполнено(стр1.Сделка) тогда
		стр1.КурсВзаиморасчетов =стр1.Сделка.КурсВзаиморасчетов;
		стр1.КратностьВзаиморасчетов =стр1.Сделка.КратностьВзаиморасчетов;
		иначе //+++ как было
		ЭлементыФормы.СуммыДолга.ТекущиеДанные.КурсВзаиморасчетов = 
											   ПолучитьКурсВалюты(Элемент.Значение.ВалютаВзаиморасчетов, Дата).Курс;
		ЭлементыФормы.СуммыДолга.ТекущиеДанные.КратностьВзаиморасчетов = 
											   ПолучитьКурсВалюты(Элемент.Значение.ВалютаВзаиморасчетов, Дата).Кратность;
        КонецЕсли;
	//Стр1.УвеличДолгаРуб = Стр1.КурсВзаиморасчетов * Стр1.УвеличениеДолгаКонтрагента;
	//Стр1.УвеличДолгаРуб = Стр1.КурсВзаиморасчетов * Стр1.УвеличениеДолгаКонтрагента;
	//+++)												   
	КонецЕсли;

	Если ЗначениеНеЗаполнено(Контрагент) Тогда
		Контрагент = Элемент.Значение.Владелец;
	КонецЕсли;

	Если ЗначениеНеЗаполнено(Организация) Тогда
		Организация = Элемент.Значение.Организация;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода сделки.
//
Процедура СуммыДолгаСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	ДоговорКонтрагента = ЭлементыФормы.СуммыДолга.ТекущиеДанные.ДоговорКонтрагента;

	СтандартнаяОбработка = Ложь;

	// Без договора сделку выбирать не будем.
	Если ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
		Предупреждение("Не выбран договор контрагента!");
		ЭлементыФормы.СуммыДолга.ТекущаяКолонка = ЭлементыФормы.СуммыДолга.Колонки.Найти("ДоговорКонтрагента");
		Возврат;
	КонецЕсли; 

	// Заполним возможный список типов документов, которые могут быть расчетными.
	СписокТипов = Новый СписокЗначений;

	Если ДоговорКонтрагента.ВедениеВзаиморасчетов = 
	                    Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда

		//Список документов зависит от вида договора.
		Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда

			СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровОтПокупателя"].Имя,         Метаданные.Документы["ВозвратТоваровОтПокупателя"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолга"].Имя,                 Метаданные.Документы["КорректировкаДолга"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Имя, Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ОтчетКомиссионераОПродажах"].Имя,         Метаданные.Документы["ОтчетКомиссионераОПродажах"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеВходящее"].Имя,         Метаданные.Документы["ПлатежноеПоручениеВходящее"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Имя,        Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПриходныйКассовыйОрдер"].Имя,             Метаданные.Документы["ПриходныйКассовыйОрдер"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["РасходныйКассовыйОрдер"].Имя,             Метаданные.Документы["РасходныйКассовыйОрдер"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["РеализацияТоваровУслуг"].Имя,             Метаданные.Документы["РеализацияТоваровУслуг"].Представление());
			
			СписокТипов.Добавить(Метаданные.Документы["НачислениеПени"].Имя,             Метаданные.Документы["НачислениеПени"].Представление());

		ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда

			СписокТипов.Добавить(Метаданные.Документы["АвансовыйОтчет"].Имя,                     Метаданные.Документы["АвансовыйОтчет"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровПоставщику"].Имя,           Метаданные.Документы["ВозвратТоваровПоставщику"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровПоставщикуИзНеавтоматизированнойТорговойТочки"].Имя,           Метаданные.Документы["ВозвратТоваровПоставщикуИзНеавтоматизированнойТорговойТочки"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолга"].Имя,                 Метаданные.Документы["КорректировкаДолга"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Имя, Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ОтчетКомитентуОПродажах"].Имя,            Метаданные.Документы["ОтчетКомитентуОПродажах"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеВходящее"].Имя,         Метаданные.Документы["ПлатежноеПоручениеВходящее"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Имя,        Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПоступлениеДопРасходов"].Имя,             Метаданные.Документы["ПоступлениеДопРасходов"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПоступлениеТоваровУслуг"].Имя,            Метаданные.Документы["ПоступлениеТоваровУслуг"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку"].Имя,            Метаданные.Документы["ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПриходныйКассовыйОрдер"].Имя,             Метаданные.Документы["ПриходныйКассовыйОрдер"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["РасходныйКассовыйОрдер"].Имя,             Метаданные.Документы["РасходныйКассовыйОрдер"].Представление());

		Иначе // Прочее

			СписокТипов.Добавить(Метаданные.Документы["АвансовыйОтчет"].Имя,                     Метаданные.Документы["АвансовыйОтчет"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровОтПокупателя"].Имя,         Метаданные.Документы["ВозвратТоваровОтПокупателя"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровПоставщику"].Имя,           Метаданные.Документы["ВозвратТоваровПоставщику"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровПоставщикуИзНеавтоматизированнойТорговойТочки"].Имя,           Метаданные.Документы["ВозвратТоваровПоставщикуИзНеавтоматизированнойТорговойТочки"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолга"].Имя,                 Метаданные.Документы["КорректировкаДолга"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Имя, Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ОтчетКомиссионераОПродажах"].Имя,         Метаданные.Документы["ОтчетКомиссионераОПродажах"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ОтчетКомитентуОПродажах"].Имя,            Метаданные.Документы["ОтчетКомитентуОПродажах"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеВходящее"].Имя,         Метаданные.Документы["ПлатежноеПоручениеВходящее"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Имя,        Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПоступлениеДопРасходов"].Имя,             Метаданные.Документы["ПоступлениеДопРасходов"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПоступлениеТоваровУслуг"].Имя,            Метаданные.Документы["ПоступлениеТоваровУслуг"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку"].Имя,            Метаданные.Документы["ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["ПриходныйКассовыйОрдер"].Имя,             Метаданные.Документы["ПриходныйКассовыйОрдер"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["РасходныйКассовыйОрдер"].Имя,             Метаданные.Документы["РасходныйКассовыйОрдер"].Представление());
			СписокТипов.Добавить(Метаданные.Документы["РеализацияТоваровУслуг"].Имя,             Метаданные.Документы["РеализацияТоваровУслуг"].Представление());
			
			СписокТипов.Добавить(Метаданные.Документы["НачислениеПени"].Имя,             Метаданные.Документы["НачислениеПени"].Представление());
		КонецЕсли;

	Иначе // сделка может быть только заказом (поставщику или покупателя)

		//Список документов зависит от вида договора.
		Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			
			Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
				
				Если ДоговорКонтрагента.Организация = Справочники.Организации.НайтиПоКоду("00001") Тогда
				СписокТипов.Добавить( Метаданные.Документы["ЗаказПокупателя"].Имя, Метаданные.Документы["ЗаказПокупателя"].Представление());
				иначе
				СписокТипов.Добавить( Метаданные.Документы["ЗаказПокупателяСезонный"].Имя, Метаданные.Документы["ЗаказПокупателяСезонный"].Представление());
			конецЕсли;
			
			ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				
				СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПокупателю"].Имя, Метаданные.Документы["СчетНаОплатуПокупателю"].Представление());
				
			Иначе
				
				СписокТипов.Добавить( Метаданные.Документы["ЗаказПокупателя"].Имя,        Метаданные.Документы["ЗаказПокупателя"].Представление());
				СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПокупателю"].Имя, Метаданные.Документы["СчетНаОплатуПокупателю"].Представление());
				
			КонецЕсли;

		ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда

			Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
				
				СписокТипов.Добавить( Метаданные.Документы["ЗаказПоставщику"].Имя       , Метаданные.Документы["ЗаказПоставщику"]       .Представление());
				
			ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				
				СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПоставщика"].Имя, Метаданные.Документы["СчетНаОплатуПоставщика"].Представление());
				
			Иначе
				
				СписокТипов.Добавить( Метаданные.Документы["ЗаказПоставщику"].Имя       , Метаданные.Документы["ЗаказПоставщику"]       .Представление());
				СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПоставщика"].Имя, Метаданные.Документы["СчетНаОплатуПоставщика"].Представление());
				
			КонецЕсли;
			
		Иначе // Прочее

			СписокТипов.Добавить( Метаданные.Документы["ЗаказПокупателя"].Имя,        Метаданные.Документы["ЗаказПокупателя"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ЗаказПоставщику"].Имя,        Метаданные.Документы["ЗаказПоставщику"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПоставщика"].Имя, Метаданные.Документы["СчетНаОплатуПоставщика"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПокупателю"].Имя, Метаданные.Документы["СчетНаОплатуПокупателю"].Представление());

		КонецЕсли;
		
	КонецЕсли; 

	// Пользователь выбирает тип расчетного документа
	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокТипов, Элемент);

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат; // пользователь отказался от выбора
	КонецЕсли;

	ТипДокументаСделки = ВыбранныйЭлемент.Значение;

	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ФормаВыбора = Документы[ТипДокументаСделки].ПолучитьФормуВыбора(,Элемент,);
	
	// Отфильруем список документов по договору.
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Значение = ДоговорКонтрагента;
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Истина;
	
	//+Лукьяненков 16.10.2017 //Оставляем в списке только те начисления по которым есть долги
	
	Если ТипДокументаСделки = "НачислениеПени" Тогда
		ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки КАК ВзаиморасчетыСКонтрагентамиОстатки
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток > 0
		|	И ВзаиморасчетыСКонтрагентамиОстатки.Сделка ССЫЛКА Документ.НачислениеПени
		|	И ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента = &ДоговорКонтрагента";
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ТекущийЭлемент.ТекущиеДанные.ДоговорКонтрагента);
		МассивСсылокДок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сделка");
		СписокДокументов = Новый СписокЗначений;
		СписокДокументов.ЗагрузитьЗначения(МассивСсылокДок);
		
		ФормаВыбора.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
		ФормаВыбора.Отбор.Ссылка.Значение = СписокДокументов;
		ФормаВыбора.Отбор.Ссылка.Использование = Истина;
	КонецЕсли;
	
	//-Лукьяненков 16.10.2017
	
	ФормаВыбора.Открыть();

КонецПроцедуры // СуммыДолгаСделкаНачалоВыбора()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "СуммыДолга". Формирует данные в колонке "Валюта" и устанавливает, при необходимости
// автоотметку незаполенного для поля "Сделка
//
Процедура СуммыДолгаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.СуммыДолга.Колонки.Валюта.Видимость	Тогда
		ОформлениеСтроки.Ячейки.Валюта.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Валюта.Текст = ДанныеСтроки.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КонецЕсли;
	
//+++( 22.07.2011
	Если ЭлементыФормы.СуммыДолга.Колонки.УвеличДолгаРуб.Видимость Тогда
		ОформлениеСтроки.Ячейки.УвеличДолгаРуб.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.УвеличДолгаРуб.Текст = данныеСтроки.УвеличениеДолгаКонтрагента * данныеСтроки.КурсВзаиморасчетов;
	КонецЕсли;
	
	Если ЭлементыФормы.СуммыДолга.Колонки.УменьшДолгаРуб.Видимость Тогда
		ОформлениеСтроки.Ячейки.УменьшДолгаРуб.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.УменьшДолгаРуб.Текст = данныеСтроки.УменьшениеДолгаКонтрагента * данныеСтроки.КурсВзаиморасчетов;
	КонецЕсли;
//+++)

	Если (ДанныеСтроки.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 
	  ИЛИ ДанныеСтроки.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам)
	   И ЗначениеНеЗаполнено(ДанныеСтроки.Сделка) Тогда
		ОформлениеСтроки.Ячейки.Сделка.ОтметкаНезаполненного = Истина;
	Иначе
		ОформлениеСтроки.Ячейки.Сделка.ОтметкаНезаполненного = Ложь;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода договора.
Процедура СуммыДолгаДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти = ЭлементыФормы.СуммыДолга.ТекущиеДанные;

	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, СтрокаТабличнойЧасти.ДоговорКонтрагента,
	   	                                    Неопределено, СтандартнаяОбработка);
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	яштСменаПользователя(ЭтотОбъект, ЭтаФорма, глТекущийПользователь);
	Для каждого стр из СуммыДолга Цикл
		Если стр.ДоговорКонтрагента.ВалютаВзаиморасчетов <> Константы.ВалютаРегламентированногоУчета.Получить() и не ЗначениеЗаполнено(стр.НоменклатурнаяГруппа) Тогда
		Сообщить("Для  корректировки долга по валютным договорам обязательно должна быть заполнена номенклатурная группа!");	
		конецЕсли;	
	конецЦикла
КонецПроцедуры

Процедура СуммыДолгаСделкаПриИзменении(Элемент)
	// Курс надо тоже заполнить
	Если Не ЗначениеНеЗаполнено(Элемент.Значение) Тогда
		
		Если Элемент.Значение.Метаданные().Имя = "НачислениеПени" Тогда
			стр1 = ЭлементыФормы.СуммыДолга.ТекущиеДанные;
			стр1.КурсВзаиморасчетов = 1;
			стр1.КратностьВзаиморасчетов = 1;
		Иначе
			//+++( 22.07.2011  SAO - прямо из Сделки
			стр1 = ЭлементыФормы.СуммыДолга.ТекущиеДанные;
			Если ЗначениеЗаполнено(стр1.Сделка) тогда
				стр1.КурсВзаиморасчетов =стр1.Сделка.КурсВзаиморасчетов;
				стр1.КратностьВзаиморасчетов =стр1.Сделка.КратностьВзаиморасчетов;
			иначе //+++ как было
				ЭлементыФормы.СуммыДолга.ТекущиеДанные.КурсВзаиморасчетов = 
				ПолучитьКурсВалюты(Элемент.Значение.ВалютаВзаиморасчетов, Дата).Курс;
				ЭлементыФормы.СуммыДолга.ТекущиеДанные.КратностьВзаиморасчетов = 
				ПолучитьКурсВалюты(Элемент.Значение.ВалютаВзаиморасчетов, Дата).Кратность;
			КонецЕсли;
			//Стр1.УвеличДолгаРуб = Стр1.КурсВзаиморасчетов * Стр1.УвеличениеДолгаКонтрагента;
			//Стр1.УвеличДолгаРуб = Стр1.КурсВзаиморасчетов * Стр1.УвеличениеДолгаКонтрагента;
			//+++)
		КонецЕсли
		
	КонецЕсли;

КонецПроцедуры






