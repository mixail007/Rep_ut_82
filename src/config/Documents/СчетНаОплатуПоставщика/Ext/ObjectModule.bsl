Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой заказа или счета,
// разработанного методистами
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция ПечатьСчетаЗаказа(Тип)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДатаПоступления,
	|	ДоговорКонтрагента,
	|	Контрагент КАК Поставщик,
	|	Организация,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика
	|
	|ГДЕ
	|	СчетНаОплатуПоставщика.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;

	Макет = ПолучитьМакет("СчетЗаказ");

	// Определим параметры запроса и табличного документа  
	// в зависимости от необходимости отображения артикула поставщика  
	Если Тип = "ЗаказПоДаннымПоставщика" Тогда

		ОбластьШапки  = Макет.ПолучитьОбласть("ШапкаСАртикулом");
		ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаСАртикулом");

		Запрос.УстановитьПараметр("Контрагент", ЭтотОбъект.Контрагент);

		ТекстПоляТовараДляТоваров = "
		|	ВЫБОР КОГДА (НаименованиеКонтрагента ЕСТЬ NULL ИЛИ НаименованиеКонтрагента = """") ТОГДА ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(100)) ИНАЧЕ НаименованиеКонтрагента КОНЕЦ КАК Товар,";

		ТекстПоляТовараДляУслуг = "
		|	ВЫБОР КОГДА (ВЫРАЗИТЬ (НаименованиеНоменклатурыКонтрагента КАК Строка(100)) ЕСТЬ NULL ИЛИ ВЫРАЗИТЬ (НаименованиеНоменклатурыКонтрагента КАК Строка(100)) = """") ТОГДА ВЫРАЗИТЬ(ЗаказПоставщику.Номенклатура.НаименованиеПолное КАК Строка(100)) ИНАЧЕ ВЫРАЗИТЬ (НаименованиеНоменклатурыКонтрагента КАК Строка(100)) КОНЕЦ КАК Товар,";

		ТекстПоляАртикула = ",
			|	АртикулКонтрагента";

		ТекстВыборкиАртикула = ", 
			|	АртикулНоменклатурыКонтрагента КАК АртикулКонтрагента";

		ТекстВыборкиНоменклатуры = ", 
			|	ВЫРАЗИТЬ(НаименованиеНоменклатурыКонтрагента КАК Строка(100)) КАК НаименованиеКонтрагента";

		ТекстИсточникАртикула = "
			|	ЛЕВОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
			|	ПО НоменклатураКонтрагентов.Номенклатура = ЗаказПоставщику.Номенклатура
			|	И  НоменклатураКонтрагентов.Контрагент = &Контрагент";

		ТекстГруппировкиАртикулаИНоменклатуры = ", 
			|	АртикулНоменклатурыКонтрагента,
			|	ВЫРАЗИТЬ(НаименованиеНоменклатурыКонтрагента КАК Строка(100))";

	Иначе

		ТекстПоляТовараДляТоваров = "
		|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(100)) КАК Товар,";

		ТекстПоляТовараДляУслуг = "
		|	ЗаказПоставщику.Содержание КАК Товар,";

		ОбластьШапки  = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтроки = Макет.ПолучитьОбласть("Строка");

		ТекстПоляАртикула                     = "";
		ТекстВыборкиАртикула                  = "";
		ТекстИсточникАртикула                 = "";
		ТекстГруппировкиАртикулаИНоменклатуры = "";

	КонецЕсли;

	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,"+ТекстПоляТовараДляТоваров+"
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки                     КАК НомерСтроки,
	|	ВложенныйЗапрос.Метка                           КАК Метка,
	|	ВложенныйЗапрос.Характеристика,
	|	NULL КАК Серия" + ТекстПоляАртикула + "
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		ЗаказПоставщику.Номенклатура,
	|		ЗаказПоставщику.ЕдиницаИзмерения,
	|		ЗаказПоставщику.Цена                        КАК Цена,
	|		СУММА(ЗаказПоставщику.Количество)           КАК Количество,
	|		СУММА(ЗаказПоставщику.Сумма     )           КАК Сумма,
	|		СУММА(ЗаказПоставщику.СуммаНДС  )           КАК СуммаНДС,
	|		МИНИМУМ(ЗаказПоставщику.НомерСтроки)        КАК НомерСтроки,
	|		0                                           КАК Метка,
	|		ЗаказПоставщику.ХарактеристикаНоменклатуры  КАК Характеристика" + ТекстВыборкиАртикула + ТекстВыборкиНоменклатуры + "
	|	ИЗ
	|		Документ.СчетНаОплатуПоставщика.Товары КАК ЗаказПоставщику" + ТекстИсточникАртикула + "
	|
	|	ГДЕ
	|		ЗаказПоставщику.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПоставщику.Номенклатура,
	|		ЗаказПоставщику.ЕдиницаИзмерения,
	|		ЗаказПоставщику.Цена,
	|		ЗаказПоставщику.ХарактеристикаНоменклатуры" + ТекстГруппировкиАртикулаИНоменклатуры + "
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПоставщику.Номенклатура," + ТекстПоляТовараДляУслуг + "
	|	ЗаказПоставщику.Количество,
	|	ЗаказПоставщику.Номенклатура.ЕдиницаХраненияОстатков,
	|	ЗаказПоставщику.Цена,
	|	ЗаказПоставщику.Сумма,
	|	ЗаказПоставщику.СуммаНДС,
	|	ЗаказПоставщику.НомерСтроки КАК НомерСтроки,
	|	1                           КАК Метка,
	|	NULL,
	|	NULL КАК Серия" + ТекстВыборкиАртикула + "
	|	
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.Услуги КАК ЗаказПоставщику" + ТекстИсточникАртикула + "
	|
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|
	|";

	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	Если Тип = "ЗаказПоДаннымПоставщика" Тогда
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетНаОплатуПоставщика_СчетЗаказПоДаннымПоставщика";
	Иначе
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетНаОплатуПоставщика_СчетЗаказ";
	КонецЕсли;

	Руководители = ОтветственныеЛицаОрганизации(Шапка.Организация, Шапка.Дата,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Счет на оплату поставщика");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика  = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	ОбластьМакета.Параметры.Получатель = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	ТабДокумент.Вывести(ОбластьШапки);

	Сумма    = 0;
	СуммаНДС = 0;

	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьСтроки.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьСтроки.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ОбластьСтроки.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Товар) + ПредставлениеСерий(ВыборкаСтрокТовары);

		ТабДокумент.Вывести(ОбластьСтроки);
		Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
		СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;

	КонецЦикла;

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ФорматСумм(ЗапросТовары.Итог("СуммаНДС"));
		ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ЗапросТовары.Количество()
	+ ", на сумму " + ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.ФИОРуководителя = "/"+ Руководитель + "/";
	ОбластьМакета.Параметры.ФИОБухгалтера   = "/"+ Бухгалтер    + "/";
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаЗаказа()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли;

	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета      = "Заказ" Тогда

		// печать заявки от покупателя
		ТабДокумент     = ПечатьСчетаЗаказа(ИмяМакета);

	ИначеЕсли ИмяМакета      = "ЗаказПоДаннымПоставщика" Тогда

		// печать заявки от покупателя
		ТабДокумент     = ПечатьСчетаЗаказа(ИмяМакета);

	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();
	
	КонецЕсли; 

	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, ""));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;

	СписокМакетов.Добавить("Заказ", "Счет на оплату поставщика");
	СписокМакетов.Добавить("ЗаказПоДаннымПоставщика", "Счет на оплату поставщика (по данным поставщика)");

	ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

#КонецЕсли

// Очищает ненужные строки табличных частей
//
Процедура ОчиститьНенужныеТабличныеЧасти() Экспорт

	// Если договор с комитентом, то надо почистить закладку "Услуги".
	Если Услуги.Количество() > 0
	   И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

		Услуги.Очистить();

	КонецЕсли;

КонецПроцедуры // ОчиститьНенужныеТабличныеЧасти()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Организация, ВалютаДокумента, СтруктурнаяЕдиница,
					|Контрагент, ДоговорКонтрагента, КратностьВзаиморасчетов");

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, ДоговорКонтрагента.Организация, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура заполнения таб.части Товары
//
Процедура ЗаполнитьТабЧастиТоварыНаОсновании(ДокОснование)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегЗаказы.Номенклатура КАК Номенклатура,
	|	РегЗаказы.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	РегЗаказы.Цена,
	|	СУММА(РегЗаказы.КоличествоОстаток) КАК КолОстаток,
	|	ДокЗаказ.СтавкаНДС,
	|	ДокЗаказ.ЕдиницаИзмерения,
	|	ДокЗаказ.Коэффициент,
	|	ДокЗаказ.ЗаказПокупателя,
	|	СУММА(РегЗаказы.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетовОстаток,
	|	СУММА(РегЗаказы.СуммаУпрОстаток) КАК СуммаУпрОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДокЗаказы.Номенклатура КАК Номенклатура,
	|		ДокЗаказы.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ДокЗаказы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ДокЗаказы.Коэффициент КАК Коэффициент,
	|		ДокЗаказы.Цена КАК Цена,
	|		ДокЗаказы.СтавкаНДС КАК СтавкаНДС,
	|		СУММА(ДокЗаказы.СуммаНДС) КАК СуммаНДС,
	|		ДокЗаказы.ЗаказПокупателя КАК ЗаказПокупателя
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ДокЗаказТовары.Номенклатура КАК Номенклатура,
	|			ДокЗаказТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			ДокЗаказТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|			ДокЗаказТовары.Коэффициент КАК Коэффициент,
	|			ДокЗаказТовары.Цена КАК Цена,
	|			ДокЗаказТовары.СтавкаНДС КАК СтавкаНДС,
	|			ДокЗаказТовары.СуммаНДС КАК СуммаНДС,
	|			ДокЗаказТовары.ЗаказПокупателя КАК ЗаказПокупателя
	|		ИЗ
	|			Документ.ЗаказПоставщику.Товары КАК ДокЗаказТовары
	|		
	|		ГДЕ
	|			ДокЗаказТовары.Ссылка = &Заказ И
	|			ДокЗаказТовары.Ссылка.Проведен И
	|			Не ДокЗаказТовары.Номенклатура.Услуга И
	|			НЕ ДокЗаказТовары.Ссылка.ПометкаУдаления
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ДокКорректировкаТовары.Номенклатура,
	|			ДокКорректировкаТовары.ХарактеристикаНоменклатуры,
	|			ДокКорректировкаТовары.ЕдиницаИзмерения,
	|			ДокКорректировкаТовары.Коэффициент,
	|			ДокКорректировкаТовары.Цена,
	|			ДокКорректировкаТовары.СтавкаНДС,
	|			ДокКорректировкаТовары.СуммаНДС,
	|			ДокКорректировкаТовары.ЗаказПокупателя
	|		ИЗ
	|			Документ.КорректировкаЗаказаПоставщику.Товары КАК ДокКорректировкаТовары
	|		
	|		ГДЕ
	|			ДокКорректировкаТовары.Ссылка.ЗаказПоставщику = &Заказ И
	|			Не ДокКорректировкаТовары.Номенклатура.Услуга И
	|			НЕ ДокКорректировкаТовары.Ссылка.ПометкаУдаления И
	|			ДокКорректировкаТовары.Ссылка.Проведен) КАК ДокЗаказы
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДокЗаказы.Номенклатура,
	|		ДокЗаказы.ХарактеристикаНоменклатуры,
	|		ДокЗаказы.ЕдиницаИзмерения,
	|		ДокЗаказы.Коэффициент,
	|		ДокЗаказы.Цена,
	|		ДокЗаказы.СтавкаНДС,
	|		ДокЗаказы.ЗаказПокупателя) КАК ДокЗаказ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки(&КонДата, ЗаказПоставщику = &Заказ И СтатусПартии = &Статус) КАК РегЗаказы
	|		ПО ДокЗаказ.Номенклатура               = РегЗаказы.Номенклатура
	|		 И ДокЗаказ.ХарактеристикаНоменклатуры = РегЗаказы.ХарактеристикаНоменклатуры
	|		 И ДокЗаказ.Цена                       = РегЗаказы.Цена
	|
	|СГРУППИРОВАТЬ ПО
	|	РегЗаказы.Номенклатура,
	|	РегЗаказы.ХарактеристикаНоменклатуры,
	|	РегЗаказы.Цена,
	|	ДокЗаказ.СтавкаНДС,
	|	ДокЗаказ.ЕдиницаИзмерения,
	|	ДокЗаказ.Коэффициент,
	|	ДокЗаказ.ЗаказПокупателя";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;

	Запрос.УстановитьПараметр("КонДата", Дата);
	Запрос.УстановитьПараметр("Заказ",   ДокОснование);

	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыПартийТоваров.Купленный);

	РезультатЗапроса = Запрос.Выполнить();
	Обход = РезультатЗапроса.Выбрать();

	Пока Обход.Следующий() Цикл

		Если Обход.КолОстаток <= 0 Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура     = Обход.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения = Обход.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент      = Обход.Коэффициент;
		НоваяСтрока.Количество       = Обход.КолОстаток;
		НоваяСтрока.ХарактеристикаНоменклатуры = Обход.ХарактеристикаНоменклатуры;
		НоваяСтрока.СтавкаНДС        = Обход.СтавкаНДС;
		НоваяСтрока.Сумма            = Обход.СуммаУпрОстаток;
		НоваяСтрока.Цена             = Обход.Цена;
		
		РассчитатьКоличествоМестТабЧасти( НоваяСтрока, ЭтотОбъект); 
		РассчитатьСуммуНДСТабЧасти      ( НоваяСтрока, ЭтотОбъект);
		
	КонецЦикла;
	
	ЗаполнитьПлановуюСебестоимостьНаОсновании(ЭтотОбъект, ДокОснование, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ЗаполнитьТабЧастиТоварыНаОсновании()

// Процедура заполнения таб.части Услуги
//
Процедура ЗаполнитьТабЧастиУслугиНаОсновании(ДокОснование)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегЗаказы.Номенклатура КАК Номенклатура,
	|	ДокЗаказ.Содержание КАК Содержание,
	|	РегЗаказы.Цена,
	|	СУММА(РегЗаказы.КоличествоОстаток) КАК КолОстаток,
	|	СУММА(РегЗаказы.СуммаУпрОстаток) КАК СуммаУпрОстаток,
	|	СУММА(РегЗаказы.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетовОстаток,
	|	ДокЗаказ.СтавкаНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДокЗаказы.Номенклатура КАК Номенклатура,
	|		ДокЗаказы.Содержание КАК Содержание,
	|		ДокЗаказы.Цена КАК Цена,
	|		ДокЗаказы.СтавкаНДС КАК СтавкаНДС,
	|		СУММА(ДокЗаказы.СуммаНДС) КАК СуммаНДС
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ДокЗаказУслуги.Номенклатура КАК Номенклатура,
	|			ДокЗаказУслуги.Содержание КАК Содержание,
	|			ДокЗаказУслуги.Цена КАК Цена,
	|			ДокЗаказУслуги.СтавкаНДС КАК СтавкаНДС,
	|			ДокЗаказУслуги.СуммаНДС КАК СуммаНДС
	|		ИЗ
	|			Документ.ЗаказПоставщику.Услуги КАК ДокЗаказУслуги
	|		
	|		ГДЕ
	|			ДокЗаказУслуги.Ссылка = &Заказ И
	|			ДокЗаказУслуги.Ссылка.Проведен И
	|			ДокЗаказУслуги.Номенклатура.Услуга И
	|			НЕ ДокЗаказУслуги.Ссылка.ПометкаУдаления
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ДокКорректировкаУслуги.Номенклатура,
	|			ДокКорректировкаУслуги.Содержание,
	|			ДокКорректировкаУслуги.Цена,
	|			ДокКорректировкаУслуги.СтавкаНДС,
	|			ДокКорректировкаУслуги.СуммаНДС
	|		ИЗ
	|			Документ.КорректировкаЗаказаПоставщику.Услуги КАК ДокКорректировкаУслуги
	|		
	|		ГДЕ
	|			ДокКорректировкаУслуги.Ссылка.ЗаказПоставщику = &Заказ И
	|			НЕ ДокКорректировкаУслуги.Ссылка.ПометкаУдаления И
	|			ДокКорректировкаУслуги.Номенклатура.Услуга И
	|			ДокКорректировкаУслуги.Ссылка.Проведен) КАК ДокЗаказы
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДокЗаказы.Номенклатура,
	|		ДокЗаказы.Содержание,
	|		ДокЗаказы.Цена,
	|		ДокЗаказы.СтавкаНДС) КАК ДокЗаказ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки(&КонДата, ЗаказПоставщику = &Заказ И СтатусПартии = &Статус) КАК РегЗаказы
	|		ПО ДокЗаказ.Номенклатура = РегЗаказы.Номенклатура И ДокЗаказ.Цена = РегЗаказы.Цена
	|
	|СГРУППИРОВАТЬ ПО
	|	РегЗаказы.Номенклатура,
	|	ДокЗаказ.Содержание,
	|	РегЗаказы.Цена,
	|	ДокЗаказ.СтавкаНДС";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("КонДата", Дата);
	Запрос.УстановитьПараметр("Заказ",   ДокОснование);
	Запрос.УстановитьПараметр("Статус",  Перечисления.СтатусыПартийТоваров.Купленный);
	
	РезультатЗапроса = Запрос.Выполнить();
	Обход = РезультатЗапроса.Выбрать();
	
	Пока Обход.Следующий() Цикл

		Если Обход.КолОстаток <= 0 Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока = Услуги.Добавить();
		НоваяСтрока.Номенклатура = Обход.Номенклатура;
		НоваяСтрока.Содержание   = Обход.Содержание;
		НоваяСтрока.Количество   = Обход.КолОстаток;
		НоваяСтрока.Сумма        = Обход.СуммаУпрОстаток;
		НоваяСтрока.СтавкаНДС    = Обход.СтавкаНДС;
		НоваяСтрока.Цена         = Обход.Цена;

		РассчитатьСуммуНДСТабЧасти( НоваяСтрока, ЭтотОбъект);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТабЧастиТоварыНаОсновании()

// Процедура заполнения таб.части Тара
//
Процедура ЗаполнитьТабЧастиТараНаОсновании(ДокОснование)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегЗаказы.Номенклатура КАК Номенклатура,
	|	РегЗаказы.Цена,
	|	СУММА(РегЗаказы.КоличествоОстаток) КАК КолОстаток,
	|	РегЗаказы.СуммаВзаиморасчетовОстаток,
	|	РегЗаказы.СуммаУпрОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДокЗаказы.Номенклатура КАК Номенклатура,
	|		ДокЗаказы.Цена КАК Цена
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ДокЗаказТовары.Номенклатура КАК Номенклатура,
	|			ДокЗаказТовары.Цена КАК Цена
	|		ИЗ
	|			Документ.ЗаказПоставщику.ВозвратнаяТара КАК ДокЗаказТовары
	|		
	|		ГДЕ
	|			ДокЗаказТовары.Ссылка = &Заказ И
	|			(ДокЗаказТовары.Ссылка.Проведен) И
	|			(НЕ(ДокЗаказТовары.Ссылка.ПометкаУдаления)) И
	|			(НЕ(ДокЗаказТовары.Номенклатура.Услуга))
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ДокКорректировкаТовары.Номенклатура,
	|			ДокКорректировкаТовары.Цена
	|		ИЗ
	|			Документ.КорректировкаЗаказаПоставщику.ВозвратнаяТара КАК ДокКорректировкаТовары
	|		
	|		ГДЕ
	|			ДокКорректировкаТовары.Ссылка.ЗаказПоставщику = &Заказ И
	|			(НЕ(ДокКорректировкаТовары.Ссылка.ПометкаУдаления)) И
	|			(ДокКорректировкаТовары.Ссылка.Проведен) И
	|			(НЕ(ДокКорректировкаТовары.Номенклатура.Услуга))) КАК ДокЗаказы) КАК ДокЗаказ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки(&КонДата, ЗаказПоставщику = &Заказ И СтатусПартии = &Статус) КАК РегЗаказы
	|		ПО ДокЗаказ.Номенклатура = РегЗаказы.Номенклатура И ДокЗаказ.Цена = РегЗаказы.Цена
	|
	|СГРУППИРОВАТЬ ПО
	|	РегЗаказы.Номенклатура,
	|	РегЗаказы.Цена,
	|	РегЗаказы.СуммаВзаиморасчетовОстаток,
	|	РегЗаказы.СуммаУпрОстаток";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("КонДата", Дата);
	Запрос.УстановитьПараметр("Заказ",   ДокОснование);
	Запрос.УстановитьПараметр("Статус",  Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	
	РезультатЗапроса = Запрос.Выполнить();
	Обход = РезультатЗапроса.Выбрать();
	
	Пока Обход.Следующий() Цикл

		Если Обход.КолОстаток <= 0 Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока = ВозвратнаяТара.Добавить();
		НоваяСтрока.Количество   = Обход.КолОстаток;
		НоваяСтрока.Номенклатура = Обход.Номенклатура;
		НоваяСтрока.Сумма        = Обход.СуммаУпрОстаток;
		НоваяСтрока.Цена         = Обход.Цена;
		НоваяСтрока.Сумма        = Обход.Цена * Обход.КолОстаток;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТабЧастиТараНаОсновании()

// Процедура заполнения реквизита "ДатаОплаты" по договору.
//
// Параметры: 
//  РежимВызова - режим вызова процедуры.
//
Процедура УстановитьДатуОплатыПоДоговору(РежимВызова = "")Экспорт

	Если ЗначениеНеЗаполнено(Дата) Тогда
		Возврат;
	ИначеЕсли ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;

	ВидВзаиморасчетов = ДоговорКонтрагента.ВедениеВзаиморасчетов;

	Если ЗначениеНеЗаполнено(ВидВзаиморасчетов) Тогда
		Возврат;
	КонецЕсли;

	Если ВидВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
		Если ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности Тогда
			ЧислоДнейДоОплаты = ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности;
		Иначе
			ЧислоДнейДоОплаты = 0;
		КонецЕсли;
	Иначе
		Если ДоговорКонтрагента.ДержатьРезервБезОплатыОграниченноеВремя Тогда
			ЧислоДнейДоОплаты = ДоговорКонтрагента.ЧислоДнейРезерваБезОплаты;
		Иначе
			ЧислоДнейДоОплаты = 0;
		КонецЕсли;
	КонецЕсли;

	// Исключим выходные дни, и получим новую дату оплаты
	ДатаОплатыНовая   = НачалоДня(Дата);
	ЧислоДнейДоОплаты = ЧислоДнейДоОплаты - ?(ДеньНедели(ДатаОплатыНовая) > 5, 0, 1);

	Пока ЧислоДнейДоОплаты > 0 Цикл
		ДатаОплатыНовая   = ДатаОплатыНовая + 86400;
		ЧислоДнейДоОплаты = ЧислоДнейДоОплаты - 1;

		Пока ДеньНедели(ДатаОплатыНовая) > 5 Цикл
			ДатаОплатыНовая = ДатаОплатыНовая + 86400;
		КонецЦикла;
	КонецЦикла;

	Если ДатаОплаты <> ДатаОплатыНовая Тогда
		// Проверка режима вызова процедуры
		Если НЕ ПустаяСтрока(РежимВызова) Тогда
			Если РежимВызова = "ДатаДокумента" Тогда
				ТекстВопроса = "Изменилась дата документа.";
			Иначе
				ТекстВопроса = "Изменился договор с контрагентом.";
			КонецЕсли;
			#Если Клиент Тогда
			Если Вопрос(ТекстВопроса + " Пересчитать дату оплаты?", 
				РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
			#КонецЕсли
		КонецЕсли;

		ДатаОплаты = ДатаОплатыНовая;
	КонецЕсли;

КонецПроцедуры // УстановитьДатуОплатыПоДоговору()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если НЕ ОбменДанными.Загрузка  Тогда
		
		// Заголовок для сообщений об ошибках.
		Заголовок = "Невозможно записать документ """ + СокрЛП(Ссылка) + """: ";

		// Сформируем структуру реквизитов шапки документа
		СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

		// Проверим правильность заполнения шапки документа
		ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
		
		ОчиститьНенужныеТабличныеЧасти();

		// Проверка заполнения единицы измерения мест и количества мест
		ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

		// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
		СуммаДокумента = ПолучитьСуммуДокументаСНДС(ЭтотОбъект);
		
	КонецЕсли;

	// Проверить заполнение подразделения, если нужно. 
	Если (Константы.ОбязательнаяУстановкаПодразделений.Получить() = Истина) Тогда 
		Если (Подразделение = Справочники.Подразделения.ПустаяСсылка()) Тогда 
			Отказ = Истина;
			Сообщить("Перед проведением, установите подразделение.", СтатусСообщения.Важное);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 

КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.Событие") Тогда
		
		// Заполнение шапки
		ВремяНапоминания  = Основание.ВремяНапоминания;
		Комментарий       = Основание.Комментарий;
		НапомнитьОСобытии = Основание.НапомнитьОСобытии;
		Ответственный     = Основание.Ответственный;
		КонтактноеЛицо    = Основание.КонтактноеЛицо;
		Контрагент        = Основание.Контрагент;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		ЗаполнитьШапкуДокументаПоОснованию( ЭтотОбъект, Основание);
		УстановитьДатуОплатыПоДоговору();
		ЗаполнитьТабЧастиТоварыНаОсновании( Основание);
		ЗаполнитьТабЧастиУслугиНаОсновании( Основание);
		ЗаполнитьТабЧастиТараНаОсновании  ( Основание);

	КонецЕсли;
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
