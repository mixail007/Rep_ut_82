Перем мУдалятьДвижения;


// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

#Если Клиент Тогда

// Функция формирует табличный документ унифицированной формы ОС-3
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме ОС-3.
//
Функция ПечатьОС3(ПечатьПоДаннымУпрУчета = Истина)

	Макет       = ПолучитьМакет("ОС3");
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Форма_ОС3";

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр( "Ссылка",  Ссылка);
	Запрос.УстановитьПараметр( "КонДата", Дата);
	
	Если ПечатьПоДаннымУпрУчета Тогда
		Валюта  = Константы.ВалютаУправленческогоУчета.Получить().Наименование; 
		ИтогоСуммаЗатрат = 	ОС.ИТОГ("СуммаМодернизацииУУ");
	Иначе
		Валюта  = Константы.ВалютаРегламентированногоУчета.Получить().Наименование; 
		ИтогоСуммаЗатрат = 	ОС.ИТОГ("СуммаМодернизацииБУ");
	КонецЕсли;		

	
	Запрос.Текст = "ВЫБРАТЬ
	               |	МодернизацияОСОС.Ссылка.Организация КАК Организация,
	               |	МодернизацияОСОС.Ссылка.Номер КАК НомерДок,
	               |	МодернизацияОСОС.Ссылка.Дата КАК ДатаДок,
	               |	МодернизацияОСОС.Ссылка.ВидОперацийСОсновнымиСредствами КАК ВидРабот,
	               |	МодернизацияОСОС.ОсновноеСредство КАК ОсновноеСредство,
	               |	МодернизацияОСОС.ОсновноеСредство.НаименованиеПолное КАК НаименованиеОС,
	               |	МодернизацияОСОС.ОсновноеСредство.Код КАК ИнвНомерУпр,
	               |	МодернизацияОСОС.ОсновноеСредство.ДатаВыпуска КАК ДатаВыпуска,
	               |	МодернизацияОСОС.ОсновноеСредство.НомерПаспорта КАК НомерПаспорта,
	               |	МодернизацияОСОС.ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
	               |	МодернизацияОСОС.СтоимостьБУ КАК Стоимость,
	               |	МодернизацияОСОС.СуммаМодернизацииБУ КАК СуммаЗатрат,
	               |	МодернизацияОСОС.ФактСрокИспользованияБУ КАК СрокЭкспл
	               |ИЗ
	               |	Документ.МодернизацияОС.ОС КАК МодернизацияОСОС
	               |ГДЕ
	               |	МодернизацияОСОС.Ссылка = &Ссылка";
				   
	Если ПечатьПоДаннымУпрУчета тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"БУ","УУ");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	
	Если Не ПечатьПоДаннымУпрУчета тогда	
		СведенияОРуководителеГлавбухе = ПолучитьСведенияОРуководителеГлавБухе(Выборка.Организация,Выборка.ДатаДок);
	КонецЕсли;

	// Печать лицевой стороны.
	// Секция № 1
	Шапка         = Макет.ПолучитьОбласть("Шапка1");
	СтрокаТаблицы = Макет.ПолучитьОбласть("Строка1");
	Подвал        = Макет.ПолучитьОбласть("Строка1П");
	
	Шапка.Параметры.Заполнить(Выборка);
	Если Не ПечатьПоДаннымУпрУчета тогда	
		Шапка.Параметры.Заполнить(СведенияОРуководителеГлавбухе);
	КонецЕсли;
	
	Шапка.Параметры.Валюта = Валюта; 
	ТабДокумент.Вывести(Шапка);

	НомПП = 0;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаТаблицы.Параметры.Заполнить(Выборка);
		
		НомПП = НомПП + 1;
		СтрокаТаблицы.Параметры.ПорядковыйНомер = НомПП;
		
		Если ПечатьПоДаннымУпрУчета тогда
			СтрокаТаблицы.Параметры.ИнвНомер = Выборка.ИнвНомерУпр;
		Иначе
			ВыборкаЗаписей = РегистрыСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.ПолучитьПоследнее(Выборка.ДатаДок,
														Новый Структура("ОсновноеСредство",Выборка.ОсновноеСредство));
			ИнвНомерБух    = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.ИнвентарныйНомер,0);
			СтрокаТаблицы.Параметры.ИнвНомер = ИнвНомерБух;
		КонецЕсли;
		
		Если ПустаяСтрока(Выборка.НаименованиеОС) Тогда
			СтрокаТаблицы.Параметры.НаименованиеОС = СокрЛП(Выборка.ОсновноеСредство);
		КонецЕсли; 
		
		СтрокаТаблицы.Параметры.ВосстановительнаяСтоимостьПеч = Формат( Выборка.Стоимость, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧН=-; ЧГ=3,0");

		ТабДокумент.Вывести(СтрокаТаблицы);

	КонецЦикла;

	Подвал.Параметры.Заполнить(Выборка);
	//ТабДокумент.Вывести(Подвал);
	
	// Секция № 2
	Шапка         		   = Макет.ПолучитьОбласть("Шапка2");
	Шапка.Параметры.Валюта = Валюта; 
	СтрокаТаблицы 		   = Макет.ПолучитьОбласть("Строка2");
	Подвал        		   = Макет.ПолучитьОбласть("Строка2П");
	
	ТабДокумент.Вывести(Шапка);
	
	НомПП = 0;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаТаблицы.Параметры.Заполнить(Выборка);
		
		НомПП = НомПП + 1;
		СтрокаТаблицы.Параметры.ПорядковыйНомер = НомПП;
		
		Если ПустаяСтрока(Выборка.НаименованиеОС) Тогда
			СтрокаТаблицы.Параметры.НаименованиеОС = СокрЛП(Выборка.ОсновноеСредство);
		КонецЕсли; 
		
		ТабДокумент.Вывести(СтрокаТаблицы);

	КонецЦикла;

	Подвал = Макет.ПолучитьОбласть("Подвал");
	Подвал.Параметры.ИтогоСуммаЗатрат = ИтогоСуммаЗатрат;
	
	ТабДокумент.Вывести(Подвал);
	
	// Печать оборотной стороны.
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	ОбластьПечати = Макет.ПолучитьОбласть("ОборотнаяСторона");
	Если Не ПечатьПоДаннымУпрУчета тогда	
		ОбластьПечати.Параметры.Заполнить(СведенияОРуководителеГлавбухе);
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьПечати);
	
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСнизу = 0;
	
	Возврат ТабДокумент;

КонецФункции // ПечатьОС3()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	//Если ЭтоНовый() Тогда
	//	Предупреждение("Документ можно распечатать только после его записи");
	//	Возврат;
	//ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
	//	Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
	//	Возврат;
	//КонецЕсли;

	//Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
	//	Возврат;
	//КонецЕсли;

	//// Получить экземпляр документа на печать
	//Если ИмяМакета = "ОС3упр" тогда
	//	ТабДокумент = ПечатьОС3();
	//ИначеЕсли ИмяМакета = "ОС3бух" тогда
	//	ТабДокумент = ПечатьОС3(Ложь);
	//ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

	//	ТабДокумент = НапечататьВнешнююФорму(Ссылка, ИмяМакета);
	//	
	//	Если ТабДокумент = Неопределено Тогда
	//		Возврат
	//	КонецЕсли; 
	//	
	//КонецЕсли;

	//НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, "Модернизация ОС"), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	СтруктураПечатныхФорм = новый Структура;
	Если  ОтражатьВУправленческомУчете тогда 
		СтруктураПечатныхФорм.Вставить("ОС3упр","Форма ОС-3(упр. учет)");
	КонецЕсли;
	Если  ОтражатьВБухгалтерскомУчете тогда 
		СтруктураПечатныхФорм.Вставить("ОС3бух","Форма ОС-3(бух. учет)");
	КонецЕсли;
	
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для управленческого учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

	мСтрокаРеквизитыУпрУчета =  "Стоимость,
								|ОС.СрокПолезногоИспользованияУУ,
								|ОС.ФактСрокИспользованияУУ,
								|ОС.ОстСрокИспользованияУУ,
								|ОС.ОбъемПродукцииРаботУУ,
								|ОС.ФактОбъемПродукцииРаботУУ,
								|ОС.ОстОбъемПродукцииРаботУУ,
								|ОС.СтоимостьУУ,
								|ОС.СуммаМодернизацииУУ,
								|ОС.АмортизацияУУ,
								|ОС.АмортизацияЗаМесяцУУ,
								|ОС.ОстСтоимостьУУ,
								|ОС.КоэффициентАмортизацииУУ,
								|ОС.КоэффициентУскоренияУУ";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

	мСтрокаРеквизитыБухУчета =  "СтоимостьБУ,
								|СтоимостьБУХоз,
								|СчетУчетаБУВнеоборотногоАктива,
								|ОС.СрокПолезногоИспользованияБУ,
								|ОС.ФактСрокИспользованияБУ,
								|ОС.ОстСрокИспользованияБУ,
								|ОС.ОбъемПродукцииРаботБУ,
								|ОС.ФактОбъемПродукцииРаботБУ,
								|ОС.ОстОбъемПродукцииРаботБУ,
								|ОС.СтоимостьБУ,
								|ОС.СуммаМодернизацииБУ,
								|ОС.СуммаМодернизацииБУХоз,
								|ОС.АмортизацияБУ,
								|ОС.АмортизацияЗаМесяцБУ,
								|ОС.ОстСтоимостьБУ,
								|ОС.КоэффициентАмортизацииБУ,
								|ОС.КоэффициентУскоренияБУ";

	мСтрокаРеквизитыНалУчета =  "СтоимостьНУ,
								|СтоимостьНУХоз,
								|СтоимостьПР,
								|СтоимостьПРХоз,
								|СтоимостьВР,
								|СтоимостьВРХоз,
								|СчетУчетаНУВнеоборотногоАктива,
								|ОС.СтоимостьНУ,
								|ОС.СуммаМодернизацииНУ,
								|ОС.СрокПолезногоИспользованияНУ";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

// Функция заполняет список значений доступных видов событий
// только для регламентированного учета
//
Функция ПолучитьСписокЗначенийВидыСобытий() Экспорт
	
	ВидыСобытий = Новый СписокЗначений;
	
	ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.ТекущийРемонт);
	ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.СреднийРемонт);
	ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.КапитальныйРемонт);
	ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.Реконструкция);
	ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.Достройка);
	ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.Дооборудование);
	ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.Модернизация);
	
	Возврат ВидыСобытий;
	
 КонецФункции
////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Дополняет список обязательных параметров шапки
// упр. параметрами
Процедура ДополнитьОбязательныеРеквизитыШапкиУпр(Реквизиты)

	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") +
			  "Событие";

КонецПроцедуры

// Дополняет список обязательных параметров шапки
// регл. параметрами
Процедура ДополнитьОбязательныеРеквизитыШапкиРегл(Реквизиты)
	
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + 
			"СчетУчетаБУВнеоборотногоАктива,
			|СчетУчетаНУВнеоборотногоАктива,
			|СобытиеРегл";
			
КонецПроцедуры

// Проверяет правильность заполнения упр. реквизитов шапки
Процедура ПроверитьЗаполнениеШапкиУпр(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если (НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете) Тогда
		Возврат;
	КонецЕсли;
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		
		ВыборкаЗаписей = РегистрыНакопления.СтроительствоОбъектовОсновныхСредств.Остатки(Дата,Новый Структура("ОбъектСтроительства",СтруктураШапкиДокумента.ОбъектСтроительства));
		ОстатокСтоимости = 0;
		Если ВыборкаЗаписей.Количество() > 0 Тогда;
			ОстатокСтоимости = ВыборкаЗаписей[0].Сумма;
		КонецЕсли;
		Требуется = СтруктураШапкиДокумента.СтоимостьУУ;
		Если Требуется > ОстатокСтоимости Тогда
			
			ОшибкаПриПроведении("По управленческому учету для объекта строительства остаток суммы меньше суммы модернизации"+ Символы.ПС + Символы.Таб +
			"Не хватает " + ?(ОстатокСтоимости > 0 , Требуется - ОстатокСтоимости, Требуется ) +
			"; Остаток " + ОстатокСтоимости +
			"; Требуется " + Требуется , Отказ,Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	// Проверим чем заполнено событие
	ВидыСобытий = ПолучитьСписокЗначенийВидыСобытий();
	ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.Событие.Представление();
	ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.Событие.ВидСобытияОС,
							  ВидыСобытий,
							  ПредставлениеРеквизита,Отказ);
	
КонецПроцедуры

// Проверяет правильность заполнения регл. реквизитов шапки
Процедура ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) И (НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеНеЗаполнено(СтруктураШапкиДокумента.Организация) Тогда
		ОшибкаПриПроведении("Не заполнено поле Организация", Отказ,Заголовок);
	КонецЕсли;
	
	// Проверим чем заполнено событие
	ВидыСобытий = ПолучитьСписокЗначенийВидыСобытий();
	ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.СобытиеРегл.Представление();
	ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.СобытиеРегл.ВидСобытияОС,
							  ВидыСобытий,
							  ПредставлениеРеквизита,Отказ);

КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "ОбъектСтроительства";
	ДополнитьОбязательныеРеквизитыШапкиУпр(ОбязательныеРеквизитыШапки);
	ДополнитьОбязательныеРеквизитыШапкиРегл(ОбязательныеРеквизитыШапки);
	
	//НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, ОбязательныеРеквизитыШапки, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	
	СтруктураОбязательныхПолей = 
	Новый Структура(ОбязательныеРеквизитыШапки);

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь вызовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	ПроверитьЗаполнениеШапкиУпр(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Дополняет список обязательных параметров табл. части
// упр. параметрами
Процедура ДополнитьОбязательныеРеквизитыТабОСУпр(Реквизиты)

	//Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СтоимостьУУ";

КонецПроцедуры

// Дополняет список обязательных параметров табл. части
// регл. параметрами
Процедура ДополнитьОбязательныеРеквизитыТабОСРегл(Реквизиты)

	//Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СтоимостьБУ,СтоимостьНУ";

КонецПроцедуры

// Проверка реквизитов в ТЧ по упр. учету
// 
Процедура ПроверкаРеквизитовТЧУпр(ТаблицаОС,СтруктураШапкиДокумента,Отказ, Заголовок)
	// Проверим что суммы модернизации относимые на каждый объект ОС в сумме равны данным из шапки документа
	Если ТаблицаОС.Итог("СуммаМодернизацииУУ")<> СтруктураШапкиДокумента.СтоимостьУУ Тогда
		ОшибкаПриПроведении("По управленческому учету общая сумма модернизации, указанная в шапке документа, не соответствует в итоге суммам, отнесенным на основные средства!",Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

// Проверка реквизитов в ТЧ по регл. учету
// 
Процедура ПроверкаРеквизитовТЧРегл(ТаблицаОС,СтруктураШапкиДокумента,Отказ, Заголовок)
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		// Проверим что суммы модернизации относимые на каждый объект ОС в сумме равны данным из шапки документа
		Если ТаблицаОС.Итог("СуммаМодернизацииБУ")<> СтруктураШапкиДокумента.СтоимостьБУ Тогда
			ОшибкаПриПроведении("По бухгалтерскому учету общая сумма модернизации, указанная в шапке документа, не соответствует в итоге суммам, отнесенным на основные средства!",Отказ, Заголовок);
		КонецЕсли;
		
		// Проверим что суммы модернизации относимые на каждый объект ОС в сумме равны данным из шапки документа
		Если ТаблицаОС.Итог("СуммаМодернизацииБУХоз")<> СтруктураШапкиДокумента.СтоимостьБУХоз Тогда
			ОшибкаПриПроведении("По бухгалтерскому учету общая сумма модернизации, выполненная хоз. способом, указанная в шапке документа, не соответствует в итоге суммам модернизации, отнесенным на основные средства!",Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		// Проверим что суммы модернизации относимые на каждый объект ОС в сумме равны данным из шапки документа
		Если ТаблицаОС.Итог("СуммаМодернизацииНУ")<> СтруктураШапкиДокумента.СтоимостьНУ Тогда
			ОшибкаПриПроведении("По налоговому учету общая сумма модернизации, указанная в шапке документа, не соответствует в итоге суммам, отнесенным на основные средства!",Отказ, Заголовок);
		КонецЕсли;
		
		// Проверим что суммы модернизации относимые на каждый объект ОС в сумме равны данным из шапки документа
		Если ТаблицаОС.Итог("СуммаМодернизацииНУХоз")<> СтруктураШапкиДокумента.СтоимостьНУХоз Тогда
			ОшибкаПриПроведении("По налоговому учету общая сумма модернизации, выполненная хоз. способом, указанная в шапке документа, не соответствует в итоге суммам модернизации, отнесенным на основные средства!",Отказ, Заголовок);
		КонецЕсли;
		
		Если ТаблицаОС.Итог("СуммаМодернизацииПР")<> СтруктураШапкиДокумента.СтоимостьПР Тогда
			ОшибкаПриПроведении("По налоговому учету общая сумма постоянных разниц по модернизации, указанная в шапке документа, не соответствует в итоге суммам постоянных разниц , отнесенным на основные средства!",Отказ, Заголовок);
		КонецЕсли;
		
		Если ТаблицаОС.Итог("СуммаМодернизацииПРХоз")<> СтруктураШапкиДокумента.СтоимостьПРХоз Тогда
			ОшибкаПриПроведении("По налоговому учету общая сумма постоянных разниц по модернизации, выполненная хоз. способом, указанная в шапке документа, не соответствует в итоге суммам постоянных разниц модернизации, отнесенным на основные средства!",Отказ, Заголовок);
		КонецЕсли;
		
		Если ТаблицаОС.Итог("СуммаМодернизацииВР")<> СтруктураШапкиДокумента.СтоимостьВР Тогда
			ОшибкаПриПроведении("По налоговому учету общая сумма временных разниц по модернизации, указанная в шапке документа, не соответствует в итоге суммам временных разниц , отнесенным на основные средства!",Отказ, Заголовок);
		КонецЕсли;
		
		Если ТаблицаОС.Итог("СуммаМодернизацииВРХоз")<> СтруктураШапкиДокумента.СтоимостьВРХоз Тогда
			ОшибкаПриПроведении("По налоговому учету общая сумма временных разниц по модернизации, выполненная хоз. способом, указанная в шапке документа, не соответствует в итоге суммам временных разниц модернизации, отнесенным на основные средства!",Отказ, Заголовок);
		КонецЕсли;
		
		// Проверка правильности указания сумм расходов на капитальные вложения.
		Если ТаблицаОС.Итог("СуммаКапитальныхВложенийВключаемыхВРасходыНУ") > 0 Тогда
			
			// Проверим, не превышает ли допустимый процент сумма капитальных вложений, включаемых в состав расходов.
			Для Каждого СтрокаОС Из ТаблицаОС Цикл
			
				Если НЕ ЗначениеНеЗаполнено(СтрокаОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ) Тогда
					
					Если ?(НЕ ЗначениеНеЗаполнено(СтрокаОС.СуммаМодернизацииНУ),
					       СтрокаОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ / СтрокаОС.СуммаМодернизацииНУ * 100,
					       0) > 10 Тогда
						
						ОшибкаПриПроведении("В строке номер """ + СтрокаОС.НомерСтроки + 
						                    """ по основному средству <" + СтрокаОС.ОсновноеСредство + 
						                    "> сумма капитальных вложений, включаемых в состав расходов (НУ), превышает 10% суммы модернизации (НУ)!", Отказ, Заголовок);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(РежимПроведения,ТаблицаОС,СтруктураШапкиДокумента,Отказ, Заголовок) Экспорт

	РеквизитыТабОС = "ОсновноеСредство"; //через запятую
	ДополнитьОбязательныеРеквизитыТабОСУпр(РеквизитыТабОС);
	ДополнитьОбязательныеРеквизитыТабОСРегл(РеквизитыТабОС);
	//НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабОС, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "ОС");
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура(РеквизитыТабОС), Отказ, Заголовок);

	// Логические проверки
	ПроверкаРеквизитовТЧУпр(ТаблицаОС,СтруктураШапкиДокумента,Отказ, Заголовок);
	ПроверкаРеквизитовТЧРегл(ТаблицаОС,СтруктураШапкиДокумента,Отказ, Заголовок);
	
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		// Проверим возможность изменения состояния ОС
		Для каждого СтрокаОС из ТаблицаОС Цикл
			Если ОтражатьВБухгалтерскомУчете тогда
		//		ПроверитьВозможностьИзмененияСостоянияОС(СтрокаОС.ОсновноеСредство,Дата,СобытиеРегл,Отказ,Организация);
			КонецЕсли;
			Если ОтражатьВУправленческомУчете тогда
				ПроверитьВозможностьИзмененияСостоянияОС(СтрокаОС.ОсновноеСредство,Дата,Событие,Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ПроверкаРеквизитовТЧ()

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоОС, Отказ, Заголовок)

	ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	
	// Отражение ввода в эксплуатацию модернизированного объекта ОС в подсистеме НДС
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);

КонецПроцедуры // ДвиженияПоРегистрам

Процедура ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	ДатаДока = Дата;

	СобытиеОС           = Движения.СобытияОС;
	АмортизацияОС         = Движения.СтоимостьОС;
	ПараметрыАмортизацииОС= Движения.ПараметрыАмортизацииОС;

	ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
	
	Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл

		ТекОС = СтрокаТЧ.ОсновноеСредство;

		// Движения по регистру СобытияОС
		Движение = СобытиеОС.Добавить();
		Движение.Период               = ДатаДока;
		Движение.ОсновноеСредство     = ТекОС;
		Движение.Событие              = СтруктураШапкиДокумента.Событие;
		Движение.НазваниеДокумента 	  = Метаданные().Представление();
		Движение.НомерДокумента    	  = Номер;
		Движение.СуммаЗатрат    	  = СтрокаТЧ.СуммаМодернизацииУУ;
		

		// Движения по регистру ПараметрыАмортизацииОС
		Движение = ПараметрыАмортизацииОС.Добавить();
		Движение.Период                  = ДатаДока;
		Движение.ОсновноеСредство        = ТекОС;
		Движение.СрокПолезногоИспользования = СтрокаТЧ.СрокПолезногоИспользованияУУ;
		Движение.СрокИспользованияДляВычисленияАмортизации = СтрокаТЧ.СрокПолезногоИспользованияУУ - СтрокаТЧ.ФактСрокИспользованияУУ;
		Движение.СтоимостьДляВычисленияАмортизации = СтрокаТЧ.СтоимостьУУ + СтрокаТЧ.СуммаМодернизацииУУ - СтрокаТЧ.АмортизацияУУ - СтрокаТЧ.АмортизацияЗаМесяцУУ;
		Движение.КоэффициентАмортизации = СтрокаТЧ.КоэффициентАмортизацииУУ;
		Движение.КоэффициентУскорения = СтрокаТЧ.КоэффициентУскоренияУУ;
		Движение.ОбъемПродукцииРабот = СтрокаТЧ.ОбъемПродукцииРаботУУ;
		Движение.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаТЧ.ОбъемПродукцииРаботУУ - СтрокаТЧ.ФактОбъемПродукцииРаботУУ;
		Движение.ПрименитьВТекущемМесяце = Ложь;
		
		// Движения по регистру СтоимостьОС
		Движение = ТаблицаДвиженийАмортизация.Добавить();
		Движение.ОсновноеСредство        = ТекОС;
		Движение.Амортизация             = 0;
		Движение.Стоимость               = СтрокаТЧ.СуммаМодернизацииУУ;
		



	КонецЦикла;

	АмортизацияОС.мПериод          = ДатаДока;
	АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
	Движения.СтоимостьОС.ВыполнитьПриход();
	
	// Движения по регистру Строительство
	СтроительствоОС       = Движения.СтроительствоОбъектовОсновныхСредств;
	ТаблицаСтроительство = СтроительствоОС.Выгрузить();
	Движение = ТаблицаСтроительство.Добавить();
	Движение.ОбъектСтроительства        = СтруктураШапкиДокумента.ОбъектСтроительства;
	Движение.Сумма                      = ТаблицаПоОС.Итог("СуммаМодернизацииУУ");
	
	СтроительствоОС.мПериод          = ДатаДока;
	СтроительствоОС.мТаблицаДвижений = ТаблицаСтроительство;
	Движения.СтроительствоОбъектовОсновныхСредств.ВыполнитьРасход();


КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)

	//Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) И (НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
	//	Возврат;
	//КонецЕсли;

	//ДатаДока       = Дата;
	//ТекОрганизация = СтруктураШапкиДокумента.Организация;

	//СписокОС = ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство");

	//Запрос   = Новый Запрос;
	//Запрос.УстановитьПараметр("ТекОрганизация", ТекОрганизация);
	//Запрос.УстановитьПараметр("ТекДата",        ДатаДока);
	//Запрос.УстановитьПараметр("СписокОС",       СписокОС);
	//Запрос.Текст = "
	//|ВЫБРАТЬ
	//|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство КАК ОС_БУ,
	//|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета        КАК СчетУчетаБУ,
	//|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.СчетУчета            КАК СчетУчетаНУ,
	//|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство     КАК ОС_НУ
	//|ИЗ
	//|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&ТекДата, (Организация = &ТекОрганизация) И (ОсновноеСредство В (&СписокОС))) КАК СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	//|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаНалоговогоУчетаОС.СрезПоследних(&ТекДата, (Организация = &ТекОрганизация) И (ОсновноеСредство В (&СписокОС))) КАК СчетаНалоговогоУчетаОсновныхСредствСрезПоследних
	//|		ПО СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство";
	//ТаблицаСчетов  = Запрос.Выполнить().Выгрузить();

	//Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда 

	//	СобытиеОС              = Движения.СобытияОСОрганизаций;
	//	АмортизацияОС          = Движения.СтоимостьОСБухгалтерскийУчет;
	//	ПараметрыАмортизацииОС = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет;
	//	ПроводкиБУ             = Движения.Хозрасчетный;

	//	ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();

	//	Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл

	//		ТекОС = СтрокаТЧ.ОсновноеСредство;

	//		// Движения по регистру СобытияОС
	//		Движение = СобытиеОС.Добавить();
	//		Движение.Период               = ДатаДока;
	//		Движение.ОсновноеСредство     = ТекОС;
	//		Движение.Организация          = ТекОрганизация;
	//		Движение.Событие              = СтруктураШапкиДокумента.СобытиеРегл;
	//		Движение.НазваниеДокумента 	  = Метаданные().Представление();
	//		Движение.НомерДокумента    	  = Номер;
	//		Движение.СуммаЗатратБУ        = СтрокаТЧ.СуммаМодернизацииБУ;
	//		Движение.СуммаЗатратНУ        = СтрокаТЧ.СуммаМодернизацииНУ;

	//		// Движения по регистру СтоимостьОС
	//		Движение = ТаблицаДвиженийАмортизация.Добавить();
	//		Движение.ОсновноеСредство      = ТекОС;
	//		Движение.Организация           = ТекОрганизация;
	//		Движение.Амортизация           = 0;
	//		Движение.Стоимость             = СтрокаТЧ.СуммаМодернизацииБУ;
	//		Движение.ВидОперации           = СтруктураШапкиДокумента.ВидОперацийСОсновнымиСредствами;
	//		Движение.СуммаЗатрат           = СтрокаТЧ.СуммаМодернизацииБУ;

	//		// Движения по регистру ПараметрыАмортизацииОС
	//		Движение = ПараметрыАмортизацииОС.Добавить();
	//		Движение.Период           = ДатаДока;
	//		Движение.ОсновноеСредство = ТекОС;
	//		Движение.Организация      = ТекОрганизация;
	//		Движение.СрокПолезногоИспользования                  = СтрокаТЧ.СрокПолезногоИспользованияБУ;
	//		Движение.СрокИспользованияДляВычисленияАмортизации   = СтрокаТЧ.СрокПолезногоИспользованияБУ - СтрокаТЧ.ФактСрокИспользованияБУ;
	//		Движение.СтоимостьДляВычисленияАмортизации           = СтрокаТЧ.СтоимостьБУ + СтрокаТЧ.СуммаМодернизацииБУ - СтрокаТЧ.АмортизацияБУ - СтрокаТЧ.АмортизацияЗаМесяцБУ;
	//		Движение.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаТЧ.ОбъемПродукцииРаботБУ - СтрокаТЧ.ФактОбъемПродукцииРаботБУ;
	//		Движение.КоэффициентАмортизации = СтрокаТЧ.КоэффициентАмортизацииБУ;
	//		Движение.КоэффициентУскорения   = СтрокаТЧ.КоэффициентУскоренияБУ;
	//		Движение.ОбъемПродукцииРабот    = СтрокаТЧ.ОбъемПродукцииРаботБУ;

	//		СтрокаТЗ = ТаблицаСчетов.Найти(ТекОС,"ОС_БУ");
	//		Если СтрокаТЗ <> Неопределено Тогда
	//			СчетУчетаСтоимости  = СтрокаТЗ.СчетУчетаБУ;
	//		Иначе
	//			ОшибкаПриПроведении("Основное средство "+ ТекОс.Наименование 
	//								+" не стоит на бух учете в организации "+ ТекОрганизация,Отказ); 	
	//			Возврат;
	//		КонецЕсли;

	//		// списание амортизации Д 01.01 К 08.03
	//		СуммаПроводки = СтрокаТЧ.СуммаМодернизацииБУ - СтрокаТЧ.СуммаМодернизацииБУХоз;

	//		Если СуммаПроводки<>0 Тогда

	//			Проводка = ПроводкиБУ.Добавить();

	//			Проводка.Период       = ДатаДока;
	//			Проводка.Организация  = ТекОрганизация;
	//			Проводка.Содержание   = "Модернизация подрядн. способ";
	//			Проводка.СчетДт       = СчетУчетаСтоимости;
	//			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
	//			Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива;
	//			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
	//			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Подрядный);
	//			Проводка.НомерЖурнала = "ОС";
	//			Проводка.Сумма        = СуммаПроводки;

	//		КонецЕсли;

	//		// списание амортизации Д 01.01 К 08.03
	//		СуммаПроводки = СтрокаТЧ.СуммаМодернизацииБУХоз;

	//		Если СуммаПроводки<>0 Тогда

	//			Проводка = ПроводкиБУ.Добавить();

	//			Проводка.Период       = ДатаДока;
	//			Проводка.Организация  = ТекОрганизация;
	//			Проводка.Содержание   = "Модернизация хоз. способ";
	//			Проводка.СчетДт       = СчетУчетаСтоимости;
	//			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
	//			Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива;
	//			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
	//			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Хозспособ);
	//			Проводка.НомерЖурнала = "ОС";
	//			Проводка.Сумма        = СуммаПроводки;

	//		КонецЕсли;
	//		
	//	КонецЦикла;

	//	АмортизацияОС.мПериод          = ДатаДока;
	//	АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
	//	Движения.СтоимостьОСБухгалтерскийУчет.ВыполнитьПриход();
	//	
	//КонецЕсли;

	//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда 

	//	АмортизацияОС          = Движения.СтоимостьОСНалоговыйУчет;
	//	ПараметрыАмортизацииОС = Движения.ПараметрыАмортизацииОСНалоговыйУчет;
	//	ПроводкиНУ             = Движения.Налоговый;

	//	ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();

	//	Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл

	//		ТекОС = СтрокаТЧ.ОсновноеСредство;

	//		// Движения по регистру СтоимостьОС
	//		Движение = ТаблицаДвиженийАмортизация.Добавить();
	//		Движение.ОсновноеСредство      = ТекОС;
	//		Движение.Организация           = ТекОрганизация;
	//		Движение.Амортизация           = 0;
	//		Движение.Стоимость             = СтрокаТЧ.СуммаМодернизацииНУ;
	//		Движение.ВидОперации           = СтруктураШапкиДокумента.ВидОперацийСОсновнымиСредствами;
	//		Движение.СуммаЗатрат           = СтрокаТЧ.СуммаМодернизацииНУ;

	//		// Движения по регистру ПараметрыАмортизацииОС
	//		Движение = ПараметрыАмортизацииОС.Добавить();
	//		Движение.Период           = ДатаДока;
	//		Движение.ОсновноеСредство = ТекОС;
	//		Движение.Организация      = ТекОрганизация;
	//		Движение.СрокПолезногоИспользования = СтрокаТЧ.СрокПолезногоИспользованияНУ;

	//		СтрокаТЗ = ТаблицаСчетов.Найти(ТекОС,"ОС_НУ");
	//		Если СтрокаТЗ <> Неопределено Тогда
	//			СчетУчетаСтоимости  = СтрокаТЗ.СчетУчетаНУ;
	//		КонецЕсли;

	//		//Д 01.01 К 08.03
	//		СуммаПроводки = СтрокаТЧ.СуммаМодернизацииНУ - СтрокаТЧ.СуммаМодернизацииНУХоз;

	//		Если СуммаПроводки<>0 Тогда

	//			Проводка = ПроводкиНУ.Добавить();

	//			Проводка.Период       = ДатаДока;
	//			Проводка.Организация  = ТекОрганизация;
	//			Проводка.Содержание   = "Модернизация";
	//			Проводка.СчетДт       = СчетУчетаСтоимости;
	//			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
	//			Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
	//			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
	//			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Подрядный);
	//			Проводка.НомерЖурнала = "ОС";
	//			Проводка.Сумма        = СуммаПроводки;

	//		КонецЕсли;
	//		
	//		//Д 01.01 К 08.03
	//		СуммаПроводки = СтрокаТЧ.СуммаМодернизацииНУХоз;

	//		Если СуммаПроводки<>0 Тогда

	//			Проводка = ПроводкиНУ.Добавить();

	//			Проводка.Период       = ДатаДока;
	//			Проводка.Организация  = ТекОрганизация;
	//			Проводка.Содержание   = "Модернизация";
	//			Проводка.СчетДт       = СчетУчетаСтоимости;
	//			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
	//			Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
	//			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
	//			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Хозспособ);
	//			Проводка.НомерЖурнала = "ОС";
	//			Проводка.Сумма        = СуммаПроводки;

	//		КонецЕсли;
	//		
	//		//Д 01.01 К 08.03
	//		СуммаПроводки = СтрокаТЧ.СуммаМодернизацииПР - СтрокаТЧ.СуммаМодернизацииПРХоз;

	//		Если СуммаПроводки<>0 Тогда

	//			Проводка = ПроводкиНУ.Добавить();

	//			Проводка.Период       = ДатаДока;
	//			Проводка.Организация  = ТекОрганизация;
	//			Проводка.Содержание   = "Модернизация";
	//			Проводка.СчетДт       = СчетУчетаСтоимости;
	//			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
	//			Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
	//			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
	//			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Подрядный);
	//			Проводка.НомерЖурнала = "ОС";
	//			Проводка.Сумма        = СуммаПроводки;
	//			Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
	//			Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
	//			
	//		КонецЕсли;
	//		
	//		//Д 01.01 К 08.03
	//		СуммаПроводки = СтрокаТЧ.СуммаМодернизацииПРХоз;

	//		Если СуммаПроводки<>0 Тогда

	//			Проводка = ПроводкиНУ.Добавить();

	//			Проводка.Период       = ДатаДока;
	//			Проводка.Организация  = ТекОрганизация;
	//			Проводка.Содержание   = "Модернизация";
	//			Проводка.СчетДт       = СчетУчетаСтоимости;
	//			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
	//			Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
	//			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
	//			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Хозспособ);
	//			Проводка.НомерЖурнала = "ОС";
	//			Проводка.Сумма        = СуммаПроводки;
	//			Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
	//			Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;

	//		КонецЕсли;
	//		
	//		//Д 01.01 К 08.03
	//		СуммаПроводки = СтрокаТЧ.СуммаМодернизацииВР - СтрокаТЧ.СуммаМодернизацииВРХоз;

	//		Если СуммаПроводки<>0 Тогда

	//			Проводка = ПроводкиНУ.Добавить();

	//			Проводка.Период       = ДатаДока;
	//			Проводка.Организация  = ТекОрганизация;
	//			Проводка.Содержание   = "Модернизация";
	//			Проводка.СчетДт       = СчетУчетаСтоимости;
	//			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
	//			Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
	//			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
	//			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Подрядный);
	//			Проводка.НомерЖурнала = "ОС";
	//			Проводка.Сумма        = СуммаПроводки;
	//			Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР;
	//			Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;
	//			
	//		КонецЕсли;
	//		
	//		//Д 01.01 К 08.03
	//		СуммаПроводки = СтрокаТЧ.СуммаМодернизацииВРХоз;

	//		Если СуммаПроводки<>0 Тогда

	//			Проводка = ПроводкиНУ.Добавить();

	//			Проводка.Период       = ДатаДока;
	//			Проводка.Организация  = ТекОрганизация;
	//			Проводка.Содержание   = "Модернизация";
	//			Проводка.СчетДт       = СчетУчетаСтоимости;
	//			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
	//			Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
	//			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
	//			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Хозспособ);
	//			Проводка.НомерЖурнала = "ОС";
	//			Проводка.Сумма        = СуммаПроводки;
	//			Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР;
	//			Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;

	//		КонецЕсли;

	//		// Проводка по счету КВ "Расходы на капитальные вложения по п. 1.1 ст. 259 НК РФ"
	//		Если НЕ ЗначениеНеЗаполнено(СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ) Тогда
	//			
	//			Проводка = ПроводкиНУ.Добавить();
	//			
	//			Проводка.Период       = ДатаДока;
	//			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
	//			Проводка.НомерЖурнала = "ОС";
	//			Проводка.Содержание   = "Капитальные вложения, включаемые в состав расходов";
	//			Проводка.Сумма        = СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
	//			
	//			Проводка.СчетДт       = ПланыСчетов.Налоговый.РасходыНаКапитальныеВложения;
	//			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
	//			
	//		КонецЕсли;

	//	КонецЦикла;

	//	АмортизацияОС.мПериод          = ДатаДока;
	//	АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
	//	Движения.СтоимостьОСНалоговыйУчет.ВыполнитьПриход();
	//КонецЕсли;
	//Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И Не Отказ Тогда
	//	ПРоводкиБУ.Записать(Ложь);
	//КонецЕсли; 
	//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И Не Отказ тогда
	//	ПроводкиНУ.Записать(Ложь);
	//КонецЕсли; 
КонецПроцедуры

// Процедура формирования движений по регистрам подсистемы учета НДС
//
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок, ФормироватьПроводки = Истина) Экспорт

	//Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
	//	// Движения по этому документу делать не нужно
	//	Возврат;
	//КонецЕсли;
	//
	//Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если ТаблицаПоОС.Количество() = 0 Тогда
	//	// Движения по этому документу делать не нужно
	//	Возврат;
	//КонецЕсли; 
	//
	////Вычислим коэффициент распределения
	//ИтоговаяСуммаМодернизацииБУ = ТаблицаПоОС.Итог("СуммаМодернизацииБУ");
	//ИтоговаяСуммаМодернизацииБУХоз = ТаблицаПоОС.Итог("СуммаМодернизацииБУХоз");
	//
	//Если (ИтоговаяСуммаМодернизацииБУ <= 0) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	////Вычислим коэффициент распределения
	//Запрос = Новый Запрос;
	//		
	//Запрос.УстановитьПараметр("КонецПериода"     	, Новый граница(новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка), ВидГраницы.Исключая));
	//Запрос.УстановитьПараметр("Счет"       			, СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива);
	//Запрос.УстановитьПараметр("Организация"			, СтруктураШапкиДокумента.Организация);
	//Запрос.УстановитьПараметр("Объект"				, СтруктураШапкиДокумента.ОбъектСтроительства);
	//		
	//ВидыСубконто = Новый Массив;
	//ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
	//	
	//ЕстьСубконто_СпособыСтроительства = не (СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства,"ВидСубконто") = Неопределено);
	//	
	//Если ЕстьСубконто_СпособыСтроительства Тогда
	//	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства);
	//	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
	//	Запрос.УстановитьПараметр("ХозСпособСтроительства",  Перечисления.СпособыСтроительства.Хозспособ);
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	СУММА(ВЫБОР
	//	|			КОГДА Остатки.Субконто2 = &ХозСпособСтроительства
	//	|				ТОГДА 0
	//	|			ИНАЧЕ Остатки.СуммаОстаток
	//	|		КОНЕЦ) КАК СуммаОстаток,
	//	|	СУММА(ВЫБОР
	//	|			КОГДА Остатки.Субконто2 = &ХозСпособСтроительства
	//	|				ТОГДА Остатки.СуммаОстаток
	//	|			ИНАЧЕ 0
	//	|		КОНЕЦ) КАК Хозспособ_Остаток
	//	|ИЗ
	//	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	//	|		&КонецПериода,
	//	|		Счет = &Счет,
	//	|		&ВидыСубконто,
	//	|		Организация = &Организация
	//	|		    И Субконто1 = &Объект) КАК Остатки";
	//Иначе
	//	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);	
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	Остатки.СуммаОстаток КАК СуммаОстаток,
	//	|	0 КАК Хозспособ_Остаток
	//	|ИЗ
	//	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	//	|		&КонецПериода,
	//	|		Счет = &Счет,
	//	|		&ВидыСубконто,
	//	|		Организация = &Организация
	//	|		    И Субконто1 = &Объект) КАК Остатки";
	//			
	//КонецЕсли; 
	//		
	//Результат = Запрос.Выполнить();
	//Если Результат.Пустой() Тогда
	//	СуммаОстатка = 0;
	//	СуммаОстатка_Хозспособ = 0;
	//иначе
	//	Результат = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	//	СуммаОстатка  = Результат.Итог("СуммаОстаток");
	//	СуммаОстатка_Хозспособ = Результат.Итог("Хозспособ_Остаток");
	//КонецЕсли; 
	//	
	//Если (ИтоговаяСуммаМодернизацииБУ - ИтоговаяСуммаМодернизацииБУХоз) > 0 Тогда
	//	Если (СуммаОстатка = 0) тогда
	//		СообщитьОбОшибке("Отстутствует (не определен) остаток по счету """ + СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива + """"+?(ЕстьСубконто_СпособыСтроительства," по способу строительства ""Подрядный""","")+" для объекта <"+СтруктураШапкиДокумента.ОбъектСтроительства + ">.",,Заголовок);
	//		КоэффициентРаспределения = 1;
	//	ИначеЕсли (СуммаОстатка < 0) Тогда
	//		СообщитьОбОшибке("Определен отрицательный остаток ("+Формат(СуммаОстатка, "ЧЦ=15; ЧДЦ=2")+") по счету """ + СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива + """"+?(ЕстьСубконто_СпособыСтроительства," по способу строительства ""Подрядный""","")+" для объекта <"+СтруктураШапкиДокумента.ОбъектСтроительства + ">.",,Заголовок);
	//		КоэффициентРаспределения = 1;
	//	Иначе
	//		КоэффициентРаспределения = (ИтоговаяСуммаМодернизацииБУ - ИтоговаяСуммаМодернизацииБУХоз)/СуммаОстатка;
	//	КонецЕсли;
	//	
	//	// отразим погашение события ОжидаетсяПринятиеКУчетуОбъектаСтроительства
	//	СформироватьДвиженияПоРегиструНДСпоОСиНМА_ИзменениеТекущегоСостоянияНДС(СтруктураШапкиДокумента,
	//										СтруктураШапкиДокумента.ОбъектСтроительства,
	//										Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОбъектаСтроительства,
	//										Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство,СтруктураШапкиДокумента.Дата,
	//										КоэффициентРаспределения, Движения, Отказ);
	//КонецЕсли;							
	//
	////Добавим необходимые события в рег. НДСпоОСиНМА по каждому ОС в табличной части		
	//ТаблицаДвижений_НДСпоОСиНМА = Движения.НДСпоОСиНМА.Выгрузить();
	//
	//ОсобыеУсловияБлокировкиВычета2006 = (СтруктураШапкиДокумента.Дата >= '20060101');

	//// Отразим НДС при принятии к учету ОС хоз способом.
	//Если ИтоговаяСуммаМодернизацииБУХоз > 0 Тогда
	//	СуммаНДСПоХозСпособу = РассчитатьСуммуНДС(ИтоговаяСуммаМодернизацииБУХоз, Истина, Ложь, ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18));
	//	Если СтруктураШапкиДокумента.Дата >= '20060101' Тогда
	//		// НДС по хозспособу на джданный моемнт может быть уже начислен.
	//		// Необходимо определить долю погашения ранее начисленного НДС и долю текущего начисления
	//		Если (СуммаОстатка_Хозспособ = 0) тогда
	//			СообщитьОбОшибке("Отстутствует (не определен) остаток по счету """ + СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива + """"+?(ЕстьСубконто_СпособыСтроительства," по способу строительства ""Хозспособ""","")+" для объекта <"+СтруктураШапкиДокумента.ОбъектСтроительства + ">.",,Заголовок);
	//			КоэффициентРаспределения = 1;
	//		ИначеЕсли (СуммаОстатка_Хозспособ < 0) Тогда
	//			СообщитьОбОшибке("Определен отрицательный остаток ("+Формат(СуммаОстатка, "ЧЦ=15; ЧДЦ=2")+") по счету """ + СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива + """"+?(ЕстьСубконто_СпособыСтроительства," по способу строительства ""Хозспособ""","")+" для объекта <"+СтруктураШапкиДокумента.ОбъектСтроительства + ">.",,Заголовок);
	//			КоэффициентРаспределения = 1;
	//		Иначе
	//			КоэффициентРаспределения = (ИтоговаяСуммаМодернизацииБУХоз)/СуммаОстатка_Хозспособ;
	//		КонецЕсли;
	//			
	//		// Отразим погашение события ОжидаетсяПринятиеКУчетуОбъектаСтроительства по СМР собственными силами (НДС начислен ранее).
	//		СуммаБезНДСПоХозСпособу_НачисленоРанее = СформироватьДвиженияПоРегиструНДСпоОСиНМА_ИзменениеТекущегоСостоянияНДС_Хозспособ(СтруктураШапкиДокумента,
	//										СтруктураШапкиДокумента.ОбъектСтроительства,
	//										Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОбъектаСтроительства,
	//										Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство,СтруктураШапкиДокумента.Дата,
	//										КоэффициентРаспределения, Движения, Отказ);
	//											
	//		ИтоговаяСуммаМодернизацииБУХоз = ИтоговаяСуммаМодернизацииБУХоз - СуммаБезНДСПоХозСпособу_НачисленоРанее;
	//		СуммаНДСПоХозСпособу = РассчитатьСуммуНДС(ИтоговаяСуммаМодернизацииБУХоз, Истина, Ложь, ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18));
	//			
	//		ТаблицаДвижений_НДСпоОСиНМА = Движения.НДСпоОСиНМА.Выгрузить();
	//	КонецЕсли; 
	//		
	//	Если ИтоговаяСуммаМодернизацииБУХоз > 0 Тогда
	//	
	//		СформироватьДвиженияПоРегиструНДСНачисленныйПредъявленный_ПринятиеКУчету_ХозСпособ(СтруктураШапкиДокумента, Движения, Отказ,ИтоговаяСуммаМодернизацииБУХоз,СуммаНДСПоХозСпособу);
	//		
	//		//Дополним ТаблицаДвижений_НДСпоОСиНМА 
	//		ТаблицаДвижений_НДСНачисленныйПредъявленный = Движения.НДСПредъявленный.Выгрузить();
	//		ЗагрузитьВТаблицуЗначений(ТаблицаДвижений_НДСНачисленныйПредъявленный,ТаблицаДвижений_НДСпоОСиНМА);
	//		//Дополним последнюю строку таблицы ТаблицаДвижений_НДСпоОСиНМА
	//		ТаблицаДвижений_НДСпоОСиНМА[ТаблицаДвижений_НДСпоОСиНМА.Количество()-1].Объект				 = СтруктураШапкиДокумента.ОбъектСтроительства;
	//		ТаблицаДвижений_НДСпоОСиНМА[ТаблицаДвижений_НДСпоОСиНМА.Количество()-1].НДСВключенВСтоимость = Ложь;
	//		ТаблицаДвижений_НДСпоОСиНМА[ТаблицаДвижений_НДСпоОСиНМА.Количество()-1].НеВлияетНаВычет = ОсобыеУсловияБлокировкиВычета2006;
	//		
	//		// Проводка по уплате НДС в бюджет
	//		Если СуммаНДСПоХозСпособу<>0 И ФормироватьПроводки Тогда
	//			ПроводкаБУ = Движения.Хозрасчетный.Добавить();
	//			ПроводкаБУ.Период = СтруктураШапкиДокумента.Дата;
	//			ПроводкаБУ.Организация = СтруктураШапкиДокумента.Организация;
	//			ПроводкаБУ.Содержание = "Начислен НДС по строительству хоз. способом";
	//			
	//			ПроводкаБУ.СчетДт = ПланыСчетов.Хозрасчетный.НДСприСтроительствеОсновныхСредств;
	//			УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, "СФПолученные", СтруктураШапкиДокумента.Ссылка);
	//			
	//			ПроводкаБУ.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
	//			УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
	//			
	//			ПроводкаБУ.Сумма = СуммаНДСПоХозСпособу;
	//			
	//			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И Не Отказ Тогда
	//				Движения.Хозрасчетный.Записать(Ложь);
	//			КонецЕсли; 
	//		КонецЕсли; 
	//	КонецЕсли;
	//КонецЕсли;
	//
	//ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(Перечисления.НДССостоянияОСНМА.ОжидаетсяВводВЭксплуатацию,"Состояние");
	//Если ОсобыеУсловияБлокировкиВычета2006 тогда
	//	 ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(Истина, "НеВлияетНаВычет");
	//КонецЕсли;
	//// Заблокируем вычет в текущем месяце
	//ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата,"Период");
	//Движения.НДСпоОСиНМА.мТаблицаДвижений = ТаблицаДвижений_НДСпоОСиНМА;
	//Движения.НДСпоОСиНМА.ВыполнитьПриход();
	//
	////на след. месяц разблокируем вычет по ОС введенн. в экспл.
	//ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(НачалоМесяца(ДобавитьМесяц((СтруктураШапкиДокумента.Дата),1)),"Период");
	//Движения.НДСпоОСиНМА.мТаблицаДвижений = ТаблицаДвижений_НДСпоОСиНМА;
	//Движения.НДСпоОСиНМА.ВыполнитьРасход();
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоОС) Экспорт
	
	СтруктураПолей = Новый Структура;

	СтруктураПолей.Вставить("ОсновноеСредство",     "ОсновноеСредство");
	СтруктураПолей.Вставить("СтоимостьУУ",          "СтоимостьУУ");
	СтруктураПолей.Вставить("СуммаМодернизацииУУ",  "СуммаМодернизацииУУ");
	СтруктураПолей.Вставить("АмортизацияУУ",        "АмортизацияУУ");
	СтруктураПолей.Вставить("АмортизацияЗаМесяцУУ", "АмортизацияЗаМесяцУУ");
	
	СтруктураПолей.Вставить("СрокПолезногоИспользованияУУ", "СрокПолезногоИспользованияУУ");
	СтруктураПолей.Вставить("ФактСрокИспользованияУУ",      "ФактСрокИспользованияУУ");
	СтруктураПолей.Вставить("ОбъемПродукцииРаботУУ",        "ОбъемПродукцииРаботУУ");
	
	СтруктураПолей.Вставить("ФактОбъемПродукцииРаботУУ",    "ФактОбъемПродукцииРаботУУ");
	СтруктураПолей.Вставить("КоэффициентАмортизацииУУ",     "КоэффициентАмортизацииУУ");
	СтруктураПолей.Вставить("КоэффициентУскоренияУУ",       "КоэффициентУскоренияУУ");

	СтруктураПолей.Вставить("СтоимостьБУ",                  "СтоимостьБУ");
	СтруктураПолей.Вставить("СуммаМодернизацииБУ",          "СуммаМодернизацииБУ");
	СтруктураПолей.Вставить("СуммаМодернизацииБУХоз",       "СуммаМодернизацииБУХоз");
	СтруктураПолей.Вставить("АмортизацияБУ",                "АмортизацияБУ");
	СтруктураПолей.Вставить("АмортизацияЗаМесяцБУ",         "АмортизацияЗаМесяцБУ");
	
	СтруктураПолей.Вставить("СрокПолезногоИспользованияБУ", "СрокПолезногоИспользованияБУ");
	СтруктураПолей.Вставить("ФактСрокИспользованияБУ",      "ФактСрокИспользованияБУ");
	СтруктураПолей.Вставить("ОбъемПродукцииРаботБУ",        "ОбъемПродукцииРаботБУ");
	
	СтруктураПолей.Вставить("ФактОбъемПродукцииРаботБУ",    "ФактОбъемПродукцииРаботБУ");
	СтруктураПолей.Вставить("КоэффициентАмортизацииБУ",     "КоэффициентАмортизацииБУ");
	СтруктураПолей.Вставить("КоэффициентУскоренияБУ",       "КоэффициентУскоренияБУ");

	СтруктураПолей.Вставить("СрокПолезногоИспользованияНУ", "СрокПолезногоИспользованияНУ");
	СтруктураПолей.Вставить("СуммаМодернизацииНУ",          "СуммаМодернизацииНУ");
	СтруктураПолей.Вставить("СуммаМодернизацииНУХоз",       "СуммаМодернизацииНУХоз");
	
	СтруктураПолей.Вставить("СуммаМодернизацииПР",          "СуммаМодернизацииПР");
	СтруктураПолей.Вставить("СуммаМодернизацииПРХоз",       "СуммаМодернизацииПРХоз");

	СтруктураПолей.Вставить("СуммаМодернизацииВР",          "СуммаМодернизацииВР");
	СтруктураПолей.Вставить("СуммаМодернизацииВРХоз",       "СуммаМодернизацииВРХоз");
	
	СтруктураПолей.Вставить("СуммаКапитальныхВложенийВключаемыхВРасходыНУ", "СуммаКапитальныхВложенийВключаемыхВРасходыНУ");
	
	РезультатЗапросаПоОС = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();
	
КонецПроцедуры // СформироватьТаблицыДокумента()

Процедура ОбработкаПроведения(Отказ,РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоОС;
	
	Если мУдалятьДвижения Тогда
		УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);	

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоОС);

	ПроверкаРеквизитовТЧ(РежимПроведения,ТаблицаПоОС, СтруктураШапкиДокумента,Отказ, Заголовок);

	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоОС, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	//ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект);
	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
		
	Если НЕ Отказ Тогда
		
		обЗаписатьПротоколИзменений(ЭтотОбъект);
		
	КонецЕсли; 


КонецПроцедуры // ПередЗаписью

Процедура ОбработкаУдаленияПроведения(Отказ)

	
	УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, ложь);

КонецПроцедуры // ОбработкаУдаленияПроведения

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	//ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
															
	//РегистрацияОбъектовДоступаДокумента(Ссылка, Новый Структура("Организация",
	//														Организация));
КонецПроцедуры

