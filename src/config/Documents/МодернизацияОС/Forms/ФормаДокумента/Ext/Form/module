////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мОтражатьВРегламентированномУчете;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	//мДеревоМакетов = ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	//УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	//УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	//Если Не мПодменюПечати = Неопределено Тогда
	//	СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	//КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	//мКнопкиЗаполненияТЧ = ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	//
	//СоответствиеТЧ = Новый Соответствие;
	//СоответствиеТЧ.Вставить(ЭлементыФормы.ОС,ЭлементыФормы.КоманднаяПанельОС.Кнопки.ПодменюЗаполнить);
	//
	//СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	  ОтражатьВНалоговомУчетеНП=Истина;
	//ОтражатьВНалоговомУчетеНП = (ОтражатьВНалоговомУчете И (НЕ ПрименениеУСН(Организация, Дата)));
	   ПрименениеПБУ18=Истина;
	//ПрименениеПБУ18 = ПрименениеПБУ18(Организация, Дата);
	
	//ЭлементыФормы.ОтражатьВБухгалтерскомУчете.Доступность = мОтражатьВРегламентированномУчете;
	//ЭлементыФормы.ОтражатьВНалоговомУчете    .Доступность = мОтражатьВРегламентированномУчете;
	
	ЭлементыФормы.Событие.Видимость                                                 = ОтражатьВУправленческомУчете;
	ЭлементыФормы.СобытиеРегл.Видимость                                             = ЭлементыФормы.Организация.Видимость;
	
	ЭлементыФормы.НадписьСобытие.Видимость                                          = ЭлементыФормы.Событие.Видимость;
	ЭлементыФормы.НадписьСобытиеРегл.Видимость                                      = ЭлементыФормы.СобытиеРегл.Видимость;
	
	ЭлементыФормы.ПанельУУ.Свертка                                                  = ?(ОтражатьВУправленческомУчете, 
	                                                                                    РежимСверткиЭлементаУправления.Нет,
	                                                                                    РежимСверткиЭлементаУправления.Верх);
																						
	ЭлементыФормы.ПанельБУ.Свертка                                                  = ?(ОтражатьВБухгалтерскомУчете, 
	                                                                                    РежимСверткиЭлементаУправления.Нет,
	                                                                                    РежимСверткиЭлементаУправления.Верх);
	
	ЭлементыФормы.ПанельНУ.Свертка                                                  = ?(ОтражатьВНалоговомУчетеНП, 
	                                                                                    РежимСверткиЭлементаУправления.Нет,
	                                                                                    РежимСверткиЭлементаУправления.Верх);

	ЭлементыФормы.ВключитьКапитальныеВложенияВРасходыНУ.Видимость                   = ОтражатьВНалоговомУчетеНП;
	
	ЭлементыФормы.НадписьСуммаПР.Видимость                                          = ОтражатьВНалоговомУчетеНП И ПрименениеПБУ18;
	ЭлементыФормы.НадписьСуммаВР.Видимость                                          = ОтражатьВНалоговомУчетеНП И ПрименениеПБУ18;
	ЭлементыФормы.НадписьСуммаПРХоз.Видимость                                       = ОтражатьВНалоговомУчетеНП И ПрименениеПБУ18;
	ЭлементыФормы.НадписьСуммаВРХоз.Видимость                                       = ОтражатьВНалоговомУчетеНП И ПрименениеПБУ18;
	
	ЭлементыФормы.СтоимостьВР.Видимость                                             = ОтражатьВНалоговомУчетеНП И ПрименениеПБУ18;
	ЭлементыФормы.СтоимостьПР.Видимость                                             = ОтражатьВНалоговомУчетеНП И ПрименениеПБУ18;
	ЭлементыФормы.СтоимостьВРХоз.Видимость                                          = ОтражатьВНалоговомУчетеНП И ПрименениеПБУ18;
	ЭлементыФормы.СтоимостьПРХоз.Видимость                                          = ОтражатьВНалоговомУчетеНП И ПрименениеПБУ18;
	
	ЭлементыФормы.РеглВалюта5.Видимость                                             = ОтражатьВНалоговомУчетеНП И ПрименениеПБУ18;
	ЭлементыФормы.РеглВалюта6.Видимость                                             = ОтражатьВНалоговомУчетеНП И ПрименениеПБУ18;
	ЭлементыФормы.РеглВалюта7.Видимость                                             = ОтражатьВНалоговомУчетеНП И ПрименениеПБУ18;
	ЭлементыФормы.РеглВалюта8.Видимость                                             = ОтражатьВНалоговомУчетеНП И ПрименениеПБУ18;

	
	ЭлементыФормы.ОС.Колонки.ОстСрокИспользованияУУ.Видимость 	                    = ОтражатьВУправленческомУчете;
	ЭлементыФормы.ОС.Колонки.ОстОбъемПродукцииРаботУУ.Видимость                     = ОтражатьВУправленческомУчете;
	ЭлементыФормы.ОС.Колонки.ОстСтоимостьУУ.Видимость 			                    = ОтражатьВУправленческомУчете;
	
	ЭлементыФормы.ОС.Колонки.ОстСрокИспользованияБУ.Видимость 	                    = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.ОС.Колонки.ОстОбъемПродукцииРаботБУ.Видимость                     = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.ОС.Колонки.ОстСтоимостьБУ.Видимость 			                    = ОтражатьВБухгалтерскомУчете;

	ЭлементыФормы.ОС.Колонки.ОбщаяСуммаНУ.Видимость 			                    = ОтражатьВНалоговомУчетеНП;
	
	ЭлементыФормы.ОС.Колонки.СуммаКапитальныхВложенийВключаемыхВРасходыНУ.Видимость = ОтражатьВНалоговомУчетеНП 
	                                                                                И ВключитьКапитальныеВложенияВРасходыНУ;
																					
	ЭлементыФормы.ОС.Колонки.СуммаМодернизацииВР.Видимость                          = ОтражатьВНалоговомУчетеНП И ПрименениеПБУ18;
	ЭлементыФормы.ОС.Колонки.СуммаМодернизацииВРХоз.Видимость                       = ОтражатьВНалоговомУчетеНП И ПрименениеПБУ18;
	
	ЭлементыФормы.ОС.Колонки.СуммаМодернизацииПР.Видимость                          = ОтражатьВНалоговомУчетеНП И ПрименениеПБУ18;
	ЭлементыФормы.ОС.Колонки.СуммаМодернизацииПРХоз.Видимость                       = ОтражатьВНалоговомУчетеНП И ПрименениеПБУ18;
	
	//{ Добавлено 20070927
	ЭлементыФормы.ОС.Колонки.ОбъемПродукцииРаботУУ.Видимость = ЛОЖЬ;
	ЭлементыФормы.ОС.Колонки.ФактОбъемПродукцииРаботУУ.Видимость = ЛОЖЬ;
	ЭлементыФормы.ОС.Колонки.ОстОбъемПродукцииРаботУУ.Видимость = ЛОЖЬ;
	ЭлементыФормы.ОС.Колонки.ОбъемПродукцииРаботБУ.Видимость = ЛОЖЬ;
	ЭлементыФормы.ОС.Колонки.ФактОбъемПродукцииРаботБУ.Видимость = ЛОЖЬ;
	ЭлементыФормы.ОС.Колонки.ОстОбъемПродукцииРаботБУ.Видимость = ЛОЖЬ;
    
	
	
КонецПроцедуры //УстановитьВидимость()

// Заполнение реквизитов шапки документа значениями по умолчанию
//
Процедура ЗаполнитьДаннымиПоУмолчанию(ДокументОбъект)
	//Если ЗначениеНеЗаполнено(ДокументОбъект.Состояние) Тогда
	//	//ДокументОбъект.Состояние = ПолучитьСостояниеОСИзСправочника(Перечисления.ВидыСостоянийОС.Модернизировано);
	//КонецЕсли;
	//СчетаУчета = ПолучитьСчетаУчетаОбъектовСтроительства(Организация,ОбъектСтроительства);
	//Если ЗначениеНеЗаполнено(ДокументОбъект.СчетУчетаБУВнеоборотногоАктива) Тогда
	//	ДокументОбъект.СчетУчетаБУВнеоборотногоАктива = СчетаУчета.СчетУчетаБУ;
	//КонецЕсли;
	//Если ЗначениеНеЗаполнено(ДокументОбъект.СчетУчетаНУВнеоборотногоАктива) Тогда
	//	ДокументОбъект.СчетУчетаНУВнеоборотногоАктива = ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетУчетаБУВнеоборотногоАктива));
	//КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь);
		Если ПараметрОбъектКопирования = Неопределено И ПараметрОснование = Неопределено Тогда
			
			ЗаполнитьДаннымиПоУмолчанию(ЭтотОбъект);
		КонецЕсли;
		
		УстановитьНомерДокумента(ЭтотОбъект);
		
	КонецЕсли;
	
	ВалютаУУ = Константы.ВалютаУправленческогоУчета.Получить();
	ЭлементыФормы.УпрВалюта.Заголовок   = ВалютаУУ;

	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	ЭлементыФормы.РеглВалюта1.Заголовок  = ВалютаРегл;
	ЭлементыФормы.РеглВалюта2.Заголовок = ВалютаРегл;
	ЭлементыФормы.РеглВалюта3.Заголовок = ВалютаРегл;
	ЭлементыФормы.РеглВалюта4.Заголовок = ВалютаРегл;
	ЭлементыФормы.РеглВалюта5.Заголовок = ВалютаРегл;
	ЭлементыФормы.РеглВалюта6.Заголовок = ВалютаРегл;
	ЭлементыФормы.РеглВалюта7.Заголовок = ВалютаРегл;
	ЭлементыФормы.РеглВалюта8.Заголовок = ВалютаРегл;

	УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);

	ВключитьКапитальныеВложенияВРасходыНУ = НЕ ЗначениеНеЗаполнено(ОС.Итог("СуммаКапитальныхВложенийВключаемыхВРасходыНУ"));		
	
	//УправлениеПризнакомОтраженияВРеглУчете( ЭтотОбъект, ЭтаФорма,,, мОтражатьВРегламентированномУчете);
	
	// Установим видимость и доступность реквизитов
	УстановитьВидимость();

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	Если НЕ ЗначениеНеЗаполнено(ЗначениеВыбора) Тогда
		Если ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
			СтрокаТабличнойЧасти = ОС.Найти(ЗначениеВыбора,"ОсновноеСредство");
			Если СтрокаТабличнойЧасти <> Неопределено Тогда
				Предупреждение("Это основное средство уже подобрано!",60);
			Иначе
				НоваяСтрока = ОС.Добавить();
				НоваяСтрока.ОсновноеСредство = ЗначениеВыбора;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры

// Процедура вызывается при нажании кнопки Заполнить командной панели "КоманднаяПанельОС"
//
Процедура КоманднаяПанельОСЗаполнить(Кнопка)

	Если Ссылка.Проведен Тогда
		Предупреждение("Заполнение возможно только в непроведенном документе" , 60,);
		Возврат;
	КонецЕсли;

	Если Вопрос("При заполнении существующие данные будут пересчитаны! Продолжить?", 
		РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если (ОтражатьВБухгалтерскомУчете или ОтражатьВНалоговомУчете) и (ЗначениеНеЗаполнено(Организация)) Тогда
		Предупреждение("Не выбрана организация", 60);
		Возврат;
	КонецЕсли;

	СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");
	ТекВид = Новый СписокЗначений;
	ТекВид.Добавить(Перечисления.ВидыСобытийОС.Модернизация);
	ТекВид.Добавить(Перечисления.ВидыСобытийОС.ПринятиеКУчету);
	ТаблицаАмортизацииУпр = Новый ТаблицаЗначений();
	ТаблицаАмортизацииБух = Новый ТаблицаЗначений();
	ТаблицаАмортизацииНал = Новый ТаблицаЗначений();

	Если ОтражатьВУправленческомУчете Тогда
		Запрос   = Новый Запрос;
		Запрос.УстановитьПараметр("СписокОС",    СписокОС);
		Запрос.Текст = "ВЫБРАТЬ
		|	АмортизацияОстатки.СтоимостьОстаток КАК СтоимостьУУ,
		|	АмортизацияОстатки.АмортизацияОстаток КАК АмортизацияУУ,
		|	ПараметрыАмортизацииСрезПоследних.СрокПолезногоИспользования КАК СрокПолезногоИспользованияУУ,
		|	ПараметрыАмортизацииСрезПоследних.ОбъемПродукцииРабот КАК ОбъемПродукцииРаботУУ,
		|	ПараметрыАмортизацииСрезПоследних.КоэффициентАмортизации КАК КоэффициентАмортизацииУУ,
		|	ПараметрыАмортизацииСрезПоследних.КоэффициентУскорения КАК КоэффициентУскоренияУУ,
		|	ВЫБОР КОГДА НЕ (АмортизацияОстатки.ОсновноеСредство ЕСТЬ NULL) ТОГДА АмортизацияОстатки.ОсновноеСредство 
		|		КОГДА НЕ (ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ОсновноеСредство ЕСТЬ NULL) ТОГДА ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ОсновноеСредство 
		|		КОГДА НЕ (ПараметрыАмортизацииСрезПоследних.ОсновноеСредство ЕСТЬ NULL) ТОГДА ПараметрыАмортизацииСрезПоследних.ОсновноеСредство 
		|	ИНАЧЕ NULL 
		|	КОНЕЦ КАК ОсновноеСредство
		|	ИЗ
		|		РегистрНакопления.СтоимостьОС.Остатки(, ОсновноеСредство в (&СписокОС)) КАК АмортизацияОстатки
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОС.СрезПоследних(, ОсновноеСредство в (&СписокОС)) КАК ПараметрыАмортизацииСрезПоследних
		|		ПО АмортизацияОстатки.ОсновноеСредство = ПараметрыАмортизацииСрезПоследних.ОсновноеСредство
		|			ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(, ОсновноеСредство в (&СписокОС)) КАК ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних
		|			ПО ПараметрыАмортизацииСрезПоследних.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ОсновноеСредство";
		ТЗ_УУ = Запрос.Выполнить().Выгрузить();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("СостояниеОС", Перечисления.СостоянияОС.ВведеноВЭксплуатацию);
		Запрос.УстановитьПараметр("СписокОС",    СписокОС);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	СостоянияОС.ДатаСостояния КАК ДатаУУ,
		               |	СостоянияОС.ОсновноеСредство КАК ОС_УУ
		               |ИЗ
		               |	РегистрСведений.СостоянияОС КАК СостоянияОС
		               |ГДЕ
		               |	СостоянияОС.ОсновноеСредство В(&СписокОС)
		               |	И СостоянияОС.Состояние = &СостояниеОС";
					   
		ТЗСрокУУ = Запрос.Выполнить().Выгрузить();
		
		ТаблицаАмортизацииУпр = РасчетАмортизацииУпр(Дата, СписокОС);
	КонецЕсли;
	
	//Если (ОтражатьВБухгалтерскомУчете или ОтражатьВНалоговомУчете) Тогда
	//	Запрос   = Новый Запрос;
	//	Запрос.УстановитьПараметр("ТекОрганизация", Организация);
	//	Запрос.УстановитьПараметр("СписокОС",    СписокОС);
	//	Запрос.Текст = "ВЫБРАТЬ
	//	|	АмортизацияБухгалтерскийУчетОстатки.СтоимостьОстаток КАК СтоимостьБУ,
	//	|	АмортизацияБухгалтерскийУчетОстатки.АмортизацияОстаток КАК АмортизацияБУ,
	//	|	АмортизацияНалоговыйУчетОстатки.СтоимостьОстаток КАК СтоимостьНУ,
	//	|	ВыработкаОСОбороты.КоличествоОборот КАК Количество,
	//	|	ПараметрыАмортизацииНалоговыйУчетСрезПоследних.СрокПолезногоИспользования КАК СрокПолезногоИспользованияНУ,
	//	|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования КАК СрокПолезногоИспользованияБУ,
	//	|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРабот КАК ОбъемПродукцииРаботБУ,
	//	|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации КАК КоэффициентАмортизацииБУ,
	//	|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.КоэффициентУскорения КАК КоэффициентУскоренияБУ,
	//	|	ВЫБОР КОГДА НЕ (АмортизацияБухгалтерскийУчетОстатки.ОсновноеСредство ЕСТЬ NULL) ТОГДА АмортизацияБухгалтерскийУчетОстатки.ОсновноеСредство 
	//	|		КОГДА НЕ (АмортизацияНалоговыйУчетОстатки.ОсновноеСредство ЕСТЬ NULL) ТОГДА АмортизацияНалоговыйУчетОстатки.ОсновноеСредство 
	//	|		КОГДА НЕ (ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство ЕСТЬ NULL) ТОГДА ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство 
	//	|		КОГДА НЕ (ПараметрыАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство ЕСТЬ NULL) ТОГДА ПараметрыАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство 
	//	|		КОГДА НЕ (ВыработкаОСОбороты.ОсновноеСредство ЕСТЬ NULL) ТОГДА ВыработкаОСОбороты.ОсновноеСредство 
	//	|		КОГДА НЕ (ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство ЕСТЬ NULL) ТОГДА ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство 
	//	|	ИНАЧЕ NULL 
	//	|	КОНЕЦ КАК ОсновноеСредство
	//	|	ИЗ
	//	|		РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(, Организация = &ТекОрганизация И ОсновноеСредство в (&СписокОС)) КАК ПараметрыАмортизацииНалоговыйУчетСрезПоследних
	//	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОСНалоговыйУчет.Остатки(, Организация = &ТекОрганизация И ОсновноеСредство в (&СписокОС)) КАК АмортизацияНалоговыйУчетОстатки
	//	|		ПО ПараметрыАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство = АмортизацияНалоговыйУчетОстатки.ОсновноеСредство
	//	|			ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОСБухгалтерскийУчет.Остатки(, Организация = &ТекОрганизация И ОсновноеСредство в (&СписокОС)) КАК АмортизацияБухгалтерскийУчетОстатки
	//	|			ПО АмортизацияНалоговыйУчетОстатки.ОсновноеСредство = АмортизацияБухгалтерскийУчетОстатки.ОсновноеСредство
	//	|				ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(, Организация = &ТекОрганизация И ОсновноеСредство в (&СписокОС)) КАК ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних
	//	|				ПО АмортизацияБухгалтерскийУчетОстатки.ОсновноеСредство = ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	//	|					ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(, Организация = &ТекОрганизация И ОсновноеСредство в (&СписокОС)) КАК ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	//	|					ПО ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство
	//	|							ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыработкаОС.Обороты(, , , ОсновноеСредство в (&СписокОС)) КАК ВыработкаОСОбороты
	//	|							ПО (ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство = ВыработкаОСОбороты.ОсновноеСредство) и 
	//	|								(ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ПараметрВыработки = ВыработкаОСОбороты.ПараметрВыработки)
	//	|";
	//	ТЗ_БУ = Запрос.Выполнить().Выгрузить();
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.УстановитьПараметр("Организация", Организация);
	//	Запрос.УстановитьПараметр("СостояниеОС", 	Перечисления.СостоянияОС.ВведеноВЭксплуатацию);
	//	Запрос.УстановитьПараметр("СписокОС",       СписокОС);
	//	Запрос.Текст = "ВЫБРАТЬ
	//				   |	СостоянияОСОрганизаций.ДатаСостояния КАК ДатаБУ,
	//				   |	СостоянияОСОрганизаций.ОсновноеСредство КАК ОС_БУ
	//				   |ИЗ
	//				   |	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	//				   |ГДЕ
	//				   |	СостоянияОСОрганизаций.ОсновноеСредство В(&СписокОС)
	//				   |	И СостоянияОСОрганизаций.Организация = &Организация
	//				   |	И СостоянияОСОрганизаций.Состояние = &СостояниеОС";
	//	ТЗСрокБУ = Запрос.Выполнить().Выгрузить();
	//	
	//	ТаблицаАмортизацииБух = РасчетАмортизацииБухРегл(Дата, Организация, СписокОС);
	//	ТаблицаАмортизацииНал = РасчетАмортизацииНалогРегл(ЭтотОбъект, Дата, Организация, СписокОС);
	//КонецЕсли;

	Для каждого Строка Из ОС Цикл

		// В соответствующие поля строки запишем данные из запроса
		
		Если ОтражатьВУправленческомУчете Тогда
			СтрокаТЗУУ = ТЗ_УУ.Найти(Строка.ОсновноеСредство,"ОсновноеСредство");
			
			Если СтрокаТЗУУ = Неопределено Тогда
				
				Строка.СрокПолезногоИспользованияУУ = 0;
				Строка.ФактСрокИспользованияУУ = 0;
				Строка.ОбъемПродукцииРаботУУ = 0;
				Строка.ФактОбъемПродукцииРаботУУ = 0;
				Строка.СтоимостьУУ = 0;
				Строка.СуммаМодернизацииУУ = 0;
				Строка.АмортизацияУУ = 0;
				Строка.АмортизацияЗаМесяцУУ = 0;
				Строка.КоэффициентАмортизацииУУ = 0;
				Строка.КоэффициентУскоренияУУ = 0;
			Иначе
				
				Строка.СрокПолезногоИспользованияУУ = СтрокаТЗУУ.СрокПолезногоИспользованияУУ;
				СтрокаСрокУУ = ТЗСрокУУ.Найти(Строка.ОсновноеСредство,"ОС_УУ");
				Если СтрокаСрокУУ = Неопределено Тогда
					Строка.ФактСрокИспользованияУУ = 0;
				Иначе
					Строка.ФактСрокИспользованияУУ = ОпределитьФактическийСрокИспользования(СтрокаСрокУУ.ДатаУУ, Дата);
				КонецЕсли;
				
				//Строка.ОбъемПродукцииРаботУУ     = СтрокаТЗУУ.ОбъемПродукцииРаботУУ;
				//Строка.ФактОбъемПродукцииРаботУУ = СтрокаТЗУУ.Количество;
				Строка.СтоимостьУУ               = СтрокаТЗУУ.СтоимостьУУ;
				Строка.СуммаМодернизацииУУ       = ?(ОС.Количество()<>0,ЭлементыФормы.Стоимость.Значение / ОС.Количество(),0);
				Строка.АмортизацияУУ             = СтрокаТЗУУ.АмортизацияУУ;
				СтрокаТаблицаАмортизацииУпр      = ТаблицаАмортизацииУпр.Найти(Строка.ОсновноеСредство,"ОС");
				Строка.АмортизацияЗаМесяцУУ      = ?(СтрокаТаблицаАмортизацииУпр = Неопределено,0,СтрокаТаблицаАмортизацииУпр.Упр);
				Строка.КоэффициентАмортизацииУУ  = СтрокаТЗУУ.КоэффициентАмортизацииУУ;
				Строка.КоэффициентУскоренияУУ    = СтрокаТЗУУ.КоэффициентУскоренияУУ;
				
			КонецЕсли;
			
		КонецЕсли;
		
		//Если ОтражатьВБухгалтерскомУчете ИЛИ ОтражатьВНалоговомУчете Тогда
		//	СтрокаТЗБУ = ТЗ_БУ.Найти(Строка.ОсновноеСредство,"ОсновноеСредство");
		//	
		//	Если СтрокаТЗБУ = Неопределено Тогда
		//		
		//		Строка.СрокПолезногоИспользованияБУ = 0;
		//		Строка.ФактСрокИспользованияБУ      = 0;
		//		Строка.ОбъемПродукцииРаботБУ        = 0;
		//		Строка.ФактОбъемПродукцииРаботБУ    = 0;
		//		Строка.СтоимостьБУ                  = 0;
		//		Строка.СуммаМодернизацииБУ          = 0;
		//		Строка.АмортизацияБУ                = 0;
		//		Строка.АмортизацияЗаМесяцБУ         = 0;
		//		Строка.КоэффициентАмортизацииБУ     = 0;
		//		Строка.КоэффициентУскоренияБУ       = 0;
		//		Строка.СрокПолезногоИспользованияНУ = 0;
		//		Строка.СтоимостьНУ                  = 0;
		//		Строка.СуммаМодернизацииНУ          = 0;
		//		Строка.СуммаМодернизацииНУХоз       = 0;
		//		Строка.СуммаМодернизацииПР          = 0;
		//		Строка.СуммаМодернизацииПРХоз       = 0;
		//		Строка.СуммаМодернизацииВР          = 0;
		//		Строка.СуммаМодернизацииВРХоз       = 0;
		//		
		//	Иначе
		//		
		//		Строка.СрокПолезногоИспользованияБУ = СтрокаТЗБУ.СрокПолезногоИспользованияБУ;
		//		СтрокаСрокБУ = ТЗСрокБУ.Найти(Строка.ОсновноеСредство,"ОС_БУ");
		//		Если СтрокаСрокБУ = Неопределено Тогда
		//			Строка.ФактСрокИспользованияБУ = 0;
		//		Иначе
		//			Строка.ФактСрокИспользованияБУ = ОпределитьФактическийСрокИспользования(СтрокаСрокБУ.ДатаБУ, Дата)
		//		КонецЕсли;
		//		
		//		Строка.ОбъемПродукцииРаботБУ        = СтрокаТЗБУ.ОбъемПродукцииРаботБУ;
		//		Строка.ФактОбъемПродукцииРаботБУ    = СтрокаТЗБУ.Количество;
		//		Строка.СтоимостьБУ                  = СтрокаТЗБУ.СтоимостьБУ;
		//		Строка.СуммаМодернизацииБУ          = ?(ОС.Количество()<>0,ЭлементыФормы.СтоимостьБУ.Значение / ОС.Количество(),0);
		//		Строка.СуммаМодернизацииБУХоз       = ?(ОС.Количество()<>0,ЭлементыФормы.СтоимостьБУХоз.Значение / ОС.Количество(),0);
		//		Строка.АмортизацияБУ                = СтрокаТЗБУ.АмортизацияБУ;
		//		СтрокаТаблицаАмортизацииБух         = ТаблицаАмортизацииБух.Найти(Строка.ОсновноеСредство,"ОС");
		//		Строка.АмортизацияЗаМесяцБУ         = ?(СтрокаТаблицаАмортизацииБух = Неопределено,0,СтрокаТаблицаАмортизацииБух.Бух);
		//		Строка.КоэффициентАмортизацииБУ     = СтрокаТЗБУ.КоэффициентАмортизацииБУ;
		//		Строка.КоэффициентУскоренияБУ       = СтрокаТЗБУ.КоэффициентУскоренияБУ;
		//		Строка.СрокПолезногоИспользованияНУ = СтрокаТЗБУ.СрокПолезногоИспользованияНУ;
		//		
		//		Строка.СтоимостьНУ                  = СтрокаТЗБУ.СтоимостьНУ;
		//		Строка.СуммаМодернизацииНУ          = ?(ОС.Количество()<>0,ЭлементыФормы.СтоимостьНУ.Значение / ОС.Количество(),0);
		//		Строка.СуммаМодернизацииНУХоз       = ?(ОС.Количество()<>0,ЭлементыФормы.СтоимостьНУХоз.Значение / ОС.Количество(),0);
		//		Строка.СуммаМодернизацииПР          = ?(ОС.Количество()<>0,ЭлементыФормы.СтоимостьПР.Значение / ОС.Количество(),0);
		//		Строка.СуммаМодернизацииПРХоз       = ?(ОС.Количество()<>0,ЭлементыФормы.СтоимостьПРХоз.Значение / ОС.Количество(),0);
		//		Строка.СуммаМодернизацииВР          = ?(ОС.Количество()<>0,ЭлементыФормы.СтоимостьВР.Значение / ОС.Количество(),0);
		//		Строка.СуммаМодернизацииВРХоз       = ?(ОС.Количество()<>0,ЭлементыФормы.СтоимостьВРХоз.Значение / ОС.Количество(),0);
		//		
		//	КонецЕсли;
		//	
		//КонецЕсли;
		
	КонецЦикла;
	
	//Иначе
	
	//	Сообщить("Данные для заполнения отсутствуют.");
	
	//КонецЕсли;

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "По наименованию" из меню "Заполнить"
// командной панели формы. Процедура добавляет в табличную часть основные средства,
// наименование которых совпадает с наименованием текущего выбранного в табличной части ОС
//
Процедура КоманднаяПанельОСЗаполнитьПоНаименованию(Кнопка)
	
	Если ЭлементыФормы.ОС.ТекущаяСтрока = Неопределено Тогда
		СообщитьОбОшибке("Данные для заполнения отсутствуют.",,, СтатусСообщения.Обычное);
		Возврат;
	КонецЕсли;
	
	ОсновноеСредство = ЭлементыФормы.ОС.ТекущиеДанные.ОсновноеСредство;
	
	Если ОсновноеСредство = Неопределено Тогда
		СообщитьОбОшибке("Данные для заполнения отсутствуют.",,, СтатусСообщения.Обычное);
		Возврат;
	КонецЕсли;
	
	ОсновноеСредствоНаименование = Строка(ОсновноеСредство);
	
	СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("СписокОС",     СписокОС);
	Запрос.УстановитьПараметр("Наименование", ОсновноеСредствоНаименование);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК ОсновноеСредство,
	|	ОсновныеСредства.Код КАК ОсновноеСредствоКод
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.Наименование = &Наименование
	|	И ОсновныеСредства.Ссылка НЕ В (&СписокОС)
	|	И ОсновныеСредства.ПометкаУдаления = ЛОЖЬ
	|	И ОсновныеСредства.ЭтоГруппа = ЛОЖЬ";
	
	ВыборкаОС = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаОС.Количество() = 0 Тогда
		СообщитьОбОшибке("Другие элементы справочника с наименованием <" + ОсновноеСредствоНаименование + "> в справочнике ""Основные средства"" отсутствуют.",,, СтатусСообщения.Обычное);
		Возврат;
	КонецЕсли;
	
	Пока ВыборкаОС.Следующий() Цикл
		НоваяСтрока = ОС.Добавить();
		НоваяСтрока.ОсновноеСредство = ВыборкаОС.ОсновноеСредство;
	КонецЦикла; 
	
КонецПроцедуры // КоманднаяПанельОСЗаполнитьПоНаименованию()

// Процедура вызывается при нажании кнопки Подбор командной панели "КоманднаяПанельОС"
//
Процедура КоманднаяПанельОСПодбор(Кнопка)
	
	ФормаПодбора =  Справочники.ОсновныеСредства.ПолучитьФорму("ФормаПодбора",ЭтаФорма);
	ФормаПодбора.РежимВыбора = Истина;
	ФормаПодбора.ЗакрыватьПриВыборе  = Ложь;
	ФормаПодбора.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьНомерДокумента(ЭтотОбъект);
	ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	
	//УправлениеПризнакомОтраженияВРеглУчете( ЭтотОбъект, ЭтаФорма,,, мОтражатьВРегламентированномУчете, Истина);
	УстановитьВидимость();
	
	ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в управленческом учете
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)
	Если Не ОтражатьВБухгалтерскомУчете
	   И Не ОтражатьВУправленческомУчете Тогда
		ОтражатьВБухгалтерскомУчете = Истина;
		ОтражатьВБухгалтерскомУчетеПриИзменении(ЭлементыФормы.ОтражатьВБухгалтерскомУчете);
	КонецЕсли;

	УстановитьВидимость();
	ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	УстановитьКнопкиПечати();

КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага ОтражатьВБухгалтерскомУчете 
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
	Если Не ОтражатьВБухгалтерскомУчете
	   И Не ОтражатьВУправленческомУчете Тогда
		ОтражатьВУправленческомУчете = Истина;
	КонецЕсли;
	
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = Элемент.Значение;
	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете;
	
	Если Не ОтражатьВБухгалтерскомУчете И Не ОтражатьВНалоговомУчете Тогда
		УстановитьНомерДокумента(ЭтотОбъект);
	КонецЕсли;

	УстановитьВидимость();
	ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);

	//Если Элемент.Значение Тогда
	//	СчетаУчета = ПолучитьСчетаУчетаОбъектовСтроительства(Организация,ОбъектСтроительства);
	//	СчетУчетаБУВнеоборотногоАктива = СчетаУчета.СчетУчетаБУ;
	//	СчетУчетаНУВнеоборотногоАктива = ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетУчетаБУВнеоборотногоАктива));
	//КонецЕсли;
	УстановитьКнопкиПечати();

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага ОтражатьВНалоговомУчете 
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)

	Если Не ОтражатьВБухгалтерскомУчете
	   И Не ОтражатьВНалоговомУчете
	   И Не ОтражатьВУправленческомУчете Тогда
		ОтражатьВУправленческомУчете = Истина;
		ОтражатьВУправленческомУчетеПриИзменении(Элемент);
	КонецЕсли;
	Если Не ОтражатьВБухгалтерскомУчете И Не ОтражатьВНалоговомУчете Тогда
		УстановитьНомерДокумента(ЭтотОбъект);
	КонецЕсли;
	ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	УстановитьВидимость();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ОбъектСтроительства 
//
Процедура ОбъектСтроительстваПриИзменении(Элемент)

	//СчетаУчета = ПолучитьСчетаУчетаОбъектовСтроительства(Организация,ОбъектСтроительства);
	//СчетУчетаБУВнеоборотногоАктива = СчетаУчета.СчетУчетаБУ;
	//СчетУчетаНУВнеоборотногоАктива = ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетУчетаБУВнеоборотногоАктива));

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля СчетУчетаБУВнеоборотногоАктива 
//
Процедура СчетУчетаБУВнеоборотногоАктиваПриИзменении(Элемент)

	//СчетУчетаНУВнеоборотногоАктива = ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетУчетаБУВнеоборотногоАктива));

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля СчетУчетаБУВнеоборотногоАктива 
//
Процедура СчетУчетаБУВнеоборотногоАктиваОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	//СтандартнаяОбработка = СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля СчетУчетаНУВнеоборотногоАктива 
//
Процедура СчетУчетаНУВнеоборотногоАктиваОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	//СтандартнаяОбработка = СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки РассчитатьСтоимость
//
Процедура РассчитатьСтоимостьНажатие(Элемент)

	Если Ссылка.Проведен Тогда
		Предупреждение("Заполнение возможно только в непроведенном документе." , 60,);
		Возврат;
	КонецЕсли;

	СтруктураСтоимости = РасчитатьСтоимостьОбъектаСтроительства(ОтражатьВУправленческомУчете,
	                                                            ОтражатьВБухгалтерскомУчете,
	                                                            ОтражатьВНалоговомУчете,
	                                                            СчетУчетаБУВнеоборотногоАктива,
	                                                            СчетУчетаНУВнеоборотногоАктива,
	                                                            ОбъектСтроительства,
	                                                            Организация,
	                                                            КонецДня(Дата));
	
	ЭлементыФормы.Стоимость.Значение      = СтруктураСтоимости.СтоимостьУУ;
	ЭлементыФормы.СтоимостьБУ.Значение    = СтруктураСтоимости.СтоимостьБУ;
	ЭлементыФормы.СтоимостьБУХоз.Значение = СтруктураСтоимости.СтоимостьБУХоз;
	ЭлементыФормы.СтоимостьНУ.Значение    = СтруктураСтоимости.СтоимостьНУ;
	ЭлементыФормы.СтоимостьНУХоз.Значение = СтруктураСтоимости.СтоимостьНУХоз;
	ЭлементыФормы.СтоимостьПР.Значение    = СтруктураСтоимости.СтоимостьПР;
	ЭлементыФормы.СтоимостьПРХоз.Значение = СтруктураСтоимости.СтоимостьПРХоз;
	ЭлементыФормы.СтоимостьВР.Значение    = СтруктураСтоимости.СтоимостьВР;
	ЭлементыФормы.СтоимостьВРХоз.Значение = СтруктураСтоимости.СтоимостьВРХоз;

КонецПроцедуры // РассчитатьСтоимостьНажатие()

// Процедура - обработчик события "НачалоВыбора" поля Состояние 
//
Процедура СобытиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ВидыСобытий = ПолучитьСписокЗначенийВидыСобытий();	
    НачалоВыбораЗначенияСобытияОС(Элемент, ВидыСобытий, СтандартнаяОбработка);

КонецПроцедуры

//Процедура - обработчик события "НачалоВыбора" элемента формы СобытиеРегл
//
Процедура СобытиеРеглНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СобытиеНачалоВыбора(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка "Включить капитальные
// вложения в состав расходов по п. 1.1 ст. 259 НК РФ (НУ)"
//
Процедура ВключитьКапитальныеВложенияВРасходыНУПриИзменении(Элемент)
	
	Если ВключитьКапитальныеВложенияВРасходыНУ = Ложь Тогда
	
		Если НЕ ЗначениеНеЗаполнено(ОС.Итог("СуммаКапитальныхВложенийВключаемыхВРасходыНУ")) Тогда
			
			ТекстВопроса =
			"Установленные значения сумм капитальных вложений, включаемых в состав расходов, будут очищены.
			|Продолжить?";
			
			Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена) = КодВозвратаДиалога.ОК Тогда
				
				Для Каждого СтрокаОС Из ОС Цикл
					СтрокаОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ = 0;					
				КонецЦикла;
				
			Иначе
				
				ВключитьКапитальныеВложенияВРасходыНУ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // ВключитьКапитальныеВложенияВРасходыНУПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Оборудование". Формирует данные в колонке "Инв. номер".
//
Процедура ОСПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.ОС.Колонки.ИнвентарныйНомер.Видимость Тогда

		ОформлениеСтроки.Ячейки.ИнвентарныйНомер.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ИнвентарныйНомер.Текст           = ДанныеСтроки.ОсновноеСредство.Код;

	КонецЕсли;
	
	Если ОтражатьВУправленческомУчете Тогда

		ОформлениеСтроки.Ячейки.ОстСтоимостьУУ.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ОстСтоимостьУУ.Текст = 
			ФорматСумм(ДанныеСтроки.СтоимостьУУ + ДанныеСтроки.СуммаМодернизацииУУ - ДанныеСтроки.АмортизацияУУ - ДанныеСтроки.АмортизацияЗаМесяцУУ);

		ОформлениеСтроки.Ячейки.ОстСрокИспользованияУУ.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ОстСрокИспользованияУУ.Текст = ДанныеСтроки.СрокПолезногоИспользованияУУ - ДанныеСтроки.ФактСрокИспользованияУУ;
				
		ОформлениеСтроки.Ячейки.ОстОбъемПродукцииРаботУУ.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ОстОбъемПродукцииРаботУУ.Текст = 
			СокрЛ(Формат(ДанныеСтроки.ОбъемПродукцииРаботУУ - ДанныеСтроки.ФактОбъемПродукцииРаботУУ, "ЧЦ=15;ЧДЦ=2"));
	КонецЕсли;

	Если ОтражатьВБухгалтерскомУчете Тогда

		ОформлениеСтроки.Ячейки.ОстСтоимостьБУ.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ОстСтоимостьБУ.Текст = 
			ФорматСумм(ДанныеСтроки.СтоимостьБУ + ДанныеСтроки.СуммаМодернизацииБУ - ДанныеСтроки.АмортизацияБУ - ДанныеСтроки.АмортизацияЗаМесяцБУ);

		ОформлениеСтроки.Ячейки.ОстСрокИспользованияБУ.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ОстСрокИспользованияБУ.Текст = 
			ДанныеСтроки.СрокПолезногоИспользованияБУ - ДанныеСтроки.ФактСрокИспользованияБУ;
				
		ОформлениеСтроки.Ячейки.ОстОбъемПродукцииРаботБУ.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ОстОбъемПродукцииРаботБУ.Текст = 
			СокрЛ(Формат(ДанныеСтроки.ОбъемПродукцииРаботБУ - ДанныеСтроки.ФактОбъемПродукцииРаботБУ, "ЧЦ=15;ЧДЦ=2"));
	КонецЕсли;

	Если ОтражатьВНалоговомУчете Тогда
		ОформлениеСтроки.Ячейки.ОбщаяСуммаНУ.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ОбщаяСуммаНУ.Текст = 
			ФорматСумм(ДанныеСтроки.СтоимостьНУ + ДанныеСтроки.СуммаМодернизацииНУ);

	КонецЕсли;
	

КонецПроцедуры // ОСПриВыводеСтроки()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	//ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	//ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	//ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	//Если НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
	//	
	//	УстановитьКнопкиПечати();
	//	
	//КонецЕсли; 
	
	
КонецПроцедуры

// Процедура открывате журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	//ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывате журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	//ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры
