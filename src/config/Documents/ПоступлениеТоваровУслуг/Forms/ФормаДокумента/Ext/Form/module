////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

Перем мСуммаПодвалаГрафикаОплат;

// Хранит текущее значение учетной политики розничная торговля облагается ЕНВД
Перем мРозничнаяТорговляОблагаетсяЕНВД;

// Хранит текущее значение склада для контроля учетной политики розничная торговля облагается ЕНВД
Перем мТекущийСклад;

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов;

// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента;

// Переменные для кэширования коллекций колонок табличных полей.
Перем мКолонкиТовары, мКолонкиВозвратнаяТара, мКолонкиУслуги;

Перем мРазрешитьНулевыеЦеныВОпте;

// Автоотметка СкладОредра без учета заполненности ТЧ.
Перем мАвтоОтметкаСкладОрдера;
Перем мСкладИзШапки;

Перем мПечатнаяФормаПоУмолчанию;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

// Заполняет текст про счет-фактуру в форме документа.
//   Вызывается из обработчика ПриОткрытии этой формы и из обработчика ПослеЗаписи
// формы счета-фактуры.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТекстПроСчетФактуру() Экспорт

	ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = ПолучитьТекстСчетаФактуры(
	                                                 НайтиПодчиненныйДокумент(Ссылка, "СчетФактураПолученный"));

КонецПроцедуры // ЗаполнитьТекстПроСчетФактуру()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Если ТабличнаяЧасть = Товары Тогда
		СписокЗапросов.Добавить("ПриходЦеныКонтрагента", "По ценам контрагента");
		СписокЗапросов.Добавить("ПриходНоменклатураКонтрагента", "По номенклатуре контрагента");
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		СписокЗапросов.Добавить("РасходУслуги", "По услугам предприятия");
	КонецЕсли;

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, Если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена  = Истина;
	ЕстьСерия = Истина;

	Если ТабличнаяЧасть = Товары Тогда
		
		Команда = "ПодборВТабличнуюЧастьТовары";
		Валюта  = ВалютаДокумента;
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
		ИмяТабличнойЧасти = "Товары";
		
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
		
		Если ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
			Предупреждение("Не выбран договор контрагента!");
			Возврат;
		ИначеЕсли ЗначениеНеЗаполнено(мТекущаяВалютаВзаиморасчетов) Тогда
			Предупреждение("Не выбрана валюта взаиморасчетов по договору!");
			Возврат;
		КонецЕсли; 

		Команда = "ПодборВТабличнуюЧастьВозвратнаяТара";
		Валюта  = мТекущаяВалютаВзаиморасчетов;
		ЕстьСерия = Ложь;
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
		ИмяТабличнойЧасти = "Тара";
		
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда

		Команда           = "ПодборВТабличнуюЧастьУслуги";
		Валюта            = ВалютаДокумента;
		ЕстьСерия         = Ложь;
		ИмяТабличнойЧасти = "Услуги";
		
	КонецЕсли;
	
	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"              , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора"   , СписокВидовПодбора);
	
	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                , СкладОрдер);
	СтруктураПараметровПодбора.Вставить("ТипЦен"               , ТипЦен);
	СтруктураПараметровПодбора.Вставить("Контрагент"           , Контрагент);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	СтруктураПараметровПодбора.Вставить("Организация"          , Организация);
	СтруктураПараметровПодбора.Вставить("Сделка"               , Сделка);
	
	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен"  , СпособЗаполненияЦен);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"            , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"      , Валюта);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);

	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("КоличествоМест"  , КоличествоМест);
	ЗначениеВыбора.Свойство("Цена"            , Цена);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"           , Серия);

	Если (ТабличнаяЧасть = Товары ИЛИ ТабличнаяЧасть = ВозвратнаяТара )
	   И Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	ИначеЕсли ТабличнаяЧасть = Услуги И Не Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте товары не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	Если ТабличнаяЧасть = Товары Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
		СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);
	Иначе
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;

	СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;

		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;

			Если Не ИспользоватьВнутренниеЗаказы() Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
			КонецЕсли;

			// Заполняем реквизиты табличной части.
			ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Пересчитаем цену в валюту документа.
			Цена = ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                 СпособЗаполненияЦен,
			                                                 ТипЦен.ЦенаВключаетНДС,
			                                                 УчитыватьНДС,
			                                                 СуммаВключаетНДС,
			                                                 ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			СтрокаТабличнойЧасти.Количество = Количество;

			Если Не ИспользоватьВнутренниеЗаказы() Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
			КонецЕсли;

			// Пересчитаем цену в валюту документа.
			Цена = ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения.
			// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС
			// ставки берутся из номенклатуры.
			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                     СпособЗаполненияЦен,
			                                     ТипЦен.ЦенаВключаетНДС,
			                                     УчитыватьНДС,
			                                     Истина,
			                                     ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС));

			// Рассчитать реквизиты табличной части.
			РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			СтрокаТабличнойЧасти.Количество = Количество;

			// Заполняем реквизиты табличной части.
			ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Пересчитаем цену в валюту документа.
			Цена = ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                 СпособЗаполненияЦен,
			                                                 ТипЦен.ЦенаВключаетНДС,
			                                                 УчитыватьНДС,
			                                                 СуммаВключаетНДС,
			                                                 ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
			СтрокаТабличнойЧасти.СтатьяЗатрат = СтрокаТабличнойЧасти.Номенклатура.СтатьяЗатрат;
			СтрокаТабличнойЧасти.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппаЗатрат;
					
		КонецЕсли;
	КонецЕсли; // СтрокаТабличнойЧасти <> Неопределено

	Если ТабличнаяЧасть <> Услуги Тогда
		ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

	ТабличнаяЧастьИмя = ?(ТабличнаяЧасть = Товары, "Товары", "ВозвратнаяТара");
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Удаление из меню лишних пунктов.
//
Процедура ОбновитьМенюКнопкиЗаполнить()

	Если НЕ (глТорговоеОборудование = Неопределено)
	   И НЕ (глТорговоеОборудование.млТерминал = Неопределено)
	   И НЕ (глТорговоеОборудование.млТерминал.Количество() = 0) Тогда
		УдалитьПунктМеню = Ложь;
	Иначе
		УдалитьПунктМеню = Истина;
	КонецЕсли;

	Если УдалитьПунктМеню Тогда
		КнопкиПанелиТовары = ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки;
		КнопкаИзТерминалаСбораДанных = КнопкиПанелиТовары.Найти("ИзТерминалаСбораДанных");
		Если КнопкаИзТерминалаСбораДанных <> Неопределено Тогда
			ИндексКнопкиИзТерминалаСбораДанных = КнопкиПанелиТовары.Индекс(КнопкаИзТерминалаСбораДанных);
			КнопкиПанелиТовары.Удалить(ИндексКнопкиИзТерминалаСбораДанных);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьМенюКнопкиЗаполнить()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	ПриИзмененииЗначенияДоговора(ЭтотОбъект, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Покупка", "Товары", мТекущийДоговорКонтрагента);

	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка, Истина);
	УстановитьЗаголовкиПоДоговору();

	Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		ОтражатьВНалоговомУчете = Ложь;
	КонецЕсли;

	УстановитьВидимость();
	УстановитьАвтоотметку();

КонецПроцедуры // ПриИзмененииДоговора()

// Выполняет необходимые действия при изменении вида склада.
//
Процедура ПриИзмененииВидаСклада()

	// Определим текущий вид склада
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		ВидСклада = СкладОрдер.ВидСклада;
	Иначе
		ВидСклада = СкладОрдер.Склад.ВидСклада;
	КонецЕсли;

	// Оформление колонок таблицы
	ФлагАвтоОтметкиНезаполненого = Истина;

	Если (ВидСклада = Перечисления.ВидыСкладов.Оптовый ИЛИ ВидСклада = Неопределено) И мРазрешитьНулевыеЦеныВОпте Тогда
		ФлагАвтоОтметкиНезаполненого = Ложь;
	КонецЕсли;

	мКолонкиТовары.Сумма.АвтоОтметкаНезаполненного         = ФлагАвтоОтметкиНезаполненого;
	мКолонкиТовары.Цена.АвтоОтметкаНезаполненного          = ФлагАвтоОтметкиНезаполненого;
	мКолонкиУслуги.Сумма.АвтоОтметкаНезаполненного         = ФлагАвтоОтметкиНезаполненого;
	мКолонкиУслуги.Цена.АвтоОтметкаНезаполненного          = ФлагАвтоОтметкиНезаполненого;
	мКолонкиВозвратнаяТара.Сумма.АвтоОтметкаНезаполненного = ФлагАвтоОтметкиНезаполненого;
	мКолонкиВозвратнаяТара.Цена.АвтоОтметкаНезаполненного  = ФлагАвтоОтметкиНезаполненого;

КонецПроцедуры // ПриИзмененииВидаСклада()

// Обновляет текущее значение учетной политики розничная торговля облагается ЕНВД.
//
Процедура ПриИзмененииОблагаетсяЕНВД(РежимВызова = "")

	Если ЗначениеНеЗаполнено(РежимВызова) Тогда
		мРозничнаяТорговляОблагаетсяЕНВД = УчетнаяПолитикаНалоговыйУчет("РозничнаяТорговляОблагаетсяЕНВД", Организация, Дата);

		Если НЕ ЗначениеНеЗаполнено(ВидПоступления) Тогда
			Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
				мТекущийСклад = СкладОрдер;
			Иначе
				мТекущийСклад = СкладОрдер.Склад;
			КонецЕсли;
		Иначе
			мТекущийСклад = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
	Иначе
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;

		ПриИзмененииРозничнаяТорговляОблагаетсяЕНВД(ЭтотОбъект, мВалютаРегламентированногоУчета,
		                                            СпособЗаполненияЦен, "Покупка", РежимВызова, "Товары",
		                                            мРозничнаяТорговляОблагаетсяЕНВД, мТекущийСклад);
		УстановитьВидимость();
	КонецЕсли;

КонецПроцедуры // ПриИзмененииОблагаетсяЕНВД()

// Процедура выполняет копирование табличной части заказа поставщику в документ.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, которую необходимо заполнить.
//
Процедура СкопироватьТабличнуюЧасть(ТабличнаяЧасть)

	КопироватьТабличнуюЧасть = Ложь;
	Если ЗначениеНеЗаполнено(Сделка) Тогда
		ТекстПредупреждения = "Не выбрана сделка. Заполнение невозможно.";

	ИначеЕсли Не (ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику")) Тогда
		ТекстПредупреждения = "Заполнение не производится для договоров,
		                      |взаиморасчеты по которым ведутся по расчетным документам.";
	Иначе
		КопироватьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не КопироватьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, , Метаданные().Имя);
		Возврат;
	КонецЕсли;

	Если Товары.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		ТабличнаяЧасть.Очистить();
	КонецЕсли;

	Если ТабличнаяЧасть = Товары Тогда
		СкопироватьТовары();
		
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
		СкопироватьВозвратнуюТару();
		
	КонецЕсли;

КонецПроцедуры // СкопироватьТабличнуюЧасть()

// Процедура выполняет заполниение табличной части неполученными ТМЦ по заказу поставщику.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, которую необходимо заполнить.
//
Процедура ЗаполнитьТабличнуюЧастьПоОстаткам(ТабличнаяЧасть)

	ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам;
	ПредставлениеЗаказПоставщику = Метаданные.Документы.ЗаказПоставщику.Представление();

	ЗаполнятьТабличнуюЧасть = Ложь;
	Если ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстПредупреждения = "Не выбран договор. Заполнение невозможно.";

	ИначеЕсли ЗначениеНеЗаполнено(Сделка)
	      Или Не (ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику")
	      Или ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПоставщика")) Тогда
		ТекстПредупреждения = "Не выбран заказ поставщику (счет на оплату).
		                      |Заполнение невозможно.";
	ИначеЕсли Не Сделка.Проведен И Не ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		ТекстПредупреждения = ПредставлениеЗаказПоставщику + " не проведен.
		                     |Заполнение невозможно.";
	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, , Метаданные().Имя);
		Возврат;
	КонецЕсли;

	Если ТабличнаяЧасть.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		ТабличнаяЧасть.Очистить();
	КонецЕсли;

	Если ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		Если ТабличнаяЧасть = Товары Тогда
			СкопироватьТовары();
		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
			СкопироватьВозвратнуюТару();
		ИначеЕсли ТабличнаяЧасть = Услуги Тогда
			СкопироватьУслуги();
		КонецЕсли;
	Иначе
		Если ТабличнаяЧасть = Товары Тогда
			ЗаполнитьТоварыПоОстаткамУпр();
		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
			ЗаполнитьВозвратнуюТаруПоОстаткамУпр();
		ИначеЕсли ТабличнаяЧасть = Услуги Тогда
			ЗаполнитьУслугиПоОстаткамУпр();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоОстаткам()

// Процедура в зависимости от вида поступления определяет тип для выбора СкладаОрдера
//
Процедура УстановитьТипСкладаОрдера()
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		Если ТипЗнч(СкладОрдер)<>Тип("СправочникСсылка.Склады") Тогда
			СкладОрдер = Справочники["Склады"].ПустаяСсылка();
		КонецЕсли;
		ЭлементыФормы.СкладОрдер.Подсказка = "В этом поле необходимо указать склад, на который необходимо оформить поступление товаров.";
	Иначе
		Если ТипЗнч(СкладОрдер)<>Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			СкладОрдер = Документы["ПриходныйОрдерНаТовары"].ПустаяСсылка();
		КонецЕсли;
		ЭлементыФормы.СкладОрдер.Подсказка = "В этом поле необходимо указать приходный ордер, по которому ранее было оформлено поступление товаров.";
	КонецЕсли;

КонецПроцедуры // УстановитьТипСкладаОрдера()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает текущую страницу панели по виду операции документа.
//
Процедура УстановитьТекущуюСтраницуОсновнойПанели()

	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Товары;

КонецПроцедуры // УстановитьТекущуюСтраницуОсновнойПанели()

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	// Колонки налога показываем только Тогда, когда его учитываем.
	Если УчитыватьНДС <> мКолонкиТовары.СтавкаНДС.Видимость Тогда
		УстановитьВидимостьКолонкиТабЧасти( мКолонкиТовары.СтавкаНДС, УчитыватьНДС);
		УстановитьВидимостьКолонкиТабЧасти( мКолонкиУслуги.СтавкаНДС, УчитыватьНДС);
	КонецЕсли;

	Если УчитыватьНДС <> мКолонкиТовары.СуммаНДС.Видимость Тогда
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СуммаНДС, УчитыватьНДС);
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.СуммаНДС, УчитыватьНДС);
		
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.Всего, УчитыватьНДС);
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.Всего, УчитыватьНДС);
	КонецЕсли;

	УстановитьДоступностьКнопкиЗаполнитьИПровести();

	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;

	// Услуги на комиссию не принимаем.
	ВидимостьЗакладкиУслуг = (ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = ВидимостьЗакладкиУслуг;

	ВидимостьПриходногоОрдера = (ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру);

	мКолонкиТовары.ПриходныйОрдер.ИзменятьВидимость         = Истина;
	мКолонкиТовары.ПриходныйОрдер.Видимость                 = ВидимостьПриходногоОрдера;
	мКолонкиТовары.ПриходныйОрдер.ИзменятьВидимость         = ВидимостьПриходногоОрдера;
	мКолонкиВозвратнаяТара.ПриходныйОрдер.ИзменятьВидимость = Истина;
	мКолонкиВозвратнаяТара.ПриходныйОрдер.Видимость         = ВидимостьПриходногоОрдера;
	мКолонкиВозвратнаяТара.ПриходныйОрдер.ИзменятьВидимость = ВидимостьПриходногоОрдера;

	// Доступность пункта меню "Заполнить по приходному ордеру".
	ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьПоПриходномуОрдеру.Доступность         = ВидимостьПриходногоОрдера;
	ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ДобавитьПоПриходномуОрдеру.Доступность          = ВидимостьПриходногоОрдера;
	ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьПоПриходномуОрдеру.Доступность = ВидимостьПриходногоОрдера;
	ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Кнопки.ПодменюЗаполнить.Кнопки.ДобавитьПоПриходномуОрдеру.Доступность  = ВидимостьПриходногоОрдера;

	// Доступность пункта меню "Заполнить по заказу поставщику (счету на оплату)".
	ДоступностьЗаполнитьПоЗаказу = (ДоговорКонтрагента.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам);
	ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ДействиеЗаполнитьПоЗаказуПоставщику.Доступность        = ДоступностьЗаполнитьПоЗаказу;
	ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Кнопки.ПодменюЗаполнить.Кнопки.ДействиеЗаполнитьПоЗаказуПоставщиу.Доступность = ДоступностьЗаполнитьПоЗаказу;
	ЭлементыФормы.КоманднаяПанельУслуг.Кнопки.ПодменюЗаполнить1.Кнопки.ДействиеЗаполнитьПоЗаказуПоставщику.Доступность        = ДоступностьЗаполнитьПоЗаказу;

	ВидимостьРеквизитаПроект(ЭтотОбъект, ЭлементыФормы, "Товары.Проект,Услуги.Проект");

КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает доступность кнопки "Заполнить и провести". Кнопка доступна,
// Если документ - внешний заказ, его дата совпадает с текущей и установлен хотя бы один
// из флагов Авторазмещение или Авторезервирование.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьКнопкиЗаполнитьИПровести()

	ЭлементыФормы.ДействияФормы.Кнопки.ДействиеЗаполнитьИПровести.Доступность = 
	(НачалоДня(Дата) = НачалоДня(ТекущаяДата()));

КонецПроцедуры // УстановитьДоступностьКнопкиЗаполнитьИПровести

// Процедура устанавливает автоотметку незаполненного для тех реквизитов,
// обязательность заполнения которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьАвтоотметку()

	Автоотметка = Ложь;
	
	Если НЕ ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		 ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			АвтоОтметка = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлементыФормы.Сделка.АвтоОтметкаНезаполненного <> Автоотметка Тогда
		ЭлементыФормы.Сделка.АвтоОтметкаНезаполненного = Автоотметка;
	КонецЕсли;

	Если ЭлементыФормы.Сделка.ОтметкаНезаполненного <> Автоотметка И ЗначениеНеЗаполнено(Сделка) Тогда
		ЭлементыФормы.Сделка.ОтметкаНезаполненного     = Автоотметка;
	КонецЕсли;

КонецПроцедуры // УстановитьАвтоотментку()

// Процедура устанавливает автоотметку незаполненного для Склада
Процедура УстановитьАвтоотметкуСклада()

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		Если мСкладИзШапки Тогда
			Автоотметка = мАвтоОтметкаСкладОрдера;
		Иначе
			Автоотметка = мАвтоОтметкаСкладОрдера
			              И (Товары.Количество() > 0 ИЛИ ВозвратнаяТара.Количество() > 0);
		КонецЕсли;

		ЭлементыФормы.СкладОрдер.АвтоотметкаНезаполненного = Автоотметка;

		Если ЭлементыФормы.СкладОрдер.ОтметкаНезаполненного <> Автоотметка И ЗначениеНеЗаполнено(СкладОрдер) Тогда
			ЭлементыФормы.СкладОрдер.ОтметкаНезаполненного = Автоотметка;
		КонецЕсли;
	Иначе
		Автоотметка = Ложь;

		ЭлементыФормы.СкладОрдер.АвтоотметкаНезаполненного = Автоотметка;

		Если ЭлементыФормы.СкладОрдер.ОтметкаНезаполненного <> Автоотметка Тогда
			ЭлементыФормы.СкладОрдер.ОтметкаНезаполненного = Автоотметка;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // УстановитьАвтоотметкуСклада()

// Процедура устанавливает заголовки по выбранному договору для:
// - элементов формы НадписьСделки, НадписьСуммаВзаиморасчетов.
//
// Параметры:
//  Нет.
//
Процедура УстановитьЗаголовкиПоДоговору()

	УстановитьНадписьСделки(ЭтотОбъект, ЭтаФорма, Ложь);
	УстановитьНадписьСуммыВзаиморасчетов(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // УстановитьЗаголовкиПоДоговору()

Процедура УстановитьДоступностьЭлементов()

	Если НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьРедактироватьГрафикОплатПоступлений") Тогда
	
		ЭлементыФормы.ГрафикОплаты.ТолькоПросмотр = Истина;
	
	КонецЕсли; 

КонецПроцедуры
 

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = ФорматСумм(ПолучитьСуммуДокументаСНДС(ЭтотОбъект));
	ЭлементыФормы.ВсегоНДС.Значение = ФорматСумм(ПолучитьНДСДокумента(ЭтотОбъект));

	ВременнаяСтрока = "";

	Если (НЕ ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента))
	   И (ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда

		ВременнаяСтрока = ВременнаяСтрока + ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаДокумента, 
	                                                                               КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
	                                                                               КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
	                                                                               мВалютаРегламентированногоУчета) + ", ";

	КонецЕсли;

	Если НЕ ЗначениеНеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
	Иначе
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;
	
	//ЭлементыФормы.ГрафикОплаты.Колонки.СуммаПлатежа.ТекстПодвала = ?(ГрафикОплаты.Итог("ПроцентОплаты") <> 0, СуммаДокумента/100*ГрафикОплаты.Итог("ПроцентОплаты"),""); 
	

КонецПроцедуры // ОбновитьПодвал()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
 	
	Если ЗначениеЗаполнено(ПараметрОснование) Тогда
		
		Если ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			Если ПараметрОснование.ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.ОтПодотчетника Тогда
				Предупреждение("Поступление можно вводить только на основании приходного ордера от поставщика!");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
	//+++ 21.01.2018 - не открываем форму!
	Если ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ВыплатаБонусовКонтрагентам")
		и Организация.Пустая() тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

	Если (МодифицированДок = Неопределено) Тогда 
		МодифицированДок = Ложь;
	КонецЕсли;
КонецПроцедуры // ПередОткрытием()



// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	яштФормаДокументаПриОткрытии(ЭтотОбъект, ЭтаФорма);
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		Если ЗначениеНеЗаполнено(ПараметрОснование) Тогда
			ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета, "Покупка");
		КонецЕсли;

		РегистрироватьЦеныПоставщика = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РегистрироватьЦеныПоставщика");
		УстановитьНомерДокумента(ЭтотОбъект);

		Если Не ЗначениеНеЗаполнено(ПараметрОснование)
		   И ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			ОтражатьВУправленческомУчете = Истина;
		КонецЕсли;

		Если НЕ ЗначениеНеЗаполнено(ДоговорКонтрагента)
		   И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			ОтражатьВНалоговомУчете = Ложь;
		КонецЕсли;

	КонецЕсли;

	ПроверитьВидПоступленияПередачи(ЭтотОбъект, ЭтаФорма);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("ЕдиницаХранения");

	// Установить ограничение - изменять видимоть колонок для таличной части 
	// "Возвратная тара".
	УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиВозвратнаяТара, СтруктураКолонок);

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("СтавкаНДС");
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("ЕдиницаИзмерения");
	
	УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиТовары, СтруктураКолонок);

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("СтатьяЗатрат");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Сумма");

	УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиУслуги, СтруктураКолонок);
	
	// Заполнить подменю выбора печатных форм.
	СписокМакетов = ЭтотОбъект.ПолучитьСписокПечатныхФорм();
	УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати,
	                                     СписокМакетов,
	                                     Новый Действие("ДействияФормыДействиеВыбратьПечатнуюФормы"));

	// Установить печатную форму по умолчанию.
	УстановитьКнопкуПечати(ЭтотОбъект.Метаданные().Имя, ЭтаФорма, СписокМакетов, мПечатнаяФормаПоУмолчанию);

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидПоступления), ЭтотОбъект, ЭтаФорма);

	// Определить счет-фактуру, введенный на основании этого документа, Если такой 
	// счет-фактура существует.
	ЗаполнитьТекстПроСчетФактуру();

	// Обновить содержание информационных строк.
	СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка, Истина);
	УстановитьЗаголовкиПоДоговору();

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;

	ПриИзмененииОблагаетсяЕНВД();

	// Установить в зависимости от вида поступления тип для выбора СкладаОрдера
	УстановитьТипСкладаОрдера();

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	УстановитьВидимостьСерииНоменклатуры(мКолонкиТовары);

	УстановитьВидимостьОбязательностьСклада(мКолонкиТовары, мКолонкиВозвратнаяТара, ЭлементыФормы.СкладОрдер, "Склад", "Поступление");

	//Запомним автоотметку поля шапки СкладОрдер
	мАвтоОтметкаСкладОрдера = ЭлементыФормы.СкладОрдер.АвтоОтметкаНезаполненного;

	ПриИзмененииОрганизация();
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	
	// Установить доступные элементы формы для открывающего
	УстановитьДоступностьЭлементов();

	// Установим текущую страницу.
	УстановитьТекущуюСтраницуОсновнойПанели();

	ОбновитьМенюКнопкиЗаполнить();
	ПриИзмененииВидаСклада();

	// Установить автоотметку
	УстановитьАвтоотметку();
	УстановитьАвтоотметкуСклада();      
	
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьОграниченныеИзмененияДокументовПриходаПоОТХ") Тогда
		
		НаборЗаписей = РегистрыСведений.ОтсрочкиПлатежейПоставщикам.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		
		ТЗКонтр = НаборЗаписей.Выгрузить();
		ТЗКонтр.Свернуть("Поставщик");
		
		Если ТЗКонтр.Найти(Контрагент,"Поставщик") <> Неопределено Тогда 
		
		    ЭлементыФормы.Товары.Колонки.Склад.Доступность = Ложь;
			ЭлементыФормы.СкладОрдер.Доступность = Ложь;
			
		Иначе
			
			ЭтаФорма.ТолькоПросмотр = Истина;
			
		КонецЕсли;
	
	ИначеЕсли НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьИзменятьДокументыПрихода") Тогда
		
		ЭтаФорма.ТолькоПросмотр = Истина;
		
	КонецЕсли;

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	

 	//БАЛАНС (04.12.2007)                       
 	//
 	мПроведениеИзФормы = Истина;
	
	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 

	ИспользованиеСтатусаПоступленияВозвратаПриОткрытииФормы();
	
	//+++( 09.02.2018 --- по задаче № 40550 - блокировка изменения документа операторами склада (после 1-2 часов!)	
	Если НЕ ЭтоНовый() //повторное открытие...
		и РольДоступна("Кладовщик") и ОтражатьВБухгалтерскомУчете //уже [v]БУ включена, значит он выгружен в БП...
		//в течении 2х часов - ещё можно что-то менять в документе с [v]БУ...(для задания на отгрузку/перемещения)
		и (ТекущаяДата() - ссылка.Дата)>2*3600 
	тогда  
		
		ЭтаФорма.ТолькоПросмотр = истина;
		Предупреждение("    Документ ЗАКРЫТ от измений, так как
						|   документ уже перенесен в бухгалтерию!
						|
						|Для изменения документа - позвоните в бухгалтерию.
						|
						|Бухгалтерия должна снять галку [v]БУ в этом документе
						|и открыть документ в бухгалтерии для повторной загрузки...");
	КонецЕсли;
	//+++)
	
КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Пересчитаем сумму взаиморасчетов.
	Если КурсВзаиморасчетов = 0 Тогда
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = 0;
	Иначе
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = ФорматСумм(ПересчитатьИзВалютыВВалюту(ПолучитьСуммуДокументаСНДС(ЭтотОбъект),  
		                                             ВалютаДокумента, мТекущаяВалютаВзаиморасчетов,
		                                             КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета) , КурсВзаиморасчетов,
		                                             КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов));
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьКурса.Заголовок = "   ( " + ПолучитьИнформациюКурсаВалютыСтрокой(мТекущаяВалютаВзаиморасчетов, 
	                                                                                           КурсВзаиморасчетов,
	                                                                                           КратностьВзаиморасчетов,
	                                                                                           мВалютаРегламентированногоУчета) + " )";

	ОбновитьПодвал();

	// Подсчитаем количество строк в табличных частях.
	СтраницаПанели = ЭлементыФормы.ОсновнаяПанель.Страницы;
	СтраницаПанели.Тара.Заголовок = "Тара (" + ДокументОбъект.ВозвратнаяТара.Количество() + " поз.)";
	СтраницаПанели.Товары.Заголовок = "Товары ("      + ДокументОбъект.Товары.Количество() + " поз.)";
	СтраницаПанели.Услуги.Заголовок = "Услуги ("      + ДокументОбъект.Услуги.Количество() + " поз.)";
	СтраницаПанели.АдресаХранения.Заголовок = "Адреса ("      + ДокументОбъект.ТоварыАдресноеХранение.Количество() + " поз.)";

	//Адиянов<<< 16.06.2016  
	Если ДокументОбъект.Поступления.Количество()>0 Тогда
		СтраницаПанели.Поступления.Видимость = Истина;
		СтраницаПанели.Поступления.Заголовок = "Поступления (" + ДокументОбъект.Поступления.Количество() + " поз.)";
	Иначе 
		СтраницаПанели.Поступления.Видимость = РольДоступна("ПравоЗавершенияРаботыПользователей");
		СтраницаПанели.Поступления.Заголовок = "Поступления";
	КонецЕсли;	
	//только для работников IT-отдела - доступ открыт 
	ЭлементыФормы.Поступления.ТолькоПросмотр = НЕ РольДоступна("ПравоЗавершенияРаботыПользователей");
	//Адиянов>>> 16.06.2016
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);

		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
			ОбработкаПодбора(ВозвратнаяТара, ЗначениеВыбора);
			
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьУслуги" Тогда
			ОбработкаПодбора(Услуги, ЗначениеВыбора);
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Обработчик внешнего события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	Если глТорговоеОборудование <> Неопределено Тогда
		Если Событие = "BarCodeValue" Тогда

			ИмяТекущейСтраницы = ЭтаФорма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
			Если ИмяТекущейСтраницы = "Товары" Тогда

				Команда         = "ПодборВТабличнуюЧастьТовары";
				Валюта          = ВалютаДокумента;
				ИмяТабличнойЧасти = "Товары";

			ИначеЕсли ИмяТекущейСтраницы = "Услуги" Тогда

				Команда         = "ПодборВТабличнуюЧастьУслуги";
				Валюта          = ВалютаДокумента;
				ИмяТабличнойЧасти = "Услуги";

			ИначеЕсли ИмяТекущейСтраницы = "Тара" Тогда

				Если ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
					Предупреждение("Не выбран договор контрагента!");
					Возврат;
				ИначеЕсли ЗначениеНеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
					Предупреждение("Не выбрана валюта взаиморасчетов по договору!");
					Возврат;
				КонецЕсли;

				Команда           = "ПодборВТабличнуюЧастьВозвратнаяТара";
				Валюта = ДоговорКонтрагента.ВалютаВзаиморасчетов;
				ИмяТабличнойЧасти = "ВозвратнаяТара";

			Иначе

				// Ничего не надо делать
				Возврат;

			КонецЕсли;

			ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);

			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("Команда"              , Команда);
			СтруктураПараметров.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
			СтруктураПараметров.Вставить("ТипЦен"               , ТипЦен);
			СтруктураПараметров.Вставить("Контрагент"           , Контрагент);
			СтруктураПараметров.Вставить("СпособЗаполненияЦен"  , Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов);
			СтруктураПараметров.Вставить("ВалютаЦены"           , Валюта);
			СтруктураПараметров.Вставить("ИмяТабличнойЧасти"    , ИмяТабличнойЧасти);

			глТорговоеОборудование.ОбработатьВнешнееСобытиеОтСканераДляФормы(ЭтаФорма, ЭтотОбъект, СтруктураПараметров, Данные);

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ВнешнееСобытие()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(Строка(ВидПоступления), ЭтотОбъект, ЭтаФорма);
	
	Если (ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ПеределыватьДопЗатратыВПеремещении")) Тогда 
		СписокДопРасходов = яштПартии.ПолучитьСписокДопРасходов(Ссылка); 
		Если СписокДопРасходов.Количество() > 0 Тогда 
			Ответ = Вопрос("У данного поступления есть доп. расходы. Обработать их ?", РежимДиалогаВопрос.ДаНетОтмена);
			Если (Ответ = КодВозвратаДиалога.Да) Тогда 
				// Обработка доп. расходов
				Форма = ПолучитьФорму("ФормаРаботыСДопРасходами");
				Форма.СсылкаНаОбъект = Ссылка;
				СписокДопРасходовВх = Новый СписокЗначений;
				СписокДопРасходовВх.ЗагрузитьЗначения(СписокДопРасходов);
				Форма.СписокДопРасходовВх = СписокДопРасходовВх;
				Форма.ОткрытьМодально();
				МодифицированДок = Ложь;
			ИначеЕсли (Ответ = КодВозвратаДиалога.Отмена) Тогда 
				Отказ = Истина;
				Возврат;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;

	//08.09.17 Смирнов если это поступление от китайцев и диски литые тогда создаем перемещения на 2 диска по каждым SKU, для проверки макс нагрузки
	Если ДоговорКонтрагента.ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоКоду("840") и проведен и Дата > Дата("20170913") 
		и (Подразделение = Справочники.Подразделения.НайтиПоКоду("00005") или Подразделение = Справочники.Подразделения.ПустаяСсылка()) тогда
		Запрос = новый Запрос;
		Склад8000тест = Справочники.Склады.НайтиПоКоду("02333");

		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.УстановитьПараметр("НоменклатурнаяГруппаЛитые",Справочники.НоменклатурныеГруппы.НайтиПоКоду("00026")); //литые
		Запрос.УстановитьПараметр("Склад8000тест",Склад8000тест); //литые

				Запрос.Текст="ВЫБРАТЬ
		             |	ПоступлениеТоваровУслугТовары.Номенклатура,
		             |	СУММА(ПоступлениеТоваровУслугТовары.Количество) КАК Количество,
		             |	СУММА(ПоступлениеТоваровУслугТовары.КоличествоМест) КАК КоличествоМест,
		             |	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
		             |	ПоступлениеТоваровУслугТовары.ЕдиницаИзмеренияМест,
		             |	ПоступлениеТоваровУслугТовары.Коэффициент
		             |ПОМЕСТИТЬ вт
		             |ИЗ
		             |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		             |ГДЕ
		             |	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
		             |	И ПоступлениеТоваровУслугТовары.Номенклатура.НоменклатурнаяГруппа = &НоменклатурнаяГруппаЛитые
		             |	И ПоступлениеТоваровУслугТовары.Склад = &Склад8000тест
		             |
		             |СГРУППИРОВАТЬ ПО
		             |	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
		             |	ПоступлениеТоваровУслугТовары.Номенклатура,
		             |	ПоступлениеТоваровУслугТовары.ЕдиницаИзмеренияМест,
		             |	ПоступлениеТоваровУслугТовары.Коэффициент
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ ПЕРВЫЕ 1
		             |	ПеремещениеТоваров.Ссылка
		             |ПОМЕСТИТЬ втПеремещенияПоПоступлению
		             |ИЗ
		             |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		             |ГДЕ
		             |	ПеремещениеТоваров.ДокументОснование = &Ссылка
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	А.Перемещение,
		             |	А.Номенклатура,
		             |	А.Количество,
		             |	А.КоличествоМест,
		             |	А.ЕдиницаИзмерения,
		             |	А.ЕдиницаИзмеренияМест,
		             |	А.Коэффициент
		             |ИЗ
		             |	(ВЫБРАТЬ
		             |		втПеремещенияПоПоступлению.Ссылка КАК Перемещение,
		             |		вт.Номенклатура КАК Номенклатура,
		             |		вт.Количество КАК Количество,
		             |		вт.КоличествоМест КАК КоличествоМест,
		             |		вт.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		             |		вт.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
		             |		вт.Коэффициент КАК Коэффициент
		             |	ИЗ
		             |		вт КАК вт
		             |			ЛЕВОЕ СОЕДИНЕНИЕ втПеремещенияПоПоступлению КАК втПеремещенияПоПоступлению
		             |			ПО (ИСТИНА)) КАК А
		             |ГДЕ
		             |	А.Перемещение ЕСТЬ NULL 
		             |	И А.Количество >= 2";
					 Рез = Запрос.Выполнить().Выбрать();
					 Если Рез.Количество()>0 тогда //создаем перемещения и задачи
						 ДокументПеремещение = Документы.ПеремещениеТоваров.СоздатьДокумент();
						 ДокументПеремещение.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
						 ДокументПеремещение.Дата = ТекущаяДата();
						 ДокументПеремещение.ДокументОснование = Ссылка;
						 ДокументПеремещение.Организация = Справочники.Организации.НайтиПоКоду("00001");
						 ДокументПеремещение.ОтражатьВУправленческомУчете = истина;
						 ДокументПеремещение.Подразделение = Подразделение;
						 ДокументПеремещение.СкладОтправитель = Склад8000тест; //8000 тест
						 ДокументПеремещение.СкладПолучатель = Справочники.Склады.НайтиПоКоду("02332");  //Ангар-ремонт тест
						 
						 ПеремТовары = ДокументПеремещение.Товары;
						 Пока Рез.Следующий() Цикл
							 нстр = ПеремТовары.Добавить();
							 ЗаполнитьЗначенияСвойств(нстр,Рез);
							 нстр.Количество = 2;
							 нстр.КоличествоМест = 2;
						 КонецЦикла;
						 ДокументПеремещение.Записать();
						 Сообщить("Создано " + ДокументПеремещение.Ссылка);
						 //Создадим задачи
						 Задача1 = Задачи.ЗадачиПользователя.СоздатьЗадачу();
						 Задача1.Дата = ТекущаяДата();
						 Задача1.Исполнитель = Справочники.Пользователи.НайтиПоКоду("Мурашов М.А.");
						 Задача1.Постановщик = глТекущийПользователь;
						 Задача1.Наименование = "Создано перемещение для испытания нагрузки дисков. "+ ДокументПеремещение.Ссылка;
						 Задача1.Описание = "Создано перемещение для испытания нагрузки дисков. "+ ДокументПеремещение.Ссылка;
						 Задача1.Объект = Ссылка;
						 //Задача1.Товары
						 Задача1.Записать();
						 Задача2 = Задача1.Скопировать();
						 Задача2.Исполнитель = Справочники.Пользователи.НайтиПоКоду("Глущук Е.Ю.");
						 Задача2.Записать();
						 
					 КонецЕсли;
	КонецЕсли;
	//Смирнов
	
	//+++( 06.06.2014 - фиксация поступления в Заказе поставщика и покупателя...
	Если константы.ИспользоватьОстаткиСтороннихПоставщиков.Получить() Тогда
		Если ЗначениеЗаполнено(ЭтотОбъект.Сделка) и ТипЗнч(ЭтотОбъект.Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			// проверка закрытия заказа покупателя... статус = отгружен / отгружен частично
			   Запрос = Новый Запрос;
			   Запрос.Текст = "ВЫБРАТЬ
			   |	ЗаказыПоставщикамОстатки.Номенклатура,
			   |	ЗаказыПоставщикамОстатки.КоличествоОстаток
			   |ИЗ
			   |	РегистрНакопления.ЗаказыПоставщикам.Остатки(&Дата, ЗаказПоставщику = &ЗаказПоставщику) КАК ЗаказыПоставщикамОстатки";
			   
			   Запрос.УстановитьПараметр("Дата", ЭтотОбъект.Дата+1 );
			   Запрос.УстановитьПараметр("ЗаказПоставщику", ЭтотОбъект.Сделка);
			   Результат = Запрос.Выполнить();
			   выборка = Результат.выгрузить();
			   
			   //----------изменение статуса заказа поставщику---------------------
			   закПостОб = ЭтотОбъект.Сделка.ПолучитьОбъект();
			   
			   Если выборка.Количество()=0 Тогда //ВСЕ отгружено поставщиков!
				   закПостОб.статус = перечисления.СтатусыЗаказов.Получен;
			   Иначе // еще не все еще поступило
				   закПостОб.статус = перечисления.СтатусыЗаказов.ПолученЧастично;
			   КонецЕсли;
			   
   				//все строка отмененные - удаляются...
			сч=0;
			пока сч<закПостОб.Товары.Количество() цикл
				стр1 = закПостОб.Товары[сч];
				//-------------------отмененные позиции останутся только в заказе поставщика?!------------------
					Если стр1.статус = перечисления.СтатусыСтрокЗаказа.Отменен Тогда
						   закПостОб.статус = перечисления.СтатусыЗаказов.ПолученЧастично;
			 		Иначе 
						Если выборка.найти(стр1.Номенклатура, "Номенклатура")=неопределено Тогда // нет товара в регистре ЗаказахПоставщика...
				          	стр1.статус = перечисления.СтатусыСтрокЗаказа.Получен;
						Иначе
						   	стр1.статус = перечисления.СтатусыСтрокЗаказа.Подтвержден;
						КонецЕсли;
					КонецЕсли;
				сч = сч + 1;
			КонецЦикла;

			   закПостОб.ОбменДанными.Загрузка = истина;//+++ в режиме обмена!
			   закПостОб.Записать();
			   закПостОб.ОбменДанными.Загрузка = ложь;//+++ в режиме обмена!
	
			   
			   //все заказы покупателя
			  // табЗнач = закПостОб.товары.выгрузить();
			   табЗнач = ЭтотОбъект.товары.выгрузить();
			   табЗнач.свернуть("ЗаказПокупателя", "Количество");
			   
			   Если табЗнач.Количество()>0 Тогда
				  Для каждого ЗакПок из табЗнач Цикл
			//-------------- синхронизация заказов покупателя ----------------------------
					Если ЗначениеЗаполнено(ЗакПок.ЗаказПокупателя) Тогда   
				    ЗакПокОб = ЗакПок.ЗаказПокупателя.получитьОбъект();
					// сразу ?!
					ЗакПокОб.Статус =  закПостОб.статус;
					
						//все строка отмененные - удаляются...
						сч=0;
						пока сч<ЗакПокОб.Товары.Количество() цикл
							стр1 = ЗакПокОб.Товары[сч];
							Если ЗначениеЗаполнено(стр1.Размещение) 
								и ЗначениеЗаполнено(ЭтотОбъект.Сделка)
								и стр1.Размещение = ЭтотОбъект.Сделка Тогда // вот тут... перекрестная ссылка может быть неправильной!
								Если стр1.статус = перечисления.СтатусыСтрокЗаказа.Отменен Тогда
									ЗакПокОб.Товары.Удалить(сч); // удаляется!
								Иначе 
									Если выборка.найти(стр1.Номенклатура, "Номенклатура")=неопределено Тогда // только Если получен именно этот товар
							          	стр1.статус = перечисления.СтатусыСтрокЗаказа.Получен;
									Иначе
						   				стр1.статус = перечисления.СтатусыСтрокЗаказа.Подтвержден;
									КонецЕсли;
								сч = сч + 1;
								КонецЕсли;
							 Иначе
								сч = сч + 1;
							КонецЕсли; // это из чужого заказа...
						КонецЦикла;
						
					//доп.проверка что все или не все пришло
					табТовЗакПок = ЗакПокОб.Товары.выгрузить();
					табТовЗакПок.Свернуть("Статус", "Количество");
					
					Если табТовЗакПок.Количество()=1 Тогда
						ЗакПокОб.Статус = перечисления.СтатусыЗаказов.Получен; // товар весь получен
					иначе
						ЗакПокОб.Статус = перечисления.СтатусыЗаказов.ПолученЧастично; // товар не весь получен, а тот что пришел... куда уйдёт ?
					КонецЕсли;
					
					Если НЕ ЗакПокОб.пометкаУдаления Тогда
						
						//Если ЗакПокОб.Статус = перечисления.СтатусыЗаказов.Получен тогда
						ЗакПокОб.проверен = истина; // проделиваем даже в минус!
						//КонецЕсли;
						
					    ЗакПокОб.ОбменДанными.Загрузка = истина;//+++ в режиме обмена!!!
						ЗакПокОб.Записать(); 			       //просто записать без перепроведения!!!
						ЗакПокОб.ОбменДанными.Загрузка = ложь;//+++ в режиме обмена!!!
						
					КонецЕсли;	
					   
		   			КонецЕсли;
		    //-------------- синхронизация заказов покупателя ----------------------------
			      КонецЦикла;
			   КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
    //+++)
	
	 	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта меню "Заполнить по остаткам" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоЗаказуПоставщику(Кнопка)

	ЗаполнитьТабличнуюЧастьПоОстаткам(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнитьПоОстаткам()

// Процедура вызывается при выборе пункта меню "Заполнить по приходному ордеру" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоПриходномуОрдеру(Кнопка)

	Если ЗначениеНеЗаполнено(СкладОрдер) Тогда
		Предупреждение("Не выбран приходный ордер!");
		Возврат;
	КонецЕсли;

	Если Товары.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		Товары.Очистить();

	КонецЕсли;

	ЗаполнитьТоварыПоОснованиюУпр(СкладОрдер, Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеСкопироватьСостав()

// Процедура вызывается при выборе пункта меню "Добавить по приходному ордеру" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыДействиеДобавитьПоПриходномуОрдеру(Кнопка)
	
	ФормаОрдера = Документы.ПриходныйОрдерНаТовары.ПолучитьФормуВыбора();
	ФормаОрдера.Заголовок = "Выберите приходный ордер для заполнения документа поступления";
	ФормаОрдера.РежимВыбора = Истина;
	ПриходныйОрдрер = ФормаОрдера.ОткрытьМодально();

	Если ЗначениеНеЗаполнено(ПриходныйОрдрер) Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьТоварыПоОснованиюУпр(ПриходныйОрдрер, Товары);

КонецПроцедуры

//+++( 27.12.2012 
////- старая процедура - без изменений
//
// Процедура вызывается при выборе пункта "Из терминала сбора данных"
// меню кнопки "Заполнить" командной панели табличного поля "Товары"
//
//Процедура КоманднаяПанельТоварыИзТерминалаСбораДанных(Кнопка)
//	Перем Ответ, Данные, ВремТовар, ВремЕдиница;
//	
//	Если глТорговоеОборудование = Неопределено Тогда
//		Предупреждение("Торговое оборудование не подключено");
//	ИначеЕсли глТорговоеОборудование.млТерминал.Количество() = 0 Тогда
//		Предупреждение("Терминал сбора данных не подключен");
//	Иначе
//		Если глТорговоеОборудование.млТерминал.Количество() = 1 Тогда

//			РезультатВыбора = глТорговоеОборудование.млТерминал[0];

//		Иначе

//			СписокТерминаловСбораДанных = Новый СписокЗначений;
//			Для Каждого ТерминалСбораДанных из глТорговоеОборудование.млТерминал Цикл
//				СписокТерминаловСбораДанных.Добавить(ТерминалСбораДанных, ТерминалСбораДанных.Модель);
//			КонецЦикла;
//			РезультатВыбора = СписокТерминаловСбораДанных.ВыбратьЭлемент("Выберите терминал сбора данных");
//			Если РезультатВыбора = Неопределено Тогда
//				Возврат;
//			КонецЕсли;
//			РезультатВыбора = РезультатВыбора.Значение;

//		КонецЕсли;

//		Ответ = глТорговоеОборудование.ЗагрузитьДанныеИзТерминалаСбораДанных(РезультатВыбора, Данные);
//		Если Не ПустаяСтрока(Ответ) Тогда
//			Предупреждение(Ответ);
//		ИначеЕсли Данные.Количество() = 0 Тогда
//			Предупреждение("Из терминала сбора данных не загружено ни одного товара");
//		Иначе
//			Для Каждого СтрокаДанных Из Данные Цикл
//				Если глТорговоеОборудование.ПолучитьТоварПоШтрихкоду(СтрокаДанных.Штрихкод, ВремТовар) Тогда

//					Если ВремТовар = Неопределено
//					 Или ВремТовар.Количество() = 0 Тогда
//						Продолжить;
//					Иначе
//						ВремТовар = ВремТовар[0];
//					КонецЕсли;

//					// Ищем выбранную позицию в таблице подобранной номенклатуры.
//					//  Если найдем - увеличим количество; не найдем - добавим новую строку.
//					СтруктураОтбора = Новый Структура();
//					СтруктураОтбора.Вставить("ЕдиницаИзмерения", ВремТовар.ЕдиницаИзмерения);
//					СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", ВремТовар.ХарактеристикаНоменклатуры);
//					СтруктураОтбора.Вставить("СерияНоменклатуры", ВремТовар.СерияНоменклатуры);
//					СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(Товары, СтруктураОтбора);
//					Если СтрокаТабличнойЧасти <> Неопределено Тогда

//						// Нашли, увеличиваем количество в первой найденной строке.
//						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаДанных.Количество;

//					Иначе

//						// Не нашли - добавляем новую строку.
//						СтрокаТабличнойЧасти = Товары.Добавить();
//						СтрокаТабличнойЧасти.Номенклатура               = ВремТовар.Номенклатура;
//						СтрокаТабличнойЧасти.ЕдиницаИзмерения           = ВремТовар.ЕдиницаИзмерения;
//						СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = ВремТовар.ХарактеристикаНоменклатуры;
//						СтрокаТабличнойЧасти.СерияНоменклатуры          = ВремТовар.СерияНоменклатуры;
//						СтрокаТабличнойЧасти.Коэффициент                = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
//						СтрокаТабличнойЧасти.Количество                 = СтрокаДанных.Количество;

//						// Выполнить общие действия для всех документов при изменении номенклатуры.
//						ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

//					КонецЕсли;

//					// Рассчитать реквизиты табличной части.
//					РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
//					РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

//					ЭлементыФормы.Товары.ТекущаяСтрока  = СтрокаТабличнойЧасти;
//					ЭлементыФормы.Товары.ТекущаяКолонка = мКолонкиТовары["Количество"];
//				КонецЕсли;
//			КонецЦикла;

//			Ответ = Вопрос("Очистить память терминала сбора данных?", РежимДиалогаВопрос.ДаНет);
//			Если Ответ = КодВозвратаДиалога.Да Тогда
//				Ответ = глТорговоеОборудование.ОчиститьПамятьТерминалаСбораДанных(РезультатВыбора);
//				Если Не ПустаяСтрока(Ответ) Тогда
//					Предупреждение(Ответ);
//				КонецЕсли;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;

//КонецПроцедуры

////- новая процедура - ищет по Коду товара
// Процедура вызывается при выборе пункта "Из терминала сбора данных"
// меню кнопки "Заполнить" командной панели табличного поля "Товары"
//
Процедура КоманднаяПанельТоварыИзТерминалаСбораДанных(Кнопка)
	Перем Ответ, Данные, ВремТовар, ВремЕдиница;
	
	//+++ 09.01.2012
	Ответ = Вопрос("Загрузка из ТСД предназначена для работы в табличной части ""Адреса хранения"". Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				возврат;
			КонецЕсли;	
	
	
	
	Если глТорговоеОборудование = Неопределено Тогда
		Предупреждение("Торговое оборудование не подключено");
	ИначеЕсли глТорговоеОборудование.млТерминал.Количество() = 0 Тогда
		Предупреждение("Терминал сбора данных не подключен");
	Иначе
		Если глТорговоеОборудование.млТерминал.Количество() = 1 Тогда

			РезультатВыбора = глТорговоеОборудование.млТерминал[0];

		Иначе

			СписокТерминаловСбораДанных = Новый СписокЗначений;
			Для Каждого ТерминалСбораДанных из глТорговоеОборудование.млТерминал Цикл
				СписокТерминаловСбораДанных.Добавить(ТерминалСбораДанных, ТерминалСбораДанных.Модель);
			КонецЦикла;
			РезультатВыбора = СписокТерминаловСбораДанных.ВыбратьЭлемент("Выберите терминал сбора данных");
			Если РезультатВыбора = Неопределено Тогда
				Возврат;
			КонецЕсли;
			РезультатВыбора = РезультатВыбора.Значение;

		КонецЕсли;

		Ответ = глТорговоеОборудование.ЗагрузитьДанныеИзТерминалаСбораДанных(РезультатВыбора, Данные);
		Если Не ПустаяСтрока(Ответ) Тогда
			Предупреждение(Ответ);
		ИначеЕсли Данные.Количество() = 0 Тогда
			Предупреждение("Из терминала сбора данных не загружено ни одного товара");
		Иначе
			Для Каждого СтрокаДанных Из Данные Цикл
				
				//+++ 27.12.2012 поиск по КОДУ товара, а не штрихкоду!!!
				//Если глТорговоеОборудование.ПолучитьТоварПоШтрихкоду(СтрокаДанных.Штрихкод, ВремТовар) Тогда
				ВремТовар = Справочники.Номенклатура.НайтиПоКоду(СтрокаДанных.Код);  //+++
				
				Если ЗначениеЗаполнено(ВремТовар) Тогда
					
				//+++ 27.12.2012
				//Если ВремТовар = Неопределено
					// Или ВремТовар.Количество() = 0 Тогда
					//	Продолжить;
					//Иначе
					//	ВремТовар = ВремТовар[0];
					//КонецЕсли;

					// Ищем выбранную позицию в таблице подобранной номенклатуры.
					//  Если найдем - увеличим количество; не найдем - добавим новую строку.
					СтруктураОтбора = Новый Структура();
					СтруктураОтбора.Вставить("Номенклатура", ВремТовар);
					СтруктураОтбора.Вставить("ЕдиницаИзмерения", ВремТовар.ЕдиницаХраненияОстатков);
					//СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", ВремТовар.ХарактеристикаНоменклатуры);
					//СтруктураОтбора.Вставить("СерияНоменклатуры", ВремТовар.СерияНоменклатуры);
					СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(Товары, СтруктураОтбора);
					Если СтрокаТабличнойЧасти <> Неопределено Тогда
 						// Нашли, увеличиваем количество в первой найденной строке.
						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаДанных.Количество;
 					Иначе
 						// Не нашли - добавляем новую строку.
						СтрокаТабличнойЧасти = Товары.Добавить();
						СтрокаТабличнойЧасти.Номенклатура               = ВремТовар;  //+++
						СтрокаТабличнойЧасти.ЕдиницаИзмерения           = ВремТовар.ЕдиницаХраненияОстатков;
						//СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = ВремТовар.ХарактеристикаНоменклатуры;
						//СтрокаТабличнойЧасти.СерияНоменклатуры          = ВремТовар.СерияНоменклатуры;
						СтрокаТабличнойЧасти.Коэффициент                = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
						СтрокаТабличнойЧасти.Количество                 = СтрокаДанных.Количество;

						// Выполнить общие действия для всех документов при изменении номенклатуры.
						ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

					КонецЕсли;
                  //+++)
				  
					// Рассчитать реквизиты табличной части.
					РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
					РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

					ЭлементыФормы.Товары.ТекущаяСтрока  = СтрокаТабличнойЧасти;
					ЭлементыФормы.Товары.ТекущаяКолонка = мКолонкиТовары["Количество"];
				КонецЕсли;
			КонецЦикла;

			Ответ = Вопрос("Очистить память терминала сбора данных?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Ответ = глТорговоеОборудование.ОчиститьПамятьТерминалаСбораДанных(РезультатВыбора);
				Если Не ПустаяСтрока(Ответ) Тогда
					Предупреждение(Ответ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//// +++ 27.12.2012 
// Процедура вызывается при выборе пункта "Из терминала сбора данных"
// меню кнопки "Заполнить" командной панели табличного поля "ТоварыАдресноеХранение"
//
Процедура КоманднаяАдресноеХранениеИзТерминалаСбораДанных(Кнопка)
	Перем Ответ, Данные, ВремТовар, ВремЕдиница;
	
		//+++ переподключение принудительное - всегда!
			глТорговоеОборудование.ОтключитьОборудование();
		    глТорговоеОборудование.ПодключитьОборудование();
 	
	Если глТорговоеОборудование = Неопределено Тогда
		Предупреждение("Торговое оборудование не подключено.");
	ИначеЕсли глТорговоеОборудование.млТерминал.Количество() = 0 Тогда
		Предупреждение("Терминал сбора данных не подключен.");
	Иначе
		Если глТорговоеОборудование.млТерминал.Количество() = 1 Тогда

			РезультатВыбора = глТорговоеОборудование.млТерминал[0];

		Иначе

			СписокТерминаловСбораДанных = Новый СписокЗначений;
			Для Каждого ТерминалСбораДанных из глТорговоеОборудование.млТерминал Цикл
				СписокТерминаловСбораДанных.Добавить(ТерминалСбораДанных, ТерминалСбораДанных.Модель);
			КонецЦикла;
			РезультатВыбора = СписокТерминаловСбораДанных.ВыбратьЭлемент("Выберите терминал сбора данных");
			Если РезультатВыбора = Неопределено Тогда
				Возврат;
			КонецЕсли;
			РезультатВыбора = РезультатВыбора.Значение;

		КонецЕсли;
		
		///Плотников Терминалы Моторолла
		
		Если РезультатВыбора.Модель = Справочники.ТорговоеОборудование.НайтиПоНаименованию("КПК под управлением «АТОЛ: Mobile Logistics»") Тогда
			
			Ответ = глТорговоеОборудование.ТСДЗагрузитьДанные(Данные);
			
					
		Если Не ПустаяСтрока(Ответ) Тогда
			Предупреждение(Ответ);
		ИначеЕсли Данные.Количество() = 0 Тогда
			Предупреждение("Из терминала сбора данных не загружено ни одного товара...");
		Иначе
			
			i=0;    
			пустойСклад = справочники.Склады.ПустаяСсылка();
	//--------------------------------------------------------------------------------------------------------------------------		
			Для Каждого СтрокаДанных Из Данные Цикл
				i=i+1;
				
				Если стрДлина(СтрокаДанных.штриХкод)=13 тогда //16.11.2015  - поиск по штрихКоду
				    если лев(СтрокаДанных.штриХкод,5) = "05000" тогда // "наш" код = префикс + код товара + КС
				        Код = сред(СтрокаДанных.штриХкод, 6,7);
						ВремТовар = Справочники.Номенклатура.НайтиПоКоду(Код);  //+++
					иначе	
						ТаблицаВладельцев = новый ТаблицаЗначений;
				       	Если глТорговоеОборудование.ПолучитьТоварПоШтрихкоду(СтрокаДанных.штриХкод, ТаблицаВладельцев) тогда// пытаемся найти в регСв.ШК!
							ВремТовар = ТаблицаВладельцев[0].Номенклатура;
						иначе
							ВремТовар = справочники.Номенклатура.ПустаяСсылка();
						КонецЕсли;
 				    КонецЕсли; 
			    иначе
				    АдресХ = ЛЕВ(СтрокаДанных.штриХкод,7);
				КонецЕсли;
				
				Если стрДлина(СтрокаДанных.Ячейка)>6 и лев(СтрокаДанных.Ячейка,1) = "1" тогда // "обрезаем" префикс для 5000
				    АдресХ = сред(СтрокаДанных.Ячейка,2,6);  
			    Иначе //как есть но в поле Адреса
				    АдресХ = лев(СтрокаДанных.Ячейка,7);
			    КонецЕсли;

				i=i+1;

				 //09.11.2015 - Аксессуары
				 Если НЕ ЗначениеЗаполнено(ВремТовар) тогда
					ВремТоварТабл = новый ТаблицаЗначений;
					глТорговоеОборудование.ПолучитьТоварПоШтрихкоду(СтрокаДанных.Штрихкод, ВремТоварТабл);
					Если ВремТоварТабл.Количество()>0 тогда
						ВремТовар = ВремТоварТабл[0].Номенклатура;
					КонецЕсли;	
					#Если Клиент тогда 
					Если ЗначениеЗаполнено(ВремТовар) тогда 
						Сообщить("По ШК: "+СокрЛП(СтрокаДанных.Штрихкод)+" Найден товар: "+строка(ВремТовар.Код)+" "+строка(ВремТовар), СтатусСообщения.Информация);
					иначе	
						Сообщить("По ШК: "+СокрЛП(СтрокаДанных.Штрихкод)+" НЕ Найден товар!", СтатусСообщения.Внимание);
					КонецЕсли;	
					#КонецЕсли	
				КонецЕсли;	
				
				Если ЗначениеЗаполнено(ВремТовар) Тогда
					
					
					//+++ 24.12.2012 - 14.07.2017 - для загрузки по ШК склада!
 					СтруктураОтбора = Новый Структура();
					СтруктураОтбора.Вставить("Номенклатура", ВремТовар);
					Склад = справочники.Склады.ПустаяСсылка();
					Адрес = справочники.АдресаХранения.ПустаяСсылка();
					Если лев(АдресХ,2)="99" и стрДлина(АдресХ)=7 тогда 
					АдресХ = прав(АдресХ,5);
					Склад = справочники.Склады.НайтиПоКоду(АдресХ);	
						Если НЕ ЗначениеЗаполнено(Склад) Тогда
						сообщить(строка(i)+" строка - Не найден Склад по коду: "+АдресХ, СтатусСообщения.Внимание);
						Склад = справочники.Склады.ПустаяСсылка();
						КонецЕсли;	
					СтруктураОтбора.Вставить("Склад", Склад);
					СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(Товары, СтруктураОтбора);  //+++ здесь ТОВАРЫ! +++
					Иначе
					Адрес = справочники.АдресаХранения.НайтиПоКоду(АдресХ);
						Если НЕ ЗначениеЗаполнено(Адрес) Тогда
						сообщить(строка(i)+" строка - Не найден Адрес по коду: "+АдресХ, СтатусСообщения.Внимание);
						Адрес = справочники.АдресаХранения.ПустаяСсылка();
						КонецЕсли;
					СтруктураОтбора.Вставить("АдресХранения",Адрес);
					СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТоварыАдресноеХранение, СтруктураОтбора);  //+++
					КонецЕсли;
					
					
					Если СтрокаТабличнойЧасти <> Неопределено Тогда
 						// Нашли, увеличиваем количество в первой найденной строке.
						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаДанных.Количество;
					Иначе
						
 						// Не нашли - добавляем новую строку.
						Если Адрес.Пустая() тогда
						СтрокаТабличнойЧасти = Товары.Добавить();
						иначе
						СтрокаТабличнойЧасти = ТоварыАдресноеХранение.Добавить();
						СтрокаТабличнойЧасти.АдресХранения			= Адрес;
						КонецЕсли;
					
						СтрокаТабличнойЧасти.Номенклатура           = ВремТовар;  //+++
						СтрокаТабличнойЧасти.Количество             = СтрокаДанных.Количество;
						СтрокаТабличнойЧасти.Склад					= Склад;
						
						// Выполнить общие действия для всех документов при изменении номенклатуры.
						ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

						Если Адрес.Пустая() тогда //14.07.2017 - для товаров нужны ставки НДС и цены
						ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект); 
						СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
						                                         Контрагент, ТипЦен, ДоговорКонтрагента, Дата,ВалютаДокумента, УчитыватьНДС,СуммаВключаетНДС);
						ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета); 
 						// Рассчитываем реквизиты табличной части.
						РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
						РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
						КонецЕсли;
					
					КонецЕсли;

					// Рассчитать реквизиты табличной части.
					//РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
					//РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

					ЭлементыФормы.ТоварыАдресноеХранение.ТекущаяСтрока  = СтрокаТабличнойЧасти;
				КонецЕсли;
			КонецЦикла;

			//Ответ = Вопрос("Очистить память терминала сбора данных?", РежимДиалогаВопрос.ДаНет);
			//Если Ответ = КодВозвратаДиалога.Да Тогда
			//	СтрокаТаблицыТерминала = неопределено;
			//	Если глТорговоеОборудование = Неопределено 
			//		или глТорговоеОборудование.млТерминал.Количество()>0 Тогда
			//		СтрокаТаблицыТерминала = новый Структура; //+++ 09.01.2012
			//		СтрокаТаблицыТерминала.Вставить("Объект" , глТорговоеОборудование.млТерминал[0].Объект );
			//		СтрокаТаблицыТерминала.Вставить("НомерЛУ", глТорговоеОборудование.млТерминал[0].НомерЛУ);
			//		СтрокаТаблицыТерминала.Вставить("Модель",  глТорговоеОборудование.млТерминал[0].Модель);
			//	//иначе // ТСД не подключен.	
			//	КонецЕсли;
			//	Ответ = глТорговоеОборудование.ОчиститьПамятьТерминалаСбораДанных(СтрокаТаблицыТерминала);
			//	Если Не ПустаяСтрока(Ответ) Тогда
			//		Предупреждение(Ответ);
			//	КонецЕсли;
			//КонецЕсли;
			
		КонецЕсли;
			
		Иначе  ///Продолжение  Огородников

		
		нетАдреса = ЛОЖЬ; //+++ это ВАЖНО !!!
		Ответ = глТорговоеОборудование.ЗагрузитьДанныеИзТерминалаСбораДанных(РезультатВыбора, Данные, нетАдреса);
		
		Если Не ПустаяСтрока(Ответ) Тогда
			Предупреждение(Ответ);
		ИначеЕсли Данные.Количество() = 0 Тогда
			Предупреждение("Из терминала сбора данных не загружено ни одного товара...");
		Иначе
			
			i=0;    
			пустойСклад = справочники.Склады.ПустаяСсылка();
	//--------------------------------------------------------------------------------------------------------------------------		
			Для Каждого СтрокаДанных Из Данные Цикл
				i=i+1;
				//+++ Если глТорговоеОборудование.ПолучитьТоварПоШтрихкоду(СтрокаДанных.Штрихкод, ВремТовар) Тогда
				ВремТовар = Справочники.Номенклатура.НайтиПоКоду(СтрокаДанных.Код);  //+++
				
				//09.11.2015 - Аксессуары
				Если НЕ ЗначениеЗаполнено(ВремТовар) тогда
					ВремТоварТабл = новый ТаблицаЗначений;
					глТорговоеОборудование.ПолучитьТоварПоШтрихкоду(СтрокаДанных.Штрихкод, ВремТоварТабл);
					Если ВремТоварТабл.Количество()>0 тогда
						ВремТовар = ВремТоварТабл[0].Номенклатура;
					КонецЕсли;	

					#Если Клиент тогда 
					Если ЗначениеЗаполнено(ВремТовар) тогда 
						Сообщить("По ШК: "+СокрЛП(СтрокаДанных.Штрихкод)+" Найден товар: "+строка(ВремТовар.Код)+" "+строка(ВремТовар), СтатусСообщения.Информация);
					иначе	
						Сообщить("По ШК: "+СокрЛП(СтрокаДанных.Штрихкод)+" НЕ Найден товар!", СтатусСообщения.Внимание);
					КонецЕсли;	
					#КонецЕсли	
				КонецЕсли;	
	
				Если ЗначениеЗаполнено(ВремТовар) Тогда
					
					//+++ 24.12.2012
					Адрес = справочники.АдресаХранения.НайтиПоКоду(СтрокаДанных.Адрес);
					Если НЕ ЗначениеЗаполнено(Адрес) Тогда
						сообщить(строка(i)+" строка - Нет Адреса Хранения: "+СтрокаДанных.Адрес, СтатусСообщения.Внимание);
					КонецЕсли;
					
					СтруктураОтбора = Новый Структура();
					СтруктураОтбора.Вставить("Номенклатура", ВремТовар);
					СтруктураОтбора.Вставить("АдресХранения",Адрес);
					
					СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТоварыАдресноеХранение, СтруктураОтбора);  //+++
					
					Если СтрокаТабличнойЧасти <> Неопределено Тогда
 						// Нашли, увеличиваем количество в первой найденной строке.
						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаДанных.Количество;
 					Иначе
 						// Не нашли - добавляем новую строку.
						СтрокаТабличнойЧасти = ТоварыАдресноеХранение.Добавить();
						СтрокаТабличнойЧасти.Номенклатура           = ВремТовар;  //+++
						
						СтрокаТабличнойЧасти.Количество             = СтрокаДанных.Количество;
						
						СтрокаТабличнойЧасти.АдресХранения			= Адрес;
						СтрокаТабличнойЧасти.Склад					= ?(ЗначениеЗаполнено(Адрес), Адрес.Владелец, пустойСклад );
						
						// Выполнить общие действия для всех документов при изменении номенклатуры.
						ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

					КонецЕсли;

					// Рассчитать реквизиты табличной части.
					//РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
					//РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

					ЭлементыФормы.ТоварыАдресноеХранение.ТекущаяСтрока  = СтрокаТабличнойЧасти;
				КонецЕсли;
			КонецЦикла;

			Ответ = Вопрос("Очистить память терминала сбора данных?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				СтрокаТаблицыТерминала = неопределено;
				Если глТорговоеОборудование = Неопределено 
					или глТорговоеОборудование.млТерминал.Количество()>0 Тогда
					СтрокаТаблицыТерминала = новый Структура; //+++ 09.01.2012
					СтрокаТаблицыТерминала.Вставить("Объект" , глТорговоеОборудование.млТерминал[0].Объект );
					СтрокаТаблицыТерминала.Вставить("НомерЛУ", глТорговоеОборудование.млТерминал[0].НомерЛУ);
					СтрокаТаблицыТерминала.Вставить("Модель",  глТорговоеОборудование.млТерминал[0].Модель);
				//иначе // ТСД не подключен.	
				КонецЕсли;
				Ответ = глТорговоеОборудование.ОчиститьПамятьТерминалаСбораДанных(СтрокаТаблицыТерминала);
				Если Не ПустаяСтрока(Ответ) Тогда
					Предупреждение(Ответ);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		КонецЕсли; //Плотников АТОЛ
	КонецЕсли;

КонецПроцедуры



// Процедура вызывается при нажатии кнопки "Изменить" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// группового изменения значений реквизитов табличной части "Товары".
//
Процедура КоманднаяПанельТоварыДействиеИзменить(Кнопка)

	// Получим контекст обработки
	ИзменениеТабличнойЧастиТовары      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменые формы.
	ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект       = ЭтотОбъект;
	ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента      = ЭтаФорма;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьНДС             = УчитыватьНДС; 
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице    = (СкладОрдер.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка);
	Иначе
		ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице    = (СкладОрдер.Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка);
	КонецЕсли;
	ФормаИзменениеТабличнойЧастиТовары.мСпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
	
	//Перенесем табличную часть
	ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры // КоманднаяПанельТоварыДействиеИзменить()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)


	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);
	//СтруктураРеквизитовДокумента.Вставить("НДСВключенВСтоимость");
	СтруктураЗапрещенных = Неопределено;
	ТекущийКурс = РегистрыСведений.КурсыВалютДляПоступления.СрезПоследних(Дата,Новый структура("Валюта",ВалютаДокумента));

	Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

		СтруктураЗапрещенных = Новый Структура("НДСВключенВСтоимость");
		Если  ТекущийКурс.Количество()>0 Тогда
        структураЗапрещенных.Вставить("КурсВзаиморасчетов");
		конецЕсли;
	иначе 
		Если  ТекущийКурс.Количество()>0 Тогда
		СтруктураЗапрещенных = Новый Структура("КурсВзаиморасчетов");
		конецЕсли;
	КонецЕсли;

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            СтруктураЗапрещенных, "Товары");
	Если СтруктураЗначений <> Неопределено Тогда
		ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, СтруктураЗапрещенных, "Товары", мВалютаРегламентированногоУчета, , СтруктураЗначений);

		Если СтруктураЗначений.ТекущийТипЦен <> СтруктураЗначений.НовыйТипЦен Тогда
			ОбновитьФормуПодбора("ТипЦен");
		КонецЕсли;
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()

// Процедура вызывается при выборе пункта меню "Заполнить по остаткам" кнопки "Заполнить"
// командной панели табличного поля "Возвратная тара",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельВозвратнаяТараДействиеЗаполнитьПоЗаказуПоставщику(Кнопка)

	ЗаполнитьТабличнуюЧастьПоОстаткам(ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеЗаполнитьПоОстаткам()

// Процедура вызывается при выборе пункта меню "Заполнить по приходному ордеру" кнопки "Заполнить"
// командной панели табличного поля "Возвратная тара",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельВозвратнаяТараДействиеЗаполнитьПоПриходномуОрдеру(Кнопка)   

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		Предупреждение("Выбран вид поступления на склад, а не по ордеру!");
		Возврат;
	Иначе
		Если ЗначениеНеЗаполнено(СкладОрдер) Тогда
			Предупреждение("Не выбран приходный ордер!");
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Товары.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		ВозвратнаяТара.Очистить();
		
	КонецЕсли;
	
	ЗаполнитьТоварыПоОснованиюУпр(СкладОрдер, ВозвратнаяТара);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта меню "Добавить по приходному ордеру" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельВозвратнаяТараДействиеДобавитьПоПриходномуОрдеру(Кнопка)
	
	ФормаОрдера = Документы.ПриходныйОрдерНаТовары.ПолучитьФормуВыбора();
	ФормаОрдера.Заголовок = "Выберите приходный ордер для заполнения документа поступления";
	ФормаОрдера.РежимВыбора = Истина;
	ПриходныйОрдрер = ФормаОрдера.ОткрытьМодально();

	Если ЗначениеНеЗаполнено(ПриходныйОрдрер) Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьТоварыПоОснованиюУпр(ПриходныйОрдрер, ВозвратнаяТара);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Возвратная тара", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеПодбор(Кнопка)

	ДействиеПодбор(ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеПодбор()

// Процедура вызывается при выборе пункта меню "Заполнить по заказу поставщику" кнопки "Заполнить"
// командной панели табличного поля "Услуги",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельУслугиДействиеЗаполнитьПоЗаказуПоставщику(Кнопка)

	ЗаполнитьТабличнуюЧастьПоОстаткам(Услуги);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Услуги", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Услуги".
//
Процедура КоманднаяПанельУслугиДействиеПодбор(Кнопка)

	ДействиеПодбор(Услуги);

КонецПроцедуры // КоманднаяПанельУслугиДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	НапечататьДокументПоУмолчанию(ЭтотОбъект, глТекущийПользователь, мПечатнаяФормаПоУмолчанию);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
//
Процедура ДействияФормыДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = Кнопка.Текст;
		СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		СписокМакетов = ПолучитьСписокПечатныхФорм();
		СтрокаМакетаВСписке = СписокМакетов.НайтиПоЗначению(Кнопка.Имя);
		Если СтрокаМакетаВСписке <> Неопределено Тогда
			Печать(СтрокаМакетаВСписке.Значение);
			СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
			СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;			
			
		Иначе
			СсылкаВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Кнопка.Имя, "_", "-")));
			Печать(СсылкаВнешнейФормы);
			СтруктураМакета.Макет = СсылкаВнешнейФормы;
			СтруктураМакета.ПредставлениеМакета = Кнопка.Текст;
		КонецЕсли;		
		
		мПечатнаяФормаПоУмолчанию = СтруктураМакета.Макет;
		СохранитьТекущуюКнопкуПечати(ЭтотОбъект.Метаданные().Имя, СтруктураМакета);
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при нажатии кнопки "Заполнить и провести" командной панели формы,
// вызывает заполнение документа с проведением.
//
Процедура ДействияФормыДействиеЗаполнитьИПровести(Кнопка)

	// Заполнять с проведением можно документы с текущую датой
	Если НачалоДня(Дата) = НачалоДня(ТекущаяДата()) Тогда
		Если НЕ ЭтоНовый() Тогда

			// Если документ ранее был записан, то он будет переноситься в конец дня из-за оперативного проведения, о чем следует предупредить.
			Ответ = Вопрос("В режиме заполнения с проведением документ будет проводиться оперативно. " + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли; 

	// Обработка выполняется в транзакции. Она будет отменена, Если заполнить не удалось
	НачатьТранзакцию();
	Отказ = Ложь;

	// Очистим записи документа по регистрам остатков и заказов покупателей, Если он был ранее проведен
	Если Проведен Тогда
		НаборОстаткиТоваров = РегистрыНакопления.ТоварыНаСкладах.СоздатьНаборЗаписей();
		НаборОстаткиТоваров.Отбор.Регистратор.Установить(Ссылка);
		НаборОстаткиТоваров.Прочитать();
		НаборОстаткиТоваров.Очистить();
		НаборОстаткиТоваров.Записать();
		НаборОстаткиТоваров = РегистрыНакопления.ЗаказыПоставщикам.СоздатьНаборЗаписей();
		НаборОстаткиТоваров.Отбор.Регистратор.Установить(Ссылка);
		НаборОстаткиТоваров.Прочитать();
		НаборОстаткиТоваров.Очистить();
		НаборОстаткиТоваров.Записать();
		НаборОстаткиТоваров = РегистрыНакопления.ТоварыВРезервеНаСкладах.СоздатьНаборЗаписей();
		НаборОстаткиТоваров.Отбор.Регистратор.Установить(Ссылка);
		НаборОстаткиТоваров.Прочитать();
		НаборОстаткиТоваров.Очистить();
		НаборОстаткиТоваров.Записать();
	КонецЕсли;

	// Заполнение документа
	ЗаполнитьТабличныеЧастиПередПроведениемУпр(Отказ);

	// Если заполнить удалось, то запись документа с проведением

	НеПроведен = Ложь;
	Если НЕ Отказ Тогда
		Попытка
			Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		Исключение
			НеПроведен = Истина;
		КонецПопытки;
	КонецЕсли;

	Если Отказ ИЛИ НеПроведен Тогда
		ОтменитьТранзакцию();
		Если НеПроведен Тогда
			Предупреждение("Операция не выполнена!");
		КонецЕсли;
		
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли; 

	// Вывести в заголовке формы вид поступления.
	УстановитьЗаголовокФормыДокумента(Строка(ВидПоступления), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	УстановитьДоступностьКнопкиЗаполнитьИПровести();
	ПриИзмененииОблагаетсяЕНВД("ДатаДокумента");

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в бухгалтерском учете.
//
Процедура ОтражатьВБухгалтерскомУчетаПриИзменении(Элемент)

	Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		ОтражатьВНалоговомУчете = Ложь;
	Иначе
		ОтражатьВНалоговомУчете = Элемент.Значение;
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьНомерДокумента(ЭтотОбъект);

	ПриИзмененииОрганизация();
	
	УстановитьВидимость();
	
	// Выполняем общие действия для всех документов при изменении Организация.
	ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	ПриИзмененииОблагаетсяЕНВД("Организация");

КонецПроцедуры // ОрганизацияПриИзменении()

Процедура ПриИзмененииОрганизация()

	УстановитьФлагиНДСПоОрганизации();
	
КонецПроцедуры
 
// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);

	// Могли поменять договор.
	ПриИзмененииДоговора();

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Склад
//
Процедура СкладОрдерПриИзменении(Элемент)

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда

		// Если контрагент еще не был выбран, заполним его по ордеру
		Если Не ЗначениеНеЗаполнено(СкладОрдер)
		   И ЗначениеНеЗаполнено(Контрагент) Тогда
			Контрагент = СкладОрдер.Контрагент;

			// Выполняем общие действия для всех документов при изменении Контрагент.
			ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);

			// Могли поменять договор.
			ПриИзмененииДоговора();

		КонецЕсли;

	КонецЕсли;

	// Установить тип реквизита для ввода (Если, например, поле очистили)
	УстановитьТипСкладаОрдера();

	ПриИзмененииОблагаетсяЕНВД("Склад");
	ПриИзмененииВидаСклада();

КонецПроцедуры // СкладОрдерПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода СкладОрдер
//
Процедура СкладОрдерНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Определить в зависимости от вида поступления тип для выбора СкладаОрдера
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда

		НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, СкладОрдер, ВидСравнения.НеРавно, СтандартнаяОбработка);

	Иначе

		СтандартнаяОбработка = Ложь;

		// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
		// значение было присвоено стандартно.
		ФормаВыбора = Документы.ПриходныйОрдерНаТовары.ПолучитьФормуВыбора(,Элемент,);

		// Оставим для выбора только нужные ордера
		ФормаВыбора.ДокументСписок.Отбор.ВидОперации.Значение                            = Перечисления.ВидыОперацийПриходныйОрдер.ОтПоставщика;
		ФормаВыбора.ДокументСписок.Отбор.ВидОперации.Использование                       = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ВидОперации.Доступность = Ложь;

		ФормаВыбора.Открыть();

	КонецЕсли;

КонецПроцедуры // СкладОрдерНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;

	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
	                                        СписокВидовДоговоров, СтандартнаяОбработка);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "Нажатие" надписи о счете-фактуре.
//   Процедура выполняет либо ввод нового счета-фактуры, либо открывает
// форму уже существующего счета-фактуры, Если тот был введен на основании
// текущего документа.
//
Процедура ГиперссылкаСчетФактураНажатие(Элемент)

	ВвестиСчетФактуру(ЭтотОбъект, ЭтаФорма, "СчетФактураПолученный");

КонецПроцедуры // ГиперссылкаСчетФактураНажатие()

// Процедура - обработчик события "НачалоВыбора" поля ввода "КурсВзаиморасчетов".
//
Процедура КурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Выберать дату курса и заполнить курс взаиморасчетов.
	ВыбратьКурсВзаиморасчетов(ЭтотОбъект);

КонецПроцедуры // КурсВзаиморасчетовНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Сделка".
//
Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Данный документ выполняет расход по регистру взаиморасчетов.
	Если ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		СтрокаТипа = "СчетНаОплатуПоставщика";
	Иначе
		СтрокаТипа = "ЗаказПоставщику";
	КонецЕсли;

	НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Сделка, СтандартнаяОбработка, 
		                       "Расход", СтрокаТипа);

КонецПроцедуры // СделкаНачалоВыбора()

// Процедура - обработчик события "Нажатие" кнопки "КнопкаПерерасчитатьДолг".
// Процедура вызывает сервисный механизм пересчета долга контрагента 
// по выбранному в форме договору взаиморасчетов и сделке.
//
Процедура КнопкаПерерасчитатьДолгНажатие(Элемент)

	СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка);

КонецПроцедуры // КнопкаПерерасчитатьАвансДоговораНажатие()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ВидПоступления".
//
Процедура ВидПоступленияПриИзменении(Элемент)

	УстановитьТипСкладаОрдера();
	ПриИзмененииВидаСклада();
	УстановитьАвтоотметкуСклада();
	УстановитьВидимость();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка ОтражатьВУправленческомУчете
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)

	ПроверитьВидПоступленияПередачи(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Товары". Формирует данные в колонке "Всего" и "ЕдиницаХранения".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если мКолонкиТовары.Всего.Видимость Тогда
		ОформлениеСтроки.Ячейки.Всего.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Всего.Текст = ФорматСумм(ДанныеСтроки.Сумма
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС));

	КонецЕсли;

	ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

	Если НЕ ЗначениеНеЗаполнено(ДанныеСтроки.СерияНоменклатуры) Тогда
		Если мКолонкиТовары.НомерГТД.Видимость Тогда
			ОформлениеСтроки.Ячейки.НомерГТД.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.НомерГТД.Текст = ДанныеСтроки.СерияНоменклатуры.НомерГТД;
		КонецЕсли;
		Если мКолонкиТовары.СтранаПроисхождения.Видимость Тогда
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.Текст = ДанныеСтроки.СерияНоменклатуры.СтранаПроисхождения;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ПриНачалеРедактирования" поля табличной части "Товары"
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
		ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		Если Не ИспользоватьВнутренниеЗаказы() Тогда
			СтрокаТабличнойЧасти.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти.номенклатура.Видтовара = Перечисления.ВидыТоваров.Диски Тогда
		строкаТабличнойЧасти.цена = 0.01;
		конецесли;
			
		//ЗаполнитьВесВТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования" поля табличной части "Товары"
//
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УстановитьАвтоотметкуСклада();
		
	
КонецПроцедуры //ТоварыПриОкончанииРедактирования()

// Процедура - обработчик события "ПослеУдаления" поля табличной части "Товары"
//
Процедура ТоварыПослеУдаления(Элемент)
	УстановитьАвтоотметкуСклада();
КонецПроцедуры //ТоварыПослеУдаления()

// Процедура - обработчик события "НачалоВыбора" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	НачалоВыбораНоменклатурыКонтрагента(Элемент, СтандартнаяОбработка, Контрагент, СтрокаТабличнойЧасти.Номенклатура);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		// Заполняем реквизиты табличной части.
	ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект); 

	СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
	                                         Контрагент, ТипЦен, ДоговорКонтрагента, Дата,ВалютаДокумента, УчитыватьНДС,СуммаВключаетНДС);
	ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета); 

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
	                                         Контрагент, ТипЦен, ДоговорКонтрагента, Дата,ВалютаДокумента, УчитыватьНДС,СуммаВключаетНДС);
	ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета); 

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода серии номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыСерияНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		СтрокаТабличнойЧасти.Номенклатура = Элемент.Значение.Владелец;
	КонецЕсли;

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	РассчитатьКоличествоТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Суммы.
	ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект, глТекущийПользователь);

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ЗаказПокупателя
// в строке табличной части "Товары".
//
Процедура ТоварыЗаказПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Новый Структура(), "Товары");

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Склад"
// в строке табличной части "Товары".
Процедура ТоварыСкладНачалоВыбора(Элемент, СтандартнаяОбработка)
	НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, СкладОрдер, ВидСравнения.НеРавно, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ УСЛУГИ

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура УслугиКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура УслугиЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);


КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Услуги".
//
Процедура УслугиСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Суммы.
	ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект, глТекущийПользователь);

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Услуги".
//
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Заказ"
// в строке табличной части "Услуги".
//
Процедура УслугиЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Новый Структура(), "Услуги");
	
КонецПроцедуры // УслугиЗаказНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "Номенклатура"
// в строке табличной части "Услуги".
//
Процедура УслугиНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Заполняем реквизиты табличной части.
	ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект); 
	СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
	                                         Контрагент, ТипЦен, ДоговорКонтрагента, Дата,ВалютаДокумента, УчитыватьНДС,СуммаВключаетНДС);
	ЗаполнитьЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.СтатьяЗатрат) Тогда
		СтрокаТабличнойЧасти.СтатьяЗатрат = СтрокаТабличнойЧасти.Номенклатура.СтатьяЗатрат;
	КонецЕсли;
	Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.НоменклатурнаяГруппа) Тогда
		СтрокаТабличнойЧасти.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппаЗатрат;
	КонецЕсли;
	
КонецПроцедуры // УслугиНоменклатураПриИзменении()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Услуги". Формирует данные в колонке "ЕдиницаИзмерения".
//
Процедура УслугиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если мКолонкиУслуги.Всего.Видимость Тогда
		ОформлениеСтроки.Ячейки.Всего.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Всего.Текст = ФорматСумм(ДанныеСтроки.Сумма
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС));
	КонецЕсли;

КонецПроцедуры // УслугиПриВыводеСтроки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА

// Процедура - обработчик события "ПриОкончанииРедактирования" поля табличной части "ВозвратнаяТара"
//
Процедура ВозвратнаяТараПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УстановитьАвтоотметкуСклада();
КонецПроцедуры //ВозвратнаяТараПриОкончанииРедактирования()

// Процедура - обработчик события "ПослеУдаления" поля табличной части "ВозвратнаяТара"
//
Процедура ВозвратнаяТараПослеУдаления(Элемент)
	УстановитьАвтоотметкуСклада();
КонецПроцедуры //ВозвратнаяТараПослеУдаления()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении возвратной тары.
	ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Заполнить реквизиты табличной части.
	ЗаполнитьЦенуВозвратнойТарыТабЧастиПоступление(СтрокаТабличнойЧасти, ЭтотОбъект); 

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении суммы.
	ПриИзмененииСуммыВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараСуммаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ЗаказПокупателя
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараЗаказПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Новый Структура(), "ВозвратнаяТара");

КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "ВозвратнаяТара". Формирует данные в колонке "ЕдиницаХранения".
//
Процедура ВозвратнаяТараПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если мКолонкиВозвратнаяТара.ЕдиницаХранения.Видимость	Тогда
		ОформлениеСтроки.Ячейки.ЕдиницаХранения.УстановитьТекст(ДанныеСтроки.Номенклатура.ЕдиницаХраненияОстатков);
	КонецЕсли;

	ПоказатьКодАртикул(мКолонкиВозвратнаяТара, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" поля табличной части "Возвратная тара"
//
Процедура ВозвратнаяТараПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;
		ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		Если Не ИспользоватьВнутренниеЗаказы() Тогда
			СтрокаТабличнойЧасти.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Склад"
// в строке табличной части "ВозвратнаяТара".
Процедура ВозвратнаяТараСкладНачалоВыбора(Элемент, СтандартнаяОбработка)
	НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, СкладОрдер, ВидСравнения.НеРавно, СтандартнаяОбработка);
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПеретаскивание()

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "ВозвратнаяТара");
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ВозвратнаяТараПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ВозвратнаяТараПеретаскивание()

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Услуги".
//
Процедура УслугиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Услуги");
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // УслугиПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Услуги".
//
Процедура УслугиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // УслугиПеретаскивание()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ДанныеПоПогрузке.Количество() = 0 
			И Товары.Количество()>0 //+++ 10.01.2018 только если есть товары - перезаполяем Грузчиков
		Тогда КоманднаяПанель1Заполнить(ЭлементыФормы.КоманднаяПанель1.Кнопки.Заполнить);
	КонецЕсли;
	
	яштАдресноеХранение.ПроверитьСкладыАдресногоХраненияВФорме(ЭтотОбъект,Отказ);
	
	Если Отказ Тогда 
		Возврат 
	КонецЕсли;
	
	яштСменаПользователя(ЭтотОбъект, ЭтаФорма, глТекущийПользователь);
	
	ЗаполнитьВесНетто(Товары);
	ОбщийВес=Товары.Итог("Вес");
	
	//{ Лапенков 20080815 Если документ введен на основании заказа поставщику, 
	// и в этом заказе активен флаг ИспользоватьЧислоДнейДоОплаты, то график оплат автоматически
	// заполнится датой поступления + число дней до оплаты в заказе
	
	Если ЭтоНовый()
		И (не ЗначениеНеЗаполнено(Сделка))
		И (ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику"))
	    И ГрафикОплаты.Количество()=0 Тогда
		
			строкаГрафикаОплаты = ГрафикОплаты.Добавить();	
			строкаГрафикаОплаты.ПроцентОплаты=100;
				
		Если Сделка.ИспользоватьЧислоДнейДоОплаты Тогда
			строкаГрафикаОплаты.Дата=НачалоДня(ЭтотОбъект.Дата+86400*Сделка.ЧислоДнейДоОплаты);
		Иначе //+++ 18.09.2014  фикс дата оплаты из Заказа поставщику
			строкаГрафикаОплаты.Дата = Сделка.ДатаОплаты;
		КонецЕсли;
		
		Если строкаГрафикаОплаты.Дата < НачалоДня(ТекущаяДата()) Тогда
			строкаГрафикаОплаты.Дата = НачалоДня(ТекущаяДата()) + 3*86400; //+ 3 дня, т.к. Если это пятница, то оплата не раньше понедельника
			Сообщить("Дата оплаты НЕ может быть меньше текущей даты! Дата оплаты автоматически изменена на "+формат(строкаГрафикаОплаты.Дата,"ДЛФ=DD"), СтатусСообщения.Внимание);
		КонецЕсли;
		
		//+++ 18.04.2017	все новые документы - на начало тек.дня	
		Дата = НачалоДня(ТекущаяДата()) + 600;
		
	КонецЕсли;	

	Если ГрафикОплаты.Итог("ПроцентОплаты")>0 и ГрафикОплаты.Итог("ПроцентОплаты")<100 Тогда
		Отказ = Истина;
		Сообщить("Нужно или очистить график оплаты или заполнить до 100%");
	конецесли;	
	
	
	
	// {Лапенков 20081815

	//+++ 14.05.2015 с 0:00:00 часов переносим на 8 утра!  не для текущей даты
	//Плотников 25.07.2016 // Все поступления проводятся началом дня (в модуле)
	//+++ 18.04.2017 - открыт доступ к изменению времени при неоперативном проведении
	
	//Если ЭтотОбъект.Дата = началоДня(ЭтотОбъект.Дата) 
	//	и началоДня(ЭтотОбъект.Дата) <> НачалоДня(ТекущаяДата()) тогда
	//	ЭтотОбъект.Дата = ЭтотОбъект.Дата + 8 * 3600;
	//КонецЕсли;	
	
	Если ДоговорКонтрагента.ВалютаВзаиморасчетов<>Справочники.Валюты.НайтиПоКоду("643") и ЗначениеЗаполнено(Сделка) тогда
		//если есть пересорт и присутствует товар которого нет в заказе поставщику, то сигнализируем об этом
		ТоварыИзЗаказа = ПолучитьТоварыИзЗаказа(Сделка);
		ТекстПисьма = "";
		Для каждого стр из товары Цикл
			Если ТоварыИзЗаказа.Найти(стр.Номенклатура,"Номенклатура") = неопределено тогда
				Если стр.Цена = 0 тогда
					стр.Цена = 1;
				КонецЕсли;
				РассчитатьСуммуТабЧасти(стр, ЭтотОбъект);
				РассчитатьСуммуНДСТабЧасти(стр, ЭтотОбъект);
				ТекстПисьма = "Номенклатуры: ("+стр.Номенклатура.Код+") "+стр.Номенклатура+" нет в заказе"+Символы.ПС;
			КонецЕсли;
		КонецЦикла;
		Если ТекстПисьма<>"" тогда
						
			//АдресПочты = "smirnov@yst.ru; novikova@yst.ru; baldina@yst.ru; goritsky@yst.ru; tigran@yst.ru";	 //
			АдресПочты = "novikova@yst.ru; baldina@yst.ru; goritsky@yst.ru; tigran@yst.ru";	 //
			УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("no-reply@yst76.ru");
			Если ЭтоНовый() тогда
				Тема = "Добавить цену в поступление товара! "+Контрагент+" заказ: "+ Сделка;
				ТекстПисьма = "Проверить поступление от "+ЭтотОбъект.Контрагент+" заказ: "+ Сделка+Символы.ПС+ ТекстПисьма;
			Иначе
				Тема = "Добавить цену в поступление товара! "+Ссылка;
				ТекстПисьма = "Проверить "+Ссылка+" заказ: "+ Сделка+Символы.ПС+ ТекстПисьма;

			КонецЕсли;
			  ТекстСообщения = ТекстПисьма;
			  СписокФайловВложений = новый СписокЗначений;
			  //яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресПочты, СписокФайловВложений, УЗ, ТекстСообщения, Тема);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьТоварыИзЗаказа(ЗаказПост)
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЗаказПоставщикуТовары.Номенклатура
	               |ИЗ
	               |	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	               |ГДЕ
	               |	ЗаказПоставщикуТовары.Ссылка = &Ссылка";
				   Запрос.УстановитьПараметр("Ссылка",ЗаказПост);
				   Рез = Запрос.Выполнить().Выгрузить();
				   Возврат Рез;
КонецФункции


Процедура КоманднаяПанель1ЗАполнить(Кнопка)
	//ЗаполнитьВесНетто(Товары);
	//ОбщийВес=Товары.Итог("Вес");

	ДанныеПоПогрузке.Очистить();
		//+++ перераспределение КТУ по грузчикам по группам складов
	Если Константы.КТУгрузчиковПоСкладам.Получить() Тогда 
		яштРезервыПоТоварам.ЗаполнениеКТУГрузчиков(ЭтотОбъект);
		возврат;
	КонецЕсли;

	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|Ссылка Грузчик
	|ИЗ
	|	Справочник.ФизическиеЛица
	|ГДЕ Официальный";
	
	Выборка=Запрос.Выполнить().Выбрать();
	КоличествоСтрок=Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл
		Строка=ДанныеПоПогрузке.Добавить();
		Строка.Грузчик=Выборка.Грузчик;
		Строка.Вес=1;
	КонецЦикла;	

КонецПроцедуры



Функция ЧасМин(Сек)
	Возврат ?(СтрДлина(Строка(Цел(Сек/3600))) < 2, "0" + Строка(Цел(Сек/3600)), Строка(Цел(Сек/3600))) + 
			 ":" + ?(СтрДлина(Строка(Цел((Сек/3600 - Цел(Сек/3600))*60))) < 2, "0" + Строка(Цел((Сек/3600 - Цел(Сек/3600))*60)),
			 Строка(Цел((Сек/3600 - Цел(Сек/3600))*60)));
КонецФункции



Процедура ГрафикОплатыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	
	//ОформлениеСтроки.Ячейки.СуммаПлатежа.Значение = (СуммаДокумента/100)*(ДанныеСтроки.ПроцентОплаты);
	Если ДанныеСтроки.СуммаОплаты = 0 тогда
		ДанныеСтроки.СуммаОплаты = (СуммаДокумента/100)*(ДанныеСтроки.ПроцентОплаты);	
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельУслугЗаполнитьПоНакладным(Кнопка)
	
	Если ЭтоНовый() Тогда
		Если Вопрос("Перед распределением документ должен быть записан. Записать?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			возврат;
		Иначе
			Записать();
		КонецЕсли;
	КонецЕсли;
	
	
	форма1 = получитьФорму("ФормаПодбораНакладных", ЭтаФорма); // форма в этом документе
	
	
	ТабУслугиНеНаЗатраты=Услуги.Выгрузить();
	ТабУслугиНеНаЗатраты.Очистить();
	ТранспортыеУслугиНаЗатраты=Справочники.Номенклатура.НайтиПоКоду("ЛН00039",,Справочники.Номенклатура.НайтиПоКоду("ЛН00001"));
	Для Каждого СтрТаб из Услуги цикл
		Если СтрТаб.Номенклатура<>ТранспортыеУслугиНаЗатраты Тогда
			НоваяСтрока=ТабУслугиНеНаЗатраты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрТаб);
		КонецЕсли;	
	КонецЦикла;	
	//распределяем только Транспортные услуги 44-1 на затраты
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура",ТранспортыеУслугиНаЗатраты);
	МассивНаЗатраты=услуги.НайтиСтроки(ПараметрыОтбора);
	СуммаКРаспределению=0;
	Если МассивНаЗатраты.Количество()>0 Тогда
		Для каждого ЭлементМассива из МассивНаЗатраты цикл
			СуммаКРаспределению=СуммаКРаспределению+ЭлементМассива.Сумма;
		КонецЦикла;
		форма1.ЭлементыФормы.СтавкаНДС.Значение=МассивНаЗатраты[0].СтавкаНДС;
		форма1.ЭлементыФормы.СтатьяЗатрат.Значение = МассивНаЗатраты[0].СтатьяЗатрат;
	КонецЕсли;
	форма1.ЭлементыФормы.Номенклатура.Значение=ТранспортыеУслугиНаЗатраты;
	форма1.ЭлементыФормы.КолвоКРаспределению.Значение=1;
	форма1.ТабУслугиНеНаЗатраты=ТабУслугиНеНаЗатраты;
	форма1.ЭлементыФормы.СуммаКРаспределению.значение=СуммаКРаспределению;
	
	//Если Услуги.Количество()>0 Тогда //первая и единственная услуга!
	//	форма1.ЭлементыФормы.Номенклатура.Значение = Услуги[0].Номенклатура;
	//	форма1.ЭлементыФормы.СуммаКРаспределению.значение = Услуги.Итог("Сумма");
	//	форма1.ЭлементыФормы.СтатьяЗатрат.Значение = Услуги[0].СтатьяЗатрат;
	//	форма1.ЭлементыФормы.СтавкаНДС.Значение    = Услуги[0].СтавкаНДС;
	//	
	//	КолвоКРаспределению = Услуги.Итог("Количество");
	// 	КолвоКРаспределению = ?(КолвоКРаспределению=0, 1, КолвоКРаспределению);
	//	форма1.ЭлементыФормы.КолвоКРаспределению.Значение = КолвоКРаспределению;
	//				
	//	//Если ЗначениеЗаполнено(Услуги[0].Номенклатура) Тогда
	//	//	Если Услуги[0].Номенклатура.СтавкаНДС<>Услуги[0].СтавкаНДС Тогда
	//	//	Предупреждение("В 1-ой строке ставка НДС = "+строка(Услуги[0].СтавкаНДС)+", 
	//	//	|а ставка НДС по Услуге '"+строка(Услуги[0].Номенклатура.Наименование)+"' = "+строка(Услуги[0].Номенклатура.СтавкаНДС)+"!", 30);
	//	//	КонецЕсли;	
	//	//КонецЕсли;	
	//КонецЕсли;	
	
	форма1.Открыть();
	
	Услуги.Очистить();
	
	
КонецПроцедуры

Процедура ПолеВвода1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НомерСБИС = Строка(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура ТоварыПоМестамХраненияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ПоказатьКодАртикул(ЭлементыФормы.ТоварыАдресноеХранение.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
КонецПроцедуры

Процедура ТоварыПоМестамХраненияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	СтрокаТабличнойЧасти = ЭлементыФормы.ТоварыАдресноеХранение.ТекущиеДанные;
	
	Если НоваяСтрока   И ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
		//СкладДляПодстановки = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойСклад");
		Если ЗначениеЗаполнено(СкладОрдер) Тогда
			СтрокаТабличнойЧасти.Склад    =  СкладОрдер;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ТоварыАдресноеХранениеМестоХраненияПриИзменении(Элемент)
	текСтрока = ЭлементыФормы.ТоварыАдресноеХранение.ТекущиеДанные;
	текСтрока.Склад = текСтрока.АдресХранения.Владелец;
КонецПроцедуры

//Орлов++
Процедура ДействияФормыСформироватьДопРасходы(Кнопка)
	Если Не ЭтоНовый() И Товары.Количество() > 0 Тогда
		ФормаДопРасходов = ПолучитьФорму("ФормаВыбораДопРасходов",ЭтаФорма);
		ФормаДопРасходов.РазрешитьЗакрытие = Ложь;
		ФормаДопРасходов.Ссылка = Ссылка;
		ФормаДопРасходов.ОткрытьМодально();
	Иначе
		Сообщить("Необходимо записать документ!", СтатусСообщения.Важное);
	КонецЕсли;
КонецПроцедуры
//Орлов--

Процедура Кнопка1Нажатие(Элемент)
			
		форма1 = получитьФорму("ФормаПодбораРеализацийДляВозмещения", ЭтаФорма); // форма в этом документе
		Если  Услуги.Количество()>0 Тогда 
			Если ЭлементыФормы.Услуги.ТекущаяСтрока.Номенклатура = Справочники.Номенклатура.НайтиПоКоду("ЛН00018",,Справочники.Номенклатура.НайтиПоКоду("ЛН00002")) Тогда//Транспортная услуга 44-ТР возмещаемые
				форма1.ЭлементыФормы.СуммаКРаспределению.значение = ЭлементыФормы.Услуги.ТекущаяСтрока.Сумма;
				Форма1.Заголовок=Форма1.Заголовок+" "+СокрЛП(ЭлементыФормы.Услуги.ТекущаяСтрока.Содержание);
				форма1.Открыть();
			КонецЕсли;
		КонецЕсли;	
		
КонецПроцедуры

Процедура УслугиПриАктивизацииСтроки(Элемент)
	Если Услуги.Количество()>0 Тогда
	 ЭлементыФормы.кнРаспределитьВозмещаемыеТранспорт.Доступность=(ЭлементыФормы.Услуги.ТекущаяСтрока.Номенклатура = Справочники.Номенклатура.НайтиПоКоду("ЛН00018",,Справочники.Номенклатура.НайтиПоКоду("ЛН00002")));
	КонецЕсли;
КонецПроцедуры

Процедура кнУстановитьПризнакКрышкиПровереныНажатие(Элемент)
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслугТовары.Номенклатура
	|ПОМЕСТИТЬ втДиски
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
	|	И ПоступлениеТоваровУслугТовары.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)
	|	И ПоступлениеТоваровУслугТовары.Номенклатура.Наименование ПОДОБНО ""%LegeArtis%""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект КАК Номенклатура,
	|	ЗначенияСвойствОбъектов.Значение КАК Свойство
	|ПОМЕСТИТЬ втКрышкиНеПроверены
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект В
	|			(ВЫБРАТЬ
	|				втДиски.Номенклатура
	|			ИЗ
	|				втДиски КАК втДиски)
	|	И ЗначенияСвойствОбъектов.Свойство.Наименование = ""Крышки проверены""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДиски.Номенклатура,
	|	ЕСТЬNULL(втКрышкиНеПроверены.Свойство, ЛОЖЬ) КАК КрышкиПроверены
	|ПОМЕСТИТЬ втОснова
	|ИЗ
	|	втДиски КАК втДиски
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКрышкиНеПроверены КАК втКрышкиНеПроверены
	|		ПО втДиски.Номенклатура = втКрышкиНеПроверены.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОснова.Номенклатура
	|ИЗ
	|	втОснова КАК втОснова
	|ГДЕ
	|	втОснова.КрышкиПроверены = ЛОЖЬ";
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Рез=Запрос.Выполнить().Выбрать();
	
	СвойствоКрышкиПроверены=ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Крышки проверены");
	
	Пока Рез.Следующий() Цикл
		НаборЗаписейЗначенияСвойств = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
		Запись = НаборЗаписейЗначенияСвойств.Добавить();
		
		Запись.Объект   = Рез.Номенклатура;
		Запись.Свойство = СвойствоКрышкиПроверены;
		Запись.Значение = истина;
		
		
		НаборЗаписейЗначенияСвойств.Отбор.Объект.Установить(Рез.Номенклатура);
		
		Попытка
			НаборЗаписейЗначенияСвойств.Записать();
		Исключение
			Предупреждение("Не удалось записать значения свойств:" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	Предупреждение("Готово!");
КонецПроцедуры

Процедура ДокументыРасчетовСКонтрагентомДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, СтандартнаяОбработка)
	// Тип выбираемого значения зависит от договора.
	СтандартнаяОбработка = Ложь;

	Если ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
		Предупреждение("Не выбран договор контрагента!");
		ТекущийЭлемент = ЭлементыФормы.Контрагент;
		Возврат;
	КонецЕсли;
	// Тип выбираемого значения зависит от договора.
	Если ДоговорКонтрагента.ВедениеВзаиморасчетов<>Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
		Предупреждение("Взаиморасчеты в договоре должны вестись по расчетным документам!");
		ТекущийЭлемент = ЭлементыФормы.Контрагент;
		Возврат;
	КонецЕсли;
	
	
	ФормаВыбора = Документы.ПлатежноеПоручениеИсходящее.ПолучитьФормуВыбора(,Элемент,);
	
	// Отфильруем список документов по договору.
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Значение      = ДоговорКонтрагента;
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Истина;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ДокументыРасчетовСКонтрагентомДокументРасчетовСКонтрагентомПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
		СтрокаТабличнойЧасти.СуммаВзаиморасчетов=Элемент.Значение.РасшифровкаПлатежа.Итог("СуммаВзаиморасчетов");
		СтрокаТабличнойЧасти.СуммаРегл=Элемент.Значение.СуммаДокумента;
	КонецЕсли;	
КонецПроцедуры

Процедура КоманднаяАдресноеХранениеИзТоваров(Кнопка)
	
	Если ЭтоНовый() или ЭтотОбъект.Модифицированность() тогда
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос("Перед выполнением обработки требуется записать документ. Выполнить?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Предупреждение("Обработка отменена!", 10);
		    Возврат;
		иначе
			ЭтотОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если ТоварыАдресноеХранение.Количество()>0 тогда
		Если Вопрос("Таблица ""Адреса хранения"" не пустая!
			|Очистить таблицу перед заполненением?", РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да тогда
		ТоварыАдресноеХранение.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ПеремещениеТоваровТовары.Номенклатура,
	                |	СУММА(ПеремещениеТоваровТовары.Количество) КАК Количество,
	                |	ПеремещениеТоваровТовары.Склад
	                |ИЗ
					//+++ 28.04.2016 ПоступлениеТоваровУслуг
	                |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПеремещениеТоваровТовары
	                |ГДЕ
	                |	ПеремещениеТоваровТовары.Склад.АдресноеХранение
	                |	И ПеремещениеТоваровТовары.Ссылка = &Ссылка
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ПеремещениеТоваровТовары.Номенклатура,
	                |	ПеремещениеТоваровТовары.Склад";
	 
	 Запрос.УстановитьПараметр("Ссылка", Ссылка);
	 
	 Результат = Запрос.Выполнить();
	 ТоварыАдресноеХранение.Загрузить(  Результат.Выгрузить() );
	 Если ТоварыАдресноеХранение.Количество()=0 тогда
		 Предупреждение("Нет складов адресного хранения в таблице ""Товары"".",30);
	 КонецЕсли;
	 

КонецПроцедуры

//Адиянов<<< 
Процедура ПоступленияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки из ОформленияСтрок цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
						
		ОформлениеСтроки.Ячейки.Сумма.Текст      = ДанныеСтроки.ПоступлениеТоваровУслуг.СуммаДокумента;
		ОформлениеСтроки.Ячейки.Сумма.ОтображатьТекст 		= Истина;
		
		ОформлениеСтроки.Ячейки.Комментарий.Текст = ДанныеСтроки.ПоступлениеТоваровУслуг.Комментарий;
		ОформлениеСтроки.Ячейки.Комментарий.ОтображатьТекст = Истина;
		
		//05.04.16 Смирнов
		ОформлениеСтроки.Ячейки.НомерВходящегоДокумента.Текст = ДанныеСтроки.ПоступлениеТоваровУслуг.НомерВходящегоДокумента;
		ОформлениеСтроки.Ячейки.НомерВходящегоДокумента.ОтображатьТекст = Истина;
		
		//+Лукьяненков 27.11.2017
		ОформлениеСтроки.Ячейки.ЗаданиеНаОтгрузку.Значение = ДанныеСтроки.ПоступлениеТоваровУслуг.ЗаданиеНаОтгрузку;
		//+Лукьяненков 27.11.2017
		
		инд= 3;
		Если Не ЗначениеНеЗаполнено(ДанныеСтроки.ПоступлениеТоваровУслуг) Тогда
			ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
			Если ДанныеСтроки.ПоступлениеТоваровУслуг.пометкаУдаления Тогда
				инд = 1;
			ИначеЕсли ДанныеСтроки.ПоступлениеТоваровУслуг.Проведен Тогда
				инд = 0;
			ИначеЕсли НЕ ДанныеСтроки.ПоступлениеТоваровУслуг.Проведен Тогда
				инд = 2;
			КонецЕсли;	
		КонецЕсли;	
		ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = инд;
		
	КонецЦикла;
	
	//+++ 24.11.2014 - при переключении страницы - вызывается N раз!
	ОбщСумма = 0; ОбщКол = 0;
	для i=0 по Поступления.Количество()-1 цикл
		ОбщСумма = ОбщСумма + Поступления[i].ПоступлениеТоваровУслуг.СуммаДокумента;
		
	КонецЦикла;	
	ЭлементыФормы.Поступления.Колонки.Сумма.ТекстПодвала = ОбщСумма;
	

КонецПроцедуры

//27.10.2016 По заданию Яковлевой Н.
//При создании от  определенных пользователей поступлений товаров оповещать бухгалтерию.
//Для того чтобы оперативнее заводили ГТД в бухгалтерии.Отправлять на почту Байструковой.
Процедура ОповеститьБухгалтераОСозданииДокумента()
	
	СписокАвторовДокумнтаНаСкладе = Новый СписокЗначений;
	СписокАвторовДокумнтаНаСкладе.Добавить("Князева");
	СписокАвторовДокумнтаНаСкладе.Добавить("Невежина И.Н.");
	СписокАвторовДокумнтаНаСкладе.Добавить("Ловыгина Е.И.");
	
	глТекущийПользовательКод = СокрЛП(глТекущийПользователь.Код);
	
	Если СписокАвторовДокумнтаНаСкладе.НайтиПоЗначению(глТекущийПользовательКод) <> Неопределено Тогда 
		
		УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("no-reply@yst76.ru");
		АдресПолучателя = "da_bay@yst.ru";
		Тема = "Документ  " + Ссылка + ".Создан " + ТекущаяДата();
		ТекстСообщения = "Документ " + Ссылка + " создан(изменен) пользователем "+ глТекущийПользовательКод + " в " + ТекущаяДата();
		СписокФайловВложений = новый СписокЗначений;
		яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресПолучателя,СписокФайловВложений, УЗ, ТекстСообщения, Тема);

	КонецЕсли;
		
КонецПроцедуры

//Адиянов>>> 
//+++ 24.06.2016 префикс номера и сам номер - меняются сразу! при изменении 
Процедура ПодразделениеПриИзменении(Элемент)
	Если Подразделение<>Ссылка.Подразделение тогда
		//+++ 29.11.2017 замена на ТК - по Организации
		ПрефиксИБ = ?(Подразделение.ПрефиксИБ="", Организация.Префикс, Подразделение.ПрефиксИБ); 
		ЭтотОбъект.УстановитьНовыйНомер(ПрефиксИБ);
	КонецЕсли;
КонецПроцедуры

Процедура ТоварыПриПолученииДанных(Элемент, ОформленияСтрок)
		
	Список = Новый СписокЗначений;
	Список.Добавить(Справочники.Подразделения.НайтиПоКоду("00006"));//отдел закупок
	//Список.Добавить(Справочники.Подразделения.НайтиПоКоду("00009"));//ит-отдел
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ОсновноеПодразделение В(&Подразделения)";

	Запрос.УстановитьПараметр("Подразделения", список);   

	Результат = Запрос.Выполнить().Выгрузить();
    ТеКомуРазрешено = Результат.ВыгрузитьКолонку("Ссылка");
	ТеКомуРазрешено.Добавить(Справочники.Пользователи.НайтиПоКоду("Малышев Егор"));
	
		

	Для каждого ОформлениеСтроки из ОформленияСтрок Цикл
		ДанныеСтроки = ОформлениеСтроки.Данныестроки;
		Если ДанныеСтроки.Номенклатура.ВидТовара = Перечисления.ВидыТоваров.Диски ИЛИ ?(ДанныеСтроки.Номенклатура.Пустая(), Ложь, ДанныеСтроки.Номенклатура.ПринадлежитЭлементу(Справочники.Номенклатура.НайтиПоКоду("0000701"))) Тогда
			Если ТеКомуРазрешено.Найти(глТекущийПользователь) <> Неопределено ИЛИ глТекущийПользователь = ДанныеСтроки.Номенклатура.НоменклатурнаяГруппа.Ответственный Тогда
				ОформлениеСтроки.Ячейки.Цена.ТолькоПросмотр = Ложь;
				ОформлениеСтроки.Ячейки.Количество.ТолькоПросмотр = Истина;
			ИначеЕсли ГлТекущийПользователь.ОсновноеПодразделение = Справочники.Подразделения.НайтиПоКоду("00009") Тогда
				//нам можно все))
				ОформлениеСтроки.Ячейки.Цена.ТолькоПросмотр = Ложь;
				ОформлениеСтроки.Ячейки.Количество.ТолькоПросмотр = Ложь;
			ИначеЕсли Рольдоступна("ПолныеПрава") Тогда		
				ОформлениеСтроки.Ячейки.Цена.ТолькоПросмотр = Истина;
				ОформлениеСтроки.Ячейки.Количество.ТолькоПросмотр = Ложь;
			Иначе
				ОформлениеСтроки.Ячейки.Цена.ТолькоПросмотр = Истина;
				ОформлениеСтроки.Ячейки.Количество.ТолькоПросмотр = Истина;
			конецЕсли;
		конецЕсли;
	конецЦикла;	
КонецПроцедуры

Функция ВсеГотовоДляОбновленияЦенИзЗаказаПоставщику()
	
	ВсеОК = Истина;
	
	Если Сделка = Неопределено Или Сделка.Пустая() Или НЕ ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		ВсеОК = Ложь;
		Предупреждение("Укажите заказ поставщику", 20);
	КонецЕсли;
	
	Возврат ВсеОК;
	
КонецФункции // ВсеГотовоДляОбновленияЦенИзЗаказаПоставщику()

Процедура КоманднаяПанельТоварыОбновитьЦеныИзЗаказаПоставщику(Кнопка)
	
	Если НЕ ВсеГотовоДляОбновленияЦенИзЗаказаПоставщику() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	тзТовары.Номенклатура,
	|	тзТовары.Цена
	|ПОМЕСТИТЬ втПоступления
	|ИЗ
	|	&тзТовары КАК тзТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПоставщикуТовары.Номенклатура КАК НоменклатураЗаказ,
	|	ЗаказПоставщикуТовары.Цена
	|ПОМЕСТИТЬ втЗаказы
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|ГДЕ
	|	ЗаказПоставщикуТовары.Ссылка = &ДокЗаказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втЗаказы.НоменклатураЗаказ) КАК НоменклатураЗаказ
	|ИЗ
	|	втЗаказы КАК втЗаказы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втЗаказы.Цена,
	|	втПоступления.Номенклатура
	|ИЗ
	|	втПоступления КАК втПоступления
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЗаказы КАК втЗаказы
	|		ПО втПоступления.Номенклатура = втЗаказы.НоменклатураЗаказ
	|ГДЕ
	|	НЕ втПоступления.Цена = втЗаказы.Цена";
	
	тзТовары = Товары.Выгрузить(, "Номенклатура, Цена");
	Запрос.УстановитьПараметр("тзТовары", тзТовары);
	Запрос.УстановитьПараметр("ДокЗаказ", Сделка);
	
	РезультатПакет = Запрос.ВыполнитьПакет();
	
	Если РезультатПакет[1].Выгрузить().Количество() > 0 И РезультатПакет[2].Выгрузить().Количество() > 0 И 
			РезультатПакет[1].Выгрузить()[0].Количество = РезультатПакет[2].Выгрузить()[0].НоменклатураЗаказ Тогда // В заказе нет повторений номенклатуры
			
		тзРасхожденияЦен = РезультатПакет[3].Выгрузить();
		Для Каждого ТекСтрТовар Из Товары Цикл
			СтрРасхождениеЦен = тзРасхожденияЦен.Найти(ТекСтрТовар.Номенклатура, "Номенклатура");
			Если НЕ СтрРасхождениеЦен = Неопределено Тогда
				ТекСтрТовар.Цена = СтрРасхождениеЦен.Цена;
				РассчитатьСуммуТабЧасти(ТекСтрТовар, ЭтотОбъект);
				РассчитатьСуммуНДСТабЧасти(ТекСтрТовар, ЭтотОбъект);
			Иначе
				Если ТекСтрТовар.СтавкаНДС.Пустая() Тогда
					ТекСтрТовар.СтавкаНДС = ТекСтрТовар.Номенклатура.СтавкаНДС;
					РассчитатьСуммуНДСТабЧасти(ТекСтрТовар, ЭтотОбъект);
				КонецЕсли;
				Если ТекСтрТовар.СуммаНДС = 0 Тогда
					РассчитатьСуммуНДСТабЧасти(ТекСтрТовар, ЭтотОбъект);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Предупреждение("Не удается загрузить цены из заказа поставщику.
		|Возможно, в нем повторяется номенклатура", 20);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИспользованиеСтатусаПоступленияВозвратаПриОткрытииФормы()
	
	РаботаСоСтатусомПоступленияВозврата = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РаботаСоСтатусомПоступленияВозврата");
	
	СтатусПоступленияВозвратаВидимостьУстановить(РаботаСоСтатусомПоступленияВозврата);
	СтатусПоступленияВозврата = ПолучитьСтатусПоступленияВозврата(РаботаСоСтатусомПоступленияВозврата);
	
КонецПроцедуры // ИспользованиеСтатусаПоступленияВозвратаПриОткрытииФормы()

Процедура СтатусПоступленияВозвратаВидимостьУстановить(РаботаСоСтатусомПоступленияВозврата)
	
	СвойствоОбъектовСтатусПоступленияВозврата = ПланыВидовХарактеристик.СвойстваОбъектов.СтатусПоступленияВозврата;
	ЭлементыФормы.СвойствоОбъектовСтатусПоступленияВозврата.Видимость = Ложь;
	
	ЭлементыФормы.СтатусПоступленияВозврата.Видимость        = РаботаСоСтатусомПоступленияВозврата;
	ЭлементыФормы.НадписьСтатусПоступленияВозврата.Видимость = РаботаСоСтатусомПоступленияВозврата;
	//+++ 22.01.2018 --- надпись единая
	Если РаботаСоСтатусомПоступленияВозврата тогда
		ЭлементыФормы.ЗаданиеНаОтгрузкуТекст.Заголовок = "Статус:";
	Иначе
		Если ЗаданиеНаОтгрузку=Неопределено тогда
			ЭлементыФормы.ЗаданиеНаОтгрузкуТекст.Заголовок = "Основание:";
		ИначеЕсли ТипЗнч(ЗаданиеНаОтгрузку) = Тип("ДокументСсылка.ЗаданиеНаОтгрузку") тогда
			ЭлементыФормы.ЗаданиеНаОтгрузкуТекст.Заголовок = "Задание:";
		ИначеЕсли ТипЗнч(ЗаданиеНаОтгрузку) = Тип("ДокументСсылка.ВыплатаБонусовКонтрагентам") тогда
			ЭлементыФормы.ЗаданиеНаОтгрузкуТекст.Заголовок = "Выплата:";
		КонецЕсли;	
	КонецЕсли;	
	ЭлементыФормы.ЗаданиеНаОтгрузкуСсылка.Видимость = не РаботаСоСтатусомПоступленияВозврата;
	ЭлементыФормы.ЗаданиеНаОтгрузкуТекст.Видимость = не РаботаСоСтатусомПоступленияВозврата;
КонецПроцедуры // СтатусПоступленияВозвратаВидимостьУстановить()

Функция ПолучитьСтатусПоступленияВозврата(РаботаСоСтатусомПоступленияВозврата)
	
	Если РаботаСоСтатусомПоступленияВозврата = Истина Тогда
		МенеджерЗаписи = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект   = Ссылка;
		МенеджерЗаписи.Свойство = СвойствоОбъектовСтатусПоступленияВозврата;
		МенеджерЗаписи.Прочитать();
		Рез = МенеджерЗаписи.Значение;
	Иначе
		Рез = Неопределено;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // ПолучитьСтатусПоступленияВозврата()

Процедура СтатусПоступленияВозвратаПриИзменении(Элемент)
	
	УстановитьСтатусПоступленияВозврата();
	
КонецПроцедуры

Процедура УстановитьСтатусПоступленияВозврата()
	
	МенеджерЗаписи = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект   = Ссылка;
	МенеджерЗаписи.Свойство = СвойствоОбъектовСтатусПоступленияВозврата;
	МенеджерЗаписи.Значение = СтатусПоступленияВозврата;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры // УстановитьСтатусПоступленияВозврата()

Процедура СделкаПриИзменении(Элемент)
	Если ( ЗначениеЗаполнено(Сделка))
		И (ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику"))
		И ГрафикОплаты.Количество()=0 Тогда
		
		строкаГрафикаОплаты = ГрафикОплаты.Добавить();	
		строкаГрафикаОплаты.ПроцентОплаты=100;
		
		Если Сделка.ИспользоватьЧислоДнейДоОплаты Тогда
			строкаГрафикаОплаты.Дата=НачалоДня(ЭтотОбъект.Дата+86400*Сделка.ЧислоДнейДоОплаты);
		Иначе //+++ 18.09.2014  фикс дата оплаты из Заказа поставщику
			строкаГрафикаОплаты.Дата = Сделка.ДатаОплаты;
		КонецЕсли;
		
		Если строкаГрафикаОплаты.Дата < НачалоДня(ТекущаяДата()) Тогда
			строкаГрафикаОплаты.Дата = НачалоДня(ТекущаяДата()) + 3*86400; //+ 3 дня, т.к. Если это пятница, то оплата не раньше понедельника
			Сообщить("Дата оплаты НЕ может быть меньше текущей даты! Дата оплаты автоматически изменена на "+формат(строкаГрафикаОплаты.Дата,"ДЛФ=DD"), СтатусСообщения.Внимание);
		КонецЕсли;
		
	конецЕсли;
КонецПроцедуры

//Процедура ГрафикОплатыСуммаПлатежаПриИзменении(Элемент)
//	стр = ЭлементыФормы.ГрафикОплаты.ТекущиеДанные;
//	стр.ПроцентОплаты = Окр(Стр.СуммаОплаты/СуммаДокумента*100,2);
//КонецПроцедуры

Процедура ГрафикОплатыПроцентОплатыПриИзменении(Элемент)
	ЭлементыФормы.ГрафикОплаты.ТекущаяСтрока.СуммаОплаты = (СуммаДокумента/100)*(Элемент.Значение);
КонецПроцедуры

Процедура ГрафикОплатыСуммаОплатыПриИзменении(Элемент)
	ЭлементыФормы.ГрафикОплаты.ТекущаяСтрока.ПроцентОплаты = (Элемент.Значение*100)/(СуммаДокумента);
КонецПроцедуры

Процедура ПоступленияЗаданиеНаОтгрузкуОткрытие(Элемент, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ЭтаФорма.ТекущийЭлемент.ТекущаяСтрока.ПоступлениеТоваровУслуг.ЗаданиеНаОтгрузку) Тогда
		ЭтаФорма.ТекущийЭлемент.ТекущаяСтрока.ПоступлениеТоваровУслуг.ЗаданиеНаОтгрузку.ПолучитьФорму().Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура ЗаданиеНаОтгрузкуСсылкаПриИзменении(Элемент)
	ИспользованиеСтатусаПоступленияВозвратаПриОткрытииФормы();
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары         = ЭлементыФормы.Товары.Колонки;
мКолонкиВозвратнаяТара = ЭлементыФормы.ВозвратнаяТара.Колонки;
мКолонкиУслуги         = ЭлементыФормы.Услуги.Колонки;

УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
мСкладИзШапки   =   (УказаниеСкладов <> Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
                  И (УказаниеСкладов <> Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления);

мРазрешитьНулевыеЦеныВОпте = РазрешитьНулевыеЦеныВОпте();