Перем мВалютаРегламентированногоУчета Экспорт;   
Перем мПорядокСписанияПартий; // (Общ)
Перем МодифицированДок Экспорт;

//БАЛАНС (04.12.2007)                       
//
Перем мПроведениеИзФормы Экспорт; 

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
Функция ПечатьСвязанныеРеализации()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Поступление", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТранспортныеЗатратыПоРеализациям.Реализация,
	|	ТранспортныеЗатратыПоРеализациям.Возмещение
	|ПОМЕСТИТЬ втРеализации
	|ИЗ
	|	РегистрСведений.ТранспортныеЗатратыПоРеализациям КАК ТранспортныеЗатратыПоРеализациям
	|ГДЕ
	|	ТранспортныеЗатратыПоРеализациям.Поступление = &Поступление
	|
	|СГРУППИРОВАТЬ ПО
	|	ТранспортныеЗатратыПоРеализациям.Реализация,
	|	ТранспортныеЗатратыПоРеализациям.Возмещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Дата, ПеремещениеТоваров.Дата) КАК Дата,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Контрагент, ПеремещениеТоваров.Подразделение) КАК Контрагент,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.ГосНомерАвтомобиля, ПеремещениеТоваров.ГосНомерАвтомобиля) КАК ГосНомер,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.СуммаДокумента, 0) КАК СуммаДокумента,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Ссылка, ПеремещениеТоваров.Ссылка) КАК Реализация,
	|	ВЫБОР
	|		КОГДА втРеализации.Возмещение
	|			ТОГДА ""+""
	|	КОНЕЦ КАК Возмещение
	|ИЗ
	|	втРеализации КАК втРеализации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО втРеализации.Реализация = РеализацияТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|		ПО втРеализации.Реализация = ПеремещениеТоваров.Ссылка";
	Рез = Запрос.Выполнить().Выбрать();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_СвязанныеРеализации";
	Макет       = ПолучитьМакет("СвязанныеРеализации");
	
	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(ЭтотОбъект.Ссылка, "Связанные с поступлением")+" реализации";
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");

	НомерСтроки=1;
	Пока Рез.Следующий() цикл
		ОбластьМакета.Параметры.НомерСтроки=НомерСтроки;
		ОбластьМакета.Параметры.Заполнить(Рез);
		ТабДокумент.Вывести(ОбластьМакета);
		НомерСтроки=НомерСтроки+1;
    КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции // ()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьПоступлениеТоваров()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	Конецесли;

	Если Товары.Итог("КоличествоМест") > 0 Тогда
		ОбластьШапки  = ОбластьШапки  + "Мест";
		ОбластьСтроки = ОбластьСтроки + "Мест";
	Конецесли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДатаВходящегоДокумента,
	|	ДоговорКонтрагента,
	|	Контрагент,
	|	Контрагент КАК Поставщик,
	|	Организация,
	|	Организация КАК Покупатель,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросПоТоварам.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	ВложенныйЗапрос.Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|	ВложенныйЗапрос.КоличествоМест,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.Коэффициент,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.СтавкаНДС,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Серия,
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.Метка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПоступлениеТоваровУслуг.Номенклатура КАК Номенклатура,
	|		СУММА(ПоступлениеТоваровУслуг.КоличествоМест) КАК КоличествоМест,
	|		СУММА(ПоступлениеТоваровУслуг.Количество) КАК Количество,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		ПоступлениеТоваровУслуг.Коэффициент КАК Коэффициент,
	|		ПоступлениеТоваровУслуг.Цена КАК Цена,
	|		СУММА(ПоступлениеТоваровУслуг.Сумма) КАК Сумма,
	|		СУММА(ПоступлениеТоваровУслуг.СуммаНДС) КАК СуммаНДС,
	|		ПоступлениеТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
	|		ПоступлениеТоваровУслуг.ХарактеристикаНоменклатуры КАК Характеристика,
	|		ПоступлениеТоваровУслуг.СерияНоменклатуры КАК Серия,
	|		МИНИМУМ(ПоступлениеТоваровУслуг.НомерСтроки) КАК НомерСтроки,
	|		0 КАК Метка
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
	|	
	|	ГДЕ
	|		ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПоступлениеТоваровУслуг.Номенклатура,
	|		ПоступлениеТоваровУслуг.СтавкаНДС,
	|		ПоступлениеТоваровУслуг.Цена,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмерения,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмеренияМест,
	|		ПоступлениеТоваровУслуг.Коэффициент,
	|		ПоступлениеТоваровУслуг.ХарактеристикаНоменклатуры,
	|		ПоступлениеТоваровУслуг.СерияНоменклатуры) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Содержание,
	|	ПоступлениеТоваровУслуг.Содержание,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ПоступлениеТоваровУслуг.Количество,
	|	1,
	|	ПоступлениеТоваровУслуг.Цена,
	|	ПоступлениеТоваровУслуг.Сумма,
	|	ПоступлениеТоваровУслуг.СуммаНДС,
	|	ПоступлениеТоваровУслуг.СтавкаНДС,
	|	NULL,
	|	NULL,
	|	НомерСтроки,
	|	1 КАК Метка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслуг
	|
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Номенклатура,
	|	ВЫРАЗИТЬ(ПоступлениеТоваровУслуг.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	ПоступлениеТоваровУслуг.Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|	NULL,
	|	NULL,
	|	ПоступлениеТоваровУслуг.Количество,
	|	1,
	|	ПоступлениеТоваровУслуг.Цена,
	|	ПоступлениеТоваровУслуг.Сумма,
	|	0,
	|	""Без НДС"",
	|	NULL,
	|	NULL,
	|	НомерСтроки,
	|	2 КАК Метка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара КАК ПоступлениеТоваровУслуг
	|
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|";

	ВыборкаСтрок = ЗапросПоТоварам.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_Накладная";
	Макет       = ПолучитьМакет("Накладная");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Накладная");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.Поставщик = Шапка.Контрагент;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.Получатель = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.Колонка = Колонка;
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
	Сумма    = 0;
	СуммаНДС = 0;

	Для Каждого ВыборкаСтрокТовары Из ВыборкаСтрок Цикл

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.НомерСтроки = ВыборкаСтрок.Индекс(ВыборкаСтрокТовары) + 1;
		ОбластьМакета.Параметры.Товар       = СокрЛП(ВыборкаСтрокТовары.Товар) + ПредставлениеСерий(ВыборкаСтрокТовары)
		                                    + ?(ВыборкаСтрокТовары.Метка = 2, " (возвратная тара)", "");

		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакета);

		Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
		СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;

	КонецЦикла;

	// Вывести Итого
	ОбластьМакета                 = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьМакета                    = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ФорматСумм(СуммаНДС);
		ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета                          = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи                          = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ВыборкаСтрок.Количество()
	                                       + ", на сумму " + ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью  = СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПоступлениеТоваров()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьТОРГ12ЗаПоставщика()

	ЕдиницаИзмеренияВеса = Константы.ЕдиницаИзмеренияВеса.Получить();

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Дата КАК Дата,
	|	ДатаВходящегоДокумента  КАК ДатаДокумента,
	|	НомерВходящегоДокумента КАК НомерДокумента,
	|	Организация             КАК Организация,
	|	Организация             КАК Грузополучатель,
	|	Организация             КАК Плательщик,
	|	Контрагент,
	|	Контрагент              КАК Поставщик,
	|	БанковскийСчетКонтрагента КАК БанковскийСчет,
	|	ДоговорКонтрагента.Представление КАК Основание,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
	|	ВалютаДокумента,
	|	КурсВзаиморасчетов      КАК Курс,
	|	КратностьВзаиморасчетов КАК Кратность,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", Ссылка);

	Если ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда

		// Документ оформлен в валюте взаиморасчетов
		ЗапросПоТоварам.УстановитьПараметр("Курс", КурсВзаиморасчетов);
		ЗапросПоТоварам.УстановитьПараметр("Кратность", КратностьВзаиморасчетов);

	Иначе

		// Документ оформлен в валюте регламентированного учета
		ЗапросПоТоварам.УстановитьПараметр("Курс", 1);
		ЗапросПоТоварам.УстановитьПараметр("Кратность", 1);

	КонецЕсли;

	ЗапросПоТоварам.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура                    КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура." + ТоварКод + "   КАК ТоварКод,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление                КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код  КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВложенныйЗапрос.ЕдиницаИзмерения                              КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмеренияМест.Представление            КАК ВидУпаковки,
	|	ВложенныйЗапрос.КоэффициентМест / ВложенныйЗапрос.Коэффициент КАК КоличествоВОдномМесте,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КоличествоМест > 0 ТОГДА ВложенныйЗапрос.КоличествоМест * ВложенныйЗапрос.ЕдиницаИзмеренияМест.Вес
	|		ИНАЧЕ ВложенныйЗапрос.Количество * ВложенныйЗапрос.ЕдиницаИзмерения.Вес
	|	КОНЕЦ КАК МассаБрутто,
	|	ВложенныйЗапрос.Характеристика      КАК Характеристика,
	|	ВложенныйЗапрос.Серия               КАК Серия,
	|	ВложенныйЗапрос.СтавкаНДС           КАК СтавкаНДС,
	|	ВложенныйЗапрос.Цена                КАК Цена,
	|	ВложенныйЗапрос.Количество          КАК Количество,
	|	ВложенныйЗапрос.КоличествоМест      КАК КоличествоМест,
	|	ВложенныйЗапрос.Сумма               КАК Сумма,
	|	ВложенныйЗапрос.СуммаНДС            КАК СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки         КАК НомерСтроки,
	|	ВложенныйЗапрос.Метка               КАК Метка
	|ИЗ
	|
	|	(
	|	ВЫБРАТЬ
	|		ПоступлениеТоваровУслуг.Номенклатура,
	|		ПоступлениеТоваровУслуг.Коэффициент,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмерения,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмеренияМест,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмеренияМест.Коэффициент     КАК КоэффициентМест,
	|		ПоступлениеТоваровУслуг.ХарактеристикаНоменклатуры           КАК Характеристика,
	|		ПоступлениеТоваровУслуг.СерияНоменклатуры                    КАК Серия,
	|		ПоступлениеТоваровУслуг.СтавкаНДС,
	|		ПоступлениеТоваровУслуг.Цена * &Курс / &Кратность            КАК Цена,
	|		СУММА(ПоступлениеТоваровУслуг.Количество)                    КАК Количество,
	|		СУММА(ПоступлениеТоваровУслуг.КоличествоМест)                КАК КоличествоМест,
	|		СУММА(ПоступлениеТоваровУслуг.Сумма    * &Курс / &Кратность) КАК Сумма,
	|		СУММА(ПоступлениеТоваровУслуг.СуммаНДС * &Курс / &Кратность) КАК СуммаНДС,
	|		МИНИМУМ(ПоступлениеТоваровУслуг.НомерСтроки)                 КАК НомерСтроки,
	|		0                                                            КАК Метка
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
	|	ГДЕ
	|		ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|		ПоступлениеТоваровУслуг.Номенклатура,
	|		ПоступлениеТоваровУслуг.Коэффициент,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмерения,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмеренияМест,
	|		ПоступлениеТоваровУслуг.ХарактеристикаНоменклатуры,
	|		ПоступлениеТоваровУслуг.СерияНоменклатуры,
	|		ПоступлениеТоваровУслуг.СтавкаНДС,
	|		ПоступлениеТоваровУслуг.Цена
	|
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Номенклатура                  КАК Номенклатура,
	|	ПоступлениеТоваровУслуг.Содержание                    КАК ТоварНаименование,
	|	ПоступлениеТоваровУслуг.Номенклатура." + ТоварКод + " КАК ТоварКод,
	|	ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Представление               КАК БазоваяЕдиницаНаименование,
	|	ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков                             КАК ЕдиницаИзмерения,
	|	NULL                                                  КАК ВидУпаковки,
	|	NULL                                                  КАК КоличествоВОдномМесте,
	|	0                                                     КАК МассаБрутто,
	|	NULL                                                  КАК Характеристика,
	|	NULL                                                  КАК Серия,
	|	ПоступлениеТоваровУслуг.СтавкаНДС                     КАК СтавкаНДС,
	|	ПоступлениеТоваровУслуг.Цена * &Курс / &Кратность     КАК Цена,
	|	ПоступлениеТоваровУслуг.Количество                    КАК Количество,
	|	NULL                                                  КАК КоличествоМест,
	|	ПоступлениеТоваровУслуг.Сумма    * &Курс / &Кратность КАК Сумма,
	|	ПоступлениеТоваровУслуг.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
	|	ПоступлениеТоваровУслуг.НомерСтроки                   КАК НомерСтроки,
	|	1                                                     КАК Метка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслуг
	|
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Номенклатура                    КАК Номенклатура,
	|	ВЫРАЗИТЬ(ПоступлениеТоваровУслуг.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ПоступлениеТоваровУслуг.Номенклатура." + ТоварКод + "   КАК ТоварКод,
	|	ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Представление               КАК БазоваяЕдиницаНаименование,
	|	ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков                             КАК ЕдиницаИзмерения,
	|	NULL                                                  КАК ВидУпаковки,
	|	NULL                                                  КАК КоличествоВОдномМесте,
	|	ПоступлениеТоваровУслуг.Количество * ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Вес КАК МассаБрутто,
	|	NULL                                                  КАК Характеристика,
	|	NULL                                                  КАК Серия,
	|	""Без НДС""                                           КАК СтавкаНДС,
	|	ПоступлениеТоваровУслуг.Цена * &Курс / &Кратность     КАК Цена,
	|	ПоступлениеТоваровУслуг.Количество                    КАК Количество,
	|	NULL                                                  КАК КоличествоМест,
	|	ПоступлениеТоваровУслуг.Сумма * &Курс / &Кратность    КАК Сумма,
	|	0                                                     КАК СуммаНДС,
	|	ПоступлениеТоваровУслуг.НомерСтроки                   КАК НомерСтроки,
	|	2                                                     КАК Метка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара КАК ПоступлениеТоваровУслуг
	|
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|";

	ВыборкаСтрок = ЗапросПоТоварам.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_ТОРГ12";

	Макет = ПолучитьОбщийМакет("ТОРГ12");

	// Выводим общие реквизиты шапки
	СведенияОПокупателе = СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	СведенияОПоставщике = СведенияОЮрФизЛице(Шапка.Контрагент,  Шапка.Дата,, Шапка.БанковскийСчет);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.НомерДокумента = Шапка.НомерДокумента;
	ОбластьМакета.Параметры.ДатаДокумента  = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ОписаниеОрганизации(СведенияОПокупателе,"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	ОбластьМакета.Параметры.ПредставлениеПлательщика     = ОписаниеОрганизации(СведенияОПокупателе);

	Если Шапка.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	   И Шапка.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ОбластьМакета.Параметры.Основание = Шапка.Основание;
	Иначе
		ЗапросЗаказ = Новый Запрос;
		ЗапросЗаказ.УстановитьПараметр("ТекущийДокумент", Ссылка);
		ЗапросЗаказ.Текст =
		"ВЫБРАТЬ
		|	Сделка.Номер       КАК Номер,
		|	Сделка.Дата        КАК Дата,
		|	Сделка.ВидОперации КАК ВидОперации,
		|	Сделка.Организация КАК Организация
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент";
		ШапкаЗаказ = ЗапросЗаказ.Выполнить().Выбрать();
		ШапкаЗаказ.Следующий();

		ОбластьМакета.Параметры.Основание = СформироватьЗаголовокДокумента(ШапкаЗаказ, Строка(ШапкаЗаказ.ВидОперации));
	КонецЕсли;

	// Если Значение поля Контрагент не заполнено, то это возможно только для
	// вида операции "Ответственное хранение (купля-продажа/комиссия)".
	Если ТипЗнч(СведенияОПоставщике) = Тип("Структура") тогда
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ОписаниеОрганизации(СведенияОПоставщике);
		ОбластьМакета.Параметры.ПредставлениеПоставщика  = ОписаниеОрганизации(СведенияОПоставщике);
		ОбластьМакета.Параметры.ОрганизацияПоОКПО = СведенияОПоставщике.КодПоОКПО;
		ОбластьМакета.Параметры.ПоставщикПоОКПО   = СведенияОПоставщике.КодПоОКПО;
	КонецЕсли;

	ОбластьМакета.Параметры.ВидДеятельностиПоОКДП = "";
	ОбластьМакета.Параметры.ГрузополучательПоОКПО = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакета.Параметры.ПлательщикПоОКПО      = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакета.Параметры.ОснованиеНомер        = "";
	ОбластьМакета.Параметры.ОснованиеДата         = "";
	ОбластьМакета.Параметры.ТранспортнаяНакладнаяНомер = "";
	ОбластьМакета.Параметры.ТранспортнаяНакладнаяДата  = "";

	ТабДокумент.Вывести(ОбластьМакета);

	// выясним, какую вертикальную секцию будем использовать
	СтрокНаСтранице = 20;
	СтрокШапки      = 10;
	СтрокПодвала    = 9;
	НомерСтраницы   = 1;

	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
	ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	КоличествоСтрок = ВыборкаСтрок.Количество();

	Если КоличествоСтрок <= 2 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// инициализация итогов по странице
	ИтогоМассаБруттоНаСтранице = 0;
	ИтогоМестНаСтранице        = 0;
	ИтогоКоличествоНаСтранице  = 0;
	ИтогоСуммаНаСтранице       = 0;
	ИтогоНДСНаСтранице         = 0;
	ИтогоСуммаСНДСНаСтранице   = 0;

	// инициализация итогов по документу
	ИтогоМассаБрутто = 0;
	ИтогоМест        = 0;
	ИтогоКоличество  = 0;
	ИтогоСумма       = 0;
	ИтогоНДС         = 0;
	ИтогоСуммаСНДС   = 0;
	Ном              = 0;

	// Выводим многострочную часть докмента
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для Каждого ВыборкаСтрокТовары Из ВыборкаСтрок Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			#Если Клиент тогда
				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			#КонецЕсли
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");

			ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице = ИтогоМассаБруттоНаСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогМестПоСтранице        = ИтогоМестНаСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоПоСтранице  = ИтогоКоличествоНаСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице       = ИтогоСуммаНаСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогНДСПоСтранице         = ИтогоНДСНаСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице   = ИтогоСуммаСНДСНаСтранице;

			ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

			// очистим итоги по странице
			ИтогоМассаБруттоНаСтранице = 0;
			ИтогоМестНаСтранице        = 0;
			ИтогоКоличествоНаСтранице  = 0;
			ИтогоСуммаНаСтранице       = 0;
			ИтогоНДСНаСтранице         = 0;
			ИтогоСуммаСНДСНаСтранице   = 0;

			НомерСтраницы = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);

		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.Номер = ВыборкаСтрок.Индекс(ВыборкаСтрокТовары) + 1;

		СуммаСНДС = (ВыборкаСтрокТовары.Сумма
			+ ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрокТовары.СуммаНДС));

		Если ЗначениеНеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
			МассаБрутто = 0;
		Иначе
			МассаБрутто = ВыборкаСтрокТовары.МассаБрутто;
			МассаБрутто = ?(МассаБрутто <> Неопределено И МассаБрутто <> NULL, МассаБрутто, 0);
		КонецЕсли;

		Мест        = ВыборкаСтрокТовары.КоличествоМест;
		Мест        = ?(Мест <> Неопределено И Мест <> NULL, Мест, 0);

		Количество  = ВыборкаСтрокТовары.Количество;
		СуммаНДС    = ВыборкаСтрокТовары.СуммаНДС;
		СуммаБезНДС = СуммаСНДС    - СуммаНДС;

		ОбластьМакета.Параметры.МассаБрутто = МассаБрутто;
		ОбластьМакета.Параметры.СуммаСНДС   = СуммаСНДС;
		ОбластьМакета.Параметры.СуммаНДС    = СуммаНДС;
		ОбластьМакета.Параметры.СтавкаНДС   = ВыборкаСтрокТовары.СтавкаНДС;
		ОбластьМакета.Параметры.СуммаБезНДС = СуммаБезНДС;
		ОбластьМакета.Параметры.Цена        = СуммаБезНДС / ?(Количество = 0, 1, Количество);
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование)
		                                          + ПредставлениеСерий(ВыборкаСтрокТовары)
		                                          + ?(ВыборкаСтрокТовары.Метка = 2, " (возвратная тара)", "");

		ТабДокумент.Вывести(ОбластьМакета);

		// увеличим итоги по странице
		ИтогоМассаБруттоНаСтранице = ИтогоМассаБруттоНаСтранице + МассаБрутто;
		ИтогоМестНаСтранице        = ИтогоМестНаСтранице        + Мест;
		ИтогоКоличествоНаСтранице  = ИтогоКоличествоНаСтранице  + Количество;
		ИтогоСуммаНаСтранице       = ИтогоСуммаНаСтранице       + СуммаБезНДС;
		ИтогоНДСНаСтранице         = ИтогоНДСНаСтранице         + СуммаНДС;
		ИтогоСуммаСНДСНаСтранице   = ИтогоСуммаСНДСНаСтранице   + СуммаСНДС;

		// увеличим итоги по дукументу
		ИтогоМассаБрутто = ИтогоМассаБрутто + МассаБрутто;
		ИтогоМест        = ИтогоМест        + Мест;
		ИтогоКоличество  = ИтогоКоличество  + Количество;
		ИтогоСумма       = ИтогоСумма       + СуммаБезНДС;
		ИтогоНДС         = ИтогоНДС         + СуммаНДС;
		ИтогоСуммаСНДС   = ИтогоСуммаСНДС   + СуммаСНДС;

	КонецЦикла;

	// Выводим итоги по последней странице
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице = ИтогоМассаБруттоНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогМестПоСтранице        = ИтогоМестНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоПоСтранице  = ИтогоКоличествоНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице       = ИтогоСуммаНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогНДСПоСтранице         = ИтогоНДСНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице   = ИтогоСуммаСНДСНаСтранице;

	ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
	
	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогМассаБрутто = ИтогоМассаБрутто;
	ОбластьМакета.Параметры.ИтогМест        = ИтогоМест;
	ОбластьМакета.Параметры.ИтогКоличество  = ИтогоКоличество;
	ОбластьМакета.Параметры.ИтогСуммы       = ИтогоСумма;
	ОбластьМакета.Параметры.ИтогНДС         = ИтогоНДС;
	ОбластьМакета.Параметры.ИтогСуммыСНДС   = ИтогоСуммаСНДС;

	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");

	Если НЕ ЗначениеНеЗаполнено(ЕдиницаИзмеренияВеса) И ИтогоМассаБрутто > 0 Тогда
		ОбластьМакета.Параметры.МассаГрузаПрописью = ЧислоПрописью(ИтогоМассаБрутто, ,",,,,,,,,0")+ " " +ЕдиницаИзмеренияВеса.Наименование + ".";
	КонецЕсли;

	Если ИтогоМест > 0 Тогда
		ОбластьМакета.Параметры.ВсегоМестПрописью = ЧислоПрописью(ИтогоМест, ,",,,,,,,,0");
	КонецЕсли;

	ОбластьМакета.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ОбластьМакета.Параметры.СуммаПрописью = СформироватьСуммуПрописью(ИтогоСуммаСНДС, мВалютаРегламентированногоУчета);
	ТабДокумент.Вывести(ОбластьМакета);

	// Зададим параметры макета
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 0;
	ТабДокумент.РазмерКолонтитулаСнизу  = 0;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;

	Возврат ТабДокумент;

КонецФункции // ПечатьТОРГ12ЗаПоставщика()

// Функция формирует табличный документ унифицированной формы ТОРГ-4
// "Акт о приемке товара, поступившего без счета поставщика"
//
// Возвращаемое значение:
//  Табличный документ - печатная форма ТОРГ-4
//
Функция ПечатьТОРГ4()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент",     Ссылка);
	Запрос.УстановитьПараметр("ВидПоступленияОрдер", Перечисления.ВидыПоступленияТоваров.ПоОрдеру);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер КАК Номер,
	|	Дата  КАК ДатаДокумента,
	|	ДатаВходящегоДокумента  КАК ДатаДокументаСопровождения,
	|	НомерВходящегоДокумента КАК НомерДокументаСопровождения,
	|	Организация,
	|	Организация КАК ЮрФизЛицо,
	|	Организация КАК Руководители,
	|	Контрагент,
	|	Контрагент КАК Поставщик,
	|	Контрагент КАК Грузоотправитель,
	|	Подразделение.Представление КАК ПредставлениеПодразделения,
	|	Подразделение,
	|	ВЫБОР
	|		КОГДА ВидПоступления = &ВидПоступленияОрдер ТОГДА СкладОрдер.Склад
	|		ИНАЧЕ СкладОрдер
	|	КОНЕЦ КАК МестоПриемки,
	|	ВалютаДокумента,
	|	КурсВзаиморасчетов      КАК Курс,
	|	КратностьВзаиморасчетов КАК Кратность
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросПоТоварам.УстановитьПараметр("Курс",            КурсВзаиморасчетов);
	ЗапросПоТоварам.УстановитьПараметр("Кратность",       КратностьВзаиморасчетов);

	ЗапросПоТоварам.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура." + ТоварКод + "   КАК ТоварКод,
	|	ВложенныйЗапрос.КоличествоМест,
	|	ВложенныйЗапрос.Количество КАК КоличествоШтук,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	ВложенныйЗапрос.КоэффициентМест / ВложенныйЗапрос.Коэффициент КАК КоличествоВОдномМесте,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Стоимость,
	|	ВложенныйЗапрос.СтавкаНДС,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Серия,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	ВложенныйЗапрос.Метка       КАК Метка
	|
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		ПоступлениеТоваровУслуг.Номенклатура,
	|		СУММА(ПоступлениеТоваровУслуг.КоличествоМест) КАК КоличествоМест,
	|		СУММА(ПоступлениеТоваровУслуг.Количество) КАК Количество,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмерения,
	|		ПоступлениеТоваровУслуг.Коэффициент,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмеренияМест,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмеренияМест.Коэффициент  КАК КоэффициентМест,
	|		ПоступлениеТоваровУслуг.Цена        * &Курс / &Кратность  КАК Цена,
	|		СУММА(ПоступлениеТоваровУслуг.Сумма * &Курс / &Кратность) КАК Стоимость,
	|		ПоступлениеТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
	|		ПоступлениеТоваровУслуг.ХарактеристикаНоменклатуры КАК Характеристика,
	|		ПоступлениеТоваровУслуг.СерияНоменклатуры          КАК Серия,
	|		МИНИМУМ(ПоступлениеТоваровУслуг.НомерСтроки)       КАК НомерСтроки,
	|		0                                                  КАК Метка
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
	|
	|	ГДЕ
	|		ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		ПоступлениеТоваровУслуг.Номенклатура,
	|		ПоступлениеТоваровУслуг.СтавкаНДС,
	|		ПоступлениеТоваровУслуг.Цена,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмерения,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмеренияМест,
	|		ПоступлениеТоваровУслуг.Коэффициент,
	|		ПоступлениеТоваровУслуг.ХарактеристикаНоменклатуры,
	|		ПоступлениеТоваровУслуг.СерияНоменклатуры
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Номенклатура,
	|	ВЫРАЗИТЬ(ПоступлениеТоваровУслуг.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ПоступлениеТоваровУслуг.Номенклатура." + ТоварКод + "   КАК ТоварКод,
	|	0,
	|	ПоступлениеТоваровУслуг.Количество КАК КоличествоШтук,
	|	ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Представление               КАК ЕдиницаИзмеренияНаименование,
	|	ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	0,
	|	ПоступлениеТоваровУслуг.Цена  * &Курс / &Кратность,
	|	ПоступлениеТоваровУслуг.Сумма * &Курс / &Кратность,
	|	""Без НДС"",
	|	NULL,
	|	NULL,
	|	ПоступлениеТоваровУслуг.НомерСтроки КАК НомерСтроки,
	|	2                                   КАК Метка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара КАК ПоступлениеТоваровУслуг
	|
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|
	|";
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	Макет = ПолучитьОбщийМакет("ТОРГ4");

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_ТОРГ4";

	// Выводим общие реквизиты шапки
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");

	СведенияОПокупателе = СведенияОЮрФизЛице(Шапка.ЮрФизЛицо, Шапка.ДатаДокумента);

	Если НЕ ЗначениеНеЗаполнено(Шапка.Контрагент) Тогда
		СведенияОПоставщике = СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента);
		ОбластьМакета.Параметры.ПредставлениеПоставщика       = ОписаниеОрганизации(СведенияОПоставщике);
		ОбластьМакета.Параметры.ОписаниеПоставщика            = ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		ОбластьМакета.Параметры.ПоставщикПоОКПО               = СведенияОПоставщике.КодПоОКПО;
	КонецЕсли;

	Руководители = ОтветственныеЛицаОрганизации(Шапка.Руководители, Шапка.ДатаДокумента,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;

	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.НомерДокумента           = ПолучитьНомерНаПечать(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ОписаниеОрганизации(СведенияОПокупателе);
	ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакета.Параметры.ГрузополучательПоОКПО    = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакета.Параметры.ФИОРуководителя          = Руководитель;
	ОбластьМакета.Параметры.ДожностьРуководителя     = Руководители.РуководительДолжность;
	ОбластьМакета.Параметры.РеквизитыСопроводительногоДокумента = "сопроводительный документ № "
	                                                            + Шапка.НомерДокументаСопровождения + " от "
	                                                            + Формат(Шапка.ДатаДокументаСопровождения, "ДФ='дд ММММ гггг'");

	ТабДокумент.Вывести(ОбластьМакета);

	СтрокНаСтранице = 23;
	СтрокШапки      = 20;
	СтрокПодвала    = 7;
	НомерСтраницы   = 1;

	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	КоличествоСтрок = ВыборкаСтрокТовары.Количество();

	Если КоличествоСтрок = 1 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// инициализация итогов по странице
	ИтогоМестПоСтранице        = 0;
	ИтогоШтукПоСтранице        = 0;
	ИтогоМассаБруттоПоСтранице = 0;
	ИтогоМассаНеттоПоСтранице  = 0;
	ИтогоСтоимостьПоСтранице   = 0;

	// инициализация итогов по документу
	ИтогоМест        = 0;
	ИтогоШтук        = 0;
	ИтогоМассаБрутто = 0;
	ИтогоМассаНетто  = 0;
	ИтогоСтоимость   = 0;
	Ном              = 0;

	// Выводим многострочную часть докмента
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			#Если Клиент тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			#КонецЕсли
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;
		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");

			ОбластьИтоговПоСтранице.Параметры.ИтогоМестПоСтранице        = ИтогоМестПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогоШтукПоСтранице        = ИтогоШтукПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогоМассаБруттоПоСтранице = ИтогоМассаБруттоПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогоМассаНеттоПоСтранице  = ИтогоМассаНеттоПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогоСтоимостьПоСтранице   = ИтогоСтоимостьПоСтранице;

			ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

			// очистим итоги по странице
			ИтогоМестПоСтранице        = 0;
			ИтогоШтукПоСтранице        = 0;
			ИтогоМассаБруттоПоСтранице = 0;
			ИтогоМассаНеттоПоСтранице  = 0;
			ИтогоСтоимостьПоСтранице   = 0;

			НомерСтраницы = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование)
		                                          + ПредставлениеСерий(ВыборкаСтрокТовары)
		                                          + ?(ВыборкаСтрокТовары.Метка = 2, " (возвратная тара)", "");
		ТабДокумент.Вывести(ОбластьМакета);

		// Обновим итоги по странице
		ИтогоМестПоСтранице        = ИтогоМестПоСтранице        + ВыборкаСтрокТовары.КоличествоМест;
		ИтогоШтукПоСтранице        = ИтогоШтукПоСтранице        + ВыборкаСтрокТовары.КоличествоШтук;
		ИтогоМассаБруттоПоСтранице = ИтогоМассаБруттоПоСтранице + 0;
		ИтогоМассаНеттоПоСтранице  = ИтогоМассаНеттоПоСтранице  + 0;
		ИтогоСтоимостьПоСтранице   = ИтогоСтоимостьПоСтранице   + ВыборкаСтрокТовары.Стоимость / Шапка.Кратность;

		// Обновим итогов по документу
		ИтогоМест        = ИтогоМест        + ВыборкаСтрокТовары.КоличествоМест;
		ИтогоШтук        = ИтогоШтук        + ВыборкаСтрокТовары.КоличествоШтук;
		ИтогоМассаБрутто = ИтогоМассаБрутто + 0;
		ИтогоМассаНетто  = ИтогоМассаНетто  + 0;
		ИтогоСтоимость   = ИтогоСтоимость   + ВыборкаСтрокТовары.Стоимость / Шапка.Кратность;

	КонецЦикла;

	// Выводим итоги по последней странице
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
	ОбластьИтоговПоСтранице.Параметры.ИтогоМестПоСтранице        = ИтогоМестПоСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогоШтукПоСтранице        = ИтогоШтукПоСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогоМассаБруттоПоСтранице = ИтогоМассаБруттоПоСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогоМассаНеттоПоСтранице  = ИтогоМассаНеттоПоСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогоСтоимостьПоСтранице   = ИтогоСтоимостьПоСтранице;
	ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

	// Выводим итоги по документу в общем
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогоМест        = ИтогоМест;
	ОбластьМакета.Параметры.ИтогоШтук        = ИтогоШтук;
	ОбластьМакета.Параметры.ИтогоМассаБрутто = ИтогоМассаБрутто;
	ОбластьМакета.Параметры.ИтогоМассаНетто  = ИтогоМассаНетто;
	ОбластьМакета.Параметры.ИтогоСтоимость   = ИтогоСтоимость;
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	// Зададим параметры макета
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	Возврат ТабДокумент;

КонецФункции // ПечатьТОРГ4()

// Функция формирует табличный документ унифицированной формы М-4
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме М-4 (приходный ордер).
//
Функция ПечатьМ4()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент",     Ссылка);
	Запрос.УстановитьПараметр("ВидПоступленияОрдер", Перечисления.ВидыПоступленияТоваров.ПоОрдеру);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Номер КАК Номер,
	|	Дата  КАК ДатаСоставления,
	|	НомерВходящегоДокумента КАК НомерСопроводительногоДокумента,
	|	Организация,
	|	Организация             КАК ЮрФизЛицо,
	|	ВЫБОР
	|		КОГДА ВидПоступления = &ВидПоступленияОрдер ТОГДА СкладОрдер.Склад
	|		ИНАЧЕ СкладОрдер
	|	КОНЕЦ КАК МестоПриемки,
	|	ВЫБОР
	|		КОГДА ВидПоступления = &ВидПоступленияОрдер ТОГДА СкладОрдер.Склад.Представление
	|		ИНАЧЕ СкладОрдер.Представление
	|	КОНЕЦ КАК СкладНаименование,
	|	Подразделение,
	|	Подразделение  КАК ПредставлениеПодразделения,
	|	Контрагент.Код КАК ПоставщикКод,
	|	Контрагент     КАК Поставщик,
	|	ВалютаДокумента,
	|	КурсВзаиморасчетов      КАК Курс,
	|	КратностьВзаиморасчетов КАК Кратность,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросПоТоварам.УстановитьПараметр("Курс",            КурсВзаиморасчетов);
	ЗапросПоТоварам.УстановитьПараметр("Кратность",       КратностьВзаиморасчетов);

	ЗапросПоТоварам.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура.Код                КАК ТоварКод,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмеренияНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ВложенныйЗапрос.СтавкаНДС,
	|	ВложенныйЗапрос.КоличествоПринято,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Стоимость,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Серия,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	ВложенныйЗапрос.Метка       КАК Метка
	|
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		СтавкаНДС,
	|		СУММА(Количество)                    КАК КоличествоПринято,
	|		СУММА(Цена     * &Курс / &Кратность) КАК Цена,
	|		СУММА(Сумма    * &Курс / &Кратность) КАК Стоимость,
	|		СУММА(СуммаНДС * &Курс / &Кратность) КАК СуммаНДС,
	|		ХарактеристикаНоменклатуры           КАК Характеристика,
	|		СерияНоменклатуры                    КАК Серия,
	|		МИНИМУМ(НомерСтроки)                 КАК НомерСтроки,
	|		0                                    КАК Метка
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
	|	ГДЕ
	|		ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО 
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		СтавкаНДС,
	|		ХарактеристикаНоменклатуры,
	|		СерияНоменклатуры
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)),
	|	Номенклатура.Код,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление  КАК ЕдиницаИзмеренияНаименование,
	|	Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	""Без НДС"",
	|	Количество,
	|	Цена     * &Курс / &Кратность,
	|	Сумма    * &Курс / &Кратность,
	|	0,
	|	NULL,
	|	NULL,
	|	НомерСтроки КАК НомерСтроки,
	|	2           КАК Метка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|
	|";
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	Макет = ПолучитьОбщийМакет("М4");

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_М4";

	// Выводим общие реквизиты шапки
	СведенияОПокупателе = СведенияОЮрФизЛице(Шапка.ЮрФизЛицо, Шапка.ДатаСоставления);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ОписаниеОрганизации(СведенияОПокупателе);
	ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакета.Параметры.НомерДокумента           = ПолучитьНомерНаПечать(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим заголовок докмента
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокДокумента");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ДатаСоставления = Шапка.ДатаСоставления;
	ПредставлениеКонтрагента = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.ДатаСоставления), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПоставщикНаименование = ПредставлениеКонтрагента;
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	СтрокНаСтранице = 24;
	СтрокШапки      = 9;
	СтрокПодвала    = 3;
	НомерСтраницы   = 1;

	КоличествоСтрок = ВыборкаСтрокТовары.Количество();
	Если КоличествоСтрок = 1 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// Инициализация итогов в документе
	ИтогоКоличествоПринято = 0;
	ИтогоСуммаБезНДС = 0;
	ИтогоСуммаНДС    = 0;
	ИтогоВсегоСНДС   = 0;
	Ном              = 0;

	// Выводим многострочную часть докмента
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			#Если Клиент тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			#КонецЕсли
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;
		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			НомерСтраницы = НомерСтраницы + 1;
			ПодвалСтрок   = Макет.ПолучитьОбласть("ПодвалСтрок");
			ТабДокумент.Вывести(ПодвалСтрок);
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);

		Кратность = ?(Шапка.Кратность = 0, 1, Шапка.Кратность);
		ВсегоСНДС = (ВыборкаСтрокТовары.Стоимость
			+ ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрокТовары.СуммаНДС));

		КоличествоПринято = ВыборкаСтрокТовары.КоличествоПринято;
		СуммаНДС          = ВыборкаСтрокТовары.СуммаНДС / Шапка.Кратность;
		Цена              = (ВсегоСНДС - СуммаНДС) / КоличествоПринято;

		ОбластьМакета.Параметры.КоличествоПринято = КоличествоПринято;
		ОбластьМакета.Параметры.ВсегоСНДС         = ВсегоСНДС;
		ОбластьМакета.Параметры.СуммаБезНДС       = ВсегоСНДС - СуммаНДС;
		ОбластьМакета.Параметры.СуммаНДС          = СуммаНДС;
		ОбластьМакета.Параметры.Цена              = Цена;
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование)
		                                          + ПредставлениеСерий(ВыборкаСтрокТовары)
		                                          + ?(ВыборкаСтрокТовары.Метка = 2, " (возвратная тара)", "");
		ТабДокумент.Вывести(ОбластьМакета);

		ИтогоКоличествоПринято = ИтогоКоличествоПринято + КоличествоПринято;
		ИтогоСуммаБезНДС       = ИтогоСуммаБезНДС       + ВсегоСНДС - СуммаНДС;
		ИтогоСуммаНДС          = ИтогоСуммаНДС          + СуммаНДС;
		ИтогоВсегоСНДС         = ИтогоВсегоСНДС         + ВсегоСНДС;

	КонецЦикла;

	// Выводим итоги по документу
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");

	ОбластьМакета.Параметры.ИтогоКоличествоПринято = ИтогоКоличествоПринято;
	ОбластьМакета.Параметры.ИтогоСуммаБезНДС = ИтогоСуммаБезНДС;
	ОбластьМакета.Параметры.ИтогоСуммаНДС    = ИтогоСуммаНДС;
	ОбластьМакета.Параметры.ИтогоВсегоСНДС   = ИтогоВсегоСНДС;
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим итоги по документу
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 0;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	Возврат ТабДокумент;

КонецФункции // ПечатьМ4()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		#Если Клиент тогда
		Предупреждение("Документ можно распечатать только после его записи!",30);
		#КонецЕсли
		Возврат;
	ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		#Если Клиент тогда
		Предупреждение("У Вас недостаточно прав для печати непроведенного документа!",30);
		#КонецЕсли
		Возврат;
	КонецЕсли;

	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Накладная" тогда

		// Управленческая печатная форма документа
		ТабДокумент = ПечатьПоступлениеТоваров();
	ИначеЕсли ИмяМакета = "ТОРГ12" тогда

		// Унифицированная форма ТОРГ-12 (за поставщика)
		ТабДокумент = ПечатьТОРГ12ЗаПоставщика();
	ИначеЕсли ИмяМакета = "ТОРГ4" тогда

		// Унифицированная форма ТОРГ-4 (акт приемки товара без счета поставщика)
		ТабДокумент = ПечатьТОРГ4();
	ИначеЕсли ИмяМакета = "М4" тогда

		// Унифицированная форма М-4 (приходный ордер)
		ТабДокумент = ПечатьМ4();
	ИначеЕсли ИмяМакета = "СвязанныеРеализации" тогда

		// Управленческая печатная форма документа
		ТабДокумент = ПечатьСвязанныеРеализации();
	
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			#Если Клиент тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			#КонецЕсли
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();
	
	КонецЕсли;

	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидПоступления)));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;

	СписокМакетов.Добавить("ТОРГ12", "ТОРГ-12 (Товарная накладная за поставщика)");
	СписокМакетов.Добавить("ТОРГ4", "ТОРГ-4 (Акт о приемке товара без счета поставщика)");
	СписокМакетов.Добавить("М4", "М-4 (Приходный ордер)");
	СписокМакетов.Добавить("Накладная", "Приходная накладная");
	СписокМакетов.Добавить("СвязанныеРеализации", "Связанные реализации");

	ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

#КонецЕсли

// Очищает ненужные строки табличных частей
//
Процедура ОчиститьНенужныеТабличныеЧасти() Экспорт

	// Если договор с комитентом, то надо почистить закладку "Услуги".
	Если Услуги.Количество() > 0
	   И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

		Услуги.Очистить();

	КонецЕсли;

КонецПроцедуры // ОчиститьНенужныеТабличныеЧасти()

// Процедура выполняет копирование табличной части заказа поставщику в документ.
//
Процедура СкопироватьТовары() Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Сделка", Сделка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР КОГДА СчетНаОплатуТовары.Ссылка.ВалютаДокумента = СчетНаОплатуТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуТовары.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуТовары.Ссылка.ВалютаДокумента = СчетНаОплатуТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуТовары.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	СчетНаОплатуТовары.Ссылка.ВалютаДокумента       КАК ВалютаДокумента,
	|	СчетНаОплатуТовары.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	СчетНаОплатуТовары.ЕдиницаИзмерения,
	|	СчетНаОплатуТовары.ЕдиницаИзмеренияМест,
	|	СчетНаОплатуТовары.Количество,
	|	СчетНаОплатуТовары.КоличествоМест,
	|	СчетНаОплатуТовары.Коэффициент,
	|	СчетНаОплатуТовары.Номенклатура,
	|	СчетНаОплатуТовары.СтавкаНДС,
	|	СчетНаОплатуТовары.Сумма,
	|	СчетНаОплатуТовары.ХарактеристикаНоменклатуры
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.Товары КАК СчетНаОплатуТовары
	|
	|ГДЕ
	|	СчетНаОплатуТовары.Ссылка = &Сделка";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура         = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество           = Выборка.Количество;
		СтрокаТабличнойЧасти.КоличествоМест       = Выборка.КоличествоМест;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения     = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = Выборка.ЕдиницаИзмеренияМест;
		СтрокаТабличнойЧасти.Коэффициент          = Выборка.Коэффициент;
		СтрокаТабличнойЧасти.СтавкаНДС            = Выборка.СтавкаНДС;

		СтрокаТабличнойЧасти.Сумма = ПересчитатьЦенуПриИзмененииФлаговНалогов(
										ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
												   Выборка.КурсДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
												   Выборка.КратностьДокумента, КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
										Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
										Выборка.СуммаВключаетНДС,
										УчитыватьНДС,
										СуммаВключаетНДС,
										ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ПараметрыСеанса.ТекущийПользователь);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;

	КонецЦикла;

КонецПроцедуры // СкопироватьТовары()

// Процедура выполняет копирование возвратной тары заказа поставщику в документ.
//
 Процедура СкопироватьВозвратнуюТару() Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Сделка", Сделка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ссылка.ВалютаДокумента                          КАК ВалютаДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуВозвратнаяТара.Ссылка.ВалютаДокумента = СчетНаОплатуВозвратнаяТара.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуВозвратнаяТара.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуВозвратнаяТара.Ссылка.ВалютаДокумента = СчетНаОплатуВозвратнаяТара.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуВозвратнаяТара.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	СчетНаОплатуВозвратнаяТара.Количество,
	|	СчетНаОплатуВозвратнаяТара.Номенклатура,
	|	СчетНаОплатуВозвратнаяТара.Сумма
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.ВозвратнаяТара КАК СчетНаОплатуВозвратнаяТара
	|
	|ГДЕ
	|	СчетНаОплатуВозвратнаяТара.Ссылка = &Сделка";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаВозвратнойТары = ВозвратнаяТара.Добавить();

		СтрокаВозвратнойТары.Номенклатура     = Выборка.Номенклатура;
		СтрокаВозвратнойТары.Количество       = Выборка.Количество;

		СтрокаВозвратнойТары.Сумма = ПересчитатьИзВалютыВВалюту(Выборка.Сумма, 
		                                        Выборка.ВалютаДокумента, 
		                                        ВалютаДокумента,
		                                        Выборка.КурсДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
												Выборка.КратностьДокумента, КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));

		ПриИзмененииВозвратнойТарыТабЧасти(СтрокаВозвратнойТары, ЭтотОбъект);
		ПриИзмененииСуммыВозвратнойТарыТабЧасти(СтрокаВозвратнойТары, ЭтотОбъект);

	КонецЦикла;

КонецПроцедуры // СкопироватьВозвратнуюТару()

// Процедура выполняет копирование табличной части заказа поставщику в документ.
//
Процедура СкопироватьУслуги() Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Сделка", Сделка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР КОГДА СчетНаОплатуУслуги.Ссылка.ВалютаДокумента = СчетНаОплатуУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуУслуги.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуУслуги.Ссылка.ВалютаДокумента = СчетНаОплатуУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуУслуги.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	СчетНаОплатуУслуги.Ссылка.ВалютаДокумента       КАК ВалютаДокумента,
	|	СчетНаОплатуУслуги.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	СчетНаОплатуУслуги.Содержание,
	|	СчетНаОплатуУслуги.Количество,
	|	СчетНаОплатуУслуги.Номенклатура,
	|	СчетНаОплатуУслуги.СтавкаНДС,
	|	СчетНаОплатуУслуги.Сумма
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.Услуги КАК СчетНаОплатуУслуги
	|
	|ГДЕ
	|	СчетНаОплатуУслуги.Ссылка = &Сделка";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Услуги.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
		СтрокаТабличнойЧасти.Содержание       = Выборка.Содержание;
		СтрокаТабличнойЧасти.СтавкаНДС        = Выборка.СтавкаНДС;
		
		СтрокаТабличнойЧасти.СтатьяЗатрат 		  = СтрокаТабличнойЧасти.Номенклатура.СтатьяЗатрат;
		СтрокаТабличнойЧасти.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппаЗатрат;

		СтрокаТабличнойЧасти.Сумма = ПересчитатьЦенуПриИзмененииФлаговНалогов(
										ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
												   Выборка.КурсДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
												   Выборка.КратностьДокумента, КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
										Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
										Выборка.СуммаВключаетНДС,
										УчитыватьНДС,
										СуммаВключаетНДС,
										ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ПараметрыСеанса.ТекущийПользователь);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	КонецЦикла;

КонецПроцедуры // СкопироватьУслуги()

// Процедура выполняет заполниение табличной части неполученными ТМЦ по заказу поставщику.
//
Процедура ЗаполнитьТоварыПоОстаткамУпр() Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный);
	Запрос.УстановитьПараметр("Договор",      ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Товар",        Перечисления.ТоварТара.Товар);
	Запрос.УстановитьПараметр("Сделка",       Сделка);
	Запрос.УстановитьПараметр("ТипЦен",       ТипЦен);
	Запрос.УстановитьПараметр("ПустойТипЦен", Справочники.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка());
	
	Запрос.Текст =
	////+++ 07.02.2014 - до этого было так! --------------------------------
	//"ВЫБРАТЬ
	//|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	//|	ВложенныйЗапрос.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХранения,
	//|	ВложенныйЗапрос.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
	//|	ВложенныйЗапрос.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	//|	ВложенныйЗапрос.Цена КАК Цена,
	//|	ЕСТЬNULL(ВложенныйЗапрос.СтавкаНДС, ВложенныйЗапрос.Номенклатура.СтавкаНДС) КАК СтавкаНДС,
	//|	СУММА(ВложенныйЗапрос.КоличествоОстатокПоЗаказу) КАК КоличествоОстатокПоЗаказу,
	//|	СУММА(ВложенныйЗапрос.КоличествоПоРазмещению) КАК КоличествоПоРазмещению,
	//|	ВложенныйЗапрос.Размещение КАК Размещение,
	//|	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	//|	ВложенныйЗапрос.Коэффициент КАК Коэффициент
	//|ИЗ
	//|	(ВЫБРАТЬ
	//|		Остатки.Номенклатура КАК Номенклатура,
	//|		Остатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	//|		Остатки.Цена КАК Цена,
	//|		Остатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	//|		Остатки.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	//|		Остатки.КоличествоОстаток КАК КоличествоОстатокПоЗаказу,
	//|		0 КАК КоличествоПоРазмещению,
	//|		НЕОПРЕДЕЛЕНО КАК Размещение,
	//|		ЗаказПоставщикуТовары.СтавкаНДС КАК СтавкаНДС
	//|	ИЗ
	//|		РегистрНакопления.ЗаказыПоставщикам.Остатки(
	//|				,
	//|				ДоговорКонтрагента = &Договор
	//|					И ЗаказПоставщику = &Сделка
	//|					И СтатусПартии = &СтатусПартии) КАК Остатки
	//|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	//|			ПО Остатки.ЗаказПоставщику = ЗаказПоставщикуТовары.Ссылка
	//|				И Остатки.Номенклатура = ЗаказПоставщикуТовары.Номенклатура
	//|				И Остатки.ХарактеристикаНоменклатуры = ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры
	//|	ГДЕ
	//|		(НЕ Остатки.Номенклатура.Услуга)
	//|		И Остатки.КоличествоОстаток <> 0
	//|		И ЗаказПоставщикуТовары.Ссылка = &Сделка
	//|	
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|	
	//|	ВЫБРАТЬ
	//|		Размещение.Номенклатура,
	//|		Размещение.ХарактеристикаНоменклатуры,
	//|		0,
	//|		ВЫБОР
	//|			КОГДА &ТипЦен = &ПустойТипЦен
	//|				ТОГДА Размещение.Номенклатура.ЕдиницаХраненияОстатков
	//|			ИНАЧЕ ВЫБОР
	//|					КОГДА ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения ЕСТЬ NULL 
	//|						ТОГДА Размещение.Номенклатура.ЕдиницаХраненияОстатков
	//|					ИНАЧЕ ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения
	//|				КОНЕЦ
	//|		КОНЕЦ,
	//|		ВЫБОР
	//|			КОГДА &ТипЦен = &ПустойТипЦен
	//|				ТОГДА Размещение.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	//|			ИНАЧЕ ВЫБОР
	//|					КОГДА ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения ЕСТЬ NULL 
	//|						ТОГДА Размещение.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	//|					ИНАЧЕ ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения.Коэффициент
	//|				КОНЕЦ
	//|		КОНЕЦ,
	//|		0,
	//|		Размещение.КоличествоОстаток,
	//|		Размещение.ЗаказПокупателя,
	//|		NULL
	//|	ИЗ
	//|		РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(
	//|				,
	//|				ЗаказПоставщику = &Сделка
	//|					И ТоварТара = &Товар) КАК Размещение
	//|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(, ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
	//|			ПО Размещение.Номенклатура = ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура
	//|				И Размещение.ХарактеристикаНоменклатуры = ЦеныНоменклатурыКонтрагентовСрезПоследних.ХарактеристикаНоменклатуры
	//|	ГДЕ
	//|		(НЕ Размещение.Номенклатура.Услуга)
	//|		И Размещение.КоличествоОстаток > 0) КАК ВложенныйЗапрос
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ВложенныйЗапрос.Номенклатура,
	//|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
	//|	ВложенныйЗапрос.Размещение,
	//|	ВложенныйЗапрос.Цена,
	//|	ВложенныйЗапрос.ЕдиницаИзмерения,
	//|	ВложенныйЗапрос.Коэффициент,
	//|	ВложенныйЗапрос.Номенклатура.ЕдиницаХраненияОстатков,
	//|	ВложенныйЗапрос.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
	//|	ВложенныйЗапрос.СтавкаНДС,
	//|	ЕСТЬNULL(ВложенныйЗапрос.СтавкаНДС, ВложенныйЗапрос.Номенклатура.СтавкаНДС)";
	
   //// 07.02.2014 -  добавлен ВложенныйЗапрос с группировкой по Номенклатуре и сортировкой по номеру строки
   //				из-за дублей товара - иногда двоились остатки! из Заказа покупателя!===============================
 	"ВЫБРАТЬ
 	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
 	|	ВложенныйЗапрос.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХранения,
 	|	ВложенныйЗапрос.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
 	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
 	|	ВложенныйЗапрос.Цена КАК Цена,
 	|	СУММА(ВложенныйЗапрос.КоличествоОстатокПоЗаказу) КАК КоличествоОстатокПоЗаказу,
 	|	СУММА(ВложенныйЗапрос.КоличествоПоРазмещению) КАК КоличествоПоРазмещению,
 	|	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
 	|	ВложенныйЗапрос.Коэффициент КАК Коэффициент,
 	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
 	|	ВложенныйЗапрос.СтавкаНДС,
 	|	ВложенныйЗапрос.ЗаказПокупателя,
 	|	ВложенныйЗапрос.Сумма
 	|ИЗ
 	|	(ВЫБРАТЬ
 	|		Остатки.Номенклатура КАК Номенклатура,
 	|		Остатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
 	|		Остатки.Цена КАК Цена,
 	|		Остатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
 	|		Остатки.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
 	|		Остатки.КоличествоОстаток КАК КоличествоОстатокПоЗаказу,
 	|		0 КАК КоличествоПоРазмещению,
 	|		ВложенныйЗапрос.ЗаказПокупателя КАК ЗаказПокупателя,
 	|		ВложенныйЗапрос.СтавкаНДС КАК СтавкаНДС,
 	|		ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
 	|		ВложенныйЗапрос.Сумма КАК Сумма
 	|	ИЗ
 	|		РегистрНакопления.ЗаказыПоставщикам.Остатки(
 	|				,
 	|				ДоговорКонтрагента = &Договор
 	|					И ЗаказПоставщику = &Сделка
 	|					И СтатусПартии = &СтатусПартии) КАК Остатки
 	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
 	|				МИНИМУМ(ЗаказПоставщикуТовары.НомерСтроки) КАК НомерСтроки,
 	|				ЗаказПоставщикуТовары.Номенклатура КАК Номенклатура,
 	|				СУММА(ЗаказПоставщикуТовары.Количество) КАК Количество,
 	|				ЗаказПоставщикуТовары.Цена КАК Цена,
 	|				ЗаказПоставщикуТовары.СтавкаНДС КАК СтавкаНДС,
 	|				ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
 	|				ЗаказПоставщикуТовары.Ссылка КАК Ссылка,
 	|				ЗаказПоставщикуТовары.ЗаказПокупателя КАК ЗаказПокупателя,
 	|				ЗаказПоставщикуТовары.Сумма КАК Сумма
 	|			ИЗ
 	|				Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
 	|			ГДЕ
 	|				ЗаказПоставщикуТовары.Ссылка = &Сделка
 	|			
 	|			СГРУППИРОВАТЬ ПО
 	|				ЗаказПоставщикуТовары.Номенклатура,
 	|				ЗаказПоставщикуТовары.СтавкаНДС,
 	|				ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры,
 	|				ЗаказПоставщикуТовары.Ссылка,
 	|				ЗаказПоставщикуТовары.Цена,
 	|				ЗаказПоставщикуТовары.ЗаказПокупателя,
 	|				ЗаказПоставщикуТовары.Сумма) КАК ВложенныйЗапрос
 	|			ПО Остатки.ЗаказПоставщику = ВложенныйЗапрос.Ссылка
 	|				И Остатки.Номенклатура = ВложенныйЗапрос.Номенклатура
 	|				И Остатки.ХарактеристикаНоменклатуры = ВложенныйЗапрос.ХарактеристикаНоменклатуры
 	|				И Остатки.Цена = ВложенныйЗапрос.Цена
 	|	ГДЕ
 	|		НЕ Остатки.Номенклатура.Услуга
 	|		И Остатки.КоличествоОстаток <> 0
 	|	
 	|	ОБЪЕДИНИТЬ ВСЕ
 	|	
 	|	ВЫБРАТЬ
 	|		Размещение.Номенклатура,
 	|		Размещение.ХарактеристикаНоменклатуры,
 	|		ЦеныНоменклатурыКонтрагентовСрезПоследних.Цена,
 	|		ВЫБОР
 	|			КОГДА &ТипЦен = &ПустойТипЦен
 	|				ТОГДА Размещение.Номенклатура.ЕдиницаХраненияОстатков
 	|			ИНАЧЕ ВЫБОР
 	|					КОГДА ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения ЕСТЬ NULL 
 	|						ТОГДА Размещение.Номенклатура.ЕдиницаХраненияОстатков
 	|					ИНАЧЕ ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения
 	|				КОНЕЦ
 	|		КОНЕЦ,
 	|		ВЫБОР
 	|			КОГДА &ТипЦен = &ПустойТипЦен
 	|				ТОГДА Размещение.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
 	|			ИНАЧЕ ВЫБОР
 	|					КОГДА ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения ЕСТЬ NULL 
 	|						ТОГДА Размещение.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
 	|					ИНАЧЕ ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения.Коэффициент
 	|				КОНЕЦ
 	|		КОНЕЦ,
 	|		0,
 	|		Размещение.КоличествоОстаток,
 	|		Размещение.ЗаказПокупателя,
 	|		NULL,
 	|		0,
 	|		NULL
 	|	ИЗ
 	|		РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(
 	|				,
 	|				ЗаказПоставщику.Контрагент = &Контрагент
 	|					И ТоварТара = &Товар) КАК Размещение
 	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(, ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
 	|			ПО Размещение.Номенклатура = ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура
 	|				И Размещение.ХарактеристикаНоменклатуры = ЦеныНоменклатурыКонтрагентовСрезПоследних.ХарактеристикаНоменклатуры
 	|	ГДЕ
 	|		НЕ Размещение.Номенклатура.Услуга
 	|		И Размещение.КоличествоОстаток > 0) КАК ВложенныйЗапрос
 	|
 	|СГРУППИРОВАТЬ ПО
 	|	ВложенныйЗапрос.Номенклатура,
 	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
 	|	ВложенныйЗапрос.Цена,
 	|	ВложенныйЗапрос.ЕдиницаИзмерения,
 	|	ВложенныйЗапрос.Коэффициент,
 	|	ВложенныйЗапрос.Номенклатура.ЕдиницаХраненияОстатков,
 	|	ВложенныйЗапрос.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
 	|	ВложенныйЗапрос.НомерСтроки,
 	|	ВложенныйЗапрос.СтавкаНДС,
 	|	ВложенныйЗапрос.ЗаказПокупателя,
 	|	ВложенныйЗапрос.Сумма
 	|
 	|УПОРЯДОЧИТЬ ПО
 	|	НомерСтроки
 	|АВТОУПОРЯДОЧИВАНИЕ";
	
 Запрос.УстановитьПараметр("Контрагент", Контрагент);//+++ 05.11.2014
	
	РезультатЗапроса = Запрос.Выполнить();

	// Таблица остатков по размещению покупателям
	ТаблицаПоРазмещению = РезультатЗапроса.Выгрузить();
	Сч = 0;
	Пока Сч < ТаблицаПоРазмещению.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоРазмещению.Получить(Сч);
		Если СтрокаТаблицы.КоличествоПоРазмещению <= 0 Тогда
			ТаблицаПоРазмещению.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;

	// Таблица остатков по заказу поставщику
	ТаблицаПоЗаказу = РезультатЗапроса.Выгрузить();
	Сч = 0;
	Пока Сч < ТаблицаПоЗаказу.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоЗаказу.Получить(Сч);
		Если СтрокаТаблицы.КоличествоОстатокПоЗаказу = 0 Тогда
			ТаблицаПоЗаказу.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;

	// Нам надо знать сколько на самом деле осталось номенклатуры
	ТаблицаБезЦен = ТаблицаПоЗаказу.Скопировать();
//	ТаблицаБезЦен.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Цена", "КоличествоОстатокПоЗаказу");  //07.02.2014 добавляем цену!
	ТаблицаБезЦен.Свернуть("Номенклатура, ХарактеристикаНоменклатуры", "КоличествоОстатокПоЗаказу");  //05.11.2014 БЕЗ цен!

	Для каждого СтрокаБезЦен ИЗ ТаблицаБезЦен Цикл
		ВсегоПоЗаказу = СтрокаБезЦен.КоличествоОстатокПоЗаказу;
		ВсегоСписано  = 0;

		Если ВсегоСписано >= ВсегоПоЗаказу Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",               СтрокаБезЦен.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаБезЦен.ХарактеристикаНоменклатуры);
//	  	СтруктураПоиска.Вставить("Цена", СтрокаБезЦен.Цена); //07.02.2014

		СтрокиПоРазмещению = ТаблицаПоРазмещению.НайтиСтроки(СтруктураПоиска);
		СтрокиПоЗаказу     = ТаблицаПоЗаказу.НайтиСтроки(СтруктураПоиска);

		Для Каждого СтрокаЗаказа Из СтрокиПоЗаказу Цикл
			КолвоПоЗаказу       = СтрокаЗаказа.КоличествоОстатокПоЗаказу;
			СписатьПоРазмещению = 0;
			СписатьПоЗаказу     = 0;
			ВсегоСписано    = 0;

			Если КолвоПоЗаказу <= 0 Тогда
				Продолжить;
			КонецЕсли;

			// Cписываем по размещению
			Для Каждого СтрокаРазмещения Из СтрокиПоРазмещению Цикл
				КолвоПоРазмещению = СтрокаРазмещения.КоличествоПоРазмещению;

				Если КолвоПоРазмещению <= 0 Тогда
					Продолжить;
				КонецЕсли;

				СписатьПоРазмещению = Мин(КолвоПоРазмещению, КолвоПоЗаказу - ВсегоСписано);
				ВсегоСписано        = ВсегоСписано + СписатьПоРазмещению;
				
				Если КолвоПоРазмещению > 0 Тогда
					СтрокаТабличнойЧасти = Товары.Добавить();
					СтрокаТабличнойЧасти.Номенклатура               = СтрокаЗаказа.Номенклатура;
					СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = СтрокаЗаказа.ХарактеристикаНоменклатуры;
					СтрокаТабличнойЧасти.ЕдиницаИзмерения           = СтрокаЗаказа.ЕдиницаИзмерения;
					СтрокаТабличнойЧасти.Коэффициент                = СтрокаЗаказа.Коэффициент;
					СтрокаТабличнойЧасти.СтавкаНДС                  = СтрокаЗаказа.СтавкаНДС;
					СтрокаТабличнойЧасти.ЗаказПокупателя            = СтрокаРазмещения.ЗаказПокупателя;//ЗаказПокупателя!
					СтрокаТабличнойЧасти.Количество                 = СписатьПоРазмещению;
					
					СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(
					ПересчитатьИзВалютыВВалюту(СтрокаЗаказа.Цена,
					Сделка.ВалютаДокумента, ВалютаДокумента,
					КурсДокумента(Сделка, мВалютаРегламентированногоУчета), КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
					КратностьДокумента(Сделка, мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
					Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
					Сделка.СуммаВключаетНДС,
					УчитыватьНДС,
					СуммаВключаетНДС,
					ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
					
					СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
					
					//Проверим совпадает ли сумма строки
					Если  СписатьПоРазмещению = КолвоПоЗаказу - ВсегоСписано Тогда   //последнее списание этой номенклатуры
						Разность = СтрокаЗаказа.Сумма - СтрокаЗаказа.цена*СтрокаЗаказа.КоличествоОстатокПоЗаказу;
						Если Разность<>0 Тогда
							СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма + Разность;
						КонецЕсли;
					КонецЕсли;
					
					ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти,    ЭтотОбъект, ПараметрыСеанса.ТекущийПользователь);
					РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти,   ЭтотОбъект);
					ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

					СтрокаРазмещения.КоличествоПоРазмещению = СтрокаРазмещения.КоличествоПоРазмещению - СписатьПоРазмещению;
				КонецЕсли;
			КонецЦикла;

			// Cписываем без размещения
			СписатьПоЗаказу = КолвоПоЗаказу - ВсегоСписано;
			ВсегоСписано    = ВсегоСписано  + СписатьПоЗаказу;

			Если СписатьПоЗаказу > 0 Тогда
				СтрокаТабличнойЧасти = Товары.Добавить();
				СтрокаТабличнойЧасти.Номенклатура               = СтрокаЗаказа.Номенклатура;
				СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = СтрокаЗаказа.ХарактеристикаНоменклатуры;
				СтрокаТабличнойЧасти.ЕдиницаИзмерения           = СтрокаЗаказа.ЕдиницаИзмерения;
				СтрокаТабличнойЧасти.Коэффициент                = СтрокаЗаказа.Коэффициент;
				СтрокаТабличнойЧасти.СтавкаНДС                  = СтрокаЗаказа.СтавкаНДС;
				СтрокаТабличнойЧасти.ЗаказПокупателя            = СтрокаЗаказа.ЗаказПокупателя;//+++ 27.06.2014 Неопределено;
				СтрокаТабличнойЧасти.Количество                 = СписатьПоЗаказу;

				СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(
				                            ПересчитатьИзВалютыВВалюту(СтрокаЗаказа.Цена,
				                            Сделка.ВалютаДокумента, ВалютаДокумента,
				                            КурсДокумента(Сделка, мВалютаРегламентированногоУчета), КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				                            КратностьДокумента(Сделка, мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
				                            Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
				                            Сделка.СуммаВключаетНДС,
				                            УчитыватьНДС,
				                            СуммаВключаетНДС,
				                            ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

				СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
				//Проверим совпадает ли сумма строки
				Разность = СтрокаЗаказа.сумма - СтрокаЗаказа.цена*СтрокаЗаказа.КоличествоОстатокПоЗаказу;
				Если Разность<>0 Тогда
					СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма + Разность;
				КонецЕсли;
                
				ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти,    ЭтотОбъект, ПараметрыСеанса.ТекущийПользователь);
				РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти,   ЭтотОбъект);
				ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

			СтрокаЗаказа.КоличествоОстатокПоЗаказу = СтрокаЗаказа.КоличествоОстатокПоЗаказу - ВсегоСписано;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоОстаткамУпр()

Процедура ЗаполнитьТоварыПоОстаткамЗаказов(ЗаказСсылка) Экспорт
	 Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный);
	Запрос.УстановитьПараметр("Договор",      ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Товар",        Перечисления.ТоварТара.Товар);
	Запрос.УстановитьПараметр("Сделка",       ЗаказСсылка);
	Запрос.УстановитьПараметр("ТипЦен",       ТипЦен);
	Запрос.УстановитьПараметр("ПустойТипЦен", Справочники.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура                                     КАК Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаХранения,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры,
	|	ВложенныйЗапрос.Цена                                             КАК Цена,
	|	ВложенныйЗапрос.Номенклатура.СтавкаНДС                           КАК СтавкаНДС,
	|	СУММА(ВложенныйЗапрос.КоличествоОстатокПоЗаказу)                 КАК КоличествоОстатокПоЗаказу,
	|	СУММА(ВложенныйЗапрос.КоличествоПоРазмещению)                    КАК КоличествоПоРазмещению,
	|	ВложенныйЗапрос.Размещение                                       КАК Размещение,
	|	ВложенныйЗапрос.ЕдиницаИзмерения                                 КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Коэффициент                                      КАК Коэффициент
	|ИЗ
	|
	|(
	|ВЫБРАТЬ
	|	Остатки.Номенклатура                 КАК Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры   КАК ХарактеристикаНоменклатуры,
	|	ВЫБОР КОГДА Остатки.КоличествоОстаток>0 ТОГДА Остатки.СуммаУпрОстаток/Остатки.КоличествоОстаток ИНАЧЕ 0 КОНЕЦ  КАК Цена,
	|	Остатки.ЕдиницаИзмерения             КАК ЕдиницаИзмерения,
	|	Остатки.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	Остатки.КоличествоОстаток            КАК КоличествоОстатокПоЗаказу,
	|	0                                    КАК КоличествоПоРазмещению,
	|	Неопределено                         КАК Размещение
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ДоговорКонтрагента = &Договор
	|	                                              И ЗаказПоставщику  = &Сделка
	|	                                              И СтатусПартии     = &СтатусПартии) КАК Остатки
	|
	|ГДЕ
	|	НЕ Остатки.Номенклатура.Услуга И Остатки.КоличествоОстаток <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Размещение.Номенклатура               КАК Номенклатура,
	|	Размещение.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	0                                     КАК Цена,
	|	ВЫБОР КОГДА &ТипЦен = &ПустойТипЦен ТОГДА
	|		Размещение.Номенклатура.ЕдиницаХраненияОстатков
	|	ИНАЧЕ
	|		ВЫБОР КОГДА ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения ЕСТЬ NULL ТОГДА
	|			Размещение.Номенклатура.ЕдиницаХраненияОстатков
	|		ИНАЧЕ
	|			ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения
	|		КОНЕЦ
	|	КОНЕЦ                                 КАК ЕдиницаИзмерения,
	|	ВЫБОР КОГДА &ТипЦен = &ПустойТипЦен ТОГДА
	|		Размещение.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|	ИНАЧЕ
	|		ВЫБОР КОГДА ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения ЕСТЬ NULL ТОГДА
	|			Размещение.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		ИНАЧЕ
	|			ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения.Коэффициент
	|		КОНЕЦ
	|	КОНЕЦ                                 КАК Коэффициент,
	|	0                                     КАК КоличествоОстатокПоЗаказу,
	|	Размещение.КоличествоОстаток          КАК КоличествоПоРазмещению,
	|	Размещение.ЗаказПокупателя            КАК Размещение
	|ИЗ
	|	РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(, ЗаказПоставщику = &Сделка И ТоварТара = &Товар) КАК Размещение
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(, ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
	|		ПО Размещение.Номенклатура               = ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура
	|		 И Размещение.ХарактеристикаНоменклатуры = ЦеныНоменклатурыКонтрагентовСрезПоследних.ХарактеристикаНоменклатуры
	|
	|ГДЕ
	|	НЕ Размещение.Номенклатура.Услуга  И Размещение.КоличествоОстаток > 0
	|
	|) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
	|	ВложенныйЗапрос.Размещение,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Коэффициент
	|
	|";

	РезультатЗапроса = Запрос.Выполнить();

	// Таблица остатков по размещению покупателям
	ТаблицаПоРазмещению = РезультатЗапроса.Выгрузить();
	Сч = 0;
	Пока Сч < ТаблицаПоРазмещению.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоРазмещению.Получить(Сч);
		Если СтрокаТаблицы.КоличествоПоРазмещению <= 0 Тогда
			ТаблицаПоРазмещению.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;

	// Таблица остатков по заказу поставщику
	ТаблицаПоЗаказу = РезультатЗапроса.Выгрузить();
	Сч = 0;
	Пока Сч < ТаблицаПоЗаказу.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоЗаказу.Получить(Сч);
		Если СтрокаТаблицы.КоличествоОстатокПоЗаказу = 0 Тогда
			ТаблицаПоЗаказу.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;

	// Нам надо знать сколько на самом деле осталось номенклатуры
	ТаблицаБезЦен = ТаблицаПоЗаказу.Скопировать();
	ТаблицаБезЦен.Свернуть("Номенклатура, ХарактеристикаНоменклатуры", "КоличествоОстатокПоЗаказу");

	Для каждого СтрокаБезЦен ИЗ ТаблицаБезЦен Цикл
		ВсегоПоЗаказу = СтрокаБезЦен.КоличествоОстатокПоЗаказу;
		ВсегоСписано  = 0;

		Если ВсегоСписано >= ВсегоПоЗаказу Тогда
			Прервать;
		КонецЕсли;

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",               СтрокаБезЦен.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаБезЦен.ХарактеристикаНоменклатуры);

		СтрокиПоРазмещению = ТаблицаПоРазмещению.НайтиСтроки(СтруктураПоиска);
		СтрокиПоЗаказу     = ТаблицаПоЗаказу.НайтиСтроки(СтруктураПоиска);

		Для Каждого СтрокаЗаказа Из СтрокиПоЗаказу Цикл
			КолвоПоЗаказу       = СтрокаЗаказа.КоличествоОстатокПоЗаказу;
			СписатьПоРазмещению = 0;
			СписатьПоЗаказу     = 0;

			Если КолвоПоЗаказу <= 0 Тогда
				Продолжить;
			КонецЕсли;

			// Cписываем по размещению
			Для Каждого СтрокаРазмещения Из СтрокиПоРазмещению Цикл
				КолвоПоРазмещению = СтрокаРазмещения.КоличествоПоРазмещению;

				Если КолвоПоРазмещению <= 0 Тогда
					Продолжить;
				КонецЕсли;

				СписатьПоРазмещению = Мин(КолвоПоРазмещению, КолвоПоЗаказу - ВсегоСписано);
				ВсегоСписано        = ВсегоСписано + СписатьПоРазмещению;

				Если КолвоПоРазмещению > 0 Тогда
					СтрокаТабличнойЧасти = Товары.Добавить();
					СтрокаТабличнойЧасти.Номенклатура               = СтрокаЗаказа.Номенклатура;
					СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = СтрокаЗаказа.ХарактеристикаНоменклатуры;
					СтрокаТабличнойЧасти.ЕдиницаИзмерения           = СтрокаЗаказа.ЕдиницаИзмерения;
					СтрокаТабличнойЧасти.Коэффициент                = СтрокаЗаказа.Коэффициент;
					СтрокаТабличнойЧасти.СтавкаНДС                  = СтрокаЗаказа.СтавкаНДС;
					СтрокаТабличнойЧасти.ЗаказПокупателя            = СтрокаРазмещения.Размещение;
					СтрокаТабличнойЧасти.Количество                 = СписатьПоРазмещению;
                    СтрокаТабличнойЧасти.ЗаказПоставщику = ЗаказСсылка;
					СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(
					                            ПересчитатьИзВалютыВВалюту(СтрокаЗаказа.Цена,
					                            ЗаказСсылка.ВалютаДокумента, ВалютаДокумента,
					                            КурсДокумента(ЗаказСсылка, мВалютаРегламентированногоУчета), КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
					                            КратностьДокумента(ЗаказСсылка, мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
					                            Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
					                            ЗаказСсылка.СуммаВключаетНДС,
					                            УчитыватьНДС,
					                            СуммаВключаетНДС,
					                            ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

					СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

					ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти,    ЭтотОбъект, ПараметрыСеанса.ТекущийПользователь);
					РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти,   ЭтотОбъект);
					ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

					СтрокаРазмещения.КоличествоПоРазмещению = СтрокаРазмещения.КоличествоПоРазмещению - СписатьПоРазмещению;
				КонецЕсли;
			КонецЦикла;

			// Cписываем без размещения
			СписатьПоЗаказу = КолвоПоЗаказу - ВсегоСписано;
			ВсегоСписано    = ВсегоСписано  + СписатьПоЗаказу;

			Если СписатьПоЗаказу > 0 Тогда
				СтрокаТабличнойЧасти = Товары.Добавить();
				СтрокаТабличнойЧасти.Номенклатура               = СтрокаЗаказа.Номенклатура;
				СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = СтрокаЗаказа.ХарактеристикаНоменклатуры;
				СтрокаТабличнойЧасти.ЕдиницаИзмерения           = СтрокаЗаказа.ЕдиницаИзмерения;
				СтрокаТабличнойЧасти.Коэффициент                = СтрокаЗаказа.Коэффициент;
				СтрокаТабличнойЧасти.СтавкаНДС                  = СтрокаЗаказа.СтавкаНДС;
				СтрокаТабличнойЧасти.ЗаказПокупателя            = Неопределено;
				СтрокаТабличнойЧасти.Количество                 = СписатьПоЗаказу;
                СтрокаТабличнойЧасти.ЗаказПоставщику = ЗаказСсылка;
				СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(
				                            ПересчитатьИзВалютыВВалюту(СтрокаЗаказа.Цена,
				                            ЗаказСсылка.ВалютаДокумента, ВалютаДокумента,
				                            КурсДокумента(ЗаказСсылка, мВалютаРегламентированногоУчета), КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				                            КратностьДокумента(ЗаказСсылка, мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
				                            Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
				                            ЗаказСсылка.СуммаВключаетНДС,
				                            УчитыватьНДС,
				                            СуммаВключаетНДС,
				                            ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

				СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

				ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти,    ЭтотОбъект, ПараметрыСеанса.ТекущийПользователь);
				РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти,   ЭтотОбъект);
				ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

			СтрокаЗаказа.КоличествоОстатокПоЗаказу = СтрокаЗаказа.КоличествоОстатокПоЗаказу - ВсегоСписано;
		КонецЦикла;
	КонецЦикла;

	
КонецПроцедуры

// Заполняет регл. реквизиты после упр. заполнения
// Процедура выполняет заполниение возвратной тары неполученными ТМЦ по заказу поставщику.
//
Процедура ЗаполнитьВозвратнуюТаруПоОстаткамУпр() Экспорт

	Запрос = Новый Запрос;
	ИмяТЧ  = "ЗаказПоставщику.ВозвратнаяТара";

	Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	Запрос.УстановитьПараметр("Договор",      ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка",       Сделка);
	Запрос.УстановитьПараметр("Тара",         Перечисления.ТоварТара.Тара);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура                     КАК Номенклатура,
	|	ВложенныйЗапрос.Цена                             КАК Цена,
	|	СУММА(ВложенныйЗапрос.КоличествоОстатокПоЗаказу) КАК КоличествоОстатокПоЗаказу,
	|	СУММА(ВложенныйЗапрос.КоличествоПоРазмещению)    КАК КоличествоПоРазмещению,
	|	ВложенныйЗапрос.Размещение                       КАК Размещение
	|ИЗ
	|
	|(
	|ВЫБРАТЬ
	|	Остатки.Номенклатура      КАК Номенклатура,
	|	Остатки.Цена              КАК Цена,
	|	Остатки.КоличествоОстаток КАК КоличествоОстатокПоЗаказу,
	|	0                         КАК КоличествоПоРазмещению,
	|	Неопределено              КАК Размещение
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ДоговорКонтрагента = &Договор
	|	                                              И ЗаказПоставщику  = &Сделка
	|	                                              И СтатусПартии     = &СтатусПартии) КАК Остатки
	|
	|ГДЕ
	|	НЕ Остатки.Номенклатура.Услуга И Остатки.КоличествоОстаток <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Размещение.Номенклатура      КАК Номенклатура,
	|	0                            КАК Цена,
	|	0                            КАК КоличествоОстатокПоЗаказу,
	|	Размещение.КоличествоОстаток КАК КоличествоПоРазмещению,
	|	Размещение.ЗаказПокупателя   КАК Размещение
	|ИЗ
	|	РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(, ЗаказПоставщику = &Сделка И ТоварТара = &Тара) КАК Размещение
	|
	|ГДЕ
	|	НЕ Размещение.Номенклатура.Услуга И Размещение.КоличествоОстаток > 0
	|
	|) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Размещение,
	|	ВложенныйЗапрос.Цена
	|
	|";

	РезультатЗапроса = Запрос.Выполнить();

	// Таблица остатков по размещению покупателям
	ТаблицаПоРазмещению = РезультатЗапроса.Выгрузить();
	Сч = 0;
	Пока Сч < ТаблицаПоРазмещению.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоРазмещению.Получить(Сч);
		Если СтрокаТаблицы.КоличествоПоРазмещению <= 0 Тогда
			ТаблицаПоРазмещению.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;

	// Таблица остатков по заказу поставщику
	ТаблицаПоЗаказу = РезультатЗапроса.Выгрузить();
	Сч = 0;
	Пока Сч < ТаблицаПоЗаказу.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоЗаказу.Получить(Сч);
		Если СтрокаТаблицы.КоличествоОстатокПоЗаказу = 0 Тогда
			ТаблицаПоЗаказу.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;

	// Нам надо знать сколько на самом деле осталось номенклатуры
	ТаблицаБезЦен = ТаблицаПоЗаказу.Скопировать();
	ТаблицаБезЦен.Свернуть("Номенклатура", "КоличествоОстатокПоЗаказу");

	Для каждого СтрокаБезЦен ИЗ ТаблицаБезЦен Цикл
		ВсегоПоЗаказу = СтрокаБезЦен.КоличествоОстатокПоЗаказу;
		ВсегоСписано  = 0;

		Если ВсегоСписано >= ВсегоПоЗаказу Тогда
			Прервать;
		КонецЕсли;

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаБезЦен.Номенклатура);

		СтрокиПоРазмещению = ТаблицаПоРазмещению.НайтиСтроки(СтруктураПоиска);
		СтрокиПоЗаказу     = ТаблицаПоЗаказу.НайтиСтроки(СтруктураПоиска);

		Для Каждого СтрокаЗаказа Из СтрокиПоЗаказу Цикл
			КолвоПоЗаказу       = СтрокаЗаказа.КоличествоОстатокПоЗаказу;
			СписатьПоРазмещению = 0;
			СписатьПоЗаказу     = 0;

			Если КолвоПоЗаказу <= 0 Тогда
				Продолжить;
			КонецЕсли;

			// Cписываем по размещению
			Для Каждого СтрокаРазмещения Из СтрокиПоРазмещению Цикл
				КолвоПоРазмещению = СтрокаРазмещения.КоличествоПоРазмещению;

				Если КолвоПоРазмещению <= 0 Тогда
					Продолжить;
				КонецЕсли;

				СписатьПоРазмещению = Мин(КолвоПоРазмещению, КолвоПоЗаказу - ВсегоСписано);
				ВсегоСписано        = ВсегоСписано + СписатьПоРазмещению;

				Если КолвоПоРазмещению > 0 Тогда
					СтрокаТабличнойЧасти = ВозвратнаяТара.Добавить();
					СтрокаТабличнойЧасти.Номенклатура    = СтрокаЗаказа.Номенклатура;
					СтрокаТабличнойЧасти.ЗаказПокупателя = СтрокаРазмещения.Размещение;
					СтрокаТабличнойЧасти.Количество      = СписатьПоРазмещению;

					СтрокаТабличнойЧасти.Цена = ПересчитатьИзВалютыВВалюту(СтрокаЗаказа.Цена,
					                            Сделка.ВалютаДокумента, ВалютаДокумента,
					                            КурсДокумента(Сделка, мВалютаРегламентированногоУчета), КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
					                            КратностьДокумента(Сделка, мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));

					РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
					ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

					СтрокаРазмещения.КоличествоПоРазмещению = СтрокаРазмещения.КоличествоПоРазмещению - СписатьПоРазмещению;
				КонецЕсли;
			КонецЦикла;

			// Cписываем без размещения
			СписатьПоЗаказу = КолвоПоЗаказу - ВсегоСписано;
			ВсегоСписано    = ВсегоСписано  + СписатьПоЗаказу;

			Если СписатьПоЗаказу > 0 Тогда
				СтрокаТабличнойЧасти = ВозвратнаяТара.Добавить();
				СтрокаТабличнойЧасти.Номенклатура    = СтрокаЗаказа.Номенклатура;
				СтрокаТабличнойЧасти.ЗаказПокупателя = Неопределено;
				СтрокаТабличнойЧасти.Количество      = СписатьПоЗаказу;

				СтрокаТабличнойЧасти.Цена = ПересчитатьИзВалютыВВалюту(СтрокаЗаказа.Цена,
				                            Сделка.ВалютаДокумента, ВалютаДокумента,
				                            КурсДокумента(Сделка, мВалютаРегламентированногоУчета), КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				                            КратностьДокумента(Сделка, мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));

				РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

			СтрокаЗаказа.КоличествоОстатокПоЗаказу = СтрокаЗаказа.КоличествоОстатокПоЗаказу - ВсегоСписано;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьВозвратнуюТаруПоОстаткамУпр()

// Процедура выполняет заполниение услуг неполученными услугами по заказу поставщику.
//
Процедура ЗаполнитьУслугиПоОстаткамУпр() Экспорт

	Запрос = Новый Запрос;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Товар",   Перечисления.ТоварТара.Товар);
	Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка",  Сделка);
	Запрос.УстановитьПараметр("ВозвратнаяТара", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.Номенклатура               КАК Номенклатура,
	|	Остатки.Номенклатура.СтавкаНДС     КАК СтавкаНДС,
	|	Остатки.Цена,
	|	Остатки.КоличествоОстаток          КАК КоличествоОстатокПоЗаказу
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ДоговорКонтрагента = &Договор И ЗаказПоставщику = &Сделка И СтатусПартии <> &ВозвратнаяТара) КАК Остатки
	|
	|ГДЕ Остатки.Номенклатура.Услуга
	|
	|";

	РезультатЗапроса = Запрос.Выполнить();

	ЗапросСодержаний = Новый Запрос;
	ЗапросСодержаний.УстановитьПараметр("Сделка",  Сделка);
	ЗапросСодержаний.Текст = "
	|ВЫБРАТЬ 
	|	Док.Номенклатура, 
	|	Док.Содержание 
	|ИЗ 
	|	Документ.ЗаказПоставщику.Услуги КАК Док
	|
	|ГДЕ Док.Ссылка = &Сделка";

	ТабСодержаний = ЗапросСодержаний.Выполнить().Выгрузить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаУслуг = Услуги.Добавить();
		СтрокаУслуг.Номенклатура = Выборка.Номенклатура;
		СтрокаУслуг.Количество   = Выборка.КоличествоОстатокПоЗаказу;
		СтрокаУслуг.СтавкаНДС    = Выборка.СтавкаНДС;

		СтрокаСодержания = ТабСодержаний.Найти(Выборка.Номенклатура, "Номенклатура");

		Если СтрокаСодержания = Неопределено Тогда
			ЗаполнитьСодержаниеТабЧасти(СтрокаУслуг, ЭтотОбъект);
		Иначе
			СтрокаУслуг.Содержание = СтрокаСодержания.Содержание;
		КонецЕсли;

		СтрокаУслуг.СтатьяЗатрат         = СтрокаУслуг.Номенклатура.СтатьяЗатрат;
		СтрокаУслуг.НоменклатурнаяГруппа = СтрокаУслуг.Номенклатура.НоменклатурнаяГруппаЗатрат;

		СтрокаУслуг.Цена = ПересчитатьИзВалютыВВалюту(Выборка.Цена,
		                   Сделка.ВалютаДокумента, ВалютаДокумента,
		                   КурсДокумента(Сделка,     мВалютаРегламентированногоУчета),
		                   КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
		                   КратностьДокумента(Сделка, мВалютаРегламентированногоУчета),
		                   КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));

		РассчитатьСуммуТабЧасти(СтрокаУслуг, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаУслуг, ЭтотОбъект);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьУслугиПоОстаткамУпр()

// Процедура выполняет заполнение табличной части по приходному ордеру товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (приходный ордер товаров).
//
Процедура ЗаполнитьТоварыПоОснованиюУпр(ДокументОснование, ТабличнаяЧасть) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

	Если ТабличнаяЧасть = ВозвратнаяТара Тогда
		ИмяТабличнойЧасти = "ВозвратнаяТара";
	Иначе
		ИмяТабличнойЧасти = "Товары";
	КонецЕсли;
	
	ДополнительныеРеглПоляОбщ		= "";
	ДополнительныеРеглПоляТовары 	= "";
	
	Запрос.УстановитьПараметр("ТипЦен",             ТипЦен);
	Запрос.УстановитьПараметр("ПустойТипЦен",       Справочники.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокТовары.Номенклатура,
	|	ДокТовары.Номенклатура.СтавкаНДС                            КАК СтавкаНДС,
	|	ДокТовары.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаХранения,
	|	ДокТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения," +
		ДополнительныеРеглПоляОбщ +"
	|	СУММА(ДокТовары.Количество)                        КАК КоличествоПоДокументу,
	|	NULL                                               КАК ЦенаВРознице, " + 
	?(ТабличнаяЧасть = Товары, "
	|	ДокТовары.СерияНоменклатуры," +
		ДополнительныеРеглПоляТовары +"
	|	ДокТовары.ХарактеристикаНоменклатуры, ", "") + "
	|	СУММА(ДокТовары.Количество)                        КАК КоличествоПоСерии, 
	|	МАКСИМУМ(Остатки.КоличествоОстаток)                КАК КоличествоОстатокКомпании,
	|   МАКСИМУМ(ВЫБОР КОГДА &ТипЦен = &ПустойТипЦен ТОГДА
	|       Остатки.Номенклатура.ЕдиницаХраненияОстатков
	|   ИНАЧЕ
	|       ВЫБОР КОГДА ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения ЕСТЬ NULL ТОГДА
	|           Остатки.Номенклатура.ЕдиницаХраненияОстатков
	|       ИНАЧЕ
	|           ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения 
	|       КОНЕЦ
	|   КОНЕЦ)                                                   КАК ЕдиницаИзмерения,
	|   МАКСИМУМ(ВЫБОР КОГДА &ТипЦен = &ПустойТипЦен ТОГДА
	|       Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|   ИНАЧЕ
	|       ВЫБОР КОГДА ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения ЕСТЬ NULL ТОГДА
	|           Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|       ИНАЧЕ
	|           ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения.Коэффициент 
	|       КОНЕЦ
	|   КОНЕЦ)                                                   КАК Коэффициент
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары." + ИмяТабличнойЧасти + " КАК ДокТовары
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(, ДокументПолучения = &ДокументОснование) КАК Остатки
	|ПО
	|	ДокТовары.Номенклатура = Остатки.Номенклатура" + 
	?(ТабличнаяЧасть = Товары, "
	| И ДокТовары.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры", "") + " 
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(, ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
	|   ПО ДокТовары.Номенклатура = ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура " + 
	?(ТабличнаяЧасть = Товары, "
	|      И ДокТовары.ХарактеристикаНоменклатуры = ЦеныНоменклатурыКонтрагентовСрезПоследних.ХарактеристикаНоменклатуры ", "") + "
	|
	|ГДЕ
	|	ДокТовары.Ссылка = &ДокументОснование
	|	И Остатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокТовары.Номенклатура" +
	?(ТабличнаяЧасть = Товары, ",
	|	ДокТовары.СерияНоменклатуры,
	|	ДокТовары.ХарактеристикаНоменклатуры", "");


	РезультатЗапроса = Запрос.Выполнить();

	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти = Товары.Добавить();

			СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество                 = Мин(Выборка.КоличествоОстатокКомпании, Выборка.КоличествоПоСерии);
			СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент                = Выборка.Коэффициент;
			СтрокаТабличнойЧасти.СтавкаНДС                  = Выборка.СтавкаНДС;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;

			ЗаполнитьЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		Иначе

			СтрокаТабличнойЧасти = ВозвратнаяТара.Добавить();

			СтрокаТабличнойЧасти.Номенклатура = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество   = Мин(Выборка.КоличествоОстатокКомпании, Выборка.КоличествоПоСерии);

			ЗаполнитьЦенуВозвратнойТарыТабЧастиПоступление(СтрокаТабличнойЧасти, ЭтотОбъект)
		КонецЕсли;

		СтрокаТабличнойЧасти.ПриходныйОрдер = ДокументОснование;
		СтрокаТабличнойЧасти.Склад          = ДокументОснование.Склад;

	КонецЦикла; // Выборка.Следующий()

КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

// Заполняет табличную часть при оперативном проведении
//
// Параметры:
//  Отказ - отказ от дальнейшего проведения.
//
Процедура ЗаполнитьТабличныеЧастиПередПроведениемУпр(Отказ) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Ссылка",          Ссылка);
	Запрос.УстановитьПараметр("ЗаказПоставщику", Сделка);
	Запрос.УстановитьПараметр("Склад",   СкладОрдер);


	КопияТовары = Товары.Выгрузить();
	КопияТовары.Свернуть("Номенклатура",);
	КопияВозвратнаяТара = ВозвратнаяТара.Выгрузить();
	КопияВозвратнаяТара.Свернуть("Номенклатура",);
	
	// Сформируем массив номенклатуры по товарам и таре для фильтров запросов.
	МассивНоменклатуры = КопияТовары.ВыгрузитьКолонку("Номенклатура");
	МассивНоменклатурыТара = КопияВозвратнаяТара.ВыгрузитьКолонку("Номенклатура");
	Для Каждого ЭлементТара Из МассивНоменклатурыТара Цикл
		МассивНоменклатуры.Добавить(ЭлементТара);
	КонецЦикла; 
	
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);

	КопияТовары = Товары.Выгрузить();
	КопияТовары.Свернуть("ЗаказПокупателя",);
	КопияВозвратнаяТара = ВозвратнаяТара.Выгрузить();
	КопияВозвратнаяТара.Свернуть("ЗаказПокупателя",);
	
	// Сформируем массив заказов покупателей по товарам и таре для фильтров запросов.
	МассивЗаказов = КопияТовары.ВыгрузитьКолонку("ЗаказПокупателя");
	МассивЗаказовТара = КопияВозвратнаяТара.ВыгрузитьКолонку("ЗаказПокупателя");
	Для Каждого ЭлементТара Из МассивНоменклатурыТара Цикл
		МассивЗаказов.Добавить(ЭлементТара);
	КонецЦикла; 
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстатки.СтатусПартии,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя,
	|	ЗаказыПокупателейОстатки.КоличествоОстаток   КАК Количество,
	|	РезервыОстатки.КоличествоОстаток             КАК Резерв
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(,Номенклатура В (&МассивНоменклатуры)
	|			 И ЗаказПокупателя В (&МассивЗаказов)) КАК ЗаказыПокупателейОстатки
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(,Номенклатура В (&МассивНоменклатуры)
	|			 И ДокументРезерва В (&МассивЗаказов)) КАК РезервыОстатки
	|	ПО ЗаказыПокупателейОстатки.ЗаказПокупателя = РезервыОстатки.ДокументРезерва 
	|    И ЗаказыПокупателейОстатки.Номенклатура    = РезервыОстатки.Номенклатура";

	Таблица = Запрос.Выполнить().Выгрузить();

	Для каждого Строка ИЗ Таблица Цикл
		Строка.Количество = ?(Строка.Количество <> NULL, Строка.Количество, 0) - ?(Строка.Резерв <> NULL, Строка.Резерв, 0);
	КонецЦикла;

	ПустаяХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	
	// Заполним массив, хранящий две таблицы значений, в которых задано распределение по
	// заказам покупателей для товаров и возвратной тары
	МассивТаблицСтрок = Новый Массив(2);

	Для Сч = 0 По 1 Цикл

		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары = Ложь;
		КонецЕсли;

		ТаблицаТЧ = ТабличнаяЧасть.Выгрузить();
		ТаблицаТЧ.Колонки.Добавить("КоличествоЕдиницХранения");

		МассивТаблицСтрок[Сч] = ТабличнаяЧасть.Выгрузить();
		МассивТаблицСтрок[Сч].Очистить();
		МассивТаблицСтрок[Сч].Колонки.Добавить("ИндексИсходнойСтроки");
		МассивТаблицСтрок[Сч].Колонки.Добавить("СкладРозничный");

		Для Каждого СтрокаТЧ Из ТаблицаТЧ Цикл

			Если ЗначениеНеЗаполнено(СтрокаТЧ.ЗаказПокупателя) Тогда
				Продолжить;
			КонецЕсли; 

			// Пересчитаем в единицы хранения
			Если ЭтоТовары Тогда
				СтрокаТЧ.КоличествоЕдиницХранения = СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент 
										/ СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
			Иначе
				СтрокаТЧ.КоличествоЕдиницХранения = СтрокаТЧ.Количество;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);

			Если ЭтоТовары Тогда
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
			Иначе
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПустаяХарактеристикаНоменклатуры);
			КонецЕсли; 

			НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);

			// Погашаем количество в таблице
			КоличествоОсталосьПогасить = СтрокаТЧ.КоличествоЕдиницХранения;
			СуммаОсталосьПогасить      = СтрокаТЧ.Сумма;

			// Погашаем количество в таблице, записывая способ списания
			Для Каждого Строка Из НайденныеСтроки Цикл

				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;

				Если Строка.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;

				Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить / Строка.Количество ;
				Иначе
					КоэффСписания = 1;
				КонецЕсли;

				СписанноеКоличество = Окр(Строка.Количество  * КоэффСписания, 3, РежимОкругления.Окр15как20);

				// Добавляем строку с данными о распределенном количестве
				НоваяСтрока = МассивТаблицСтрок[Сч].Добавить();
				НоваяСтрока.ИндексИсходнойСтроки = ТаблицаТЧ.Индекс(СтрокаТЧ);

				НоваяСтрока.Номенклатура     = СтрокаТЧ.Номенклатура;
				
				НоваяСтрока.Количество     = СписанноеКоличество;
				
				Если ЭтоТовары Тогда
					НоваяСтрока.ЕдиницаИзмерения = СтрокаТЧ.ЕдиницаИзмерения;
					НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
					НоваяСтрока.СтавкаНДС           = СтрокаТЧ.СтавкаНДС;
					НоваяСтрока.КоличествоМест = ?(СтрокаТЧ.Коэффициент <> 0, СписанноеКоличество
					* НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / СтрокаТЧ.Коэффициент 
												, 0);
					НоваяСтрока.Коэффициент = СтрокаТЧ.Коэффициент;
				КонецЕсли;

				НоваяСтрока.Цена = СтрокаТЧ.Цена;


				КоэффПогашения = СписанноеКоличество / КоличествоОсталосьПогасить;

				НоваяСтрока.Сумма = Окр(СуммаОсталосьПогасить * КоэффПогашения, 2 ,1);

				НоваяСтрока.ЗаказПокупателя = Строка.ЗаказПокупателя;
				
				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - СписанноеКоличество;
				СуммаОсталосьПогасить = СуммаОсталосьПогасить - НоваяСтрока.Сумма;

				// Уменьшаем количество в исходной строке
				СтрокаТЧ.Количество = СтрокаТЧ.КоличествоЕдиницХранения - СписанноеКоличество;

				// Уменьшаем количество в строке остатков
				Строка.Количество   = Строка.Количество - СписанноеКоличество;

			КонецЦикла;
			
			Если КоличествоОсталосьПогасить > 0 Тогда

				// Добавляем строку с данными о распределенном количестве
				НоваяСтрока = МассивТаблицСтрок[Сч].Добавить();
				НоваяСтрока.ИндексИсходнойСтроки = ТаблицаТЧ.Индекс(СтрокаТЧ);
				НоваяСтрока.Номенклатура = СтрокаТЧ.Номенклатура;
				
				НоваяСтрока.Количество     = КоличествоОсталосьПогасить;

				Если ЭтоТовары Тогда
					НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
					НоваяСтрока.СтавкаНДС           = СтрокаТЧ.СтавкаНДС;
					НоваяСтрока.ЕдиницаИзмерения = СтрокаТЧ.ЕдиницаИзмерения;
					НоваяСтрока.КоличествоМест = ?(СтрокаТЧ.Коэффициент <>0, КоличествоОсталосьПогасить 
					* НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент/ СтрокаТЧ.Коэффициент 
												, 0);
					НоваяСтрока.Коэффициент = СтрокаТЧ.Коэффициент;
				КонецЕсли;

				НоваяСтрока.Цена = СтрокаТЧ.Цена;

				НоваяСтрока.СкладРозничный = Ложь;
				

				НоваяСтрока.Сумма = Окр(СуммаОсталосьПогасить, 2, 1);

				НоваяСтрока.ЗаказПокупателя = Неопределено;

			КонецЕсли; 

		КонецЦикла;
	КонецЦикла;

	// Изменяем табличную часть
	Для Сч = 0 По 1 Цикл
		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары = Ложь;
		КонецЕсли;

		ТекИндексИсходнойСтроки = Неопределено;
		Для Каждого Строка Из МассивТаблицСтрок[Сч] Цикл

			// Если строка с таким индексом уже обрабатывалась, то добавляем новую
			Если ТекИндексИсходнойСтроки = Строка.ИндексИсходнойСтроки Тогда
				Стр = ТабличнаяЧасть[Строка.ИндексИсходнойСтроки];
				РедактируемаяСтрока = ТабличнаяЧасть.Добавить();
				РедактируемаяСтрока.Номенклатура = Стр.Номенклатура;
				Если ЭтоТовары Тогда
					РедактируемаяСтрока.ХарактеристикаНоменклатуры = Стр.ХарактеристикаНоменклатуры;
					РедактируемаяСтрока.СтавкаНДС = Стр.СтавкаНДС;
				КонецЕсли;
			Иначе
				РедактируемаяСтрока = ТабличнаяЧасть[Строка.ИндексИсходнойСтроки];
			КонецЕсли; 

			РедактируемаяСтрока.ЗаказПокупателя = Строка.ЗаказПокупателя;

			Если РедактируемаяСтрока.Количество = Строка.Количество Тогда
				Продолжить;
			КонецЕсли;

			РедактируемаяСтрока.Количество       = Строка.Количество;

			Если ЭтоТовары Тогда
				РедактируемаяСтрока.СтавкаНДС = Строка.СтавкаНДС;
				Если Строка.СкладРозничный = Истина Тогда
					РедактируемаяСтрока.Цена = Строка.Цена;
					РассчитатьСуммуТабЧасти(РедактируемаяСтрока, ЭтотОбъект);
				Иначе
					РедактируемаяСтрока.Сумма = Строка.Сумма;
					ПриИзмененииСуммыТабЧасти(РедактируемаяСтрока, ЭтотОбъект, ПараметрыСеанса.ТекущийПользователь);
				КонецЕсли; 
				РедактируемаяСтрока.ЕдиницаИзмерения = Строка.ЕдиницаИзмерения;
				РедактируемаяСтрока.Коэффициент      = Строка.Коэффициент;
				РассчитатьСуммуНДСТабЧасти(РедактируемаяСтрока, ЭтотОбъект);
			Иначе
				РедактируемаяСтрока.Сумма = Строка.Сумма;
				РедактируемаяСтрока.Цена = ?(РедактируемаяСтрока.Количество <> 0, РедактируемаяСтрока.Сумма/РедактируемаяСтрока.Количество, 0);
			КонецЕсли;
			
			ЗаполнитьСкладИОрдерТабЧасти(РедактируемаяСтрока, ЭтотОбъект);
			ТекИндексИсходнойСтроки = Строка.ИндексИсходнойСтроки;

		КонецЦикла; 
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТабличныеЧастиПередПроведением()

Процедура ЗаполнитьДокументПоОснованиюУпр(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику")
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		//+++ номер в филиале начинается с ТК?!
		ЭтотОбъект.УстановитьНовыйНомер(Подразделение.ПрефиксИБ);
		Дата  = ТекущаяДата();
		
		ОтражатьВУправленческомУчете = Истина;
		
		Если Подразделение.ВЭД Тогда
			ОтражатьВНалоговомУчете = Ложь;
			ОтражатьВБухгалтерскомУчете = Ложь;
		КонецЕсли;
		
        //+++( 07.02.2012
		ВалютаДокумента 			 = Основание.ВалютаДокумента;
		// курс и кратность на дату Заказа
		КурсВзаиморасчетов           = Основание.КурсВзаиморасчетов;
		КратностьВзаиморасчетов      = Основание.КратностьВзаиморасчетов;
		//+++)

		// Табличные части заполняем только если взаиморасчеты ведутся не по расчетным документам.
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
		 или ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		 ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда

			Сделка = Основание;

			Если Сделка.Проведен Тогда

				СкладОрдер     = Основание.Склад;
				ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;

				// Заполним табличные части неполученными ТМЦ по заказу поставщику.
				ЗаполнитьТоварыПоОстаткамУпр();
				ЗаполнитьВозвратнуюТаруПоОстаткамУпр();
				ЗаполнитьУслугиПоОстаткамУпр();

			ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда

				СкопироватьТовары();
				СкопироватьВозвратнуюТару();
				СкопироватьУслуги();

			КонецЕсли;
		КонецЕсли;
		//если контрагент = Справочники.Контрагенты.НайтиПоКоду("95728") тогда
		//	Расходы =  Сделка.ПлановыеДопРасходы.Выгрузить(,"Номенклатура,СуммаФакт");
		//	//17.09.18 Смирнов, fob не всегда есть, вылезала ошибка
		//	стр=Расходы.Найти("FOB");
		//	//Расходы.Удалить(стр);
		//	если стр<>неопределено тогда
		//		Расходы.Удалить(стр);
		//	конецЕсли;
		//	СуммаКомиссии = Расходы.Итог("СуммаФакт");
		//конецЕсли;
		
		
		//Если Подразделение.ВЭД Тогда
		//	для каждого стр из Товары Цикл
		//		стр.Склад = Справочники.Склады.НайтиПоКоду("02211");
		//	КонецЦикла;
		//КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ОтражатьВУправленческомУчете = Истина;
		СкладОрдер                   = ?(ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары"),Основание,Справочники.Склады.ПустаяСсылка()) ;
		ВидПоступления               = ?(ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары"),Перечисления.ВидыПоступленияТоваров.ПоОрдеру,Перечисления.ВидыПоступленияТоваров.НаСклад);
		ДоговорКонтрагента           = Контрагент.ОсновнойДоговорКонтрагента;
		ТипЦен                       = ДоговорКонтрагента.ТипЦен;
		УчитыватьНДС                 = Истина;
		СуммаВключаетНДС             = ТипЦен.ЦенаВключаетНДС;
		ВалютаДокумента              = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		СтруктураКурса               = ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсВзаиморасчетов           = СтруктураКурса.Курс;
		КратностьВзаиморасчетов      = СтруктураКурса.Кратность;

		Если Основание.Проведен Тогда

			// Заполним табличную часть "Товары" по приходному ордеру на товары.
			ЗаполнитьТоварыПоОснованиюУпр(Основание, Товары);
			ЗаполнитьТоварыПоОснованиюУпр(Основание, ВозвратнаяТара);
		КонецЕсли;

	ИначеЕсли  ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаЗаказаПоставщику") Тогда
		ЗаполнитьШапкуДокумента(ЭтотОбъект, ПараметрыСеанса.ТекущийПользователь, мВалютаРегламентированногоУчета, "Покупка");
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,Основание);  // копируем реквизиты документа
		ДоговорКонтрагента=Основание.ЗаказПоставщику.ДоговорКОнтрагента;
		Сделка=Основание.ЗаказПоставщику;
		ВидПоступления=Перечисления.ВидыПоступленияТоваров.НаСклад ;
		СкладОрдер = Справочники.Склады.ПустаяСсылка();
		
		//+++( 07.02.2012 - валюта берется из Заказа поставщика, иначе по Курсу=1 -> руб. иначе $
		Дата = ТекущаяДата();
		ВалютаДокумента = ?(ЗначениеЗаполнено(Основание.ЗаказПоставщику), Основание.ЗаказПоставщику.ВалютаДокумента, ?(Основание.КурсВзаиморасчетов=1,Справочники.Валюты.НайтиПоКоду("643"),Справочники.Валюты.НайтиПоКоду("810")) );
		КурсВзаиморасчетов           = Основание.КурсВзаиморасчетов;
		КратностьВзаиморасчетов      = Основание.КратностьВзаиморасчетов;
		//+++)
		
		Для каждого строкаТоварыОснование ИЗ Основание.Товары Цикл
			Если строкаТоварыОснование.Количество>0 Тогда
			строкаТовары =Товары.Добавить();
			ЗаполнитьЗначенияСвойств(строкаТовары,строкаТоварыОснование);
			КонецЕсли;
		КонецЦикла;	
		
	КонецЕсли;

КонецПроцедуры

// Процедура выполняет заполнение ТЧ Товары по документу-основанию Реализация.
// При заполнении копируется состав документа.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьТоварыПоОснованиюРеализация(ДокументОснование) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка.ВалютаДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|       Док.Ссылка.КурсВзаиморасчетов
	|   ИНАЧЕ
	|       1
	|   КОНЕЦ                         КАК КурсДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|       Док.Ссылка.КратностьВзаиморасчетов
	|   ИНАЧЕ
	|       1
	|   КОНЕЦ                         КАК КратностьДокумента,
	|	Док.Ссылка.УчитыватьНДС,
	|	Док.Ссылка.СуммаВключаетНДС,
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.ЕдиницаИзмеренияМест,
	|	Док.Коэффициент,
	|	Док.СтавкаНДС,
	|	Док.Количество,
	|	Док.КоличествоМест,
	|	Док.Сумма,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК Док
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование И Не Док.Номенклатура.Услуга
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура         = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество           = Выборка.Количество;
		СтрокаТабличнойЧасти.КоличествоМест       = Выборка.КоличествоМест;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения     = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = Выборка.ЕдиницаИзмеренияМест;
		СтрокаТабличнойЧасти.Коэффициент          = Выборка.Коэффициент;
		СтрокаТабличнойЧасти.СтавкаНДС            = Выборка.СтавкаНДС;

		// Т.к. в Реализации могла быть скидка. то цену расчитываем от суммы
		СтрокаТабличнойЧасти.Сумма                = Выборка.Сумма;

		// Пересчитаем сумму в валюту документа (может отличаться от валюты основания).
		Сумма = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента, 
		                   Выборка.КурсДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
		                   Выборка.КратностьДокумента, КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));

		СтрокаТабличнойЧасти.Сумма = ПересчитатьЦенуПриИзмененииФлаговНалогов(Сумма,
		                                 Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
		                                 Выборка.УчитыватьНДС И Выборка.СуммаВключаетНДС,
		                                 УчитыватьНДС,
		                                 СуммаВключаетНДС,
		                                 ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

		ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ПараметрыСеанса.ТекущийПользователь);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоОснованиюРеализация()

// Процедура выполняет заполнение ТЧ Возвратная Тара по документу-основанию Реализация.
// При заполнении копируется состав документа.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьВозвратнуюТаруПоОснованиюРеализация(ДокументОснование) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Док.Ссылка.КурсВзаиморасчетов,
	|	Док.Ссылка.КратностьВзаиморасчетов,
	|	Док.Номенклатура,
	|	Док.Количество,
	|	Док.Цена
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК Док
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаВозвратнойТары = ВозвратнаяТара.Добавить();

		СтрокаВозвратнойТары.Номенклатура     = Выборка.Номенклатура;
		СтрокаВозвратнойТары.Количество       = Выборка.Количество;
		СтрокаВозвратнойТары.Цена             = Выборка.Цена;

		// Пересчитаем цену в валюту взаиморасчетов (в документах договоры могут отличаться).
		Цена = ПересчитатьИзВалютыВВалюту(СтрокаВозвратнойТары.Цена, 
		                  Выборка.ВалютаВзаиморасчетов, ДоговорКонтрагента.ВалютаВзаиморасчетов,
		                  Выборка.КурсВзаиморасчетов, КурсВзаиморасчетов,
		                  Выборка.КратностьВзаиморасчетов, КратностьВзаиморасчетов);

		РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаВозвратнойТары, ЭтотОбъект);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоОснованиюРеализация()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// По виду операции определяет статус партии прихода товаров (не возвратная тара!)
//
// Параметры: 
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке.
//
// Возвращаемое значение:
//  Значение перечисления "Статусы партии товаров".
//
Функция ОпределитьСтатусПартииПриходаУпр(СтруктураШапкиДокумента) 

	Статус = Перечисления.СтатусыПартийТоваров.ПустаяСсылка();

	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		Статус = Перечисления.СтатусыПартийТоваров.НаКомиссию;
	Иначе
		Статус = Перечисления.СтатусыПартийТоваров.Купленный; 
	КонецЕсли;

	Возврат Статус;

КонецФункции // ОпределитьСтатусПартииПриходаУпр()

// Заполняет в таблице движений по регитстру ПартииТоваровНаСкладах нестандартные поля.
//
// Параметры:
//  ТаблицаТЧ       - таблица значений, соответствующая табличной части документа
//  ТаблицаДвижений - таблица значений, соответствующая набору записей регистра,
//  СтатусПартии    - значение перечисления статусов партий. 
//
Процедура ЗаполнитьПоляПартииТоваровНаСкладахУпр(ТаблицаТЧ, ТаблицаДвижений, СтатусПартии, СтруктураШапкиДокумента)

	Для каждого СтрокаДвижений Из ТаблицаДвижений Цикл

		Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
		Иначе
			СтрокаДвижений.Склад = Неопределено;
		КонецЕсли;

		Если Не мПорядокСписанияПартий.Упр = Перечисления.СпособыОценки.ПоСредней 
		 ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			СтрокаДвижений.ДокументОприходования = Ссылка;
		КонецЕсли;
		
		СтрокаДвижений.СтатусПартии          = СтатусПартии;

		// Заказ заполняем если его указали в документе и по договору ведется обособленный учет товаров по заказам.
		СтрокаТЧ = ТаблицаТЧ.Найти(СтрокаДвижений.НомерСтроки, "НомерСтроки");
		ОбособленныйУчет = СтрокаТЧ.ОбособленныйУчетТоваровПоЗаказамПокупателей;
		СтрокаДвижений.Заказ = ?(ОбособленныйУчет <> NULL И ОбособленныйУчет 
		    И Не (ЗначениеНеЗаполнено(СтрокаТЧ.ЗаказПокупателя)), СтрокаТЧ.ЗаказПокупателя, Неопределено);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоляПартииТоваровНаСкладах()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Создаем колонку "Стоимость" и копируем в нее колонку "Сумма"
	ТаблицаТоваров.Колонки.Добавить("Стоимость", ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("Сумма") , "Стоимость");
	
	ТаблицаТоваров.Колонки.Добавить("КоличествоМинус", ПолучитьОписаниеТиповЧисла(15,3));

	// Порядок вызова в данном случае важен
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("ЦенаВВалютеЗаказа"  , ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"           , ПолучитьОписаниеТиповЧисла(15,2));

	ЕстьЦена = Не ТаблицаТоваров.Колонки.Найти("Цена") = Неопределено;
	
	// Надо расчитать нужные колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		// Считаем, что поступление выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, ВалютаДокумента, 
			                                  СтруктураШапкиДокумента.ВалютаЗаказа,
			                                  КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
			                                  СтруктураШапкиДокумента.КурсЗаказа,
			                                  КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
			                                  СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;

		СтрокаТаблицы.КоличествоМинус = - СтрокаТаблицы.Количество;
		СтоимостьСНДС  = СтрокаТаблицы.Стоимость + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Если СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий Тогда
			СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Иначе
			СтрокаТаблицы.Стоимость = СтоимостьСНДС;
		КонецЕсли;

		СтрокаТаблицы.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СтоимостьСНДС, ВалютаДокумента, 
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
		                                 КурсВзаиморасчетов, КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов);

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаУпр = ПересчитатьИзВалютыВВалюту(СтоимостьСНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.Стоимость = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		// Цена нужна для проведения по заказам поставщиков, поэтому ее необходимо пересчитать в валюту заказа
		Если ЕстьЦена И НЕ ЗначениеНеЗаполнено(СтруктураШапкиДокумента.Сделка) 
			И (ТипЗнч(СтруктураШапкиДокумента.Сделка) = Тип("ДокументСсылка.ЗаказПоставщику")
			ИЛИ ТипЗнч(СтруктураШапкиДокумента.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")) Тогда
			СтруктураКурсаВалютыЗаказа = ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаЗаказа, Дата);
			СтрокаТаблицы.Цена = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаЗаказа,
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураКурсаВалютыЗаказа.Курс, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураКурсаВалютыЗаказа.Кратность);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	// Переименуем колонку "Сумма" в "Стоимость" (как в регистрах).
	ТаблицаТары.Колонки.Сумма.Имя = "Стоимость";
	
	// Порядок вызова в данном случае важен
	ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

Процедура ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента)

	ТаблицаТары.Колонки.Добавить("ЦенаВВалютеЗаказа"  , ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов", ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаТары.Колонки.Добавить("СуммаУпр"           , ПолучитьОписаниеТиповЧисла(15,2));

	// Надо расчитать сумму без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		// Счиатем, что поступление выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, ВалютаДокумента, 
			                                  СтруктураШапкиДокумента.ВалютаЗаказа,
			                                  КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
			                                  СтруктураШапкиДокумента.КурсЗаказа,
			                                  КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
			                                  СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;

		СтрокаТаблицы.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента, 
			                                  СтруктураШапкиДокумента.ВалютаВзаиморасчетов, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
			                                  КурсВзаиморасчетов, КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов);

		СтрокаТаблицы.СуммаУпр = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
			                             СтруктураШапкиДокумента.ВалютаУправленческогоУчета, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
			                             СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			                             КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
			                             СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		// Суммы пересчитаем в валюту упр. учета. По таре считаем, что СуммаБезНДС = Сумма
		СтрокаТаблицы.Стоимость = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);


	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТарыУпр()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейШапкиУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	// Если установлен призник "Обновлять цены поставщиков при поступлении товаров",
	// то надо обязательно указывать тип цен
	Если РегистрироватьЦеныПоставщика И ОтражатьВУправленческомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("ТипЦен", "Для обновления цен поставщиков необходимо указывать тип цен!");
	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, 
	                             |ВалютаДокумента, Контрагент, ДоговорКонтрагента, ВидПоступления,
	                             |КурсВзаиморасчетов, КратностьВзаиморасчетов");

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад
	   И Не СтруктураШапкиДокумента.СкладВТабличнойЧасти
	   И Товары.Количество() + ВозвратнаяТара.Количество() > 0 Тогда
		СтруктураОбязательныхПолей.Вставить("СкладОрдер");
	КонецЕсли;

	Если не ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ПродажаАвтозапчастей") Тогда
		// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			СтруктураОбязательныхПолей.Вставить( "Сделка", 
			"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам (счетам)""! 
			|Заполните поле ""Заказ поставщику""!");
		ИначеЕсли СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			СтруктураОбязательныхПолей.Вставить( "Сделка", 
			"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам (счетам)""! 
			|Заполните поле ""Счет поставщика""!");
		КонецЕсли;
    КонецЕсли;
	
	ДополнитьСтруктуруОбязательныхПолейШапкиУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выполняет проверки,которые нужны только для упр. учета
Процедура ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Если склад указывается в ТЧ, то в шапке он может быть не заполнен или указан неправильно,
	// это ни на что не влияет, потому что при проведении используется склад в ТЧ.
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад
	   И Не СтруктураШапкиДокумента.СкладВТабличнойЧасти 
	   И СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			ОшибкаПриПроведении("Документ не может осуществлять поступление на неавтоматизированную торговую точку!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)


КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	СтруктураОбязательныхПолей.Вставить("Сумма");

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураОбязательныхПолей.Вставить("ПриходныйОрдер");
	КонецЕсли;

	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь НТТ быть не должно.
	ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиУслугиУпр(СтруктураОбязательныхПолей)


КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  РезультатЗапросаПоУслугам - результат запроса, содержащий данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                     - флаг отказа в проведении.
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Услуги";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Количество, Сумма, Содержание");

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиУслугиУпр(СтруктураОбязательныхПолей);
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);
	Иначе
		КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, , СтруктураОбязательныхПолей);
	КонецЕсли;

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь товаров быть не должно.
	ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)


КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ВозвратнаяТара";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = СформироватьСтруктуруОбязательныхПолейТара();

	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураОбязательныхПолей.Вставить("ПриходныйОрдер");
	КонецЕсли;

	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);
	Иначе
		КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, , СтруктураОбязательныхПолей);
	КонецЕсли;

	// Теперь позовем общую процедуру проверки заполнения.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара",СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь НТТ быть не должно.
	ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

Процедура ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок, СтруктураШапкиДокумента)

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
	НаборДвижений = Движения.ТоварыОрганизаций;

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ТоварыОрганизаций.ВыполнитьПриход();
		КонецЕсли;

	Иначе // По ордеру

		// По ордеру нужно сторнировать движения по товарам организаций,
		// если в ордере была указана не та организация.
		// Удалим строки, по которым не нужно делать движений (организации совпадают).
		КопияТаблицыТоваров = ТаблицаПоТоварам.Скопировать();
		КолвоЭлементовКоллекции = КопияТаблицыТоваров.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
			ЭлементКоллекции = КопияТаблицыТоваров[КолвоЭлементовКоллекции - ОбратныйИндекс];
			Если ЭлементКоллекции.ОрганизацияДокументаПолучения = СтруктураШапкиДокумента.Организация Тогда
				КопияТаблицыТоваров.Удалить(ЭлементКоллекции);
			КонецЕсли;
		КонецЦикла;

		Если КопияТаблицыТоваров.Количество() > 0 Тогда // Есть что проводить.

			// Вначале сторнируем
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(КопияТаблицыТоваров, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗагрузитьКолонку(КопияТаблицыТоваров.ВыгрузитьКолонку("ОрганизацияДокументаПолучения"), "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ТоварыОрганизаций.ВыполнитьРасход();
			КонецЕсли;

			// Теперь сделаем движения с правильной организацией.
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ТоварыОрганизаций.ВыполнитьПриход();
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизацийРегл()

// Проводит табличные части "Товары" и "Возвратная тара" по регистрам
//
// Параметры:
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ТоварыИТараПоРегистрамОстатковИПартийУпр(РежимПроведения, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ, Заголовок, СтруктураШапкиДокумента)

	// Определим код операции движений по регистру партий
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПоступлениеНаКомиссию;
	Иначе
		КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.Поступление
	КонецЕсли;
	
	Если ОтражатьВУправленческомУчете Тогда

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
		Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда

			НаборДвижений = Движения.ТоварыНаСкладах;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвиженийТоварыНаСкладах = НаборДвижений.Выгрузить();
			ТаблицаДвиженийТоварыНаСкладах.Очистить();
			ТаблицаДвижений = ТаблицаДвиженийТоварыНаСкладах.Скопировать();

			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ТоварыНаСкладах.ВыполнитьПриход();
			КонецЕсли;

		Иначе // Приход по ордеру

			НаборДвижений = Движения.ТоварыКПолучениюНаСклады;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвиженийТоварыКПолучению = НаборДвижений.Выгрузить();
			ТаблицаДвиженийТоварыКПолучению.Очистить();
			ТаблицаДвижений = ТаблицаДвиженийТоварыКПолучению.Скопировать();

			// Заполним таблицу движений.
			ТаблицаКПолучению = ТаблицаПоТоварам.Скопировать();
			ТаблицаКПолучению.Колонки.Добавить("ДокументРезерва");
			
			// Документ резерва - приходный ордрер без права продажи.
			Для каждого СтрокаТаблицы из ТаблицаКПолучению Цикл

				Если СтрокаТаблицы.БезПраваПродажи Тогда
					СтрокаТаблицы.ДокументРезерва = СтрокаТаблицы.ДокументПолучения;
				КонецЕсли;

			КонецЦикла;

			ЗагрузитьВТаблицуЗначений(ТаблицаКПолучению, ТаблицаДвижений);

			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			// Проверка осатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;
			
			Если Не Отказ Тогда
				Движения.ТоварыКПолучениюНаСклады.ВыполнитьРасход();
			КонецЕсли;

		КонецЕсли;
		
		// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах.
		НаборДвижений = Движения.ПартииТоваровНаСкладах;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвиженийПартииТоваровНаСкладах = НаборДвижений.Выгрузить();
		ТаблицаДвиженийПартииТоваровНаСкладах.Очистить();
		ТаблицаДвижений = ТаблицаДвиженийПартииТоваровНаСкладах.Скопировать();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля.
		ЗаполнитьПоляПартииТоваровНаСкладахУпр(ТаблицаПоТоварам, ТаблицаДвижений, ОпределитьСтатусПартииПриходаУпр(СтруктураШапкиДокумента), СтруктураШапкиДокумента);
		
		// Код операции
		ТаблицаДвижений.ЗаполнитьЗначения(КодОперацииПартииТоваров, "КодОперации");
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ПартииТоваровНаСкладах.ВыполнитьПриход();
		КонецЕсли;
		
		// При поступлении по ордеру нужно сторнировать партию ордера
		Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда

			ТаблицаДвижений.Очистить();
			
			ТаблицаПартииПоОрдерам = ТаблицаПоТоварам.Скопировать();
			ТаблицаПартииПоОрдерам.Колонки.Добавить("ДокументОприходования");
			
			Сч = 0;
			Пока Сч < ТаблицаПартииПоОрдерам.Количество() Цикл
				СтрокаТаблицы = ТаблицаПартииПоОрдерам.Получить(Сч);
				Если СтрокаТаблицы.БезПраваПродажи = Истина Тогда
					ТаблицаПартииПоОрдерам.Удалить(СтрокаТаблицы);
				Иначе

					// Документ оприходования - приходный ордрер
					СтрокаТаблицы.ДокументОприходования = СтрокаТаблицы.ДокументПолучения;
					Сч = Сч + 1;
				КонецЕсли;
			КонецЦикла;
			
			Если ТаблицаПартииПоОрдерам.Количество() > 0 Тогда

				// Заполним таблицу движений.
				ЗагрузитьВТаблицуЗначений(ТаблицаПартииПоОрдерам, ТаблицаДвижений);
				
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ПоОрдеру, "СтатусПартии");
				ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
				

				Для каждого Строка Из ТаблицаДвижений Цикл
					Строка.Количество = - Строка.Количество;
				КонецЦикла;

				ТаблицаДвижений.ЗаполнитьЗначения(0, "Стоимость");
			
				// Код операции - поступление по ордеру (сторно)
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПоступлениеПоОрдеру, "КодОперации");

				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

				Если Не Отказ Тогда
					Движения.ПартииТоваровНаСкладах.ВыполнитьПриход();
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;
		
		// ТАРА ПО РЕГИСТРУ ТоварыНаСкладах.
		Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда

			НаборДвижений = Движения.ТоварыНаСкладах;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = ТаблицаДвиженийТоварыНаСкладах.Скопировать();

			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ТоварыНаСкладах.ВыполнитьПриход();
			КонецЕсли;

		Иначе // по ордеру

			НаборДвижений = Движения.ТоварыКПолучениюНаСклады;
			ТаблицаДвиженийТоварыКПолучению = НаборДвижений.Выгрузить();
			ТаблицаДвиженийТоварыКПолучению.Очистить();

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = ТаблицаДвиженийТоварыКПолучению.Скопировать();

			// Заполним таблицу движений.
			ТаблицаКПолучению = ТаблицаПоТаре.Скопировать();
			ТаблицаКПолучению.Колонки.Добавить("ДокументРезерва");
			
			// Документ резерва - приходный ордрер без права продажи.
			Для каждого СтрокаТаблицы из ТаблицаКПолучению Цикл

				Если СтрокаТаблицы.БезПраваПродажи Тогда
					СтрокаТаблицы.ДокументРезерва = СтрокаТаблицы.ДокументПолучения;
				КонецЕсли;

			КонецЦикла;

			ЗагрузитьВТаблицуЗначений(ТаблицаКПолучению, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "СтатусПартии");
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			// Проверка осатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;
			
			Если Не Отказ Тогда
				Движения.ТоварыКПолучениюНаСклады.ВыполнитьРасход();
			КонецЕсли;

		КонецЕсли;
		
		//Плотников, товары на комиссии 19.06.2017 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		
		Если ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ПоставкаНаКомиссию Тогда
			
			НаборДвижений = Движения.ТоварыНаКомиссии;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвиженийТоварыНаКомиссии = НаборДвижений.Выгрузить();
			ТаблицаДвиженийТоварыНаКомиссии.Очистить();
			ТаблицаДвижений = ТаблицаДвиженийТоварыНаКомиссии.Скопировать();
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
			ТаблицаДвижений.ЗаполнитьЗначения(Контрагент, "Контрагент");
			ТаблицаДвижений.ЗаполнитьЗначения(Подразделение, "Подразделение");
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.ТоварыНаКомиссии.ВыполнитьПриход();
			КонецЕсли;
						
		КонецЕсли;

        //Плотников, товары на комиссии, конец <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
		
		// ТАРА ПО РЕГИСТРУ ПартииТоваровНаСкладах.

		НаборДвижений = Движения.ПартииТоваровНаСкладах;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = ТаблицаДвиженийПартииТоваровНаСкладах.Скопировать();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

		// Недостающие поля.
		ЗаполнитьПоляПартииТоваровНаСкладахУпр(ТаблицаПоТаре, ТаблицаДвижений, 
			Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, СтруктураШапкиДокумента);
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
		
		// Код операции
		ТаблицаДвижений.ЗаполнитьЗначения(КодОперацииПартииТоваров, "КодОперации");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ПартииТоваровНаСкладах.ВыполнитьПриход();
		КонецЕсли;

		// При поступлении по ордеру нужно сторнировать партию ордера
		Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда

			ТаблицаДвижений.Очистить();
			
			ТаблицаПартииПоОрдерам = ТаблицаПоТаре.Скопировать();
			ТаблицаПартииПоОрдерам.Колонки.Добавить("ДокументОприходования");
			
			//Удалим не нужные строки (которые без права продажи).
			КолвоЭлементов = ТаблицаПартииПоОрдерам.Количество();
			Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
				СтрокаТаблицы = ТаблицаПартииПоОрдерам[КолвоЭлементов - ОбратныйИндекс];
				Если СтрокаТаблицы.БезПраваПродажи Тогда
					ТаблицаПартииПоОрдерам.Удалить(СтрокаТаблицы);
				КонецЕсли;

			КонецЦикла;

			// Документ оприходования - приходный ордрер
			Для каждого СтрокаТаблицы из ТаблицаПартииПоОрдерам Цикл
				СтрокаТаблицы.ДокументОприходования = СтрокаТаблицы.ДокументПолучения;
			КонецЦикла;
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПартииПоОрдерам, ТаблицаДвижений);
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ПоОрдеру, "СтатусПартии");
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

			Для каждого Строка Из ТаблицаДвижений Цикл
				Строка.Количество = - Строка.Количество;
			КонецЦикла;

			ТаблицаДвижений.ЗаполнитьЗначения(0, "Стоимость");
			
			// Код операции - поступление по ордеру (сторно)
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПоступлениеПоОрдеру, "КодОперации");

			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ПартииТоваровНаСкладах.ВыполнитьПриход();
			КонецЕсли;

		КонецЕсли;

		// ТОВАРЫ ПО РЕГИСТРУ Закупки.
		
		НаборДвижений = Движения.Закупки;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвиженийЗакупки = НаборДвижений.Выгрузить();
		ТаблицаДвиженийЗакупки.Очистить();
		ТаблицаДвижений = ТаблицаДвиженийЗакупки.Скопировать();

		// Стоимость в регистре Закупки должна быть с НДС при любых настройках НеВключатьНДСВСтоимостьПартий.
		КопияТаблицыТоваров = ТаблицаПоТоварам.Скопировать();
		КопияТаблицыТоваров.ЗагрузитьКолонку(КопияТаблицыТоваров.ВыгрузитьКолонку("СуммаУпр"), "Стоимость");

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(КопияТаблицыТоваров, ТаблицаДвижений);

		// Недостающие поля.
		// { 20120320 Лапенков - добавляем заказ поставщику
		Если Не ЗначениеНеЗаполнено(Сделка) Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Сделка,      "ЗаказПоставщику");
		КонецЕсли;
		//
		
		ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,      "Подразделение");
		ТаблицаДвижений.ЗаполнитьЗначения(ОпределитьСтатусПартииПриходаУпр(СтруктураШапкиДокумента), "СтатусПартии");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,             "ДокументЗакупки");
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.Закупки.ВыполнитьДвижения();
		КонецЕсли;
		
		// УСЛУГИ ПО РЕГИСТРУ Закупки.
		
		НаборДвижений = Движения.Закупки;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвиженийЗакупки = НаборДвижений.Выгрузить();
		ТаблицаДвиженийЗакупки.Очистить();
		ТаблицаДвижений = ТаблицаДвиженийЗакупки.Скопировать();
		
		// Стоимость в регистре Закупки должна быть с НДС при любых настройках НеВключатьНДСВСтоимостьПартий.
		КопияТаблицыУслуг = ТаблицаПоУслугам.Скопировать();
		КопияТаблицыУслуг.ЗагрузитьКолонку(КопияТаблицыУслуг.ВыгрузитьКолонку("СуммаУпр"), "Стоимость");
		
		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(КопияТаблицыУслуг, ТаблицаДвижений);
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(ОпределитьСтатусПартииПриходаУпр(СтруктураШапкиДокумента), "СтатусПартии");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,                 "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,                             "ДокументЗакупки");
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.Закупки.ВыполнитьДвижения();
		КонецЕсли;
	КонецЕсли; // ОтражатьВУправленческомУчете

КонецПроцедуры // ТоварыИТараПоРегистрамОстатковИПартийУпр()

// По результатам запросов формирует движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ "Услуги",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ, Заголовок);
	
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ, Заголовок);
	
	Если не ДоговорКонтрагента.ВнутренниеВзаиморасчеты тогда
		
		ДвиженияПоРегиструВзаиморасчетыДляНДС(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);
		
		ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, 
		ТаблицаПоТаре, Отказ, Заголовок);
		
		ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, 
		ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок, СтруктураШапкиДокумента);
		
		ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, Отказ, Заголовок);
		
		ДвиженияРегистровГрузчикиИКладовщики(ЭтотОбъект);
		
		//15.02.18 Смирнов
		ДвиженияПоРегиструОплатаТруда(ЭтотОбъект);
		// По партиям, оприходованным по ордеру с парвом продажи, возможно следует выполнить 
		// корректировку списания
		Если ОтражатьВУправленческомУчете
			И ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
			
			Движения.ПартииТоваровНаСкладах.Записать();
			
			УчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата);
			
			Если УчетнаяПолитика.СписыватьПартииПриПроведенииДокументов Тогда
				
				ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
				
				Если Движения.СписанныеТовары.Количество()>0 Тогда
					ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
					ЗаписьРегистрации.Период      = Дата;
				КонецЕсли;
				
			Иначе
				
				// В неоперативном режиме границы последовательностей сдвигаются назад, если они позже документа.
				Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
					СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация, ОтражатьВУправленческомУчете, Ложь, Ложь)
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	конецЕсли;
КонецПроцедуры // ДвиженияПоРегистрам()


// По результату запроса по шапке документа формируем движения по регистрам для целей упр. учета.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ "Услуги",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
                                  ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ, Заголовок);
	Если Не ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	

		///( таблица для расчета курсовых разниц   А.А. 10.09.16
		ТаблицаКурсовыхРазниц = Новый ТаблицаЗначений;
	Если ВалютаДокумента <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.СуммаДокумента,
		|	ПоступлениеТоваровУслуг.КурсВзаиморасчетов,
		|	ПоступлениеТоваровУслуг.Сделка
		|ПОМЕСТИТЬ Поступление
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток,
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток,
		|	Поступление.Сделка КАК Сделка,
		|	ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток, 0) - Поступление.СуммаДокумента * Поступление.КурсВзаиморасчетов КАК КурсоваяРазница,
		|	Поступление.СуммаДокумента
		|ИЗ
		|	Поступление КАК Поступление
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
		|				&МоментВремени,
		|				Сделка = &Сделка
		|					И ДоговорКонтрагента = &Договор) КАК ВзаиморасчетыСКонтрагентамиОстатки
		|		ПО Поступление.Сделка = ВзаиморасчетыСКонтрагентамиОстатки.Сделка
		|ГДЕ
		|	Поступление.СуммаДокумента = ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток";
		
		Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("Сделка", ЭтотОбъект.Сделка);
		Запрос.УстановитьПараметр("Договор", ЭтотОбъект.ДоговорКонтрагента);
		ТаблицаКурсовыхРазниц = Запрос.Выполнить().Выгрузить();
	конецЕсли;	  //)

	
	
	// ПО РЕГИСТРУ ВзаиморасчетыСКонтрагентами.
	Если СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом 
	   И СуммаДокумента <> 0 Тогда
	
		НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		//29.08.14 Смирнов 
		//Если заполнена сделка используем ее
		//Иначе используем строки ТЧ предоплата + остаток по договору
		//Иначе сделка - само поступление
		СделкаШапка=ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам и (НЕ ЗначениеЗаполнено(Сделка)) тогда
			//1.Списываем все ППИ из ТЧ.
			Для каждого стр из ДокументыРасчетовСКонтрагентом Цикл
				СтрокаДвижений = ТаблицаДвижений.Добавить();
				СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
				СтрокаДвижений.Сделка                = стр.ДокументРасчетовСКонтрагентом;
				СтрокаДвижений.СуммаВзаиморасчетов   = ПересчитатьИзВалютыВВалюту(стр.СуммаВзаиморасчетов, ВалютаДокумента,
				СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
				СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
				СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

				СтрокаДвижений.СуммаУпр = ПересчитатьИзВалютыВВалюту(стр.СуммаВзаиморасчетов, ВалютаДокумента,
				СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
				СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
				СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			КонецЦикла;
			ОсталосьПогаситьВзаиморасчеты=СуммаДокумента-ДокументыРасчетовСКонтрагентом.Итог("СуммаВзаиморасчетов");
            //2.Если после п.1 что то осталось, то списываем остатки по договору
			Если ОсталосьПогаситьВзаиморасчеты>0 тогда
				ОстаткиПоДоговору=ПолучитьОстаткиПоДоговору(ДокументыРасчетовСКонтрагентом.Выгрузить());
				Для каждого стр из ОстаткиПоДоговору Цикл
					Гасим=?(ОсталосьПогаситьВзаиморасчеты>стр.СуммаВзаиморасчетов,стр.СуммаВзаиморасчетов,ОсталосьПогаситьВзаиморасчеты);
					СтрокаДвижений = ТаблицаДвижений.Добавить();
					СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
					СтрокаДвижений.Сделка                = стр.Сделка;
					СтрокаДвижений.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(Гасим, ВалютаДокумента,
					СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
					СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
					СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
					//СтрокаДвижений.СуммаВзаиморасчетов   = Гасим;
					СтрокаДвижений.СуммаУпр = ПересчитатьИзВалютыВВалюту(Гасим, ВалютаДокумента,
					СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
					СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
					СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
					//СтрокаДвижений.СуммаУпр   			 = Гасим*КурсВзаиморасчетов;
					
					ОсталосьПогаситьВзаиморасчеты=ОсталосьПогаситьВзаиморасчеты-Гасим;
				КонецЦикла;
			КонецЕсли;
			//3. если после п.п.1,2 есталась незакрытая сумма, то сделка=сам документ поступления
			Если ОсталосьПогаситьВзаиморасчеты>0 тогда
				СтрокаДвижений = ТаблицаДвижений.Добавить();
				СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
				СтрокаДвижений.Сделка                = СделкаШапка;
				СтрокаДвижений.СуммаВзаиморасчетов   = ПересчитатьИзВалютыВВалюту(ОсталосьПогаситьВзаиморасчеты, ВалютаДокумента,
				СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
				СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
				СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
				СтрокаДвижений.СуммаУпр   = ПересчитатьИзВалютыВВалюту(ОсталосьПогаситьВзаиморасчеты, ВалютаДокумента,
				СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
				СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
				СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			КонецЕсли;		
			
		Иначе	
			// Заполним таблицу движений.
			//для белорусов поделим на 2 договора
			//Если СтруктураШапкиДокумента.Контрагент = Справочники.Контрагенты.НайтиПоКоду("95728") тогда
			//комиссия = СуммаКомиссии;	
			//СтрокаДвижений = ТаблицаДвижений.Добавить();
			//СтрокаДвижений.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоКоду("Е7574");
			//СтрокаДвижений.Сделка                = СделкаШапка;
			//СтрокаДвижений.СуммаВзаиморасчетов   = ПересчитатьИзВалютыВВалюту(комиссия, ВалютаДокумента,
			//СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
			//СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
			//СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
			//СтрокаДвижений.СуммаУпр   = ПересчитатьИзВалютыВВалюту(комиссия, ВалютаДокумента,
			//СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			//СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			//СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			// иначе
			// Комиссия = 0;
			//конецЕсли;
		     //////
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
			СтрокаДвижений.Сделка                = СделкаШапка;
			СтрокаДвижений.СуммаВзаиморасчетов   = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
			СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
			СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
			СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
			СтрокаДвижений.СуммаУпр   = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
			СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			
		КонецЕсли;
		    //Добавим курсовые разницы
		   Для каждого стр из ТаблицаКурсовыхРазниц Цикл
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
			СтрокаДвижений.Сделка                = Сделка;
			СтрокаДвижений.СуммаВзаиморасчетов   = 0;
			СтрокаДвижений.СуммаУпр   = стр.курсоваяРазница;
		   конецЦикла;
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "", СтруктураШапкиДокумента, Отказ, Заголовок)
		КонецЕсли;
		
		
		
		

		Если Не Отказ Тогда
			Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
		КонецЕсли;

			
		// ПО РЕГИСТРУ РасчетыСКонтрагентами

		//Проводим, только если не заполнен Заказ поставщику
		Если ЗначениеНеЗаполнено(Сделка) ИЛИ
			 ТипЗнч(Сделка) <> Тип("ДокументСсылка.ЗаказПоставщику") Тогда

			Если ОтражатьВУправленческомУчете Тогда
				НаборДвижений = Движения.РасчетыСКонтрагентами;

				// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
				ТаблицаДвижений = НаборДвижений.Выгрузить();
				ТаблицаДвижений.Очистить();

				// Заполним таблицу движений.
				СтрокаДвижений = ТаблицаДвижений.Добавить();
				СтрокаДвижений.РасчетыВозврат        = Перечисления.РасчетыВозврат.Расчеты;
				СтрокаДвижений.ДоговорКонтрагента    = ДоговорКонтрагента;
				СтрокаДвижений.Сделка                = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,, Истина);
				СтрокаДвижений.СуммаВзаиморасчетов   = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
															СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
															СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
															СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

				СтрокаДвижений.СуммаУпр   = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
															СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
															СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
															СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

				НаборДвижений.мПериод            = Дата;
				НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

				Если Не Отказ Тогда
					Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
	
	//{--  Лапенков 20111201 нужна для учета отрицательных сумм по взаиморасчетам
	СуммаДокументаСЛюбымЗнаком=ПолучитьСуммуДокументаСНДС(ЭтотОбъект);
	Если СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом  
		И СуммаДокументаСЛюбымЗнаком<0 И ЭтотОбъект.Дата>=Дата('20111201') Тогда
		НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		// Заполним таблицу движений.
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
		СтрокаДвижений.Сделка                = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
		СтрокаДвижений.СуммаВзаиморасчетов   = ПересчитатьИзВалютыВВалюту(СуммаДокументаСЛюбымЗнаком, ВалютаДокумента,
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
														СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		СтрокаДвижений.СуммаУпр   = ПересчитатьИзВалютыВВалюту(СуммаДокументаСЛюбымЗнаком, ВалютаДокумента,
														СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
														СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
														СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	
		Если Не Отказ Тогда
			Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
		КонецЕсли;

	КонецЕсли;	
	Если не ДоговорКонтрагента.ВнутренниеВзаиморасчеты тогда
		
		// Лапенков 20111201 --}
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
		// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах.
		// ТАРА ПО РЕГИСТРУ ТоварыНаСкладах.
		// ТАРА ПО РЕГИСТРУ ПартииТоваровНаСкладах.
		
		ТоварыИТараПоРегистрамОстатковИПартийУпр(РежимПроведения, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ, Заголовок, СтруктураШапкиДокумента);
		
		// ТАРА ПО РЕГИСТРУ ТоварыПолученные.
		Если ОтражатьВУправленческомУчете Тогда
			
			НаборДвижений = Движения.ТоварыПолученные;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);
			
			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
			ТаблицаДвижений.ЗаполнитьЗначения(ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,,, Истина),"Сделка");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара,"СтатусПолучения");
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.ТоварыПолученные.ВыполнитьПриход();
			КонецЕсли;
			
			// Товары по регистру ТоварыПолученные
			Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				
				НаборДвижений = Движения.ТоварыПолученные;
				
				// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
				ТаблицаДвижений = НаборДвижений.Выгрузить();
				ТаблицаДвижений.Очистить();
				
				// Заполним таблицу движений.
				ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
				
				// Недостающие поля.
				ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию,"СтатусПолучения");
				ТаблицаДвижений.ЗаполнитьЗначения(ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента),"Сделка");
				
				НаборДвижений.мПериод            = Дата;
				НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
				
				Если Не Отказ Тогда
					Движения.ТоварыПолученные.ВыполнитьПриход();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Если в реквизите Сделка указан внешний заказ поставщику, то проводится 
		// по регистру ЗаказыПоставщикам
		Если НЕ ЗначениеНеЗаполнено(Сделка) 
			И (ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику")) 
			И Найти(Контрагент.Наименование,"Wheels Group") = 0 Тогда
			
			НаборДвижений = Движения.ЗаказыПоставщикам;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвиженийЗаказыПоставщикам = НаборДвижений.Выгрузить();
			ТаблицаДвиженийЗаказыПоставщикам.Очистить();
			ТаблицаДвижений = ТаблицаДвиженийЗаказыПоставщикам.Скопировать();
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
			
			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
			ТаблицаДвижений.ЗаполнитьЗначения(Сделка,"ЗаказПоставщику");
			Если Дата >= Дата("20170101000000") Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(Сделка.Подразделение,"Подразделение");
				ТаблицаДвижений.ЗаполнитьЗначения(Сделка.Подразделение.ВЭД,"ВЭД");
			КонецЕсли;
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.ЗаказыПоставщикам.ВыполнитьРасход();
			КонецЕсли;
			
			
			//===========================Тара================================================		
			ТаблицаДвижений.Очистить();
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);
			
			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
			ТаблицаДвижений.ЗаполнитьЗначения(Сделка,"ЗаказПоставщику");
			Если Дата >= Дата("20170101000000") Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
				ТаблицаДвижений.ЗаполнитьЗначения(Подразделение.ВЭД,"ВЭД");
			КонецЕсли;
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"СтатусПартии");
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.ЗаказыПоставщикам.ВыполнитьРасход();
			КонецЕсли;
			
			
			
			//====================================Услуги===================================================	
			ТаблицаДвижений.Очистить();
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаДвижений);
			
			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
			ТаблицаДвижений.ЗаполнитьЗначения(Сделка,"ЗаказПоставщику");
			Если Дата >= Дата("20170101000000") Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
				ТаблицаДвижений.ЗаполнитьЗначения(Подразделение.ВЭД,"ВЭД");
			КонецЕсли;
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.ЗаказыПоставщикам.ВыполнитьРасход();
			КонецЕсли;
			
			
			
			
			// {Лапенков Автозапчасти (проведение по заказам поставщику)
			//ИначеЕсли    (ЕстьЗаказыПоставщикуВТабличнойЧастиТовары(ЭтотОбъект.Ссылка)   
			//и ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ПродажаАвтозапчастей")) Тогда
			//НаборДвижений = Движения.ЗаказыПоставщикам;
			
			//// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			//ТаблицаДвиженийЗаказыПоставщикам = НаборДвижений.Выгрузить();
			//ТаблицаДвиженийЗаказыПоставщикам.Очистить();
			//ТаблицаДвижений = ТаблицаДвиженийЗаказыПоставщикам.Скопировать();
			
			//ТаблицаЗаказовПоставщику=ТаблицаПоТоварам.Скопировать();
			////ТаблицаЗаказовПоставщику.Колонки.Добавить("ДоговорКонтрагента");
			//Сч = 0;
			//Пока Сч < ТаблицаЗаказовПоставщику.Количество() Цикл
			//	СтрокаТаблицы = ТаблицаЗаказовПоставщику.Получить(Сч);
			//	Если  ЗначениеНеЗаполнено(СтрокаТаблицы.ЗаказПоставщику) Тогда
			//		 ТаблицаЗаказовПоставщику.Удалить(СтрокаТаблицы);
			//	 Иначе //исправим договор на тот, который есть в заказе поставщику
			////		 СтрокаТаблицы.ДоговорКонтрагента=СтрокаТаблицы.ЗаказПоставщику.ДоговорКонтрагента;
			//		Сч = Сч + 1;
			//	КонецЕсли; 
			//КонецЦикла;
			
			//// Заполним таблицу движений.
			//ЗагрузитьВТаблицуЗначений(ТаблицаЗаказовПоставщику, ТаблицаДвижений);
			
			//// Недостающие поля.
			//ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
			//ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");
			//ТаблицаДвижений.ЗаполнитьЗначения(0, "Цена");
			
			//НаборДвижений.мПериод            = Дата;
			//НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			//Если Не Отказ Тогда
			//	Движения.ЗаказыПоставщикам.ВыполнитьРасход();
			//КонецЕсли;
			// } Лапенков Автозапчасти
		КонецЕсли;
		
		// Снятие резерва по приходному ордеру
		Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
			
			// Сначала удалим из таблицы строки, по которым не надо списывать резерв.
			ТаблицаПоТоварамПоОрдерамБезПраваПродажи = ТаблицаПоТоварам.Скопировать();
			ТаблицаПоТоварамПоОрдерамБезПраваПродажи.Колонки.ДокументПолучения.Имя = "ДокументРезерва";
			Сч = 0;
			Пока Сч < ТаблицаПоТоварамПоОрдерамБезПраваПродажи.Количество() Цикл
				
				СтрокаТаблицы = ТаблицаПоТоварамПоОрдерамБезПраваПродажи.Получить(Сч);
				Если Не СтрокаТаблицы.БезПраваПродажи Тогда
					ТаблицаПоТоварамПоОрдерамБезПраваПродажи.Удалить(СтрокаТаблицы);
				Иначе
					Сч = Сч + 1;
				КонецЕсли;
				
			КонецЦикла;
			
			// Если осталась хоть одна строка., то делаем движения.
			Если ТаблицаПоТоварамПоОрдерамБезПраваПродажи.Количество() > 0 Тогда 
				
				НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
				
				// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
				ТаблицаДвиженийРезервы = НаборДвижений.Выгрузить();
				ТаблицаДвиженийРезервы.Очистить();
				ТаблицаДвижений = ТаблицаДвиженийРезервы.Скопировать();
				
				// Заполним таблицу движений.
				ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамПоОрдерамБезПраваПродажи, ТаблицаДвижений);
				
				НаборДвижений.мПериод            = Дата;
				НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
				
				Если Не Отказ Тогда
					Движения.ТоварыВРезервеНаСкладах.ВыполнитьРасход();
				КонецЕсли;
				
			КонецЕсли;
			
			ТаблицаДвижений.Очистить();
			
			// Сначала удалим из таблицы строки, по которым не надо списывать резерв.
			ТаблицаПоТареПоОрдерамБезПраваПродажи = ТаблицаПоТаре.Скопировать();
			ТаблицаПоТареПоОрдерамБезПраваПродажи.Колонки.ДокументПолучения.Имя = "ДокументРезерва";
			Сч = 0;
			Пока Сч < ТаблицаПоТареПоОрдерамБезПраваПродажи.Количество() Цикл
				
				СтрокаТаблицы = ТаблицаПоТареПоОрдерамБезПраваПродажи.Получить(Сч);
				Если Не СтрокаТаблицы.БезПраваПродажи Тогда
					ТаблицаПоТареПоОрдерамБезПраваПродажи.Удалить(СтрокаТаблицы);
				Иначе
					Сч = Сч + 1;
				КонецЕсли;
				
			КонецЦикла;
			
			// Если осталась хоть одна строка., то делаем движения.
			Если ТаблицаПоТареПоОрдерамБезПраваПродажи.Количество() > 0 Тогда 
				
				// Заполним таблицу движений.
				ЗагрузитьВТаблицуЗначений(ТаблицаПоТареПоОрдерамБезПраваПродажи, ТаблицаДвижений);
				
				НаборДвижений.мПериод            = Дата;
				НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
				
				Если Не Отказ Тогда
					Движения.ТоварыВРезервеНаСкладах.ВыполнитьРасход();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Движения по Адресам
		Если ТоварыАдресноеХранение.Количество() > 0 Тогда
			яштАдресноеХранение.ПроверитьЗаполнениеТабЧастиТоварыАдресноеХранение(ЭтотОбъект.Ссылка, Отказ); //+++ 02.10.2017 - по задаче № 33984 - проверяем правильность 
			Если Отказ Тогда 
				Возврат; //НЕЛЬЗЯ НИКОМУ - дальше нет смысла проверять!
			Иначе  
				яштАдресноеХранение.ДвиженияПоРегиструТоварыАдресноеХранение(Движения.ТоварыАдресноеХранение, ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
		
		// Резервирование по заказам покупателей
		//+++++++++++++++++++ с 09.10.2014   ВЫКЛЮЧАЕМ СОВСЕМ  ТоварыВРезервеНаСкладах  ++++++++++++++++++++++++++++++++++++
		
		// Сначала удалим из таблицы строки, по которым не надо ничего резервировать
		// (реквизит ЗаказПокупателя пуст)
		ТаблицаПоТоварамЗаказамПокупателей = ТаблицаПоТоварам.Скопировать();
		ТаблицаПоТоварамЗаказамПокупателей.Колонки.Добавить("ЗаказПоставщику");	
		Сч = 0;
		Пока Сч < ТаблицаПоТоварамЗаказамПокупателей.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоТоварамЗаказамПокупателей.Получить(Сч);
			Если ЗначениеНеЗаполнено(СтрокаТаблицы.ЗаказПокупателя)
				ИЛИ (ТипЗнч(СтрокаТаблицы.ЗаказПокупателя) = Тип("ДокументСсылка.ВнутреннийЗаказ") // Считается исполнением внутреннего заказа.
				И  СтрокаТаблицы.ЗаказПокупателя.Заказчик = Ссылка.СкладОрдер) Тогда             // Резерв в это случае делать не надо.
				ТаблицаПоТоварамЗаказамПокупателей.Удалить(СтрокаТаблицы);
			Иначе
				//+++( 05.11.2014 определяем заказ поставщику из строки заказа покупателя!
				Сч = Сч + 1;
				строки = СтрокаТаблицы.ЗаказПокупателя.Товары.НайтиСтроки(новый Структура("Номенклатура",СтрокаТаблицы.Номенклатура ));
				Если строки.Количество()>0 тогда
					стрЗакПок = строки[0];
					Если ТипЗнч(стрЗакПок.Размещение) = Тип("ДокументСсылка.ЗаказПоставщику") тогда
						СтрокаТаблицы.ЗаказПоставщику = стрЗакПок.Размещение;
					КонецЕсли;	
				Иначе //заказ есть, а товара этого в нем нет...
					ТаблицаПоТоварамЗаказамПокупателей.Удалить(СтрокаТаблицы);
				КонецЕсли;
				//+++)
			КонецЕсли;
		КонецЦикла;
		
		//Если ТаблицаПоТоварамЗаказамПокупателей.Количество() > 0 Тогда
		
		//	ТаблицаПоТоварамЗаказамПокупателей.Колонки.ЗаказПокупателя.Имя = "ДокументРезерва";
		
		//	НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
		
		//	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		//	ТаблицаДвиженийРезервы = НаборДвижений.Выгрузить();
		//	ТаблицаДвиженийРезервы.Очистить();
		//	ТаблицаДвижений = ТаблицаДвиженийРезервы.Скопировать();
		
		//	// Заполним таблицу движений.
		//	ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамЗаказамПокупателей, ТаблицаДвижений);
		
		//	НаборДвижений.мПериод            = Дата;
		//	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		//	Если Не Отказ Тогда
		//		Движения.ТоварыВРезервеНаСкладах.ВыполнитьПриход();
		//	КонецЕсли;
		//КонецЕсли;
		
		ТаблицаДвижений.Очистить();
		
		Если ТаблицаПоТоварамЗаказамПокупателей.Количество() > 0 Тогда
			
			// По регистру РазмещениеЗаказовПокупателей
			НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
			
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамЗаказамПокупателей, ТаблицаДвижений);
			
			//+++ Заказ поставщику может быть не этот...! 
			//+++05.11.2014 ТаблицаДвижений.ЗаполнитьЗначения(Сделка,"ЗаказПоставщику");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Товар, "ТоварТара");
			
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			НаборДвижений.мПериод            = Дата;
			
			// Проверка осатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;
			
			Движения.РазмещениеЗаказовПокупателей.ВыполнитьРасход();
			
		КонецЕсли;
		
		
		
		
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		//14.02.2017
		Если типЗнч(ЭтотОбъект.Сделка) = тип("ДокументСсылка.ЗаказПоставщику")
			и Найти( ЭтотОбъект.Сделка.Комментарий, "Заказ по ответственному хранению")=0  тогда   //если не поступление с ОТХ !
			//+++ 17.11.2016
			таблТов = Ссылка.Товары.Выгрузить(,"Номенклатура, Количество");	
			таблТов.Свернуть("Номенклатура","Количество"); // без дуб
			ОбменСУТИнтернетМагазин.ДвижениеТоваровВОжидании( таблТов , Подразделение );
		КонецЕсли;
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		
		
		
		
		
		
		// Теперь зарезервируем возвратную тару
		// Сначала удалим из таблицы строки, по которым не надо ничего резервировать
		// (реквизит ЗаказПокупателя пуст)
		ТаблицаПоТареЗаказамПокупателей = ТаблицаПоТаре.Скопировать();
		Сч = 0;
		Пока Сч < ТаблицаПоТареЗаказамПокупателей.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоТареЗаказамПокупателей.Получить(Сч);
			Если ЗначениеНеЗаполнено(СтрокаТаблицы.ЗаказПокупателя)
				ИЛИ (ТипЗнч(СтрокаТаблицы.ЗаказПокупателя) = Тип("ДокументСсылка.ВнутреннийЗаказ") // Считается исполнением внутреннего заказа.
				И  СтрокаТаблицы.ЗаказПокупателя.Заказчик = Ссылка.СкладОрдер) Тогда             // Резерв в это случае делать не надо.
				ТаблицаПоТареЗаказамПокупателей.Удалить(СтрокаТаблицы);
			Иначе
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если ТаблицаПоТареЗаказамПокупателей.Количество() > 0 Тогда
			
			ТаблицаПоТареЗаказамПокупателей.Колонки.ЗаказПокупателя.Имя = "ДокументРезерва";
			
			НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвиженийРезервы = НаборДвижений.Выгрузить();
			ТаблицаДвиженийРезервы.Очистить();
			ТаблицаДвижений = ТаблицаДвиженийРезервы.Скопировать();
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТареЗаказамПокупателей, ТаблицаДвижений);
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.ТоварыВРезервеНаСкладах.ВыполнитьПриход();
			КонецЕсли;
			
			ТаблицаДвижений.Очистить();
			
			Если НЕ ЗначениеНеЗаполнено(Сделка) И (ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику")) Тогда
				
				ТаблицаПоТареЗаказамПокупателей.Колонки.ДокументРезерва.Имя = "ЗаказПокупателя";
				
				// По регистру РазмещениеЗаказовПокупателей
				НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
				
				ТаблицаДвижений = НаборДвижений.Выгрузить();
				ТаблицаДвижений.Очистить();
				
				// Заполним таблицу движений.
				ЗагрузитьВТаблицуЗначений(ТаблицаПоТареЗаказамПокупателей, ТаблицаДвижений);
				
				ТаблицаДвижений.ЗаполнитьЗначения(Сделка,"ЗаказПоставщику");
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Тара, "ТоварТара");
				
				НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
				НаборДвижений.мПериод            = Дата;
				
				// Проверка осатков при оперативном проведении.
				Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
					НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
				КонецЕсли;
				
				Движения.РазмещениеЗаказовПокупателей.ВыполнитьРасход();
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Движения по услугам.
		Если ТаблицаПоУслугам.Количество() > 0 Тогда
			
			СтруктДопПараметры = Новый Структура;
			СтруктДопПараметры.Вставить("ЕстьНДС", Истина);
			ДвиженияПоПрочимЗатратамУпр(ЭтотОбъект, ТаблицаПоУслугам, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета, СтруктДопПараметры);
			
		КонецЕсли;
		
		// Если установлен флаг РегистрироватьЦеныПоставщика, нужно зарегистрировать цены
		Если РегистрироватьЦеныПоставщика И ОтражатьВУправленческомУчете Тогда
			
			НаборДвижений = Движения.ЦеныНоменклатурыКонтрагентов;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			ТаблицаПоТоварамЦены = ТаблицаПоТоварам.Скопировать();
			СпособЗаполненияЦен  = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
			
			// Пересчитаем цены, согласно флагу типа цен контрагентов (цена включает НДС)
			Если ТипЦен.ЦенаВключаетНДС Тогда
				Если НЕ СуммаВключаетНДС Тогда
					Для Каждого СтрокаТабличнойЧасти Из ТаблицаПоТоварамЦены Цикл
						СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена,
						СпособЗаполненияЦен, Ложь, Истина, Истина,
						ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
					КонецЦикла;
				КонецЕсли;
			Иначе
				Если СуммаВключаетНДС Тогда
					Для Каждого СтрокаТабличнойЧасти Из ТаблицаПоТоварамЦены Цикл
						СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена,
						СпособЗаполненияЦен, Истина, Ложь, Ложь,
						ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			// Удалим строки с одинаковым товаром и характеристикой.
			МассивСтрокДляУдаления = Новый Массив;
			СписокСвернутыхСтрок   = Новый СписокЗначений;
			
			Для Каждого СтрокаТаблицыПоТоварамЦены Из ТаблицаПоТоварамЦены Цикл
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Номенклатура", СтрокаТаблицыПоТоварамЦены.Номенклатура);
				СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаТаблицыПоТоварамЦены.ХарактеристикаНоменклатуры);
				СтрокиПоТовару = ТаблицаПоТоварамЦены.НайтиСтроки(СтруктураОтбора);
				Если СтрокиПоТовару.Количество() > 0 Тогда //Есть несколько строк по товару.
					ПерваяСтрока = СтрокиПоТовару[0];
					Цена = 0;
					Для каждого СтрокаПоТовару Из СтрокиПоТовару Цикл
						Если СписокСвернутыхСтрок.НайтиПоЗначению(СтрокаПоТовару) = Неопределено Тогда
							СписокСвернутыхСтрок.Добавить(СтрокаПоТовару);
						Иначе
							Продолжить;
						КонецЕсли;
						Цена = Цена + СтрокаПоТовару.Цена/СтрокаПоТовару.Коэффициент;
						Если СтрокаПоТовару <> ПерваяСтрока Тогда
							МассивСтрокДляУдаления.Добавить(СтрокаПоТовару);
						КонецЕсли;
					КонецЦикла;
					Если Цена > 0 Тогда
						ПерваяСтрока.Цена = Цена / СтрокиПоТовару.Количество() * ПерваяСтрока.Коэффициент;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СтрокаДляУдаления Из МассивСтрокДляУдаления Цикл
				ТаблицаПоТоварамЦены.Удалить(СтрокаДляУдаления);
			КонецЦикла;
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамЦены, ТаблицаДвижений);
			
			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(ТипЦен,"ТипЦен");
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВалютаДокумента,"Валюта");
			
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.ЦеныНоменклатурыКонтрагентов.ВыполнитьДвижения();
			КонецЕсли;
			
		КонецЕсли;
		
		// Погашение внутренних заказов в случае Заказчик = Склад поступления
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить( "СтатусПартии",          Перечисления.СтатусыПартийТоваров.Купленный);
		ДопПараметры.Вставить( "РежимПроведения",       РежимПроведения);
		ДопПараметры.Вставить( "ИмяРеквизитаЗаказ",     "ЗаказПокупателя");
		ДопПараметры.Вставить( "ЗаказВШапке",           Ложь);
		ДопПараметры.Вставить( "ИмяТабЧасти",           "Товары");
		
		ТабИсходная = ТаблицаПоТоварам.Скопировать();
		Сч = 0;
		Пока Сч < ТабИсходная.Количество() Цикл
			СтрокаТаблицы = ТабИсходная.Получить(Сч);
			Если ТипЗнч(СтрокаТаблицы.ЗаказПокупателя) = Тип("ДокументСсылка.ВнутреннийЗаказ") // Считается исполнением внутреннего заказа.
				И СтрокаТаблицы.ЗаказПокупателя.Заказчик = Ссылка.СкладОрдер Тогда
				Сч = Сч + 1;
			Иначе
				ТабИсходная.Удалить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
		
		Если ТабИсходная.Количество() > 0 Тогда
			ДвижениеПоВнутреннимЗаказам( ЭтотОбъект, ТабИсходная, ДопПараметры, Отказ, Заголовок);
		КонецЕсли;
		
		ТабИсходная.Очистить();
		ТабИсходная = ТаблицаПоТаре.Скопировать();
		Сч = 0;
		Пока Сч < ТабИсходная.Количество() Цикл
			СтрокаТаблицы = ТабИсходная.Получить(Сч);
			Если ТипЗнч(СтрокаТаблицы.ЗаказПокупателя) = Тип("ДокументСсылка.ВнутреннийЗаказ") // Считается исполнением внутреннего заказа.
				И СтрокаТаблицы.ЗаказПокупателя.Заказчик = Ссылка.СкладОрдер Тогда
				Сч = Сч + 1;
			Иначе
				ТабИсходная.Удалить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
		
		ДопПараметры.Вставить( "СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
		ДопПараметры.Вставить( "ИмяТабЧасти",  "ВозвратнаяТара");
		
		Если ТабИсходная.Количество() > 0 Тогда
			ДвижениеПоВнутреннимЗаказам( ЭтотОбъект, ТабИсходная, ДопПараметры, Отказ, Заголовок);
		КонецЕсли;
		
		// Контроль превышения остатков по заказам.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить( "ИмяТабЧасти", "Товары");
			ДопПараметры.Вставить( "Склад",       СкладОрдер);
			Отказ1 = Отказ; //+++ 10.10.2014 - ругается
			Движения.ТоварыВРезервеНаСкладах.КонтрольОстатковПоЗаказам(Ссылка, ДопПараметры, Отказ, Заголовок);
			Отказ = Отказ1; //+++ 10.10.2014 - но проводится!
		КонецЕсли;
	конецЕсли;
КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Формирует движения по регистру взаиморасчетов для НДС
//
// Параметры:
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегиструВзаиморасчетыДляНДС(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)

	// По регистрам взаиморасчетов для НДС проводятся документы, у которых
	// установлен флаг БУ и которые оформлены по договору с поставщиком.
	Если НЕ ОтражатьВБухгалтерскомУчете 
	 Или СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
		Возврат;
	КонецЕсли;

	// По регистру ВзаиморасчетыСПокупателямиДляНДС.
	НаборДвижений = Движения.ВзаиморасчетыСПоставщикамиДляНДС;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	СтрокаДвижений = ТаблицаДвижений.Добавить();

	СтрокаДвижений.Организация        = СтруктураШапкиДокумента.Организация;
	СтрокаДвижений.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
	СтрокаДвижений.Сделка             = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);;

	СтрокаДвижений.Сумма   = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
	                                                    мВалютаРегламентированногоУчета,
	                                                    КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
	                                                    1,
	                                                    КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
	                                                    1);

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ВзаиморасчетыСПоставщикамиДляНДС.ВыполнитьПриход();
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструВзаиморасчетыДляНДС()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрамРегл
// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки" и "НДСПродажи"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		// Поступление комиссионных товаров не отражается в подсистеме учета НДС
		Возврат;
	КонецЕсли;
	
	ТаблицыДокумента = Новый Структура();
	ТаблицыДокумента.Вставить("ТаблицаПоТоварам",ТаблицаПоТоварам);
	ТаблицыДокумента.Вставить("ТаблицаПоУслугам",ТаблицаПоУслугам);
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра НДСПокупки.
	ТаблицаДвиженийПокупки = Движения.НДСПокупки.Выгрузить();
	ТаблицаДвиженийПокупки.Очистить();
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра НДСПартииТоваров.
	ТаблицаДвиженийПартии = Движения.НДСПартииТоваров.Выгрузить();
	ТаблицаДвиженийПартии.Очистить();
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра НДСКосвенныеРасходы.
	ТаблицаДвиженийКосвенных = Движения.НДСКосвенныеРасходы.Выгрузить();
	ТаблицаДвиженийКосвенных.Очистить();
	
	// Дополнительно реализуем механизм учета НДС в качестве налогового агента
	ТаблицаДвиженийПродажи = Движения.НДСПродажи.Выгрузить();
	ТаблицаДвиженийПродажи.Очистить();
				
	Для Каждого ТаблицаДокумента Из ТаблицыДокумента Цикл

		ИдТабЧасти = ТаблицаДокумента.Ключ;
		ТабЧасть   = ТаблицаДокумента.Значение;

		Если ТабЧасть.Количество()> 0 Тогда 

			СформироватьДвиженияПоРегиструНДСПокупки(СтруктураШапкиДокумента, ТабЧасть, ИдТабЧасти, ТаблицаДвиженийПокупки);

			Если ИдТабЧасти = "ТаблицаПоТоварам" Тогда
				СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, ТабЧасть, ИдТабЧасти, ТаблицаДвиженийПартии);
			КонецЕсли;	
				
			Если ИдТабЧасти = "ТаблицаПоУслугам" Тогда
				СформироватьДвиженияПоступленияПоРегиструНДСКосвенныхРасходов(СтруктураШапкиДокумента, ТабЧасть, ИдТабЧасти, ТаблицаДвиженийКосвенных);
			КонецЕсли;	
			
			Если СтруктураШапкиДокумента.УчетАгентскогоНДС Тогда
				СформироватьДвиженияПоРегиструНДСПродажи(СтруктураШапкиДокумента, ТабЧасть, ИдТабЧасти, ТаблицаДвиженийПродажи);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;
	
	Если ТаблицаДвиженийПокупки.Количество() > 0 Тогда
		Движения.НДСПокупки.мПериод          = Дата;
		Движения.НДСПокупки.мТаблицаДвижений = ТаблицаДвиженийПокупки;
		Движения.НДСПокупки.ДобавитьДвижение();
		Движения.НДСПокупки.Записать();
	КонецЕсли;
	
	Если ТаблицаДвиженийПартии.Количество() > 0 Тогда
		Движения.НДСПартииТоваров.мПериод            = Дата;
		Движения.НДСПартииТоваров.мТаблицаДвижений   = ТаблицаДвиженийПартии;
		Движения.НДСПартииТоваров.ВыполнитьПриход();
		Движения.НДСПартииТоваров.Записать();
	КонецЕсли;
	
	Если ТаблицаДвиженийКосвенных.Количество() > 0 Тогда
		Движения.НДСКосвенныеРасходы.мПериод          = Дата;
		Движения.НДСКосвенныеРасходы.мТаблицаДвижений = ТаблицаДвиженийКосвенных;
		Движения.НДСКосвенныеРасходы.ДобавитьДвижение();
		Движения.НДСКосвенныеРасходы.Записать();
	КонецЕсли;
	
	Если ТаблицаДвиженийПродажи.Количество() > 0 Тогда
		Движения.НДСПродажи.мПериод          = Дата;
		Движения.НДСПродажи.мТаблицаДвижений = ТаблицаДвиженийПродажи;
		Движения.НДСПродажи.ДобавитьДвижение();
		Движения.НДСПродажи.Записать();
	КонецЕсли;
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, 
							  ТаблицаПоТаре, Отказ, Заголовок)
							  
	// По партиям, оприходованным по ордеру с парвом продажи, возможно следует выполнить корректировку списания
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		
		// ПО РЕГИСТРУ СписанныеТовары: формируем запись с указанием приходного ордера, которая будет обрабатываться при списании
		НаборДвижений = Движения.СписанныеТовары;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.ПоступлениеПриходныйОрдер = СкладОрдер;

		// Недостающие поля.
		Инд = 0;
		Для каждого Строка Из ТаблицаДвижений Цикл
			Инд = Инд+1;
			Строка.НомерСтрокиДокумента = Инд;
		КонецЦикла;

		ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.СписанныеТовары.ВыполнитьДвижения();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке)

	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "ВалютаУправленческогоУчета"        , "ВалютаУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");

КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураПолей)


КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиУслугиУпр(СтруктураПолей)

	СтруктураПолей.Вставить("НоменклатурнаяГруппа",           "НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Цена",                           "Цена");

КонецПроцедуры

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок)

	мУчетнаяПолитика   = ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ);
	ТабУчетнаяПолитика = ПолучитьУчетнуюПолитику(Дата);
	
	мПорядокСписанияПартий = Новый Структура("Упр,Бух,Нал");
	
	Если ОтражатьВУправленческомУчете Тогда
		ПодготовитьПараметрыУчетнойПолитикиУпр(ТабУчетнаяПолитика, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура определяет параметры упр. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиУпр(ТабУчетнаяПолитика, Отказ, Заголовок)

	// Получим метод списания партий FIFO / LIFO / По средней
	СтрокаУчетнойПолитики = ТабУчетнаяПолитика[0];
	мПорядокСписанияПартий.Вставить("Упр", СтрокаУчетнойПолитики.СпособОценкиМПЗУпр);

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиУпр()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
		СкладОрдер     = Основание.Склад;

		Если Не Основание.ОтражатьВУправленческомУчете Тогда
			ОрганизацияКонтрагента = ПолучитьОрганизациюПоКонтрагенту(Основание.Контрагент);

			Если НЕ ЗначениеНеЗаполнено(ОрганизацияКонтрагента) Тогда
				// Документ не отражается в управленческом учете (внутреняя передача товара),
				// поменяем организацию и контрагента местами.
				Организация = ОрганизацияКонтрагента;
				Контрагент  = ПолучитьКонтрагентаПоОрганизации(Основание.Организация);
				ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);

				СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
				КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
				КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;

				// Заполним номер и дату вхоящего документа.
				НомерВходящегоДокумента = Основание.Номер;
				ДатаВходящегоДокумента  = Основание.Дата;
			КонецЕсли;
		КонецЕсли;

		Если Основание.Проведен Тогда

			// Заполним табличные части.
			ЗаполнитьТоварыПоОснованиюРеализация(Основание);
			ЗаполнитьВозвратнуюТаруПоОснованиюРеализация(Основание);
		КонецЕсли;
    Возврат;
	КонецЕсли;

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда

		ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
		СкладОрдер     = Основание.Склад;
	    Возврат;

	КонецЕсли;
	
	//+++ 12.01.2018
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВыплатаБонусовКонтрагентам") Тогда
		
		Если не (Основание.Проведен 
			    и (Основание.состояние = Перечисления.СостоянияОбъектов.Утвержден
				  //+++ 22.01.2018 уже есть проведенный документ Поступление товаров и услуг
				  или Основание.состояние = Перечисления.СостоянияОбъектов.Выполнен) ) тогда 
			#Если Клиент тогда
			Сообщить("Нельзя делать выплату! Документ "+строка(Основание)+" - НЕ УТВЕРЖДЕН!", СтатусСообщения.Внимание);
			сигнал();
			#КонецЕсли
		Возврат;
		КонецЕсли;	
	
		//+++ 21.01.2018 --- если уже есть не удаленный документ ! ----------
		док1 = НайтиВыплатуБонуса(Основание); 
		Если док1<>неопределено тогда
			#Если Клиент тогда
			сигнал();
			//Сообщить("Уже есть документ: "+строка(док1)+" по "+строка(Основание), СтатусСообщения.Внимание);
			Предупреждение("Уже есть документ: "+строка(док1), 10);
			докОб = док1.ПолучитьОбъект();
			докОб.ПолучитьФорму("ФормаДокумента").Открыть();
			#КонецЕсли
			Возврат;
		КонецЕсли;	

	Организация = справочники.Организации.НайтиПоКоду("00001");
	Подразделение = справочники.Подразделения.НайтиПоКоду("00005");
	ВидПоступления = перечисления.ВидыПоступленияТоваров.НаСклад;
	ОтражатьВУправленческомУчете = Истина;
	ВалютаДокумента = справочники.Валюты.НайтиПоКоду("643");
	КратностьВзаиморасчетов = 1;
	КурсВзаиморасчетов = 1;
    	
	УчитыватьНДС = (Основание.Бонус=1); //+++ 20.08.2018  для ОТК - да, для Бонусов - НЕТ !
	НДСВключенВСтоимость = Истина;
	СуммаВключаетНДС = истина;
	
	Ответственный = ПараметрыСеанса.ТекущийПользователь;
		
	Комментарий = Основание.Комментарий+" ВЫПЛАТА "+?(Основание.Бонус=1,"ОТК","Бонуса ("+строка(Основание.ТипБонуса)+")" )+" за период с "
	+формат(Основание.НачалоПериода,"ДЛФ=D")+" по "+формат(Основание.КонецПериода,"ДЛФ=D") +" - способ оплаты путём '"+Основание.СпособОплаты+"' Покупателя";
	
	ЗаданиеНаОтгрузку = Основание; 	// для структуры подчиненности! 
	СуммаДокумента = Основание.Бонусы.Итог("СуммаБонуса");
	
	Контрагент  = Основание.Контрагент;
	ДоговорКонтрагента = ?(ДоговорКонтрагента.Пустая(), найтиДоговорБонусов(Контрагент, Основание.СпособОплаты), ДоговорКонтрагента);
	
	Если Найти(Основание.СпособОплаты, "представителю")=0 тогда // БезНал
		Если ГрафикОплаты.Количество()=0 тогда
			стр1 = ГрафикОплаты.Добавить(); //-------сразу в График платежей!----------
			стр1.Дата = ТекущаяДата();
			стр1.ПроцентОплаты = 100;
			стр1.СуммаОплаты = СуммаДокумента;
		КонецЕсли;
	КонецЕсли;	
	
	
	БонусИлиОТК   = справочники.Номенклатура.НайтиПоКоду("ЛН00825");
	
	статьяОТК   = справочники.СтатьиЗатрат.НайтиПоКоду("О0181");
	статьяБонус = справочники.СтатьиЗатрат.НайтиПоКоду("О0215");
	
	    флОТК = (Основание.Бонус=1);
		табл1 = Основание.Бонусы.выгрузить();
		табл1.Свернуть("НоменклатурнаяГруппа", "СуммаБонуса");
		
		СтавкаНДС_2019 = СтавкаНДСнаДату( ЭтотОбъект.Дата ); //+++ 09.01.2019
		чНДС = ПолучитьСтавкуНДС( СтавкаНДС_2019 );
		
		Для каждого стр1 из табл1 цикл
			стрУсл = Услуги.Добавить();	
			
			стрУсл.Количество = 1;
			стрУсл.Цена  = стр1.СуммаБонуса;
			стрУсл.НоменклатурнаяГруппа = стр1.НоменклатурнаяГруппа;
			
			стрУсл.Номенклатура = БонусИлиОТК; 
		    стрУсл.Содержание   = ?(флОТК, "ОТК", "БОНУС") 
			+" за период с "+формат(Основание.НачалоПериода,"ДЛФ=D")+" по "+формат(Основание.КонецПериода,"ДЛФ=D") 
			; 
			стрУсл.СтатьяЗатрат = ?(флОТК, статьяОТК, статьяБонус);
			стрУсл.Подразделение = Подразделение;
			
			стрУсл.Сумма =стрУсл.Количество * стрУсл.Цена;
			стрУсл.СтавкаНДС = ?(УчитыватьНДС, СтавкаНДС_2019, перечисления.СтавкиНДС.БезНДС); //+++ 09.01.2019
			стрУсл.СуммаНДС  = ?(УчитыватьНДС, Окр(стрУсл.Сумма * чНДС/(100+чНДС), 2), 0);
		КонецЦикла;	
	
	Возврат;
    КонецЕсли;
	ЗаполнитьДокументПоОснованиюУпр(Основание);
	

КонецПроцедуры // ОбработкаЗаполнения()

//+++ 01.02.2018 ---------------Договор
функция найтиДоговорБонусов(Контр, способ="")
	дог = справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Если Найти(способ,"представителю")=0 тогда
		отбор1 = "НЕ";
	КонецЕсли;
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                |	ДоговорыКонтрагентов.Ссылка
	                |ИЗ
	                |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	                |ГДЕ
	                |	ДоговорыКонтрагентов.Владелец = &Владелец
	                |	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
	                |	И ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
					|	И (ДоговорыКонтрагентов.Наименование ПОДОБНО ""%бонус%"")
	                |	И "+отбор1+" (ДоговорыКонтрагентов.Наименование ПОДОБНО ""%*%"")
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	ДоговорыКонтрагентов.Дата УБЫВ
	                |";
	 Запрос.УстановитьПараметр("Владелец", Контр);
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Если Выборка.Следующий() тогда
		 дог = выборка.Ссылка;
	 КонецЕсли;
	 
	возврат дог;
КонецФункции	


//+++ 21.01.2018 --- находим предыдущую выплату ---
функция НайтиВыплатуБонуса(ВыплатаБонусов)
	док1 = неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ первые 1
	|	ПоступлениеТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.ЗаданиеНаОтгрузку = &ВыплатаБонусов
	|	И ПоступлениеТоваровУслуг.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("ВыплатаБонусов", ВыплатаБонусов);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() тогда
	док1 = выборка.ссылка;
	КонецЕсли;
     возврат док1;
КонецФункции	

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	//+++( 09.02.2018 --- по задаче № 40550 - блокировка изменения документа операторами склада (после 1 часа!)	
	Если НЕ ЭтоНовый() //повторное открытие...
		и РольДоступна("Кладовщик") и ОтражатьВБухгалтерскомУчете //уже выгружен в БП
		//в течении 2х часов - ещё можно что-то менять[v]БУ документе...(для задания на отгрузку/перемещение)
		и (ТекущаяДата() - ссылка.Дата)>2*3600 
	Тогда  
		Отказ = Истина;
		
		#Если Клиент тогда
		Сообщить("Документ "+строка(ссылка)+" - уже ЗАКРЫТ от измений! Позвоните в бухгалтерию для его изменения...", СтатусСообщения.Важное);
		#КонецЕсли
	КонецЕсли;
    //+++)
	
	Если ЭтоНовый() и ВалютаДокумента <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		ТекущийКурс = РегистрыСведений.КурсыВалютДляПоступления.СрезПоследних(Дата,Новый структура("Валюта",ВалютаДокумента));
		Если  ТекущийКурс.Количество()>0 Тогда
			КурсВзаиморасчетов  = ТекущийКурс[0].Курс;
			кратностьВзаиморасчетов = ТекущийКурс[0].Кратность;	
		конецЕсли;
		Если Организация <> Справочники.Организации.НайтиПоКоду("00001") и ВалютаДокумента<>Константы.ВалютаРегламентированногоУчета.Получить() тогда
			КурсВзаиморасчетов  = 58;
			кратностьВзаиморасчетов = 1;
		конецЕсли;	
			
	конецЕсли;
	//никогда не будем регистрировать цены поставщика
	РегистрироватьЦеныПоставщика = Ложь;
		// Проверка на существование подчиненных доп. расходов

	МодифицированДок = ЭтотОбъект.Модифицированность() или ?(МодифицированДок=неопределено,Ложь,МодифицированДок);

		
	яштДокументОбъектПередЗаписью(ЭтотОбъект, Отказ);
	
	ОчиститьНенужныеТабличныеЧасти();

	// Проверка заполнения единицы измерения мест и количества мест
	ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = ПолучитьСуммуДокументаСНДС(ЭтотОбъект);

	СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");

	// Заполнить склад и ордер в табличных частях
	УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
	СкладИзШапки    =  (УказаниеСкладов <> Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
	                 И (УказаниеСкладов <> Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления);

	ЗаполнитьСкладИОрдерВСтрокахТабЧасти(ЭтотОбъект, Товары,         СкладИзШапки);
	ЗаполнитьСкладИОрдерВСтрокахТабЧасти(ЭтотОбъект, ВозвратнаяТара, СкладИзШапки);
	
	//Если НЕ ПараметрыСеанса.ИдетОбменРаспределеннойБазы Тогда
		
			// проверка соответствия веса	- отключил, уже есть в форме документа
		//ВесИтого=ПолучитьОбщийВесНетто(Товары);
		//Если ВесИтого<>ОбщийВес Тогда
		//	ЗаполнитьВесНетто(Товары);
		//ОбщийВес=ВесИтого;
		//КонецЕсли;

		
	//	ПроверкаВозможностиИзмененияДокумента(ЭтотОбъект, Отказ);
	//	
	//КонецЕсли; 
	

	//БАЛАНС (04.12.2007)                       
	//
//{{MRG[ <-> ]
	//Если мПроведениеИзФормы Тогда
//}}MRG[ <-> ]
//{{MRG[ <-> ]

	//Адиянов<<<
	Если НЕ Отказ И мПроведениеИзФормы Тогда
		ПроверкаЗаполненияСтатьиЗатратУпр(ЭтотОбъект,Отказ);
	КонецЕсли; 		
	//Адиянов>>>
	
	//+++ Шарафутдинов
	Если НЕ Отказ И ЭтоНовый() тогда
		УстановитьНомерДокумента(ЭтотОбъект);
	КонецЕсли;
	//---Шарафутдинов



Если мПроведениеИзФормы тогда
	ЗарегистрироватьОбъект(ЭтотОбъект,Отказ,мПроведениеИзФормы);
КонецЕсли;
//}}MRG[ <-> ]
	//	ЗарегистрироватьОбъект(ЭтотОбъект,Отказ);
	//КонецЕсли;  
	
	//Плотников +++ 25.07.2016 // Все поступления проводятся началом дня
	Если НЕ Отказ Тогда
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный ТОгда
			РежимПроведения = РежимПроведенияДокумента.Неоперативный;
 		КонецЕсли;
		Дата = НачалоДня(Дата) + 600; //++ 27.09.2017 (Огородников) - нужно ВСЕГДА сдвигать на начало дня!
	КонецЕсли;
	 //07.03.18 Смирнов
	//Литые от китайцев, если последний тест в течении месяца не успешный или его вообще нет, то добавляем в черный список
	Если не отказ и (ЭтоНовый() или проведен = ложь) и ДоговорКонтрагента.ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоКоду("840") и (Подразделение = Справочники.Подразделения.НайтиПоКоду("00005") или Подразделение = Справочники.Подразделения.ПустаяСсылка()) тогда
		Литые = Справочники.НоменклатурныеГруппы.НайтиПоКоду("00026");
		СписНом = Товары.Выгрузить(,"Номенклатура");
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	тзНоменклатура.Номенклатура
		               |ПОМЕСТИТЬ втНом
		               |ИЗ
		               |	&тзНоменклатура КАК тзНоменклатура
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	А.Номенклатура
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		ПровереннаяНагрузкаДисков.Номенклатура КАК Номенклатура,
		               |		МАКСИМУМ(ПровереннаяНагрузкаДисков.Дата) КАК Дата
		               |	ИЗ
		               |		втНом КАК втНом
		               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПровереннаяНагрузкаДисков КАК ПровереннаяНагрузкаДисков
		               |			ПО втНом.Номенклатура = ПровереннаяНагрузкаДисков.Номенклатура
		               |	ГДЕ
		               |		втНом.Номенклатура.НоменклатурнаяГруппа = &НоменклатурнаяГруппаЛитые
		               |		И ПровереннаяНагрузкаДисков.Дата > &ДатаМесяц
		               |	
		               |	СГРУППИРОВАТЬ ПО
		               |		ПровереннаяНагрузкаДисков.Номенклатура) КАК А
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПровереннаяНагрузкаДисков КАК ПровереннаяНагрузкаДисков
		               |		ПО А.Номенклатура = ПровереннаяНагрузкаДисков.Номенклатура
		               |			И А.Дата = ПровереннаяНагрузкаДисков.Дата
		               |ГДЕ
		               |	ПровереннаяНагрузкаДисков.ТестПройден";
					   Запрос.УстановитьПараметр("тзНоменклатура",СписНом);
					   Запрос.УстановитьПараметр("ДатаМесяц",НачалоДня(ДобавитьМесяц(ТекущаяДата(),-1)));
					   Запрос.УстановитьПараметр("НоменклатурнаяГруппаЛитые",Литые);
					   
					   ПрошедшиеПроверку = Запрос.Выполнить().Выгрузить();
					   
		для каждого товар из Товары цикл
			Если товар.Номенклатура.НоменклатурнаяГруппа = Литые и ПрошедшиеПроверку.Найти(товар.Номенклатура,"Номенклатура") = неопределено тогда
				МенеджерЗаписи = РегистрыСведений.НоменклатураИмпорт.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Активность = истина;
				МенеджерЗаписи.Номенклатура = Товар.Номенклатура;
				МенеджерЗаписи.ЧерныйЛист = Истина;
				МенеджерЗаписи.Записать();
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 

КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
    	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	//для WG проверим соответствие цен заказу
	Если организация<> Справочники.Организации.НайтиПоКоду("00001") и ЗначениеЗаполнено(сделка) тогда
		Для каждого стр из товары цикл
			строка = сделка.Товары.Найти(стр.Номенклатура,"Номенклатура");	
			если стр.Цена <> строка.Цена тогда
				Сообщить("Для номенклатуры "+стр.Номенклатура+" задана цена, отличная от заказа поставщику.");
				отказ=истина;
			конецесли;
		конецЦикла;	
	конецЕсли;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	// Для определения где нужно проверять склад: в шапке или в ТЧ.
	УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
	СкладВТабличнойЧасти =    (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
		                  Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления);
	СтруктураШапкиДокумента.Вставить("СкладВТабличнойЧасти", СкладВТабличнойЧасти);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = СформироватьДеревоПолейЗапросаПоШапке();
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов"                   , "ВедениеВзаиморасчетов");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов"                    , "ВалютаВзаиморасчетов");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"                             , "ДоговорОрганизация");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора"                             , "ВидДоговора");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "РасчетыВУсловныхЕдиницах"                , "РасчетыВУсловныхЕдиницах");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "УчетАгентскогоНДС"                       , "УчетАгентскогоНДС");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидАгентскогоДоговора"                   , "ВидАгентскогоДоговора");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"              , "ВидОперации"                             , "СделкаВидОперации");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "СписыватьПартииПриПроведенииДокументов"  , "СписыватьПартииПриПроведенииДокументов");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиПартионныйУчетПоСкладам"            , "ВестиПартионныйУчетПоСкладам");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "НеВключатьНДСВСтоимостьПартий"           , "НеВключатьНДСВСтоимостьПартий");

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер"      , "ВидСклада"                               , "ВидСклада");
	Иначе
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер"      , "Склад"                                   , "СкладПриходногоОрдера");
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер"      , "Склад.ВидСклада"                         , "ВидСклада");
	КонецЕсли;
	
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер"      , "БезПраваПродажи"                   , "БезПраваПродажи");

	// Если сделка - Заказ поставщику, то надо цену для проведения пересчитать в валюту заказа.
	Если Не ЗначениеНеЗаполнено(Сделка) 
	   И ДоговорКонтрагента.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам 
	   И ТипЗнч(Сделка) <> Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "ВалютаДокумента"                       , "ВалютаЗаказа");
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "КурсВзаиморасчетов"                    , "КурсВзаиморасчетовЗаказа");
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "КратностьВзаиморасчетов"               , "КратностьВзаиморасчетовЗаказа");
	КонецЕсли;
	
	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке);

	// Здесь контролировать сумму задолженности, предоплату и число дней задолженности не надо
	СтруктураШапкиДокумента.Вставить("КонтролироватьСуммуЗадолженности", Ложь);
	СтруктураШапкиДокумента.Вставить("ПроцентПредоплаты", 0);
	СтруктураШапкиДокумента.Вставить("КонтролироватьЧислоДнейЗадолженности", Ложь);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Если надо пересчитывать цену в валюту заказа. то в структуре должна быть заполнена валюта заказа.
	ВалютаЗаказа = Неопределено;
	НужнаЦенаЗаказа = Ложь;
	Если СтруктураШапкиДокумента.Свойство("ВалютаЗаказа", ВалютаЗаказа) Тогда
		НужнаЦенаЗаказа = Истина;
		Если ВалютаЗаказа = мВалютаРегламентированногоУчета Тогда
			КурсЗаказа      = 1;
			КратностьЗаказа = 1;
		Иначе //ВалютаЗаказа = ВалютаВзаиморасчетов
			КурсЗаказа      = СтруктураШапкиДокумента.КурсВзаиморасчетовЗаказа;
			КратностьЗаказа = СтруктураШапкиДокумента.КратностьВзаиморасчетовЗаказа;
		КонецЕсли;
		СтруктураШапкиДокумента.Вставить("КурсЗаказа"     , КурсЗаказа);
		СтруктураШапкиДокумента.Вставить("КратностьЗаказа", КратностьЗаказа);
	КонецЕсли;

	СтруктураШапкиДокумента.Вставить("НужнаЦенаЗаказа", НужнаЦенаЗаказа);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = СформироватьСтруктуруПолейТовары();

	СтруктураПолей.Вставить("Услуга"                               , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                                , "Номенклатура.Набор");
	СтруктураПолей.Вставить("ЗаказПокупателя"                      , "ЗаказПокупателя");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя"                , "ЗаказПокупателя.Склад");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
	                        "ЗаказПокупателя.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"                     , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Проект"                               , "Проект");
	СтруктураПолей.Вставить("Склад"                                , "Склад");
	СтруктураПолей.Вставить("ДокументПолучения"                    , "ПриходныйОрдер");
	СтруктураПолей.Вставить("ОрганизацияДокументаПолучения"        , "ПриходныйОрдер.Организация");
	СтруктураПолей.Вставить("БезПраваПродажи"                      , "ПриходныйОрдер.БезПраваПродажи");
	СтруктураПолей.Вставить("Цена"                                 , "Цена");
	СтруктураПолей.Вставить("Коэффициент"                          , "Коэффициент");
	СтруктураПолей.Вставить("ВидСкладаРазмещения"                  , "Склад.ВидСклада");
	//// { Лапенков Автозапчасти (выполняется только для автозапчастей)
	//Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ПродажаАвтозапчастей") Тогда
	// СтруктураПолей.Вставить("ЗаказПоставщику"                  , "ЗаказПоставщику");
	//КонецЕсли;
	//// } Лапенков Автозапчасти
	
	РезультатЗапросаПоТоварам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = СформироватьСтруктуруПолейТара();
	СтруктураПолей.Вставить("ЗаказПокупателя"           , "ЗаказПокупателя");
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	СтруктураПолей.Вставить("Склад"                     , "Склад");
	СтруктураПолей.Вставить("ДокументПолучения"         , "ПриходныйОрдер");
	СтруктураПолей.Вставить("БезПраваПродажи"           , "ПриходныйОрдер.БезПраваПродажи");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя"     , "ЗаказПокупателя.Склад");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
	                        "ЗаказПокупателя.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Вставить("ВидСкладаРазмещения"       , "Склад.ВидСклада");

	// Дополним полями, нужными для упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураПолей);

	РезультатЗапросаПоТаре = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Услуги".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"                      , "Номенклатура");
	СтруктураПолей.Вставить("Количество"                        , "Количество");
	СтруктураПолей.Вставить("Сумма"                             , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                         , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                               , "СуммаНДС");
	СтруктураПолей.Вставить("Содержание"                        , "Содержание");
	СтруктураПолей.Вставить("Услуга"                            , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                             , "Номенклатура.Набор");
	СтруктураПолей.Вставить("СтатьяЗатрат"                      , "СтатьяЗатрат");
	СтруктураПолей.Вставить("ХарактерЗатрат"                    , "СтатьяЗатрат.ХарактерЗатрат");
	СтруктураПолей.Вставить("ОтнесениеРасходовКДеятельностиЕНВД", "СтатьяЗатрат.ОтнесениеРасходовКДеятельностиЕНВД");
	СтруктураПолей.Вставить("Проект"                            , "Проект");
	СтруктураПолей.Вставить("Подразделение"                     , "Подразделение");
	СтруктураПолей.Вставить("Заказ"                             , "Заказ");
	//Адиянов<<< Начало СтатьяЗатратУпр
	СтруктураПолей.Вставить("СтатьяЗатратУпр"                   , "СтатьяЗатратУпр");
	//Адиянов>>> Конец СтатьяЗатратУпр
	
	
	// Дополним полями, нужными для упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиУслугиУпр(СтруктураПолей);

	РезультатЗапросаПоУслугам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);

	// Подготовим таблицы товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	ТаблицаПоТаре    = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);
	ТаблицаПоУслугам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ 
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	яштАдресноеХранение.ПроверитьЗаполнениеТабЧастиТоварыАдресноеХранение(ЭтотОбъект.Ссылка,Отказ);
	ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);

	ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок);
	
	ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость, мВалютаРегламентированногоУчета);
	ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам, СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость, мВалютаРегламентированногоУчета);
	
	Если НЕ ПараметрыСеанса.ИдетОбменРаспределеннойБазы Тогда
		
	     // отключение проверки
		//	{Чарчан - проверка на соответствие номенклатрных позиций позициям в заказе покупателя
		// 	В данный момент включена 
		// { Лапенков 20080908 -меняем алгоритм, учитываем по регистру, а не по документам
		//Если //Константы.ИспользованиеРезерва.Получить()
		//	 Дата>=Константы.ДатаНачалаУчета.Получить() и ( не ЗначениеНеЗаполнено(Сделка))
		//	и ТипЗнч(Сделка)=Тип("ДокументСсылка.ЗаказПоставщику") 
		//	 и (Не ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь,"РазрешитьДобавлениеНовыхПозицийВРеализацию")) Тогда 
		//	КонтрольПревышенияЗаказаПоНоменклатуре(Отказ);
		//КонецЕсли;
		// } Лапенков 20080908 
		
		//***2017.09.24
		Отказ = СверкаЦенНаДискиСЗаказомПоставщику();		
		
		ПроверитьСрокиОплат(Отказ);
		
		Если Не Отказ Тогда
			
			Для Каждого ТекСтрокаГрафикОплаты Из ГрафикОплаты Цикл
				
				Движение = Движения.ГрафикиОплатДокументов.Добавить();
				Движение.Документ = Ссылка;
				Движение.Дата = ТекСтрокаГрафикОплаты.Дата;
				Движение.ПроцентОплаты = ТекСтрокаГрафикОплаты.ПроцентОплаты;
				
			КонецЦикла;
			
			Движения.ГрафикиОплатДокументов.Записать();
			
		КонецЕсли; 
	
	КонецЕсли; 
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
		                    ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ, Заголовок);	
							
		таблБонусы = яштПоставщики.ПолучитьБонусыПоставщиков( Ссылка ); //06.12.2018
		для каждого стр1 из таблБонусы цикл
			Движение1 = Движения.БонусыПоставщиков.Добавить();
			ЗаполнитьЗначенияСвойств(Движение1, стр1);
			Движение1.Период = Дата;
			Движение1.Регистратор = Ссылка;
		КонецЦикла;
		
		//+++( 14.02.2019 -- только на дату прихода! невозможно отследить реализацию---
		Если ЭтотОбъект.Контрагент.Покупатель тогда 
			ДатаСреза = ЭтотОбъект.Дата;         //обратная продажа - минусует прибыль...
			яштРезервыПоТоварам.ЗаполнитьДвиженияРН_ПрибыльОтПовышенияЦен(Движения, ЭтотОбъект, ДатаСреза, -1 ); 
		КонецЕсли;
		//+++)

	КонецЕсли;//не отказ

КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	// Удаление записей регистрации из всех последовательностей
	Для Каждого НаборЗаписейРегистрацииВПоследовательности Из ПринадлежностьПоследовательностям Цикл
		НаборЗаписейРегистрацииВПоследовательности.Очистить();
	КонецЦикла;
	
	//+++ 21.01.2018 галка Выполнен и Статус
	Если ЗаданиеНаОтгрузку<>неопределено тогда
		Если ТипЗнч(ЗаданиеНаОтгрузку) = Тип("ДокументСсылка.ВыплатаБонусовКонтрагентам") Тогда
			Если ЗначениеЗаполнено(ЗаданиеНаОтгрузку) //только по заполненому документу!
				и ЗаданиеНаОтгрузку.Выполнен <> этотОбъект.Проведен тогда // только при изменении
			задОб = ЗаданиеНаОтгрузку.ПолучитьОбъект();
			задОб.Выполнен  = этотОбъект.Проведен;
			Если Проведен и Найти(задОб.Комментарий,"Поступление товаров и услуг")=0 тогда
				задОб.Комментарий = задОб.Комментарий +" #создан документ: Поступление товаров и услуг "+строка(Номер)+" от "+формат(Дата,"ДЛФ=D");
			КонецЕсли;
			//только после реальной оплаты... отследить сложно,
			//поэтому делаем сразу, как будто выплачено сразу после проведения
			задОб.Состояние = ?(этотОбъект.Проведен, перечисления.СостоянияОбъектов.Выполнен, перечисления.СостоянияОбъектов.Утвержден);
			задОб.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	//17.03.18 Смирнов
	Если Контрагент = Справочники.Контрагенты.НайтиПоКоду("94072") и ЗначениеЗаполнено(Сделка)	тогда //поступление должно быть равно заказу
		тПоступление = Товары.Выгрузить(,"Номенклатура,Количество,Сумма");
		тЗаказ = Сделка.Товары.Выгрузить(,"Номенклатура,Количество,Сумма");
		Запрос = новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		             |	табПоступление.Номенклатура,
		             |	табПоступление.Количество,
		             |	табПоступление.Сумма
		             |ПОМЕСТИТЬ втПоступление
		             |ИЗ
		             |	&табПоступление КАК табПоступление
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	табЗаказ.Номенклатура,
		             |	табЗаказ.Количество,
		             |	табЗаказ.Сумма
		             |ПОМЕСТИТЬ втЗаказ
		             |ИЗ
		             |	&табЗаказ КАК табЗаказ
		             |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	А.Номенклатура,
		             |	СУММА(А.Количество) КАК Количество,
		             |	СУММА(А.Сумма) КАК Сумма
		             |ИЗ
		             |	(ВЫБРАТЬ
		             |		втПоступление.Номенклатура КАК Номенклатура,
		             |		-втПоступление.Количество КАК Количество,
		             |		-втПоступление.Сумма КАК Сумма
		             |	ИЗ
		             |		втПоступление КАК втПоступление
		             |	
		             |	ОБЪЕДИНИТЬ ВСЕ
		             |	
		             |	ВЫБРАТЬ
		             |		втЗаказ.Номенклатура,
		             |		втЗаказ.Количество,
		             |		втЗаказ.Сумма
		             |	ИЗ
		             |		втЗаказ КАК втЗаказ) КАК А
		             |
		             |СГРУППИРОВАТЬ ПО
		             |	А.Номенклатура
		             |
		             |ИМЕЮЩИЕ
		             |	(СУММА(А.Количество) <> 0
		             |		ИЛИ СУММА(А.Сумма) <> 0)";
					 Запрос.УстановитьПараметр("табПоступление",тПоступление);
					 Запрос.УстановитьПараметр("табЗаказ",тЗаказ);
					 Рез = Запрос.Выполнить().Выбрать();
					 Если Рез.Количество()>0 тогда
						 АдресПолучателя="200200140@yst.ru";
						 УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоКоду("00011");//1c@yst.ru
						 СписокФайловВложений=Новый СписокЗначений;
						 ТекстСообщения = "Расхождения между заказом поставщику и поступлением!!!" + Символы.ПС + Сделка;
						 Тема = "Расхождения между заказом поставщику и поступлением.";  
						 Попытка
							 яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресПолучателя,СписокФайловВложений, УЗ, ТекстСообщения, Тема);
						 Исключение
							 Сообщить(ОписаниеОшибки());
						 КонецПопытки;
					 КонецЕсли;
					 КонецЕсли;
КонецПроцедуры

Процедура УстановитьФлагиНДСПоОрганизации() Экспорт

	Если Не ЗначениеНеЗаполнено(Организация) Тогда
		Если УчетнаяПолитикаНалоговыйУчет("ОрганизацияЯвляетсяПлательщикомЕНВД", Организация, Дата) Тогда
			Если СуммаВключаетНДС <> Ложь Тогда
				СуммаВключаетНДС = Ложь;
			КонецЕсли; 
			Если УчитыватьНДС <> Ложь Тогда
				УчитыватьНДС = Ложь;
			КонецЕсли; 
			Если НДСВключенВСтоимость <> Истина Тогда
				НДСВключенВСтоимость = Истина;
			КонецЕсли; 
		Иначе	
			Если СуммаВключаетНДС <> Истина Тогда
				СуммаВключаетНДС = Истина;
			КонецЕсли; 
			Если УчитыватьНДС <> Истина Тогда
				УчитыватьНДС = Истина;
			КонецЕсли; 
			Если НДСВключенВСтоимость <> Ложь Тогда
				НДСВключенВСтоимость = Ложь;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры




Процедура ПроверитьСрокиОплат(Отказ)

	Если ГрафикОплаты.Количество() > 0 Тогда
	
		Если ГрафикОплаты.Итог("ПроцентОплаты") <> 100 Тогда
		
			Отказ = Истина;
			#Если Клиент тогда
				Сообщить("График оплат не равен 100%", СтатусСообщения.Важное);
			#КонецЕсли	
		
		КонецЕсли; 
	
	КонецЕсли; 	

КонецПроцедуры

Процедура СравнитьНоменклатуру(Отказ)
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПЗ.Номенклатура,
	               |	СУММА(ПЗ.Количество) КАК Количество
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Заказ.Номенклатура КАК Номенклатура,
	               |		ЕСТЬNULL(Заказ.Количество, 0) - ЕСТЬNULL(Поступления.КолВоРеал, 0) + ЕСТЬNULL(Корректировка.КоличествоСкорректированное, 0) КАК Количество
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			ЗаказПоставщикуТовары.Ссылка КАК Ссылка,
	               |			ЗаказПоставщикуТовары.Номенклатура КАК Номенклатура,
	               |			СУММА(ЗаказПоставщикуТовары.Количество) КАК Количество
	               |		ИЗ
	               |			Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	               |		ГДЕ
	               |			ЗаказПоставщикуТовары.Ссылка = &ссылка
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ЗаказПоставщикуТовары.Ссылка,
	               |			ЗаказПоставщикуТовары.Номенклатура) КАК Заказ
	               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |				Поступление.Номенклатура КАК Номенклатура,
	               |				СУММА(Поступление.Количество) КАК КолВоРеал
	               |			ИЗ
	               |				Документ.ПоступлениеТоваровУслуг.Товары КАК Поступление
	               |			ГДЕ
	               |				Поступление.Ссылка.Сделка = &Ссылка
	               |				И Поступление.Ссылка <> &Поступление
	               |				И Поступление.Ссылка.Проведен = ИСТИНА
	               |			
	               |			СГРУППИРОВАТЬ ПО
	               |				Поступление.Номенклатура) КАК Поступления
	               |			ПО Заказ.Номенклатура = Поступления.Номенклатура
	               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |				Корректировка.Номенклатура КАК Номенклатура,
	               |				СУММА(Корректировка.Количество) КАК КоличествоСкорректированное
	               |			ИЗ
	               |				Документ.КорректировкаЗаказаПоставщику.Товары КАК Корректировка
	               |			ГДЕ
	               |				Корректировка.Ссылка.ЗаказПоставщику = &Ссылка
	               |				И Корректировка.Ссылка.Проведен = ИСТИНА
	               |			
	               |			СГРУППИРОВАТЬ ПО
	               |				Корректировка.Номенклатура) КАК Корректировка
	               |			ПО Заказ.Номенклатура = Корректировка.Номенклатура
	               |	ГДЕ
	               |		Заказ.Ссылка = &Ссылка
	               |		И Заказ.Ссылка.Проведен = ИСТИНА) КАК ПЗ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПЗ.Номенклатура";
	
	Запрос.УстановитьПараметр("Ссылка",Сделка);
	Запрос.УстановитьПараметр("Поступление",Ссылка);
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	ТаблицаДляСравнения = Товары.Выгрузить();
	ТаблицаДляСравнения.Свернуть("Номенклатура","Количество");
	
	Для Каждого Строка из ТаблицаДляСравнения Цикл
		СтрокаСрав = ТаблицаДокументов.Найти(Строка.Номенклатура,"Номенклатура");
		Если (СтрокаСрав = Неопределено) Тогда 
			#Если Клиент тогда
			Сообщить("Номенклатура " + СокрЛП(Строка.Номенклатура.Наименование) + " не может быть получена по данному заказу",СтатусСообщения.Важное);
			#КонецЕсли
			Отказ = Истина;
		ИначеЕсли (СтрокаСрав.Количество=NULL и Строка.Количество>0) Тогда 
			#Если Клиент тогда
			Сообщить("Требуется еще " + СокрЛП(Строка(Строка.Количество)) + " ед. номенклатуры " + СокрЛП(Строка.Номенклатура.Наименование) + " по заказу " + Сделка,СтатусСообщения.Важное);
			#КонецЕсли
			Отказ = Истина;			
		ИначеЕсли (СтрокаСрав.Количество<Строка.Количество) Тогда 
			#Если Клиент тогда
			Сообщить("Требуется еще " + СокрЛП(Строка(Строка.Количество - СтрокаСрав.Количество))+ " ед. номенклатуры " + СокрЛП(Строка.Номенклатура.Наименование) + " по заказу " + Сделка,СтатусСообщения.Важное);
			#КонецЕсли
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура КонтрольПревышенияЗаказаПоНоменклатуре (Отказ)
Запрос = Новый Запрос;
Запрос.Текст="ВЫБРАТЬ ПоступлениеТоваровИУслугТовары.Номенклатура Номенклатура,
|ПоступлениеТоваровИУслугТовары.ТребуетсяОтгрузить,
|ЕстьNULL(РегЗаказы.КоличествоОстаток,0)  ОсталосьОтгрузить,
|ПоступлениеТоваровИУслугТовары.ТребуетсяОтгрузить-ЕстьNULL(РегЗаказы.КоличествоОстаток,0) Превышение
|ИЗ
|( 	ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура,СУММА(Количество) ТребуетсяОтгрузить ИЗ
|Документ.ПоступлениеТоваровУслуг.Товары
|ГДЕ Ссылка=&Ссылка
|СГРУППИРОВАТЬ ПО Номенклатура
|)ПоступлениеТоваровИУслугТовары
|ЛЕВОЕ СОЕДИНЕНИЕ	 
|РегистрНакопления.ЗаказыПоставщикам.Остатки(&МоментВремени,ЗаказПоставщику = &Заказ)  РегЗаказы
|
|ПО ПоступлениеТоваровИУслугТовары.Номенклатура=РегЗаказы.Номенклатура
|ГДЕ ПоступлениеТоваровИУслугТовары.ТребуетсяОтгрузить-ЕстьNULL(РегЗаказы.КоличествоОстаток,0)>0";

 Запрос.УстановитьПараметр("Заказ",Сделка);
 Запрос.УстановитьПараметр("Ссылка",Ссылка);
 // остатки по запросу проверяем на момент времени документа
 Запрос.УстановитьПараметр("МоментВремени", Новый Граница( Ссылка.МоментВремени(),ВидГраницы.Исключая));

 Выборка =Запрос.Выполнить().Выбрать();
 
 Пока Выборка.Следующий() Цикл
	#Если Клиент тогда 
	 Сообщить("Требуется еще " + СокрЛП(Строка(Выборка.Превышение)) + " ед. номенклатуры '" + СокрЛП(Выборка.Номенклатура.Наименование) + "' по заказу " + Строка(Сделка),СтатусСообщения.Важное); 
	#КонецЕсли
	Отказ=Истина;
 КонецЦикла;	 
 
 
КонецПроцедуры	

//29.08.14 Смирнов
Функция ПолучитьОстаткиПоДоговору(ДокументыИзДока)
	Запрос=новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	А.Сделка,
	             |	А.СуммаВзаиморасчетовОстаток
	             |ПОМЕСТИТЬ втОстаткиРег
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Сделка,
	             |		ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток
	             |	ИЗ
	             |		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&МоментВремени, ДоговорКонтрагента = &Договор) КАК ВзаиморасчетыСКонтрагентамиОстатки) КАК А
	             |ГДЕ
	             |	А.СуммаВзаиморасчетовОстаток > 0
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ДокиИзТЧ.ДокументРасчетовСКонтрагентом,
	             |	ДокиИзТЧ.СуммаВзаиморасчетов
	             |ПОМЕСТИТЬ втПлатежкиИзДока
	             |ИЗ
	             |	&ДокиИзТЧ КАК ДокиИзТЧ
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	втПлатежкиИзДока.ДокументРасчетовСКонтрагентом,
	             |	СУММА(втПлатежкиИзДока.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов
	             |ПОМЕСТИТЬ ПлатежкиИзДока2
	             |ИЗ
	             |	втПлатежкиИзДока КАК втПлатежкиИзДока
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	втПлатежкиИзДока.ДокументРасчетовСКонтрагентом
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	А.Сделка,
	             |	А.СуммаВзаиморасчетов
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		втОстаткиРег.Сделка КАК Сделка,
	             |		втОстаткиРег.СуммаВзаиморасчетовОстаток - ЕСТЬNULL(ПлатежкиИзДока2.СуммаВзаиморасчетов, 0) КАК СуммаВзаиморасчетов
	             |	ИЗ
	             |		втОстаткиРег КАК втОстаткиРег
	             |			ЛЕВОЕ СОЕДИНЕНИЕ ПлатежкиИзДока2 КАК ПлатежкиИзДока2
	             |			ПО втОстаткиРег.Сделка = ПлатежкиИзДока2.ДокументРасчетовСКонтрагентом) КАК А
	             |ГДЕ
	             |	А.СуммаВзаиморасчетов > 0
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	А.Сделка.Дата
	             |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДокиИзТЧ", ДокументыИзДока);			 
	Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
	Если ЭтоНовый() Тогда
		Запрос.УстановитьПараметр("МоментВремени", КонецДня(Дата));
	Иначе
		Запрос.УстановитьПараметр("МоментВремени", Новый Граница( МоментВремени(),ВидГраницы.Исключая));
	КонецЕсли;
	Рез=Запрос.Выполнить().Выгрузить();
	Возврат Рез;
КонецФункции

//17.11.2016
процедура ОбработкаУдаленияПроведения() 
	
	//+++ 17.11.2016
	таблТов = Ссылка.Товары.Выгрузить(,"Номенклатура, Количество");	
	таблТов.Свернуть("Номенклатура","Количество"); // без дуб
	
	для каждого стр1 из таблТов цикл // -------------Обратное действие!
		стр1.Количество = - стр1.Количество;
	КонецЦикла;	
	
	ОбменСУТИнтернетМагазин.ДвижениеТоваровВОжидании( таблТов , Подразделение );

КонецПроцедуры	

Функция СверкаЦенНаДискиСЗаказомПоставщику()
	
	ЕстьРазницаВЦенах = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЗаказПоставщикуСезонный.Контрагент
	               |ИЗ
	               |	Документ.ЗаказПоставщикуСезонный КАК ЗаказПоставщикуСезонный";
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если НЕ Результат.Найти(Контрагент) = Неопределено Тогда  //по контрагенту есть сезонныее заказы, значит, это китайский поставщик
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЗаказПоставщику", Сделка);
		Запрос.УстановитьПараметр("ПоступлениеТоваров", Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		               |	СУММА(ЗаказыПоставщику.Цена - Поступление.Цена) КАК РазницаВЦене,
		               |	Поступление.Номенклатура
		               |ИЗ
		               |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |		ЗаказПоставщикуТовары.Номенклатура КАК Номенклатура,
		               |		ЗаказПоставщикуТовары.Цена КАК Цена
		               |	ИЗ
		               |		Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		               |	ГДЕ
		               |		ЗаказПоставщикуТовары.Ссылка = &ЗаказПоставщику) КАК ЗаказыПоставщику
		               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |			ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
		               |			ПоступлениеТоваровУслугТовары.Цена КАК Цена
		               |		ИЗ
		               |			Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		               |		ГДЕ
		               |			ПоступлениеТоваровУслугТовары.Ссылка = &поступлениеТоваров) КАК Поступление
		               |		ПО ЗаказыПоставщику.Номенклатура = Поступление.Номенклатура
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	Поступление.Номенклатура
		               |
		               |ИМЕЮЩИЕ
		               |	СУММА(ЗаказыПоставщику.Цена - Поступление.Цена) <> 0";
		// Антон Аверкин: Если мы имеем дело с контрагентом "LLC Custom-Service", 
		//Цена из поступления товаров и услуг должна сопоставляться с Ценой Беларусь из Заказа поставщику.						   
		стрЦенаБеларусь = "";
		// 05.02.2019 - ВЫКЛЮЧЕНО - нужна цена!
		//Если Контрагент = Справочники.Контрагенты.НайтиПоКоду("95728") тогда  // LLC Custom-Service
		//	Запрос.Текст = стрЗаменить(Запрос.Текст, "ЗаказПоставщикуТовары.Цена", "ЗаказПоставщикуТовары.ЦенаБ");
		//	стрЦенаБеларусь = "(Беларусь)";
		//КонецЕсли;	
		//+++)
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			Если //Результат.РазницаВЦене <> 0 И   // уже в запросе есть отбор
				Результат.Номенклатура.ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
				Сообщить("Для товара с кодом: " + Результат.Номенклатура.Код + " - цена в Поступлении отличается от Цены"+стрЦенаБеларусь+" в Заказе поставщику на "+формат(Результат.РазницаВЦене,"ЧДЦ=2"), СтатусСообщения.Внимание);
				ЕстьРазницаВЦенах = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЕстьРазницаВЦенах;
	
КонецФункции

Процедура ПриКопировании(ОбъектКопирования)
	
	ЭтотОбъект.ЗаданиеНаОтгрузку = Документы.ЗаданиеНаОтгрузку.ПустаяСсылка(); //При копировании всегда очищаем основание "Задание на отгрузку"	
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

//БАЛАНС (04.12.2007)                       
//
мПроведениеИзФормы = Ложь; 

