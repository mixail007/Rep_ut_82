Перем мВалютаРегламентированногоУчета Экспорт;

Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь, , "Продажа");
		УстановитьНомерДокумента(ЭтотОбъект);

		УстановитьВремя(РежимАвтоВремя.Последним);

		НачалоПериода = НачалоМесяца(Дата); 
		КонецПериода  = КонецМесяца(Дата);

	КонецЕсли;

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ЗначениеНеЗаполнено(Организация) Тогда
		Предупреждение("Не указана организация. Операция не записана.");
		Отказ = Истина;
		ТекущийЭлемент = ЭлементыФормы.Организация;
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура ВыбПериодНажатие(Элемент)

	НастройкаПериода = Новый НастройкаПериода;

	НастройкаПериода.УстановитьПериод(НачалоПериода, ?(КонецПериода='0001-01-01', КонецПериода, КонецДня(КонецПериода)));

	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод   = Истина;
	НастройкаПериода.ВариантНастройки         = ВариантНастройкиПериода.Период;

	НастройкаПериода.Редактировать();

	НачалоПериода = НастройкаПериода.ПолучитьДатуНачала();
	КонецПериода  = НастройкаПериода.ПолучитьДатуОкончания();

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура выполняет автоматическое заполнение табличной части документа
// при нажатии на кнопку "Заполнить"
//
Процедура КоманднаяПанельЗаполнить(Кнопка)

	Состав.Очистить();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("Ноль", 0);
	
	Запрос.Текст = "ВЫБРАТЬ
					|	ВзаиморасчетыСПокупателямиДляНДСОстаткиИОбороты.Период,
					|	ВзаиморасчетыСПокупателямиДляНДСОстаткиИОбороты.Организация,
					|	ВзаиморасчетыСПокупателямиДляНДСОстаткиИОбороты.ДоговорКонтрагента.Владелец КАК Контрагент,
					|	ВзаиморасчетыСПокупателямиДляНДСОстаткиИОбороты.ДоговорКонтрагента,
					|	ВзаиморасчетыСПокупателямиДляНДСОстаткиИОбороты.Регистратор,
					|	СУММА(ВзаиморасчетыСПокупателямиДляНДСОстаткиИОбороты.СуммаНачальныйОстаток) КАК СуммаНачальныйОстаток,
					|	СУММА(ВзаиморасчетыСПокупателямиДляНДСОстаткиИОбороты.СуммаКонечныйОстаток) КАК СуммаКонечныйОстаток,
					|	СУММА(ВзаиморасчетыСПокупателямиДляНДСОстаткиИОбороты.СуммаПриход) КАК СуммаПриход
					|ИЗ
					|	РегистрНакопления.ВзаиморасчетыСПокупателямиДляНДС.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Регистратор, , Организация = &Организация) КАК ВзаиморасчетыСПокупателямиДляНДСОстаткиИОбороты

					|ГДЕ
					|	ВзаиморасчетыСПокупателямиДляНДСОстаткиИОбороты.СуммаНачальныйОстаток < &Ноль И
					|	ВзаиморасчетыСПокупателямиДляНДСОстаткиИОбороты.СуммаПриход <> &Ноль

					|СГРУППИРОВАТЬ ПО
					|	ВзаиморасчетыСПокупателямиДляНДСОстаткиИОбороты.Период,
					|	ВзаиморасчетыСПокупателямиДляНДСОстаткиИОбороты.Организация,
					|	ВзаиморасчетыСПокупателямиДляНДСОстаткиИОбороты.ДоговорКонтрагента.Владелец,
					|	ВзаиморасчетыСПокупателямиДляНДСОстаткиИОбороты.ДоговорКонтрагента,
					|	ВзаиморасчетыСПокупателямиДляНДСОстаткиИОбороты.Регистратор";

	ТаблицаЗачетовАвансов = Запрос.Выполнить().Выгрузить();

	ТаблицаЗачетовАвансов.Колонки.Добавить("ЗачтеноАванса");
	
	Для Каждого СтрокаОтгрузки Из ТаблицаЗачетовАвансов Цикл
		СтрокаОтгрузки.ЗачтеноАванса = ?(СтрокаОтгрузки.СуммаКонечныйОстаток >= 0, -СтрокаОтгрузки.СуммаНачальныйОстаток, СтрокаОтгрузки.СуммаПриход);
	КонецЦикла;
	
	Если Не ПредъявленНДСКВычету0 Тогда
		// Далее собираем факты зачета авансов сделанных нашим комиссионерам
		// (информацию мы получаем из анализа документов "ОтчетКомиссионераОПродажах")

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация",   Организация);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
		Запрос.УстановитьПараметр("КонецПериода",  КонецДня(КонецПериода));
		Запрос.УстановитьПараметр("ВидОтчетаПоПлатежамЗачетАванса", Перечисления.ВидыОтчетовПоПлатежамКомиссия.ЗачетАванса);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Дата,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Контрагент,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.СуммаВключаетНДС,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ВалютаДокумента,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.КратностьВзаиморасчетов,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.КурсВзаиморасчетов,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.СтавкаНДС,
		|	СУММА(ОтчетКомиссионераОПродажахДенежныеСредства.Сумма) КАК Сумма,
		|	СУММА(ОтчетКомиссионераОПродажахДенежныеСредства.СуммаНДС) КАК СуммаНДС
		|ИЗ
		|	Документ.ОтчетКомиссионераОПродажах.ДенежныеСредства КАК ОтчетКомиссионераОПродажахДенежныеСредства

		|ГДЕ
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода И
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Организация = &Организация И
		|	ОтчетКомиссионераОПродажахДенежныеСредства.ВидОтчетаПоПлатежам = &ВидОтчетаПоПлатежамЗачетАванса

		|СГРУППИРОВАТЬ ПО
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.СтавкаНДС";
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();

		Пока Выборка.Следующий() Цикл

			НовСтр = ТаблицаЗачетовАвансов.Добавить();

			НовСтр.Контрагент = Выборка.Контрагент;
			НовСтр.ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
			Если Выборка.СуммаВключаетНДС Тогда
				СуммаОборотДт = Выборка.Сумма;
			Иначе
				СуммаОборотДт = Выборка.Сумма + Выборка.СуммаНДС;
			КонецЕсли;

			// При необходимости производим пересчет в валюту регл учета
			Если Выборка.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
				НовСтр.ЗачтеноАванса = СуммаОборотДт;

			Иначе
				// нужно пересчитывать
				Данные = ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, Выборка.Дата);
				НовСтр.ЗачтеноАванса = ПересчитатьИзВалютыВВалюту(СуммаОборотДт, Выборка.ВалютаДокумента,
																	 мВалютаРегламентированногоУчета, 
																	 Выборка.КурсВзаиморасчетов,
																	 Данные.Курс, 
																	 Выборка.КратностьВзаиморасчетов,
																	 Данные.Кратность);
			КонецЕсли;

		КонецЦикла;

	КонецЕсли; // Если Не ПредъявленНДСКВычету0 Тогда

	// Отражаем факты зачета авансов в соответсвующих движениях
	Для Каждого СтрЗачетаАванса Из ТаблицаЗачетовАвансов Цикл

		МассивСобытий0 = Новый Массив();
		МассивСобытий0.Добавить(Перечисления.СобытияПоНДСПокупки.ПолученСчетФактура);
		МассивСобытий0.Добавить(Перечисления.СобытияПоНДСПокупки.ПодтвержденаСтавка0);
		МассивСобытий0.Добавить(Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0);

		МассивСобытий = Новый Массив();
		МассивСобытий.Добавить(Перечисления.СобытияПоНДСПокупки.ПолученСчетФактура);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация",    Организация);
		Запрос.УстановитьПараметр("МассивСобытий", 	МассивСобытий);
		Запрос.УстановитьПараметр("ВидЦенности0",   Перечисления.ВидыЦенностей.АвансыПолученные0);
		Запрос.УстановитьПараметр("МассивСобытий0", МассивСобытий0);
		Запрос.УстановитьПараметр("Контрагент",     СтрЗачетаАванса.Контрагент);
		Запрос.УстановитьПараметр("Договор",        СтрЗачетаАванса.ДоговорКонтрагента);
		Запрос.УстановитьПараметр("КонецПериода",   КонецДня(КонецПериода));
		Запрос.УстановитьПараметр("СобытиеПредполагается0", Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	НДСПокупкиОбороты.СчетФактура,
		|	НДСПокупкиОбороты.СтавкаНДС КАК СтавкаНДС,
		|	СУММА(НДСПокупкиОбороты.СуммаБезНДСОборот) КАК СуммаБезНДС,
		|	СУММА(НДСПокупкиОбороты.НДСОборот) КАК НДС,
		|	НДСПокупкиОбороты.Поставщик
		|ИЗ
		|	РегистрНакопления.НДСПокупки.Обороты(, &КонецПериода, Период, Организация = &Организация И Поставщик = &Контрагент" + ?(ПредъявленНДСКВычету0, " И ВидЦенности = &ВидЦенности0 И Событие В(&МассивСобытий0) ", " И Событие В (&МассивСобытий) ") + ") КАК НДСПокупкиОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСПокупкиОбороты.СчетФактура,
		|	НДСПокупкиОбороты.Поставщик,
		|	НДСПокупкиОбороты.СтавкаНДС
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетФактура УБЫВ
		|
		|ИТОГИ СУММА(СуммаБезНДС), СУММА(НДС) ПО
		|	СчетФактура";
		Результат     = Запрос.Выполнить();

		ОплаченоВсего = СтрЗачетаАванса.ЗачтеноАванса;

		ВыборкаНДСПоДокументам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

		Пока ВыборкаНДСПоДокументам.Следующий() Цикл

			Если ЗначениеНеЗаполнено(ВыборкаНДСПоДокументам.СчетФактура) Тогда
				// Не определен документ
				Продолжить;
			ИначеЕсли ВыборкаНДСПоДокументам.СчетФактура.Метаданные().ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
				ТекДокСчетФактура = ВыборкаНДСПоДокументам.СчетФактура.ПолучитьОбъект();
				
				Если ТекДокСчетФактура.РасшифровкаПлатежа.Найти(СтрЗачетаАванса.ДоговорКонтрагента, "ДоговорКонтрагента") = Неопределено Тогда
					// Фильтр по договору для документов у которых договор указывается в табличной части (документы оплаты)
					Продолжить;
				КонецЕсли;
				
			ИначеЕсли ВыборкаНДСПоДокументам.СчетФактура.Метаданные().Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено Тогда
				ТекДокСчетФактура = ВыборкаНДСПоДокументам.СчетФактура.ПолучитьОбъект();
				
				Если ТекДокСчетФактура.ДоговорКонтрагента <> СтрЗачетаАванса.ДоговорКонтрагента Тогда
					// Фильтр по договору для обычных документов (когда договор указан в шапке)
					Продолжить;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(ВыборкаНДСПоДокументам.СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
				// Фильтр по договору для случаев, когда остаток аванса введен документом "Ввод начальных остатков НДС"
				Результат = "";
				ПолучитьПараметрыСчетаФактуры(ВыборкаНДСПоДокументам.СчетФактура, мВалютаРегламентированногоУчета, Результат);

				Если Результат.Договор <> СтрЗачетаАванса.ДоговорКонтрагента Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			// Выполняем распределение суммы зачета авансов по принципу FIFO по отдельным документам
			ВсегоПоДокументу = ВыборкаНДСПоДокументам.СуммаБезНДС + ВыборкаНДСПоДокументам.НДС;
			СуммаОплаты = Мин(ОплаченоВсего, ВсегоПоДокументу);
			СуммаУчтеннойРанееОплаты = 0;

			ВыборкаНДСПоСодержаниюДок = ВыборкаНДСПоДокументам.Выбрать();

			Пока (ВыборкаНДСПоСодержаниюДок.Следующий()) И (СуммаОплаты <> СуммаУчтеннойРанееОплаты) Цикл

				// Внутри документа, выполняем распределение суммы зачета авансов пропорционально между всеми 
				// ставками НДС и видами ценностей
				КоэффРаспределения = (ВыборкаНДСПоДокументам.СуммаБезНДС + ВыборкаНДСПоДокументам.НДС)/ВсегоПоДокументу;
				СуммаТекОплаты     = Окр(СуммаОплаты * КоэффРаспределения, 2) - СуммаУчтеннойРанееОплаты;

				ОплатаНДС          = Окр(ВыборкаНДСПоДокументам.НДС * СуммаТекОплаты /(ВыборкаНДСПоДокументам.СуммаБезНДС + ВыборкаНДСПоДокументам.НДС), 2);
				ОплатаСуммаБезНДС  = СуммаТекОплаты - ОплатаНДС;

				СтрокаТП = Состав.Добавить();

				СтрокаТП.СчетФактура = ВыборкаНДСПоСодержаниюДок.СчетФактура;
				СтрокаТП.Поставщик   = ВыборкаНДСПоСодержаниюДок.Поставщик;
				СтрокаТП.СтавкаНДС   = ВыборкаНДСПоСодержаниюДок.СтавкаНДС;
				СтрокаТП.НДС         = ОплатаНДС;
				СтрокаТП.СуммаБезНДС = ОплатаСуммаБезНДС;

				СуммаУчтеннойРанееОплаты = СуммаУчтеннойРанееОплаты + СуммаТекОплаты;

			КонецЦикла; // Пока ВыборкаНДСПоСодержаниюДок.Следующий() Цикл

			ОплаченоВсего = ОплаченоВсего - СуммаУчтеннойРанееОплаты;

		КонецЦикла; // Пока ВыборкаНДСПоДокументам.Следующий() Цикл

	КонецЦикла; // Пока Выборка.Следующий() Цикл

	// Далее необходимо учесть операции погашения авансов уплаченных комиссионеру
	// факты погашения таких авансов отражаются в документах "ОтчетКомиссионераОПродажах"

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ 

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьНомерДокумента(ЭтотОбъект);

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура СтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ЭлементыФормы.Состав.ТекущиеДанные.НДС = РассчитатьСуммуНДС(ЭлементыФормы.Состав.ТекущиеДанные.СуммаБезНДС, TRUE, FALSE, ПолучитьСтавкуНДС(ЭлементыФормы.Состав.ТекущиеДанные.СтавкаНДС));

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СуммаБезНДС
// в строке табличной части "Товары".
//
Процедура СуммаБезНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ЭлементыФормы.Состав.ТекущиеДанные.НДС = РассчитатьСуммуНДС(ЭлементыФормы.Состав.ТекущиеДанные.СуммаБезНДС, TRUE, FALSE, ПолучитьСтавкуНДС(ЭлементыФормы.Состав.ТекущиеДанные.СтавкаНДС));

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля дата 
// в диалоге документа.
//
Процедура ДатаПриИзменении(Элемент)

	УстановитьВремя(РежимАвтоВремя.Последним);

	Если (НачалоМесяца(Дата) <> НачалоПериода)
	 или (КонецМесяца(Дата) <> КонецПериода) Тогда
		Ответ = Вопрос("Установить значение периода документа месяцем в который входит текущая дата?", РежимДиалогаВопрос.ДаНет,,,);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			НачалоПериода = НачалоМесяца(Дата);
			КонецПериода  = КонецМесяца(Дата);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
