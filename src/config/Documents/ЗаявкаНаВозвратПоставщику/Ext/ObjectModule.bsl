Функция ПечатьАШК() Экспорт
	ТабДок=Новый ТабличныйДокумент;
	Макет=ПолучитьМакет("ЗаявлениеАШК");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
    ОбластьТовар = Макет.ПолучитьОбласть("Детали");
    ОбластьИтоги = Макет.ПолучитьОбласть("Итоги");
	//ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьПодвал = Макет.ПолучитьОбласть("ПдвКуртов");

	СведенияОКонтрагенте = СведенияОЮрФизЛице(Контрагент, Дата);
	ОбластьШапка.Параметры.Контрагент       = СведенияОКонтрагенте.ПолноеНаименование;
	ОбластьШапка.Параметры.ЮридическийАдрес = СведенияОКонтрагенте.ЮридическийАдрес;
	ОбластьШапка.Параметры.Телефоны         = СведенияОКонтрагенте.Телефоны;
	ОбластьШапка.Параметры.Организация = Организация.Наименование;
	ОбластьШапка.Параметры.РеквизитыОрганизации =  ОписаниеОрганизации(СведенияОЮрФизЛице(Организация, Дата), "ЮридическийАдрес, Телефоны");
	ТабДок.Вывести(ОбластьШапка);
	н =1 ;
	Для Каждого СтрТовар из Товары Цикл
		ОбластьТовар.Параметры.Заполнить(СтрТовар);
		ОбластьТовар.Параметры.НомерПП = н;
		ОбластьТовар.Параметры.ДатаИзготовленияИСерийныйНомер = ""  + ?(ЗначениеЗаполнено(СтрТовар.ДатаПроизводства),СтрТовар.ДатаПроизводства,"") + 
		?(ЗначениеЗаполнено(СтрТовар.СерийныйНомер)," №:" + СтрТовар.СерийныйНомер,"");
		ОбластьТовар.Параметры.СчетФактура = ?(ЗначениеЗаполнено(СтрТовар.НомерСФ),"№: " + СтрТовар.НомерСФ,"") + ?(ЗначениеЗаполнено(СтрТовар.ДатаСФ)," от "+ Формат(СтрТовар.ДатаСФ,"ДФ=dd.MM.yyyy"), "");
		ТабДок.Вывести(ОбластьТовар);
		н = н + 1;
	КонецЦикла;	
	ОбластьИтоги.Параметры.КоличествоИтого = Товары.Итог("Количество");
	ТабДок.Вывести(ОбластьИтоги);
	ОбластьПодвал.Параметры.Организация = Организация.Наименование;
	ОбластьПодвал.Параметры.Контрагент  = СведенияОКонтрагенте.ПолноеНаименование;
	ТабДок.Вывести(ОбластьПодвал);
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДок.АвтоМасштаб = Истина;
	//ТабДок.Показать();
	Возврат ТабДок;
КонецФункции

Функция ПечатьАктаУтилизации() Экспорт
	ТабДок=Новый ТабличныйДокумент;
	Макет=ПолучитьМакет("АктУтилизации");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
    ОбластьТовар = Макет.ПолучитьОбласть("Детали");
    ОбластьДопИнфо = Макет.ПолучитьОбласть("ДопИнфо");
	ОбластьНарушениеХранения = Макет.ПолучитьОбласть("НарушениеХранения");
	//ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьПодвал = Макет.ПолучитьОбласть("ПдвКуртов");

	ТабДок.Вывести(ОбластьШапка);
	ТЗНоменклатура = ТОвары.Выгрузить();
	ТЗНоменклатура.Свернуть("Номенклатура","Количество");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаВозвратПоставщикуТовары.Номенклатура КАК Номенклатура,
	|	СУММА(ЗаявкаНаВозвратПоставщикуТовары.Количество) КАК Количество,
	|	ЗаявкаНаВозвратПоставщикуТовары.ЗаявкаНаБрак,
	|	ЗаявкаНаВозвратПоставщикуТовары.СерийныйНомер,
	|	ЗаявкаНаВозвратПоставщикуТовары.ДатаПроизводства
	|ИЗ
	|	Документ.ЗаявкаНаВозвратПоставщику.Товары КАК ЗаявкаНаВозвратПоставщикуТовары
	|ГДЕ
	|	ЗаявкаНаВозвратПоставщикуТовары.ЗаявкаНаБрак.СостояниеЗаявки = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявкиНаБрак.ПризнатьБрак)
	|	И ЗаявкаНаВозвратПоставщикуТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявкаНаВозвратПоставщикуТовары.Номенклатура,
	|	ЗаявкаНаВозвратПоставщикуТовары.ЗаявкаНаБрак,
	|	ЗаявкаНаВозвратПоставщикуТовары.СерийныйНомер,
	|	ЗаявкаНаВозвратПоставщикуТовары.ДатаПроизводства
	|ИТОГИ
	|	СУММА(Количество)
	|ПО
	|	Номенклатура";
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока Выборка.Следующий() Цикл
		СтрокаНоменклатуры = Выборка.Номенклатура.Наименование + " - " + Выборка.Количество + " шт. сер. № ";
		ВыборкаДетали= Выборка.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			Если ВыборкаДетали.ДатаПроизводства = "нет" Тогда
				ДатаПроизводстваСтр = "";
			Иначе
				ДатаПроизводстваСтр = ВыборкаДетали.ДатаПроизводства;
			КонецЕсли;
			СтрокаНоменклатуры = СтрокаНоменклатуры + ДатаПроизводстваСтр + " " + ВыборкаДетали.СерийныйНомер + ";"
		КонецЦикла;
		ОбластьТовар.Параметры.СтрокаНоменклатуры =  СтрокаНоменклатуры;
		ТабДок.Вывести(ОбластьТовар);
	КонецЦикла;
	
	
	ТЗНеправильноеХранение = Товары.Выгрузить(Новый Структура("НарушениеПравилХранения",Истина));
	ТЗНеправильноеХранение.Свернуть("Номенклатура","Количество");
	Если ТЗНеправильноеХранение.Количество() > 0 Тогда
		ТабДок.Вывести(ОбластьДопИнфо);
	КонецЕсли;
	
	Для Каждого СтрТовар из  ТЗНеправильноеХранение Цикл
		СтрокаНепрХранение = СтрТовар.Номенклатура.Наименование  + " - " + СтрТовар.Количество + " шт.";
		ОбластьНарушениеХранения.Параметры.СтрокаНоменклатураХранение = СтрокаНепрХранение;
		ТабДок.Вывести(ОбластьНарушениеХранения);
	КонецЦикла;	
	ОбластьПодвал.Параметры.ТекДата = Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy");	
	ТабДок.Вывести(ОбластьПодвал);
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.АвтоМасштаб = Истина;
	Возврат ТабДок;
КонецФункции

Функция ПечатьСлужебнойЗаписки()  Экспорт
	ТабДок=Новый ТабличныйДокумент;
	Макет=ПолучитьМакет("СлужебнаяЗаписка");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
    ОбластьТовар = Макет.ПолучитьОбласть("Детали");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	Попытка
		ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаСклоненияФИО", "Decl", ТипВнешнейКомпоненты.Native); 
		Объект = Новый("AddIn.Decl.CNameDecl");
	Исключение
		Сообщить("Не удалось подключить внешнюю компоненту по причине: " + ОписаниеОшибки()); 
	КонецПопытки;
	
	Падеж = 2; //Родительный: от кого? чего? 
	
	РезультатФИО = "";
	Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
		Сообщить("Не заполнено основное контактное лицо контрагента!", СтатусСообщения.Важное);
	Иначе
		СтрокаФИО = Ответственный.Наименование; 
		РезультатФИО = Объект.Просклонять(СтрокаФИО, Падеж);
	КонецЕсли;		
 	ОбластьШапка.Параметры.ОтветственныйРП = РезультатФИО;
	ОбластьШапка.Параметры.Контрагент = Контрагент.НаименованиеПолное;
	ОбластьШапка.Параметры.Номер = Номер;

	ТабДок.Вывести(ОбластьШапка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаВозвратПоставщикуТовары.Номенклатура КАК Номенклатура,
	|	ЗаявкаНаВозвратПоставщикуТовары.Склад,
	|	СУММА(ЗаявкаНаВозвратПоставщикуТовары.Количество) КАК Количество,
	|	ЗаявкаНаВозвратПоставщикуТовары.Поставка,
	|	ЗаявкаНаВозвратПоставщикуТовары.Номенклатура.Код КАК Код,
	|	ЗаявкаНаВозвратПоставщикуТовары.Номенклатура.Артикул КАК Артикул,
	|	ЗаявкаНаВозвратПоставщикуТовары.Цена КАК Цена,
	|	СУММА(ЗаявкаНаВозвратПоставщикуТовары.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ЗаявкаНаВозвратПоставщику.Товары КАК ЗаявкаНаВозвратПоставщикуТовары
	|ГДЕ
	|	ЗаявкаНаВозвратПоставщикуТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявкаНаВозвратПоставщикуТовары.Номенклатура,
	|	ЗаявкаНаВозвратПоставщикуТовары.Склад,
	|	ЗаявкаНаВозвратПоставщикуТовары.Поставка,
	|	ЗаявкаНаВозвратПоставщикуТовары.Номенклатура.Код,
	|	ЗаявкаНаВозвратПоставщикуТовары.Номенклатура.Артикул,
	|	ЗаявкаНаВозвратПоставщикуТовары.Цена
	|ИТОГИ
	|	СУММА(Количество),
	|	СУММА(Сумма),
	|	МАКСИМУМ(Цена)
	|ПО
	|	Номенклатура";
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	суммаИтого = 0;
	
	Пока Выборка.Следующий() Цикл
		ОбластьТовар.Параметры.Заполнить(Выборка);
		ВыборкаДетали= Выборка.Выбрать();
		Поставка = "";
		ПоставкаПред = "";
		Склад = "";
		СкладПред = "";
		Пока ВыборкаДетали.Следующий() Цикл  
			Если ВыборкаДетали.Поставка <> Документы.ПоступлениеТоваровУслуг.ПустаяСсылка() и  ПоставкаПред <> ВыборкаДетали.Поставка Тогда
				Поставка = Поставка + ВыборкаДетали.Поставка.Номер  + " от " + Формат(ВыборкаДетали.Поставка.Дата, "ДФ=dd.MM.yyyy")+
				?(ВыборкаДетали.Количество() >1," - " + ВыборкаДетали.Количество + " шт;", ";") +  Символы.ПС;
			КонецЕсли;
			ПоставкаПред = ВыборкаДетали.Поставка;
			Если ВыборкаДетали.Склад <> Справочники.Склады.ПустаяСсылка() и  СкладПред <> ВыборкаДетали.Склад Тогда
				Склад = Склад + ";" + ВыборкаДетали.Склад + Символы.ПС;
			КонецЕсли;
			СкладПред = ВыборкаДетали.Поставка;
		КонецЦикла;
		
		ОбластьТовар.Параметры.Поставка =  Поставка;
		ОбластьТовар.Параметры.Склад =  Склад;
		суммаИтого = суммаИтого + Выборка.Сумма;

		ТабДок.Вывести(ОбластьТовар);
	КонецЦикла;
		
	ОбластьПодвал.Параметры.Сумма = суммаИтого;
	ТабДок.Вывести(ОбластьПодвал);
	
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.АвтоМасштаб = Истина;
	Возврат ТабДок;
КонецФункции

// Функция формирует табличный документ с печатной формой заказа или счета,
// разработанного методистами
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция ПечатьСчетаЗаказа(Тип) Экспорт


	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Организация,
	|	Контрагент КАК Получатель,
	|	Организация КАК Руководители,
	|	Организация КАК Поставщик,
	//|	СуммаДокумента,
	//|	ВалютаДокумента,
	|	ИСТИНА как УчитыватьНДС,
	|	ИСТИНА как СуммаВключаетНДС,
	|	ЛОЖЬ как Кредит,
	|	ЛОЖЬ как Аванс
	|ИЗ
	|	Документ.ЗаявкаНаВозвратПоставщику КАК СчетНаОплатуПокупателю
	|
	|ГДЕ
	|	СчетНаОплатуПокупателю.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявкаНаВозвратПоставщику_СчетЗаказ";

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	ВложенныйЗапрос.Номенклатура.Код                КАК Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул            КАК Артикул,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.Номенклатура.БазоваяЕдиницаИзмерения  КАК ЕдиницаИзмерения,	
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.Сумма * 0.18 как СуммаНДС,
	//|	ВложенныйЗапрос.Характеристика,
	|	NULL                                            Как Серия,
	|	ВложенныйЗапрос.НомерСтроки                     КАК НомерСтроки,
	|	ВложенныйЗапрос.Метка                           КАК Метка
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		ЗаказПокупателя.Номенклатура,	
	|		ЗаказПокупателя.Цена                        КАК Цена,
	|		СУММА(ЗаказПокупателя.Количество)           КАК Количество,
	|		СУММА(ЗаказПокупателя.Сумма     )           КАК Сумма,
	//|		СУММА(ЗаказПокупателя.СуммаНДС  )           КАК СуммаНДС,
//	|		ЗаказПокупателя.ХарактеристикаНоменклатуры  КАК Характеристика,
	|		ЗаказПокупателя.НомерСтроки                 КАК НомерСтроки,
	|		0                                           КАК Метка
	|	ИЗ
	|		Документ.ЗаявкаНаВозвратПоставщику.Товары КАК ЗаказПокупателя
	|
	|	ГДЕ
	|		ЗаказПокупателя.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПокупателя.НомерСтроки,
	|		ЗаказПокупателя.Номенклатура,		
	|		ЗаказПокупателя.Цена
	|	) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|
	|";

	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	Макет = ПолучитьМакет("СчетЗаказ");

	// Выводим шапку накладной

	СведенияОПоставщике = СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата);
	Если Тип = "Счет" Тогда
		ОбластьМакета       = Макет.ПолучитьОбласть("ЗаголовокСчета");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ИНН = СведенияОПоставщике.ИНН;
		ОбластьМакета.Параметры.КПП = СведенияОПоставщике.КПП;
		СтруктурнаяЕдиница =  Организация.ОсновнойБанковскийСчет;
		Если ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			Банк       = СтруктурнаяЕдиница.Банк;
			БИК        = Банк.Код;
			КоррСчет   = Банк.КоррСчет;
			ГородБанка = Банк.Город;
			НомерСчета = СтруктурнаяЕдиница.НомерСчета;

			ОбластьМакета.Параметры.БИКБанкаПолучателя               = БИК;
			ОбластьМакета.Параметры.БанкПолучателя                   = Банк;
			ОбластьМакета.Параметры.БанкПолучателяПредставление      = СокрЛП(Банк) + " " + ГородБанка;
			ОбластьМакета.Параметры.СчетБанкаПолучателя              = КоррСчет;
			ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = КоррСчет;
			ОбластьМакета.Параметры.СчетПолучателяПредставление      = НомерСчета;
			ОбластьМакета.Параметры.СчетПолучателя                   = НомерСчета;
			ОбластьМакета.Параметры.ПредставлениеПоставщика          = СтруктурнаяЕдиница.ТекстКорреспондента;
		КонецЕсли;
		Если ЗначениеНеЗаполнено(ОбластьМакета.Параметры.ПредставлениеПоставщика) Тогда
			ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Счет на оплату");
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	ТабДокумент.Вывести(ОбластьМакета);

	СведенияОПолучателе = СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	ТабДокумент.Вывести(ОбластьМакета);

	ЕстьСкидки = Ложь;
	//Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 
	//	Если Не ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
	//		ЕстьСкидки = Истина;
	//		Прервать;
	//	КонецЕсли; 
	//КонецЦикла;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьСуммы);

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	Если НЕ ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("СуммаБезСкидки").ШиринаКолонки +
											Макет.Область("СуммаСкидки").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар       = СокрП(ВыборкаСтрокТовары.Товар) ;//+ ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьДанных);

		//Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
			Скидка = 0;
		//Иначе
		//	Скидка = ВыборкаСтрокТовары.Сумма  / (100 - ВыборкаСтрокТовары.Скидка) * ВыборкаСтрокТовары.Скидка;
		//КонецЕсли;
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = ФорматСумм(ЗапросТовары.Итог("СуммаНДС"));
		ТабДокумент.Присоединить(ОбластьСуммы);
	КонецЕсли;
	
	Если Шапка.Кредит Тогда
		ОбластьНомераКр = Макет.ПолучитьОбласть("Аванс|НомерСтроки");
		ОбластьКодовКр  = Макет.ПолучитьОбласть("Аванс|КолонкаКодов");
		ОбластьДанныхКр = Макет.ПолучитьОбласть("Аванс|Данные");
		ОбластьСкидокКр = Макет.ПолучитьОбласть("Аванс|Скидка");
		ОбластьСуммыКр  = Макет.ПолучитьОбласть("Аванс|Сумма");

		ТабДокумент.Вывести(ОбластьНомераКр);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодовКр);
		КонецЕсли;
		//ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Присоединить(ОбластьДанныхКр);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидокКр);
		КонецЕсли;
		ОбластьСуммыКр.Параметры.ВсегоАванс = ФорматСумм(Шапка.Аванс);
		ТабДокумент.Присоединить(ОбластьСуммыКр);
		
		ОбластьНомераКр = Макет.ПолучитьОбласть("Долг|НомерСтроки");
		ОбластьКодовКр  = Макет.ПолучитьОбласть("Долг|КолонкаКодов");
		ОбластьДанныхКр = Макет.ПолучитьОбласть("Долг|Данные");
		ОбластьСкидокКр = Макет.ПолучитьОбласть("Долг|Скидка");
		ОбластьСуммыКр  = Макет.ПолучитьОбласть("Долг|Сумма");

		ТабДокумент.Вывести(ОбластьНомераКр);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодовКр);
		КонецЕсли;
		//ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Присоединить(ОбластьДанныхКр);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидокКр);
		КонецЕсли;
		
		ОбластьСуммыКр.Параметры.ВсегоДолг = ФорматСумм(Сумма - Шапка.Аванс);
		ТабДокумент.Присоединить(ОбластьСуммыКр);

	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ЗапросТовары.Количество()
	+ ", на сумму " + ФорматСумм(СуммаКПрописи, справочники.Валюты.НайтиПоКоду(643));
	ОбластьМакета.Параметры.СуммаПрописью = СформироватьСуммуПрописью(СуммаКПрописи, справочники.Валюты.НайтиПоКоду(643));
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	Если Тип = "Счет" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");

		Руководители = ОтветственныеЛицаОрганизации(Шапка.Руководители, Шапка.Дата,);
		Руководитель = Руководители.Руководитель;
		Бухгалтер    = Руководители.ГлавныйБухгалтер;

		ОбластьМакета.Параметры.ФИОРуководителя  = "/" + Руководитель  + "/";
		ОбластьМакета.Параметры.ФИОБухгалтера    = "/" + Бухгалтер     + "/";
		ОбластьМакета.Параметры.ФИООтветственный = "/" + Ответственный + "/";

	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	КонецЕсли; 
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);
    	
	 Возврат ТабДокумент;
КонецФункции // ПечатьСчетаЗаказа()
