////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мКрасныйЦвет, мЦветФона, мЦветТекста, мЖирныйШрифт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает/снимает флажки в заданном табличном поле.
//
// Параметры:
//  Пометка       - булево, признак установки/снятия флажков.
//  ТабличноеПоле - табличное поле, флажки которого необходимо установить/снять.
//
Процедура УстановитьСнятьФлажки(Пометка, ТабличноеПоле)

	Для каждого СтрокаТабличнойЧасти Из ТабличноеПоле Цикл
		СтрокаТабличнойЧасти.Пометка = Пометка;
	КонецЦикла;

КонецПроцедуры // УстановитьСнятьФлажки()

// Процедура устанавливает/снимает флажки для подчинения.
//
Процедура УстановитьСнятьФлажкиПодчинения(Пометка, ТекущаяСтрока, ТабличнаяЧасть)

	// Обработка данных по складам
	//СтруктураПоиска = Новый Структура;
	//СтруктураПоиска.Вставить("Номенклатура",                   ТекущаяСтрока.Номенклатура);
	//СтруктураПоиска.Вставить("МеткаОстаткиПоСкладу",           Истина);

	//СтрокиПоСкладу = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);

	//Для Каждого СтрокаПоСкладу Из СтрокиПоСкладу Цикл
	//	СтрокаПоСкладу.Пометка = Пометка;
	//КонецЦикла;

КонецПроцедуры // УстановитьСнятьФлажкиПодчинения()

// Процедура устанавливает/снимает флажки для группы.
//
Процедура УстановитьСнятьФлажкиГруппы(Пометка, ТекущаяСтрока, ТабличнаяЧасть)

	// Обработка данных по складам
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура",                   ТекущаяСтрока.Номенклатура);
	Если ТабличнаяЧасть = Товары Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ТекущаяСтрока.ХарактеристикаНоменклатуры);
	КонецЕсли;
	СтруктураПоиска.Вставить("МеткаОстаткиПоСкладу",           Истина);

	СтрокиПоСкладу = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
	ПометкаГруппы  = Пометка;

	Для Каждого СтрокаПоСкладу Из СтрокиПоСкладу Цикл
		Если СтрокаПоСкладу.Пометка И НЕ Пометка Тогда
			ПометкаГруппы = СтрокаПоСкладу.Пометка;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	// Изменение итога
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура",                   ТекущаяСтрока.Номенклатура);
	Если ТабличнаяЧасть = Товары Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ТекущаяСтрока.ХарактеристикаНоменклатуры);
	КонецЕсли;
	СтруктураПоиска.Вставить("МеткаОстаткиПоСкладу",           Ложь);

	СтрокиПоСкладу            = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
	СтрокиПоСкладу[0].Пометка = ПометкаГруппы;

КонецПроцедуры // УстановитьСнятьФлажкиГруппы()

// Процедура обнуляет столбец "Добавить в документ" в заданном табличном поле.
//
// Параметры:
//  ТабличноеПоле - обрабатываемое табличное поле.
//
Процедура ОбнулитьСтолбецДобавитьВДокумент(ТабличноеПоле)

	Для каждого СтрокаТабличнойЧасти Из ТабличноеПоле Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда
			СтрокаТабличнойЧасти.ДобавитьВДокумент = 0;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ОбнулитьСтолбецДобавитьВДокумент()


// Процедура обновляет реквизит "ДобавитьВДокумент" в табличной части
//
Процедура ОбновитьИтогДобавитьВДокумент(ТекущаяСтрока, ТабличнаяЧасть)

	// Обработка данных по складам
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура",                   ТекущаяСтрока.Номенклатура);
	
	СтруктураПоиска.Вставить("МеткаОстаткиПоСкладу",           Истина);

	СтрокиПоСкладу = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
	
	ВсегоДобавить  = 0;

	Для Каждого СтрокаПоСкладу Из СтрокиПоСкладу Цикл
		ВсегоДобавить  = ВсегоДобавить + СтрокаПоСкладу.ДобавитьВДокумент;
	КонецЦикла;

	// Изменение итога
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура",                   ТекущаяСтрока.Номенклатура);
	
	СтруктураПоиска.Вставить("МеткаОстаткиПоСкладу",           Ложь);

	СтрокиПоСкладу                      = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
	СтрокиПоСкладу[0].ДобавитьВДокумент = ВсегоДобавить;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если ЗначениеНеЗаполнено(Склад) Тогда
		// Или форма открыта некорректно, или документ еще не был записан
		СообщитьОбОшибке("Формирование невозможно, не заполнен склад!", Отказ);
		Возврат;
	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	// Заполнить табличные части:

	ЗапросПоСкладу = Новый Запрос;

	ЗапросПоСкладу.УстановитьПараметр("Склад", Склад);
	
	ЗапросПоСкладу.УстановитьПараметр("Дат", Дата);
	
	ЗапросПоСкладу.Текст = "
	|ВЫБРАТЬ
	|	Номенклатура,
	|   КоличествоОстаток КАК Остаток
	|ИЗ 
	|   РегистрНакопления.ТоварыНаСкладах.Остатки(&Дат, Склад = &Склад) КАК Остатки
	|ГДЕ
	|	КоличествоОстаток > 0
	|";

	Выборка = ЗапросПоСкладу.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		НовыйЭлемент = Товары.Добавить();		
		НовыйЭлемент.Номенклатура = Выборка.Номенклатура;
		НовыйЭлемент.ДобавитьВДокумент = Выборка.Остаток;
		НовыйЭлемент.СвободныйОстаток = Выборка.Остаток;
		НовыйЭлемент.Код = Выборка.Номенклатура.Код;
		НовыйЭлемент.Артикул = Выборка.Номенклатура.Артикул;
		НовыйЭлемент.Пометка = Истина;

	КонецЦикла; 
	

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Подсчитаем количество строк в табличных частях.
	СтраницаПанели = ЭлементыФормы.ОсновнаяПанель.Страницы;
	СтраницаПанели.Товары.Заголовок = "Товары (" + Товары.Количество() + " поз.)";

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик нажатия кнопки "Заполнить"
//
Процедура ОсновныеДействияФормыДействиеЗаполнить(Кнопка)

//ОповеститьОВыборе(СтруктураВозвращаемыхЗначений);

ТЗ = Новый ТаблицаЗначений;
ТЗ.Колонки.Добавить("Товар");
ТЗ.Колонки.Добавить("ЕдИзм");
ТЗ.Колонки.Добавить("Коэф");
ТЗ.Колонки.Добавить("Колво");

Для каждого Стр Из Товары Цикл

	Если (Стр.Пометка) И (Стр.ДобавитьВДокумент > 0) Тогда
	
		Эл = ТЗ.Добавить();
		Эл.Товар = Стр.Номенклатура;
		Эл.ЕдИзм = Стр.Номенклатура.ЕдиницаХраненияОстатков;
		Эл.Коэф = Стр.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		Эл.Колво = Стр.ДобавитьВДокумент;
	
	КонецЕсли; 

КонецЦикла;

ОповеститьОВыборе(ТЗ);

КонецПроцедуры // ОсновныеДействияФормыДействиеЗаполнить()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Установить все флажки" 
// командной панели табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыДействиеУстановитьФлажки(Кнопка)

	УстановитьСнятьФлажки(Истина, Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеУстановитьФлажки()

// Процедура вызывается при нажатии кнопки "Снять все флажки" 
// командной панели табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыДействиеСнятьФлажки(Кнопка)

	УстановитьСнятьФлажки(Ложь, Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеСнятьФлажки()

// Процедура вызывается при выборе пункта меню "Обнулить столбец добавляемых в документ" 
// кнопки "Изменить" командной панели табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыОбнулить(Кнопка)

	ОбнулитьСтолбецДобавитьВДокумент(Товары);

КонецПроцедуры // КоманднаяПанельТоварыОбнулить()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПередНачаломДобавления" табличной части "Товары".
//
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

КонецПроцедуры // ТоварыПередНачаломДобавления()

// Процедура - обработчик события "ПередУдалением" табличной части "Товары".
//
Процедура ТоварыПередУдалением(Элемент, Отказ)

	Отказ = Истина;

КонецПроцедуры // ТоварыПередУдалением()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части "Товары".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ДанныеСтроки.ДобавитьВДокумент > ДанныеСтроки.СвободныйОстаток Тогда
		ОформлениеСтроки.ЦветТекста = ?(ДанныеСтроки.Пометка, мКрасныйЦвет, мЦветТекста);
	КонецЕсли;

	Если ДанныеСтроки.Пометка Тогда
		ОформлениеСтроки.Шрифт = мЖирныйШрифт;
	КонецЕсли;
	//.Ячейки.ДобавитьВДокумент
	//Если мМногоСкладов И НЕ ДанныеСтроки.МеткаОстаткиПоСкладу Тогда
	//	ОформлениеСтроки.ЦветФона = мЦветФона;
	//КонецЕсли;

	//Если мМногоСкладов Тогда
	//	ОформлениеСтроки.Ячейки.ДобавитьВДокумент.ТолькоПросмотр = НЕ ДанныеСтроки.МеткаОстаткиПоСкладу;
	//Иначе
	//	ОформлениеСтроки.Ячейки.ДобавитьВДокумент.ТолькоПросмотр = Ложь;
	//КонецЕсли;

КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" табличной части "Товары".
//
Процедура ТоварыДобавитьВДокументПриИзменении(Элемент)

	ТекущаяСтрока = ЭлементыФормы.Товары.ТекущаяСтрока;
	
	Если ТекущаяСтрока.ДобавитьВДокумент > 0 Тогда
	
		ТекущаяСтрока.Пометка = Истина;
	
	КонецЕсли; 
	

КонецПроцедуры

// Процедура - обработчик события "ПриИзмененииФлажка" табличной части "Товары".
//
Процедура ТоварыПриИзмененииФлажка(Элемент, Колонка)

	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	УстановитьСнятьФлажкиПодчинения(ТекущаяСтрока.Пометка, ТекущаяСтрока, Товары);

КонецПроцедуры


мКрасныйЦвет = Новый Цвет(255, 0, 0);
мЦветФона    = ЦветаСтиля.ЦветФонаФормы;
мЦветТекста  = ЦветаСтиля.ЦветТекстаПоля;
мЖирныйШрифт = Новый Шрифт(,, Истина);

