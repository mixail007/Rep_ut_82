////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Устанавливается в значение "Истина", если пользователю можно менять цену
// в документе
Перем мМожноМенятьЦенуВДокументе;

Перем мКолонкиТовары;

Перем мПечатнаяФормаПоУмолчанию;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(, "По справочнику");
	
	Если НЕ(ЗначениеНеЗаполнено(Склад)) Тогда
	
		СписокЗапросов.Добавить("ОстаткиИКачествоНоменклатуры", "По остаткам и качеству номенклатуры ");
	
	КонецЕсли; 

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда;

	ЕстьСерия = Истина;
	ТипЦен    = Неопределено;

	СпособЗаполненияЦен = Неопределено;
	ЕстьЦена            = Ложь;

	Если ТабличнаяЧасть = Товары Тогда
		Команда           = "ПодборВТабличнуюЧастьТовары";
		ИмяТабличнойЧасти = "Товары";
	КонецЕсли;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ПредставлениеДок   = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда",            Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора", СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов",        ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад",               Склад);

	// Тип цен устанавливает склад получатель.
	СтруктураПараметровПодбора.Вставить("ТипЦен",              Склад.ТипЦенРозничнойТорговли);
	СтруктураПараметровПодбора.Вставить("Организация",         Организация);
	СтруктураПараметровПодбора.Вставить("Контрагент",          Неопределено);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента",  Неопределено);
	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен", СпособЗаполненияЦен);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена",            ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия",           ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента",     мВалютаРегламентированногоУчета);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия, Качество;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);

	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("КоличествоМест"  , КоличествоМест);
	ЗначениеВыбора.Свойство("Цена"            , Цена);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"           , Серия);
	ЗначениеВыбора.Свойство("Качество"        , Качество);

	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Расчет цены по валюте документа
	ВалютаДокумента      = мВалютаРегламентированногоУчета;
	КурсДокумента        = 1;
	КратностьДокумента   = 1;
	ЦенаВВалютеДокумента = ПересчитатьЦенуПриИзмененииВалюты(Цена,
	                                                         ВалютаЦены,
	                                                         ВалютаДокумента,
	                                                         КурсДокумента,
	                                                         КратностьДокумента,
	                                                         Дата);
	
	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	Если ТабличнаяЧасть = Товары Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
		СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);
		Если ЗначениеНеЗаполнено(Качество) Тогда
			Качество = Справочники.Качество.Новый;
		КонецЕсли;
		СтруктураОтбора.Вставить("Качество"         , Качество);

	Иначе
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;

	СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		Иначе

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

		КонецЕсли;

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;

		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти.Количество = Количество;

			ВалютаДокумента    = мВалютаРегламентированногоУчета;
			КурсДокумента      = 1;
			КратностьДокумента = 1;

			СтрокаТабличнойЧасти.Качество         = Справочники.Качество.Новый;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;
			//СтрокаТабличнойЧасти.Цена                       = ЦенаВВалютеДокумента;
			СтрокаТабличнойЧасти.Качество                   = Качество;

			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			Если ЗначениеНеЗаполнено(Качество) Тогда
				ЗаполнитьКачествоНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

		Иначе

			СтрокаТабличнойЧасти.Количество       = Количество;

		КонецЕсли;

	КонецЕсли;

	ТабличнаяЧастьИмя = "Товары";
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	//СтрокаТабличнойЧасти.Цена = 0;
	//УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Номенклатура);

КонецПроцедуры
                                
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает соответстующие свойства поля ввода цены при изменении 
// номенклатуры в текущей строке табличной части.
//
// Параметры:
//  Номенклатура - ссылка на справочник, элемент номенклатуры, для которого будем устанавливать цену
//
Процедура УстановитьСвойстваПоляВводаЦены(Номенклатура)

	ТекущаяСтрока     = ЭлементыФормы.Товары.ТекущиеДанные;

КонецПроцедуры // УстановитьСвойстваПоляВводаЦены()

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	УстановитьДоступностьКнопкиЗаполнитьИПровести();
	
	Колонки     = ЭлементыФормы.Товары.Колонки;

	ДоступностьПолучателя = Истина;
	//ЭлементыФормы.Склад.АвтоОтметкаНезаполненного = ДоступностьПолучателя;
	//ЭлементыФормы.Склад.Доступность               = ДоступностьПолучателя;

КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает доступность кнопки "Заполнить и провести". Кнопка доступна,
// если дата дата документа совпадает с текущей.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьКнопкиЗаполнитьИПровести()

	//ЭлементыФормы.ДействияФормы.Кнопки.ДействиеЗаполнитьИПровести.Доступность = 
	//							(НачалоДня(Дата) = НачалоДня(ТекущаяДата()));

КонецПроцедуры // УстановитьДоступностьКнопкиЗаполнитьИПровести

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		Если ИспользоватьВнутренниеЗаказы(Истина) Тогда
			Если Не ПараметрОснование.ВидЗаказа = Перечисления.ВидыВнутреннегоЗаказа.НаСклад Тогда
				Сообщить("Перемещение товаров нельзя вводить на основании заказа от подразделения", СтатусСообщения.Важное);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь);
		УстановитьНомерДокумента(ЭтотОбъект);

		ВидОперации      = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
		//Склад			 = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойСклад");

	КонецЕсли;

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("СпособСписанияОстаткаТоваров");

	УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиТовары, СтруктураКолонок);

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	//УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	//									  ВидОперации.Метаданные().ЗначенияПеречисления,
	//									  Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Заполнить подменю выбора печатных форм.
	СписокМакетов = ЭтотОбъект.ПолучитьСписокПечатныхФорм();
	УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати,
	                                       СписокМакетов,
	                                       Новый Действие("ДействияФормыДействиеВыбратьПечатнуюФормы"));

	// Установить печатную форму по умолчанию.
	УстановитьКнопкуПечати(ЭтотОбъект.Метаданные().Имя, ЭтаФорма, СписокМакетов, мПечатнаяФормаПоУмолчанию);

	// Вывести в заголовке формы вид операции.
	//УстановитьЗаголовокФормыДокументаСУчетомСклада(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма, СкладПолучатель);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	УстановитьВидимостьСерииНоменклатуры(мКолонкиТовары);

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	// установим доступность колонки "Цена" для редактирования
	мМожноМенятьЦенуВДокументе = РазрешитьРедактированиеЦенВДокументах();

	//ЭлементыФормы.Товары.Колонки.Цена.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Подсчитаем количество строк в табличных частях.
	ЗаголовокТовары = "Товары (";
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если СтраницаПанели.Имя = "Товары" Тогда
			СтраницаПанели.Заголовок = ЗаголовокТовары  + ДокументОбъект.Товары.Количество() + " поз.)";
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	//УстановитьЗаголовокФормыДокументаСУчетомСклада(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма, СкладПолучатель);

КонецПроцедуры // ПослеЗаписи()

// Обработчик внешнего события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	Если глТорговоеОборудование <> Неопределено Тогда
		Если Событие = "BarCodeValue" Тогда

			ИмяТекущейСтраницы = ЭтаФорма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
			Если ИмяТекущейСтраницы = "Товары" Тогда

				Команда         = "ПодборВТабличнуюЧастьТовары";
				ИмяТабличнойЧасти = "Товары";


			Иначе

				// Ничего не надо делать
				Возврат;

			КонецЕсли;

			ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);

			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("Команда"              , Команда);
			СтруктураПараметров.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
			СтруктураПараметров.Вставить("ИмяТабличнойЧасти"    , ИмяТабличнойЧасти);

			глТорговоеОборудование.ОбработатьВнешнееСобытиеОтСканераДляФормы(ЭтаФорма, ЭтотОбъект, СтруктураПараметров, Данные);

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)
	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров[Кнопка.Имя];
	КонецЕсли;

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	//УстановитьЗаголовокФормыДокументаСУчетомСклада(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма, СкладПолучатель);

	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Изменить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм для изменения табличной части
//
Процедура КоманднаяПанельТоварыДействиеИзменить(Кнопка)

	ФормаЗаполнения = ПолучитьФорму("ФормаЗаполненияПоОстаткам", ЭтаФорма);
	//ФормаЗаполнения.ПоказыватьТовары = Истина;
	//ФормаЗаполнения.ПоказыватьТару   = Истина;
	//ФормаЗаполнения.ПоказыватьУслуги = Истина;
	//ФормаЗаполнения.Реализация       = ЭтотОбъект;
	ФормаЗаполнения.Дата = Дата;
	ФормаЗаполнения.Склад = Склад;
	ЗначениеВыбора = ФормаЗаполнения.ОткрытьМодально();
	
	Если ЗначениеВыбора = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;

	//ЗначениеВыбора.ВыбратьСтроку();
	
	Если Товары.Количество() > 0 Тогда
		
		Если Вопрос("В табличной части присутствуют товары. Удалить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			
			Товары.Очистить();
			
		КонецЕсли;
	
	КонецЕсли; 
	
	Для каждого Стр Из ЗначениеВыбора Цикл
	
		СТов = Товары.Добавить();	
		СТов.Номенклатура = Стр.Товар;
		СТов.ЕдиницаИзмерения = Стр.ЕдИзм;
		СТов.Коэффициент = Стр.Коэф;
		СТов.Количество = Стр.Колво;
	
	КонецЦикла; 
	
	//// Получим контекст обработки
	//ИзменениеТабличнойЧастиТовары      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	//ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	////Установим реквизиты и переменые формы.
	//ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект       = ЭтотОбъект;
	//ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента      = ЭтаФорма;
	//ФормаИзменениеТабличнойЧастиТовары.мЕстьНДС             = Ложь; 
	////ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице    = (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка
	////														   ИЛИ СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка);
	//ФормаИзменениеТабличнойЧастиТовары.мСпособЗаполненияЦен = Неопределено;
	//
	////Перенесем табличную часть
	//ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить());

	//// Открываем форму обработки
	//ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Возвратная тара", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Возвратная тара".
//

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	НапечататьДокументПоУмолчанию(ЭтотОбъект, глТекущийПользователь, мПечатнаяФормаПоУмолчанию);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
//
Процедура ДействияФормыДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = Кнопка.Текст;
		СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		СписокМакетов = ПолучитьСписокПечатныхФорм();
		СтрокаМакетаВСписке = СписокМакетов.НайтиПоЗначению(Кнопка.Имя);
		Если СтрокаМакетаВСписке <> Неопределено Тогда
			Печать(СтрокаМакетаВСписке.Значение);
			СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
			СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;			
			
		Иначе
			СсылкаВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Кнопка.Имя, "_", "-")));
			Печать(СсылкаВнешнейФормы);
			СтруктураМакета.Макет = СсылкаВнешнейФормы;
			СтруктураМакета.ПредставлениеМакета = Кнопка.Текст;
		КонецЕсли;		
		
		мПечатнаяФормаПоУмолчанию = СтруктураМакета.Макет;
		СохранитьТекущуюКнопкуПечати(ЭтотОбъект.Метаданные().Имя, СтруктураМакета);
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при нажатии кнопки "Заполнить и провести" командной панели формы,
// вызывает заполнение документа с проведением.
//
Процедура ДействияФормыДействиеЗаполнитьИПровести(Кнопка)

	// Заполнять с проведением можно документы с текущую датой
	Если НачалоДня(Дата) = НачалоДня(ТекущаяДата()) Тогда
		Если НЕ ЭтоНовый() Тогда

			// Если документ ранее был записан, то он будет переноситься в конец дня из-за оперативного проведения, о чем следует предупредить.
			Ответ = Вопрос("В режиме заполнения с проведением документ будет проводиться оперативно. " + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли; 

	// Обработка выполняется в транзакции. Она будет отменена, если заполнить не удалось
	НачатьТранзакцию();
	Отказ = Ложь;

	// Очистим записи документа по размещению, если он был ранее проведен
	Если Проведен Тогда
		НаборТовары = РегистрыНакопления.ТоварыНаСкладах.СоздатьНаборЗаписей();
		НаборТовары.Отбор.Регистратор.Установить(Ссылка);
		НаборТовары.Прочитать();
		НаборТовары.Очистить();
		НаборТовары.Записать();
	КонецЕсли;

	// Заполнение документа
	//ЗаполнитьПоСериям();

	// Если заполнить удалось, то запись документа с проведением

	НеПроведен = Ложь;
	Если НЕ Отказ Тогда
		Попытка
			Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		Исключение
			НеПроведен = Истина;
		КонецПопытки;
	КонецЕсли;

	Если Отказ ИЛИ НеПроведен Тогда
		ОтменитьТранзакцию();
		Если НеПроведен Тогда
			Предупреждение("Операция не выполнена!");
		КонецЕсли;
		
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли; 

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(ЭтотОбъект.Метаданные().Синоним, ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить командной панели
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоЗаказу(Кнопка)
	
	Если Товары.Количество() > 0 Тогда
		Ответ = Вопрос("Документ уже содержит строки. При заполнении они будут удалены." + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Товары.Очистить();
	КонецЕсли;
	
	ДатаЗаполнения = ?( ЭтоНовый(), '00010101000000', Дата);
	
КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнитьПоЗаказу()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	УстановитьДоступностьКнопкиЗаполнитьИПровести();

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ОтражатьВНалоговомУчете = Элемент.Значение;

	УстановитьВидимость();

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()


// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьНомерДокумента(ЭтотОбъект);

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СкладОтправитель.
//
Процедура СкладОтправительПриИзменении(Элемент)

	УстановитьВидимость();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СкладПолучатель.
//
Процедура СкладПолучательПриИзменении(Элемент)

	УстановитьВидимость();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриВыводеСтроки" поля табличной части "Товары".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	//ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
// "Товары". 
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	//УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Номенклатура);
	//Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров) Тогда
	//	СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
	//КонецЕсли;

КонецПроцедуры // ТоварыПриНачалеРедактирования()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	//Услуг в этом документе быть не должно.
	Если Не ЗначениеНеЗаполнено(ВыбранноеЗначение) Тогда
		Если ВыбранноеЗначение.Услуга Тогда
			Предупреждение("Услуг в этом документе быть не доложно."); 
			СтандартнаяОбработка = Ложь;  // Отказ от выбора.
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры // ТоварыНоменклатураОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	НоменклатураСсылка = ЭлементыФормы.Товары.ТекущиеДанные.Номенклатура.Ссылка;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Берем из самого реквизита Номенклатура
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

	СтрокаТабличнойЧасти.КоличествоШипов = 0;
	Если (НоменклатураСсылка<>Справочники.Номенклатура.ПустаяСсылка()) Тогда 
		ЗапросДата = новый Запрос;
		ЗапросДата.УстановитьПараметр("Ссылка",НоменклатураСсылка);
		ЗапросДата.Текст = "
		|Выбрать Максимум(Ссылка.Дата) Как ДатаДок из 
		|Документ.КомплектацияНоменклатуры
		|Где Ссылка.Номенклатура = &Ссылка";
		
		ВыборкаДата = ЗапросДата.Выполнить().Выбрать();
		
		Если (ВыборкаДата.Следующий()) Тогда
			ДатаДок = ВыборкаДата.ДатаДок;
			Запрос = новый Запрос;
			Запрос.УстановитьПараметр("Ссылка",НоменклатураСсылка);
			Запрос.УстановитьПараметр("ДатаДок",ДатаДок);
			Запрос.Текст = "
			|Выбрать Док.Количество,Сумма(ТЧ.Количество) как СуммаШипов из 
			|Документ.КомплектацияНоменклатуры Как Док
			|Левое соединение 
			|Документ.КомплектацияНоменклатуры.Комплектующие Как ТЧ
			|По 
			|Док.Ссылка = ТЧ.Ссылка
			|Где Док.Номенклатура = &Ссылка
			|И
			|ТЧ.Количество<>Док.Количество
			|И Док.Дата = &ДатаДок
			|Сгруппировать по Док.количество";
			
			Выб = Запрос.Выполнить().Выбрать();
			Если (Выб.Следующий()) Тогда 
				КоличествоШипов = Выб.СуммаШипов / ?(Выб.Количество=0,1,Выб.Количество);
				СтрокаТабличнойЧасти.КоличествоШипов = КоличествоШипов * СтрокаТабличнойЧасти.Количество;
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;

	//СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;
	//ЗаполнитьВесВТабличнойЧасти(СтрокаТабличнойЧасти);
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	// Установить коэффициент
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент; 
	РассчитатьКоличествоТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	НоменклатураСсылка = ЭлементыФормы.Товары.ТекущиеДанные.Номенклатура.Ссылка;
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	Если (НоменклатураСсылка<>Справочники.Номенклатура.ПустаяСсылка()) Тогда 
		ЗапросДата = новый Запрос;
		ЗапросДата.УстановитьПараметр("Ссылка",НоменклатураСсылка);
		ЗапросДата.Текст = "
		|Выбрать Максимум(Ссылка.Дата) Как ДатаДок из 
		|Документ.КомплектацияНоменклатуры
		|Где Ссылка.Номенклатура = &Ссылка";
		
		ВыборкаДата = ЗапросДата.Выполнить().Выбрать();
		
		Если (ВыборкаДата.Следующий()) Тогда
			ДатаДок = ВыборкаДата.ДатаДок;
			Запрос = новый Запрос;
			Запрос.УстановитьПараметр("Ссылка",НоменклатураСсылка);
			Запрос.УстановитьПараметр("ДатаДок",ДатаДок);
			Запрос.Текст = "
			|Выбрать Док.Количество,Сумма(ТЧ.Количество) как СуммаШипов из 
			|Документ.КомплектацияНоменклатуры Как Док
			|Левое соединение 
			|Документ.КомплектацияНоменклатуры.Комплектующие Как ТЧ
			|По 
			|Док.Ссылка = ТЧ.Ссылка
			|Где Док.Номенклатура = &Ссылка
			|И
			|ТЧ.Количество<>Док.Количество
			|И Док.Дата = &ДатаДок
			|Сгруппировать по Док.количество";
			
			Выб = Запрос.Выполнить().Выбрать();
			Если (Выб.Следующий()) Тогда 
				КоличествоШипов = Выб.СуммаШипов / ?(Выб.Количество=0,1,Выб.Количество);
				СтрокаТабличнойЧасти.КоличествоШипов = КоличествоШипов * Элемент.Значение;
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	РассчитатьКоличествоТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода цены в рознице
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение("Не выбрана позиция номенклатуры!"); 
		Возврат;
	КонецЕсли; 

КонецПроцедуры // ТоварыЦенаНачалоВыбораИзСписка()

// Процедура - обработчик события "НачалоВыбора" поля Заказ покупателя
// в строке табличной части "Товары".
//
Процедура ТоварыДокументРезерваНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Новый Структура(), "Товары");

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПеретаскивание()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	яштСменаПользователя(ЭтотОбъект, ЭтаФорма, глТекущийПользователь);
КонецПроцедуры

Процедура КоманднаяПанель1Заполнить(Кнопка)
	
	//Форма = Документы.ПоступлениеТоваровУслуг.ПолучитьФорму("ФормаВыбораСотрудника");
	//Форма.Кладовщики = Ложь;
	//ТЗ = новый ТаблицаЗначений;	
	//СС = новый СписокЗначений;
	//Для й=0 по ДанныеПоПогрузке.Количество()-1 Цикл
	//	Стр1 = ДанныеПоПогрузке.Получить(й);
	//	СС.Добавить(Стр1.Грузчик);
	//КонецЦикла;
	//Форма.ОтобранныеСотрудники = СС;
	//Результат = Форма.ОткрытьМодально();
	//Если (ТипЗнч(Результат) <> ТипЗнч(ТЗ)) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если (Результат.Колонки.Найти("Сотрудник") = Неопределено) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ДанныеПоПогрузке.Очистить();
	//	
	//Для й=0 по Результат.Количество()-1 Цикл
	//	Стр 			= Результат.Получить(й);					
	//	Стр1 			= ДанныеПоПогрузке.Добавить();
	//	Стр1.Грузчик  	= Стр.Сотрудник;
	//КонецЦикла;	
	//
	//ОбщийВес = РассчитатьВесПоТоварам();
	//Для й=0 по ДанныеПоПогрузке.Количество()-1 Цикл
	//	Стр = ДанныеПоПогрузке.Получить(й);
	//	Стр.Вес = Окр(ОбщийВес/ДанныеПоПогрузке.Количество(),3,0);
	//КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанель1ПоставитьВес(Кнопка)
	
	//// Рассчитать общий вес	
	//ОбщийВес 			= РассчитатьВесПоТоварам();
	//КоличествоАвтоматом = 0;
	//ВесВручную			= 0;
	//
	//Для й=0 по ДанныеПОПогрузке.Количество()-1 Цикл
	//	Стр = ДанныеПОПогрузке.Получить(й);
	//	Если Не(Стр.Вручную) Тогда
	//		КоличествоАвтоматом = КоличествоАвтоматом + 1;
	//	Иначе 
	//		ВесВручную			= ВесВручную + Стр.Вес;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Для й=0 по ДанныеПоПогрузке.Количество()-1 Цикл
	//	Стр = ДанныеПоПогрузке.Получить(й);
	//	Если Не(Стр.Вручную) Тогда
	//		Стр.Вес = Окр((ОбщийВес-ВесВручную)/КоличествоАвтоматом,3,0);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//ЗаполнитьВесВТоварах();
	
КонецПроцедуры

Процедура ДанныеПоПогрузкеВесПриИзменении(Элемент)
	//
	//ЭлементТЧ = ЭлементыФормы.ДанныеПоПогрузке.ТекущиеДанные;
	//Стр = ДанныеПоПогрузке.Найти(ЭлементТЧ.Грузчик);
	//Стр.Вручную = Истина;
	//КоманднаяПанель1ПоставитьВес(Неопределено);

КонецПроцедуры

Процедура КоманднаяПанель2Заоплнить(Кнопка)
	//
	//Форма = Документы.ПоступлениеТоваровУслуг.ПолучитьФорму("ФормаВыбораСотрудника");
	//Форма.Кладовщики = Истина;
	//ТЗ = новый ТаблицаЗначений;	
	//СС = новый СписокЗначений;
	//Для й=0 по Кладовщики.Количество()-1 Цикл
	//	Стр1 = Кладовщики.Получить(й);
	//	СС.Добавить(Стр1.Кладовщик);
	//КонецЦикла;
	//Форма.ОтобранныеСотрудники = СС;
	//Результат = Форма.ОткрытьМодально();
	//Если (ТипЗнч(Результат) <> ТипЗнч(ТЗ)) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если (Результат.Колонки.Найти("Сотрудник") = Неопределено) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Кладовщики.Очистить();
	//	
	//Для й=0 по Результат.Количество()-1 Цикл
	//	Стр 			= Результат.Получить(й);					
	//	Стр1 			= Кладовщики.Добавить();
	//	Стр1.Кладовщик 	= Стр.Сотрудник;
	//	Стр1.Склад   	= Склад;
	//КонецЦикла;	

КонецПроцедуры


Процедура ДанныеПоПогрузкеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	//Если (НоваяСтрока) Тогда 
	//	
	//	ОбщийВес = РассчитатьВесПоТоварам();
	//	Для й=0 по ДанныеПоПогрузке.Количество()-1 Цикл
	//		Стр = ДанныеПоПогрузке.Получить(й);
	//		Стр.Вес = Окр(ОбщийВес/ДанныеПоПогрузке.Количество(),3,0);
	//	КонецЦикла;
	//	
	//КонецЕсли;

КонецПроцедуры

Процедура ДанныеПоПогрузкеПослеУдаления(Элемент)
	
		//ОбщийВес = РассчитатьВесПоТоварам();
		//Для й=0 по ДанныеПоПогрузке.Количество()-1 Цикл
		//	Стр = ДанныеПоПогрузке.Получить(й);
		//	Стр.Вес = Окр(ОбщийВес/ДанныеПоПогрузке.Количество(),3,0);
		//КонецЦикла;

КонецПроцедуры

Процедура КладовщикиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;	
	ТекущаяСтрока.ВремяОбщ = ЧасМин(ТекущаяСтрока.ВремяОкончания - ТекущаяСтрока.ВремяНачала);

КонецПроцедуры

Функция ЧасМин(Сек)
	Возврат ?(СтрДлина(Строка(Цел(Сек/3600))) < 2, "0" + Строка(Цел(Сек/3600)), Строка(Цел(Сек/3600))) + 
			 ":" + ?(СтрДлина(Строка(Цел((Сек/3600 - Цел(Сек/3600))*60))) < 2, "0" + Строка(Цел((Сек/3600 - Цел(Сек/3600))*60)),
			 Строка(Цел((Сек/3600 - Цел(Сек/3600))*60)));
КонецФункции

Процедура ТоварыПринятоПриИзменении(Элемент)
	
	//СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	//СтрокаТабличнойЧасти.Забраковано = СтрокаТабличнойЧасти.Количество - СтрокаТабличнойЧасти.Принято;
	
	
	//Если СтрокаТабличнойЧасти.Забраковано > 0 Тогда
	//	
	//	ЭлементыФормы.Товары.ТекущаяСтрока.Причина.ОтметкаНезаполненного = Истина;
	//	
	//Иначе 
	//	
	//	ЭлементыФормы.Товары.ТекущаяСтрока.Причина.ОтметкаНезаполненного = Ложь;
	//
	//КонецЕсли; 
	
КонецПроцедуры

Процедура ТоварыЗабаракованоПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.Принято = СтрокаТабличнойЧасти.Количество - СтрокаТабличнойЧасти.Забраковано;

	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары         = ЭлементыФормы.Товары.Колонки;
