Перем СтруктураНачальныхНастроек;

Перем мВалютаРегламентированногоУчета;
Перем мМногоСкладов;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура заполняет настройки, с которыми была закрыта форма при
// предыдущем запуске.
//
// Параметры:
//  ВосстанавливатьЗначения - булево, флаг попытки восстановить сохраненные значения.
//
Процедура ЗаполнитьНачальныеНастройки(ВосстанавливатьЗначения = Истина)

	Для Каждого ЭлементСтруктуры Из СтруктураНачальныхНастроек Цикл

		Если ВосстанавливатьЗначения Тогда
			ВосстановленноеЗначение = ВосстановитьЗначение("ЗаказПокупателя_ФормаФормированияРеализаций_"+ЭлементСтруктуры.Ключ);
			ВосстановленноеЗначение = ?(ВосстановленноеЗначение = Неопределено,ЭлементСтруктуры.Значение, ВосстановленноеЗначение);
		Иначе
			ВосстановленноеЗначение = ЭлементСтруктуры.Значение;
		КонецЕсли;
		ЭлементыФормы[ЭлементСтруктуры.Ключ].Значение = ВосстановленноеЗначение;

	КонецЦикла;

	СписокМакетов = Документы.РеализацияТоваровУслуг.СоздатьДокумент().ПолучитьСписокПечатныхФорм();
	Для Каждого ЭлементСписка Из СписокМакетов Цикл
		Если ЭлементСписка.Значение = Неопределено Тогда
			Продолжить; // разделитель
		КонецЕсли;
		ЭлементыФормы.МакетРеализации.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;

	Если ВосстанавливатьЗначения Тогда
		ВосстановленноеЗначение = ВосстановитьЗначение("ЗаказПокупателя_ФормаФормированияРеализаций_МакетРеализации");
		ТекущийМакет = ЭлементыФормы.МакетРеализации.СписокВыбора.НайтиПоЗначению(ВосстановленноеЗначение);
		ТекущийМакет = ?(ТекущийМакет = Неопределено, ЭлементыФормы.МакетРеализации.СписокВыбора.Получить(2), ТекущийМакет);
	Иначе
		ТекущийМакет = ЭлементыФормы.МакетРеализации.СписокВыбора.Получить(2); // Печатная форма реализации
	КонецЕсли;
	МакетРеализации = ТекущийМакет.Значение;

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Процедура устанавливает доступность эдементов формы
//
Процедура УстановитьДоступность()

	ЭлементыФормы.ПроводитьРеализацию.Доступность            = ЗаписыватьРеализацию;
	ЭлементыФормы.ПечататьРеализацию.Доступность             = ЗаписыватьРеализацию;
	ЭлементыФормы.ФормироватьСФ.Доступность                  = ЗаписыватьРеализацию И ПроводитьРеализацию;

	ЭлементыФормы.МакетРеализации.Доступность                = ПечататьРеализацию;
	ЭлементыФормы.НадписьМакетРеализации.Доступность         = ПечататьРеализацию;

	ЭлементыФормы.ПроводитьСФ.Доступность                    = ФормироватьСФ;
	ЭлементыФормы.ОткрыватьСФ.Доступность                    = ФормироватьСФ;
	ЭлементыФормы.ПечататьСФ.Доступность                     = ФормироватьСФ;

	ЭлементыФормы.ПечататьСФНаПринтер.Доступность            = ПечататьСФ;
	ЭлементыФормы.ПечататьСФНаЭкран.Доступность              = ПечататьСФ;
	ЭлементыФормы.ПечататьРеализациюНаПринтер.Доступность    = ПечататьРеализацию;
	ЭлементыФормы.ПечататьРеализациюНаЭкран.Доступность      = ПечататьРеализацию;

КонецПроцедуры // УстановитьДоступность()

// Процедура проверяет значения реквизитов формы и, в случае необходимости, корректирует их
//
Процедура ПроверитьЗначенияРеквизитов()

	Если Не ЗаписыватьРеализацию Тогда
		ФормироватьСФ       = Ложь;
		ПроводитьРеализацию = Ложь;
		ПечататьРеализацию  = Ложь;
	ИначеЕсли Не ПроводитьРеализацию Тогда
		ФормироватьСФ       = Ложь;
	КонецЕсли;

	Если НЕ ФормироватьСФ Тогда
		ПроводитьСФ = Ложь;
		ОткрыватьСФ = Ложь;
		ПечататьСФ  = Ложь;
	КонецЕсли;

	УстановитьДоступность();

КонецПроцедуры // ПроверитьЗначенияРеквизитов()

// Функция возвращает документ-объект для данного склада
//
Функция ПолучитьРеализациюДляСклада(СтруктураДокументовРеализацияТоваровУслуг, Склад, КодСклада)

	Реализация = Неопределено;
	Если Не СтруктураДокументовРеализацияТоваровУслуг.Свойство("Склад"+КодСклада, Реализация) Тогда

		Реализация = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		Реализация.Дата = РабочаяДата;
		ЗаполнитьШапкуДокумента(Реализация, глТекущийПользователь, мВалютаРегламентированногоУчета, "Продажа");
		УстановитьНомерДокумента(Реализация);
		ЗаполнитьШапкуДокументаПоОснованию(Реализация, ЗаказПокупателя);

		Реализация.Склад  = Склад;
		Реализация.Сделка = ЗаказПокупателя;

		СтруктураДокументовРеализацияТоваровУслуг.Вставить("Склад"+КодСклада, Реализация);

	КонецЕсли;

	Возврат Реализация;

КонецФункции

// Процедура формирует требуемые документы и выполняет требуемые действия в зависимости от настроек
//
Процедура СформироватьДокументы()

	// Получим необходимые нам для выполнения заказа товары, тару и услуги
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ЗаказПокупателя",    ЗаказПокупателя);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ЗаказПокупателя.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("СтатусТары",         Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Номенклатура                                      КАК Номенклатура,
	|	ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры,
	|	Цена                                             КАК Цена,
	|	ЕдиницаИзмерения                                 КАК ЕдиницаИзмерения,
	|	ЕдиницаИзмерения.Коэффициент                     КАК Коэффициент,
	|	Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаХранения,
	|	Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
	|	ПроцентСкидкиНаценки                             КАК ПроцентСкидкиНаценки,
	|	ПроцентАвтоматическихСкидок                      КАК ПроцентАвтоматическихСкидок,
	|	ВЫБОР КОГДА СтатусПартии = &СтатусТары
	|	      ТОГДА ""ВозвратнаяТара""
	|	      ИНАЧЕ ВЫБОР КОГДА Номенклатура.Услуга
	|	                  ТОГДА ""Услуги""
	|	                  ИНАЧЕ ""Товары"" КОНЕЦ КОНЕЦ   КАК ИмяТабличнойЧасти,
	|	СУММА(КоличествоОстаток)                         КАК Количество
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента
	|		                                          И ЗаказПокупателя = &ЗаказПокупателя) КАК ОстаткиЗаказ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА СтатусПартии = &СтатусТары
	|	      ТОГДА ""ВозвратнаяТара""
	|	      ИНАЧЕ ВЫБОР КОГДА Номенклатура.Услуга
	|	                  ТОГДА ""Услуги""
	|	                  ИНАЧЕ ""Товары"" КОНЕЦ КОНЕЦ,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Цена,
	|	ЕдиницаИзмерения,
	|	ЕдиницаИзмерения.Коэффициент,
	|	ПроцентСкидкиНаценки,
	|	ПроцентАвтоматическихСкидок
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЫБОР КОГДА СтатусПартии = &СтатусТары
	|	      ТОГДА ""ВозвратнаяТара""
	|	      ИНАЧЕ ВЫБОР КОГДА Номенклатура.Услуга
	|	                  ТОГДА ""Услуги""
	|	                  ИНАЧЕ ""Товары"" КОНЕЦ КОНЕЦ,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Цена,
	|	ПроцентСкидкиНаценки,
	|	ПроцентАвтоматическихСкидок
	|АВТОУПОРЯДОЧИВАНИЕ
	|
	|ИТОГИ ПО
	|	ИмяТабличнойЧасти,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры
	|";

	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();

	// Получим остатки по резервам и остатки на складах
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	Запрос.УстановитьПараметр("СкладЗаказа",     ЗаказПокупателя.Склад);
	Запрос.УстановитьПараметр("Номенклатура",    РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Номенклатура"));

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Склад                      КАК Склад,
	|	Склад.Код                  КАК КодСклада,
	|	Номенклатура               КАК Номенклатура,
	|	ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВЫБОР КОГДА Склад = &СкладЗаказа
	|	      ТОГДА ИСТИНА
	|	      ИНАЧЕ ЛОЖЬ КОНЕЦ     КАК СкладЗаказа,
	|	ИСТИНА                     КАК ПризнакРезерва,
	|	СУММА(КоличествоОстаток)   КАК Резерв,
	|	СУММА(0)                   КАК Остаток
	|ИЗ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, ДокументРезерва = &ЗаказПокупателя И Номенклатура В (&Номенклатура)) КАК ТоварыВРезервеНаСкладахОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА Склад = &СкладЗаказа
	|	      ТОГДА ИСТИНА
	|	      ИНАЧЕ ЛОЖЬ КОНЕЦ,
	|	Склад,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Склад                      КАК Склад,
	|	ТоварыНаСкладахОстатки.Склад.Код                  КАК КодСклада,
	|	ТоварыНаСкладахОстатки.Номенклатура               КАК Номенклатура,
	|	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВЫБОР КОГДА ТоварыНаСкладахОстатки.Склад = &СкладЗаказа
	|	      ТОГДА ИСТИНА
	|	      ИНАЧЕ ЛОЖЬ КОНЕЦ                            КАК СкладЗаказа,
	|	ЛОЖЬ                                              КАК ПризнакРезерва,
	|	СУММА(0)                                          КАК Резерв,
	|	СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток
	|	      - ВЫБОР КОГДА СоединениеСРезервами.КоличествоОстаток ЕСТЬ NULL 
	|	              ТОГДА 0 
	|	              ИНАЧЕ СоединениеСРезервами.КоличествоОстаток КОНЕЦ) КАК Остаток
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(, Номенклатура В (&Номенклатура)) КАК ТоварыНаСкладахОстатки
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, ДокументРезерва = &ЗаказПокупателя И Номенклатура В (&Номенклатура)) КАК СоединениеСРезервами
	|ПО
	|	СоединениеСРезервами.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	|	И
	|	СоединениеСРезервами.Склад = ТоварыНаСкладахОстатки.Склад
	|	И
	|	СоединениеСРезервами.ХарактеристикаНоменклатуры = ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА ТоварыНаСкладахОстатки.Склад = &СкладЗаказа
	|	      ТОГДА ИСТИНА
	|	      ИНАЧЕ ЛОЖЬ КОНЕЦ,
	|	ТоварыНаСкладахОстатки.Склад,
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	ПризнакРезерва УБЫВ,
	|	СкладЗаказа УБЫВ,
	|	Склад
	|АВТОУПОРЯДОЧИВАНИЕ
	|";

	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();

	СтруктураДокументовРеализацияТоваровУслуг = Новый Структура;

	ОрганизацияЗаказа                   = ЗаказПокупателя.Организация;
	ДатаЗаказа                          = ЗаказПокупателя.Дата;
	ОрганизацияЯвляетсяПлательщикомЕНВД = УчетнаяПолитикаНалоговыйУчет("ОрганизацияЯвляетсяПлательщикомЕНВД", ОрганизацияЗаказа, ДатаЗаказа);
	СкладЗаказа                         = ЗаказПокупателя.Склад;
	КодСкладаЗаказа                     = СкладЗаказа.Код;

	КоличествоБезУчетаЦен = 0;
	Пока Выборка.Следующий() Цикл

		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
			КоличествоБезУчетаЦен = Выборка.Количество;
			Продолжить;
		КонецЕсли;

		КоличествоОстаток = Мин(Выборка.Количество, КоличествоБезУчетаЦен);

		Если КоличествоОстаток <= 0 Тогда
			Продолжить;
		КонецЕсли;

		КоличествоБезУчетаЦен = КоличествоБезУчетаЦен - КоличествоОстаток;

		Если Выборка.ИмяТабличнойЧасти = "Товары" Тогда

			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура", Выборка.Номенклатура);
			СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Выборка.ХарактеристикаНоменклатуры);

			СтрокиТаблицыОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаТаблицыОстатков Из СтрокиТаблицыОстатков Цикл

				Если КоличествоОстаток <= 0 Тогда
					Прервать;
				КонецЕсли;

				Если СтрокаТаблицыОстатков.Резерв > 0 Тогда
					СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;
					Количество                   = Мин(КоличествоОстаток, СтрокаТаблицыОстатков.Резерв);
					СтрокаТаблицыОстатков.Резерв = СтрокаТаблицыОстатков.Резерв - Количество;
				ИначеЕсли СтрокаТаблицыОстатков.Остаток > 0 Тогда
					СпособСписанияОстаткаТоваров  = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
					Количество                    = Мин(КоличествоОстаток, СтрокаТаблицыОстатков.Остаток);
					СтрокаТаблицыОстатков.Остаток = СтрокаТаблицыОстатков.Остаток - Количество;
				Иначе
					Продолжить;
				КонецЕсли;

				Если Количество > 0 Тогда

					Если мМногоСкладов Тогда
						РеализацияСклад     = СкладЗаказа;
						РеализацияКодСклада = КодСкладаЗаказа;
					Иначе
						РеализацияСклад     = СтрокаТаблицыОстатков.Склад;
						РеализацияКодСклада = СтрокаТаблицыОстатков.КодСклада;
					КонецЕсли;

					Реализация = ПолучитьРеализациюДляСклада(СтруктураДокументовРеализацияТоваровУслуг, РеализацияСклад, РеализацияКодСклада);

					СтрокаТабличнойЧасти = Реализация.Товары.Добавить();

					СтрокаТабличнойЧасти.Номенклатура                = Выборка.Номенклатура;
					СтрокаТабличнойЧасти.ЕдиницаИзмерения            = Выборка.ЕдиницаИзмерения;
					СтрокаТабличнойЧасти.Коэффициент                 = Выборка.Коэффициент;
					СтрокаТабличнойЧасти.ПроцентСкидкиНаценки        = Выборка.ПроцентСкидкиНаценки;
					СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок = Выборка.ПроцентАвтоматическихСкидок;
					СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры  = Выборка.ХарактеристикаНоменклатуры;
					СтрокаТабличнойЧасти.Цена                        = Выборка.Цена;
					СтрокаТабличнойЧасти.Количество                  = ?(ЗначениеНеЗаполнено(Выборка.Коэффициент), 0,
					                                                   Количество * Выборка.КоэффициентЕдиницыХранения / Выборка.Коэффициент);

					Если мМногоСкладов Тогда
						СтрокаТабличнойЧасти.Склад                   = СтрокаТаблицыОстатков.Склад;
					КонецЕсли;

					ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, Реализация);

					// Заполняем реквизиты табличной части.
					ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, Реализация);
					СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = СпособСписанияОстаткаТоваров;

					// Рассчитываем реквизиты табличной части.
					РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти,    Реализация);
					РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Реализация);

					ЗаполнитьКачествоНоменклатурыТабЧасти(СтрокаТабличнойЧасти, Реализация);

					КоличествоОстаток = КоличествоОстаток - Количество;

				КонецЕсли;

			КонецЦикла;

		ИначеЕсли Выборка.ИмяТабличнойЧасти = "ВозвратнаяТара" Тогда

			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура", Выборка.Номенклатура);

			СтрокиТаблицыОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаТаблицыОстатков Из СтрокиТаблицыОстатков Цикл

				Если КоличествоОстаток <= 0 Тогда
					Прервать;
				КонецЕсли;

				Если СтрокаТаблицыОстатков.Резерв > 0 Тогда
					СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;
					Количество                   = Мин(КоличествоОстаток, СтрокаТаблицыОстатков.Резерв);
					СтрокаТаблицыОстатков.Резерв = СтрокаТаблицыОстатков.Резерв - Количество;
				ИначеЕсли СтрокаТаблицыОстатков.Остаток > 0 Тогда
					СпособСписанияОстаткаТоваров  = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
					Количество                    = Мин(КоличествоОстаток, СтрокаТаблицыОстатков.Остаток);
					СтрокаТаблицыОстатков.Остаток = СтрокаТаблицыОстатков.Остаток - Количество;
				Иначе
					Продолжить;
				КонецЕсли;

				Если Количество > 0 Тогда

					Если мМногоСкладов Тогда
						РеализацияСклад     = СкладЗаказа;
						РеализацияКодСклада = КодСкладаЗаказа;
					Иначе
						РеализацияСклад     = СтрокаТаблицыОстатков.Склад;
						РеализацияКодСклада = СтрокаТаблицыОстатков.КодСклада;
					КонецЕсли;

					Реализация = ПолучитьРеализациюДляСклада(СтруктураДокументовРеализацияТоваровУслуг, РеализацияСклад, РеализацияКодСклада);

					СтрокаТабличнойЧасти = Реализация.ВозвратнаяТара.Добавить();

					СтрокаТабличнойЧасти.Номенклатура                 = Выборка.Номенклатура;
					СтрокаТабличнойЧасти.Цена                         = Выборка.Цена;
					СтрокаТабличнойЧасти.Количество                   = Количество;
					СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = СпособСписанияОстаткаТоваров;

					Если мМногоСкладов Тогда
						СтрокаТабличнойЧасти.Склад                    = СтрокаТаблицыОстатков.Склад;
					КонецЕсли;

					// Выполнить общие действия для всех документов при изменении возвратной тары.
					ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, Реализация);

					// Рассчитать реквизиты табличной части.
					РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, Реализация);

					КоличествоОстаток = КоличествоОстаток - Количество;

				КонецЕсли;

			КонецЦикла;

		ИначеЕсли Выборка.ИмяТабличнойЧасти = "Услуги" Тогда

			Реализация = ПолучитьРеализациюДляСклада(СтруктураДокументовРеализацияТоваровУслуг, СкладЗаказа, КодСкладаЗаказа);
			СтрокаТабличнойЧасти = Реализация.Услуги.Добавить();

			СтрокаТабличнойЧасти.Номенклатура         = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Выборка.ПроцентСкидкиНаценки;
			СтрокаТабличнойЧасти.Количество           = КоличествоОстаток;
			СтрокаТабличнойЧасти.Цена                 = Выборка.Цена;

			// Заполняем реквизиты табличной части.
			Если ПроверитьУслугаОблагаетсяЕНВД(Выборка.Номенклатура, ОрганизацияЗаказа, ДатаЗаказа, ОрганизацияЯвляетсяПлательщикомЕНВД) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Иначе
				ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, Реализация);
			КонецЕсли;
			СтрокаТабличнойЧасти.Содержание = СтрокаТабличнойЧасти.Номенклатура.НаименованиеПолное;

			// Рассчитываем реквизиты табличной части.
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти,    Реализация);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Реализация);

		КонецЕсли;
	КонецЦикла;

	Для Каждого ЭлементСтруктуры Из СтруктураДокументовРеализацияТоваровУслуг Цикл

		Реализация = ЭлементСтруктуры.Значение;
		НетДанных  = (Реализация.Товары.Количество() + Реализация.ВозвратнаяТара.Количество() + Реализация.Услуги.Количество() = 0);

		Если НетДанных Тогда
			Продолжить;
		КонецЕсли;

		Если ЗаписыватьРеализацию Тогда
			Реализация.Записать();
		КонецЕсли;
		Если ПроводитьРеализацию Тогда
			Попытка
				Реализация.ЗаполнитьТабличныеЧастиПередПроведением(Ложь);
				Реализация.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
			Исключение
				СообщитьОбОшибке("Не удалось провести "+СокрЛП(Реализация));
			КонецПопытки;
		КонецЕсли;

		Если ФормироватьСФ Тогда
			ОбъектСчетаФактуры = Документы.СчетФактураВыданный.СоздатьДокумент();
			ОбъектСчетаФактуры.Дата = РабочаяДата;
			Если НЕ ЗначениеНеЗаполнено(Реализация.Организация) Тогда
				Если ЗначениеНеЗаполнено(Реализация.Организация.Префикс) Тогда
					ОбъектСчетаФактуры.УстановитьНовыйНомер(?(ОбъектСчетаФактуры.НаАванс,"А","") + "0");
				Иначе
					ОбъектСчетаФактуры.УстановитьНовыйНомер(?(ОбъектСчетаФактуры.НаАванс,"А","") + Реализация.Организация.Префикс);
				КонецЕсли;
			КонецЕсли;
			ОбъектСчетаФактуры.Заполнить(Реализация);
			ОбъектСчетаФактуры.Организация = Реализация.Организация;
			ОбъектСчетаФактуры.Записать();
		КонецЕсли;
		Если ПроводитьСФ Тогда
			Попытка
				ОбъектСчетаФактуры.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				СообщитьОбОшибке("Не удалось провести "+СокрЛП(ОбъектСчетаФактуры));
			КонецПопытки;
		КонецЕсли;

		Если ОткрыватьРеализацию Тогда
			ФормаРеализации = Реализация.ПолучитьФорму("ФормаДокумента");
			ФормаРеализации.Открыть();
		КонецЕсли;
		Если ПечататьРеализацию Тогда
			Реализация.Печать(МакетРеализации, , ПечататьРеализациюНаПринтер);
		КонецЕсли;

		Если ОткрыватьСФ Тогда
			ФормаСчетаФактуры = ОбъектСчетаФактуры.ПолучитьФорму("ФормаДокумента");
			ФормаСчетаФактуры.Открыть();
		КонецЕсли;
		Если ПечататьСФ Тогда
			ОбъектСчетаФактуры.Печать("СчетФактура", , ПечататьСФНаПринтер);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // СформироватьДокументы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Значения по умолчанию"
// командной панели формы
//
Процедура ДействияФормыЗначенияПоУмолчанию(Кнопка)

	ЗаполнитьНачальныеНастройки(Ложь);

КонецПроцедуры // ДействияФормыЗначенияПоУмолчанию()

// Процедура вызывается при нажатии кнопки "Сформировать документы"
// основной командной панели формы
//
Процедура ОсновныеДействияФормыСформироватьДокументы(Кнопка)

	СформироватьДокументы();
	Закрыть();

КонецПроцедуры // ОсновныеДействияФормыСформироватьДокументы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если ЗначениеНеЗаполнено(ЗаказПокупателя) Тогда
		// Или форма открыта некорректно, или документ еще не был записан
		СообщитьОбОшибке("Формирование реализаций по размещениям текущего заказа невозможно!", Отказ);
		Возврат;
	КонецЕсли;

	// Заполнить начальные настройки
	ЗаполнитьНачальныеНастройки();

	ПроверитьЗначенияРеквизитов();

	Если НЕ ПоказыватьФорму и НЕ ПоказыватьФормуПринудительно Тогда
		СформироватьДокументы();
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	УстановитьДоступность();

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы
//
Процедура ОбновлениеОтображения()

	УстановитьДоступность();

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПриЗакрытии" формы
//
Процедура ПриЗакрытии()

	// Сохранить настройки
	Для Каждого ЭлементСтруктуры Из СтруктураНачальныхНастроек Цикл
		СохранитьЗначение("ЗаказПокупателя_ФормаФормированияРеализаций_"+ЭлементСтруктуры.Ключ, ЭлементыФормы[ЭлементСтруктуры.Ключ].Значение);
	КонецЦикла;

	СохранитьЗначение("ЗаказПокупателя_ФормаФормированияРеализаций_МакетРеализации", МакетРеализации);

КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

// Процедура - обработчик события "ПриИзменении" флажка "ПечататьРеализацию".
//
Процедура ПечататьРеализациюПриИзменении(Элемент)

	ПроверитьЗначенияРеквизитов();

КонецПроцедуры // ПечататьРеализациюПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка "ФормироватьСФ".
//
Процедура ФормироватьСФПриИзменении(Элемент)

	ПроверитьЗначенияРеквизитов();

КонецПроцедуры // ФормироватьСФПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка "ЗаписыватьРеализацию".
//
Процедура ЗаписыватьРеализациюПриИзменении(Элемент)

	ОткрыватьРеализацию = (ОткрыватьРеализацию ИЛИ Не ЗаписыватьРеализацию); // Хотя бы один из флагов должен быть включен, иначе действия не имеют смысла
	ПроверитьЗначенияРеквизитов();

КонецПроцедуры // ЗаписыватьРеализациюПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка "ОткрыватьРеализацию".
//
Процедура ОткрыватьРеализациюПриИзменении(Элемент)

	ЗаписыватьРеализацию = (ЗаписыватьРеализацию ИЛИ Не ОткрыватьРеализацию); // Хотя бы один из флагов должен быть включен, иначе действия не имеют смысла
	ПроверитьЗначенияРеквизитов();

КонецПроцедуры // ОткрыватьРеализациюПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка "ПроводитьРеализацию".
//
Процедура ПроводитьРеализациюПриИзменении(Элемент)

	ПроверитьЗначенияРеквизитов();

КонецПроцедуры // ПроводитьРеализациюПриИзменении()


мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
мМногоСкладов   = (УказаниеСкладов      = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
                   Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);

СтруктураНачальныхНастроек = Новый Структура;
СтруктураНачальныхНастроек.Вставить("ЗаписыватьРеализацию",        Истина);
СтруктураНачальныхНастроек.Вставить("ОткрыватьРеализацию",         Истина);
СтруктураНачальныхНастроек.Вставить("ПечататьРеализацию",          Ложь);
СтруктураНачальныхНастроек.Вставить("ПроводитьРеализацию",         Истина);
СтруктураНачальныхНастроек.Вставить("ФормироватьСФ",               Истина);
СтруктураНачальныхНастроек.Вставить("ОткрыватьСФ",                 Ложь);
СтруктураНачальныхНастроек.Вставить("ПечататьСФ",                  Ложь);
СтруктураНачальныхНастроек.Вставить("ПроводитьСФ",                 Истина);
СтруктураНачальныхНастроек.Вставить("ПоказыватьФорму",             Истина);
СтруктураНачальныхНастроек.Вставить("ПечататьРеализациюНаПринтер", Ложь);
СтруктураНачальныхНастроек.Вставить("ПечататьСФНаПринтер",         Ложь);
