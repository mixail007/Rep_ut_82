
Перем мЖирныйШрифт, мКурсивШрифт, мЖирныйКурсивШрифт;
//перем мЗачеркнутыйШрифт;

Перем мСписокЗаказов, мСписокОтгрузок, мТаблицаНаОтгрузке, мСписокКатегорий, ВремяОбновления, СписокДоговоровМенеджера;
перем минДата0, максДата0;

перем мСтатус;

//  Процедура печатает выбранный документ 
// Печатается та форма, которая была отпечатана при нажатии в документе кнопки
// печати по умолчанию
//
Процедура ДействияФормыДействиеПечать(Кнопка)

	Если ЭтаФорма.ЭлементыФормы.Список.ТекущаяСтрока = Неопределено тогда
		Возврат
	КонецЕсли;

	НапечататьДокументИзФормыСписка(ЭтаФорма.ЭлементыФормы.Список.ТекущаяСтрока.ПолучитьОбъект());

КонецПроцедуры // ДействиеПечать()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	Если ЭтаФорма.ЭлементыФормы.Список.ТекущаяСтрока = Неопределено тогда
		Возврат
	КонецЕсли;

	НапечататьДвиженияДокумента(ЭлементыФормы.Список.ТекущиеДанные.Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при выборе пункта подменю "Структура подчиненности" меню "Перейти".
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	Если ЭлементыФормы.Список.ТекущиеДанные = Неопределено тогда
		Возврат
	КонецЕсли;
	
	ПоказатьСтруктуруПодчиненностиДокумента(ЭтаФорма.ЭлементыФормы.Список.ТекущаяСтрока);
	
КонецПроцедуры

Процедура СписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
			 
	ОформлениеСтроки.Ячейки.Проверен.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.Проверен.ОтображатьТекст    = Ложь;
	ОформлениеСтроки.Ячейки.Проверен.ОтображатьФлажок   = Ложь;
	
//через реквизиты таблицы - намного быстрее	
	Если ЭлементыФормы.Список.Колонки.Проверен.Видимость тогда
	   ДанныеСтрокиПроверен = ДанныеСтроки.Проверен;
	иначе	   
		ДанныеСтрокиПроверен= ДанныеСтроки.ссылка.Проверен;
	КонецЕсли;
	Если ЭлементыФормы.Список.Колонки.Резерв.Видимость тогда
	   ДанныеСтрокиРезерв = ДанныеСтроки.Резерв;
	иначе	   
		ДанныеСтрокиРезерв= ДанныеСтроки.ссылка.Резерв;
	КонецЕсли;
	ДанныеСтрокиСогласован = ДанныеСтроки.Согласован;//всегда включена
	
	Если ДанныеСтрокиПроверен Тогда //НА ОТГРУЗКУ (проделен)
		
	    Если ДанныеСтрокиРезерв тогда //+++ 26.01.2015
		 	ОформлениеСтроки.Ячейки.Проверен.ИндексКартинки     = 1;// зел.кв. [ ]   Резерв "отлетает" влево... и Заказ нельзя отгружать... 
			ОформлениеСтроки.Шрифт = мЖирныйКурсивШрифт;
		Иначе
			ОформлениеСтроки.Ячейки.Проверен.ИндексКартинки     = 3;// зел.кв. [v]  //зеленый и к отгрузке...
			ОформлениеСтроки.Шрифт = мЖирныйШрифт;
    	КонецЕсли;	
		
	Иначе //Не проделен ([ ]К Отгрузке)
		
		Если ЭлементыФормы.Список.Колонки.Статус.Видимость тогда //17.05.2017
			Статус1 = ДанныеСтроки.Статус;
		иначе
			Статус1 = ДанныеСтроки.ссылка.Статус;
		КонецЕсли;
		
		Если Статус1 = перечисления.СтатусыЗаказов.ВОбработке тогда  //11.01.2016		
			ОформлениеСтроки.Ячейки.Проверен.ИндексКартинки   = 0; //серый [?]
		Иначе
			Если ДанныеСтрокиСогласован тогда //+++ 26.01.2015
			 ОформлениеСтроки.Ячейки.Проверен.ИндексКартинки     = 4; //красн.кв. [v]   Согласован  значит будет проделен автоматически...
			Иначе
			 ОформлениеСтроки.Ячейки.Проверен.ИндексКартинки     = 2; //красн.кв. [ ]
		 	КонецЕсли;
		КонецЕсли;
		
		Если ДанныеСтрокиРезерв тогда //+++ 26.01.2015
			ОформлениеСтроки.Шрифт = мКурсивШрифт;
	    КонецЕсли;
 	КонецЕсли;
	
КонецПроцедуры


Функция ПроверитьЗакрытиеЗаказа(СсылкаЗаказНомер)
	
	возврат (мСписокЗаказов.Получить(СсылкаЗаказНомер)=Неопределено);  //+++ 12.07.2016 - по соответствию!
		
КонецФункции

Функция ПроверитьОтгрузкуПоЗаказу(СсылкаЗаказНомер)
	
	возврат НЕ (мСписокОтгрузок.Получить(СсылкаЗаказНомер)=Неопределено); //+++ 12.07.2016 
	
КонецФункции

//+++ 25.11.2016 
Функция ПроверитьКатегориюПоЗаказу(СсылкаЗаказНомер)
	
	резКат = мСписокКатегорий.Получить(СсылкаЗаказНомер); 
		
	возврат резКат;
	
КонецФункции

Функция ПроверитьЗаказНаОтгрузке(СсылкаЗаказНомер)
	
	рез = 0;
	
//Если СсылкаЗаказ.Проведен И СсылкаЗаказ.Проверен тогда //только заказы К отгрузке могут быть в резерве
	стр1 = мТаблицаНаОтгрузке.Найти(СсылкаЗаказНомер, "ЗаказПокупателяНомер");
	Если стр1<>Неопределено Тогда
		рез = стр1.Процент;
	КонецЕсли;	
//КонецЕсли;

	возврат рез;
	
КонецФункции


Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	//+++ 05.10.2011 - на основе универсального журнала 
	//СтандартнаяОбработка = ложь; 
	//форма1 = Обработки.ДревовидныйЖурналДокументов.ПолучитьФорму("ОсновнаяФорма");
	//форма1.Открыть();
	//Отказ = Истина; // не открывать текущий журнал
мСтатус = ОбменСУТИнтернетМагазин.ЗаполнитьСоответствияСтатусовЗаказов();
КонецПроцедуры

Процедура ПриОткрытии()
	
	//+++  24.04.2012  для всех - 2 месяца (до 3х)!
		Отбор.Дата.видСравнения = видСравнения.Интервал;
		
		//+++ 01.08.2012 - для отдельных пользователей - другая дата!
		ДатаНачОтчетов = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяДатаНачалаОтчетов");
		Если ДатаНачОтчетов <>'00010101' тогда
			Отбор.Дата.значениеС  =ДатаНачОтчетов;
		иначе
			Отбор.Дата.значениеС  = ДобавитьМесяц(НачалоМесяца(ТекущаяДата()),-3);
		КонецЕсли;	
			Отбор.Дата.значениеПо = КонецДня(ТекущаяДата());
  			Отбор.Дата.Использование = истина;

			
	//+++ 06.10.2014 - отбор общий как во всех документах!		
	УстановитьОтборВЖурналеДокументов(ДокументСписок.Отбор, ЭлементыФормы.Список);
		
	ВремяОбновления = ТекущаяДата();	

	//+++ обязательные столбцы - включаем принудительно!
	ЭлементыФормы.Список.Колонки.Статус.видимость = истина;
	ЭлементыФормы.Список.Колонки.ДоговорКонтрагента.видимость = истина;
//	ЭлементыФормы.Список.Колонки.Менеджер.видимость = ЛОЖЬ;
	ЭлементыФормы.Список.Колонки.Ответственный.видимость = истина;
	ЭлементыФормы.Список.Колонки.Согласован.Видимость = истина;
	ЭлементыФормы.Список.Колонки.Проведен.Видимость = истина;
 	ЭлементыФормы.Список.Колонки.ПометкаУдаления.Видимость = истина;
	
  	ЭлементыФормы.Список.Колонки.Резерв.видимость = истина;

	
	//+++ 20.04.2015 - расцветка первичных заказов - ДЛЯ ВСЕХ!
	//Если РольДоступна("ПравоЗавершенияРаботыПользователей") 
	//	или глТекущийПользователь.ОсновноеПодразделение.ОбособленноеПодразделение  //для филиалов
	//	или Найти(глТекущийПользователь.НаправлениеПродаж.наименование, "Филиал")>0 //для менеджеров по продажам, которые работают с филиалами
	//	тогда 
	//	ЭлементыФормы.условиеПоискаПоСхеме.Видимость = истина;
	//КонецЕсли;
	
	Если Найти(глТекущийПользователь.Наименование,"Малышев") = 0 и Найти(глТекущийПользователь.Наименование,"Плотников") = 0 Тогда
		ЭлементыФормы.ДействияФормы.Кнопки.ДопОтчеты.Доступность = Ложь;
	КонецЕсли;
	
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОграниченныйИнтерфейс") = Истина Тогда
		Элементыформы.ДействияФормы.Кнопки.Удалить(Элементыформы.ДействияФормы.Кнопки.Отчеты);
		Элементыформы.ДействияФормы.Кнопки.Удалить(Элементыформы.ДействияФормы.Кнопки.ДопОтчеты);
		Элементыформы.ДействияФормы.Кнопки.Удалить(Элементыформы.ДействияФормы.Кнопки.ТолькоСвои);
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	НЕ ДоговорыКонтрагентов.Наименование ПОДОБНО ""%*%""
		|	И 99 = 99
		|	И 98 = 98
		|	И ДоговорыКонтрагентов.Организация = &Организация";
		
		Запрос.УстановитьПараметр("Организация",Справочники.Организации.НайтиПоКоду("00001"));	
		
		Если Отбор["ДокументыПоДоговоруКонтрагента"].Использование  = Истина Тогда
			СписокДоступныхДоговоров =Отбор["ДокументыПоДоговоруКонтрагента"].Значение; 
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"99 = 99","ДоговорыКонтрагентов.Ссылка В(&СписокДоговоров)");	
			Запрос.УстановитьПараметр("СписокДоговоров",СписокДоступныхДоговоров);	
		КонецЕсли;
		Если Отбор["ДокументыПоКонтрагенту"].Использование  = Истина Тогда
			СписокДоступныхКонтрагентов =Отбор["ДокументыПоКонтрагенту"].Значение; 
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"98 = 98","ДоговорыКонтрагентов.Владелец В(&СписокКонтрагентов)");	
			Запрос.УстановитьПараметр("СписокКонтрагентов",СписокДоступныхКонтрагентов);	
		КонецЕсли;
		Результат = Запрос.Выполнить().Выгрузить();
		СписокДоговоровМенеджера = Новый СписокЗначений;
		СписокДоговоровМенеджера.ЗагрузитьЗначения(Результат.ВыгрузитьКолонку("Ссылка"));
		Отбор["ДокументыПоДоговоруКонтрагента"].Использование = Истина;
		Отбор["ДокументыПоДоговоруКонтрагента"].ВидСравнения = ВидСравнения.ВСписке;
		Отбор["ДокументыПоДоговоруКонтрагента"].Значение = СписокДоговоровМенеджера;
		ЭлементыФормы.Список.НастройкаОтбора["ДокументыПоДоговоруКонтрагента"].Доступность = Ложь;
		
		
		Отбор["Подразделение"].Использование = Ложь;
		Отбор["Подразделение"].ВидСравнения = ВидСравнения.Равно;
		Отбор["Подразделение"].Значение = Справочники.Подразделения.ПустаяСсылка() ;
		ЭлементыФормы.Список.НастройкаОтбора["Подразделение"].Доступность = Ложь;
		
	конецесли;	
	

	
КонецПроцедуры

//+++ 30.03.2015 ------ тут временная таблица только тормозит... выборка 20-40 документов-----------------------------------------------
Процедура ПеречитатьСписокЗаказов(МассивЗаказов=неопределено, минДата='20161101', максДата='20161231')
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	//| РАЗЛИЧНЫЕ
				 |	ЗаказыПокупателейОстатки.ЗаказПокупателя.Номер КАК ЗаказПокупателяНомер
				 |ИЗ
				 |	РегистрНакопления.ЗаказыПокупателей.Остатки(//&ТекДата
				 |	, ЗаказПокупателя.Дата между &минДата и &максДата 
				 |	И ЗаказПокупателя.Номер В (&МассивЗаказов)  
				 |											   ) КАК ЗаказыПокупателейОстатки
				 //|ГДЕ ЗаказыПокупателейОстатки.КоличествоОстаток<>0
				 //|	или ЗаказыПокупателейОстатки.СуммаУпрОстаток<>0
				 |";    
		Запрос.УстановитьПараметр("МассивЗаказов",массивЗаказов);  // только видимые заказы
		Запрос.УстановитьПараметр("минДата", минДата );
		Запрос.УстановитьПараметр("максДата",максДата );
	
	результат = Запрос.Выполнить();
	
	мСписокЗаказов = новый Соответствие;
	масЗаказов=результат.Выгрузить().ВыгрузитьКолонку("ЗаказПокупателяНомер");  //МАССИВ!
	для i=0 по масЗаказов.Количество()-1 цикл
		мСписокЗаказов.Вставить(масЗаказов[i], 1);
	КонецЦикла;
	
 КонецПроцедуры	
 
 //+++ 08.12.2011  по регистру - быстрее  ---------------------------------------------------------------------
процедура ПеречитатьСписокОтгрузок(массивЗаказов, минДата='20160101', максДата='20161231')
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	зак.Ссылка.Номер КАК ЗаказНомер,
	|	зак.Ссылка КАК Заказ
	|ПОМЕСТИТЬ ВТ_Заказы
	|ИЗ
	|	Документ.ЗаказПокупателя КАК зак
	|ГДЕ
	|	зак.Номер В (&МассивЗаказов)
	|	И зак.Дата между &минДата И &максДата
	|	И зак.Проведен
	//|	И зак.Проверен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПродажиОбороты.ЗаказПокупателя.Номер КАК ЗаказПокупателяНомер,
	|	ПродажиОбороты.КоличествоОборот КАК СуммаПродаж
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(&минДата,,,
	|			ЗаказПокупателя В (ВЫБРАТЬ Зак.Заказ
	|				         ИЗ ВТ_Заказы как Зак)
	|) КАК ПродажиОбороты
	//|ГДЕ
	//|	ПродажиОбороты.КоличествоОборот <> 0
	|
	| ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВнутренниеЗаказыОбороты.ВнутреннийЗаказ.ДокументОснование.Номер,
	|	СУММА(1)
	|ИЗ
	|	РегистрНакопления.ВнутренниеЗаказы.Обороты(
	|			&минДата,
	|			,
	|			,
	|			ВнутреннийЗаказ.ДокументОснование В
	|				(ВЫБРАТЬ
	|					Зак.Заказ
	|				ИЗ
	|					ВТ_Заказы КАК Зак)) КАК ВнутренниеЗаказыОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВнутренниеЗаказыОбороты.ВнутреннийЗаказ.ДокументОснование.Номер
	|;
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Заказы
	|";
	//только если реализация проведена - !
	Запрос.УстановитьПараметр("МассивЗаказов", массивЗаказов);
	Запрос.УстановитьПараметр("минДата", минДата);  //продажа не раньше?! заказа
	Запрос.УстановитьПараметр("максДата",максДата );
	результат = Запрос.Выполнить();
	
	мСписокОтгрузок = новый Соответствие;
	таблОтгрузок   = результат.Выгрузить(); //	.ВыгрузитьКолонку("ЗаказПокупателяНомер");
	для каждого стр1 из таблОтгрузок цикл
		мСписокОтгрузок.Вставить(стр1.ЗаказПокупателяНомер, стр1.СуммаПродаж);
	КонецЦикла;
	
	//#КонецЕсли
КонецПроцедуры

//+++ 20.04.2013 -----------------------------------------------------------------------------------------
Процедура ПеречитатьСписокНаОтгрузке(массивЗаказов, минДата='20161101', максДата='20161231')
 	Запрос = Новый Запрос;
	Запрос.Текст = "
				   |ВЫБРАТЬ
				   |	зак.Ссылка.Номер КАК ЗаказНомер,
				   |	зак.Ссылка КАК Заказ
				   |ПОМЕСТИТЬ ВТ_Заказы
				   |ИЗ
				   |	Документ.ЗаказПокупателя КАК зак
				   |ГДЕ
				   |	зак.Номер В (&МассивЗаказов)
				   |	и зак.Дата >= &минДата И зак.Дата <= &максДата
				   //|	И зак.Проверен
					|	И зак.Проведен
				   |;

				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ 
				   //РАЗЛИЧНЫЕ
				   |	РезервНаСкладах.ЗаказПокупателя.Номер КАК ЗаказПокупателяНомер,
				   |	ВЫБОР
				   |		КОГДА ЕстьNull(ЗаказыПокупателейОстатки.КоличествоОстаток,0) > 0
				   |			ТОГДА ВЫРАЗИТЬ(100 * РезервНаСкладах.КоличествоОстаток / ЗаказыПокупателейОстатки.КоличествоОстаток КАК ЧИСЛО(4, 0))
				   |		ИНАЧЕ ВЫБОР
				   |				КОГДА РезервНаСкладах.КоличествоОстаток > 0
				   |					ТОГДА 200
				   |				ИНАЧЕ 0
				   |			КОНЕЦ
				   |	КОНЕЦ КАК Процент
				   |ИЗ
				   |	РегистрНакопления.РезервНаСкладах.Остатки( ,
				   |			ЗаказПокупателя В (ВЫБРАТЬ Зак.Заказ
				   |								ИЗ ВТ_Заказы как Зак)
				   |) КАК РезервНаСкладах
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки( , 
				   | Номенклатура.Услуга=ЛОЖЬ И
				   |				ЗаказПокупателя В (ВЫБРАТЬ зак.Заказ
				   |					ИЗ  ВТ_Заказы как Зак) 
				   |							) КАК ЗаказыПокупателейОстатки
				   |		ПО РезервНаСкладах.ЗаказПокупателя = ЗаказыПокупателейОстатки.ЗаказПокупателя
				   //|ГДЕ
				   //|	РезервНаСкладах.КоличествоОстаток <> 0
				   |
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   
				   |УНИЧТОЖИТЬ ВТ_Заказы
			   		|	";
	Запрос.УстановитьПараметр("МассивЗаказов", массивЗаказов);
	Запрос.УстановитьПараметр("минДата",минДата);
	Запрос.УстановитьПараметр("максДата",максДата );
//	Запрос.УстановитьПараметр("ТекДата",КонецДня(ТекущаяДата()) );
	результат = Запрос.Выполнить();
	мТаблицаНаОтгрузке = результат.Выгрузить();
	
КонецПроцедуры


//14.11.2016 ------------ЕДИНАЯ ФУНКЦИЯ запроса по заказам-----------------
функция ПолучитьВТ(массивЗаказов, минДата='20161101', максДата='20161231')
		запрос0 = новый Запрос;
		запрос0.Текст = "ВЫБРАТЬ Зак.Ссылка как Заказ,
						|Зак.Номер как Номер
						|ПОМЕСТИТЬ ВТ_Заказы
		                |ИЗ
		                |	Документ.ЗаказПокупателя КАК Зак
						|ГДЕ зак.Дата между &минДата и &максДата
						|и зак.Номер в (&массивЗак)
						|;
						|/////////////////////////////////////
						|";
	если минДата>максДата тогда //20.03.2017
	максДата1 = максДата; 	максДата  = минДата;
	минДата = максДата1;
	КонецЕсли;
		запрос0.УстановитьПараметр("минДата",минДата); 				
		запрос0.УстановитьПараметр("максДата",максДата); 
		запрос0.УстановитьПараметр("массивЗак", массивЗаказов);
		
		менВТ = Новый МенеджерВременныхТаблиц;
		запрос0.МенеджерВременныхТаблиц = менВТ;
		запрос0.Выполнить();
возврат менВТ;
КонецФункции

//14.11.2016 ------------оптимизированная функция--------------------------------
Процедура ПеречитатьСписокЗаказовВТ(менВТ)
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = менВТ;
	Запрос.Текст="ВЫБРАТЬ
	           //  |	ЗаказыПокупателейОстатки.ЗаказПокупателя.Номер КАК ЗаказНомер
			   |Заказы.Номер как ЗаказНомер
	             |ИЗ
	             |	РегистрНакопления.ЗаказыПокупателей.Остатки(//&ТекДата
			   	 | , ЗаказПокупателя В (ВЫБРАТЬ Зак.Заказ
				 |				         ИЗ ВТ_Заказы как Зак)  ) КАК ЗаказыПокупателейОстатки
				 	 |ЛЕВОЕ СОЕДИНЕНИЕ
				   |(ВЫБРАТЬ Зак.Номер, Зак.Заказ ИЗ ВТ_Заказы как Зак) как Заказы
				   |ПО ЗаказыПокупателейОстатки.ЗаказПокупателя = заказы.Заказ
 				 |";    //самые свежие вначале
	результат = Запрос.Выполнить();
	
	мСписокЗаказов = новый Соответствие;
	таблОтгрузок   = результат.Выгрузить(); //	.ВыгрузитьКолонку("ЗаказПокупателяНомер");
	для каждого стр1 из таблОтгрузок цикл
		мСписокЗаказов.Вставить(стр1.ЗаказНомер, 1);
	КонецЦикла;
 	
 КонецПроцедуры	
 
//14.11.2016---------------------------------------------------------------------
процедура ПеречитатьСписокОтгрузокВТ( МенВТ, минДата)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = менВТ;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПродажиОбороты.ЗаказПокупателя
	               |ПОМЕСТИТЬ Обороты
	               |ИЗ
	               |	РегистрНакопления.Продажи.Обороты(
	               |			&минДата,
	               |			,
	               |			,
	               |			ЗаказПокупателя В
	               |				(ВЫБРАТЬ
	               |					Зак.Заказ
	               |				ИЗ
	               |					ВТ_Заказы КАК Зак)) КАК ПродажиОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВнутренниеЗаказыОбороты.ВнутреннийЗаказ.ДокументОснование
	               |ИЗ
	               |	РегистрНакопления.ВнутренниеЗаказы.Обороты(
	               |			&минДата,
	               |			,
	               |			,
	               |			ВнутреннийЗаказ.ДокументОснование В
	               |				(ВЫБРАТЬ
	               |					Зак.Заказ
	               |				ИЗ
	               |					ВТ_Заказы КАК Зак)) КАК ВнутренниеЗаказыОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Заказы.Номер КАК ЗаказНомер
	               |ИЗ
	               |	Обороты КАК Обороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			Зак.Номер КАК Номер,
	               |			Зак.Заказ КАК Заказ
	               |		ИЗ
	               |			ВТ_Заказы КАК Зак) КАК Заказы
	               |		ПО Обороты.ЗаказПокупателя = Заказы.Заказ";
	//только если реализация проведена - в тот же день как и заказ!
	Запрос.УстановитьПараметр("минДата", НачалоДня(минДата)  );
	результат = Запрос.Выполнить();             // среднее доля снижена с 60-70% до 25-35% и время отбора уменьшено до 0.01 сек
	
	мСписокОтгрузок = новый Соответствие;
	таблОтгрузок   = результат.Выгрузить(); //	.ВыгрузитьКолонку("ЗаказПокупателяНомер");
	для каждого стр1 из таблОтгрузок цикл
		мСписокОтгрузок.Вставить(стр1.ЗаказНомер, 1);
	КонецЦикла;
	
	//#КонецЕсли
КонецПроцедуры

//14.11.2016 --------------------------------------------------------------------
Процедура ПеречитатьСписокНаОтгрузкеВТ(менВТ)
 	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = менВТ;
	Запрос.Текст = "ВЫБРАТЬ 
	               |	заказы.Номер КАК ЗаказПокупателяНомер,
	               |	ВЫБОР
	               |		КОГДА ЕстьNull(ЗаказыПокупателейОстатки.КоличествоОстаток,0) > 0
	               |			ТОГДА ВЫРАЗИТЬ(100 * РезервНаСкладах.КоличествоОстаток / ЗаказыПокупателейОстатки.КоличествоОстаток КАК ЧИСЛО(4, 0))
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА РезервНаСкладах.КоличествоОстаток > 0
	               |					ТОГДА 200
	               |				ИНАЧЕ 0
	               |			КОНЕЦ
	               |	КОНЕЦ КАК Процент
	               |ИЗ
	               |	РегистрНакопления.РезервНаСкладах.Остатки( ,
				   |			ЗаказПокупателя В (ВЫБРАТЬ Зак.Заказ
				   |								ИЗ ВТ_Заказы как Зак)
				   |) КАК РезервНаСкладах
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки( , 
				   | Номенклатура.Услуга=ЛОЖЬ И
	               |				ЗаказПокупателя В (ВЫБРАТЬ зак.Заказ
				   |					ИЗ  ВТ_Заказы как Зак) 
				   |							) КАК ЗаказыПокупателейОстатки
	               |		ПО РезервНаСкладах.ЗаказПокупателя = ЗаказыПокупателейОстатки.ЗаказПокупателя
				   |ЛЕВОЕ СОЕДИНЕНИЕ
				   |(ВЫБРАТЬ Зак.Номер, Зак.Заказ ИЗ ВТ_Заказы как Зак) как Заказы
				   |ПО ЗаказыПокупателейОстатки.ЗаказПокупателя = заказы.Заказ
|";
	результат = Запрос.Выполнить();
	мТаблицаНаОтгрузке = результат.Выгрузить();
	
КонецПроцедуры

//25.11.2016
 процедура ПеречитатьСписокПоКатегориямВТ(менВТ, минДата, максДата)
	 
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = менВТ;
	//через Выразить работает быстрее
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(КатегорииОбъектов.Объект КАК Документ.ЗаказПокупателя).Номер КАК ЗаказНомер,
	               |	ПРЕДСТАВЛЕНИЕ(КатегорииОбъектов.Категория) КАК Категория
	               |ИЗ
	               |	РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
	               |ГДЕ
	               |	КатегорииОбъектов.Объект В
	               |			(ВЫБРАТЬ
	               |				Зак.Заказ
	               |			ИЗ
	               |				ВТ_Заказы КАК Зак)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаказыМаршруты.ЗаказПокупателя.Номер,
	               |	ЗаказыМаршруты.Маршрут.Наименование
	               |ИЗ
	               |	РегистрСведений.ЗаказыМаршруты КАК ЗаказыМаршруты
	               |ГДЕ
	               |	ЗаказыМаршруты.ЗаказПокупателя В
	               |			(ВЫБРАТЬ
	               |				Зак.Заказ
	               |			ИЗ
	               |				ВТ_Заказы КАК Зак)
	               |	И ЗаказыМаршруты.Маршрут <> ЗНАЧЕНИЕ(Справочник.НовМаршруты.ПустаяСсылка)";
	Запрос.УстановитьПараметр("минДата", минДата); //27.12.2016 для ускорения запроса
	Запрос.УстановитьПараметр("максДата", максДата); 
	
	результат = Запрос.Выполнить();
	//выборкаКатегорий   = результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
	выборкаКатегорий   = результат.Выбрать();
	
	мСписокКатегорий = новый Соответствие; //так быстрее ищет
	Пока выборкаКатегорий.Следующий() цикл
		//	выборка = выборкаКатегорий.Выбрать();
		категория1 = выборкаКатегорий.Категория;//первая попавшаяся категория
		ном1 = СокрЛП(выборкаКатегорий.ЗаказНомер);
		кат1 = мСписокКатегорий.Получить(ном1);
		Если кат1=неопределено тогда
			мСписокКатегорий.Вставить(ном1, категория1);
		Иначе  //крайне редко 2 и более категории сразу
			мСписокКатегорий.Удалить(ном1);
			кат1= кат1+", " + Строка(категория1);
			мСписокКатегорий.Вставить(ном1, кат1);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


Процедура СписокПриПолученииДанных(Элемент, ОформленияСтрок)
	
	//   менВидимость = ЭлементыФормы.Список.Колонки.Менеджер.Видимость;
	
	//еще раз вкл. принудительно!
	СтатусВидимость = ЭлементыФормы.Список.Колонки.Статус.видимость;   // так намного быстрее!
	ЭлементыФормы.Список.Колонки.Статус.видимость = истина;
	
	ЭлементыФормы.Список.Колонки.ДоговорКонтрагента.видимость = истина;
	//ЭлементыФормы.Список.Колонки.Менеджер.видимость = ЛОЖЬ;
	ЭлементыФормы.Список.Колонки.Ответственный.видимость   = истина;
	ЭлементыФормы.Список.Колонки.Согласован.Видимость      = истина;
	ЭлементыФормы.Список.Колонки.Проведен.Видимость        = истина;
	ЭлементыФормы.Список.Колонки.ПометкаУдаления.Видимость = истина;
	
	//28.03.2018 - обязательно должны быть видны!
	ЭлементыФормы.Список.Колонки.Проверен.Видимость	    = Истина;	
	ЭлементыФормы.Список.Колонки.ДатаОтгрузки.Видимость	= Истина;	
	
	
	КатегорияВидна = ЭлементыФормы.Список.Колонки.Категория.Видимость;//28.11.2016
	
	 //+++( 08.11.2011  - ограничение по дате начала журнала на 3 мес. назад!
	 Если НЕ РольДоступна("ПолныеПрава") тогда
		 
		Дата0 = ДобавитьМесяц(НачалоМесяца(ТекущаяДата()),-3);

		 Если Отбор.Дата.видСравнения = видСравнения.МеньшеИлиРавно тогда
			Отбор.Дата.значениеС = Дата0;//'20120101';
		КонецЕсли;	
		Отбор.Дата.значениеПо = КонецДня(ТекущаяДата());//+++ 06.09.2012
		
		Отбор.Дата.видСравнения = видСравнения.Интервал;


	 //+++ 01.08.2012 - для отдельных пользователей - другая дата ограничения!
		ДатаНачОтчетов = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяДатаНачалаОтчетов");
		Если ЗначениеЗаполнено(ДатаНачОтчетов) тогда
			Если Отбор.Дата.значениеС < ДатаНачОтчетов тогда
				 //Сообщить("Доступ к журналу ""Заказов покупателя"" для просмотра ограничен. Минимальная дата: "+Формат(ДатаНачОтчетов,"ДЛФ=DD"));
			     Отбор.Дата.значениеС  = ДатаНачОтчетов;
		 	 КонецЕсли;
		Иначе
			Если НЕ ЗначениеЗаполнено(Отбор.Дата.значениеС) тогда // если Null или неопределено
				Отбор.Дата.значениеС = Дата0;	
			КонецЕсли;
			
			Если Отбор.Дата.значениеС < Дата0 тогда
				 //Сообщить("Доступ к журналу ""Заказов покупателя"" для просмотра ограничен. Минимальная дата: "+Формат(Дата0,"ДЛФ=DD"));
			     Отбор.Дата.значениеС  = Дата0;
		 	 КонецЕсли;
		 КонецЕсли;	 
       	Отбор.Дата.Использование = истина;
	
	КонецЕсли;	
	
	Если Отбор.Дата.ЗначениеПо<Отбор.Дата.ЗначениеС тогда
		Отбор.Дата.ЗначениеПо = КонецДня(Отбор.Дата.ЗначениеС);
	КонецЕсли;	
	//+++)
	
//===========================================================================================================	
	 	//+++ 08.12.2011    только по видимой части которая заново прорисована
		массивЗаказов = новый массив;
	//+++ Надо список заказов!	12.07 - 22.07.2016 не надо было
	    Для Каждого Строка Из ОформленияСтрок Цикл
	    	Если Строка.ДанныеСтроки.Проведен тогда //+++ 17.11.2014 - ТОЛЬКО проведенные документы!
	    		массивЗаказов.Добавить(Строка.ДанныеСтроки.Номер); //+++ 20.11.2014 - ссылка заменена на Номер... 
	    	КонецЕсли;
	  КонецЦикла;		
		
			
	//21.07.2016---------при любом изменении... перечитываем по небольшому списку-----	
		Состояние("Идет чтение состояния "+строка(массивЗаказов.Количество())+" заказов..."); 
		минДата  = ОформленияСтрок[0].ДанныеСтроки.Дата;  // все отгрузки и Задания на отгрузку должны быть НЕ РАНЬШЕ чем заказы 
		максДата = ОформленияСтрок[ОформленияСтрок.Количество()-1].ДанныеСтроки.Дата; //+++ 13.01.2015
		
	  
//+++( 14.11.2016 --- единый список заказов для 3 запросов в виде ВременнойТаблицы --- "ускоряет" в 2-3 раза---
////было		
	  //  ПеречитатьСписокЗаказов(массивЗаказов, минДата, максДата); //чтобы попадали новые закрытые заказы!
	  //  ПеречитатьСписокОтгрузок(массивЗаказов, минДата, максДата);
	  //  ПеречитатьСписокНаОтгрузке(массивЗаказов, минДата, максДата);
	  менВТ = получитьВТ(массивЗаказов, минДата, максДата);
		ПеречитатьСписокЗаказовВТ( менВТ ); //чтобы попадали новые закрытые заказы!
	 	ПеречитатьСписокОтгрузокВТ( менВТ, минДата );
		ПеречитатьСписокНаОтгрузкеВТ( менВТ );
		
	//+++ 25.11.2016 ---- расцветка заказов с установленной категорией --- 
		ПеречитатьСписокПоКатегориямВТ( менВТ, минДата, максДата );
	
		ВремяОбновления = ТекущаяДата();
		//минДата0 = минДата; 
		//максДата0= максДата;

//+++ 13.12.2016 +++++++ подготовка полей для определения Условия для расскраски заказов по статусам +++++++++
	Если условиеПоискаПоСхеме тогда //гибридная схема расскраски
		
		флНов = истина; //19.12.2016 - 2 схемы  
		
		Если флНов тогда
			списЗак = новый СписокЗначений;
			Для Каждого Строка Из ОформленияСтрок Цикл
				списЗак.Добавить( Строка.ДанныеСтроки.ссылка );
			КонецЦикла;	
			статусы = ОбменСУТИнтернетМагазин.ПолучитьСтатусыЗаказов(списЗак);
		КонецЕсли;
	
		Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
			Если флНов тогда
				стрСтат = статусы.найти( ОформлениеСтроки.ДанныеСтроки.ссылка, "Заказ");
			Иначе
				стрСтат = ОбменСУТИнтернетМагазин.ПолучитьСтатусЗаказаПоСхеме( ОформлениеСтроки.ДанныеСтроки.ссылка); // в лоб!
			КонецЕсли;
		
			Если стрСтат=неопределено тогда 
			 кодСтатуса = 0;
			иначе	 
				Если флНов тогда
				кодСтатуса = стрСтат.Статус;
				иначе кодСтатуса = Число(лев(стрСтат,2));
				КонецЕсли;
		 	КонецЕсли;
			
			ОформлениеСтроки.Ячейки.Статус.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.Статус.Текст = мСтатус.найти(кодСтатуса,"Статус").СтатусРасшифровка; // 12.04.2017
			
		   Если кодСтатуса = 3 тогда // Удален или Закрыт
			   ОформлениеСтроки.ЦветФона = WebЦвета.СветлоСерый;
			   
		   ИначеЕсли кодСтатуса = 4 тогда  //отгружен полностью
			   ОформлениеСтроки.ЦветФона = WebЦвета.СветлоСерый;
		   	 	ОформлениеСтроки.ЦветТекста = WebЦвета.Синий;
			ИначеЕсли кодСтатуса = 5 тогда //частично отгружен
		   	   ОформлениеСтроки.ЦветФона = WebЦвета.Белый;
			   ОформлениеСтроки.ЦветТекста = WebЦвета.Синий;
				
			ИначеЕсли кодСтатуса = 6 тогда //Доставлен на склад -СветлоГолубой (аналог закрытого заказа)
		   		ОформлениеСтроки.ЦветФона = WebЦвета.ЦианСветлый;
			ИначеЕсли кодСтатуса = 7 тогда //В Пути             - ярко синий цвет       
		  		ОформлениеСтроки.ЦветФона = WebЦвета.СветлоНебесноГолубой;
		

			ИначеЕсли кодСтатуса = 8 тогда  //на отгрузке полностью
			   ОформлениеСтроки.ЦветФона = WebЦвета.НейтральноЗеленый;
			ИначеЕсли кодСтатуса =9 тогда  //на отгрузке частично
			   ОформлениеСтроки.ЦветФона = WebЦвета.светлоРозовый; // недогруз! 
		  	ИначеЕсли кодСтатуса =10 тогда //на отгрузке подготовка или подготовка к реализации
			   ОформлениеСтроки.ЦветФона = WebЦвета.СветлоЖелтый; // уже начата отгрузка! 
			   
		   	ИначеЕсли кодСтатуса =11 тогда  //на перемещении полностью  ЯРКО-ЗЕЛЕНЫЙ
			   ОформлениеСтроки.ЦветФона = WebЦвета.ВесеннеЗеленый;
			ИначеЕсли кодСтатуса =12 тогда  //на перемещении частично    ЯРКО-ОРАНЖЕВЫЙ
			   ОформлениеСтроки.ЦветФона = WebЦвета.ТемноОранжевый; // недогруз! 
		  	ИначеЕсли кодСтатуса =13 тогда //на перемещении подготовка или подготовка к реализации
			   ОформлениеСтроки.ЦветФона = WebЦвета.Желтый; //  ЯРКО-ЖЕЛТЫЙ
		    ИначеЕсли кодСтатуса =14 тогда //Перемещение выполнено - ничего больше не надо делать!
				ОформлениеСтроки.ЦветФона = WebЦвета.СветлоНебесноГолубой; // светло-синий
			КонецЕсли; 
        КонецЦикла;
		
	//возврат;	
	КонецЕсли;//условие раскраски заказов	по статусам
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 				
		Состояние("Идет формирование списка "+строка(ОформленияСтрок.Количество())+" заказов...");

		КоличествоСтрок = 0;
		ПустойСтатус = перечисления.СтатусыЗаказов.ПустаяСсылка();
		КонстСторПост = Константы.ИспользоватьОстаткиСтороннихПоставщиков.Получить()
						или константы.ИспользоватьДележкуЗаказовВМинус.Получить();   // 16.11.2016 - такая же расцветка
		
	 Для Каждого Строка Из ОформленияСтрок Цикл
		 
		 док1 = Строка.ДанныеСтроки.Номер;//+++ 20.11.2014 - ссылка заменена на Номер... 
		 Если СтатусВидимость тогда
		 	док1статус = Строка.ДанныеСтроки.Статус;	 
		 иначе // быть такого не должно!!!
			 док1статус = ПустойСтатус; //17.05.2017
		 КонецЕсли;	
		 
		
	//+++( 10.07.2014  - расцветка по статусу при заказе у стороннего поставщика!
	Если КонстСторПост 
		и (док1статус<>ПустойСтатус) тогда
		
//---------------статусы сторонних поставщиков------------------------------------------------		
	   Если док1статус = перечисления.СтатусыЗаказов.ПодтвержденПокупателем тогда
	   		Строка.ЦветФона = WebЦвета.СветлоЖелтый;   //желтый
			
		ИначеЕсли док1статус = перечисления.СтатусыЗаказов.ВОбработке тогда
			Строка.ЦветФона = WebЦвета.СветлоНебесноГолубой; // темно-голубой
			
		ИначеЕсли  док1статус = перечисления.СтатусыЗаказов.Подтвержден 
					или док1статус = перечисления.СтатусыЗаказов.ЧастичноПодтвержен  тогда
			Строка.ЦветФона = WebЦвета.БледноБирюзовый; // голубой
		
		ИначеЕсли док1статус = перечисления.СтатусыЗаказов.ПолученЧастично тогда
			Строка.ЦветФона = WebЦвета.Роса; // бледно-зеленый
			
		ИначеЕсли  док1статус = перечисления.СтатусыЗаказов.Получен тогда
			Строка.ЦветФона = WebЦвета.Белый; // КАК ОБЫЧНЫЙ ЗАКАЗ!
		
		ИначеЕсли док1статус = перечисления.СтатусыЗаказов.Отменен 
					и Строка.ДанныеСтроки.Проведен тогда
			Строка.ЦветФона = WebЦвета.Сливовый; //требует удаления!  
//---------------------------------------------------------------------------------------------

	   	ИначеЕсли НЕ   (док1статус=перечисления.СтатусыЗаказов.Получен 
		   			или док1статус=перечисления.СтатусыЗаказов.ПолученЧастично )
		   тогда
		   	   Если Строка.ДанныеСтроки.Согласован тогда 
			   		Строка.ЦветФона = WebЦвета.Кремовый;  // все статусы 1 цвет - означает в работе с поставщиком
			   иначе
	   			 	Строка.ЦветФона = WebЦвета.Пшеничный;
			   КонецЕсли;		
			КонецЕсли;

	КонецЕсли;
	//+++)

		Если ПроверитьЗакрытиеЗаказа(док1) Тогда
			
			Если Строка.ДанныеСтроки.Проведен 
				или Строка.ДанныеСтроки.ПометкаУдаления тогда 
				Строка.ЦветФона = WebЦвета.LightGray;
			//Иначе
				//новые НЕ проведенные документы - никак не красим!	
			КонецЕсли;
			
		Иначе //если не закрыт...
			
		//28.11.2016 --- показываем в отдельном столбце Категория----------
		рез = ПроверитьКатегориюПоЗаказу(док1);
		Если рез<>неопределено тогда
			Строка.ЦветФона = WebЦвета.Желтый;   //желтый!  
			Если  КатегорияВидна тогда
			Строка.ячейки.Категория.ОтображатьТекст = истина;
			Строка.ячейки.Категория.Текст = рез;
			КонецЕсли;
		Иначе //нет категории... в маршрут не попал
			
			//+++( 28.03.2018 --- Задача № 43333 - Фиолетовый цвет текста для Заказов, которые НЕ ПОПАДАЮТ В МАРШРУТ !
			Если Строка.ДанныеСтроки.Проведен 
				и Строка.ДанныеСтроки.Проверен 
				и Строка.ДанныеСтроки.ДатаОтгрузки = НачалоДня(ТекущаяДата())  //ТОЛЬКО сегодняшние!
				и Лев(Строка.ДанныеСтроки.Номер,2)="ТК" тогда
				
				контр1 = Строка.ДанныеСтроки.Контрагент; 			// Всегда виден
				
		//+++( 25.05.2018 - Дата документа или  установки ДатыОтгрузки!
			Дата1 = Строка.ДанныеСтроки.Дата;
			Если Контр1.АвтоматическиСтавитьВМаршрут тогда
				попытка //возможно зависание... на каждый заблокированный заказ
					датаТ = Строка.ДанныеСтроки.Ссылка.ДатаУстановкиВТерминалеКОтгрузке;
					если датаТ = '00010101' тогда//нет даты установки из терминала
						датаТ = Дата1; // Строка.ДанныеСтроки.Ссылка.ВремяНапоминания;  //последнее изменение... не только ДатаОтгрузки
					КонецЕсли;	
				исключение  //если заблокирован заказ или ещё чё-нить
					датаТ = дата1;
				КонецПопытки;
				Дата1 = макс( Дата1, датаТ ); 
			КонецЕсли;
			//+++)
				 
				Если Контр1.АвтоматическиСтавитьВМаршрут=ЛОЖЬ //п.1.а)  клиенты без "Автомата"
					   тогда
				//Строка.ЦветТекста = WebЦвета.Индиго; //тёмно-фиолетовый	(ближе к черному как обычно)
				Строка.ЦветТекста = WebЦвета.ТемноФиолетовый;//одинаково! Филатова так просила!

				ИначеЕсли ( Контр1.АвтоматическиСтавитьВМаршрут=ИСТИНА //п.1.б) должен был поставиться... но за 2.5 ч. так и не попал в маршрут!
						   и ВремяСПоследнейОбработки(Дата1)>60 //через 1-5 мин... должна была быть постановка в маршрут
					      ) тогда
				Строка.ЦветТекста = WebЦвета.ТемноФиолетовый;//яркий! уже должна была пройти...  автопостановка - но не прошла!

				КонецЕсли;
			КонецЕсли;
			//+++)
			
		КонецЕсли;//проверка категорий (маршруты)
	
		  проц = ПроверитьЗаказНаОтгрузке(док1); //+++ 20.04.2013
		  Если проц>0 Тогда
			Строка.ячейки.Отгрузка.ОтображатьТекст = истина;
			Если проц = 100 тогда
				Строка.ячейки.Отгрузка.Текст = ">>";
				Строка.ЦветФона = WebЦвета.НейтральноЗеленый;
			ИначеЕсли проц < 100 тогда
				Строка.ячейки.Отгрузка.Текст = проц; // процент уменьшается с вводом факт.количества
				Строка.ЦветФона = WebЦвета.светлоРозовый; // недогруз! 
			Иначе //Если проц > 100 тогда
				Строка.ячейки.Отгрузка.Текст = проц; // процент более 100%
				Строка.ЦветФона = WebЦвета.Сливовый; // ПЕРЕгруз! 
				//WebЦвета.СеребристоСерый; 
			КонецЕсли; 
		  КонецЕсли; 
		
		КонецЕсли; 
		
		  Если ПроверитьОтгрузкуПоЗаказу(док1) Тогда
			 Если (Строка.ДанныеСтроки.Проведен) тогда
			 	Строка.ЦветТекста = WebЦвета.Синий;
			иначе
				Строка.ЦветТекста = WebЦвета.Красный; // Заказ не проведен, а есть движение по продажам
			 КонецЕсли;
		 КонецЕсли;
		 
	//+++ 23.04.2014  - 08.09.2016
	//Если МенВидимость тогда
	//	мен =Строка.ДанныеСтроки.ДоговорКонтрагента.ОтветственноеЛицо;  //если договор виден, то берем из ДанныхСтроки! намного быстрее!
	//	Строка.Ячейки.Менеджер.ОтображатьТекст = Истина;
	//	Строка.Ячейки.Менеджер.Текст = мен;
	//	Если мен<>Строка.ДанныеСтроки.Ответственный тогда
	//		Строка.Ячейки.Менеджер.ЦветФона = webЦвета.СветлоЖелтый;
	//	КонецЕсли;
	//КонецЕсли;	

	КоличествоСтрок = КоличествоСтрок+1;
	КонецЦикла;
	
	Состояние("Список обновлен "+формат(ВремяОбновления,"ДЛФ=T") );
	 
КонецПроцедуры //СписокПриПолученииДанных

//+++ февраль 2012
//Процедура - обработчик внешнего события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	Перем СписокДок;

	Если Не(ВводДоступен()) Тогда
		Возврат;
	КонецЕсли;

	Если глТорговоеОборудование <> Неопределено Тогда
		Если Событие = "BarCodeValue" Тогда
			Если глТорговоеОборудование.ПолучитьВсеДокументыПоШтрихКоду(Данные, СписокДок) Тогда
				Если СписокДок.Количество() = 1 Тогда
					ОткрытьЗначение(СписокДок[0].Ссылка);
				ИначеЕсли СписокДок.Количество() > 1 Тогда
					СтрокаДок = СписокДок.ВыбратьСтроку("Выберите один из найденных документов.");
					Если СтрокаДок<>Неопределено Тогда
						ОткрытьЗначение(СтрокаДок.Ссылка);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			глТорговоеОборудование.СканерПосылкаДанных(1);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ДействияФормыСвои(Кнопка)
	// Вставить содержимое обработчика.
	Запрос = Новый Запрос("Выбрать Ссылка из Справочник.ДоговорыКонтрагентов Где ОтветственноеЛицо=&глТекущийпользователь");
	Запрос.УстановитьПараметр("глТекущийпользователь",глТекущийПользователь);
	
	СписокДляОтбора = Новый СписокЗначений;
	СписокДляОтбора.ЗагрузитьЗначения(Запрос.Выполнить().выгрузить().ВыгрузитьКолонку("Ссылка"));

	ОтборПоссылке = Отбор.ДоговорКонтрагента;
	ОтборПоссылке.ВидСравнения = ВидСравнения.ВСписке;
	ОтборПоссылке.Значение = СписокДляОтбора;	
	ОтборПоссылке.Использование = Истина;
	
КонецПроцедуры

//***2016.03.10
Процедура ДействияФормыЗаказыПокупателей(Кнопка)

	ОтчетОстатки  = Отчеты.ЗаказыПокупателей.Создать();
	
	ФормаОтчета   = ОтчетОстатки.ПолучитьОсновнуюФорму();
	ФормаОтчета.Открыть();
	
	Если ОтчетОстатки.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагентаВладелецОсновнойМенеджерКонтрагента") = Неопределено Тогда
		ОтчетОстатки.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("ДоговорКонтрагента.Владелец.ОсновнойМенеджерКонтрагента");
	КонецЕсли;
	ОтборМенеджер = ОтчетОстатки.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагентаВладелецОсновнойМенеджерКонтрагента"); 
	ОтборМенеджер.ВидСравнения = ВидСравнения.Равно;
	ОтборМенеджер.Значение = глТекущийПользователь;
	ОтборМенеджер.Использование = Истина;	
	
	Если ОтчетОстатки.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("НоменклатураВидТовара") = Неопределено Тогда
		ОтчетОстатки.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("Номенклатура.ВидТовара");
	КонецЕсли;
	ОтборДиски = ОтчетОстатки.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("НоменклатураВидТовара"); 
	ОтборДиски.ВидСравнения = ВидСравнения.Равно;
	ОтборДиски.Значение = Перечисления.ВидыТоваров.Диски;
	ОтборДиски.Использование = Истина;	
	
	ОтчетОстатки.ОбщийОтчет.ПостроительОтчета.ИзмеренияСтроки.Очистить();
	ОтчетОстатки.ОбщийОтчет.ПостроительОтчета.ИзмеренияСтроки.Добавить("Номенклатура.НоменклатурнаяГруппа");
	ОтчетОстатки.ОбщийОтчет.ПостроительОтчета.ИзмеренияСтроки.Добавить("ДоговорКонтрагента.Владелец");
	
	Для каждого Показатель Из ФормаОтчета.Показатели Цикл
		Если (Показатель.Имя = "КоличествоЕдиницОтчетов")
			ИЛИ (Показатель.Имя = "СуммаУпр") Тогда
			Показатель.Использование = Истина;
		Иначе
			Показатель.Использование = Ложь;
		КонецЕсли; 	
	КонецЦикла;	
	
	ФормаОтчета.ОбновитьОтчет();
	
КонецПроцедуры

//***2016.05.19
Процедура ДействияФормыTerminalОтгрузкаТранспортнойКомпанией(Кнопка)

	ОтчетОстатки  = Отчеты.ЗаказыПокупателей.Создать();
	
	ФормаОтчета   = ОтчетОстатки.ПолучитьОсновнуюФорму();
	ФормаОтчета.Открыть();
	
	Если ОтчетОстатки.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагентаВладелецОсновнойМенеджерКонтрагента") = Неопределено Тогда
		ОтчетОстатки.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("ДоговорКонтрагента.Владелец.ОсновнойМенеджерКонтрагента");
	КонецЕсли;
	ОтборМенеджер = ОтчетОстатки.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагентаВладелецОсновнойМенеджерКонтрагента"); 
	ОтборМенеджер.ВидСравнения = ВидСравнения.Равно;
	ОтборМенеджер.Значение = глТекущийПользователь;
	ОтборМенеджер.Использование = Истина;	
	
	Если ОтчетОстатки.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("НоменклатураВидТовара") = Неопределено Тогда
		ОтчетОстатки.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("Номенклатура.ВидТовара");
	КонецЕсли;
	ОтборДиски = ОтчетОстатки.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("НоменклатураВидТовара"); 
	ОтборДиски.ВидСравнения = ВидСравнения.Равно;
	ОтборДиски.Значение = Перечисления.ВидыТоваров.Диски;
	ОтборДиски.Использование = Истина;	
	
	Если ОтчетОстатки.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("ЗаказПокупателяTerminalОтгрузкаТранспортнойКомпанией") = Неопределено Тогда
		ОтчетОстатки.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("ЗаказПокупателя.TerminalОтгрузкаТранспортнойКомпанией");
	КонецЕсли;
	ОтборДиски = ОтчетОстатки.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("ЗаказПокупателяTerminalОтгрузкаТранспортнойКомпанией"); 
	ОтборДиски.ВидСравнения = ВидСравнения.Равно;
	ОтборДиски.Значение = Истина;
	ОтборДиски.Использование = Истина;	
	
	ОтчетОстатки.ОбщийОтчет.ПостроительОтчета.ИзмеренияСтроки.Очистить();
	ОтчетОстатки.ОбщийОтчет.ПостроительОтчета.ИзмеренияСтроки.Добавить("Номенклатура.НоменклатурнаяГруппа");
	ОтчетОстатки.ОбщийОтчет.ПостроительОтчета.ИзмеренияСтроки.Добавить("ДоговорКонтрагента.Владелец");
	
	Для каждого Показатель Из ФормаОтчета.Показатели Цикл
		Если (Показатель.Имя = "КоличествоЕдиницОтчетов")
			ИЛИ (Показатель.Имя = "СуммаУпр") Тогда
			Показатель.Использование = Истина;
		Иначе
			Показатель.Использование = Ложь;
		КонецЕсли; 	
	КонецЦикла;	
	
	ФормаОтчета.ОбновитьОтчет();
	
КонецПроцедуры

Процедура ДействияФормыСводПоРезервамМенеджера(Кнопка)
			
	Форма = Документы.ЗаказПокупателя.ПолучитьФорму("СводПоРезервамМенеджера");
	Результат = Форма.ЭлементыФормы.ПолеТабличногоДокумента;
	
	Результат.Очистить();
		
	Форма.Открыть();
	
КонецПроцедуры

Процедура ДействияФормыДействие(Кнопка)
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ТолькоПросмотр = Истина;
	Макет = Документы.ЗаявкаНаТранспорт.ПолучитьМакет("Макет");	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьСтарые = Макет.ПолучитьОбласть("Старые");
	ОбластьСегодня = Макет.ПолучитьОбласть("Сегодня");
	
	ОбластьЗаголовок.Параметры.Менеджер = глТекущийПользователь; 
	ТабДок.Вывести(ОбластьЗаголовок);
	
	ТабДок.Вывести(ОбластьСтарые);

	ТабДок.Вывести(ОбластьШапкаТаблицы);
   	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("польз",глТекущийПользователь);
	Запрос.УстановитьПараметр("дата",КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Статус",Перечисления.СтатусыЗаявокНаТранспорт.Доставлен);
	Запрос.УстановитьПараметр("Статус2",Перечисления.СтатусыЗаявокНаТранспорт.Отменен);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаявкаНаТранспорт.Представление,
	               |	ЗаявкаНаТранспорт.Направление,
	               |	ЗаявкаНаТранспорт.Выполнил,
	               |	ЗаявкаНаТранспорт.ДатаДоставкиС КАК ДатаДоставкиС,
	               |	ЗаявкаНаТранспорт.ДатаДоставкиПо,
	               |	ЗаявкаНаТранспорт.ФактическаяДата,
	               |	ЗаявкаНаТранспорт.Сумма,
	               |	ЗаявкаНаТранспорт.Статус,
				   |	ЗаявкаНаТранспорт.Ответственный,
				   |	ЗаявкаНаТранспорт.Объем,
				    |	ЗаявкаНаТранспорт.Номер,
	               |	ЗаявкаНаТранспорт.Ссылка
	               |ИЗ
	               |	Документ.ЗаявкаНаТранспорт КАК ЗаявкаНаТранспорт
	               |ГДЕ
	               |	ЗаявкаНаТранспорт.Ответственный = &польз
				   //|	И ЗаявкаНаТранспорт.ДатаДоставкиС <= &Дата
	               |	И ЗаявкаНаТранспорт.ДатаДоставкиПо <= &Дата
				   |	И ЗаявкаНаТранспорт.Статус <> &Статус
				   |	И ЗаявкаНаТранспорт.Статус <> &Статус2
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаДоставкиС";
	рез = запрос.Выполнить().Выгрузить();
   	Напечатал = Ложь;
	
	для Каждого стр из рез цикл
		Если стр.ДатаДоставкиПо >= НачалоДня(ТекущаяДата()) и не Напечатал Тогда
			ТабДок.Вывести(ОбластьСегодня);
			Напечатал = Истина;
		КонецЕсли;
		ОбластьСтрокаТаблицы.Параметры.заявка = стр.Представление + ", Маршрут:" + стр.Направление;
		ОбластьСтрокаТаблицы.Параметры.Ссылка = стр.Ссылка;
		ОбластьСтрокаТаблицы.Параметры.Ответственный = стр.Ответственный;
		ОбластьСтрокаТаблицы.Параметры.объем = стр.объем;
		ОбластьСтрокаТаблицы.Параметры.Номер = стр.Номер;
		ОбластьСтрокаТаблицы.Параметры.статус = стр.Статус;
		ОбластьСтрокаТаблицы.Параметры.логист = стр.Выполнил;
		ОбластьСтрокаТаблицы.Параметры.сумма = стр.Сумма;
		ОбластьСтрокаТаблицы.Параметры.Дата1 = строка(Формат(стр.ДатаДоставкиС,"ДФ=dd.MM.yyyy")) + " - " + строка(Формат(стр.ДатаДоставкиПо,"ДФ=dd.MM.yyyy"));
		ОбластьСтрокаТаблицы.Параметры.Дата2 = Формат(стр.ФактическаяДата,"ДФ=dd.MM.yyyy");
		ТабДок.Вывести(ОбластьСтрокаТаблицы);
	КонецЦикла;
	Форма = Документы.ЗаявкаНаТранспорт.ПолучитьФорму("ФормаОтчета");
	Форма.Дата = ТекущаяДата();

	Форма.ЭлементыФормы.Реестр.толькоПросмотр = истина;
	Форма.ЭлементыФормы.Реестр.вывести(ТабДок);
	Форма.Открыть();
	//ТабДок.Показать();

КонецПроцедуры

Процедура ДействияФормыПроверитьЛимиты(Кнопка)
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ЗаказыПокупателейОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
	                |	ЗаказыПокупателейОстатки.ДоговорКонтрагента.Владелец.ДопустимаяСуммаЗадолженности КАК ЛимитКлиента,
	                |	ЗаказыПокупателейОстатки.СуммаУпрОстаток КАК СуммаЗаказов,
	                |	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаВзаиморасчетов,
	                |	ЗаказыПокупателейОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
					|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Дата как ДатаДаказа
	                |ИЗ
	                |	РегистрНакопления.ЗаказыПокупателей.Остатки(
	                |			,
	                |			ЗаказПокупателя.Проверен
	                |				И ДоговорКонтрагента.ОтветственноеЛицо = &ТекПользователь) КАК ЗаказыПокупателейОстатки
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	                |				,
	                |				ДоговорКонтрагента.ОтветственноеЛицо = &ТекПользователь
	                |					И ДоговорКонтрагента.ВидДоговора В (&СписокВидовДоговоров)) КАК ВзаиморасчетыСКонтрагентамиОстатки
	                |		ПО ЗаказыПокупателейОстатки.ДоговорКонтрагента.Владелец = ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец
	                |ГДЕ
	                |	ЗаказыПокупателейОстатки.ДоговорКонтрагента.Владелец.ДопустимаяСуммаЗадолженности - ЗаказыПокупателейОстатки.СуммаУпрОстаток - ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток < 0
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	ДатаДаказа УБЫВ
	                |ИТОГИ
	                |	СУММА(СуммаЗаказов),
	                |	СУММА(СуммаВзаиморасчетов),
	                |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПокупателя)
	                |ПО
	                |	Контрагент
	                |АВТОУПОРЯДОЧИВАНИЕ";
	 
	 Запрос.УстановитьПараметр("ТекПользователь", глТекущийПользователь);
	 списВидов = новый СписокЗначений;
	 списВидов.Добавить( Перечисления.ВидыДоговоровКонтрагентов.СПокупателем );
	 списВидов.Добавить( Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером );
	 Запрос.УстановитьПараметр("СписокВидовДоговоров", списВидов);  
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	 
	 ОчиститьСообщения();
	 
	 сообщить("----------Лимиты по собственным договорам----------");
	 Пока Выборка.Следующий() Цикл
		СуммаПроверки = выборка.ЛимитКлиента - выборка.СуммаВзаиморасчетов - выборка.СуммаЗаказов;
		Если СуммаПроверки>=0 тогда
			продолжить;
		КонецЕсли;
		
	   	сообщить( строка(выборка.Контрагент)+" - Текущий долг (с учетом всех "+строка(выборка.ЗаказПокупателя)+" проделенных заказов): "+строка(СуммаПроверки)+"р. Лимит: "+строка(выборка.ЛимитКлиента)+"р.");
	   	выборка2 = выборка.Выбрать();
	    Пока выборка2.следующий() и СуммаПроверки<0 цикл
		   сообщить( строка(выборка2.ЗаказПокупателя)+" - "+строка(выборка2.СуммаЗаказов) );
   		   СуммаПроверки = СуммаПроверки + выборка2.СуммаЗаказов;
	    КонецЦикла;   
	 КонецЦикла;
	
КонецПроцедуры

Процедура ДействияФормыРеестрЗаявокНаВозврат(Кнопка)
	Форма = Документы.ЗаявкаНаВозвратТоваров.ПолучитьФорму("ФормаОтчета");
	Форма.Открыть();
КонецПроцедуры

Процедура ДействияФормыБонусыОТК(Кнопка)
	ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоНаименованию("Отчет по бонусам и ОТК"); 
	ИмяФайла = ПолучитьИмяВременногоФайла(); 
	ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
	ДвоичныеДанные.Записать(ИмяФайла); 
	Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
		Форма = ВнешниеОтчеты.ПолучитьФорму(ИмяФайла); 
	Иначе 
		Форма = ВнешниеОбработки.ПолучитьФорму(ИмяФайла); 
	КонецЕсли; 
	Форма.Открыть(); 
	УдалитьФайлы(ИмяФайла);

КонецПроцедуры

Процедура ДействияФормыСкидкиПоБрендам(Кнопка)
	ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоНаименованию("Скидки по Брендам"); 
	ИмяФайла = ПолучитьИмяВременногоФайла(); 
	ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
	ДвоичныеДанные.Записать(ИмяФайла); 
	Если ТекСсылка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда 
		Форма = ВнешниеОтчеты.ПолучитьФорму(ИмяФайла); 
	Иначе 
		Форма = ВнешниеОбработки.ПолучитьФорму(ИмяФайла); 
	КонецЕсли; 
	Форма.Открыть(); 
	УдалитьФайлы(ИмяФайла);
	
КонецПроцедуры

Процедура ДействияФормыРееестрЗаказовВDPD(Кнопка)
	ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоКоду("526"); 
	ИмяФайла = ПолучитьИмяВременногоФайла(); 
	ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
	ДвоичныеДанные.Записать(ИмяФайла); 
	Форма = ВнешниеОбработки.ПолучитьФорму(ИмяФайла); 
	Форма.Открыть(); 
	УдалитьФайлы(ИмяФайла);

КонецПроцедуры

Процедура ДействияФормыОтчет562(Кнопка)
	
	// 562: Отчет по статусам заказов после отгрузки (SMS)
	
	ИмяФайла = КаталогВременныхФайлов()+"ВнешнийОтчет562.epf";
	//ИмяФайла = ПолучитьИмяВременногоФайла();
	файл = новый файл(ИмяФайла);
	обр = справочники.ВнешниеОбработки.НайтиПоКоду(562); // 
	ДвоичныеДанные = обр.ХранилищеВнешнейОбработки.Получить();
	ДвоичныеДанные.Записать(ИмяФайла);
//		сообщить(строка(ТекущаяДата())+"Записан файл обработки: "+ИмяФайла);
	
	Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
	Форма = Отчет.ПолучитьФорму("ФормаОтчета");
	Форма.Открыть();
	
КонецПроцедуры

Процедура ДействияФормыОжидаемыеПоступленияДисков(Кнопка)
	ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоКоду("574"); 
	ИмяФайла = ПолучитьИмяВременногоФайла(); 
	ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
	ДвоичныеДанные.Записать(ИмяФайла); 
	Форма = ВнешниеОтчеты.ПолучитьФорму(ИмяФайла); 
	Форма.Открыть(); 
	УдалитьФайлы(ИмяФайла);

КонецПроцедуры

Процедура ДействияФормыОтчетПоДискамБезПроверкиНагрузки(Кнопка)

	ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоКоду("638"); 
	ИмяФайла = ПолучитьИмяВременногоФайла(); 
	ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
	ДвоичныеДанные.Записать(ИмяФайла); 
	Форма = ВнешниеОтчеты.ПолучитьФорму(ИмяФайла); 
	Форма.Открыть(); 
	УдалитьФайлы(ИмяФайла);
	
КонецПроцедуры

	
//***2017.09.05 (задача №30616)
Процедура ДействияФормыСформироватьЗаказПоставщику(Кнопка)
	
	ТекДанные = ЭлементыФормы.Список.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Сообщить("Необходимо выбрать заказ, выделив его мышкой");
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ТекДанные.Ссылка);	
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаказПокупателяТовары.Номенклатура,
		               |	ЗаказПокупателяТовары.Номенклатура.ОсновнойПоставщик КАК ОсновнойПоставщик,
		               |	ЗаказПокупателяТовары.Количество
		               |ИЗ
		               |	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		               |ГДЕ
		               |	ЗаказПокупателяТовары.Ссылка = &Ссылка";
		Результат = Запрос.Выполнить();
		ТаблицаЗаказа = Результат.Выгрузить();
		ТаблицаПоставщиков = ТаблицаЗаказа.Скопировать();
		ТаблицаПоставщиков.Свернуть("ОсновнойПоставщик");
		
		Для каждого СтрПоставщиков ИЗ ТаблицаПоставщиков Цикл
			ЗаказПоставщику							 = Документы.ЗаказПоставщику.СоздатьДокумент();
			ЗаказПоставщику.Дата					 = ТекущаяДата();
			ЗаказПоставщику.Организация				 = Справочники.Организации.НайтиПоКоду("00001");
			ЗаказПоставщику.Контрагент				 = СтрПоставщиков.ОсновнойПоставщик;
			ЗаказПоставщику.ВалютаДокумента			 = Справочники.Валюты.НайтиПоКоду("643");
			ЗаказПоставщику.КурсВзаиморасчетов		 = 1;
			ЗаказПоставщику.КратностьВзаиморасчетов	 = 1;
			ЗаказПоставщику.ДоговорКонтрагента		 = ?(СтрПоставщиков.ОсновнойПоставщик.ОсновнойДоговорПоставки.Пустая(), СтрПоставщиков.ОсновнойПоставщик.ОсновнойДоговорКонтрагента, СтрПоставщиков.ОсновнойПоставщик.ОсновнойДоговорПоставки);
			ЗаказПоставщику.Склад					 = Справочники.Склады.НайтиПоНаименованию("1");
			ЗаказПоставщику.УчитыватьНДС			 = Истина;
			ЗаказПоставщику.СуммаВключаетНДС		 = Истина;
			
			СтруктураОтбора = Новый Структура();
			СтруктураОтбора.Вставить("ОсновнойПоставщик", СтрПоставщиков.ОсновнойПоставщик);
			Строки = ТаблицаЗаказа.НайтиСтроки(СтруктураОтбора);
			Для каждого СтрМассива ИЗ Строки Цикл
				СтрТовар = ЗаказПоставщику.Товары.Добавить();
				СтрТовар.Номенклатура = СтрМассива.Номенклатура;
				СтрТовар.Количество = СтрМассива.Количество;
				СтрТовар.Коэффициент = 1;
				ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрТовар, ЗаказПоставщику, Константы.ВалютаРегламентированногоУчета.Получить());
				СтрТовар.Цена = 0; 
				ЗаполнитьСтавкуНДСТабЧасти(СтрТовар, ЗаказПоставщику);
				РассчитатьСуммуТабЧасти(СтрТовар, ЗаказПоставщику);
				РассчитатьСуммуНДСТабЧасти(СтрТовар, ЗаказПоставщику);
			КонецЦикла;
			Если ЗаказПоставщику.Товары.Количество() > 0 Тогда
				ЗаказПоставщику.ПолучитьФорму().Открыть();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ДействияФормыРезервыПоОдинаковымДискам(Кнопка)
	//Если Найти(ПользователиИнформационнойБазы.ТекущийПользователь().Имя,"Малышев") > 0 или РольДоступна("ПравоЗавершенияРаботыПользователей") тогда	
		
		ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоКоду("639"); 
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		Форма = ВнешниеОтчеты.ПолучитьФорму(ИмяФайла); 
		Форма.Открыть(); 
		УдалитьФайлы(ИмяФайла);
		
	//КонецЕсли;	
КонецПроцедуры

Процедура ДействияФормыПровереннаяНоменклатура(Кнопка)
	Если Найти(ПользователиИнформационнойБазы.ТекущийПользователь().Имя,"Малышев") > 0 или РольДоступна("ПравоЗавершенияРаботыПользователей") тогда	
		
		ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоКоду("640"); 
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		Форма = ВнешниеОтчеты.ПолучитьФорму(ИмяФайла); 
		Форма.Открыть(); 
		УдалитьФайлы(ИмяФайла);
		
	КонецЕсли;	

КонецПроцедуры

//+++ 05.04.2018 +++++++++++для фиолетового цвета+++++++++++++++++++++++++
функция ВремяСПоследнейОбработки(Дата1)
	
	рез = 0;
	время1 = Час(Дата1)*3600+Минута(Дата1)*60;
	
	Дата0  = ТекущаяДата();
	время0 = Час(Дата0)*3600+Минута(Дата0)*60;
	
	масРаботы = новый массив;  //фикс. расписание АвтоПостановки В Маршрут
	масРаботы.Добавить( 8*3600 + 15*60);
	масРаботы.Добавить(10*3600 + 45*60);
	масРаботы.Добавить(14*3600 + 15*60);
	масРаботы.Добавить(15*3600 + 45*60);
	
	ВремяРаботы = масРаботы[0]; // первый раз в день
	Для i=0 по масРаботы.Количество()-1 цикл
		Если масРаботы[i]<время0 тогда
			ВремяРаботы = масРаботы[i];
		КонецЕсли;	
	КонецЦикла;
	
	рез = ?( время1 < ВремяРаботы + (День(Дата0) - День(Дата1))*86400 , Время0 - ВремяРаботы, 0); // должна была сработать во ВремяРаботы
	
	возврат рез;
	
КонецФункции

Процедура ДействияФормыПродажиДисков(Кнопка)
		ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоКоду("725"); 
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		Форма = ВнешниеОтчеты.ПолучитьФорму(ИмяФайла); 
		Форма.Открыть(); 
		УдалитьФайлы(ИмяФайла);
КонецПроцедуры

Процедура ДействияФормыСезонныеЗаказы(Кнопка)
		ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоКоду("726"); 
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		Форма = ВнешниеОтчеты.ПолучитьФорму(ИмяФайла); 
		Форма.Открыть(); 
		УдалитьФайлы(ИмяФайла);
КонецПроцедуры

Процедура ДействияФормыЗаказЗаготовок(Кнопка)
		ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоКоду("727"); 
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		Форма = ВнешниеОтчеты.ПолучитьФорму(ИмяФайла); 
		Форма.Открыть(); 
		УдалитьФайлы(ИмяФайла);
КонецПроцедуры

мСписокЗаказов   = Новый Соответствие;
мСписокОтгрузок  = Новый Соответствие;
мСписокКатегорий = новый Соответствие;

мТаблицаНаОтгрузке=Новый ТаблицаЗначений;
мТаблицаНаОтгрузке.Колонки.Добавить("ЗаказПокупателя");
мТаблицаНаОтгрузке.Колонки.Добавить("Процент");

мЖирныйШрифт = Новый Шрифт(,, Истина);
мКурсивШрифт = Новый Шрифт(,,, Истина);
мЖирныйКурсивШрифт = Новый Шрифт(,,Истина , Истина);
//мЗачеркнутыйШрифт = Новый Шрифт(,,,,,Истина);

минДата0  = НачалоДня(ТекущаяДата());
максДата0 = '00010101';
СписокДоговоровМенеджера = неопределено;
