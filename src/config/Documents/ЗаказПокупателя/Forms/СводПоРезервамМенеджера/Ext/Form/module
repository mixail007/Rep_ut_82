Перем ДанныеРасшифровки_1;
Процедура ПриОткрытии()
	Если РольДоступна("ПолныеПрава") Тогда
		ЭлементыФормы.ВсеМенеджеры.Видимость = Истина;
		ЭлементыФормы.ДискиБольше.Видимость = Истина;
		ЭлементыФормы.Диски.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ДействияФормыСформировать(Кнопка)
СхемаКомпоновкиДанных = Документы.ЗаказПокупателя.ПолучитьМакет("СводПоРезервамМенеджера");
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.КолДисков;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = Диски;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
		
	Параметр = СхемаКомпоновкиДанных.Параметры.ПоВсем;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ВсеМенеджеры;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.ВидАдр;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00021");
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.ТолькоЛитые;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ТолькоЛитые;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.Литые;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = Справочники.НоменклатурныеГруппы.НайтиПоКоду("00026");
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.ТолькоШтамп;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ТолькоШтамп;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.Штамп;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = Справочники.НоменклатурныеГруппы.НайтиПоКоду("00049");
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
		Параметр = СхемаКомпоновкиДанных.Параметры.ДатаПрихода;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ДатаПрихода-14*24*60*60;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;

			Параметр = СхемаКомпоновкиДанных.Параметры.ДатаПриходаР;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = КонецДня(ДатаПрихода);
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;

	
	Параметр = СхемаКомпоновкиДанных.Параметры.ПрихО;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ?(ПоЗаданиямНаОтгрузку=ложь,1,0);
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	Параметр = СхемаКомпоновкиДанных.Параметры.Прих;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ?(ПоЗаданиямНаОтгрузку=истина,1,0);
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;

	
	
	
	
	
	
	Параметр = СхемаКомпоновкиДанных.Параметры.Менеджер;
	Если Параметр <> Неопределено Тогда
		ПараметрМенеджер = новый СписокЗначений;
		ПараметрМенеджер.Добавить(глТекущийПользователь);
		//18.01.17 Смирнов
		//задача 21845
		Если глТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Никитин М.И.") тогда
			Запрос = новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	Пользователи.Ссылка
			               |ИЗ
			               |	Справочник.Пользователи КАК Пользователи
			               |ГДЕ
			               |	Пользователи.НаправлениеПродаж = &НаправлениеПродаж";
			Запрос.УстановитьПараметр("НаправлениеПродаж",глТекущийПользователь.НаправлениеПродаж);			   
			Рез = Запрос.Выполнить().Выбрать();
			Пока Рез.Следующий() цикл
				ПараметрМенеджер.Добавить(Рез.ссылка);
			КонецЦикла;
		КонецЕсли;
		//Смирнов
		
		//Миронычев
		Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "РедактированиеДокументовГруппы")  Тогда
			ВходитВГруппу = ПолучитьСписокГруппыПользователей(глТекущийПользователь);
			Если ВходитВГруппу.Количество() > 0 тогда 

				Запрос = новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	Пользователи.Ссылка
				               |ИЗ
				               |	Справочник.Пользователи КАК Пользователи
				               |ГДЕ
				               |	Пользователи.Ссылка В (&НаправлениеПродаж)";
				Запрос.УстановитьПараметр("НаправлениеПродаж",ВходитВГруппу);			   
				Рез = Запрос.Выполнить().Выбрать();
				Пока Рез.Следующий() цикл
					ПараметрМенеджер.Добавить(Рез.ссылка);
				КонецЦикла;
			КонецЕсли;
        КонецЕсли;
		//КонецМиронычев
		
		//+++ Шарафутдинов по задаче 47131 
		Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ЖурналыОтборПоРегиону")  Тогда 
			
						
			СЗКонтрагенты = ПолучитьСписокКонтрагентовМенеджераПоРегиону(ПараметрыСеанса.ТекущийПользователь);
			
			ПараметрКонтрагенты = СхемаКомпоновкиДанных.Параметры.Контрагенты;
			Если ПараметрКонтрагенты <> Неопределено Тогда 								
				ПараметрКонтрагенты.Значение = СЗКонтрагенты;
				ПараметрКонтрагенты.Использование = ИспользованиеПараметраКомпоновкиДанных.Авто;
			КонецЕсли;   			
			
			ПараметрПоРегиону = СхемаКомпоновкиДанных.Параметры.ПоРегиону;
			Если ПараметрПоРегиону <> Неопределено Тогда
				ПараметрПоРегиону.Значение = истина;
				ПараметрПоРегиону.Использование = ИспользованиеПараметраКомпоновкиДанных.Авто;
			КонецЕсли; 
			
		Иначе
			
			ПараметрПоРегиону = СхемаКомпоновкиДанных.Параметры.ПоРегиону;
			Если ПараметрПоРегиону <> Неопределено Тогда
				ПараметрПоРегиону.Значение = ложь;
				ПараметрПоРегиону.Использование = ИспользованиеПараметраКомпоновкиДанных.Авто;
			КонецЕсли;
			
			
		КонецЕсли;
		//--- Шарафутдинов по задаче 47131 
		
		Параметр.Значение = ПараметрМенеджер;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	
	//Форма = Документы.ЗаказПокупателя.ПолучитьФорму("СводПоРезервамМенеджера");
	Результат =ЭлементыФормы.ПолеТабличногоДокумента;
	
	Результат.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных); 
	
	ДанныеРасшифровки_1 = ДанныеРасшифровки;
	
	Результат.ПоказатьУровеньГруппировокСтрок(0);
	
	//Форма.Открыть();
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)

   СтандартнаяОбработка = Ложь;
   СхемаКомпоновкиДанных = Документы.ЗаказПокупателя.ПолучитьМакет("СводПоРезервамМенеджера");    //Создадим и инициализируем обработчик расшифровки                    
   ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки_1, Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
   																	  
  ЭлементРасшифровкиДанных = ДанныеРасшифровки_1.Элементы[Расшифровка];
  ЭлементРасшифровкиДанныхПоля = ЭлементРасшифровкиДанных.ПолучитьПоля()[0];
  ОбработкаРасшифровки.ОткрытьЗначение(ЭлементРасшифровкиДанных.Идентификатор, новый ПолеКомпоновкиДанных(ЭлементРасшифровкиДанныхПоля.Поле));
   
	
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ТолькоЛитыеПриИзменении(Элемент)
	ТолькоШтамп = ложь;
КонецПроцедуры

Процедура ТолькоШтампПриИзменении(Элемент)
	ТолькоЛитые = Ложь;
КонецПроцедуры

Процедура ПоЗаданиямНаОтгрузкуПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры
