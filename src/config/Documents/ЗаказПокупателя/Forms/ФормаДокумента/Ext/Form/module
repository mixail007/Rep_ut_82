перем флПоказыватьЛимит;
Перем мОбновлятьВладельца Экспорт;
// Хранит последнюю установленную дату документа - Для проверки перехода документа в другой период
Перем мТекущаяДатаДокумента;

// Хранит текущее значение учетной политики, организация является плательщиком ЕНВД
Перем мОрганизацияЯвляетсяПлательщикомЕНВД;

// Хранит текущее значение организации Для контроля учетной политики, организация является плательщиком ЕНВД
Перем мТекущаяОрганизация;

Перем мКолонкиТовары, мКолонкиВозвратнаяТара;

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется Для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов; 

// Хранит текущий договор контрагента
// используется Для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента; 

// Устанавливается в значение "Истина", Если пользователю можно менять цену
// в документе
Перем мМожноМенятьЦенуВДокументе;

Перем мЧас;
Перем мМинута;

Перем мОбработкаТайпинга;
Перем мТекстТайпинга;
Перем мПоследнееЗначениеЭлементаТайпинга;

// Хранит информацию о сумме без скидки документа.
Перем мСуммаДокументаБезСкидок Экспорт;
Перем мРассчитыватьАвтоматическиеСкидки Экспорт;
Перем мМинимальныеЦены Экспорт;
Перем мСписокФильтров Экспорт;

Перем мПечатнаяФормаПоУмолчанию;
Перем мСтатус;

Перем ПеремСтрАдрес;
Перем мОбъемыТЗ;

Перем ТаблицаРаспродажи;
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция формирует структуру параметров Для тайпинка контактного лица контрагента.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Структура имен и значений параметров
//
Функция ПолучитьСтруктуруПараметровТайпинга()

	СтруктураПараметров = Новый Структура("ВидКонтактногоЛица", Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента);
	Если НЕ ЗначениеНеЗаполнено(Контрагент) Тогда
		СтруктураПараметров.Вставить("ОбъектВладелец", Контрагент);
	КонецЕсли;
	
	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровТайпинга()()

// Процедура вызывается при выборе времени из списка у ЭУ ВремяНапоминания
//
Процедура ВыбратьВремя(ДатаВремен, ТекЭлемент, ПолныйГод = Истина)

	СтруктураРабочихВремен = ОпределитьНачалоИОкончениеРабочегоДняПользователя();
	
	СписокВремен = Новый СписокЗначений;
	НачалоРабочегоДня = НачалоДня(ДатаВремен)+Час(СтруктураРабочихВремен.ДатаНачала)*60*60+Минута(СтруктураРабочихВремен.ДатаНачала)*60;
	ОкончаниеРабочегоДня = НачалоДня(ДатаВремен)+Час(СтруктураРабочихВремен.ДатаОкончания)*60*60+Минута(СтруктураРабочихВремен.ДатаОкончания)*60 - 60*60;

	НачалоРабочегоДняДляСпискаВыбора = НачалоЧаса(НачалоРабочегоДня);
	а = 0;
	Пока 1=1 Цикл
		ВремяСписка = НачалоРабочегоДняДляСпискаВыбора + а*30*60;
		Если НачалоЧаса(ВремяСписка) > НачалоЧаса(ОкончаниеРабочегоДня) Тогда
			Прервать;
		КонецЕсли;
		Если ПолныйГод Тогда
			СписокВремен.Добавить(ВремяСписка, Формат(ВремяСписка,"ДФ='дд.ММ.гггг ЧЧ:мм'"));
		Иначе
			СписокВремен.Добавить(ВремяСписка, Формат(ВремяСписка,"ДФ='дд.ММ.гг ЧЧ:мм'"));
		КонецЕсли; 
		а = а + 1;
	КонецЦикла; 

	НачальноеЗначение = СписокВремен.НайтиПоЗначению(ДатаВремен);
	Если НачальноеЗначение = Неопределено Тогда
		ВыбранноеВремя = ЭтаФорма.ВыбратьИзСписка(СписокВремен, ТекЭлемент);
	Иначе
		ВыбранноеВремя = ЭтаФорма.ВыбратьИзСписка(СписокВремен, ТекЭлемент, НачальноеЗначение);
	КонецЕсли; 

	Если ВыбранноеВремя <> Неопределено Тогда
		ДатаВремен = ВыбранноеВремя.Значение;
	КонецЕсли; 
	
КонецПроцедуры // ВыбратьВремя()

// Процедура изменяет доступность элемента формы .ВремяНапоминания
//
Процедура ДоступностьНапоминаний()

	//ЭлементыФормы.ВремяНапоминания.Доступность = НапомнитьОСобытии;
	
	Если ВремяНапоминания=Дата(1,1,1) Тогда  
	//Если нет записей - значит еще не записывался не разу после 08.12.2011
		ЭлементыФормы.Кнопка1.Доступность = ЛОЖЬ;
		ЭлементыФормы.ДействияФормы.Кнопки.ИсторияИзменений.Доступность = ЛОЖЬ;
	Иначе // наверное есть история изменений...
		ЭлементыФормы.Кнопка1.Доступность = Истина;
		ЭлементыФормы.ДействияФормы.Кнопки.ИсторияИзменений.Доступность = Истина;
		ЭлементыФормы.ВремяНапоминания.Доступность = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры // ДоступностьНапоминаний()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()
	
	Рез=НайтиДоговорФакторинга( Контрагент, Дата ); //29.03.2017
	Если Рез.ЕстьДоговорФакторинга Тогда
		спис = ПолучитьСписокРазрешенныхДоговоров(Контрагент, Дата ); 
		Если спис.найтиПоЗначению(ДоговорКонтрагента.Код) = неопределено Тогда
    	Предупреждение("У клиента есть действующий договор Факторинга!
					|Нельзя выбирать '"+строка(ДоговорКонтрагента)+"'!",60);
		ДоговорКонтрагента = Рез.Договор;
		КонецЕсли;
	КонецЕсли;
	
	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	ПриИзмененииЗначенияДоговора(ЭтотОбъект, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Продажа", "Товары", мТекущийДоговорКонтрагента);

	// Проверка типа цен в списке доступных
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ИспользоватьРазрешенныеТипыЦенКонтрагентов") Тогда
		
		Если НЕ ЗначениеНеЗаполнено(ТипЦен) Тогда
			
			СписокТипов = яштПолучитьСписокДоступныхЦенКонтрагента(Контрагент);
			
			Если СписокТипов.НайтиПоЗначению(ТипЦен) = Неопределено Тогда
				
				ТипЦен = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли; 
	
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	//+++ 02.06.2015
	//СформироватьНадписьДолга(ДоговорКонтрагента, Ссылка, ЭлементыФормы.ИнфНадписьДолга, , Истина);
	Если флПоказыватьЛимит Тогда 
		СформироватьНадписьЛимита(ЭлементыФормы.ИнфНадписьДолга);	
	Иначе	
		СформироватьНадписьДолга(ДоговорКонтрагента, Ссылка, ЭлементыФормы.ИнфНадписьДолга, , Истина);
	КонецЕсли;


	//+++ 21.02.2017 - экспортный в рублях - 
	Если Контрагент.Экспорт и ДоговорКонтрагента.ВалютаВзаиморасчетов = справочники.Валюты.НайтиПоКоду("643")
		и найти(врег(ДоговорКонтрагента.Наименование),"ЭКСПОРТ")>0    //Экспорт или З кспорт
		и найти(ДоговорКонтрагента.Наименование,"*")=0 Тогда
		ЭтотОбъект.УчитыватьНДС = ложь;
		ЭтотОбъект.СуммаВключаетНДС = ЛОЖЬ;
		ЭлементыФормы.ВсегоНДС.Значение = 0;
		Для каждого стр1 из Товары Цикл
			стр1.СтавкаНДС = перечисления.СтавкиНДС.БезНДС;
			стр1.СуммаНДС = 0;
		КонецЦикла;	
		Предупреждение("  ВНИМАНИЕ - Расчет цен ведется по ЭКСПОРТНОМУ договору !
						|При расчете цен используется доп.скидка -18/118 (без НДС)!",60);
						
	//========= другой договор (в рублях) всегда с НДС!==========
	ИначеЕсли ДоговорКонтрагента.ВалютаВзаиморасчетов = справочники.Валюты.НайтиПоКоду("643") Тогда
		ЭтотОбъект.УчитыватьНДС = Истина;
		ЭтотОбъект.СуммаВключаетНДС = Истина;
		Для каждого стр1 из Товары Цикл
			стр1.СтавкаНДС = перечисления.СтавкиНДС.НДС18;
			стр1.СуммаНДС  = Окр(стр1.Сумма * 18/118,2);
		КонецЦикла;
		ЭлементыФормы.ВсегоНДС.Значение = Товары.Итог("СуммаНДС");
		//Предупреждение("  ВНИМАНИЕ - Расчет цен ведется С УЧЕТОМ НДС!
		//				|Все Заказы в рублях считаются с НДС = 18%!",60);
	КонецЕсли;

	УстановитьЗаголовкиПоДоговору();
	
	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);

	КонецЕсли;

	УстановитьДатуОплатыПоДоговору("ДоговорКонтрагента");
	УстановитьВидимость();
	//26.08.14 Смирнов
	Если ДоговорКонтрагента.ТипДоговора=Справочники.ТипыДоговоров.Факторинг Тогда
		ВыписатьСпецификацию=Истина;
	КонецЕсли;
	
	//+++ 06.02.2015
	Если //Константы.СогласованиеПоСкидкамКлиентов.Получить() и
		ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.НайтиПоКоду("00001") 
		или ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ПредоплатаПоСчетам //+++14.08.2017
		или ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ФакторингПредоплата Тогда//16.05.2017
		//+++ 10.09.2015 не более 30 дней "предоплата" (согласовано с Доколиным!)
		//Если ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности Тогда
			ЧислоДнейСМоментаОтгрузки = мин(ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности, 14); // не более месяца !
		//Иначе	
		//	ЧислоДнейСМоментаОтгрузки = 14;
			
			ДатаОплаты = макс(Дата, ДатаОтгрузки) + ЧислоДнейСМоментаОтгрузки * 86400;
			
			Если ДеньНедели(ДатаОплаты)=6 Тогда // 09.11.2015 Серков - просил сдвинуть дату оплаты на понедельник
				ЧислоДнейСМоментаОтгрузки = ЧислоДнейСМоментаОтгрузки+2;
			ИначеЕсли ДеньНедели(ДатаОплаты)=7 Тогда
				ЧислоДнейСМоментаОтгрузки = ЧислоДнейСМоментаОтгрузки+1;
			КонецЕсли;
			
		//КонецЕсли;
		ДатаОплаты = макс(Дата, ДатаОтгрузки) + ЧислоДнейСМоментаОтгрузки * 86400;
	КонецЕсли;		
	
	Если СокрЛП(ДоговорКонтрагента.ТипДоговора.Код) = "Я0004"  //+++ 29.04.2015  ФА или ФА+ или ШТ
		или ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ФормулаАвтоПлюс
		или ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ШинтрейдЯрославль
		Тогда 
		//***2015.10.16 при установке текущей страницы снимался признак модифицированности формы. Сохраняем его и присваиваем форме обратно.
		ПризнакМодифиированности = ЭтаФорма.Модифицированность;
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ТранспортныеУслуги;
		ЭтаФорма.Модифицированность = ПризнакМодифиированности;
	КонецЕсли;
	
	Если ДоговорКонтрагента.ВалютаВзаиморасчетов.Код <> "643" Тогда   //14.03.2016
		//ЭтотОбъект.КурсВзаиморасчетов = Константы.КурсUSD.Получить();
		ТекущийКурс = РегистрыСведений.КурсыВалютДляПоступления.СрезПоследних(Дата,Новый структура("Валюта",ВалютаДокумента));
		Если  ТекущийКурс.Количество()>0 Тогда
			КурсВзаиморасчетов  = ТекущийКурс[0].Курс-3;
			кратностьВзаиморасчетов = ТекущийКурс[0].Кратность;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДоговора()

процедура СформироватьНадписьЛимита(полеТекста="")
	
	//============ ТекущаяДебиторскаяЗадолженность ===================================================
	// проверяем оперативные остатки по всем договорам продаж
	ЗапросПоДолгам = Новый Запрос;
	ЗапросПоДолгам.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ПОМЕСТИТЬ ВТ_Договоры
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Контрагент
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
	|	И (ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|	ИЛИ ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером) )
	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток, 0) КАК ДебиторскаяЗадолженность,
	|	0 КАК СуммаВсехПроделеленныхЗаказов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки( ,
	|			ДоговорКонтрагента В(ВЫБРАТЬ Ссылка ИЗ ВТ_Договоры)
	|				) КАК ВзаиморасчетыСКонтрагентамиОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.СуммаВзаиморасчетовОстаток, 0)
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(,
	|			ДоговорКонтрагента В (ВЫБРАТЬ Ссылка ИЗ ВТ_Договоры)
	|				И ЗаказПокупателя.Проверен
	//06.10.2017
	|				И ЗаказПокупателя.ВМаршрут
	
	|) КАК ЗаказыПокупателейОстатки
	|ИТОГИ
	|	СУММА(ДебиторскаяЗадолженность),
	|	СУММА(СуммаВсехПроделеленныхЗаказов)
	|ПО
	|	ОБЩИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Договоры";
	
//	ЗапросПоДолгам.УстановитьПараметр("СПокупателем",Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	ЗапросПоДолгам.УстановитьПараметр("Контрагент", Контрагент);
	
	
	Выборка=ЗапросПоДолгам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СуммаДебиторскаяЗадолженность = 0;
	СуммаВсехПроделеленныхЗаказов = 0;
	
	множ = 1; назв=""; точн=0; //в рублех
	Если Выборка.Следующий() Тогда
		СуммаДебиторскаяЗадолженность = Выборка.ДебиторскаяЗадолженность/множ;
		СуммаВсехПроделеленныхЗаказов = выборка.СуммаВсехПроделеленныхЗаказов/множ;
	КонецЕсли;
	
	//-------------------------------------------------------------------------------------------
	ост = (Контрагент.ДопустимаяСуммаЗадолженности/множ - СуммаДебиторскаяЗадолженность-СуммаВсехПроделеленныхЗаказов);
	
	//Если ост>1000 или ост<-1000  Тогда
	//множ = 1000;  назв=" тыс."; точн=3; //до 1 рубля
	//	СуммаДебиторскаяЗадолженность = СуммаДебиторскаяЗадолженность/1000;
	//	СуммаВсехПроделеленныхЗаказов = СуммаВсехПроделеленныхЗаказов/1000;
	//	ост = (Контрагент.ДопустимаяСуммаЗадолженности/множ - СуммаДебиторскаяЗадолженность-СуммаВсехПроделеленныхЗаказов);
	//КонецЕсли;
	//
	//Если ост>1000 или ост<-1000 Тогда
	//	множ = 1000000; назв=" млн.";точн=3; //до 1 тыс.
	//	СуммаДебиторскаяЗадолженность = СуммаДебиторскаяЗадолженность/1000;
	//	СуммаВсехПроделеленныхЗаказов = СуммаВсехПроделеленныхЗаказов/1000;
	//	ост = (Контрагент.ДопустимаяСуммаЗадолженности/множ - СуммаДебиторскаяЗадолженность-СуммаВсехПроделеленныхЗаказов);
	//КонецЕсли;	
	//
	//Если ост>1000 или ост<-1000 Тогда
	//	множ = 1000000000; назв=" млрд."; точн=3; // до 1 млн.
	//	СуммаДебиторскаяЗадолженность = СуммаДебиторскаяЗадолженность/1000;
	//	СуммаВсехПроделеленныхЗаказов = СуммаВсехПроделеленныхЗаказов/1000;
	//	ост = (Контрагент.ДопустимаяСуммаЗадолженности/множ - СуммаДебиторскаяЗадолженность-СуммаВсехПроделеленныхЗаказов);
	//КонецЕсли;	
	//
	Лим = Контрагент.ДопустимаяСуммаЗадолженности/множ;
	ОстЛим = Лим - СуммаДебиторскаяЗадолженность;
	полеТекста.Заголовок = 
	//  "Общий Лимит: "+формат(Лим,"ЧДЦ="+точн+"; ЧН=0")+назв+"р."
	 ?(Окр(СуммаДебиторскаяЗадолженность,точн)=0, "Общий Лимит: ", "Остаток Лимита: ") //"Общий Лимит: "
	   +формат(ОстЛим,"ЧДЦ="+точн+"; ЧН=0")+назв+"р."  //остаток лимита на самом деле
	+"; К отгрузке: "+формат(СуммаВсехПроделеленныхЗаказов,"ЧДЦ="+точн+"; ЧН=0")+назв+"р."
	+"; Доступн.лимит: "+формат(ост,"ЧДЦ="+точн+"; ЧН=0")+назв+"р."
	   ;
	
	//полеТекста.БегущаяСтрока = РежимБегущейСтроки.НеИспользовать;
	
 	Если ост<0 Тогда
		полеТекста.ЦветТекста = webЦвета.Красный;
		//полеТекста.БегущаяСтрока = РежимБегущейСтроки.Нормально;
	ИначеЕсли окр(ост, точн)=0 Тогда
		полеТекста.ЦветТекста = webЦвета.Черный;
	Иначе
		полеТекста.ЦветТекста = webЦвета.ТемноСиний;
	КонецЕсли;	
	
КонецПроцедуры

// Функция формирует список запросов Для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, Для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)

	СписокЗапросов      = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Если ТабличнаяЧасть = Товары Тогда
		СписокЗапросов.Добавить("РасходЦеныНоменклатуры", "По ценам номенклатуры");
		СписокЗапросов.Добавить("ОстаткиНоменклатуры", "По остаткам номенклатуры");
		СписокЗапросов.Добавить("РасходОстаткиИЦеныНоменклатуры", "По остаткам и ценам номенклатуры");
	КонецЕсли;

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, Если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм Для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена  = мМожноМенятьЦенуВДокументе;
	ЕстьСерия = Ложь;

	Если ТабличнаяЧасть = Товары Тогда
		
		Команда         = "ПодборВТабличнуюЧастьТовары";
		Валюта          = ВалютаДокумента;
		ИмяТабличнойЧасти = "Товары";
		
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		
		Команда           = "ПодборВТабличнуюЧастьУслуги";
		Валюта            = ВалютаДокумента;
		ИмяТабличнойЧасти = "Услуги";
		
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

		Если ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
			Предупреждение("Не выбран договор контрагента!");
			Возврат;
		ИначеЕсли ЗначениеНеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
			Предупреждение("Не выбрана валюта взаиморасчетов по договору!");
			Возврат;
		КонецЕсли;
		Валюта = ДоговорКонтрагента.ВалютаВзаиморасчетов;

		Команда           = "ПодборВТабличнуюЧастьВозвратнаяТара";
		ИмяТабличнойЧасти = "Тара";

	КонецЕсли;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                , Склад);
	СтруктураПараметровПодбора.Вставить("ТипЦен"               , ТипЦен);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	СтруктураПараметровПодбора.Вставить("Контрагент"           , Контрагент);
	СтруктураПараметровПодбора.Вставить("Организация"          , Организация);
	//СтруктураПараметровПодбора.Вставить("Комиссионер"          , Справочники.Контрагенты.ПустаяСсылка());

	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен"  , Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"            , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"      , Валюта);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);

	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("КоличествоМест"  , КоличествоМест);
	ЗначениеВыбора.Свойство("Цена"            , Цена);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);

	Если (ТабличнаяЧасть = Товары ИЛИ ТабличнаяЧасть = ВозвратнаяТара)
	   И Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	ИначеЕсли ТабличнаяЧасть = Услуги И Не Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте товары не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	Если ТабличнаяЧасть = Товары Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	Иначе
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;

	СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	
	флНЕЛЬЗЯ = яштРезервыПоТоварам.ЕстьРезервПоЗаказу(ссылка); //+++ 08.11.2013


	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда
			
			СуммаСтрокиДоИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + ?(флНЕЛЬЗЯ,0,Количество); //нельзя менять количество!

			// Рассчитать реквизиты табличной части.
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			//Расчет скидок
			Если РассчитыватьАвтоматическиеСкидки() Тогда
				СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
				Разница = СуммаСтрокиПослеИзменения - СуммаСтрокиДоИзменения;

				мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + Разница;
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
				СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
				СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
				СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
				СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
				СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
				РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
			Иначе // Рассчитать реквизиты табличной части.
				РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

			//+Лукьяненков 28.11.2017 Удалено
			// Итоговая информация об отклонение от плановой себестоимости
			//СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);
            //-Лукьяненков 28.11.2017 Удалено
			
		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			// Нашли, увеличиваем количество в первой найденной строке.

			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			//+Лукьяненков 28.11.2017 Удалено
			// Итоговая информация об отклонение от плановой себестоимости
			//СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);
            //-Лукьяненков 28.11.2017 Удалено
			
		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
	Иначе

		// Не нашли - добавляем новую строку.
		Если НЕ флНЕЛЬЗЯ Тогда //+++ только Если можно!
			
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура   = Номенклатура;

		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;

			// Заполняем реквизиты табличной части.
			ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Пересчитаем цену в валюту документа.
			Цена = ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                 СпособЗаполненияЦен,
			                                                 ТипЦен.ЦенаВключаетНДС,
			                                                 УчитыватьНДС,
			                                                 СуммаВключаетНДС,
			                                                 ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			//Расчет скидок

			Если РассчитыватьАвтоматическиеСкидки() Тогда
				СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

				мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения;
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
				СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
				СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
				СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
				СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
				СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
				РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
			Иначе// Рассчитать реквизиты табличной части.
				РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

			//+++( 19.07.2013 флаг - ПлановуюСебестоимость - занят! 
			// Рассчитываем плановую себестоимость.
			//РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);

			// Итоговая информация об отклонение от плановой себестоимости
			// СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);
            //+++)
			
		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			СтрокаТабличнойЧасти.Количество = Количество;

			// Заполняем реквизиты табличной части.
			Если ПроверитьУслугаОблагаетсяЕНВД(СтрокаТабличнойЧасти.Номенклатура, Организация, Дата,
				                               мОрганизацияЯвляетсяПлательщикомЕНВД) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Иначе
				ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

			// Пересчитаем цену в валюту документа.
			Цена = ПересчитатьЦенуПриИзмененииВалюты(
				Цена,
				ВалютаЦены,
				ВалютаДокумента,
				КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(
				Цена,
				СпособЗаполненияЦен,
				ТипЦен.ЦенаВключаетНДС,
				УчитыватьНДС,
				СуммаВключаетНДС,
				ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			//+Лукьяненков 28.11.2017 Удалено
			// Итоговая информация об отклонение от плановой себестоимости
			//СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);
            //-Лукьяненков 28.11.2017 Удалено
			
			ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			// Пересчитаем цену в валюту документа.
			Цена = ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения.
			// Считаем, что оценочную стоимость Возвратной тары всегда задают с НД
			// ставки берутся из номенклатуры.
			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                     СпособЗаполненияЦен,
			                                     ТипЦен.ЦенаВключаетНДС,
			                                     УчитыватьНДС,
			                                     Истина,
			                                     ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС));

			// Рассчитать реквизиты табличной части.
			РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
		
		КонецЕсли;
    	
	КонецЕсли;
    
	ТабличнаяЧастьИмя = ?(ТабличнаяЧасть = Товары, "Товары",
	                    ?(ТабличнаяЧасть = Услуги, "Услуги", "ВозвратнаяТара"));
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	АвтоЗаполнениеХарактеристики(СтрокаТабличнойЧасти, Истина); //+++ автозаполнение Хар-к по количеству, с комментариями
	
	// Заполняем реквизиты табличной части.
	ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 
	ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект); 
	
	//Адиянов 20161221
	СтрокаТабличнойЧасти.КодТНВЭД = СтрокаТабличнойЧасти.Номенклатура.КодТНВЭД;
	
КонецПроцедуры // ПриИзмененииНоменклатурыТоваров()

// Производит заполнение и установку необходимых полей при изменении характеристики товара в табличной части.
//
Процедура ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти)

	АвтоЗаполнениеХарактеристики(СтрокаТабличнойЧасти, Истина); //+++ автозаполнение Хар-к по количеству, с комментариями

	// Заполняем реквизиты табличной части.
	ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 
	
КонецПроцедуры // ПриИзмененииХарактеристикиНоменклатурыТоваров()

// Обновляет текущее значение учетной политики розничная торговля облагается ЕНВД.
//
Процедура ПриИзмененииОблагаетсяЕНВД(РежимВызова = "")

	Если ЗначениеНеЗаполнено(РежимВызова) Тогда
		мОрганизацияЯвляетсяПлательщикомЕНВД = УчетнаяПолитикаНалоговыйУчет("ОрганизацияЯвляетсяПлательщикомЕНВД", Организация, Дата);
		мТекущаяОрганизация                  = Организация;
	Иначе
		ПриИзмененииОрганизацияЯвляетсяПлательщикомЕНВД(ЭтотОбъект, РежимВызова, Услуги,
		                                                мОрганизацияЯвляетсяПлательщикомЕНВД, мТекущаяОрганизация);
	КонецЕсли;

КонецПроцедуры // ПриИзмененииОблагаетсяЕНВД()

//Проверяет необходимость рассчета автоматических скидок
//
Функция РассчитыватьАвтоматическиеСкидки()

	Если НЕ мРассчитыватьАвтоматическиеСкидки
	 Или Проведен Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает соответстующие свойства поля ввода цены при изменении 
// номенклатуры в текущей строке табличной части.
//
// Параметры:
//  Номенклатура - ссылка на справочник, элемент номенклатуры, Для которого будем устанавливать цену
//
Процедура УстановитьСвойстваПоляВводаЦены(Номенклатура)

	ТекущаяСтрока     = Номенклатура;
	ЭлементУправления = ЭлементыФормы.Товары.Колонки.Цена.ЭлементУправления;

КонецПроцедуры // УстановитьСвойстваПоляВводаЦены()

// Процедура устанавливает доступность кнопки "Заполнить и провести". Кнопка доступна,
// Если документ - внешний заказ, его дата совпадает с текущей и установлен хотя бы один
// из флагов Авторазмещение или Авторезервирование.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьКнопкиЗаполнитьИПровести()

	//ЭлементыФормы.ДействияФормы.Кнопки.ДействиеЗаполнитьИПровести.Доступность =  
	//	НачалоДня(Дата) = НачалоДня(ТекущаяДата()) И (Авторазмещение ИЛИ Авторезервирование);

КонецПроцедуры // УстановитьДоступностьКнопкиЗаполнитьИПровести

// Процедура устанавливает видимость Для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	Колонки      = ЭлементыФормы.Товары.Колонки;
	КолонкиТары  = ЭлементыФормы.ВозвратнаяТара.Колонки;
	
	// Колонки налога Показываем только Тогда, когда его учитываем.
	Если УчитыватьНДС <> Колонки.СтавкаНДС.Видимость Тогда
		УстановитьВидимостьКолонкиТабЧасти( Колонки.СтавкаНДС,    УчитыватьНДС);
	КонецЕсли;

	Если УчитыватьНДС <> Колонки.СуммаНДС.Видимость Тогда
		УстановитьВидимостьКолонкиТабЧасти( Колонки.СуммаНДС,    УчитыватьНДС);
	КонецЕсли;

	// Управление доступностью элементов формы в зависимости от вида операции
	ВидимостьПланирования = Истина;

	УстановитьДоступностьКнопкиЗаполнитьИПровести();

	КнопкиКоманднойПанели = ЭлементыФормы.ДействияФормы.Кнопки;

	ЭлементыФормы.НадписьАвтоматическое.Видимость    = ВидимостьПланирования;
	
	//+++ 06.06.2014 - резервирования тут вообще нет
	ЭлементыФормы.АвтоРезервирование.Видимость       = Ложь;
	ЭлементыФормы.АвтоРезервирование.Доступность     = Ложь;
	ЭлементыФормы.АвтоРазмещение.Видимость = Ложь;
	
////нет	ЭлементыФормы.ДействияФормы.Кнопки.ДействиеСоздатьРеализацию.Доступность = Ложь;
	
	Если НЕ ЭтоНовый() Тогда
		Если Контрагент.ОсновнойМенеджерКонтрагента = глТекущийПользователь ИЛИ ДоговорКонтрагента.ОтветственноеЛицо = глТекущийПользователь 
			ИЛИ РольДоступна("ПолныеПрава")  Тогда
			
		Иначе	
			ЭлементыФормы.Проверен.Доступность=Ложь;
			ЭлементыФормы.ДействияФормы.Кнопки.ДействиеЗакрытьЗаказ.Доступность = Ложь;
			ЭлементыФормы.ДействияФормы.Кнопки.ДействиеЗаполнитьИПровести.Доступность = Ложь;
			ЭлементыФормы.ОсновнаяПанель.Страницы.ТранспортнаяКомпания.Доступность = ложь;
		КонецЕсли;	
	КонецЕсли;
	
	// 03.04.2017 - только IT-отдел!
	Если РольДоступна("ПравоЗавершенияРаботыПользователей") Тогда //+++ 18.09.2013,
		ЭлементыФормы.Номер.Доступность = Истина;
		ЭлементыФормы.Номер.ТолькоПросмотр = Ложь;
	КонецЕсли;	
		
	КнопкиКоманднойПанели.ДействиеАнализ.Доступность = ВидимостьПланирования;
	Колонки.Размещение.ИзменятьВидимость             = ВидимостьПланирования;
	КолонкиТары.Размещение.ИзменятьВидимость         = ВидимостьПланирования;
	
	//+++ 14.10.2014
	Если Подразделение.ОбособленноеПодразделение Тогда 
		КнопкиКоманднойПанели.ПослатьInvoce.Доступность = Истина;
	Иначе
		КнопкиКоманднойПанели.ПослатьInvoce.Доступность = ЛОЖЬ;
	КонецЕсли;
	
	

	УстановитьВидимостьКолонкиТабЧасти(Колонки.Размещение,     ВидимостьПланирования);
	УстановитьВидимостьКолонкиТабЧасти(КолонкиТары.Размещение, ВидимостьПланирования);

	// Услуги на комиссию не отдаем.
	ВидимостьЗакладкиУслуг = ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = ВидимостьЗакладкиУслуг;
	
	
	Если Константы.ОплатыРаспределяютМенеджеры.Получить() Тогда    // Лапенков 20090526 Для ЯШТ не выводим данные реквизиты
		ЭлементыФормы.НадписьСтруктурнаяЕдиница.Видимость=Ложь;ЭлементыФормы.СтруктурнаяЕдиница.Видимость=Ложь;
	КонецЕсли;
	
	//21.02.2017================================== убрана кнопка! ============================
	//ОЛ 02.03.2015
	//кнопка Для установки НДС 0% и пересчета цены видна только Для экспортных заказов
	//Если ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль Тогда 
	//	ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПересчитатьНДСиЦенуДляЭкспорта.Доступность = Истина;
	//	ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПересчитатьНДСиЦенуДляЭкспорта.Текст = "Пересчет цен Для экспорта";
	//	ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПересчитатьНДСиЦенуДляЭкспорта.Подсказка = "Установить НДС 0%  и пересчитать цены без НДС";
	//Иначе
	//	ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПересчитатьНДСиЦенуДляЭкспорта.Доступность = Ложь;
	//	ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПересчитатьНДСиЦенуДляЭкспорта.Текст = " ";
	//	ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПересчитатьНДСиЦенуДляЭкспорта.Подсказка = " ";
	//КонецЕсли;
	//Конец ОЛ
	ЭлементыФормы.РазрешитьЧерныйСписок.Доступность = (глТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Малышев Егор",Истина));
КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает заголовки по выбранному договору Для:
// - элемента формы НадписьСуммаВзаиморасчетов.
//
// Параметры:
//  Нет.
//
Процедура УстановитьЗаголовкиПоДоговору()

	УстановитьНадписьСуммыВзаиморасчетов(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // УстановитьЗаголовкиПоДоговору()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	СуммаВсего = ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	СуммаВсегоНДС = ПолучитьНДСДокумента(ЭтотОбъект, "Товары") + ПолучитьНДСДокумента(ЭтотОбъект, "Услуги");
	ЭлементыФормы.Всего.Значение    = ФорматСумм(СуммаВсего);
	ЭлементыФормы.ВсегоНДС.Значение = ФорматСумм(СуммаВсегоНДС);

	//+Лукьяненков 28.11.2017 Удалено
	//ВременнаяСтрока = "";

	//Если (НЕ ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента))
	//   И (ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда

	//	ВременнаяСтрока = ВременнаяСтрока + КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета) +  ДокументОбъект.ВалютаДокумента
	//					+ " = " + КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
	//					+ мВалютаРегламентированногоУчета + ", ";

	//КонецЕсли;

	//Если НЕ ЗначениеНеЗаполнено(ДокументОбъект.ТипЦен) Тогда
	//	ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
	//Иначе
	//	ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	//КонецЕсли;

	//ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;
    //-Лукьяненков 28.11.2017 Удалено
	
	Если ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)	
	мРассчитыватьАвтоматическиеСкидки = Ложь;
    
	
	ЭлементыФормы.Товары.Колонки.ПроцентАвтоматическихСкидок.Видимость = мРассчитыватьАвтоматическиеСкидки;
	ЭлементыФормы.ОсновнаяПанель.Страницы.АвтоматическиеСкидки.Видимость = мРассчитыватьАвтоматическиеСкидки;

КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()


	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		мРазрешитьРедактироватьЗаказ = Истина; // по умолчанию
		Проверен = Ложь;  
		АвтоРезервирование = Ложь;
		Если ПараметрОснование = Неопределено 
			ИЛИ Не ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета, "Продажа");
			ДоговорКонтрагента=неопределено;
		КонецЕсли;
		//Миронычев
		Если ТипЗнч(ПараметрОснование) = Тип("СправочникСсылка.ДоговорыКонтрагентов") тогда
			ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета, "Продажа");
			ДоговорКонтрагентаПриИзменении(ПараметрОснование);
		КонецЕсли;

		//КонецМиронычев
		
		//+++( 17.01.2014 - дата и подразделение нужны Для определения номера
		Дата = ТекущаяДата();
		Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "УчетТолькоПоПодразделениюПользователя")
			И Подразделение.Пустая() Тогда
			Подразделение = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновноеПодразделение");
			Транзит = (Подразделение.Код <> "00005");
		КонецЕсли;	
		Номер  = ""; 
		
		//+++ 03.04.2018 - из настроек пользователя в первую очередь, иначе Базовая!
		ЭтотОбъект.ТипЦен = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнойТипЦенПродажи"); 
		Если ЭтотОбъект.ТипЦен.Пустая() тогда
			ТипЦен = справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00008"); // 16.12.2015 - Базовая 
		КонецЕсли;	
		
	Иначе // повторное открытие (не новый)
		
		мРазрешитьРедактироватьЗаказ = Ложь; // по умолчанию
		Если ВМаршрут тогда
			ЭлементыФормы.ДействияФормы.Кнопки.ДобавитьВМаршрут.Текст =  "Убрать из Маршрута";
			ЭлементыФормы.ДействияФормы.Кнопки.ДобавитьВМаршрут.Картинка = БиблиотекаКартинок.УровеньВверх;//11.10.2017
		КонецЕсли;
		мТекущийДоговорКонтрагента = ДоговорКонтрагента;//+++ 11.09.2015 тикущий договор!
		
		//+++(19.08.2014 Исключительный Случай - редактирует заказ ТОЛЬКО Менеджер = ОтветственноеЛицо за договор!
		// по служебке от 19.08.2014 (от Кураповой) - ТОЛЬКО Для "Формула Авто Плюс" (код: "92797  ")
		Если СокрЛП(Контрагент.Код)="92797" Тогда
			//Миронычев
			ВходитВГруппу = ПолучитьСписокГруппыПользователей(глТекущийПользователь, ДоговорКонтрагента.ОтветственноеЛицо);
		    Если ВходитВГруппу.Количество() > 0 
	        
			//Если ДоговорКонтрагента.ОтветственноеЛицо = глТекущийПользователь
			//КонецМиронычев	

				или РольДоступна("ПолныеПрава") //+++ 09.12.2016 бухгалтерия чтобы могла редактировать
				Тогда
				мРазрешитьРедактироватьЗаказ = Истина;    
			Иначе
				Сообщить("У Вас нет доступа Для редактирования заказа клиента: "+строка(Контрагент), СтатусСообщения.Внимание); 
			КонецЕсли;
			
			// бухгалтера, кладовщики, начальники... и с полными правами...
		ИначеЕсли РольДоступна("ПолныеПрава") Тогда
			//+++)
			
			мРазрешитьРедактироватьЗаказ = Истина;    
			
		ИначеЕсли 
			(Контрагент.ОсновнойМенеджерКонтрагента = глТекущийПользователь 
			ИЛИ ДоговорКонтрагента.ОтветственноеЛицо = глТекущийПользователь)
			ИЛИ (НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "УчетТолькоПоПодразделениюПользователя")
			И ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьРедактированиеЧужихДокументов")  //+++ Для всех из Ярославля!
			)//++ запрет по дате - один месяц?	И ( Ссылка.Дата > ДобавитьМесяц(НачалоДня(ТекущаяДата()),-1) ) 
			Тогда
			мРазрешитьРедактироватьЗаказ = Истина;
			
		ИначеЕсли ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") Тогда
			
			//+++( 02.06.2015 - отбор по 1 или нескольким подразделениям
			ОдноПодразделение = ?(РольДоступна("Партнер"), ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновноеПодразделение"), глТекущийПользователь.ОсновноеПодразделение);
			списокПодразделенийПользователя = получитьСписокРазрешенныхОбъектовПользователя(глТекущийПользователь, "Подразделения"); 
			
			Если ОдноПодразделение = Ссылка.Подразделение 
				или списокПодразделенийПользователя.найтиПоЗначению(Ссылка.Подразделение)<>неопределено Тогда
				
				//+++ 09.07.2014 - любой менеджер может изменить любой заказ подразделения?
				//   	мРазрешитьРедактироватьЗаказ = Истина; // заказ своего подразделения
				//
				Если рольДоступна("Кассир") 
					или ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "СтаршийМенеджерПодразделения") Тогда 
					
					мРазрешитьРедактироватьЗаказ = Истина; // заказ своего подразделения
					
					#Если Клиент Тогда
					Предупреждение("Не рекомендуется редактировать 'чужой' документ, 
					|оформленный на менеджера: "+строка(ДоговорКонтрагента.ОтветственноеЛицо), 60); 
					#КонецЕсли
				
				ИначеЕсли НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьРедактированиеЧужихДокументов") Тогда	 
					
					мРазрешитьРедактироватьЗаказ = ЛОЖЬ; 
					#Если Клиент Тогда
					Сообщить("У Вас нет доступа Для редактирования документов, оформленных на другого менеджера!", СтатусСообщения.Внимание); 
					#КонецЕсли
				
				КонецЕсли;
				//+++)
				
			Иначе	
				мРазрешитьРедактироватьЗаказ = Ложь; // заказ не своего подразделения
			КонецЕсли;	
		Иначе		
			мРазрешитьРедактироватьЗаказ = Ложь; 
		КонецЕсли;	
		
		//+++( 14.08.2017 -----------СТАТУС заказ - быстрее по Схеме!!!---------------------
 			Если НЕ Проведен Тогда
				Если ПометкаУдаления 
					Тогда рез ="3.Удален";
					Иначе рез ="1.Новый";
				КонецЕсли;
			Иначе//проведен
				Если не Проверен Тогда
					Если статус.Пустая() Тогда
						рез = "1.Новый";
					ИначеЕсли статус=перечисления.СтатусыЗаказов.ВОбработке Тогда
						рез = "16.Ожидает подтверждения поставщиком";
					ИначеЕсли статус=перечисления.СтатусыЗаказов.Подтвержден Тогда
						рез = "17.Ожидает поступления на склад";
					ИначеЕсли статус=перечисления.СтатусыЗаказов.Отменен Тогда
						рез = "20.Отказ поставщика";
					Иначе //статус <> пустой
						рез = ОбменСУТИнтернетМагазин.ПолучитьСтатусЗаказаПоСхеме(Ссылка, Транзит, ПометкаУдаления); 
					КонецЕсли;	
				Иначе//проведен и проверен
					Если статус=перечисления.СтатусыЗаказов.Подтвержден Тогда
						рез = "17.Ожидает поступления на склад";
					ИначеЕсли статус=перечисления.СтатусыЗаказов.Доставлен Тогда
						рез = "18.Доставлен";
					ИначеЕсли статус=перечисления.СтатусыЗаказов.Отменен Тогда
						рез = "20.Отказ поставщика";
					Иначе
						рез = ОбменСУТИнтернетМагазин.ПолучитьСтатусЗаказаПоСхеме(Ссылка, Транзит, ПометкаУдаления); 
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		
			ном1      = число(лев(рез,2));
			статусЗак = рез;
			//+++)
			
			//в задании на перемещение или задании на отгрузку или на уже на подготовке...
			Если (ном1>=8 и ном1<=14)   //06.10.2017 - после Задания на перемещение - трогать НЕЛЬЗЯ! 13>>14
				или (ном1>=3 и ном1<=5)    //закрыт, отгружен или частично отгружен
			Тогда  
				
				Если НЕ РольДоступна("ПолныеПрава") Тогда //+++ 29.07.2014 - Для полных прав можно править... после отгрузки
					
					//+Лукьяненков 12.02.2018
					ЭлементыФормы.Товары.Колонки.Номенклатура.ЭлементУправления.КнопкаВыбора = Ложь;
					ЭлементыФормы.Товары.Колонки.Номенклатура.ЭлементУправления.КнопкаОчистки = Ложь;
					ЭлементыФормы.Товары.Колонки.Номенклатура.ЭлементУправления.ТолькоПросмотр = Истина;
					//-Лукьяненков 12.02.2018
					
					ЭлементыФормы.Товары.Колонки.Количество.Доступность   = Ложь;
					
					ЭлементыФормы.Проверен.Доступность = Ложь;
					
					Если НЕ (ном1>=3 и ном1<=5) тогда    //+++ 22.11.2017 - МОЖНО! если закрыт, отгружен или частично отгружен
						ЭлементыФормы.Контрагент.Доступность = ложь;  //+++ 11.09.2015
					КонецЕсли;
					
					ЭлементыФормы.ДействияФормы.Кнопки.ДобавитьВМаршрут.Доступность = ЛОЖЬ; //+++ 09.11.2017
				КонецЕсли; 
			КонецЕсли;
			
			//09.12.2016
			Если статусЗак="Подтвержден" Тогда  // 99% обычные проведенные заказы 
				статусЗак = ""; 
			Иначе статусЗак = " - "+статусЗак;
			КонецЕсли;
			
		КонецЕсли;	 
		
	ЭтаФорма.ТолькоПросмотр = НЕ мРазрешитьРедактироватьЗаказ;
	
	Если мРазрешитьРедактироватьЗаказ Тогда //Вся форма доступна - определяем недоступность отдельных полей / колонов
		
		рез = НельзяМенятьТоварыИКоличество();
	//	ЭтаФорма.ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ЦенаКонтрагента.доступность = Истина; 
	
	ДоступностьНапоминаний(); //+++ 07.12.2011 теперь хранит дату последнего изменения см.ПередЗаписью() в модулеОбъекта
	
		Если ссылка.ССайта Тогда //+++ 19.02.2013 меняется смысл входящего документа...
			ЭлементыФормы.НадписьНомерВходящегоДокумента.Заголовок = "Номер Web-заказа:";
			ЭлементыФормы.НомерВходящегоДокумента.Доступность = Ложь;
			ЭлементыФормы.ДатаВходящегоДокумента.Доступность  = Ложь;
		КонецЕсли;
		
		//26.01.2017 
		Если Константы.ЦенообразованиеПоКатегориям.Получить() Тогда
			ЭлементыФормы.НеУчитыватьТрКлиента.Доступность = истина;
		КонецЕсли;	

	КонецЕсли;
		
	мПроведениеИзФормы = Истина;
	
//==========================Видимость колонок=====================================================	
// Установить колонки, видимостью которых пользователь управлять не может.

	СтруктураКолонок = Новый Структура();
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("ЕдиницаХранения");
	// Установить ограничение - изменять видимоть колонок Для табличной части "Возвратная тара".
	УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ВозвратнаяТара.Колонки, СтруктураКолонок);
	
	СтруктураКолонок.Вставить("СтавкаНДС");
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("ЕдиницаХранения");
//	СтруктураКолонок.Вставить("ПроцентСкидкиНаценки");
	// Установить ограничение - изменять видимоть колонок Для табличной части "Товары".
	УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Товары.Колонки, СтруктураКолонок);
	
	// Установить видимость колонок "ХарактеристикаНоменклатуры"
	УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	
	// установим доступность колонки "Цена" Для редактирования
	мМожноМенятьЦенуВДокументе = РазрешитьРедактированиеЦенВДокументах();
	
	ЭлементыФормы.Товары.Колонки.Цена.ЭлементУправления.ТолькоПросмотр                 = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.Товары.Колонки.Сумма.ЭлементУправления.ТолькоПросмотр                = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.Товары.Колонки.ПроцентСкидкиНаценки.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.Товары.Колонки.СуммаНДС.ЭлементУправления.ТолькоПросмотр             = НЕ мМожноМенятьЦенуВДокументе;
	
	ЭлементыФормы.Услуги.Колонки.Цена.ЭлементУправления.ТолькоПросмотр                 = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.Услуги.Колонки.Сумма.ЭлементУправления.ТолькоПросмотр                = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.Услуги.Колонки.ПроцентСкидкиНаценки.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.Услуги.Колонки.СуммаНДС.ЭлементУправления.ТолькоПросмотр             = НЕ мМожноМенятьЦенуВДокументе;
	
	ЭлементыФормы.ВозвратнаяТара.Колонки.Цена.ЭлементУправления.ТолькоПросмотр         = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.ВозвратнаяТара.Колонки.Сумма.ЭлементУправления.ТолькоПросмотр        = НЕ мМожноМенятьЦенуВДокументе;
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
//=============================================================================================================

	// Заполнить подменю выбора печатных форм.
	СписокМакетов = ЭтотОбъект.ПолучитьСписокПечатныхФорм();
	УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати,
	СписокМакетов,
	Новый Действие("ДействияФормыДействиеВыбратьПечатнуюФормы"));
	// Установить печатную форму по умолчанию.
	УстановитьКнопкуПечати(ЭтотОбъект.Метаданные().Имя, ЭтаФорма, СписокМакетов, мПечатнаяФормаПоУмолчанию);
	
	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + статусЗак; //09.12.2016
	УстановитьЗаголовкиПоДоговору();
	
	//+++ 02.06.2015 сразу покажем текущий остаток лимита
	Если флПоказыватьЛимит Тогда 
		СформироватьНадписьЛимита(ЭлементыФормы.ИнфНадписьДолга);	
	Иначе	
		СформироватьНадписьДолга(ДоговорКонтрагента, Ссылка, ЭлементыФормы.ИнфНадписьДолга, Ссылка, Истина);
	КонецЕсли;
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	ПриИзмененииОблагаетсяЕНВД();

	
	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	// Выполнить стандартные действия при определении режима использования плановой себестоимости
	ИзмененитьРежимИспользованияПлановойСебестоимости(ЭтотОбъект, ЭтаФорма, мВалютаРегламентированногоУчета);
	
	мПоследнееЗначениеЭлементаТайпинга = КонтактноеЛицо;
	
	//+Лукьяненков 28.11.2017 Удалено
	// Итоговая информация об отклонение от плановой себестоимости
	//СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);
	//-Лукьяненков 28.11.2017 Удалено
	
	// Информация о типах цен и порогах цены текущей номенклатуры
	//СформироватьНадписьОДоступныхТипахЦенИПороговойЦеныТекущейНоменклатурнойПозиции(ЭлементыФормы.ИнфНадписьПоКонтрагентуИЦене.Заголовок);
	
	мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
	мМинимальныеЦены = Новый ТаблицаЗначений;
	мМинимальныеЦены.Колонки.Добавить("Номенклатура");
	мМинимальныеЦены.Колонки.Добавить("ХарактеристикаНоменклатуры");
	мМинимальныеЦены.Колонки.Добавить("Цена");
	
	мСписокФильтров = ПолучитьЗначениеПраваПользователя(
	ПланыВидовХарактеристик.ПраваПользователей.НеОтпускатьТоварСЦенойНижеОпределенногоТипа,
	Неопределено);
	
	Если мРассчитыватьАвтоматическиеСкидки Тогда
		ЭлементыФормы.АвтоматическиеСкидки.ОтборСтрок.ПроцентАвтоматическихСкидок.Значение = 0;
		ЭлементыФормы.АвтоматическиеСкидки.ОтборСтрок.ПроцентАвтоматическихСкидок.ВидСравнения = ВидСравнения.НеРавно;
		ЭлементыФормы.АвтоматическиеСкидки.ОтборСтрок.ПроцентАвтоматическихСкидок.Использование = Истина;
		ЭлементыФормы.АвтоматическиеСкидки.НастройкаОтбораСтрок.ПроцентАвтоматическихСкидок.Доступность = Ложь;
	КонецЕсли;
	
	Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") 
		И ЭтоНовый() И Не РольДоступна("Партнер") Тогда // проверить объект на то, что он еще не внесен в ИБ
		Транзит = Истина;
		Подразделение = ПараметрыСеанса.ТекущийПользователь.ОсновноеПодразделение;
		Если Подразделение.ОбособленноеПодразделение Тогда
			Грузоотправитель = Подразделение.Контрагент;
			Склад 			 = Подразделение.Склад; 
		КонецЕсли;
	КонецЕсли;	
	
	
	Если Поставщик.Пустая() Тогда //Если нет поставщика - не надо его Показывать
		ЭлементыФормы.Поставщик1.Видимость = ЛОЖЬ;
	КонецЕсли;
	
	
	Если РольДоступна("ПравоЗавершенияРаботыПользователей") Тогда       //+++ 02.12.2016 - ТОЛЬКО НАМ!
		
		ЭлементыФормы.Номер.Доступность    = Истина;
		ЭлементыФормы.Номер.ТолькоПросмотр = ЛОЖЬ;
		
		ЭлементыФормы.Согласован.Доступность = Истина;
		ЭлементыФормы.Статус.Доступность     = Истина;    
		ЭлементыФормы.Поставщик1.Доступность = Истина;
		
		ЭлементыФормы.Статус.ТолькоПросмотр 	= ЛОЖЬ;    //временно у всех доступен
		ЭлементыФормы.Поставщик1.ТолькоПросмотр = ЛОЖЬ;
		
		ЭлементыФормы.Товары.Колонки.Статус.Доступность     = Истина;
		ЭлементыФормы.Товары.Колонки.Размещение.Доступность = Истина;
		
	//+++ 10.03.2017 - Для Федорова Максима и др. менеджеров тов.Групп 	
	ИначеЕсли РольДоступна("МенеджерПоЗакупкамСОграничениемПравДоступа") Тогда 
	
		ЭлементыФормы.Статус.Доступность     = Истина;    
		ЭлементыФормы.Поставщик1.Доступность = Истина;
		
		ЭлементыФормы.Статус.ТолькоПросмотр 	= ЛОЖЬ;   
		ЭлементыФормы.Поставщик1.ТолькоПросмотр = ЛОЖЬ;
		
	КонецЕсли;
	
	ЭлементыФормы.Товары.Колонки.Объем.Видимость = Истина;// без расчета "на лету" объема - быстрее открывается...
	
	ЭлементыФормы.КудаНестиКрышки.СписокВыбора.Добавить("на склад");
	ЭлементыФормы.КудаНестиКрышки.СписокВыбора.Добавить("к менеджеру");
	
	//19.01.2016 - блокировка резервного заказа
	Если не ЭтоНовый() и ЭтотОбъект.Проведен и ЭтотОбъект.Проверен 
		//и ЭтотОбъект.Контрагент=ЭтотОбъект.Контрагент.КонтрагентДляРезерваИМ Тогда //123заменить
		и ЭтотОбъект.Контрагент=ЭтотОбъект.ДоговорКонтрагента.КонтрагентДляРезерваИМ Тогда

		ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " (РЕЗЕРВНЫЙ)";
		этаФорма.ТолькоПросмотр = НЕ (РольДоступна("ПравоЗавершенияРаботыПользователей"));  // только Для IT-отдела
	КонецЕсли;
	
	Если НЕ ДоговорКонтрагента.КонтрагентДляРезерваИМ.Пустая() Тогда
		//Если  Контрагент <> Контрагент.КонтрагентДляРезерваИМ  Тогда //123заменить
			Если  Контрагент <> ДоговорКонтрагента.КонтрагентДляРезерваИМ  Тогда
			ЭлементыФормы.ОсновнаяПанель.Страницы.ТранспортнаяКомпания.Видимость   = истина;
			ЭлементыФормы.ОсновнаяПанель.Страницы.ТранспортнаяКомпания.Доступность = истина;
			//Адиянов<<<
			//Контрагенту Резерв ИМ и Если есть диски реквизит "Проверено" может установить только "Малышев Егор"
		Иначе // только Для РерервИМ
			ДоступностьРеквизитаПроверено();
			//Адиянов>>>	ЭлементыФормы.ОсновнаяПанель.Страницы.ТранспортнаяКомпания.Доступность = истина;
		КонецЕсли;
	ИначеЕсли  TerminalОтгрузкаТранспортнойКомпанией или ПередатьВТК Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.ТранспортнаяКомпания.Видимость   = истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.ТранспортнаяКомпания.Доступность = истина;
	КонецЕсли;
	
	//24.02.2016 - Резерв 3 месяца показывать только Малышеву	
	Если СокрЛП(ПараметрыСеанса.ТекущийПользователь.Код) = "Малышев Егор" 
		или СокрЛП(ПараметрыСеанса.ТекущийПользователь.Код) = "Никитин М.И." 
		или СокрЛП(ПараметрыСеанса.ТекущийПользователь.Код) = "Вострилов А.В." //26.12.2016
		или СокрЛП(ПараметрыСеанса.ТекущийПользователь.Код) = "Алексеева О.С."
		или СокрЛП(ПараметрыСеанса.ТекущийПользователь.Код) = "Артамонов А. В."
		или СокрЛП(ПараметрыСеанса.ТекущийПользователь.Код) = "Антонов А.В. (Васенина)"
		или СокрЛП(ПараметрыСеанса.ТекущийПользователь.Код) = "Антонов А.В. (Куракина)" Тогда
		ЭлементыФормы.Резерв3.Видимость = Истина;
	КонецЕсли;
	
	Если СокрЛП(ПараметрыСеанса.ТекущийПользователь.Код) = "Малышев Егор" ТОгда
		ЭлементыФормы.Диски.Видимость = Истина;
	КонецЕсли;
	
	Если ТребуютсяКрышки И не РольДоступна("ПолныеПрава") Тогда
		ЭлементыФормы.ТребуютсяКрышки.Доступность = Ложь;
	КонецЕсли;
	
	//Если ТипЗаказа = 12 Тогда
	//	НеСогласован = Ложь;
	//	Для каждого стр из Товары Цикл
	//   	 Если стр.Статус <> Перечисления.СтатусыСтрокЗаказа.Подтвержден Тогда
	//   		 НеСогласован = Истина; 
	//   	 КонецЕсли;
	//	КонецЦикла;
	//	Если НеСогласован Тогда
	//		ЭлементыФормы.Проверен.Доступность = Ложь;
	//	КонецЕсли;
	//КонецЕсли;
	
	Если НомерТорговойТочкиКонтрагента=0 Тогда //20.09.2016
		ТочкаТекст = "";
	Иначе	 
		ТочкаТекст = получитьНазваниеТочки();
	КонецЕсли;
	
 //Контур фокус
	яшт_КонтурФокус.КонтурФокусПоказатьИнформациюОКонтрагентеНаФорме(ЭтаФорма);
	
	Если РольДоступна("ПравоЗавершенияРаботыПользователей") 
		//временно, не забыть убрать после обкатки нового сайта
		или глТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Левченко Е.")
		или глТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Щербаков А.И.")
		Тогда
		ЭлементыФормы.ИМСклиентомСогласовано.Доступность = истина;
		ЭлементыФормы.TerminalОтгрузкаТранспортнойКомпанией.Доступность = истина;
		ЭлементыФормы.ДействияФормы.Кнопки.ОтправитьВДПД.Доступность = истина;
	Иначе
		ЭлементыФормы.ИМСклиентомСогласовано.Доступность = ложь;
	КонецЕсли;
	
	//12.02.2018 - УДАЛИТЬ
	//Если ЭлементыФормы.Товары.Колонки.Номенклатура.Доступность = Ложь тогда //если колонка недоступна, то нельзя через лупу открыть,
	//																		//поэтому такой костыль
	//	ЭлементыФормы.Товары.Колонки.КолонкаОткрытьНоменклатуру.Видимость = истина;
	//конецЕсли;
	//12.02.2018 - УДАЛИТЬ
	
	//+Лукьяненков 29.11.2017
	
	    ДокументРеализация = Документы.РеализацияТоваровУслуг.НайтиПоРеквизиту("Сделка", ЭтотОбъект.Ссылка);
		
		ЗапросЗаданиеНО = Новый Запрос;
		ЗапросЗаданиеНО.Текст = 
		"ВЫБРАТЬ
		|	ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка
		|ИЗ
		|	Документ.ЗаданиеНаОтгрузку.ЗаказыПокупателей КАК ЗаданиеНаОтгрузкуЗаказыПокупателей
		|ГДЕ
		|	ЗаданиеНаОтгрузкуЗаказыПокупателей.ЗаказПокупателя = &ЗаказПокупателя
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка";
		ЗапросЗаданиеНО.УстановитьПараметр("ЗаказПокупателя", ЭтотОбъект.Ссылка);
		ЗаданиеНаОтгрузку = ?(ЗапросЗаданиеНО.Выполнить().Выгрузить().Количество()>0,ЗапросЗаданиеНО.Выполнить().Выгрузить()[0].Ссылка, неопределено);
		
		Если ЗначениеЗаполнено(ДокументРеализация) Тогда
			НоваяКнопка = ЭлементыФормы.ДействияФормы.Кнопки.Подменю2.Кнопки.Добавить();
			НоваяКнопка.ТипКнопки = ТипКнопкиКоманднойПанели.Действие;
			НоваяКнопка.Имя = "ОткрытьРеализацию";
			НоваяКнопка.Текст = "Открыть реализацию";
			ДействиеОткрытьРеализацию = Новый Действие("ОбработкаНажатияКнопки");
			НоваяКнопка.Действие = ДействиеОткрытьРеализацию;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаданиеНаОтгрузку) Тогда
			НоваяКнопка = ЭлементыФормы.ДействияФормы.Кнопки.Подменю2.Кнопки.Добавить();
			НоваяКнопка.ТипКнопки = ТипКнопкиКоманднойПанели.Действие;
			НоваяКнопка.Имя = "ОткрытьМаршрутныйЛист";
			НоваяКнопка.Текст = "Открыть маршрутный лист";
			ДействиеОткрытьРеализацию = Новый Действие("ОбработкаНажатияКнопки");
			НоваяКнопка.Действие = ДействиеОткрытьРеализацию;
		КонецЕсли;
		
	Если Не ЭтоНовый() Тогда //04.11.2017
		ТРКомментарий = ПолучитьКомментарий();
	КонецЕсли;
	//-Лукьяненков 29.11.2017
	
	//12.02.2018 Лукьяненков, Синхронизация галочек в карточке клиента и заказах
	Если ЭтоНовый() Тогда
		ПечататьСчетИзРеализации = Контрагент.ПечатьСчетаИзРеализации;
	КонецЕсли;
	
КонецПроцедуры //при открытии

//Контур фокус
Процедура кнОткрытьОтчетКонтурФокус(Элемент)
	
	яшт_КонтурФокус.ОткрытьОтчетКонтурФокус(ЭтотОбъект);
	
КонецПроцедуры

// 20.09.2016 - все нужные поля 1 запросом
функция получитьНазваниеТочки()
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	Точки.Наименование,
	 |	Точки.Номер,
	 |	Точки.Адрес
	 |ИЗ
	 |	Справочник.Точки КАК Точки
	 |ГДЕ
	 |	Точки.Номер = &Номер";
	 
	 Запрос.УстановитьПараметр("Номер", НомерТорговойТочкиКонтрагента);
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Если Выборка.Следующий() Тогда
		 рез = "№ "+формат(Выборка.Номер, "ЧГ=0")+" - "+сокрЛП(выборка.Наименование)+" Адрес: "+сокрЛП(выборка.Адрес);
	 КонецЕсли;
	 
	Возврат рез;
	 
КонецФункции	



Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	

 

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Пересчитаем сумму взаиморасчетов.
	Если КурсВзаиморасчетов = 0 Тогда
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = 0;
	Иначе

		ЭлементыФормы.СуммаВзаиморасчетов.Значение = ФорматСумм(ПересчитатьИзВалютыВВалюту(ПолучитьСуммуДокументаСНДС(ЭтотОбъект),  
		                                                          ВалютаДокумента, мТекущаяВалютаВзаиморасчетов,
		                                                          КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КурсВзаиморасчетов,
		                                                          КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),КратностьВзаиморасчетов));

	КонецЕсли;

	ЭлементыФормы.ИнфНадписьКурса.Заголовок = ПолучитьИнформациюКурсаВалютыСтрокой(мТекущаяВалютаВзаиморасчетов, 
	                                                                                 КурсВзаиморасчетов,
	                                                                                 КратностьВзаиморасчетов,
	                                                                                 мВалютаРегламентированногоУчета,
	                                                                                 Истина);

	//УстановитьДоступностьКнопкиДействиеСоздатьРеализацию();

	ОбновитьПодвал();
	
	//ОЛ 05.03.2015
	ЭлементыФормы.НадписьСуммаКомпенсацииТранспорта.Заголовок = "Сумма компенсации транспортных услуг Покупателем (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	//Конец ОЛ
	
	//УстановитьВидимостьЭлементовОтгрузкиЧерезЧП();
	

	// Подсчитаем количество строк в табличных частях.
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если СтраницаПанели.Имя = "Тара" Тогда
			СтраницаПанели.Заголовок = "Тара (" + ДокументОбъект.ВозвратнаяТара.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "Товары" Тогда
			СтраницаПанели.Заголовок = "Товары (" + ДокументОбъект.Товары.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "Услуги" Тогда
			СтраницаПанели.Заголовок = "Услуги (" + ДокументОбъект.Услуги.Количество() + " поз.)";
			
		ИначеЕсли СтраницаПанели.Имя = "Заказы" Тогда //+++ 20.10.2014
			Если ДокументОбъект.Заказы.Количество()>0 Тогда
			    СтраницаПанели.Видимость = Истина;
				СтраницаПанели.Заголовок = "Заказы (" + ДокументОбъект.Заказы.Количество() + " поз.)";
			Иначе 
				СтраницаПанели.Видимость = РольДоступна("ПравоЗавершенияРаботыПользователей");
				СтраницаПанели.Заголовок = "Заказы";
			КонецЕсли;	
			//только Для работников IT-отдела - доступ открыт 
			ЭлементыФормы.ЗаказыПокупателей.ТолькоПросмотр = НЕ РольДоступна("ПравоЗавершенияРаботыПользователей");
		КонецЕсли;

	КонецЦикла;

	ОбновлениеОтображенияВФормеПриТайпинге(ЭтаФорма, ЭтаФорма.ЭлементыФормы.КонтактноеЛицо, мОбработкаТайпинга, мТекстТайпинга);
	
	//ПоказатьЗагрузку();
	//
	//Если НЕ ЗначениеНеЗаполнено(КубатураАвтомобиля) Тогда 
	//	
	//	ЭлементыФормы.ИнфКубыАвто.Заголовок = Строка(КубатураАвтомобиля.Кубатура) + " куб.м.";
	//	
	//Иначе 
	//	
	//	ЭлементыФормы.ИнфКубыАвто.Заголовок = "";
	//	
	//КонецЕсли;
	
	
	//+++( 25.06.2013 - Для заказов по МИМ - при изменении менеджером в форме
	Если ссылка.Контрагент.ПриниматьЗаказыЧерезСайт и ссылка.ССайта Тогда
		Если ЭтаФорма.Модифицированность() и не ЭтотОбъект.ИспользоватьПлановуюСебестоимость Тогда
			
			//+++ при явном изменении - спросим у менеджера с полными правами...
			Если РольДоступна("ПолныеПрава") Тогда
				Режим = РежимДиалогаВопрос.ДаНет;
				Ответ = Вопрос("Флаг ""Использовать Плановую Себестоимость"" - является служебным! 
								|Клиент не сможет внести изменения в данный заказ.
							    |   Включить защиту от изменений заказа?", Режим, 0);
				Если Ответ = КодВозвратаДиалога.Нет Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;	

			ЭтотОбъект.ИспользоватьПлановуюСебестоимость = Истина; //ГЛАВНЫЙ ФЛАГ!
			//ЭтотОбъект.НапомнитьОСобытии = Ложь;
			ЭтотОбъект.записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
			
		КонецЕсли;
	КонецЕсли;	
	//+++)
			
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);

		ИначеЕсли Команда = "ПодборВТабличнуюЧастьУслуги" Тогда
			ОбработкаПодбора(Услуги, ЗначениеВыбора);

		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
			ОбработкаПодбора(ВозвратнаяТара, ЗначениеВыбора);

		ИначеЕсли Команда = "ИзменениеТабличнойЧастиТовары" Тогда

			// Рассчитывает плановую себестоимость во всех строке табличной части документа
			РассчитатьПлановуюСебестоимостьВСтрокахТабЧасти(ЭтотОбъект, мВалютаРегламентированногоУчета);

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
    ДоступностьНапоминаний();//+++ 08.12.2011
			
	//27.04.15 Смирнов - Если заказ Для tire technology, то предлагаем создать заказ поставщику
	СоздатьЗаказПоставщику();
	
	ЗаполнитьЗадачиНаСогласование(); // процедура модуля
		
	//21.10.2015 только Для проведенных и проверенных документов - проверяем лимит!
	Если ЭтотОбъект.Проведен и ЭтотОбъект.Проверен Тогда 
		Если флПоказыватьЛимит и ЭлементыФормы.ИнфНадписьДолга.ЦветТекста = webЦвета.Красный Тогда
			 сообщить(ЭлементыФормы.ИнфНадписьДолга.Заголовок);
		КонецЕсли;
			
			//   ЗамерыВремени "вручную" при проведении проделенного заказа
		Если ДатаНачалаЗаписи > 0 Тогда		//+++ 12.04.2016
			КлючеваяОперацияСсылка = Справочники.КлючевыеОперации.ПроведениеЗаказаПокупателя;
			ДатаОкончанияЗаписи = ОценкаПроизводительностиКлиентСервер.ЗначениеТаймера();
			Длительность = ДатаОкончанияЗаписи - ДатаНачалаЗаписи; 
			ДатаОкончанияКлючевойОперации  = ТекущаяДата();
		 	ОценкаПроизводительностиВызовСервераПолныеПрава.ЗафиксироватьДлительностьКлючевойОперации( 
			КлючеваяОперацияСсылка, 
			Длительность, 
			ДатаНачалаКлючевойОперации,
			ДатаОкончанияКлючевойОперации,
			Ссылка);  // + Ссылка на этот Заказ
		КонецЕсли;

		//+++( 26.03.2018 - перенесено из ПриЗаписи()
		Контрагенты = Новый ТаблицаЗначений;
		Контрагенты.Колонки.Добавить("Контрагент");
		Ст = Контрагенты.Добавить();
		Ст.Контрагент = Контрагент;
	  //  Результат = ЗапросПоСтатусуКонтрагентаФНС(Контрагенты);
	  //  Если Результат.Количество() > 0 Тогда
	  //  	Сообщить("Контрагент не соответствует базе ФНС! Проверьте реквизиты ИНН и КПП контрагента: "+строка(Контрагент), СтатусСообщения.Внимание);
	  //КонецЕсли;
		
		//26.03.2018 - перенесено из ПриЗаписи()  - ТОЛЬКО если заказ проведен и проверен
		ВопросВводаНаОснованииСчета(); 
		//+++)
		
	КонецЕсли;
	
	// перенесен из ПослеЗакрытия
	Если Проведен Тогда // Если документ НЕ записан... ничего писать и не надо
		
		таб = ЭлементыФормы.ВходящиеДокументы.Значение.Скопировать();
		
		Если таб.Количество()>0 Тогда
			
			/// запишем в учет входящих документов отдельно по каждой строке
			Для каждого стр1 из таб Цикл
				регСв = регистрыСведений.УчетВходящихДокументов.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(регСв, стр1);
				регСв.Записать(Истина); //перезапись
			КонецЦикла;
			
		КонецЕсли;
	
	КонецЕсли;

	// + Сакулина
	Если Проверен и согласован = ложь и Проведен и ТипЗаказа = 13 и Подразделение = Справочники.Подразделения.НайтиПоКоду("00005") и ВводитьТолькоПеремещение = Истина и Заказы.Количество()=0 Тогда
		СозданиеЗадачиНаСогласованиеТипоразмера();
	КонецЕсли;

КонецПроцедуры // ПослеЗаписи()

//+++ 02.10.2017 Запрос Для разбиения заказа на части----------
функция ПолучитьЗапросЧегоНет(ДокОб)
	
ТабБезДублей = Новый ТаблицаЗначений;
ТабБезДублей = ДокОб.Товары.Выгрузить(,"Номенклатура, Количество");
ТабБезДублей.Свернуть("Номенклатура","Количество");

Запрос = Новый Запрос;
Запрос.УстановитьПараметр("Транзит", ДокОб.Транзит);
Запрос.УстановитьПараметр("Подразделение", ДокОб.Подразделение);
Запрос.УстановитьПараметр("ТабБезДублей",ТабБезДублей);

Запрос.Текст = "ВЫБРАТЬ 
|ТабБезДублей.Номенклатура, 
|ТабБезДублей.Количество
|ПОМЕСТИТЬ ВТ_ЗаказТовары
|ИЗ
|&ТабБезДублей КАК ТабБезДублей;
|///////////////////////////////////////////////////////////
|ВЫБРАТЬ Номенклатура, 
|	СУММА (КоличествоОстаток) КоличествоОстаток, 
|	СУММА(КоличествоНаОТХ) КоличествоНаОТХ
|ПОМЕСТИТЬ ВТ_ОстаткиНаСкладахИОТХ
|ИЗ
|(
| ВЫБРАТЬ
|	ТоварыНаСкладахОстатки.Номенклатура,
|	ТоварыНаСкладахОстатки.КоличествоОстаток,
|	0 КоличествоНаОТХ
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.Остатки(,Номенклатура В (выбрать тз.Номенклатура из ВТ_ЗаказТовары как тз) 
|		И Склад.ЗапретитьИспользование=ЛОЖЬ 
|		И Склад.Транзитный //ФилиалСклад 
|
|) КАК ТоварыНаСкладахОстатки
|ОБЪЕДИНИТЬ ВСЕ
|	ВЫБРАТЬ
|	ТоварыНаОтветственномХранении.Номенклатура,
|	0 КОличествоОстаток,
|	ТоварыНаОтветственномХранении.КоличествоОстаток КоличествоНаОТХ
|ИЗ
|	РегистрНакопления.ТоварыНаОтветственномХранении.Остатки(,Номенклатура В (выбрать тз.Номенклатура из ВТ_ЗаказТовары как тз) 
|		И Склад.ЗапретитьИспользование=ЛОЖЬ
|		И Склад.Транзитный //ФилиалСклад

|    И  Контрагент В (&СписокКонтрагентовОТХ) 
|	   
|	) КАК ТоварыНаОтветственномХранении ) А 
|СГРУППИРОВАТЬ ПО Номенклатура;
|///////////////////////////////////////////////////////////
|ВЫБРАТЬ
|ВТ_ЗаказТовары.Номенклатура,
|ВТ_ЗаказТовары.КОличество КоличествоВЗаказе,
|ВТ_ЗаказТовары.КОличество+
|ЕстьNULL(ЗаказыПокупателей.КоличествоОстаток,0) КоличествоЗаказано,
|ЕстьNULL(ЗаказыПокупателей.КоличествоОстаток,0) КоличествоЗаказаноВДругихЗаказах,
|ЕстьNULL(ВТ_ОстаткиНаСкладахИОТХ.КоличествоОстаток,0) КоличествоОстаток, 
|ЕстьNULL(ВТ_ОстаткиНаСкладахИОТХ.КоличествоНаОТХ,0) КоличествоНаОТХ,
|ЕстьNULL(ВТ_ОстаткиНаСкладахИОТХ.КоличествоОстаток,0)+ЕстьNULL(ВТ_ОстаткиНаСкладахИОТХ.КоличествоНаОТХ,0)-ЕстьNULL(ЗаказыПокупателей.КоличествоОстаток,0) как СвОстаток  
| ИЗ ВТ_ЗаказТовары
|
|ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиНаСкладахИОТХ
|ПО ВТ_ЗаказТовары.Номенклатура = ВТ_ОстаткиНаСкладахИОТХ.Номенклатура
|
|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки (, Номенклатура В (выбрать тз.Номенклатура из ВТ_ЗаказТовары как тз) 
|		И ЗаказПокупателя.Транзит //ФилиалЗаказ
|		И ЗаказПокупателя.Проверен 
|//НеНовый		И (ЗаказПокупателя<>&Ссылка1)  
|) ЗаказыПокупателей
|ПО  ВТ_ЗаказТовары.Номенклатура =ЗаказыПокупателей.Номенклатура
//количество в заказе - больше чем есть на св.остатках
|ГДЕ ВТ_ЗаказТовары.КОличество+
|ЕстьNULL(ЗаказыПокупателей.КоличествоОстаток,0)-ЕстьNULL(ВТ_ОстаткиНаСкладахИОТХ.КоличествоОстаток,0)-ЕстьNULL(ВТ_ОстаткиНаСкладахИОТХ.КоличествоНаОТХ,0) >0
|;
|Уничтожить ВТ_ОстаткиНаСкладахИОТХ;
|Уничтожить ВТ_ЗаказТовары;
|";

Запрос.Текст = стрЗаменить(Запрос.Текст , "//ФилиалЗаказ", ?(ДокОб.Транзит," и ЗаказПокупателя.Подразделение = &Подразделение","= ЛОЖЬ") );
Запрос.Текст = стрЗаменить(Запрос.Текст , "//ФилиалСклад", ?(ДокОб.Транзит," и Склад.Подразделение = &Подразделение","= ЛОЖЬ") );

СписокКонтрагентовОТХ = Новый СписокЗначений;
СписокКонтрагентовОТХ = яштПоставщики.ПолучитьСписокПоставщиков(Истина);  //+++ 01.10.2014
Запрос.УстановитьПараметр("СписокКонтрагентовОТХ",СписокКонтрагентовОТХ);
Если не ДокОб.ЭтоНовый() Тогда
	Запрос.Текст = стрЗаменить(Запрос.Текст,"//НеНовый","");
	Запрос.УстановитьПараметр("Ссылка1", ДокОб.Ссылка);
КонецЕсли;
	Результат=Запрос.Выполнить();
	  
возврат Результат;

КонецФункции

//+++ 03.10.2017 Проверка всех ограничений вынесена в отдельную функцию
функция ЕстьОграниченияНаРазделениеЗаказа()
	рез=ЛОЖЬ;
	текстСообщения = "";
	
	Если НельзяМенятьТоварыИКоличество(2) Тогда //Предупредить
		рез=Истина;
	КонецЕсли;	
	
	этоЯрославль = (Подразделение.Код = "00005");
	
	//+++ 03.10.2017 - МОЖНО сразу разбивать по Ярославлю ?!
	//Если Транзит и этоЯрославль Тогда // по подразделениям... тоже можно!
	//	текстСообщения = "Нельзя разбивать Транзитный заказ по остаткам Ярославля!";
	//	рез=Истина;
	//КонецЕсли;	
	
	//не правильные: когда совпадают
	Если не Транзит И не этоЯрославль Тогда //+++ 08.07.2014 не ярославль но не транзит?!
		текстСообщения = "Заказ должен быть [v]Транзитным Для разбиения по остаткам "+строка(Подразделение)+"!";
		рез=Истина;
	КонецЕсли;	
	
	Если ЭтотОбъект.Товары.Количество()=0 Тогда
		текстСообщения = "Пустой заказ (нет товаров) - нечего разбивать!";
		рез=Истина;
	КонецЕсли;	
	
	Если не ЭтоНовый() и яштРезервыПоТоварам.ЕстьРезервПоЗаказу(ссылка) Тогда //+++ 08.11.2013
		текстСообщения = "Нельзя разбивать заказ, который уже отгружается!";
		рез=Истина;
	КонецЕсли;
	
//+++ 10.06.2014 не нужно разбивать заказ поставщика!	
	Если ЭтотОбъект.Статус = перечисления.СтатусыЗаказов.Подтвержден
		или ЭтотОбъект.Статус = перечисления.СтатусыЗаказов.Получен
		или ЭтотОбъект.Статус = перечисления.СтатусыЗаказов.Отменен
		Тогда
		текстСообщения = "НЕЛЬЗЯ разбить заказ Для Поставщика, который уже '"+строка(ЭтотОбъект.Статус)+"'!";
		рез=Истина;
	КонецЕсли;

	Если НЕ (РольДоступна("ПолныеПрава") 
			или глТекущийПользователь=ДоговорКонтрагента.ОтветственноеЛицо 
			или глТекущийПользователь=Контрагент.ОсновнойМенеджерКонтрагента
			или получитьЗначениеПоУмолчанию(глТекущийПользователь,"СтаршийМенеджерПодразделения") // Для филиалов - старший может всё
			) Тогда
		текстСообщения = "У Вас недостаточно прав! Нельзя разбивать чужой заказ!";
		рез=Истина;
	КонецЕсли;	
	
	Если текстСообщения <> "" тогда
		Предупреждение(текстСообщения , 30 );
	КонецЕсли;
	
	возврат рез;
	
КонецФункции

// +++ 06.2014 сначала оценивается свободный остаток ЯШТ и лишь затем 
// Для поставщиков из регистра СрокиДоставки --> формируется по регистру ОстаткиНоменклатурыПоставщиков 
// формируются заказы покупателя и заказы поставщику Для этих поставщиков!
//
// статус присваивается = Новый
//
// поставщик - определяется на заказ в целом
//и он же находится в строках заказа:  стр1.Размещение.Контрагент
//
Процедура РазделитьЗаказПоПоставщикам(всеПоставщикиВОдномЗаказе=ЛОЖЬ)

	ДатаНовыхДокументов 	 = ТекущаяДата();
	ПерезаписанИсходныйЗаказ = ЛОЖЬ;
	флОтменитьТранзакцию 	 = Ложь;
 	
	Если ЕстьОграниченияНаРазделениеЗаказа() Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ПолучитьЗапросЧегоНет( ЭтотОбъект );  
  	Если Результат.Пустой() Тогда
		Предупреждение("Разбиение не требуется, все товары есть на складах!", 30);
		Возврат;
	КонецЕсли;
	Выборка = Результат.Выбрать();

	//=========================Новый Заказ (с товарами, которых нет в ЯШТ/Подразделении)========================================	
	//изначальный заказ НЕ удаляется никогда!
	// вместо него создается 1 или 4 заказа(по каждому поставщику): ЯШТ, НовЛайн, Пауэр и ТогоЧегоНетНигде
	//
	//ДокументОбъектЯШТ - то, что есть >> записывается в текущий объект
	//ЗаказНовый  - Для поставщиков
	//ЗаказНовый1 - то, чего нет
	КолЗаказов = 0;

	ДокументОбъект.ТипЦен = ?( ЗначениеЗаполнено(ДокументОбъект.ТипЦен), справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00006"), ДокументОбъект.ТипЦен); //+++ 14.10.2014

	ДокументОбъектЯШТ = ДокументОбъект.Скопировать();
	ЗаполнитьЗначенияСвойств(ДокументОбъектЯШТ, ДокументОбъект);
	ДокументОбъектЯШТ.Дата  = ДатаНовыхДокументов;    //+++ 07.07.2014
	ДокументОбъектЯШТ.Номер = ""; //13.10.2014
	ДокументОбъектЯШТ.ДатаОтгрузки = макс(ТекущаяДата(), ДокументОбъектЯШТ.ДатаОтгрузки); //+++ 14.10.2014
	ДокументОбъектЯШТ.ДатаОплаты   = макс(ДокументОбъектЯШТ.ДатаОплаты, ДокументОбъектЯШТ.ДатаОтгрузки);
	ДокументОбъектЯШТ.Товары.Загрузить(  ДокументОбъект.Товары.Выгрузить() );

	ЗаказНовый=ДокументОбъектЯШТ.Скопировать();
	ЗаполнитьЗначенияСвойств(ЗаказНовый, ДокументОбъектЯШТ);
	ЗаказНовый.Товары.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		стр0 = ДокументОбъектЯШТ.Товары.Найти(Выборка.Номенклатура, "Номенклатура");//будем удалять в копии Для ЯШТ, возможно ничего нет!
		
		МожноОставитьКоличество=Макс(Мин( Выборка.КоличествоВЗаказе, Выборка.СвОстаток),0) ;
		Если МожноОставитьКоличество=0 Тогда
			СтрокаВНовомЗаказе=ЗаказНовый.Товары.Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаВНовомЗаказе, стр0);
			ДокументОбъектЯШТ.Товары.Удалить(стр0);
		Иначе 
			СтрокаВНовомЗаказе=ЗаказНовый.Товары.Добавить();	
			КоличествоТребуется = стр0.Количество;
			стр0.Количество =МожноОставитьКоличество;
			РассчитатьСуммуТабЧасти(стр0, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(стр0, ЭтотОбъект);

			// пересчитать сумму и ндс
			ЗаполнитьЗначенияСвойств(СтрокаВНовомЗаказе, стр0);
			СтрокаВНовомЗаказе.Количество = КоличествоТребуется-МожноОставитьКоличество;
			РассчитатьСуммуТабЧасти(СтрокаВНовомЗаказе, ЗаказНовый);   //+++ 07.07.2014
			РассчитатьСуммуНДСТабЧасти(СтрокаВНовомЗаказе, ЗаказНовый);
 		КонецЕсли;
		
	КонецЦикла;
		
	//-------------запись-----------------------		
	Если ДокументОбъектЯШТ.Товары.Количество()>0 и ДокументОбъектЯШТ.Товары.Количество()<= ДокументОбъект.Товары.Количество()
		и ДокументОбъектЯШТ.Товары.Итог("Количество")<ДокументОбъект.Товары.Итог("Количество") Тогда  //+++ 08.07.2014 - 1 позиция на несколько!
		
		//--------------Сообщение--------------
		проц = 100*ДокументОбъектЯШТ.Товары.Итог("Количество")/ДокументОбъект.Товары.Итог("Количество");  //+++ 08.07.2014 !

	//+++ 09.08.2014 - разделение Для Мелкого Опта
	    Если Вопрос("Выполнить разбиение заказа?", РежимДиалогаВопрос.ДаНет, 10) <> КодВозвратаДиалога.Да Тогда
			Возврат; 
		Иначе //------------запись того, что есть в ЯШТ (НЕ ВСЁ) в этот же заказ-----------------------------------------
			ПерезаписанИсходныйЗаказ = Истина ; //перезапись в первоначальный заказ!
								
			КолЗаказов = КолЗаказов + 1 ;  // заказ изначальный изменен
			ДокументОбъект.Статус =  перечисления.СтатусыЗаказов.ПустаяСсылка();//  перечисления.СтатусыЗаказов.ПолученЧастично;
			ДокументОбъект.Поставщик = справочники.Контрагенты.ПустаяСсылка();
			ДокументОбъект.Проверен  = Истина; // проделен сразу!
			ДокументОбъект.ПометкаУдаления = ЛОЖЬ;
			
			ДокументОбъект.Комментарий = "В наличии "+строка(ДокументОбъектЯШТ.Товары.Итог("Количество"))+" из "+строка(ДокументОбъект.Товары.Итог("Количество")) +" шт. #"+ДокументОбъект.Комментарий; 
			ДокументОбъект.Товары.Очистить();
			ДокументОбъект.Товары.Загрузить(ДокументОбъектЯШТ.Товары.Выгрузить() );
		КонецЕсли;//+++) 09.08.2014
		
	ИначеЕсли ДокументОбъектЯШТ.Товары.Количество()=ДокументОбъект.Товары.Количество() 
		и ДокументОбъектЯШТ.Товары.Итог("Количество")=ДокументОбъект.Товары.Итог("Количество") Тогда //+++ 08.07.2014 полностью подтвержден у Поставщика!
		ЭтотОбъект.Комментарий  = "Есть("+строка(ДокументОбъект.Товары.Итог("Количество"))+"). "+ ЭтотОбъект.Комментарий;
		
		ДокументОбъект.Статус    = перечисления.СтатусыЗаказов.ПустаяСсылка(); // перечисления.СтатусыЗаказов.Получен;
		ДокументОбъект.Поставщик = справочники.Контрагенты.ПустаяСсылка();
		ДокументОбъект.Проверен = Истина; // не проделен!
		ДокументОбъект.ПометкаУдаления = ЛОЖЬ;
		
		ПерезаписанИсходныйЗаказ = Истина ; //перезапись в первоначальный заказ!
		Возврат;
	КонецЕсли;	

	 //+++---------------анализируем этот Новый заказ по поставщикам в порядке срока доставки---------------------
	Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	СрокиДоставки.Поставщик,
		               |	СрокиДоставки.СрокДоставки КАК СрокДоставки
		               |ИЗ
		               |	РегистрСведений.СрокиДоставки КАК СрокиДоставки
		               |ГДЕ
		               |	СрокиДоставки.ОТХ = ЛОЖЬ
		               |	И СрокиДоставки.СрокДоставки > 0
		               |	И СрокиДоставки.Включен
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	СрокДоставки
		               |АВТОУПОРЯДОЧИВАНИЕ";
	Результат = Запрос.Выполнить();
	ВыборкаПоставщиков = Результат.Выбрать();

//======================================================================================================================
  //ЗаказНовый  - сначала это то, чего нет в ЯШТ
  //ЗаказНовый1 - заказ поставщику, который вычитается из ЗаказНовый
  //Если ЗаказНовый не пустой после всех поставщиков, то
  
Пока ВыборкаПоставщиков.Следующий() Цикл

	табТов = ЗаказНовый.Товары.Выгрузить();	
	табТов.Свернуть("Номенклатура"); // без дублей!
	
	СписокТов = Новый СписокЗначений;
	СписокТов.ЗагрузитьЗначения( табТов.ВыгрузитьКолонку("Номенклатура") );
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОстаткиНоменклатурыКонтрагентов.Номенклатура,
	               |	ОстаткиНоменклатурыКонтрагентов.Остаток
	               |ИЗ
	               |	РегистрСведений.ОстаткиНоменклатурыКонтрагентов КАК ОстаткиНоменклатурыКонтрагентов
	               |ГДЕ
	               |	ОстаткиНоменклатурыКонтрагентов.Контрагент = &Контрагент
	               |	И ОстаткиНоменклатурыКонтрагентов.Номенклатура В (&СписокТов)
	               |	И ОстаткиНоменклатурыКонтрагентов.Остаток > 0
	               |	И ОстаткиНоменклатурыКонтрагентов.Подразделение = &Подразделение";
	Запрос.УстановитьПараметр("Контрагент", выборкаПоставщиков.Поставщик);
	Запрос.УстановитьПараметр("СписокТов", СписокТов);
	
	Если Транзит Тогда //+++ разделение по поставщикам филиалов !!!
    	Запрос.УстановитьПараметр("Подразделение", ЗаказНовый.Подразделение); // по филиалу
	Иначе
		Запрос.УстановитьПараметр("Подразделение", справочники.Подразделения.ПустаяСсылка() ); // по ЯШТ - без подразделения!
	КонецЕсли;	
	
	Результат = Запрос.Выполнить();
	ВыборкаТов = Результат.Выбрать();	
	
	Если всеПоставщикиВОдномЗаказе Тогда //14.11.2016 - тут будут собираться все ЗаказНовый1
		ЗаказНовыйВСЕ = документы.ЗаказПокупателя.СоздатьДокумент();
	КонецЕсли;
	
	Если ВыборкаТов.Количество()>0 Тогда
		
		ЗаказНовый1 = ЗаказНовый.Скопировать();
		ЗаполнитьЗначенияСвойств(ЗаказНовый1, ЗаказНовый);
		ЗаказНовый1.Дата = ДатаНовыхДокументов;    //+++ 07.07.2014
        ЗаказНовый1.Номер = "";//13.10.2014
		ЗаказНовый1.ДатаОтгрузки = макс(ТекущаяДата() + ВыборкаПоставщиков.СрокДоставки*86400, ЗаказНовый1.ДатаОтгрузки); //+++ 02.02.2017 - прибавляем срод доставки
        ЗаказНовый1.ДатаОплаты   = макс(ЗаказНовый1.ДатаОплаты, ЗаказНовый1.ДатаОтгрузки);
			

		ЗаказНовый1.Товары.Очистить();
		
		ЗаказНовый1.Проверен = Константы.ИспользоватьДележкуЗаказовВМинус.Получить(); //16.11.2016  проделиваем сразу (-) св.остаток + (+)тов.в ожидании!
							
		//-----------------------Согласование-----------------------------------
		Если статус = перечисления.СтатусыЗаказов.ПустаяСсылка()
			или статус = перечисления.СтатусыЗаказов.Новый
			или статус = перечисления.СтатусыЗаказов.ПодтвержденПокупателем Тогда
		//	ЗаказНовый1.Согласован= Истина;
			ЗаказНовый1.Статус    = перечисления.СтатусыЗаказов.ВОбработке;  //сразу в обработке!
		ИначеЕсли ссылка.Статус = перечисления.СтатусыЗаказов.ПолученЧастично Тогда //03.04.2017
			ЗаказНовый1.Статус    = перечисления.СтатусыЗаказов.Подтвержден; // уже был подтвержден... но не получен!
		Иначе	
			ЗаказНовый1.Статус    = ссылка.Статус; //статус как был... ЭтотОбъект
		КонецЕсли;
	
		ЗаказНовый1.Поставщик = ВыборкаПоставщиков.Поставщик;
		ЗаказНовый1.Комментарий = ЭтотОбъект.Номер+">>отгрузка: "+строка(ВыборкаПоставщиков.СрокДоставки)+" дн. # "+ЗаказНовый1.Комментарий;
		
		//-----------------------------------------------------------------------------------------------
	  //  ТипЦенПауэр = справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00009"); // 00009 - Дилерская!
	  //Пауэр 		= Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", "7703247653");
		
		Пока ВыборкаТов.Следующий() Цикл
			  стр0 = ЗаказНовый.Товары.Найти(ВыборкаТов.Номенклатура, "Номенклатура");
			  КолНетУПоставщика = ?(стр0.Количество - выборкаТов.Остаток<=0, 0, стр0.Количество - выборкаТов.Остаток);
			  
			Если КолНетУПоставщика=0 Тогда //весь товар у Этого поставщика
				СтрокаВНовомЗаказе=ЗаказНовый1.Товары.Добавить();	
				ЗаполнитьЗначенияСвойств(СтрокаВНовомЗаказе, стр0);
				ЗаказНовый.Товары.Удалить(стр0);
			Иначе 
				
				КоличествоТребуется = стр0.Количество;
				
				стр0.Количество =  КолНетУПоставщика;
				РассчитатьСуммуТабЧасти(стр0, ЗаказНовый);
				РассчитатьСуммуНДСТабЧасти(стр0, ЗаказНовый);

				// пересчитать сумму и ндс
				СтрокаВНовомЗаказе  = ЗаказНовый1.Товары.Добавить();	
				ЗаполнитьЗначенияСвойств(СтрокаВНовомЗаказе,стр0);
				
				СтрокаВНовомЗаказе.Количество = КоличествоТребуется - КолНетУПоставщика;
				
				РассчитатьСуммуТабЧасти(СтрокаВНовомЗаказе, ЗаказНовый1);
				РассчитатьСуммуНДСТабЧасти(СтрокаВНовомЗаказе, ЗаказНовый1);
 			КонецЕсли;

		КонецЦикла;
		
//=======================СЛЕДУЮЩИЙ ЗАКАЗ ПОСТАВЩИКУ=========================
Если ЗаказНовый1.Товары.Количество()>0 
	 И (ПерезаписанИсходныйЗаказ 
	    или (НЕ ПерезаписанИсходныйЗаказ
		     и ЗаказНовый1.Товары.Количество()<=ДокументОбъект.Товары.Количество() 
	 	     и ЗаказНовый1.Товары.Итог("Количество")<ДокументОбъект.Товары.Итог("Количество")
			 ) 
		)	 Тогда

	//--------------------------Сообщение--------------------------
	 проц = 100*ЗаказНовый1.Товары.Итог("Количество")/?(ЗаказНовый.Товары.Итог("Количество")=0,1,ЗаказНовый.Товары.Итог("Количество"));  //+++ 08.07.2014 
		Если Вопрос("Есть "+ строка( ЗаказНовый1.Товары.Количество() )+" позиций у поставщика: "+строка(ЗаказНовый1.Поставщик)+"
			|("+строка(ЗаказНовый1.Товары.Итог("Количество"))+" из оставшихся "+строка(ЗаказНовый1.Товары.Итог("Количество")+ЗаказНовый.Товары.Итог("Количество"))+" шт.)
			|
			|Создать заказ с доставкой "+строка(ВыборкаПоставщиков.СрокДоставки)+" дн.?", РежимДиалогаВопрос.ДаНет, 30) = КодВозвратаДиалога.Да Тогда
		
			Если КолЗаказов=0 и не ПерезаписанИсходныйЗаказ Тогда //+++ это Первый заказ, значит в ЯШТ ничего нет!
				Если Вопрос("Оставить в текущем заказе только то, 
					|что есть у поставщика: "+строка(ЗаказНовый1.Поставщик)+" (Да)?	
					|Иначе - разделение заказа будет отменено (Нет)."
					, РежимДиалогаВопрос.ДаНет, 60) = КодВозвратаДиалога.Нет Тогда
					//+++ 14.10.2014
					ВОЗВРАТ;
				Иначе //----------------запись в текущий заказ - того, что есть у поставщика------------------------
					ПерезаписанИсходныйЗаказ = Истина ; //перезапись в первоначальный заказ!
					
					ДокументОбъект.Проверен  = ЛОЖЬ; // проделен НЕ сразу!
					
					//+++ 10.11.2014 - автосогласование
					ДокументОбъект.Согласован= Ложь;
					ДокументОбъект.Статус    = перечисления.СтатусыЗаказов.ВОбработке; //02.02.2017 сразу в обработке!
					ДокументОбъект.Поставщик = ЗаказНовый1.Поставщик;
				
					ДокументОбъект.ДатаОтгрузки = макс(ДокументОбъект.ДатаОтгрузки , ТекущаяДата()+ ВыборкаПоставщиков.СрокДоставки*86400 );
					ДокументОбъект.ДатаОплаты  =  макс(ДокументОбъект.ДатаОплаты, ДокументОбъект.ДатаОтгрузки );
					
					ДокументОбъект.Комментарий = "Есть "+строка(ДокументОбъектЯШТ.Товары.Итог("Количество"))+" из "+строка(ДокументОбъект.Товары.Итог("Количество")) +" шт. на Складе2 # "+ДокументОбъект.Комментарий; 
					ДокументОбъект.Товары.Очистить();
					ДокументОбъект.Товары.Загрузить(ЗаказНовый1.Товары.Выгрузить() );
				КонецЕсли;	
			Иначе // это не 1-ый заказ, поэтому отделяем в отдельный заказ без вопросов
				
				КолЗаказов    = КолЗаказов + 1 ;//отдельный заказ всегда
				СтрокаПрефикс = ЗаказНовый1.Подразделение.ПрефиксИБ;
				СтрокаПрефикс = ?(СтрокаПрефикс="", "ТК", СтрокаПрефикс);
					
				Если всеПоставщикиВОдномЗаказе Тогда //14.11.2016
					Если ЗаказНовыйВСЕ.Товары.Количество() = 0 Тогда  //первый заказ поставщика
						ЗаполнитьЗначенияСвойств(ЗаказНовыйВСЕ, ЗаказНовый1);  
						ЗаказНовыйВСЕ.Товары.Загрузить(ЗаказНовый1.Товары.Выгрузить() ); 
					 	ЗаказНовыйВСЕ.Номер = ""; //УстановитьНовыйНомер(СтрокаПрефикс);	//не правильно работает!
						ЗаказНовыйВСЕ.Проверен = константы.ИспользоватьДележкуЗаказовВМинус.Получить(); // проделиваем сразу (-) св.остаток + (+)тов.в ожидании!
					Иначе
						Для каждого стр1 из ЗаказНовый1.Товары Цикл // продолжение
						стр2 =  ЗаказНовыйВСЕ.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(стр2, стр1);
						КонецЦикла;
					КонецЕсли;
					
					Попытка
						ЗаказНовыйВСЕ.Записать(РежимЗаписиДокумента.Проведение);
						ЭтотОбъект.Комментарий = "("+ЗаказНовыйВСЕ.Номер+"("+строка(ВыборкаПоставщиков.СрокДоставки)+" дн.), "+ЭтотОбъект.Комментарий;
						сообщить("Заказаны товары у поставщика: "+строка(ВыборкаПоставщиков.Поставщик)+строка(ВыборкаПоставщиков.СрокДоставки)+" дн. "+строка(ЗаказНовыйВСЕ));
				 	Исключение
						сообщить("Не удалось Создать заказ поставщику: "+строка(ВыборкаПоставщиков.Поставщик)+" : "+ОписаниеОшибки(), СтатусСообщения.Внимание);
						Возврат;
					КонецПопытки;

					
                Иначе //===================раздельно по каждому поставщику================================
					Попытка
					 	ЗаказНовый1.Номер = ""; //УстановитьНовыйНомер(СтрокаПрефикс);	//не правильно работает!
						ЗаказНовый1.Проверен = константы.ИспользоватьДележкуЗаказовВМинус.Получить(); // проделиваем сразу (-) св.остаток + (+)тов.в ожидании!
						ЗаказНовый1.Записать(РежимЗаписиДокумента.Проведение);
						
						ЭтотОбъект.Комментарий = ЗаказНовый1.Номер+"("+строка(ВыборкаПоставщиков.СрокДоставки)+" дн.), "+ЭтотОбъект.Комментарий;
						сообщить("Заказаны товары у поставщика: "+строка(ВыборкаПоставщиков.Поставщик)+строка(ВыборкаПоставщиков.СрокДоставки)+" дн. "+строка(ЗаказНовыйВСЕ));
				 	Исключение
						сообщить("Не удалось Создать заказ поставщику: "+строка(ВыборкаПоставщиков.Поставщик)+" : "+ОписаниеОшибки(), СтатусСообщения.Внимание);
						Возврат;
					КонецПопытки;
				КонецЕсли;
				
			КонецЕсли;
				
		 Иначе //+++ 08.07.2014 - все позиции обратно в ЗаказНовый Для следующего анализа
			
			Для каждого стр1 из ЗаказНовый1.Товары Цикл
				стр0 = ЗаказНовый.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(стр0, стр1);
			КонецЦикла;
			//сворачиваем одинаковые товары
			табЗнач = ЗаказНовый.Товары.Выгрузить();
			табЗнач.Свернуть("Номенклатура, Цена, ЕдиницаИзмерения, Коэффициент", "Количество, Вес");
			i=0;
			Пока i<табЗнач.Количество()-1 Цикл
				Если табЗнач[i].Количество <=0 Тогда
					табЗнач.Удалить(i);
				Иначе i = i + 1;
				КонецЕсли;	
			КонецЦикла;	
			
			Если табЗнач.Количество()<>ЗаказНовый.Товары.Количество() 
				или табЗнач.Итог("Количество")<>ЗаказНовый.Товары.Итог("Количество")Тогда
				ЗаказНовый.Товары.Очистить();
				Для i=0 по табЗнач.Количество()-1 Цикл
					стр0 = ЗаказНовый.Товары.Добавить();
			 		ЗаполнитьЗначенияСвойств(стр0, табЗнач[i]);
					
					стр0.СтавкаНДС = перечисления.СтавкиНДС.НДС18;
					РассчитатьСуммуТабЧасти(стр0, ЗаказНовый);
					РассчитатьСуммуНДСТабЧасти(стр0, ЗаказНовый);
				КонецЦикла;
			КонецЕсли;	
			
		КонецЕсли; //КонецВопроса
		
		
		
	ИначеЕсли ЗаказНовый1.Товары.Количество()=ДокументОбъект.Товары.Количество() 
		и ЗаказНовый1.Товары.Итог("Количество")=ДокументОбъект.Товары.Итог("Количество") Тогда //+++ 08.07.2014 полностью подтвержден у Поставщика!
		
			Если Вопрос("Весь товар - есть у Поставщика: "+строка(ЗаказНовый1.Поставщик)+"
				|Изменить текущий заказ на заказ с доставкой "+строка(ВыборкаПоставщиков.СрокДоставки)+" дн. ?", РежимДиалогаВопрос.ДаНет, 30) = КодВозвратаДиалога.Да Тогда
 				ЭтотОбъект.Комментарий  = "Срок доставки: "+строка(ВыборкаПоставщиков.СрокДоставки)+" дн. "+ ЭтотОбъект.Комментарий;
				
				ДокументОбъект.Проверен = Константы.ИспользоватьДележкуЗаказовВМинус.Получить(); //+++  16.11.2016 сразу проделивается в "-" и "+" товары в ожидании
				
				//+++ 16.11.2016 - автосогласование сразу НЕЛЬЗЯ делать, Иначе еще раз создастся заказ поставщику?!
				ДокументОбъект.Согласован= ЛОЖЬ;
				ДокументОбъект.Статус    = перечисления.СтатусыЗаказов.ВОбработке; // сразу в обработке !
				
				ДокументОбъект.Поставщик= ВыборкаПоставщиков.Поставщик;
								
				ДокументОбъект.ДатаОтгрузки = макс(ДокументОбъект.ДатаОтгрузки, ТекущаяДата()+ВыборкаПоставщиков.СрокДоставки*86400 );    //+++ 14.10.2014
				ДокументОбъект.ДатаОплаты   = макс(ДокументОбъект.ДатаОтгрузки, ДокументОбъект.ДатаОплаты );  //02.02.2017 дата оплаты не ранее чем ДатаОтгрузки ?!
				
				ПерезаписанИсходныйЗаказ = Истина ; //перезапись в первоначальный заказ!
				Возврат;

			Иначе //оставляем непроделенным
				Предупреждение("        Товаров нет в наличии!
						        |поэтому флаг 'К отгрузке' - выключен!", 10);
				ДокументОбъект.Проверен = ЛОЖЬ; // не проделен!
				ДокументОбъект.Согласован = ложь;
				ДокументОбъект.Статус   = Перечисления.СтатусыЗаказов.ПустаяСсылка();
				ДокументОбъект.Поставщик= справочники.Контрагенты.ПустаяСсылка();
				
				ДокументОбъект.ДатаОтгрузки = макс(ДокументОбъект.ДатаОтгрузки, ТекущаяДата() );  //+++ 14.10.2014
			    ДокументОбъект.ДатаОплаты   = макс(ДокументОбъект.ДатаОплаты, ДокументОбъект.ДатаОтгрузки);
				
				ПерезаписанИсходныйЗаказ = Истина ; //перезапись в первоначальный заказ!
				Возврат;
				
 			КонецЕсли;
			
		КонецЕсли;	//===================================	
			
		
	КонецЕсли;// Если ВыборкаТов.Количество()>0
	
КонецЦикла;//по всем поставщикам....


//+++( 03.10.2017 --- смотрим остатки в Ярославле --------------------------------------------------------
// и Если есть - создаём ЗаказНовыйЯрославль
// а остаток (как и раньше) остаётся в ЗаказНовый
//
Если ЗаказНовый.Товары.Количество()>0 и ЭтотОбъект.Подразделение.ОбособленноеПодразделение Тогда
	
 	ЗаказНовыйЯрославль = документы.ЗаказПокупателя.СоздатьДокумент();
 	ЗаполнитьЗначенияСвойств(ЗаказНовыйЯрославль, ЗаказНовый);
	ЗаказНовыйЯрославль.Товары.Загрузить( ЗаказНовый.Товары.Выгрузить() ); //сразу всю таблицу
	
	ЗаказНовыйЯрославль.Транзит = ЛОЖЬ;
 	ЗаказНовыйЯрославль.Подразделение  = справочники.Подразделения.НайтиПоКоду("00005");//Ярославль
	
	ЗаказНовыйЯрославль.Склад = ЗаказНовый.Подразделение.Склад;// Склад ФИЛИАЛА для 293 обработки - резерв с Ярославля для перемещения и отгрузки с Филиала!
	ЗаказНовыйЯрославль.ОтгрузкаСПодразделенияСклада = Истина;
	
	ЗаказНовыйЯрославль.Грузоотправитель = справочники.Контрагенты.ПустаяСсылка();
	ЗаказНовыйЯрославль.Поставщик = справочники.Контрагенты.ПустаяСсылка();
	ЗаказНовыйЯрославль.Статус = перечисления.СтатусыЗаказов.ПустаяСсылка(); // нет статуса
	ЗаказНовыйЯрославль.Комментарий =ЭтотОбъект.Номер+">>Ярославль # "+ЭтотОбъект.Комментарий;
	ЗаказНовыйЯрославль.Проверен = ИСТИНА;  //СРАЗУ ПРОДЕЛИВАЕМ!
	ЗаказНовыйЯрославль.Номер    = "";
	ЗаказНовыйЯрославль.Дата     = ТекущаяДата();
	ЗаказНовыйЯрославль.ДатаОтгрузки = макс(ДокументОбъект.ДатаОтгрузки, ТекущаяДата() );  
	ЗаказНовыйЯрославль.ДатаОплаты   = макс(ЗаказНовый.ДатаОплаты, ЗаказНовый.ДатаОтгрузки);
			 
	Результат = ПолучитьЗапросЧегоНет( ЗаказНовыйЯрославль ); //повторно та же функция, ссылки ещё нет! 

  	Если Результат.Пустой() Тогда //Если пустой - то ЗаказНОВЫЙ  НЕ НУЖЕН !
		Сообщить("Все товары, которых нет в филиале - ЕСТЬ в Ярославле!", СтатусСообщения.Информация);
		ЗаказНовый.Товары.Очистить();
	КонецЕсли;//Если все есть 

	табЗнач = Результат.Выгрузить();
	
	Если  ЭтотОбъект.Контрагент <> Справочники.Контрагенты.НайтиПоКоду("П004703") Тогда 
			//------------ Оставляем, что есть в Ярославле -----------
			Для i=0 по табЗнач.Количество()-1 Цикл
				стр0 = ЗаказНовыйЯрославль.Товары.Найти(табЗнач[i].Номенклатура, "Номенклатура");
				ЕстьВЯрославле=Макс(Мин( табЗнач[i].КоличествоВЗаказе, табЗнач[i].СвОстаток),0) ;
				Если ЕстьВЯрославле>0 Тогда
		 			стр0.Количество = ЕстьВЯрославле;
					стр0.СтавкаНДС  = перечисления.СтавкиНДС.НДС18;
					РассчитатьСуммуТабЧасти(стр0, ЗаказНовыйЯрославль);
					РассчитатьСуммуНДСТабЧасти(стр0, ЗаказНовыйЯрославль);
				Иначе   
					ЗаказНовыйЯрославль.Товары.Удалить( стр0 );
				КонецЕсли;	
			КонецЦикла;
			
		//------- Оставляем только то, чего нет в Ярославле -----------
		Если ЗаказНовый.Товары.Количество()>0 тогда
			Для каждого стрЯр из ЗаказНовыйЯрославль.Товары Цикл
				стр0 = ЗаказНовый.Товары.Найти(стрЯр.Номенклатура, "Номенклатура");
				Если стр0.Количество - стрЯр.Количество>0 Тогда
		 			стр0.Количество = стр0.Количество - стрЯр.Количество;
					стр0.СтавкаНДС  = перечисления.СтавкиНДС.НДС18;
					РассчитатьСуммуТабЧасти(стр0, ЗаказНовый);
					РассчитатьСуммуНДСТабЧасти(стр0, ЗаказНовый);
				Иначе   
					ЗаказНовый.Товары.Удалить( стр0 );
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
		
			Если ЗаказНовыйЯрославль.Товары.Количество()=0 Тогда //Ничего нет 
				Сообщить("Все товары, которых нет в филиале - их нет и в Ярославле.", СтатусСообщения.Внимание);
	        Иначе
				Попытка 
					КолЗаказов = КолЗаказов + 1;
					ЗаказНовыйЯрославль.Записать(РежимЗаписиДокумента.Проведение);
					
					ЭтотОбъект.Комментарий = ЗаказНовыйЯрославль.Номер+"(Ярославль), "+ЭтотОбъект.Комментарий;
					сообщить("Создан заказ: "+строка(ЗаказНовыйЯрославль));
				Исключение
					сообщить("Не удалось разбить заказ по св.остаткам Ярославля: "+ОписаниеОшибки(), СтатусСообщения.Внимание);
					ЗаказНовыйЯрославль.ПолучитьФорму("ФормаДокумента").Открыть();
				 	Возврат;
				КонецПопытки;
			КонецЕсли;	
			
		КонецЕсли;	 // П004703
		
КонецЕсли;	
//+++)

//-------------------------------------------------остаток которого нигде нет!-----------------------------------------
Если ЗаказНовый.Товары.Количество()>0 
	 И (ПерезаписанИсходныйЗаказ 
	    или (НЕ ПерезаписанИсходныйЗаказ и ЗаказНовый.Товары.Количество()<=ДокументОбъект.Товары.Количество() 
	 	     и ЗаказНовый.Товары.Итог("Количество")<ДокументОбъект.Товары.Итог("Количество")
			 ) 
		)	 Тогда
	 КолЗаказов = КолЗаказов + 1;
	 //08.04.2016 Смирнов - Резерв ИМ, заказ с товаром которого нет в наличии не создаем
	 Если ЭтотОбъект.Контрагент <> Справочники.Контрагенты.НайтиПоКоду("П004703") Тогда 
	 	 Попытка 
			 ЗаказНовый.Статус = перечисления.СтатусыЗаказов.ПустаяСсылка(); // нет статуса
			 ЗаказНовый.Комментарий =ЭтотОбъект.Номер+">>нет # "+ЭтотОбъект.Комментарий;
			 ЗаказНовый.Проверен = Ложь;  //нельзя проделить то, чего нет нигде!
			 ЗаказНовый.Номер = "";
			 ЗаказНовый.Дата  = ТекущаяДата();
			 ЗаказНовый.ДатаОтгрузки = макс(ДокументОбъект.ДатаОтгрузки, ТекущаяДата() );  //+++ 14.10.2014
			 ЗаказНовый.ДатаОплаты   = макс(ЗаказНовый.ДатаОплаты, ЗаказНовый.ДатаОтгрузки);
			 
			 ЗаказНовый.Записать(РежимЗаписиДокумента.Проведение);
			 
			 ЭтотОбъект.Комментарий = "Заказ разделен: "+ЗаказНовый.Номер+"(нет), "+ЭтотОбъект.Комментарий;
			 
			 #Если Клиент Тогда
				 сообщить("Создан заказ: "+строка(ЗаказНовый));
			 #КонецЕсли	
			 
		 Исключение
			 //// все равно записать заказ поставщику
			 #Если Клиент Тогда
				 сообщить("Не удалось провести заказ на остаток товара, которого Нет в наличии : "+ОписаниеОшибки(), СтатусСообщения.Внимание);
			 #КонецЕсли	
			 ЗаказНовый.ПолучитьФорму("ФормаДокумента").Открыть();
			 Возврат;
		 КонецПопытки;
	 КонецЕсли;
	 
ИначеЕсли не ПерезаписанИсходныйЗаказ и ЗаказНовый.Товары.Количество()=ДокументОбъект.Товары.Количество()
	и ЗаказНовый.Товары.Итог("Количество") = ДокументОбъект.Товары.Итог("Количество") Тогда
	ДокументОбъект.Статус   = перечисления.СтатусыЗаказов.ПустаяСсылка(); // как будто не 
	ДокументОбъект.Проверен = ЛОЖЬ; // не проделен!
	ЭтотОбъект.Комментарий  = "Нет в наличии. "+ ЭтотОбъект.Комментарий;
	ПерезаписанИсходныйЗаказ = Истина;
ИначеЕсли  КолЗаказов>0 или ЗаказНовый.Товары.Количество()>0 Тогда
	ЭтотОбъект.Комментарий = "Заказ разделен: "+ЭтотОбъект.Комментарий;
КонецЕсли;
 	
	//=====================================================================================================
		Если НЕ ПерезаписанИсходныйЗаказ Тогда
			ЭтотОбъект.Поставщик = справочники.Контрагенты.ПустаяСсылка();
			ЭтотОбъект.Проверен = ЛОЖЬ;
			ЭтотОбъект.Статус   = ?(ДокументОбъектЯШТ.Товары.Количество()>0, перечисления.СтатусыЗаказов.ПолученЧастично,
								  перечисления.СтатусыЗаказов.ВОбработке); // Для заказа ЯШТ тоже лучше сразу указывать что он есть!
			ЭтотОбъект.ПометкаУдаления = Истина; // сразу удалять?!

		Иначе //Если ПерезаписанИсходныйЗаказ Тогда //Где-то подтверждено все...или часть!
			ЭтотОбъект.ПометкаУдаления = Ложь;
		КонецЕсли;
		
	Попытка //проведение/отмена проведения - и так в транзакции
		Если ЭтотОбъект.ПометкаУдаления и ЭтотОбъект.Проведен Тогда
			ЭтотОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения); //отмена проведения!
		ИначеЕсли НЕ ЭтотОбъект.ПометкаУдаления и ЭтотОбъект.Проведен Тогда
			ЭтотОбъект.Записать(РежимЗаписиДокумента.Проведение); //перепроведение!
		Иначе
			ЭтотОбъект.Записать(); //просто перезаписываем!
		КонецЕсли;	
		ЭтаФорма.Обновить();
	Исключение
		сообщить("Ошибка при перезаписи этого заказа: "+ОписаниеОшибки(), СтатусСообщения.Внимание );
	КонецПопытки;

КонецПроцедуры //разделение заказа
	 
// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
	
	Если мОбновлятьВладельца Тогда
		ОповеститьОЗаписиНовогоОбъекта(ЭтотОбъект);
	КонецЕсли; 
КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	////15.05.2017 проверка св.остатка ТОЛЬКО Если заказ проверен!
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение и ЭтотОбъект.Проверен Тогда
		ТаблПоставщиков = неопределено; 
	//+++ 17.11.2017	ПроверитьРезервы(ЭтотОбъект, Отказ, ТаблПоставщиков); 
		
		//+++ 19.07.2017 ---  нельзя делить в "минус" никому и никогда!
		Если Отказ Тогда 
			ЭтотОбъект.Проверен = ЛОЖЬ;
			Сообщить(" Нельзя проводитить Заказ в ""минус""!!!", СтатусСообщения.ОченьВажное);
			ВОЗВРАТ; // сразу стоп!
		КонецЕсли;
		
	КонецЕсли;
	
	///Для контрагента Диски, крышки,брак, д.б. определенный перечень договоров
	Если СокрЛП(Контрагент.Код) = "92296" Тогда
		Список = Новый СписокЗначений;
		Список.Добавить("Д0001");
		Список.Добавить("Д0002");
		Список.Добавить("Д0003");
		Список.Добавить("Д0004");
		Список.Добавить("Д0005");
		Если Список.НайтиПоЗначению(СокрЛП(ДоговорКонтрагента.Код)) =Неопределено Тогда
		Сообщить("Укажите один из договоров с наименованием контрагента");
		отказ = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	// Если меняются  руками заказы по автокомплектации, то меняем им тип заказа
	Если ТипЗаказа=1 Тогда
	 ТипЗаказа=0;	
	КонецЕсли;
	
	//+++29.03.2017
	Рез=НайтиДоговорФакторинга(Контрагент, Дата);
	Если Рез.ЕстьДоговорФакторинга Тогда
	спис = ПолучитьСписокРазрешенныхДоговоров(Контрагент, Дата ); 
		Если спис.найтиПоЗначению(ДоговорКонтрагента.Код) = неопределено Тогда
			Если не (ЭтотОбъект.ПометкаУдаления или РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения) Тогда 
			Отказ = истина;
		   	Сообщить("У клиента есть действующий договор Факторинга! Нельзя использовать договор '"+строка(ДоговорКонтрагента)+"'!", СтатусСообщения.Внимание);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//+++ 29.04.2015 - ОБЯЗАТЕЛЬНО только Для договоров ФА!
	Если (СокрЛП(ДоговорКонтрагента.ТипДоговора.Код) = "Я0004" 
			или ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ФормулаАвтоПлюс //Контрагент.Код = "92797"
			или ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ШинтрейдЯрославль
		 ) и ТРНал=0 и ТрБезНал=0 и ТрВЦене=0 
		//Для самовывоза - можно!
		и НЕ СпособОтгрузки = справочники.СпособыОтгрузкиТовара.НайтиПоНаименованию("автомобильным транспортом силами Покупателя за счет Покупателя") Тогда
	    Предупреждение("Заполните обязательные поля - Сумму транспортных расходов: Нал/БезНал/ВЦене!",10);
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ТранспортныеУслуги;
        Отказ = НЕ РольДоступна("ПолныеПрава"); 
	КонецЕсли;	
	////ОЛ 12.02.2015 - Для экспорта
	//Если ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль Тогда
	//	Если СуммаКомпенсацииТранспорта = 0 Тогда
	//		сообщить("Необходимо указать Сумму компенсации транспортных услуг покупателем (см. закладка Дополнительно)!");
	//	КонецЕсли;	
	//	Если СокрЛП(УсловиеПоставкиНаЭкспорт)="" Тогда
	//		СообщитьОбОшибке("Необходимо заполнить Условие поставки на экспорт (см. закладка Дополнительно)!");
	//		Отказ = Истина;
	//	КонецЕсли;
	//КонецЕсли;	
	////Конец ОЛ
	
	//+++ 03.08.2012  как в реализации - ограничение используемых складов - только по своему подразделению!
	Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") Тогда
		
		Если ЗначениеЗаполнено(Склад) И  ( (Транзит и (Склад.Подразделение <> Подразделение))
			                           или (НЕ Транзит и ЗначениеЗаполнено(Склад.Подразделение)) 
									      ) Тогда
			Сообщить("Нельзя делать отгрузки со склада " + Склад + " не принадлежащему подразделению "+строка(Подразделение), СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Подразделение) 
			И Не Подразделение = ПараметрыСеанса.ТекущийПользователь.ОсновноеПодразделение
			И Не РольДоступна("Партнер") Тогда // Для заказов - НЕ на перемещение - запрет!
			
		//+++( 02.06.2015 - отбор по 1 или нескольким подразделениям
		списокПодразделенийПользователя = получитьСписокРазрешенныхОбъектовПользователя(глТекущийПользователь, "Подразделения"); 
			
			//+++ 01.10.2014 - из Филиала - можно делать заказ напрямую или Для перемещения из Ярославля!
			Если НЕ ( Подразделение.Код = "00005"
				     или списокПодразделенийПользователя.найтиПоЗначению(Подразделение)<>неопределено) Тогда 
				Сообщить("В документе установлено недоступное Для вас подразделение: "+строка(Подразделение), СтатусСообщения.Внимание);
				Отказ = Истина;
			КонецЕсли;
		
		КонецЕсли;
		
		//Орлов ++ 05022014
		Если РольДоступна("Партнер") И (Не Подразделение = ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновноеПодразделение")) Тогда
			Сообщить("Выбрано подразделение "+строка(Подразделение)+", не соответствующее вашему подразделению.", СтатусСообщения.Внимание);
			Отказ = Истина;
		//Орлов -- 05022014
		КонецЕсли;
		
	КонецЕсли;//+++)
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если ЗначениеНеЗаполнено(Контрагент.КатегорияПокупателя) И ЭтотОбъект.Проверен Тогда
			СообщитьОбОшибке("Категория покупателя не заполнена. Заказ не может быть отгружен.");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда //+++ 19.07.2017 - затирает предыдущее значение Истина!
	//Миронычев
		Если ДоговорКонтрагента.ТипДоговора <> Справочники.ТипыДоговоров.ПредоплатаПоСчетам Тогда //+++14.08.2017
		// Если нет договора в наличии или нет бумажного договора - НЕ ПРОВОДИМ ЗАКАЗ!
   		ПроверитьДоговорВЗаказеПокупателя(ЭтотОбъект, Отказ);
		КонецЕсли;
	//КонецМиронычев
	КонецЕсли;
	
	Если ЭтаФорма.Модифицированность И ЭтаФорма.ВладелецФормы <> Неопределено И НЕ ЭтоНовый() Тогда
		мОбновлятьВладельца = Истина;
	КонецЕсли;
	
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "МенятьОтветственного") Тогда 
		яштСменаПользователя(ЭтотОбъект, ЭтаФорма, глТекущийПользователь);
	КонецЕсли;
	
	ПроверитьКомментарийДляОбменаПоРознице(ЭтотОбъект,Отказ);
	
	ЗаполнитьВесНетто(Товары);
	
	//+++ регистрация изменений таб.части - Для проделенных и проведенных заказов
	// - включена обратно 22.05.2013 
	Если Проверен и Проведен и не Отказ Тогда 
		обЗаписатьПротоколИзменений(ЭтотОбъект, ЛОЖЬ); //+++ 01.04.2014 все реквизиты и таб.часть!    , Истина);
	КонецЕсли;
	
//Орлов++
Если ЭтоНовый() Тогда
		
	Если ДатаОплаты='00010101' Тогда //+++ 07.07.2014 - когда уже ввели дату оплаты - незачем ее еще раз спрашивать...
		ФормаОтсрочки = ПолучитьФорму("ФормаОтсрочки");
		ЗначениеФормыОтсрочки = ФормаОтсрочки.ОткрытьМодально();
		
		Если ТипЗнч(ЗначениеФормыОтсрочки) = Тип("Дата") Тогда
			ДатаОплаты = ЗначениеФормыОтсрочки;	
		Иначе
			ЧислоДнейСМоментаОтгрузки = ЗначениеФормыОтсрочки;
			ДатаОплаты = Дата + 86400 * ЧислоДнейСМоментаОтгрузки;
		КонецЕсли;
	КонецЕсли;
	
		//***2014.03.21 ФедороваК
		Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
			Подразделение = Справочники.Подразделения.НайтиПоКоду("00005"); //Головное подр.
		КонецЕсли;
		//***

КонецЕсли;
//Орлов--
	
Если ЭтоНовый()   // 14.01.2016
	и ТипЗаказа=0 // ручной ввод!
	и ТипЦен <> справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00006") Тогда  //16.12.2015  - ручная, цены уже пересчитаны?!
	Если Вопрос("Пересчитать цены по правилам ценообразования клиента?",РежимДиалогаВопрос.ДаНет,30) = КодВозвратаДиалога.Да Тогда
		КоманднаяПанельТоварыЦенаКонтрагента(неопределено);
	КонецЕсли;	 
КонецЕсли;

	//    ЗамерыВремени
	//+++ 12.04.2016 - по другому будет!
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда	
	//	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(Справочники.КлючевыеОперации.ПроведениеЗаказаПокупателя);
	ДатаНачалаКлючевойОперации = ТекущаяДата();
	ДатаНачалаЗаписи = ОценкаПроизводительностиКлиентСервер.ЗначениеТаймера();
	Иначе
		ДатаНачалаЗаписи = 0;
	КонецЕсли;
		
КонецПроцедуры // ПередЗаписью()


// Обработчик внешнего события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	Если глТорговоеОборудование <> Неопределено Тогда
		СтруктураПараметров = Новый Структура();
		Если Событие = "BarCodeValue" Тогда

			ИмяТекущейСтраницы = ЭтаФорма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
			Если ИмяТекущейСтраницы = "Товары" Тогда

				Команда         = "ПодборВТабличнуюЧастьТовары";
				Валюта          = ВалютаДокумента;
				ИмяТабличнойЧасти = "Товары";

			ИначеЕсли ИмяТекущейСтраницы = "Услуги" Тогда

				Команда         = "ПодборВТабличнуюЧастьУслуги";
				Валюта          = ВалютаДокумента;
				ИмяТабличнойЧасти = "Услуги";

			ИначеЕсли ИмяТекущейСтраницы = "Тара" Тогда

				Если ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
					Предупреждение("Не выбран договор контрагента!");
					Возврат;
				ИначеЕсли ЗначениеНеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
					Предупреждение("Не выбрана валюта взаиморасчетов по договору!");
					Возврат;
				КонецЕсли;

				Команда           = "ПодборВТабличнуюЧастьВозвратнаяТара";
				Валюта = ДоговорКонтрагента.ВалютаВзаиморасчетов;
				ИмяТабличнойЧасти = "ВозвратнаяТара";

			Иначе

				// Ничего не надо делать
				Возврат;

			КонецЕсли;

			ПредставлениеДок = Метаданные().Представление();
			ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);

			СтруктураПараметров.Вставить("Команда"              , Команда);
			СтруктураПараметров.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
			СтруктураПараметров.Вставить("ТипЦен"               , ТипЦен);
			СтруктураПараметров.Вставить("СпособЗаполненияЦен"  , Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);
			СтруктураПараметров.Вставить("ВалютаЦены"           , Валюта);
			СтруктураПараметров.Вставить("ИмяТабличнойЧасти"    , ИмяТабличнойЧасти);

			глТорговоеОборудование.ОбработатьВнешнееСобытиеОтСканераДляФормы(ЭтаФорма, ЭтотОбъект, СтруктураПараметров, Данные);

		ИначеЕсли Событие = "MagneticStripeCardValue" Тогда
			СтруктураПараметров.Вставить("Команда"              , "");
			глТорговоеОборудование.ОбработатьВнешнееСобытиеОтРидераДляФормы(ЭтаФорма, ЭтотОбъект, СтруктураПараметров, Данные);

		Иначе
			Возврат;
		КонецЕсли;

		Команда = "";
		СтруктураПараметров.Свойство("Команда", Команда);
		//Расчет скидок
		Если РассчитыватьАвтоматическиеСкидки()
			И Команда = "РассчитатьДисконтныеСкидки"Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
			СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
			СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
			СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
			СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
			СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
			РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ВнешнееСобытие()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

//+++ 10.10.2017 - ПостПроверка и авто-установка галки [v]Крышки  по задаче № 34280
Процедура СделатьПроверкиПОСЛЕУстановкиВМаршрут()
	
	Если ВМаршрут и НЕ ТребуютсяКрышки тогда  //[ ]Крышки выключена
		масПост = новый массив; 
		масПост.Добавить( справочники.Производители.НайтиПоКоду(65)  );
		масПост.Добавить( справочники.Производители.НайтиПоКоду(3333)); 
		масПост.Добавить( справочники.Производители.НайтиПоКоду(3754));
		
		ЕстьРеплика = ЛОЖЬ;
		Для каждого стр1 из Товары цикл
			для ii=0 по масПост.Количество()-1 цикл
				если стр1.Номенклатура.Производитель = масПост[ii] тогда
					ЕстьРеплика = истина;
					прервать; //хотя бы 1 товар есть
				КонецЕсли;
			КонецЦикла;	
			если ЕстьРеплика тогда прервать; КонецЕсли;
		КонецЦикла;	
		
		Если ЕстьРеплика тогда
		//	ТребуютсяКрышки = Истина; // Автоматически включаем!
			//12.10.2017
			ДатаГотовностиНаборки = ДатаОтгрузки + 17*3600;
			Если Вопрос("В заказе есть диски Реплика. 
			|Автоматически установлена 'Дата сборки крышек' на "+СТРОКА(ДатаГотовностиНаборки)+"
			|Отправить письмо о сборке Крышек для этого заказа?", РежимДиалогаВопрос.ДаНет,0) = КодВозвратаДиалога.Да тогда
			ТребуютсяКрышки = Истина; // Автоматически включаем!
			ТребуютсяКрышкиПриИзменении(неопределено);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)
	
	//+++ 04.06.2015 - категории - только Для Ярославля!
	Отказ = ЛОЖЬ;
	СделатьПроверкиПередУстановкойВМаршрут(Отказ);			
	Если Отказ тогда
		ВОЗВРАТ;
	КонецЕсли;

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма); // монопольно!
	
	ЭтаФорма.ДокументОбъект.Прочитать();  //перечитать данные
	
	СделатьПроверкиПОСЛЕУстановкиВМаршрут(); //+++ 10.10.2017 - ПостПроверка и авто-установка галки [v]Крышки  по задаче № 34280
 	
КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм Для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	рез = НельзяМенятьТоварыИКоличество(1);

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

//+++ 29.09.2017 - рефакторинг
//Не Можно = Нельзя... нет слова Льзя !
Функция НельзяМенятьТоварыИКоличество(УровеньСообщений=0)
	
	 МожноМенять = Истина; //наоборот, но так понятнее, без 2-го отрицания
	 текстСообщения = "";
	 
	 Если не ЭтоНовый() Тогда 
		 
		 Если яштРезервыПоТоварам.ЕстьРезервПоЗаказу(ссылка) Тогда
			МожноМенять=ЛОЖЬ;
	 		текстСообщения = "По заказу уже начали отгружать со склада. Изменять состав заказа нельзя!";
		 ИначеЕсли яштПоЗаказуБылиОтгрузки(Ссылка) Тогда
			МожноМенять=ЛОЖЬ;
			текстСообщения = "По заказу уже были отгрузки или закрытие. Изменять состав заказа нельзя!";
		 ИначеЕсли не Поставщик.Пустая() Тогда
			МожноМенять=ЛОЖЬ;
			текстСообщения = "Это заказ на доставку от Поставщика. Изменять состав заказа нельзя!";
		 КонецЕсли;

		 //+Лукьяненков 12.02.2018
		 ЭлементыФормы.Товары.Колонки.Номенклатура.ЭлементУправления.КнопкаВыбора = МожноМенять;
		 ЭлементыФормы.Товары.Колонки.Номенклатура.ЭлементУправления.КнопкаОчистки = МожноМенять;
		 ЭлементыФормы.Товары.Колонки.Номенклатура.ЭлементУправления.ТолькоПросмотр = НЕ МожноМенять;
		 //-Лукьяненков 12.02.2018

		 ЭлементыФормы.Товары.Колонки.Количество.Доступность   = МожноМенять;
//		 ИзменениеТабличнойЧастиТовары.ТолькоЦены = Истина;
		 ЭлементыФормы.Проверен.Доступность = МожноМенять;
		 
		Если УровеньСообщений=1 и текстСообщения<>"" Тогда
         	Сообщить( текстСообщения,  СтатусСообщения.Внимание );
		ИначеЕсли УровеньСообщений=2 и текстСообщения<>"" Тогда
			Предупреждение( текстСообщения, 30);
		КонецЕсли;	
		
	КонецЕсли;
	
	возврат (НЕ МожноМенять);
	
КонецФункции

// Процедура вызывается при нажатии кнопки "Изменить" командной панели
// табличного поля "Товары", вызывает сервисный механизм Для
// группового изменения значений реквизитов табличной части "Товары".
//
Процедура КоманднаяПанельТоварыДействиеИзменить(Кнопка)

	ИзменениеТабличнойЧастиТовары = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	
	рез = НельзяМенятьТоварыИКоличество(); //без сообщений
		
	// Получим контекст обработки
	ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменые формы.
	ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект             = ЭтотОбъект;
	ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента            = ЭтаФорма;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьНДС                   = УчитыватьНДС; 
	ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице          = Ложь;
	ФормаИзменениеТабличнойЧастиТовары.мРассчитыватьАвтоматическиеСкидки   = РассчитыватьАвтоматическиеСкидки();
	ФормаИзменениеТабличнойЧастиТовары.мМинимальныеЦены = мМинимальныеЦены;
	ФормаИзменениеТабличнойЧастиТовары.мСписокФильтров = мСписокФильтров;
	ФормаИзменениеТабличнойЧастиТовары.мСпособЗаполненияЦен       = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	//Перенесем табличную часть
	ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры // КоманднаяПанельТоварыДействиеИзменить()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм Для изменения
// общих Для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Задать набор реквизитов Для редактирования.
	СтруктураРеквизитовДокумента = ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	// Сохраняем текущие заначения реквизитов документа.
	ТекущиеЗначенияРеквизитов = Новый Структура();
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийТипЦен",				ТипЦен);
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийВалютаДокумента",	ВалютаДокумента); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийКурсДокумента",		КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийКратностьДокумента",	КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийУчитыватьНДС",		УчитыватьНДС); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийСуммаВключаетНДС",	СуммаВключаетНДС); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийИспользоватьПлановуюСебестоимость",	ИспользоватьПлановуюСебестоимость);
	ТекущиеЗначенияРеквизитов.Вставить("Контрагент", Контрагент);

	//+++ 29.12.2014 - Горохов В. - всегда перезаполнять цены по типу цен 
	//               - флаг не доступен никому (кроме нескольких ролей)!	
	СтруктураРеквизитовДокумента.Вставить("ПерезаполнитьЦеныПоТипу", Истина);
	
	//26.10.2015 - ограничение только Для Рублей!
	Если ВалютаДокумента.Код="643" Тогда  
		СтруктураНеРедактируемыхРеквизитов = новый Структура();
		СтруктураНеРедактируемыхРеквизитов.Вставить("ПерезаполнитьЦеныПоТипу", РольДоступна("ПравоЗавершенияРаботыПользователей") );
	КонецЕсли;
	//+++)
	
	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            СтруктураНеРедактируемыхРеквизитов, "Товары");  
	Если СтруктураЗначений <> Неопределено Тогда
		ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "Товары",
		                   мВалютаРегламентированногоУчета, , СтруктураЗначений, мСуммаДокументаБезСкидок);

		Если СтруктураЗначений.ТекущийТипЦен <> СтруктураЗначений.НовыйТипЦен Тогда
			ОбновитьФормуПодбора("ТипЦен");
		КонецЕсли;
	КонецЕсли;

////+++ 25.06.2013 - выключаем использование флага "ИспользоватьПлановуюСебестоимость"
//// Выполнить стандартные действия при изменении режима использования плановой себестоимости
//	ИзмененитьРежимИспользованияПлановойСебестоимости(ЭтотОбъект, ЭтаФорма, мВалютаРегламентированногоУчета, ТекущиеЗначенияРеквизитов.ТекущийИспользоватьПлановуюСебестоимость);

	// Пересчитывает плановую себестоимость с учетом новой валюты и налогов
	ИзменитьВалютуНалогиПлановойСебестоимостиТабЧасти(ЭтотОбъект, ТекущиеЗначенияРеквизитов, мВалютаРегламентированногоУчета);

	//+Лукьяненков 28.11.2017 Удалено
	// Итоговая информация об отклонение от плановой себестоимости
	//СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);
    //-Лукьяненков 28.11.2017 Удалено
	
	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;

	УстановитьВидимость();

	//СформироватьНадписьОДоступныхТипахЦенИПороговойЦеныТекущейНоменклатурнойПозиции(ЭлементыФормы.ИнфНадписьПоКонтрагентуИЦене.Заголовок);
	
КонецПроцедуры // КоманднаяПанельТоварыДействиеЦеныВалюта()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Возвратная тара", вызывает сервисный механизм Для
// подбора номеклатуры в табличную часть "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеПодбор(Кнопка)

	ДействиеПодбор(ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию Для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	НапечататьДокументПоУмолчанию(ЭтотОбъект, глТекущийПользователь, мПечатнаяФормаПоУмолчанию);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
//
Процедура ДействияФормыДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = Кнопка.Текст;
		СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		СписокМакетов = ПолучитьСписокПечатныхФорм();
		СтрокаМакетаВСписке = СписокМакетов.НайтиПоЗначению(Кнопка.Имя);
		Если СтрокаМакетаВСписке <> Неопределено Тогда
			Печать(СтрокаМакетаВСписке.Значение);
			СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
			СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;			
			
		Иначе
			СсылкаВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Кнопка.Имя, "_", "-")));
			Печать(СсылкаВнешнейФормы);
			СтруктураМакета.Макет = СсылкаВнешнейФормы;
			СтруктураМакета.ПредставлениеМакета = Кнопка.Текст;
		КонецЕсли;		
		
		мПечатнаяФормаПоУмолчанию = СтруктураМакета.Макет;
		СохранитьТекущуюКнопкуПечати(ЭтотОбъект.Метаданные().Имя, СтруктураМакета);
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеВыбратьПечатнуюФормы()

//Разделение заказа по наличию
// на несколько частей
// 1) то что есть - остаётся в этом заказе
// 2) то что есть у поставщиков
// 3) то чего нет нигде
//4) -- Для филиалов -> сразу делим то, чего нет нигде по Ярославским остаткам
// и снова создаётся несколько заказов
//
Процедура ДействияФормыРазбитьПоНаличию(Кнопка) Экспорт
	
	Если ЭтотОбъект.Товары.Количество()=0 Тогда
		Предупреждение("Нельзя разбивать пустой заказ без Товаров!!!", 30);
		Возврат;
	КонецЕсли;	
	
	Если НЕ ( 	глТекущийПользователь=ДоговорКонтрагента.ОтветственноеЛицо 
			ИЛИ глТекущийПользователь=Контрагент.ОсновнойМенеджерКонтрагента
			ИЛИ РольДоступна("ПолныеПрава") ) Тогда
		Предупреждение("Нельзя разбивать чужой заказ!!!", 30);
		Возврат;
	КонецЕсли;	
	
	Если НельзяМенятьТоварыИКоличество(2) Тогда //предупреждаем!
		Возврат;
	КонецЕсли;
	
	
//+++ 14.11.2016 - разбивка по поставщикам (рн.ТоварыВОжиданииОтПоставщика)!
	Если константы.ИспользоватьДележкуЗаказовВМинус.Получить()
		//+++ 18.09.2014 - Для IT-отдела - можно всегда!
		или РольДоступна("ПравоЗавершенияРаботыПользователей") Тогда 
		
		РазделитьЗаказПоПоставщикам(ЛОЖЬ); // один заказ по разным поставщикам!!!
		Возврат;
		
	КонецЕсли;		
	
	//====дальше - старое... НЕ работает с 10.10.2014 Если ИспользоватьДележкуЗаказовВМинус = Истина!=============
	РазбитьЗаказНаЧасти();	
	
КонецПроцедуры // ДействияФормыДействиеЗаполнитьИПровести()

// НЕ работает с 10.10.2014 !  
// вынесен в отдельную функцию старый механизм разделения
//
процедура РазбитьЗаказНаЧасти()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Транзит",	  Транзит);
	Запрос.УстановитьПараметр("Подразделение",Подразделение);
	//у Ярославских складов НЕТ подразделения!
	Запрос.УстановитьПараметр("ПодразделениеСклада", ?(Транзит, Подразделение, Справочники.Подразделения.ПустаяСсылка()) ); 
	
	СписокКонтрагентовОТХ = Новый СписокЗначений;
	СписокКонтрагентовОТХ = яштПоставщики.ПолучитьСписокПоставщиков(Истина);  //+++ 01.10.2014
	Запрос.УстановитьПараметр("СписокКонтрагентовОТХ",СписокКонтрагентовОТХ);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПокупателяТовары.Номенклатура,
	               |	СУММА(ЗаказПокупателяТовары.Количество) КАК Количество
	               |ПОМЕСТИТЬ ВТ_ЗаказТовары
	               |ИЗ
	               |	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	               |ГДЕ
	               |	ЗаказПокупателяТовары.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказПокупателяТовары.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	А.Номенклатура,
	               |	СУММА(А.КоличествоОстаток) КАК КоличествоОстаток,
	               |	СУММА(А.КоличествоНаОТХ) КАК КоличествоНаОТХ
	               |ПОМЕСТИТЬ ВТ_ОстаткиНаСкладахИОТХ
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	               |		ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток,
	               |		0 КАК КоличествоНаОТХ
	               |	ИЗ
	               |		РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |				,
	               |				Номенклатура В
	               |						(ВЫБРАТЬ
	               |							ВТ_ЗаказТовары.Номенклатура
	               |						ИЗ
	               |							ВТ_ЗаказТовары)
	               |					И Склад.ЗапретитьИспользование = ЛОЖЬ
	               |					И Склад.Транзитный = &Транзит
	               |					И Склад.Подразделение = &ПодразделениеСклада) КАК ТоварыНаСкладахОстатки
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ТоварыНаОтветственномХранении.Номенклатура,
	               |		0,
	               |		ТоварыНаОтветственномХранении.КоличествоОстаток
	               |	ИЗ
	               |		РегистрНакопления.ТоварыНаОтветственномХранении.Остатки(
	               |				,
	               |				Номенклатура В
	               |						(ВЫБРАТЬ
	               |							ВТ_ЗаказТовары.Номенклатура
	               |						ИЗ
	               |							ВТ_ЗаказТовары)
	               |					И Склад.ЗапретитьИспользование = ЛОЖЬ
	               |					И Склад.Транзитный = &Транзит
	               |					И Склад.Подразделение = &ПодразделениеСклада
	               |					И Контрагент В (&СписокКонтрагентовОТХ)) КАК ТоварыНаОтветственномХранении) КАК А
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	А.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ЗаказТовары.Номенклатура,
	               |	ВТ_ЗаказТовары.Количество КАК КоличествоВЗаказе,
	               |	ВТ_ЗаказТовары.Количество + ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0) КАК КоличествоЗаказано,
	               |	ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0) КАК КоличествоЗаказаноВДругихЗаказах,
	               |	ЕСТЬNULL(ВТ_ОстаткиНаСкладахИОТХ.КоличествоОстаток, 0) КАК КоличествоОстаток,
	               |	ЕСТЬNULL(ВТ_ОстаткиНаСкладахИОТХ.КоличествоНаОТХ, 0) КАК КоличествоНаОТХ
	               |ИЗ
	               |	ВТ_ЗаказТовары КАК ВТ_ЗаказТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиНаСкладахИОТХ КАК ВТ_ОстаткиНаСкладахИОТХ
	               |		ПО ВТ_ЗаказТовары.Номенклатура = ВТ_ОстаткиНаСкладахИОТХ.Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(
	               |				,
	               |				ЗаказПокупателя.Транзит = &Транзит
	               |					И ЗаказПокупателя.Подразделение = &Подразделение
	               |					И ЗаказПокупателя.Проверен
	               |					И ЗаказПокупателя <> &Ссылка) КАК ЗаказыПокупателей
	               |		ПО ВТ_ЗаказТовары.Номенклатура = ЗаказыПокупателей.Номенклатура
	               |ГДЕ
	               |	ВТ_ЗаказТовары.Количество + ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0) - ЕСТЬNULL(ВТ_ОстаткиНаСкладахИОТХ.КоличествоОстаток, 0) - ЕСТЬNULL(ВТ_ОстаткиНаСкладахИОТХ.КоличествоНаОТХ, 0) > 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_ЗаказТовары
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_ОстаткиНаСкладахИОТХ";
	
	Результат=Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Сообщить("Разбиение не требуется!");
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	ТоварыВНовомЗаказе=Товары.Выгрузить();
	ТоварыВНовомЗаказе.Очистить();	
	
	
	Пока Выборка.Следующий() Цикл
		сч=0;
		Пока сч < Товары.Количество() Цикл
			
			Если Товары[сч].Номенклатура=Выборка.Номенклатура Тогда
				МожноОставитьКоличество=Макс(Мин( Выборка.КоличествоВЗаказе, Выборка.КоличествоНаОТХ+Выборка.КоличествоОстаток-Выборка.КоличествоЗаказаноВДругихЗаказах),0) ;
				Если МожноОставитьКоличество=0 Тогда
					СтрокаВНовомЗаказе=ТоварыВНовомЗаказе.Добавить();	
					ЗаполнитьЗначенияСвойств(СтрокаВНовомЗаказе, Товары[сч]);
					Товары.Удалить(сч);
				Иначе 
					СтрокаВНовомЗаказе=ТоварыВНовомЗаказе.Добавить();	
					КоличествоТребуется = Товары[сч].Количество;
					Товары[сч].Количество =МожноОставитьКоличество;
					РассчитатьСуммуТабЧасти(Товары[сч], ЭтотОбъект);
					РассчитатьСуммуНДСТабЧасти(Товары[сч], ЭтотОбъект);
					
					// пересчитать сумму и ндс
					ЗаполнитьЗначенияСвойств(СтрокаВНовомЗаказе, Товары[сч]);
					СтрокаВНовомЗаказе.Количество = КоличествоТребуется-МожноОставитьКоличество;
					сч=сч+1;
				КонецЕсли;
				Прервать;	
			Иначе
				сч=сч+1;
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	
	ЗаказНовый=ДокументОбъект.Скопировать();		
	ЗаказНовый.Товары.Очистить();
	Для сч =0 по  ТоварыВНовомЗаказе.Количество()-1 Цикл
		СтрокаТовары=ЗаказНовый.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары,ТоварыВНовомЗаказе[сч] );
		РассчитатьСуммуТабЧасти(СтрокаТовары, ЗаказНовый);
		РассчитатьСуммуНДСТабЧасти(СтрокаТовары, ЗаказНовый);
	КонецЦикла;	
	
	ЗаказНовый.ПолучитьФорму("ФормаДокумента").Открыть();

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Анализ" командной панели формы,
// вызывает анализ текущего состояния заказа.
//
Процедура ДействияФормыДействиеАнализ(Кнопка)

	АнализЗаказа = Отчеты.АнализЗаказаПокупателяЯШТ.Создать();
	АнализЗаказаФорма = АнализЗаказа.ПолучитьФорму();

	АнализЗаказа.Заказ = Ссылка;

	АнализЗаказа.СформироватьОтчет(АнализЗаказаФорма.ЭлементыФормы.ДокументРезультат);
	АнализЗаказаФорма.Открыть();

КонецПроцедуры // ДействияФормыДействиеАнализ()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Услуги", вызывает сервисный механизм Для
// подбора номеклатуры в табличную часть "Услуги".
//
Процедура КоманднаяПанельУслугиПодбор(Кнопка)
	
	ДействиеПодбор(Услуги);
	
КонецПроцедуры // КоманднаяПанельУслугиПодбор()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	УстановитьДатуОплатыПоДоговору("ДатаДокумента");
	ПриИзмененииОблагаетсяЕНВД("ДатаДокумента");

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа Для контроля номера документа

	УстановитьДоступностьКнопкиЗаполнитьИПровести();

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "При изменении" флажка Авторазмещение
//
Процедура АвтоРазмещениеПриИзменении(Элемент)

	УстановитьДоступностьКнопкиЗаполнитьИПровести();
	
КонецПроцедуры // АвтоРазмещениеПриИзменении()

// Процедура - обработчик события "При изменении" флажка Авторезервирование
//
Процедура АвтоРезервированиеПриИзменении(Элемент)

	УстановитьДоступностьКнопкиЗаполнитьИПровести();
	
КонецПроцедуры // АвтоРезервированиеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьНомерДокумента(ЭтотОбъект);

	// Выполняем общие действия Для всех документов при изменении Организация.
	ПриИзмененииЗначенияОрганизации(ЭтотОбъект);

	ПриИзмененииОблагаетсяЕНВД("Организация");

	// Надо установить банк. счет, Если он принадлежит другой организации
	// или не заполнен.
	Если ЗначениеНеЗаполнено(СтруктурнаяЕдиница) 
	 ИЛИ (ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") 
	      И (СтруктурнаяЕдиница.Владелец <> Организация)) Тогда

		СтруктурнаяЕдиница = Организация.ОсновнойБанковскийСчет;

	КонецЕсли;
    //27.05.15 Смирнов
	Если Организация.Код="00004" Тогда //TireTechnology
		Транзит=истина;
		Подразделение=Справочники.Подразделения.НайтиПоКоду("00137");
	КонецЕсли;
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// Выполняем общие действия Для всех документов при изменении Контрагент.
	ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);
	
  	ПриИзмененииДоговора();
	
	ДатаОплаты = Дата;
	Если ДоговорКонтрагента.ДержатьРезервБезОплатыОграниченноеВремя Тогда
		ДатаОплаты = ДатаОплаты + ДоговорКонтрагента.ЧислоДнейРезерваБезОплаты * 24 * 60 * 60;
	КонецЕсли;
	
	Если ЗначениеНеЗаполнено(КонтактноеЛицо) Тогда
		КонтактноеЛицо = Контрагент.ОсновноеКонтактноеЛицо;
	Иначе
		Если КонтактноеЛицо.Владелец <> Контрагент Тогда
			КонтактноеЛицо = Контрагент.ОсновноеКонтактноеЛицо;
		КонецЕсли;
	КонецЕсли;
	
 //СформироватьНадписьОДоступныхТипахЦенИПороговойЦеныТекущейНоменклатурнойПозиции(ЭлементыФормы.ИнфНадписьПоКонтрагентуИЦене.Заголовок);
 //ЭтаФорма.ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ЦенаКонтрагента.доступность = Истина; 
 
 //Если НЕ Контрагент.КонтрагентДляРезерваИМ.Пустая() Тогда //123заменить
   Если НЕ ДоговорКонтрагента.КонтрагентДляРезерваИМ.Пустая() Тогда
	 //Если Контрагент<>Контрагент.КонтрагентДляРезерваИМ Тогда //+++ 12.02.2016 //123заменить
	    Если Контрагент<>ДоговорКонтрагента.КонтрагентДляРезерваИМ Тогда //+++ 12.02.2016
		ЭлементыФормы.ОсновнаяПанель.Страницы.ТранспортнаяКомпания.Видимость   = истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.ТранспортнаяКомпания.Доступность = истина;
		//Адиянов<<<
		Иначе 
		ДоступностьРеквизитаПроверено();
		//Адиянов>>>
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент.Грузополучатель) Тогда
		Грузополучатель = Контрагент.Грузополучатель;
	КонецЕсли;
	
	//Контур фокус
	яшт_КонтурФокус.КонтурФокусПоказатьИнформациюОКонтрагентеНаФорме(ЭтаФорма);

	//+Лукьяненков 30.11.2017
	//Очищаем Адрес доставки и ТТН для при смене контрагента
	
	АдресДоставки = "";
	АдресДляТТН	  = "";
	
	//-Лукьяненков 30.11.2017
	
	//12.02.2018 Лукьяненков, Синхронизация галочек в карточке клиента и заказах
	ПечататьСчетИзРеализации = Контрагент.ПечатьСчетаИзРеализации;	
	
	РазрешитьГрузитьТоварыИзСтопЛиста = ложь;
КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;

	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);

	// Заказ можно оформлять по договору, взаиморасчеты по которому ведутся или по заказам или по 
	// договору в целом.
	СтруктураДополнительныхПараметров = Новый Структура();
	СтруктураОтбора = Новый Структура();
	СписокСпособовВеденияВзаиморасчетов = Новый СписокЗначений();
	СписокСпособовВеденияВзаиморасчетов.Добавить(Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом);
	СписокСпособовВеденияВзаиморасчетов.Добавить(Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
	
	СтруктураОтбора.Вставить("ЗначениеОтбора", СписокСпособовВеденияВзаиморасчетов);
	СтруктураОтбора.Вставить("ВидСравненияОтбора", ВидСравнения.ВСписке);
	СтруктураДополнительныхПараметров.Вставить("ВедениеВзаиморасчетов", СтруктураОтбора);
	//26.08.14 Смирнов
	//Если у контрагента есть действующий договор факторинга, то выбирать можно или его или договор* или дог формула авто
	Рез=НайтиДоговорФакторинга(Контрагент, Дата);
	Если Рез.ЕстьДоговорФакторинга Тогда
		СписокКодовРазрешенныхДоговоров=ПолучитьСписокРазрешенныхДоговоров(Контрагент, Дата);    //29.03 - вернута обратно функция!
		СтруктураОтбораКод = Новый Структура();
		СтруктураОтбораКод.Вставить("ЗначениеОтбора", СписокКодовРазрешенныхДоговоров);
		СтруктураОтбораКод.Вставить("ВидСравненияОтбора", ВидСравнения.ВСписке);
		СтруктураДополнительныхПараметров.Вставить("Код", СтруктураОтбораКод);
	КонецЕсли;
	//Смирнов
	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
	                                        СписокВидовДоговоров , СтандартнаяОбработка, СтруктураДополнительныхПараметров);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если НЕ ЭтоНовый()  //+++ 11.09.2015
		и яштПоЗаказуБылиОтгрузки(Ссылка) Тогда
		Если мТекущийДоговорКонтрагента <> ДоговорКонтрагента 
			и мТекущийДоговорКонтрагента.типДоговора <> ДоговорКонтрагента.ТипДоговора
			
			// все Предоплаты: Предоплата, ПредоплатаПоСчетам, ФакторингПредоплата 
			и (мТекущийДоговорКонтрагента.типДоговора = справочники.ТипыДоговоров.НайтиПоКоду("00001") 
			  или мТекущийДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ПредоплатаПоСчетам //+++14.08.2017
			  или мТекущийДоговорКонтрагента.типДоговора = справочники.ТипыДоговоров.ФакторингПредоплата) 
			  
			  и ДоговорКонтрагента.ТипДоговора<>справочники.ТипыДоговоров.Бонусы //+++ 07.08.2017 - на бонусы можно менять!
			  Тогда //16.05.2017
			
			//12.10.2015  - никому кроме... Горохова, фин.отдела (и IT)
			Если СокрЛП(глТекущийПользователь.Код) = "Горохов" 
				или РольДоступна("яштФинДиректор") 
				или РольДоступна("ПравоЗавершенияРаботыПользователей") Тогда
			Предупреждение("Не рекомендуется менять договор с типом Предоплата на другой тип!
						  |При изменении договора в заказе - измените договор и во всех реализациях!", 30);
			Иначе	
				Предупреждение("Нельзя менять договор с типом Предоплата/Факторинг на другой тип!", 10);
				ДоговорКонтрагента = мТекущийДоговорКонтрагента;
			КонецЕсли;	
			
		КонецЕсли;
	КонецЕсли;
	
	ПриИзмененииДоговора();

			
КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Склад
//
Процедура СкладНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.НеРавно, СтандартнаяОбработка);

КонецПроцедуры // СкладНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода
// "Структурная единица". Процедура предлагает выбор пользователю из
// соттветствующих справочников и открывает форму списка Для выбора 
// значения с отбором по текущему контрагенту. 
//
Процедура СтруктурнаяЕдиницаНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораЗначенияСтруктурнойЕдиницы(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры // СтруктурнаяЕдиницаНачалоВыбора()

// Процедура - обработчик события "Нажатие" кнопки "КнопкаПерерасчитатьДолг".
// Процедура вызывает сервисный механизм пересчета долга контрагента 
// по выбранному в форме договору взаиморасчетов и сделке.
//
Процедура КнопкаПерерасчитатьДолгНажатие(Элемент)
	
	флПоказыватьЛимит = не флПоказыватьЛимит;
	
	Если флПоказыватьЛимит Тогда //+++ 02.06.2015
	СформироватьНадписьЛимита(ЭлементыФормы.ИнфНадписьДолга);	
	Иначе	
	СформироватьНадписьДолга(ДоговорКонтрагента, Ссылка, ЭлементыФормы.ИнфНадписьДолга);
	КонецЕсли;

КонецПроцедуры // КнопкаПерерасчитатьДолгНажатие()

// Процедура - обработчик события "НачалоВыбора" элемента формы АдресДоставки
//
Процедура АдресДоставкиНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если Грузополучатель.Пустая() Тогда
		
		Если Контрагент.Пустая() Тогда
			ВвестиЗначение(Контрагент, "Выберите контрагента");
		КонецЕсли;
		
		Если НЕ Контрагент.Пустая() Тогда
			ФормаВыбора = РегистрыСведений.КонтактнаяИнформация.ПолучитьФормуСписка("ФормаСпискаДоп", ЭтаФорма);
			ФормаВыбора.РежимВыбора = Истина;
			
			ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Значение = Контрагент;
			ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Использование = Истина;
			
			СтруктураОтбораАдресов = Новый СписокЗначений;
			СтруктураОтбораАдресов.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
			ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.ВидСравнения = ВидСравнения.ВСписке;
			ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Значение = СтруктураОтбораАдресов;
			ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Использование = Истина;
			ФормаВыбора.ЭлементыФормы.РегистрСведенийСписок.Колонки.Тип.Видимость = Ложь;
			
			Ответ = ФормаВыбора.ОткрытьМодально();
			
			Если Ответ <> Неопределено Тогда		
				АдресДоставки = Ответ.Представление;
				Координаты    = Ответ.Координаты;
				ВидАдреса     = Ответ.ВидАдреса;
				
				//+++ 10.10.2017 по задаче № 34280 - напрямую из Вида адреса
				АдресДляТТН = ПолучитьПредставлениеПоВидуАдреса(ЭтотОбъект); //яштПрочее
			КонецЕсли;
		КонецЕсли;
		
	Иначе //Если НЕ Грузополучатель.Пустая() Тогда
			
		ФормаВыбора = РегистрыСведений.КонтактнаяИнформация.ПолучитьФормуСписка("ФормаСпискаДоп", ЭтаФорма);
		ФормаВыбора.РежимВыбора = Истина;
		
		ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Значение = Грузополучатель;
		ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Использование = Истина;
		
		СтруктураОтбораАдресов = Новый СписокЗначений;
		СтруктураОтбораАдресов.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
		ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.ВидСравнения = ВидСравнения.ВСписке;
		ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Значение = СтруктураОтбораАдресов;
		ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.РегистрСведенийСписок.Колонки.Тип.Видимость = Ложь;
		
		Ответ = ФормаВыбора.ОткрытьМодально();
		
		Если Ответ <> Неопределено Тогда
			АдресДоставки = Ответ.Представление;
			Координаты = Ответ.Координаты;
			ВидАдреса = Ответ.ВидАдреса;
			
			//+++ 10.10.2017 по задаче № 34280 - напрямую из Вида адреса
			АдресДляТТН = ПолучитьПредставлениеПоВидуАдреса(ЭтотОбъект); //яштПрочее

 		КонецЕсли;
			
	КонецЕсли; 

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ДисконтнаяКарта"
//
Процедура ДисконтнаяКартаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка    = Ложь;
	ФормаВыбора             = Справочники.ИнформационныеКарты.ПолучитьФормуВыбора(,Элемент);
	ФормаВыбора.РежимВыбора = Истина;

	ФормаВыбора.СправочникСписок.Отбор.ТипКарты.Значение      = Перечисления.ТипыИнформационныхКарт.Дисконтная;
	ФормаВыбора.СправочникСписок.Отбор.ТипКарты.Использование = Истина;

	ФормаВыбора.СправочникСписок.Отбор.ТипКарты.ВидСравнения          = ВидСравнения.Равно;

	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "Открытие" поля ввода "ДисконтнаяКарта"
//
Процедура ДисконтнаяКартаОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если НЕ ЗначениеНеЗаполнено(Элемент.Значение) Тогда
		Процент = Элемент.Значение.ПроцентСкидки;
		Элемент.Значение.ПолучитьФорму(, ЭтаФорма, ЭтаФорма).ОткрытьМодально();
		Если Элемент.Значение.ПроцентСкидки <> Процент Тогда
			Если РассчитыватьАвтоматическиеСкидки() Тогда
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
				СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
				СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
				СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
				СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
				СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
				РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ДисконтнаяКарта"
//
Процедура ДисконтнаяКартаПриИзменении(Элемент)

	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Товары". Формирует данные в колонке "Всего".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	//см.  ТоварыПриПолученииДанных(
	
	//	Если ЭлементыФормы.Товары.Колонки.Всего.Видимость Тогда
	//		ОформлениеСтроки.Ячейки.Всего.ОтображатьТекст = Истина;
	//		ОформлениеСтроки.Ячейки.Всего.Текст = ФорматСумм(ДанныеСтроки.Сумма
	//											+ ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС));
	
	//	КонецЕсли;
	
	//	ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	//	// Рассчитать и Показать в колонках информацию о сумме и отклонении от плановой себестоимости
	//	ЗаполнитьСуммуИОтклонениеОтПлановойСебестоимостиТабЧасти(ОформлениеСтроки, ДанныеСтроки, ЭтотОбъект);
	
	//	ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	//	ПоказатьСуммуБезСкидок(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Цена, ДанныеСтроки.Количество);
	//	
	////+++ 06.07.2012 - в модуле яштПрочее добавлены 2 функции
	//ПоказатьОбъем(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
	//Попытка
	//	Если ОформлениеСтроки.Ячейки.Объем.Видимость Тогда
	//		итогОбъем = 0; N = Товары.Количество();
	//		Для i=0 по N-1 Цикл
	//			итогОбъем = итогОбъем + ВычислитьОбъемНоменклатуры(Товары[i].Номенклатура);
	//		КонецЦикла;	
	//		ЭлементыФормы.Товары.Колонки.Объем.ТекстПодвала = строка(итогОбъем);
	//	КонецЕсли;	
	//Исключение
	//	ЭлементыФормы.Товары.Колонки.Объем.ТекстПодвала = "";
	//КонецПопытки;
	
	ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);//14.08.2017
	
	//+++ 02.12.2016
	Если ЗначениеЗаполнено( ДанныеСтроки.Размещение) Тогда
		ОформлениеСтроки.ЦветФона = WebЦвета.ЦианСветлый; //бледно-голубой... везется от поставщика!  
	КонецЕсли;
	
	//+++ расцветка по статусу ( Для согласования цен )
	Если ДанныеСтроки.статус = перечисления.СтатусыСтрокЗаказа.Отменен Тогда
		ОформлениеСтроки.ЦветФона = WebЦвета.СветлоРозовый;
	ИначеЕсли ДанныеСтроки.статус = перечисления.СтатусыСтрокЗаказа.Получен 
		или ДанныеСтроки.Статус = перечисления.СтатусыСтрокЗаказа.Подтвержден Тогда
		ОформлениеСтроки.ЦветФона = WebЦвета.Роса; //бледно-зеленый
	ИначеЕсли ДанныеСтроки.статус = перечисления.СтатусыСтрокЗаказа.НаСогласовании Тогда
		ОформлениеСтроки.ЦветФона = WebЦвета.СветлоЖелтый; // на согласовании! 
	КонецЕсли;
	
	//***2018.08.01 Задача №37574
	Если ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ВыделитьДискиРаспродажи.Пометка Тогда   
		Если ТаблицаРаспродажи.Найти(ДанныеСтроки.Номенклатура) <> Неопределено Тогда
			ОформлениеСтроки.ЦветФона = WebЦвета.Лосось;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ПриНачалеРедактирования"  строки табличной 
// части "Товары" 
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	СуммаСтроки = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;
	Если (НоваяСтрока) И СуммаСтроки > 0 Тогда

		//Расчет скидок
		Если РассчитыватьАвтоматическиеСкидки() Тогда
			мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтроки;
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
			СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
			СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
			СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
			СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
			СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
			РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
		КонецЕсли;

	КонецЕсли;

	// Установим способ редактирования цены.
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Номенклатура);
	КонецЕсли;

КонецПроцедуры // ТоварыПриНачалеРедактирования()

// Процедура - обработчик события "ПриОкончанииРедактирования" табличной части "Товары".
//
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	//+++ 13.03.2018 -  автоВключение отменено по задаче № 41523!
	
	//Если Найти(Комментарий, "Сезонный заказ")>0  //31.01.2018 - при изменении товаров - 
	//	и ИсключитьИзАвтоОбъединения=ЛОЖЬ тогда  //13.03.2018 не писать 2 раз
	//	
	//	Если Вопрос("Заказ создан по Сезонному заказу и Изменен! 
	//				| Исключить этот заказ из Авто-Объединения?",РежимДиалогаВопрос.ДаНет, 0) = КодВозвратаДиалога.Да тогда 
	//		ИсключитьИзАвтоОбъединения = Истина;
	//	КонецЕсли;
	//	
	//КонецЕсли;	
	
КонецПроцедуры // ТоварыПриОкончанииРедактирования()

// Процедура - обработчик события "ПередУдалением" табличной части "Товары".
//
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок - СуммаСтроки;
	
	Если не ЭтоНовый() Тогда
		Если яштРезервыПоТоварам.ЕстьРезервПоЗаказу(ссылка) Тогда //+++ 18.04.2014
			Предупреждение("Нельзя удалять строки товаров! Уже ведется отгрузка по этому заказу!", 30);
			Отказ = Истина;
		ИначеЕсли яштПоЗаказуБылиОтгрузки(Ссылка) Тогда
			Предупреждение("Нельзя удалять строки товаров! По этому заказу уже были отгрузки!", 30);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;	
 		
	//Если не ЭтоНовый() 
	//	и (типЗаказа = 6 //10.05.2017 - объединенный заказ
	//	  	или типЗаказа = 7)    // объединенный заказ Для перемещения на Филиал
	//	Тогда Предупреждение("	Нельзя удалять строки товаров! 
	//						 |	Заказ является объединенным!", 30);
	//	Отказ = Истина;
	//КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПослеУдаления" табличной части "Товары".
//
Процедура ТоварыПослеУдаления(Элемент)

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;

	//+Лукьяненков 28.11.2017 Удалено
	// Итоговая информация об отклонение от плановой себестоимости
	//СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);
    //-Лукьяненков 28.11.2017 Удалено
	
	//Адиянов<<<
	ДоступностьРеквизитаПроверено();
	//Адиянов>>>
КонецПроцедуры // ТоварыПослеУдаления()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;

	// Выполнить общие действия Для всех документов при изменении номенклатуры.
	ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);
	
	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

		мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения - СуммаСтроки;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

	//Адиянов<<<
	ДоступностьРеквизитаПроверено();
	//Адиянов>>>
	
	Если ТипЗаказа = 12 и Элемент.Значение.ВидТовара = Перечисления.ВидыТоваров.РекламнаяПродукция Тогда
		СтрокаТабличнойЧасти.Цена = 1;
		СтрокаТабличнойЧасти.СуммаНДС = 0.153*СтрокаТабличнойЧасти.Количество;
		СтрокаТабличнойЧасти.Сумма = 1*СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	ПриВыбореТовараПроверитьКодТНВЭД(СтрокаТабличнойЧасти.Номенклатура);

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;

	ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти);

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;

		мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения - СуммаСтроки;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

	// Рассчитываем плановую себестоимость.
	РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	// Сохраняем текущее значение коэффициента
	СтароеЗначениеКоэффициента = ЭлементыФормы.Товары.ТекущиеДанные.Коэффициент;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;

	// Выполнить общие действия Для всех документов при изменении Единица.
	ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	// Пересчитываем плановую себестоимость.
	ПриИзмененииЕдиницыТабЧастиПлановаяСебестоимость(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект, СтароеЗначениеКоэффициента);

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;

		мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения - СуммаСтроки;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия Для всех документов при изменении ЕдиницаМест.
	ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

	//+++ 23.03.2015 - ограничение цены по Кр.Опту Для Шин (Кама и пр.) - Горохов и Никитин И.Б.
	// при ручном изменении!
	//Если НЕ ЭтоНовый() Тогда 
	
	//29.10.2015 - ВСЕГДА Для ВСЕХ клиентов у которых [ ] НеКонтроллироватьЦеныПродажи
	Если НЕ ЭтотОбъект.Контрагент.НеКонтроллироватьЦеныПродажи Тогда
			
		Если СтрокаТабличнойЧасти.Номенклатура.ВидТовара = перечисления.ВидыТоваров.Шины 
		и (не ЗначениеЗаполнено(ЭтотОбъект.ВалютаДокумента)
		   или (ЗначениеЗаполнено(ЭтотОбъект.ВалютаДокумента) и ЭтотОбъект.ВалютаДокумента.Код="643")
		   ) Тогда //в рублях
		   
		// спецЦена - ? можно ?
		типЦен = ?(ЭтотОбъект.ТипЦен.Код="00013", ЭтотОбъект.ТипЦен,
					справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005"));  //КрОпт
					
		//+++ ОТМЕНЯЕМ ПРОВЕРКУ! 15.08.2016 - (Кузьмичёва И.)
		//  на дату документа?
		//Дата1 = ?(Дата='00010101', ТекущаяДата(), Дата );
		//регСв = РегистрыСведений.ЦеныНоменклатуры.СрезПоследних(Дата1, новый Структура("ТипЦен, Номенклатура",
		//   типЦен, СтрокаТабличнойЧасти.Номенклатура) );
		//   
		//	Если регСв<>неопределено и регСв.Количество()>0 Тогда
		//	ЦенаКрОпт = регСв[0].Цена;
		//		Если СтрокаТабличнойЧасти.Цена<ЦенаКрОпт Тогда
		//			Если РольДоступна("ПолныеПрава") Тогда
		//				//или РольДоступна("МенеджерПоЗакупкам") Тогда //с 30.03.2015 по просьбе Горохова - можно менять любому менеджеру по закупкам
		//				
		//				Если Вопрос("Цена товара "+строка(СтрокаТабличнойЧасти.Номенклатура.Код)+") "+строка(СтрокаТабличнойЧасти.Номенклатура)+"
		//					|выбрана: "+строка(СтрокаТабличнойЧасти.Цена)+" р. - меньше цены '"+строка(типЦен.наименование)+"': "+формат(ЦенаКрОпт,"ЧДЦ=2")+"р.
		//					|        Изменить цену на '"+строка(типЦен.наименование)+"'?", РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да,"Цена меньше'"+строка(типЦен.наименование)+"'", КодВозвратаДиалога.Да)=КодВозвратаДиалога.Нет Тогда
		//					Возврат;
		//				КонецЕсли;	
		//			КонецЕсли;
		//			Сообщить("Цена Для "+строка(СтрокаТабличнойЧасти.номерСтроки)+" строки ("+строка(СтрокаТабличнойЧасти.Номенклатура.Код)+") изменена автоматически с "+строка(СтрокаТабличнойЧасти.Цена)+"р. на цену '"+строка(типЦен.наименование)+"': "+формат(ЦенаКрОпт,"ЧДЦ=0")+"р.", СтатусСообщения.Информация);
		//			СтрокаТабличнойЧасти.Цена = ЦенаКрОпт;
		//			СтрокаТабличнойЧасти.СтавкаНДС = перечисления.СтавкиНДС.НДС18;
		//			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		//			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		//		КонецЕсли;	
		//	КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ТоварыЦенаПриИзменении()


// Процедура - обработчик события "ПриНачалеВыбораИзСписка" поля ввода цены
// в строке табличной части "Товары" и "Возвратная тара"
//
Процедура ТоварыЦенаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение("Не выбрана позиция номенклатуры!"); 
		Возврат;
	КонецЕсли; 

	Элемент.СписокВыбора = СформироватьСписокРозничныхЦен(СтрокаТабличнойЧасти.Номенклатура,
															СтрокаТабличнойЧасти.ЕдиницаИзмерения,
															СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
															СтрокаТабличнойЧасти.Размещение,
															мВалютаРегламентированногоУчета,
															, Дата, ВалютаДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
															УчитыватьНДС, СуммаВключаетНДС, 
															ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

КонецПроцедуры // ТоварыЦенаНачалоВыбораИзСписка()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Если яштРезервыПоТоварам.ЕстьРезервПоЗаказу(ссылка) Тогда //+++ 25.09.2013
	    СтрокаТабличнойЧасти.Количество = Цел(СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Цена);
		Предупреждение("Нельзя менять количество товаров! Уже ведется отгрузка по этому заказу!", 30);
		Возврат;
	КонецЕсли;

	АвтоЗаполнениеХарактеристики(СтрокаТабличнойЧасти, Истина); //+++ автозаполнение Хар-к по количеству, с комментариями

	// Рассчитать реквизиты табличной части.
	РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	//РассчитатьКубатуруТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	
	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе
		// Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;

	// Рассчитать новое количество
	РассчитатьКоличествоТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;

		мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения - СуммаСтроки;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыКоличествоМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля процента скидки-наценки
// в строке табличной части "Товары".
//
Процедура ТоварыПроцентСкидкиНаценкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыПроцентСкидкиНаценкиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия Для всех документов при изменении Суммы.

	ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, глТекущийПользователь);

	// Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "ПриНачалеВыбора" поля ввода размещения
// в строке табличной части "Товары" и "Возвратная тара"
//
Процедура ТоварыРазмещениеНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораЗначенияРазмещения(ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры // ТоварыРазмещениеНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода размещения 
// в строке табличной части "Товары" 
//
Процедура ТоварыРазмещениеПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти );
	
	Если (((ТипЗнч(Элемент.Значение)=ТипЗнч(Справочники.Склады.ПустаяСсылка()))) и ((Элемент.Значение.ЗапретитьИспользование) и (Не ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"РазрешитьОтгрузкиСоВсехСкладов")))) Тогда 
		Предупреждение("Вам нельзя работать с данным складом");
		ЭлементыФормы.Товары.ТекущиеДанные.Размещение = Неопределено;
	КонецЕсли;


КонецПроцедуры // ТоварыРазмещениеПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "ВозвратнаяТара". Формирует данные в колонке "ЕдиницаХранения".
//
Процедура ВозвратнаяТараПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.ВозвратнаяТара.Колонки.ЕдиницаХранения.Видимость Тогда
		ОформлениеСтроки.Ячейки.ЕдиницаХранения.УстановитьТекст(ДанныеСтроки.Номенклатура.ЕдиницаХраненияОстатков);
	КонецЕсли;

	ПоказатьКодАртикул(мКолонкиВозвратнаяТара, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	// Выполнить общие действия Для всех документов при изменении Возвратной тары.
	ПриИзмененииВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

	// Заполнить реквизиты табличной части.
	ЗаполнитьЦенуВозвратнойТарыТабЧастиПоступление(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект); 

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)

	// Выполнить общие действия Для всех документов при изменении суммы.
	ПриИзмененииСуммыВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараСуммаПриИзменении()

// Процедура - обработчик события "ПриНачалеВыбора" поля ввода размещения
// в строке табличной части "Возвратная тара"
//
Процедура ВозвратнаяТараРазмещениеНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораЗначенияРазмещения(ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры // ВозвратнаяТараРазмещениеНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ УСЛУГИ

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Услуги".
//
Процедура УслугиНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Заполняем реквизиты табличной части.
	ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	Если ПроверитьУслугаОблагаетсяЕНВД(СтрокаТабличнойЧасти.Номенклатура, Организация, Дата,
		                               мОрганизацияЯвляетсяПлательщикомЕНВД) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	Иначе
		ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

	СтрокаТабличнойЧасти.Цена = ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,
		Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(),
		ТипЦен,
		Дата,
		Справочники.ЕдиницыИзмерения.ПустаяСсылка(), 
		ВалютаДокумента,
		КурсВзаиморасчетов,
		КратностьВзаиморасчетов,,
		ДокументОбъект.ДоговорКонтрагента);

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // УслугиНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Услуги".
//
Процедура УслугиКоличествоПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // УслугиКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля процента скидки-наценки
// в строке табличной части "Товары".
//
Процедура УслугиПроцентСкидкиНаценкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыПроцентРозничнойНаценкиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Услуги".
//
Процедура УслугиЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // УслугиЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Услуги".
//
Процедура УслугиСуммаПриИзменении(Элемент)

	ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект, глТекущийПользователь);
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры// УслугиСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Услуги".
//
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // УслугиСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы НДС
// в строке табличной части "Услуги".
//
Процедура УслугиСуммаНДСПриИзменении(Элемент)

КонецПроцедуры // УслугиСуммаНДСПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ
// УПРАВЛЕНИЕ ОТНОШЕНИЯМИ С КЛИЕНТАМИ

// Процедура - обработчик события "НачалоВыбора" элемента формы ВремяНапоминания 
//
Процедура ВремяНапоминанияНачалоВыбора(Элемент, СтандартнаяОбработка)

	мЧас = Час(Элемент.Значение);
	мМинута = Минута(Элемент.Значение);
	
КонецПроцедуры // ВремяНапоминанияНачалоВыбора()

// Процедура - обработчик события "ОбработкаВыбора" элемента формы ВремяНапоминания 
//
Процедура ВремяНапоминанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Элемент.Значение = НачалоДня(ВыбранноеЗначение) + мЧас*60*60 + мМинута*60;
	мЧас = 0;
	мМинута = 0;
	
КонецПроцедуры // ВремяНапоминанияОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" элемента формы (Флажка) НапомнитьОСобытии 
//
Процедура НапомнитьОСобытииПриИзменении(Элемент)
    //+++ 17.05.2012  НапомнитьОСобытии = ОтправленInvoice
	//Если НапомнитьОСобытии Тогда
	//	Если ВремяНапоминания = Дата("00010101000000") Тогда
	//		ВремяНапоминания = Дата(ТекущаяДата() + ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ИнтервалНапоминанияДоНачалаСобытия")*60);
	//	КонецЕсли; 
	//Иначе
	//	ВремяНапоминания = Дата("00010101000000");
	//КонецЕсли; 
	//
	//ДоступностьНапоминаний();
	
КонецПроцедуры // НапомнитьОСобытииПриИзменении()

// Процедура - обработчик события "Нажатие" элемента формы НадписьСобытия 
//
Процедура НадписьСобытияНажатие(Элемент)

	Если НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ФормаСобытий = Документы.Событие.ПолучитьФормуСписка(, , Ссылка);
	ФормаСобытий.ДокументСписок.Отбор.Основание.Значение = Ссылка;
	ФормаСобытий.ДокументСписок.Отбор.Основание.Использование = Истина;
	ФормаСобытий.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Основание.Доступность = Ложь;
	ФормаСобытий.Открыть();
	
КонецПроцедуры // КнопкаСобытийНажатие()

// Процедура - обработчик события "НачалоВыбораИзСписка" элемента формы ВремяНапоминания 
//
Процедура ВремяНапоминанияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ВыбратьВремяИзСписка(Элемент, ЭтаФорма, Ответственный, СтандартнаяОбработка);
	
КонецПроцедуры // ВремяНапоминанияНачалоВыбораИзСписка()

// Процедура - обработчик события "НачалоВыбора" поля ввода "КурсВзаиморасчетов".
//
Процедура КурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Выбрать дату курса и заполнить курс взаиморасчетов.
	ВыбратьКурсВзаиморасчетов(ЭтотОбъект);

КонецПроцедуры // КурсВзаиморасчетовНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" элемента формы КонтактноеЛицо 
//
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		Если ЗначениеНеЗаполнено(Контрагент) ИЛИ КонтактноеЛицо.ОбъектВладелец <> Контрагент Тогда
			Контрагент = КонтактноеЛицо.ОбъектВладелец;
			ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);
			ПриИзмененииДоговора();
		КонецЕсли;
		//+++( 20.04.2012 - находим марку и гос.номер автомобиля
		//отбор1 = Новый структура();
		//отбор1.Вставить("Объект", КонтактноеЛицо);
		//отбор1.Вставить("Тип", перечисления.ТипыКонтактнойИнформации.Другое);
		
		//отбор1.Вставить("Вид", справочники.ВидыКонтактнойИнформации.НайтиПоКоду("") );
		//рс = РегистрыСведений.КонтактнаяИнформация.Получить(отбор1);
		//Если рс<>неопределено Тогда
		//	МаркаАвтомобиля = рс.Представление; 
		//КонецЕсли;
		
		//отбор1.Вставить("Вид", справочники.ВидыКонтактнойИнформации.НайтиПоКоду("") );
		//рс = РегистрыСведений.КонтактнаяИнформация.Получить(отбор1);
		//Если рс<>неопределено Тогда
		//	ГосНомерАвтомобиля = рс.Представление; 
		//КонецЕсли;
		//+++)
		
	КонецЕсли; 
	
	мПоследнееЗначениеЭлементаТайпинга = Элемент.Значение;
	
КонецПроцедуры // КонтактноеЛицоПриИзменении()

// Процедура - обработчик события "НачалоВыбора" элемента формы КонтактноеЛицо 
//
Процедура КонтактноеЛицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НачалоВыбораКонтактногоЛицаКонтрагента(Элемент, СтандартнаяОбработка, Контрагент);
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" элемента формы КонтактноеЛицо 
//
Процедура КонтактноеЛицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпинга(), Тип("СправочникСсылка.КонтактныеЛица"));
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЯ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	Иначе
		ПроверкаПеретаскиванияВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Товары");
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Товары", ЭтотОбъект, ЭтаФорма);

		//Расчет скидок
		Если РассчитыватьАвтоматическиеСкидки() Тогда
			мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
			СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
			СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
			СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
			СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
			СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
			РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "ВозвратнаяТара");
	Иначе
		ПроверкаПеретаскиванияВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "ВозвратнаяТара");
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "Перетаскивание" табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "ВозвратнаяТара", ЭтотОбъект, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Услуги".
//
Процедура УслугиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Услуги");
	Иначе
		ПроверкаПеретаскиванияВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Услуги");
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "Перетаскивание" табличной части "Услуги".
//
Процедура УслугиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Услуги", ЭтотОбъект, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

Процедура ТоварыКоличествоОткрытие(Элемент, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	//Если (Проведен и Константы.ИспользованиеРезерва.Получить() и (Дата>=Константы.ДатаНачалаУчета.Получить())) Тогда 
	//	Ответ = Вопрос("Менять табличную часть можно только после отмены проведения. Отменить проведение документа ?",РежимДиалогаВопрос.ДаНет);
	//	Если Ответ = КодВозвратаДиалога.Да Тогда 
	//		Записать(РежимЗаписиДокумента.ОтменаПроведения);
	//	Иначе 
	//		Возврат;
	//	КонецЕсли;			
	//КонецЕсли;

КонецПроцедуры

Процедура ТоварыПриАктивизацииСтроки(Элемент)
	//СформироватьНадписьОДоступныхТипахЦенИПороговойЦеныТекущейНоменклатурнойПозиции(ЭлементыФормы.ИнфНадписьПоКонтрагентуИЦене.Заголовок);
КонецПроцедуры

Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если НЕ ЭтоНовый() и не Отказ Тогда	
		
		Отказ = НельзяМенятьТоварыИКоличество(2);
		
	КонецЕсли;
	
	Если не отказ тогда
		Согласован = ложь;
	КонецЕсли;
КонецПроцедуры

Процедура СкладПриИзменении(Элемент)
	
	//любой менеджер может выбирать любой склад...
	Если Склад.ЗапретитьИспользование И НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"РазрешитьОтгрузкиСоВсехСкладов") Тогда 
		Предупреждение("У Вас недостаточно прав Для выбора отгрузки с запрещенного склада!",10);
		Склад = Подразделение.Склад;
		ОтгрузкаСПодразделенияСклада = ЛОЖЬ;
	КонецЕсли;
	

	//14.03.2016 Для филиалов - отгрузка со склада Ярославля!
	Если Подразделение.ОбособленноеПодразделение и ЗначениеЗаполнено(Склад)
		и (НЕ Склад.Транзитный
		   И Склад.Подразделение <> Подразделение)  Тогда
		Предупреждение("Установлен признак ""Отгрузка с Подразделения Склада (Для 293 обработки)""!",30);
		ОтгрузкаСПодразделенияСклада = Истина;
		
	//17.03.2016
	ИначеЕсли Подразделение.ОбособленноеПодразделение и ЗначениеЗаполнено(Склад)
		и (Склад.Транзитный
		   И Склад.Подразделение <> Подразделение)  Тогда
    	Предупреждение("Нельзя выбирать склад подразделения: "+строка(Склад.Подразделение),30);
	    Склад = Подразделение.Склад;
		ОтгрузкаСПодразделенияСклада = ЛОЖЬ;
	КонецЕсли;	
	
	//Если ЗначениеЗаполнено(Склад) И ЗначениеЗаполнено(Склад.Подразделение) Тогда
	//	Подразделение = Склад.Подразделение;
	//	УстановитьВидимость(); //+++ 17.05.2012 Для открытия кнопки Invoice
	//КонецЕсли	
	
	//+++ 31.10.2014 - 26.11.2014 Для складов [v]Обособл.подразд - сразу включаем флаг!
	Если ЗначениеЗаполнено(Склад) и ЗначениеЗаполнено(Склад.Подразделение) Тогда
		
		//в будущем по любому обособленному подразделению при отгрузке с Ярославля (с любого подразделения)
		ОтгрузкаСПодразделенияСклада = Склад.Подразделение.ОбособленноеПодразделение и (НЕ Подразделение.ОбособленноеПодразделение);
		
		//12.11.2014 - чистим все категории по документу!
		Если ОтгрузкаСПодразделенияСклада Тогда // заказ ярославский, а склад на обособку
			 Если не ЭтоНовый() Тогда
		 		регСв = РегистрыСведений.КатегорииОбъектов.СоздатьНаборЗаписей();
				регСв.Отбор.Объект.ВидСравнения = ВидСравнения.Равно;
				регСв.Отбор.Объект.Значение = Ссылка;
				регСв.Отбор.Объект.Использование = Истина;
				регСв.Записать();
			КонецЕсли;
		Предупреждение("Установлен признак ""Отгрузка с Подразделения Склада (Для 293 обработки)""!",30);	
		КонецЕсли; 
		
	Иначе
		ОтгрузкаСПодразделенияСклада = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПодразделениеКомпанииПриИзменении(Элемент)
	
	УстановитьНомерДокумента(ЭтотОбъект);
	СкладПриИзменении(неопределено); // сразу проверяем склад... по подраздлению
	
	//+++ 02.06.2015
	Если Подразделение.ОбособленноеПодразделение Тогда
		Грузоотправитель = Подразделение.Контрагент;
		сообщить("Установлен грузоотправитель подразделения: "+строка(Грузоотправитель));
		ЭтотОбъект.Транзит = ИСТИНА; // 05.02.2016 сразу ВКЛЮЧАЕМ!
		СкладПриИзменении(неопределено); // сразу проверяем склад... по подраздлению
		ТранзитПриИзменении(неопределено);
		
	Иначе //Ярославль - ВСЕГДА не Транзитный!
		
		ЭтотОбъект.Транзит = ЛОЖЬ; // 05.02.2016 выключаем - ДЫРКА была!
		СкладПриИзменении(неопределено); // сразу проверяем склад... по подраздлению
		Если ЗначениеЗаполнено(Склад) и Склад.Транзитный Тогда
			Предупреждение("Выбранный склад '"+строка(Склад)+"' - ТРАНЗИТНЫЙ!
					  | Автоматически выбран Основной склад: "+строка(Подразделение.Склад),30);
			Склад = Подразделение.Склад;
		КонецЕсли;
	 	ТранзитПриИзменении(неопределено);
		
		Если не Транзит Тогда
			Если ЗначениеЗаполнено(Грузоотправитель) Тогда
				Грузоотправитель = справочники.Контрагенты.ПустаяСсылка();
				сообщить("Поле 'Грузоотправитель' - очищено.");
			КонецЕсли;	
		КонецЕсли;	

	КонецЕсли;
			
КонецПроцедуры


Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	//ПравоНаИзменение = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"РазрешитьРедактироватьЗаказыПокупателя");
	//
	//Если (ПравоНаИзменение=Ложь) Тогда
	//	Отказ = Истина;
	//КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыЗаполнитьПоТипуЦен(Кнопка)
	// Заполняем по типу цен.
	//Если (ТипЦен.ЦенаРассчитывается = Истина) Тогда 
	//	Дата = ?(Дата='0001-01-01',ТекущаяДата(),Дата);
	//	ЗаполнитьТЧПоТипуЦен(Товары,Дата,ТипЦен);
	//КонецЕсли;
КонецПроцедуры


//КонецПроцедуры
//Орлов--
Процедура ДействияФормыПроверитьВозможностьКомплектацииДиски(Кнопка)
	Если ЭтоНовый() Тогда 
		Сообщить("Для проверки комплектации к дискам требуется сперва записать заказ. Жми кнопку ЗАПИСАТЬ.");
		Возврат;
	КонецЕсли;	
//Если НЕ Проверен Тогда
	Запрос=Новый Запрос;
		
	Запрос.Текст="ВЫБРАТЬ  ЗаказПокупателяТовары.Номенклатура,
	|	ЗаказПокупателяТовары.Количество КоличествоЗаказано,
	|	ЗаказыПокупателейОстатки.КоличествоОстаток КОличествоВРезерве,
	|	ЗаказПокупателяТовары.Количество+ЕстьNULL(ЗаказыПокупателейОстатки.КоличествоОстаток,0) ОбщееКоличествоТребуется
	|	ПОМЕСТИТЬ ВТ_Диски
	|	ИЗ
	|   (ВЫБРАТЬ
	|	Номенклатура,
	|	Количество
	|ИЗ	Документ.ЗаказПокупателя.Товары 
	|ГДЕ Ссылка = &ЗаказПокупателя 
	|И Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура ИЗ РегистрСведений.КомплектующиеНоменклатуры	)
	|И Номенклатура.ВидТовара=Значение(Перечисление.ВидыТоваров.Диски)
	|) КАК ЗаказПокупателяТовары
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(,ЗаказПокупателя<>&ЗаказПокупателя И Заказпокупателя.Проверен 
	|И Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура ИЗ РегистрСведений.КомплектующиеНоменклатуры	))ЗаказыПокупателейОстатки
	|ПО ЗаказПокупателяТовары.Номенклатура=ЗаказыПокупателейОстатки.Номенклатура
	|;
	|ВЫБРАТЬ ВТ_Диски.Номенклатура,КомплектующиеНоменклатуры.Комплектующая,ВТ_Диски.ОбщееКоличествоТребуется 
	|ПОМЕСТИТЬ ВТ_1
	|ИЗ
	|ВТ_Диски ЛЕВОЕ СОЕДИНЕНИЕ
	|РегистрСведений.КомплектующиеНоменклатуры	КомплектующиеНоменклатуры
	|ПО ВТ_Диски.Номенклатура= КомплектующиеНоменклатуры.Номенклатура
	|;
	|ВЫБРАТЬ Комплектующая,СУММА (ОбщееКоличествоТребуется) ОбщееКоличествоТребуется 
	|ПОМЕСТИТЬ ВТ_2
	|ИЗ ВТ_1
	|СГРУППИРОВАТЬ ПО Комплектующая
	|;
	|// ЗДЕСЬ КРЫШКИ И ДИСКИ
	|ВЫБРАТЬ ВТ_2.Комплектующая Номенклатура,ВТ_2.Комплектующая.ВидТовара ,ВТ_2.ОбщееКоличествоТребуется, ТоварыНаСкладахОстатки.КоличествоОстаток ,
	|ВТ_2.ОбщееКоличествоТребуется-ЕстьNULL(ТоварыНаСкладахОстатки.КоличествоОстаток,0) КоличествоТребуется1Передел 
	|ПОМЕСТИТЬ ВТ_3
	|ИЗ ВТ_2
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(, НЕ Склад.ЗапретитьИспользование И Номенклатура В(
	|ВЫБРАТЬ РАЗЛИЧНЫЕ Комплектующая ИЗ ВТ_2)) ТоварыНаСкладахОстатки
	|ПО ВТ_2.Комплектующая=ТоварыНаСкладахОстатки.Номенклатура
	|ГДЕ ЕстьNULL(ВТ_2.ОбщееКоличествоТребуется,0) - ЕстьNULL(ТоварыНаСкладахОстатки.КоличествоОстаток,0)>0
	|//И ВТ_2.Комплектующая.ВидТовара=Значение(Перечисление.ВидыТоваров.Диски)
	|;
	|ВЫБРАТЬ ВТ_3.Номенклатура, КомплектующиеНоменклатуры.Комплектующая, ВТ_3.КоличествоТребуется1Передел,
	|ТоварыНаСкладахОстатки.КоличествоОстаток,
	|ЕстьNULL(ВТ_3.КоличествоТребуется1Передел,0)- ЕстьNULL(ТоварыНаСкладахОстатки.КоличествоОстаток,0) ТребуетсяКоличествоИтого
	|ПОМЕСТИТЬ ВТ_4
	|ИЗ ВТ_3
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|РегистрСведений.КомплектующиеНоменклатуры	КомплектующиеНоменклатуры
	|ПО ВТ_3.Номенклатура=КомплектующиеНоменклатуры.Номенклатура
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(, НЕ Склад.ЗапретитьИспользование) ТоварыНаСкладахОстатки
	|ПО КомплектующиеНоменклатуры.Комплектующая=ТоварыНаСкладахОстатки.Номенклатура
	|ГДЕ (КомплектующиеНоменклатуры.Комплектующая ЕСТЬ NULL ИЛИ КомплектующиеНоменклатуры.Комплектующая.ВидТовара=Значение(Перечисление.ВидыТоваров.Диски))
	|И  ВТ_3.Номенклатура.ВидТовара=Значение(Перечисление.ВидыТоваров.Диски)
	|И ЕстьNULL(ВТ_3.КоличествоТребуется1Передел,0)- ЕстьNULL(ТоварыНаСкладахОстатки.КоличествоОстаток,0)>0
	|;
	|ВЫБРАТЬ  НОменклатура,ТребуетсяКоличествоИтого ИЗ
	|(ВЫБРАТЬ НОменклатура, КоличествоТребуется1Передел  ТребуетсяКоличествоИтого
	|ИЗ ВТ_3 ГДЕ НОменклатура.ВидТовара<>Значение(Перечисление.ВидыТоваров.Диски)) Крышки
	|ОБЪЕДИНИТЬ
	|ВЫБРАТЬ Номенклатура, ТребуетсяКоличествоИтого ИЗ
	|ВТ_4
	|;
	|УНИЧТОЖИТЬ ВТ_1
	|;
	|УНИЧТОЖИТЬ ВТ_2
	|;
	|УНИЧТОЖИТЬ ВТ_3
	|;
	|УНИЧТОЖИТЬ ВТ_4";
	Запрос.УстановитьПараметр("ЗаказПокупателя",Ссылка);
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Количество()>0 Тогда
		СообщитьОбОшибке("Для комплектации данного заказа не хватает :");
		Пока Выборка.Следующий() Цикл
			Сообщить(Строка(Выборка.Номенклатура)+": "+Выборка.ТребуетсяКоличествоИтого +"шт.");
		КонецЦикла;	
	КонецЕсли;

	//КонецЕсли;
	
	
КонецПроцедуры

Процедура ДействияФормыИсторияИзменений(Кнопка)
	формаИзменений = РегистрыСведений.ЖурналИзменений.ПолучитьФормуСписка();
	формаИзменений.Отбор.Объект.ВидСравнения = ВидСравнения.Равно;
	формаИзменений.Отбор.Объект.Значение = Ссылка;
	формаИзменений.Отбор.Объект.Использование = Истина;
	//блокируем изменение отбора по документу
	формаИзменений.ЭлементыФормы.РегистрСведенийСписок.НастройкаОтбора.Объект.Доступность = Ложь;
	Состояние("Идет формирование истории изменений...");
	формаИзменений.Открыть();
	Состояние("");
КонецПроцедуры

//+++( 12.12.2011
Процедура ДействияФормыПослатьСчет(Кнопка)
			
	//========================Проверим уч.запись======================
	  УЗ =  ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяУчетнаяЗапись");
		Если НЕ ЗначениеЗаполнено(УЗ) Тогда
			//Если РольДоступна("ПолныеПрава") Тогда
			УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("no-reply@yst76.ru");
			Если ЗначениеЗаполнено(УЗ) Тогда
				//Ответ = КодВозвратаДиалога.Нет;
				//Если Вопрос("У Вас не установлена Учетная запись эл.почты!
				//|Продолжить отправку с эл.адреса организации (no-reply@yst76.ru)?",РежимДиалогаВопрос.ДаНет, 10, Ответ, "Эл.Адрес отправки") = КодВозвратаДиалога.Нет Тогда
				//Возврат;
				//КонецЕсли;
			Иначе // в базе нет уч.записи: no-reply@yst76.ru
				сигнал();
				Предупреждение("У Вас Не установлена -Основная учетная запись эл.почты!
							   |Для отправки - обязательно требуется обратный эл.адрес!",30);
				Возврат;
			КонецЕсли;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Номер) или ЭтоНовый() Тогда
			сигнал();
			Предупреждение("Перед отправкой письма - сохраните текущий документ!",30);
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЭтотОбъект.Контрагент) Тогда
			сигнал();
			Предупреждение("Перед отправкой письма - Заполните поле 'Контрагент' !",30);
			Возврат;
		КонецЕсли;	
//======================Получим адрес эл.почты=================
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Объект
		|	И КонтактнаяИнформация.Тип = &Тип
		|	И КонтактнаяИнформация.Вид = &Вид";
		
		Запрос.УстановитьПараметр("Объект", ЭтотОбъект.Контрагент);
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыДляОбменаДокументами);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		АдресЭлПочтыКонтрагента = "";
		Если Выборка.Следующий() Тогда
			АдресЭлПочтыКонтрагента = СокрЛП(выборка.Представление);
		Иначе
			сигнал();
			Предупреждение("У контрагента: "+строка(ЭтотОбъект.Контрагент)+" - не задан эл.адрес!
						   |Отправка письма - не возможна!",30);
			Возврат;
		КонецЕсли;
	
	//============================================================		
		Ответ = КодВозвратаДиалога.Нет;
		Если Вопрос("Вы действительно хотите отправить ""Счет на оплату""
					|Для "+строка(ЭтотОбъект.Контрагент)+"
					|на адрес эл.почты: "+АдресЭлПочтыКонтрагента+"?", РежимДиалогаВопрос.ДаНет, 30) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
		
	  Состояние("Идет отправка письма...");  i=0;
	 // ВременнаяПапка = "\\alpha\Userdir\ALL\_Оперативный День\Отправленные документы [@]\"; //КаталогВременныхФайлов();   //"C:\"; // "D:\Рассылка\";
	    ВременнаяПапка = КаталогВременныхФайлов(); //+++ 07.08.2013   "\\terminal\RESTORE Userdir\Отправленные документы\"; 
	  
	  СписокФайловВложений=Новый СписокЗначений;
	  ДокументОбъект=ЭтотОбъект;
			  //Печатается 1-я форма
			    		ИмяФайлаСообщения="Счет_Заказ_№"+ДокументОбъект.Номер+".xls";
				  	//+++ 18.06.2015
					//ТабличныйДокументОбъект=ДокументОбъект.ПечатьСчетаЗаказа("Счет"); //Счет на оплату
					  ТабличныйДокументОбъект=ДокументОбъект.ПечатьСчетаЗаказаКорректировки("Счет");
					
				  		ТабличныйДокументОбъект.Записать(временнаяПапка+ИмяФайлаСообщения,ТипФайлаТабличногоДокумента.XLS);
				  		СписокФайловВложений.Добавить(ВременнаяПапка+ИмяФайлаСообщения);
						
	Послать(АдресЭлПочтыКонтрагента,СписокФайловВложений, УЗ);	  
	
Состояние(" ");
сигнал();

Сообщить("Для "+строка(ЭтотОбъект.Контрагент)+" на эл.адрес: "+АдресЭлПочтыКонтрагента+" отправлен файл: "+ИмяФайлаСообщения+"
		  |(см.копию отправленного файла: "+временнаяПапка+ИмяФайлаСообщения+" )", СтатусСообщения.Информация);

Предупреждение("Отправка файла "+ИмяФайлаСообщения+" 
			   |на эл.адрес: "+АдресЭлПочтыКонтрагента+" завершена!", 10);
			   	  
КонецПроцедуры

Процедура Послать(АдресПолучателя,СписокФайловВложений, УЗ)
	   ТекстСообщения0 ="   Добрый день,
						 |
						 |Высылаем Вам копию Счета № "+Строка(Номер)+" от "+Формат(Дата,"ДЛФ=DD")+"
						 |
						 |      Отвечать на это письмо - НЕ НУЖНО!
						 |
						 |По всем вопросам - обращайтесь к вашему менеджеру.
						 |
						 |
						 |Ваш менеджер: "+?(ЗначениеЗаполнено(ДоговорКонтрагента.ОтветственноеЛицо),ДоговорКонтрагента.ОтветственноеЛицо.Наименование, Ответственный.Наименование)+"
						// |
						 //|ЗАО Торговая Компания ""Яршинторг"", 
						 //|юр./факт.адрес: 150044, Ярославская обл, Ярославль г, Базовая ул, дом № 3, стр.2
						 //|тел./факс: (4852) 200-200, 67-11-67
						 //|Web-сайт : http://www.yst76.ru
						 |";

	    	
	    ИПП=Новый ИнтернетПочтовыйПрофиль;
		ИПП.АдресСервераSMTP=УЗ.SMTPСервер;
		ИПП.ПортSMTP=УЗ.ПортSMTP;
		Если УЗ.ТребуетсяSMTPАутентификация Тогда
			ИПП.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
			ИПП.ПарольSMTP         = УЗ.ПарольSMTP;
			ИПП.ПользовательSMTP   = УЗ.ЛогинSMTP;
		Иначе
			ИПП.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
			ИПП.ПарольSMTP         = "";
			ИПП.ПользовательSMTP   = "";
		КонецЕсли;
		Письмо=Новый ИнтернетПочтовоеСообщение;
		
		//+++( 04.05.2016	"старый" вызов отправителя
	    //Письмо.Отправитель = УЗ.АдресЭлектроннойПочты;
		Письмо.Отправитель.Адрес 		   = УЗ.АдресЭлектроннойПочты;
		Письмо.Отправитель.ОтображаемоеИмя = УЗ.АдресЭлектроннойПочты;
        //+++)
		
	   //+++( 19.12.2011 - разбор адреса на несколько адресов
		 //Письмо.Получатели.Добавить(АдресПолучателя);
		i = Найти(АдресПолучателя,";"); j=Найти(АдресПолучателя, ",");
		k=?(i>0 и i>j,  i, ?(j>0 и j>i, j, 0) );
			
		Если i=0 и j=0 Тогда
			Письмо.Получатели.Добавить(АдресПолучателя);
		Иначе
			АдрОстаток = СокрЛП(АдресПолучателя);
			Пока (k>0) Цикл
				Адр1 = Лев(АдрОстаток, k-1);
				Если СокрЛП(Адр1)<>"" и Найти(Адр1,"@")>0 и Найти(Адр1,".")>0 Тогда
					Письмо.Получатели.Добавить(Адр1);
				Иначе
					Сообщить("Адрес '"+Адр1+"' не содержит @ или .");
				КонецЕсли;
				АдрОстаток = Прав(АдрОстаток, стрДлина(АдрОстаток)-k);
				i = Найти(АдрОстаток,";"); j=Найти(АдрОстаток, ",");
				k=?(i>0 и i>j,  i, ?(j>0 и j>i, j, 0) );
			КонецЦикла;
			Если СокрЛП(АдрОстаток)<>"" и Найти(АдрОстаток,"@")>0 и Найти(АдрОстаток,".")>0 Тогда
				Письмо.Получатели.Добавить(АдрОстаток);
			КонецЕсли;

		КонецЕсли; //+++ )
		
		Если ЗначениеЗаполнено(СписокФайловВложений) И СписокФайловВложений.Количество()>0 Тогда
			Для Каждого ТекАдр Из СписокФайловВложений Цикл
				Письмо.Вложения.Добавить(ТекАдр.Значение);
			КонецЦикла;
		КонецЕсли;
        Письмо.Тема="Счет на оплату";
	    
		
		Письмо.ИмяОтправителя ="";//"ЗАО ТК ""Яршинторг"", г.Ярославль";
	    Письмо.Организация ="";   //"ЗАО ТК ""Яршинторг"", г.Ярославль";
	    Письмо.Тексты.Добавить(ТекстСообщения0,ТипТекстаПочтовогоСообщения.простойТекст);
	
		Почта=Новый ИнтернетПочта;
	    Почта.Подключиться(ИПП);
		
		Попытка
			Почта.Послать(Письмо);
	    	Почта.Отключиться();
		Исключение
			сообщить("Не удалось отправить письмо! "+ОписаниеОшибки(), СтатусСообщения.Внимание);
		КонецПопытки;
		
КонецПроцедуры

Процедура Кнопка2Нажатие(Элемент)
	
	//ищем все заказы с начала тек.года и делаем макс.номер
	Если ЭтоНовый() или Этотобъект.Модифицированность() Тогда
		Предупреждение("Для автонумерации - запишите текущий документ!");
		Возврат;
	КонецЕсли;
	
	Если ссылка.ССайта Тогда
		Предупреждение("Документы с сайта - не могут менять номер и дату!");
		Возврат;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Предупреждение("Для автонумерации - обязательно заполните поле Склад!");
		Возврат;
	КонецЕсли;
	
	Если НЕ Склад.Транзитный Тогда
		Предупреждение("Для автонумерации - Склад должен быть транзитным!");
		Возврат;
	КонецЕсли;
	
	//Если НЕ Ссылка.Транзит Тогда
	//	Предупреждение("Для автонумерации - в документе должен быть
	//				   |установлен флаг ""Транзит""!");
	//	Возврат;
	//КонецЕсли;
	
	Если (Склад.Подразделение<>Ссылка.Подразделение) Тогда
		Предупреждение("Для автонумерации - Подразделение склада 
					   |должно совпадать с подразделением документа!");
		Возврат;
	КонецЕсли;
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос("Выполнить нумерацию по Подразделению(Да)?
				   |или только по одному Cкладу(Нет)?", Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		НумерацияПоСкладу=Истина;
	Иначе
		НумерацияПоСкладу=Ложь;
	КонецЕсли;

	
	Запрос = Новый Запрос;
	датаДок = ?(ЭтотОбъект.Дата='00010101',ТекущаяДата(), ЭтотОбъект.Дата);
	Запрос.УстановитьПараметр("Дата0", НачалоГода(датаДок) );
	Запрос.УстановитьПараметр("Дата1", датаДок );
	
	Если НумерацияПоСкладу Тогда  
		Усл = "ЗаказПокупателя.Склад = &Склад";
	 	Запрос.УстановитьПараметр("Склад", ЭтотОбъект.Склад);
	Иначе //06.11.2013 - нумерация по подразделению документа!
		Усл = "ЗаказПокупателя.Подразделение = &Подразделение";
		Запрос.УстановитьПараметр("Подразделение", ЭтотОбъект.Подразделение);
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	               |	ЕСТЬNULL(ЗаказПокупателя.НомерВходящегоДокумента, ""0"") КАК НомерВходящегоДокумента
	               |ИЗ
	               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	               |ГДЕ
	               |	//УсловиеГДЕ
	               //------------------ без ограничения по времени - максимальный номер! -----------------
				   |	И (НЕ ЗаказПокупателя.ПометкаУдаления)
				//+++ 11.01.2013 отбор номера распоряжения с начала года
				   |	И ЗаказПокупателя.Дата >= &Дата0
				   |	И ЗаказПокупателя.Дата < &Дата1
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерВходящегоДокумента УБЫВ
	               |АВТОУПОРЯДОЧИВАНИЕ";
	 Запрос.Текст = стрЗаменить(Запрос.Текст, "//УсловиеГДЕ", Усл);
				
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если  Выборка.Следующий() Тогда // на 1 больше предыдущего по данному подразделению!
		Попытка
			НомерВходящегоДокумента = Формат(число(Выборка.НомерВходящегоДокумента)+1,"ЧЦ=5; ЧВН=; ЧГ=0");
		Исключение
			Предупреждение("Номер последнего распоряжения: "+строка(Выборка.НомерВходящегоДокумента)+"
						   |состоит из букв и цифр. Установите номер вручную!");
		КонецПопытки;	
	Иначе
		НомерВходящегоДокумента = Формат(число(1),"ЧЦ=5; ЧВН=; ЧГ=0");
	КонецЕсли;
	
КонецПроцедуры

Процедура НомерВходящегоДокументаПриИзменении(Элемент)
	Попытка
		НомерВходящегоДокумента = Формат(число(НомерВходящегоДокумента),"ЧЦ=5; ЧВН=; ЧГ=0");
	Исключение
		Предупреждение("Номер распоряжения должен состоять из цифр!");
	КонецПопытки;	
КонецПроцедуры


//+++ 01.10.2014 - Для связи с заказом филиала - в заказе на перемещение - указывается Номер и Дата заказа покупателя филиала
функция НайтиЗаказНаПеремещение()
		рез = Неопределено;
	
	Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ЗаказПокупателя.Ссылка
	                |ИЗ
	                |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	                |ГДЕ
					//------------------таких не так уж и много
	                |	ЗаказПокупателя.Дата >= &ДатаВходящегоДокумента
	                |	И ЗаказПокупателя.ДатаВходящегоДокумента >= &ДатаВходящегоДокумента
	                |	И ЗаказПокупателя.НомерВходящегоДокумента = &НомерВходящегоДокумента
	                |	И ЗаказПокупателя.ВводитьТолькоПеремещение 
					|	И НЕ ЗаказПокупателя.Транзит
	                |";
	 
	 Запрос.УстановитьПараметр("НомерВходящегоДокумента", ЭтотОбъект.Номер );
	 Запрос.УстановитьПараметр("ДатаВходящегоДокумента", ЭтотОбъект.Дата - 31*86400 ); // Если дата этого документа менялась...то ищем не более 1 меняца назад
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	Если Выборка.Следующий() Тогда
		рез = выборка.Ссылка.ПолучитьОбъект(); 
	КонецЕсли;
	
	Возврат рез;
КонецФункции	


Процедура ДействияФормыПослатьInvoce(Кнопка)
	
	Если ЭтотОбъект.ЭтоНовый() Тогда
		Предупреждение("Предварительно требуется записать этот документ!", 30);
		Возврат;
	КонецЕсли;	
	
	Если НЕ ЭтотОбъект.Транзит Тогда // нетранзитный заказ?
		Предупреждение("Этот заказ не имеет признака 'Транзит' ! 
						|Заказ на перемещение нельзя делать!", 30);
		Возврат;
	КонецЕсли;	
	Если ЭтотОбъект.Транзит и ЭтотОбъект.Подразделение.Код="00005" Тогда // нетранзитный заказ?
		Предупреждение("Этот заказ имеет признака 'Транзит' но подразделение - головное (Ярославль)! 
						|Заказ на перемещение нельзя делать Для такого заказа!", 30);
		Возврат;
	КонецЕсли;	
	
	Если ЭтотОбъект.ВводитьТолькоПеремещение Тогда //уже Для перемещения...
		Предупреждение("Этот заказ уже имеет признака 'Для перемещения'! 
						|Заказ на перемещение Для перемещения... нельзя делать!", 30);
		Возврат;
	КонецЕсли;	
		
	
	ЗаказНаПеремещение = НайтиЗаказНаПеремещение(); //+++ 01.10.2014
	
	Если ЗаказНаПеремещение=неопределено Тогда
		Если Вопрос("Вы действительно хотите создать Заказ на перемещение из Ярославля?" ,РежимДиалогаВопрос.ДаНет ) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;	
	// Иначе создаем заказ на перемещение Для Филиала
    ЗаказНаПеремещение=Документы.ЗаказПокупателя.СоздатьДокумент();
	ЗаказНаПеремещение.Дата = ТекущаяДата();
	ЗаказНаПеремещение.Организация = ЭтотОбъект.Организация;
	
	ИначеЕсли ЗаказНаПеремещение.ПометкаУдаления Тогда
	     Предупреждение("Уже существует заказ на перемещение из Ярославля "+ЗаказНаПеремещение.Номер+" от "+строка(ЗаказНаПеремещение.Дата)+"
		 				|который уже объединен с другими заказами Для перемещения.
						|Внесение изменений уже невозможно...",30);
		 Возврат;	
	Иначе
		ЕстьИзменения = (ЗаказНаПеремещение.Товары.Итог("Сумма") <> ЭтотОбъект.Товары.Итог("Сумма"))
					или (ЗаказНаПеремещение.Товары.Итог("Количество") <> ЭтотОбъект.Товары.Итог("Количество")) 	
					или (ЗаказНаПеремещение.Товары.Количество() <> ЭтотОбъект.Товары.Количество()) 	
					или (ЗаказНаПеремещение.Услуги.Итог("Количество") <> ЭтотОбъект.Услуги.Итог("Количество")) 	
					или (ЗаказНаПеремещение.Услуги.Количество() <> ЭтотОбъект.Услуги.Количество()); 	
					
		Если Вопрос("Уже существует заказ на перемещение из Ярославля "+ЗаказНаПеремещение.Номер+" от "+строка(ЗаказНаПеремещение.Дата)+"
				    |"+?(ЕстьИзменения,"Есть различия по сумме или количеству! Рекомендуется перезаписать документ.","Различий по сумме и количеству товаров - нет.")+"
					|Вы действительно хотите перезаписать документ?",РежимДиалогаВопрос.ДаНет, 30, ?(ЕстьИзменения,КодВозвратаДиалога.Да, КодВозвратаДиалога.Нет)) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;	//+++ ссылка на Этот документ! +++ 
	КонецЕсли;
	
	 //+++ 01.10.2014 - так мы не потеряем связь когда 1 -> 1 заказ!
	 // после объединения - зак. на перемещение удаляется (править уже нельзя) и связь теряется...
	ЗаказНаПеремещение.НомерВходящегоДокумента = ЭтотОбъект.Номер;
	ЗаказНаПеремещение.ДатаВходящегоДокумента  = ЭтотОбъект.Дата;  //только дата
	
	//+++ 02.02.2015 - Для построения статуса заказа - необходимо знать "изначальный" заказ
	ЗаказНаПеремещение.Заказы.Очистить();
	стр1 =ЗаказНаПеремещение.Заказы.Добавить();
	стр1.ЗаказПокупателя = ЭтотОбъект.Ссылка;
	ЗаказНаПеремещение.ТипЗаказа = 7; // как через объединение 295 обработкой
	
	//+++ 14.10.2014
	Если Подразделение.ОбособленноеПодразделение Тогда 
		ЗаказНаПеремещение.Контрагент = Подразделение.Контрагент;
	Иначе
		Предупреждение("Неправильно указано Подразделение в этом заказе!
		|Заказ на перемещение нельзя делать Для такого заказа!", 30);
		Возврат;
	КонецЕсли;	
	ЗаказНаПеремещение.Склад = справочники.Склады.НайтиПоНаименованию("1");	
	//ЗаказНаПеремещение.ДоговорКонтрагента = ЗаказНаПеремещение.Контрагент.ОсновнойДоговорКонтрагента;
	ЗаказНаПеремещение.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("ОтветственноеЛицо",глТекущийПользователь,, ЗаказНаПеремещение.Контрагент);

	ЗаказНаПеремещение.ДатаОтгрузки = КонецДня(ТекущаяДата()) + 1;
	ЗаказНаПеремещение.ТипЦен = ЭтотОбъект.ТипЦен;
	ЗаказНаПеремещение.ВалютаДокумента  = ЭтотОбъект.ВалютаДокумента;
	ЗаказНаПеремещение.СуммаДокумента   = ЭтотОбъект.СуммаДокумента;
	ЗаказНаПеремещение.СуммаВключаетНДС = ЭтотОбъект.СуммаВключаетНДС;
	ЗаказНаПеремещение.УчитыватьНДС = ЭтотОбъект.УчитыватьНДС;
	
	ЗаказНаПеремещение.Транзит  = Ложь;
	ЗаказНаПеремещение.Подразделение    = Справочники.Подразделения.НайтиПоКоду("00005"); //Ярославль
	ЗаказНаПеремещение.Грузоотправитель = справочники.Контрагенты.ПустаяСсылка(); // пустой!
	ЗаказНаПеремещение.ВводитьТолькоПеремещение = Истина;
	ЗаказНаПеремещение.Проверен = Истина; //сразу делим!
	ЗаказНаПеремещение.Номер=сокрЛП(ЗаказНаПеремещение.Номер);
	
	ЗаказНаПеремещение.Ответственный = глТекущийПользователь;//кто создаёт
	ЗаказНаПеремещение.КратностьВзаиморасчетов = ЭтотОбъект.КратностьВзаиморасчетов;
	ЗаказНаПеремещение.КурсВзаиморасчетов = ЭтотОбъект.КурсВзаиморасчетов;
	
	стрЗак="Для покупателя: "+СокрЛП(ЭтотОбъект.Контрагент.Наименование)+" ";
	ЗаказНаПеремещение.Комментарий = ?(Найти(ЭтотОбъект.Комментарий , стрЗак)>0,"",стрЗак)+ЭтотОбъект.Комментарий;
	
	ЗаказНаПеремещение.Товары.Очистить();
	
	ЗаказНаПеремещение13 = ЗаказНаПеремещение.Скопировать();
	ЗаказНаПеремещение13.ТипЗаказа = 13;
	ЗаказНаПеремещение13.Дата = ТекущаяДата();
	ЗаказНаПеремещение13.Проверен = Истина; //сразу делим!



	Для Каждого строкаТовары Из ЭтотОбъект.Товары Цикл
		// Сакулина. 23.11.2016. Добавила Проверку на запрещенный типоразмер
		Если ПроверитьЗапрещенныйТипоразмер(строкаТовары.Номенклатура) = Истина 
			и проверен
			и согласован = ложь 
			и Проведен 
			и ТипЗаказа = 13 
			и Подразделение = Справочники.Подразделения.НайтиПоКоду("00005") 
			и ВводитьТолькоПеремещение = Истина
			и Заказы.Количество()=0
		Тогда
			строкаТоварыПеремещение13 = ЗаказНаПеремещение13.Товары.Добавить();
            ЗаполнитьЗначенияСвойств(строкаТоварыПеремещение13, строкаТовары);
        Иначе
			строкаТоварыПеремещение = ЗаказНаПеремещение.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(строкаТоварыПеремещение, строкаТовары);
		КонецЕсли;
	КонецЦикла;	
	ЗаказНаПеремещение.Услуги.Очистить();
	Для Каждого строкаУслуги Из ЭтотОбъект.Услуги Цикл
		строкаУслугиПеремещение = ЗаказНаПеремещение.Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(строкаУслугиПеремещение, строкаУслуги);
	КонецЦикла;	
	
	Попытка
	    Если  ЗаказНаПеремещение.Товары.Количество() > 0 или  ЗаказНаПеремещение.Услуги.Количество() > 0 Тогда
			ЗаказНаПеремещение.Записать( РежимЗаписиДокумента.Проведение );//сразу делим и проводим!
			Сообщить("Успешно проделен Заказ №"+ЗаказНаПеремещение.Номер+" от "+строка(ЗаказНаПеремещение.Дата)+" на перемещение из Ярославля в "+строка(ЗаказНаПеремещение.Контрагент), СтатусСообщения.Информация);
			
			стрЗакПеремещ = ">>"+ЗаказНаПеремещение.Номер+"# ";
			ЭтотОбъект.Комментарий = ?(Найти(ЭтотОбъект.Комментарий , стрЗакПеремещ)>0,"", стрЗакПеремещ)+ЭтотОбъект.Комментарий;
			
			ЭтотОбъект.Проверен = ложь; // 14.03.2016
			Сообщить("Текущий Заказ №"+ЭтотОбъект.Номер+" от "+строка(ЭтотОбъект.Дата)+" выключен [ ] на отгрузку. Флаг будет включен автоматически после поступления товаров из Ярославля!", СтатусСообщения.Информация);
		КонецЕсли;
	Исключение
		Сообщить("Не удалось сразу зарезервировать товары из этого заказа Для перемещения из Ярославля. ", СтатусСообщения.Важное);  //+ОписаниеОшибки()
		ЗаказНаПеремещение.Проверен = Ложь; 
		Если ЗаказНаПеремещение.Проведен Тогда
			ЗаказНаПеремещение.Записать( РежимЗаписиДокумента.ОтменаПроведения );
		Иначе
		    ЗаказНаПеремещение.Записать();
			Сообщить("Записан, но не зарезервирован Заказ №"+ЗаказНаПеремещение.Номер+" от "+строка(ЗаказНаПеремещение.Дата)+" на перемещение из Ярославля в "+строка(ЗаказНаПеремещение.Контрагент), СтатусСообщения.Внимание);
		КонецЕсли;
	КонецПопытки;
	
	Попытка
		Если  ЗаказНаПеремещение13.Товары.Количество() > 0  Тогда
			ЗаказНаПеремещение13.Записать( РежимЗаписиДокумента.Проведение );//сразу делим и проводим!
			СозданиеЗадачиНаСогласованиеТипоразмера(ЗаказНаПеремещение13.Ссылка);
					
			Сообщить("Успешно проделен Заказ №"+ЗаказНаПеремещение13.Номер+" от "+строка(ЗаказНаПеремещение13.Дата)+" на перемещение запрещенных типоразмеров из Ярославля в "+строка(ЗаказНаПеремещение13.Контрагент), СтатусСообщения.Информация);
			
			стрЗакПеремещ = ">>"+ЗаказНаПеремещение13.Номер+"# ";
			ЭтотОбъект.Комментарий = ?(Найти(ЭтотОбъект.Комментарий , стрЗакПеремещ)>0,"", стрЗакПеремещ)+ЭтотОбъект.Комментарий;
			
			ЭтотОбъект.Проверен = ложь; // 14.03.2016
			Сообщить("Текущий Заказ №"+ЭтотОбъект.Номер+" от "+строка(ЭтотОбъект.Дата)+" выключен [ ] на отгрузку. Флаг будет включен автоматически после поступления товаров из Ярославля!", СтатусСообщения.Информация);
		КонецЕсли;
	Исключение
		Сообщить("Не удалось сразу зарезервировать товары из этого заказа Для перемещения запрещенных типоразмеров из Ярославля. ", СтатусСообщения.Важное);  //+ОписаниеОшибки()
		ЗаказНаПеремещение13.Проверен = Ложь; 
		Если ЗаказНаПеремещение13.Проведен Тогда
			ЗаказНаПеремещение13.Записать( РежимЗаписиДокумента.ОтменаПроведения );
		Иначе
		    ЗаказНаПеремещение13.Записать();
			Сообщить("Записан, но не зарезервирован Заказ №"+ЗаказНаПеремещение13.Номер+" от "+строка(ЗаказНаПеремещение13.Дата)+" на перемещение из Ярославля в "+строка(ЗаказНаПеремещение13.Контрагент), СтатусСообщения.Внимание);
		КонецЕсли;
     КонецПопытки;
	
КонецПроцедуры

// + Сакулина
Функция ПроверитьЗапрещенныйТипоразмер(Номенклатура)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗапрещенныеТипоРазмеры.Типоразмер,
	|	ЗапрещенныеТипоРазмеры.ПроцентПродаж
	|ИЗ
	|	РегистрСведений.ЗапрещенныеТипоразмеры КАК ЗапрещенныеТипоРазмеры
	|ГДЕ
	|	ЗапрещенныеТипоРазмеры.Типоразмер = &Типоразмер
	|	И ЗапрещенныеТипоРазмеры.НоменклатурнаяГруппа = &НоменклатурнаяГруппа";
	Запрос.УстановитьПараметр("Типоразмер",Номенклатура.Типоразмер);
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа",Номенклатура.НоменклатурнаяГруппа);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат  Истина;
	Иначе
		Возврат  Ложь;
	КонецЕсли;
КонецФункции
// - Сакулина

функция ПолучитьДатуПрибытия()
	
	рез = Дата(1,1,1);
	закПок = ЭтотОбъект.Ссылка;
	
	отбор1 = Новый структура;
	отбор1.Вставить("Объект", закПок );
	отбор1.Вставить("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90159") ); 
	зап = регистрыСведений.ЗначенияСвойствОбъектов.Получить(отбор1);
	
	Если зап.Значение = Дата(1,1,1) или зап.Значение = неопределено Тогда
		
		Сигнал();Сигнал();Сигнал();
		Предупреждение("В заказе покупателя "+строка(закПок) + "
				       |НЕ УКАЗАНО свойство ""Дата прихода в пункт назначения""!!!",30);
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Использовать дату текущего документа
			   	       |как Дату прихода в пункт назначения в Invoice?",Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
    		рез = ссылка.Дата;
		КонецЕсли;

	Иначе
		
		рез = зап.Значение;
		
	КонецЕсли;	
	
	Возврат рез;
	
КонецФункции

функция ПолучитьТекстInvose(ДатаПрих)
	
	Запрос = Новый Запрос;
	запрос.текст = "ВЫБРАТЬ
               |	А.Номер,
               |	А.ТипНакладной,
               |	А.ДатаИВремя,
               |	А.НомерСтроки,
               |	А.КодТовара,
               |	А.Кондиционность,
               |	А.Количество,
               |	"""" КАК СрокГодности,
               |	"""" КАК ДатаПроизводства,
               |	"""" КАК Партия,
               |	"""" КАК КодПокупателя,
               |	"""" КАК НаименованиеКлиента,
               |	"""" КАК АдресДоставки
               |ИЗ
               |	(ВЫБРАТЬ
               |		ЗаказПокупателяТовары.Ссылка.Номер КАК Номер,
               |		1 КАК ТипНакладной,
               |		ЗаказПокупателяТовары.Ссылка.Дата КАК ДатаИВремя,
               |		ЗаказПокупателяТовары.НомерСтроки КАК НомерСтроки,
               |		ЗаказПокупателяТовары.Номенклатура.Код КАК КодТовара,
               |		1 КАК Кондиционность,
               |		ЗаказПокупателяТовары.Количество КАК Количество
               |	ИЗ
               |		Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
               |	ГДЕ
               |		ЗаказПокупателяТовары.Ссылка = &Ссылка) как А
               |";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	текст = "";
	строкаМассив = Новый Массив;
		
	Если Выборка.Следующий() Тогда
		строка1 = СокрЛП(выборка.Номер);  //13 полей и  12 ";"
		Для i=1 по 12 Цикл
			Если i=2 Тогда
				строка1 = строка1+";"+ СокрЛП(ДатаПрих);
			Иначе
				строка1 = строка1+";"+ СокрЛП(выборка[i]);
			КонецЕсли;
	КонецЦикла;	
		текст = строка1;
		
		Пока Выборка.Следующий() Цикл  //со 2-ой строки и до конца
		строка1 = СокрЛП(выборка.Номер);  //13 полей и  12 ";"
			Для i=1 по 12 Цикл
				Если i=2 Тогда
					строка1 = строка1+";"+ СокрЛП(ДатаПрих);
				Иначе
					строка1 = строка1+";"+ СокрЛП(выборка[i]);
				КонецЕсли;
			КонецЦикла;	
		текст = текст +"
			    |"+строка1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат текст;
	
КонецФункции

Процедура ПослатьInvoice(АдресПолучателя,СписокФайловВложений, УЗ)
	   ТекстСообщения0 ="   Добрый день,
						 |
						 |Высылаем Вам файл  № "+Строка(Номер)+" от "+Формат(Дата,"ДЛФ=DD")+"
						 |
						 |С уважением,
						 |ЗАО Торговая Компания ""Яршинторг"", 
						 |юр./факт.адрес: 150044, Ярославская обл, Ярославль г, Базовая ул, дом № 3, стр.2
						 |тел./факс: (4852) 200-200, 67-11-67
						 |Web-сайт : http://www.yst76.ru
						 |";

	    	
	    ИПП=Новый ИнтернетПочтовыйПрофиль;
		ИПП.АдресСервераSMTP=УЗ.SMTPСервер;
		ИПП.ПортSMTP=УЗ.ПортSMTP;
		Если УЗ.ТребуетсяSMTPАутентификация Тогда
			ИПП.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
			ИПП.ПарольSMTP         = УЗ.ПарольSMTP;
			ИПП.ПользовательSMTP   = УЗ.ЛогинSMTP;
		Иначе
			ИПП.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
			ИПП.ПарольSMTP         = "";
			ИПП.ПользовательSMTP   = "";
		КонецЕсли;
		Письмо=Новый ИнтернетПочтовоеСообщение;
		Письмо.Отправитель=УЗ.АдресЭлектроннойПочты;
		
	   //+++( 19.12.2011 - разбор адреса на несколько адресов
		 //Письмо.Получатели.Добавить(АдресПолучателя);
		i = Найти(АдресПолучателя,";"); j=Найти(АдресПолучателя, ",");
		k=?(i>0 и i>j,  i, ?(j>0 и j>i, j, 0) );
			
		Если i=0 и j=0 Тогда
			Письмо.Получатели.Добавить(АдресПолучателя);
		Иначе
			АдрОстаток = СокрЛП(АдресПолучателя);
			Пока (k>0) Цикл
				Адр1 = Лев(АдрОстаток, k-1);
				Если СокрЛП(Адр1)<>"" и Найти(Адр1,"@")>0 и Найти(Адр1,".")>0 Тогда
					Письмо.Получатели.Добавить(Адр1);
				Иначе
					Сообщить("Адрес '"+Адр1+"' не содержит @ или .");
				КонецЕсли;
				АдрОстаток = Прав(АдрОстаток, стрДлина(АдрОстаток)-k);
				i = Найти(АдрОстаток,";"); j=Найти(АдрОстаток, ",");
				k=?(i>0 и i>j,  i, ?(j>0 и j>i, j, 0) );
			КонецЦикла;
			Если СокрЛП(АдрОстаток)<>"" и Найти(АдрОстаток,"@")>0 и Найти(АдрОстаток,".")>0 Тогда
				Письмо.Получатели.Добавить(АдрОстаток);
			КонецЕсли;

		КонецЕсли; //+++ )
		
		Если ЗначениеЗаполнено(СписокФайловВложений) И СписокФайловВложений.Количество()>0 Тогда
			Для Каждого ТекАдр Из СписокФайловВложений Цикл
				Письмо.Вложения.Добавить(ТекАдр.Значение);
			КонецЦикла;
		КонецЕсли;
        Письмо.Тема="Invoice от ЗАО ТК ""Яршинторг"" - Реализация №"+Строка(Номер)+" от "+Формат(Дата,"ДЛФ=DD");
	    
		
		Письмо.ИмяОтправителя ="ЗАО ТК ""Яршинторг"", г.Ярославль";
	    Письмо.Организация ="ЗАО ТК ""Яршинторг"", г.Ярославль";
	    Письмо.Тексты.Добавить(ТекстСообщения0,ТипТекстаПочтовогоСообщения.простойТекст);
	
		Почта=Новый ИнтернетПочта;
	  
		Попытка
		  Почта.Подключиться(ИПП); //!!!
			Почта.Послать(Письмо);
	    	Почта.Отключиться();
		Исключение
			сообщить("Не удалось отправить письмо! "+ОписаниеОшибки(), СтатусСообщения.Внимание);
		КонецПопытки;
		
КонецПроцедуры

//+++ 11.12.2017  по задаче № 37329 коэффициент 1.3 только для товаров, входящих в папки груз Шин
функция ПолучитьСписокГрузШин()
	
	масГруз=НОВЫЙ СписокЗначений;
	масГруз.Добавить( справочники.Номенклатура.НайтиПоКоду("0080632") );
	масГруз.Добавить( справочники.Номенклатура.НайтиПоКоду("9109641") );
	масГруз.Добавить( справочники.Номенклатура.НайтиПоКоду("9109642") );
	масГруз.Добавить( справочники.Номенклатура.НайтиПоКоду("9109643") );
	масГруз.Добавить( справочники.Номенклатура.НайтиПоКоду("9109644") );
	масГруз.Добавить( справочники.Номенклатура.НайтиПоКоду("0001748") );
	масГруз.Добавить( справочники.Номенклатура.НайтиПоКоду("0001750") );
	масГруз.Добавить( справочники.Номенклатура.НайтиПоКоду("0080631") );
	масГруз.Добавить( справочники.Номенклатура.НайтиПоКоду("9178094") );
		
	возврат масГруз;
	
КонецФункции


Процедура ТоварыПриПолученииДанных(Элемент, ОформленияСтрок)
	СписокНоменклатуры = новый СписокЗначений;
	итогОбъем = 0;
	СписокГрузШин = ПолучитьСписокГрузШин(); //11.12.2017
	
	Для каждого ОформлениеСтроки из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
		Если ЭлементыФормы.Товары.Колонки.Всего.Видимость Тогда
			ОформлениеСтроки.Ячейки.Всего.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.Всего.Текст = ФорматСумм(ДанныеСтроки.Сумма
			+ ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС));
		КонецЕсли;
		
		ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
		
		// Рассчитать и Показать в колонках информацию о сумме и отклонении от плановой себестоимости
		ЗаполнитьСуммуИОтклонениеОтПлановойСебестоимостиТабЧасти(ОформлениеСтроки, ДанныеСтроки, ЭтотОбъект);
		
		ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
		ПоказатьСуммуБезСкидок(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Цена, ДанныеСтроки.Количество);
		
		//+++ 06.07.2012 - в модуле яштПрочее добавлены 2 функции
		ПоказатьОбъем(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
		
		//+++ 11.12.2017 только для груз.шин  по задаче № 37329
		//Если ДанныеСтроки.номенклатура.ВидТовара = Перечисления.ВидыТоваров.Диски или ДанныеСтроки.номенклатура.ВидТовара = Перечисления.ВидыТоваров.Шины Тогда
		Если СписокГрузШин.НайтиПоЗначению(ДанныеСтроки.номенклатура.Родитель)<>неопределено тогда
			Попытка 
				ОформлениеСтроки.Ячейки.Объем.Текст = Строка(Число(ОформлениеСтроки.Ячейки.Объем.Текст)*1.3);
			Исключение 
			КонецПопытки;   //плотников
		Иначе
			Попытка ОформлениеСтроки.Ячейки.Объем.Текст = Строка(Число(ОформлениеСтроки.Ячейки.Объем.Текст)*1);Исключение КонецПопытки;
		КонецЕсли;
		СписокНоменклатуры.Добавить(ДанныеСтроки.номенклатура);
				
	КонецЦикла;
	
	//+++ 12.07.2012 - итоги по всей таблице, а не только по видимой части!
	// общ.модули  яштПрочее.ВычислитьОбъемНоменклатуры(      в кубометрах!
	Если мКолонкиТовары.Объем.Видимость Тогда
		итогОбъем = 0;
		Для каждого стр1 из Товары Цикл
			
		//+++ 11.12.2017 только для груз.шин по задаче № 37329
		//Если стр1.номенклатура.ВидТовара = Перечисления.ВидыТоваров.Диски или стр1.номенклатура.ВидТовара = Перечисления.ВидыТоваров.Шины Тогда
		Если СписокГрузШин.НайтиПоЗначению(стр1.номенклатура.Родитель)<>неопределено тогда
 				итогОбъем = итогОбъем + стр1.Количество * ВычислитьОбъемНоменклатуры(стр1.Номенклатура) * 1.3;   //плотников
			Иначе
				итогОбъем = итогОбъем + стр1.Количество * ВычислитьОбъемНоменклатуры(стр1.Номенклатура) * 1;
			КонецЕсли;
		КонецЦикла;
		
		ЭлементыФормы.Товары.Колонки.Объем.ТекстПодвала = строка(итогОбъем);
	КонецЕсли;
	
	Если  Подразделение = Справочники.Подразделения.НайтиПоКоду("00005") и ВводитьТолькоПеремещение = Истина и Заказы.Количество()=0 и (не Согласован или ТипЗаказа = 13) тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Номенклатура.Ссылка как Номенклатура
		               |ИЗ
		               |	Справочник.Номенклатура КАК Номенклатура
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗапрещенныеТипоразмеры КАК ЗапрещенныеТипоразмеры
		               |		ПО Номенклатура.Типоразмер = ЗапрещенныеТипоразмеры.Типоразмер
		               |			И Номенклатура.НоменклатурнаяГруппа = ЗапрещенныеТипоразмеры.НоменклатурнаяГруппа
		               |ГДЕ
		               |	Номенклатура.Ссылка В(&СписокНоменклатуры)";
					   Запрос.УстановитьПараметр("СписокНоменклатуры",СписокНоменклатуры);
					   ЗапрещеннаяНоменклатура = Запрос.Выполнить().Выгрузить();
					   
					   Для каждого ОформлениеСтроки из ОформленияСтрок Цикл
						   Если  ЗапрещеннаяНоменклатура.Найти(ОформлениеСтроки.ДанныеСтроки.номенклатура,"Номенклатура")<> неопределено тогда
							     ОформлениеСтроки.ЦветФона = WebЦвета.БледноКрасноФиолетовый;
						   КонецЕсли;	   
					   КонецЦикла;	   
	КонецЕсли;
	
КонецПроцедуры



//+++ 18.01.2013 сортирует по алгоритму доп.печ.формы - Заказ покупателя (сорт.по складам)
// по макс.остатку товара на складе, по складам и по номеруСтроки
Процедура КоманднаяПанельТоварыСортироватьПоСкладам(Кнопка)
	
	//----------------находим Новый порядок строк-----------
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", Ссылка);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	               	|	ЕСТЬNULL(ЗаказПокупателяТовары.НомерСтроки, 1000) КАК НомерСтроки,
	               	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	               	|	ЗаказыПокупателейОстатки.КоличествоОстаток КАК КОличествоЗаказано,
	               	|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	               	|	ЕСТЬNULL(ТоварыНаСкладахОстатки.Склад, 0) КАК Склад,
	               	|	ТоварыНаСкладахОстатки.Склад.Наименование КАК СкладИмя,
	               	|	""ЗакПок"" КАК типСклада
	               	|ПОМЕСТИТЬ начТаблица
	               	|ИЗ
	               	|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя = &ЗаказПокупателя) КАК ЗаказыПокупателейОстатки
	               	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(, //ОТБОРСКЛАД
			|) КАК ТоварыНаСкладахОстатки
	               	|		ПО ЗаказыПокупателейОстатки.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	               	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               	|			ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	               	|			ЗаказПокупателяТовары.НомерСтроки КАК НомерСтроки
	               	|		ИЗ
	               	|			Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	               	|		ГДЕ
	               	|			ЗаказПокупателяТовары.Ссылка = &ЗаказПокупателя) КАК ЗаказПокупателяТовары
	               	|		ПО ЗаказыПокупателейОстатки.Номенклатура = ЗаказПокупателяТовары.Номенклатура
	               	|ГДЕ
	               	|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) > 0
	               	|
	               	|ОБЪЕДИНИТЬ ВСЕ
	               	|
	               	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	               	|	ЕСТЬNULL(ЗаказПокупателяТовары.НомерСтроки, 1000),
	               	|	ЗаказыПокупателейОстатки.Номенклатура,
	               	|	ЗаказыПокупателейОстатки.КоличествоОстаток,
	               	|	ЕСТЬNULL(ТоварыНаОтветственномХранении.КоличествоОстаток, 0),
	               	|	ЕСТЬNULL(ТоварыНаОтветственномХранении.Склад, 0),
	               	|	""я"" + ТоварыНаОтветственномХранении.Склад.Наименование,
	               	|	""ОТХ""
	               	|ИЗ
	               	|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя = &ЗаказПокупателя) КАК ЗаказыПокупателейОстатки
	               	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаОтветственномХранении.Остатки(, //ОТБОРСКЛАД
			|) КАК ТоварыНаОтветственномХранении
	               	|		ПО ЗаказыПокупателейОстатки.Номенклатура = ТоварыНаОтветственномХранении.Номенклатура
	               	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               	|			ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	               	|			ЗаказПокупателяТовары.НомерСтроки КАК НомерСтроки
	               	|		ИЗ
	               	|			Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	               	|		ГДЕ
	               	|			ЗаказПокупателяТовары.Ссылка = &ЗаказПокупателя) КАК ЗаказПокупателяТовары
	               	|		ПО ЗаказыПокупателейОстатки.Номенклатура = ЗаказПокупателяТовары.Номенклатура
	               	|ГДЕ
	               	|	ЕСТЬNULL(ТоварыНаОтветственномХранении.КоличествоОстаток,0) > 0";
			// //ОТБОРСКЛАД
			// |
		   Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") 
			   И ЗначениеЗаполнено(глТекущийПользователь.ОсновноеПодразделение) Тогда
			   Запрос.Текст=СтрЗаменить(Запрос.Текст,"//ОТБОРСКЛАД"," (Склад.Транзитный И Склад.Подразделение=&Подразделение И НЕ Склад.ЗапретитьИспользование) ");
			   Запрос.УстановитьПараметр("Подразделение", глТекущийПользователь.ОсновноеПодразделение);
		   Иначе
			   Запрос.Текст=СтрЗаменить(Запрос.Текст,"//ОТБОРСКЛАД"," ( (НЕ Склад.Транзитный) и (НЕ Склад.ЗапретитьИспользование) )"); 
		   КонецЕсли;	   
		   
		   
		  Результат = Запрос.Выполнить();
	
	
	
//---------------Формирование "оптимальной" таблицы - 1товар - 1склад, на котором - максОстаток (по номенклатуре и складу)
	Запрос1 = Новый Запрос;
	Запрос1.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	Запрос1.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	начТаблица1.НомерСтроки КАК НомерСтроки,
	                |	начТаблица1.Номенклатура КАК Номенклатура,
	                |	начТаблица1.КОличествоЗаказано КАК КОличествоЗаказано,
	                |	начТаблица1.КоличествоОстаток КАК КоличествоОстаток,
	                |	ЕстьNull(начТаблицаМаксОст.СкладСортировки,""яяяяя"") КАК СкладСортировки,
	                |	начТаблица1.Склад КАК Склад,
	                |	начТаблица1.типСклада
	                |ИЗ
	                |	начТаблица КАК начТаблица1
	                |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10000
	                |			начТаблицаНом.НомерСтроки КАК НомерСтроки,
	                |			начТаблицаНом.Номенклатура КАК Номенклатура,
	                |			начТаблицаНом.КОличествоЗаказано КАК КОличествоЗаказано,
	                |			начТаблицаНом.КоличествоОстаток КАК КоличествоОстаток,
	                |			начТаблицаСкл.СкладСортировки КАК СкладСортировки,
	                |			начТаблицаСкл.Склад КАК Склад,
	                |			начТаблицаСкл.типСклада КАК типСклада
	                |		ИЗ
	                |			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |				начТаблицаНом.НомерСтроки КАК НомерСтроки,
	                |				начТаблицаНом.Номенклатура КАК Номенклатура,
	                |				МАКСИМУМ(начТаблицаНом.КОличествоЗаказано) КАК КОличествоЗаказано,
	                |				МАКСИМУМ(начТаблицаНом.КоличествоОстаток) КАК КоличествоОстаток
	                |			ИЗ
	                |				начТаблица КАК начТаблицаНом
	                |			
	                |			СГРУППИРОВАТЬ ПО
	                 |				начТаблицаНом.Номенклатура,
					 |				начТаблицаНом.НомерСтроки) КАК начТаблицаНом
	                |				ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |					МАКСИМУМ(начТаблицаСкл.КоличествоОстаток) КАК КоличествоОстаток,
	                |					начТаблицаСкл.СкладИмя КАК СкладСортировки,
	                |					начТаблицаСкл.НомерСтроки КАК НомерСтроки,
	                |					начТаблицаСкл.Номенклатура КАК Номенклатура,
	                |					начТаблицаСкл.Склад КАК Склад,
	                |					начТаблицаСкл.типСклада КАК типСклада
	                |				ИЗ
	                |					начТаблица КАК начТаблицаСкл
	                |				
	                |				СГРУППИРОВАТЬ ПО
	                |					начТаблицаСкл.Склад,
	                |					начТаблицаСкл.СкладИмя,
	                |					начТаблицаСкл.типСклада,
	                |					начТаблицаСкл.Номенклатура,
					|					начТаблицаСкл.НомерСтроки) КАК начТаблицаСкл
	                |				ПО начТаблицаНом.КоличествоОстаток = начТаблицаСкл.КоличествоОстаток
	                |					И начТаблицаНом.Номенклатура = начТаблицаСкл.Номенклатура
	                |					И начТаблицаНом.НомерСтроки = начТаблицаСкл.НомерСтроки
	                |		
	                |		УПОРЯДОЧИТЬ ПО
	                |			КоличествоОстаток УБЫВ,
					|			СкладСортировки
	             	|) КАК начТаблицаМаксОст
	                |		ПО 
					|начТаблица1.Номенклатура = начТаблицаМаксОст.Номенклатура 
	                //|	 и	начТаблица1.НомерСтроки = начТаблицаМаксОст.НомерСтроки
	                |
	                |УПОРЯДОЧИТЬ ПО
					|   СкладСортировки,
	                |	НомерСтроки,
	                |	КоличествоОстаток УБЫВ
					//|	Склад
					|
	                |ИТОГИ
	                |	МИНИМУМ(НомерСтроки),
	                |	МАКСИМУМ(КОличествоЗаказано),
	                |	СУММА(КоличествоОстаток)
	                |ПО
	                |	СкладСортировки,
	                |	Номенклатура";
						
	Результат =	Запрос1.Выполнить();	
	Если Результат.Пустой() Тогда
		Предупреждение("Сортировка не выполнена!");
		Возврат;
	КонецЕсли;
	
	ТаблицаЗначенийТоваров = Новый ТаблицаЗначений;
	ТаблицаЗначенийТоваров = Товары.Выгрузить();

	списокСтрок = Новый СписокЗначений;
	ВыборкаМаксСклад = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаМаксСклад.Следующий() Цикл
	ВыборкаНоменклатура = ВыборкаМаксСклад.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    	Пока ВыборкаНоменклатура.Следующий() Цикл
	    списокСтрок.Добавить(ВыборкаНоменклатура.НомерСтроки);
		КонецЦикла;
	КонецЦикла;
	
	//=================перемещение Строк=========================
	N = ТаблицаЗначенийТоваров.Количество(); 
	колСдвигов = 0;
	Для i=0 по списокСтрок.Количество()-1 Цикл
		    нашли = Ложь;
			Для j=0 по N-1 Цикл // нужна именно строка, а значения... найтиСтроки() не подходит!
				Если ТаблицаЗначенийТоваров[j].номерСтроки = списокСтрок[i].Значение Тогда
					стр1 = ТаблицаЗначенийТоваров[j]; 
					нашли = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;	
			Если (i <> j)  и (i<N) и нашли Тогда
				колСдвигов = колСдвигов+1;
		   		ТаблицаЗначенийТоваров.Сдвинуть(стр1, i - j);
			КонецЕсли;	
	КонецЦикла;	
	
	//==============Перенумерация и Обратная загрузка =============
	Для nn=1 по N Цикл
		ТаблицаЗначенийТоваров[nn-1].НомерСтроки = nn;
	КонецЦикла;
	
	Если колСдвигов>0 Тогда
		Товары.Очистить();
		Товары.Загрузить(ТаблицаЗначенийТоваров);
		Предупреждение("Пересортировка завершена! Сделано "+строка(колСдвигов)+" сдвигов строк.", 30);
	Иначе
		Предупреждение("Пересортировка не требуется!",30);
	КонецЕсли;	
КонецПроцедуры


Процедура КоманднаяПанельТоварыВыгрузитьВТСД(Кнопка)
	
	ТабДок = СформироватьСписокАдресовХранения();
	Если ТабДок<>Неопределено Тогда
		Если глТорговоеОборудование.млТерминал.Количество() = 0 Тогда
			глТорговоеОборудование.ОтключитьОборудование();
			глТорговоеОборудование.ПодключитьОборудование();
		КонецЕсли;
			
		Если глТорговоеОборудование.млТерминал.Количество() = 1 Тогда
			 РезультатВыбора = глТорговоеОборудование.млТерминал[0];
		Иначе
			СписокТерминаловСбораДанных = Новый СписокЗначений;
			Для Каждого ТерминалСбораДанных из глТорговоеОборудование.млТерминал Цикл
				СписокТерминаловСбораДанных.Добавить(ТерминалСбораДанных, ТерминалСбораДанных.Модель);
			КонецЦикла;
			РезультатВыбора = СписокТерминаловСбораДанных.ВыбратьЭлемент("Выберите терминал сбора данных");
			Если РезультатВыбора = Неопределено Тогда
				Предупреждение("Терминал сбора данных не подключен!");
				Возврат;
			КонецЕсли;
			РезультатВыбора = РезультатВыбора.Значение;
		КонецЕсли;
		 ответ = глТорговоеОборудование.ВыгрузитьДанныеВТерминалСбораДанных( РезультатВыбора, ТабДок );
	
	ТабДок.Показать();	
	Предупреждение(" Выгрузка завершена!
				   |"+ответ);
				   
	Иначе
		Предупреждение(" Нет товаров Для выгрузки в ТСД!");
	КонецЕсли;
	
КонецПроцедуры


функция СформироватьСписокАдресовХранения()
	рез = Неопределено;
	
   Запрос = Новый Запрос;
   Запрос.УстановитьПараметр("ЗаказПокупателя", ЭтотОбъект.ссылка);
   Запрос.УстановитьПараметр("Склад5000",Справочники.Склады.НайтиПоКоду("00642"));
   Запрос.Текст = "ВЫБРАТЬ
                  |	ЕСТЬNULL(ЗаказыПокупателей.НомерСтроки, 1000) КАК НомерСтроки,
                  |	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
                  |	ЗаказыПокупателейОстатки.КоличествоОстаток КАК КоличествоЗаказано,
                  |	ЕСТЬNULL(ТоварыАдресноеХранениеОстатки.АдресХранения.Код, """") КАК АдресХраненияКод,
                  |	ЕСТЬNULL(ТоварыАдресноеХранениеОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток
                  |ИЗ
                  |	РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя = &ЗаказПокупателя) КАК ЗаказыПокупателейОстатки
                  |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
                  |			ЗаказПокупателяТовары.НомерСтроки КАК НомерСтроки,
                  |			ЗаказПокупателяТовары.Номенклатура КАК Номенклатура
                  |		ИЗ
                  |			Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
                  |		ГДЕ
                  |			ЗаказПокупателяТовары.Ссылка = &ЗаказПокупателя) КАК ЗаказыПокупателей
                  |		ПО ЗаказыПокупателейОстатки.Номенклатура = ЗаказыПокупателей.Номенклатура
                  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыАдресноеХранение.Остатки(, Склад = &Склад5000) КАК ТоварыАдресноеХранениеОстатки
                  |		ПО ЗаказыПокупателейОстатки.Номенклатура = ТоварыАдресноеХранениеОстатки.Номенклатура
                  |ГДЕ
                  |	ТоварыАдресноеХранениеОстатки.КоличествоОстаток > 0
                  |
                  |УПОРЯДОЧИТЬ ПО
                  |	ТоварыАдресноеХранениеОстатки.АдресХранения.Порядок
                  |ИТОГИ
                  |	МИНИМУМ(НомерСтроки),
                  |	СРЕДНЕЕ(КоличествоЗаказано),
                  |	СУММА(КоличествоОстаток)
                  |ПО
                  |	Номенклатура";
				  
выборкаНоменклатуры = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

Если выборкаНоменклатуры.Количество()>0 Тогда
	
	табДок =Новый ТабличныйДокумент;
	//	выгружается с 5-ой строки:
	табДок.Область(4,2,4,2).текст = "Код / Название / Адрес / Количество / N";

	//	Данные.ПолучитьОбласть(5,2, Данные.ВысотаТаблицы, Данные.ШиринаТаблицы);
	чПМ = 1; 
	Пока выборкаНоменклатуры.Следующий() Цикл
			
		КолМин = мин(выборкаНоменклатуры.КоличествоОстаток, выборкаНоменклатуры.КоличествоЗаказано);
		Кол = 0;
		выборкаАдресов = выборкаНоменклатуры.Выбрать();
		Пока выборкаАдресов.Следующий() и Кол<КолМин Цикл
			  табДок.Область(4+чПМ, 2,  4+чПМ, 2).Текст = СокрЛП(выборкаНоменклатуры.номенклатура.Код);
			  табДок.Область(4+чПМ, 3,  4+чПМ, 3).Текст = Лев(выборкаНоменклатуры.номенклатура.Наименование,75);
			  табДок.Область(4+чПМ, 4,  4+чПМ, 4).Текст = "1"+сокрЛП(выборкаАдресов.АдресХраненияКод);
			  Кол = Кол +  выборкаАдресов.КоличествоОстаток;
			  Если Кол<КолМин Тогда
			   табДок.Область(4+чПМ, 5,  4+чПМ, 5).Текст = выборкаАдресов.КоличествоОстаток;
		      Иначе
			   табДок.Область(4+чПМ, 5,  4+чПМ, 5).Текст = КолМин - (Кол - выборкаАдресов.КоличествоОстаток);
			   Кол = КолМин; 
		   	  КонецЕсли; 
			  табДок.Область(4+чПМ, 6,  4+чПМ, 6).Текст = чПМ;
			чПМ = чПМ + 1;
		КонецЦикла;	
	КонецЦикла;

рез = табДок;
КонецЕсли;	

	Возврат рез;
КонецФункции

//+++ Для групповой обработки - ЭКСПОРТ
Процедура КоманднаяПанельТоварыЦенаКонтрагента(Кнопка) ЭКСПОРТ
	
	Если Товары.Количество()=0 Тогда
		Предупреждение("Нет товаров Для пересчета!");
		Возврат;
	КонецЕсли;
	
	СписокНом = Новый СписокЗначений;
	СписокНом.ЗагрузитьЗначения( Товары.ВыгрузитьКолонку("Номенклатура") );  //+++ 07.10.2014
	
	//+++ 25.02.2014 - срез цен на дату документа... но не более чем на ВеличинаПодсчетаПериодаВДокументеЦены=30(дней) !
	MaxDays	  = Константы.ВеличинаПодсчетаПериодаВДокументеЦены.Получить(); //30-90 дней = 1-3 мес!
	
	ДатаСреза = ?(Контрагент.ДатаСрезаЦен>'20140101', Контрагент.ДатаСрезаЦен, ЭтотОбъект.Дата );
	
	Если ( НачалоДня(ТекущаяДата()) - ДатаСреза )> 86400*MaxDays Тогда
		Предупреждение("Расчет цен на дату: "+формат(ДатаСреза,"")+" 
					   |превышает макс.разрешенный период "+строка(MaxDays)+" дней!
					   |поэтому расчет цен будет произведен на текущую дату!",30);
	   ДатаСреза = неопределено; // на текущую дату!
	КонецЕсли;  
	
	табЗнач1  = Новый ТаблицаЗначений; 
	
	//+++ 26.02.2014  цены и скидки - на дату документа!
	//табЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента(Контрагент, СписокНом);
	  табЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента(Контрагент, СписокНом, ДатаСреза); // по документу Политика ценообразования 

    //+++ 07.11.2013
	Если ТипЗнч(табЗнач1) = Тип("Строка") Тогда //Если нет документа политики ценообразования - то по регистрам сведений "Политика ценообразования"
		табЗнач1  = Новый ТаблицаЗначений;
		
		
		//+++( 12.01.2015 - экспортный регистр сведений 
		//- только Для Экспортных клиентов И ТОЛЬКО Для Валютных документов !!!
		флЭкспорт  = Контрагент.Экспорт и ВалютаДокумента.Код<>"643";//15.08.2016 по коду быстрее!
		
 	//21.03.2017 - только Если этот договор - экспортный в рублях и без *
		флБезНДС = (Контрагент.Экспорт И ДоговорКонтрагента.ВалютаВзаиморасчетов.Код="643" 
				 И найти(врег(ДоговорКонтрагента.Наименование),"ЭКСПОРТ")>0
				 и найти(ДоговорКонтрагента.Наименование,"*")=0 );

		флТурецкий = Контрагент.КлиентТурецкойБазы; //21.12.2017
		
		ЕСЛИ флЭкспорт или флТурецкий Тогда
			
			БезУчетаФрахта = ?(флТурецкий, ЛОЖЬ, Истина); //+++ 10.01.2017 для Экспортных Без учета фрахта ВСЕГДА!
			
			//+++ 01.02.2017 --- учет Фрахта Для Турецких клиентов ---
			Если флТурецкий Тогда
				Если Вопрос("Для клиентов Турецкой базы - используется Фрахт!
							|Пересчитать цены БЕЗ учета Фрахта?", РежимДиалогаВопрос.ДаНет, 30)=КодВозвратаДиалога.Да Тогда
					БезУчетаФрахта = Истина;
				КонецЕсли;
			КонецЕсли;
		
			Если  ДатаСреза<>Неопределено и Контрагент.ДатаСрезаЦен>'20140101' Тогда 
				табЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСвЭкспорт(Контрагент, СписокНом, ЛОЖЬ, Неопределено, Контрагент.ДатаСрезаЦен, БезУчетаФрахта);   //+++ 01.02.2017
			Иначе
				ДатаСреза=Неопределено;
				//+++ 26.02.2014 - по правилам - всегда по текущим ценам пересчет 
		 		табЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСвЭкспорт(Контрагент, СписокНом,  ЛОЖЬ, Неопределено, Неопределено, БезУчетаФрахта);    //+++ 01.02.2017
			КонецЕсли;
			
		ИНАЧЕ //как было раньше
									
			Если ДатаСреза<>Неопределено и Контрагент.ДатаСрезаЦен>'20140101' Тогда //с учетом среза по клиенту!
				табЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(Контрагент, СписокНом,,,Контрагент.ДатаСрезаЦен, НеУчитыватьТрКлиента,,флБезНДС);  
			Иначе
				ДатаСреза=Неопределено;
				//+++ 26.02.2014 - по правилам - всегда по текущим ценам пересчет 
		 		табЗнач1  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(Контрагент, СписокНом,,, , НеУчитыватьТрКлиента,,флБезНДС);  
			КонецЕсли;
			
		КОНЕЦЕСЛИ;	
		//+++)	
		
		Если ТипЗнч(табЗнач1) = Тип("Строка") Тогда // нет политики ценообразования!
			//Предупреждение(табЗнач1);
			сообщить("Ошибка при пересчете по регистрам правил ценообразования: "+табЗнач1, СтатусСообщения.Внимание); 
			Возврат;
		Иначе
			Если флЭкспорт Тогда //12.01.2015
				Сообщить("---- Цены пересчитаны по регистру: ""Правила ценообразования Экспорт"" "
				+?(ДатаСреза=неопределено,"","(на дату среза цен: "+строка(ДатаСреза)+" )")+"----");
			Иначе	
				Сообщить("---- Цены пересчитаны по регистрам: ""Правила ценообразования"" и ""Правила Ценообразования Общие"" "
				+?(ДатаСреза=неопределено,"","(на дату среза цен: "+строка(ДатаСреза)+" )")+?(флБезНДС, " Без учёта НДС!", "")+"----");
			КонецЕсли;	
		КонецЕсли;
	
	Иначе
		Сообщить("---- Цены пересчитаны по документу ""Политика ценообразования"" "
				+?(ДатаСреза=неопределено,"", "(на дату среза цен: "+строка(ДатаСреза)+" )")+" ----");
	КонецЕсли;
	
		
списокТоваровСНулевойЦеной = Новый СписокЗначений;

//+++ 06.02.2015 - условие по ТИПУ договора = Предоплата И константе!
услПредоплаты = ( ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.НайтиПоКоду("00001") 
  			  или ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ПредоплатаПоСчетам //+++14.08.2017
		      или ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ФакторингПредоплата //  16.05.2017
                ); 

Для каждого стр1 из ЭтотОбъект.Товары Цикл
	стр2 = табЗнач1.найти( стр1.Номенклатура, "Номенклатура");
	стр1Цена = стр1.Цена;
	Если стр2 = неопределено Тогда
		стр2МинимальнаяЦена = 0;
		Сообщить(строка(стр1.НомерСтроки)+") "+стр1.Номенклатура.Код+" "+строка(стр1.Номенклатура)
		+" - цена НЕ определена! Возможно не установлена цена по типу цен Базовая и/или Кр.Опт"
		+?(ДатаСреза=неопределено," на текущую дату!"," на "+строка(ДатаСреза) ) , СтатусСообщения.Внимание);
	Иначе
		Если услПредоплаты Тогда
        	попытка
				стр2МинимальнаяЦена = стр2.ЦенаСоСкидкойПредоплаты; //+++ 06.02.2015
			исключение // Если экспортные цены или из Политики... то там нет поля ЦенаСоСкидкойПредоплаты	
				стр2МинимальнаяЦена = стр2.МинимальнаяЦена;
			КонецПопытки;	
		Иначе
			стр2МинимальнаяЦена = стр2.МинимальнаяЦена;
		КонецЕсли;	
			
		//08.10.2014
		Если стр2.Приоритет=2000 Тогда 
			Сообщить(строка(стр1.НомерСтроки)+") "+стр1.Номенклатура.Код+" "+стр1.Номенклатура+" - цена не может быть расчитана по правилам от нулевой цены! Установлена цена Кр.Опта "
			+?( ДатаСреза=неопределено или (стр1.Номенклатура.ВидТовара<>перечисления.ВидыТоваров.Диски), "",
			       " на дату "+строка(ДатаСреза)) , СтатусСообщения.Информация);
		//19.09.14 Смирнов
		ИначеЕсли стр2.Приоритет>1000 Тогда 
			Сообщить(строка(стр1.НомерСтроки)+") "+стр1.Номенклатура.Код+" "+стр1.Номенклатура+" - цена расчитана по общему правилам №"+строка(стр2.Приоритет-1000)
			+?( ДатаСреза=неопределено или (стр1.Номенклатура.ВидТовара<>перечисления.ВидыТоваров.Диски), "",
			       " на дату "+строка(ДатаСреза)) , СтатусСообщения.Информация);
		КонецЕсли;
	КонецЕсли;
	
	//по 2-му кругу, Если это расчет на срез последних... и есть нулевые цены
	Если  ДатаСреза<>неопределено и Контрагент.ДатаСрезаЦен>'20140101' и стр2МинимальнаяЦена<=0 Тогда
		списокТоваровСНулевойЦеной.Добавить( стр1.Номенклатура );
	КонецЕсли;

	//-------------------------------
	Если стр1Цена<>стр2МинимальнаяЦена Тогда
		  сообщить(строка(стр1.НомерСтроки)+") Цена: "+Формат(стр1Цена,"ЧДЦ=2")+" >> "+Формат(стр2МинимальнаяЦена,"ЧДЦ=2")
		  +?(стр2 = неопределено,"", " По правилу № "+строка(стр2.Приоритет))
		            +?(ДатаСреза=неопределено или (стр1.Номенклатура.ВидТовара<>перечисления.ВидыТоваров.Диски),"",
					       " на дату "+строка(ДатаСреза)) +?(услПредоплаты," ( ПО ПРЕДОПЛАТЕ )","")  );
		  //стр1.ПроцентСкидкиНаценки = (стр2МинимальнаяЦена/стр1Цена - 1)*100; // СКИДКА
		стр1.Цена = стр2МинимальнаяЦена; // изменение Цены по политике ценообразования
	 КонецЕсли;		
	 
	//--------пересчет ВСЕГДА!----------------------------
	//+++ 21.02.2017 - экспортный в рублях - 
	Если флБезНДС 
		Тогда СтавкаНДС = перечисления.СтавкиНДС.БезНДС;
	    Иначе СтавкаНДС = перечисления.СтавкиНДС.НДС18;
	КонецЕсли;

	  стр1.СтавкаНДС = СтавкаНДС; // НЕ ВСЕГДА  18%
	  РассчитатьСуммуТабЧасти(стр1, ЭтотОбъект);
	  РассчитатьСуммуНДСТабЧасти(стр1, ЭтотОбъект);
	  
 КонецЦикла;
 
//============================================================================================= 
//по 2-му кругу, Если это расчет на срез последних... и есть нулевые цены - то еще раз!
	Если  ДатаСреза<>неопределено и Контрагент.ДатаСрезаЦен>'20140101' и списокТоваровСНулевойЦеной.Количество()>0 Тогда 
		
	 табЗнач2  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента(Контрагент, списокТоваровСНулевойЦеной); // по документу Политика ценообразования 
	 
    //+++ 08.10.2014
	Если ТипЗнч(табЗнач2) = Тип("Строка") Тогда //Если нет документа политики ценообразования - то по регистрам сведений "Политика ценообразования"
		Сообщить("---- Цены Для "+строка(списокТоваровСНулевойЦеной.Количество())+" будут пересчитаны по регистрам: ""Правила ценообразования"" и ""Правила Ценообразования Общие"" на текущую дату"+?(флБезНДС," Без учёта НДС! ","")+"----");
		табЗнач2  = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(Контрагент, списокТоваровСНулевойЦеной, ,,, ,, флБезНДС);  //21.03.2017 - 7 запятых
	Иначе
		Сообщить("---- Цены Для "+строка(списокТоваровСНулевойЦеной.Количество())+" пересчитаны по документу: ""Политика ценообразования"" на текущую дату"+?(флБезНДС," Без учёта НДС! ","")+"----");
	КонецЕсли;	
 	
		Для каждого стр1 из ЭтотОбъект.Товары Цикл
			
			//+++ 15.10.2014 ----------------только Для 0 цен перепроверяем!-----------------------
			Если списокТоваровСНулевойЦеной.НайтиПоЗначению( стр1.Номенклатура )=неопределено Тогда
				продолжить;
			КонецЕсли;	
			
		стр2 = табЗнач2.найти( стр1.Номенклатура, "Номенклатура");
		
		стр1Цена = стр1.Цена;
		Если стр2 = неопределено Тогда
			стр2МинимальнаяЦена = 0;
			Сообщить(строка(стр1.НомерСтроки)+") "+стр1.Номенклатура.Код+" "+стр1.Номенклатура+" - цена НЕ определена! Возможно не установлена цена по типу цен Базовая и/или Кр.Опт на текущую дату!", СтатусСообщения.Внимание);
		Иначе
			//+++ 06.02.2015 - только Если есть цена и усл.
			//стр2МинимальнаяЦена = стр2.МинимальнаяЦена;
				Если услПредоплаты и стр2.ЦенаСоСкидкойПредоплаты>0 Тогда
		        	стр2МинимальнаяЦена = стр2.ЦенаСоСкидкойПредоплаты; 
				Иначе
					стр2МинимальнаяЦена = стр2.МинимальнаяЦена;
				КонецЕсли;	
            //+++)
			
			Если стр2.Приоритет=2000 Тогда 
				Сообщить(строка(стр1.НомерСтроки)+") "+стр1.Номенклатура.Код+" "+стр1.Номенклатура+" - цена не может быть расчитана по правилам от нулевой цены! Установлена цена Кр.Опта!", СтатусСообщения.Информация);
			ИначеЕсли стр2.Приоритет>1000 Тогда 
				Сообщить(строка(стр1.НомерСтроки)+") "+стр1.Номенклатура.Код+" "+стр1.Номенклатура+" - цена расчитана по общему правилам №"+строка(стр2.Приоритет-1000), СтатусСообщения.Информация);
			КонецЕсли;
		КонецЕсли;
	
	 	 Если стр1Цена<>стр2МинимальнаяЦена Тогда
		  сообщить(строка(стр1.НомерСтроки)+") Цена: "+Формат(стр1Цена,"ЧДЦ=2")+" >> "+Формат(стр2МинимальнаяЦена,"ЧДЦ=2")+" на текущую дату"
		  +?(стр2 = неопределено,"", " по правилу № "+строка(стр2.Приоритет)) );
		  //стр1.ПроцентСкидкиНаценки = (стр2МинимальнаяЦена/стр1Цена - 1)*100; // СКИДКА
			стр1.Цена = стр2МинимальнаяЦена; // изменение Цены по политике ценообразования
		
	//--------пересчет ВСЕГДА!----------------------------
	//+++ 21.02.2017 - экспортный в рублях - 
	Если Контрагент.Экспорт и ДоговорКонтрагента.ВалютаВзаиморасчетов = справочники.Валюты.НайтиПоКоду("643")
		и найти(врег(ДоговорКонтрагента.Наименование),"ЭКСПОРТ")>0
		и найти(ДоговорКонтрагента.Наименование,"*")=0 Тогда
        СтавкаНДС = перечисления.СтавкиНДС.БезНДС;
	Иначе
		СтавкаНДС = перечисления.СтавкиНДС.НДС18;
	КонецЕсли;

	  		стр1.СтавкаНДС = СтавкаНДС; // ВСЕГДА  18%
		  РассчитатьСуммуТабЧасти(стр1, ЭтотОбъект);
		  РассчитатьСуммуНДСТабЧасти(стр1, ЭтотОбъект);
	  	 КонецЕсли;
	  
 		КонецЦикла;
      КонецЕсли;
 //====================================================================================================================
   ТипЦен = справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00006"); // 16.12.2015 - Ручная  = по ценам клиента!

 Сообщить("-------------------------------------------------------");
	
КонецПроцедуры

функция ЕстьПолитикаЦенообразования(Контрагент)
		ЗапросПоискПолитики=Новый Запрос;	

ЗапросПоискПолитики.Текст =" ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка 
|ИЗ Документ.ПолитикаЦенообразования ГДЕ Контрагент = &Контрагент И Ссылка.Проведен
|УПОРЯДОЧИТЬ ПО Дата УБЫВ";


ЗапросПоискПолитики.УстановитьПараметр("Контрагент",Контрагент);

РезультатПолитика= ЗапросПоискПолитики.Выполнить();

Возврат НЕ РезультатПолитика.Пустой();
КонецФункции

Процедура ДействияФормыЗакрытьЗаказ(Кнопка)
	
	Если не (ДоговорКонтрагента.ОтветственноеЛицо=глТекущийПользователь 
		или Контрагент.ОсновнойМенеджерКонтрагента=глТекущийПользователь ) Тогда
		Сообщить("Вы не должны закрывать чужой заказ!", СтатусСообщения.Внимание);
		Если не РольДоступна("ПолныеПрава") Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	Если яштРезервыПоТоварам.ЕстьРезервПоЗаказу(ссылка) Тогда
		Сообщить("Заказ уже отгружается! Снять резерв уже нельзя!!!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	//Сакулина
	Если Контрагент = Справочники.Контрагенты.НайтиПоКоду("П004703") Тогда
		Сообщить("Нельзя закрыть заказ по контрагенту ""Резерв Для ИМ""" ,СтатусСообщения.Внимание);
        Возврат;
	КонецЕсли;
    //Сакулина	
	
	////+++ 10.10.2017 - 22.11.2017  закрывать заказ по регистру ЗаказыПокупателей!
	Если ВМаршрут И найти(ЭтаФорма.Заголовок, "Отгружен")=0 тогда 	//4.Отгружен Полностью  или 5.Отгружен Частично
		Сообщить("Нельзя закрывать заказ, который уже поставлен [v]'В маршрут' и, возможно, уже взят в Маршрут логистами!" ,СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
		
	
	//ДокументОбъект.Закрыт = Истина;
	Если ЭтоНовый() Тогда
		Закрыт = Истина;
		ПометкаУдаления=Истина;
		ЗаписатьВФорме(РежимЗаписиДокумента.Запись);
	ИначеЕсли яштПоЗаказуБылиОтгрузки(Ссылка) Тогда
		Закрыт = Истина;
		 ДокументКорректировка=Документы.ЗакрытиеОдногоЗаказаПокупателя.СоздатьДокумент();
		 ДокументКорректировка.Заполнить(Ссылка);
		 ДокументКорректировка.ПолучитьФорму("ФормаДокумента").Открыть();
		 
		////ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);
	Иначе  // отгрузок и корректировок не было
		Закрыт = Истина;
		МаксДней = 14; //28.10.2013 - надо делать документ закрытия!
		Если НачалоДня(Ссылка.Дата)<=(НачалоДня(ТекущаяДата())-МаксДней*86400)
			//или (Контрагент.КонтрагентДляРезерваИМ = Контрагент)  Тогда			//22.06.2016  Для Егора //123заменить
			или (ДоговорКонтрагента.КонтрагентДляРезерваИМ = Контрагент)  Тогда			//по договорам "резерва ИМ"
		 ДокументКорректировка=Документы.ЗакрытиеОдногоЗаказаПокупателя.СоздатьДокумент();
		 ДокументКорректировка.Заполнить(Ссылка);
		 ДокументКорректировка.ПолучитьФорму("ФормаДокумента").Открыть();
        Иначе
			ПометкаУдаления = Истина;
			ЗаписатьВФорме(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
	КонецЕсли;
	
	Если ПометкаУдаления тогда
		Сообщить(строка(Ссылка)+" - успешно удален. Все резервы по товарам с этого заказа сняты.", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

//Орлов ++
Процедура КоманднаяПанельТоварыЗаказПоНедогруженнымТоварам(Кнопка)
	
	Если яштРезервыПоТоварам.ЕстьРезервПоЗаказу(ссылка) Тогда //+++ 08.11.2013
		Возврат;		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказПокупателяТовары.Номенклатура,
	|	ЗаказПокупателяТовары.Количество - ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0) КАК Количество,
	|	ЗаказПокупателяТовары.Цена,
	|	ЗаказПокупателяТовары.Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	|		ЗаказПокупателяТовары.Количество КАК Количество,
	|		ЗаказПокупателяТовары.Цена КАК Цена,
	|		ЗаказПокупателяТовары.Сумма КАК Сумма
	|	ИЗ
	|		Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|	ГДЕ
	|		ЗаказПокупателяТовары.Ссылка = &ЗаказПокупателя) КАК ЗаказПокупателяТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(, , , ЗаказПокупателя = &ЗаказПокупателя) КАК ПродажиОбороты
	|		ПО ЗаказПокупателяТовары.Номенклатура = ПродажиОбороты.Номенклатура
	|ГДЕ
	|	ЗаказПокупателяТовары.Количество - ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0) > 0";
	
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЭтотОбъект.Ссылка);
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Количество() > 0 Тогда
		
		ДокОбъект = Документы.ЗаказПокупателя.СоздатьДокумент();
		ДокОбъект.Дата = ТекущаяДата();
		//заполним реквизиты
		Для Каждого РеквизитМетаданных Из ЭтотОбъект.Метаданные().Реквизиты Цикл
			Если Не (РеквизитМетаданных.Имя = "Склад" ИЛИ РеквизитМетаданных.Имя = "НомерВходящегоДокумента" ИЛИ 
				РеквизитМетаданных.Имя = "ДатаВходящегоДокумента" ИЛИ РеквизитМетаданных.Имя = "ДатаОтгрузки" ИЛИ
				РеквизитМетаданных.Имя = "ДатаОплаты" ИЛИ РеквизитМетаданных.Имя = "Комментарий") Тогда
				ДокОбъект[РеквизитМетаданных.Имя] = ЭтотОбъект[РеквизитМетаданных.Имя];
			КонецЕсли;
		КонецЦикла;
		ДокОбъект.Записать();
		//заполним табличную часть
		Пока Результат.Следующий() Цикл
			НоваяСтрока = ДокОбъект.Товары.Добавить();
			НоваяСтрока.Номенклатура = Результат.Номенклатура;
			НоваяСтрока.Количество   = Результат.Количество;
			НоваяСтрока.Цена         = Результат.Цена;
			
		//+++ 27.02.2014 - не надо серий, не надо пересчета по типу цен!			
		//	ПриИзмененииНоменклатурыТабЧасти(НоваяСтрока, ДокОбъект);//характеристики, серии
		//ПриИзмененииНоменклатурыТоваров(НоваяСтрока);
	    	НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
			НоваяСтрока.Коэффициент      = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
	
			ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, ДокОбъект); 
 			РассчитатьСуммуТабЧасти(НоваяСтрока, ДокОбъект);
			РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ДокОбъект);
			
		КонецЦикла;
		
		ФормаДок = ДокОбъект.ПолучитьФорму("ФормаДокумента");
		ФормаДок.Открыть();
	Иначе
		Сообщить("По заказу нет недогруженных товаров!");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыИзменитьЦены(Кнопка)
	
	// Получим контекст обработки
	ИзменениеТабличнойЧастиТовары      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ИзменениеТабличнойЧастиТовары.ТолькоЦены = Истина;
	ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменые формы.
	ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект             = ЭтотОбъект;
	ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента            = ЭтаФорма;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьНДС                   = УчитыватьНДС; 
	ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице          = Ложь;
	ФормаИзменениеТабличнойЧастиТовары.мРассчитыватьАвтоматическиеСкидки   = РассчитыватьАвтоматическиеСкидки();
	ФормаИзменениеТабличнойЧастиТовары.мМинимальныеЦены = мМинимальныеЦены;
	ФормаИзменениеТабличнойЧастиТовары.мСписокФильтров = мСписокФильтров;
	ФормаИзменениеТабличнойЧастиТовары.мСпособЗаполненияЦен       = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	//Перенесем табличную часть
	ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры

Процедура ЧислоДнейСМоментаОтгрузкиПриИзменении(Элемент)
	//13.05.14 Смирнов
	//было Если Элемент.Значение > 120 Тогда
	Если Элемент.Значение > Константы.МаксимальныйСрокСМоментаОтгрузкиДоОплаты.Получить() Тогда
		#Если Клиент Тогда
			Сообщить("Число дней с момента отгрузки не может превышать "+Константы.МаксимальныйСрокСМоментаОтгрузкиДоОплаты.Получить()+"!", СтатусСообщения.Важное);
		#КонецЕсли
		Элемент.Значение = 0;
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ЧислоДнейСМоментаОтгрузки;
	КонецЕсли;
	
	
	//+++ 10.09.2015 - ограничение Для предоплатных договоров
	Если //Константы.СогласованиеПоСкидкамКлиентов.Получить() и
		    ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.НайтиПоКоду("00001") 
		или ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ПредоплатаПоСчетам //+++14.08.2017
		или ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ФакторингПредоплата Тогда
		
			Если  Элемент.Значение<=14 и ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности и найти(ДоговорКонтрагента.Наименование,"тсрочк")<>0 Тогда
				Элемент.Значение = мин(Элемент.Значение, 14); // не более месяца !
			Иначе	
				Элемент.Значение = ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности;
				
				ДатаОплаты = макс(Дата, ДатаОтгрузки) + Элемент.Значение * 86400;
				Если ДеньНедели(ДатаОплаты)=6 Тогда // 09.11.2015 Серков - просил сдвинуть дату оплаты на понедельник
					ЧислоДнейСМоментаОтгрузки = ЧислоДнейСМоментаОтгрузки+2;
				ИначеЕсли ДеньНедели(ДатаОплаты)=7 Тогда
					ЧислоДнейСМоментаОтгрузки = ЧислоДнейСМоментаОтгрузки+1;
				КонецЕсли;

			ДатаОплаты = макс(Дата, ДатаОтгрузки) + Элемент.Значение * 86400;
            Предупреждение("Для предоплатного договора - дата оплаты 
						   |не может превышать "+ строка(Элемент.Значение)+" дней!",30);
		   	КонецЕсли;
				   
	КонецЕсли;
	//+++)
	ДатаОплаты =  макс(Дата, ДатаОтгрузки) + 86400 * ЧислоДнейСМоментаОтгрузки; 
	
	//09.06.2016 ограничение макс срока оплаты Для договоров отсрочки 
	ПроверитьОграничениеОтсрочкиОплаты();	
КонецПроцедуры

Процедура ТребуютсяКрышкиПриИзменении(Элемент)
	//проверим наличие крышек на складе
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателяТовары.Номенклатура,
		|	ЗаказПокупателяТовары.Количество
		|ПОМЕСТИТЬ Док_ТЧ
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|ГДЕ
		|	ЗаказПокупателяТовары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(Док_ТЧ.Количество) КАК Количество,
		|	КомплектующиеНоменклатуры.Комплектующая
		|ПОМЕСТИТЬ НужноКрышек
		|ИЗ
		|	Док_ТЧ КАК Док_ТЧ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
		|		ПО Док_ТЧ.Номенклатура = КомплектующиеНоменклатуры.Номенклатура
		|ГДЕ
		|	КомплектующиеНоменклатуры.Комплектующая В ИЕРАРХИИ(&Крышки)
		|
		|СГРУППИРОВАТЬ ПО
		|	КомплектующиеНоменклатуры.Комплектующая
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НужноКрышек.Комплектующая,
		|	НужноКрышек.Количество КАК КоличествоТребуется,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток,
		|	НужноКрышек.Количество - ТоварыНаСкладахОстатки.КоличествоОстаток КАК Разница
		|ИЗ
		|	НужноКрышек КАК НужноКрышек
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
		|				,
		|				Склад.ЗапретитьИспользование = ЛОЖЬ
		|					И Склад.Транзитный = &Транзит) КАК ТоварыНаСкладахОстатки
		|		ПО НужноКрышек.Комплектующая = ТоварыНаСкладахОстатки.Номенклатура
		|ГДЕ
		|	НужноКрышек.Количество > ТоварыНаСкладахОстатки.КоличествоОстаток";

	Запрос.УстановитьПараметр("Крышки", Справочники.Номенклатура.НайтиПоКоду("0080004"));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Транзит", ?(Подразделение.ОбособленноеПодразделение,Истина,Ложь));

	Результат = Запрос.Выполнить();

	Если Не Результат.Пустой()Тогда
		Нехватка = Результат.Выгрузить();
		Для каждого стр из Нехватка Цикл
		 Сообщить("На складах не достаточно крышек "+стр.Комплектующая+" : "+стр.Разница+" шт.");
	    КонецЦикла;                                      
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаГотовностиНаборки) Тогда
		//Плотников, отправлять печатную форму с крышками на почту наборщицам
		Если ТребуютсяКрышки и не ОтправленоПисьмоСКрышками и не ЭтоНовый() и Проведен Тогда
			//Ответ = Вопрос("Отправить письмо Для уведомления о наборке комплектующих?
			//| Отправка письма обязательна при наборке, Иначе комплетующие не будут собраны!!!", РежимДиалогаВопрос.ДаНет);
			//Если Ответ = КодВозвратаДиалога.Да Тогда
				ЭтотОбъект.Записать();
				Если Подразделение.ОбособленноеПодразделение Тогда
					адр = ""; 
					Если Подразделение.Код = "00112" Тогда //24.04.2017 задача №25771 от Красюк
						адр = "krishtop@yst.ru"; 
						//адр = "krishtop@yst.ru; smirnov@yst.ru"; 
						//адр = "smirnov@yst.ru"; 
					КонецЕсли;
					
					Если адр = "" Тогда 
						Предупреждение("Для "+строка(Подразделение)+" - не определен адрес эл.почты Для отправки информации по сбору крышек!",10);
					Иначе	
						ОтправитьПисьмоСКрышки(Ссылка,ДатаГотовностиНаборки, адр);
					КонецЕсли;
					
				Иначе	 
					ОтправитьПисьмоСКрышки(Ссылка,ДатаГотовностиНаборки);   //>> sbcaps@yandex.ru
				КонецЕсли;
				
				ОтправленоПисьмоСКрышками = Истина;
				ЭлементыФормы.ТребуютсяКрышки.Доступность = Ложь;
				
				Если ТребуютсяКрышки Тогда
					КудаНестиКрышки="на склад";
				КонецЕсли;
				
				ТРКомментарий = ПолучитьКомментарий();
				ТрКомментарий=ТрКомментарий+" ПЕРЕДАТЬ КРЫШКИ!!" ;
				ЗаписатьТрКомментарий();
				ЭтотОбъект.Записать();
			//Иначе	 
			//	ТребуютсяКрышки = Ложь;
			//КонецЕсли;
		ИначеЕсли ОтправленоПисьмоСКрышками Тогда	 	
			Сообщить("Письмо с крышками уже было отправлено ранее.");
		ИначеЕсли (ЭтоНовый() или Модифицированность()) и ОтправленоПисьмоСКрышками=ложь Тогда	 
			Сообщить("Сначала требуется записать и провести документ!!!");
			ТребуютсяКрышки = Ложь;
		КонецЕсли;
	Иначе
		Предупреждение("Сначала заполните дату сборки крышек!!!");
		ТребуютсяКрышки = Ложь;
	КонецЕсли;
КонецПроцедуры
 //Орлов --


Процедура ДействияФормыИзменитьДатуОплату(Кнопка)

            // костыль: меняем дату оплаты в закрытом периоде Для Роль= ПолныеПрава или Егор Малышев

			Если РольДоступна("ПолныеПрава") 
				ИЛИ СокрЛП(ПараметрыСеанса.ТекущийПользователь.Наименование) = "Малышев Егор" Тогда

                мДатаОплаты = ДатаОплаты;

                Если ВвестиДату(мДатаОплаты, "Введите дату оплаты") Тогда

                       ЭтотОбъект.ДатаОплаты=мДатаОплаты;

                       ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);

                КонецЕсли;      

            Иначе
               СообщитьОбОшибке("У вас нет прав Для изменения даты оплаты");
            КонецЕсли;      


КонецПроцедуры

//+++ контроль изменения Транзита!
Процедура ТранзитПриИзменении(Элемент)
	
	Если НЕ Транзит и Подразделение.ОбособленноеПодразделение Тогда //05.02.2016 - много подразделений!
		Предупреждение("Снятие галки 'Транзит' возможно только Для Головного Подразделения!", 30);
		Транзит = ИСТИНА;
	ИначеЕсли Транзит и НЕ Подразделение.ОбособленноеПодразделение Тогда //05.02.2016 - много подразделений!
		//Если НЕ (Склад.Транзитный и ВводитьТолькоПеремещение) Тогда     //ДЫРКА!   можно заказать с флагом Транзит с Ярославля???
		Предупреждение("Устанавливать галку 'Транзит' можно 
					   |  только Для подразделения: Филиал!
					//   |или Для перемещения на транзитный склад!
					|", 30);
		Транзит = ЛОЖЬ;
		//КонецЕсли;	
	КонецЕсли;	
		
КонецПроцедуры

Процедура ВводитьТолькоПеремещениеПриИзменении(Элемент)
	
	Если ВводитьТолькоПеремещение и НЕ Подразделение.ОбособленноеПодразделение Тогда
		Если НЕ Склад.Транзитный Тогда
		Предупреждение("Устанавливать галку 'На перемещение' можно 
					   |только Для подразделения: Филиал!
					   |и Для перемещения на транзитный склад!", 30);
		ВводитьТолькоПеремещение = ЛОЖЬ;
		КонецЕсли;	
	ИначеЕсли НЕ ВводитьТолькоПеремещение и Подразделение.ОбособленноеПодразделение и не Склад.Транзитный Тогда
		Предупреждение("Галки 'На перемещение' включена!", 30);
		ВводитьТолькоПеремещение = Истина;
	КонецЕсли;	

	
//(03.11.2016 ===================================================================	
	//Защита от неправильного перемещения с Филиала на Ярославль!
	Если ВводитьТолькоПеремещение и Подразделение.ОбособленноеПодразделение Тогда
		яшт=справочники.Подразделения.НайтиПоКоду("00005").Контрагент;
		Если Контрагент<>яшт Тогда
			Предупреждение("                 ВНИМАНИЕ!
							|Для перемещения с Филиала на Ярославль 
							|-> НАДО использоть Контрагента: "+строка(яшт), 30);
			Контрагент = яшт;
			ДоговорКонтрагента = ЭтотОбъект.Контрагент.ОсновнойДоговорКонтрагента;
		КонецЕсли;
	КонецЕсли;
	
	//Защита от неправильного перемещения с Ярославля на Филиал!
	Если ВводитьТолькоПеремещение и НЕ Подразделение.ОбособленноеПодразделение Тогда
		
		флНеправильный = ЛОЖЬ;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Подразделения.Контрагент
		|ИЗ
		|	Справочник.Подразделения КАК Подразделения
		|ГДЕ
		|	Подразделения.ОбособленноеПодразделение
		|	И Подразделения.Контрагент = &Контрагент";
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		рез = Запрос.Выполнить();
		
		Если рез.Пустой() Тогда
			Предупреждение("                 ВНИМАНИЕ!
							|Для перемещения с Ярославля на Филиал 
							|-> надо использовать Контрагента Филиала!
							|Нельзя использовать: "+строка(Контрагент)+"
							|
							|Выберите в качестве контрагента - нужный филиал
							|и повторите попытку включить [v] На перемещение!", 30);
		ВводитьТолькоПеремещение = ЛОЖЬ;
		КонецЕсли;
	
	КонецЕсли;
//)

КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	Если не ЭтотОбъект.ЭтоНовый() Тогда
		Если Поставщик.Пустая() Тогда
			Предупреждение("Изменять статус можно при заполненном поле Поставщик",30);
			Возврат;
		КонецЕсли;	
		Если (ЭтотОбъект.Статус = перечисления.СтатусыЗаказов.ПустаяСсылка() 
		     или ЭтотОбъект.Статус = перечисления.СтатусыЗаказов.Новый
			 или ЭтотОбъект.Статус = перечисления.СтатусыЗаказов.ПодтвержденПокупателем)
		и НЕ (Ссылка.Статус = перечисления.СтатусыЗаказов.ПустаяСсылка() 
		     или Ссылка.Статус = перечисления.СтатусыЗаказов.Новый
			 или Ссылка.Статус = перечисления.СтатусыЗаказов.ПодтвержденПокупателем) Тогда
			 Предупреждение("Нельзя изменять статус с "+Ссылка.Статус+" на 'предыдущий' "+ЭтотОбъект.Статус+"!", 30);
			  Если не рольДоступна("ПолныеПрава") Тогда
			  	Статус = Ссылка.Статус; // автопереключение
		   	  КонецЕсли;
		КонецЕсли;
	КонецЕсли;
			  
КонецПроцедуры

Процедура ДатаОтгрузкиПриИзменении(Элемент)
	Если ДатаОтгрузки <> '00010101' Тогда //дата оплаты - появляется в Просроченной ДЗ/КЗ
		Резерв = ложь; // автоматически "слетает" при вводе даты...
		
		Если ДатаОтгрузки<НачалоДня(ТекущаяДата()) Тогда
			Если Вопрос(" Вы действительно хотите 
					|установить дату отгрузки 
				    |меньше текущей даты?!", РежимДиалогаВопрос.ДаНет,10) = КодВозвратаДиалога.Нет Тогда
			ДатаОтгрузки = ТекущаяДата();
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	
	Если ЧислоДнейСМоментаОтгрузки>0 Тогда   //автопересчет даты оплаты
		
		ДатаОплаты1 = ДатаОтгрузки + ЧислоДнейСМоментаОтгрузки * 86400;
		
		Если ДатаОплаты = '00010101' Тогда //дата оплаты - появляется в Просроченной ДЗ/КЗ
			ДатаОплаты = ДатаОплаты1;
		КонецЕсли;
		
		//+++ 31.07.2014 - вопрос на изменение даты оплаты
		Если ДатаОплаты <> ДатаОплаты1 Тогда
			Режим = РежимДиалогаВопрос.ДаНет;
			Текст = ?(ДатаОплаты < ДатаОплаты1, "Увеличить","Уменьшить")+" дату оплаты с "+формат(ДатаОплаты,"ДЛФ=DD")+"
					| на новую дату оплаты: "+формат(ДатаОплаты1,"ДЛФ=DD")+" ?";
			Ответ = Вопрос(Текст, Режим, 60);
			Если Ответ = КодВозвратаДиалога.Да Тогда
			    ДатаОплаты = ДатаОплаты1;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДатаОплатыПриИзменении(Элемент)
	//+++ 29.08.2014 - при ручной установке даты оплаты -> ЧислоДнейСМоментаОтгрузки = 0
	Если ДатаОплаты = '00010101' Тогда
		Предупреждение("Дата оплаты не может быть пустой!", 10);
		ДатаОплаты = ?(ДатаОтгрузки='00010101', ТекущаяДата(),ДатаОтгрузки)  + ЧислоДнейСМоментаОтгрузки*86400;
	ИначеЕсли ДатаОплаты < ДатаОтгрузки Тогда
		Если Вопрос("Дата оплаты меньше Даты отгрузки?!
			|Исправить дату оплаты?",РежимДиалогаВопрос.ДаНет, 10) = КодВозвратаДиалога.Да Тогда
			ДатаОплаты = ДатаОтгрузки + ЧислоДнейСМоментаОтгрузки*86400;
		КонецЕсли;
	Иначе //ручное изменение даты - Тогда вопрос?!
		
		ЧислоДнейСМоментаОтгрузки1 = (ДатаОплаты - ?(ДатаОтгрузки='00010101', НачалоДня(ТекущаяДата()), ДатаОтгрузки ) )/86400;  //дата в секундах
		
		//+++ 10.09.2015 - ограничение Для предоплатных договоров
		Если //Константы.СогласованиеПоСкидкамКлиентов.Получить() и 
			      ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.НайтиПоКоду("00001")
			  или ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ПредоплатаПоСчетам //+++14.08.2017
			  или ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ФакторингПредоплата  // 16.05.2017 
			Тогда
			
			Если ЧислоДнейСМоментаОтгрузки1<=14 и Найти(ДоговорКонтрагента,"отсрочки")<>0 Тогда
				ЧислоДнейСМоментаОтгрузки = ЧислоДнейСМоментаОтгрузки1;
			Иначе
				//Если ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности Тогда
					ЧислоДнейСМоментаОтгрузки = мин(ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности, 14); // не более месяца !
				//Иначе	
				//	ЧислоДнейСМоментаОтгрузки = 14;
					
					ДатаОплаты = макс(Дата, ДатаОтгрузки) + ЧислоДнейСМоментаОтгрузки * 86400;
					Если ДеньНедели(ДатаОплаты)=6 Тогда // 09.11.2015 Серков - просил сдвинуть дату оплаты на понедельник
						ЧислоДнейСМоментаОтгрузки = ЧислоДнейСМоментаОтгрузки+2;
					ИначеЕсли ДеньНедели(ДатаОплаты)=7 Тогда
						ЧислоДнейСМоментаОтгрузки = ЧислоДнейСМоментаОтгрузки+1;
					КонецЕсли;
					
				//КонецЕсли;
				ДатаОплаты = макс(Дата, ДатаОтгрузки) + ЧислоДнейСМоментаОтгрузки * 86400;
				Предупреждение("Для предоплатного договора - дата оплаты 
				|не может превышать "+ строка(ЧислоДнейСМоментаОтгрузки)+" дней!",30);
			КонецЕсли;	
			
		Иначе // как было
			//24.05.17 Смирнов 2 месяца отменяем, берем из рс рекомендованные даты отсрочки по ном группам
			//Если ЧислоДнейСМоментаОтгрузки1>=62 Тогда // фиксированная дата оплаты, Если более 2х месяцев...
			//	ЧислоДнейСМоментаОтгрузки = 0;
			//	Предупреждение("Введена фиксированная дата оплаты: "+формат(ДатаОплаты,"ДЛФ=DD")+ "
			//	|Пересчета по числу дней с момента отгрузки - не будет!", 30);
			//Иначе
			Если Вопрос("Установить дату оплаты как "+строка(ЧислоДнейСМоментаОтгрузки1)
				+" дней с момента отгрузки?",РежимДиалогаВопрос.ДаНет, 30)=КодВозвратаДиалога.Да Тогда
				ЧислоДнейСМоментаОтгрузки = ЧислоДнейСМоментаОтгрузки1;
			Иначе
				ЧислоДнейСМоментаОтгрузки = 0;
				Предупреждение("Введена фиксированная дата оплаты: "+формат(ДатаОплаты,"ДЛФ=DD")+"
				|Пересчета по числу дней с момента отгрузки - не будет!", 30);
			КонецЕсли;			
			//КонецЕсли;	//62 
			
			//06.06.2016 ограничение максимальных сроков отсрочки, тип договора - договор отсрочки   	
			ПроверитьОграничениеОтсрочкиОплаты();
		КонецЕсли;//+++ предоплата 	
	КонецЕсли;	
	
	
	
КонецПроцедуры

Процедура НадписьСтатусПриИзменении(Элемент)
	
	Если Поставщик.Пустая() Тогда // статусы нужны только Если есть поставщик!
		Статус = перечисления.СтатусыЗаказов.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	
	Если Согласован и (Статус = перечисления.СтатусыЗаказов.ПустаяСсылка()
		  или Статус = перечисления.СтатусыЗаказов.Новый
		  или Статус = перечисления.СтатусыЗаказов.ПодтвержденПокупателем) Тогда
		  
		  Статус = перечисления.СтатусыЗаказов.ПодтвержденПокупателем;
		  
	ИначеЕсли НЕ Согласован 
		и Статус = перечисления.СтатусыЗаказов.ПодтвержденПокупателем Тогда
		
		Статус = перечисления.СтатусыЗаказов.Новый;
		  
	ИначеЕсли НЕ Согласован и НЕ Поставщик.Пустая() 
		и НЕ (Статус = перечисления.СтатусыЗаказов.ПустаяСсылка()
		  или Статус = перечисления.СтатусыЗаказов.Новый
		  или Статус = перечисления.СтатусыЗаказов.ПодтвержденПокупателем) Тогда	
		Предупреждение("Изменение Cтатуса заказа и флага Согласован - уже невозможно!
					   |Для отмены заказа - обратитесь к менеджеру по закупкам");
		Согласован = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаказыПокупателейПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки из ОформленияСтрок Цикл
		
	ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
	ОформлениеСтроки.Ячейки.Статус.Текст     = ДанныеСтроки.ЗаказПокупателя.Статус;
	ОформлениеСтроки.Ячейки.Статус.ОтображатьТекст 		= Истина;
	
	ОформлениеСтроки.Ячейки.Количество.Текст    = ДанныеСтроки.ЗаказПокупателя.Товары.Итог("Количество");
	ОформлениеСтроки.Ячейки.Количество.ОтображатьТекст 	= Истина;
	
	ОформлениеСтроки.Ячейки.Сумма.Текст      = ДанныеСтроки.ЗаказПокупателя.СуммаДокумента;
	ОформлениеСтроки.Ячейки.Сумма.ОтображатьТекст 		= Истина;
		
	ОформлениеСтроки.Ячейки.Комментарий.Текст = ДанныеСтроки.ЗаказПокупателя.Комментарий;
	ОформлениеСтроки.Ячейки.Комментарий.ОтображатьТекст = Истина;
	
	//05.04.16 Смирнов
	ОформлениеСтроки.Ячейки.НомерВходящегоДокумента.Текст = ДанныеСтроки.ЗаказПокупателя.НомерВходящегоДокумента;
	ОформлениеСтроки.Ячейки.НомерВходящегоДокумента.ОтображатьТекст = Истина;
	
		инд= 3;
		Если Не ЗначениеНеЗаполнено(ДанныеСтроки.ЗаказПокупателя) Тогда
			ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
			Если ДанныеСтроки.ЗаказПокупателя.пометкаУдаления Тогда
				инд = 1;
			ИначеЕсли ДанныеСтроки.ЗаказПокупателя.Проведен Тогда
				инд = 0;
			ИначеЕсли НЕ ДанныеСтроки.ЗаказПокупателя.Проведен Тогда
				инд = 2;
			КонецЕсли;	
		КонецЕсли;	
			ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
			ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = инд;
КонецЦикла;

//+++ 24.11.2014 - при переключении страницы - вызывается N раз!
ОбщСумма = 0; ОбщКол = 0;
Для i=0 по Заказы.Количество()-1 Цикл
	ОбщСумма = ОбщСумма + Заказы[i].ЗаказПокупателя.СуммаДокумента;
	ОбщКол   = ОбщКол   + Заказы[i].ЗаказПокупателя.Товары.Итог("Количество");
КонецЦикла;	
ЭлементыФормы.ЗаказыПокупателей.Колонки.Сумма.ТекстПодвала = ОбщСумма;
ЭлементыФормы.ЗаказыПокупателей.Колонки.Количество.ТекстПодвала = ОбщКол;

КонецПроцедуры

Процедура РезервПриИзменении(Элемент)
	Если Резерв Тогда
		Если Не ЭтоНовый() Тогда // удалим все категории...Для отгрузки
	 		регСв = РегистрыСведений.КатегорииОбъектов.СоздатьНаборЗаписей();
			регСв.Отбор.Объект.ВидСравнения = ВидСравнения.Равно;
			регСв.Отбор.Объект.Значение = Ссылка;
			регСв.Отбор.Объект.Использование = Истина;
//			регСв.Записать();  // чистка
            регСв.Прочитать();
			Если регСв.Количество()>0 Тогда
				Предупреждение("Заказ уже включен в отгрузку "+строка(регСв[0].Категория)+"!
				|Установка признака Резерв - уже невозможна!", 30);
				резерв = ложь;
				Возврат;
			КонецЕсли;	
		КонецЕсли;
		ДатаОтгрузки = '00010101';
	КонецЕсли;	
КонецПроцедуры

Процедура НомерТорговойТочкиКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Контрагент.Пустая() Тогда
		Предупреждение("Не заполнен контрагент!",10);
		Возврат;
	КонецЕсли;	
	
	спр = справочники.Точки.НайтиПоРеквизиту("Номер", НомерТорговойТочкиКонтрагента,,Контрагент);
	Если не спр.Пустая() Тогда
		спр.ПолучитьФорму("ФормаЭлемента").Открыть();
	Иначе
		Предупреждение("Не найдена точка № "+строка(НомерТорговойТочкиКонтрагента)+"
					       |Для этого контрагента!",10);
	КонецЕсли;	
					   
КонецПроцедуры

Процедура УсловиеПоставкиНаЭкспортНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокУсловий = Новый СписокЗначений;
	
	СписокУсловий.Добавить("FCA", "FCA - отправка машиной, оплата доставки за счет покупателя");
	
	СписокУсловий.Добавить("FOB", "FOB - отправка морем, оплата доставки за счет покупателя");
	
	СписокУсловий.Добавить("CPT", "CPT - отправка любым видом транспорта до покупателя, оплата доставки и заказ транспорта осуществляется продавцом");
	
	СписокУсловий.Добавить("CIP", "CIP - отправка любым видом транспорта до покупателя, оплата доставки и заказ транспорта осуществляется продавцом, груз застрахован за счет продавца");
		
	СписокУсловий.Добавить("DDP", "DDP - отправка машиной, оплата доставка, заказ транспорта, оплата таможенных процедур осуществляется за счет продавца");
	
	СписокУсловий.Добавить("DAP", "DAP - отправка любым видом транспорта, поставка в месте назначения, страховка необязательна");
	
	СписокУсловий.Добавить("EXW", "EXW - внешние работы");
																		   
	ТекУсловиеПоставки = СписокУсловий.НайтиПоЗначению(Элемент.Значение);																	   
	ВыбУсловиеПоставки = СписокУсловий.ВыбратьЭлемент("Укажите условие поставки", ТекУсловиеПоставки);
	Если ВыбУсловиеПоставки <> Неопределено Тогда
		Элемент.Значение = ВыбУсловиеПоставки.Значение;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ТРвЦенеПриИзменении(Элемент)
	
	СуммаДокумента = Товары.Итог("Сумма");
	ТРвсего = ТРнал+ТРБезНал+ТРвЦене;
	Если суммаДокумента>0 Тогда
		ЭлементыФормы.НадписьТРвЦене1.Заголовок ="что составляет "
		 + формат( ТРвсего*100/СуммаДокумента,"ЧДЦ=1" ) +"% от суммы документа";
	КонецЕсли;
	
	Если ТРНал>0 и ТрБезНал=0 и ТрВЦене=0 Тогда Переключатель1=1
	ИначеЕсли ТРНал=0 и ТрБезНал>0 и ТрВЦене=0 Тогда Переключатель1=2
	ИначеЕсли ТРНал=0 и ТрБезНал=0 и ТрВЦене>0 Тогда Переключатель1=3
	Иначе Переключатель1=0; КонецЕсли;	
	
КонецПроцедуры

Процедура ТРпоТарифуОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	
	тарифКлиента    = получитьТарифКлиента();
	Если тарифКлиента<0 Тогда // расчет от количества
		КоличествоОбъем = Товары.Итог("Количество");
		тарифКлиента = -тарифКлиента;
		ед = "шт";
	Иначе // от R13
		КоличествоОбъем = ПолучитьКоличествоR13();
		ед = "R13";
	КонецЕсли;	
		
	ТРпоТарифу = КоличествоОбъем * тарифКлиента;
	
	Предупреждение("Тариф: "+строка(тарифКлиента)+"р. х "+строка(КоличествоОбъем)+" ("+ед+") = "+строка(ТРпоТарифу)+"р.", 30);
	
КонецПроцедуры

функция получитьТарифКлиента()
	рез = 0;
	Если Контрагент.Пустая() Тогда
		Возврат рез;
	КонецЕсли;
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ ЗначенияСвойствОбъектов.Значение
	 |ИЗ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	 |ГДЕ
	 |	ЗначенияСвойствОбъектов.Объект = &Объект
	 |	И ЗначенияСвойствОбъектов.Свойство = &Свойство";
	 Запрос.УстановитьПараметр("Объект", Контрагент);
	 Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90155") );
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Если  Выборка.Следующий() Тогда
	 	рез = выборка.Значение;
	 КонецЕсли;
	
	Возврат рез;
КонецФункции

функция ПолучитьКоличествоR13()
	Если ЭтоНовый() Тогда //23.05.2017 заглушка
		Возврат 0;
	КонецЕсли;
	
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	СУММА(ЗаказПокупателяТовары.Количество * ВЫБОР
               |			КОГДА ЗаказПокупателяТовары.R13коэф = 1234567
               |				ТОГДА ЕСТЬNULL(НормыЗагрузки.НормаЗагрузки, 1)
               |				ИНАЧЕ ЗаказПокупателяТовары.R13коэф
               |			КОНЕЦ ) КАК R13
               |ИЗ
               |	(ВЫБРАТЬ
               |		ЗакПокТовары.Номенклатура.Типоразмер КАК НоменклатураТипоразмер,
               |		ЗакПокТовары.Номенклатура.ВидТовара КАК НоменклатураВидТовара,
               |		ЗакПокТовары.Количество КАК Количество,
               |		ВЫБОР
			   //+++ 31.05.2017 - только Для Шин или Дисков нужна Норма!
               |			КОГДА ЗакПокТовары.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(перечисление.ВидыТоваров.Шины)
               |					ИЛИ ЗакПокТовары.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(перечисление.ВидыТоваров.Диски)
               |				ТОГДА 1234567
               |			ИНАЧЕ ЕСТЬNULL(ЗакПокТовары.Номенклатура.ЕдиницаХраненияОстатков.Объем, 0) / 0.033
               |		КОНЕЦ КАК R13коэф
               |	ИЗ
               |		Документ.ЗаказПокупателя.Товары КАК ЗакПокТовары
               |	ГДЕ
               |		ЗакПокТовары.Ссылка = &Ссылка
               |		И ЗакПокТовары.Количество > 0) КАК ЗаказПокупателяТовары
               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
               |			НЗ.НормаЗагрузки КАК НормаЗагрузки,
               |			НЗ.Типоразмер КАК Типоразмер,
               |			НЗ.ВидПродукции КАК ВидПродукции
               |		ИЗ
               |			Справочник.НормыЗагрузки КАК НЗ
               |		ГДЕ
               |			НЗ.ПометкаУдаления = ЛОЖЬ
               |			И НЗ.ВидПродукции <> ЗНАЧЕНИЕ(перечисление.ВидыТоваров.ПустаяСсылка)
               |			И НЗ.Типоразмер   <> ЗНАЧЕНИЕ(справочник.Типоразмеры.ПустаяСсылка)   ) КАК НормыЗагрузки
               |		ПО ЗаказПокупателяТовары.НоменклатураТипоразмер = НормыЗагрузки.Типоразмер
               |			И ЗаказПокупателяТовары.НоменклатураВидТовара = НормыЗагрузки.ВидПродукции";
	 
	 Запрос.УстановитьПараметр("Ссылка", Ссылка);
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	Если Выборка.Следующий() Тогда
		рез = Окр( Выборка.R13, 3 ); // округление вынесено из запроса!
	Иначе
		рез = 0;
	КонецЕсли;

Возврат	рез;
	
КонецФункции	

Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = 3 Тогда //"ТранспортныеУслуги"
			тарифКлиента    = получитьТарифКлиента();
			Если тарифКлиента<0 Тогда // расчет от количества
				КоличествоОбъем = Товары.Итог("Количество");
				тарифКлиента = -тарифКлиента;
				ед = "шт";
			Иначе // от R13
				КоличествоОбъем = ПолучитьКоличествоR13();
				ед = "R13";
			КонецЕсли;	
			ТРпоТарифу = КоличествоОбъем * тарифКлиента;
			СуммаДокумента = Товары.Итог("Сумма");
			ЭлементыФормы.НадписьТРПоТарифу.Заголовок = "что составляет "+формат(?(СуммаДокумента>0,ТРпоТарифу*100/СуммаДокумента,0),"ЧДЦ=1")+"% от суммы документа";
			
			ТРвсего = ТРНал + ТрБезНал	+ ТрВЦене;
			
			Если ТРНал>0 и ТрБезНал=0 и ТрВЦене=0 Тогда Переключатель1=1
			ИначеЕсли ТРНал=0 и ТрБезНал>0 и ТрВЦене=0 Тогда Переключатель1=2
			ИначеЕсли ТРНал=0 и ТрБезНал=0 и ТрВЦене>0 Тогда Переключатель1=3
			Иначе Переключатель1=0; КонецЕсли;	
			
			Если РольДоступна("ПолныеПрава") Тогда  //+++ 27.04.2015 - только Для полных прав видимость реальных затрат
				ТРвЦене2 = получитьРеальныеТрВЦене();
				Если ТРвЦене2<>0 Тогда
					ЭлементыФормы.Надпись7.Видимость = истина;
					ЭлементыФормы.ТРвЦене2.Видимость = истина;	
				Иначе
					ЭлементыФормы.Надпись7.Видимость = ложь;
					ЭлементыФормы.ТРвЦене2.Видимость = ложь;	
				КонецЕсли;	
			КонецЕсли;
		//ТРКомментарий = ПолучитьКомментарий(); //пока сюда не переключились - его нет?!
		мЖирный = новый Шрифт(,,Истина);
		мОбычный = новый Шрифт();
		Если СокрЛП(ДоговорКонтрагента.ТипДоговора.Код) = "Я0004"
			или Контрагент.Код = "92797" Тогда
			ЭлементыФормы.ТРвсего.Шрифт  = мЖирный;
			ЭлементыФормы.ТРнал.Шрифт    = мЖирный;
			ЭлементыФормы.ТРБезНал.Шрифт = мЖирный;
			ЭлементыФормы.ТРвЦене.Шрифт  = мЖирный;
			ЭлементыФормы.ТРвЦене2.Шрифт = мЖирный;
		Иначе
			ЭлементыФормы.ТРвсего.Шрифт  = мОбычный;
			ЭлементыФормы.ТРнал.Шрифт    = мОбычный;
			ЭлементыФормы.ТРБезНал.Шрифт = мОбычный;
			ЭлементыФормы.ТРвЦене.Шрифт  = мОбычный;
			ЭлементыФормы.ТРвЦене2.Шрифт = мОбычный;
		КонецЕсли;	
		
		ЭтаФорма.Модифицированность = ложь;	
		
	ИначеЕсли ТекущаяСтраница = 4 Тогда
		
		Если Не ЭтоНовый() Тогда //23.05.2017
		ТРКомментарий = ПолучитьКомментарий(); //пока сюда не переключились - его нет?!
		
	////------------заполним печаные формы-----------------
	//наборЗаписей = регистрыСведений.УчетВходящихДокументов.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.заказпокупателя.Установить(ССылка);
	//НаборЗаписей.Прочитать();
	//Таб=НаборЗаписей.Выгрузить();
	Запрос = Новый Запрос;   //23.05.2017
	Запрос.Текст = "ВЫБРАТЬ * ИЗ РегистрСведений.УчетВходящихДокументов КАК УчетВходящихДокументов
					|ГДЕ УчетВходящихДокументов.ЗаказПокупателя = &ЗаказПокупателя";
	Запрос.УстановитьПараметр("ЗаказПокупателя", Ссылка);
	ЭлементыФормы.ВходящиеДокументы.Значение = Запрос.Выполнить().Выгрузить();
		
	
	//заполним Задания Водителей по наличке
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаданиеВодителюНаПолучениеДенежныхСредств.ЗаданиеНаОтгрузку,
		|	ЗаданиеВодителюНаПолучениеДенежныхСредств.Реализация,
		|	ЗаданиеВодителюНаПолучениеДенежныхСредств.СуммаТранспорт КАК Транспортные,
		|	ЗаданиеВодителюНаПолучениеДенежныхСредств.СуммаПредыдущийДолг КАК СуммаДолгПредыдущий,
		|	ЗаданиеВодителюНаПолучениеДенежныхСредств.Сумма КАК СуммаТекущая,
		|	ЗаданиеВодителюНаПолучениеДенежныхСредств.Водитель,
		|	ЗаданиеВодителюНаПолучениеДенежныхСредств.Сумма + ЗаданиеВодителюНаПолучениеДенежныхСредств.СуммаПредыдущийДолг + ЗаданиеВодителюНаПолучениеДенежныхСредств.СуммаТранспорт КАК Итого
		|ИЗ
		|	Документ.ЗаданиеВодителюНаПолучениеДенежныхСредств КАК ЗаданиеВодителюНаПолучениеДенежныхСредств
		|ГДЕ
		|	ЗаданиеВодителюНаПолучениеДенежныхСредств.Заказ = &Заказ
		|	И ЗаданиеВодителюНаПолучениеДенежныхСредств.Проведен";
		
		Запрос.УстановитьПараметр("Заказ", Ссылка);
		ЭлементыФормы.УчетНаличкиУВодителя.Значение = Запрос.Выполнить().Выгрузить();
	   КонецЕсли;//не новый
	ИначеЕсли ТекущаяСтраница = 6 Тогда
		Если ЗначениеЗаполнено(ТКТерминал) тогда
		ЭлементыФормы.ТКТерминал_.Заголовок = "Доставка транспортной компанией "+ Справочники.ТранспортныеКомпании.НайтиПоКоду(ТКТерминал).Наименование;	
	    конецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//из регистра - получаем сумму всех ТРВЦене!!!
функция получитьРеальныеТрВЦене()
	рез = 0;
	Если ЭтоНовый() Тогда
		Возврат рез;
	КонецЕсли;
	
	Запрос = Новый Запрос;  //все отгрузки по 1 заказу
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИнформацияПоПроезду.Заказ КАК Заказ,
	               |	СУММА(ИнформацияПоПроезду.ДоставкаВЦене) КАК ВЦене
	               |ИЗ
	               |	РегистрСведений.ИнформацияПоПроезду КАК ИнформацияПоПроезду
	               |ГДЕ
	               |	ИнформацияПоПроезду.Заказ = &Заказ
	               |	И ИнформацияПоПроезду.НомерОчереди >= 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ИнформацияПоПроезду.Заказ";
	
	Запрос.УстановитьПараметр("Заказ", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если  Выборка.Следующий() Тогда
		рез = выборка.ВЦене;
	КонецЕсли;
	
	Возврат рез;
КонецФункции

//ТрКомментарий пишется в  НомерОчереди = -1 !
функция ПолучитьКомментарий()
Комм = ""; 	
	Если ЭтоНовый() Тогда
		Возврат Комм;
	КонецЕсли;

	Запрос = Новый Запрос;  //все отгрузки по 1 заказу
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИнформацияПоПроезду.Заказ КАК Заказ,
	               |	ИнформацияПоПроезду.Комментарий
	               |ИЗ
	               |	РегистрСведений.ИнформацияПоПроезду КАК ИнформацияПоПроезду
	               |ГДЕ
	               |	ИнформацияПоПроезду.Заказ = &Заказ
	               |	И ИнформацияПоПроезду.НомерОчереди = -1
	               |";
	Запрос.УстановитьПараметр("Заказ", Ссылка);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если  Выборка.Следующий() Тогда
		Комм = выборка.Комментарий;
	КонецЕсли;
 Возврат Комм;
КонецФункции

//ТрКомментарий читается из НомерОчереди = -1 !
Процедура ЗаписатьТрКомментарий()

    Если СокрЛП(ТрКомментарий)<>"" Тогда // ЗАПИСЬ Комментария
		регСв = РегистрыСведений.ИнформацияПоПроезду.СоздатьМенеджерЗаписи();
		регСв.Заказ = Ссылка;
		регСв.НомерОчереди = -1; // ДО ОТГРУЗКИ:  до -999 !
		регСв.Комментарий  = ТрКомментарий;
		
//------------------- доп.поля, НЕ меняем !!! -----------------------		
		регСв.ДоставкаНал   = 0;
		регСв.ДоставкаБНал  = 0;
		регСв.ДоставкаВЦене = 0;
		
		регСв.Записать(Истина); // перезаписать!
	Иначе
		//регСв1 = РегистрыСведений.ИнформацияПоПроезду.Получить( новый Структура("Заказ, НомерОчереди", Ссылка, -1) );
		//Если регСв<>неопределено Тогда
			регСв = РегистрыСведений.ИнформацияПоПроезду.СоздатьМенеджерЗаписи();
			регСв.Заказ = Ссылка;
			регСв.НомерОчереди = -1; // ДО ОТГРУЗКИ:  до -999 !
            регСв.Удалить();
		//КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры


Процедура Кнопка3Нажатие(Элемент)
	СуммаДокумента = Товары.Итог("Сумма");
	Если СуммаДокумента>0 Тогда
	Проц = ?(ТрНал=0, 1, Окр(ТрНал*100/СуммаДокумента,1));
	ВвестиЧисло(Проц, "Введите % от суммы документа");
	ТрНал = Окр(СуммаДокумента * Проц/100,0);
	ТРвЦенеПриИзменении(неопределено);
	Переключатель1=1;
	КонецЕсли;
КонецПроцедуры

Процедура Кнопка4Нажатие(Элемент)
	СуммаДокумента = Товары.Итог("Сумма");
	Если СуммаДокумента>0 Тогда
	Проц = ?(ТРБезНал=0, 1, Окр(ТРБезНал*100/СуммаДокумента,1));
	ВвестиЧисло(Проц, "Введите % от суммы документа");
	ТРБезНал = Окр(СуммаДокумента * Проц/100,0);
	ТРвЦенеПриИзменении(неопределено);
	Переключатель1=2;
	КонецЕсли;
КонецПроцедуры

Процедура Кнопка5Нажатие(Элемент)
	СуммаДокумента = Товары.Итог("Сумма");
	Если СуммаДокумента>0 Тогда
	Проц = ?(ТРВцене=0, 1, Окр(ТРВцене*100/СуммаДокумента,1));
	ВвестиЧисло(Проц, "Введите % от суммы документа");
	ТРВцене = окр(СуммаДокумента * Проц/100,0);
	ТРвЦенеПриИзменении(неопределено);
	Переключатель1=3;
	КонецЕсли;
КонецПроцедуры

Процедура Переключатель1ПриИзменении(Элемент)
	ТрНал   = 0;
	ТРБезНал= 0; 
	ТРВцене = 0;
	Если Переключатель1=1 Тогда ТрНал = ТрВсего; 
		Если Найти(ДоговорКонтрагента.Наименование, "*")>0 Тогда
			СпособОтгрузки = справочники.СпособыОтгрузкиТовара.НайтиПоНаименованию("автомобильным транспортом силами Поставщика за счет Покупателя");
		ИначеЕсли СпособОтгрузки = справочники.СпособыОтгрузкиТовара.НайтиПоНаименованию("автомобильным транспортом силами Покупателя за счет Покупателя") Тогда
	    	//самовывоз!
			Переключатель1=0;
		Иначе  // безналЗаказ - транспорт - нал!
			СпособОтгрузки = справочники.СпособыОтгрузкиТовара.НайтиПоНаименованию("автомобильным транспортом силами Поставщика за счет Поставщика");
		КонецЕсли;
	
	ИначеЕсли Переключатель1=2 Тогда ТрБезНал = ТрВсего;  // перевыставляется счет!
		СпособОтгрузки = справочники.СпособыОтгрузкиТовара.НайтиПоНаименованию("автомобильным транспортом силами Поставщика за счет Покупателя");
		
	ИначеЕсли Переключатель1=3 Тогда ТрВЦене = ТрВсего;   // НЕ выставляется!     
		//Если транспорт не Клиента, значит наш Транспорт
		Если НЕ СпособОтгрузки = справочники.СпособыОтгрузкиТовара.НайтиПоНаименованию("автомобильным транспортом силами Покупателя за счет Поставщика") Тогда
 			СпособОтгрузки = справочники.СпособыОтгрузкиТовара.НайтиПоНаименованию("автомобильным транспортом силами Поставщика за счет Поставщика");
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ТРвсегоПриИзменении(Элемент)
	СуммаДокумента = Товары.Итог("Сумма");
	//ТРвсего = ТРнал+ТРБезНал+ТРвЦене;
	Если суммаДокумента>0 Тогда
		ЭлементыФормы.НадписьТРвЦене1.Заголовок ="что составляет "
		 + формат( ТРвсего*100/СуммаДокумента,"ЧДЦ=1" ) +"% от суммы документа";
		 
Если Переключатель1 = 0 Тогда		 
    Если СпособОтгрузки = справочники.СпособыОтгрузкиТовара.НайтиПоНаименованию("автомобильным транспортом силами Поставщика за счет Поставщика") Тогда
		Переключатель1 = 3; //ВЦене	
	ИначеЕсли СпособОтгрузки = справочники.СпособыОтгрузкиТовара.НайтиПоНаименованию("автомобильным транспортом силами Покупателя за счет Поставщика") Тогда 		 
		Переключатель1 = 3; //оплата только перевозчику, которым является Покупатель...
		
	ИначеЕсли СпособОтгрузки = справочники.СпособыОтгрузкиТовара.НайтиПоНаименованию("автомобильным транспортом силами Поставщика за счет Покупателя") Тогда 		 
		Переключатель1 =  2; //БНАЛ
		
	ИначеЕсли СпособОтгрузки = справочники.СпособыОтгрузкиТовара.НайтиПоНаименованию("автомобильным транспортом силами Покупателя за счет Покупателя") Тогда // самовывоз покупателем... доставка = 0!
		Переключатель1 = 0; // самовывоз
	Иначе  //пустое или непонятно что...
		Переключатель1 = ?(Найти(ДоговорКонтрагента.Наименование,"*")>0, 1, 2); //НАЛ	/ БНАЛ
	КонецЕсли;	
	Переключатель1ПриИзменении(неопределено);
КонецЕсли;


	КонецЕсли;
КонецПроцедуры

Процедура Кнопка6Нажатие(Элемент)
	
	СуммаДокумента = Товары.Итог("Сумма");
	Если СуммаДокумента>0 Тогда
	Проц = ?(ТРВсего=0, 1, Окр(ТРВсего*100/СуммаДокумента,1));
	ВвестиЧисло(Проц, "Введите % от суммы документа");
	ТРВсего = окр(СуммаДокумента * Проц/100,0);
	ТРвсегоПриИзменении(неопределено);
    КонецЕсли;
	
КонецПроцедуры

Процедура СпособОтгрузкиПриИзменении(Элемент)
	
	//Если СпособОтгрузки = справочники.СпособыОтгрузкиТовара.НайтиПоНаименованию("автомобильным транспортом силами Покупателя за счет Покупателя") Тогда//+++ Самовывоз
	//	//16.01 - 26.01.2017 
	//	//Если Константы.ЦенообразованиеПоКатегориям.Получить() Тогда
	//	//	НеУчитыватьТрКлиента = ИСТИНА; // при самовывозе - не учитывается тр. наценка доставки до клиента
	//	//	КоманднаяПанельТоварыЦенаКонтрагента(неопределено);
	//	//КонецЕсли;	
	//Иначе 
	//	Предупреждение("Введите сумму транспортных расходов!", 10);
	//	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ТранспортныеУслуги;
	//КонецЕсли;

	Если  СпособОтгрузки  = Справочники.СпособыОтгрузкиТовара.НайтиПоКоду(10)            // авто транспорт
		или СпособОтгрузки  = Справочники.СпособыОтгрузкиТовара.НайтиПоКоду(12) Тогда    // ж/д  транспорт
	    Самовывоз = Истина;
	Иначе 
		Самовывоз =Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТрКомментарийПриИзменении(Элемент)
	ЗаписатьТрКомментарий();
КонецПроцедуры

Процедура СоздатьЗаказПоставщику()
	СписокЗаказовПоставщикуСезонных=новый СписокЗначений;
	Если Организация.Код="00004" и нетСобытийПоЗаказу() Тогда 
		Ответ = Вопрос("Создать сезонный заказ поставщику?",РежимДиалогаВопрос.ДаНет,60);
		Если ответ = КодВозвратаДиалога.Да Тогда
			
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	ЗаказПокупателяТовары.Номенклатура,
			|	ЗаказПокупателяТовары.Номенклатура.ОсновнойПоставщик КАК НоменклатураОсновнойПоставщик,
			|	ЗаказПокупателяТовары.Количество,
			|	ЗаказПокупателяТовары.ЕдиницаИзмерения,
			|	ЗаказПокупателяТовары.Коэффициент
			|ИЗ
			|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
			|ГДЕ
			|	ЗаказПокупателяТовары.Ссылка = &Ссылка
			|	И ЗаказПокупателяТовары.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)
			|ИТОГИ ПО
			|	НоменклатураОсновнойПоставщик";
			Запрос.УстановитьПараметр("Ссылка",Ссылка);
			ВыборкаПоставщик=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоставщик.Следующий() Цикл
				ДокЗаказСезонный=Документы.ЗаказПоставщикуСезонный.СоздатьДокумент();
				ДокЗаказСезонный.Организация = Организация;
				ДокЗаказСезонный.Контрагент=ВыборкаПоставщик.НоменклатураОсновнойПоставщик;
				ДокЗаказСезонный.Комментарий="#По заказу покупателя "+Номер+" от "+Дата+" #";
				ДокЗаказСезонный.Дата=ТекущаяДата();
				ДокЗаказСезонный.ДокументОснование = Ссылка;
				ВыборкаДетали=ВыборкаПоставщик.Выбрать();
				ТоварыЗаказ=ДокЗаказСезонный.Товары;
				Пока ВыборкаДетали.Следующий() Цикл
					стрТовары=ТоварыЗаказ.Добавить();
					СтрТовары.Номенклатура=ВыборкаДетали.Номенклатура;
					СтрТовары.ЕдиницаИзмерения=ВыборкаДетали.ЕдиницаИзмерения;
					СтрТовары.Коэффициент=ВыборкаДетали.Коэффициент;
					СтрТовары.Количество=ВыборкаДетали.Количество;
					СтрТовары.Вес=ВыборкаДетали.Количество*ВыборкаДетали.ЕдиницаИзмерения.Вес;
				КонецЦикла;
				ДокЗаказСезонный.Записать();
				СписокЗаказовПоставщикуСезонных.Добавить(ДокЗаказСезонный.Ссылка);
			КонецЦикла;
			ОповеститьОСозданииСЗПоставщику(СписокЗаказовПоставщикуСезонных);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОповеститьОСозданииСЗПоставщику(СписокЗаказовПоставщикуСезонных) 
	ДокСобытие=Документы.Событие.СоздатьДокумент();
		ДокСобытие.ТипСобытия=Перечисления.ВходящееИсходящееСобытие.Входящее;
		ДокСобытие.ВидСобытия=Перечисления.ВидыСобытий.Прочее;
		ДокСобытие.Важность=Перечисления.Важность.Высокая;
		ДокСобытие.СостояниеСобытия=Перечисления.СостоянияСобытий.Запланировано;
		ДокСобытие.Основание = Ссылка;
		ДокСобытие.КонтактноеЛицо=""+Ответственный;
		ДокСобытие.Контрагент=Контрагент;
		ДокСобытие.НапомнитьОСобытии=Истина;
		ДокСобытие.ВремяНапоминания=НачалоДня(ТекущаяДата())+28830;//8 утра
		ДокСобытие.Дата=ТекущаяДата();
		ДокСобытие.НачалоСобытия=НачалоДня(ТекущаяДата())+28800;//8 утра
		ДокСобытие.ОкончаниеСобытия=КонецДня(ТекущаяДата())+5*24*60*60;//
		ДокСобытие.ОписаниеСобытия="Созданы сезонные заказы поставщикам.";
		ТекстСообщения="Созданы сезонные заказы поставщикам:";
		Для Каждого СЗ из СписокЗаказовПоставщикуСезонных Цикл
			ТекстСообщения=ТекстСообщения+Символы.ПС+ сз.Значение;
		КонецЦикла;
		ДокСобытие.СодержаниеСобытия=ТекстСообщения;
		//Менеджер=Справочники.Пользователи.НайтиПоКоду("Смирнов А.А.");
		Менеджер=Справочники.Пользователи.НайтиПоКоду("Серебренникова Анна Александровна");
		ДокСобытие.Ответственный=Менеджер;
		ДокСобытие.Записать(РежимЗаписиДокумента.Проведение);
	    ОтправитьПисьмо(ТекстСообщения);
КонецПроцедуры
Процедура  ОтправитьПисьмо(ТекстСообщения,Пользователь="")
	
	Почта=Новый ИнтернетПочта;
	УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("no-reply@yst76.ru");
	ИПП=Новый ИнтернетПочтовыйПрофиль;
	ИПП.АдресСервераSMTP=УЗ.SMTPСервер;
	ИПП.ПортSMTP=УЗ.ПортSMTP;
	Если УЗ.ТребуетсяSMTPАутентификация Тогда
		ИПП.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
		ИПП.ПарольSMTP         = УЗ.ПарольSMTP;
		ИПП.ПользовательSMTP   = УЗ.ЛогинSMTP;
	Иначе
		ИПП.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
		ИПП.ПарольSMTP         = "";
		ИПП.ПользовательSMTP   = "";
	КонецЕсли;
	
	Письмо=Новый ИнтернетПочтовоеСообщение;
	Письмо.Отправитель=УЗ.АдресЭлектроннойПочты;
	//Письмо.Получатели.Добавить("smirnov@yst.ru");
	Письмо.Получатели.Добавить("serebrennikovaa@mail.ru");
	//Письмо.Получатели.Добавить("gogina@yst.ru");
	
	
	Письмо.Тема="Созданы сезонные заказы поставщикам! "+Контрагент;
	Письмо.ИмяОтправителя ="Робот";
	Письмо.Организация ="ТК ""Яршинторг""";
	
	
	Письмо.Тексты.Добавить(ТекстСообщения,ТипТекстаПочтовогоСообщения.ПростойТекст);
	Письмо.ОбработатьТексты();
	
	попытка
		Почта.Подключиться(ИПП);
		Почта.Послать(Письмо);
		Почта.Отключиться();
	исключение
	КонецПопытки;
КонецПроцедуры

Функция нетСобытийПоЗаказу()
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	Событие.Ссылка
	|ИЗ
	|	Документ.Событие КАК Событие
	|ГДЕ
	|	Событие.Основание = &Основание
	|	И Событие.Проведен = ИСТИНА
	|	И Событие.ОписаниеСобытия = ""Созданы сезонные заказы поставщикам.""";
	Запрос.УстановитьПараметр("Основание",Ссылка);
	Рез=Запрос.Выполнить().Выбрать();
	Если Рез.Количество()>0 Тогда
		Возврат ложь;
	Иначе
		Возврат истина;
	КонецЕсли;
КонецФункции

Процедура АдресДляТТННачалоВыбора(Элемент, СтандартнаяОбработка)
		СтандартнаяОбработка = Ложь;

	Если Грузополучатель.Пустая() Тогда
		
		Если Контрагент.Пустая() Тогда
			ВвестиЗначение(Контрагент, "Выберите контрагента");
		КонецЕсли;
		
		Если НЕ Контрагент.Пустая() Тогда
			ФормаВыбора = РегистрыСведений.КонтактнаяИнформация.ПолучитьФормуСписка("ФормаСписка", ЭтаФорма);
			ФормаВыбора.РежимВыбора = Истина;
			
			ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Значение = Контрагент;
			ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Использование = Истина;
			
			СтруктураОтбораАдресов = Новый СписокЗначений;
			СтруктураОтбораАдресов.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
			ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.ВидСравнения = ВидСравнения.ВСписке;
			ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Значение = СтруктураОтбораАдресов;
			ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Использование = Истина;
			ФормаВыбора.ЭлементыФормы.РегистрСведенийСписок.Колонки.Тип.Видимость = Ложь;
			
			ВыбАдресДоставки = ФормаВыбора.ОткрытьМодально();
			
			Если Не ЗначениеНеЗаполнено(ВыбАдресДоставки) Тогда
				Если найти(ВыбАдресДоставки,",КРД:") > 0 Тогда
					
					Позиция = найти(ВыбАдресДоставки,",КРД:") + 4;
					
					Дл = СтрДлина(ВыбАдресДоставки);
					
					Коорд  = Прав(ВыбАдресДоставки,Дл-Позиция);
					
					ВыбАдресДоставки = Лев(ВыбАдресДоставки,Позиция-5);
					
				КонецЕсли;
				
				//КоординатыДоставки = Коорд;
				
				АдресДляТТН = ВыбАдресДоставки;
			КонецЕсли;	
			
		КонецЕсли;
		
	Иначе
		
		Если НЕ Грузополучатель.Пустая() Тогда
			
			ФормаВыбора = РегистрыСведений.КонтактнаяИнформация.ПолучитьФормуСписка("ФормаСписка", ЭтаФорма);
			ФормаВыбора.РежимВыбора = Истина;
			
			ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Значение = Грузополучатель;
			ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Использование = Истина;
			
			СтруктураОтбораАдресов = Новый СписокЗначений;
			СтруктураОтбораАдресов.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
			ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.ВидСравнения = ВидСравнения.ВСписке;
			ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Значение = СтруктураОтбораАдресов;
			ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Использование = Истина;
			ФормаВыбора.ЭлементыФормы.РегистрСведенийСписок.Колонки.Тип.Видимость = Ложь;
			
			ВыбАдресДоставки = ФормаВыбора.ОткрытьМодально();
			
			Если Не ЗначениеНеЗаполнено(ВыбАдресДоставки) Тогда
				Если найти(ВыбАдресДоставки,",КРД:") > 0 Тогда
					
					Позиция = найти(ВыбАдресДоставки,",КРД:") + 4;
					
					Дл = СтрДлина(ВыбАдресДоставки);
					
					Коорд  = Прав(ВыбАдресДоставки,Дл-Позиция);
					
					ВыбАдресДоставки = Лев(ВыбАдресДоставки,Позиция-5);
					
				КонецЕсли;
				
				//КоординатыДоставки = Коорд;
				
				АдресДляТТН = ВыбАдресДоставки;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли; 

КонецПроцедуры

//Чарчан
Процедура ДействияФормыРазделитьЗаказ(Кнопка)
	
	ФормаПроцентов = ПолучитьФорму("ФормаВводаПроцентов");
	ПроцентыСроки = ФормаПроцентов.открытьмодально();
	ОтказРазделения = ложь;
	
	Если ТипЗнч(ПроцентыСроки) = Тип("Структура") Тогда 
		// Работает алгоритм
		Если Найти(Комментарий,"!!!заказ разделен на:") <> 0 Тогда 
			Сообщить("Этот заказ уже разделен!!!", СтатусСообщения.Внимание);
			ОтказРазделения = Истина;						
		КонецЕсли;
		
		Если не (Проведен) Тогда 
			Сообщить("Нельзя делить непроведенный документ!!!", СтатусСообщения.Внимание);
			ОтказРазделения = Истина;			
		КонецЕсли;
			
		Если яштПоЗаказуБылиОтгрузки(Ссылка) и не ОтказРазделения Тогда 
			Сообщить("Нельзя делить документ, по которому уже были отгрузки!!!", СтатусСообщения.Внимание);
			ОтказРазделения = Истина;
		КонецЕсли;						
		
		Если яштРезервыПоТоварам.ЕстьРезервПоЗаказу(ссылка) и не ОтказРазделения Тогда 
			#Если Клиент Тогда
				СообщитьОбОшибке("По заказу: "+строка(ссылка)+" - уже ведется отгрузка!
								 |деление заказа невозможно!");
			#КонецЕсли	
			ОтказРазделения  = истина;			
		КонецЕсли;
		
		Если не ОтказРазделения Тогда 
			////////////////////////////////////////
			// Сначала создаем таблицу товаров
			ТаблицаТоваровРазложенная = РазложитьТаблицуТоваров();
			ТаблицаТоваровРазложенная.сортировать("Сумма возр");
			// Далее - делим 
			СуммаВр1 = Окр(СуммаДокумента*(ПроцентыСроки.Процент1/100),2);
			СуммаВр2 = Окр(СуммаДокумента*(ПроцентыСроки.Процент2/100),2);
			СуммаВр3 = СуммаДокумента - СуммаВр2 - СуммаВр1;
					
			Сумма1 = СуммаВр1;
			Сумма2 = СуммаВр2;
			Сумма3 = СуммаВр3;
			
			ТаблицаДляЗаказа1 = ТаблицаТоваровРазложенная.Скопироватьколонки(); 
			ТаблицаДляЗаказа2 = ТаблицаТоваровРазложенная.Скопироватьколонки(); 
			ТаблицаДляЗаказа3 = ТаблицаТоваровРазложенная.Скопироватьколонки(); 
			
			МассивУдаляемых = новый массив;
			
			//1.
			СуммаНак = 0;
			Для каждого СтрХ Из ТаблицаТоваровРазложенная Цикл
				СуммаНак = СуммаНак + Стрх.Сумма;
				Если СуммаНак>Сумма1 Тогда 
					СтрУ = ТаблицаДляЗаказа1.Добавить();
					ЗаполнитьЗначенияСвойств(СтрУ,СтрХ);
					МассивУдаляемых.Добавить(СтрХ);					
					Прервать;
				Иначе
					СтрУ = ТаблицаДляЗаказа1.Добавить();
					ЗаполнитьЗначенияСвойств(СтрУ,СтрХ);
					МассивУдаляемых.Добавить(СтрХ);
				КонецЕсли;				
			КонецЦикла;
			// Удаляем использованные 
			Для каждого эл из МассивУдаляемых Цикл
				ТаблицаТоваровРазложенная.удалить(Эл);	
			КонецЦикла;
			
			//2.
			СуммаНак = 0;
			МассивУдаляемых = новый массив;
			
			Для каждого СтрХ Из ТаблицаТоваровРазложенная Цикл
				СуммаНак = СуммаНак + Стрх.Сумма;
				Если СуммаНак>Сумма2 Тогда 
					СтрУ = ТаблицаДляЗаказа2.Добавить();
					ЗаполнитьЗначенияСвойств(СтрУ,СтрХ);
					МассивУдаляемых.Добавить(СтрХ);					
					Прервать;
				Иначе
					СтрУ = ТаблицаДляЗаказа2.Добавить();
					ЗаполнитьЗначенияСвойств(СтрУ,СтрХ);
					МассивУдаляемых.Добавить(СтрХ);
				КонецЕсли;				
			КонецЦикла;
			// Удаляем использованные 
			Для каждого эл из МассивУдаляемых Цикл
				ТаблицаТоваровРазложенная.удалить(Эл);	
			КонецЦикла;          
			
			//3. 
			ТаблицаДляЗаказа3 = ТаблицаТоваровРазложенная.скопировать();
			
			// Создаем заказы. 
			Заказ1=неопределено;НомерЗаказа1 =""; 
			Заказ2=неопределено;НомерЗаказа2 =""; 
			Заказ3=неопределено;НомерЗаказа3 =""; 
			ТРналОбщ = 0;
			ТРБезналОбщ = 0;
			ТРВценеОбщ = 0;
			
			Если (ТаблицаДляЗаказа1.количество()>0) Тогда 
				ТаблицаДляЗаказа1.Свернуть("Вес,ЕдиницаИзмерения,ЕдиницаИзмеренияМест,ЗначениеУсловияАвтоматическойСкидки,Коэффициент,Номенклатура,ПлановаяСебестоимость,ПроцентАвтоматическихСкидок,ПроцентСкидкиНаценки,Размещение,СтавкаНДС,Статус,УсловиеАвтоматическойСкидки,ХарактеристикаНоменклатуры,Цена","Сумма,СуммаНДС,Количество,КоличествоМест");
				Заказ1 = Документы.ЗаказПокупателя.СоздатьДокумент();
				ЗаполнитьЗначенияСвойств(Заказ1,Ссылка);
				Заказ1.Комментарий = "#Создан из заказа: "+Номер+" ("+строка(ПроцентыСроки.Процент1)+"%)";
				Заказ1.Дата = ТекущаяДата();
				Заказ1.ТипЗаказа = 11;
				Заказ1.ДатаОтгрузки = ТекущаяДата();
				Заказ1.ДатаОплаты = ТекущаяДата()+ПроцентыСроки.Срок1*86400;
				//УстановитьЧислоДнейСмоментаЗагрузки(Заказ1);
				Заказ1.ЧислоДнейСМоментаОтгрузки = ПроцентыСроки.Срок1;
				Заказ1.Номер="";
				Если (ПроцентыСроки.Срок1)>14 Тогда 
					ДоговорКонтрагентаХ			= ПолучитьНужныйДоговор(Контрагент,ДоговорКонтрагента);
					Заказ1.ДоговорКонтрагента 	= ?(ЗначениеЗаполнено(ДоговорКонтрагентаХ),ДоговорКонтрагентаХ,Заказ1.ДоговорКонтрагента)
				КонецЕсли;
				МассивЗаказовДляТчЗаказы = новый Массив;
				Для каждого СтрХ из ТаблицаДляЗаказа1 Цикл
					СтрУ = Заказ1.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(СтрУ,СтрХ);				
					РассчитатьСуммуТабЧасти(СтрУ, Заказ1);
					РассчитатьСуммуНДСТабЧасти(СтрУ, Заказ1);
					Для каждого ЗаказХ из Заказы Цикл
						стрН = ЗаказХ.ЗаказПокупателя.Товары.Найти(СтрХ.номенклатура,"Номенклатура");
						Если СтрН<>Неопределено и (МассивЗаказовДляТчЗаказы.Найти(ЗаказХ.ЗаказПокупателя)<>Неопределено) Тогда 	
							МассивЗаказовДляТчЗаказы.Добавить(ЗаказХ.ЗаказПокупателя);
						КонецЕсли;
					КонеЦЦикла;
				КонецЦикла;	
				
				Для каждого эл из МассивЗаказовДляТчЗаказы Цикл
					СтрЗаказ = Заказ1.Заказы.Добавить();
					СтрЗаказ.ЗаказПокупателя = эл;
				КонецЦикла;
				
				// Транспортные расходы
				Заказ1.ТРнал = Окр(ТРНал*ПроцентыСроки.Процент1,2);
				Заказ1.ТРБезНал = Окр(ТРБезНал*ПроцентыСроки.Процент1,2);
				Заказ1.ТРвЦене = Окр(ТРвЦене*ПроцентыСроки.Процент1,2);
				
				ТРналОбщ = ТРналОбщ + Заказ1.ТРнал;
				ТРБезналОбщ = ТРБезналОбщ + Заказ1.ТРБезНал;
				ТРВценеОбщ = ТРВценеОбщ + Заказ1.ТРвЦене;
			КонецЕсли;
			
			Если (ТаблицаДляЗаказа2.количество()>0) Тогда 
				ТаблицаДляЗаказа2.Свернуть("Вес,ЕдиницаИзмерения,ЕдиницаИзмеренияМест,ЗначениеУсловияАвтоматическойСкидки,Коэффициент,Номенклатура,ПлановаяСебестоимость,ПроцентАвтоматическихСкидок,ПроцентСкидкиНаценки,Размещение,СтавкаНДС,Статус,УсловиеАвтоматическойСкидки,ХарактеристикаНоменклатуры,Цена","Сумма,СуммаНДС,Количество,КоличествоМест");
				Заказ2 = Документы.ЗаказПокупателя.СоздатьДокумент();
				ЗаполнитьЗначенияСвойств(Заказ2,Ссылка);
				Заказ2.Комментарий = "#Создан из заказа: "+Номер+" ("+строка(ПроцентыСроки.Процент2)+"%)";
				Заказ2.ТипЗаказа = 11;
				Заказ2.Дата = ТекущаяДата();
				Заказ2.ДатаОтгрузки = ТекущаяДата();
				Заказ2.ДатаОплаты = ТекущаяДата()+ПроцентыСроки.Срок2*86400;
				Заказ2.ЧислоДнейСМоментаОтгрузки = ПроцентыСроки.Срок2;
				Заказ2.Номер="";
				Если (ПроцентыСроки.Срок2)>14 Тогда 
					ДоговорКонтрагентаХ			= ПолучитьНужныйДоговор(Контрагент,ДоговорКонтрагента);
					Заказ2.ДоговорКонтрагента 	= ?(ЗначениеЗаполнено(ДоговорКонтрагентаХ),ДоговорКонтрагентаХ,Заказ2.ДоговорКонтрагента)
				КонецЕсли;
				МассивЗаказовДляТчЗаказы = новый Массив;
				Для каждого СтрХ из ТаблицаДляЗаказа2 Цикл
					СтрУ = Заказ2.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(СтрУ,СтрХ);				
					РассчитатьСуммуТабЧасти(СтрУ, Заказ2);
					РассчитатьСуммуНДСТабЧасти(СтрУ, Заказ2);
					Для каждого ЗаказХ из Заказы Цикл
						стрН = ЗаказХ.ЗаказПокупателя.Товары.Найти(СтрХ.номенклатура,"Номенклатура");
						Если СтрН<>Неопределено и (МассивЗаказовДляТчЗаказы.Найти(ЗаказХ.ЗаказПокупателя)<>Неопределено) Тогда 	
							МассивЗаказовДляТчЗаказы.Добавить(ЗаказХ.ЗаказПокупателя);
						КонецЕсли;
					КонеЦЦикла;					
				КонецЦикла;	
				
				Для каждого эл из МассивЗаказовДляТчЗаказы Цикл
					СтрЗаказ = Заказ2.Заказы.Добавить();
					СтрЗаказ.ЗаказПокупателя = эл;
				КонецЦикла;		
				
				// Транспортные расходы
				Заказ2.ТРнал = Окр(ТРНал*ПроцентыСроки.Процент2,2);
				Заказ2.ТРБезНал = Окр(ТРБезНал*ПроцентыСроки.Процент2,2);
				Заказ2.ТРвЦене = Окр(ТРвЦене*ПроцентыСроки.Процент2,2);
				
				ТРналОбщ = ТРналОбщ + Заказ2.ТРнал;
				ТРБезналОбщ = ТРБезналОбщ + Заказ2.ТРБезНал;
				ТРВценеОбщ = ТРВценеОбщ + Заказ2.ТРвЦене;
				
			КонецЕсли;
			
			Если (ТаблицаДляЗаказа3.количество()>0) Тогда 
				ТаблицаДляЗаказа3.Свернуть("Вес,ЕдиницаИзмерения,ЕдиницаИзмеренияМест,ЗначениеУсловияАвтоматическойСкидки,Коэффициент,Номенклатура,ПлановаяСебестоимость,ПроцентАвтоматическихСкидок,ПроцентСкидкиНаценки,Размещение,СтавкаНДС,Статус,УсловиеАвтоматическойСкидки,ХарактеристикаНоменклатуры,Цена","Сумма,СуммаНДС,Количество,КоличествоМест");
				Заказ3 = Документы.ЗаказПокупателя.СоздатьДокумент();
				ЗаполнитьЗначенияСвойств(Заказ3,Ссылка);
				Заказ3.Комментарий = "#Создан из заказа: "+Номер+" ("+строка(ПроцентыСроки.Процент3)+"%)";
				Заказ3.ТипЗаказа = 11;
				Заказ3.Дата = ТекущаяДата();
				Заказ3.ДатаОтгрузки = ТекущаяДата();
				Заказ3.ДатаОплаты = ТекущаяДата()+ПроцентыСроки.Срок3*86400;
				Заказ3.ЧислоДнейСМоментаОтгрузки = ПроцентыСроки.Срок3;
				Заказ3.Номер="";
				Если (ПроцентыСроки.Срок3)>14 Тогда 
					ДоговорКонтрагентаХ 		= ПолучитьНужныйДоговор(Контрагент,ДоговорКонтрагента);
					Заказ3.ДоговорКонтрагента 	= ?(ЗначениеЗаполнено(ДоговорКонтрагентаХ),ДоговорКонтрагентаХ,Заказ3.ДоговорКонтрагента)
				КонецЕсли;
				Заказ3.ЧислоДнейСМоментаОтгрузки = ПроцентыСроки.Срок3;
				МассивЗаказовДляТчЗаказы = новый Массив;
				Для каждого СтрХ из ТаблицаДляЗаказа3 Цикл
					СтрУ = Заказ3.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(СтрУ,СтрХ);				
					РассчитатьСуммуТабЧасти(СтрУ, Заказ3);
					РассчитатьСуммуНДСТабЧасти(СтрУ, Заказ3);
					Для каждого ЗаказХ из Заказы Цикл
						стрН = ЗаказХ.ЗаказПокупателя.Товары.Найти(СтрХ.номенклатура,"Номенклатура");
						Если СтрН<>Неопределено и (МассивЗаказовДляТчЗаказы.Найти(ЗаказХ.ЗаказПокупателя)<>Неопределено) Тогда 	
							МассивЗаказовДляТчЗаказы.Добавить(ЗаказХ.ЗаказПокупателя);
						КонецЕсли;
					КонеЦЦикла;										
				КонецЦикла;	
				Для каждого эл из МассивЗаказовДляТчЗаказы Цикл
					СтрЗаказ = Заказ3.Заказы.Добавить();
					СтрЗаказ.ЗаказПокупателя = эл;
				КонецЦикла;		
				
				// Транспортные расходы
				Заказ3.ТРнал = ТРнал - ТРналОбщ;
				Заказ3.ТРБезНал = ТРБезНал - ТРБезналОбщ;
				Заказ3.ТРвЦене = ТРвЦене - ТРВценеОбщ;
			КонецЕсли;
			// Списываем по фИФО заказы из исходного. 
			
			НачатьТранзакцию();
			//
			Удача=ложь;
			
			Попытка 
				Записать(РежимЗаписиДокумента.ОтменаПроведения);				
				УстановитьПометкуУдаления(Истина);
				Если (Заказ1<>Неопределено) Тогда 
					Заказ1.Заказы.Загрузить( Заказы.Выгрузить() ); //связка с первичными заказами
					Заказ1.ТРнал 	= окр(ТРнал		*ПроцентыСроки.Процент1/100,0);
					Заказ1.ТРБезНал = окр(ТРБезНал	*ПроцентыСроки.Процент1/100,0);
					Заказ1.ТРвЦене  = окр(ТРвЦене	*ПроцентыСроки.Процент1/100,0);
					Заказ1.Записать(РежимЗаписиДокумента.Проведение);	
					НомерЗаказа1 = Заказ1.Номер; 
				КонецЕсли;
				Если (Заказ2<>Неопределено) Тогда 
					Заказ2.Заказы.Загрузить( Заказы.Выгрузить() ); //связка с первичными заказами
					Заказ2.ТРнал 	= окр(ТРнал		*ПроцентыСроки.Процент2/100,0);
					Заказ2.ТРБезНал = окр(ТРБезНал	*ПроцентыСроки.Процент2/100,0);
					Заказ2.ТРвЦене  = окр(ТРвЦене	*ПроцентыСроки.Процент2/100,0);
					Заказ2.Записать(РежимЗаписиДокумента.Проведение);	
					НомерЗаказа2 = Заказ2.Номер; 
				КонецЕсли;
				Если (Заказ3<>Неопределено) Тогда 
					Заказ3.Заказы.Загрузить( Заказы.Выгрузить() ); //связка с первичными заказами
					Заказ3.ТРнал 	= ТРнал   - Заказ1.ТРнал   - Заказ2.ТРнал;
					Заказ3.ТРБезНал = ТРБезНал- Заказ1.ТРБезНал- Заказ2.ТРБезНал;
					Заказ3.ТРвЦене  = ТРвЦене - Заказ1.ТРвЦене - Заказ2.ТРвЦене;
					Заказ3.Записать(РежимЗаписиДокумента.Проведение);	
					НомерЗаказа3 = Заказ3.Номер; 
				КонецЕсли;
				Удача=истина;
				Комментарий = Комментарий + "!!!заказ разделен на: " + НомерЗаказа1 + "," + НомерЗаказа2+ "," +НомерЗаказа3;
				Записать(РежимЗаписиДокумента.Запись);				
			Исключение 
				Предупреждение("Операция не выполнена по причине: " + ИнформацияОбОшибке().Описание);
				ОтменитьТранзакцию();
			КонецПопытки;
			
			Если Удача Тогда 
				ЗафиксироватьТранзакцию();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

Функция РазложитьТаблицуТоваров()
	
	ТаблицаРазложенная = Товары.ВыгрузитьКолонки();
	ТаблицаИсходная = Товары.Выгрузить();
	
	Для Каждого Стрх из ТаблицаИсходная Цикл
		Для й=1 по СтрХ.Количество Цикл
			СтрУ = ТаблицаРазложенная.Добавить();
			ЗаполнитьЗначенияСвойств(СтрУ,СтрХ);
			СтрУ.количество=1;
			СтрУ.сумма=СтрУ.количество*СтрУ.Цена;
		КонецЦикла;
	КонеЦЦикла;
	
	Возврат ТаблицаРазложенная;
КонецФункции

Функция ПолучитьНужныйДоговор(Контрагент,ДоговорКонтрагента)
	ЕстьЗвезда = Найти(ДоговорКонтрагента.Наименование,"*");
	Если (ЕстьЗвезда<>0) Тогда 
		Договор = НайтиДоговорПродажиСоЗвездой(Контрагент,ДоговорКонтрагента.ОтветственноеЛицо);
	Иначе
		Договор = НайтиДоговорПродажи(Контрагент,ДоговорКонтрагента.ОтветственноеЛицо);
	КонецЕсли;
	
	Возврат Договор;
КонецФункции

Функция НайтиДоговорПродажиСоЗвездой(Контрагент,Ответственный)
	Запрос = Новый Запрос("Выбрать Ссылка,Наименование из Справочник.ДоговорыКонтрагентов Где Владелец=&Контрагент и ОтветственноеЛицо=&менеджер");
	Запрос.УстановитьПараметр("Менеджер",Ответственный);
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Выб = Запрос.Выполнить().Выбрать();
	Договор = неопределено;
	
	Пока Выб.Следующий() Цикл
		Если ("ДОГОВОР ПРОДАЖИ" = Врег(СокрЛП(Выб.Наименование))) и (Найти(Выб.Наименование,"*")<>0) Тогда 
			Возврат Выб.Ссылка;
		КонецЕсли;
	КонеЦЦикла;
	
	Возврат Договор;
КонецФункции

Функция НайтиДоговорПродажи(Контрагент,Ответственный)
	Запрос = Новый Запрос("Выбрать Ссылка,Наименование из Справочник.ДоговорыКонтрагентов Где Владелец=&Контрагент и ОтветственноеЛицо=&менеджер");
	Запрос.УстановитьПараметр("Менеджер",Ответственный);
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Выб = Запрос.Выполнить().Выбрать();
	
	Договор = неопределено;
	Пока Выб.Следующий() Цикл
		Если ("ДОГОВОР ПРОДАЖИ" = Врег(СокрЛП(Выб.Наименование))) Тогда 
			Возврат Выб.Ссылка;
		КонецЕсли;		
	КонеЦЦикла;
	
	Возврат Договор;
КонецФункции

Процедура УстановитьЧислоДнейСмоментаЗагрузки(Заказ)
	//26.04.2017 - раскомментарено! проверка по константе!
	Если Заказ.ЧислоДнейСмоментаОтгрузки > Константы.МаксимальныйСрокСМоментаОтгрузкиДоОплаты.Получить() Тогда
		#Если Клиент Тогда
			Сообщить("Число дней с момента отгрузки не может превышать "+Константы.МаксимальныйСрокСМоментаОтгрузкиДоОплаты.Получить()+"!", СтатусСообщения.Важное);
		#КонецЕсли
		ВызватьИсключение("Неверный срок оплаты!");
	КонецЕсли;
	
 	Заказ.ДатаОплаты =  макс(Заказ.Дата, Заказ.ДатаОтгрузки) + 86400 * Заказ.ЧислоДнейСМоментаОтгрузки; 

КонецПроцедуры

Процедура ДокументОснованиеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка= Ложь;
КонецПроцедуры

Процедура ДокументОснованиеНажатие(Элемент)
	ДокументОснование.ПолучитьФорму().Открыть();
КонецПроцедуры
 

Процедура ВходящиеДокументыВидДокументаПриИзменении(Элемент)
	текДанные =ЭлементыФормы.ВходящиеДокументы.ТекущиеДанные;
	ТекДанные.контрагент= контрагент;
	ТекДанные.Адрес = АдресДоставки;
	Если не значениеЗаполнено(АдресДоставки) Тогда
		отбор = Новый Структура;
		отбор.Вставить("Объект",Контрагент);
		Отбор.вставить("Тип",перечисления.ТипыКонтактнойИнформации.Адрес);
		Отбор.вставить("Вид",справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Адрес доставки"));
		АдреспоУмолчанию = регистрыСведений.КонтактнаяИнформация.Получить(Отбор);
		ТекДанные.Адрес = АдреспоУмолчанию.Представление;
	КонецЕсли;
	Если не значениеЗаполнено(текДанные.ЗаказПокупателя) Тогда
	текДанные.ЗаказПокупателя = ссылка;
	КонецЕсли;
КонецПроцедуры

Процедура ВходящиеДокументыВидДокументаНачалоВыбора(Элемент, СтандартнаяОбработка)
		текДанные =ЭлементыФормы.ВходящиеДокументы.ТекущиеДанные;
	Если текДанные.ВНаличии Тогда
	Сообщить("Документ в наличии, тип документа менять нельзя!");	
	стандартнаяОбработка = Ложь;
	КонецЕсли;	

КонецПроцедуры


Процедура УчетНаличкиУВодителяПередНачаломИзменения(Элемент, Отказ)
	ТекСтрока = ЭлементыФормы.УчетНаличкиУВодителя.ТекущиеДанные;
	выборка = Документы.ЗаданиеВодителюНаПолучениеДенежныхСредств.Выбрать(НачалоДня(Дата),ТекущаяДата(),Новый Структура("Заказ",Ссылка));
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЗаданиеНаОтгрузку = ТекСтрока.заданиеНаОтгрузку и Выборка.Реализация = ТекСтрока.Реализация Тогда
		Выборка.ПолучитьОбъект().ПолучитьФорму().Открыть();
		прервать;
	    КонецЕсли;
	КонецЦикла;
	
	отказ = Истина;
КонецПроцедуры

Процедура ОбновитьНажатие(Элемент)
	
	    Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаданиеВодителюНаПолучениеДенежныхСредств.ЗаданиеНаОтгрузку,
		|	ЗаданиеВодителюНаПолучениеДенежныхСредств.Реализация,
		|	ЗаданиеВодителюНаПолучениеДенежныхСредств.СуммаТранспорт КАК Транспортные,
		|	ЗаданиеВодителюНаПолучениеДенежныхСредств.СуммаПредыдущийДолг КАК СуммаДолгПредыдущий,
		|	ЗаданиеВодителюНаПолучениеДенежныхСредств.Сумма КАК СуммаТекущая,
		|	ЗаданиеВодителюНаПолучениеДенежныхСредств.Водитель,
		|	ЗаданиеВодителюНаПолучениеДенежныхСредств.Сумма + ЗаданиеВодителюНаПолучениеДенежныхСредств.СуммаПредыдущийДолг + ЗаданиеВодителюНаПолучениеДенежныхСредств.СуммаТранспорт КАК Итого
		|ИЗ
		|	Документ.ЗаданиеВодителюНаПолучениеДенежныхСредств КАК ЗаданиеВодителюНаПолучениеДенежныхСредств
		|ГДЕ
		|	ЗаданиеВодителюНаПолучениеДенежныхСредств.Заказ = &Заказ
		|	И ЗаданиеВодителюНаПолучениеДенежныхСредств.Проведен";
		
		Запрос.УстановитьПараметр("Заказ", Ссылка);
		
		ЭлементыФормы.УчетНаличкиУВодителя.Значение = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура ВходящиеДокументыПередУдалением(Элемент, Отказ)
	ТЕкСтрока = ЭлементыФормы.ВходящиеДокументы.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекСтрока.МаршрутныйЛист) Тогда
		сообщить("Поручение водителю уже оформлено, строку удалять нельзя!");
	отказ=Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ВходящиеДокументыПередНачаломДобавления(Элемент, Отказ, Копирование)
	текСтрока =ЭлементыФормы.ВходящиеДокументы.ТекущиеДанные;
	Если Копирование Тогда
		ТекСтрока.МаршрутныйЛист = "";
	КонецЕсли;	
КонецПроцедуры

Процедура АдресДоставкиОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	Предупреждение("Адрес доставки - необходимо выбрать из списка!", 10);
	Текст = "";
КонецПроцедуры

//---08.06.2016 согласование срока отсрочки с Е. Малышевым
Процедура ПроверитьОграничениеОтсрочкиОплаты()
	
	Если  ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.НайтиПоКоду("00004") Тогда//и ЕстьДиски() Тогда
		СтараяСхема = ложь;
		Если СтараяСхема Тогда
			Если ЕстьДиски() Тогда
				МаксДнейОтсрочки = ОпределитьМаксДнейотсрочки();
				Если ДатаОплаты > ДатаОтгрузки + МаксДнейОтсрочки*86400 Тогда 			
					ТекстВопроса = "Превышен срок отсрочки оплаты. Установлен максимально возможный срок "  + МаксДнейОтсрочки + " дней. Чтобы увеличить срок отсрочки требуется согласование с Егором Малышевым. Согласовать?";
					Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );
					Если Ответ = КодВозвратаДиалога.Да Тогда
						СоздатьЗадачуСогласованиеОтсрочки(МаксДнейОтсрочки); 
						Сообщить("Направлена заявка на согласование. При согласовании, в документ автоматически подставится новый срок отсрочки");
					КонецЕсли;
					ДатаОплаты = ДатаОтгрузки + МаксДнейОтсрочки*86400;
					ЧислоДнейСМоментаОтгрузки = МаксДнейОтсрочки;
				КонецЕсли;
			КонецЕсли;
		ИНаче //новая схема
			ДатО = ?(ЗначениеЗаполнено(ДатаОтгрузки),ДатаОтгрузки,Дата);
			Рез = ОпределитьМаксДнейОтсрочкиДляСогласования(Дата,ДатО,ДатаОплаты,Товары);
			
			МаксДнейОтсрочки = 	Рез.ДнейОтсрочки;
			//теперь может быть и 0
			//Если ЗначениеЗаполнено(МаксДнейОтсрочки) Тогда
				Если ДатаОплаты > ДатаОтгрузки + МаксДнейОтсрочки*86400 Тогда 			
					ТекстВопроса = "Превышен срок отсрочки оплаты. Установлен максимально возможный срок "  + МаксДнейОтсрочки + " дней. Чтобы увеличить срок отсрочки требуется согласование с ответственными по группам. Согласовать?";
					Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );
					Если Ответ = КодВозвратаДиалога.Да Тогда
						СоздатьЗадачуСогласованиеОтсрочки2(Рез.ОтветственныеСроки); 
						Сообщить("Направлена заявка на согласование. При согласовании, в документ автоматически подставится новый срок отсрочки");
					КонецЕсли;
					ДатаОплаты = ДатО + МаксДнейОтсрочки*86400;
					ЧислоДнейСМоментаОтгрузки = МаксДнейОтсрочки;
				КонецЕсли;
			//КонецЕсли;
		КонецЕсли; //СтараяСхема
	Иначе
		//+++ 26.04.2017  фикс.срок 180 заменен на Константу! Для некоторых товаров "по программе"! сейчас надо было 230 дн.
		//МаксДнейОтсрочки = 180;
		МаксДнейОтсрочки = константы.МаксимальныйСрокСМоментаОтгрузкиДоОплаты.Получить();
		
		Если ЗначениеЗаполнено(ДатаОтгрузки) и  ДатаОплаты > ДатаОтгрузки + МаксДнейОтсрочки*86400 Тогда 			
			Сообщить("Превышен срок отсрочки оплаты. Установлен максимально возможный срок "  + МаксДнейОтсрочки + " дней.");
			ДатаОплаты = ?(ДатаОтгрузки = '00010101', ТекущаяДата(), ДатаОтгрузки) + МаксДнейОтсрочки*86400;
			ЧислоДнейСМоментаОтгрузки = МаксДнейОтсрочки;
		КонецЕсли;
		
	КонецЕсли;  	
КонецПроцедуры

Функция  ЕстьДиски() 
	Рез = ложь;
	Для  Каждого Стр из ДокументОбъект.Товары  Цикл   
		Если Стр.Номенклатура.ПринадлежитЭлементу(Справочники.Номенклатура.НайтиПоКоду("0001752")) Тогда 
			Рез = истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат рез;	
КонецФункции

Функция ОпределитьМаксДнейОтсрочкиДляСогласования(ДатаЗаказа, ДатаОтгрузки, ДатаОплаты,ТабТовары)
	Результат = новый Структура("максДатаОплаты,ДнейОтсрочки,ОтветственныеСроки");
	ОтветственныеСроки = новый ТаблицаЗначений;
	ОтветственныеСроки.Колонки.Добавить("Ответственный");
	ОтветственныеСроки.Колонки.Добавить("НоменклатурнаяГруппа");
	ОтветственныеСроки.Колонки.Добавить("МаксДнейОтсрочки");
	ОтветственныеСроки.Колонки.Добавить("Производители");

	
	Результат.максДатаОплаты=Дата(1,1,1);
	Результат.ДнейОтсрочки=0;
	Результат.ОтветственныеСроки=ОтветственныеСроки;

	
	Запрос=новый запрос;
	Запрос.УстановитьПараметр("Товары",ТабТовары);
	Запрос.УстановитьПараметр("ДатаЗаказа",ДатаЗаказа);
	Запрос.УстановитьПараметр("ДатаОтгрузки",ДатаОтгрузки);
    Запрос.УстановитьПараметр("ДатаОплаты",ДатаОплаты);
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	Товары.Номенклатура КАК Номенклатура
	             |ПОМЕСТИТЬ втНоменклатураО
	             |ИЗ
	             |	&Товары КАК Товары
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	НоменклатураСпр.Ссылка КАК Номенклатура
	             |ПОМЕСТИТЬ втНоменклатура
	             |ИЗ
	             |	втНоменклатураО КАК втНоменклатураО
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
	             |		ПО втНоменклатураО.Номенклатура = НоменклатураСпр.Ссылка
	             |ГДЕ
	             |	НоменклатураСпр.НоменклатурнаяГруппа <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	             |	И НоменклатураСпр.НоменклатурнаяГруппа.Ответственный <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	втНоменклатура.Номенклатура.НоменклатурнаяГруппа КАК НоменклатураНоменклатурнаяГруппа,
	             |	ВЫБОР
	             |		КОГДА &ДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1)
	             |			ТОГДА НАЧАЛОПЕРИОДА(&ДатаЗаказа, МЕСЯЦ)
	             |		ИНАЧЕ НАЧАЛОПЕРИОДА(&ДатаОтгрузки, МЕСЯЦ)
	             |	КОНЕЦ КАК МесяцЗаказа,
	             |	&ДатаОплаты КАК ЗаказДатаОплаты,
	             |	втНоменклатура.Номенклатура КАК Номенклатура,
	             |	втНоменклатура.Номенклатура.ВидТовара КАК НоменклатураВидТовара,
	             |	втНоменклатура.Номенклатура.Производитель КАК НоменклатураПроизводитель,
	             |	&ДатаЗаказа КАК ЗаказДата,
	             |	&ДатаОтгрузки КАК ЗаказДатаОтгрузки
	             |ПОМЕСТИТЬ втДляПредоплатыПросрочки
	             |ИЗ
	             |	втНоменклатура КАК втНоменклатура
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	втНоменклатура.Номенклатура.НоменклатурнаяГруппа,
	             |	втНоменклатура.Номенклатура,
	             |	втНоменклатура.Номенклатура.ВидТовара,
	             |	втНоменклатура.Номенклатура.Производитель
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	А.номенклатура,
	             |	А.Приоритет,
	             |	А.РекомендованаяДатаОплаты
	             |ПОМЕСТИТЬ втОсноваПремииПредоплата
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		втДляПредоплатыПросрочки.Номенклатура КАК номенклатура,
	             |		4 КАК Приоритет,
	             |		ВЫБОР
	             |			КОГДА РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1)
	             |				ТОГДА ДОБАВИТЬКДАТЕ(втДляПредоплатыПросрочки.ЗаказДатаОтгрузки, ДЕНЬ, РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам.ДнейОтсрочки)
	             |			ИНАЧЕ РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам.ДатаОплаты
	             |		КОНЕЦ КАК РекомендованаяДатаОплаты
	             |	ИЗ
	             |		втДляПредоплатыПросрочки КАК втДляПредоплатыПросрочки
	             |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам КАК РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам
	             |			ПО втДляПредоплатыПросрочки.МесяцЗаказа = РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам.Месяц
	             |				И втДляПредоплатыПросрочки.НоменклатураВидТовара = РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам.ВидТовара
	             |	ГДЕ
	             |		РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам.Производитель = ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка)
	             |		И РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	             |	
	             |	ОБЪЕДИНИТЬ ВСЕ
	             |	
	             |	ВЫБРАТЬ
	             |		втДляПредоплатыПросрочки.Номенклатура,
	             |		3,
	             |		ВЫБОР
	             |			КОГДА РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1)
	             |				ТОГДА ДОБАВИТЬКДАТЕ(втДляПредоплатыПросрочки.ЗаказДатаОтгрузки, ДЕНЬ, РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам.ДнейОтсрочки)
	             |			ИНАЧЕ РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам.ДатаОплаты
	             |		КОНЕЦ
	             |	ИЗ
	             |		втДляПредоплатыПросрочки КАК втДляПредоплатыПросрочки
	             |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам КАК РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам
	             |			ПО втДляПредоплатыПросрочки.МесяцЗаказа = РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам.Месяц
	             |				И втДляПредоплатыПросрочки.НоменклатураВидТовара = РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам.ВидТовара
	             |				И втДляПредоплатыПросрочки.НоменклатураПроизводитель = РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам.Производитель
	             |	ГДЕ
	             |		РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	             |	
	             |	ОБЪЕДИНИТЬ ВСЕ
	             |	
	             |	ВЫБРАТЬ
	             |		втДляПредоплатыПросрочки.Номенклатура,
	             |		2,
	             |		ВЫБОР
	             |			КОГДА РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1)
	             |				ТОГДА ДОБАВИТЬКДАТЕ(втДляПредоплатыПросрочки.ЗаказДатаОтгрузки, ДЕНЬ, РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам.ДнейОтсрочки)
	             |			ИНАЧЕ РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам.ДатаОплаты
	             |		КОНЕЦ
	             |	ИЗ
	             |		втДляПредоплатыПросрочки КАК втДляПредоплатыПросрочки
	             |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам КАК РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам
	             |			ПО втДляПредоплатыПросрочки.МесяцЗаказа = РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам.Месяц
	             |				И втДляПредоплатыПросрочки.НоменклатураВидТовара = РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам.ВидТовара
	             |				И втДляПредоплатыПросрочки.НоменклатураНоменклатурнаяГруппа = РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам.НоменклатурнаяГруппа
	             |	ГДЕ
	             |		РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам.Производитель = ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка)
	             |	
	             |	ОБЪЕДИНИТЬ ВСЕ
	             |	
	             |	ВЫБРАТЬ
	             |		втДляПредоплатыПросрочки.Номенклатура,
	             |		1,
	             |		ВЫБОР
	             |			КОГДА РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1)
	             |				ТОГДА ДОБАВИТЬКДАТЕ(втДляПредоплатыПросрочки.ЗаказДатаОтгрузки, ДЕНЬ, РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам.ДнейОтсрочки)
	             |			ИНАЧЕ РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам.ДатаОплаты
	             |		КОНЕЦ
	             |	ИЗ
	             |		втДляПредоплатыПросрочки КАК втДляПредоплатыПросрочки
	             |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам КАК РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам
	             |			ПО втДляПредоплатыПросрочки.МесяцЗаказа = РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам.Месяц
	             |				И втДляПредоплатыПросрочки.НоменклатураВидТовара = РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам.ВидТовара
	             |				И втДляПредоплатыПросрочки.НоменклатураНоменклатурнаяГруппа = РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам.НоменклатурнаяГруппа
	             |				И втДляПредоплатыПросрочки.НоменклатураПроизводитель = РекомендованыеДатыОтсрочкиПоНоменклатурнымГруппам.Производитель) КАК А
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	втОсноваПремииПредоплата.РекомендованаяДатаОплаты КАК РекомендованаяДатаОплаты,
	             |	втОсноваПремииПредоплата.номенклатура.НоменклатурнаяГруппа.Ответственный КАК НоменклатурнаяГруппаОтветственный,
	             |	втОсноваПремииПредоплата.номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	             |ПОМЕСТИТЬ втОснова
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		втОсноваПремииПредоплата.номенклатура КАК номенклатура,
	             |		МИНИМУМ(втОсноваПремииПредоплата.Приоритет) КАК Приоритет
	             |	ИЗ
	             |		втОсноваПремииПредоплата КАК втОсноваПремииПредоплата
	             |	
	             |	СГРУППИРОВАТЬ ПО
	             |		втОсноваПремииПредоплата.номенклатура) КАК А
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОсноваПремииПредоплата КАК втОсноваПремииПредоплата
	             |		ПО А.номенклатура = втОсноваПремииПредоплата.номенклатура
	             |			И А.Приоритет = втОсноваПремииПредоплата.Приоритет
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ВложенныйЗапрос.НоменклатураНоменклатурнаяГруппаОтветственный КАК НоменклатурнаяГруппаОтветственный,
	             |	ВложенныйЗапрос.НоменклатураНоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	             |	ЕСТЬNULL(втОснова.РекомендованаяДатаОплаты, &ДатаОтгрузки) КАК РекомендованаяДатаОплаты
	             |ИЗ
	             |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |		втДляПредоплатыПросрочки.НоменклатураНоменклатурнаяГруппа КАК НоменклатураНоменклатурнаяГруппа,
	             |		втДляПредоплатыПросрочки.НоменклатураНоменклатурнаяГруппа.Ответственный КАК НоменклатураНоменклатурнаяГруппаОтветственный
	             |	ИЗ
	             |		втДляПредоплатыПросрочки КАК втДляПредоплатыПросрочки) КАК ВложенныйЗапрос
	             |		ЛЕВОЕ СОЕДИНЕНИЕ втОснова КАК втОснова
	             |		ПО ВложенныйЗапрос.НоменклатураНоменклатурнаяГруппа = втОснова.НоменклатурнаяГруппа
	             |			И ВложенныйЗапрос.НоменклатураНоменклатурнаяГруппаОтветственный = втОснова.НоменклатурнаяГруппаОтветственный
	             |ИТОГИ
	             |	МИНИМУМ(РекомендованаяДатаОплаты)
	             |ПО
	             |	ОБЩИЕ";
				 ВыборкаИтого = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				 
				 Пока ВыборкаИтого.Следующий() Цикл
					Результат.максДатаОплаты = ВыборкаИтого.РекомендованаяДатаОплаты;
					Результат.ДнейОтсрочки = (Результат.максДатаОплаты-ДатаОтгрузки)/86400;
					ВыборкаОтветственные = ВыборкаИтого.Выбрать();
					Пока ВыборкаОтветственные.Следующий() Цикл
						Если ВыборкаОтветственные.РекомендованаяДатаОплаты<ДатаОплаты Тогда
							нстр = ОтветственныеСроки.Добавить();
							нстр.Ответственный = ВыборкаОтветственные.НоменклатурнаяГруппаОтветственный;
							нстр.МаксДнейОтсрочки =  (ВыборкаОтветственные.РекомендованаяДатаОплаты-ДатаОтгрузки)/86400;
							нстр.НоменклатурнаяГруппа =  ВыборкаОтветственные.НоменклатурнаяГруппа;
							нстр.Производители = СформироватьПредставленияПроизводителей(нстр.НоменклатурнаяГруппа,ТабТовары);
							//Ответственные.Добавить(ВыборкаОтветственные.НоменклатурнаяГруппаОтветственный);
						КонецЕсли;
					КонецЦикла;
					Результат.ОтветственныеСроки = ОтветственныеСроки;
				 КонецЦикла;
				 
				 Возврат Результат;
КонецФункции

Функция СформироватьПредставленияПроизводителей(НГ, тов)
	ПредставленияПроизводителей="";
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	Товары.Номенклатура КАК Номенклатура
	             |ПОМЕСТИТЬ вт
	             |ИЗ
	             |	&Товары КАК Товары
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	вт.Номенклатура.Производитель КАК Производитель
	             |ИЗ
	             |	вт КАК вт
				 |Где вт.Номенклатура.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	Производитель
	             |АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа",НГ);
	Запрос.УстановитьПараметр("Товары",тов);
	Рез =Запрос.Выполнить().Выбрать();
	
	Пока Рез.Следующий() Цикл
		ПредставленияПроизводителей=ПредставленияПроизводителей+Рез.Производитель+";";
	КонецЦикла;
	
	Возврат ПредставленияПроизводителей;
КонецФункции

Функция ОпределитьМаксДнейОтсрочки()
	
	МаксДнейОтсрочки = 0;	
	Если не ЗначениеЗаполнено(ДатаОтгрузки) Тогда 
		Возврат МаксДнейОтсрочки;
	КонецЕсли;	
	
	Месяц = Месяц(ДатаОтгрузки); 	
	Если 				Месяц = 5 или Месяц = 11 Тогда МаксДнейОтсрочки = 150 
	ИначеЕсли 		Месяц = 6 или Месяц = 12 Тогда МаксДнейОтсрочки = 120
	ИначеЕсли 	Месяц = 7 или Месяц = 1 Тогда  МаксДнейОтсрочки = 90
	Иначе 									   МаксДнейОтсрочки = 60		
	КонецЕсли;	
	
	//// выбирается минимум из указанного Для контрагента и в этом месяце
	//Если ЗначениеЗаполнено(Контрагент.ДопустимоеЧислоДнейЗадолженности) Тогда
	//	МаксДнейОтсрочкиКонтрагент = Контрагент.ДопустимоеЧислоДнейЗадолженности;
	//	Возврат Мин(МаксДнейОтсрочки,МаксДнейОтсрочкиКонтрагент);	
	//Иначе
		Возврат МаксДнейОтсрочки;	
	//КонецЕсли;	
КонецФункции	

Процедура СоздатьЗадачуСогласованиеОтсрочки(максднейОтсрочки) 
	Если ЭтоНовый() Тогда 
		НовыйСсылка = Документы.ЗаказПокупателя.ПолучитьСсылку(Новый УникальныйИдентификатор);	
		ДокументОбъект.УстановитьСсылкуНового(НовыйСсылка);
	КонецЕсли;
	
	ЕгорМалышев = Справочники.Пользователи.НайтиПоРеквизиту("ФизЛицо",Справочники.ФизическиеЛица.НайтиПоКоду("С0438"));				
	Инициатор = ПараметрыСеанса.ТекущийПользователь;
	
	Задача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
	Задача.Дата = ТекущаяДата();
	Задача.Постановщик = ЕгорМалышев;
	Задача.Наименование = "Согласование срока отсрочки платежа по заказу покупателя";
	Задача.Исполнитель = ЕгорМалышев;
	Задача.Описание = "Согласование срока отсрочки платежа больше максимально допустимого." + символы.пс 
	+ "Ответственный менеджер: " + Инициатор.Наименование + символы.пс
	+ "Контрагент " + Контрагент.НаименованиеПолное + Символы.ПС
	+ "По Договору " + ДоговорКонтрагента + Символы.ПС
	+ "№ Заказа " + ДокументОбъект.Номер + Символы.ПС 
	+ "Максимально разрешенный срок отсрочки, Для данного заказа " + МаксДнейОтсрочки + " дней." + Символы.ПС 
	+ "Предполагаемый срок отсрочки " + Строка(Окр(( ДатаОплаты - ДатаОтгрузки)/86400,0)) + " дней.";
	
	
	Если ЭтоНовый() Тогда 
		Задача.Объект = НовыйСсылка;
	Иначе 
		Задача.Объект = ДокументОбъект.Ссылка;
	КонецЕсли;                             
	Задача.Инициатор = Инициатор;
	Задача.НаСогласование = Истина;
	Задача.РеквизитДляСогласования = "ДатаОплаты";
	Задача.ЗначениеРеквизитаДляСогласования = ДатаОплаты;
	Задача.СрокОповещения = Задача.Дата;
	Задача.Оповещение = Истина;
	Задача.Записать();  	
КонецПроцедуры

Процедура СоздатьЗадачуСогласованиеОтсрочки2(таб) 
	Если ЭтоНовый() Тогда 
		НовыйСсылка = Документы.ЗаказПокупателя.ПолучитьСсылку(Новый УникальныйИдентификатор);	
		ДокументОбъект.УстановитьСсылкуНового(НовыйСсылка);
	КонецЕсли;
	
	//ЕгорМалышев = Справочники.Пользователи.НайтиПоРеквизиту("ФизЛицо",Справочники.ФизическиеЛица.НайтиПоКоду("С0438"));				
	Для каждого стр из таб Цикл
		Инициатор = ПараметрыСеанса.ТекущийПользователь;
		
		Задача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
		Задача.Дата = ТекущаяДата();
		Задача.Постановщик = Стр.Ответственный;
		Задача.Наименование = "Согласование срока отсрочки платежа по заказу покупателя";
		Задача.Исполнитель = Стр.Ответственный;
		Задача.Описание = "Согласование срока отсрочки платежа больше максимально допустимого." + символы.пс 
		+ "Ответственный менеджер: " + Инициатор.Наименование + символы.пс
		+ "Контрагент " + Контрагент.НаименованиеПолное + Символы.ПС
		+ "По Договору " + ДоговорКонтрагента + Символы.ПС
		+ "№ Заказа " + ДокументОбъект.Номер + Символы.ПС 
		+ "Производители: "+стр.Производители + Символы.ПС
		+ "Максимально разрешенный срок отсрочки, Для " +стр.НоменклатурнаяГруппа+" " + Стр.МаксДнейОтсрочки + " дней." +" ("+Формат(?(ЗначениеЗаполнено(ДатаОтгрузки),ДатаОтгрузки,Дата)+Стр.МаксДнейОтсрочки*86400,"ДФ=dd.MM.yyyy") +")"+ Символы.ПС 
		+ "Предполагаемый срок отсрочки " + Строка(Окр(( ДатаОплаты - ?(ЗначениеЗаполнено(ДатаОтгрузки),ДатаОтгрузки,Дата))/86400,0)) + " дней."+" ("+Формат(ДатаОплаты,"ДФ=dd.MM.yyyy")+").";
		
		
		Если ЭтоНовый() Тогда 
			Задача.Объект = НовыйСсылка;
		Иначе 
			Задача.Объект = ДокументОбъект.Ссылка;
		КонецЕсли;                             
		Задача.Инициатор = Инициатор;
		Задача.НаСогласование = Истина;
		Задача.РеквизитДляСогласования = "ДатаОплаты";
		Задача.ЗначениеРеквизитаДляСогласования = ДатаОплаты;
		Задача.СрокОповещения = Задача.Дата;
		Задача.Оповещение = Истина;
		Задача.Записать();
		Сообщить("Создана новая задача на согласование отсрочки. "+ стр.НоменклатурнаяГруппа+" Ответственный: "+Стр.Ответственный,СтатусСообщения.Важное);
	КонецЦикла;
КонецПроцедуры	 
///---08.06.016


//Адиянов<<<
//Контрагенту Резерв ИМ и Если есть диски реквизит "Проверено" может установить только "Малышев Егор"
Процедура ДоступностьРеквизитаПроверено()
	
	Если СокрЛП(ПараметрыСеанса.ТекущийПользователь.Код) = "Малышев Егор" 
		Или СокрЛП(ПараметрыСеанса.ТекущийПользователь.Код) = "Малышев Егор (снабжение)" Тогда 
		ЭлементыФормы.Проверен.Доступность = Истина;
		Возврат;
	КонецЕсли;

	КонтрагентРезервДляИМ = Справочники.Контрагенты.НайтиПоКоду("П004703");
	Если Контрагент = КонтрагентРезервДляИМ Тогда
		Возврат; // Для контрагента "Резерв Для ИМ" разрешена работа без согласования с 10.05.2017. Договорился Смирнов Александр с Егором Малышевым
	КонецЕсли;
	
	Если не Контрагент.пустая()
		//и Контрагент = Контрагент.КонтрагентДляРезерваИМ Тогда //123заменить
		и Контрагент = ДоговорКонтрагента.КонтрагентДляРезерваИМ Тогда
		
		Если ЕстьДиски() 
		И Не ЭтотОбъект.Проведен 
		И Не Проверен 
		И ЭлементыФормы.Проверен.Доступность Тогда 
			ЭлементыФормы.Проверен.Доступность = Ложь;
			Проверен = Ложь;
			Сообщить("Признак ""К отгрузке"" недоступен Для редактирования.
			|-Для контрагента ""Резерв Для ИМ"" и дисков признак ""К отгрузке"" устанавливает ТОЛЬКО Малышев Егор");
		КонецЕсли;
		
	Иначе
		ЭлементыФормы.Проверен.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры
//Адиянов>>>

Процедура СогласованиеРезерваДляИМ(ЗадачаСоздана)
	
	ЗадачаСоздана = Ложь;
	
	//Если Контрагент <> Контрагент.КонтрагентДляРезерваИМ //123заменить
	Если Контрагент <> ДоговорКонтрагента.КонтрагентДляРезерваИМ
		И Не ЕстьДиски()
		И Проверен Тогда 
		Возврат;
	КонецЕсли;
	
	ЕгорМалышев = Справочники.Пользователи.НайтиПоРеквизиту("ФизЛицо",Справочники.ФизическиеЛица.НайтиПоКоду("С0438"));				
	Инициатор = ПараметрыСеанса.ТекущийПользователь;
	
	Задача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
	Задача.Дата = ТекущаяДата();
	Задача.Постановщик = ЕгорМалышев;
	Задача.Наименование = "Согласование резерва Для Интернет-магазина";
	Задача.Исполнитель = ЕгорМалышев;
	Задача.Описание = "Согласование резерва Для интернет-магазина." + символы.пс 
	+ "Ответственный менеджер: " + Инициатор.Наименование + символы.пс
	+ "Контрагент " + Контрагент.НаименованиеПолное + Символы.ПС
	+ "По Договору " + ДоговорКонтрагента + Символы.ПС
	+ "№ Заказа " + Номер + Символы.ПС; 
	
	Задача.Объект = Ссылка;
	Задача.Инициатор = Инициатор;
	Задача.НаСогласование = Истина;
	Задача.РеквизитДляСогласования = "Проверен";
	Задача.ЗначениеРеквизитаДляСогласования = ДатаОплаты;
	Задача.СрокОповещения = Задача.Дата;
	Задача.Оповещение = Истина;
	Задача.Записать(); 
	
	Сообщить("Создана заявка на согласование Для пользователя: "+строка(ЕгорМалышев)+". Только после согласования заказ будет [v]""К отгрузке"".");
	
	ЗадачаСоздана = Истина;
	
КонецПроцедуры

Процедура ТоварыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗаказа = 12 и ВыбранноеЗначение.ВидТовара <> Перечисления.ВидыТоваров.РекламнаяПродукция Тогда
		СтандартнаяОбработка = Ложь;
		Сообщить("В заказ по рекламной продукции нельзя добавлять обычный товар!!!");
	КонецЕсли;
КонецПроцедуры

Процедура ДействияФормыЗаказНаРекламнуюПродукцию(Кнопка)
	Если ЭтоНовый() и ТипЗаказа <> 12 Тогда
		Ответ = Вопрос("При смене вида операции на Рекламный заказ вся табличная часть товаров будет очищена!!!", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Проверен = Ложь;
			Товары.Очистить();
		    ТипЗаказа = 12;
			Проверен = Ложь;
			//ЭлементыФормы.Проверен.Доступность = Ложь;
		КонецЕсли;
	ИначеЕсли не ЭтоНовый() Тогда
		Сообщить("Нельзя переделывать обычный заказ в рекламный!!!");
	КонецЕсли;
КонецПроцедуры

Процедура ДействияФормыНаСогласование(Кнопка)
	Если ЭтоНовый() Тогда
		Сообщить("Сначала нужно записать документ!!!");
	Иначе
	ЗадачаСоздана = Ложь;
	
	Если Проверен Тогда 
		Возврат;
	КонецЕсли;
	
	Лаврова = Справочники.Пользователи.НайтиПоКоду("Лаврова");				
	Инициатор = ПараметрыСеанса.ТекущийПользователь;
	
	Задача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
	Задача.Дата = ТекущаяДата();
	Задача.Постановщик = Лаврова;
	Задача.Наименование = "Согласование РЕКЛАМНОЙ продукции";
	Задача.Исполнитель = Лаврова;
	Задача.Описание = "Согласование РЕКЛАМНОЙ продукции." + символы.пс 
	+ "Ответственный менеджер: " + Инициатор.Наименование + символы.пс
	+ "Контрагент " + Контрагент.НаименованиеПолное + Символы.ПС
	+ "№ Заказа " + Номер + Символы.ПС+Символы.ПС+Символы.ПС; 
	
	Для каждого стр из Товары Цикл
		//добавляем в задачу - строка Для утверждения  строки1[i]
		стрЗадачи = Задача.Товары.Добавить();
		ЗаполнитьЗначенияСвойств( стрЗадачи, стр );
	КонецЦикла;	
	
	Задача.Объект = Ссылка;
	Задача.Инициатор = Инициатор;
	Задача.НаСогласование = Истина;
	//Задача.РеквизитДляСогласования = "Проверен";
	//Задача.ЗначениеРеквизитаДляСогласования = ЛОЖЬ;
	Задача.СрокОповещения = Задача.Дата;
	Задача.Оповещение = Истина;
	Задача.Записать(); 
	
	Сообщить("Создана заявка на согласование Для пользователя: "+строка(Лаврова)+". Только после согласования заказ будет [v]""К отгрузке"".");
	
	ЗадачаСоздана = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ДействияФормыОтправитьВДПД(Кнопка)
	Если TerminalОтгрузкаТранспортнойКомпанией Тогда
		Если Проверен и проведен Тогда	
			Если ТранспортнаяКомпания = Справочники.Контрагенты.НайтиПоКоду("94121") Тогда
				РаботасDPD.ОформитьЗаявкуВDPD(ссылка);
				ЗаписатьРегистрСтатусов(Ссылка,Ссылка, Перечисления.СостояниеЗаказовИМ.Создан);
			ИначеЕсли ТранспортнаяКомпания = Справочники.Контрагенты.НайтиПоКоду("94346") Тогда //Подорожник
				РаботасDPD.ОформитьЗаявкуВПодорожник(ссылка);
			КонецЕсли;
		Иначе
			Сообщить("Заявку можно создавать только на проделенный заказ!");
		КонецЕсли;
	ИначеЕсли ИМСклиентомСогласовано Тогда
		Если Проверен Тогда	
			Если ТранспортнаяКомпания = Справочники.Контрагенты.НайтиПоКоду("94121") Тогда
				РаботасDPD.ОформитьЗаявкуВDPD(ссылка);
			ИначеЕсли ТранспортнаяКомпания = Справочники.Контрагенты.НайтиПоКоду("94346") Тогда //Подорожник
				РаботасDPD.ОформитьЗаявкуВПодорожник(ссылка);
			КонецЕсли;
		Иначе
			Сообщить("Заявку можно создавать только на проделенный заказ!");
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура ПередатьВТКПриИзменении(Элемент)
	Если ПередатьВТК Тогда
		Если не значениеЗаполнено(ТранспортнаяКомпания) Тогда
			Сообщить("Укажите транспортную компанию!");	
		ИначеЕсли не значениеЗаполнено(НомерЗаказаТК) Тогда
			Сообщить("Укажите номер заказа в транспортной компании!");	
		Иначе
			Ответ = Вопрос("После установки этого признака менять заказ не рекомендуется! Иначе в реестр Для Транспорной компании попадут не правильные данные. Продолжить?", РежимДиалогаВопрос.ДаНет, 0);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				//заполним данные Для реестра
				стр = РеквизитыЗаказаТК.Добавить();
				стр.Поле ="Номер заказа перевозчика"; 
				стр.Значение = НомерЗаказаТК;
				стр = РеквизитыЗаказаТК.Добавить();
				стр.Поле ="Услуга"; 
				стр.Значение = "PCL";
				стр = РеквизитыЗаказаТК.Добавить();
				стр.Поле = "Сумма товаров";
				стр.Значение = ?(СуммаВключаетНДС,Товары.Итог("Сумма"),Товары.Итог("Сумма")+Товары.Итог("СуммаНДС")); 
				стр = РеквизитыЗаказаТК.Добавить();
				стр.Поле = "Сумма услуг";
				стр.Значение = ?(СуммаВключаетНДС,Услуги.Итог("Сумма"),Услуги.Итог("Сумма")+Услуги.Итог("СуммаНДС")); 
				стр = РеквизитыЗаказаТК.Добавить();
				стр.Поле ="Объявленная ценность";
				стр.Значение = ?(СуммаВключаетНДС,Товары.Итог("Сумма"),Товары.Итог("Сумма")+Товары.Итог("СуммаНДС"))+?(СуммаВключаетНДС,Услуги.Итог("Сумма"),Услуги.Итог("Сумма")+Услуги.Итог("СуммаНДС")); 
				стр = РеквизитыЗаказаТК.Добавить();
				стр.Поле ="Грузополучатель"; 
				стр.Значение = ?(ЗначениеЗаполнено(Грузополучатель),Грузополучатель.НаименованиеПолное,контрагент.НаименованиеПолное);
				стр = РеквизитыЗаказаТК.Добавить();
				стр.Поле = "Покупатель";
				стр.Значение = контрагент.НаименованиеПолное;
				стр = РеквизитыЗаказаТК.Добавить();
				стр.Поле = "Вариант доставки";
				Если подразделение.ОбособленноеПодразделение Тогда
					стр.Значение = "TD";
				Иначе	
					стр.Значение = "DD";
				КонецЕсли;
				//стр = РеквизитыЗаказаТК.Добавить();
				//стр.Поле = "Город доставки";
				//стр.Значение = 
				стр = РеквизитыЗаказаТК.Добавить();
				стр.Поле = "Адрес покупателя";
				Если ЗначениеЗаполнено(АдресДоставки)Тогда
					стр.Значение = АдресДоставки;
					стр = РеквизитыЗаказаТК.Добавить();
					стр.Поле = "Город доставки";
					стр.Значение = "";
					Сообщить("Заполните город доставки");
				Иначе
					Отбор = Новый Структура;
					Отбор.Вставить("Объект",Контрагент);
					Отбор.Вставить("Тип",перечисления.ТипыКонтактнойИнформации.Адрес);
					Отбор.Вставить("Вид",Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00021"));
					НужныйАдрес = регистрыСведений.КонтактнаяИнформация.Получить(Отбор);
					стр.Значение = Нужныйадрес.Представление; 
					стр = РеквизитыЗаказаТК.Добавить();
					стр.Поле = "Город доставки";
					стр.Значение = НужныйАдрес.Поле4;
				КонецЕсли;
				Составпосылки = РаботаСDPD.ПолучитьСоставПосылки(ссылка,"");
				МассивТоваров=СоставПосылки.СоставТЗ;
                Префикс = "YST";
				СоответствиеПоставщиковКодДпд = РаботаСDPD.ЗаполнитьСоответствиеПоставщиков();
				Если Контрагент = Справочники.Контрагенты.НайтиПоКоду("П001549") тогда //шинтрейд документы не надо
					Если Найти(СоставПосылки.Состав,"Комплект документов")>0 тогда
						СоставПосылки.Состав         = СтрЗаменить(СоставПосылки.Состав,"Комплект документов","");
						СоставПосылки.КоличествоМест = СоставПосылки.КоличествоМест - 1;
					КонецЕсли;
				КонецЕсли;
				
				стр = РеквизитыЗаказаТК.Добавить();
				стр.Поле ="Содержимое"; 
				стр.Значение = СоставПосылки.Состав;
				
				стр = РеквизитыЗаказаТК.Добавить();
				стр.Поле = "Количество мест"; 
				стр.Значение = СоставПосылки.КоличествоМест;
				
				стр = РеквизитыЗаказаТК.Добавить();
				стр.Поле ="Фактический вес"; 
				стр.Значение = Товары.Итог("Вес");
				//ШК
				
				МассивПакеты=МассивТоваров.Скопировать();
				МассивПакеты.очистить();
				МассивАксы = МассивПакеты.Скопировать();
				МассивКрепеж = МассивПакеты.Скопировать();
				МассивОтдельныеПосылки = МассивПакеты.Скопировать();
				МассивДокументы = МассивПакеты.Скопировать();
				
				Для каждого стр из МассивТоваров Цикл
					Если СокрЛП(стр.Номенклатура.Код)="9178010" тогда //пакеты
						нстр = МассивПакеты.Добавить();
						ЗаполнитьЗначенияСвойств(нстр,стр);
					ИначеЕсли стр.ВидНоменклатуры=Перечисления.ВидыТоваров.Аксессуары тогда //акс
						нстр = МассивАксы.Добавить();
						ЗаполнитьЗначенияСвойств(нстр,стр);
					иначеЕсли стр.ВидНоменклатуры=Перечисления.ВидыТоваров.Прочее тогда //крепеж
						нстр = МассивКрепеж.Добавить();
						ЗаполнитьЗначенияСвойств(нстр,стр);
					иначе	 
						нстр = МассивОтдельныеПосылки.Добавить();
						ЗаполнитьЗначенияСвойств(нстр,стр);
					КонецЕсли;
				КонецЦикла;
				
				СоставШК="";
				//массив посылок шины/диски
				Для каждого стр из МассивОтдельныеПосылки Цикл
					кол=1;
					Пока кол<=стр.Количество цикл
						ШК=ВРЕГ(Префикс+глТранслит(Номер)+"V"+СоответствиеПоставщиковКодДпд.Получить(Подразделение)+"V"+глТранслит(СокрЛП(стр.Номенклатура.Код))+"V"+кол);
						кол=кол+1;
						СоставШК=СоставШК+ШК+";";
					КонецЦикла
				КонецЦикла;
				
				Для каждого стр из МассивПакеты Цикл
						ШК=ВРЕГ(Префикс+глТранслит(Номер)+"V"+СоответствиеПоставщиковКодДпд.Получить(Подразделение)+"V"+глТранслит(СокрЛП(стр.Номенклатура.Код))+"V"+1);
						СоставШК=СоставШК+ШК+";";
				КонецЦикла;	
				
				//аксы

				Если МассивАксы.Количество()>0 тогда
					ШК=ВРЕГ(Префикс+глТранслит(Номер)+"V"+СоответствиеПоставщиковКодДпд.Получить(Подразделение)+"V"+(СокрЛП("AKS"))+"V"+1);
					СоставШК=СоставШК+ШК+";";
				КонецЕсли;
				//аксы
				
				//Крепеж
				Если МассивКрепеж.Количество()>0 тогда
					ШК=ВРЕГ(Префикс+глТранслит(Номер)+"V"+СоответствиеПоставщиковКодДпд.Получить(Подразделение)+"V"+(СокрЛП("KRP"))+"V"+1);
					СоставШК=СоставШК+ШК+";";
				КонецЕсли;
				
				//стр = РеквизитыЗаказаТК.Добавить();
				//стр.Поле = "ШК"; 
				//стр.Значение = СоставШК;
				
				РаботаСDPD.ОбновитьРеквизитТК(РеквизитыЗаказаТК,"ШК", СоставШК);
				ЗаписатьРегистрСтатусов(ЭтотОбъект.Ссылка,ЭтотОбъект.Ссылка, Перечисления.СостояниеЗаказовИМ.Создан);
			Иначе ПередатьВТК = ложь;	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОшиповкаПриИзменении(Элемент)
	Отказ = Ложь;
		
	Если Ошиповка Тогда
		Если ЭтоНовый() Тогда
			# Если Клиент Тогда
				Сообщить("Перед установкой галки Ошиповка необходимо записать заказ");
			#КонецЕсли	
			Отказ =Истина;
		КонецЕсли;
		Если ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
			# Если Клиент Тогда
				Сообщить("Необходимо заполнить договор контрагента");
			#КонецЕсли	
			Отказ =Истина;
		КонецЕсли;
		
		Если Товары.Количество() = 0 Тогда
			Отказ = Истина;
			# Если Клиент Тогда
			Сообщить("Необходимо заполнить товар", СтатусСообщения.Важное);
			#КонецЕсли	
		КонецЕсли;
	

		
		Если Контрагент.ПринадлежитЭлементу(Справочники.Контрагенты.ПотенциальныеПокупатели) Тогда
			#Если Клиент Тогда
				Сообщить("Контрагент: "+строка(Контрагент)+" - находится в Потенциальных покупателях! Отгрузка невозможна!", СтатусСообщения.Внимание);
			#КонецЕсли
			Отказ = истина;
		Иначе
			//    	ПроверитьПревышениеОбщегоЛимитаДЗСУчетомЗаказа(списокЗаказов, отказ1, Заказ1.ЗаказПокупателя.Контрагент, Дата);   //*** 2015.09.17 передается Дата
			ПроверитьПревышениеОбщегоЛимитаДЗСУчетомЗаказа(Ссылка, Отказ, Контрагент);   //*** 12.10.2015 НЕ нужна дата!!!
			
			
			//==========ПРОВЕРКА ПРИ ЛЮБОЙ ЗАПИСИ!================
			максДата = макс(Дата, ДатаОтгрузки);
 			//Миронычев
			Если ДоговорКонтрагента.ТипДоговора <> Справочники.ТипыДоговоров.ПредоплатаПоСчетам Тогда
       			ПроверитьДоговорВЗаказеПокупателя(ЭтотОбъект, Отказ, Истина, максДата); //+++  12-21.09.2016 ЗАПРЕТ!
			КонецЕсли;
			//КонецМиронычев

			Если ОтгрузкаСПодразделенияСклада Тогда
				# Если Клиент Тогда
					
					Предупреждение("Нельзя ставить Заказ "+Номер+" - на отгрузку из Ярославля!
					|Этот заказ уже предназначен [v] Для отгрузки со склада филиала:
					|"+сокрЛП(Склад.Подразделение.Наименование)+" !",30);
				#КонецЕсли			   
				Отказ = истина;
			КонецЕсли;		
			
		КонецЕсли;
		
		// Проверим весь ли товар Шины
		Для каждого СтрТовар из Товары Цикл
			Если СтрТовар.Номенклатура.ВидТовара <> Перечисления.ВидыТоваров.Шины Тогда
				Отказ = Истина;
				# Если Клиент Тогда
                Сообщить(" Товар " +  СтрТовар.Номенклатура.Наименование + " не является шиной", СтатусСообщения.Важное);
				#КонецЕсли	
			КонецЕсли;
		КонецЦикла;
		// Проверим весь ли товар Шины

			
		
		Если Отказ Тогда 
			Ошиповка = Ложь;
			Возврат; 
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

//16.01 - 26.01.2017 // АВТОПЕРЕСЧЕТ ЦЕН !
Процедура СамовывозПриИзменении(Элемент) 
	//Если Константы.ЦенообразованиеПоКатегориям.Получить() 
	//  	И Подразделение.ОбособленноеПодразделение Тогда   //13.02.2017
	//		НеУчитыватьТрКлиента = Самовывоз; // при самовывозе - не учитывается тр. наценка доставки до клиента
	//		КоманднаяПанельТоварыЦенаКонтрагента(неопределено);
	//КонецЕсли;
	
	//+++ обратное изменение
	Если Самовывоз тогда
		СпособОтгрузки = справочники.СпособыОтгрузкиТовара.НайтиПоКоду(10);  //автомобильным транспортом силами Покупателя за счет Покупателя
	Иначе
		СпособОтгрузки = справочники.СпособыОтгрузкиТовара.НайтиПоКоду(6);   //автомобильным транспортом силами Поставщика за счет Поставщика
	КонецЕсли;
	
КонецПроцедуры

//16.01.2016
Процедура НеУчитыватьТрКлиентаПриИзменении(Элемент)
	Если подразделение.ОбособленноеПодразделение Тогда   //13.02.2017
		КоманднаяПанельТоварыЦенаКонтрагента(неопределено);
	КонецЕсли;
КонецПроцедуры

Процедура Кнопка7Нажатие(Элемент)
	//Согласование, Плотников 24.03.2017 ----------------------------------------------------------------
	Отбор = Новый Структура;
	Отбор.Вставить("Бонус",Ложь);
	
	Строки = Бонусы.НайтиСтроки(Отбор);
	
	Если ЭтоНовый() Тогда
		
		Сообщить("Для отправки на согласование требуется записать документ!!!");
		
	Иначе	
		
		Если Строки.Количество()>0 и Не СогласованаТребованиеНакладная Тогда
			
			ОтправитьНаСогласованиеПодарки();
			
			Сообщить(">>> Создано задание на согласование Для Малышева Егора!!!");
			
		Иначе
			
			Сообщить("Документ не требует согласования!!!");
			
		КонецЕсли;
		
	КонецЕсли;
	//Согласование --------------------------------------------------------------------------------------

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	//06.04.2017 - даёт записать... но не даёт провести! 
	// сразу требует разделить заказ!
	// Если не делить - провести невозможно!
	//
	Если ТаблПоставщиков<>неопределено Тогда
		Если ТаблПоставщиков.Количество()>0  // Есть товары под заказ (стороннему поставщику)
		и Статус<>перечисления.СтатусыЗаказов.Доставлен Тогда
		ТаблПоставщиков1=ТаблПоставщиков.скопировать();
			ТаблПоставщиков1.Свернуть("Поставщик");
			флКол = ( ТаблПоставщиков.Итог("Количество")<>Товары.Итог("Количество") );
			Если ТаблПоставщиков1.Количество()>1 или флКол Тогда
				ДействияФормыРазбитьПоНаличию(неопределено);
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли; 
	
	//Миронычев
	Если ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ПредоплатаПоСчетам Тогда
		Если Не ЗначениеЗаполнено(ДатаОплаты) Тогда
			Сообщить("Заполните Обязательное поле "" Дата оплаты "" Для данного Договора", СтатусСообщения.Внимание);
			Отказ = Истина;
			Возврат;
		КонецЕсли;	
		Если Не ЗначениеЗаполнено(АдресДляТТН) Тогда
			Сообщить("Заполните Обязательное поле "" Адрес Для ТТН "" Для данного Договора", СтатусСообщения.Внимание);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СпособОтгрузки) Тогда
			Сообщить("Заполните Обязательное поле "" Способ отгрузки "" Для данного Договора", СтатусСообщения.Внимание);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//КонецМиронычев

КонецПроцедуры

Процедура БонусыПередНачаломДобавления(Элемент, Отказ, Копирование)
	набор = РегистрыСведений.КатегорииОбъектов.СоздатьНаборЗаписей();
	набор.Отбор.объект.установить(Ссылка);
	набор.Прочитать();
	Если набор.Количество() > 0 Тогда
		отказ = истина;	
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанельКрышкиПодборКрышек(Кнопка)
	
	//Если НЕ ЭтоНовый() Тогда
		Обр = Обработки.ПодборКрышек.Создать();
		//Обр.ДокСсылка = Ссылка;
		Мас = Товары.ВыгрузитьКолонку("Номенклатура");
		Спис = Новый СписокЗначений;
		Спис.ЗагрузитьЗначения(Мас);
		Обр.СписокНоменклатуры = Спис;
		Фрм = Обр.ПолучитьФорму("Форма", ЭлементыФормы.Крышки);
		Фрм.Открыть();
	//Иначе
	//	Предупреждение("Запишите документ и повторите попытку", 20);
	//КонецЕсли;
	
КонецПроцедуры

Процедура КрышкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ТаблицаЗначений") Тогда
		Для Каждого ТекСтр Из ВыбранноеЗначение Цикл
			СтрЭтаНоменкл = Крышки.Найти(ТекСтр.Номенклатура, "Крышка");
			Если СтрЭтаНоменкл = Неопределено Тогда
				СтрДанные = Крышки.Добавить();
				СтрДанные.Крышка     = ТекСтр.Номенклатура;
				СтрДанные.Количество = ТекСтр.Количество;
			Иначе
				СтрДанные            = СтрЭтаНоменкл;
				СтрДанные.Количество = СтрДанные.Количество + ТекСтр.Количество;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура КрышкиПоказатьКод_КодСБИС(ЯчейкиСтрокиТабПоля, Номенклатура)
	
	Если Номенклатура <> Неопределено Тогда
		ЯчейкиСтрокиТабПоля.Код.УстановитьТекст(Номенклатура.Код);
		ЯчейкиСтрокиТабПоля.КодСБИС.УстановитьТекст(Номенклатура.КодСБИС);
	Иначе
		ЯчейкиСтрокиТабПоля.Код.УстановитьТекст("");
		ЯчейкиСтрокиТабПоля.КодСБИС.УстановитьТекст("");
	КонецЕсли;
	
КонецПроцедуры // КрышкиПоказатьКод_КодСБИС()

Процедура КрышкиПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки из ОформленияСтрок Цикл
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		КрышкиПоказатьКод_КодСБИС(ОформлениеСтроки.Ячейки, ДанныеСтроки.Крышка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриВыбореТовараПроверитьКодТНВЭД(Номенклатура)
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) И ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль Тогда
		Если ЗначениеЗаполнено(Номенклатура) И НЕ ЗначениеЗаполнено(Номенклатура.КодТНВЭД) Тогда
			Предупреждение("У выбранного товара не указан код ТНВЭД, реализация не будет создана!", 20);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореТовараПроверитьКодТНВЭД()

//Миронычев
Процедура ВопросВводаНаОснованииСчета() 
	
	Если ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ПредоплатаПоСчетам Тогда
		Если не ПроверимНаличиеИСоответствиеСчетаНаОплату(ЭтотОбъект.Ссылка) Тогда	
		//"ПредложитьВвести новый счет"
			Если Вопрос("Данные в заказе № "+Номер+" изменились, Ввести новый документ ""Счет на оплату""?",РежимДиалогаВопрос.ДаНет, 30)=КодВозвратаДиалога.Да Тогда
				
				НовыйДокумент = Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
				НовыйДокумент.Заполнить(ЭтотОбъект.Ссылка);
				НовыйДокумент.ПолучитьФорму("ФормаДокумента").Открыть();
			КонецЕсли;
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры
//КонецМиронычев

//***2017.08.30 (задача №30616)
Процедура ДействияФормыСформироватьЗаказПоставщику(Кнопка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПокупателяТовары.Номенклатура,
	               |	ЗаказПокупателяТовары.Номенклатура.ОсновнойПоставщик КАК ОсновнойПоставщик,
	               |	ЗаказПокупателяТовары.Количество
	               |ИЗ
	               |	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	               |ГДЕ
	               |	ЗаказПокупателяТовары.Ссылка = &Ссылка";
	Результат = Запрос.Выполнить();
	ТаблицаЗаказа = Результат.Выгрузить();
	ТаблицаПоставщиков = ТаблицаЗаказа.Скопировать();
	ТаблицаПоставщиков.Свернуть("ОсновнойПоставщик");
	
	Для каждого СтрПоставщиков ИЗ ТаблицаПоставщиков Цикл
		ЗаказПоставщику							 = Документы.ЗаказПоставщику.СоздатьДокумент();
		ЗаказПоставщику.Дата					 = ТекущаяДата();
		ЗаказПоставщику.Организация				 = Справочники.Организации.НайтиПоКоду("00001");
		ЗаказПоставщику.Контрагент				 = СтрПоставщиков.ОсновнойПоставщик;
		ЗаказПоставщику.ВалютаДокумента			 = Справочники.Валюты.НайтиПоКоду("643");
		ЗаказПоставщику.КурсВзаиморасчетов		 = 1;
		ЗаказПоставщику.КратностьВзаиморасчетов	 = 1;
		ЗаказПоставщику.ДоговорКонтрагента		 = ?(СтрПоставщиков.ОсновнойПоставщик.ОсновнойДоговорПоставки.Пустая(), СтрПоставщиков.ОсновнойПоставщик.ОсновнойДоговорКонтрагента, СтрПоставщиков.ОсновнойПоставщик.ОсновнойДоговорПоставки);
		ЗаказПоставщику.Склад					 = Справочники.Склады.НайтиПоНаименованию("1");
		ЗаказПоставщику.УчитыватьНДС			 = Истина;
		ЗаказПоставщику.СуммаВключаетНДС		 = Истина;
		
		Отбор = Новый Структура();
		Отбор.Вставить("ОсновнойПоставщик", СтрПоставщиков.ОсновнойПоставщик);
		Строки = ТаблицаЗаказа.НайтиСтроки(Отбор);
		Для каждого СтрМассива ИЗ Строки Цикл
			СтрТовар = ЗаказПоставщику.Товары.Добавить();
			СтрТовар.Номенклатура = СтрМассива.Номенклатура;
			СтрТовар.Количество = СтрМассива.Количество;
			СтрТовар.Коэффициент = 1;
			ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрТовар, ЗаказПоставщику, Константы.ВалютаРегламентированногоУчета.Получить());
			СтрТовар.Цена = 0; 
			ЗаполнитьСтавкуНДСТабЧасти(СтрТовар, ЗаказПоставщику);
			РассчитатьСуммуТабЧасти(СтрТовар, ЗаказПоставщику);
			РассчитатьСуммуНДСТабЧасти(СтрТовар, ЗаказПоставщику);
		КонецЦикла;
		Если ЗаказПоставщику.Товары.Количество() > 0 Тогда
			ЗаказПоставщику.ПолучитьФорму().Открыть();
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура кнЗаполнитьРеквизитыДляТКНажатие(Элемент)
	ФормаАдресаДоставки = ПолучитьФорму("ФормаВводаИнформацииОДоставкеТК");
	ФормаАдресаДоставки.Владелец = ЭтотОбъект;
	ФормаАдресаДоставки.ОткрытьМодально();
КонецПроцедуры

Процедура кнРассчитатьСтоимостьДоставкиДПДНажатие(Элемент)
	СтоимостьДоставки = работасDPD.ПолучитьСтоимостьДоставкиЗаказаПоТарифу(ЭтотОбъект);
КонецПроцедуры

Процедура ОбработкаНажатияКнопки(Кнопка) Экспорт
	Если Кнопка.Имя = "ОткрытьРеализацию" Тогда
		Документы.РеализацияТоваровУслуг.НайтиПоРеквизиту("Сделка", ЭтотОбъект.Ссылка).ПолучитьФорму().Открыть();
	ИначеЕсли Кнопка.Имя = "ОткрытьМаршрутныйЛист" Тогда
		ЗапросЗаданиеНО = Новый Запрос;
		ЗапросЗаданиеНО.Текст = 
		"ВЫБРАТЬ
		|	ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка
		|ИЗ
		|	Документ.ЗаданиеНаОтгрузку.ЗаказыПокупателей КАК ЗаданиеНаОтгрузкуЗаказыПокупателей
		|ГДЕ
		|	ЗаданиеНаОтгрузкуЗаказыПокупателей.ЗаказПокупателя = &ЗаказПокупателя
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка";
		ЗапросЗаданиеНО.УстановитьПараметр("ЗаказПокупателя", ЭтотОбъект.Ссылка);
		ЗаданиеНаОтгрузку = ?(ЗапросЗаданиеНО.Выполнить().Выгрузить().Количество()>0,ЗапросЗаданиеНО.Выполнить().Выгрузить()[0].Ссылка, неопределено);
		
		ОбъектВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.НайтиПоНаименованию("Маршрутный лист (ТЕСТ)").ПолучитьОбъект();
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		
		ИмяФайла = КаталогВременныхФайлов()+"MarshList.tmp";
		ДвоичныеДанные.Записать(ИмяФайла);
		
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = ЗаданиеНаОтгрузку;
		ТабличныйДокументОбъект  = Обработка.Печать();
		ТабличныйДокументОбъект.Показать();
		
	Иначе
	КонецЕсли;
КонецПроцедуры

//============================ Проверки ================================
Процедура СделатьПроверкиПередУстановкойВМаршрут(Отказ)
	
	обДок = ЭтотОбъект;		//проверки из обработки
	
	//+++( 22.03.2018  по задаче № 43080 
	Если обДок.Самовывоз и не обДок.Контрагент.Экспорт тогда //27.03.2018 экспортные - можно...
		Предупреждение("В Заказе установлен [v]Самовывоз! Установка в Маршрут - запрещена!",30);
		Отказ = Истина;
        Возврат;
	КонецЕсли;	
	Если обДок.ОтгрузкаСПодразделенияСклада 
		и обДок.Склад.Подразделение <> обДок.Подразделение тогда 
		Предупреждение("В Заказе установлена [v]Отгрузка с Подразделения Склада ("+строка(обДок.Склад)+")! Установка в Маршрут - запрещена!",30);
		Отказ = Истина;
        Возврат;
	КонецЕсли;		
	//+++)
	
	//+++ 10.10.2017  по задаче № 34344
	Если обДок.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль тогда
		НетТНВЭД = ЛОЖЬ;	
		для каждого стр1 из Товары цикл
			Если НЕ ЗначениеЗаполнено(стр1.КодТНВЭД) тогда
				НетТНВЭД = Истина;
				Сообщить("В строке № "+строка(стр1.НомерСтроки)+" для товара: "+строка(стр1.Номенклатура.Код)+" - не указан Код ТНВЭД! Установка в Маршрут - запрещена!", СтатусСообщения.Внимание);
			КонецЕсли;	
		КонецЦикла;
		Если НетТНВЭД тогда
			Отказ = Истина;
		    Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	
	//+++ 10.10.2017 - авто-определение адреса	
	Если СокрЛП(АдресДоставки)="" тогда // попробуем его заполнить...
		стрАдрес = ПолучитьСтруктуруАдреса(обДок); //Структура("Вид, Адрес, Регион, Город, Улица, Дом, Координаты"
		Если  стрАдрес.Адрес="" тогда
			Сообщить("НЕ установлен и не удалось автоматически определить 'Адрес доставки' на закладке 'Дополнительно'!", СтатусСообщения.Внимание);
			Отказ=Истина;
		    Возврат;
		Иначе
			ЭтотОбъект.АдресДоставки = стрАдрес.Адрес;
			Если ЭтотОбъект.ВидАдреса.Пустая()
				и ТипЗнч( стрАдрес.Вид) = тип("СправочникСсылка.ВидыКонтактнойИнформации") тогда
				ЭтотОбъект.ВидАдреса = стрАдрес.Вид;
			КонецЕсли;
			Сообщить("Автоматически установлен 'Адрес доставки': "+ЭтотОбъект.АдресДоставки);
		КонецЕсли;	
    КонецЕсли;
	
	//+++ 10.10.2017 - авто-определение адреса ТТН	
	Если СокрЛП(АдресДляТТН)="" тогда
		Если НЕ ЭтотОбъект.ВидАдреса.Пустая() тогда
			АдресДляТТН = ПолучитьПредставлениеПоВидуАдреса(ЭтотОбъект); //яштПрочее
			Сообщить("Автоматически установлен 'Адрес для ТТН': "+ЭтотОбъект.АдресДляТТН);
		Иначе
			Сообщить("НЕ установлен и не удалось автоматически определить 'Адрес для ТТН' на закладке 'Дополнительно'!", СтатусСообщения.Внимание);
			Отказ=Истина;
		    Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
//------------Запишем новые адреса--------------------------	
	Если НЕ Отказ И ЭтаФорма.Модифицированность Тогда
		Предупреждение("Перед установкой категорий - документ будет перезаписан!", 10);
		ЭтаФорма.ЗаписатьВФорме();
	КонецЕсли;	
	
//===================================================================================================================================	
//22.03.2018 --- УЖЕ ДАВНО МОЖНО делать маршруту на всех филиалах!!!
	//Если  Подразделение.ОбособленноеПодразделение и не Подразделение = Справочники.Подразделения.НайтиПоКоду("00112") тогда 
	//	Предупреждение("Выберите значение свойства ""Направлений отгрузки (филиал)""
	//				   |     Маршруты - используются только в Ярославле!", 30);
	//	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);
	//	Отказ = истина;
	//КонецЕсли;
	
	Если не (ЭтотОбъект.Проверен 
		
		//+++ 27.03.2018 - исключение для заказов филиалов, которые едут с Ярославля
			или (ЭтотОбъект.Подразделение.ОбособленноеПодразделение
		   		 и Найти(ЭтотОбъект.Комментарий,"Перемещение из Ярославля >>")>0 
				 )
		    )  Тогда
		Предупреждение("НЕЛЬЗЯ ставить ""К отгрузке"" Заказ, которые НЕ В резерве!", 30);
		Отказ = истина;
	КонецЕсли;
	
	Если этотОбъект.Резерв или этотОбъект.ДатаОтгрузки='00010101' Тогда 
		Предупреждение("Нельзя отгружать Заказ без Даты отгрузки! Заказ ""Резервный""!", 10);
        Отказ = истина;//01.12.2016 запрет!
	КонецЕсли;

	//01.12.2016 запрет отгрузки!
	Если не (ЭтотОбъект.Статус.Пустая()
		     или ЭтотОбъект.Статус = перечисления.СтатусыЗаказов.Получен
			 или ЭтотОбъект.Статус = перечисления.СтатусыЗаказов.ПолученЧастично) Тогда  // частично получен... частично отгружается...
			 
		 Если ЭтотОбъект.Статус = перечисления.СтатусыЗаказов.Доставлен тогда//Доставлен клиенту?!
         Предупреждение("   Заказ уже ДОСТАВЛЕН клиенту !
				   |Нельзя повторно ставить на отгрузку уже отгруженный заказ!", 30);
		 Иначе		   
		 Предупреждение("Нельзя отгружать Заказ со статусом  '"+строка(ЭтотОбъект.Статус)+"'
				   |Заказ ожидает поступления товаров от поставщиков!", 30);
		 КонецЕсли;  
        Отказ=Истина;
	КонецЕсли;
	
	//Миронычев
	Если ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ПредоплатаПоСчетам Тогда//+++14.08.2017
			Если не ПроверимНаличиеИСоответствиеСчетаНаОплату(ЭтотОбъект.Ссылка) Тогда	
			Предупреждение("Нельзя выставлять категорию Если документ ""Счет на оплату"" не соответствует заказу!", 10);
			Отказ = истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДатаОплаты) Тогда
			Предупреждение("Укажите Дату оплаты!", 10);
			Отказ = истина;
		КонецЕсли;
		//Миронычев проверка заполненного адреса ТТН

		Если Не ЗначениеЗаполнено(АдресДляТТН) Тогда
			Отказ = Истина;
			Предупреждение("Заполните Обязательное поле "" Адрес Для ТТН "" Для данного Договора");
		КонецЕсли;
	
		Если ДатаОплаты > ДатаОтгрузки Тогда
			Предупреждение("Нельзя по договору ""Предоплата по счетам"" устанавливать ""Дату Оплаты"" позже ""Даты отгрузки""!", 10);
			Отказ = истина;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(,ДоговорКонтрагента = &ДоговорКонтрагента
		|	И Сделка = &Сделка ) КАК ВзаиморасчетыСКонтрагентамиОстатки
		|";
		
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Сделка", Ссылка);
		
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество()>0 Тогда
			Если Результат[0].СуммаВзаиморасчетовОстаток < 0 Тогда
				Если -Результат[0].СуммаВзаиморасчетовОстаток < СуммаДокумента Тогда
					Предупреждение("Нельзя по договору ""Предоплата по счетам"" ставить к отгрузке если нет 100% предоплаты!", 10);
		    		Отказ = истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Предупреждение("Нельзя по договору ""Предоплата по счетам"" ставить к отгрузке если нет 100% предоплаты!", 10);
		    Отказ = истина;
		КонецЕсли;
	КонецЕсли;
	
	
		//02.04.2015 не проделенный или Резервный заказ - можно только посчитать R13
	Если (НЕ обДок.Проверен)  или обДок.Резерв Тогда
		Отказ = Истина;
	КонецЕсли;
	
	//+++ 05.02.2016
	Если обДок.Подразделение.ОбособленноеПодразделение и не обДок.Подразделение = Справочники.Подразделения.НайтиПоКоду("00112") Тогда
		Предупреждение("Нельзя ставить на отгрузку из Ярославля - заказ "+обДок.Номер+" из филиала: "+строка( обДок.Подразделение), 10);
		Отказ = истина;
	КонецЕсли;
	
	Если обДок.ОтгрузкаСПодразделенияСклада Тогда
		Предупреждение("Нельзя ставить Заказ "+обДок.Номер+" - на отгрузку!
						|Этот заказ уже предназначен [v]Для отгрузки (через 293 обработку)
						|с подразделения склада: "+сокрЛП(обДок.Склад.Наименование)+" !",30);
		Отказ = истина;
	КонецЕсли;
		
	//Если есть не согласованая реклама, то грузить нельзя
	Если НЕ Отказ и обДок.ТипЗаказа = 12 Тогда 
		Для каждого стр из обДок.Товары Цикл
			Если стр.Статус <> Перечисления.СтатусыСтрокЗаказа.ПустаяСсылка() 
				и стр.Статус <> Перечисления.СтатусыСтрокЗаказа.Подтвержден Тогда
				Предупреждение("Внимание! Заказ на согласовании,
				|  Нельзя отгружать!!!", 30);
				Отказ = истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;				
	КонецЕсли;
	
	// Сакулина 23.11.2016
	Если обДок.ТипЗаказа = 13 Тогда
		Предупреждение("Нельзя ставить на отгрузку заказ с типом № 13 (Для ошиповки)", 10);
		Отказ = истина;
	КонецЕсли;
	
	//+++ 15.02.2017 
	Если обДок.Контрагент.ЗапретОтгрузки Тогда
		Предупреждение("Клиенту: "+строка(обДок.Контрагент)+" - ЗАПРЕЩЕНА ОТГРУЗКА!", 10);
		Отказ = истина;
	КонецЕсли;
	Если обДок.Контрагент.Родитель = справочники.Контрагенты.ПотенциальныеПокупатели Тогда
		Предупреждение("Клиент: "+строка(обДок.Контрагент)+" - находится в ""Потенциальных покупателях!""
		|Отгрузки таким клиентам - запрещены!", 10);
		Отказ = истина;
	КонецЕсли;
	
//проверка полей адреса Регион, Город, Улица, Дом, Координаты (исключая заказы Интернет-магазина и экспорт клиентов)!	
Если ДоговорКонтрагента.ОтветственноеЛицо.НаправлениеПродаж = справочники.НаправленияПродаж.НайтиПоКоду(16) или Контрагент.Экспорт тогда
	сАдрес =новый Структура("Вид, Адрес, Регион, Город, Улица, Дом, Координаты", "","","","","","",""); //15.10.2017
Иначе
	сАдрес = ПолучитьСтруктуруАдреса(обДок);
	//05.07.2017 - исключение из правил 3х городов - регионального значения
	РегионЭтоГород = (  найти(сАдрес.Регион,"Москва")>0 
					или найти(сАдрес.Регион,"Санкт-Петербург")>0 
					или найти(сАдрес.Регион,"Севастополь")>0 );
	
	//------------обработка найденной структуры полей сАдрес--------------------
	Если сАдрес.Координаты = "" Тогда
		Предупреждение("Ошибка по виду адреса '"+строка(сАдрес.Вид)+"' - не заполнено поле: 'Координаты'
		|в адресе: "+сАдрес.Адрес+"
		|Заполните все необходимые поля перед отгрузкой!", 30);
		Отказ = истина;
	ИначеЕсли сАдрес.Регион= "" Тогда
		Предупреждение("Ошибка по виду адреса '"+строка(сАдрес.Вид)+"' - не заполнено поле: 'Регион'!
		|в адресе: "+сАдрес.Адрес+"
		|Заполните все необходимые поля перед отгрузкой!", 30);
		Отказ = истина;
	ИначеЕсли сАдрес.Город= "" и не РегионЭтоГород Тогда 
		Предупреждение("Ошибка по виду адреса '"+строка(сАдрес.Вид)+"' - не заполнено поле: 'Город'!
		|в адресе: "+сАдрес.Адрес+"
		|Заполните все необходимые поля перед отгрузкой!", 30);
		Отказ = истина;
	//------------------должна быть привязка с детализацией до Улицы и Дома!----------------------------				
	ИначеЕсли сАдрес.Улица= "" Тогда
		Предупреждение("Ошибка по виду адреса '"+строка(сАдрес.Вид)+"' - не найдено поле: 'Улица'!
		|в адресе: "+сАдрес.Адрес+"
		|Заполните все необходимые поля перед отгрузкой!", 30);
		Отказ = истина;
	ИначеЕсли сАдрес.Дом= "" Тогда
		Предупреждение("Ошибка по виду адреса '"+строка(сАдрес.Вид)+"' - не найдено поле: 'Дом'!
		|в адресе: "+сАдрес.Адрес+"
		|Заполните все необходимые поля перед отгрузкой!", 30);
		Отказ = истина;
	КонецЕсли;	
КонецЕсли;

	//---- проверка необходимости согласования литых дисков с Егором---------------------
	Если НЕ Отказ тогда 
		ЛитыеДиски = Ложь;
		ЕстьДиски  = Ложь;
		ТаБдокД =  обДок.Товары.Выгрузить();
		ТабДокД.Свернуть("Номенклатура","Количество");
		массив = ТаБдокД.ВыгрузитьКолонку("Номенклатура");
		СписНом = Новый СписокЗначений;
		СписНом.ЗагрузитьЗначения(массив);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Контрагент",обДок.Контрагент);
		Запрос.УстановитьПараметр("Список",СписНом);
		Запрос.УстановитьПараметр("литые",Справочники.НоменклатурныеГруппы.НайтиПоКоду("00026"));
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаказыПокупателейОстатки.Номенклатура,
		               |	СУММА(ЗаказыПокупателейОстатки.КоличествоОстаток) КАК КоличествоОстаток
		               |ИЗ
		               |	РегистрНакопления.ЗаказыПокупателей.Остатки(,
		               |			ДоговорКонтрагента.Владелец = &Контрагент
		               |				И Номенклатура В (&Список)
		               |				И Номенклатура.НоменклатурнаяГруппа = &литые) КАК ЗаказыПокупателейОстатки
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ЗаказыПокупателейОстатки.Номенклатура";
		РезНом = Запрос.Выполнить().Выгрузить();
		
		Для каждого стрТД из РезНом Цикл
			Если стрТД.КоличествоОстаток >= 8 Тогда
				ЛитыеДиски = Истина;
				Прервать;
			КонецЕсли;
			Если стрТД.Номенклатура.ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
				ЕстьДиски = истина;
			КонецЕсли;	
		КонецЦикла;
		
		//проверяем по всем адресам
		
		ЗапросАдреса = Новый Запрос;
		ЗапросАдреса.УстановитьПараметр("об",обДок.Контрагент);
		ЗапросАдреса.УстановитьПараметр("адр",Перечисления.ТипыКонтактнойИнформации.Адрес);
		ЗапросАдреса.Текст = "ВЫБРАТЬ
		                     |	КонтактнаяИнформация.Поле2
		                     |ИЗ
		                     |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		                     |ГДЕ
		                     |	КонтактнаяИнформация.Объект = &об
		                     |	И КонтактнаяИнформация.Тип = &адр
		                     |	И (КонтактнаяИнформация.Поле2 ПОДОБНО ""%Москва%""
		                     |			ИЛИ КонтактнаяИнформация.Поле2 ПОДОБНО ""%Московск%"")";
							 
		РезАдреса = ЗапросАдреса.Выполнить().Выгрузить();
		
		Если ЛитыеДиски и РезАдреса.Количество()>0 и не обДок.РазрешитьГрузитьДиски Тогда
			Предупреждение("Согласуйте заказ у Егора Малышева!!!");
			Отказ = истина;
		КонецЕсли;
	КонецЕсли;
	
	//Подарки - Плотников
	Отбор = Новый Структура;
	Отбор.Вставить("Бонус",Ложь);
	Строки = ОбДок.Бонусы.НайтиСтроки(Отбор);
	Если Строки.Количество()>0 и не обДок.СогласованаТребованиеНакладная Тогда
		Предупреждение("Внимание! Подарки не согласованы,
		|  Нельзя отгружать!!!", 30);
		Отказ = истина;
	КонецЕсли;
	//Плотников

	//Миронычев
	Если НЕ Отказ и обДок.ДоговорКонтрагента.ТипДоговора <> Справочники.ТипыДоговоров.ПредоплатаПоСчетам Тогда
		ТекущаяДата1 = ОценкаПроизводительностиВызовСервераПолныеПрава.ДатаИВремяНаСервере();
		текДата = макс(обДок.ДатаОтгрузки, ТекущаяДата1 );
		ПроверитьДоговорВЗаказеПокупателя(обДок, Отказ, Истина, текДата ); 
	КонецЕсли;
	//КонецМиронычев
	
	
	//проверка лимита, дог.поручительства и просроченного долга > 7 дней на Дату отгрузки!
	Если НЕ ВМаршрут тогда  //только при ВКЛючении 
		
		ПроверитьПревышениеОбщегоЛимитаДЗСУчетомЗаказа(обДок, Отказ); // на текДата!
	КонецЕсли;
	
	
КонецПроцедуры //ВСЕ Проверки

Процедура ДействияФормыДобавитьВМаршрут(Кнопка)
	
	
	Если ВМаршрут=ЛОЖЬ Тогда //ВКЛючаем!
		
	ТекущаяДата1 = ОценкаПроизводительностиВызовСервераПолныеПрава.ДатаИВремяНаСервере();
	текДата = макс(ЭтотОбъект.ДатаОтгрузки, ТекущаяДата1 );  // Дата отгрузки должна быть!
	
	//=============ВСЕ Проверки в отдельной процедуре======================
	Отказ = Ложь;
	СделатьПроверкиПередУстановкойВМаршрут(Отказ);
	Если Отказ тогда
		ВОЗВРАТ;
	КонецЕсли;	
	
	    РаспределитьЗаказНаМаршрут(ссылка, текДата,,,,Подразделение);
		
		ВМаршрут = истина; //ВКЛ  в любом случае!
		
		Набор = РегистрыСведений.ЗаказыМаршруты.СоздатьНаборЗаписей();
        Набор.Отбор.ЗаказПокупателя.Установить(Ссылка);
        Набор.Прочитать();
		
		Если Набор.Количество() > 0  Тогда
			Если Набор[0].маршрут <> Справочники.НовМаршруты.ПустаяСсылка() Тогда
		        
				//+++ 06.10.2017 - ещё раз проверяем просрочку на ДатуОтгрузки!
				Если Набор[0].Дата>ДатаОтгрузки тогда
				ЭтотОбъект.ДатаОтгрузки = Набор[0].Дата; //НОВАЯ ДАТА Отгрузки!
	
				ПроверитьПревышениеОбщегоЛимитаДЗСУчетомЗаказа(ЭтотОбъект, Отказ); // на ДатуОтгрузки может измениться!
					Если Отказ тогда
						ВМаршрут = ЛОЖЬ;
						Набор.Очистить();
						Набор.Записать(); // УДАЛЯЕМ !
					КонецЕсли;
				КонецЕсли;
			
				Если ВМаршрут тогда
					Если Набор.Количество() > 1 тогда //+++ 12.10.2017
						Сообщить("ВНИМАНИЕ! Заказ попал в "+строка(Набор.Количество())+" маршрута!!!" , СтатусСообщения.Внимание);
						Для ii=0 по Набор.Количество()-1 цикл
					  		Сообщить(строка(ii+1)+") Заказ попал в маршрут " + Набор[ii].маршрут.Наименование + " на дату " + Строка(Набор[ii].Дата), СтатусСообщения.Информация);
						КонецЦикла;							
					Иначе	
					Сообщить("Заказ попал в маршрут " + Набор[0].маршрут.Наименование + " на дату " + Строка(Набор[0].Дата), СтатусСообщения.Информация);
					КонецЕсли;
				КонецЕсли;	

			Иначе 
				Сигнал();Сигнал();Сигнал();
				Предупреждение("Внимание!!! Заказ не попал ни в один маршрут!!!",30);
			КонецЕсли;
		Иначе
			 Сигнал();Сигнал();Сигнал();
			 Предупреждение("Внимание!!! Заказ не попал ни в один маршрут!!!",30);
		КонецЕсли;
		
		Если ВМаршрут тогда
			Если ЭтотОбъект.ДатаОтгрузки < НачалоДня(текДата) тогда// 12.10.2017
				ЭтотОбъект.ДатаОтгрузки = текДата;
				ПроверитьПревышениеОбщегоЛимитаДЗСУчетомЗаказа(ЭтотОбъект, Отказ); // ЕЩЁ РАЗ! ДатуОтгрузки может измениться!
				Если Отказ тогда
						ВМаршрут = ЛОЖЬ;
						Набор.Очистить();
						Набор.Записать(); // УДАЛЯЕМ !
					Сообщить("--- "+строка(ссылка)+" УБРАН из всех маршрутов!");	
				Иначе
					ЭлементыФормы.ДействияФормы.Кнопки.ДобавитьВМаршрут.Текст =  "Убрать из Маршрута";
					ЭлементыФормы.ДействияФормы.Кнопки.ДобавитьВМаршрут.Картинка = БиблиотекаКартинок.УровеньВверх;
 				КонецЕсли;
			Иначе //всё уже проверено
				ЭлементыФормы.ДействияФормы.Кнопки.ДобавитьВМаршрут.Текст =  "Убрать из Маршрута";
				ЭлементыФормы.ДействияФормы.Кнопки.ДобавитьВМаршрут.Картинка = БиблиотекаКартинок.УровеньВверх;
			КонецЕсли;
			
			Если ВМаршрут тогда
			    обЗаписатьПротоколИзменений(ЭтотОбъект, ЛОЖЬ);
			КонецЕсли;
			
			ЭтотОбъект.Записать();
			
			СделатьПроверкиПОСЛЕУстановкиВМаршрут(); //+++ 10.10.2017 по задаче № 34280
			
		КонецЕсли;
		
	Иначе //============ В маршрут - уже включено, ВЫКЛючаем! =======
			
		Набор = РегистрыСведений.ЗаказыМаршруты.СоздатьНаборЗаписей();
        Набор.Отбор.ЗаказПокупателя.Установить(Ссылка);
        Набор.Записать();
		
		ВМаршрут = Ложь;
		ЭлементыФормы.ДействияФормы.Кнопки.ДобавитьВМаршрут.Текст = "Добавить в Маршрут";//название изменяется!
		ЭлементыФормы.ДействияФормы.Кнопки.ДобавитьВМаршрут.Картинка = БиблиотекаКартинок.УровеньВниз;
		
		обЗаписатьПротоколИзменений(ЭтотОбъект, ЛОЖЬ);
		
		ЭтотОбъект.Записать();
 		Сообщить(строка(ссылка)+" снят с отгрузки по маршрутам.");

	КонецЕсли;
					
//+++ 06.10.2017 обновляем надпись по Лимитам!
	флПоказыватьЛимит =Истина;
	СформироватьНадписьЛимита(ЭлементыФормы.ИнфНадписьДолга);	
	
//12.10.2017 - НЕ НАДО перечитывать!!	ЭтаФорма.ДокументОбъект.Прочитать();  //перечитать данные

КонецПроцедуры

Процедура ОбъемАвтомобиляЧислоПриИзменении(Элемент)
	
	отбор = Новый Структура;
	отбор.Вставить("объем",Элемент.Значение);
	СтрокаОбъем = мОбъемыТЗ.НайтиСтроки(отбор);
	
	Если СтрокаОбъем.Количество()>0 Тогда
		ВесАвто = СтрокаОбъем[0].Вес;
	КонецЕсли;

	
	НачальныеКоординаты = "Ярославская обл, Ярославль г, Базовая ул, дом № 3";
	
	КонечныеКоординаты = ПеремСтрАдрес.Регион + ", " + ПеремСтрАдрес.Город + ", " + ПеремСтрАдрес.Улица + ", д " + ПеремСтрАдрес.Дом;
	
	РасстояниеПримерное = получитьМаршрут(НачальныеКоординаты,КонечныеКоординаты);
	Если РасстояниеПримерное.distance > 0 и Элемент.Значение > 0 Тогда
	    Запрос = Новый Запрос;
	    Запрос.УстановитьПараметр("Объем",ВесАвто);
	    Запрос.УстановитьПараметр("Расстояние",РасстояниеПримерное.distance);
		запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ТарифыНаПеревозкиСрезПоследних.ЗонаКилометража КАК ЗонаКилометража,
		               |	ТарифыНаПеревозкиСрезПоследних.Тоннаж КАК Тоннаж,
		               |	ТарифыНаПеревозкиСрезПоследних.ТарифЗаКм
		               |ИЗ
		               |	РегистрСведений.ТарифыНаПеревозки.СрезПоследних КАК ТарифыНаПеревозкиСрезПоследних
		               |ГДЕ
		               |	ТарифыНаПеревозкиСрезПоследних.ЗонаКилометража >= &Расстояние
		               |	И ТарифыНаПеревозкиСрезПоследних.Тоннаж >= &Объем
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ЗонаКилометража,
		               |	Тоннаж";
		Рез = Запрос.Выполнить().Выгрузить();
		
		Если Рез.Количество() > 0 Тогда
			итогОбъем = 0;
			СписокГрузШин = ПолучитьСписокГрузШин();
			Для каждого стр1 из Товары Цикл
			//+++ 11.12.2017  по задаче № 37329
			//Если стр1.номенклатура.ВидТовара = Перечисления.ВидыТоваров.Диски или стр1.номенклатура.ВидТовара = Перечисления.ВидыТоваров.Шины Тогда
			Если СписокГрузШин.НайтиПоЗначению(стр1.номенклатура.Родитель)<>неопределено тогда
					итогОбъем = итогОбъем + стр1.Количество * ВычислитьОбъемНоменклатуры(стр1.Номенклатура) * 1.3;   //плотников
				Иначе
					итогОбъем = итогОбъем + стр1.Количество * ВычислитьОбъемНоменклатуры(стр1.Номенклатура) * 1;
				КонецЕсли;
			КонецЦикла;
			
			Стоимость = Рез[0].ТарифЗаКм * РасстояниеПримерное.distance * итогОбъем / Элемент.Значение * 2; 
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбъемАвтомобиляЧислоНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	ПеремСтрАдрес = Неопределено;
	
	РегионЭтоГород = Неопределено;
	
	Маршрут = Справочники.Маршруты.ПустаяСсылка();
	
	РаспределитьЗаказНаМаршрут(Ссылка,ДатаОтгрузки,РегионЭтоГород,ПеремСтрАдрес,Маршрут,Подразделение);
	
	Запрос = Новый ЗАпрос;
	запрос.Текст = "ВЫБРАТЬ
	               |	ТипАвтомобиля.Объем,
	               |	МАКСИМУМ(ТипАвтомобиля.Вес) КАК Вес
	               |ИЗ
	               |	Справочник.ТипАвтомобиля КАК ТипАвтомобиля
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТипАвтомобиля.Объем";
	мОбъемыТЗ = запрос.Выполнить().Выгрузить();
	
	Если Маршрут <> Справочники.Маршруты.ПустаяСсылка() Тогда
		//мОбъемыТЗ = Маршрут.ТипыАвтомобилей.Выгрузить();
		мОбъемыТЗ.Сортировать("Объем Возр");
		Объемы = мОбъемыТЗ.ВыгрузитьКолонку("Объем");
		СписОбъем = Новый СписокЗначений;
		СписОбъем.ЗагрузитьЗначения(Объемы);
		
	    ЭлементыФормы.ОбъемАвтомобиляЧисло.СписокВыбора = СписОбъем;		
	Иначе
		
		
		
	КонецЕсли;
	
	

КонецПроцедуры

функция получитьМаршрут(Адрес1,Адрес2) экспорт    
	Соединение = Новый HTTPСоединение("maps.googleapis.com");
    //"http://maps.googleapis.com/maps/api/geocode/xml?address="+Адрес2
  //URL = "https://maps.yandex.ru/?origin="+стрЗаменить(к1, ",","%2C")+"&destination="+стрЗаменить(к2, ",","%2C")+"&rtt=auto&ll=45.902354%2C54.358468&z=5";
	Заголовки = Новый Соответствие();
	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла();
	Ресурс = "/maps/api/directions/xml?origin="+Адрес1+"&destination="+Адрес2;
	HTTPзапрос = Новый HTTPЗапрос(Ресурс, Заголовки);
	
	попытка
		HTTPОтвет = Соединение.Получить( HTTPзапрос, ИмяФайлаРезультата);
	исключение
	КонецПопытки;	
	Соединение = Неопределено; // разорвать соединение

 ТекстовыйФайлОтвет = Новый ТекстовыйДокумент;
 ТекстовыйФайлОтвет.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
 СтрокаXMLРезультат = ТекстовыйФайлОтвет.ПолучитьТекст();
 
 i1 = найти(СтрокаXMLРезультат, "<status>");
 i2 = найти(СтрокаXMLРезультат, "</status>");
 Если i1>0 и i2>0 тогда
	 рез = сред(СтрокаXMLРезультат, i1+8, i2-i1-8);
	 сообщить("Результат: "+рез);
 КонецЕсли;	
 
 distance = 0;
 location = "";
 
// если рез<>"OK" тогда
 
 стр1 = СтрокаXMLРезультат;
  i = найти(стр1, "</step>");
  //... step... пропускаем
  пока i>0 цикл
  стр1 = прав(стр1, стрДлина(стр1)-i-6);	  
  i = найти(стр1, "</step>");
  КонецЦикла;

  i = найти(стр1, "<distance>");
  Если i>0 тогда
	  стр1 = прав(стр1, стрДлина(стр1)-i-9);	
	  i1 = найти(стр1, "<value>");
	  i2 = найти(стр1, "</value>");
	distanceText = сред(стр1, i1+7, i2-i1-7);  
	
	сообщить( "distance = "+distanceText+" м");
	
	попытка
		distance = ОКР( число(distanceText)/1000, 0);	 // округляем до КМ
//		сообщить(" = "+строка(distance)+" км.");
	исключение
		distance = 0;
	КонецПопытки;
	
//  <distance>
 //   <value>1355034</value>   //в метрах!
 //   <text>1,355 km</text>
//  </distance>
	
  КонецЕсли;

 i = найти(стр1, "<end_location>");
 Если i>0 тогда
	 стр1 = прав(стр1, стрДлина(стр1)-i-13);
	 
	  i1 = найти(стр1, "<lat>");
	  i2 = найти(стр1, "</lat>");
	ш = сред(стр1, i1+5, i2-i1-5);  
	  i1 = найти(стр1, "<lng>");
	  i2 = найти(стр1, "</lng>");
	д = сред(стр1, i1+5, i2-i1-5);  
	
	location = д+","+ш;
КонецЕсли;	
  
//КонецЕсли;//если ОК
 рез = новый Структура;
 рез.Вставить("distance", distance);
 рез.Вставить("location", location);
 
 возврат рез;
 
 КонецФункции

 Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	 Если Элемент.ТекущаяКолонка.Имя="КолонкаОткрытьНоменклатуру" тогда
		ОткрытьЗначение(Элемент.ТекущаяСтрока.Номенклатура);
	КонецЕсли;

 КонецПроцедуры

 Процедура ДействияФормыкнОтделитьЗапрещенные(Кнопка)
	 
	 Заказ13 = Скопировать();
	 Заказ13.ТипЗаказа = 13;
	 Заказ13.Дата = ТекущаяДата();
	 Заказ13.Проверен = Истина; //сразу делим!
	 
	 Заказ13.Товары.Очистить();
	 Заказ13.Услуги.Очистить();
	 Заказ13.Заказы.Очистить();
	 Заказ13.Комментарий = "Запрещенные типоразмеры заказа "+Номер+" & "+Комментарий;
	 товарыВрем = Товары.Выгрузить();
	 товарыВрем.Очистить();
	 
	 Для Каждого строкаТовары Из ЭтотОбъект.Товары Цикл
		 // Сакулина. 23.11.2016. Добавила Проверку на запрещенный типоразмер
		 Если ПроверитьЗапрещенныйТипоразмер(строкаТовары.Номенклатура) = Истина 
			 //и согласован = ложь 
			 //и Проведен 
			 //и ТипЗаказа = 13 
			 и Подразделение = Справочники.Подразделения.НайтиПоКоду("00005") 
			 и ВводитьТолькоПеремещение = Истина
			 и Заказы.Количество()=0
			 Тогда
			 строкаТоварыПеремещение13 = Заказ13.Товары.Добавить();
			 ЗаполнитьЗначенияСвойств(строкаТоварыПеремещение13, строкаТовары);
			 строкаТоварыПеремещение13.Статус=Перечисления.СтатусыСтрокЗаказа.ПустаяСсылка();
		 Иначе
			 нстр = товарыВрем.Добавить();
			 ЗаполнитьЗначенияСвойств(нстр, строкаТовары);
		 КонецЕсли;
	 КонецЦикла;
	 
	 Если Заказ13.Товары.Количество()>0 тогда
		 
		 Товары.Очистить();
		 Для каждого стр из товарыВрем цикл
			 нстр = Товары.Добавить();
			 ЗаполнитьЗначенияСвойств(нстр, стр);
		 КонецЦикла;
		 
		 НачатьТранзакцию();
		 //
		 Удача=ложь;
		 
		 Попытка 
			 Записать(РежимЗаписиДокумента.Проведение);				
			 Заказ13.Записать(РежимЗаписиДокумента.Проведение);
			 Удача=истина;
			 Комментарий = Комментарий + "!!!заказ разделен на: " + Заказ13.Номер;
			 Записать(РежимЗаписиДокумента.Запись);				
		 Исключение 
			 Предупреждение("Операция не выполнена по причине: " + ИнформацияОбОшибке().Описание);
			 ОтменитьТранзакцию();
		 КонецПопытки;
		 
		 Если Удача Тогда 
			 ЗафиксироватьТранзакцию();
		 КонецЕсли;
	 КонецЕсли;
	 
 КонецПроцедуры

 Процедура ГрузополучательПриИзменении(Элемент)
	 АдресДоставки = "";
	 АдресДляТТН   = "";
 КонецПроцедуры

Процедура ГрузоотправительПриИзменении(Элемент)
	
	//***2017.12.28 проверка здесь, т.к. в момент начала выбора не сделать из-за того, что не у всех пользователей этот контрагент есть в списке выбора, поэтому вводят по строке
	Если Подразделение.ОбособленноеПодразделение Тогда
		
		Если НЕ Грузоотправитель = Подразделение.Контрагент Тогда
			Режим = РежимДиалогаВопрос.ДаНет;
			Текст = "Для подразделения " + Подразделение.Наименование + " можно устанавливать в качестве Грузоотправителя только контрагента " + Подразделение.Контрагент.Наименование + ". Установить?";
			Ответ = Вопрос(Текст, Режим, 0);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Грузоотправитель = Справочники.Контрагенты.ПустаяСсылка();
			Иначе
				Грузоотправитель = Подразделение.Контрагент;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
 
КонецПроцедуры

Процедура ДействияФормыВыделитьДискиРаспродажи(Кнопка)
	
	//***2018.08.01 Задача №37574
	Кнопка.Пометка = НЕ Кнопка.Пометка;	
	
	Если ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ВыделитьДискиРаспродажи.Пометка Тогда   
		Запрос = Новый Запрос;   
		Запрос.УстановитьПараметр("Период", НачалоМесяца(Дата));
		Запрос.Текст = "ВЫБРАТЬ
		|	ЦеныДляРаспродажи.Номенклатура
		|ИЗ
		|	РегистрСведений.ЦеныДляРаспродажи КАК ЦеныДляРаспродажи
		|ГДЕ
		|	ЦеныДляРаспродажи.Период = &Период";
		
		ТаблицаРаспродажи = Запрос.Выполнить().Выгрузить();	
		
		ЭлементыФормы.Товары.ОбновитьСтроки();
	КонецЕсли;
	
КонецПроцедуры

//21.02.2017 - убрана кнопка  ПересчитатьНДСиЦенуДляЭкспорта
//Процедура КоманднаяПанельТоварыПересчитатьНДСиЦенуДляЭкспорта(Кнопка)
//	
//	Если Товары.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	ТекстВопроса = "Во всех строках таблицы Товары будет установлена ставка НДС 0% и пересчитана цена без НДС";
//	Если Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет, 30) <> КодВозвратаДиалога.Да Тогда
//		Возврат;
//	КонецЕсли;
//	Для Каждого Стр1 из Товары Цикл
//		Если Стр1.СтавкаНДС <> Перечисления.СтавкиНДС.НДС0 или Стр1.СуммаНДС <> 0 Тогда
//			Стр1.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
//			Если СуммаВключаетНДС Тогда 
//				Стр1.Сумма = Стр1.Сумма - Стр1.СуммаНДС;
//			КонецЕсли;
//			Стр1.СуммаНДС = 0;
//			Если Стр1.Количество <> 0 Тогда
//				НоваяЦена = Цел(Стр1.Сумма/Стр1.Количество);	
//			Иначе
//				НоваяЦена = Цел(Стр1.Цена/118*100);
//			КонецЕсли;	
//			Если НоваяЦена <> Цел(Стр1.Цена) Тогда //всегда округление цены в большую сторону
//				Стр1.Цена =  НоваяЦена+1;
//			КонецЕсли;
//			РассчитатьСуммуТабЧасти(Стр1, ЭтотОбъект);
//			РассчитатьСуммуНДСТабЧасти(Стр1, ЭтотОбъект);
//		КонецЕсли;	
//	КонецЦикла;	
//	
//КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

мОбновлятьВладельца = Ложь;

мЧас    = 0;
мМинута = 0;

мПроведениеИзФормы = Ложь;
мОбработкаТайпинга                 = Ложь;
мТекстТайпинга                     = "";
мПоследнееЗначениеЭлементаТайпинга = Неопределено;

мКолонкиТовары         = ЭлементыФормы.Товары.Колонки;
мКолонкиВозвратнаяТара = ЭлементыФормы.ВозвратнаяТара.Колонки;

флПоказыватьЛимит = Истина; //+++ 20.09 - 02.11.2016 было ЛОЖЬ(как раньше), включено обратно - показывать сразу общий лимит/Заказано и остаток лимита (Истина) 