Перем мВалютаРегламентированногоУчета Экспорт;

Перем мПроведениеИзФормы Экспорт;      

//14.04.2016
перем ДатаНачалаКлючевойОперации Экспорт; 
перем ДатаНачалаЗаписи Экспорт; 
перем ДатаОкончанияЗаписи;

Перем СогласовыватьРекламу;

перем таблСогл, ТаблПоставщиков Экспорт;
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
	// Функция формирует табличный документ с печатной формой заказа или счета,
	// разработанного методистами
	//
	// Возвращаемое значение:
	//  Табличный документ - сформированная печатная форма
	//
	Функция ПечатьСчетаЗаказа(Тип)//18.06.2015 - убран Экспорт
		//14.02.17 Смирнов, если договор заканчивается, то предупреждаем об этом
		#Если Клиент тогда
			Если НачалоДня(ТекущаяДата())+14*24*60*60 >= ЭтотОбъект.ДоговорКонтрагента.ДатаОкончанияДействия и ЗначениеЗаполнено(ЭтотОбъект.ДоговорКонтрагента.ДатаОкончанияДействия) тогда
				Предупреждение("Срок действия договора заканчивается "+Формат(ЭтотОбъект.ДоговорКонтрагента.ДатаОкончанияДействия,"ДФ=dd.MM.yyyy"));
			КонецЕсли;
		#КонецЕсли
		//
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		Запрос.Текст ="ВЫБРАТЬ
		|	ЗаказПокупателя.Номер,
		|	ЗаказПокупателя.Дата,
		|	ЗаказПокупателя.ДоговорКонтрагента,
		|	ЗаказПокупателя.Организация КАК Организация,
		|	ЗаказПокупателя.Контрагент КАК Получатель,
		|	ЗаказПокупателя.Организация КАК Руководители,
		|	ЗаказПокупателя.Организация КАК Поставщик,
		|	ЗаказПокупателя.СуммаДокумента,
		|	ЗаказПокупателя.ВалютаДокумента,
		|	ЗаказПокупателя.УчитыватьНДС,
		|	ЗаказПокупателя.СуммаВключаетНДС,
		//+++ 09.11.2012 - Для РнД 
		|	ЗаказПокупателя.Грузоотправитель,
		|	ЗаказПокупателя.Подразделение
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Ссылка = &ТекущийДокумент";
		
		Если  не ЗначениеНеЗаполнено(ОрганизацияДляПечати) Тогда // меняем все кроме реквизита Организация
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"Организация КАК","ОрганизацияДляПечати КАК");
		КонецЕсли;	
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_СчетЗаказ";
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура,
		|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
		|	ВложенныйЗапрос.Номенклатура.Код                КАК Код,
		|	ВложенныйЗапрос.Номенклатура.Артикул            КАК Артикул,
		|	ВложенныйЗапрос.Количество,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
		|	ВложенныйЗапрос.ПроцентСкидкиНаценки 
		|	+ ВложенныйЗапрос.ПроцентАвтоматическихСкидок   КАК Скидка,
		|	ВложенныйЗапрос.Цена,
		|	ВложенныйЗапрос.Сумма,
		|	ВложенныйЗапрос.СуммаНДС,
		|	ВложенныйЗапрос.Характеристика,
		|	NULL Как Серия,
		|	НомерСтроки,
		|	Метка
		|ИЗ
		|	(
		|	ВЫБРАТЬ
		|		ЗаказПокупателя.Номенклатура,
		|		ЗаказПокупателя.ЕдиницаИзмерения,
		|		ЗаказПокупателя.ПроцентСкидкиНаценки        КАК ПроцентСкидкиНаценки,
		|		ЗаказПокупателя.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
		|		ЗаказПокупателя.Цена                        КАК Цена,
		|		СУММА(ЗаказПокупателя.Количество)           КАК Количество,
		|		СУММА(ЗаказПокупателя.Сумма     )           КАК Сумма,
		|		СУММА(ЗаказПокупателя.СуммаНДС  )           КАК СуммаНДС,
		|		ЗаказПокупателя.ХарактеристикаНоменклатуры  КАК Характеристика,
		|		МИНИМУМ(НомерСтроки)                        КАК НомерСтроки,
		|		0                                           КАК Метка
		|	ИЗ
		|		Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателя
		|
		|	ГДЕ
		|		ЗаказПокупателя.Ссылка = &ТекущийДокумент
		|//СтатусНеОтменен
		|	СГРУППИРОВАТЬ ПО
		|		ЗаказПокупателя.Номенклатура,
		|		ЗаказПокупателя.ЕдиницаИзмерения,
		|		ЗаказПокупателя.ПроцентСкидкиНаценки,
		|		ЗаказПокупателя.ПроцентАвтоматическихСкидок,
		|		ЗаказПокупателя.Цена,
		|		ЗаказПокупателя.ХарактеристикаНоменклатуры
		|	) КАК ВложенныйЗапрос
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказПокупателя.Содержание,
		|	ВЫБОР КОГДА ЗаказПокупателя.Содержание IS NULL ИЛИ ЗаказПокупателя.Содержание = """" ТОГДА
		|		ВЫРАЗИТЬ(ЗаказПокупателя.Номенклатура.НаименованиеПолное КАК Строка(1000))
		|	ИНАЧЕ
		|		ЗаказПокупателя.Содержание
		|	КОНЕЦ КАК Товар,
		|	ЗаказПокупателя.Номенклатура.Код     КАК Код,
		|	ЗаказПокупателя.Номенклатура.Артикул КАК Артикул,
		|	ЗаказПокупателя.Количество,
		|	ЗаказПокупателя.Номенклатура.ЕдиницаХраненияОстатков,
		|	ЗаказПокупателя.ПроцентСкидкиНаценки,
		|	ЗаказПокупателя.Цена,
		|	ЗаказПокупателя.Сумма,
		|	ЗаказПокупателя.СуммаНДС,
		|	NULL,
		|	NULL,
		|	НомерСтроки,
		|	1 КАК Метка
		|	
		|ИЗ
		|	Документ.ЗаказПокупателя.Услуги КАК ЗаказПокупателя
		|
		|ГДЕ
		|	ЗаказПокупателя.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
		|";
		//+++ 30.06.2014			  
		Если Константы.ИспользоватьОстаткиСтороннихПоставщиков.Получить()
			и НЕ Поставщик.пустая() Тогда // 13.08.2015 только Если есть поставщик!
			Запрос.Текст = стрЗаменить(Запрос.Текст, "//СтатусНеОтменен", " 
			| И  ЗаказПокупателя.Статус <> Значение(перечисление.СтатусыСтрокЗаказа.Отменен)");
		КонецЕсли;
		
		ЗапросТовары = Запрос.Выполнить().Выгрузить();
		
		Макет = ПолучитьМакет("СчетЗаказ");
		
		// Выводим шапку накладной
		
		СведенияОПоставщике = СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата);
		Если Тип = "Счет" Тогда
			ОбластьМакета       = Макет.ПолучитьОбласть("ЗаголовокСчета");
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ОбластьМакета.Параметры.ИНН = СведенияОПоставщике.ИНН;
			ОбластьМакета.Параметры.КПП = СведенияОПоставщике.КПП;
			Если ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				Банк       = СтруктурнаяЕдиница.Банк;
				БИК        = Банк.Код;
				КоррСчет   = Банк.КоррСчет;
				ГородБанка = Банк.Город;
				НомерСчета = СтруктурнаяЕдиница.НомерСчета;
				
				ОбластьМакета.Параметры.БИКБанкаПолучателя               = БИК;
				ОбластьМакета.Параметры.БанкПолучателя                   = Банк;
				ОбластьМакета.Параметры.БанкПолучателяПредставление      = СокрЛП(Банк) + " " + ГородБанка;
				ОбластьМакета.Параметры.СчетБанкаПолучателя              = КоррСчет;
				ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = КоррСчет;
				ОбластьМакета.Параметры.СчетПолучателяПредставление      = НомерСчета;
				ОбластьМакета.Параметры.СчетПолучателя                   = НомерСчета;
				ОбластьМакета.Параметры.ПредставлениеПоставщика          = СтруктурнаяЕдиница.ТекстКорреспондента;
			КонецЕсли;
			Если ЗначениеНеЗаполнено(ОбластьМакета.Параметры.ПредставлениеПоставщика) Тогда
				ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
			КонецЕсли;
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли; 
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		Если Тип = "Счет" Тогда
			ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Счет на оплату");
		Иначе
			ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Заказ покупателя");
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		ТабДокумент.Вывести(ОбластьМакета);
		
		
		СведенияОПолучателе = СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		Если не ЗначениеНеЗаполнено(ОрганизацияДляПечати) И ОрганизацияДляПечати<>Организация Тогда
			ОбластьМакета.Параметры.ПредставлениеПолучателя = Строка(КонтактноеЛицо);
		Иначе
			ОбластьМакета.Параметры.ПредставлениеПолучателя = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		КОнецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ЕстьСкидки = Ложь;
		Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 
			Если Не ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
				ЕстьСкидки = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		
		ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
		Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
			ВыводитьКоды = Истина;
			Колонка = "Артикул";
		ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
			ВыводитьКоды = Истина;
			Колонка = "Код";
		Иначе
			ВыводитьКоды = Ложь;
		КонецЕсли;
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		ОбластьКолонкаТовар = Макет.Область("Товар");
		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
			Макет.Область("КолонкаКодов").ШиринаКолонки;
		КонецЕсли;
		Если НЕ ЕстьСкидки Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
			Макет.Область("СуммаБезСкидки").ШиринаКолонки +
			Макет.Область("СуммаСкидки").ШиринаКолонки;
		КонецЕсли;
		
		ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
		
		Сумма    = 0;
		СуммаНДС = 0;
		ВсегоСкидок    = 0;
		ВсегоБезСкидок = 0;
		
		Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 
			
			Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
			ТабДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьДанных.Параметры.Товар       = СокрП(ВыборкаСтрокТовары.Товар) + ПредставлениеСерий(ВыборкаСтрокТовары);
			ТабДокумент.Присоединить(ОбластьДанных);
			
			Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
				Скидка = 0;
			Иначе
				Скидка = ВыборкаСтрокТовары.Сумма  / (100 - ВыборкаСтрокТовары.Скидка) * ВыборкаСтрокТовары.Скидка;
			КонецЕсли;
			Если ЕстьСкидки Тогда
				ОбластьСкидок.Параметры.Скидка         = Скидка;
				ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			
			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабДокумент.Присоединить(ОбластьСуммы);
			
			Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
			СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
			ВсегоСкидок    = ВсегоСкидок + Скидка;
			ВсегоБезСкидок = Сумма       + ВсегоСкидок;
			
		КонецЦикла;
		
		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
			ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.Всего = ФорматСумм(Сумма);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		// Вывести ИтогоНДС
		Если Шапка.УчитыватьНДС Тогда
			ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ОбластьСуммы.Параметры.ВсегоНДС = ФорматСумм(ЗапросТовары.Итог("СуммаНДС"));
			ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
		
		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ЗапросТовары.Количество()
		+ ", на сумму " + ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
		ОбластьМакета.Параметры.СуммаПрописью = СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести подписи
		Если Тип = "Счет" Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
			
			Руководители = ОтветственныеЛицаОрганизации(Шапка.Руководители, Шапка.Дата,);
			Руководитель = Руководители.Руководитель;
			Бухгалтер    = Руководители.ГлавныйБухгалтер;
			
			ОбластьМакета.Параметры.ФИОРуководителя  = "/" + Руководитель  + "/";
			ОбластьМакета.Параметры.ФИОБухгалтера    = "/" + Бухгалтер     + "/";
			ОбластьМакета.Параметры.ФИООтветственный = "/" + Ответственный + "/";
			
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
		КонецЕсли; 
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьСчетаЗаказа()
	
	//+++13.05.2015
	функция ПолучитьКодШтрихКода( КодТов ) 
		
		запрос = новый Запрос;
		запрос.Текст = "ВЫБРАТЬ
		|	ШК.Код,
		|	ШК.ТипШтрихкода,
		|	ШК.Штрихкод,
		|	ШК.Владелец,
		|	ШК.ЕдиницаИзмерения,
		|	ШК.ХарактеристикаНоменклатуры,
		|	ШК.СерияНоменклатуры,
		|	ШК.Качество
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК ШК
		|ГДЕ
		|	ШК.Владелец.Код = &Код";
		запрос.Параметры.Вставить("Код", КодТов);
		рез = запрос.Выполнить().Выгрузить();
		Шк = "";
		Если рез.Количество() > 0 Тогда
			Для Каждого стр из Рез Цикл
				Шк = Шк + строка(стр.Штрихкод)  + Символы.ПС;
			КонецЦикла;
			//ШК = строка(рез.Штрихкод);
		Иначе 
			ШК = "0"; //ПолучитьНовыйКодДляШтрихКодаЯШТ(КодТов);
		КонецЕсли;
		
		возврат ШК;
		
	КонецФункции
	
	//+++13.05.2015
	функция ПолучитьНовыйКодДляШтрихКодаЯШТ(Код)
		
		Если стрДлина(Код)<7 Тогда
			код1 = Формат(число(Код), "ЧЦ=7; ЧВН=");
		Иначе 
			код1 = код;
		КонецЕсли;	
		
		ШтрихКод = "05000"+ Код;
		ШтрихКод = ШтрихКод + КонтрольныйСимволEAN(ШтрихКод, 13);
		
		возврат ШтрихКод;
		
	КонецФункции
	
	
	// Функция формирует табличный документ с печатной формой заказа или счета,
	// разработанного методистами (с учетом внесенных корректировок)
	//
	// Возвращаемое значение:
	//  Табличный документ - сформированная печатная форма
	//
	Функция ПечатьСчетаЗаказаКорректировки(Тип, СКартинкой = ложь) Экспорт //+++ 18.06.2015
		//14.02.17 Смирнов, если договор заканчивается, то предупреждаем об этом
		#Если Клиент тогда
			Если НачалоДня(ТекущаяДата())+14*24*60*60 >= ЭтотОбъект.ДоговорКонтрагента.ДатаОкончанияДействия и ЗначениеЗаполнено(ЭтотОбъект.ДоговорКонтрагента.ДатаОкончанияДействия) тогда
				Предупреждение("Срок действия договора заканчивается "+Формат(ЭтотОбъект.ДоговорКонтрагента.ДатаОкончанияДействия,"ДФ=dd.MM.yyyy"));
			КонецЕсли;
		#КонецЕсли
		//
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		Запрос.Текст ="ВЫБРАТЬ
		|	ЗаказПокупателя.Номер,
		|	ЗаказПокупателя.Дата,
		|	ЗаказПокупателя.ДоговорКонтрагента,
		|	ЗаказПокупателя.Организация,
		|	ЗаказПокупателя.Контрагент КАК Получатель,
		|	ЗаказПокупателя.Организация КАК Руководители,
		|	ЗаказПокупателя.Организация КАК Поставщик,
		|	ЗаказПокупателя.СуммаДокумента,
		|	ЗаказПокупателя.ВалютаДокумента,
		|	ЗаказПокупателя.УчитыватьНДС,
		|	ЗаказПокупателя.СуммаВключаетНДС,
		|	ЗаказПокупателя.Грузоотправитель,
		|	ЗаказПокупателя.Подразделение
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Ссылка = &ТекущийДокумент";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_СчетЗаказ";
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|	ВложенныйЗапрос.Номенклатура.Артикул КАК Артикул,
		|	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
		|	ВложенныйЗапрос.ПроцентСкидкиНаценки + ВложенныйЗапрос.ПроцентАвтоматическихСкидок КАК Скидка,
		|	СУММА(ВложенныйЗапрос.СуммаНДС) КАК СуммаНДС,
		|	ВложенныйЗапрос.Цена КАК Цена,
		|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры КАК Характеристика,
		|	NULL КАК Серия,
		|	ВЫБОР
		|		КОГДА НЕ ВложенныйЗапрос.Номенклатура.Услуга
		|			ТОГДА 0
		|		КОГДА ВложенныйЗапрос.Номенклатура.Услуга
		|			ТОГДА 1
		|	КОНЕЦ КАК УСЛУГА,
		|	МИНИМУМ(ВложенныйЗапрос.НомерСтроки) КАК НомерСтроки,
		|	ВложенныйЗапрос.СтавкаНДС
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗаказПокупателя.Номенклатура КАК Номенклатура,
		|		ЗаказПокупателя.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		ЗаказПокупателя.Цена КАК Цена,
		|		ЗаказПокупателя.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|		ЗаказПокупателя.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
		|		ЗаказПокупателя.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|		ЗаказПокупателя.СуммаНДС КАК СуммаНДС,
		|		ЗаказПокупателя.Сумма КАК Сумма,
		|		ЗаказПокупателя.Количество КАК Количество,
		|		ЗаказПокупателя.НомерСтроки КАК НомерСтроки,
		|		ЗаказПокупателя.СтавкаНДС КАК СтавкаНДС
		|	ИЗ
		|		Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателя
		|	ГДЕ
		|		ЗаказПокупателя.Ссылка = &ТекущийДокумент
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		КорректировкаЗаказаПокупателя.Номенклатура,
		|		КорректировкаЗаказаПокупателя.ЕдиницаИзмерения,
		|		КорректировкаЗаказаПокупателя.Цена,
		|		КорректировкаЗаказаПокупателя.ПроцентСкидкиНаценки,
		|		КорректировкаЗаказаПокупателя.ПроцентАвтоматическихСкидок,
		|		КорректировкаЗаказаПокупателя.ХарактеристикаНоменклатуры,
		|		КорректировкаЗаказаПокупателя.СуммаНДС,
		|		КорректировкаЗаказаПокупателя.Сумма,
		|		КорректировкаЗаказаПокупателя.Количество,
		|		1000 + КорректировкаЗаказаПокупателя.НомерСтроки,
		|		КорректировкаЗаказаПокупателя.СтавкаНДС
		|	ИЗ
		|		Документ.КорректировкаЗаказаПокупателя.Товары КАК КорректировкаЗаказаПокупателя
		|	ГДЕ
		|		КорректировкаЗаказаПокупателя.Ссылка.ЗаказПокупателя = &ТекущийДокумент
		|		И КорректировкаЗаказаПокупателя.Ссылка.Проведен = ИСТИНА
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗаказПокупателя.Номенклатура,
		|		ЗаказПокупателя.Номенклатура.ЕдиницаХраненияОстатков,
		|		ЗаказПокупателя.Цена,
		|		ЗаказПокупателя.ПроцентСкидкиНаценки,
		|		0,
		|		NULL,
		|		ЗаказПокупателя.СуммаНДС,
		|		ЗаказПокупателя.Сумма,
		|		ЗаказПокупателя.Количество,
		|		ЗаказПокупателя.НомерСтроки,
		|		ЗаказПокупателя.СтавкаНДС
		|	ИЗ
		|		Документ.ЗаказПокупателя.Услуги КАК ЗаказПокупателя
		|	ГДЕ
		|		ЗаказПокупателя.Ссылка = &ТекущийДокумент
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		КорректировкаЗаказаПокупателя.Номенклатура,
		|		КорректировкаЗаказаПокупателя.Номенклатура.ЕдиницаХраненияОстатков,
		|		КорректировкаЗаказаПокупателя.Цена,
		|		КорректировкаЗаказаПокупателя.ПроцентСкидкиНаценки,
		|		0,
		|		NULL,
		|		КорректировкаЗаказаПокупателя.СуммаНДС,
		|		КорректировкаЗаказаПокупателя.Сумма,
		|		КорректировкаЗаказаПокупателя.Количество,
		|		1000 + КорректировкаЗаказаПокупателя.НомерСтроки,
		|		КорректировкаЗаказаПокупателя.СтавкаНДС
		|	ИЗ
		|		Документ.КорректировкаЗаказаПокупателя.Услуги КАК КорректировкаЗаказаПокупателя
		|	ГДЕ
		|		КорректировкаЗаказаПокупателя.Ссылка.ЗаказПокупателя = &ТекущийДокумент
		|		И КорректировкаЗаказаПокупателя.Ссылка.Проведен = ИСТИНА) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ЕдиницаИзмерения,
		|	ВложенныйЗапрос.ПроцентСкидкиНаценки,
		|	ВложенныйЗапрос.ПроцентАвтоматическихСкидок,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
		|	ВложенныйЗапрос.Цена,
		|	ВложенныйЗапрос.Номенклатура.Артикул,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление,
		|	ВложенныйЗапрос.СтавкаНДС,
		|	ВЫБОР
		|		КОГДА НЕ ВложенныйЗапрос.Номенклатура.Услуга
		|			ТОГДА 0
		|		КОГДА ВложенныйЗапрос.Номенклатура.Услуга
		|			ТОГДА 1
		|	КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	УСЛУГА,
		|	Номенклатура
		|АВТОУПОРЯДОЧИВАНИЕ";
		//+++ 30.06.2014			  
		Если Константы.ИспользоватьОстаткиСтороннихПоставщиков.Получить()
			и НЕ Поставщик.пустая() Тогда // 13.08.2015 только Если есть поставщик!
			Запрос.Текст = стрЗаменить(Запрос.Текст, "//СтатусНеОтменен", " 
			| И  ЗаказПокупателя.Статус <> Значение(перечисление.СтатусыСтрокЗаказа.Отменен)");
		КонецЕсли;
		
		ЗапросТовары = Запрос.Выполнить().Выгрузить();
		
		Макет = ПолучитьМакет("СчетЗаказ");
		
		// Выводим шапку накладной
		
		СведенияОПоставщике = СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата);
		
		Если Тип = "Счет" или Тип = "СчетАртикул" Тогда
			
			ОбластьМакета       = Макет.ПолучитьОбласть("ЗаголовокСчета");
			//ОЛ 12.02.2015
			Если Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль или
				Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.НайтиПоКоду("Я0004") Тогда
				//Для формула авто и шинтрейд ярославль не должно быть упоминание о Яршинторг
				ОбластьМакета       = Макет.ПолучитьОбласть("ЗаголовокСчетаФАиШТЯ");
			КонецЕсли;	 
			//Конец ОЛ
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ОбластьМакета.Параметры.ИНН = СведенияОПоставщике.ИНН;
			ОбластьМакета.Параметры.КПП = СведенияОПоставщике.КПП;
			
			//+++( 09.11.2012
			Если Шапка.Подразделение = справочники.Подразделения.НайтиПоКоду("00106") 
				и Шапка.Дата >= '20121001' Тогда
				Если НЕ ЗначениеЗаполнено(Шапка.Грузоотправитель) Тогда
					Сообщить("Не заполнен грузоотправитель!");
					возврат неопределено;
				КонецЕсли;	
				СведенияОГрузоотправителе = СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.Дата);  
				ОбластьМакета.Параметры.ИНН = СведенияОГрузоотправителе.ИНН;
				ОбластьМакета.Параметры.КПП = СведенияОГрузоотправителе.КПП;
				СтруктурнаяЕдиница  = Шапка.Грузоотправитель.ОсновнойБанковскийСчет;
			КонецЕсли;	//+++)
			
			//+++( 18.06.2014
			Если СтруктурнаяЕдиница=неопределено Тогда
				СтруктурнаяЕдиница = ЭтотОбъект.Организация.ОсновнойБанковскийСчет;
			КонецЕсли;	
			//+++)
			
			Если ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				Банк       = СтруктурнаяЕдиница.Банк;
				БИК        = Банк.Код;
				КоррСчет   = Банк.КоррСчет;
				НомерСчета = СтруктурнаяЕдиница.НомерСчета;
				
				ОбластьМакета.Параметры.БИКБанкаПолучателя               = БИК;
				ОбластьМакета.Параметры.БанкПолучателя                   = Банк;
				ОбластьМакета.Параметры.БанкПолучателяПредставление      = СокрЛП(Банк) +" "+Банк.Город;
				ОбластьМакета.Параметры.СчетБанкаПолучателя              = КоррСчет;
				ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = КоррСчет;
				ОбластьМакета.Параметры.СчетПолучателяПредставление      = НомерСчета;
				ОбластьМакета.Параметры.СчетПолучателя                   = НомерСчета;
				ОбластьМакета.Параметры.ПредставлениеПоставщика          = СтруктурнаяЕдиница.ТекстКорреспондента;
			КонецЕсли;
			Если ЗначениеНеЗаполнено(ОбластьМакета.Параметры.ПредставлениеПоставщика) Тогда
				ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
			КонецЕсли;
			
			//ОЛ 12.02.2015 - Для экспорта
			ОрганизацияОтгрузки = Справочники.Контрагенты.ПустаяСсылка();
			Если Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль Тогда
				ОрганизацияОтгрузки = Справочники.Контрагенты.НайтиПоКоду("П001125");
			ИначеЕсли Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.НайтиПоКоду("Я0004") Тогда 
				//Для формула авто тоже нужны свои реквизиты
				ОрганизацияОтгрузки = Справочники.Контрагенты.НайтиПоКоду("92705");
			КонецЕсли;
			Если Не ОрганизацияОтгрузки.Пустая() Тогда
				СведенияОПоставщике = СведенияОЮрФизЛице(ОрганизацияОтгрузки, Шапка.Дата);
				ОбластьМакета.Параметры.ИНН = СведенияОПоставщике.ИНН;
				ОбластьМакета.Параметры.КПП = СведенияОПоставщике.КПП;
				СтруктурнаяЕдиницаОтгрузки = ОрганизацияОтгрузки.ОсновнойБанковскийСчет;
				ОбластьМакета.Параметры.БИКБанкаПолучателя               = СтруктурнаяЕдиницаОтгрузки.Банк.Код;
				ОбластьМакета.Параметры.БанкПолучателя                   = СтруктурнаяЕдиницаОтгрузки.Банк;
				ОбластьМакета.Параметры.БанкПолучателяПредставление      = СокрЛП(СтруктурнаяЕдиницаОтгрузки.Банк) +" "+СтруктурнаяЕдиницаОтгрузки.Банк.Город;
				ОбластьМакета.Параметры.СчетБанкаПолучателя              = СтруктурнаяЕдиницаОтгрузки.Банк.КоррСчет;
				ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = СтруктурнаяЕдиницаОтгрузки.Банк.КоррСчет;
				ОбластьМакета.Параметры.СчетПолучателяПредставление      = СтруктурнаяЕдиницаОтгрузки.НомерСчета;
				ОбластьМакета.Параметры.СчетПолучателя                   = СтруктурнаяЕдиницаОтгрузки.НомерСчета;
				ОбластьМакета.Параметры.ПредставлениеПоставщика          = СведенияОПоставщике.ПолноеНаименование;
			КонецЕсли;	
			//Конец ОЛ
			
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли; 
		//Миронычев
		Если Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ПредоплатаПоСчетам Тогда
			Назначение = Макет.ПолучитьОбласть("Назначение");
			Назначение.Параметры.НазначениеПлатежа = СформироватьНазначениеПлатежа(ЗапросТовары);
			ТабДокумент.Вывести(Назначение);
		КонецЕсли;
		
		//КонецМиронычев
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		Если Тип = "Счет" или Тип = "СчетАртикул" Тогда
			ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Счет на оплату");
		Иначе
			ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Заказ покупателя");
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		//ОЛ 12.02.2015
		Если Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль Тогда //Для экспорта
			Если НЕ ОрганизацияОтгрузки.Пустая() Тогда
				ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОЮрФизЛице(ОрганизацияОтгрузки, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
			КонецЕсли;
		ИначеЕсли Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.НайтиПоКоду("Я0004") Тогда //Для Формула авто
			Если НЕ ОрганизацияОтгрузки.Пустая() Тогда
				ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОЮрФизЛице(ОрганизацияОтгрузки, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
			КонецЕсли;
		КонецЕсли;
		//Конец ОЛ
		ТабДокумент.Вывести(ОбластьМакета);
		
		//+++ 03.10.2012 - Грузоотправитель, Если он есть...
		Если (Тип = "Счет" или Тип = "СчетАртикул") и ЗначениеЗаполнено(ЭтотОбъект.Грузоотправитель) Тогда 
			ОбластьМакета = Макет.ПолучитьОбласть("Грузоотправитель");
			ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ОписаниеОрганизации(СведенияОЮрФизЛице(ЭтотОбъект.Грузоотправитель, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ФактическийАдрес,Телефоны,");
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		СведенияОПолучателе = СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		//ОЛ 12.02.2015 - Для экспорта
		Если Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль Тогда //Для экспорта
			Если СокрЛП(Шапка.Получатель.НаименованиеИННэкспорт)<>"" Тогда
				ОбластьМакета.Параметры.ПредставлениеПолучателя = СтрЗаменить(ОбластьМакета.Параметры.ПредставлениеПолучателя,"ИНН ",СокрЛП(Шапка.Получатель.НаименованиеИННэкспорт)+" ");
			КонецЕсли	
		КонецЕсли;
		//Конец ОЛ
		ТабДокумент.Вывести(ОбластьМакета);
		//Миронычев
		ОбластьМакета = Макет.ПолучитьОбласть("СрокОплаты");
		Если Шапка.ДоговорКонтрагента.ТипДоговора <> Справочники.ТипыДоговоров.ПредоплатаПоСчетам Тогда
			
			
			// Сакулина. По задаче Серкова меняем Срок Оплаты на дату формирования Счета + 3 дня
			Если Тип = "Счет" Тогда
				ОбластьМакета.Параметры.СрокОплаты = Формат(ТекущаяДата() + 3*24*60*60,"ДЛФ=DD");
			Иначе
				ОбластьМакета.Параметры.СрокОплаты = Формат(ДатаОплаты,"ДЛФ=DD");
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакета);
			// КонецЕсли;
		КонецЕсли;
		
		//КонецМиронычев
		
		//+++ 03.10.2012 - Грузополучатель, Если он есть...
		Если (Тип = "Счет" или Тип = "СчетАртикул") и ЗначениеЗаполнено(ЭтотОбъект.Грузополучатель) Тогда 
			ОбластьМакета = Макет.ПолучитьОбласть("Грузополучатель");
			ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ОписаниеОрганизации(СведенияОЮрФизЛице(ЭтотОбъект.Грузополучатель, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ФактическийАдрес,Телефоны,");
			//ОЛ 12.02.2015 - Для экспорта
			Если Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль Тогда //Для экспорта
				Если СокрЛП(ЭтотОбъект.Грузополучатель.НаименованиеИННэкспорт)<>"" Тогда
					ОбластьМакета.Параметры.ПредставлениеГрузополучателя = СтрЗаменить(ОбластьМакета.Параметры.ПредставлениеГрузополучателя,"ИНН ",СокрЛП(ЭтотОбъект.Грузополучатель.НаименованиеИННэкспорт)+" ");
				КонецЕсли	
			КонецЕсли;
			//Конец ОЛ
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		ЕстьСкидки = Ложь;
		Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 
			Если Не ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
				ЕстьСкидки = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		
		ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
		Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
			ВыводитьКоды = Истина;
			Колонка = "Артикул";
		ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
			ВыводитьКоды = Истина;
			Колонка = "Код";
		Иначе
			ВыводитьКоды = Ложь;
		КонецЕсли;
		Если Тип = "СчетАртикул" Тогда
			ВыводитьКоды = Истина;
			Колонка = "Артикул";
		КонецЕсли;
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
		ОбластьШК  = Макет.ПолучитьОбласть("ШапкаТаблицы|ШК"); //+++ 13.05.2015
		ОбластьКартинка  = Макет.ПолучитьОбласть("ШапкаТаблицы|Картинка");
		
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьСуммы);
		Если тип = "СчетАртикул" Тогда
			ТабДокумент.Присоединить(ОбластьШК);    //+++ 13.05.2015
		КонецЕсли;
		
		Если СКартинкой тогда
			ТабДокумент.Присоединить(ОбластьКартинка);
		КонецЕсли;
		
		
		ОбластьКолонкаТовар = Макет.Область("Товар");
		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
			Макет.Область("КолонкаКодов").ШиринаКолонки;
		КонецЕсли;
		Если НЕ ЕстьСкидки Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
			Макет.Область("СуммаБезСкидки").ШиринаКолонки +
			Макет.Область("СуммаСкидки").ШиринаКолонки;
		КонецЕсли;
		
		ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
		ОбластьШК  = Макет.ПолучитьОбласть("Строка|ШК");              //+++ 13.05.2015
		ОбластьКартинка  = Макет.ПолучитьОбласть("Строка|Картинка");
		Если сКартинкой тогда
			ФайлПустаяКартинка=ПолучитьФайлССервера("http://photo.yst.ru/nopic_tyre_s.png");
			//Сообщить(ФайлПустаяКартинка);
		КонецЕсли;
		
		
		Сумма    = 0;
		СуммаНДС = 0;
		ВсегоСкидок    = 0;
		ВсегоБезСкидок = 0;
		
		Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 
			
			Если ВыборкаСтрокТовары.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
			
			Если СКартинкой тогда
				ОбластьНомера.ТекущаяОбласть.ВысотаСтроки=100;
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
				Иначе
					//ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Номенклатура.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
			
			//++Плотников Для Лагерной и Радуга Питер убираем LegeArtis
			Если СокрЛП(Шапка.Получатель.Код) = "91777" Тогда //***2016.04.06 Радуга Питер
				//При печати LegeArtis нужно выводить аналог TopDriver
				Если ВыборкаСтрокТовары.Номенклатура.Производитель = Справочники.Производители.НайтиПоКоду("3333") Тогда //REPLICA TD
					ОбластьДанных.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Номенклатура.НаименованиеПолное)
					//+ ПредставлениеСерий(ВыборкаСтрок)
					//+ ?(ВыборкаСтрок.Метка = 2, " (возвратная тара)", "") + " (Top Driver)";
				ИначеЕсли  ВыборкаСтрокТовары.Номенклатура.Производитель = Справочники.Производители.НайтиПоКоду("65") Тогда //REPLICA
					Запрос = Новый Запрос;
					Запрос.УстановитьПараметр("ДискLA", ВыборкаСтрокТовары.Номенклатура);
					Запрос.Текст = "ВЫБРАТЬ
					|	СоответствиеLegeArtisTopDriver.ДискTD
					|ИЗ
					|	РегистрСведений.СоответствиеLegeArtisTopDriver КАК СоответствиеLegeArtisTopDriver
					|ГДЕ
					|	СоответствиеLegeArtisTopDriver.ДискLA = &ДискLA";
					ВыборкаTD = Запрос.Выполнить().Выбрать();
					Если ВыборкаTD.Следующий() Тогда
						ОбластьДанных.Параметры.Товар = СокрЛП(СтрЗаменить(ВыборкаСтрокТовары.Номенклатура.НаименованиеПолное,"LegeArtis",""))
						+ " (ан. Top Driver " + ВыборкаTD.ДискTD.Код + ")";
					Иначе  //типовой вариант
						ОбластьДанных.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Номенклатура.НаименованиеПолное);
					КонецЕсли;
				Иначе
					ОбластьДанных.Параметры.Товар = ВыборкаСтрокТовары.Номенклатура.НаименованиеПолное + ПредставлениеСерий(ВыборкаСтрокТовары);
				КонецЕсли;
			Иначе
				ОбластьДанных.Параметры.Товар = ВыборкаСтрокТовары.Номенклатура.НаименованиеПолное + ПредставлениеСерий(ВыборкаСтрокТовары);
			КонецЕсли;
			
			
			//ОбластьДанных.Параметры.Товар = ВыборкаСтрокТовары.Номенклатура.НаименованиеПолное + ПредставлениеСерий(ВыборкаСтрокТовары);
			ТабДокумент.Присоединить(ОбластьДанных);
			
			Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
				Скидка = 0;
			Иначе
				Скидка = ВыборкаСтрокТовары.Сумма / (100 - ВыборкаСтрокТовары.Скидка) * ВыборкаСтрокТовары.Скидка;
			КонецЕсли;
			Если ЕстьСкидки Тогда
				ОбластьСкидок.Параметры.Скидка         = Скидка;
				ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			
			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабДокумент.Присоединить(ОбластьСуммы);
			
			
			//+++( 13.05.2015 - печать цифр штрихКода
			Если тип = "СчетАртикул" Тогда
				ШК = ПолучитьКодШтрихКода(ВыборкаСтрокТовары.Номенклатура.Код);
				Если ШК="0" Тогда
					Если ВыборкаСтрокТовары.Номенклатура.ВидТовара = перечисления.ВидыТоваров.Аксессуары Тогда
						ШК = ""; // Если нет "настоящего" ШК, то ничего не надо!
					Иначе 
						ШК =":"+ПолучитьНовыйКодДляШтрихКодаЯШТ(ВыборкаСтрокТовары.Номенклатура.Код);
					КонецЕсли;
				КонецЕсли;
				ОбластьШК.Параметры.ШК = ШК;
				ТабДокумент.Присоединить(ОбластьШК);
			КонецЕсли;
			//+++)
			Если СКартинкой тогда
				ОбластьКартинка.Рисунки.Очистить();
				АдресКартинки = ПолучитьАдресКартинкиТовара(ВыборкаСтрокТовары.Номенклатура);
				Картинка = неопределено;
				Если АдресКартинки<>"" и АдресКартинки <> неопределено тогда
					ФайлКартинки = ПолучитьФайлССервера(АдресКартинки);
					Если ФайлКартинки<>"" тогда
						//Картинка = Новый Картинка(яПолучитьФайлССервера(АдресКартинки));
						
						Картинка = неопределено;
						Если АдресКартинки<>"" и АдресКартинки <> неопределено тогда
							Картинка = Новый Картинка(ПолучитьФайлССервера(АдресКартинки));
							Если  Картинка = Неопределено Тогда
								Картинка = Новый Картинка(ФайлПустаяКартинка);
							КонецЕсли;	
							ФотоТовара = ОбластьКартинка.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
							ФотоТовара.Верх = 0;
							ФотоТовара.Лево = 0;
							ФотоТовара.РазмерКартинки = РазмерКартинки.Пропорционально;
							ФотоТовара.Картинка = Картинка;
							ФотоТовара.Расположить(ОбластьКартинка.Область(1, 1, 1, 1));
							
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
				
				ТабДокумент.Присоединить(ОбластьКартинка);
				//ОбластьКартинка.ТекущаяОбласть.ВысотаСтроки = 100;//ВысотаКартинки;
			КонецЕсли;
			
			Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
			СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
			ВсегоСкидок    = ВсегоСкидок + Скидка;
			ВсегоБезСкидок = Сумма       + ВсегоСкидок;
			
		КонецЦикла;
		
		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
			ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.Всего = ФорматСумм(Сумма);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		// Вывести ИтогоНДС
		Если Шапка.УчитыватьНДС Тогда
			ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
			//ОЛ 12.02.2015 - Для экспорта 0% всегда
			Если Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль Тогда
				Если ЗапросТовары.Итог("СуммаНДС")=0 Тогда 
					ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС 0%:", "Сумма НДС 0%:");
				КонецЕсли;
			КонецЕсли;	
			//Конец ОЛ
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ОбластьСуммы.Параметры.ВсегоНДС = ФорматСумм(ЗапросТовары.Итог("СуммаНДС"));
			ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
		
		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ЗапросТовары.Количество()
		+ ", на сумму " + ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
		ОбластьМакета.Параметры.СуммаПрописью = СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
		
		
		// Сакулина
		Если Тип ="Счет" Тогда
			//Миронычев
			Если Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ПредоплатаПоСчетам Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("Информация");
				ТабДокумент.Вывести(ОбластьМакета);
				
				ОбластьМакета = Макет.ПолучитьОбласть("СпособДоставки"); 
				ОбластьМакета.Параметры.СпособДоставки = ПолучитьСпособДоставки(СведенияОПоставщике);
				ТабДокумент.Вывести(ОбластьМакета);
			Иначе
				//КонецМиронычев
				
				Если ЗначениеЗаполнено(СпособОтгрузки) Тогда
					Если Найти(СпособОтгрузки.Наименование,"Поставщика за счет Поставщика") <> 0 Тогда
						ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаСчетПоставщика");
						ТабДокумент.Вывести(ОбластьМакета);
					ИначеЕсли Найти(СпособОтгрузки.Наименование,"Поставщика за счет Покупателя") <> 0 Тогда
						ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаСчетПокупателя");
						ТабДокумент.Вывести(ОбластьМакета);
					Иначе 
						ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСамовывоз");
						ТабДокумент.Вывести(ОбластьМакета);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// Сакулина
		
		
		// Вывести подписи
		Если Тип = "Счет" или Тип = "СчетАртикул" Тогда
			РуководителиП = ОтветственныеЛицаПодразделения(ЭтотОбъект.Подразделение, Шапка.Дата);//+++ 03.10.2012
			
			Руководители = ОтветственныеЛицаОрганизации(Шапка.Руководители, Шапка.Дата,);
			Руководитель = ?(РуководителиП.Руководитель=неопределено, Руководители.Руководитель,РуководителиП.Руководитель);
			Бухгалтер    = ?(РуководителиП.ГлавныйБухгалтер=неопределено, Руководители.ГлавныйБухгалтер, РуководителиП.ГлавныйБухгалтер);
			
						
			Если Шапка.ДоговорКонтрагента.ТипДоговора <> Справочники.ТипыДоговоров.ПредоплатаПоСчетам Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
				ОбластьМакета.Параметры.ФИОРуководителя  = "/" + Руководитель  + "/";
				ОбластьМакета.Параметры.ФИОБухгалтера    = "/" + Бухгалтер     + "/";
				ОбластьМакета.Параметры.ФИООтветственный = "/" + Ответственный + "/";

				
				//ОЛ 12.02.2015 - Для экспорта
				Если Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль Тогда
					Если НЕ ОрганизацияОтгрузки.Пустая() Тогда
						ОбластьМакета.Параметры.ФИОРуководителя  = "/Захаров В.В./";
						ОбластьМакета.Параметры.ФИОБухгалтера    = "/Захаров В.В./";
						ОбластьМакета.Параметры.ФИООтветственный = "";
					КонецЕсли;
				ИначеЕсли Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.НайтиПоКоду("Я0004") Тогда //Для формула авто
					Если НЕ ОрганизацияОтгрузки.Пустая() Тогда
						ОбластьМакета.Параметры.ФИОРуководителя  = "/Зайцева Н.С./";
						ОбластьМакета.Параметры.ФИОБухгалтера    = "/Зайцева Н.С./";
						ОбластьМакета.Параметры.ФИООтветственный = "";
					КонецЕсли;
				КонецЕсли;
				//Конец ОЛ
			Иначе
				Если глТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Невежина И.Н.") 
					или глТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Ловыгина Е.И.") тогда
					ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчетаОператор");
				Иначе
					ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчетаФАКСИМИЛЬКА");
				КонецЕсли;
				ОбластьМакета.Параметры.ФИОРуководителя  = "/" + Руководитель  + "/";
				
			КонецЕсли;
			
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
		КонецЕсли; 
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьСчетаЗаказаКорректировки()
	// Миронычев  
	
	Функция СформироватьНазначениеПлатежа(ЗапросТовары)
		текст = "Назначение платежа:" +Символы.ПС+
		"Оплата по счету № ";
		
		Текст = Текст + "" + ПолучитьНомерНаПечать(Ссылка);
		Текст = Текст + " от " + Формат(Дата, "ДФ=dd.MM.yyyy");
		Текст = Текст + " за товар"; 
		ТекстСумма="Сумма " + Формат(ЗапросТовары.Итог("Сумма"), "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00") + Символы.ПС;
		
		
		ТабНДС=ЗапросТовары.Скопировать();
		
		
		ТабНДС.Свернуть("СтавкаНДС","СуммаНДС");
		
		Для Каждого СтрокаНДС ИЗ ТабНДС цикл
			
			ЗначениеСтавкиНДС = ПолучитьСтавкуНДС(СтрокаНДС.СтавкаНДС);
			
			ТекстСумма = ТекстСумма + "НДС(" + ?(ЗначениеНеЗаполнено(СтрокаНДС.СтавкаНДС), "без налога", СтрокаНДС.СтавкаНДС) + ") " + Формат(СтрокаНДС.СуммаНДС, "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00")+Символы.ПС;
			
		КонецЦикла;
		
		
		
		Возврат Текст+Символы.ПС+ТекстСумма; 
		
	КонецФункции // СформироватьНазначениеПлатежа()
	
	Функция ПолучитьСпособДоставки(СведенияОПоставщике)
		
		Запрос = Новый запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление как адрес
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
		|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента)
		|	И КонтактнаяИнформация.Объект = &Объект" ;
		Запрос.УстановитьПараметр("объект", Подразделение.Контрагент);
		РЕзультат = Запрос.Выполнить().Выгрузить();
		Если РЕзультат.Количество()>0 тогда
			Адрес = РЕзультат[0].Адрес;
		КонецЕсли;
		Текст1= "Силами Покупателя " + Контрагент + "  со склада Поставщика по адресу: "	+  Адрес;
		Текст2 = "Смлами Поставщика "+ ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,") +" по адресу: "+ АдресДляТТН +" Разгрузка товара из транспорта Поставщика осуществляет Покупатель самостоятельно";
		Возврат ?(СпособОтгрузки = Справочники.СпособыОтгрузкиТовара.НайтиПоКоду("10"), Текст1,
		?(СпособОтгрузки = Справочники.СпособыОтгрузкиТовара.НайтиПоКоду("12"), 	Текст1,
		?(СпособОтгрузки = Справочники.СпособыОтгрузкиТовара.НайтиПоКоду("11"), 	Текст1,
		
		?(СпособОтгрузки = Справочники.СпособыОтгрузкиТовара.НайтиПоКоду("8"), 	Текст2,
		?(СпособОтгрузки = Справочники.СпособыОтгрузкиТовара.НайтиПоКоду("6"), 	Текст2,
		?(СпособОтгрузки = Справочники.СпособыОтгрузкиТовара.НайтиПоКоду("9"), 	Текст2,
		?(СпособОтгрузки = Справочники.СпособыОтгрузкиТовара.НайтиПоКоду("7"), 	Текст2,"")))))));
	КонецФункции
	
	//КонецМиронычев
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходмое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
	Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
		Если ЭтоНовый() Тогда
			#Если Клиент Тогда
				Предупреждение("Документ можно распечатать только после его записи");
			#КонецЕсли
			Возврат;
		ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
			#Если Клиент Тогда
				Предупреждение("Недостаточно полномочий Для печати непроведенного документа!");
			#КонецЕсли
			Возврат;
		КонецЕсли;
		
		Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;
		
		// Получить экземпляр документа на печать
		Если ИмяМакета = "Заказ" Тогда
			ТабДокумент = ПечатьСчетаЗаказа(ИмяМакета);
		ИначеЕсли ИмяМакета = "ЗаказКорректировка" Тогда
			СКартинками = ложь;
			#Если клиент тогда
				Ответ = Вопрос("Печатать с картинками?",РежимДиалогаВопрос.ДаНет);
				Если ответ = КодВозвратаДиалога.Да тогда
					СКартинками = истина;
				Иначе
					СКартинками = ложь;
				КонецЕсли;
			#КонецЕсли	
			ТабДокумент = ПечатьСчетаЗаказаКорректировки(ИмяМакета,СКартинками);
		ИначеЕсли ИмяМакета = "Счет" Тогда
			СКартинками = ложь;
			#Если клиент тогда
				Ответ = Вопрос("Печатать с картинками?",РежимДиалогаВопрос.ДаНет);
				Если ответ = КодВозвратаДиалога.Да тогда
					СКартинками = истина;
				Иначе
					СКартинками = ложь;
				КонецЕсли;
			#КонецЕсли	
			
			ТабДокумент = ПечатьСчетаЗаказаКорректировки(ИмяМакета,СКартинками);
		ИначеЕсли ИмяМакета = "СчетАртикул" Тогда
			ТабДокумент = ПечатьСчетаЗаказаКорректировки(ИмяМакета);	
		ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
			
			ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
			ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
			Если ОбъектВнешнейФормы = Неопределено Тогда
				Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;
			
			ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
			ДвоичныеДанные.Записать(ИмяФайла);
			Обработка = ВнешниеОбработки.Создать(ИмяФайла);
			Обработка.СсылкаНаОбъект = Ссылка;
			ТабДокумент = Обработка.Печать();	
			
		КонецЕсли;
		
		НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект));
		
	КонецПроцедуры // Печать
	
	// Возвращает доступные варианты печати документа
	//
	// Вовращаемое значение:
	//  Струткура, каждая строка которой соответствует одному из вариантов печати
	//  
	Функция ПолучитьСписокПечатныхФорм() Экспорт
		
		СписокМакетов = Новый СписокЗначений;
		
		СписокМакетов.Добавить("Заказ", "Заказ покупателя");
		СписокМакетов.Добавить("ЗаказКорректировка", "Заказ покупателя (с учетом корректировок)");
		СписокМакетов.Добавить("Счет", "Счет на оплату (с учетом корректировок)");
		СписокМакетов.Добавить("СчетАртикул", "Счет на оплату (Артикул)");
		
		ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
		
		Если РольДоступна("Партнер") Тогда
			СписокМакетов.Удалить(СписокМакетов.НайтиПоЗначению(Справочники.ДополнительныеПечатныеФормы.НайтиПоНаименованию("Движения себестоимости (заказ)")));		
		КонецЕсли;
		
		Возврат СписокМакетов;
		
	КонецФункции // ПолучитьСписокПечатныхФорм()
	
	
	// Устанавливает дату оплаты относительно даты отгрузки согласно служебки Е Малышева
	
	Процедура УстановитьДатуОплатыПоУмолчанию() Экспорт
		
		СекундВСутках = 86400;
		МесяцГода=Месяц(ЭтотОбъект.Дата);
		
		Если МесяцГода =1 Тогда
			ДатаОплаты = ЭтотОбъект.Дата+ 90*СекундВСутках; // январь
		ИначеЕсли МесяцГода =2 Тогда
			ДатаОплаты = ЭтотОбъект.Дата+ 60*СекундВСутках; // февраль
		ИначеЕсли МесяцГода =3 Тогда
			ДатаОплаты = ЭтотОбъект.Дата+ 45*СекундВСутках; // март
		ИначеЕсли МесяцГода =4 Тогда
			ДатаОплаты = ЭтотОбъект.Дата+ 30*СекундВСутках;
		ИначеЕсли МесяцГода =5 Тогда
			ДатаОплаты = ЭтотОбъект.Дата+ 30*СекундВСутках;
		ИначеЕсли МесяцГода =6 Тогда
			ДатаОплаты = ЭтотОбъект.Дата+ 120*СекундВСутках;
		ИначеЕсли МесяцГода =7 Тогда
			ДатаОплаты = ЭтотОбъект.Дата+ 90*СекундВСутках;
		ИначеЕсли МесяцГода =8 Тогда
			ДатаОплаты = ЭтотОбъект.Дата+ 60*СекундВСутках;
		ИначеЕсли МесяцГода =9 Тогда
			ДатаОплаты = ЭтотОбъект.Дата+ 45*СекундВСутках;
		ИначеЕсли МесяцГода =10 Тогда
			ДатаОплаты = ЭтотОбъект.Дата+ 30*СекундВСутках;
		ИначеЕсли МесяцГода =11 Тогда
			ДатаОплаты = ЭтотОбъект.Дата+ 30*СекундВСутках;
		Иначе
			ДатаОплаты = ЭтотОбъект.Дата+ 120*СекундВСутках;
		КонецЕсли;	
		
	КонецПроцедуры	
#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Заполняет табличную часть при оперативном проведении, когда включены флаги авторазмещения и/или авторезервирования
//
// Параметры:
//  Отказ - отказ от дальнейшего проведения.
//
Процедура ЗаполнитьТабличныеЧастиПередПроведениемУпр(Отказ) Экспорт
	
	Если НЕ Авторезервирование И НЕ Авторазмещение Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапросСвободныйОстаток = Новый Запрос;
	ЗапросСвободныйОстаток.УстановитьПараметр("ПредпочтительноеРазмещение", Склад);
	ЗапросСвободныйОстаток.УстановитьПараметр("ДатаОтгрузки", ?(ЗначениеНеЗаполнено(ДатаОтгрузки), Дата, ДатаОтгрузки));
	ЗапросСвободныйОстаток.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	КопияТовары = Товары.Выгрузить();
	КопияТовары.Свернуть("Номенклатура",);
	КопияВозвратнаяТара = ВозвратнаяТара.Выгрузить();
	КопияВозвратнаяТара.Свернуть("Номенклатура",);
	
	// Сформируем массив номенклатуры по товарам и таре Для фильтров запросов.
	МассивНоменклатуры = КопияТовары.ВыгрузитьКолонку("Номенклатура");
	МассивНоменклатурыТара = КопияВозвратнаяТара.ВыгрузитьКолонку("Номенклатура");
	Для Каждого ЭлементТара Из МассивНоменклатурыТара Цикл
		МассивНоменклатуры.Добавить(ЭлементТара);
	КонецЦикла; 
	
	
	ТекстФильтраПоСкладам = "
	|(
	|	ВЫБРАТЬ
	|		ГруппыДоступности.Склад
	|	ИЗ
	|		РегистрСведений.СоставГруппДоступностиСкладов КАК ГруппыДоступности
	|	ГДЕ ГруппыДоступности.ГруппаДоступности = &ГруппаДоступностиСкладов)";
	глТекущийПользователь = ?(ЗначениеЗаполнено(глТекущийПользователь), глТекущийПользователь, Справочники.Пользователи.НайтиПоКоду("Робот (магазин)") );	//+++ 22.07.2013
	ГруппаДоступностиСкладов = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ГруппаДоступностиСкладов");
	
	ЗапросСвободныйОстаток.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	ЗапросСвободныйОстаток.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный);
	ЗапросСвободныйОстаток.УстановитьПараметр("ГруппаДоступностиСкладов", ГруппаДоступностиСкладов);
	
	Если Авторезервирование Тогда
		ЗапросСвободныйОстаток.Текст = 
		"ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Номенклатура,
		|	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры,
		|	ТоварыНаСкладахОстатки.Склад                      КАК Размещение,
		|	NULL                                              КАК ТоварТара,
		|	NULL                                              КАК ДоговорКонтрагента,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток          КАК Количество,
		|	ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток  КАК КоличествоРазмещенное,
		|	ТоварыКПередачеСоСкладовОстатки.КоличествоОстаток КАК КоличествоКПередаче,
		|	1                                                 КАК СортировкаРазмещение,
		|	ВЫБОР
		|		КОГДА ТоварыНаСкладахОстатки.Склад = &ПредпочтительноеРазмещение ТОГДА
		|			0
		|		ИНАЧЕ
		|			1
		|	КОНЕЦ                                             КАК СортировкаСклад,
		|	NULL                                              КАК ДатаПоступления
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(, 
		|		Номенклатура В (&МассивНоменклатуры)
		|" + ?(Не ЗначениеНеЗаполнено(ГруппаДоступностиСкладов), "И (Склад В" + ТекстФильтраПоСкладам + "
		|       ИЛИ Склад = &ПредпочтительноеРазмещение)", "") + ") КАК ТоварыНаСкладахОстатки	
		
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|   РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, Номенклатура В (&МассивНоменклатуры) 
		|                                                     И ДокументРезерва <> &ДокументСсылка) КАК ТоварыВРезервеНаСкладахОстатки
		|ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварыВРезервеНаСкладахОстатки.Номенклатура
		|   И ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры = ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры
		|   И ТоварыНаСкладахОстатки.Склад = ТоварыВРезервеНаСкладахОстатки.Склад
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|   РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(, Номенклатура В (&МассивНоменклатуры)) КАК ТоварыКПередачеСоСкладовОстатки
		|ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварыКПередачеСоСкладовОстатки.Номенклатура
		|   И ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры = ТоварыКПередачеСоСкладовОстатки.ХарактеристикаНоменклатуры
		|   И ТоварыНаСкладахОстатки.Склад = ТоварыКПередачеСоСкладовОстатки.Склад
		|";
		
	КонецЕсли; 
	Если Авторезервирование И Авторазмещение Тогда
		ЗапросСвободныйОстаток.Текст = ЗапросСвободныйОстаток.Текст +
		"
		|ОБЪЕДИНИТЬ ВСЕ
		|";
	КонецЕсли;
	Если Авторазмещение Тогда
		ЗапросСвободныйОстаток.Текст = ЗапросСвободныйОстаток.Текст +
		"ВЫБРАТЬ
		|	ЗаказыПоставщикамОстатки.Номенклатура,
		|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры,
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику                 КАК Размещение,
		|	ОстаткиРазмещенных.ТоварТара,
		|	ЗаказыПоставщикамОстатки.ДоговорКонтрагента,
		|	ЗаказыПоставщикамОстатки.КоличествоОстаток               КАК Количество,
		|	ОстаткиРазмещенных.КоличествоОстаток                     КАК КоличествоРазмещенное,
		|	0                                                        КАК КоличествоКПередаче,
		|	0                                                        КАК СортировкаРазмещение,
		|	1                                                        КАК СортировкаСклад,
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления КАК ДатаПоступления
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, 
		|		ЗаказПоставщику.ДатаПоступления <= &ДатаОтгрузки И ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ
		|		И Номенклатура В (&МассивНоменклатуры)
		|       И СтатусПартии = &СтатусПартии) КАК ЗаказыПоставщикамОстатки
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|   РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(, Номенклатура В (&МассивНоменклатуры)
		|                                                          И ЗаказПокупателя <> &ДокументСсылка) КАК ОстаткиРазмещенных
		|ПО ЗаказыПоставщикамОстатки.ЗаказПоставщику = ОстаткиРазмещенных.ЗаказПоставщику
		|" + ?(Не ЗначениеНеЗаполнено(ГруппаДоступностиСкладов), "
		|ГДЕ ЗаказыПоставщикамОстатки.ЗаказПоставщику.Склад В " + ТекстФильтраПоСкладам+ "
		|       ИЛИ ЗаказыПоставщикамОстатки.ЗаказПоставщику.Склад = &ПредпочтительноеРазмещение", "");
	КонецЕсли;
	Если Авторезервирование И Авторазмещение Тогда
		ЗапросСвободныйОстаток.Текст = ЗапросСвободныйОстаток.Текст + "
		|УПОРЯДОЧИТЬ ПО                 // Определяет стратегию авторезервирования и авторазмещения
		|	СортировкаРазмещение,       // Сначала в заказах, потом на складе
		|	СортировкаСклад,            // Сначала предпочтительный склад, затем остальные
		|	ДатаПоступления УБЫВ        // В порядке убывания даты отгрузки	";
	ИначеЕсли Авторезервирование Тогда
		ЗапросСвободныйОстаток.Текст = ЗапросСвободныйОстаток.Текст + "
		|УПОРЯДОЧИТЬ ПО                 // Определяет стратегию авторезервирования и авторазмещения
		|	СортировкаСклад             // Сначала предпочтительный склад, затем остальные ";
	ИначеЕсли Авторазмещение Тогда
		ЗапросСвободныйОстаток.Текст = ЗапросСвободныйОстаток.Текст + "
		|УПОРЯДОЧИТЬ ПО                 // Определяет стратегию авторезервирования и авторазмещения
		|	ДатаПоступления УБЫВ        // В порядке убывания даты отгрузки	";
	КонецЕсли;
	
	Таблица = ЗапросСвободныйОстаток.Выполнить().Выгрузить();
	
	// Сначала вычислим по каждой строке количества, которые можно разместить
	Для Каждого Строка из Таблица Цикл
		Строка.Количество = Строка.Количество - ?(Строка.КоличествоРазмещенное = NULL, 0, Строка.КоличествоРазмещенное)
		- ?(Строка.КоличествоКПередаче = NULL, 0, Строка.КоличествоКПередаче);
	КонецЦикла;
	
	Сч = 0;
	Пока Сч < Таблица.Количество() Цикл
		СтрокаТаблицы = Таблица.Получить(Сч);
		Если СтрокаТаблицы.Количество = 0 Тогда
			Таблица.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	
	ПустаяХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	
	// Сначала вычтем из найденных остатков количество, размещение по которому явно указано
	// в табличных частях документа. Для этого последовательно обойдем табличные части 
	// Товары и Возвратная тара.
	Для Сч = 0 По 1 Цикл
		
		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары = Ложь;
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
			
			// Сначала обходим все строки с размещением и Если размещение не указано, пропускаем строку.
			Если ЗначениеНеЗаполнено(СтрокаТЧ.Размещение) Тогда
				Продолжить;
			КонецЕсли; 
			
			// Если не указано авторазмещение в заказах, то пропускаем все строки, в которых указан заказ.
			Если НЕ Авторазмещение И ТипЗнч(СтрокаТЧ.Размещение) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				Продолжить;
			КонецЕсли; 
			
			// Если не указано авторезервирование на складах, то пропускаем все строки, в которых указан склад.
			Если НЕ Авторезервирование И ТипЗнч(СтрокаТЧ.Размещение) = Тип("СправочникСсылка.Склады") Тогда
				Продолжить;
			КонецЕсли; 
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
			СтруктураПоиска.Вставить("Размещение", СтрокаТЧ.Размещение);
			
			Если ЭтоТовары Тогда
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
			Иначе
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПустаяХарактеристикаНоменклатуры);
			КонецЕсли; 
			
			НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);
			
			// Погашаем количество в таблице. Пересчитаем количество в ТЧ в единицы хранения.
			КоличествоОсталосьПогасить = СтрокаТЧ.Количество * ?(ЭтоТовары, СтрокаТЧ.Коэффициент/СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 1);
			
			Для Каждого Строка Из НайденныеСтроки Цикл
				
				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если Строка.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				// Если это остаток из заказа, то дополнительно проверяем на тару/товар
				Если Строка.ТоварТара <> NULL Тогда
					Если ЭтоТовары И Строка.ТоварТара <> Перечисления.ТоварТара.Товар Тогда
						Продолжить;
					ИначеЕсли НЕ ЭтоТовары И Строка.ТоварТара <> Перечисления.ТоварТара.Тара Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли; 
				
				Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить/Строка.Количество;
				Иначе
					// Это ошибка: списываемое количество не должно быть больше остатка.
					// Такой документ не проведется оперативно.
					КоэффСписания = 1;
				КонецЕсли;
				
				СписанноеКоличество = Окр(Строка.Количество * КоэффСписания, 3, РежимОкругления.Окр15как20);
				
				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - СписанноеКоличество;
				
				Строка.Количество = Строка.Количество - СписанноеКоличество;
				
			КонецЦикла; 
			
			Если КоличествоОсталосьПогасить > 0 Тогда
				// Значит в документе неверно задано размещение. Заполнять не будем
				Возврат;
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Заполним массив, хранящий две таблицы значений, соответствующих авторазмещению товаров и тары
	МассивТаблицСтрок = Новый Массив(2);
	
	Для Сч = 0 По 1 Цикл
		
		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары = Ложь;
		КонецЕсли;
		
		ТаблицаТЧ = ТабличнаяЧасть.Выгрузить();
		ТаблицаТЧ.Колонки.Добавить("КоличествоЕдиницХранения");
		
		МассивТаблицСтрок[Сч] = ТабличнаяЧасть.Выгрузить();
		МассивТаблицСтрок[Сч].Очистить();
		МассивТаблицСтрок[Сч].Колонки.Добавить("ИндексИсходнойСтроки");
		
		Для Каждого СтрокаТЧ Из ТаблицаТЧ Цикл
			
			Если НЕ ЗначениеНеЗаполнено(СтрокаТЧ.Размещение) Тогда
				Продолжить;
			КонецЕсли; 
			
			// Пересчитаем в единицы хранения
			СтрокаТЧ.КоличествоЕдиницХранения = СтрокаТЧ.Количество * ?(ЭтоТовары, СтрокаТЧ.Коэффициент/СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 1);
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
			
			Если ЭтоТовары Тогда
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
			Иначе
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПустаяХарактеристикаНоменклатуры);
			КонецЕсли; 
			
			НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);
			
			// Погашаем количество в таблице
			КоличествоОсталосьПогасить               = СтрокаТЧ.КоличествоЕдиницХранения;
			СуммаОсталосьПогасить                    = СтрокаТЧ.Сумма;
			
			// Погашаем количество в таблице, записывая размещение
			Для Каждого Строка Из НайденныеСтроки Цикл
				
				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если Строка.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				// Если это остаток по заказу поставщику, отберем товар и тару
				Если ЭтоТовары И Строка.ТоварТара = Перечисления.ТоварТара.Тара  Тогда
					Продолжить;
				ИначеЕсли НЕ ЭтоТовары И Строка.ТоварТара = Перечисления.ТоварТара.Товар  Тогда
					Продолжить;
				КонецЕсли;
				
				Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить / Строка.Количество;
				Иначе
					КоэффСписания = 1;
				КонецЕсли;
				
				СписанноеКоличество = Окр(Строка.Количество * КоэффСписания, 3, РежимОкругления.Окр15как20);
				
				// Добавляем строку с данными о размещенном количестве
				НоваяСтрока = МассивТаблицСтрок[Сч].Добавить();
				НоваяСтрока.ИндексИсходнойСтроки = ТаблицаТЧ.Индекс(СтрокаТЧ);
				
				НоваяСтрока.Номенклатура = СтрокаТЧ.Номенклатура;
				Если ЭтоТовары Тогда
					НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
					НоваяСтрока.СтавкаНДС                  = СтрокаТЧ.СтавкаНДС;
					НоваяСтрока.ЕдиницаИзмерения           = СтрокаТЧ.ЕдиницаИзмерения;
					НоваяСтрока.Коэффициент                = СтрокаТЧ.Коэффициент;
					НоваяСтрока.ПроцентСкидкиНаценки       = СтрокаТЧ.ПроцентСкидкиНаценки;
					НоваяСтрока.ПроцентАвтоматическихСкидок= СтрокаТЧ.ПроцентАвтоматическихСкидок;
					НоваяСтрока.УсловиеАвтоматическойСкидки         = СтрокаТЧ.УсловиеАвтоматическойСкидки;
					НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = СтрокаТЧ.ЗначениеУсловияАвтоматическойСкидки;
				КонецЕсли;
				НоваяСтрока.Цена = СтрокаТЧ.Цена;
				
				НоваяСтрока.Размещение  = Строка.Размещение;
				НоваяСтрока.Количество  = СписанноеКоличество;
				
				КоэффПогашения = СписанноеКоличество / КоличествоОсталосьПогасить;
				
				НоваяСтрока.Сумма                    = Окр(СуммаОсталосьПогасить * КоэффПогашения, 2 ,1);
				
				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - СписанноеКоличество;
				СуммаОсталосьПогасить = СуммаОсталосьПогасить - НоваяСтрока.Сумма;
				
				// Уменьшаем количество в исходной строке
				СтрокаТЧ.Количество = СтрокаТЧ.КоличествоЕдиницХранения - СписанноеКоличество;
				
				// Уменьшаем количество в строке остатков
				Строка.Количество   = Строка.Количество - СписанноеКоличество;
				
			КонецЦикла;
			Если КоличествоОсталосьПогасить > 0 Тогда
				// Добавляем строку с данными о размещенном количестве
				НоваяСтрока = МассивТаблицСтрок[Сч].Добавить();
				НоваяСтрока.ИндексИсходнойСтроки = ТаблицаТЧ.Индекс(СтрокаТЧ);
				НоваяСтрока.Номенклатура         = СтрокаТЧ.Номенклатура;
				
				Если ЭтоТовары Тогда
					НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
					НоваяСтрока.СтавкаНДС                  = СтрокаТЧ.СтавкаНДС;
					НоваяСтрока.ЕдиницаИзмерения           = СтрокаТЧ.ЕдиницаИзмерения;
					НоваяСтрока.Коэффициент                = СтрокаТЧ.Коэффициент;
					НоваяСтрока.ПроцентСкидкиНаценки       = СтрокаТЧ.ПроцентСкидкиНаценки;
					НоваяСтрока.ПроцентАвтоматическихСкидок= СтрокаТЧ.ПроцентАвтоматическихСкидок;
					НоваяСтрока.УсловиеАвтоматическойСкидки         = СтрокаТЧ.УсловиеАвтоматическойСкидки;
					НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = СтрокаТЧ.ЗначениеУсловияАвтоматическойСкидки;
				КонецЕсли;
				НоваяСтрока.Цена = СтрокаТЧ.Цена;
				
				
				НоваяСтрока.Количество = КоличествоОсталосьПогасить;
				
				НоваяСтрока.Сумма                    = Окр(СуммаОсталосьПогасить, 2, 1);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	// Изменяем табличную часть
	Для Сч = 0 По 1 Цикл
		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары = Ложь;
		КонецЕсли;
		
		ТекИндексИсходнойСтроки = Неопределено;
		Для Каждого Строка Из МассивТаблицСтрок[Сч] Цикл
			
			// Если строка с таким индексом уже обрабатывалась, то добавляем новую
			Если ТекИндексИсходнойСтроки = Строка.ИндексИсходнойСтроки Тогда
				Стр = ТабличнаяЧасть[Строка.ИндексИсходнойСтроки];
				РедактируемаяСтрока = ТабличнаяЧасть.Добавить();
				РедактируемаяСтрока.Номенклатура = Стр.Номенклатура;
				Если ЭтоТовары Тогда
					РедактируемаяСтрока.ХарактеристикаНоменклатуры = Стр.ХарактеристикаНоменклатуры;
					РедактируемаяСтрока.СтавкаНДС = Стр.СтавкаНДС;
				КонецЕсли;
			Иначе
				РедактируемаяСтрока = ТабличнаяЧасть[Строка.ИндексИсходнойСтроки];
			КонецЕсли; 
			
			РедактируемаяСтрока.Размещение = Строка.Размещение;
			
			КоличествоВЕдиницахДокумента = Строка.Количество * ?(ЭтоТовары, Строка.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент/Строка.Коэффициент, 1);
			
			Если РедактируемаяСтрока.Количество = КоличествоВЕдиницахДокумента Тогда
				Продолжить;
			КонецЕсли;
			
			РедактируемаяСтрока.Количество  = КоличествоВЕдиницахДокумента;
			
			Если ЭтоТовары Тогда
				РедактируемаяСтрока.ЕдиницаИзмерения            = Строка.ЕдиницаИзмерения;
				РедактируемаяСтрока.Коэффициент                 = Строка.Коэффициент;
				РедактируемаяСтрока.СтавкаНДС                   = Строка.СтавкаНДС;
				РедактируемаяСтрока.ПроцентСкидкиНаценки        = Строка.ПроцентСкидкиНаценки;
				РедактируемаяСтрока.ПроцентАвтоматическихСкидок = Строка.ПроцентАвтоматическихСкидок;
				РедактируемаяСтрока.УсловиеАвтоматическойСкидки         = Строка.УсловиеАвтоматическойСкидки;
				РедактируемаяСтрока.ЗначениеУсловияАвтоматическойСкидки = Строка.ЗначениеУсловияАвтоматическойСкидки;
			КонецЕсли;
			
			Если ЭтоТовары Тогда
				
				РедактируемаяСтрока.Сумма                             = Строка.Сумма;
				РедактируемаяСтрока.Цена                              = Строка.Цена;
				
				РассчитатьСуммуНДСТабЧасти(РедактируемаяСтрока, ЭтотОбъект);
				
				// Рассчитываем плановую себестоимость.
				РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(РедактируемаяСтрока, ЭтотОбъект, мВалютаРегламентированногоУчета);
				
			Иначе
				РедактируемаяСтрока.Сумма = Строка.Сумма;
				РедактируемаяСтрока.Цена = ?(РедактируемаяСтрока.Количество <> 0, РедактируемаяСтрока.Сумма/РедактируемаяСтрока.Количество, 0);
			КонецЕсли;
			
			ТекИндексИсходнойСтроки = Строка.ИндексИсходнойСтроки;
			
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТабличныеЧастиПередПроведениемУпр()

// Заполнение документа по упр. основанию
//
Процедура ЗаполнитьДокументПоОснованиюУпр(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.Событие") Тогда
		КонтактноеЛицо    = Основание.КонтактноеЛицо;
		Контрагент        = Основание.Контрагент;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДокументПоОснованиюУпр()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// По виду операции определяет статус партии товаров (не возвратная тара!)
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Значение перечисления "Статусы партии товаров".
//
Функция ОпределитьСтатусПартии() 
	
	Возврат Перечисления.СтатусыПартийТоваров.Купленный;
	
КонецФункции // ОпределитьСтатусПартииПрихода()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки Для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)
	
	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	// Вызываем отдельные процедуры подготовки Для упр. учета
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;
	
КонецФункции // ПодготовитьТаблицуТоваров()

// Добавляет в таблицу колонки, необходимые Для упр. проведения.
//
Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)
	
	// Надо добавить колонки.
	ТаблицаТоваров.Колонки.Добавить( "СуммаБезНДС"        , ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов" , ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"            , ПолучитьОписаниеТиповЧисла(15,2));
	
	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента,
		СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		СтруктураШапкиДокумента.КратностьДокумента,
		СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СуммаНДС = СтрокаТаблицы.НДС;
		СтрокаТаблицы.НДС = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента,
		СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		СтруктураШапкиДокумента.КратностьДокумента,
		СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СуммаСНДС = СтрокаТаблицы.Сумма + ?(УчитыватьНДС И Не СуммаВключаетНДС, СуммаНДС, 0);
		
		СтрокаТаблицы.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СуммаСНДС, ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		СтруктураШапкиДокумента.КурсДокумента,
		КурсВзаиморасчетов, 
		СтруктураШапкиДокумента.КратностьДокумента,
		КратностьВзаиморасчетов);
		
		СтрокаТаблицы.СуммаУпр = ПересчитатьИзВалютыВВалюту(СуммаСНДС, ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента,
		СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		СтруктураШапкиДокумента.КратностьДокумента,
		СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки Для проведения.
//
// Параметры: 
//  РезультатЗапросаПоУслугам - результат запроса по табличной части "Услуги",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента)
	
	ТаблицаУслуг = РезультатЗапросаПоУслугам.Выгрузить();
	
	// Надо добавить колонки "СуммаБезНДС".
	ТаблицаУслуг.Колонки.Добавить("СуммаБезНДС", ПолучитьОписаниеТиповЧисла(15,2));
	
	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаУслуг Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
	КонецЦикла;
	
	// Вызываем отдельные процедуры подготовки Для упр. учета
	ПодготовитьТаблицуУслугУпр(ТаблицаУслуг, СтруктураШапкиДокумента);
	
	Возврат ТаблицаУслуг;
	
КонецФункции // ПодготовитьТаблицуУслуг()

// Добавляет в таблицу колонки, необходимые Для упр. проведения.
//
Процедура ПодготовитьТаблицуУслугУпр(ТаблицаУслуг, СтруктураШапкиДокумента)
	
	// Надо добавить колонки.
	ТаблицаУслуг.Колонки.Добавить("СуммаВзаиморасчетов", ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаУслуг.Колонки.Добавить("СуммаУпр",            ПолучитьОписаниеТиповЧисла(15,2));
	
	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаУслуг Цикл
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента,
		СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		СтруктураШапкиДокумента.КратностьДокумента,
		СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.НДС = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента,
		СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		СтруктураШапкиДокумента.КратностьДокумента,
		СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СуммаСНДС = СтрокаТаблицы.Сумма + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		
		СтрокаТаблицы.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СуммаСНДС, ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		СтруктураШапкиДокумента.КурсДокумента,
		КурсВзаиморасчетов, 
		СтруктураШапкиДокумента.КратностьДокумента,
		КратностьВзаиморасчетов);
		
		СтрокаТаблицы.СуммаУпр = ПересчитатьИзВалютыВВалюту(СуммаСНДС, ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента,
		СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		СтруктураШапкиДокумента.КратностьДокумента,
		СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуУслугУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки Для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)
	
	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();
	
	// Надо добавить колонки.
	ТаблицаТары.Колонки.Добавить("СуммаБезНДС",                ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("НДС",                        ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТары.Колонки.Добавить("СерияНоменклатуры",          Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	
	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма; // Сумма по таре всегда с НДС в валюте взаиморасчетов
	КонецЦикла;
	
	// Вызываем отдельные процедуры подготовки Для упр. учета
	ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТары;
	
КонецФункции // ПодготовитьТаблицуТары()

// Добавляет в таблицу колонки, необходимые Для упр. проведения.
//
Процедура ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента)
	
	// Надо добавить колонки.
	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов", ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("СуммаУпр",            ПолучитьОписаниеТиповЧисла(15,2));
	
	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента,
		СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		СтруктураШапкиДокумента.КратностьДокумента,
		СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.НДС = 0;
		
		СтрокаТаблицы.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		СтруктураШапкиДокумента.КурсДокумента,
		КурсВзаиморасчетов, 
		СтруктураШапкиДокумента.КратностьДокумента,
		КратностьВзаиморасчетов);
		
		СтрокаТаблицы.СуммаУпр = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента,
		СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		СтруктураШапкиДокумента.КратностьДокумента,
		СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуТарыУпр()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	
	СтруктураОбязательныхПолей = 
	Новый Структура("Организация, ВалютаДокумента, 
	|Контрагент, ДоговорКонтрагента, КратностьВзаиморасчетов");
	
	Если Константы.НеПроводитьЗаказБезВыбраннойКубатуры.Получить() Тогда
		
		СтруктураОбязательныхПолей.Вставить("КубатураАвтомобиля");
		
	КонецЕсли; 
	
	Если Константы.ЗапретПроведенияЗаказаБезТипаЦены.Получить() Тогда
		
		СтруктураОбязательныхПолей.Вставить("ТипЦен");
		
	КонецЕсли; 
	
	// { Лапенков -20080909
	//Орлов++ 20131126
	//Если не Константы.РозничнаяБаза.Получить() Тогда
	////+++ 25.04.2012	СтруктураОбязательныхПолей.Вставить("ДатаОтгрузки");
	//	СтруктураОбязательныхПолей.Вставить("ДатаОплаты");
	//КонецЕсли;	
	//Орлов-- 20131126
	
	// Проверить заполнение подразделения, Если нужно. 
	Если Константы.ОбязательнаяУстановкаПодразделений.Получить() Тогда 
		СтруктураОбязательныхПолей.Вставить("Подразделение");
	КонецЕсли;
	
	// } Лапенков -20080909 
	
	
	// Склад заполняем только, Если у нас есть строки в таблице "Товары" или "Возвратная тара"
	Если (Товары.Количество() > 0 ИЛИ ВозвратнаяТара.Количество() > 0)
		И НЕ Константы.ОплатыРаспределяютМенеджеры.Получить() Тогда // Для ЯТШ убираем 
		СтруктураОбязательныхПолей.Вставить("Склад");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам 
		Или СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ОшибкаПриПроведении("Документ можно выписывать только по договору, взаиморасчеты по которому ведутся  по заказам или по договору в целом!", Отказ, Заголовок);
	КонецЕсли;
	
	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения упр. реквизитов шапки
//
Процедура ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		ОшибкаПриПроведении("Документ не может осуществлять заказ с неавтоматизированной торговой точки!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапкиУпр()

Процедура ПроверитьПовторяющиесяТовары(Отказ)
	
	//+++ 09.03.2016 ===============проверка ДО ЗАПИСИ=================================
	//таблТов = ЭтотОбъект.Товары.Выгрузить();
	//таблТов2 = таблТов.Скопировать();
	//таблТов2.Свернуть("Номенклатура", "Количество");
	
	//Если таблТов.Количество()> таблТов2.Количество() Тогда
	//		Отказ=не ЭтотОбъект.ПометкаУдаления; // 22.03.2016
	
	//		Отказ = НЕ ( //РольДоступна("ПолныеПрава") или 
	//					  РольДоступна("ПравоЗавершенияРаботыПользователей") );
	//		
	//	#Если Клиент Тогда		
	//	Для каждого стр2 из таблТов2 Цикл
	//		Для каждого стр1 из таблТов Цикл
	//			Если стр1.Номенклатура = стр2.Номенклатура
	//				и стр1.Количество <> стр2.Количество Тогда
	//		Сообщить("Товар "+Строка(стр1.Номенклатура.Код)+" - " +Строка(стр1.Номенклатура) +" повторяется! Количество: "+строка(стр1.Количество)+" из "+строка(стр2.Количество));
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЦикла;
	//	#КонецЕсли
	
	//КонецЕсли;
	
	
	//+++ 15.06.2016 =====БЛОКИРОВКА ДУБЛЕЙ - Никогда и никому - не даём даже записать такой "кривой" заказ (можно только удалять!)===========================
	Если не Отказ Тогда
		ТабБезДублей = Товары.Выгрузить(); 
		ТабБезДублей.Свернуть("Номенклатура","Количество");
		Если ТабБезДублей.Количество()<Товары.Количество() Тогда // Есть дубли! 
			
			Отказ = (ЭтотОбъект.Дата>'20160615'); //+++ 12.07.2016 - только Если дата документа
			
			//Отказ = Истина; //НЕ РольДоступна("ПравоЗавершенияРаботыПользователей"); // НИКОМУ НЕ ДОСТУПНО!
			
			#Если Клиент Тогда
				Для каждого стр1 из ТабБезДублей Цикл
					стр2 = Товары.НайтиСтроки( новый Структура("Номенклатура", стр1.Номенклатура) );
					Если стр2.Количество()>1 Тогда
						сообщить("Запрещены Дубли строк с одинаковым товаром! Товар: "+строка(стр1.Номенклатура.Код)+" - "+строка(стр1.Номенклатура)+" - повторяется "+строка(стр2.Количество())+" раз!", СтатусСообщения.Внимание);
					КонецЕсли;
				КонецЦикла;
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

//+++ 17.11.2014 - проверка и переопределение цен по Константам Для Роботов...
//при проведении
Процедура ПроверитьНулевыеЦены(Отказ) экспорт
	
	//04.10.2017 - надо брать данные из ОБЪЕКТА!
	таблИзЗаказа = ЭтотОбъект.Товары.Выгрузить(,"Номенклатура, Цена, НомерСтроки");
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС5 = Новый ОписаниеТипов(Массив, , Новый КвалификаторыСтроки(5) );
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС7 = Новый ОписаниеТипов(Массив, , Новый КвалификаторыСтроки(7));
	таблИзЗаказа.Колонки.Добавить("НоменклатураВидТовара",ОписаниеТиповС5,"НоменклатураВидТовара", 5 ); // Диски, Шины, АКБ
	таблИзЗаказа.Колонки.Добавить("НоменклатураКод", ОписаниеТиповС7,"НоменклатураКод",7 );//9120102
	
	для каждого стр1 из таблИзЗаказа цикл
		стр1.НоменклатураВидТовара = строка(стр1.Номенклатура.ВидТовара); 
		стр1.НоменклатураКод 	   = стр1.Номенклатура.Код; 
	КонецЦикла;	
	
	Запрос = новый Запрос;
	Запрос.Текст="Выбрать
	|тз.Номенклатура, тз.Цена, тз.НомерСтроки, ТЗ.НоменклатураВидТовара, ТЗ.НоменклатураКод 
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ &таблИзЗаказа как ТЗ;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяТовары.НоменклатураКод НоменклатураКод,
	|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	//сразу рассчитываем "правильную" цену по константам
	
	//+++ 25.05.2017 - Доколин и Горохов - ЗАГЛУШКА 25 тыс.!
	| Выбор когда  (ЗаказПокупателяТовары.НоменклатураВидТовара = ""Шины"" и ЗаказПокупателяТовары.Цена<&минШины) Тогда 25000
	
	|	      когда (ЗаказПокупателяТовары.НоменклатураВидТовара = ""Диски"" и ЗаказПокупателяТовары.Цена<&минДиски) Тогда &минДиски
	|	      когда (ЗаказПокупателяТовары.НоменклатураВидТовара = ""АКБ"" и ЗаказПокупателяТовары.Цена<&минАКБ) Тогда &минАКБ
	|        Иначе ЗаказПокупателяТовары.Цена 
	| Конец как ЦенаНов,
	|
	|ЗаказПокупателяТовары.Цена как Цена
	|
	|,	ЗаказПокупателяТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ_Товары КАК ЗаказПокупателяТовары
	
	|ГДЕ
	//+++ 04.10.2017 - так нельзя!  |	ЗаказПокупателяТовары.Ссылка = &Ссылка
	|	 ( ЗаказПокупателяТовары.Цена <= 1
	|	   ИЛИ ЗаказПокупателяТовары.Цена >= 1000000
	|	   ИЛИ (ЗаказПокупателяТовары.НоменклатураВидТовара = ""Шины""  и ЗаказПокупателяТовары.Цена<&минШины)
	|	   ИЛИ (ЗаказПокупателяТовары.НоменклатураВидТовара = ""Диски"" и ЗаказПокупателяТовары.Цена<&минДиски)
	|	   ИЛИ (ЗаказПокупателяТовары.НоменклатураВидТовара = ""АКБ""   и ЗаказПокупателяТовары.Цена<&минАКБ)
	|    )
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|АВТОУПОРЯДОЧИВАНИЕ" ;
	Запрос.УстановитьПараметр("таблИзЗаказа", таблИзЗаказа);
	// Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	минШины = Константы.МинимальнаяЦенаШины.Получить() ;     
	минДиски= Константы.МинимальнаяЦенаДиска.Получить();
	минАКБ  = Константы.МинимальнаяЦенаАКБ.Получить()  ;
	
	//+++ 04.02.2015 перевод констант в $ или евро...
	Если ЭтотОбъект.Контрагент.Экспорт 
		и (ЭтотОбъект.ВалютаДокумента<>справочники.Валюты.НайтиПоКоду("643")
		или (ЭтотОбъект.КурсВзаиморасчетов>0 и ЭтотОбъект.КурсВзаиморасчетов<>1)
		) Тогда
		минДиски= 10;  // 10$ или евро >= 399р.
		минШины = 20;  // 20$ или евро >=
		минАКБ  = 20;  // 20$ или евро >= 1000р.
	КонецЕсли;	 
	
	Запрос.УстановитьПараметр("минШины",  минШины );     
	Запрос.УстановитьПараметр("минДиски", минДиски);
	Запрос.УстановитьПараметр("минАКБ",   минАКБ  );
	
	Результат = Запрос.Выполнить();
	выборка = Результат.Выбрать();	
	
	Если выборка.Количество()=0 Тогда
		возврат;
	КонецЕсли;	
	
	//ответственный уже есть после записи документа...
	//Для web-служб  ответственного нет, но есть полные права - запишется с 0 ценой?!
	
	ЭтоРобот = ( Найти(строка(ссылка.Ответственный),"Робот")>0 );    
	УстанавливатьМинЦену = ЭтоРобот или (НЕ Контрагент.НеКонтроллироватьЦеныПродажи);
	
	Пока Выборка.Следующий() Цикл
		Если РольДоступна("ПравоЗавершенияРаботыПользователей") или ТипЗаказа = 12 Тогда  // ТОЛЬКО Для IT-отдела можно делать любую цену!			
			#Если Клиент Тогда
				сообщить("Заказ № "+строка(ссылка.Номер)+" - проведен! Но в строке № "+строка(выборка.НомерСтроки)
				+" Товар: "+СокрЛП(выборка.НоменклатураКод)+" - "+СокрЛП(выборка.Номенклатура)+" - Цена: "+формат(выборка.Цена,"ЧДЦ=2; ЧН=0.00")+"р. - Меньше минимально-допустимой!", СтатусСообщения.Внимание);
			#КонецЕсли	
			Продолжить;
		КонецЕсли;	
		
		
		Если УстанавливатьМинЦену тогда
			#Если Клиент Тогда
				сообщить("В строке № "+строка(выборка.НомерСтроки)+" Товар: "+СокрЛП(выборка.НоменклатураКод)+" - "+СокрЛП(выборка.Номенклатура)+" - Цена: "+формат(выборка.Цена,"ЧДЦ=2")+"р. изменена до минимально-допустимую: "+формат(выборка.ЦенаНов,"ЧДЦ=2")+"р.", СтатусСообщения.Информация);
			#КонецЕсли	
			стр1 = Товары[выборка.НомерСтроки - 1];
			стр1.Цена = Выборка.ЦенаНов;
			
			РассчитатьСуммуТабЧасти(стр1,    Ссылка);
			РассчитатьСуммуНДСТабЧасти(стр1, Ссылка);
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры
//+++)

//+++( ищем хар-ку и Если она 1 то вставляем
процедура АвтоЗаполнениеХарактеристики(Стр1, ВывестиСообщение=ЛОЖЬ) Экспорт
	Если НЕ ЗначениеЗаполнено(стр1.Номенклатура) Тогда //нет товара
		возврат;
	КонецЕсли;
	
	Если не стр1.Номенклатура.ВестиУчетПоХарактеристикам Тогда
		возврат;
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(стр1.ХарактеристикаНоменклатуры) 
	//  и (стр1.ХарактеристикаНоменклатуры.Владелец = стр1.Номенклатура) Тогда  //уже заполнено
	//	возврат;
	//КонецЕсли;
	
	//+++ 17.12.2012 определение склада из строки или из шапки!
	склад1 = ?(ЗначениеЗаполнено(Стр1.Размещение) и ТипЗнч(Стр1.Размещение)=Тип("СправочникСсылка.Склады"), Стр1.Размещение, Склад);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
	|	СУММА(ЕСТЬNULL(ТоварыОрганизацийОстатки.КоличествоОстаток, 0)) КАК КоличествоОстаток,
	|   ТоварыОрганизацийОстатки.Склад как Склад
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	
	//+++( 17.12.2012   изменено остатки по орг на остатки по складу!
	
	//|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизаций.Остатки(
	//|				&Дата,
	//|				Номенклатура = &Владелец
	//|					И Организация = &Организация
	//|					И Качество = &Качество) КАК ТоварыОрганизацийОстатки
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				&Дата,
	|				Номенклатура = &Владелец
	|					"+?(ЗначениеЗаполнено(Склад1), "И Склад = &Склад","")+"
	|					И Качество = &Качество) КАК ТоварыОрганизацийОстатки
	//+++)
	|
	|		ПО (ТоварыОрганизацийОстатки.ХарактеристикаНоменклатуры = ХарактеристикиНоменклатуры.Ссылка)
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец = &Владелец
	|	И (НЕ ХарактеристикиНоменклатуры.ПометкаУдаления)
	|	И ЕСТЬNULL(ТоварыОрганизацийОстатки.КоличествоОстаток, 0) > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ХарактеристикиНоменклатуры.Ссылка,
	|   ТоварыОрганизацийОстатки.Склад 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Характеристика
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Владелец", стр1.Номенклатура);
	
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата()) );
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Склад", склад1);
	Запрос.УстановитьПараметр("Качество", справочники.Качество.Новый);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда   // первая ненулевая хар-ка
		
		//поиск характеристики 
		Если не ЗначениеЗаполнено(стр1.ХарактеристикаНоменклатуры) Тогда
			стр1.ХарактеристикаНоменклатуры = выборка.Характеристика;
			Если стр1.Количество = 0 Тогда
				стр1.Количество = Выборка.КоличествоОстаток; // все количество 1-ой характеристики
			КонецЕсли;
			
			стр1.Размещение = Выборка.Склад; //+++
			
		Иначе //заполнено
			ИндексХарВВыборке=0;
			Если (стр1.ХарактеристикаНоменклатуры = выборка.Характеристика) и (стр1.Размещение = выборка.Склад) Тогда //+++  и (стр1.Размещение = выборка.Склад) 
				флНашли = истина;
			Иначе //ищем дальше в выборке нашу строку
				пока Выборка.Следующий() Цикл
					ИндексХарВВыборке = ИндексХарВВыборке + 1;
					Если стр1.ХарактеристикаНоменклатуры = выборка.Характеристика  и (стр1.Размещение = выборка.Склад) Тогда  //+++  и (стр1.Размещение = выборка.Склад)
						флНашли = истина;
						прервать; // первая попавшаяся хар-ка
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;	
		
		
		Если стр1.Количество>0 Тогда
			//Если НЕТ настройки "Разрешить превышение количества товара в заказе покупателя"
			Если стр1.Количество>Выборка.КоличествоОстаток Тогда
				
				Если Выборка.Количество()>1 Тогда
					//Сообщить("Для номенклатуры: "+строка(стр1.номерклатура)+" есть еще "+строка(Выборка.Количество()-1)+" характеристик. Разбейте количество на несколько характеристик!");
					НадоКол = стр1.Количество;
					Выборка.Сбросить(); i=0;
					пока Выборка.Следующий() и НадоКол>0 Цикл
						Если ( флНашли и (i=ИндексХарВВыборке))
							или (НЕ флНашли и (i=0) )Тогда
							стр2 = стр1;
							КолХар = Выборка.КоличествоОстаток; 
						Иначе
							// ищем в таблице, вдруг уже есть такая характеристика
							КолХар2 = 0;   флНашли2=ложь; 
							Для каждого стрТовары из Товары Цикл
								Если стрТовары.Номенклатура=стр1.Номенклатура
									и стрТовары.ХарактеристикаНоменклатуры=выборка.Характеристика 
									и (стрТовары.Размещение = выборка.Склад) Тогда   //+++ и (стр1.Размещение = выборка.Склад)
									флНашли2=Истина; 
									прервать; 
									// КолХар2 = КолХар2+стрТовары.Количество; // Если дублируются - находим полное количество
								КонецЕсли;
							КонецЦикла;
							
							Если флНашли2 Тогда
								// в последнюю строку добавляем разность Всего по хар-ке и кол. уже имеющейся хар-ки вцелом
								колХар  = Выборка.КоличествоОстаток - стрТовары.Количество; //  - (КолХар2 - стрТовары.Количество);
								стр2    = стрТовары; 
							Иначе 	  
								стр2 = Товары.Добавить();
								ЗаполнитьЗначенияСвойств(стр2, стр1);
								стр2.ХарактеристикаНоменклатуры = выборка.Характеристика;
								стр2.Размещение = выборка.Склад; //+++ 17.01.2012
								КолХар = Выборка.КоличествоОстаток;
							КонецЕсли;
						КонецЕсли;	  
						
						колСпис = мин(НадоКол, КолХар);
						стр2.Количество = колСпис;
						НадоКол =НадоКол - колСпис;
						Если ВывестиСообщение Тогда 
							Сообщить(строка(стр2.номерСтроки)+") Количество товара Для хар-ки: "+строка(стр2.ХарактеристикаНоменклатуры)+" по складу "+строка(выборка.Склад)+" равно "+строка(Выборка.КоличествоОстаток) +"шт. Списывается "+Строка(стр2.Количество)+" шт.", СтатусСообщения.Информация);
						КонецЕсли;
						i=i+1;	
					КонецЦикла;	
					Если НадоКол>0 И ВывестиСообщение Тогда 
						Сообщить(строка(стр1.номерСтроки)+") Количество товара по характеристикам - НЕ достаточно! Не хватает "+строка(НадоКол) +" шт.", СтатусСообщения.Внимание);
					КонецЕсли;
					
				Иначе // 1 строка и количество не хватает
					Если ВывестиСообщение Тогда 
						Сообщить(строка(стр1.номерСтроки)+") Количество товара Для хар-ки: "+строка(стр1.ХарактеристикаНоменклатуры)+" равно "+?(флНашли, строка(Выборка.КоличествоОстаток),"0") +"шт. Не хватает "+Строка(стр1.Количество-?(флНашли,Выборка.КоличествоОстаток,0))+" шт.", СтатусСообщения.Внимание);
					КонецЕсли;
				КонецЕсли;
				
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	//+++) //АвтоЗаполнениеХарактеристики()


// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные Для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "Товары";
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество, Сумма, Цена, ЕдиницаИзмерения");
	
	КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);
	
	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;
	
	ПроверитьНулевыеЦены(Отказ); //+++ 17.11.2014 - Для Роботов - установка мин.цены Для 0 цен!
	
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//+++( 19.10.2011  проверка на наличие учета и заполненности Характеристики
	// 30.01.2012 - раскомментарено, убрано автозаполнение, только Отказ!
	Для каждого стр1 из Товары Цикл
		Если стр1.Номенклатура.ВестиУчетПоХарактеристикам Тогда
			Если НЕ ЗначениеЗаполнено(стр1.ХарактеристикаНоменклатуры) Тогда
				Сообщить(строка(стр1.НомерСтроки)+") Для номенклатуры: "+строка(стр1.Номенклатура.Код)+" - "+строка(стр1.Номенклатура)+" - не заполнено поле ""Характеристика""! ",СтатусСообщения.Внимание);
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; //+++)		
	
	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь не должно быть размещений по НТТ
	ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  ТаблицаПоУслугам        - таблица значений, содержащая данные Для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "Услуги";
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество, Сумма, Содержание");
	
	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;
	
	КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);
	
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь товаров быть не должно.
	ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные Для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");
	
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// Здесь не должно быть размещений по НТТ
	ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// По возвратной таре не должен вестись учет по характеристикам.
	ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// Проверяет правильность заполнения строк табличной части "Материалы".
//
// Параметры: 
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиМатериалы(ТаблицаМатериалы, Отказ, Заголовок)
	
	РеквизитыТабМатериалы = "Номенклатура, Количество";
	
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Материалы", Новый Структура(РеквизитыТабМатериалы), Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "Материалы", ТаблицаМатериалы, Отказ, Заголовок);
	
	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Материалы", ТаблицаМатериалы, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиМатериалы()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные Для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные Для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре,
	Отказ, Заголовок);
	
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, 
	ТаблицаПоТаре, Отказ, Заголовок);
	
	//Если СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
	
	//	ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, 
	//									  ТаблицаПоТаре, Отказ, Заголовок);
	
	//	УчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата);
	
	//	Если УчетнаяПолитика.СписыватьПартииПриПроведенииДокументов Тогда
	
	//		ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
	
	//		ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
	//		ЗаписьРегистрации.Период = Дата;
	//		ЗаписьРегистрации.Регистратор = Ссылка;
	
	//	Иначе
	//		
	//		// В неоперативном режиме границы последовательностей сдвигаются назад, Если они позже документа.
	//		Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
	//			СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация, Истина, Ложь, Ложь)
	//		КонецЕсли;
	
	//	КонецЕсли;
	
	//КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура формирует движение в рег. РасчетыСКонтрагентами
//
Процедура ДвиженияПоРасчетамСКонтрагентами( СтруктураШапкиДокумента, Отказ)
	
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
		
		// Движения по документу.
		
		НаборДвижений = Движения.РасчетыСКонтрагентами;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		
		// Заполним таблицу движений.
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.РасчетыВозврат        = Перечисления.РасчетыВозврат.Расчеты;
		СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
		СтрокаДвижений.Сделка                = Ссылка; 
		
		СтрокаДвижений.СуммаВзаиморасчетов   = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		СтрокаДвижений.СуммаУпр              = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, 
		СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, 
		СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРасчетамСКонтрагентами()

процедура  ДвиженияПоЗаказыПокупателяСезонные(СтруктураШапкиДокумента, ТаблицаПоТоварам)
	ЗаписьОсновногоКонтрагента = РегистрыСведений.СписаниеСЧужихСезонныхЗаказов.Получить(Новый Структура("Контрагент",Контрагент));
	Если ЗаписьОсновногоКонтрагента.ОсновнойКонтрагент = Справочники.Контрагенты.ПустаяСсылка() тогда
		ПараметрКонтрагент = Контрагент;
		Если СезонникиПоГрузополучателю тогда
		ПараметрКонтрагент = Грузополучатель;	
		конецЕсли;	
	иначе
		ПараметрКонтрагент = ЗаписьОсновногоКонтрагента.ОсновнойКонтрагент;
	конецЕсли;
	
	
	
	Блокировка = Новый БлокировкаДанных;//+++ 28.11.2018 включается только здесь
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ЗаказыПокупателейСезонные");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ЭтотОбъект.Товары;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	ЭлементБлокировки.УстановитьЗначение("Контрагент",ПараметрКонтрагент);
	Блокировка.Заблокировать();//сезонные заказы покупателей
	
	наборДвижений = Движения.ЗаказыПокупателейСезонные;
	наборДвижений.Записывать = Истина;	
	НаборДвижений.Очистить();
	
	
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	
	//+++ 09.02.2018 избавляемся от мегавыборки по ТЧ Товары всех заказов!...
	табл = ЭтотОбъект.Товары.Выгрузить(,"Номенклатура, Количество");
	табл.Свернуть("Номенклатура", "Количество");
	Запрос.УстановитьПараметр("табл", табл);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателяТовары.Номенклатура,
	|	ЗаказПокупателяТовары.Количество
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	&табл КАК ЗаказПокупателяТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АналогиДисков.Номенклатура КАК Номенклатура,
	|	АналогиДисков.Аналог КАК Аналог
	|ПОМЕСТИТЬ НоменклатураЗаказаСАналогами
	|ИЗ
	|	РегистрСведений.АналогиДисков КАК АналогиДисков
	|ГДЕ
	|	АналогиДисков.Номенклатура В
	|			(ВЫБРАТЬ
	|				ВТ_Товары.Номенклатура
	|			ИЗ
	|				ВТ_Товары)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АналогиДисков.Аналог,
	|	АналогиДисков.Номенклатура
	|ИЗ
	|	РегистрСведений.АналогиДисков КАК АналогиДисков
	|ГДЕ
	|	АналогиДисков.Аналог В
	|			(ВЫБРАТЬ
	|				ВТ_Товары.Номенклатура
	|			ИЗ
	|				ВТ_Товары)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АналогиДисков.Аналог,
	|	АналогиДисков1.Аналог
	|ИЗ
	|	РегистрСведений.АналогиДисков КАК АналогиДисков
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналогиДисков КАК АналогиДисков1
	|		ПО АналогиДисков.Номенклатура = АналогиДисков1.Номенклатура
	|ГДЕ
	|	АналогиДисков.Аналог В
	|			(ВЫБРАТЬ
	|				ВТ_Товары.Номенклатура
	|			ИЗ
	|				ВТ_Товары)
	|	И АналогиДисков.Аналог <> ЕСТЬNULL(АналогиДисков1.Аналог, АналогиДисков.Аналог)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АналогиДисков.Номенклатура,
	|	АналогиДисков1.Номенклатура
	|ИЗ
	|	РегистрСведений.АналогиДисков КАК АналогиДисков
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналогиДисков КАК АналогиДисков1
	|		ПО АналогиДисков.Аналог = АналогиДисков1.Аналог
	|ГДЕ
	|	АналогиДисков.Номенклатура В
	|			(ВЫБРАТЬ
	|				ВТ_Товары.Номенклатура
	|			ИЗ
	|				ВТ_Товары)
	|	И АналогиДисков.Номенклатура <> ЕСТЬNULL(АналогиДисков1.Номенклатура, АналогиДисков.Номенклатура)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АналогиДисков.Номенклатура,
	|	АналогиДисков1.Аналог
	|ИЗ
	|	РегистрСведений.АналогиДисков КАК АналогиДисков
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналогиДисков КАК АналогиДисков1
	|		ПО АналогиДисков.Аналог = АналогиДисков1.Номенклатура
	|ГДЕ
	|	АналогиДисков.Номенклатура В
	|			(ВЫБРАТЬ
	|				ВТ_Товары.Номенклатура
	|			ИЗ
	|				ВТ_Товары)
	|	И АналогиДисков.Номенклатура <> ЕСТЬNULL(АналогиДисков1.Аналог, АналогиДисков.Номенклатура)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АналогиДисков.Аналог,
	|	АналогиДисков1.Номенклатура
	|ИЗ
	|	РегистрСведений.АналогиДисков КАК АналогиДисков
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналогиДисков КАК АналогиДисков1
	|		ПО АналогиДисков.Номенклатура = АналогиДисков1.Аналог
	|ГДЕ
	|	АналогиДисков.Аналог В
	|			(ВЫБРАТЬ
	|				ВТ_Товары.Номенклатура
	|			ИЗ
	|				ВТ_Товары)
	|	И АналогиДисков.Аналог <> ЕСТЬNULL(АналогиДисков1.Номенклатура, АналогиДисков.Аналог)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СЗТовары.Номенклатура,
	|	СЗТовары.Номенклатура
	|ИЗ
	|	ВТ_Товары КАК СЗТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыПокупателейСезонныеОстатки.Номенклатура,
	|	ЗаказыПокупателейСезонныеОстатки.КоличествоОстаток,
	|	ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателяСезонный,
	|	ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателяСезонный.СУчетомАналогов КАК СУчетомАналогов
	|ПОМЕСТИТЬ ОстаткиСезонных
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателейСезонные.Остатки(
	|			,
	|			Контрагент = &Контрагент
	|				И ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ
	|				И ВЫБОР
	|					КОГДА ЗаказПокупателяСезонный.Транзит = ЛОЖЬ
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЗаказПокупателяСезонный = &ДокОснование
	|				КОНЕЦ
	|				И Номенклатура В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						НоменклатураЗаказаСАналогами.Аналог
	|					ИЗ
	|						НоменклатураЗаказаСАналогами КАК НоменклатураЗаказаСАналогами)
	|				И (&Дата МЕЖДУ ЗаказПокупателяСезонный.Дата И ЗаказПокупателяСезонный.ДатаДействияПо)) КАК ЗаказыПокупателейСезонныеОстатки
	|ГДЕ
	|	ЗаказыПокупателейСезонныеОстатки.КоличествоОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиСезонных.Номенклатура,
	|	ОстаткиСезонных.КоличествоОстаток,
	|	ОстаткиСезонных.ЗаказПокупателяСезонный КАК ЗаказПокупателяСезонный,
	|	ОстаткиСезонных.СУчетомАналогов,
	|	ОстаткиСезонных.ЗаказПокупателяСезонный.МоментВремени КАК ЗаказПокупателяСезонныйМоментВремени
	|ИЗ
	|	ОстаткиСезонных КАК ОстаткиСезонных
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПокупателяСезонныйМоментВремени
	|ИТОГИ ПО
	|	ЗаказПокупателяСезонный";
	
	Запрос.УстановитьПараметр("ссылка",ссылка);
	Запрос.УстановитьПараметр("Контрагент",ПараметрКонтрагент);
	Запрос.УстановитьПараметр("Дата",Дата);
	Запрос.УстановитьПараметр("ДокОснование",ДокументОснование);
	Результат = Запрос.Выполнить();
	Если  Результат.Пустой() Тогда
		//Если нет невыполненных сезонников, ничего не делаем. Просто закроем менеджер временных таблиц
		Запрос.МенеджерВременныхТаблиц.Закрыть();
	Иначе 
		ОстаткиПоСезоннымЗаказам = Результат;
		
		//воспользуемся временными таблицами запроса  (к распределению только та номенклатура, которая есть в сезонниках)
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НоменклатураЗаказаСАналогами.Номенклатура,
		|	НоменклатураЗаказаСАналогами.Аналог
		|ПОМЕСТИТЬ НомИзЗаказаСАналогамиПоОстаткам
		|ИЗ
		|	НоменклатураЗаказаСАналогами КАК НоменклатураЗаказаСАналогами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиСезонных КАК ОстаткиСезонных
		|		ПО НоменклатураЗаказаСАналогами.Аналог = ОстаткиСезонных.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СЗТовары.Номенклатура КАК Номенклатура,
		|	СЗТовары.Количество КАК Количество,
		|	НомИзЗаказаСАналогамиПоОстаткам.Аналог КАК Аналог
		|ИЗ
		|	ВТ_Товары КАК СЗТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НомИзЗаказаСАналогамиПоОстаткам КАК НомИзЗаказаСАналогамиПоОстаткам
		|		ПО СЗТовары.Номенклатура = НомИзЗаказаСАналогамиПоОстаткам.Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Аналог
		|ИТОГИ
		|	СРЕДНЕЕ(Количество)
		|ПО
		|	Номенклатура
		|; Уничтожить НомИзЗаказаСАналогамиПоОстаткам";
		
		
		Результат = Запрос.Выполнить();
		Запрос.МенеджерВременныхТаблиц.Закрыть();
		
		ТАбНом = Новый ТаблицаЗначений;
		//ТабАналогов = Новый Массив;
		
		
		ТАбНом.Колонки.Добавить("Номенклатура");
		ТАбНом.Колонки.Добавить("Количество");
		ТАбНом.Колонки.Добавить("Аналоги");
		ВыборкаНоменклатура = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНоменклатура.Следующий() Цикл
			//ТабАналогов.Очистить();
			НовСтр = ТАбНом.Добавить();
			НовСтр.Номенклатура = ВыборкаНоменклатура.Номенклатура;
			НовСтр.Количество =  ВыборкаНоменклатура.Количество;
			Выборка = ВыборкаНоменклатура.Выбрать();
			ТабАналогов = Новый Массив;
			Пока Выборка.Следующий() Цикл
				Если Выборка.Аналог <> ВыборкаНоменклатура.Номенклатура Тогда
					ТабАналогов.Добавить(Выборка.Аналог);
				КонецЕсли;
			КонецЦикла;
			НовСтр.Аналоги = ТабАналогов;
		КонецЦикла;	
		
		
		ВыборкаСезонныйЗаказ = ОстаткиПоСезоннымЗаказам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если ТАбНом.Количество()> 0 Тогда
			Пока ВыборкаСезонныйЗаказ.Следующий() Цикл
				//1. Для каждого сезонного заказа спишем сначала номенклатуру-в номенклатуру
				Выборка = ВыборкаСезонныйЗаказ.Выбрать();
				пока Выборка.Следующий() Цикл
					МожноСписать = Выборка.количествоОстаток;
					Нашли = ТабНом.НайтиСтроки(Новый Структура("Номенклатура",Выборка.Номенклатура));   //может быть только 1 запись
					Если Нашли.Количество()>0 Тогда
						стрТН = Нашли[0];
						Списываем = Мин(стрТН.Количество,Выборка.КоличествоОстаток);
						Движение = НаборДвижений.Добавить();
						Движение.Период = Дата;
						Движение.Контрагент = ПараметрКонтрагент;
						Движение.Подразделение = Выборка.заказпокупателяСезонный.Подразделение;
						Движение.ЗаказПокупателяСезонный = Выборка.заказпокупателяСезонный;
						Движение.Номенклатура = Выборка.Номенклатура;
						Движение.Аналог = Выборка.Номенклатура;
						Движение.ЗаказПокупателя = Ссылка;
						Движение.ВРезерве = Истина;
						Движение.Количество = Списываем;
						Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
						Если Списываем = стрТН.Количество Тогда
							ТабНом.Удалить(стрТН);
						Иначе	
							стрТН.Количество =  стрТН.Количество-Списываем;
						КонецЕсли;
						МожноСписать = МожноСписать-Списываем;
					КонецЕсли;
					//2. Потом спишем аналоги-в номенклатуру, Если СЗ разрешает и остались еще товары Для списания
					Если ВыборкаСезонныйЗаказ.ЗаказПокупателяСезонный.СУчетомАналогов и ТАбНом.Количество()> 0 Тогда
						Если МожноСписать >0  Тогда
							сч=0;
							Пока сч< ТабНом.Количество() Цикл
								стр = ТабНом[сч];
								Если Стр.Аналоги.Найти(Выборка.Номенклатура) <> Неопределено Тогда //текущая номенклатура является аналогом номенклатуры в заказе
									Списываем = Мин(стр.Количество,МожноСписать);
									Движение = НаборДвижений.Добавить();
									Движение.Период = Дата;
									Движение.Контрагент = ПараметрКонтрагент;
									Движение.Подразделение = Выборка.заказпокупателяСезонный.Подразделение;
									Движение.ЗаказПокупателяСезонный = Выборка.заказпокупателяСезонный;
									Движение.Номенклатура = Выборка.Номенклатура;
									Движение.Аналог = стр.Номенклатура;
									Движение.ЗаказПокупателя = Ссылка;
									Движение.ВРезерве = Истина;
									Движение.Количество = Списываем;
									Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
									Если Списываем = стр.Количество Тогда
										ТабНом.Удалить(сч);
									Иначе	
										стр.Количество =  стр.Количество-Списываем;
										сч=сч+1;
									КонецЕсли;
									МожноСписать = МожноСписать-Списываем;
									Если МожноСписать=0 Тогда
										прервать;	
									КонецЕсли;
								Иначе
									сч=сч+1;   
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;		
				КонецЦикла;
			КонецЦикла;	
			
		КонецЕсли;
		
		
		
	КонецЕсли;		
	
	
	
КонецПроцедуры

//12.01.2016 - ОСНОВНАЯ ФУНКЦИЯ --------
процедура ДвижениеПоРезервДляИМ( СтруктураШапкиДокумента, ТаблицаПоТоварам )
	
	НаборДвижений = Движения.РезервДляИМ;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	// Заполним таблицу движений 
	//КлиентИМ = СтруктураШапкиДокумента.Контрагент.КонтрагентДляРезерваИМ; //123заменить
	КлиентИМ = СтруктураШапкиДокумента.ДоговорКонтрагента.КонтрагентДляРезерваИМ;
	
	Если КлиентИМ = СтруктураШапкиДокумента.Контрагент Тогда
		//в "+" по резервуДляИМ: ВСЕ товары из св.остатков убираются и попадают в резерв
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений); 
	Иначе
		//ТОЛЬКО в "-" по резервуДляИМ и ТОЛЬКО по "+" ОстаткамПоРезервуИМ
		таблРезерва = найтиПоложительныеОстаткиРезерваИМ(СтруктураШапкиДокумента, ТаблицаПоТоварам);	
		ЗагрузитьВТаблицуЗначений(таблРезерва, ТаблицаДвижений); //номенклатура, количество
	КонецЕсли;
	
	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Подразделение,"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(КлиентИМ,"КонтрагентДляРезерваИМ");
	
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	НаборДвижений.мПериод            = Дата;
	
	Если КлиентИМ = Контрагент Тогда
		Движения.РезервДляИМ.ВыполнитьПриход();
		#Если Клиент Тогда
			Сообщить("Создан ""Резерв Для ИМ"" Для "+строка(ТаблицаДвижений.Количество())+" товаров ("+строка(ТаблицаДвижений.Итог("Количество"))+"шт.) по клиенту: "+строка(КлиентИМ), СтатусСообщения.Информация);
		#КонецЕсли	
	Иначе
		Движения.РезервДляИМ.ВыполнитьРасход();
		#Если Клиент Тогда
			Если РольДоступна("ПравоЗавершенияРаботыПользователей") и ТаблицаДвижений.Итог("Количество")<>0 тогда //+++ 07.02.2018 - ТОЛЬКО для IT-отдела!!!
			Сообщить("По регистру ""Резерв Для ИМ"" по клиенту '"+строка(КлиентИМ)+"' - "
					+строка(ТаблицаДвижений.Количество())+" товаров ("+строка(ТаблицаДвижений.Итог("Количество"))+"шт.)", СтатусСообщения.Информация);
			КонецЕсли;
		#КонецЕсли	
		
		//==== и сразу по ЗаказыПокупателей по этим заказам надо сторнировать!======================
		//      по подразделению и клиентуИМ по всем заказам с + остатками
		СторнироватьЗаказПокупателяКлиентаИМ(СтруктураШапкиДокумента, таблРезерва);
		
	КонецЕсли;
	
КонецПроцедуры //ДвижениеПоРезервДляИМ()

//12.01.2016 - 1-я вспомогательная
функция найтиПоложительныеОстаткиРезерваИМ( Шапка, Табл1 )
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Табл1.Номенклатура,
	|	Табл1.Количество
	|ПОМЕСТИТЬ ВТ_Табл1
	|ИЗ
	|	&Табл1 КАК Табл1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезервДляИМОстатки.Номенклатура,
	|	ВЫБОР
	|		КОГДА РезервДляИМОстатки.КоличествоОстаток > ВТ1.Количество
	|			ТОГДА ВТ1.Количество
	|		ИНАЧЕ РезервДляИМОстатки.КоличествоОстаток
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	РегистрНакопления.РезервДляИМ.Остатки( &Дата,
	|				Номенклатура В(ВЫБРАТЬ РАЗЛИЧНЫЕ вт.Номенклатура
	|					ИЗ ВТ_Табл1 КАК вт)
	|			И Подразделение = &Подразделение
	|			И КонтрагентДляРезерваИМ = &КонтрагентДляРезерваИМ
	|) КАК РезервДляИМОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВТ_1.Номенклатура КАК Номенклатура,
	|			ВТ_1.Количество КАК Количество
	|		ИЗ
	|			ВТ_Табл1 КАК ВТ_1) КАК ВТ1
	|		ПО РезервДляИМОстатки.Номенклатура = ВТ1.Номенклатура
	|ГДЕ
	|	РезервДляИМОстатки.КоличествоОстаток > 0";
	Запрос.УстановитьПараметр("Дата",    новый Граница(Шапка.Дата, ВидГраницы.Исключая) ); // на долю секунды раньше даты документа!
	Запрос.УстановитьПараметр("Подразделение",         Шапка.Подразделение);
	//Запрос.УстановитьПараметр("КонтрагентДляРезерваИМ",Шапка.Контрагент.КонтрагентДляРезерваИМ); //123заменить
	Запрос.УстановитьПараметр("КонтрагентДляРезерваИМ",Шапка.ДоговорКонтрагента.КонтрагентДляРезерваИМ);
	Запрос.УстановитьПараметр("Табл1", Табл1 );
	
	Результат = Запрос.Выполнить();
	резТабл = Результат.Выгрузить();
	
	резТабл.Свернуть("Номенклатура","Количество");  // 100% без повторений (на всякий случай)
	
	возврат резТабл;
	
КонецФункции	

//12.01.2016 - 2-я вспомогательная
процедура СторнироватьЗаказПокупателяКлиентаИМ(Шапка, Табл1)
	
	//----------------в движения текущего документа - добавляем еще движений....-----------------	
	НаборДвижений = Движения.ЗаказыПокупателей;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвиженийРез = НаборДвижений.Выгрузить();
	
	// смотрим ТОЛЬКО "+" остатки по регистру ЗаказыПокупателей по КлиентуИМ и Подразделению!
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Табл1.Номенклатура,
	|	Табл1.Количество
	|ПОМЕСТИТЬ ВТ_Табл1
	|ИЗ
	|	&Табл1 КАК Табл1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗакПок.ДоговорКонтрагента,
	|	ЗакПок.ЗаказПокупателя,
	|	ЗакПок.СтатусПартии,
	|	ЗакПок.Номенклатура,
	|	ЗакПок.ХарактеристикаНоменклатуры,
	|	ЗакПок.Цена,
	|	ЗакПок.ЕдиницаИзмерения,
	|	ЗакПок.ПроцентСкидкиНаценки,
	|	ЗакПок.ПроцентАвтоматическихСкидок,
	|	ЗакПок.УсловиеАвтоматическойСкидки,
	|	ЗакПок.ЗначениеУсловияАвтоматическойСкидки,
	|	ВЫБОР
	|		КОГДА ЗакПок.КоличествоОстаток > ВТ1.Количество
	|			ТОГДА ВТ1.Количество
	|		ИНАЧЕ ЗакПок.КоличествоОстаток
	|	КОНЕЦ КАК Количество,
	|	ВЫРАЗИТЬ(ЗакПок.СуммаВзаиморасчетовОстаток * ВЫБОР
	|			КОГДА ЗакПок.КоличествоОстаток > ВТ1.Количество
	|				ТОГДА ВТ1.Количество / ЗакПок.КоличествоОстаток
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаВзаиморасчетов,
	|	ВЫРАЗИТЬ(ЗакПок.СуммаУпрОстаток * ВЫБОР
	|			КОГДА ЗакПок.КоличествоОстаток > ВТ1.Количество
	|				ТОГДА ВТ1.Количество / ЗакПок.КоличествоОстаток
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаУпр
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&Дата,
	|			ДоговорКонтрагента.Владелец = &КонтрагентДляРезерваИМ 
	|				И ЗаказПокупателя.Подразделение = &Подразделение
	//Сакулина. вставила проверку на Проверен
	|				И ЗаказПокупателя.Проверен
	|				И Номенклатура В (ВЫБРАТЬ вт.Номенклатура ИЗ ВТ_Табл1 КАК вт)
	|											  ) КАК ЗакПок
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВТ_1.Номенклатура КАК Номенклатура,
	|			ВТ_1.Количество КАК Количество
	|		ИЗ
	|			ВТ_Табл1 КАК ВТ_1) КАК ВТ1
	|		ПО ЗакПок.Номенклатура = ВТ1.Номенклатура
	|ГДЕ
	|	ЗакПок.КоличествоОстаток > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗакПок.ЗаказПокупателя.Дата
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	
	
	Запрос.УстановитьПараметр("Дата",    новый Граница(Шапка.Дата, ВидГраницы.Исключая) ); // на долю секунды раньше даты документа!
	Запрос.УстановитьПараметр("Подразделение",         Шапка.Подразделение);
	//Запрос.УстановитьПараметр("КонтрагентДляРезерваИМ",Шапка.Контрагент.КонтрагентДляРезерваИМ); //123заменить
	Запрос.УстановитьПараметр("КонтрагентДляРезерваИМ",Шапка.ДоговорКонтрагента.КонтрагентДляРезерваИМ);
	Запрос.УстановитьПараметр("Табл1", Табл1 );
	
	
	
	Результат = Запрос.Выполнить();
	таблРез   = Результат.Выгрузить();
	
	//--------проверка на единственность заказа и не превышение количества---------------------------------					
	таблЗак = таблРез.Скопировать(,"ЗаказПокупателя");
	таблЗак.Свернуть("ЗаказПокупателя");
	Если таблЗак.Количество()>1 Тогда
		#Если Клиент Тогда
			//Сообщить("Существует "+строка(таблЗак.Количество())+" резервных заказов на "+строка(Шапка.Дата)+" по клиенту ИМ: "+строка(Шапка.Контрагент.КонтрагентДляРезерваИМ), СтатусСообщения.Внимание); //123заменить
			Сообщить("Существует "+строка(таблЗак.Количество())+" резервных заказов на "+строка(Шапка.Дата)+" по клиенту ИМ: "+строка(Шапка.ДоговорКонтрагента.КонтрагентДляРезерваИМ), СтатусСообщения.Внимание);
		#КонецЕсли	
		
		//-------тут надо делать FIFO по списанию количества товара по заказам----------------------		
		Для каждого стр1 из Табл1 Цикл
			колТов = стр1.Количество; //общее количество по резерву
			Для каждого стр2 из таблРез Цикл //так надежнее... все комбинации перебираем!
				Если стр2.Номенклатура = стр1.Номенклатура Тогда
					колТов = колТов - стр2.Количество;
					Если колТов > 0 Тогда //товар списывается с 2х и более заказов
						#Если Клиент Тогда
							сообщить(строка(стр2.Количество)+" из "+строка(колТов+стр2.Количество)+"шт. товара "+строка(стр1.Номенклатура.Код)+" "+строка(стр1.Номенклатура)
							+" списаны по заказу "+строка(стр2.ЗаказПокупателя) );
						#КонецЕсли
					ИначеЕсли колТов < 0 Тогда //НАШЛИ ЛИШНЮЮ СТРОКУ  заказано 4 и заказы 4 + 4... с 1-го списывается 4, со 2-го - 0!
						
						стр2КоличествоNEW = стр2.Количество + колТов; // Если было 0-4=-4, 4-4=0;   1-4=-3, 4-3=1 
						
						//пересчет сумм и количества
						коэфф = ?(стр2.Количество<=0, 0, стр2КоличествоNEW/стр2.Количество);
						стр2.СуммаВзаиморасчетов = коэфф * стр2.СуммаВзаиморасчетов;
						стр2.СуммаУпр            = коэфф * стр2.СуммаУпр;
						стр2.Количество          = коэфф * стр2.Количество;
						
						колТов = 0;
						#Если Клиент Тогда
							сообщить(строка(стр2КоличествоNEW)+"шт. товара "+строка(стр1.Номенклатура.Код)+" "+строка(стр1.Номенклатура)
							+" списаны по заказу "+строка(стр2.ЗаказПокупателя) );
						#КонецЕсли
						
						//ИначеЕсли колТов = 0 Тогда //товар списался полностью с 1 заказа... но не известно есть ли еще...
						
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;	
	
	// Заполним таблицу движений.
	ЗагрузитьВТаблицуЗначений(таблРез, ТаблицаДвиженийРез);
	
	//закрываем по резервным ЗаказамПокупателей общему но с текущей датой и регистратором - этот ЗаказПокупателя!
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвиженийРез;
	НаборДвижений.мПериод            = Дата;              
	Движения.ЗаказыПокупателей.ВыполнитьРасход();
	
КонецПроцедуры

//+++ 27.12.2016
функция ЕстьОстаткиПоСезоннымЗаказамКлиента()
	рез = ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателяСезонный,
	|	ЗаказыПокупателейСезонныеОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателейСезонные.Остатки(
	|			,
	|			Контрагент = &Контрагент
	|                И естьNull(Подразделение.ВЭД,ЛОЖЬ)=Ложь
	|				И ( Номенклатура В (&масТоваров)
	|					  ИЛИ Аналог В (&масТоваров)
	|				   )									) КАК ЗаказыПокупателейСезонныеОстатки
	|ГДЕ
	|	ЗаказыПокупателейСезонныеОстатки.КоличествоОстаток > 0";
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("масТоваров", Товары.ВыгрузитьКолонку("Номенклатура") );
	Результат = Запрос.Выполнить();
	возврат не Результат.Пустой();	
КонецФункции	

// Формируем движения по упр. регистрам.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре,
	Отказ, Заголовок);
	
	//	ДвиженияПоРасчетамСКонтрагентами( СтруктураШапкиДокумента, Отказ);
	
	Если Не Отказ Тогда
		
		// 06.10.2016 Если объект.проверен и Для подразделений в любом случае будем списывать с сезонных заказов
			 //+++ 28.11.2017 всегда Истина... незачем проверять в каждом заказе константу
			 //ДатаОтсчета  = Константы.ДатаУчетаСЗППоРегистру.Получить();   //19.10.2016
		Если // (ДатаОтсчета <> Дата(1,1,1) и ДатаОтсчета <=Дата) и
			не НеУчитыватьВСезонномЗаказе тогда
			
			// - ограничение блокировки регистра только при наличие "+"остатков регистра сезонных заказов по клиенту и товарам/аналогам!
	//		Если ЕстьОстаткиПоСезоннымЗаказамКлиента() Тогда //+++ 28.11.2017 включена проверка снова
				ДвиженияПоЗаказыПокупателяСезонные(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	//		КонецЕсли;
		
		КонецЕсли;
		
		
		//+++( 12.01.2016 - резерв Для ИМ 
		//  по Клиент=КлиентИМ+ (резервный заказ)
		// или Клиент<>КлиентИМ-  (использование резерва)
		//ВСЕГДА! не только при проверенном (К отгрузке)... 
		//Если не ЭтотОбъект.Контрагент.КонтрагентДляРезерваИМ.Пустая() и ЭтотОбъект.Проверен Тогда //123заменить
		Если не ЭтотОбъект.ДоговорКонтрагента.КонтрагентДляРезерваИМ.Пустая() и ЭтотОбъект.Проверен Тогда
			ДвижениеПоРезервДляИМ(СтруктураШапкиДокумента, ТаблицаПоТоварам);
		КонецЕсли;	
		
		//Если Контрагент<>Контрагент.КонтрагентДляРезерваИМ Тогда//123заменить
		Если Контрагент<>ДоговорКонтрагента.КонтрагентДляРезерваИМ Тогда
			ДвиженияПоРасчетамСКонтрагентами( СтруктураШапкиДокумента, Отказ );
		КонецЕсли;	
		//+++)
		
		НаборДвижений = Движения.ЗаказыПокупателей;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить(); //13.01.2016
		
		//Плотников, 26.02.2017 =================================================
		Если Бонусы.Количество() > 0 Тогда
			НоваяТаблица = ТаблицаПоТоварам.Скопировать();
			
			для Каждого стр11 из бонусы Цикл
				Нов = НоваяТаблица.Добавить();
				Нов.Номенклатура = стр11.Номенклатура;
				Нов.Цена = 0;
				Нов.ЕдиницаИзмерения = стр11.Номенклатура.ЕдиницаХраненияОстатков;
				Нов.Количество = стр11.Количество;
				Нов.СуммаВзаиморасчетов = 0;
				Нов.СуммаУпр = 0;
			КонецЦикла;
			
			НоваяТаблица.Свернуть("Номенклатура,ЕдиницаИзмерения","Цена,Количество,СуммаВзаиморасчетов,СуммаУПр");
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(НоваяТаблица, ТаблицаДвижений);
		Иначе
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
		КонецЕсли;
		//======================================================================
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ЗаказПокупателя");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(ОпределитьСтатусПартии(), "СтатусПартии");
		
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		НаборДвижений.мПериод            = Дата;
		Движения.ЗаказыПокупателей.ВыполнитьПриход();
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаДвижений);
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ЗаказПокупателя");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");
		
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		НаборДвижений.мПериод            = Дата;
		Движения.ЗаказыПокупателей.ВыполнитьПриход();
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
		ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ЗаказПокупателя");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "СтатусПартии");
		
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		НаборДвижений.мПериод            = Дата;
		Движения.ЗаказыПокупателей.ВыполнитьПриход();
		
		ТаблицаПоТоварамРазмещение = ТаблицаПоТоварам.Скопировать();
		Сч = 0;
		Пока Сч < ТаблицаПоТоварамРазмещение.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоТоварамРазмещение.Получить(Сч);
			Если ЗначениеНеЗаполнено(СтрокаТаблицы.Размещение) 
				или ТипЗнч(СтрокаТаблицы.Размещение) <> Тип("ДокументСсылка.ЗаказПоставщику") 
				или (   Константы.ИспользоватьОстаткиСтороннихПоставщиков.Получить()            //+++ 30.06.2014
				И НЕ Поставщик.пустая() // 13.08.2015 только Если есть поставщик!
				И СтрокаТаблицы.Статус = перечисления.СтатусыСтрокЗаказа.Отменен ) Тогда
				ТаблицаПоТоварамРазмещение.Удалить(СтрокаТаблицы);
			Иначе 
				Сч = Сч + 1;
			КонецЕсли; 
		КонецЦикла;
		
		//++++++++++++++++++++новая система - ВКЛЮЧАЕМ РАЗМЕЩЕНИЕ+++++++++++++++++++++++++++++++++++++++		
		Если ТаблицаПоТоварамРазмещение.Количество() > 0
			и Константы.ИспользоватьОстаткиСтороннихПоставщиков.Получить() 
			и НЕ Поставщик.пустая() Тогда // 13.08.2015 только Если есть поставщик!
			
			ТаблицаПоТоварамРазмещение.Колонки.Размещение.Имя = "ЗаказПоставщику";
			
			// По регистру РазмещениеЗаказовПокупателей
			НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
			
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамРазмещение, ТаблицаДвижений);
			
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ЗаказПокупателя");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Товар, "ТоварТара");
			
			
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			НаборДвижений.мПериод            = Дата; // дата документа ?!
			
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда //Пусть ругается, но даёт проводить... 
				Отказ1 = Отказ; 
				НаборДвижений.КонтрольОстатковПоЗаказамПоставщикам(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ1, Заголовок); 
			КонецЕсли;
			
			Если Не Отказ Тогда
				Движения.РазмещениеЗаказовПокупателей.ВыполнитьПриход();
			КонецЕсли;
			
		КонецЕсли;
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		
		
		ТаблицаПоТареРазмещение = ТаблицаПоТаре.Скопировать();
		Сч = 0;
		Пока Сч < ТаблицаПоТареРазмещение.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоТареРазмещение.Получить(Сч);
			Если ЗначениеНеЗаполнено(СтрокаТаблицы.Размещение) 
				или ТипЗнч(СтрокаТаблицы.Размещение) <> Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				ТаблицаПоТареРазмещение.Удалить(СтрокаТаблицы);
			Иначе 
				Сч = Сч + 1;
			КонецЕсли; 
		КонецЦикла;
		
		////++++++++++++++++++++++++10.10.2014 - убираем насовсем РазмещениеЗаказовПокупателей +++++++++++++++++++++++++++++++++++++++++++++++++++		
		//Если ТаблицаПоТареРазмещение.Количество() > 0 Тогда
		//	
		//	ТаблицаПоТареРазмещение.Колонки.Размещение.Имя = "ЗаказПоставщику";
		//	
		//	// Сначала спишем свободные остатки с по заказу
		//	// По регистру РазмещениеЗаказовПокупателей
		//	НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
		//	
		//	ТаблицаДвижений = НаборДвижений.Выгрузить();
		//	ТаблицаДвижений.Очистить();
		//	
		//	// Заполним таблицу движений.
		//	ЗагрузитьВТаблицуЗначений(ТаблицаПоТареРазмещение, ТаблицаДвижений);
		//	
		//	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ЗаказПокупателя");
		//	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Тара, "ТоварТара");
		//	
		//	
		//	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		//	НаборДвижений.мПериод            = Дата;
		//	
		//	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		//		НаборДвижений.КонтрольОстатковПоЗаказамПоставщикам(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
		//	КонецЕсли;
		
		//	Если Не Отказ Тогда
		//		Движения.РазмещениеЗаказовПокупателей.ВыполнитьПриход();
		//	КонецЕсли;
		//	
		//КонецЕсли;
		//
		
		//ТаблицаПоТоварамРезервирование = ТаблицаПоТоварам.Скопировать();
		//Сч = 0;
		//Пока Сч < ТаблицаПоТоварамРезервирование.Количество() Цикл
		//	СтрокаТаблицы = ТаблицаПоТоварамРезервирование.Получить(Сч);
		//	Если ЗначениеНеЗаполнено(СтрокаТаблицы.Размещение) 
		//	 или ТипЗнч(СтрокаТаблицы.Размещение) <> Тип("СправочникСсылка.Склады") Тогда
		//		 ТаблицаПоТоварамРезервирование.Удалить(СтрокаТаблицы);
		//	Иначе 
		//		Сч = Сч + 1;
		//	КонецЕсли; 
		//КонецЦикла;
		//
		//Инд = 0;
		//
		//Если ТаблицаПоТоварамРезервирование.Количество() > 0 Тогда
		//	ТаблицаПоТоварамРезервирование.Колонки.Размещение.Имя = "Склад";
		//	
		//	НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
		//	
		//	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		//	ТаблицаДвижений = НаборДвижений.Выгрузить();
		//	
		//	ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамРезервирование, ТаблицаДвижений);
		//	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументРезерва");
		
		//	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		//	НаборДвижений.мПериод            = Дата;
		//	
		//	// Проверка осатков при оперативном проведении.
		//	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		//		НаборДвижений.КонтрольСвободныхОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		//	КонецЕсли;
		//	
		//	Движения.ТоварыВРезервеНаСкладах.ВыполнитьПриход();
		//	
		//КонецЕсли;
		////++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		
		
		ТаблицаПоТареРезервирование = ТаблицаПоТаре.Скопировать();
		Сч = 0;
		Пока Сч < ТаблицаПоТареРезервирование.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоТареРезервирование.Получить(Сч);
			Если ЗначениеНеЗаполнено(СтрокаТаблицы.Размещение) 
				или ТипЗнч(СтрокаТаблицы.Размещение) <> Тип("СправочникСсылка.Склады") Тогда
				ТаблицаПоТареРезервирование.Удалить(СтрокаТаблицы);
			Иначе 
				Сч = Сч + 1;
			КонецЕсли; 
		КонецЦикла;
		
		Если ТаблицаПоТареРезервирование.Количество() > 0 Тогда
			ТаблицаПоТареРезервирование.Колонки.Размещение.Имя = "Склад";
			
			НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТареРезервирование, ТаблицаДвижений);
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументРезерва");
			
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			НаборДвижений.мПериод            = Дата;
			
			// Проверка осатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольСвободныхОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;
			
			Движения.ТоварыВРезервеНаСкладах.ВыполнитьПриход();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Заполняет колонки значениями, нужными Для упр. учета
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,"ДопустимыйСтатус2");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"ОтражатьВУправленческомУчете");
	
КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр() 

// Заполняет колонки значениями, нужными Для упр. учета
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоВозвратнойТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"ОтражатьВУправленческомУчете");
	
КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоВозвратнойТареУпр() 

// Формируем движения по регистру СписанныеТовары
//
Процедура ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре,
	Отказ, Заголовок)
	
	ТаблицаПоТоварамРезервирование = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезервирование.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезервирование.Получить(Сч);
		Если ЗначениеНеЗаполнено(СтрокаТаблицы.Размещение) 
			или ТипЗнч(СтрокаТаблицы.Размещение) <> Тип("СправочникСсылка.Склады") Тогда
			ТаблицаПоТоварамРезервирование.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Инд = 0;
	
	Если ТаблицаПоТоварамРезервирование.Количество() > 0 Тогда
		ТаблицаПоТоварамРезервирование.Колонки.Размещение.Имя = "Склад";
		
		// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары
		Если СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
			
			НаборДвижений = Движения.СписанныеТовары;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамРезервирование, ТаблицаДвижений);
			
			// Недостающие поля.
			Инд = 0;
			Для каждого Строка Из ТаблицаДвижений Цикл
				Инд = Инд+1;
				Строка.НомерСтрокиДокумента = Инд;
			КонецЦикла;
			
			ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ,"КодОперацииПартииТоваров");
			
			// Списывать партии можно только по заказу (измерение Заказ - пустое).
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"СписыватьТолькоПоЗаказу");
			
			// Заказ, на который списывать партию.
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ЗаказСписания");
			
			ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.СписанныеТовары.ВыполнитьДвижения();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаПоТареРезервирование = ТаблицаПоТаре.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТареРезервирование.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТареРезервирование.Получить(Сч);
		Если ЗначениеНеЗаполнено(СтрокаТаблицы.Размещение) 
			или ТипЗнч(СтрокаТаблицы.Размещение) <> Тип("СправочникСсылка.Склады") Тогда
			ТаблицаПоТареРезервирование.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Если ТаблицаПоТареРезервирование.Количество() > 0 Тогда
		ТаблицаПоТареРезервирование.Колонки.Размещение.Имя = "Склад";
		
		// ТАРА ПО РЕГИСТРУ СписанныеТовары.
		Если СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
			
			НаборДвижений = Движения.СписанныеТовары;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТареРезервирование, ТаблицаДвижений);
			
			// Недостающие поля.
			Для каждого Строка Из ТаблицаДвижений Цикл
				Инд = Инд+1;
				Строка.НомерСтрокиДокумента = Инд;
			КонецЦикла;
			
			ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
			
			
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ,"КодОперацииПартииТоваров");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"СписыватьТолькоПоЗаказу");
			
			ЗаполнитьКолонкиРегистраСписанныеТоварыПоВозвратнойТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.СписанныеТовары.ВыполнитьДвижения();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструСписанныеТовары()

// Процедура пересчитывает сумму в валюту упр. и регл. учета
//
Процедура ДобавитьСуммы(СтруктураШапкиДокумента, ТаблицаПоМатериалам)
	
	ТаблицаПоМатериалам.Колонки.Добавить( "СуммаВзаиморасчетов", ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаПоМатериалам.Колонки.Добавить( "СуммаУпр",            ПолучитьОписаниеТиповЧисла(15, 2));
	
	Для Каждого СтрокаТЧ Из ТаблицаПоМатериалам Цикл
		
		СтрокаТЧ.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(
		СтрокаТЧ.Сумма,
		ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		СтруктураШапкиДокумента.КурсДокумента,
		КурсВзаиморасчетов,
		СтруктураШапкиДокумента.КратностьДокумента,
		КратностьВзаиморасчетов);
		
		СтрокаТЧ.СуммаУпр = ПересчитатьИзВалютыВВалюту(
		СтрокаТЧ.Сумма,
		ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, 
		СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, 
		СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьСуммы()

// Процедура заполнения реквизита "ДатаОплаты" по договору.
//
// Параметры: 
//  РежимВызова - режим вызова процедуры.
//
Процедура УстановитьДатуОплатыПоДоговору(РежимВызова = "")Экспорт
	
	Если ЗначениеНеЗаполнено(Дата) Тогда
		Возврат;
	ИначеЕсли ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ВидВзаиморасчетов = ДоговорКонтрагента.ВедениеВзаиморасчетов;
	
	Если ЗначениеНеЗаполнено(ВидВзаиморасчетов) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
		Если ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности Тогда
			ЧислоДнейДоОплаты = ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности;
		Иначе
			ЧислоДнейДоОплаты = 0;
		КонецЕсли;
	Иначе
		Если ДоговорКонтрагента.ДержатьРезервБезОплатыОграниченноеВремя Тогда
			ЧислоДнейДоОплаты = ДоговорКонтрагента.ЧислоДнейРезерваБезОплаты;
		Иначе
			ЧислоДнейДоОплаты = 0;
		КонецЕсли;
	КонецЕсли;
	
	// Исключим выходные дни, и получим новую дату оплаты
	ДатаОплатыНовая   = НачалоДня(Дата);
	ЧислоДнейДоОплаты = ЧислоДнейДоОплаты - ?(ДеньНедели(ДатаОплатыНовая) > 5, 0, 1);
	
	Пока ЧислоДнейДоОплаты > 0 Цикл
		ДатаОплатыНовая   = ДатаОплатыНовая + 86400;
		ЧислоДнейДоОплаты = ЧислоДнейДоОплаты - 1;
		
		Пока ДеньНедели(ДатаОплатыНовая) > 5 Цикл
			ДатаОплатыНовая = ДатаОплатыНовая + 86400;
		КонецЦикла;
	КонецЦикла;
	
	Если ДатаОплаты <> ДатаОплатыНовая Тогда
		// Проверка режима вызова процедуры
		Если НЕ ПустаяСтрока(РежимВызова) И НЕ ДатаОплаты = '00010101000000' Тогда
			Если РежимВызова = "ДатаДокумента" Тогда
				ТекстВопроса = "Изменилась дата документа.";
			Иначе
				ТекстВопроса = "Изменился договор с контрагентом.";
			КонецЕсли;
			#Если Клиент Тогда
				Если Вопрос(ТекстВопроса + " Пересчитать дату оплаты?", 
					РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
					Возврат;
				КонецЕсли;
			#КонецЕсли
		КонецЕсли;
		
		ДатаОплаты = ДатаОплатыНовая;
	КонецЕсли;
	
КонецПроцедуры // УстановитьДатуОплатыПоДоговору()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.Событие") Тогда
		
		// Заполнение шапки
		ВремяНапоминания  = Основание.ВремяНапоминания;
		Комментарий       = СокрЛП(Лев(Основание.Комментарий,100)); //+++ 07.03.2012
		НапомнитьОСобытии = Основание.НапомнитьОСобытии;
		Ответственный     = Основание.Ответственный;
		
		ЗаполнитьДокументПоОснованиюУпр(Основание);
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		// Заполнение шапки
		глТекущийПользователь = ?(ЗначениеЗаполнено(глТекущийПользователь), глТекущийПользователь, Справочники.Пользователи.НайтиПоКоду("Робот (магазин)") );//+++ 22.07.2013
		ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета, "Продажа");
		АдресДоставки    = Основание.АдресДоставки;
		ВалютаДокумента  = Основание.ВалютаДокумента;
		ВремяНапоминания = Основание.ВремяНапоминания;
		ДатаОплаты       = Основание.ДатаОплаты;
		ДатаОтгрузки     = Основание.ДатаОтгрузки;
		ДоговорКонтрагента                = Основание.ДоговорКонтрагента;
		ИспользоватьПлановуюСебестоимость = Основание.ИспользоватьПлановуюСебестоимость;
		ИтогПлановаяСебестоимость         = Основание.ИтогПлановаяСебестоимость;
		КратностьВзаиморасчетов           = Основание.КратностьВзаиморасчетов;
		Комментарий       = СокрЛП(Лев(Основание.Комментарий,100)); //+++ 07.03.2012
		КонтактноеЛицо     = Основание.КонтактноеЛицо;
		Контрагент         = Основание.Контрагент;
		КурсВзаиморасчетов = Основание.КурсВзаиморасчетов;
		НапомнитьОСобытии  = Основание.НапомнитьОСобытии;
		Организация        = Основание.Организация;
		Ответственный      = Основание.Ответственный;
		Подразделение      = Основание.Подразделение;
		Склад              = Основание.Склад;
		СтруктурнаяЕдиница = Основание.СтруктурнаяЕдиница;
		СуммаВключаетНДС   = Основание.СуммаВключаетНДС;
		СуммаДокумента     = Основание.СуммаДокумента;
		ТипЦен             = Основание.ТипЦен;
		УчитыватьНДС       = Основание.УчитыватьНДС;
		
		УстановитьДатуОплатыПоДоговору();
		
		Для Каждого ТекСтрокаВозвратнаяТара Из Основание.ВозвратнаяТара Цикл
			
			НоваяСтрока = ВозвратнаяТара.Добавить();
			НоваяСтрока.Количество   = ТекСтрокаВозвратнаяТара.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаВозвратнаяТара.Номенклатура;
			НоваяСтрока.Сумма        = ТекСтрокаВозвратнаяТара.Сумма;
			НоваяСтрока.Цена         = ТекСтрокаВозвратнаяТара.Цена;
			
		КонецЦикла;
		
		Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл
			
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения           = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест       = ТекСтрокаТовары.ЕдиницаИзмеренияМест;
			НоваяСтрока.Количество                 = ТекСтрокаТовары.Количество;
			НоваяСтрока.КоличествоМест             = ТекСтрокаТовары.КоличествоМест;
			НоваяСтрока.Коэффициент                = ТекСтрокаТовары.Коэффициент;
			НоваяСтрока.Номенклатура               = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.ПлановаяСебестоимость      = ТекСтрокаТовары.ПлановаяСебестоимость;
			НоваяСтрока.ПроцентСкидкиНаценки       = ТекСтрокаТовары.ПроцентСкидкиНаценки;
			НоваяСтрока.СтавкаНДС                  = ТекСтрокаТовары.СтавкаНДС;
			НоваяСтрока.Сумма                      = ТекСтрокаТовары.Сумма;
			НоваяСтрока.СуммаНДС                   = ТекСтрокаТовары.СуммаНДС;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрокаТовары.ХарактеристикаНоменклатуры;
			НоваяСтрока.Цена                       = ТекСтрокаТовары.Цена;
			
		КонецЦикла;
		
		Для Каждого ТекСтрокаУслуги Из Основание.Услуги Цикл
			
			НоваяСтрока = Услуги.Добавить();
			НоваяСтрока.Количество   = ТекСтрокаУслуги.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаУслуги.Номенклатура;
			НоваяСтрока.Содержание   = ТекСтрокаУслуги.Содержание;
			НоваяСтрока.СтавкаНДС    = ТекСтрокаУслуги.СтавкаНДС;
			НоваяСтрока.Сумма        = ТекСтрокаУслуги.Сумма;
			НоваяСтрока.СуммаНДС     = ТекСтрокаУслуги.СуммаНДС;
			НоваяСтрока.Цена         = ТекСтрокаУслуги.Цена;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателяСезонный") Тогда
		
		Если Основание.ПометкаУдаления Тогда
			#Если Клиент Тогда
				Предупреждение("Документ: "+ строка(Основание)+"
				|Помечен на удаление и вводить документы на его основании - нельзя!",30);
			#КонецЕсли			
			Возврат;
		КонецЕсли;
		
		ФормаВводаИзСезонногоЗаказа = ПолучитьОбщуюФорму("ФормаВводаИзСезонногоЗаказа") ;
		
		СтруктураВыбора = ФормаВводаИзСезонногоЗаказа.ОткрытьМодально();
		
		//+++( 09.02.2018 - сразу отметаем неправильный ввод!
		Если Основание.ПометкаУдаления 
			или ( Основание.ДатаДействияПо>'00010101' и Основание.ДатаДействияПо<НачалоДня(ТекущаяДата()) ) Тогда 
			#Если Клиент Тогда
				Предупреждение("Нельзя вводить Заказ покупателя на основании 
				|"+строка(Основание)+?(Основание.ПометкаУдаления," , который помечен на удаление!",
				" , у которого истек срок действия: "+строка(Основание.ДатаДействияПо) ) ,60);
			#КонецЕсли
			возврат;
		КонецЕсли;
		
		Если Основание.ДатаДействияПо='00010101' Тогда
			#Если Клиент Тогда
				Предупреждение("В документе: "+строка(Основание)+"
				|НЕ заполнено поле: 'Дата действия по' ", 60);
			#КонецЕсли
		КонецЕсли;					
		//+++)
		
		// Заполнение шапки
		ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета, "Продажа");
		АдресДоставки    = Основание.АдресДоставки;
		ВалютаДокумента  = Основание.ВалютаДокумента;
		//ВремяНапоминания = Основание.ВремяНапоминания;
		Дата = ТекущаяДата();
		ДатаОплаты        = ТекущаяДата() + 7*86400; // +7 календарных дней
		//ДатаОтгрузки    = ТекущаяДата(); // не важна
		
		//ДоговорКонтрагента = Основание.ДоговорКонтрагента;
		ДоговорКонтрагента = ОбменСУТИнтернетМагазин.найтиДоговорФакторингаПоОтветственному(основание);
		
		ИспользоватьПлановуюСебестоимость = ложь;
		//ИтогПлановаяСебестоимость       = Основание.ИтогПлановаяСебестоимость;
		КратностьВзаиморасчетов           = Основание.КратностьВзаиморасчетов;
		Комментарий        = "# Сезонный заказ №"+строка(Основание.Номер)+" от "+Формат(Основание.Дата,"ДЛФ=D")+" # " +СокрЛП(Лев(Основание.Комментарий,100));
		КонтактноеЛицо     = Основание.КонтактноеЛицо;
		Контрагент         = Основание.Контрагент;
		КурсВзаиморасчетов = Основание.КурсВзаиморасчетов;
		//НапомнитьОСобытии  = Основание.НапомнитьОСобытии;
		Организация        = Основание.Организация;
		Ответственный      = глТекущийПользователь;
		Подразделение      = Основание.Подразделение;
		Склад              = Основание.Склад;
		СтруктурнаяЕдиница = Основание.СтруктурнаяЕдиница;
		//СуммаДокумента     = Основание.СуммаДокумента;
		ТипЦен             = Основание.ТипЦен;
		УчитыватьНДС       = Основание.УчитыватьНДС;
		СуммаВключаетНДС   = Основание.СуммаВключаетНДС;
		ДокументОснование  = Основание;
		УстановитьДатуОплатыПоДоговору();
		
		Резерв3 = Основание.Резерв3; // 29.02.2016
		
		Если ЗначениеЗаполнено(СтруктураВыбора) Тогда
			
			Если СтруктураВыбора.Полностью Тогда //Плотников, 16.08.2016
				
				//{{__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!					// Заполнение шапки
				АвтомобильКонтрагента = Основание.АвтомобильКонтрагента;
				АвтоРазмещение = Основание.АвтоРазмещение;
				АвтоРезервирование = Основание.АвтоРезервирование;
				АдресДоставки = Основание.АдресДоставки;
				ВалютаДокумента = Основание.ВалютаДокумента;
				ВводитьТолькоПеремещение = Основание.ВводитьТолькоПеремещение;
				ВремяНапоминания = Основание.ВремяНапоминания;
				ВыписатьСпецификацию = Основание.ВыписатьСпецификацию;
				ГосНомерАвтомобиля = Основание.ГосНомерАвтомобиля;
				Грузоотправитель = Основание.Грузоотправитель;
				Грузополучатель = Основание.Грузополучатель;
				ДатаВходящегоДокумента = Основание.ДатаВходящегоДокумента;
				ДатаОтгрузки = Основание.ДатаОтгрузки;
				ДисконтнаяКарта = Основание.ДисконтнаяКарта;
				ДлинаРезерва = Основание.ДлинаРезерва;
				ДоговорКонтрагента = Основание.ДоговорКонтрагента;
				ИспользоватьПлановуюСебестоимость = Основание.ИспользоватьПлановуюСебестоимость;
				ИтогПлановаяСебестоимость = Основание.ИтогПлановаяСебестоимость;
				Комментарий = Основание.Комментарий;
				КонтактноеЛицо = Основание.КонтактноеЛицо;
				Контрагент = Основание.Контрагент;
				КратностьВзаиморасчетов = Основание.КратностьВзаиморасчетов;
				КубатураАвтомобиля = Основание.КубатураАвтомобиля;
				КурсВзаиморасчетов = Основание.КурсВзаиморасчетов;
				МаркаАвтомобиля = Основание.МаркаАвтомобиля;
				НапомнитьОСобытии = Основание.НапомнитьОСобытии;
				НомерВходящегоДокумента = Основание.НомерВходящегоДокумента;
				Организация = Основание.Организация;
				ОрганизацияДляПечати = Основание.ОрганизацияДляПечати;
				Ответственный = Основание.Ответственный;
				ПечататьСтраховоеЗаявление = Основание.ПечататьСтраховоеЗаявление;
				Подразделение = Основание.Подразделение;
				Проверен = Основание.Проверен;
				Резерв3 = Основание.Резерв3;
				Склад = Основание.Склад;
				СпособОтгрузки = Основание.СпособОтгрузки;
				ДокументОснование = Основание.Ссылка;
				СтруктурнаяЕдиница = Основание.СтруктурнаяЕдиница;
				СуммаВключаетНДС = Основание.СуммаВключаетНДС;
				СуммаДокумента = Основание.СуммаДокумента;
				СуммаПредоплатыПоЗаказу = Основание.СуммаПредоплатыПоЗаказу;
				ТипЦен = Основание.ТипЦен;
				Транзит = Основание.Транзит;
				УдалитьТипСкидкиНаценки = Основание.УдалитьТипСкидкиНаценки;
				УчитыватьНДС = Основание.УчитыватьНДС;
				Для Каждого ТекСтрокаВозвратнаяТара Из Основание.ВозвратнаяТара Цикл
					НоваяСтрока = ВозвратнаяТара.Добавить();
					НоваяСтрока.Количество = ТекСтрокаВозвратнаяТара.Количество;
					НоваяСтрока.Номенклатура = ТекСтрокаВозвратнаяТара.Номенклатура;
					НоваяСтрока.Размещение = ТекСтрокаВозвратнаяТара.Размещение;
					НоваяСтрока.Сумма = ТекСтрокаВозвратнаяТара.Сумма;
					НоваяСтрока.Цена = ТекСтрокаВозвратнаяТара.Цена;
				КонецЦикла;
				Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл
					НоваяСтрока = Товары.Добавить();
					НоваяСтрока.Вес = ТекСтрокаТовары.Вес;
					НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовары.ЕдиницаИзмерения;
					НоваяСтрока.ЕдиницаИзмеренияМест = ТекСтрокаТовары.ЕдиницаИзмеренияМест;
					НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = ТекСтрокаТовары.ЗначениеУсловияАвтоматическойСкидки;
					НоваяСтрока.Количество = ТекСтрокаТовары.Количество;
					НоваяСтрока.КоличествоМест = ТекСтрокаТовары.КоличествоМест;
					НоваяСтрока.Коэффициент = ТекСтрокаТовары.Коэффициент;
					НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
					НоваяСтрока.ПлановаяСебестоимость = ТекСтрокаТовары.ПлановаяСебестоимость;
					НоваяСтрока.ПроцентАвтоматическихСкидок = ТекСтрокаТовары.ПроцентАвтоматическихСкидок;
					НоваяСтрока.ПроцентСкидкиНаценки = ТекСтрокаТовары.ПроцентСкидкиНаценки;
					НоваяСтрока.Размещение = ТекСтрокаТовары.Размещение;
					НоваяСтрока.СтавкаНДС = ТекСтрокаТовары.СтавкаНДС;
					НоваяСтрока.Сумма = ТекСтрокаТовары.Сумма;
					НоваяСтрока.СуммаНДС = ТекСтрокаТовары.СуммаНДС;
					НоваяСтрока.УсловиеАвтоматическойСкидки = ТекСтрокаТовары.УсловиеАвтоматическойСкидки;
					НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрокаТовары.ХарактеристикаНоменклатуры;
					НоваяСтрока.Цена = ТекСтрокаТовары.Цена;
				КонецЦикла;
				Для Каждого ТекСтрокаУслуги Из Основание.Услуги Цикл
					НоваяСтрока = Услуги.Добавить();
					НоваяСтрока.Количество = ТекСтрокаУслуги.Количество;
					НоваяСтрока.Номенклатура = ТекСтрокаУслуги.Номенклатура;
					НоваяСтрока.ПроцентСкидкиНаценки = ТекСтрокаУслуги.ПроцентСкидкиНаценки;
					НоваяСтрока.Содержание = ТекСтрокаУслуги.Содержание;
					НоваяСтрока.СтавкаНДС = ТекСтрокаУслуги.СтавкаНДС;
					НоваяСтрока.Сумма = ТекСтрокаУслуги.Сумма;
					НоваяСтрока.СуммаНДС = ТекСтрокаУслуги.СуммаНДС;
					НоваяСтрока.Цена = ТекСтрокаУслуги.Цена;
				КонецЦикла;
				//}}__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
				
			Иначе	
				
				Транзит = ?(СтруктураВыбора.ВидСклада = 0, Ложь, Истина);
				
				Подразделение = Справочники.Подразделения.ПустаяСсылка();
				
				//+++14.10.2014 - массив всех филиалов + 0-ой элемент - это Головное подразделение
				Филиал = яштПоставщики.ПолучитьМассивФилиалов();
				ном = СтруктураВыбора.ВидСклада;
				Если ном < Филиал.Количество() Тогда
					Подразделение = Филиал[ном];
				КонецЕсли;
				//Если СтруктураВыбора.ВидСклада = 0 Тогда
				//	Подразделение = Справочники.Подразделения.НайтиПоКоду("00005"); //+++ транзит ЯШТ?! //Справочники.Подразделения.ПустаяСсылка();
				//ИначеЕсли СтруктураВыбора.ВидСклада	= 1 Тогда
				//	Подразделение = Справочники.Подразделения.НайтиПоКоду("00106"); //РнД
				//ИначеЕсли СтруктураВыбора.ВидСклада = 2 Тогда
				//	Подразделение = Справочники.Подразделения.НайтиПоКоду("00112"); //СПб
				//Иначе
				Если СтруктураВыбора.ВидСклада = 3 Тогда
					Подразделение = Справочники.Подразделения.НайтиПоКоду("00138"); //ЕКТ
				КонецЕсли;
				// С учетом Аналогов
				Если СтруктураВыбора.СУчетомАналогов Тогда
					
					Запрос=Новый Запрос;
					Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ЗаказПокупателяСезонныйТовары.Номенклатура,
					|	ЗаказПокупателяСезонныйТовары.Цена
					|ПОМЕСТИТЬ Док_тч
					|ИЗ
					|	Документ.ЗаказПокупателяСезонный.Товары КАК ЗаказПокупателяСезонныйТовары
					|ГДЕ
					|	ЗаказПокупателяСезонныйТовары.Ссылка = &Ссылка
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ЗаказыПокупателейСезонныеОстатки.Номенклатура,
					|	ЗаказыПокупателейСезонныеОстатки.КоличествоОстаток КАК ОсталосьЗаказать,
					|	Док_тч.Цена
					|ПОМЕСТИТЬ СЗТовары
					|ИЗ
					|	РегистрНакопления.ЗаказыПокупателейСезонные.Остатки(, ЗаказПокупателяСезонный = &ссылка И естьNull(Подразделение.ВЭД,ЛОЖЬ)=Ложь) КАК ЗаказыПокупателейСезонныеОстатки
					|		ЛЕВОЕ СОЕДИНЕНИЕ Док_тч КАК Док_тч
					|		ПО ЗаказыПокупателейСезонныеОстатки.Номенклатура = Док_тч.Номенклатура
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	Аналоги.Номенклатура,
					|	Аналоги.Аналог
					|ПОМЕСТИТЬ АналогиТоваров
					|ИЗ
					|	(ВЫБРАТЬ
					|		АналогиДисков.Номенклатура КАК Номенклатура,
					|		АналогиДисков.Аналог КАК Аналог
					|	ИЗ
					|		РегистрСведений.АналогиДисков КАК АналогиДисков
					|	ГДЕ
					|		АналогиДисков.Номенклатура В
					|				(ВЫБРАТЬ
					|					СЗТовары.Номенклатура
					|				ИЗ
					|					СЗТовары КАК СЗТовары)
					|	
					|	ОБЪЕДИНИТЬ ВСЕ
					|	
					|	ВЫБРАТЬ
					|		АналогиДисков.Аналог,
					|		АналогиДисков.Номенклатура
					|	ИЗ
					|		РегистрСведений.АналогиДисков КАК АналогиДисков
					|	ГДЕ
					|		АналогиДисков.Аналог В
					|				(ВЫБРАТЬ
					|					СЗТовары.Номенклатура
					|				ИЗ
					|					СЗТовары КАК СЗТовары)
					|	
					|	ОБЪЕДИНИТЬ ВСЕ
					|	
					|	ВЫБРАТЬ
					|		АналогиДисков.Аналог,
					|		АналогиДисков1.Аналог
					|	ИЗ
					|		РегистрСведений.АналогиДисков КАК АналогиДисков
					|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналогиДисков КАК АналогиДисков1
					|			ПО АналогиДисков.Номенклатура = АналогиДисков1.Номенклатура
					|	ГДЕ
					|		АналогиДисков.Аналог В
					|				(ВЫБРАТЬ
					|					СЗТовары.Номенклатура
					|				ИЗ
					|					СЗТовары КАК СЗТовары)
					|		И АналогиДисков.Аналог <> ЕСТЬNULL(АналогиДисков1.Аналог, АналогиДисков.Аналог)
					|	
					|	ОБЪЕДИНИТЬ ВСЕ
					|	
					|	ВЫБРАТЬ
					|		АналогиДисков.Номенклатура,
					|		АналогиДисков1.Номенклатура
					|	ИЗ
					|		РегистрСведений.АналогиДисков КАК АналогиДисков
					|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналогиДисков КАК АналогиДисков1
					|			ПО АналогиДисков.Аналог = АналогиДисков1.Аналог
					|	ГДЕ
					|		АналогиДисков.Номенклатура В
					|				(ВЫБРАТЬ
					|					СЗТовары.Номенклатура
					|				ИЗ
					|					СЗТовары КАК СЗТовары)
					|		И АналогиДисков.Номенклатура <> ЕСТЬNULL(АналогиДисков1.Номенклатура, АналогиДисков.Номенклатура)
					|	
					|	ОБЪЕДИНИТЬ ВСЕ
					|	
					|	ВЫБРАТЬ
					|		АналогиДисков.Номенклатура,
					|		АналогиДисков1.Аналог
					|	ИЗ
					|		РегистрСведений.АналогиДисков КАК АналогиДисков
					|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналогиДисков КАК АналогиДисков1
					|			ПО АналогиДисков.Аналог = АналогиДисков1.Номенклатура
					|	ГДЕ
					|		АналогиДисков.Номенклатура В
					|				(ВЫБРАТЬ
					|					СЗТовары.Номенклатура
					|				ИЗ
					|					СЗТовары КАК СЗТовары)
					|		И АналогиДисков.Номенклатура <> ЕСТЬNULL(АналогиДисков1.Аналог, АналогиДисков.Номенклатура)
					|	
					|	ОБЪЕДИНИТЬ ВСЕ
					|	
					|	ВЫБРАТЬ
					|		АналогиДисков.Аналог,
					|		АналогиДисков1.Номенклатура
					|	ИЗ
					|		РегистрСведений.АналогиДисков КАК АналогиДисков
					|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналогиДисков КАК АналогиДисков1
					|			ПО АналогиДисков.Номенклатура = АналогиДисков1.Аналог
					|	ГДЕ
					|		АналогиДисков.Аналог В
					|				(ВЫБРАТЬ
					|					СЗТовары.Номенклатура
					|				ИЗ
					|					СЗТовары КАК СЗТовары)
					|		И АналогиДисков.Аналог <> ЕСТЬNULL(АналогиДисков1.Номенклатура, АналогиДисков.Аналог)
					|	
					|	ОБЪЕДИНИТЬ ВСЕ
					|	
					|	ВЫБРАТЬ
					|		СЗТовары.Номенклатура,
					|		СЗТовары.Номенклатура
					|	ИЗ
					|		СЗТовары КАК СЗТовары) КАК Аналоги
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	СЗТовары.Номенклатура КАК Номенклатура,
					|	СЗТовары.Номенклатура.Код КАК Код,
					|	ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0) КАК Заказано,
					|	ЕСТЬNULL(ОстаткиТоваров.КоличествоОстаток, 0) КАК ОстатокНаСкладах,
					|	ЕСТЬNULL(ОстаткиТоваров.КоличествоОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0) КАК СвободныйОстаток,
					|	АналогиТоваров.Аналог,
					|	ВЫБОР
					|		КОГДА СЗТовары.Номенклатура = АналогиТоваров.Аналог
					|			ТОГДА 0
					|		ИНАЧЕ 1
					|	КОНЕЦ КАК Порядок,
					|	СЗТовары.ОсталосьЗаказать,
					|	СЗТовары.Цена
					|ИЗ
					|	СЗТовары КАК СЗТовары
					|		ЛЕВОЕ СОЕДИНЕНИЕ АналогиТоваров КАК АналогиТоваров
					|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(
					|					,
					|					ЗаказПокупателя.Проверен
					|						И (&Транзит
					|								И ЗаказПокупателя.Транзит
					|								И ЗаказПокупателя.Подразделение = &Подразделение
					|							ИЛИ НЕ &Транзит
					|								И НЕ ЗаказПокупателя.Транзит)) КАК ЗаказыПокупателей
					|			ПО АналогиТоваров.Аналог = ЗаказыПокупателей.Номенклатура
					|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
					|					,
					|					НЕ Склад.ЗапретитьИспользование
					|						И (&Транзит
					|								И Склад.Транзитный
					|								И Склад.Подразделение = &Подразделение
					|							ИЛИ НЕ &Транзит
					|								И НЕ Склад.Транзитный)) КАК ОстаткиТоваров
					|			ПО АналогиТоваров.Аналог = ОстаткиТоваров.Номенклатура
					|		ПО (АналогиТоваров.Номенклатура = СЗТовары.Номенклатура)
					|
					|УПОРЯДОЧИТЬ ПО
					|	Порядок";
					//|ИТОГИ
					//|	СУММА(Отгружено),
					//|	СУММА(ЗаказаноКонтрагентом),
					//|	СУММА(ОсталосьЗаказать)
					//|ПО
					//|	Номенклатура";
					
					//+++ 30.07.2014 
					//Для Транзитных Сезонных заказов - делаем заказ Для перемещение - ТОЛЬКО Для Контрагента = филиал !!!
					// и в "свободных" остатках - вычитаем ВСЕ заказы на перемещение, которые Проделены !
					
					Если Основание.Транзит Тогда // транзитный и автокомплектация >> Для перемещения в филиал
						// сразу делается заказ Для перемещения на Склад или в Подразделение!
						Если СокрЛП(Основание.Контрагент.Код) = "93187" 
							или СокрЛП(Основание.Контрагент.Код) = "П000835"
							или СокрЛП(Основание.Контрагент.Код) = "93801"
							или СокрЛП(Основание.Контрагент.Код) = "94036" //+++ 08.06.2015 обособка ЕКт
							//или Основание.Склад.Транзитный 
							Тогда
							
							ЭтотОбъект.ВводитьТолькоПеремещение = Истина; 
							
							Запрос.текст = стрЗаменить(запрос.Текст, "//филиал_перемещение", "");
							
							//смотрим все проведенные, проделенные заказы на перемещение с ЯШТ 
							// на филиал или в транзитный склад!
							Запрос.текст = стрЗаменить(запрос.Текст, "//ФИЛИАЛ_ВЫБОРКА", "ЛЕВОЕ СОЕДИНЕНИЕ 
							|(ВЫБРАТЬ
							|	ЗакПокТов.Номенклатура,
							|	СУММА(ЗакПокТов.Количество) КАК Количество
							|ИЗ
							|	Документ.ЗаказПокупателя.Товары КАК ЗакПокТов
							|ГДЕ
							|	ЗакПокТов.Ссылка.Дата >= &ДатаНач
							|	И ЗакПокТов.Ссылка.Контрагент = &Контрагент
							|	И НЕ ЗакПокТов.Ссылка.ПометкаУдаления
							|	И НЕ ЗакПокТов.Ссылка.транзит
							|	И ЗакПокТов.Ссылка.ВводитьТолькоПеремещение
							|	И ЗакПокТов.Ссылка.Проведен
							|	И ЗакПокТов.Ссылка.Проверен
							|	И ЗакПокТов.Ссылка.Подразделение = &Подразделение
							|//отборПоТранзитномуСкладу И ЗакПокТов.Ссылка.Склад = &Склад
							|
							|СГРУППИРОВАТЬ ПО
							|	ЗакПокТов.Номенклатура
							|) как ЗаказыПокупателейНаПеремещение
							|		ПО ЗаказыПокупателейНаПеремещение.Номенклатура = ОстаткиТоваров.Номенклатура");
							
							Запрос.УстановитьПараметр("Контрагент", Основание.Контрагент); 
							
						КонецЕсли;
					КонецЕсли;
					//+++)
					
					
					НачДата = НачалоДня(Основание.Дата); // заказы покупателя тем же днем, но раньше сезонного - тоже попадают
					КонДата = ТекущаяДата(); //+++ по текущую дату!!!
					
					Запрос.УстановитьПараметр("ДатаНач",НачДата); // с начала сезона
					Запрос.УстановитьПараметр("ДатаКон",КонДата); // до конца сезона
					Запрос.УстановитьПараметр("ТекДата",НачалоДня(ТекущаяДата()) );
					Запрос.УстановитьПараметр("Ссылка",Основание.Ссылка);
					Запрос.УстановитьПараметр("Транзит",Транзит); 
					Запрос.УстановитьПараметр("Подразделение",Подразделение); 
					
					
					//+++ 05.11.2015 список клиентов и договоров
					КонтрагентСписок = 	новый СписокЗначений;
					ДоговорКонтрагентаСписок = новый СписокЗначений;
					
					КонтрагентСписок.Добавить( Основание.Контрагент );
					Если НЕ Основание.ДоговорКонтрагента.Пустая() Тогда
						ДоговорКонтрагентаСписок.Добавить( Основание.ДоговорКонтрагента );
					КонецЕсли;
					Запрос.УстановитьПараметр("КонтрагентСписок",КонтрагентСписок);
					
					
					// Иначе без аналогов	
				Иначе
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ЗаказПокупателяСезонныйТовары.Номенклатура,
					|	ЗаказПокупателяСезонныйТовары.Цена
					|ПОМЕСТИТЬ Док_Тч
					|ИЗ
					|	Документ.ЗаказПокупателяСезонный.Товары КАК ЗаказПокупателяСезонныйТовары
					|ГДЕ
					|	ЗаказПокупателяСезонныйТовары.Ссылка = &Ссылка
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ЗаказыПокупателейСезонныеОстатки.Номенклатура,
					|	ЗаказыПокупателейСезонныеОстатки.КоличествоОстаток,
					|	ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателяСезонный,
					|	Док_Тч.Цена
					|ПОМЕСТИТЬ СЗТовары
					|ИЗ
					|	РегистрНакопления.ЗаказыПокупателейСезонные.Остатки(, ЗаказПокупателяСезонный = &Ссылка И естьNull(Подразделение.ВЭД,ЛОЖЬ)=Ложь) КАК ЗаказыПокупателейСезонныеОстатки
					|		ЛЕВОЕ СОЕДИНЕНИЕ Док_Тч КАК Док_Тч
					|		ПО ЗаказыПокупателейСезонныеОстатки.Номенклатура = Док_Тч.Номенклатура
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	СЗТовары.Номенклатура КАК Номенклатура,
					|	СЗТовары.Номенклатура.Код КАК Код,
					|	ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0) КАК Заказано,
					|	ЕСТЬNULL(ОстаткиТоваров.КоличествоОстаток, 0) КАК ОстатокНаСкладах,
					|	ЕСТЬNULL(ОстаткиТоваров.КоличествоОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0) КАК СвободныйОстаток,
					|	СЗТовары.КоличествоОстаток КАК ОсталосьЗаказать,
					|	СЗТовары.Цена
					|ИЗ
					|	СЗТовары КАК СЗТовары
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки( ,
					|				ЗаказПокупателя.Проверен
					|					И ЗаказПокупателя.Транзит = &Транзит
					|					"+?(Транзит, "И ЗаказПокупателя.Подразделение = &Подразделение","")+"
					|	) КАК ЗаказыПокупателей
					|		ПО СЗТовары.Номенклатура = ЗаказыПокупателей.Номенклатура
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(,
					|				Склад.ЗапретитьИспользование = ЛОЖЬ
					|					И Склад.Транзитный = &Транзит
					//09.02.2018
					|					"+?(Транзит,"И Склад.Подразделение = &Подразделение","")+"
					|				) КАК ОстаткиТоваров
					|		ПО СЗТовары.Номенклатура = ОстаткиТоваров.Номенклатура";
					
					
					//+++ 30.07.2014 
					//Для Транзитных Сезонных заказов - делаем заказ Для перемещение - ТОЛЬКО Для Контрагента = филиал !!!
					// и в "свободных" остатках - вычитаем ВСЕ заказы на перемещение, которые Проделены !
					
					Если Основание.Транзит Тогда // транзитный и автокомплектация >> Для перемещения в филиал
						// сразу делается заказ Для перемещения на Склад или в Подразделение!
						Если СокрЛП(Основание.Контрагент.Код) = "93187" 
							или СокрЛП(Основание.Контрагент.Код) = "П000835"
							или СокрЛП(Основание.Контрагент.Код) = "93801"
							или СокрЛП(Основание.Контрагент.Код) = "94036" //+++ 08.06.2015 обособка ЕКт
							//или Основание.Склад.Транзитный 
							Тогда
							
							ЭтотОбъект.ВводитьТолькоПеремещение = Истина; 
							
							Запрос.текст = стрЗаменить(запрос.Текст, "//филиал_перемещение", "");
							
							//смотрим все проведенные, проделенные заказы на перемещение с ЯШТ 
							// на филиал или в транзитный склад!
							Запрос.текст = стрЗаменить(запрос.Текст, "//ФИЛИАЛ_ВЫБОРКА", "ЛЕВОЕ СОЕДИНЕНИЕ 
							|(ВЫБРАТЬ
							|	ЗакПокТов.Номенклатура,
							|	СУММА(ЗакПокТов.Количество) КАК Количество
							|ИЗ
							|	Документ.ЗаказПокупателя.Товары КАК ЗакПокТов
							|ГДЕ
							|	ЗакПокТов.Ссылка.Дата >= &ДатаНач
							|	И ЗакПокТов.Ссылка.Контрагент = &Контрагент
							|	И НЕ ЗакПокТов.Ссылка.ПометкаУдаления
							|	И НЕ ЗакПокТов.Ссылка.транзит
							|	И ЗакПокТов.Ссылка.ВводитьТолькоПеремещение
							|	И ЗакПокТов.Ссылка.Проведен
							|	И ЗакПокТов.Ссылка.Проверен
							|	И ЗакПокТов.Ссылка.Подразделение = &Подразделение
							|//отборПоТранзитномуСкладу И ЗакПокТов.Ссылка.Склад = &Склад
							|
							|СГРУППИРОВАТЬ ПО
							|	ЗакПокТов.Номенклатура
							|) как ЗаказыПокупателейНаПеремещение
							|		ПО ЗаказыПокупателейНаПеремещение.Номенклатура = ОстаткиТоваров.Номенклатура");
							
							Запрос.УстановитьПараметр("Контрагент", Основание.Контрагент); 
							
						КонецЕсли;
					КонецЕсли;
					//+++)
					
					
					НачДата = НачалоДня(Основание.Дата); // заказы покупателя тем же днем, но раньше сезонного - тоже попадают
					КонДата = ТекущаяДата(); //+++ по текущую дату!!!
					
					Запрос.УстановитьПараметр("ДатаНач",НачДата); // с начала сезона
					Запрос.УстановитьПараметр("ДатаКон",КонДата); // до конца сезона
					Запрос.УстановитьПараметр("ТекДата",НачалоДня(ТекущаяДата()) );
					Запрос.УстановитьПараметр("Ссылка",Основание.Ссылка);
					Запрос.УстановитьПараметр("Транзит",Транзит); 
					Запрос.УстановитьПараметр("Подразделение",Подразделение); 
					
					
					//+++ 05.11.2015 список клиентов и договоров
					КонтрагентСписок = 	новый СписокЗначений;
					ДоговорКонтрагентаСписок = новый СписокЗначений;
					
					КонтрагентСписок.Добавить( Основание.Контрагент );
					Если НЕ Основание.ДоговорКонтрагента.Пустая() Тогда
						ДоговорКонтрагентаСписок.Добавить( Основание.ДоговорКонтрагента );
					КонецЕсли;
					Запрос.УстановитьПараметр("КонтрагентСписок",КонтрагентСписок);
					
					
				КонецЕсли;
				
				
				
				Если СтруктураВыбора.ВидОстатков<2 Тогда //+++ 14.07.2014 только Если нужны остатки или свободные остатки
					ТекТабТовары=Запрос.Выполнить().Выгрузить();
				КонецЕсли;
				
				//+++( 14.07.2014 Для Серебренниковой - отгрузка по непроведенному приходу?!
				// по заданию на отгрузку (Приход) - только не транзитные заказы поставщиков!, 
				// только за 3 дня, не выполненные
				
				Если СтруктураВыбора.ВидОстатков>=2 Тогда  // по приходам (товарам в пути!)  //+++ 19.08.2014
					запрос1 = новый запрос;
					
					//09.02.2018 - сразу из документа - нужна цена!
					таблСезЗак = Основание.Товары.Выгрузить(,"Номенклатура, Цена");
					запрос1.УстановитьПараметр("таблСезЗак", таблСезЗак);
					
					запрос1.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ЗаказПокупателяСезонныйТовары.Номенклатура,
					|	ЗаказПокупателяСезонныйТовары.Цена
					|ПОМЕСТИТЬ Док_ТЧ
					|ИЗ
					|	&таблСезЗак КАК ЗаказПокупателяСезонныйТовары
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ЗаказыПокупателейСезонныеОстатки.Номенклатура,
					|	ЗаказыПокупателейСезонныеОстатки.КоличествоОстаток КАК ОсталосьЗаказать,
					|	ЕстьNull(Док_ТЧ.Цена,0) как Цена
					|ПОМЕСТИТЬ ВТ_Товары
					|ИЗ
					|	РегистрНакопления.ЗаказыПокупателейСезонные.Остатки(, ЗаказПокупателяСезонный = &ссылка 
					|						И естьNull(Подразделение.ВЭД,ЛОЖЬ)=Ложь ) КАК ЗаказыПокупателейСезонныеОстатки
					|		ЛЕВОЕ СОЕДИНЕНИЕ Док_ТЧ КАК Док_ТЧ
					|		ПО ЗаказыПокупателейСезонныеОстатки.Номенклатура = Док_ТЧ.Номенклатура
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|//ВТ_СписЗак
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	СЗТовары.Номенклатура,
					|	СЗТовары.Цена,
					|	СЗТовары.ОсталосьЗаказать,
					|	ВЫБОР
					|		КОГДА СЗТовары.ОсталосьЗаказать < ЕСТЬNULL(ЗаказыПоставщикамОстатки.КоличествоОстаток, 0)
					|			ТОГДА СЗТовары.ОсталосьЗаказать
					|		ИНАЧЕ ЕСТЬNULL(ЗаказыПоставщикамОстатки.КоличествоОстаток, 0)
					|	КОНЕЦ КАК КоличествоПрихода
					|ИЗ
					|	ВТ_Товары КАК СЗТовары
					|
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			ЗаказыПоставщикам.Номенклатура КАК Номенклатура,
					|			ЗаказыПоставщикам.КоличествоОстаток КАК КоличествоОстаток
					|		ИЗ
					|			РегистрНакопления.ЗаказыПоставщикам.Остатки( ,
					|				Номенклатура В (ВЫБРАТЬ ВТ_Товары.Номенклатура ИЗ ВТ_Товары) 
					|				И ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ
					|				//ДопУСЛОВИЕ
					|				           ) КАК ЗаказыПоставщикам      ) КАК ЗаказыПоставщикамОстатки
					|		ПО СЗТовары.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура
					|;
					|////////////////////////////////////////////////////////////////////////////////
					|Уничтожить Док_ТЧ; 
					|Уничтожить ВТ_Товары;
					|//УничтожитьВТ_СписЗак";
					
					запрос1.УстановитьПараметр("ДатаНач",Основание.Ссылка.Дата ); // от начала сезонного заказа
					запрос1.УстановитьПараметр("ДатаКон",КонецДня(ТекущаяДата()));// по сегодня
					
					//+++ 16.11.2015
					запрос1.УстановитьПараметр("КонтрагентСписок", КонтрагентСписок);// из Сезонного заказа покупателя				
					запрос1.УстановитьПараметр("ДоговорКонтрагентаСписок", ДоговорКонтрагентаСписок);// из Сезонного заказа покупателя				
					Запрос1.УстановитьПараметр("СезонныйЗаказ", Основание.Ссылка);
					запрос1.УстановитьПараметр("ВидОперации",Перечисления.ВидыДвиженийПриходРасход.Приход); 
					
					//+++++++++++++++++из общей формы+++++++++++++++++++++++++++++++
					Дата1 = СтруктураВыбора.ДатаНач;
					Дата2 = СтруктураВыбора.ДатаКон;
					
					Если СтруктураВыбора.ВидСклада>0 
						Тогда СкладТранзит = Истина;
						Иначе СкладТранзит = ЛОЖЬ;
					КонецЕсли;	
					запрос1.УстановитьПараметр("Транзит", СкладТранзит);
					
					Подразделение = Справочники.Подразделения.ПустаяСсылка();
					
					//+++14.10.2014 - массив всех филиалов + 0-ой элемент - это Головное подразделение
					Филиал = яштПоставщики.ПолучитьМассивФилиалов();
					ном = СтруктураВыбора.ВидСклада;
					Если ном < Филиал.Количество() Тогда
						Подразделение = Филиал[ном];
					КонецЕсли;
					
					запрос1.УстановитьПараметр("Подразделение", Подразделение );
					
					запрос1.УстановитьПараметр("Дата1",Дата1);
					запрос1.УстановитьПараметр("Дата2",Дата2);
					
					
					//+++ 19.08.2014  ввод по Плановым приходам (товары в пути по приходу за Период)
					Если СтруктураВыбора.ВидОстатков = 3 
						ИЛИ СтруктураВыбора.ВидОстатков = 4
						ИЛИ СтруктураВыбора.ВидОстатков = 5 Тогда 
						
						запрос1.УстановитьПараметр("Дата1", ДобавитьМесяц(НачалоДня(ТекущаяДата()),-6));
						Если СтруктураВыбора.ВидОстатков = 3 Тогда
							запрос1.УстановитьПараметр("Дата2", "ДОБАВИТЬКДАТЕ(&Дата1, ДЕНЬ, 15 )");   //15 т.к. на начало дня
						ИначеЕсли СтруктураВыбора.ВидОстатков = 4 Тогда
							запрос1.УстановитьПараметр("Дата2", "ДОБАВИТЬКДАТЕ(&Дата1, ДЕНЬ, 46)");    //46 т.к. на начало дня
						ИначеЕсли СтруктураВыбора.ВидОстатков = 5 Тогда
							запрос1.УстановитьПараметр("Дата2", КонецДня(СтруктураВыбора.ДатаПланПрихода));
						КонецЕсли;
						
						запрос1.текст = стрЗаменить(запрос1.текст, "//ДопУСЛОВИЕ", 
						"И (ЗаказПоставщику.ДатаПриходаВПортИлиНаТаможнюETA >= &Дата1 И ЗаказПоставщику.ДатаПриходаВПортИлиНаТаможнюETA <= &Дата2) 
						| "+?(СкладТранзит, "И ЗаказПоставщику.Подразделение = &Подразделение","") );
					Иначе
						запрос1.текст = стрЗаменить(запрос1.текст, "//ДопУСЛОВИЕ", 
						"И ЗаказПоставщику В (ВЫБРАТЬ СписЗак.Заказ ИЗ ВТ_СписЗак КАК СписЗак)");
						
						запрос1.текст = стрЗаменить(запрос1.текст, "//ВТ_СписЗак", "ВЫБРАТЬ
						|	СписокЗаказовИзЗаданияНаПриход.ЗаказПоставщику КАК Заказ
						|ПОМЕСТИТЬ ВТ_СписЗак
						|ИЗ
						|	Документ.ЗаданиеНаОтгрузку.ЗаказыПоставщикам КАК СписокЗаказовИзЗаданияНаПриход
						|ГДЕ
						|	СписокЗаказовИзЗаданияНаПриход.Ссылка.Дата >= &Дата1 
						|	и  СписокЗаказовИзЗаданияНаПриход.Ссылка.Дата < &Дата2
						
						|	И СписокЗаказовИзЗаданияНаПриход.ЗаказПоставщику.Транзит = &Транзит
						|	И Выбор когда &Транзит Тогда СписокЗаказовИзЗаданияНаПриход.ЗаказПоставщику.Подразделение = &Подразделение
						|			Иначе Истина Конец
						
						|	И СписокЗаказовИзЗаданияНаПриход.Ссылка.ВидОперации = &ВидОперации
						|	И СписокЗаказовИзЗаданияНаПриход.Ссылка.Выполнено = ЛОЖЬ
						|	И НЕ СписокЗаказовИзЗаданияНаПриход.Ссылка.ПометкаУдаления
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|");	
						запрос1.текст = стрЗаменить(запрос1.текст,"//УничтожитьВТ_СписЗак","Уничтожить ВТ_СписЗак;");
					КонецЕсли;
					запрос1.УстановитьПараметр("ссылка", Основание.ссылка);
					
					
					ТекТабТовары = запрос1.Выполнить().Выгрузить();
					
				КонецЕсли;
				
				
				////+++)
				//Заполнение документа с учетом аналогов
				Если СтруктураВыбора.СУчетомАналогов и структураВыбора.ВидОстатков<2 Тогда
					//---------защита от дублей-------------------
					таб = ТекТабТовары.Скопировать();
					таб.Свернуть("Номенклатура");
					табНом = ТекТабТовары.Скопировать();
					табНом.Свернуть("Аналог");
					ИзменяемаяКолонка=табНом.Колонки.Найти("Аналог");
					ИзменяемаяКолонка.Имя="Номенклатура";
					списНом = новый СписокЗначений;
					списНом.ЗагрузитьЗначения(ТекТабТовары.ВыгрузитьКолонку("Аналог") );
					
					//----------------------определение цен-------------------
					флПересчетаЦен = ложь; //+++ 23.01.2014
					
					//21.03.2017 - только если этот договор - экспортный в рублях и без *
					флБезНДС = (Контрагент.Экспорт И ДоговорКонтрагента.ВалютаВзаиморасчетов.Код="643" 
					И найти(врег(ДоговорКонтрагента.Наименование),"ЭКСПОРТ")>0
					и найти(ДоговорКонтрагента.Наименование,"*")=0 );
					
					Если флПересчетаЦен Тогда
						табЦен = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента(Контрагент, списНом);
						Если ТипЗнч(табЦен)=тип("Строка") Тогда
							табЦен = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(Контрагент, списНом, ,,, ,, флБезНДС); //21.03.2017 - надо 7 запятых!
						КонецЕсли;
						#Если Клиент Тогда
							Сообщить(" Цены в Заказе будут заполнены по ценам Контрагента: "+строка(Основание.Контрагент)+?(флБезНДС," Без НДС!","") );
						#КонецЕсли
					Иначе
						#Если Клиент Тогда
							Сообщить(" Цены в Заказе будут заполнены из документа: "+строка(Основание));
							Сообщить(" Для пересчета по текущим ценам и правилам Контрагента - нажмите кнопку [Цены Контрагента]");
						#КонецЕсли
					КонецЕсли;
					
					//+++ (02.04.2014 
					табТоварыВПутиИПроизводстве = новый ТаблицаЗначений;
					
					Если списНом.Количество()>0 Тогда
						
						
						//------------по списку товаров из сезонного заказа покупателя -------------------
						//-----------находим остатки товаров в производстве по всем действующие на текДата сезонные заказам поставщиков,
						//----------- где Грузополучатель = Клиент ---------------------------------------
						//
						//----------- а также ВСЕ товары в пути (по заказам поставщиков!)-----------------
						//----------- где Грузополучатель = Клиент ---------------------------------------
						//
						запрос1 = новый запрос;
						запрос1.Текст = "ВЫБРАТЬ
						|	табНом.Номенклатура
						|ПОМЕСТИТЬ ВТ_табНом
						|ИЗ
						|	&табНом КАК табНом
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ
						|	ЗаказыПокупателейСезонныйТовары.Номенклатура,
						|	ЕСТЬNULL(ОстаткиТоваровВПроизводстве.КоличествоОстаток, 0) КАК ВПроизводстве,
						|	ЕСТЬNULL(ОстаткиТоваровВПути.КоличествоОстаток, 0) КАК ВПути
						|ИЗ
						|	ВТ_табНом КАК ЗаказыПокупателейСезонныйТовары
						|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикамСезонные.Остатки(,
						|				Номенклатура В (&СписНом)
						|					И ЗаказПоставщикуСезонный.Грузополучатель = &Контрагент
						|                   И ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ
						|					И ЗаказПоставщикуСезонный.ДатаДействияПо >= &ТекДата) КАК ОстаткиТоваровВПроизводстве
						|		ПО ЗаказыПокупателейСезонныйТовары.Номенклатура = ОстаткиТоваровВПроизводстве.Номенклатура
						|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки(,
						|				Номенклатура В (&СписНом) И ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ
						|					И ЗаказПоставщику.Грузополучатель = &Контрагент) КАК ОстаткиТоваровВПути
						|		ПО ЗаказыПокупателейСезонныйТовары.Номенклатура = ОстаткиТоваровВПути.Номенклатура
						|ГДЕ
						|	(ЕСТЬNULL(ОстаткиТоваровВПроизводстве.КоличествоОстаток, 0) > 0
						|			ИЛИ ЕСТЬNULL(ОстаткиТоваровВПути.КоличествоОстаток, 0) > 0)";
						запрос1.УстановитьПараметр("табНом",табНом);
						запрос1.УстановитьПараметр("СписНом",СписНом);
						запрос1.УстановитьПараметр("Контрагент",Контрагент);
						запрос1.УстановитьПараметр("Транзит",Транзит);
						запрос1.УстановитьПараметр("Подразделение",Подразделение); 
						запрос1.УстановитьПараметр("ТекДата",НачалоДня(ТекущаяДата()) );
						
						табТоварыВПутиИПроизводстве = запрос1.Выполнить().Выгрузить();
						
					КонецЕсли;
					//+++)
					
					
					i=0; N = Таб.Количество();
					Пока  i<N Цикл 
						Отбор = Новый Структура("Номенклатура",Таб[i].Номенклатура);
						найденныеСтроки = ТекТабТовары.НайтиСтроки(Отбор); 	
						СтрокаНоменклатуры = НайденныеСтроки[0];
						сч =1 ;
						ОтгруженоАналогов = 0;
						ЗаказаноАналогов = 0;
						КолПрАналогов = 0;
						
						//Пока сч < НайденныеСтроки.Количество()Цикл
						//	ОтгруженоАналогов = ОтгруженоАналогов+ НайденныеСтроки[сч].Отгружено;
						//	ЗаказаноАналогов = ЗаказаноАналогов + НайденныеСтроки[сч].ЗаказаноКонтрагентом;
						//	//АНАЛОГИ В ПРОИЗВОДСТВЕ НЕ ИЩЕМ
						//	//Если табТоварыВПутиИПроизводстве.Количество()>0 Тогда
						//	//	стрПр = табТоварыВПутиИПроизводстве.Найти(НайденныеСтроки[сч].Аналог, "Номенклатура");
						//	//	Если стрПр <> неопределено Тогда
						//	//		КолПрАналогов = ?(стрПр.ВПроизводстве<=0,0,стрПр.ВПроизводстве) + ?(стрПр.ВПути<=0,0,стрПр.ВПути);
						//	//	КонецЕсли;	
						//	//КонецЕсли;	
						//	сч=сч+1;
						//КонецЦикла;			
						//осталосьЗаказатьНоменклатуры = СтрокаНоменклатуры.ОсталосьЗаказать-ОтгруженоАналогов-ЗаказаноАналогов;
						осталосьЗаказатьНоменклатуры = СтрокаНоменклатуры.ОсталосьЗаказать;
						
						ТекСтрокаТовары = СтрокаНоменклатуры;
						
						i=i+1;
						ОсталосьЗаказать =  ОсталосьЗаказатьНоменклатуры;
						Для каждого стр из НайденныеСтроки Цикл
							ОстатокНаСкладах = ?(СтруктураВыбора.ВидОстатков =0,стр.ОстатокНаСкладах, 
							?(СтруктураВыбора.ВидОстатков =1, стр.СвободныйОстаток, 
							стр.КоличествоПрихода ) );  //+++ 14.07.2014
							
							//+++ 02.04.2014
							КолПр = 0;
							
							Если Стр = НайденныеСтроки[0] Тогда
								Если табТоварыВПутиИПроизводстве.Количество()>0 Тогда
									стрПр = табТоварыВПутиИПроизводстве.Найти( ТекСтрокаТовары.Номенклатура, "Номенклатура");
									Если стрПр <> неопределено Тогда
										КолПр = ?(стрПр.ВПроизводстве<=0,0,стрПр.ВПроизводстве) + ?(стрПр.ВПути<=0,0,стрПр.ВПути);
										
										КоличествоОсталосьЗаказать = Макс( Мин(ТекСтрокаТовары.ОсталосьЗаказать-КолПр,ОстатокНаСкладах), 0); // всегда с уменьшением!
										
										#Если Клиент Тогда         
											//+++ 08.04.2014 вопрос при расхождениях!
											КоличествоОсталосьЗаказать0 = Макс( Мин(ТекСтрокаТовары.ОсталосьЗаказать,ОстатокНаСкладах), 0);
											КоличествоОсталосьЗаказать1 = Макс( Мин(ТекСтрокаТовары.ОсталосьЗаказать-КолПр,ОстатокНаСкладах), 0);
											Если КоличествоОсталосьЗаказать0>КоличествоОсталосьЗаказать1 Тогда
												Режим = РежимДиалогаВопрос.ДаНет;
												Ответ = Вопрос("Для товара: "+строка(ТекСтрокаТовары.номенклатура.Код)+") Осталось заказать "+строка(ТекСтрокаТовары.ОсталосьЗаказать)+" шт.,
												|Однако, в производстве и в пути этому клиенту уже есть "+строка(КолПр)+" шт.
												|А остаток на складах составляет "+строка(ОстатокНаСкладах)+" шт.
												|
												|Заказать уменьшенное количество "+строка(КоличествоОсталосьЗаказать1)+"шт.?", Режим, 0);
												Если Ответ = КодВозвратаДиалога.Да Тогда
													КоличествоОсталосьЗаказать = КоличествоОсталосьЗаказать1;
												Иначе
													КоличествоОсталосьЗаказать = КоличествоОсталосьЗаказать0;
												КонецЕсли;
											КонецЕсли;	
											
											Если ОстатокНаСкладах>0 Тогда
												Сообщить("Для товара: "+строка(ТекСтрокаТовары.номенклатура.Код)+") Осталось заказать по сезонному заказу: "+строка(ТекСтрокаТовары.ОсталосьЗаказать)
												+", прямая доставка от поставщика: "+строка(КолПр)+", а на складах: "+строка(ОстатокНаСкладах)
												+?(КоличествоОсталосьЗаказать>0, " Будет заказано: "+строка(КоличествоОсталосьЗаказать),
												" Товар не будет заказан!") , СтатусСообщения.Информация );
											КонецЕсли;
										#КонецЕсли	
									КонецЕсли;	
								КонецЕсли;	
								//+++)
								КоличествоОсталосьЗаказать = Макс( Мин(осталосьЗаказать-КолПр,ОстатокНаСкладах), 0);
							Иначе
								КоличествоОсталосьЗаказать = Макс( Мин(осталосьЗаказать,ОстатокНаСкладах), 0);
							КонецЕсли;
							
							Если КоличествоОсталосьЗаказать>0 Тогда
								
								НоваяСтрока = Товары.Добавить();
								НоваяСтрока.Номенклатура               = стр.Аналог;
								НоваяСтрока.Количество                 = КоличествоОсталосьЗаказать;
								НоваяСтрока.КоличествоМест             = КоличествоОсталосьЗаказать;
								НоваяСтрока.Коэффициент                = 1;
								НоваяСтрока.ЕдиницаИзмерения           = стр.Аналог.ЕдиницаХраненияОстатков;
								НоваяСтрока.ЕдиницаИзмеренияМест       = стр.Аналог.ЕдиницаХраненияОстатков;
								
								////+++( цена из сезонного заказа >> по правилам
								//НоваяСтрока.Цена                  = ТекСтрокаТовары.Цена;
								Если флПересчетаЦен Тогда
									стрЦен = табЦен.найти(ТекСтрокаТовары.Номенклатура, "Номенклатура");
									Если стрЦен=неопределено Тогда
										НоваяСтрока.Цена = 5555; //ТекСтрокаТовары.Цена; // из сезонного заказа
										#Если Клиент Тогда
											сообщить(строка(НоваяСтрока.НомерСтроки)+"строка: Цены на товар "+ТекСтрокаТовары.Номенклатура.Код+" - нет. Установлена цена = 5 555р.");
										#КонецЕсли
									Иначе	
										НоваяСтрока.Цена = стрЦен.МинимальнаяЦена;  // по политике или правилам ценообразования
									КонецЕсли;	
								Иначе
									НоваяСтрока.Цена = ТекСтрокаТовары.Цена; // из сезонного заказа
								КонецЕсли;
								//+++)
								
								//НоваяСтрока.ПлановаяСебестоимость      = окр(ТекСтрокаТовары.ПлановаяСебестоимость * Коефф, 2);
								//НоваяСтрока.ПроцентСкидкиНаценки       = ТекСтрокаТовары.ПроцентСкидкиНаценки;
								//НоваяСтрока.СтавкаНДС                  = Перечисления.СтавкиНДС.НДС18;
								НоваяСтрока.Сумма                      = НоваяСтрока.Цена*КоличествоОсталосьЗаказать;  // может отличаться от цена * количество
								//НоваяСтрока.СуммаНДС                   = Окр(НоваяСтрока.Сумма*18/118, 2); //до копеек
								если ЭтотОбъект.УчитыватьНДС  тогда
									Если ЭтотОбъект.СуммаВключаетНДС тогда
										если НоваяСтрока.СтавкаНДС = перечисления.СтавкиНДС.НДС18
											или НоваяСтрока.СтавкаНДС = перечисления.СтавкиНДС.НДС18_118 тогда
											НоваяСтрока.СуммаНДС   = Окр(НоваяСтрока.Сумма*18/118, 2); //до копеек
										КонецЕсли;
									Иначе// НДС сверху
										если НоваяСтрока.СтавкаНДС = перечисления.СтавкиНДС.НДС18
											или НоваяСтрока.СтавкаНДС = перечисления.СтавкиНДС.НДС18_118 тогда
											НоваяСтрока.СуммаНДС   = Окр(НоваяСтрока.Сумма*18/100, 2); //до копеек
										КонецЕсли;
									КонецЕсли;	
								иначе
									НоваяСтрока.СуммаНДС = 0;
								КонецЕсли;	
								
							КонецЕсли;	
							осталосьЗаказать = ОсталосьЗаказать - КоличествоОсталосьЗаказать;
						КонецЦикла;
					КонецЦикла;
					
					СуммаДокумента     			=  Товары.Итог("Сумма") + ?(УчитыватьНДС, ?(СуммаВключаетНДС, Товары.Итог("СуммаНДС"),0), 0);
					ИтогПлановаяСебестоимость   =  Товары.Итог("ПлановаяСебестоимость");
					
				Иначе
					//---------защита от дублей-------------------
					табНом = ТекТабТовары.Скопировать();
					табНом.Свернуть("Номенклатура");
					списНом = новый СписокЗначений;
					списНом.ЗагрузитьЗначения( табНом.ВыгрузитьКолонку("Номенклатура") );
					
					//----------------------определение цен-------------------
					флПересчетаЦен = ложь; //+++ 23.01.2014
					
					//21.03.2017 - только если этот договор - экспортный в рублях и без *
					флБезНДС = (Контрагент.Экспорт И ДоговорКонтрагента.ВалютаВзаиморасчетов.Код="643" 
					И найти(врег(ДоговорКонтрагента.Наименование),"ЭКСПОРТ")>0
					и найти(ДоговорКонтрагента.Наименование,"*")=0 );
					
					Если флПересчетаЦен Тогда
						табЦен = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента(Контрагент, списНом);
						Если ТипЗнч(табЦен)=тип("Строка") Тогда
							табЦен = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(Контрагент, списНом, ,,, ,, флБезНДС); //21.03.2017 - надо 7 запятых!
						КонецЕсли;
						
						#Если Клиент Тогда
							Сообщить(" Цены в Заказе будут заполнены по ценам Контрагента: "+строка(Основание.Контрагент)+?(флБезНДС," Без НДС!","") );
						#КонецЕсли
					Иначе
						#Если Клиент Тогда
							Сообщить(" Цены в Заказе будут заполнены из документа: "+строка(Основание));
							Сообщить(" Для пересчета по текущим ценам и правилам Контрагента - нажмите кнопку [Цены Контрагента]");
						#КонецЕсли
					КонецЕсли;
					
					//+++ (02.04.2014 
					табТоварыВПутиИПроизводстве = новый ТаблицаЗначений;
					
					Если списНом.Количество()>0 Тогда
						
						
						//------------по списку товаров из сезонного заказа покупателя -------------------
						//-----------находим остатки товаров в производстве по всем действующие на текДата сезонные заказам поставщиков,
						//----------- где Грузополучатель = Клиент ---------------------------------------
						//
						//----------- а также ВСЕ товары в пути (по заказам поставщиков!)-----------------
						//----------- где Грузополучатель = Клиент ---------------------------------------
						//
						запрос1 = новый запрос;
						запрос1.Текст = "ВЫБРАТЬ
						|	табНом.Номенклатура
						|ПОМЕСТИТЬ ВТ_табНом
						|ИЗ
						|	&табНом КАК табНом
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ
						|	ЗаказыПокупателейСезонныйТовары.Номенклатура,
						|	ЕСТЬNULL(ОстаткиТоваровВПроизводстве.КоличествоОстаток, 0) КАК ВПроизводстве,
						|	ЕСТЬNULL(ОстаткиТоваровВПути.КоличествоОстаток, 0) КАК ВПути
						|ИЗ
						|	ВТ_табНом КАК ЗаказыПокупателейСезонныйТовары
						|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикамСезонные.Остатки(,
						|				Номенклатура В (&СписНом)
						|					И ЗаказПоставщикуСезонный.Грузополучатель = &Контрагент
						|                   И ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ
						|					И ЗаказПоставщикуСезонный.ДатаДействияПо >= &ТекДата) КАК ОстаткиТоваровВПроизводстве
						|		ПО ЗаказыПокупателейСезонныйТовары.Номенклатура = ОстаткиТоваровВПроизводстве.Номенклатура
						|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки(
						|				,
						|				Номенклатура В (&СписНом) И ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ
						|					И ЗаказПоставщику.Грузополучатель = &Контрагент) КАК ОстаткиТоваровВПути
						|		ПО ЗаказыПокупателейСезонныйТовары.Номенклатура = ОстаткиТоваровВПути.Номенклатура
						|ГДЕ
						|	(ЕСТЬNULL(ОстаткиТоваровВПроизводстве.КоличествоОстаток, 0) > 0
						|			ИЛИ ЕСТЬNULL(ОстаткиТоваровВПути.КоличествоОстаток, 0) > 0)";
						запрос1.УстановитьПараметр("табНом",табНом);
						запрос1.УстановитьПараметр("СписНом",СписНом);
						запрос1.УстановитьПараметр("Контрагент",Контрагент);
						запрос1.УстановитьПараметр("Транзит",Транзит);
						запрос1.УстановитьПараметр("Подразделение",Подразделение); 
						запрос1.УстановитьПараметр("ТекДата",НачалоДня(ТекущаяДата()) );
						
						табТоварыВПутиИПроизводстве = запрос1.Выполнить().Выгрузить();
						
					КонецЕсли;
					//+++)
					
					
					i=0; N = ТекТабТовары.Количество();
					Пока  i<N Цикл 
						ТекСтрокаТовары = ТекТабТовары[i];
						i=i+1;
						
						ОстатокНаСкладах = ?(СтруктураВыбора.ВидОстатков =0,ТекСтрокаТовары.ОстатокНаСкладах, 
						?(СтруктураВыбора.ВидОстатков =1, ТекСтрокаТовары.СвободныйОстаток, 
						ТекСтрокаТовары.КоличествоПрихода ) );  //+++ 14.07.2014
						
						//+++ 02.04.2014
						КолПр = 0;
						Если табТоварыВПутиИПроизводстве.Количество()>0 Тогда
							стрПр = табТоварыВПутиИПроизводстве.Найти( ТекСтрокаТовары.Номенклатура, "Номенклатура");
							Если стрПр <> неопределено Тогда
								КолПр = ?(стрПр.ВПроизводстве<=0,0,стрПр.ВПроизводстве) + ?(стрПр.ВПути<=0,0,стрПр.ВПути);
								
								КоличествоОсталосьЗаказать = Макс( Мин(ТекСтрокаТовары.ОсталосьЗаказать-КолПр,ОстатокНаСкладах), 0); // всегда с уменьшением!
								
								#Если Клиент Тогда         
									//+++ 08.04.2014 вопрос при расхождениях!
									КоличествоОсталосьЗаказать0 = Макс( Мин(ТекСтрокаТовары.ОсталосьЗаказать,ОстатокНаСкладах), 0);
									КоличествоОсталосьЗаказать1 = Макс( Мин(ТекСтрокаТовары.ОсталосьЗаказать-КолПр,ОстатокНаСкладах), 0);
									Если КоличествоОсталосьЗаказать0>КоличествоОсталосьЗаказать1 Тогда
										Режим = РежимДиалогаВопрос.ДаНет;
										Ответ = Вопрос("Для товара: "+строка(ТекСтрокаТовары.номенклатура.Код)+") Осталось заказать "+строка(ТекСтрокаТовары.ОсталосьЗаказать)+" шт.,
										|Однако, в производстве и в пути этому клиенту уже есть "+строка(КолПр)+" шт.
										|А остаток на складах составляет "+строка(ОстатокНаСкладах)+" шт.
										|
										|Заказать уменьшенное количество "+строка(КоличествоОсталосьЗаказать1)+"шт.?", Режим, 0);
										Если Ответ = КодВозвратаДиалога.Да Тогда
											КоличествоОсталосьЗаказать = КоличествоОсталосьЗаказать1;
										Иначе
											КоличествоОсталосьЗаказать = КоличествоОсталосьЗаказать0;
										КонецЕсли;
									КонецЕсли;	
									
									Если ОстатокНаСкладах>0 Тогда
										Сообщить("Для товара: "+строка(ТекСтрокаТовары.номенклатура.Код)+") Осталось заказать по сезонному заказу: "+строка(ТекСтрокаТовары.ОсталосьЗаказать)
										+", прямая доставка от поставщика: "+строка(КолПр)+", а на складах: "+строка(ОстатокНаСкладах)
										+?(КоличествоОсталосьЗаказать>0, " Будет заказано: "+строка(КоличествоОсталосьЗаказать),
										" Товар не будет заказан!") , СтатусСообщения.Информация );
									КонецЕсли;
								#КонецЕсли	
							КонецЕсли;	
						КонецЕсли;	
						//+++)
						
						КоличествоОсталосьЗаказать = Макс( Мин(ТекСтрокаТовары.ОсталосьЗаказать-КолПр,ОстатокНаСкладах), 0);
						
						Если КоличествоОсталосьЗаказать>0 Тогда
							
							НоваяСтрока = Товары.Добавить();
							НоваяСтрока.Номенклатура               = ТекСтрокаТовары.Номенклатура;
							НоваяСтрока.Количество                 = КоличествоОсталосьЗаказать;
							НоваяСтрока.КоличествоМест             = КоличествоОсталосьЗаказать;
							НоваяСтрока.Коэффициент                = 1;
							НоваяСтрока.ЕдиницаИзмерения           = ТекСтрокаТовары.Номенклатура.ЕдиницаХраненияОстатков;
							НоваяСтрока.ЕдиницаИзмеренияМест       = ТекСтрокаТовары.Номенклатура.ЕдиницаХраненияОстатков;
							
							////+++( цена из сезонного заказа >> по правилам
							//НоваяСтрока.Цена                  = ТекСтрокаТовары.Цена;
							Если флПересчетаЦен Тогда
								стрЦен = табЦен.найти(ТекСтрокаТовары.Номенклатура, "Номенклатура");
								Если стрЦен=неопределено Тогда
									НоваяСтрока.Цена = 5555; //ТекСтрокаТовары.Цена; // из сезонного заказа
									#Если Клиент Тогда
										сообщить(строка(НоваяСтрока.НомерСтроки)+"строка: Цены на товар "+ТекСтрокаТовары.Номенклатура.Код+" - нет. Установлена цена = 5 555р.");
									#КонецЕсли
								Иначе	
									НоваяСтрока.Цена = стрЦен.МинимальнаяЦена;  // по политике или правилам ценообразования
								КонецЕсли;	
							Иначе
								
								НоваяСтрока.Цена = ТекСтрокаТовары.Цена; // из сезонного заказа
							КонецЕсли;
							//+++)
							
							//НоваяСтрока.ПлановаяСебестоимость      = окр(ТекСтрокаТовары.ПлановаяСебестоимость * Коефф, 2);
							//НоваяСтрока.ПроцентСкидкиНаценки       = ТекСтрокаТовары.ПроцентСкидкиНаценки;
							//НоваяСтрока.СтавкаНДС                  = Перечисления.СтавкиНДС.НДС18;
							НоваяСтрока.Сумма                      = НоваяСтрока.Цена*КоличествоОсталосьЗаказать;  // может отличаться от цена * количество
							
							//НоваяСтрока.СуммаНДС                   = Окр(НоваяСтрока.Сумма*18/118, 2); //до копеек
							если ЭтотОбъект.УчитыватьНДС  тогда
								Если ЭтотОбъект.СуммаВключаетНДС тогда
									если НоваяСтрока.СтавкаНДС = перечисления.СтавкиНДС.НДС18
										или НоваяСтрока.СтавкаНДС = перечисления.СтавкиНДС.НДС18_118 тогда
										НоваяСтрока.СуммаНДС   = Окр(НоваяСтрока.Сумма*18/118, 2); //до копеек
									КонецЕсли;
								Иначе// НДС сверху
									если НоваяСтрока.СтавкаНДС = перечисления.СтавкиНДС.НДС18
										или НоваяСтрока.СтавкаНДС = перечисления.СтавкиНДС.НДС18_118 тогда
										НоваяСтрока.СуммаНДС   = Окр(НоваяСтрока.Сумма*18/100, 2); //до копеек
									КонецЕсли;
								КонецЕсли;	
							иначе
								НоваяСтрока.СуммаНДС = 0;
							КонецЕсли;	
							
						КонецЕсли;	
					КонецЦикла;
					
					СуммаДокумента     			=  Товары.Итог("Сумма") + ?(УчитыватьНДС, ?(СуммаВключаетНДС, Товары.Итог("СуммаНДС"),0), 0);
					ИтогПлановаяСебестоимость   =  Товары.Итог("ПлановаяСебестоимость");
					
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЕсли;
	КонецЕсли;
	
	//выключено 28.06.2016 - подразделение любое!
	//+++ при создании заказа из филиала Для отгрузки из Ярославля - подразделение остаётся филиальное!
	//Если не Транзит и ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") Тогда
	//	Подразделение = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновноеПодразделение");
	//	Склад         = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойСклад");
	//	Если НЕ ЗначениеЗаполнено(Склад) Тогда  //+++ 01.08.2014
	//		Склад = справочники.Склады.НайтиПоНаименованию("1");
	//	КонецЕсли;
	//	
	//	Если Товары.Количество()>0 Тогда
	//		ЭтотОбъект.Записать(); //чтобы не был Новым при открытии формы
	//	КонецЕсли;	
	//КонецЕсли;	
	
	//01.12.2016
	Статус = перечисления.СтатусыЗаказов.ПустаяСсылка();
	Поставщик = справочники.Контрагенты.ПустаяСсылка();
	
КонецПроцедуры // ОбработкаЗаполнения()


// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЭтоНовый() и ВалютаДокумента <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		ТекущийКурс = РегистрыСведений.КурсыВалютДляПоступления.СрезПоследних(Дата,Новый структура("Валюта",ВалютаДокумента));
		Если  ТекущийКурс.Количество()>0 Тогда
			КурсВзаиморасчетов  = ТекущийКурс[0].Курс-3;
			кратностьВзаиморасчетов = ТекущийКурс[0].Кратность;	
		конецЕсли;
	конецЕсли;
	
	Если Отказ Тогда   
		возврат;
	КонецЕсли;
	
	//+++ 15.05.2017 - особенности расчета св.остатка нельзя делать по-другому!
	//Транзит = Подразделение.ОбособленноеПодразделение;
	Если Транзит=ЛОЖЬ и Подразделение.ОбособленноеПодразделение тогда
		Склад = Подразделение.Склад;
		Транзит = истина;
		#Если Клиент тогда
			Сообщить("Для заказа с филиала - Автоматически включен [v]Транзит и выбран осн.склад филиала!", СтатусСообщения.Информация);
		#КонецЕсли
	ИначеЕсли Транзит и Подразделение.ОбособленноеПодразделение=ЛОЖЬ тогда
		Склад = Подразделение.Склад;
		Транзит = ложь;
		#Если Клиент тогда
			Сообщить("Заказ с "+строка(Подразделение)+" - не может быть транзитным! Автоматически выключен флаг []Транзит и выбран осн.склад Ярославля!", СтатусСообщения.Информация);
		#КонецЕсли
	КонецЕсли;	
	
	//+++ 08.02.2018 - чтобы "не слетал" номер в новом году
	Если не ЭтоНовый() и Год(ссылка.Дата)< Год(ЭтотОбъект.Дата) тогда
		Номер = "";
		Комментарий = "Изменен номер и дата: "+ссылка.Номер+" от "+строка(ссылка.Дата)+" # "+Комментарий;
	КонецЕсли;
	
	//+++ 09.01.2014 - Для роботов!	
	Если сокрЛП(Номер)="" Тогда
		СтрокаПрефикс = "ТК";
		Если Подразделение.ПрефиксИБ<>"" Тогда
			СтрокаПрефикс = подразделение.ПрефиксИБ;
		КонецЕсли;	
		ЭтотОбъект.УстановитьНовыйНомер(СтрокаПрефикс);	
	КонецЕсли;	
	
	
	////  делаем проверку всегда! исключение Заказы из Store, FTP, web-сервисы, регл.задания (автокомплектация)
	//+++ 15.06.2016 - включена блокировка ВСЕГДА И ДЛЯ ВСЕХ! 
	//#Если Клиент Тогда
	ПроверитьПовторяющиесяТовары(Отказ);
	//#КонецЕсли
	
	// + Сакулина. 23.11.2016.
	ПодразделениеЯр = Справочники.Подразделения.НайтиПоКоду("00005"); 
	
	Если Подразделение = ПодразделениеЯр 
		и Контрагент = ПодразделениеЯр.Контрагент Тогда
		Отказ = Истина;
		#Если Клиент Тогда
			Сообщить("Нельзя записывать заказ на контрагента " + строка(Контрагент) + " и с подразделением " + строка(Подразделение) );
		#КонецЕсли
	КонецЕсли;
	
	//+++( 01.12.2016 так правильнее...через справочник Подразделения
	списокПодразделений = яштПоставщики.ПолучитьМассивФилиалов();
	СписокФилиалов = Новый СписокЗначений;
	// начинать с 1!  0 - это Ярославль!
	для i=1 по списокПодразделений.Количество()-1 цикл 
		СписокФилиалов.Добавить( списокПодразделений[i].Контрагент );
	КонецЦикла;
	//+++)
	
	// с ярославля на филиал >>>
	Если ВводитьТолькоПеремещение = Ложь 
		и Подразделение = ПодразделениеЯр 
		и СписокФилиалов.НайтиПоЗначению(Контрагент)<> Неопределено Тогда
		ВводитьТолькоПеремещение = Истина;
	КонецЕсли;	
	
	//Если Контрагент = Филиал и подразделение = Головное подразделение, и есть запрещенные типоразмеры и не согласовано Доколиным Тогда устанавливаем тип 13
	Если ВводитьТолькоПеремещение = Истина 
		и Подразделение = ПодразделениеЯр  
		и СписокФилиалов.НайтиПоЗначению(Контрагент)<> Неопределено 
		и ТипЗаказа <> 13 
		и Заказы.Количество()=0
		и Проверен
		Тогда
		Если не Согласован или ЭтоНовый() тогда
			ПроверкаНаУстновку13Статуса();
		КонецЕсли;
	КонецЕсли;
	// - Сакулина.23.11.2016
	
	
	//    ЗамерыВремени 13.04.2016
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение 
		и НЕ мПроведениеИзФормы Тогда	
		ДатаНачалаКлючевойОперации = ТекущаяДата();
		ДатаНачалаЗаписи = ОценкаПроизводительностиКлиентСервер.ЗначениеТаймера();
	КонецЕсли;
	
	//+++ 11.11.2015 - НЕЛЬЗЯ удалять Заказ Если по нему были отгрузки!!!
	// проверяем ТОЛЬКО на клиенте!
	#Если Клиент Тогда
		Если не ЭтоНовый() и ЭтотОбъект.ПометкаУдаления Тогда
			Если яштПоЗаказуБылиОтгрузки(Ссылка) Тогда
				Сообщить("Нельзя удалять документ, по которому уже были отгрузки!!!", СтатусСообщения.Внимание);
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;	
		
		//+++(19.01.2016 - резервный заказ НЕЛЬЗЯ удалять после проведения! 
		//                  Закрытие закрывает правильно только остатки!
		Если ссылка.Проведен и РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
			//и ссылка.Контрагент = ссылка.Контрагент.КонтрагентДляРезерваИМ Тогда //123заменить
			и ссылка.Контрагент = ссылка.ДоговорКонтрагента.КонтрагентДляРезерваИМ Тогда
			//22.01.2016 - разрешение по роли
			Если РольДоступна("ПравоЗавершенияРаботыПользователей") Тогда // IT-отдел может 
				Сообщить("Не рекомендуется распроводить документ Резерва Для ИМ по клиенту "+строка(Контрагент)+".");
			Иначе	
				Сообщить("Нельзя распроводить документ Резерва Для ИМ по клиенту "+строка(Контрагент)+"!", СтатусСообщения.Внимание);
				Отказ = Истина;
			КонецЕсли;	
			
		КонецЕсли;	
		//+++)
	#КонецЕсли
	
	// Если договор с комиссионером, то надо почистить закладку "Услуги".
	Если Услуги.Количество() > 0  И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		Услуги.Очистить();
	КонецЕсли;
	
	// Проверка заполнения единицы измерения мест и количества мест
	ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки Для показа в журналах
	СуммаДокумента = ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	
	
	Если мПроведениеИзФормы И КонецДня(Дата) = КонецДня(ТекущаяДата()) И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		РежимПроведения = РежимПроведенияДокумента.Оперативный;
	КонецЕсли;
	ЭтотОбъект.ВремяНапоминания = ТекущаяДата(); // чтоб сразу видеть дату последнего изменения!!!
	
	//+++ 18.04.2013  заказ уже в отгрузке - нельзя отменить проведение, Если это не загрузка!
	Если НЕ ЭтоНовый() и не Отказ и не ЭтотОбъект.ОбменДанными.Загрузка Тогда
		Если режимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И яштРезервыПоТоварам.ЕстьРезервПоЗаказу(ссылка) Тогда
			#Если Клиент Тогда
				СообщитьОбОшибке("По заказу: "+строка(ссылка)+" - уже ведется отгрузка!
				|Отмена проведения или удаление заказа - невозможна!");
			#КонецЕсли	
			Отказ = истина;
		КонецЕсли;
		
		//+++ 30.06.2014  только Если вкл.константа и идет отмена...
		//                проверяем статус - не пустой и не новый... 
		//				  начинаем проверять регистр размещения: 
		Если константы.ИспользоватьОстаткиСтороннихПоставщиков.Получить() 
			и НЕ Поставщик.пустая() // 13.08.2015 только Если есть поставщик!
			и режимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			//+++ 21.10.2014 - проверка по статусу... 
			//Если НЕ (ЭтотОбъект.статус.Пустая() или ЭтотОбъект.статус=перечисления.СтатусыЗаказов.Новый
			Если (ЭтотОбъект.статус=перечисления.СтатусыЗаказов.ВОбработке 
				или ЭтотОбъект.статус=перечисления.СтатусыЗаказов.Подтвержден
				или ЭтотОбъект.статус=перечисления.СтатусыЗаказов.ЧастичноПодтвержен) Тогда // только в обработке или подтвержден поставщиком - нельзя удалять...
				//Если яштПоставщики.ЕстьРезервПоЗаказуПоставщика(ссылка) Тогда //резервы выключены...
				// резерв снимается только при поступлении товара
				Если ЭтотОбъект.ПометкаУдаления Тогда
					Отказ = истина; // !!!  нельзя удалять !!!
					#Если Клиент Тогда
						Сообщить("По заказу: "+строка(ссылка)+" - уже есть Заказ поставщику "+строка(ЭтотОбъект.Поставщик)+"
						|Удаление заказа - осуществляется через менеджера по закупкам!");
					#КонецЕсли	
				Иначе
					Отказ = истина;
					#Если Клиент Тогда
						Сообщить("По заказу: "+строка(ссылка)+" - уже есть Заказ поставщику!
						|Отмена проведения заказа - невозможна!");
					#КонецЕсли	
				КонецЕсли;
				//КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//+++)
		
	КонецЕсли;
	
	
	//*** 04.02.2014
	Если ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Если НЕ Контрагент = ДоговорКонтрагента.Владелец Тогда
			#Если Клиент Тогда
				СообщитьОбОшибке("НЕВЕРНЫЙ Договор! Договор оформлен не на того Покупателя: "+строка(ДоговорКонтрагента.Владелец)+". Выберите правильный договор.");
			#КонецЕсли
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Плотников, Для рекламных заказов
	Если ТипЗаказа = 12 Тогда
		Для каждого стр из Товары Цикл
			Если стр.Номенклатура.ВидТовара <> Перечисления.ВидыТоваров.РекламнаяПродукция Тогда
				Отказ = Истина;
				#Если Клиент Тогда
					СообщитьОбОшибке("НЕЛЬЗЯ добавлять в РЕКЛАМНЫЙ заказ обычный товар, ТОЛЬКО РЕКЛАМНАЯ ПРОДУКЦИЯ!!!");
				#КонецЕсли
			КонецЕсли;
		КонецЦикла;	
	ИначеЕсли ВводитьТолькоПеремещение = Ложь Тогда
		Для каждого стр из Товары Цикл
			Если стр.Номенклатура.ВидТовара = Перечисления.ВидыТоваров.РекламнаяПродукция Тогда
				Отказ = Истина;
				#Если Клиент Тогда
					СообщитьОбОшибке("НЕЛЬЗЯ добавлять в ОБЫЧНЫЙ заказ РЕКЛАМНУЮ продукцию!!!");
				#КонецЕсли
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
	//+++( 30.06.2014  - изменяем сумму документа без учета отмененных товаров!
	Если константы.ИспользоватьОстаткиСтороннихПоставщиков.Получить()
		и НЕ Поставщик.пустая() Тогда // 13.08.2015 только Если есть поставщик!
		естьОтмененныеСтроки = ЛОЖЬ;
		Для каждого Стр1 из Товары Цикл
			Если Стр1.Статус = перечисления.СтатусыСтрокЗаказа.Отменен Тогда
				естьОтмененныеСтроки =  истина;
				Стр1.Сумма    = 0;
				Стр1.СуммаНДС = 0;
			КонецЕсли;	
		КонецЦикла;	 
		Если естьОтмененныеСтроки Тогда //07.07.2014
			СуммаДокумента = ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
		КонецЕсли;
	КонецЕсли;	
	//+++ )
	
	// --------------- 19.12.2016 -----------------------------------------------------
	Если константы.ИспользоватьДележкуЗаказовВМинус.Получить() тогда
		Если ЭтотОбъект.Статус=перечисления.СтатусыЗаказов.Подтвержден 
			или ЭтотОбъект.Статус=перечисления.СтатусыЗаказов.Получен 
			или ЭтотОбъект.Статус=перечисления.СтатусыЗаказов.Доставлен //+++ 02.11.2017 когда уже доставлен... 
			или ЭтотОбъект.Статус=перечисления.СтатусыЗаказов.ПолученЧастично тогда 
			
			Если ЭтотОбъект.Проверен=Ложь И ЭтотОбъект.Подразделение.ОбособленноеПодразделение=Ложь тогда //31.03.2017 - только по Ярославлю!
				ЭтотОбъект.Проверен = истина; //проделиваем принудительно
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(ЭтотОбъект.Статус) и ЗначениеЗаполнено(ЭтотОбъект.Поставщик) тогда  // есть статус и поставщик
			
			Если ЭтотОбъект.Проверен тогда
				ЭтотОбъект.Проверен = ЛОЖЬ; // НЕЛЬЗЯ проделить заказ пока он не подтвержден поставщиком
				ЭтотОбъект.Записать(); //17.07.2017 перезапись!
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;
	
	//+++ 29.01.2015 - Если нет дата отгрузки - то ставится резерв (всегда!), Иначе - это НЕ резерв!
	Если ДатаОтгрузки='00010101' Тогда
		Резерв = Истина;
	Иначе
		Резерв = Ложь;
	КонецЕсли;	
	
	//!!! проверки
	
	//14.03.2016 - курс устанавливается по константе (которую меняет Егор)
	Если ЭтоНовый() и ВалютаДокумента.Код <> "643" Тогда   
		ЭтотОбъект.КурсВзаиморасчетов = Константы.КурсUSD.Получить();
	КонецЕсли;
	
	
	//===========Согласование ТОЛЬКО Если предыдущие проверки не дают Отказ=================================	
	флЭкспорт = (Контрагент.Экспорт и ВалютаДокумента.Код<>"643");
	Если НЕ (  (ЭтоНовый()                  // --- новые заказы НЕ проверяются и НЕ Согласуются! --- 
		и не мПроведениеИзФормы) //24.12.2015 ТОЛЬКО Если это не из формы, из формы - новый НАДО согласовывать!
		или ПометкаУдаления 
		или ВводитьТолькоПеремещение  //12.10.2015 - заказы на перемещение - НЕ согласуются! при 
		или НЕ Проверен            //24.12.2015  не проделенные... не надо согласовывать
		или Отказ
		или ОбменДанными.Загрузка = Истина
		или флЭкспорт  // экспортные не согласовываются! у них своя цена!
		
		//+++ 01.03.2016 - не надо контролировать цены Если тип=7
		или (ЭтотОбъект.ТипЗаказа=7 и ЭтотОбъект.Подразделение<>Ссылка.Подразделение) // 293 обработкой - меняется подразделение, цены НЕ меняются!
		
		или Контрагент.НеКонтроллироватьЦеныПродажи ) Тогда //+++ VIP клиенты.... любая (ручная) цена
		
		констСогл = Константы.СогласованиеПоСкидкамКлиентов.Получить();
		
		Если ЭтоНовый() Тогда 
			флБылиОтгрузки = ложь // 24.12.2015 у нового - нет отгрузок! и нет ссылки
		Иначе	
			флБылиОтгрузки = яштПоЗаказуБылиОтгрузки(Ссылка);
		КонецЕсли;	 
		// --- согласовывать НАДО ТОЛЬКО ЕСЛИ :
		Если констСогл          							//  вкл. константа
			и НЕ флБылиОтгрузки                             // и не было отгрузок/перемещений!
			и НЕ Контрагент.НеКонтроллироватьЦеныПродажи    // Если не контролировать цены... значит не контролируем 
			Тогда			  
			
			Если ЭтоНовый() Тогда
				флИзмененыЦены = Истина;
			Иначе
				флИзмененыЦены = ЛОЖЬ; //---- 08.04.2016 - контроль изменения Цен
				Для каждого стрОб из ЭтотОбъект.Товары Цикл
					стрСсылка = Ссылка.Товары.Найти(строб.Номенклатура, "Номенклатура");
					Если стрСсылка = неопределено Тогда // новая строка!
						флИзмененыЦены = Истина;
					ИначеЕсли стрОб.Цена <> стрСсылка.Цена  Тогда 
						флИзмененыЦены = Истина;
					КонецЕсли;
					Если флИзмененыЦены Тогда Прервать;КонецЕсли;
				КонецЦикла;	
			КонецЕсли;
			
			//Если флИзмененыЦены Тогда
			//проверка и изменение цен на мин.допустимые!
			ЗаполнитьТаблСогласования();
			
			// при повторном перепроведении - проверять и создавать задачи НЕ НАДО!
			Если таблСогл.Количество()>0 Тогда   
				ЭтотОбъект.Согласован = истина;    //флаг Согласован сразу после создания задач!
			КонецЕсли;	
			//КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;//не новый
	//}	
	//Адиянов<<<
	
	ЗадачаСоздана = Ложь;
	Если не Отказ 
		//+++ 20.07.2016 чтобы не проверялось ничего... Для "нормальных" клиентов
		//и НЕ ЭтотОбъект.Контрагент.КонтрагентДляРезерваИМ.Пустая() Тогда //123заменить
		и НЕ ЭтотОбъект.ДоговорКонтрагента.КонтрагентДляРезерваИМ.Пустая() Тогда
		СогласованиеРезерваДляИМ(ЗадачаСоздана);
		Если ЗадачаСоздана Тогда 
			//	РежимЗаписи = РежимЗаписиДокумента.Запись;
			Проверен = ложь; //08.07.2016 - даём проводить, но не даём проделивать!
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Стр Из Товары Цикл 
		Если Не ЗначениеЗаполнено(Стр.КодТНВЭД) Тогда 
			Стр.КодТНВЭД = Стр.Номенклатура.КодТНВЭД;
		КонецЕсли;
	КонецЦикла;
	
	//Адиянов>>>
	
	
	
	
	//+++ 08.09.2016 - Ответственный = Менеджер из Договора! по задаче от Лапенкова №16925
	Если ЭтоНовый() Тогда
		Если этотОбъект.ДоговорКонтрагента.ОтветственноеЛицо <> этотОбъект.Ответственный Тогда
			этотОбъект.Ответственный = этотОбъект.ДоговорКонтрагента.ОтветственноеЛицо;
		КонецЕсли;	
	КонецЕсли;	
	
	// Плотников 22.02.2017, если есть аксессуары и если константа включена подарки, тогда проверяем ====
	//Если ЭтоНовый() Тогда
	//Если ЗначениеНеЗаполнено(Контрагент.КонтрагентДляРезерваИМ) и РежимПроведения = РежимПроведенияДокумента.Оперативный и Контрагент <> Справочники.Контрагенты.НайтиПоКоду("36092") Тогда //123заменить
	Если ЗначениеНеЗаполнено(ДоговорКонтрагента.КонтрагентДляРезерваИМ) и РежимПроведения = РежимПроведенияДокумента.Оперативный и Контрагент <> Справочники.Контрагенты.НайтиПоКоду("36092") Тогда
		Если ПроверитьНаличиеАксессуаров() и Константы.ИспользоватьПодаркиЗаНаборы.Получить() Тогда
			//Бонусы.Очистить();
			
			Для Индекс = -Бонусы.Количество() По -1 Цикл          //чистим от бонусов
				уд = Бонусы.Получить(-Индекс-1);
				Если уд.Бонус Тогда
					Бонусы.Удалить(-Индекс-1);
				КонецЕсли;
			КонецЦикла;
			ЗаполнитьТабЧастьБонусы();
		КонецЕсли;
	КонецЕсли;
	//02.05.17 Смирнов, ошибка вылезала
	Если Бонусы.Количество()>0 тогда
		Бонусы.Свернуть("Номенклатура,СтатьяЗатрат,Бонус,Статус,Комметарий","Количество");
	КонецЕсли;
	
	//КонецЕсли;
	// ==================================================================================================
	
	Если НЕ Отказ Тогда
		УстановитьОтветственного();
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ПроверитьКодТНВЭД();
		КонецЕсли;
	КонецЕсли;
	
	Если Контрагент = Справочники.Контрагенты.НайтиПоКоду("94727") Тогда
		Резерв3 = истина;
	КонецЕсли;
	
	Если не ПечататьСтраховоеЗаявление  тогда
		Если Найти(ДоговорКонтрагента.Наименование,"*")=0 Тогда
		ПечататьСтраховоеЗаявление = Истина;
		конецесли;
	конецЕсли;	

	//12.02.2018 Лукьяненков, Синхронизация галочек в карточке клиента и заказах
	Если ЭтоНовый() Тогда
		ПечататьСчетИзРеализации = Контрагент.ПечатьСчетаИзРеализации;	
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью



//=============================Процедуры согласования=================================
//12.08.2015 ПередЗаписью   - находит руководителя, мин.цены, меняем тек.цены на минимальные и пересчитывает суммы
процедура ЗаполнитьТаблСогласования()
	
	таблСогл.Очистить();
	
	Если ТипЗаказа = 12 Тогда
		
		СогласовыватьРекламу = Ложь;
		
		Для каждого стр из Товары Цикл
			НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(стр.Номенклатура);
			НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Согласовывать"));
			НаборЗаписей.Прочитать();
			Для Каждого стр1 из НаборЗаписей Цикл
				Если стр1.Значение и стр.Статус = Перечисления.СтатусыСтрокЗаказа.ПустаяСсылка() Тогда
					стр.Статус = Перечисления.СтатусыСтрокЗаказа.НаСогласовании;
					СогласовыватьРекламу = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		
		Возврат;
	КонецЕсли;
	
	
	//---------- проверка изменения цен ТОЛЬКО из формы  --------------------------
	Для каждого стрОб из ЭтотОбъект.Товары Цикл
		стрСсылка = Ссылка.Товары.Найти(строб.Номенклатура, "Номенклатура");
		
		Если стрСсылка = неопределено Тогда // новая строка!
			ЭтотОбъект.Согласован = ложь;
		ИначеЕсли мПроведениеИзФормы Тогда
			Если стрОб.Цена < стрСсылка.Цена //уменьшили цену Для уже согласованного строки из Формы - на повторное Согласование!
				и ЭтотОбъект.Согласован
				//29.09.2015 - Для всех строк, с любым статусом!
				//и стрОб.Статус <> перечисления.СтатусыСтрокЗаказа.ПустаяСсылка() // какой то статус уже есть...
				Тогда //Для любого непустого статуса
				ЭтотОбъект.Согласован = ложь;
				стрОб.Статус = перечисления.СтатусыСтрокЗаказа.ПустаяСсылка(); //НОВОЕ согласование!
				
				//ПРИ Увеличении цены > мин.разрешенной Для согласования из Формы - меняем Согласование?!
			ИначеЕсли стрОб.Цена > стрСсылка.Цена 
				и стрОб.Статус = перечисления.СтатусыСтрокЗаказа.НаСогласовании
				Тогда 
				ЭтотОбъект.Согласован = ложь;
				стрОб.Статус =перечисления.СтатусыСтрокЗаказа.ПустаяСсылка(); //меняем согласование!
				#Если Клиент Тогда
					сообщить(строка(стрОб.НомерСтроки)+") цена товара: "+строка(стрСсылка.Цена)
					+"р. уже отправлена на согласование... Новая цена: "+строка(стрОб.Цена)+" требует Повторного согласования!", СтатусСообщения.Внимание);
				#КонецЕсли	
			ИначеЕсли стрОб.Статус = перечисления.СтатусыСтрокЗаказа.Подтвержден  // при измении строки - утверждать надо заново!
				и стрОб.Цена < стрСсылка.Цена
				Тогда
				ЭтотОбъект.Согласован = ложь; //только Для согласования
				стрОб.Статус = перечисления.СтатусыСтрокЗаказа.НаСогласовании;
				#Если Клиент Тогда
					сообщить(строка(стрОб.НомерСтроки)+") цена товара была утверждена: "+строка(стрСсылка.Цена)
					+"р. Новая цена: "+строка(стрОб.Цена)+" требует Нового согласования!", СтатусСообщения.Внимание);
				#КонецЕсли	
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	
	//==========================================================================================================
	//Если уже созданы задачи... и нет необходимости в повторном согласовании - то выход! 
	Если ЭтотОбъект.Согласован 
		Тогда Возврат;
	КонецЕсли;	
	
	//берем руководителя того менеджера, который указан в договоре!
	Руководитель = ПолучитьРуководителя(ДоговорКонтрагента.ОтветственноеЛицо); 
	этоФилиал  = подразделение.ОбособленноеПодразделение;
	
	//20.01.2016
	флЗаменаМенТГ = Константы.СогласованиеФилиаловВместоМенТГ_РуководительНаправления.Получить();
	
	Если этоФилиал Тогда
		РуководительПодразделения = Подразделение.Руководитель;
		РуководительНапрПродажВместоМенТГ  = ДоговорКонтрагента.ОтветственноеЛицо.НаправлениеПродаж.Руководитель;
	КонецЕсли;	 
	//------один в один товары----------------
	таблТовары = Товары.Выгрузить();
	догПредоплаты = (ДоговорКонтрагента.ТипДоговора.Код="00001" или ДоговорКонтрагента.ТипДоговора.Код="00005") ;
	
	//!!!======================== Основная функция заполнения мин.цен  - 3 запроса=========================================!!!
	ценыПоПравилам = Константы.РазрешитьЦеныВЗаказеПоПравиламКлиента.Получить();
	ЗаполнитьМинЦены(таблТовары, догПредоплаты, ценыПоПравилам ); //29.10.2015 - "заглушка" Кр.Опта!
	
	естьОтмененныеСтроки = ЛОЖЬ; i=0;
	таблСогл.Очистить();
	Для каждого стр1 из таблТовары Цикл
		
		Если Стр1.Статус=перечисления.СтатусыСтрокЗаказа.Подтвержден Тогда // уже согласованные строки - НЕ проверяем 22.09.2015!
			продолжить;
		КонецЕсли;
		
		//+++ 08.09.2015 - вместо общих цен - берем цены из правил клиента + общие, Если цена больше - ничего не согласовываем!
		Если ценыПоПравилам
			и Стр1.Цена >= стр1.ЦенаОбщ Тогда
			продолжить;
		КонецЕсли;
		
		//Если даже [v]РазрешитьЦеныВЗаказеПоПравиламКлиента, но цена ниже чем в правилах... начинаем согласование!
		Если Стр1.Цена < стр1.ЦенаМин  
			или Стр1.Цена < стр1.ЦенаМинРук
			Тогда  // подтвержденный товар!
			естьОтмененныеСтроки = истина;
			
			//--------------------Авто-согласование по своему договору...------------------------													   
			#Если Клиент Тогда
				Если (Стр1.Цена <= стр1.ЦенаМин и ЭтотОбъект.ДоговорКонтрагента.ОтветственноеЛицо = стр1.Номенклатура.НоменклатурнаяГруппа.Ответственный) Тогда
					сообщить(строка(стр1.НомерСтроки)+") "+строка(стр1.Номенклатура.Код)+" - "+строка(стр1.Номенклатура)+" цена МЕНЬШЕ мин.разрешенной цены: "+строка(стр1.ЦенаМин)+"р. 
					|        Запрашиваемая цена: "+строка(стр1.Цена)+"р. автоматически разрешена по договору Для менеджера Тов.Группы: "+строка(стр1.Номенклатура.НоменклатурнаяГруппа.Ответственный), СтатусСообщения.Информация);
					продолжить;			
				КонецЕсли;
				
				//--------------------Авто-согласование по своему договору...------------------------													   
				Если (Стр1.Цена <= стр1.ЦенаМинРук и Стр1.Цена>стр1.ЦенаМин  //только Если цена больше мин.цены!
					и ЭтотОбъект.ДоговорКонтрагента.ОтветственноеЛицо = Руководитель) Тогда
					сообщить(строка(стр1.НомерСтроки)+") "+строка(стр1.Номенклатура.Код)+" - "+строка(стр1.Номенклатура)+" цена МЕНЬШЕ мин.разрешенной цены руководителя: "+строка(стр1.ЦенаМинРук)+"р. 
					|         Запрашиваемая цена: "+строка(стр1.Цена)+"р. автоматически разрешена Для Руководителя: "+строка(Руководитель), СтатусСообщения.Информация);
					продолжить;			
				КонецЕсли;
			#КонецЕсли	 
			
			//--------------------------Заполняем строки Для согласования!------------------------	
			стрСогл = таблСогл.Добавить();
			ЗаполнитьЗначенияСвойств(стрСогл, стр1);
			
			Стр1.Статус = ?(Стр1.Статус.Пустая(), перечисления.СтатусыСтрокЗаказа.НаСогласовании, Стр1.Статус);
			
			Если Стр1.Статус<>перечисления.СтатусыСтрокЗаказа.Подтвержден Тогда //уже подтверждена низкая цена!
				
				СтрЗаказа = Товары.Найти( Стр1.Номенклатура,  "Номенклатура");
				
				Если Стр1.Цена <= стр1.ЦенаМин Тогда  //!!! 08.10.2015 <= Для мен.ТГ
					
					//Для филиалов - руководитель направления продаж по менедежеру из договора!
					Если этоФилиал и флЗаменаМенТГ Тогда  //20.01.2016 - ТОЛЬКО ПО КОНСТАНТЕ!
						менТГ = РуководительНапрПродажВместоМенТГ;
						// заглушка - на Бондаренко всегда Если у менеджера нет направления продаж!
						Если ЗначениеНеЗаполнено(менТГ) Тогда
							//менТГ = справочники.Пользователи.НайтиПоКоду("Бондаренко");
							менТГ = справочники.Пользователи.НайтиПоКоду("Бондаренко Е.Д. (снабжение)");
						КонецЕсли;	
					Иначе 
						менТГ = стр1.Номенклатура.НоменклатурнаяГруппа.Ответственный; 
						//заглушка
						Если ЗначениеНеЗаполнено(менТГ) Тогда
							текСтр = стр1.Номенклатура;
							
							//автоопределение по виду товара и производителю
							Если текСтр.ВидТовара = перечисления.ВидыТоваров.Диски Тогда
								менТГ = справочники.Пользователи.НайтиПоКоду("Малышев Егор");
							ИначеЕсли текСтр.ВидТовара = перечисления.ВидыТоваров.АКБ Тогда
								менТГ = справочники.Пользователи.НайтиПоКоду("Сухачева А.В.");
							ИначеЕсли текСтр.ВидТовара = перечисления.ВидыТоваров.Аксессуары Тогда
								менТГ = справочники.Пользователи.НайтиПоКоду("Голубева В.С.");
							ИначеЕсли текСтр.ВидТовара = перечисления.ВидыТоваров.Шины Тогда //все шины - Горохову
								
								//Contyre Avatyre - Вострилов	
								Если СокрЛП(текСтр.Производитель.Код)=109
									или СокрЛП(текСтр.Производитель.Код)=3434 Тогда
									менТГ = справочники.Пользователи.НайтиПоКоду("Вострилов А.В.");
									//нКШЗ, Кама, Кама EURO, Viatti -  Никитин И.Б., 
								ИначеЕсли СокрЛП(текСтр.Производитель.Код)=39
									или СокрЛП(текСтр.Производитель.Код)=3279
									или СокрЛП(текСтр.Производитель.Код)=3280 
									или СокрЛП(текСтр.Производитель.Код)=3193
									или СокрЛП(текСтр.Производитель.Код)=64 Тогда
									менТГ = справочники.Пользователи.НайтиПоКоду("Никитин");
								ИначеЕсли СокрЛП(текСтр.Производитель.Код)=36
									или СокрЛП(текСтр.Производитель.Код)=43 Тогда
									менТГ = справочники.Пользователи.НайтиПоКоду("Горохов");
								ИначеЕсли СокрЛП(текСтр.Производитель.Код)=41
									или СокрЛП(текСтр.Производитель.Код)=777
									или СокрЛП(текСтр.Производитель.Код)=32 
									или СокрЛП(текСтр.Производитель.Код)=22 
									или СокрЛП(текСтр.Производитель.Код)=67 Тогда
									менТГ = справочники.Пользователи.НайтиПоКоду("Кузьмичева");
									//Импортные - Доколин 
								Иначе	 
									менТГ = справочники.Пользователи.НайтиПоКоду("Доколин");
								КонецЕсли;
								
							Иначе	 // все другое - тоже к Горохову
								менТГ = справочники.Пользователи.НайтиПоКоду("Горохов");
							КонецЕсли;
							
						КонецЕсли;	
					КонецЕсли;
					
					стрСогл.ПользовательУтверждающий = менТГ;
					
					//+++ 13.12.2016 - Задача № 20803 - автосогласование
					Егор = справочники.пользователи.НайтиПоКоду("Малышев Егор");
					Если  ДоговорКонтрагента.ОтветственноеЛицо.НаправлениеПродаж.Руководитель = Егор
						и стрСогл.ПользовательУтверждающий = Егор тогда
						
						СтрЗаказа.Статус= перечисления.СтатусыСтрокЗаказа.Подтвержден;
						#Если ТолстыйКлиентОбычноеПриложение Тогда
							сообщить(строка(стр1.НомерСтроки)+") "+строка(СтрЗаказа.Номенклатура.Код)+" - "+строка(СтрЗаказа.Номенклатура)+" цена автоматически согласована: "+строка(СтрЗаказа.Цена)+"р.", СтатусСообщения.Информация);
						#КонецЕсли	 
						таблСогл.Удалить(  таблСогл.Количество()-1 ); // удаляем последнюю строку
						Продолжить;
						
					Иначе	
						СтрЗаказа.Статус= перечисления.СтатусыСтрокЗаказа.НаСогласовании;
						стрСогл.ЦенаМин = стр1.ЦенаМин;
						#Если ТолстыйКлиентОбычноеПриложение Тогда
							сообщить(строка(СтрЗаказа.НомерСтроки)+") "+строка(стр1.Номенклатура.Код)+" - "+строка(стр1.Номенклатура)+" цена автоматически изменена на мин.разрешенную: "+строка(стр1.ЦенаМин)+"р. 
							|        Запрашиваемую цену: "+строка(стр1.Цена)+"р. должен согласовать Менеджер Тов.Группы: "+строка(стрСогл.ПользовательУтверждающий), СтатусСообщения.Внимание);
						#КонецЕсли	 
						СтрЗаказа.Цена  = стр1.ЦенаМин;  // меняем цену в заказе
					КонецЕсли;
					//+++)
					
					
					//=======================================================================================================================================		
				ИначеЕсли Стр1.Цена < стр1.ЦенаМинРук Тогда
					Если этоФилиал Тогда Руководитель = РуководительПодразделения;
						//ИНАЧЕ         //Руководитель НАПРАВЛЕНИЯ по менедежру из договора! 
						//	Для Ярославля: Марешева, Филатова, Бондаренко или Горохов, Если нет направления!
						//	Руководитель = ДоговорКонтрагента.ОтветственноеЛицо.НаправлениеПродаж.Руководитель;
					КонецЕсли;	
					стрСогл.ПользовательУтверждающий = Руководитель; 
					СтрЗаказа.Статус= перечисления.СтатусыСтрокЗаказа.НаСогласовании;
					стрСогл.ЦенаМин = стр1.ЦенаМинРук;
					
					//+++ 13.12.2016 - Задача № 20803 - автосогласование
					Егор = справочники.пользователи.НайтиПоКоду("Малышев Егор");
					Если  ДоговорКонтрагента.ОтветственноеЛицо.НаправлениеПродаж.Руководитель = Егор
						и стрСогл.ПользовательУтверждающий = Егор тогда
						
						СтрЗаказа.Статус= перечисления.СтатусыСтрокЗаказа.Подтвержден;
						#Если ТолстыйКлиентОбычноеПриложение Тогда
							сообщить(строка(СтрЗаказа.НомерСтроки)+") "+строка(СтрЗаказа.Номенклатура.Код)+" - "+строка(СтрЗаказа.Номенклатура)+" цена автоматически согласована: "+строка(СтрЗаказа.Цена)+"р.", СтатусСообщения.Информация);
						#КонецЕсли	 
						таблСогл.Удалить(  таблСогл.Количество()-1 ); // удаляем последнюю строку
						Продолжить;
						
					Иначе	
						#Если ТолстыйКлиентОбычноеПриложение Тогда
							сообщить(строка(стр1.НомерСтроки)+") "+строка(стр1.Номенклатура.Код)+" - "+строка(стр1.Номенклатура)+" цена автоматически изменена на мин.разрешенную: "+строка(стр1.ЦенаМинРук)+"р. 
							|         Запрашиваемую цену: "+строка(стр1.Цена)+"р. должен согласовать Руководитель: "+строка(стрСогл.ПользовательУтверждающий), СтатусСообщения.Внимание);
						#КонецЕсли	
						
						СтрЗаказа.Цена  = стр1.ЦенаМинРук;
					КонецЕсли;
					//+++)
					
				КонецЕсли;
				
				//+++ 15.07.2016 - относительная скидка И ДЛЯ МИН.ЦЕНЫ тоже! Вместо цены по типу - цена Клиента!
				//
				//  20.12.2016 --- выключено ---
				//
				//Если стр1.ЦенаОбщ>0 
				//	и Найти( строка( стрСогл.ПользовательУтверждающий ), "Малышев")>0 //22.08.2016 только Для Егора цена от цены по правилам Клиента!
				//	и стр1.номенклатура.ВидТовара = перечисления.ВидыТоваров.Диски Тогда
				//  	стрСогл.ЦенаПоТипуЦен = стр1.ЦенаОбщ;
				//КонецЕсли;
				
				
				//МЕНЯЕМ Цену на Мин.Цену и Сумму !  
				СтрЗаказа.Сумма   = СтрЗаказа.Цена * СтрЗаказа.Количество;
				СтрЗаказа.СуммаНДС = РассчитатьСуммуНДС(СтрЗаказа.Сумма,
				УчитыватьНДС, СуммаВключаетНДС,
				ПолучитьСтавкуНДС(СтрЗаказа.СтавкаНДС));
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если естьОтмененныеСтроки Тогда //- пересчет сумм
		СуммаДокумента = ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	КонецЕсли;
	
КонецПроцедуры  //ЗаполнитьТаблСогласования  и изменить цены

//12.08.2015 Заполнить Мин Цены по типу договора(предоплата/нет) из общий правил!
процедура ЗаполнитьМинЦены( таблТовары, ЭтоПредоплата=ложь, ЦеныПоПравилам=ложь)
	
	ДатаЦены =  ЭтотОбъект.Контрагент.ДатаСрезаЦен; // срез цен
	
	таблТовары.Колонки.Добавить("НомерСтрокиОснования");
	таблТовары.Колонки.Добавить("ЦенаПоТипуЦен"); // Для расчета скидок
	таблТовары.Колонки.Добавить("ЦенаОбщ"); // Для просто скидки
	таблТовары.Колонки.Добавить("ЦенаМин");
	таблТовары.Колонки.Добавить("ЦенаМинРук");
	
	таблТовары.Колонки.Добавить("Приоритет");//22.08.2016
	
	Для каждого стрТ из таблТовары Цикл
		//		стрТ.Цена    = ?(СтрТ.Количество=0, СтрТ.Сумма, СтрТ.Сумма / СтрТ.Количество);
		стрТ.НомерСтрокиОснования = стрТ.НомерСтроки;
		стрТ.ЦенаПоТипуЦен = 0;
		стрТ.ЦенаОбщ       = 0;
		стрТ.ЦенаМин       = 0;
		стрТ.ЦенаМинРук    = 0;
		стрТ.Приоритет = 0;
	КонецЦикла;	
	
	таблТов = таблТовары.Скопировать();
	таблТов.Свернуть("Номенклатура");
	массТов = таблТов.выгрузитьКолонку("Номенклатура");
	
	//==============================ГЛАВНЫЙ ЗАПРОС=====================================================================	
	Запрос = Новый Запрос;
	
	//+++ ускоритель в 2-3 раза с 20 сек. до 6-10 сек.
	Если ЦеныПоПравилам Тогда
		СкидкиРук = Неопределено;//стартуем с ПравилКлиента+ОБЩИЕ Правила, у клиента нет личных и в 99% цена не меняется вручную!
		N = 3;
	Иначе	
		СкидкиРук = ЛОЖЬ;//стартуем с правил Мен.ТГ! (29.09.2015 и доп. проверяем правила руководителя...
		N = 2;
	КонецЕсли;
	
	MaxDays	= Константы.ВеличинаПодсчетаПериодаВДокументеЦены.Получить(); //30-90 дней = 1-3 мес!
	//цены - могут быть по срезу цен на дату среза Клиента!
	//  но не более чем на ВеличинаПодсчетаПериодаВДокументеЦены=30(дней) !
	ДатаСреза = ?(ЭтотОбъект.Контрагент.ДатаСрезаЦен>'20140101', ЭтотОбъект.Контрагент.ДатаСрезаЦен, ЭтотОбъект.Дата );
	Если ЭтотОбъект.Контрагент.ДатаСрезаЦен='00010101' Тогда
		ДатаСреза = неопределено; // на текущую дату!
	ИначеЕсли ( НачалоДня(ТекущаяДата()) - ДатаСреза )> 86400*MaxDays Тогда
		#Если Клиент Тогда
			Сообщить("Расчет цен на дату: "+формат(ДатаСреза,"")+" 
			|превышает макс.разрешенный период "+строка(MaxDays)+" дней!
			|поэтому расчет цен будет произведен на текущую дату!", СтатусСообщения.Информация);
		#КонецЕсли			   
		ДатаСреза = неопределено; // на текущую дату!
	КонецЕсли;  
	
	//21.03.2017 - только если этот договор - экспортный в рублях и без *
	флБезНДС = (Контрагент.Экспорт И ДоговорКонтрагента.ВалютаВзаиморасчетов.Код="643" 
	И найти(врег(ДоговорКонтрагента.Наименование),"ЭКСПОРТ")>0
	и найти(ДоговорКонтрагента.Наименование,"*")=0 );
	
	Для jj=1 по N Цикл
		
		//+++ 08.09.2015 - вместо общих цен - берем цены из правил клиента!
		Если ЦеныПоПравилам и СкидкиРук=неопределено и массТов.Количество()>0 Тогда
			
			//+++ 20.09.2017 Филатова - при согласовании не учитывать Тр.Клиента?! для менеджеров Ярославля! или включен [v]НеУчитыватьТрКлиента
			НеУчитыватьТрКлиента2 = НеУчитыватьТрКлиента или (ДоговорКонтрагента.ОтветственноеЛицо.ОсновноеПодразделение.ОбособленноеПодразделение=ЛОЖЬ);
			
			резТаблОбщие = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(ЭтотОбъект.Контрагент, массТов, ,,ДатаСреза, НеУчитыватьТрКлиента2 ,, флБезНДС);  //21.03.2017 - надо 7 запятых!
			
		ИначеЕсли массТов.Количество()>0 Тогда
			
			Запрос.Текст = "ВЫБРАТЬ
			|	ПравилаЦенообразованияОбщие.Приоритет,
			|	ПравилаЦенообразованияОбщие.ВидТовара,
			|	ПравилаЦенообразованияОбщие.Производитель,
			|	ПравилаЦенообразованияОбщие.НоменклатурнаяГруппа,
			|	ПравилаЦенообразованияОбщие.ВходитВПапку,
			|	ПравилаЦенообразованияОбщие.Диаметр,
			|	ПравилаЦенообразованияОбщие.Номенклатура,
			|	ПравилаЦенообразованияОбщие.ТипЦен,
			|	ПравилаЦенообразованияОбщие.ПодСтрока,
			//----- Если не заданы мин скидки - берем просто скидку-----------------
			|" + ?(СкидкиРук = неопределено,"
			|	ПравилаЦенообразованияОбщие.СкидкаНаценка КАК СкидкаНаценка,
			|	ПравилаЦенообразованияОбщие.СкидкаПредоплаты КАК СкидкаПредоплаты",
			//--------------------в скидку и предоплату - заносим макмимальные скидки-----------------
			?(СкидкиРук, "
			|	ПравилаЦенообразованияОбщие.МаксСкидкаНаценкаРук КАК СкидкаНаценка,
			|	ПравилаЦенообразованияОбщие.МаксСкидкаПредоплатыРук КАК СкидкаПредоплаты"
			, "
			|	ПравилаЦенообразованияОбщие.МаксСкидкаНаценка    КАК СкидкаНаценка,
			|	ПравилаЦенообразованияОбщие.МаксСкидкаПредоплаты КАК СкидкаПредоплаты"))
			+"
			//+++ 07.07.2016 - вот из-за этой строки 
			|   , ПравилаЦенообразованияОбщие.ВидДефектаДляУценки	  
			|ИЗ
			|	РегистрСведений.ПравилаЦенообразованияОбщие КАК ПравилаЦенообразованияОбщие
			
			|ГДЕ  
			|	ПравилаЦенообразованияОбщие.видТовара В (&СписокВидовТовара)
			|	И ПравилаЦенообразованияОбщие.Производитель В (&СписокПроизводителей)
			|	И ПравилаЦенообразованияОбщие.НоменклатурнаяГруппа В (&СписокНомГрупп)
			//12.12.2016
			|	И ПравилаЦенообразованияОбщие.Категория = Значение(Перечисление.КатегорииСкидок.ПустаяСсылка)
			
			|УПОРЯДОЧИТЬ ПО Приоритет";
			
			//12.12.2016
			Если Константы.ЦенообразованиеПоКатегориям.Получить() тогда
				Запрос.Текст = стрЗаменить( Запрос.Текст, "Категория =", "Категория <>");
			КонецЕсли; 
			
			//22.08.2016 такой же отбор и в общих правилах!
			Если массТов.Количество()<1000 Тогда 
				//+++ 22.09.2015 - - Если в заказе только 1 тип товара (90% заказов!) - не надо брать ВСЕ правила и все цены!
				ТаблВидовТовара = новый ТаблицаЗначений; // 13.08.2016
				ТаблВидовТовара.Колонки.Добавить("ВидТовара");
				ТаблВидовТовара.Колонки.Добавить("НоменклатурнаяГруппа");
				ТаблВидовТовара.Колонки.Добавить("Производитель");
				
				Для iii=0 по массТов.Количество()-1 Цикл
					Товар1 = массТов[iii];
					стр1 = ТаблВидовТовара.Добавить();
					стр1.видТовара 			  = Товар1.видТовара;	
					стр1.НоменклатурнаяГруппа = Товар1.НоменклатурнаяГруппа;	
					стр1.Производитель 		  = Товар1.Производитель;	
				КонецЦикла;
				
				Табл1 = ТаблВидовТовара.Скопировать(,"НоменклатурнаяГруппа");
				Табл1.Свернуть("НоменклатурнаяГруппа");    
				спис1 = Табл1.ВыгрузитьКолонку( "НоменклатурнаяГруппа");
				спис1.Добавить( справочники.НоменклатурныеГруппы.ПустаяСсылка() );
				Запрос.УстановитьПараметр("СписокНомГрупп", спис1 );
				
				Табл2 = ТаблВидовТовара.Скопировать(,"Производитель");
				Табл2.Свернуть("Производитель");
				спис2 = Табл2.ВыгрузитьКолонку("Производитель");
				спис2.Добавить( справочники.Производители.ПустаяСсылка() );
				Запрос.УстановитьПараметр("СписокПроизводителей",  спис2);
				
				ТаблВидовТовара.Свернуть("ВидТовара");
				Запрос.УстановитьПараметр("СписокВидовТовара", ТаблВидовТовара.ВыгрузитьКолонку("ВидТовара") );
				
			КонецЕсли;
			
			Результат = Запрос.Выполнить();
			ТекущаяПолитикаПравилаОбщие = Результат.Выгрузить();
			
			//+++ 20.09.2017 Филатова - при согласовании не учитывать Тр.Клиента?! для менеджеров Ярославля! или включен [v]НеУчитыватьТрКлиента
			НеУчитыватьТрКлиента2 = НеУчитыватьТрКлиента или (ДоговорКонтрагента.ОтветственноеЛицо.ОсновноеПодразделение.ОбособленноеПодразделение=ЛОЖЬ);
			
			резТаблОбщие = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(ЭтотОбъект.Контрагент, массТов, ЛОЖЬ, ТекущаяПолитикаПравилаОбщие, ДатаСреза, НеУчитыватьТрКлиента2 ,, флБезНДС);	//21.03.2017 - надо 7 запятых!
			
		КонецЕсли;	   
		
		//=======================================================================   
		
		КолОкр = 0; // +++ 08.09.2015 округление цен до рублей
		Для каждого Стр1 из таблТовары Цикл
			
			СтрЦен = резТаблОбщие.Найти(стр1.Номенклатура, "Номенклатура");
			Если СтрЦен = неопределено Тогда // быть такого не может... но на всякий случай
				продолжить;//будет 0, контроля не будет, Если не найден товар!
			КонецЕсли;	  
			
			//+++ 22.08.2016 - фиксируем номер правила
			Если СкидкиРук=неопределено Тогда
				стр1.Приоритет = строка(СтрЦен.Приоритет); 
			Иначе   
				стр1.Приоритет = ""+стр1.Приоритет +" - "+ ?(СкидкиРук,"рук. ","") +формат(1000 + СтрЦен.Приоритет,"ЧГ=0"); 
			КонецЕсли;
			стр1.ЦенаПоТипуЦен = ОКР(СтрЦен.ЦенаПоТипуЦен, КолОкр); //цена по типу цен из ОБЩИХ правил клиента! 
			
			
			
			ЦенаМин = ОКР( ?(ЭтоПредоплата, СтрЦен.ЦенаСоСкидкойПредоплаты, СтрЦен.МинимальнаяЦена ) , КолОкр ); // до рублей!
			Если ЦенаМин <=0 Тогда
				ЦенаМин = ОКР(СтрЦен.ЦенаПоТипуЦен, КолОкр);
			КонецЕсли;	   
			
			Если СкидкиРук=неопределено Тогда
				стр1.ЦенаОбщ = ЦенаМин;	
			Иначе
				// Тогда задачи на согласование будут делаться
				// ТОЛЬКО Для скидок более мин. скидки Менеджера тов.группы!
				Если Окр(ЦенаМин,0) = Окр(стр1.ЦенаПоТипуЦен,0) Тогда 
					
					//Если % мин.скидки = 0 Для Руководителя - Ничего не контролировать?!
					Если СкидкиРук Тогда
						
						ЦенаМин = 1; // Для руководителя  - согласования не будет!
						
					Иначе //Для Менеджера тов.группы  - контроль оставляем!  
						ЦенаМин = ОКР( ?(стр1.ЦенаОбщ=0, стр1.ЦенаПоТипуЦен, стр1.ЦенаОбщ), КолОкр); //Если нет ЦеныОбщ - то цена по типу!
					КонецЕсли;
					
				КонецЕсли;
				
				Если СкидкиРук Тогда 
					стр1.ЦенаМинРук = ЦенаМин;
					стр1.ЦенаОбщ =  ОКР( ?(стр1.ЦенаОбщ=0, стр1.ЦенаПоТипуЦен, стр1.ЦенаОбщ), КолОкр); //после оптимизации - нет общей цены!
				Иначе				 
					стр1.ЦенаМин    = ЦенаМин;  
					стр1.ЦенаОбщ =  ОКР( ?(стр1.ЦенаОбщ=0, стр1.ЦенаПоТипуЦен, стр1.ЦенаОбщ), КолОкр); //после оптимизации - нет общей цены!
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		//22.09.2015 =========Уменьшение списка товаров, исключение проверок на мин.Цены Рук или МенТГ Для "нормальных" цен=========
		массТов = новый Массив;
		
		Если СкидкиРук = неопределено Тогда //общие правила... 
			Для каждого Стр1 из таблТовары Цикл
				Если стр1.Цена < стр1.ЦенаОбщ Тогда
					массТов.Добавить( стр1.Номенклатура );
				КонецЕсли;	
			КонецЦикла;
			Если массТов.Количество() = 0 Тогда // Если все цены "нормальные" - больше не проверяем!!!
				прервать; // больше не проверяем!
			КонецЕсли;
			
		ИначеЕсли НЕ СкидкиРук Тогда //менеджер ТГ - остаток товаров - утверждает Руководитель... 
			Для каждого Стр1 из таблТовары Цикл
				Если стр1.Цена > стр1.ЦенаМин Тогда
					массТов.Добавить( стр1.Номенклатура );
				КонецЕсли;	
			КонецЦикла;
			Если массТов.Количество() = 0 Тогда
				прервать; // больше не проверяем!
			КонецЕсли;
			//проверка цен руководителя - последняя	
		ИначеЕсли СкидкиРук Тогда    //Если цены больше мин.цены руководителя - ничего не утверждаем!
			Для каждого Стр1 из таблТовары Цикл
				Если стр1.Цена<стр1.ЦенаМинРук Тогда
					массТов.Добавить( стр1.Номенклатура );
				КонецЕсли;	
			КонецЦикла;
			Если массТов.Количество() = 0 Тогда
				прервать; // больше не проверяем!
			КонецЕсли;	
			
		КонецЕсли;	
		//=======================================================================
		
		Если СкидкиРук=Неопределено Тогда  // общ.правила >> менТГ
			СкидкиРук = ЛОЖЬ; // 
			#Если Клиент Тогда
				Состояние(строка(ТекущаяДата())+" Требуется еще 5 сек. Для доп.проверки "+ строка(массТов.Количество())+" тов. с ценой меньше, чем цены "+?(ЦеныПоПравилам,"по правилам клиента","по общ.правилам") );
			#КонецЕсли
		ИначеЕсли СкидкиРук Тогда  //Рук  >> Общие
			СкидкиРук = Неопределено; 
			#Если Клиент Тогда
				Состояние(строка(ТекущаяДата())+" Требуется еще 5 сек. Для доп.проверки "+ строка(массТов.Количество())+" тов. с ценой меньше, чем мин.цены Руководителя.") ;
			#КонецЕсли
		ИначеЕсли НЕ СкидкиРук Тогда // менТГ >> Рук
			СкидкиРук = Истина;      
			#Если Клиент Тогда
				Состояние(строка(ТекущаяДата())+" Требуется еще 5 сек. Для доп.проверки "+ строка(массТов.Количество())+" тов. с ценой больше, чем мин.цены менеджера Тов.Группы.");
			#КонецЕсли
		КонецЕсли;
		
	КонецЦикла; // 3-ой проход
	
	// 27.12.2016 - проверка на цену ниже цены по Константе МинимальныйТипЦен (Закупочная) !
	типЦенМин = Константы.МинимальныйТипЦен.Получить(); //Параметры - Минимальный тип цен:
	Если НЕ ЭтотОбъект.Контрагент.НеКонтроллироватьЦеныПродажи
		И типЦенМин<>справочники.ТипыЦенНоменклатуры.ПустаяСсылка()
		Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	тов.Номенклатура,
		|	тов.Цена
		|ПОМЕСТИТЬ ВТ_тов
		|ИЗ
		|	&ТаблТов КАК тов
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Тов.Номенклатура,
		|	ВТ_Тов.Цена КАК Цена,
		|	ЦеныСрезПоследних.Цена КАК ЦенаМин
		|ИЗ
		|	ВТ_тов КАК ВТ_Тов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних( ,
		|				Номенклатура В (ВЫБРАТЬ ВТ.Номенклатура
		|						ИЗ	ВТ_тов КАК ВТ)
		|					И ТипЦен = &ТипЦен
		|					И Валюта = &Валюта) КАК ЦеныСрезПоследних
		|		ПО ВТ_Тов.Номенклатура = ЦеныСрезПоследних.Номенклатура
		|ГДЕ
		|	ВТ_Тов.Цена < ЕСТЬNULL(ЦеныСрезПоследних.Цена, 0)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Тов";
		Запрос.УстановитьПараметр("ТипЦен", типЦенМин );
		Запрос.УстановитьПараметр("Валюта", ЭтотОбъект.ВалютаДокумента);
		
		таблТов = Товары.Выгрузить(,"Номенклатура, Цена");
		Запрос.УстановитьПараметр("ТаблТов", таблТов );
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() тогда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				#Если Клиент тогда
					Сообщить("ЦЕНА Товара: "+строка(выборка.Номенклатура.Код)+" "+строка(выборка.Номенклатура)+" меньше минимальной "+строка(выборка.ЦенаМин), СтатусСообщения.Внимание);
				#КонецЕсли	 
				
				стр1 = Товары.Найти(выборка.Номенклатура,"Номенклатура");
				стр1.Цена = выборка.ЦенаМин;
				
				стр1.Сумма      = стр1.Цена*стр1.Количество;  // может отличаться от цена * количество
				
				если ЭтотОбъект.УчитыватьНДС тогда
					Если ЭтотОбъект.СуммаВключаетНДС тогда
						если стр1.СтавкаНДС = перечисления.СтавкиНДС.НДС18
							или стр1.СтавкаНДС = перечисления.СтавкиНДС.НДС18_118 тогда
							стр1.СуммаНДС   = Окр(стр1.Сумма*18/118, 2); //до копеек
						КонецЕсли;
					Иначе// НДС сверху
						если стр1.СтавкаНДС = перечисления.СтавкиНДС.НДС18
							или стр1.СтавкаНДС = перечисления.СтавкиНДС.НДС18_118 тогда
							стр1.СуммаНДС   = Окр(стр1.Сумма*18/100, 2); //до копеек
						КонецЕсли;
					КонецЕсли;	
				иначе
					стр1.СуммаНДС = 0;
				КонецЕсли;	
				
			КонецЦикла;
		КонецЕсли; 		
	КонецЕсли; 				
	
КонецПроцедуры


//12.08.2015 ПослеЗаписи заказа
процедура ЗаполнитьЗадачиНаСогласование() экспорт
	
	Если (НЕ константы.СогласованиеПоСкидкамКлиентов.Получить()	 
		или (таблСогл.Количество()=0)) и ТипЗаказа <> 12
		Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗаказа = 12 и Согласован Тогда
		Возврат;				
	КонецЕсли;
	
	//================== создание задач по ПользовательУтверждающий =====================================
	Если ТипЗаказа = 12 и СогласовыватьРекламу и Проверен Тогда   //Реклама
		
		//Проверен= Ложь;
		
		Лаврова = Справочники.Пользователи.НайтиПоКоду("Лаврова");	
		//+++ 09.11.2016 - web-сервисы не понимают такое... ошибка на ПараметрыСеанса.
		#Если Клиент Тогда
			Инициатор = ПараметрыСеанса.ТекущийПользователь;
		#Иначе
			Инициатор = Справочники.Пользователи.НайтиПоКоду("Робот (магазин)");
		#КонецЕсли
		Задача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
		Задача.Дата = ТекущаяДата();
		Задача.Постановщик = Лаврова;
		Задача.Наименование = "Согласование РЕКЛАМНОЙ продукции";
		Задача.Исполнитель = Лаврова;
		Задача.Описание = "Согласование РЕКЛАМНОЙ продукции." + символы.пс 
		+ "Ответственный менеджер: " + Инициатор.Наименование + символы.пс
		+ "Контрагент " + Контрагент.НаименованиеПолное + Символы.ПС
		+ "№ Заказа " + Номер + Символы.ПС+Символы.ПС+Символы.ПС; 
		
		Для каждого стр из Товары Цикл
			НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(стр.Номенклатура);
			НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Согласовывать"));
			НаборЗаписей.Прочитать();
			Для Каждого стр1 из НаборЗаписей Цикл
				Если стр1.Значение Тогда
					стрЗадачи = Задача.Товары.Добавить();
					ЗаполнитьЗначенияСвойств( стрЗадачи, стр );
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;	
		
		Задача.Объект = Ссылка;
		Задача.Инициатор = Инициатор;
		Задача.НаСогласование = Истина;
		//Задача.РеквизитДляСогласования = "Проверен";
		//Задача.ЗначениеРеквизитаДляСогласования = ЛОЖЬ;
		Задача.СрокОповещения = Задача.Дата;
		Задача.Оповещение = Истина;
		Если Задача.Товары.Количество() > 0 Тогда
			Задача.Записать(); 
			
			#Если Клиент Тогда
				Сообщить("Создана заявка на согласование Для пользователя: "+строка(Лаврова)+". Только после согласования заказ будет [v]""К отгрузке"".");
			#КонецЕсли
		КонецЕсли;	
		
	ИначеЕсли ТипЗаказа <> 12 Тогда
		
		таблСогл1 = таблСогл.Скопировать();
		таблСогл1.Свернуть("ПользовательУтверждающий");
		
		Для каждого стрСогл из 	таблСогл1 Цикл
			задача1 = неопределено;
			//нет Исполнителя - некому и утверждать
			Если НЕ ЗначениеЗаполнено(стрСогл.ПользовательУтверждающий) Тогда
				продолжить;
			КонецЕсли;	
			задача1 = НайтиЗадачуНаСогласованиеПоЗаказу(стрСогл.ПользовательУтверждающий);
			
			Если задача1 = неопределено Тогда 
				
				задачаОб = Задачи.ЗадачиПользователя.СоздатьЗадачу();
				
				задачаОб.Исполнитель = стрСогл.ПользовательУтверждающий;
				задачаОб.Инициатор   = ссылка.ДоговорКонтрагента.ОтветственноеЛицо; // менеджер
				
				задачаОб.НаСогласование = истина;
				задачаОб.Объект = ЭтотОбъект.Ссылка; // Уже есть к моменту создания задач
				
				задачаОб.Дата = ТекущаяДата();
				задачаОб.Оповещение     = истина; // сразу
				задачаОб.СрокОповещения = ТекущаяДата();
				задачаОб.СрокИсполнения = макс( ТекущаяДата()+ 3600, ЭтотОбъект.ДатаОтгрузки + 14 * 3600); // до обеда даты отгрузки  или + 4 ч.
				
			Иначе //------из Задачи - записываем Заказ, а из заказа - Задачу...
				#Если Клиент Тогда
					сообщить("Уже есть Задача на согласование от "+строка(задача1.Дата)+" Для пользователя: "+строка(стрСогл.ПользовательУтверждающий), СтатусСообщения.Информация);
				#КонецЕсли
				задачаОб = задача1.ПОлучитьОбъект();
				задачаОб.Товары.Очистить();
				
				задачаОб.Оповещение     = истина; // сразу
				задачаОб.СрокОповещения = ТекущаяДата();
				задачаОб.СрокИсполнения = макс( ТекущаяДата()+ 3600, ЭтотОбъект.ДатаОтгрузки + 14 * 3600); // до обеда даты отгрузки  или + 4 ч.
				
			КонецЕсли;	
			строки1 =  таблСогл.НайтиСтроки( новый Структура("ПользовательУтверждающий", стрСогл.ПользовательУтверждающий));
			
			Если строки1.Количество()>0 Тогда
				задачаОб.Товары.Очистить(); ОписаниеЗадачи="";
				ЭтоПредоплата = (ЭтотОбъект.ДоговорКонтрагента.ТипДоговора.Код="00001" или ЭтотОбъект.ДоговорКонтрагента.ТипДоговора.Код="00005"); //16.05.2017
				Для i=0 по строки1.Количество()-1 Цикл
					//добавляем в задачу - строка Для утверждения  строки1[i]
					стрЗадачи = задачаОб.Товары.Добавить();
					ЗаполнитьЗначенияСвойств( стрЗадачи, строки1[i] );
					
					//+++ 17.08.2015 %% скидок
					стрЗадачи.Скидка    = ?(стрЗадачи.ЦенаПоТипуЦен=0,0, 100*(стрЗадачи.Цена/стрЗадачи.ЦенаПоТипуЦен-1));
					стрЗадачи.СкидкаМин = ?(стрЗадачи.ЦенаПоТипуЦен=0,0, 100*(стрЗадачи.ЦенаМин/стрЗадачи.ЦенаПоТипуЦен-1));
					
					ОписаниеЗадачи = ОписаниеЗадачи +?(строки1[i].Статус=перечисления.СтатусыСтрокЗаказа.Подтвержден, "+ ",
					?(строки1[i].Статус=перечисления.СтатусыСтрокЗаказа.Отменен, "- ","  "))
					+ строка(строки1[i].НомерСтрокиОснования)+" строка: "+строка(строки1[i].Номенклатура.Код)+" - "+строка(строки1[i].Номенклатура)                // 22.08.2016
					+" Цена: "+строка(строки1[i].Цена)+"р. меньше мин.разрешенной цены "+?(ЭтоПредоплата,"(по предоплате)","")+": "+строка(строки1[i].ЦенаМин)+"р. (правила: "+строка(строки1[i].Приоритет)+")
					|";
				КонецЦикла;	
				задачаОб.Наименование = "Утвердите цены "+?(ЭтоПредоплата,"(по предоплате)","")+" Для "+строка(строки1.Количество())+"тов. по Заказу "+строка(ссылка.Номер)+" по клиенту: "+строка(ссылка.Контрагент);
				задачаОб.Описание = ?(задачаОб.Выполнена, "Согласованы", "Требуется согласовать")+" следующие цены"+?(ЭтоПредоплата,"(по предоплате)","")+":
				//22.08.2016
				| Подразделение заказа: "+ строка(ссылка.Подразделение)+" Менеджер по договору: "+строка(ДоговорКонтрагента.ОтветственноеЛицо)+"
				//08.02.2017
				|Адреса клиента: "+строка(Контрагент)+"
				|Факт.адрес:     "+ ПолучитьАдресИзКонтактнойИнформации(Контрагент, "Фактический")+"
				|Адрес Доставки: "+ ПолучитьАдресИзКонтактнойИнформации(Контрагент, "Адрес доставки")+"
				|Адрес в Заказе: "+ строка(ЭтотОбъект.АдресДоставки)+"
				|---------------------------------------------------------------------------------------------
				|"+ОписаниеЗадачи;
				
				задачаОб.РеквизитДляСогласования = "";
				задачаОб.ЗначениеРеквизитаДляСогласования = "";
				
				задачаОб.ОбменДанными.Загрузка = ЛОЖЬ;
				задачаОб.Записать();
				задачаОб.ОбменДанными.Загрузка = ЛОЖЬ;
				#Если Клиент Тогда
					сообщить("Записана Задача на согласование Для пользователя: "+строка(стрСогл.ПользовательУтверждающий), СтатусСообщения.Информация);
				#КонецЕсли	
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры	

//12.08.2015 находит самую свежую задачу не выполненную задачу
// на согласование по Исполнителю и этому заказу
функция НайтиЗадачуНаСогласованиеПоЗаказу(Исполнитель)
	рез = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|	ЗадачиПользователяЗадачиПоИсполнителю.Ссылка
	|ИЗ
	|	Задача.ЗадачиПользователя.ЗадачиПоИсполнителю(&Исполнитель,
	|			Выполнена=ЛОЖЬ 
	|			И НаСогласование
	//27.12.2016 прямо объект - быстрее 0.15 сек, чем через .Ссылка или выразить!
	|				И Объект = &Ссылка) КАК ЗадачиПользователяЗадачиПоИсполнителю
	
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗадачиПользователяЗадачиПоИсполнителю.Дата УБЫВ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель );
	Запрос.УстановитьПараметр("Ссылка", Ссылка );
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		рез = выборка.ссылка;
	КонецЕсли;
	
	возврат рез;
КонецФункции	

//15.05.2017
функция ПолучитьТаблСкладов()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.Склад
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(,
	|			Склад.ЗапретитьИспользование = ЛОЖЬ
	|				И Склад.Транзитный = ЛОЖЬ
	|				И Номенклатура В (&СписТов)) КАК ТоварыНаСкладахОстатки";
	Запрос.УстановитьПараметр("СписТов",      Товары.ВыгрузитьКолонку("Номенклатура") );
	Если Подразделение.ОбособленноеПодразделение тогда
		Запрос.Текст = стрЗаменить(Запрос.Текст, "Транзитный = ЛОЖЬ", "Транзитный = Истина И Склад.Подразделение = &Подразделение");
		Запрос.УстановитьПараметр("Подразделение", Подразделение);	
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	табл = Результат.Выгрузить();
	
	возврат табл;
	
КонецФункции	

функция ПолучитьТаблСкладовОТХ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыНаОТХ.Номенклатура,
	|	ТоварыНаОТХ.Склад
	//   |	, ТоварыНаОТХ.Контрагент
	|ИЗ
	|	РегистрНакопления.ТоварыНаОтветственномХранении.Остатки(
	|			,
	|			Склад.ЗапретитьИспользование = ЛОЖЬ
	|				И Склад.Транзитный = ЛОЖЬ
	|				И Номенклатура В (&СписТов)
	|				И Контрагент В (&СписокКонтрагентовОТХ)) КАК ТоварыНаОТХ";
	Запрос.УстановитьПараметр("СписТов",      Товары.ВыгрузитьКолонку("Номенклатура") );
	
	СписокКонтрагентовОТХ = яштПоставщики.ПолучитьСписокПоставщиков(Истина);  //+++ 01.10.2014
	Запрос.УстановитьПараметр("СписокКонтрагентовОТХ",СписокКонтрагентовОТХ);
	
	Если Подразделение.ОбособленноеПодразделение тогда
		Запрос.Текст = стрЗаменить(Запрос.Текст, "Транзитный = ЛОЖЬ", "Транзитный = Истина И Склад.Подразделение = &Подразделение");
		Запрос.УстановитьПараметр("Подразделение", Подразделение);	
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	табл = Результат.Выгрузить();
	
	возврат табл;
	
КонецФункции	



Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Заголовок Для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = СформироватьДеревоПолейЗапросаПоШапке();
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов"             , "ВедениеВзаиморасчетов");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов"              , "ВалютаВзаиморасчетов");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"                       , "ДоговорОрганизация");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"       , "ВестиПартионныйУчетПоСкладам"      , "ВестиПартионныйУчетПоСкладам");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ОбособленныйУчетТоваровПоЗаказамПокупателей", "ОбособленныйУчетТоваровПоЗаказамПокупателей");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"                 , "ВидСклада"                         , "ВидСклада");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если Отказ Тогда
		возврат;
	КонецЕсли;	
	
	//+++Баланс, Селин, 06.11.2014
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ЗаказыПокупателей");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
//// будет установлена управляемая блокировка для всех комбинаций измерений в соответствии с записями набора записей. 
Движения.ЗаказыПокупателей.БлокироватьДляИзменения = Истина;   //28.11.2017

	//15.05 - 02.11.2017 - первые 3 измерения!?
	ЭлементБлокировки.УстановитьЗначение("ДоговорКонтрагента", ДоговорКонтрагента);
	ЭлементБлокировки.УстановитьЗначение("ЗаказПокупателя",    Ссылка);
	
	//+++ 02.11.2017  надо контролировать ТОЛЬКО по товарам!
	ЭлементБлокировки.ИсточникДанных = ЭтотОбъект.Товары;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");  
	
	//======================================================================================
	//Движения.ЗаказыПокупателейСезонные.БлокироватьДляИзменения = Истина; //даёт читать "грязные" данные!
	//+++ 28.11.2017 - блокировка только если есть + остатки
	//ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ЗаказыПокупателейСезонные");
	//ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;  //могут быть движение по заказу
	//ЭлементБлокировки.УстановитьЗначение("Контрагент",Контрагент);
	//ЭлементБлокировки.ИсточникДанных = ЭтотОбъект.Товары;
	//ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	
	//======================== нет остатков - блокировать нечего !==================================
	таблТоварСклад = ПолучитьТаблСкладов();
	Если таблТоварСклад.Количество()>0 тогда
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ТоварыНаСкладах");
		//+++ 15.05.2017 ограничиваем блокировку ТОЛЬКО по складам подразделения, где есть товар!
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный; //+++ 02.11.2017  так надо
		ЭлементБлокировки.ИсточникДанных = таблТоварСклад;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура"); 
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад"); 
	КонецЕсли;
	
	//+++ в яштПрочее 1880 стр. проверяется Остатки - ТоварыНаОтветственномХранении
	таблТоварСкладОТХ = ПолучитьТаблСкладовОТХ(); // 26.05.2017 другие склады!
	Если таблТоварСклад.Количество()>0 тогда
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ТоварыНаОтветственномХранении");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный; //+++ 02.11.2017  так надо
		ЭлементБлокировки.ИсточникДанных = таблТоварСкладОТХ;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура"); 
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад"); 
		//ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Контрагент", "Контрагент"); // 26.05.2017 - блокирока ТОЛЬКО по контрагенту - не нужна... товары и так разделены
	КонецЕсли;
	
	//02.11.2016 ==================РезервДляИМ============================================
	//Если НЕ Контрагент.КонтрагентДляРезерваИМ.Пустая() Тогда //123заменить
	Если НЕ ДоговорКонтрагента.КонтрагентДляРезерваИМ.Пустая() Тогда
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РезервДляИМ");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ЭтотОбъект.Товары;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
		//ЭлементБлокировки.УстановитьЗначение("КонтрагентДляРезерваИМ",Контрагент.КонтрагентДляРезерваИМ); //123заменить
		ЭлементБлокировки.УстановитьЗначение("КонтрагентДляРезерваИМ",ДоговорКонтрагента.КонтрагентДляРезерваИМ);
		//+++ 15.05.2017  обязательное измерение!
		ЭлементБлокировки.УстановитьЗначение("Подразделение", Подразделение);
	КонецЕсли;	
	
	//+++ 22.09.2015======================================================================
	Если НЕ ЭтоНовый() и ЭтотОбъект.Проверен и ЭтотОбъект.Проведен Тогда
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЖурналИзменений");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;    //для записи - нужна исключитальная блокировка!
		ЭлементБлокировки.УстановитьЗначение("Объект",ЭтотОбъект.Ссылка);
		#Если Клиент тогда
			Если ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь) тогда
				ЭлементБлокировки.УстановитьЗначение("Пользователь", ПараметрыСеанса.ТекущийПользователь); // не всегда определен
			КонецЕсли;
		#КонецЕсли
		
		Если Согласован Тогда
			запрос1 = новый Запрос;
			запрос1.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗадачиПользователя.Ссылка
			|ИЗ
			|	Задача.ЗадачиПользователя КАК ЗадачиПользователя
			|ГДЕ
			|	ЗадачиПользователя.Объект = &Объект
			|	И НЕ ЗадачиПользователя.Выполнена
			|	И НЕ ЗадачиПользователя.ПометкаУдаления";
			запрос1.УстановитьПараметр("Объект", ЭтотОбъект.Ссылка );
			рез1 = запрос1.Выполнить();
			Если не рез1.Пустой() Тогда
				табл1 = рез1.Выгрузить();
				Если табл1.Количество()>0 Тогда	
					ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачиПользователя");
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
					ЭлементБлокировки.ИсточникДанных = табл1;
					ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; // задачи
		
	КонецЕсли;
	
	Блокировка.Заблокировать();
	//--Баланс
	
	
	//!!! проверки =================
	Если не Отказ и не ЭтотОбъект.ОбменДанными.Загрузка Тогда
		
		//15.05.2017 проверка св.остатка ТОЛЬКО если заказ проверен, т.е. [v] К отгрузке
		Если ЭтотОбъект.Проверен и ЭтотОбъект.Проведен 
		//17.11.2017 - ТУТ ВСЕГДА!	и не мПроведениеИзФормы 
			тогда  
			ТаблПоставщиков = неопределено;
			ПроверитьРезервы(ЭтотОбъект, Отказ, ТаблПоставщиков); //проверка св.остатка 
		КонецЕсли;
		
		Если Отказ Тогда 
			Возврат; 
		КонецЕсли;
		
		//01.09.2016 - надо проверять ТОЛЬКО на Клиенте... Предупреждение на Сервере всё равно никто не смотрит!		
		#Если Клиент Тогда
			// Проверка превышения срока оплаты с даты отгрузки
			ПроверитьСрокОплаты(ЭтотОбъект, Отказ);
			Отказ1 = Отказ; 
			
			//из-за этих проверок - возникает ошибка блокировки данных (20 сек ожидание!)
			Если Найти(сокрЛП(ПараметрыСеанса.ТекущийПользователь.код),"Робот (")=0 Тогда
				Если не Отказ1 Тогда	//14.11.2016 --- проверяем 1 раз
					ПроверитьПревышениеОбщегоЛимитаДЗСУчетомЗаказа(ЭтотОбъект, Отказ1);
				КонецЕсли;
				Если не ЭтоНовый() и не Отказ1 Тогда
					Если яштРезервыПоТоварам.ЕстьРезервПоЗаказу(ссылка)  // и Отказ1 
						Тогда		
						СообщитьОбОшибке("  ПО ЗАКАЗУ "+строка(Номер)+" - УЖЕ ИДЕТ ОТГРУЗКА!", Отказ1, "!!! ВНИМАНИЕ !!!");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;//не робот
			
			//15.05.2017 - только на клиенте и только для Ярославля и только если есть крышки!
			Отказ2 = ложь;
			Если не Отказ1 
				и Подразделение.ОбособленноеПодразделение = ЛОЖЬ
				и этотобъект.Крышки.Количество()>0 тогда
				ПроверитьОстаткиПоКрышкам(Ссылка, Отказ2);  // проверяются только остатки на Ярославле, т.к. крышки не резервируются
			КонецЕсли;
			
			//***2015.10.01 Заказы из Store не проверяем
			Отказ3 = ложь;
			ПроверитьНаДистрибьютера(ЭтотОбъект, Отказ3);//Если есть дистрибьютер в регионе по производителю
			
			//МОЖНО проделивать!
			//Отказ =	Отказ1 или Отказ2 или Отказ3;
			//Если Отказ Тогда 
			//	Возврат; 
			//КонецЕсли;
		#КонецЕсли
		
	КонецЕсли; 
	//====================================================================================================
	
	// Получим необходимые данные Для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"                , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                       , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("Цена"                        , "Цена");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"            , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"        , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ПроцентАвтоматическихСкидок" , "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("УсловиеАвтоматическойСкидки" , "УсловиеАвтоматическойСкидки");
	СтруктураПолей.Вставить("ЗначениеУсловияАвтоматическойСкидки" , "ЗначениеУсловияАвтоматическойСкидки");
	СтруктураПолей.Вставить("Сумма"                       , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                   , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                         , "СуммаНДС");
	СтруктураПолей.Вставить("НомерСтроки"                 , "НомерСтроки");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"  , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("Размещение"                  , "Размещение");
	СтруктураПолей.Вставить("ВидСкладаРазмещения"         , "Размещение.ВидСклада");
	
	//+++ 30.06.2014 - как и в Заказе поставщика - статус=Отменен  НЕ учитывается при движениях, но только по Размещению!
	//+++ 30.06.2014
	Если константы.ИспользоватьОстаткиСтороннихПоставщиков.Получить() 
		и НЕ Поставщик.пустая() Тогда // 13.08.2015 только Если есть поставщик!
		СтруктураПолей.Вставить("Статус"         			   , "Статус");
	КонецЕсли;
	
	РезультатЗапросаПоТоварам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	
	// Подготовим таблицу товаров Для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	// Проверим допустимость Для пользователя цен документа
	ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Услуги", Отказ);
	
	// Получим необходимые данные Для проведения и проверки заполенения данные по табличной части "Услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Содержание"                , "Содержание");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"      , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
	СтруктураПолей.Вставить("НомерСтроки"               , "НомерСтроки");
	
	РезультатЗапросаПоУслугам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);
	
	// Подготовим таблицу товаров Для проведения.
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);
	
	// Получим необходимые данные Для проведения и проверки заполенения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("НомерСтроки"               , "НомерСтроки");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");
	СтруктураПолей.Вставить("Размещение"                , "Размещение");
	СтруктураПолей.Вставить("ВидСкладаРазмещения"       , "Размещение.ВидСклада");
	
	РезультатЗапросаПоТаре = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);
	
	// Подготовим таблицу тары Для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);
	
	// Проверить заполнение ТЧ "Товары" и "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, 
		ТаблицаПоТаре, Отказ, Заголовок);
		// миронычев
		Если ТипЗаказа = 10 или TerminalОтгрузкаТранспортнойКомпанией Тогда 
			ЗаписатьРегистрСтатусов(ЭтотОбъект.Ссылка, , Перечисления.СостояниеЗаказовИМ.Создан);
		КонецЕсли;
		
		//07.11.2016 - движение по ТоварыВОжиданииОтПоставщика
		Если Константы.ИспользоватьДележкуЗаказовВМинус.Получить() тогда 
			Если ТаблПоставщиков<>неопределено Тогда
				
				Если ТаблПоставщиков.Количество()=0 Тогда //+++ 01.12.2016 обратное действие!
					//меняем статус заказа назад, если его не успели подтвердить!
					Статус0 = Статус;
					Если Статус = перечисления.Статусызаказов.Новый 
						или Статус = перечисления.Статусызаказов.ПодтвержденПокупателем
						или Статус = перечисления.СтатусыЗаказов.ВОбработке тогда    //10.01.2016 перестал быть в обработке, когда товар "упал" в св.остаток
						Статус = перечисления.Статусызаказов.ПустаяСсылка();
						Поставщик = справочники.Контрагенты.ПустаяСсылка();
						
						// 21.03.2017	
						// в ожидании нет ничего... а он всё еще подтвержден или частично получен...
					ИначеЕсли Статус = перечисления.Статусызаказов.Подтвержден 
						или Статус = перечисления.Статусызаказов.ПолученЧастично тогда 
						Статус=перечисления.СтатусыЗаказов.Получен; //получен товар полностью!
						
					//06.04.2017 - убираем статусы после объединения!	
					ИначеЕсли этотОбъект.ТипЗаказа = 6 ИЛИ этотОбъект.ТипЗаказа = 7 тогда
						Статус = перечисления.Статусызаказов.ПустаяСсылка();
						Поставщик = справочники.Контрагенты.ПустаяСсылка();
					КонецЕсли; 
					
					Если Статус0 <> Статус тогда
						ЭтотОбъект.Записать(); // 20.12.2016
					КонецЕсли;
				КонецЕсли;
				
				Если ТаблПоставщиков.Количество()>0  // Есть товары под заказ (стороннему поставщику)
					
					ТОГДА	
					
					//+++ 06.04.2017 - если уже товар Доставлен клиенту - никаких движений НЕЛЬЗЯ ДЕЛАТЬ!	
					Если Статус=перечисления.СтатусыЗаказов.Доставлен
						или Статус=перечисления.СтатусыЗаказов.Получен тогда //УЖЕ ПОЛУЧЕН ПОЛНОСТЬЮ!
						//Статус=перечисления.СтатусыЗаказов.ПолученЧастично;
						ВОЗВРАТ; // делать движения в ожидании УЖЕ ПОЗДНО!
					КонецЕсли;	
					
					//+++ 06.04.2017 - объединенные заказы нельзя делать в ожидании!!!
					Если этотОбъект.ТипЗаказа = 6 ИЛИ этотОбъект.ТипЗаказа = 7 тогда // товара недостаточно... но заказывать у стор.поставщика нельзя уже!
						#Если Клиент тогда
							Сообщить("Объедиенный заказ должен проводиться ТОЛЬКО по товару, который есть в наличие!", СтатусСообщения.ОченьВажное);
						#КонецЕсли	
						
						//06.04.2017
						// нельзя никому проводить объединенный заказ и ставить его в ожидание от поставщика!
						ОТКАЗ = ИСТИНА;
						ВОЗВРАТ; // делать движения НЕЛЬЗЯ!
						
					КонецЕсли;	
					
					ДатаОтгрузки0 = ДатаОтгрузки;
					ДатаОплаты0   = ДатаОплаты;	 
					
					//===================================изменение статуса заказа============================================
					
					//16.01.2017 сначала блокировка, а потом чистка!
					Блокировка = новый БлокировкаДанных;  
					ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ТоварыВОжиданииОтПоставщика");
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
					ЭлементБлокировки.ИсточникДанных = ТаблПоставщиков;
					ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
					Блокировка.Заблокировать();
					
					наборДвижений = Движения.ТоварыВОжиданииОтПоставщика;
					наборДвижений.Записывать = Истина;	
					НаборДвижений.Очистить();		
					
					Статус0 = Статус;
					Если Статус = перечисления.Статусызаказов.ПустаяСсылка()
						или Статус = перечисления.Статусызаказов.Новый 
						или Статус = перечисления.Статусызаказов.ПодтвержденПокупателем 
						или Статус = перечисления.СтатусыЗаказов.ВОбработке //11.04.2017 повторное заполнение... проверяем поставщика
						Тогда
						Статус = перечисления.СтатусыЗаказов.ВОбработке; //-------- авто-согласование менеджерами, сразу в 16 статус
						//+++ поставщик должен быть обязательно!
						Если Поставщик.Пустая() Тогда // первый попавшийся
							Поставщик = ТаблПоставщиков[0].Поставщик;
						КонецЕсли;	
					КонецЕсли;
					
					//переход статуса только вперед...
					Если Статус = перечисления.Статусызаказов.ПустаяСсылка()
						или Статус = перечисления.Статусызаказов.Новый 
						или Статус = перечисления.Статусызаказов.ПодтвержденПокупателем 
						
						или Статус = перечисления.Статусызаказов.ВОбработке //17.01.2017
						
						Тогда
						
						//+++ 17.01.2017 Без Точек - согласование делается вручную!  - это только на Клиенте, когда менеджер руками создаёт заказ
						#Если Клиент тогда
							Если КолТочекКлиента(ЭтотОбъект.Контрагент)=0 тогда 
								текст1 = "У клиента - НЕТ ни одной точки в Терминале! Поставщик не сможет подтвердить заказ "+строка(ЭтотОбъект.Номер)+" !";
								сообщить(текст1, СтатусСообщения.Внимание);
							КонецЕсли;
							
							//+++ 11.01.2016 - всплывашка... напоминалка/ОТКАЗ!  - ТОЛЬКО на Клиенте при ручном вводе !!!
							//#КонецЕсли	
							//#Если Клиент тогда
							ТаблПоставщиков1=ТаблПоставщиков.скопировать();
							ТаблПоставщиков1.Свернуть("Поставщик");
							флКол = ( ТаблПоставщиков.Итог("Количество")<>Товары.Итог("Количество") );
							Если ТаблПоставщиков1.Количество()>1 или флКол тогда
								
								//02.02.2017 --- определение какой товар есть
								текст11 = "";
								если флКол тогда
									для каждого стр1 из Товары цикл
										стр2 = ТаблПоставщиков.найти(стр1.Номенклатура, "Номенклатура");
										если стр2 = неопределено тогда
											текст11 = текст11+" "+строка(стр1.Номенклатура.Код)+" - "+строка(стр1.Количество)+"шт.;";
										иначеЕсли стр2.Количество<стр1.Количество тогда
											текст11 = текст11+" "+строка(стр1.Номенклатура.Код)+" - "+строка(стр1.Количество - стр2.Количество)+"шт.;";
										КонецЕсли;
									КонецЦикла;	
								КонецЕсли;
								текст1 = "В заказе "+ЭтотОбъект.Номер+" выбраны товары"
								+?( флКол, ", часть из которых есть на складах ("+
								строка(Товары.Итог("Количество")-ТаблПоставщиков.Итог("Количество"))+"шт.): "+текст11,
								", которые есть у "+строка(ТаблПоставщиков1.Количество())+" сторонних поставщиков!")+"
								| !!! Заказ не может быть проведен !!!
								|Нажмите на кнопку [Разбить по наличию] для разделения Заказа!";
								
								//02.02.2017 - запрет для всех! 
								Отказ = ИСТИНА 
								И НЕ ( РольДоступна("ПравоЗавершенияРаботыПользователей") ) // кроме IT-отдела!
								;  
								
								Если Отказ тогда // для менеджеров (или бух. из филиалов) - выдаст ещё и Предупреждение на пол-экрана!
									сообщить(текст1, СтатусСообщения.ОченьВажное); // для остальных - выдаёт сообщение!
									//06.04.2017 - никому из поставщиков - заказ не может уходить !!!
									Статус    = Перечисления.СтатусыЗаказов.ПустаяСсылка();
									Поставщик = справочники.Контрагенты.ПустаяСсылка();
									Возврат;  //никаких движений делать не надо вообще!
								Иначе
									сообщить(текст1, СтатусСообщения.ОченьВажное); // для остальных - выдаёт сообщение!
								КонецЕсли;	
								
							КонецЕсли;
						#КонецЕсли
						
						//===================================Сразу Отправить @ письмо поставщику=======================================
						//+++ 17.01.2017 - отправка идёт независимо от желания менеджера - первому И ЕДИНСТВЕННОМУ поставщику!?
						Если ТаблПоставщиков.Количество()=1 тогда
							Поставщик1 = ТаблПоставщиков[0].Поставщик;//точно есть - берем 1-го
							регСв = РегистрыСведений.СрокиДоставки.Получить( новый Структура("Поставщик, ОТХ", Поставщик1, ЛОЖЬ) );
							
							Если регСв.ОтправлятьЗаказыПоставщику  
								//	и Статус<>Ссылка.Статус // при изменении статуса 
								и Найти(ЭтотОбъект.Комментарий,"@")=0 Тогда //чтобы повторно НЕ отправлять!
								
								резОтправки = ОтправитьУведомлениеПоЭлПочтеПоставщику(Поставщик1); // на @ поставщика !
								
								//можно обработать резОтправки 
								#Если Клиент тогда
									Если резОтправки Тогда
										ЭтотОбъект.Комментарий = "@"+ЭтотОбъект.Комментарий;
										ЭтотОбъект.Записать();
									Иначе
										Сообщить("НЕ отправлено @ письмо поставщику!", СтатусСообщения.Внимание);
									КонецЕсли;
								#КонецЕсли						
								
							КонецЕсли;//@
						КонецЕсли;//ТаблПоставщиков
						
					КонецЕсли;//	
					
					//07.06.2017 - ТОЛЬКО если заказ подтвержден поставщиком - делается движение по Товарам в ожидании ----------------------------
					Если ЭтотОбъект.Статус = перечисления.Статусызаказов.Подтвержден и ЭтотОбъект.Проверен тогда//+++ 17.07.2017
						Для каждого стр1 из ТаблПоставщиков Цикл
							
							// 20.02.2017 для "резервного" заказа - делаем отгрузку от текущей даты!
							Если ДатаОтгрузки='00010101' тогда  //!!! для пустой даты... берём текущую дату + число дней доставки от поставщика
								ДатаОтгрузки = НачалоДня(ТекущаяДата()) + стр1.СрокДоставки*86400;
								Поставщик = стр1.Поставщик; // 11.04.2017
								Резерв = ЛОЖЬ;
								Комментарий = "Заказ покупателя 'Под заказ' не может быть Резервным!  Минимальная Дата отгрузки: "+ формат(ДатаОтгрузки,"ДЛФ=D")+" # " + Комментарий;
								#Если Клиент тогда
									сообщить("Установлена Минимальная Дата отгрузки: "+формат(ДатаОтгрузки,"ДЛФ=D")+" с учетом доставки от Поставщика по Заказу "+строка(ЭтотОбъект.Номер), СтатусСообщения.Информация);
								#КонецЕсли	
							КонецЕсли;
							
							//двигаем ТОЛЬКО вперед по максимальному сроку доставки!
							Если ДатаОтгрузки < НачалоДня(Дата) + стр1.СрокДоставки*86400 Тогда
								ДатаОтгрузки = НачалоДня(Дата) + стр1.СрокДоставки*86400;
								Поставщик = стр1.Поставщик; // самый "последний"
								Если ДатаОплаты<ДатаОтгрузки + ЧислоДнейСМоментаОтгрузки Тогда
									ДатаОплаты = ДатаОтгрузки + ЧислоДнейСМоментаОтгрузки;
								КонецЕсли;
							КонецЕсли;   
							
							//20.02.2017 -- ТОЛЬКО При дележке заказа - делается движение!
							стр2 = НаборДвижений.Добавить();
							ЗаполнитьЗначенияСвойств( стр2, стр1 );
							стр2.ЗаказПокупателя = Ссылка;
							стр2.Период = ЭтотОбъект.Дата;
						КонецЦикла;
					КонецЕсли;
					
					////------------------СОЗДАЁМ Заказы поставщикам при "включении" подтверждения--------------------
					нетЗаказов = истина;
					для каждого стр23 из товары цикл
						если ЗначениеЗаполнено(стр23.Размещение) тогда //20.12.2016
							нетЗаказов = ложь;
							прервать;
						КонецЕсли;	
					КонецЦикла;
					
					//+++ 06.04.2017 - один раз перезапишем этот заказ!?
					Если ДатаОтгрузки0 <> ДатаОтгрузки 
						или ДатаОплаты0 <> ДатаОплаты 
						или Статус0 <> Статус тогда //один раз перезаписываем ТОЛЬКО при изменении!   15.06.2017 <>
						ЭтотОбъект.Записать(); 
					КонецЕсли;
					
					
					Если нетЗаказов	И Статус = перечисления.СтатусыЗаказов.Подтвержден Тогда //19.12.2016 если подтвержден поставщиком и есть остатки сторонних поставщиков....
						
						ТаблПоставщиков.сортировать("Поставщик");
						Табл1 = ТаблПоставщиков.скопировать(,"Поставщик");
						Табл1.свернуть("Поставщик");
						Для каждого пост1 из табл1 Цикл  //по каждому поставщику - своя задача! только на его товар!
							закПост = создатьЗаказСтороннемуПоставщику(пост1.Поставщик); 
							
							Для каждого стр1 из ТаблПоставщиков Цикл
								Если стр1.Поставщик <> пост1.Поставщик Тогда
									Продолжить;
								КонецЕсли;
								стр2 = закПост.Товары.Добавить();
								стрЗакПок = Товары.Найти( стр1.Номенклатура, "Номенклатура");
								ЗаполнитьЗначенияСвойств(стр2, стрЗакПок);
								стр2.Количество = стр1.Количество;
								стр2.КоличествоМест = стр1.Количество;
							КонецЦикла;//по товарам
							
							//10.01.2016 - или так или иначе ========цена Закупочная, ЦеныПоставщиков или Закупочная поставщика =====================	
							запрос1 = новый Запрос;
							запрос1.Текст = "ВЫБРАТЬ
							|	Цены.Номенклатура.Код КАК Код,
							|	Цены.Номенклатура КАК Номенклатура,
							|	Цены.Цена КАК Цена,
							|	Цены.ТипЦенКонтрагента,
							|	Цены.типЦены КАК типЦены
							|ИЗ
							|	(ВЫБРАТЬ
							|		ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
							|		ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
							|		ЗНАЧЕНИЕ(справочник.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка) КАК ТипЦенКонтрагента,
							|		""3.Закупочная"" КАК типЦены
							|	ИЗ
							|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
							|				,
							|				ТипЦен = &Закупочная
							|					И Номенклатура В (&СписНом)) КАК ЦеныНоменклатурыСрезПоследних
							|	ГДЕ
							|		ЦеныНоменклатурыСрезПоследних.Цена > 0
							|	
							|	ОБЪЕДИНИТЬ ВСЕ
							|	
							|	ВЫБРАТЬ
							|		ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура,
							|		ЦеныНоменклатурыКонтрагентовСрезПоследних.Цена,
							|		ЦеныНоменклатурыКонтрагентовСрезПоследних.ТипЦен,
							|		""1.ЗакупочнаяПоставщика""
							|	ИЗ
							|		РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
							|				,
							|				ТипЦен.ТипЦеныНоменклатуры = &Закупочная
							|					И Номенклатура В (&СписНом)
							|					И ТипЦен.Владелец = &Поставщик) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
							|	ГДЕ
							|		ЦеныНоменклатурыКонтрагентовСрезПоследних.Цена > 0
							|	
							|	ОБЪЕДИНИТЬ ВСЕ
							|	
							|	ВЫБРАТЬ
							|		ЦеныНоменклатурыПоставщиков.Номенклатура,
							|		ЦеныНоменклатурыПоставщиков.Цена,
							|		ЗНАЧЕНИЕ(справочник.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка),
							|		""2.Поставщика""
							|	ИЗ
							|		РегистрСведений.ЦеныНоменклатурыПоставщиков КАК ЦеныНоменклатурыПоставщиков
							|	ГДЕ
							|		ЦеныНоменклатурыПоставщиков.Контрагент = &Поставщик
							|		И ЦеныНоменклатурыПоставщиков.Номенклатура В(&СписНом)
							|		И ЦеныНоменклатурыПоставщиков.Цена > 0) КАК Цены
							|
							|УПОРЯДОЧИТЬ ПО
							|	Код,
							|	Цена,
							|	типЦены
							|АВТОУПОРЯДОЧИВАНИЕ";
							
							Запрос1.УстановитьПараметр("Поставщик",пост1.Поставщик);
							
							Запрос1.УстановитьПараметр("Закупочная",справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00001") ); //Закупочная цена (устанавливается вручную!)
							Запрос1.УстановитьПараметр("Контрагент", пост1.Поставщик);
							Запрос1.УстановитьПараметр("СписНом", закПост.Товары.выгрузитьКолонку("Номенклатура"));
							цены = запрос1.Выполнить().выгрузить();
							
							//10.01.2016
							ТипЦенПоставщика = справочники.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка();
							
							Для каждого стр2 из закПост.Товары Цикл
								стр1 = цены.найти(стр2.Номенклатура, "Номенклатура");  //первый попавшийся с минимальной ценой и, если есть, то в 1-ю очередь с Типом Цены клиента!
								
								Если стр1=неопределено Тогда
									#Если Клиент Тогда
										Сообщить(строка( стр2.Номенклатура.Код )+" "+строка( стр2.Номенклатура )+" - нет Закупочной цены! В Заказе поставщику установлена Цена = 1р. !", СтатусСообщения.Внимание);
									#КонецЕсли
									
									стр2.Цена = 1;  //13.01.2017
									ТипЦенПоставщика = справочники.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка();
									
								Иначе
									
									Если ТипЦенПоставщика.Пустая() тогда // тип цен в Заказе поставщика - по первому (по коду) товару
										ТипЦенПоставщика = стр1.ТипЦенКонтрагента;
									КонецЕсли;
									
									стр2.Цена = стр1.Цена;
									
								КонецЕсли;
								
								стр2.Сумма = стр2.Цена * стр2.Количество;
								
								//стр2.СтавкаНДС = перечисления.СтавкиНДС.НДС18;
								//стр2.СуммаНДС = стр2.Сумма * 18/118;
								если закПост.УчитыватьНДС тогда
									Если закПост.СуммаВключаетНДС тогда
										если стр2.СтавкаНДС = перечисления.СтавкиНДС.НДС18
											или стр2.СтавкаНДС = перечисления.СтавкиНДС.НДС18_118 тогда
											стр2.СуммаНДС   = Окр(стр2.Сумма*18/118, 2); //до копеек
										КонецЕсли;
									Иначе// НДС сверху
										если стр2.СтавкаНДС = перечисления.СтавкиНДС.НДС18
											или стр2.СтавкаНДС = перечисления.СтавкиНДС.НДС18_118 тогда
											стр2.СуммаНДС   = Окр(стр2.Сумма*18/100, 2); //до копеек
										КонецЕсли;
									КонецЕсли;	
								иначе
									стр2.СуммаНДС = 0;
								КонецЕсли;	
								
								
								//			стр2.ЗаказПокупателя = ссылка; // ссылка на этот заказ покупателя (делает движение в "Размещение заказов")
							КонецЦикла;
							//=======================================================
							попытка 
								закПост.ТипЦен = ТипЦенПоставщика;
								закПост.ПометкаУдаления = ЛОЖЬ;//17.01.2016
								Если СокрЛП(закПост.Контрагент.Код) = "00379" тогда   //+++18.08.2017 - по задаче "Авторусь терминал"
									закПост.Записать();
								Иначе	
									закПост.Записать(РежимЗаписиДокумента.Проведение);//20.12.2016 - сразу проводим
								КонецЕсли;
								
								#Если Клиент Тогда
									сообщить("Создан и проведен "+строка(закПост), СтатусСообщения.Информация);
								#КонецЕсли	
								флДа = истина;
							Исключение
								флДа = ЛОЖЬ;
								ЗакПост=неопределено;
								#Если Клиент Тогда
									сообщить("Ошибка при записи заказа поставщику № "+строка(закПост)+":"+ОписаниеОшибки(), СтатусСообщения.Внимание);
								#КонецЕсли
							КонецПопытки;	
							
							//=================связь заказа поставщика с этим заказом (в 1 сторону!)=====================================
							Если флДа тогда
								для каждого стр1 из закПост.Товары цикл
									стр2 = ЭтотОбъект.Товары.Найти(стр1.Номенклатура, "Номенклатура");
									если стр2<>неопределено тогда
										стр2.Размещение = закПост.ссылка; // для структуры подчиненности
									КонецЕсли;	
								КонецЦикла;	
								ЭтотОбъект.Записать();  //без повторного перепроведения
							КонецЕсли;
							
							//------Создание задачи-----21.11.2016-----------------------------------------------------------------------------------------	
							//#Если Клиент тогда
							//		задача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
							//		задача.Наименование   = "Утвердите Заказ стороннему поставщику: "+строка(пост1.Поставщик);
							//		задача.НаСогласование = Истина;
							//		задача.Дата = ТекущаяДата();
							//		задача.ДатаИсполнения = КонецДня(ТекущаяДата());
							//		задача.Оповещение = истина;
							//		задача.СрокОповещения = ТекущаяДата();
							//		
							//		задача.Исполнитель = пост1.Поставщик.ОсновнойМенеджерКонтрагента;
							//		задача.Постановщик = ПараметрыСеанса.ТекущийПользователь; //глТекущийПользователь;
							//		задача.Инициатор   = ДоговорКонтрагента.ОтветственноеЛицо; // кому придёт обратное уведомление
							//		
							//		задача.РеквизитДляСогласования = "Проведен";
							//		задача.ЗначениеРеквизитаДляСогласования = Истина;
							//		
							//		задача.Описание = "по согласованному с покупетелем документу: "+строка(ссылка)+"
							//						   |создан "+строка(закПост) +"
							//						   |Утвердите заказ поставщику на доставку товара, которого нет в наличие";
							//		задача.Объект = закПост.ссылка; // этот Заказ
							//		задача.Товары.Загрузить( закПост.Товары.Выгрузить() );
							//		попытка
							//			задача.Записать();
							//			сообщить("Создана задача для согласования с менеджером по закупкам: "+строка(задача.Исполнитель) , СтатусСообщения.Информация);
							//		исключение
							//				сообщить("Ошибка при создании задачи для согласования с менеджером по закупкам: "+строка(задача.Исполнитель)+"
							//				|"+ОписаниеОшибки(), СтатусСообщения.Внимание);
							//		КонецПопытки;
							//#КонецЕсли				
							
						КонецЦикла;//по поставщикам=================================
						
						
					КонецЕсли; //статус
					
				КонецЕсли;	//есть движение по поставщикам
				
			КонецЕсли;//Если ТаблПоставщиков<>неопределено 
			
		КонецЕсли; //Константы.ИспользоватьДележкуЗаказовВМинус
		
	КонецЕсли; //НЕ Отказ
	
	//Миронычев
	Если  Не  Отказ Тогда 
		Если ТипЗаказа = 10 или TerminalОтгрузкаТранспортнойКомпанией Тогда 
			ЗаписатьРегистрСтатусов(ЭтотОбъект.Ссылка, , Перечисления.СостояниеЗаказовИМ.Создан);
		ИначеЕсли ТипЗаказа = 6  или ТипЗаказа = 7 Тогда
			Для каждого стр из ЭтотОбъект.Заказы Цикл
				Если Стр.ЗаказПокупателя.ТипЗаказа = 10 или TerminalОтгрузкаТранспортнойКомпанией тогда
					ЗаписатьРегистрСтатусов(Стр.ЗаказПокупателя, ЭтотОбъект.Ссылка, Перечисления.СостояниеЗаказовИМ.Объединен);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	//КонецМиронычев
	
КонецПроцедуры // ОбработкаПроведения()

//02.02.2017
функция КолТочекКлиента(кл1)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Точки.Ссылка) КАК КолТочек
	|ИЗ
	|	Справочник.Точки КАК Точки
	|ГДЕ
	|	Точки.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", кл1 );
	рез = 0;
	Результат = Запрос.Выполнить();
	выборка = результат.Выбрать();
	Если выборка.Следующий() тогда
		рез = выборка.КолТочек;
	КонецЕсли;
	возврат рез;
КонецФункции	

//====================Общие методы для всех поставщиков=====================================
функция ОтправитьУведомлениеПоЭлПочтеПоставщику(Поставщик1) 
	рез = ложь;
	//РеальныйАдресОтправки = Константы.НовЛайнЯщикДляПрайсов.Получить();
	РеальныйАдресОтправки = "no-reply@yst76.ru";
	АдресОтветаПоУмолчанию = РеальныйАдресОтправки; //19.12.2016 - адреса должны быть одинаковые
	
	попытка
		КаталогВременныхФайлов = КаталогВременныхФайлов();
		
		УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию(РеальныйАдресОтправки);
		ДобТел="";
		Тема = "Заказ № "+ ЭтотОбъект.Номер+" от "+формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
		ТекстСообщения = "Добрый день,
		|
		|Проверьте статус Заказа покупателя № "+ ЭтотОбъект.Номер+" от "+формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy")+"
		|
		|в системе Терминал http://terminal.yst.ru
		|
		|C Уважением, 
		|"+строка(Поставщик1.ОсновнойМенеджерКонтрагента)+",
		|ЗАО ТК ""Яршинторг"", www.yst.ru
		|(4852)200-200"+ ?(ДобТел="","",ДобТел);
		
		АдресПолучателя = ОпределитьАдресПолучателя(Поставщик1); //модуль ЭлектроннаяПочта.
		АдресМенеджера  = ОпределитьАдресПолучателя(Поставщик1.ОсновнойМенеджерКонтрагента); 
		АдресМенеджера = ?(АдресМенеджера="", АдресОтветаПоУмолчанию, АдресМенеджера);
		
		Если ЗначениеЗаполнено(АдресПолучателя) Тогда
			
			//ИмяФайлаСообщенияСчет   = "Счет N "+ЗакПоставщику.Номер+" от "+формат(ЗакПоставщику.Дата,"ДЛФ=DD")+"XLS";
			// ТабличныйДокументОбъект = ЗакПоставщику.ПечатьСчетаЗаказа("",Истина);
			//ТабличныйДокументОбъект.Записать(КаталогВременныхФайлов + ИмяФайлаСообщенияСчет, ТипФайлаТабличногоДокумента.XLS);
			
			СписокФайловВложений = новый СписокЗначений;
			//СписокФайловВложений.Добавить(КаталогВременныхФайлов+ИмяФайлаСообщенияСчет);
			
			яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресПолучателя,СписокФайловВложений, УЗ, ТекстСообщения, Тема, АдресМенеджера);
			
		КонецЕсли;
		рез = истина;
		
	Исключение
		#Если Клиент тогда
			сообщить("Ошибка при отправке письма поставщику: "+строка(Поставщик1)+" по документу: "+строка(ЭтотОбъект)+" : "+ ОписаниеОшибки(), СтатусСообщения.Внимание );
		#КонецЕсли
	КонецПопытки;
	
	возврат рез;
КонецФункции


//14.11.2016
функция создатьЗаказСтороннемуПоставщику(НовЛайн)
	
	регСвСроки = РегистрыСведений.СрокиДоставки.Получить(новый Структура("Поставщик, ОТХ",НовЛайн, ЛОЖЬ));
	
	ЗакПост = неопределено;
	Если регСвСроки.ОдинЗаказПоставщикуВДень Тогда   //возможно последующее объединение заказов ПОСТАВЩИКОВ (с перекрестным изменением размещения!)
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказПоставщику.Ссылка
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|ГДЕ
		|	ЗаказПоставщику.Дата = &Дата
		|	И НЕ ЗаказПоставщику.Проведен
		|	И ЗаказПоставщику.Контрагент = &Контрагент
		//         |	И ЗаказПоставщику.Комментарий ПОДОБНО &Комментарий
		|";
		
		Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДата()) );
		Запрос.УстановитьПараметр("Контрагент", НовЛайн );
		// Запрос.УстановитьПараметр("Комментарий", "%АвтоФормирование %" );
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			ЗакПост = Выборка.ссылка.ПолучитьОбъект();	
			ЗакПост.Комментарий = "#Заказ покупателя № "+строка(Номер)+" ("+строка(Контрагент)+"); "+ЗакПост.Комментарий;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ регСвСроки.ОдинЗаказПоставщикуВДень или ЗакПост = неопределено Тогда   //	====================
		
		ЗакПост = документы.ЗаказПоставщику.СоздатьДокумент();
		ЗакПост.Дата 			 = НачалоДня(ТекущаяДата());     		     // тут специально так!
		ЗакПост.ДатаПоступления = НачалоДня(ТекущаяДата())+регСвСроки.СрокДоставки*86400;  // 3 дня на доставку МАКСИМУМ
		ЗакПост.ДатаОплаты      = ТекущаяДата() + (14+регСвСроки.СрокДоставки)*86400; // оплата через 14 дней после доставки, не раньше
		
		ЗакПост.Организация = справочники.Организации.НайтиПоКоду("00001");
		ЗакПост.Контрагент  = НовЛайн;
		ЗакПост.ДоговорКонтрагента = ?(НовЛайн.ОсновнойДоговорПоставки.Пустая(), НовЛайн.ОсновнойДоговорКонтрагента, НовЛайн.ОсновнойДоговорПоставки); // с поставщиком ?!
		
		ЗакПост.Подразделение = ЭтотОбъект.Подразделение;
		ЗакПост.Транзит	   = ЭтотОбъект.Подразделение.ОбособленноеПодразделение;
		ЗакПост.Склад = ЭтотОбъект.Подразделение.Склад;
		
		ЗакПост.ВалютаДокумента = справочники.Валюты.НайтиПоКоду(643);
		ЗакПост.КратностьВзаиморасчетов = 1;
		ЗакПост.КурсВзаиморасчетов = 1;
		
		ЗакПост.УчитыватьНДС     = истина;
		ЗакПост.СуммаВключаетНДС = истина;
		
		//+++ 10.12.2014
		глТекущийПользователь = справочники.Пользователи.НайтиПоКоду("Робот (магазин)");
		ЗакПост.Ответственный = глТекущийПользователь;
		
		ЗакПост.ВремяНапоминания = ТекущаяДата(); // напомнить менеджеру по закупкам
		//21.11.2016 --- через Задачу ---	 ЗакПост.НапомнитьОСобытии = Истина;
		
		ЗакПост.Комментарий = "#Заказ покупателя № "+строка(Номер)+" ("+строка(Контрагент)+"); ";
		
		ЗакПост.Ссайта = регСвСроки.ОтправлятьЗаказыПоставщику; //отправляется через сайт или по Почте!
		
		попытка
			закПост.Записать(); //--------------------просто создаётся без товаров сначала----------------
			#Если Клиент  Тогда
				сообщить("Создан заказ поставщику: " + строка(НовЛайн)+" №: "+строка(закПост.Номер), СтатусСообщения.Информация );
			#КонецЕсли	 
		исключение
			#Если Клиент  Тогда
				сообщить("При записи заказа поставщику: " + строка(НовЛайн)+" Возникла Ошибка: "+ОписаниеОшибки(), СтатусСообщения.Внимание );
			#КонецЕсли	 
		КонецПопытки;
		
	КонецЕсли;	 
	
	возврат закПост; //возвращаем объект
	
КонецФункции


Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если яштПоЗаказуБылиОтгрузки(Ссылка) Тогда
		
		#Если Клиент Тогда
			Сообщить("По заказу уже были отгрузки, корректировки или закрытие! Отменить проведение - нельзя!", СтатусСообщения.Внимание);
		#КонецЕсли
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	//+++ 09.11.2016 - через web-сервис (на сервере) или com-соединение НЕ проверяем!
	//а на клиенте должна быть проверка... 
	#Если Клиент Тогда
		Если НЕ РольДоступна("ПолныеПрава") Тогда // бухгалтерия или Серков/Горохов может!!!
			
			//***	 не работают web-сервисы! глТекущийПользователь - Выдавало ошибку.	
			Если НЕ ( Контрагент.ОсновнойМенеджерКонтрагента = ПараметрыСеанса.ТекущийПользователь 
				ИЛИ ДоговорКонтрагента.ОтветственноеЛицо = ПараметрыСеанса.ТекущийПользователь
				
				//26.08.2016 - можно менять чужие!
				ИЛИ ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "РазрешитьРедактированиеЧужихДокументов") 
				
				//Для заказов филиалов - любой старший менеджер - может объединять заказы!
				ИЛИ ( Подразделение.ОбособленноеПодразделение И ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "СтаршийМенеджерПодразделения") )
				
				) Тогда
				
				Сообщить("Вы не имеете права отменить проведение чужого заказа! 
				| Обратитесь к менеджеру договора: "+строка(Контрагент.ОсновнойМенеджерКонтрагента), СтатусСообщения.Внимание);
				
				Отказ=Истина; 
			КонецЕсли;	
			
		КонецЕсли;
	#КонецЕсли
	//миронычев
	Если  Не  Отказ Тогда 
		Если ТипЗаказа = 10 или TerminalОтгрузкаТранспортнойКомпанией Тогда 
			ЗаписатьРегистрСтатусов(ЭтотОбъект.Ссылка, , Перечисления.СостояниеЗаказовИМ.ОтмененИМ);
		ИначеЕсли ТипЗаказа = 6 или ТипЗаказа = 7 Тогда
			Для каждого стр из ЭтотОбъект.Заказы Цикл
				Если Стр.ЗаказПокупателя.ТипЗаказа = 10  или TerminalОтгрузкаТранспортнойКомпанией тогда
					ЗаписатьРегистрСтатусов(Стр.ЗаказПокупателя, ЭтотОбъект.Ссылка, Перечисления.СостояниеЗаказовИМ.ОтмененОбщий);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	//КонецМиронычев
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	
	//27.03.2017 - из формы - обязательно надо создавать задачи на согласование цен!
	Если мПроведениеИзФормы
		и таблСогл.Количество()>0 тогда
		
		ЗаполнитьЗадачиНаСогласование();	
		
	КонецЕсли;	
	
	//+++ 29.10.2015  как и в Реализации
	//    помещаем в обмен ВСЕ заказы Для всех клиентов Store и МиМ!
	//
	//было:	//Если Контрагент.ПриниматьЗаказыЧерезСайт и (не Отказ) 
	//	и (не ссылка.ССайта 
	//	   или ЭтотОбъект.ПометкаУдаления  //+++ 23.07.2013 при удалении не из формы - ИспользоватьПлановуюСебестоимость не меняется!
	//	   или ЭтотОбъект.ИспользоватьПлановуюСебестоимость) Тогда  
	//--------------------------------------------------------------------------
	//	Если не Отказ и не ЭтотОбъект.ОбменДанными.Загрузка Тогда
	Если не Отказ  Тогда
		Запрос1 = Новый Запрос;
		Запрос1.Текст = "ВЫБРАТЬ 
		|	Авторизация.Наименование КАК База,
		|	Авторизация.Логин,
		|	Авторизация.Пароль
		|ИЗ
		|	Справочник.Авторизация КАК Авторизация
		|ГДЕ
		|	Авторизация.Владелец = &Владелец";
		
		Запрос1.УстановитьПараметр("Владелец", ЭтотОбъект.Контрагент);
		Результат = Запрос1.Выполнить();
		Если не Результат.Пустой() Тогда //ДЛЯ ВСЕХ КЛИЕНТОВ STORE и TERMINAL
			Попытка
				ОбменСУТИнтернетМагазин.ВключитьРегистрациюОбъектаОИМ(ЭтотОбъект, Контрагент.ПриниматьЗаказыЧерезСайт ); //  по объекту
			Исключение
				#Если Клиент Тогда
					СообщитьОбОшибке("Заказ: "+строка(ссылка)+" не может быть добавлен в план обмена! "+ОписаниеОшибки() );
				#КонецЕсли	
			КонецПопытки;
		КонецЕсли;	
	КонецЕсли;
	Если ЭтоНовый() и ВалютаДокумента <> Константы.ВалютаРегламентированногоУчета.Получить() тогда
		ТекущийКурс = РегистрыСведений.КурсыВалютДляПоступления.СрезПоследних(Дата,Новый структура("Валюта",ВалютаДокумента));
		Если  ТекущийКурс.Количество()>0 Тогда
			КурсВзаиморасчетов  = ТекущийКурс[0].Курс-3;
			кратностьВзаиморасчетов = ТекущийКурс[0].Кратность;	
		конецЕсли;
	конецЕсли;
	
КонецПроцедуры //ПриЗаписи




//НЕ РАБОТАЕТ!  при проведении из формы!!!
процедура ПослеЗаписи()
	
	Если ЗначениеЗаполнено(Ссылка.Контрагент)
		и ссылка.Подразделение.Код="00005" и ссылка.ВводитьТолькоПеремещение Тогда // на перемещение с Ярославля на Контрагента филиал
		
		//+++ 17.11.2014 - по всем филиалам...
		списокФилиалов = яштПоставщики.ПолучитьМассивФилиалов();
		Категория1 = неопределено;
		Для i=1 по списокФилиалов.Количество()-1 Цикл // 0 - это Ярославль
			Если Ссылка.Контрагент = списокФилиалов[i].Контрагент Тогда
				Категория1 = Ссылка.Подразделение.КатегорияДляОтгрузкиИзЯрославля;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		
		Если Категория1 <> неопределено Тогда
			попытка
				//Категория1 = Справочники.КатегорииОбъектов.НайтиПоКоду(КодКат); 
				записьКатегории1 = РегистрыСведений.КатегорииОбъектов.Получить(новый Структура("Объект, Категория", ссылка, Категория1) );
				Если не ЗначениеЗаполнено(записьКатегории1) Тогда
					записьКатегории1 = РегистрыСведений.КатегорииОбъектов.СоздатьМенеджерЗаписи();
					записьКатегории1.Объект    = Ссылка;
					записьКатегории1.Категория = Категория1;
					записьКатегории1.Записать(истина);
				КонецЕсли;
				
				#Если Клиент Тогда
					сообщить("Автоматически установлена категория '"+строка(Категория1)+"' Для отгрузки по документу: "+строка(ЭтотОбъект), СтатусСообщения.Информация );
				#КонецЕсли
				
			исключение
				#Если Клиент Тогда
					сообщить("Не установлена категория документа "+строка(Категория1)+" Для расчета поездки! "+ОписаниеОшибки(), СтатусСообщения.Внимание);
				#КонецЕсли
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли; 
	
	//+++ 22.09.2015 - ПОСЛЕ проведения не из формы!
	Если НЕ мПроведениеИзФормы Тогда
		ЗаполнитьЗадачиНаСогласование();		
		Отказ1 = ложь; 		
		
		//12.04 - 14.11.2016 уже есть проверка в проведении!  только на клиенте и ТОЛЬКО Для Проделенного заказа 
		//#Если Клиент Тогда 
		//Если ЭтотОбъект.Проверен Тогда
		//	ПроверитьПревышениеОбщегоЛимитаДЗСУчетомЗаказа(ЭтотОбъект, Отказ1);
		//КонецЕсли;	
		//#КонецЕсли
		
		//   ЗамерыВремени "вручную" при ЛЮБОМ проведении НЕ ИЗ ФОРМЫ "проделённого" заказа
		//+++ 12.04.2016 ++++++++++++++++++++++++++++++++++
		Если ДатаНачалаЗаписи > 0 и Проверен Тогда
			КлючеваяОперацияСсылка = Справочники.КлючевыеОперации.ПроведениеЗаказаПокупателя;
			ДатаОкончанияЗаписи = ОценкаПроизводительностиКлиентСервер.ЗначениеТаймера();
			Длительность = ДатаОкончанияЗаписи - ДатаНачалаЗаписи; 
			ДатаОкончанияКлючевойОперации  = ТекущаяДата();
			ОценкаПроизводительностиВызовСервераПолныеПрава.ЗафиксироватьДлительностьКлючевойОперации( 
			КлючеваяОперацияСсылка, 
			Длительность, 
			ДатаНачалаКлючевойОперации,
			ДатаОкончанияКлючевойОперации,
			Ссылка);  // + Ссылка на этот Заказ
		КонецЕсли;	
		//+++++++++++++++++++++++++++++++++++++++++++++++++
		
	КонецЕсли;
	
	//// + Сакулина  выплняется при записи не из Формы документа
	// + Сакулина
	Если проверен и Проведен и ТипЗаказа = 13 и Подразделение = Справочники.Подразделения.НайтиПоКоду("00005") и ВводитьТолькоПеремещение = Истина Тогда
		СозданиеЗадачиНаСогласованиеТипоразмера();
	КонецЕсли;
	
КонецПроцедуры //ПослеЗаписи() 

Процедура ПриКопировании(ОбъектКопирования)
	//// Вставить содержимое обработчика.
	//МассивСсылок = Новый Массив;
	//МассивСсылок.Добавить(ОбъектКопирования.Ссылка);
	//ТЗ = НайтиПоСсылкам(МассивСсылок);
	//
	//Если ((ТЗ.Количество()=0 и Не(ОбъектКопирования.Проведен)) или (ТЗ.Количество()=1 и ОбъектКопирования.Проведен)) Тогда 
	//	Ответ = Вопрос("Копируемый заказ не имеет никаких ссылок. Пометить его на удаление ?", РежимДиалогаВопрос.ДаНет);
	//	Если (Ответ = КодВозвратаДиалога.Да) Тогда 
	//		ОбъектКопирования.УстановитьПометкуУдаления(Истина);
	//	КонецЕсли;
	//КонецЕсли;
	
	//// очистка номера ИМ
	Номер = "";
	ССайта   = ложь;
	НомерВходящегоДокумента="";
	ДатаВходящегоДокумента ='00010101';
	
	ОтправленоПисьмоСКрышками = Ложь;
	ТребуютсяКрышки = Ложь;
	
	СогласованаТребованиеНакладная = Ложь;
	
	Закрыт = Ложь;
	Проверен = Ложь;
	Проведен = Ложь;
	ВМаршрут = Ложь; //02.11.2017
	
	глТекущийПользователь = ?(ЗначениеЗаполнено(глТекущийПользователь), глТекущийПользователь, Справочники.Пользователи.НайтиПоКоду("Робот (магазин)") );//+++ 22.07.2013
	Ответственный = глТекущийПользователь;// тот, кто сделал копию
	
	СуммаТранспорта = 0;//+++ 13.11.2013
	БезНал = ложь;
	
	//+++( 26.06.2014 - статусы и поставщиков надо удалять!
	Поставщик = справочники.Контрагенты.ПустаяСсылка();
	статус    = перечисления.СтатусыЗаказов.ПустаяСсылка();
	Согласован = ложь;
	
	Комментарий  = "";
	Если типЗаказа<>12 тогда
		типЗаказа    = 0;   // 29.10.2014
	конецЕсли;
	Заказы.Очистить(); // ссылки на другие заказы... после объедниенения
	
	Для каждого стр1 из Товары Цикл
		стр1.Статус     = перечисления.СтатусыСтрокЗаказа.ПустаяСсылка();
		стр1.Размещение = неопределено;
	КонецЦикла;
	
	//+++)
	
	//+++ 20.10.2014 - чистим таблицу заказов
	Заказы.Очистить();
	
	Бонусы.Очистить();
	
КонецПроцедуры //ПриКопировании()

//Адиянов<<<
Процедура СогласованиеРезерваДляИМ(ЗадачаСоздана)
	
	КонтрагентРезервДляИМ = Справочники.Контрагенты.НайтиПоКоду("П004703");
	Если Контрагент = КонтрагентРезервДляИМ Тогда
		Возврат; // Для контрагента "Резерв для ИМ" разрешена работа без согласования с 10.05.2017. Договорился Смирнов Александр с Егором Малышевым
	КонецЕсли;
	
	ЗадачаСоздана = Ложь;
	
	//	ЕгорМалышев = Справочники.Пользователи.НайтиПоРеквизиту("ФизЛицо",Справочники.ФизическиеЛица.НайтиПоКоду("С0438"));				
	ЕгорМалышев = справочники.НоменклатурныеГруппы.НайтиПоКоду("00026").Ответственный;  //07.07.2016  Менеджер товарной группы "ЛИТЫЕ"
	#Если Клиент Тогда
		флЭтоМенТГ = (глТекущийПользователь=ЕгорМалышев)
		или РольДоступна("ПравоЗавершенияРаботыПользователей");
	#Иначе
		флЭтоМенТГ = Истина; // через web-сервис...  пытаемся ПРОВЕРИТЬ?!
	#КонецЕсли
	
	//Если Контрагент <> Контрагент.КонтрагентДляРезерваИМ Тогда // только Для РезервИМ //123заменить
	Если Контрагент <> ДоговорКонтрагента.КонтрагентДляРезерваИМ Тогда // только Для РезервИМ
		Возврат;
	Иначе
		//+++ 07.07.2016 утверждать может (как в форме так и из задачи) - менеджер тов.группы "ЛИТЫЕ" 
		Если флЭтоМенТГ Тогда
			Возврат;
		ИначеЕсли не ЕстьДискиПоВидуТовараДляИМ() Тогда   // Сакулина. поправила проверку на диски по ВИду товара, ранее было по Родителю Номенклатуры
			Возврат;
			//ИначеЕсли Проверен Тогда  // ???
			//		Возврат;
		КонецЕсли;		
	КонецЕсли;	
	
	Проверен = ЛОЖЬ; //+++ 07.07.2016  ОБЯЗАТЕЛЬНО ВЫКЛЮЧАЕТСЯ из дележки !!!
	
	Инициатор = ПараметрыСеанса.ТекущийПользователь;
	НаименованиеЗадачи =  "Согласование резерва Для "+СокрЛП(Контрагент.Наименование);
	
	Если ЭтоНовый() Тогда 
		НовыйСсылка = Документы.ЗаказПокупателя.ПолучитьСсылку(Новый УникальныйИдентификатор);	
		УстановитьСсылкуНового(НовыйСсылка);
		ЗадачаСуществует = Ложь;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		//	|	ЗадачиПользователяЗадачиПоИсполнителю.Ссылка,
		|	ЗадачиПользователяЗадачиПоИсполнителю.Ссылка.Дата
		|ИЗ
		|	Задача.ЗадачиПользователя.ЗадачиПоИсполнителю(
		|			&Исполнитель,
		|			НЕ Выполнена
		|				И НаСогласование
		|				И Объект.Ссылка = &Ссылка
		|				И Наименование = &Наименование) КАК ЗадачиПользователяЗадачиПоИсполнителю
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗадачиПользователяЗадачиПоИсполнителю.Дата УБЫВ
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		
		
		Запрос.УстановитьПараметр("Исполнитель", ЕгорМалышев);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("Наименование", НаименованиеЗадачи);
		
		РезультатЗапроса = Запрос.Выполнить();
		ЗадачаСуществует = Не РезультатЗапроса.Пустой();
		// Если задача есть... то в сообщение надо передать дату/время задачи
		выборка = РезультатЗапроса.Выбрать(); 
		выборка.Следующий();
		ЗадачаДата = выборка.СсылкаДата;
	КонецЕсли;
	
	
	Если Не ЗадачаСуществует Тогда 
		
		Задача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
		Задача.Дата = ТекущаяДата();
		Задача.Постановщик = ЕгорМалышев;
		Задача.Наименование = НаименованиеЗадачи;
		Задача.Исполнитель = ЕгорМалышев;
		Задача.Описание = "Согласование резерва Для интернет-магазина." + символы.пс 
		+ "Ответственный менеджер: " + Инициатор.Наименование + символы.пс
		+ "Контрагент " + Контрагент.НаименованиеПолное + Символы.ПС
		+ "По Договору " + ДоговорКонтрагента + Символы.ПС
		+ "№ Заказа " + Номер + Символы.ПС; 
		
		Если ЭтоНовый() Тогда 
			Задача.Объект = НовыйСсылка;
		Иначе 
			Задача.Объект = Ссылка;
		КонецЕсли;    
		Задача.Инициатор = Инициатор;
		Задача.НаСогласование = Истина;
		Задача.РеквизитДляСогласования = "Проверен";
		Задача.ЗначениеРеквизитаДляСогласования = Истина; //+++ 08.07.2016 Вот так надо
		Задача.СрокОповещения = Задача.Дата;
		Задача.Оповещение = Истина;
		Задача.Записать(); 
		
		#Если Клиент Тогда
			Сообщить("Товары не зарезервированы. Документ РЕЗЕРВА нельзя ставить[v]'На отгрузку' без согласование!", СтатусСообщения.Внимание);
			Сообщить("Автоматически создана задача Для согласования этого заказа Для "+строка(Инициатор), СтатусСообщения.Информация);
		#КонецЕсли
	Иначе
		#Если Клиент Тогда
			Сообщить("Документ не проделен. Задача на согласование уже была сформирована "+строка(ЗадачаДата)+". Только после согласования включится [ ]""К отгрузке""", СтатусСообщения.Внимание);
		#КонецЕсли
	КонецЕсли;
	ЗадачаСоздана = Истина;
	
КонецПроцедуры

Функция ЕстьДиски() 
	Рез = Ложь;
	Диски = Справочники.Номенклатура.НайтиПоКоду("0001752");
	Для каждого Стр из Товары Цикл   
		Если Стр.Номенклатура.ПринадлежитЭлементу(Диски) Тогда 
			Рез = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Рез;	
КонецФункции

// Сакулина
Функция ЕстьДискиПоВидуТовараДляИМ()  
	Рез = Ложь;
	Для каждого Стр из Товары Цикл   
		Если Стр.Номенклатура.ВидТовара = Перечисления.ВидыТоваров.Диски Тогда 
			Рез = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Рез;	
КонецФункции
// Сакулина

// + Сакулина
Процедура СозданиеЗадачиНаСогласованиеТипоразмера(ПередаваемаяСсылка = Неопределено)  Экспорт
	СсылкаНаОбъект = ?(ПередаваемаяСсылка = Неопределено,Ссылка,ПередаваемаяСсылка);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗадачиПользователяЗадачиПоИсполнителю.Ссылка.Дата
	|ИЗ
	|	Задача.ЗадачиПользователя.ЗадачиПоИсполнителю(
	|			&Исполнитель,
	|			НЕ Выполнена
	|				И НаСогласование
	|				И Объект.Ссылка = &Ссылка
	|				И Наименование = &Наименование) КАК ЗадачиПользователяЗадачиПоИсполнителю
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗадачиПользователяЗадачиПоИсполнителю.Дата УБЫВ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Доколин = Справочники.Пользователи.НайтиПоКоду("Доколин");
	НаименованиеЗадачи = "Задача на соглосование перемещения в филиалы неходовых типоразмеров";
	Запрос.УстановитьПараметр("Исполнитель", Доколин);
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("Наименование", НаименованиеЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗадачаСуществует = Не РезультатЗапроса.Пустой();		
	
	Если Не ЗадачаСуществует Тогда 
		
		//+++ 09.11.2016 - web-сервисы не понимают такое... ошибка на ПараметрыСеанса.
		#Если Клиент Тогда
			Инициатор = ПараметрыСеанса.ТекущийПользователь;
		#Иначе
			Инициатор = Справочники.Пользователи.НайтиПоКоду("Робот (магазин)");
		#КонецЕсли
		Задача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
		Задача.Дата = ТекущаяДата();
		Задача.Постановщик = Доколин;
		Задача.Наименование = НаименованиеЗадачи;
		Задача.Исполнитель = Доколин;
		Задача.Описание = "перемещения в филиалы неходовых типоразмеров " + символы.пс 
		+ "Ответственный менеджер: " + Инициатор.Наименование + символы.пс
		+ "Контрагент " + СсылкаНаОбъект.Контрагент.НаименованиеПолное + Символы.ПС
		+ "№ Заказа " + СсылкаНаОбъект.Номер + Символы.ПС+Символы.ПС+Символы.ПС; 
		
		Для каждого стр из Товары Цикл
			Если стр.Статус = Перечисления.СтатусыСтрокЗаказа.ПустаяСсылка() Тогда
				Если ПроверитьЗапрещенныйТипоразмер(Стр.Номенклатура.Типоразмер,стр.Номенклатура.НоменклатурнаяГруппа) = Истина Тогда
					стрЗадачи = Задача.Товары.Добавить();
					ЗаполнитьЗначенияСвойств( стрЗадачи, стр );
					//стр.Статус = Перечисления.СтатусыСтрокЗаказа.НаСогласовании;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
				
		Задача.Объект = СсылкаНаОбъект;
		Задача.Инициатор = Инициатор;
		Задача.НаСогласование = Истина;
		//Задача.РеквизитДляСогласования = "Проверен";
		//Задача.ЗначениеРеквизитаДляСогласования = ЛОЖЬ;
		Задача.СрокОповещения = Задача.Дата;
		Задача.Оповещение = Истина;
		Если Задача.Товары.Количество() > 0 Тогда
			Задача.Записать(); 
			#Если Клиент Тогда 			
				Сообщить("Автоматически создана задача Для согласования типоразмера этого заказа для "+строка(Доколин), СтатусСообщения.Информация);
			#КонецЕсли
		КонецЕсли;
	Иначе
	КонецЕсли;
	//Записать(РежимЗаписиДокумента.Запись);

КонецПроцедуры
// - Сакулина

// + Сакулина
Функция ПроверитьЗапрещенныйТипоразмер(Типоразмер,НоменклатурнаяГруппа)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗапрещенныеТипоРазмеры.Типоразмер,
	|	ЗапрещенныеТипоРазмеры.ПроцентПродаж,
	|	ЗапрещенныеТипоРазмеры.НоменклатурнаяГруппа
	|ИЗ
	|	РегистрСведений.ЗапрещенныеТипоразмеры КАК ЗапрещенныеТипоРазмеры
	|ГДЕ
	|	ЗапрещенныеТипоРазмеры.Типоразмер = &Типоразмер
	|	И ЗапрещенныеТипоРазмеры.НоменклатурнаяГруппа = &НоменклатурнаяГруппа";
	Запрос.УстановитьПараметр("Типоразмер",Типоразмер);
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа",НоменклатурнаяГруппа);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат  Истина;
	Иначе
		Возврат  Ложь;
	КонецЕсли;
КонецФункции

// +  Сакулина
Процедура ПроверкаНаУстновку13Статуса()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Типоразмер,
	|	Товары.Статус
	|ПОМЕСТИТЬ Вт_Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗапрещенныеТипоРазмеры.Типоразмер,
	|	ЗапрещенныеТипоРазмеры.ПроцентПродаж,
	|	Вт_Товары.Номенклатура,
	|	Вт_Товары.Статус
	|ПОМЕСТИТЬ ВТ_Пред
	|ИЗ
	|	Вт_Товары КАК Вт_Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗапрещенныеТипоРазмеры КАК ЗапрещенныеТипоРазмеры
	|		ПО Вт_Товары.Типоразмер = ЗапрещенныеТипоРазмеры.Типоразмер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Пред.Типоразмер,
	|	ВТ_Пред.ПроцентПродаж,
	|	ВТ_Пред.Номенклатура,
	|	ВТ_Пред.Статус
	|ИЗ
	|	ВТ_Пред КАК ВТ_Пред
	|ГДЕ
	|	ЕстьNull(ВТ_Пред.Типоразмер,0) <> 0
	|	И ВТ_Пред.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСтрокЗаказа.Согласован)
	|	И ВТ_Пред.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСтрокЗаказа.Подтвержден)
	|	И ВТ_Пред.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСтрокЗаказа.Отменен)";
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗ.Колонки.Добавить("Типоразмер",Новый ОписаниеТипов("СправочникСсылка.Типоразмеры"));
	ТЗ.Колонки.Добавить("Статус",Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыСтрокЗаказа"));
	Для Каждого Стр из Товары Цикл
		НовСтрТЗ = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрТЗ,Стр);
		НовСтрТЗ.Типоразмер = Стр.Номенклатура.Типоразмер;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Товары",ТЗ);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Результат.Пустой() или Заказы.Количество()>0 Тогда
		// ничего не делаем, все хорошо
	ИначеЕсли не Результат.Пустой() тогда
		ТипЗаказа = 13;
		Согласован = ложь;
	КонецЕсли;
	
КонецПроцедуры
// - Сакулина

//Плотников
Функция ПроверитьНаличиеАксессуаров() 
	ТоварыТЗ = Товары.Выгрузить();
	ТоварыТЗ.Свернуть("Номенклатура","Количество");
	ТоварыТЗ.Колонки.Добавить("Видтовара",Новый ОписаниеТипов("ПеречислениеСсылка.ВидыТоваров"));
	
	для каждого стр12 из ТоварыТЗ Цикл
		стр12.ВидТовара = стр12.Номенклатура.ВидТовара;	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	запрос.УстановитьПараметр("ТоварыТЗ",ТоварыТЗ);
	запрос.УстановитьПараметр("Акс",Перечисления.ВидыТоваров.Аксессуары);
	запрос.Текст = "ВЫБРАТЬ
	|	ТоварыТЗ.Номенклатура,
	|	ТоварыТЗ.Количество,
	|	ТоварыТЗ.ВидТовара
	|ПОМЕСТИТЬ Врем
	|ИЗ
	|	&ТоварыТЗ КАК ТоварыТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Врем.Номенклатура
	|ИЗ
	|	Врем КАК Врем
	|ГДЕ
	|	Врем.ВидТовара = &акс";
	Рез = Запрос.Выполнить().Выгрузить();
	
	Если рез.Количество() > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат ложь;
	КонецЕсли;	
КонецФункции

Процедура ЗаполнитьТабЧастьБонусы()
	
	ТоварыТЗ = Товары.Выгрузить();
	ТоварыТЗ.Свернуть("Номенклатура","Количество");
	ТоварыТЗ.Колонки.Добавить("Видтовара",Новый ОписаниеТипов("ПеречислениеСсылка.ВидыТоваров"));
	ТоварыТЗ.Колонки.Добавить("Родитель", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));   //24.05.2017
	
	для каждого стр12 из ТоварыТЗ Цикл
		стр12.ВидТовара = стр12.Номенклатура.ВидТовара;	
		стр12.Родитель = стр12.Номенклатура.Родитель;	//24.05.2017 сразу найдём
	КонецЦикла;
	
	Запрос = Новый Запрос;
	запрос.УстановитьПараметр("ТоварыТЗ",ТоварыТЗ);
	Запрос.УстановитьПараметр("Подразделение",  Подразделение);
	запрос.УстановитьПараметр("Акс",Перечисления.ВидыТоваров.Аксессуары);
	запрос.УстановитьПараметр("Исключать",Ссылка.Проведен);
	Запрос.Текст = "ВЫБРАТЬ
	|	ТоварыТЗ.Номенклатура,
	|	ТоварыТЗ.Количество,
	|	ТоварыТЗ.ВидТовара,
	|	ТоварыТЗ.Родитель
	|ПОМЕСТИТЬ Заказ
	|ИЗ
	|	&ТоварыТЗ КАК ТоварыТЗ
	|ГДЕ
	|	ТоварыТЗ.ВидТовара = &Акс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заказ.Номенклатура,
	|	Заказ.Количество,
	|	НаборыДляПодарков.Номенклатура КАК НоменклатураКоплект,
	|	НаборыДляПодарков.Количество КАК КоличествоКомплект,
	|	НаборыДляПодарков.Подарок,
	|	НаборыДляПодарков.КоличествоПодарка КАК КоличествоПодарка
	|ПОМЕСТИТЬ Итог
	|ИЗ
	|	Заказ КАК Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаборыДляПодарков КАК НаборыДляПодарков
	|		ПО Заказ.Номенклатура = НаборыДляПодарков.Номенклатура
	
	//24.05.2017  - замена на явное поле из ТЧ
	//|			ИЛИ Заказ.Номенклатура.Родитель = НаборыДляПодарков.Номенклатура 
	|			ИЛИ Заказ.Родитель = НаборыДляПодарков.Номенклатура 
	|ГДЕ 
	|	НаборыДляПодарков.Подразделение = &Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Итог.Количество / Итог.КоличествоКомплект - 0.5 КАК ЧИСЛО(15, 0)) КАК Количество,
	|	Итог.Подарок,
	|	Итог.КоличествоПодарка
	|ПОМЕСТИТЬ Подарки
	|ИЗ
	|	Итог КАК Итог
	|ГДЕ
	|	НЕ Итог.НоменклатураКоплект ЕСТЬ NULL 
	|	И (ВЫРАЗИТЬ(Итог.Количество / Итог.КоличествоКомплект КАК ЧИСЛО(15, 2))) >= 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.Номенклатура, ТоварыНаСкладахОстатки.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК Поле1
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки( ,
	|			Склад.ЗапретитьИспользование = ЛОЖЬ
	|				И Склад.Транзитный = ЛОЖЬ
	|				И Номенклатура В (ВЫБРАТЬ Подарки.Подарок ИЗ  Подарки)   ) КАК ТоварыНаСкладахОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки( ,
	|				ЗаказПокупателя.Проверен 
	|			  И ЗаказПокупателя.Транзит = ЛОЖЬ
	
	//   |			  И ЗаказПокупателя <> &ЭтотЗаказ
	
	|			  И Номенклатура В (ВЫБРАТЬ Подарки.Подарок ИЗ Подарки)      ) КАК ЗаказыПокупателейОстатки
	|		ПО ТоварыНаСкладахОстатки.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подарки.Количество,
	|	Подарки.Подарок,
	|	Подарки.КоличествоПодарка,
	|	ВЫБОР
	|		КОГДА &Исключать = ИСТИНА
	|			ТОГДА ЕСТЬNULL(Остатки.Поле1, 0) + Подарки.Количество * Подарки.КоличествоПодарка
	|		ИНАЧЕ ЕСТЬNULL(Остатки.Поле1, 0)
	|	КОНЕЦ КАК Остаток
	|ИЗ
	|	Подарки КАК Подарки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|		ПО Подарки.Подарок = Остатки.Номенклатура
	|;
	|Уничтожить Заказ; 
	|Уничтожить Итог; 
	|Уничтожить Подарки;";
	
	
	Рез = Запрос.Выполнить().Выгрузить();
	
	Для каждого стр из Рез Цикл
		Если стр.Количество * стр.КоличествоПодарка <= стр.Остаток тогда
			Нов = Бонусы.Добавить();
			Нов.Номенклатура = стр.Подарок;
			Нов.Количество = Цел(стр.Количество)*стр.КоличествоПодарка;
			Нов.СтатьяЗатрат = Справочники.СтатьиЗатрат.НайтиПоКоду("О0215");
			Нов.Бонус = истина;
		ИначеЕсли стр.Остаток > 0 Тогда
			Нов = Бонусы.Добавить();
			Нов.Номенклатура = стр.Подарок;
			Нов.Количество = стр.Остаток > 0;
			Нов.СтатьяЗатрат = Справочники.СтатьиЗатрат.НайтиПоКоду("О0215");
			Нов.Бонус = истина;
		КонецЕсли;
	КонецЦикла;
	
	Бонусы.Свернуть("Номенклатура,СтатьяЗатрат,Бонус","Количество");
	
КонецПроцедуры

//плотников

Процедура ОтправитьНаСогласованиеПодарки() Экспорт	
	//Согласование, Плотников 24.03.2017 ----------------------------------------------------------------
	
	Отбор = Новый Структура;
	Отбор.Вставить("Бонус",Ложь);
	
	ТЗ = бонусы.Выгрузить();
	
	Строки = ТЗ.Скопировать(Отбор);
	
	Строки.Колонки.Добавить("ВидТовара");
	
	для каждого стр11 из Строки Цикл
		стр11.ВидТовара = Стр11.Номенклатура.ВидТовара;	
	КонецЦикла;
	
	ПоВидамТоваров = Строки.Скопировать();
	ПоВидамТоваров.Свернуть("ВидТовара");
	
	Для каждого стр22 из ПоВидамТоваров Цикл
		
		ОтборВид = Новый Структура;
		ОтборВид.Вставить("ВидТовара",стр22.ВидТовара);
		
		СтрокиПоВидуТовара = Строки.НайтиСтроки(ОтборВид);
		
		если стр22.ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
			польз =  Справочники.Пользователи.НайтиПоКоду("Малышев Егор");
		Иначеесли стр22.ВидТовара = Перечисления.ВидыТоваров.Шины Тогда
			польз =  Справочники.Пользователи.НайтиПоКоду("Доколин"); 
		Иначеесли стр22.ВидТовара = Перечисления.ВидыТоваров.АКБ Тогда
			польз =  Справочники.Пользователи.НайтиПоКоду("Сухачева А.В."); 
		Иначеесли стр22.ВидТовара = Перечисления.ВидыТоваров.Аксессуары Тогда
			польз =  Справочники.Пользователи.НайтиПоКоду("Голубева В.С."); 
		КонецЕсли;
		
		НоваяЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
		НоваяЗадача.Исполнитель  = Польз;
		НоваяЗадача.Инициатор  = Справочники.Пользователи.НайтиПоКоду(ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
		НоваяЗадача.Наименование = "Согласование безвозмездной передачи товара для клиента " + Контрагент.Наименование + " !!!";
		НоваяЗадача.Дата = ТекущаяДата();
		НоваяЗадача.ДатаИсполнения = КонецДня(ТекущаяДата());
		НоваяЗадача.Оповещение   = Истина;
		НоваяЗадача.СрокОповещения = ТекущаяДата()+60;
		НоваяЗадача.Объект = Ссылка;
		НоваяЗадача.НаСогласование = истина;
		
		Для каждого стр из СтрокиПоВидуТовара Цикл 
			НоваяЗадача.Описание = НоваяЗадача.Описание+стр.Номенклатура.Наименование + ", кол.: " + строка(стр.Количество) + Символы.ПС;
			
			НовСтрока = НоваяЗадача.Товары.Добавить();
			НовСтрока.Номенклатура = стр.Номенклатура;
			НовСтрока.Количество = стр.Количество;
		КонецЦикла;
		
		НоваяЗадача.Записать();
		
		#Если Клиент Тогда
			Сообщить(">>> Создано задание на согласование для  пользователя " +  польз.ПолноеНаименование()  + "!!!");
		#КонецЕсли
		
	КонецЦикла;
КонецПроцедуры

//Адиянов>>>
Процедура УстановитьОтветственного()
	
	Ответственный = ДоговорКонтрагента.ОтветственноеЛицо;
	
КонецПроцедуры // УстановитьОтветственного()

Функция ПолучитьНоменклатуруПустойТНВЭД()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	тзТовары.Номенклатура,
	|	тзТовары.НомерСтроки
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&тзТовары КАК тзТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТовары.Номенклатура,
	|	втТовары.НомерСтроки КАК НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(втТовары.Номенклатура) КАК НоменклатураПредставление
	|ИЗ
	|	втТовары КАК втТовары
	|ГДЕ
	|	втТовары.Номенклатура.КодТНВЭД = ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	тзТовары = Товары.Выгрузить(, "НомерСтроки, Номенклатура");
	Запрос.УстановитьПараметр("тзТовары", тзТовары);
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьНоменклатуруПустойТНВЭД()

// Пока просто выводим сообщение, отказ не выполняем
Процедура ПроверитьКодТНВЭД()
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) И ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль Тогда
		//Данные = ПолучитьНоменклатуруПустойТНВЭД();
		//Если НЕ Данные.Пустой() Тогда
		//	Выборка = Данные.Выбрать();
		//	Пока Выборка.Следующий() Цикл
		//		Сообщить("" + Ссылка + " :: в стр." + Выборка.НомерСтроки + " у товара """ + 
		//			Выборка.НоменклатураПредставление + """ не указан код ТНВЭД, реализация не будет создана!");
		//	КонецЦикла;
		//КонецЕсли;
		СтруктОтбора = Новый Структура("КодТНВЭД", Справочники.КлассификаторТНВЭД.ПустаяСсылка());
		МасСтрПустойКодТНВЭД = Товары.НайтиСтроки(СтруктОтбора);
		Если МасСтрПустойКодТНВЭД.Количество() > 0 Тогда
			#Если Клиент Тогда
				Для Каждого ТекСтр Из МасСтрПустойКодТНВЭД Цикл
					Сообщить("" + Ссылка + " :: в стр." + ТекСтр.НомерСтроки + " у товара """ + 
					ТекСтр.Номенклатура + """ не указан код ТНВЭД, реализация не будет создана!");
				КонецЦикла;
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьКодТНВЭД()

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мПроведениеИзФормы = ложь; //+++ 28.03.2013 - Если форма не открывалась, то мПроведениеИзФормы = неопределено

СогласовыватьРекламу = ложь;

//---------таблица Для согласования--------------------	
таблСогл = новый ТаблицаЗначений;
таблСогл.Колонки.Добавить("ПользовательУтверждающий");
таблСогл.Колонки.Добавить("Статус");
таблСогл.Колонки.Добавить("Номенклатура");
таблСогл.Колонки.Добавить("Количество");
таблСогл.Колонки.Добавить("НомерСтрокиОснования");
таблСогл.Колонки.Добавить("Цена");
таблСогл.Колонки.Добавить("ЦенаМин");
таблСогл.Колонки.Добавить("ЦенаПоТипуЦен");

таблСогл.Колонки.Добавить("Приоритет");//22.08.2016 номер правила

ТаблПоставщиков = неопределено;

ДатаНачалаЗаписи = 0;