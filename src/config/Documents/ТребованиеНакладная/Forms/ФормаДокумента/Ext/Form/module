////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

Перем мТекСтрока; // Текущая строка таблицы Материалы

Перем мКолонкиМатериалы;

Перем мПечатнаяФормаПоУмолчанию;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Производит открывает форму подбора данных в табличные части документа
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена  = Ложь;
	ЕстьСерия = Истина;

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Команда           = "ПодборВТабличнуюЧастьМатериалы";
	ИмяТабличнойЧасти = "Материалы";

	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокЗапросов);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);

	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"            , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"      , Валюта);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);

КонецПроцедуры

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия, Качество;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("КоличествоМест"  , КоличествоМест);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"           , Серия);
	ЗначениеВыбора.Свойство("Качество"        , Качество);

	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	СтруктураОтбора.Вставить("Номенклатура",     		   Номенклатура);
	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	СтруктураОтбора.Вставить("СерияНоменклатуры",     	   Серия);
	Если НЕ ЗначениеНеЗаполнено(Качество) Тогда
		СтруктураОтбора.Вставить("Качество"         , Качество);
	КонецЕсли;
	СтруктураОтбора.Вставить("ЕдиницаИзмерения", 		   ЕдиницаИзмерения);
	
	СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Нашли, увеличиваем количество в первой найденной строке.
		Если КоличествоМест = Неопределено Тогда
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		Иначе
			СтрокаТабличнойЧасти.КоличествоМест = СтрокаТабличнойЧасти.КоличествоМест + КоличествоМест;
			РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		КонецЕсли;

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;
		Если КоличествоМест = Неопределено Тогда
			СтрокаТабличнойЧасти.Количество       = Количество;
		Иначе
			СтрокаТабличнойЧасти.КоличествоМест   = КоличествоМест;
		КонецЕсли;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.Качество         = Справочники.Качество.Новый;
		СтрокаТабличнойЧасти.СтатьяЗатрат     = Номенклатура.СтатьяЗатрат;

		Если НЕ ЗначениеНеЗаполнено(Качество) Тогда
			СтрокаТабличнойЧасти.Качество          = Качество;
		Иначе
			СтрокаТабличнойЧасти.Качество         = ПолучитьКачество(Номенклатура);
		КонецЕсли;

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;

		// Рассчитываем реквизиты табличной части.
		Если КоличествоМест = Неопределено Тогда
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		Иначе
			РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		КонецЕсли;
		ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	КонецЕсли;

	ЭлементыФормы.Материалы.ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы.Материалы.ТекущаяКолонка = ЭлементыФормы.Материалы.Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении номенклатуры в табличной части.
//
Процедура ПриИзмененииНоменклатуры(СтрокаТабличнойЧасти)

	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
	
	ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ПриИзмененииНоменклатуры()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура управляет видимостью/доступностью элементов формы
//
Процедура ДоступностьЭлементовФормы()

	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;

КонецПроцедуры // ДоступностьЭлементовФормы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		Если ИспользоватьВнутренниеЗаказы(Истина) Тогда
			Если Не ПараметрОснование.ВидЗаказа = Перечисления.ВидыВнутреннегоЗаказа.ВПодразделение Тогда
				Сообщить("Требование - накладную можно вводить только на основании заказа от подразделения", СтатусСообщения.Важное);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь);
		УстановитьНомерДокумента(ЭтотОбъект);
		
		УстановитьВремя(РежимАвтоВремя.Последним);

	КонецЕсли;

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("ЕдиницаХранения");
	СтруктураКолонок.Вставить("СтатьяЗатрат");

	УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Материалы.Колонки, СтруктураКолонок);
	
	// Заполнить подменю выбора печатных форм.
	СписокМакетов = ЭтотОбъект.ПолучитьСписокПечатныхФорм();
	УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати,
	                                       СписокМакетов,
	                                       Новый Действие("КоманднаяПанельФормыДействиеВыбратьПечатнуюФормы"));

	// Установить печатную форму по умолчанию.
	УстановитьКнопкуПечати(ЭтотОбъект.Метаданные().Имя, ЭтаФорма, СписокМакетов, мПечатнаяФормаПоУмолчанию);

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Обновить содержание информационных строк.
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиМатериалы);
	УстановитьВидимостьСерииНоменклатуры(мКолонкиМатериалы);

	// Установить видимость и доступность элементов формы.
	ДоступностьЭлементовФормы();
	
	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
    
	//БАЛАНС (04.12.2007)                       
	//
	мПроведениеИзФормы = Истина;
	
	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		ПоказатьСкладКоробки();
		
	КонецЕсли;   
	
	Если не ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РезрешитьРедактированиеТребованийНакладных") Тогда  
		ЭтаФорма.ТолькоПросмотр = Истина;
	КонецЕсли;	
КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

// Обработчик внешнего события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	Если глТорговоеОборудование <> Неопределено Тогда
		Если Событие = "BarCodeValue" Тогда

			Команда         = "ПодборВТабличнуюЧастьМатериалы";
			ИмяТабличнойЧасти = "Материалы";

			ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);

			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("Команда"              , Команда);
			СтруктураПараметров.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
			СтруктураПараметров.Вставить("ИмяТабличнойЧасти"    , ИмяТабличнойЧасти);

			глТорговоеОборудование.ОбработатьВнешнееСобытиеОтСканераДляФормы(ЭтаФорма, ЭтотОбъект, СтруктураПараметров, Данные);

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ВнешнееСобытие()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	ЗаписатьКоробкиСклад();

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьМатериалы" Тогда
			ОбработкаПодбора(Материалы, ЗначениеВыбора);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Материалы"
//
Процедура КоманднаяПанельМатериалыПодбор(Кнопка)
	
	ДействиеПодбор(Материалы);
	
КонецПроцедуры // КоманднаяПанельМатериалыПодбор()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
//
Процедура КоманднаяПанельФормыДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = Кнопка.Текст;
		СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		СписокМакетов = ПолучитьСписокПечатныхФорм();
		СтрокаМакетаВСписке = СписокМакетов.НайтиПоЗначению(Кнопка.Имя);
		Если СтрокаМакетаВСписке <> Неопределено Тогда
			Печать(СтрокаМакетаВСписке.Значение);
			СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
			СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;			
			
		Иначе
			СсылкаВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Кнопка.Имя, "_", "-")));
			Печать(СсылкаВнешнейФормы);
			СтруктураМакета.Макет = СсылкаВнешнейФормы;
			СтруктураМакета.ПредставлениеМакета = Кнопка.Текст;
		КонецЕсли;		
		
		мПечатнаяФормаПоУмолчанию = СтруктураМакета.Макет;
		СохранитьТекущуюКнопкуПечати(ЭтотОбъект.Метаданные().Имя, СтруктураМакета);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельФормыДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	НапечататьДокументПоУмолчанию(ЭтотОбъект, глТекущийПользователь, мПечатнаяФормаПоУмолчанию);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	Если Не ОтражатьВБухгалтерскомУчете
	   И Не ОтражатьВНалоговомУчете
	   И Не ОтражатьВУправленческомУчете Тогда
		ОтражатьВУправленческомУчете = Истина;
	КонецЕсли;

	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете;

	// Установить доступность элементов формы
	ДоступностьЭлементовФормы();

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в упр. учете.
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)
	
	Если Не ОтражатьВБухгалтерскомУчете
	   И Не ОтражатьВНалоговомУчете
	   И Не ОтражатьВУправленческомУчете Тогда
		ОтражатьВБухгалтерскомУчете = Истина;
		ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент);
	КонецЕсли;
	
	ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	
КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьНомерДокумента(ЭтотОбъект);
	ПриИзмененииЗначенияОрганизации(ЭтотОбъект);

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Склад
//
Процедура СкладНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.НеРавно, СтандартнаяОбработка);

КонецПроцедуры // СкладНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ Материалы

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Материалы". Формирует данные в колонке "ХарактерЗатрат" и "ЕдиницаХранения".
//
Процедура МатериалыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ЭлементыФормы.Материалы.Колонки.СпособСписанияОстаткаТоваров.Видимость	Тогда
		ВидимостьСпособСписанияОстаткаТоваров = Не ЗначениеНеЗаполнено(ДанныеСтроки.Заказ);
		ОформлениеСтроки.Ячейки.СпособСписанияОстаткаТоваров.Видимость      = ВидимостьСпособСписанияОстаткаТоваров;
		ОформлениеСтроки.Ячейки.СпособСписанияОстаткаТоваров.ТолькоПросмотр = НЕ ВидимостьСпособСписанияОстаткаТоваров;
	КонецЕсли;

    ПоказатьКоэффициентМест(мКолонкиМатериалы, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	ПоказатьКодАртикул(мКолонкиМатериалы, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

	Если НЕ ЗначениеНеЗаполнено(ДанныеСтроки.СерияНоменклатуры) Тогда
		Если ЭлементыФормы.Материалы.Колонки.НомерГТД.Видимость Тогда
			ОформлениеСтроки.Ячейки.НомерГТД.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.НомерГТД.Текст = ДанныеСтроки.СерияНоменклатуры.НомерГТД;
		КонецЕсли;
		Если ЭлементыФормы.Материалы.Колонки.СтранаПроисхождения.Видимость Тогда
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.Текст = ДанныеСтроки.СерияНоменклатуры.СтранаПроисхождения;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // МатериалыПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Материалы".
//
Процедура МатериалыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ПриИзмененииНоменклатуры(СтрокаТабличнойЧасти);

	ЗаполнитьНоменклатурнуюГруппуИСтатьюЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);

	СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;

КонецПроцедуры // МатериалыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода серии номенклатуры
// в строке табличной части "Материалы".
//
Процедура МатериалыСерияНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;

КонецПроцедуры // МатериалыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики
// в строке табличной части "Материалы".
//
Процедура МатериалыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;

КонецПроцедуры // МатериалыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Материалы".
//
Процедура МатериалыКоличествоМестПриИзменении(Элемент)
	
	// Рассчитать новое количество
	РассчитатьКоличествоТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры // МатериалыКоличествоМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Материалы".
//
Процедура МатериалыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // МатериалыЕдиницаМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Материалы".
//
Процедура МатериалыЕдиницаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // МатериалыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Материалы".
//
Процедура МатериалыКоличествоПриИзменении(Элемент)
	
	// Рассчитать реквизиты табличной части.
	РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ДокументОбъект);
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "Материалы".
//
Процедура МатериалыПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		Если Не мТекСтрока = Неопределено Тогда
			Элемент.ТекущаяСтрока.СтатьяЗатрат = мТекСтрока.СтатьяЗатрат;
			МатериалыСтатьяЗатратПриИзменении(Элемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // МатериалыПриНачалеРедактирования()

// Процедура - обработчик события "ПередНачаломДобавления" табличного поля "Материалы".
//
Процедура МатериалыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	мТекСтрока = Элемент.ТекущаяСтрока;
	
КонецПроцедуры // МатериалыПередНачаломДобавления()

// Процедура - обработчик события "ПриИзменении" поля СтатьяЗатрат табличной части "Материалы".
//
Процедура МатериалыСтатьяЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	
КонецПроцедуры // МатериалыСтатьяЗатратПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода заказ
//
Процедура МатериалыЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктОтбора = Новый Структура;
	СтруктОтбора.Вставить( "Организация", Организация);
	
	НачалоВыбораДокументаЗаказа( ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктОтбора, "Материалы");
	
КонецПроцедуры // МатериалыЗаказНачалоВыбора()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Материалы".
//
Процедура МатериалыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Материалы");
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Материалы".
//
Процедура МатериалыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПеретаскивание()

Процедура ПодразделениеПриИзменении(Элемент)
	
	//+++Шарафутдинов 01.03.2018
	Если не ВозможностьВыбораПодразделения2018(Дата,Элемент.Значение) тогда
		Сообщить("Подразделение должно участвовать в бюджетном планировании. Выберите другое подразделение!");
		Элемент.Значение = Справочники.Подразделения.ПустаяСсылка();
		Возврат;		
	КонецЕсли;
	
	//---Шарафутдинов 01.03.2018    
	
	УстановитьНомерДокумента(ЭтотОбъект);
	
	// +++ Шарафутдинов  12.02.2018
	Для каждого стр из Материалы Цикл
		стр.Подразделение = Подразделение ;	
	КонецЦикла;
	// --- Шарафутдинов  12.02.2018

	
КонецПроцедуры

Процедура КоманднаяПанельМатериалыкнЗаполнитьПоОстаткамМатериалов(Кнопка)
	СоответствиеСкладовСтатейЗатрат = новый Соответствие;
	СоответствиеСкладовСтатейЗатрат.Вставить(Справочники.Склады.НайтиПоКоду("00284"),Справочники.СтатьиЗатрат.НайтиПоКоду("А0042"));//канц товары
	СоответствиеСкладовСтатейЗатрат.Вставить(Справочники.Склады.НайтиПоКоду("00923"),Справочники.СтатьиЗатрат.НайтиПоКоду("А0042"));//канц товары //РНД
	СоответствиеСкладовСтатейЗатрат.Вставить(Справочники.Склады.НайтиПоКоду("00922"),Справочники.СтатьиЗатрат.НайтиПоКоду("А0042"));//канц товары //СПБ
	СоответствиеСкладовСтатейЗатрат.Вставить(Справочники.Склады.НайтиПоКоду("01140"),Справочники.СтатьиЗатрат.НайтиПоКоду("А0042"));//канц товары //ЕКТ
	
	СоответствиеСкладовСтатейЗатрат.Вставить(Справочники.Склады.НайтиПоКоду("00283"),Справочники.СтатьиЗатрат.НайтиПоКоду("А0039"));//инвентарь
	СоответствиеСкладовСтатейЗатрат.Вставить(Справочники.Склады.НайтиПоКоду("00921"),Справочники.СтатьиЗатрат.НайтиПоКоду("А0039"));//инвентарь  //РНД
	СоответствиеСкладовСтатейЗатрат.Вставить(Справочники.Склады.НайтиПоКоду("00920"),Справочники.СтатьиЗатрат.НайтиПоКоду("А0039"));//инвентарь  //СПБ
	СоответствиеСкладовСтатейЗатрат.Вставить(Справочники.Склады.НайтиПоКоду("01139"),Справочники.СтатьиЗатрат.НайтиПоКоду("А0039"));//инвентарь  //ЕКТ
	
	СоответствиеСкладовСтатейЗатрат.Вставить(Справочники.Склады.НайтиПоКоду("00318"),Справочники.СтатьиЗатрат.НайтиПоКоду("А0190"));//мебель
	СоответствиеСкладовСтатейЗатрат.Вставить(Справочники.Склады.НайтиПоКоду("00917"),Справочники.СтатьиЗатрат.НайтиПоКоду("А0190"));//мебель  //РНД
	СоответствиеСкладовСтатейЗатрат.Вставить(Справочники.Склады.НайтиПоКоду("00916"),Справочники.СтатьиЗатрат.НайтиПоКоду("А0190"));//мебель  //СПБ
	СоответствиеСкладовСтатейЗатрат.Вставить(Справочники.Склады.НайтиПоКоду("00965"),Справочники.СтатьиЗатрат.НайтиПоКоду("А0190"));//мебель  //ЕКТ
	
	СоответствиеСкладовСтатейЗатрат.Вставить(Справочники.Склады.НайтиПоКоду("00276"),Справочники.СтатьиЗатрат.НайтиПоКоду("А0186"));//склад материалов
	СоответствиеСкладовСтатейЗатрат.Вставить(Справочники.Склады.НайтиПоКоду("00913"),Справочники.СтатьиЗатрат.НайтиПоКоду("А0186"));//склад материалов //РНД
	СоответствиеСкладовСтатейЗатрат.Вставить(Справочники.Склады.НайтиПоКоду("00912"),Справочники.СтатьиЗатрат.НайтиПоКоду("А0186"));//склад материалов //СПБ
	СоответствиеСкладовСтатейЗатрат.Вставить(Справочники.Склады.НайтиПоКоду("01141"),Справочники.СтатьиЗатрат.НайтиПоКоду("А0186"));//склад материалов //ЕКТ
	
	СоответствиеСкладовСтатейЗатрат.Вставить(Справочники.Склады.НайтиПоКоду("00401"),Справочники.СтатьиЗатрат.НайтиПоКоду("А0080"));//Текущий ремонт зданий, сооружений и помещений
	
	СоответствиеСкладовСтатейЗатрат.Вставить(Справочники.Склады.НайтиПоКоду("00282"),Справочники.СтатьиЗатрат.НайтиПоКоду("А0050"));//спец одежда
	СоответствиеСкладовСтатейЗатрат.Вставить(Справочники.Склады.НайтиПоКоду("00915"),Справочники.СтатьиЗатрат.НайтиПоКоду("А0050"));//спец одежда //РНД
	СоответствиеСкладовСтатейЗатрат.Вставить(Справочники.Склады.НайтиПоКоду("00914"),Справочники.СтатьиЗатрат.НайтиПоКоду("А0050"));//спец одежда //СПБ
	СоответствиеСкладовСтатейЗатрат.Вставить(Справочники.Склады.НайтиПоКоду("01142"),Справочники.СтатьиЗатрат.НайтиПоКоду("А0050"));//спец одежда //ЕКТ
	
	ДатаОстатков=Дата;
	Если ЗначениеНеЗаполнено(Склад) тогда
		Предупреждение("Необходимо заполнить склад.");
	ИначеЕсли ВвестиДату(ДатаОстатков,"Введите дату остатков",ЧастиДаты.Дата) тогда
		Если Вопрос("Табличная часть документа будет очищена. Продолжить?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да тогда
			Материалы.Очистить();
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			             |	ТоварыНаСкладахОстатки.Номенклатура,
			             |	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Количество,
			             |	ТоварыНаСкладахОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
			             |	ТоварыНаСкладахОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
			             |	&Качество,
			             |	&СтатьяЗатрат,
			             |	ЗНАЧЕНИЕ(Перечисление.СпособыСписанияОстаткаТоваров.СоСклада) КАК СпособСписанияОстаткаТоваров
			             |ИЗ
			             |	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОст, Склад = &Склад) КАК ТоварыНаСкладахОстатки";
			Запрос.УстановитьПараметр("ДатаОст",КонецДня(ДатаОстатков));
			Запрос.УстановитьПараметр("Склад",Склад);
			Запрос.УстановитьПараметр("Качество",Справочники.Качество.Новый);
			Запрос.УстановитьПараметр("СтатьяЗатрат",СоответствиеСкладовСтатейЗатрат.Получить(Склад));
			Рез=Запрос.Выполнить().Выбрать();
			Пока Рез.Следующий() Цикл
				нстр =Материалы.Добавить();
				ЗаполнитьЗначенияСвойств(нстр,Рез);
			КонецЦикла	 
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

// {{ Коробки

Процедура ПоказатьСкладКоробки()
	
	КоробкиСкладЛок = ПолучитьСкладКоробки();
	Если НЕ КоробкиСкладЛок = Неопределено Тогда
		КоробкиСклад = КоробкиСкладЛок;
	Иначе
		КоробкиСклад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры // ПоказатьСкладКоробки()

Функция ПолучитьСкладКоробки()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЗначенияСвойствОбъектов.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект = &ДокСсылка
	|	И ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Склад)";
	
	Запрос.УстановитьПараметр("ДокСсылка", Ссылка);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		КоробкиСкладЛок = Выборка.Значение;
	Иначе
		КоробкиСкладЛок = Неопределено;
	КонецЕсли;
	
	Возврат КоробкиСкладЛок;
	
КонецФункции // ПолучитьСкладКоробки()

Процедура УдалитьЗаписьКоробкиСклад()
	
	МенеджерЗаписи = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Ссылка;
	МенеджерЗаписи.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.Склад;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.Удалить();
	
КонецПроцедуры //УдалитьЗаписьКоробкиСклад()

Процедура СоздатьЗаписьКоробкиСклад()
	
	МенеджерЗаписи = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект   = Ссылка;
	МенеджерЗаписи.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.Склад;
	МенеджерЗаписи.Значение = КоробкиСклад;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры // СоздатьЗаписьКоробкиСклад()

Процедура ЗаписатьКоробкиСклад()
	
	КоробкиСкладЛок = ПолучитьСкладКоробки();
	Если КоробкиСклад.Пустая() Тогда
		Если КоробкиСкладЛок = Неопределено Тогда
			// Ничего не делаем
		Иначе
			УдалитьЗаписьКоробкиСклад();
		КонецЕсли;
	Иначе
		Если КоробкиСклад = КоробкиСкладЛок Тогда
			// Ничего не делаем
		Иначе
			СоздатьЗаписьКоробкиСклад();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьКоробкиСклад()

Процедура КоманднаяПанельМатериалыЗаполнитьСклад(Кнопка)
	Для каждого стр из Материалы Цикл
		стр.Склад = Склад;	
	КонецЦикла;
КонецПроцедуры

Процедура КоманднаяПанельМатериалыЗаполнитьСтатьюЗатрат(Кнопка)
	Форма = Справочники.СтатьиЗатрат.ПолучитьФормуВыбора();
	рез = Форма.ОткрытьМодально();
	
	Для каждого стр из Материалы Цикл
		стр.СтатьяЗатрат = рез;	
	КонецЦикла;
КонецПроцедуры

Процедура КоманднаяПанельМатериалыЗаполнитьПодразделение(Кнопка)
	Для каждого стр из Материалы Цикл
		стр.Подразделение = Подразделение;	
	КонецЦикла;
КонецПроцедуры

Процедура МатериалыПодразделениеПриИзменении(Элемент)
	//+++Шарафутдинов 01.03.2018
	Если не ВозможностьВыбораПодразделения2018(Дата,Элемент.Значение) тогда
		Сообщить("Подразделение должно участвовать в бюджетном планировании. Выберите другое подразделение!");
		Элемент.Значение = Справочники.Подразделения.ПустаяСсылка();
		Возврат;		
	КонецЕсли;
	//---Шарафутдинов 01.03.2018
КонецПроцедуры

//=========================ПРОИЗВОДСТВО======================================

Процедура ВПроизводствоПриИзменении(Элемент)
	Если ВПроизводство тогда
		ЭлементыФормы.Панель1.Страницы.Продукция.Видимость = истина;
		ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Продукция;
		Подразделение = справочники.Подразделения.НайтиПоКоду("00195");   //Производство кованных дисков
				Склад = Подразделение.Склад;
		СписаниеМПЗ = Истина;
		СписаниеИнвентаря = ЛОЖЬ;
		СписаниеНаЗатраты = Истина;// ?! как перемещение ?!
	Иначе //Если НЕ ВПроизводство тогда
		ЭлементыФормы.Панель1.Страницы.Продукция.Видимость = ЛОЖЬ;
		Продукция.Очистить();
		Подразделение = глТекущийПользователь.основноеПодразделение;
		Склад = Подразделение.Склад;
		СписаниеМПЗ = Истина;
		СписаниеИнвентаря = ЛОЖЬ;
		СписаниеНаЗатраты = ЛОЖЬ;
	КонецЕсли;			
КонецПроцедуры

Процедура ПродукцияНоменклатураПриИзменении(Элемент)
	текСтр = ЭлементыФормы.Продукция.ТекущиеДанные;
	Если текСтр<>неопределено тогда
		текСтр.Cпецификация = ПолучитьСпецификацию(текСтр.Номенклатура);
		текСтр.ПлановаяЦена = получитьПлановуюЦену(текСтр.Номенклатура);
	КонецЕсли;	
КонецПроцедуры

функция ПолучитьСпецификацию(ГотПрод)
рез = справочники.СпецификацияГотовойПродукции.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	СпецификацияГотовойПродукции.Ссылка
	|ИЗ
	|	Справочник.СпецификацияГотовойПродукции КАК СпецификацияГотовойПродукции
	|ГДЕ
	|	СпецификацияГотовойПродукции.Номенклатура = &ГотПрод
	|
	|УПОРЯДОЧИТЬ ПО
	|	СпецификацияГотовойПродукции.Дата УБЫВ
	|АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("ГотПрод", ГотПрод);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() тогда
		рез = Выборка.Ссылка;
	КонецЕсли;
возврат рез;
КонецФункции

функция получитьПлановуюЦену(ГотПрод)
рез = 0;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЦеныНоменклатурыСрезПоследних.Цена
	               |ИЗ
	               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(,
	               |			Номенклатура = &ГотПрод
	               |				И ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних";
	Запрос.УстановитьПараметр("ГотПрод", ГотПрод);
	Запрос.УстановитьПараметр("ТипЦен", константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить() );  // Закупочная  "Ценообразование"
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() тогда
		рез = Выборка.Цена;
	КонецЕсли;
возврат рез;
КонецФункции	


Процедура ПродукцияКоличествоПриИзменении(Элемент)
	текСтр = ЭлементыФормы.Продукция.ТекущиеДанные;
	текСтр.ПлановаяСтоимость = текСтр.Количество * текСтр.ПлановаяЦена;
	//КоманднаяПанельМатериалыЗаполнитьПоПродукции(неопределено);
КонецПроцедуры


Процедура КоманднаяПанельМатериалыЗаполнитьПоПродукции(Кнопка)
	Материалы.Очистить();
	для каждого стр1 из Продукция цикл
		для каждого стр2 из стр1.Спецификация.Состав цикл // по составу каждой спецификации!
		стр3 = Материалы.Добавить();
		стр3.Номенклатура = стр2.Комплектующая;
		стр3.Количество = стр2.Количество * стр1.Количество;
		
		стр3.ЕдиницаИзмерения = стр3.Номенклатура.ЕдиницаХраненияОстатков;
		стр3.Качество = справочники.Качество.Новый;
		стр3.Коэффициент=1;
		стр3.НоменклатурнаяГруппа = стр3.Номенклатура.НоменклатурнаяГруппа;
		
		стр3.Склад = Склад;
		стр3.Подразделение = Подразделение;
		стр3.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		//стр3.СтатьяЗатрат  = справочники.СтатьиЗатрат.ПустаяСсылка();
		КонецЦикла;
	КонецЦикла;	
КонецПроцедуры




////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиМатериалы = ЭлементыФормы.Материалы.Колонки;
