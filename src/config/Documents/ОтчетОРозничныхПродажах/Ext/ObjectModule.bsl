Перем мВалютаРегламентированногоУчета Экспорт;
Перем мПроведениеИзФормы Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьОтчетаОПродажахККМ()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер КАК НомерДокумента,
	|	Дата  КАК ДатаДокумента,
	|	Организация КАК Руководители,
	|	Организация,
	|	КассаККМ,
	|	КассаККМ.Представление КАК ККМПредставление,
	|	СуммаДокумента,
	|	СуммаВключаетНДС,
	|	Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Количество,
	|		ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|		Склад.НомерСекции КАК НомерСекции,
	|		Цена,
	|		СуммаНДС,
	|		Сумма КАК Итого
	|	)
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетОРозничныхПродажах_ОтчетККМ";

	Макет = ПолучитьМакет("ОтчетККМ");

	// Выводим шапку накладной
	СведенияОПокупателе = СведенияОЮрФизЛице(Шапка.Организация,Шапка.ДатаДокумента);

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ОрганизацияПредставление = ОписаниеОрганизации(СведенияОПокупателе);
	ОбластьМакета.Параметры.ДатаДокумента     = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.ОрганизацияПоОКПО = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакета.Параметры.ОрганизацияИНН    = СведенияОПокупателе.ИНН;
	ОбластьМакета.Параметры.ПрограммаУчета    = "1С:Предприятие 8.0";
	ОбластьМакета.Параметры.НомерДокумента    = ПолучитьНомерНаПечать(ЭтотОбъект);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ТабДокумент.Вывести(ОбластьМакета);

	МассивСтрок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Товары");
	МассивСтрок[0].Свернуть("НомерСекции", "Итого, СуммаНДС");
	ТаблицаСтрок = МассивСтрок[0];

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для Каждого Строка Из ТаблицаСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(Строка);
		ОбластьМакета.Параметры.Итого = Строка.Итого 
			+ ?(Шапка.СуммаВключаетНДС, 0, Строка.СуммаНДС);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла; 

	ОбластьМакета = Макет.ПолучитьОбласть("Итог");
	СуммаИтого = ТаблицаСтрок.Итог("Итого") + ?(Шапка.СуммаВключаетНДС, 0, ТаблицаСтрок.Итог("СуммаНДС"));
	ОбластьМакета.Параметры.Итого = СуммаИтого;

	ОбластьМакета.Параметры.СуммаВыручкиПрописью = СформироватьСуммуПрописью(СуммаИтого, мВалютаРегламентированногоУчета);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Оборот");

	Руководители = ОтветственныеЛицаОрганизации(Шапка.Руководители, Шапка.ДатаДокумента,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	ОбластьМакета.Параметры.ФИОРуководителя = Руководитель;
	
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьОтчетаОПродажахККМ()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "ОтчетККМ" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьОтчетаОПродажахККМ();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();

	КонецЕсли;

	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;

	СписокМакетов.Добавить("ОтчетККМ", "КМ-6 (Справка отчет кассира-операциониста)");

	ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура выполняет заполниение табличной части проданными ТМЦ по инвентаризации товаров (розница).
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (инвентаризация Товаров (розница)).
//
Процедура ЗаполнитьТоварыПоИнвентаризацииТоваров(ДокументОснование) Экспорт

	УчитыватьНДС     = Истина;
	СуммаВключаетНДС = Истина;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументСсылка"         , Ссылка);
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка", ДокументОснование);
	Запрос.УстановитьПараметр("ТоварНовый"             , Справочники.Качество.Новый);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.Ссылка.Склад                              КАК Склад,
	|	Док.Ссылка.Склад.ВидСклада                    КАК ВидСклада,
	|	МАКСИМУМ(Док.КоличествоУчет - Док.Количество) КАК КоличествоОтклонение,
	|	ВЫБОР
	|		КОГДА СУММА(ВложенныйЗапрос.Количество) ЕСТЬ NULL ТОГДА
	|			0
	|		ИНАЧЕ
	|			СУММА(ВложенныйЗапрос.Количество)
	|	КОНЕЦ КАК КоличествоСписанное,
	|	Док.ЦенаВРознице КАК Цена,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры,
	|	Док.Качество
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК Док
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ 
	|       ДокСписание.Номенклатура,
	|       ДокСписание.ХарактеристикаНоменклатуры,
	|       ДокСписание.СерияНоменклатуры,
	|       ДокСписание.Качество,
	|       ДокСписание.Ссылка.Склад                         КАК Склад,
	|		ДокСписание.Количество                           КАК Количество,
	|       ДокСписание.Цена
	|	 ИЗ
	|       Документ.СписаниеТоваров.Товары КАК ДокСписание
	|    ГДЕ
	|       ДокСписание.Ссылка.Проведен
	|       И ДокСписание.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка
	|
	|    ОБЪЕДИНИТЬ ВСЕ
	|
	|	 ВЫБРАТЬ 
	|       ДокОтчетККМ.Номенклатура,
	|       ДокОтчетККМ.ХарактеристикаНоменклатуры,
	|       ДокОтчетККМ.СерияНоменклатуры,
	|       &ТоварНовый                                      КАК Качество,
	|       ДокОтчетККМ.Склад                                КАК Склад,
	|       ДокОтчетККМ.Количество                           КАК Количество,
	|       ДокОтчетККМ.Цена
	|	 ИЗ
	|       Документ.ОтчетОРозничныхПродажах.Товары КАК ДокОтчетККМ
	|    ГДЕ
	|       ДокОтчетККМ.Ссылка <> &ДокументСсылка
	|       И ДокОтчетККМ.Ссылка.Проведен
	|       И ДокОтчетККМ.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка) КАК ВложенныйЗапрос
	|ПО
	|      Док.Номенклатура               = ВложенныйЗапрос.Номенклатура
	|    И Док.ХарактеристикаНоменклатуры = ВложенныйЗапрос.ХарактеристикаНоменклатуры
	|    И Док.СерияНоменклатуры          = ВложенныйЗапрос.СерияНоменклатуры
	|    И Док.Качество                   = ВложенныйЗапрос.Качество
	|    И Док.Ссылка.Склад               = ВложенныйЗапрос.Склад
	|    И Док.Цена                       = ВложенныйЗапрос.Цена
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснованиеСсылка
	|   И ((Док.КоличествоУчет - Док.Количество) > 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Ссылка.Склад,
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.ЦенаВРознице,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры,
	|	Док.Качество";
	
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		КоличествоСписать = Выборка.КоличествоОтклонение - Выборка.КоличествоСписанное;
		Если КоличествоСписать <= 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = Товары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент                = Выборка.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.Количество                 = КоличествоСписать;
		СтрокаТабличнойЧасти.Цена                       = Выборка.Цена;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.Склад                      = Выборка.Склад;

		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти,    ЭтотОбъект);
		ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЦикла;

#Если Клиент Тогда
	Если Товары.Количество() = 0 Тогда
		Сообщить("В документе """ + ДокументОснование.Метаданные().Представление() + """ № " + ДокументОснование.Номер +" отсутствуют товары учетное количество которых превышает фактическое.");
	КонецЕсли;
#КонецЕсли

КонецПроцедуры // ЗаполнитьТоварыПоИнвентаризацииТоваров()

// Заолняет табличную часть по сериям при оперативном проведении
//
Процедура ЗаполнитьПоСериям() Экспорт

	ТоварыТабличнойЧасти = Товары.Выгрузить();
	ТоварыТабличнойЧасти.Свернуть("Номенклатура"); 

	МассивНоменклатуры = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");

	ТаблицаСерий = ПолучитьТаблицуОстатковПоСериям(Склад, Организация, МассивНоменклатуры);;
	ТоварыТабличнойЧасти=Товары.Выгрузить();
	Товары.Очистить();

	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;

	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл

		СтуктураПоиска = Новый Структура;
		СтуктураПоиска.Вставить("Номенклатура",               ИсходнаяСтрока.Номенклатура);
		СтуктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтуктураПоиска.Вставить("Качество",                   Справочники.Качество.Новый);
		НайденныеСтроки = ТаблицаСерий.НайтиСтроки(СтуктураПоиска);
		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;
		СтрокаСПустойСерией = Неопределено;

		Для Каждого Строка Из НайденныеСтроки Цикл
			Если КоличествоОсталосьПогасить<=0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ОстатокВЕдиницах = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
											/ ИсходнаяСтрока.Коэффициент;
			Если ОстатокВЕдиницах >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить/ОстатокВЕдиницах;
			Иначе
				КоэффСписания = 1
			КонецЕсли;

			СписанноеКоличество = Окр(ОстатокВЕдиницах * КоэффСписания, 3, РежимОкругления.Окр15как20);
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Номенклатура               = ИсходнаяСтрока.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения           = ИсходнаяСтрока.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент                = ИсходнаяСтрока.Коэффициент;
			НоваяСтрока.Цена                       = ИсходнаяСтрока.Цена;
			НоваяСтрока.ХарактеристикаНоменклатуры = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры          = Строка.СерияНоменклатуры;
			НоваяСтрока.ПроцентСкидкиНаценки       = ИсходнаяСтрока.ПроцентСкидкиНаценки;
			НоваяСтрока.ПроцентАвтоматическихСкидок       = ИсходнаяСтрока.ПроцентАвтоматическихСкидок;
			НоваяСтрока.УсловиеАвтоматическойСкидки         = ИсходнаяСтрока.УсловиеАвтоматическойСкидки;
			НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = ИсходнаяСтрока.ЗначениеУсловияАвтоматическойСкидки;
			НоваяСтрока.ДисконтнаяКарта = ИсходнаяСтрока.ДисконтнаяКарта;
			НоваяСтрока.СтавкаНДС                  = ИсходнаяСтрока.СтавкаНДС;
			НоваяСтрока.Склад                      = ИсходнаяСтрока.Склад;
			НоваяСтрока.Количество                 = СписанноеКоличество;

			РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);

			Если ЗначениеНеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;

			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток = Строка.Остаток - СписанноеКоличество * ИсходнаяСтрока.Коэффициент 
											/ ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		КонецЦикла;
		
		Если КоличествоОсталосьПогасить <> 0 Тогда
			Если СтрокаСПустойСерией = Неопределено Тогда
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Номенклатура               = ИсходнаяСтрока.Номенклатура;
				НоваяСтрока.ЕдиницаИзмерения           = ИсходнаяСтрока.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент                = ИсходнаяСтрока.Коэффициент;
				НоваяСтрока.Цена                       = ИсходнаяСтрока.Цена;
				НоваяСтрока.ХарактеристикаНоменклатуры = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
				НоваяСтрока.СерияНоменклатуры          = ИсходнаяСтрока.СерияНоменклатуры;
				НоваяСтрока.ПроцентСкидкиНаценки       = ИсходнаяСтрока.ПроцентСкидкиНаценки;
				НоваяСтрока.ПроцентАвтоматическихСкидок       = ИсходнаяСтрока.ПроцентАвтоматическихСкидок;
				НоваяСтрока.УсловиеАвтоматическойСкидки         = ИсходнаяСтрока.УсловиеАвтоматическойСкидки;
				НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = ИсходнаяСтрока.ЗначениеУсловияАвтоматическойСкидки;
				НоваяСтрока.ДисконтнаяКарта = ИсходнаяСтрока.ДисконтнаяКарта;
				НоваяСтрока.СтавкаНДС                  = ИсходнаяСтрока.СтавкаНДС;
				НоваяСтрока.Склад                      = ИсходнаяСтрока.Склад;
				НоваяСтрока.Количество                 = КоличествоОсталосьПогасить;

				РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
				РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
			Иначе
				СтрокаСПустойСерией.Количество = СтрокаСПустойСерией.Количество+КоличествоОсталосьПогасить;

				РассчитатьСуммуТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
				РассчитатьСуммуНДСТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоСериям()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Записать суммы документа в соответствующие реквизиты шапки для показа в журналах
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
Процедура РасчетСуммДокумента() Экспорт

	СуммаДокумента = Товары.Итог("Сумма");

КонецПроцедуры // РасчетСуммДокумента

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Надо добавить колонки "СуммаБезНДС"
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС"          , ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС"       , ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("Стоимость"         , ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок", ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДок"       , ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.СуммаНДС           = СтрокаТаблицы.НДС;
		СтрокаТаблицы.СуммаБезНДС        = СтрокаТаблицы.Сумма - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		СтрокаТаблицы.Стоимость          = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		Если ТаблицаТоваров.Колонки.Найти("Цена") <> Неопределено Тогда
			ТекЦена = СтрокаТаблицы.Цена;
		Иначе
			ТекЦена = СтрокаТаблицы.ЦенаВРознице;
		КонецЕсли;
		СтрокаТаблицы.СтоимостьБезСкидок = ТекЦена * СтрокаТаблицы.Количество + 
		                                   ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

		СтрокаТаблицы.Стоимость          = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, мВалютаРегламентированногоУчета, 
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                 1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 1, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.СтоимостьБезСкидок = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьБезСкидок, мВалютаРегламентированногоУчета, 
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                 1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 1, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.СуммаСНДСДок = СтрокаТаблицы.СуммаДок + ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

	КонецЦикла;
	
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуСкидок(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаДвижений = Новый ТаблицаЗначений;
	ТаблицаДвижений.Колонки.Добавить("Номенклатура");
	ТаблицаДвижений.Колонки.Добавить("ПолучательСкидки");
	ТаблицаДвижений.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаДвижений.Колонки.Добавить("УсловиеСкидки");
	ТаблицаДвижений.Колонки.Добавить("ЗначениеУсловияСкидки");
	ТаблицаДвижений.Колонки.Добавить("СуммаСкидки", ПолучитьОписаниеТиповЧисла(15,2));

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		Если ТаблицаТоваров.Колонки.Найти("Цена") <> Неопределено Тогда
			СуммаБезСкидки = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
		Иначе
			СуммаБезСкидки = СтрокаТаблицы.ЦенаВРознице * СтрокаТаблицы.Количество;
		КонецЕсли;

		СуммаСоСкидками = СуммаБезСкидки;
		СкидкиЕсть = Ложь;
		Если СтрокаТаблицы.ПроцентАвтоматическихСкидок <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ПолучательСкидки = СтрокаТаблицы.Склад;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
//			СтрокаДвижений.Качество = СтрокаТаблицы.Качество;
			СтрокаДвижений.УсловиеСкидки = СтрокаТаблицы.УсловиеАвтоматическойСкидки;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки;
			СтрокаДвижений.СуммаСкидки = Окр((СуммаБезСкидки/100) * СтрокаТаблицы.ПроцентАвтоматическихСкидок,2);
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;
		Если СтрокаТаблицы.ПроцентСкидкиНаценки <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ПолучательСкидки = СтрокаТаблицы.Склад;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
//			СтрокаДвижений.Качество = СтрокаТаблицы.Качество;
			СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.РучнаяСкидка;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ПроцентСкидкиНаценки;
			СтрокаДвижений.СуммаСкидки = Окр((СуммаБезСкидки/100) * СтрокаТаблицы.ПроцентСкидкиНаценки,2);
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;
		Разница = СтрокаТаблицы.Сумма - СуммаСоСкидками;
		Если Разница <> 0
		   И СкидкиЕсть Тогда
			СтрокаДвижений.СуммаСкидки = СтрокаДвижений.СуммаСкидки + Разница;
		КонецЕсли;
	КонецЦикла;
	ТаблицаДвижений.Свернуть("Номенклатура,ПолучательСкидки,ХарактеристикаНоменклатуры,УсловиеСкидки,ЗначениеУсловияСкидки",
	                         "СуммаСкидки");

	Возврат ТаблицаДвижений;

КонецФункции // ПодготовитьТаблицуСкидок()

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("ПроводкаСумма",       ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСуммаНДС",    ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		НДС   = СтрокаТаблицы.НДС;
		Сумма = СтрокаТаблицы.СуммаБезНДС;

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.ПроводкаСумма    = Сумма;
		СтрокаТаблицы.ПроводкаСуммаНДС = НДС;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		ТаблицаТоваров.Колонки.Цена.Имя = "ЦенаВРознице";
	КонецЕсли;
	
	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидОперации, Организация");
	
	Если  Не СтруктураШапкиДокумента.СкладВТабличнойЧасти Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
		СтруктураОбязательныхПолей.Вставить("КассаККМ");
	КонецЕсли;

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда
		Если СтруктураШапкиДокумента.ВидСклада <> Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			ОшибкаПриПроведении("При данном виде операции в качестве склада может быть выбрана 
			|только неавтоматизированная торговая точка!", Отказ, Заголовок);
		КонецЕсли;
	Иначе
		Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			ОшибкаПриПроведении("При данном виде операции в качестве склада не может быть выбрана 
			|неавтоматизированная торговая точка!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выполняет проверки,которые нужны только для упр. учета.
//
// Параметры:
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТоварыУпр(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.УчитыватьНДС И Не СтруктураШапкиДокумента.СуммаВключаетНДС Тогда
		Для каждого СтрокаТаблицы ИЗ ТаблицаПоТоварам Цикл
			Если СтрокаТаблицы.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
				ОшибкаПриПроведении("Документ не может осуществлять реализацию с неавтоматизированной торговой точки (строка " + СтрокаТаблицы.НомерСтроки + "), 
				|если НДС не включается в сумму.", Отказ, Заголовок);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	// Проверим заполнение автоматических скидок.
	Для каждого СтрокаТаблицы ИЗ ТаблицаПоТоварам Цикл
		ПроцентНеЗаполнен   = ЗначениеНеЗаполнено(СтрокаТаблицы.ПроцентАвтоматическихСкидок);
		УсловиеНеЗаполнено  = ЗначениеНеЗаполнено(СтрокаТаблицы.УсловиеАвтоматическойСкидки);
		ЗначениеНеЗаполнено = ЗначениеНеЗаполнено(СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки);

		//Если СтрокаТаблицы.Номенклатура.Услуга
		//   И (НЕ ПроцентНеЗаполнен
		//	 Или НЕ УсловиеНеЗаполнено
		//	 Или Не ЗначениеНеЗаполнено) Тогда
		//	ОшибкаПриПроведении("На услугу не может быть назначена автоматическая скидка (строка " + СтрокаТаблицы.НомерСтроки + ").", Отказ, Заголовок);
		//	Продолжить;
		//КонецЕсли;

		Если (ПроцентНеЗаполнен
		   И УсловиеНеЗаполнено
		   И ЗначениеНеЗаполнено)
		 Или (СтрокаТаблицы.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара
		 	И ЗначениеНеЗаполнено)
		 Или (НЕ ПроцентНеЗаполнен
		   И  НЕ УсловиеНеЗаполнено
		   И  НЕ ЗначениеНеЗаполнено)Тогда // Ошибок нет.
				
		Иначе
			Если НЕ ПроцентНеЗаполнен
			   И  НЕ УсловиеНеЗаполнено
			   И  ТипЗнч(СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки) = Тип("Число")
			   И  СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки = 0 Тогда
				// Ошибок нет.
			Иначе
				СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
				                               """ табличной части ""Товары"": ";
				Если ПроцентНеЗаполнен Тогда
					СтрокаСообщения = "Не заполнено значение реквизита ""Процент автоматической скидки""!";
					ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
				Если УсловиеНеЗаполнено Тогда
					СтрокаСообщения = "Не заполнено значение реквизита ""Условие автоматической скидки""!";
					ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
				Если ЗначениеНеЗаполнено Тогда
					СтрокаСообщения = "Не заполнено значение реквизита ""Значение условия автоматической скидки""!";
					ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТоварыУпр

// Проверяет правильность заполнения строк табличной части "Товары".
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество, Сумма, СтавкаНДС");

	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");

	КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	ПроверитьЗаполнениеТабличнойЧастиТоварыУпр(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоСкидкам, Отказ, Заголовок);

	// По некоторым регистрам услуги проводить не нужно.
	// Подготовим отдельную таблицу.
	ТаблицаПоТоварамБезУслуг = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамБезУслуг.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамБезУслуг.Получить(Сч);
		Если СтрокаТаблицы.Услуга Тогда
			 ТаблицаПоТоварамБезУслуг.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоСкидкам,
	                       ТаблицаПоТоварамБезУслуг,Отказ, Заголовок);

	ДвиженияПоТоварамОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварамБезУслуг, Отказ, Заголовок);

	ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварамБезУслуг, Отказ, Заголовок);

	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварамБезУслуг, Отказ, Заголовок);
	
	УчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата);
	
	Если УчетнаяПолитика.СписыватьПартииПриПроведенииДокументов Тогда

		ТаблицаПартийНов = Движения.СписанныеТовары.Выгрузить();
		
		// Данная ветка пока не нужна. 
		//ТаблицаПартийСвернутая = Движения.СписанныеТовары.Выгрузить();
		//Отбор = Новый Структура;
		//Отбор.Вставить("КодОперацииПартииТоваров",Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя);
		//Массив = ТаблицаПартийСвернутая.НайтиСтроки(Отбор);
		//
		//Для каждого Эл из Массив Цикл
		//	Если Эл.Количество>0 Тогда 
		//		Эл.Количество=-Эл.Количество;
		//	КонецЕсли;
		//КонецЦикла;
		
		//Индекс	Значение элемента	Тип элемента	Период	Регистратор	НомерСтроки	Активность	НомерСтрокиДокумента	ВозвратОтПокупателяДокументПартии	ДоговорКонтрагента	ДокументПередачи	ДопустимыйСтатус1	ДопустимыйСтатус2	ДопустимыйСтатус3	ДопустимыйСтатус4	ДопустимыйСтатусПередачи	ЗаказПартии	ЗаказСписания	Качество	КачествоНовое	КодОперацииПартииТоваров	Количество	Номенклатура	НоменклатурнаяГруппа	Организация	ОтражатьВБухгалтерскомУчете	ОтражатьВНалоговомУчете	ОтражатьВУправленческомУчете	Подразделение	ПоступлениеПриходныйОрдер	СерияНоменклатуры	СерияНоменклатурыНовая	Склад	СкладПолучатель	СписыватьСторнированием	СписыватьТолькоПоЗаказу	СтавкаНДС	СтатусПередачи	СтатьяЗатрат	СтоимостьПоступление	СуммаЗадолженностиБУ	ХарактеристикаНоменклатуры	ХарактеристикаНоменклатурыНовая	КорВалютаЗадолженностиБУ	КорВалютнаяСуммаЗадолженностиБУ	КоличествоПоступление	НоменклатураНовая	ДокументОприходованияНовый	СтоимостьПоступлениеБУ	СуммаНДС	СуммаЗадолженности	ВалютаДокумента	КурсДокумента	КратностьДокумента	ВидСклада	НеСписывать	ОсновнойДокумент	ОсновноеСредство	МоментВремени
		//ТаблицаПартийСвернутая.Свернуть("Период,Регистратор,Активность,ВозвратОтПокупателяДокументПартии,ДоговорКонтрагента,ДопустимыйСтатус1,ДопустимыйСтатус2,ДопустимыйСтатус3,ДопустимыйСтатус4,ДопустимыйСтатусПередачи,ЗаказПартии,ЗаказСписания,Качество,КачествоНовое,Номенклатура,НоменклатурнаяГруппа,ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете,ОтражатьВУправленческомУчете,Подразделение,ПоступлениеПриходныйОрдер,СерияНоменклатуры,СерияНоменклатурыНовая,Склад,СкладПолучатель,СписыватьСторнированием,СписыватьТолькоПоЗаказу,СтавкаНДС,СтатусПередачи,СтатьяЗатрат,СтоимостьПоступление,ХарактеристикаНоменклатуры,ХарактеристикаНоменклатурыНовая,КорВалютаЗадолженностиБУ,НоменклатураНовая,ДокументОприходованияНовый,ВалютаДокумента,КурсДокумента,КратностьДокумента,ВидСклада,НеСписывать,ОсновнойДокумент,ОсновноеСредство,МоментВремени","Количество");
		//
		//Для каждого Эл из ТаблицаПартийСвернутая Цикл
		//	Если (Эл.Количество=0) Тогда 
		//		// Ищем эти строки и удаляем их
		//		Отбор = новый Структура;
		//		Отбор.Вставить("Период",Эл.Период);
		//		Отбор.Вставить("Регистратор",Эл.Регистратор);
		//		Отбор.Вставить("Активность",Эл.Активность);
		//		Отбор.Вставить("ВозвратОтПокупателяДокументПартии",Эл.ВозвратОтПокупателяДокументПартии);
		//		Отбор.Вставить("ДоговорКонтрагента",Эл.ДоговорКонтрагента);
		//		Отбор.Вставить("ДопустимыйСтатус1",Эл.ДопустимыйСтатус1);
		//		Отбор.Вставить("ДопустимыйСтатус2",Эл.ДопустимыйСтатус2);
		//		Отбор.Вставить("ДопустимыйСтатус3",Эл.ДопустимыйСтатус3);
		//		Отбор.Вставить("ДопустимыйСтатус4",Эл.ДопустимыйСтатус4);
		//		Отбор.Вставить("ДопустимыйСтатусПередачи",Эл.ДопустимыйСтатусПередачи);
		//		Отбор.Вставить("ЗаказПартии",Эл.ЗаказПартии);
		//		Отбор.Вставить("ЗаказСписания",Эл.ЗаказСписания);
		//		Отбор.Вставить("Качество",Эл.Качество);
		//		Отбор.Вставить("КачествоНовое",Эл.КачествоНовое);
		//		Отбор.Вставить("Номенклатура",Эл.Номенклатура);
		//		Отбор.Вставить("НоменклатурнаяГруппа",Эл.НоменклатурнаяГруппа);
		//		Отбор.Вставить("ОтражатьВБухгалтерскомУчете",Эл.ОтражатьВБухгалтерскомУчете);
		//		Отбор.Вставить("ОтражатьВНалоговомУчете",Эл.ОтражатьВНалоговомУчете);
		//		Отбор.Вставить("ОтражатьВУправленческомУчете",Эл.ОтражатьВУправленческомУчете);
		//		Отбор.Вставить("Подразделение",Эл.Подразделение);
		//		Отбор.Вставить("ПоступлениеПриходныйОрдер",Эл.ПоступлениеПриходныйОрдер);
		//		Отбор.Вставить("СерияНоменклатуры",Эл.СерияНоменклатуры);
		//		Отбор.Вставить("СерияНоменклатурыНовая",Эл.СерияНоменклатурыНовая);
		//		Отбор.Вставить("Склад",Эл.Склад);
		//		Отбор.Вставить("СкладПолучатель",Эл.СкладПолучатель);
		//		Отбор.Вставить("СписыватьСторнированием",Эл.СписыватьСторнированием);
		//		Отбор.Вставить("СписыватьТолькоПоЗаказу",Эл.СписыватьТолькоПоЗаказу);
		//		Отбор.Вставить("СтавкаНДС",Эл.СтавкаНДС);
		//		Отбор.Вставить("СтатусПередачи",Эл.СтатусПередачи);
		//		Отбор.Вставить("СтатьяЗатрат",Эл.СтатьяЗатрат);
		//		Отбор.Вставить("СтоимостьПоступление",Эл.СтоимостьПоступление);
		//		Отбор.Вставить("ХарактеристикаНоменклатуры",Эл.ХарактеристикаНоменклатуры);
		//		Отбор.Вставить("ХарактеристикаНоменклатурыНовая",Эл.ХарактеристикаНоменклатурыНовая);
		//		Отбор.Вставить("КорВалютаЗадолженностиБУ",Эл.КорВалютаЗадолженностиБУ);
		//		Отбор.Вставить("НоменклатураНовая",Эл.НоменклатураНовая);
		//		Отбор.Вставить("ДокументОприходованияНовый",Эл.ДокументОприходованияНовый);
		//		Отбор.Вставить("ВалютаДокумента",Эл.ВалютаДокумента);
		//		Отбор.Вставить("КурсДокумента",Эл.КурсДокумента);
		//		Отбор.Вставить("КратностьДокумента",Эл.КратностьДокумента);
		//		Отбор.Вставить("ВидСклада",Эл.ВидСклада);
		//		Отбор.Вставить("НеСписывать",Эл.НеСписывать);
		//		Отбор.Вставить("ОсновнойДокумент",Эл.ОсновнойДокумент);
		//		Отбор.Вставить("ОсновноеСредство",Эл.ОсновноеСредство);
		//		Отбор.Вставить("МоментВремени",Эл.МоментВремени);
		//		
		//		МассивСтрокУд = ТаблицаПартийНов.НайтиСтроки(Отбор);
		//		
		//		Для каждого Эл1 из МассивСтрокУд Цикл
		//			ТаблицаПартийНов.Удалить(Эл1);
		//		КонецЦикла;				
		//	КонецЕсли;
		//КонецЦикла;
		
		ДвижениеПартийТоваров(Ссылка, ТаблицаПартийНов);

		Если ОтражатьВУправленческомУчете Тогда
			ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
			ЗаписьРегистрации.Период = Дата;
			ЗаписьРегистрации.Регистратор = Ссылка;
		КонецЕсли;

	Иначе
		
		// В неоперативном режиме границы последовательностей сдвигаются назад, если они позже документа.
		Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
			СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете)
		КонецЕсли;
		
	КонецЕсли;

	Если (Константы.РаботаСУслугамиПоРегистрам.Получить()) Тогда 
		ДвиженияПоРегистрамУслуг(СтруктураШапкиДокумента, ТаблицаПоТоварамБезУслуг, Отказ);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоСкидкам,
                                 ТаблицаПоТоварамБезУслуг, Отказ, Заголовок)
	
	Если ОтражатьВУправленческомУчете Тогда

		// По регистру РозничнаяВыручка.
		НаборДвижений = Движения.РозничнаяВыручка;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		// Заполним таблицу движений.
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		Если ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
			СтрокаДвижений.РозничнаяТочка = КассаККМ;
		Иначе
			СтрокаДвижений.РозничнаяТочка = Склад;
		КонецЕсли;
		СтрокаДвижений.Сумма              = СуммаДокумента;
		СтрокаДвижений.СуммаБезнал		  =	СуммаБезнал;
		СтрокаДвижений.Подразделение      = Подразделение;

		НаборДвижений.мПериод             = Дата;
		НаборДвижений.мТаблицаДвижений    = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.РозничнаяВыручка.ВыполнитьПриход();
		КонецЕсли;

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах или ТоварыВНеавтоматизированныхТорговыхТочках.
		
		ТаблицаНаСкладах = ТаблицаПоТоварамБезУслуг.Скопировать();
		Сч = 0;
		Пока Сч < ТаблицаНаСкладах.Количество() Цикл
			СтрокаТаблицы = ТаблицаНаСкладах.Получить(Сч);
			Если СтрокаТаблицы.Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
				 ТаблицаНаСкладах.Удалить(СтрокаТаблицы);
			Иначе 
				Сч = Сч + 1;
			КонецЕсли; 
		КонецЦикла;
		
		Если ТаблицаНаСкладах.Количество() > 0 Тогда
			
			НаборДвижений = Движения.ТоварыНаСкладах;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();

		// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаНаСкладах, ТаблицаДвижений);
			
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
			
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;
			
			Если Не Отказ Тогда
				Движения.ТоварыНаСкладах.ВыполнитьРасход();
			КонецЕсли;

		КонецЕсли;

		ТаблицаВНТТ = ТаблицаПоТоварамБезУслуг.Скопировать();
		Сч = 0;
		Пока Сч < ТаблицаВНТТ.Количество() Цикл
			СтрокаТаблицы = ТаблицаВНТТ.Получить(Сч);
			Если СтрокаТаблицы.Склад.ВидСклада <> Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
				 ТаблицаВНТТ.Удалить(СтрокаТаблицы);
			Иначе 
				Сч = Сч + 1;
			КонецЕсли; 
		КонецЦикла;
		
		Если ТаблицаВНТТ.Количество() > 0 Тогда
			
			НаборДвижений = Движения.ТоварыВНеавтоматизированныхТорговыхТочках;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();

			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаВНТТ, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Товар, "ТоварТара");

			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			// Проверка осатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;

			Если Не Отказ Тогда
				Движения.ТоварыВНеавтоматизированныхТорговыхТочках.ВыполнитьРасход();
			КонецЕсли;

		КонецЕсли;

		// ТОВАРЫ ПО РЕГИСТРУ Продажи.

		НаборДвижений   = Движения.Продажи;
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		// Заполним таблицу движений.
		
		//+++( 19.10.2015--------ссылка на заказ покупателя--------------------
		
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,       "ДокументПродажи");
		ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
		ТаблицаДвижений.ЗаполнитьЗначения(Проект,       "Проект");
		
		Попытка
			// Сакулина. ПРоверяем на основной договор по покупателю и Покупателю ЯШТ
			//ДоговорКонтрагента = Товары[0].ДокументОснование.ДоговорКонтрагента;
			// Сакулина. ПРоверяем на основной договор по покупателю и Покупателю ЯШТ
			Для каждого Стр из ТаблицаДвижений Цикл
				Стр.ДоговорКонтрагента = Стр.ЗаказПокупателя.ДоговорКонтрагента;
			КонецЦикла;
 		Исключение 
			;                                                         
		КонецПопытки;
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.Продажи.ВыполнитьДвижения();
		КонецЕсли;

		// ТОВАРЫ ПО РЕГИСТРУ СкидкиСПродаж.

		НаборДвижений = Движения.ПредоставленныеСкидки;

		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоСкидкам, ТаблицаДвижений);

		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументСкидки");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ПредоставленныеСкидки.ВыполнитьДвижения();
		КонецЕсли;

		// снимаем с остатка или резерва только в случае если проводится закрытие по заказам автозапчасти
		Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПродажаАвтозапчастей") Тогда
			
			// ТОВАРЫ ПО РЕГИСТРУ ТоварыВРезервеНаСкладах.
			
			ТаблицаПоТоварамВРезерве= ТаблицаНаСкладах.Скопировать();
			Сч = 0;
			Пока Сч < ТаблицаПоТоварамВРезерве.Количество() Цикл
				СтрокаТаблицы = ТаблицаПоТоварамВРезерве.Получить(Сч);
				Если СтрокаТаблицы.СпособСписанияОстаткаТоваров <> Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва 
					или (ЗначениеНеЗаполнено(СтрокаТаблицы.ДокументОснование) и ТипЗнч(СтрокаТаблицы.ДокументОснование)<>Тип("ДокументСсылка.ЗаказПокупателя")) Тогда
					ТаблицаПоТоварамВРезерве.Удалить(СтрокаТаблицы);
				Иначе 
					Сч = Сч + 1;
				КонецЕсли; 
			КонецЦикла;
			
			Если ТаблицаПоТоварамВРезерве.Количество()>0 Тогда
				ТаблицаПоТоварамВРезерве.Колонки.ДокументОснование.Имя="ДокументРезерва";
				НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
				
				ТаблицаДвижений = НаборДвижений.Выгрузить();
				ТаблицаДвижений.Очистить();
				
				// Заполним таблицу движений.
				ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамВРезерве, ТаблицаДвижений);
				
				НаборДвижений.мПериод            = Дата;
				НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
				
				Если Не Отказ Тогда
					Движения.ТоварыВРезервеНаСкладах.ВыполнитьРасход();
				КонецЕсли;
				
				// ТОВАРЫ ПО РЕГИСТРУ ЗаказыПокупателей.
				
				//ТаблицаПоТоварамВРезерве.Колонки.ДокументРезерва.Имя="ЗаказПокупателя";
				//ТаблицаПоТоварамВРезерве.Колонки.Сумма.Имя="СуммаУпр";
				//НаборДвижений = Движения.ЗаказыПокупателей;
				//
				//ТаблицаДвижений = НаборДвижений.Выгрузить();
				//ТаблицаДвижений.Очистить();
				//ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамВРезерве, ТаблицаДвижений);
				//// Заполним таблицу движений.
				//
				//ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,"СтатусПартии");
				//
				//Для каждого ДвижениеЗаказыПокупателей из ТаблицаДвижений Цикл
				//	ДвижениеЗаказыПокупателей.ДоговорКонтрагента=ДвижениеЗаказыПокупателей.ЗаказПокупателя.ДоговорКонтрагента;
				//	ДвижениеЗаказыПокупателей.ЕдиницаИзмерения=ДвижениеЗаказыПокупателей.Номенклатура.ЕдиницаХраненияОстатков;
				//	ДвижениеЗаказыПокупателей.СуммаВзаиморасчетов=ДвижениеЗаказыПокупателей.СуммаУпр;
				//КонецЦикла;	
				//
				//НаборДвижений.мПериод            = Дата;
				//НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
				//
				//Если Не Отказ Тогда
				//	Движения.ЗаказыПокупателей.ВыполнитьРасход();
				//КонецЕсли;
			КонецЕсли;
	  КонецЕсли;
	КонецЕсли; // Если ОтражатьВУправленческомУчете
	
	Если не отказ Тогда 
		Список = Товары.ВыгрузитьКолонку("ДокументОснование");
		ВыполнитьДвиженияПоЗакрытиюЗаказовПокупателей(Список);		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьДвиженияПоЗакрытиюЗаказовПокупателей(Список)		
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДоговорКонтрагента,
	               |	ЗаказПокупателя,
	               |	СтатусПартии,
	               |	Номенклатура,
	               |	ХарактеристикаНоменклатуры,
	               |	Цена,
	               |	ЕдиницаИзмерения,
	               |	ПроцентСкидкиНаценки,
	               |	ПроцентАвтоматическихСкидок,
	               |	УсловиеАвтоматическойСкидки,
	               |	ЗначениеУсловияАвтоматическойСкидки,
	               |	КоличествоОстаток КАК Количество,
	               |	СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	               |	СуммаУпрОстаток КАК СуммаУпр
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя в (&ЗаказПокупателя)) Упорядочить по ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("ЗаказПокупателя", Список);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	//Отказ = (Выборка.Количество()=0); // если уже все закрыто - то ничего...
	//ПометкаУдаления = Отказ; // 
	
   СуммаДокумента = 0;
	Пока Выборка.Следующий() Цикл
		Движение = Движения.ЗаказыПокупателей.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Дата;
		ЗаполнитьЗначенияСвойств(Движение, Выборка);
		СуммаДокумента = СуммаДокумента + Выборка.СуммаВзаиморасчетов; //для Структуры подчиненности
	КонецЦикла;
	
	//+++( 06.11.2014 закрытие резервов по Размещению заказов покупателей
	ТаблицаПоРазмещению = ПодготовитьТаблицуПоРазмещениюУпр(Список);
	для i=0 по ТаблицаПоРазмещению.Количество()-1 цикл
		Движение = Движения.РазмещениеЗаказовПокупателей.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход; // закрывает в 0 именно этот заказ по всем товарам, которые еще числятся в 
		Движение.Период = Дата;
		ЗаполнитьЗначенияСвойств(Движение, ТаблицаПоРазмещению[i]);
	КонецЦикла;
	//+++)
	
КонецПроцедуры	// ОбработкаПроведения()


//+++ 06.11.2014 функция как в документе "Закрытии заказов покупателей"
Функция ПодготовитьТаблицуПоРазмещениюУпр(Список)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментДокумента",    МоментВремени());
	Запрос.УстановитьПараметр("ЗаказПокупателя",    Список);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РазмещениеЗаказовПокупателейОстатки.ЗаказПоставщику,
	               |	РазмещениеЗаказовПокупателейОстатки.Номенклатура,
	               |	РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры,
	               |	РазмещениеЗаказовПокупателейОстатки.ТоварТара,
	               |	РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя,
	               |	РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток КАК Количество
	               |ИЗ
	               |	РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&МоментДокумента, ЗаказПокупателя в (&ЗаказПокупателя)) КАК РазмещениеЗаказовПокупателейОстатки
	               |ГДЕ
	               |	РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток <> 0";
	
	ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗаказов;

КонецФункции // ПодготовитьТаблицуПоРазмещениюУпр()

Процедура ДвиженияПоТоварамОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварамБезУслуг, Отказ, Заголовок)

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.

	НаборДвижений = Движения.ТоварыОрганизаций;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамБезУслуг, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	// Проверка осатков при оперативном проведении.
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;

	Если Не Отказ Тогда
		Движения.ТоварыОрганизаций.ВыполнитьРасход();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,"ДопустимыйСтатус3");

	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	
	// Данные для заполнения отчетов комитенту
	ТаблицаДвижений.ЗаполнитьЗначения(мВалютаРегламентированногоУчета, "ВалютаДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(1, "КурсДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(1, "КратностьДокумента");
			
	Для каждого Строка Из ТаблицаДвижений Цикл
		
		СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));
		Строка.СуммаЗадолженности   = СтрокаТЧ.СуммаСНДСДок;
	КонецЦикла;

КонецПроцедуры 

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(Организация,   "Организация");
	
	Для каждого Строка Из ТаблицаДвижений Цикл

		СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));

		Строка.СуммаЗадолженностиБУ = СтрокаТЧ.ПроводкаСумма+СтрокаТЧ.ПроводкаСуммаНДС;
		
		Строка.СуммаНДС = СтрокаТЧ.ПроводкаСуммаНДС;
		
		// Если склад указан только в шапке
		Если ЗначениеНеЗаполнено(Строка.ВидСклада) Тогда
			Строка.ВидСклада = Склад.ВидСклада;
		КонецЕсли;

	КонецЦикла;
	
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВБухгалтерскомУчете,"ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВНалоговомУчете,      "ОтражатьВНалоговомУчете");
	
КонецПроцедуры 

Процедура ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварамБезУслуг, Отказ, Заголовок)
	
	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.

	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	//04.03.16 Смирнов, чтоб в рег. Продажи себестоимость писался заказ
	ТаблицаДвижений.Колонки.Добавить("ЗаказПокупателя");
    //Смирнов

	// Заполним таблицу движений.
	ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамБезУслуг, ТаблицаДвижений);

	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
		//04.03.16 Смирнов, чтоб в рег. Продажи себестоимость писался заказ
		строка.ЗаказСписания = строка.ЗаказПокупателя;
	КонецЦикла;
	//04.03.16 Смирнов, чтоб в рег. Продажи себестоимость писался заказ
	ТаблицаДвижений.Колонки.Удалить(ТаблицаДвижений.Колонки.Индекс(ТаблицаДвижений.Колонки.Найти("ЗаказПокупателя")));
	//Смирнов

	// Если ПУ по складам не ведется - очищаем
	Если НЕ СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Склад");
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварамБезУслуг);
	
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварамБезУслуг);

	// Код операции
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.РеализацияРозница, "КодОперацииПартииТоваров");
	
	// Документ может содержать возвраты - движения с -. Они имеют код "Возврат"
	Для каждого Строка Из ТаблицаДвижений Цикл
		
		Если Строка.Количество<0 Тогда
			Строка.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя;
			Строка.Количество = - Строка.Количество;
		КонецЕсли;
		
	КонецЦикла;


	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки" и "НДСПродажи"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварамБезУслуг, Отказ, Заголовок)

	ТаблицаДвиженийПродажи = Движения.НДСПродажи.Выгрузить();
	ТаблицаДвиженийПродажи.Очистить();

	ПараметрыУчетнойПолитики = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.ПолучитьПоследнее(СтруктураШапкиДокумента.Дата, Новый Структура("Организация", СтруктураШапкиДокумента.Организация));

	Если НЕ ПараметрыУчетнойПолитики.СложныйУчетНДС Тогда
		// По товарам движения формируются только когда нет сложного учета НДС
		СформироватьДвиженияВыбытияПоРегиструНДСПродажи(СтруктураШапкиДокумента, ПараметрыУчетнойПолитики, ТаблицаПоТоварамБезУслуг, ТаблицаДвиженийПродажи);
	КонецЕсли;
	
	Если ТаблицаДвиженийПродажи.Количество() > 0 Тогда
		Движения.НДСПродажи.мПериод          = Дата;
		Движения.НДСПродажи.мТаблицаДвижений = ТаблицаДвиженийПродажи;
		Движения.НДСПродажи.ДобавитьДвижение();
		Движения.НДСПродажи.Записать();
	КонецЕсли;

КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда

		ФлагСкладНТТ = (НЕ ЗначениеНеЗаполнено(Основание.Склад)
		                 И Основание.Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка);

		Если НЕ ФлагСкладНТТ Тогда
			Возврат;
		КонецЕсли;

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ИнвентаризацияТоваровНаСкладе = Основание;
		ТипЦен                        = Склад.ТипЦенРозничнойТорговли;
		ВидОперации                   = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах;

		ЗаполнитьТоварыПоИнвентаризацииТоваров(Основание);

	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	яштДокументОбъектПередЗаписью(ЭтотОбъект, Отказ);
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары");

	СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект);

	// Заполним реквизит склад в табличной части "Товары"
	УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
	СкладИзШапки    =  (УказаниеСкладов <> Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
		             И (УказаниеСкладов <> Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);
	Для каждого СтрокаТЧ из Товары Цикл
		Если СкладИзШапки ИЛИ ЗначениеНеЗаполнено(СтрокаТЧ.Склад) Тогда
			СтрокаТЧ.Склад = Склад;
		КонецЕсли;
	КонецЦикла;

	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 

	ЗарегистрироватьОбъект(ЭтотОбъект,Отказ,мПроведениеИзФормы);
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Для определения где нужно проверять склад: в шапке или в ТЧ.
	УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
	СкладВТабличнойЧасти =    (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
		                  Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);
	СтруктураШапкиДокумента.Вставить("СкладВТабличнойЧасти", СкладВТабличнойЧасти);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = СформироватьДеревоПолейЗапросаПоШапке();
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы",       "ВалютаУправленческогоУчета",     "ВалютаУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы",       "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "ВестиПартионныйУчетПоСкладам",   "ВестиПартионныйУчетПоСкладам");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад",           "ВидСклада",                      "ВидСклада");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Проверим допустимость для пользователя цен документа
	ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Товары", Отказ);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Склад"                            , "Склад");
	СтруктураПолей.Вставить("ВидСклада"                        , "Склад.ВидСклада");
	СтруктураПолей.Вставить("Номенклатура"                     , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                           , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                            , "Номенклатура.Набор");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"             , "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("Цена"                             , "Цена");
	СтруктураПолей.Вставить("Сумма"                            , "Сумма");
	СтруктураПолей.Вставить("СуммаДок"                         , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                        , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                              , "СуммаНДС");
	СтруктураПолей.Вставить("НДСДок"                           , "СуммаНДС");
	СтруктураПолей.Вставить("НомерСтроки"                      , "НомерСтроки");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"       , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"                , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"             , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ПроцентАвтоматическихСкидок"      , "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("УсловиеАвтоматическойСкидки"      , "УсловиеАвтоматическойСкидки");
	СтруктураПолей.Вставить("ЗначениеУсловияАвтоматическойСкидки" , "ЗначениеУсловияАвтоматическойСкидки");
	СтруктураПолей.Вставить("ДисконтнаяКарта"      , "ДисконтнаяКарта");
	СтруктураПолей.Вставить("БезналичнаяОплата"                , "БезналичнаяОплата");
	
	// { Лапенков для Автозапчастей
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПродажаАвтозапчастей") Тогда
	СтруктураПолей.Вставить("СпособСписанияОстаткаТоваров"                , "СпособСписанияОстаткаТоваров");
	СтруктураПолей.Вставить("ДокументОснование"                , "ДокументОснование");
	КонецЕсли;
    // } Лапенков для Автозапчастей

	//+++ 19.10.2015 для регистра Продаж
	СтруктураПолей.Вставить("ЗаказПокупателя"                , "ДокументОснование");

	РезультатЗапросаПоТоварам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоСкидкам = ПодготовитьТаблицуСкидок( ТаблицаПоТоварам, СтруктураШапкиДокумента);

	ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Истина);

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоСкидкам, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	// Удаление записей регистрации из всех последовательностей
	Для Каждого НаборЗаписейРегистрацииВПоследовательности Из ПринадлежностьПоследовательностям Цикл
		НаборЗаписейРегистрацииВПоследовательности.Очистить();
		НаборЗаписейРегистрацииВПоследовательности.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамУслуг(СтруктураШапкиДокумента, ТаблицаПоТоварамБезУслуг, Отказ)
	
	ДвиженияПоСтатистике = Движения.СтатистикаПоУслугамН;
	
	Для Каждого Тов из Товары Цикл
		
		Если (Тов.Услуги) Тогда 
			Движение = ДвиженияПоСтатистике.Добавить();
			Движение.АвтоСкидка = Тов.ПроцентАвтоматическихСкидок;
			Движение.РучнаяСкидка = Тов.ПроцентСкидкиНаценки;
			Движение.Количество = Тов.Количество;
			Движение.МаркаИНомерАвтомобиля = Тов.Автомобиль;
			Движение.Номенклатура = Тов.Номенклатура;
			Движение.Период = Тов.ДатаВремя;
			Движение.Подразделение = Подразделение;
			Движение.Сумма = Тов.Сумма;
			Движение.Цена = Тов.Цена;
		Конецесли;
		
	КонецЦикла;
	
	ДвиженияПоПерсонификации = Движения.ВыработкаСотрудников;
	
	Для Каждого Стр из ТаблицаБригады Цикл
		
			Движение = ДвиженияПоПерсонификации.Добавить();
			Движение.Автомобиль = Стр.Автомобиль;
			Движение.Активность = Истина;
			Движение.Исполнитель = Стр.Исполнитель;
			Движение.Количество = Стр.Количество;
			Движение.Период = Стр.ДатаВремя;
			Движение.Работа = Стр.Работа;
			Движение.СуммаУпр = Стр.СуммаУпр;
			Движение.СуммаУпрСоСкидкой = Стр.СуммаУпрСоСкидкой;
			Движение.Цех = Стр.Цех;
		
	КонецЦикла;
	
КонецПроцедуры


мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мПроведениеИзФормы = истина;