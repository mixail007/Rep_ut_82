////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит текущее значение учетной политики розничная торговля облагается ЕНВД
Перем мРозничнаяТорговляОблагаетсяЕНВД;

// Хранит текущее значение склада для контроля учетной политики розничная торговля облагается ЕНВД
Перем мТекущийСклад;

// Устанавливается в значение "Истина", если пользователю можно менять цену
// в документе
Перем мМожноМенятьЦенуВДокументе;

Перем мКолонкиТовары;

Перем мПечатнаяФормаПоУмолчанию;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция формирует список запросов для передачи в форму подбора.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора()

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Если Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		СписокЗапросов.Добавить("ОстаткиНеавтоматизированнаяТорговаяТочка", "По остаткам и ценам номенклатуры в торговой точке");
	Иначе // Склад - простая розничная торговая точка
		СписокЗапросов.Добавить("РасходЦеныНоменклатуры", "По ценам номенклатуры");
		СписокЗапросов.Добавить("РасходОстаткиИЦеныНоменклатуры", "По остаткам и ценам номенклатуры");
	КонецЕсли;
	
	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	ЕстьЦена  = мМожноМенятьЦенуВДокументе;
	ЕстьСерия = Истина;

	Если Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам;
		ТипЦенДляЗапроса    = Склад.ТипЦенРозничнойТорговли;
	Иначе
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
		ТипЦенДляЗапроса    = ТипЦен;
	КонецЕсли;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора();
	ПредставлениеДок   = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда", "ПодборВТабличнуюЧастьТовары");
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора", СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов",        ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад",               Склад);
	СтруктураПараметровПодбора.Вставить("ТипЦен",              ТипЦенДляЗапроса);
	СтруктураПараметровПодбора.Вставить("Организация",         Организация);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента",  Неопределено);
	СтруктураПараметровПодбора.Вставить("Контрагент",          Неопределено);
	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен", СпособЗаполненияЦен);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена",            ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия",           ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента",     мВалютаРегламентированногоУчета);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер);

	ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, Цена, Характеристика, Серия;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены",          ВалютаЦены);
	ЗначениеВыбора.Свойство("Номенклатура",        Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения",    ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество",          Количество);
	ЗначениеВыбора.Свойство("Цена",                Цена);
	ЗначениеВыбора.Свойство("Характеристика",      Характеристика);
	ЗначениеВыбора.Свойство("Серия",               Серия);

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Номенклатура",               Номенклатура);
	СтруктураОтбора.Вставить("ЕдиницаИзмерения",           ЕдиницаИзмерения);
	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	СтруктураОтбора.Вставить("СерияНоменклатуры",          Серия);
	
	// Пересчитаем цену в валюту регламентированного учета
	СтруктураКурса = ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, Дата);
	Цена           = ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, мВалютаРегламентированногоУчета, СтруктураКурса.Курс, СтруктураКурса.Кратность, Дата);

	// Для розницы цены хранятся с НДС - запрос возвращает уже корректную цену
	Если СпособЗаполненияЦен <> Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам Тогда
		Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, СпособЗаполненияЦен, ТипЦен.ЦенаВключаетНДС,
		       УчитыватьНДС, СуммаВключаетНДС, ПолучитьСтавкуНДС(Номенклатура.СтавкаНДС));

		СтруктураОтбора.Вставить("Цена", Окр(Цена, 2));
	КонецЕсли;

	СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

		// Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Склад                      = Склад;
		СтрокаТабличнойЧасти.Номенклатура               = Номенклатура;
		СтрокаТабличнойЧасти.Количество                 = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент                = ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;

		// Заполняем реквизиты табличной части.
		ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект); 

		СтрокаТабличнойЧасти.Цена = Цена;

		// Рассчитываем реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	КонецЕсли;

	ТабличнаяЧастьИмя = "Товары";
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();

	ИспользоватьКолонкуСкладПриПродаже =    (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
										Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);

	Если НЕ ИспользоватьКолонкуСкладПриПродаже Тогда
		ТекСклад = Склад;
	Иначе
		ТекСклад = СтрокаТабличнойЧасти.Склад;
	КонецЕсли;

	Если НЕ ЗначениеНеЗаполнено(ТекСклад) Тогда
		Если ТекСклад.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
			ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект,
												мВалютаРегламентированногоУчета, мВалютаРегламентированногоУчета,
												ТипЦен);
		ИначеЕсли ТекСклад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			ЗаполнитьЕдиницуРозничнуюЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекСклад,
												мВалютаРегламентированногоУчета);
		ИначеЕсли ТекСклад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
			ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект,
												мВалютаРегламентированногоУчета, мВалютаРегламентированногоУчета,
												ТекСклад.ТипЦенРозничнойТорговли);
		КонецЕсли;
	КонецЕсли;

	// Поменяем способ редактирования цены.
	УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Склад, СтрокаТабличнойЧасти.Номенклатура);

КонецПроцедуры

// Производит заполнение и установку необходимых полей при изменении характеристики товара в табличной части.
//
Процедура ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти)

	УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();

	ИспользоватьКолонкуСкладПриПродаже =    (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
										Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);

	Если НЕ ИспользоватьКолонкуСкладПриПродаже Тогда
		ТекСклад = Склад;
	Иначе
		ТекСклад = СтрокаТабличнойЧасти.Склад;
	КонецЕсли;

	Если НЕ ЗначениеНеЗаполнено(ТекСклад) Тогда
		Если ТекСклад.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
			ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект,
												мВалютаРегламентированногоУчета, мВалютаРегламентированногоУчета,
												ТипЦен);
		ИначеЕсли ТекСклад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			ЗаполнитьЕдиницуРозничнуюЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекСклад,
												мВалютаРегламентированногоУчета);
		ИначеЕсли ТекСклад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
			ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект,
												мВалютаРегламентированногоУчета, мВалютаРегламентированногоУчета,
												ТекСклад.ТипЦенРозничнойТорговли);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииХарактеристикиНоменклатурыТоваров()

// Обновляет текущее значение учетной политики розничная торговля облагается ЕНВД.
//
Процедура ПриИзмененииОблагаетсяЕНВД(РежимВызова = "")

	Если ЗначениеНеЗаполнено(РежимВызова) Тогда
		мРозничнаяТорговляОблагаетсяЕНВД = УчетнаяПолитикаНалоговыйУчет("РозничнаяТорговляОблагаетсяЕНВД", Организация, Дата);
		мТекущийСклад                    = Склад;
	Иначе
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

		ПриИзмененииРозничнаяТорговляОблагаетсяЕНВД(ЭтотОбъект, мВалютаРегламентированногоУчета,
		                                            СпособЗаполненияЦен, "Продажа", РежимВызова, "Товары",
		                                            мРозничнаяТорговляОблагаетсяЕНВД, мТекущийСклад);
		УстановитьВидимость();
	КонецЕсли;

КонецПроцедуры // ПриИзмененииОблагаетсяЕНВД()

// Производит пересчет необходимых полей при изменении типа цен
//
Процедура ПриИзмененииТипаЦен(Ответ)

	Если Товары.Количество()>0 Тогда
		ТекстВопроса = "Изменился тип цен. Пересчитать табличную часть?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда

			СтруктураЗначений = Новый Структура;
			СтруктураЗначений.Вставить("НовыйТипЦен", ТипЦен);
			СтруктураЗначений.Вставить("НовыйВалютаДокумента", мВалютаРегламентированногоУчета);
			СтруктураЗначений.Вставить("НовыйКурсДокумента", 1);
			СтруктураЗначений.Вставить("НовыйКратностьДокумента", 1);

			СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
			
			// Получить нужные цены запросом
			РезультатЗапросаЦен = СформироватьЗапросПоЦенам(СтруктураЗначений, 
			                                                  СпособЗаполненияЦен, 
			                                                  Товары.ВыгрузитьКолонку("Номенклатура"),
			                                                  Дата, Неопределено);

			ВыборкаИзРезультатаЗапроса = РезультатЗапросаЦен.Выбрать();
			
			СтруктураПоиска = Новый Структура(); // стркутура для поиска в результате запроса

			// В цикле по ТЧ перезаполняем цены, приводя их к текущим скидкам, валюте и режиму налогообложения
			Для каждого СтрокаТабличнойЧасти Из Товары Цикл

				СтруктураПоиска.Вставить("Номенклатура"              , СтрокаТабличнойЧасти.Номенклатура);
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);

				ВыборкаИзРезультатаЗапроса.Сбросить(); 
				Если ВыборкаИзРезультатаЗапроса.НайтиСледующий(СтруктураПоиска) Тогда // Нашли запись

					// Если для данного товара есть цена данного типа
					// Единицу устанавливаем в единицу цены, если она не задана, то в основную единицу товара
					Если ЗначениеНеЗаполнено(ВыборкаИзРезультатаЗапроса.Цена) Тогда
						СтрокаТабличнойЧасти.Цена = 0;
					Иначе
						// Присваиваем значение цены и единицы цены
						Если СтруктураЗначений.НовыйТипЦен.Рассчитывается Тогда

							Цена = ВыборкаИзРезультатаЗапроса.Цена * (1 + ВыборкаИзРезультатаЗапроса.ПроцентСкидкиНаценки / 100);
							СтруктураВалюты = ПолучитьКурсВалюты(СтруктураЗначений.НовыйТипЦен.ВалютаЦены, ДокументОбъект.Дата);
							ПересчитатьИзВалютыВВалюту(Цена, 
														ВыборкаИзРезультатаЗапроса.ВалютаЦены,
														СтруктураЗначений.НовыйТипЦен.ВалютаЦены,
														ВыборкаИзРезультатаЗапроса.КурсВалютыЦены,
														СтруктураВалюты.Курс,
														ВыборкаИзРезультатаЗапроса.КратностьВалютыЦены,
														СтруктураВалюты.Кратность);
							СтрокаТабличнойЧасти.Цена = ОкруглитьЦену(Цена,
																		СтруктураЗначений.НовыйТипЦен.ПорядокОкругления,
																		СтруктураЗначений.НовыйТипЦен.ОкруглятьВБольшуюСторону);
						Иначе
							СтрокаТабличнойЧасти.Цена = ВыборкаИзРезультатаЗапроса.Цена;
						КонецЕсли;

						// Пересчитываем цену в валюту документа
						Если СтруктураЗначений.НовыйВалютаДокумента <> ВыборкаИзРезультатаЗапроса.ВалютаЦены Тогда
							СтрокаТабличнойЧасти.Цена = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, 
							                                    ВыборкаИзРезультатаЗапроса.ВалютаЦены, 
							                                    СтруктураЗначений.НовыйВалютаДокумента, 
							                                    ВыборкаИзРезультатаЗапроса.КурсВалютыЦены,
							                                    СтруктураЗначений.НовыйКурсДокумента, 
							                                    ВыборкаИзРезультатаЗапроса.КратностьВалютыЦены,
							                                    СтруктураЗначений.НовыйКратностьДокумента);
						КонецЕсли;
						РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииТипаЦен()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает соответстующие свойства поля ввода цены при изменении склада 
// или номенклатуры в текущей строке табличной части.
// Для оптового склада или услуг в рознице цена редактируется,
// Для Товаров на розничном складе выбирается из списка наличия в регистре.
//
// Параметры:
//  Склад        - ссылка на справочник, выбранный склад.
//  Номенклатура - ссылка на справочник, элемент номенклатуры, для которого будем устанавливать цену
//
Процедура УстановитьСвойстваПоляВводаЦены(Склад, Номенклатура)

	РозничныйСпособВыбораЦены = (ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах
	                             И (Не Номенклатура.Услуга)
	                             И (Не ЗначениеНеЗаполнено(Номенклатура)));

	ТекущаяСтрока     = ЭлементыФормы.Товары.ТекущиеДанные;
	ЭлементУправления = мКолонкиТовары.Цена.ЭлементУправления;

	ЭлементУправления.КнопкаСпискаВыбора = РозничныйСпособВыбораЦены;

КонецПроцедуры // УстановитьСвойстваПоляВводаЦены()

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	УстановитьДоступностьКнопкиЗаполнитьИПровести();

	// Колонки налога показываем только тогда, когда его учитываем.
	Если УчитыватьНДС <> мКолонкиТовары.СтавкаНДС.Видимость Тогда
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СтавкаНДС, УчитыватьНДС);
	КонецЕсли;

	Если УчитыватьНДС <> мКолонкиТовары.СуммаНДС.Видимость Тогда
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СуммаНДС, УчитыватьНДС);
	КонецЕсли;

	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;

	ФлагВидимости = (ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах);

	ЭлементыФормы.КассаККМ.Видимость        = НЕ ФлагВидимости;
	ЭлементыФормы.НадписьКассаККМ.Видимость = НЕ ФлагВидимости;

	ЭлементыФормы.ИнвентаризацияТоваровНаСкладе.Видимость        = ФлагВидимости;
	ЭлементыФормы.НадписьИнвентаризацияТоваровНаСкладе.Видимость = ФлагВидимости;

	ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ДействиеЗаполнить.Кнопки.ЗаполнитьПоИнвентаризации.Доступность = ФлагВидимости;

	ВидимостьРеквизитаПроект(ЭтотОбъект, ЭлементыФормы, "НадписьПроект,Проект");
	
	вр = КассаККМ.ОтдельныйОтчетОРозничныхПродажахНаЧекККМ;
	ЭлементыФормы.НомерЧекаККМ.Видимость = вр;
	ЭлементыФормы.НадписьНомерЧекаККМ.Видимость = вр;

КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает доступность кнопки "Заполнить и провести". Кнопка доступна,
// если дата дата документа совпадает с текущей.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьКнопкиЗаполнитьИПровести()

	ЭлементыФормы.ДействияФормы.Кнопки.ДействиеЗаполнитьИПровести.Доступность = 
								(НачалоДня(Дата) = НачалоДня(ТекущаяДата()));

КонецПроцедуры // УстановитьДоступностьКнопкиЗаполнитьИПровести

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = ФорматСумм(ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары"));
	ЭлементыФормы.ВсегоНДС.Значение = ФорматСумм(Товары.Итог("СуммаНДС"));

	ВременнаяСтрока = "";

	Если НЕ ЗначениеНеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
	Иначе
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;
	ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(мВалютаРегламентированногоУчета) +"):";

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
		
	Если НЕ ЗначениеНеЗаполнено(ПараметрОснование)
	   И ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда

		ФлагСкладНТТ = (НЕ ЗначениеНеЗаполнено(ПараметрОснование.Склад)
		                 И ПараметрОснование.Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка);

		Если НЕ ФлагСкладНТТ Тогда
			СообщитьОбОшибке("Документ может быть введен по инвентаризации проведенной в неавтоматизированной торговой точке! Заполнение невозможно.",);
			Отказ = Истина;
			Возврат;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	яштФормаДокументаПриОткрытии(ЭтотОбъект, ЭтаФорма);
	
	//ЭлементыФормы.Контрагент.Видимость = Константы.ИспользоватьМеханизмПродажиЧерезЧП.Получить();
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		Если ЗначениеНеЗаполнено(ПараметрОснование) Тогда
			ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета, "Продажа");
		КонецЕсли;

		УстановитьНомерДокумента(ЭтотОбъект);
	КонецЕсли;

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Склад");
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("СтавкаНДС");
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("ЕдиницаИзмерения");

	УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиТовары, СтруктураКолонок);

	// Заполнить подменю выбора печатных форм.
	СписокМакетов = ЭтотОбъект.ПолучитьСписокПечатныхФорм();
	УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати,
	                                       СписокМакетов,
	                                       Новый Действие("ДействияФормыДействиеВыбратьПечатнуюФормы"));

	// Установить печатную форму по умолчанию.
	УстановитьКнопкуПечати(ЭтотОбъект.Метаданные().Имя, ЭтаФорма, СписокМакетов, мПечатнаяФормаПоУмолчанию);


	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	ПриИзмененииОблагаетсяЕНВД();

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                    ВидОперации.Метаданные().ЗначенияПеречисления,
	                                    Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	УстановитьВидимостьСерииНоменклатуры(мКолонкиТовары);

	УстановитьВидимостьОбязательностьСклада(мКолонкиТовары, , ЭлементыФормы.Склад, "Склад", "Реализация");

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	// установим доступность колонки "Цена" для редактирования
	мМожноМенятьЦенуВДокументе = РазрешитьРедактированиеЦенВДокументах();

	мКолонкиТовары.Цена.ЭлементУправления.ТолькоПросмотр                 = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиТовары.Сумма.ЭлементУправления.ТолькоПросмотр                = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиТовары.ПроцентСкидкиНаценки.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиТовары.СуммаНДС.ЭлементУправления.ТолькоПросмотр             = НЕ мМожноМенятьЦенуВДокументе;

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	Если НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьРедактироватьОтчетыОРозничныхПродажах") Тогда
		
		ЭтаФорма.ТолькоПросмотр = Истина;
		
	КонецЕсли;


	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 

	
КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	ОбновитьПодвал();

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

// Обработчик внешнего события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	Если глТорговоеОборудование <> Неопределено Тогда
		Если Событие = "BarCodeValue" Тогда

			Команда           = "ПодборВТабличнуюЧастьТовары";
			Валюта            = мВалютаРегламентированногоУчета;
			ИмяТабличнойЧасти = "Товары";

			ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);

			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("Команда"              , Команда);
			СтруктураПараметров.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
			СтруктураПараметров.Вставить("ТипЦен"               , ТипЦен);
			СтруктураПараметров.Вставить("СпособЗаполненияЦен"  , Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);
			СтруктураПараметров.Вставить("ВалютаЦены"           , Валюта);
			СтруктураПараметров.Вставить("ИмяТабличнойЧасти"    , ИмяТабличнойЧасти);

			глТорговоеОборудование.ОбработатьВнешнееСобытиеОтСканераДляФормы(ЭтаФорма, ЭтотОбъект, СтруктураПараметров, Данные);

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		НовыйВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах[Кнопка.Имя];
	КонецЕсли;

	УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();

	ИспользоватьКолонкуСкладПриПродаже =    (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
										Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);

	ОчищатьСклад = Ложь;
	МассивСтрокДляИзменения = Новый Массив;
	СпрашиватьПроСклад = Ложь;
	Если НовыйВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда

		Если Не ЗначениеНеЗаполнено(Склад) И Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			СпрашиватьПроСклад = Истина;
		КонецЕсли;

		Если ИспользоватьКолонкуСкладПриПродаже Тогда
			Для каждого СтрокаТоваров Из Товары Цикл
				Если НЕ ЗначениеНеЗаполнено(СтрокаТоваров.Склад)
				   И СтрокаТоваров.Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
					МассивСтрокДляИзменения.Добавить(СтрокаТоваров);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

	Иначе
		Если Не ЗначениеНеЗаполнено(Склад) И Склад.ВидСклада <> Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			СпрашиватьПроСклад = Истина;
		КонецЕсли;

		Если ИспользоватьКолонкуСкладПриПродаже Тогда
			Для каждого СтрокаТоваров Из Товары Цикл
				Если НЕ ЗначениеНеЗаполнено(СтрокаТоваров.Склад)
				   И СтрокаТоваров.Склад.ВидСклада <> Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
					МассивСтрокДляИзменения.Добавить(СтрокаТоваров);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

	КонецЕсли;

	Если СпрашиватьПроСклад
	 Или МассивСтрокДляИзменения.Количество() > 0 Тогда
		Если Вопрос("При данном виде операции в качестве склада не может быть выбрана 
					|неавтоматизированная торговая точка! Очистить склад?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			ОчищатьСклад = Истина;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ОчищатьСклад Тогда
		Склад = Неопределено;
	КонецЕсли;

	Если МассивСтрокДляИзменения.Количество() > 0 Тогда
		Для каждого СтрокаМассива из МассивСтрокДляИзменения Цикл
			СтрокаМассива.Склад = Неопределено;
		КонецЦикла;
	КонецЕсли;

	Если НовыйВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
		ИнвентаризацияТоваровНаСкладе = Неопределено;
	Иначе
		КассаККМ = Неопределено;
	КонецЕсли;

	ВидОперации = НовыйВидОперации;

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации) , ЭтотОбъект, ЭтаФорма);

	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм для заполнения табличной части
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоИнвентаризации(Кнопка)

	ПредставлениеИнвентаризацияТоваровНаСкладе = Метаданные.Документы.ИнвентаризацияТоваровНаСкладе.Представление();

	ЗаполнятьТабличнуюЧасть = Ложь;
	Если ЗначениеНеЗаполнено(ИнвентаризацияТоваровНаСкладе) Тогда

		ТекстПредупреждения = "Документ """ + ПредставлениеИнвентаризацияТоваровНаСкладе + """ не выбран.
		                      |Заполнение невозможно.";

	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, , Метаданные().Имя);
		Возврат;
	КонецЕсли;

	Если Товары.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		Товары.Очистить();
	КонецЕсли;

	ЗаполнитьТоварыПоИнвентаризацииТоваров(ИнвентаризацияТоваровНаСкладе);

КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнить()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);
	СтруктураВалюты              = ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, Дата);

	СтруктураРеквизитовДокумента.Вставить("ВалютаДокумента",    мВалютаРегламентированногоУчета);
	СтруктураРеквизитовДокумента.Вставить("КурсДокумента",      СтруктураВалюты.Курс);
	СтруктураРеквизитовДокумента.Вставить("КратностьДокумента", СтруктураВалюты.Кратность);

	// Проверим нет ли среди складов указанных в табличной части НТТ. Если есть, то валюту и 
	// флаг включения НДС в сумму менять нельзя.

	// Этот запрос формирует список всех НТТ
	Запрос = Новый Запрос;

	МассивСкладов = Товары.ВыгрузитьКолонку("Склад");

	Запрос.УстановитьПараметр("ВидСклада", Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка);
	Запрос.УстановитьПараметр("МассивСкладов", МассивСкладов);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|    Ссылка
	|ИЗ Справочник.Склады
	|
	|ГДЕ Справочник.Склады.ВидСклада = &ВидСклада
	|    И Справочник.Склады.Ссылка в (&МассивСкладов)";

	ЕстьНТТ = Ложь;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЕстьНТТ = Истина;
	КонецЕсли;

	СтруктураНередактируемыхРеквизитов = Новый Структура;

	СтруктураНередактируемыхРеквизитов.Вставить("ВалютаДокумента");
	СтруктураНередактируемыхРеквизитов.Вставить("КурсДокумента");

	Если ЕстьНТТ Тогда
		Если СуммаВключаетНДС Тогда
			СтруктураНередактируемыхРеквизитов.Вставить("СуммаВключаетНДС");
		КонецЕсли;
	КонецЕсли;

	УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
	ИспользоватьКолонкуСкладПриПродаже =    (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
										Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);

	Если ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах
	 Или (НЕ ИспользоватьКолонкуСкладПриПродаже
	       И Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный)Тогда
		СтруктураНередактируемыхРеквизитов.Вставить("ТипЦен");
	КонецЕсли;

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            СтруктураНередактируемыхРеквизитов, "Товары");
	Если СтруктураЗначений <> Неопределено Тогда
		ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "Товары", мВалютаРегламентированногоУчета, ,СтруктураЗначений);

		Если СтруктураЗначений.ТекущийТипЦен <> СтруктураЗначений.НовыйТипЦен Тогда
			ОбновитьФормуПодбора("ТипЦен");
		КонецЕсли;
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	НапечататьДокументПоУмолчанию(ЭтотОбъект, глТекущийПользователь, мПечатнаяФормаПоУмолчанию);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
//
Процедура ДействияФормыДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = Кнопка.Текст;
		СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		СписокМакетов = ПолучитьСписокПечатныхФорм();
		СтрокаМакетаВСписке = СписокМакетов.НайтиПоЗначению(Кнопка.Имя);
		Если СтрокаМакетаВСписке <> Неопределено Тогда
			Печать(СтрокаМакетаВСписке.Значение);
			СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
			СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;			
			
		Иначе
			СсылкаВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Кнопка.Имя, "_", "-")));
			Печать(СсылкаВнешнейФормы);
			СтруктураМакета.Макет = СсылкаВнешнейФормы;
			СтруктураМакета.ПредставлениеМакета = Кнопка.Текст;
		КонецЕсли;		
		
		мПечатнаяФормаПоУмолчанию = СтруктураМакета.Макет;
		СохранитьТекущуюКнопкуПечати(ЭтотОбъект.Метаданные().Имя, СтруктураМакета);
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при нажатии кнопки "Изменить" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// группового изменения значений реквизитов табличной части "Товары".
//
Процедура КоманднаяПанельТоварыДействиеИзменить(Кнопка)

	// Получим контекст обработки
	ИзменениеТабличнойЧастиТовары      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменые формы.
	ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект             = ЭтотОбъект;
	ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента            = ЭтаФорма;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьНДС                   = УчитыватьНДС; 
	ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице          = Ложь; 
	ФормаИзменениеТабличнойЧастиТовары.мСпособЗаполненияЦен       = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	ФормаИзменениеТабличнойЧастиТовары.мМожноМенятьЦенуВДокументе = мМожноМенятьЦенуВДокументе;

	//Перенесем табличную часть
	ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры // КоманднаяПанельТоварыДействиеИзменить()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при нажатии кнопки "Заполнить и провести" командной панели формы,
// вызывает заполнение документа с проведением.
//
Процедура ДействияФормыДействиеЗаполнитьИПровести(Кнопка)

	// Заполнять с проведением можно документы с текущую датой
	Если НачалоДня(Дата) = НачалоДня(ТекущаяДата()) Тогда
		Если НЕ ЭтоНовый() Тогда

			// Если документ ранее был записан, то он будет переноситься в конец дня из-за оперативного проведения, о чем следует предупредить.
			Ответ = Вопрос("В режиме заполнения с проведением документ будет проводиться оперативно. " + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли; 

	// Обработка выполняется в транзакции. Она будет отменена, если заполнить не удалось
	НачатьТранзакцию();
	Отказ = Ложь;

	// Очистим записи документа по размещению, если он был ранее проведен
	Если Проведен Тогда
		НаборТоварыОрганизаций = РегистрыНакопления.ТоварыОрганизаций.СоздатьНаборЗаписей();
		НаборТоварыОрганизаций.Отбор.Регистратор.Установить(Ссылка);
		НаборТоварыОрганизаций.Прочитать();
		НаборТоварыОрганизаций.Очистить();
		НаборТоварыОрганизаций.Записать();
		НаборТовары = РегистрыНакопления.ТоварыНаСкладах.СоздатьНаборЗаписей();
		НаборТовары.Отбор.Регистратор.Установить(Ссылка);
		НаборТовары.Прочитать();
		НаборТовары.Очистить();
		НаборТовары.Записать();
	КонецЕсли;

	// Заполнение документа
	ЗаполнитьПоСериям();

	// Если заполнить удалось, то запись документа с проведением

	НеПроведен = Ложь;
	Если НЕ Отказ Тогда
		Попытка
			Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		Исключение
			НеПроведен = Истина;
		КонецПопытки;
	КонецЕсли;

	Если Отказ ИЛИ НеПроведен Тогда
		ОтменитьТранзакцию();
		Если НеПроведен Тогда
			Предупреждение("Операция не выполнена!");
		КонецЕсли;
		
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли; 

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(ЭтотОбъект.Метаданные().Синоним, ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	ПриИзмененииОблагаетсяЕНВД("ДатаДокумента");

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	УстановитьДоступностьКнопкиЗаполнитьИПровести();

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ОтражатьВНалоговомУчете = Элемент.Значение;

	УстановитьВидимость();

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьНомерДокумента(ЭтотОбъект);
	ПриИзмененииОблагаетсяЕНВД("Организация");

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "ИнвентаризацияТоваровНаСкладе".
//
Процедура ИнвентаризацияТоваровНаСкладеНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если НЕ ЗначениеНеЗаполнено(Склад) Тогда
		// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
		// значение было присвоено стандартно.
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = Документы.ИнвентаризацияТоваровНаСкладе.ПолучитьФормуВыбора(,Элемент,);

		ФормаВыбора.ДокументСписок.Отбор.Склад.Значение = Склад;
		ФормаВыбора.ДокументСписок.Отбор.Склад.Использование = Истина;

		ФормаВыбора.Открыть();
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ИнвентаризацияТоваровНаСкладе".
//
Процедура ИнвентаризацияТоваровНаСкладеПриИзменении(Элемент)

	Если НЕ ЗначениеНеЗаполнено(ИнвентаризацияТоваровНаСкладе) Тогда
		Если ЗначениеНеЗаполнено(Организация) Тогда
			Организация = ИнвентаризацияТоваровНаСкладе.Организация;
		КонецЕсли;

		Если ЗначениеНеЗаполнено(Склад) Тогда
			Склад = ИнвентаризацияТоваровНаСкладе.Склад;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура СкладПриИзменении(Элемент)

	Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
		Если Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			Предупреждение("Неавтоматизированная торговая точка не может быть выбрана, если НДС не включается в сумму!");
			Склад = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

	Если Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();

		ИспользоватьКолонкуСкладПриПродаже =    (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
											Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);
		Если НЕ ИспользоватьКолонкуСкладПриПродаже Тогда
			ТипЦен = Склад.ТипЦенРозничнойТорговли;
			ПриИзмененииТипаЦен(Ложь);
		КонецЕсли;

	КонецЕсли;

	ПриИзмененииОблагаетсяЕНВД("Склад");

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода Склад
//
Процедура СкладНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
		НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.НеРавно, СтандартнаяОбработка);
	Иначе
		НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.Равно, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
// "Товары". Заполняет колонку "склад" значением по умолчанию.
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// В новой строке будем заполнять склад.
	Если НоваяСтрока Тогда

		// Заполним склад в строке
		Если ЗначениеНеЗаполнено(ЭлементыФормы.Товары.ТекущиеДанные.Склад) Тогда
			СтрокаТабличнойЧасти.Склад = Склад;
			Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
				Если СтрокаТабличнойЧасти.Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
					Предупреждение("Неавтоматизированная торговая точка не может быть выбрана, если НДС не включается в сумму!");
					СтрокаТабличнойЧасти.Склад = Справочники.Склады.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Склад, СтрокаТабличнойЧасти.Номенклатура);

КонецПроцедуры // ТоварыПриНачалеРедактирования()

// Процедура - обработчик события "ПриОкончанииРедактирования" табличной части
// "Товары".
//
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

КонецПроцедуры // ТоварыПриОкончанииРедактирования()

// Процедура - обработчик события "ПослеУдаления" табличной части
// "Товары".
//
Процедура ТоварыПослеУдаления(Элемент)

КонецПроцедуры // ТоварыПослеУдаления()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Товары". Формирует данные в колонке "Всего".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если мКолонкиТовары.Всего.Видимость Тогда
		ОформлениеСтроки.Ячейки.Всего.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Всего.Текст = ФорматСумм(ДанныеСтроки.Сумма
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС));
	КонецЕсли;

	ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

	Если НЕ ЗначениеНеЗаполнено(ДанныеСтроки.СерияНоменклатуры) Тогда
		Если мКолонкиТовары.НомерГТД.Видимость Тогда
			ОформлениеСтроки.Ячейки.НомерГТД.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.НомерГТД.Текст = ДанныеСтроки.СерияНоменклатуры.НомерГТД;
		КонецЕсли;
		Если мКолонкиТовары.СтранаПроисхождения.Видимость	Тогда
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.Текст = ДанныеСтроки.СерияНоменклатуры.СтранаПроисхождения;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода склада
// в строке табличной части "Товары".
//
Процедура ТоварыСкладПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
		Если СтрокаТабличнойЧасти.Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			Предупреждение("Неавтоматизированная торговая точка не может быть выбрана, если НДС не включается в сумму!");
			СтрокаТабличнойЧасти.Склад = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода склада
// в строке табличной части "Товары".
//
Процедура ТоварыСкладОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	// Если выбрали склад, то сделаем его текущим для подстановки в новые строки.
	// Склад все таки надо выбрать.
	Если ЗначениеНеЗаполнено(ВыбранноеЗначение) Тогда
		Предупреждение("Не выбран склад");
		СтандартнаяОбработка = Ложь; // отказ от выбора.
	Иначе

		УстановитьСвойстваПоляВводаЦены(ВыбранноеЗначение, ЭлементыФормы.Товары.ТекущиеДанные.Номенклатура);
	КонецЕсли;

КонецПроцедуры // ТоварыСкладКомпанииОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти);

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода серии номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыСерияНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	Если ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда

		Если ЗначениеНеЗаполнено(Склад) Тогда
			СтандартнаяОбработка = Ложь;
			Предупреждение("Не выбран склад!"); 
			Возврат;
		КонецЕсли;

		Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
			СтандартнаяОбработка = Ложь;
			Предупреждение("Не выбрана позиция номенклатуры!"); 
			Возврат;
		КонецЕсли;

		Элемент.СписокВыбора = СформироватьСписокРозничныхЦен(СтрокаТабличнойЧасти.Номенклатура,
		                                                        СтрокаТабличнойЧасти.ЕдиницаИзмерения,
		                                                        СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
		                                                        Склад, мВалютаРегламентированногоУчета,
		                                                        Неопределено, Дата, мВалютаРегламентированногоУчета,
		                                                        1, 1, УчитыватьНДС, СуммаВключаетНДС,
		                                                        ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	КонецЕсли;

КонецПроцедуры // ТоварыЦенаНачалоВыбораИзСписка()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаНДСПриИзменении(Элемент)

КонецПроцедуры // ТоварыСуммаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Суммы.
	ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект, глТекущийПользователь);

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля процента скидки-наценки
// в строке табличной части "Товары".
//
Процедура ТоварыПроцентСкидкиНаценкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля процента автоматичексих скидок
// в строке табличной части "Товары".
//
Процедура ТоварыПроцентАвтоматическихСкидокПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "УсловиеАвтоматическойСкидки"
// в строке табличной части "Товары".
//
Процедура ТоварыУсловиеАвтоматическойСкидкиПриИзменении(Элемент)

	Если Элемент.Значение = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты Тогда
		Значение = ТипЗнч(ЭлементыФормы.Товары.ТекущиеДанные.ЗначениеУсловияАвтоматическойСкидки);
		Если Значение <> Тип("СправочникСсылка.ВидыОплатЧекаККМ") Тогда
			ЭлементыФормы.Товары.ТекущиеДанные.ЗначениеУсловияАвтоматическойСкидки = Справочники.ВидыОплатЧекаККМ.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли Элемент.Значение = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте
		ИЛИ Элемент.Значение = Перечисления.УсловияСкидкиНаценки.ПоВыбраннойДисконтнойКартойСумме Тогда
		Значение = ТипЗнч(ЭлементыФормы.Товары.ТекущиеДанные.ЗначениеУсловияАвтоматическойСкидки);
		Если Значение <> Тип("СправочникСсылка.ИнформационныеКарты") Тогда
			ЭлементыФормы.Товары.ТекущиеДанные.ЗначениеУсловияАвтоматическойСкидки = Справочники.ИнформационныеКарты.ПустаяСсылка();
		КонецЕсли;
	Иначе
		КвалификаторыЧисла = Новый КвалификаторыЧисла(15,2,ДопустимыйЗнак.Неотрицательный);
		ЭлементыФормы.Товары.Колонки.ЗначениеУсловияАвтоматическойСкидки.ЭлементУправления.ОграничениеТипа = Новый ОписаниеТипов("Число",КвалификаторыЧисла);
		Значение = ТипЗнч(ЭлементыФормы.Товары.ТекущиеДанные.ЗначениеУсловияАвтоматическойСкидки);
		Если Значение <> Тип("Число") Тогда
			ЭлементыФормы.Товары.ТекущиеДанные.ЗначениеУсловияАвтоматическойСкидки = 0;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ТоварыЗначениеУсловияАвтоматическойСкидкиНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	Если СтрокаТабличнойЧасти.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте
		ИЛИ СтрокаТабличнойЧасти.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоВыбраннойДисконтнойКартойСумме Тогда
		СтандартнаяОбработка    = Ложь;
		ФормаВыбора             = Справочники.ИнформационныеКарты.ПолучитьФормуВыбора(,Элемент);
		ФормаВыбора.РежимВыбора = Истина;

		ФормаВыбора.СправочникСписок.Отбор.ТипКарты.Значение      = Перечисления.ТипыИнформационныхКарт.Дисконтная;
		ФормаВыбора.СправочникСписок.Отбор.ТипКарты.Использование = Истина;

		ФормаВыбора.СправочникСписок.Отбор.ТипКарты.ВидСравнения          = ВидСравнения.Равно;

		ФормаВыбора.Открыть();
	КонецЕсли;

КонецПроцедуры

Процедура ТоварыУсловиеАвтоматическойСкидкиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.Добавить(Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента);
	Элемент.СписокВыбора.Добавить(Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара);
	Элемент.СписокВыбора.Добавить(Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты);
	Элемент.СписокВыбора.Добавить(Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте);
	Элемент.СписокВыбора.Добавить(Перечисления.УсловияСкидкиНаценки.ПоВыбраннойДисконтнойКартойСумме);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПеретаскивание()

Процедура КассаККМПриИзменении(Элемент)

	УстановитьВидимость();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	яштСменаПользователя(ЭтотОбъект, ЭтаФорма, глТекущийПользователь);
КонецПроцедуры

Процедура ПодразделениеКомпанииПриИзменении(Элемент)
	
	УстановитьНомерДокумента(ЭтотОбъект);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мКолонкиТовары                  = ЭлементыФормы.Товары.Колонки;