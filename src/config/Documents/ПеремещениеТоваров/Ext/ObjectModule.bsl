Перем мВалютаРегламентированногоУчета Экспорт;

//БАЛАНС (04.12.2007)                       
//
Перем мПроведениеИзФормы Экспорт; 

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Возвращает таблицу стоимости по товарам
//
Функция ПолучитьТаблицуСтоимостиТоваров()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ВидДвижения",     ВидДвиженияНакопления.Расход);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	СУММА(ПартииТоваровНаСкладах.Стоимость) КАК Стоимость
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|
	|ГДЕ
	|	ПартииТоваровНаСкладах.Регистратор   = &ТекущийДокумент
	|	И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвижения
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры
	|";

	//+++ 23.11.2017 для проведения из регл.заданий
    //15.03.2018 Смирнов для проведения из регл.заданий
	#Если Клиент Тогда
		Мен = ПараметрыСеанса.ТекущийПользователь;
		Если НЕ ЗначениеЗаполнено(Мен) тогда
			Мен = справочники.Пользователи.НайтиПоКоду("Робот (магазин)");
		КонецЕсли;
	#Иначе
		Мен = справочники.Пользователи.НайтиПоКоду("Робот (магазин)");
	#КонецЕсли

	//+++ 08.08.2013 - перемещение доступно ограниченному числу пользователей
	Если ПолучитьЗначениеПоУмолчанию(мен, "УчетТолькоПоПодразделениюПользователя") 
		И НЕ ПолучитьЗначениеПоУмолчанию(мен, "СтаршийМенеджерПодразделения") Тогда
		Запрос.Текст = стрЗаменить(Запрос.Текст, "СУММА(ПартииТоваровНаСкладах.Стоимость)", "0" );
 	КонецЕсли;

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьСтоимостьПоПартиямТоваров()

// Возвращает стоимость товара
//
Функция ПолучитьСтоимостьТовара(Таблица, Номенклатура, Характеристика = Неопределено, Серия = Неопределено)

	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура",                   Номенклатура);
	Если НЕ ЗначениеНеЗаполнено(Характеристика) Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	КонецЕсли;
	Если НЕ ЗначениеНеЗаполнено(Серия) Тогда
		СтруктураПоиска.Вставить("СерияНоменклатуры",          Серия);
	КонецЕсли;

	Строки = Таблица.НайтиСтроки(СтруктураПоиска);

	Если Строки.Количество() > 0 Тогда
		Стоимость = Строки[0].Стоимость;
	Иначе
		Стоимость = 0;
	КонецЕсли;

	Возврат Стоимость;

КонецФункции // ПолучитьСтоимостьПоПартиямТоваров()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьПеремещениеТоваров()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПеремещениеТоваров.Номер,
	|	ПеремещениеТоваров.Дата,
	|	ПеремещениеТоваров.Организация,
	|	ПеремещениеТоваров.СкладОтправитель,
	|	ПеремещениеТоваров.СкладОтправитель.Представление КАК Поставщик,
	|	ПеремещениеТоваров.СкладПолучатель,
	|	ПеремещениеТоваров.СкладПолучатель.Представление КАК Покупатель,
	|	ПеремещениеТоваров.Товары.(
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Номенклатура.Код КАК Код,
	|		Номенклатура.Артикул КАК Артикул,
	|		КоличествоМест,
	|		Количество,
	|		ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|		Цена,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		СерияНоменклатуры КАК Серия,
	//+++ 30.09.2013 - печатем склад для перемещения на Буфер
	|		Склад
	|	),
	|	ПеремещениеТоваров.ВозвратнаяТара.(
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Номенклатура.Код КАК Код,
	|		Номенклатура.Артикул КАК Артикул,
	|		0 КАК КоличествоМест,
	|		Количество,
	|		0 КАК Цена,
	|		Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|		NULL КАК ЕдиницаИзмеренияМест
	|	)
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПеремещениеТоваров.Товары.НомерСтроки,
	|	ПеремещениеТоваров.ВозвратнаяТара.НомерСтроки";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	ВыборкаСтрокТара   = Шапка.ВозвратнаяТара.Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_Накладная";
	Макет       = ПолучитьМакет("Накладная");

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Накладная на перемещение");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	
	//+++( 30.09.2013	
	Если ЭтотОбъект.Товары.Количество()=1 Тогда
		ОбластьМакета.Параметры.ПредставлениеПоставщика = Строка(?(ЭтотОбъект.Товары[0].Склад.Пустая(),?(ВнутреннийЗаказ.Пустая(), СкладПолучатель, СкладОтправитель),ЭтотОбъект.Товары[0].Склад)  );   //27.04.2016
		ОбластьМакета.Параметры.Поставщик = ЭтотОбъект.Товары[0].Склад;
		
	Иначе    //27.04.2016
		//Если Найти(СкладПолучатель.Наименование,"Буфер")>0 Тогда // при перемещении на буферный склад - печатаем Склад!
		ТабЗнач1 = ЭтотОбъект.Товары.Выгрузить();
		ТабЗнач1.Свернуть("Склад");
		ТабЗнач1.Колонки.Добавить("ГруппаСкладов");
		текст1 = "";
		Для i=0 по ТабЗнач1.Количество()-1 цикл
			ТабЗнач1[i].ГруппаСкладов = ?(ЗначениеЗаполнено(ТабЗнач1[i].Склад.ГруппаСкладов), СокрЛП(ТабЗнач1[i].Склад.ГруппаСкладов), "Основной склад");
		КонецЦикла;	
		ТабЗнач1.Свернуть("ГруппаСкладов");
		Список = ТабЗнач1.ВыгрузитьКолонку("ГруппаСкладов");
		для i=0 по Список.Количество()-1 цикл
			текст1 = текст1+СокрЛП(Список[i])+", ";
		КонецЦикла;	
		текст1 = ?(текст1="", "", Лев(текст1, стрДлина(текст1)-2) );
		
		Если сокрЛП(текст1)="" Тогда
			ОбластьМакета.Параметры.ПредставлениеПоставщика = Шапка.СкладОтправитель;
			ОбластьМакета.Параметры.Поставщик = Шапка.СкладОтправитель;
		иначе
			ОбластьМакета.Параметры.ПредставлениеПоставщика = текст1;
			ОбластьМакета.Параметры.Поставщик = Шапка.СкладОтправитель;
		КонецЕсли;	
		
	//Иначе //+++)
		//	ОбластьМакета.Параметры.ПредставлениеПоставщика = Шапка.Поставщик;
		//	ОбластьМакета.Параметры.Поставщик = Шапка.СкладОтправитель;

	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = Шапка.Покупатель;
	ОбластьМакета.Параметры.Получатель = Шапка.СкладПолучатель;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;

	Если СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка
	 ИЛИ СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		ВыводитьЦены = Истина;
		ИмяШапки  = "ШапкаТаблицыСЦенами";
		ИмяСтроки = "СтрокаСЦенами";
		
	//+++ 30.09.2013	
	Иначе //Если Найти(СкладПолучатель.Наименование,"Буфер")>0 
	      //  и ЭтотОбъект.Товары.Количество()>1 Тогда // при перемещении на буферный склад - печатаем Склад!
		ВыводитьСклады = Истина;
		Если ВнутреннийЗаказ.Пустая() Тогда  //27.04.2016  - склад получатель из ТЧ Товары
			ИмяШапки  = "ШапкаТаблицыСоСкладами1";
		Иначе //склад отправитель
			ИмяШапки  = "ШапкаТаблицыСоСкладами";
		КонецЕсли;	
		ИмяСтроки = "СтрокаСоСкладами";
		
	//Иначе
	//	ИмяШапки  = "ШапкаТаблицы";
	//	ИмяСтроки = "Строка";
	КонецЕсли;

	ФлагПечатиМест = (Товары.Итог("КоличествоМест") > 0);
	ОбластьНомера  = Макет.ПолучитьОбласть(ИмяШапки + "|НомерСтроки");
	ОбластьКодов   = Макет.ПолучитьОбласть(ИмяШапки + "|КолонкаКодов");
	ОбластьТовар   = Макет.ПолучитьОбласть(ИмяШапки + "|Товар");
	ОбластьМест    = Макет.ПолучитьОбласть(ИмяШапки + "|Мест");
	ОбластьДанных  = Макет.ПолучитьОбласть(ИмяШапки + "|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьТовар);
	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
		                                    + ?(ФлагПечатиМест, 0, Макет.Область("R14C5").ШиринаКолонки + Макет.Область("R14C6").ШиринаКолонки);
	Иначе
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
		                                    + Макет.Область("КолонкаКодов").ШиринаКолонки
		                                    + ?(ФлагПечатиМест, 0, Макет.Область("R14C5").ШиринаКолонки + Макет.Область("R14C6").ШиринаКолонки);
	КонецЕсли;
	Если ФлагПечатиМест Тогда
		ТабДокумент.Присоединить(ОбластьМест);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);

	ОбластьНомера = Макет.ПолучитьОбласть(ИмяСтроки + "|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть(ИмяСтроки + "|КолонкаКодов");
	ОбластьТовар  = Макет.ПолучитьОбласть(ИмяСтроки + "|Товар");
	ОбластьМест   = Макет.ПолучитьОбласть(ИмяСтроки + "|Мест");
	ОбластьДанных = Макет.ПолучитьОбласть(ИмяСтроки + "|Данные");

	Ном = 0;
	
	// Выборка товаров
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			#Если Клиент тогда
				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			#КонецЕсли
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;

		//ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьНомера.Параметры.НомерСтроки = Ном;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьТовар.Параметры.Товар = ВыборкаСтрокТовары.Товар + ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьТовар);

		Если ФлагПечатиМест Тогда
			ОбластьМест.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабДокумент.Присоединить(ОбластьМест);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		Если ВыборкаСтрокТовары.Склад.Пустая() Тогда //+++ 27.04.2016 заглушка из Шапки
			ОбластьДанных.Параметры.Склад = ?(ВнутреннийЗаказ.Пустая(), СкладПолучатель, СкладОтправитель);
		КонецЕсли;	
		ТабДокумент.Присоединить(ОбластьДанных);

	КонецЦикла;

	// Выборка возвратная тара
	Пока ВыборкаСтрокТара.Следующий() Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
			#Если Клиент тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			#КонецЕсли
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;

		//ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокТара);
		ОбластьНомера.Параметры.НомерСтроки = Ном;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьТовар.Параметры.Товар = ВыборкаСтрокТара.Товар;
		ТабДокумент.Присоединить(ОбластьТовар);

		Если ФлагПечатиМест Тогда
			ОбластьМест.Параметры.Заполнить(ВыборкаСтрокТара);
			ТабДокумент.Присоединить(ОбластьМест);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТара);
		ТабДокумент.Присоединить(ОбластьДанных);

	КонецЦикла;
	
	ОбластьСтрокиИтог = Макет.ПолучитьОбласть("СтрокаСоСкладамиИтог");
	
	ОбластьСтрокиИтог.Параметры.КолМест = Шапка.Товары.Выгрузить().Итог("КоличествоМест");
	ОбластьСтрокиИтог.Параметры.Кол = Шапка.Товары.Выгрузить().Итог("Количество");
	
	ТабДокумент.Вывести(ОбластьСтрокиИтог);
	
	// Вывести подвал
	ОбластьНомера = Макет.ПолучитьОбласть("Подвал|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Подвал|КолонкаКодов");
	ОбластьТовар  = Макет.ПолучитьОбласть("Подвал|Товар");
	ОбластьМест   = Макет.ПолучитьОбласть("Подвал|Мест");
	ОбластьДанных = Макет.ПолучитьОбласть("Подвал|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьТовар);
	Если ФлагПечатиМест Тогда
		ТабДокумент.Присоединить(ОбластьМест);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПеремещениеТоваров()

// Формирует табличный документ по унифицированной форме ТОРГ-13
// 
// Возвращаемое значение
//  Табличный документ - унифицированная форма ТОРГ-13
//
Функция ПечатьТОРГ13()
	
	//+++ 23.11.2017 для проведения из регл.заданий
	//15.03.2018 Смирнов для проведения из регл.заданий
	#Если Клиент Тогда
		Мен = ПараметрыСеанса.ТекущийПользователь;
		Если НЕ ЗначениеЗаполнено(Мен) тогда
			Мен = справочники.Пользователи.НайтиПоКоду("Робот (магазин)");
		КонецЕсли;
	#Иначе
		Мен = справочники.Пользователи.НайтиПоКоду("Робот (магазин)");
	#КонецЕсли

	//+++ 26.06.2013
	Если ПолучитьЗначениеПоУмолчанию(Мен, "УчетТолькоПоПодразделениюПользователя") 
		И НЕ ПолучитьЗначениеПоУмолчанию(Мен, "СтаршийМенеджерПодразделения") Тогда
	КонецЕсли;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;

	ВалютаПечати = мВалютаРегламентированногоУчета;
	Запрос       = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер КАК НомерДокумента,
	|	Дата  КАК ДатаДокумента,
	|	Организация,
	//+++ 15.08.2012 - полное наименование склада будет браться из Комментария
	//
	//|	СкладОтправитель КАК ОтправительПодразделение,
	//|	СкладПолучатель  КАК ПолучательПодразделение,
	//
	//для обособл.подразделения или филиала 
	//- нужно в Комментарии писать полное имя и адрес (100 симв.).
	//Например:    Филиал ЗАО ТК "Яршинторг" г. Ростов-на-Дону, ул.Доватора, д.154/5
	//
	|	Выбор Когда Выразить(СкладОтправитель.Комментарий как строка(1))="""" 
	|		  Тогда СкладОтправитель
	|		  иначе Выразить(СкладОтправитель.Комментарий как строка(100))
	|	Конец КАК ОтправительПодразделение,
	|	Выбор Когда Выразить(СкладПолучатель.Комментарий как строка(1))="""" 
	|		  Тогда СкладПолучатель
	|		  иначе Выразить(СкладПолучатель.Комментарий как строка(100))
	|	Конец КАК ПолучательПодразделение,
	//+++)
	|	СкладОтправитель.ВидСклада КАК ОтправительВидСклада,
	|	СкладПолучатель.ВидСклада  КАК ПолучательВидСклада,
	|	Товары.(
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|		Номенклатура." + ТоварКод + " КАК ТоварКод,
	|		Цена,
	|		Количество,
	|		КоличествоМест,
	|		ЕдиницаИзмерения.Представление               КАК ЕдиницаИзмеренияНаименование,
	|		ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|		ЕдиницаИзмеренияМест.Представление           КАК ЕдиницаИзмеренияМестНаименование,
	|		ВЫБОР
	|			КОГДА КоличествоМест > 0 ТОГДА ЕдиницаИзмеренияМест.Коэффициент / Коэффициент
	|			ИНАЧЕ NULL
	|		КОНЕЦ КАК КоличествоВОдномМесте,
	|		ХарактеристикаНоменклатуры  КАК Характеристика,
	|		СерияНоменклатуры           КАК Серия
	|	),
	|	ВозвратнаяТара.(
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|		Номенклатура." + ТоварКод + " КАК ТоварКод,
	|		0 КАК Цена,
	|		0 КАК Сумма,
	|		0 КАК КоличествоВОдномМесте,
	|		Количество,
	|		Номенклатура.ЕдиницаХраненияОстатков.Представление               КАК ЕдиницаИзмеренияНаименование,
	|		Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ
	|	)
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки,
	|	ВозвратнаяТара.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	ВыборкаСтрокТара   = Шапка.ВозвратнаяТара.Выбрать();

	ЭтоСкладНТТ = (Шапка.ОтправительВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка
	              ИЛИ Шапка.ПолучательВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка);

	Если НЕ ЭтоСкладНТТ Тогда
		ТаблицаСтоимости        = ПолучитьТаблицуСтоимостиТоваров();
		ВалютаУпрУчета          = Константы.ВалютаУправленческогоУчета.Получить();
		Параметры               = ПолучитьКурсВалюты(ВалютаУпрУчета, Дата);
		КурсВалютыУпрУчета      = Параметры.Курс;
		КратностьВалютыУпрУчета = Параметры.Кратность;
	КонецЕсли;

	Макет = ПолучитьОбщийМакет("ТОРГ13");

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_ТОРГ13";

	// Выводим общие реквизиты шапки
	СведенияОбОрганизации = СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	ОбластьМакета         = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента));
	ОбластьМакета.Параметры.НомерДокумента           = ПолучитьНомерНаПечать(ЭтотОбъект);
	ОбластьМакета.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
	ТабДокумент.Вывести(ОбластьМакета);

	СтрокНаСтранице = 23;
	СтрокШапки      = 10;
	СтрокПодвала    = 9;
	НомерСтраницы   = 1;

	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	КоличествоСтрок = ВыборкаСтрокТовары.Количество();

	Если КоличествоСтрок = 1 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// инициализация итогов по странице
	ИтогКоличествоМестПоСтранице = 0;
	ИтогМассаБруттоПоСтранице    = 0;
	ИтогМассыНеттоПоСтранице     = 0;
	ИтогСуммыПоСтранице          = 0;

	// инициализация итогов по документу
	ИтогоКоличество  = 0;
	ИтогоМассаБрутто = 0;
	ИтогоМассаНетто  = 0;
	ИтогоСумма       = 0;

	Ном = 0;

	// Выводим многострочную часть докмента
	ВыборкаСтрокТовары      = Шапка.Товары.Выбрать();
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
	ОбластьМакета           = Макет.ПолучитьОбласть("Строка");

	// Выборка товаров
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			#Если Клиент тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			#КонецЕсли
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;
		//Начинаем новую страницу, Если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице;

			ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

			// инициализация итогов по странице
			ИтогКоличествоМестПоСтранице = 0;
			ИтогМассаБруттоПоСтранице    = 0;
			ИтогМассаНеттоПоСтранице     = 0;
			ИтогСуммыПоСтранице          = 0;

			НомерСтраницы = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);

		КоличествоМест = Формат(ВыборкаСтрокТовары.Количество, "ЧЦ=15; ЧДЦ=3");

		Если ВыборкаСтрокТовары.КоличествоМест <> 0 И НЕ ЗначениеНеЗаполнено(ВыборкаСтрокТовары.ЕдиницаИзмеренияМестНаименование) Тогда
			КоличествоМест = КоличествоМест 
			                 + Символы.ПС
			                 + " (" + Формат(ВыборкаСтрокТовары.КоличествоМест,"ЧЦ=15; ЧДЦ=0")
			                 + " "
			                 + ВыборкаСтрокТовары.ЕдиницаИзмеренияМестНаименование
			                 + ")";
		КонецЕсли;

		ОбластьМакета.Параметры.КоличествоМест    = КоличествоМест;
		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрокТовары.ТоварНаименование + ПредставлениеСерий(ВыборкаСтрокТовары);

		Если ЭтоСкладНТТ Тогда
			Сумма = ВыборкаСтрокТовары.Количество * ВыборкаСтрокТовары.Цена;
		Иначе
			Если ВыборкаСтрокТовары.Количество = 0 Тогда
				Сумма = 0;
				Цена  = 0;
			Иначе
				Сумма = ПолучитьСтоимостьТовара(ТаблицаСтоимости,
				                                ВыборкаСтрокТовары.Номенклатура,
				                                ВыборкаСтрокТовары.Характеристика,
				                                ВыборкаСтрокТовары.Серия);
				Сумма = ПересчитатьИзВалютыВВалюту(Сумма, ВалютаУпрУчета, ВалютаПечати, КурсВалютыУпрУчета, 1, КратностьВалютыУпрУчета, 1);
				Цена  = Окр(Сумма / ВыборкаСтрокТовары.Количество, 2);
			КонецЕсли;

			ОбластьМакета.Параметры.Цена = Цена;
		КонецЕсли;

		ОбластьМакета.Параметры.Сумма = Сумма;

		ТабДокумент.Вывести(ОбластьМакета);

		// Обновим итоги по странице
		ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице + ВыборкаСтрокТовары.Количество;
		ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице    + 0;
		ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице     + 0;
		ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице          + Сумма;

		// Обновим итогов по документу
		ИтогоКоличество  = ИтогоКоличество  + ВыборкаСтрокТовары.Количество;
		ИтогоМассаБрутто = ИтогоМассаБрутто + 0;
		ИтогоМассаНетто  = ИтогоМассаНетто  + 0;
		ИтогоСумма       = ИтогоСумма       + Сумма;

	КонецЦикла;

	// Выборка возвратная тара
	Пока ВыборкаСтрокТара.Следующий() Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
			#Если Клиент тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			#КонецЕсли
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;
		//Начинаем новую страницу, Если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице;

			ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

			// инициализация итогов по странице
			ИтогКоличествоМестПоСтранице = 0;
			ИтогМассаБруттоПоСтранице    = 0;
			ИтогМассаНеттоПоСтранице     = 0;
			ИтогСуммыПоСтранице          = 0;

			НомерСтраницы = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТара);

		ОбластьМакета.Параметры.КоличествоМест    = Формат(ВыборкаСтрокТара.Количество, "ЧЦ=15; ЧДЦ=3");
		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрокТара.ТоварНаименование + " (возвратная тара)";

		ТабДокумент.Вывести(ОбластьМакета);

		// Обновим итоги по странице
		ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице + ВыборкаСтрокТара.Количество;
		ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице    + 0;
		ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице     + 0;
		ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице          + 0;

		// Обновим итогов по документу
		ИтогоКоличество  = ИтогоКоличество  + ВыборкаСтрокТара.Количество;
		ИтогоМассаБрутто = ИтогоМассаБрутто + 0;
		ИтогоМассаНетто  = ИтогоМассаНетто  + 0;
		ИтогоСумма       = ИтогоСумма       + 0;

	КонецЦикла;

	ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице;

	ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогоКоличествоМест = ИтогоКоличество;
	ОбластьМакета.Параметры.ИтогоМассаБрутто    = ИтогоМассаБрутто;
	ОбластьМакета.Параметры.ИтогоМассаНетто     = ИтогоМассаНетто;
	ОбластьМакета.Параметры.ИтогоСумма          = ИтогоСумма;

	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим подвал документа
	
	//+++ 15.08.2012 - двойная запись через водителя
	//ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	//ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал2"); 	 //+++ 2-ой подвал
	
	ОбластьМакета.Параметры.ИтогоСуммаПрописью = СформироватьСуммуПрописью(ИтогоСумма, ВалютаПечати);
	
	// ДолжностьОтправителя,  ФИООтправителя
	рс = РегистрыСведений.ОтветственныеЛица.ПолучитьПоследнее(Дата, новый Структура("СтруктурнаяЕдиница", СкладОтправитель) );
	Если  ЭтотОбъект.Подразделение=справочники.Подразделения.НайтиПоКоду("00133") Тогда
		регСв = РегистрыСведений.ОтветственныеЛицаПодразделений.ПолучитьПоследнее(ЭтотОбъект.Дата, новый Структура("Подразделение, ОтветственноеЛицо",
		справочники.Подразделения.НайтиПоКоду("00133"), Перечисления.ОтветственныеЛицаОрганизации.Кассир) );
		ОбластьМакета.Параметры.ДолжностьОтправителяР=регСв.Должность;
		ОбластьМакета.Параметры.ФИООтправителяР=регСв.ФизическоеЛицо;
		
		Отбор1 = новый Структура;
		Отбор1.Вставить("Подразделение", ЭтотОбъект.Подразделение);
		Отбор1.Вставить("ОтветственноеЛицо",Перечисления.ОтветственныеЛицаОрганизации.Руководитель);
		регСведРук = РегистрыСведений.ОтветственныеЛицаПодразделений.ПолучитьПоследнее(ЭтотОбъект.Дата, Отбор1);
		
		ОбластьМакета.Параметры.ДолжностьОтправителя = регСведРук.Должность;
		ОбластьМакета.Параметры.ФИООтправителя = регСведРук.ФизическоеЛицо;
		
	ИначеЕсли ЗначениеЗаполнено(рс.ФизическоеЛицо) Тогда
		ОбластьМакета.Параметры.ДолжностьОтправителя = "зав.складом";
		ОбластьМакета.Параметры.ФИООтправителя = рс.ФизическоеЛицо;
		ОбластьМакета.Параметры.ДолжностьОтправителяР = "";
		ОбластьМакета.Параметры.ФИООтправителяР = "";
		
	иначеЕсли НЕ ЗначениеЗаполнено(СкладОтправитель.Подразделение) Тогда // нет данных - значит это Фролов
		ОбластьМакета.Параметры.ДолжностьОтправителя = "зав.складом";
		ОбластьМакета.Параметры.ФИООтправителя = "Фролов А.И.";
		ОбластьМакета.Параметры.ДолжностьОтправителяР = "зав.складом";
		ОбластьМакета.Параметры.ФИООтправителяР = "Фролов А.И.";
	КонецЕсли;	
	
	// ДолжностьВодителя, ФИОВодителя
	Если СокрЛП(Водитель)<>"" Тогда
		ОбластьМакета.Параметры.ДолжностьВодителя = "водитель";
		ОбластьМакета.Параметры.ФИОВодителя = Водитель;
	КонецЕсли;
	
	// ДолжностьПолучателя, ФИОПолучателя
	рс = РегистрыСведений.ОтветственныеЛица.ПолучитьПоследнее(Дата, новый Структура("СтруктурнаяЕдиница", СкладПолучатель) );
	Если ЗначениеЗаполнено(рс.ФизическоеЛицо) Тогда
		ОбластьМакета.Параметры.ДолжностьПолучателя = "зав.складом";
		ОбластьМакета.Параметры.ФИОПолучателя = рс.ФизическоеЛицо;
	иначеЕсли НЕ ЗначениеЗаполнено(СкладПолучатель.Подразделение) Тогда // нет данных - значит это Фролов
		ОбластьМакета.Параметры.ДолжностьОтправителя = "зав.складом";
		ОбластьМакета.Параметры.ФИООтправителя = "Фролов А.И.";
	КонецЕсли;	
	
	ОбластьМакета.Параметры.ДатаДокумента = Формат(Дата,"ДЛФ=DD");
	//+++) 
	
	Если  СкладОтправитель = Справочники.Склады.НайтиПоКоду("00693") и СкладПолучатель = Справочники.склады.найтиПоКоду("00692")Тогда
		СсылкаНаОбъектПодразделение = Подразделение;
		
		Если СкладОтправитель.Подразделение.ОбособленноеПодразделение Тогда
			СсылкаНаОбъектПодразделение = СкладОтправитель.Подразделение;
		КонецЕсли;	   
			
			Если  СсылкаНаОбъектПодразделение = справочники.Подразделения.НайтиПоКоду("00005") Тогда
				ОбластьМакета.Параметры.ФИОразрешил = "Фролов А.И.";
				ОбластьМакета.Параметры.ФИОотгрузил = "Фролов А.И.";
				ОбластьМакета.Параметры.ОтпускПроизвелДолжность = "зав. складом";
			Иначе		
				Отбор1 = новый Структура;
				Отбор1.Вставить("Подразделение", СсылкаНаОбъектПодразделение);
				
				Отбор1.Вставить("ОтветственноеЛицо",Перечисления.ОтветственныеЛицаОрганизации.Руководитель);
				регСведРук = РегистрыСведений.ОтветственныеЛицаПодразделений.ПолучитьПоследнее(Дата, Отбор1);
				
				Кладовщик =строка(регСведРук.ФизическоеЛицо);
				ДолжнКладовщика =регСведРук.Должность;
				
				ОбластьМакета.Параметры.ФИООтправителяР = Кладовщик;
				ОбластьМакета.Параметры.ДолжностьОтправителяР = ДолжнКладовщика;
				
				регСв = РегистрыСведений.ОтветственныеЛицаПодразделений.ПолучитьПоследнее(Дата, 
				новый Структура("Подразделение, ОтветственноеЛицо",
				СсылкаНаОбъектПодразделение, Перечисления.ОтветственныеЛицаОрганизации.Кассир) );
				Если регСв<>неопределено Тогда
					ОбластьМакета.Параметры.ФИООтправителя = регСв.ФизическоеЛицо;
					ОбластьМакета.Параметры.ДолжностьОтправителя = регСв.Должность;
				иначе
					ОбластьМакета.Параметры.ФИООтправителя = Кладовщик;
					ОбластьМакета.Параметры.ДолжностьОтправителя =  ДолжнКладовщика;
				КонецЕсли;
		     КонецЕсли;

	конецЕсли; //<<
	
	
ТабДокумент.Вывести(ОбластьМакета);

	// Зададим параметры макета
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	Возврат ТабДокумент;

КонецФункции // ПечатьТОРГ13()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		#Если Клиент тогда
			Предупреждение("Документ можно распечатать только после его записи");
		#КонецЕсли
		Возврат;
	ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		#Если Клиент тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		#КонецЕсли
		Возврат;
	КонецЕсли;

	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Ведомость" Тогда

		ТабДокумент = ПечатьПеремещениеТоваров();
	ИначеЕсли ИмяМакета = "ТОРГ13" Тогда

		// Унифицированная форма ТОРГ-13 (накладаня на внутрнее перемещение)
		ТабДокумент = ПечатьТОРГ13();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			#Если Клиент тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			#КонецЕсли
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();

	КонецЕсли; 

	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;

	СписокМакетов.Добавить("Ведомость", "Перемещение товаров");
	СписокМакетов.Добавить("ТОРГ13", "ТОРГ-13 (Накладная на внутреннее перемещение)");

	ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

#КонецЕсли

// Заолняет табличную часть по сериям при оперативном проведении
//
Процедура ЗаполнитьПоСериям() Экспорт

	ТоварыТабличнойЧасти = Товары.Выгрузить();
	ТоварыТабличнойЧасти.Свернуть("Номенклатура"); 

	МассивНоменклатуры = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");
	
	ТаблицаСерий   = ПолучитьТаблицуОстатковПоСериям(СкладОтправитель, Организация, МассивНоменклатуры);
	
	ТоварыТабличнойЧасти=Товары.Выгрузить();
	
	Товары.Очистить();

	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;

	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл

		СтуктураПоиска   = Новый Структура;
		СтуктураПоиска.Вставить("Номенклатура",               ИсходнаяСтрока.Номенклатура);
		СтуктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтуктураПоиска.Вставить("Качество",                   ИсходнаяСтрока.Качество);

		НайденныеСтроки  = ТаблицаСерий.НайтиСтроки(СтуктураПоиска);
		СтрокаСПустойСерией = Неопределено;
		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;

		Для Каждого Строка Из НайденныеСтроки Цикл

			Если КоличествоОсталосьПогасить<=0 Тогда
				Прервать;
			КонецЕсли;

			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;

			ОстатокВЕдиницахДокумента = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент;

			Если ОстатокВЕдиницахДокумента >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить/ОстатокВЕдиницахДокумента;
			Иначе
				КоэффСписания = 1
			КонецЕсли;

			СписанноеКоличество = Окр(ОстатокВЕдиницахДокумента * КоэффСписания, 3, РежимОкругления.Окр15как20);
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Номенклатура                 = ИсходнаяСтрока.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения             = ИсходнаяСтрока.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент                  = ИсходнаяСтрока.Коэффициент;
			НоваяСтрока.Цена                         = ИсходнаяСтрока.Цена;
			НоваяСтрока.ХарактеристикаНоменклатуры   = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры            = Строка.СерияНоменклатуры;
			НоваяСтрока.ДокументРезерва              = ИсходнаяСтрока.ДокументРезерва;
			НоваяСтрока.Качество                     = ИсходнаяСтрока.Качество;
			НоваяСтрока.СпособСписанияОстаткаТоваров = ИсходнаяСтрока.СпособСписанияОстаткаТоваров;
			НоваяСтрока.Количество                   = СписанноеКоличество; 

			Если ЗначениеНеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;

			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток = Строка.Остаток - СписанноеКоличество* ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент / ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;            

		КонецЦикла;

		Если КоличествоОсталосьПогасить>0 Тогда
			Если СтрокаСПустойСерией = Неопределено Тогда
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Номенклатура                 = ИсходнаяСтрока.Номенклатура;
				НоваяСтрока.ЕдиницаИзмерения             = ИсходнаяСтрока.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент                  = ИсходнаяСтрока.Коэффициент;
				НоваяСтрока.Цена                         = ИсходнаяСтрока.Цена;
				НоваяСтрока.ХарактеристикаНоменклатуры   = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
				НоваяСтрока.СерияНоменклатуры            = ИсходнаяСтрока.СерияНоменклатуры;
				НоваяСтрока.ДокументРезерва              = ИсходнаяСтрока.ДокументРезерва;                
				НоваяСтрока.Качество                     = ИсходнаяСтрока.Качество;
				НоваяСтрока.СпособСписанияОстаткаТоваров = ИсходнаяСтрока.СпособСписанияОстаткаТоваров;
				НоваяСтрока.Количество                   = КоличествоОсталосьПогасить;
			Иначе
				СтрокаСПустойСерией.Количество = СтрокаСПустойСерией.Количество+КоличествоОсталосьПогасить;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка
	 или СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		ТаблицаТоваров.Колонки.Цена.Имя = "ЦенаВРознице";
	КонецЕсли;

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, СкладПолучатель");
	
	// {20120202 Лапенков
	Если ЗначениеНеЗаполнено(ВнутреннийЗаказ) Тогда
		СтруктураОбязательныхПолей.Вставить("СкладОтправитель");
	КонецЕсли;	
	// }
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка 
	   И ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам Тогда
		ОшибкаПриПроведении("Перемещение с неавтоматизированной торговой точки по ордерам не осуществляется!", Отказ, Заголовок);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ВнутреннийЗаказ)
	   И Не СтруктураШапкиДокумента.ВидВнутреннегоЗаказа = Перечисления.ВидыВнутреннегоЗаказа.НаСклад Тогда
		ОшибкаПриПроведении("Перемещение можно осуществлять только по Внутреннему заказу с видом ""Для ввода перемещения""!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	СтруктураОбязательныхПолей.Вставить("Качество");

	КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСкладаОтправителя, СтруктураОбязательныхПолей);

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	//14.11.2016
	ПроверитьЧтоНетБрака(ЭтотОбъект, ТаблицаПоТоварам, Отказ);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

//14.11.2016 запрет перемещения со склада брака или на склад брака 
//           НЕЛЬЗЯ перемещать бракованный товар
//
Процедура ПроверитьЧтоНетБрака(ЭтотОбъект, ТаблицаПоТоварам, Отказ)
	
	соМногихНаОдин = значениеЗаполнено(ЭтотОбъект.ВнутреннийЗаказ);
	складСравнения = ?(соМногихНаОдин, ЭтотОбъект.СкладПолучатель, ЭтотОбъект.СкладОтправитель);
	складБрака = складСравнения.ЗапретитьИспользование;
	
	Для каждого стр1 из ТаблицаПоТоварам цикл
		Если стр1.Качество<>справочники.Качество.Новый 
			и (складБрака или стр1.Склад.ЗапретитьИспользование) Тогда  
			#Если Клиент Тогда
				сообщить("У товара "+строка(стр1.Номенклатура)+" - указано Качество: "+строка(стр1.Качество), СтатусСообщения.Внимание);
			#КонецЕсли	
			Отказ = истина;	
		КонецЕсли;
	КонецЦикла;	
	
	#Если Клиент Тогда
	Если Отказ Тогда
		Сообщить("----------Перемещать товары с браком - нельзя! Нужно создавать новые карточки товаров!-------------", СтатусСообщения.Внимание)			
	КонецЕсли;
	#КонецЕсли	
	
КонецПроцедуры 

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");

	// Теперь позовем общую процедуру проверки заполнения.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара",СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

//+++ 09.01.2019 --- на примере ТК000074 ---
функция ГрузчикиОдинаковые()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПеремещениеТоваровДанныеПоПогрузке.Грузчик,
	|	ПеремещениеТоваровДанныеПоПогрузке1.Грузчик КАК Грузчик1
	|ИЗ
	|	Документ.ПеремещениеТоваров.ДанныеПоПогрузке КАК ПеремещениеТоваровДанныеПоПогрузке,
	|	Документ.ПеремещениеТоваров.ДанныеПоПогрузке КАК ПеремещениеТоваровДанныеПоПогрузке1
	|ГДЕ
	|	  ПеремещениеТоваровДанныеПоПогрузке.Ссылка  = &Ссылка
	|	И ПеремещениеТоваровДанныеПоПогрузке1.Ссылка = &Ссылка
	|   И ПеремещениеТоваровДанныеПоПогрузке.Вручную  = ИСТИНА
	|	И ПеремещениеТоваровДанныеПоПогрузке1.Вручную = ЛОЖЬ
	|	И ПеремещениеТоваровДанныеПоПогрузке1.Грузчик  = ПеремещениеТоваровДанныеПоПогрузке.Грузчик";
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() тогда 
		рез = ЛОЖЬ;
	Иначе
		Выборка = Результат.Выбрать();
		колОдинаковые = Выборка.Количество();
		рез = (ДанныеПоПогрузке.Количество() = колОдинаковые*2);
	КонецЕсли; 
	возврат рез;	
КонецФункции	

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок);

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок);
	
	//+++ 03.06.2015 - из задания на перемещение - добавляются грузчики склада "Ангар-И", поэтому дельтаПеремещения=0
	Если СкладПолучатель = справочники.Склады.НайтиПоНаименованию("Ангар-И") 
	   и СкладОтправитель<>СкладПолучатель Тогда
    	ДвиженияРегистровГрузчикиИКладовщики(ЭтотОбъект, 1);   // удвоение веса = вес отгружаемый + принимаемый (+ доп.коэффициенты диски, акб)!
		
	//+++( 09.01.2019  #Фролов - для всех складов - если ОТгружают и ЗАгружают одни и те же!
	ИначеЕсли ЭтотОбъект.Дата>'20190101' 
			 И ( (СкладОтправитель.ГруппаСкладов = СкладПолучатель.ГруппаСкладов) // одни и те же грузчики?!
			   или ГрузчикиОдинаковые() ) // грузчики туда и обратновведены вручную... одинаковые
			 И СкладОтправитель<>СкладПолучатель тогда
		ДвиженияРегистровГрузчикиИКладовщики(ЭтотОбъект, 0.5, 2);   //+++09.01.2019 удвоение веса по ВЫХОДНЫМ, зануление на ВесДиски/ВесИмпорт и 1 на ВесПеремещения => 2-4х от веса!
		
	ИначеЕсли СкладОтправитель=СкладПолучатель тогда //нельзя так делать!  ничего никуда не переместили!
	//+++)	
	
	Иначе //как и было коэффициент перемещения = 1.5  (+0.5 дельта!) от веса на грузчиков по складам из табл.части Товары
		ДвиженияРегистровГрузчикиИКладовщики(ЭтотОбъект);
	КонецЕсли;
	
	ДвиженияПоРегиструЗаказы();

	// Отражение в партионном учете
	Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
		
		ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок);
		
		ТаблицаДвиженийПоСписаннымТоварам = Движения.СписанныеТовары.Выгрузить();
		Если ТаблицаДвиженийПоСписаннымТоварам.Количество()>0 Тогда
			
			// Проводить по партиям сразу нужно Если установлен параметр
			// учетной политики СписыватьПартииПриПроведенииДокументов
			ПроводитьПоПартиям = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата).СписыватьПартииПриПроведенииДокументов;

			Если ПроводитьПоПартиям Тогда
				
				//+++( 25.04.2014 партии тоже по разным складам!
				для каждого стр1 из ТаблицаДвиженийПоСписаннымТоварам цикл
					скл = Товары[стр1.НомерСтроки-1].Склад;
					Если ЗначениеЗаполнено(ВнутреннийЗаказ) Тогда
						стр1.Склад = ?(ЗначениеЗаполнено(скл), скл, СкладОтправитель);   // склад отправитель в таб.части
					иначе
						стр1.СкладПолучатель = ?(ЗначениеЗаполнено(скл), скл, СкладПолучатель);   // склад получатель в таб.части
					КонецЕсли;	
				КонецЦикла;	
				//+++)
				
				ДвижениеПартийТоваров(Ссылка, ТаблицаДвиженийПоСписаннымТоварам);
				
				// Зарегистрируем в пследовательности
				ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
				ЗаписьРегистрации.Период = Дата;
				ЗаписьРегистрации.Регистратор = Ссылка;
				
			Иначе
				
				// В неоперативном режиме границы последовательностей сдвигаются назад, Если они позже документа.
				Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
					СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете)
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок)
	
	Если ОтражатьВУправленческомУчете Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам Тогда
			
			// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПередачеСоСкладов
			НаборДвижений = Движения.ТоварыКПередачеСоСкладов;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвиженийТоварыКПередаче = НаборДвижений.Выгрузить();
			ТаблицаДвиженийТоварыКПередаче.Очистить();
			ТаблицаДвижений = ТаблицаДвиженийТоварыКПередаче.Скопировать();
			
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
			
			ТаблицаДвижений.ЗаполнитьЗначения(СкладОтправитель,"Склад");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка          ,"ДокументПередачи");
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			// Проверка осатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольСвободныхОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;

			Если Не Отказ Тогда
				Движения.ТоварыКПередачеСоСкладов.ВыполнитьПриход();
			КонецЕсли;
			
			// ТАРА ПО РЕГИСТРУ ТоварыКПередачеСоСкладов
			НаборДвижений = Движения.ТоварыКПередачеСоСкладов;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвиженийТараКПередаче = НаборДвижений.Выгрузить();
			ТаблицаДвиженийТараКПередаче.Очистить();
			ТаблицаДвижений = ТаблицаДвиженийТараКПередаче.Скопировать();
			
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);
			
			ТаблицаДвижений.ЗаполнитьЗначения(СкладОтправитель,"Склад");
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "СтатусПартии");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка          ,"ДокументПередачи");
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;  
			
			// Проверка осатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольСвободныхОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;

			Если Не Отказ Тогда
				Движения.ТоварыКПередачеСоСкладов.ВыполнитьПриход();
			КонецЕсли;
			
			// Если мы перемещаем в НТТ, то надо сделать приход по специальному регистру
			Если СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
				
				// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПередачеВНеавтоматизированныеТорговыеТочки
				НаборДвижений = Движения.ТоварыКПеремещениюВНеавтоматизированныеТорговыеТочки;
				
				// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
				ТаблицаДвиженийТоварыКПередаче = НаборДвижений.Выгрузить();
				ТаблицаДвиженийТоварыКПередаче.Очистить();
				ТаблицаДвижений = ТаблицаДвиженийТоварыКПередаче.Скопировать();
				
				ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
				
				ТаблицаДвижений.ЗаполнитьЗначения(СкладПолучатель,"Склад");
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Товар, "ТоварТара");
				ТаблицаДвижений.ЗаполнитьЗначения(Ссылка          ,"ДокументПеремещения");
				
				НаборДвижений.мПериод            = Дата;
				НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
				
				Если Не Отказ Тогда
					Движения.ТоварыКПеремещениюВНеавтоматизированныеТорговыеТочки.ВыполнитьПриход();
				КонецЕсли;
				
				// ТАРА ПО РЕГИСТРУ ТоварыКПередачеВНеавтоматизированныеТорговыеТочки
				НаборДвижений = Движения.ТоварыКПеремещениюВНеавтоматизированныеТорговыеТочки;
				
				// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
				ТаблицаДвиженийТоварыКПередаче = НаборДвижений.Выгрузить();
				ТаблицаДвиженийТоварыКПередаче.Очистить();
				ТаблицаДвижений = ТаблицаДвиженийТоварыКПередаче.Скопировать();
				
				ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);
				
				ТаблицаДвижений.ЗаполнитьЗначения(СкладПолучатель,"Склад");
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Тара, "ТоварТара");
				ТаблицаДвижений.ЗаполнитьЗначения(Ссылка          ,"ДокументПеремещения");
				
				НаборДвижений.мПериод            = Дата;
				НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
				
				Если Не Отказ Тогда
					Движения.ТоварыКПеремещениюВНеавтоматизированныеТорговыеТочки.ВыполнитьПриход();
				КонецЕсли;
				
			КонецЕсли;
			
			// ТОВАРЫ ПО РЕГИСТРУ ТоварыВРезервеНаСкладах
			ТаблицаПоТоварамРезерв = ТаблицаПоТоварам.Скопировать();
			Сч = 0;
			Пока Сч < ТаблицаПоТоварамРезерв.Количество() Цикл
				СтрокаТаблицы = ТаблицаПоТоварамРезерв.Получить(Сч);
				Если ЗначениеНеЗаполнено(ВнутреннийЗаказ) Тогда
					Если ЗначениеНеЗаполнено(СтрокаТаблицы.ДокументРезерва) 
					 ИЛИ (ТипЗнч(СтрокаТаблицы.ДокументРезерва) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") 
					   И НЕ СтрокаТаблицы.РезервБезПраваПродажи) Тогда
						ТаблицаПоТоварамРезерв.Удалить(СтрокаТаблицы);
					Иначе 
						Сч = Сч + 1;
					КонецЕсли; 
				Иначе
					Если Не СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
						ТаблицаПоТоварамРезерв.Удалить(СтрокаТаблицы);
					Иначе 
						Сч = Сч + 1;
					КонецЕсли; 
				КонецЕсли;
			КонецЦикла;
			
			Если ТаблицаПоТоварамРезерв.Количество() > 0 Тогда
				
				НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
				
				ТаблицаДвижений = НаборДвижений.Выгрузить();
				ТаблицаДвижений.Очистить();
				
				ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамРезерв, ТаблицаДвижений);
				
			ТаблицаДвижений.ЗаполнитьЗначения(СкладОтправитель, "Склад");
				Если ЗначениеЗаполнено(ВнутреннийЗаказ) Тогда
					ТаблицаДвижений.ЗаполнитьЗначения(ВнутреннийЗаказ,  "ДокументРезерва");
				КонецЕсли;
				
				НаборДвижений.мПериод = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
				
				// Проверка осатков при оперативном проведении.
				Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
					НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
				КонецЕсли;
				
				Если Не Отказ Тогда
					Движения.ТоварыВРезервеНаСкладах.ВыполнитьРасход();
				КонецЕсли;
			КонецЕсли;
			
			// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПолучениюНаСклады
			// Для резервов по ордеру надо списать с регистра "Товары к получению на склады"
			ТаблицаПоТоварамКПолучению = ТаблицаПоТоварам.Скопировать();
			Сч = 0;
			Пока Сч < ТаблицаПоТоварамКПолучению.Количество() Цикл
				СтрокаТаблицы = ТаблицаПоТоварамКПолучению.Получить(Сч);
				Если ЗначениеНеЗаполнено(СтрокаТаблицы.ДокументРезерва) ИЛИ ТипЗнч(СтрокаТаблицы.ДокументРезерва) <> Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
					ТаблицаПоТоварамКПолучению.Удалить(СтрокаТаблицы);
				Иначе 
					Сч = Сч + 1;
				КонецЕсли; 
			КонецЦикла;
			
			Если ТаблицаПоТоварамКПолучению.Количество() > 0 Тогда
				
				НаборДвижений = Движения.ТоварыКПолучениюНаСклады;
				ТаблицаПоТоварамКПолучению.Колонки.ДокументРезерва.Имя = "ДокументПолучения";
			
				ТаблицаДвижений = НаборДвижений.Выгрузить();
				ТаблицаДвижений.Очистить();
				
				ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамКПолучению, ТаблицаДвижений);
				
		 		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");
				ТаблицаДвижений.ЗаполнитьЗначения(СкладОтправитель, "Склад");
				
				НаборДвижений.мПериод = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
				
				// Проверка осатков при оперативном проведении.
				Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
					НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
				КонецЕсли;
				
				Если Не Отказ Тогда
					Движения.ТоварыКПолучениюНаСклады.ВыполнитьРасход();
				КонецЕсли;
				
			КонецЕсли;
			
			
			// ТАРА ПО РЕГИСТРУ ТоварыВРезервеНаСкладах
			ТаблицаПоТареРезерв = ТаблицаПоТаре.Скопировать();
			Сч = 0;
			Пока Сч < ТаблицаПоТареРезерв.Количество() Цикл
				СтрокаТаблицы = ТаблицаПоТареРезерв.Получить(Сч);
				Если ЗначениеНеЗаполнено(ВнутреннийЗаказ) Тогда
					Если ЗначениеНеЗаполнено(СтрокаТаблицы.ДокументРезерва) 
					 ИЛИ (ТипЗнч(СтрокаТаблицы.ДокументРезерва) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") 
					   И НЕ СтрокаТаблицы.РезервБезПраваПродажи) Тогда
						ТаблицаПоТареРезерв.Удалить(СтрокаТаблицы);
					Иначе 
						Сч = Сч + 1;
					КонецЕсли; 
				Иначе
					Если Не СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
						ТаблицаПоТареРезерв.Удалить(СтрокаТаблицы);
					Иначе 
						Сч = Сч + 1;
					КонецЕсли; 
				КонецЕсли;
			КонецЦикла;
			
			Если ТаблицаПоТареРезерв.Количество() > 0 Тогда
				
				НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

				ТаблицаДвижений = НаборДвижений.Выгрузить();
				ТаблицаДвижений.Очистить();

				ЗагрузитьВТаблицуЗначений(ТаблицаПоТареРезерв, ТаблицаДвижений);

				ТаблицаДвижений.ЗаполнитьЗначения(СкладОтправитель, "Склад");
				Если НЕ ЗначениеНеЗаполнено(ВнутреннийЗаказ) Тогда
					ТаблицаДвижений.ЗаполнитьЗначения(ВнутреннийЗаказ,  "ДокументРезерва");
				КонецЕсли;

				НаборДвижений.мПериод = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
				
				// Проверка осатков при оперативном проведении.
				Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
					НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
				КонецЕсли;
				
				Если Не Отказ Тогда
					Движения.ТоварыВРезервеНаСкладах.ВыполнитьРасход();
				КонецЕсли;
			КонецЕсли;
			
			// ТАРА ПО РЕГИСТРУ ТоварыКПолучениюНаСклады
			// Для резервов по ордеру надо списать с регистра "Товары к получению на склады"
			ТаблицаПоТареКПолучению = ТаблицаПоТаре.Скопировать();
			Сч = 0;
			Пока Сч < ТаблицаПоТареКПолучению.Количество() Цикл
				СтрокаТаблицы = ТаблицаПоТареКПолучению.Получить(Сч);
				Если ЗначениеНеЗаполнено(СтрокаТаблицы.ДокументРезерва) ИЛИ ТипЗнч(СтрокаТаблицы.ДокументРезерва) <> Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
					ТаблицаПоТареКПолучению.Удалить(СтрокаТаблицы);
				Иначе 
					Сч = Сч + 1;
				КонецЕсли; 
			КонецЦикла;
			
			Если ТаблицаПоТареКПолучению.Количество() > 0 Тогда
				
				НаборДвижений = Движения.ТоварыКПолучениюНаСклады;
				ТаблицаПоТареКПолучению.Колонки.ДокументРезерва.Имя = "ДокументПолучения";
				
				ТаблицаДвижений = НаборДвижений.Выгрузить();
				ТаблицаДвижений.Очистить();
				
				ЗагрузитьВТаблицуЗначений(ТаблицаПоТареКПолучению, ТаблицаДвижений);
				
				ТаблицаДвижений.ЗаполнитьЗначения(СкладОтправитель, "Склад");
		 		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "СтатусПартии");
				
				НаборДвижений.мПериод = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
				
				// Проверка осатков при оперативном проведении.
				Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
					НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
				КонецЕсли;
				
				Если Не Отказ Тогда
					Движения.ТоварыКПолучениюНаСклады.ВыполнитьРасход();
				КонецЕсли;
				
			КонецЕсли;
//=================================================================================================================================			
		Иначе // Не по ордерам.
			
			// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах или ТоварыВНеавтоматизированныхТорговыхТочках. Расход.
			Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
				НаборДвижений = Движения.ТоварыВНеавтоматизированныхТорговыхТочках;
			Иначе
				НаборДвижений = Движения.ТоварыНаСкладах;
			КонецЕсли;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвиженийТоварыНаСкладах = НаборДвижений.Выгрузить();
			ТаблицаДвиженийТоварыНаСкладах.Очистить();
			ТаблицаДвижений = ТаблицаДвиженийТоварыНаСкладах.Скопировать();
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
			
			
			// {20120202-- Лапенков 
			Если ЗначениеНеЗаполнено(ВнутреннийЗаказ) Тогда // 
			ТаблицаДвижений.ЗаполнитьЗначения(СкладОтправитель,"Склад"); 
			КонецЕсли;
		    // }-- 
			
			Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Товар, "ТоварТара");
			КонецЕсли;
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			
			//+++( 23.03.2017 --- проверяем ВСЕГДА!
			// Проверка остатков при оперативном проведении.
			Если Отказ Тогда
				возврат;
			Иначе                                                                                            //+++ 01.11.2018 - флНеоперативно!
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок,  (РежимПроведения = РежимПроведенияДокумента.Неоперативный) );
			
				Если Отказ Тогда
									
					Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
						
						//+++( 05.06.2017 --- перемещение на склад Брака - можно задача № 25815----
						Если СкладПолучатель.ЗапретитьИспользование 
							И (РольДоступна("яштФинДиректор") или РольДоступна("ПолныеПрава")) Тогда
							
							Отказ = ложь; //МОЖНО!
							
							#Если Клиент Тогда
							Сообщить("Оперативное перемещение на склад "+строка(СкладПолучатель)+" - для Вас есть право проводить в ""минус""!", СтатусСообщения.Информация);
							
							//01.11.2018 ---- выключены!
							//1. определение товаров в "минусе" по резерву на складе - определение заказов
							//таблЗаказов = найтиМинусовыеЗаказы();
							
							//2. по всем заказам - создание задачи-напоминалки для менеджеров
							//СоздатьЗадачиМенеджерам(таблЗаказов);
							#КонецЕсли
						
						Иначе   //оперативно - нет остатков?!
							
							Если РольДоступна("ПравоЗавершенияРаботыПользователей") тогда //01.11.2018
								#Если Клиент Тогда
								Сообщить("НЕТ ТОВАРА на одном из складов-отправителей в документе: "+строка(ЭтотОбъект), СтатусСообщения.ОченьВажное);
								#КонецЕсли
 								Отказ = ложь; //МОЖНО!
								
							иначе	
								#Если Клиент Тогда
								Сообщить("ЗАПРЕЩЕНО ПРОВОДИТЬ ПЕРЕМЕЩЕНИЕ В МИНУС! НЕТ ТОВАРА на одном из складов-отправителей!", СтатусСообщения.ОченьВажное);
								#КонецЕсли
								Возврат; // СРАЗУ ВОЗВРАТ!
							КонецЕсли;
						
						КонецЕсли;
						//+++)

					Иначе //неоперативно... задним числом что-то перепроводят или меняют склады
						
						#Если Клиент Тогда
						Сообщить("НЕТ ТОВАРА на одном из складов-отправителей в документе: "+строка(ЭтотОбъект), СтатусСообщения.ОченьВажное);
						#КонецЕсли
					
						Если РольДоступна("яштФинДиректор") Тогда // финОтдел + IT + ЕгорМалышев, Бондаренко, Марешева
					    	Отказ = ложь;
						КонецЕсли;	
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли; 
			//+++)
			
			Если Не Отказ Тогда
				Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
					Движения.ТоварыВНеавтоматизированныхТорговыхТочках.ВыполнитьРасход();
				Иначе
					Движения.ТоварыНаСкладах.ВыполнитьРасход();
				КонецЕсли;			
			КонецЕсли;
			
			
			// ТАРА ПО РЕГИСТРУ ТоварыНаСкладах или ТоварыВНеавтоматизированныхТорговыхТочках. Расход.
			
			Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
				НаборДвижений = Движения.ТоварыВНеавтоматизированныхТорговыхТочках;
			Иначе
				НаборДвижений = Движения.ТоварыНаСкладах;
			КонецЕсли;
			
			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = ТаблицаДвиженийТоварыНаСкладах.Скопировать();
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);
			
			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(СкладОтправитель,"Склад");
			Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Тара, "ТоварТара");
			Иначе
				ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
			КонецЕсли;
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			// Проверка осатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;
			
			Если Не Отказ Тогда
				Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
					Движения.ТоварыВНеавтоматизированныхТорговыхТочках.ВыполнитьРасход();
				Иначе
					Движения.ТоварыНаСкладах.ВыполнитьРасход();
				КонецЕсли;
			КонецЕсли;
			
			// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах или ТоварыВНеавтоматизированныхТорговыхТочках. Приход.
			
			Если СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
				НаборДвижений = Движения.ТоварыВНеавтоматизированныхТорговыхТочках;
			Иначе
				НаборДвижений = Движения.ТоварыНаСкладах;
			КонецЕсли;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвиженийТоварыНаСкладах = НаборДвижений.Выгрузить();
			ТаблицаДвиженийТоварыНаСкладах.Очистить();
			ТаблицаДвижений = ТаблицаДвиженийТоварыНаСкладах.Скопировать();
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
			
			// Недостающие поля.
			//+++( 25.04.2014 - Приход на склад получатель Если заполнен Внутренний заказ
			Если ЗначениеЗаполнено(ВнутреннийЗаказ) Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(СкладПолучатель,"Склад");
			Иначе 
				для i=0 по Товары.Количество()-1 цикл
					Если ТаблицаДвижений[i].НомерСтроки=Товары[i].НомерСтроки Тогда
					 ТаблицаДвижений[i].Склад = ?(ЗначениеЗаполнено(Товары[i].Склад), Товары[i].Склад, СкладПолучатель);
				    иначе
						#Если Клиент Тогда
						сообщить(строка(ТаблицаДвижений[i].НомерСтроки)+") невозможно определелить склад-получатель из табл.части, будет сделано перемещение на "+СкладПолучатель);
						#КонецЕсли	
					    ТаблицаДвижений[i].Склад = СкладПолучатель;
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;
			//+++)
			
			Если СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Товар, "ТоварТара");
			КонецЕсли;
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Если СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
					Движения.ТоварыВНеавтоматизированныхТорговыхТочках.ВыполнитьПриход();
				Иначе
					Движения.ТоварыНаСкладах.ВыполнитьПриход();
				КонецЕсли;
			КонецЕсли;
			
			// ТАРА ПО РЕГИСТРУ ТоварыНаСкладах или ТоварыВНеавтоматизированныхТорговыхТочках. Приход.
			
			Если СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
				НаборДвижений = Движения.ТоварыВНеавтоматизированныхТорговыхТочках;
			Иначе
				НаборДвижений = Движения.ТоварыНаСкладах;
			КонецЕсли;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = ТаблицаДвиженийТоварыНаСкладах.Скопировать();
			
			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);
			
			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(СкладПолучатель,"Склад");
			Если СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Тара, "ТоварТара");
			Иначе
				ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
			КонецЕсли;
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Если СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
					Движения.ТоварыВНеавтоматизированныхТорговыхТочках.ВыполнитьПриход();
				Иначе
					Движения.ТоварыНаСкладах.ВыполнитьПриход();
				КонецЕсли;
			КонецЕсли;
			
			// ТОВАРЫ ПО РЕГИСТРУ ТоварыВРезервеНаСкладах
			ТаблицаПоТоварамРезерв = ТаблицаПоТоварам.Скопировать();
			Сч = 0;
			Пока Сч < ТаблицаПоТоварамРезерв.Количество() Цикл
				СтрокаТаблицы = ТаблицаПоТоварамРезерв.Получить(Сч);
				Если ЗначениеНеЗаполнено(ВнутреннийЗаказ) Тогда
					Если ЗначениеНеЗаполнено(СтрокаТаблицы.ДокументРезерва) 
					 ИЛИ (ТипЗнч(СтрокаТаблицы.ДокументРезерва) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") 
					   И НЕ СтрокаТаблицы.РезервБезПраваПродажи) Тогда
						ТаблицаПоТоварамРезерв.Удалить(СтрокаТаблицы);
					Иначе 
						Сч = Сч + 1;
					КонецЕсли; 
				Иначе
					Если Не СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
						ТаблицаПоТоварамРезерв.Удалить(СтрокаТаблицы);
					Иначе 
						Сч = Сч + 1;
					КонецЕсли; 
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТаблицаПоТоварамРезерв.Количество() > 0 Тогда
				
				НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
				
				ТаблицаДвижений = НаборДвижений.Выгрузить();
				ТаблицаДвижений.Очистить();
				
				ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамРезерв, ТаблицаДвижений);
				
				ТаблицаДвижений.ЗаполнитьЗначения(СкладОтправитель, "Склад");
				Если НЕ ЗначениеНеЗаполнено(ВнутреннийЗаказ) Тогда
					ТаблицаДвижений.ЗаполнитьЗначения(ВнутреннийЗаказ,  "ДокументРезерва");
				КонецЕсли;
				
				НаборДвижений.мПериод = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
				
				// Проверка осатков при оперативном проведении.
				Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
					НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
				КонецЕсли;
				
				Если Не Отказ Тогда
					Движения.ТоварыВРезервеНаСкладах.ВыполнитьРасход();
				КонецЕсли;
				
				Если ЗначениеНеЗаполнено(ВнутреннийЗаказ) Тогда
					ТаблицаДвижений.ЗаполнитьЗначения(СкладПолучатель, "Склад");
					НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
					
					Если Не Отказ Тогда
						Движения.ТоварыВРезервеНаСкладах.ВыполнитьПриход();
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПолучениюНаСклады
			// Для резервов по ордеру надо поменять склад в регистре "Товары к получению на склады"
			ТаблицаПоТоварамКПолучению = ТаблицаПоТоварам.Скопировать();
			Сч = 0;
			Пока Сч < ТаблицаПоТоварамКПолучению.Количество() Цикл
				СтрокаТаблицы = ТаблицаПоТоварамКПолучению.Получить(Сч);
				Если ЗначениеНеЗаполнено(СтрокаТаблицы.ДокументРезерва) ИЛИ ТипЗнч(СтрокаТаблицы.ДокументРезерва) <> Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
					ТаблицаПоТоварамКПолучению.Удалить(СтрокаТаблицы);
				Иначе 
					Сч = Сч + 1;
				КонецЕсли; 
			КонецЦикла;
			
			Если ТаблицаПоТоварамКПолучению.Количество() > 0 Тогда
				
				НаборДвижений = Движения.ТоварыКПолучениюНаСклады;
				ТаблицаПоТоварамКПолучению.Колонки.ДокументРезерва.Имя = "ДокументПолучения";
				
				ТаблицаДвижений = НаборДвижений.Выгрузить();
				ТаблицаДвижений.Очистить();
				
				ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамКПолучению, ТаблицаДвижений);
				
				ТаблицаДвижений.ЗаполнитьЗначения(СкладОтправитель, "Склад");
 				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");
				
				НаборДвижений.мПериод = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
				
				// Проверка осатков при оперативном проведении.
				Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
					НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
				КонецЕсли;
				
				Если Не Отказ Тогда
					Движения.ТоварыКПолучениюНаСклады.ВыполнитьРасход();
				КонецЕсли;
				
//				ТаблицаДвижений.ЗаполнитьЗначения(СкладПолучатель, "Склад");

	//+++( 25.04.2014 - Приход на склад получатель Если заполнен Внутренний заказ
			Если ЗначениеЗаполнено(ВнутреннийЗаказ) Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(СкладПолучатель,"Склад");
			Иначе 
				для i=0 по Товары.Количество()-1 цикл
					Если ТаблицаДвижений[i].НомерСтроки=Товары[i].НомерСтроки Тогда
					 ТаблицаДвижений[i].Склад = ?(ЗначениеЗаполнено(Товары[i].Склад), Товары[i].Склад, СкладПолучатель);
				    иначе
						#Если Клиент Тогда
						сообщить(строка(ТаблицаДвижений[i].НомерСтроки)+") невозможно определелить склад-получатель из табл.части, будет сделано перемещение на "+СкладПолучатель);
						#КонецЕсли	
					    ТаблицаДвижений[i].Склад = СкладПолучатель;
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;
			//+++)

				
				Если Не Отказ Тогда
					Движения.ТоварыКПолучениюНаСклады.ВыполнитьПриход();
				КонецЕсли;
				
			КонецЕсли;
			
			// ТАРА ПО РЕГИСТРУ ТоварыВРезервеНаСкладах
			ТаблицаПоТареРезерв = ТаблицаПоТаре.Скопировать();
			Сч = 0;
			Пока Сч < ТаблицаПоТареРезерв.Количество() Цикл
				СтрокаТаблицы = ТаблицаПоТареРезерв.Получить(Сч);
				Если ЗначениеНеЗаполнено(ВнутреннийЗаказ) Тогда
					Если ЗначениеНеЗаполнено(СтрокаТаблицы.ДокументРезерва) 
						ИЛИ (ТипЗнч(СтрокаТаблицы.ДокументРезерва) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") 
						И НЕ СтрокаТаблицы.РезервБезПраваПродажи) Тогда
						ТаблицаПоТареРезерв.Удалить(СтрокаТаблицы);
					Иначе 
						Сч = Сч + 1;
					КонецЕсли; 
				Иначе
					Если Не СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
						ТаблицаПоТареРезерв.Удалить(СтрокаТаблицы);
					Иначе 
						Сч = Сч + 1;
					КонецЕсли; 
				КонецЕсли;
			КонецЦикла;
			
			Если ТаблицаПоТареРезерв.Количество() > 0 Тогда
				
				НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
				
				ТаблицаДвижений = НаборДвижений.Выгрузить();
				ТаблицаДвижений.Очистить();
				
				ЗагрузитьВТаблицуЗначений(ТаблицаПоТареРезерв, ТаблицаДвижений);
				
				ТаблицаДвижений.ЗаполнитьЗначения(СкладОтправитель, "Склад");
				Если НЕ ЗначениеНеЗаполнено(ВнутреннийЗаказ) Тогда
					ТаблицаДвижений.ЗаполнитьЗначения(ВнутреннийЗаказ,  "ДокументРезерва");
				КонецЕсли;
				
				НаборДвижений.мПериод = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
				
				// Проверка осатков при оперативном проведении.
				Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
					НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
				КонецЕсли;
				
				Если Не Отказ Тогда
					Движения.ТоварыВРезервеНаСкладах.ВыполнитьРасход();
				КонецЕсли;
				
				Если ЗначениеНеЗаполнено(ВнутреннийЗаказ) Тогда
					ТаблицаДвижений.ЗаполнитьЗначения(СкладПолучатель, "Склад");
					НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
					
					Если Не Отказ Тогда
						Движения.ТоварыВРезервеНаСкладах.ВыполнитьПриход();
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			// ТАРА ПО РЕГИСТРУ ТоварыКПолучениюНаСклады
			// Для резервов по ордеру надо поменять склад в регистре "Товары к получению на склады"
			ТаблицаПоТареКПолучению = ТаблицаПоТаре.Скопировать();
			Сч = 0;
			Пока Сч < ТаблицаПоТареКПолучению.Количество() Цикл
				СтрокаТаблицы = ТаблицаПоТареКПолучению.Получить(Сч);
				Если ЗначениеНеЗаполнено(СтрокаТаблицы.ДокументРезерва) ИЛИ ТипЗнч(СтрокаТаблицы.ДокументРезерва) <> Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
					ТаблицаПоТареКПолучению.Удалить(СтрокаТаблицы);
				Иначе 
					Сч = Сч + 1;
				КонецЕсли; 
			КонецЦикла;
			
			Если ТаблицаПоТареКПолучению.Количество() > 0 Тогда
				
				НаборДвижений = Движения.ТоварыКПолучениюНаСклады;
				ТаблицаПоТареКПолучению.Колонки.ДокументРезерва.Имя = "ДокументПолучения";
				
				ТаблицаДвижений = НаборДвижений.Выгрузить();
				ТаблицаДвижений.Очистить();
				
				ЗагрузитьВТаблицуЗначений(ТаблицаПоТареКПолучению, ТаблицаДвижений);
				
				ТаблицаДвижений.ЗаполнитьЗначения(СкладОтправитель, "Склад");
 				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "СтатусПартии");
				
				НаборДвижений.мПериод = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
				
				// Проверка осатков при оперативном проведении.
				Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
					НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
				КонецЕсли;
				
				Если Не Отказ Тогда
					Движения.ТоварыКПолучениюНаСклады.ВыполнитьРасход();
				КонецЕсли;
				
				ТаблицаДвижений.ЗаполнитьЗначения(СкладПолучатель, "Склад");
				
				Если Не Отказ Тогда
					Движения.ТоварыКПолучениюНаСклады.ВыполнитьПриход();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеНеЗаполнено(ВнутреннийЗаказ) Тогда
		
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ИмяТабЧасти",       "Товары");
			ДопПараметры.Вставить("СтатусПартии",      Перечисления.СтатусыПартийТоваров.Купленный);
			ДопПараметры.Вставить("РежимПроведения",   РежимПроведения);
			Если ЗначениеНеЗаполнено(ВнутреннийЗаказ) Тогда
				ДопПараметры.Вставить("ИмяРеквизитаЗаказ",  "ДокументРезерва");
				ДопПараметры.Вставить("ЗаказВШапке",        Ложь);
			Иначе
				ДопПараметры.Вставить("ИмяРеквизитаЗаказ",  "ВнутреннийЗаказ");
				ДопПараметры.Вставить("ЗаказВШапке",        Истина);
			КонецЕсли;
			
			ДвижениеПоВнутреннимЗаказам( ЭтотОбъект, ТаблицаПоТоварам, ДопПараметры, Отказ, Заголовок);
			
			ДопПараметры.Вставить("ИмяТабЧасти", "ВозвратнаяТара");
			ДопПараметры.Вставить("СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
			
			ДвижениеПоВнутреннимЗаказам( ЭтотОбъект, ТаблицаПоТаре,    ДопПараметры, Отказ, Заголовок);
		КонецЕсли;
	
	КонецЕсли;
	
	
	//+++ 02.07.2014 - после всех движений...      Товары ПО РЕГИСТРУ ТоварыАдресноеХранение
	Если Не Отказ и ТоварыАдресноеХранение.Количество() > 0 Тогда
		
		//яштАдресноеХранение.ДвиженияПоРегиструТоварыАдресноеХранение(Движения.ТоварыАдресноеХранение,ЭтотОбъект);
		
		//+++( 27.08.2014 - Если идет отгрузка с адресов - Проверка наличия по адресам и редупрежедение!
		Если НЕ (ЗначениеНеЗаполнено(ВнутреннийЗаказ) 
			     И НЕ СкладОтправитель.АдресноеХранение) Тогда
			яштАдресноеХранение.КонтрольОстатковАдресноеХранение(ЭтотОбъект.Ссылка, Отказ );
		КонецЕсли;
	
			//- неоперативно можно проводить в минус ТОЛЬКО для Полных прав!
			Если Отказ 
				//и РольДоступна("ПолныеПрава")  23.03.2017 ЗАПРЕЩЕНО!
				и РольДоступна("ПравоЗавершенияРаботыПользователей")
				и РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
				#Если Клиент Тогда
					Сообщить("Ошибка в Адресном Хранении в документе: "+строка(ЭтотОбъект)+" !!!", СтатусСообщения.ОченьВажное );
				#КонецЕсли	
				Отказ = ЛОЖЬ;	
			КонецЕсли;
			
			Если Не Отказ Тогда
				яштАдресноеХранение.ДвиженияПоРегиструТоварыАдресноеХранение(Движения.ТоварыАдресноеХранение, ЭтотОбъект);
			КонецЕсли;
		//+++)	

	КонецЕсли;

КонецПроцедуры //ДвиженияПоРегистрамУпр()


Процедура ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварамИсходная, ТаблицаПоТареИсходная,Отказ, Заголовок)

	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.
	
	ТаблицаПоТоварам = ТаблицаПоТоварамИсходная.Скопировать();

	// Удалим строки с документами резерва по ордерам
	Инд=0;
	Пока Инд<ТаблицаПоТоварам.Количество() Цикл
		Если ТаблицаПоТоварам[Инд].РезервБезПраваПродажи=Истина Тогда
			ТаблицаПоТоварам.Удалить(Инд);
		Иначе
			Инд=Инд+1;
		КонецЕсли;
	КонецЦикла;

	ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
	
	Для Каждого Строка Из ТаблицаПоТоварам Цикл
		
		Движение = ТаблицаДвижений[ТаблицаПоТоварам.Индекс(Строка)];
		
		Если Строка.ОбособленныйУчетТоваровПоЗаказамПокупателей=Истина Тогда
			Движение.ЗаказПартии = Строка.ДокументРезерва;
			Движение.ЗаказСписания = Строка.ДокументРезерва;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "СписыватьТолькоПоЗаказу");
	
	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
	КонецЦикла;
	
    // { Лапенков 20110202 
	Если ЗначениеНеЗаполнено(ВнутреннийЗаказ) Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(СкладОтправитель,"Склад");
	КонецЕсли;
    // } Лапенков
	
	ТаблицаДвижений.ЗаполнитьЗначения(СкладПолучатель,"СкладПолучатель");

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");

	Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция Тогда 
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,"ДопустимыйСтатус1");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,"ДопустимыйСтатус2");
	КонецЕсли;
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПеремещениеМеждуСкладами,"КодОперацииПартииТоваров");

	// Если Партионный учет по складам  в упр учете
	Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Организация,    "Организация");

	// Если перемещение по ордерам, то партии не списываются документом перемещения
	Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "НеСписывать");
	КонецЕсли;

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;

	// ТАРА ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	ТаблицаПоТаре = ТаблицаПоТареИсходная.Скопировать();
	Пока Инд<ТаблицаПоТаре.Количество() Цикл
		Если ТаблицаПоТаре[Инд].РезервБезПраваПродажи=Истина Тогда
			ТаблицаПоТаре.Удалить(Инд);
		Иначе
			Инд=Инд+1;
		КонецЕсли;
	КонецЦикла;

	// Заполним таблицу движений.
	ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

	// Недостающие поля.
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
	КонецЦикла;

	ТаблицаДвижений.ЗаполнитьЗначения(СкладОтправитель,"Склад");
	ТаблицаДвижений.ЗаполнитьЗначения(СкладПолучатель,"СкладПолучатель");

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПеремещениеМеждуСкладами,"КодОперацииПартииТоваров");

	// Если Партионный учет по складам  в упр учете
	Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");

	// Если перемещение по ордерам, то партии не списываются документом перемещения
	Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "НеСписывать");
	КонецЕсли;

	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
КонецПроцедуры


Процедура ДвиженияПоРегиструЗаказы ()
	       //
	Если Ссылка.Дата < Дата('20131015') Тогда
		Возврат;    // только по новым перемещениям
	КонецЕсли;	
	
	Если   ЗначениеЗаполнено(ВнутреннийЗаказ) И ЗначениеЗаполнено(ВнутреннийЗаказ.ДокументОснование) Тогда
		
		// перемещение с нетранзитных складов на транзитные
		//
		//+++ 24.06.2016 - надо закрывать "заказы" на перемещение с Филиала на Яршинторг ТК  (на склад Товары в Пути)
		сФилиалаНаЯШТ = ложь;
		Если ВнутреннийЗаказ.ДокументОснование.Контрагент 
			= справочники.Подразделения.НайтиПоКоду("00005").Контрагент 
			и  Ссылка.СкладПолучатель.ТипСклада = перечисления.ТипыСкладов.ВПути Тогда
			сФилиалаНаЯШТ = истина;
		КонецЕсли;
		
		
		ЗаказСсылка=ВнутреннийЗаказ.ДокументОснование;	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("сФилиалаНаЯШТ",сФилиалаНаЯШТ);
		
		Запрос.Текст = " ВЫБРАТЬ Перемещение.Номенклатура,
		|Перемещение.Количество,
		|ЕстьNULL(ЗаказПокупателя.Цена,1) Цена,
		|ЕстьNULL(ЗаказПокупателя.Сумма,0) Сумма,
		|ЕстьNULL(ПроцентСкидкиНаценки,0) ПроцентСкидкиНаценки,
		|ЕстьNULL(ЗаказПокупателя.ПроцентАвтоматическихСкидок,0) ПроцентАвтоматическихСкидок,
		|ЕстьNULL(ЗаказПокупателя.ЕдиницаИзмерения,Перемещение.Номенклатура.ЕдиницаХраненияОстатков) ЕдиницаИзмерения
		|ИЗ
		|(ВЫБРАТЬ
		|	Номенклатура,
		|	СУММА(Количество) Количество
		|	ИЗ
		|	Документ.ПеремещениеТоваров.Товары 
		|	ГДЕ
		|	Ссылка = &Ссылка
		|   И НЕ Склад.ЗапретитьИспользование
		
		|	И ( ( НЕ Склад.Транзитный
		|	     И ( Ссылка.СкладПолучатель.Транзитный или Ссылка.СкладПолучатель.ЗапретитьИспользование )
		|        )
		//+++ 24.06.2016
		|	 или &сФилиалаНаЯШТ)
		
		|	СГРУППИРОВАТЬ ПО Номенклатура ) Перемещение
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|   ( ВЫБРАТЬ
		|	Номенклатура,
		|	ЕдиницаИзмерения,
		|	ПроцентСкидкиНаценки,
		|	Количество,
		|	Цена,
		|	Сумма,
		|	ПроцентАвтоматическихСкидок,
		|	УсловиеАвтоматическойСкидки,
		|	ЗначениеУсловияАвтоматическойСкидки
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары 
		|ГДЕ Ссылка = &Заказ  ) ЗаказПокупателя
		|ПО Перемещение.Номенклатура = 	ЗаказПокупателя.Номенклатура" ;
		
		Запрос.УстановитьПараметр("Ссылка",Ссылка );
		Запрос.УстановитьПараметр("Заказ",ЗаказСсылка );
		Результат=Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			Выборка =Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				Движ = Движения.ЗаказыПокупателей.Добавить();
				Движ.ВидДвижения= ВидДвиженияНакопления.Расход;
				Движ.Период= Ссылка.Дата;
				Движ.Регистратор= Ссылка;
				Движ.ДоговорКонтрагента= ЗаказСсылка.ДоговорКонтрагента;
				Движ.ЗаказПокупателя= ЗаказСсылка;
				Движ.ЕдиницаИзмерения= Выборка.ЕдиницаИзмерения;
				Движ.СтатусПартии	=  Перечисления.СтатусыПартийТоваров.Купленный;
				Движ.Номенклатура	=  Выборка.Номенклатура;
				Движ.ХарактеристикаНоменклатуры	=  Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				Движ.Цена = Выборка.Цена;
				// -------------------				
				Движ.Количество = Выборка.Количество;
				Движ.СуммаВзаиморасчетов = Выборка.Сумма;
				Движ.СуммаУпр = Выборка.Сумма;
			КонецЦикла;	
			
		КонецЕсли;		
	КонецЕсли;			
		
КонецПроцедуры	
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда

		Если Не ИспользоватьВнутренниеЗаказы() Тогда
			Возврат;
		КонецЕсли;

		// Заполнение шапки
		ОтражатьВУправленческомУчете = Истина;
		ОтражатьВБухгалтерскомУчете  = Ложь;
		ОтражатьВНалоговомУчете      = Ложь;
			
		Организация        = Основание.Организация;
		Ответственный      = Основание.Ответственный;
		Подразделение      = Основание.Подразделение;
		ВнутреннийЗаказ    = Основание.Ссылка;
		Комментарий        = Основание.Комментарий;
		Дата			   = ТекущаяДата();
		
		Если ТипЗнч(Основание.Заказчик)=Тип("СправочникСсылка.Склады") Тогда 
			СкладПолучатель    = Основание.Заказчик;
		иначе
		    Сообщить("Во внутреннем заказе указанj подразделение в поле Заказчик: "+Основание.Заказчик);
        КонецЕсли;
		
		//+++ не все остатки, а с учетом качества и склада
		ТабОстатки = ОстаткиТоваровПоВнутреннемуЗаказу(Основание, Дата);
		ЗаполнитьТабЧастьТоварыПоВнутреннемуЗаказу(ЭтотОбъект, Товары, ТабОстатки);
		
		// { Лапенков 20120329 для автоматического заполнения складов, на которых есть остатки
        ТабОстаткиПоСкладам=ОстаткиТоваровПоСкладамПоВнутреннемуЗаказу(Основание);
		ЗаполнитьСкладыВТабЧастиТоварыПоВнутреннемуЗаказу(ЭтотОбъект, Товары, ТабОстаткиПоСкладам);
        // } Лапенков 
	КонецЕсли;	
				
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда

		// Заполнение шапки
		Товары.Очистить();
		ОтражатьВУправленческомУчете = Истина;
		ОтражатьВБухгалтерскомУчете  = Ложь;
		ОтражатьВНалоговомУчете      = Ложь;
		//СкладПолучатель    = Основание.Заказчик;
		Организация        = Основание.Организация;
		Ответственный      = Основание.Ответственный;
		Подразделение      = Основание.Подразделение;
		//ВнутреннийЗаказ    = Основание.Ссылка;
		Комментарий        = Основание.Комментарий;

		Для Каждого СтрокаТЧ Из Основание.Товары Цикл			
			СтрДоб = Товары.Добавить();
			СтрДоб.Номенклатура = СтрокаТЧ.Номенклатура;
			СтрДоб.Количество = СтрокаТЧ.Количество;
			СтрДоб.ЕдиницаИзмерения = СтрокаТЧ.ЕдиницаИзмерения;
			СтрДоб.Коэффициент = СтрокаТЧ.Коэффициент;
			СтрДоб.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
			СтрДоб.Качество = Справочники.Качество.НайтиПоНаименованию("Новый");
		КонецЦикла;
    КонецЕсли;
		
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВнутреннееПеремещениеТоваров") Тогда
		
		// Заполнение шапки
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание);
		Проверен = ЛОЖЬ;
		Проведен = ЛОЖЬ;
		ПометкаУдаления= ЛОЖЬ;
		
		Комментарий   = "#На основании: "+строка(Основание)+" # "+Основание.Комментарий;
		
	 ТЧТовары = Основание.Товары.Выгрузить();
	 ТЧТовары.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры", "Количество, Вес"); // без адресов - только Товары!
     Товары.Очистить();
 	 	Для Каждого СтрокаТЧ Из ТЧТовары Цикл			
			СтрДоб = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрДоб, СтрокаТЧ);
			СтрДоб.Качество = Справочники.Качество.НайтиПоНаименованию("Новый");
			СтрДоб.КоличествоМест = ?(СтрДоб.КоличествоМест=0, СтрДоб.Количество, СтрДоб.КоличествоМест);
			СтрДоб.ЕдиницаИзмеренияМест = СтрДоб.ЕдиницаИзмерения;
			СтрДоб.Коэффициент = 1;
			
			СтрДоб.СпособСписанияОстаткаТоваров = перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
			СтрДоб.Склад    = Основание.СкладПолучатель;
		КонецЦикла;

	КонецЕсли;

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаБрак") тогда
		// Заполнение шапки
		Товары.Очистить();
		ОтражатьВУправленческомУчете = Истина;
		ОтражатьВБухгалтерскомУчете  = Ложь;
		ОтражатьВНалоговомУчете      = Ложь;
		
		//+++ 23.11.2017 для проведения из регл.заданий
		//15.03.2018 Смирнов для проведения из регл.заданий
	#Если Клиент Тогда
		Мен = ПараметрыСеанса.ТекущийПользователь;
		Если НЕ ЗначениеЗаполнено(Мен) тогда
			Мен = справочники.Пользователи.НайтиПоКоду("Робот (магазин)");
		КонецЕсли;
	#Иначе
		Мен = справочники.Пользователи.НайтиПоКоду("Робот (магазин)");
	#КонецЕсли

		Ответственный      = Мен;
		Подразделение      = Основание.Подразделение;
		Организация        = справочники.Организации.НайтиПоКоду("00001");//всегда ЯШТ
		
		//12.10.2017
		ЗаявкаНаБрак 	   = Основание;
		СкладОтправитель   = ЭтотОбъект.Подразделение.Склад;
		СкладПолучатель    = ЭтотОбъект.Подразделение.Склад;
		
		Комментарий        = "#На основании: "+строка(Основание)+" # "+Основание.Комментарий;

		Для Каждого СтрокаТЧ Из Основание.Расшифровка Цикл			
			СтрДоб = Товары.Добавить();
			СтрДоб.Номенклатура = СтрокаТЧ.Номенклатура;
			
			СтрДоб.Качество     = справочники.Качество.Новый;   //!!! БРАК !!! СтрокаТЧ.Качество 
			
			СтрДоб.Количество   = СтрокаТЧ.Количество;
			СтрДоб.ЕдиницаИзмерения = СтрДоб.Номенклатура.ЕдиницаХраненияОстатков;
			СтрДоб.Коэффициент = 1;
			СтрДоб.Вес = СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков.Вес * СтрокаТЧ.Количество;
		КонецЦикла;
    КонецЕсли;

	//+++ 26.03.2012
	Проверен = ложь;
	
КонецПроцедуры // ОбработкаЗаполнения()

//+++ 11.11.2014 - ответственный - текущий
процедура ПриКопировании(ОбъектКопирования)
	
	ЭтотОбъект.Проверен 	   = Ложь;
	ЭтотОбъект.Дата 		   = ТекущаяДата();
	ЭтотОбъект.Номер 		   = "";
	
	//+++ 23.11.2017 для проведения из регл.заданий
	//15.03.2018 Смирнов для проведения из регл.заданий
	#Если Клиент Тогда
		Мен = ПараметрыСеанса.ТекущийПользователь;
		Если НЕ ЗначениеЗаполнено(Мен) тогда
			Мен = справочники.Пользователи.НайтиПоКоду("Робот (магазин)");
		КонецЕсли;
	#Иначе
		Мен = справочники.Пользователи.НайтиПоКоду("Робот (магазин)");
	#КонецЕсли

	ЭтотОбъект.Ответственный   = Мен;
	ЭтотОбъект.Подразделение   = Мен.ОсновноеПодразделение;
	
	//копируется на основании другого перемещения,поэтому ВнутреннийЗаказ - чистим
	ЭтотОбъект.ВнутреннийЗаказ = документы.ВнутреннийЗаказ.ПустаяСсылка();
	 
	//+++ 06.03.2016
	 ЭтотОбъект.Перемещение = документы.ПеремещениеТоваров.ПустаяСсылка();
	 
	 Если ЗначениеЗаполнено(ОбъектКопирования.ВнутреннийЗаказ)
		и ЗначениеЗаполнено(ОбъектКопирования.СкладПолучатель)
		и ОбъектКопирования.СкладПолучатель.ТипСклада = Перечисления.ТипыСкладов.ВПути Тогда
		
	ЭтотОбъект.СкладОтправитель = ОбъектКопирования.СкладПолучатель;
	
	//+++ 15.11.2017 Москва копирует неправильно!
	// если копируют документ, в котором с московского склада ... отправляют на Товары в пути
	//  и потом с товаров в пути на то же Подразделение - то ссылку на перемещение НЕ надо!
	подрОтправитель = ?(ОбъектКопирования.СкладОтправитель.Подразделение.Пустая(), 
										справочники.Подразделения.НайтиПоКоду("00001"),
										ОбъектКопирования.СкладОтправитель.Подразделение);
     Если подрОтправитель <> ЭтотОбъект.Подразделение тогда //это реальное перемещение с 1 филиала на другое!
		 ЭтотОбъект.Перемещение = ОбъектКопирования.Ссылка; // новая ссылка!
	 КонецЕсли;
	 
	Если ОбъектКопирования.Товары[0].Склад.Подразделение = справочники.Подразделения.ПустаяСсылка() Тогда
		//с ЯШТ на Филиал
		ЭтотОбъект.Подразделение    = ОбъектКопирования.СкладПолучатель.Подразделение;
	иначе // наоборот с Филиала на ЯШТ
		ЭтотОбъект.Подразделение    = справочники.Подразделения.НайтиПоКоду("0005");
	КонецЕсли;
		ЭтотОбъект.СкладПолучатель  = ЭтотОбъект.Подразделение.Склад; // основной склад подразделения
		
		для каждого стр1 из этотОбъект.Товары цикл
			стр1.Склад = справочники.Склады.ПустаяСсылка();
		КонецЦикла;	
		табл  = этотОбъект.Товары.Выгрузить();
		табл.Свернуть("Номенклатура, Цена, ЕдиницаИзмерения,ЕдиницаИзмеренияМест, Коэффициент, СпособСписанияОстаткаТоваров, Качество, ДокументРезерва, ХарактеристикаНоменклатуры, СерияНоменклатуры",
		"КоличествоМест, Количество, Вес");
		этотОбъект.Товары.Загрузить( табл );
		
		этотОбъект.ТоварыАдресноеХранение.Очистить();
		
	# Если Клиент Тогда
	Сообщить("Перемещение со склада "+строка(ЭтотОбъект.СкладПолучатель)+" на "+строка(ЭтотОбъект.Подразделение), СтатусСообщения.Информация);
	# КонецЕсли
	ЭтотОбъект.УстановитьНовыйНомер(ЭтотОбъект.Подразделение.ПрефиксИБ);
	КонецЕсли;

	//+++ 10.06.2015
	ЭтотОбъект.ДанныеПоПогрузке.Очистить();
	
КонецПроцедуры // ПриКопировании()
	
//+++
функция ПолучитьОстаткиНеперемещенные(докВнутрЗаказ, Дата1, Склад1=NULL) экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВнутреннийЗаказТовары.Номенклатура КАК Номенклатура,
	               |	ВнутреннийЗаказТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ВнутреннийЗаказТовары.Размещение КАК Склад,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ВнутреннийЗаказТовары.Количество, 0) <= ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0)
	               |			ТОГДА  ВЫБОР 
				   |				   КОГДА ЕСТЬNULL(ВнутренниеЗаказыОстатки.КоличествоОстаток, 0)<=ЕСТЬNULL(ВнутреннийЗаказТовары.Количество, 0)
				   |			       ТОГДА  ЕСТЬNULL(ВнутренниеЗаказыОстатки.КоличествоОстаток, 0)
				   |				  ИНАЧЕ ЕСТЬNULL(ВнутреннийЗаказТовары.Количество, 0)
				   |		          Конец 
	               |		ИНАЧЕ ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0)
	               |	КОНЕЦ КАК Количество,
	               |	ВЫБОР 
				   |				   КОГДА ЕСТЬNULL(ВнутренниеЗаказыОстатки.КоличествоОстаток, 0)<=ЕСТЬNULL(ВнутреннийЗаказТовары.Количество, 0)
				   |			       ТОГДА  ЕСТЬNULL(ВнутренниеЗаказыОстатки.КоличествоОстаток, 0)
				   |				  ИНАЧЕ ЕСТЬNULL(ВнутреннийЗаказТовары.Количество, 0)
				   |		          Конец как КоличествоОстаток,
	               |	ВнутреннийЗаказТовары.Качество
	               |ИЗ
	               |	РегистрНакопления.ВнутренниеЗаказы.Остатки(&Дата, ВнутреннийЗаказ = &ВнутреннийЗаказ) КАК ВнутренниеЗаказыОстатки
	               |		ПОЛНОЕ СОЕДИНЕНИЕ Документ.ВнутреннийЗаказ.Товары КАК ВнутреннийЗаказТовары
	               |			ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |					&Дата, ";
				   Если Склад1<>Null и Склад1<>Справочники.Склады.ПустаяСсылка() Тогда
					   Запрос.Текст = Запрос.Текст +" Склад = &Склад";
						Запрос.УстановитьПараметр("Склад", Склад1);
				   КонецЕсли;
				   Запрос.Текст = Запрос.Текст +") КАК ТоварыНаСкладахОстатки
	               |			ПО (ТоварыНаСкладахОстатки.Номенклатура = ВнутреннийЗаказТовары.Номенклатура)
	               |				И (ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры = ВнутреннийЗаказТовары.ХарактеристикаНоменклатуры)
	               |				И (ТоварыНаСкладахОстатки.Качество = ВнутреннийЗаказТовары.Качество)
	               |				И (ТоварыНаСкладахОстатки.Склад = ВнутреннийЗаказТовары.Размещение)
	               |		ПО ВнутренниеЗаказыОстатки.ВнутреннийЗаказ = ВнутреннийЗаказТовары.Ссылка
	               |			И ВнутренниеЗаказыОстатки.Номенклатура = ВнутреннийЗаказТовары.Номенклатура
	               |			И ВнутренниеЗаказыОстатки.ХарактеристикаНоменклатуры = ВнутреннийЗаказТовары.ХарактеристикаНоменклатуры
	               |ГДЕ
	               |	ВнутреннийЗаказТовары.Ссылка = &ВнутреннийЗаказ
				   |";
				   Если Склад1<>Null и Склад1<>Справочники.Склады.ПустаяСсылка() Тогда
				   	Запрос.Текст = Запрос.Текст +" И  ВнутреннийЗаказТовары.Размещение = &Склад";
				   КонецЕсли; Запрос.Текст = Запрос.Текст +"
	               |УПОРЯДОЧИТЬ ПО
	               |	ВнутреннийЗаказТовары.НомерСтроки 	   
	               |АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("ВнутреннийЗаказ", докВнутрЗаказ);
	Запрос.УстановитьПараметр("Дата", Дата1);
	
	Результат = Запрос.Выполнить();
	таблЗнач1 = Результат.Выгрузить();
	
	возврат таблЗнач1;
конецФункции	

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	//+++( 09.02.2018 --- по задаче № 40550 - блокировка изменения документа операторами склада (после 1 часа!)	
	Если НЕ ЭтоНовый() //повторное открытие...
		и РольДоступна("Кладовщик") и ОтражатьВБухгалтерскомУчете //уже выгружен в БП
		//в течении 2х часов - ещё можно что-то менять[v]БУ документе...(для задания на отгрузку/перемещение)
		и (ТекущаяДата() - ссылка.Дата)>2*3600 
	Тогда  
		Отказ = Истина;
		
		#Если Клиент тогда
		Сообщить("Документ "+строка(ссылка)+" - уже ЗАКРЫТ от измений! Позвоните в бухгалтерию для его изменения...", СтатусСообщения.Важное);
		#КонецЕсли
	КонецЕсли;
    //+++)
	
	//+++( 06-07.08.2018 - принудительное изменение номера после появляется Тл 
	Если ЭтоНовый() тогда
		СтрокаПрефикс = "ТК";
		Если Подразделение.ПрефиксИБ<>"" Тогда
			СтрокаПрефикс = подразделение.ПрефиксИБ;
		КонецЕсли;	
		Если СтрокаПрефикс <> Лев(Номер,2) тогда //неправильный префикс!
			ЭтотОбъект.УстановитьНовыйНомер(СтрокаПрефикс);	
		КонецЕсли;	
	КонецЕсли;
	//+++)
	
	//+++ 01.11.2018 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++	
	Если не Отказ и ЗначениеЗаполнено( ЭтотОбъект.ВнутреннийЗаказ ) тогда
		Если не ЭтотОбъект.ВнутреннийЗаказ.подразделение.ОбособленноеПодразделение тогда 
			Если  НельзяОбъединятьНеПодтвержденныйЗаказВКоторомЕстьТоварыСтопЛиста( ЭтотОбъект.ВнутреннийЗаказ.ДокументОснование ) тогда
				Отказ = Истина;
				#Если Клиент тогда
					Сообщить("НЕТ Разрешения на отгрузку СТОП-ЛИСТА в документе: "+строка(ЭтотОбъект.ВнутреннийЗаказ.ДокументОснование) , СтатусСообщения.Внимание);
				#КонецЕсли
			КонецЕсли;
		конецЕсли;
	КонецЕсли;

	// Проверка заполнения единицы измерения мест и количества мест
	ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
    	
	Если СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка
	 Или СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда // В этом случае ДокументРезерва должен быть пуст.

		УстановитьКачество = Ложь;

		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл

			Если Не ЗначениеНеЗаполнено(СтрокаТаблицы.ДокументРезерва) Тогда
				СтрокаТаблицы.ДокументРезерва = Неопределено;
			КонецЕсли;

			Если УстановитьКачество 
			   И ЗначениеНеЗаполнено(СтрокаТаблицы.Качество) Тогда
				СтрокаТаблицы.Качество = Справочники.Качество.Новый;
			КонецЕсли;

		КонецЦикла;

		Для каждого СтрокаТаблицы Из ЭтотОбъект.ВозвратнаяТара Цикл
			Если Не ЗначениеНеЗаполнено(СтрокаТаблицы.ДокументРезерва) Тогда
				СтрокаТаблицы.ДокументРезерва = Неопределено;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ЗаполнитьКачествоПоУмолчанию(Товары);
	КонецЕсли;
	
	Если Не ЗначениеНеЗаполнено(ВнутреннийЗаказ) Тогда
		Для Каждого СтрокаТЧ Из Товары Цикл
			СтрокаТЧ.ДокументРезерва = Неопределено;
		КонецЦикла;
		Для Каждого СтрокаТЧ Из ВозвратнаяТара Цикл
			СтрокаТЧ.ДокументРезерва = Неопределено;
		КонецЦикла;
	КонецЕсли;

	//Если НЕ ПараметрыСеанса.ИдетОбменРаспределеннойБазы Тогда
	ВесИтого=ПолучитьОбщийВесНетто(Товары);	// проверка соответствия веса	
	Если ВесИтого<>ОбщийВес Тогда
		ЗаполнитьВесНетто(Товары);
	ОбщийВес=ВесИтого;
	КонецЕсли;
	//КонецЕсли; 

	//БАЛАНС (04.12.2007)                       
	//
	ЗарегистрироватьОбъект(ЭтотОбъект,Отказ,мПроведениеИзФормы);
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 
	
	//15.03.2018 Смирнов для проведения из регл.заданий
	#Если Клиент Тогда
		Мен = ПараметрыСеанса.ТекущийПользователь;
		Если НЕ ЗначениеЗаполнено(Мен) тогда
			Мен = справочники.Пользователи.НайтиПоКоду("Робот (магазин)");
		КонецЕсли;
	#Иначе
		Мен = справочники.Пользователи.НайтиПоКоду("Робот (магазин)");
	#КонецЕсли

	//+++ 26.03.2012 запрет записывать, и менять ранее Проверенные документы!
	Если ЭтотОбъект.Проверен
		 и (НЕ РольДоступна("ПолныеПрава"))
		 и ПолучитьЗначениеПоУмолчанию(Мен, "УчетТолькоПоПодразделениюПользователя")
		 и (НЕ ПолучитьЗначениеПоУмолчанию(Мен, "РазрешитьРедактироватьПроверенныеДокументы")) Тогда
		 #Если Клиент Тогда
			 Предупреждение("Недостаточно прав для записи Проверенного документа!");
	 	 #КонецЕсли	 
		Отказ = истина;
	КонецЕсли;
	
	//+++(02.07.2014 - доп.проверка и перезаполнение склада...
	Если не Отказ Тогда
		Для каждого стр1 из ЭтотОбъект.ТоварыАдресноеХранение Цикл
			Если стр1.Склад<>стр1.АдресХранения.Владелец Тогда
				#Если Клиент Тогда
					сообщить("Перезаполнен склад в "+строка(стр1.НомерСтроки)
					+" строке Адресного хранения по ячейке "+строка(стр1.АдресХранения)+" установлен склад: "+строка(стр1.АдресХранения.Владелец) );
				#КонецЕсли	
				стр1.Склад = стр1.АдресХранения.Владелец;
			КонецЕсли;
		КонецЦикла;	
		
		//+++ 29.09.2016 - Защита от увеличения даты при ПЕРЕпроведении !
	// 	Если НЕ ЭтоНовый() 
	//	и РежимЗаписи = РежимЗаписиДокумента.Проведение 
	//	и ссылка.Проведен  // Если очень надо - можно распровести ... поменять дату и провести заново...
	//	Тогда // ДАТУ НЕ МЕНЯЕМ!
	//	
	//		Если ТекущаяДата() > ссылка.Дата 
	//		и НЕ ( РольДоступна("яштФинДиректор") или РольДоступна("ПравоЗавершенияРаботыПользователей") ) Тогда // для фин.отдела - можно менять в любую сторону!
	//		#Если Клиент Тогда
	//		сообщить("Документ уже был проведен "+строка(ссылка.Дата)+"! Дату и время документа менять НЕЛЬЗЯ, поэтому проведение Перемщения № "+строка(Номер)+" будет выполнено НЕ оперативно, Дата не изменилась!", СтатусСообщения.Информация);
	//		#КонецЕсли	
	//		
	//		Если  РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
	//	 		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	//		КонецЕсли;
	//		
	//		Дата = ссылка.Дата;
	//		КонецЕсли;
	//	
	//	КонецЕсли;
	//
	КонецЕсли;
	//+++)

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);

	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	СтруктураШапкиДокумента.Вставить("Склад", СкладОтправитель);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = СформироватьДеревоПолейЗапросаПоШапке();
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"      ,      "ВалютаУправленческогоУчета",     "ВалютаУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"      ,      "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",      "ВестиПартионныйУчетПоСкладам",   "ВестиПартионныйУчетПоСкладам");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОтправитель",     "ВидСклада",                      "ВидСкладаОтправителя");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладПолучатель",      "ВидСклада",                      "ВидСкладаПолучателя");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ВнутреннийЗаказ",      "ВидЗаказа",                      "ВидВнутреннегоЗаказа");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"                , "Номенклатура");
	СтруктураПолей.Вставить("Количество"                  , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"  , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"           , "СерияНоменклатуры");
	СтруктураПолей.Вставить("Услуга"                      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                       , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Качество"                    , "Качество");
	СтруктураПолей.Вставить("Цена"                        , "Цена");
	СтруктураПолей.Вставить("ДокументРезерва"             , "ДокументРезерва");
	СтруктураПолей.Вставить("СпособСписанияОстаткаТоваров", "СпособСписанияОстаткаТоваров");
	
	Если ЗначениеНеЗаполнено(ВнутреннийЗаказ) Тогда
		СтруктураПолей.Вставить("СкладЗаказаПокупателя"       , "ДокументРезерва.Склад");
	Иначе
		СтруктураПолей.Вставить("Склад"       , "Склад");
	КонецЕсли;
	
	СтруктураПолей.Вставить("РезервБезПраваПродажи"       ,  "ДокументРезерва.БезПраваПродажи");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
	                        "ДокументРезерва.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");

	РезультатЗапросаПоТоварам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("ДокументРезерва"           , "ДокументРезерва");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя"     , "ДокументРезерва.Склад");
	СтруктураПолей.Вставить("РезервБезПраваПродажи"     ,  "ДокументРезерва.БезПраваПродажи");
	СтруктураПолей.Вставить("СпособСписанияОстаткаТоваров", "СпособСписанияОстаткаТоваров");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
						  "ДокументРезерва.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");

	РезультатЗапросаПоТаре = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Подготовим таблицу товаров и тары для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	ТаблицаПоТоварам.Сортировать("НомерСтроки"); //*** 2018.10.26 добавила сортировку потому что в результате очередного обновления ТаблицаПоТоварам стала формироваться с перемешанными номерами строк ТЧ - отсюда ошибки при подстановке складов из ТЧ в движения
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары" и "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	яштАдресноеХранение.ПроверитьЗаполнениеТабЧастиТоварыАдресноеХранение(ЭтотОбъект.Ссылка, Отказ);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//+++ 23.11.2017 для проведения из регл.заданий
	//15.03.2018 Смирнов для проведения из регл.заданий
	#Если Клиент Тогда
		Мен = ПараметрыСеанса.ТекущийПользователь;
		Если НЕ ЗначениеЗаполнено(Мен) тогда
			Мен = справочники.Пользователи.НайтиПоКоду("Робот (магазин)");
		КонецЕсли;
	#Иначе
		Мен = справочники.Пользователи.НайтиПоКоду("Робот (магазин)");
	#КонецЕсли

	//+++( 04.04.2012  -  доп. проверка правильности заполнения для пользователей 1 подразделения
	Если ПолучитьЗначениеПоУмолчанию(Мен, "УчетТолькоПоПодразделениюПользователя") Тогда
		 Если  ( (Мен.ОсновноеПодразделение<>СкладОтправитель.Подразделение) 
		     или (Мен.ОсновноеПодразделение<>СкладПолучатель.Подразделение)) Тогда
			 СообщитьОбОшибке("СкладОтправитель или СкладПолучатель - не принадлежат вашему подразделению:"+строка(Мен.ОсновноеПодразделение), Отказ );
			 
		 КонецЕсли; 
		 
		 //---------------склад в ТЧ - должен быть пустым!-----------------------
		 Для Каждого стр1 ИЗ Товары Цикл
			 Если значениеЗаполнено(стр1.Склад) Тогда
				 Если ЗначениеЗаполнено(ссылка.ВнутреннийЗаказ) Тогда
					 Если (Мен.ОсновноеПодразделение<>стр1.Склад.Подразделение) Тогда
						 СообщитьОбОшибке("Склад в табличной части: "+ строка(стр1.Склад) +" не принадлежит Вашему подразделению: "+строка(Мен.ОсновноеПодразделение)+" Проведение - отменено!", Отказ);
						 
					 КонецЕсли;	 
	 			//+++ для СПб!  Иначе - можно сразу на кучу складов?!
				//	 СообщитьОбОшибке("Склады в табличной части не используются и должны быть очищены!",Отказ);
				//	 Прервать; 
				  КонецЕсли;	 
			КонецЕсли; 
		КонецЦикла;	
		
	КонецЕсли;
	//+++)
	
	//***Задача № 56558
	//если есть повреждения, то автоматом создается Заявка на брак
	СоздатьЗаявкуНаБракДляПоврежденныхТоваров();
	
	//Если перемещение дисков на склад брака, то Должна быть прикреплена заявка
	//***НЕЛЬЗЯ ИСПОЛЬЗОВАТЬ НЕТИПОВОЙ ОТКАЗ (был ОтказБрак)!!! Иначе документ останется с признаком проведен, но без движений 
	Отказ = ПроверитьНаПеремещениеБрака(Отказ);
	
	// Движения по документу
	Если Не Отказ Тогда// и не ОтказБрак Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
		
		//+++ 06.04.2017  с Филиала на Ярославль
		таблТов = Товары.Выгрузить(,"Номенклатура, Количество");	
		таблТов.Свернуть("Номенклатура","Количество"); // без дублей
		Если НЕ складОтправитель.ЭтоГруппа тогда //+++ 31.01.2018 --- есть перемещения на группу! ---
			Если (складОтправитель.ТипСклада = Перечисления.ТипыСкладов.ВПути    // всегда идёт приход со склада "в пути"
				или складОтправитель.ЗапретитьИспользование // с брака!
				 ) 
				 И складОтправитель.Подразделение.Код = "00133" //+++ 02.11.2017  ТОЛЬКО с Москвы !
				 И СкладПолучатель.Транзитный=ЛОЖЬ                 //на наш склад   
				 И СкладПолучатель.Подразделение.Пустая() Тогда 
				 
			подразделение1 = справочники.Подразделения.НайтиПоКоду("00005");
			ОбменСУТИнтернетМагазин.ДвижениеТоваровВОжидании( таблТов,  подразделение1 ); //фифо
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

Функция ПроверитьнаПеремещениеБрака(Отказ)
	
	отказ1 = ложь;	
	
	Если СкладПолучатель <> Справочники.Склады.НайтиПоКоду("00925") Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПеремещениеТоваровТовары.Номенклатура,
		|	СУММА(ПеремещениеТоваровТовары.Количество) КАК Количество
		|ПОМЕСТИТЬ ДискиНаБрак
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		|ГДЕ
		|	ПеремещениеТоваровТовары.Ссылка = &Ссылка
		|	И ПеремещениеТоваровТовары.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)
		|	И (ПеремещениеТоваровТовары.Склад.Наименование ПОДОБНО ""%брак%""
		|			ИЛИ ПеремещениеТоваровТовары.Ссылка.СкладПолучатель.Наименование ПОДОБНО ""%брак%"")
		|	И НЕ(ПеремещениеТоваровТовары.Склад.Наименование ПОДОБНО ""%брак%""
		|				И ПеремещениеТоваровТовары.Ссылка.СкладПолучатель.Наименование ПОДОБНО ""%брак%"")
		|
		|СГРУППИРОВАТЬ ПО
		|	ПеремещениеТоваровТовары.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДискиНаБрак.Номенклатура,
		|	ДискиНаБрак.Количество
		|ИЗ
		|	ДискиНаБрак КАК ДискиНаБрак" ;
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			Если не ЗначениеЗаполнено(ЗаявкаНаБрак)Тогда
				Сообщить("При перемещении дисков на склады брака, необходимо указать заявку на брак на закладке Дополнительно!", СтатусСообщения.Внимание);
				отказ = НЕ ( РольДоступна("яштФинДиректор") или РольДоступна("ПравоЗавершенияРаботыПользователей") );//29.09.2016 - надо перепроводить старые документы БЕЗ заявок!
			иначе
				
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЗаявкаНаБракРасшифровка.Номенклатура,
				|	СУММА(ЗаявкаНаБракРасшифровка.КоличествоПринято) КАК КоличествоПринято
				|ПОМЕСТИТЬ ПоЗаявке
				|ИЗ
				|	Документ.ЗаявкаНаБрак.Расшифровка КАК ЗаявкаНаБракРасшифровка
				|ГДЕ
				|	ЗаявкаНаБракРасшифровка.Ссылка = &Ссылка
				|
				|СГРУППИРОВАТЬ ПО
				|	ЗаявкаНаБракРасшифровка.Номенклатура
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ДискиНаБрак.Номенклатура,
				|	ДискиНаБрак.Количество КАК Количество
				|ПОМЕСТИТЬ Проверяем
				|ИЗ
				|	ДискиНаБрак КАК ДискиНаБрак
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Проверяем.Номенклатура,
				|	Проверяем.Количество - ЕСТЬNULL(ПоЗаявке.КоличествоПринято, 0) КАК Нехватает
				|ИЗ
				|	Проверяем КАК Проверяем
				|		ЛЕВОЕ СОЕДИНЕНИЕ ПоЗаявке КАК ПоЗаявке
				|		ПО Проверяем.Номенклатура = ПоЗаявке.Номенклатура
				|ГДЕ
				|	Проверяем.Количество > ЕСТЬNULL(ПоЗаявке.КоличествоПринято, 0)";
				
				Запрос.УстановитьПараметр("Ссылка", Ссылка.ЗаявкаНаБрак);
				
				Результат = Запрос.Выполнить();
				Запрос.МенеджерВременныхТаблиц.Закрыть();
				Если Не Результат.Пустой() Тогда
					Выборка =Результат.Выбрать();
					Пока Выборка.Следующий()Цикл
						Сообщить("В заявке на брак недостаточно номенклатуры "+выборка.Номенклатура+ " "+(Выборка.Нехватает)+" шт");	
					конецЦикла;
					отказ1 = Истина;
				конецЕсли;	
			конецЕсли;
		конецЕсли;
	конецЕсли;
	
	возврат отказ1;
	
конецФункции

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	// Удаление записей регистрации из всех последовательностей
	Для Каждого НаборЗаписейРегистрацииВПоследовательности Из ПринадлежностьПоследовательностям Цикл
		НаборЗаписейРегистрацииВПоследовательности.Очистить();
	КонецЦикла;
	
	////26.03.18 Смирнов, если склад получатель - Франчайзи, то зарегистрируем для обмена
	//Запрос = новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//			   |	СоответствиеКонтрагентовСкладамФРан.Склад
	//			   |ИЗ
	//			   |	РегистрСведений.СоответствиеКонтрагентовСкладамФРан КАК СоответствиеКонтрагентовСкладамФРан
	//			   |ГДЕ
	//			   |	СоответствиеКонтрагентовСкладамФРан.Склад В(&Склады)
	//			   |	И СоответствиеКонтрагентовСкладамФРан.АвтоСозданиеПоступлений";
	//			   Запрос.УстановитьПараметр("Склады",СкладПолучатель);
	//			   РезПолучатель = Запрос.Выполнить().Выбрать();
	//			   
	//			   
	//			   Запрос.УстановитьПараметр("Склады",СкладОтправитель);
	//			   РезОтправитель = Запрос.Выполнить().Выбрать();
	////ОтправительЗапрещенный = ложь;
	////
	////Для каждого ск из Товары Цикл
	////	Если ск.Склад.ЗапретитьИспользование = истина тогда
	////		ПолучательЗапрещенный = истина;
	////		Прервать;
	////	КонецЕсли;
	////КонецЦикла;
	//
	//Если РезПолучатель.Количество()>0 и РезОтправитель.Количество()=0 тогда
	//	ПланыОбмена.ЗарегистрироватьИзменения(ПланыОбмена.ПланОбменаУТ_Франчайзи.НайтиПоКоду("000000002"),Ссылка);
	//КонецЕсли;
КонецПроцедуры

//05.06.2017------------Резервные заказы из Задания на отгрузку или Перемещения------------------
Функция найтиМинусовыеЗаказы()
	
	 табл = новый ТаблицаЗначений;
	 табл.Колонки.Добавить("ЗаказПокупателя");
	 табл.Колонки.Добавить("Менеджер");
	 табл.Колонки.Добавить("Номенклатура");
	 табл.Колонки.Добавить("Количество");

	 Запрос = Новый Запрос; //сначала найдём Товары, у которых Св.остаток < 0  ( с учетом этого документа! )
	 Запрос.Текст = "выбрать вт.Номенклатура, вт.Количество
	                |Поместить ВТ_перем
	 				|ИЗ &Товары как ВТ;
					
	 				|ВЫБРАТЬ
	                |	ТоварыНаСкладахОстатки.Номенклатура,
	                |	ТоварыНаСкладахОстатки.КоличествоОстаток - ЗаказыПокупателейОстатки.КоличествоОстаток КАК СвОстаток
	                |ИЗ
	                |	(ВЫБРАТЬ
	                |		ОстаткиИОТХ.Номенклатура КАК Номенклатура,
	                |		СУММА(ОстаткиИОТХ.КоличествоОстаток) КАК КоличествоОстаток
	                |	ИЗ
	                |		(ВЫБРАТЬ
	                |			Остатки.Номенклатура КАК Номенклатура,
	                |			Остатки.КоличествоОстаток КАК КоличествоОстаток
	                |		ИЗ
	                |			РегистрНакопления.ТоварыНаСкладах.Остатки(
	                |					,
	                |					Номенклатура В (&СписНом)
	                |						И Склад.Транзитный=ЛОЖЬ) КАК Остатки
	                |		
	                |		ОБЪЕДИНИТЬ ВСЕ
	                |		
	                |		ВЫБРАТЬ
	                |			ОстаткиОТХ.Номенклатура,
	                |			ОстаткиОТХ.КоличествоОстаток
	                |		ИЗ
	                |			РегистрНакопления.ТоварыНаОтветственномХранении.Остатки(
	                |					,
	                |					Номенклатура В (&СписНом)
	                |						И Контрагент В (&СписКлиентовОТХ)
	                |						И Склад.Транзитный=ЛОЖЬ) КАК ОстаткиОТХ
					
					  |		ОБЪЕДИНИТЬ ВСЕ
	                |		
	                |		ВЫБРАТЬ
	                |			Перемещение.Номенклатура,
	                |			- Перемещение.Количество
					
                    |		из ВТ_перем как Перемещение
					
					|) КАК ОстаткиИОТХ
	                |	
	                |	СГРУППИРОВАТЬ ПО
	                |		ОстаткиИОТХ.Номенклатура) КАК ТоварыНаСкладахОстатки
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(
	                |				,
	                |				Номенклатура В (&СписНом)
					|					И ЗаказПокупателя.Проверен
	                |					И ЗаказПокупателя.Транзит=ЛОЖЬ) КАК ЗаказыПокупателейОстатки
	                |		ПО ТоварыНаСкладахОстатки.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
	                |ГДЕ
	                |	ТоварыНаСкладахОстатки.КоличествоОстаток - ЗаказыПокупателейОстатки.КоличествоОстаток < 0";
					
	 Товары1 = Товары.Выгрузить(,"Номенклатура, Количество");
	 Товары1.Свернуть("Номенклатура", "Количество");
	 Запрос.УстановитьПараметр("Товары",  Товары1);
	 
	 Запрос.УстановитьПараметр("СписНом", Товары.ВыгрузитьКолонку("Номенклатура") );
	 СписКлиентовОТХ = яштПоставщики.ПолучитьСписокПоставщиков(Истина);
	 Запрос.УстановитьПараметр("СписКлиентовОТХ",СписКлиентовОТХ);
	 
	 Если ЭтотОбъект.Подразделение.ОбособленноеПодразделение Тогда
		 Запрос.Текст = стрЗаменить(Запрос.Текст , "Транзитный=ЛОЖЬ", "Транзитный И Склад.Подразделение = &Подразделение");
		 Запрос.Текст = стрЗаменить(Запрос.Текст , "Транзит=ЛОЖЬ", "Транзит И ЗаказПокупателя.Подразделение = &Подразделение");
		 Запрос.УстановитьПараметр("Подразделение",ЭтотОбъект.Подразделение);
	 КонецЕсли;
	 Результат = Запрос.Выполнить();
	 таблМинус = Результат.Выгрузить();
	 
	 Если таблМинус.Количество()=0 Тогда
	 	возврат табл;
 	 КонецЕсли;
 
//========================================поиск нужных заказов в обратном порядке===============================================	 
	 запрос2 = новый Запрос;
	 запрос2.текст = "ВЫБРАТЬ
	                 |	ВТ.Номенклатура,
	                 |	ВТ.СвОстаток
	                 |ПОМЕСТИТЬ ВТ_Тов
	                 |ИЗ
	                 |	&ТаблМинус КАК ВТ
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ
	                 |	ЗаказыПокупателейОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	                 |	ЗаказыПокупателейОстатки.ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо КАК Менеджер,
	                 |	ВТ.Номенклатура КАК Номенклатура,
	                 |	ВТ.СвОстаток КАК СвОстаток,
	                 |	ЕстьNULL(ЗаказыПокупателейОстатки.КоличествоОстаток,0) КАК КоличествоОстаток
	                 |ИЗ
	                 |	ВТ_Тов КАК ВТ
	                 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(
	                 |				,
	                 |				Номенклатура В
	                 |						(ВЫБРАТЬ
	                 |							ВТ.Номенклатура
	                 |						ИЗ
	                 |							ВТ_Тов КАК ВТ)
	                 |					И ЗаказПокупателя.Проверен
	                 |					И ЗаказПокупателя.Транзит = ЛОЖЬ) КАК ЗаказыПокупателейОстатки
	                 |		ПО ВТ.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
	                 |
	                 |УПОРЯДОЧИТЬ ПО
	                 |	Номенклатура,
	                 |	ЗаказыПокупателейОстатки.ЗаказПокупателя.Дата УБЫВ
	                 |ИТОГИ
	                 |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПокупателя),
	                 |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Менеджер),
	                 |	МАКСИМУМ(СвОстаток),
	                 |	СУММА(КоличествоОстаток)
	                 |ПО
	                 |	Номенклатура
	                 |АВТОУПОРЯДОЧИВАНИЕ";
	 запрос2.УстановитьПараметр("ТаблМинус", ТаблМинус); 
	 Если ЭтотОбъект.Подразделение.ОбособленноеПодразделение Тогда
		 Запрос2.Текст = стрЗаменить(Запрос2.Текст , "Транзит=ЛОЖЬ", "Транзит И ЗаказПокупателя.Подразделение = &Подразделение");
		 Запрос2.УстановитьПараметр("Подразделение",ЭтотОбъект.Подразделение);
	 КонецЕсли;
	 
	 Результат2 = запрос2.Выполнить();               
	 выборка  = Результат2.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам );
	 	 
	 пока выборка.Следующий() цикл
		 колСв = - выборка.СвОстаток;
		 выборкаЗак = выборка.Выбрать();
		 пока выборкаЗак.Следующий() цикл
			 
			 Если выборкаЗак.КоличествоОстаток>=колСв Тогда
				 стр1 = табл.Добавить();
				 ЗаполнитьЗначенияСвойств(стр1, выборкаЗак);
				 стр1.Количество = мин(выборкаЗак.КоличествоОстаток,колСв);
				 колСв = колСв - мин(выборкаЗак.КоличествоОстаток,колСв);
				 Если колСв=0 Тогда
					 прервать;
				 КонецЕсли;	 
			 КонецЕсли;
			 
		 КонецЦикла;	 
	 КонецЦикла;	 
	 
	возврат табл;
	
КонецФункции	

//05.06.2017--------------------------------
 //табл1.Колонки.Добавить("ЗаказПокупателя");
 //табл1.Колонки.Добавить("Менеджер");
 //табл1.Колонки.Добавить("Номенклатура");
 //табл1.Колонки.Добавить("Количество");
 //
 процедура СоздатьЗадачиМенеджерам(табл1)
	Если табл1.Количество()=0 Тогда
	 возврат;
	КонецЕсли;	 
	табл1.Сортировать("Менеджер, ЗаказПокупателя");
	
	менЗак0 = "";
	Задача1 = Задачи.ЗадачиПользователя.СоздатьЗадачу();
	
	//+++ 23.11.2017 для проведения из регл.заданий
	//15.03.2018 Смирнов для проведения из регл.заданий
	#Если Клиент Тогда
		Мен = ПараметрыСеанса.ТекущийПользователь;
		Если НЕ ЗначениеЗаполнено(Мен) тогда
			Мен = справочники.Пользователи.НайтиПоКоду("Робот (магазин)");
		КонецЕсли;
	#Иначе
		Мен = справочники.Пользователи.НайтиПоКоду("Робот (магазин)");
	#КонецЕсли
	
	для каждого стр1 из табл1 цикл
		менЗак = строка(стр1.Менеджер)+"-"+строка(стр1.ЗаказПокупателя);
		Если менЗак <> менЗак0 Тогда
			Если менЗак0<>"" Тогда
				Задача1.Записать();
				сообщить("Записана задача для "+менЗак);
				
			    Задача1 = Задачи.ЗадачиПользователя.СоздатьЗадачу();
			КонецЕсли;
		Задача1.Исполнитель = стр1.Менеджер;
		Задача1.Инициатор   = Мен;
		Задача1.Постановщик = Мен;
		Задача1.Объект      = стр1.ЗаказПокупателя;
		
		Задача1.Наименование = "Закройте "+строка(стр1.ЗаказПокупателя);
		Задача1.Описание = " Заказ не будет отгружен полностью, 
							|так как сделано Перемещение на склад "+строка(складПолучатель);
		Задача1.Оповещение = истина;
		Задача1.СрокОповещения = ТекущаяДата();
		Задача1.Дата		   = ТекущаяДата();
		Задача1.ДатаИсполнения = КонецДня(ТекущаяДата());
		менЗак0 = менЗак;
		
		 стр2 = Задача1.Товары.Добавить();
		 стр2.Номенклатура = стр1.Номенклатура;
		 стр2.Количество   = стр1.Количество;
		иначе  // следующий товар
		 стр2 = Задача1.Товары.Добавить();
		 стр2.Номенклатура = стр1.Номенклатура;
		 стр2.Количество   = стр1.Количество;
		КонецЕсли;
	КонецЦикла;
	
	Задача1.Записать(); //последняя
	сообщить("Записана задача для "+менЗак);

КонецПроцедуры

Процедура СоздатьЗаявкуНаБракДляПоврежденныхТоваров()
	
	Отбор = Новый Структура;
	Отбор.Вставить("Повреждение", Истина);
	НайденныеСтроки = Товары.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("Номенклатура");
		ТЗ.Колонки.Добавить("ВидТовара");
		ТЗ.Колонки.Добавить("Количество");
		Для каждого НайдСтрока ИЗ НайденныеСтроки Цикл
			СтрТЗ = ТЗ.Добавить();
			СтрТЗ.Номенклатура = НайдСтрока.Номенклатура;
			СтрТЗ.ВидТовара = НайдСтрока.Номенклатура.ВидТовара;
			СтрТЗ.Количество = НайдСтрока.Количество;			
		КонецЦикла;
		
		ТЗВидов = ТЗ.Скопировать();
		ТЗВидов.Свернуть("ВидТовара");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаявкаНаБрак.Ссылка,
		               |	ЗаявкаНаБрак.ВидТовара
		               |ИЗ
		               |	Документ.ЗаявкаНаБрак КАК ЗаявкаНаБрак
		               |ГДЕ
		               |	ЗаявкаНаБрак.ДокументОснование = &ДокументОснование
					   |";
		Результат = Запрос.Выполнить().Выгрузить();
		
		Для каждого СтрТЗ ИЗ ТЗВидов Цикл
			Если Результат.Найти(СтрТЗ.ВидТовара) = Неопределено Тогда
				//создадим заявку на брак, если такой не найдено
				Отбор = Новый Структура();
				Отбор.Вставить("ВидТовара", СтрТЗ.ВидТовара);
				СтрокиТЗ = ТЗ.НайтиСтроки(Отбор);
				Если СтрокиТЗ.Количество() > 0 Тогда
					ДокЗаявкаНаБрак = Документы.ЗаявкаНаБрак.СоздатьДокумент();
					ДокЗаявкаНаБрак.Дата = ТекущаяДата();
					ДокЗаявкаНаБрак.БракОбнаруженНаСкладе = Истина;
					ДокЗаявкаНаБрак.ДокументОснование = Ссылка;
					ДокЗаявкаНаБрак.ВидТовара = СтрТЗ.ВидТовара;
					ДокЗаявкаНаБрак.СостояниеЗаявки = Перечисления.СостоянияЗаявкиНаБрак.Новая;
					ДокЗаявкаНаБрак.Комментарий = "Создана автоматически на основании документа " + Строка(Ссылка);
					Для каждого СтрокаТЗ ИЗ СтрокиТЗ Цикл
						СтрРасшифровки = ДокЗаявкаНаБрак.Расшифровка.Добавить();
						СтрРасшифровки.Номенклатура = СтрокаТЗ.Номенклатура;
						СтрРасшифровки.Количество = СтрокаТЗ.Количество;
						СтрРасшифровки.КоличествоПринято = СтрокаТЗ.Количество;
						СтрРасшифровки.СостояниеТовара = Перечисления.БракВидыСостоянийДиска.Неставленный;
					КонецЦикла;
					Попытка
						ДокЗаявкаНаБрак.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
						ДокЗаявкаНаБрак.Записать(РежимЗаписиДокумента.Запись);
					КонецПопытки;
					Сообщить("Автоматически создана заявка на брак на поврежденный товар " + Строка(СтрТЗ.ВидТовара));
					Если СтрТЗ.ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
						ЗаявкаНаБрак = ДокЗаявкаНаБрак.Ссылка;
						ЭтотОбъект.Записать();
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если СтрТЗ.ВидТовара = Перечисления.ВидыТоваров.Диски И НЕ ЗначениеЗаполнено(ЗаявкаНаБрак) Тогда
					ЗаявкаНаБрак = Результат.Найти(СтрТЗ.ВидТовара).Ссылка;
					ЭтотОбъект.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
				
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПечатьТорг2() Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("Макет_Торг_2");
	
	ОрганизацияЯШТ = Справочники.Организации.НайтиПоКоду("00001");
	СведенияОбОрганизации = СведенияОЮрФизЛице(ОрганизацияЯШТ, Ссылка.Дата);
	
	НомерАкта = "";  //+++ 12.11.2018 - BugFix:  загрузка с Android (Разумов)
	#Если Клиент тогда  
		ВвестиСтроку(НомерАкта, "Введите номер акта",,Ложь);
	#КонецЕсли 	
	
	ДатаАкта = Дата(1,1,1);
	#Если Клиент тогда
		ВвестиДату(ДатаАкта, "Введите дату акта", ЧастиДаты.Дата);
	#КонецЕсли 	
	
	ОбластьШапка = Макет.ПолучитьОбласть("Страница1Шапка");
	ОбластьШапка.Параметры.Организация 				= ОрганизацияЯШТ.Наименование + ", " + ОписаниеОрганизации(СведенияОбОрганизации, "ЮридическийАдрес,Телефоны,");
	ОбластьШапка.Параметры.КодОКПО 					= ОрганизацияЯШТ.КодПоОКПО;
	ОбластьШапка.Параметры.КодОКДП 					= "";
	ОбластьШапка.Параметры.НомерДок 				= НомерАкта;
	ОбластьШапка.Параметры.ДатаДок 					= Формат(ДатаАкта,"ДФ=dd.MM.yyyy");
	ОбластьШапка.Параметры.АД 						= Формат(ДатаАкта,"ДФ=dd");		
	ОбластьШапка.Параметры.АМ 						= Формат(ДатаАкта,"ДФ=ММММ");
	ОбластьШапка.Параметры.АГ 						= Формат(ДатаАкта,"ДФ=гггг");
	ОбластьШапка.Параметры.МестоПриемкиТовара 		= "Склад " + Строка(СкладПолучатель);
	ОбластьШапка.Параметры.ТоварнаяНакладная 		= "ТОРГ-13 №" + Номер + " от " + Формат(Дата, "ДФ=dd.MM.yyyy");
	ОбластьШапка.Параметры.Поставщик 				= "Склад " + Строка(СкладОтправитель);
	ОбластьШапка.Параметры.Поставщик2 				= "";
	ОбластьШапка.Параметры.ДоговорНом 				= "";
	ОбластьШапка.Параметры.СфНом 					= "";
	ОбластьШапка.Параметры.СФД 						= "";
	ОбластьШапка.Параметры.СФМ 						= "";
	ОбластьШапка.Параметры.СФГ 						= "";
	ОбластьШапка.Параметры.СпособДоставки 			= "а/м " + СокрЛП(МаркаАвтомобиля);
	ОбластьШапка.Параметры.ГосНомерАвтомобиля       = СокрЛП(ГосНомерАвтомобиля);
	ОбластьШапка.Параметры.ДатаТоварнойНакладной 	= "";
	ОбластьШапка.Параметры.СкладОтправителяТовара	= "";
	
	табДок.Вывести(ОбластьШапка);
	
	Область = Макет.ПолучитьОбласть("Страница1Таблица1Шапка");
	табДок.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Страница1Таблица1Строка");
	Область.Параметры.ВремяОкончанияПриемкиТовара = ТекущаяДата();
	табДок.Вывести(Область);
	
	табДок.ВывестиГоризонтальныйРазделительСтраниц();
	
	Область = Макет.ПолучитьОбласть("Страница2Шапка");
	табДок.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Страница2Таблица2Шапка");
	табДок.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Страница2Таблица2Строка");
	Для к=1 по 5 цикл
		табДок.Вывести(Область);
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("Страница2Продолжение1");
	табДок.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Страница2Таблица2");
	Область.Параметры.ПоДокам = Товары.Итог("Количество");
	КолвоФакт = 0;
	КолвоБрак = 0;
	Для каждого СтрТЧ ИЗ Товары Цикл
		КолвоФакт = КолвоФакт + ?(ЗначениеЗаполнено(СтрТЧ.КоличествоФакт), СтрТЧ.КоличествоФакт, СтрТЧ.Количество);
		КолвоБрак = КолвоБрак + ?(СтрТЧ.Повреждение, ?(ЗначениеЗаполнено(СтрТЧ.КоличествоФакт), СтрТЧ.КоличествоФакт, СтрТЧ.Количество), 0);
	КонецЦикла;
	Область.Параметры.Фактически = КолвоФакт;
	Область.Параметры.Брак = КолвоБрак;
	табДок.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Страница2Таблица3Шапка");
	табДок.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Страница2Таблица3Строка");
	
	НомПункт=1;
	Для каждого стр из Товары Цикл
		Если стр.Повреждение ИЛИ (стр.КоличествоФакт <> стр.Количество И ЗначениеЗаполнено(стр.КоличествоФакт)) Тогда
			Область.Параметры.НомПункт = НомПункт;
			Область.Параметры.Товар = СокрЛП(стр.Номенклатура.Наименование);
			Область.Параметры.ЕдИзм = СокрЛП(стр.Номенклатура.ЕдиницаХраненияОстатков);
			Область.Параметры.Артикул = СокрЛП(стр.Номенклатура.Код);
			Область.Параметры.КолвоДок = стр.Количество;
			НомПункт = НомПункт + 1;
			табДок.Вывести(Область);
		КонецЕсли;
	КонецЦикла;
	
	табДок.ВывестиГоризонтальныйРазделительСтраниц();
	
	Область = Макет.ПолучитьОбласть("Страница3Шапка");
	табДок.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Страница3Таблица4Шапка");
	табДок.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Страница3Таблица4Строка");
	КолВоБракаИтого = 0;
	КолВоРасхВПлюс = 0;
	КолВоРасхВМинус = 0;
	НомПункт=1;
	Для каждого стр из Товары Цикл
		Если стр.Повреждение тогда
			Область.Параметры.НомПункт = НомПункт;
			Область.Параметры.Артикул = СокрЛП(стр.Номенклатура.Код);
			Область.Параметры.ФактКолво = ?(ЗначениеЗаполнено(стр.КоличествоФакт), стр.КоличествоФакт, стр.Количество);
			Область.Параметры.ФактЦена = 0;//стр.ЦенаРеализации;
			Область.Параметры.ФактСумма = 0;//стр.Сумма;
			Область.Параметры.БракКолво = ?(ЗначениеЗаполнено(стр.КоличествоФакт), стр.КоличествоФакт, стр.Количество);
			НомПункт=НомПункт+1;
			табДок.Вывести(Область);
			КолВоБракаИтого = КолВоБракаИтого + Область.Параметры.БракКолво;
			Если ЗначениеЗаполнено(стр.КоличествоФакт) Тогда
				Если стр.Количество > стр.КоличествоФакт Тогда
					КолВоРасхВМинус = КолВоРасхВМинус + (стр.Количество - стр.КоличествоФакт);
				ИначеЕсли стр.Количество < стр.КоличествоФакт Тогда
					КолВоРасхВПлюс = КолВоРасхВПлюс + (стр.КоличествоФакт - стр.Количество)
				Конецесли;
			КонецЕсли;
		ИначеЕсли стр.КоличествоФакт <> стр.Количество И ЗначениеЗаполнено(стр.КоличествоФакт) Тогда
			Область.Параметры.НомПункт = НомПункт;
			Область.Параметры.Артикул = СокрЛП(стр.Номенклатура.Код);
			Область.Параметры.ФактКолво = стр.КоличествоФакт;
			Область.Параметры.ФактЦена = 0;//стр.ЦенаРеализации;
			Область.Параметры.ФактСумма = 0;//стр.Сумма;
			Область.Параметры.БракКолво = 0;
			НомПункт=НомПункт+1;
			табДок.Вывести(Область);
			Если стр.Количество > стр.КоличествоФакт Тогда
				КолВоРасхВМинус = КолВоРасхВМинус + (стр.Количество - стр.КоличествоФакт);
			ИначеЕсли стр.Количество < стр.КоличествоФакт Тогда
				КолВоРасхВПлюс = КолВоРасхВПлюс + (стр.КоличествоФакт - стр.Количество)
			Конецесли;
		КонецЕсли;
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("Страница4Шапка");
	
	Область.Параметры.МетодОпределенияКоличества="";
	ОписаниеДефектов = "";
	НомерОписания = 0;
	Если КолВоБракаИтого > 0 Тогда
		ОписаниеДефектов = "При приемке товара обнаружен брак в количестве "+КолВоБракаИтого+" шт.";
		НомерОписания = НомерОписания + 1;
		Область.Параметры["ОписаниеДефектов"+Строка(НомерОписания)] = ОписаниеДефектов;
	КонецЕсли;
	Если КолВоРасхВМинус > 0 Тогда
		ОписаниеДефектов = "При приемке товара обнаружена недостача в количестве "+КолВоРасхВМинус+" шт.";
		НомерОписания = НомерОписания + 1;
		Область.Параметры["ОписаниеДефектов"+Строка(НомерОписания)] = ОписаниеДефектов;
	КонецЕсли;
	Если КолВоРасхВПлюс > 0 Тогда
		ОписаниеДефектов = "При приемке товара обнаружен излишек в количестве "+КолВоРасхВПлюс+" шт.";
		НомерОписания = НомерОписания + 1;
		Область.Параметры["ОписаниеДефектов"+Строка(НомерОписания)] = ОписаниеДефектов;
	КонецЕсли;
	
	Область.Параметры.ПредседательКомиссии 			 = "";
	Область.Параметры.РасшифровкаПодписиПредседателя = "Гаричев Д.Н.";
	Область.Параметры.Чел1 							 = "ст. кладовщик";
	Область.Параметры.РасшЧел1 						 = "Цверава В.У.";
	Область.Параметры.Чел2 							 = "кладовщик";
	Область.Параметры.РасшЧел2						 = "Забытов В.В.";
	Область.Параметры.Чел3							 = "";
	Область.Параметры.РасшЧел3						 = "Невежина И.И.";
	Область.Параметры.Предст1						 = "";
	Область.Параметры.РасшПредст1 					 = "";
	Область.Параметры.ТипДокумента 					 = "";
	Область.Параметры.НомерСерия 					 = "";
	Область.Параметры.КемВыданКогда					 = "";
	Область.Параметры.ПечГлавБух 					 = "";
	Область.Параметры.РешениеРуководителя 			 = "";
	табДок.Вывести(Область);
	
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.Показать("ТОРГ-2 " + ЭтотОбъект);

КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

//БАЛАНС (04.12.2007)                       
//
мПроведениеИзФормы = Ложь; 