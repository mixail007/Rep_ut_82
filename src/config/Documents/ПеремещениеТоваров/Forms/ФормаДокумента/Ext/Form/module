////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Устанавливается в значение "Истина", если пользователю можно менять цену
// в документе
Перем мМожноМенятьЦенуВДокументе;

Перем мКолонкиТовары, мКолонкиВозвратнаяТара;

Перем мПечатнаяФормаПоУмолчанию;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(, "По справочнику");

	Если СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		СписокЗапросов.Добавить("ОстаткиНеавтоматизированнаяТорговаяТочка", "По остаткам и ценам номенклатуры в торговой точке");
	Иначе
		СписокЗапросов.Добавить("ОстаткиИКачествоНоменклатуры", "По остаткам и качеству номенклатуры ");

		Если СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			СписокЗапросов.Добавить("РасходЦеныНоменклатуры",                 "По ценам номенклатуры");
			СписокЗапросов.Добавить("РасходОстаткиКачествоИЦеныНоменклатуры", "По остаткам, качеству и ценам номенклатуры");
		КонецЕсли;
	КонецЕсли;

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда;

	ЕстьСерия = Истина;
	ТипЦен    = Неопределено;

	Если СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам;
		ЕстьЦена            = мМожноМенятьЦенуВДокументе;
	ИначеЕсли СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда 
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
		ЕстьЦена            = мМожноМенятьЦенуВДокументе;
	Иначе
		СпособЗаполненияЦен = Неопределено;
		ЕстьЦена            = Ложь;
	КонецЕсли;

	Если ТабличнаяЧасть = Товары Тогда
		Команда           = "ПодборВТабличнуюЧастьТовары";
		ИмяТабличнойЧасти = "Товары";
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
		Команда           = "ПодборВТабличнуюЧастьВозвратнаяТара";
		ЕстьЦена          = Ложь;
		ЕстьСерия         = Ложь;
		ИмяТабличнойЧасти = "Тара";
	КонецЕсли;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ПредставлениеДок   = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда",            Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора", СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов",        ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад",               СкладОтправитель);

	// Тип цен устанавливает склад получатель.
	СтруктураПараметровПодбора.Вставить("ТипЦен",              СкладПолучатель.ТипЦенРозничнойТорговли);
	СтруктураПараметровПодбора.Вставить("Организация",         Организация);
	СтруктураПараметровПодбора.Вставить("Контрагент",          Неопределено);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента",  Неопределено);
	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен", СпособЗаполненияЦен);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена",            ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия",           ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента",     мВалютаРегламентированногоУчета);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия, Качество;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);

	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("КоличествоМест"  , КоличествоМест);
	ЗначениеВыбора.Свойство("Цена"            , Цена);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"           , Серия);
	ЗначениеВыбора.Свойство("Качество"        , Качество);

	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Расчет цены по валюте документа
	ВалютаДокумента      = мВалютаРегламентированногоУчета;
	КурсДокумента        = 1;
	КратностьДокумента   = 1;
	ЦенаВВалютеДокумента = ПересчитатьЦенуПриИзмененииВалюты(Цена,
	                                                         ВалютаЦены,
	                                                         ВалютаДокумента,
	                                                         КурсДокумента,
	                                                         КратностьДокумента,
	                                                         Дата);
	
	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	Если ТабличнаяЧасть = Товары Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
		СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);
		Если ЗначениеНеЗаполнено(Качество) Тогда
			Качество = Справочники.Качество.Новый;
		КонецЕсли;
		СтруктураОтбора.Вставить("Качество"         , Качество);

		Если (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка)
		 ИЛИ (СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) Тогда
			СтруктураОтбора.Вставить("Цена", ЦенаВВалютеДокумента);
		КонецЕсли;
	Иначе
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;

	СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		Иначе

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

		КонецЕсли;

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;

		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти.Количество = Количество;

			ВалютаДокумента    = мВалютаРегламентированногоУчета;
			КурсДокумента      = 1;
			КратностьДокумента = 1;

			СтрокаТабличнойЧасти.Качество         = Справочники.Качество.Новый;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;
			СтрокаТабличнойЧасти.Цена                       = ЦенаВВалютеДокумента;
			СтрокаТабличнойЧасти.Качество                   = Качество;

			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			Если ЗначениеНеЗаполнено(Качество) Тогда
				ЗаполнитьКачествоНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

		Иначе

			СтрокаТабличнойЧасти.Количество       = Количество;

		КонецЕсли;

	КонецЕсли;

	ТабличнаяЧастьИмя = ?(ТабличнаяЧасть = Товары, "Товары", "ВозвратнаяТара");
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	Если Не (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка
		     или СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	ИначеЕсли (Не СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) 
		    И (СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) Тогда
		ВалютаДокумента    = мВалютаРегламентированногоУчета;
		КурсДокумента      = 1;
		КратностьДокумента = 1;

		// Тип цен устанавливает склад получатель. 
		СтрокаТабличнойЧасти.Цена = ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
		                              СкладПолучатель.ТипЦенРозничнойТорговли, Дата, СтрокаТабличнойЧасти.ЕдиницаИзмерения,
		                              ВалютаДокумента, КурсДокумента, КратностьДокумента);
	ИначеЕсли СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		ВалютаДокумента    = мВалютаРегламентированногоУчета;
		КурсДокумента      = 1;
		КратностьДокумента = 1;

		СтрокаТабличнойЧасти.Цена = ПолучитьРозничнуюЦену(СтрокаТабличнойЧасти.Номенклатура,, СкладОтправитель,
		                                                  мВалютаРегламентированногоУчета, Неопределено, Дата,
		                                                  СтрокаТабличнойЧасти.ЕдиницаИзмерения,
		                                                  ВалютаДокумента, КурсДокумента, КратностьДокумента);
	КонецЕсли;

	// Поменяем способ редактирования цены.
	УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Номенклатура);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает соответстующие свойства поля ввода цены при изменении 
// номенклатуры в текущей строке табличной части.
//
// Параметры:
//  Номенклатура - ссылка на справочник, элемент номенклатуры, для которого будем устанавливать цену
//
Процедура УстановитьСвойстваПоляВводаЦены(Номенклатура)

	ТекущаяСтрока     = ЭлементыФормы.Товары.ТекущиеДанные;
	ЭлементУправления = ЭлементыФормы.Товары.Колонки.Цена.ЭлементУправления;
	
	ЭлементУправления.КнопкаСпискаВыбора = (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка);

КонецПроцедуры // УстановитьСвойстваПоляВводаЦены()

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	УстановитьДоступностьКнопкиЗаполнитьИПровести();
	
	Колонки     = ЭлементыФормы.Товары.Колонки;
	КолонкиТары = ЭлементыФормы.ВозвратнаяТара.Колонки;

	// Если в перемещении участвует неавтоматизированная торговая точка, то надо сделать видимыми колонки формирования
	// розничной цены.
	Если (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка)
	 ИЛИ (СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) Тогда
		УстановитьВидимостьКолонкиТабЧасти(Колонки.ДокументРезерва,     Ложь);
		УстановитьВидимостьКолонкиТабЧасти(КолонкиТары.ДокументРезерва, Ложь);
		УстановитьВидимостьКолонкиТабЧасти(Колонки.Цена,                Истина);
		УстановитьВидимостьКолонкиТабЧасти(Колонки.Единица,             Истина);
		Колонки.Цена.ТекстШапки = "Розн. цена (" + мВалютаРегламентированногоУчета + ")";
	Иначе
		УстановитьВидимостьКолонкиТабЧасти(Колонки.ДокументРезерва,     Истина);
		УстановитьВидимостьКолонкиТабЧасти(КолонкиТары.ДокументРезерва, Истина);
		УстановитьВидимостьКолонкиТабЧасти(Колонки.Цена,                Ложь);
		УстановитьВидимостьКолонкиТабЧасти(Колонки.Единица,             Ложь);
	КонецЕсли;
	
	Если ЗначениеНеЗаполнено(ВнутреннийЗаказ) Тогда
		УстановитьВидимостьКолонкиТабЧасти( КолонкиТары.ДокументРезерва, Истина);
		УстановитьВидимостьКолонкиТабЧасти( Колонки    .ДокументРезерва, Истина);
		УстановитьВидимостьКолонкиТабЧасти( КолонкиТары.СпособСписанияОстаткаТоваров, Ложь);
		УстановитьВидимостьКолонкиТабЧасти( Колонки    .СпособСписанияОстаткаТоваров, Ложь);
	Иначе
		УстановитьВидимостьКолонкиТабЧасти( КолонкиТары.ДокументРезерва, Ложь);
		УстановитьВидимостьКолонкиТабЧасти( Колонки    .ДокументРезерва, Ложь);
		УстановитьВидимостьКолонкиТабЧасти( КолонкиТары.СпособСписанияОстаткаТоваров, Истина);
		УстановитьВидимостьКолонкиТабЧасти( Колонки    .СпособСписанияОстаткаТоваров, Истина);
	КонецЕсли;

	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;
	
	Если ИспользоватьВнутренниеЗаказы(Ложь) Тогда
		ЭлементыФормы.ВнутреннийЗаказ       .Доступность = Истина;
		ЭлементыФормы.НадписьВнутреннийЗаказ.Доступность = Истина;
		ДоступностьПолучателя = ЗначениеНеЗаполнено(ВнутреннийЗаказ);
	Иначе
		ЭлементыФормы.ВнутреннийЗаказ       .Доступность = Ложь;
		ЭлементыФормы.НадписьВнутреннийЗаказ.Доступность = Ложь;
		ДоступностьПолучателя = Истина;
	КонецЕсли;
	
	ЭлементыФормы.СкладПолучатель.АвтоОтметкаНезаполненного = ДоступностьПолучателя;
	ЭлементыФормы.НадписьСкладПолучатель.Доступность        = ДоступностьПолучателя;
	ЭлементыФормы.СкладПолучатель.Доступность               = ДоступностьПолучателя;

	Если ЗначениеЗаполнено(ВнутреннийЗаказ) Тогда
		Колонки.Склад.ТекстШапки="Склад-отправитель";
		ЭлементыФормы.СкладОтправитель.АвтоОтметкаНезаполненного = Ложь;
	Иначе
		Колонки.Склад.ТекстШапки="Склад-получатель"; //в табличной части - стандартно
		ЭлементыФормы.СкладПолучатель.АвтоОтметкаНезаполненного = Ложь;
	КонецЕсли;	
КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает доступность кнопки "Заполнить и провести". Кнопка доступна,
// если дата дата документа совпадает с текущей.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьКнопкиЗаполнитьИПровести()

	ЭлементыФормы.ДействияФормы.Кнопки.ДействиеЗаполнитьИПровести.Доступность = 
								(НачалоДня(Дата) = НачалоДня(ТекущаяДата()));

КонецПроцедуры // УстановитьДоступностьКнопкиЗаполнитьИПровести

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		Если ИспользоватьВнутренниеЗаказы(Истина) Тогда
			Если Не ПараметрОснование.ВидЗаказа = Перечисления.ВидыВнутреннегоЗаказа.НаСклад Тогда
				Сообщить("Перемещение товаров нельзя вводить на основании заказа от подразделения", СтатусСообщения.Важное);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если (не ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"РазрешитьОткрыватьПеремещения")) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь);
		УстановитьНомерДокумента(ЭтотОбъект);

		Если ЗначениеНеЗаполнено(ВидОперации) Тогда
			ВидОперации      = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
		КонецЕсли;

		Если ЗначениеНеЗаполнено(СкладОтправитель) Тогда
			СкладОтправитель = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойСклад");
		КонецЕсли;

		Если ЗначениеНеЗаполнено(СкладПолучатель) Тогда
			СкладПолучатель  = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойСклад");
		КонецЕсли;

	//+++ 26.03.2012
	Проверен = ложь;

	КонецЕсли;

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Цена");
	СтруктураКолонок.Вставить("ДокументРезерва");
	СтруктураКолонок.Вставить("СпособСписанияОстаткаТоваров");

	// Установить ограничение - изменять видимоть колонок для таличной части 
	УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиТовары, СтруктураКолонок);

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Заполнить подменю выбора печатных форм.
	СписокМакетов = ЭтотОбъект.ПолучитьСписокПечатныхФорм();
	УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати,
	                                       СписокМакетов,
	                                       Новый Действие("ДействияФормыДействиеВыбратьПечатнуюФормы"));

	// Установить печатную форму по умолчанию.
	УстановитьКнопкуПечати(ЭтотОбъект.Метаданные().Имя, ЭтаФорма, СписокМакетов, мПечатнаяФормаПоУмолчанию);

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокументаСУчетомСклада(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма, СкладПолучатель);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	УстановитьВидимостьСерииНоменклатуры(мКолонкиТовары);

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	// установим доступность колонки "Цена" для редактирования
	мМожноМенятьЦенуВДокументе = РазрешитьРедактированиеЦенВДокументах();

	ЭлементыФормы.Товары.Колонки.Цена.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

    
	//БАЛАНС (04.12.2007)                       
	//
	мПроведениеИзФормы = Истина;
	
	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 

	
	//+++ 26.03.2012 
//провеРЕнные документы - недоступны для изменения	
	//Если Проверен
	//	 и ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "УчетТолькоПоПодразделениюПользователя")
	//	 и НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьРедактироватьПроверенныеДокументы") тогда
	//		ЭтаФорма.ТолькоПросмотр = истина; // перемещения со склада ЯШТ - не доступно для редактирования
	//КонецЕсли;	 
	
	//+++ 03.04.2012
	// запрет редактирования ПровеДённых документов при перемещении с других складов
	попытка
		Если Проведен
		 и ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "УчетТолькоПоПодразделениюПользователя")
		 и ( (глТекущийПользователь.ОсновноеПодразделение<>СкладОтправитель.Подразделение) 
		     или (глТекущийПользователь.ОсновноеПодразделение<>СкладПолучатель.Подразделение)) тогда
			ЭтаФорма.ТолькоПросмотр = истина; // перемещения со склада ЯШТ - не доступно для редактирования
		КонецЕсли; 
	исключение
	КонецПопытки;
	
	Если Найти(Комментарий, "#Задание на отгрузку")>0 и не РольДоступна("ПолныеПрава") тогда //+++ 15.07.2013
		 ЭтаФорма.ТолькоПросмотр = истина;
		 Предупреждение("Документ создан автоматически из ""Задания на отгрузку""
		 				|и редактироваться - не может!");
	КонецЕсли;
	
	ЭлементыФормы.ДанныеПоПогрузке.Доступность = РольДоступна("ПолныеПрава");
	
	//+++( 09.02.2018 --- по задаче № 40550 - блокировка изменения документа операторами склада (после 1-2 часов!)	
	Если НЕ ЭтоНовый() //повторное открытие...
		и НЕ РольДоступна("ПравоЗавершенияРаботыПользователей") // или IT-отдел с 13.03.2018
		и РольДоступна("Кладовщик") и ОтражатьВБухгалтерскомУчете //уже выгружен в БП
		//в течении 2х часов - ещё можно что-то менять[v]БУ документе...(для задания на отгрузку/перемещение)
		и (ТекущаяДата() - ссылка.Дата)>2*3600 
	тогда  
		
		ЭтаФорма.ТолькоПросмотр = истина;
		Предупреждение("    Документ ЗАКРЫТ от измений, так как
						|   документ уже перенесен в бухгалтерию!
						|
						|Для изменения документа - позвоните в бухгалтерию.
						|
						|Бухгалтерия должна снять галку [v]БУ в этом документе
						|и открыть документ в бухгалтерии для повторной загрузки...");
	КонецЕсли;
	//+++)
КонецПроцедуры // ПриОткрытии()

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Подсчитаем количество строк в табличных частях.
	ЗаголовокТовары = "Товары (";
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если СтраницаПанели.Имя = "Тара" Тогда
			СтраницаПанели.Заголовок = "Тара (" + ДокументОбъект.ВозвратнаяТара.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "Товары" Тогда
			СтраницаПанели.Заголовок = ЗаголовокТовары  + ДокументОбъект.Товары.Количество() + " поз.)";
		иначеЕсли  СтраницаПанели.Имя = "АдресаХранения" Тогда
			СтраницаПанели.Заголовок = "Адреса ("+ ДокументОбъект.ТоварыАдресноеХранение.Количество() + " поз.)";
        иначеЕсли СтраницаПанели.Имя = "Данныепопогрузке" тогда
			СтраницаПанели.Заголовок = "Данные по погрузке ("+ ДокументОбъект.ДанныеПоПогрузке.Количество() + " поз.)";
     	КонецЕсли;

	КонецЦикла;
	
	КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);

		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
			ОбработкаПодбора(ВозвратнаяТара, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокументаСУчетомСклада(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма, СкладПолучатель);

		//( 14.03.2016 - автопроделивание заказов по первичному перемещению!
		Если НЕ Перемещение.Пустая() и ЭтотОбъект.Проведен тогда  // после проведения
			Если значениеЗаполнено(Перемещение.ВнутреннийЗаказ) тогда
				зак = Перемещение.ВнутреннийЗаказ.ДокументОснование;
				Если зак.Заказы.Количество()>0 тогда
					
					КонтрагентАвтоснаб = Справочники.Контрагенты.НайтиПоКоду("00367");
					КонтрагентРезервИМ = Справочники.Контрагенты.НайтиПоКоду("П004703");
                    ДоговорРезерваИМ = Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("ОтветственноеЛицо",Справочники.Пользователи.НайтиПоКоду("Смирнов А"),,КонтрагентРезервИМ);
					
					для каждого стр1 из зак.Заказы цикл
						зак = стр1.ЗаказПокупателя;

						Если не зак.ПометкаУдаления и не зак.Проверен тогда
						
							закоб = зак.ПолучитьОбъект();
							закоб.Проверен = ЕстьТоварыИзЗаказа(зак);// проверка товаров
							
							Если закоб.Проверен тогда
								попытка
									ТипЗаказа = закоб.ТипЗаказа;
									 закоб.ОбменДанными.Загрузка = истина;  // в режиме обмена нет проверок на цены и прочее...
									 //Сакулина
									 Если закоб.Контрагент = КонтрагентАвтоснаб Тогда
										 закоб.Контрагент = КонтрагентРезервИМ;
										 закоб.ДоговорКонтрагента = ДоговорРезерваИМ;
										 закоб.Записать();
										 закоб.ОбменДанными.Загрузка = ложь;
										 закоб.Записать(РежимЗаписиДокумента.Проведение);
									 Иначе
										 закоб.Записать();
										 
									 КонецЕсли;
									 //Сакулина

									 закоб.ОбменДанными.Загрузка = ложь;
	 	 							 сообщить("Проделен первичный "+строка(зак), СтатусСообщения.Информация);
								Исключение
									 сообщить("НЕ удалось перезаписать первичный "+строка(зак)+" : "+ОписаниеОшибки(), СтатусСообщения.Внимание);
								КонецПопытки;	 
							Иначе
							 сообщить(строка(закоб)+" не Проделен, так как в Перемещении нет товаров этого заказа!", СтатусСообщения.Внимание);
						    КонецЕсли;	
							
						//--------------------------------------------------------------------------
					     ИначеЕсли зак.ПометкаУдаления тогда //удален при объединении? 17.03.2016
							 
							закОбщ = ОбменСУТИнтернетМагазин.ПолучитьОбщийЗаказ( зак , ЭтотОбъект.Подразделение ); // именно ЭТОГО подразделения (Филиала или Ярославля)
							Если не закОбщ.Пустая() 
								и не закОбщ.ПометкаУдаления тогда // общий заказ должен быть того же подразделения
								
								закОб = закОбщ.ПолучитьОбъект();
								ЕстьТовары = ЕстьТоварыИзЗаказа(закОбщ);//+++ 28.03.2016
								
								Если закОбщ.Проверен тогда 
									сообщить("Уже проделен общий заказ "+строка(закОбщ)+" по первичному заказу № "+строка(Зак.Номер), СтатусСообщения.Информация);
								ИначеЕсли ЕстьТовары тогда
									Попытка
										закоб.Проверен = Истина;
																				
										ТипЗаказа = закоб.ТипЗаказа;
										закоб.ОбменДанными.Загрузка = истина; // в режиме обмена нет проверок на цены и прочее...
										//Сакулина
										Если закоб.Контрагент = КонтрагентАвтоснаб Тогда
											закоб.Контрагент = КонтрагентРезервИМ;
											закоб.ДоговорКонтрагента = ДоговорРезерваИМ;
									    	закоб.Записать();
											закоб.ОбменДанными.Загрузка = ложь;
											закоб.Записать(РежимЗаписиДокумента.Проведение);
										Иначе
											закоб.Записать();

										КонецЕсли;
										//Сакулина
										закоб.ОбменДанными.Загрузка = ложь;
										сообщить("Проделен общий заказ "+строка(закОбщ)+" по первичному заказу № "+строка(Зак.Номер), СтатусСообщения.Информация);
									Исключение
										сообщить("НЕ удалось проделить общий заказ "+строка(закОбщ)+" по первичному заказу № "+строка(Зак.Номер)+" : "+ОписаниеОшибки(), СтатусСообщения.Внимание);
									КонецПопытки;	 
								 Иначе
									 сообщить("общий заказ "+строка(закОбщ)+" не Проделен, так как в Перемещении нет товаров по первичному заказу № "+строка(Зак.Номер), СтатусСообщения.Внимание);
								 КонецЕсли;
							 Иначе // не нашли общий заказ
	 							сообщить("НЕ удалось найти общий заказ по первичному (удаленному) заказу № "+строка(Зак.Номер), СтатусСообщения.Важное);
							КонецЕсли;	
							
                   	    ИначеЕсли зак.Проверен тогда
                   			  сообщить(строка(зак)+" - уже проделен!", СтатусСообщения.Информация);
					    КонецЕсли;
					
					КонецЦикла;	
					
				Иначе //--------------------1 заказ на перемещение... --------------------
				 	
					Если зак.ВводитьТолькоПеремещение тогда
				 		сообщить(строка(зак)+" (на перемещение) не содержит заказов для отгрузки.");
					КонецЕсли;
						
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
		//)

КонецПроцедуры // ПослеЗаписи()

функция ЕстьТоварыИзЗаказа(зак, ПолноеНаличие=ложь)
	рез = 0;
	для каждого стр1 из зак.Товары цикл
		Для каждого стр2 из ЭтотОбъект.Товары цикл
			если стр1.Номенклатура = стр2.Номенклатура тогда
				если стр2.Количество>=стр1.Количество тогда
					рез = рез + 1;
					прервать;
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
	
	Если ПолноеНаличие тогда
		рез1 = (рез = зак.Товары.Количество()); 
	Иначе
		Если  (рез <> зак.Товары.Количество()) тогда
		сообщить("Возможно не все товары перемещены по документу: "+строка(зак), СтатусСообщения.Внимание);
		КонецЕсли;	
		рез1 = (рез>0); //  все равно пытаемся провести
	КонецЕсли;
	
	возврат рез1;
	
КонецФункции

// Обработчик внешнего события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	Если глТорговоеОборудование <> Неопределено Тогда
		Если Событие = "BarCodeValue" Тогда

			ИмяТекущейСтраницы = ЭтаФорма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
			Если ИмяТекущейСтраницы = "Товары" Тогда

				Команда         = "ПодборВТабличнуюЧастьТовары";
				ИмяТабличнойЧасти = "Товары";

			ИначеЕсли ИмяТекущейСтраницы = "Тара" Тогда

				Команда           = "ПодборВТабличнуюЧастьВозвратнаяТара";
				ИмяТабличнойЧасти = "ВозвратнаяТара";

			Иначе

				// Ничего не надо делать
				Возврат;

			КонецЕсли;

			ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);

			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("Команда"              , Команда);
			СтруктураПараметров.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
			СтруктураПараметров.Вставить("ИмяТабличнойЧасти"    , ИмяТабличнойЧасти);

			глТорговоеОборудование.ОбработатьВнешнееСобытиеОтСканераДляФормы(ЭтаФорма, ЭтотОбъект, СтруктураПараметров, Данные);

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)
	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров[Кнопка.Имя];
		
		//+++ 15.11.2017 +++ в регистре ТоварыНаСкладах - выключена обработка ордерной схемы!
		Если ВидОперации = перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам тогда
			Предупреждение("Ордерная схема перемещения - ЗАБЛОКИРОВАНА!", 60);
			ВидОперации = перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
		КонецЕсли;
		
	КонецЕсли;

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокументаСУчетомСклада(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма, СкладПолучатель);

	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Изменить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм для изменения табличной части
//
Процедура КоманднаяПанельТоварыДействиеИзменить(Кнопка)

	// Получим контекст обработки
	ИзменениеТабличнойЧастиТовары      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменые формы.
	ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект       = ЭтотОбъект;
	ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента      = ЭтаФорма;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьНДС             = Ложь; 
	ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице    = (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка
															   ИЛИ СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка);
	ФормаИзменениеТабличнойЧастиТовары.мСпособЗаполненияЦен = Неопределено;
	
	//Перенесем табличную часть
	ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Возвратная тара", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеПодбор(Кнопка)

	ДействиеПодбор(ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	НапечататьДокументПоУмолчанию(ЭтотОбъект, глТекущийПользователь, мПечатнаяФормаПоУмолчанию);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
//
Процедура ДействияФормыДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = Кнопка.Текст;
		СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		СписокМакетов = ПолучитьСписокПечатныхФорм();
		СтрокаМакетаВСписке = СписокМакетов.НайтиПоЗначению(Кнопка.Имя);
		Если СтрокаМакетаВСписке <> Неопределено Тогда
			Печать(СтрокаМакетаВСписке.Значение);
			СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
			СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;			
			
		Иначе
			СсылкаВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Кнопка.Имя, "_", "-")));
			Печать(СсылкаВнешнейФормы);
			СтруктураМакета.Макет = СсылкаВнешнейФормы;
			СтруктураМакета.ПредставлениеМакета = Кнопка.Текст;
		КонецЕсли;		
		
		мПечатнаяФормаПоУмолчанию = СтруктураМакета.Макет;
		СохранитьТекущуюКнопкуПечати(ЭтотОбъект.Метаданные().Имя, СтруктураМакета);
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при нажатии кнопки "Заполнить и провести" командной панели формы,
// вызывает заполнение документа с проведением.
//
Процедура ДействияФормыДействиеЗаполнитьИПровести(Кнопка)

	// Заполнять с проведением можно документы с текущую датой
	Если НачалоДня(Дата) = НачалоДня(ТекущаяДата()) Тогда
		Если НЕ ЭтоНовый() Тогда

			// Если документ ранее был записан, то он будет переноситься в конец дня из-за оперативного проведения, о чем следует предупредить.
			Ответ = Вопрос("В режиме заполнения с проведением документ будет проводиться оперативно. " + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли; 

	// Обработка выполняется в транзакции. Она будет отменена, если заполнить не удалось
	НачатьТранзакцию();
	Отказ = Ложь;

	// Очистим записи документа по размещению, если он был ранее проведен
	Если Проведен Тогда
		НаборТовары = РегистрыНакопления.ТоварыНаСкладах.СоздатьНаборЗаписей();
		НаборТовары.Отбор.Регистратор.Установить(Ссылка);
		НаборТовары.Прочитать();
		НаборТовары.Очистить();
		НаборТовары.Записать();
	КонецЕсли;

	// Заполнение документа
	ЗаполнитьПоСериям();

	// Если заполнить удалось, то запись документа с проведением

	НеПроведен = Ложь;
	Если НЕ Отказ Тогда
		Попытка
			Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		Исключение
			НеПроведен = Истина;
		КонецПопытки;
	КонецЕсли;

	Если Отказ ИЛИ НеПроведен Тогда
		ОтменитьТранзакцию();
		Если НеПроведен Тогда
			Предупреждение("Операция не выполнена!");
		КонецЕсли;
		
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли; 

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(ЭтотОбъект.Метаданные().Синоним, ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить командной панели
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоЗаказу(Кнопка)
	
	Если ЗначениеНеЗаполнено(ВнутреннийЗаказ) Тогда
		Заказ = Неопределено;
		Если Не ВвестиЗначение(Заказ, "Выберите заказ..", Тип("ДокументСсылка.ВнутреннийЗаказ")) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Заказ = ВнутреннийЗаказ;
	КонецЕсли;
	
	Если Не Заказ.ВидЗаказа = Перечисления.ВидыВнутреннегоЗаказа.НаСклад Тогда
		Предупреждение("Выберите внутренний заказ с видом заказа ""со склада""!");
		Возврат;
	КонецЕсли;
	
	Если Товары.Количество() > 0 Тогда
		Ответ = Вопрос("Документ уже содержит строки. При заполнении они будут удалены." + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Товары.Очистить();
	КонецЕсли;
	
	ДатаЗаполнения = ?( ЭтоНовый(), ТекущаяДата(), Дата);
	товарыТаб = ПолучитьОстаткиНеперемещенные(ВнутреннийЗаказ, ДатаЗаполнения, СкладОтправитель);
	товары.Очистить(); // очищает всю таблицу
    Для i=0 по товарыТаб.Количество()-1 Цикл
		СтрокаОстатков = товарыТаб[i];
		Если СтрокаОстатков.Количество>0 тогда
			НоваяСтрока = товары.Добавить();
			НоваяСтрока.Номенклатура  = СтрокаОстатков.Номенклатура;
			НоваяСтрока.Количество    = СтрокаОстатков.Количество;
			НоваяСтрока.Склад         = СтрокаОстатков.Склад;
			Если СтрокаОстатков.Количество<СтрокаОстатков.КоличествоОстаток тогда
				сообщить("На складе "+СтрокаОстатков.Склад+" нехватает количества "+строка(СтрокаОстатков.КоличествоОстаток - СтрокаОстатков.Количество)+" для перемещения! Есть только "+строка(СтрокаОстатков.Количество)+" из "+строка(СтрокаОстатков.КоличествоОстаток), СтатусСообщения.Внимание);
			КонецЕсли;
			НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
			НоваяСтрока.ЕдиницаИзмерения             = СтрокаОстатков.Номенклатура.ЕдиницаХраненияОстатков;
			НоваяСтрока.Коэффициент                  = СтрокаОстатков.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
			НоваяСтрока.Вес		                     = СтрокаОстатков.Номенклатура.ЕдиницаХраненияОстатков.Вес;
			РассчитатьКоличествоМестТабЧасти( НоваяСтрока, ЭтотОбъект);
			НоваяСтрока.ХарактеристикаНоменклатуры   = СтрокаОстатков.ХарактеристикаНоменклатуры;
			НоваяСтрока.Качество = СтрокаОстатков.Качество;
		КонецЕсли;
		КонецЦикла;

	//ЗаполнитьОстаткамиТоваровСРезервомПоВнутреннемуЗаказу( ЭтотОбъект, Заказ, Товары, СкладОтправитель, ДатаЗаполнения);
	//Для Каждого СтрокаТЧ Из Товары Цикл
	//	СтрокаТЧ.ДокументРезерва = Заказ;
	//КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнитьПоЗаказу()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	УстановитьДоступностьКнопкиЗаполнитьИПровести();

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ОтражатьВНалоговомУчете = Элемент.Значение;

	УстановитьВидимость();

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()


// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьНомерДокумента(ЭтотОбъект);

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СкладОтправитель.
//
Процедура СкладОтправительПриИзменении(Элемент)

	УстановитьЗаголовокФормыДокументаСУчетомСклада(, ЭтотОбъект, ЭтаФорма, СкладПолучатель);

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	//+++ 26.03.2012
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") тогда
		Если Элемент.Значение.Подразделение <> глТекущийПользователь.ОсновноеПодразделение тогда
			Предупреждение("Вам разрешено использовать только склады подразделения: "+строка(глТекущийПользователь.ОсновноеПодразделение) );
			СкладОтправитель = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;	

	//+++( 03.04.2012  SAO
	Если ЗначениеЗаполнено(ВнутреннийЗаказ) тогда
		//Режим = РежимДиалогаВопрос.ДаНет;
		//Ответ1 = КодВозвратаДиалога.Да;
		//Ответ = Вопрос("Склад-Отправитель = '"+строка(СкладОтправитель)+"'
		//		   |Поле 'Склад' в таблице 'Товары' будет перезаполнен!", Режим, 30, Ответ1);
		Предупреждение("Склад-Отправитель = '"+строка(СкладОтправитель)+"'
				   |Поле 'Склад' в таблице 'Товары' будет перезаполнен!",10);
	//	Если Ответ = КодВозвратаДиалога.Да Тогда
			для каждого стр1 из Товары цикл	
			 стр1.Склад = СкладОтправитель; //27.09.2016
			КонецЦикла;	
	//	КонецЕсли;
		
	КонецЕсли;
    //+++)
	
КонецПроцедуры //СкладОтправитель


// Процедура - обработчик события "ПриИзменении" поля ввода СкладПолучатель.
//
Процедура СкладПолучательПриИзменении(Элемент)

	//+++ 26.03.2012
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") тогда
		Если СкладПолучатель.Подразделение <> глТекущийПользователь.ОсновноеПодразделение тогда
			Предупреждение("Вам разрешено использовать склады 
			|только собственного подразделения: "+строка(глТекущийПользователь.ОсновноеПодразделение) );
			СкладПолучатель = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВнутреннийЗаказ) тогда
	//Ответ = КодВозвратаДиалога.Да;
	// 04.04 - без вопроса!
	//Ответ = Вопрос("Склад-Получатель = '"+строка(СкладПолучатель)+"'
	//			   |Заполнить Поле 'Склад' в табличной части?", РежимДиалогаВопрос.ДаНет, 10, Ответ);
	Предупреждение("При установке Склада-Получателя = '"+строка(СкладПолучатель)+"'
				   |Будет перезаполнено поле 'Склад-получатель' в таблице 'Товары'!",10);
	//ПустойСклад = справочники.Склады.ПустаяСсылка();
	//	Если Ответ = КодВозвратаДиалога.Да Тогда
			для каждого стр1 из Товары цикл	
				стр1.Склад = СкладПолучатель;  //27.09.2016
			КонецЦикла;	
	//	КонецЕсли;
	//Комментарий = ""; 
    КонецЕсли;
	
	УстановитьЗаголовокФормыДокументаСУчетомСклада(, ЭтотОбъект, ЭтаФорма, СкладПолучатель);

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриВыводеСтроки" поля табличной части "Товары".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
// "Товары". 
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Номенклатура);
	Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров) Тогда
		СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
	КонецЕсли;

	//ЗаполнитьВесВТабличнойЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ТоварыПриНачалеРедактирования()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	//Услуг в этом документе быть не должно.
	Если Не ЗначениеНеЗаполнено(ВыбранноеЗначение) Тогда
		Если ВыбранноеЗначение.Услуга Тогда
			Предупреждение("Услуг в этом документе быть не доложно."); 
			СтандартнаяОбработка = Ложь;  // Отказ от выбора.
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры // ТоварыНоменклатураОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Берем из самого реквизита Номенклатура
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

	СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	// Установить коэффициент
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент; 
	РассчитатьКоличествоТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	РассчитатьКоличествоТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода цены в рознице
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение("Не выбрана позиция номенклатуры!"); 
		Возврат;
	КонецЕсли; 

	Элемент.СписокВыбора = СформироватьСписокРозничныхЦен(СтрокаТабличнойЧасти.Номенклатура,
	                                                        СтрокаТабличнойЧасти.ЕдиницаИзмерения,
	                                                        СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
	                                                        СкладОтправитель, мВалютаРегламентированногоУчета,
	                                                        , Дата);

КонецПроцедуры // ТоварыЦенаНачалоВыбораИзСписка()

// Процедура - обработчик события "НачалоВыбора" поля Заказ покупателя
// в строке табличной части "Товары".
//
Процедура ТоварыДокументРезерваНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Новый Структура(), "Товары");

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА

// Процедура - обработчик события "ОбработкаВыбора" поля ввода номенклатуры
// в строке табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	//Услуг в этом документе быть не должно.
	Если Не ЗначениеНеЗаполнено(ВыбранноеЗначение) Тогда
		Если ВыбранноеЗначение.Услуга Тогда
			Предупреждение("Услуг в этом документе быть не доложно."); 
			СтандартнаяОбработка = Ложь;  // Отказ от выбора.
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры // ВозвратнаяТараНоменклатураОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении возвратной тары.
	ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараНоменклатураПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ покупателя
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараДокументРезерваНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Новый Структура(), "ВозвратнаяТара");

КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ПоказатьКодАртикул(мКолонкиВозвратнаяТара, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры // ВозвратнаяТараПриВыводеСтроки()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

Процедура ЗаказПриИзменении(Элемент)
	
	СкладПолучатель = ВнутреннийЗаказ.Заказчик;
	УстановитьВидимость();

КонецПроцедуры // ЗаказПриИзменении()

Процедура ЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент,
		СтандартнаяОбработка, Новый Структура("ВидЗаказа", Перечисления.ВидыВнутреннегоЗаказа.НаСклад), "");
	УстановитьВидимость();
	
КонецПроцедуры // ЗаказНачалоВыбора()

Процедура ВозвратнаяТараПриНачалеРедактирования(Элемент, НоваяСтрока)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;
	Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров) Тогда
		СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПеретаскивание()

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "ВозвратнаяТара");
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ВозвратнаяТараПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ВозвратнаяТараПеретаскивание()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ДанныеПоПогрузке.Количество() = 0 Тогда
		КоманднаяПанель1Заполнить(ЭлементыФормы.КоманднаяПанель1.Кнопки.Заполнить);
	КонецЕсли;
	
	яштСменаПользователя(ЭтотОбъект, ЭтаФорма, глТекущийПользователь);
	ЗаполнитьВесНетто(Товары);
	ОбщийВес=Товары.Итог("Вес");

	//17.03.2016
	Если СкладОтправитель.ТипСклада = Перечисления.ТипыСкладов.ВПути
		и Перемещение.Пустая() тогда
		Предупреждение("    При перемещении со склада ""Товары в пути"" 
						|требуется указать Перемещение на этот склад ""Товары в Пути"".
						|
						| Заполните поле ""Перемещение"" на закладке ""Дополнительно"".
						|  Для автоматического резервирования товаров под заказы...",30);
		Отказ = не РольДоступна("ПравоЗавершенияРаботыПользователей"); // только IT-отдел может "не правильно" делать
	КонецЕсли;
	
	//27.09.2016 требуется обязательное заполнение!
	Для каждого стр1 из Товары цикл 
		Если стр1.Склад.Пустая() тогда
			Предупреждение("В строке "+строка(стр1.НомерСтроки)+" - не указан 'Склад'!", 10);
			Отказ = Истина;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанель1Заполнить(Кнопка)
	//ЗаполнитьВесНетто(Товары);
	//ОбщийВес=Товары.Итог("Вес");

ДанныеПоПогрузке.Очистить();
	
//+++ перераспределение КТУ по грузчикам по группам складов
Если Константы.КТУгрузчиковПоСкладам.Получить() тогда
	
	фл1склад = истина;
	для каждого стр1 из Товары цикл
		Если ЗначениеЗаполнено(стр1.Склад) тогда
			 фл1склад = ЛОЖЬ;
			 прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если фл1Склад тогда  //значит 1 - грузчики со склада отгрузки!
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|ФизЛицо как Грузчик
		|ИЗ
		|	Справочник.ГруппыСкладов.Состав
		|ГДЕ Ссылка = &ГруппаСкладов";
		Запрос.УстановитьПараметр("ГруппаСкладов", ?(ЗначениеНеЗаполнено(СкладОтправитель.ГруппаСкладов) 
						,?(ссылка.СкладОтправитель.Транзитный, справочники.ГруппыСкладов.НайтиПоКоду("!!"),справочники.ГруппыСкладов.НайтиПоКоду("00"))
						,ссылка.СкладОтправитель.ГруппаСкладов) ); 
		
		Выборка=Запрос.Выполнить().Выбрать();
		КоличествоСтрок=Выборка.Количество();
		
		Пока Выборка.Следующий() Цикл
			Строка=ДанныеПоПогрузке.Добавить();
			Строка.Грузчик=Выборка.Грузчик;
			Строка.Вес=1;
		КонецЦикла;
	
	иначе // по складам!
		
		яштРезервыПоТоварам.ЗаполнениеКТУГрузчиков(ЭтотОбъект);
		
//+++ 05.06.2015 -------------Прибавляем грузчиков Ангар-И---------------------
Если ЭтотОбъект.СкладПолучатель = справочники.Склады.НайтиПоНаименованию("Ангар-И") 
	   и ЭтотОбъект.СкладОтправитель<>ЭтотОбъект.СкладПолучатель тогда
	   
	КолГр   = ЭтотОбъект.ДанныеПоПогрузке.Количество();
	ВесДок  = ЭтотОбъект.Товары.Итог("Вес");
	КолАнгар= ЭтотОбъект.СкладПолучатель.ГруппаСкладов.Состав.Количество();
	
//+++  ------------и здесь тоже! как в Задании на перемещение-------------------------
	если КолАнгар > 0 тогда
	Доля = КолГр/КолАнгар;
	ВесНаОдного = ВесДок/КолАнгар;
	для каждого стр1 из ЭтотОбъект.СкладПолучатель.ГруппаСкладов.Состав цикл
		   стр2 = ЭтотОбъект.ДанныеПоПогрузке.Добавить();
		   стр2.Грузчик = стр1.ФизЛицо;
		   стр2.Вес = Доля;
		   стр2.Вручную  = истина;
		   стр2.ВесНетто = ВесНаОдного;
	КонецЦикла;	
	Сообщить("Добавлено "+строка(КолАнгар)+" грузчиков склада: "+строка(СкладПолучатель) );
	КонецЕсли;	
КонецЕсли;
//+++  ---------------------------------------------------------------------------


	КонецЕсли;
	
иначе // как раньше было
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|Ссылка Грузчик
	|ИЗ
	|	Справочник.ФизическиеЛица
	|ГДЕ Официальный";
	
	Выборка=Запрос.Выполнить().Выбрать();
	КоличествоСтрок=Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл
		Строка=ДанныеПоПогрузке.Добавить();
		Строка.Грузчик=Выборка.Грузчик;
		Строка.Вес=1;
	КонецЦикла;
КонецЕсли;
	
КонецПроцедуры




Функция ЧасМин(Сек)
	Возврат ?(СтрДлина(Строка(Цел(Сек/3600))) < 2, "0" + Строка(Цел(Сек/3600)), Строка(Цел(Сек/3600))) + 
			 ":" + ?(СтрДлина(Строка(Цел((Сек/3600 - Цел(Сек/3600))*60))) < 2, "0" + Строка(Цел((Сек/3600 - Цел(Сек/3600))*60)),
			 Строка(Цел((Сек/3600 - Цел(Сек/3600))*60)));
КонецФункции

//+++( 22.03.2011
Процедура ДействияФормыПослатьInvoce(Кнопка)
	
	 Если НЕ значениеЗаполнено(СкладПолучатель) тогда
		сигнал();сигнал();
		Предупреждение("В документе не выбран склад! 
		|Отправка Invoice - невозможна!");	
		возврат;
	КонецЕсли;	
		
	Если НЕ значениеЗаполнено(СкладПолучатель.Подразделение) тогда
		сигнал();сигнал();
		Предупреждение("У склада "+строка(СкладПолучатель) + " - не заполнено Подразделение! 
		|Отправка Invoice - невозможна!");	
		возврат;
	КонецЕсли;
	
	//+++14.10.2014 - только для Москвы виктории (не используется!)
	Если Ссылка.СкладПолучатель.Подразделение<>Справочники.Подразделения.НайтиПоКоду("00107") тогда  
		сигнал();сигнал();
		Предупреждение("У склада "+строка(Ссылка.СкладПолучатель) + " Подразделение не является Подразделением для отправки эл.почты! 
		|Отправка Invoice - невозможна!");	
		возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Номер) или ЭтоНовый() тогда
		сигнал();сигнал();
		Предупреждение("Перед отправкой письма - сохраните текущий документ!",30);
		возврат;
	КонецЕсли;

	датаПрихода = ПолучитьДатуПрибытия(); 
	Если датаПрихода=Дата(1,1,1) тогда
		сигнал();
		Предупреждение("Заполните в свойствах ""Заказа покупателя"" 
					   |поле ""Дата прихода/расхода в пункт назначения"". 
					   |Никаких писем - не отправлено!", 30);
		возврат;
	КонецЕсли;	
	
	
	//===================Проверим уч.запись с которой и будет идти отправка======================
	  УЗ =  ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяУчетнаяЗапись");
		Если НЕ ЗначениеЗаполнено(УЗ) тогда
			//Если РольДоступна("ПолныеПрава") тогда                          
			УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("yst-mos@yandex.ru");
			Если ЗначениеЗаполнено(УЗ) тогда
				//Ответ = КодВозвратаДиалога.Нет;
				//Если Вопрос("У Вас не установлена Учетная запись эл.почты!
				//|Продолжить отправку с эл.адреса организации (no-reply@yst76.ru)?",РежимДиалогаВопрос.ДаНет, 10, Ответ, "Эл.Адрес отправки") = КодВозвратаДиалога.Нет тогда
				//возврат;
				//КонецЕсли;
			иначе // в базе нет уч.записи: yst-mos@yandex.ru / no-reply@yst76.ru
				сигнал();
				Предупреждение("У Вас Не установлена - Основная учетная запись эл.почты!
							   |Для отправки - обязательно требуется обратный эл.адрес!",30);
				возврат;
			КонецЕсли;
		КонецЕсли;

//-----------------------------------------------------------------------------------------------		

//======================Получим адрес эл.почты - с привязкой к Контрагенту invoce =================
		//Запрос = Новый Запрос;
		//Запрос.Текст = "ВЫБРАТЬ
		//|	КонтактнаяИнформация.Представление
		//|ИЗ
		//|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		//|ГДЕ
		//|	КонтактнаяИнформация.Объект = &Объект
		//|	И КонтактнаяИнформация.Тип = &Тип
		//|	И КонтактнаяИнформация.Вид = &Вид";
		//
		//Запрос.УстановитьПараметр("Объект", Справочники.Контрагенты.НайтиПоНаименованию("invoce") );
		//Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		//Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыДляОбменаДокументами);
		//
		//Результат = Запрос.Выполнить();
		//Выборка = Результат.Выбрать();
		//АдресЭлПочтыКонтрагента = "";
		//Если Выборка.Следующий() тогда
		//	АдресЭлПочтыКонтрагента = СокрЛП(выборка.Представление);
		//иначе
		//	сигнал();
		//	Предупреждение("У контрагента: Invoce - не задан эл.адрес!
		//				   |Отправка письма - не возможна!",30);
		//	Возврат;
		//КонецЕсли;
	
	//============================================================	

//=============================Получим адрес эл.почты=================

		АдресЭлПочтыКонтрагента = //ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"");
								  "jst@victorya.su;it@victorya.su;ogorodnikov@yst76.ru";
								  //"";
		ТипДок = "Перемещение";
		
	//============================================================		
	Если Найти(Комментарий,"/отп.Invoice")>0 тогда
		Ответ = КодВозвратаДиалога.Нет;
		Если Вопрос("Этот документ уже отправлялся!
					|Вы действительно хотите ПОВТОРНО отправить этот документ в формате Invoice
					|на адреса эл.почты: "+АдресЭлПочтыКонтрагента+"?", РежимДиалогаВопрос.ДаНет, 0) = КодВозвратаДиалога.Нет тогда
			Возврат;
		КонецЕсли;
	иначе		
		Ответ = КодВозвратаДиалога.Нет;
		Если Вопрос("Вы действительно хотите отправить этот документ в формате Invoice
					|на адреса эл.почты: "+АдресЭлПочтыКонтрагента+"?", РежимДиалогаВопрос.ДаНет, 0) = КодВозвратаДиалога.Нет тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
				
	  Состояние("Идет отправка письма...");  i=0;
	  ВременнаяПапка = КаталогВременныхФайлов();   //"C:\";    // "D:\Рассылка\";    //"\\alpha\Userdir\ALL\_Оперативный День\Отправленные документы [@]\";
	    	  
	  СписокФайловВложений=новый СписокЗначений;
	  
	  ДокументОбъект=ЭтотОбъект;
			  //Печатается csv файл
			  ИмяФайлаСообщения="Invoice.csv";//+++
				  		Текст = ПолучитьТекстInvose(датаПрихода); //
						
						ТекстовыйДокумент1 = новый ТекстовыйДокумент;
						ТекстовыйДокумент1.УстановитьТекст(Текст);
						ТекстовыйДокумент1.Записать(временнаяПапка+ИмяФайлаСообщения, КодировкаТекста.ANSI );
						
				  		СписокФайловВложений.Добавить(ВременнаяПапка+ИмяФайлаСообщения);
						
	 Послать(АдресЭлПочтыКонтрагента,СписокФайловВложений, УЗ);	  
	
Состояние(" ");

сигнал();

Предупреждение("Отправка файла "+ИмяФайлаСообщения+" 
			   |на эл.адрес: "+АдресЭлПочтыКонтрагента+" завершена!");
	
попытка
	Комментарий = Комментарий +"/отп.Invoice: "+строка(датаПрихода)+" выполнена "+строка(ТекущаяДата())+"/";
	ЭтотОбъект.Записать();
исключение
конецПопытки;

КонецПроцедуры

функция ПолучитьДатуПрибытия()
	
	рез = Дата(1,1,1);
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ВнутреннийЗаказ) тогда
		Предупреждение("В текущем документе не заполнено поле ""Внутренний заказ""!");
		возврат рез;
	иначеЕсли НЕ ЗначениеЗаполнено(ЭтотОбъект.ВнутреннийЗаказ.ДокументОснование) тогда
		Предупреждение("В документе ""Внутренний заказ"" не заполнено поле ""Документ основание""!");
		возврат рез;
	КонецЕсли;
	
	закПок = ЭтотОбъект.ВнутреннийЗаказ.ДокументОснование;
	
	отбор1 = новый структура;
	отбор1.Вставить("Объект", закПок );
	отбор1.Вставить("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90159") );
	зап = регистрыСведений.ЗначенияСвойствОбъектов.Получить(отбор1);
	
	если зап.Значение = Дата(1,1,1) или зап.Значение = неопределено тогда
		
		Сигнал();Сигнал();Сигнал();
		Предупреждение("В заказе покупателя "+строка(закПок) + "
				       |НЕ УКАЗАНА Дата прихода в пункт назначения!!!",30);
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Использовать дату текущего документа Перемещения 
			   	       |как Дату прихода в пункт назначения в Invoice?",Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
    		рез = ссылка.Дата;
		КонецЕсли;

	иначе
		
		рез = зап.Значение;
		
	КонецЕсли;	
	
	возврат рез;
	
КонецФункции

функция ПолучитьТекстInvose(ДатаПрих)
	
	Запрос = Новый Запрос;
	запрос.текст = "ВЫБРАТЬ
               |	А.Номер,
               |	А.ТипНакладной,
               |	А.ДатаИВремя,
               |	А.НомерСтроки,
               |	А.КодТовара,
               |	А.Кондиционность,
               |	А.Количество,
               |	"""" КАК СрокГодности,
               |	"""" КАК ДатаПроизводства,
               |	"""" КАК Партия,
               |	"""" КАК КодПокупателя,
               |	"""" КАК НаименованиеКлиента,
               |	"""" КАК АдресДоставки
               |ИЗ
               |	(ВЫБРАТЬ
               |		РеализацияТоваровУслугТовары.Ссылка.Номер КАК Номер,
               |		1 КАК ТипНакладной,
               |		РеализацияТоваровУслугТовары.Ссылка.Дата КАК ДатаИВремя,
               |		РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
               |		РеализацияТоваровУслугТовары.Номенклатура.Код КАК КодТовара,
               |		1 КАК Кондиционность,
               |		РеализацияТоваровУслугТовары.Количество КАК Количество
               |	ИЗ
               |		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
               |	ГДЕ
               |		РеализацияТоваровУслугТовары.Ссылка = &Ссылка
               |	
               |	ОБЪЕДИНИТЬ
               |	
               |	ВЫБРАТЬ
               |		ПеремещениеТоваров.Ссылка.Номер,
               |		0,
               |		ПеремещениеТоваров.Ссылка.Дата,
               |		ПеремещениеТоваров.НомерСтроки,
               |		ПеремещениеТоваров.Номенклатура.Код,
               |		1,
               |		ПеремещениеТоваров.Количество
               |	ИЗ
               |		Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваров
               |	ГДЕ
               |		ПеремещениеТоваров.Ссылка = &Ссылка) КАК А";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	текст = "";
	строкаМассив = новый Массив;
		
	Если Выборка.Следующий() тогда
		строка1 = СокрЛП(выборка.Номер);  //13 полей и  12 ";"
		для i=1 по 12 цикл    //------------------------------------первая строка-----------------------------------
			Если i=2 тогда
				строка1 = строка1+";"+ СокрЛП(ДатаПрих);
			иначе
				строка1 = строка1+";"+ СокрЛП(выборка[i]);
			КонецЕсли;
		конецЦикла;	
		текст = строка1;
		
		Пока Выборка.Следующий() Цикл  //со 2-ой строки и до конца   //-----------------остальные-----------------
		строка1 = СокрЛП(выборка.Номер);  //13 полей и  12 ";"
			для i=1 по 12 цикл
				Если i=2 тогда
					строка1 = строка1+";"+ СокрЛП(ДатаПрих);
				иначе
					строка1 = строка1+";"+ СокрЛП(выборка[i]);
				КонецЕсли;
 			конецЦикла;	
		текст = текст +"
			    |"+строка1;
		КонецЦикла;
	КонецЕсли;
	
	возврат текст;
	
КонецФункции

Процедура Послать(АдресПолучателя,СписокФайловВложений, УЗ)
	   ТекстСообщения0 ="   Добрый день,
						 |
						 |Высылаем Вам файл  № "+Строка(Номер)+" от "+Формат(Дата,"ДЛФ=DD")+"
						 |
						 |
						 |С уважением,
						 |
						 |
						 |ЗАО Торговая Компания ""Яршинторг"", 
						 |юр./факт.адрес: 150044, Ярославская обл, Ярославль г, Базовая ул, дом № 3, стр.2
						 |тел./факс: (4852) 200-200, 67-11-67
						 |Web-сайт : http://www.yst76.ru
						 |";

	    	
	    ИПП=Новый ИнтернетПочтовыйПрофиль;
		ИПП.АдресСервераSMTP=УЗ.SMTPСервер;
		ИПП.ПортSMTP=УЗ.ПортSMTP;
		Если УЗ.ТребуетсяSMTPАутентификация Тогда
			ИПП.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
			ИПП.ПарольSMTP         = УЗ.ПарольSMTP;
			ИПП.ПользовательSMTP   = УЗ.ЛогинSMTP;
		Иначе
			ИПП.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
			ИПП.ПарольSMTP         = "";
			ИПП.ПользовательSMTP   = "";
		КонецЕсли;
		Письмо=Новый ИнтернетПочтовоеСообщение;
		Письмо.Отправитель=УЗ.АдресЭлектроннойПочты;
		
	   //+++( 19.12.2011 - разбор адреса на несколько адресов
		 //Письмо.Получатели.Добавить(АдресПолучателя);
		i = Найти(АдресПолучателя,";"); j=Найти(АдресПолучателя, ",");
		k=?(i>0 и i>j,  i, ?(j>0 и j>i, j, 0) );
			
		Если i=0 и j=0 тогда
			Письмо.Получатели.Добавить(АдресПолучателя);
		иначе
			АдрОстаток = СокрЛП(АдресПолучателя);
			пока (k>0) цикл
				Адр1 = Лев(АдрОстаток, k-1);
				Если СокрЛП(Адр1)<>"" и Найти(Адр1,"@")>0 и Найти(Адр1,".")>0 тогда
					Письмо.Получатели.Добавить(Адр1);
				иначе
					Сообщить("Адрес '"+Адр1+"' не содержит @ или .");
				КонецЕсли;
				АдрОстаток = Прав(АдрОстаток, стрДлина(АдрОстаток)-k);
				i = Найти(АдрОстаток,";"); j=Найти(АдрОстаток, ",");
				k=?(i>0 и i>j,  i, ?(j>0 и j>i, j, 0) );
			КонецЦикла;
			Если СокрЛП(АдрОстаток)<>"" и Найти(АдрОстаток,"@")>0 и Найти(АдрОстаток,".")>0 тогда
				Письмо.Получатели.Добавить(АдрОстаток);
			КонецЕсли;

		КонецЕсли; //+++ )
		
		Если ЗначениеЗаполнено(СписокФайловВложений) И СписокФайловВложений.Количество()>0 Тогда
			Для Каждого ТекАдр Из СписокФайловВложений Цикл
				Письмо.Вложения.Добавить(ТекАдр.Значение);
			КонецЦикла;
		КонецЕсли;
        Письмо.Тема="Invoice от ЗАО ТК ""Яршинторг"" - Перемещение №"+Строка(Номер)+" от "+Формат(Дата,"ДЛФ=DD");
	    
		
		Письмо.ИмяОтправителя ="ЗАО ТК ""Яршинторг"", г.Ярославль";
	    Письмо.Организация ="ЗАО ТК ""Яршинторг"", г.Ярославль";
	    Письмо.Тексты.Добавить(ТекстСообщения0,ТипТекстаПочтовогоСообщения.простойТекст);
	
		Почта=Новый ИнтернетПочта;
	  
		попытка
			Почта.Подключиться(ИПП);
			Почта.Послать(Письмо);
	    	Почта.Отключиться();
		исключение
			сообщить("Не удалось отправить письмо! "+ОписаниеОшибки(), СтатусСообщения.Внимание);
		КонецПопытки;
		
КонецПроцедуры

Процедура ТоварыСкладПриИзменении(Элемент)
	
	//+++ 04.04.2012
	стр1 = ЭлементыФормы.Товары.ТекущиеДанные;
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") тогда
		Если стр1.Склад.Подразделение <> глТекущийПользователь.ОсновноеПодразделение тогда
			Предупреждение("Вам разрешено использовать только склады собственного подразделения: "+строка(глТекущийПользователь.ОсновноеПодразделение) );
			стр1.Склад = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	//+++ 21.05.2015
	Если стр1.Склад.ЭтоГруппа тогда
		  Предупреждение("Нельзя выбирать группу складов!
		  				 |Выберите один склад...", 10);
	стр1.Склад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
					 
КонецПроцедуры

Процедура ДействияФормыДействиеВвестиТребование(Кнопка)
	Если Не ЭтоНовый() Тогда
		СкладПоУмолчаниюКрышки=Справочники.Склады.НайтиПоКоду("00393");
		СтатьяЗатратПоУмолчанию=Справочники.СтатьиЗатрат.НайтиПоКоду("А0039");
		НоменклатурнаяГруппаПоУмолчанию=Справочники.НоменклатурныеГруппы.НайтиПоКоду("00026");

		ДокументТН=Документы.ТребованиеНакладная.СоздатьДокумент();
		ДокументТН.ОтражатьВУправленческомУчете=Истина;
		ДокументТН.Подразделение = Подразделение; 
		ДокументТН.Организация=ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяОрганизация");
		
		ДокументТН.Склад=СкладПоУмолчаниюКрышки;
		ДокументТН.ДокументОснование = ЭтотОбъект.Ссылка;
		ДокументТН.Комментарий="списание крышек";
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ Комплектующая Номенклатура,
		|Комплектующая.ЕдиницаХраненияОстатков  ЕдиницаИзмерения,
		| СУММА(КоличествоОтгружено) КОличество
		| ИЗ
		|(ВЫБРАТЬ 
		|ПеремещениеТоваровУслугТовары.Номенклатура,
		|ПеремещениеТоваровУслугТовары.КоличествоОтгружено,
		|КомплектующиеНоменклатуры.Комплектующая
		|ИЗ
		|(ВЫБРАТЬ 
		|Номенклатура,
		|СУММА(Количество) КоличествоОтгружено
		|ИЗ  Документ.ПеремещениеТоваров.Товары 
		|ГДЕ Ссылка = &СсылкаПеремещение
		|СГРУППИРОВАТЬ ПО Номенклатура ) ПеремещениеТоваровУслугТовары
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|(ВЫБРАТЬ	Номенклатура,	Комплектующая
		|ИЗ	РегистрСведений.КомплектующиеНоменклатуры 
		|	ГДЕ Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура ИЗ 
		|	Документ.ПеремещениеТоваров.Товары ГДЕ Ссылка=&СсылкаПеремещение )
		|И Комплектующая В Иерархии(&Крышки)) КАК КомплектующиеНоменклатуры
		|ПО ПеремещениеТоваровУслугТовары.Номенклатура=КомплектующиеНоменклатуры.Номенклатура
		|ГДЕ НЕ КомплектующиеНоменклатуры.Комплектующая  ЕСТЬ NULL ) А
		|СГРУППИРОВАТЬ ПО КОмплектующая
		|Упорядочить ПО КОмплектующая.КодСБИС";
		
		Запрос.УстановитьПараметр("СсылкаПеремещение", Ссылка);
		Запрос.УстановитьПараметр("Крышки", Справочники.Номенклатура.НайтиПоКоду("0080004"));
		
		Выборка=Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			строкаДокументТН=ДокументТН.Материалы.Добавить();
			ЗаполнитьЗначенияСвойств(строкаДокументТН,Выборка);
			строкаДокументТН.Коэффициент=1;
			строкаДокументТН.Качество=Справочники.Качество.Новый;
			строкаДокументТН.СтатьяЗатрат=СтатьяЗатратПоУмолчанию;
			строкаДокументТН.НоменклатурнаяГруппа=НоменклатурнаяГруппаПоУмолчанию;
			строкаДокументТН.СпособСписанияОстаткаТоваров=Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		КонецЦикла;	
		
		ДокументТН.ПолучитьФорму("ФормаДокумента").Открыть();
	Иначе
		СообщитьОбОшибке("Требование-накладная может быть введена только после записи перемещения"); 
	Конецесли;

	
КонецПроцедуры

Процедура ПеревозчикНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка= ЛОЖЬ;
	ФормаВыбораКонтрагента=Справочники.Контрагенты.ПолучитьФормуВыбора();
	ВыбКонтрагент=ФормаВыбораКонтрагента.ОткрытьМодально();
	Перевозчик=?(ЗначениеЗаполнено(ВыбКонтрагент),ВыбКонтрагент.НаименованиеПолное,"");
КонецПроцедуры

Процедура ТоварыПоМестамХраненияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ПоказатьКодАртикул(ЭлементыФормы.ТоварыАдресноеХранение.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
КонецПроцедуры

Процедура ТоварыПоМестамХраненияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
		СтрокаТабличнойЧасти = ЭлементыФормы.ТоварыАдресноеХранение.ТекущиеДанные;
	
	Если НоваяСтрока И ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
	//	СкладДляПодстановки = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойСклад");
		Если ЗначениеЗаполнено(ВнутреннийЗаказ) и СкладОтправитель.АдресноеХранение Тогда  //+++ 10.10.2013
			СтрокаТабличнойЧасти.Склад = СкладОтправитель;
		иначеЕсли  СкладПолучатель.АдресноеХранение тогда
			СтрокаТабличнойЧасти.Склад = СкладПолучатель;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//+++)

/// +++ 27.12.2012 
// Процедура вызывается при выборе пункта "Из терминала сбора данных"
// меню кнопки "Заполнить" командной панели табличного поля "ТоварыАдресноеХранение"
//
Процедура КоманднаяАдресноеХранениеИзТерминалаСбораДанных(Кнопка)
	Перем Ответ, Данные, ВремТовар, ВремЕдиница;
	
	
	//+++ переподключение принудительное - всегда!
			глТорговоеОборудование.ОтключитьОборудование();
		    глТорговоеОборудование.ПодключитьОборудование();
			
	Если глТорговоеОборудование = Неопределено Тогда
		Предупреждение("Торговое оборудование не подключено");
	ИначеЕсли глТорговоеОборудование.млТерминал.Количество() = 0 Тогда
		Предупреждение("Терминал сбора данных не подключен");
	Иначе
		Если глТорговоеОборудование.млТерминал.Количество() = 1 Тогда

			РезультатВыбора = глТорговоеОборудование.млТерминал[0];

		Иначе

			СписокТерминаловСбораДанных = Новый СписокЗначений;
			Для Каждого ТерминалСбораДанных из глТорговоеОборудование.млТерминал Цикл
				СписокТерминаловСбораДанных.Добавить(ТерминалСбораДанных, ТерминалСбораДанных.Модель);
			КонецЦикла;
			РезультатВыбора = СписокТерминаловСбораДанных.ВыбратьЭлемент("Выберите терминал сбора данных");
			Если РезультатВыбора = Неопределено Тогда
				Возврат;
			КонецЕсли;
			РезультатВыбора = РезультатВыбора.Значение;

		КонецЕсли;
					
///++++++++++++++++++++++++++++++++++++++++++++++Плотников Терминалы Моторолла
   ///Плотников Терминалы Моторолла
		
		Если РезультатВыбора.Модель = Справочники.ТорговоеОборудование.НайтиПоНаименованию("КПК под управлением «АТОЛ: Mobile Logistics»") Тогда
			
			Ответ = глТорговоеОборудование.ТСДЗагрузитьДанные(Данные);
			
					
		Если Не ПустаяСтрока(Ответ) Тогда
			Предупреждение(Ответ);
		ИначеЕсли Данные.Количество() = 0 Тогда
			Предупреждение("Из терминала сбора данных не загружено ни одного товара...");
		Иначе
			
			i=0;    
			пустойСклад = справочники.Склады.ПустаяСсылка();
	//--------------------------------------------------------------------------------------------------------------------------		
			Для Каждого СтрокаДанных Из Данные Цикл
				i=i+1;
				
				Если стрДлина(СтрокаДанных.штриХкод)=13 тогда //16.11.2015  - поиск по штрихКоду
				    если лев(СтрокаДанных.штриХкод,5) = "05000" тогда // "наш" код = префикс + код товара + КС
				        Код = сред(СтрокаДанных.штриХкод, 6,7);
				    иначе	
				        Код = "9999999"; // не существующий код!
				    КонецЕсли; 
			    иначе
				    Код = ЛЕВ(СтрокаДанных.штриХкод,7);
				КонецЕсли;
				
				Если стрДлина(СтрокаДанных.Ячейка)>6 и лев(СтрокаДанных.Ячейка,1) = "1" тогда // "обрезаем" префикс для 5000
				    АдресХ = сред(СтрокаДанных.Ячейка,2,6);  
			    Иначе //как есть но в поле Адреса
				    АдресХ = лев(СтрокаДанных.Ячейка,7);
			    КонецЕсли;
				
				ВремТовар = Справочники.Номенклатура.НайтиПоКоду(Код);  //+++
				
				//09.11.2015 - Аксессуары
				Если НЕ ЗначениеЗаполнено(ВремТовар) тогда
					ВремТоварТабл = новый ТаблицаЗначений;
					глТорговоеОборудование.ПолучитьТоварПоШтрихкоду(СтрокаДанных.Штрихкод, ВремТоварТабл);
					Если ВремТоварТабл.Количество()>0 тогда
						ВремТовар = ВремТоварТабл[0].Номенклатура;
					КонецЕсли;	

					#Если Клиент тогда 
					Если ЗначениеЗаполнено(ВремТовар) тогда 
						Сообщить("По ШК: "+СокрЛП(СтрокаДанных.Штрихкод)+" Найден товар: "+строка(ВремТовар.Код)+" "+строка(ВремТовар), СтатусСообщения.Информация);
					иначе	
						Сообщить("По ШК: "+СокрЛП(СтрокаДанных.Штрихкод)+" НЕ Найден товар!", СтатусСообщения.Внимание);
					КонецЕсли;	
					#КонецЕсли	
				КонецЕсли;	
	
				Если ЗначениеЗаполнено(ВремТовар) Тогда
					
					//+++ 24.12.2012
					Адрес = справочники.АдресаХранения.НайтиПоКоду(АдресХ);
					Если НЕ ЗначениеЗаполнено(Адрес) Тогда
						сообщить(строка(i)+" строка - Нет Адреса Хранения: "+АдресХ, СтатусСообщения.Внимание);
					КонецЕсли;
					
					СтруктураОтбора = Новый Структура();
					СтруктураОтбора.Вставить("Номенклатура", ВремТовар);
					СтруктураОтбора.Вставить("АдресХранения",Адрес);
					
					СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТоварыАдресноеХранение, СтруктураОтбора);  //+++
					
					Если СтрокаТабличнойЧасти <> Неопределено Тогда
 						// Нашли, увеличиваем количество в первой найденной строке.
						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаДанных.Количество;
 					Иначе
 						// Не нашли - добавляем новую строку.
						СтрокаТабличнойЧасти = ТоварыАдресноеХранение.Добавить();
						СтрокаТабличнойЧасти.Номенклатура           = ВремТовар;  //+++
						
						СтрокаТабличнойЧасти.Количество             = СтрокаДанных.Количество;
						
						СтрокаТабличнойЧасти.АдресХранения			= Адрес;
						СтрокаТабличнойЧасти.Склад					= ?(ЗначениеЗаполнено(Адрес), Адрес.Владелец, пустойСклад );
						
						// Выполнить общие действия для всех документов при изменении номенклатуры.
						ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

					КонецЕсли;

					// Рассчитать реквизиты табличной части.
					//РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
					//РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

					ЭлементыФормы.ТоварыАдресноеХранение.ТекущаяСтрока  = СтрокаТабличнойЧасти;
				КонецЕсли;
			КонецЦикла;

			//Ответ = Вопрос("Очистить память терминала сбора данных?", РежимДиалогаВопрос.ДаНет);
			//Если Ответ = КодВозвратаДиалога.Да Тогда
			//	СтрокаТаблицыТерминала = неопределено;
			//	Если глТорговоеОборудование = Неопределено 
			//		или глТорговоеОборудование.млТерминал.Количество()>0 Тогда
			//		СтрокаТаблицыТерминала = новый Структура; //+++ 09.01.2012
			//		СтрокаТаблицыТерминала.Вставить("Объект" , глТорговоеОборудование.млТерминал[0].Объект );
			//		СтрокаТаблицыТерминала.Вставить("НомерЛУ", глТорговоеОборудование.млТерминал[0].НомерЛУ);
			//		СтрокаТаблицыТерминала.Вставить("Модель",  глТорговоеОборудование.млТерминал[0].Модель);
			//	//иначе // ТСД не подключен.	
			//	КонецЕсли;
			//	Ответ = глТорговоеОборудование.ОчиститьПамятьТерминалаСбораДанных(СтрокаТаблицыТерминала);
			//	Если Не ПустаяСтрока(Ответ) Тогда
			//		Предупреждение(Ответ);
			//	КонецЕсли;
			//КонецЕсли;
			
		КонецЕсли;
			
///++++++++++++++++++++++++++++++++++++++++++++++Продолжение огородников
        Иначе
            нетАдреса = ЛОЖЬ; //+++ это ВАЖНО !!!
		    Ответ = глТорговоеОборудование.ЗагрузитьДанныеИзТерминалаСбораДанных(РезультатВыбора, Данные, нетАдреса);
		
		    Если Не ПустаяСтрока(Ответ) Тогда
			    Предупреждение(Ответ);
		    ИначеЕсли Данные.Количество() = 0 Тогда
			    Предупреждение("Из терминала сбора данных не загружено ни одного товара...");
		    Иначе

			
			i=0;    
			пустойСклад = справочники.Склады.ПустаяСсылка();
	//--------------------------------------------------------------------------------------------------------------------------		
			Для Каждого СтрокаДанных Из Данные Цикл
				i=i+1;
				//+++ Если глТорговоеОборудование.ПолучитьТоварПоШтрихкоду(СтрокаДанных.Штрихкод, ВремТовар) Тогда
				ВремТовар = Справочники.Номенклатура.НайтиПоКоду(СтрокаДанных.Код);  //+++
				
				 //16.11.2015 - Аксессуары
				 Если НЕ ЗначениеЗаполнено(ВремТовар) тогда
					ВремТоварТабл = новый ТаблицаЗначений;
					глТорговоеОборудование.ПолучитьТоварПоШтрихкоду(СтрокаДанных.Штрихкод, ВремТоварТабл);
					Если ВремТоварТабл.Количество()>0 тогда
						ВремТовар = ВремТоварТабл[0].Номенклатура;
					КонецЕсли;	
					 
					Если ЗначениеЗаполнено(ВремТовар) тогда 
						Сообщить("По ШК: "+СокрЛП(СтрокаДанных.Штрихкод)+" Найден товар: "+строка(ВремТовар.Код)+" "+строка(ВремТовар), СтатусСообщения.Информация);
					иначе	
						Сообщить("По ШК: "+СокрЛП(СтрокаДанных.Штрихкод)+" НЕ Найден товар!", СтатусСообщения.Внимание);
					КонецЕсли;	
						
				КонецЕсли;	

				Если ЗначениеЗаполнено(ВремТовар) тогда
					
					//+++ 24.12.2012
					Адрес = справочники.АдресаХранения.НайтиПоКоду(СтрокаДанных.Адрес);
					Если НЕ ЗначениеЗаполнено(Адрес) тогда
						сообщить(строка(i)+" строка - Нет Адреса Хранения: "+СтрокаДанных.Адрес, СтатусСообщения.Внимание);
					КонецЕсли;
					
					СтруктураОтбора = Новый Структура();
					СтруктураОтбора.Вставить("Номенклатура", ВремТовар);
					СтруктураОтбора.Вставить("АдресХранения",Адрес);
					
					СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТоварыАдресноеХранение, СтруктураОтбора);  //+++
					
					Если СтрокаТабличнойЧасти <> Неопределено Тогда
 						// Нашли, увеличиваем количество в первой найденной строке.
						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаДанных.Количество;
 					Иначе
 						// Не нашли - добавляем новую строку.
						СтрокаТабличнойЧасти = ТоварыАдресноеХранение.Добавить();
						СтрокаТабличнойЧасти.Номенклатура           = ВремТовар;  //+++
						
						СтрокаТабличнойЧасти.Количество             = СтрокаДанных.Количество;
						
						СтрокаТабличнойЧасти.АдресХранения			= Адрес;
						СтрокаТабличнойЧасти.Склад					= ?(ЗначениеЗаполнено(Адрес), Адрес.Владелец, пустойСклад );
						
						// Выполнить общие действия для всех документов при изменении номенклатуры.
						ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

					КонецЕсли;

					// Рассчитать реквизиты табличной части.
					//РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
					//РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

					ЭлементыФормы.ТоварыАдресноеХранение.ТекущаяСтрока  = СтрокаТабличнойЧасти;
				КонецЕсли;
			КонецЦикла;

			Ответ = Вопрос("Очистить память терминала сбора данных?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				СтрокаТаблицыТерминала = неопределено;
				Если глТорговоеОборудование = Неопределено 
					или глТорговоеОборудование.млТерминал.Количество()>0 тогда
					СтрокаТаблицыТерминала = новый Структура; //+++ 09.01.2012
					СтрокаТаблицыТерминала.Вставить("Объект" , глТорговоеОборудование.млТерминал[0].Объект );
					СтрокаТаблицыТерминала.Вставить("НомерЛУ", глТорговоеОборудование.млТерминал[0].НомерЛУ);
					СтрокаТаблицыТерминала.Вставить("Модель",  глТорговоеОборудование.млТерминал[0].Модель);
				//иначе // ТСД не подключен.	
				КонецЕсли;
				Ответ = глТорговоеОборудование.ОчиститьПамятьТерминалаСбораДанных(СтрокаТаблицыТерминала);
				Если Не ПустаяСтрока(Ответ) Тогда
					Предупреждение(Ответ);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		КонецЕсли; //плотников
	КонецЕсли;


КонецПроцедуры

// как в реализации
Процедура КоманднаяПанельТоварыВыполнитьСоответствиеТоварыАдреса(Кнопка)
	
	Если ТоварыАдресноеХранение.Количество()=0 тогда
		Предупреждение("Не заполнена таблица ""Адресное хранение"".");
		возврат;
	КонецЕсли;
	
	Если ЭтоНовый() или ЭтотОбъект.Модифицированность() тогда
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос("Перед выполнением обработки требуется записать документ. Выполнить?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Предупреждение("Обработка отменена!", 10);
		    Возврат;
		иначе
			ЭтотОбъект.Записать();
		КонецЕсли;
	КонецЕсли;

// +АЧ 19.08.2015 Если товаров нет - берем из адресов.
Если (Товары.Количество()=0) Тогда 
// Заполнить товары

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПеремещениеТоваровТоварыАдресноеХранение.Номенклатура,
	                      |	ПеремещениеТоваровТоварыАдресноеХранение.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	                      |	ПеремещениеТоваровТоварыАдресноеХранение.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмеренияМест,
	                      |	СУММА(ПеремещениеТоваровТоварыАдресноеХранение.Количество) КАК Количество,
	                      |	СУММА(ПеремещениеТоваровТоварыАдресноеХранение.Количество) КАК КоличествоМест,
	                      |	ПеремещениеТоваровТоварыАдресноеХранение.Склад
	                      |ИЗ
	                      |	Документ.ПеремещениеТоваров.ТоварыАдресноеХранение КАК ПеремещениеТоваровТоварыАдресноеХранение
	                      |ГДЕ
	                      |	ПеремещениеТоваровТоварыАдресноеХранение.Ссылка = &Ссылка
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ПеремещениеТоваровТоварыАдресноеХранение.Номенклатура.ЕдиницаХраненияОстатков,
	                      |	ПеремещениеТоваровТоварыАдресноеХранение.Склад,
	                      |	ПеремещениеТоваровТоварыАдресноеХранение.Номенклатура,
	                      |	ПеремещениеТоваровТоварыАдресноеХранение.Номенклатура.ЕдиницаХраненияОстатков");
						  
						  
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Выб = Запрос.Выполнить().Выгрузить();
	
	Для каждого Строка из Выб Цикл
		СтрУ = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрУ,Строка);
		СтрУ.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		СтрУ.Качество = Справочники.Качество.Новый;
		//РассчитатьКоличествоТабЧасти(СтрУ,ЭтотОбъект);
		СтрУ.Коэффициент = 1;
	КонецЦикла;
	
	Склад8000_0 = Справочники.Склады.НайтиПоКоду("01924"); // 8000-0
	
	Если СкладПолучатель = Склад8000_0 и не ЗначениеЗаполнено(ВнутреннийЗаказ) Тогда
		СоздатьвнутреннийЗаказ(Склад8000_0);
	КонецЕсли;
	
	Возврат; //все заполнили из Адресов
КонецЕсли;
// 

Если ( Товары.Количество()>0 ) тогда //склейка по товарам и складам - 
Запрос = Новый Запрос;

//+++ 10.04.2013 - берем сразу из ТабЧастей! - быстрее и рабтоает даже если документ не записан!
  Запрос.Текст = "ВЫБРАТЬ
                 |	ВТ_А.Номенклатура КАК Номенклатура,
                 |	ВТ_А.Количество КАК Количество,
				 |	ВТ_А.Склад КАК Склад
                 |ПОМЕСТИТЬ ВТ_А
                 |ИЗ
                 |	&ВТ_А КАК ВТ_А
                 |;
                 |
                 |////////////////////////////////////////////////////////////////////////////////
                 |ВЫБРАТЬ
                 |	ВТ_Т.Количество КАК Количество,
                 |	ВТ_Т.Номенклатура КАК Номенклатура,
                 |	ВТ_Т.Склад КАК Склад,
                 |	ВТ_Т.НомерСтроки КАК НомерСтроки
                 |ПОМЕСТИТЬ ВТ_Т
                 |ИЗ
                 |	&ВТ_Т КАК ВТ_Т
                 |;
                 |
                 |////////////////////////////////////////////////////////////////////////////////
                 |ВЫБРАТЬ РАЗЛИЧНЫЕ
                 |	ЕСТЬNULL(ВТ_Т.Номенклатура, ВТ_А.Номенклатура) КАК Номенклатура,
                 |	ЕСТЬNULL(ВТ_Т.НомерСтроки, 0) КАК НомерСтрокиТ,
                 |	ЕСТЬNULL(ВТ_Т.Склад,ВТ_А.Склад) КАК СкладТ,
                 |	ЕСТЬNULL(ВТ_Т.Количество, 0) КАК КоличествоТ,
                 |	ЕСТЬNULL(ВТ_А.Количество, 0) КАК КоличествоА
                 |ИЗ
                 |	ВТ_А КАК ВТ_А
                 |		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
                 |			ВТ_Т1.Количество КАК Количество,
                 |			ВТ_Т1.Номенклатура КАК Номенклатура,
                 |			ВТ_Т1.Склад КАК Склад,
                 |			ВТ_Т1.НомерСтроки КАК НомерСтроки
                 |		ИЗ
                 |			ВТ_Т КАК ВТ_Т1) КАК ВТ_Т
                 |		ПО ВТ_А.Номенклатура = ВТ_Т.Номенклатура
                |		       И  ВТ_А.Склад = ВТ_Т.Склад
                 |
                 |УПОРЯДОЧИТЬ ПО
                 |	НомерСтрокиТ
                 |ИТОГИ
                 |	МИНИМУМ(НомерСтрокиТ),
                 |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СкладТ),
                 |	СУММА(КоличествоТ),
                 |	МАКСИМУМ(КоличествоА)
                 |ПО
                 |	Номенклатура
                 |АВТОУПОРЯДОЧИВАНИЕ";
 табЗначА = ТоварыАдресноеХранение.Выгрузить();
 табЗначА.Свернуть("Номенклатура, Склад", "Количество");
Запрос.УстановитьПараметр("ВТ_А", табЗначА);

табЗначТ = Товары.Выгрузить();
Запрос.УстановитьПараметр("ВТ_Т", табЗначТ );

Результат = Запрос.Выполнить();
ВыборкаНоменклатура = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

складА = ТоварыАдресноеХранение[0].Склад; // хотя бы 1 строка обязательно есть...

//----------------------осн.цикл----------------------------
Пока ВыборкаНоменклатура.Следующий() Цикл

	ВсегоТовараТ = ВыборкаНоменклатура.КоличествоТ; // всего со всех складов!
	ВсегоТовараA = ВыборкаНоменклатура.КоличествоА; // всего по адресам 5000
	КолТА=0;
	ВыборкаСклады = ВыборкаНоменклатура.Выбрать();
	// -------------внутренний цикл по строкам Складов-----------
	Пока ВыборкаСклады.Следующий() Цикл
		КолТ = ВыборкаСклады.КоличествоТ; // Количество товара, отгружаемого со СкладаТ
		
	//    2-0) СкладT=СкладА  - ничего не исправляем... ошибка количества - обнаружится при проверка после полного цикла...
		Если ВыборкаСклады.СкладТ = складА тогда 
			    ВсегоТовараТ = ВсегоТовараТ - КолТ;
				ВсегоТовараA = ВсегоТовараA - КолТ; // остаток "нераспределенного" количества адр.хранения также уменьшается!
				продолжить; // склад уже 5000...
			КонецЕсли;
			Если ВсегоТовараA <=0 тогда // все кол-во по адресам пере-проверено
				Прервать;
			КонецЕсли;	
			Если ВыборкаСклады.НомерСтрокиТ=0 тогда
				Сообщить("В Таб.части ""Адресное хранение"" есть номенклатура: "+строка(ВыборкаСклады.Номенклатура.Код)+" - "+строка(ВыборкаСклады.Номенклатура)+"- которой нет в Таб.Части ""Товары""!",СтатусСообщения.Внимание );
				Продолжить;
			КонецЕсли;
			
	стрТов = Товары[ВыборкаСклады.НомерСтрокиТ-1];
		//-----------проверка условий изменения склада и количества--------------------
//    2а) КолА>КолТ и СкладT<>СкладА  -> СкладТ = 5000 
	Если ВсегоТовараA>=КолТ тогда  
	
	сообщить("В строке № "+строка(ВыборкаСклады.НомерСтрокиТ)+" - изменен склад "+строка(стрТов.Склад)+" на "+строка(СкладА), СтатусСообщения.Информация);
	стрТов.Склад = СкладА;
	
//    2б) КолА<КолТ  и СкладT<>СкладА  -> меняем количество в строке КолТ=КолТ-КолА на складе СкладT
//					   и добавляем такую же строку, с параметрами Склад = 5000, Количество=КолА 
	ИначеЕсли ВсегоТовараA<КолТ тогда
		
		КолТА=КолТА + (КолТ-ВсегоТовараA); // сумма расхождений
		
		  сообщить("В строке № "+строка(ВыборкаСклады.НомерСтрокиТ)+" - изменено количество: "+строка(КолТ)+" на "+строка(КолТ-ВсегоТовараA)+" и пересчитаны сумма и сумма НДС.", СтатусСообщения.Информация);
	      стрТов.Количество = (КолТ-ВсегоТовараA); // разность на том же складе!
		  
		  РассчитатьСуммуТабЧасти(стрТов, ЭтотОбъект); //+++ 10.04.2013  - пересчет сумм обязателен!
		  РассчитатьСуммуНДСТабЧасти(стрТов, ЭтотОбъект);

		  КолТ = ВсегоТовараA;
		  
		  стрТов2 =Товары.Добавить();
		  ЗаполнитьЗначенияСвойств(стрТов2, стрТов); // все как в строке тов
		  стрТов2.Склад = складА;//на 5000 будет количество: ВсегоТовараA 
		  стрТов2.Количество = ВсегоТовараA;
		  РассчитатьСуммуТабЧасти(стрТов2, ЭтотОбъект); //+++ 10.04.2013  - пересчет сумм обязателен!
		  РассчитатьСуммуНДСТабЧасти(стрТов2, ЭтотОбъект);
		  сообщить("Добавлена новая строка № "+строка(стрТов2.НомерСтроки)+" количество ="+строка(ВсегоТовараA)+", склад = "+строка(складА), СтатусСообщения.Информация);
	  КонецЕсли;
	  
	    ВсегоТовараТ = ВсегоТовараТ - КолТ;
		ВсегоТовараA = ВсегоТовараA - КолТ; // остаток "нераспределенного" количества адр.хранения также уменьшается!
	КонецЦикла;
	
	Если КолТА<>0 или ВсегоТовараA<>0 тогда
	
		попытка
			стрТов = Товары[ВыборкаНоменклатура.НомерСтрокиТ-1];
			Если Вопрос("Хотите изменить количество в ТЧ ""Товары"" 
					    |по товару: "+строка(ВыборкаНоменклатура.Номенклатура.Код)+" "+строка(ВыборкаНоменклатура.Номенклатура)+"
				        | c прежнего: "+строка(стрТов.Количество)+" шт. на новое: "+Строка(стрТов.Количество-КолТА+ВсегоТовараA)+" шт.?", РежимДиалогаВопрос.ДаНет, 10, КодВозвратаДиалога.Нет)=КодВозвратаДиалога.Да тогда
				стрТов.Количество = стрТов.Количество - (КолТА-ВсегоТовараA);
				стрТов.КоличествоМест = стрТов.Количество;
			    РассчитатьСуммуТабЧасти(стрТов2, ЭтотОбъект); //+++ 10.04.2013  - пересчет сумм обязателен!
				РассчитатьСуммуНДСТабЧасти(стрТов2, ЭтотОбъект);
				Сообщить("Расхождение по товару: "+строка(ВыборкаНоменклатура.Номенклатура.Код)+" по складу: "+строка(СкладА)+" изменено на "+Строка(-КолТА+ВсегоТовараA)+" шт.", СтатусСообщения.Информация);
			Иначе
				Сообщить("Есть расхождение по товару: "+строка(ВыборкаНоменклатура.Номенклатура.Код)+" по количеству! По складу: "+строка(СкладА)+" Товары - Адреса = "+Строка(КолТА-ВсегоТовараA)+" шт.", СтатусСообщения.Внимание);
			КонецЕсли;
		исключение // нет товара в ТЧ Товары
		КонецПопытки;
		
	КонецЕсли;

КонецЦикла;

//+++ 20.01.2014 - свертка по всем полям требуется чтобы их "не потерять"
Товары.Свернуть("Номенклатура, Склад, Цена, Качество, Коэффициент, ЕдиницаИзмерения, ЕдиницаИзмеренияМест, СпособСписанияОстаткаТоваров, ДокументРезерва, ХарактеристикаНоменклатуры, СерияНоменклатуры",
"Количество, КоличествоМест, Вес");   //Сумма, СуммаНДС, 
КонецЕсли;

Предупреждение("Обработка выполнена", 10);
	
КонецПроцедуры

Процедура ТоварыАдресноеХранениеАдресХраненияПриИзменении(Элемент)
	
	текСтр = ЭлементыФормы.ТоварыАдресноеХранение.ТекущиеДанные;
	текСтр.Склад = текСтр.АдресХранения.Владелец; // Склад и АдресХранения.Склад всегда должны быть одинаковые!
	
КонецПроцедуры

Процедура СоздатьВнутреннийЗаказ(Склад)
	
	ОбъектВЗ = Документы.ВнутреннийЗаказ.СоздатьДокумент();
	ЗаполнитьШапкуДокумента(ОбъектВЗ,глТекущийПользователь);
	ОбъектВЗ.Заказчик = Склад;
	ОбъектВЗ.ВидЗаказа = Перечисления.ВидыВнутреннегоЗаказа.НаСклад;
	
	Для каждого Строка из Товары Цикл
		СтрУ = ОбъектВЗ.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрУ,строка);
	КонеЦЦИкла;
	
	Попытка 
		ОбъектВЗ.дата = Дата-1;
		ОбъектВЗ.Записать(РежимЗаписиДокумента.Проведение);
		ВнутреннийЗаказ = ОбъектВЗ.Ссылка;
	Исключение
		Предупреждение("Не создался внутренний заказ !!!");
	КонецПопытки;
	
	УстановитьВидимость();
КонецПроцедуры

Процедура ПодразделениеКомпанииПриИзменении(Элемент)
	УстановитьНомерДокумента(ЭтотОбъект);
КонецПроцедуры

Процедура КоманднаяПанельАдресноеХранениеИзТоваров(Кнопка)
	
	Если ЭтоНовый() или ЭтотОбъект.Модифицированность() тогда
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос("Перед выполнением обработки требуется записать документ. Выполнить?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Предупреждение("Обработка отменена!", 10);
		    Возврат;
		иначе
			ЭтотОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если ТоварыАдресноеХранение.Количество()>0 тогда
		Если Вопрос("Таблица ""Адреса хранения"" не пустая!
			|Очистить таблицу перед заполненением?", РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да тогда
		ТоварыАдресноеХранение.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ПеремещениеТоваровТовары.Номенклатура,
	                |	СУММА(ПеремещениеТоваровТовары.Количество) КАК Количество,
	                |	ПеремещениеТоваровТовары.Склад
	                |ИЗ
	                |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	                |ГДЕ
	                |	ПеремещениеТоваровТовары.Склад.АдресноеХранение
	                |	И ПеремещениеТоваровТовары.Ссылка = &Ссылка
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ПеремещениеТоваровТовары.Номенклатура,
	                |	ПеремещениеТоваровТовары.Склад";
	 
	 Запрос.УстановитьПараметр("Ссылка", Ссылка);
	 
	 Результат = Запрос.Выполнить();
	 ТоварыАдресноеХранение.Загрузить(Результат.Выгрузить());
	 Если ТоварыАдресноеХранение.Количество()=0 тогда
		 Предупреждение("Нет складов адресного хранения в таблице ""Товары"".",30);
	 КонецЕсли;
	 
КонецПроцедуры

//13.04.2016 - для Питера

Процедура КоманднаяПанельТоварыСортироватьПоНазванию1(Кнопка)
	СортНазв(1);
КонецПроцедуры

Процедура КоманднаяПанельТоварыСортироватьПоНазванию2(Кнопка)
	СортНазв(2);
КонецПроцедуры

процедура СортНазв(типСортировки = 1)
	ТабЗнач = Товары.Выгрузить();
	ТабЗнач.Колонки.Добавить("НазваниеТовара");
	для каждого стр1 из ТабЗнач цикл
		стр1.НазваниеТовара = стр1.Номенклатура.НаименованиеПолное;
	КонецЦикла;
	ТабЗнач.Сортировать("НазваниеТовара"+?(типСортировки%2 = 0, " УБЫВ", "") ); 
	Товары.Загрузить( ТабЗнач );
КонецПроцедуры
//////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары         = ЭлементыФормы.Товары.Колонки;
мКолонкиВозвратнаяТара = ЭлементыФормы.ВозвратнаяТара.Колонки;
