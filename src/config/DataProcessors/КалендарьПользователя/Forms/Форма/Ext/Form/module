
// Список значений, содержащий список истории отборов с параметрами отборов
Перем мСписокИсторииОтбора;

Перем мДокументыОснования;

Перем мСписокДокументовДобавления;

Перем мМассивЗначенийБыстрогоСобытия;

Перем мТаблицаЯчеекИДатНедели;

Перем мСписокМесяцевВыбора;

Перем мДатаКалендаря;

Перем мБылоПервоеЗаполнениеНедели;

Перем мИмяТекущейОбластиДвойногоДня;

Перем мИмяТекущейОбластиДня;

Перем мБиблиотекаКартинокДокумент;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура обрабатывает событие перетаскивания в поле календаря режима День и Неделя.
//
Процедура ПолеКалендаряПеретаскиваниеОбщее(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ВыбраннаяДата, Неделя = Ложь)
	
	Если Неделя Тогда
		Область = ЭлементыФормы.ПолеТабличногоДокументаНеделя.ТекущаяОбласть;
	Иначе
		Если ОтображатьЗаказы Тогда
			Область = ЭлементыФормы.ПолеТабличногоДокументаДень.ТекущаяОбласть;
		Иначе
			Область = ЭлементыФормы.ПолеТабличногоДокументаДеньВторой.ТекущаяОбласть;
		КонецЕсли;
	КонецЕсли; 
	
	Если ТипЗнч(Область.Расшифровка) <> Тип("ДокументСсылка.Событие") Тогда
		Возврат;
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
	НовоеНачалоСобытия    = ВыбраннаяДата + (Область.Расшифровка.НачалоСобытия - НачалоДня(Область.Расшифровка.НачалоСобытия));
	НовоеОкончаниеСобытия = ВыбраннаяДата + (Область.Расшифровка.ОкончаниеСобытия - НачалоДня(Область.Расшифровка.ОкончаниеСобытия));
	
	Если НовоеНачалоСобытия = Область.Расшифровка.НачалоСобытия
	   И НовоеОкончаниеСобытия = Область.Расшифровка.ОкончаниеСобытия Тогда
		Возврат;
	КонецЕсли; 
	
	Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование Тогда
		Объект = Область.Расшифровка.Скопировать();
		Объект.Дата = ТекущаяДата();
	Иначе
		Объект = Область.Расшифровка.ПолучитьОбъект();
	КонецЕсли; 
	
	Объект.НачалоСобытия    = НовоеНачалоСобытия;
	Объект.ОкончаниеСобытия = НовоеОкончаниеСобытия;
	Попытка
		Объект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		СообщитьОбОшибке(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ЗаписьДокументаСобытие();
	
КонецПроцедуры

// Процедура обрабатывает событие проверки перетаскивания в поле табличного документа режима День и Двойной день.
//
Процедура ПолеТабличногоДокументаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)

	Если ТипЗнч(ПараметрыПеретаскивания.Значение.ТекущаяОбласть.Расшифровка) <> Тип("ДокументСсылка.Событие") 
	 ИЛИ Область.Низ > 48 Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;

КонецПроцедуры

// Процедура обрабатывает событие начала перетаскивания в поле табличного документа режима День и Двойной день.
//
Процедура ПолеТабличногоДокументаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)

	Элемент.ТолькоПросмотр = Ложь;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.КопированиеИПеремещение;
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;

КонецПроцедуры

// Процедура обрабатывает событие перетаскивания в поле табличного документа режима День и Двойной день.
//
Процедура ПолеТабличногоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область, ДваДня = Ложь)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение.ТекущаяОбласть.Расшифровка) <> Тип("ДокументСсылка.Событие") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	НовоеНачалоСобытия    = ОпределитьДатыОбластиДня(Область, Истина);
	НовоеОкончаниеСобытия = ОпределитьДатыОбластиДня(Область, Ложь);
	Если ДваДня И Область.Лево > 40 Тогда
		НовоеНачалоСобытия    = НовоеНачалоСобытия + 60*60*24;
		НовоеОкончаниеСобытия = НовоеОкончаниеСобытия + 60*60*24;
	КонецЕсли; 
	
	Если НовоеНачалоСобытия = ПараметрыПеретаскивания.Значение.ТекущаяОбласть.Расшифровка.НачалоСобытия
	   И НовоеОкончаниеСобытия = ПараметрыПеретаскивания.Значение.ТекущаяОбласть.Расшифровка.ОкончаниеСобытия Тогда
		Возврат;
	КонецЕсли; 
	
	Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование Тогда
		Объект = ПараметрыПеретаскивания.Значение.ТекущаяОбласть.Расшифровка.Скопировать();
		Объект.Дата = ТекущаяДата();
	Иначе
		Объект = ПараметрыПеретаскивания.Значение.ТекущаяОбласть.Расшифровка.ПолучитьОбъект();
	КонецЕсли; 
	
	Объект.НачалоСобытия    = НовоеНачалоСобытия;
	Объект.ОкончаниеСобытия = НовоеОкончаниеСобытия;
	Попытка
		Объект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		СообщитьОбОшибке(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ЗаписьДокументаСобытие();
	Элемент.ТекущаяОбласть = Область;
	
КонецПроцедуры

// Процедура обрабатывает событие записи документа Событие из календаря пользователя
//
Процедура ЗаписьДокументаСобытие()

	ОбновитьСписок[0]  = Истина;
	ОбновитьСписок[1]  = Ложь;
	
	ОбновитьМесяц[0]  = Истина;
	ОбновитьМесяц[2]  = Истина;
	
	ОбновитьНеделю[0] = Истина;
	ОбновитьНеделю[2] = Истина;
	
	ОбновитьДень[0]   = Истина;
	ОбновитьДень[2]   = Истина;
	
	ОбновитьИнформациюНаФорме();

КонецПроцедуры

// Процедура выполняется по нажатию на одну из кнопок подменю
// кнопки ИсторияОтборов командной панели КоманднаяПанельСписка.
// 
// Параметры
//  Кнопка - Кнопка командной панели, по нажатию на которую вызывается данная процедура
//
// Возвращаемые значения
//  НЕТ
Процедура ОбработкаИсторииОтбора(Кнопка)

	СтарыйОтборКонтрагент = СтруктураОтборов.Получить("Контрагент");
	
	ИндексСпискаЗначений = Число(Кнопка.Имя);
	
	Если (ИндексСпискаЗначений + 1) > мСписокИсторииОтбора.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	// Очистим отборы
	Для каждого ЭлементСоответствия Из СтруктураОтборов Цикл
		Если ЭлементСоответствия.Ключ = "Пользователь" Тогда
			Продолжить;
		КонецЕсли;
		СтруктураОтборов.Удалить(ЭлементСоответствия.Ключ);
	КонецЦикла; 
	
	ЗначениеЭлементаСпискаЗначений = мСписокИсторииОтбора[ИндексСпискаЗначений].Значение;
	Для каждого ЭлементСтруктуры Из ЗначениеЭлементаСпискаЗначений Цикл
		МассивОтбора = Новый Массив;
		МассивОтбора.Добавить(ЭлементСтруктуры.Значение[0]);
		Если ЭлементСтруктуры.Значение[0] = ВидСравнения.Интервал
		 ИЛИ ЭлементСтруктуры.Значение[0] = ВидСравнения.ИнтервалВключаяГраницы
		 ИЛИ ЭлементСтруктуры.Значение[0] = ВидСравнения.ИнтервалВключаяНачало
		 ИЛИ ЭлементСтруктуры.Значение[0] = ВидСравнения.ИнтервалВключаяОкончание Тогда
			МассивОтбора.Добавить(ЭлементСтруктуры.Значение[2]);
			МассивОтбора.Добавить(ЭлементСтруктуры.Значение[3]);
		Иначе
			МассивОтбора.Добавить(ЭлементСтруктуры.Значение[1]);
		КонецЕсли;
		СтруктураОтборов.Вставить(ЭлементСтруктуры.Ключ, МассивОтбора);
	КонецЦикла;
	
	мФормаИндикации.Открыть();
	
	ОбновитьЗаказыСобытия(СтарыйОтборКонтрагент = СтруктураОтборов.Получить("Контрагент"));
	
	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
	СостояниеКнопокСнятияОтбора();
	СостояниеКнопкиОтбораПоТекущемуЗначению();

КонецПроцедуры

// Процедура формирует строковое представление отбора, для записи в историю отборов.
// 
// Параметры
//  СтрокаОтбора - Строка, строковое представление отбора
//  ЭлементОтбора - Массив, массив парметров и значений отбора
//
// Возвращаемые значения
//  НЕТ
Процедура ДописатьСтрокуОтбора(СтрокаОтбора, ЭлементОтбора)

	Если НЕ ПустаяСтрока(СтрокаОтбора) Тогда
		СтрокаОтбора = СтрокаОтбора + ", ";
	КонецЕсли; 
	Если ЭлементОтбора.Значение[0] = ВидСравнения.Равно Тогда
		СтрокаОтбора = СтрокаОтбора + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " = "+ СокрЛП(Строка(ЭлементОтбора.Значение[1]));
	ИначеЕсли ЭлементОтбора.Значение[0] = ВидСравнения.НеРавно Тогда
		СтрокаОтбора = СтрокаОтбора + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " <> "+ СокрЛП(Строка(ЭлементОтбора.Значение[1]));
	ИначеЕсли ЭлементОтбора.Значение[0] = ВидСравнения.ВСписке Тогда
		СтрокаСписка = "";
		Для каждого ЭлементСписка Из ЭлементОтбора.Значение[1] Цикл
			Если НЕ ПустаяСтрока(СтрокаСписка) Тогда
				СтрокаСписка = СтрокаСписка + "; ";
			КонецЕсли; 
			СтрокаСписка = СтрокаСписка + СокрЛП(Строка(ЭлементСписка.Значение));
		КонецЦикла; 
		СтрокаОтбора = СтрокаОтбора + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " в списке "+ СтрокаСписка;
	ИначеЕсли ЭлементОтбора.Значение[0] = ВидСравнения.НеВСписке Тогда
		СтрокаСписка = "";
		Для каждого ЭлементСписка Из ЭлементОтбора.Значение[1] Цикл
			Если НЕ ПустаяСтрока(СтрокаСписка) Тогда
				СтрокаСписка = СтрокаСписка + "; ";
			КонецЕсли; 
			СтрокаСписка = СтрокаСписка + СокрЛП(Строка(ЭлементСписка.Значение));
		КонецЦикла; 
		СтрокаОтбора = СтрокаОтбора + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " не в списке "+ СтрокаСписка;
	ИначеЕсли ЭлементОтбора.Значение[0] = ВидСравнения.Больше Тогда
		СтрокаОтбора = СтрокаОтбора + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " > "+ СокрЛП(Строка(ЭлементОтбора.Значение[1]));
	ИначеЕсли ЭлементОтбора.Значение[0] = ВидСравнения.БольшеИлиРавно Тогда
		СтрокаОтбора = СтрокаОтбора + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " >= "+ СокрЛП(Строка(ЭлементОтбора.Значение[1]));
	ИначеЕсли ЭлементОтбора.Значение[0] = ВидСравнения.Меньше Тогда
		СтрокаОтбора = СтрокаОтбора + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " < "+ СокрЛП(Строка(ЭлементОтбора.Значение[1]));
	ИначеЕсли ЭлементОтбора.Значение[0] = ВидСравнения.МеньшеИлиРавно Тогда
		СтрокаОтбора = СтрокаОтбора + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " <= "+ СокрЛП(Строка(ЭлементОтбора.Значение[1]));
	ИначеЕсли ЭлементОтбора.Значение[0] = ВидСравнения.Интервал Тогда
		СтрокаОтбора = СтрокаОтбора + СокрЛП(Строка(ЭлементОтбора.Значение[1])) + " < " + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " < "+ СокрЛП(Строка(ЭлементОтбора.Значение[2]));
	ИначеЕсли ЭлементОтбора.Значение[0] = ВидСравнения.ИнтервалВключаяГраницы Тогда
		СтрокаОтбора = СтрокаОтбора + СокрЛП(Строка(ЭлементОтбора.Значение[1])) + " <= " + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " <= "+ СокрЛП(Строка(ЭлементОтбора.Значение[2]));
	ИначеЕсли ЭлементОтбора.Значение[0] = ВидСравнения.ИнтервалВключаяНачало Тогда
		СтрокаОтбора = СтрокаОтбора + СокрЛП(Строка(ЭлементОтбора.Значение[1])) + " <= " + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " < "+ СокрЛП(Строка(ЭлементОтбора.Значение[2]));
	ИначеЕсли ЭлементОтбора.Значение[0] = ВидСравнения.ИнтервалВключаяОкончание Тогда
		СтрокаОтбора = СтрокаОтбора + СокрЛП(Строка(ЭлементОтбора.Значение[1])) + " < " + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " <= "+ СокрЛП(Строка(ЭлементОтбора.Значение[2]));
	КонецЕсли; 

КонецПроцедуры

// Процедура проверяет наличие и при необходимости добавляет новый элемент в писок истории отборов.
// 
// Параметры
//  НЕТ
//
// Возвращаемые значения
//  НЕТ
Процедура ДобавитьНовыйОтборВИсторию()

	СтрокаТекущихОтборов = "";
	СтруктураАктуальныхОтборов = Новый Структура;
	
	Для каждого ЭлементОтбора Из СтруктураОтборов Цикл
		Если ЭлементОтбора.Ключ = "Пользователь" Тогда
			Продолжить;
		КонецЕсли; 
		МассивИсторииОтбора = Новый Массив;
		МассивИсторииОтбора.Добавить(ЭлементОтбора.Значение[0]);
		МассивИсторииОтбора.Добавить(ЭлементОтбора.Значение[1]);
		Если ЭлементОтбора.Значение.Количество() = 3 Тогда
			МассивИсторииОтбора.Добавить(ЭлементОтбора.Значение[1]);
			МассивИсторииОтбора.Добавить(ЭлементОтбора.Значение[2]);
		КонецЕсли; 
		МассивИсторииОтбора.Добавить(Истина);
		ДописатьСтрокуОтбора(СтрокаТекущихОтборов, ЭлементОтбора);
		СтруктураАктуальныхОтборов.Вставить(ЭлементОтбора.Ключ, МассивИсторииОтбора);
	КонецЦикла;
	
	Если СтруктураАктуальныхОтборов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	НайденныйЭлементСпискаЗначений = Неопределено;
	Для каждого ЭлементСписка Из мСписокИсторииОтбора Цикл
		Если ЭлементСписка.Представление = СтрокаТекущихОтборов Тогда
			НайденныйЭлементСпискаЗначений = ЭлементСписка;
		КонецЕсли; 
	КонецЦикла;
	
	Если НайденныйЭлементСпискаЗначений = Неопределено Тогда
	
		Если мСписокИсторииОтбора.Количество() > 0 Тогда
			мСписокИсторииОтбора.Вставить(0, СтруктураАктуальныхОтборов, СтрокаТекущихОтборов);
		Иначе
			мСписокИсторииОтбора.Добавить(СтруктураАктуальныхОтборов, СтрокаТекущихОтборов);
		КонецЕсли;
		
		Если мСписокИсторииОтбора.Количество() > 20 Тогда
			ИндУдаляемогоЭлемента = 20;
			Пока 1 = 1 Цикл
				Если (ИндУдаляемогоЭлемента + 1) > мСписокИсторииОтбора.Количество() Тогда
					Прервать;
				КонецЕсли;
				мСписокИсторииОтбора.Удалить(20);
			КонецЦикла; 
		КонецЕсли; 
		
	Иначе
		
		мСписокИсторииОтбора.Сдвинуть(НайденныйЭлементСпискаЗначений, (-мСписокИсторииОтбора.Индекс(НайденныйЭлементСпискаЗначений)));
		
	КонецЕсли; 
	
	СформироватьПодменюПоСпискуАктуальныхОтборов();

КонецПроцедуры

// Процедура формирует кноаки подменю для кнопки ИсторияОтборов командной панели КоманднаяПанельСписка.
// 
// Параметры
//  НЕТ
//
// Возвращаемые значения
//  НЕТ
Процедура СформироватьПодменюПоСпискуАктуальныхОтборов()

	КнопкаПодменю = ЭлементыФормы.КоманднаяПанельСписка.Кнопки.ИсторияОтборов;
	КнопкаПодменю.Кнопки.Очистить();
	КнопкаПодменю1 = ЭлементыФормы.КоманднаяПанельСписка.Кнопки.Подменю.Кнопки.ИсторияОтборов;
	КнопкаПодменю1.Кнопки.Очистить();
	Для каждого ЭлементСписка Из мСписокИсторииОтбора Цикл
		КнопкаПодменю.Кнопки.Добавить(Строка(мСписокИсторииОтбора.Индекс(ЭлементСписка)), ТипКнопкиКоманднойПанели.Действие, ЭлементСписка.Представление, Новый Действие("ОбработкаИсторииОтбора"));
		КнопкаПодменю1.Кнопки.Добавить(Строка(мСписокИсторииОтбора.Индекс(ЭлементСписка)), ТипКнопкиКоманднойПанели.Действие, ЭлементСписка.Представление, Новый Действие("ОбработкаИсторииОтбора"));
	КонецЦикла;

КонецПроцедуры

// Процедура устанавливает доступность кнопки СнятьОтбор
// командной панели формы.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  НЕТ
//
Процедура СостояниеКнопокСнятияОтбора()

	Доступность = Ложь;
	
	Для каждого Отбор Из СтруктураОтборов Цикл
		Если Отбор.Ключ <> "Пользователь" Тогда
			Доступность = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ДатаНач <> Дата("00010101000000") ИЛИ ДатаКон <> Дата("00010101000000") Тогда
		Доступность = Истина;
	КонецЕсли; 
	
	ЭлементыФормы.КоманднаяПанельСписка.Кнопки.СнятьОтбор.Доступность                = Доступность;
	ЭлементыФормы.КоманднаяПанельСписка.Кнопки.Подменю.Кнопки.СнятьОтбор.Доступность = Доступность;
	
КонецПроцедуры

// Функция определяет необходимость вывода строки
// элемента формы События
//
// Параметры
//  Строки - строка таблицы значений
//  СписокПроверяемыхПолей - Список значений, поля, которые надо проверять
//
// Возвращаемое значение:
//   Булево
//
Функция НужноПоказыватьСтрокуСобытий(Строки, СписокПроверяемыхПолей)

	ЗначениеВозврата = Истина;
	
	Для каждого ЭлементСписка Из СписокПроверяемыхПолей Цикл

		Если ЭлементСписка.Значение = "ТипДокумента" Тогда
			ЗначениеСтроки = ТипЗнч(Строки.Документ);
			Отбор = СтруктураОтборов.Получить(ЭлементСписка.Значение);
			Если Отбор <> Неопределено Тогда
				ВидСравненияОтбора = Отбор[0];
				ЗначениеОтбора = Отбор[1];

				Если НЕ ЗначениеОтбора.СодержитТип(ЗначениеСтроки) Тогда
					ЗначениеВозврата = Ложь;
					Прервать;
				КонецЕсли; 
			КонецЕсли; 
		Иначе
			ЗначениеСтроки = Строки[ЭлементСписка.Значение];
			Отбор = СтруктураОтборов.Получить(ЭлементСписка.Значение);
			Если Отбор <> Неопределено Тогда
				ВидСравненияОтбора = Отбор[0];
				ЗначениеОтбора = Отбор[1];
				Если ВидСравненияОтбора = ВидСравнения.Равно И ЗначениеОтбора <> ЗначениеСтроки Тогда
					ЗначениеВозврата = Ложь;
					Прервать;
				ИначеЕсли ВидСравненияОтбора = ВидСравнения.НеРавно И ЗначениеОтбора = ЗначениеСтроки Тогда
					ЗначениеВозврата = Ложь;
					Прервать;
				ИначеЕсли ВидСравненияОтбора = ВидСравнения.Больше И ЗначениеОтбора >= ЗначениеСтроки Тогда
					ЗначениеВозврата = Ложь;
					Прервать;
				ИначеЕсли ВидСравненияОтбора = ВидСравнения.БольшеИлиРавно И ЗначениеОтбора > ЗначениеСтроки Тогда
					ЗначениеВозврата = Ложь;
					Прервать;
				ИначеЕсли ВидСравненияОтбора = ВидСравнения.Меньше И ЗначениеОтбора <= ЗначениеСтроки Тогда
					ЗначениеВозврата = Ложь;
					Прервать;
				ИначеЕсли ВидСравненияОтбора = ВидСравнения.МеньшеИлиРавно И ЗначениеОтбора < ЗначениеСтроки Тогда
					ЗначениеВозврата = Ложь;
					Прервать;
				ИначеЕсли ВидСравненияОтбора = ВидСравнения.ВСписке И ЗначениеОтбора.НайтиПоЗначению(ЗначениеСтроки) = Неопределено Тогда
					ЗначениеВозврата = Ложь;
					Прервать;
				ИначеЕсли ВидСравненияОтбора = ВидСравнения.НеВСписке И ЗначениеОтбора.НайтиПоЗначению(ЗначениеСтроки) <> Неопределено Тогда
					ЗначениеВозврата = Ложь;
					Прервать;
				ИначеЕсли ВидСравненияОтбора = ВидСравнения.Интервал Тогда
					Если ЗначениеСтроки > Отбор[2] ИЛИ ЗначениеСтроки < Отбор[1] Тогда
						ЗначениеВозврата = Ложь;
						Прервать;
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЦикла; 

	Возврат ЗначениеВозврата;
	
КонецФункции // НужноПоказыватьСтрокуСобытий()

// Процедура заполняет таблицу значений События
//
// Параметры
//  БезЗапроса - Булево, выполнить запрос или нет
//
// Возвращаемое значение:
//  НЕТ
//
Процедура ОбновитьЗаказыСобытия(БезЗапроса = Истина) Экспорт

	мФормаИндикации.КомментарийОбработкиДанных = "Выполняется заполнение списка сделок ...";
	мФормаИндикации.Открыть();
	
	СписокПроверяемыхПолей = Новый СписокЗначений;
	СписокПроверяемыхПолей.Добавить("Важность");
	СписокПроверяемыхПолей.Добавить("Тип");
	СписокПроверяемыхПолей.Добавить("ТипДокумента");
	СписокПроверяемыхПолей.Добавить("Номер");
	СписокПроверяемыхПолей.Добавить("ВидОперации");
	СписокПроверяемыхПолей.Добавить("ДатаСобытия");

	Если НЕ БезЗапроса Тогда
		ЗаполнитьСобытия(ОтображатьЗаказы, ОтображаемыеЗаказы);
	КонецЕсли; 

	ТекущаяСтрокаСобытий = Неопределено;
	Если ЗаказыИСобытияПредставление.Количество() > 0 И ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные <> Неопределено Тогда
		ТекущаяСтрокаСобытий = ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные.Документ;
		ТекущийВид = ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные.ВидОперации;
	КонецЕсли;
	
	ЗаказыИСобытияПредставление.Очистить();
	
	мФормаИндикации.МаксимальноеЗначение = ЗаказыСобытия.Количество();
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	Для каждого Строки Из ЗаказыСобытия Цикл

		мФормаИндикации.Значение = ЗаказыСобытия.Индекс(Строки) + 1;
		
		Если ТипЗнч(Строки.Документ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			
			НоваяСтрока = ЗаказыИСобытияПредставление.Добавить();
			НоваяСтрока.Документ = Строки.Документ;
			Если Строки.ВидОперации = Перечисления.ВидыДействийПоЗаказамПокупателей.ОтгрузкаПоЗаказу Тогда
				ПоДокументу             = Строки.ИтогКоличествоТЧ;
				НоваяСтрока.ДатаСобытия = Строки.ДатаПоступленияОтгрузки;
				НоваяСтрока.Информация  = "Склад: " + СокрЛП(Строки.Склад);
				НоваяСтрока.Тип         = Перечисления.ВходящееИсходящееСобытие.Исходящее;
			Иначе
				Если Строки.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
					ПоДокументу = ?(Строки.КурсВзаиморасчетов = 0, 0, (Строки.СуммаДокумента*Строки.КратностьВзаиморасчетов/Строки.КурсВзаиморасчетов));
				Иначе
					ПоДокументу = Строки.СуммаДокумента;
				КонецЕсли; 
				НоваяСтрока.ДатаСобытия = Строки.ДатаОплаты;
				НоваяСтрока.Информация  = ?(НЕ ЗначениеНеЗаполнено(Строки.СтруктурнаяЕдиница), (?(ТипЗнч(Строки.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета"),"Банковский счет: ", "Касса: ") + СокрЛП(Строки.СтруктурнаяЕдиница)), "" );
				НоваяСтрока.Тип         = Перечисления.ВходящееИсходящееСобытие.Входящее;
			КонецЕсли;
			НоваяСтрока.ДатаДокумента                  = Строки.Дата;
			НоваяСтрока.Состояние                      = ?(ПоДокументу = Строки.Законченность, Перечисления.СостоянияСобытий.Запланировано, Перечисления.СостоянияСобытий.ПустаяСсылка());
			НоваяСтрока.Важность                       = Перечисления.Важность.Средняя;
			НоваяСтрока.Контрагент                     = Строки.Контрагент;
			НоваяСтрока.ВидОперации                    = Строки.ВидОперации;
			НоваяСтрока.ВидДокумента                   = СокрЛП(Строки.ВидОперации);
			НоваяСтрока.Номер                          = СокрЛП(Строки.Номер);
			НоваяСтрока.ВыполненностьВторойЧастиЗаказа = Строки.ВыполненностьВторойЧастиЗаказа;

		ИначеЕсли ТипЗнч(Строки.Документ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			
			НоваяСтрока = ЗаказыИСобытияПредставление.Добавить();
			НоваяСтрока.Документ = Строки.Документ;
			Если Строки.ВидОперации = Перечисления.ВидыДействийПоЗаказамПоставщикам.ПоступлениеПоЗаказу Тогда
				ПоДокументу             = Строки.ИтогКоличествоТЧ;
				НоваяСтрока.ДатаСобытия = Строки.ДатаПоступленияОтгрузки;
				НоваяСтрока.Информация  = "Склад: " + СокрЛП(Строки.Склад);
				НоваяСтрока.Тип                  = Перечисления.ВходящееИсходящееСобытие.Входящее;
				НоваяСтрока.Состояние            = ?(ПоДокументу = Строки.Законченность, Перечисления.СостоянияСобытий.Запланировано, Перечисления.СостоянияСобытий.ПустаяСсылка());
			Иначе
				Если Строки.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
					ПоДокументу = ?(Строки.КурсВзаиморасчетов = 0, 0, (Строки.СуммаДокумента*Строки.КратностьВзаиморасчетов/Строки.КурсВзаиморасчетов));
				Иначе
					ПоДокументу = Строки.СуммаДокумента;
				КонецЕсли; 
				НоваяСтрока.ДатаСобытия = Строки.ДатаОплаты;
				НоваяСтрока.Информация  = ?(НЕ ЗначениеНеЗаполнено(Строки.СтруктурнаяЕдиница), (?(ТипЗнч(Строки.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета"),"Банковский счет: ", "Касса: ") + СокрЛП(Строки.СтруктурнаяЕдиница)), "" );
				НоваяСтрока.Тип                  = Перечисления.ВходящееИсходящееСобытие.Исходящее;
				НоваяСтрока.Состояние            = ?(ПоДокументу = (-1*Строки.Законченность), Перечисления.СостоянияСобытий.Запланировано, Перечисления.СостоянияСобытий.ПустаяСсылка());
			КонецЕсли;
			НоваяСтрока.ДатаДокумента                  = Строки.Дата;
			НоваяСтрока.Важность                       = Перечисления.Важность.Средняя;
			НоваяСтрока.Контрагент                     = Строки.Контрагент;
			НоваяСтрока.ВидОперации                    = Строки.ВидОперации;
			НоваяСтрока.ВидДокумента                   = СокрЛП(Строки.ВидОперации);
			НоваяСтрока.Номер                          = СокрЛП(Строки.Номер);
			НоваяСтрока.ВыполненностьВторойЧастиЗаказа = Строки.ВыполненностьВторойЧастиЗаказа;

		ИначеЕсли ТипЗнч(Строки.Документ) = Тип("ДокументСсылка.Событие") Тогда
			
			НоваяСтрока = ЗаказыИСобытияПредставление.Добавить();
			НоваяСтрока.Документ                       = Строки.Документ;
			НоваяСтрока.Состояние                      = Строки.СостояниеСобытия;
			НоваяСтрока.Важность                       = Строки.Важность;
			НоваяСтрока.Тип                            = Строки.ТипСобытия;
			НоваяСтрока.Информация                     = СокрЛП(Строки.ОписаниеСобытия);
			НоваяСтрока.Контрагент                     = Строки.Контрагент;
			НоваяСтрока.ДатаДокумента                  = Строки.Дата;
			НоваяСтрока.ДатаСобытия                    = Строки.НачалоСобытия;
			НоваяСтрока.ВидОперации                    = Строки.ВидОперации;
			НоваяСтрока.ВидДокумента                   = СокрЛП(Строки.ПредставлениеДокумента);
			НоваяСтрока.Номер                          = СокрЛП(Строки.Номер);
			НоваяСтрока.ВыполненностьВторойЧастиЗаказа = Строки.ВыполненностьВторойЧастиЗаказа;
			
		КонецЕсли; 
	КонецЦикла;

	ИндексСтроки = 0;
	Пока 1 = 1 Цикл
		Если ИндексСтроки > ЗаказыИСобытияПредставление.Количество() - 1 Тогда
			Прервать;
		КонецЕсли;
		Если НЕ НужноПоказыватьСтрокуСобытий(ЗаказыИСобытияПредставление[ИндексСтроки], СписокПроверяемыхПолей) Тогда
			ЗаказыИСобытияПредставление.Удалить(ИндексСтроки);
			Продолжить;
		КонецЕсли;
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла; 

	ЗаказыИСобытияПредставление.Сортировать("ДатаСобытия ВОЗР");

	Если ТекущаяСтрокаСобытий <> Неопределено Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Документ",ТекущаяСтрокаСобытий);
		СтруктураПоиска.Вставить("ВидОперации",ТекущийВид);
		МассивСтрок = ЗаказыИСобытияПредставление.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() > 0 Тогда
			ТекущаяСтрокаСобытий = МассивСтрок[0];
			Если ТекущаяСтрокаСобытий <> Неопределено Тогда
				ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущаяСтрока = ТекущаяСтрокаСобытий;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

// Функция Определяет контрагента текщей строки табличного поля ЗаказыИСобытияПредставление.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  СправочникСсылка.Конрагенты
//
Функция ОпределитьКонтрагента()
	
	Если ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные <> Неопределено И НЕ ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные.Документ.Пустая() Тогда
		Возврат ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные.Документ.Контрагент;
	Иначе
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли; 
	
КонецФункции // ОпределитьКонтрагента()

// Функция Определяет контрагента текщей строки табличного поля СделкиДень.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  СправочникСсылка.Конрагенты
//
Функция ОпределитьКонтрагентаСпискаЗаказовДня()
	
	Если ЭлементыФормы.СделкиДень.ТекущиеДанные <> Неопределено И НЕ ЭлементыФормы.СделкиДень.ТекущиеДанные.Документ.Пустая() Тогда
		Возврат ЭлементыФормы.СделкиДень.ТекущиеДанные.Документ.Контрагент;
	Иначе
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли; 
	
КонецФункции // ОпределитьКонтрагента()

// Процедура устанавливает значение реквизита формы ВыбКонтрагент
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  НЕТ
//
Процедура ОпределитьКонтрагентаФормы()

	ОтборКонтрагент = СтруктураОтборов.Получить("Контрагент");

	Если ОтборКонтрагент = Неопределено Тогда
		ВыбКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
	Иначе
		ВыбКонтрагент = ОтборКонтрагент[1];
	КонецЕсли; 
	
КонецПроцедуры

// Функция определяет список документов, которые можно
//  вводить на основании заданного
//  элемента формы События
//
// Параметры
//  ИмяДокумента - строка имя документа, как оно задано в метаданных
//
// Возвращаемое значение:
//   Список значений
//
Функция НайтиДокументыДляОснования(ИмяДокумента)

	СписокДокументов = Неопределено;

	мДокументыОснования.Свойство(ИмяДокумента, СписокДокументов);
	
	Если ТипЗнч(СписокДокументов) = Тип("СписокЗначений") Тогда
		Возврат СписокДокументов;
	КонецЕсли; 
	
	СписокДокументов = Новый СписокЗначений;
	
	Для каждого Док Из Метаданные.Документы Цикл
		Для каждого Основание Из Док.ВводитсяНаОсновании Цикл
			Если Основание.Имя = ИмяДокумента Тогда
				СписокДокументов.Добавить(Док.Имя, Док.Синоним);
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 

	мДокументыОснования.Вставить(ИмяДокумента, СписокДокументов);
	Возврат СписокДокументов;
	
КонецФункции

// Процедура открывает форму документа, введенного на основании текущего
//
// Параметры
//  Кнопка - кнопка командной панели формы
//
// Возвращаемое значение:
//  НЕТ
//
Процедура ВводНаОсновании(Кнопка)

	Если ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные <> Неопределено И НЕ ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные.Документ.Пустая() Тогда
		
		Док = Новый("ДокументМенеджер."+СокрЛП(Кнопка.Имя));
		Док = Док.СоздатьДокумент();
		Док.Заполнить(ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные.Документ);
		Док.ПолучитьФорму(, ЭтаФорма).Открыть();
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура устанавливает пометку кнопки ОтборПоТекущемуЗначению
// командной панели формы
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  НЕТ
Процедура СостояниеКнопкиОтбораПоТекущемуЗначению()

	Если ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные = Неопределено ИЛИ ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущаяКолонка = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	ТекКолонка = ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущаяКолонка;
	ИмяКолонки = ТекКолонка.Имя;
	КнопкаПанели = ЭлементыФормы.КоманднаяПанельСписка.Кнопки.ОтборПоТекущемуЗначению;
	КнопкаПанели1 = ЭлементыФормы.КоманднаяПанельСписка.Кнопки.Подменю.Кнопки.ОтборПоТекущемуЗначению;

	Если ИмяКолонки = "Картинка" Тогда
		Возврат;
	КонецЕсли; 
	
	ТекЗначение = ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные[ИмяКолонки];

	Если ИмяКолонки = "ДатаДокумента" Тогда
		Если НачалоДня(ТекЗначение) = НачалоДня(ДатаНач) И НачалоДня(ТекЗначение) = НачалоДня(ДатаКон) Тогда
			КнопкаПанели.Пометка = Истина;
			КнопкаПанели1.Пометка = Истина;
		Иначе
			КнопкаПанели.Пометка = Ложь;
			КнопкаПанели1.Пометка = Ложь;
		КонецЕсли;
	ИначеЕсли ИмяКолонки = "ВидДокумента" Тогда
		ЗначениеСоответствия = СтруктураОтборов.Получить("ТипДокумента");
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные.Документ));
		ЗначениеСтроки = Новый ОписаниеТипов(МассивТипов);
		Если ЗначениеСоответствия <> Неопределено И ЗначениеСтроки = ЗначениеСоответствия[1] Тогда
			КнопкаПанели.Пометка = Истина;
			КнопкаПанели1.Пометка = Истина;
		Иначе
			КнопкаПанели.Пометка = Ложь;
			КнопкаПанели1.Пометка = Ложь;
		КонецЕсли; 
	Иначе
		ЗначениеСоответствия = СтруктураОтборов.Получить(ИмяКолонки);
		Если ЗначениеСоответствия <> Неопределено И ЗначениеСоответствия[0] = ВидСравнения.Равно И ТекЗначение = ЗначениеСоответствия[1] Тогда
			КнопкаПанели.Пометка = Истина;
			КнопкаПанели1.Пометка = Истина;
		Иначе
			КнопкаПанели.Пометка = Ложь;
			КнопкаПанели1.Пометка = Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Процедура устанавливает пометку кнопки ОтборПоТекущемуЗначению
// командной панели формы
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  НЕТ
Процедура СостояниеКнопокОтбораПоВидуДокумента()

	ОтборВидДокумента = СтруктураОтборов.Получить("ТипДокумента");

	ЭлементыФормы.КоманднаяПанельСписка.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаВсеДокументы.Пометка    = Ложь;
	ЭлементыФормы.КоманднаяПанельСписка.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаСобытие.Пометка         = Ложь;
	ЭлементыФормы.КоманднаяПанельСписка.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаЗаказПокупателя.Пометка = Ложь;
	ЭлементыФормы.КоманднаяПанельСписка.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаЗаказПоставщику.Пометка = Ложь;
	
	ЭлементыФормы.КоманднаяПанельСписка.Кнопки.Подменю.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаВсеДокументы.Пометка    = Ложь;
	ЭлементыФормы.КоманднаяПанельСписка.Кнопки.Подменю.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаСобытие.Пометка         = Ложь;
	ЭлементыФормы.КоманднаяПанельСписка.Кнопки.Подменю.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаЗаказПокупателя.Пометка = Ложь;
	ЭлементыФормы.КоманднаяПанельСписка.Кнопки.Подменю.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаЗаказПоставщику.Пометка = Ложь;
	
	Если ОтборВидДокумента <> Неопределено Тогда
		ЗначениеОтбора = ОтборВидДокумента[1];
		МассивТипов = ЗначениеОтбора.Типы();
		Если МассивТипов.Количество() = 1 Тогда
			Если МассивТипов[0] = Тип("ДокументСсылка.Событие") Тогда
				ЭлементыФормы.КоманднаяПанельСписка.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаВсеДокументы.Пометка    = Ложь;
				ЭлементыФормы.КоманднаяПанельСписка.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаСобытие.Пометка         = Истина;
				ЭлементыФормы.КоманднаяПанельСписка.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаЗаказПокупателя.Пометка = Ложь;
				ЭлементыФормы.КоманднаяПанельСписка.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаЗаказПоставщику.Пометка = Ложь;
	
				ЭлементыФормы.КоманднаяПанельСписка.Кнопки.Подменю.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаВсеДокументы.Пометка    = Ложь;
				ЭлементыФормы.КоманднаяПанельСписка.Кнопки.Подменю.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаСобытие.Пометка         = Истина;
				ЭлементыФормы.КоманднаяПанельСписка.Кнопки.Подменю.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаЗаказПокупателя.Пометка = Ложь;
				ЭлементыФормы.КоманднаяПанельСписка.Кнопки.Подменю.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаЗаказПоставщику.Пометка = Ложь;
			ИначеЕсли МассивТипов[0] = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				ЭлементыФормы.КоманднаяПанельСписка.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаВсеДокументы.Пометка    = Ложь;
				ЭлементыФормы.КоманднаяПанельСписка.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаСобытие.Пометка         = Ложь;
				ЭлементыФормы.КоманднаяПанельСписка.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаЗаказПокупателя.Пометка = Истина;
				ЭлементыФормы.КоманднаяПанельСписка.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаЗаказПоставщику.Пометка = Ложь;
				
				ЭлементыФормы.КоманднаяПанельСписка.Кнопки.Подменю.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаВсеДокументы.Пометка    = Ложь;
				ЭлементыФормы.КоманднаяПанельСписка.Кнопки.Подменю.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаСобытие.Пометка         = Ложь;
				ЭлементыФормы.КоманднаяПанельСписка.Кнопки.Подменю.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаЗаказПокупателя.Пометка = Истина;
				ЭлементыФормы.КоманднаяПанельСписка.Кнопки.Подменю.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаЗаказПоставщику.Пометка = Ложь;
			ИначеЕсли МассивТипов[0] = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				ЭлементыФормы.КоманднаяПанельСписка.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаВсеДокументы.Пометка    = Ложь;
				ЭлементыФормы.КоманднаяПанельСписка.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаСобытие.Пометка         = Ложь;
				ЭлементыФормы.КоманднаяПанельСписка.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаЗаказПокупателя.Пометка = Ложь;
				ЭлементыФормы.КоманднаяПанельСписка.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаЗаказПоставщику.Пометка = Истина;
				
				ЭлементыФормы.КоманднаяПанельСписка.Кнопки.Подменю.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаВсеДокументы.Пометка    = Ложь;
				ЭлементыФормы.КоманднаяПанельСписка.Кнопки.Подменю.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаСобытие.Пометка         = Ложь;
				ЭлементыФормы.КоманднаяПанельСписка.Кнопки.Подменю.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаЗаказПокупателя.Пометка = Ложь;
				ЭлементыФормы.КоманднаяПанельСписка.Кнопки.Подменю.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаЗаказПоставщику.Пометка = Истина;
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		ЭлементыФормы.КоманднаяПанельСписка.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаВсеДокументы.Пометка    = Истина;
		ЭлементыФормы.КоманднаяПанельСписка.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаСобытие.Пометка         = Ложь;
		ЭлементыФормы.КоманднаяПанельСписка.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаЗаказПокупателя.Пометка = Ложь;
		ЭлементыФормы.КоманднаяПанельСписка.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаЗаказПоставщику.Пометка = Ложь;
	
		ЭлементыФормы.КоманднаяПанельСписка.Кнопки.Подменю.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаВсеДокументы.Пометка    = Истина;
		ЭлементыФормы.КоманднаяПанельСписка.Кнопки.Подменю.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаСобытие.Пометка         = Ложь;
		ЭлементыФормы.КоманднаяПанельСписка.Кнопки.Подменю.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаЗаказПокупателя.Пометка = Ложь;
		ЭлементыФормы.КоманднаяПанельСписка.Кнопки.Подменю.Кнопки.ОтборПоВидуДокумента.Кнопки.ОтборПоВидуДокументаЗаказПоставщику.Пометка = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

// Функция возвращает наименование дня недели по его номеру
//
// Параметры
//  НомерДняНедели - Число, номер дня недели
//
// Возвращаемое значение:
//   Строка, наименование дня недели
//
Функция ОпределитьДеньНедели(НомерДняНедели)

	Если НомерДняНедели = 1 Тогда
		Возврат "Понедельник";
	ИначеЕсли НомерДняНедели = 2 Тогда
		Возврат "Вторник";
	ИначеЕсли НомерДняНедели = 3 Тогда
		Возврат "Среда";
	ИначеЕсли НомерДняНедели = 4 Тогда
		Возврат "Четверг";
	ИначеЕсли НомерДняНедели = 5 Тогда
		Возврат "Пятница";
	ИначеЕсли НомерДняНедели = 6 Тогда
		Возврат "Суббота";
	Иначе
		Возврат "Воскресенье";
	КонецЕсли;

КонецФункции

// Процедура формирует строковое представление текущего значения интервалов
//  календаря пользователя
//
// Параметры
//  НЕТ
//
// Возвращаемое значение
//  НЕТ
Процедура СформироватьПредставлениеДня()

	СтрокаДня = Формат(ДатаКалендаря, "ДЛФ=DD") + ", " + ОпределитьДеньНедели(ДеньНедели(ДатаКалендаря));
	СтрокаМесяца = Формат(ДатаКалендаря, "ДФ=ММММ") + ", " + Формат(ДатаКалендаря, "ДФ=yyyy") + " г.";
	СтрокаНедели = Формат(НачалоНедели(ДатаКалендаря), "ДФ='dd MMMM yyyy'") + " г. - " + Формат(КонецНедели(ДатаКалендаря), "ДФ='dd MMMM yyyy'") + " г.";
	
	ЭлементыФормы.НадписьДня.Значение = СтрокаДня;
	ЭлементыФормы.НадписьМесяца.Значение = СтрокаМесяца;
	ЭлементыФормы.НадписьНедели.Значение = СтрокаНедели;

	Если ЭлементыФормы.ПанельФормы.ТекущаяСтраница.Имя = "Список" Тогда
		Если ДатаНач = Дата("00010101000000") И ДатаКон = Дата("00010101000000") Тогда
			ЭтаФорма.Заголовок = "Календарь пользователя: " + СокрЛП(ПользовательКалендаря.Наименование);
		Иначе
			ЭтаФорма.Заголовок = "Календарь пользователя: " + СокрЛП(ПредставлениеПериода(ДатаНач, ДатаКон)) + ", " + СокрЛП(ПользовательКалендаря.Наименование);
		КонецЕсли; 
	ИначеЕсли ЭлементыФормы.ПанельФормы.ТекущаяСтраница.Имя = "День" Тогда
		ЭтаФорма.Заголовок = "Календарь пользователя: " + "день (" + СтрокаДня + "), " +  СокрЛП(ПользовательКалендаря.Наименование);
	ИначеЕсли ЭлементыФормы.ПанельФормы.ТекущаяСтраница.Имя = "Неделя" Тогда
		ЭтаФорма.Заголовок = "Календарь пользователя: " + "неделя (" + СтрокаНедели + "), " +  СокрЛП(ПользовательКалендаря.Наименование);
	ИначеЕсли ЭлементыФормы.ПанельФормы.ТекущаяСтраница.Имя = "Месяц" Тогда
		ЭтаФорма.Заголовок = "Календарь пользователя: " + "месяц (" + СтрокаМесяца + "), " +  СокрЛП(ПользовательКалендаря.Наименование);
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает номер строки в поле табличного документа
//  для вывода События по его дате (начала или конца)
//
// Параметры
//  Часы - Строка, часы даты
//  Минуты - Строка, минуты даты
//  Дата - Дата, текущее значение даты для определения
//  Начало - Булево, признак начала или окончания периода
//  ДатаСравнения - Дата, дата с которой сравнивается значение исходной даты
//
// Возвращаемое значение:
//   Число - номер строки в поле табличного документа
//
Функция ВозвратитьНомерСтроки(Часы, Минуты, Дата, Начало, ДатаСравнения)

	Если ПустаяСтрока(Часы) Тогда
		Часы = 0;
	Иначе
		Часы = Число(Часы);
	КонецЕсли; 

	Если ПустаяСтрока(Минуты) Тогда
		Минуты = 0;
	Иначе
		Минуты = Число(Минуты);
	КонецЕсли; 
	
	Если Начало Тогда
		Если Дата < НачалоДня(ДатаСравнения) Тогда
			Возврат 1;
		Иначе
			Если Минуты < 30 Тогда
				Если Минуты = 0 Тогда
					Если Часы = 0 Тогда
						Возврат 1;
					Иначе
						Возврат (Часы * 2 + 1);
					КонецЕсли; 
				Иначе
					Возврат (Часы * 2 + 1);
				КонецЕсли; 
			Иначе
				Если Часы = 23 Тогда
					Возврат 48;
				Иначе
					Возврат (Часы * 2 + 2);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли; 
	Иначе
		Если Дата > КонецДня(ДатаСравнения) Тогда
			Возврат 48;
		Иначе
			Если Минуты = 0 Тогда
				Если Часы = 0 Тогда
					Возврат 1;
				Иначе
					Возврат (Часы * 2);
				КонецЕсли; 
			ИначеЕсли Минуты <= 30 Тогда
				Возврат (Часы * 2 + 1);
			Иначе
				Если Часы = 23 Тогда
					Возврат 48;
				Иначе
					Возврат (Часы * 2 + 2);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;

КонецФункции

// Функция возвращает картинку вида События по значению вида
//
// Параметры
//  ВидСобытия - перчисление, вид события
//
// Возвращаемое значение:
//   Картинка - картинка вида события
//
Функция ОпределитьКартинку(ВидСобытия)

	Если ВидСобытия = Перечисления.ВидыСобытий.ЛичнаяВстреча Тогда
		Возврат БиблиотекаКартинок.ЛичнаяВстреча;
	ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.ПочтовоеПисьмо Тогда
		Возврат БиблиотекаКартинок.ПочтовоеПисьмо;
	ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.Прочее Тогда
		Возврат БиблиотекаКартинок.ПрочееСобытие;
	ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.ТелефонныйЗвонок Тогда
		Возврат БиблиотекаКартинок.ТелефонныйЗвонок;
	ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.ЭлектронноеПисьмо Тогда
		Возврат БиблиотекаКартинок.ЭлектронноеПисьмо;
	Иначе
		Возврат Новый Картинка;
	КонецЕсли; 

КонецФункции // ОпределитьКартинку()

// Процедура заполняет данными поле табличного документа ПолеТабличногоДокументаДень.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение
//  НЕТ
Процедура ЗаполнитьТаблицуДня()

	Если ОтображатьЗаказы Тогда
		
		ЭлементыФормы.НадписьДняВторого.Видимость = Ложь;
		
		ЭлементыФормы.ПанельМоксельГрид.ТекущаяСтраница = ЭлементыФормы.ПанельМоксельГрид.Страницы.Грид;
		
		ТекИндексСделок = -1;
		Если ЭлементыФормы.СделкиДень.ТекущаяСтрока <> Неопределено Тогда
			ТекИндексСделок = СделкиДень.Индекс(ЭлементыФормы.СделкиДень.ТекущиеДанные);
		КонецЕсли; 
		
		СделкиДень.Очистить();

		Для каждого СтрокаТаблицы Из ДанныеНеделиЗаказы Цикл

			Если НачалоДня(СтрокаТаблицы.Дата) = НачалоДня(ДатаКалендаря) Тогда
			
				НоваяСделка = СделкиДень.Добавить();
				НоваяСделка.Документ           = СтрокаТаблицы.Документ;
				НоваяСделка.ВидДокументаЗаказа = СтрокаТаблицы.ТипЗаказа;
				НоваяСделка.ВидОперации        = СтрокаТаблицы.Документ.Метаданные().Синоним;
				НоваяСделка.Контрагент         = СтрокаТаблицы.Документ.Контрагент;
			
			КонецЕсли;
		
		КонецЦикла;
		
		Если ТекИндексСделок <> -1 Тогда
		
			Если СделкиДень.Количество() >= ТекИндексСделок + 1 Тогда
			
				ЭлементыФормы.СделкиДень.ТекущаяСтрока = СделкиДень.Получить(ТекИндексСделок);
			
			КонецЕсли;
		
		КонецЕсли; 
	
		МакетДня = ПолучитьМакет("МакетДня");

		Таб = ЭлементыФормы.ПолеТабличногоДокументаДень;
		Таб.Очистить();

		Таб.ВставитьОбласть(МакетДня.Область(1,1,48,39), Таб.Область(1,1,48,39));

		Таб.Область(,1,,1).ШиринаКолонки = 4;
		Таб.Область(,2,,2).ШиринаКолонки = 2;
		Таб.Область(,3,,39).ШиринаКолонки = 1;
		Таб.Область(1,,48,).ВысотаСтроки = 11;

		СформироватьПредставлениеДня();

		СтруктураРабочегоВремени = ОпределитьНачалоИОкончениеРабочегоДняПользователя();
		
		ДатаНачалаРабочегоДня    = СтруктураРабочегоВремени.ДатаНачала;
		ДатаОкончанияРабочегоДня = СтруктураРабочегоВремени.ДатаОкончания;
		
		НачальнаяСтрокаРабочегоДня = ВозвратитьНомерСтроки(Формат(ДатаНачалаРабочегоДня,"ДФ=Ч"), Формат(ДатаНачалаРабочегоДня,"ДФ=м"), ДатаКалендаря, Истина, ДатаКалендаря);
		Если Формат(ДатаНачалаРабочегоДня,"ДФ=Ч") = Формат(ДатаОкончанияРабочегоДня,"ДФ=Ч") И Формат(ДатаНачалаРабочегоДня,"ДФ=м") = Формат(ДатаОкончанияРабочегоДня,"ДФ=м") Тогда
			КонечнаяСтрокаРабочегоДня  = НачальнаяСтрокаРабочегоДня;
		Иначе
			КонечнаяСтрокаРабочегоДня = ВозвратитьНомерСтроки(Формат(ДатаОкончанияРабочегоДня,"ДФ=Ч"), Формат(ДатаОкончанияРабочегоДня,"ДФ=м"), ДатаКалендаря, Ложь, ДатаКалендаря);
		КонецЕсли; 

		Если ДатаНачалаРабочегоДня = '00010101000000' И ДатаОкончанияРабочегоДня = '00010101235959' Тогда
			
			ОбластьРабочегоДня = Таб.Область(1,3,48,39);
			ОбластьРабочегоДня.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
			КонечнаяСтрокаРабочегоДня  = Неопределено;
			НачальнаяСтрокаРабочегоДня = Неопределено;
			Таб.Область(НачальнаяСтрокаРабочегоДня,1,КонечнаяСтрокаРабочегоДня,2).ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
			
		Иначе
			
			НачальнаяСтрокаРабочегоДня = ВозвратитьНомерСтроки(Формат(ДатаНачалаРабочегоДня,"ДФ=Ч"), Формат(ДатаНачалаРабочегоДня,"ДФ=м"), ДатаКалендаря, Истина, ДатаКалендаря);
			Если Формат(ДатаНачалаРабочегоДня,"ДФ=Ч") = Формат(ДатаОкончанияРабочегоДня,"ДФ=Ч") И Формат(ДатаНачалаРабочегоДня,"ДФ=м") = Формат(ДатаОкончанияРабочегоДня,"ДФ=м") Тогда
				КонечнаяСтрокаРабочегоДня  = НачальнаяСтрокаРабочегоДня;
			Иначе
				КонечнаяСтрокаРабочегоДня = ВозвратитьНомерСтроки(Формат(ДатаОкончанияРабочегоДня,"ДФ=Ч"), Формат(ДатаОкончанияРабочегоДня,"ДФ=м"), ДатаКалендаря, Ложь, ДатаКалендаря);
			КонецЕсли; 
			
			ОбластьДоРабочегоДня = Таб.Область(1,3,(НачальнаяСтрокаРабочегоДня - 1),39);
			ОбластьДоРабочегоДня.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
			ОбластьРабочегоДня = Таб.Область(НачальнаяСтрокаРабочегоДня,3,КонечнаяСтрокаРабочегоДня,39);
			ОбластьРабочегоДня.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
			Если КонечнаяСтрокаРабочегоДня < 48 Тогда
				ОбластьПослеРабочегоДня = Таб.Область((КонечнаяСтрокаРабочегоДня + 1),3,48,39);
				ОбластьПослеРабочегоДня.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
			КонецЕсли; 
			Таб.Область(НачальнаяСтрокаРабочегоДня,1,КонечнаяСтрокаРабочегоДня,2).ЦветФона = ЦветаСтиля.ЦветФонаФормы;
			
		КонецЕсли; 
		
		ЗначениеРеквизитаДняНедели = ОбработкаОбъект["СобытияНедели_День" + Строка(ДеньНедели(ДатаКалендаря))];

		Если ТипЗнч(ЗначениеРеквизитаДняНедели) = Тип("Структура") Тогда
		
			СписокЗначенийВремен = ЗначениеРеквизитаДняНедели.РасположениеСобытий;
			ТаблицаСобытий       = ЗначениеРеквизитаДняНедели.ТаблицаСобытий.Скопировать();

			ОбщееКоличествоЯчеек = 37;

			Для а = 0 По 47 Цикл
			
				ПоследнийСтолбец = 2;

				СписокТекущихДокументов = СписокЗначенийВремен.Получить(а).Значение;

				Для каждого ТекДокумент Из СписокТекущихДокументов Цикл

					СтрокаТаблицыДокументов = ТаблицаСобытий.Найти(ТекДокумент.Значение, "Документ");
					Если СтрокаТаблицыДокументов <> Неопределено Тогда
						ШиринаТекущегоДокумента = Цел(ОбщееКоличествоЯчеек/СтрокаТаблицыДокументов.КоличествоОдновременныхДокументов);
					Иначе
						ШиринаТекущегоДокумента = 0;
						Продолжить;
					КонецЕсли;

					Если (ПоследнийСтолбец + ШиринаТекущегоДокумента) = (ОбщееКоличествоЯчеек + 1) Тогда
						ШиринаТекущегоДокумента = ШиринаТекущегоДокумента + 1;
					ИначеЕсли (ПоследнийСтолбец + ШиринаТекущегоДокумента) = (ОбщееКоличествоЯчеек) Тогда
						ШиринаТекущегоДокумента = ШиринаТекущегоДокумента + 2;
					КонецЕсли; 

					Если ШиринаТекущегоДокумента < 4 Тогда
						Если ШиринаТекущегоДокумента < 2 Тогда
							ШиринаТекущегоДокумента = 2;
						КонецЕсли; 
					КонецЕсли; 

					Если СтрокаТаблицыДокументов.НомерНачальнойКолонки = 0 И СтрокаТаблицыДокументов.НомерКонечнойКолонки = 0 Тогда
						СтрокаТаблицыДокументов.НомерНачальнойКолонки = ПоследнийСтолбец + 1;
						СтрокаТаблицыДокументов.НомерКонечнойКолонки = ПоследнийСтолбец + ШиринаТекущегоДокумента;
					КонецЕсли;

					ПоследнийСтолбец = СтрокаТаблицыДокументов.НомерНачальнойКолонки - 1 + ШиринаТекущегоДокумента;
					
				КонецЦикла; 
			
			КонецЦикла;

			ИндексСтрокиТаблицы = 0;
			Пока 1 = 1 Цикл

				Если ИндексСтрокиТаблицы > ТаблицаСобытий.Количество() - 1 Тогда
					Прервать;
				КонецЕсли; 
				
				СтрокаТаблицы = ТаблицаСобытий[ИндексСтрокиТаблицы];

				Если СтрокаТаблицы.НомерНачальнойКолонки = 0 ИЛИ СтрокаТаблицы.НомерКонечнойКолонки = 0 Тогда
					ТаблицаСобытий.Удалить(СтрокаТаблицы);
				Иначе
					ИндексСтрокиТаблицы = ИндексСтрокиТаблицы + 1;
				КонецЕсли; 
			
			КонецЦикла; 
			
			Таб.Рисунки.Очистить();
			РисункиТабличногоДокумента = Таб.Рисунки;
			
			Для каждого СтрокаТаблицы Из ТаблицаСобытий Цикл

				ТекОбласть = Таб.Область(СтрокаТаблицы.НомерНачальнойСтроки, СтрокаТаблицы.НомерНачальнойКолонки, СтрокаТаблицы.НомерКонечнойСтроки, СтрокаТаблицы.НомерКонечнойКолонки);

				ТекстЯчейки = "";
				Если ТипЗнч(СтрокаТаблицы.Документ) = Тип("ДокументСсылка.Событие") Тогда
				
					ТекстЯчейки = "" + ?((ТекОбласть.Низ - ТекОбласть.Верх + 1) > 2 , Символы.ПС, "") + ТекстЯчейки + Формат(СтрокаТаблицы.ДатаНачалаСобытия, "ДФ=ЧЧ:мм") + " - " + Формат(СтрокаТаблицы.ДатаКонцаСобытия, "ДФ=ЧЧ:мм");
					Если НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
						Если НЕ ПустаяСтрока(ТекстЯчейки) Тогда
							ТекстЯчейки = ТекстЯчейки + ?((ТекОбласть.Низ - ТекОбласть.Верх + 1) >= 2 , Символы.ПС, ", ");
						КонецЕсли; 
						ТекстЯчейки = ТекстЯчейки + Строка(СтрокаТаблицы.Контрагент);
					КонецЕсли; 
					Если НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.КонтактноеЛицо) Тогда
						Если НЕ ПустаяСтрока(ТекстЯчейки) Тогда
							ТекстЯчейки = ТекстЯчейки + ?((ТекОбласть.Низ - ТекОбласть.Верх + 1) > 2 , ?(((ТекОбласть.Низ - ТекОбласть.Верх + 1) = 3), ", ", Символы.ПС), ", ");
						КонецЕсли; 
						ТекстЯчейки = ТекстЯчейки + Строка(СтрокаТаблицы.КонтактноеЛицо);
					КонецЕсли;
					Если НЕ ПустаяСтрока(СтрокаТаблицы.ОписаниеСобытия) Тогда
						Если НЕ ПустаяСтрока(ТекстЯчейки) Тогда
							ТекстЯчейки = ТекстЯчейки + ?((ТекОбласть.Низ - ТекОбласть.Верх + 1) >= 2 , Символы.ПС, ", ");
						КонецЕсли;
						ТекстЯчейки = ТекстЯчейки + СокрЛП(СтрокаТаблицы.ОписаниеСобытия);
					КонецЕсли; 
				
				КонецЕсли; 
				
				Если (ТекОбласть.Право - ТекОбласть.Лево + 1) < 4 Тогда
					ТекстЯчейки = ?((ТекОбласть.Низ - ТекОбласть.Верх + 1) >= 2 , Символы.ПС, "          ") + ТекстЯчейки;
				Иначе
					Если (ТекОбласть.Низ - ТекОбласть.Верх + 1) <= 2 Тогда
						ТекстЯчейки = "          " + ТекстЯчейки;
					КонецЕсли; 
				КонецЕсли; 
				
				ТекОбласть.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				ТекОбласть.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				ТекОбласть.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				ТекОбласть.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				ТекОбласть.Объединить();
				ТекОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
				ТекОбласть.ЦветФона = Новый Цвет;

				ТекОбласть.Текст = ТекстЯчейки;
				Если (ТекОбласть.Низ - ТекОбласть.Верх + 1) < 2 Тогда
					ТекОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
				Иначе
					ТекОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				КонецЕсли; 
				ТекОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
				ТекОбласть.ПоВыделеннымКолонкам = Истина;
				ТекОбласть.Расшифровка = СтрокаТаблицы.Документ;

				Если СтрокаТаблицы.Важность = Перечисления.Важность.Высокая Тогда
					ТекОбласть.ЦветТекста = WebЦвета.Красный;
				КонецЕсли;
				Если СтрокаТаблицы.СостояниеСобытия <> Перечисления.СостоянияСобытий.Запланировано Тогда
					ТекОбласть.ЦветФона = WebЦвета.Перламутровый;
					ТекОбласть.ЦветТекста = WebЦвета.Серый;
				КонецЕсли; 

				// Отобразим тип события
			
				КартинкаТипаСобытия = ?(СтрокаТаблицы.ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Входящее, БиблиотекаКартинок.ВходящееСобытие, БиблиотекаКартинок.ИсходящееСобытие);
				НовыйРисунок = РисункиТабличногоДокумента.Добавить(ТипРисункаТабличногоДокумента.Картинка);
				НовыйРисунок.Картинка = КартинкаТипаСобытия;
				НовыйРисунок.ЦветЛинии = ЦветаСтиля.ЦветРамки;
				Если СтрокаТаблицы.СостояниеСобытия <> Перечисления.СостоянияСобытий.Запланировано Тогда
					НовыйРисунок.ЦветФона = WebЦвета.Перламутровый;
				КонецЕсли;
				НовыйРисунок.ГраницаСверху = Истина;
				Если (ТекОбласть.Низ - ТекОбласть.Верх + 1) < 2 Тогда
					НовыйРисунок.ГраницаСнизу = Истина;
				Иначе
					НовыйРисунок.ГраницаСнизу = Ложь;
				КонецЕсли;
				НовыйРисунок.ГраницаСлева = Истина;
				Если (ТекОбласть.Право - ТекОбласть.Лево + 1) = 2 Тогда
					НовыйРисунок.ГраницаСправа = Истина;
				Иначе
					НовыйРисунок.ГраницаСправа = Ложь;
				КонецЕсли;
				НайденныйРисунок = НовыйРисунок;

				ОбластьРисунка = Таб.Область(ТекОбласть.Верх, ТекОбласть.Лево, ТекОбласть.Верх, (ТекОбласть.Лево + 1));
				НайденныйРисунок.Расшифровка = СтрокаТаблицы.Документ;
				НайденныйРисунок.Защита = Истина;
				НайденныйРисунок.Расположить(ОбластьРисунка);

				// Отобразим вид события
			
				Если (ТекОбласть.Низ - ТекОбласть.Верх >= 1  ИЛИ ТекОбласть.Право - ТекОбласть.Лево >= 3) Тогда
				
					КартинкаВидаСобытия = ОпределитьКартинку(СтрокаТаблицы.ВидСобытия);
					НовыйРисунок = РисункиТабличногоДокумента.Добавить(ТипРисункаТабличногоДокумента.Картинка);
					НовыйРисунок.ЦветЛинии = ЦветаСтиля.ЦветРамки;
					НовыйРисунок.Картинка = КартинкаВидаСобытия;
					Если СтрокаТаблицы.СостояниеСобытия <> Перечисления.СостоянияСобытий.Запланировано Тогда
						НовыйРисунок.ЦветФона = WebЦвета.Перламутровый;
					КонецЕсли;
					Если (ТекОбласть.Право - ТекОбласть.Лево + 1) = 4 Тогда
						НовыйРисунок.ГраницаСверху = Истина;
						Если (ТекОбласть.Низ - ТекОбласть.Верх + 1) <= 2 Тогда
							НовыйРисунок.ГраницаСнизу = Истина;
						Иначе
							НовыйРисунок.ГраницаСнизу = Ложь;
						КонецЕсли;
						НовыйРисунок.ГраницаСлева = Ложь;
						НовыйРисунок.ГраницаСправа = Истина;
					ИначеЕсли (ТекОбласть.Право - ТекОбласть.Лево + 1) = 2 Тогда
						НовыйРисунок.ГраницаСверху = Ложь;
						Если (ТекОбласть.Низ - ТекОбласть.Верх + 1) <= 2 Тогда
							НовыйРисунок.ГраницаСнизу = Истина;
						Иначе
							НовыйРисунок.ГраницаСнизу = Ложь;
						КонецЕсли;
						НовыйРисунок.ГраницаСлева = Истина;
						НовыйРисунок.ГраницаСправа = Истина;
					Иначе
						Если (ТекОбласть.Низ - ТекОбласть.Верх + 1) < 2 Тогда
							НовыйРисунок.ГраницаСнизу = Истина;
							НовыйРисунок.ГраницаСверху = Истина;
						Иначе
							НовыйРисунок.ГраницаСнизу = Ложь;
							НовыйРисунок.ГраницаСверху = Ложь;
						КонецЕсли;
						НовыйРисунок.ГраницаСлева = Ложь;
						НовыйРисунок.ГраницаСправа = Ложь;
					КонецЕсли;
					НайденныйРисунок = НовыйРисунок;

					Если (ТекОбласть.Право - ТекОбласть.Лево + 1) < 4 Тогда
						ОбластьРисунка = Таб.Область((ТекОбласть.Верх + 1), ТекОбласть.Лево, (ТекОбласть.Верх + 1), (ТекОбласть.Лево + 1));
					Иначе
						ОбластьРисунка = Таб.Область(ТекОбласть.Верх, (ТекОбласть.Лево + 2), ТекОбласть.Верх, (ТекОбласть.Лево + 3));
					КонецЕсли; 
					НайденныйРисунок.Расшифровка = СтрокаТаблицы.Документ;
					НайденныйРисунок.Защита = Истина;
					НайденныйРисунок.Расположить(ОбластьРисунка);
				
				КонецЕсли; 
				
			КонецЦикла; 

		КонецЕсли;
		
		Таб.ФиксацияСлева = 39;
		Таб.ТолькоПросмотр = Истина;
		Таб.Показать();
		
	Иначе
		
		ЭлементыФормы.ПанельМоксельГрид.ТекущаяСтраница = ЭлементыФормы.ПанельМоксельГрид.Страницы.Моксель;
		
		// Построим первый день
		
		МакетДня = ПолучитьМакет("МакетДня");

		Таб = ЭлементыФормы.ПолеТабличногоДокументаДеньВторой;
		Таб.Очистить();

		Таб.ВставитьОбласть(МакетДня.Область(1,1,48,39), Таб.Область(1,1,48,39));

		Таб.Область(,1,,1).ШиринаКолонки  = 4;
		Таб.Область(,2,,2).ШиринаКолонки  = 2;
		Таб.Область(,3,,39).ШиринаКолонки = 1;
		Таб.Область(1,,48,).ВысотаСтроки  = 11;
		
		СформироватьПредставлениеДня();

		СтруктураРабочегоВремени = ОпределитьНачалоИОкончениеРабочегоДняПользователя();
		
		ДатаНачалаРабочегоДня    = СтруктураРабочегоВремени.ДатаНачала;
		ДатаОкончанияРабочегоДня = СтруктураРабочегоВремени.ДатаОкончания;
		
		Если ДатаНачалаРабочегоДня = '00010101000000' И ДатаОкончанияРабочегоДня = '00010101235959' Тогда
			
			ОбластьРабочегоДня = Таб.Область(1,3,48,39);
			ОбластьРабочегоДня.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
			КонечнаяСтрокаРабочегоДня  = Неопределено;
			НачальнаяСтрокаРабочегоДня = Неопределено;
			Таб.Область(НачальнаяСтрокаРабочегоДня,1,КонечнаяСтрокаРабочегоДня,2).ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
			
		Иначе
			
			НачальнаяСтрокаРабочегоДня = ВозвратитьНомерСтроки(Формат(ДатаНачалаРабочегоДня,"ДФ=Ч"), Формат(ДатаНачалаРабочегоДня,"ДФ=м"), ДатаКалендаря, Истина, ДатаКалендаря);
			Если Формат(ДатаНачалаРабочегоДня,"ДФ=Ч") = Формат(ДатаОкончанияРабочегоДня,"ДФ=Ч") И Формат(ДатаНачалаРабочегоДня,"ДФ=м") = Формат(ДатаОкончанияРабочегоДня,"ДФ=м") Тогда
				КонечнаяСтрокаРабочегоДня  = НачальнаяСтрокаРабочегоДня;
			Иначе
				КонечнаяСтрокаРабочегоДня = ВозвратитьНомерСтроки(Формат(ДатаОкончанияРабочегоДня,"ДФ=Ч"), Формат(ДатаОкончанияРабочегоДня,"ДФ=м"), ДатаКалендаря, Ложь, ДатаКалендаря);
			КонецЕсли; 
			
			ОбластьДоРабочегоДня = Таб.Область(1,3,(НачальнаяСтрокаРабочегоДня - 1),39);
			ОбластьДоРабочегоДня.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
			ОбластьРабочегоДня = Таб.Область(НачальнаяСтрокаРабочегоДня,3,КонечнаяСтрокаРабочегоДня,39);
			ОбластьРабочегоДня.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
			Если КонечнаяСтрокаРабочегоДня < 48 Тогда
				ОбластьПослеРабочегоДня = Таб.Область((КонечнаяСтрокаРабочегоДня + 1),3,48,39);
				ОбластьПослеРабочегоДня.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
			КонецЕсли; 
			Таб.Область(НачальнаяСтрокаРабочегоДня,1,КонечнаяСтрокаРабочегоДня,2).ЦветФона = ЦветаСтиля.ЦветФонаФормы;
			
		КонецЕсли; 
		
		ОбластьПоследнихЯчеекСтрок = Таб.Область(1, 39, 48, 39);
		ОбластьПоследнихЯчеекСтрок.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
		
		Таб.Рисунки.Очистить();
		РисункиТабличногоДокумента = Таб.Рисунки;

		ЗначениеРеквизитаДняНедели = ОбработкаОбъект["СобытияНедели_День" + Строка(ДеньНедели(ДатаКалендаря))];

		Если ТипЗнч(ЗначениеРеквизитаДняНедели) = Тип("Структура") Тогда
		
			СписокЗначенийВремен = ЗначениеРеквизитаДняНедели.РасположениеСобытий;
			ТаблицаСобытий       = ЗначениеРеквизитаДняНедели.ТаблицаСобытий.Скопировать();

			ОбщееКоличествоЯчеек = 37;

			Для а = 0 По 47 Цикл
			
				ПоследнийСтолбец = 2;

				СписокТекущихДокументов = СписокЗначенийВремен.Получить(а).Значение;

				Для каждого ТекДокумент Из СписокТекущихДокументов Цикл

					СтрокаТаблицыДокументов = ТаблицаСобытий.Найти(ТекДокумент.Значение, "Документ");
					Если СтрокаТаблицыДокументов <> Неопределено Тогда
						ШиринаТекущегоДокумента = Цел(ОбщееКоличествоЯчеек/СтрокаТаблицыДокументов.КоличествоОдновременныхДокументов);
					Иначе
						ШиринаТекущегоДокумента = 0;
						Продолжить;
					КонецЕсли;

					Если (ПоследнийСтолбец + ШиринаТекущегоДокумента) = (ОбщееКоличествоЯчеек + 1) Тогда
						ШиринаТекущегоДокумента = ШиринаТекущегоДокумента + 1;
					ИначеЕсли (ПоследнийСтолбец + ШиринаТекущегоДокумента) = (ОбщееКоличествоЯчеек) Тогда
						ШиринаТекущегоДокумента = ШиринаТекущегоДокумента + 2;
					КонецЕсли; 

					Если ШиринаТекущегоДокумента < 4 Тогда
						Если ШиринаТекущегоДокумента < 2 Тогда
							ШиринаТекущегоДокумента = 2;
						КонецЕсли; 
					КонецЕсли; 

					Если СтрокаТаблицыДокументов.НомерНачальнойКолонки = 0 И СтрокаТаблицыДокументов.НомерКонечнойКолонки = 0 Тогда
						СтрокаТаблицыДокументов.НомерНачальнойКолонки = ПоследнийСтолбец + 1;
						СтрокаТаблицыДокументов.НомерКонечнойКолонки = ПоследнийСтолбец + ШиринаТекущегоДокумента;
					КонецЕсли;

					ПоследнийСтолбец = СтрокаТаблицыДокументов.НомерНачальнойКолонки - 1 + ШиринаТекущегоДокумента;
					
				КонецЦикла; 
			
			КонецЦикла;
			
			ИндексСтрокиТаблицы = 0;
			Пока 1 = 1 Цикл

				Если ИндексСтрокиТаблицы > ТаблицаСобытий.Количество() - 1 Тогда
					Прервать;
				КонецЕсли; 
				
				СтрокаТаблицы = ТаблицаСобытий[ИндексСтрокиТаблицы];

				Если СтрокаТаблицы.НомерНачальнойКолонки = 0 ИЛИ СтрокаТаблицы.НомерКонечнойКолонки = 0 Тогда
					ТаблицаСобытий.Удалить(СтрокаТаблицы);
				Иначе
					ИндексСтрокиТаблицы = ИндексСтрокиТаблицы + 1;
				КонецЕсли; 
			
			КонецЦикла; 
			
			Для каждого СтрокаТаблицы Из ТаблицаСобытий Цикл

				ТекОбласть = Таб.Область(СтрокаТаблицы.НомерНачальнойСтроки, СтрокаТаблицы.НомерНачальнойКолонки, СтрокаТаблицы.НомерКонечнойСтроки, СтрокаТаблицы.НомерКонечнойКолонки);

				ТекстЯчейки = "";
				Если ТипЗнч(СтрокаТаблицы.Документ) = Тип("ДокументСсылка.Событие") Тогда
				
					ТекстЯчейки = "" + ?((ТекОбласть.Низ - ТекОбласть.Верх + 1) > 2 , Символы.ПС, "") + ТекстЯчейки + Формат(СтрокаТаблицы.ДатаНачалаСобытия, "ДФ=ЧЧ:мм") + " - " + Формат(СтрокаТаблицы.ДатаКонцаСобытия, "ДФ=ЧЧ:мм");
					Если НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
						Если НЕ ПустаяСтрока(ТекстЯчейки) Тогда
							ТекстЯчейки = ТекстЯчейки + ?((ТекОбласть.Низ - ТекОбласть.Верх + 1) >= 2 , Символы.ПС, ", ");
						КонецЕсли; 
						ТекстЯчейки = ТекстЯчейки + Строка(СтрокаТаблицы.Контрагент);
					КонецЕсли; 
					Если НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.КонтактноеЛицо) Тогда
						Если НЕ ПустаяСтрока(ТекстЯчейки) Тогда
							ТекстЯчейки = ТекстЯчейки + ?((ТекОбласть.Низ - ТекОбласть.Верх + 1) > 2 , ?(((ТекОбласть.Низ - ТекОбласть.Верх + 1) = 3), ", ", Символы.ПС), ", ");
						КонецЕсли; 
						ТекстЯчейки = ТекстЯчейки + Строка(СтрокаТаблицы.КонтактноеЛицо);
					КонецЕсли;
					Если НЕ ПустаяСтрока(СтрокаТаблицы.ОписаниеСобытия) Тогда
						Если НЕ ПустаяСтрока(ТекстЯчейки) Тогда
							ТекстЯчейки = ТекстЯчейки + ?((ТекОбласть.Низ - ТекОбласть.Верх + 1) >= 2 , Символы.ПС, ", ");
						КонецЕсли;
						ТекстЯчейки = ТекстЯчейки + СокрЛП(СтрокаТаблицы.ОписаниеСобытия);
					КонецЕсли; 
				
				КонецЕсли; 
				
				Если (ТекОбласть.Право - ТекОбласть.Лево + 1) < 4 Тогда
					ТекстЯчейки = ?((ТекОбласть.Низ - ТекОбласть.Верх + 1) >= 2 , Символы.ПС, "          ") + ТекстЯчейки;
				Иначе
					Если (ТекОбласть.Низ - ТекОбласть.Верх + 1) <= 2 Тогда
						ТекстЯчейки = "          " + ТекстЯчейки;
					КонецЕсли; 
				КонецЕсли; 
				
				ТекОбласть.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				ТекОбласть.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				ТекОбласть.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				ТекОбласть.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				ТекОбласть.Объединить();
				ТекОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
				ТекОбласть.ЦветФона = Новый Цвет;

				ТекОбласть.Текст = ТекстЯчейки;
				Если (ТекОбласть.Низ - ТекОбласть.Верх + 1) < 2 Тогда
					ТекОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
				Иначе
					ТекОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				КонецЕсли; 
				ТекОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
				ТекОбласть.ПоВыделеннымКолонкам = Истина;
				ТекОбласть.Расшифровка = СтрокаТаблицы.Документ;

				Если СтрокаТаблицы.Важность = Перечисления.Важность.Высокая Тогда
					ТекОбласть.ЦветТекста = WebЦвета.Красный;
				КонецЕсли;
				Если СтрокаТаблицы.СостояниеСобытия <> Перечисления.СостоянияСобытий.Запланировано Тогда
					ТекОбласть.ЦветФона = WebЦвета.Перламутровый;
					ТекОбласть.ЦветТекста = WebЦвета.Серый;
				КонецЕсли; 

				// Отобразим тип события
			
				КартинкаТипаСобытия = ?(СтрокаТаблицы.ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Входящее, БиблиотекаКартинок.ВходящееСобытие, БиблиотекаКартинок.ИсходящееСобытие);
				НовыйРисунок = РисункиТабличногоДокумента.Добавить(ТипРисункаТабличногоДокумента.Картинка);
				НовыйРисунок.Картинка = КартинкаТипаСобытия;
				НовыйРисунок.ЦветЛинии = ЦветаСтиля.ЦветРамки;
				Если СтрокаТаблицы.СостояниеСобытия <> Перечисления.СостоянияСобытий.Запланировано Тогда
					НовыйРисунок.ЦветФона = WebЦвета.Перламутровый;
				КонецЕсли;
				НовыйРисунок.ГраницаСверху = Истина;
				Если (ТекОбласть.Низ - ТекОбласть.Верх + 1) < 2 Тогда
					НовыйРисунок.ГраницаСнизу = Истина;
				Иначе
					НовыйРисунок.ГраницаСнизу = Ложь;
				КонецЕсли;
				НовыйРисунок.ГраницаСлева = Истина;
				Если (ТекОбласть.Право - ТекОбласть.Лево + 1) = 2 Тогда
					НовыйРисунок.ГраницаСправа = Истина;
				Иначе
					НовыйРисунок.ГраницаСправа = Ложь;
				КонецЕсли;
				НайденныйРисунок = НовыйРисунок;

				ОбластьРисунка = Таб.Область(ТекОбласть.Верх, ТекОбласть.Лево, ТекОбласть.Верх, (ТекОбласть.Лево + 1));
				НайденныйРисунок.Расшифровка = СтрокаТаблицы.Документ;
				НайденныйРисунок.Защита = Истина;
				НайденныйРисунок.Расположить(ОбластьРисунка);

				// Отобразим вид события
			
				Если (ТекОбласть.Низ - ТекОбласть.Верх >= 1  ИЛИ ТекОбласть.Право - ТекОбласть.Лево >= 3) Тогда
				
					КартинкаВидаСобытия = ОпределитьКартинку(СтрокаТаблицы.ВидСобытия);
					НовыйРисунок = РисункиТабличногоДокумента.Добавить(ТипРисункаТабличногоДокумента.Картинка);
					НовыйРисунок.ЦветЛинии = ЦветаСтиля.ЦветРамки;
					НовыйРисунок.Картинка = КартинкаВидаСобытия;
					Если СтрокаТаблицы.СостояниеСобытия <> Перечисления.СостоянияСобытий.Запланировано Тогда
						НовыйРисунок.ЦветФона = WebЦвета.Перламутровый;
					КонецЕсли;
					Если (ТекОбласть.Право - ТекОбласть.Лево + 1) = 4 Тогда
						НовыйРисунок.ГраницаСверху = Истина;
						Если (ТекОбласть.Низ - ТекОбласть.Верх + 1) <= 2 Тогда
							НовыйРисунок.ГраницаСнизу = Истина;
						Иначе
							НовыйРисунок.ГраницаСнизу = Ложь;
						КонецЕсли;
						НовыйРисунок.ГраницаСлева = Ложь;
						НовыйРисунок.ГраницаСправа = Истина;
					ИначеЕсли (ТекОбласть.Право - ТекОбласть.Лево + 1) = 2 Тогда
						НовыйРисунок.ГраницаСверху = Ложь;
						Если (ТекОбласть.Низ - ТекОбласть.Верх + 1) <= 2 Тогда
							НовыйРисунок.ГраницаСнизу = Истина;
						Иначе
							НовыйРисунок.ГраницаСнизу = Ложь;
						КонецЕсли;
						НовыйРисунок.ГраницаСлева = Истина;
						НовыйРисунок.ГраницаСправа = Истина;
					Иначе
						Если (ТекОбласть.Низ - ТекОбласть.Верх + 1) < 2 Тогда
							НовыйРисунок.ГраницаСнизу = Истина;
							НовыйРисунок.ГраницаСверху = Истина;
						Иначе
							НовыйРисунок.ГраницаСнизу = Ложь;
							НовыйРисунок.ГраницаСверху = Ложь;
						КонецЕсли;
						НовыйРисунок.ГраницаСлева = Ложь;
						НовыйРисунок.ГраницаСправа = Ложь;
					КонецЕсли;
					НайденныйРисунок = НовыйРисунок;

					Если (ТекОбласть.Право - ТекОбласть.Лево + 1) < 4 Тогда
						ОбластьРисунка = Таб.Область((ТекОбласть.Верх + 1), ТекОбласть.Лево, (ТекОбласть.Верх + 1), (ТекОбласть.Лево + 1));
					Иначе
						ОбластьРисунка = Таб.Область(ТекОбласть.Верх, (ТекОбласть.Лево + 2), ТекОбласть.Верх, (ТекОбласть.Лево + 3));
					КонецЕсли; 
					НайденныйРисунок.Расшифровка = СтрокаТаблицы.Документ;
					НайденныйРисунок.Защита = Истина;
					НайденныйРисунок.Расположить(ОбластьРисунка);
				
				КонецЕсли; 
				
			КонецЦикла; 

		КонецЕсли;
		
		// Построим второй день
		
		ПерваяКолонкаВтрогоДня = 41;
		ПоследняяКолонкаВтрогоДня = 41 + 38;
		
		ДатаВторогоДня = ДатаКалендаря + 60*60*24;
	
		Таб.ВставитьОбласть(МакетДня.Область(1,1,48,39), Таб.Область(1,ПерваяКолонкаВтрогоДня,48,ПоследняяКолонкаВтрогоДня));

		Таб.Область(,ПерваяКолонкаВтрогоДня,,ПерваяКолонкаВтрогоДня).ШиринаКолонки = 4;
		Таб.Область(,(ПерваяКолонкаВтрогоДня + 1),,(ПерваяКолонкаВтрогоДня + 1)).ШиринаКолонки = 2;
		Таб.Область(,(ПерваяКолонкаВтрогоДня + 2),,ПоследняяКолонкаВтрогоДня).ШиринаКолонки = 1;
		Таб.Область(1,,48,).ВысотаСтроки = 11;

		ЭлементыФормы.НадписьДняВторого.Видимость = Истина;
		
		СтрокаДня = Формат(ДатаВторогоДня, "ДЛФ=DD") + ", " + ОпределитьДеньНедели(ДеньНедели(ДатаВторогоДня));
		ЭлементыФормы.НадписьДняВторого.Значение = СтрокаДня;

		СтруктураРабочегоВремени = ОпределитьНачалоИОкончениеРабочегоДняПользователя();
		
		НачальнаяСтрокаПервогоРабочегоДня = НачальнаяСтрокаРабочегоДня;
		КонечнаяСтрокаПервогоРабочегоДня  = КонечнаяСтрокаРабочегоДня;
			
		ДатаНачалаРабочегоДня    = СтруктураРабочегоВремени.ДатаНачала;
		ДатаОкончанияРабочегоДня = СтруктураРабочегоВремени.ДатаОкончания;
		
		Если ДатаНачалаРабочегоДня = '00010101000000' И ДатаОкончанияРабочегоДня = '00010101235959' Тогда
			
			ОбластьРабочегоДня = Таб.Область(1,(ПерваяКолонкаВтрогоДня + 2),48,ПоследняяКолонкаВтрогоДня);
			ОбластьРабочегоДня.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
			НачальнаяСтрокаРабочегоДня  = Неопределено;
			КонечнаяСтрокаРабочегоДня   = Неопределено;
			Таб.Область(НачальнаяСтрокаРабочегоДня,ПерваяКолонкаВтрогоДня,КонечнаяСтрокаРабочегоДня,(ПерваяКолонкаВтрогоДня + 1)).ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
			
		Иначе
			
			НачальнаяСтрокаРабочегоДня = ВозвратитьНомерСтроки(Формат(ДатаНачалаРабочегоДня,"ДФ=Ч"), Формат(ДатаНачалаРабочегоДня,"ДФ=м"), ДатаКалендаря, Истина, ДатаКалендаря);
			Если Формат(ДатаНачалаРабочегоДня,"ДФ=Ч") = Формат(ДатаОкончанияРабочегоДня,"ДФ=Ч") И Формат(ДатаНачалаРабочегоДня,"ДФ=м") = Формат(ДатаОкончанияРабочегоДня,"ДФ=м") Тогда
				КонечнаяСтрокаРабочегоДня  = НачальнаяСтрокаРабочегоДня;
			Иначе
				КонечнаяСтрокаРабочегоДня = ВозвратитьНомерСтроки(Формат(ДатаОкончанияРабочегоДня,"ДФ=Ч"), Формат(ДатаОкончанияРабочегоДня,"ДФ=м"), ДатаКалендаря, Ложь, ДатаКалендаря);
			КонецЕсли; 
			
			ОбластьДоРабочегоДня = Таб.Область(1,(ПерваяКолонкаВтрогоДня + 2),(НачальнаяСтрокаРабочегоДня - 1),ПоследняяКолонкаВтрогоДня);
			ОбластьДоРабочегоДня.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
			ОбластьРабочегоДня = Таб.Область(НачальнаяСтрокаРабочегоДня,(ПерваяКолонкаВтрогоДня + 2),КонечнаяСтрокаРабочегоДня,ПоследняяКолонкаВтрогоДня);
			ОбластьРабочегоДня.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
			Если КонечнаяСтрокаРабочегоДня < 48 Тогда
				ОбластьПослеРабочегоДня = Таб.Область((КонечнаяСтрокаРабочегоДня + 1),(ПерваяКолонкаВтрогоДня + 2),48,ПоследняяКолонкаВтрогоДня);
				ОбластьПослеРабочегоДня.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
			КонецЕсли; 
			
			Таб.Область(НачальнаяСтрокаРабочегоДня,ПерваяКолонкаВтрогоДня,КонечнаяСтрокаРабочегоДня,(ПерваяКолонкаВтрогоДня + 1)).ЦветФона = ЦветаСтиля.ЦветФонаФормы;
			
		КонецЕсли; 
		
		
		Для с = 1 По 48 Цикл
		
			ОбластьКартинки = Таб.Область(с,40,с,40);
			ОбластьКартинки.ШиринаКолонки = 2;
			ОбластьКартинки.ВысотаСтроки = 11;
			
			РисунокРазделительСтраниц = РисункиТабличногоДокумента.Добавить(ТипРисункаТабличногоДокумента.Картинка);
			Если (КонечнаяСтрокаРабочегоДня = Неопределено И НачальнаяСтрокаРабочегоДня = Неопределено) ИЛИ ((КонечнаяСтрокаПервогоРабочегоДня = Неопределено И НачальнаяСтрокаПервогоРабочегоДня = Неопределено)) Тогда
				
				РисунокРазделительСтраниц.Картинка = БиблиотекаКартинок.СкрепкиЛистовКалендаряПользователяНеРабочие;
				
				Если с = 1 Тогда
					РисунокРазделительСтраниц.ГраницаСнизу  = Ложь;
					РисунокРазделительСтраниц.ГраницаСверху = Истина;
					РисунокРазделительСтраниц.ЦветЛинии = ЦветаСтиля.ЦветРамки;
				//ИначеЕсли с = Мин(НачальнаяСтрокаПервогоРабочегоДня, НачальнаяСтрокаРабочегоДня) - 1 ИЛИ с = Макс(КонечнаяСтрокаПервогоРабочегоДня, КонечнаяСтрокаРабочегоДня) ИЛИ с = 48 Тогда
				//	РисунокРазделительСтраниц.ГраницаСверху = Ложь;
				//	РисунокРазделительСтраниц.ГраницаСнизу  = Истина;
				//	РисунокРазделительСтраниц.ЦветЛинии = ЦветаСтиля.ЦветРамки;
				Иначе
					РисунокРазделительСтраниц.ГраницаСверху = Ложь;
					РисунокРазделительСтраниц.ГраницаСнизу  = Ложь;
				КонецЕсли; 
				
			Иначе
				
				Если с < Мин(НачальнаяСтрокаПервогоРабочегоДня, НачальнаяСтрокаРабочегоДня) ИЛИ с > Макс(КонечнаяСтрокаПервогоРабочегоДня, КонечнаяСтрокаРабочегоДня) Тогда
					РисунокРазделительСтраниц.Картинка = БиблиотекаКартинок.СкрепкиЛистовКалендаряПользователяНеРабочие;
				Иначе
					РисунокРазделительСтраниц.Картинка = БиблиотекаКартинок.СкрепкиЛистовКалендаряПользователяРабочие;
				КонецЕсли; 
				
				Если с = 1 Тогда
					РисунокРазделительСтраниц.ГраницаСнизу  = Ложь;
					РисунокРазделительСтраниц.ГраницаСверху = Истина;
					РисунокРазделительСтраниц.ЦветЛинии = ЦветаСтиля.ЦветРамки;
				ИначеЕсли с = Мин(НачальнаяСтрокаПервогоРабочегоДня, НачальнаяСтрокаРабочегоДня) - 1 ИЛИ с = Макс(КонечнаяСтрокаПервогоРабочегоДня, КонечнаяСтрокаРабочегоДня) ИЛИ с = 48 Тогда
					РисунокРазделительСтраниц.ГраницаСверху = Ложь;
					РисунокРазделительСтраниц.ГраницаСнизу  = Истина;
					РисунокРазделительСтраниц.ЦветЛинии = ЦветаСтиля.ЦветРамки;
				Иначе
					РисунокРазделительСтраниц.ГраницаСверху = Ложь;
					РисунокРазделительСтраниц.ГраницаСнизу  = Ложь;
				КонецЕсли; 
				
			КонецЕсли; 
			
			РисунокРазделительСтраниц.ГраницаСправа = Ложь;
			РисунокРазделительСтраниц.ГраницаСлева  = Ложь;
			
			РисунокРазделительСтраниц.Расположить(ОбластьКартинки);
			
		КонецЦикла; 
		
		Если НачалоНедели(ДатаКалендаря) = НачалоНедели(ДатаВторогоДня) Тогда
			ЗначениеРеквизитаДняНедели = ОбработкаОбъект["СобытияНедели_День" + Строка(ДеньНедели(ДатаВторогоДня))];
		Иначе
			// Это может быть только понедельник следующей недели
			ЗначениеРеквизитаДняНедели = ОбработкаОбъект["СобытияНедели_День8"];
		КонецЕсли;

		Если ТипЗнч(ЗначениеРеквизитаДняНедели) = Тип("Структура") Тогда
		
			СписокЗначенийВремен = ЗначениеРеквизитаДняНедели.РасположениеСобытий;
			ТаблицаСобытий       = ЗначениеРеквизитаДняНедели.ТаблицаСобытий.Скопировать();

			ОбщееКоличествоЯчеек = 37;

			Для а = 0 По 47 Цикл
			
				ПоследнийСтолбец = 2;

				СписокТекущихДокументов = СписокЗначенийВремен.Получить(а).Значение;

				Для каждого ТекДокумент Из СписокТекущихДокументов Цикл

					СтрокаТаблицыДокументов = ТаблицаСобытий.Найти(ТекДокумент.Значение, "Документ");
					Если СтрокаТаблицыДокументов <> Неопределено Тогда
						ШиринаТекущегоДокумента = Цел(ОбщееКоличествоЯчеек/СтрокаТаблицыДокументов.КоличествоОдновременныхДокументов);
					Иначе
						ШиринаТекущегоДокумента = 0;
						Продолжить;
					КонецЕсли;

					Если (ПоследнийСтолбец + ШиринаТекущегоДокумента) = (ОбщееКоличествоЯчеек + 1) Тогда
						ШиринаТекущегоДокумента = ШиринаТекущегоДокумента + 1;
					ИначеЕсли (ПоследнийСтолбец + ШиринаТекущегоДокумента) = (ОбщееКоличествоЯчеек) Тогда
						ШиринаТекущегоДокумента = ШиринаТекущегоДокумента + 2;
					КонецЕсли; 

					Если ШиринаТекущегоДокумента < 4 Тогда
						Если ШиринаТекущегоДокумента < 2 Тогда
							ШиринаТекущегоДокумента = 2;
						КонецЕсли; 
					КонецЕсли; 

					Если СтрокаТаблицыДокументов.НомерНачальнойКолонки = 0 И СтрокаТаблицыДокументов.НомерКонечнойКолонки = 0 Тогда
						СтрокаТаблицыДокументов.НомерНачальнойКолонки = ПерваяКолонкаВтрогоДня + ПоследнийСтолбец + 1 - 1;
						СтрокаТаблицыДокументов.НомерКонечнойКолонки = ПерваяКолонкаВтрогоДня + ПоследнийСтолбец + ШиринаТекущегоДокумента - 1;
					КонецЕсли;

					ПоследнийСтолбец = СтрокаТаблицыДокументов.НомерНачальнойКолонки + ШиринаТекущегоДокумента - ПерваяКолонкаВтрогоДня;
					
				КонецЦикла; 
			
			КонецЦикла;

			ИндексСтрокиТаблицы = 0;
			Пока 1 = 1 Цикл

				Если ИндексСтрокиТаблицы > ТаблицаСобытий.Количество() - 1 Тогда
					Прервать;
				КонецЕсли; 
				
				СтрокаТаблицы = ТаблицаСобытий[ИндексСтрокиТаблицы];

				Если СтрокаТаблицы.НомерНачальнойКолонки = 0 ИЛИ СтрокаТаблицы.НомерКонечнойКолонки = 0 Тогда
					ТаблицаСобытий.Удалить(СтрокаТаблицы);
				Иначе
					ИндексСтрокиТаблицы = ИндексСтрокиТаблицы + 1;
				КонецЕсли; 
			
			КонецЦикла; 
			
			Для каждого СтрокаТаблицы Из ТаблицаСобытий Цикл

				ТекОбласть = Таб.Область(СтрокаТаблицы.НомерНачальнойСтроки, СтрокаТаблицы.НомерНачальнойКолонки, СтрокаТаблицы.НомерКонечнойСтроки, СтрокаТаблицы.НомерКонечнойКолонки);

				ТекстЯчейки = "";
				Если ТипЗнч(СтрокаТаблицы.Документ) = Тип("ДокументСсылка.Событие") Тогда
				
					ТекстЯчейки = "" + ?((ТекОбласть.Низ - ТекОбласть.Верх + 1) >= 2 , Символы.ПС, "") + ТекстЯчейки + Формат(СтрокаТаблицы.ДатаНачалаСобытия, "ДФ=ЧЧ:мм") + " - " + Формат(СтрокаТаблицы.ДатаКонцаСобытия, "ДФ=ЧЧ:мм");
					Если НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
						Если НЕ ПустаяСтрока(ТекстЯчейки) Тогда
							ТекстЯчейки = ТекстЯчейки + ?((ТекОбласть.Низ - ТекОбласть.Верх + 1) >= 2 , Символы.ПС, " ");
						КонецЕсли; 
						ТекстЯчейки = ТекстЯчейки + Строка(СтрокаТаблицы.Контрагент);
					КонецЕсли; 
					Если НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.КонтактноеЛицо) Тогда
						Если НЕ ПустаяСтрока(ТекстЯчейки) Тогда
							ТекстЯчейки = ТекстЯчейки + ?((ТекОбласть.Низ - ТекОбласть.Верх + 1) >= 2 , Символы.ПС, " ");
						КонецЕсли; 
						ТекстЯчейки = ТекстЯчейки + Строка(СтрокаТаблицы.КонтактноеЛицо);
					КонецЕсли;
					Если НЕ ПустаяСтрока(СтрокаТаблицы.ОписаниеСобытия) Тогда
						Если НЕ ПустаяСтрока(ТекстЯчейки) Тогда
							ТекстЯчейки = ТекстЯчейки + ?((ТекОбласть.Низ - ТекОбласть.Верх + 1) >= 2 , Символы.ПС, " ");
						КонецЕсли;
						ТекстЯчейки = ТекстЯчейки + СокрЛП(СтрокаТаблицы.ОписаниеСобытия);
					КонецЕсли; 
				
				КонецЕсли; 
				
				Если (ТекОбласть.Право - ТекОбласть.Лево + 1) < 4 Тогда
					ТекстЯчейки = ?((ТекОбласть.Низ - ТекОбласть.Верх + 1) >= 2 , Символы.ПС, "          ") + ТекстЯчейки;
				Иначе
					Если (ТекОбласть.Низ - ТекОбласть.Верх + 1) < 2 Тогда
						ТекстЯчейки = "          " + ТекстЯчейки;
					КонецЕсли; 
				КонецЕсли; 
				
				ТекОбласть.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				ТекОбласть.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				ТекОбласть.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				ТекОбласть.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				ТекОбласть.Объединить();
				ТекОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
				ТекОбласть.ЦветФона = Новый Цвет;

				ТекОбласть.Текст = ТекстЯчейки;
				Если (ТекОбласть.Низ - ТекОбласть.Верх + 1) < 2 Тогда
					ТекОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
				Иначе
					ТекОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				КонецЕсли; 
				ТекОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
				ТекОбласть.ПоВыделеннымКолонкам = Истина;
				ТекОбласть.Расшифровка = СтрокаТаблицы.Документ;

				Если СтрокаТаблицы.Важность = Перечисления.Важность.Высокая Тогда
					ТекОбласть.ЦветТекста = WebЦвета.Красный;
				КонецЕсли;
				Если СтрокаТаблицы.СостояниеСобытия <> Перечисления.СостоянияСобытий.Запланировано Тогда
					ТекОбласть.ЦветФона = WebЦвета.Перламутровый;
					ТекОбласть.ЦветТекста = WebЦвета.Серый;
				КонецЕсли; 

				// Отобразим тип события
			
				КартинкаТипаСобытия = ?(СтрокаТаблицы.ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Входящее, БиблиотекаКартинок.ВходящееСобытие, БиблиотекаКартинок.ИсходящееСобытие);
				НовыйРисунок = РисункиТабличногоДокумента.Добавить(ТипРисункаТабличногоДокумента.Картинка);
				НовыйРисунок.Картинка = КартинкаТипаСобытия;
				НовыйРисунок.ЦветЛинии = ЦветаСтиля.ЦветРамки;
				Если СтрокаТаблицы.СостояниеСобытия <> Перечисления.СостоянияСобытий.Запланировано Тогда
					НовыйРисунок.ЦветФона = WebЦвета.Перламутровый;
				КонецЕсли;
				НовыйРисунок.ГраницаСверху = Истина;
				Если (ТекОбласть.Низ - ТекОбласть.Верх + 1) < 2 Тогда
					НовыйРисунок.ГраницаСнизу = Истина;
				Иначе
					НовыйРисунок.ГраницаСнизу = Ложь;
				КонецЕсли;
				НовыйРисунок.ГраницаСлева = Истина;
				Если (ТекОбласть.Право - ТекОбласть.Лево + 1) = 2 Тогда
					НовыйРисунок.ГраницаСправа = Истина;
				Иначе
					НовыйРисунок.ГраницаСправа = Ложь;
				КонецЕсли;
				НайденныйРисунок = НовыйРисунок;

				ОбластьРисунка = Таб.Область(ТекОбласть.Верх, ТекОбласть.Лево, ТекОбласть.Верх, (ТекОбласть.Лево + 1));
				НайденныйРисунок.Расшифровка = СтрокаТаблицы.Документ;
				НайденныйРисунок.Защита = Истина;
				НайденныйРисунок.Расположить(ОбластьРисунка);

				// Отобразим вид события
			
				Если (ТекОбласть.Низ - ТекОбласть.Верх >= 1  ИЛИ ТекОбласть.Право - ТекОбласть.Лево >= 3) Тогда
				
					КартинкаВидаСобытия = ОпределитьКартинку(СтрокаТаблицы.ВидСобытия);
					НовыйРисунок = РисункиТабличногоДокумента.Добавить(ТипРисункаТабличногоДокумента.Картинка);
					НовыйРисунок.ЦветЛинии = ЦветаСтиля.ЦветРамки;
					НовыйРисунок.Картинка = КартинкаВидаСобытия;
					Если СтрокаТаблицы.СостояниеСобытия <> Перечисления.СостоянияСобытий.Запланировано Тогда
						НовыйРисунок.ЦветФона = WebЦвета.Перламутровый;
					КонецЕсли;
					Если (ТекОбласть.Право - ТекОбласть.Лево + 1) = 4 Тогда
						НовыйРисунок.ГраницаСверху = Истина;
						Если (ТекОбласть.Низ - ТекОбласть.Верх + 1) <= 2 Тогда
							НовыйРисунок.ГраницаСнизу = Истина;
						Иначе
							НовыйРисунок.ГраницаСнизу = Ложь;
						КонецЕсли;
						НовыйРисунок.ГраницаСлева = Ложь;
						НовыйРисунок.ГраницаСправа = Истина;
					ИначеЕсли (ТекОбласть.Право - ТекОбласть.Лево + 1) = 2 Тогда
						НовыйРисунок.ГраницаСверху = Ложь;
						Если (ТекОбласть.Низ - ТекОбласть.Верх + 1) <= 2 Тогда
							НовыйРисунок.ГраницаСнизу = Истина;
						Иначе
							НовыйРисунок.ГраницаСнизу = Ложь;
						КонецЕсли;
						НовыйРисунок.ГраницаСлева = Истина;
						НовыйРисунок.ГраницаСправа = Истина;
					Иначе
						Если (ТекОбласть.Низ - ТекОбласть.Верх + 1) < 2 Тогда
							НовыйРисунок.ГраницаСнизу = Истина;
							НовыйРисунок.ГраницаСверху = Истина;
						Иначе
							НовыйРисунок.ГраницаСнизу = Ложь;
							НовыйРисунок.ГраницаСверху = Ложь;
						КонецЕсли;
						НовыйРисунок.ГраницаСлева = Ложь;
						НовыйРисунок.ГраницаСправа = Ложь;
					КонецЕсли;
					НайденныйРисунок = НовыйРисунок;

					Если (ТекОбласть.Право - ТекОбласть.Лево + 1) < 4 Тогда
						ОбластьРисунка = Таб.Область((ТекОбласть.Верх + 1), ТекОбласть.Лево, (ТекОбласть.Верх + 1), (ТекОбласть.Лево + 1));
					Иначе
						ОбластьРисунка = Таб.Область(ТекОбласть.Верх, (ТекОбласть.Лево + 2), ТекОбласть.Верх, (ТекОбласть.Лево + 3));
					КонецЕсли; 
					НайденныйРисунок.Расшифровка = СтрокаТаблицы.Документ;
					НайденныйРисунок.Защита = Истина;
					НайденныйРисунок.Расположить(ОбластьРисунка);
				
				КонецЕсли; 
				
			КонецЦикла; 

		КонецЕсли;
		
		Таб.ФиксацияСлева = 39 * 2 + 1;
		Таб.ТолькоПросмотр = Истина;
		Таб.Показать();
		
	КонецЕсли;

КонецПроцедуры

// Процедура заполняет данными поле табличного документа ПолеТабличногоДокументаНеделя.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение
//  НЕТ
Процедура ЗаполнитьТаблицуНедели()

	мФормаИндикации.КомментарийОбработкиДанных = "Заполняется таблица недели ...";
	мФормаИндикации.Открыть();
	
	ОбшаяШиринаНедели = 82;
	
	Таб = ЭлементыФормы.ПолеТабличногоДокументаНеделя;
	Таб.УдалитьОбласть(Таб.Область(1,2,1,));
	Таб.УдалитьОбласть(Таб.Область(2,1,2,1));
	Таб.УдалитьОбласть(Таб.Область(3,1,,));
	
	МакетДня = ПолучитьМакет("МакетНеделя");
	Таб.ВставитьОбласть(МакетДня.Область(3,1,50,(ОбшаяШиринаНедели+2)), Таб.Область(3,1,50,(ОбшаяШиринаНедели+2)));
	Таб.ВставитьОбласть(МакетДня.Область(1,1,2,2), Таб.Область(1,1,2,2));
	
	Таб.Область(,1,,1).ШиринаКолонки = 4;
	Таб.Область(,2,,2).ШиринаКолонки = 2;
	Таб.Область(,3,,(ОбшаяШиринаНедели+2)).ШиринаКолонки = 1;
	Таб.Область(1,,48,).ВысотаСтроки = 11;
	
	Таб.Область(1,,1,).ВысотаСтроки = 20;
	Таб.Область(2,,2,).ВысотаСтроки = 50;
	
	Таб.Область(1,1,50,2).ЦветФона = ЦветаСтиля.ЦветФонаФормы;

	ШиринаКолонки = Цел(ОбшаяШиринаНедели/КоличествоДнейНедели);

	ТаблицаТаблицСделок = Новый ТаблицаЗначений;
	ТаблицаТаблицСделок.Колонки.Добавить("ДатаНедели");
	ТаблицаТаблицСделок.Колонки.Добавить("ТаблицаСделок");
	ТаблицаТаблицСделок.Колонки.Добавить("ТаблицаСобытий");
	ТаблицаТаблицСделок.Колонки.Добавить("НомерСтрокиНачало");
	ТаблицаТаблицСделок.Колонки.Добавить("НомерСтрокиКонец");

	ШаблонТаблицаСделок = Новый ТаблицаЗначений;
	ШаблонТаблицаСделок.Колонки.Добавить("Документ");
	ШаблонТаблицаСделок.Колонки.Добавить("Контрагент",,"Покупатель");
	ШаблонТаблицаСделок.Колонки.Добавить("ВидДокументаЗаказа");

	Для а = 1 По 7 Цикл
		Если а > КоличествоДнейНедели Тогда
			ТекущийГрид = ЭлементыФормы["ТЗСделок" + СокрЛП(Строка(а))];
			Если ТекущийГрид.Видимость Тогда
				ТекущийГрид.Видимость = Ложь;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	//Для а = 1 По 7 Цикл
	//	Если а > КоличествоДнейНедели Тогда
	//		ТекущийГрид = ЭлементыФормы["ТЗСделок" + СокрЛП(Строка(а))];
	//		Если ТекущийГрид.ВстроенВЯчейку ИЛИ ТекущийГрид.Видимость Тогда
	//			ТекущийГрид.ВстроенВЯчейку = Ложь;
	//			ТекущийГрид.Видимость = Ложь;
	//			ТекущийГрид.Верх      = 0;
	//			ТекущийГрид.Лево      = 0;
	//			ТекущийГрид.Ширина    = 0;
	//			ТекущийГрид.Высота    = 0;
	//		КонецЕсли; 
	//	КонецЕсли; 
	//КонецЦикла; 
	
	Для а = 1 По КоличествоДнейНедели Цикл
	
		РазницаДней = а - ДеньНедели(ДатаКалендаря);
		ТекущаяДата = НачалоДня(ДатаКалендаря + РазницаДней*60*60*24);

		НоваяСтрока = ТаблицаТаблицСделок.Добавить();
		НоваяСтрока.ДатаНедели = ТекущаяДата;
		НоваяСтрока.ТаблицаСделок = ШаблонТаблицаСделок.Скопировать();

		ЗначениеРеквизитаДняНедели = ОбработкаОбъект["СобытияНедели_День" + Строка(а)];
		Если ТипЗнч(ЗначениеРеквизитаДняНедели) = Тип("Структура") Тогда
			НоваяСтрока.ТаблицаСобытий = ЗначениеРеквизитаДняНедели.ТаблицаСобытий.Скопировать();
		Иначе
			НоваяСтрока.ТаблицаСобытий = Неопределено;
		КонецЕсли; 
	
	КонецЦикла;
		
	Если ОтображатьЗаказы Тогда
		СобратьСделкиДня(ТаблицаТаблицСделок);
		Таб.Область(2,,2,).Видимость = Истина;
	Иначе
		Таб.Область(2,,2,).Видимость = Ложь;
	КонецЕсли; 
	
	мТаблицаЯчеекИДатНедели = Новый ТаблицаЗначений;
	мТаблицаЯчеекИДатНедели.Колонки.Добавить("ДатаНедели");
	мТаблицаЯчеекИДатНедели.Колонки.Добавить("НомерНачальнойЯчейки");
	мТаблицаЯчеекИДатНедели.Колонки.Добавить("НомерКонечнойЯчейки");

	мФормаИндикации.МаксимальноеЗначение = КоличествоДнейНедели;
	
	Для а = 1 По КоличествоДнейНедели Цикл

		мФормаИндикации.КомментарийОбработкиДанных = "Заполняется таблица недели, " + СокрЛП(ОпределитьДеньНедели(а));
		мФормаИндикации.Значение = а;
		
		Если а = КоличествоДнейНедели Тогда
			Если а*ШиринаКолонки < ОбшаяШиринаНедели Тогда
				НачальноеЗначениеКолонки = (а*ШиринаКолонки + 2 - ШиринаКолонки + 1);
				КонечноеЗначениеКолонки = (а*ШиринаКолонки + 2 + (ОбшаяШиринаНедели - а*ШиринаКолонки));
			Иначе
				НачальноеЗначениеКолонки = (а*ШиринаКолонки + 2 - ШиринаКолонки + 1);
				КонечноеЗначениеКолонки = (а*ШиринаКолонки + 2);
			КонецЕсли;
		Иначе
			НачальноеЗначениеКолонки = (а*ШиринаКолонки + 2 - ШиринаКолонки + 1);
			КонечноеЗначениеКолонки = (а*ШиринаКолонки + 2);
		КонецЕсли; 

		ОбластьНаименованияДняНедели = Таб.Область(1,НачальноеЗначениеКолонки,1,КонечноеЗначениеКолонки);
		ОбластьНаименованияДняНедели.Объединить();

		РазницаДней = а - ДеньНедели(ДатаКалендаря);
		ТекущаяДата = НачалоДня(ДатаКалендаря + РазницаДней*60*60*24);

		СтрокаДатыНедели = мТаблицаЯчеекИДатНедели.Добавить();
		СтрокаДатыНедели.ДатаНедели = ТекущаяДата;
		СтрокаДатыНедели.НомерНачальнойЯчейки = НачальноеЗначениеКолонки;
		СтрокаДатыНедели.НомерКонечнойЯчейки = КонечноеЗначениеКолонки;
		
		ОбластьДняНедели = Таб.Область(1,НачальноеЗначениеКолонки,1,КонечноеЗначениеКолонки);
		ОбластьДняНедели.Текст = ОпределитьДеньНедели(а) + Символы.ПС + Формат(ТекущаяДата,"ДФ='d MMMM'");
		ОбластьДняНедели.Шрифт = Новый Шрифт(,9,Ложь);
		ОбластьДняНедели.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		ОбластьДняНедели.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		ОбластьДняНедели.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
		ОбластьДняНедели.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
		ОбластьДняНедели.Расшифровка = ТекущаяДата;
		ОбластьДняНедели.ГиперСсылка = Истина;

		ОбластьДняНедели.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
		ОбластьДняНедели.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		ОбластьДняНедели.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		ОбластьДняНедели.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		ОбластьДняНедели.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);

		ОбластьДняНедели.ЦветРамки = ЦветаСтиля.ЦветРамки;
		ОбластьДняНедели.ЦветТекста = ЦветаСтиля.ЦветРамки;

		Если ОтображатьЗаказы Тогда
			
			ОбластьСделокДня = Таб.Область(2,НачальноеЗначениеКолонки,2,КонечноеЗначениеКолонки);
			ОбластьСделокДня.Объединить();
			
			Если НЕ ЭлементыФормы["ТЗСделок" + Строка(а)].ВстроенВЯчейку ИЛИ НЕ ЭлементыФормы["ТЗСделок" + Строка(а)].Видимость Тогда
				ЭлементыФормы["ТЗСделок" + Строка(а)].ВстроенВЯчейку = Истина;
				ЭлементыФормы["ТЗСделок" + Строка(а)].Видимость = Истина;
			КонецЕсли; 
			ЭлементыФормы["ТЗСделок" + Строка(а)].Расположить(ОбластьСделокДня);
			
			ОбластьСделокДня.ЦветРамки = ЦветаСтиля.ЦветРамки;
			ОбластьСделокДня.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
			ОбластьСделокДня.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
			ОбластьСделокДня.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
			ОбластьСделокДня.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);

			ЭлементыФормы["ТЗСделок" + Строка(а)].Значение = ТаблицаТаблицСделок[а-1].ТаблицаСделок;
			ЭлементыФормы["ТЗСделок" + Строка(а)].СоздатьКолонки();
			ЭлементыФормы["ТЗСделок" + Строка(а)].Колонки.Документ.Видимость = Ложь;
			ЭлементыФормы["ТЗСделок" + Строка(а)].Колонки.ВидДокументаЗаказа.Видимость = Ложь;
			ЭлементыФормы["ТЗСделок" + Строка(а)].Колонки.Контрагент.КартинкиСтрок = БиблиотекаКартинок.ВидыСобытий;
			ЭлементыФормы["ТЗСделок" + Строка(а)].Колонки.Контрагент.Ширина = 5;
			ЭлементыФормы["ТЗСделок" + Строка(а)].Колонки.Контрагент.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложение.Центр;
			
		КонецЕсли;

		// Выведем события
		
		СтруктураРабочегоВремени = ОпределитьНачалоИОкончениеРабочегоДняПользователя();
		
		ДатаНачалаРабочегоДня    = СтруктураРабочегоВремени.ДатаНачала;
		ДатаОкончанияРабочегоДня = СтруктураРабочегоВремени.ДатаОкончания;
		
		Если ДатаНачалаРабочегоДня = '00010101000000' И ДатаОкончанияРабочегоДня = '00010101235959' Тогда
			
			ОбластьРабочегоДня = Таб.Область(3,НачальноеЗначениеКолонки,50,КонечноеЗначениеКолонки);
			ОбластьРабочегоДня.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
			
		Иначе
			
			НачальнаяСтрокаРабочегоДня = ВозвратитьНомерСтроки(Формат(ДатаНачалаРабочегоДня,"ДФ=Ч"), Формат(ДатаНачалаРабочегоДня,"ДФ=м"), ДатаКалендаря, Истина, ДатаКалендаря);
			Если Формат(ДатаНачалаРабочегоДня,"ДФ=Ч") = Формат(ДатаОкончанияРабочегоДня,"ДФ=Ч") И Формат(ДатаНачалаРабочегоДня,"ДФ=м") = Формат(ДатаОкончанияРабочегоДня,"ДФ=м") Тогда
				КонечнаяСтрокаРабочегоДня  = НачальнаяСтрокаРабочегоДня;
			Иначе
				КонечнаяСтрокаРабочегоДня = ВозвратитьНомерСтроки(Формат(ДатаОкончанияРабочегоДня,"ДФ=Ч"), Формат(ДатаОкончанияРабочегоДня,"ДФ=м"), ДатаКалендаря, Ложь, ДатаКалендаря);
			КонецЕсли; 

			ОбластьДоРабочегоДня = Таб.Область(3,НачальноеЗначениеКолонки,(НачальнаяСтрокаРабочегоДня - 1),КонечноеЗначениеКолонки);
			ОбластьДоРабочегоДня.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;

			ОбластьРабочегоДня = Таб.Область(НачальнаяСтрокаРабочегоДня,НачальноеЗначениеКолонки,КонечнаяСтрокаРабочегоДня,КонечноеЗначениеКолонки);
			ОбластьРабочегоДня.ЦветФона = ЦветаСтиля.ЦветФонаФормы;

			Если КонечнаяСтрокаРабочегоДня < 50 Тогда
				ОбластьПослеРабочегоДня = Таб.Область((КонечнаяСтрокаРабочегоДня + 1),НачальноеЗначениеКолонки,50,КонечноеЗначениеКолонки);
				ОбластьПослеРабочегоДня.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
			КонецЕсли; 
			
		КонецЕсли; 
		
		ОбластьДоРабочегоДняПоследняяКолонка = Таб.Область(3,КонечноеЗначениеКолонки,50,КонечноеЗначениеКолонки);
		ОбластьДоРабочегоДняПоследняяКолонка.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);

		ЗначениеРеквизитаДняНедели = ОбработкаОбъект["СобытияНедели_День" + Строка(а)];
		Если ТипЗнч(ЗначениеРеквизитаДняНедели) = Тип("Структура") Тогда
		
			СписокЗначенийВремен = ЗначениеРеквизитаДняНедели.РасположениеСобытий;
			ТаблицаСобытий       = ТаблицаТаблицСделок[а-1].ТаблицаСобытий;

			ОбщееКоличествоЯчеек = КонечноеЗначениеКолонки - НачальноеЗначениеКолонки + 1;

			Для я = 0 По 47 Цикл
			
			ПоследнийСтолбец = НачальноеЗначениеКолонки - 1;

				СписокТекущихДокументов = СписокЗначенийВремен.Получить(я).Значение;

				Для каждого ТекДокумент Из СписокТекущихДокументов Цикл

					СтрокаТаблицыДокументов = ТаблицаСобытий.Найти(ТекДокумент.Значение, "Документ");
					Если СтрокаТаблицыДокументов <> Неопределено Тогда
						ШиринаТекущегоДокумента = Цел(ОбщееКоличествоЯчеек/СтрокаТаблицыДокументов.КоличествоОдновременныхДокументов);
					Иначе
						ШиринаТекущегоДокумента = 0;
						Продолжить;
					КонецЕсли;

					Если (ПоследнийСтолбец + ШиринаТекущегоДокумента) = (ОбщееКоличествоЯчеек + 1) Тогда
						ШиринаТекущегоДокумента = ШиринаТекущегоДокумента + 1;
					ИначеЕсли (ПоследнийСтолбец + ШиринаТекущегоДокумента) = (ОбщееКоличествоЯчеек) Тогда
						ШиринаТекущегоДокумента = ШиринаТекущегоДокумента + 2;
					КонецЕсли; 

					Если ШиринаТекущегоДокумента < 1 Тогда
						ШиринаТекущегоДокумента = 1;
					КонецЕсли; 

					Если СтрокаТаблицыДокументов.НомерНачальнойКолонки = 0 И СтрокаТаблицыДокументов.НомерКонечнойКолонки = 0 Тогда
						СтрокаТаблицыДокументов.НомерНачальнойКолонки = ПоследнийСтолбец + 1;
						СтрокаТаблицыДокументов.НомерКонечнойКолонки = ПоследнийСтолбец + ШиринаТекущегоДокумента;
					КонецЕсли;

					ПоследнийСтолбец = СтрокаТаблицыДокументов.НомерНачальнойКолонки - 1 + ШиринаТекущегоДокумента;
					
				КонецЦикла; 
			
			КонецЦикла;

			ИндексСтрокиТаблицы = 0;
			Пока 1 = 1 Цикл

				Если ИндексСтрокиТаблицы > ТаблицаСобытий.Количество() - 1 Тогда
					Прервать;
				КонецЕсли; 
				
				СтрокаТаблицы = ТаблицаСобытий[ИндексСтрокиТаблицы];

				Если СтрокаТаблицы.НомерНачальнойКолонки = 0 ИЛИ СтрокаТаблицы.НомерКонечнойКолонки = 0 Тогда
					ТаблицаСобытий.Удалить(СтрокаТаблицы);
				Иначе
					ИндексСтрокиТаблицы = ИндексСтрокиТаблицы + 1;
				КонецЕсли; 
			
			КонецЦикла; 

			ТаблицаСобытий.Сортировать("НомерКонечнойКолонки ВОЗР");
			
			Для каждого СтрокаТаблицы Из ТаблицаСобытий Цикл

				Если СтрокаТаблицы.НомерКонечнойКолонки > КонечноеЗначениеКолонки Тогда
					Прервать;
				КонецЕсли; 
				
				Если (СтрокаТаблицы.НомерНачальнойСтроки + СтрокаТаблицы.НомерНачальнойКолонки + СтрокаТаблицы.НомерКонечнойСтроки + СтрокаТаблицы.НомерКонечнойКолонки) = 0 Тогда
					Продолжить;
				КонецЕсли; 

				ТекОбласть = Таб.Область((СтрокаТаблицы.НомерНачальнойСтроки + 2), СтрокаТаблицы.НомерНачальнойКолонки, (СтрокаТаблицы.НомерКонечнойСтроки + 2), СтрокаТаблицы.НомерКонечнойКолонки);

				ТекстЯчейки = "";
				Если ТипЗнч(СтрокаТаблицы.Документ) = Тип("ДокументСсылка.Событие") Тогда
				
					ТекстЯчейки = ТекстЯчейки + Формат(СтрокаТаблицы.ДатаНачалаСобытия, "ДФ=ЧЧ:мм") + " - " + Формат(СтрокаТаблицы.ДатаКонцаСобытия, "ДФ=ЧЧ:мм");
					Если НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
						Если НЕ ПустаяСтрока(ТекстЯчейки) Тогда
							ТекстЯчейки = ТекстЯчейки + Символы.ПС;
						КонецЕсли; 
						ТекстЯчейки = ТекстЯчейки + Строка(СтрокаТаблицы.Контрагент);
					КонецЕсли; 
					Если НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.КонтактноеЛицо) Тогда
						Если НЕ ПустаяСтрока(ТекстЯчейки) Тогда
							ТекстЯчейки = ТекстЯчейки + Символы.ПС;
						КонецЕсли; 
						ТекстЯчейки = ТекстЯчейки + Строка(СтрокаТаблицы.КонтактноеЛицо);
					КонецЕсли;
					Если НЕ ПустаяСтрока(СтрокаТаблицы.ОписаниеСобытия) Тогда
						Если НЕ ПустаяСтрока(ТекстЯчейки) Тогда
							ТекстЯчейки = ТекстЯчейки + Символы.ПС;
						КонецЕсли;
						ТекстЯчейки = ТекстЯчейки + СокрЛП(СтрокаТаблицы.ОписаниеСобытия);
					КонецЕсли; 
				
				КонецЕсли; 
				
				ТекОбласть.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
				ТекОбласть.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
				ТекОбласть.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
				ТекОбласть.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
				ТекОбласть.Объединить();
				ТекОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
				ТекОбласть.ЦветФона = Новый Цвет;

				ТекОбласть.Текст = ТекстЯчейки;
				ТекОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
				ТекОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
				ТекОбласть.ПоВыделеннымКолонкам = Истина;
				ТекОбласть.Расшифровка = СтрокаТаблицы.Документ;

				Если СтрокаТаблицы.Важность = Перечисления.Важность.Высокая Тогда
					ТекОбласть.ЦветТекста = WebЦвета.Красный;
				КонецЕсли;
				Если СтрокаТаблицы.СостояниеСобытия <> Перечисления.СостоянияСобытий.Запланировано Тогда
					ТекОбласть.ЦветФона = WebЦвета.Перламутровый;
					ТекОбласть.ЦветТекста = WebЦвета.Серый;
				КонецЕсли; 
					
			КонецЦикла; 

		КонецЕсли; 

	КонецЦикла;

	Таб.ТолькоПросмотр = Истина;
	Таб.ФиксацияСлева = (ОбшаяШиринаНедели + 2);
	Таб.ФиксацияСверху = 2;
	Таб.Показать();

	мБылоПервоеЗаполнениеНедели = Истина;
	
КонецПроцедуры

// Процедура заполняет данными поле табличного документа ПолеТабличногоДокументаМесяц.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение
//  НЕТ
Процедура ЗаполнитьТаблицуМесяца()

	мФормаИндикации.КомментарийОбработкиДанных = "Заполняется таблица месяца ...";
	мФормаИндикации.Открыть();
	
	ОбшаяШиринаМесяца = 109;
	
	Таб = ЭлементыФормы.ПолеТабличногоДокументаМесяц;
	Таб.Очистить();

	ШиринаКолонки = Цел(ОбшаяШиринаМесяца/КоличествоДнейНедели);

	Таб.Область(,1,,КоличествоДнейНедели).ШиринаКолонки = ШиринаКолонки;
	Таб.Область(1,,1,).ВысотаСтроки = 15;

	Если (ШиринаКолонки * КоличествоДнейНедели) < ОбшаяШиринаМесяца Тогда
		Таб.Область(,КоличествоДнейНедели,,КоличествоДнейНедели).ШиринаКолонки = ШиринаКолонки + (ОбшаяШиринаМесяца - (ШиринаКолонки * КоличествоДнейНедели));
	КонецЕсли;

	ОбластьДнейНедели = Таб.Область(1,1,1,КоличествоДнейНедели);
	ОбластьДнейНедели.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
	ОбластьДнейНедели.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ОбластьДнейНедели.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ОбластьДнейНедели.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ОбластьДнейНедели.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);

	ОбластьДнейНедели.ЦветРамки = ЦветаСтиля.ЦветРамки;
	ОбластьДнейНедели.ЦветТекста = ЦветаСтиля.ЦветРамки;
	
	мФормаИндикации.МаксимальноеЗначение = КоличествоДнейНедели;
	
	Для а = 1 По КоличествоДнейНедели Цикл

		мФормаИндикации.Значение = а;
		
		ОбластьДняНедели = Таб.Область(1,а,1,а);
		ОбластьДняНедели.Текст = ОпределитьДеньНедели(а);
		ОбластьДняНедели.Шрифт = Новый Шрифт(,10,Истина);
		ОбластьДняНедели.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		ОбластьДняНедели.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		ОбластьДняНедели.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
		ОбластьДняНедели.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
		
	КонецЦикла;

	ВысотаСтроки = Цел(250/5);

	ПервыйДеньНеделиМесяца = ДеньНедели(ДатаНачалаМесяцаЗапроса);
	Если ПервыйДеньНеделиМесяца > 1 Тогда
		ПерваяДатаМесяца = ДатаНачалаМесяцаЗапроса - (ПервыйДеньНеделиМесяца - 1)*60*60*24;
	Иначе
		ПерваяДатаМесяца = ДатаНачалаМесяцаЗапроса;
	КонецЕсли;

	ТаблицаСобытияЗаказы = Новый ТаблицаЗначений();
	ТаблицаСобытияЗаказы.Колонки.Добавить("ДатаДокумента");
	ТаблицаСобытияЗаказы.Колонки.Добавить("СтрокаДокументов");

	мФормаИндикации.МаксимальноеЗначение = ДанныеМесяца.Количество();
	
	Для каждого СтрокаДанных Из ДанныеМесяца Цикл
	
		мФормаИндикации.Значение = ДанныеМесяца.Индекс(СтрокаДанных);
		
		НайденнаяСтрока = ТаблицаСобытияЗаказы.Найти(НачалоДня(СтрокаДанных.Дата), "ДатаДокумента");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = ТаблицаСобытияЗаказы.Добавить();
			НайденнаяСтрока.ДатаДокумента = НачалоДня(СтрокаДанных.Дата);
			НайденнаяСтрока.СтрокаДокументов = "";
		КонецЕсли;

		Если НЕ ПустаяСтрока(НайденнаяСтрока.СтрокаДокументов) Тогда
			НайденнаяСтрока.СтрокаДокументов = НайденнаяСтрока.СтрокаДокументов + Символы.ПС;
		КонецЕсли; 

		Если ТипЗнч(СтрокаДанных.Документ) = Тип("ДокументСсылка.Событие") Тогда
			НайденнаяСтрока.СтрокаДокументов = НайденнаяСтрока.СтрокаДокументов + Формат(СтрокаДанных.ДатаНачалаСобытия, "ДФ=ЧЧ:мм") + " - " + Формат(СтрокаДанных.ДатаКонцаСобытия, "ДФ=ЧЧ:мм");
			Если НЕ ЗначениеНеЗаполнено(СтрокаДанных.Контрагент) Тогда
				НайденнаяСтрока.СтрокаДокументов = НайденнаяСтрока.СтрокаДокументов + ", " + СокрЛП(СтрокаДанных.Контрагент);
				Если НЕ ЗначениеНеЗаполнено(СтрокаДанных.КонтактноеЛицо) Тогда
					НайденнаяСтрока.СтрокаДокументов = НайденнаяСтрока.СтрокаДокументов + ", " + СокрЛП(СтрокаДанных.КонтактноеЛицо);
				КонецЕсли; 
			ИначеЕсли НЕ ЗначениеНеЗаполнено(СтрокаДанных.КонтактноеЛицо) Тогда
				НайденнаяСтрока.СтрокаДокументов = НайденнаяСтрока.СтрокаДокументов + ", " + СокрЛП(СтрокаДанных.КонтактноеЛицо);
			КонецЕсли;
		ИначеЕсли ТипЗнч(СтрокаДанных.Документ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			НайденнаяСтрока.СтрокаДокументов = НайденнаяСтрока.СтрокаДокументов + ?(СтрокаДанных.ТипЗаказа = Перечисления.ВидыДействийПоЗаказамПокупателей.ОплатаПоЗаказу, "Оплата покупателя", "Отгрузка");
			Если НЕ ЗначениеНеЗаполнено(СтрокаДанных.Контрагент) Тогда
				НайденнаяСтрока.СтрокаДокументов = НайденнаяСтрока.СтрокаДокументов + ", " + СокрЛП(СтрокаДанных.Контрагент);
			КонецЕсли; 
		ИначеЕсли ТипЗнч(СтрокаДанных.Документ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			НайденнаяСтрока.СтрокаДокументов = НайденнаяСтрока.СтрокаДокументов + ?(СтрокаДанных.ТипЗаказа = Перечисления.ВидыДействийПоЗаказамПоставщикам.ОплатаПоЗаказу, "Оплата поставщику", "Поступление");
			Если НЕ ЗначениеНеЗаполнено(СтрокаДанных.Контрагент) Тогда
				НайденнаяСтрока.СтрокаДокументов = НайденнаяСтрока.СтрокаДокументов + ", " + СокрЛП(СтрокаДанных.Контрагент);
			КонецЕсли; 
		КонецЕсли; 

	КонецЦикла;
	
	ТекущаяДата = ПерваяДатаМесяца;
	
	мФормаИндикации.МаксимальноеЗначение = 5;
	
	Для Строка = 1 По 5 Цикл

		мФормаИндикации.Значение = Строка;
		
		Для Колонка = 1 По КоличествоДнейНедели Цикл
			
			ОбластьЧислоДня = Таб.Область((Строка*2),Колонка,(Строка*2),Колонка);
			ОбластьЧислоДня.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
			ОбластьЧислоДня.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
			ОбластьЧислоДня.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
			ОбластьЧислоДня.ЦветРамки = ЦветаСтиля.ЦветРамки;
			ОбластьЧислоДня.ВысотаСтроки = 11;
			
			ОбластьЧислоДня.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
			ОбластьЧислоДня.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
			ОбластьЧислоДня.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
			ОбластьЧислоДня.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			ОбластьЧислоДня.Расшифровка = ТекущаяДата;
			
			ОбластьПоляДня = Таб.Область((Строка*2 + 1),Колонка,(Строка*2 + 1),Колонка);
			ОбластьПоляДня.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
			ОбластьПоляДня.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
			ОбластьПоляДня.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
			ОбластьПоляДня.ЦветРамки = ЦветаСтиля.ЦветРамки;
			ОбластьПоляДня.ВысотаСтроки = ВысотаСтроки - 11;
			ОбластьПоляДня.Расшифровка = ТекущаяДата;
			ОбластьПоляДня.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;

			ОбластьПоляДня.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
			ОбластьПоляДня.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
			ОбластьПоляДня.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;

			НайденнаяСтрокаСобытияИЗаказы = ТаблицаСобытияЗаказы.Найти(ТекущаяДата, "ДатаДокумента");
			
			ОбластьПоляДня.Текст = ?(НайденнаяСтрокаСобытияИЗаказы = Неопределено, "", НайденнаяСтрокаСобытияИЗаказы.СтрокаДокументов);
			
			Если НачалоДня(ТекущаяДата) = НачалоДня(ТекущаяДата()) Тогда

				ОбластьЧислоДня.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
				ОбластьЧислоДня.Шрифт = Новый Шрифт(,,Истина);

				Если Колонка = 6 ИЛИ Колонка = 7 Тогда
					ОбластьЧислоДня.ЦветФона = WebЦвета.ГолубойСКраснымОттенком;
					ОбластьПоляДня.ЦветФона = WebЦвета.ГолубойСКраснымОттенком;
				Иначе
					ОбластьЧислоДня.ЦветФона = Новый Цвет;
					ОбластьПоляДня.ЦветФона = Новый Цвет;
				КонецЕсли; 
				
				ОбластьПоляДня.ЦветТекста = Новый Цвет;
				
				СтрокаДатыДня = СокрЛП(Формат(ТекущаяДата,"ДФ=d"));
				ОбластьЧислоДня.Текст = СокрЛП(Формат(ТекущаяДата,"ДФ=d"));
				
			Иначе

				Если Месяц(ТекущаяДата) <> Месяц(ДатаНачалаМесяцаЗапроса) Тогда
					ОбластьЧислоДня.ЦветФона = WebЦвета.Перламутровый;
					ОбластьЧислоДня.ЦветТекста = WebЦвета.Серый;
					ОбластьЧислоДня.Текст = СокрЛП(Формат(ТекущаяДата,"ДФ=dd.MM.yyyy"));
					ОбластьЧислоДня.Шрифт = Новый Шрифт(,,Ложь);
					СтрокаДатыДня = СокрЛП(Формат(ТекущаяДата,"ДФ=dd.MM.yyyy"));
					
					ОбластьПоляДня.ЦветФона = WebЦвета.Перламутровый;
					ОбластьПоляДня.ЦветТекста = WebЦвета.Серый;
				Иначе

					Если Колонка = 6 ИЛИ Колонка = 7 Тогда
						ОбластьЧислоДня.ЦветФона = WebЦвета.ГолубойСКраснымОттенком;
						ОбластьПоляДня.ЦветФона = WebЦвета.ГолубойСКраснымОттенком;
					Иначе
						ОбластьЧислоДня.ЦветФона = Новый Цвет;
						ОбластьПоляДня.ЦветФона = Новый Цвет;
					КонецЕсли; 
					
					ОбластьЧислоДня.ЦветТекста = Новый Цвет;
					ОбластьЧислоДня.Текст = СокрЛП(Формат(ТекущаяДата,"ДФ=d"));
					ОбластьЧислоДня.Шрифт = Новый Шрифт(,,Ложь);
					СтрокаДатыДня = СокрЛП(Формат(ТекущаяДата,"ДФ=d"));
					
					ОбластьПоляДня.ЦветТекста = Новый Цвет;
					
				КонецЕсли;
				
			КонецЕсли;

			ТекущаяДата = ОпределитьСледующуюДата(ТекущаяДата);

		КонецЦикла;
	
	КонецЦикла;
	
	Таб.ФиксацияСверху = 11;
	Таб.ФиксацияСлева = КоличествоДнейНедели;
	Таб.ТолькоПросмотр = Истина;
	Таб.Показать();

КонецПроцедуры

// Функция определяет следующую дату за текущей в зависимости от
//  настроенного количества дней в недели для отображения в календаре
//
// Параметры
//  ТекущаяДата - Дата, текущая дата
//
// Возвращаемое значение:
//   Дата - следующая дата
//
Функция ОпределитьСледующуюДата(ТекущаяДата)

	Если КоличествоДнейНедели = 7 Тогда
		Возврат ТекущаяДата + 60*60*24;
	ИначеЕсли КоличествоДнейНедели = 6 Тогда
		Если ДеньНедели(ТекущаяДата) = 6 Тогда
			Возврат ТекущаяДата + 60*60*24*2;
		Иначе
			Возврат ТекущаяДата + 60*60*24;
		КонецЕсли; 
	ИначеЕсли КоличествоДнейНедели = 5 Тогда
		Если ДеньНедели(ТекущаяДата) = 5 Тогда
			Возврат ТекущаяДата + 60*60*24*3;
		ИначеЕсли ДеньНедели(ТекущаяДата) = 6 Тогда
			Возврат ТекущаяДата + 60*60*24*2;
		Иначе
			Возврат ТекущаяДата + 60*60*24;
		КонецЕсли; 
	КонецЕсли; 

КонецФункции // ОпределитьСледующуюДата()

// Процедура восстанавливает сохраненные в профайле значения пользователя..
//
// Параметры
//  НЕТ
//
// Возвращаемое значение
//  НЕТ
Процедура ПрочитатьСохраненныеЗначенияПользователя()

	СохраненныеЗначения = ВосстановитьЗначение("КалендарьПользователя");
	Если СохраненныеЗначения <> Неопределено И ТипЗнч(СохраненныеЗначения) = Тип("Структура") Тогда
		СохраненныеЗначения.Свойство("КоличествоДнейНедели", КоличествоДнейНедели);
		СохраненныеЗначения.Свойство("ОтображатьЗапланированныеСобытия", ОтображатьЗапланированныеСобытия);
		СохраненныеЗначения.Свойство("ТипСобытияКалендаря", ТипСобытияКалендаря);
		СохраненныеЗначения.Свойство("ОтображатьЗаказы", ОтображатьЗаказы);
		СохраненныеЗначения.Свойство("ОтображаемыеЗаказы", ОтображаемыеЗаказы);
	КонецЕсли; 
	
	Если КоличествоДнейНедели = 0 Тогда
		КоличествоДнейНедели = 7;
	КонецЕсли; 
	
	Если ОтображаемыеЗаказы = 0 Тогда
		ОтображаемыеЗаказы = 3;
	КонецЕсли; 

КонецПроцедуры

// Процедура заполняет таблицу значений сделками и событиями
//  при этом разделяя их по датам
//
// Параметры
//  ТаблицаТаблицСделок - Таблица значений, таблица которую надо заполнить.
//
// Возвращаемое значение:
//   НЕТ
//
Процедура СобратьСделкиДня(ТаблицаТаблицСделок)

	Для каждого СтрокаТаблицы Из ДанныеНеделиЗаказы Цикл
		
		Для каждого СтрокаИсходнойТаблицы Из ТаблицаТаблицСделок Цикл

			ТекущаяДата = СтрокаИсходнойТаблицы.ДатаНедели;
		
			Если НачалоДня(СтрокаТаблицы.Дата) = НачалоДня(ТекущаяДата) Тогда

				ТаблицаСделок = СтрокаИсходнойТаблицы.ТаблицаСделок.Скопировать();;
				
				НоваяСделка = ТаблицаСделок.Добавить();
				НоваяСделка.Документ = СтрокаТаблицы.Документ;
				НоваяСделка.Контрагент = СтрокаТаблицы.Документ.Контрагент;
				НоваяСделка.ВидДокументаЗаказа = СтрокаТаблицы.ТипЗаказа;

				СтрокаИсходнойТаблицы.ТаблицаСделок = ТаблицаСделок.Скопировать();
				
				Прервать;

			КонецЕсли;
				
		КонецЦикла; 

	КонецЦикла;

КонецПроцедуры // СобратьСделкиДня()

// Процедура открывает форму документа ЗаказПокупателя.
//
// Параметры
//  Элемент - элемент формы
//
// Возвращаемое значение
//  НЕТ
Процедура ОткрытьДокументСделки(Элемент)

	Если Элемент.ТекущиеДанные <> Неопределено
	   И (ТипЗнч(Элемент.ТекущиеДанные.Документ) = Тип("ДокументСсылка.ЗаказПокупателя")
	      ИЛИ ТипЗнч(Элемент.ТекущиеДанные.Документ) = Тип("ДокументСсылка.ЗаказПоставщику"))
	   И НЕ Элемент.ТекущиеДанные.Документ.Пустая() Тогда
	
		ФормаВыбора = Элемент.ТекущиеДанные.Документ.ПолучитьФорму(,ЭтаФорма);
		ФормаВыбора.РежимВыбора = Истина;
		ФормаВыбора.Открыть();
	
	КонецЕсли; 

КонецПроцедуры

// Процедура открывает форму нового документа событие.
//
// Параметры
//  Элемент - кнопка, по нажатию которой происходит действие
//
// Возвращаемое значение
//  НЕТ
Процедура ВвестиДокументСобытие(Элемент)

	ИндексСписка = Число(Сред(Элемент.Имя, 2));

	ВыбранныйЭлемент = мСписокДокументовДобавления.Получить(ИндексСписка);
	
	ОбъектСобытия = Документы.Событие.СоздатьДокумент();
	
	ТекущаяОбласть = ЭлементыФормы.ПолеТабличногоДокументаДень.ТекущаяОбласть;
	Если ТекущаяОбласть <> Неопределено Тогда
	
		ОбъектСобытия.НачалоСобытия    = ОпределитьДатыОбластиДня(ТекущаяОбласть, Истина);
		ОбъектСобытия.ОкончаниеСобытия = ОпределитьДатыОбластиДня(ТекущаяОбласть, Ложь);
	
	КонецЕсли;

	ОбъектСобытия.ВидСобытия      = ВыбранныйЭлемент.Значение[0];
	ОбъектСобытия.ТипСобытия      = ВыбранныйЭлемент.Значение[1];
	ОбъектСобытия.ОписаниеСобытия = ТемаНовогоСобытия;
	ОбъектСобытия.Ответственный   = ПользовательКалендаря;

	ФормаВыбора = ОбъектСобытия.ПолучитьФорму(,ЭтаФорма);
	ФормаВыбора.РежимВыбора = Истина;
	ФормаВыбора.Открыть();

	КнопкаФормы = ЭлементыФормы.ВвестиДокумент;

	КнопкаФормы.Заголовок = СокрЛП(Строка(ВыбранныйЭлемент.Значение[0]));
	КнопкаФормы.Подсказка = "Ввести новое " + ВыбранныйЭлемент.Значение[1] + " событие -  " + ВыбранныйЭлемент.Значение[0];
	КнопкаФормы.Картинка  = ?(ВыбранныйЭлемент.Значение[1] = Перечисления.ВходящееИсходящееСобытие.Исходящее, БиблиотекаКартинок.ИсходящееСобытие, БиблиотекаКартинок.ВходящееСобытие);
	
	КнопкаФормы = ЭлементыФормы.ВвестиДокументНеделя;

	КнопкаФормы.Заголовок = СокрЛП(Строка(ВыбранныйЭлемент.Значение[0]));
	КнопкаФормы.Подсказка = "Ввести новое " + ВыбранныйЭлемент.Значение[1] + " событие -  " + ВыбранныйЭлемент.Значение[0];
	КнопкаФормы.Картинка  = ?(ВыбранныйЭлемент.Значение[1] = Перечисления.ВходящееИсходящееСобытие.Исходящее, БиблиотекаКартинок.ИсходящееСобытие, БиблиотекаКартинок.ВходящееСобытие);
		
	мМассивЗначенийБыстрогоСобытия = Новый Массив;
	мМассивЗначенийБыстрогоСобытия.Добавить(ВыбранныйЭлемент.Значение[0]);
	мМассивЗначенийБыстрогоСобытия.Добавить(ВыбранныйЭлемент.Значение[1]);
	
КонецПроцедуры

// Процедура открывает форму нового документа событие.
//
// Параметры
//  Элемент - кнопка, по нажатию которой происходит действие
//
// Возвращаемое значение
//  НЕТ
Процедура ВвестиДокументСобытиеНеделя(Элемент)

	ИндексСписка = Число(Сред(Элемент.Имя, 2));

	ВыбранныйЭлемент = мСписокДокументовДобавления.Получить(ИндексСписка);
	
	ОбъектСобытия = Документы.Событие.СоздатьДокумент();
	
	ТекущаяОбласть = ЭлементыФормы.ПолеТабличногоДокументаНеделя.ТекущаяОбласть;
	Если ТекущаяОбласть <> Неопределено Тогда
	
		ОбъектСобытия.НачалоСобытия = ОпределитьДатыОбластиНедели(ТекущаяОбласть, Истина);
		ОбъектСобытия.ОкончаниеСобытия = ОпределитьДатыОбластиНедели(ТекущаяОбласть, Ложь);
	
	КонецЕсли;

	ОбъектСобытия.ВидСобытия = ВыбранныйЭлемент.Значение[0];
	ОбъектСобытия.ТипСобытия = ВыбранныйЭлемент.Значение[1];
	ОбъектСобытия.ОписаниеСобытия = ТемаНовогоСобытияНеделя;
	ОбъектСобытия.Ответственный   = ПользовательКалендаря;

	ФормаВыбора = ОбъектСобытия.ПолучитьФорму(,ЭтаФорма);
	ФормаВыбора.РежимВыбора = Истина;
	ФормаВыбора.Открыть();

	КнопкаФормы = ЭлементыФормы.ВвестиДокумент;

	КнопкаФормы.Заголовок = СокрЛП(Строка(ВыбранныйЭлемент.Значение[0]));
	КнопкаФормы.Подсказка = "Ввести новое " + ВыбранныйЭлемент.Значение[1] + " событие -  " + ВыбранныйЭлемент.Значение[0];
	КнопкаФормы.Картинка  = ?(ВыбранныйЭлемент.Значение[1] = Перечисления.ВходящееИсходящееСобытие.Исходящее, БиблиотекаКартинок.ИсходящееСобытие, БиблиотекаКартинок.ВходящееСобытие);
	
	КнопкаФормы = ЭлементыФормы.ВвестиДокументНеделя;

	КнопкаФормы.Заголовок = СокрЛП(Строка(ВыбранныйЭлемент.Значение[0]));
	КнопкаФормы.Подсказка = "Ввести новое " + ВыбранныйЭлемент.Значение[1] + " событие -  " + ВыбранныйЭлемент.Значение[0];
	КнопкаФормы.Картинка  = ?(ВыбранныйЭлемент.Значение[1] = Перечисления.ВходящееИсходящееСобытие.Исходящее, БиблиотекаКартинок.ИсходящееСобытие, БиблиотекаКартинок.ВходящееСобытие);
		
	мМассивЗначенийБыстрогоСобытия = Новый Массив;
	мМассивЗначенийБыстрогоСобытия.Добавить(ВыбранныйЭлемент.Значение[0]);
	мМассивЗначенийБыстрогоСобытия.Добавить(ВыбранныйЭлемент.Значение[1]);
	
КонецПроцедуры

// Процедура открывает форму нового документа событие из контакстного меню мокселя.
//
// Параметры
//  Элемент - кнопка, по нажатию которой происходит действие
//
// Возвращаемое значение
//  НЕТ
Процедура ВвестиДокументСобытиеИзМокселя(Элемент)

	Если ТипЗнч(ЭтаФорма.ТекущийЭлемент) <> Тип("ПолеТабличногоДокумента") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяОбласть = ЭтаФорма.ТекущийЭлемент.ТекущаяОбласть;
	
	ИндексСписка = Число(Сред(Элемент.Имя, 2));

	ВыбранныйЭлемент = мСписокДокументовДобавления.Получить(ИндексСписка);
	
	ОбъектСобытия = Документы.Событие.СоздатьДокумент();
	
	Если ТекущаяОбласть <> Неопределено Тогда
		Если ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ПолеТабличногоДокументаНеделя Тогда
			ОбъектСобытия.НачалоСобытия = ОпределитьДатыОбластиНедели(ТекущаяОбласть, Истина);
			ОбъектСобытия.ОкончаниеСобытия = ОпределитьДатыОбластиНедели(ТекущаяОбласть, Ложь);
		Иначе
			ОбъектСобытия.НачалоСобытия = ОпределитьДатыОбластиДня(ТекущаяОбласть, Истина);
			ОбъектСобытия.ОкончаниеСобытия = ОпределитьДатыОбластиДня(ТекущаяОбласть, Ложь);
			Если ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ПолеТабличногоДокументаДеньВторой И ТекущаяОбласть.Лево > 40 Тогда
				ОбъектСобытия.НачалоСобытия = ОбъектСобытия.НачалоСобытия + 60*60*24;
				ОбъектСобытия.ОкончаниеСобытия = ОбъектСобытия.ОкончаниеСобытия + 60*60*24;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;

	ОбъектСобытия.ВидСобытия      = ВыбранныйЭлемент.Значение[0];
	ОбъектСобытия.ТипСобытия      = ВыбранныйЭлемент.Значение[1];
	ОбъектСобытия.ОписаниеСобытия = ТемаНовогоСобытия;
	ОбъектСобытия.Ответственный   = ПользовательКалендаря;

	ФормаВыбора = ОбъектСобытия.ПолучитьФорму(,ЭтаФорма);
	ФормаВыбора.РежимВыбора = Истина;
	ФормаВыбора.Открыть();

	КнопкаФормы = ЭлементыФормы.ВвестиДокумент;

	КнопкаФормы.Заголовок = СокрЛП(Строка(ВыбранныйЭлемент.Значение[0]));
	КнопкаФормы.Подсказка = "Ввести новое " + ВыбранныйЭлемент.Значение[1] + " событие -  " + ВыбранныйЭлемент.Значение[0];
	КнопкаФормы.Картинка  = ?(ВыбранныйЭлемент.Значение[1] = Перечисления.ВходящееИсходящееСобытие.Исходящее, БиблиотекаКартинок.ИсходящееСобытие, БиблиотекаКартинок.ВходящееСобытие);
	
	КнопкаФормы = ЭлементыФормы.ВвестиДокументНеделя;

	КнопкаФормы.Заголовок = СокрЛП(Строка(ВыбранныйЭлемент.Значение[0]));
	КнопкаФормы.Подсказка = "Ввести новое " + ВыбранныйЭлемент.Значение[1] + " событие -  " + ВыбранныйЭлемент.Значение[0];
	КнопкаФормы.Картинка  = ?(ВыбранныйЭлемент.Значение[1] = Перечисления.ВходящееИсходящееСобытие.Исходящее, БиблиотекаКартинок.ИсходящееСобытие, БиблиотекаКартинок.ВходящееСобытие);
	
	мМассивЗначенийБыстрогоСобытия = Новый Массив;
	мМассивЗначенийБыстрогоСобытия.Добавить(ВыбранныйЭлемент.Значение[0]);
	мМассивЗначенийБыстрогоСобытия.Добавить(ВыбранныйЭлемент.Значение[1]);
	
КонецПроцедуры

// Функция определяет по области ячеек табличного документа
//  дату начала и дату окончания данной области в ПолеТабличногоДокументаДень.
//
// Параметры
//  ТекущаяОбласть - Область ячеек табличного документа.
//  Начало - Булево, признак определения даты начала или окончания.
//
// Возвращаемое значение:
//   Дата
//
Функция ОпределитьДатыОбластиДня(ТекущаяОбласть, Начало)

	СтрокаДаты = СтрЗаменить((Строка(Год(ДатаКалендаря))),Символ(160),"");

	МесяцКалендаря = ?(Месяц(ДатаКалендаря) < 10, ("0" + Строка(Месяц(ДатаКалендаря))), Строка(Месяц(ДатаКалендаря)));
	СтрокаДаты = СтрокаДаты + МесяцКалендаря;

	ДеньКалендаря = ?(День(ДатаКалендаря)<10, ("0" + Строка(День(ДатаКалендаря))), Строка(День(ДатаКалендаря)));
	СтрокаДаты = СтрокаДаты + ДеньКалендаря;
	
	Если Начало Тогда
		Верх = ТекущаяОбласть.Верх;
		Если Верх > 48 Тогда
			Возврат КонецДня(ДатаКалендаря);
		ИначеЕсли Верх = 48 Тогда
			Возврат (КонецДня(ДатаКалендаря) - 60 * 30 + 1);
		ИначеЕсли Верх <= 1 Тогда
			Возврат НачалоДня(ДатаКалендаря);
		Иначе
			Если ((Верх-1)/2) = Цел(((Верх-1)/2)) Тогда
				ЧислоЧаса = (Верх-1)/2;
				СтрокаДаты = СтрокаДаты + ?(ЧислоЧаса<10, ("0"+Строка(ЧислоЧаса)),(Строка(ЧислоЧаса))) + "0000";
				Возврат Дата(СтрокаДаты);
			Иначе
				ЧислоЧаса = Цел((Верх-1)/2);
				СтрокаДаты = СтрокаДаты + ?(ЧислоЧаса<10, ("0"+Строка(ЧислоЧаса)),(Строка(ЧислоЧаса))) + "3000";
				Возврат Дата(СтрокаДаты);
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Низ = ТекущаяОбласть.Низ;
		Если Низ >= 48 Тогда
			Возврат КонецДня(ДатаКалендаря);
		ИначеЕсли Низ < 1 Тогда
			Возврат НачалоДня(ДатаКалендаря);
		ИначеЕсли Низ = 1 Тогда
			Возврат (НачалоДня(ДатаКалендаря) + 60 * 30);
		Иначе
			Если (Низ/2) = Цел((Низ)/2) Тогда
				ЧислоЧаса = Низ/2;
				СтрокаДаты = СтрокаДаты + ?(ЧислоЧаса<10, ("0"+Строка(ЧислоЧаса)),(Строка(ЧислоЧаса))) + "0000";
				Возврат Дата(СтрокаДаты);
			Иначе
				ЧислоЧаса = Цел(Низ/2);
				СтрокаДаты = СтрокаДаты + ?(ЧислоЧаса<10, ("0"+Строка(ЧислоЧаса)),(Строка(ЧислоЧаса))) + "3000";
				Возврат Дата(СтрокаДаты);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;

КонецФункции

// Функция определяет по области ячеек табличного документа
//  дату начала и дату окончания данной области в ПолеТабличногоДокументаНеделя.
//
// Параметры
//  ТекущаяОбласть - Область ячеек табличного документа.
//  Начало - Булево, признак определения даты начала или окончания.
//
// Возвращаемое значение:
//   Дата
//
Функция ОпределитьДатыОбластиНедели(ТекущаяОбласть, Начало)

	ТекущаяДата = ДатаКалендаря;

	Для каждого СтрокаТаблицы Из мТаблицаЯчеекИДатНедели Цикл
		Если Начало Тогда
			Если ТекущаяОбласть.Лево >= СтрокаТаблицы.НомерНачальнойЯчейки И ТекущаяОбласть.Лево <= СтрокаТаблицы.НомерКонечнойЯчейки Тогда
				ТекущаяДата = СтрокаТаблицы.ДатаНедели;
				Прервать;
			КонецЕсли;
		Иначе
			Если ТекущаяОбласть.Право >= СтрокаТаблицы.НомерНачальнойЯчейки И ТекущаяОбласть.Право <= СтрокаТаблицы.НомерКонечнойЯчейки Тогда
				ТекущаяДата = СтрокаТаблицы.ДатаНедели;
				Прервать;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла; 
	
	СтрокаДаты = СтрЗаменить((Строка(Год(ТекущаяДата))),Символ(160),"");

	МесяцКалендаря = ?(Месяц(ТекущаяДата) < 10, ("0" + Строка(Месяц(ТекущаяДата))), Строка(Месяц(ТекущаяДата)));
	СтрокаДаты = СтрокаДаты + МесяцКалендаря;

	ДеньКалендаря = ?(День(ТекущаяДата)<10, ("0" + Строка(День(ТекущаяДата))), Строка(День(ТекущаяДата)));
	СтрокаДаты = СтрокаДаты + ДеньКалендаря;
	
	Если Начало Тогда
		Верх = ТекущаяОбласть.Верх - 2;
		Если Верх > 48 Тогда
			Возврат КонецДня(СтрокаДаты);
		ИначеЕсли Верх = 48 Тогда
			Возврат (КонецДня(СтрокаДаты) - 60 * 30 + 1);
		ИначеЕсли Верх <= 1 Тогда
			Возврат НачалоДня(СтрокаДаты);
		Иначе
			Если ((Верх-1)/2) = Цел(((Верх-1)/2)) Тогда
				ЧислоЧаса = (Верх-1)/2;
				СтрокаДаты = СтрокаДаты + ?(ЧислоЧаса<10, ("0"+Строка(ЧислоЧаса)),(Строка(ЧислоЧаса))) + "0000";
				Возврат Дата(СтрокаДаты);
			Иначе
				ЧислоЧаса = Цел((Верх-1)/2);
				СтрокаДаты = СтрокаДаты + ?(ЧислоЧаса<10, ("0"+Строка(ЧислоЧаса)),(Строка(ЧислоЧаса))) + "3000";
				Возврат Дата(СтрокаДаты);
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Низ = ТекущаяОбласть.Низ - 2;
		Если Низ >= 48 Тогда
			Возврат КонецДня(СтрокаДаты);
		ИначеЕсли Низ < 1 Тогда
			Возврат НачалоДня(СтрокаДаты);
		ИначеЕсли Низ = 1 Тогда
			Возврат (НачалоДня(СтрокаДаты) + 60 * 30);
		Иначе
			Если (Низ/2) = Цел((Низ)/2) Тогда
				ЧислоЧаса = Низ/2;
				СтрокаДаты = СтрокаДаты + ?(ЧислоЧаса<10, ("0"+Строка(ЧислоЧаса)),(Строка(ЧислоЧаса))) + "0000";
				Возврат Дата(СтрокаДаты);
			Иначе
				ЧислоЧаса = Цел(Низ/2);
				СтрокаДаты = СтрокаДаты + ?(ЧислоЧаса<10, ("0"+Строка(ЧислоЧаса)),(Строка(ЧислоЧаса))) + "3000";
				Возврат Дата(СтрокаДаты);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;

КонецФункции // ОпределитьДатыОбластиНедели()

// Процедура меняет текущую страницу панели формы.
//
// Параметры
//  ИмяЗакладки - Строка, имя новой страницы
//
// Возвращаемое значение
//  НЕТ
Процедура УстановитьЗакладку(ИмяЗакладки)

	Если ИмяЗакладки = "Неделя" И НЕ мБылоПервоеЗаполнениеНедели Тогда
	
		Если ОбновитьНеделю[2] Тогда
			СобратьДокументыНедели(ОтображатьЗапланированныеСобытия, ТипСобытияКалендаря, ОтображатьЗаказы, ОтображаемыеЗаказы);
		КонецЕсли;
		ЗаполнитьТаблицуНедели();
		
		ОбновитьДень[1] = ДатаНачалаНедели;
		ОбновитьДень[2] = Ложь;
		
		ОбновитьНеделю[0] = Ложь;
		ОбновитьНеделю[1] = ДатаНачалаНедели;
		ОбновитьНеделю[2] = Ложь;

		ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы[ИмяЗакладки];

		Если мФормаИндикации.Открыта() Тогда
			мФормаИндикации.Закрыть();
		КонецЕсли;

	Иначе

		ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы[ИмяЗакладки];

		ОбновитьИнформациюНаФорме();

	КонецЕсли; 
	
	СостояниеТулбараФормы();
	
КонецПроцедуры

// Процедура меняет свойства кнопок конмандной панели формы.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение
//  НЕТ
Процедура СостояниеТулбараФормы()

	Для каждого Страница Из ЭлементыФормы.ПанельФормы.Страницы Цикл
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки[Страница.Имя].Пометка = (Страница = ЭлементыФормы.ПанельФормы.ТекущаяСтраница);
	КонецЦикла;

	Если ЭлементыФормы.ПанельФормы.ТекущаяСтраница.Имя = "Список" Тогда
		Если ДатаНач = Дата("00010101000000") И ДатаКон = Дата("00010101000000") Тогда
			ЭтаФорма.Заголовок = "Календарь пользователя: " + СокрЛП(ПользовательКалендаря.Наименование);
		Иначе
			ЭтаФорма.Заголовок = "Календарь пользователя: " + СокрЛП(ПредставлениеПериода(ДатаНач,ДатаКон)) + ", " + СокрЛП(ПользовательКалендаря.Наименование);
		КонецЕсли; 
	ИначеЕсли ЭлементыФормы.ПанельФормы.ТекущаяСтраница.Имя = "День" Тогда
		СтрокаДня = Формат(ДатаКалендаря, "ДЛФ=DD") + ", " + ОпределитьДеньНедели(ДеньНедели(ДатаКалендаря));
		ЭтаФорма.Заголовок = "Календарь пользователя: " + "день (" + СтрокаДня + "), " +  СокрЛП(ПользовательКалендаря.Наименование);
	ИначеЕсли ЭлементыФормы.ПанельФормы.ТекущаяСтраница.Имя = "Неделя" Тогда
		СтрокаНедели = Формат(НачалоНедели(ДатаКалендаря), "ДФ='dd MMMM yyyy'") + " г. - " + Формат(КонецНедели(ДатаКалендаря), "ДФ='dd MMMM yyyy'") + " г.";
		ЭтаФорма.Заголовок = "Календарь пользователя: " + "неделя (" + СтрокаНедели + "), " +  СокрЛП(ПользовательКалендаря.Наименование);
	ИначеЕсли ЭлементыФормы.ПанельФормы.ТекущаяСтраница.Имя = "Месяц" Тогда
		СтрокаМесяца = Формат(ДатаКалендаря, "ДФ=ММММ") + ", " + Формат(ДатаКалендаря, "ДФ=yyyy") + " г.";
		ЭтаФорма.Заголовок = "Календарь пользователя: " + "месяц (" + СтрокаМесяца + "), " +  СокрЛП(ПользовательКалендаря.Наименование);
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается из обработчиков ПриИзменении элементов формы
//  ПолеКалендаря и ПолеКалендаряНеделя
//
// Параметры
//  Элемент - элемент формы ПолеКалендаря или ПолеКалендаряНеделя
//
// Возвращаемое значение
//  НЕТ
Процедура ПриИзмененииДатыКалендаря(Элемент)

	Если НачалоМесяца(Элемент.Значение) <> ДатаНачалаМесяцаЗапроса Тогда
		ДатаНачалаМесяцаЗапроса = НачалоМесяца(Элемент.Значение);
		ОбновитьМесяц[0] = Истина;
	КонецЕсли; 

	Если ДатаНачалаНедели <> НачалоНедели(Элемент.Значение) Тогда
		ДатаНачалаНедели = НачалоНедели(Элемент.Значение);
		ОбновитьНеделю[0] = Истина;
	КонецЕсли; 
	
	ОбновитьДень[0] = Истина;
	
	ОбновитьИнформациюНаФорме();
	
КонецПроцедуры

// Процедура вызывается из из различных процедур и проверяет а при необходимости
//  производит обновление информации календаря и списка сделок
//
// Параметры
//  НЕТ
//
// Возвращаемое значение
//  НЕТ
Процедура ОбновитьИнформациюНаФорме()

	Если ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.Список Тогда
		Если ОбновитьСписок[0] Тогда
			ОбновитьЗаказыСобытия(ОбновитьСписок[1]);
		КонецЕсли;
		ОбновитьСписок[0] = Ложь;
		ОбновитьСписок[1] = Истина;
	ИначеЕсли ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.День Тогда
		Если ОбновитьДень[0] Тогда
			Если НачалоНедели(ОбновитьДень[1]) <> ДатаНачалаНедели ИЛИ ОбновитьДень[2] Тогда
				СобратьДокументыНедели(ОтображатьЗапланированныеСобытия, ТипСобытияКалендаря, ОтображатьЗаказы, ОтображаемыеЗаказы);
				ОбновитьНеделю[1] = ДатаНачалаНедели;
				ОбновитьНеделю[2] = Ложь;
			КонецЕсли;
			ЗаполнитьТаблицуДня();
		КонецЕсли;
		ОбновитьДень[0] = Ложь;
		ОбновитьДень[1] = НачалоДня(ДатаКалендаря);
		ОбновитьДень[2] = Ложь;
	ИначеЕсли ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.Неделя Тогда
		Если ОбновитьНеделю[0] Тогда
			Если ОбновитьНеделю[1] <> ДатаНачалаНедели ИЛИ ОбновитьНеделю[2] Тогда
				СобратьДокументыНедели(ОтображатьЗапланированныеСобытия, ТипСобытияКалендаря, ОтображатьЗаказы, ОтображаемыеЗаказы);
				ОбновитьДень[1] = ДатаНачалаНедели;
				ОбновитьДень[2] = Ложь;
			КонецЕсли;
			ЗаполнитьТаблицуНедели();
		КонецЕсли;
		ОбновитьНеделю[0] = Ложь;
		ОбновитьНеделю[1] = ДатаНачалаНедели;
		ОбновитьНеделю[2] = Ложь;
	ИначеЕсли ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.Месяц Тогда
		Если ОбновитьМесяц[0] Тогда
			Если ОбновитьМесяц[1] <> ДатаНачалаМесяцаЗапроса ИЛИ ОбновитьМесяц[2] Тогда
				СобратьДокументыМесяца(ОтображатьЗапланированныеСобытия, ТипСобытияКалендаря, ОтображатьЗаказы, ОтображаемыеЗаказы)
			КонецЕсли;
			ЗаполнитьТаблицуМесяца();
		КонецЕсли;
		ОбновитьМесяц[0] = Ложь;
		ОбновитьМесяц[1] = ДатаНачалаМесяцаЗапроса;
		ОбновитьМесяц[2] = Ложь;
	КонецЕсли;

	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли;

КонецПроцедуры

// Процедура изменяет доступность кнопок командной панели КоманднаяПанельСделкиДень
//
// Параметры
//  НЕТ
//
// Возвращаемое значение
//  НЕТ
Процедура ДоступностьКнопокКоманднойПанели_СделкиДень()

	Элемент = ЭлементыФормы.СделкиДень;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Если ТипЗнч(Элемент.ТекущиеДанные.Документ) = Тип("ДокументСсылка.ЗаказПокупателя") ИЛИ ТипЗнч(Элемент.ТекущиеДанные.Документ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			ЭлементыФормы.КоманднаяПанельСделкиДень.Кнопки.АнализЗаказа.Доступность = Истина;
			ЭлементыФормы.КоманднаяПанельСделкиДень.Кнопки.ДокументыПоЗаказу.Доступность = Истина;
		Иначе
			ЭлементыФормы.КоманднаяПанельСделкиДень.Кнопки.АнализЗаказа.Доступность = Ложь;
			ЭлементыФормы.КоманднаяПанельСделкиДень.Кнопки.ДокументыПоЗаказу.Доступность = Ложь;
		КонецЕсли;
		ЭлементыФормы.КоманднаяПанельСделкиДень.Кнопки.ПоКонтрагенту.Кнопки.СписокДокументов.Доступность = Истина;
		ЭлементыФормы.КоманднаяПанельСделкиДень.Кнопки.ПоКонтрагенту.Кнопки.СписокСобытий.Доступность    = Истина;
		ЭлементыФормы.КоманднаяПанельСделкиДень.Кнопки.ПоКонтрагенту.Кнопки.Взаиморасчеты.Доступность    = Истина;
		ЭлементыФормы.КоманднаяПанельСделкиДень.Кнопки.ПоКонтрагенту.Кнопки.ОтчетПоСобытиям.Доступность  = Истина;
	Иначе
		ЭлементыФормы.КоманднаяПанельСделкиДень.Кнопки.АнализЗаказа.Доступность                          = Ложь;
		ЭлементыФормы.КоманднаяПанельСделкиДень.Кнопки.ДокументыПоЗаказу.Доступность                     = Ложь;
		ЭлементыФормы.КоманднаяПанельСделкиДень.Кнопки.ПоКонтрагенту.Кнопки.СписокДокументов.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельСделкиДень.Кнопки.ПоКонтрагенту.Кнопки.СписокСобытий.Доступность    = Ложь;
		ЭлементыФормы.КоманднаяПанельСделкиДень.Кнопки.ПоКонтрагенту.Кнопки.Взаиморасчеты.Доступность    = Ложь;
		ЭлементыФормы.КоманднаяПанельСделкиДень.Кнопки.ПоКонтрагенту.Кнопки.ОтчетПоСобытиям.Доступность  = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обновляет данные в таблице списка.
//
Процедура ОбновитьТаблицуСписка()
	
	мФормаИндикации.Открыть();
	
	ОбновитьЗаказыСобытия(Ложь);
	
	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обновляет данные в календаря дня.
//
Процедура ОбновитьКалендарьДня()

	ОбновитьДень[0] = Истина;
	ОбновитьДень[2] = Истина;

	ОбновитьИнформациюНаФорме();
	
КонецПроцедуры

// Процедура обновляет данные в календаря недели.
//
Процедура ОбновитьКалендарьНеделя()

	ОбновитьНеделю[0] = Истина;
	ОбновитьНеделю[2] = Истина;

	ОбновитьИнформациюНаФорме();
	
КонецПроцедуры

// Процедура обновляет данные в календаря месяца.
//
Процедура ОбновитьКалендарьМесяц()

	ОбновитьМесяц[0] = Истина;
	ОбновитьМесяц[2] = Истина;

	ОбновитьИнформациюНаФорме();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()

	мФормаИндикации.Открыть();
	
	ОбновитьЗаказыСобытия(Ложь);
	
	ОпределитьКонтрагентаФормы();

	КнопкиВводаДокументов = ЭлементыФормы.ВвестиДокумент.Кнопки;
	КнопкиВводаДокументов.Очистить();
	
	КнопкиВводаДокументовНеделя = ЭлементыФормы.ВвестиДокументНеделя.Кнопки;
	КнопкиВводаДокументовНеделя.Очистить();
	
	КнопкиТулбара = ЭлементыФормы.КонтекстноеМенюМокселя.Кнопки;
	КнопкиТулбара.Очистить();

	Для каждого ЭлементСписка Из мСписокДокументовДобавления Цикл
		
		НоваяКнопка = КнопкиВводаДокументов.Добавить(("_" + мСписокДокументовДобавления.Индекс(ЭлементСписка)), ТипКнопкиКоманднойПанели.Действие, ЭлементСписка.Представление, Новый Действие("ВвестиДокументСобытие"));
		НоваяКнопка.Картинка = ЭлементСписка.Картинка;
		
		НоваяКнопка = КнопкиВводаДокументовНеделя.Добавить(("_" + мСписокДокументовДобавления.Индекс(ЭлементСписка)), ТипКнопкиКоманднойПанели.Действие, ЭлементСписка.Представление, Новый Действие("ВвестиДокументСобытиеНеделя"));
		НоваяКнопка.Картинка = ЭлементСписка.Картинка;
		
		НоваяКнопка = КнопкиТулбара.Добавить(("_" + мСписокДокументовДобавления.Индекс(ЭлементСписка)), ТипКнопкиКоманднойПанели.Действие, ЭлементСписка.Представление, Новый Действие("ВвестиДокументСобытиеИзМокселя"));
		НоваяКнопка.Картинка = ЭлементСписка.Картинка;
		
	КонецЦикла;
	
	ИсторияОтборов = ВосстановитьЗначение("ИсторииОтборовКалендаряПользователя");
	Если ТипЗнч(ИсторияОтборов) = Тип("СписокЗначений") Тогда
		мСписокИсторииОтбора = ИсторияОтборов;
	КонецЕсли; 
	
	СформироватьПодменюПоСпискуАктуальныхОтборов();
	СостояниеТулбараФормы();
	
	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	ФормаКалендарь = Обработки.КалендарьПользователя.ПолучитьФорму(,, "КалендарьПользователя_" + СокрЛП(ПользовательКалендаря.УникальныйИдентификатор()));
	Если ФормаКалендарь.Открыта() Тогда
		ФормаКалендарь.Активизировать();
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	ЭтаФорма.КлючУникальности = "КалендарьПользователя_" + СокрЛП(ПользовательКалендаря.УникальныйИдентификатор());
	
	мФормаИндикации.КомментарийОбработкиДанных = "Выполняется заполнение начальных настроек ...";
	мФормаИндикации.МаксимальноеЗначение = 100;
	мФормаИндикации.Значение = 50;
	мФормаИндикации.Открыть();
	
	ДатаКалендаря = НачалоДня(ТекущаяДата());
	мДатаКалендаря = ДатаКалендаря;
	ДатаНачалаНедели = НачалоНедели(ДатаКалендаря);
	
	ПрочитатьСохраненныеЗначенияПользователя();
	
	мМассивЗначенийБыстрогоСобытия = ВосстановитьЗначение("ЗначениеБыстрогоВводаСобытияКалендаря");

	Если ТипЗнч(мМассивЗначенийБыстрогоСобытия) = Тип("Массив") И мМассивЗначенийБыстрогоСобытия[0] <> Неопределено И мМассивЗначенийБыстрогоСобытия[1] <> Неопределено Тогда
	
		КнопкаФормы = ЭлементыФормы.ВвестиДокумент;

		КнопкаФормы.Заголовок = СокрЛП(Строка(мМассивЗначенийБыстрогоСобытия[0]));
		КнопкаФормы.Подсказка = "Ввести новое " + мМассивЗначенийБыстрогоСобытия[1] + " событие -  " + мМассивЗначенийБыстрогоСобытия[0];
		КнопкаФормы.Картинка  = ?(мМассивЗначенийБыстрогоСобытия[1] = Перечисления.ВходящееИсходящееСобытие.Исходящее, БиблиотекаКартинок.ИсходящееСобытие, БиблиотекаКартинок.ВходящееСобытие);

		КнопкаФормы = ЭлементыФормы.ВвестиДокументНеделя;

		КнопкаФормы.Заголовок = СокрЛП(Строка(мМассивЗначенийБыстрогоСобытия[0]));
		КнопкаФормы.Подсказка = "Ввести новое " + мМассивЗначенийБыстрогоСобытия[1] + " событие -  " + мМассивЗначенийБыстрогоСобытия[0];
		КнопкаФормы.Картинка  = ?(мМассивЗначенийБыстрогоСобытия[1] = Перечисления.ВходящееИсходящееСобытие.Исходящее, БиблиотекаКартинок.ИсходящееСобытие, БиблиотекаКартинок.ВходящееСобытие);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ОбработкаЗаписиНовогоОбъекта формы.
//
Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)

	ЗаписьДокументаСобытие();
	
КонецПроцедуры

// Обработчик события ПриПовторномОткрытии формы.
//
Процедура ПриПовторномОткрытии(СтандартнаяОбработка)
	
	мФормаИндикации.Открыть();
	
	ОбновитьЗаказыСобытия(Ложь);
	
	ОпределитьКонтрагентаФормы();
	
	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ОбновлениеОтображения формы.
//
Процедура ОбновлениеОтображения()

	ЭлементыФормы.ПолеТабличногоДокументаДень.ТолькоПросмотр       = Истина;
	ЭлементыФормы.ПолеТабличногоДокументаДеньВторой.ТолькоПросмотр = Истина;
	ЭлементыФормы.ПолеТабличногоДокументаНеделя.ТолькоПросмотр     = Истина;
	
	СформироватьПредставлениеДня();
	
	СостояниеКнопокСнятияОтбора();
	СостояниеКнопкиОтбораПоТекущемуЗначению();
	СостояниеКнопокОтбораПоВидуДокумента();

КонецПроцедуры

// Обработчик события ПриЗакрытии формы.
//
Процедура ПриЗакрытии()

	СохранитьЗначение("ЗначениеБыстрогоВводаСобытияКалендаря", мМассивЗначенийБыстрогоСобытия);
	СохранитьЗначение("ИсторииОтборовКалендаряПользователя", мСписокИсторииОтбора);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ОБРАБОТЧИКОВ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события ПриВыводеСтроки элемента формы ЗаказыИСобытияПредставление.
//
Процедура ЗаказыИСобытияПредставлениеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ТипЗнч(ДанныеСтроки.Документ) = Тип("ДокументСсылка.ЗаказПокупателя") ИЛИ ТипЗнч(ДанныеСтроки.Документ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
	
		Если ДанныеСтроки.ВыполненностьВторойЧастиЗаказа Тогда
			Если ТипЗнч(ДанныеСтроки.ВидОперации) = Тип("ПеречислениеСсылка.ВидыДействийПоЗаказамПокупателей") Тогда
				Если ДанныеСтроки.ВидОперации = Перечисления.ВидыДействийПоЗаказамПокупателей.ОтгрузкаПоЗаказу Тогда
					ОформлениеСтроки.ЦветФона = WebЦвета.НейтральноЗеленый;
				Иначе
					ОформлениеСтроки.ЦветФона = WebЦвета.ТусклоРозовый;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ДанныеСтроки.ВидОперации) = Тип("ПеречислениеСсылка.ВидыДействийПоЗаказамПоставщикам") Тогда
				Если ДанныеСтроки.ВидОперации = Перечисления.ВидыДействийПоЗаказамПоставщикам.ОплатаПоЗаказу Тогда
					ОформлениеСтроки.ЦветФона = WebЦвета.НейтральноЗеленый;
				Иначе
					ОформлениеСтроки.ЦветФона = WebЦвета.ТусклоРозовый;
				КонецЕсли;
			Иначе
				ОформлениеСтроки.ЦветФона = Новый Цвет;
			КонецЕсли; 
		Иначе
			ОформлениеСтроки.ЦветФона = Новый Цвет;
		КонецЕсли; 
	
	КонецЕсли; 
	
	ОформлениеСтроки.Ячейки.Тип.ОтображатьТекст    = Ложь;
	ОформлениеСтроки.Ячейки.Тип.ОтображатьФлажок   = Ложь;
	ОформлениеСтроки.Ячейки.Тип.ОтображатьКартинку = Истина;
	
	Если ДанныеСтроки.Тип = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
		ОформлениеСтроки.Ячейки.Тип.ИндексКартинки = 0;
	Иначе
		ОформлениеСтроки.Ячейки.Тип.ИндексКартинки = 1;
	КонецЕсли; 

	ОформлениеСтроки.Ячейки.Состояние.ОтображатьТекст = Ложь;
	ОформлениеСтроки.Ячейки.Состояние.ОтображатьФлажок = Ложь;
	ОформлениеСтроки.Ячейки.Состояние.ОтображатьКартинку = Истина;
	Если ДанныеСтроки.Состояние = Перечисления.СостоянияСобытий.Запланировано Тогда
		Если ТипЗнч(ДанныеСтроки.Документ) = Тип("ДокументСсылка.Событие") Тогда
			ОформлениеСтроки.Ячейки.Состояние.ИндексКартинки = 6;
		Иначе
			ОформлениеСтроки.Ячейки.Состояние.ИндексКартинки = 2;
		КонецЕсли; 
	ИначеЕсли ДанныеСтроки.Состояние = Перечисления.СостоянияСобытий.Завершено Тогда
		Если ТипЗнч(ДанныеСтроки.Документ) = Тип("ДокументСсылка.Событие") Тогда
			ОформлениеСтроки.Ячейки.Состояние.ИндексКартинки = 4;
		Иначе
			ОформлениеСтроки.Ячейки.Состояние.ИндексКартинки = 0;
		КонецЕсли; 
	ИначеЕсли ДанныеСтроки.Состояние.Пустая() Тогда
		Если ТипЗнч(ДанныеСтроки.Документ) = Тип("ДокументСсылка.Событие") Тогда
			ОформлениеСтроки.Ячейки.Состояние.ИндексКартинки = 3;
		Иначе
			ОформлениеСтроки.Ячейки.Состояние.ИндексКартинки = 1;
		КонецЕсли; 
	Иначе
		ОформлениеСтроки.Ячейки.Состояние.ИндексКартинки = 3;
	КонецЕсли; 

	ОформлениеСтроки.Ячейки.Важность.ОтображатьТекст = Ложь;
	ОформлениеСтроки.Ячейки.Важность.ОтображатьФлажок = Ложь;
	ОформлениеСтроки.Ячейки.Важность.ОтображатьКартинку = Истина;
	Если ДанныеСтроки.Важность = Перечисления.Важность.Высокая Тогда
		ОформлениеСтроки.Ячейки.Важность.ИндексКартинки = 0;
	ИначеЕсли ДанныеСтроки.Важность = Перечисления.Важность.Низкая Тогда
		ОформлениеСтроки.Ячейки.Важность.ИндексКартинки = 1;
	Иначе
		ОформлениеСтроки.Ячейки.Важность.Картинка = Новый Картинка;
	КонецЕсли; 

	Если НЕ ДанныеСтроки.ВидОперации.Пустая() И ТипЗнч(ДанныеСтроки.ВидОперации) = Тип("ПеречислениеСсылка.ВидыСобытий") Тогда
		ОформлениеСтроки.Ячейки.ВидОперации.ОтображатьФлажок   = Ложь;
		ОформлениеСтроки.Ячейки.ВидОперации.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ВидОперации.ИндексКартинки     = ОпределитьИндексКартинкиВидаСобытия(ДанныеСтроки.ВидОперации);
	ИначеЕсли ДанныеСтроки.ВидОперации = Перечисления.ВидыДействийПоЗаказамПокупателей.ОтгрузкаПоЗаказу Тогда
		ОформлениеСтроки.Ячейки.ВидОперации.ОтображатьФлажок   = Ложь;
		ОформлениеСтроки.Ячейки.ВидОперации.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ВидОперации.ИндексКартинки     = 5;
	ИначеЕсли ДанныеСтроки.ВидОперации = Перечисления.ВидыДействийПоЗаказамПокупателей.ОплатаПоЗаказу Тогда
		ОформлениеСтроки.Ячейки.ВидОперации.ОтображатьФлажок   = Ложь;
		ОформлениеСтроки.Ячейки.ВидОперации.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ВидОперации.ИндексКартинки     = 6;
	ИначеЕсли ДанныеСтроки.ВидОперации = Перечисления.ВидыДействийПоЗаказамПоставщикам.ПоступлениеПоЗаказу Тогда
		ОформлениеСтроки.Ячейки.ВидОперации.ОтображатьФлажок   = Ложь;
		ОформлениеСтроки.Ячейки.ВидОперации.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ВидОперации.ИндексКартинки     = 9;
	ИначеЕсли ДанныеСтроки.ВидОперации = Перечисления.ВидыДействийПоЗаказамПоставщикам.ОплатаПоЗаказу Тогда
		ОформлениеСтроки.Ячейки.ВидОперации.ОтображатьФлажок   = Ложь;
		ОформлениеСтроки.Ячейки.ВидОперации.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ВидОперации.ИндексКартинки     = 10;
	Иначе
		ОформлениеСтроки.Ячейки.ВидОперации.ОтображатьФлажок   = Ложь;
		ОформлениеСтроки.Ячейки.ВидОперации.ОтображатьКартинку = Ложь;
	КонецЕсли;

	Если ДанныеСтроки.ДатаСобытия < НачалоДня(ТекущаяДата()) Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.ТемноКрасный;
	ИначеЕсли ДанныеСтроки.ДатаСобытия > КонецДня(ТекущаяДата()) Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.Серый;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеСтроки.Контрагент) = Тип("Строка") Тогда
		ОформлениеСтроки.Ячейки.Контрагент.Шрифт      = Новый Шрифт(,, Истина);
		ОформлениеСтроки.Ячейки.Контрагент.ЦветТекста = WebЦвета.ТемноСиний;
	КонецЕсли; 

КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы ЗаказыИСобытияПредставление.
//
Процедура ЗаказыИСобытияПредставлениеПриАктивизацииСтроки(Элемент)

	КнопкаРодитель = ЭлементыФормы.КоманднаяПанельСписка.Кнопки.ВводНаОсновании;
	КнопкаРодитель.Кнопки.Очистить();
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		СписокДокументов = НайтиДокументыДляОснования(Элемент.ТекущиеДанные.Документ.Метаданные().Имя);
		Для каждого Элементы Из СписокДокументов Цикл
			Кнопка = КнопкаРодитель.Кнопки.Добавить(Элементы.Значение, ТипКнопкиКоманднойПанели.Действие, Элементы.Представление, Новый Действие("ВводНаОсновании"));
			Кнопка.Картинка = мБиблиотекаКартинокДокумент;
		КонецЦикла;
		Если ТипЗнч(Элемент.ТекущиеДанные.Документ) = Тип("ДокументСсылка.Событие") Тогда
			ЭлементыФормы.КоманднаяПанельСписка.Кнопки.Подменю.Кнопки.АнализЗаказа.Доступность      = Ложь;
			ЭлементыФормы.КоманднаяПанельСписка.Кнопки.Подменю.Кнопки.ДокументыПоЗаказу.Доступность = Ложь;
		Иначе
			ЭлементыФормы.КоманднаяПанельСписка.Кнопки.Подменю.Кнопки.АнализЗаказа.Доступность      = Истина;
			ЭлементыФормы.КоманднаяПанельСписка.Кнопки.Подменю.Кнопки.ДокументыПоЗаказу.Доступность = Истина;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриАктивизацииЯчейки элемента формы ЗаказыИСобытияПредставление.
//
Процедура ЗаказыИСобытияПредставлениеПриАктивизацииЯчейки(Элемент)

	Доступность = Ложь;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		
		ТекКолонка = Элемент.ТекущаяКолонка;

		Если ТекКолонка <> Элемент.Колонки.Информация И ТекКолонка <> Элемент.Колонки.Состояние Тогда
			
			Доступность = Истина;
			
		КонецЕсли; 
		
	КонецЕсли; 

	ЭлементыФормы.КоманднаяПанельСписка.Кнопки.ОтборПоТекущемуЗначению.Доступность = Доступность;

	СостояниеКнопкиОтбораПоТекущемуЗначению();
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы ЗаказыИСобытияПредставление.
//
Процедура ЗаказыИСобытияПредставлениеПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		Если Элемент.ТекущиеДанные <> Неопределено И НЕ Элемент.ТекущиеДанные.Документ.Пустая() Тогда
			Элемент.ТекущиеДанные.Документ.Скопировать().ПолучитьФорму(,ЭтаФорма).Открыть();
		КонецЕсли;
	Иначе
		СписокВыбора = Новый СписокЗначений;
		Для каждого ВидСобытия Из Перечисления.ВидыСобытий Цикл
			СписокВыбора.Добавить(ВидСобытия, Строка(ВидСобытия));
		КонецЦикла; 
		СписокВыбора.Добавить("ЗаказПокупателя", "Заказ покупателя");
		СписокВыбора.Добавить("ЗаказПоставщику", "Заказ поставщику");

		Если Элемент.ТекущиеДанные <> Неопределено И НЕ Элемент.ТекущиеДанные.Документ.Пустая() Тогда
			Если ТипЗнч(Элемент.ТекущиеДанные.Документ) = Тип("ДокументСсылка.Событие") Тогда
				ЗначенияПоискаВСписке = Элемент.ТекущиеДанные.Документ.ВидСобытия;
			Иначе
				ЗначенияПоискаВСписке = Элемент.ТекущиеДанные.Документ.Метаданные().Имя;
			КонецЕсли; 
		КонецЕсли;

		НайденныйЭлементСписка = СписокВыбора.НайтиПоЗначению(ЗначенияПоискаВСписке);
		
		ВыбранныйЭлемент = СписокВыбора.ВыбратьЭлемент("Выберите тип документа", НайденныйЭлементСписка);
		
		Если ВыбранныйЭлемент <> Неопределено Тогда
			
			Если ТипЗнч(ВыбранныйЭлемент.Значение) = Тип("Строка") Тогда
				
				НовыйОбъект = Документы[ВыбранныйЭлемент.Значение].СоздатьДокумент();
				НовыйОбъект.Ответственный = ПользовательКалендаря;
				
				// Посмотрим на отборы
				// Контрагент
				ЭлементОтбора = СтруктураОтборов.Получить("Контрагент");
				Если ЭлементОтбора <> Неопределено Тогда
					Если ЭлементОтбора[0] = ВидСравнения.Равно Тогда
						НовыйОбъект.Контрагент = ЭлементОтбора[1];
					КонецЕсли; 
				КонецЕсли;
				
				ФормаОбъекта = НовыйОбъект.ПолучитьФорму(,ЭтаФорма);
				ФормаОбъекта.Открыть();
				
			Иначе
				
				Док = Документы.Событие.СоздатьДокумент();
				Док.Ответственный   = ПользовательКалендаря;
				Док.ВидСобытия      = ВыбранныйЭлемент.Значение;
				
				// Посмотрим на отборы
				// Контрагент
				ЭлементОтбора = СтруктураОтборов.Получить("Контрагент");
				Если ЭлементОтбора <> Неопределено Тогда
					Если ЭлементОтбора[0] = ВидСравнения.Равно Тогда
						Док.Контрагент = ЭлементОтбора[1];
					КонецЕсли; 
				КонецЕсли;
				
				// Тип события
				ЭлементОтбора = СтруктураОтборов.Получить("Тип");
				Если ЭлементОтбора <> Неопределено Тогда
					Если ЭлементОтбора[0] = ВидСравнения.Равно Тогда
						Док.ТипСобытия = ЭлементОтбора[1];
					КонецЕсли; 
				КонецЕсли;
				
				// Важность
				ЭлементОтбора = СтруктураОтборов.Получить("Важность");
				Если ЭлементОтбора <> Неопределено Тогда
					Если ЭлементОтбора[0] = ВидСравнения.Равно Тогда
						Док.Важность = ЭлементОтбора[1];
					КонецЕсли; 
				КонецЕсли;
				
				ФормаСобытия = Док.ПолучитьФорму(,ЭтаФорма);
				ФормаСобытия.Открыть();
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента формы ЗаказыИСобытияПредставление.
//
Процедура ЗаказыИСобытияПредставлениеПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;
	Если Элемент.ТекущиеДанные <> Неопределено И НЕ Элемент.ТекущиеДанные.Документ.Пустая() Тогда
		
		ФормаВыбора = Элемент.ТекущиеДанные.Документ.ПолучитьФорму(,ЭтаФорма);
		ФормаВыбора.РежимВыбора = Истина;
		ФормаВыбора.Открыть();
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы ЗаказыИСобытияПредставление.
//
Процедура ЗаказыИСобытияПредставлениеПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ОтветНаВопрос = Вопрос("Пометить объект на удаление?", РежимДиалогаВопрос.ДаНет);
	Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Элемент.ТекущиеДанные.Документ.ПолучитьОбъект();
	Попытка
		Объект.УстановитьПометкуУдаления(Истина);
	Исключение
		СообщитьОбОшибке(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ЗаписьДокументаСобытие();
	
КонецПроцедуры

// Обработчик события Очистка элемента формы ВыбКонтрагент.
//
Процедура ВыбКонтрагентОчистка(Элемент, СтандартнаяОбработка)
	
	Если СтруктураОтборов.Получить("Контрагент") <> Неопределено Тогда
		СтруктураОтборов.Удалить("Контрагент");
		
		мФормаИндикации.Открыть();
	
		ОбновитьЗаказыСобытия(Ложь);
		ДобавитьНовыйОтборВИсторию();

	КонецЕсли;
	
	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы ВыбКонтрагент.
//
Процедура ВыбКонтрагентНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Контрагенты = Справочники.Контрагенты.ПустаяСсылка();
	Выбран = ВвестиЗначение(Контрагенты, "Выберите контрагента");

	Если Выбран Тогда
		
		Если Контрагенты.ЭтоГруппа Тогда
			Возврат;
		КонецЕсли; 
		
		ВыбКонтрагент = Контрагенты;
		МассивОтбора = Новый Массив;
		МассивОтбора.Добавить(ВидСравнения.Равно);
		МассивОтбора.Добавить(Контрагенты);
		СтруктураОтборов.Вставить("Контрагент",МассивОтбора);
		
		мФормаИндикации.Открыть();
	
		ОбновитьЗаказыСобытия(Ложь);
		ДобавитьНовыйОтборВИсторию();

	КонецЕсли; 
	
	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ВыбКонтрагент.
//
Процедура ВыбКонтрагентПриИзменении(Элемент)

	Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.Контрагенты") И НЕ Элемент.Значение.Пустая() Тогда
		МассивОтбора = Новый Массив;
		МассивОтбора.Добавить(ВидСравнения.Равно);
		МассивОтбора.Добавить(Элемент.Значение);
		СтруктураОтборов.Вставить("Контрагент",МассивОтбора);
		
		мФормаИндикации.Открыть();
	
		ОбновитьЗаказыСобытия(Ложь);
		ДобавитьНовыйОтборВИсторию();
		
	КонецЕсли;
	
	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы СделкиКалендаря.
//
Процедура СделкиКалендаряПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ОформлениеСтроки.Ячейки.Контрагент.ОтображатьТекст    = Истина;
	ОформлениеСтроки.Ячейки.Контрагент.ОтображатьФлажок   = Ложь;
	ОформлениеСтроки.Ячейки.Контрагент.ОтображатьКартинку = Истина;
	
	Если ДанныеСтроки.ВидДокументаЗаказа = Перечисления.ВидыДействийПоЗаказамПокупателей.ОплатаПоЗаказу Тогда
		ОформлениеСтроки.Ячейки.Контрагент.ИндексКартинки = 6;
	ИначеЕсли ДанныеСтроки.ВидДокументаЗаказа = Перечисления.ВидыДействийПоЗаказамПокупателей.ОтгрузкаПоЗаказу Тогда
		ОформлениеСтроки.Ячейки.Контрагент.ИндексКартинки = 5;
	ИначеЕсли ДанныеСтроки.ВидДокументаЗаказа = Перечисления.ВидыДействийПоЗаказамПоставщикам.ОплатаПоЗаказу Тогда
		ОформлениеСтроки.Ячейки.Контрагент.ИндексКартинки = 10;
	ИначеЕсли ДанныеСтроки.ВидДокументаЗаказа = Перечисления.ВидыДействийПоЗаказамПоставщикам.ПоступлениеПоЗаказу Тогда
		ОформлениеСтроки.Ячейки.Контрагент.ИндексКартинки = 9;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫЗЫВАЕМЫЕ ПО НАЖАТИЮ КНОПОК КОМАНДНОЙ ПАНЕЛИ ФОРМЫ

// Обработчик события элемента КоманднаяПанельСписка.Интервал.
//
Процедура КоманднаяПанельСпискаИнтервал(Кнопка)

	МассивПериода = ВвестиПериод(ДатаНач, ДатаКон);
	
	Если МассивПериода = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	ДатаНач = МассивПериода[0];
	ДатаКон = МассивПериода[1];
	
	мФормаИндикации.Открыть();
	
	ОбновитьЗаказыСобытия(Ложь);
	
	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельСписка.СнятьОтбор.
//
Процедура КоманднаяПанельСпискаСнятьОтбор(Кнопка)
	
	СтруктураОтборов.Удалить("Контрагент");
	СтруктураОтборов.Удалить("Важность");
	СтруктураОтборов.Удалить("Тип");
	СтруктураОтборов.Удалить("ТипДокумента");
	СтруктураОтборов.Удалить("Номер");
	СтруктураОтборов.Удалить("ВидОперации");
	СтруктураОтборов.Удалить("ДатаСобытия");

	ДатаНач = Дата("00010101000000");
	ДатаКон = Дата("00010101000000");
	
	мФормаИндикации.Открыть();
	
	ОбновитьЗаказыСобытия(Ложь);
	ОпределитьКонтрагентаФормы();
	
	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельСписка.Взаиморасчеты.
//
Процедура КоманднаяПанельСпискаВзаиморасчеты(Кнопка)
	
	ТекущийКонтрагент = ОпределитьКонтрагента();

	ОтчетКонтрагента = Отчеты.ВедомостьВзаиморасчетыСКонтрагентами.Создать();
	
	ПараметрыНастройки = Новый Структура;
	ПараметрыНастройки.Вставить("ДатаНач", ДатаНач);
	ПараметрыНастройки.Вставить("ДатаКон", ДатаКон);
	ПараметрыНастройки.Вставить("РаскрашиватьИзмерения", Истина);
	ПараметрыНастройки.Вставить("ВыводитьИтогиПоВсемУровням", Истина);
	ПараметрыНастройки.Вставить("ВыбранныеПоля", Новый Структура("Регистратор"));
	ПараметрыНастройки.Вставить("Отбор", Новый Структура("Контрагент", ТекущийКонтрагент));
	ПараметрыНастройки.Вставить("ГруппировкиСтрок", Новый Структура("Контрагент, ДоговорКонтрагента, Сделка"));
	
	ОтчетКонтрагента.Настроить(ПараметрыНастройки);
	ФормаОтчета = ОтчетКонтрагента.ПолучитьОсновнуюФорму();
	ФормаОтчета.ОбновитьОтчет();
	ФормаОтчета.Открыть();
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельСписка.СписокДокументов.
//
Процедура КоманднаяПанельСпискаСписокДокументов(Кнопка)

	ТекущийКонтрагент = ОпределитьКонтрагента();
	
	ФормаЖурнала = ЖурналыДокументов.ДокументыКонтрагентов.ПолучитьФорму();

	ФормаЖурнала.Отбор.ДокументыПоКонтрагенту.Значение = ТекущийКонтрагент;
	ФормаЖурнала.Отбор.ДокументыПоКонтрагенту.Использование = Истина;
	ФормаЖурнала.Открыть();
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельСписка.АнализЗаказа.
//
Процедура КоманднаяПанельСпискаАнализЗаказа(Кнопка)
	
	Если ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные = Неопределено ИЛИ ТипЗнч(ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные.Документ) = Тип("ДокументСсылка.Событие") Тогда
		Возврат;
	КонецЕсли;

	ОтчетЗаказа = Отчеты.АнализЗаказа.Создать();

	ОтчетЗаказа.Заказ = ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные.Документ;
	ОтчетЗаказа.ДатаАнализа     = ТекущаяДата();

	ФормаОтчета = ОтчетЗаказа.ПолучитьФорму();
	ОтчетЗаказа.СформироватьОтчет(ФормаОтчета.ЭлементыФормы.ДокументРезультат);

	ФормаОтчета.Открыть();
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельСписка.ПерейтиКСделкам.
//
Процедура КоманднаяПанельСпискаПерейтиКСделкам(Кнопка)

	ФормаСделок = Обработки.ТекущиеСделки.ПолучитьФорму(,, "ТекущиеСделки_" + СокрЛП(ПользовательКалендаря.УникальныйИдентификатор()));
	ФормаСделок.ДатаНач =ДатаНач;
	ФормаСделок.ДатаКон =ДатаКон;

	СтруктураОтбораСделки = Новый Соответствие;
	ОтборКонтрагент = СтруктураОтборов.Получить("Контрагент");
	Если ОтборКонтрагент <> Неопределено Тогда
		СтруктураОтбораСделки.Вставить("Контрагент", ОтборКонтрагент);
	КонецЕсли;
	
	ОтборПользователь = СтруктураОтборов.Получить("Пользователь");
	Если ОтборПользователь <> Неопределено Тогда
		СтруктураОтбораСделки.Вставить("Пользователь", ОтборПользователь);
	КонецЕсли;

	ФормаСделок.СтруктураОтборов = СтруктураОтбораСделки;

	ФормаСделок.Открыть();
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельСписка.ОтборПоТекущемуКонтрагенту.
//
Процедура КоманднаяПанельСпискаОтборПоТекущемуЗначению(Кнопка)

	Если Кнопка.Пометка Тогда

		ИмяКолонки = ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущаяКолонка.Имя;

		Если ИмяКолонки = "ДатаДокумента" Тогда

			ДатаНач = Дата("00010101000000");
			ДатаКон = Дата("00010101000000");

		Иначе

			Если ИмяКолонки = "ВидДокумента" Тогда

				ИмяОтбора = "ТипДокумента";

			Иначе

				ИмяОтбора = ИмяКолонки;
				
			КонецЕсли; 

			СтруктураОтборов.Удалить(ИмяОтбора);
			
		КонецЕсли;

	Иначе

		ИмяКолонки = ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущаяКолонка.Имя;

		Если ИмяКолонки = "ДатаДокумента" Тогда

			ЗначениеОтбора = ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные[ИмяКолонки];

			ДатаНач = НачалоДня(ЗначениеОтбора);
			ДатаКон = КонецДня(ЗначениеОтбора);

		ИначеЕсли ИмяКолонки = "ДатаСобытия" Тогда

			ЗначениеОтбора = ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные[ИмяКолонки];

			МассивОтбора = Новый Массив;
			МассивОтбора.Добавить(ВидСравнения.Равно);
			МассивОтбора.Добавить(ЗначениеОтбора);
			МассивОтбора.Добавить(ЗначениеОтбора);
			СтруктураОтборов.Вставить("ДатаСобытия",МассивОтбора);
			
		Иначе

			МассивОтбора = Новый Массив;
		
			Если ИмяКолонки = "ВидДокумента" Тогда

				ИмяОтбора = "ТипДокумента";
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(ТипЗнч(ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные.Документ));
				ЗначениеОтбора = Новый ОписаниеТипов(МассивТипов);
				МассивОтбора.Добавить(ВидСравнения.Равно);

			Иначе

				ИмяОтбора = ИмяКолонки;
				ЗначениеОтбора = ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные[ИмяКолонки];
				МассивОтбора.Добавить(ВидСравнения.Равно);
				
			КонецЕсли; 
			
			Если ЗначениеОтбора = Неопределено Тогда

				Возврат;
				
			КонецЕсли; 

			МассивОтбора.Добавить(ЗначениеОтбора);
			СтруктураОтборов.Вставить(ИмяОтбора,МассивОтбора);
			
		КонецЕсли;
		
	КонецЕсли; 

	Кнопка.Пометка = НЕ Кнопка.Пометка;
	
	мФормаИндикации.Открыть();
	
	ОбновитьЗаказыСобытия(Ложь);
	ДобавитьНовыйОтборВИсторию();
	ОпределитьКонтрагентаФормы();
	
	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельСписка.ОтчетПоСобытиям.
//
Процедура КоманднаяПанельСпискаОтчетПоСобытиям(Кнопка)

	Если ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные <> Неопределено Тогда

		КонтрагентСтроки = ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные.Контрагент;

		ОбъектОтчета = Отчеты.ОтчетПоСобытиям.Создать();
		ОбъектОтчета.ЗаполнитьНачальныеНастройки();
		
		ОбъектОтчета.ДатаНачала    = ДатаНач;
		ОбъектОтчета.ДатаОкончания = ДатаКон;

		ОбъектОтчета.ПостроительОтчета.Отбор.Контрагент.Значение = КонтрагентСтроки;
		ОбъектОтчета.ПостроительОтчета.Отбор.Контрагент.Использование = Истина;
		
		ОбъектОтчета.ПостроительОтчета.ИзмеренияСтроки.Очистить();
		ОбъектОтчета.ПостроительОтчета.ИзмеренияСтроки.Добавить("Контрагент");
		
		ФормаОтчета = ОбъектОтчета.ПолучитьФорму();
		ФормаОтчета.НеЗаполнятьНастройкиПриОткрытии = Истина;
		ФормаОтчета.Открыть();
		ОбъектОтчета.СформироватьОтчет(ФормаОтчета.ЭлементыФормы.ПолеТабличногоДокумента);
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельСписка.Отборы.
//
Процедура КоманднаяПанельСпискаОтборы(Кнопка)

	ФормаОтбора = ПолучитьФорму("ФормаОтборов", ЭтаФорма);
	ФормаОтбора.ОткрытьМодально();
	
	ОпределитьКонтрагентаФормы();
	ДобавитьНовыйОтборВИсторию();
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельСписка.ОтборПоВидуДокументаВсеДокументы.
//
Процедура КоманднаяПанельСпискаОтборПоВидуДокументаВсеДокументы(Кнопка)

	СтруктураОтборов.Удалить("ТипДокумента");
	
	мФормаИндикации.Открыть();
	
	ОбновитьЗаказыСобытия();

	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельСписка.ОтборПоВидуДокументаСобытие.
//
Процедура КоманднаяПанельСпискаОтборПоВидуДокументаСобытие(Кнопка)

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.Событие"));
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(ВидСравнения.Равно);
	МассивОтбора.Добавить(Новый ОписаниеТипов(МассивТипов));
	СтруктураОтборов.Вставить("ТипДокумента",МассивОтбора);
	
	мФормаИндикации.Открыть();
	
	ОбновитьЗаказыСобытия();
	ДобавитьНовыйОтборВИсторию();

	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельСписка.ОтборПоВидуДокументаЗаказПокупателя.
//
Процедура КоманднаяПанельСпискаОтборПоВидуДокументаЗаказПокупателя(Кнопка)

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(ВидСравнения.Равно);
	МассивОтбора.Добавить(Новый ОписаниеТипов(МассивТипов));
	СтруктураОтборов.Вставить("ТипДокумента",МассивОтбора);
	
	мФормаИндикации.Открыть();
	
	ОбновитьЗаказыСобытия();
	ДобавитьНовыйОтборВИсторию();

	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельСписка.ОтборПоВидуДокументаЗаказПоставщику.
//
Процедура КоманднаяПанельСпискаОтборПоВидуДокументаЗаказПоставщику(Кнопка)
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(ВидСравнения.Равно);
	МассивОтбора.Добавить(Новый ОписаниеТипов(МассивТипов));
	СтруктураОтборов.Вставить("ТипДокумента",МассивОтбора);
	
	мФормаИндикации.Открыть();
	
	ОбновитьЗаказыСобытия();
	ДобавитьНовыйОтборВИсторию();

	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельСписка.СписокСобытий.
//
Процедура КоманднаяПанельСпискаСписокСобытий(Кнопка)

	ТекущийКонтрагент = ОпределитьКонтрагента();
	
	ФормаСписка = Документы.Событие.ПолучитьФормуСписка();

	ФормаСписка.Отбор.ДокументыПоКонтрагенту.Значение = ТекущийКонтрагент;
	ФормаСписка.Отбор.ДокументыПоКонтрагенту.Использование = Истина;
	ФормаСписка.Открыть();
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельСписка.ДокументыПоЗаказу.
//
Процедура КоманднаяПанельСпискаДокументыПоЗаказу(Кнопка)

	Если ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные <> Неопределено Тогда
		Если ТипЗнч(ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные.Документ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ФормаКритерияОтбора = КритерииОтбора.ДокументыПоЗаказуПокупателя.ПолучитьФорму();
			ФормаКритерияОтбора.ПараметрОтборПоЗначению = ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные.Документ;
			ФормаКритерияОтбора.Открыть();
		ИначеЕсли ТипЗнч(ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные.Документ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			ФормаКритерияОтбора = КритерииОтбора.ДокументыПоЗаказуПоставщику.ПолучитьФорму();
			ФормаКритерияОтбора.ПараметрОтборПоЗначению = ЭлементыФормы.ЗаказыИСобытияПредставление.ТекущиеДанные.Документ;
			ФормаКритерияОтбора.Открыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента ПолеКалендаря.
//
Процедура ПолеКалендаряПриИзменении(Элемент)

	Если ДатаКалендаря <> мДатаКалендаря Тогда

		мДатаКалендаря = ДатаКалендаря;
		ПриИзмененииДатыКалендаря(Элемент);
	
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента ПолеКалендаряНеделя.
//
Процедура ПолеКалендаряНеделяПриИзменении(Элемент)
	
	Если ДатаКалендаря <> мДатаКалендаря Тогда
	
		мДатаКалендаря = ДатаКалендаря;
		ПриИзмененииДатыКалендаря(Элемент);
	
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента СделкиДень.
//
Процедура СделкиДеньПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ОформлениеСтроки.Ячейки.ВидДокументаЗаказа.ОтображатьТекст    = Ложь;
	ОформлениеСтроки.Ячейки.ВидДокументаЗаказа.ОтображатьФлажок   = Ложь;
	ОформлениеСтроки.Ячейки.ВидДокументаЗаказа.ОтображатьКартинку = Истина;
	
	Если ДанныеСтроки.ВидДокументаЗаказа = Перечисления.ВидыДействийПоЗаказамПокупателей.ОплатаПоЗаказу Тогда
		ОформлениеСтроки.Ячейки.ВидДокументаЗаказа.ИндексКартинки = 6;
	ИначеЕсли ДанныеСтроки.ВидДокументаЗаказа = Перечисления.ВидыДействийПоЗаказамПокупателей.ОтгрузкаПоЗаказу Тогда
		ОформлениеСтроки.Ячейки.ВидДокументаЗаказа.ИндексКартинки = 5;
	ИначеЕсли ДанныеСтроки.ВидДокументаЗаказа = Перечисления.ВидыДействийПоЗаказамПоставщикам.ОплатаПоЗаказу Тогда
		ОформлениеСтроки.Ячейки.ВидДокументаЗаказа.ИндексКартинки = 10;
	ИначеЕсли ДанныеСтроки.ВидДокументаЗаказа = Перечисления.ВидыДействийПоЗаказамПоставщикам.ПоступлениеПоЗаказу Тогда
		ОформлениеСтроки.Ячейки.ВидДокументаЗаказа.ИндексКартинки = 9;
	КонецЕсли;

	ОформлениеСтроки.Ячейки.КартинкаДокумента.ОтображатьТекст    = Ложь;
	ОформлениеСтроки.Ячейки.КартинкаДокумента.ОтображатьФлажок   = Ложь;
	ОформлениеСтроки.Ячейки.КартинкаДокумента.ОтображатьКартинку = Истина;
	
	Если ДанныеСтроки.Документ = Неопределено Тогда
		ОформлениеСтроки.Ячейки.КартинкаДокумента.ИндексКартинки = 3;
	Иначе
		Если ДанныеСтроки.Документ.Проведен Тогда
			ОформлениеСтроки.Ячейки.КартинкаДокумента.ИндексКартинки = 0;
		ИначеЕсли ДанныеСтроки.Документ.ПометкаУдаления Тогда
			ОформлениеСтроки.Ячейки.КартинкаДокумента.ИндексКартинки = 1;
		Иначе
			ОформлениеСтроки.Ячейки.КартинкаДокумента.ИндексКартинки = 2;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ОбработкаРасшифровки элемента ПолеТабличногоДокументаДень.
//
Процедура ПолеТабличногоДокументаДеньОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)

	Если ТипЗнч(Расшифровка) = Тип("ДокументСсылка.Событие") Тогда
	
		СтандартнаяОбработка = Ложь;
		
		ДокументОбъект = Расшифровка.ПолучитьОбъект();
		ФормаВыбора = ДокументОбъект.ПолучитьФорму(,ЭтаФорма);
		ФормаВыбора.РежимВыбора = Истина;
		ФормаВыбора.Открыть();
	
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента СделкиДень.
//
Процедура СделкиДеньПриАктивизацииСтроки(Элемент)

	ДоступностьКнопокКоманднойПанели_СделкиДень();
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента СделкиДень.
//
Процедура СделкиДеньПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;

	Если Элемент.ТекущиеДанные <> Неопределено
	   И (ТипЗнч(Элемент.ТекущиеДанные.Документ) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(Элемент.ТекущиеДанные.Документ) = Тип("ДокументСсылка.ЗаказПоставщику"))
	   И НЕ Элемент.ТекущиеДанные.Документ.Пустая() Тогда
	
		ФормаВыбора = Элемент.ТекущиеДанные.Документ.ПолучитьФорму(,ЭтаФорма);
		ФормаВыбора.РежимВыбора = Истина;
		ФормаВыбора.Открыть();
	
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента СделкиДень.
//
Процедура СделкиДеньПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	Если Копирование Тогда
		
		Если Элемент.ТекущиеДанные <> Неопределено И НЕ ЗначениеНеЗаполнено(Элемент.ТекущиеДанные.Документ) Тогда

			НовыйОбъект = Элемент.ТекущиеДанные.Документ.Скопировать();
			НовыйОбъект.Ответственный = ПользовательКалендаря;
			ФормаОбъекта = НовыйОбъект.ПолучитьФорму(,ЭтаФорма);
			ФормаОбъекта.РежимВыбора = Истина;
			ФормаОбъекта.Открыть();
		
		КонецЕсли;
		
	Иначе

		СписокОбъектов = Новый СписокЗначений;
		СписокОбъектов.Добавить("ЗаказПокупателя", "Заказ покупателя");
		СписокОбъектов.Добавить("ЗаказПоставщику", "Заказ поставщику");
		
		ВыбранныйЭлемент = СписокОбъектов.ВыбратьЭлемент("Выберите тип документа", СписокОбъектов[0]);
		
		Если ВыбранныйЭлемент = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		
		НовыйОбъект = Документы[ВыбранныйЭлемент.Значение].СоздатьДокумент();
		НовыйОбъект.Ответственный = ПользовательКалендаря;
		ФормаОбъекта = НовыйОбъект.ПолучитьФорму(,ЭтаФорма);
		ФормаОбъекта.РежимВыбора = Истина;
		ФормаОбъекта.Открыть();
	
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента СделкиДень.
//
Процедура СделкиДеньПередУдалением(Элемент, Отказ)

	Отказ = Истина;
	
	Если Элемент.ТекущиеДанные <> Неопределено И ТипЗнч(Элемент.ТекущиеДанные.Документ) = Тип("ДокументСсылка.ЗаказПокупателя") И НЕ Элемент.ТекущиеДанные.Документ.Пустая() Тогда
	
		Если Элемент.ТекущиеДанные.Документ.ПометкаУдаления Тогда
			ТекстВопроса = "Снять с объекта пометку на удаление?";
		Иначе
			ТекстВопроса = "Пометить объект на удаление?";
		КонецЕсли;

		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		Если Ответ = КодВозвратаДиалога.Нет  Тогда
			Возврат;
		КонецЕсли;

		ОбъектДокумент = Элемент.ТекущиеДанные.Документ.ПолучитьОбъект();

		Попытка

			ОбъектДокумент.УстановитьПометкуУдаления(НЕ ОбъектДокумент.ПометкаУдаления);

			ОбновитьДень[0]   = Истина;
			ОбновитьДень[2]   = Истина;

			ОбновитьНеделю[0] = Истина;
			ОбновитьНеделю[2] = Истина;

			ОбновитьМесяц[0]  = Истина;
			ОбновитьМесяц[2]  = Истина;

			ОбновитьИнформациюНаФорме();
			
		Исключение
			
			Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
			
		КонецПопытки;
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ОбработкаРасшифровки элемента ПолеТабличногоДокументаМесяц.
//
Процедура ПолеТабличногоДокументаМесяцОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если ТипЗнч(Расшифровка) = Тип("Дата") Тогда

		Если НачалоДня(Расшифровка) <> НачалоДня(ДатаКалендаря) Тогда
			ДатаКалендаря = НачалоДня(Расшифровка);

			Если ДатаКалендаря <> мДатаКалендаря Тогда
				
				мДатаКалендаря = ДатаКалендаря;
				
				Если НачалоМесяца(ДатаКалендаря) <> ДатаНачалаМесяцаЗапроса Тогда
					ДатаНачалаМесяцаЗапроса = НачалоМесяца(ДатаКалендаря);
					ОбновитьМесяц[0] = Истина;
				КонецЕсли;
				
				Если ДатаНачалаНедели <> НачалоНедели(ДатаКалендаря) Тогда
					ДатаНачалаНедели = НачалоНедели(ДатаКалендаря);
					ОбновитьНеделю[0] = Истина;
				КонецЕсли; 

				ОбновитьДень[0] = Истина;
			
			КонецЕсли; 
			
		КонецЕсли; 
		
		ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.День;
	
		СостояниеТулбараФормы();
	
		ОбновитьИнформациюНаФорме();
		
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента ТЗСделок1.
//
Процедура ТЗСделок1ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	СделкиКалендаряПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента ТЗСделок2.
//
Процедура ТЗСделок2ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	СделкиКалендаряПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента ТЗСделок3.
//
Процедура ТЗСделок3ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	СделкиКалендаряПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента ТЗСделок4.
//
Процедура ТЗСделок4ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	СделкиКалендаряПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента ТЗСделок5.
//
Процедура ТЗСделок5ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	СделкиКалендаряПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента ТЗСделок6.
//
Процедура ТЗСделок6ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	СделкиКалендаряПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента ТЗСделок7.
//
Процедура ТЗСделок7ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	СделкиКалендаряПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента ТЗСделок1.
//
Процедура ТЗСделок1ПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента ТЗСделок2.
//
Процедура ТЗСделок2ПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента ТЗСделок3.
//
Процедура ТЗСделок3ПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента ТЗСделок4.
//
Процедура ТЗСделок4ПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента ТЗСделок5.
//
Процедура ТЗСделок5ПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента ТЗСделок6.
//
Процедура ТЗСделок6ПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента ТЗСделок7.
//
Процедура ТЗСделок7ПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента ТЗСделок1.
//
Процедура ТЗСделок1ПередУдалением(Элемент, Отказ)

	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента ТЗСделок2.
//
Процедура ТЗСделок2ПередУдалением(Элемент, Отказ)

	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента ТЗСделок3.
//
Процедура ТЗСделок3ПередУдалением(Элемент, Отказ)

	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента ТЗСделок4.
//
Процедура ТЗСделок4ПередУдалением(Элемент, Отказ)

	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента ТЗСделок5.
//
Процедура ТЗСделок5ПередУдалением(Элемент, Отказ)

	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента ТЗСделок6.
//
Процедура ТЗСделок6ПередУдалением(Элемент, Отказ)

	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента ТЗСделок7.
//
Процедура ТЗСделок7ПередУдалением(Элемент, Отказ)

	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента ТЗСделок1.
//
Процедура ТЗСделок1ПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;
	ОткрытьДокументСделки(Элемент);
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента ТЗСделок2.
//
Процедура ТЗСделок2ПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;
	ОткрытьДокументСделки(Элемент);
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента ТЗСделок3.
//
Процедура ТЗСделок3ПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;
	ОткрытьДокументСделки(Элемент);
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента ТЗСделок4.
//
Процедура ТЗСделок4ПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;
	ОткрытьДокументСделки(Элемент);
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента ТЗСделок5.
//
Процедура ТЗСделок5ПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;
	ОткрытьДокументСделки(Элемент);
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента ТЗСделок6.
//
Процедура ТЗСделок6ПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;
	ОткрытьДокументСделки(Элемент);
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента ТЗСделок7.
//
Процедура ТЗСделок7ПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;
	ОткрытьДокументСделки(Элемент);
	
КонецПроцедуры

// Обработчик события Нажатие элемента ВвестиДокумент.
//
Процедура ВвестиДокументНажатие(Элемент)

	Если ТипЗнч(мМассивЗначенийБыстрогоСобытия) = Тип("Массив") И мМассивЗначенийБыстрогоСобытия[0] <> Неопределено И мМассивЗначенийБыстрогоСобытия[1] <> Неопределено Тогда
		ВыбранныйЭлемент = мМассивЗначенийБыстрогоСобытия;
	Иначе
		ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзМеню(мСписокДокументовДобавления, Элемент);
		Если ВыбранныйЭлемент <> Неопределено Тогда
			ВыбранныйЭлемент = ВыбранныйЭлемент.Значение;
		КонецЕсли; 
	КонецЕсли;

	Если ВыбранныйЭлемент <> Неопределено Тогда

		ОбъектСобытия = Документы.Событие.СоздатьДокумент();
		
		Если ОтображатьЗаказы Тогда
			ТекущаяОбласть = ЭлементыФормы.ПолеТабличногоДокументаДень.ТекущаяОбласть;
			Если ТекущаяОбласть <> Неопределено Тогда
				ОбъектСобытия.НачалоСобытия = ОпределитьДатыОбластиДня(ТекущаяОбласть, Истина);
				ОбъектСобытия.ОкончаниеСобытия = ОпределитьДатыОбластиДня(ТекущаяОбласть, Ложь);
			КонецЕсли;
		Иначе
			ТекущаяОбласть = ЭлементыФормы.ПолеТабличногоДокументаДеньВторой.ТекущаяОбласть;
			Если ТекущаяОбласть <> Неопределено Тогда
				ОбъектСобытия.НачалоСобытия = ОпределитьДатыОбластиДня(ТекущаяОбласть, Истина);
				ОбъектСобытия.ОкончаниеСобытия = ОпределитьДатыОбластиДня(ТекущаяОбласть, Ложь);
				Если ТекущаяОбласть.Лево > 40 Тогда
					ОбъектСобытия.НачалоСобытия = ОбъектСобытия.НачалоСобытия + 60*60*24;
					ОбъектСобытия.ОкончаниеСобытия = ОбъектСобытия.ОкончаниеСобытия + 60*60*24;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли; 
		
		ОбъектСобытия.ВидСобытия      = ВыбранныйЭлемент[0];
		ОбъектСобытия.ТипСобытия      = ВыбранныйЭлемент[1];
		ОбъектСобытия.ОписаниеСобытия = ТемаНовогоСобытия;
		ОбъектСобытия.Ответственный   = ПользовательКалендаря;

		ФормаВыбора = ОбъектСобытия.ПолучитьФорму(,ЭтаФорма);
		ФормаВыбора.РежимВыбора = Истина;
		ФормаВыбора.Открыть();

		КнопкаФормы = ЭлементыФормы.ВвестиДокумент;

		КнопкаФормы.Заголовок = СокрЛП(Строка(ВыбранныйЭлемент[0]));
		КнопкаФормы.Подсказка = "Ввести новое " + ВыбранныйЭлемент[1] + " событие -  " + ВыбранныйЭлемент[0];
		КнопкаФормы.Картинка  = ?(ВыбранныйЭлемент[1] = Перечисления.ВходящееИсходящееСобытие.Исходящее, БиблиотекаКартинок.ИсходящееСобытие, БиблиотекаКартинок.ВходящееСобытие);
		
		КнопкаФормы = ЭлементыФормы.ВвестиДокументНеделя;

		КнопкаФормы.Заголовок = СокрЛП(Строка(ВыбранныйЭлемент[0]));
		КнопкаФормы.Подсказка = "Ввести новое " + ВыбранныйЭлемент[1] + " событие -  " + ВыбранныйЭлемент[0];
		КнопкаФормы.Картинка  = ?(ВыбранныйЭлемент[1] = Перечисления.ВходящееИсходящееСобытие.Исходящее, БиблиотекаКартинок.ИсходящееСобытие, БиблиотекаКартинок.ВходящееСобытие);
		
		мМассивЗначенийБыстрогоСобытия = Новый Массив;
		мМассивЗначенийБыстрогоСобытия.Добавить(ВыбранныйЭлемент[0]);
		мМассивЗначенийБыстрогоСобытия.Добавить(ВыбранныйЭлемент[1]);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события Нажатие элемента ВвестиДокументНеделя.
//
Процедура ВвестиДокументНеделяНажатие(Элемент)

	Если ТипЗнч(мМассивЗначенийБыстрогоСобытия) = Тип("Массив") И мМассивЗначенийБыстрогоСобытия[0] <> Неопределено И мМассивЗначенийБыстрогоСобытия[1] <> Неопределено Тогда
		ВыбранныйЭлемент = мМассивЗначенийБыстрогоСобытия;
	Иначе
		ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзМеню(мСписокДокументовДобавления, Элемент);
		Если ВыбранныйЭлемент <> Неопределено Тогда
			ВыбранныйЭлемент = ВыбранныйЭлемент.Значение;
		КонецЕсли; 
	КонецЕсли;

	Если ВыбранныйЭлемент <> Неопределено Тогда

		ОбъектСобытия = Документы.Событие.СоздатьДокумент();
		
		ТекущаяОбласть = ЭлементыФормы.ПолеТабличногоДокументаНеделя.ТекущаяОбласть;
		Если ТекущаяОбласть <> Неопределено Тогда
		
			ОбъектСобытия.НачалоСобытия = ОпределитьДатыОбластиНедели(ТекущаяОбласть, Истина);
			ОбъектСобытия.ОкончаниеСобытия = ОпределитьДатыОбластиНедели(ТекущаяОбласть, Ложь);
		
		КонецЕсли;

		ОбъектСобытия.ВидСобытия      = ВыбранныйЭлемент[0];
		ОбъектСобытия.ТипСобытия      = ВыбранныйЭлемент[1];
		ОбъектСобытия.ОписаниеСобытия = ТемаНовогоСобытияНеделя;
		ОбъектСобытия.Ответственный   = ПользовательКалендаря;

		ФормаВыбора = ОбъектСобытия.ПолучитьФорму(,ЭтаФорма);
		ФормаВыбора.РежимВыбора = Истина;
		ФормаВыбора.Открыть();

		КнопкаФормы = ЭлементыФормы.ВвестиДокумент;

		КнопкаФормы.Заголовок = СокрЛП(Строка(ВыбранныйЭлемент[0]));
		КнопкаФормы.Подсказка = "Ввести новый " + ВыбранныйЭлемент[1] + " событие -  " + ВыбранныйЭлемент[0];
		КнопкаФормы.Картинка  = ?(ВыбранныйЭлемент[1] = Перечисления.ВходящееИсходящееСобытие.Исходящее, БиблиотекаКартинок.ИсходящееСобытие, БиблиотекаКартинок.ВходящееСобытие);
		
		КнопкаФормы = ЭлементыФормы.ВвестиДокументНеделя;

		КнопкаФормы.Заголовок = СокрЛП(Строка(ВыбранныйЭлемент[0]));
		КнопкаФормы.Подсказка = "Ввести новое " + ВыбранныйЭлемент[1] + " событие -  " + ВыбранныйЭлемент[0];
		КнопкаФормы.Картинка  = ?(ВыбранныйЭлемент[1] = Перечисления.ВходящееИсходящееСобытие.Исходящее, БиблиотекаКартинок.ИсходящееСобытие, БиблиотекаКартинок.ВходящееСобытие);
		
		мМассивЗначенийБыстрогоСобытия = Новый Массив;
		мМассивЗначенийБыстрогоСобытия.Добавить(ВыбранныйЭлемент[0]);
		мМассивЗначенийБыстрогоСобытия.Добавить(ВыбранныйЭлемент[1]);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ОбработкаРасшифровки элемента ПолеТабличногоДокументаНеделя.
//
Процедура ПолеТабличногоДокументаНеделяОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Расшифровка) = Тип("Дата") Тогда
	
		Если НачалоДня(Расшифровка) <> НачалоДня(ДатаКалендаря) Тогда
			ДатаКалендаря = НачалоДня(Расшифровка);

			Если ДатаКалендаря <> мДатаКалендаря Тогда

				мДатаКалендаря = ДатаКалендаря;
				
				Если НачалоМесяца(ДатаКалендаря) <> ДатаНачалаМесяцаЗапроса Тогда
			
					ДатаНачалаМесяцаЗапроса = НачалоМесяца(ДатаКалендаря);
					ОбновитьМесяц[0] = Истина;
					
				КонецЕсли;
				
				Если ДатаНачалаНедели <> НачалоНедели(ДатаКалендаря) Тогда
			
					ДатаНачалаНедели = НачалоНедели(ДатаКалендаря);
					ОбновитьНеделю[0] = Истина;
			
				КонецЕсли; 
				
				ОбновитьДень[0] = Истина;
				
			КонецЕсли; 
			
		КонецЕсли; 
		ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.День;
	
		СостояниеТулбараФормы();
		
		ОбновитьИнформациюНаФорме();
		
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("ДокументСсылка.Событие") Тогда
	
		СтандартнаяОбработка = Ложь;
		
		ДокументОбъект = Расшифровка.ПолучитьОбъект();
		ФормаВыбора = ДокументОбъект.ПолучитьФорму(,ЭтаФорма);
		ФормаВыбора.РежимВыбора = Истина;
		ФормаВыбора.Открыть();
	
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие элемента КоманднаяПанельФормы.Список.
//
Процедура КоманднаяПанельФормыСписок(Кнопка)

	УстановитьЗакладку(Кнопка.Имя);
	
КонецПроцедуры

// Обработчик события Нажатие элемента КоманднаяПанельФормы.День.
//
Процедура КоманднаяПанельФормыДень(Кнопка)

	УстановитьЗакладку(Кнопка.Имя);

	ДоступностьКнопокКоманднойПанели_СделкиДень();
	
КонецПроцедуры

// Обработчик события Нажатие элемента КоманднаяПанельФормы.Неделя.
//
Процедура КоманднаяПанельФормыНеделя(Кнопка)

	УстановитьЗакладку(Кнопка.Имя);
	
КонецПроцедуры

// Обработчик события Нажатие элемента КоманднаяПанельФормы.Месяц.
//
Процедура КоманднаяПанельФормыМесяц(Кнопка)

	УстановитьЗакладку(Кнопка.Имя);
	
КонецПроцедуры

// Обработчик события Нажатие элемента КоманднаяПанельДень.КнопкаДеньНазад.
//
Процедура КнопкаДеньНазадНажатие(Кнопка)

	ДатаКалендаря = НачалоДня(НачалоДня(ДатаКалендаря) - 1);

	Если ДатаКалендаря <> мДатаКалендаря Тогда

		мДатаКалендаря = ДатаКалендаря;
		
		Если НачалоМесяца(ДатаКалендаря) <> ДатаНачалаМесяцаЗапроса Тогда
			
			ДатаНачалаМесяцаЗапроса = НачалоМесяца(ДатаКалендаря);
			ОбновитьМесяц[0] = Истина;
			
		КонецЕсли;

		Если НачалоНедели(ДатаКалендаря) <> ДатаНачалаНедели Тогда
			
			ДатаНачалаНедели = НачалоНедели(ДатаКалендаря);
			ОбновитьНеделю[0] = Истина;
			
		КонецЕсли; 
		
		ОбновитьДень[0] = Истина;
	
		ОбновитьИнформациюНаФорме();
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие элемента КоманднаяПанельДень.КнопкаДеньВперед.
//
Процедура КнопкаДеньВпередНажатие(Кнопка)

	ДатаКалендаря = НачалоДня(НачалоДня(ДатаКалендаря) + (60*60*24 + 1));

	Если ДатаКалендаря <> мДатаКалендаря Тогда

		мДатаКалендаря = ДатаКалендаря;
		
		Если НачалоМесяца(ДатаКалендаря) <> ДатаНачалаМесяцаЗапроса Тогда
			
			ДатаНачалаМесяцаЗапроса = НачалоМесяца(ДатаКалендаря);
			ОбновитьМесяц[0] = Истина;
			
		КонецЕсли; 
		
		Если НачалоНедели(ДатаКалендаря) <> ДатаНачалаНедели Тогда
			
			ДатаНачалаНедели = НачалоНедели(ДатаКалендаря);
			ОбновитьНеделю[0] = Истина;
			
		КонецЕсли; 
		
		ОбновитьДень[0] = Истина;
	
		ОбновитьИнформациюНаФорме();
		
	КонецЕсли; 

КонецПроцедуры

// Обработчик события Нажатие элемента КоманднаяПанельНеделя.КнопкаНеделяНазад.
//
Процедура КнопкаНеделяНазадНажатие(Кнопка)

	ДатаКалендаря = НачалоДня(НачалоДня(ДатаКалендаря) - 60*60*24*7);

	Если ДатаКалендаря <> мДатаКалендаря Тогда

		мДатаКалендаря = ДатаКалендаря;
		
		Если НачалоМесяца(ДатаКалендаря) <> ДатаНачалаМесяцаЗапроса Тогда
			
			ДатаНачалаМесяцаЗапроса = НачалоМесяца(ДатаКалендаря);
			ОбновитьМесяц[0] = Истина;
			
		КонецЕсли;

		Если НачалоНедели(ДатаКалендаря) <> ДатаНачалаНедели Тогда
			
			ДатаНачалаНедели = НачалоНедели(ДатаКалендаря);
			ОбновитьНеделю[0] = Истина;
			
		КонецЕсли; 
		
		ОбновитьДень[0] = Истина;

		ОбновитьИнформациюНаФорме();
		
	КонецЕсли; 

КонецПроцедуры

// Обработчик события Нажатие элемента КоманднаяПанельНеделя.КнопкаНеделяВперед.
//
Процедура КнопкаНеделяВпередНажатие(Кнопка)

	ДатаКалендаря = НачалоДня(НачалоДня(ДатаКалендаря) + 60*60*24*7);

	Если ДатаКалендаря <> мДатаКалендаря Тогда

		мДатаКалендаря = ДатаКалендаря;
		
		Если НачалоМесяца(ДатаКалендаря) <> ДатаНачалаМесяцаЗапроса Тогда
			
			ДатаНачалаМесяцаЗапроса = НачалоМесяца(ДатаКалендаря);
			ОбновитьМесяц[0] = Истина;
			
		КонецЕсли;

		Если НачалоНедели(ДатаКалендаря) <> ДатаНачалаНедели Тогда
			
			ДатаНачалаНедели = НачалоНедели(ДатаКалендаря);
			ОбновитьНеделю[0] = Истина;
			
		КонецЕсли; 
		
		ОбновитьДень[0] = Истина;
	
		ОбновитьИнформациюНаФорме();
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие элемента КоманднаяПанельМесяцВспомогательная.КнопкаМесяцНазад.
//
Процедура КнопкаМесяцНазадНажатие(Кнопка)

	ДатаКалендаря = НачалоДня(ДобавитьМесяц(ДатаКалендаря, -1));
	ДатаНачалаНедели = НачалоНедели(ДатаКалендаря);

	Если ДатаКалендаря <> мДатаКалендаря Тогда

		мДатаКалендаря = ДатаКалендаря;
		
		ДатаНачалаМесяцаЗапроса = НачалоМесяца(ДатаКалендаря);
		ОбновитьМесяц[0] = Истина;
		ОбновитьНеделю[0] = Истина;
		ОбновитьДень[0] = Истина;
		
		ОбновитьИнформациюНаФорме();
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события Нажатие элемента КоманднаяПанельМесяцВспомогательная.КнопкаМесяцВперед.
//
Процедура КнопкаМесяцВпередНажатие(Кнопка)

	ДатаКалендаря = НачалоДня(ДобавитьМесяц(ДатаКалендаря, 1));
	ДатаНачалаНедели = НачалоНедели(ДатаКалендаря);

	Если ДатаКалендаря <> мДатаКалендаря Тогда

		мДатаКалендаря = ДатаКалендаря;
		
		ДатаНачалаМесяцаЗапроса = НачалоМесяца(ДатаКалендаря);
		ОбновитьМесяц[0] = Истина;
		ОбновитьНеделю[0] = Истина;
		ОбновитьДень[0] = Истина;
		
		ОбновитьИнформациюНаФорме();
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие элемента КоманднаяПанельСделкиДень.АнализЗаказа.
//
Процедура КоманднаяПанельСделкиДеньАнализЗаказа(Кнопка)
	
	ОтчетЗаказа = Отчеты.АнализЗаказа.Создать();

	ОтчетЗаказа.Заказ = ЭлементыФормы.СделкиДень.ТекущиеДанные.Документ;
	ОтчетЗаказа.ДатаАнализа     = ТекущаяДата();

	ФормаОтчета = ОтчетЗаказа.ПолучитьФорму();
	ОтчетЗаказа.СформироватьОтчет(ФормаОтчета.ЭлементыФормы.ДокументРезультат);

	ФормаОтчета.Открыть();
	
КонецПроцедуры

// Обработчик события Нажатие элемента КоманднаяПанельСделкиДень.ДокументыПоЗаказу.
//
Процедура КоманднаяПанельСделкиДеньДокументыПоЗаказу(Кнопка)
	
	Если ЭлементыФормы.СделкиДень.ТекущиеДанные <> Неопределено Тогда
		Если ТипЗнч(ЭлементыФормы.СделкиДень.ТекущиеДанные.Документ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ФормаКритерияОтбора = КритерииОтбора.ДокументыПоЗаказуПокупателя.ПолучитьФорму();
			ФормаКритерияОтбора.ПараметрОтборПоЗначению = ЭлементыФормы.СделкиДень.ТекущиеДанные.Документ;
			ФормаКритерияОтбора.Открыть();
		ИначеЕсли ТипЗнч(ЭлементыФормы.СделкиДень.ТекущиеДанные.Документ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			ФормаКритерияОтбора = КритерииОтбора.ДокументыПоЗаказуПоставщику.ПолучитьФорму();
			ФормаКритерияОтбора.ПараметрОтборПоЗначению = ЭлементыФормы.СделкиДень.ТекущиеДанные.Документ;
			ФормаКритерияОтбора.Открыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события Нажатие элемента КоманднаяПанельСделкиДень.СписокДокументов.
//
Процедура КоманднаяПанельСделкиДеньСписокДокументов(Кнопка)

	ТекущийКонтрагент = ОпределитьКонтрагентаСпискаЗаказовДня();
	
	ФормаЖурнала = ЖурналыДокументов.ДокументыКонтрагентов.ПолучитьФорму();

	ФормаЖурнала.Отбор.ДокументыПоКонтрагенту.Значение = ТекущийКонтрагент;
	ФормаЖурнала.Отбор.ДокументыПоКонтрагенту.Использование = Истина;
	ФормаЖурнала.Открыть();
	
КонецПроцедуры

// Обработчик события Нажатие элемента КоманднаяПанельСделкиДень.СписокСобытий.
//
Процедура КоманднаяПанельСделкиДеньСписокСобытий(Кнопка)

	ТекущийКонтрагент = ОпределитьКонтрагентаСпискаЗаказовДня();
	
	ФормаСписка = Документы.Событие.ПолучитьФормуСписка();

	ФормаСписка.Отбор.ДокументыПоКонтрагенту.Значение = ТекущийКонтрагент;
	ФормаСписка.Отбор.ДокументыПоКонтрагенту.Использование = Истина;
	ФормаСписка.Открыть();
	
КонецПроцедуры

// Обработчик события Нажатие элемента КоманднаяПанельСделкиДень.Взаиморасчеты.
//
Процедура КоманднаяПанельСделкиДеньВзаиморасчеты(Кнопка)
	
	ТекущийКонтрагент = ОпределитьКонтрагентаСпискаЗаказовДня();
	
	ОтчетКонтрагента = Отчеты.ВедомостьВзаиморасчетыСКонтрагентами.Создать();
	
	ПараметрыНастройки = Новый Структура;
	ПараметрыНастройки.Вставить("ДатаНач", ДатаНач);
	ПараметрыНастройки.Вставить("ДатаКон", ДатаКон);
	ПараметрыНастройки.Вставить("РаскрашиватьИзмерения", Истина);
	ПараметрыНастройки.Вставить("ВыводитьИтогиПоВсемУровням", Истина);
	ПараметрыНастройки.Вставить("ВыбранныеПоля", Новый Структура("Регистратор"));
	ПараметрыНастройки.Вставить("Отбор", Новый Структура("Контрагент", ТекущийКонтрагент));
	ПараметрыНастройки.Вставить("ГруппировкиСтрок", Новый Структура("Контрагент, ДоговорКонтрагента, Сделка"));
	
	ОтчетКонтрагента.Настроить(ПараметрыНастройки);
	ФормаОтчета = ОтчетКонтрагента.ПолучитьОсновнуюФорму();
	ФормаОтчета.ОбновитьОтчет();
	ФормаОтчета.Открыть();
	
КонецПроцедуры

// Обработчик события Нажатие элемента КоманднаяПанельСделкиДень.ОтчетПоСобытиям.
//
Процедура КоманднаяПанельСделкиДеньОтчетПоСобытиям(Кнопка)


	Если ЭлементыФормы.СделкиДень.ТекущиеДанные <> Неопределено Тогда

		КонтрагентСтроки = ЭлементыФормы.СделкиДень.ТекущиеДанные.Контрагент;

		ОбъектОтчета = Отчеты.ОтчетПоСобытиям.Создать();
		ОбъектОтчета.ЗаполнитьНачальныеНастройки();
		
		ОбъектОтчета.ДатаНачала    = ДатаНач;
		ОбъектОтчета.ДатаОкончания = ДатаКон;

		ОбъектОтчета.ПостроительОтчета.Отбор.Контрагент.Значение = КонтрагентСтроки;
		ОбъектОтчета.ПостроительОтчета.Отбор.Контрагент.Использование = Истина;
		
		ОбъектОтчета.ПостроительОтчета.ИзмеренияСтроки.Очистить();
		ОбъектОтчета.ПостроительОтчета.ИзмеренияСтроки.Добавить("Контрагент");
		
		ФормаОтчета = ОбъектОтчета.ПолучитьФорму();
		ФормаОтчета.НеЗаполнятьНастройкиПриОткрытии = Истина;
		ФормаОтчета.Открыть();
		ОбъектОтчета.СформироватьОтчет(ФормаОтчета.ЭлементыФормы.ПолеТабличногоДокумента);
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие элемента КоманднаяПанельФормыДополнительно.Настройка.
//
Процедура КоманднаяПанельФормыДополнительноНастройка(Кнопка)

	ФормаНастройки = ОбработкаОбъект.ПолучитьФорму("ФормаНастройкиКалендаря", ЭтаФорма);
	Если ФормаНастройки.ОткрытьМодально() = Истина Тогда
		
		Если ТипЗнч(СтруктураОтборов) = Тип("Соответствие") Тогда
			МассивЗначенийОтбора = Новый Массив;
			МассивЗначенийОтбора.Добавить(ВидСравнения.Равно);
			МассивЗначенийОтбора.Добавить(ПользовательКалендаря);
			СтруктураОтборов.Вставить("Пользователь", МассивЗначенийОтбора);
		КонецЕсли; 
	
		ПрочитатьСохраненныеЗначенияПользователя();

		ОбновитьСписок[0] = Истина;
		ОбновитьСписок[1] = Ложь;
		
		ОбновитьМесяц[0] = Истина;
		ОбновитьМесяц[2] = Истина;
		
		ОбновитьНеделю[0] = Истина;
		ОбновитьНеделю[2] = Истина;
		
		ОбновитьДень[0] = Истина;
		ОбновитьДень[2] = Истина;
		
		ОбновитьИнформациюНаФорме();
		
	КонецЕсли;
	
	ЭтаФорма.КлючУникальности = "КалендарьПользователя_" + СокрЛП(ПользовательКалендаря.УникальныйИдентификатор());
	
КонецПроцедуры

// Обработчик события Нажатие элемента КоманднаяПанельФормыДополнительно.Обновить.
//
Процедура КоманднаяПанельФормыДополнительноОбновить(Кнопка)
	
	Если ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.Список Тогда
		ОбновитьТаблицуСписка();
	ИначеЕсли ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.День Тогда
		ОбновитьКалендарьДня();
	ИначеЕсли ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.Неделя Тогда
		ОбновитьКалендарьНеделя();
	ИначеЕсли ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.Месяц Тогда
		ОбновитьКалендарьМесяц();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ОбработкаРасшифровки элемента ПолеТабличногоДокументаДеньВторой.
//
Процедура ПолеТабличногоДокументаДеньВторойОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)

	Если ТипЗнч(Расшифровка) = Тип("ДокументСсылка.Событие") Тогда
	
		СтандартнаяОбработка = Ложь;
		
		ДокументОбъект = Расшифровка.ПолучитьОбъект();
		ФормаВыбора = ДокументОбъект.ПолучитьФорму(,ЭтаФорма);
		ФормаВыбора.РежимВыбора = Истина;
		ФормаВыбора.Открыть();
	
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриАктивизацииОбласти элемента ПолеТабличногоДокументаДеньВторой.
//
Процедура ПолеТабличногоДокументаДеньВторойПриАктивизацииОбласти(Элемент)
	
	Если ТипЗнч(Элемент.ТекущаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		Если ТипЗнч(Элемент.ТекущаяОбласть.Расшифровка) = Тип("ДокументСсылка.Событие") Тогда
			ДокументОбъект = Элемент.ТекущаяОбласть.Расшифровка.ПолучитьОбъект();
			ФормаВыбора = ДокументОбъект.ПолучитьФорму(,ЭтаФорма);
			ФормаВыбора.РежимВыбора = Истина;
			ФормаВыбора.Открыть();
		КонецЕсли; 
		Элемент.ТекущаяОбласть = Элемент.Область(мИмяТекущейОбластиДвойногоДня);
	Иначе
		мИмяТекущейОбластиДвойногоДня = Элемент.ТекущаяОбласть.Имя;
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриАктивизацииОбласти элемента ПолеТабличногоДокументаДень.
//
Процедура ПолеТабличногоДокументаДеньПриАктивизацииОбласти(Элемент)
	
	Если ТипЗнч(Элемент.ТекущаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		Если ТипЗнч(Элемент.ТекущаяОбласть.Расшифровка) = Тип("ДокументСсылка.Событие") Тогда
			ДокументОбъект = Элемент.ТекущаяОбласть.Расшифровка.ПолучитьОбъект();
			ФормаВыбора = ДокументОбъект.ПолучитьФорму(,ЭтаФорма);
			ФормаВыбора.РежимВыбора = Истина;
			ФормаВыбора.Открыть();
		КонецЕсли; 
		Элемент.ТекущаяОбласть = Элемент.Область(мИмяТекущейОбластиДня);
	Иначе
		мИмяТекущейОбластиДня = Элемент.ТекущаяОбласть.Имя;
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие элемента КнопкаВыбратьМесяц.
//
Процедура КнопкаВыбратьМесяцНажатие(Элемент)
	
	СписокМесяцев = Новый СписокЗначений;
	
	Для а = -6 По 6 Цикл
		
		Если а = 0 Тогда
			Продолжить;
		КонецЕсли;

		ДатаМесяца = НачалоДня(ДобавитьМесяц(ДатаКалендаря, а));

		СтрокаМесяца = Формат(ДатаМесяца, "ДФ=ММММ") + " " + Формат(ДатаМесяца, "ДФ=yyyy") + " г.";
		СписокМесяцев.Добавить(ДатаМесяца, СтрокаМесяца);
		
	КонецЦикла;

	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзМеню(СписокМесяцев, Элемент);

	Если ВыбранныйЭлемент <> Неопределено Тогда
	
		ДатаКалендаря = НачалоДня(ВыбранныйЭлемент.Значение);
		ДатаНачалаНедели = НачалоНедели(ДатаКалендаря);
		
		Если НачалоДня(ДатаКалендаря) <> НачалоДня(мДатаКалендаря) Тогда
		
			мДатаКалендаря = ДатаКалендаря;
			
			ДатаНачалаМесяцаЗапроса = НачалоМесяца(ДатаКалендаря);
			ОбновитьМесяц[0] = Истина;
			ОбновитьНеделю[0] = Истина;
			ОбновитьДень[0] = Истина;
			
			ОбновитьИнформациюНаФорме();
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫЗЫВАЕМЫЕ ПРИ ПЕРЕТАСКИВАНИИ В ЭЛЕМЕНТАХ УПРАВЛЕНИЯ

// Перетаскивание день

// Обработчик события НачалоПеретаскивания элемента ПолеТабличногоДокументаДень.
//
Процедура ПолеТабличногоДокументаДеньНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ПолеТабличногоДокументаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик события ОкончаниеПеретаскивания элемента ПолеТабличногоДокументаДень.
//
Процедура ПолеТабличногоДокументаДеньОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события Перетаскивание элемента ПолеТабличногоДокументаДень.
//
Процедура ПолеТабличногоДокументаДеньПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	
	ПолеТабличногоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область);
	
КонецПроцедуры

// Обработчик события ПроверкаПеретаскивания элемента ПолеТабличногоДокументаДень.
//
Процедура ПолеТабличногоДокументаДеньПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	
	ПолеТабличногоДокументаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область);
	
КонецПроцедуры

// Перетаскивание два дня

// Обработчик события НачалоПеретаскивания элемента ПолеТабличногоДокументаДеньВторой.
//
Процедура ПолеТабличногоДокументаДеньВторойНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ПолеТабличногоДокументаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик события ПроверкаПеретаскивания элемента ПолеТабличногоДокументаДеньВторой.
//
Процедура ПолеТабличногоДокументаДеньВторойПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	
	ПолеТабличногоДокументаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область);
	
КонецПроцедуры

// Обработчик события ОкончаниеПеретаскивания элемента ПолеТабличногоДокументаДеньВторой.
//
Процедура ПолеТабличногоДокументаДеньВторойОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события Перетаскивание элемента ПолеТабличногоДокументаДеньВторой.
//
Процедура ПолеТабличногоДокументаДеньВторойПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	
	ПолеТабличногоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область, Истина);
	
КонецПроцедуры

// Перетаскивание неделя

// Обработчик события НачалоПеретаскивания элемента ПолеТабличногоДокументаНеделя.
//
Процедура ПолеТабличногоДокументаНеделяНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ПолеТабличногоДокументаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик события ПроверкаПеретаскивания элемента ПолеТабличногоДокументаНеделя.
//
Процедура ПолеТабличногоДокументаНеделяПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)

	Если ТипЗнч(ПараметрыПеретаскивания.Значение.ТекущаяОбласть.Расшифровка) <> Тип("ДокументСсылка.Событие") 
	 ИЛИ Область.Низ > 50 ИЛИ Область.Право > 84 ИЛИ Область.Лево < 3 ИЛИ Область.Верх < 3 Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;

КонецПроцедуры

// Обработчик события ОкончаниеПеретаскивания элемента ПолеТабличногоДокументаНеделя.
//
Процедура ПолеТабличногоДокументаНеделяОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события Перетаскивание элемента ПолеТабличногоДокументаНеделя.
//
Процедура ПолеТабличногоДокументаНеделяПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение.ТекущаяОбласть.Расшифровка) <> Тип("ДокументСсылка.Событие") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	НовоеНачалоСобытия    = ОпределитьДатыОбластиНедели(Область, Истина);
	НовоеОкончаниеСобытия = ОпределитьДатыОбластиНедели(Область, Ложь);
	НовоеОкончаниеСобытия = НачалоДня(НовоеНачалоСобытия) + (НовоеОкончаниеСобытия - НачалоДня(НовоеОкончаниеСобытия));
	
	Если НовоеНачалоСобытия = ПараметрыПеретаскивания.Значение.ТекущаяОбласть.Расшифровка.НачалоСобытия
	   И НовоеОкончаниеСобытия = ПараметрыПеретаскивания.Значение.ТекущаяОбласть.Расшифровка.ОкончаниеСобытия Тогда
		Возврат;
	КонецЕсли; 
	
	Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование Тогда
		Объект = ПараметрыПеретаскивания.Значение.ТекущаяОбласть.Расшифровка.Скопировать();
		Объект.Дата = ТекущаяДата();
	Иначе
		Объект = ПараметрыПеретаскивания.Значение.ТекущаяОбласть.Расшифровка.ПолучитьОбъект();
	КонецЕсли; 
	
	Объект.НачалоСобытия    = НовоеНачалоСобытия;
	Объект.ОкончаниеСобытия = НовоеОкончаниеСобытия;
	Попытка
		Объект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		СообщитьОбОшибке(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ЗаписьДокументаСобытие();
	Элемент.ТекущаяОбласть = Область;
	
КонецПроцедуры

// Перетаскивание календарь дня

// Обработчик события Перетаскивание элемента ПолеКалендаря.
//
Процедура ПолеКалендаряПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ВыбраннаяДата)
	
	ПолеКалендаряПеретаскиваниеОбщее(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ВыбраннаяДата);
	
КонецПроцедуры

// Обработчик события ПроверкаПеретаскивания элемента ПолеКалендаря.
//
Процедура ПолеКалендаряПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ВыбраннаяДата)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Перетаскивание календарь недели

// Обработчик события ПроверкаПеретаскивания элемента ПолеКалендаряНеделя.
//
Процедура ПолеКалендаряНеделяПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ВыбраннаяДата)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события Перетаскивание элемента ПолеКалендаряНеделя.
//
Процедура ПолеКалендаряНеделяПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ВыбраннаяДата)
	
	ПолеКалендаряПеретаскиваниеОбщее(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ВыбраннаяДата, Истина);
	
КонецПроцедуры

СписокЗаказов = Новый СписокЗначений;
СписокЗаказов.Добавить(Перечисления.ВидыДействийПоЗаказамПокупателей.ОплатаПоЗаказу);
СписокЗаказов.Добавить(Перечисления.ВидыДействийПоЗаказамПокупателей.ОтгрузкаПоЗаказу);

ЭтаФорма.РазрешитьСоединятьОкно = Истина;
ЭтаФорма.РазрешитьСостояниеОбычное = Истина;
ЭтаФорма.РазрешитьСостояниеПрикрепленное = Истина;
ЭтаФорма.РазрешитьСостояниеПрячущееся = Истина;
ЭтаФорма.РазрешитьСостояниеСвободное = Истина;

мДокументыОснования = Новый Структура;

СделкиДень.Колонки.Добавить("Документ");

мСписокДокументовДобавления = Новый СписокЗначений;

МассивЗначений = Новый Массив;
МассивЗначений.Добавить(Перечисления.ВидыСобытий.ТелефонныйЗвонок);
МассивЗначений.Добавить(Перечисления.ВходящееИсходящееСобытие.Исходящее);
мСписокДокументовДобавления.Добавить(МассивЗначений,"Телефонный звонок",,БиблиотекаКартинок.ТелефонныйЗвонок);

МассивЗначений = Новый Массив;
МассивЗначений.Добавить(Перечисления.ВидыСобытий.ТелефонныйЗвонок);
МассивЗначений.Добавить(Перечисления.ВходящееИсходящееСобытие.Исходящее);
мСписокДокументовДобавления.Добавить(МассивЗначений,"    Исходящий");

МассивЗначений = Новый Массив;
МассивЗначений.Добавить(Перечисления.ВидыСобытий.ТелефонныйЗвонок);
МассивЗначений.Добавить(Перечисления.ВходящееИсходящееСобытие.Входящее);
мСписокДокументовДобавления.Добавить(МассивЗначений,"    Входящий");

МассивЗначений = Новый Массив;
МассивЗначений.Добавить(Перечисления.ВидыСобытий.ЭлектронноеПисьмо);
МассивЗначений.Добавить(Перечисления.ВходящееИсходящееСобытие.Исходящее);
мСписокДокументовДобавления.Добавить(МассивЗначений,"Электронное письмо",,БиблиотекаКартинок.ЭлектронноеПисьмо);

МассивЗначений = Новый Массив;
МассивЗначений.Добавить(Перечисления.ВидыСобытий.ЭлектронноеПисьмо);
МассивЗначений.Добавить(Перечисления.ВходящееИсходящееСобытие.Исходящее);
мСписокДокументовДобавления.Добавить(МассивЗначений,"    Исходящее");

МассивЗначений = Новый Массив;
МассивЗначений.Добавить(Перечисления.ВидыСобытий.ЭлектронноеПисьмо);
МассивЗначений.Добавить(Перечисления.ВходящееИсходящееСобытие.Входящее);
мСписокДокументовДобавления.Добавить(МассивЗначений,"    Входящее");


МассивЗначений = Новый Массив;
МассивЗначений.Добавить(Перечисления.ВидыСобытий.ЛичнаяВстреча);
МассивЗначений.Добавить(Перечисления.ВходящееИсходящееСобытие.Исходящее);
мСписокДокументовДобавления.Добавить(МассивЗначений,"Личная встреча",,БиблиотекаКартинок.ЛичнаяВстреча);

МассивЗначений = Новый Массив;
МассивЗначений.Добавить(Перечисления.ВидыСобытий.ЛичнаяВстреча);
МассивЗначений.Добавить(Перечисления.ВходящееИсходящееСобытие.Исходящее);
мСписокДокументовДобавления.Добавить(МассивЗначений,"    Исходящая");

МассивЗначений = Новый Массив;
МассивЗначений.Добавить(Перечисления.ВидыСобытий.ЛичнаяВстреча);
МассивЗначений.Добавить(Перечисления.ВходящееИсходящееСобытие.Входящее);
мСписокДокументовДобавления.Добавить(МассивЗначений,"    Входящая");

МассивЗначений = Новый Массив;
МассивЗначений.Добавить(Перечисления.ВидыСобытий.ПочтовоеПисьмо);
МассивЗначений.Добавить(Перечисления.ВходящееИсходящееСобытие.Исходящее);
мСписокДокументовДобавления.Добавить(МассивЗначений,"Почтовое письмо",,БиблиотекаКартинок.ПочтовоеПисьмо);

МассивЗначений = Новый Массив;
МассивЗначений.Добавить(Перечисления.ВидыСобытий.ПочтовоеПисьмо);
МассивЗначений.Добавить(Перечисления.ВходящееИсходящееСобытие.Исходящее);
мСписокДокументовДобавления.Добавить(МассивЗначений,"    Исходящее");

МассивЗначений = Новый Массив;
МассивЗначений.Добавить(Перечисления.ВидыСобытий.ПочтовоеПисьмо);
МассивЗначений.Добавить(Перечисления.ВходящееИсходящееСобытие.Входящее);
мСписокДокументовДобавления.Добавить(МассивЗначений,"    Входящее");

МассивЗначений = Новый Массив;
МассивЗначений.Добавить(Перечисления.ВидыСобытий.Прочее);
МассивЗначений.Добавить(Перечисления.ВходящееИсходящееСобытие.Исходящее);
мСписокДокументовДобавления.Добавить(МассивЗначений,"Прочее",,БиблиотекаКартинок.ПрочееСобытие);

МассивЗначений = Новый Массив;
МассивЗначений.Добавить(Перечисления.ВидыСобытий.Прочее);
МассивЗначений.Добавить(Перечисления.ВходящееИсходящееСобытие.Исходящее);
мСписокДокументовДобавления.Добавить(МассивЗначений,"    Исходящее");

МассивЗначений = Новый Массив;
МассивЗначений.Добавить(Перечисления.ВидыСобытий.Прочее);
МассивЗначений.Добавить(Перечисления.ВходящееИсходящееСобытие.Входящее);
мСписокДокументовДобавления.Добавить(МассивЗначений,"    Входящее");

мМассивЗначенийБыстрогоСобытия = Неопределено;

мТаблицаЯчеекИДатНедели = Неопределено;

мСписокМесяцевВыбора = Новый СписокЗначений;

ОбновитьСписок = Новый Массив;
ОбновитьСписок.Добавить(Ложь); // Флаг необходимости перезаполнения списка событий
ОбновитьСписок.Добавить(Истина); // Флаг необходимости выполнения запроса для списка событий

ОбновитьДень = Новый Массив;
ОбновитьДень.Добавить(Истина); // Флаг необходимости обновления данных о событиях и заказах в "мокселе" и "гриде"
ОбновитьДень.Добавить('00010101000000'); // Дата последнего заполнения
ОбновитьДень.Добавить(Истина); // Безусловное перевыполение запроса недели календаря

ОбновитьНеделю = Новый Массив;
ОбновитьНеделю.Добавить(Истина); // Флаг необходимости обновления данных о событиях и заказах в "мокселе" и "гриде"
ОбновитьНеделю.Добавить('00010101000000'); // Дата начала недели последнего заполнения
ОбновитьНеделю.Добавить(Истина); // Безусловное перевыполение запроса недели календаря

ОбновитьМесяц = Новый Массив;
ОбновитьМесяц.Добавить(Истина); // Флаг необходимости обновления данных о событиях и заказах в "мокселе"
ОбновитьМесяц.Добавить('00010101000000'); // Дата начала месяца последнего заполнения
ОбновитьМесяц.Добавить(Истина); // Безусловное перевыполение запроса месяца календаря

мБылоПервоеЗаполнениеНедели = Ложь;

мФормаИндикации.НаименованиеОбработкиДанных = "Обработка календарного плана закупок";
мФормаИндикации.КомментарийЗначения         = "Выполнено:";

мИмяТекущейОбластиДвойногоДня = "R1C1";
мИмяТекущейОбластиДня = "R1C1";

мСписокИсторииОтбора = Новый СписокЗначений;

мБиблиотекаКартинокДокумент = БиблиотекаКартинок.ДокументОбъект;
