
Процедура КнопкаВыполнитьНажатие(Кнопка)
ТЗЗаказыПост=Товары.Выгрузить();

ТЗЗаказыПост.Свернуть("Поставщик,ДатаПоступления");

Для каждого стрПост Из ТЗЗаказыПост Цикл
	Если не(ЗначениеНеЗаполнено(стрПост.ДатаПоступления) или
		ЗначениеНеЗаполнено(стрПост.Поставщик)) Тогда
		массивТовары=Товары.НайтиСтроки(Новый Структура("Поставщик,ДатаПоступления",стрПост.Поставщик,стрПост.ДатаПоступления));
		Если не ЗначениеНеЗаполнено(массивТовары) Тогда
			Если 	массивТовары.Количество()>0 Тогда
				СоздатьЗаказПоставщику(стрПост.Поставщик,стрПост.ДатаПоступления,массивТовары);
			КонецЕсли;		
		КонецЕсли;	
	КонецЕсли;	
КонецЦикла;	
ЭтаФорма.Закрыть();	
КонецПроцедуры

Процедура ПриОткрытии()
	ТЗЗаказа=Новый ТаблицаЗначений;
	ТЗПоступления= Новый ТаблицаЗначений;
	ТЗПродано = Новый ТаблицаЗначений;	
	Запрос=  Новый Запрос;
	Запрос.Текст=   "ВЫБРАТЬ Номенклатура, СУММА(ЕстьNULL(Количество,0)) Количество ИЗ Документ.ЗаказПоставщику.Товары 
	|ГДЕ Номенклатура В(&СписокНоменклатура) И не Ссылка.ПометкаУдаления  И
	|ЗаказПокупателя=&ЗаказПокупателя
	| СГРУППИРОВАТЬ ПО Номенклатура";
	Запрос.УстановитьПараметр("ЗаказПокупателя",СсылкаНаОбъект);
	Запрос.УстановитьПараметр("СписокНоменклатура",СсылкаНаОбъект.Товары.ВыгрузитьКолонку("Номенклатура"));
	ТабЗаказаннаяНом=Запрос.Выполнить().Выгрузить();
	
  ТабОставшиесяТовары=СсылкаНаОбъект.Товары.Выгрузить();

 
 // удаляем из ТабОставшиесяТовары строки с номенклатурой, которая уже есть в заказах 

 Для каждого ЗаказаннаяНом из ТабЗаказаннаяНом Цикл
	 сч=0;
	 Пока сч <  ТабОставшиесяТовары.Количество() Цикл
		 Если  (ТабОставшиесяТовары[сч].Номенклатура=ЗаказаннаяНом.Номенклатура)
			 и ((ТабОставшиесяТовары[сч].Количество=ЗаказаннаяНом.Количество)) Тогда
			 ТабОставшиесяТовары.Удалить(сч);
		 ИначеЕсли  (ТабОставшиесяТовары[сч].Номенклатура=ЗаказаннаяНом.Номенклатура)
			 и ((ТабОставшиесяТовары[сч].Количество>ЗаказаннаяНом.Количество)) Тогда
			 ТабОставшиесяТовары[сч].Количество=Макс(ТабОставшиесяТовары[сч].Количество-ЗаказаннаяНом.Количество,0);
			 ТабОставшиесяТовары[сч].Сумма=ТабОставшиесяТовары[сч].Количество*ТабОставшиесяТовары[сч].Цена;
			 сч=сч+1;	
		 Иначе	 
			 сч=сч+1;	
		 КонецЕсли;	
	 КонецЦикла;
 КонецЦикла;
 Товары.Загрузить(ТабОставшиесяТовары);
 
 // ------------------ получить статус заявки покупателя по номенклатуре
 
 Макет=ПолучитьМакет("Макет");
 ОбластьШапка=Макет.ПолучитьОбласть("Заголовок");
 ОбластьСтрока=Макет.ПолучитьОбласть("Строка");
 ЭлементыФормы.СтатусЗаявкиТабличныйДокумент.Вывести(ОбластьШапка);
 ном=0;
 ЭлементыФормы.СтатусЗаявкиТабличныйДокумент.НачатьАвтогруппировкуСтрок();
 
  Запрос.Текст= "ВЫБРАТЬ
		|	ЗаказыПокупателейОстаткиИОбороты.Номенклатура КАК Номенклатура,
		|	ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатков,
		|	ЗаказыПокупателейОстаткиИОбороты.КоличествоПриход КАК Запланировано,
		|	ЗаказыПокупателейОстаткиИОбороты.КоличествоРасход КАК ОтгруженоОтменено,
		|	ЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток КАК ОсталосьОтгрузить,
		|	РезервыКомпании.КоличествоОстаток КАК Резерв,
		|	РазмещениеЗаказовПокупателей.КоличествоОстаток КАК Заказано,
		|	ВЫБОР КОГДА ОстаткиТоваровКомпании.КоличествоОстаток ЕСТЬ NULL Тогда 0 Иначе ОстаткиТоваровКомпании.КоличествоОстаток КОНЕЦ
		|	- ВЫБОР КОГДА РезервыТоваровКомпании.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ РезервыТоваровКомпании.КоличествоОстаток КОНЕЦ
		|		КАК СвободныйОстаток
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.ОстаткиИОбороты(,&ДатаАнализа,,,ЗаказПокупателя=&Заказ) КАК ЗаказыПокупателейОстаткиИОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаАнализа, ДокументРезерва=&Заказ) КАК РезервыКомпании
		|		ПО ЗаказыПокупателейОстаткиИОбороты.Номенклатура = РезервыКомпании.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаАнализа, ЗаказПокупателя = &Заказ) КАК РазмещениеЗаказовПокупателей
		|		ПО ЗаказыПокупателейОстаткиИОбороты.Номенклатура = РазмещениеЗаказовПокупателей.Номенклатура 
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаАнализа) КАК ОстаткиТоваровКомпании
		|		ПО ЗаказыПокупателейОстаткиИОбороты.Номенклатура = ОстаткиТоваровКомпании.Номенклатура 
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаАнализа) КАК РезервыТоваровКомпании
		|		ПО ЗаказыПокупателейОстаткиИОбороты.Номенклатура = РезервыТоваровКомпании.Номенклатура "  ;
	Запрос.УстановитьПараметр("Заказ",СсылкаНаОбъект);	
	Запрос.УстановитьПараметр("ДатаАнализа",Дата('00010101'));
	
	ДанныеРазмещения=Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаНоменклатура из ДанныеРазмещения Цикл
		ном=ном+1;
		ОбластьСтрока=Макет.ПолучитьОбласть("Строка");
		ОбластьСтрока.Параметры.Номенклатура=СтрокаНоменклатура.Номенклатура;
		ОбластьСтрока.Параметры.Артикул=СтрокаНоменклатура.Номенклатура.Артикул;
		ОбластьСтрока.Параметры.Количество=СтрокаНоменклатура.Запланировано;
		ОбластьСтрока.Параметры.Заказано=	СтрокаНоменклатура.Заказано;    // требуется расшифровка
		ОбластьСтрока.Параметры.Резерв=СтрокаНоменклатура.Резерв; // требуется расшифровка
		ОбластьСтрока.Параметры.ОтгруженоОтменено=СтрокаНоменклатура.ОтгруженоОтменено;  // требуется расшифровка
		ОбластьСтрока.Параметры.ОсталосьОтгрузить=СтрокаНоменклатура.ОсталосьОтгрузить;
		ОбластьСтрока.Параметры.ном=ном;
		ЭлементыФормы.СтатусЗаявкиТабличныйДокумент.Вывести(ОбластьСтрока,1);
		ТЗЗаказа.Очистить();
		ТЗПоступления.Очистить();
		ТЗПродано.Очистить();
		ТЗЗаказа=СформироватьРасшифровкуЗаказа(СтрокаНоменклатура.Номенклатура);
		ТЗПоступления=СформироватьРасшифровкуПоступления(СтрокаНоменклатура.Номенклатура);
		ТЗПродано=СформироватьРасшифровкуПродажи(СтрокаНоменклатура.Номенклатура);
		
		Если не ЗначениеНеЗаполнено(ТЗЗаказа) или не ЗначениеНеЗаполнено(ТЗПоступления) или не ЗначениеНеЗаполнено(ТЗПродано) Тогда
			ТЗРасшифровки=СклеитьТаблицыРасшифровки(ТЗЗаказа,ТЗПоступления,ТЗПродано); 
			Для каждого строкаРасшифровки из ТЗРасшифровки Цикл
				ОбластьСтрокаРасшифровки=Макет.ПолучитьОбласть("СтрокаРасшифровки");
				ОбластьСтрокаРасшифровки.Параметры.Заполнить(строкаРасшифровки);
				//ОбластьСтрокаРасшифровки.Параметры.Регистратор=//(строкаРасшифровки.Регистратор);
				ОбластьСтрокаРасшифровки.Параметры.Регистратор=строкаРасшифровки.Регистратор.Метаданные().Синоним+" "+Формат(строкаРасшифровки.Регистратор.Дата,"ДЛФ=Д");
				ОбластьСтрокаРасшифровки.Параметры.ДатаПоступления=?(ЗначениеНеЗаполнено(строкаРасшифровки.ДатаПоступления),"",Формат(строкаРасшифровки.Регистратор.Дата,"ДЛФ=Д"));
				ЭлементыФормы.СтатусЗаявкиТабличныйДокумент.Вывести(ОбластьСтрокаРасшифровки,2);
			КонецЦикла;	 
		КонецЕсли;	  
		
	КонецЦикла;	
 	
 ЭлементыФормы.СтатусЗаявкиТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
  
КонецПроцедуры


	

Функция СформироватьРасшифровкуЗаказа(Номенклатура)
Запрос=Новый Запрос;
Запрос.Текст="ВЫБРАТЬ	ЗаказПоставщику , ЗаказПоставщику.Контрагент Поставщик,
|	ЕСТЬNULL(КоличествоОстаток, 0) КАК КоличествоЗаказано
|ИЗ РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(,ЗаказПокупателя = &ВыбЗаказПокупателя
|	И Номенклатура = &ВыбНоменклатура)";
Запрос.УстановитьПараметр("ВыбЗаказПокупателя",СсылкаНаОбъект);
Запрос.УстановитьПараметр("ВыбНоменклатура",Номенклатура);
ТЗ=Запрос.Выполнить().Выгрузить();
//Если ТЗ.Количество()>0 Тогда
		Возврат ТЗ;
//	Иначе
//		Возврат "";
//КонецЕсли;	
КонецФункции	

Функция СформироватьРасшифровкуПоступления(Номенклатура)  //переделать
Запрос=Новый Запрос;
Запрос.Текст="ВЫБРАТЬ  Регистратор, Регистратор.Контрагент Поставщик,
|ЕСТЬNULL(КоличествоПриход, 0) КАК КоличествоКуплено
|ИЗ РегистрНакопления.ТоварыВРезервеНаСкладах.Обороты(	,,Регистратор,	ДокументРезерва = &ВыбЗаказПокупателя
|И Номенклатура = &ВыбНоменклатура) ";
Запрос.УстановитьПараметр("ВыбЗаказПокупателя",СсылкаНаОбъект);
Запрос.УстановитьПараметр("ВыбНоменклатура",Номенклатура);
ТЗ=Запрос.Выполнить().Выгрузить();
//Если ТЗ.Количество()>0 Тогда
		Возврат ТЗ;
//	Иначе
//		Возврат "";
//КонецЕсли;	
КонецФункции	
                
Функция  СформироватьРасшифровкуПродажи(Номенклатура)
	
Запрос=Новый Запрос;
Запрос.Текст="	ВЫБРАТЬ     Регистратор,
|	ЕСТЬNULL(КоличествоРасход, 0) КАК КоличествоПродано
|   ИЗ РегистрНакопления.ЗаказыПокупателей.Обороты( 	,	,Регистратор	,
|   ЗаказПокупателя = &ВыбЗаказПокупателя	И Номенклатура = &ВыбНоменклатура)";

Запрос.УстановитьПараметр("ВыбЗаказПокупателя",СсылкаНаОбъект);
Запрос.УстановитьПараметр("ВыбНоменклатура",Номенклатура);
ТЗ=Запрос.Выполнить().Выгрузить();

//Если ТЗ.Количество()>0 Тогда
		Возврат ТЗ;
//	Иначе
//		Возврат "";
//КонецЕсли;	
КонецФункции	

Функция СклеитьТаблицыРасшифровки(ТЗЗаказа,ТЗПоступления,ТЗПродано)

ТЗ= Новый ТаблицаЗначений;
ТЗ.Колонки.Добавить("Регистратор");
ТЗ.Колонки.Добавить("Поставщик");
ТЗ.Колонки.Добавить("ДатаПоступления");
ТЗ.Колонки.Добавить("КоличествоЗаказано");
ТЗ.Колонки.Добавить("КоличествоКуплено");
ТЗ.Колонки.Добавить("КоличествоПродано");

Если ТипЗнч(ТЗЗаказа)=Тип("ТаблицаЗначений") Тогда
	Для каждого строка из ТЗЗаказа Цикл
		стрНовая=ТЗ.Добавить();
		стрНовая.Поставщик=?(ЗначениеНеЗаполнено(строка.ЗаказПоставщику),"",строка.ЗаказПоставщику.Контрагент);
		стрНовая.ДатаПоступления=?(ЗначениеНеЗаполнено(строка.ЗаказПоставщику),"",строка.ЗаказПоставщику.ДатаПоступления);
		стрНовая.Регистратор=строка.ЗаказПоставщику;
		стрНовая.КоличествоЗаказано=строка.КоличествоЗаказано;
	КонецЦикла;	
КонецЕсли;
Если ТипЗнч(ТЗПоступления)=Тип("ТаблицаЗначений") Тогда
	Для каждого строка из ТЗПоступления Цикл
		стрНовая=ТЗ.Добавить();
		стрНовая.Поставщик=?(ЗначениеНеЗаполнено(строка.Регистратор),"",строка.Регистратор.Контрагент);
		стрНовая.ДатаПоступления=?(ЗначениеНеЗаполнено(строка.Регистратор),"",строка.Регистратор.Дата);
		стрНовая.Регистратор=строка.Регистратор;
		стрНовая.КоличествоКуплено=строка.КоличествоКуплено;
	КонецЦикла;	
КонецЕсли;

Если ТипЗнч(ТЗПродано)=Тип("ТаблицаЗначений") Тогда
	Для каждого строка из ТЗПродано Цикл
		стрНовая=ТЗ.Добавить();
		стрНовая.Регистратор=строка.Регистратор;
		стрНовая.КоличествоПродано=строка.КоличествоПродано;
	КонецЦикла;	
КонецЕсли;

Возврат ТЗ;
КонецФункции	



Процедура СоздатьЗаказПоставщику(Поставщик,ДатаПоступления,массивТовары)
	Заказ=Документы.ЗаказПоставщику.СоздатьДокумент();
	//Заказ.УстановитьНовыйНомер();
	Заказ.Дата=ТекущаяДата();
	Заказ.Организация=СсылкаНаОбъект.Организация;
	Заказ.ВалютаДокумента=СсылкаНаОбъект.ВалютаДокумента;
	Заказ.ДатаПоступления=ДатаПоступления;
	Заказ.Контрагент=Поставщик;
	Заказ.ДоговорКонтрагента=Поставщик.ОсновнойДоговорКонтрагента;
	Заказ.КратностьВзаиморасчетов=1;
	Заказ.КурсВзаиморасчетов=1;
	Заказ.Ответственный=глТекущийПользователь;
	Заказ.Склад=СсылкаНаОбъект.Склад;
	Заказ.СуммаВключаетНДС=Истина;
	Заказ.УчитыватьНДС=Истина;
	
	Для каждого строкаТовара из массивТовары Цикл
		стрЗаказа=Заказ.Товары.Добавить();
		стрЗаказа.Номенклатура=строкаТовара.Номенклатура;
		стрЗаказа.Количество=строкаТовара.Количество;
		стрЗаказа.Коэффициент=1;
		стрЗаказа.Цена=строкаТовара.ЦенаПоставщика;
		стрЗаказа.ЕдиницаИзмерения=строкаТовара.ЕдиницаИзмерения;
	//	стрЗаказа.Сумма=стрЗаказа.Количество*стрЗаказа.Цена;
		стрЗаказа.ЗаказПокупателя=СсылкаНаОбъект;
		стрЗаказа.СтавкаНДС=строкаТовара.Номенклатура.СтавкаНДС;
	РассчитатьСуммуТабЧасти(стрЗаказа, Заказ);
	РассчитатьСуммуНДСТабЧасти(стрЗаказа, Заказ);
	КонецЦикла;	
	Заказ.Записать();
	
КонецПроцедуры	

Процедура ОсновныеДействияФормыЧекККМПродажа(Кнопка)
ФормаЧекаККМ=Документы.ЧекККМАвтозапчасти.ПолучитьФормуНовогоДокумента();
ФормаЧекаККМ.ЭлементыФормы.Контрагент.Значение = СсылкаНаОбъект.Контрагент;
ФормаЧекаККМ.ЭлементыФормы.ДоговорКонтрагента.Значение=СсылкаНаОбъект.ДоговорКонтрагента;
ФормаЧекаККМ.ЭлементыФормы.Сделка.Значение=СсылкаНаОбъект;
ФормаЧекаККМ.Открыть();
	
КонецПроцедуры

