
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	ОтчетИнициализация();

	ДатаОтчета   = ТекущаяДата();  //+++
	ПустыеАдреса = истина; 		   // не надо показывать остатки по ячейкам
	
КонецПроцедуры

Процедура ПриЗакрытии()

	СохранитьЗначение("НастройкаОбработкиВыгрузкаВТСДОтчет_0affe746-8d90-4548-85d7-9842fef824fe", ПостроительОтчетаОтчет.ПолучитьНастройки());

КонецПроцедуры


Процедура ДействияФормыВыгрузить(Кнопка)
	
	Перем Ответ, Данные, ВремТовар, ВремЕдиница;
	
	Если глТорговоеОборудование = Неопределено Тогда
		Предупреждение("Торговое оборудование не подключено");
		 возврат;
	ИначеЕсли глТорговоеОборудование.млТерминал.Количество() = 0 Тогда
		Предупреждение("Терминал сбора данных не подключен");
		возврат;
	Иначе
		Если глТорговоеОборудование.млТерминал.Количество() = 1 Тогда
 			РезультатВыбора = глТорговоеОборудование.млТерминал[0];
		Иначе
			СписокТерминаловСбораДанных = Новый СписокЗначений;
			Для Каждого ТерминалСбораДанных из глТорговоеОборудование.млТерминал Цикл
				СписокТерминаловСбораДанных.Добавить(ТерминалСбораДанных, ТерминалСбораДанных.Модель);
			КонецЦикла;
			РезультатВыбора = СписокТерминаловСбораДанных.ВыбратьЭлемент("Выберите терминал сбора данных");
			Если РезультатВыбора = Неопределено Тогда
				Возврат;
			КонецЕсли;
			РезультатВыбора = РезультатВыбора.Значение;
		КонецЕсли;
	КонецЕсли;
		
	ответ = глТорговоеОборудование.ВыгрузитьДанныеВТерминалСбораДанных( РезультатВыбора, ЭлементыФормы.ПолеТабличногоДокумента );
	
	Предупреждение(" Выгрузка завершена!
				   |"+ответ);
	
КонецПроцедуры

Процедура ДействияФормыОтчетНастройка(Кнопка)
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_НАСТРОЙКА(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Форма = ОбработкаОбъект.ПолучитьФорму("ОтчетНастройка");
	Форма.ПостроительОтчета = ПостроительОтчетаОтчет;
	Настройка = ПостроительОтчетаОтчет.ПолучитьНастройки();
	Если Форма.ОткрытьМодально() = Истина Тогда
		ОтчетВывести();
	Иначе
		ПостроительОтчетаОтчет.УстановитьНастройки(Настройка);
	КонецЕсли;

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_НАСТРОЙКА
КонецПроцедуры

Процедура ДействияФормыОтчетСформировать(Кнопка)
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
   
	ОтчетВывести();

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА
КонецПроцедуры

Процедура ОтчетВывести()
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ВЫПОЛНИТЬ(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ЭлементыФормы.ПолеТабличногоДокумента.Очистить();
	
	ОтчетИнициализация(истина);
	
	Настройка1 = ПостроительОтчетаОтчет.ПолучитьНастройки();
	
	//ПостроительОтчетаОтчет.Параметры.Вставить("ПоДвижениюИОстаткам", ПоДвижениюИОстаткам);
	ПостроительОтчетаОтчет.Параметры.Вставить("ДатаОтчета", ДатаОтчета);
    ПостроительОтчетаОтчет.Параметры.Вставить("ПустыеАдреса", ПустыеАдреса); //+++
		
//=====================по остаткам и движению=================================================================================================	
	Если ПоДвижениюИОстаткам тогда
	текст0 = ПостроительОтчетаОтчет.Текст ;
		ПостроительОтчетаОтчет.Текст = стрЗаменить(ПостроительОтчетаОтчет.Текст, "//МестоСоединения",
		"ПОЛНОЕ СОЕДИНЕНИЕ 
		|РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&ДатаНачОтчета, &ДатаОтчета, , , НЕ Склад.ПометкаУдаления //Склад
		|													) КАК ОстаткиИОбороты
		|ПО ОстаткиИОбороты.Номенклатура =  НоменклатураСпр.ссылка
		|ПОЛНОЕ СОЕДИНЕНИЕ 
		|РегистрНакопления.ЗаказыПоставщикам.ОстаткиИОбороты(&ДатаНачОтчета, &ДатаОтчета, , ,  //ЗакПост
		|													) КАК ЗаказыПоставщикам
		|ПО ЗаказыПоставщикам.Номенклатура =  НоменклатураСпр.ссылка" );
		
		Если не Подразделение.Пустая() тогда
		ПостроительОтчетаОтчет.Текст = стрЗаменить(ПостроительОтчетаОтчет.Текст,"//Склад", " И Склад.Подразделение = &Подразделение");
		ПостроительОтчетаОтчет.Параметры.Вставить("Подразделение", ?(Подразделение.Код="00005", справочники.Подразделения.ПустаяСсылка(), Подразделение) );  // остатки по 1 складу !
		
		ПостроительОтчетаОтчет.Текст = стрЗаменить(ПостроительОтчетаОтчет.Текст,"//ЗакПост", "ЗаказПоставщику.Подразделение = &Подразделение1");
		ПостроительОтчетаОтчет.Параметры.Вставить("Подразделение1", Подразделение );  // остатки по 1 складу !
		КонецЕсли;
	
			
		ПостроительОтчетаОтчет.Текст = стрЗаменить(ПостроительОтчетаОтчет.Текст,"//дляУсловий",
		"(ОстаткиИОбороты.КоличествоКонечныйОстаток > 0
		|			ИЛИ ОстаткиИОбороты.КоличествоПриход <> 0
		|			ИЛИ ОстаткиИОбороты.КоличествоРасход <> 0
		|ИЛИ ЗаказыПоставщикам.КоличествоКонечныйОстаток > 0
		|			ИЛИ ЗаказыПоставщикам.КоличествоПриход <> 0
		|			ИЛИ ЗаказыПоставщикам.КоличествоРасход <> 0
		|) И ");
		
		//ПостроительОтчетаОтчет.Текст = стрЗаменить(ПостроительОтчетаОтчет.Текст,"0 //ПоДвижениюИОстаткам",
		//"ЕстьNull(ОстаткиИОбороты.КоличествоКонечныйОстаток,0)");
		
		Если текст0<>ПостроительОтчетаОтчет.Текст тогда //изменился запрос
		 	ПостроительОтчетаОтчет.ЗаполнитьНастройки();
			ПостроительОтчетаОтчет.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
			Если Настройка1 <> Неопределено Тогда
				ПостроительОтчетаОтчет.УстановитьНастройки(Настройка1);
			КонецЕсли;
		КонецЕсли;
	
	ПостроительОтчетаОтчет.Параметры.Вставить("ДатаНачОтчета", ДобавитьМесяц(ДатаОтчета,-3) );
	КонецЕсли;
	
	ПостроительОтчетаОтчет.Выполнить();
	ПостроительОтчетаОтчет.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;
	ПостроительОтчетаОтчет.РазмещениеРеквизитовИзмеренийВСтроках  = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПостроительОтчетаОтчет.РазмещениеРеквизитовИзмеренийВКолонках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПостроительОтчетаОтчет.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Классика);
	ПостроительОтчетаОтчет.Вывести(ЭлементыФормы.ПолеТабличногоДокумента);

	//для ном=5 по ЭлементыФормы.ПолеТабличногоДокумента.ВысотаТаблицы цикл
	//	обл = ЭлементыФормы.ПолеТабличногоДокумента.Область(ном,3,ном,3);
	//	если стрДлина( обл.Текст )>70 тогда
	//		обл.Текст = лев(обл.Текст, 70);
	//	сообщить(строка(ном)+") слишком длинное название! название будет обрезано до 70 символов!");
	//	КонецЕсли;
	//КонецЦикла;
	Предупреждение("Сформирована таблица из "+строка(ЭлементыФормы.ПолеТабличногоДокумента.ВысотаТаблицы - 4)+" строк");
	
	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ВЫПОЛНИТЬ
КонецПроцедуры

Процедура ОтчетИнициализация(Изменение=ЛОЖЬ)
			
	если Флажок1 тогда
		ПостроительОтчетаОтчет.Текст = ТекстШК();	
	иначе	
		ПостроительОтчетаОтчет.Текст = ТекстДиски();
	КонецЕсли;
	
	ПостроительОтчетаОтчет.ЗаполнитьНастройки();
	ПостроительОтчетаОтчет.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
	ПостроительОтчетаОтчет.ТекстЗаголовка = "Отчет по "+?(Флажок1, "ШтрихКодам", "Кодам (Диски)");
	Если не Изменение тогда
		Настройка = ВосстановитьЗначение("НастройкаОбработкиВыгрузкаВТСДОтчет_0affe746-8d90-4548-85d7-9842fef824fe");
		Если Настройка <> Неопределено Тогда
			ПостроительОтчетаОтчет.УстановитьНастройки(Настройка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоДвижениюИОстаткамПриИзменении(Элемент)
	
	ЭлементыФормы.Подразделение.доступность = ПоДвижениюИОстаткам;
	
КонецПроцедуры


функция ТекстШК()
	возврат "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураСпр.Код КАК Код,
	|	выразить(НоменклатураСпр.Наименование как Строка(70)) КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ПустыеАдреса
	|			ТОГДА """"
	|		ИНАЧЕ ЕСТЬNULL(ТоварыАдресноеХранениеОстатки.АдресХранения.Код, """")
	|	КОНЕЦ КАК АдресХранения,
	|	ВЫБОР
	|		КОГДА &ПустыеАдреса
		//-----------------------------------------------
	|			ТОГДА 0 //ПоДвижениюИОстаткам
	|		ИНАЧЕ ЕСТЬNULL(ТоварыАдресноеХранениеОстатки.КоличествоОстаток, 0)
	|	КОНЕЦ КАК Количество
	|{ВЫБРАТЬ
	|	Код,
	|	Номенклатура.*,
	|	АдресХранения.* КАК АдресХранения,
	|	Количество}
	|ИЗ 
	|	(ВЫБРАТЬ
	        |	ВЫРАЗИТЬ(Штрихкоды.Штрихкод КАК СТРОКА(13)) КАК Код,
	        |	Штрихкоды.Владелец КАК Ссылка
		        |ИЗ
	        |	РегистрСведений.Штрихкоды как Штрихкоды) КАК НоменклатураСпр
	//-----------------------------------------------
	|   //МестоСоединения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыАдресноеХранение.Остатки(&ДатаОтчета, не АдресХранения.Владелец.Транзитный //Склад
	|					) КАК ТоварыАдресноеХранениеОстатки
	|		ПО НоменклатураСпр.Ссылка = ТоварыАдресноеХранениеОстатки.Номенклатура
		//-----------------------------------------------
	|ГДЕ //дляУсловий
//	|	НоменклатураСпр.ссылка.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Аксессуары) И
	|	ВЫБОР
	|		КОГДА &ПустыеАдреса тогда Истина иначе ЕСТЬNULL(ТоварыАдресноеХранениеОстатки.АдресХранения.Код, """")<> """"
    |   Конец
	|{ГДЕ
	|	НоменклатураСпр.ссылка.* КАК Номенклатура,
	|	(ЕСТЬNULL(ТоварыАдресноеХранениеОстатки.АдресХранения.Код, """")) КАК АдресХранения,
	|	(ЕСТЬNULL(ТоварыАдресноеХранениеОстатки.КоличествоОстаток, 0)) КАК Количество}
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код,
	|	АдресХранения
	|{УПОРЯДОЧИТЬ ПО
	|	Код,
	|	АдресХранения}
	|АВТОУПОРЯДОЧИВАНИЕ";

	
	
КонецФункции
							   
функция ТекстДиски()
   возврат "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураСпр.Код КАК Код,
	|	выразить(НоменклатураСпр.Наименование как Строка(70)) КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ПустыеАдреса
	|			ТОГДА """"
	|		ИНАЧЕ ЕСТЬNULL(ТоварыАдресноеХранениеОстатки.АдресХранения.Код, """")
	|	КОНЕЦ КАК АдресХранения,
	|	ВЫБОР
	|		КОГДА &ПустыеАдреса
		//-----------------------------------------------
	|			ТОГДА 0 //ПоДвижениюИОстаткам
	|		ИНАЧЕ ЕСТЬNULL(ТоварыАдресноеХранениеОстатки.КоличествоОстаток, 0)
	|	КОНЕЦ КАК Количество
	|{ВЫБРАТЬ
	|	Код,
	|	Номенклатура.*,
	|	АдресХранения.* КАК АдресХранения,
	|	Количество}
	|ИЗ 
	|	Справочник.Номенклатура КАК НоменклатураСпр
	//-----------------------------------------------
	|   //МестоСоединения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыАдресноеХранение.Остатки(&ДатаОтчета, не АдресХранения.Владелец.Транзитный //Склад
	|									) КАК ТоварыАдресноеХранениеОстатки
	|		ПО НоменклатураСпр.Ссылка = ТоварыАдресноеХранениеОстатки.Номенклатура
		//-----------------------------------------------
	|ГДЕ //дляУсловий
	|	НоменклатураСпр.ссылка.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски) И
	|	ВЫБОР
	|		КОГДА &ПустыеАдреса тогда Истина иначе ЕСТЬNULL(ТоварыАдресноеХранениеОстатки.АдресХранения.Код, """")<> """"
    |     Конец
	|	И ( НоменклатураСпр.ссылка.Код<=""9202980"" или НоменклатураСпр.ссылка.Код>=""9257388"")
	
		|{ГДЕ
	|	НоменклатураСпр.ссылка.* КАК Номенклатура,
	|	(ЕСТЬNULL(ТоварыАдресноеХранениеОстатки.АдресХранения.Код, """")) КАК АдресХранения,
	|	(ЕСТЬNULL(ТоварыАдресноеХранениеОстатки.КоличествоОстаток, 0)) КАК Количество
	| }
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код,
	|	АдресХранения
	|{УПОРЯДОЧИТЬ ПО
	|	Код,
	|	АдресХранения}
	|АВТОУПОРЯДОЧИВАНИЕ";
КонецФункции							   

Процедура Флажок1ПриИзменении(Элемент)
		ОтчетИнициализация(истина);
КонецПроцедуры
