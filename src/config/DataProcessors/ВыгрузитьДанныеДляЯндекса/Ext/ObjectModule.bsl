
Перем тзКартинки Экспорт;
Перем тзОписания Экспорт;
Перем КаталогПоУмолчанию;
//Перем ФайлЛог;

Функция ВыгрузитьДанныеНаВнешнийРесурс() Экспорт
	
	СформироватьТаблицуБрендов();
	СформироватьТаблицуПроизводителей();
	ЗагрузитьФайлыКартинокОписания();
	СформироватьФайлыВыгрузки();
	ВыгрузитьФайлыНаФТП();
	
КонецФункции // ВыгрузитьДанныеНаВнешнийРесурс()

Процедура ДобавитьБренда(НаименованиеБренда, Категория, НаименованиеКатегории, НаименованиеКатегорииДляСайта)
	
	НовСтр = Бренды.Добавить();
	
	НовСтр.Бренд                 = НаименованиеБренда;
	НовСтр.Категория             = Категория;
	НовСтр.НаименованиеКатегории = НаименованиеКатегории;
	НовСтр.НаименованиеКатегорииДляСайта = НаименованиеКатегорииДляСайта;
	
КонецПроцедуры // ДобавитьБренда()

Процедура СформироватьТаблицуБрендов() Экспорт
	
	ДобавитьБренда("Alcasta"     , "1" , "Диски Alcasta"     , "Диски Alcasta");
	//ДобавитьБренда("Replica"    , "2", "Диски Replica");
	ДобавитьБренда("LegeArtis"   , "2" , "Диски Replica"     , "Диски LegeArtis");     // Реплику продвигаем под торговой маркой LegeArtis
	ДобавитьБренда("Arrivo"      , "3" , "Диски Arrivo"      , "Диски Arrivo");
	ДобавитьБренда("Trebl"       , "4" , "Диски Trebl"       , "Диски Trebl");
	ДобавитьБренда("Cross Street", "5" , "Диски Cross Street", "Диски Cross Street");
	ДобавитьБренда("NZ"          , "6" , "Диски NZ"          , "Диски NZ");
	ДобавитьБренда("Harp"        , "7" , "Диски Harp"        , "Диски Harp");
	ДобавитьБренда("SDT"         , "8" , "Диски SDT"         , "Диски SDT");
	ДобавитьБренда("Vissol"      , "9" , "Диски Vissol"      , "Диски Vissol");
	ДобавитьБренда("X-Race"      , "10", "Диски X-Race"      , "Диски X-Race");
	ДобавитьБренда("Yokatta"     , "11", "Диски Yokatta"     , "Диски Yokatta");
	ДобавитьБренда("YST"         , "12", "Диски YST"         , "Диски YST");
	
КонецПроцедуры // СформироватьТаблицуБрендов()

Процедура СформироватьТаблицуПроизводителей()
	
	ДобавитьСтрокуПроизводитель("Alcasta"     ,  100, "1");  // Производитель: ALCASTA
	ДобавитьСтрокуПроизводитель("LegeArtis"   , 3533, "2");  // Производитель: (Д) REPLICA TD
	ДобавитьСтрокуПроизводитель("LegeArtis"   ,   65, "2");  // Производитель: REPLICA
	ДобавитьСтрокуПроизводитель("LegeArtis"   , 3400, "2");  // Производитель: REPLICA CATWILD
	ДобавитьСтрокуПроизводитель("LegeArtis"   , 3401, "2");  // Производитель: REPLICA DWS
	ДобавитьСтрокуПроизводитель("LegeArtis"   , 3333, "2");  // Производитель: REPLICA TD
	ДобавитьСтрокуПроизводитель("LegeArtis"   , 3754, "2");  // Производитель: REPLICA TD Special Series
	ДобавитьСтрокуПроизводитель("LegeArtis"   , 3072, "2");  // Производитель: REPLICA YST
	ДобавитьСтрокуПроизводитель("Arrivo"      , 3389, "3");  // Производитель: ARRIVO
	ДобавитьСтрокуПроизводитель("Trebl"       ,  597, "4");  // Производитель: TREBL
	ДобавитьСтрокуПроизводитель("Cross Street", 3291, "5");  // Производитель: CROSS STREET
	ДобавитьСтрокуПроизводитель("NZ"          ,  517, "6");  // Производитель: NZ
	ДобавитьСтрокуПроизводитель("Harp"        , 3654, "7");  // Производитель: HARP
	ДобавитьСтрокуПроизводитель("SDT"         , 3640, "8");  // Производитель: SDT
	ДобавитьСтрокуПроизводитель("Vissol"      , 3657, "9");  // Производитель: VISSOL
	ДобавитьСтрокуПроизводитель("X-Race"      , 3406, "10"); // Производитель: X-RACE
	ДобавитьСтрокуПроизводитель("Yokatta"     , 3290, "11"); // Производитель: YOKATTA
	ДобавитьСтрокуПроизводитель("YST"         , 3072, "12"); // Производитель: REPLICA YST
	ДобавитьСтрокуПроизводитель("YST"         , 3293, "12"); // Производитель: YST
	
КонецПроцедуры // СформироватьТаблицуПроизводителей()

Процедура ДобавитьСтрокуПроизводитель(Бренд, ПроизводительКод, Категория)
	
	НовСтр = Производители.Добавить();
	НовСтр.Бренд         = Бренд;
	НовСтр.Производитель = Справочники.Производители.НайтиПоКоду(ПроизводительКод);
	НовСтр.Категория     = Категория;
	
КонецПроцедуры // ДобавитьСтрокуПроизводитель()

Процедура ЗагрузитьФайлыКартинокОписания()
	
	//ФайлКартинки = "\\terminal\_Отдел ИТ\ДискиДляЯндекса\Обработка формирования файлов\ВсеКартинкиНаСайте.xml";
	ФайлКартинки = "D:/Выгрузки для клиентов/Яндекс/ВспомогательныеФайлы/ВсеКартинкиНаСайте.xml";
	Если ФайлСуществует(ФайлКартинки) Тогда
		ВыполнитьЧтениеКартинокИзФайла(ФайлКартинки);
	КонецЕсли;
	//ФайлОписания = "\\terminal\_Отдел ИТ\ДискиДляЯндекса\Обработка формирования файлов\Описания.xml";
	ФайлОписания = "D:/Выгрузки для клиентов/Яндекс/ВспомогательныеФайлы/Описания.xml";
	Если ФайлСуществует(ФайлОписания) Тогда
		ВыполнитьЧтениеОписанийИзФайла(ФайлОписания);
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьФайлыКартинокОписания()

Процедура ВыполнитьЧтениеКартинокИзФайла(ФайлКартинки) Экспорт
	
	тзКартинки = Новый ТаблицаЗначений;
	тзКартинки.Колонки.Добавить("Номенклатура");
	тзКартинки.Колонки.Добавить("КартинкаУРЛ");
	
	ЧтениеXML = Новый ЧтениеXML;
	
	//Ткст = "01: " + ФайлКартинки;
	//ЗаписатьЛог(ФайлЛог, Ткст);

	ЧтениеXML.ОткрытьФайл(ФайлКартинки);
	//
	//Ткст = "02: " + ФайлКартинки;
	//ЗаписатьЛог(ФайлЛог, Ткст);
	
	//ПостроительDOM = Новый ПостроительDOM;
	//ДокументДОМ = ПостроительDOM.Прочитать(ЧтениеXML);
	//Эл1 = ДокументДОМ.ПолучитьЭлементыПоИмени("AutoCompleteResult");
	//Эл2 = ДокументДОМ.ПолучитьЭлементыПоИмени("ProductType");
	//Картинка = ДокументДОМ.ПолучитьЭлементыПоИмени("Value");
	
	//ДанныеКартинок = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	//Если ТипЗнч(ДанныеКартинок) = Тип("ОбъектXDTO") Тогда
	//	ТекСвва = ДанныеКартинок.Свойства();
	//	Для каждого тексв Из ТекСвва Цикл
	//		Если тексв.Форма = формаxml.Элемент Тогда
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Label" Тогда
			ЧтениеXML.Прочитать();
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
				КодНоменклатуры = ЧтениеXML.Значение;
			КонецЕсли;
		КонецЕсли;
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Value" Тогда
			ЧтениеXML.Прочитать();
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
				КартинкаУРЛ = СтрЗаменить(ЧтениеXML.Значение, Символы.ПС, "");
				Номенклатура = Справочники.Номенклатура.НайтиПоКоду(КодНоменклатуры);
				Если НЕ Номенклатура = Неопределено Тогда
					НовСтр = тзКартинки.Добавить();
					НовСтр.Номенклатура = Номенклатура;
					НовСтр.КартинкаУРЛ  = КартинкаУРЛ;
				Иначе
					Сообщить("Не обнаружена номенклатура с кодом """ + КодНоменклатуры + """");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
    ЧтениеXML.Закрыть();
	
	ФлажокКартинкиЗагружены = Истина;
	
КонецПроцедуры // ВыполнитьЧтениеКартинокИзФайла()

Функция ФайлСуществует(ФайлКартинки) Экспорт
	
	ВсеОК = Ложь;
	
	Ф = Новый Файл(ФайлКартинки);
	Если Ф.Существует() Тогда
		ВсеОК = Истина;
	Иначе
		Сообщить("Файл """ + ФайлКартинки + """ не существует или к нему отсутствует доступ");
	КонецЕсли;
	
	Возврат ВсеОК;
	
КонецФункции // ФайлСуществует()

Процедура ВыполнитьЧтениеОписанийИзФайла(ФайлОписания) Экспорт
	
	тзОписания = Новый ТаблицаЗначений;
	тзОписания.Колонки.Добавить("Модель");
	тзОписания.Колонки.Добавить("Описание");
	
	ЧтениеXML = Новый ЧтениеXML;
	
	//Ткст = "03: " + ФайлОписания;
	//ЗаписатьЛог(ФайлЛог, Ткст);
	//
	ЧтениеXML.ОткрытьФайл(ФайлОписания);
	//
	//Ткст = "04: " + ФайлОписания;
	//ЗаписатьЛог(ФайлЛог, Ткст);
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "code" Тогда
			ЧтениеXML.Прочитать();
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
				КодМодели = ЧтениеXML.Значение;
			КонецЕсли;
		КонецЕсли;
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "desc" Тогда
			ЧтениеXML.Прочитать();
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
				Описание = СтрЗаменить(ЧтениеXML.Значение, Символы.ПС, "");
				Модель = Справочники.МоделиТоваров.НайтиПоКоду(КодМодели);
				Если НЕ Модель = Неопределено Тогда
					НовСтр = тзОписания.Добавить();
					НовСтр.Модель   = Модель;
					НовСтр.Описание = Описание;
				Иначе
					Сообщить("Не обнаружена модель с кодом """ + КодМодели + """");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
    ЧтениеXML.Закрыть();
	
	ФлажокОписанияЗагружены = Истина;
	
КонецПроцедуры // ВыполнитьЧтениеОписанийИзФайла()

Процедура СформироватьФайлыВыгрузки() Экспорт
	
	Для Каждого ТекСтрБренд Из Бренды Цикл
		СформироватьФайлВыгрузки(ТекСтрБренд.Бренд, ТекСтрБренд.Категория);
	КонецЦикла;
	
КонецПроцедуры // СформироватьФайлыВыгрузки()

Процедура СформироватьФайлВыгрузки(Бренд, Категория)
	
	Если ПустаяСтрока(КаталогПуть) Тогда
		КаталогПуть = КаталогПоУмолчанию;
	КонецЕсли;

	ДанныеДляВыгрузки = ПолучитьДанныеДляВыгрузкиПоБренду(Бренд);
	ВыборкаБренды = ДанныеДляВыгрузки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаБренды.Следующий() Цикл
		ЗаписьXML = Новый ЗаписьXML;
		ПолноеИмяФайла = ПолучитьПолноеИмяФайлаПоБренду(ВыборкаБренды.Бренд);
		
		//Ткст = "05: " + ПолноеИмяФайла;
		//ЗаписатьЛог(ФайлЛог, Ткст);
		//
		ЗаписьXML.ОткрытьФайл(ПолноеИмяФайла, "UTF-8");
		//
		//Ткст = "06: " + ПолноеИмяФайла;
		//ЗаписатьЛог(ФайлЛог, Ткст);
		
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента("yml_catalog");
		ЗаписьXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		ТекДата = ТекущаяДата();
		ТекДатаСтр = Формат(ТекДата, "ДФ=yyyy-MM-ddThh:mm:ss");
		ЗаписьXML.ЗаписатьАтрибут("date", ТекДатаСтр);
		ЗаписьXML.ЗаписатьАтрибут("version", "1.0");
		ЗаписьXML.ЗаписатьАтрибут("xsi:noNamespaceSchemaLocation", "VendorYML-1.0.xsd");
		ЗаписьXML.ЗаписатьНачалоЭлемента("vendor");
		ЗаписьXML.ЗаписатьАтрибут("name", ВыборкаБренды.Бренд);
		// URL
		ЗаписатьЭлемент(ЗаписьXML, "url", "www.yst.ru");
		
		УказатьКатегории(ЗаписьXML);
		
		// Модели
		ЗаписьXML.ЗаписатьНачалоЭлемента("models");
		Выборка = ВыборкаБренды.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("model");
			ЗаписьXML.ЗаписатьАтрибут("id"        , Выборка.НоменклатураКод);
			ЗаписьXML.ЗаписатьАтрибут("categoryId", Категория);
			Наименование = ПреобразоватьНаименование(Выборка.НоменклатураНаименование, Выборка.ПроизводительНаименование);
			ЗаписатьЭлемент(ЗаписьXML, "name"       , Наименование);
			ЗаписатьЭлемент(ЗаписьXML, "type"       , Выборка.МодельНаименование);
			//ЗаписатьЭлемент(ЗаписьXML, "vendor"     , Бренд);
			ЗаписатьЭлемент(ЗаписьXML, "vendorCode" , Выборка.НоменклатураКод);
			// {{ Картинка
			//КартинкаУРЛ = ПолучитьАдресКартинкиТовара(Выборка.Номенклатура);
			КартинкаУРЛ = ПолучитьКартинкиУРЛ(Выборка.Номенклатура);
			ЗаписьXML.ЗаписатьНачалоЭлемента("pictureUrl");
				ЗаписьXML.ЗаписатьАтрибут("type", "main");
				ЗаписьXML.ЗаписатьТекст(КартинкаУРЛ);
			ЗаписьXML.ЗаписатьКонецЭлемента(); // pictureUrl
			ЗаписатьЭлемент(ЗаписьXML, "pictureUrl", КартинкаУРЛ);
			// }} Картинка
			ШтрихКод = ПолучитьШтриКод(Выборка.Номенклатура);
			Если ЗначениеЗаполнено(ШтрихКод) Тогда
				ЗаписатьЭлемент(ЗаписьXML, "barcode", ШтрихКод);
			КонецЕсли;
			Описание = ПолучитьОписание(Выборка.Модель);
			Если ЗначениеЗаполнено(Описание) Тогда
				ЗаписатьЭлемент(ЗаписьXML, "description", Описание);
			КонецЕсли;
			// Ширина обода
			ЗаписьXML.ЗаписатьНачалоЭлемента("param");
			ЗаписьXML.ЗаписатьАтрибут("name"    , "Ширина обода");
			ЗаписьXML.ЗаписатьАтрибут("unit"    , "дюйм");
			ЗаписьXML.ЗаписатьТекст(Выборка.Ширина);
			ЗаписьXML.ЗаписатьКонецЭлемента(); // param
			
			// Диаметр обода
			ЗаписьXML.ЗаписатьНачалоЭлемента("param");
			ЗаписьXML.ЗаписатьАтрибут("name"    , "Диаметр обода");
			ЗаписьXML.ЗаписатьАтрибут("unit"    , "дюйм");
			ЗаписьXML.ЗаписатьТекст(Выборка.Диаметр);
			ЗаписьXML.ЗаписатьКонецЭлемента(); // param
			
			// Вес
			Если ЗначениеЗаполнено(Выборка.Вес) Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("param");
				ЗаписьXML.ЗаписатьАтрибут("name"    , "Вес");
				ЗаписьXML.ЗаписатьТекст(СтрЗаменить(Строка(Выборка.Вес), ",", "."));
				ЗаписьXML.ЗаписатьКонецЭлемента(); // param
			КонецЕсли;
			
			// Объем
			Если ЗначениеЗаполнено(Выборка.Объем) Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("param");
				ЗаписьXML.ЗаписатьАтрибут("name"    , "Объем");
				ЗаписьXML.ЗаписатьТекст(СтрЗаменить(Строка(Выборка.Объем), ",", "."));
				ЗаписьXML.ЗаписатьКонецЭлемента(); // param
			КонецЕсли;
			
			// Количество крепежных отверстий
			ЗаписьXML.ЗаписатьНачалоЭлемента("param");
			ЗаписьXML.ЗаписатьАтрибут("name"    , "Количество крепежных отверстий");
			ЗаписьXML.ЗаписатьТекст(Выборка.КоличествоОтверстий);
			ЗаписьXML.ЗаписатьКонецЭлемента(); // param
			
			// Диаметр расположения отверстий
			ЗаписьXML.ЗаписатьНачалоЭлемента("param");
			ЗаписьXML.ЗаписатьАтрибут("name"    , "Диаметр расположения отверстий");
			ЗаписьXML.ЗаписатьАтрибут("unit"    , "мм");
			ЗаписьXML.ЗаписатьТекст(Выборка.PCD);
			ЗаписьXML.ЗаписатьКонецЭлемента(); // param
			
			// Диаметр центрального отверстия
			ЗаписьXML.ЗаписатьНачалоЭлемента("param");
			ЗаписьXML.ЗаписатьАтрибут("name"    , "Диаметр центрального отверстия");
			ЗаписьXML.ЗаписатьАтрибут("unit"    , "мм");
			ЗаписьXML.ЗаписатьТекст(Выборка.ДиаметрСтупицы);
			ЗаписьXML.ЗаписатьКонецЭлемента(); // param
			
			// Вылет
			ЗаписьXML.ЗаписатьНачалоЭлемента("param");
			ЗаписьXML.ЗаписатьАтрибут("name"    , "Вылет (ET)");
			ЗаписьXML.ЗаписатьАтрибут("unit"    , "мм");
			ЗаписьXML.ЗаписатьТекст(Выборка.Вылет);
			ЗаписьXML.ЗаписатьКонецЭлемента(); // param
			
			ЗаписьXML.ЗаписатьКонецЭлемента(); // model
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента(); // models
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // vendor
		ЗаписьXML.ЗаписатьКонецЭлемента(); // yml_catalog
		ЗаписьXML.Закрыть();
		НовСтрФайл = ФайлыВыгрузки.Добавить();
		НовСтрФайл.ФайлПуть = ПолноеИмяФайла;
	КонецЦикла;
	
КонецПроцедуры // СформироватьФайлВыгрузки()

Функция ПолучитьДанныеДляВыгрузкиПоБренду(Бренд)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	 "ВЫБРАТЬ
	 |	Производители.Бренд,
	 |	Производители.Производитель
	 |ПОМЕСТИТЬ втПроизводители
	 |ИЗ
	 |	&Производители КАК Производители
	 |ГДЕ
	 |	Производители.Бренд = &Бренд
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	СезонныйАссортимент.Номенклатура,
	 |	СезонныйАссортимент.Номенклатура.Модель КАК Модель,
	 |	СезонныйАссортимент.Номенклатура.Типоразмер КАК Типоразмер,
	 |	втПроизводители.Бренд КАК Бренд,
	 |	СезонныйАссортимент.Номенклатура.НаименованиеПолное КАК НоменклатураНаименование,
	 |	СезонныйАссортимент.Номенклатура.Код,
	 |	СезонныйАссортимент.Номенклатура.Модель.Наименование КАК МодельНаименование,
	 |	СезонныйАссортимент.Номенклатура.Типоразмер.Ширина КАК Ширина,
	 |	СезонныйАссортимент.Номенклатура.Типоразмер.Диаметр КАК Диаметр,
	 |	СезонныйАссортимент.Номенклатура.Типоразмер.КоличествоОтверстий КАК КоличествоОтверстий,
	 |	СезонныйАссортимент.Номенклатура.Типоразмер.ДиаметрСтупицы КАК ДиаметрСтупицы,
	 |	СезонныйАссортимент.Номенклатура.Типоразмер.Вылет КАК Вылет,
	 |	СезонныйАссортимент.Номенклатура.Типоразмер.PCD КАК PCD,
	 |	СезонныйАссортимент.Номенклатура.ЕдиницаХраненияОстатков.Вес КАК Вес,
	 |	СезонныйАссортимент.Номенклатура.ЕдиницаХраненияОстатков.Объем КАК Объем,
	 |	СезонныйАссортимент.Номенклатура.Производитель.Наименование КАК ПроизводительНаименование
	 |ИЗ
	 |	РегистрСведений.СезонныйАссортимент КАК СезонныйАссортимент
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПроизводители КАК втПроизводители
	 |		ПО СезонныйАссортимент.Номенклатура.Производитель = втПроизводители.Производитель
	 |ИТОГИ ПО
	 |	Бренд";
	 
	 Запрос.УстановитьПараметр("Производители", Производители.Выгрузить());
	 Запрос.УстановитьПараметр("Бренд", Бренд);
	 
	 Результат = Запрос.Выполнить();
	 
	 Возврат Результат;
	
КонецФункции // ПолучитьДанныеДляВыгрузкиПоБренду()

Функция ПолучитьПолноеИмяФайлаПоБренду(Бренд)
	
	Если НЕ Прав(КаталогПуть, 1) = "\" И НЕ Прав(КаталогПуть, 1) = "/" Тогда
		ПолноеИмяФайла = КаталогПуть + "\" + СтрЗаменить(Бренд, " ", "_") + ".xml";
	Иначе
		ПолноеИмяФайла = КаталогПуть + СтрЗаменить(Бренд, " ", "_") + ".xml";
	КонецЕсли;
	
	ПолноеИмяФайла = НРег(ПолноеИмяФайла);
	
	Возврат ПолноеИмяФайла;
	
КонецФункции // ПолучитьПолноеИмяФайлаПоБренду()

Процедура ЗаписатьЭлемент(ЗаписьXML, ИмяЭлемента, ТекстЭлемента)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяЭлемента);
	ЗаписьXML.ЗаписатьТекст(ТекстЭлемента);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // ЗаписатьЭлемент()

Процедура УказатьКатегории(ЗаписьXML)
	
	// {{ Только для примера. В рабочем варианте заменить на фактические значения
	//ЗаписьXML.ЗаписатьНачалоЭлемента("categories");

	//ЗаписьXML.ЗаписатьНачалоЭлемента("category");
	//ЗаписьXML.ЗаписатьАтрибут("id", "9");
	//ЗаписьXML.ЗаписатьТекст("Бытовая техника");
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("category");
	//	ЗаписьXML.ЗаписатьАтрибут("id", "91");
	//	ЗаписьXML.ЗаписатьАтрибут("parentId", "9");
	//	ЗаписьXML.ЗаписатьТекст("Обогреватели");
	//	ЗаписьXML.ЗаписатьКонецЭлемента();
	//	
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("category");
	//	ЗаписьXML.ЗаписатьАтрибут("id", "92");
	//	ЗаписьXML.ЗаписатьАтрибут("parentId", "9");
	//	ЗаписьXML.ЗаписатьТекст("Климатическая техника");
	//	ЗаписьXML.ЗаписатьКонецЭлемента();
	//ЗаписьXML.ЗаписатьКонецЭлемента();
	//
	//ЗаписьXML.ЗаписатьКонецЭлемента(); // categories
	// }} Только для примера. В рабочем варианте заменить на фактические значения
	
	//тзКатегории = Бренды.Выгрузить(, "Категория, НаименованиеКатегории");
	//тзКатегории.Свернуть("Категория, НаименованиеКатегории");
	тзКатегории = Бренды.Выгрузить(, "Категория, НаименованиеКатегорииДляСайта");
	тзКатегории.Свернуть("Категория, НаименованиеКатегорииДляСайта");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("categories");

	Для Каждого ТекСтр Из тзКатегории Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("category");
		ЗаписьXML.ЗаписатьАтрибут("id", ТекСтр.Категория);
		//ЗаписьXML.ЗаписатьТекст(ТекСтр.НаименованиеКатегории);
		ЗаписьXML.ЗаписатьТекст(ТекСтр.НаименованиеКатегорииДляСайта);
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // categories
	
КонецПроцедуры // УказатьКатегории()

Функция ПреобразоватьНаименование(НаименованиеИсточник, Производитель)
	
	ЛевСкобка= Найти (НаименованиеИсточник,"(");
	ПравСкобка= Найти (НаименованиеИсточник,")");
	
	
	НаименованиеПриемник=НаименованиеИсточник;
	Если ЛевСкобка>0 И ПравСкобка>ЛевСкобка Тогда
		Слово1=Лев (НаименованиеИсточник,ЛевСкобка-1);
		Слово2=Сред(НаименованиеИсточник,ПравСкобка+1,СтрДлина(НаименованиеИсточник)-ПравСкобка);
		НаименованиеПриемник=Слово1+Слово2;
	КонецЕсли; 
	
	НаименованиеПриемник=СтрЗаменить(НаименованиеПриемник,"Укомпл","");
	НаименованиеПриемник=СтрЗаменить(НаименованиеПриемник,"укомпл","");
	
	ФлагЛА=Ложь;
	ФлагКонцепт=Ложь;
	Если Найти(НаименованиеПриемник,"LegeArtis")>0 Тогда
		ФлагЛА=Истина;
		Если Найти(НаименованиеПриемник,"Concept")>0 Тогда
			ФлагКонцепт=Истина;
		КонецЕсли;
	КонеЦЕсли; 
	НаименованиеПриемник=СтрЗаменить(НаименованиеПриемник,"LegeArtis","");
	//НаименованиеПриемник=СтрЗаменить(НаименованиеПриемник,"YST","");
	НаименованиеПриемник=СтрЗаменить(НаименованиеПриемник,"new","");
	НаименованиеПриемник=СтрЗаменить(НаименованиеПриемник,"+Г","");
	НаименованиеПриемник=СтрЗаменить(НаименованиеПриемник,"Replika","Replica");
	НаименованиеПриемник=СтрЗаменить(НаименованиеПриемник,"шип.","шип");
	
	НаименованиеПриемник= СокрЛП(НаименованиеПриемник);
	Если ФлагЛА И ФлагКонцепт Тогда
		НаименованиеПриемник="LegeArtis "+ НаименованиеПриемник;
		//Сообщить(НаименованиеПриемник);
	КонецЕсли;
	
	Если Найти(нрег(НаименованиеПриемник),"formula")>0 и нрег(СокрЛП(Производитель))="pirelli" и Найти(нрег(НаименованиеПриемник),"pirelli")=0 тогда
		НаименованиеПриемник="Pirelli "+НаименованиеПриемник;
	КонецЕсли;
	
	Возврат (НаименованиеПриемник);	
	
КонецФункции // ПреобразоватьНаименование()

Функция ПолучитьКартинкиУРЛ(Номенклатура)
	
	СтрНоменкл = тзКартинки.Найти(Номенклатура, "Номенклатура");
	Если НЕ СтрНоменкл = Неопределено Тогда
		КартинкаУРЛ = СтрНоменкл.КартинкаУРЛ;
	Иначе
		КартинкаУРЛ = "";
	КонецЕсли;
	
	Возврат КартинкаУРЛ;
	
КонецФункции // ПолучитьКартинкиУРЛ()

Функция ПолучитьШтриКод(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Штрихкоды.Штрихкод
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", Номенклатура);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ШтрихКод = Выборка.Штрихкод;
	Иначе
		ШтрихКод = "";
	КонецЕсли;
	
	Возврат ШтрихКод;
	
КонецФункции // ПолучитьШтриКод()

Функция ПолучитьОписание(Модель)
	
	СтрМодель = тзОписания.Найти(Модель, "Модель");
	Если НЕ СтрМодель = Неопределено Тогда
		Описание = СтрМодель.Описание;
	Иначе
		Описание = "";
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции // ПолучитьОписание()

Процедура ВыгрузитьФайлыНаФТП() Экспорт
	
	Если ПустаяСтрока(КаталогПуть) Тогда
		КаталогПуть = КаталогПоУмолчанию;
	КонецЕсли;
	
	МасФайлы = НайтиФайлыДляПередачи();
	
	Если МасФайлы.Количество() > 0 Тогда

		ПапкаАрхив = "ПоследняяУспешнаяВыгрузка";
		Если Прав(КаталогПуть, 1) = "\" ИЛИ Прав(КаталогПуть, 1) = "/" Тогда
			ПапкаАрхивПолныйПуть = КаталогПуть + ПапкаАрхив;
		Иначе
			ПапкаАрхивПолныйПуть = КаталогПуть + "\" + ПапкаАрхив;
		КонецЕсли;
		Пап = Новый Файл(ПапкаАрхивПолныйПуть);
		Если НЕ Пап.Существует() Тогда
			СоздатьКаталог(Пап);
		КонецЕсли;
		
		СтруктПарамФТП = Новый Структура();
		СтруктПарамФТП.Вставить("ФТП_Сервер", "188.225.16.133");
		СтруктПарамФТП.Вставить("ФТП_Логин" , "dc140403_yupload");
		СтруктПарамФТП.Вставить("ФТП_Пароль", "Orucedqy");
		СтруктПарамФТП.Вставить("ФТП_Пассив", Истина);
		СтруктПарамФТП.Вставить("ФТП_Папка" , "");
		
		СоединениеФТП = ПолучитьСоединениеФТП(СтруктПарамФТП);
		Если НЕ СоединениеФТП = Неопределено Тогда
			Для Каждого ТекФайл Из МасФайлы Цикл
				ОтправкаУспешна = Истина;
				Попытка
					СоединениеФТП.Записать(ТекФайл.ПолноеИмя, СтруктПарамФТП.ФТП_Папка + ТекФайл.Имя);
				Исключение
					ОтправкаУспешна = Ложь;
				КонецПопытки;
				Если ОтправкаУспешна Тогда
					ПереместитьФайл(ТекФайл.ПолноеИмя, ПапкаАрхивПолныйПуть + "\" + ТекФайл.Имя);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыгрузитьФайлыНаФТП()

Функция ПолучитьСоединениеФТП(СтруктПарамФТП)
	
	Попытка
		СоединениеФТП = Новый FTPСоединение(СтруктПарамФТП.ФТП_Сервер, , СтруктПарамФТП.ФТП_Логин, СтруктПарамФТП.ФТП_Пароль, , СтруктПарамФТП.ФТП_Пассив);
	Исключение
		СоединениеФТП = Неопределено;
		Ткст = "Не удалось установить соединение FTP: " + СтруктПарамФТП.ФТП_Сервер + "/" + СтруктПарамФТП.ФТП_Логин + "/" + СтруктПарамФТП.ФТП_Пароль;
		Сообщить(Ткст);
	КонецПопытки;
	
	Возврат СоединениеФТП;
	
КонецФункции // ПолучитьСоединениеФТП()

Функция НайтиФайлыДляПередачи()
	
	МасФайлыПрайсов = НайтиФайлы(КаталогПуть, "*.xml");
	
	Возврат МасФайлыПрайсов;
	
КонецФункции // НайтиФайлыДляПередачи()

Процедура ЗаписатьЛог(ФайлПуть, СтрокаДобавить)
	
	Ткст = Новый ЗаписьТекста;
	
	Попытка
		Ткст.Открыть(ФайлПуть, "windows-1251", , Истина);
	Исключение
		//ожидание 3 секунды
		ТекДата = ТекущаяДата();
		Пока ТекущаяДата() < ТекДата + 3 Цикл
		КонецЦикла;
		Попытка
			Ткст.Открыть(ФайлПуть, "windows-1251", , Истина);
		Исключение
			//Сообщить("Не удалось открыть лог-файл");
			Возврат;
		КонецПопытки;
	КонецПопытки;
	
	Ткст.ЗаписатьСтроку("" + ТекущаяДата() + " " + СтрокаДобавить);
	Ткст.Закрыть();
	
КонецПроцедуры // ЗаписатьЛог()

/////////////////////////////////////////////////////////////////////////////////

//КаталогПоУмолчанию = "\\terminal\_Отдел ИТ\ДискиДляЯндекса\ФайлыВыгрузки";
КаталогПоУмолчанию = "D:/Выгрузки для клиентов/Яндекс/";
//ФайлЛог = КаталогПоУмолчанию + "Лог.txt";