

Процедура ЗаполнитьНачальныеДанные(НаборКонстант = Неопределено) Экспорт

	Если НаборКонстант = Неопределено Тогда
		Набор = Константы.СоздатьНабор();
		Набор.Прочитать();
	Иначе
		Набор = НаборКонстант;
	КонецЕсли;
	
	Запись.ВидАдресаКонтрагента               = Набор.ВидАдресаКонтрагента;
	Запись.ВидТелефонаКонтактногоЛица         = Набор.ВидТелефонаКонтактногоЛица;
	Запись.ВидТелефонаКонтрагента             = Набор.ВидТелефонаКонтрагента;
	Запись.ВидЭлектроннойПочтыКонтактногоЛица = Набор.ВидЭлектроннойПочтыКонтактногоЛица;
	Запись.ВидЭлектроннойПочтыКонтрагента     = Набор.ВидЭлектроннойПочтыКонтрагента;
	Запись.ЮрФизЛицо                          = Набор.ЮрФизЛицо;
	Запись.ОсновнойВидДеятельностиКонтрагента = Набор.ОсновнойВидДеятельностиКонтрагента;

	ХранилищеПрочихЗначений = Набор.ЗначенияПоУмолчаниюДляНовогоКонтрагента;
	Если ТипЗнч(ХранилищеПрочихЗначений) = Тип("ХранилищеЗначения") Тогда
		СтруктураПрочихЗначений = ХранилищеПрочихЗначений.Получить();
		Если ТипЗнч(СтруктураПрочихЗначений) = Тип("Структура") Тогда
			Для каждого ЭлементСтруктуры Из СтруктураПрочихЗначений Цикл
				Запись[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция проверяет строку на наличие значимых символов
//
// Параметры
//  ВыбСтрока  – строка для проверки
// Возвращаемое значение:
//   Строка - пробел или пустое значение строки
//
Функция ПроверкаПустойСтроки(ВыбСтрока, ПризнакЗапятой=Истина)
	
	Если ПустаяСтрока(ВыбСтрока) Тогда
		Возврат "";
	Иначе
		Возврат ?(ПризнакЗапятой,",","")+" ";
	КонецЕсли; 
	
КонецФункции // ПроверкаПустойСтроки()

// Процедура открывает форму списка справочника ВидыКонтаткнойИнформации
// с установленным отбором и владельцем
//
// Переметры:
//  Тип        - Перечисоление, типы контактной информации.
//  ВидОбъекта - Перечисоление, вид объекта контактной информации.
//  Элемент    - Элемент управления, владелец для формы выбора.
//
// Возвращаемое значение
//  НЕТ
//
Процедура ОткрытьФормуВыбораВидаКонтактнойИнформацииСОтбором(Тип, ВидОбъекта, Элемент)

	ФормаВыбора = Справочники.ВидыКонтактнойИнформации.ПолучитьФормуВыбора(, Элемент);
	
	ФормаВыбора.Отбор.Тип.Использование = Истина;
	ФормаВыбора.Отбор.Тип.Значение      = Тип;
	ФормаВыбора.Отбор.ВидОбъектаКонтактнойИнформации.Использование = Истина;
	ФормаВыбора.Отбор.ВидОбъектаКонтактнойИнформации.Значение      = ВидОбъекта;
	
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Тип.Доступность                            = Ложь;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбъектаКонтактнойИнформации.Доступность = Ложь;
	
	ФормаВыбора.Открыть();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()
	
	// Копируем запись
	КопияЗаписи.ОбъектРегистратор = Запись.ОбъектРегистратор;
	Для каждого Реквизит Из Метаданные.РегистрыСведений.ДанныеНезарегистрированныхКонтрагентов.Реквизиты Цикл
		КопияЗаписи[Реквизит.Имя] = Запись[Реквизит.Имя];
	КонецЦикла; 
	
	Для каждого Кнопка Из ЭлементыФормы.ОсновныеДействияФормы.Кнопки Цикл
		Если Кнопка.Имя = "Зарегистрировать" Тогда
			Кнопка.Доступность = ПравоДоступа("Добавление", Метаданные.Справочники.Контрагенты);
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии на кнопку ОК командной панели ОсновныеДействияФормы.
// 
//
Процедура ОсновныеДействияФормыОК(Кнопка)
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

// Процедура вызывается при нажатии на кнопку Зарегистрировать командной панели ОсновныеДействияФормы.
// 
//
Процедура ОсновныеДействияФормыЗарегистрировать(Кнопка)
	
	Если ПустаяСтрока(Запись.ФИОКонтактногоЛица) Тогда
		ТекстВопроса = "Зарегистрировать контрагента?";
		РегистрироватьКонтЛицо = Ложь;
	Иначе
		ТекстВопроса = "Зарегистрировать контрагента и контактное лицо?";
		РегистрироватьКонтЛицо = Истина;
	КонецЕсли; 
	
	ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
	Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	//ФормаВыбораГруппы = Справочники.Контрагенты.ПолучитьФормуВыбораГруппы(, ЭтаФорма);
	//ФормаВыбораГруппы.Заголовок = "Выберите группу для контрагента";
	//ВыбГруппаКонтрагентов = ФормаВыбораГруппы.ОткрытьМодально();
	//
	//Если ВыбГруппаКонтрагентов = Неопределено Тогда
	//	Возврат;
	//КонецЕсли; 
	
	ВыбГруппаКонтрагентов = Справочники.Контрагенты.ПотенциальныеПокупатели;
	
	НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	НовыйКонтрагент.Родитель                   = ВыбГруппаКонтрагентов;
	НовыйКонтрагент.Наименование               = Запись.НаименованиеКонтрагента;
	НовыйКонтрагент.НаименованиеПолное         = Запись.НаименованиеКонтрагентаПолное;
	НовыйКонтрагент.ДополнительноеОписание     = Запись.ДополнительноеОписание;
	НовыйКонтрагент.ЮрФизЛицо                  = Запись.ЮрФизЛицо;
	НовыйКонтрагент.ОсновнойМенеджерПокупателя = глТекущийПользователь;
	НовыйКонтрагент.Покупатель                 = Запись.Покупатель;
	НовыйКонтрагент.Поставщик                  = Запись.Поставщик;
	НовыйКонтрагент.ОсновнойМенеджерКонтрагента = глТекущийПользователь;
	
	Если НЕ ЗначениеНеЗаполнено(Запись.ОсновнойВидДеятельностиКонтрагента) Тогда
		НовыйКонтрагент.ОсновнойВидДеятельности = Запись.ОсновнойВидДеятельностиКонтрагента;
		НоваяСтрокаТЧ = НовыйКонтрагент.ВидыДеятельности.Добавить();
		НоваяСтрокаТЧ.ВидДеятельности = Запись.ОсновнойВидДеятельностиКонтрагента;
	КонецЕсли; 
	
	НачатьТранзакцию();
	
	ФиксироватьТранзакцию = Истина;
	
	НовыйКонтрагент.УстановитьНовыйКод("П");
	ФормаКонтрагента = НовыйКонтрагент.ПолучитьФорму(, ЭтаФорма.ВладелецФормы);
	
	// Контактная инфомация контрагента
	// Телефон контрагента
	Если НЕ ЗначениеНеЗаполнено(Запись.ВидТелефонаКонтрагента) И НЕ ПустаяСтрока(Запись.НомерТелефонаКонтрагента) Тогда
		
		НоваяЗапись = ФормаКонтрагента.НаборКонтактнойИнформации.Добавить();
		
		НоваяЗапись.Вид    = Запись.ВидТелефонаКонтрагента;
		НоваяЗапись.Тип    = Перечисления.ТипыКонтактнойИнформации.Телефон;
		НоваяЗапись.Объект = НовыйКонтрагент.Ссылка;
		
		НоваяЗапись.Поле3  = Запись.НомерТелефонаКонтрагента;
		НоваяЗапись.Поле4  = Запись.ДобавочныйНомерТелефонаКонтрагента;
		НоваяЗапись.Поле2  = Запись.КодГородаТелефонаКонтрагента;
		
		СформироватьПредставлениеТелефона(НоваяЗапись);
		
	КонецЕсли; 
	
	// Адрес контрагента
	Если НЕ ЗначениеНеЗаполнено(Запись.ВидАдресаКонтрагента) И НЕ ПустаяСтрока(Запись.ГородКонтрагента + Запись.УлицаКонтрагента + Запись.ДомКонтрагента + Запись.КорпусКонтрагента) Тогда
		
		НоваяЗапись = ФормаКонтрагента.НаборКонтактнойИнформации.Добавить();
		
		НоваяЗапись.Вид    = Запись.ВидАдресаКонтрагента;
		НоваяЗапись.Тип    = Перечисления.ТипыКонтактнойИнформации.Адрес;
		НоваяЗапись.Объект = НовыйКонтрагент.Ссылка;
		
		Если ВРег(Запись.ГородКонтрагента) = "МОСКВА" ИЛИ ВРег(Запись.ГородКонтрагента) = "САНКТ-ПЕТЕРБУРГ" Тогда
			НоваяЗапись.Поле2 = Запись.ГородКонтрагента;
		Иначе
			НоваяЗапись.Поле4 = Запись.ГородКонтрагента;
		КонецЕсли; 
		
		НоваяЗапись.Поле6 = Запись.УлицаКонтрагента;
		НоваяЗапись.Поле7 = Запись.ДомКонтрагента;
		НоваяЗапись.Поле8 = Запись.КорпусКонтрагента;
		
		НоваяЗапись.Представление = ПолучитьПредставлениеАдреса(НоваяЗапись);
	
	КонецЕсли; 
	
	// Адрес электронной почты контрагента
	Если НЕ ЗначениеНеЗаполнено(Запись.ВидЭлектроннойПочтыКонтрагента) И НЕ ПустаяСтрока(Запись.АдресЭлектроннойПочтыКонтрагента) Тогда
		
		НоваяЗапись = ФормаКонтрагента.НаборКонтактнойИнформации.Добавить();
		
		НоваяЗапись.Вид    = Запись.ВидЭлектроннойПочтыКонтрагента;
		НоваяЗапись.Тип    = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		НоваяЗапись.Объект = НовыйКонтрагент.Ссылка;
		
		НоваяЗапись.Представление = Запись.АдресЭлектроннойПочтыКонтрагента;
	
	КонецЕсли;
	
	
	
	Попытка
		ФормаКонтрагента.ЗаписатьВФорме();
	Исключение
		Сообщить("Не удалось записать контрагента: " + ОписаниеОшибки());
		ФиксироватьТранзакцию = Ложь;
	КонецПопытки;
	
	Если ФиксироватьТранзакцию И РегистрироватьКонтЛицо Тогда
		
		НовоеКонтактноеЛицо = Справочники.КонтактныеЛица.СоздатьЭлемент();
		НовоеКонтактноеЛицо.Наименование       = Запись.ФИОКонтактногоЛица;
		НовоеКонтактноеЛицо.ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента;
		НовоеКонтактноеЛицо.ОбъектВладелец     = НовыйКонтрагент.Ссылка;
		НовоеКонтактноеЛицо.Должность          = Запись.ДолжностьКонтактногоЛица;
		
		Попытка
			НовоеКонтактноеЛицо.УстановитьНовыйКод();
			НовоеКонтактноеЛицо.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
			ФиксироватьТранзакцию = Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Если ФиксироватьТранзакцию И РегистрироватьКонтЛицо Тогда
	
		НаборКонтактнойИнформации = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
		
		// Телефон контактного лица
		Если НЕ ЗначениеНеЗаполнено(Запись.ВидТелефонаКонтактногоЛица) И НЕ ПустаяСтрока(Запись.НомерТелефонаКонтактногоЛица) Тогда
			
			НоваяЗапись = НаборКонтактнойИнформации.Добавить();
			
			НоваяЗапись.Вид    = Запись.ВидТелефонаКонтактногоЛица;
			НоваяЗапись.Тип    = Перечисления.ТипыКонтактнойИнформации.Телефон;
			НоваяЗапись.Объект = НовоеКонтактноеЛицо.Ссылка;
			
			НоваяЗапись.Поле3  = Запись.НомерТелефонаКонтактногоЛица;
			НоваяЗапись.Поле4  = Запись.ДобавочныйНомерТелефонаКонтактногоЛица;
			НоваяЗапись.Поле2  = Запись.КодГородаТелефонаКонтактногоЛица;
			
			СформироватьПредставлениеТелефона(НоваяЗапись);
			
		КонецЕсли; 
	
		// Адрес электронной почты контактного лица
		Если НЕ ЗначениеНеЗаполнено(Запись.ВидЭлектроннойПочтыКонтактногоЛица) И НЕ ПустаяСтрока(Запись.АдресЭлектроннойПочтыКонтактногоЛица) Тогда
			
			НоваяЗапись = НаборКонтактнойИнформации.Добавить();
			
			НоваяЗапись.Вид    = Запись.ВидЭлектроннойПочтыКонтактногоЛица;
			НоваяЗапись.Тип    = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			НоваяЗапись.Объект = НовоеКонтактноеЛицо.Ссылка;
			
			НоваяЗапись.Представление = Запись.АдресЭлектроннойПочтыКонтактногоЛица;
		
		КонецЕсли;
		
		Попытка
			НаборКонтактнойИнформации.Записать(Ложь);
		Исключение
			Сообщить(ОписаниеОшибки());
			ФиксироватьТранзакцию = Ложь;
		КонецПопытки;
		
	КонецЕсли; 
	
	ЭтаФорма.ВладелецФормы.Контрагент = НовыйКонтрагент.Ссылка;
	Если РегистрироватьКонтЛицо Тогда
		ЭтаФорма.ВладелецФормы.КонтактноеЛицо = НовоеКонтактноеЛицо.Ссылка;
	Иначе
		ЭтаФорма.ВладелецФормы.КонтактноеЛицо = Справочники.КонтактныеЛица.ПустаяСсылка();
	КонецЕсли;
	
	Если ТипЗнч(ЭтаФорма.ВладелецФормы.ЭтотОбъект) = Тип("ДокументОбъект.Событие") Тогда
		ЭтаФорма.ВладелецФормы.СтруктураОбъектКонтрагент = Новый Структура("Объект, ЗаписыватьОбъект", НовыйКонтрагент, Истина);
	КонецЕсли; 
	
	Попытка
		ЭтаФорма.ВладелецФормы.ЗаписатьВФорме();
	Исключение
		СообщитьОбОшибке(ОписаниеОшибки(),, "Не удалось записать текущий документ ""Событие""");
		ФиксироватьТранзакцию = Ложь;
	КонецПопытки;
	
	Если ФиксироватьТранзакцию Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.Закрыть(Ложь);
	
	Если ФиксироватьТранзакцию Тогда
		Если Запись.Потребность_Наварка ИЛИ Запись.Потребность_Нарезка ИЛИ Запись.Потребность_Утилизация Тогда
		яштУстановитьЗначениеСвойстваОбъекта(НовыйКонтрагент.Ссылка,ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90149"),Запись.Потребность_Наварка);
		яштУстановитьЗначениеСвойстваОбъекта(НовыйКонтрагент.Ссылка,ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90150"),Запись.Потребность_Нарезка);
		яштУстановитьЗначениеСвойстваОбъекта(НовыйКонтрагент.Ссылка,ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90151"),Запись.Потребность_Утилизация);
		КонецЕсли;
	КонецЕсли;	
	
	Если ФиксироватьТранзакцию Тогда
		ФормаКонтрагента.Обновить();
		ФормаКонтрагента.Открыть();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ОБРАБОТЧИКОВ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события НачалоВыбора элемента формы ВидТелефонаКонтрагента.
//
Процедура ВидТелефонаКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораВидаКИ(Истина, Элемент, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы ВидАдресаКонтрагента.
//
Процедура ВидАдресаКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораВидаКИ(Истина, Элемент, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы ВидЭлектроннойПочтыКонтрагента.
//
Процедура ВидЭлектроннойПочтыКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораВидаКИ(Истина, Элемент, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы ВидТелефонаКонтактногоЛица.
//
Процедура ВидТелефонаКонтактногоЛицаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораВидаКИ(Истина, Элемент, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛица);
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы ВидЭлектроннойПочтыКонтактногоЛица.
//
Процедура ВидЭлектроннойПочтыКонтактногоЛицаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораВидаКИ(Истина, Элемент, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛица);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы НомерТелефонаКонтрагента.
//
Процедура НомерТелефонаКонтрагентаПриИзменении(Элемент)
	
	Элемент.Значение = ПривестиНомерТелефонаКШаблону(Элемент.Значение);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы НомерТелефонаКонтактногоЛица.
//
Процедура НомерТелефонаКонтактногоЛицаПриИзменении(Элемент)
	
	Элемент.Значение = ПривестиНомерТелефонаКШаблону(Элемент.Значение);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ДобавочныйНомерТелефонаКонтрагента.
//
Процедура ДобавочныйНомерТелефонаКонтрагентаПриИзменении(Элемент)
	
	Элемент.Значение = ПривестиНомерТелефонаКШаблону(Элемент.Значение);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ДобавочныйНомерТелефонаКонтактногоЛица.
//
Процедура ДобавочныйНомерТелефонаКонтактногоЛицаПриИзменении(Элемент)
	
	Элемент.Значение = ПривестиНомерТелефонаКШаблону(Элемент.Значение);
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		ОтветНаВопрос = Вопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
		Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			// Восстанавливаем из копии
			Запись.ОбъектРегистратор = КопияЗаписи.ОбъектРегистратор;
			Для каждого Реквизит Из Метаданные.РегистрыСведений.ДанныеНезарегистрированныхКонтрагентов.Реквизиты Цикл
				Запись[Реквизит.Имя] = КопияЗаписи[Реквизит.Имя];
			КонецЦикла; 
		ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыЗаписать(Кнопка)
	
	Модифицированность = Ложь;
	
КонецПроцедуры
