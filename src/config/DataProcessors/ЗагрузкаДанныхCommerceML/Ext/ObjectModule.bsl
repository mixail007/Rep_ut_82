Перем мТекСтрДокументы; // Строка табличной части ЭлДокумента для загрузки данных
Перем мТекСтрТовары;    // Строка табличной части ТовырыКаталог, ТоварыПрайс, ТоварыДокумент для загрузки данных
Перем мТекСтрТипыЦен;   // Строка табличной части Соответствия цен
Перем мИдДокумента;     // Идентификатор документа, присваивается при загрузке
Перем мИННКонтрагента;  // ИНН загружаемого контрагента
Перем мИмяКонтрагента;  // Наименование загружаемого контрагента
Перем мРольКонтрагента; // Роль загружаемого контрагента
Перем мИмяНалога;       // Наименование загружаемого вида налогов

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ПЕРВОНАЧАЛЬНОЙ НАСТРОЙКИ ЗАГРУЗКИ ДАННЫХ

// Процедура заполняет структуру для управления чтением данных из XML-файла
//
Процедура ЗаполнитьСтруктурыЗагрузки() Экспорт

	СтруктураЗагрузки = Новый Структура();
	//Типы документов
	СтруктураЗагрузки.Вставить("Каталог_КоммерческаяИнформация_",              "ТипКаталог");
	СтруктураЗагрузки.Вставить("ПакетПредложений_КоммерческаяИнформация_",     "ТипПрайс");
	СтруктураЗагрузки.Вставить("Документ_КоммерческаяИнформация_",             "ТипДокумент");
	СтруктураЗагрузки.Вставить("ХозОперация_Документ_КоммерческаяИнформация_", "ХозОперация");
	//Товары в каталоге
	СтруктураЗагрузки.Вставить("Товар_Товары_Каталог_КоммерческаяИнформация_",                   "НовыйТоварКаталог");
	СтруктураЗагрузки.Вставить("Ид_Товар_Товары_Каталог_КоммерческаяИнформация_",                 "ИдТовара");
	СтруктураЗагрузки.Вставить("Наименование_Товар_Товары_Каталог_КоммерческаяИнформация_",       "ИмяТовара");
	СтруктураЗагрузки.Вставить("ШтрихКод_Товар_Товары_Каталог_КоммерческаяИнформация_",           "ШтрихКодТовара");
	СтруктураЗагрузки.Вставить("Артикул_Товар_Товары_Каталог_КоммерческаяИнформация_",            "АртикулТовара");
	//Товары в прайсе
	СтруктураЗагрузки.Вставить("Предложение_Предложения_ПакетПредложений_КоммерческаяИнформация_",              "НовыйТоварПрайс");
	СтруктураЗагрузки.Вставить("Ид_Предложение_Предложения_ПакетПредложений_КоммерческаяИнформация_",           "ИдТовара");
	СтруктураЗагрузки.Вставить("Наименование_Предложение_Предложения_ПакетПредложений_КоммерческаяИнформация_", "ИмяТовара");
	СтруктураЗагрузки.Вставить("ШтрихКод_Предложение_Предложения_ПакетПредложений_КоммерческаяИнформация_",     "ШтрихКодТовара");
	СтруктураЗагрузки.Вставить("Артикул_Предложение_Предложения_ПакетПредложений_КоммерческаяИнформация_",      "АртикулТовара");
	СтруктураЗагрузки.Вставить("ИдТипаЦены_Цена_Цены_Предложение_Предложения_ПакетПредложений_КоммерческаяИнформация_", "ЦенаВПрайсе");
	СтруктураЗагрузки.Вставить("ЦенаЗаЕдиницу_Цена_Цены_Предложение_Предложения_ПакетПредложений_КоммерческаяИнформация_", "ЦенаЗаЕдиницу");
	СтруктураЗагрузки.Вставить("Валюта_Цена_Цены_Предложение_Предложения_ПакетПредложений_КоммерческаяИнформация_", "Валюта");
	СтруктураЗагрузки.Вставить("Единица_Цена_Цены_Предложение_Предложения_ПакетПредложений_КоммерческаяИнформация_", "ЕдиницаИзмерения");
	СтруктураЗагрузки.Вставить("Коэффициент_Цена_Цены_Предложение_Предложения_ПакетПредложений_КоммерческаяИнформация_", "Коэффициент");
	//Товары в документе
	СтруктураЗагрузки.Вставить("Товар_Товары_Документ_КоммерческаяИнформация_",               "НовыйТоварДок");
	СтруктураЗагрузки.Вставить("Ид_Товар_Товары_Документ_КоммерческаяИнформация_",            "ИдТовара");
	СтруктураЗагрузки.Вставить("Наименование_Товар_Товары_Документ_КоммерческаяИнформация_",  "ИмяТовара");
	СтруктураЗагрузки.Вставить("ШтрихКод_Товар_Товары_Документ_КоммерческаяИнформация_",      "ШтрихКодТовара");
	СтруктураЗагрузки.Вставить("Артикул_Товар_Товары_Документ_КоммерческаяИнформация_",       "АртикулТовара");
	СтруктураЗагрузки.Вставить("ИдКаталога_Товар_Товары_Документ_КоммерческаяИнформация_",    "ИдКаталогаДокумент");
	СтруктураЗагрузки.Вставить("ЦенаЗаЕдиницу_Товар_Товары_Документ_КоммерческаяИнформация_", "ЦенаЗаЕдиницу");
	СтруктураЗагрузки.Вставить("Количество_Товар_Товары_Документ_КоммерческаяИнформация_",    "Количество");
	СтруктураЗагрузки.Вставить("Сумма_Товар_Товары_Документ_КоммерческаяИнформация_",         "Сумма");
	СтруктураЗагрузки.Вставить("Коэффициент_Товар_Товары_Документ_КоммерческаяИнформация_",   "Коэффициент");
	СтруктураЗагрузки.Вставить("Единица_Товар_Товары_Документ_КоммерческаяИнформация_",       "ЕдиницаИзмерения");
	//Базовые Единицы измерения 
	СтруктураЗагрузки.Вставить("Имя_БазоваяЕдиница_Товар_Товары_Каталог_КоммерческаяИнформация_",  "БазоваяЕдиница");
	СтруктураЗагрузки.Вставить("Имя_БазоваяЕдиница_Предложение_Предложения_ПакетПредложений_КоммерческаяИнформация_", "БазоваяЕдиница");
	СтруктураЗагрузки.Вставить("Имя_БазоваяЕдиница_Товар_Товары_Документ_КоммерческаяИнформация_", "БазоваяЕдиница");

	//Типы цен
	СтруктураЗагрузки.Вставить("ТипЦены_ТипыЦен_ПакетПредложений_КоммерческаяИнформация_",              "НовыйТипЦены");
	СтруктураЗагрузки.Вставить("Ид_ТипЦены_ТипыЦен_ПакетПредложений_КоммерческаяИнформация_",           "ИдТипаЦены");
	СтруктураЗагрузки.Вставить("Наименование_ТипЦены_ТипыЦен_ПакетПредложений_КоммерческаяИнформация_", "ИмяТипаЦены");
	СтруктураЗагрузки.Вставить("Валюта_ТипЦены_ТипыЦен_ПакетПредложений_КоммерческаяИнформация_",       "ВалютаТипаЦены");
	СтруктураЗагрузки.Вставить("Наименование_Налог_ТипЦены_ТипыЦен_ПакетПредложений_КоммерческаяИнформация_", "ИмяНалога");
	СтруктураЗагрузки.Вставить("УчтеноВСумме_Налог_ТипЦены_ТипыЦен_ПакетПредложений_КоммерческаяИнформация_", "НДСВСуммеПрайс");

	//Владелец каталога
	СтруктураЗагрузки.Вставить("Наименование_Владелец_Каталог_КоммерческаяИнформация_",            "ИмяКонтрагента");
	СтруктураЗагрузки.Вставить("ИНН_Владелец_Каталог_КоммерческаяИнформация_",                     "ИННКонтрагента");
	СтруктураЗагрузки.Вставить("ОфициальноеНаименование_Владелец_Каталог_КоммерческаяИнформация_", "ПолноеНаименование");
	СтруктураЗагрузки.Вставить("ПолноеНаименование_Владелец_Каталог_КоммерческаяИнформация_",      "ПолноеНаименование");
	//Владелец прайса
	СтруктураЗагрузки.Вставить("Наименование_Владелец_ПакетПредложений_КоммерческаяИнформация_",            "ИмяКонтрагента");
	СтруктураЗагрузки.Вставить("ИНН_Владелец_ПакетПредложений_КоммерческаяИнформация_",                     "ИННКонтрагента");
	СтруктураЗагрузки.Вставить("ОфициальноеНаименование_Владелец_ПакетПредложений_КоммерческаяИнформация_", "ПолноеНаименование");
	СтруктураЗагрузки.Вставить("ПолноеНаименование_Владелец_Каталог_ПакетПредложений_",                     "ПолноеНаименование");
	
	//Контрагенты в документе
	СтруктураЗагрузки.Вставить("Контрагент_Контрагенты_Документ_КоммерческаяИнформация_",              "КонтрагентДок");
	СтруктураЗагрузки.Вставить("Наименование_Контрагент_Контрагенты_Документ_КоммерческаяИнформация_", "ИмяКонтрагентаДок");
	СтруктураЗагрузки.Вставить("ИНН_Контрагент_Контрагенты_Документ_КоммерческаяИнформация_",          "ИННКонтрагентаДок");
	СтруктураЗагрузки.Вставить("Роль_Контрагент_Контрагенты_Документ_КоммерческаяИнформация_",         "РольКонтрагента");
	СтруктураЗагрузки.Вставить("ОфициальноеНаименование_Контрагент_Контрагенты_Документ_КоммерческаяИнформация_", "ПолноеНаименование");
	СтруктураЗагрузки.Вставить("ПолноеНаименование_Контрагент_Контрагенты_Документ_КоммерческаяИнформация_",      "ПолноеНаименование");

	//Шапка документа
	СтруктураЗагрузки.Вставить("Номер_Документ_КоммерческаяИнформация_",  "НомерДок");
	СтруктураЗагрузки.Вставить("Дата_Документ_КоммерческаяИнформация_",   "ДатаДок");
	СтруктураЗагрузки.Вставить("Валюта_Документ_КоммерческаяИнформация_", "ВалютаДок");
	СтруктураЗагрузки.Вставить("Курс_Документ_КоммерческаяИнформация_",   "КурсДок");
	СтруктураЗагрузки.Вставить("Наименование_Налог_Налоги_Документ_КоммерческаяИнформация_", "ИмяНалога");
	СтруктураЗагрузки.Вставить("УчтеноВСумме_Налог_Налоги_Документ_КоммерческаяИнформация_", "НДСВСуммеДок");
	СтруктураЗагрузки.Вставить("ДатаОтгрузки_Документ_КоммерческаяИнформация_",   "ДатаОтгрузкиДок");
	СтруктураЗагрузки.Вставить("СрокПлатежа_Документ_КоммерческаяИнформация_",   "СрокПлатежаДок");

КонецПроцедуры

// Процедура очищает табличные части обработки и устанавливает значения 
//вспомогательных переменных
//
Процедура ОчиститьТаблицы()

	ЭлДокументы.Очистить();
	ТоварыКаталог.Очистить();
	ТоварыПрайс.Очистить();
	ТоварыДокумент.Очистить();
	СоответствияТиповЦен.Очистить();
	мИдДокумента = 0;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ ДЛЯ АЛГОРИТМОВ ЗАГРУЗКИ ДАННЫХ

// Функция преобразует строку в дату
//
// Параметры:
//  Зн - строка - дата в формате ГГГГ-ММ-ЧЧ
//
// Возвращаемое значение:
//  Значение типа "Дата"
//
Функция ПолучитьДатуИзСтроки(Зн)
	
	ПозРазделителя = Найти(Зн, "-");
	Если ПозРазделителя = 0 Тогда 
		Возврат "";
	КонецЕсли;
	
	Зн1  = СокрЛП(Лев(Зн, ПозРазделителя - 1));
	Зн2 = СокрЛП(Прав(Зн, СтрДлина(Зн) - ПозРазделителя));
 
	ПозРазделителя = Найти(Зн2, "-");
	Если ПозРазделителя = 0 Тогда 
		Возврат "";
	КонецЕсли;
	
	Зн3 = СокрЛП(Лев(Зн2, ПозРазделителя - 1));
	Зн4 = СокрЛП(Прав(Зн2, СтрДлина(Зн2) - ПозРазделителя));
	
	Возврат Дата(Зн1, Зн3, Зн4);
	
КонецФункции

// Функция определяет является ли значение пустой ссылкой
//
//Параметры:
// Значение - значение для определения типа
//
// Возвращаемое значение
//  булево - ИСТИНА если значение НЕ пустая ссылка, иначе ЛОЖЬ
//
Функция ЗначениеНеПустаяСсылка(Значение)

	Если НЕ ТипЗнч(Значение) = Тип("Строка") И НЕ ЗначениеНеЗаполнено(Значение) Тогда
		Возврат ИСТИНА;
	Иначе
		Возврат ЛОЖЬ;
	КонецЕсли;

КонецФункции

// Функция определяет является ли не пустой ссылкой
//
//Параметры:
// Значение - значение для определения типа
//
// Возвращаемое значение
//  булево - ИСТИНА если значение пустая ссылка или строка, иначе ЛОЖЬ
//
Функция ЗначениеНеОпределено(Значение) Экспорт

	Если ТипЗнч(Значение) = Тип("Строка") ИЛИ ЗначениеНеЗаполнено(Значение) Тогда
		Возврат ИСТИНА;
	Иначе
		Возврат ЛОЖЬ;
	КонецЕсли;

КонецФункции

// Функция определяет является ли не пустой строкой
//
//Параметры:
// Значение - значение для определения типа
//
// Возвращаемое значение
//  булево - ИСТИНА если значение НЕ пустая строка, иначе ЛОЖЬ
//
Функция ЗначениеНеПустаяСтрока(Значение)

	Если ТипЗнч(Значение) = Тип("Строка") И НЕ ЗначениеНеЗаполнено(Значение) Тогда
		Возврат ИСТИНА;
	Иначе
		Возврат ЛОЖЬ;
	КонецЕсли;

КонецФункции

// Процедура читает текстовой узел XML документа
//
// Параметры:
//  ОбъектXML - объект типа ЧтениеXML
//
Функция ПолучитьТекстЭлемента(ОбъектXML)

	Если ОбъектXML.Прочитать() И ОбъектXML.ТипУзла = ТипУзлаXML.Текст Тогда
		Возврат ОбъектXML.Значение;
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

// Функция возвращает строки таблицы отобранные по реквизиту "ИдДокумента"
//
// Таблица     - табличная часть
// ИдДокумента - значение для отбора
//
// Возвращаемое значение:
//  массив строк табличной части
//
Функция НайтиСтрокиДокумента(Таблица, ИдДокумента)

	Отбор = Новый Структура("ИдДокумента", ИдДокумента);
	Возврат Таблица.НайтиСтроки(Отбор);

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ СОЗДАНИЯ НОВЫХ ЭЛЕМЕНТОВ СПРАВОЧНИКОВ

// Функция возвращает новый элемент справочника "Номенклатура
//
// Параметры:
//  СтрокаДанных - строка табличной части для заполнения реквизитов нового элемента
//
// Возвращаемое значение:
//  новый справочник-объект "Номенклатура"
//
Функция СоздатьНоменклатуру(СтрокаДанных) Экспорт

	СпрНоменклатура                         = Справочники.Номенклатура.СоздатьЭлемент();
	СпрНоменклатура.Наименование            = СтрокаДанных.Наименование;
	СпрНоменклатура.НаименованиеПолное      = СтрокаДанных.Наименование;
	СпрНоменклатура.Артикул                 = СтрокаДанных.Артикул;
	СпрНоменклатура.БазоваяЕдиницаИзмерения = СтрокаДанных.БазоваяЕдиницаИзмерения;
	СпрНоменклатура.СтавкаНДС               = Перечисления.СтавкиНДС.НДС18;
	//СпрНоменклатура.ВидВоспроизводства      = Перечисления.ВидыВоспроизводстваНоменклатуры.Закупка;

	//СпрНоменклатура.ВидНоменклатуры = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойВидНоменклатуры");
	//Если ЗначениеНеЗаполнено(СпрНоменклатура.ВидНоменклатуры) Тогда
	//	СпрНоменклатура.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоРеквизиту("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);
	//КонецЕсли;
	//Если НЕ ЗначениеНеЗаполнено(СпрНоменклатура.ВидНоменклатуры) Тогда
	//	Если СпрНоменклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор Тогда
	//		СпрНоменклатура.Набор = ИСТИНА;
	//	ИначеЕсли СпрНоменклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
	//		СпрНоменклатура.Услуга = ИСТИНА;
	//	КонецЕсли;
	//КонецЕсли;

	Возврат СпрНоменклатура;

КонецФункции

// Функция возвращает новый элемент справочника "ТипыЦенКонтрагентов"
//
// Параметры:
//  СтрокаДанных - строка табличной части для заполнения реквизитов нового элемента
//
// Возвращаемое значение:
//  новый справочник-объект "ТипыЦенКонтрагентов"
//
Функция СоздатьТипЦен(СтрокаДанных) Экспорт

	СпрТипЦен                 = Справочники.ТипыЦенНоменклатурыКонтрагентов.СоздатьЭлемент();
	СпрТипЦен.Владелец        = СтрокаДанных.Контрагент;
	СпрТипЦен.Наименование    = СтрокаДанных.ТипЦены;
	СпрТипЦен.ЦенаВключаетНДС = СтрокаДанных.НДСВСумме;
	СпрТипЦен.ВалютаЦены      = СтрокаДанных.Валюта;
	Возврат СпрТипЦен;

КонецФункции

// Функция возвращает новый элемент справочника "КлассификаторЕдиницИзмерения
//
// Параметры:
//  ИмяЕдиницыИзмерения - наименование новой единицы измерения
//
// Возвращаемое значение:
//  новый справочник-объект "КлассификаторЕдиницИзмерения"
//
Функция СоздатьЕдиницуИзмерения(ИмяЕдиницыИзмерения) Экспорт

	СпрЕдиница                    = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
	СпрЕдиница.Код                = ИмяЕдиницыИзмерения;
	СпрЕдиница.Наименование       = ИмяЕдиницыИзмерения;
	СпрЕдиница.НаименованиеПолное = ИмяЕдиницыИзмерения;
	Возврат СпрЕдиница;

КонецФункции

// Функция возвращает новый элемент справочника "Валюты"
//
// Параметры:
//  ИмяВалюты - наименование новой валюты
//
// Возвращаемое значение:
//  новый справочник-объект "Валюты"
//
Функция СоздатьВалюту(ИмяВалюты) Экспорт

	СпрВалюта                    = Справочники.Валюты.СоздатьЭлемент();
	СпрВалюта.Код                = ИмяВалюты;
	СпрВалюта.Наименование       = ИмяВалюты;
	СпрВалюта.НаименованиеПолное = ИмяВалюты;
	Возврат СпрВалюта;

КонецФункции

// Функция возвращает новый элемент справочника "Организации"
//
// Параметры:
//  СтрокаДанных - строка табличной части для заполнения реквизитов нового элемента
//
// Возвращаемое значение:
//  новый справочник-объект "Организации"
//
Функция СоздатьОрганизацию(СтрокаДанных) Экспорт

	СпрОрганизация              = Справочники.Организации.СоздатьЭлемент();
	СпрОрганизация.Наименование = СтрокаДанных.Организация;
	СпрОрганизация.ИНН          = СтрокаДанных.ИННОрганизации;
	СпрОрганизация.ЮрФизЛицо    = Перечисления.ЮрФизЛицо.ЮрЛицо;
	Возврат СпрОрганизация

КонецФункции

// Функция возвращает новый элемент справочника "Контрагенты"
//
// Параметры:
//  СтрокаДанных - строка табличной части для заполнения реквизитов нового элемента
//
// Возвращаемое значение:
//  новый справочник-объект "Контрагенты"
//
Функция СоздатьКонтрагента(СтрокаДанных) Экспорт

	СпрКонтрагент              = Справочники.Контрагенты.СоздатьЭлемент();
	СпрКонтрагент.Наименование = СтрокаДанных.Контрагент;
	СпрКонтрагент.ИНН          = СтрокаДанных.ИННКонтрагента;
	СпрКонтрагент.ЮрФизЛицо    = Перечисления.ЮрФизЛицо.ЮрЛицо;
	Возврат СпрКонтрагент

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УПРАВЛЕНИЯ СОЗДАНИЕМ НОВЫХ ЭЛЕМЕНТОВ СПРАВОЧНИКОВ

// Процедура создает элементы справочника, открывает форму нового элемента,
// если элемент записан ссылка присвается переданному значению
//
// Параметры:
//  Форма          - форма из которой вызвана процедура
//  Значение       - переменная, в которое пишем ссылку на новый элемента
//  СтрокаТаблицы  - структура с параметрами для процедур создания нового объекта
//  ТипСправочника - строка-тип справочника, элемент которго создаем
//
Процедура СоздатьЭлементСправочникаИтеративно(Форма, Значение, СтрокаТаблицы, ТипСправочника) Экспорт

	Если ТипСправочника = "Контрагенты" Тогда
		Спр = СоздатьКонтрагента(СтрокаТаблицы);
	ИначеЕсли ТипСправочника = "Организации" Тогда
		Спр = СоздатьОрганизацию(СтрокаТаблицы);
	ИначеЕсли ТипСправочника = "Валюты" Тогда
		Спр = СоздатьВалюту(Значение);
	ИначеЕсли ТипСправочника = "КлассификаторЕдиницИзмерения" Тогда
		Спр = СоздатьЕдиницуИзмерения(Значение);
	ИначеЕсли ТипСправочника = "Номенклатура" Тогда
		Спр = СоздатьНоменклатуру(СтрокаТаблицы);
	ИначеЕсли ТипСправочника = "ТипыЦенНоменклатурыКонтрагентов" Тогда
		Спр = СоздатьТипЦен(СтрокаТаблицы);
	Иначе
		Возврат;
	КонецЕсли;

	ФормаСправочника = Спр.ПолучитьФорму( , Форма);
	ФормаСправочника.ОткрытьМодально();

	//Если записан то присваиваем
	Если НЕ Спр.ЭтоНовый() Тогда
		Значение = Спр.Ссылка;
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ ТАБЛИЦ СООТВЕТСТВИЙ ЭЛЕМЕНТОВ СПРАВОЧНИКОВ

// Процедура заполняет таблицу соответствий по переданной таблице и реквизитам
//
// Параметры:
//  ТаблицаДанных       - табличная часть по которой проводится заполнение
//  ТаблицаСоответствий - табличная часть - таблица соответствия
//  ПолеПоиска          - реквизит табличной части ТаблицаДанных
//  ПолеСоответствия    - реквизит табличной части ТаблицаСоответствий
//
Процедура ЗаполнитьСоответствия(ТаблицаДанных, ТаблицаСоответствий, ПолеПоиска, ПолеСоответствия)

	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		НайденнаяСтрока = ТаблицаСоответствий.Найти(СтрокаТаблицы[ПолеПоиска],ПолеСоответствия);
		Если НайденнаяСтрока = Неопределено Тогда
			// Для каталог и прайса валюты не определены
			Если ТаблицаДанных = ЭлДокументы И (ПолеПоиска = "Валюта" И НЕ ((СтрокаТаблицы.Тип = "Заказ покупателя") ИЛИ (СтрокаТаблицы.Тип = "Поступление товаров и услуг"))) тогда
				Продолжить;
			КонецЕсли;
			// Для каталог и прайса организации не определены
			Если ТаблицаДанных = ЭлДокументы И (ПолеПоиска = "Организация" И НЕ ((СтрокаТаблицы.Тип = "Заказ покупателя") ИЛИ (СтрокаТаблицы.Тип = "Поступление товаров и услуг"))) тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрока                   = ТаблицаСоответствий.Добавить();
			НоваяСтрока[ПолеСоответствия] = СтрокаТаблицы[ПолеПоиска];
			Если НЕ ТипЗнч(НоваяСтрока[ПолеСоответствия]) = Тип("Строка") Тогда
				НоваяСтрока["Новый" + ПолеСоответствия] = СтрокаТаблицы[ПолеПоиска];
			КонецЕсли;

			Если ПолеПоиска = "Контрагент" Тогда
				НоваяСтрока.ИННКонтрагента = СтрокаТаблицы.ИННКонтрагента;
			ИначеЕсли ПолеПоиска = "Организация" Тогда
				НоваяСтрока.ИННОрганизации = СтрокаТаблицы.ИННОрганизации;
			КонецЕсли;

		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура заполняет табличную часть СоответствияТоваров по переданной табличной части
//
// Параметры:
//  ТаблицаДанных - табличная часть по которой проводится заполнение
//
Процедура ЗаполнитьСоответствиеНоменклатурыПоТаблице(ТаблицаДанных)

	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		СтрокаСоответствияТоваров                            = СоответствияТоваров.Добавить();
		СтрокаСоответствияТоваров.Наименование               = СтрокаТаблицы.Наименование;
		СтрокаСоответствияТоваров.Артикул                    = СтрокаТаблицы.Артикул;
		СтрокаСоответствияТоваров.ШтрихКод                   = СтрокаТаблицы.ШтрихКод;
		СтрокаСоответствияТоваров.БазоваяЕдиницаИзмерения    = СтрокаТаблицы.БазоваяЕдиницаИзмерения;
		СтрокаСоответствияТоваров.Номенклатура               = СтрокаТаблицы.Номенклатура;
		СтрокаСоответствияТоваров.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
		СтрокаСоответствияТоваров.Ид                         = СтрокаТаблицы.Ид;
	КонецЦикла;

КонецПроцедуры

// Процедура заполняет табличную часть СоответствияТоваров по табличным частям обработки
//
Процедура ЗаполнитьСоответствияТоваров() Экспорт

	СоответствияТоваров.Очистить();
	ЗаполнитьСоответствиеНоменклатурыПоТаблице(ТоварыКаталог);
	ЗаполнитьСоответствиеНоменклатурыПоТаблице(ТоварыПрайс);
	ЗаполнитьСоответствиеНоменклатурыПоТаблице(ТоварыДокумент);
	СоответствияТоваров.Свернуть("Наименование, Артикул, ШтрихКод, БазоваяЕдиницаИзмерения, Номенклатура, ХарактеристикаНоменклатуры, Ид", "");

КонецПроцедуры

// Процедура заполняет табличную часть СоответствияВалют по табличным частям обработки
//
Процедура ЗаполнитьСоответствияВалют() Экспорт

	СоответствияВалют.Очистить();
	ЗаполнитьСоответствия(ЭлДокументы, СоответствияВалют, "Валюта",     "Валюта");
	ЗаполнитьСоответствия(ТоварыПрайс, СоответствияВалют, "ВалютаЦены", "Валюта");
	ЗаполнитьСоответствия(ТоварыПрайс, СоответствияВалют, "Валюта",     "Валюта");

КонецПроцедуры

// Процедура заполняет табличную часть СоответствияЕдиницИзмерения по табличным частям обработки
//
Процедура ЗаполнитьСоответствияЕдиницИзмерения() Экспорт

	СоответствияЕдиницИзмерения.Очистить();
	ЗаполнитьСоответствия(ТоварыКаталог,  СоответствияЕдиницИзмерения, "БазоваяЕдиницаИзмерения", "ЕдиницаИзмерения");
	ЗаполнитьСоответствия(ТоварыПрайс,    СоответствияЕдиницИзмерения, "БазоваяЕдиницаИзмерения", "ЕдиницаИзмерения");
	ЗаполнитьСоответствия(ТоварыПрайс,    СоответствияЕдиницИзмерения, "ЕдиницаИзмерения",        "ЕдиницаИзмерения");
	ЗаполнитьСоответствия(ТоварыДокумент, СоответствияЕдиницИзмерения, "БазоваяЕдиницаИзмерения", "ЕдиницаИзмерения");
	ЗаполнитьСоответствия(ТоварыДокумент, СоответствияЕдиницИзмерения, "ЕдиницаИзмерения",        "ЕдиницаИзмерения");

КонецПроцедуры

// Процедура заполняет табличную часть СоответствияКонтрагентов по табличным частям обработки
//
Процедура ЗаполнитьСоответствияКонтрагентов() Экспорт

	СоответствияКонтрагентов.Очистить();
	ЗаполнитьСоответствия(ЭлДокументы, СоответствияКонтрагентов, "Контрагент", "Контрагент");

КонецПроцедуры

// Процедура заполняет табличную часть СоответствияОрганизаций по табличным частям обработки
//
Процедура ЗаполнитьСоответствияОрганизаций() Экспорт

	СоответствияОрганизаций.Очистить();
	ЗаполнитьСоответствия(ЭлДокументы, СоответствияОрганизаций, "Организация", "Организация");

КонецПроцедуры

// Процедура заполняет табличную часть СоответствияТиповЦен по табличным частям обработки
//
Процедура ЗаполнитьСоответствияТиповЦен() Экспорт

	СоответствияТиповЦен.Очистить();
	Для Каждого СтрокаТаблицы Из ТоварыПрайс Цикл
		НоваяСтрока              = СоответствияТиповЦен.Добавить();
		НоваяСтрока.ТипЦены      = СтрокаТаблицы.ТипЦены;
		НоваяСтрока.НовыйТипЦены = СтрокаТаблицы.ТипЦены;
		НоваяСтрока.Ид           = СтрокаТаблицы.ИдТипаЦены;
		НоваяСтрока.НДСВСумме    = СтрокаТаблицы.НДСВСумме;
		НоваяСтрока.Валюта       = СтрокаТаблицы.ВалютаЦены;
		НоваяСтрока.Контрагент   = СтрокаТаблицы.Контрагент;
	КонецЦикла;
	СоответствияТиповЦен.Свернуть("ТипЦены, НовыйТипЦены, Ид, НДСВСумме, Валюта, Контрагент", "");

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАМЕНЫ ЭЛЕМЕНТОВ В ТАБЛИЧНЫХ ЧАСТЯХ СООТВЕТСТВИЙ

// Процедура заменяет значения реквизитов в табличной части
//
// Параметры:
//  ТаблицаДанных  - табличная часть в которой проводится замена
//  ПолеЗамены     - имя реквизита значения которого меняются
//  СтароеЗначение - значение табличной части, которое заменяем
//  НовоеЗначение  - значение табличной части, НА которое заменяем
//
Процедура ЗаменитьОбъектыВТаблице(ТаблицаДанных, ПолеЗамены, СтароеЗначение, НовоеЗначение) Экспорт

	Отбор           = Новый Структура(ПолеЗамены, СтароеЗначение);
	НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Отбор);
	Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		СтрокаТаблицы[ПолеЗамены] = НовоеЗначение;
	КонецЦикла;

КонецПроцедуры

// Процедура заменяет значения реквизитов в строках табличной части 
// в соответствии с переданным отбором
//
// Параметры:
//  ТаблицаДанных  - табличная часть в которой проводится замена
//  Отбор          - структура-отбор для табличной части ТаблицаДанных
//  ПолеЗамены     - имя реквизита значения которого меняются
//  НовоеЗначение  - значение табличной части, НА которое заменяем
//
Процедура ЗаменитьОбъектыПоОтбору(ТаблицаДанных, Отбор, ПолеЗамены, НовоеЗначение)

	НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Отбор);
	Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		СтрокаТаблицы[ПолеЗамены] = НовоеЗначение;
	КонецЦикла;

КонецПроцедуры

// Процедура заменяет реквизиты "Номенклатура" и "ХарактеристикаНоменклатуры"
// в табличной части в соответствии с переданным отбором
//
// Параметры:
//  ТаблицаДанных - табличная часть в которой проводится замена
//  Отбор         - структура-отбор для табличной части ТаблицаДанных
//  Номенклатура  - справочник-ссылка "Номенклатура"
//  Характеристика - справочник-ссылка "ХарактеристикаНоменклатура"
//
Процедура ЗаменитьТовары(Таблица, Отбор, Номенклатура, Характеристика)

	НайденныеСтроки = Таблица.НайтиСтроки(Отбор);
	Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		СтрокаТаблицы.Номенклатура               = Номенклатура;
		СтрокаТаблицы.ХарактеристикаНоменклатуры = Характеристика;
	КонецЦикла;

КонецПроцедуры

// Процедура заменяет реквизиты "Номенклатура" и "ХарактеристикаНоменклатуры"
// в табличных частях обработки по таблице соответствий СоответствияТоваров
//
Процедура ЗаменитьТоварыПоСоответствиям() Экспорт

	Для Каждого СтрокаТаблицы Из СоответствияТоваров Цикл
		Отбор = Новый Структура();
		Отбор.Вставить("Наименование",            СтрокаТаблицы.Наименование);
		Отбор.Вставить("Артикул",                 СтрокаТаблицы.Артикул);
		Отбор.Вставить("ШтрихКод",                СтрокаТаблицы.ШтрихКод);
		Отбор.Вставить("БазоваяЕдиницаИзмерения", СтрокаТаблицы.БазоваяЕдиницаИзмерения);
		ЗаменитьТовары(ТоварыКаталог,  Отбор, СтрокаТаблицы.Номенклатура, СтрокаТаблицы.ХарактеристикаНоменклатуры);
		ЗаменитьТовары(ТоварыПрайс,    Отбор, СтрокаТаблицы.Номенклатура, СтрокаТаблицы.ХарактеристикаНоменклатуры);
		ЗаменитьТовары(ТоварыДокумент, Отбор, СтрокаТаблицы.Номенклатура, СтрокаТаблицы.ХарактеристикаНоменклатуры);
	КонецЦикла;

КонецПроцедуры

// Процедура заменяет реквизиты "Валюта" и "ВалютаЦены"
// в табличных частях обработки по таблице соответствий СоответствияВалют
//
Процедура ЗаменитьВалютыПоСоответствиям() Экспорт

	Для Каждого СтрокаТаблицы Из СоответствияВалют Цикл
		Если НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.НовыйВалюта) Тогда
			ЗаменитьОбъектыВТаблице(ЭлДокументы, "Валюта",     СтрокаТаблицы.Валюта, СтрокаТаблицы.НовыйВалюта);
			ЗаменитьОбъектыВТаблице(ТоварыПрайс, "ВалютаЦены", СтрокаТаблицы.Валюта, СтрокаТаблицы.НовыйВалюта);
			ЗаменитьОбъектыВТаблице(ТоварыПрайс, "Валюта", СтрокаТаблицы.Валюта, СтрокаТаблицы.НовыйВалюта);
			СтрокаТаблицы.Валюта = СтрокаТаблицы.НовыйВалюта;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура заменяет реквизиты "БазоваяЕдиницаИзмерения" и "ЕдиницаИзмерения"
// в табличных частях обработки по таблице соответствий СоответствияЕдиницИзмерения
//
Процедура ЗаменитьЕдиницыПоСоответствиям() Экспорт

	Для Каждого СтрокаТаблицы Из СоответствияЕдиницИзмерения Цикл
		Если НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.НовыйЕдиницаИзмерения) Тогда
			ЗаменитьОбъектыВТаблице(ТоварыКаталог,       "БазоваяЕдиницаИзмерения", СтрокаТаблицы.ЕдиницаИзмерения, СтрокаТаблицы.НовыйЕдиницаИзмерения);
			ЗаменитьОбъектыВТаблице(ТоварыПрайс,         "БазоваяЕдиницаИзмерения", СтрокаТаблицы.ЕдиницаИзмерения, СтрокаТаблицы.НовыйЕдиницаИзмерения);
			ЗаменитьОбъектыВТаблице(ТоварыПрайс,         "ЕдиницаИзмерения",        СтрокаТаблицы.ЕдиницаИзмерения, СтрокаТаблицы.НовыйЕдиницаИзмерения);
			ЗаменитьОбъектыВТаблице(ТоварыДокумент,      "БазоваяЕдиницаИзмерения", СтрокаТаблицы.ЕдиницаИзмерения, СтрокаТаблицы.НовыйЕдиницаИзмерения);
			ЗаменитьОбъектыВТаблице(ТоварыДокумент,      "ЕдиницаИзмерения",        СтрокаТаблицы.ЕдиницаИзмерения, СтрокаТаблицы.НовыйЕдиницаИзмерения);
			ЗаменитьОбъектыВТаблице(ТоварыДокумент,      "ЕдиницаИзмерения",        СтрокаТаблицы.ЕдиницаИзмерения, СтрокаТаблицы.НовыйЕдиницаИзмерения);
			ЗаменитьОбъектыВТаблице(СоответствияТоваров, "БазоваяЕдиницаИзмерения", СтрокаТаблицы.ЕдиницаИзмерения, СтрокаТаблицы.НовыйЕдиницаИзмерения);
			СтрокаТаблицы.ЕдиницаИзмерения = СтрокаТаблицы.НовыйЕдиницаИзмерения;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура заменяет реквизит "Организация"
// в табличных частях обработки по таблице соответствий СоответствияОрганизаций
//
Процедура ЗаменитьОрганизацииПоСоответствиям() Экспорт

	Для Каждого СтрокаТаблицы Из СоответствияОрганизаций Цикл
		Если НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.НовыйОрганизация) Тогда
			ЗаменитьОбъектыВТаблице(ЭлДокументы, "Организация", СтрокаТаблицы.Организация, СтрокаТаблицы.НовыйОрганизация);
			СтрокаТаблицы.Организация = СтрокаТаблицы.НовыйОрганизация;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура заменяет реквизит "Контрагент"
// в табличных частях обработки по таблице соответствий СоответствияОрганизаций
//
// Параметры:
//  МенятьВСоответствииЦен - булево, флаг по которому проводится замена в табличной
//                           части СоответствияТиповЦен
//
Процедура ЗаменитьКонтрагентовПоСоответствиям(МенятьВСоответствииЦен = ЛОЖЬ) Экспорт

	Для Каждого СтрокаТаблицы Из СоответствияКонтрагентов Цикл
		Если НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.НовыйКонтрагент) Тогда
			ЗаменитьОбъектыВТаблице(ЭлДокументы,          "Контрагент", СтрокаТаблицы.Контрагент, СтрокаТаблицы.НовыйКонтрагент);
			ЗаменитьОбъектыВТаблице(ТоварыКаталог,        "Контрагент", СтрокаТаблицы.Контрагент, СтрокаТаблицы.НовыйКонтрагент);
			ЗаменитьОбъектыВТаблице(ТоварыДокумент,       "Контрагент", СтрокаТаблицы.Контрагент, СтрокаТаблицы.НовыйКонтрагент);
			//Меняем в прайс листе с изменением цен
			Отбор           = Новый Структура("Контрагент", СтрокаТаблицы.Контрагент);
			НайденныеСтроки = ТоварыПрайс.НайтиСтроки(Отбор);
			Для Каждого СтрокаТаблицыПрайса Из НайденныеСтроки Цикл
				СтрокаТаблицыПрайса.Контрагент = СтрокаТаблицы.НовыйКонтрагент;
				Если ЗначениеНеПустаяСсылка(СтрокаТаблицыПрайса.ТипЦены) Тогда
					СтрокаТаблицыПрайса.ТипЦены = Строка(СтрокаТаблицыПрайса.ТипЦены);
				КонецЕсли;
			КонецЦикла;
			Если МенятьВСоответствииЦен Тогда
				ЗаменитьОбъектыВТаблице(СоответствияТиповЦен, "Контрагент", СтрокаТаблицы.Контрагент, СтрокаТаблицы.НовыйКонтрагент);
			КонецЕсли;
			СтрокаТаблицы.Контрагент = СтрокаТаблицы.НовыйКонтрагент;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заменяет реквизит "ТипЦены"
// в табличных частях обработки по таблице соответствий СоответствияТиповЦен
//
Процедура ЗаменитьТипыЦенПоСоответствиям() Экспорт

	Для Каждого СтрокаТаблицыЦен Из СоответствияТиповЦен Цикл
		Если НЕ ЗначениеНеЗаполнено(СтрокаТаблицыЦен.НовыйТипЦены) Тогда
			Отбор = Новый Структура("ИдТипаЦены, Контрагент", СтрокаТаблицыЦен.Ид, СтрокаТаблицыЦен.Контрагент);
			НайденныеСтроки = ТоварыПрайс.НайтиСтроки(Отбор);
			Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
				СтрокаТаблицы.ТипЦены  = СтрокаТаблицыЦен.НовыйТипЦены;
			КонецЦикла;
			СтрокаТаблицыЦен.ТипЦены = СтрокаТаблицыЦен.НовыйТипЦены;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОПРЕДЕЛЕНИЯ СООТВЕТСТВИЙ ЭЛЕМЕНТОВ СПРАВОЧНИКОВ

// Функция ищет договор между организацией и контрагентов в качестве покупателя
// возращает первый найденный
//
// Параметры:
//  Организация - справочник-ссылка "Организации"
//  Контрагент  - справочник-ссылка "Контрагент"
//
// Возвращаемое значение"
//  справочник-ссылка "ДоговорыКонтрагентов" если договор найден или Неопределено
//
Функция ОпределитьДоговор(Организация, Контрагент, ВидДоговора)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка КАК Договор
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|
	|ГДЕ
	|	ВидДоговора = &ВидДоговора
	|	И ДоговорыКонтрагентов.Владелец.Ссылка = &Владелец
	|	И ДоговорыКонтрагентов.Организация.Ссылка = &Организация");
	
	Запрос.УстановитьПараметр("ВидДоговора",   ВидДоговора);
	Запрос.УстановитьПараметр("Владелец",   Контрагент);
	Запрос.УстановитьПараметр("Организация",Организация);
	
	РезультатЗапрос = Запрос.Выполнить();
	Выборка = РезультатЗапрос.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Договор;
		
	Иначе
		Сообщить("Не найден договор между " + СокрЛП(Организация) + " и " + Контрагент);
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция ищет единицу измерения номенклатуры, если не найдено - создает новый 
// элемент справочника "ЕдиницыИзмерения"
//
// Параметры:
//  СтрокаДанных - строка табличной части с реквизитами номенклатуры
//
// Возвращаемое значение:
//  справочник-ссылка "ЕдиницыИзмерения" или неопределено, если создание нового 
//  элемента неуспешно
//
Функция ПолучитьЕдиницуИзмеренияНоменклатуры(СтрокаДанных)

	СправочникЕдиницы = Справочники.ЕдиницыИзмерения;

	СпрЕдиница = СправочникЕдиницы.НайтиПоРеквизиту("ЕдиницаПоКлассификатору", СтрокаДанных.ЕдиницаИзмерения, , СтрокаДанных.Номенклатура);
	Если ЗначениеНеЗаполнено(СпрЕдиница) Тогда
		СпрЕдиница                         = СправочникЕдиницы.СоздатьЭлемент();
		СпрЕдиница.Владелец                = СтрокаДанных.Номенклатура;
		СпрЕдиница.ЕдиницаПоКлассификатору = СтрокаДанных.ЕдиницаИзмерения;
		СпрЕдиница.Коэффициент             = СтрокаДанных.Коэффициент;
		СпрЕдиница.Наименование            = Строка(СтрокаДанных.ЕдиницаИзмерения);
		Попытка
			СпрЕдиница.Записать();
		Исключение
			Возврат Неопределено;
		КонецПопытки;

		Возврат СпрЕдиница.Ссылка;
	Иначе
		Возврат СпрЕдиница;
	КонецЕсли;

КонецФункции

// Процедура проводит поиск элементов справочника "Валюты" по строкам
// табличной части СоответствияВалют
//
Процедура ОпределитьСоответствияВалют()

	СпрВалюты = Справочники.Валюты;
	Для Каждого СтрокаТаблицы Из СоответствияВалют Цикл
		Если ЗначениеНеПустаяСтрока(СтрокаТаблицы.Валюта) И ЗначениеНеЗаполнено(СтрокаТаблицы.НовыйВалюта) Тогда
			СтрокаТаблицы.НовыйВалюта = СпрВалюты.НайтиПоНаименованию(СтрокаТаблицы.Валюта);
		КонецЕсли;
	КонецЦикла

КонецПроцедуры

// Процедура проводит поиск элементов справочника "КлассификаторЕдиницИзмерения" по строкам
// табличной части СоответствияЕдиницИзмерения
//
Процедура ОпределитьСоответствияЕдиницИзмерения()

	СпрЕдиница = Справочники.КлассификаторЕдиницИзмерения;
	Для Каждого СтрокаТаблицы Из СоответствияЕдиницИзмерения Цикл
		Если ЗначениеНеПустаяСтрока(СтрокаТаблицы.ЕдиницаИзмерения) И ЗначениеНеЗаполнено(СтрокаТаблицы.НовыйЕдиницаИзмерения) Тогда
			СтрокаТаблицы.НовыйЕдиницаИзмерения = СпрЕдиница.НайтиПоНаименованию(СтрокаТаблицы.ЕдиницаИзмерения);
		КонецЕсли;
	КонецЦикла

КонецПроцедуры

// Процедура проводит поиск элементов справочника "Контрагенты" по строкам
// табличной части СоответствияКонтрагентов
//
Процедура ОпределитьСоответствияКонтрагентов()

	СпрКонтрагенты = Справочники.Контрагенты;
	Для Каждого СтрокаТаблицы Из СоответствияКонтрагентов Цикл
		Если ЗначениеНеПустаяСтрока(СтрокаТаблицы.Контрагент) И ЗначениеНеЗаполнено(СтрокаТаблицы.НовыйКонтрагент) Тогда
			Если НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.ИННКонтрагента) Тогда
				СтрокаТаблицы.НовыйКонтрагент = СпрКонтрагенты.НайтиПоРеквизиту("ИНН", СтрокаТаблицы.ИННКонтрагента);
			КонецЕсли;
			Если ЗначениеНеЗаполнено(СтрокаТаблицы.НовыйКонтрагент) Тогда
				СтрокаТаблицы.НовыйКонтрагент = СпрКонтрагенты.НайтиПоНаименованию(СтрокаТаблицы.Контрагент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура проводит поиск элементов справочника "Организации" по строкам
// табличной части СоответствияОрганизаций
//
Процедура ОпределитьСоответствияОрганизаций()

	СпрОрганизации = Справочники.Организации;
	Для Каждого СтрокаТаблицы Из СоответствияОрганизаций Цикл
		Если ЗначениеНеПустаяСтрока(СтрокаТаблицы.Организация) И ЗначениеНеЗаполнено(СтрокаТаблицы.НовыйОрганизация) Тогда
			Если НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.ИННОрганизации) Тогда
				СтрокаТаблицы.НовыйОрганизация = СпрОрганизации.НайтиПоРеквизиту("ИНН", СтрокаТаблицы.ИННОрганизации);
			КонецЕсли;
			Если ЗначениеНеЗаполнено(СтрокаТаблицы.НовыйОрганизация) Тогда
				СтрокаТаблицы.НовыйОрганизация = СпрОрганизации.НайтиПоНаименованию(СтрокаТаблицы.Организация);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла

КонецПроцедуры

// Процедура проводит поиск элементов справочника "ТипыЦенНоменклатурыКонтрагентов" по строкам
// табличной части СоответствияТиповЦен
//
Процедура ОпределитьСоответствияТиповЦен()

	СправочникТипыЦен = Справочники.ТипыЦенНоменклатурыКонтрагентов;
	Для Каждого СтрокаТаблицы Из СоответствияТиповЦен Цикл
		Если НЕ ЗначениеНеОпределено(СтрокаТаблицы.Контрагент) И 
			ЗначениеНеПустаяСтрока(СтрокаТаблицы.ТипЦены) И 
			ЗначениеНеЗаполнено(СтрокаТаблицы.НовыйТипЦены) Тогда

			СтрокаТаблицы.НовыйТипЦены = СправочникТипыЦен.НайтиПоНаименованию(СтрокаТаблицы.ТипЦены, , , СтрокаТаблицы.Контрагент);

		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура проводит поиск элементов справочника "Номенкалтура" по строкам
// табличной части СоответствияТиповЦен по идентификаторам товара
//
Процедура ОпределитьНоменклатуруКонтрагентов()

	//Формируем список идентификаторов
	СписокИдентификаторов = Новый СписокЗначений;
	СписокКонтрагентов    = Новый СписокЗначений;

	Для Каждого СтрокаТаблицы Из ТоварыКаталог Цикл
		Если ЗначениеНеЗаполнено(СтрокаТаблицы.Ид) Тогда
			Продолжить;
		КонецЕсли;
		Если СписокИдентификаторов.НайтиПоЗначению(СтрокаТаблицы.Ид) = Неопределено Тогда
			СписокИдентификаторов.Добавить(СтрокаТаблицы.Ид);
		КонецЕсли;
		Если СписокКонтрагентов.НайтиПоЗначению(СтрокаТаблицы.Контрагент) = Неопределено Тогда
			СписокКонтрагентов.Добавить(СтрокаТаблицы.Контрагент);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из ТоварыПрайс Цикл
		Если ЗначениеНеЗаполнено(СтрокаТаблицы.Ид) Тогда
			Продолжить;
		КонецЕсли;
		Если СписокИдентификаторов.НайтиПоЗначению(СтрокаТаблицы.Ид) = Неопределено Тогда
			СписокИдентификаторов.Добавить(СтрокаТаблицы.Ид);
		КонецЕсли;
		Если СписокКонтрагентов.НайтиПоЗначению(СтрокаТаблицы.Контрагент) = Неопределено Тогда
			СписокКонтрагентов.Добавить(СтрокаТаблицы.Контрагент);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из ТоварыДокумент Цикл
		Если ЗначениеНеЗаполнено(СтрокаТаблицы.Ид) Тогда
			Продолжить;
		КонецЕсли;
		//Определяем номенклатуры по идентификаторам собственного прайса
		Если Сред(СтрокаТаблицы.Ид,1,1) = "*" Тогда
			ПозицияРешетки = Найти(СтрокаТаблицы.Ид,"#");
			Если ПозицияРешетки Тогда
				ИдНоменклатуры   = Сред(СтрокаТаблицы.Ид,2,ПозицияРешетки-1);
				ИдХарактеристики = Сред(СтрокаТаблицы.Ид,ПозицияРешетки+1);
				Попытка
					УникИдНоменклатура   = Новый УникальныйИдентификатор(ИдНоменклатуры);
					УникИдХарактеристика = Новый УникальныйИдентификатор(ИдХарактеристики);
				Исключение
					//Если некорректный идентификатор - пропускаем
					Продолжить;
				КонецПопытки;
				СпрНоменклатура               = Справочники.Номенклатура.ПолучитьСсылку(УникИдНоменклатура);
				СпрХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(УникИдХарактеристика);
				Если НЕ Найти(Строка(СпрНоменклатура),"<Объект не найден>") Тогда
					СтрокаТаблицы.Номенклатуры = СпрНоменклатура;
					Если НЕ Найти(Строка(СпрХарактеристикаНоменклатуры),"<Объект не найден>") Тогда
						СтрокаТаблицы.ХарактеристикаНоменклатуры = СпрХарактеристикаНоменклатуры;
					КонецЕсли;
					Продолжить;
				КонецЕсли;
			Иначе
				ИдНоменклатуры  = Сред(СтрокаТаблицы.Ид,2);
				Попытка
					УникИд = Новый УникальныйИдентификатор(ИдНоменклатуры);
				Исключение
					//Если некорректный идентификатор - пропускаем
					Продолжить;
				КонецПопытки;
				СпрНоменклатура = Справочники.Номенклатура.ПолучитьСсылку(УникИд);
				Если НЕ Найти(Строка(СпрНоменклатура),"<Объект не найден>") Тогда
					СтрокаТаблицы.Номенклатура = СпрНоменклатура;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если СписокИдентификаторов.НайтиПоЗначению(СтрокаТаблицы.Ид) = Неопределено Тогда
			СписокИдентификаторов.Добавить(СтрокаТаблицы.Ид);
		КонецЕсли;
		Если СписокКонтрагентов.НайтиПоЗначению(СтрокаТаблицы.Контрагент) = Неопределено Тогда
			СписокКонтрагентов.Добавить(СтрокаТаблицы.Контрагент);
		КонецЕсли;
	КонецЦикла;

	Если НЕ СписокКонтрагентов.Количество() ИЛИ НЕ СписокИдентификаторов.Количество() Тогда
		Возврат;
	КонецЕсли;

	//Формируем запрос к регистру
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НоменклатураКонтрагентов.КодНоменклатурыКонтрагента КАК Идентификатор,
	|	НоменклатураКонтрагентов.Номенклатура               КАК Номенклатура,
	|	НоменклатураКонтрагентов.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	НоменклатураКонтрагентов.Контрагент                 КАК Контрагент
	|ИЗ
	|	РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|ГДЕ
	|	НоменклатураКонтрагентов.Контрагент В (&СписокКонтрагентов) И
	|	НоменклатураКонтрагентов.КодНоменклатурыКонтрагента В (&СписокИдентификаторов)");

	Запрос.УстановитьПараметр("СписокКонтрагентов",            СписокКонтрагентов);
	Запрос.УстановитьПараметр("СписокИдентификаторов", СписокИдентификаторов);

	РезультатЗапрос = Запрос.Выполнить();
	Выборка = РезультатЗапрос.Выбрать();
	Пока Выборка.Следующий() Цикл
		Отбор = Новый Структура("Контрагент, Ид", Выборка.Контрагент, Выборка.Идентификатор);
		ЗаменитьТовары(ТоварыКаталог,  Отбор, Выборка.Номенклатура, Выборка.ХарактеристикаНоменклатуры);
		ЗаменитьТовары(ТоварыКаталог,  Отбор, Выборка.Номенклатура, Выборка.ХарактеристикаНоменклатуры);
		ЗаменитьТовары(ТоварыДокумент, Отбор, Выборка.Номенклатура, Выборка.ХарактеристикаНоменклатуры);
	КонецЦикла;

КонецПроцедуры

// Процедура проводит поиск элементов справочника "Номенкалтура" по строкам
// табличной части СоответствияТиповЦен по артикулу, штрихкоду и наименованию товара
//
Процедура ОпределитьСоответствияТоваров()

	СпрНоменклатура = Справочники.Номенклатура;

	//Ищем номенклатуру по штрикоду
	СписокШтрихКодов = Новый СписокЗначений;
	Отбор = Новый Структура("Номенклатура", СпрНоменклатура.ПустаяСсылка());
	НайденныеСтроки = СоответствияТоваров.НайтиСтроки(Отбор);
	Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		Если НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.Артикул) Тогда
			СписокШтрихКодов.Добавить(СтрокаТаблицы.ШтрихКод);
		КонецЕсли;
	КонецЦикла;

	Если СписокШтрихКодов.Количество() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	РегШтрихкоды.Штрихкод                   КАК ШтрихКод,
		|	РегШтрихкоды.Владелец                   КАК Номенклатура,
		|	РегШтрихкоды.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК РегШтрихкоды
		|ГДЕ
		|	РегШтрихкоды.Штрихкод В (&СписокШтрихКодов)
		|";
		Запрос.УстановитьПараметр("СписокШтрихКодов", СписокШтрихКодов);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаТаблицы = СоответствияТоваров.Найти(Выборка.ШтрихКод);
			Если НЕ СтрокаТаблицы = Неопределено Тогда
				СтрокаТаблицы.Номенклатура               = Выборка.Номенклатура;
				СтрокаТаблицы.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	//Ищем по артикулу
	НайденныеСтроки = СоответствияТоваров.НайтиСтроки(Отбор);
	Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		Если НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.Артикул) Тогда
			СтрокаТаблицы.Номенклатура = СпрНоменклатура.НайтиПоРеквизиту("Артикул", СтрокаТаблицы.Артикул);
		КонецЕсли;
	КонецЦикла;

	//Ищем по наименованию
	НайденныеСтроки = СоответствияТоваров.НайтиСтроки(Отбор);
	Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		СтрокаТаблицы.Номенклатура = СпрНоменклатура.НайтиПоНаименованию(СтрокаТаблицы.Наименование);
	КонецЦикла;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАГРУЗКИ И ОБРАБОТКИ ФАЙЛОВ XML

// Процедура проводит обработку загруженных из файлов данных
// - определяет соответствия реквизитов элементам справочников 1С:Предприятия
//
Процедура ОбработатьЗагруженныеДанные()
		//Готовим таблицы соответствий для определения объектов и определяем объекты
	ЗаполнитьСоответствияКонтрагентов();
	ОпределитьСоответствияКонтрагентов();
	ЗаменитьКонтрагентовПоСоответствиям(ИСТИНА);
	
	//При чтении из файла таблица соответствий цен заполняется
	ОпределитьСоответствияТиповЦен();
	Для Каждого СтрокаТаблицыЦен Из СоответствияТиповЦен Цикл
		Отбор = Новый Структура("ИдТипаЦены, Контрагент", СтрокаТаблицыЦен.Ид, СтрокаТаблицыЦен.Контрагент);
		НайденныеСтроки = ТоварыПрайс.НайтиСтроки(Отбор);
		Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
			Если НЕ ЗначениеНеЗаполнено(СтрокаТаблицыЦен.НовыйТипЦены) Тогда
				СтрокаТаблицы.ТипЦены = СтрокаТаблицыЦен.НовыйТипЦены;
			Иначе
				СтрокаТаблицы.ТипЦены = СтрокаТаблицыЦен.ТипЦены;
			КонецЕсли;
			СтрокаТаблицы.ВалютаЦены = СтрокаТаблицыЦен.Валюта;
			СтрокаТаблицы.НДСВСумме  = СтрокаТаблицыЦен.НДСВСумме;
		КонецЦикла;
	КонецЦикла;

	ЗаполнитьСоответствияОрганизаций();
	ОпределитьСоответствияОрганизаций();
	ЗаменитьОрганизацииПоСоответствиям();

	ЗаполнитьСоответствияВалют();
	ОпределитьСоответствияВалют();
	ЗаменитьВалютыПоСоответствиям();

	//Единицы измерения обязательно после типов цен, чтобы определить валюты для типов цен
	ЗаполнитьСоответствияЕдиницИзмерения();
	ОпределитьСоответствияЕдиницИзмерения();
	ЗаменитьЕдиницыПоСоответствиям();

	ОпределитьНоменклатуруКонтрагентов();
	ЗаполнитьСоответствияТоваров();
	ОпределитьСоответствияТоваров();
	ЗаменитьТоварыПоСоответствиям();

	ОпределитьДокументыВБазе();

КонецПроцедуры

// Процедура запускает чтение XML файлы по переданному имени файла или каталога,
// проверяет возможность чтения данных
//
// Параметры:
//  ИмяФайлаКаталога - строка с именем файла и катлога
//
Процедура ОбработатьФайлы(ИмяФайлаКаталога) Экспорт

	//Проверка корректности имени файла
	Если ЗначениеНеЗаполнено(ИмяФайлаКаталога) Тогда
		Предупреждение("Не указано имя файла данных! Чтение данных невозможно!");
		Возврат;
	КонецЕсли;

	Если НЕ Вопрос("Начать загрузку данных?", РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК, "Загрузка данных") = КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;

	Источник = Новый Файл(ИмяФайлаКаталога);
	Если Источник.Существует() Тогда
		Если Источник.ЭтоФайл() Тогда
			ОчиститьТаблицы();
			ПрочитатьФайлXML(Источник.ПолноеИмя);
		ИначеЕсли Источник.ЭтоКаталог() Тогда
			ОчиститьТаблицы();
			СписокФайлов = НайтиФайлы(Источник.ПолноеИмя, "*.xml");
			Для Каждого ФайлДляЗагрузки Из СписокФайлов Цикл
				ПрочитатьФайлXML(ФайлДляЗагрузки.ПолноеИмя);
			КонецЦикла;
		КонецЕсли;
	Иначе
		Предупреждение("Некорректное имя файла или каталога! Чтение данных невозможно!");
		Возврат;
	КонецЕсли;
	
	ОбработатьЗагруженныеДанные();

КонецПроцедуры

// Процедура читает последовательно файл в формате CommerceML,
// в процессе чтения проводит поиск и определение объектов базе данных,
// пишет данные из файла в струкутры данных обработки
//
// Параметры: 
// ИмяФайла - полное имя файла (всесте с путем)
//
Процедура ПрочитатьФайлXML(ИмяФайла)

	//Открытие и обработка файла
	ОбъектXML = Новый ЧтениеXML;
	Попытка
		ОбъектXML.ОткрытьФайл(ИмяФайла);
	Исключение
		ОбъектXML.Закрыть();
		Предупреждение("Ошибка чтения файла данных " + ИмяФайла);
		Возврат;
	КонецПопытки;

	//Читаем файл последовательно в цикле, формируя полное имя (путь) для элемента
	ПолноеИмяУровня = "";
	Пока ОбъектXML.Прочитать() Цикл

		ТипУзла = ОбъектXML.ТипУзла;
		ИмяУзла = ОбъектXML.Имя;

		Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ПолноеИмяУровня = СокрЛП(ИмяУзла) +"_" + ПолноеИмяУровня;
			ОбработатьЭлемент(ОбъектXML, ПолноеИмяУровня);

		ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			ПозицияРазделителя = Найти(ПолноеИмяУровня, "_");
			Если ПозицияРазделителя Тогда
				ПолноеИмяУровня = Сред(ПолноеИмяУровня, ПозицияРазделителя + 1);
			Иначе
				Прервать;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	ОбъектXML.Закрыть();


КонецПроцедуры

// Процедура обрабатывает текущий элемент XML-файла в соответствии с положением 
// элемента в древовидной структуре файла. 
// Пишет данных в табличные части обработки.
//
// Параметры:
//  ОбъектXML - объект типа ЧтениеXML
//  Ключ      - строка, содержащая путь элемента в XML-файле
//
Процедура ОбработатьЭлемент(ОбъектXML, Знач Ключ)

	ЗначениеТипаОбработки = "";
	Если СтруктураЗагрузки.Свойство(Ключ, ЗначениеТипаОбработки) Тогда

		//Тэги товара
		Если ЗначениеТипаОбработки = "НовыйТоварКаталог" Тогда
			мТекСтрТовары             = ТоварыКаталог.Добавить();
			мТекСтрТовары.ИдДокумента = мИдДокумента;
			мТекСтрТовары.Контрагент  = мТекСтрДокументы.Контрагент;
		ИначеЕсли ЗначениеТипаОбработки = "НовыйТоварПрайс" Тогда
			мТекСтрТовары             = ТоварыПрайс.Добавить();
			мТекСтрТовары.ИдДокумента = мИдДокумента;
			мТекСтрТовары.Контрагент  = мТекСтрДокументы.Контрагент;
		ИначеЕсли ЗначениеТипаОбработки = "НовыйТоварДок" Тогда
			мТекСтрТовары             = ТоварыДокумент.Добавить();
			мТекСтрТовары.ИдДокумента = мИдДокумента;
			мТекСтрТовары.Контрагент  = мТекСтрДокументы.Контрагент;

		ИначеЕсли ЗначениеТипаОбработки = "ИдТовара" Тогда
			мТекСтрТовары.Ид = ПолучитьТекстЭлемента(ОбъектXML);
		ИначеЕсли ЗначениеТипаОбработки = "ШтрихКодТовара" Тогда
			мТекСтрТовары.ШтрихКод = ПолучитьТекстЭлемента(ОбъектXML);
		ИначеЕсли ЗначениеТипаОбработки = "АртикулТовара" Тогда
			мТекСтрТовары.Артикул = ПолучитьТекстЭлемента(ОбъектXML);
		ИначеЕсли ЗначениеТипаОбработки = "ИмяТовара" Тогда
			мТекСтрТовары.Наименование = ПолучитьТекстЭлемента(ОбъектXML);
		ИначеЕсли ЗначениеТипаОбработки = "БазоваяЕдиница" Тогда
			мТекСтрТовары.БазоваяЕдиницаИзмерения = ПолучитьТекстЭлемента(ОбъектXML);
			Если мТекСтрДокументы.Тип = "Прайс" Тогда
				мТекСтрТовары.ЕдиницаИзмерения = мТекСтрТовары.БазоваяЕдиницаИзмерения;
				мТекСтрТовары.Коэффициент      = 1;
			КонецЕсли;

		//Тэги контрагента
		ИначеЕсли ЗначениеТипаОбработки = "ИмяКонтрагента" Тогда
			Если ЗначениеНеЗаполнено(мТекСтрДокументы.Контрагент) Тогда
				мТекСтрДокументы.Контрагент = ПолучитьТекстЭлемента(ОбъектXML);
			КонецЕсли;
		ИначеЕсли ЗначениеТипаОбработки = "ИННКонтрагента" Тогда
			мТекСтрДокументы.ИННКонтрагента = ПолучитьТекстЭлемента(ОбъектXML);
		ИначеЕсли ЗначениеТипаОбработки = "КонтрагентДок" Тогда
			мИмяКонтрагента  = "";
			мИННКонтрагентас = "";
			мРольКонтрагента = "";
		ИначеЕсли ЗначениеТипаОбработки = "РольКонтрагента" Тогда
			мРольКонтрагента = ПолучитьТекстЭлемента(ОбъектXML);
				Если мРольКонтрагента = "Покупатель" И ((мТекСтрДокументы.Тип = "Заказ покупателя") ИЛИ (мТекСтрДокументы.Тип = "Поступление товаров и услуг")) Тогда
				мТекСтрДокументы.Контрагент     = мИмяКонтрагента;
				мТекСтрДокументы.ИННКонтрагента = мИННКонтрагента;
			ИначеЕсли мРольКонтрагента = "Продавец" И ((мТекСтрДокументы.Тип = "Заказ покупателя") ИЛИ (мТекСтрДокументы.Тип = "Поступление товаров и услуг")) Тогда
				мТекСтрДокументы.Организация    = мИмяКонтрагента;
				мТекСтрДокументы.ИННОрганизации = мИННКонтрагента;
			КонецЕсли;

		ИначеЕсли ЗначениеТипаОбработки = "ИмяКонтрагентаДок" Тогда
			мИмяКонтрагента = ПолучитьТекстЭлемента(ОбъектXML);
		ИначеЕсли ЗначениеТипаОбработки = "ИННКонтрагентаДок" Тогда
			мИННКонтрагента = ПолучитьТекстЭлемента(ОбъектXML);

		//Тэги типов цен
		ИначеЕсли ЗначениеТипаОбработки = "НовыйТипЦены" Тогда
			мТекСтрТипыЦен             = СоответствияТиповЦен.Добавить();
			мТекСтрТипыЦен.Контрагент  = мТекСтрДокументы.Контрагент;
		ИначеЕсли ЗначениеТипаОбработки = "ИдТипаЦены" Тогда
			мТекСтрТипыЦен.Ид       = ПолучитьТекстЭлемента(ОбъектXML);
		ИначеЕсли ЗначениеТипаОбработки = "ИмяТипаЦены" Тогда
			мТекСтрТипыЦен.ТипЦены = ПолучитьТекстЭлемента(ОбъектXML);
		ИначеЕсли ЗначениеТипаОбработки = "ВалютаТипаЦены" Тогда
			мТекСтрТипыЦен.Валюта = ПолучитьТекстЭлемента(ОбъектXML);
	
		//Тэги налогов
		ИначеЕсли ЗначениеТипаОбработки = "ИмяНалога" Тогда
			мИмяНалога = ПолучитьТекстЭлемента(ОбъектXML);
		ИначеЕсли ЗначениеТипаОбработки = "НДСВСуммеПрайс" Тогда
			Если мИмяНалога = "НДС" Тогда
				мТекСтрТипыЦен.НДСВСумме = Число(ПолучитьТекстЭлемента(ОбъектXML));
			КонецЕсли;
		ИначеЕсли ЗначениеТипаОбработки = "НДСВСуммеДок" Тогда
			Если мИмяНалога = "НДС" Тогда
				мТекСтрДокументы.НДСВСумме = Число(ПолучитьТекстЭлемента(ОбъектXML));
			КонецЕсли;

		//Тэги цен
		ИначеЕсли ЗначениеТипаОбработки = "ЦенаВПрайсе" Тогда
			ИдТипаЦены = ПолучитьТекстЭлемента(ОбъектXML);
			Если НЕ ЗначениеНеЗаполнено(мТекСтрТовары.ИдТипаЦены) Тогда
				НоваяСтрокаТаблицы                         = ТоварыПрайс.Добавить();
				НоваяСтрокаТаблицы.ИдДокумента             = мТекСтрТовары.ИдДокумента;
				НоваяСтрокаТаблицы.Наименование            = мТекСтрТовары.Наименование;
				НоваяСтрокаТаблицы.Артикул                 = мТекСтрТовары.Артикул;
				НоваяСтрокаТаблицы.ШтрихКод                = мТекСтрТовары.ШтрихКод;
				НоваяСтрокаТаблицы.Ид                      = мТекСтрТовары.Ид;
				НоваяСтрокаТаблицы.БазоваяЕдиницаИзмерения = мТекСтрТовары.БазоваяЕдиницаИзмерения;
				НоваяСтрокаТаблицы.ЕдиницаИзмерения        = мТекСтрТовары.БазоваяЕдиницаИзмерения;
				НоваяСтрокаТаблицы.Коэффициент             = мТекСтрТовары.Коэффициент;
				НоваяСтрокаТаблицы.Контрагент              = мТекСтрТовары.Контрагент;
				мТекСтрТовары                              = НоваяСтрокаТаблицы;
			КонецЕсли;
			мТекСтрТовары.ИдТипаЦены = ИдТипаЦены;

		ИначеЕсли ЗначениеТипаОбработки = "ЦенаЗаЕдиницу" Тогда
			мТекСтрТовары.Цена = ПолучитьТекстЭлемента(ОбъектXML);
		ИначеЕсли ЗначениеТипаОбработки = "Валюта" Тогда
			мТекСтрТовары.Валюта = ПолучитьТекстЭлемента(ОбъектXML);
		ИначеЕсли ЗначениеТипаОбработки = "Количество" Тогда
			мТекСтрТовары.Количество = Число(ПолучитьТекстЭлемента(ОбъектXML));
		ИначеЕсли ЗначениеТипаОбработки = "Коэффициент" Тогда
			мТекСтрТовары.Коэффициент = Число(ПолучитьТекстЭлемента(ОбъектXML));
		ИначеЕсли ЗначениеТипаОбработки = "Сумма" Тогда
			мТекСтрТовары.Сумма = Число(ПолучитьТекстЭлемента(ОбъектXML));
		ИначеЕсли ЗначениеТипаОбработки = "ЕдиницаИзмерения" Тогда
			мТекСтрТовары.ЕдиницаИзмерения = ПолучитьТекстЭлемента(ОбъектXML);

		//Тэги типов документов
		ИначеЕсли ЗначениеТипаОбработки = "ТипКаталог" Тогда
			мТекСтрДокументы              = ЭлДокументы.Добавить();
			мТекСтрДокументы.Тип          = "Каталог";
			мИдДокумента                  = мИдДокумента + 1;
			мТекСтрДокументы.Ид           = мИдДокумента;
			мТекСтрДокументы.Обрабатывать = 1;

		ИначеЕсли ЗначениеТипаОбработки   = "ТипПрайс" Тогда
			мТекСтрДокументы              = ЭлДокументы.Добавить();
			мТекСтрДокументы.Тип          = "Прайс";
			мИдДокумента                  = мИдДокумента + 1;
			мТекСтрДокументы.Ид           = мИдДокумента;
			мТекСтрДокументы.Обрабатывать = 1;

		ИначеЕсли ЗначениеТипаОбработки = "ТипДокумент" Тогда
			мТекСтрДокументы              = ЭлДокументы.Добавить();
			мИдДокумента                  = мИдДокумента + 1;
			мТекСтрДокументы.Ид           = мИдДокумента;
			мТекСтрДокументы.Обрабатывать = 1;

		ИначеЕсли ЗначениеТипаОбработки = "ХозОперация" Тогда
			ТипХозОперации = ПолучитьТекстЭлемента(ОбъектXML);
			Если ТипХозОперации = "ЗаказТовара" Тогда
				мТекСтрДокументы.Тип          = "Заказ покупателя";
			ИначеЕсли ТипХозОперации = "ОтпускТовара" Тогда
				мТекСтрДокументы.Тип          = "Поступление товаров и услуг";
			КонецЕсли;

		//Тэги шапки документа
		ИначеЕсли ЗначениеТипаОбработки = "НомерДок" Тогда
			мТекСтрДокументы.Номер = ПолучитьТекстЭлемента(ОбъектXML);
		ИначеЕсли ЗначениеТипаОбработки = "ДатаДок" Тогда
			СтрокаДаты = ПолучитьТекстЭлемента(ОбъектXML);
			мТекСтрДокументы.Дата = ПолучитьДатуИзСтроки(СтрокаДаты);
		ИначеЕсли ЗначениеТипаОбработки = "ВалютаДок" Тогда
			мТекСтрДокументы.Валюта = ПолучитьТекстЭлемента(ОбъектXML);
		ИначеЕсли ЗначениеТипаОбработки = "ДатаОтгрузкиДок" Тогда
			мТекСтрДокументы.ДатаОтгрузки = ПолучитьДатуИзСтроки(ПолучитьТекстЭлемента(ОбъектXML));
		ИначеЕсли ЗначениеТипаОбработки = "СрокПлатежаДок" Тогда
			мТекСтрДокументы.СрокПлатежа = ПолучитьДатуИзСтроки(ПолучитьТекстЭлемента(ОбъектXML));
		ИначеЕсли ЗначениеТипаОбработки = "КурсДок" Тогда
			мТекСтрДокументы.Курс = ПолучитьТекстЭлемента(ОбъектXML);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ОпределитьДокументыВБазе() Экспорт

	Для каждого врТекСтрДокументы Из ЭлДокументы Цикл
	
		Если ЗначениеНеЗаполнено(врТекСтрДокументы.Номер)
			ИЛИ ЗначениеНеЗаполнено(врТекСтрДокументы.Дата)
			ИЛИ ЗначениеНеЗаполнено(врТекСтрДокументы.Контрагент)
			ИЛИ Не ((врТекСтрДокументы.Тип = "Заказ покупателя") ИЛИ (врТекСтрДокументы.Тип = "Поступление товаров и услуг")) Тогда
			
			Продолжить;
		КонецЕсли; 
		
		//
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ Ссылка
		|ИЗ Документ." + ?(врТекСтрДокументы.Тип = "Заказ покупателя", "ЗаказПокупателя", "ПоступлениеТоваровУслуг") + "
		|ГДЕ ДатаВходящегоДокумента = &Дата И НомерВходящегоДокумента = &Номер
		|	И Контрагент = &Контрагент
		|";
		
		Запрос.УстановитьПараметр("Дата", врТекСтрДокументы.Дата);
		Запрос.УстановитьПараметр("Номер", врТекСтрДокументы.Номер);
		Запрос.УстановитьПараметр("Контрагент", врТекСтрДокументы.Контрагент); 
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			врТекСтрДокументы.ДокументВБазе = Выборка.Ссылка;
		Иначе
			врТекСтрДокументы.ДокументВБазе = Неопределено;
		КонецЕсли; 	 
	
	КонецЦикла; 
	
КонецПроцедуры
 
// Процедура запускает чтение XML из вложений электронных писем
//
// Параметры:
//  НачДата - дата, начало периода фильтрации писем
//  КонДата - дата, окончание периода фильтрации писем
//
Процедура ОбработатьЭлПисьма(НачДата, КонДата) Экспорт

	Если НЕ Вопрос("Начать загрузку данных из электронных писем?", РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК, "Загрузка данных") = КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	ВложенияЭлектронныхПисем.Ссылка   КАК Письмо,
	|	ВложенияЭлектронныхПисем.ИмяФайла КАК ИмяФайла
	|	
	|ИЗ
	|	Справочник.ВложенияЭлектронныхПисем КАК ВложенияЭлектронныхПисем
	|
	|ГДЕ
	|	ВложенияЭлектронныхПисем.Объект.СтатусПисьма = &СтатусПисьма";

	Если НЕ ЗначениеНеЗаполнено(НачДата) Тогда
		Запрос.Текст = Запрос.Текст + " И ВложенияЭлектронныхПисем.Объект.Дата >= &НачДата";
	КонецЕсли;
	Если НЕ ЗначениеНеЗаполнено(КонДата) Тогда
		Запрос.Текст = Запрос.Текст + " И ВложенияЭлектронныхПисем.Объект.Дата <= &КонДата";
	КонецЕсли;

	Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО ВложенияЭлектронныхПисем.Объект.Дата";

	Запрос.УстановитьПараметр("СтатусПисьма", Перечисления.СтатусыПисем.Полученное);
	Если НЕ ЗначениеНеЗаполнено(НачДата) Тогда
		Запрос.УстановитьПараметр("НачДата", НачДата);
	КонецЕсли;
	Если НЕ ЗначениеНеЗаполнено(КонДата) Тогда
		Запрос.УстановитьПараметр("КонДата", КонДата);
	КонецЕсли;

	ОчиститьТаблицы();

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ Найти(Выборка.ИмяФайла, ".xml") Тогда
			Продолжить;
		КонецЕсли;
		ИмяВремФайла = ПолучитьИмяВременногоФайла();
		ДвоичныеДанные = Выборка.Письмо.Хранилище.Получить();
		ДвоичныеДанные = Выборка.Письмо.Хранилище.Получить();
		ДвоичныеДанные.Записать(ИмяВремФайла);
		ПрочитатьФайлXML(ИмяВремФайла);
	КонецЦикла;

	ОбработатьЗагруженныеДанные();

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ТЕСТИРОВАНИЯ ДАННЫХ

// Функция определяет возможность записи данных в базу
// и выдает причины невозможности записи
//
//Возвращаемое значение:
// булево - истина, если запись возможна, иначе ложь
//
Функция ТестированиеДанных()

	Сообщить(Строка(ТекущаяДата()) + " Начинаем тестирование данных перед сохранением");
	ЕстьНеопределенныеВалюты      = ЛОЖЬ;
	ЕстьНеопределенныеЕдиницы     = ЛОЖЬ;
	ЕстьНеопределенныеКонтрагенты = ЛОЖЬ;
	ЕстьНеопределенныеОрганизации = ЛОЖЬ;
	ЕстьНеопределенныеТовары      = ЛОЖЬ;
	ЕстьНеопределенныеТипыЦены    = ЛОЖЬ;
	
	Для Каждого СтрокаТаблицыДокумент Из ЭлДокументы Цикл
		Если НЕ СтрокаТаблицыДокумент.Обрабатывать Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеНеОпределено(СтрокаТаблицыДокумент.Контрагент) Тогда
			ЕстьНеопределенныеКонтрагенты = ИСТИНА;
		КонецЕсли;
		Если СтрокаТаблицыДокумент.Тип = "Каталог" Тогда
			СтрокиДокумента = НайтиСтрокиДокумента(ТоварыКаталог, СтрокаТаблицыДокумент.Ид);
			Для Каждого СтрокаТаблицы Из СтрокиДокумента Цикл
				Если ЗначениеНеОпределено(СтрокаТаблицы.БазоваяЕдиницаИзмерения) Тогда
					ЕстьНеопределенныеЕдиницы = ИСТИНА;
				КонецЕсли;
				Если ЗначениеНеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
					ЕстьНеопределенныеТовары = ИСТИНА;
				КонецЕсли;
			КонецЦикла

		ИначеЕсли СтрокаТаблицыДокумент.Тип = "Прайс" Тогда
			СтрокиДокумента = НайтиСтрокиДокумента(ТоварыПрайс, СтрокаТаблицыДокумент.Ид);
			Для Каждого СтрокаТаблицы Из СтрокиДокумента Цикл
				Если ЗначениеНеОпределено(СтрокаТаблицы.БазоваяЕдиницаИзмерения) Тогда
					ЕстьНеопределенныеЕдиницы = ИСТИНА;
				КонецЕсли;
				Если ЗначениеНеОпределено(СтрокаТаблицы.ЕдиницаИзмерения) Тогда
					ЕстьНеопределенныеЕдиницы = ИСТИНА;
				КонецЕсли;
				Если ЗначениеНеОпределено(СтрокаТаблицы.ВалютаЦены) Тогда
					ЕстьНеопределенныеВалюты = ИСТИНА;
				КонецЕсли;
				Если ЗначениеНеОпределено(СтрокаТаблицы.ТипЦены) Тогда
					ЕстьНеопределенныеТипыЦены = ИСТИНА;
				КонецЕсли;
				Если ЗначениеНеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
					ЕстьНеопределенныеТовары = ИСТИНА;
				КонецЕсли;
			КонецЦикла

		ИначеЕсли СтрокаТаблицыДокумент.Тип = "Заказ покупателя" 
			ИЛИ СтрокаТаблицыДокумент.Тип = "Поступление товаров и услуг" Тогда
			Если ЗначениеНеОпределено(СтрокаТаблицыДокумент.Организация) Тогда
				ЕстьНеопределенныеОрганизации = ИСТИНА;
			КонецЕсли;
			СтрокиДокумента = НайтиСтрокиДокумента(ТоварыДокумент, СтрокаТаблицыДокумент.Ид);
			Для Каждого СтрокаТаблицы Из СтрокиДокумента Цикл
				Если ЗначениеНеОпределено(СтрокаТаблицы.БазоваяЕдиницаИзмерения) Тогда
					ЕстьНеопределенныеЕдиницы = ИСТИНА;
				КонецЕсли;
				Если ЗначениеНеОпределено(СтрокаТаблицы.ЕдиницаИзмерения) Тогда
					ЕстьНеопределенныеЕдиницы = ИСТИНА;
				КонецЕсли;
				Если ЗначениеНеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
					ЕстьНеопределенныеТовары = ИСТИНА;
				КонецЕсли;
			КонецЦикла
		КонецЕсли;

	КонецЦикла;

	МожноСохранить = ИСТИНА;

	Если ЕстьНеопределенныеВалюты = ИСТИНА Тогда
		Сообщить("В загруженных документах обнаружены неопределенные валюты!",СтатусСообщения.Важное);
		МожноСохранить = ЛОЖЬ;
	КонецЕсли;
	Если ЕстьНеопределенныеЕдиницы = ИСТИНА Тогда
		Сообщить("В загруженных документах обнаружены неопределенные единицы измерения!",СтатусСообщения.Важное);
		МожноСохранить = ЛОЖЬ;
	КонецЕсли;
	Если ЕстьНеопределенныеКонтрагенты = ИСТИНА Тогда
		Сообщить("В загруженных документах обнаружены неопределенные контрагенты!",СтатусСообщения.Важное);
		МожноСохранить = ЛОЖЬ;
	КонецЕсли;
	Если ЕстьНеопределенныеОрганизации = ИСТИНА Тогда
		Сообщить("В загруженных документах обнаружены неопределенные организации!",СтатусСообщения.Важное);
		МожноСохранить = ЛОЖЬ;
	КонецЕсли;
	Если ЕстьНеопределенныеТовары = ИСТИНА Тогда
		Сообщить("В загруженных документах обнаружены неопределенные товары!",СтатусСообщения.Важное);
		МожноСохранить = ЛОЖЬ;
	КонецЕсли;
	Если ЕстьНеопределенныеТипыЦены = ИСТИНА Тогда
		Сообщить("В загруженных документах обнаружены типы цен контрагента!",СтатусСообщения.Важное);
		МожноСохранить = ЛОЖЬ;
	КонецЕсли;

	Возврат МожноСохранить;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ СОХРАНЕНИЯ ДАННЫХ

// Функция по данным обработки формирует записи регистра НоменклатураКонтрагентов
//
// Параметры:
// ИнформацияДокумента - строка табличной части "ЭлДокументы"
// СтрокиДокумента     - массив строк табличной части "ТоварыКаталог"
//
//Возвращаемое значение:
// булево - истина, если запись прошла без ошибок, иначе ложь
//
Функция СохранитьКаталог(ИнформацияДокумента, СтрокиДокумента)

	//Проверяем нет ли дублирующихся полей при записи регистра
	СтруктураДляПроверки = Новый Соответствие;
	НайденыДубли = ЛОЖЬ;
	Для Каждого СтрокаТаблицы Из СтрокиДокумента Цикл
		Ключ = Строка(СтрокаТаблицы.Номенклатура.УникальныйИдентификатор()) + Строка(СтрокаТаблицы.ХарактеристикаНоменклатуры.УникальныйИдентификатор());
		Если НЕ СтруктураДляПроверки[Ключ] = "*" Тогда
			СтруктураДляПроверки.Вставить(Ключ, "*");
		Иначе
			НайденыДубли = ИСТИНА;
			Сообщить(Строка(ТекущаяДата()) + " В каталоге обнаружены дублирующиеся значение пар Номенклатура - Характеристика номенклатуры!", СтатусСообщения.Важное);
			Сообщить(Строка(ТекущаяДата()) + "    Номенклатура:                " + СтрокаТаблицы.Номенклатура, СтатусСообщения.Важное);
			Сообщить(Строка(ТекущаяДата()) + "    Характеристика номенклатуры: " + СтрокаТаблицы.ХарактеристикаНоменклатуры, СтатусСообщения.Важное);
		КонецЕсли;
	КонецЦикла;
	Если НайденыДубли = ИСТИНА Тогда
		Сообщить(Строка(ТекущаяДата()) + " В каталоге обнаружены дублирующиеся значение пар Номенклатура - Характеристика номенклатуры", СтатусСообщения.Важное);
		Сообщить(Строка(ТекущаяДата()) + " Запись невозможна!", СтатусСообщения.Важное);
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	РегНоменклатураКонтрагентов = РегистрыСведений.НоменклатураКонтрагентов;
	НаборЗаписей                = РегНоменклатураКонтрагентов.СоздатьНаборЗаписей();

	Для Каждого СтрокаТаблицы Из СтрокиДокумента Цикл
		ЗаписьРегистра                                     = НаборЗаписей.Добавить();
		ЗаписьРегистра.Контрагент                          = ИнформацияДокумента.Контрагент;
		ЗаписьРегистра.Номенклатура                        = СтрокаТаблицы.Номенклатура;
		ЗаписьРегистра.ХарактеристикаНоменклатуры          = СтрокаТаблицы.ХарактеристикаНоменклатуры;
		ЗаписьРегистра.КодНоменклатурыКонтрагента          = СтрокаТаблицы.Ид;
		ЗаписьРегистра.НаименованиеНоменклатурыКонтрагента = СтрокаТаблицы.Наименование;
		ЗаписьРегистра.АртикулНоменклатурыКонтрагента      = СтрокаТаблицы.Артикул;
		ЗаписьРегистра.ШтрихКодНоменклатурыКонтрагента     = СтрокаТаблицы.ШтрихКод;
		ЗаписьРегистра.ЕдиницаНоменклатурыКонтрагента      = СтрокаТаблицы.БазоваяЕдиницаИзмерения;
	КонецЦикла;

	Попытка
		НаборЗаписей.Записать(ИСТИНА);
	Исключение
		Сообщить(Строка(ТекущаяДата()) + " При записи каталога товаров произошла ошибка", СтатусСообщения.Важное);
		Возврат ЛОЖЬ;
	КонецПопытки;

	ИнформацияДокумента.Записан = ИСТИНА;
	//Удаляем строки записанного документа
	Для Каждого СтрокаТаблицы Из СтрокиДокумента Цикл
		ТоварыКаталог.Удалить(СтрокаТаблицы);
	КонецЦикла;

	Сообщить(Строка(ТекущаяДата()) + " Записан каталог товаров контрагента завершена");
	Возврат ИСТИНА;

КонецФункции

// Функция по данным обработки формирует документ "УстановкаЦенНоменклатурыКонтрагентов"
//
// Параметры:
// ИнформацияДокумента - строка табличной части "ЭлДокументы"
// СтрокиДокумента     - массив строк табличной части "ТоварыПрайс"
//
//Возвращаемое значение:
// булево - истина, если запись прошла без ошибок, иначе ложь
//
Функция СохранитьПрайс(ИнформацияДокумента, СтрокиДокумента)

	//Заполняем шапку документа
	ДокУстановкаЦен                            = Документы.УстановкаЦенНоменклатурыКонтрагентов.СоздатьДокумент();
	ДокУстановкаЦен.Дата                       = ТекущаяДата();
	ДокУстановкаЦен.НеПроводитьНулевыеЗначения = ИСТИНА;
	ДокУстановкаЦен.Комментарий                = "Получен в формате CommerceML";
	ДокУстановкаЦен.Контрагент                 = ИнформацияДокумента.Контрагент;

	//Заполняем табличные части
	Для Каждого СтрокаТаблицы Из СтрокиДокумента Цикл
		НоваяСтрока = ДокУстановкаЦен.Товары.Добавить();
		НоваяСтрока.Номенклатура               = СтрокаТаблицы.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
		НоваяСтрока.Валюта                     = СтрокаТаблицы.Валюта;
		НоваяСтрока.ЕдиницаИзмерения           = ПолучитьЕдиницуИзмеренияНоменклатуры(СтрокаТаблицы);
		НоваяСтрока.ТипЦен                     = СтрокаТаблицы.ТипЦены;
		НоваяСтрока.Цена                       = СтрокаТаблицы.Цена;

		Если ДокУстановкаЦен.ТипыЦен.Найти(НоваяСтрока.ТипЦен,"ТипЦен")= Неопределено Тогда
			НоваяСтрокаЦены        = ДокУстановкаЦен.ТипыЦен.Добавить();
			НоваяСтрокаЦены.ТипЦен = НоваяСтрока.ТипЦен;
		КонецЕсли;
	КонецЦикла;
	ДокУстановкаЦен.ТипыЦен.Сортировать("ТипЦен");
	ДокУстановкаЦен.Товары.Сортировать("ТипЦен");

	Попытка
		ДокУстановкаЦен.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		Сообщить(Строка(ТекущаяДата()) + " При записи документа " + СокрЛП(ДокУстановкаЦен) + "произошла ошибка", СтатусСообщения.Важное);
		Возврат ЛОЖЬ;
	КонецПопытки;

	ИнформацияДокумента.Записан = ИСТИНА;
	//Удаляем строки записанного документа
	Для Каждого СтрокаТаблицы Из СтрокиДокумента Цикл
		ТоварыПрайс.Удалить(СтрокаТаблицы);
	КонецЦикла;

	Сообщить(Строка(ТекущаяДата()) + " Записан документ " + СокрЛП(ДокУстановкаЦен));
	Возврат ИСТИНА;

КонецФункции

// Функция по данным обработки формирует документ "ЗаказПокупателя"
//
// Параметры:
// ИнформацияДокумента - строка табличной части "ЭлДокументы"
// СтрокиДокумента     - массив строк табличной части "ТоварыДокумент"
//
//Возвращаемое значение:
// булево - истина, если запись прошла без ошибок, иначе ложь
//
Функция СохранитьДокумент(ИнформацияДокумента, СтрокиДокумента)

    Если Не ЗначениеНеЗаполнено(ИнформацияДокумента.ДокументВБазе) Тогда
        
        ИнформацияДокумента.Записан = ИСТИНА;
        Для Каждого СтрокаТаблицы Из СтрокиДокумента Цикл
            ТоварыДокумент.Удалить(СтрокаТаблицы);
        КонецЦикла;
        Сообщить(Строка(ТекущаяДата()) + " Пропущен существующий документ " + ИнформацияДокумента.ДокументВБазе);
        Возврат Истина;
    КонецЕсли; 
    
    РегКурсы = РегистрыСведений.КурсыВалют;

	Если ИнформацияДокумента.Тип = "Заказ покупателя" Тогда
		ДокОбъект = Документы.ЗаказПокупателя.СоздатьДокумент();
	Иначе
		ДокОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		
		ДокОбъект.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
		ДокОбъект.ОтражатьВУправленческомУчете = Истина;
		ДокОбъект.ОтражатьВБухгалтерскомУчете = Истина;
		ДокОбъект.ОтражатьВНалоговомУчете = Истина;
		
	КонецЕсли; 

    ДокОбъект.Дата               = ТекущаяДата();
    //ДокОбъект.ВидОперации        = Перечисления.ВидыОперацийЗаказПокупателя.ПродажаКомиссия;
	
	Если ИнформацияДокумента.Тип = "Заказ покупателя" Тогда
		ДокОбъект.Склад              = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойСклад");
	Иначе
		ДокОбъект.СкладОрдер              = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойСклад");
	КонецЕсли; 
	
	ДокОбъект.Подразделение          = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновноеПодразделение");
	ДокОбъект.Ответственный          = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойОтветственный");
	
	//Подразделение
    //СтруктурнаяЕдиница
    ДокОбъект.Организация      = ИнформацияДокумента.Организация;
	
	Если ИнформацияДокумента.Тип = "Поступление товаров и услуг" Тогда
		ДокОбъект.УстановитьФлагиНДСПоОрганизации();
	КонецЕсли; 
	
    ДокОбъект.Контрагент         = ИнформацияДокумента.Контрагент;
	
	ДокОбъект.ДоговорКонтрагента = ОпределитьДоговор(ИнформацияДокумента.Организация, ИнформацияДокумента.Контрагент,
		?(ИнформацияДокумента.Тип = "Заказ покупателя", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком));
	
	Если НЕ ЗначениеНеЗаполнено(ДокОбъект.ДоговорКонтрагента) Тогда
        ДокОбъект.ТипЦен = ДокОбъект.ДоговорКонтрагента.ТипЦен;
    КонецЕсли;
	//ДокОбъект.УчитыватьНДС     = ИСТИНА;
	Если ДокОбъект.УчитыватьНДС Тогда
	    ДокОбъект.СуммаВключаетНДС = ИнформацияДокумента.НДСВСумме;
	КонецЕсли; 
    ДокОбъект.Комментарий      = "Получен в формате CommerceML";

    Отбор   = Новый Структура("Валюта",ИнформацияДокумента.Валюта);
    Ресурсы = РегКурсы.ПолучитьПоследнее(ТекущаяДата(), Отбор);

    ДокОбъект.ВалютаДокумента         = ИнформацияДокумента.Валюта;
    ДокОбъект.КурсВзаиморасчетов      = Ресурсы.Курс;
    ДокОбъект.КратностьВзаиморасчетов = Ресурсы.Кратность;
    
	Если ИнформацияДокумента.Тип = "Заказ покупателя" Тогда
		ДокОбъект.ДатаОтгрузки = ИнформацияДокумента.ДатаОтгрузки;
	    ДокОбъект.ДатаОплаты = ИнформацияДокумента.СрокПлатежа;
	КонецЕсли; 
    
    ДокОбъект.ДатаВходящегоДокумента = ИнформацияДокумента.Дата;
    ДокОбъект.НомерВходящегоДокумента = ИнформацияДокумента.Номер;
    
    //СуммаДокумента

    //Заполняем табличную часть
    Для Каждого СтрокаТаблицы Из СтрокиДокумента Цикл
        НоваяСтрока                            = ДокОбъект.Товары.Добавить();
        НоваяСтрока.Номенклатура               = СтрокаТаблицы.Номенклатура;
        НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
        НоваяСтрока.СтавкаНДС                  = СтрокаТаблицы.Номенклатура.СтавкаНДС;
        НоваяСтрока.ЕдиницаИзмерения           = ПолучитьЕдиницуИзмеренияНоменклатуры(СтрокаТаблицы);
        НоваяСтрока.Коэффициент                = СтрокаТаблицы.Коэффициент;
        НоваяСтрока.Количество                 = СтрокаТаблицы.Количество;
        НоваяСтрока.Цена                       = СтрокаТаблицы.Цена;
    КонецЦикла;

    //определим номер документа
    УстановитьНомерДокумента(ДокОбъект);

    //делаем пересчеты сумм, количества мест и НДС по строкам
    Для Каждого СтрокаТабличнойЧасти Из ДокОбъект.Товары Цикл
        РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокОбъект);
        РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокОбъект);
        РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокОбъект);
    КонецЦикла;

    Попытка
        ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
    Исключение
        Сообщить(Строка(ТекущаяДата()) + " При записи документа " + СокрЛП(ДокОбъект) + "произошла ошибка", СтатусСообщения.Важное);
        Возврат ЛОЖЬ;
    КонецПопытки;

    ИнформацияДокумента.Записан = ИСТИНА;
    //Удаляем строки записанного документа
    Для Каждого СтрокаТаблицы Из СтрокиДокумента Цикл
        ТоварыДокумент.Удалить(СтрокаТаблицы);
    КонецЦикла;

    Сообщить(Строка(ТекущаяДата()) + " Записан документ " + СокрЛП(ДокОбъект));
    Возврат ИСТИНА;

КонецФункции

// Функция сохраняет загруженные из XML-файлов данных
//
Процедура СохранитьДанные() Экспорт

	Отбор = Новый Структура("Обрабатывать", ИСТИНА);
	СтрокиДокумента = ЭлДокументы.НайтиСтроки(Отбор);
	Если НЕ СтрокиДокумента.Количество() Тогда
		Возврат;
	КонецЕсли;

	Если НЕ Вопрос("Сохранить выбранные документы?", РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК, "Сохранение данных") = КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ТестированиеДанных() Тогда
		Предупреждение("Сохранение данных невозможно. Необходимо определить соответствия объектов!");
		Возврат;
	КонецЕсли;

	Сообщить(Строка(ТекущаяДата()) + " Начинаем сохранение документов в базе данных");

	Для Каждого СтрокаТаблицыДокумент Из ЭлДокументы Цикл
		Если СтрокаТаблицыДокумент.Обрабатывать Тогда
			Если СтрокаТаблицыДокумент.Тип = "Каталог" Тогда
				СтрокиДокумента = НайтиСтрокиДокумента(ТоварыКаталог, СтрокаТаблицыДокумент.Ид);
				СохранитьКаталог(СтрокаТаблицыДокумент, СтрокиДокумента);

			ИначеЕсли СтрокаТаблицыДокумент.Тип = "Прайс" Тогда
				СтрокиДокумента = НайтиСтрокиДокумента(ТоварыПрайс, СтрокаТаблицыДокумент.Ид);
				СохранитьПрайс(СтрокаТаблицыДокумент, СтрокиДокумента)

			ИначеЕсли СтрокаТаблицыДокумент.Тип = "Заказ покупателя" 
				ИЛИ СтрокаТаблицыДокумент.Тип = "Поступление товаров и услуг" Тогда
				СтрокиДокумента = НайтиСтрокиДокумента(ТоварыДокумент, СтрокаТаблицыДокумент.Ид);
				СохранитьДокумент(СтрокаТаблицыДокумент, СтрокиДокумента)
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Отбор = Новый Структура("Записан", ИСТИНА);
	Строки = ЭлДокументы.НайтиСтроки(Отбор);
	Для Каждого СтрокаТаблицы Из Строки Цикл
		ЭлДокументы.Удалить(СтрокаТаблицы);
	КонецЦикла;

	Сообщить(Строка(ТекущаяДата())+ " Обработка данных завершена");

КонецПроцедуры
