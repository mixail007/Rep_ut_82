
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мКнопкаНастройки;

Перем ПолужирныйШрифт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура УстановитьУзелОбменаУСтрокДерева(Дерево, УзелОбмена)
	
	Для Каждого Строка Из Дерево Цикл
		
		Если Строка.ЭтоГруппа Тогда
			
			УстановитьУзелОбменаУСтрокДерева(Строка.Строки, УзелОбмена);
			
		Иначе
			
			Строка.СсылкаНаУзелОбмена = УзелОбмена;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Открывает диалог выбора файла
//
// Параметры:
//  Элемент                - Элемент управления, для которого выбираем файл
//  ПроверятьСуществование - Если Истина, то выбор отменяется если файл не существует
// 
Процедура ВыборФайла(Элемент, ПроверятьСуществование=Ложь, Знач РасширениеПоУмолчанию = "xml", 
	АрхивироватьФайлДанных = Истина, ВыборФайлаПравил = Ложь)
	
	ДиалогФыбораФайла								=	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);

	Если РасширениеПоУмолчанию = "txt" Тогда
		
		ДиалогФыбораФайла.Фильтр						=	"Файл протокола обмена (*.txt)|*.txt";
		ДиалогФыбораФайла.Расширение					=	"txt";
			
	ИначеЕсли РежимОбмена = "Выгрузка" Тогда
		
		Если АрхивироватьФайлДанных Тогда
			
			ДиалогФыбораФайла.Фильтр						=	"Архивный файл данных (*.aml)|*.aml";
			ДиалогФыбораФайла.Расширение					=	"aml";
			
		ИначеЕсли ВыборФайлаПравил Тогда
			
			ДиалогФыбораФайла.Фильтр						=	"Файл данных (*.xml)|*.xml|Архивный файл данных (*.aml)|*.aml";
			ДиалогФыбораФайла.Расширение					=	"xml";	
			
		Иначе
			
			ДиалогФыбораФайла.Фильтр						=	"Файл данных (*.xml)|*.xml";
			ДиалогФыбораФайла.Расширение					=	"xml";
			
		КонецЕсли; 
		
	Иначе
		
		ДиалогФыбораФайла.Фильтр						=	"Файл данных (*.xml)|*.xml|Архивный файл данных (*.aml)|*.aml";
		ДиалогФыбораФайла.Расширение					=	"xml";
		
	КонецЕсли;
	
	ДиалогФыбораФайла.Заголовок						=	"Выберите файл";
	ДиалогФыбораФайла.ПредварительныйПросмотр		=	Ложь;
	ДиалогФыбораФайла.ИндексФильтра					=	0;
	ДиалогФыбораФайла.ПолноеИмяФайла				=	Элемент.Значение;
	ДиалогФыбораФайла.ПроверятьСуществованиеФайла	=	ПроверятьСуществование;
	
	Если ДиалогФыбораФайла.Выбрать() Тогда
		Элемент.Значение = ДиалогФыбораФайла.ПолноеИмяФайла;
		
		Если Элемент = ЭлементыФормы.ИмяФайлаПравил Тогда 
			ИмяФайлаПравилПриИзменении(Элемент);
			
		ИначеЕсли Элемент = ЭлементыФормы.ИмяФайлаОбмена Тогда 
			ИмяФайлаОбменаПриИзменении(Элемент);
			
		ИначеЕсли Элемент = ЭлементыФормы.ИмяФайлаДанных Тогда 
			ИмяФайлаДанныхПриИзменении(Элемент);	
	
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

// Служит для настройки построителя при отборе данных
//
// Параметры:
//
Процедура НастроитьПостроитель()

	ТекущееПВД = ЭлементыФормы.ТаблицаПравилВыгрузки.ТекущиеДанные;
	
	Если ТекущееПВД.ЭтоГруппа = ИСТИНА ИЛИ 
		 НЕ ТекущееПВД.СпособОтбораДанных = "СтандартнаяВыборка"
		 ИЛИ ТекущееПВД.ИмяОбъектаДляЗапроса = Неопределено
		 ИЛИ (ТекущееПВД.СсылкаНаУзелОбмена <> Неопределено
		 	И НЕ ТекущееПВД.СсылкаНаУзелОбмена.Пустая()) Тогда
		 
		ДоступностьПостроителя = ЛОЖЬ;
				
		УдалитьОтборыПостроителяОтчета(Построитель);
				
	Иначе
		
		ОбъектМетаданных  = Метаданные.НайтиПоТипу(ТекущееПВД.ОбъектВыборки);
		ИмяМетаданных     = СтрЗаменить(ОбъектМетаданных.ПолноеИмя(), ОбъектМетаданных.Имя, ОбъектМетаданных.Представление());
		Построитель.Текст = "ВЫБРАТЬ Разрешенные _.* ИЗ " + ТекущееПВД.ИмяОбъектаДляЗапроса + " КАК _ "+ "{ГДЕ _.Ссылка.* КАК " + СтрЗаменить(ТекущееПВД.ИмяОбъектаДляЗапроса, ".", "_") + "}";
		
		Построитель.Отбор.Сбросить();
		Если ТекущееПВД.НастройкиПостроителя <> Неопределено Тогда
			Построитель.УстановитьНастройки(ТекущееПВД.НастройкиПостроителя);
		КонецЕсли;
		
		ДоступностьПостроителя = Истина;
			
	КонецЕсли;
	
	ЭлементыФормы.ПостроительОтбор.Доступность = ДоступностьПостроителя;
	ЭлементыФормы.КоманднаяПанельПостроительОтбор.Доступность = ДоступностьПостроителя;

КонецПроцедуры

Процедура УдалитьКнопкуНастроек()
	
	Если мКнопкаНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы.ДействияФормы.Кнопки.Удалить(мКнопкаНастройки);
	мКнопкаНастройки = Неопределено;	
	
КонецПроцедуры

Процедура ДобавитьКнопкуНастроекПриНеобходимости()
	
	Если мКнопкаНастройки <> Неопределено Тогда
		Возврат;
	КонецЕсли;
    
	мКнопкаНастройки = ЭлементыФормы.ДействияФормы.Кнопки.Добавить("Настройка", ТипКнопкиКоманднойПанели.Действие, , Новый Действие("ДействияФормыНастройки"));
	мКнопкаНастройки.Картинка = БиблиотекаКартинок.НастройкаСписка;
	мКнопкаНастройки.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
		
КонецПроцедуры

Процедура УдалитьДобавитьКнопкуНастроекПриНеобходимости()
	
	Если ОбработкиНастройкиВыгрузки.Количество() = 0 Тогда
		
		УдалитьКнопкуНастроек();
		
	Иначе
		
		ДобавитьКнопкуНастроекПриНеобходимости();		
				
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()

	ЭтоИнтерактивныйРежим = Истина;
	
	мКнопкаНастройки = ЭлементыФормы.ДействияФормы.Кнопки.Настройки;
	
	СохраненныйРежимЗагрузки = (РежимОбмена = "Загрузка");
	ГлавнаяПанельФормыПриСменеСтраницы("", ?(СохраненныйРежимЗагрузки, 1, 0));
	Если СохраненныйРежимЗагрузки Тогда
		
		// нужную страницу устанавливаем
		ЭлементыФормы.ГлавнаяПанельФормы.ТекущаяСтраница = ЭлементыФормы.ГлавнаяПанельФормы.Страницы.Загрузка;
		
	КонецЕсли;
	
	
	ОбработатьДоступностьЭлементовУправленияТранзакциями();
	
	ЗаполнитьСписокТиповДоспутныхДляУдаления(ЭлементыФормы.ИмяТипаДанныхДляУдаления.СписокВыбора);
	
	УдалитьДобавитьКнопкуНастроекПриНеобходимости();
		
	
	Если Не ПустаяСтрока(ИмяФайлаОбмена)
		И СохраненныйРежимЗагрузки Тогда
		
		Если ЗадаватьВопросПриЗагрузкеДанныхПриОткрытииОбработки Тогда
			
			ОтветПользователя = Вопрос("Выполнить загрузку данных из файла обмена?", РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Да);
	
			Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
					
				Возврат;			
					
			КонецЕсли;
				
		КонецЕсли;
		
		ВыполнитьЗагрузку();
		ПредставлениеПериодаВыгрузки = ПредставлениеПериода(ДатаНачала, ДатаОкончания);
						
	КонецЕсли;	
		
КонецПроцедуры

// Обработчик события ПриЗакрытии формы.
//
Процедура ПриЗакрытии()

	ЭтоИнтерактивныйРежим = Ложь;
	
КонецПроцедуры

Процедура ПередСохранениемЗначений(Отказ)

	СохранитьПравилаВоВнутреннемФормате();

КонецПроцедуры

Процедура ПослеВосстановленияЗначений()

	ВосстановитьПравилаИзВнутреннегоФормата();
	
	ВыгрузкаДанныхВФайлОбменаПриИзменении(Неопределено);
	
	ТипИнформационнойБазыДляПодключенияПриИзменении(Неопределено);
	
	АутентификацияWindowsИнформационнойБазыДляПодключенияПриИзменении(Неопределено);

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ОбновитьДанныеКнопкиНастройки()
	
	Если РежимОбмена = "Выгрузка"
		И ОбработкиНастройкиВыгрузки.Количество() > 0 Тогда
		
		ДобавитьКнопкуНастроекПриНеобходимости();
		
		Если ОбработкиНастройкиВыгрузки.Количество() = 1 Тогда
			//	Кнопка типа Действие
			мКнопкаНастройки.ТипКнопки = ТипКнопкиКоманднойПанели.Действие;
			мКнопкаНастройки.Имя       = ОбработкиНастройкиВыгрузки.Получить(0).Значение;
			мКнопкаНастройки.Текст     = ОбработкиНастройкиВыгрузки.Получить(0).Представление;
		Иначе
			//	Кнопка типа Подменю
			мКнопкаНастройки.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю;
			мКнопкаНастройки.Имя       = "Настройки";
			мКнопкаНастройки.Текст     = "Настройки";
			мКнопкаНастройки.Кнопки.Очистить();
			Для Каждого Эл Из ОбработкиНастройкиВыгрузки Цикл
				мКнопкаНастройки.Кнопки.Добавить(Эл.Значение, ТипКнопкиКоманднойПанели.Действие, Эл.Представление, Новый Действие("ДействияФормыНастройки"));
			КонецЦикла; 
		КонецЕсли;
		
	Иначе
		
		УдалитьКнопкуНастроек();
		
	КонецЕсли;	
	
КонецПроцедуры

// Обработчик события ПриСменеСтраницы панели ГлавнаяПанельФормы
//
Процедура ГлавнаяПанельФормыПриСменеСтраницы(Элемент, ТекущаяСтраница)

	КнопкаВыполнить        = ЭлементыФормы.ДействияФормы.Кнопки.Выполнить;
			
	Если ТекущаяСтраница = 0 Тогда

		РежимОбмена = "Выгрузка";
        КнопкаВыполнить.Текст              = "Выгрузить данные";
		
	ИначеЕсли ТекущаяСтраница = 1 Тогда

		РежимОбмена = "Загрузка";
        КнопкаВыполнить.Текст              = "Загрузить данные";
		
	КонецЕсли; 
	
	ОбновитьДанныеКнопкиНастройки();	
	
КонецПроцедуры

// Обработчик события Нажатие кнопки Выполнить
//
Процедура ДействияФормыВыполнить(Кнопка)

	Если РежимОбмена = "Загрузка" Тогда
		ВыполнитьЗагрузку();
	Иначе
		ВыполнитьВыгрузку();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие кнопки Настройки
//
Процедура ДействияФормыНастройки(Кнопка)

	ИмяОбработки   = Кнопка.Имя;
	ФормаОбработки = ДопОбработки[ИмяОбработки].ПолучитьФорму( , ЭтаФорма, );
    	
	УстановитьПараметрыИзДиалога();
	
	Для Каждого Пар Из ПараметрыДопОбработок[ИмяОбработки] Цикл
		ФормаОбработки[Пар] = Параметры[Пар];
	КонецЦикла; 
	
	РезультатОткрытияФормы = ФормаОбработки.ОткрытьМодально();
	
	Если РезультатОткрытияФормы <> Неопределено Тогда
		
		Для Каждого Пар Из ПараметрыДопОбработок[ИмяОбработки] Цикл
			Параметры[Пар] = ФормаОбработки[Пар];
			УстановитьЗначениеПараметраВТаблице(Пар, ФормаОбработки[Пар]);
		КонецЦикла;
		
		ПараметрыИнициализированы = Истина;
	КонецЕсли;
	

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ФОРМЫ

// Обработчик события НачалоВыбора элемента ИмяФайлаОбмена.
//
Процедура ИмяФайлаДанныхНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ВыборФайла(Элемент, , , АрхивироватьФайл);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента ИмяФайлаОбмена.
//
Процедура ИмяФайлаОбменаПриИзменении(Элемент)

	Если ПустаяСтрока(ИмяФайлаОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ИмяФайлаОбмена);
	Если Не Файл.Существует() Тогда
		Возврат; 
	КонецЕсли;
	
	Попытка
		ОткрытьФайлЗагрузки(Истина);
		ПредставлениеПериодаВыгрузки = ПредставлениеПериода(ДатаНачала, ДатаОкончания);
	Исключение
		Возврат;
	КонецПопытки;
	
	ОтветПользователя = Вопрос("Выполнить загрузку данных из файла обмена?", РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Да);
	
	Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
		
		Возврат;			
		
	КонецЕсли;
	
	// загрузка данных из самого файла обмена
	ВыполнитьЗагрузку();	
		
КонецПроцедуры

// Обработчик события ПриИзменении флaлажка АрхивироватьФайл
//
Процедура АрхивироватьФайлПриИзменении(Элемент)

	Если АрхивироватьФайл Тогда
		ИмяФайлаОбмена = СтрЗаменить(ИмяФайлаОбмена, ".xml", ".aml");
	Иначе
		ИмяФайлаОбмена = СтрЗаменить(ИмяФайлаОбмена, ".aml", ".xml");
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьОтборыПостроителяОтчета(Построитель)
	
	ОтборКоличество = Построитель.Отбор.Количество();
	Для Н = 1 По ОтборКоличество Цикл
		Построитель.Отбор.Удалить(0);
	КонецЦикла;	
	
КонецПроцедуры

// Открывает файл обмена во внешнем приложении
//
// Параметры:
//  
// 
Процедура ОткрытьВПриложении(Элемент, СтандартнаяОбработка)

	ЗапуститьПриложение(Элемент.Значение);
	СтандартнаяОбработка = ЛОЖЬ;
	
КонецПроцедуры // ОткрытьВПриложении() 

// Обработчик события НачалоВыбора элемента ИмяФайлаПравил.
//
Процедура ИмяФайлаПравилНачалоВыбора(Элемент, СтандартнаяОбработка)

	ВыборФайла(Элемент, Истина, , Ложь, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ТаблицаПравилВыгрузки

// Обработчик события ПриИзмененииФлажка
Процедура ТаблицаПравилВыгрузкиПриИзмененииФлажка(Элемент, Колонка)

	Если Колонка.Имя = "ПВД" Тогда
		
		ТекСтрока = ЭлементыФормы.ТаблицаПравилВыгрузки.ТекущиеДанные;
		Если ТекСтрока.Включить = 2 Тогда
			ТекСтрока.Включить = 0;
		КонецЕсли;
		
		УстановитьПометкиПодчиненных(ТекСтрока, "Включить");
		УстановитьПометкиРодителей(ТекСтрока, "Включить");
		
	КонецЕсли;

КонецПроцедуры // ТаблицаПравилВыгрузкиПриИзмененииФлажка()

Процедура КоманднаяПанельТаблицаПравилВыгрузкиУстановитьПометки(Кнопка)

	Для Каждого Строка из ТаблицаПравилВыгрузки.Строки Цикл
		Строка.Включить = 1;
		УстановитьПометкиПодчиненных(Строка, "Включить");
	КонецЦикла;

КонецПроцедуры // КоманднаяПанельТаблицаПравилВыгрузкиУстановитьПометки()

Процедура КоманднаяПанельТаблицаПравилВыгрузкиСнятьПометки(Кнопка)

	Для Каждого Строка из ТаблицаПравилВыгрузки.Строки Цикл
		Строка.Включить = 0;
		УстановитьПометкиПодчиненных(Строка, "Включить");
	КонецЦикла;

КонецПроцедуры // КоманднаяПанельТаблицаПравилВыгрузкиСнятьПометки()

Процедура КоманднаяПанельТаблицаПравилВыгрузкиОчиститьОтбор(Кнопка)

	Отбор = Новый Структура("ИспользоватьОтбор", ИСТИНА);
	Строки = ТаблицаПравилВыгрузки.Строки.НайтиСтроки(Отбор, ИСТИНА);
	Для Каждого Строка из Строки Цикл
		
		Строка.НастройкиПостроителя = Неопределено;
		Строка.ИспользоватьОтбор    = ЛОЖЬ;
		
	КонецЦикла;

КонецПроцедуры

Процедура ТаблицаПравилВыгрузкиПриАктивизацииСтроки(Элемент)

	НастроитьПостроитель();	

КонецПроцедуры

Процедура ОбновитьНастройкиПостроителяВТаблицеДляВыгрузки()
	
	ТекущееПВД = ЭлементыФормы.ТаблицаПравилВыгрузки.ТекущиеДанные;
	Если Построитель.Отбор.Количество() > 0 Тогда
		
		ТекущееПВД.НастройкиПостроителя = Построитель.ПолучитьНастройки();
		ТекущееПВД.ИспользоватьОтбор    = ИСТИНА;
		
	Иначе
		
		ТекущееПВД.НастройкиПостроителя = Неопределено;
		ТекущееПВД.ИспользоватьОтбор    = ЛОЖЬ;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПостроительОтборПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	ОбновитьНастройкиПостроителяВТаблицеДляВыгрузки();

КонецПроцедуры

Процедура ПостроительОтборПослеУдаления(Элемент)

	ОбновитьНастройкиПостроителяВТаблицеДляВыгрузки();

КонецПроцедуры

Процедура ТаблицаПравилВыгрузкиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ДанныеСтроки.Использоватьотбор Тогда
		
		ОформлениеСтроки.Шрифт = ПолужирныйШрифт;
		
	ИначеЕсли ДанныеСтроки.ЭтоГруппа Тогда
		
		Отбор = Новый Структура("ИспользоватьОтбор", ИСТИНА);
		Строки = ДанныеСтроки.Строки.НайтиСтроки(Отбор, ИСТИНА);
		
		Если Строки.Количество() > 0 Тогда
			ОформлениеСтроки.Шрифт = ПолужирныйШрифт;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбработатьДоступностьЭлементовУправленияТранзакциями()
	
	ЭлементыФормы.ИспользоватьТранзакции.Доступность = НЕ ФлагРежимОтладки;
	
	ЭлементыФормы.НадписьКоличествоЭлементовВТранзакции.Доступность = ИспользоватьТранзакции;
	ЭлементыФормы.КоличествоОбъектовНаТранзакцию.Доступность = ИспользоватьТранзакции;
	
КонецПроцедуры

Процедура ИспользоватьТранзакцииПриИзменении(Элемент)
	
	ОбработатьДоступностьЭлементовУправленияТранзакциями();
	
КонецПроцедуры

Процедура ФлагРежимОтладки1ПриИзменении(Элемент)
	
	Если Элемент.Значение Тогда
		
		ИспользоватьТранзакции = Ложь;
				
	КонецЕсли;
	
	ОбработатьДоступностьЭлементовУправленияТранзакциями();
	
КонецПроцедуры

Процедура КоличествоОбъектовЗагрузкиДляОбновленияСтатусаПриИзменении(Элемент)
	
	Если Элемент.Значение = 0 Тогда
		Элемент.Значение = 100;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИмяФайлаПротоколаОбменаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ВыборФайла(Элемент, , "txt", Ложь);
	
КонецПроцедуры

Процедура ТаблицаПравилВыгрузкиСсылкаНаУзелОбменаПриИзменении(Элемент)
	
	НастроитьПостроитель();	
	
КонецПроцедуры

Процедура УдалитьНажатие(Элемент)
	
	Если ПустаяСтрока(ИмяТипаДанныхДляУдаления) Тогда
		Возврат;
	КонецЕсли;
	
	Если Вопрос("Удалить всю информацию из базы данных с типом: " + ИмяТипаДанныхДляУдаления, РежимДиалогаВопрос.ДаНет, 60) <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьМенеджерыИСообщения();
	
	УдалитьОбъектыТипа(ИмяТипаДанныхДляУдаления);	
	
КонецПроцедуры

Процедура УдалитьВсеДанныеИзИБНажатие(Элемент)
	
	ИнициализироватьМенеджерыИСообщения();
	
	УдалитьВсе();	
	
КонецПроцедуры

Процедура ТаблицаПравилВыгрузкиПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущаяКолонка.Имя = "СсылкаНаУзелОбмена" Тогда
		
		Отказ = ЭлементыФормы.ТаблицаПравилВыгрузки.ТекущиеДанные.ЭтоГруппа;	
		
	КонецЕсли;	
		
КонецПроцедуры

Процедура КоманднаяПанельТаблицаПравилВыгрузкиОчиститьУзлыОбмена(Кнопка)
	
	УстановитьУзелОбменаУСтрокДерева(ТаблицаПравилВыгрузки.Строки, Неопределено);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаПравилВыгрузкиУстановитьУзелОбмена(Кнопка)
	
	Если ЭлементыФормы.ТаблицаПравилВыгрузки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьУзелОбменаУСтрокДерева(ТаблицаПравилВыгрузки.Строки, ЭлементыФормы.ТаблицаПравилВыгрузки.ТекущиеДанные.СсылкаНаУзелОбмена);
	
КонецПроцедуры

Процедура КоманднаяПанельПостроительОтборПоказатьРезультатаОтбора(Кнопка)
	
	// показать выбранные записи
	Если ЭлементыФормы.ПостроительОтбор.Доступность <> Истина
		ИЛИ ЭлементыФормы.ТаблицаПравилВыгрузки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементыФормы.ТаблицаПравилВыгрузки.ТекущиеДанные.ИспользоватьОтбор Тогда
	
		Построитель.Вывести();
		
	Иначе
		
		ТекущийПостроительОтчетов = Новый ПостроительОтчета;
		
		Свойства	= Менеджеры[ЭлементыФормы.ТаблицаПравилВыгрузки.ТекущиеДанные.ОбъектВыборки];
		ИмяТипа		= Свойства.ИмяТипа;
		
		РезультатЗапроса = ПолучитьРезультатЗапросаДляВыгрузкиОчисткиДанных(Свойства, ИмяТипа, , , Истина);
		
		ТекущийПостроительОтчетов.ИсточникДанных = Новый ОписаниеИсточникаДанных(РезультатЗапроса);
		
		ТекущийПостроительОтчетов.Вывести();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуПравилОбмена()
	
	мXMLПравила = Неопределено;
	ЗагрузитьПравилаОбмена();
	
	УдалитьОтборыПостроителяОтчета(Построитель);
	
	ОбновитьДанныеКнопкиНастройки();
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаПравилВыгрузкиЗагрузитьПравилаОбмена(Кнопка)
	
	Если ПустаяСтрока(ИмяФайлаПравилОбмена) Тогда
		Предупреждение("Не выбран файл правил обмена!");
		Возврат;
	КонецЕсли;
	
   ВыполнитьЗагрузкуПравилОбмена();   
			
КонецПроцедуры

Процедура ИмяФайлаПравилПриИзменении(Элемент)
	
	Если ПустаяСтрока(ИмяФайлаПравилОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ИмяФайлаПравилОбмена);
	Если Не Файл.Существует() Тогда
		Возврат; 
	КонецЕсли;
	
	ОтветПользователя = Вопрос("Загрузить правила конвертации?", РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Да);
	
	Если ОтветПользователя = КодВозвратаДиалога.Да
		ИЛИ ОтветПользователя = КодВозвратаДиалога.Таймаут Тогда
		
		ВыполнитьЗагрузкуПравилОбмена();	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИмяФайлаДанныхПриИзменении(Элемент)
	
	Файл = Новый Файл(ИмяФайлаОбмена);
	АрхивироватьФайл = (Файл.Расширение = ".aml");
	
КонецПроцедуры

Процедура КнопкаУстановкиПериодаНажатие(Элемент)
	
	НП = Новый НастройкаПериода;
	НП.ВариантНастройки = ВариантНастройкиПериода.Период;
	
	Если НП.Редактировать() Тогда
		
		ДатаНачала = НП.ПолучитьДатуНачала();
		ДатаОкончания = НП.ПолучитьДатуОкончания();

	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузкаДанныхВФайлОбменаПриИзменении(Элемент)
	
	Если НепосредственноеЧтениеВИБПриемнике Тогда
		ЭлементыФормы.ПанельПараметрыВыгрузки.ТекущаяСтраница = ЭлементыФормы.ПанельПараметрыВыгрузки.Страницы.ВыгрузкаВИБПриемник;
	Иначе
		ЭлементыФормы.ПанельПараметрыВыгрузки.ТекущаяСтраница = ЭлементыФормы.ПанельПараметрыВыгрузки.Страницы.ВыгрузкаВФайл;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТипИнформационнойБазыДляПодключенияПриИзменении(Элемент)
	
	Если ТипИнформационнойБазыДляПодключения Тогда
		ЭлементыФормы.ПанельподключениеИБПриемник.ТекущаяСтраница = ЭлементыФормы.ПанельподключениеИБПриемник.Страницы.ПодключениеФайловаяИБ;
	Иначе
		ЭлементыФормы.ПанельподключениеИБПриемник.ТекущаяСтраница = ЭлементыФормы.ПанельподключениеИБПриемник.Страницы.ПодключениеСервернаяИБ;
	КонецЕсли;	
	
КонецПроцедуры

Процедура АутентификацияWindowsИнформационнойБазыДляПодключенияПриИзменении(Элемент)
	
	ЭлементыФормы.НадписьПользовательДляПодключения.Доступность = НЕ АутентификацияWindowsИнформационнойБазыДляПодключения;
	ЭлементыФормы.ПользовательИнформационнойБазыДляПодключения.Доступность = НЕ АутентификацияWindowsИнформационнойБазыДляПодключения;
	ЭлементыФормы.НадписьПароль.Доступность = НЕ АутентификацияWindowsИнформационнойБазыДляПодключения;
	ЭлементыФормы.ПарольИнформационнойБазыДляПодключения.Доступность = НЕ АутентификацияWindowsИнформационнойБазыДляПодключения;
	
КонецПроцедуры

Процедура ТестПодключенияНажатие(Элемент)
	
	РезультатПодключения = ВыполнитьПодключениеКИБПриемнику();
	
	Если РезультатПодключения <> Неопределено Тогда
		
		Предупреждение("Подключение к информационной базы приемнику произошло успешно.");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КаталогИнформационнойБазыДляПодключенияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ДиалогФыбораФайла =	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогФыбораФайла.Заголовок						=	"Выбок каталога информационной базы";
	ДиалогФыбораФайла.Каталог				=	Элемент.Значение;
	ДиалогФыбораФайла.ПроверятьСуществованиеФайла	=	Истина;
	
	Если ДиалогФыбораФайла.Выбрать() Тогда
		
		Элемент.Значение = ДиалогФыбораФайла.Каталог;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КаталогИнформационнойБазыДляПодключенияОткрытие(Элемент, СтандартнаяОбработка)
	
	ЗапуститьПриложение(Элемент.Значение);
	СтандартнаяОбработка = ЛОЖЬ;
	
КонецПроцедуры

Процедура ВерсияПлатформыИнформационнойБазыДляПодключенияПриИзменении(Элемент)
	
	Если ПустаяСтрока(Элемент.Значение) Тогда
		
		ВерсияПлатформыИнформационнойБазыДляПодключения = "V8";
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

Если мСписокМакетовПравилОбмена.Количество() > 0 Тогда
	
	ЭлементыФормы.ИмяФайлаПравил.КнопкаСпискаВыбора = Истина;
	ЭлементыФормы.ИмяФайлаПравил.ВысотаСпискаВыбора = 15;
	ЭлементыФормы.ИмяФайлаПравил.СписокВыбора       = мСписокМакетовПравилОбмена;
	
КонецЕсли;

//ИмяФайлаДанных = КаталогВременныхФайлов() + "V8Data.xml";

ПолужирныйШрифт = Новый Шрифт(,,ИСТИНА,,,);
