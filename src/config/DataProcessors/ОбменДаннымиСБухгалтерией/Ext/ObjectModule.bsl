
////////////////////////////////////////////////////////////////////////////////
// ИСПОЛЬЗУЕМЫЕ СОКРАЩЕНИЯ ИМЕН ПЕРЕМЕННЫХ (АБРЕВИАТУРЫ)

//  ПКО  - правило конвертации объектов
//  ПКС  - правило конвертации свойств объектов
//  ПКГС - правило конвертации группы свойств объектов
//  ПКЗ  - правило конвертации значений объектов
//  ПВД  - правило выгрузки данных
//  ПОД  - правило очистки данных


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПЕРЕМЕННЫЕ МОДУЛЯ ДЛЯ НАПИСАНИЯ АЛГОРИТМОВ (ОБЩИЕ ДЛЯ ВЫГРУЗКИ И ЗАГРУЗКИ)

 
Перем Конвертация  Экспорт;  // Структура свойств конвертации (Имя, Ид, обработчики событий обмена)

Перем Алгоритмы    Экспорт;  // Структура, содержащая используемые алгоритмы
Перем Запросы      Экспорт;  // Структура, содержащая используемые запросы
Перем ДопОбработки Экспорт;  // Структура, содержащая используемые внешние обработки
                                                  
Перем Правила      Экспорт;  // Структура, содержащая ссылки на ПКО

Перем Менеджеры    Экспорт;  // Соответствие, содержащее поля Имя, ИмяТипа, ТипСсылкиСтрокой, Менеджер, ОбъектМД, ПКО
Перем МенеждерыДляПлановОбмена Экспорт;
Перем ФайлОбмена Экспорт;            // Последовательно записываемый/читаемый файл обмена

Перем ПараметрыДопОбработок Экспорт;  // Структура, содержащая параметры, используемых внешних обработок

Перем ПараметрыИнициализированы Экспорт;  // Если Истина, то необходимые параметры конвертации проинициализированы

Перем мФайлПротоколаДанных Экспорт; // файл для ведения протокола обмена данными
Перем ФлагКомментироватьОбработкуОбъектов Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ФЛАГИ НАЛИЧИЯ ГЛОБАЛЬНЫХ ОБРАБОТЧИКОВ СОБЫТИЙ

Перем ЕстьГлобальныйОбработчикПередВыгрузкойОбъекта;
Перем ЕстьГлобальныйОбработчикПослеВыгрузкиОбъекта;

Перем ЕстьГлобальныйОбработчикПередКонвертациейОбъекта;

Перем ЕстьГлобальныйОбработчикПередЗагрузкойОбъекта;
Перем ЕстьГлобальныйОбработчикПослеЗагрузкиОбъекта;

Перем ВерсияПлатформыПриемника;

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБРАБОТОК ОБМЕНА (ОБЩИЕ ДЛЯ ВЫГРУЗКИ И ЗАГРУЗКИ)

Перем одТипСтрока;                // Тип("Строка")
Перем одТипБулево;                // Тип("Булево")
Перем одТипЧисло;                 // Тип("Число")
Перем одТипДата;                  // Тип("Дата")
Перем одТипХранилищеЗначения;     // Тип("ХранилищеЗначения")
Перем одТипДвоичныеДанные;        // Тип("ДвоичныеДанные")
Перем одТипВидДвиженияНакопления; // Тип("ВидДвиженияНакопления")
Перем одТипУдалениеОбъекта;       // Тип("УдалениеОбъекта")
Перем одТипВидСчета;			  // Тип("ВидСчета")

Перем одТипУзлаXML_КонецЭлемента  Экспорт;
Перем одТипУзлаXML_НачалоЭлемента Экспорт;
Перем одТипУзлаXML_Текст          Экспорт;

Перем ЗначениеПустаяДата Экспорт;

Перем одСообщения;             // Соответствие. Ключ - код ошибки,  Значение - описание ошибки

Перем мСписокМакетовПравилОбмена Экспорт;


////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ ОБРАБОТКИ ВЫГРУЗКИ
 
Перем мСчетчикВыгруженныхОбъектов Экспорт;   // Число - счетчик выгруженных объектов
Перем мСчетчикНПП Экспорт;   // Число - счетчик НПП
Перем мXMLДокумент;                          // Вспомогательный DOM-XML документ, используемый при создании узлов xml
Перем мТаблицаПравилКонвертацииСвойств;      // ТаблицаЗначений - шаблон для воссоздания структуры таблицы путем копирования
Перем мXMLПравила;                           // xml-Строка, содержащая описание правил обмена

Перем мТаблицаЗарегистрированныхДокументов;
Перем мТаблицаВыгруженныхДокументов;

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ ОБРАБОТКИ ЗАГРУЗКИ
 
Перем мСчетчикЗагруженныхОбъектов Экспорт;// Число - счетчик загруженных объектов

Перем мАтрибутыФайлаОбмена Экспорт;       // Структура. После открытия файла 
                                          // содержит атрибуты файла обмена 
                                          // согласно формату

Перем ЗагруженныеОбъекты Экспорт;         // Соответствие. Ключ - Нпп объекта в файле,
                                          // Значение - ссылка на загруженный объект
Перем ЧислоХранимыхЗагруженныхОбъектов Экспорт;  // число хранимых загруженных объектов, 
                                          // после которого Соответствие ЗагруженныеОбъекты 
                                          // очищается
Перем ЗапоминатьЗагруженныеОбъекты Экспорт;

Перем мСоответсвиеДопПараметровПоиска;
Перем мСоответсвиеАлгоритмовПоискаЭлементов;

Перем мОбработкаДляЗагрузкиДанных Экспорт;


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ ДЛЯ НАПИСАНИЯ АЛГОРИТМОВ

////////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СТРОКАМИ

// Разбирает строку на две части: до подстроки разделителя и после.
//
// Параметры:
//  Стр          - разбираемая строка;
//  Разделитель  - подстрока-разделитель:
//  Режим        - 0 - разделитель в возвращаемые подстроки не включается;
//                 1 - разделитель включается в левую подстроку;
//                 2 - разделитель включается в правую подстроку.
//
// Возвращаемое значение:
//  Правая часть строки - до символа-разделителя.
// 
Функция ОтделитьРазделителем(Стр, Знач Разделитель, Режим=0)

	ПраваяЧасть         = "";
	ПозРазделителя      = Найти(Стр, Разделитель);
	ДлинаРазделителя    = СтрДлина(Разделитель);
	Если ПозРазделителя > 0 Тогда
		ПраваяЧасть	 = Сред(Стр, ПозРазделителя + ?(Режим=2, 0, ДлинаРазделителя));
		Стр          = СокрЛП(Лев(Стр, ПозРазделителя - ?(Режим=1, -ДлинаРазделителя + 1, 1)));
	КонецЕсли;

	Возврат(ПраваяЧасть);

КонецФункции // ОтделитьРазделителем()

// Преобразует значения из строки в массив, используя указанный разделитель
//
// Параметры:
//  Стр            - Разбираемая строка
//  Разделитель    - подстрока разделитель
//
// Возвращаемое значение:
//  Массив значений
// 
Функция МассивИзСтроки(Знач Стр, Разделитель=",")

	Массив      = Новый Массив;
	ПраваяЧасть = ОтделитьРазделителем(Стр, Разделитель);
	
	Пока Не ПустаяСтрока(Стр) Цикл
		Массив.Добавить(СокрЛП(Стр));
		Стр         = ПраваяЧасть;
		ПраваяЧасть = ОтделитьРазделителем(Стр, Разделитель);
	КонецЦикла; 

	Возврат(Массив);
	
КонецФункции // МассивИзСтроки() 

// Разбирает строку, выделяя из нее префикс и числовую часть.
//
// Параметры:
//  Стр            - Строка. Разбираемая строка;
//  ЧисловаяЧасть  - Число. Переменная, в которую возвратится числовая часть строки;
//  Режим          - Строка. Если "Число", то возвратит числовую часть, иначе - префикс.
//
// Возвращаемое значение:
//  Префикс строки
//
Функция ПолучитьПрефиксЧислоНомера(Знач Стр, ЧисловаяЧасть = "", Режим = "")

	Стр     = СокрЛП(Стр);
	Префикс = Стр;
	Длина   = СтрДлина(Стр);

	Для Сч = 1 По Длина Цикл
		
		Попытка
			ЧисловаяЧасть = Число(Стр);
		Исключение
			
			Стр = Прав(Стр, Длина - Сч);
			Продолжить;
			
		КонецПопытки;

		Если (ЧисловаяЧасть > 0) И (СтрДлина(Формат(ЧисловаяЧасть, "ЧГ=0")) = Длина - Сч + 1) Тогда 
			
			Префикс = Лев(Префикс, Сч - 1);

			Пока Прав(Префикс, 1) = "0" Цикл
				Префикс = Лев(Префикс, СтрДлина(Префикс) - 1);
			КонецЦикла;

			Прервать;
			
		Иначе
			
			Стр = Прав(Стр, Длина - Сч);
			
		КонецЕсли;

		Если ЧисловаяЧасть < 0 Тогда
			ЧисловаяЧасть = - ЧисловаяЧасть
		КонецЕсли;

	КонецЦикла;

	Если Режим = "Число" Тогда
		Возврат(ЧисловаяЧасть);
	Иначе
		Возврат(Префикс);
	КонецЕсли;

КонецФункции // ПолучитьПрефиксЧислоНомера()

// Приводит номер (код) к требуемой длине. При этом выделяется префикс
// и числовая часть номера, остальное пространство между префиксом и
// номером заполняется нулями.
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//  Стр          - преобразовываемая строка;
//  Длина        - требуемая длина строки.
//
// Возвращаемое значение:
//  Строка       - код или номер, приведенная к требуемой длине.
// 
Функция ПривестиНомерКДлине(Знач Стр, Длина, ДобавлятьНулиЕслиДлинаНеМеньшеТекущейДлиныНомера = Истина, Префикс = "") Экспорт

	Стр             = СокрЛП(Стр);
	ВходящаяДлинаНомера = СтрДлина(Стр);

	ЧисловаяЧасть   = "";
	Результат       = ПолучитьПрефиксЧислоНомера(Стр, ЧисловаяЧасть);
	
	Результат = ?(ПустаяСтрока(Префикс), Результат, Префикс);
	
	СтрокаЧисловойЧасти = Формат(ЧисловаяЧасть, "ЧГ=0");
	ДлинаЧисловойЧасти = СтрДлина(СтрокаЧисловойЧасти);

	Если (Длина >= ВходящаяДлинаНомера И ДобавлятьНулиЕслиДлинаНеМеньшеТекущейДлиныНомера)
		ИЛИ (Длина < ВходящаяДлинаНомера) Тогда
		
		Для ВременнаяПеременная = 1 По Длина - СтрДлина(Результат) - ДлинаЧисловойЧасти Цикл
			
			Результат = Результат + "0";
			
		КонецЦикла;
	
	КонецЕсли;
		
	Результат = Результат + СтрокаЧисловойЧасти;

	Возврат(Результат);

КонецФункции // ПривестиНомерКДлине()

// Добавляет к префиксу номера или кода подстроку
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//  Стр          - Строка. Номер или код;
//  Добавок      - добаляемая к префиксу подстрока;
//  Длина        - требуемая результрирующая длина строки;
//  Режим        - "Слева" - подстрока добавляется слева к префиксу, иначе - справа.
//
// Возвращаемое значение:
//  Строка       - номер или код, к префиксу которого добавлена указанная подстрока.
//
Функция ДобавитьКПрефиксу(Знач Стр, Добавок = "", Длина = "", Режим = "Слева") Экспорт

	Стр = СокрЛП(Формат(Стр,"ЧГ=0"));

	Если ПустаяСтрока(Длина) Тогда
		Длина = СтрДлина(Стр);
	КонецЕсли;

	ЧисловаяЧасть   = "";
	Префикс         = ПолучитьПрефиксЧислоНомера(Стр, ЧисловаяЧасть);

	Если Режим = "Слева" Тогда
		Результат = СокрЛП(Добавок) + Префикс;
	Иначе
		Результат = Префикс + СокрЛП(Добавок);
	КонецЕсли;

	Пока Длина - СтрДлина(Результат) - СтрДлина(Формат(ЧисловаяЧасть, "ЧГ=0")) > 0 Цикл
		Результат = Результат + "0";
	КонецЦикла;

	Результат = Результат + Формат(ЧисловаяЧасть, "ЧГ=0");

	Возврат(Результат);

КонецФункции // ДобавитьКПрефиксу()

// Дополняет строку указанным символом до указанной длины.
//
// Параметры: 
//  Стр          - дополняемая строка;
//  Длина        - требуемая длина результирующей строки;
//  Чем          - символ, которым дополняется строка.
//
// Возвращаемое значение:
//  Строка, дополненная указанным символом до указанной длины.
//
Функция одДополнитьСтроку(Стр, Длина, Чем = " ") Экспорт

	Результат = СокрЛП(Стр);
	Пока Длина - СтрДлина(Результат) > 0 Цикл
		Результат = Результат + Чем;
	КонецЦикла;

	Возврат(Результат);

КонецФункции // одДополнитьСтроку() 


////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ДАННЫМИ

// Возвращает строку - имя переданного значения перечисления.
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//  Значение     - значение перечисления
//
// Возвращаемое значение:
//  Строка       - имя переданного значения перечисления.
//
Функция одИмяЗначенияПеречисления(Значение) Экспорт

	ОбъектМД       = Значение.Метаданные();
	ИндексЗначения = Перечисления[ОбъектМД.Имя].Индекс(Значение);

	Возврат ОбъектМД.ЗначенияПеречисления[ИндексЗначения].Имя;

КонецФункции // одИмяЗначенияПеречисления()

// Определяет заполнено ли переданное значение
//
// Параметры: 
//  Значение       - значение, заполенение которого надо проверить
//
// Возвращаемое значение:
//  Истина         - значение не заполнено, ложь - иначе.
//
Функция одПустое(Значение, ЭтоNULL=Ложь)

	Результат   = Ложь;
	ТипЗначения = ТипЗнч(Значение);

	// Сначала примитивные типы
	Если Значение = Неопределено Тогда
		Результат = Истина;
	ИначеЕсли Значение = NULL Тогда
		Результат = Истина;
		ЭтоNULL   = Истина;
	ИначеЕсли ТипЗначения = одТипСтрока Тогда
		Если СокрЛП(Значение) = "" Тогда
			Результат = Истина;
		КонецЕсли; 
	ИначеЕсли ТипЗначения = одТипЧисло Тогда
		Если Значение = 0 Тогда
			Результат = Истина;
		КонецЕсли; 
	ИначеЕсли ТипЗначения = одТипДата Тогда
		Если Значение = ЗначениеПустаяДата Тогда
			Результат = Истина;
		КонецЕсли; 
	ИначеЕсли ТипЗначения = одТипБулево Тогда
		Результат = Не Значение;
	ИначеЕсли ТипЗначения = одТипХранилищеЗначения Тогда
		Если одПустое(Значение.Получить()) Тогда
			Результат = Истина;
		КонецЕсли;
	ИначеЕсли ТипЗначения = одТипДвоичныеДанные Тогда
		Результат = Ложь;
	Иначе

		// Для остальных будем считать значение пустым, если оно равно
		// значению по умолчанию своего типа.
		Попытка
			Результат = Значение.Пустая();
			Возврат Результат;
		Исключение
		КонецПопытки;
		
		Попытка
			Если Значение = Новый(ТипЗначения) Тогда
				Результат = Истина;
			КонецЕсли;
		Исключение
			Результат = Ложь;
		КонецПопытки;

	КонецЕсли; 

	Возврат Результат;

КонецФункции // одПустое()

// Возвращает объект ОписаниеТипов, содержащий указанный тип.
//
// Параметры:
//  ЗначениеТипа - строка с именем типа или значение типа Тип.
//  
// Возвращаемое значение:
//  ОписаниеТипов
//
Функция одОписаниеТипа(ЗначениеТипа)

	МассивТипов = Новый Массив;
	Если ТипЗнч(ЗначениеТипа) = одТипСтрока Тогда
		МассивТипов.Добавить(Тип(ЗначениеТипа));
	Иначе
		МассивТипов.Добавить(ЗначениеТипа);
	КонецЕсли; 
	ОписаниеТипов	= Новый ОписаниеТипов(МассивТипов);

	Возврат ОписаниеТипов;

КонецФункции // одОписаниеТипа()

// Возвращает пустое (дефолтное) значение указанного типа
//
// Параметры:
//  Тип          - строка с именем типа или значение типа Тип.
//
// Возвращаемое значение:
//  Пустое значение указанного типа.
// 
Функция одПолучитьПустоеЗначение(Тип)

	Возврат одОписаниеТипа(Тип).ПривестиЗначение(Неопределено);

КонецФункции // ПолучитьПустоеЗначение()

// Осуществляет простой поиск объекта информационной базы по указанному свойству.
//
// Параметры:
//  Менеджер       - менеджер искомого объекта;
//  Свойство       - свойство, по которому осуществляем поиск: Имя, Код, 
//                   Наименование или Имя индексируемого реквизита;
//  Значение       - значение свойства, по которому ищем объект.
//
// Возвращаемое значение:
//  Найденный объект информационной базы.
//
Функция одНайтиОбъектПоСвойству(Менеджер, Свойство, Значение, 
	НайденныйОбъектПоУникальномуИдентификатору = Неопределено, 
	ОбщаяСтруктураСвойств = Неопределено, ОбщиеСвойстваПоиска = Неопределено)

	Если Свойство = "Имя" Тогда
		
		Возврат Менеджер[Значение];
		
	ИначеЕсли Свойство = "Код" Тогда
		
		Возврат Менеджер.НайтиПоКоду(Значение);
		
	ИначеЕсли Свойство = "Наименование" Тогда
		
		Возврат Менеджер.НайтиПоНаименованию(Значение, ИСТИНА);
		
	ИначеЕсли Свойство = "Номер" Тогда
		
		Возврат Менеджер.НайтиПоНомеру(Значение);
		
	ИначеЕсли Свойство = "{УникальныйИдентификатор}" Тогда
		
		Ссылка = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(Значение));
		
		Попытка
			
			НайденныйОбъектПоУникальномуИдентификатору = Ссылка.ПолучитьОбъект();
			
			Если НайденныйОбъектПоУникальномуИдентификатору = Неопределено Тогда
				
				Возврат Менеджер.ПустаяСсылка();
				
			Иначе
				
				Возврат Ссылка;
				
			КонецЕсли;
			
		Исключение
			
			Возврат Менеджер.ПустаяСсылка();
			
		КонецПопытки;
		
	ИначеЕсли Свойство = "{ИмяПредопределенногоЭлемента}" Тогда
		
		Попытка
			
			Ссылка = Менеджер[Значение];
			
		Исключение
			
			Ссылка = Менеджер.НайтиПоКоду(Значение);
			
		КонецПопытки;
		
		Возврат Ссылка;
		
	Иначе
		
		// можно найти только по реквизиту, кроме строк произвольной длины и хранилища значений
		Если Свойство = "Дата"
			ИЛИ Свойство = "Проведен"
			ИЛИ Свойство = "ПометкаУдаления"
			ИЛИ Свойство = "Владелец"
			ИЛИ Свойство = "Родитель"
			ИЛИ Свойство = "ЭтоГруппа" Тогда
			
			СсылкаНаОбъект = НайтиЭлементЗапросом(ОбщаяСтруктураСвойств, ОбщиеСвойстваПоиска, , Менеджер);
			Возврат СсылкаНаОбъект;
			
		Иначе	
			
			Возврат Менеджер.НайтиПоРеквизиту(Свойство, Значение);
			
		КонецЕсли;		
		
	КонецЕсли; 

КонецФункции // одНайтиОбъектПоСвойству() 

// Осуществляет простой поиск объекта информационной базы по указанному свойству.
//
// Параметры:
//  Стр            - Строка - значение свойства, по которому осуществляется 
//                   поиск объект;
//  Тип            - тип искомого объекта;
//  Свойство       - Строка - имя свойства, по-которому ищем объект.
//
// Возвращаемое значение:
//  Найденный объект информационной базы
//
Функция одПолучитьЗначениеПоСтроке(Стр, Тип, Свойство = "")

	Если ПустаяСтрока(Стр) Тогда
		Возврат Новый(Тип);
	КонецЕсли; 

	Свойства = Менеджеры[Тип];

	Если Свойства = Неопределено Тогда
		
		ОписаниеТипов = одОписаниеТипа(Тип);
		Возврат ОписаниеТипов.ПривестиЗначение(Стр);
		
	КонецЕсли;

	Если ПустаяСтрока(Свойство) Тогда
		
		Если Свойства.ИмяТипа = "Перечисление" Тогда
			Свойство = "Имя";
		Иначе
			Свойство = "{ИмяПредопределенногоЭлемента}";
		КонецЕсли;
		
	КонецЕсли; 

	Возврат одНайтиОбъектПоСвойству(Свойства.Менеджер, Свойство, Стр);

КонецФункции // одПолучитьЗначениеПоСтроке()

// Возвращает строковое представление типа значения 
//
// Параметры: 
//  ЗначениеИлиТип - произвольное значение или значение типа тип
//
// Возвращаемое значение:
//  Строка - строковое представление типа значения
//
Функция одТипЗначенияСтрокой(ЗначениеИлиТип)

	ТипЗначения	= ТипЗнч(ЗначениеИлиТип);
	
	Если ТипЗначения = Тип("Тип") Тогда
		ТипЗначения	= ЗначениеИлиТип;
	КонецЕсли; 
	
	Если (ТипЗначения = Неопределено) Или (ЗначениеИлиТип = Неопределено) Тогда
		Результат = "";
	ИначеЕсли ТипЗначения = одТипСтрока Тогда
		Результат = "Строка";
	ИначеЕсли ТипЗначения = одТипЧисло Тогда
		Результат = "Число";
	ИначеЕсли ТипЗначения = одТипДата Тогда
		Результат = "Дата";
	ИначеЕсли ТипЗначения = одТипБулево Тогда
		Результат = "Булево";
	ИначеЕсли ТипЗначения = одТипХранилищеЗначения Тогда
		Результат = "ХранилищеЗначения";
	Иначе
		Менеджер = Менеджеры[ТипЗначения];
		Если Менеджер = Неопределено Тогда
			Сообщить("Неизвестный тип:  " + Строка(ТипЗнч(ТипЗначения)));
		Иначе
			Результат = Менеджер.ТипСсылкиСтрокой;
		КонецЕсли; 
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции // одТипЗначенияСтрокой()

// Возвращает XML представление объекта ОписаниеТипов
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//  ОписаниеТипов  - объект ОписаниеТипов, XML представление которого требуется получить
//
// Возвращаемое значение:
//  Строка - XML представление переданного объекта ОписаниеТипов
//
Функция одПолучитьXMLПредставлениеОписанияТипов(ОписаниеТипов) Экспорт

	УзелТипов = DOM_СоздатьУзел("Типы");

	Если ТипЗнч(ОписаниеТипов) = Тип("Структура") Тогда
		DOM_УстановитьАтрибут(УзелТипов, "ДопустимыйЗнак",          СокрЛП(ОписаниеТипов.ДопустимыйЗнак));
		DOM_УстановитьАтрибут(УзелТипов, "Разрядность",             СокрЛП(ОписаниеТипов.Разрядность));
		DOM_УстановитьАтрибут(УзелТипов, "РазрядностьДробнойЧасти", СокрЛП(ОписаниеТипов.РазрядностьДробнойЧасти));
		DOM_УстановитьАтрибут(УзелТипов, "Длина",                   СокрЛП(ОписаниеТипов.Длина));
		DOM_УстановитьАтрибут(УзелТипов, "ДопустимаяДлина",         СокрЛП(ОписаниеТипов.ДопустимаяДлина));
		DOM_УстановитьАтрибут(УзелТипов, "СоставДаты",              СокрЛП(ОписаниеТипов.ЧастиДаты));
		
		Для каждого СтрТип Из ОписаниеТипов.Типы Цикл
			DOM_ДобавитьЭлемент(УзелТипов, "Тип", СокрЛП(СтрТип));
		КонецЦикла;
	Иначе
		КвЧисла       = ОписаниеТипов.КвалификаторыЧисла;
		КвСтроки      = ОписаниеТипов.КвалификаторыСтроки;
		КвДаты        = ОписаниеТипов.КвалификаторыДаты;

		DOM_УстановитьАтрибут(УзелТипов, "ДопустимыйЗнак",          СокрЛП(КвЧисла.ДопустимыйЗнак));
		DOM_УстановитьАтрибут(УзелТипов, "Разрядность",             СокрЛП(КвЧисла.Разрядность));
		DOM_УстановитьАтрибут(УзелТипов, "РазрядностьДробнойЧасти", СокрЛП(КвЧисла.РазрядностьДробнойЧасти));
		DOM_УстановитьАтрибут(УзелТипов, "Длина",                   СокрЛП(КвСтроки.Длина));
		DOM_УстановитьАтрибут(УзелТипов, "ДопустимаяДлина",         СокрЛП(КвСтроки.ДопустимаяДлина));
		DOM_УстановитьАтрибут(УзелТипов, "СоставДаты",              СокрЛП(КвДаты.ЧастиДаты));

		Для каждого Тип Из ОписаниеТипов.Типы() Цикл
			DOM_ДобавитьЭлемент(УзелТипов, "Тип", одТипЗначенияСтрокой(Тип));
		КонецЦикла;
	КонецЕсли;

	Возврат(УзелТипов.XML);
	
КонецФункции // одПолучитьXMLПредставлениеОписанияТипов() 


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ОБЪЕКТОМ DOM_XML

// Создает и возвращает узел нового xml-документа
//
// Параметры:
//  Нет.
//  
// Возвращаемое значение:
//  Узел нового xml-документа
//
Функция DOM_НовыйXMLДокумент() Экспорт

    Попытка
		XML = Новый COMОбъект("Msxml2.DOMDocument.4.0");
	Исключение
	    Попытка
			XML = Новый COMОбъект("Msxml2.DOMDocument.3.0");
		Исключение
			ЗаписатьВПротоколВыполнения(4);
			ФлагОшибки = Истина;
			Возврат Неопределено;
		КонецПопытки;
	КонецПопытки;

	Возврат XML;

КонецФункции // DOM_НовыйXMLДокумент()

// Создает новый xml-узел
//
// Параметры: 
//  Имя            - Имя узла
//
// Возвращаемое значение:
//  Объект нового xml-узла
//
Функция DOM_СоздатьУзел(Имя) Экспорт

	Возврат мXMLДокумент.createElement(Имя);

КонецФункции // DOM_СоздатьУзел()

// Добавляет новый xml-узел к указанному узлу-родителю
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры: 
//  УзелРодитель   - xml-узел-родитель
//  Имя            - имя добавляемого узла
//
// Возвращаемое значение:
//  Новый xml-узел, добавленный к указанному узлу-родителю
//
Функция DOM_ДобавитьУзел(УзелРодитель, Имя) Экспорт

	XMLDOMNode = мXMLДокумент.createElement(Имя);
	УзелРодитель.appendChild(XMLDOMNode);
	Возврат XMLDOMNode;

КонецФункции // DOM_ДобавитьУзел()

// Копирует указанный xml-узел
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры: 
//  Узел           - копируемый узел
//
// Возвращаемое значение:
//  Новый xml - копия указанного узла
//
Функция DOM_КопироватьУзел(Узел) Экспорт

	Возврат Узел.cloneNode(Истина);
	
КонецФункции // DOM_Копироватьузел() 

// Добавляет новый xml-узел к указанному узлу-родителю, устанавливает значение
//
// Параметры: 
//  УзелРодитель   - xml-узел-родитель
//  Имя            - имя добавляемого узла
//  Значение       - значение добавляемого узла
//
// Возвращаемое значение:
//  Новый xml-узел, добавленный к указанному узлу-родителю
//
Функция DOM_ДобавитьЭлемент(УзелРодитель, Имя, Значение="") Экспорт

	XMLDOMElement = мXMLДокумент.createElement(Имя);
	XMLDOMElement.text = Значение;
	УзелРодитель.appendChild(XMLDOMElement);
	Возврат XMLDOMElement;

КонецФункции // DOM_ДобавитьЭлемент()

// Подчиняет xml-узел указанному узлу-родителю
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры: 
//  УзелРодитель   - xml-узел-родитель
//  Узел           - подчиняемый узел 
//
Процедура DOM_ДобавитьПодчиненный(УзелРодитель, Узел) Экспорт

	УзелРодитель.appendChild(Узел);
	
КонецПроцедуры // DOM_ДобавитьПодчиненный() 

// Устанавливает атрибут указанного xml-узла
//
// Параметры: 
//  Узел           - xml-узел
//  Имя            - имя атрибута
//  Значение       - устанавливаемое значение
//
Процедура DOM_УстановитьАтрибут(Узел, Имя, Значение) Экспорт

	Узел.setAttribute(Имя, XMLСтрока(Значение));
	
КонецПроцедуры // DOM_УстановитьАтрибут()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ОБЪЕКТОМ XMLЗапись

Процедура ВыполнитьПроверкуНеДопустимыхСимволовВСтроке(Стр)
	
	Если ПустаяСтрока(Стр) Тогда
		Возврат;
	КонецЕсли;
		
	ПозицияНедопустимогоСимвола = НайтиНедопустимыеСимволыXML(Стр);	
		
	Если ПозицияНедопустимогоСимвола > 0 Тогда
		
		СтруктураОшибки = Новый Структура("ОписаниеОшибки,Объект");
		СтруктураОшибки.ОписаниеОшибки = "Найдены недопустимые символы";
		
		ЗаписатьВПротоколВыполнения("", СтруктураОшибки);
		НоваяСтрока = "";
		Пока ПозицияНедопустимогоСимвола > 0 Цикл
			НоваяСтрока = НоваяСтрока + Лев(Стр, ПозицияНедопустимогоСимвола - 1);
			Стр = Сред(Стр, ПозицияНедопустимогоСимвола + 1);
			ПозицияНедопустимогоСимвола = НайтиНедопустимыеСимволыXML(Стр);	
		КонецЦикла;
		Стр = НоваяСтрока + Стр;
		
	КонецЕсли;
	
КонецПроцедуры

// Создает новый xml-узел
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
//
// Параметры: 
//  Имя            - Имя узла
//
// Возвращаемое значение:
//  Объект нового xml-узла
//
Функция СоздатьУзел(Имя) Экспорт 

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ЗаписьXML.ЗаписатьНачалоЭлемента(Имя);

	Возврат ЗаписьXML;

КонецФункции // СоздатьУзел()

// Добавляет новый xml-узел к указанному узлу-родителю
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры: 
//  УзелРодитель   - xml-узел-родитель
//  Имя            - имя добавляемого узла
//
// Возвращаемое значение:
//  Новый xml-узел, добавленный к указанному узлу-родителю
//
Функция ДобавитьУзел(УзелРодитель, Имя) Экспорт

	УзелРодитель.ЗаписатьНачалоЭлемента(Имя);

	Возврат УзелРодитель;

КонецФункции // ДобавитьУзел()

// Копирует указанный xml-узел
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры: 
//  Узел           - копируемый узел
//
// Возвращаемое значение:
//  Новый xml - копия указанного узла
//
Функция КопироватьУзел(Узел) Экспорт

	Стр = Узел.Закрыть();

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	Если ВестиДополнительныйКонтрольЗаписиВXML Тогда
		
		ВыполнитьПроверкуНеДопустимыхСимволовВСтроке(Стр);	
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьБезОбработки(Стр);

	Возврат ЗаписьXML;
	
КонецФункции // Копироватьузел() 

// Осуществляет запись элемента и его значения в указанный объект
//
// Параметры:
//  Объект         - объект типа XMLЗапись
//  Имя            - Строка. Имя элемента
//  Значение       - Значение элемента
// 
Процедура одЗаписатьЭлемент(Объект, Имя, Значение="") Экспорт

	Объект.ЗаписатьНачалоЭлемента(Имя);
	Стр = XMLСтрока(Значение);
	
	Если ВестиДополнительныйКонтрольЗаписиВXML Тогда
		
		ВыполнитьПроверкуНеДопустимыхСимволовВСтроке(Стр);	
		
	КонецЕсли;
	
	Объект.ЗаписатьТекст(Стр);
	Объект.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // одЗаписатьЭлемент() 

// Подчиняет xml-узел указанному узлу-родителю
//
// Параметры: 
//  УзелРодитель   - xml-узел-родитель
//  Узел           - подчиняемый узел 
//
Процедура ДобавитьПодчиненный(УзелРодитель, Узел) Экспорт

	Если ТипЗнч(Узел) <> одТипСтрока Тогда
		Узел.ЗаписатьКонецЭлемента();
		ИнформацияДляЗаписиВФайл = Узел.Закрыть();
	Иначе
		ИнформацияДляЗаписиВФайл = Узел;
	КонецЕсли;
	
	УзелРодитель.ЗаписатьБезОбработки(ИнформацияДляЗаписиВФайл);
		
КонецПроцедуры // ДобавитьПодчиненный() 

// Устанавливает атрибут указанного xml-узла
//
// Параметры: 
//  Узел           - xml-узел
//  Имя            - имя атрибута
//  Значение       - устанавливаемое значение
//
Процедура УстановитьАтрибут(Узел, Имя, Значение) Экспорт

	СтрокаЗаписи = XMLСтрока(Значение);
	
	Если ВестиДополнительныйКонтрольЗаписиВXML Тогда
		
		ВыполнитьПроверкуНеДопустимыхСимволовВСтроке(СтрокаЗаписи);	
		
	КонецЕсли;	
	
	Узел.ЗаписатьАтрибут(Имя, СтрокаЗаписи);
	
КонецПроцедуры // УстановитьАтрибут()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ОБЪЕКТОМ XMLЧтение

// Читает значение атрибута по имени из указанного объекта, приводит значение
// к указанному примитивному типу
//
// Параметры:
//  Объект      - объект типа XMLЧтение, спозиционированный на начале элемента,
//                атрибут которого требуется получить
//  Тип         - Значение типа Тип. Тип атрибута
//  Имя         - Строка. Имя атрибута
//
// Возвращаемое значение:
//  Значение атрибута полученное по имени и приведенное к указанному типу
// 
Функция одАтрибут(Объект, Тип, Имя)

	СтрЗначение = СокрП(Объект.ПолучитьАтрибут(Имя));
	Если Не ПустаяСтрока(СтрЗначение) Тогда
		Возврат XMLЗначение(Тип, СтрЗначение);
	Иначе
		Если      Тип = одТипСтрока Тогда
			Возврат ""; 
		ИначеЕсли Тип = одТипБулево Тогда
			Возврат Ложь;
		ИначеЕсли Тип = одТипЧисло Тогда
			Возврат 0;
		ИначеЕсли Тип = одТипДата Тогда
			Возврат Дата("01.01.0001 00:00:00");
		КонецЕсли; 
	КонецЕсли; 
	
КонецФункции // одАтрибут() 
 
// Пропускает узлы xml до конца указанного элемента (по умолчанию текущего)
//
// Параметры:
//  Объект   - объект типа XMLЧтение
//  Имя      - имя узла, до конца которого пропускаем элементы
// 
Процедура одПропустить(Объект, Имя="")

	КолвоВложений = 0; // количество одноименных вложений

	Если Имя = "" Тогда
		
		Имя = Объект.ЛокальноеИмя;
		
	КонецЕсли; 
	
	Пока Объект.Прочитать() Цикл
		
		Если Объект.ЛокальноеИмя <> Имя Тогда
			Продолжить;
		КонецЕсли;
		
		ТипУзла = Объект.ТипУзла;
			
		Если ТипУзла = одТипУзлаXML_КонецЭлемента Тогда
				
			Если КолвоВложений = 0 Тогда
					
				Прервать;
					
			Иначе
					
				КолвоВложений = КолвоВложений - 1;
					
			КонецЕсли;
				
		ИначеЕсли ТипУзла = одТипУзлаXML_НачалоЭлемента Тогда
				
			КолвоВложений = КолвоВложений + 1;
				
		КонецЕсли;
					
	КонецЦикла;
	
КонецПроцедуры // одПропустить() 

// Читает текст элемента и приводит значение к указанному типу
//
// Параметры:
//  Объект           - объект типа XMLЧтение, из которого осуществлется чтение
//  Тип              - тип получаемого значения
//  ИскатьПоСвойству - для ссылочных типов может быть указано свойство, по которому
//                     следует искать объект: "Код", "Наименование", <ИмяРеквизита>, "Имя" (предопределенного значения)
//
// Возвращаемое значение:
//  Значение xml-элемента, приведенное к соответствующему типу
//
Функция одЗначениеЭлемента(Объект, Тип, ИскатьПоСвойству="")

	Значение = "";
	Имя      = Объект.ЛокальноеИмя;

	Пока Объект.Прочитать() Цикл
		
		ТипУзла = Объект.ТипУзла;
		
		Если ТипУзла = одТипУзлаXML_Текст Тогда
			
			Значение = СокрП(Объект.Значение);
			
		ИначеЕсли (Объект.ЛокальноеИмя = Имя) И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			
			Прервать;
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЦикла;

	
	Если (Тип = одТипСтрока) ИЛИ (Тип = одТипБулево) ИЛИ (Тип = одТипЧисло) ИЛИ (Тип = одТипДата) 
		ИЛИ (Тип = одТипХранилищеЗначения) ИЛИ (Тип = одТипВидДвиженияНакопления) 
		ИЛИ (Тип = одТипВидСчета) Тогда
		
		Возврат XMLЗначение(Тип, Значение);
		
	Иначе
		
		Возврат одПолучитьЗначениеПоСтроке(Значение, Тип, ИскатьПоСвойству);
		
	КонецЕсли; 
	
КонецФункции // одЗначениеЭлемента() 


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФАЙЛОМ ОБМЕНА

// Сохраняет в файл указанный xml-узел
//
// Параметры:
//  Узел           - xml-узел, сохранямый в файл
//
Процедура ЗаписатьВФайл(Узел)

	Если ТипЗнч(Узел) <> одТипСтрока Тогда
		ИнформацияДляЗаписиВФайл = Узел.Закрыть();
	Иначе
		ИнформацияДляЗаписиВФайл = Узел;
	КонецЕсли;
	
	Если НепосредственноеЧтениеВИБПриемнике Тогда
		
		СтрокаОшибкиВБазеПриемнике = "";
		ПередатьИнформациюОЗаписиВПриемник(ИнформацияДляЗаписиВФайл, СтрокаОшибкиВБазеПриемнике);
		Если Не ПустаяСтрока(СтрокаОшибкиВБазеПриемнике) Тогда
			
			ВызватьИсключение СтрокаОшибкиВБазеПриемнике;
			
		КонецЕсли;
		
	Иначе
		
		ФайлОбмена.ЗаписатьСтроку(ИнформацияДляЗаписиВФайл);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьВФайл()

// Открывает файл обмена, записывает заголовок файла в соответвтии с форматом обмена
//
// Параметры:
//  Нет.
//
Функция ОткрытьФайлВыгрузки()

	// Архивные файлы будем идентифицировать по расширению ".aml"
	
	Если АрхивироватьФайл Тогда
		ИмяФайлаОбмена = СтрЗаменить(ИмяФайлаОбмена, ".xml", ".aml");
	КонецЕсли;
    	
	ФайлОбмена = Новый ЗаписьТекста;
	Попытка
		
		Если НепосредственноеЧтениеВИБПриемнике Тогда
			ФайлОбмена.Открыть(ПолучитьИмяВременногоФайла(".xml"), КодировкаТекста.UTF8);
		Иначе
			ФайлОбмена.Открыть(ИмяФайлаОбмена, КодировкаТекста.UTF8);
		КонецЕсли;
				
	Исключение
		
		ЗаписатьВПротоколВыполнения(8);
		Возврат "";
		
	КонецПопытки; 
	
	СтрокаИнформацииОXML = "<?xml version=""1.0"" encoding=""UTF-8""?>";
	
	ФайлОбмена.ЗаписатьСтроку(СтрокаИнформацииОXML);

	ВременныйЗаписьXML = Новый ЗаписьXML();
	
	ВременныйЗаписьXML.УстановитьСтроку();
	
	ВременныйЗаписьXML.ЗаписатьНачалоЭлемента("ФайлОбмена");
							
	УстановитьАтрибут(ВременныйЗаписьXML, "ВерсияФормата", "2.0");
	УстановитьАтрибут(ВременныйЗаписьXML, "ДатаВыгрузки",				ТекущаяДата());
	УстановитьАтрибут(ВременныйЗаписьXML, "НачалоПериодаВыгрузки",		ДатаНачала);
	УстановитьАтрибут(ВременныйЗаписьXML, "ОкончаниеПериодаВыгрузки",	ДатаОкончания);
	УстановитьАтрибут(ВременныйЗаписьXML, "ИмяКонфигурацииИсточника",	Конвертация.Источник);
	УстановитьАтрибут(ВременныйЗаписьXML, "ИмяКонфигурацииПриемника",	Конвертация.Приемник);
	УстановитьАтрибут(ВременныйЗаписьXML, "ИдПравилКонвертации",		Конвертация.Ид);
	УстановитьАтрибут(ВременныйЗаписьXML, "Комментарий",				Комментарий);
	
	ВременныйЗаписьXML.ЗаписатьКонецЭлемента();
	
	Стр = ВременныйЗаписьXML.Закрыть(); 
	
	Стр = СтрЗаменить(Стр, "/>", ">");
	
	ФайлОбмена.ЗаписатьСтроку(Стр);
	
	Возврат СтрокаИнформацииОXML + Символы.ПС + Стр;
			
КонецФункции

// Закрывает файл обмена
//
// Параметры:
//  Нет.
//
Процедура ЗакрытьФайл()

    ФайлОбмена.ЗаписатьСтроку("</ФайлОбмена>");
	ФайлОбмена.Закрыть();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПРОТОКОЛОМ ОБМЕНА

// Возвращает объект типа структура, содержащий все возможные поля
// записи протокола выполнения (сообщения об ошибкахи и т.п.)
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Объект типа структура
// 
Функция ПолучитьСтруктуруЗаписиПротокола(КодСообщения = "", СтрокаОшибки = "") Экспорт

	СтруктураОшибки = Новый Структура("ИмяПКО,ИмяПОД,Нпп,Источник,ТипОбъекта,Свойство,Значение,ТипЗначения,ПКО,ПКС,ПКГС,ПВД,ПОД,Объект,СвойствоПриемника,КонвертируемоеЗначение,Обработчик,ОписаниеОшибки,ПозицияМодуля,Текст,КодСообщения,УзелПланаОбмена");
	
	СтрокаМодуля              = ОтделитьРазделителем(СтрокаОшибки, "{");
	ОписаниеОшибки            = ОтделитьРазделителем(СтрокаМодуля, "}: ");
	
	Если ОписаниеОшибки <> "" Тогда
		
		СтруктураОшибки.ОписаниеОшибки         = ОписаниеОшибки;
		СтруктураОшибки.ПозицияМодуля          = СтрокаМодуля;
				
	КонецЕсли;
	
	Если СтруктураОшибки.КодСообщения <> "" Тогда
		
		СтруктураОшибки.КодСообщения           = КодСообщения;
		
	КонецЕсли;
	
	Возврат СтруктураОшибки;
	
КонецФункции 

Процедура ИнициализироватьВедениеПротоколаОбмена()
//	ИмяФайлаПротоколаОбмена = "протокол.txt";
	
	ДописыватьДанныеВПротоколОбмена=Истина;
	ВыводВПротоколИнформационныхСообщений = Истина;
	
	Если ПустаяСтрока(ИмяФайлаПротоколаОбмена) Тогда
		
		мФайлПротоколаДанных = Неопределено;
		ФлагКомментироватьОбработкуОбъектов = ВыводВОкноСообщенийИнформационныхСообщений;		
		Возврат;
		
	Иначе	
		
		ФлагКомментироватьОбработкуОбъектов = ВыводВПротоколИнформационныхСообщений ИЛИ ВыводВОкноСообщенийИнформационныхСообщений;		
		
	КонецЕсли;
	
	мФайлПротоколаДанных = Новый ЗаписьТекста(ИмяФайлаПротоколаОбмена, КодировкаТекста.ANSI, , ДописыватьДанныеВПротоколОбмена) ;
	
КонецПроцедуры

Процедура ЗавершитьВедениеПротоколаОбмена()
	
	Если мФайлПротоколаДанных <> Неопределено Тогда
		
		мФайлПротоколаДанных.Закрыть();
				
	КонецЕсли;	
	
	мФайлПротоколаДанных = Неопределено;
	
КонецПроцедуры

// Сохраняет в протокол выполнения (или выводит на экран) сообщения указанной структуры
//
// Параметры:
//  Код               - Число. Код сообщения
//  СтруктураЗаписи   - Структура. Структура записи протокола
//  ВзвестиФлагОшибок - Если истина, то - это сообщение об ошибке. Взводится ФлагОшибки
// 
Процедура ЗаписатьВПротоколВыполнения(Код="", СтруктураЗаписи=Неопределено, ВзвестиФлагОшибок=Истина, 
	Уровень=0, Выравнивание=22, БезусловнаяЗаписьВПротоколОбмена = Ложь, ИтоговаяСтрокаДляЗаписи = "") Экспорт

	Отступ = "";
    Для Сч = 0 По Уровень-1 Цикл
		Отступ = Отступ + Символы.Таб;
	КонецЦикла; 
	
	Если ТипЗнч(Код) = одТипЧисло Тогда
		
		Если одСообщения = Неопределено Тогда
			ИнициализацияСообщений();
		КонецЕсли;
		
		Стр = одСообщения[Код];
		
	Иначе
		
		Стр = Строка(Код);
		
	КонецЕсли;

	Стр = Отступ + Стр;
	
	Если СтруктураЗаписи <> Неопределено Тогда
		
		Для каждого Поле Из СтруктураЗаписи Цикл
			
			Значение = Поле.Значение;
			Если Значение = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			Ключ = Поле.Ключ;
			Стр  = Стр + Символы.ПС + Отступ + Символы.Таб + одДополнитьСтроку(Поле.Ключ, Выравнивание) + " =  " + Строка(Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИтоговаяСтрокаДляЗаписи = Символы.ПС + Стр;

	
	Если ВзвестиФлагОшибок Тогда
		
		ФлагОшибки = Истина;
		Сообщить(ИтоговаяСтрокаДляЗаписи, СтатусСообщения.ОченьВажное);
		
	Иначе
		
		Если БезусловнаяЗаписьВПротоколОбмена ИЛИ ВыводВОкноСообщенийИнформационныхСообщений Тогда
			
			Сообщить(ИтоговаяСтрокаДляЗаписи, СтатусСообщения.Информация);
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если мФайлПротоколаДанных <> Неопределено Тогда
		
		Если ВзвестиФлагОшибок Тогда
			
			мФайлПротоколаДанных.ЗаписатьСтроку(Символы.ПС + "Ошибка!!!");
			
		КонецЕсли;
		
		Если ВзвестиФлагОшибок ИЛИ БезусловнаяЗаписьВПротоколОбмена ИЛИ ВыводВПротоколИнформационныхСообщений Тогда
			
			мФайлПротоколаДанных.ЗаписатьСтроку(ИтоговаяСтрокаДляЗаписи);
		
		КонецЕсли;
		
		
	КонецЕсли;	
		
КонецПроцедуры // ЗаписатьВПротоколВыполнения()

Процедура ЗаписатьИнформациюОбОшибкеВПротокол(КодСообщения, СтрокаОшибки, Объект, ТипОбъекта = Неопределено) Экспорт
	
	ЗП         = ПолучитьСтруктуруЗаписиПротокола(КодСообщения, СтрокаОшибки);
	ЗП.Объект  = Объект;
	
	Если ТипОбъекта <> Неопределено Тогда
		ЗП.ТипОбъекта     = ТипОбъекта;
	КонецЕсли;	
		
	ЗаписатьВПротоколВыполнения(КодСообщения, ЗП);	
	
КонецПроцедуры

Процедура ЗаписатьИнформациюОбОшибкеОбработчикаОчисткиДанных(КодСообщения, СтрокаОшибки, ИмяПравилаОчисткиДанных, Объект = "", ИмяОбработчика = "") Экспорт
	
	ЗП                        = ПолучитьСтруктуруЗаписиПротокола(КодСообщения, СтрокаОшибки);
	ЗП.ПОД                    = ИмяПравилаОчисткиДанных;
	
	Если Объект <> "" Тогда
		ЗП.Объект                 = Строка(Объект) + "  (" + ТипЗнч(Объект) + ")";
	КонецЕсли;
	
	Если ИмяОбработчика <> "" Тогда
		ЗП.Обработчик             = ИмяОбработчика;
	КонецЕсли;
	
	ЗаписатьВПротоколВыполнения(КодСообщения, ЗП);	
	
КонецПроцедуры

Процедура ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(КодСообщения, СтрокаОшибки, ИмяПравила, Источник = "", 
	ТипОбъекта, Объект = Неопределено, ИмяОбработчика) Экспорт
	
	ЗП                        = ПолучитьСтруктуруЗаписиПротокола(КодСообщения, СтрокаОшибки);
	ЗП.ИмяПКО                 = ИмяПравила;
	ЗП.ТипОбъекта             = ТипОбъекта;
	ЗП.Обработчик             = ИмяОбработчика;
						
	Если Не ПустаяСтрока(Источник) Тогда
							
		ЗП.Источник           = Источник;
							
	КонецЕсли;
						
	Если Объект <> Неопределено Тогда
	
		ЗП.Объект                 = Строка(Объект);
		
	КонецЕсли;
	
	ЗаписатьВПротоколВыполнения(КодСообщения, ЗП);
		
КонецПроцедуры

Процедура ЗаписатьИнформациюОбОшибкеВыгрузкиОбработчикаПКО(КодСообщения, СтрокаОшибки, ПКО, Источник = "", ИмяОбработчика) Экспорт
	
	ЗП                        = ПолучитьСтруктуруЗаписиПротокола(КодСообщения, СтрокаОшибки);
	ЗП.ПКО                    = ПКО.Имя + "  (" + ПКО.Наименование + ")";
	ЗП.Объект                 = Строка(Источник) + "  (" + ТипЗнч(Источник) + ")";
	ЗП.Обработчик             = ИмяОбработчика;
	
	ЗаписатьВПротоколВыполнения(КодСообщения, ЗП);
		
КонецПроцедуры

Процедура ЗаписатьИнформациюОбОшибкеОбработчикиПКС(КодСообщения, СтрокаОшибки, ПКО, ПКС, Источник = "", 
	ИмяОбработчика = "", Значение = Неопределено) Экспорт
	
	ЗП                        = ПолучитьСтруктуруЗаписиПротокола(КодСообщения, СтрокаОшибки);
	ЗП.ПКО                    = ПКО.Имя + "  (" + ПКО.Наименование + ")";
	ЗП.ПКС                    = ПКС.Имя + "  (" + ПКС.Наименование + ")";
	ЗП.Объект                 = Строка(Источник) + "  (" + ТипЗнч(Источник) + ")";
	ЗП.СвойствоПриемника      = ПКС.Приемник + "  (" + ПКС.ТипПриемника + ")";
	
	Если ИмяОбработчика <> "" Тогда
		ЗП.Обработчик         = ИмяОбработчика;
	КонецЕсли;
	
	Если Значение <> Неопределено Тогда
		ЗП.КонвертируемоеЗначение = Строка(Значение) + "  (" + ТипЗнч(Значение) + ")";
	КонецЕсли;
	
	ЗаписатьВПротоколВыполнения(КодСообщения, ЗП);
		
КонецПроцедуры	

Процедура ЗаписатьИнформациюОбОшибкеОбработчикиПВД(КодСообщения, СтрокаОшибки, ИмяПравила, Объект = Неопределено, ИмяОбработчика) Экспорт
	
	ЗП                        = ПолучитьСтруктуруЗаписиПротокола(КодСообщения, СтрокаОшибки);
	ЗП.ПВД                    = ИмяПравила;
	
	Если Объект <> Неопределено Тогда
		ЗП.Объект                 = Строка(Объект) + "  (" + ТипЗнч(Объект) + ")";
	КонецЕсли;
	
	ЗП.Обработчик             = ИмяОбработчика;
	
	ЗаписатьВПротоколВыполнения(КодСообщения, ЗП);
	
КонецПроцедуры

Процедура ЗаписатьИнформациюОбОшибкеОбработчикиКонвертации(КодСообщения, СтрокаОшибки, ИмяОбработчика) Экспорт
	
	ЗП                        = ПолучитьСтруктуруЗаписиПротокола(КодСообщения, СтрокаОшибки);
	ЗП.Обработчик             = ИмяОбработчика;
	ЗаписатьВПротоколВыполнения(КодСообщения, ЗП);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАГРУЗКИ ПРАВИЛ ОБМЕНА

// Осуществляет загрузку правила конвертации группы свойств
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ТаблицаСвойств - таблица значений, содержащая ПКС
// 
Процедура ЗагрузитьПКГС(ПравилаОбмена, ТаблицаСвойств)

	Если одАтрибут(ПравилаОбмена, одТипБулево, "Отключить") Тогда
		одПропустить(ПравилаОбмена);
		Возврат;
	КонецЕсли;

	
	НоваяСтрока               = ТаблицаСвойств.Добавить();
	НоваяСтрока.ЭтоГруппа     = Истина;
	НоваяСтрока.ПравилаГруппы = мТаблицаПравилКонвертацииСвойств.Скопировать();

	
	// Значения по умолчанию

	НоваяСтрока.НеЗамещать               = Ложь;
	НоваяСтрока.ПолучитьИзВходящихДанных = Ложь;
	
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если      ИмяУзла = "Источник" Тогда
			НоваяСтрока.Источник		= одАтрибут(ПравилаОбмена, одТипСтрока, "Имя");
			НоваяСтрока.ВидИсточника	= одАтрибут(ПравилаОбмена, одТипСтрока, "Вид");
			НоваяСтрока.ТипИсточника	= одАтрибут(ПравилаОбмена, одТипСтрока, "Тип");
			одПропустить(ПравилаОбмена);
			
		ИначеЕсли ИмяУзла = "Приемник" Тогда
			НоваяСтрока.Приемник		= одАтрибут(ПравилаОбмена, одТипСтрока, "Имя");
			НоваяСтрока.ВидПриемника	= одАтрибут(ПравилаОбмена, одТипСтрока, "Вид");
			НоваяСтрока.ТипПриемника	= одАтрибут(ПравилаОбмена, одТипСтрока, "Тип");
			одПропустить(ПравилаОбмена);
			
		ИначеЕсли ИмяУзла = "Свойство" Тогда
			ЗагрузитьПКС(ПравилаОбмена, НоваяСтрока.ПравилаГруппы);

		ИначеЕсли ИмяУзла = "ПередОбработкойВыгрузки" Тогда
			НоваяСтрока.ПередОбработкойВыгрузки	= одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.ЕстьОбработчикПередОбработкойВыгрузки = Не ПустаяСтрока(НоваяСтрока.ПередОбработкойВыгрузки);
			
		ИначеЕсли ИмяУзла = "ПослеОбработкиВыгрузки" Тогда
			НоваяСтрока.ПослеОбработкиВыгрузки	= одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.ЕстьОбработчикПослеОбработкиВыгрузки = Не ПустаяСтрока(НоваяСтрока.ПослеОбработкиВыгрузки);
			
		ИначеЕсли ИмяУзла = "Код" Тогда
			НоваяСтрока.Имя = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "Наименование" Тогда
			НоваяСтрока.Наименование = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "Порядок" Тогда
			НоваяСтрока.Порядок = одЗначениеЭлемента(ПравилаОбмена, одТипЧисло);
			
		ИначеЕсли ИмяУзла = "НеЗамещать" Тогда
			НоваяСтрока.НеЗамещать = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
			
		ИначеЕсли ИмяУзла = "КодПравилаКонвертации" Тогда
			НоваяСтрока.ПравилоКонвертации = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "ПередВыгрузкой" Тогда
			НоваяСтрока.ПередВыгрузкой = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.ЕстьОбработчикПередВыгрузкой = Не ПустаяСтрока(НоваяСтрока.ПередВыгрузкой);
			
		ИначеЕсли ИмяУзла = "ПриВыгрузке" Тогда
			НоваяСтрока.ПриВыгрузке = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.ЕстьОбработчикПриВыгрузке    = Не ПустаяСтрока(НоваяСтрока.ПриВыгрузке);
			
		ИначеЕсли ИмяУзла = "ПослеВыгрузки" Тогда
			НоваяСтрока.ПослеВыгрузки = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
	        НоваяСтрока.ЕстьОбработчикПослеВыгрузки  = Не ПустаяСтрока(НоваяСтрока.ПослеВыгрузки);
			
		ИначеЕсли ИмяУзла = "ПолучитьИзВходящихДанных" Тогда
			НоваяСтрока.ПолучитьИзВходящихДанных = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
				
		ИначеЕсли (ИмяУзла = "Группа") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ЗагрузитьПКГС() 

// Осуществляет загрузку правила конвертации свойств
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ТаблицаСвойств - таблица значений, содержащая ПКС
//  ТаблицаПоиска  - таблица значений, содержащая ПКС (синхронизирующих)
// 
Процедура ЗагрузитьПКС(ПравилаОбмена, ТаблицаСвойств, ТаблицаПоиска="")

	Если одАтрибут(ПравилаОбмена, одТипБулево, "Отключить") Тогда
		одПропустить(ПравилаОбмена);
		Возврат;
	КонецЕсли;

	
	Если одАтрибут(ПравилаОбмена, одТипБулево, "Поиск") Тогда
		НоваяСтрока = ТаблицаПоиска.Добавить();
	Иначе
		НоваяСтрока = ТаблицаСвойств.Добавить();
	КонецЕсли; 

	
	// Значения по умолчанию

	НоваяСтрока.НеЗамещать               = Ложь;
	НоваяСтрока.ПолучитьИзВходящихДанных = Ложь;
	
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если ИмяУзла = "Источник" Тогда
			НоваяСтрока.Источник		= одАтрибут(ПравилаОбмена, одТипСтрока, "Имя");
			НоваяСтрока.ВидИсточника	= одАтрибут(ПравилаОбмена, одТипСтрока, "Вид");
			НоваяСтрока.ТипИсточника	= одАтрибут(ПравилаОбмена, одТипСтрока, "Тип");
			одПропустить(ПравилаОбмена);
			
		ИначеЕсли ИмяУзла = "Приемник" Тогда
			НоваяСтрока.Приемник		= одАтрибут(ПравилаОбмена, одТипСтрока, "Имя");
			НоваяСтрока.ВидПриемника	= одАтрибут(ПравилаОбмена, одТипСтрока, "Вид");
			НоваяСтрока.ТипПриемника	= одАтрибут(ПравилаОбмена, одТипСтрока, "Тип");
			одПропустить(ПравилаОбмена);
			
		ИначеЕсли ИмяУзла = "Код" Тогда
			НоваяСтрока.Имя = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "Наименование" Тогда
			НоваяСтрока.Наименование = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "Порядок" Тогда
			НоваяСтрока.Порядок = одЗначениеЭлемента(ПравилаОбмена, одТипЧисло);
			
		ИначеЕсли ИмяУзла = "НеЗамещать" Тогда
			НоваяСтрока.НеЗамещать = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
			
		ИначеЕсли ИмяУзла = "КодПравилаКонвертации" Тогда
			НоваяСтрока.ПравилоКонвертации = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "ПередВыгрузкой" Тогда
			НоваяСтрока.ПередВыгрузкой = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.ЕстьОбработчикПередВыгрузкой = Не ПустаяСтрока(НоваяСтрока.ПередВыгрузкой);
			
		ИначеЕсли ИмяУзла = "ПриВыгрузке" Тогда
			НоваяСтрока.ПриВыгрузке = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.ЕстьОбработчикПриВыгрузке    = Не ПустаяСтрока(НоваяСтрока.ПриВыгрузке);
			
		ИначеЕсли ИмяУзла = "ПослеВыгрузки" Тогда
			НоваяСтрока.ПослеВыгрузки = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
	        НоваяСтрока.ЕстьОбработчикПослеВыгрузки  = Не ПустаяСтрока(НоваяСтрока.ПослеВыгрузки);
			
		ИначеЕсли ИмяУзла = "ПолучитьИзВходящихДанных" Тогда
			НоваяСтрока.ПолучитьИзВходящихДанных = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
			
		//ОЛ 30.01.2015
		ИначеЕсли ИмяУзла = "ИмяПараметраДляПередачи" Тогда
			НоваяСтрока.ИмяПараметраДляПередачи = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		//конец ОЛ
			
		ИначеЕсли (ИмяУзла = "Свойство") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьПКС() 

// Осуществляет загрузку правил конвертации свойств
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ТаблицаСвойств - таблица значений, содержащая ПКС
//  ТаблицаПоиска  - таблица значений, содержащая ПКС (синхронизирующих)
// 
Процедура ЗагрузитьСвойства(ПравилаОбмена, ТаблицаСвойств, ТаблицаПоиска)

	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если      ИмяУзла = "Свойство" Тогда
			ЗагрузитьПКС(ПравилаОбмена, ТаблицаСвойств, ТаблицаПоиска);
		ИначеЕсли ИмяУзла = "Группа" Тогда
			ЗагрузитьПКГС(ПравилаОбмена, ТаблицаСвойств);
		ИначеЕсли (ИмяУзла = "Свойства") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	ТаблицаСвойств.Сортировать("Порядок");
	ТаблицаПоиска.Сортировать("Порядок");
	
КонецПроцедуры // ЗагрузитьСвойства()

// Осуществляет загрузку правила конвертации значений
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  Значения       - соответствие значений объекта источника - строковым
//                   представлениям объекта приемника
//  ТипИсточника   - значение типа Тип - тип объекта источника
// 
Процедура ЗагрузитьПКЗ(ПравилаОбмена, Значения, ТипИсточника)

	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если      ИмяУзла = "Источник" Тогда
			Источник = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		ИначеЕсли ИмяУзла = "Приемник" Тогда
			Приемник = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		ИначеЕсли (ИмяУзла = "Значение") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	Значения[одПолучитьЗначениеПоСтроке(Источник, ТипИсточника)] = Приемник;
	
КонецПроцедуры // ЗагрузитьПКЗ()

// Осуществляет загрузку правил конвертации значений
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  Значения       - соответствие значений объекта источника - строковым
//                   представлениям объекта приемника
//  ТипИсточника   - значение типа Тип - тип объекта источника
// 
Процедура ЗагрузитьЗначения(ПравилаОбмена, Значения, ТипИсточника);

	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если      ИмяУзла = "Значение" Тогда
			ЗагрузитьПКЗ(ПравилаОбмена, Значения, ТипИсточника);
		ИначеЕсли (ИмяУзла = "Значения") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Осуществляет загрузку правила конвертации объектов
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ЗаписьXML      - Объект типа XMLЗапись - правила, сохраняемые в файл обмена и
//                   используемые при загрузке данных
// 
Процедура ЗагрузитьПравилоКонвертации(ПравилаОбмена, ЗаписьXML)

	ЗаписьXML.ЗаписатьНачалоЭлемента("Правило");

	НоваяСтрока = ТаблицаПравилКонвертации.Добавить();

	
	// Значения по умолчанию
	
	НоваяСтрока.ЗапоминатьВыгруженные = Истина;
	НоваяСтрока.НеЗамещать            = Ложь;
	
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
				
		Если      ИмяУзла = "Код" Тогда
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
			НоваяСтрока.Имя = Значение;
			
		ИначеЕсли ИмяУзла = "Наименование" Тогда
			
			НоваяСтрока.Наименование = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			#Если Клиент Тогда
			Состояние("Правило конвертации объектов: " + НоваяСтрока.Наименование);
			#КонецЕсли
			
		ИначеЕсли ИмяУзла = "СинхронизироватьПоИдентификатору" Тогда
			
			НоваяСтрока.СинхронизироватьПоИдентификатору = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, НоваяСтрока.СинхронизироватьПоИдентификатору);
			
		ИначеЕсли ИмяУзла = "НеСоздаватьЕслиНеНайден" Тогда
			
			НоваяСтрока.НеСоздаватьЕслиНеНайден = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
			
		ИначеЕсли ИмяУзла = "НеВыгружатьОбъектыСвойствПоСсылкам" Тогда
			
			НоваяСтрока.НеВыгружатьОбъектыСвойствПоСсылкам = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
						
		ИначеЕсли ИмяУзла = "ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли" Тогда
			
			НоваяСтрока.ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);	
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, НоваяСтрока.ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли);
			
		ИначеЕсли ИмяУзла = "НеЗапоминатьВыгруженные" Тогда
			
			НоваяСтрока.ЗапоминатьВыгруженные = Не одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
			
		ИначеЕсли ИмяУзла = "НеЗамещать" Тогда
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
			НоваяСтрока.НеЗамещать = Значение;
			
		ИначеЕсли ИмяУзла = "Приемник" Тогда
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
			НоваяСтрока.Приемник = Значение;
			
		ИначеЕсли ИмяУзла = "Источник" Тогда
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
			
			Если РежимОбмена = "Загрузка" Тогда
				
				НоваяСтрока.Источник	= Значение;
				
			Иначе
				
				Если Не ПустаяСтрока(Значение) Тогда
					
					НоваяСтрока.Источник	= Тип(Значение);
					
					Попытка
						
						Менеджеры[НоваяСтрока.Источник].ПКО = НоваяСтрока;
						
					Исключение
						
						ЗаписатьИнформациюОбОшибкеВПротокол(11, ОписаниеОшибки(), Строка(НоваяСтрока.Источник));
						
					КонецПопытки; 
					
				КонецЕсли;
				
			КонецЕсли;


		// Свойства
		
		ИначеЕсли ИмяУзла = "Свойства" Тогда
		
			НоваяСтрока.СвойстваПоиска	= мТаблицаПравилКонвертацииСвойств.Скопировать();
			НоваяСтрока.Свойства		= мТаблицаПравилКонвертацииСвойств.Скопировать();
			
			
			Если НоваяСтрока.СинхронизироватьПоИдентификатору <> Неопределено И НоваяСтрока.СинхронизироватьПоИдентификатору Тогда
				
				СвойствоПоискаУИ = НоваяСтрока.СвойстваПоиска.Добавить();
				СвойствоПоискаУИ.Имя = "{УникальныйИдентификатор}";
				СвойствоПоискаУИ.Источник = "{УникальныйИдентификатор}";
				СвойствоПоискаУИ.Приемник = "{УникальныйИдентификатор}";
				
			КонецЕсли;
			
			ЗагрузитьСвойства(ПравилаОбмена, НоваяСтрока.Свойства, НоваяСтрока.СвойстваПоиска);

			
		// Значения
		
		ИначеЕсли ИмяУзла = "Значения" Тогда
		
			ЗагрузитьЗначения(ПравилаОбмена, НоваяСтрока.Значения, НоваяСтрока.Источник);

			
		// Обработчики событий
		
		ИначеЕсли ИмяУзла = "ПередВыгрузкой" Тогда
		
			НоваяСтрока.ПередВыгрузкой = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.ЕстьОбработчикПередВыгрузкой = Не ПустаяСтрока(НоваяСтрока.ПередВыгрузкой);
			
		ИначеЕсли ИмяУзла = "ПриВыгрузке" Тогда
			
			НоваяСтрока.ПриВыгрузке = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.ЕстьОбработчикПриВыгрузке    = Не ПустаяСтрока(НоваяСтрока.ПриВыгрузке);
			
		ИначеЕсли ИмяУзла = "ПослеВыгрузки" Тогда
			
			НоваяСтрока.ПослеВыгрузки = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.ЕстьОбработчикПослеВыгрузки  = Не ПустаяСтрока(НоваяСтрока.ПослеВыгрузки);

			
		// Для загрузки
		
		ИначеЕсли ИмяУзла = "ПередЗагрузкой" Тогда
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
			Если РежимОбмена = "Загрузка" Тогда
				
				НоваяСтрока.ПередЗагрузкой               = Значение;
				НоваяСтрока.ЕстьОбработчикПередЗагрузкой = Не ПустаяСтрока(Значение);
				
			Иначе
				
				одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
				
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "ПриЗагрузке" Тогда
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
			Если РежимОбмена = "Загрузка" Тогда
				
				НоваяСтрока.ПриЗагрузке               = Значение;
				НоваяСтрока.ЕстьОбработчикПриЗагрузке = Не ПустаяСтрока(Значение);
				
			Иначе
				
				одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
				
			КонецЕсли; 
			
		ИначеЕсли ИмяУзла = "ПослеЗагрузки" Тогда
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
			Если РежимОбмена = "Загрузка" Тогда
				
				НоваяСтрока.ПослеЗагрузки               = Значение;
				НоваяСтрока.ЕстьОбработчикПослеЗагрузки = Не ПустаяСтрока(Значение);
				
			Иначе
				
				одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
				
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "ПоследовательностьПолейПоиска" Тогда
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
			Если РежимОбмена = "Загрузка" Тогда
				
				НоваяСтрока.ПоследовательностьПолейПоиска               = Значение;
				НоваяСтрока.ЕстьОбработчикПоследовательностьПолейПоиска = Не ПустаяСтрока(Значение);
				
			Иначе
				
				одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
				
			КонецЕсли;
	
						
		ИначеЕсли (ИмяУзла = "Правило") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
		
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();

	
	// Быстрый доступ к ПКО по имени
	
	Правила.Вставить(НоваяСтрока.Имя, НоваяСтрока);
	
КонецПроцедуры // ЗагрузитьПравилоКонвертации() 
 
// Осуществляет загрузку правил конвертации объектов
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ЗаписьXML      - Объект типа XMLЗапись - правила, сохраняемые в файл обмена и
//                   используемые при загрузке данных
// 
Процедура ЗагрузитьПравилаКонвертации(ПравилаОбмена, ЗаписьXML)

	ТаблицаПравилКонвертации.Очистить();

	ЗаписьXML.ЗаписатьНачалоЭлемента("ПравилаКонвертацииОбъектов");
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если      ИмяУзла = "Правило" Тогда
			
			ЗагрузитьПравилоКонвертации(ПравилаОбмена, ЗаписьXML);
			
		ИначеЕсли (ИмяУзла = "ПравилаКонвертацииОбъектов") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // ЗагрузитьПравилаКонвертации() 

// Осуществляет загрузку группы правил очистки данных в соответствии с форматом правил обмена
//
// Параметры:
//  НоваяСтрока    - строка дерева значений, описывающая группу правил очистки данных
// 
Процедура ЗагрузитьГруппуПОД(ПравилаОбмена, НоваяСтрока)

	НоваяСтрока.ЭтоГруппа = Истина;
	НоваяСтрока.Включить  = Число(Не одАтрибут(ПравилаОбмена, одТипБулево, "Отключить"));
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;
		
		Если      ИмяУзла = "Код" Тогда
			НоваяСтрока.Имя = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);

		ИначеЕсли ИмяУзла = "Наименование" Тогда
			НоваяСтрока.Наименование = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			#Если Клиент Тогда
			Состояние("Группа правил очистки данных: " + НоваяСтрока.Наименование);
			#КонецЕсли
		
		ИначеЕсли ИмяУзла = "Порядок" Тогда
			НоваяСтрока.Порядок = одЗначениеЭлемента(ПравилаОбмена, одТипЧисло);
			
		ИначеЕсли ИмяУзла = "Правило" Тогда
			СтрокаДЗ = НоваяСтрока.Строки.Добавить();
			ЗагрузитьПОД(ПравилаОбмена, СтрокаДЗ);
			
		ИначеЕсли (ИмяУзла = "Группа") И (ТипУзла = одТипУзлаXML_НачалоЭлемента) Тогда
			СтрокаДЗ = НоваяСтрока.Строки.Добавить();
			ЗагрузитьГруппуПОД(ПравилаОбмена, СтрокаДЗ);
			
		ИначеЕсли (ИмяУзла = "Группа") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	
	Если ПустаяСтрока(НоваяСтрока.Наименование) Тогда
		НоваяСтрока.Наименование = НоваяСтрока.Имя;
	КонецЕсли; 
	
КонецПроцедуры // ЗагрузитьГруппуПОД()

// Осуществляет загрузку правила очистки данных в соответствии с форматом правил обмена
//
// Параметры:
//  НоваяСтрока    - строка дерева значений, описывающая правило очистки данных
// 
Процедура ЗагрузитьПОД(ПравилаОбмена, НоваяСтрока)
	
	НоваяСтрока.Включить = Число(Не одАтрибут(ПравилаОбмена, одТипБулево, "Отключить"));
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если      ИмяУзла = "Код" Тогда
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.Имя = Значение;

		ИначеЕсли ИмяУзла = "Наименование" Тогда
			НоваяСтрока.Наименование = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			#Если Клиент Тогда
			Состояние("Правило очистки данных: " + НоваяСтрока.Наименование);
			#КонецЕсли
		
		ИначеЕсли ИмяУзла = "Порядок" Тогда
			НоваяСтрока.Порядок = одЗначениеЭлемента(ПравилаОбмена, одТипЧисло);
			
		ИначеЕсли ИмяУзла = "СпособОтбораДанных" Тогда
			НоваяСтрока.СпособОтбораДанных = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);

		ИначеЕсли ИмяУзла = "ОбъектВыборки" Тогда
			ОбъектВыборки = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			Если Не ПустаяСтрока(ОбъектВыборки) Тогда
				НоваяСтрока.ОбъектВыборки = Тип(ОбъектВыборки);
			КонецЕсли; 

		ИначеЕсли ИмяУзла = "УдалятьЗаПериод" Тогда
			НоваяСтрока.УдалятьЗаПериод = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "Непосредственно" Тогда
			НоваяСтрока.Непосредственно = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);

		
		// Обработчики событий

		ИначеЕсли ИмяУзла = "ПередОбработкойПравила" Тогда
			НоваяСтрока.ПередОбработкой = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "ПослеОбработкиПравила" Тогда
			НоваяСтрока.ПослеОбработки = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		
		ИначеЕсли ИмяУзла = "ПередУдалениемОбъекта" Тогда
			НоваяСтрока.ПередУдалением = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);

		// Выход
		ИначеЕсли (ИмяУзла = "Правило") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;

	
	Если ПустаяСтрока(НоваяСтрока.Наименование) Тогда
		НоваяСтрока.Наименование = НоваяСтрока.Имя;
	КонецЕсли; 
	
КонецПроцедуры // ЗагрузитьПОД()

// Осуществляет загрузку правил очистки данных
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ЗаписьXML      - Объект типа XMLЗапись - правила, сохраняемые в файл обмена и
//                   используемые при загрузке данных
// 
Процедура ЗагрузитьПравилаОчистки(ПравилаОбмена, ЗаписьXML)

	ТаблицаПравилОчистки.Строки.Очистить();
	СтрокиДЗ = ТаблицаПравилОчистки.Строки;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ПравилаОчисткиДанных");

	Пока ПравилаОбмена.Прочитать() Цикл
		
		ТипУзла = ПравилаОбмена.ТипУзла;
		
		Если ТипУзла = одТипУзлаXML_НачалоЭлемента Тогда
			ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
			Если РежимОбмена <> "Загрузка" Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента(ПравилаОбмена.Имя);
				Пока ПравилаОбмена.ПрочитатьАтрибут() Цикл
					ЗаписьXML.ЗаписатьАтрибут(ПравилаОбмена.Имя, ПравилаОбмена.Значение);
				КонецЦикла;
			Иначе
				Если ИмяУзла = "Правило" Тогда
					СтрокаДЗ = СтрокиДЗ.Добавить();
					ЗагрузитьПОД(ПравилаОбмена, СтрокаДЗ);
				ИначеЕсли ИмяУзла = "Группа" Тогда
					СтрокаДЗ = СтрокиДЗ.Добавить();
					ЗагрузитьГруппуПОД(ПравилаОбмена, СтрокаДЗ);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипУзла = одТипУзлаXML_КонецЭлемента Тогда
			ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
			Если ИмяУзла = "ПравилаОчисткиДанных" Тогда
				Прервать;
			Иначе
				Если РежимОбмена <> "Загрузка" Тогда
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипУзла = одТипУзлаXML_Текст Тогда
			Если РежимОбмена <> "Загрузка" Тогда
				ЗаписьXML.ЗаписатьТекст(ПравилаОбмена.Значение);
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;

	СтрокиДЗ.Сортировать("Порядок", Истина);
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // ЗагрузитьПравилаОчистки() 

// Осуществляет загрузку алгоритма в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ЗаписьXML      - Объект типа XMLЗапись - правила, сохраняемые в файл обмена и
//                   используемые при загрузке данных
// 
Процедура ЗагрузитьАлгоритм(ПравилаОбмена, ЗаписьXML)

	ИспользуетсяПриЗагрузке = одАтрибут(ПравилаОбмена, одТипБулево, "ИспользуетсяПриЗагрузке");
	Имя                     = одАтрибут(ПравилаОбмена, одТипСтрока, "Имя");
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если      ИмяУзла = "Текст" Тогда
			Текст = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		ИначеЕсли (ИмяУзла = "Алгоритм") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		Иначе
			одПропустить(ПравилаОбмена);
		КонецЕсли;
		
	КонецЦикла;

	
	Если ИспользуетсяПриЗагрузке Тогда
		Если РежимОбмена = "Загрузка" Тогда
			Алгоритмы.Вставить(Имя, Текст);
		Иначе
			ЗаписьXML.ЗаписатьНачалоЭлемента("Алгоритм");
			УстановитьАтрибут(ЗаписьXML, "ИспользуетсяПриЗагрузке", Истина);
			УстановитьАтрибут(ЗаписьXML, "Имя",   Имя);
			одЗаписатьЭлемент(ЗаписьXML, "Текст", Текст);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	Иначе
		Если РежимОбмена <> "Загрузка" Тогда
			Алгоритмы.Вставить(Имя, Текст);
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры // ЗагрузитьАлгоритм() 

// Осуществляет загрузку алгоритмов в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ЗаписьXML      - Объект типа XMLЗапись - правила, сохраняемые в файл обмена и
//                   используемые при загрузке данных
// 
Процедура ЗагрузитьАлгоритмы(ПравилаОбмена, ЗаписьXML)

	Алгоритмы.Очистить();

	ЗаписьXML.ЗаписатьНачалоЭлемента("Алгоритмы");
	
	Пока ПравилаОбмена.Прочитать() Цикл
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		Если      ИмяУзла = "Алгоритм" Тогда
			ЗагрузитьАлгоритм(ПравилаОбмена, ЗаписьXML);
		ИначеЕсли (ИмяУзла = "Алгоритмы") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // ЗагрузитьАлгоритмы() 

// Осуществляет загрузку запроса в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ЗаписьXML      - Объект типа XMLЗапись - правила, сохраняемые в файл обмена и
//                   используемые при загрузке данных
// 
Процедура ЗагрузитьЗапрос(ПравилаОбмена, ЗаписьXML)

	ИспользуетсяПриЗагрузке = одАтрибут(ПравилаОбмена, одТипБулево, "ИспользуетсяПриЗагрузке");
	Имя                     = одАтрибут(ПравилаОбмена, одТипСтрока, "Имя");
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если      ИмяУзла = "Текст" Тогда
			Текст = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		ИначеЕсли (ИмяУзла = "Запрос") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		Иначе
			одПропустить(ПравилаОбмена);
		КонецЕсли;
		
	КонецЦикла;

	Если ИспользуетсяПриЗагрузке Тогда
		Если РежимОбмена = "Загрузка" Тогда
			Запрос	= Новый Запрос(Текст);
			Запросы.Вставить(Имя, Запрос);
		Иначе
			ЗаписьXML.ЗаписатьНачалоЭлемента("Запрос");
			УстановитьАтрибут(ЗаписьXML, "ИспользуетсяПриЗагрузке", Истина);
			УстановитьАтрибут(ЗаписьXML, "Имя",   Имя);
			одЗаписатьЭлемент(ЗаписьXML, "Текст", Текст);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	Иначе
		Если РежимОбмена <> "Загрузка" Тогда
			Запрос	= Новый Запрос(Текст);
			Запросы.Вставить(Имя, Запрос);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьЗапрос() 

// Осуществляет загрузку запросов в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ЗаписьXML      - Объект типа XMLЗапись - правила, сохраняемые в файл обмена и
//                   используемые при загрузке данных
// 
Процедура ЗагрузитьЗапросы(ПравилаОбмена, ЗаписьXML)

	Запросы.Очистить();

	ЗаписьXML.ЗаписатьНачалоЭлемента("Запросы");
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если      ИмяУзла = "Запрос" Тогда
			ЗагрузитьЗапрос(ПравилаОбмена, ЗаписьXML);
		ИначеЕсли (ИмяУзла = "Запросы") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // ЗагрузитьЗапросы() 

// Осуществляет загрузку параметров в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
// 
Процедура ЗагрузитьПараметры(ПравилаОбмена, ЗаписьXML)

	Параметры.Очистить();
	ТаблицаНастройкиПараметров.Очистить();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Параметры");
	
	Пока ПравилаОбмена.Прочитать() Цикл
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;

		Если ИмяУзла = "Параметр" И ТипУзла = одТипУзлаXML_НачалоЭлемента Тогда
			//Загрузка по версии правил 2.01
			Имя                     = одАтрибут(ПравилаОбмена, одТипСтрока, "Имя");
			Наименование            = одАтрибут(ПравилаОбмена, одТипСтрока, "Наименование");
			УстанавливатьВДиалоге   = одАтрибут(ПравилаОбмена, одТипБулево, "УстанавливатьВДиалоге");
			СтрокаТипаЗначения      = одАтрибут(ПравилаОбмена, одТипСтрока, "ТипЗначения");
			ИспользуетсяПриЗагрузке = одАтрибут(ПравилаОбмена, одТипБулево, "ИспользуетсяПриЗагрузке");
			
			//БАЛАНС (25.12.2007)                       
			//добавлено для поддержки 20 релиза
			ПередаватьПараметрПриВыгрузке = одАтрибут(ПравилаОбмена, одТипБулево, "ПередаватьПараметрПриВыгрузке");
			 
			Параметры.Вставить(Имя);
			Если УстанавливатьВДиалоге = ИСТИНА Тогда
				СтрокаТаблицы              = ТаблицаНастройкиПараметров.Добавить();
				СтрокаТаблицы.Наименование = Наименование;
				СтрокаТаблицы.Имя          = Имя;
				// Определяем типы значений и устанавливаем начальные значения
				Попытка
					ТипЗначенияДанных = Тип(СтрокаТипаЗначения);
					ТипОпределен = ИСТИНА;
				Исключение
					ТипОпределен = ЛОЖЬ;
				КонецПопытки;
				Если ТипОпределен = ИСТИНА Тогда
					СтрокаТаблицы.Значение = одПолучитьПустоеЗначение(ТипЗначенияДанных);
				Иначе
					СтрокаТаблицы.Значение = одПолучитьПустоеЗначение("Строка");
				КонецЕсли;
				
				//БАЛАНС (25.12.2007)                       
				//
				СтрокаТаблицы.ПередаватьПараметрПриВыгрузке = ПередаватьПараметрПриВыгрузке;

			КонецЕсли;

			Если ИспользуетсяПриЗагрузке Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("Параметр");
				УстановитьАтрибут(ЗаписьXML, "Имя",   Имя);
				одЗаписатьЭлемент(ЗаписьXML, "Наименование", Наименование);
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;

		ИначеЕсли (ТипУзла = одТипУзлаXML_Текст) Тогда
			// Для совместимости с версией правил 2.0 используем загрузку из строки
			СтрокаПараметров = ПравилаОбмена.Значение;
			Для каждого Пар Из МассивИзСтроки(СтрокаПараметров) Цикл
				Параметры.Вставить(Пар);
			КонецЦикла;
		ИначеЕсли (ИмяУзла = "Параметры") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры // ЗагрузитьОбработки() 

// Осуществляет загрузку обработки в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ЗаписьXML      - Объект типа XMLЗапись - правила, сохраняемые в файл обмена и
//                   используемые при загрузке данных
// 
Процедура ЗагрузитьОбработку(ПравилаОбмена, ЗаписьXML)

	Имя                     = одАтрибут(ПравилаОбмена, одТипСтрока, "Имя");
	Наименование            = одАтрибут(ПравилаОбмена, одТипСтрока, "Наименование");
	ЭтоОбработкаНастройки   = одАтрибут(ПравилаОбмена, одТипБулево, "ЭтоОбработкаНастройки");
	
	ИспользуетсяПриВыгрузке = одАтрибут(ПравилаОбмена, одТипБулево, "ИспользуетсяПриВыгрузке");
	ИспользуетсяПриЗагрузке = одАтрибут(ПравилаОбмена, одТипБулево, "ИспользуетсяПриЗагрузке");

	СтрокаПараметров        = одАтрибут(ПравилаОбмена, одТипСтрока, "Параметры");
	
	ХранилищеОбработки      = одЗначениеЭлемента(ПравилаОбмена, одТипХранилищеЗначения);

	ПараметрыДопОбработок.Вставить(Имя, МассивИзСтроки(СтрокаПараметров));
	
	
	Если ИспользуетсяПриЗагрузке Тогда
		Если РежимОбмена = "Загрузка" Тогда
			#Если Клиент Тогда
				УникальныйИдентификатор = Новый УникальныйИдентификатор();
				ИмяВременногоФайла      = КаталогВременныхФайлов() + УникальныйИдентификатор + ".epf";
				ХранилищеОбработки.Получить().Записать(ИмяВременногоФайла);
				ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяВременногоФайла);
				УдалитьФайлы(ИмяВременногоФайла);
	            ДопОбработки.Вставить(Имя, ВнешняяОбработка);
			#КонецЕсли
		Иначе
			ЗаписьXML.ЗаписатьНачалоЭлемента("Обработка");
			УстановитьАтрибут(ЗаписьXML, "ИспользуетсяПриЗагрузке", Истина);
			УстановитьАтрибут(ЗаписьXML, "Имя",                     Имя);
			УстановитьАтрибут(ЗаписьXML, "Наименование",            Наименование);
			УстановитьАтрибут(ЗаписьXML, "ЭтоОбработкаНастройки",   ЭтоОбработкаНастройки);
			ЗаписьXML.ЗаписатьТекст(XMLСтрока(ХранилищеОбработки));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользуетсяПриВыгрузке Тогда
		Если РежимОбмена <> "Загрузка" Тогда
			#Если Клиент Тогда
				УникальныйИдентификатор = Новый УникальныйИдентификатор();
				ИмяВременногоФайла      = КаталогВременныхФайлов() + УникальныйИдентификатор + ".epf";
				ХранилищеОбработки.Получить().Записать(ИмяВременногоФайла);
				ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяВременногоФайла);
				УдалитьФайлы(ИмяВременногоФайла);
	            ДопОбработки.Вставить(Имя, ВнешняяОбработка);
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;

	Если ЭтоОбработкаНастройки Тогда
		Если (РежимОбмена = "Загрузка") И ИспользуетсяПриЗагрузке Тогда
			ОбработкиНастройкиЗагрузки.Добавить(Имя, Наименование, , );
			
		ИначеЕсли (РежимОбмена = "Выгрузка") И ИспользуетсяПриВыгрузке Тогда
			ОбработкиНастройкиВыгрузки.Добавить(Имя, Наименование, , );
			
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры // ЗагрузитьОбработку() 

// Осуществляет загрузку внешних обработок в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ЗаписьXML      - Объект типа XMLЗапись - правила, сохраняемые в файл обмена и
//                   используемые при загрузке данных
// 
Процедура ЗагрузитьОбработки(ПравилаОбмена, ЗаписьXML)

	ДопОбработки.Очистить();
	ПараметрыДопОбработок.Очистить();
	
	ОбработкиНастройкиВыгрузки.Очистить();
	ОбработкиНастройкиЗагрузки.Очистить();

	ЗаписьXML.ЗаписатьНачалоЭлемента("Обработки");
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если      ИмяУзла = "Обработка" Тогда
			ЗагрузитьОбработку(ПравилаОбмена, ЗаписьXML);
		ИначеЕсли (ИмяУзла = "Обработки") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // ЗагрузитьОбработки() 

// Осуществляет загрузку группы правил выгрузки данных в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  НоваяСтрока    - строка дерева значений, описывающая группу правил выгрузки данных
// 
Процедура ЗагрузитьГруппуПВД(ПравилаОбмена, НоваяСтрока)

	НоваяСтрока.ЭтоГруппа = Истина;
	НоваяСтрока.Включить  = Число(Не одАтрибут(ПравилаОбмена, одТипБулево, "Отключить"));
	
	Пока ПравилаОбмена.Прочитать() Цикл
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;
		Если      ИмяУзла = "Код" Тогда
			НоваяСтрока.Имя = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);

		ИначеЕсли ИмяУзла = "Наименование" Тогда
			НоваяСтрока.Наименование = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			#Если Клиент Тогда
			Состояние("Группа правил выгрузки данных: " + НоваяСтрока.Наименование);
			#КонецЕсли
		
		ИначеЕсли ИмяУзла = "Порядок" Тогда
			НоваяСтрока.Порядок = одЗначениеЭлемента(ПравилаОбмена, одТипЧисло);
			
		ИначеЕсли ИмяУзла = "Правило" Тогда
			СтрокаДЗ = НоваяСтрока.Строки.Добавить();
			ЗагрузитьПВД(ПравилаОбмена, СтрокаДЗ);
			
		ИначеЕсли (ИмяУзла = "Группа") И (ТипУзла = одТипУзлаXML_НачалоЭлемента) Тогда
			СтрокаДЗ = НоваяСтрока.Строки.Добавить();
			ЗагрузитьГруппуПВД(ПравилаОбмена, СтрокаДЗ);
					
		ИначеЕсли (ИмяУзла = "Группа") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	
	Если ПустаяСтрока(НоваяСтрока.Наименование) Тогда
		НоваяСтрока.Наименование = НоваяСтрока.Имя;
	КонецЕсли; 
	
КонецПроцедуры // ЗагрузитьГруппуПВД()

// Осуществляет загрузку правила выгрузки данных в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  НоваяСтрока    - строка дерева значений, описывающая правило выгрузки данных
// 
Процедура ЗагрузитьПВД(ПравилаОбмена, НоваяСтрока)

	НоваяСтрока.Включить = Число(Не одАтрибут(ПравилаОбмена, одТипБулево, "Отключить"));
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		Если      ИмяУзла = "Код" Тогда
			НоваяСтрока.Имя = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);

		ИначеЕсли ИмяУзла = "Наименование" Тогда
			НоваяСтрока.Наименование = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			#Если Клиент Тогда
			Состояние("Правило выгрузки данных: " + НоваяСтрока.Наименование);
			#КонецЕсли
		
		ИначеЕсли ИмяУзла = "Порядок" Тогда
			НоваяСтрока.Порядок = одЗначениеЭлемента(ПравилаОбмена, одТипЧисло);
			
		ИначеЕсли ИмяУзла = "СпособОтбораДанных" Тогда
			НоваяСтрока.СпособОтбораДанных = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);

		ИначеЕсли ИмяУзла = "ОбъектВыборки" Тогда
			ОбъектВыборки = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			Если Не ПустаяСтрока(ОбъектВыборки) Тогда
				НоваяСтрока.ОбъектВыборки = Тип(ОбъектВыборки);
			КонецЕсли;
			// Для поддержки отбора с помощью построителя
			Если Найти(ОбъектВыборки, "Ссылка.") Тогда
				НоваяСтрока.ИмяОбъектаДляЗапроса = СтрЗаменить(ОбъектВыборки, "Ссылка.", ".");
			КонецЕсли;

		ИначеЕсли ИмяУзла = "КодПравилаКонвертации" Тогда
			НоваяСтрока.ПравилоКонвертации = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);

		// Обработчики событий

		ИначеЕсли ИмяУзла = "ПередОбработкойПравила" Тогда
			НоваяСтрока.ПередОбработкой = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "ПослеОбработкиПравила" Тогда
			НоваяСтрока.ПослеОбработки = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		
		ИначеЕсли ИмяУзла = "ПередВыгрузкойОбъекта" Тогда
			НоваяСтрока.ПередВыгрузкой = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);

		ИначеЕсли ИмяУзла = "ПослеВыгрузкиОбъекта" Тогда
			НоваяСтрока.ПослеВыгрузки = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
        		
		ИначеЕсли (ИмяУзла = "Правило") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	Если ПустаяСтрока(НоваяСтрока.Наименование) Тогда
		НоваяСтрока.Наименование = НоваяСтрока.Имя;
	КонецЕсли; 
	
КонецПроцедуры // ЗагрузитьПВД()

// Осуществляет загрузку правил выгрузки данных в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
// 
Процедура ЗагрузитьПравилаВыгрузки(ПравилаОбмена)

	ТаблицаПравилВыгрузки.Строки.Очистить();

	СтрокиДЗ = ТаблицаПравилВыгрузки.Строки;
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если ИмяУзла = "Правило" Тогда
			
			СтрокаДЗ = СтрокиДЗ.Добавить();
			ЗагрузитьПВД(ПравилаОбмена, СтрокаДЗ);
			
		ИначеЕсли ИмяУзла = "Группа" Тогда
			
			СтрокаДЗ = СтрокиДЗ.Добавить();
			ЗагрузитьГруппуПВД(ПравилаОбмена, СтрокаДЗ);
			
		ИначеЕсли (ИмяУзла = "ПравилаВыгрузкиДанных") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;

	СтрокиДЗ.Сортировать("Порядок", Истина);

КонецПроцедуры // ЗагрузитьПравилаВыгрузки()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ПРАВИЛАМИ ОБМЕНА

// Осуществляет поиск правила конвертации по имени или в соответствии с типом
// переданного объекта
//
// Параметры:
//  Объект         - Объект-источник, для которого ищем правило конвертации
//  ИмяПравила     - имя правила конвертации
//
// Возвращаемое значение:
//  Ссылка на правило конвертации (строка в таблице правил)
// 
Функция НайтиПравило(Объект, ИмяПравила="")

	Если Не ПустаяСтрока(ИмяПравила) Тогда
		Правило = Правила[ИмяПравила];
	Иначе
		Правило = Менеджеры[ТипЗнч(Объект)];
		Если Правило <> Неопределено Тогда
			Правило    = Правило.ПКО;
			ИмяПравила = Правило.Имя;
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Правило; 
	
КонецФункции

// Сохраняет правила обмена фо внутреннем формате
//
// Параметры:
//  Нет.
// 
Процедура СохранитьПравилаВоВнутреннемФормате() Экспорт

	Для Каждого Правило Из ТаблицаПравилКонвертации Цикл
		Правило.Выгруженные.Очистить();
	КонецЦикла;

	СтруктураПравил = Новый Структура;
	
	//Сохраняем запросы
	ЗапросыДляСохранения = Новый Структура;
	Для Каждого ЭлементСтруктуры Из Запросы Цикл
		ЗапросыДляСохранения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение.Текст);
	КонецЦикла;

	ПараметрыДляСохранения = Новый Структура;
	Для Каждого ЭлементСтруктуры Из Параметры Цикл
		ПараметрыДляСохранения.Вставить(ЭлементСтруктуры.Ключ, Неопределено);
	КонецЦикла;

	СтруктураПравил.Вставить("ТаблицаПравилВыгрузки",      ТаблицаПравилВыгрузки);
	СтруктураПравил.Вставить("ТаблицаПравилКонвертации",   ТаблицаПравилКонвертации);
	СтруктураПравил.Вставить("Алгоритмы",                  Алгоритмы);
	СтруктураПравил.Вставить("Запросы",                    ЗапросыДляСохранения);
	СтруктураПравил.Вставить("Конвертация",                Конвертация);
	СтруктураПравил.Вставить("мXMLПравила",                мXMLПравила);
	СтруктураПравил.Вставить("ТаблицаНастройкиПараметров", ТаблицаНастройкиПараметров);
	СтруктураПравил.Вставить("Параметры",                  ПараметрыДляСохранения);
	
	СтруктураПравил.Вставить("ВерсияПлатформыПриемника",   ВерсияПлатформыПриемника);
	
	СохраненныеНастройки  = Новый ХранилищеЗначения(СтруктураПравил);
	
КонецПроцедуры // СохранитьПравилаВоВнутреннемФормате()

// Восстанавливает правила из внутреннего формата
//
// Параметры:
// 
Процедура ВосстановитьПравилаИзВнутреннегоФормата() Экспорт

	Если СохраненныеНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПравил = СохраненныеНастройки.Получить();

	ТаблицаПравилВыгрузки      = СтруктураПравил.ТаблицаПравилВыгрузки;
	ТаблицаПравилКонвертации   = СтруктураПравил.ТаблицаПравилКонвертации;
	Алгоритмы                  = СтруктураПравил.Алгоритмы;
	ЗапросыДляВосстановления   = СтруктураПравил.Запросы;
	Конвертация                = СтруктураПравил.Конвертация;
	мXMLПравила                = СтруктураПравил.мXMLПравила;
	ТаблицаНастройкиПараметров = СтруктураПравил.ТаблицаНастройкиПараметров;
	Параметры                  = СтруктураПравил.Параметры;
	
	СтруктураПравил.Свойство("ВерсияПлатформыПриемника", ВерсияПлатформыПриемника);
		
	ЕстьГлобальныйОбработчикПередВыгрузкойОбъекта    = Не ПустаяСтрока(Конвертация.ПередВыгрузкойОбъекта);
	ЕстьГлобальныйОбработчикПослеВыгрузкиОбъекта     = Не ПустаяСтрока(Конвертация.ПослеВыгрузкиОбъекта);
	ЕстьГлобальныйОбработчикПередЗагрузкойОбъекта    = Не ПустаяСтрока(Конвертация.ПередЗагрузкойОбъекта);
	ЕстьГлобальныйОбработчикПослеЗагрузкиОбъекта     = Не ПустаяСтрока(Конвертация.ПослеЗагрузкиОбъекта);
	ЕстьГлобальныйОбработчикПередКонвертациейОбъекта = Не ПустаяСтрока(Конвертация.ПередКонвертациейОбъекта);

	// Восстанавливаем запросы
	Запросы.Очистить();
	Для Каждого ЭлементСтруктуры Из ЗапросыДляВосстановления Цикл
		Запрос = Новый Запрос(ЭлементСтруктуры.Значение);
		Запросы.Вставить(ЭлементСтруктуры.Ключ, Запрос);
	КонецЦикла;

	ИнициализироватьМенеджерыИСообщения();
	
	Правила.Очистить();
	
	Если РежимОбмена = "Выгрузка" Тогда
	
		Для Каждого СтрокаТаблицы Из ТаблицаПравилКонвертации Цикл
			Правила.Вставить(СтрокаТаблицы.Имя, СтрокаТаблицы);

			Если СтрокаТаблицы.Источник <> Неопределено Тогда
				
				Попытка
					Если ТипЗнч(СтрокаТаблицы.Источник) = одТипСтрока Тогда
						Менеджеры[Тип(СтрокаТаблицы.Источник)].ПКО = СтрокаТаблицы;
					Иначе
						Менеджеры[СтрокаТаблицы.Источник].ПКО = СтрокаТаблицы;
					КонецЕсли;			
				Исключение
					ЗаписатьИнформациюОбОшибкеВПротокол(11, ОписаниеОшибки(), Строка(СтрокаТаблицы.Источник));
				КонецПопытки;
				
			КонецЕсли;

		КонецЦикла;
	
	КонецЕсли;	
	
КонецПроцедуры // СохранитьПравилаВоВнутреннемФормате()

// Устанавливат значения парамтров в структуре Параметры 
// по таблице ТаблицаНастройкиПараметров
//
Процедура УстановитьПараметрыИзДиалога() Экспорт

	Для Каждого СтрокаТаблицы Из ТаблицаНастройкиПараметров Цикл
		Параметры.Вставить(СтрокаТаблицы.Имя, СтрокаТаблицы.Значение);
	КонецЦикла;

КонецПроцедуры

Процедура УстановитьЗначениеПараметраВТаблице(ИмяПараметра, ЗначениеПараметра) Экспорт
	
	СтрокаТаблицы = ТаблицаНастройкиПараметров.Найти(ИмяПараметра, "Имя");
	
	Если СтрокаТаблицы <> Неопределено Тогда
		
		СтрокаТаблицы.Значение = ЗначениеПараметра;	
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ПРАВИЛ ОЧИСТКИ

Процедура ВыполнитьУдалениеОбъекта(Объект, Свойства, УдалитьНепосредственно)
	
	Если УдалитьНепосредственно
		ИЛИ Свойства.ИмяТипа = "РегистрСведений" Тогда
			
		Объект.Удалить();
			
	Иначе
			
		УстановитьПометкуУдаленияУОбъекта(Объект, Истина, Свойства.ИмяТипа);
			
	КонецЕсли;	
	
КонецПроцедуры

// Производит удаление (или помечает на удаление) объект выборки в соответствии с указанным правилом
//
// Параметры:
//  Объект         - удаляемый (помечаемый на удаление) объект выборки
//  Правило        - ссылка на правило очистки данных
//  Свойства       - свойства объекта метаданного удаляемого объекта 
//  ВходящиеДанные - произвольные вспомогательные данные
// 
Процедура УдалениеОбъектаВыборки(Объект, Правило, Свойства=Неопределено, ВходящиеДанные=Неопределено)

	Попытка
		
		Предопределенный = Объект.Предопределенный;
		
	Исключение
		
		Предопределенный = Ложь;
		
	КонецПопытки;
	
	Если Предопределенный Тогда
		
		Возврат;
		
	КонецЕсли;
		
	Отказ			       = Ложь;
	УдалитьНепосредственно = Правило.Непосредственно;


	// Обработчик ПередУдалениемОбъектаВыборки
	
	Если ФлагРежимОтладки Тогда
		
		Попытка
			
			Выполнить(Правило.ПередУдалением);
			
		Исключение
			
			ЗаписатьИнформациюОбОшибкеОбработчикаОчисткиДанных(29, ОписаниеОшибки(), Правило.Имя, Объект, "ПередУдалениемОбъектаВыборки");
									
		КонецПопытки;
		
	Иначе
		
		Выполнить(Правило.ПередУдалением);
		
	КонецЕсли;
	
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли; 


	Если ФлагРежимОтладки Тогда
		
		Попытка
			
			ВыполнитьУдалениеОбъекта(Объект, Свойства, УдалитьНепосредственно);
						
		Исключение
			
			ЗаписатьИнформациюОбОшибкеОбработчикаОчисткиДанных(24, ОписаниеОшибки(), Правило.Имя, Объект, "");
									
		КонецПопытки;
		
	Иначе
		
		ВыполнитьУдалениеОбъекта(Объект, Свойства, УдалитьНепосредственно);
		
	КонецЕсли; 

КонецПроцедуры // УдалениеОбъектаВыборки()

// Очищает данные по указанному правилу
//
// Параметры:
//  Правило        - ссылка на правило очистки данных
// 
Процедура ОчиститьДанныеПоПравилу(Правило)
	
	// Обработчик ПередОбработкой

	Отказ			= Ложь;
	ВыборкаДанных	= Неопределено;

	ИсходящиеДанные	= Неопределено;


	// Обработчик ПередОбработкойПравилаОчистки
	Если ФлагРежимОтладки Тогда
		
		Попытка
			
			Выполнить(Правило.ПередОбработкой);
			
		Исключение
			
			ЗаписатьИнформациюОбОшибкеОбработчикаОчисткиДанных(27, ОписаниеОшибки(), Правило.Имя, "", "ПередОбработкойПравилаОчистки");
						
		КонецПопытки;
		
	Иначе
		
		Выполнить(Правило.ПередОбработкой);
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли; 


    // Стандартная выборка
	
	Если Правило.СпособОтбораДанных = "СтандартнаяВыборка" Тогда
		
		Свойства	= Менеджеры[Правило.ОбъектВыборки];
		ИмяТипа		= Свойства.ИмяТипа;
		
		Если ИмяТипа = "РегистрБухгалтерии" 
			ИЛИ ИмяТипа = "Константы" Тогда
			
			Возврат;
			
		КонецЕсли;
		
		НужныВсеПоля  = Не ПустаяСтрока(Правило.ПередУдалением);
		
		Выборка = ПолучитьВыборкуДляВыгрузкиОчисткиДанных(Свойства, ИмяТипа, Истина, Правило.Непосредственно, НужныВсеПоля);
		
		Пока Выборка.Следующий() Цикл
			
			#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			#КонецЕсли
				
			Если ИмяТипа =  "РегистрСведений" Тогда
					
				УдалениеОбъектаВыборки(Выборка.ПолучитьМенеджерЗаписи(), Правило, Свойства, ИсходящиеДанные);
					
			Иначе
					
				УдалениеОбъектаВыборки(Выборка.Ссылка.ПолучитьОбъект(), Правило, Свойства, ИсходящиеДанные);
					
			КонецЕсли;
				
		КонецЦикла;		

	ИначеЕсли Правило.СпособОтбораДанных = "ПроизвольныйАлгоритм" Тогда

		Если ВыборкаДанных <> Неопределено Тогда
			
			Выборка = ПолучитьВыборкуДляВыгрузкиПоПроизвольномуАлгоритму(ВыборкаДанных);
			
			Если Выборка <> Неопределено Тогда
				
				Пока Выборка.Следующий() Цикл
					
					УдалениеОбъектаВыборки(Выборка.Ссылка.ПолучитьОбъект(), Правило, Свойства, ИсходящиеДанные);
					
				КонецЦикла;	
				
			Иначе
				
				Для каждого Объект Из ВыборкаДанных Цикл
					
					УдалениеОбъектаВыборки(Объект.ПолучитьОбъект(), Правило, Свойства, ИсходящиеДанные);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли; 
			
	КонецЕсли; 

	
	// Обработчик ПослеОбработкиПравилаОчистки

	Если ФлагРежимОтладки Тогда
		
		Попытка
			
			Выполнить(Правило.ПослеОбработки);
			
		Исключение
			
			ЗаписатьИнформациюОбОшибкеОбработчикаОчисткиДанных(28, ОписаниеОшибки(), Правило.Имя, "", "ПослеОбработкиПравилаОчистки");
									
		КонецПопытки;
		
	Иначе
		
		Выполнить(Правило.ПослеОбработки);
		
	КонецЕсли;
	
КонецПроцедуры // ОчиститьДанныеПоПравилу()

// Обходит дерево правил очистки данных и выполняет очистку
//
// Параметры:
//  Строки         - Коллекция строк дерева значений
// 
Процедура ОбработатьПравилаОчистки(Строки)
	
	Для каждого ПравилоОчистки Из Строки Цикл
		
		Если ПравилоОчистки.Включить = 0 Тогда
			
			Продолжить;
			
		КонецЕсли; 

		Если ПравилоОчистки.ЭтоГруппа Тогда
			
			ОбработатьПравилаОчистки(ПравилоОчистки.Строки);
			Продолжить;
			
		КонецЕсли;
		
		ОчиститьДанныеПоПравилу(ПравилоОчистки);
		
	КонецЦикла; 
	
КонецПроцедуры // ОбработатьПравилаОчистки() 


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАГРУЗКИ ДАННЫХ

// Устанавливает значение параметра "Загрузка" для свойства объекта "ОбменДанными".
//
// Параметры:
//  Объект   - объект, для которого устанавливается свойство
//  Значение - значение устанавливаемого свойства "Загрузка"
// 
Процедура УстановитьОбменДаннымиЗагрузка(Объект, Значение = Истина)
	
	Попытка
		Объект.ОбменДанными.Загрузка = Значение;
	Исключение
	КонецПопытки;
	
КонецПроцедуры // УстановитьОбменДаннымиЗагрузка()

Процедура УстановитьСсылкуНового(Объект, Менеджер, СвойстваПоиска)
	
	УИ = СвойстваПоиска["{УникальныйИдентификатор}"];
	
	Если УИ <> Неопределено Тогда
		
		Объект.УстановитьСсылкуНового(Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(УИ)));
		
		СвойстваПоиска.Удалить("{УникальныйИдентификатор}");
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьСсылкуНового()

// Ищет объект по номеру в списке уже загруженных объектов.
//
// Параметры:
//  Нпп          - номер искомого объекта в файле обмена
//
// Возвращаемое значение:
//  Ссылка на найденный объект. Если объект не найден, возвращается Неопределено.
// 
Функция НайтиОбъектПоНомеру(Нпп)

	Если Нпп = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат ЗагруженныеОбъекты[Нпп];
	КонецЕсли; 

КонецФункции // НайтиОбъектПоНомеру() 

Процедура ЗаписатьОбъектВИБ(Объект, Тип)
		
	Если ФлагРежимОтладки Тогда
		
		Попытка
			
			УстановитьОбменДаннымиЗагрузка(Объект);
			Объект.Записать();
			
		Исключение
			
			ЗаписатьИнформациюОбОшибкеВПротокол(26, ОписаниеОшибки(), Объект, Тип);
					
		КонецПопытки;
		
	Иначе
		
		УстановитьОбменДаннымиЗагрузка(Объект);
		Объект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьТекущуюДатуРеквизиту(РеквизитОбъекта)
	
	#Если Клиент Тогда
		РеквизитОбъекта = РабочаяДата;
	#Иначе
		РеквизитОбъекта = ТекущаяДата();
	#КонецЕсли	
	
КонецПроцедуры

// Создает новый объект указанного типа, устанавливает реквизиты, указанноые
// в структуре СвойстваПоиска.
//
// Параметры:
//  Тип            - тип создаваемого объекта
//  СвойстваПоиска - Структура, содержащая устанавливаемые реквизиты нового объекта
//
// Возвращаемое значение:
//  Новый объект информационной базы
// 
Функция СоздатьНовыйОбъект(Тип, СвойстваПоиска, Объект = Неопределено)

	СвойстваМД      = Менеджеры[Тип];
	ИмяТипа         = СвойстваМД.ИмяТипа;
	Менеджер        = СвойстваМД.Менеджер;
	
	Если ИмяТипа = "Справочник"
		ИЛИ ИмяТипа = "ПланВидовХарактеристик" Тогда
		
		ЭтоГруппа = СвойстваПоиска["ЭтоГруппа"];
		
		Если ЭтоГруппа = Истина Тогда
			
			Объект = Менеджер.СоздатьГруппу();
						
		Иначе
			
			Объект = Менеджер.СоздатьЭлемент();
			
		КонецЕсли;		
				
	ИначеЕсли ИмяТипа = "Документ" Тогда
		
		Объект = Менеджер.СоздатьДокумент();
				
	ИначеЕсли ИмяТипа = "ПланСчетов" Тогда
		
		Объект = Менеджер.СоздатьСчет();
				
	ИначеЕсли ИмяТипа = "ПланВидовРасчета" Тогда
		
		Объект = Менеджер.СоздатьВидРасчета();
				
	ИначеЕсли ИмяТипа = "РегистрСведений" Тогда
		
		Объект = Менеджер.СоздатьМенеджерЗаписи();
		Возврат Объект;
		
	ИначеЕсли ИмяТипа = "ПланОбмена" Тогда
		
		Объект = Менеджер.СоздатьУзел();
				
	ИначеЕсли ИмяТипа = "Задача" Тогда
		
		Объект = Менеджер.СоздатьЗадачу();
		
	ИначеЕсли ИмяТипа = "БизнесПроцесс" Тогда
		
		Объект = Менеджер.СоздатьБизнесПроцесс();	
		
	ИначеЕсли ИмяТипа = "Перечисление" Тогда
		
		Объект = СвойстваМД.ПустаяСсылка;	
		Возврат Объект;
				
	КонецЕсли;
	
	УстановитьСсылкуНового(Объект, Менеджер, СвойстваПоиска);
	
	УстановитьРеквизитыПоискаУОбъекта(Объект, СвойстваПоиска, , Ложь, Ложь);
	
	// Проверки
	Если ИмяТипа = "Документ"
		ИЛИ ИмяТипа = "Задача"
		ИЛИ ИмяТипа = "БизнесПроцесс" Тогда
		
		Если одПустое(Объект.Дата) Тогда
			
			УстановитьТекущуюДатуРеквизиту(Объект.Дата);			
						
		КонецЕсли;
		
	КонецЕсли;
		
	//	!!! Если Владелец не установлен, то нужно поле добавить
	// в возможные поля поиска, а в событии ПОЛЯПОИСКА указать поля без Владельца, если по нему поиск реально не нужен
	
	Объект.ПометкаУдаления = Истина;
	
	ЗаписатьОбъектВИБ(Объект, Тип);
	
	Возврат Объект.Ссылка;
	
КонецФункции // СоздатьНовыйОбъект()

// Читает из файла узел свойства объекта, устанавливает значение свойства
//
// Параметры:
//  Тип            - тип значения свойства
//  ОбъектНайден   - если после выполнения функции - Ложь, то значит
//                   объект свойства не найден в информационной базе и создан новый
//
// Возвращаемое значение:
//  Значение свойства
// 
Функция ПрочитатьСвойство(Тип)

	Значение = Неопределено;
	
	Пока ФайлОбмена.Прочитать() Цикл
		
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
				
		Если ИмяУзла = "Значение" Тогда
			
			ИскатьПоСвойству = одАтрибут(ФайлОбмена, одТипСтрока, "Свойство");
			Значение         = одЗначениеЭлемента(ФайлОбмена, Тип, ИскатьПоСвойству);
			
		ИначеЕсли ИмяУзла = "Пусто" Тогда
			
			Значение = одПолучитьПустоеЗначение(Тип);
			
		ИначеЕсли ИмяУзла = "Ссылка" Тогда
			
			Значение       = НайтиОбъектПоСсылке(Тип);
			
		ИначеЕсли ИмяУзла = "Выражение" Тогда
			
			Значение = Вычислить(одЗначениеЭлемента(ФайлОбмена, одТипСтрока));
			
		ИначеЕсли ИмяУзла = "Нпп" Тогда
			
			одПропустить(ФайлОбмена);
			
		ИначеЕсли (ИмяУзла = "Свойство") И (ФайлОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			
			Прервать;
			
		Иначе
			
			ЗаписатьВПротоколВыполнения(9);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Значение;
	
КонецФункции // ПрочитатьСвойство() 

Функция СоздатьНовыйОбъектПриНеобходимости(СсылкаНаОбъект, ТипОбъекта, СвойстваПоиска, ОбъектНайден, СозданныйОбъект = Неопределено)
	
	Если СсылкаНаОбъект = Неопределено
		ИЛИ СсылкаНаОбъект.Пустая() Тогда
				
		ОбъектНайден = Ложь;
		СсылкаНаОбъект = СоздатьНовыйОбъект(ТипОбъекта, СвойстваПоиска, СозданныйОбъект);
		Возврат Истина;
		
	Иначе 
		
		Возврат Ложь;
				
	КонецЕсли; 
	
КонецФункции

Функция УстановитьРеквизитыПоискаУОбъекта(НайденныйОбъект, СвойстваПоиска, СвойстваПоискаНеЗамещать, 
	НужноСравниватьСТекущимиРеквизитами = Истина, НЕЗаменятьСвойстваНеПодежащиеИзменению = Истина)
	
	ИзмененыРеквизитыОбъекта = НЕ НужноСравниватьСТекущимиРеквизитами;
				
	Для каждого Свойство Из СвойстваПоиска Цикл
					
		Имя      = Свойство.Ключ;
		Значение = Свойство.Значение;
		
		Если НЕЗаменятьСвойстваНеПодежащиеИзменению
			И СвойстваПоискаНеЗамещать[Имя] <> Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
					
		Если Имя = "ЭтоГруппа" 
			ИЛИ Имя = "{УникальныйИдентификатор}" 
			ИЛИ Имя = "{ИмяПредопределенногоЭлемента}" Тогда
						
			Продолжить;
						
		ИначеЕсли Имя = "ПометкаУдаления" Тогда
						
			Если ИзмененыРеквизитыОбъекта
				ИЛИ НайденныйОбъект.ПометкаУдаления <> Значение Тогда
							
				НайденныйОбъект.ПометкаУдаления = Значение;
				ИзмененыРеквизитыОбъекта = Истина;
							
			КонецЕсли;
						
		Иначе
				
			// отличные реквизиты устанавливаем
			Если ИзмененыРеквизитыОбъекта
				ИЛИ НайденныйОбъект[Имя] <> Значение Тогда
					
				НайденныйОбъект[Имя] = Значение;
				ИзмененыРеквизитыОбъекта = Истина;
					
			КонецЕсли;
				
		КонецЕсли;
					
	КонецЦикла;
	
	Возврат ИзмененыРеквизитыОбъекта;
	
КонецФункции

Функция НайтиИлиСоздатьОбъектПоСвойству(СтруктураСвойств, ТипОбъекта, СвойстваПоиска, СвойстваПоискаНеЗамещать,
	ИмяТипаОбъекта, СвойствоПоиска, ЗначениеСвойстваПоиска, ОбъектНайден, 
	СоздаватьНовыйЭлементЕслиНеНайден = Истина, НайденныйИлиСозданныйОбъект = Неопределено)
	
	Объект = одНайтиОбъектПоСвойству(СтруктураСвойств.Менеджер, СвойствоПоиска, ЗначениеСвойстваПоиска, НайденныйИлиСозданныйОбъект);
	
	ОбъектНайденИлиСоздан = НЕ (Объект = Неопределено
				ИЛИ Объект.Пустая());	
		
	ОбъектНайден = НЕ Объект.Пустая();	
	
	Если НЕ ОбъектНайденИлиСоздан 
		И СоздаватьНовыйЭлементЕслиНеНайден Тогда
		
		НовыйОбъектСоздан = СоздатьНовыйОбъектПриНеобходимости(Объект, ТипОбъекта, СвойстваПоиска, ОбъектНайден, НайденныйИлиСозданныйОбъект);
		
		Если НовыйОбъектСоздан Тогда
			Возврат Объект;
		КонецЕсли;
	
	КонецЕсли;	
		
    // объект найден, но не создан
	Попытка
		
		Если НайденныйИлиСозданныйОбъект = Неопределено Тогда
			НайденныйИлиСозданныйОбъект = Объект.ПолучитьОбъект();
		КонецЕсли;
		
	Исключение
		Возврат Объект;
	КонецПопытки;
		
	ИзмененыРеквизитыОбъекта = УстановитьРеквизитыПоискаУОбъекта(НайденныйИлиСозданныйОбъект, СвойстваПоиска, СвойстваПоискаНеЗамещать);
			
	// если было то что изменено, тогда перезаписываем объект
	Если ИзмененыРеквизитыОбъекта Тогда
			
		УстановитьОбменДаннымиЗагрузка(НайденныйИлиСозданныйОбъект);
		НайденныйИлиСозданныйОбъект.Записать();
			
	КонецЕсли;
		
	Возврат НайденныйИлиСозданныйОбъект.Ссылка;
	
КонецФункции

Процедура ПрочитатьСвойстваПоискаИзФайла(СвойстваПоиска, СвойстваПоискаНеЗамещать)
	
	Пока ФайлОбмена.Прочитать() Цикл
		
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
				
		Если ИмяУзла = "Свойство" Тогда
			
			Имя                 = одАтрибут(ФайлОбмена, одТипСтрока, "Имя");
			ТипСвойства         = Тип(одАтрибут(ФайлОбмена, одТипСтрока, "Тип"));
			НеЗамещатьСвойство 	= одАтрибут(ФайлОбмена, одТипБулево, "НеЗамещать"); 
			
			ЗначениеСвойства    = ПрочитатьСвойство(ТипСвойства);
			
			Если (Имя = "ЭтоГруппа") И (ЗначениеСвойства <> Истина) Тогда
				
				ЗначениеСвойства = Ложь;
												
			КонецЕсли; 
			
			СвойстваПоиска[Имя] = ЗначениеСвойства;
			
			Если НеЗамещатьСвойство Тогда
				
				СвойстваПоискаНеЗамещать[Имя] = Истина;
				
			КонецЕсли;
			
		ИначеЕсли (ИмяУзла = "Ссылка") И (ФайлОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			
			Прервать;
			
		Иначе
			
			ЗаписатьВПротоколВыполнения(9);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Функция НайтиЭлементЗапросом(СтруктураСвойств, СвойстваПоиска, ТипОбъекта = Неопределено, МенеджерТипа = Неопределено)
	
	Если СвойстваПоиска.Количество() = 0
		И СтруктураСвойств.ИмяТипа = "Перечисление" Тогда
		
		Возврат СтруктураСвойств.ПустаяСсылка;
		
	КонецЕсли;
	
	ЗапросПоиска       = Новый Запрос();
	ТекстЗапроса       = СтруктураСвойств.СтрокаПоиска;
	
	КоличествоСвойстПоКоторымУстановленПоиск = 0;
			
	Для каждого Свойство Из СвойстваПоиска Цикл
				
		ИмяПараметра      = Свойство.Ключ;
		
		// не по всем параметрам можно искать
		Если ИмяПараметра = "{УникальныйИдентификатор}"
			ИЛИ ИмяПараметра = "{ИмяПредопределенногоЭлемента}" Тогда
						
			Продолжить;
						
		КонецЕсли;
		
		ЗначениеПараметра = Свойство.Значение;
		ЗапросПоиска.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра);
				
		Попытка
			
			МенеджерТипа = ?(МенеджерТипа = Неопределено, Менеджеры[ТипОбъекта], МенеджерТипа);
			
			Длина = МенеджерТипа.ОбъектМД.Реквизиты[ИмяПараметра].Тип.КвалификаторыСтроки.Длина;
					
			СтрокаНеограниченнойДлины = (Длина = 0) И (ТипЗнч(ЗначениеПараметра) = одТипСтрока)
				И МенеджерТипа.ОбъектМД.Реквизиты[ИмяПараметра].Тип.СодержитТип(одТипСтрока);
										
		Исключение
					
			СтрокаНеограниченнойДлины = Ложь;
					
		КонецПопытки;
		
		КоличествоСвойстПоКоторымУстановленПоиск = КоличествоСвойстПоКоторымУстановленПоиск + 1;
				
		Если СтрокаНеограниченнойДлины Тогда
					
			ТекстЗапроса = ТекстЗапроса + ?(КоличествоСвойстПоКоторымУстановленПоиск > 1, " И ", "") + ИмяПараметра + " ПОДОБНО &" + ИмяПараметра;
					
		Иначе
					
			ТекстЗапроса = ТекстЗапроса + ?(КоличествоСвойстПоКоторымУстановленПоиск > 1, " И ", "") + ИмяПараметра + " = &" + ИмяПараметра;
					
		КонецЕсли;
								
	КонецЦикла;
	
	Если КоличествоСвойстПоКоторымУстановленПоиск = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗапросПоиска.Текст = ТекстЗапроса;
	Результат = ЗапросПоиска.Выполнить();
			
	Если Результат.Пустой() Тогда
		
		Возврат Неопределено;
								
	Иначе
		
		// возвращаем первый найденный объект
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СсылкаНаОбъект = Выборка.Ссылка;
				
	КонецЕсли;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция ОпределитьПоТипуОбъектаИспользоватьДополнительныйПоискПоПолямПоиска(ТипСсылкиСтрокой)
	
	ЗначениеСоотвестствия = мСоответсвиеДопПараметровПоиска.Получить(ТипСсылкиСтрокой);
	
	Если ЗначениеСоотвестствия <> Неопределено Тогда
		Возврат ЗначениеСоотвестствия;
	КонецЕсли;
	
	Попытка
	
		Для Каждого Элемент Из Правила Цикл
			
			Если Элемент.Значение.Приемник = ТипСсылкиСтрокой Тогда
				
				Если Элемент.Значение.СинхронизироватьПоИдентификатору = Истина Тогда
					
					НужноПродолжитьПоиск = (Элемент.Значение.ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли = Истина);
					мСоответсвиеДопПараметровПоиска.Вставить(ТипСсылкиСтрокой, НужноПродолжитьПоиск);
					
					Возврат НужноПродолжитьПоиск;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		мСоответсвиеДопПараметровПоиска.Вставить(ТипСсылкиСтрокой, Ложь);
		Возврат Ложь;
	
	Исключение
		
		мСоответсвиеДопПараметровПоиска.Вставить(ТипСсылкиСтрокой, Ложь);
		Возврат Ложь;
	
    КонецПопытки;
	
КонецФункции

Функция ОпределитьПоТипуОбъектаАлгоритмПоследовательностиПолейПоиска(ТипСсылкиСтрокой)
	
	ЗначениеСоотвестствия = мСоответсвиеАлгоритмовПоискаЭлементов.Получить(ТипСсылкиСтрокой);
	
	Если ЗначениеСоотвестствия <> Неопределено Тогда
		Возврат ЗначениеСоотвестствия;
	КонецЕсли;
	
	Попытка
	
		Для Каждого Элемент Из Правила Цикл
			
			Если Элемент.Значение.Приемник = ТипСсылкиСтрокой Тогда
				
				Если Элемент.Значение.ЕстьОбработчикПоследовательностьПолейПоиска = Истина Тогда
					
					АлгоритмПоиска = Элемент.Значение.ПоследовательностьПолейПоиска;
					мСоответсвиеАлгоритмовПоискаЭлементов.Вставить(ТипСсылкиСтрокой, АлгоритмПоиска);
					
					Возврат АлгоритмПоиска;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		мСоответсвиеАлгоритмовПоискаЭлементов.Вставить(ТипСсылкиСтрокой, "");
		Возврат "";
	
	Исключение
		
		мСоответсвиеАлгоритмовПоискаЭлементов.Вставить(ТипСсылкиСтрокой, "");
		Возврат "";
	
    КонецПопытки;
	
КонецФункции

Функция НайтиСсылкуНаОбъектПоОдномуСвойству(СвойстваПоиска, СтруктураСвойств)
	
	Для каждого Свойство Из СвойстваПоиска Цикл
					
		ИмяПараметра      = Свойство.Ключ;
					
		// не по всем параметрам можно искать
		Если ИмяПараметра = "{УникальныйИдентификатор}"
			ИЛИ ИмяПараметра = "{ИмяПредопределенногоЭлемента}" Тогда
						
			Продолжить;
						
		КонецЕсли;
					
		ЗначениеПараметра = Свойство.Значение;
		СсылкаНаОбъект    = одНайтиОбъектПоСвойству(СтруктураСвойств.Менеджер, ИмяПараметра, ЗначениеПараметра, , СтруктураСвойств, СвойстваПоиска);
					
	КонецЦикла;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция НайтиСсылкуНаДокумент(СвойстваПоиска, СтруктураСвойств, КоличествоРеальныхСвойствДляПоиска, ИскатьЗапросом)
	
	// попробуем документ по дате и номеру найти
	ИскатьЗапросом = (КоличествоРеальныхСвойствДляПоиска <> 2);
				
	Если ИскатьЗапросом Тогда
		Возврат Неопределено;
	КонецЕсли;
					
	НомерДокумента = СвойстваПоиска["Номер"];
	ДатаДокумента  = СвойстваПоиска["Дата"];
					
	Если (НомерДокумента <> Неопределено) И (ДатаДокумента <> Неопределено) Тогда
						
		СсылкаНаОбъект = СтруктураСвойств.Менеджер.НайтиПоНомеру(НомерДокумента, ДатаДокумента);
																		
	Иначе
						
		// по дате и номеру найти не удалось - надо искать запросом
		ИскатьЗапросом = Истина;
		СсылкаНаОбъект = Неопределено;
						
	КонецЕсли;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция НайтиСсылкуНаСправочник(СвойстваПоиска, СтруктураСвойств, КоличествоРеальныхСвойствДляПоиска, ИскатьЗапросом)
	
	Владелец     = СвойстваПоиска["Владелец"];
	Родитель     = СвойстваПоиска["Родитель"];
	Код          = СвойстваПоиска["Код"];
	Наименование = СвойстваПоиска["Наименование"];
				
	Кол          = 0;
				
	Если Владелец <> Неопределено Тогда	Кол = 1 + Кол; КонецЕсли;
	Если Родитель <> Неопределено Тогда	Кол = 1 + Кол; КонецЕсли;
	Если Код <> Неопределено Тогда Кол = 1 + Кол; КонецЕсли;
	Если Наименование <> Неопределено Тогда	Кол = 1 + Кол; КонецЕсли;
				
	ИскатьЗапросом = (Кол <> КоличествоРеальныхСвойствДляПоиска);
				
	Если ИскатьЗапросом Тогда
		Возврат Неопределено;
	КонецЕсли;
					
	Если (Код <> Неопределено) И (Наименование = Неопределено) Тогда
						
		СсылкаНаОбъект = СтруктураСвойств.Менеджер.НайтиПоКоду(Код, , Родитель, Владелец);
																		
	ИначеЕсли (Код = Неопределено) И (Наименование <> Неопределено) Тогда
						
		СсылкаНаОбъект = СтруктураСвойств.Менеджер.НайтиПоНаименованию(Наименование, ИСТИНА, Родитель, Владелец);
											
	Иначе
						
		ИскатьЗапросом = Истина;
		СсылкаНаОбъект = Неопределено;
						
	КонецЕсли;
															
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция НайтиСсылкуНаПВХ(СвойстваПоиска, СтруктураСвойств, КоличествоРеальныхСвойствДляПоиска, ИскатьЗапросом)
	
	Родитель     = СвойстваПоиска["Родитель"];
	Код          = СвойстваПоиска["Код"];
	Наименование = СвойстваПоиска["Наименование"];
	Кол          = 0;
				
	Если Родитель     <> Неопределено Тогда	Кол = 1 + Кол КонецЕсли;
	Если Код          <> Неопределено Тогда Кол = 1 + Кол КонецЕсли;
	Если Наименование <> Неопределено Тогда	Кол = 1 + Кол КонецЕсли;
				
	ИскатьЗапросом = (Кол <> КоличествоРеальныхСвойствДляПоиска);
				
	Если ИскатьЗапросом Тогда
		Возврат Неопределено;
	КонецЕсли;
					
	Если     (Код <> Неопределено) И (Наименование = Неопределено) Тогда
						
		СсылкаНаОбъект = СтруктураСвойств.Менеджер.НайтиПоКоду(Код, Родитель);
												
	ИначеЕсли (Код = Неопределено) И (Наименование <> Неопределено) Тогда
						
		СсылкаНаОбъект = СтруктураСвойств.Менеджер.НайтиПоНаименованию(Наименование, ИСТИНА, Родитель);
																	
	Иначе
						
		ИскатьЗапросом = Истина;
		СсылкаНаОбъект = Неопределено;
			
	КонецЕсли;
															
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция НайтиСсылкуНаПланОбмена(СвойстваПоиска, СтруктураСвойств, КоличествоРеальныхСвойствДляПоиска, ИскатьЗапросом)
	
	Код          = СвойстваПоиска["Код"];
	Наименование = СвойстваПоиска["Наименование"];
	Кол          = 0;
				
	Если Код          <> Неопределено Тогда Кол = 1 + Кол КонецЕсли;
	Если Наименование <> Неопределено Тогда	Кол = 1 + Кол КонецЕсли;
				
	ИскатьЗапросом = (Кол <> КоличествоРеальныхСвойствДляПоиска);
				
	Если ИскатьЗапросом Тогда
		Возврат Неопределено;
	КонецЕсли;
					
	Если     (Код <> Неопределено) И (Наименование = Неопределено) Тогда
						
		СсылкаНаОбъект = СтруктураСвойств.Менеджер.НайтиПоКоду(Код);
												
	ИначеЕсли (Код = Неопределено) И (Наименование <> Неопределено) Тогда
						
		СсылкаНаОбъект = СтруктураСвойств.Менеджер.НайтиПоНаименованию(Наименование, ИСТИНА);
																	
	Иначе
						
		ИскатьЗапросом = Истина;
		СсылкаНаОбъект = Неопределено;
						
	КонецЕсли;
															
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция НайтиСсылкуНаЗадачу(СвойстваПоиска, СтруктураСвойств, КоличествоРеальныхСвойствДляПоиска, ИскатьЗапросом)
	
	Код          = СвойстваПоиска["Номер"];
	Наименование = СвойстваПоиска["Наименование"];
	Кол          = 0;
				
	Если Код          <> Неопределено Тогда Кол = 1 + Кол КонецЕсли;
	Если Наименование <> Неопределено Тогда	Кол = 1 + Кол КонецЕсли;
				
	ИскатьЗапросом = (Кол <> КоличествоРеальныхСвойствДляПоиска);
				
	Если ИскатьЗапросом Тогда
		Возврат Неопределено;
	КонецЕсли;
	
					
	Если     (Код <> Неопределено) И (Наименование = Неопределено) Тогда
						
		СсылкаНаОбъект = СтруктураСвойств.Менеджер.НайтиПоНомеру(Код);
												
	ИначеЕсли (Код = Неопределено) И (Наименование <> Неопределено) Тогда
						
		СсылкаНаОбъект = СтруктураСвойств.Менеджер.НайтиПоНаименованию(Наименование, ИСТИНА);
																	
	Иначе
						
		ИскатьЗапросом = Истина;
		СсылкаНаОбъект = Неопределено;
						
	КонецЕсли;
															
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция НайтиСсылкуНаБизнесПроцесс(СвойстваПоиска, СтруктураСвойств, КоличествоРеальныхСвойствДляПоиска, ИскатьЗапросом)
	
	Код          = СвойстваПоиска["Номер"];
	Кол          = 0;
				
	Если Код <> Неопределено Тогда Кол = 1 + Кол КонецЕсли;
								
	ИскатьЗапросом = (Кол <> КоличествоРеальныхСвойствДляПоиска);
				
	Если ИскатьЗапросом Тогда
		Возврат Неопределено;
	КонецЕсли;
					
	Если  (Код <> Неопределено) Тогда
						
		СсылкаНаОбъект = СтруктураСвойств.Менеджер.НайтиПоНомеру(Код);
												
	Иначе
						
		ИскатьЗапросом = Истина;
		СсылкаНаОбъект = Неопределено;
						
	КонецЕсли;
															
	Возврат СсылкаНаОбъект;
	
КонецФункции

Процедура ДобавитьСсылкуВСписокЗагруженныхОбъектов(НппСсылки, СсылкаНаОбъект)
	
	// запоминаем ссылку на объект
	Если ЗапоминатьЗагруженныеОбъекты 
		И НппСсылки <> 0 Тогда
		
		ЗагруженныеОбъекты[НппСсылки] = СсылкаНаОбъект;
						
	КонецЕсли;	
	
КонецПроцедуры

Функция НайтиЭлементПоСвойствамПоиска(ТипОбъекта, ИмяТипаОбъекта, СвойстваПоиска, 
	СтруктураСвойств, СтрокаИменСвойствПоиска)
	
	// не нужно искать по имени предопределенного элемента и по уникальной ссылке на объект
	// нужно искать только по тем свойствам, которые имеются в строке имен свойств. Если там пусто, то по
	// всем имеющимся свойствам поиска
		
	ИскатьЗапросом = Ложь;	
	
	Если ПустаяСтрока(СтрокаИменСвойствПоиска) Тогда
		
		ВременныеСвойстваПоиска = СвойстваПоиска;
		
	Иначе
		
		ГотоваяСтрокаДляРазбора = СтрЗаменить(СтрокаИменСвойствПоиска, " ", "");
		ДлинаСтроки = СтрДлина(ГотоваяСтрокаДляРазбора);
		Если Сред(ГотоваяСтрокаДляРазбора, ДлинаСтроки, 1) <> "," Тогда
			
			ГотоваяСтрокаДляРазбора = ГотоваяСтрокаДляРазбора + ",";
			
		КонецЕсли;
		
		ВременныеСвойстваПоиска = Новый Соответствие;
		Для Каждого ЭлементСвойств Из СвойстваПоиска Цикл
			
			ИмяПараметра = ЭлементСвойств.Ключ;
			Если Найти(ГотоваяСтрокаДляРазбора, ИмяПараметра + ",") > 0 Тогда
				
				ВременныеСвойстваПоиска.Вставить(ИмяПараметра, ЭлементСвойств.Значение); 	
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СвойствоУникальныйИдентификатор = ВременныеСвойстваПоиска["{УникальныйИдентификатор}"];
	СвойствоИмяПредопределенного = ВременныеСвойстваПоиска["{ИмяПредопределенногоЭлемента}"];
	
	КоличествоРеальныхСвойствДляПоиска = ВременныеСвойстваПоиска.Количество();
	КоличествоРеальныхСвойствДляПоиска = КоличествоРеальныхСвойствДляПоиска - ?(СвойствоУникальныйИдентификатор <> Неопределено, 1, 0);
	КоличествоРеальныхСвойствДляПоиска = КоличествоРеальныхСвойствДляПоиска - ?(СвойствоИмяПредопределенного <> Неопределено, 1, 0);
	
	
	Если КоличествоРеальныхСвойствДляПоиска = 1 Тогда
				
		СсылкаНаОбъект = НайтиСсылкуНаОбъектПоОдномуСвойству(ВременныеСвойстваПоиска, СтруктураСвойств);
																						
	ИначеЕсли ИмяТипаОбъекта = "Документ" Тогда
				
		СсылкаНаОбъект = НайтиСсылкуНаДокумент(ВременныеСвойстваПоиска, СтруктураСвойств, КоличествоРеальныхСвойствДляПоиска, ИскатьЗапросом);
											
	ИначеЕсли ИмяТипаОбъекта = "Справочник" Тогда
				
		СсылкаНаОбъект = НайтиСсылкуНаСправочник(ВременныеСвойстваПоиска, СтруктураСвойств, КоличествоРеальныхСвойствДляПоиска, ИскатьЗапросом);
								
	ИначеЕсли ИмяТипаОбъекта = "ПланВидовХарактеристик" Тогда
				
		СсылкаНаОбъект = НайтиСсылкуНаПВХ(ВременныеСвойстваПоиска, СтруктураСвойств, КоличествоРеальныхСвойствДляПоиска, ИскатьЗапросом);
							
	ИначеЕсли ИмяТипаОбъекта = "ПланОбмена" Тогда
				
		СсылкаНаОбъект = НайтиСсылкуНаПланОбмена(ВременныеСвойстваПоиска, СтруктураСвойств, КоличествоРеальныхСвойствДляПоиска, ИскатьЗапросом);
							
	ИначеЕсли ИмяТипаОбъекта = "Задача" Тогда
				
		СсылкаНаОбъект = НайтиСсылкуНаЗадачу(ВременныеСвойстваПоиска, СтруктураСвойств, КоличествоРеальныхСвойствДляПоиска, ИскатьЗапросом);
												
	ИначеЕсли ИмяТипаОбъекта = "БизнесПроцесс" Тогда
				
		СсылкаНаОбъект = НайтиСсылкуНаБизнесПроцесс(ВременныеСвойстваПоиска, СтруктураСвойств, КоличествоРеальныхСвойствДляПоиска, ИскатьЗапросом);
									
	Иначе
				
		ИскатьЗапросом = Истина;
				
	КонецЕсли;
		
	Если ИскатьЗапросом Тогда
			
		СсылкаНаОбъект = НайтиЭлементЗапросом(СтруктураСвойств, ВременныеСвойстваПоиска, ТипОбъекта);
				
	КонецЕсли;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Процедура ОбработатьУстановкуСвойствПоискаУОбъекта(УстанавливатьУОбъектаВсеСвойстваПоиска, СвойстваПоиска, СвойстваПоискаНеЗамещать, СсылкаНаОбъект, СозданныйОбъект)
	
	Если УстанавливатьУОбъектаВсеСвойстваПоиска <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Если СозданныйОбъект = Неопределено Тогда
			СозданныйОбъект = СсылкаНаОбъект.ПолучитьОбъект();
		КонецЕсли;
		
	Исключение
		Возврат;
	КонецПопытки;
		
	ИзмененыРеквизитыОбъекта = УстановитьРеквизитыПоискаУОбъекта(СозданныйОбъект, СвойстваПоиска, СвойстваПоискаНеЗамещать);
			
	// если было то что изменено, тогда перезаписываем объект
	Если ИзмененыРеквизитыОбъекта Тогда
			
		УстановитьОбменДаннымиЗагрузка(СозданныйОбъект);
		СозданныйОбъект.Записать();
			
	КонецЕсли;	
	
КонецПроцедуры

// Производит поиск объекта в информационной базе, если не найден создает новый
//
// Параметры:
//  ТипОбъекта     - тип искомого объекта
//  СвойстваПоиска - структура, содержащая свойства по которым производится поиск объекта
//  ОбъектНайден   - если Ложь, то объект не найден, а создан новый
//
// Возвращаемое значение:
//  Новый или найденный объект информационной базы
//  
Функция НайтиОбъектПоСсылке(ТипОбъекта, 
							СвойстваПоиска = "", 
							СвойстваПоискаНеЗамещать = "", 
							ОбъектНайден = Истина, 
							СозданныйОбъект = Неопределено, 
							НеСоздаватьОбъектЕслиНеНайден = Неопределено)

	Если ЗапоминатьЗагруженныеОбъекты Тогда
		
		// есть номер по порядку из файла - по нему и ищем
		НппСсылки = одАтрибут(ФайлОбмена, одТипЧисло, "Нпп");
		
		СсылкаНаОбъект    = НайтиОбъектПоНомеру(НппСсылки);
		
		// СсылкаНаОбъект нашли, дальше ничего не читаем по этому объекту
		Если СсылкаНаОбъект <> Неопределено Тогда
			
			одПропустить(ФайлОбмена);
			Возврат СсылкаНаОбъект;
			
		КонецЕсли;		
		
	КонецЕсли;
	
	НеСоздаватьОбъектЕслиНеНайден = одАтрибут(ФайлОбмена, одТипБулево, "НеСоздаватьЕслиНеНайден");
	
	// создаем свойства поиска объектов
	Если СвойстваПоиска = "" Тогда
		СвойстваПоиска = Новый Соответствие;		
	КонецЕсли;
	
	Если СвойстваПоискаНеЗамещать = "" Тогда
		СвойстваПоискаНеЗамещать = Новый Соответствие;		
	КонецЕсли;	
	
	ПрочитатьСвойстваПоискаИзФайла(СвойстваПоиска, СвойстваПоискаНеЗамещать);	
	
	СозданныйОбъект = Неопределено;
	
	Если Не ОбъектНайден Тогда
		
		СсылкаНаОбъект = СоздатьНовыйОбъект(ТипОбъекта, СвойстваПоиска, СозданныйОбъект);
		ДобавитьСсылкуВСписокЗагруженныхОбъектов(НппСсылки, СсылкаНаОбъект);
		Возврат СсылкаНаОбъект;
		
	КонецЕсли;		
	
		
	СсылкаНаОбъект = Неопределено;
		
	СтруктураСвойств   = Менеджеры[ТипОбъекта];
	ИмяТипаОбъекта     = СтруктураСвойств.ИмяТипа;
		
	СвойствоУникальныйИдентификатор = СвойстваПоиска["{УникальныйИдентификатор}"];
	СвойствоИмяПредопределенного = СвойстваПоиска["{ИмяПредопределенногоЭлемента}"];
			
		
	// если это предопределенныей элемемент ищем по имени
	Если СвойствоИмяПредопределенного <> Неопределено Тогда
			
		СсылкаНаОбъект = НайтиИлиСоздатьОбъектПоСвойству(СтруктураСвойств, ТипОбъекта, СвойстваПоиска, СвойстваПоискаНеЗамещать,
			ИмяТипаОбъекта, "{ИмяПредопределенногоЭлемента}", СвойствоИмяПредопределенного, ОбъектНайден, НЕ НеСоздаватьОбъектЕслиНеНайден, СозданныйОбъект);
									
	ИначеЕсли (СвойствоУникальныйИдентификатор <> Неопределено) Тогда
			
		// не всегда нужно по уникальному идентификатору новый элемент создавать, возможно нужно продолжить поиск !!!
									
		НужноПродолжитьПоискЕслиЭлементПоGUIDНеНайден = ОпределитьПоТипуОбъектаИспользоватьДополнительныйПоискПоПолямПоиска(СтруктураСвойств.ТипСсылкиСтрокой);
			
		СсылкаНаОбъект = НайтиИлиСоздатьОбъектПоСвойству(СтруктураСвойств, ТипОбъекта, СвойстваПоиска, СвойстваПоискаНеЗамещать,
			ИмяТипаОбъекта, "{УникальныйИдентификатор}", СвойствоУникальныйИдентификатор, 
			ОбъектНайден, НЕ НеСоздаватьОбъектЕслиНеНайден И НЕ НужноПродолжитьПоискЕслиЭлементПоGUIDНеНайден, СозданныйОбъект);
			
		Если Не НужноПродолжитьПоискЕслиЭлементПоGUIDНеНайден Тогда
				
			ДобавитьСсылкуВСписокЗагруженныхОбъектов(НппСсылки, СсылкаНаОбъект);
			Возврат СсылкаНаОбъект;	
			
		КонецЕсли;	
							
	КонецЕсли;
		
	Если СсылкаНаОбъект <> Неопределено 
		И СсылкаНаОбъект.Пустая() Тогда
				
		СсылкаНаОбъект = Неопределено;
				
	КонецЕсли;
		
	// СсылкаНаОбъект пока не найден
	Если СсылкаНаОбъект <> Неопределено Тогда
		
		ДобавитьСсылкуВСписокЗагруженныхОбъектов(НппСсылки, СсылкаНаОбъект);
		Возврат СсылкаНаОбъект;
		
	КонецЕсли;
			
	НомерВариантаПоиска = 1;
	СтрокаИменСвойствПоиска = "";
	ПредыдущаяСтрокаПоиска = Неопределено;
	ПрекратитьПоиск = Ложь;
	УстанавливатьУОбъектаВсеСвойстваПоиска = Истина;
	
	Пока НомерВариантаПоиска <= 10 Цикл
		
		// событие для определения очередного варианта поиска
		// если есть событие вызываем его и определяем очередной вариант поиска
		
		АлгоритмПоиска = ОпределитьПоТипуОбъектаАлгоритмПоследовательностиПолейПоиска(СтруктураСвойств.ТипСсылкиСтрокой);
		
		Если Не ПустаяСтрока(АлгоритмПоиска) Тогда
			
			Если ФлагРежимОтладки Тогда
				
				Попытка
					
					Выполнить(АлгоритмПоиска);
					
				Исключение
					
					ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(73, ОписаниеОшибки(), "", "", 
						ТипОбъекта, Неопределено, "Последовательность полей поиска");				
									
				КонецПопытки;
				
			Иначе
				
				Выполнить(АлгоритмПоиска);
				
			КонецЕсли;
			
			Если ПрекратитьПоиск = Истина 
				ИЛИ СтрокаИменСвойствПоиска = ПредыдущаяСтрокаПоиска
				ИЛИ (СсылкаНаОбъект <> Неопределено
					И НЕ СсылкаНаОбъект.Пустая()) Тогда
					
				ОбработатьУстановкуСвойствПоискаУОбъекта(УстанавливатьУОбъектаВсеСвойстваПоиска, СвойстваПоиска, СвойстваПоискаНеЗамещать, СсылкаНаОбъект, СозданныйОбъект);	
				
				Прервать;
				
			КонецЕсли;
			
		КонецЕсли;
				
				
		// сам поиск непосредственно
		СсылкаНаОбъект = НайтиЭлементПоСвойствамПоиска(ТипОбъекта, ИмяТипаОбъекта, СвойстваПоиска, СтруктураСвойств, 
			СтрокаИменСвойствПоиска);			
		
		Если СсылкаНаОбъект <> Неопределено
			И НЕ СсылкаНаОбъект.Пустая() Тогда
			
			Если Не ПустаяСтрока(АлгоритмПоиска) Тогда
				
				ОбработатьУстановкуСвойствПоискаУОбъекта(УстанавливатьУОбъектаВсеСвойстваПоиска, СвойстваПоиска, СвойстваПоискаНеЗамещать, СсылкаНаОбъект, СозданныйОбъект);
				
			ИначеЕсли ИмяТипаОбъекта = "Документ" Тогда
				
				// если у документа дата есть в свойствах поиска - то устанавливаем ее
				ДатаПустая = одПустое(СвойстваПоиска["Дата"]);
				МожноЗамещать = (Не ДатаПустая) 
					И (СвойстваПоискаНеЗамещать["Дата"] = Неопределено);
					
				Если МожноЗамещать Тогда
					
					Если СозданныйОбъект = Неопределено Тогда
						СозданныйОбъект = СсылкаНаОбъект.ПолучитьОбъект();
					КонецЕсли;
					
					СозданныйОбъект.Дата = СвойстваПоиска["Дата"];
						
				КонецЕсли;					
							
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
		НомерВариантаПоиска = НомерВариантаПоиска + 1;
		ПредыдущаяСтрокаПоиска = СтрокаИменСвойствПоиска;
		
		// нет смысла продолжать поиск если алгоритм поиска не указан, так как будут выполнены одни и те же действия
		Если ПустаяСтрока(АлгоритмПоиска) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	// создавать новый объект нужно не всегда
	Если НЕ НеСоздаватьОбъектЕслиНеНайден Тогда 
		СоздатьНовыйОбъектПриНеобходимости(СсылкаНаОбъект, ТипОбъекта, СвойстваПоиска, ОбъектНайден, СозданныйОбъект);	
	КонецЕсли;
			
	ДобавитьСсылкуВСписокЗагруженныхОбъектов(НппСсылки, СсылкаНаОбъект);
	Возврат СсылкаНаОбъект;
	
КонецФункции // НайтиОбъектПоСсылке() 

// Устанавливает свойства объекта (записи)
//
// Параметры:
//  Запись         - объект, свойства которого устанавливаем
//                   Например, строка табличной части или запись регистра
//
Процедура УстановитьСвойстваЗаписи(Запись)

	Пока ФайлОбмена.Прочитать() Цикл
		
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
				
		Если ИмяУзла = "Свойство" Тогда
			
			Имя = одАтрибут(ФайлОбмена, одТипСтрока, "Имя");
			
			Если Имя = "ВидДвижения" И Найти(Метаданные.НайтиПоТипу(ТипЗнч(Запись)).ПолноеИмя(), "РегистрНакопления") Тогда
				
				ТипСвойства = одТипВидДвиженияНакопления;
				
			Иначе
				
				ТипСвойства = Тип(одАтрибут(ФайлОбмена, одТипСтрока,  "Тип"));
				
			КонецЕсли;
				
			Запись[Имя] = ПрочитатьСвойство(ТипСвойства);
			
		ИначеЕсли ИмяУзла = "СубконтоДт" ИЛИ ИмяУзла = "СубконтоКт" Тогда
			
			Ключ = Неопределено;
			Значение = Неопределено;
			
			Пока ФайлОбмена.Прочитать() Цикл
				
				ИмяУзла = ФайлОбмена.ЛокальноеИмя;
								
				Если ИмяУзла = "Свойство" Тогда
					
					Имя = одАтрибут(ФайлОбмена, одТипСтрока, "Имя");
					ТипСвойства = Тип(одАтрибут(ФайлОбмена, одТипСтрока,  "Тип"));
					
					Если Имя = "Ключ" Тогда
						
						Ключ = ПрочитатьСвойство(ТипСвойства);
						
					ИначеЕсли Имя = "Значение" Тогда
						
						Значение = ПрочитатьСвойство(ТипСвойства);
						
					КонецЕсли;
					
				ИначеЕсли (ИмяУзла = "СубконтоДт" ИЛИ ИмяУзла = "СубконтоКт") И (ФайлОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
					
					Прервать;
					
				Иначе
					
					ЗаписатьВПротоколВыполнения(9);
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Ключ <> Неопределено И Значение <> Неопределено Тогда
				
				Запись[ИмяУзла][Ключ] = Значение;
				
			КонецЕсли;
				
		ИначеЕсли (ИмяУзла = "Запись") И (ФайлОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			
			Прервать;
			
		Иначе
			
			ЗаписатьВПротоколВыполнения(9);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьСвойстваЗаписи()

// Загружает табличную часть объекта
//
// Параметры:
//  Объект         - объект, табличную часть которого загружаем
//  Имя            - имя табличной части
//  Очистить       - если Истина, то табличная часть преварительно очищается
// 
Процедура ЗагрузитьТабличнуюЧасть(Объект, Имя, Очистить)

	ТЧ = Объект[Имя];

	Если Очистить Тогда
		
		Попытка
			ТЧ.Очистить();
		Исключение
			
		КонецПопытки;
		
	КонецЕсли;

	Пока ФайлОбмена.Прочитать() Цикл
		
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
				
		Если      ИмяУзла = "Запись" Тогда
			Попытка
				Запись = ТЧ.Добавить();
			Исключение
				Запись = Неопределено;
			КонецПопытки;
			
			Если Запись = Неопределено Тогда
				одПропустить(ФайлОбмена);
			Иначе
				УстановитьСвойстваЗаписи(Запись);
			КонецЕсли;
			
		ИначеЕсли (ИмяУзла = "ТабличнаяЧасть") И (ФайлОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			
			Прервать;
			
		Иначе
			
			ЗаписатьВПротоколВыполнения(9);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьТабличнуюЧасть() 

// Загружает движения объекта
//
// Параметры:
//  Объект         - объект, движения которого загружаем
//  Имя            - имя регистра
//  Очистить       - если Истина, то движения преварительно очищается
// 
Процедура ЗагрузитьДвижения(Объект, Имя, Очистить)

	Движения = Объект.Движения[Имя];

	Если Очистить Тогда
		
		Движения.Очистить();
		
	КонецЕсли;

	Пока ФайлОбмена.Прочитать() Цикл
		
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
			
		Если      ИмяУзла = "Запись" Тогда
			
			Запись = Движения.Добавить();
			УстановитьСвойстваЗаписи(Запись);
			
		ИначеЕсли (ИмяУзла = "НаборЗаписей") И (ФайлОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			
			Прервать;
			
		Иначе
			
			ЗаписатьВПротоколВыполнения(9);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьДвижения() 

// Загружает объект типа ОписаниеТипов из указанного xml-источника
//
// Параметры:
//  Источник         - xml-источник
// 
Функция ЗагрузитьТипыОбъекта(Источник)

	// КвалификаторыДаты

	СоставДаты =  одАтрибут(Источник, одТипСтрока,  "СоставДаты");

	
	// КвалификаторыСтроки

	Длина           =  одАтрибут(Источник, одТипЧисло,  "Длина");
	ДлинаДопустимая =  одАтрибут(Источник, одТипСтрока, "ДопустимаяДлина");

	
	// КвалификаторыЧисла

	Разрядность             = одАтрибут(Источник, одТипЧисло,  "Разрядность");
	РазрядностьДробнойЧасти = одАтрибут(Источник, одТипЧисло,  "РазрядностьДробнойЧасти");
	ЗнакДопустимый          = одАтрибут(Источник, одТипСтрока, "ДопустимыйЗнак");


	// Читаем массив типов
	
	МассивТипов = Новый Массив;
	
	Пока Источник.Прочитать() Цикл
		ИмяУзла = Источник.ЛокальноеИмя;
		
		Если      ИмяУзла = "Тип" Тогда
			МассивТипов.Добавить(Тип(одЗначениеЭлемента(Источник, одТипСтрока)));
		ИначеЕсли (ИмяУзла = "Типы") И ( Источник.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		Иначе
			ЗаписатьВПротоколВыполнения(9);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;


	
	Если МассивТипов.Количество() > 0 Тогда
		
		// КвалификаторыДаты
		
		Если СоставДаты = "Дата" Тогда
			КвалификаторыДаты   = Новый КвалификаторыДаты(ЧастиДаты.Дата);
		ИначеЕсли СоставДаты = "ДатаВремя" Тогда
			КвалификаторыДаты   = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
		ИначеЕсли СоставДаты = "Время" Тогда
			КвалификаторыДаты   = Новый КвалификаторыДаты(ЧастиДаты.Время);
		Иначе
			КвалификаторыДаты   = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
		КонецЕсли; 


		// КвалификаторыЧисла
		
		Если Разрядность > 0 Тогда
			Если ЗнакДопустимый = "Неотрицательный" Тогда
				Знак = ДопустимыйЗнак.Неотрицательный;
			Иначе
				Знак = ДопустимыйЗнак.Любой;
			КонецЕсли; 
			КвалификаторыЧисла  = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти, Знак);
		Иначе
			КвалификаторыЧисла  = Новый КвалификаторыЧисла();
		КонецЕсли; 


		// КвалификаторыСтроки

		Если Длина > 0 Тогда
			Если ДлинаДопустимая = "Фиксированная" Тогда
				ДлинаДопустимая = ДопустимаяДлина.Фиксированная;
			Иначе
				ДлинаДопустимая = ДопустимаяДлина.Переменная;
			КонецЕсли;
			КвалификаторыСтроки = Новый КвалификаторыСтроки(Длина, ДлинаДопустимая);
		Иначе
			КвалификаторыСтроки = Новый КвалификаторыСтроки();
		КонецЕсли; 
        
		Возврат Новый ОписаниеТипов(МассивТипов, КвалификаторыЧисла, КвалификаторыСтроки, КвалификаторыДаты);
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции // ЗагрузитьТипыОбъекта()

Процедура УстановитьПометкуУдаленияУОбъекта(Объект, ПометкаУдаления, ИмяТипаОбъекта)
	
	Если (ПометкаУдаления = Неопределено)
		И (Объект.ПометкаУдаления <> Истина) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПометкаДляУстановки = ?(ПометкаУдаления <> Неопределено, ПометкаУдаления, Ложь);
	
	УстановитьОбменДаннымиЗагрузка(Объект);
		
	// дли иерархических объектов пометку удаления только у конкретного объекта ставим
	Если ИмяТипаОбъекта = "Справочник"
		ИЛИ ИмяТипаОбъекта = "ПланВидовХарактеристик"
		ИЛИ ИмяТипаОбъекта = "ПланСчетов" Тогда
			
		Объект.УстановитьПометкуУдаления(ПометкаДляУстановки, Ложь);
			
	Иначе	
		
		Объект.УстановитьПометкуУдаления(ПометкаДляУстановки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДокументВБезопасномРежиме(Документ, ТипОбъекта)
	
	Если Документ.Проведен Тогда
						
		Документ.Проведен = Ложь;
			
	КонецЕсли;		
								
	ЗаписатьОбъектВИБ(Документ, ТипОбъекта);
	
КонецПроцедуры

Функция ПолучитьОбъектПоСсылкеИДопИнформации(СозданныйОбъект, Ссылка)
	
	// если объект создали, то работаем с ним, если нашли - получаем объект
	Если СозданныйОбъект <> Неопределено Тогда
		Объект = СозданныйОбъект;
	Иначе
		Объект = Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	Возврат Объект;
	
КонецФункции

Процедура КомментарииКЗагрузкеОбъекта(Нпп, ИмяПравила, Источник, ТипОбъекта)
	
	Если ФлагКомментироватьОбработкуОбъектов Тогда
		
		СтрокаСообщения = "Загрузка объекта № " + Нпп;
		ЗП = ПолучитьСтруктуруЗаписиПротокола();
		
		Если Не ПустаяСтрока(ИмяПравила) Тогда
			
			ЗП.ИмяПКО = ИмяПравила;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(Источник) Тогда
			
			ЗП.Источник = Источник;
			
		КонецЕсли;
		
		ЗП.ТипОбъекта = ТипОбъекта;
		ЗаписатьВПротоколВыполнения(СтрокаСообщения, ЗП, Ложь);
		
	КонецЕсли;	
	
КонецПроцедуры


// Читает очередной объект из файла обмена, производит загрузку
//
// Параметры:
//  Нет.
// 
Функция ПрочитатьОбъект()

	Нпп						= одАтрибут(ФайлОбмена, одТипЧисло,  "Нпп");
	Источник				= одАтрибут(ФайлОбмена, одТипСтрока, "Источник");
	ИмяПравила				= одАтрибут(ФайлОбмена, одТипСтрока, "ИмяПравила");
	НеЗамещатьОбъект 		= одАтрибут(ФайлОбмена, одТипБулево, "НеЗамещать");
	ПрефиксАвтонумерации	= одАтрибут(ФайлОбмена, одТипСтрока, "ПрефиксАвтонумерации");
	ТипОбъектаСтрокой       = одАтрибут(ФайлОбмена, одТипСтрока, "Тип");
	ТипОбъекта 				= Тип(ТипОбъектаСтрокой);

	КомментарииКЗагрузкеОбъекта(Нпп, ИмяПравила, Источник, ТипОбъекта);    
	
	СтруктураСвойств = Менеджеры[ТипОбъекта];
	ИмяТипаОбъекта   = СтруктураСвойств.ИмяТипа;

	Если ИмяТипаОбъекта = "Документ" Тогда
		
		РежимЗаписи     = одАтрибут(ФайлОбмена, одТипСтрока, "РежимЗаписи");
		РежимПроведения = одАтрибут(ФайлОбмена, одТипСтрока, "РежимПроведения");
		
	КонецЕсли;	
	
	Объект          = Неопределено;
	ОбъектНайден    = Истина;
	ПометкаУдаления = Неопределено;
	
	СвойстваПоиска  = Новый Соответствие;
	СвойстваПоискаНеЗамещать  = Новый Соответствие;


	Если Не ПустаяСтрока(ИмяПравила) Тогда
		
		Правило = Правила[ИмяПравила];
		ЕстьОбработчикПередЗагрузкой = Правило.ЕстьОбработчикПередЗагрузкой;
		ЕстьОбработчикПриЗагрузке    = Правило.ЕстьОбработчикПриЗагрузке;
		ЕстьОбработчикПослеЗагрузки  = Правило.ЕстьОбработчикПослеЗагрузки;
		
	Иначе
		
		ЕстьОбработчикПередЗагрузкой = Ложь;
		ЕстьОбработчикПриЗагрузке    = Ложь;
		ЕстьОбработчикПослеЗагрузки  = Ложь;
		
	КонецЕсли;


    // Глобальный обработчик события ПередЗагрузкойОбъекта
	Если ЕстьГлобальныйОбработчикПередЗагрузкойОбъекта Тогда
		
		Отказ = Ложь;
		
		Если ФлагРежимОтладки Тогда
			
			Попытка
				
				Выполнить(Конвертация.ПередЗагрузкойОбъекта);
				
			Исключение
				
				ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(53, ОписаниеОшибки(), ИмяПравила, Источник, 
					ТипОбъекта, Неопределено, "ПередЗагрузкойОбъекта (глобальный)");				
								
			КонецПопытки;
			
		Иначе
			
			Выполнить(Конвертация.ПередЗагрузкойОбъекта);
			
		КонецЕсли;
		
		Если Отказ Тогда	//	Отказ от загрузки объекта
			
			одПропустить(ФайлОбмена, "Объект");
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
    // Обработчик события ПередЗагрузкойОбъекта
	Если ЕстьОбработчикПередЗагрузкой Тогда
		
		Отказ = Ложь;
		
		Если ФлагРежимОтладки Тогда
			
			Попытка
				
				Выполнить(Правило.ПередЗагрузкой);
				
			Исключение
				
				ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(19, ОписаниеОшибки(), ИмяПравила, Источник, 
					ТипОбъекта, Неопределено, "ПередЗагрузкойОбъекта");				
								
			КонецПопытки;
			
		Иначе
					
			Выполнить(Правило.ПередЗагрузкой);
			
		КонецЕсли;
		
		Если Отказ Тогда // Отказ от загрузки объекта
			
			одПропустить(ФайлОбмена, "Объект");
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;

	
	Пока ФайлОбмена.Прочитать() Цикл
		
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
				
		Если ИмяУзла = "Свойство" Тогда
			
			Если Объект = Неопределено Тогда
				
				// объект не нашли и не создали - попробуем сейчас это сделать
				ОбъектНайден = Ложь;

			    // Обработчик события ПриЗагрузкеОбъекта
				Если ЕстьОбработчикПриЗагрузке Тогда
					
					Если ФлагРежимОтладки Тогда
						
						Попытка
							
							Выполнить(Правило.ПриЗагрузке);
							
						Исключение
							
							ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(20, ОписаниеОшибки(), ИмяПравила, Источник, 
								ТипОбъекта, Объект, "ПриЗагрузкеОбъекта");						
							
						КонецПопытки;
						
					Иначе
						
						Выполнить(Правило.ПриЗагрузке);
						
					КонецЕсли;
					
				КонецЕсли;

				// так м не смогли создать объект в событии - создаем его отдельно
				Если Объект = Неопределено Тогда
					
					Если ИмяТипаОбъекта = "РегистрСведений" Тогда
						
						Объект = СоздатьНовыйОбъект(ТипОбъекта, СвойстваПоиска);
						
					ИначеЕсли ИмяТипаОбъекта = "Константы" Тогда
						
						Объект = Константы.СоздатьНабор();
						Объект.Прочитать();
						
					Иначе
						
						Ссылка = СоздатьНовыйОбъект(ТипОбъекта, СвойстваПоиска, Объект);
												
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Имя                = одАтрибут(ФайлОбмена, одТипСтрока, "Имя");
			НеЗамещатьСвойство = одАтрибут(ФайлОбмена, одТипБулево, "НеЗамещать");

			
			Если (ОбъектНайден И НеЗамещатьСвойство) 
				ИЛИ (Имя = "ЭтоГруппа") 
				ИЛИ (Объект[Имя] = NULL) Тогда
				
				// неизвестное свойство
				одПропустить(ФайлОбмена, "Свойство");
				Продолжить;
				
			КонецЕсли; 

			
			// читаем и устанавливаем значение свойства
			ТипСвойства = Тип(одАтрибут(ФайлОбмена, одТипСтрока,  "Тип"));
			Значение    = ПрочитатьСвойство(ТипСвойства);

			
			Если Имя = "ПометкаУдаления" Тогда
				
				ПометкаУдаления = Значение;
				
			Иначе
				
				Если ФлагРежимОтладки Тогда
					
					Попытка
						
						Объект[Имя] = Значение;
						
					Исключение
						
						ЗП = ПолучитьСтруктуруЗаписиПротокола(26, ОписаниеОшибки());
						ЗП.ИмяПКО           = ИмяПравила;
						ЗП.Нпп              = Нпп;
						ЗП.Источник         = Источник;
						ЗП.Объект           = Объект;
						ЗП.ТипОбъекта       = ТипОбъекта;
						ЗП.Свойство         = Имя;
						ЗП.Значение         = Значение;
						ЗП.ТипЗначения      = ТипЗнч(Значение);
						ЗаписатьВПротоколВыполнения(26, ЗП, Истина);
						
					КонецПопытки;
					
				Иначе
					
					Объект[Имя] = Значение;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "Ссылка" Тогда

			// ссылка на элемент - сначала получаем по ссылке объект, а протом устанавливаем свойства
			СозданныйОбъект = Неопределено;
			НеСоздаватьОбъектЕслиНеНайден = Неопределено;
			Ссылка = НайтиОбъектПоСсылке(ТипОбъекта, СвойстваПоиска, СвойстваПоискаНеЗамещать, ОбъектНайден, СозданныйОбъект, НеСоздаватьОбъектЕслиНеНайден);
			
			Если НеСоздаватьОбъектЕслиНеНайден = Истина Тогда
				
				одПропустить(ФайлОбмена, "Объект");
				Прервать;	
			
			ИначеЕсли ИмяТипаОбъекта = "Перечисление" Тогда
				
				Объект = Ссылка;	
			
			Иначе
				
				Объект = ПолучитьОбъектПоСсылкеИДопИнформации(СозданныйОбъект, Ссылка);
								
				Если ОбъектНайден Тогда
					
					Если Объект.ПометкаУдаления Тогда // Объект создан по ссылке
						
						// пометку удаления у объекта ставим, если он загружен по ссылке
						Объект.ПометкаУдаления = Ложь;
						ОбъектНайден = Ложь;
						//УстановитьПометкуУдаленияУОбъекта(Объект, Ложь, ИмяТипаОбъекта);
														
					ИначеЕсли НеЗамещатьОбъект И (Не ЕстьОбработчикПриЗагрузке) Тогда
						
						// если не нужно замещать существующий объект - выходим из обработки
						одПропустить(ФайлОбмена, "Объект");
						Прервать;
						
					КонецЕсли;
					
				КонецЕсли;
							
			КонецЕсли; 
			
		    // Обработчик события ПриЗагрузкеОбъекта
			Если ЕстьОбработчикПриЗагрузке Тогда
				
				Если ФлагРежимОтладки Тогда
					
					Попытка
						
						Выполнить(Правило.ПриЗагрузке);
						
					Исключение
						
						ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(20, ОписаниеОшибки(), ИмяПравила, Источник, 
								ТипОбъекта, Объект, "ПриЗагрузкеОбъекта");						
						
					КонецПопытки;
					
				Иначе
					
					Выполнить(Правило.ПриЗагрузке);
					
				КонецЕсли;
				
				Если ОбъектНайден И НеЗамещатьОбъект Тогда
					
					одПропустить(ФайлОбмена, "Объект");
					Прервать;
					
				КонецЕсли;
				
			КонецЕсли;			
			
		ИначеЕсли ИмяУзла = "ТабличнаяЧасть"
			ИЛИ ИмяУзла = "НаборЗаписей" Тогда

			Если Объект = Неопределено Тогда
				
				ОбъектНайден = Ложь;

			    // Обработчик события ПриЗагрузкеОбъекта
				
				Если ЕстьОбработчикПриЗагрузке Тогда
					
					Если ФлагРежимОтладки Тогда
						
						Попытка
							
							Выполнить(Правило.ПриЗагрузке);
							
						Исключение
							
							ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(20, ОписаниеОшибки(), ИмяПравила, Источник, 
								ТипОбъекта, Объект, "ПриЗагрузкеОбъекта");							
							
						КонецПопытки;
						
					Иначе
						
						Выполнить(Правило.ПриЗагрузке);
						
					КонецЕсли;
					
				КонецЕсли;
				

				Если Объект = Неопределено Тогда
					
					Ссылка = СоздатьНовыйОбъект(ТипОбъекта, СвойстваПоиска, Объект);
										
				КонецЕсли;				
				
			КонецЕсли;
			

			Имя                = одАтрибут(ФайлОбмена, одТипСтрока, "Имя");
			НеЗамещатьСвойство = одАтрибут(ФайлОбмена, одТипБулево, "НеЗамещать");
			НеОчищать          = одАтрибут(ФайлОбмена, одТипБулево, "НеОчищать");

			Если ОбъектНайден И НеЗамещатьСвойство Тогда
				
				одПропустить(ФайлОбмена, ИмяУзла);
				Продолжить;
				
			КонецЕсли; 
			
			Если ИмяУзла = "ТабличнаяЧасть" Тогда
			
				// загрузка элементов из табличной части
				ЗагрузитьТабличнуюЧасть(Объект, Имя, Не НеОчищать);
				
			ИначеЕсли ИмяУзла = "НаборЗаписей" Тогда
				
				// загрузка движений
				ЗагрузитьДвижения(Объект, Имя, Не НеОчищать);
				
			КонецЕсли;			
			
		ИначеЕсли (ИмяУзла = "Объект") И (ФайлОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			
		    // Глобальный обработчик события ПослеЗагрузкиОбъекта
			Если ЕстьГлобальныйОбработчикПослеЗагрузкиОбъекта Тогда
				
				Если ФлагРежимОтладки Тогда
					
					Попытка
						
						Выполнить(Конвертация.ПослеЗагрузкиОбъекта);
						
					Исключение
						
						ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(54, ОписаниеОшибки(), ИмяПравила, Источник, 
								ТипОбъекта, Объект, "ПослеЗагрузкиОбъекта (глобальный)");					
						
					КонецПопытки;
					
				Иначе
					
					Выполнить(Конвертация.ПослеЗагрузкиОбъекта);
					
				КонецЕсли;
				
			КонецЕсли;

			
		    // Обработчик события ПослеЗагрузкиОбъекта
			Если ЕстьОбработчикПослеЗагрузки Тогда
				
				Если ФлагРежимОтладки Тогда
					
					Попытка
						
						Выполнить(Правило.ПослеЗагрузки);
						
					Исключение
						
						ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(21, ОписаниеОшибки(), ИмяПравила, Источник, 
								ТипОбъекта, Объект, "ПослеЗагрузкиОбъекта");				
												
					КонецПопытки;
					
				Иначе
					
					Выполнить(Правило.ПослеЗагрузки);
					
				КонецЕсли;
				
			КонецЕсли;
			
			
			Если ИмяТипаОбъекта = "Документ" Тогда
				
				Если РежимЗаписи = "Проведение" Тогда
					
					РежимЗаписи = РежимЗаписиДокумента.Проведение;
					
				Иначе
					
					РежимЗаписи = ?(РежимЗаписи = "ОтменаПроведения", РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись);
					
				КонецЕсли;
				
				
				РежимПроведения = ?(РежимПроведения = "Оперативный", РежимПроведенияДокумента.Оперативный, РежимПроведенияДокумента.Неоперативный);
				

				Если Объект.ПометкаУдаления Тогда
					
					Объект.ПометкаУдаления = Ложь;
									
				КонецЕсли;				
				
				Попытка
						
					УстановитьОбменДаннымиЗагрузка(Объект, РежимЗаписи = РежимЗаписиДокумента.Запись);
					Объект.Записать(РежимЗаписи, РежимПроведения);
						
				Исключение
						
					// не смогли выполнить необходимые действия для документа
					ЗаписатьДокументВБезопасномРежиме(Объект, ТипОбъекта);
						
						
					ЗП                        = ПолучитьСтруктуруЗаписиПротокола(25, ОписаниеОшибки());
					ЗП.ИмяПКО                 = ИмяПравила;
						
					Если Не ПустаяСтрока(Источник) Тогда
							
						ЗП.Источник           = Источник;
							
					КонецЕсли;
						
					ЗП.ТипОбъекта             = ТипОбъекта;
					ЗП.Объект                 = Строка(Объект);
					ЗаписатьВПротоколВыполнения(25, ЗП);
						
				КонецПопытки;								
				
			ИначеЕсли ИмяТипаОбъекта <> "Перечисление" Тогда
				
				Если ИмяТипаОбъекта = "РегистрСведений" Тогда
				
					Периодический = СтруктураСвойств.Периодический;
					
					Если Периодический Тогда
						
						Если одПустое(Объект.Период) Тогда
							УстановитьТекущуюДатуРеквизиту(Объект.Период);											
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ЗаписатьОбъектВИБ(Объект, ТипОбъекта);
								
			КонецЕсли; 

			
			Если (ИмяТипаОбъекта <> "РегистрСведений") 
				И (ИмяТипаОбъекта <> "Константы")
				И (ИмяТипаОбъекта <> "Перечисление") Тогда
				
				Если Объект.ПометкаУдаления <> ПометкаУдаления Тогда
					УстановитьПометкуУдаленияУОбъекта(Объект, ПометкаУдаления, ИмяТипаОбъекта);
				КонецЕсли;	
							
			КонецЕсли;

			Прервать;
			
		ИначеЕсли ИмяУзла = "НаборЗаписейПоследовательности" Тогда
			
			одПропустить(ФайлОбмена);
			
		ИначеЕсли ИмяУзла = "Типы" Тогда

			Если Объект = Неопределено Тогда
				
				ОбъектНайден = Ложь;
				Ссылка       = СоздатьНовыйОбъект(ТипОбъекта, СвойстваПоиска, Объект);
								
			КонецЕсли; 

			ОписаниеТиповОбъекта = ЗагрузитьТипыОбъекта(ФайлОбмена);

			Если ОписаниеТиповОбъекта <> Неопределено Тогда
				
				Объект.ТипЗначения = ОписаниеТиповОбъекта;
				
			КонецЕсли; 
			
		Иначе
			
			ЗаписатьВПротоколВыполнения(9);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Объект;

КонецФункции // ПрочитатьОбъект() 


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫГРУЗКИ ДАННЫХ ПО ПРАВИЛАМ ОБМЕНА

Функция ПолучитьНаборДвиженийДокумента(СсылкаНаДокумент, ВидИсточника, ИмяРегистра)
	
	Если ВидИсточника = "НаборДвиженийРегистраНакопления" Тогда
		
		НаборДвиженийДокумента = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
		
	ИначеЕсли ВидИсточника = "НаборДвиженийРегистраСведений" Тогда
		
		НаборДвиженийДокумента = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		
	ИначеЕсли ВидИсточника = "НаборДвиженийРегистраБухгалтерии" Тогда
		
		НаборДвиженийДокумента = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
		
	ИначеЕсли ВидИсточника = "НаборДвиженийРегистраРасчета" Тогда	
		
		НаборДвиженийДокумента = РегистрыРасчета[ИмяРегистра].СоздатьНаборЗаписей();
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	НаборДвиженийДокумента.Отбор.Регистратор.Установить(СсылкаНаДокумент);
	НаборДвиженийДокумента.Прочитать();
	
	Возврат НаборДвиженийДокумента;
	
КонецФункции

// Формирует узлы свойств объекта приемника в соответствии с указанной коллекцией правил конвертации свойств
//
// Параметры:
//  Источник		     - произвольный источник данных
//  Приемник		     - xml-узел объекта приемника
//  ВходящиеДанные	     - произвольные вспомогательные данные, передаваемые правилу
//                         для выполнения конвертации
//  ИсходящиеДанные      - произвольные вспомогательные данные, передаваемые правилам
//                         конвертации объектов свойств
//  ПКО				     - ссылка на правило конвертации объектов (родитель коллекции правил конвертации свойств)
//  ПКГС                 - ссылка на правило конвертации группы свойств
//  УзелКоллекцииСвойств - xml-узел коллекции свойств
// 
Процедура ВыгрузитьГруппуСвойств(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО, ПКГС, УзелКоллекцииСвойств)

	
	КоллекцияОбъектов = Неопределено;
	НеЗамещать        = ПКГС.НеЗамещать;
	НеОчищать         = Ложь;

	
	// Обработчик ПередОбработкойВыгрузки

	Если ПКГС.ЕстьОбработчикПередОбработкойВыгрузки Тогда
		
		Отказ = Ложь;
		Если ФлагРежимОтладки Тогда
			
			Попытка
				
				Выполнить(ПКГС.ПередОбработкойВыгрузки);
				
			Исключение
				
				ЗП = ПолучитьСтруктуруЗаписиПротокола(48, ОписаниеОшибки());
				ЗП.ПКО                    = ПКО.Имя + "  (" + ПКО.Наименование + ")";
				ЗП.ПКГС                   = ПКГС.Имя + "  (" + ПКГС.Наименование + ")";
				ЗП.Объект                 = Строка(Источник) + "  (" + ТипЗнч(Источник) + ")";
				ЗП.Обработчик             = "ПередОбработкойВыгрузкиГруппыСвойств";
				ЗаписатьВПротоколВыполнения(48, ЗП);
				
			КонецПопытки;
			
		Иначе
			
			Выполнить(ПКГС.ПередОбработкойВыгрузки);
			
		КонецЕсли;
		
		Если Отказ Тогда // Отказ от обработки группы свойств
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;

	
    ВидПриемника = ПКГС.ВидПриемника;
	ВидИсточника = ПКГС.ВидИсточника;
	
	
    // Создание узла коллекции подчиненных объектов
	
	Если ВидПриемника = "ТабличнаяЧасть" Тогда
		
		УзелКоллекцииОбъектов = СоздатьУзел("ТабличнаяЧасть");
		УстановитьАтрибут(УзелКоллекцииОбъектов, "Имя",	ПКГС.Приемник);
		
		Если НеЗамещать Тогда
			
			УстановитьАтрибут(УзелКоллекцииОбъектов, "НеЗамещать", "true");
			
		КонецЕсли;
		
		Если НеОчищать Тогда
			
			УстановитьАтрибут(УзелКоллекцииОбъектов, "НеОчищать", "true");
			
		КонецЕсли;
		
	ИначеЕсли ВидПриемника = "ПодчиненныйСправочник" Тогда
		
		УзелКоллекцииОбъектов = Неопределено;
		
	ИначеЕсли ВидПриемника = "НаборЗаписейПоследовательности" Тогда
		
		УзелКоллекцииОбъектов = СоздатьУзел("НаборЗаписей");
		УстановитьАтрибут(УзелКоллекцииОбъектов, "Имя",	ПКГС.Приемник);
		
	ИначеЕсли Найти(ВидПриемника, "НаборДвижений") > 0 Тогда
		
		УзелКоллекцииОбъектов = СоздатьУзел("НаборЗаписей");
		УстановитьАтрибут(УзелКоллекцииОбъектов, "Имя",	ПКГС.Приемник);
		
		Если НеЗамещать Тогда
			
			УстановитьАтрибут(УзелКоллекцииОбъектов, "НеЗамещать",	"true");
			
		КонецЕсли;
		
		Если НеОчищать Тогда
			
			УстановитьАтрибут(УзелКоллекцииОбъектов, "НеОчищать",	"true");
			
		КонецЕсли;
		
	Иначе  // это простая группировка
		
		ВыгрузитьСвойства(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО, ПКГС.ПравилаГруппы, 
			УзелКоллекцииСвойств, , , ПКО.НеВыгружатьОбъектыСвойствПоСсылкам);
		
		Если ПКГС.ЕстьОбработчикПослеОбработкиВыгрузки Тогда
			
			Попытка
				
				Выполнить(ПКГС.ПослеОбработкиВыгрузки);
				
			Исключение
				
				ЗаписатьВПротоколВыполнения(49);
				
			КонецПопытки;
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;

	
	// Получение коллекции подчиненных объектов
	
	Если КоллекцияОбъектов <> Неопределено Тогда
		
		// Инициализировали коллекцию в обработчике ПередОбработкой
		
	ИначеЕсли ПКГС.ПолучитьИзВходящихДанных Тогда
		
		Попытка
			
			КоллекцияОбъектов = ВходящиеДанные[ПКГС.Приемник];
			
		Исключение
			
            ЗаписатьВПротоколВыполнения(66);
			Возврат;
			
		КонецПопытки;
		
	ИначеЕсли ВидИсточника = "ТабличнаяЧасть" Тогда
		
		КоллекцияОбъектов = Источник[ПКГС.Источник];
		
	ИначеЕсли ВидИсточника = "ПодчиненныйСправочник" Тогда
		
	ИначеЕсли Найти(ВидИсточника, "НаборДвижений") > 0 Тогда
		
		КоллекцияОбъектов = ПолучитьНаборДвиженийДокумента(Источник, ВидИсточника, ПКГС.Источник);
				
	ИначеЕсли ПустаяСтрока(ПКГС.Источник) Тогда
		
		КоллекцияОбъектов = Источник[ПКГС.Приемник];
		
	КонецЕсли;

	
	Для каждого ОбъектКоллекции Из КоллекцияОбъектов Цикл

		
		// Обработчик ПередВыгрузкой
		Если ПКГС.ЕстьОбработчикПередВыгрузкой Тогда
			
			Отказ = Ложь;
			
			Попытка
				
				Выполнить(ПКГС.ПередВыгрузкой);
				
			Исключение
				
				ЗаписатьВПротоколВыполнения(50);
				Прервать;
				
			КонецПопытки;
			
			Если Отказ Тогда	//	Отказ от выгрузки подчиненного объекта
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли; 

		
		// Обработчик ПриВыгрузке
		
		УзелОбъектаКоллекции = СоздатьУзел("Запись");
		СтандартнаяОбработка	= Истина;
		
		Если ПКГС.ЕстьОбработчикПриВыгрузке Тогда
			
			Попытка
				
				Выполнить(ПКГС.ПриВыгрузке);
				
			Исключение
				
				ЗаписатьВПротоколВыполнения(51);
				Прервать;
				
			КонецПопытки;
			
		КонецЕсли;


		//	Выгрузка свойств объекта коллекции
		
		Если СтандартнаяОбработка Тогда
			
			Если ПКГС.ПравилаГруппы.Количество() > 0 Тогда
				
				ВыгрузитьСвойства(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО, ПКГС.ПравилаГруппы, 
					УзелОбъектаКоллекции, ОбъектКоллекции, , ПКО.НеВыгружатьОбъектыСвойствПоСсылкам);
				
			КонецЕсли;
			
		КонецЕсли;

		
		// Обработчик ПослеВыгрузки
		
		Если ПКГС.ЕстьОбработчикПослеВыгрузки Тогда
			
			Отказ = Ложь;
			
			Попытка
				
				Выполнить(ПКГС.ПослеВыгрузки);
			Исключение
				
				ЗаписатьВПротоколВыполнения(52);
				Прервать;
			КонецПопытки; 
			
			Если Отказ Тогда	//	Отказ от выгрузки подчиненного объекта
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДобавитьПодчиненный(УзелКоллекцииОбъектов, УзелОбъектаКоллекции);
		
	КонецЦикла;

	
    // Обработчик ПослеОбработкиВыгрузки

	Если ПКГС.ЕстьОбработчикПослеОбработкиВыгрузки Тогда
		
		Отказ = Ложь;
		
		Попытка
			
			Выполнить(ПКГС.ПослеОбработкиВыгрузки);
			
		Исключение
			
			ЗаписатьВПротоколВыполнения(49);
			
		КонецПопытки; 
		
		Если Отказ Тогда	//	Отказ от записи коллекции подчиненных объектов
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;

	
	ДобавитьПодчиненный(УзелКоллекцииСвойств, УзелКоллекцииОбъектов);

КонецПроцедуры // ВыгрузитьГруппуСвойств()

Процедура ПолучитьЗначениеСвойства(Значение, ОбъектКоллекции, ПКО, ПКС, ВходящиеДанные, Источник)
	
	Если Значение <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПКС.ПолучитьИзВходящихДанных Тогда
			
			ОбъектДляПолученияДанных = ВходящиеДанные;
			ИмяСвойства = ПКС.Приемник;
			КодОшибки = ?(ОбъектКоллекции <> Неопределено, 67, 68);
	
	ИначеЕсли ОбъектКоллекции <> Неопределено Тогда
		
		ОбъектДляПолученияДанных = ОбъектКоллекции;
		
		Если Не ПустаяСтрока(ПКС.Источник) Тогда
			
			ИмяСвойства = ПКС.Источник;
			КодОшибки = 16;
						
		Иначе
			
			ИмяСвойства = ПКС.Приемник;
			КодОшибки = 17;
            							
		КонецЕсли;
						
	Иначе
		
		ОбъектДляПолученияДанных = Источник;
		
		Если Не ПустаяСтрока(ПКС.Источник) Тогда
		
			ИмяСвойства = ПКС.Источник;
			КодОшибки = 13;
		
		Иначе
		
			ИмяСвойства = ПКС.Приемник;
			КодОшибки = 14;
		
		КонецЕсли;
			
	КонецЕсли;
	
	
	Если ФлагРежимОтладки Тогда
					
		Попытка
						
			Значение = ОбъектДляПолученияДанных[ИмяСвойства];
						
		Исключение
						
			ЗаписатьИнформациюОбОшибкеОбработчикиПКС(КодОшибки, ОписаниеОшибки(), ПКО, ПКС, Источник, "");
																		
		КонецПопытки;
					
	Иначе
					
		Значение = ОбъектДляПолученияДанных[ИмяСвойства];
					
	КонецЕсли;
		
КонецПроцедуры

Процедура _ВыгрузитьСубконто(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО, ПКС, 
	УзелКоллекцииСвойств = Неопределено, ОбъектКоллекции = Неопределено, Знач ВыгрузитьТолькоСсылку = Ложь)
	
	// Инициализация значения
	Значение = Неопределено;
	ИмяПКО = "";
	ИмяПКОВидСубконто = "";
	
	// Обработчик ПередВыгрузкой
	Если ПКС.ЕстьОбработчикПередВыгрузкой Тогда
		
		Отказ = Ложь;
		
		Если ФлагРежимОтладки Тогда
			
			Попытка
				
				Выполнить(ПКС.ПередВыгрузкой);
				
			Исключение
				
				ЗаписатьИнформациюОбОшибкеОбработчикиПКС(55, ОписаниеОшибки(), ПКО, ПКС, Источник, 
					"ПередВыгрузкойСвойства", Значение);				
								
			КонецПопытки;
			
		Иначе
			
			Выполнить(ПКС.ПередВыгрузкой);
			
		КонецЕсли;
		
		Если Отказ Тогда // Отказ от выгрузки
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПолучитьЗначениеСвойства(Значение, ОбъектКоллекции, ПКО, ПКС, ВходящиеДанные, Источник);
		
	Для каждого КлючИЗначение из Значение Цикл
		
		ВидСубконто = КлючИЗначение.Ключ;
		Субконто = КлючИЗначение.Значение;
		
		// Обработчик ПриВыгрузке
		Если ПКС.ЕстьОбработчикПриВыгрузке Тогда
			
			Отказ = Ложь;
			
			Если ФлагРежимОтладки Тогда
				
				Попытка
					
					Выполнить(ПКС.ПриВыгрузке);
					
				Исключение
					
					ЗаписатьИнформациюОбОшибкеОбработчикиПКС(56, ОписаниеОшибки(), ПКО, ПКС, Источник, 
						"ПриВыгрузкеСвойства", Значение);				
					
				КонецПопытки;
				
			Иначе
				
				Выполнить(ПКС.ПриВыгрузке);
				
			КонецЕсли;
			
			Если Отказ Тогда // Отказ от выгрузки субконто
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если КлючИЗначение.Значение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		УзелСубконто = СоздатьУзел(ПКС.Приемник);
			
		// Ключ
		УзелСвойства = СоздатьУзел("Свойство");
			
		Если ИмяПКОВидСубконто = "" Тогда
				
			ПКОКлюч = НайтиПравило(ВидСубконто);
				
		Иначе
				
			ПКОКлюч = НайтиПравило(, ИмяПКОВидСубконто);
				
		КонецЕсли;
			
		УстановитьАтрибут(УзелСвойства, "Имя", "Ключ");
		УстановитьАтрибут(УзелСвойства, "Тип", ПКОКлюч.Приемник);
			
		УзелСсылки = ВыгрузитьПоПравилу(ВидСубконто,, ИсходящиеДанные,, ИмяПКОВидСубконто,, ВыгрузитьТолькоСсылку, ПКОКлюч);
			
		Если УзелСсылки <> Неопределено Тогда
				
			ДобавитьПодчиненный(УзелСвойства, УзелСсылки);
				
		КонецЕсли;
			
		ДобавитьПодчиненный(УзелСубконто, УзелСвойства);
			
		// Значение
		УзелСвойства = СоздатьУзел("Свойство");
			
		ПКОЗначение = НайтиПравило(Субконто);
		
		УзелСсылки = ВыгрузитьПоПравилу(Субконто,, ИсходящиеДанные, , ИмяПКО, , ВыгрузитьТолькоСсылку, ПКОЗначение);
			
		УстановитьАтрибут(УзелСвойства, "Имя", "Значение");
		УстановитьАтрибут(УзелСвойства, "Тип", ПКОЗначение.Приемник);			
		
			
		ТипУзлаСсылки = ТипЗнч(УзелСсылки);
			
		Если УзелСсылки = Неопределено Тогда
				
			Продолжить;
				
		КонецЕсли;
						
		ДобавитьСвойстваДляВыгрузки(УзелСсылки, ТипУзлаСсылки, УзелСвойства);
			
		ДобавитьПодчиненный(УзелСубконто, УзелСвойства);
			
		// Обработчик ПослеВыгрузки
		Если ПКС.ЕстьОбработчикПослеВыгрузки Тогда
				
			Отказ = Ложь;
				
			Если ФлагРежимОтладки Тогда
					
				Попытка
						
					Выполнить(ПКС.ПослеВыгрузки);
						
				Исключение
						
					ЗаписатьИнформациюОбОшибкеОбработчикиПКС(57, ОписаниеОшибки(), ПКО, ПКС, Источник, 
						"ПослеВыгрузкиСвойства", Значение);					
						
				КонецПопытки;
					
			Иначе
					
				Выполнить(ПКС.ПослеВыгрузки);
					
			КонецЕсли;
				
			Если Отказ Тогда // Отказ от выгрузки
					
				Продолжить;
					
			КонецЕсли;
							
		КонецЕсли;
		
		ДобавитьПодчиненный(УзелКоллекцииСвойств, УзелСубконто);
		
	КонецЦикла;
	
КонецПроцедуры // _ВыгрузитьСубконто()

Процедура ДобавитьСвойстваДляВыгрузки(УзелСсылки, ТипУзлаСсылки, УзелСвойства)
	
	Если ТипУзлаСсылки = одТипСтрока Тогда
				
		Если Найти(УзелСсылки, "<Ссылка") > 0 Тогда  //!!!   "</Ссылка>"
					
			ДобавитьПодчиненный(УзелСвойства, УзелСсылки);
					
		Иначе
			
			одЗаписатьЭлемент(УзелСвойства, "Значение", УзелСсылки);
					
		КонецЕсли;
				
	ИначеЕсли ТипУзлаСсылки = одТипЧисло Тогда
				
		одЗаписатьЭлемент(УзелСвойства, "Нпп", УзелСсылки);
				
	Иначе
				
		ДобавитьПодчиненный(УзелСвойства, УзелСсылки);
				
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДобавитьЗначениеСвойстваВУзел(Значение, ТипЗначения, ТипПриемника, УзелСвойства, СвойствоУстановлено)
	
	СвойствоУстановлено = Истина;
		
	Если ТипЗначения = одТипСтрока Тогда
				
		Если ТипПриемника = "Строка"  Тогда
		ИначеЕсли ТипПриемника = "Число"  Тогда
					
			Значение = Число(Значение);
					
		ИначеЕсли ТипПриемника = "Булево"  Тогда
					
			Значение = Булево(Значение);
					
		ИначеЕсли ТипПриемника = "Дата"  Тогда
					
			Значение = Дата(Значение);
					
		ИначеЕсли ТипПриемника = "ХранилищеЗначения"  Тогда
					
			Значение = Новый ХранилищеЗначения(Значение);
					
		ИначеЕсли ПустаяСтрока(ТипПриемника) Тогда
					
			УстановитьАтрибут(УзелСвойства, "Тип", "Строка");
					
		КонецЕсли;
				
		одЗаписатьЭлемент(УзелСвойства, 	"Значение", Значение);
				
	ИначеЕсли ТипЗначения = одТипЧисло Тогда
				
		Если ТипПриемника = "Число"  Тогда
		ИначеЕсли ТипПриемника = "Булево"  Тогда
					
			Значение = Булево(Значение);
					
		ИначеЕсли ТипПриемника = "Строка"  Тогда
		ИначеЕсли ПустаяСтрока(ТипПриемника) Тогда
					
			УстановитьАтрибут(УзелСвойства, "Тип", "Число");
					
		Иначе
					
			Возврат;
					
		КонецЕсли;
				
		одЗаписатьЭлемент(УзелСвойства, "Значение", Значение);
				
	ИначеЕсли ТипЗначения = одТипДата Тогда
				
		Если ТипПриемника = "Дата"  Тогда
		ИначеЕсли ТипПриемника = "Строка"  Тогда
					
			Значение = Лев(Строка(Значение), 10);
					
		ИначеЕсли ПустаяСтрока(ТипПриемника) Тогда
					
			УстановитьАтрибут(УзелСвойства, "Тип", "Дата");
					
		Иначе
					
			Возврат;
					
		КонецЕсли;
				
		одЗаписатьЭлемент(УзелСвойства, "Значение", Значение);  // Формат(Значение, "ДФ=""ггггММддЧЧммсс""")
				
	ИначеЕсли ТипЗначения = одТипБулево Тогда
				
		Если ТипПриемника = "Булево"  Тогда
		ИначеЕсли ТипПриемника = "Число"  Тогда
					
			Значение = Число(Значение);
					
		ИначеЕсли ПустаяСтрока(ТипПриемника) Тогда
					
			УстановитьАтрибут(УзелСвойства, "Тип", "Булево");
					
		Иначе
					
			Возврат;
					
		КонецЕсли;
				
		одЗаписатьЭлемент(УзелСвойства, "Значение", Значение);
				
	ИначеЕсли ТипЗначения = одТипХранилищеЗначения Тогда
				
		Если ПустаяСтрока(ТипПриемника) Тогда
					
			УстановитьАтрибут(УзелСвойства, "Тип", "ХранилищеЗначения");
					
		ИначеЕсли ТипПриемника <> "ХранилищеЗначения"  Тогда
					
			Возврат;
					
		КонецЕсли;
				
		одЗаписатьЭлемент(УзелСвойства, "Значение", Значение);
				
	ИначеЕсли ТипЗначения = одТипВидДвиженияНакопления Тогда
				
		одЗаписатьЭлемент(УзелСвойства, "Значение", Строка(Значение));		
		
	Иначе	
		
		СвойствоУстановлено = Ложь;
		
	КонецЕсли;	
	
КонецПроцедуры


Функция ВыгрузитьДанныеСсылочногоОбъекта(Значение, ИсходящиеДанные, ИмяПКО, ПКОСвойств, ТипПриемника, УзелСвойства, Знач ВыгрузитьТолькоСсылку)
	
	УзелСсылки    = ВыгрузитьПоПравилу(Значение, , ИсходящиеДанные, , ИмяПКО, , ВыгрузитьТолькоСсылку, ПКОСвойств);
	ТипУзлаСсылки = ТипЗнч(УзелСсылки);

	Если ПустаяСтрока(ТипПриемника) Тогда
				
		ТипПриемника  = ПКОСвойств.Приемник;
		УстановитьАтрибут(УзелСвойства, "Тип", ТипПриемника);
				
	КонецЕсли;
			
	Если УзелСсылки = Неопределено Тогда
				
		Возврат Неопределено;
				
	КонецЕсли;
				
	ДобавитьСвойстваДляВыгрузки(УзелСсылки, ТипУзлаСсылки, УзелСвойства);	
	
	Возврат УзелСсылки;
	
КонецФункции

// Формирует узлы свойств объекта приемника в соответствии с указанной коллекцией правил конвертации свойств
//
// Параметры:
//  Источник		     - произвольный источник данных
//  Приемник		     - xml-узел объекта приемника
//  ВходящиеДанные	     - произвольные вспомогательные данные, передаваемые правилу
//                         для выполнения конвертации
//  ИсходящиеДанные      - произвольные вспомогательные данные, передаваемые правилам
//                         конвертации объектов свойств
//  ПКО				     - ссылка на правило конвертации объектов (родитель коллекции правил конвертации свойств)
//  КоллекцияПКС         - коллекция правил конвертации свойств
//  УзелКоллекцииСвойств - xml-узел коллекции свойств
//  ОбъектКоллекции      - если указан, то выполняется выгрузка свойсвт объекта коллекции, иначе Источника
//  ИмяПредопределенногоЭлемента - если указан, то в свойствах пишется имя предопределенного элемента
// 
Процедура ВыгрузитьСвойства(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО, КоллекцияПКС, УзелКоллекцииСвойств = Неопределено, 
	ОбъектКоллекции = Неопределено, ИмяПредопределенногоЭлемента = Неопределено, Знач ВыгрузитьТолькоСсылку = Ложь)
							
	Если УзелКоллекцииСвойств = Неопределено Тогда
		
		УзелКоллекцииСвойств = Приемник;
		
	КонецЕсли;
	
	// Выгружаем имя предопределенного если оно указано
	Если ИмяПредопределенногоЭлемента <> Неопределено Тогда
		УзелСвойства = СоздатьУзел("Свойство");
		УстановитьАтрибут(УзелСвойства, "Имя", "{ИмяПредопределенногоЭлемента}");
		УстановитьАтрибут(УзелСвойства, "Тип", "Строка");
		одЗаписатьЭлемент(УзелСвойства, "Значение", ИмяПредопределенногоЭлемента);
		ДобавитьПодчиненный(УзелКоллекцииСвойств, УзелСвойства);
	КонецЕсли;
	
	
	Для каждого ПКС Из КоллекцияПКС Цикл
		
		Если ПКС.ВидПриемника = "ВидыСубконтоСчета" Тогда
			
			_ВыгрузитьСубконто(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО, 
				ПКС, УзелКоллекцииСвойств, ОбъектКоллекции, ВыгрузитьТолькоСсылку);
			
			Продолжить;
			
		ИначеЕсли ПКС.Имя = "{УникальныйИдентификатор}" 
			И ПКС.Источник = "{УникальныйИдентификатор}" 
			И ПКС.Приемник = "{УникальныйИдентификатор}" Тогда
			
			Попытка
				
				УникальныйИдентификатор = Источник.УникальныйИдентификатор();
				
			Исключение
				
				Попытка
					
					УникальныйИдентификатор = Источник.Ссылка.УникальныйИдентификатор();
					
				Исключение
					
					Продолжить;
					
				КонецПопытки;
				
			КонецПопытки;
			
			УзелСвойства = СоздатьУзел("Свойство");
			УстановитьАтрибут(УзелСвойства, "Имя", "{УникальныйИдентификатор}");
			УстановитьАтрибут(УзелСвойства, "Тип", "Строка");
			одЗаписатьЭлемент(УзелСвойства, "Значение", УникальныйИдентификатор);
			ДобавитьПодчиненный(УзелКоллекцииСвойств, УзелСвойства);
			
			Продолжить;
			
		ИначеЕсли ПКС.ЭтоГруппа Тогда
			
			ВыгрузитьГруппуСвойств(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО, ПКС, УзелКоллекцииСвойств);
			Продолжить;
			
		КонецЕсли;

		
		//	Инициализируем значение, которое будем конвертировать
		Значение 	 = Неопределено;
		ИмяПКО		 = ПКС.ПравилоКонвертации;
		НеЗамещать   = ПКС.НеЗамещать;
		
		Пусто		 = Ложь;
		Выражение	 = Неопределено;
		ТипПриемника = ПКС.ТипПриемника;

		ЭтоNULL      = Ложь;

		
		// Обработчик ПередВыгрузкой
        Если ПКС.ЕстьОбработчикПередВыгрузкой Тогда
			
			Отказ = Ложь;
			
			Если ФлагРежимОтладки Тогда
				
				Попытка
					
					Выполнить(ПКС.ПередВыгрузкой);
					
				Исключение
					
					ЗаписатьИнформациюОбОшибкеОбработчикиПКС(55, ОписаниеОшибки(), ПКО, ПКС, Источник, 
							"ПередВыгрузкойСвойства", Значение);
															
				КонецПопытки;
				                             
			Иначе
				
				Выполнить(ПКС.ПередВыгрузкой);
				
			КонецЕсли;
			
			Если Отказ Тогда	//	Отказ от выгрузки свойства
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;

        		
        //	Создаем узел свойства
		//ОЛ 30.01.2015 заремила
		//УзелСвойства = СоздатьУзел("Свойство");
		//УстановитьАтрибут(УзелСвойства, "Имя", ПКС.Приемник);
		//конец ОЛ заремила
		//ОЛ 30.01.2015 вместо заремленного выше
		Если ПустаяСтрока(ПКС.ИмяПараметраДляПередачи) Тогда
			
			УзелСвойства = СоздатьУзел("Свойство");
			УстановитьАтрибут(УзелСвойства, "Имя", ПКС.Приемник);
			
		Иначе
			
			УзелСвойства = СоздатьУзел("ЗначениеПараметра");
			УстановитьАтрибут(УзелСвойства, "Имя", ПКС.ИмяПараметраДляПередачи);
			
		КонецЕсли;
		//конец ОЛ
		
		Если НеЗамещать Тогда
			
			УстановитьАтрибут(УзелСвойства, "НеЗамещать",	"true");
			
		КонецЕсли;

        		
		//	Возможно правило конвертации уже определено
		Если Не ПустаяСтрока(ИмяПКО) Тогда
			
			ПКОСвойств = Правила[ИмяПКО];
			
		Иначе
			
			ПКОСвойств = Неопределено;
			
		КонецЕсли;


		//	Попытка определить тип свойства приемника
		Если ПустаяСтрока(ТипПриемника)
			И ПКОСвойств <> Неопределено Тогда
			
			ТипПриемника = ПКОСвойств.Приемник;
						
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТипПриемника) Тогда
			
			УстановитьАтрибут(УзелСвойства, "Тип", ТипПриемника);
			
		КонецЕсли;

		
        //	Определяем конвертируемое значение
		Если Выражение <> Неопределено Тогда
			
			одЗаписатьЭлемент(УзелСвойства, "Выражение", Выражение);
			ДобавитьПодчиненный(УзелКоллекцииСвойств, УзелСвойства);
			Продолжить;
			
		ИначеЕсли Пусто Тогда
			
			Если ПустаяСтрока(ТипПриемника) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			одЗаписатьЭлемент(УзелСвойства, "Пусто");
			ДобавитьПодчиненный(УзелКоллекцииСвойств, УзелСвойства);
			Продолжить;
			
		Иначе
			
			ПолучитьЗначениеСвойства(Значение, ОбъектКоллекции, ПКО, ПКС, ВходящиеДанные, Источник);
						
		КонецЕсли;


		СтароеЗначениеДоОбработчикаПриВыгрузке = Значение;
		Пусто = одПустое(Значение, ЭтоNULL);

		
		// Обработчик ПриВыгрузке
		Если ПКС.ЕстьОбработчикПриВыгрузке Тогда
			
			Отказ = Ложь;
			
			Если ФлагРежимОтладки Тогда
				
				Попытка
					
					Выполнить(ПКС.ПриВыгрузке);
					
				Исключение
					
					ЗаписатьИнформациюОбОшибкеОбработчикиПКС(56, ОписаниеОшибки(), ПКО, ПКС, Источник, 
							"ПриВыгрузкеСвойства", Значение);
															
				КонецПопытки;
				
			Иначе
				
				Выполнить(ПКС.ПриВыгрузке);
				
			КонецЕсли;
			
			Если Отказ Тогда	//	Отказ от выгрузки свойства
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;


		// Инициализируем еще раз переменную Пусто, может быть Значение было изменено 
		// в обработчике "При выгрузке"
		Если СтароеЗначениеДоОбработчикаПриВыгрузке <> Значение Тогда
			
			Пусто = одПустое(Значение, ЭтоNULL);
			
		КонецЕсли;

		Если Пусто Тогда
			
			Если ЭтоNULL 
				Или Значение = Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если ПустаяСтрока(ТипПриемника) Тогда
				
				ТипПриемника = одТипЗначенияСтрокой(Значение);
				УстановитьАтрибут(УзелСвойства, "Тип", ТипПриемника);
				
			КонецЕсли;			
				
			// если тип множественный, то возможно это пустая ссылка и выгрузить ее нужно именно с указанием типа
			одЗаписатьЭлемент(УзелСвойства, "Пусто");
			ДобавитьПодчиненный(УзелКоллекцииСвойств, УзелСвойства);
			Продолжить;
			
		КонецЕсли;

      		
		УзелСсылки = Неопределено;
		
		Если (ПКОСвойств <> Неопределено) 
			Или (Не ПустаяСтрока(ИмяПКО)) Тогда
			
			УзелСсылки = ВыгрузитьДанныеСсылочногоОбъекта(Значение, ИсходящиеДанные, ИмяПКО, ПКОСвойств, ТипПриемника, УзелСвойства, ВыгрузитьТолькоСсылку);
			
			Если УзелСсылки = Неопределено Тогда
				Продолжить;				
			КонецЕсли;				
										
		Иначе
			
			СвойствоУстановлено = Ложь;
			ТипЗначения = ТипЗнч(Значение);
			ДобавитьЗначениеСвойстваВУзел(Значение, ТипЗначения, ТипПриемника, УзелСвойства, СвойствоУстановлено);
						
			Если НЕ СвойствоУстановлено Тогда
				
				ПКОСвойств = Менеджеры[ТипЗначения].ПКО;
				
				Если ПКОСвойств = Неопределено Тогда
					Продолжить;
				КонецЕсли;
					
				ИмяПКО = ПКОСвойств.Имя;
				
				УзелСсылки = ВыгрузитьДанныеСсылочногоОбъекта(Значение, ИсходящиеДанные, ИмяПКО, ПКОСвойств, ТипПриемника, УзелСвойства, ВыгрузитьТолькоСсылку);
			
				Если УзелСсылки = Неопределено Тогда
					Продолжить;				
				КонецЕсли;				
												
			КонецЕсли;
			
		КонецЕсли;


		
		// Обработчик ПослеВыгрузки

		Если ПКС.ЕстьОбработчикПослеВыгрузки Тогда
			
			Отказ = Ложь;
			
			Если ФлагРежимОтладки Тогда
				
				Попытка
					
					Выполнить(ПКС.ПослеВыгрузки);
					
				Исключение
					
					ЗаписатьИнформациюОбОшибкеОбработчикиПКС(57, ОписаниеОшибки(), ПКО, ПКС, Источник, 
							"ПослеВыгрузкиСвойства", Значение);					
					
				КонецПопытки;
				
			Иначе
				
				Выполнить(ПКС.ПослеВыгрузки);
				
			КонецЕсли;
			
			Если Отказ Тогда	//	Отказ от выгрузки свойства
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;

		
		ДобавитьПодчиненный(УзелКоллекцииСвойств, УзелСвойства);
		
	КонецЦикла;		//	по ПКС

КонецПроцедуры // ВыгрузитьСвойства()

// Производит выгрузку объекта в соответствии с указанным правилом конвертации
//
// Параметры:
//  Источник				 - произвольный источник данных
//  Приемник				 - xml-узел объекта приемника
//  ВходящиеДанные			 - произвольные вспомогательные данные, передаваемые правилу
//                             для выполнения конвертации
//  ИсходящиеДанные			 - произвольные вспомогательные данные, передаваемые правилам
//                             конвертации свойств
//  ИмяПКО					 - имя правила конвертации, согласно которому осуществляется выгрузка
//  УзелСсылки				 - xml-узел ссылки объекта приемника
//  ТолькоПолучитьУзелСсылки - если Истина, то выгрузка объекта не производится, только формируется
//                             xml-узел ссылки
//  ПКО						 - ссылка на правило конвертации
//
// Возвращаемое значение:
//  xml-узел ссылки или значение приемника
//
Функция ВыгрузитьПоПравилу(Источник					= Неопределено,
						   Приемник					= Неопределено,
						   ВходящиеДанные			= Неопределено,
						   ИсходящиеДанные			= Неопределено,
						   ИмяПКО					= "",
						   УзелСсылки				= Неопределено,
						   ТолькоПолучитьУзелСсылки	= Ложь,
						   ПКО						= Неопределено)

	#Если Клиент Тогда
	ОбработкаПрерыванияПользователя();
	#КонецЕсли
	
		//08.10.15 А.А. При  наличии кода в обработчике   ПВД "перед выгрузкой" раньше не срабатывало
	//БАЛАНС (29.07.2008) 
	Попытка
		Если ТипЗнч(Источник)=Тип("ДокументСсылка."+Источник.Метаданные().Имя) Тогда
			НоваяСтрока=мТаблицаВыгруженныхДокументов.Добавить();
			НоваяСтрока.Документ=Источник;
		КонецЕсли;
	Исключение
	КонецПопытки;

	
	// Поиск ПКО
	Если ПКО = Неопределено Тогда
		
        ПКО = НайтиПравило(Источник, ИмяПКО);
		
	ИначеЕсли (Не ПустаяСтрока(ИмяПКО))
		И ПКО.Имя <> ИмяПКО Тогда
		
		ПКО = НайтиПравило(Источник, ИмяПКО);
				
	КонецЕсли;
	
	Если ПКО = Неопределено Тогда
		ЗаписатьВПротоколВыполнения(45); // не найдено ПКО
		Возврат Неопределено;
	КонецЕсли;


	Если ФлагКомментироватьОбработкуОбъектов Тогда
		
		Попытка
			ИсточникВСтроку = Строка(Источник);
		Исключение
			ИсточникВСтроку = " ";
		КонецПопытки;
		
		ПрОбъекта = ИсточникВСтроку + "  (" + ТипЗнч(Источник) + ")";
		СтрокаНазванияПКО = Символы.ПС + "ПКО: " + ИмяПКО + "  (" + ПКО.Наименование + ")";
		ЗаписатьВПротоколВыполнения("Конвертация объекта или получение ссылки:  " + ПрОбъекта + СтрокаНазванияПКО, , Ложь, 2, 7);
		
	КонецЕсли;

    ЗапоминатьВыгруженные       = ПКО.ЗапоминатьВыгруженные;
	ВыгруженныеОбъекты          = ПКО.Выгруженные;
	ВсеОбъектыВыгружены         = ПКО.ВсеОбъектыВыгружены;
	НеЗамещатьОбъектПриЗагрузке = ПКО.НеЗамещать;
	НеСоздаватьЕслиНеНайден     = ПКО.НеСоздаватьЕслиНеНайден;

	ПрефиксАвтонумерации		= "";
	РежимЗаписи     			= "";
	РежимПроведения 			= "";

   	ИмяТипа          = "";
	СтруктураСвойств = Менеджеры[ПКО.Источник];
	Если СтруктураСвойств = Неопределено Тогда
		СтруктураСвойств = Менеджеры[ТипЗнч(Источник)];
	КонецЕсли;
	
	Если СтруктураСвойств <> Неопределено Тогда
		ИмяТипа = СтруктураСвойств.ИмяТипа;
	КонецЕсли;

	// КлючВыгружаемыхДанных
	
	Если (Источник <> Неопределено) И ЗапоминатьВыгруженные Тогда
		Если ИмяТипа = "РегистрСведений" ИЛИ ПустаяСтрока(ИмяТипа) Тогда
			ЗапоминатьВыгруженные = Ложь;
		Иначе
			КлючВыгружаемыхДанных = ЗначениеВСтрокуВнутр(Источник);
		КонецЕсли;
	Иначе
		КлючВыгружаемыхДанных = ИмяПКО;
		ЗапоминатьВыгруженные = Ложь;
	КонецЕсли;
	
	
	// Переменная для хранения имени предопределенного элемента
	ИмяПредопределенногоЭлемента = Неопределено;

	// Глобальный обработчик ПередКонвертациейОбъекта
    Отказ = Ложь;	
	Если ЕстьГлобальныйОбработчикПередКонвертациейОбъекта Тогда
		
		Если ФлагРежимОтладки Тогда
			Попытка
				Выполнить(Конвертация.ПередКонвертациейОбъекта);
			Исключение
				ЗаписатьИнформациюОбОшибкеВыгрузкиОбработчикаПКО(64, ОписаниеОшибки(), ПКО, Источник, "ПередКонвертациейОбъекта (глобальный)");
			КонецПопытки;
		Иначе
			Выполнить(Конвертация.ПередКонвертациейОбъекта);
		КонецЕсли;
		
		Если Отказ Тогда	//	Отказ от дальнейшей обработки правила
			Возврат Приемник;
		КонецЕсли;
		
	КонецЕсли;


	// Обработчик ПередВыгрузкой
    Если ПКО.ЕстьОбработчикПередВыгрузкой Тогда
				
		Если ФлагРежимОтладки Тогда
			Попытка
				Выполнить(ПКО.ПередВыгрузкой);
			Исключение
				ЗаписатьИнформациюОбОшибкеВыгрузкиОбработчикаПКО(41, ОписаниеОшибки(), ПКО, Источник, "ПередВыгрузкойОбъекта");				
			КонецПопытки;
		Иначе
			Выполнить(ПКО.ПередВыгрузкой);
		КонецЕсли;
		
		Если Отказ Тогда	//	Отказ от дальнейшей обработки правила
			Возврат Приемник;
		КонецЕсли;
		
	КонецЕсли;

    // Возможно такие данные уже выгружались
    Если Не ВсеОбъектыВыгружены Тогда
		
		Если ЗапоминатьВыгруженные Тогда
			УзелСсылки = ВыгруженныеОбъекты[КлючВыгружаемыхДанных];
			Если УзелСсылки <> Неопределено Тогда
				Возврат УзелСсылки;
			КонецЕсли;
		КонецЕсли;
		
		мСчетчикНПП = мСчетчикНПП + 1;
		Нпп         = мСчетчикНПП;

		// Это позволит избежать циклических ссылок
        Если ЗапоминатьВыгруженные Тогда
			ВыгруженныеОбъекты[КлючВыгружаемыхДанных] = Нпп;
		КонецЕсли;

	КонецЕсли;

	СоответствиеЗначений = ПКО.Значения;
	КоличествоЭлементовСоответствияЗначений = СоответствиеЗначений.Количество();
	
	// Обработка  соответствий предопределенных элементов
	Если ВерсияПлатформыПриемника = "8.0" Тогда
		
		// если имя предопределенного элемента пока не определено, то попытаемся его определить
		Если ИмяПредопределенногоЭлемента = Неопределено Тогда
			
			Попытка
				ИмяПредопределенногоИсточник = СтруктураСвойств.Менеджер.ПолучитьИмяПредопределенного(Источник.Ссылка)
			Исключение
				ИмяПредопределенногоИсточник = "";
			КонецПопытки;
			
			Если НЕ ПустаяСтрока(ИмяПредопределенногоИсточник)
				И КоличествоЭлементовСоответствияЗначений > 0 Тогда
				
				ИмяПредопределенногоЭлемента = СоответствиеЗначений[Источник];
								
			Иначе
				ИмяПредопределенногоЭлемента = Неопределено;				
			КонецЕсли;
			
		КонецЕсли;	
		
		Если ИмяПредопределенногоЭлемента <> Неопределено Тогда
			КоличествоЭлементовСоответствияЗначений = 0;
		КонецЕсли;			
		
	Иначе	
		ИмяПредопределенногоЭлемента = Неопределено;	
	КонецЕсли;
	
	НеНужноВыгружатьПоСоответвиюЗначений = (КоличествоЭлементовСоответствияЗначений = 0);
	
	Если Не НеНужноВыгружатьПоСоответвиюЗначений Тогда
		
		// если нет объекта в соответсии значений - выгружаем его штатным образом
		УзелСсылки = СоответствиеЗначений[Источник];
		Если УзелСсылки = Неопределено
			И ПКО.СвойстваПоиска.Количество() > 0 Тогда
			
			НеНужноВыгружатьПоСоответвиюЗначений = Истина;	
			
	    КонецЕсли;
		
	КонецЕсли;

	Если НеНужноВыгружатьПоСоответвиюЗначений Тогда
		
		Если ПКО.СвойстваПоиска.Количество() > 0 
			ИЛИ ИмяПредопределенногоЭлемента <> Неопределено Тогда
			
			НужноЗапоминатьОбъект = ЗапоминатьВыгруженные И (Не ВсеОбъектыВыгружены);
			
			//	Формируем узел ссылки
			УзелСсылки = СоздатьУзел("Ссылка");
						
			Если НужноЗапоминатьОбъект Тогда
				УстановитьАтрибут(УзелСсылки, "Нпп", Нпп);								
			КонецЕсли;
			
			Если НеСоздаватьЕслиНеНайден Тогда
				УстановитьАтрибут(УзелСсылки, "НеСоздаватьЕслиНеНайден", НеСоздаватьЕслиНеНайден);				
			КонецЕсли;
			
			ВыгрузитьСвойства(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО, ПКО.СвойстваПоиска, 
				УзелСсылки, , ИмяПредопределенногоЭлемента, ПКО.НеВыгружатьОбъектыСвойствПоСсылкам ИЛИ ТолькоПолучитьУзелСсылки);
			
			УзелСсылки.ЗаписатьКонецЭлемента();
			УзелСсылки = УзелСсылки.Закрыть();
			
			Если НужноЗапоминатьОбъект Тогда
				ВыгруженныеОбъекты[КлючВыгружаемыхДанных] = УзелСсылки;
			КонецЕсли;			
			
		Иначе
			УзелСсылки = Нпп;
		КонецЕсли;
		
	Иначе
		
		// Поиск в соответствии значений по ПКЗ
		Если УзелСсылки = Неопределено Тогда
			// по соответвию значений не нашли - пробуем найти по своийствам поиска
			ЗаписатьВПротоколВыполнения(71);
			Возврат Неопределено;
		КонецЕсли;
		
		Если ЗапоминатьВыгруженные Тогда
			ВыгруженныеОбъекты[КлючВыгружаемыхДанных] = УзелСсылки;
		КонецЕсли;
		
		Возврат УзелСсылки;
		
	КонецЕсли;

		
	Если ТолькоПолучитьУзелСсылки
	 Или ВсеОбъектыВыгружены Тогда
	
		Возврат УзелСсылки;
		
	КонецЕсли; 

    Если Приемник = Неопределено Тогда
		
		Приемник = СоздатьУзел("Объект");
		УстановитьАтрибут(Приемник, "Нпп",			Нпп);
		УстановитьАтрибут(Приемник, "Тип", 			ПКО.Приемник);
		УстановитьАтрибут(Приемник, "ИмяПравила",	ПКО.Имя);
		
		Если НеЗамещатьОбъектПриЗагрузке Тогда
			УстановитьАтрибут(Приемник, "НеЗамещать",	"true");
		КонецЕсли;
		
		Если Не ПустаяСтрока(ПрефиксАвтонумерации) Тогда
			УстановитьАтрибут(Приемник, "ПрефиксАвтонумерации",	ПрефиксАвтонумерации);
		КонецЕсли;
		
		Если Не ПустаяСтрока(РежимЗаписи) Тогда
			УстановитьАтрибут(Приемник, "РежимЗаписи",	РежимЗаписи);
			Если Не ПустаяСтрока(РежимПроведения) Тогда
				УстановитьАтрибут(Приемник, "РежимПроведения",	РежимПроведения);
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(УзелСсылки) <> одТипЧисло Тогда
			ДобавитьПодчиненный(Приемник, УзелСсылки);
		КонецЕсли; 
		
	КонецЕсли;

	// Обработчик ПриВыгрузке
	СтандартнаяОбработка = Истина;
	Отказ = Ложь;
	
	Если ПКО.ЕстьОбработчикПриВыгрузке Тогда
		
		Если ФлагРежимОтладки Тогда
			Попытка
				Выполнить(ПКО.ПриВыгрузке);
			Исключение
				ЗаписатьИнформациюОбОшибкеВыгрузкиОбработчикаПКО(42, ОписаниеОшибки(), ПКО, Источник, "ПриВыгрузкеОбъекта");				
			КонецПопытки;
		Иначе
			Выполнить(ПКО.ПриВыгрузке);
		КонецЕсли;
		
		Если Отказ Тогда	//	отказ от записи объекта в файл
			Возврат УзелСсылки;
		КонецЕсли;
		
	КонецЕсли;

	// Выгрузка свойств
	Если СтандартнаяОбработка Тогда
        ВыгрузитьСвойства(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО, ПКО.Свойства, , , , ПКО.НеВыгружатьОбъектыСвойствПоСсылкам ИЛИ ТолькоПолучитьУзелСсылки);
	КонецЕсли;    
	
    // Обработчик ПослеВыгрузки

	Если ПКО.ЕстьОбработчикПослеВыгрузки Тогда
		
		Если ФлагРежимОтладки Тогда
			Попытка
				Выполнить(ПКО.ПослеВыгрузки);
			Исключение
				ЗаписатьИнформациюОбОшибкеВыгрузкиОбработчикаПКО(43, ОписаниеОшибки(), ПКО, Источник, "ПослеВыгрузкиОбъекта");				
			КонецПопытки;
		Иначе
			Выполнить(ПКО.ПослеВыгрузки);
		КонецЕсли;
		
		Если Отказ Тогда	//	отказ от записи объекта в файл
			Возврат УзелСсылки;
		КонецЕсли;
	КонецЕсли;


	//	Запись объекта в файл
    Приемник.ЗаписатьКонецЭлемента();
	
	мСчетчикВыгруженныхОбъектов = 1 + мСчетчикВыгруженныхОбъектов;
	
	ЗаписатьВФайл(Приемник);	

	#Если Клиент Тогда
		Если КоличествоОбработанныхОбъектовДляОбновленияСтатуса > 0 
			И мСчетчикВыгруженныхОбъектов % КоличествоОбработанныхОбъектовДляОбновленияСтатуса = 0 Тогда
					
			Попытка
				ИмяМетаданных = ТипЗнч(Источник);
			Исключение
				ИмяМетаданных = "";
			КонецПопытки;				
			
			Попытка
				
				Состояние("Выгрузка объектов """ + Источник + 
					""". Выгружено: " + Строка(мСчетчикВыгруженныхОбъектов) +
					" Объект: " + ИмяМетаданных);
					
			Исключение
			КонецПопытки;	
					
		КонецЕсли;
	#КонецЕсли	

	
	Возврат УзелСсылки;

КонецФункции	//	ВыгрузитьПоПравилу()

// Производит выгрузку объекта выборки в соответствии с указанным правилом
//
// Параметры:
//  Объект         - выгружаемый объект выборки
//  Правило        - ссылка на правило выгрузки данных
//  Свойства       - свойства объекта метаданного выгружаемого объекта 
//  ВходящиеДанные - произвольные вспомогательные данные
// 
Процедура ВыгрузкаОбъектаВыборки(Объект, Правило, Свойства=Неопределено, ВходящиеДанные=Неопределено)

	Если ФлагКомментироватьОбработкуОбъектов Тогда
		
		Попытка
			ПрОбъекта   = Строка(Объект) + "  (" + ТипЗнч(Объект) + ")";
			ЗаписатьВПротоколВыполнения("Выгрузка объекта выборки:  " + ПрОбъекта, , Ложь, 1, 7);
		Исключение
			ЗаписатьВПротоколВыполнения("Выгрузка объекта выборки:  " + ТипЗнч(Объект), , Ложь, 1, 7);
		КонецПопытки;
		
	КонецЕсли;
	
	
	ИмяПКО			= Правило.ПравилоКонвертации;
	Отказ			= Ложь;
	ИсходящиеДанные	= Неопределено;
	

	// Глобальный обработчик ПередВыгрузкойОбъекта
    Если ЕстьГлобальныйОбработчикПередВыгрузкойОбъекта Тогда
		
		Если ФлагРежимОтладки Тогда
			Попытка
				Выполнить(Конвертация.ПередВыгрузкойОбъекта);
			Исключение
				ЗаписатьИнформациюОбОшибкеОбработчикиПВД(65, ОписаниеОшибки(), Правило.Имя, Объект, "ПередВыгрузкойОбъектаВыборки (глобальный)");							
			КонецПопытки;
		Иначе
			Выполнить(Конвертация.ПередВыгрузкойОбъекта);
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;	

	// Обработчик ПередВыгрузкой
	Если ФлагРежимОтладки Тогда
		Попытка
			Выполнить(Правило.ПередВыгрузкой);
		Исключение
			ЗаписатьИнформациюОбОшибкеОбработчикиПВД(33, ОписаниеОшибки(), Правило.Имя, Объект, "ПередВыгрузкойОбъектаВыборки");
		КонецПопытки;
	Иначе
		Выполнить(Правило.ПередВыгрузкой);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
    
    УзелСсылки = Неопределено;
		
	ВыгрузитьПоПравилу(Объект, , ИсходящиеДанные, , ИмяПКО, УзелСсылки);
	//08.10.15 А.А. перенесла в процедуру ВыгрузитьПоправилу
	////БАЛАНС (29.07.2008) 
	//Попытка
	//	Если ТипЗнч(Объект)=Тип("ДокументСсылка."+Объект.Метаданные().Имя) Тогда
	//		НоваяСтрока=мТаблицаВыгруженныхДокументов.Добавить();
	//		НоваяСтрока.Документ=Объект;
	//	КонецЕсли;
	//Исключение
	//КонецПопытки;
	
	// Глобальный обработчик ПослеВыгрузкиОбъекта
    Если ЕстьГлобальныйОбработчикПослеВыгрузкиОбъекта Тогда
		Если ФлагРежимОтладки Тогда
			Попытка
				Выполнить(Конвертация.ПослеВыгрузкиОбъекта);
			Исключение
				ЗаписатьИнформациюОбОшибкеОбработчикиПВД(69, ОписаниеОшибки(), Правило.Имя, Объект, "ПослеВыгрузкиОбъектаВыборки (глобальный)");
            КонецПопытки;
		Иначе
			Выполнить(Конвертация.ПослеВыгрузкиОбъекта);
		КонецЕсли;
	КонецЕсли;

	
    // Обработчик ПослеВыгрузки
	Если ФлагРежимОтладки Тогда
		Попытка
			Выполнить(Правило.ПослеВыгрузки);
		Исключение
			ЗаписатьИнформациюОбОшибкеОбработчикиПВД(34, ОписаниеОшибки(), Правило.Имя, Объект, "ПослеВыгрузкиОбъектаВыборки");
        КонецПопытки;
	Иначе
		Выполнить(Правило.ПослеВыгрузки);
	КонецЕсли;
	
КонецПроцедуры // ВыгрузкаОбъектаВыборки()

Функция ПолучитьРезультатЗапросаДляВыгрузкиОчисткиДанных(Свойства, ИмяТипа, 
	ВыборкаДляОчисткиДанных = Ложь, УдалятьОбъектыНепосредственно = Ложь, ВыбиратьВсеПоля = Истина) Экспорт 
	
	СтрокаРазрешения = ?(ВыгружатьТолькоРазрешенные, " РАЗРЕШЕННЫЕ ", "");
	
	СтрокаВыбораПолей = ?(ВыбиратьВсеПоля, " * ", "	ОбъектДляВыгрузки.Ссылка КАК Ссылка ");
	
	Если ИмяТипа = "Справочник" 
		ИЛИ ИмяТипа = "ПланВидовХарактеристик" 
		ИЛИ ИмяТипа = "ПланСчетов" 
		ИЛИ ИмяТипа = "ПланВидовРасчета" 
		ИЛИ ИмяТипа = "РегистрБухгалтерии"
		ИЛИ ИмяТипа = "ПланОбмена"
		ИЛИ ИмяТипа = "Задача"
		ИЛИ ИмяТипа = "БизнесПроцесс" Тогда
		
		Запрос = Новый Запрос();
		
		Запрос.Текст = "ВЫБРАТЬ " + СтрокаРазрешения + "
		         |	" + СтрокаВыбораПолей + "
		         |ИЗ
		         |	" + ИмяТипа + "." + Свойства.Имя + " КАК ОбъектДляВыгрузки
				 |
				 |";
		
		Если ВыборкаДляОчисткиДанных
			И УдалятьОбъектыНепосредственно
			И ИмяТипа <> "ПланВидовРасчета" Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|	ГДЕ ОбъектДляВыгрузки.Родитель = &Родитель
			|";
			
			Запрос.УстановитьПараметр("Родитель", Свойства.Менеджер.ПустаяСсылка());
			
		КонецЕсли;		 
					
	ИначеЕсли ИмяТипа = "Документ" Тогда
		
		Запрос = Новый Запрос();
		
		ИтоговоеОграничениеПоДате = "";
		Если ДатаНачала <> ЗначениеПустаяДата Тогда
			
			ИтоговоеОграничениеПоДате = "
			|	ГДЕ
			|		ОбъектДляВыгрузки.Дата >= &ДатаНачала";
			
		КонецЕсли;
			
		Если ДатаОкончания <> ЗначениеПустаяДата Тогда
			
			Если ПустаяСтрока(ИтоговоеОграничениеПоДате) Тогда
				
				ИтоговоеОграничениеПоДате = "
				|	ГДЕ
				|		ОбъектДляВыгрузки.Дата <= &ДатаОкончания";
				
			Иначе
				
				ИтоговоеОграничениеПоДате = ИтоговоеОграничениеПоДате + "
				|	И
				|		ОбъектДляВыгрузки.Дата <= &ДатаОкончания";
				
			КонецЕсли;
			
		КонецЕсли;	 
		
		Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
		
		Запрос.Текст = "ВЫБРАТЬ " + СтрокаРазрешения + "
		         |	" + СтрокаВыбораПолей + "
		         |ИЗ
		         |	" + ИмяТипа + "." + Свойства.Имя + " КАК ОбъектДляВыгрузки
				 |
				 |" + ИтоговоеОграничениеПоДате;
					 
											
	ИначеЕсли ИмяТипа = "РегистрСведений" Тогда
		
		Непериодический = НЕ Свойства.Периодический;
		ПодчиненныйРегистратору = Свойства.ПодчиненныйРегистратору;
		
		
		НеНужноОграничениеПоДатам = ВыборкаДляОчисткиДанных	ИЛИ Непериодический;
				
		Запрос = Новый Запрос();
		
		ИтоговоеОграничениеПоДате = "";
		
		Если НЕ НеНужноОграничениеПоДатам Тогда
			
		    Если ДатаНачала <> ЗначениеПустаяДата Тогда
				
				ИтоговоеОграничениеПоДате = "
				|	ГДЕ
				|		ОбъектДляВыгрузки.Период >= &ДатаНачала";
				
			КонецЕсли;
				
			Если ДатаОкончания <> ЗначениеПустаяДата Тогда
				
				Если ПустаяСтрока(ИтоговоеОграничениеПоДате) Тогда
					
					ИтоговоеОграничениеПоДате = "
					|	ГДЕ
					|		ОбъектДляВыгрузки.Период <= &ДатаОкончания";
					
				Иначе
					
					ИтоговоеОграничениеПоДате = ИтоговоеОграничениеПоДате + "
					|	И
					|		ОбъектДляВыгрузки.Период <= &ДатаОкончания";
					
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
		
		СтрокаДополненияПолейВыбокиПодчиненРегистратору = ?(НЕ ПодчиненныйРегистратору, ", NULL КАК Активность,
		|	NULL КАК Регистратор,
		|	NULL КАК НомерСтроки", "");
		
		СтрокаДополненияПолейВыбокиПериодичность = ?(Непериодический, ", NULL КАК Период", "");
		
		Запрос.Текст = "ВЫБРАТЬ " + СтрокаРазрешения + "
		         |	*
				 |
				 | " + СтрокаДополненияПолейВыбокиПодчиненРегистратору + "
				 | " + СтрокаДополненияПолейВыбокиПериодичность + "
				 |
		         |ИЗ
		         |	" + ИмяТипа + "." + Свойства.Имя + " КАК ОбъектДляВыгрузки
				 |
				 |" + ИтоговоеОграничениеПоДате;
		
	Иначе
		
		Возврат Неопределено;
					
	КонецЕсли;
	
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПолучитьВыборкуДляВыгрузкиОчисткиДанных(Свойства, ИмяТипа, 
	ВыборкаДляОчисткиДанных = Ложь, УдалятьОбъектыНепосредственно = Ложь, ВыбиратьВсеПоля = Истина) Экспорт
	
	РезультатЗапроса = ПолучитьРезультатЗапросаДляВыгрузкиОчисткиДанных(Свойства, ИмяТипа, 
			ВыборкаДляОчисткиДанных, УдалятьОбъектыНепосредственно, ВыбиратьВсеПоля);
			
	Если РезультатЗапроса = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
			
	Выборка = РезультатЗапроса.Выбрать();
	
	#Если Клиент Тогда
	Если ВыборкаДляОчисткиДанных Тогда
		Состояние("Очистка " + ИмяТипа + ":  " + Свойства.Имя);
	Иначе
		Состояние("Выгрузка " + ИмяТипа + ":  " + Свойства.Имя);
	КонецЕсли;
	#КонецЕсли
		
	
	Возврат Выборка;		
	
КонецФункции

Функция ПолучитьВыборкуДляВыгрузкиСОграничениями(Правило)
	
	ИмяМетаданных           = Правило.ИмяОбъектаДляЗапроса;
	
	СтрокаРазрешения = ?(ВыгружатьТолькоРазрешенные, " РАЗРЕШЕННЫЕ ", "");
	
	ПостроительОтчета.Текст = "ВЫБРАТЬ " + СтрокаРазрешения + " Объект.Ссылка КАК Ссылка ИЗ " + ИмяМетаданных + " КАК Объект "+ "{ГДЕ Объект.Ссылка.* КАК " + СтрЗаменить(ИмяМетаданных, ".", "_") + "}";
	ПостроительОтчета.Отбор.Сбросить();
	Если НЕ Правило.НастройкиПостроителя = Неопределено Тогда
		ПостроительОтчета.УстановитьНастройки(Правило.НастройкиПостроителя);
	КонецЕсли;

	ПостроительОтчета.Выполнить();
	Выборка = ПостроительОтчета.Результат.Выбрать();
		
	Возврат Выборка;
		
КонецФункции

Функция ПолучитьВыборкуДляВыгрузкиПоПроизвольномуАлгоритму(ВыборкаДанных)
	
	Выборка = Неопределено;
	
	ТипВыборки = ТипЗнч(ВыборкаДанных);
			
	Если ТипВыборки = Тип("ВыборкаИзРезультатаЗапроса") Тогда
				
		Выборка = ВыборкаДанных;
		
	ИначеЕсли ТипВыборки = Тип("РезультатЗапроса") Тогда
				
		Выборка = ВыборкаДанных.Выбрать();
					
	ИначеЕсли ТипВыборки = Тип("Запрос") Тогда
				
		РезультатЗапроса = ВыборкаДанных.Выполнить();
		Выборка          = РезультатЗапроса.Выбрать();
									
	КонецЕсли;
		
	Возврат Выборка;	
	
КонецФункции

Функция ПолучитьСтрокуНабораКонстантДляВыгрузки(ТаблицаДанныхКонстантДляВыгрузки)
	
	СтрокаНабораКонтстант = "";
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанныхКонстантДляВыгрузки Цикл
		
		СтрокаНабораКонтстант = СтрокаНабораКонтстант + ", " + СтрокаТаблицы.Источник;	
		
	КонецЦикла;	
	
	Если Не ПустаяСтрока(СтрокаНабораКонтстант) Тогда
		
		СтрокаНабораКонтстант = Сред(СтрокаНабораКонтстант, 3);
		
	КонецЕсли;
	
	Возврат СтрокаНабораКонтстант;
	
КонецФункции

Процедура ВыгрузитьНаборКонстант(Правило, Свойства, ИсходящиеДанные)
	
	СтрокаИменНабораКонстант = ПолучитьСтрокуНабораКонстантДляВыгрузки(Свойства.ПКО.Свойства);
			
	НаборКонстант = Константы.СоздатьНабор(СтрокаИменНабораКонстант);
	НаборКонстант.Прочитать();
	ВыгрузкаОбъектаВыборки(НаборКонстант, Правило, Свойства, ИсходящиеДанные);	
	
КонецПроцедуры

Функция ОпределитьНужноВыбиратьВсеПоля(Правило)
	
	НужныВсеПоляДляВыборки = НЕ ПустаяСтрока(Конвертация.ПередВыгрузкойОбъекта)
		ИЛИ НЕ ПустаяСтрока(Правило.ПередВыгрузкой)
		ИЛИ НЕ ПустаяСтрока(Конвертация.ПослеВыгрузкиОбъекта)
		ИЛИ НЕ ПустаяСтрока(Правило.ПослеВыгрузки);		
		
	Возврат НужныВсеПоляДляВыборки;	
	
КонецФункции

// Выгружает данные по указанному правилу
//
// Параметры:
//  Правило        - ссылка на правило выгрузки данных
// 
Процедура ВыгрузитьДанныеПоПравилу(Правило)
	
	ИмяПКО = Правило.ПравилоКонвертации;
	
	Если Не ПустаяСтрока(ИмяПКО) Тогда
		
		ПКО = Правила[ИмяПКО];
		
	КонецЕсли;


	Если ФлагКомментироватьОбработкуОбъектов Тогда
		
		ЗаписатьВПротоколВыполнения("Начало обработки правила выгрузки данных:  " + Правило.Имя + "  (" + Правило.Наименование + ")", , Ложь, , 4);
		
	КонецЕсли;
		
	
	// Обработчик ПередОбработкой
    Отказ			= Ложь;
	ИсходящиеДанные	= Неопределено;
	ВыборкаДанных	= Неопределено;


	Если ФлагРежимОтладки Тогда
		
		Попытка
			
			Выполнить(Правило.ПередОбработкой);
			
		Исключение
			
			ЗаписатьИнформациюОбОшибкеОбработчикиПВД(31, ОписаниеОшибки(), Правило.Имя, , "ПередОбработкойВыгрузкиДанных");
									
		КонецПопытки;
		
	Иначе
		
		Выполнить(Правило.ПередОбработкой);
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;


	// Стандартная выборка с отбром
	Если Правило.СпособОтбораДанных = "СтандартнаяВыборка" И Правило.ИспользоватьОтбор Тогда

		Выборка = ПолучитьВыборкуДляВыгрузкиСОграничениями(Правило);
		
		Пока Выборка.Следующий() Цикл
			ВыгрузкаОбъектаВыборки(Выборка.Ссылка, Правило, , ИсходящиеДанные);
		КонецЦикла;

	// Стандартная выборка без отбора
	ИначеЕсли (Правило.СпособОтбораДанных = "СтандартнаяВыборка") Тогда
		
		Свойства	= Менеджеры[Правило.ОбъектВыборки];
		ИмяТипа		= Свойства.ИмяТипа;
		
		Если ИмяТипа = "Константы" Тогда
			
			ВыгрузитьНаборКонстант(Правило, Свойства, ИсходящиеДанные);		
			
		Иначе
			
			ВыбиратьВсеПоля = ОпределитьНужноВыбиратьВсеПоля(Правило);
			
			Выборка = ПолучитьВыборкуДляВыгрузкиОчисткиДанных(Свойства, ИмяТипа, , , ВыбиратьВсеПоля);
			
			Если Выборка = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл
				
				Если ИмяТипа =  "РегистрСведений" 
					ИЛИ ИмяТипа = "РегистрБухгалтерии" Тогда
					
					ВыгрузкаОбъектаВыборки(Выборка, Правило, Свойства, ИсходящиеДанные);
					
				Иначе
					
					ВыгрузкаОбъектаВыборки(Выборка.Ссылка, Правило, Свойства, ИсходящиеДанные);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли Правило.СпособОтбораДанных = "ПроизвольныйАлгоритм" Тогда

		Если ВыборкаДанных <> Неопределено Тогда
			
			Выборка = ПолучитьВыборкуДляВыгрузкиПоПроизвольномуАлгоритму(ВыборкаДанных);
			
            Если Выборка <> Неопределено Тогда
				
				Пока Выборка.Следующий() Цикл
					
					ВыгрузкаОбъектаВыборки(Выборка, Правило, , ИсходящиеДанные);
					
				КонецЦикла;
				
			Иначе
				
				Для каждого Объект Из ВыборкаДанных Цикл
					
					ВыгрузкаОбъектаВыборки(Объект, Правило, , ИсходящиеДанные);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;

	
	// Обработчик ПослеОбработки

	//ВсеОбъектыВыгружены   = ПКО.ВсеОбъектыВыгружены;
	
	Если ФлагРежимОтладки Тогда
		
		Попытка
			
			Выполнить(Правило.ПослеОбработки);
			
		Исключение
			
			ЗаписатьИнформациюОбОшибкеОбработчикиПВД(32, ОписаниеОшибки(), Правило.Имя, , "ПослеОбработкиВыгрузкиДанных");
			
		КонецПопытки;
		
	Иначе
		
		Выполнить(Правило.ПослеОбработки);
		
	КонецЕсли;
	
КонецПроцедуры // ВыгрузитьДанныеПоПравилу()

// Обходит дерево правил выгрузки данных и выполняет выгрузку
//
// Параметры:
//  Строки         - Коллекция строк дерева значений
// 
Процедура ОбработатьПравилаВыгрузки(Строки, СоотвествиеУзловПланаОбменаИСтрокВыгрузки)
	
	Для каждого ПравилоВыгрузки Из Строки Цикл
		
		Если ПравилоВыгрузки.Включить = 0 Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		Если (ПравилоВыгрузки.СсылкаНаУзелОбмена <> Неопределено 
				И НЕ ПравилоВыгрузки.СсылкаНаУзелОбмена.Пустая()) Тогда
			
			МассивПравилВыгрузки = СоотвествиеУзловПланаОбменаИСтрокВыгрузки.Получить(ПравилоВыгрузки.СсылкаНаУзелОбмена);
			
			Если МассивПравилВыгрузки = Неопределено Тогда
				
				МассивПравилВыгрузки = Новый Массив();	
				
			КонецЕсли;
			
			МассивПравилВыгрузки.Добавить(ПравилоВыгрузки);
			
			СоотвествиеУзловПланаОбменаИСтрокВыгрузки.Вставить(ПравилоВыгрузки.СсылкаНаУзелОбмена, МассивПравилВыгрузки);
			
			Продолжить;
			
		КонецЕсли;

		Если ПравилоВыгрузки.ЭтоГруппа Тогда
			
			ОбработатьПравилаВыгрузки(ПравилоВыгрузки.Строки, СоотвествиеУзловПланаОбменаИСтрокВыгрузки);
			Продолжить;
			
		КонецЕсли;
		
		ВыгрузитьДанныеПоПравилу(ПравилоВыгрузки);
		
	КонецЦикла; 
	
КонецПроцедуры // ОбработатьПравилаВыгрузки() 

Функция СкопироватьМассивПравилВыгрузки(ИсходныйМассив)
	
	РезультирующийМассив = Новый Массив();
	
	Для Каждого Элемент Из ИсходныйМассив Цикл
		
		РезультирующийМассив.Добавить(Элемент);	
		
	КонецЦикла;
	
	Возврат РезультирующийМассив;
	
КонецФункции

Функция НайтиСтрокуДереваПравилВыгрузкиПоТипуВыгрузки(МассивСтрок, ТипВыгрузки)
	
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		
		Если СтрокаМассива.ОбъектВыборки = ТипВыгрузки Тогда
			
			Возврат СтрокаМассива;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура УдалитьСтрокуДереваПравилВыгрузкиПоТипуВыгрузкиИзМассива(МассивСтрок, ЭлементУдаления)
	
	Счетчик = МассивСтрок.Количество() - 1;
	Пока Счетчик >= 0 Цикл
		
		СтрокаМассива = МассивСтрок[Счетчик];
		
		Если СтрокаМассива = ЭлементУдаления Тогда
			
			МассивСтрок.Удалить(Счетчик);
			Возврат;
			
		КонецЕсли; 
		
		Счетчик = Счетчик - 1;	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьСтрокуПравилВыгрузкиПоОбъектуОбмена(Данные, МетаданныеПоследнегоОбъекта, МетаданныеОбъектаВыгрузки, 
	ПоследняяСтрокаПравилВыгрузки, ТекущаяСтрокаПравилаВыгрузки, ВременныйМассивПравилКонвертации, ОбъектДляПравилВыгрузки, 
	ВыгружаетсяРегистр, ВыгружаютсяКонстанты, КонстантыБылиВыгружены)
	
	ТекущаяСтрокаПравилаВыгрузки = Неопределено;
	ОбъектДляПравилВыгрузки = Неопределено;
	ВыгружаетсяРегистр = Ложь;
	ВыгружаютсяКонстанты = Ложь;
	
	Если МетаданныеПоследнегоОбъекта = МетаданныеОбъектаВыгрузки
		И ПоследняяСтрокаПравилВыгрузки = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураДанных = МенеждерыДляПлановОбмена[МетаданныеОбъектаВыгрузки];
	
	Если СтруктураДанных = Неопределено тогда
		
		ВыгружаютсяКонстанты = Метаданные.Константы.Содержит(МетаданныеОбъектаВыгрузки);
		
		Если КонстантыБылиВыгружены 
			ИЛИ НЕ ВыгружаютсяКонстанты Тогда
			
			Возврат;
			
		КонецЕсли;
		
		// нужно найти правило для констант
		Если МетаданныеПоследнегоОбъекта <> МетаданныеОбъектаВыгрузки Тогда
		
			ТекущаяСтрокаПравилаВыгрузки = НайтиСтрокуДереваПравилВыгрузкиПоТипуВыгрузки(ВременныйМассивПравилКонвертации, Тип("КонстантыНабор"));
			
		Иначе
			
			ТекущаяСтрокаПравилаВыгрузки = ПоследняяСтрокаПравилВыгрузки;	
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если СтруктураДанных.ЭтоСсылочныйТип = Истина Тогда
						
		Если МетаданныеПоследнегоОбъекта <> МетаданныеОбъектаВыгрузки Тогда
		
			ТекущаяСтрокаПравилаВыгрузки = НайтиСтрокуДереваПравилВыгрузкиПоТипуВыгрузки(ВременныйМассивПравилКонвертации, СтруктураДанных.ТипСсылки);
			
		Иначе
			
			ТекущаяСтрокаПравилаВыгрузки = ПоследняяСтрокаПравилВыгрузки;	
			
		КонецЕсли;
		
		ОбъектДляПравилВыгрузки = Данные.Ссылка;
		
	ИначеЕсли СтруктураДанных.ЭтоРегистр = Истина Тогда
		
		Если МетаданныеПоследнегоОбъекта <> МетаданныеОбъектаВыгрузки Тогда
		
			ТекущаяСтрокаПравилаВыгрузки = НайтиСтрокуДереваПравилВыгрузкиПоТипуВыгрузки(ВременныйМассивПравилКонвертации, СтруктураДанных.ТипСсылки);
			
		Иначе
			
			ТекущаяСтрокаПравилаВыгрузки = ПоследняяСтрокаПравилВыгрузки;	
			
		КонецЕсли;
		
		ОбъектДляПравилВыгрузки = Данные;
		
		ВыгружаетсяРегистр = Истина;
		
	КонецЕсли;	
		
КонецПроцедуры

Процедура ВыполнитьВыгрузкуИзмененныхДанныхДляУзлаОбмена(УзелОбмена, МассивПравилКонвертации, СтруктураДляУдаленияРегистрацииИзменений)
	
	СтруктураДляУдаленияРегистрацииИзменений.Вставить("МассивПКО", Неопределено);
	СтруктураДляУдаленияРегистрацииИзменений.Вставить("НомерСообщения", Неопределено);
	
	ЗаписьXML = Новый ЗаписьXML();
	
	ЗаписьXML.ОткрытьФайл(ПолучитьИмяВременногоФайла(".xml"));
	
	// Создаем новое сообщение
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
		
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелОбмена);
	
	// считаем количество записанных объектов
	КоличествоНайденныхДляЗаписиОбъектов = 0;
	
	// начинаем транзакцию
	Если ИспользоватьТранзакцииПриВыгрузкеДляПлановОбмена Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	ПоследнийОбъектМетаданных = Неопределено;
	ПоследняяСтрокаПравилаВыгрузки = Неопределено;
	
	ТекущийОбъектМетаданных = Неопределено;
	ТекущаяСтрокаПравилаВыгрузки = Неопределено;
	
	ИсходящиеДанные = Неопределено;
	
	ВременныйМассивПравилКонвертации = СкопироватьМассивПравилВыгрузки(МассивПравилКонвертации);
	
	Отказ			= Ложь;
	ИсходящиеДанные	= Неопределено;
	ВыборкаДанных	= Неопределено;
	
	ОбъектДляПравилВыгрузки = Неопределено;
	КонстантыБылиВыгружены = Ложь;
	
	Попытка
	
		// Получаем выборку изменённых данных
		ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(ЗаписьСообщения.Получатель, ЗаписьСообщения.НомерСообщения);
		СтруктураДляУдаленияРегистрацииИзменений.НомерСообщения = ЗаписьСообщения.НомерСообщения;
		
		Пока ВыборкаИзменений.Следующий() Цикл
					
			Данные = ВыборкаИзменений.Получить();
			КоличествоНайденныхДляЗаписиОбъектов = КоличествоНайденныхДляЗаписиОбъектов + 1;
			
			//БАЛАНС (29.07.2008)                       
			//заполним таблицу зарегистрированных документов
			Если Лев(ТипЗнч(Данные),8)="Документ" Тогда
				НоваяСтрока=мТаблицаЗарегистрированныхДокументов.Добавить();
				НоваяСтрока.Документ=Данные.Ссылка;
			КонецЕсли;
	
			ТипДанныхДляВыгрузки = ТипЗнч(Данные); 
			
			Удаление = (ТипДанныхДляВыгрузки = одТипУдалениеОбъекта);
			
			// удаление не отрабатываем
			Если Удаление Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущийОбъектМетаданных = Данные.Метаданные();
			
			// работа с данными полученными из узла обмена
			// по данным определяем правило конвертации и производим выгрузку данных
			
			ВыгружаетсяРегистр = Ложь;
			ВыгружаютсяКонстанты = Ложь;
			
			ПолучитьСтрокуПравилВыгрузкиПоОбъектуОбмена(Данные, ПоследнийОбъектМетаданных, ТекущийОбъектМетаданных, 
				ПоследняяСтрокаПравилаВыгрузки, ТекущаяСтрокаПравилаВыгрузки, ВременныйМассивПравилКонвертации, ОбъектДляПравилВыгрузки, 
				ВыгружаетсяРегистр, ВыгружаютсяКонстанты, КонстантыБылиВыгружены);
				
				
			Если ПоследнийОбъектМетаданных <> ТекущийОбъектМетаданных Тогда
				
				
				// после обработки
				Если ПоследняяСтрокаПравилаВыгрузки <> Неопределено Тогда
			
					Если ФлагРежимОтладки Тогда
							
						Попытка
									
							Выполнить(ПоследняяСтрокаПравилаВыгрузки.ПослеОбработки);
									
						Исключение
									
							ЗаписатьИнформациюОбОшибкеОбработчикиПВД(32, ОписаниеОшибки(), ПоследняяСтрокаПравилаВыгрузки.Имя, , "ПослеОбработкиВыгрузкиДанных");
									
						КонецПопытки;
						   		   	
					Иначе
								
						Выполнить(ПоследняяСтрокаПравилаВыгрузки.ПослеОбработки);
								
					КонецЕсли;
					
				КонецЕсли;
				
				
				
				// перед обработкой
				Если ТекущаяСтрокаПравилаВыгрузки <> Неопределено Тогда
					
					Если ФлагКомментироватьОбработкуОбъектов Тогда
		
						ЗаписатьВПротоколВыполнения("Начало обработки правила выгрузки данных:  " + ТекущаяСтрокаПравилаВыгрузки.Имя + "  (" + ТекущаяСтрокаПравилаВыгрузки.Наименование + ")", , Ложь, , 4);
							
					КонецЕсли;
										
					// Обработчик ПередОбработкой
				    Отказ			= Ложь;
					ИсходящиеДанные	= Неопределено;
					ВыборкаДанных	= Неопределено;
                   
					Если ФлагРежимОтладки Тогда
						
						Попытка
							
							Выполнить(ТекущаяСтрокаПравилаВыгрузки.ПередОбработкой);
							
						Исключение
							
							ЗаписатьИнформациюОбОшибкеОбработчикиПВД(31, ОписаниеОшибки(), ТекущаяСтрокаПравилаВыгрузки.Имя, , "ПередОбработкойВыгрузкиДанных");
													
						КонецПопытки;
						
					Иначе
						
						Выполнить(ТекущаяСтрокаПравилаВыгрузки.ПередОбработкой);
						
					КонецЕсли;
					
					
					Если Отказ Тогда
						
						// удаляем правило из массива правил
						ТекущаяСтрокаПравилаВыгрузки = Неопределено;
						УдалитьСтрокуДереваПравилВыгрузкиПоТипуВыгрузкиИзМассива(ВременныйМассивПравилКонвертации, ТекущаяСтрокаПравилаВыгрузки);
                        ОбъектДляПравилВыгрузки = Неопределено;						
						
					КонецЕсли;
					
				КонецЕсли;				
				
				
			КонецЕсли;
			
			
			// есть правило по которому нужно делать выгрузку данных
			Если ТекущаяСтрокаПравилаВыгрузки <> Неопределено Тогда
				
				Если ВыгружаетсяРегистр Тогда
					
					Для Каждого СтрокаРегистра Из ОбъектДляПравилВыгрузки Цикл
						ВыгрузкаОбъектаВыборки(СтрокаРегистра, ТекущаяСтрокаПравилаВыгрузки, , ИсходящиеДанные);
					КонецЦикла;
					
				ИначеЕсли ВыгружаютсяКонстанты ТОгда
					
					Свойства	= Менеджеры[ТекущаяСтрокаПравилаВыгрузки.ОбъектВыборки];
					ВыгрузитьНаборКонстант(ТекущаяСтрокаПравилаВыгрузки, Свойства, ИсходящиеДанные);
					
				Иначе	
				
					ВыгрузкаОбъектаВыборки(ОбъектДляПравилВыгрузки, ТекущаяСтрокаПравилаВыгрузки, , ИсходящиеДанные);
				
				КонецЕсли;
				
			КонецЕсли;
			
			ПоследнийОбъектМетаданных = ТекущийОбъектМетаданных;
			ПоследняяСтрокаПравилаВыгрузки = ТекущаяСтрокаПравилаВыгрузки; 
			
			Если КоличествоОбработанныхОбъектовДляОбновленияСтатуса > 0 
				И КоличествоНайденныхДляЗаписиОбъектов % КоличествоОбработанныхОбъектовДляОбновленияСтатуса = 0 Тогда
				
				Попытка
					ИмяМетаданных = ТекущийОбъектМетаданных.ПолноеИмя();
				Исключение
					ИмяМетаданных = "";
				КонецПопытки;
				
				#Если Клиент Тогда
				Попытка
					Состояние("Запись изменений для узла """ + УзелОбмена.Наименование + 
						""". Прочитано: " + Строка(КоличествоНайденныхДляЗаписиОбъектов) +
						" Объект: " + ИмяМетаданных);
				Исключение
				КонецПопытки;	
				#КонецЕсли
				
			КонецЕсли;
			
			Если ИспользоватьТранзакцииПриВыгрузкеДляПлановОбмена 
				И (КоличествоЭлементовВТранзакцииПриВыгрузкеДляПлановОбмена > 0)
				И (КоличествоНайденныхДляЗаписиОбъектов = КоличествоЭлементовВТранзакцииПриВыгрузкеДляПлановОбмена) Тогда
				
				// промежуточную транзакцию закрываем и открываем новую
				ЗафиксироватьТранзакцию();
				НачатьТранзакцию();
				
				КоличествоНайденныхДляЗаписиОбъектов = 0;
			КонецЕсли;
			

		КонецЦикла;
		
		Если ИспользоватьТранзакцииПриВыгрузкеДляПлановОбмена Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
		// Завершаем запись сообщения
		ЗаписьСообщения.ЗакончитьЗапись();
				
		ЗаписьXML.Закрыть();
		
		
		
		
		// событие после обработки
		Если ПоследняяСтрокаПравилаВыгрузки <> Неопределено Тогда
		
			Если ФлагРежимОтладки Тогда
			
				Попытка
					
					Выполнить(ПоследняяСтрокаПравилаВыгрузки.ПослеОбработки);
					
				Исключение
					
					ЗаписатьИнформациюОбОшибкеОбработчикиПВД(32, ОписаниеОшибки(), ПоследняяСтрокаПравилаВыгрузки.Имя, , "ПослеОбработкиВыгрузкиДанных");
					
				КонецПопытки;
		   		   	
			Иначе
				
				Выполнить(ПоследняяСтрокаПравилаВыгрузки.ПослеОбработки);
				
			КонецЕсли;
		
		КонецЕсли;
		
		
	Исключение
		
		Если ИспользоватьТранзакцииПриВыгрузкеДляПлановОбмена Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ЗП = ПолучитьСтруктуруЗаписиПротокола(72, ОписаниеОшибки());
		ЗП.УзелПланаОбмена  = УзелОбмена;
		ЗаписатьВПротоколВыполнения(72, ЗП, Истина);
						
		ЗаписьXML.Закрыть();
				
	КонецПопытки;
	
	СтруктураДляУдаленияРегистрацииИзменений.МассивПКО = ВременныйМассивПравилКонвертации;
	
КонецПроцедуры

Процедура ОбработатьВыгрузкуДляПлановОбмена(СоответсвиеУзловИПравилВыгрузки, СтруктураДляУдаленияРегистрацииИзменений)
	
	Для Каждого СтрокаСоотвествия Из СоответсвиеУзловИПравилВыгрузки Цикл
		
		УзелОбмена = СтрокаСоотвествия.Ключ;
		МассивПравилКонвертации = СтрокаСоотвествия.Значение;
		
		ЛокальнаяСтруктураДляУдаленияРегистрацииИзменений = Новый Структура();
		
		ВыполнитьВыгрузкуИзмененныхДанныхДляУзлаОбмена(УзелОбмена, МассивПравилКонвертации, ЛокальнаяСтруктураДляУдаленияРегистрацииИзменений);
		
		Если ЛокальнаяСтруктураДляУдаленияРегистрацииИзменений.МассивПКО <> Неопределено
			И ЛокальнаяСтруктураДляУдаленияРегистрацииИзменений.МассивПКО.Количество() > 0 Тогда
			
			СтруктураДляУдаленияРегистрацииИзменений.Вставить(УзелОбмена, ЛокальнаяСтруктураДляУдаленияРегистрацииИзменений);	
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьИзменениеРегистрацииДляУзловОбмена(СоответсвиеУзловИПравилВыгрузки)
	
	Для Каждого Элемент Из СоответсвиеУзловИПравилВыгрузки Цикл
	
		Если ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки = 0 Тогда
			
			Возврат;
			
		ИначеЕсли ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки = 1 Тогда
			
			// для всех изменений которые были в плане обмена отменяем регистрацию
			ПланыОбмена.УдалитьРегистрациюИзменений(Элемент.Ключ, Элемент.Значение.НомерСообщения);
			
		ИначеЕсли ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки = 2 Тогда	
			
			// удаление изменений только для метаданныех выгруженных объектов первого уровня 
			
			Для Каждого ВыгруженноеПКО Из Элемент.Значение.МассивПКО Цикл
				
				Попытка
					
					Правило = Правила[ВыгруженноеПКО.ПравилоКонвертации];
					
					Менеждер = Менеджеры[Правило.Источник];
					
					ПланыОбмена.УдалитьРегистрациюИзменений(Элемент.Ключ, Менеждер.ОбъектМД);	
					
				Исключение
					
					
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Открывает файл обмена, читает атрибуты корневого узла файла в соответвтии с форматом обмена
//
// Параметры:
//  ТолькоПрочитатьШапку - Булево. если Истина, то после прочтения шапки файла обмена
//  (корневой узел), файл закрывается
//
Процедура ОткрытьФайлЗагрузки(ТолькоПрочитатьШапку=Ложь, ДанныеФайлаОбмена = "") Экспорт

	Если ПустаяСтрока(ИмяФайлаОбмена) И ТолькоПрочитатьШапку Тогда
		ДатаНачала         = "";
		ДатаОкончания      = "";
		ДатаВыгрузкиДанных = "";
		ВерсияПравилОбмена = "";
		Комментарий        = "";
		Возврат;
	КонецЕсли;


    ИмяФайлаЗагрузкиДанных = ИмяФайлаОбмена;
	
	
	// Архивные файлы будем идентифицировать по расширению ".aml"
	Если Найти(ИмяФайлаОбмена, ".aml") > 0 Тогда
		
		ИмяФайлаЗагрузкиДанных = РаспаковатьВходящийФайлОбмена();		 
		
	КонецЕсли; 
	
	
	ФлагОшибки = Ложь;
	ФайлОбмена = Новый ЧтениеXML();

	Попытка
		Если НЕ ПустаяСтрока(ДанныеФайлаОбмена) Тогда
			ФайлОбмена.УстановитьСтроку(ДанныеФайлаОбмена);
		Иначе
			ФайлОбмена.ОткрытьФайл(ИмяФайлаЗагрузкиДанных);
		КонецЕсли;
	Исключение
		ЗаписатьВПротоколВыполнения(5);
		Возврат;
	КонецПопытки;
	
	ФайлОбмена.Прочитать();


	мАтрибутыФайлаОбмена = Новый Структура;
	
	
	Если ФайлОбмена.ЛокальноеИмя = "ФайлОбмена" Тогда
		
		мАтрибутыФайлаОбмена.Вставить("ВерсияФормата",            одАтрибут(ФайлОбмена, одТипСтрока, "ВерсияФормата"));
		мАтрибутыФайлаОбмена.Вставить("ДатаВыгрузки",             одАтрибут(ФайлОбмена, одТипДата,   "ДатаВыгрузки"));
		мАтрибутыФайлаОбмена.Вставить("НачалоПериодаВыгрузки",    одАтрибут(ФайлОбмена, одТипДата,   "НачалоПериодаВыгрузки"));
		мАтрибутыФайлаОбмена.Вставить("ОкончаниеПериодаВыгрузки", одАтрибут(ФайлОбмена, одТипДата,   "ОкончаниеПериодаВыгрузки"));
		мАтрибутыФайлаОбмена.Вставить("ИмяКонфигурацииИсточника", одАтрибут(ФайлОбмена, одТипСтрока, "ИмяКонфигурацииИсточника"));
		мАтрибутыФайлаОбмена.Вставить("ИмяКонфигурацииПриемника", одАтрибут(ФайлОбмена, одТипСтрока, "ИмяКонфигурацииПриемника"));
		мАтрибутыФайлаОбмена.Вставить("ИдПравилКонвертации",      одАтрибут(ФайлОбмена, одТипСтрока, "ИдПравилКонвертации"));

		ДатаНачала         = мАтрибутыФайлаОбмена.НачалоПериодаВыгрузки;
		ДатаОкончания      = мАтрибутыФайлаОбмена.ОкончаниеПериодаВыгрузки;
		ДатаВыгрузкиДанных = мАтрибутыФайлаОбмена.ДатаВыгрузки;
		Комментарий        = одАтрибут(ФайлОбмена, одТипСтрока, "Комментарий");
		
	Иначе
		
		ЗаписатьВПротоколВыполнения(9);
		Возврат;
		
	КонецЕсли;


	ФайлОбмена.Прочитать();
			
	ИмяУзла = ФайлОбмена.ЛокальноеИмя;
		
	Если ИмяУзла = "ПравилаОбмена" Тогда
		ЗагрузитьПравилаОбмена(ФайлОбмена, "ЧтениеXML");
	Иначе
		ФайлОбмена.Закрыть();
		ФайлОбмена = Новый ЧтениеXML();
		Попытка
			
			Если НЕ ПустаяСтрока(ДанныеФайлаОбмена) Тогда
				ФайлОбмена.УстановитьСтроку(ДанныеФайлаОбмена);
			Иначе
				ФайлОбмена.ОткрытьФайл(ИмяФайлаЗагрузкиДанных);
			КонецЕсли;
			
		Исключение
			
			ЗаписатьВПротоколВыполнения(5);
			Возврат;
			
		КонецПопытки;
		
		ФайлОбмена.Прочитать();
		
	КонецЕсли; 

	Если ТолькоПрочитатьШапку Тогда
		
		ФайлОбмена.Закрыть();
		Возврат;
		
	КонецЕсли;
   
КонецПроцедуры // ОткрытьФайлЗагрузки()

Процедура УдалитьОбъектыПоВыборке(Выборка, ПроверятьПредопределенные = Истина)
	
	Пока Выборка.Следующий() Цикл
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
			
		Если ПроверятьПредопределенные
			И Выборка.Предопределенный Тогда
				
			Продолжить;
				
		КонецЕсли;
			
		Попытка
			
			Выборка.ПолучитьОбъект().Удалить();
				
		Исключение
				
		КонецПопытки;
			
	КонецЦикла;	
	
КонецПроцедуры

// Удаляет все объекты указанного типа
//
// Параметры:
//  ТипСтрокой     - Строка. Тип ссылки в строковом представлении. Например: СправочникСсылка.Номенклатура
// 
Процедура УдалитьОбъектыТипа(ТипСтрокой) Экспорт

	Менеджер = Менеджеры[Тип(ТипСтрокой)];
	ИмяТипа  = Менеджер.ИмяТипа;
	Имя      = Менеджер.Имя;

	Если ИмяТипа = "Справочник"
		ИЛИ ИмяТипа = "ПланВидовХарактеристик" Тогда
		
		Если ИмяТипа = "Справочник" Тогда
			ОбъектДляВыборки = Справочники[Имя];
		Иначе
			ОбъектДляВыборки = ПланыВидовХарактеристик[Имя];
		КонецЕсли;
		
		Попытка
			Выборка = ОбъектДляВыборки.ВыбратьИерархически();			
		Исключение
			Выборка = ОбъектДляВыборки.Выбрать();			
		КонецПопытки;
		
		#Если Клиент Тогда
		Состояние("Очистка " + ИмяТипа + ":  " + Имя);
		#КонецЕсли
		
		УдалитьОбъектыПоВыборке(Выборка);
				
	ИначеЕсли ИмяТипа = "Документ" Тогда

        Выборка	= Документы[Имя].Выбрать();
		
		#Если Клиент Тогда
		Состояние("Очистка документов:  " + Имя);
		#КонецЕсли
		
		УдалитьОбъектыПоВыборке(Выборка, Ложь);
				
	ИначеЕсли ИмяТипа = "ПланВидовРасчета" Тогда

		Выборка =	ПланыВидовРасчета[Имя].Выбрать();
		#Если Клиент Тогда
		Состояние("Очистка плана видов расчета:  " + Имя);
		#КонецЕсли
		
		УдалитьОбъектыПоВыборке(Выборка);
						
	ИначеЕсли ИмяТипа = "РегистрСведений" Тогда

		Выборка = РегистрыСведений[Имя].Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			#КонецЕсли
			Выборка.ПолучитьМенеджерЗаписи().Удалить();
			
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры // УдалитьОбъектыТипа() 

// Производит очистку информаионной базы. Используется при отладке обмена
//
// Параметры:
//  Нет.
// 
Процедура УдалитьВсе() Экспорт
	
    #Если Клиент Тогда	
	Если Вопрос("Удалить всю информацию из базы данных?", РежимДиалогаВопрос.ДаНет, 60) <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	#КонецЕсли
	
   	Для каждого ОбъектМД Из Метаданные.Справочники Цикл
		УдалитьОбъектыТипа("СправочникСсылка." + ОбъектМД.Имя);
	КонецЦикла;

	Для каждого ОбъектМД Из Метаданные.ПланыВидовХарактеристик Цикл
		УдалитьОбъектыТипа("ПланВидовХарактеристикСсылка." + ОбъектМД.Имя);
	КонецЦикла;

    Для каждого ОбъектМД Из Метаданные.Документы Цикл
		УдалитьОбъектыТипа("ДокументСсылка." + ОбъектМД.Имя);
	КонецЦикла;

	Для каждого ОбъектМД Из Метаданные.РегистрыСведений Цикл
		Подчинен		=	(ОбъектМД.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору);
		Если Подчинен Тогда Продолжить КонецЕсли;
		УдалитьОбъектыТипа("РегистрСведенийЗапись." + ОбъектМД.Имя);
	КонецЦикла;

	#Если Клиент Тогда
	Состояние("Вся информация удалена!");
	#КонецЕсли
	
КонецПроцедуры // УдалитьВсе()

Процедура ЗаполнитьСписокТиповДоспутныхДляУдаления(Список) Экспорт
	
	Для каждого ОбъектМД Из Метаданные.Справочники Цикл
		Список.Добавить("СправочникСсылка." + ОбъектМД.Имя);
	КонецЦикла;

	Для каждого ОбъектМД Из Метаданные.ПланыВидовХарактеристик Цикл
		Список.Добавить("ПланВидовХарактеристикСсылка." + ОбъектМД.Имя);
	КонецЦикла;

    Для каждого ОбъектМД Из Метаданные.Документы Цикл
		Список.Добавить("ДокументСсылка." + ОбъектМД.Имя);
	КонецЦикла;

	Для каждого ОбъектМД Из Метаданные.РегистрыСведений Цикл
		Подчинен		=	(ОбъектМД.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору);
		Если Подчинен Тогда Продолжить КонецЕсли;
		Список.Добавить("РегистрСведенийЗапись." + ОбъектМД.Имя);
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает состояние пометки у подчиненных строк строки дерева значений
// в зависимости от пометки текущей строки
//
// Параметры:
//  ТекСтрока      - Строка дерева значений
// 
Процедура УстановитьПометкиПодчиненных(ТекСтрока, Реквизит) Экспорт

	Подчиненные = ТекСтрока.Строки;

	Если Подчиненные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка из Подчиненные Цикл
		
		Если Строка.НастройкиПостроителя = Неопределено 
			И Реквизит = "ИспользоватьОтбор" Тогда
			
			Строка[Реквизит] = 0;
			
		Иначе
			
			Строка[Реквизит] = ТекСтрока[Реквизит];
			
		КонецЕсли;
		
		УстановитьПометкиПодчиненных(Строка, Реквизит);
		
	КонецЦикла;
		
КонецПроцедуры // УстановитьПометкиПодчиненных()

// Устанавливает состояние пометки у родительских строк строки дерева значений
// в зависимости от пометки текущей строки
//
// Параметры:
//  ТекСтрока      - Строка дерева значений
// 
Процедура УстановитьПометкиРодителей(ТекСтрока, Реквизит) Экспорт

	Родитель = ТекСтрока.Родитель;
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	ТекСостояние       = Родитель[Реквизит];

	НайденыВключенные  = Ложь;
	НайденыВыключенные = Ложь;

	Если Реквизит = "ИспользоватьОтбор" Тогда
		
		Для Каждого Строка из Родитель.Строки Цикл
			
			Если Строка[Реквизит] = 0 И 
				Строка.НастройкиПостроителя <> Неопределено Тогда
				
				НайденыВыключенные = Истина;
				
			ИначеЕсли Строка[Реквизит] = 1 Тогда
				НайденыВключенные  = Истина;
			КонецЕсли; 
			
			Если НайденыВключенные И НайденыВыключенные Тогда
				Прервать;
			КонецЕсли; 
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого Строка из Родитель.Строки Цикл
			Если Строка[Реквизит] = 0 Тогда
				НайденыВыключенные = Истина;
			ИначеЕсли Строка[Реквизит] = 1
				ИЛИ Строка[Реквизит] = 2 Тогда
				НайденыВключенные  = Истина;
			КонецЕсли; 
			Если НайденыВключенные И НайденыВыключенные Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли;

	
	Если НайденыВключенные И НайденыВыключенные Тогда
		Включить = 2;
	ИначеЕсли НайденыВключенные И (Не НайденыВыключенные) Тогда
		Включить = 1;
	ИначеЕсли (Не НайденыВключенные) И НайденыВыключенные Тогда
		Включить = 0;
	ИначеЕсли (Не НайденыВключенные) И (Не НайденыВыключенные) Тогда
		Включить = 2;
	КонецЕсли;

	Если Включить = ТекСостояние Тогда
		Возврат;
	Иначе
		Родитель[Реквизит] = Включить;
		УстановитьПометкиРодителей(Родитель, Реквизит);
	КонецЕсли; 
	
КонецПроцедуры // УстановитьПометкиРодителей()


Функция ОбновитьПометкиВсехРодителейУПравилВыгрузки(СтрокиДереваПравилВыгрузки, НужноУстанавливатьПометки = Истина) Экспорт
	
	Если СтрокиДереваПравилВыгрузки.Строки.Количество() = 0 Тогда
		
		Если НужноУстанавливатьПометки Тогда
			УстановитьПометкиРодителей(СтрокиДереваПравилВыгрузки, "Включить");	
		КонецЕсли;
		
		Возврат Истина;
		
	Иначе
		
		НужныПометки = Истина;
		
		Для Каждого СтрокаДереваПравил Из СтрокиДереваПравилВыгрузки.Строки Цикл
			
			РезультатУстановки = ОбновитьПометкиВсехРодителейУПравилВыгрузки(СтрокаДереваПравил, НужныПометки);
			Если НужныПометки = Истина Тогда
				НужныПометки = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

// Осуществляет загрузку правил обмена в соответствии с форматом
//
// Параметры:
//  Источник       - Объект, из которого осуществляется загрузка правил обмена;
//  ТипИсточника   - Строка, указывающая тип источника: "XMLФайл", "ЧтениеXML", "Строка"
// 
Процедура ЗагрузитьПравилаОбмена(Источник="", ТипИсточника="XMLФайл") Экспорт

	#Если Клиент Тогда
	Состояние("Выполняется загрузка правил обмена ...");
	#КонецЕсли
	
	ИнициализироватьМенеджерыИСообщения();
	
	ЕстьГлобальныйОбработчикПередВыгрузкойОбъекта    = Ложь;
	ЕстьГлобальныйОбработчикПослеВыгрузкиОбъекта     = Ложь;
	
	ЕстьГлобальныйОбработчикПередКонвертациейОбъекта = Ложь;

	ЕстьГлобальныйОбработчикПередЗагрузкойОбъекта    = Ложь;
	ЕстьГлобальныйОбработчикПослеЗагрузкиОбъекта     = Ложь;
	
	Конвертация.ПередВыгрузкойДанных = Неопределено;
	Конвертация.ПослеВыгрузкиДанных = Неопределено;
	
	Конвертация.ПередЗагрузкойДанных = Неопределено;
	Конвертация.ПослеЗагрузкиДанных = Неопределено;	
	
	СоздатьСтруктуруКонвертации();
	
	мТаблицаПравилКонвертацииСвойств = Новый ТаблицаЗначений;
	ИнициализацияТаблицыПравилКонвертацииСвойств(мТаблицаПравилКонвертацииСвойств);


	// Возможно выбраны встроенные правила обмена (один из макетов)
	
	ИмяВременногоФайлаПравилОбмена = "";
	Если ПустаяСтрока(Источник) Тогда
		
		Источник = ИмяФайлаПравилОбмена;
		Если мСписокМакетовПравилОбмена.НайтиПоЗначению(Источник) <> Неопределено Тогда
			Для каждого Макет Из ЭтотОбъект.Метаданные().Макеты Цикл
				Если Макет.Синоним = Источник Тогда
					Источник = Макет.Имя;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
			МакетПравилОбмена              = ПолучитьМакет(Источник);
			УникальныйИдентификатор        = Новый УникальныйИдентификатор();
			ИмяВременногоФайлаПравилОбмена = КаталогВременныхФайлов() + УникальныйИдентификатор + ".xml";
			МакетПравилОбмена.Записать(ИмяВременногоФайлаПравилОбмена);
			Источник = ИмяВременногоФайлаПравилОбмена;
		КонецЕсли;
		
	КонецЕсли;

	
	Если ТипИсточника="XMLФайл" Тогда
		
		Если ПустаяСтрока(Источник) Тогда
			ЗаписатьВПротоколВыполнения(12);
			Возврат; 
		КонецЕсли;
		
		Файл = Новый Файл(Источник);
		Если Не Файл.Существует() Тогда
			ЗаписатьВПротоколВыполнения(3);
			Возврат; 
		КонецЕсли;
		
		ФайлПравилЗархивирован = (Файл.Расширение = ".aml");
		
		Если ФайлПравилЗархивирован Тогда
			
			// распаковка файла правил
			Источник = РаспаковатьВходящийФайлОбмена(Источник);
			
		КонецЕсли;
		
		ПравилаОбмена = Новый ЧтениеXML();
		ПравилаОбмена.ОткрытьФайл(Источник);
		ПравилаОбмена.Прочитать();
		
	ИначеЕсли ТипИсточника="Строка" Тогда
		
		ПравилаОбмена = Новый ЧтениеXML();
		ПравилаОбмена.УстановитьСтроку(Источник);
		ПравилаОбмена.Прочитать();
		
	ИначеЕсли ТипИсточника="ЧтениеXML" Тогда
		
		ПравилаОбмена = Источник;
		
	КонецЕсли; 
	

	Если Не ((ПравилаОбмена.ЛокальноеИмя = "ПравилаОбмена") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_НачалоЭлемента)) Тогда
		ЗаписатьВПротоколВыполнения(6);
		Возврат;
	КонецЕсли;


	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.Отступ = Истина;
	ЗаписьXML.УстановитьСтроку();
	ЗаписьXML.ЗаписатьНачалоЭлемента("ПравилаОбмена");
	

	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
        		
		// Реквизиты конвертации
		Если ИмяУзла = "ВерсияФормата" Тогда
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			Конвертация.Вставить("ВерсияФормата", Значение);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
		ИначеЕсли ИмяУзла = "Ид" Тогда
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			Конвертация.Вставить("Ид",                   Значение);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
		ИначеЕсли ИмяУзла = "Наименование" Тогда
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			Конвертация.Вставить("Наименование",         Значение);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
		ИначеЕсли ИмяУзла = "ДатаВремяСоздания" Тогда
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипДата);
			Конвертация.Вставить("ДатаВремяСоздания",    Значение);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
			ВерсияПравилОбмена = Конвертация.ДатаВремяСоздания;
		ИначеЕсли ИмяУзла = "Источник" Тогда
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			Конвертация.Вставить("Источник",             Значение);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
		ИначеЕсли ИмяУзла = "Приемник" Тогда
			ВерсияПлатформыПриемника = ПравилаОбмена.ПолучитьАтрибут ("ВерсияПлатформы");
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			Конвертация.Вставить("Приемник",             Значение);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
			
		//ИначеЕсли ИмяУзла = "Ответственный" Тогда
		//	одПропустить(ПравилаОбмена);
		
		ИначеЕсли ИмяУзла = "Комментарий" Тогда
			одПропустить(ПравилаОбмена);

		ИначеЕсли ИмяУзла = "Параметры" Тогда
			ЗагрузитьПараметры(ПравилаОбмена, ЗаписьXML)

		// События конвертации
		
		ИначеЕсли ИмяУзла = "" Тогда
		
		ИначеЕсли ИмяУзла = "ПередВыгрузкойДанных" Тогда
			Конвертация.Вставить("ПередВыгрузкойДанных", одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
			
		ИначеЕсли ИмяУзла = "ПослеВыгрузкиДанных" Тогда
			Конвертация.Вставить("ПослеВыгрузкиДанных",  одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));

		ИначеЕсли ИмяУзла = "ПередВыгрузкойОбъекта" Тогда
			Конвертация.Вставить("ПередВыгрузкойОбъекта", одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
			ЕстьГлобальныйОбработчикПередВыгрузкойОбъекта = Не ПустаяСтрока(Конвертация.ПередВыгрузкойОбъекта);

		ИначеЕсли ИмяУзла = "ПослеВыгрузкиОбъекта" Тогда
			Конвертация.Вставить("ПослеВыгрузкиОбъекта", одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
			ЕстьГлобальныйОбработчикПослеВыгрузкиОбъекта = Не ПустаяСтрока(Конвертация.ПослеВыгрузкиОбъекта);

		ИначеЕсли ИмяУзла = "ПередЗагрузкойОбъекта" Тогда
			Конвертация.Вставить("ПередЗагрузкойОбъекта", одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
			ЕстьГлобальныйОбработчикПередЗагрузкойОбъекта = Не ПустаяСтрока(Конвертация.ПередЗагрузкойОбъекта);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Конвертация.ПередЗагрузкойОбъекта);

		ИначеЕсли ИмяУзла = "ПослеЗагрузкиОбъекта" Тогда
			Конвертация.Вставить("ПослеЗагрузкиОбъекта", одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
			ЕстьГлобальныйОбработчикПослеЗагрузкиОбъекта = Не ПустаяСтрока(Конвертация.ПослеЗагрузкиОбъекта);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Конвертация.ПослеЗагрузкиОбъекта);

		ИначеЕсли ИмяУзла = "ПередКонвертациейОбъекта" Тогда
			Конвертация.Вставить("ПередКонвертациейОбъекта", одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
			ЕстьГлобальныйОбработчикПередКонвертациейОбъекта = Не ПустаяСтрока(Конвертация.ПередКонвертациейОбъекта);
			
		ИначеЕсли ИмяУзла = "ПередЗагрузкойДанных" Тогда
			Конвертация.ПередЗагрузкойДанных = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Конвертация.ПередЗагрузкойДанных);
			
		ИначеЕсли ИмяУзла = "ПослеЗагрузкиДанных" Тогда
            Конвертация.ПослеЗагрузкиДанных = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Конвертация.ПослеЗагрузкиДанных);
			
			
		// Правила
		
		ИначеЕсли ИмяУзла = "ПравилаВыгрузкиДанных" Тогда
			Если РежимОбмена = "Загрузка" Тогда
				одПропустить(ПравилаОбмена);
			Иначе
				ЗагрузитьПравилаВыгрузки(ПравилаОбмена);
			КонецЕсли; 
			
		ИначеЕсли ИмяУзла = "ПравилаКонвертацииОбъектов" Тогда
			ЗагрузитьПравилаКонвертации(ПравилаОбмена, ЗаписьXML);
			
		ИначеЕсли ИмяУзла = "ПравилаОчисткиДанных" Тогда
			ЗагрузитьПравилаОчистки(ПравилаОбмена, ЗаписьXML)

			
		// Алгоритмы / Запросы / Обработки
		
		ИначеЕсли ИмяУзла = "Алгоритмы" Тогда
			ЗагрузитьАлгоритмы(ПравилаОбмена, ЗаписьXML);
			
		ИначеЕсли ИмяУзла = "Запросы" Тогда
			ЗагрузитьЗапросы(ПравилаОбмена, ЗаписьXML);

		ИначеЕсли ИмяУзла = "Обработки" Тогда
			ЗагрузитьОбработки(ПравилаОбмена, ЗаписьXML);
			
		// Выход
		ИначеЕсли (ИмяУзла = "ПравилаОбмена") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
		    Если РежимОбмена <> "Загрузка" Тогда
				ПравилаОбмена.Закрыть();
			КонецЕсли;
			Прервать;

			
		// Ошибка формата
		Иначе
			ЗаписатьВПротоколВыполнения(7);
			Возврат;
		КонецЕсли;
	КонецЦикла;


	ЗаписьXML.ЗаписатьКонецЭлемента();
	мXMLПравила = ЗаписьXML.Закрыть();
	
	Для Каждого СтрокаПравилВыгрузки Из ТаблицаПравилВыгрузки.Строки Цикл
		ОбновитьПометкиВсехРодителейУПравилВыгрузки(СтрокаПравилВыгрузки, Истина);
	КонецЦикла;
	
	#Если Клиент Тогда
	Состояние("");
	#КонецЕсли


	// Удаляем временный файл правил
	Если Не ПустаяСтрока(ИмяВременногоФайлаПравилОбмена) Тогда
		Попытка
			УдалитьФайлы(ИмяВременногоФайлаПравилОбмена);
		Исключение 
		КонецПопытки;
	КонецЕсли;
	
	Если ТипИсточника="XMLФайл"
		И ФайлПравилЗархивирован Тогда
		
		Попытка
			УдалитьФайлы(Источник);
		Исключение 
		КонецПопытки;	
		
	КонецЕсли;

КонецПроцедуры // ЗагрузитьПравилаОбмена()


Процедура ОбработатьОкончаниеЧтенияНовогоЭлемента(ПоследнийОбъектЗагрузки)
	
	мСчетчикЗагруженныхОбъектов = 1 + мСчетчикЗагруженныхОбъектов;
				
	Если мСчетчикЗагруженныхОбъектов % КоличествоОбработанныхОбъектовДляОбновленияСтатуса = 0 Тогда
		
		Если ПоследнийОбъектЗагрузки <> Неопределено Тогда
			
			СтрокаОбъектаЗагрузки = ", Объект: " + Строка(ТипЗнч(ПоследнийОбъектЗагрузки)) + "  " + Строка(ПоследнийОбъектЗагрузки);
								
		Иначе
			
			СтрокаОбъектаЗагрузки = "";
			
		КонецЕсли;
		
		#Если Клиент Тогда
		Состояние("Обработано объектов:  " + мСчетчикЗагруженныхОбъектов + " " + СтрокаОбъектаЗагрузки);
		#КонецЕсли
						
	КонецЕсли;
	
	Если ЗапоминатьЗагруженныеОбъекты
		И мСчетчикЗагруженныхОбъектов % 100 = 0 Тогда
				
		Если ЗагруженныеОбъекты.Количество() > ЧислоХранимыхЗагруженныхОбъектов Тогда
			ЗагруженныеОбъекты.Очистить();
		КонецЕсли;
				
	КонецЕсли;
	
	Если ИспользоватьТранзакции
		И КоличествоОбъектовНаТранзакцию > 0 
		И мСчетчикЗагруженныхОбъектов % КоличествоОбъектовНаТранзакцию = 0 Тогда
		
		ЗафиксироватьТранзакцию();
		НачатьТранзакцию();
		
	КонецЕсли;	

КонецПроцедуры

Процедура ПроизвестиЧтениеДанных(РезультирующаяСтрокаСИнформациейОбОшибке = "") Экспорт
	
	Попытка
	
		Пока ФайлОбмена.Прочитать() Цикл
			
			ИмяУзла = ФайлОбмена.ЛокальноеИмя;
			
			#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			#КонецЕсли
			
			Если ИмяУзла = "Объект" Тогда
				
				ПоследнийОбъектЗагрузки = ПрочитатьОбъект();
				
				ОбработатьОкончаниеЧтенияНовогоЭлемента(ПоследнийОбъектЗагрузки);							
				
			ИначеЕсли ИмяУзла = "Алгоритм" Тогда
				
				ТекстАлгоритма = одЗначениеЭлемента(ФайлОбмена, одТипСтрока);
				
				Если ФлагРежимОтладки Тогда
					
					Попытка
						Выполнить(ТекстАлгоритма);					
					Исключение
						
						ЗП = ПолучитьСтруктуруЗаписиПротокола(39, ОписаниеОшибки());
						ЗП.Обработчик     = "АлгоритмФайлаОбмена";
						ЗаписатьВПротоколВыполнения(39, ЗП, Истина);
						
					КонецПопытки; 
					
				Иначе
					Выполнить(ТекстАлгоритма);
				КонецЕсли;
				
			ИначеЕсли ИмяУзла = "ПравилаОбмена" Тогда

				Если ТаблицаПравилКонвертации.Количество() = 0 Тогда
					ЗагрузитьПравилаОбмена(ФайлОбмена, "ЧтениеXML");
				Иначе
					одПропустить(ФайлОбмена);
				КонецЕсли; 
				
			ИначеЕсли (ИмяУзла = "ФайлОбмена") И (ФайлОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
				
			Иначе
				ЗаписатьВПротоколВыполнения(9);
			КонецЕсли; 
			
		КонецЦикла;
		
	Исключение
		
		СтрокаОшибки = ОписаниеОшибки();
		
		ЗаписатьВПротоколВыполнения("Ошибка при загрузке данных: " + СтрокаОшибки, Неопределено, Истина, , , Истина, РезультирующаяСтрокаСИнформациейОбОшибке);
		
		ЗавершитьВедениеПротоколаОбмена();
		ФайлОбмена.Закрыть();
		Возврат;
		
	КонецПопытки;		
	
КонецПроцедуры

Функция ВыполнитьДействияПередЧтениемДанных(СтрокаДанных = "") Экспорт
	
	мСоответсвиеДопПараметровПоиска = Новый Соответствие;
	мСоответсвиеАлгоритмовПоискаЭлементов = Новый Соответствие;
	
	ИнициализироватьВедениеПротоколаОбмена();
	
	ЗагрузкаВозможна = Истина;
	
	Если ПустаяСтрока(СтрокаДанных) Тогда
	
		Если ПустаяСтрока(ИмяФайлаОбмена) Тогда
			ЗаписатьВПротоколВыполнения(15);
			ЗагрузкаВозможна = Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
	Если Не ЗагрузкаВозможна Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаписатьВПротоколВыполнения("Начало загрузки:   " + ТекущаяДата(), , Ложь, , , Истина);
	
	Если ФлагРежимОтладки Тогда
		ИспользоватьТранзакции = Ложь;
	КонецЕсли;
	
	Если КоличествоОбработанныхОбъектовДляОбновленияСтатуса = 0 Тогда
		
		КоличествоОбработанныхОбъектовДляОбновленияСтатуса = 100;
		
	КонецЕсли;
	
	мСчетчикЗагруженныхОбъектов = 0;
	ФлагОшибки                  = Ложь;
	ЗагруженныеОбъекты          = Новый Соответствие;

	ИнициализироватьМенеджерыИСообщения();
	
	ОткрытьФайлЗагрузки(,СтрокаДанных);
	
	Если ФлагОшибки Тогда 
		ЗавершитьВедениеПротоколаОбмена();
		Возврат Ложь; 
	КонецЕсли;

	
	// Обработчик ПередЗагрузкойДанных
	Отказ = Ложь;
	Попытка
		Выполнить(Конвертация.ПередЗагрузкойДанных);
	Исключение
		ЗаписатьИнформациюОбОшибкеОбработчикиКонвертации(22, ОписаниеОшибки(), "ПередЗагрузкойДанных (конвертация)");
		Отказ = Истина;
	КонецПопытки;
	
	Если Отказ Тогда // Отказ от загрузки данных
		ЗавершитьВедениеПротоколаОбмена();
		ФайлОбмена.Закрыть();
		Возврат Ложь;
	КонецЕсли;

	// Очистка информационной базы по правилам
	ОбработатьПравилаОчистки(ТаблицаПравилОчистки.Строки);
		
	Если ИспользоватьТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ВыполнитьДействияПослеЗавершенияЧтенияДанных() Экспорт
	
	Если ИспользоватьТранзакции Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;

	ФайлОбмена.Закрыть();	
	
	// Обработчик ПослеЗагрузкиДанных
	Попытка
		Выполнить(Конвертация.ПослеЗагрузкиДанных);
	Исключение
		ЗаписатьИнформациюОбОшибкеОбработчикиКонвертации(23, ОписаниеОшибки(), "ПослеЗагрузкиДанных (конвертация)");
	КонецПопытки;

	ЗаписатьВПротоколВыполнения("Окончание загрузки: " + ТекущаяДата(), , Ложь, , , Истина);
	ЗаписатьВПротоколВыполнения("Загружено объектов: " + мСчетчикЗагруженныхОбъектов, , Ложь, , , Истина);

	ЗавершитьВедениеПротоколаОбмена();
	
	#Если Клиент Тогда
    	Если ЭтоИнтерактивныйРежим Тогда
			Предупреждение("Загрузка данных завершена!");
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

// Выполяет загрузку данных в соответствии с установленными режимами (правилами обмена)
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьЗагрузку() Экспорт

	РаботаВозможна = ВыполнитьДействияПередЧтениемДанных();
	
	Если НЕ РаботаВозможна Тогда
		Возврат;
	КонецЕсли;	

	
	ПроизвестиЧтениеДанных();
	

	ВыполнитьДействияПослеЗавершенияЧтенияДанных(); 

КонецПроцедуры // ВыполнитьЗагрузку()

Процедура СжатьРезультирующийФайлОбмена()
	
	#Если Клиент Тогда
	Состояние("Выполняется архивация файла обмена...");
	#КонецЕсли
	Хранилище      = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяФайлаОбмена), Новый СжатиеДанных(9));
	АрхивныйФайл   = Новый ЗаписьТекста;
	АрхивныйФайл.Открыть(ИмяФайлаОбмена, КодировкаТекста.UTF8);
	АрхивныйФайл.ЗаписатьСтроку(XMLСтрока(Хранилище));
	АрхивныйФайл.Закрыть();
	
КонецПроцедуры

Функция РаспаковатьВходящийФайлОбмена(ИмяФайлаДляРаспаковки = "") Экспорт
	
	ИмяФайлаДляРаспаковки = ?(ПустаяСтрока(ИмяФайлаДляРаспаковки), ИмяФайлаОбмена, ИмяФайлаДляРаспаковки);
	
	#Если Клиент Тогда
	Состояние("Выполняется распаковка файла обмена...");
	#КонецЕсли
	РаспаковкаФайла        = Новый ЧтениеТекста(ИмяФайлаДляРаспаковки, КодировкаТекста.UTF8);
	Хранилище              = XMLЗначение(одТипХранилищеЗначения, РаспаковкаФайла.Прочитать());
	ДвоичныеДанные         = Хранилище.Получить();
	ИмяФайлаЗагрузкиДанных = СтрЗаменить(ИмяФайлаДляРаспаковки, ".aml", ".xml");
	Попытка
			
		ДвоичныеДанные.Записать(ИмяФайлаЗагрузкиДанных);
			
	Исключение
			
		ЗП = ПолучитьСтруктуруЗаписиПротокола(2, ОписаниеОшибки());
		ЗаписатьВПротоколВыполнения(2, ЗП, Истина);
			
	КонецПопытки;
	
	Возврат ИмяФайлаЗагрузкиДанных;
	
КонецФункции


Процедура ПередатьИнформациюОЗаписиВПриемник(ИнформацияДляЗаписиВФайл, СтрокаОшибкиВБазеПриемнике = "") Экспорт
	
	мОбработкаДляЗагрузкиДанных.ФайлОбмена.УстановитьСтроку(ИнформацияДляЗаписиВФайл);
	
	мОбработкаДляЗагрузкиДанных.ПроизвестиЧтениеДанных(СтрокаОшибкиВБазеПриемнике);	
	
	Если Не ПустаяСтрока(СтрокаОшибкиВБазеПриемнике) Тогда
		
		ЗаписатьВПротоколВыполнения("ЗАГРУЗКА В ПРИЕМНИКЕ: " + СтрокаОшибкиВБазеПриемнике, Неопределено, Истина, , , Истина);	
		
	КонецЕсли;
		
КонецПроцедуры

Функция ВыполнитьПередачуИнформацииОНачалеОбменаВПриемник(ТекущаяСтрокаДляЗаписи)
	
	Если НЕ НепосредственноеЧтениеВИБПриемнике Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТекущаяСтрокаДляЗаписи = ТекущаяСтрокаДляЗаписи + Символы.ПС + мXMLПравила + Символы.ПС + "</ФайлОбмена>" + Символы.ПС;
	
	РаботаВозможна = мОбработкаДляЗагрузкиДанных.ВыполнитьДействияПередЧтениемДанных(ТекущаяСтрокаДляЗаписи);
	
	Возврат РаботаВозможна;	

	
	//ПроизвестиЧтениеДанных();
	//

	//ВыполнитьДействияПослеЗавершенияЧтенияДанных();
	
КонецФункции

Функция ВыполнитьПередачуИнформацииПриЗавершанииПередачиДанных()
	
	Если НЕ НепосредственноеЧтениеВИБПриемнике Тогда
		Возврат Истина;
	КонецЕсли;
	
	мОбработкаДляЗагрузкиДанных.ВыполнитьДействияПослеЗавершенияЧтенияДанных();
	
КонецФункции


// Выполяет выгрузку данных в соответствии с установленными режимами (правилами обмена)
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьВыгрузку(ПубликоватьФайл=Истина) Экспорт

	ИнициализироватьВедениеПротоколаОбмена();
	
	ВыгрузкаВозможна = Истина;
	
	Если ПустаяСтрока(ИмяФайлаПравилОбмена) Тогда
		ЗаписатьВПротоколВыполнения(12);
		ВыгрузкаВозможна = Ложь;
	КонецЕсли;
	
	Если НЕ НепосредственноеЧтениеВИБПриемнике Тогда
		
		Если ПустаяСтрока(ИмяФайлаОбмена) Тогда
			ЗаписатьВПротоколВыполнения(10);
			ВыгрузкаВозможна = Ложь;
		КонецЕсли;
		
	Иначе
		
		мОбработкаДляЗагрузкиДанных = ВыполнитьПодключениеКИБПриемнику(); 
		
		ВыгрузкаВозможна = мОбработкаДляЗагрузкиДанных <> Неопределено;
		
    КонецЕсли;
	
	Если Не ВыгрузкаВозможна Тогда
		мОбработкаДляЗагрузкиДанных = Неопределено;
		Возврат;
	КонецЕсли;
	
	ЗаписатьВПротоколВыполнения("Начало выгрузки:   " + ТекущаяДата(), , Ложь, , , Истина);

	ИнициализироватьМенеджерыИСообщения();	

	мXMLДокумент                = DOM_НовыйXMLДокумент();
	мСчетчикВыгруженныхОбъектов = 0;
	мСчетчикНПП 				= 0;
	ФлагОшибки                  = Ложь;

	// Загрузка правил обмена
	Если Конвертация.Количество() = 9 Тогда
		ЗагрузитьПравилаОбмена();
		Если ФлагОшибки Тогда
			ЗавершитьВедениеПротоколаОбмена();
			мОбработкаДляЗагрузкиДанных = Неопределено;
			Возврат; 
		КонецЕсли;
	Иначе
		Для каждого Правило Из ТаблицаПравилКонвертации Цикл
			Правило.Выгруженные.Очистить();
		КонецЦикла; 
	КонецЕсли; 

	//Присваиваем параметры установленные в диалоге
	УстановитьПараметрыИзДиалога();

	// Открываем файл обмена
	ТекущаяСтрокаДляЗаписи = ОткрытьФайлВыгрузки() + Символы.ПС;
	
	Если ФлагОшибки Тогда
		ФайлОбмена = Неопределено;
		ЗавершитьВедениеПротоколаОбмена();
		мОбработкаДляЗагрузкиДанных = Неопределено;
		Возврат; 
	КонецЕсли;
	
	Попытка
    	
	    // Включаем правила обмена в файл
	    ФайлОбмена.ЗаписатьСтроку(мXMLПравила);
		
		РаботаВозможна = ВыполнитьПередачуИнформацииОНачалеОбменаВПриемник(ТекущаяСтрокаДляЗаписи);
		
		Если Не РаботаВозможна Тогда
			ФайлОбмена = Неопределено;
			ЗавершитьВедениеПротоколаОбмена();
			мОбработкаДляЗагрузкиДанных = Неопределено;
			Возврат;
		КонецЕсли;
	    		
	    // Обработчик ПередВыгрузкойДанных
		Отказ = Ложь;
		Попытка
			Выполнить(Конвертация.ПередВыгрузкойДанных);
		Исключение
			ЗаписатьИнформациюОбОшибкеОбработчикиКонвертации(62, ОписаниеОшибки(), "ПередВыгрузкойДанных (конвертация)");
			Отказ = Истина;		
		КонецПопытки; 
		
		Если Отказ Тогда // Отказ от выгрузки данных
			ФайлОбмена = Неопределено;
			ЗавершитьВедениеПротоколаОбмена();
			мОбработкаДляЗагрузкиДанных = Неопределено;
			Возврат;
		КонецЕсли; 
		
		//БАЛАНС (25.12.2007)                       
		// нужно параметры передать в приемник
		ПередатьДополнительныеПараметрыВПриемник();
		
		СоответсвиеУзловИПравилВыгрузки = Новый Соответствие();
		СтруктураДляУдаленияРегистрацииИзменений = Новый Соответствие();

		ОбработатьПравилаВыгрузки(ТаблицаПравилВыгрузки.Строки, СоответсвиеУзловИПравилВыгрузки);
		
		ОбработатьВыгрузкуДляПлановОбмена(СоответсвиеУзловИПравилВыгрузки, СтруктураДляУдаленияРегистрацииИзменений);
		
		ОбработатьИзменениеРегистрацииДляУзловОбмена(СтруктураДляУдаленияРегистрацииИзменений);
		
		
		// Обработчик ПослеВыгрузкиДанных
		Попытка
			Выполнить(Конвертация.ПослеВыгрузкиДанных);
		Исключение
			ЗаписатьИнформациюОбОшибкеОбработчикиКонвертации(63, ОписаниеОшибки(), "ПослеВыгрузкиДанных (конвертация)");
		КонецПопытки;
		
	Исключение
		
		СтрокаОшибки = ОписаниеОшибки();
		
		ЗаписатьВПротоколВыполнения("Ошибка при выгрузке данных: " + СтрокаОшибки, Неопределено, Истина, , , Истина);
		
		ВыполнитьПередачуИнформацииПриЗавершанииПередачиДанных();
		
		ЗавершитьВедениеПротоколаОбмена();
		ЗакрытьФайл();
		мОбработкаДляЗагрузкиДанных = Неопределено;
		
		Возврат;
		
	КонецПопытки;
	
	//БАЛАНС (29.07.2008)                       
	//Отказываемся от записи файла, если таблицы документов не совпадают
	Для Каждого ТекСтрока Из мТаблицаЗарегистрированныхДокументов Цикл
		Если мТаблицаВыгруженныхДокументов.Найти(ТекСтрока.Документ)=Неопределено Тогда
		//	Отказ=Истина;
		//	ПубликоватьФайл=Ложь;
			ЗаписатьВПротоколВыполнения("Ошибка при выгрузке данных: не совпадают таблицы зарегистрированных и выгруженных документов. Документ не выгружен:" + Строка(ТекСтрока.Документ), Неопределено, Истина, , , Истина);
		//  прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда // Отказ от записи файла данных
		
		ВыполнитьПередачуИнформацииПриЗавершанииПередачиДанных();
		
		ЗавершитьВедениеПротоколаОбмена();
		мОбработкаДляЗагрузкиДанных = Неопределено;
		ФайлОбмена = Неопределено;
		
		Возврат;
	КонецЕсли;
	
	// Закрываем файл обмена
	ЗакрытьФайл();
	
	Если АрхивироватьФайл Тогда
		СжатьРезультирующийФайлОбмена();
	КонецЕсли;
	
	ВыполнитьПередачуИнформацииПриЗавершанииПередачиДанных();
		
	ЗаписатьВПротоколВыполнения("Окончание выгрузки: " + ТекущаяДата(), , Ложь, , ,Истина);
	ЗаписатьВПротоколВыполнения("Выгружено объектов: " + мСчетчикВыгруженныхОбъектов, , Ложь, , , Истина);

	ЗавершитьВедениеПротоколаОбмена();
	
	мОбработкаДляЗагрузкиДанных = Неопределено;
	
	#Если Клиент Тогда
		Если ЭтоИнтерактивныйРежим Тогда
			Предупреждение("Выгрузка данных завершена!");		
		КонецЕсли;	
	#КонецЕсли

КонецПроцедуры // ВыполнитьВыгрузку()


//БАЛАНС (25.12.2007)                       
//

Процедура ПередатьОдинПараметрВПриемник(Имя, ИсходноеЗначениеПараметра, ПравилоКонвертации = "") Экспорт
	
	Если ПустаяСтрока(ПравилоКонвертации) Тогда
		
		УзелПараметра = СоздатьУзел("ЗначениеПараметра");
		
		УстановитьАтрибут(УзелПараметра, "Имя", Имя);
		УстановитьАтрибут(УзелПараметра, "Тип", Строка(ТипЗнч(ИсходноеЗначениеПараметра)));
		
		ЭтоNULL = Ложь;
		Пусто = одПустое(ИсходноеЗначениеПараметра, ЭтоNULL);
					
		Если Пусто Тогда
			
			// надо записать что это пустое значение
			одЗаписатьЭлемент(УзелПараметра, "Пусто");
								
			УзелПараметра.ЗаписатьКонецЭлемента();
			
			ЗаписатьВФайл(УзелПараметра);
			
			Возврат;
								
		КонецЕсли;
	
		одЗаписатьЭлемент(УзелПараметра, "Значение", ИсходноеЗначениеПараметра);
	
		УзелПараметра.ЗаписатьКонецЭлемента();
		
		ЗаписатьВФайл(УзелПараметра);
		
	Иначе
		
		УзелПараметра = СоздатьУзел("ЗначениеПараметра");
		
		УстановитьАтрибут(УзелПараметра, "Имя", Имя);
		
		ЭтоNULL = Ложь;
		Пусто = одПустое(ИсходноеЗначениеПараметра, ЭтоNULL);
					
		Если Пусто Тогда
			
			ПКОСвойств = НайтиПравило(ИсходноеЗначениеПараметра, ПравилоКонвертации);
			ТипПриемника  = ПКОСвойств.Приемник;
			УстановитьАтрибут(УзелПараметра, "Тип", ТипПриемника);
			
			// надо записать что это пустое значение
			одЗаписатьЭлемент(УзелПараметра, "Пусто");
								
			УзелПараметра.ЗаписатьКонецЭлемента();
			
			ЗаписатьВФайл(УзелПараметра);
			
			Возврат;
								
		КонецЕсли;
		
		ВыгрузитьДанныеСсылочногоОбъекта(ИсходноеЗначениеПараметра, , ПравилоКонвертации, , , УзелПараметра, Истина);
		
		УзелПараметра.ЗаписатьКонецЭлемента();
		
		ЗаписатьВФайл(УзелПараметра);				
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПередатьДополнительныеПараметрыВПриемник() Экспорт
	
	Для Каждого Параметр Из ТаблицаНастройкиПараметров Цикл
		
		Если Параметр.ПередаватьПараметрПриВыгрузке = Истина Тогда
			
			ПередатьОдинПараметрВПриемник(Параметр.Имя, Параметр.Значение);
					
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ТАБЛИЦ ПРАВИЛ ОБМЕНА

// Инициализирует колонки таблицы правил конвертации свойств объектов
//
// Параметры:
//  Таб            - ТаблицаЗначений. инициализируемая таблица правил конвертации свойств
// 
Процедура ИнициализацияТаблицыПравилКонвертацииСвойств(Таб) Экспорт

	Колонки = Таб.Колонки;

	Колонки.Добавить("Имя");
	Колонки.Добавить("Наименование");
	Колонки.Добавить("Порядок");

	Колонки.Добавить("ЭтоГруппа", 			одОписаниеТипа("Булево"));
    Колонки.Добавить("ПравилаГруппы");

	Колонки.Добавить("ВидИсточника");
	Колонки.Добавить("ВидПриемника");

	Колонки.Добавить("ТипИсточника", одОписаниеТипа("Строка"));
	Колонки.Добавить("ТипПриемника", одОписаниеТипа("Строка"));
	
	Колонки.Добавить("Источник");
	Колонки.Добавить("Приемник");

	Колонки.Добавить("ПравилоКонвертации");

	Колонки.Добавить("ПолучитьИзВходящихДанных", одОписаниеТипа("Булево"));
	
	Колонки.Добавить("НеЗамещать", одОписаниеТипа("Булево"));
	
	Колонки.Добавить("ПередВыгрузкой");
	Колонки.Добавить("ПриВыгрузке");
	Колонки.Добавить("ПослеВыгрузки");

	Колонки.Добавить("ПередОбработкойВыгрузки");
	Колонки.Добавить("ПослеОбработкиВыгрузки");

	Колонки.Добавить("ЕстьОбработчикПередВыгрузкой",			одОписаниеТипа("Булево"));
	Колонки.Добавить("ЕстьОбработчикПриВыгрузке",				одОписаниеТипа("Булево"));
	Колонки.Добавить("ЕстьОбработчикПослеВыгрузки",				одОписаниеТипа("Булево"));
	
	Колонки.Добавить("ЕстьОбработчикПередОбработкойВыгрузки",	одОписаниеТипа("Булево"));
	Колонки.Добавить("ЕстьОбработчикПослеОбработкиВыгрузки",	одОписаниеТипа("Булево"));
	
	//ОЛ 30.01.2015
	Колонки.Добавить("ИмяПараметраДляПередачи");
	//конец ОЛ
	
КонецПроцедуры // ИнициализацияТаблицыПравилКонвертацииСвойств()

// Инициализирует колонки таблицы правил конвертации объектов
//
// Параметры:
//  Нет.
// 
Процедура ИнициализацияТаблицыПравилКонвертации()

	Колонки = ТаблицаПравилКонвертации.Колонки;
	
	Колонки.Добавить("Имя");
	Колонки.Добавить("Наименование");
	Колонки.Добавить("Порядок");

	Колонки.Добавить("СинхронизироватьПоИдентификатору");
	Колонки.Добавить("НеСоздаватьЕслиНеНайден", одОписаниеТипа("Булево"));
	Колонки.Добавить("НеВыгружатьОбъектыСвойствПоСсылкам", одОписаниеТипа("Булево"));
	Колонки.Добавить("ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли", одОписаниеТипа("Булево"));
	Колонки.Добавить("СпособВыгрузки");

	Колонки.Добавить("Источник");
	Колонки.Добавить("Приемник");

	Колонки.Добавить("ПередВыгрузкой");
	Колонки.Добавить("ПриВыгрузке");
	Колонки.Добавить("ПослеВыгрузки");

	Колонки.Добавить("ЕстьОбработчикПередВыгрузкой",	одОписаниеТипа("Булево"));
	Колонки.Добавить("ЕстьОбработчикПриВыгрузке",		одОписаниеТипа("Булево"));
	Колонки.Добавить("ЕстьОбработчикПослеВыгрузки",		одОписаниеТипа("Булево"));

	Колонки.Добавить("ПередЗагрузкой");
	Колонки.Добавить("ПриЗагрузке");
	Колонки.Добавить("ПослеЗагрузки");
	
	Колонки.Добавить("ПоследовательностьПолейПоиска");
	
	Колонки.Добавить("ЕстьОбработчикПередЗагрузкой", одОписаниеТипа("Булево"));
	Колонки.Добавить("ЕстьОбработчикПриЗагрузке",    одОписаниеТипа("Булево"));
	Колонки.Добавить("ЕстьОбработчикПослеЗагрузки",  одОписаниеТипа("Булево"));
	
	Колонки.Добавить("ЕстьОбработчикПоследовательностьПолейПоиска",  одОписаниеТипа("Булево"));

	Колонки.Добавить("СвойстваПоиска",	одОписаниеТипа("ТаблицаЗначений"));
	Колонки.Добавить("Свойства",		одОписаниеТипа("ТаблицаЗначений"));
	
	Колонки.Добавить("Значения",		одОписаниеТипа("Соответствие"));

	Колонки.Добавить("Выгруженные",							одОписаниеТипа("Соответствие"));
	Колонки.Добавить("ВыгружатьПредставлениеИсточника",		одОписаниеТипа("Булево"));
	
	Колонки.Добавить("НеЗамещать",					одОписаниеТипа("Булево"));
	
	Колонки.Добавить("ЗапоминатьВыгруженные",       одОписаниеТипа("Булево"));
	Колонки.Добавить("ВсеОбъектыВыгружены",         одОписаниеТипа("Булево"));
	
КонецПроцедуры // ИнициализацияТаблицыПравилКонвертации()

// Инициализирует колонки таблицы правил выгрузки данных
//
// Параметры:
//  Нет
// 
Процедура ИнициализацияТаблицыПравилВыгрузки()

	Колонки = ТаблицаПравилВыгрузки.Колонки;

	Колонки.Добавить("Включить",		одОписаниеТипа("Число"));
	Колонки.Добавить("ЭтоГруппа",		одОписаниеТипа("Булево"));
	
	Колонки.Добавить("Имя");
	Колонки.Добавить("Наименование");
	Колонки.Добавить("Порядок");

	Колонки.Добавить("СпособОтбораДанных");
	Колонки.Добавить("ОбъектВыборки");
	
	//Колонки.Добавить("ОбъектВыборкиСтрокой");
	
	Колонки.Добавить("ПравилоКонвертации");

	Колонки.Добавить("ПередОбработкой");
	Колонки.Добавить("ПослеОбработки");

	Колонки.Добавить("ПередВыгрузкой");
	Колонки.Добавить("ПослеВыгрузки");
	
	// Колонки для подержки отбора с помощью построителя
	Колонки.Добавить("ИспользоватьОтбор", одОписаниеТипа("Булево"));
	Колонки.Добавить("НастройкиПостроителя");
	Колонки.Добавить("ИмяОбъектаДляЗапроса");
	
	Колонки.Добавить("СсылкаНаУзелОбмена");

КонецПроцедуры // ИнициализацияТаблицыПравилВыгрузки()

// Инициализирует колонки таблицы правил очистки данных
//
// Параметры:
//  Нет.
// 
Процедура ИнициализацияТаблицыПравилОчистки()

	Колонки = ТаблицаПравилОчистки.Колонки;

	Колонки.Добавить("Включить",		одОписаниеТипа("Булево"));
	Колонки.Добавить("ЭтоГруппа",		одОписаниеТипа("Булево"));
	
	Колонки.Добавить("Имя");
	Колонки.Добавить("Наименование");
	Колонки.Добавить("Порядок",	одОписаниеТипа("Число"));

	Колонки.Добавить("СпособОтбораДанных");
	Колонки.Добавить("ОбъектВыборки");
	
	Колонки.Добавить("УдалятьЗаПериод");
	Колонки.Добавить("Непосредственно",	одОписаниеТипа("Булево"));

	Колонки.Добавить("ПередОбработкой");
	Колонки.Добавить("ПослеОбработки");
	Колонки.Добавить("ПередУдалением");

КонецПроцедуры // ИнициализацияТаблицыПравилОчистки()

// Инициализирует колонки таблицы настройки параметров
//
// Параметры:
//  Нет.
// 
Процедура ИнициализацияТаблицыНастройкиПараметров()

	Колонки = ТаблицаНастройкиПараметров.Колонки;

	Колонки.Добавить("Имя");
	Колонки.Добавить("Наименование");
	Колонки.Добавить("Значение");
    
	//БАЛАНС (25.12.2007)                       
	//
	Колонки.Добавить("ПередаватьПараметрПриВыгрузке");
	 
КонецПроцедуры // ИнициализацияТаблицыПравилОчистки()

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ РЕКВИЗИТОВ И МОДУЛЬНЫХ ПЕРЕМЕННЫХ

// Инициализирует переменную одСообщения, содержащую соответствия кодов сообщений их описаниям
//
// Параметры:
//  Нет.
// 
Процедура ИнициализацияСообщений()

	одСообщения			= Новый Соответствие;
		
	одСообщения.Вставить(2,  "Ошибка распаковки файла обмена. Файл заблокирован.");
	одСообщения.Вставить(3,  "Указанный файл правил обмена не существует!");
	одСообщения.Вставить(4,  "Ошибка при создании COM-объекта Msxml2.DOMDocument");
	одСообщения.Вставить(5,  "Ошибка открытия файла обмена");
	одСообщения.Вставить(6,  "Ошибка при загрузке правил обмена");
	одСообщения.Вставить(7,  "Ошибка формата правил обмена");
	одСообщения.Вставить(8,  "Не корректно указано имя файла для выгрузки данных");
	одСообщения.Вставить(9,  "Ошибка формата файла обмена");
	одСообщения.Вставить(10, "Не указано имя файла для выгрузки данных (Имя файла данных)");
	одСообщения.Вставить(11, "Ссылка на несуществующий объект метаданных в правилах обмена");
	одСообщения.Вставить(12, "Не указано имя файла с правилами обмена (Имя файла правил)");
			
	одСообщения.Вставить(13, "Ошибка получения значения свойства объекта (по имени свойства источника)");
	одСообщения.Вставить(14, "Ошибка получения значения свойства объекта (по имени свойства приемника)");
	
	одСообщения.Вставить(15, "Не указано имя файла для загрузки данных (Имя файла для загрузки)");
			
	одСообщения.Вставить(16, "Ошибка получения значения свойства подчиненного объекта (по имени свойства источника)");
	одСообщения.Вставить(17, "Ошибка получения значения свойства подчиненного объекта (по имени свойства приемника)");
		
	одСообщения.Вставить(19, "Ошибка в обработчике события ПередЗагрузкойОбъекта");
	одСообщения.Вставить(20, "Ошибка в обработчике события ПриЗагрузкеОбъекта");
	одСообщения.Вставить(21, "Ошибка в обработчике события ПослеЗагрузкиОбъекта");
	одСообщения.Вставить(22, "Ошибка в обработчике события ПередЗагрузкойДанных (конвертация)");
	одСообщения.Вставить(23, "Ошибка в обработчике события ПослеЗагрузкиДанных (конвертация)");
	одСообщения.Вставить(24, "Ошибка при удалении объекта");
	одСообщения.Вставить(25, "Ошибка при записи документа");
	одСообщения.Вставить(26, "Ошибка записи объекта");
	одСообщения.Вставить(27, "Ошибка в обработчике события ПередОбработкойПравилаОчистки");
	одСообщения.Вставить(28, "Ошибка в обработчике события ПослеОбработкиПравилаОчистки");
	одСообщения.Вставить(29, "Ошибка в обработчике события ПередУдалениемОбъекта");
	
	одСообщения.Вставить(31, "Ошибка в обработчике события ПередОбработкойПравилаВыгрузки");
	одСообщения.Вставить(32, "Ошибка в обработчике события ПослеОбработкиПравилаВыгрузки");
	одСообщения.Вставить(33, "Ошибка в обработчике события ПередВыгрузкойОбъекта");
	одСообщения.Вставить(34, "Ошибка в обработчике события ПослеВыгрузкиОбъекта");
			
	одСообщения.Вставить(39, "Ошибка при выполнении алгоритма, содержащегося в файле обмена");
			
	одСообщения.Вставить(41, "Ошибка в обработчике события ПередВыгрузкойОбъекта");
	одСообщения.Вставить(42, "Ошибка в обработчике события ПриВыгрузкеОбъекта");
	одСообщения.Вставить(43, "Ошибка в обработчике события ПослеВыгрузкиОбъекта");
			
	одСообщения.Вставить(45, "Не найдено правило конвертации объектов");
		
	одСообщения.Вставить(48, "Ошибка в обработчике события ПередОбработкойВыгрузки группы свойств");
	одСообщения.Вставить(49, "Ошибка в обработчике события ПослеОбработкиВыгрузки группы свойств");
	одСообщения.Вставить(50, "Ошибка в обработчике события ПередВыгрузкой (объекта коллекции)");
	одСообщения.Вставить(51, "Ошибка в обработчике события ПриВыгрузке (объекта коллекции)");
	одСообщения.Вставить(52, "Ошибка в обработчике события ПослеВыгрузки (объекта коллекции)");
	одСообщения.Вставить(53, "Ошибка в глобальном обработчике события ПередЗагрузкойОбъекта (конвертация)");
	одСообщения.Вставить(54, "Ошибка в глобальном обработчике события ПослеЗагрузкиОбъекта (конвертация)");
	одСообщения.Вставить(55, "Ошибка в обработчике события ПередВыгрузкой (свойства)");
	одСообщения.Вставить(56, "Ошибка в обработчике события ПриВыгрузке (свойства)");
	одСообщения.Вставить(57, "Ошибка в обработчике события ПослеВыгрузки (свойства)");
	
	одСообщения.Вставить(62, "Ошибка в обработчике события ПередВыгрузкойДанных (конвертация)");
	одСообщения.Вставить(63, "Ошибка в обработчике события ПослеВыгрузкиДанных (конвертация)");
	одСообщения.Вставить(64, "Ошибка в глобальном обработчике события ПередКонвертациейОбъекта (конвертация)");
	одСообщения.Вставить(65, "Ошибка в глобальном обработчике события ПередВыгрузкойОбъекта (конвертация)");
	одСообщения.Вставить(66, "Ошибка получения коллекции подчиненных объектов из входящих данных ");
	одСообщения.Вставить(67, "Ошибка получения свойства подчиненного объекта из входящих данных ");
	одСообщения.Вставить(68, "Ошибка получения свойства объекта из входящих данных ");
	
	одСообщения.Вставить(69, "Ошибка в глобальном обработчике события ПослеВыгрузкиОбъекта (конвертация)");
	
	одСообщения.Вставить(71, "Не найдено соответствие для значения Источника");
	
	одСообщения.Вставить(72, "Ошибка при выгрузке данных для узла плана обмена ");
	
	одСообщения.Вставить(73, "Ошибка в обработчике события ПоследовательностьПолейПоиска ");

КонецПроцедуры // ИнициализацияСообщений()

Процедура ДополнитьМассивМенеджеровСсылочнымТипом(Менеджеры, МенеждерыДляПлановОбмена, ОбъектМД, ИмяТипа, Менеджер, ПрефиксИмениТипа)
	
	Имя              = ОбъектМД.Имя;
	ТипСсылкиСтрокой = ПрефиксИмениТипа + "." + Имя;
	СтрокаПоиска     = "ВЫБРАТЬ Ссылка ИЗ " + ИмяТипа + "." + Имя + " ГДЕ ";
	ТипСсылки        = Тип(ТипСсылкиСтрокой);
	Структура = Новый Структура("Имя,ИмяТипа,ТипСсылкиСтрокой,Менеджер,ОбъектМД,СтрокаПоиска,ПКО", Имя, ИмяТипа, ТипСсылкиСтрокой, Менеджер, ОбъектМД, СтрокаПоиска);
	Менеджеры.Вставить(ТипСсылки, Структура);
	
	
	СтруктураДляПланаОбмена = Новый Структура("Имя,ТипСсылки,ЭтоСсылочныйТип,ЭтоРегистр", Имя, ТипСсылки, Истина, Ложь);
	МенеждерыДляПлановОбмена.Вставить(ОбъектМД, СтруктураДляПланаОбмена);
	
КонецПроцедуры

Процедура ДополнитьМассивМенеджеровТипомРегистра(Менеджеры, ОбъектМД, ИмяТипа, Менеджер, ПрефиксИмениТипаЗапись, ПрефиксИмениТипаВыборка)
	
	Периодический = Неопределено;
	
	Имя					= ОбъектМД.Имя;
	ТипСсылкиСтрокой	= ПрефиксИмениТипаЗапись + "." + Имя;
	ТипСсылки			= Тип(ТипСсылкиСтрокой);
	Структура = Новый Структура("Имя,ИмяТипа,ТипСсылкиСтрокой,Менеджер,ОбъектМД,ПКО", Имя, ИмяТипа, ТипСсылкиСтрокой, Менеджер, ОбъектМД);
	
	Если ИмяТипа = "РегистрСведений" Тогда
		
		Периодический = (ОбъектМД.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический);
		ПодчиненныйРегистратору = (ОбъектМД.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору);
		
		Структура.Вставить("Периодический", Периодический);
		Структура.Вставить("ПодчиненныйРегистратору", ПодчиненныйРегистратору);
		
	КонецЕсли;	
	
	Менеджеры.Вставить(ТипСсылки, Структура);
		

	СтруктураДляПланаОбмена = Новый Структура("Имя,ТипСсылки,ЭтоСсылочныйТип,ЭтоРегистр", Имя, ТипСсылки, Ложь, Истина);
	МенеждерыДляПлановОбмена.Вставить(ОбъектМД, СтруктураДляПланаОбмена);
	
	
	ТипСсылкиСтрокой	= ПрефиксИмениТипаВыборка + "." + Имя;
	ТипСсылки			= Тип(ТипСсылкиСтрокой);
	Структура = Новый Структура("Имя,ИмяТипа,ТипСсылкиСтрокой,Менеджер,ОбъектМД,ПКО", Имя, ИмяТипа, ТипСсылкиСтрокой, Менеджер, ОбъектМД);
	
	Если Периодический <> Неопределено Тогда
		
		Структура.Вставить("Периодический", Периодический);
		Структура.Вставить("ПодчиненныйРегистратору", ПодчиненныйРегистратору);	
		
	КонецЕсли;
	
	Менеджеры.Вставить(ТипСсылки, Структура);	
		
КонецПроцедуры

// Инициализирует переменную Менеджеры, содержащую соответствия типов объектов их свойствам
//
// Параметры:
//  Нет.
// 
Процедура ИнициализацияМенеджеров()

	Менеджеры = Новый Соответствие;
	
	МенеждерыДляПлановОбмена = Новый Соответствие;
    	
	// ССЫЛКИ
	
	Для каждого ОбъектМД Из Метаданные.Справочники Цикл
		
		ДополнитьМассивМенеджеровСсылочнымТипом(Менеджеры, МенеждерыДляПлановОбмена, ОбъектМД, "Справочник", Справочники[ОбъектМД.Имя], "СправочникСсылка");
					
	КонецЦикла;

	Для каждого ОбъектМД Из Метаданные.Документы Цикл
		
		ДополнитьМассивМенеджеровСсылочнымТипом(Менеджеры, МенеждерыДляПлановОбмена, ОбъектМД, "Документ", Документы[ОбъектМД.Имя], "ДокументСсылка");
				
	КонецЦикла;

	Для каждого ОбъектМД Из Метаданные.ПланыВидовХарактеристик Цикл
		
		ДополнитьМассивМенеджеровСсылочнымТипом(Менеджеры, МенеждерыДляПлановОбмена, ОбъектМД, "ПланВидовХарактеристик", ПланыВидовХарактеристик[ОбъектМД.Имя], "ПланВидовХарактеристикСсылка");
				
	КонецЦикла;
	
	Для каждого ОбъектМД Из Метаданные.ПланыСчетов Цикл
		
		ДополнитьМассивМенеджеровСсылочнымТипом(Менеджеры, МенеждерыДляПлановОбмена, ОбъектМД, "ПланСчетов", ПланыСчетов[ОбъектМД.Имя], "ПланСчетовСсылка");
						
	КонецЦикла;
	
	Для каждого ОбъектМД Из Метаданные.ПланыВидовРасчета Цикл
		
		ДополнитьМассивМенеджеровСсылочнымТипом(Менеджеры, МенеждерыДляПлановОбмена, ОбъектМД, "ПланВидовРасчета", ПланыВидовРасчета[ОбъектМД.Имя], "ПланВидовРасчетаСсылка");
				
	КонецЦикла;
	
	Для каждого ОбъектМД Из Метаданные.ПланыОбмена Цикл
		
		ДополнитьМассивМенеджеровСсылочнымТипом(Менеджеры, МенеждерыДляПлановОбмена, ОбъектМД, "ПланОбмена", ПланыОбмена[ОбъектМД.Имя], "ПланОбменаСсылка");
				
	КонецЦикла;
	
	Для каждого ОбъектМД Из Метаданные.Задачи Цикл
		
		ДополнитьМассивМенеджеровСсылочнымТипом(Менеджеры, МенеждерыДляПлановОбмена, ОбъектМД, "Задача", Задачи[ОбъектМД.Имя], "ЗадачаСсылка");
				
	КонецЦикла;
	
	Для каждого ОбъектМД Из Метаданные.БизнесПроцессы Цикл
		
		ДополнитьМассивМенеджеровСсылочнымТипом(Менеджеры, МенеждерыДляПлановОбмена, ОбъектМД, "БизнесПроцесс", БизнесПроцессы[ОбъектМД.Имя], "БизнесПроцессСсылка");
				
	КонецЦикла;
	
	// РЕГИСТРЫ

	Для каждого ОбъектМД Из Метаданные.РегистрыСведений Цикл
		
		ДополнитьМассивМенеджеровТипомРегистра(Менеджеры, ОбъектМД, "РегистрСведений", РегистрыСведений[ОбъектМД.Имя], "РегистрСведенийЗапись", "РегистрСведенийВыборка");
						
	КонецЦикла;

	Для каждого ОбъектМД Из Метаданные.РегистрыБухгалтерии Цикл
		
		ДополнитьМассивМенеджеровТипомРегистра(Менеджеры, ОбъектМД, "РегистрБухгалтерии", РегистрыБухгалтерии[ОбъектМД.Имя], "РегистрБухгалтерииЗапись", "РегистрБухгалтерииВыборка");
				
	КонецЦикла;
	
	Для каждого ОбъектМД Из Метаданные.РегистрыНакопления Цикл
		
		ДополнитьМассивМенеджеровТипомРегистра(Менеджеры, ОбъектМД, "РегистрНакопления", РегистрыНакопления[ОбъектМД.Имя], "РегистрНакопленияЗапись", "РегистрНакопленияВыборка");
						
	КонецЦикла;
	
	Для каждого ОбъектМД Из Метаданные.РегистрыРасчета Цикл
		
		ДополнитьМассивМенеджеровТипомРегистра(Менеджеры, ОбъектМД, "РегистрРасчета", РегистрыРасчета[ОбъектМД.Имя], "РегистрРасчетаЗапись", "РегистрРасчетаВыборка");
						
	КонецЦикла;
	
	ИмяТипа = "Перечисление";
	
	Для каждого ОбъектМД Из Метаданные.Перечисления Цикл
		
		Имя              = ОбъектМД.Имя;
		Менеджер         = Перечисления[Имя];
		ТипСсылкиСтрокой = "ПеречислениеСсылка." + Имя;
		ТипСсылки        = Тип(ТипСсылкиСтрокой);
		Структура = Новый Структура("Имя,ИмяТипа,ТипСсылкиСтрокой,Менеджер,ОбъектМД,ПКО,ПустаяСсылка", Имя, ИмяТипа, ТипСсылкиСтрокой, Менеджер, ОбъектМД, , Перечисления[Имя].ПустаяСсылка());
		Менеджеры.Вставить(ТипСсылки, Структура);
		
	КонецЦикла;
	
	// Константы
	ИмяТипа             = "Константы";
	ОбъектМД            = Метаданные.Константы;
	Имя					= "Константы";
	Менеджер			= Константы;
	ТипСсылкиСтрокой	= "КонстантыНабор";
	ТипСсылки			= Тип(ТипСсылкиСтрокой);
	Структура = Новый Структура("Имя,ИмяТипа,ТипСсылкиСтрокой,Менеджер,ОбъектМД,ПКО", Имя, ИмяТипа, ТипСсылкиСтрокой, Менеджер, ОбъектМД);
	Менеджеры.Вставить(ТипСсылки, Структура);
	
КонецПроцедуры // ИнициализацияМенеджеров()

Процедура ИнициализироватьМенеджерыИСообщения() Экспорт
	
	Если Менеджеры = Неопределено Тогда
		ИнициализацияМенеджеров();
	КонецЕсли; 

	Если одСообщения = Неопределено Тогда
		ИнициализацияСообщений();
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьСтруктуруКонвертации()
	
	Конвертация  = Новый Структура("ПередВыгрузкойДанных, ПослеВыгрузкиДанных, ПередВыгрузкойОбъекта, ПослеВыгрузкиОбъекта, ПередКонвертациейОбъекта, ПередЗагрузкойОбъекта, ПослеЗагрузкиОбъекта, ПередЗагрузкойДанных, ПослеЗагрузкиДанных");
	
КонецПроцедуры

// Инициализирует реквизиты обработки и модульные переменные
//
// Параметры:
//  Нет.
// 
Процедура ИнициализацияРеквизитовИМодульныхПеременных()

	КоличествоОбработанныхОбъектовДляОбновленияСтатуса = 100;
	
	ЗапоминатьЗагруженныеОбъекты     = Истина;
	ЧислоХранимыхЗагруженныхОбъектов = 5000;
	
	ПараметрыИнициализированы        = Ложь;
	
	ВестиДополнительныйКонтрольЗаписиВXML = Ложь;
	НепосредственноеЧтениеВИБПриемнике = Ложь;
	
	Менеджеры    = Неопределено;
	одСообщения  = Неопределено;
	
	ФлагОшибки   = Ложь;
	
	СоздатьСтруктуруКонвертации();
	
	Правила      = Новый Структура;
	Алгоритмы    = Новый Структура;
	ДопОбработки = Новый Структура;
	Запросы      = Новый Структура;

	Параметры    = Новый Структура;
	
	ПараметрыДопОбработок = Новый Структура;
    	
	мXMLПравила  = Неопределено;
	мXMLДокумент = DOM_НовыйXMLДокумент();

	
	// Типы

	одТипСтрока                = Тип("Строка");
	одТипБулево                = Тип("Булево");
	одТипЧисло                 = Тип("Число");
	одТипДата                  = Тип("Дата");
	одТипХранилищеЗначения     = Тип("ХранилищеЗначения");
	одТипДвоичныеДанные        = Тип("ДвоичныеДанные");
	одТипВидДвиженияНакопления = Тип("ВидДвиженияНакопления");
	одТипУдалениеОбъекта       = Тип("УдалениеОбъекта");
	одТипВидСчета			   = Тип("ВидСчета");

	ЗначениеПустаяДата		   = Дата('00010101');

	// Типы узлов xml
	
	одТипУзлаXML_КонецЭлемента  = ТипУзлаXML.КонецЭлемента;
	одТипУзлаXML_НачалоЭлемента = ТипУзлаXML.НачалоЭлемента;
	одТипУзлаXML_Текст          = ТипУзлаXML.Текст;


	мСписокМакетовПравилОбмена  = Новый СписокЗначений;

	Для каждого Макет Из ЭтотОбъект.Метаданные().Макеты Цикл
		мСписокМакетовПравилОбмена.Добавить(Макет.Синоним);
	КонецЦикла; 
	
    // Инициализация обработки подбора
	
	//МакетОбработки              = ПолучитьМакет("ПодборОбъектов");
	//УникальныйИдентификатор     = Новый УникальныйИдентификатор();
	//ИмяВременногоФайлаОбработки = КаталогВременныхФайлов() + УникальныйИдентификатор + ".epf";
	//МакетОбработки.Записать(ИмяВременногоФайлаОбработки);
	//ОбработкаПодбораОбъектов    = ВнешниеОбработки.Создать(ИмяВременногоФайлаОбработки);
	//УдалитьФайлы(ИмяВременногоФайлаОбработки);
	
	мФайлПротоколаДанных = Неопределено;
	
	ТипИнформационнойБазыДляПодключения = Истина;
	АутентификацияWindowsИнформационнойБазыДляПодключения = Ложь;
	ВерсияПлатформыИнформационнойБазыДляПодключения = "V8";
	
КонецПроцедуры // ИнициализацияРеквизитовИМодульныхПеременных()

Функция ПодключитсяКИнформационнойБазе(СтруктураПодключения)
	
	Если СтруктураПодключения.ФайловыйРежим  Тогда
		
		Если ПустаяСтрока(СтруктураПодключения.КаталогИБ) Тогда
			
			Сообщить("Не задан каталог информационной базы-приемника", СтатусСообщения.Важное);
			
		КонецЕсли;
		
		СтрокаПодключения = "File=""" + СтруктураПодключения.КаталогИБ + """";
	Иначе
		
		Если ПустаяСтрока(СтруктураПодключения.ИмяСервера) Тогда
			
			Сообщить("Не задано имя сервера 1С:Предприятия информационной базы-приемника", СтатусСообщения.Важное);
			
		КонецЕсли;
		
		Если ПустаяСтрока(СтруктураПодключения.ИмяИБНаСервере) Тогда
			
			Сообщить("Не задано имя информационной базы-приемника на сервере 1С:Предприятия", СтатусСообщения.Важное);
			
		КонецЕсли;		
		
		СтрокаПодключения = "Srvr = """ + СтруктураПодключения.ИмяСервера + """; Ref = """ + СтруктураПодключения.ИмяИБНаСервере + """";
		
		
	КонецЕсли;
	
	Если Не СтруктураПодключения.АутентификацияWindows Тогда
		Если НЕ ПустаяСтрока(СтруктураПодключения.Пользователь) Тогда
			СтрокаПодключения = СтрокаПодключения + ";Usr = """ + СтруктураПодключения.Пользователь + """";
		КонецЕсли;
		Если НЕ ПустаяСтрока(СтруктураПодключения.Пароль) Тогда
			СтрокаПодключения = СтрокаПодключения + ";Pwd = """ + СтруктураПодключения.Пароль + """";
		КонецЕсли;
	КонецЕсли;
	
	//"V8" или "V81"
	ОбъектПодключения = СтруктураПодключения.ВерсияПлатформы;
	
	Попытка
		#Если Клиент Тогда
		Состояние("Идет процесс соединения ...");
		#КонецЕсли
		Если  СтруктураПодключения.ТипПодключения = 0 Тогда
			ОбъектПодключения = ОбъектПодключения +".Application";
			ТекCOMОбъект = Новый COMОбъект(ОбъектПодключения);
			ТекCOMОбъект.Connect(СтрокаПодключения);
		Иначе
			ОбъектПодключения = ОбъектПодключения +".COMConnector";
			ТекCOMПодключение = Новый COMОбъект(ОбъектПодключения);
			ТекCOMОбъект = ТекCOMПодключение.Connect(СтрокаПодключения);
		КонецЕсли;
			
		#Если Клиент Тогда
			Состояние("Соединение установлено");
			Состояние();
		#КонецЕсли		
			
	Исключение
		
		#Если Клиент Тогда
			Сообщить("При попытке соедиения с COM-сервером произошла следующая ошибка:" + Символы.ПС 
						+ ОписаниеОшибки(), СтатусСообщения.Важное);
		    Состояние("Соединение установить не удалось");
			Состояние();
		#КонецЕсли
							
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат ТекCOMОбъект;
	
КонецФункции

// функция возвращает часть строки после последнего встреченного символа в строке
Функция ПолучитьСтрокуОтделеннойСимволом(Знач ИсходнаяСтрока, Знач СимволПоиска)
	
	ПозицияСимвола = СтрДлина(ИсходнаяСтрока);
	Пока ПозицияСимвола >= 1 Цикл
		
		Если Сред(ИсходнаяСтрока, ПозицияСимвола, 1) = СимволПоиска Тогда
						
			Возврат Сред(ИсходнаяСтрока, ПозицияСимвола + 1); 
			
		КонецЕсли;
		
		ПозицияСимвола = ПозицияСимвола - 1;	
	КонецЦикла;

	Возврат "";
  	
КонецФункции

// Выделяет из имени файла его расширение (набор символов после последней точки).
//
// Параметры
//  ИмяФайла     – Строка, содержащая имя файла, неважно с именем каталога или без.
//
// Возвращаемое значение:
//   Строка – расширение файла.
//
Функция ПолучитьРасширениеИмениФайла(Знач ИмяФайла) Экспорт
	
	Расширение = ПолучитьСтрокуОтделеннойСимволом(ИмяФайла, ".");
	Возврат Расширение;
	
КонецФункции

Функция ВыполнитьПодключениеКИБПриемнику() Экспорт
	
	РезультатПодключения = Неопределено;
	
	СтруктураПодключения = Новый Структура();
	СтруктураПодключения.Вставить("ТипПодключения", 1);
	СтруктураПодключения.Вставить("ФайловыйРежим", ТипИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("АутентификацияWindows", АутентификацияWindowsИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("КаталогИБ", КаталогИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("ИмяСервера", ИмяСервераИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("ИмяИБНаСервере", ИмяИнформационнойБазыНаСервереДляПодключения);
	СтруктураПодключения.Вставить("Пользователь", ПользовательИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("Пароль", ПарольИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("ВерсияПлатформы", ВерсияПлатформыИнформационнойБазыДляПодключения);
	
	ОбъектПодключения = ПодключитсяКИнформационнойБазе(СтруктураПодключения);
	
	Если ОбъектПодключения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		РезультатПодключения = ОбъектПодключения.Обработки.УниверсальныйОбменДаннымиXML.Создать();
	Исключение
		#Если Клиент тогда
		Сообщить("При попытке создания обработки УниверсальныйОбменДаннымиXML произошла ошибка:" + ОписаниеОшибки(), СтатусСообщения.Важное);
		#КонецЕсли
		РезультатПодключения = Неопределено;
	КонецПопытки;
	
	Если РезультатПодключения <> Неопределено Тогда
		
		РезультатПодключения.ИспользоватьТранзакции = ИспользоватьТранзакции;	
		РезультатПодключения.КоличествоОбъектовНаТранзакцию = КоличествоОбъектовНаТранзакцию;
		
		РезультатПодключения.ФлагРежимОтладки = ФлагРежимОтладки;
		
		Если Не ПустаяСтрока(ИмяФайлаПротоколаОбмена) Тогда
			
			РасширениеФайлаПротокола = ПолучитьРасширениеИмениФайла(ИмяФайлаПротоколаОбмена);
			
			Если Не ПустаяСтрока(РасширениеФайлаПротокола) Тогда
								
				ИмяФайлаПротоколаВыгрузки = СтрЗаменить(ИмяФайлаПротоколаОбмена, "." + РасширениеФайлаПротокола, "");
				
			КонецЕсли;
			
			ИмяФайлаПротоколаВыгрузки = ИмяФайлаПротоколаВыгрузки + "_Загрузка";
			
			Если Не ПустаяСтрока(РасширениеФайлаПротокола) Тогда
				
				ИмяФайлаПротоколаВыгрузки = ИмяФайлаПротоколаВыгрузки + "." + РасширениеФайлаПротокола;	
				
			КонецЕсли;
			
			РезультатПодключения.ИмяФайлаПротоколаОбмена = ИмяФайлаПротоколаВыгрузки;
			
		КонецЕсли;
						
		РезультатПодключения.ДописыватьДанныеВПротоколОбмена = ДописыватьДанныеВПротоколОбмена;
		РезультатПодключения.ВыводВПротоколИнформационныхСообщений = ВыводВПротоколИнформационныхСообщений;
		
		РезультатПодключения.РежимОбмена = "Загрузка";
		
	КонецЕсли;
	
	Возврат РезультатПодключения;
	
КонецФункции

Процедура ПереименоватьСтарыйФайл()

	

КонецПроцедуры
 
Процедура ИнициализацияТаблицДокументов()

	мТаблицаЗарегистрированныхДокументов=Новый ТаблицаЗначений;
	мТаблицаВыгруженныхДокументов=Новый ТаблицаЗначений;
	
	мТаблицаЗарегистрированныхДокументов.Колонки.Добавить("Документ");
	мТаблицаВыгруженныхДокументов.Колонки.Добавить("Документ");

КонецПроцедуры // ИнициализацияТаблицДокументов()
 ////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

ИнициализацияРеквизитовИМодульныхПеременных();

ИнициализацияТаблицыПравилКонвертации();
ИнициализацияТаблицыПравилВыгрузки();
ИнициализацияТаблицыПравилОчистки();
ИнициализацияТаблицыНастройкиПараметров();
ИнициализацияТаблицДокументов();
