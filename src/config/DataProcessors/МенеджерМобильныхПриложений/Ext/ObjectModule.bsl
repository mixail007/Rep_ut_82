///////////////////////// МЕТОДЫ МЕНЕДЖЕРА МОБИЛЬНЫХ ПРИЛОЖЕНИЙ ////////////////
Перем ШтрихкодЗапрашиваемогоДокумента;

// *****************************************************************************
// Взвращает мобильное приложение, полученное из хранилища
// Параметры:
//  ИмяПользователя - имя пользователя мобильного приложения, для которого требуется получить мобильное приложение
//  КодМобильногоКомпьютера - код мобильного компьютера, для которого запрашивается мобильное приложение
//   
// Возвращаемое значение
//   Результат - мобильное приложение в виде строки
//
Функция ПолучитьМобильноеПриложение(ИмяПользователя, КодМобильногоКомпьютера, ПараметрыОбменаДанными = "") Экспорт
			
	Пользователь = ПользовательПоКоду(ИмяПользователя);
	МобильныйКомпьютер = МобильныйКомпьютерПоКоду(КодМобильногоКомпьютера);
			
	СтруктураПараметровНастроекПользователя = СтруктураПараметровНастроекПользователяМобильногоКомпьютера(Пользователь, МобильныйКомпьютер);
	
	ИнформацияОбОтсутствииНастроек = ОтсутствиеНастроекПользователяМобильногоКомпьютера(СтруктураПараметровНастроекПользователя, ИмяПользователя, КодМобильногоКомпьютера);
	Если Не ПустаяСтрока(ИнформацияОбОтсутствииНастроек) Тогда
		ВызватьИсключение(ИнформацияОбОтсутствииНастроек);
	КонецЕсли;	
    	
	Отбор = Новый Структура();
	Отбор.Вставить("МобильноеПриложение", СтруктураПараметровНастроекПользователя.МобильноеПриложение);
	Отбор.Вставить("ВерсияМобильногоПриложения", СтруктураПараметровНастроекПользователя.ВерсияМобильногоПриложения);
		
	СтруктураРегистра = РегистрыСведений.ХранилищеМобильныхПриложений.Получить(Отбор);
	
	МобильноеПриложениеСтрокой = СтруктураРегистра.Приложение;	
		
	Если ПустаяСтрока(МобильноеПриложениеСтрокой) Тогда
		ВызватьИсключение("Отсутствует файл мобильного приложения!");						
	КонецЕсли;	
		
	Возврат МобильноеПриложениеСтрокой;
	
КонецФункции

// Выполняет запись мобильного приложения в хранилище в виде кодированной строки
// Параметры://  
//  ИмяМобильногоПриложения - имя мобильного приложения
//  ВерсияМобильногоПриложения - строка-идентификатор версии мобильного приложения
//  ФайлМобильногоПриложенияСтрокой - строка, содержащая файл мобильного приложения
//  ИспользуемыеМетаданные - строка, содержащая перечень метаданных, используемых мобильным приложением, в виде XML
// 
Процедура ЗаписатьМобильноеПриложение(ИмяМобильногоПриложения, ВерсияМобильногоПриложения, МобильноеПриложениеСтрокой, ИспользуемыеМетаданные) Экспорт
			
	Если Не ТипЗнч(ИмяМобильногоПриложения)= Тип("Строка") ИЛИ
		Не ТипЗнч(ВерсияМобильногоПриложения)= Тип("Строка") ИЛИ
		Не ТипЗнч(МобильноеПриложениеСтрокой)= Тип("Строка") ИЛИ
		Не ТипЗнч(ИспользуемыеМетаданные)= Тип("Строка")Тогда
		
		ВызватьИсключение("Неверный тип данных. Данные должны передаваться строкой!");		
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяМобильногоПриложения) Тогда
		ВызватьИсключение("Не указано имя мобильного приложения!");		
	ИначеЕсли ПустаяСтрока(ВерсияМобильногоПриложения) Тогда
        ВызватьИсключение("Не указана версия мобильного приложения!");		      		
	ИначеЕсли ПустаяСтрока(МобильноеПриложениеСтрокой) Тогда
        ВызватьИсключение("Нет данных для записи мобильного приложения!");				
	ИначеЕсли ПустаяСтрока(ИспользуемыеМетаданные) Тогда
        ВызватьИсключение("Нет информации об используемых метаданных!");		
	КонецЕсли;
	
	МенеджерСправочникаМобильныхПриложений = Справочники.МобильныеПриложения;
	МобильноеПриложениеСсылка = МенеджерСправочникаМобильныхПриложений.НайтиПоНаименованию(ИмяМобильногоПриложения, Истина);
	
	МенеджерСправочникаВерсий = Справочники.ВерсииМобильныхПриложений;		
	Если МобильноеПриложениеСсылка.Пустая() Тогда
		НовыйЭлемент = МенеджерСправочникаМобильныхПриложений.СоздатьЭлемент();
		НовыйЭлемент.Наименование = ИмяМобильногоПриложения;
		НовыйЭлемент.Записать();
		МобильноеПриложение = НовыйЭлемент.Ссылка;
	Иначе	
		МобильноеПриложение = МобильноеПриложениеСсылка;
	КонецЕсли;	
	
	ВерсияСсылка = МенеджерСправочникаВерсий.НайтиПоКоду(ВерсияМобильногоПриложения,,,МобильноеПриложение);
	Если ВерсияСсылка.Пустая() Тогда
		НовыйЭлемент = МенеджерСправочникаВерсий.СоздатьЭлемент();
		НовыйЭлемент.Владелец = МобильноеПриложение;
		НовыйЭлемент.Код = ВерсияМобильногоПриложения;
		НовыйЭлемент.Записать();
		Версия = НовыйЭлемент.Ссылка;
	Иначе	
		Версия = ВерсияСсылка;
	КонецЕсли;	
		    	
	МенеджерЗаписи = РегистрыСведений.ХранилищеМобильныхПриложений.СоздатьМенеджерЗаписи();	   
	МенеджерЗаписи.МобильноеПриложение = МобильноеПриложение;
	МенеджерЗаписи.ВерсияМобильногоПриложения = Версия;
	МенеджерЗаписи.Приложение = МобильноеПриложениеСтрокой; 
	МенеджерЗаписи.ОписаниеИспользуемыхМетаданных = ИспользуемыеМетаданные; 
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

// Возвращает данные, выбранные из ИБ в соответствии с заданной для пользователя схемой выборки
// Параметры:
//  ИмяПользователя - имя пользователя мобильного приложения, для которого требуется получить данные ИБ
//  КодМобильногоКомпьютера - код мобильного компьютера, для которого запрашиваются данные
//   
// Возвращаемое значение
//  Данные - данные ИБ в виде строки
//
Функция ПолучитьДанные(ИмяПользователя, КодМобильногоКомпьютера, Знач ПервичнаяИнициализацияИБНаКПК = Ложь, ПараметрыОбменаДанными = "") Экспорт
	
	Пользователь = ПользовательПоКоду(ИмяПользователя);
	МобильныйКомпьютер = МобильныйКомпьютерПоКоду(КодМобильногоКомпьютера);
	
	СтруктураПараметровОбменаДанными = ПолучитьСтруктуруПараметровОбменаДанными(ПараметрыОбменаДанными);
	
	СтруктураПараметровНастроекПользователя = СтруктураПараметровНастроекПользователяМобильногоКомпьютера(Пользователь, МобильныйКомпьютер);
	
	ИнформацияОбОтсутствииНастроек = ОтсутствиеНастроекПользователяМобильногоКомпьютера(СтруктураПараметровНастроекПользователя, ИмяПользователя, КодМобильногоКомпьютера);
	
	Если Не ПустаяСтрока(ИнформацияОбОтсутствииНастроек) Тогда
		ВызватьИсключение(ИнформацияОбОтсутствииНастроек);
	КонецЕсли;
	
	//+++( 14.11.2013 получение документа по штрихКоду и регистрация его для обмена
	СтруктураПараметровОбменаДанными = ПолучитьСтруктуруПараметровОбменаДанными(ПараметрыОбменаДанными);
	//----------------обработка штрихкода-----------------------------------------------------------------------------	
	ШтрихкодЗапрашиваемогоДокумента = СтруктураПараметровОбменаДанными.ШтрихкодДокумента; 
	ЗапрашиваемыйДокумент = Документы.ЗаданиеНаОтгрузку.НайтиПоНомеру("ТК"+сред(ШтрихкодЗапрашиваемогоДокумента,7,6), ТекущаяДата()).Ссылка;
	
	Если Не ЗапрашиваемыйДокумент = Документы.ЗаданиеНаОтгрузку.ПустаяСсылка() Тогда
		РегистрироватьЗадание = Ложь;
		Узел = ПланыОбмена.ОбменСКПК.НайтиПоКоду("002");
		Склад5000 = Справочники.Склады.НайтиПоКоду("00642");
		ПланыОбмена.УдалитьРегистрациюИзменений(Узел);
		
		//---------------обработка найденного документа для обратной выгрузки в ТСД---------------------	
		Для Каждого Строка Из ЗапрашиваемыйДокумент.Товары Цикл
			Если ЗначениеЗаполнено(Строка.Склад) И Строка.Склад = Склад5000
				И ЗначениеЗаполнено(Строка.Номенклатура) И ЗначениеЗаполнено(Строка.АдресХранения) Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(Узел, Строка.Склад.ПолучитьОбъект());	
				ПланыОбмена.ЗарегистрироватьИзменения(Узел, Строка.Номенклатура.ПолучитьОбъект());
				ПланыОбмена.ЗарегистрироватьИзменения(Узел, Строка.АдресХранения.ПолучитьОбъект());
				РегистрироватьЗадание = Истина;
			Иначе
				Продолжить;
			КонецЕсли;
			
		КонецЦикла;
		
		Если РегистрироватьЗадание Тогда
			ЗапрашиваемыйДокументОбъект = ЗапрашиваемыйДокумент.ПолучитьОбъект();
			ПланыОбмена.ЗарегистрироватьИзменения(Узел, ЗапрашиваемыйДокументОбъект); // в объект!	
		КонецЕсли;
	КонецЕсли;
	//+++)
	
	СтрокаНастроекОбмена = ПолучитьПереченьИспользуемыхМетаданных(СтруктураПараметровНастроекПользователя);
	ДеревоСхемыОбменаДанными = ПолучитьДеревоСхемыОбменаДанными(СтруктураПараметровНастроекПользователя);
	
	Если ДеревоСхемыОбменаДанными = Неопределено Тогда		
		// произошла какая то ошибка при получении настроек обмена данными
		ВызватьИсключение("Произошла ошибка при получении настроек обмена данными");				
	КонецЕсли;
	
	УзелОбмена = СтруктураПараметровНастроекПользователя.УзелОбмена;
	
	МетаданныеКонстант          = СоздатьТаблицуОбъектовМетаданных(Метаданные.Константы);	
	МетаданныеСправочников      = СоздатьТаблицуОбъектовМетаданных(Метаданные.Справочники);	
	МетаданныеДокументов        = СоздатьТаблицуОбъектовМетаданных(Метаданные.Документы);	
	МетаданныеРегистровСведений = СоздатьТаблицуОбъектовМетаданных(Метаданные.РегистрыСведений);	
	
	СтруктураСтрокКлассов = Новый Структура();
	СтруктураСтрокКлассов.Вставить("Константы", ДеревоСхемыОбменаДанными.Строки[0].Строки.Найти("Constants", "Имя"));
	СтруктураСтрокКлассов.Вставить("Справочники", ДеревоСхемыОбменаДанными.Строки[0].Строки.Найти("Catalogs", "Имя"));
	СтруктураСтрокКлассов.Вставить("Документы", ДеревоСхемыОбменаДанными.Строки[0].Строки.Найти("Documents", "Имя"));
	СтруктураСтрокКлассов.Вставить("РегистрыСведений", ДеревоСхемыОбменаДанными.Строки[0].Строки.Найти("InformationRegisters", "Имя"));
	
	// надо все объекты как измененные пометить
	
	//Если ПервичнаяИнициализацияИБНаКПК Тогда
	
	//Если СтруктураПараметровНастроекПользователя.СхемаОбменаДанными.ИспользуетсяПланОбмена Тогда
	//	
	//	МетаданныеПланаОбмена = УзелОбмена.Метаданные();
	//	
	//	Для Каждого ЭлементСостава Из МетаданныеПланаОбмена.Состав Цикл
	//		
	//		Если НужнаРегистрацияИзменений(ЭлементСостава.Метаданные, ДеревоСхемыОбменаДанными, СтруктураСтрокКлассов,
	//			МетаданныеКонстант, МетаданныеСправочников, МетаданныеДокументов, МетаданныеРегистровСведений) Тогда				
	//			
	//			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ЭлементСостава.Метаданные);
	//		Конецесли;
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;
	
	//КонецЕсли;	
	
	// Для остатков,штрихкодов - отдельная проверка
	
	Если НЕ СтруктураПараметровОбменаДанными.Свойство("ПолучатьОстаткиВВидеРегистраСведений") Тогда
		СтруктураПараметровОбменаДанными.Вставить("ПолучатьОстаткиВВидеРегистраСведений", Ложь);	
	КонецЕсли;		
	
	Если НЕ СтруктураПараметровОбменаДанными.Свойство("ПолучатьОстаткиВВидеТаблицыЗначений") Тогда
		СтруктураПараметровОбменаДанными.Вставить("ПолучатьОстаткиВВидеТаблицыЗначений", Ложь);	
	КонецЕсли;		
	
	Если НЕ СтруктураПараметровОбменаДанными.Свойство("ПолучатьШтрихкоды") Тогда
		СтруктураПараметровОбменаДанными.Вставить("ПолучатьШтрихкоды", Ложь);	
	КонецЕсли;	
	//КПКубрал+
	//Если  СтруктураПараметровОбменаДанными.ПолучатьОстаткиВВидеРегистраСведений Тогда			
	//	ЗаписатьДанныеРегистраОстатковДляМобильногоПользователя(Пользователь);		
	//КонецЕсли;
	//КПКубрал-
	
	//выгружаем данные для мобильного пользователя
	Попытка
		Данные = СформироватьXMLДляОбменаСКПК(УзелОбмена, Пользователь, СтрокаНастроекОбмена, ДеревоСхемыОбменаДанными, СтруктураСтрокКлассов, СтруктураПараметровОбменаДанными,
		МетаданныеКонстант, МетаданныеСправочников, МетаданныеДокументов, МетаданныеРегистровСведений);		
		
		Если ПустаяСтрока(Данные) Тогда
			ВызватьИсключение("Нет данных для обмена!");		
		КонецЕсли;
		
	Исключение		
		ВызватьИсключение("Ошибка получения данных !");		
	КонецПопытки;
	
	Возврат Данные;
	
КонецФункции

// Выполняет запись данных, полученных от мобильного приложения, в текущую ИБ
// Параметры:
//  ИмяПользователя - Имя пользователя мобильного приложения, чьи данные необходимо записать
//  КодМобильногоКомпьютера - код мобильного компьютера, от которого получены данные
//  ДанныеМобильногоПриложения - строка, содержащая сериализованные в XML данные, полученные от мобильного приложения
// 
Процедура ЗаписатьДанные(ИмяПользователя, КодМобильногоКомпьютера, ДанныеМобильногоПриложения, ПараметрыОбменаДанными = "") Экспорт
	
	Если Не ТипЗнч(ДанныеМобильногоПриложения)= Тип("Строка") Тогда
		ВызватьИсключение("Неверный тип данных. Данные должны передаваться строкой!");		
	КонецЕсли;	
	
	Если ПустаяСтрока(ДанныеМобильногоПриложения) Тогда
		ВызватьИсключение("Нет данных для записи!");		
	КонецЕсли;
		
	Пользователь = ПользовательПоКоду(ИмяПользователя);
	МобильныйКомпьютер = МобильныйКомпьютерПоКоду(КодМобильногоКомпьютера);
	
	СтруктураПараметровНастроекПользователя = СтруктураПараметровНастроекПользователяМобильногоКомпьютера(Пользователь, МобильныйКомпьютер);
	
	ИнформацияОбОтсутствииНастроек = ОтсутствиеНастроекПользователяМобильногоКомпьютера(СтруктураПараметровНастроекПользователя, ИмяПользователя, КодМобильногоКомпьютера);
	
	Если Не ПустаяСтрока(ИнформацияОбОтсутствииНастроек) Тогда
		ВызватьИсключение(ИнформацияОбОтсутствииНастроек);
	КонецЕсли;
	
	УзелОбмена = СтруктураПараметровНастроекПользователя.УзелОбмена;
		
	// непосредственно само чтение данных файла обмена и записи его в ИБ
	Попытка
		ПараметрыСеанса.ИдетОбменРаспределеннойБазы = Истина;
		ПринятьИзмененияОтКПК(УзелОбмена, ДанныеМобильногоПриложения);		
	Исключение
		ВызватьИсключение("Ошибка записи данных!");					
	КонецПопытки;

КонецПроцедуры

// Выполняет проверку, существует ли указанная версия мобильного приложения
// Параметры:
//  ИмяМобильного приложения - имя мобильного приложения, для которого необходимо проверить существование версии
//  ВерсияМобильногоПриложения - версия мобильного приложения, существование которой необходимо проверить
//   
// Возвращаемое значение
//   Результат - Истина - если версия существует, ложь - в противном случае
//
Функция ВерсияМобильногоПриложенияСуществует(ИмяМобильногоПриложения, ВерсияМобильногоПриложения) Экспорт
	
	МобильноеПриложениеСсылка = Справочники.МобильныеПриложения.НайтиПоНаименованию(ИмяМобильногоПриложения);
	
	Если МобильноеПриложениеСсылка.Пустая() Тогда		
		Возврат Ложь;
	КонецЕсли;	
	
	ВерсияСсылка = Справочники.ВерсииМобильныхПриложений.НайтиПоКоду(ВерсияМобильногоПриложения,,,МобильноеПриложениеСсылка);
	
	Если ВерсияСсылка.Пустая() Тогда		
		Возврат Ложь;
	КонецЕсли;	
     	
	Отбор = Новый Структура();
	Отбор.Вставить("МобильноеПриложение", МобильноеПриложениеСсылка);
	Отбор.Вставить("ВерсияМобильногоПриложения", ВерсияСсылка);
		
	СтруктураРегистра = РегистрыСведений.ХранилищеМобильныхПриложений.Получить(Отбор);	
	МобильноеПриложениеСтрокой = СтруктураРегистра.Приложение;	
		
	Если ПустаяСтрока(МобильноеПриложениеСтрокой) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;	
	
КонецФункции

// Осуществляет отражение в БД факта получения данных мобильным клиентом
// Параметры:
//  ИмяПользователя - имя пользователя мобильного приложения, получение данных которого нужно зарегистрировать
//  КодМобильногоКомпьютера - код мобильного компьютера, получение данные от которого нужно зарегистрировать
//   
Процедура ЗарегистрироватьПолучениеДанных(ИмяПользователя, КодМобильногоКомпьютера, ПараметрыОбменаДанными = "") Экспорт
		
	Пользователь = ПользовательПоКоду(ИмяПользователя);
	МобильныйКомпьютер = МобильныйКомпьютерПоКоду(КодМобильногоКомпьютера);
	
	СтруктураПараметровНастроекПользователя = СтруктураПараметровНастроекПользователяМобильногоКомпьютера(Пользователь, МобильныйКомпьютер);
		
	ИнформацияОбОтсутствииНастроек = ОтсутствиеНастроекПользователяМобильногоКомпьютера(СтруктураПараметровНастроекПользователя, ИмяПользователя, КодМобильногоКомпьютера);
	
	Если Не ПустаяСтрока(ИнформацияОбОтсутствииНастроек) Тогда
		ВызватьИсключение(ИнформацияОбОтсутствииНастроек);
	КонецЕсли;
	
	УзелОбмена = СтруктураПараметровНастроекПользователя.УзелОбмена;    	
	ОбъектУзла = УзелОбмена.ПолучитьОбъект();
	
	Попытка
		
		ОбъектУзла.НомерПринятого = ОбъектУзла.НомерОтправленного;
		ОбъектУзла.Записать();
		
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, ОбъектУзла.НомерОтправленного);
		
	Исключение
					
	КонецПопытки;	
	
КонецПроцедуры

// Выполняет аутентификацию мобильного пользователя
// Параметры:
//  ИмяПользователя - имя пользователя мобильного приложения, получение данных которого нужно зарегистрировать
//  КодМобильногоКомпьютера - код мобильного компьютера, получение данные от которого нужно зарегистрировать
//  ПарольПользователя - пароль мобильного пользователя
//   
// Возвращаемое значение
//  Результат - результат аутентификации: истина - авторизация выполнена, ложь - аутентификация не выполнена
//
Функция ВыполнитьАутентификацию(ИмяПользователя, КодМобильногоКомпьютера, ПарольПользователя) Экспорт
	
	Пользователь = ПользовательПоКоду(ИмяПользователя);
	МобильныйКомпьютер = МобильныйКомпьютерПоКоду(КодМобильногоКомпьютера);
	
	ИнформацияОбОтсутствииРегистрацииВСистеме = ОтсутствиеРегистрацииВСистеме(Пользователь, ИмяПользователя, МобильныйКомпьютер, КодМобильногоКомпьютера);	
	
	Если Не ПустаяСтрока(ИнформацияОбОтсутствииРегистрацииВСистеме) Тогда		
		ВызватьИсключение(ИнформацияОбОтсутствииРегистрацииВСистеме);
	КонецЕсли;	
	
	СтруктураПараметровНастроекПользователя = СтруктураПараметровНастроекПользователяМобильногоКомпьютера(Пользователь, МобильныйКомпьютер);
	ПарольИзНастроекПользователя = СтруктураПараметровНастроекПользователя.Пароль;
	
	Если ПарольИзНастроекПользователя = ПарольПользователя  Тогда		
		Возврат Истина;
	Иначе	
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

