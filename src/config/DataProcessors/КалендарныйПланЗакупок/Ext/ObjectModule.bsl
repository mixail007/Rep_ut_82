
// Содержит в себе список имен и типов значений отборов
Перем СписокОтборов Экспорт;

// Форма прогрессора
Перем мФормаИндикации Экспорт;

// Настройка периода
Перем НП Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

// Процедура заполняет таблицызначений реквизитов ТаблицаОбъектов, ТаблицаНоменклатурыОбъектов и ТаблицаПотребности объекта
//
Процедура ЗаполнитьТаблицуЗначенийОбъекта() Экспорт

	Запрос = Новый Запрос;
	
	мФормаИндикации.КомментарийОбработкиДанных = "Выполняется запрос ...";
	мФормаИндикации.МаксимальноеЗначение = 100;
	мФормаИндикации.Значение = 50;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КалендарныеПотребностиВНоменклатуреСрезПоследних.Номенклатура               КАК Номенклатура,
	|	КалендарныеПотребностиВНоменклатуреСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	КалендарныеПотребностиВНоменклатуреСрезПоследних.ДатаПотребности            КАК ДатаПотребности,
	|	КалендарныеПотребностиВНоменклатуреСрезПоследних.Заказ                      КАК ЗаказПокупателя,
	|	ВЫБОР КОГДА КалендарныеПотребностиВНоменклатуреСрезПоследних.ТоварТара = &Тара ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК Тара,
	|	СУММА(КалендарныеПотребностиВНоменклатуреСрезПоследних.Количество) КАК КоличествоПлана
	|ИЗ
	|	РегистрСведений.КалендарныеПотребностиВНоменклатуре.СрезПоследних(&ТекущаяДата) КАК КалендарныеПотребностиВНоменклатуреСрезПоследних
	|
	|СОЕДИНЕНИЕ
	|	(
	|	ВЫБРАТЬ
	|		Номенклатура.Ссылка КАК Номенклатура
	|	ИЗ
	|		Справочник.Номенклатура КАК Номенклатура
	|	ГДЕ
	|		Номенклатура.ОтветственныйМенеджерЗаПокупки = &ТекущийПользователь
	|		И
	|		Номенклатура.ЭтоГруппа = Ложь
	|	) КАК НоменклатураПользователя
	|ПО
	|	НоменклатураПользователя.Номенклатура = КалендарныеПотребностиВНоменклатуреСрезПоследних.Номенклатура
	|ГДЕ
	|	КалендарныеПотребностиВНоменклатуреСрезПоследних.ДатаПотребности >= &ДатаНачала
	|	И
	|	КалендарныеПотребностиВНоменклатуреСрезПоследних.Количество > 0
	|";
	
	Если ДатаОкончания <> '00010101000000' Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И
		|	КалендарныеПотребностиВНоменклатуреСрезПоследних.ДатаПотребности <= &ДатаОкончания
		|";
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + "
	|СГРУППИРОВАТЬ ПО
	|	КалендарныеПотребностиВНоменклатуреСрезПоследних.Номенклатура,
	|	КалендарныеПотребностиВНоменклатуреСрезПоследних.ХарактеристикаНоменклатуры,
	|	КалендарныеПотребностиВНоменклатуреСрезПоследних.ДатаПотребности,
	|	КалендарныеПотребностиВНоменклатуреСрезПоследних.Заказ,
	|	КалендарныеПотребностиВНоменклатуреСрезПоследних.ТоварТара
	|";
	
	Запрос.УстановитьПараметр("ТекущаяДата"        , КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ДатаНачала"         , НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания"      , КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("ТекущийПользователь", глТекущийПользователь);
	Запрос.УстановитьПараметр("Тара"               , Перечисления.ТоварТара.Тара);
	
	ТаблицаПотребности = Запрос.Выполнить().Выгрузить();
	
	ТаблицаПотребностиПоЗаказамПокупателей = ТаблицаПотребности.Скопировать();
	ИндекстСтроки = 0;
	Пока 1 = 1 Цикл
	
		Если ИндекстСтроки > ТаблицаПотребностиПоЗаказамПокупателей.Количество() - 1 Тогда
			Прервать;
		КонецЕсли; 
		
		СтрокаТаблицы = ТаблицаПотребностиПоЗаказамПокупателей[ИндекстСтроки];
		Если ЗначениеНеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) Тогда
			ТаблицаПотребностиПоЗаказамПокупателей.Удалить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли; 
		
		ИндекстСтроки = ИндекстСтроки + 1;
		
	КонецЦикла; 
	
	Если ТаблицаПотребности.Количество() > 0 Тогда
	
		ТаблицаРезультатаЗапроса = Неопределено;
		
		ШаблонТемповаяТаблицаПотребности = ТаблицаПотребности.Скопировать();
		ШаблонТемповаяТаблицаПотребности.Очистить();
		
		// Разделим запрос на таблицы по 500 строк, иначе при большом кол-ве номенклатуры
		// и использовании сервера 1С:Предприятия, текст запроса получится
		// большим и SQL Server его не выполнит
		ИндексИсходнойТаблицы = 0;
		КоличествоЗапросов = Окр((ТаблицаПотребности.Количество() / 500), 0, РежимОкругления.Окр15как20);
		ВыполняемыйЗапрос = 0;
		мФормаИндикации.МаксимальноеЗначение = КоличествоЗапросов;
		Пока ИндексИсходнойТаблицы <= ТаблицаПотребности.Количество() - 1 Цикл
		
			ВыполняемыйЗапрос = ВыполняемыйЗапрос + 1;
			
			Если КоличествоЗапросов = 1 Тогда
				мФормаИндикации.КомментарийОбработкиДанных = "Выполняется запрос ...";
				мФормаИндикации.Значение = 0.5;
			Иначе
				мФормаИндикации.КомментарийОбработкиДанных = "Выполняется запрос " + ВыполняемыйЗапрос + " из " + КоличествоЗапросов;
				мФормаИндикации.Значение = ВыполняемыйЗапрос;
			КонецЕсли; 
			
			ТемповаяТаблицаПотребности = ШаблонТемповаяТаблицаПотребности.Скопировать();
			
			Для а = ИндексИсходнойТаблицы По (ИндексИсходнойТаблицы + 500) Цикл
				Если а > ТаблицаПотребности.Количество() - 1 Тогда
					Прервать;
				КонецЕсли;
				НоваяСтрока = ТемповаяТаблицаПотребности.Добавить();
				Для каждого Колонка Из ТаблицаПотребности.Колонки Цикл
					НоваяСтрока[Колонка.Имя] = ТаблицаПотребности[а][Колонка.Имя];
				КонецЦикла;
			КонецЦикла;
		
			ИндексИсходнойТаблицы = а;
			
			Если ТемповаяТаблицаПотребности.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			
			// Остатки по заказам поставщикам
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("ТекущаяДата"        , КонецДня(ТекущаяДата()));
			Запрос.УстановитьПараметр("ДатаОкончания"      , ?(ДатаОкончания = '00010101000000', ДатаОкончания, КонецДня(ДатаОкончания)));
			Запрос.УстановитьПараметр("Тара"               , Перечисления.ТоварТара.Тара);
			Запрос.УстановитьПараметр("ТараПартия"         , Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
			Запрос.УстановитьПараметр("ТекущийПользователь", глТекущийПользователь);
			
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ЗаказыПоставщикамОстатки.ДоговорКонтрагента                      КАК ДоговорКонтрагентаЗаказа,
			|	ЗаказыПоставщикамОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетовДоговораЗаказа,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Дата                       КАК ДатаЗаказа,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Номер                      КАК НомерЗаказа,
			|	ЗаказыПоставщикамОстатки.Номенклатура                               КАК Номенклатура,
			|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры                 КАК ХарактеристикаНоменклатуры,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Контрагент                 КАК Контрагент,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления            КАК ДатаПоступленияЗаказа,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику                            КАК ЗаказПоставщику,
			|	ВЫБОР КОГДА ЗаказыПоставщикамОстатки.СтатусПартии = &ТараПартия ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ КАК Тара,
			|	ВЫБОР КОГДА РазмещениеЗаказовПокупателей.ЗаказПокупателя ЕСТЬ NULL ТОГДА Неопределено ИНАЧЕ РазмещениеЗаказовПокупателей.ЗаказПокупателя КОНЕЦ КАК ЗаказПокупателя,
			|	Сумма(ЗаказыПоставщикамОстатки.КоличествоОстаток) КАК КоличествоОстатокЗаказа,
			|	Сумма(ВЫБОР КОГДА РазмещениеЗаказовПокупателей.ЗаказПокупателя ЕСТЬ NULL ТОГДА 0 ИНАЧЕ РазмещениеЗаказовПокупателей.КоличествоОстаток КОНЕЦ) КАК Количество,
			|	Сумма(ЗаказыПоставщикамОстатки.СуммаВзаиморасчетовОстаток)          КАК СуммаВзаиморасчетовЗаказа
			|ИЗ
			|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&ТекущаяДата,ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ) КАК ЗаказыПоставщикамОстатки
			|
			|СОЕДИНЕНИЕ
			|	(
			|	ВЫБРАТЬ
			|		Номенклатура.Ссылка КАК Номенклатура
			|	ИЗ
			|		Справочник.Номенклатура КАК Номенклатура
			|	ГДЕ
			|		Номенклатура.ОтветственныйМенеджерЗаПокупки = &ТекущийПользователь
			|		И
			|		Номенклатура.ЭтоГруппа = Ложь
			|	) КАК НоменклатураПользователя
			|ПО
			|	НоменклатураПользователя.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ТекущаяДата) КАК РазмещениеЗаказовПокупателей
			|ПО
			|	РазмещениеЗаказовПокупателей.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура
			|	И
			|	РазмещениеЗаказовПокупателей.ХарактеристикаНоменклатуры = ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры
			|	И
			|	РазмещениеЗаказовПокупателей.ЗаказПоставщику = ЗаказыПоставщикамОстатки.ЗаказПоставщику
			|	И
			|	((РазмещениеЗаказовПокупателей.ТоварТара = &Тара И ЗаказыПоставщикамОстатки.СтатусПартии = &ТараПартия)
			|	 ИЛИ
			|	(РазмещениеЗаказовПокупателей.ТоварТара <> &Тара И ЗаказыПоставщикамОстатки.СтатусПартии <> &ТараПартия))
			|
			|ГДЕ
			|	ЗаказыПоставщикамОстатки.КоличествоОстаток > 0
			|	И
			|	(
			|";
			
			СтрокаУсловий = "";
			
			Для каждого СтрокаТаблицы Из ТемповаяТаблицаПотребности Цикл
			
				Если НЕ ПустаяСтрока(СтрокаУсловий) Тогда
					СтрокаУсловий = СтрокаУсловий + "
					|		ИЛИ
					|";
				КонецЕсли; 
				
				СтрокаУсловий = СтрокаУсловий + "
				|	(ЗаказыПоставщикамОстатки.Номенклатура = &ВыбНоменклатура" + СокрЛП(Строка(ТемповаяТаблицаПотребности.Индекс(СтрокаТаблицы))) +
				" И ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры = &ВыбХарактеристикаНоменклатуры" + СокрЛП(Строка(ТемповаяТаблицаПотребности.Индекс(СтрокаТаблицы))) +
				" И ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления <= &ВыбДата" + СокрЛП(Строка(ТемповаяТаблицаПотребности.Индекс(СтрокаТаблицы))) + ")
				|";
				
				Запрос.УстановитьПараметр("ВыбНоменклатура" + СокрЛП(Строка(ТемповаяТаблицаПотребности.Индекс(СтрокаТаблицы))), СтрокаТаблицы.Номенклатура);
				Запрос.УстановитьПараметр("ВыбХарактеристикаНоменклатуры" + СокрЛП(Строка(ТемповаяТаблицаПотребности.Индекс(СтрокаТаблицы))), СтрокаТаблицы.ХарактеристикаНоменклатуры);
				Запрос.УстановитьПараметр("ВыбДата" + СокрЛП(Строка(ТемповаяТаблицаПотребности.Индекс(СтрокаТаблицы))), СтрокаТаблицы.ДатаПотребности);
			
			КонецЦикла;
			
			Запрос.Текст = Запрос.Текст + СтрокаУсловий;
			
			Если ПустаяСтрока(СтрокаУсловий) Тогда
				Запрос.Текст = Запрос.Текст +"
				|	" + ?(ДатаОкончания <> '00010101000000', " ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления <= &ДатаОкончания", "") + ")";
			Иначе
				Запрос.Текст = Запрос.Текст + "
				|	" + ?(ДатаОкончания <> '00010101000000', " ИЛИ ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления <= &ДатаОкончания", "") + ")";
			КонецЕсли; 
			
			Запрос.Текст = Запрос.Текст + "
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаказыПоставщикамОстатки.ДоговорКонтрагента,
			|	ЗаказыПоставщикамОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Дата,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Номер,
			|	ЗаказыПоставщикамОстатки.Номенклатура,
			|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Контрагент,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику,
			|	ВЫБОР КОГДА ЗаказыПоставщикамОстатки.СтатусПартии = &ТараПартия ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ,
			|	ВЫБОР КОГДА РазмещениеЗаказовПокупателей.ЗаказПокупателя ЕСТЬ NULL ТОГДА Неопределено ИНАЧЕ РазмещениеЗаказовПокупателей.ЗаказПокупателя КОНЕЦ
			|
			|";
			
			ТемповаяТаблицаНоменклатурыЗаказов = Запрос.Выполнить().Выгрузить();
			
			Если ТаблицаРезультатаЗапроса = Неопределено Тогда
				ТаблицаРезультатаЗапроса = ТемповаяТаблицаНоменклатурыЗаказов.Скопировать();
			Иначе
				Для каждого СтрокаТаблицы Из ТемповаяТаблицаНоменклатурыЗаказов Цикл
					НоваяСтрока = ТаблицаРезультатаЗапроса.Добавить();
					Для каждого Колонка Из ТемповаяТаблицаНоменклатурыЗаказов.Колонки Цикл
						НоваяСтрока[Колонка.Имя] = СтрокаТаблицы[Колонка.Имя];
					КонецЦикла; 
				КонецЦикла; 
			КонецЕсли; 
			
		КонецЦикла;
		
		Если ТемповаяТаблицаНоменклатурыЗаказов = Неопределено Тогда
			ТаблицаНоменклатурыОбъектов = Новый ТаблицаЗначений;
			ТаблицаНоменклатурыОбъектов.Колонки.Добавить("ДоговорКонтрагентаЗаказа"       , Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
			ТаблицаНоменклатурыОбъектов.Колонки.Добавить("ВалютаВзаиморасчетовДоговораЗаказа", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
			ТаблицаНоменклатурыОбъектов.Колонки.Добавить("ДатаЗаказа"                        , Новый ОписаниеТипов("Дата"));
			ТаблицаНоменклатурыОбъектов.Колонки.Добавить("НомерЗаказа"                       , Новый ОписаниеТипов("Строка"));
			ТаблицаНоменклатурыОбъектов.Колонки.Добавить("Номенклатура"                      , Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			ТаблицаНоменклатурыОбъектов.Колонки.Добавить("ХарактеристикаНоменклатуры"        , Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
			ТаблицаНоменклатурыОбъектов.Колонки.Добавить("Контрагент"                        , Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
			ТаблицаНоменклатурыОбъектов.Колонки.Добавить("ДатаПоступленияЗаказа"             , Новый ОписаниеТипов("Дата"));
			ТаблицаНоменклатурыОбъектов.Колонки.Добавить("ЗаказПоставщику"                   , Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику"));
			ТаблицаНоменклатурыОбъектов.Колонки.Добавить("Тара"                              , Новый ОписаниеТипов("Булево"));
			ТаблицаНоменклатурыОбъектов.Колонки.Добавить("ЗаказПокупателя"                   , Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
			ТаблицаНоменклатурыОбъектов.Колонки.Добавить("КоличествоОстатокЗаказа"           , Новый ОписаниеТипов("Число"));
			ТаблицаНоменклатурыОбъектов.Колонки.Добавить("Количество"                        , Новый ОписаниеТипов("Число"));
			ТаблицаНоменклатурыОбъектов.Колонки.Добавить("СуммаВзаиморасчетовЗаказа"         , Новый ОписаниеТипов("Число"));
		Иначе
			ТаблицаНоменклатурыОбъектов = ТемповаяТаблицаНоменклатурыЗаказов.Скопировать();
		КонецЕсли; 
		
	Иначе
		
		// Остатки по заказам поставщикам
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ТекущаяДата"        , КонецДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("ДатаОкончания"      , ?(ДатаОкончания = '00010101000000', ДатаОкончания, КонецДня(ДатаОкончания)));
		Запрос.УстановитьПараметр("Тара"               , Перечисления.ТоварТара.Тара);
		Запрос.УстановитьПараметр("ТараПартия"         , Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
		Запрос.УстановитьПараметр("ТекущийПользователь", глТекущийПользователь);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЗаказыПоставщикамОстатки.ДоговорКонтрагента                      КАК ДоговорКонтрагентаЗаказа,
		|	ЗаказыПоставщикамОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетовДоговораЗаказа,
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Дата                       КАК ДатаЗаказа,
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Номер                      КАК НомерЗаказа,
		|	ЗаказыПоставщикамОстатки.Номенклатура                               КАК Номенклатура,
		|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры                 КАК ХарактеристикаНоменклатуры,
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Контрагент                 КАК Контрагент,
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления            КАК ДатаПоступленияЗаказа,
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику                            КАК ЗаказПоставщику,
		|	ВЫБОР КОГДА ЗаказыПоставщикамОстатки.СтатусПартии = &ТараПартия ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ КАК Тара,
		|	ВЫБОР КОГДА РазмещениеЗаказовПокупателей.ЗаказПокупателя ЕСТЬ NULL ТОГДА Неопределено ИНАЧЕ РазмещениеЗаказовПокупателей.ЗаказПокупателя КОНЕЦ КАК ЗаказПокупателя,
		|	Сумма(ЗаказыПоставщикамОстатки.КоличествоОстаток) КАК КоличествоОстатокЗаказа,
		|	Сумма(ВЫБОР КОГДА РазмещениеЗаказовПокупателей.ЗаказПокупателя ЕСТЬ NULL ТОГДА 0 ИНАЧЕ РазмещениеЗаказовПокупателей.КоличествоОстаток КОНЕЦ) КАК Количество,
		|	Сумма(ЗаказыПоставщикамОстатки.СуммаВзаиморасчетовОстаток)          КАК СуммаВзаиморасчетовЗаказа
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&ТекущаяДата,ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ) КАК ЗаказыПоставщикамОстатки
		|
		|СОЕДИНЕНИЕ
		|	(
		|	ВЫБРАТЬ
		|		Номенклатура.Ссылка КАК Номенклатура
		|	ИЗ
		|		Справочник.Номенклатура КАК Номенклатура
		|	ГДЕ
		|		Номенклатура.ОтветственныйМенеджерЗаПокупки = &ТекущийПользователь
		|		И
		|		Номенклатура.ЭтоГруппа = Ложь
		|	) КАК НоменклатураПользователя
		|ПО
		|	НоменклатураПользователя.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ТекущаяДата) КАК РазмещениеЗаказовПокупателей
		|ПО
		|	РазмещениеЗаказовПокупателей.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура
		|	И
		|	РазмещениеЗаказовПокупателей.ХарактеристикаНоменклатуры = ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры
		|	И
		|	РазмещениеЗаказовПокупателей.ЗаказПоставщику = ЗаказыПоставщикамОстатки.ЗаказПоставщику
		|	И
		|	((РазмещениеЗаказовПокупателей.ТоварТара = &Тара И ЗаказыПоставщикамОстатки.СтатусПартии = &ТараПартия)
		|	 ИЛИ
		|	(РазмещениеЗаказовПокупателей.ТоварТара <> &Тара И ЗаказыПоставщикамОстатки.СтатусПартии <> &ТараПартия))
		|
		|ГДЕ
		|	ЗаказыПоставщикамОстатки.КоличествоОстаток > 0
		|	" + ?(ДатаОкончания <> '00010101000000', " И ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления <= &ДатаОкончания", "") + "
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыПоставщикамОстатки.ДоговорКонтрагента,
		|	ЗаказыПоставщикамОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Дата,
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Номер,
		|	ЗаказыПоставщикамОстатки.Номенклатура,
		|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры,
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Контрагент,
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления,
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику,
		|	ВЫБОР КОГДА ЗаказыПоставщикамОстатки.СтатусПартии = &ТараПартия ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ,
		|	ВЫБОР КОГДА РазмещениеЗаказовПокупателей.ЗаказПокупателя ЕСТЬ NULL ТОГДА Неопределено ИНАЧЕ РазмещениеЗаказовПокупателей.ЗаказПокупателя КОНЕЦ
		|
		|";
		
		ТаблицаНоменклатурыОбъектов = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли; 
	
	Для каждого СтрокаТаблицы Из ТаблицаНоменклатурыОбъектов Цикл
		
		ИмеющиесяРазмещения = 0;
		СтрокиРазмещений = ТаблицаНоменклатурыОбъектов.НайтиСтроки(Новый Структура("ЗаказПоставщику, Номенклатура, ХарактеристикаНоменклатуры, Тара", СтрокаТаблицы.ЗаказПоставщику, СтрокаТаблицы.Номенклатура, СтрокаТаблицы.ХарактеристикаНоменклатуры, СтрокаТаблицы.Тара));
		Для каждого СтрокаРазмещений Из СтрокиРазмещений Цикл
			ИмеющиесяРазмещения = ИмеющиесяРазмещения + СтрокаРазмещений.Количество;
		КонецЦикла;
		
		Если ИмеющиесяРазмещения <> СтрокаТаблицы.КоличествоОстатокЗаказа Тогда
			Если СтрокаТаблицы.Количество = 0 Тогда
				СтрокаТаблицы.Количество = СтрокаТаблицы.КоличествоОстатокЗаказа - ИмеющиесяРазмещения;
			Иначе
				Если ТаблицаНоменклатурыОбъектов.Индекс(СтрокаТаблицы) = ТаблицаНоменклатурыОбъектов.Количество() - 1 Тогда
					НоваяСтрока = ТаблицаНоменклатурыОбъектов.Добавить();
				Иначе
					НоваяСтрока = ТаблицаНоменклатурыОбъектов.Вставить(ТаблицаНоменклатурыОбъектов.Индекс(СтрокаТаблицы) + 1);
				КонецЕсли; 
				НоваяСтрока.ДоговорКонтрагентаЗаказа        = СтрокаТаблицы.ДоговорКонтрагентаЗаказа;
				НоваяСтрока.ВалютаВзаиморасчетовДоговораЗаказа = СтрокаТаблицы.ВалютаВзаиморасчетовДоговораЗаказа;
				НоваяСтрока.Тара                               = СтрокаТаблицы.Тара;
				НоваяСтрока.ДатаЗаказа                         = СтрокаТаблицы.ДатаЗаказа;
				НоваяСтрока.НомерЗаказа                        = СтрокаТаблицы.НомерЗаказа;
				НоваяСтрока.Номенклатура                       = СтрокаТаблицы.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры         = СтрокаТаблицы.ХарактеристикаНоменклатуры;
				НоваяСтрока.Контрагент                         = СтрокаТаблицы.Контрагент;
				НоваяСтрока.ДатаПоступленияЗаказа              = СтрокаТаблицы.ДатаПоступленияЗаказа;
				НоваяСтрока.ЗаказПоставщику                    = СтрокаТаблицы.ЗаказПоставщику;
				НоваяСтрока.ЗаказПокупателя                    = Неопределено;
				НоваяСтрока.КоличествоОстатокЗаказа            = СтрокаТаблицы.КоличествоОстатокЗаказа;
				НоваяСтрока.Количество                         = СтрокаТаблицы.КоличествоОстатокЗаказа - ИмеющиесяРазмещения;
				НоваяСтрока.СуммаВзаиморасчетовЗаказа          = СтрокаТаблицы.СуммаВзаиморасчетовЗаказа;
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЦикла; 
	
	ТаблицаНоменклатурыОбъектов.Колонки.Добавить("ИДОбъекта", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
	ТаблицаНоменклатурыОбъектов.Колонки.Добавить("КоличествоОстатка", ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаНоменклатурыОбъектов.Колонки.Добавить("ЦенаВзаиморасчетовЗаказа", ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаНоменклатурыОбъектов.Колонки.Добавить("КурсВзаиморасчетовЗаказа", ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаНоменклатурыОбъектов.Колонки.Добавить("КратностьВзаиморасчетовЗаказа", ПолучитьОписаниеТиповЧисла(15,3));
	
	Для каждого СтрокаТаблицы Из ТаблицаНоменклатурыОбъектов Цикл
		СтрокаТаблицы.ЦенаВзаиморасчетовЗаказа      = ?(СтрокаТаблицы.Количество = 0, 0, (СтрокаТаблицы.СуммаВзаиморасчетовЗаказа / СтрокаТаблицы.Количество));
		СтрокаТаблицы.КурсВзаиморасчетовЗаказа      = СтрокаТаблицы.ЗаказПоставщику.КурсВзаиморасчетов;
		СтрокаТаблицы.КратностьВзаиморасчетовЗаказа = СтрокаТаблицы.ЗаказПоставщику.КратностьВзаиморасчетов;
	КонецЦикла; 
	
	ТаблицаОбъектов.Очистить();
	
	ТаблицаЗаказовКопия = ТаблицаНоменклатурыОбъектов.Скопировать();
	ТаблицаЗаказовКопия.Свернуть("ЗаказПоставщику");
	
	мФормаИндикации.КомментарийОбработкиДанных = "Обрабатывается таблица запроса ...";
	мФормаИндикации.МаксимальноеЗначение = ТаблицаЗаказовКопия.Количество() - 1;
	
	Для каждого СтрокаЗаказа Из ТаблицаЗаказовКопия Цикл
		
		мФормаИндикации.Значение = ТаблицаЗаказовКопия.Индекс(СтрокаЗаказа);
		
		Если ТипЗнч(СтрокаЗаказа.ЗаказПоставщику) = Тип("ДокументСсылка.ЗаказПоставщику") И НЕ СтрокаЗаказа.ЗаказПоставщику.Пустая() Тогда
			
			ОбъектЗаказа = СтрокаЗаказа.ЗаказПоставщику.ПолучитьОбъект();
			ИДОбъекта = СокрЛП(Строка(Новый УникальныйИдентификатор()));
			НоваяСтрокаОбъекта = ТаблицаОбъектов.Добавить();
			НоваяСтрокаОбъекта.ИДОбъекта = ИДОбъекта;
			НоваяСтрокаОбъекта.Объект    = ОбъектЗаказа;
			Попытка
				НоваяСтрокаОбъекта.Объект.Заблокировать();
			Исключение

			КонецПопытки;
			
			СтрокиТаблицыЗаказов = ТаблицаНоменклатурыОбъектов.НайтиСтроки(Новый Структура("ЗаказПоставщику", СтрокаЗаказа.ЗаказПоставщику));
			Для каждого Строка Из СтрокиТаблицыЗаказов Цикл
				Строка.ИДОбъекта = ИДОбъекта;
			КонецЦикла; 
		
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

// Процедура заполняет значениями поле КоличествоОстатка для строк таблицы значений ТаблицаНоменклатурыОбъектов
//
Процедура ПерезаполнитьОстаткиВТаблицеНоменклатурыОбъектов()

	Для каждого СтрокаТаблицы Из ТаблицаНоменклатурыОбъектов Цикл
		СтрокаТаблицы.КоличествоОстатка = СтрокаТаблицы.Количество;
	КонецЦикла; 

КонецПроцедуры

// Процедура заполняет строки дерева занчений в режиме ПорядокОтображенияДерева = ложь (Номенклатура-Контрагент)
// для строк уровней Контрагент, заказ поставщику
//
// Параметры
//  СтрокаТЧ                               - СтрокаТаблицыЗначений ТаблицаПотребности
//  СтрокаДатаПотребности                  - строка дерева значений, уровня даты потребности
//  ЗаказанноеКоличествоНоменклатура       - число, переменная где накапливается заказанное количество номенклатуры
//  ЗаказанноеКоличествоДатаПотребности    - число, переменная где накапливается заказанное количество на дату потребности
//  ЗаказаннаяСуммаУпрУчетаНоменклатура    - число, переменная где накапливается заказанная сумма номенклатуры в валюте упр.учета
//  ЗаказаннаяСуммаУпрУчетаДатаПотребности - число, переменная где накапливается заказанная сумма в валюте упр.учета не дату потребности
//
//  Возвращаемое значение
//   НЕТ
//
Процедура ЗаполнитьСтрокиКонтрагентЗаказ(СтрокаТЧ, СтрокаДатаПотребности, ЗаказанноеКоличествоНоменклатура,
				                         ЗаказанноеКоличествоДатаПотребности, ЗаказаннаяСуммаУпрУчетаНоменклатура, ЗаказаннаяСуммаУпрУчетаДатаПотребности);

	СтрокаКонтрагента = Неопределено;
	ЗаказанноеКоличествоКонтрагент = 0;
	ЗаказаннаяСуммаУпрУчетаКонтрагент = 0;
	НеобходимоеКоличество = СтрокаТЧ.КоличествоПлана;
	ПоследнийКонтрагент = Неопределено;
	СтрокиНоменкладтурыОбъектов = ТаблицаНоменклатурыОбъектов.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СтрокаТЧ.Номенклатура, СтрокаТЧ.ХарактеристикаНоменклатуры));
	
	Для каждого СтрокаНоменклатурыОбъектов Из СтрокиНоменкладтурыОбъектов Цикл
		
		Если СтрокаНоменклатурыОбъектов.ДатаПоступленияЗаказа > СтрокаТЧ.ДатаПотребности ИЛИ СтрокаНоменклатурыОбъектов.КоличествоОстатка = 0 ИЛИ НеобходимоеКоличество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаНоменклатурыОбъектов.Контрагент <> ПоследнийКонтрагент Тогда
			
			Если СтрокаКонтрагента <> Неопределено Тогда
				Если СтрокаКонтрагента.Строки.Количество() = 0 Тогда
					СтрокаКонтрагента.Родитель.Строки.Удалить(СтрокаКонтрагента);
				Иначе
					СтрокаКонтрагента.ЗаказанноеКоличество = ЗаказанноеКоличествоКонтрагент;
					СтрокаКонтрагента.СуммаУпрУчета        = ЗаказаннаяСуммаУпрУчетаКонтрагент;
				КонецЕсли; 
			КонецЕсли; 
			
			СтрокаКонтрагента = СтрокаДатаПотребности.Строки.Добавить();
			СтрокаКонтрагента.НоменклатураКонтрагентЗаказ = СтрокаНоменклатурыОбъектов.Контрагент;
			ПоследнийКонтрагент = СтрокаНоменклатурыОбъектов.Контрагент;
			ЗаказанноеКоличествоКонтрагент    = 0;
			ЗаказаннаяСуммаУпрУчетаКонтрагент = 0;
			
		КонецЕсли; 
		
		КоличествоЗаказа = 0;
		Если НеобходимоеКоличество >= СтрокаНоменклатурыОбъектов.КоличествоОстатка Тогда
			КоличествоЗаказа = СтрокаНоменклатурыОбъектов.КоличествоОстатка;
			НеобходимоеКоличество = НеобходимоеКоличество - СтрокаНоменклатурыОбъектов.КоличествоОстатка;
			СтрокаНоменклатурыОбъектов.КоличествоОстатка = 0;
		Иначе
			ПоследнийКонтрагент = Неопределено;
			КоличествоЗаказа = НеобходимоеКоличество;
			СтрокаНоменклатурыОбъектов.КоличествоОстатка = СтрокаНоменклатурыОбъектов.КоличествоОстатка - НеобходимоеКоличество;
			НеобходимоеКоличество = 0;
		КонецЕсли;
		
		ЗаказанноеКоличествоКонтрагент = ЗаказанноеКоличествоКонтрагент + КоличествоЗаказа;
		СтрокаЗаказа = СтрокаКонтрагента.Строки.Добавить();
		
		СтрокаЗаказа.НоменклатураКонтрагентЗаказ            = "Заказ № " + СокрЛП(СтрокаНоменклатурыОбъектов.НомерЗаказа) + " от " + СокрЛП(Формат(СтрокаНоменклатурыОбъектов.ДатаЗаказа, "ДФ=dd.MM.yyyy")) + " (" + ?(СтрокаНоменклатурыОбъектов.ДатаПоступленияЗаказа = '00010101000000', "не указана", СокрЛП(Формат(СтрокаНоменклатурыОбъектов.ДатаПоступленияЗаказа, "ДФ=dd.MM.yyyy"))) + ")";
		СтрокаЗаказа.Заказ                                  = СтрокаНоменклатурыОбъектов.ЗаказПоставщику;
		СтрокаЗаказа.ИДОбъекта                              = СтрокаНоменклатурыОбъектов.ИДОбъекта;
		СтрокаЗаказа.ЗаказанноеКоличество                   = КоличествоЗаказа;
		СтрокаЗаказа.СуммаВзаиморасчетовЗаказа              = СтрокаНоменклатурыОбъектов.ЦенаВзаиморасчетовЗаказа * КоличествоЗаказа;
		СтрокаЗаказа.СуммаВзаиморасчетовЗаказаПредставление = ФорматСумм(СтрокаЗаказа.СуммаВзаиморасчетовЗаказа, СтрокаНоменклатурыОбъектов.ДоговорКонтрагентаЗаказа.ВалютаВзаиморасчетов, , " ");
		
		СтруктураКурсаУпрУчета = ПолучитьКурсВалюты(Константы.ВалютаУправленческогоУчета.Получить(), ДатаОкончания);
		КурсУпрУчета           = СтруктураКурсаУпрУчета.Курс;
		КратностьУпрУчета      = СтруктураКурсаУпрУчета.Кратность;

		СтрокаЗаказа.СуммаУпрУчета                          = ПересчитатьИзВалютыВВалюту(СтрокаЗаказа.СуммаВзаиморасчетовЗаказа, СтрокаНоменклатурыОбъектов.ВалютаВзаиморасчетовДоговораЗаказа, Константы.ВалютаУправленческогоУчета.Получить(),
															  СтрокаНоменклатурыОбъектов.КурсВзаиморасчетовЗаказа, КурсУпрУчета, СтрокаНоменклатурыОбъектов.КратностьВзаиморасчетовЗаказа, КратностьУпрУчета);
		СтрокаЗаказа.ЦенаУпрУчета                           = ПересчитатьИзВалютыВВалюту(СтрокаНоменклатурыОбъектов.ЦенаВзаиморасчетовЗаказа, СтрокаНоменклатурыОбъектов.ВалютаВзаиморасчетовДоговораЗаказа, Константы.ВалютаУправленческогоУчета.Получить(),
															  СтрокаНоменклатурыОбъектов.КурсВзаиморасчетовЗаказа, КурсУпрУчета, СтрокаНоменклатурыОбъектов.КратностьВзаиморасчетовЗаказа, КратностьУпрУчета);
		
		ЗаказанноеКоличествоНоменклатура       = ЗаказанноеКоличествоНоменклатура + КоличествоЗаказа;
		ЗаказанноеКоличествоДатаПотребности    = ЗаказанноеКоличествоДатаПотребности + КоличествоЗаказа;
		
		ЗаказаннаяСуммаУпрУчетаНоменклатура    = ЗаказаннаяСуммаУпрУчетаНоменклатура + СтрокаЗаказа.СуммаУпрУчета;
		ЗаказаннаяСуммаУпрУчетаКонтрагент      = ЗаказаннаяСуммаУпрУчетаКонтрагент + СтрокаЗаказа.СуммаУпрУчета;
		ЗаказаннаяСуммаУпрУчетаДатаПотребности = ЗаказаннаяСуммаУпрУчетаДатаПотребности + СтрокаЗаказа.СуммаУпрУчета;;
		
	КонецЦикла; 

	Если СтрокаКонтрагента <> Неопределено Тогда
		Если СтрокаКонтрагента.Строки.Количество() = 0 Тогда
			СтрокаКонтрагента.Родитель.Строки.Удалить(СтрокаКонтрагента);
		Иначе
			СтрокаКонтрагента.ЗаказанноеКоличество = ЗаказанноеКоличествоКонтрагент;
			СтрокаКонтрагента.СуммаУпрУчета        = ЗаказаннаяСуммаУпрУчетаКонтрагент;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Процедура заполняет поля дерева значений для строки с заказом поставщику
//
// Параметры
//  СтрокаТекущегоУровняДереваПодбора - СтрокаДереваЗначений, для строк которой будем заполнять данные
//  Заказ                             - ДокументОбъект, откуда будем брать данные для заполнения
//
// Возвращаемые значения
//  НЕТ
Процедура ПроставитьСуммыЗаказа(СтрокаТекущегоУровняДереваПодбора, Заказ)

	// Найдем номенклатуру, по которой нужно рассчитыать суммы, она находится на более верхних уровнях
	НайденнаяНоменклатура = Неопределено;
	НайденнаяХарактеристикаНоменклатуры = Неопределено;
	Тара = Ложь;
	Уровень = СтрокаТекущегоУровняДереваПодбора.Уровень();
	СтрокаТекущегоУровня = СтрокаТекущегоУровняДереваПодбора;
	Пока Уровень >= 0 Цикл
		СтрокаТекущегоУровня = СтрокаТекущегоУровня.Родитель;
		Если НЕ ЗначениеНеЗаполнено(СтрокаТекущегоУровня.Номенклатура) Тогда
			НайденнаяНоменклатура = СтрокаТекущегоУровня.Номенклатура;
			НайденнаяХарактеристикаНоменклатуры = СтрокаТекущегоУровня.ХарактеристикаНоменклатуры;
			Тара = СтрокаТекущегоУровня.Тара;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если НайденнаяНоменклатура = Неопределено ИЛИ НайденнаяХарактеристикаНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИтогоСумма = 0;
	ИтогоКоличество = 0;
	Если НЕ Тара Тогда
		СтрокиТЧ = Заказ.Товары.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", НайденнаяНоменклатура, НайденнаяХарактеристикаНоменклатуры));
		Для каждого СтрокаТЧ Из СтрокиТЧ Цикл
			Если Заказ.УчитыватьНДС И НЕ Заказ.СуммаВключаетНДС Тогда
				ИтогоСумма = ИтогоСумма + СтрокаТЧ.Сумма + СтрокаТЧ.СуммаНДС;
			Иначе
				ИтогоСумма = ИтогоСумма + СтрокаТЧ.Сумма;
			КонецЕсли; 
			ИтогоКоличество = ИтогоКоличество + СтрокаТЧ.Количество;
		КонецЦикла;
	Иначе
		СтрокиТЧ = Заказ.ВозвратнаяТара.НайтиСтроки(Новый Структура("Номенклатура", НайденнаяНоменклатура));
		Для каждого СтрокаТЧ Из СтрокиТЧ Цикл
			ИтогоСумма      = ИтогоСумма + СтрокаТЧ.Сумма;
			ИтогоКоличество = ИтогоКоличество + СтрокаТЧ.Количество;
		КонецЦикла;
	КонецЕсли; 
	
	СтруктураКурсаУпрУчета = ПолучитьКурсВалюты(Константы.ВалютаУправленческогоУчета.Получить(), ДатаОкончания);
	КурсУпрУчета           = СтруктураКурсаУпрУчета.Курс;
	КратностьУпрУчета      = СтруктураКурсаУпрУчета.Кратность;

	// Рассчитаем сумму документа в валюте упр.учета
	Если Заказ.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
		// Значит в валюте взаиморасчетов
		ИтогоСуммаУпрУчета                  = ПересчитатьИзВалютыВВалюту(ИтогоСумма, Заказ.ДоговорКонтрагента.ВалютаВзаиморасчетов, Константы.ВалютаУправленческогоУчета.Получить(),
											  Заказ.КурсВзаиморасчетов, КурсУпрУчета, Заказ.КратностьВзаиморасчетов, КратностьУпрУчета);
		ИтогоСуммаВзаиморасчетов            = ИтогоСумма;
	Иначе
		// Значит в валюте регл.учета
		ИтогоСуммаУпрУчета                  = ПересчитатьИзВалютыВВалюту(ИтогоСумма, мВалютаРегламентированногоУчета, Константы.ВалютаУправленческогоУчета.Получить(),
											  1, КурсУпрУчета, 1, КратностьУпрУчета);
		ИтогоСуммаВзаиморасчетов            = ПересчитатьИзВалютыВВалюту(ИтогоСумма, мВалютаРегламентированногоУчета, Константы.ВалютаУправленческогоУчета.Получить(),
											  1, Заказ.КурсВзаиморасчетов, 1, Заказ.КратностьВзаиморасчетов);
	КонецЕсли; 
	
	Если ИтогоКоличество > 0 Тогда
		ЦенаУпрУчета = ИтогоСуммаУпрУчета / ИтогоКоличество;
		ЦенаВзаиморасчетов = ИтогоСуммаВзаиморасчетов / ИтогоКоличество;
	Иначе
		ЦенаУпрУчета = 0;
		ЦенаВзаиморасчетов = 0;
	КонецЕсли;
	
	СтрокаТекущегоУровняДереваПодбора.ЦенаУпрУчета  = ЦенаУпрУчета;
	СтрокаТекущегоУровняДереваПодбора.СуммаУпрУчета = ЦенаУпрУчета * СтрокаТекущегоУровняДереваПодбора.ЗаказанноеКоличество;
	СтрокаТекущегоУровняДереваПодбора.СуммаВзаиморасчетовЗаказа = ЦенаВзаиморасчетов * СтрокаТекущегоУровняДереваПодбора.ЗаказанноеКоличество;
	СтрокаТекущегоУровняДереваПодбора.СуммаВзаиморасчетовЗаказаПредставление = ФорматСумм(СтрокаТекущегоУровняДереваПодбора.СуммаВзаиморасчетовЗаказа, Заказ.ДоговорКонтрагента.ВалютаВзаиморасчетов, , " ")

КонецПроцедуры

// Процедура заполняет дерево значений для визуального представления данных
//
// Параметры
//  СтрокаПрошлогоУровняДереваПодбора - СтрокаДереваЗначений, для строк которой будем заполнять данные
//  СтрокаПрошлогоУровня              - СтрокаДереваЗначений, прошлого уровня дерева, из которого берем данные
//  Группировки                       - ТаблицаЗначений, имена группировок
//  ТаблицаНокопленияСуммЗаказов      - ТаблицаЗначений, где накапливаются суммы заказов в валюте упр учета
//
// Возвращаемые значения
//  НЕТ
Процедура ЗаполнитьСтрокиДерева(СтрокаПрошлогоУровняДереваПодбора, СтрокаПрошлогоУровня, Группировки, ТаблицаНокопленияСуммЗаказов, ТекущееЗначениеПрогрессора = 0)
	
	Для каждого СтрокаТекущегоУровня Из СтрокаПрошлогоУровня.Строки Цикл
		
		Если СтрокаТекущегоУровня.Уровень() = 0 Тогда
			ТекущееЗначениеПрогрессора = СтрокаПрошлогоУровня.Строки.Индекс(СтрокаТекущегоУровня) + 1;
		КонецЕсли; 
		
		СтрокаТекущегоУровняДереваПодбора = СтрокаПрошлогоУровняДереваПодбора.Строки.Добавить();
		
		ИндексГруппировки = СтрокаТекущегоУровня.Уровень();
		
		ИмяГруппировки = Группировки[ИндексГруппировки].Имя;
		
		Если ИмяГруппировки = "ИДОбъекта" Тогда
			ЗначениеГруппировки = СтрокаТекущегоУровня.ИДОбъекта;
		Иначе
			ЗначениеГруппировки = СтрокаТекущегоУровня.ЗначениеГруппировки;
		КонецЕсли; 
		
		СтрокаТекущегоУровняДереваПодбора.НеобходимоеКоличество = СтрокаТекущегоУровня.КоличествоПлана;
		СтрокаТекущегоУровняДереваПодбора.ЗаказанноеКоличество = СтрокаТекущегоУровня.КоличествоФакта;
		
		СтрокаГруппировки = "";
		Если ТипЗнч(ЗначениеГруппировки) = Тип("Дата") Тогда
			Если ЗначениеГруппировки = '00010101000000' Тогда
				СтрокаТекущегоУровняДереваПодбора.НоменклатураКонтрагентЗаказ = "Не заявлено в плане потребности";
			Иначе
				СтрокаТекущегоУровняДереваПодбора.НоменклатураКонтрагентЗаказ = ЗначениеГруппировки;
			КонецЕсли;
		ИначеЕсли ИмяГруппировки = "ИДОбъекта" Тогда
			СтрокаЗаказа = ТаблицаНоменклатурыОбъектов.Найти(ЗначениеГруппировки, "ИДОбъекта");
			Если СтрокаЗаказа <> Неопределено Тогда
				СтрокаТекущегоУровняДереваПодбора.ИДОбъекта = СтрокаЗаказа.ИДОбъекта;
				СтрокаТекущегоУровняДереваПодбора.Заказ     = СтрокаЗаказа.ЗаказПоставщику;
			КонецЕсли; 
			СтрокаОбъекта = ТаблицаОбъектов.Найти(СтрокаТекущегоУровняДереваПодбора.ИДОбъекта, "ИДОбъекта");
			Если СтрокаОбъекта <> Неопределено Тогда
				ЗаказОбъект = СтрокаОбъекта.Объект;
				СтрокаТекущегоУровняДереваПодбора.НоменклатураКонтрагентЗаказ = "Заказ поставщику №" + Строка(ЗаказОбъект.Номер) + " от " + Формат(ЗаказОбъект.Дата, "ДФ=dd.MM.yyyy") + " (поставка: " + ?(ЗаказОбъект.ДатаПоступления = '00010101000000', "не указана", Формат(ЗаказОбъект.ДатаПоступления, "ДФ=dd.MM.yyyy")) + ")";
				ПроставитьСуммыЗаказа(СтрокаТекущегоУровняДереваПодбора, ЗаказОбъект);
			Иначе
				СтрокаПрошлогоУровняДереваПодбора.Строки.Удалить(СтрокаТекущегоУровняДереваПодбора);
			КонецЕсли;
			Если ПорядокОтображенияДерева Тогда
			
				НоваяСтрока = ТаблицаНокопленияСуммЗаказов.Добавить();
				НоваяСтрока.Номенклатура = СтрокаТекущегоУровняДереваПодбора.Родитель.Родитель.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТекущегоУровняДереваПодбора.Родитель.Родитель.ХарактеристикаНоменклатуры;
				Если ТипЗнч(СтрокаТекущегоУровняДереваПодбора.Родитель.НоменклатураКонтрагентЗаказ) = Тип("Строка") Тогда
					НоваяСтрока.ДатаПотребности = '00010101000000';
				Иначе
					НоваяСтрока.ДатаПотребности = СтрокаТекущегоУровняДереваПодбора.Родитель.НоменклатураКонтрагентЗаказ;
				КонецЕсли; 
				НоваяСтрока.Сумма = СтрокаТекущегоУровняДереваПодбора.СуммаУпрУчета;
			
			КонецЕсли; 
		ИначеЕсли ТипЗнч(ЗначениеГруппировки) = Тип("СправочникСсылка.Номенклатура") Тогда
			СтрокаГруппировки = Строка(ЗначениеГруппировки);
			Если СтрокаТекущегоУровня.ХарактеристикаНоменклатуры.Пустая() Тогда
				Если ЗначениеГруппировки.ВестиУчетПоХарактеристикам Тогда
					СтрокаГруппировки = СтрокаГруппировки + " (характеристика не указана)";
				КонецЕсли; 
			Иначе
				СтрокаГруппировки = СтрокаГруппировки + " (" + Строка(СтрокаТекущегоУровня.ХарактеристикаНоменклатуры) + ")";
			КонецЕсли;
			Если СтрокаТекущегоУровня.Тара = Истина Тогда
				СтрокаГруппировки = СтрокаГруппировки + ", ТАРА";
			КонецЕсли; 
			СтрокаТекущегоУровняДереваПодбора.НоменклатураКонтрагентЗаказ = СтрокаГруппировки;
			СтрокаТекущегоУровняДереваПодбора.Номенклатура                = ЗначениеГруппировки;
			СтрокаТекущегоУровняДереваПодбора.ХарактеристикаНоменклатуры  = СтрокаТекущегоУровня.ХарактеристикаНоменклатуры;
			СтрокаТекущегоУровняДереваПодбора.Тара                        = СтрокаТекущегоУровня.Тара;
		Иначе
			СтрокаТекущегоУровняДереваПодбора.НоменклатураКонтрагентЗаказ = ЗначениеГруппировки;
		КонецЕсли; 
		
		ЗаполнитьСтрокиДерева(СтрокаТекущегоУровняДереваПодбора, СтрокаТекущегоУровня, Группировки, ТаблицаНокопленияСуммЗаказов);
		
		Если ТипЗнч(СтрокаПрошлогоУровняДереваПодбора) = Тип("СтрокаДереваЗначений") Тогда
			СтрокаПрошлогоУровняДереваПодбора.СуммаУпрУчета = СтрокаПрошлогоУровняДереваПодбора.СуммаУпрУчета + СтрокаТекущегоУровняДереваПодбора.СуммаУпрУчета;
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

// Процедура заполняет дерево значений для визуального представления данных
//
// Параметры
//  ДеревоПодбора          - ДеревоЗначений, которое необходимо заполнить данными
//  ДеревоПодбораНаФорме   - ТабличноеПоле, элемент управления для дерева значений
//  УровеньРазворотаДерева - Число, уровень строк дерева значений, до которого необходимо
//                           развернуть строки после заполнения
//
// Возвращаемые значения
//  НЕТ
Процедура ПересортироватьТабличнуюЧастьИЗаполнитьДерево(ДеревоПодбора, ДеревоПодбораНаФорме = Неопределено, УровеньРазворотаДерева = 0) Экспорт
	
	ПерезаполнитьОстаткиВТаблицеНоменклатурыОбъектов();
	
	Если ДеревоПодбораНаФорме <> Неопределено Тогда
		
		МассивСтарыхЗначений = Новый Массив;
		Если ДеревоПодбораНаФорме.ТекущиеДанные <> Неопределено Тогда
			Если ДеревоПодбораНаФорме.ТекущиеДанные.Уровень() = 0 Тогда
				МассивСтарыхЗначений.Добавить(ДеревоПодбораНаФорме.ТекущиеДанные.НоменклатураКонтрагентЗаказ);
				МассивСтарыхЗначений.Добавить(Неопределено);
				МассивСтарыхЗначений.Добавить(Неопределено);
				МассивСтарыхЗначений.Добавить(Неопределено);
				МассивСтарыхЗначений.Добавить(0);
			ИначеЕсли ДеревоПодбораНаФорме.ТекущиеДанные.Уровень() = 1 Тогда
				МассивСтарыхЗначений.Добавить(ДеревоПодбораНаФорме.ТекущиеДанные.Родитель.НоменклатураКонтрагентЗаказ);
				МассивСтарыхЗначений.Добавить(ДеревоПодбораНаФорме.ТекущиеДанные.НоменклатураКонтрагентЗаказ);
				МассивСтарыхЗначений.Добавить(Неопределено);
				МассивСтарыхЗначений.Добавить(Неопределено);
				МассивСтарыхЗначений.Добавить(1);
			ИначеЕсли ДеревоПодбораНаФорме.ТекущиеДанные.Уровень() = 2 Тогда
				МассивСтарыхЗначений.Добавить(ДеревоПодбораНаФорме.ТекущиеДанные.Родитель.Родитель.НоменклатураКонтрагентЗаказ);
				МассивСтарыхЗначений.Добавить(ДеревоПодбораНаФорме.ТекущиеДанные.Родитель.НоменклатураКонтрагентЗаказ);
				МассивСтарыхЗначений.Добавить(ДеревоПодбораНаФорме.ТекущиеДанные.НоменклатураКонтрагентЗаказ);
				МассивСтарыхЗначений.Добавить(Неопределено);
				МассивСтарыхЗначений.Добавить(2);
			ИначеЕсли ДеревоПодбораНаФорме.ТекущиеДанные.Уровень() = 3 Тогда
				МассивСтарыхЗначений.Добавить(ДеревоПодбораНаФорме.ТекущиеДанные.Родитель.Родитель.Родитель.НоменклатураКонтрагентЗаказ);
				МассивСтарыхЗначений.Добавить(ДеревоПодбораНаФорме.ТекущиеДанные.Родитель.Родитель.НоменклатураКонтрагентЗаказ);
				МассивСтарыхЗначений.Добавить(ДеревоПодбораНаФорме.ТекущиеДанные.Родитель.НоменклатураКонтрагентЗаказ);
				МассивСтарыхЗначений.Добавить(ДеревоПодбораНаФорме.ТекущиеДанные.НоменклатураКонтрагентЗаказ);
				МассивСтарыхЗначений.Добавить(3);
			КонецЕсли;
			МассивСтарыхЗначений.Добавить(ДеревоПодбораНаФорме.ТекущаяКолонка.Имя);
		КонецЕсли; 
		
		// Запомним развороты тех строк, которые пользователь делал вручную
		ТаблицаРазворотовСтрок = Новый ТаблицаЗначений;
		ТаблицаРазворотовСтрок.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаРазворотовСтрок.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаРазворотовСтрок.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ТаблицаРазворотовСтрок.Колонки.Добавить("Уровень", ПолучитьОписаниеТиповЧисла(1));
		Если ДеревоПодбора.Строки.Количество() > 0 Тогда
			Если (ТипЗнч(ДеревоПодбора.Строки[0].Номенклатура) = Тип("СправочникСсылка.Номенклатура")
			   И ТипЗнч(ДеревоПодбора.Строки[0].ХарактеристикаНоменклатуры) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры")
			   И НЕ ПорядокОтображенияДерева)
			 ИЛИ (ТипЗнч(ДеревоПодбора.Строки[0].НоменклатураКонтрагентЗаказ) = Тип("СправочникСсылка.Контрагенты")
			   И ПорядокОтображенияДерева) Тогда
			   
				мФормаИндикации.КомментарийОбработкиДанных = "Запоминаются развороты строк ...";
				мФормаИндикации.МаксимальноеЗначение = ДеревоПодбора.Строки.Количество() - 1;
		
				УровеньРазворота = Неопределено;
				Для каждого Строка1 Из ДеревоПодбора.Строки Цикл
					мФормаИндикации.Значение = ДеревоПодбора.Строки.Индекс(Строка1);
					Если ДеревоПодбораНаФорме.Развернут(Строка1) Тогда
						УровеньРазворота = 1;
					Иначе
						Продолжить;
					КонецЕсли;
					Для каждого Строка2 Из Строка1.Строки Цикл
						Если УровеньРазворота = Неопределено Тогда
							Прервать;
						КонецЕсли; 
						Если ДеревоПодбораНаФорме.Развернут(Строка2) Тогда
							УровеньРазворота = 2;
						Иначе
							Продолжить;
						КонецЕсли;
						Для каждого Строка3 Из Строка2.Строки Цикл
							Если УровеньРазворота = Неопределено Тогда
								Прервать;
							КонецЕсли; 
							Если ДеревоПодбораНаФорме.Развернут(Строка3) Тогда
								УровеньРазворота = 3;
							Иначе
								Продолжить;
							КонецЕсли;
						КонецЦикла; 
					КонецЦикла; 
					
					Если УровеньРазворота <> Неопределено Тогда
						НоваяСтрока = ТаблицаРазворотовСтрок.Добавить();
						Если ПорядокОтображенияДерева Тогда
							НоваяСтрока.Контрагент = Строка1.НоменклатураКонтрагентЗаказ;
						Иначе
							НоваяСтрока.Номенклатура = Строка1.Номенклатура;
							НоваяСтрока.ХарактеристикаНоменклатуры = Строка1.ХарактеристикаНоменклатуры;
						КонецЕсли; 
						НоваяСтрока.Уровень = УровеньРазворота;
					КонецЕсли; 
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли; 
	
	КонецЕсли; 
	
	// Заполним дерево подбора
	
	ДеревоПодбора.Строки.Очистить();
	
	Если ДеревоПодбораНаФорме <> Неопределено Тогда
		ДеревоПодбораНаФорме.Колонки.СуммаУпрУчета.ТекстШапки = "Сумма в " + СокрЛП(Константы.ВалютаУправленческогоУчета.Получить().Наименование);
		ДеревоПодбораНаФорме.Колонки.ЦенаУпрУчета.ТекстШапки  = "Цена в "  + СокрЛП(Константы.ВалютаУправленческогоУчета.Получить().Наименование);
	КонецЕсли;

	ПоследнийКонтрагент                 = Неопределено;
	ПоследняяНоменклатура               = Неопределено;
	ПоследняяХарактеристикаНоменклатуры = Неопределено;
	ПоследняяДатаПотребности            = Неопределено;
	СтрокаДатаПотребности               = Неопределено;
	
	Группировки = Новый ТаблицаЗначений;
	Группировки.Колонки.Добавить("Имя");
	
	Если ПорядокОтображенияДерева Тогда
		Если ДеревоПодбораНаФорме <> Неопределено Тогда
			ДеревоПодбораНаФорме.Колонки.НоменклатураКонтрагентЗаказ.ТекстШапки = "Контрагент/Номенклатура/Дата потребности/Заказ";
		КонецЕсли;
		НоваяГруппировка = Группировки.Добавить();
		НоваяГруппировка.Имя = "Поставщик";
		НоваяГруппировка = Группировки.Добавить();
		НоваяГруппировка.Имя = "Номенклатура";
		НоваяГруппировка = Группировки.Добавить();
		НоваяГруппировка.Имя = "ДатаПотребности";
	Иначе
		Если ДеревоПодбораНаФорме <> Неопределено Тогда
			ДеревоПодбораНаФорме.Колонки.НоменклатураКонтрагентЗаказ.ТекстШапки = "Номенклатура/Дата потребности/Контрагент/Заказ";
		КонецЕсли;
		НоваяГруппировка = Группировки.Добавить();
		НоваяГруппировка.Имя = "Номенклатура";
		НоваяГруппировка = Группировки.Добавить();
		НоваяГруппировка.Имя = "ДатаПотребности";
		НоваяГруппировка = Группировки.Добавить();
		НоваяГруппировка.Имя = "Поставщик";
	КонецЕсли;
	НоваяГруппировка = Группировки.Добавить();
	НоваяГруппировка.Имя = "ИДОбъекта";
	
	мФормаИндикации.КомментарийОбработкиДанных = "Анализируется и заполняется дерево ...";
	СтруктураТаблиц = ПолучитьСтруктуруРаспределенныхТаблиц(ТаблицаПотребности, ТаблицаНоменклатурыОбъектов, мФормаИндикации.МаксимальноеЗначение, мФормаИндикации.Значение);
	
	ТемповаяТаблицаПотребности = СтруктураТаблиц.ТаблицаПотребности;
	ТаблицаЗаказовПоставщикам = СтруктураТаблиц.ТаблицаЗаказовПоставщикам;
	
	СтруктураЗначенийГруппировок = Новый Структура;
	Для каждого СтрокаГруппировки Из Группировки Цикл
	
		Если СтрокаГруппировки.Имя = "Поставщик" ИЛИ СтрокаГруппировки.Имя = "ИДОбъекта" Тогда
			КопияИсходнойТаблицы = ТаблицаЗаказовПоставщикам.Скопировать();
		Иначе
			КопияИсходнойТаблицы = ТемповаяТаблицаПотребности.Скопировать();
		КонецЕсли;
		
		Если СтрокаГруппировки.Имя = "Номенклатура" Тогда
			КопияИсходнойТаблицы.Свернуть(СтрокаГруппировки.Имя + ", ХарактеристикаНоменклатуры, Тара");
			СтруктураЗначенийГруппировок.Вставить(СтрокаГруппировки.Имя, КопияИсходнойТаблицы.Скопировать());
		Иначе
			КопияИсходнойТаблицы.Свернуть(СтрокаГруппировки.Имя);
			СтруктураЗначенийГруппировок.Вставить(СтрокаГруппировки.Имя, КопияИсходнойТаблицы.ВыгрузитьКолонку(СтрокаГруппировки.Имя));
		КонецЕсли; 
	
	КонецЦикла; 
	
	Дерево = ПолучитьДеревоРаспределенияПотребностей(ТемповаяТаблицаПотребности.Скопировать(), ТаблицаЗаказовПоставщикам, СтруктураЗначенийГруппировок, Группировки.Скопировать(), Ложь, мФормаИндикации.МаксимальноеЗначение, мФормаИндикации.Значение);
	
	ТаблицаНокопленияСуммЗаказов = Новый ТаблицаЗначений;
	ТаблицаНокопленияСуммЗаказов.Колонки.Добавить("Номенклатура");
	ТаблицаНокопленияСуммЗаказов.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаНокопленияСуммЗаказов.Колонки.Добавить("ДатаПотребности");
	ТаблицаНокопленияСуммЗаказов.Колонки.Добавить("Сумма");
	
	мФормаИндикации.МаксимальноеЗначение = Дерево.Строки.Количество();
	ЗаполнитьСтрокиДерева(ДеревоПодбора, Дерево, Группировки, ТаблицаНокопленияСуммЗаказов, мФормаИндикации.Значение);
	
	// Для режима, когда первым уровнем деревя является Контрагент(поставщик) считать
	// итоги по номенклатуре и датам надо отдельно
	
	Если ПорядокОтображенияДерева Тогда
	
		ТемповаяТаблицаПотребности.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Индекс, ДатаПотребности", "КоличествоПлана");
		ТемповаяТаблицаПотребности.Колонки.Добавить("КоличествоФакта", ПолучитьОписаниеТиповЧисла(15,3));
		Для каждого СтрокаТаблицыПотребности Из ТемповаяТаблицаПотребности Цикл
			ИтогоКоличество = 0;
			СтрокиТаблицыЗаказовПоставщикам = ТаблицаЗаказовПоставщикам.НайтиСтроки(НоВый Структура("Индекс", СтрокаТаблицыПотребности.Индекс));
			Для каждого СтрокаТаблицыЗаказовПоставщикам Из СтрокиТаблицыЗаказовПоставщикам Цикл
				ИтогоКоличество = ИтогоКоличество + СтрокаТаблицыЗаказовПоставщикам.Количество;
			КонецЦикла; 
			СтрокаТаблицыПотребности.КоличествоФакта = ИтогоКоличество;
		КонецЦикла;
		
		ТемповаяТаблицаПотребности.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ДатаПотребности", "КоличествоПлана, КоличествоФакта");
		ТаблицаНокопленияСуммЗаказов.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ДатаПотребности", "Сумма");
		
		ТемповаяТаблицаПотребностиБезДат = ТемповаяТаблицаПотребности.Скопировать();
		ТемповаяТаблицаПотребностиБезДат.Свернуть("Номенклатура, ХарактеристикаНоменклатуры", "КоличествоПлана, КоличествоФакта");
		
		ТаблицаНокопленияСуммЗаказовБезДат = ТаблицаНокопленияСуммЗаказов.Скопировать();
		ТаблицаНокопленияСуммЗаказовБезДат.Свернуть("Номенклатура, ХарактеристикаНоменклатуры", "Сумма");
		
		Для каждого СтрокаКонтрагента Из ДеревоПодбора.Строки Цикл
			Для каждого СтрокаНоменклатуры Из СтрокаКонтрагента.Строки Цикл
			
				СтрокиТемповойТаблицыПотребностиБезДат = ТемповаяТаблицаПотребностиБезДат.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СтрокаНоменклатуры.Номенклатура, СтрокаНоменклатуры.ХарактеристикаНоменклатуры));
				Если СтрокиТемповойТаблицыПотребностиБезДат.Количество() > 0 Тогда
					СтрокаНоменклатуры.НеобходимоеКоличество = СтрокиТемповойТаблицыПотребностиБезДат[0].КоличествоПлана;
					СтрокаНоменклатуры.ЗаказанноеКоличество = СтрокиТемповойТаблицыПотребностиБезДат[0].КоличествоФакта;
				КонецЕсли; 
				
				СтрокиТаблицыНокопленияСуммЗаказовБезДат = ТаблицаНокопленияСуммЗаказовБезДат.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СтрокаНоменклатуры.Номенклатура, СтрокаНоменклатуры.ХарактеристикаНоменклатуры));
				Если СтрокиТаблицыНокопленияСуммЗаказовБезДат.Количество() > 0 Тогда
					СтрокаНоменклатуры.СуммаУпрУчета = СтрокиТаблицыНокопленияСуммЗаказовБезДат[0].Сумма;
				КонецЕсли; 
				
				Для каждого СтрокаДатыПотребности Из СтрокаНоменклатуры.Строки Цикл
				
					СтрокиТемповойТаблицыПотребности = ТемповаяТаблицаПотребности.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ДатаПотребности", СтрокаНоменклатуры.Номенклатура, СтрокаНоменклатуры.ХарактеристикаНоменклатуры, ?(ТипЗнч(СтрокаДатыПотребности.НоменклатураКонтрагентЗаказ) = Тип("Строка"), '00010101000000', СтрокаДатыПотребности.НоменклатураКонтрагентЗаказ)));
					Если СтрокиТемповойТаблицыПотребности.Количество() > 0 Тогда
						СтрокаДатыПотребности.НеобходимоеКоличество = СтрокиТемповойТаблицыПотребности[0].КоличествоПлана;
						СтрокаДатыПотребности.ЗаказанноеКоличество = СтрокиТемповойТаблицыПотребности[0].КоличествоФакта;
					КонецЕсли; 
					
					СтрокиТаблицыНокопленияСуммЗаказов = ТаблицаНокопленияСуммЗаказов.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ДатаПотребности", СтрокаНоменклатуры.Номенклатура, СтрокаНоменклатуры.ХарактеристикаНоменклатуры, ?(ТипЗнч(СтрокаДатыПотребности.НоменклатураКонтрагентЗаказ) = Тип("Строка"), '00010101000000', СтрокаДатыПотребности.НоменклатураКонтрагентЗаказ)));
					Если СтрокиТаблицыНокопленияСуммЗаказов.Количество() > 0 Тогда
						СтрокаДатыПотребности.СуммаУпрУчета = СтрокиТаблицыНокопленияСуммЗаказов[0].Сумма;
					КонецЕсли; 
				
				КонецЦикла; 
			
			КонецЦикла; 
		КонецЦикла; 
	
	КонецЕсли; 
	
	// Закончили заполнение дерева подбора
	
	Если ДеревоПодбораНаФорме <> Неопределено Тогда
		
		// Посмотрим, что у нас с отборами
		КопияСтруктурыОтборов = Новый Структура;
		Для каждого ЭлементОтбора Из ОтборыДерева Цикл
			Если ЭлементОтбора.Использование Тогда
				МассивСтруктуры = Новый Массив;
				МассивСтруктуры.Добавить(ЭлементОтбора.ВидСравнения);
				МассивСтруктуры.Добавить(ЭлементОтбора.Значение);
				МассивСтруктуры.Добавить(ЭлементОтбора.ЗначениеС);
				МассивСтруктуры.Добавить(ЭлементОтбора.ЗначениеПо);
				МассивСтруктуры.Добавить(Истина);
				КопияСтруктурыОтборов.Вставить(ЭлементОтбора.Имя, МассивСтруктуры);
			КонецЕсли; 
		КонецЦикла;
		
		Если КопияСтруктурыОтборов.Количество() <> 0 Тогда
			СписокНайденныхОтборов = Новый СписокЗначений;
			ПроверитьОтбор(КопияСтруктурыОтборов, ДеревоПодбора, СписокНайденныхОтборов);
		КонецЕсли;
		
		// Найдем прошлую строку и установим ее, чтобы выделенная ячейка в дереве не "скакала"
		Если МассивСтарыхЗначений.Количество() = 6 Тогда
			
		мФормаИндикации.КомментарийОбработкиДанных = "Определяется прошлая строка ...";
		мФормаИндикации.МаксимальноеЗначение = ДеревоПодбора.Строки.Количество() - 1;
			
			НайденнаяСтрока = Неопределено;
			Для каждого Строка0 Из ДеревоПодбора.Строки Цикл
				мФормаИндикации.Значение = ДеревоПодбора.Строки.Индекс(Строка0);
				Если Строка0.НоменклатураКонтрагентЗаказ <> МассивСтарыхЗначений[0] Тогда
					Продолжить;
				КонецЕсли;
				Если Строка0.Уровень() = МассивСтарыхЗначений[4] Тогда
					НайденнаяСтрока = Строка0;
					Прервать;
				КонецЕсли; 
				Для каждого Строка1 Из Строка0.Строки Цикл
					Если Строка1.НоменклатураКонтрагентЗаказ <> МассивСтарыхЗначений[1] Тогда
						Продолжить;
					КонецЕсли;
					Если Строка1.Уровень() = МассивСтарыхЗначений[4] Тогда
						НайденнаяСтрока = Строка1;
						Прервать;
					КонецЕсли; 
					Для каждого Строка2 Из Строка1.Строки Цикл
						Если Строка2.НоменклатураКонтрагентЗаказ <> МассивСтарыхЗначений[2] Тогда
							Продолжить;
						КонецЕсли;
						Если Строка2.Уровень() = МассивСтарыхЗначений[4] Тогда
							НайденнаяСтрока = Строка2;
							Прервать;
						КонецЕсли; 
						Для каждого Строка3 Из Строка2.Строки Цикл
							Если Строка3.НоменклатураКонтрагентЗаказ <> МассивСтарыхЗначений[3] Тогда
								Продолжить;
							КонецЕсли;
							НайденнаяСтрока = Строка3;
							Прервать;
						КонецЦикла; 
						Если НайденнаяСтрока <> Неопределено Тогда
							Прервать;
						КонецЕсли; 
					КонецЦикла;
					Если НайденнаяСтрока <> Неопределено Тогда
						Прервать;
					КонецЕсли; 
				КонецЦикла; 
				Если НайденнаяСтрока <> Неопределено Тогда
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
			
			Если НайденнаяСтрока <> Неопределено Тогда
			
				ДеревоПодбораНаФорме.ТекущаяСтрока  = НайденнаяСтрока;
				ДеревоПодбораНаФорме.ТекущаяКолонка = ДеревоПодбораНаФорме.Колонки[МассивСтарыхЗначений[5]];
			
			КонецЕсли; 
			
		КонецЕсли; 
		
		// Установим текущий уровень разворота строк
		УстановитьРазворотСтрок(ДеревоПодбора, ДеревоПодбораНаФорме, УровеньРазворотаДерева, ТаблицаРазворотовСтрок);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет установленный пользователем отбор и удаляет лишние строки дерева значений,
//  которые не удовлетворяют текущему отбору
//
// Параметры
//  КопияСтруктурыОтборов  - Структура, содержащая отборы, виды сравнения и значения
//  ПрошлаяСтрока          - СтрокаДереваЗначений, строка-родитель, прошлого уровня
//  СписокНайденныхОтборов - СписокЗначений, список отборов, которые найдены в текущей ветке дерева значений
//
// Возвращаемые значения
//  НЕТ
Процедура ПроверитьОтбор(КопияСтруктурыОтборов, ПрошлаяСтрока, СписокНайденныхОтборов)

	ИндексСтроки = 0;
	
	ПрошлыйСписокНайденныхОтборов = СписокНайденныхОтборов.Скопировать();
	
	мФормаИндикации.Значение = "Устанавливаются отборы ...";
	мФормаИндикации.МаксимальноеЗначение = ПрошлаяСтрока.Строки.Количество() - 1;
		
	Пока 1 = 1 Цикл
		
		мФормаИндикации.Значение = ИндексСтроки;
			
		Если (ИндексСтроки + 1) > ПрошлаяСтрока.Строки.Количество() Тогда
			Прервать;
		КонецЕсли;
		
		ТекущаяСтрока = ПрошлаяСтрока.Строки[ИндексСтроки];
		
		СписокНайденныхОтборов = ПрошлыйСписокНайденныхОтборов.Скопировать();
	
		Если ТекущаяСтрока.Уровень() = 0 Тогда
			СписокНайденныхОтборов = Новый СписокЗначений;
		КонецЕсли; 
		
		УдовлетворяетУсловиямОтбора(КопияСтруктурыОтборов, ТекущаяСтрока, СписокНайденныхОтборов);
		
		Если ТекущаяСтрока.Строки.Количество() = 0 Тогда
			
			УдалятьСтроку = Ложь;
			МассивОтбора = Неопределено;
			Если КопияСтруктурыОтборов.Свойство("ЗаказПоставщику", МассивОтбора) И НЕ УдовлетворяетУсловиямОтбора(КопияСтруктурыОтборов, ТекущаяСтрока, СписокНайденныхОтборов) И ТекущаяСтрока.Уровень() = 3  Тогда
				УдалятьСтроку = Истина;
			Иначе
				Для каждого ЭлементСтруктуры Из КопияСтруктурыОтборов Цикл
					Если СписокНайденныхОтборов.НайтиПоЗначению(ЭлементСтруктуры.Ключ) = Неопределено Тогда
						УдалятьСтроку = Истина;
						Прервать;
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли;
			
			Если УдалятьСтроку Тогда
				ПрошлаяСтрока.Строки.Удалить(ТекущаяСтрока);
				Продолжить;
			КонецЕсли;
			
		Иначе
			
			ВспомогательныйСписокНайденныхОтборов = ПрошлыйСписокНайденныхОтборов.Скопировать();
			УдовлетворяетУсловиямОтбора(КопияСтруктурыОтборов, ТекущаяСтрока, ВспомогательныйСписокНайденныхОтборов);
			ПроверитьОтбор(КопияСтруктурыОтборов, ТекущаяСтрока, ВспомогательныйСписокНайденныхОтборов);
			
			Если ТекущаяСтрока.Строки.Количество() = 0 Тогда
				
				ПрошлаяСтрока.Строки.Удалить(ТекущаяСтрока);
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли; 
	
		ИндексСтроки = ИндексСтроки + 1;
		
	КонецЦикла; 
	
КонецПроцедуры

// Функция проверяет, удовлетворяет ли строка дерева значений условиям отбора
//
// Параметры
//  КопияСтруктурыОтборов    - Структура, содержащая отборы, виды сравнения и значения
//  СтрокаДерева             - СтрокаДереваЗначений, для которой необходимо проверить отборы
//  ВходящийСписокИменОтбора - СписокЗначений, имена отборов, которые уже существуют в текущей ветке дерева
//
// Возвращаемое значение:
//   Булево - удовлетворят ли строка дерева значений, текущим параметрам отбора
//
Функция УдовлетворяетУсловиямОтбора(КопияСтруктурыОтборов, СтрокаДерева, ВходящийСписокИменОтбора)
	
	СписокИменОтбора = Новый СписокЗначений;
	
	Для каждого ЭлементСруктуры Из КопияСтруктурыОтборов Цикл
	
		Если ЭлементСруктуры.Ключ = "Номенклатура" Тогда
			Если ПорядокОтображенияДерева Тогда
				Если СтрокаДерева.Уровень() = 1 Тогда
					Если ПроверитьЗначениеОтбора(ЭлементСруктуры.Значение, СтрокаДерева.Номенклатура) Тогда
						СписокИменОтбора.Добавить("Номенклатура");
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если СтрокаДерева.Уровень() = 0 Тогда
					Если ПроверитьЗначениеОтбора(ЭлементСруктуры.Значение, СтрокаДерева.Номенклатура) Тогда
						СписокИменОтбора.Добавить("Номенклатура");
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЭлементСруктуры.Ключ = "ХарактеристикаНоменклатуры" Тогда
			Если ПорядокОтображенияДерева Тогда
				Если СтрокаДерева.Уровень() = 1 Тогда
					Если ПроверитьЗначениеОтбора(ЭлементСруктуры.Значение, СтрокаДерева.ХарактеристикаНоменклатуры) Тогда
						СписокИменОтбора.Добавить("ХарактеристикаНоменклатуры");
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если СтрокаДерева.Уровень() = 0 Тогда
					Если ПроверитьЗначениеОтбора(ЭлементСруктуры.Значение, СтрокаДерева.ХарактеристикаНоменклатуры) Тогда
						СписокИменОтбора.Добавить("ХарактеристикаНоменклатуры");
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЭлементСруктуры.Ключ = "Контрагент" Тогда
			Если ПорядокОтображенияДерева Тогда
				Если СтрокаДерева.Уровень() = 0 Тогда
					Если ПроверитьЗначениеОтбора(ЭлементСруктуры.Значение, СтрокаДерева.НоменклатураКонтрагентЗаказ) Тогда
						СписокИменОтбора.Добавить("Контрагент");
					КонецЕсли; 
				КонецЕсли;
			Иначе
				Если СтрокаДерева.Уровень() = 2 Тогда
					Если ПроверитьЗначениеОтбора(ЭлементСруктуры.Значение, СтрокаДерева.НоменклатураКонтрагентЗаказ) Тогда
						СписокИменОтбора.Добавить("Контрагент");
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЭлементСруктуры.Ключ = "ЗаказПоставщику" Тогда
			Если СтрокаДерева.Уровень() = 3 Тогда
				Если ПроверитьЗначениеОтбора(ЭлементСруктуры.Значение, СтрокаДерева.Заказ) Тогда
					СписокИменОтбора.Добавить("ЗаказПоставщику");
				КонецЕсли; 
			КонецЕсли;
		ИначеЕсли ЭлементСруктуры.Ключ = "ДатаПотребности" Тогда
			Если ПорядокОтображенияДерева Тогда
				Если СтрокаДерева.Уровень() = 2 Тогда
					Если ТипЗнч(СтрокаДерева.НоменклатураКонтрагентЗаказ) <> Тип("Дата") Тогда
						Продолжить;
					КонецЕсли; 
					Если ПроверитьЗначениеОтбора(ЭлементСруктуры.Значение, СтрокаДерева.НоменклатураКонтрагентЗаказ) Тогда
						СписокИменОтбора.Добавить("ДатаПотребности");
					КонецЕсли; 
				КонецЕсли;
			Иначе
				Если СтрокаДерева.Уровень() = 1 Тогда
					Если ТипЗнч(СтрокаДерева.НоменклатураКонтрагентЗаказ) <> Тип("Дата") Тогда
						Продолжить;;
					КонецЕсли; 
					Если ПроверитьЗначениеОтбора(ЭлементСруктуры.Значение, СтрокаДерева.НоменклатураКонтрагентЗаказ) Тогда
						СписокИменОтбора.Добавить("ДатаПотребности");
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЭлементСруктуры.Ключ = "СуммаВзаиморасчетов" Тогда
			Если ПроверитьЗначениеОтбора(ЭлементСруктуры.Значение, СтрокаДерева.СуммаВзаиморасчетовЗаказа) Тогда
				СписокИменОтбора.Добавить("СуммаВзаиморасчетов");
			КонецЕсли;
		ИначеЕсли ЭлементСруктуры.Ключ = "ОтбиратьНеЗаказанныеТовары" Тогда
			Если ТипЗнч(СтрокаДерева.НоменклатураКонтрагентЗаказ) = Тип("Строка")
			   И ТипЗнч(СтрокаДерева.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
			   И НЕ СтрокаДерева.Номенклатура.Пустая() Тогда
				Если СтрокаДерева.НеобходимоеКоличество > СтрокаДерева.ЗаказанноеКоличество Тогда
					СписокИменОтбора.Добавить("ОтбиратьНеЗаказанныеТовары");
				КонецЕсли; 
			КонецЕсли; 
		ИначеЕсли ЭлементСруктуры.Ключ = "ОтбиратьНеВыполненныеДатыПотребности" Тогда
			Если ТипЗнч(СтрокаДерева.НоменклатураКонтрагентЗаказ) = Тип("Дата") Тогда
				Если СтрокаДерева.НеобходимоеКоличество > СтрокаДерева.ЗаказанноеКоличество Тогда
					СписокИменОтбора.Добавить("ОтбиратьНеВыполненныеДатыПотребности");
				КонецЕсли; 
			КонецЕсли; 
		ИначеЕсли ЭлементСруктуры.Ключ = "ОтбиратьДатыЗаказовНеЗаявленныеВПланеПотребности" Тогда
			Если ТипЗнч(СтрокаДерева.НоменклатураКонтрагентЗаказ) <> Тип("Строка") Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаДерева.НоменклатураКонтрагентЗаказ = "Не заявлено в плане потребности" Тогда
				СписокИменОтбора.Добавить("ОтбиратьДатыЗаказовНеЗаявленныеВПланеПотребности");
			КонецЕсли; 
		ИначеЕсли ЭлементСруктуры.Ключ = "ОтбиратьИзмененныеЗаказы" Тогда
			Если СтрокаДерева.Уровень() = 3 Тогда
				Если СтрокаДерева.ИДОбъекта <> Неопределено Тогда
					НайденнаяСтрокаОбъекта = ТаблицаОбъектов.Найти(СтрокаДерева.ИДОбъекта, "ИДОбъекта");
					Если НайденнаяСтрокаОбъекта <> Неопределено Тогда
						Если НЕ НайденнаяСтрокаОбъекта.Объект.Ссылка.Пустая() И НайденнаяСтрокаОбъекта.Объект.Модифицированность() Тогда
							СписокИменОтбора.Добавить("ОтбиратьИзмененныеЗаказы");
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли;
		ИначеЕсли ЭлементСруктуры.Ключ = "ОтбиратьНовыеЗаказы" Тогда
			Если СтрокаДерева.Уровень() = 3 Тогда
				Если СтрокаДерева.ИДОбъекта <> Неопределено Тогда
					НайденнаяСтрокаОбъекта = ТаблицаОбъектов.Найти(СтрокаДерева.ИДОбъекта, "ИДОбъекта");
					Если НайденнаяСтрокаОбъекта <> Неопределено Тогда
						Если НайденнаяСтрокаОбъекта.Объект.Ссылка.Пустая() Тогда
							СписокИменОтбора.Добавить("ОтбиратьНовыеЗаказы");
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли;
		ИначеЕсли ЭлементСруктуры.Ключ = "ОтбиратьНовыеИИзмененныеЗаказы" Тогда
			Если СтрокаДерева.Уровень() = 3 Тогда
				Если СтрокаДерева.ИДОбъекта <> Неопределено Тогда
					НайденнаяСтрокаОбъекта = ТаблицаОбъектов.Найти(СтрокаДерева.ИДОбъекта, "ИДОбъекта");
					Если НайденнаяСтрокаОбъекта <> Неопределено Тогда
						Если НайденнаяСтрокаОбъекта.Объект.Ссылка.Пустая() ИЛИ (НЕ НайденнаяСтрокаОбъекта.Объект.Ссылка.Пустая() И НайденнаяСтрокаОбъекта.Объект.Модифицированность()) Тогда
							СписокИменОтбора.Добавить("ОтбиратьНовыеИИзмененныеЗаказы");
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли;
		Иначе
			Если ПроверитьЗначениеОтбора(ЭлементСруктуры.Значение, СтрокаДерева[ЭлементСруктуры.Ключ]) Тогда
				СписокИменОтбора.Добавить(ЭлементСруктуры.Ключ);
			КонецЕсли;
		КонецЕсли; 
	
	КонецЦикла; 
	
	Для каждого ЭлементСписка Из СписокИменОтбора Цикл
		ВходящийСписокИменОтбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла; 
	
	Возврат (СписокИменОтбора.Количество() > 0);
	
КонецФункции

// Функция проверяет, соответствует ли значение строки дерева значений, условиям отбора
//
// Параметры
//  МассивОтбора - Массив, со значениями и видами сравнения отбора
//  ЗначениеОтбора - Значение, которое надо проверить на соответствие параметрам отбора
//
// Возвращаемое значение:
//   Булево
//
Функция ПроверитьЗначениеОтбора(МассивОтбора, ЗначениеОтбора)

	ВидСравненияОтбора = МассивОтбора[0];
	Если ТипЗнч(ВидСравненияОтбора) <> Тип("ВидСравнения") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВидСравненияОтбора = ВидСравнения.Равно Тогда
		Возврат (ЗначениеОтбора = МассивОтбора[1]);
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.НеРавно Тогда
		Возврат (ЗначениеОтбора <> МассивОтбора[1]);
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.Больше Тогда
		Возврат (ЗначениеОтбора > МассивОтбора[1]);
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.БольшеИлиРавно Тогда
		Возврат (ЗначениеОтбора >= МассивОтбора[1]);
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.Меньше Тогда
		Возврат (ЗначениеОтбора < МассивОтбора[1]);
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.МеньшеИлиРавно Тогда
		Возврат (ЗначениеОтбора <= МассивОтбора[1]);
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.ВСписке Тогда
		НайденныйЭлемент = МассивОтбора[1].НайтиПоЗначению(ЗначениеОтбора);
		Возврат (НайденныйЭлемент <> Неопределено);
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.НеВСписке Тогда
		НайденныйЭлемент = МассивОтбора[1].НайтиПоЗначению(ЗначениеОтбора);
		Возврат (НайденныйЭлемент = Неопределено);
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.Интервал Тогда
		Возврат ((ЗначениеОтбора > МассивОтбора[2]) И (ЗначениеОтбора < МассивОтбора[3]));
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.ИнтервалВключаяГраницы Тогда
		Возврат ((ЗначениеОтбора >= МассивОтбора[2]) И (ЗначениеОтбора <= МассивОтбора[3]));
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.ИнтервалВключаяНачало Тогда
		Возврат ((ЗначениеОтбора >= МассивОтбора[2]) И (ЗначениеОтбора < МассивОтбора[3]));
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.ИнтервалВключаяОкончание Тогда
		Возврат ((ЗначениеОтбора > МассивОтбора[2]) И (ЗначениеОтбора <= МассивОтбора[3]));
	Иначе
		Возврат Ложь;
	КонецЕсли; 

КонецФункции

// Процедура устанавливает заданный пользователем разворот строк дерева значений
//
// Параметры
//  ДеревоПодбора          - ДеревоЗначений, которое необходимо заполнить данными
//  ДеревоПодбораНаФорме   - ТабличноеПоле, элемент управления для дерева значений
//  УровеньРазворотаДерева - Число, уровень строк дерева значений, до которого необходимо
//                           развернуть строки после заполнения
//
// Возвращаемые значения
//  НЕТ
Процедура УстановитьРазворотСтрок(ДеревоПодбора, ДеревоПодбораНаФорме, УровеньРазворотаДерева, ТаблицаРазворотовСтрок = Неопределено) Экспорт

	мФормаИндикации.КомментарийОбработкиДанных = "Устанавливается разворот строк ...";
	мФормаИндикации.МаксимальноеЗначение = ДеревоПодбора.Строки.Количество() - 1;
		
	Для каждого СтрокаДерева0 Из ДеревоПодбора.Строки Цикл
		мФормаИндикации.Значение = ДеревоПодбора.Строки.Индекс(СтрокаДерева0);
		ЛокальныйУровеньРазворота = УровеньРазворотаДерева;
		Если ТипЗнч(ТаблицаРазворотовСтрок) = Тип("ТаблицаЗначений") Тогда
			Если ПорядокОтображенияДерева Тогда
				СтрокиТаблицы = ТаблицаРазворотовСтрок.НайтиСтроки(Новый Структура("Контрагент", СтрокаДерева0.НоменклатураКонтрагентЗаказ));
			Иначе
				СтрокиТаблицы = ТаблицаРазворотовСтрок.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СтрокаДерева0.Номенклатура, СтрокаДерева0.ХарактеристикаНоменклатуры));
			КонецЕсли;
			Если СтрокиТаблицы.Количество() > 0 Тогда
				ЛокальныйУровеньРазворота = СтрокиТаблицы[0].Уровень;
			КонецЕсли; 
		КонецЕсли; 
		Если СтрокаДерева0.Уровень() < ЛокальныйУровеньРазворота Тогда
			Если НЕ ДеревоПодбораНаФорме.Развернут(СтрокаДерева0) И СтрокаДерева0.Строки.Количество() > 0  Тогда
				ДеревоПодбораНаФорме.Развернуть(СтрокаДерева0, Истина);
			КонецЕсли; 
		Иначе
			Если ДеревоПодбораНаФорме.Развернут(СтрокаДерева0) И СтрокаДерева0.Строки.Количество() > 0  Тогда
				ДеревоПодбораНаФорме.Свернуть(СтрокаДерева0);
			КонецЕсли; 
		КонецЕсли;
		Для каждого СтрокаДерева1 Из СтрокаДерева0.Строки Цикл
			Если СтрокаДерева1.Уровень() < ЛокальныйУровеньРазворота Тогда
				Если НЕ ДеревоПодбораНаФорме.Развернут(СтрокаДерева1) И СтрокаДерева1.Строки.Количество() > 0 Тогда
					ДеревоПодбораНаФорме.Развернуть(СтрокаДерева1, Истина);
				КонецЕсли;
			Иначе
				Если ДеревоПодбораНаФорме.Развернут(СтрокаДерева1) И СтрокаДерева1.Строки.Количество() > 0  Тогда
					ДеревоПодбораНаФорме.Свернуть(СтрокаДерева1);
				КонецЕсли;
			КонецЕсли;
			Для каждого СтрокаДерева2 Из СтрокаДерева1.Строки Цикл
				Если СтрокаДерева2.Уровень() < ЛокальныйУровеньРазворота Тогда
					Если НЕ ДеревоПодбораНаФорме.Развернут(СтрокаДерева2) И СтрокаДерева2.Строки.Количество() > 0  Тогда
						ДеревоПодбораНаФорме.Развернуть(СтрокаДерева2, Истина);
					КонецЕсли;
				Иначе
					Если ДеревоПодбораНаФорме.Развернут(СтрокаДерева2) И СтрокаДерева2.Строки.Количество() > 0  Тогда
						ДеревоПодбораНаФорме.Свернуть(СтрокаДерева2);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла; 

КонецПроцедуры

// Процедура копирует доступные поля и элементы одного объекта "Отбор" в другой
//
// Параметры:
//  ЧтоКопировать - Отбор, элементы и доступные поля которого надо копировать
//  КудаКопировать - Отбор, элементы и доступные поля которого надо создать
//
Процедура СкопироватьОтбор(ЧтоКопировать, КудаКопировать) Экспорт
	
	КудаКопировать.УстановитьДоступныеПоля(ЧтоКопировать.ПолучитьДоступныеПоля());
	
	Для каждого ЭлементОтбора Из ЧтоКопировать Цикл
		
		НовыйОтбор = КудаКопировать.Найти(ЭлементОтбора.Имя);
		Если НовыйОтбор = Неопределено Тогда
			НовыйОтбор = КудаКопировать.Добавить(ЭлементОтбора.Имя, ЭлементОтбора.Имя, ЭлементОтбора.Представление);
		КонецЕсли; 
		НовыйОтбор.ВидСравнения  = ЭлементОтбора.ВидСравнения;
		НовыйОтбор.Значение      = ЭлементОтбора.Значение;
		НовыйОтбор.ЗначениеС     = ЭлементОтбора.ЗначениеС;
		НовыйОтбор.ЗначениеПо    = ЭлементОтбора.ЗначениеПо;
		НовыйОтбор.Использование = ЭлементОтбора.Использование;

	КонецЦикла; 

КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

// Заполним доступные поля отбора
ПоляОтборов = ОтборыДерева.ПолучитьДоступныеПоля();
ПоляОтборов.Добавить("Номенклатура",                                     "Номенклатура",                                                     Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
ПоляОтборов.Добавить("ХарактеристикаНоменклатуры",                       "Характеристика номенклатуры",                                      Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
ПоляОтборов.Добавить("Контрагент",                                       "Контрагент",                                                       Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
ПоляОтборов.Добавить("ЗаказПоставщику",                                  "Заказ поставщику",                                                 Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику"));
ПоляОтборов.Добавить("ДатаПотребности",                                  "Дата потребности",                                                 Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
ПоляОтборов.Добавить("НеобходимоеКоличество",                            "Необходимое количество",                                           ПолучитьОписаниеТиповЧисла(15,3));
ПоляОтборов.Добавить("ЗаказанноеКоличество",                             "Заказанное количество",                                            ПолучитьОписаниеТиповЧисла(15,3));
ПоляОтборов.Добавить("ЦенаУпрУчета",                                     "Цена в валюте упр.учета",                                          ПолучитьОписаниеТиповЧисла(15,2));
ПоляОтборов.Добавить("СуммаУпрУчета",                                    "Сумма в валюте упр.учета",                                         ПолучитьОписаниеТиповЧисла(15,2));
ПоляОтборов.Добавить("СуммаВзаиморасчетов",                              "Сумма в валюте взаиморасчетов",                                    ПолучитьОписаниеТиповЧисла(15,2));
ПоляОтборов.Добавить("ОтбиратьНеЗаказанныеТовары",                       "Отбирать не заказанные товары",                                    Новый ОписаниеТипов("Булево"));
ПоляОтборов.Добавить("ОтбиратьНеВыполненныеДатыПотребности",             "Отбирать не выполненные даты потребности",                         Новый ОписаниеТипов("Булево"));
ПоляОтборов.Добавить("ОтбиратьДатыЗаказовНеЗаявленныеВПланеПотребности", "Отбирать даты поставки заказов не заявленные в плане потребности", Новый ОписаниеТипов("Булево"));
ПоляОтборов.Добавить("ОтбиратьИзмененныеЗаказы",                         "Отбирать измененные заказы",                                       Новый ОписаниеТипов("Булево"));
ПоляОтборов.Добавить("ОтбиратьНовыеЗаказы",                              "Отбирать новые заказы",                                            Новый ОписаниеТипов("Булево"));
ПоляОтборов.Добавить("ОтбиратьНовыеИИзмененныеЗаказы",                   "Отбирать новые и измененные заказы",                               Новый ОписаниеТипов("Булево"));

// Заполним элементы отбора
Для Инд = 0 По ПоляОтборов.Количество() - 1 Цикл
	ПоляОтборов[Инд].Отбор = Истина;
	ОтборыДерева.Добавить(ПоляОтборов[Инд].Имя, ПоляОтборов[Инд].Имя, ПоляОтборов[Инд].Представление);
КонецЦикла;

ОтборыДерева.ОтбиратьНеЗаказанныеТовары.Значение                       = Истина;
ОтборыДерева.ОтбиратьНеВыполненныеДатыПотребности.Значение             = Истина;
ОтборыДерева.ОтбиратьДатыЗаказовНеЗаявленныеВПланеПотребности.Значение = Истина;
ОтборыДерева.ОтбиратьИзмененныеЗаказы.Значение                         = Истина;
ОтборыДерева.ОтбиратьНовыеЗаказы.Значение                              = Истина;
ОтборыДерева.ОтбиратьНовыеИИзмененныеЗаказы.Значение                   = Истина;

// Заполним доступные поля отбора дерева заказов
ПоляОтборов = ОтборыДереваЗаказов.ПолучитьДоступныеПоля();
ПоляОтборов.Добавить("Номенклатура",                           "Номенклатура",                                   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
ПоляОтборов.Добавить("ХарактеристикаНоменклатуры",             "Характеристика номенклатуры",                    Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
ПоляОтборов.Добавить("Контрагент",                             "Контрагент",                                     Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
ПоляОтборов.Добавить("ЗаказПоставщику",                        "Заказ поставщику",                               Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику"));
ПоляОтборов.Добавить("ЗаказПокупателя",                        "Заказ покупателя",                               Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
ПоляОтборов.Добавить("ДатаПотребности",                        "Дата потребности",                               Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
ПоляОтборов.Добавить("КоличествоПотребности",                  "Количество потребности",                         ПолучитьОписаниеТиповЧисла(15,3));
ПоляОтборов.Добавить("КоличествоЗаказов",                      "Количество заказов",                             ПолучитьОписаниеТиповЧисла(15,3));
ПоляОтборов.Добавить("ОтбиратьНеВыполненныеДатыПотребности",   "Отбирать не выполненные даты потребности",       Новый ОписаниеТипов("Булево"));
ПоляОтборов.Добавить("ОтбиратьНеВыполненныеЗаказыПокупателей", "Отбирать не выполненные заказы покупателей",     Новый ОписаниеТипов("Булево"));
ПоляОтборов.Добавить("ОтбиратьИзмененныеЗаказы",               "Отбирать измененные заказы поставщикам",         Новый ОписаниеТипов("Булево"));
ПоляОтборов.Добавить("ОтбиратьНовыеЗаказы",                    "Отбирать новые заказы поставщикам",              Новый ОписаниеТипов("Булево"));
ПоляОтборов.Добавить("ОтбиратьНовыеИИзмененныеЗаказы",         "Отбирать новые и измененные заказы поставщикам", Новый ОписаниеТипов("Булево"));

// Заполним элементы отбора дерева заказов
Для Инд = 0 По ПоляОтборов.Количество() - 1 Цикл
	ПоляОтборов[Инд].Отбор = Истина;
	ОтборыДереваЗаказов.Добавить(ПоляОтборов[Инд].Имя, ПоляОтборов[Инд].Имя, ПоляОтборов[Инд].Представление);
КонецЦикла;

ОтборыДереваЗаказов.ОтбиратьНеВыполненныеДатыПотребности.Значение   = Истина;
ОтборыДереваЗаказов.ОтбиратьНеВыполненныеЗаказыПокупателей.Значение = Истина;
ОтборыДереваЗаказов.ОтбиратьИзмененныеЗаказы.Значение               = Истина;
ОтборыДереваЗаказов.ОтбиратьНовыеЗаказы.Значение                    = Истина;
ОтборыДереваЗаказов.ОтбиратьНовыеИИзмененныеЗаказы.Значение         = Истина;

ТаблицаОбъектов.Колонки.Добавить("ИДОбъекта", Новый ОписаниеТипов("Строка"));
ТаблицаОбъектов.Колонки.Добавить("Объект", Новый ОписаниеТипов("ДокументОбъект.ЗаказПоставщику"));

мФормаИндикации = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");

мФормаИндикации.НаименованиеОбработкиДанных = "Обработка календарного плана закупок";
мФормаИндикации.КомментарийЗначения         = "Выполнено:";

НП = Новый НастройкаПериода;

