
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает видимость элементов формы со значениями
// отборов, состоящих из 2-х элементов
//
// Параметры
//  ИмяЭлемента - имя отбора, видимость элементов которого необходимо установить
//
// Возвращаемое значение
//  НЕТ
Процедура ПроверитьВидимостьДвойныхЭлементов(ИмяЭлемента)

	ЭлементОтбора = ИзменяемыйОтбор[ИмяЭлемента];
	
	Если ЭлементОтбора.ТипЗначения = ПолучитьОписаниеТиповЧисла(15,2)
	 ИЛИ ЭлементОтбора.ТипЗначения = ПолучитьОписаниеТиповЧисла(15,3)
	 ИЛИ ЭлементОтбора.ТипЗначения = Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)) Тогда
		ЗначениеСравнения = ЭлементОтбора.ВидСравнения;
		Если ЗначениеСравнения = ВидСравнения.Интервал
		 ИЛИ ЗначениеСравнения = ВидСравнения.ИнтервалВключаяГраницы
		 ИЛИ ЗначениеСравнения = ВидСравнения.ИнтервалВключаяНачало
		 ИЛИ ЗначениеСравнения = ВидСравнения.ИнтервалВключаяОкончание Тогда
			
			ЭтаФорма.ЭлементыФормы[Строка("Значение"+ИмяЭлемента)].Видимость       = Ложь;
			ЭтаФорма.ЭлементыФормы[Строка("Значение"+ИмяЭлемента+"Нач")].Видимость = Истина;
			ЭтаФорма.ЭлементыФормы[Строка("Значение"+ИмяЭлемента+"Кон")].Видимость = Истина;
			
		Иначе
			
			ЭтаФорма.ЭлементыФормы[Строка("Значение"+ИмяЭлемента)].Видимость       = Истина;
			ЭтаФорма.ЭлементыФормы[Строка("Значение"+ИмяЭлемента+"Нач")].Видимость = Ложь;
			ЭтаФорма.ЭлементыФормы[Строка("Значение"+ИмяЭлемента+"Кон")].Видимость = Ложь;
		
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

// Процедура определяет для элементов управления, расположенных на форме,
//  данные, с которыми они связаны
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   НЕТ
Процедура ЗаполнитьЭлементыОтбора()

	Для каждого ЭлементОтбора Из ИзменяемыйОтбор Цикл
	
		Если ЭлементОтбора.ТипЗначения = Новый ОписаниеТипов("Булево") Тогда
			
			ЭлементыФормы[ЭлементОтбора.Имя].Данные = Строка("ИзменяемыйОтбор." + ЭлементОтбора.Имя + ".Использование");
			
		Иначе
			
			ЭлементыФормы["Флаг" + ЭлементОтбора.Имя].Данные = Строка("ИзменяемыйОтбор." + ЭлементОтбора.Имя + ".Использование");
			ЭлементыФормы["ВидСравнения" + ЭлементОтбора.Имя].Данные = Строка("ИзменяемыйОтбор." + ЭлементОтбора.Имя + ".ВидСравнения");
			ЭлементыФормы["Значение" + ЭлементОтбора.Имя].Данные = Строка("ИзменяемыйОтбор." + ЭлементОтбора.Имя + ".Значение");
			
			Если ЭлементОтбора.ТипЗначения = ПолучитьОписаниеТиповЧисла(15,2)
			 ИЛИ ЭлементОтбора.ТипЗначения = ПолучитьОписаниеТиповЧисла(15,3)
			 ИЛИ ЭлементОтбора.ТипЗначения = Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)) Тогда
				
				ЭлементыФормы["Значение" + ЭлементОтбора.Имя + "Нач"].Данные = Строка("ИзменяемыйОтбор." + ЭлементОтбора.Имя + ".ЗначениеС");
				ЭлементыФормы["Значение" + ЭлементОтбора.Имя + "Кон"].Данные = Строка("ИзменяемыйОтбор." + ЭлементОтбора.Имя + ".ЗначениеПо");
				ПроверитьВидимостьДвойныхЭлементов(ЭлементОтбора.Имя);
				ЭлементыФормы["Значение" + ЭлементОтбора.Имя + "Нач"].КнопкаВыбора = Истина;
				ЭлементыФормы["Значение" + ЭлементОтбора.Имя + "Кон"].КнопкаВыбора = Истина;
				
			КонецЕсли; 
			
		КонецЕсли; 
	
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет списки выбора для элементов управления ПолеВыбора,
//  расположенных на форме
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   НЕТ
Процедура ПроставитьВидыСравнения()

	Для каждого ЭлементОтбора Из ИзменяемыйОтбор Цикл
		
		Если ЭлементОтбора.ТипЗначения = Новый ОписаниеТипов("Булево") Тогда
			Продолжить;
		КонецЕсли; 
		
		СписокВидовСравнения = Новый СписокЗначений;
		СписокВидовСравнения.Добавить(ВидСравнения.Равно);
		СписокВидовСравнения.Добавить(ВидСравнения.НеРавно);
		СписокВидовСравнения.Добавить(ВидСравнения.ВСписке);
		СписокВидовСравнения.Добавить(ВидСравнения.НеВСписке);
		
		Если ЭлементОтбора.ТипЗначения = ПолучитьОписаниеТиповЧисла(15,2)
		 ИЛИ ЭлементОтбора.ТипЗначения = ПолучитьОписаниеТиповЧисла(15,3)
		 ИЛИ ЭлементОтбора.ТипЗначения = Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)) Тогда
		
			СписокВидовСравнения.Добавить(ВидСравнения.Меньше);
			СписокВидовСравнения.Добавить(ВидСравнения.МеньшеИлиРавно);
			СписокВидовСравнения.Добавить(ВидСравнения.Больше);
			СписокВидовСравнения.Добавить(ВидСравнения.БольшеИлиРавно);
			СписокВидовСравнения.Добавить(ВидСравнения.Интервал);
			СписокВидовСравнения.Добавить(ВидСравнения.ИнтервалВключаяГраницы);
			СписокВидовСравнения.Добавить(ВидСравнения.ИнтервалВключаяНачало);
			СписокВидовСравнения.Добавить(ВидСравнения.ИнтервалВключаяОкончание);
			
		КонецЕсли; 
		
		ЭлементыФормы["ВидСравнения" + ЭлементОтбора.Имя].СписокВыбора = СписокВидовСравнения.Скопировать();
		
	КонецЦикла; 

КонецПроцедуры

// Процедура вызывается при вызове мотода Очистить любого реквизита формы ЗначениеОтбора.
// 
// Параметры
//  Элемент - элемент формы
Процедура ОчиститьЭлемент(Элемент);
	
	Если ТипЗнч(Элемент.Значение) = Тип("СписокЗначений") Тогда
		Элемент.Значение.Очистить();
	ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Дата") Тогда
		Элемент.Значение = '00010101000000';
	ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Число") Тогда
		Элемент.Значение = 0;
	Иначе
		ОписаниеТиповСправочники = Справочники.ТипВсеСсылки();
		ОписаниеТиповДокументы   = Документы.ТипВсеСсылки();
		Если ОписаниеТиповДокументы.СодержитТип(ТипЗнч(Элемент.Значение)) Тогда
			Элемент.Значение = Новый("ДокументСсылка."+Элемент.Значение.Метаданные().Имя);
		ИначеЕсли ОписаниеТиповСправочники.СодержитТип(ТипЗнч(Элемент.Значение)) Тогда
			Элемент.Значение = Новый("СправочникСсылка."+Элемент.Значение.Метаданные().Имя);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура вызывается при изменении значения любого реквизита формы ВидСравнения.
// 
// Параметры
//  Элемент - элемент формы
Процедура ОбработатьИзменениеВидаСравнения(Элемент)

	ИмяЭлемента = СтрЗаменить(Элемент.Имя, "ВидСравнения", "");
	
	НайденныйЭлементСписка = СписокОтборов.НайтиПоЗначению(ИмяЭлемента);
	
	Если НайденныйЭлементСписка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.Значение = ВидСравнения.Равно
	 ИЛИ Элемент.Значение = ВидСравнения.НеРавно
	 ИЛИ Элемент.Значение = ВидСравнения.Больше
	 ИЛИ Элемент.Значение = ВидСравнения.БольшеИлиРавно
	 ИЛИ Элемент.Значение = ВидСравнения.Меньше
	 ИЛИ Элемент.Значение = ВидСравнения.МеньшеИлиРавно Тогда
	
		ЗначениеОтбора = ЭтаФорма["Значение"+Строка(НайденныйЭлементСписка.Значение)];
		Если ТипЗнч(ЗначениеОтбора) = Тип("СписокЗначений") Тогда
			Если ЗначениеОтбора.Количество() > 0 Тогда
				ЭтаФорма["Значение"+Строка(НайденныйЭлементСписка.Значение)] = ЗначениеОтбора[0].Значение;
			Иначе
				ТипЗначения = ЭлементыФормы["Значение"+Строка(НайденныйЭлементСписка.Значение)].ТипЗначенияСписка;
				Если ТипЗначения = Тип("Число") Тогда
					ЭтаФорма["Значение"+ИмяЭлемента] = 0;
				Иначе
					ЭтаФорма["Значение"+ИмяЭлемента] = Новый(ТипЗначения.Типы()[0]);
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		
	ИначеЕсли Элемент.Значение = ВидСравнения.ВСписке
	      ИЛИ Элемент.Значение = ВидСравнения.НеВСписке Тогда
		
		ЗначениеОтбора = ЭтаФорма["Значение"+Строка(НайденныйЭлементСписка.Значение)];
		Если ТипЗнч(ЗначениеОтбора) <> Тип("СписокЗначений") Тогда
			НовыйСписокЗначений = Новый СписокЗначений;
			Если НайденныйЭлементСписка.Представление = "Дата" Тогда
				Если ЗначениеОтбора <> '00010101000000' Тогда
					НовыйСписокЗначений.Добавить(ЗначениеОтбора);
				КонецЕсли;
			ИначеЕсли НайденныйЭлементСписка.Представление = "Число" Тогда
				Если ЗначениеОтбора <> 0 Тогда
					НовыйСписокЗначений.Добавить(ЗначениеОтбора);
				КонецЕсли;
			Иначе
				Если НЕ ЗначениеОтбора.Пустая() Тогда
					НовыйСписокЗначений.Добавить(ЗначениеОтбора);
				КонецЕсли;
			КонецЕсли;
			ЭтаФорма["Значение"+Строка(НайденныйЭлементСписка.Значение)] = НовыйСписокЗначений;
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьВидимостьДвойныхЭлементов(ИмяЭлемента);
	
КонецПроцедуры

// Процедура вызывается при изменении любого реквизита формы ЗначениеОтбора.
// 
// Параметры
//  Элемент - элемент формы
Процедура ЗначениеОтбораПриИзменении(Элемент)

	ИмяЭлемента = СтрЗаменить(Элемент.Имя, "Значение", "");
	Если Сред(ИмяЭлемента, (СтрДлина(ИмяЭлемента) - 2), 3) = "Нач" ИЛИ Сред(ИмяЭлемента, (СтрДлина(ИмяЭлемента) - 2), 3) = "Кон" Тогда
		ИмяЭлемента = Сред(ИмяЭлемента, 1, (СтрДлина(ИмяЭлемента) - 3));
	КонецЕсли; 
	
	ЭлементыФормы[Строка("Флаг"+ИмяЭлемента)].Значение = Истина;

КонецПроцедуры

// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()
	
	ЗаполнитьЭлементыОтбора();
	
КонецПроцедуры

// Обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	СкопироватьОтбор(ОтборыДереваЗаказов, ИзменяемыйОтбор);
	ПроставитьВидыСравнения();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ОБРАБОТЧИКОВ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события Нажатие элемента формы КнопкаОК.
//
Процедура КнопкаОКНажатие(Кнопка)

	МассивВозврата = Новый Массив;
	МассивВозврата.Добавить(Истина);
	МассивВозврата.Добавить(ИзменяемыйОтбор);
	
	ЭтаФорма.Закрыть(МассивВозврата);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КнопкаОтмена.
//
Процедура КнопкаОтменаНажатие(Элемент)
	
	МассивВозврата = Новый Массив;
	МассивВозврата.Добавить(Ложь);
	МассивВозврата.Добавить(Неопределено);
	
	ЭтаФорма.Закрыть(МассивВозврата);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ВидСравненияДатаПотребности.
//
Процедура ВидСравненияДатаПотребностиПриИзменении(Элемент)
	
	ПроверитьВидимостьДвойныхЭлементов("ДатаПотребности");
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ВидСравненияНеобходимоеКоличество.
//
Процедура ВидСравненияКоличествоПотребностиПриИзменении(Элемент)
	
	ПроверитьВидимостьДвойныхЭлементов("КоличествоПотребности");
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ВидСравненияЗаказанноеКоличество.
//
Процедура ВидСравненияКоличествоЗаказовПриИзменении(Элемент)
	
	ПроверитьВидимостьДвойныхЭлементов("КоличествоЗаказов");
	
КонецПроцедуры

// Обработчик события Очистка элемента формы ЗначениеНоменклатура.
//
Процедура ЗначениеНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОчиститьЭлемент(Элемент);
	
КонецПроцедуры

// Обработчик события Очистка элемента формы ЗначениеКонтрагент.
//
Процедура ЗначениеКонтрагентОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОчиститьЭлемент(Элемент);
	
КонецПроцедуры

// Обработчик события Очистка элемента формы ЗначениеЗаказПоставщику.
//
Процедура ЗначениеЗаказПоставщикуОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОчиститьЭлемент(Элемент);
	
КонецПроцедуры

// Обработчик события Очистка элемента формы ЗначениеЗаказПокупателя.
//
Процедура ЗначениеЗаказПокупателяОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОчиститьЭлемент(Элемент);
	
КонецПроцедуры

// Обработчик события Очистка элемента формы ЗначениеДатаПотребности.
//
Процедура ЗначениеДатаПотребностиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОчиститьЭлемент(Элемент);
	
КонецПроцедуры

// Обработчик события Очистка элемента формы ЗначениеНеобходимоеКоличество.
//
Процедура ЗначениеКоличествоПотребностиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОчиститьЭлемент(Элемент);
	
КонецПроцедуры

// Обработчик события Очистка элемента формы ЗначениеЗаказанноеКоличество.
//
Процедура ЗначениеКоличествоЗаказовОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОчиститьЭлемент(Элемент);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ЗначениеНоменклатура.
//
Процедура ЗначениеНоменклатураПриИзменении(Элемент)
	
	ЗначениеОтбораПриИзменении(Элемент);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ЗначениеКонтрагент.
//
Процедура ЗначениеКонтрагентПриИзменении(Элемент)
	
	ЗначениеОтбораПриИзменении(Элемент);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ЗначениеЗаказПоставщику.
//
Процедура ЗначениеЗаказПоставщикуПриИзменении(Элемент)
	
	ЗначениеОтбораПриИзменении(Элемент);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ЗначениеЗаказПокупателя.
//
Процедура ЗначениеЗаказПокупателяПриИзменении(Элемент)
	
	ЗначениеОтбораПриИзменении(Элемент);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ЗначениеДатаПотребности.
//
Процедура ЗначениеДатаПотребностиПриИзменении(Элемент)
	
	ЗначениеОтбораПриИзменении(Элемент);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ЗначениеНеобходимоеКоличество.
//
Процедура ЗначениеКоличествоПотребностиПриИзменении(Элемент)
	
	ЗначениеОтбораПриИзменении(Элемент);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ЗначениеЗаказанноеКоличество.
//
Процедура ЗначениеКоличествоЗаказовПриИзменении(Элемент)
	
	ЗначениеОтбораПриИзменении(Элемент);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ЗначениеДатаПотребностиНач.
//
Процедура ЗначениеДатаПотребностиНачПриИзменении(Элемент)
	
	ЗначениеОтбораПриИзменении(Элемент);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ЗначениеДатаПотребностиКон.
//
Процедура ЗначениеДатаПотребностиКонПриИзменении(Элемент)
	
	ЗначениеОтбораПриИзменении(Элемент);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ЗначениеНеобходимоеКоличествоНач.
//
Процедура ЗначениеКоличествоПотребностиНачПриИзменении(Элемент)
	
	ЗначениеОтбораПриИзменении(Элемент);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ЗначениеНеобходимоеКоличествоКон.
//
Процедура ЗначениеКоличествоПотребностиКонПриИзменении(Элемент)
	
	ЗначениеОтбораПриИзменении(Элемент);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ЗначениеЗаказанноеКоличествоНач.
//
Процедура ЗначениеКоличествоЗаказовНачПриИзменении(Элемент)
	
	ЗначениеОтбораПриИзменении(Элемент);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ЗначениеЗаказанноеКоличествоКон.
//
Процедура ЗначениеКоличествоЗаказовКонПриИзменении(Элемент)
	
	ЗначениеОтбораПриИзменении(Элемент);
	
КонецПроцедуры
