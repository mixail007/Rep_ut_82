
// Список значений, содержащий список истории отборов с параметрами отборов
Перем СписокИсторииОтбора;

// Объект, который был перед автокоррекировкой
Перем мСтруктураОбъектаАвтокорректировки;

// Флаг, в котором запоминается модифицированность объекта перед корректировкой
Перем мМодифицированностьОбъектаПередАвтокорректировкой;

// Флаг, который взводится при регистрации объекта ЗаказПоставщику
Перем мЗаписанОбъектАвтокорректировки;

// Флаг, который устанавливается если форма закрывается не по "крестику"
Перем мЗакрытьПринудительно;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура определяет сотояние кнопок управления строками дерева (изменить и автозаполнение).
// 
// Параметры
//  НЕТ
//
// Возвращаемые значения
//  НЕТ
Процедура СостояниеКнопокУправленияДеревом()

	ДоступностьРедактирования    = Ложь;
	ДоступностьАвтокорректировки = Ложь;
	
	Если ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущиеДанные <> Неопределено Тогда
		
		Если ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущаяКолонка.Имя <> "КоличествоПотребности"
		   И ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущаяКолонка.Имя <> "КоличествоЗаказов" Тогда
		
			Если ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущиеДанные.Уровень() <> 1 Тогда
				ДоступностьРедактирования = Истина;
			КонецЕсли; 
		
		КонецЕсли;
		
		Если ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущиеДанные.Уровень() = 2 И НЕ ЗначениеНеЗаполнено(ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущиеДанные.ЗаказПокупателя) Тогда
			ДоступностьАвтокорректировки = Истина;
		КонецЕсли; 
	
	КонецЕсли; 
	
	ЭтаФорма.ЭлементыФормы.КоманднаяПанельДерева.Кнопки.Изменить.Доступность = ДоступностьРедактирования;
	ЭтаФорма.ЭлементыФормы.КоманднаяПанельДерева.Кнопки.Автокорректировка.Доступность = ДоступностьАвтокорректировки;

КонецПроцедуры

// Процедура устанавливает доступность кнопки ОтключитьОтбор комендной панели КоманднаяПанельДерева.
// 
// Параметры
//  НЕТ
//
// Возвращаемые значения
//  НЕТ
Процедура ДоступностьКнопкиОтключенияОтбора()
	
	ЕстьОтборы = Ложь;
	
	Для каждого ЭлементОтбора Из ОтборыДереваЗаказов Цикл
		Если ЭлементОтбора.Использование Тогда
			ЕстьОтборы = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	ЭлементыФормы.КоманднаяПанельДерева.Кнопки.ОтключитьОтбор.Доступность = ЕстьОтборы;
	
КонецПроцедуры

// Процедура определяет сотояние кнопки ОтборПоТекущемуЗначению командной панели КоманднаяПанельДерева.
// 
// Параметры
//  НЕТ
//
// Возвращаемые значения
//  НЕТ
Процедура СостояниеКнопкиОтбораПоТекущемуЗначению()

	НайденОтбор = Ложь;
	
	Если ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущаяСтрока = Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельДерева.Кнопки.ОтборПоТекущемуЗначению.Пометка    = Ложь;
		ЭлементыФормы.КоманднаяПанельДерева.Кнопки.ОтборПоТекущемуЗначению.Доступность = Ложь;
		Возврат;
	Иначе
		ЭлементыФормы.КоманднаяПанельДерева.Кнопки.ОтборПоТекущемуЗначению.Доступность = Истина;
	КонецЕсли;
	
	СтруктураЗначенийОтбора = Новый Структура;
	ОпределитьИмяИЗначениеТекущейЯчейкиДляОтбора(СтруктураЗначенийОтбора);
	
	Если СтруктураЗначенийОтбора.Количество() = 0 Тогда
		ЭлементыФормы.КоманднаяПанельДерева.Кнопки.ОтборПоТекущемуЗначению.Пометка    = Ложь;
		ЭлементыФормы.КоманднаяПанельДерева.Кнопки.ОтборПоТекущемуЗначению.Доступность = Ложь;
		Возврат;
	КонецЕсли; 
	
	Для каждого ЭлементСтруктуры Из СтруктураЗначенийОтбора Цикл
		НайденныйЭлементОтбора = ОтборыДереваЗаказов.Найти(ЭлементСтруктуры.Ключ);
		Если НайденныйЭлементОтбора <> Неопределено Тогда
			Если НайденныйЭлементОтбора.Использование И НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.Равно И НайденныйЭлементОтбора.Значение = ЭлементСтруктуры.Значение Тогда
				НайденОтбор = Истина;
			Иначе
				НайденОтбор = Ложь;
				Прервать;
			КонецЕсли; 
		Иначе
			НайденОтбор = Ложь;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	ЭлементыФормы.КоманднаяПанельДерева.Кнопки.ОтборПоТекущемуЗначению.Пометка = НайденОтбор;
	
КонецПроцедуры

// Процедура определяет значение в текущей ячейке дерева значений и соответствующее ему имя отбора.
// 
// Параметры
//  СтруктураЗначенийОтбора      - Структура, ключ - имя отбора, значение - значение отбора
//
// Возвращаемые значения
//  НЕТ
Процедура ОпределитьИмяИЗначениеТекущейЯчейкиДляОтбора(СтруктураЗначенийОтбора)

	ИмяКолонки = ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущаяКолонка.Имя;
	
	ТекущаяСтрокаДерева = ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущиеДанные;
	
	Если ИмяКолонки = "ОсновныеДанные" Тогда
		Если ТекущаяСтрокаДерева.Уровень() = 0 Тогда
			СтруктураЗначенийОтбора.Вставить("Номенклатура", ТекущаяСтрокаДерева.Номенклатура);
			СтруктураЗначенийОтбора.Вставить("ХарактеристикаНоменклатуры", ТекущаяСтрокаДерева.ХарактеристикаНоменклатуры);
		ИначеЕсли ТекущаяСтрокаДерева.Уровень() = 1 Тогда
			Если ТипЗнч(ТекущаяСтрокаДерева.ОсновныеДанные) = Тип("Дата") Тогда
				СтруктураЗначенийОтбора.Вставить("ДатаПотребности", ТекущаяСтрокаДерева.ОсновныеДанные);
			//Иначе
			//	СтруктураЗначенийОтбора.Вставить("ОтбиратьДатыЗаказовНеЗаявленныеВПланеПотребности", Истина);
			КонецЕсли; 
		ИначеЕсли ТекущаяСтрокаДерева.Уровень() = 2 Тогда
			СтруктураЗначенийОтбора.Вставить("ЗаказПокупателя", ТекущаяСтрокаДерева.ЗаказПокупателя);
		Иначе
			СтрокаОбъекта = ТаблицаОбъектов.Найти(ТекущаяСтрокаДерева.ИДОбъекта, "ИДОбъекта");
			Если СтрокаОбъекта <> Неопределено И НЕ СтрокаОбъекта.Объект.Ссылка.Пустая() Тогда
				СтруктураЗначенийОтбора.Вставить("ЗаказПоставщику", СтрокаОбъекта.Объект.Ссылка);
			КонецЕсли; 
		КонецЕсли;
	Иначе
		СтруктураЗначенийОтбора.Вставить(ИмяКолонки, ТекущаяСтрокаДерева[ИмяКолонки]);
	КонецЕсли;

КонецПроцедуры

// Процедура формирует строковое представление отбора, для записи в историю отборов дерева значений.
// 
// Параметры
//  СтрокаОтбора - Строка, строковое представление отбора
//  МассивОтбора - Массив, массив парметров и значений отбора
//  ФормаОтборов - Форма, Форма настройки отборов
//  ИмяОтбора    - Строка, Имя отбора, для которого определяется строковое представление
//
// Возвращаемые значения
//  НЕТ
Процедура ДописатьСтрокуОтбора(СтрокаОтбора, ЭлементОтбора)

	Если НЕ ПустаяСтрока(СтрокаОтбора) Тогда
		СтрокаОтбора = СтрокаОтбора + ", ";
	КонецЕсли; 
	Если ЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда
		СтрокаОтбора = СтрокаОтбора + ЭлементОтбора.Представление + " = "+ СокрЛП(Строка(ЭлементОтбора.Значение));
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно Тогда
		СтрокаОтбора = СтрокаОтбора + ЭлементОтбора.Представление + " <> "+ СокрЛП(Строка(ЭлементОтбора.Значение));
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда
		СтрокаСписка = "";
		Для каждого ЭлементСписка Из ЭлементОтбора.Значение Цикл
			Если НЕ ПустаяСтрока(СтрокаСписка) Тогда
				СтрокаСписка = СтрокаСписка + "; ";
			КонецЕсли; 
			СтрокаСписка = СтрокаСписка + СокрЛП(Строка(ЭлементСписка.Значение));
		КонецЦикла; 
		СтрокаОтбора = СтрокаОтбора + ЭлементОтбора.Представление + " в списке "+ СтрокаСписка;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеВСписке Тогда
		СтрокаСписка = "";
		Для каждого ЭлементСписка Из ЭлементОтбора.Значение Цикл
			Если НЕ ПустаяСтрока(СтрокаСписка) Тогда
				СтрокаСписка = СтрокаСписка + "; ";
			КонецЕсли; 
			СтрокаСписка = СтрокаСписка + СокрЛП(Строка(ЭлементСписка.Значение));
		КонецЦикла; 
		СтрокаОтбора = СтрокаОтбора + ЭлементОтбора.Представление + " не в списке "+ СтрокаСписка;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.Больше Тогда
		СтрокаОтбора = СтрокаОтбора + ЭлементОтбора.Представление + " > "+ СокрЛП(Строка(ЭлементОтбора.Значение));
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.БольшеИлиРавно Тогда
		СтрокаОтбора = СтрокаОтбора + ЭлементОтбора.Представление + " >= "+ СокрЛП(Строка(ЭлементОтбора.Значение));
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.Меньше Тогда
		СтрокаОтбора = СтрокаОтбора + ЭлементОтбора.Представление + " < "+ СокрЛП(Строка(ЭлементОтбора.Значение));
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.МеньшеИлиРавно Тогда
		СтрокаОтбора = СтрокаОтбора + ЭлементОтбора.Представление + " <= "+ СокрЛП(Строка(ЭлементОтбора.Значение));
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.Интервал Тогда
		СтрокаОтбора = СтрокаОтбора + СокрЛП(Строка(ЭлементОтбора.ЗначениеС)) + " < " + ЭлементОтбора.Представление + " < "+ СокрЛП(Строка(ЭлементОтбора.ЗначениеПо));
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы Тогда
		СтрокаОтбора = СтрокаОтбора + СокрЛП(Строка(ЭлементОтбора.ЗначениеС)) + " <= " + ЭлементОтбора.Представление + " <= "+ СокрЛП(Строка(ЭлементОтбора.ЗначениеПо));
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяНачало Тогда
		СтрокаОтбора = СтрокаОтбора + СокрЛП(Строка(ЭлементОтбора.ЗначениеС)) + " <= " + ЭлементОтбора.Представление + " < "+ СокрЛП(Строка(ЭлементОтбора.ЗначениеПо));
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяОкончание Тогда
		СтрокаОтбора = СтрокаОтбора + СокрЛП(Строка(ЭлементОтбора.ЗначениеС)) + " < " + ЭлементОтбора.Представление + " <= "+ СокрЛП(Строка(ЭлементОтбора.ЗначениеПо));
	КонецЕсли; 

КонецПроцедуры

// Процедура проверяет наличие и при необходимости добавляет новый элемент в писок истории отборов.
// 
// Параметры
//  НЕТ
//
// Возвращаемые значения
//  НЕТ
Процедура ДобавитьНовыйОтборВИсторию()

	СтрокаТекущихОтборов = "";
	СтруктураАктуальныхОтборов = Новый Структура;
	
	Для каждого ЭлементОтбора Из ОтборыДереваЗаказов Цикл
		Если ЭлементОтбора.Использование Тогда
			МассивИсторииОтбора = Новый Массив;
			МассивИсторииОтбора.Добавить(ЭлементОтбора.ВидСравнения);
			МассивИсторииОтбора.Добавить(ЭлементОтбора.Значение);
			МассивИсторииОтбора.Добавить(ЭлементОтбора.ЗначениеС);
			МассивИсторииОтбора.Добавить(ЭлементОтбора.ЗначениеПо);
			МассивИсторииОтбора.Добавить(ЭлементОтбора.Использование);
			ДописатьСтрокуОтбора(СтрокаТекущихОтборов, ЭлементОтбора);
			СтруктураАктуальныхОтборов.Вставить(ЭлементОтбора.Имя, МассивИсторииОтбора);
		КонецЕсли; 
	КонецЦикла;
	
	Если СтруктураАктуальныхОтборов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	НайденныйЭлементСпискаЗначений = Неопределено;
	Для каждого ЭлементСписка Из СписокИсторииОтбора Цикл
		Если ЭлементСписка.Представление = СтрокаТекущихОтборов Тогда
			НайденныйЭлементСпискаЗначений = ЭлементСписка;
		КонецЕсли; 
	КонецЦикла;
	
	Если НайденныйЭлементСпискаЗначений = Неопределено Тогда
	
		Если СписокИсторииОтбора.Количество() > 0 Тогда
			СписокИсторииОтбора.Вставить(0, СтруктураАктуальныхОтборов, СтрокаТекущихОтборов);
		Иначе
			СписокИсторииОтбора.Добавить(СтруктураАктуальныхОтборов, СтрокаТекущихОтборов);
		КонецЕсли;
		
		Если СписокИсторииОтбора.Количество() > 20 Тогда
			ИндУдаляемогоЭлемента = 20;
			Пока 1 = 1 Цикл
				Если (ИндУдаляемогоЭлемента + 1) > СписокИсторииОтбора.Количество() Тогда
					Прервать;
				КонецЕсли;
				СписокИсторииОтбора.Удалить(20);
			КонецЦикла; 
		КонецЕсли; 
		
	Иначе
		
		СписокИсторииОтбора.Сдвинуть(НайденныйЭлементСпискаЗначений, (-СписокИсторииОтбора.Индекс(НайденныйЭлементСпискаЗначений)));
		
	КонецЕсли; 
	
	СформироватьПодменюПоСпискуАктуальныхОтборов();

КонецПроцедуры

// Процедура формирует кноаки подменю для кнопки ИсторияОтборов командной панели КоманднаяПанельДерева.
// 
// Параметры
//  НЕТ
//
// Возвращаемые значения
//  НЕТ
Процедура СформироватьПодменюПоСпискуАктуальныхОтборов()

	КнопкаПодменю = ЭлементыФормы.КоманднаяПанельДерева.Кнопки.ИсторияОтборов;
	КнопкаПодменю.Кнопки.Очистить();
	Для каждого ЭлементСписка Из СписокИсторииОтбора Цикл
		НоваяКнопка = КнопкаПодменю.Кнопки.Добавить(Строка(СписокИсторииОтбора.Индекс(ЭлементСписка)), ТипКнопкиКоманднойПанели.Действие, ЭлементСписка.Представление, Новый Действие("ОбработкаИсторииОтбора"));
	КонецЦикла;

КонецПроцедуры

// Процедура выполняется по нажатию на одну из кнопок подменю
// кнопки ИсторияОтборов командной панели КоманднаяПанельДеревоПодбора.
// 
// Параметры
//  Кнопка - Кнопка командной панели, по нажатию на которую вызывается данная процедура
//
// Возвращаемые значения
//  НЕТ
Процедура ОбработкаИсторииОтбора(Кнопка)

	ИндексСпискаЗначений = Число(Кнопка.Имя);
	
	Если (ИндексСпискаЗначений + 1) > СписокИсторииОтбора.Количество() Тогда
		Возврат;
	КонецЕсли; 
	
	ЗначениеЭлементаСпискаЗначений = СписокИсторииОтбора[ИндексСпискаЗначений].Значение;
	Для каждого ЭлементСтруктуры Из ЗначениеЭлементаСпискаЗначений Цикл
		НайденныйЭлементОтбора = ОтборыДереваЗаказов.Найти(ЭлементСтруктуры.Ключ);
		Если НайденныйЭлементОтбора <> Неопределено Тогда
			НайденныйЭлементОтбора.Использование = Истина;
			Попытка
				НайденныйЭлементОтбора.ВидСравнения  = ЭлементСтруктуры.Значение[0];
			Исключение
			КонецПопытки;
			Попытка
				НайденныйЭлементОтбора.Значение      = ЭлементСтруктуры.Значение[1];
			Исключение
			КонецПопытки;
			Попытка
				НайденныйЭлементОтбора.ЗначениеС     = ЭлементСтруктуры.Значение[2];
			Исключение
			КонецПопытки;
			Попытка
				НайденныйЭлементОтбора.ЗначениеПо    = ЭлементСтруктуры.Значение[3];
			Исключение
			КонецПопытки;
		КонецЕсли; 
	КонецЦикла;
	
	мФормаИндикации.Открыть();
	
	ЗаполнитьДерево();
	
	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
	ДоступностьКнопкиОтключенияОтбора();
	СостояниеКнопкиОтбораПоТекущемуЗначению();

КонецПроцедуры

// Процедура переписывает строки при изменении объекта документа заказ поставщику
//
// Параметры
//  СтрокаОбъекта - Строка таблицы значений ТаблицаОбъектов
//
// Возвращаемые значения
//  НЕТ
//
Процедура ПереписатьСтрокиОбъекта(СтрокаОбъекта)

	СтрокиТаблицы = ТаблицаЗаказовПоставщикам.НайтиСтроки(Новый Структура("ИДОбъекта", СтрокаОбъекта.ИДОбъекта));
	
	Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		ТаблицаЗаказовПоставщикам.Удалить(СтрокаТаблицы);
	КонецЦикла; 
	
	Если СтрокаОбъекта.Объект.Товары.Количество() = 0 И СтрокаОбъекта.Объект.ВозвратнаяТара.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Сначала определим что реально уже поставлено,
	// что бы потом определить сколько осталось с учетом измененнного в заказе количества
	Если НЕ СтрокаОбъекта.Объект.Ссылка.Пустая() Тогда
		
		// По таблице ТОВАРЫ
		
		ЗапросСколькоПоставили = Новый Запрос;
		
		ЗапросСколькоПоставили.УстановитьПараметр("ТекущаяДата"       , КонецДня(ТекущаяДата()));
		ЗапросСколькоПоставили.УстановитьПараметр("ВыбЗаказПоставщику", СтрокаОбъекта.Объект.Ссылка);
		ЗапросСколькоПоставили.УстановитьПараметр("Тара"              , Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
		
		ЗапросСколькоПоставили.Текст = "
		|ВЫБРАТЬ
		|	ЗаказПоставщикуТовары.Номенклатура               КАК Номенклатура,
		|	ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СУММА(ВЫБОР КОГДА ОстаткиЗаказовПоставщикам.КоличествоОстаток ЕСТЬ NULL ТОГДА ЗаказПоставщикуТовары.Количество ИНАЧЕ (ЗаказПоставщикуТовары.Количество - ОстаткиЗаказовПоставщикам.КоличествоОстаток) КОНЕЦ) КАК Количество
		|ИЗ
		|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&ТекущаяДата, ЗаказПоставщику = &ВыбЗаказПоставщику И ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ) КАК ОстаткиЗаказовПоставщикам
		|ПО
		|	ЗаказПоставщикуТовары.Номенклатура = ОстаткиЗаказовПоставщикам.Номенклатура
		|	И
		|	ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры = ОстаткиЗаказовПоставщикам.ХарактеристикаНоменклатуры
		|	И
		|	ОстаткиЗаказовПоставщикам.СтатусПартии <> &Тара
		|
		|ГДЕ
		|	ЗаказПоставщикуТовары.Ссылка = &ВыбЗаказПоставщику
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПоставщикуТовары.Номенклатура,
		|	ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры
		|";
		
		ТаблицаПоставленныхТоваров = ЗапросСколькоПоставили.Выполнить().Выгрузить();
		
		// По таблице ТАРА
		
		ЗапросСколькоПоставилиТара = Новый Запрос;
		
		ЗапросСколькоПоставилиТара.УстановитьПараметр("ТекущаяДата"       , КонецДня(ТекущаяДата()));
		ЗапросСколькоПоставилиТара.УстановитьПараметр("ВыбЗаказПоставщику", СтрокаОбъекта.Объект.Ссылка);
		ЗапросСколькоПоставилиТара.УстановитьПараметр("Тара"              , Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
		
		ЗапросСколькоПоставилиТара.Текст = "
		|ВЫБРАТЬ
		|	ЗаказПоставщикуТара.Номенклатура               КАК Номенклатура,
		|	СУММА(ВЫБОР КОГДА ОстаткиЗаказовПоставщикам.КоличествоОстаток ЕСТЬ NULL ТОГДА ЗаказПоставщикуТара.Количество ИНАЧЕ (ЗаказПоставщикуТара.Количество - ОстаткиЗаказовПоставщикам.КоличествоОстаток) КОНЕЦ) КАК Количество
		|ИЗ
		|	Документ.ЗаказПоставщику.ВозвратнаяТара КАК ЗаказПоставщикуТара
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&ТекущаяДата, ЗаказПоставщику = &ВыбЗаказПоставщику И ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ) КАК ОстаткиЗаказовПоставщикам
		|ПО
		|	ЗаказПоставщикуТара.Номенклатура = ОстаткиЗаказовПоставщикам.Номенклатура
		|	И
		|	ОстаткиЗаказовПоставщикам.СтатусПартии = &Тара
		|
		|ГДЕ
		|	ЗаказПоставщикуТара.Ссылка = &ВыбЗаказПоставщику
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПоставщикуТара.Номенклатура
		|";
		
		ТаблицаПоставленныхТары = ЗапросСколькоПоставилиТара.Выполнить().Выгрузить();
		
		// Теперь посмотрим размещение заказов покупателей в заказах поставщикам
		
		ЗапросРазмещения = Новый Запрос;
		
		ЗапросРазмещения.УстановитьПараметр("ТекущаяДата"       , КонецДня(ТекущаяДата()));
		ЗапросРазмещения.УстановитьПараметр("ВыбЗаказПоставщику", СтрокаОбъекта.Объект.Ссылка);
		ЗапросРазмещения.УстановитьПараметр("ВидДвиженияПриход" , ВидДвиженияНакопления.Приход);
		ЗапросРазмещения.УстановитьПараметр("Тара"              , Перечисления.ТоварТара.Тара);
		
		ЗапросРазмещения.Текст = "
		|ВЫБРАТЬ
		|	РазмещениеЗаказовПокупателей.ЗаказПокупателя            КАК ЗаказПокупателя,
		|	РазмещениеЗаказовПокупателей.Номенклатура               КАК Номенклатура,
		|	РазмещениеЗаказовПокупателей.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ВЫБОР КОГДА РазмещениеЗаказовПокупателей.ТоварТара = &Тара ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ КАК Тара,
		|	СУММА(ВЫБОР КОГДА РазмещениеЗаказовПокупателей.ВидДвижения = &ВидДвиженияПриход ТОГДА РазмещениеЗаказовПокупателей.Количество ИНАЧЕ (-1 * РазмещениеЗаказовПокупателей.Количество) КОНЕЦ) КАК Количество
		|
		|ИЗ
		|	РегистрНакопления.РазмещениеЗаказовПокупателей КАК РазмещениеЗаказовПокупателей
		|
		|ГДЕ
		|	РазмещениеЗаказовПокупателей.Период < &ТекущаяДата
		|	И
		|	РазмещениеЗаказовПокупателей.Регистратор <> &ВыбЗаказПоставщику
		|	И
		|	РазмещениеЗаказовПокупателей.ЗаказПоставщику = &ВыбЗаказПоставщику
		|
		|СГРУППИРОВАТЬ ПО
		|	РазмещениеЗаказовПокупателей.ЗаказПокупателя,
		|	РазмещениеЗаказовПокупателей.Номенклатура,
		|	РазмещениеЗаказовПокупателей.ХарактеристикаНоменклатуры,
		|	ВЫБОР КОГДА РазмещениеЗаказовПокупателей.ТоварТара = &Тара ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ
		|
		|";

		ТаблицаРазмещенияЗаказов = ЗапросРазмещения.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	// ТОВАРЫ
	// Найдем остатки непоставленных товаров по объекту
	
	ТаблицаНоменклатурыОбъекта = СтрокаОбъекта.Объект.Товары.Выгрузить();
	ТаблицаНоменклатурыОбъекта.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЗаказПокупателя", "Количество");
	
	Если ТипЗнч(ТаблицаПоставленныхТоваров) = Тип("ТаблицаЗначений") Тогда
	
		Для каждого СтрокаТаблицыНоменклатурыОбъекта Из ТаблицаНоменклатурыОбъекта Цикл
		
			НайденныеСтроки = ТаблицаПоставленныхТоваров.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СтрокаТаблицыНоменклатурыОбъекта.Номенклатура, СтрокаТаблицыНоменклатурыОбъекта.ХарактеристикаНоменклатуры));
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
				Если НайденнаяСтрока.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если НайденнаяСтрока.Количество >= СтрокаТаблицыНоменклатурыОбъекта.Количество Тогда
					НайденнаяСтрока.Количество = НайденнаяСтрока.Количество - СтрокаТаблицыНоменклатурыОбъекта.Количество;
					СтрокаТаблицыНоменклатурыОбъекта.Количество = 0;
				Иначе
					СтрокаТаблицыНоменклатурыОбъекта.Количество = СтрокаТаблицыНоменклатурыОбъекта.Количество - НайденнаяСтрока.Количество;
					НайденнаяСтрока.Количество = 0;
				КонецЕсли; 
			
			КонецЦикла; 
		
		КонецЦикла; 
	
	КонецЕсли; 
	
	// Теперь посмотрим размещение заказов покупателей в заказах поставщикам
	Если ТипЗнч(ТаблицаРазмещенияЗаказов) = Тип("ТаблицаЗначений") Тогда
		
		Для каждого СтрокаТЧ Из ТаблицаНоменклатурыОбъекта Цикл
			
			Если СтрокаТЧ.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли; 
		
			Если НЕ ЗначениеНеЗаполнено(СтрокаТЧ.ЗаказПокупателя) Тогда
				
				НоваяСтрока = ТаблицаЗаказовПоставщикам.Добавить();
				НоваяСтрока.Номенклатура               = СтрокаТЧ.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
				НоваяСтрока.Тара                       = Ложь;
				НоваяСтрока.ЗаказПокупателя            = СтрокаТЧ.ЗаказПокупателя;
				НоваяСтрока.ДатаПоставки               = СтрокаОбъекта.Объект.ДатаПоступления;
				НоваяСтрока.Количество                 = СтрокаТЧ.Количество;
				НоваяСтрока.ИДОбъекта                  = СтрокаОбъекта.ИДОбъекта;
				СтрокаТЧ.Количество = 0;
				Продолжить;
				
			КонецЕсли;
			
			СтрокиРазмещения = ТаблицаРазмещенияЗаказов.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Тара", СтрокаТЧ.Номенклатура, СтрокаТЧ.ХарактеристикаНоменклатуры, Ложь));
			Для каждого СтрокаРазмещения Из СтрокиРазмещения Цикл
			
				Если СтрокаРазмещения.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаРазмещения.Количество >= СтрокаТЧ.Количество Тогда
					НоваяСтрока = ТаблицаЗаказовПоставщикам.Добавить();
					НоваяСтрока.Номенклатура               = СтрокаТЧ.Номенклатура;
					НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
					НоваяСтрока.Тара                       = Ложь;
					НоваяСтрока.ЗаказПокупателя            = СтрокаРазмещения.ЗаказПокупателя;
					НоваяСтрока.ДатаПоставки               = СтрокаОбъекта.Объект.ДатаПоступления;
					НоваяСтрока.Количество                 = СтрокаТЧ.Количество;
					НоваяСтрока.ИДОбъекта                  = СтрокаОбъекта.ИДОбъекта;
					СтрокаРазмещения.Количество = СтрокаРазмещения.Количество - СтрокаТЧ.Количество;
					СтрокаТЧ.Количество = 0;
				Иначе
					НоваяСтрока = ТаблицаЗаказовПоставщикам.Добавить();
					НоваяСтрока.Номенклатура               = СтрокаТЧ.Номенклатура;
					НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
					НоваяСтрока.Тара                       = Ложь;
					НоваяСтрока.ЗаказПокупателя            = СтрокаРазмещения.ЗаказПокупателя;
					НоваяСтрока.ДатаПоставки               = СтрокаОбъекта.Объект.ДатаПоступления;
					НоваяСтрока.Количество                 = СтрокаРазмещения.Количество;
					НоваяСтрока.ИДОбъекта                  = СтрокаОбъекта.ИДОбъекта;
					СтрокаТЧ.Количество = СтрокаТЧ.Количество - СтрокаРазмещения.Количество;
					СтрокаРазмещения.Количество = 0;
				КонецЕсли; 
			
			КонецЦикла; 
		
		КонецЦикла; 
		
	КонецЕсли;
	
	// Теперь обработаем оставшиеся строки табличной части
	
	Для каждого СтрокаТЧ Из ТаблицаНоменклатурыОбъекта Цикл
	
		Если СтрокаТЧ.Количество <= 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		НоваяСтрока = ТаблицаЗаказовПоставщикам.Добавить();
		НоваяСтрока.Номенклатура               = СтрокаТЧ.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
		НоваяСтрока.Тара                       = Ложь;
		НоваяСтрока.ЗаказПокупателя            = ?(ЗначениеНеЗаполнено(СтрокаТЧ.ЗаказПокупателя), Неопределено, СтрокаТЧ.ЗаказПокупателя);
		НоваяСтрока.ДатаПоставки               = СтрокаОбъекта.Объект.ДатаПоступления;
		НоваяСтрока.Количество                 = СтрокаТЧ.Количество;
		НоваяСтрока.ИДОбъекта                  = СтрокаОбъекта.ИДОбъекта;
		СтрокаТЧ.Количество = 0;
	
	КонецЦикла; 

	// Теперь тоже самое по ТАРЕ
	// Найдем остатки непоставленных товаров по объекту
	
	ТаблицаТарыОбъекта = СтрокаОбъекта.Объект.ВозвратнаяТара.Выгрузить();
	ТаблицаТарыОбъекта.Свернуть("Номенклатура, ЗаказПокупателя", "Количество");
	
	Если ТипЗнч(ТаблицаПоставленныхТары) = Тип("ТаблицаЗначений") Тогда
	
		Для каждого СтрокаТаблицыТарыОбъекта Из ТаблицаТарыОбъекта Цикл
		
			НайденныеСтроки = ТаблицаПоставленныхТары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТаблицыТарыОбъекта.Номенклатура));
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
				Если НайденнаяСтрока.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если НайденнаяСтрока.Количество >= СтрокаТаблицыТарыОбъекта.Количество Тогда
					НайденнаяСтрока.Количество = НайденнаяСтрока.Количество - СтрокаТаблицыТарыОбъекта.Количество;
					СтрокаТаблицыТарыОбъекта.Количество = 0;
				Иначе
					СтрокаТаблицыТарыОбъекта.Количество = СтрокаТаблицыТарыОбъекта.Количество - НайденнаяСтрока.Количество;
					НайденнаяСтрока.Количество = 0;
				КонецЕсли; 
			
			КонецЦикла; 
		
		КонецЦикла; 
	
	КонецЕсли; 
	
	// Теперь посмотрим размещение заказов покупателей в заказах поставщикам
	Если ТипЗнч(ТаблицаРазмещенияЗаказов) = Тип("ТаблицаЗначений") Тогда
		
		Для каждого СтрокаТЧ Из ТаблицаТарыОбъекта Цикл
			
			Если СтрокаТЧ.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли; 
		
			Если НЕ ЗначениеНеЗаполнено(СтрокаТЧ.ЗаказПокупателя) Тогда
				
				НоваяСтрока = ТаблицаЗаказовПоставщикам.Добавить();
				НоваяСтрока.Номенклатура               = СтрокаТЧ.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				НоваяСтрока.Тара                       = Истина;
				НоваяСтрока.ЗаказПокупателя            = СтрокаТЧ.ЗаказПокупателя;
				НоваяСтрока.ДатаПоставки               = СтрокаОбъекта.Объект.ДатаПоступления;
				НоваяСтрока.Количество                 = СтрокаТЧ.Количество;
				НоваяСтрока.ИДОбъекта                  = СтрокаОбъекта.ИДОбъекта;
				СтрокаТЧ.Количество = 0;
				Продолжить;
				
			КонецЕсли;
			
			СтрокиРазмещения = ТаблицаРазмещенияЗаказов.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Тара", СтрокаТЧ.Номенклатура, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), Истина));
			Для каждого СтрокаРазмещения Из СтрокиРазмещения Цикл
			
				Если СтрокаРазмещения.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаРазмещения.Количество >= СтрокаТЧ.Количество Тогда
					НоваяСтрока = ТаблицаЗаказовПоставщикам.Добавить();
					НоваяСтрока.Номенклатура               = СтрокаТЧ.Номенклатура;
					НоваяСтрока.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
					НоваяСтрока.Тара                       = Истина;
					НоваяСтрока.ЗаказПокупателя            = СтрокаРазмещения.ЗаказПокупателя;
					НоваяСтрока.ДатаПоставки               = СтрокаОбъекта.Объект.ДатаПоступления;
					НоваяСтрока.Количество                 = СтрокаТЧ.Количество;
					НоваяСтрока.ИДОбъекта                  = СтрокаОбъекта.ИДОбъекта;
					СтрокаРазмещения.Количество = СтрокаРазмещения.Количество - СтрокаТЧ.Количество;
					СтрокаТЧ.Количество = 0;
				Иначе
					НоваяСтрока = ТаблицаЗаказовПоставщикам.Добавить();
					НоваяСтрока.Номенклатура               = СтрокаТЧ.Номенклатура;
					НоваяСтрока.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
					НоваяСтрока.Тара                       = Истина;
					НоваяСтрока.ЗаказПокупателя            = СтрокаРазмещения.ЗаказПокупателя;
					НоваяСтрока.ДатаПоставки               = СтрокаОбъекта.Объект.ДатаПоступления;
					НоваяСтрока.Количество                 = СтрокаРазмещения.Количество;
					НоваяСтрока.ИДОбъекта                  = СтрокаОбъекта.ИДОбъекта;
					СтрокаТЧ.Количество = СтрокаТЧ.Количество - СтрокаРазмещения.Количество;
					СтрокаРазмещения.Количество = 0;
				КонецЕсли; 
			
			КонецЦикла; 
		
		КонецЦикла; 
		
	КонецЕсли;
	
	// Теперь обработаем оставшиеся строки табличной части
	
	Для каждого СтрокаТЧ Из ТаблицаТарыОбъекта Цикл
	
		Если СтрокаТЧ.Количество <= 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		НоваяСтрока = ТаблицаЗаказовПоставщикам.Добавить();
		НоваяСтрока.Номенклатура               = СтрокаТЧ.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		НоваяСтрока.Тара                       = Истина;
		НоваяСтрока.ЗаказПокупателя            = ?(ЗначениеНеЗаполнено(СтрокаТЧ.ЗаказПокупателя), Неопределено, СтрокаТЧ.ЗаказПокупателя);
		НоваяСтрока.ДатаПоставки               = СтрокаОбъекта.Объект.ДатаПоступления;
		НоваяСтрока.Количество                 = СтрокаТЧ.Количество;
		НоваяСтрока.ИДОбъекта                  = СтрокаОбъекта.ИДОбъекта;
		СтрокаТЧ.Количество = 0;
	
	КонецЦикла; 

КонецПроцедуры

// Процедура сохраняет все данные по объектам таблицы ТаблицаОбъектов в структуру
//  с целью возможности обратного восстановления
//
// Параметры
//  НЕТ
//
// Возвращаемые значения
//  НЕТ
//
Процедура ЗаполнитьТаблицуОбъектовДоЗаполнения()

	мФормаИндикации.КомментарийОбработкиДанных = "Сохраняются данных объектов ...";
	мФормаИндикации.МаксимальноеЗначение = ТаблицаОбъектов.Количество() - 1;
	
	Для каждого СтрокаОбъекта Из ТаблицаОбъектов Цикл
	
		мФормаИндикации.Значение = ТаблицаОбъектов.Индекс(СтрокаОбъекта);
		
		СтрокаНовогоОбъекта = ТаблицаОбъектовДоЗаполнения.Добавить();
		СтрокаНовогоОбъекта.ИДОбъекта = СтрокаОбъекта.ИДОбъекта;
		СтрокаНовогоОбъекта.СтруктураДанныхОбъекта = СкопироватьДанныеОбъектаВСтруктуру(СтрокаОбъекта.Объект);
	
	КонецЦикла;

КонецПроцедуры

// Процедура производит автораспределение заказов поставщикам по заказам покупателей
//
// Параметры
//  СтруктураНастройкиПараметров - структура, данные, по которым происходит выборочное автораспределение
//                                 ключ - ВыбЗаказПокупателя, ДокументСсылка.ЗаказПокупателю, по которому надо переписывать строки
//                                 ключ - СписокИДОбъектов, СписокЗначений ИД объектов по которым надо переписывать строки
//                                 ключ - ТаблицаВыбраннойНоменклатуры, ТаблицаЗначений с полями Номенклатура, ХарактеристикаНоменклатуры
//
// Возвращаемые значения
//  НЕТ
//
Процедура АвтоперераспределениеСтрокЗаказовПоставщикамПодЗаказыПокупателей(СтруктураНастройкиПараметров = Неопределено)

	ТаблицаВыбраннойНоменклатуры = Неопределено;
	Если ТипЗнч(СтруктураНастройкиПараметров) = Тип("Структура") Тогда
		СписокИДОбъектов   = СтруктураНастройкиПараметров.СписокИДОбъектов;
		ВыбЗаказПокупателя = СтруктураНастройкиПараметров.ВыбЗаказПокупателя;
		СтруктураНастройкиПараметров.Свойство("ТаблицаВыбраннойНоменклатуры", ТаблицаВыбраннойНоменклатуры);
	Иначе
		СписокИДОбъектов   = Неопределено;
		ВыбЗаказПокупателя = Неопределено;
	КонецЕсли; 
	
	мФормаИндикации.КомментарийОбработкиДанных = "Заполняются данные об объектах ...";
	мФормаИндикации.МаксимальноеЗначение = ТаблицаОбъектов.Количество() - 1;
	
	// Заполним строки таблицы, по данным объектов
	Для каждого СтрокаОбъекта Из ТаблицаОбъектов Цикл
		мФормаИндикации.Значение = ТаблицаОбъектов.Индекс(СтрокаОбъекта);
		Если СписокИДОбъектов <> Неопределено Тогда
			Если СписокИДОбъектов.НайтиПоЗначению(СтрокаОбъекта.ИДОбъекта) <> Неопределено Тогда
				ПереписатьСтрокиОбъекта(СтрокаОбъекта);
			КонецЕсли; 
		Иначе
			ПереписатьСтрокиОбъекта(СтрокаОбъекта);
		КонецЕсли; 
	КонецЦикла; 

	ТаблицаЗаказовПоставщикам.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЗаказПокупателя, ДатаПоставки, ИДОбъекта, Тара", "Количество, КоличествоОстаток");
	
	Для каждого СтрокаТаблицы Из ТаблицаЗаказовПоставщикам Цикл
		СтрокаТаблицы.КоличествоОстаток = СтрокаТаблицы.Количество;
	КонецЦикла;
	
	ТаблицаПотребностиПоЗаказамПокупателей.Сортировать("Номенклатура ВОЗР, ХарактеристикаНоменклатуры ВОЗР, ЗаказПокупателя ВОЗР, ДатаПотребности ВОЗР");
	
	СписокОбъектовДляПереписиСтрок = Новый СписокЗначений;
	
	мФормаИндикации.КомментарийОбработкиДанных = "Заполняются данные об объектах ...";
	мФормаИндикации.МаксимальноеЗначение = ТаблицаПотребностиПоЗаказамПокупателей.Количество() - 1;
	
	Для каждого СтрокаТаблицы Из ТаблицаПотребностиПоЗаказамПокупателей Цикл
		
		мФормаИндикации.Значение = ТаблицаПотребностиПоЗаказамПокупателей.Индекс(СтрокаТаблицы);
		
		Если ВыбЗаказПокупателя <> Неопределено И СтрокаТаблицы.ЗаказПокупателя <> ВыбЗаказПокупателя Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТаблицаВыбраннойНоменклатуры <> Неопределено Тогда
			СтрокиТаблицыВыбраннойНоменклатуры = ТаблицаВыбраннойНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Тара", СтрокаТаблицы.Номенклатура, СтрокаТаблицы.ХарактеристикаНоменклатуры, СтрокаТаблицы.Тара));
			Если СтрокиТаблицыВыбраннойНоменклатуры.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		
		// Узнаем реальный остаток потребности, обработав те строки заказов поставщикам, по которым
		//  уже указан заказ покупателя, либо поставлен в соответствие при выполнении процедуры ПереписатьСтрокиОбъекта
		
		ОстатокПотребности = СтрокаТаблицы.КоличествоПлана;
		
		СтрокиСЗаказомПокупателя = ТаблицаЗаказовПоставщикам.НайтиСтроки(Новый Структура("ЗаказПокупателя, Номенклатура, ХарактеристикаНоменклатуры, Тара", СтрокаТаблицы.ЗаказПокупателя, СтрокаТаблицы.Номенклатура, СтрокаТаблицы.ХарактеристикаНоменклатуры, СтрокаТаблицы.Тара));
		Для каждого СтрокаСЗаказомПокупателя Из СтрокиСЗаказомПокупателя Цикл
			ОстатокПотребности = ОстатокПотребности - СтрокаСЗаказомПокупателя.КоличествоОстаток;
		КонецЦикла;
		
		// Теперь обработаем те заказы поставщикам, в которых не указаны заказы покупателей
		Если ОстатокПотребности > 0 Тогда
		
			СтрокиСЗаказомПокупателя = ТаблицаЗаказовПоставщикам.НайтиСтроки(Новый Структура("ЗаказПокупателя, Номенклатура, ХарактеристикаНоменклатуры, Тара", Неопределено, СтрокаТаблицы.Номенклатура, СтрокаТаблицы.ХарактеристикаНоменклатуры, СтрокаТаблицы.Тара));
			Для каждого СтрокаСЗаказомПокупателя Из СтрокиСЗаказомПокупателя Цикл
				
				Если ОстатокПотребности <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаСЗаказомПокупателя.КоличествоОстаток <= 0 ИЛИ СтрокаСЗаказомПокупателя.ДатаПоставки > СтрокаТаблицы.ДатаПотребности Тогда
					Продолжить;
				КонецЕсли;
			
				СтрокаОбъекта = ТаблицаОбъектов.Найти(СтрокаСЗаказомПокупателя.ИДОбъекта, "ИДОбъекта");
				Если СтрокаОбъекта = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ЧтоРаспределяем = Мин(СтрокаСЗаказомПокупателя.КоличествоОстаток, ОстатокПотребности);
				Распределено = 0;
				СтрокиТЧОбъекта = Новый Массив;
				Если СтрокаТаблицы.Тара Тогда
					Для каждого СтрокаТЧОбъекта Из СтрокаОбъекта.Объект.ВозвратнаяТара Цикл
						Если ЗначениеНеЗаполнено(СтрокаТЧОбъекта.ЗаказПокупателя) И СтрокаТЧОбъекта.Номенклатура = СтрокаТаблицы.Номенклатура Тогда
							СтрокиТЧОбъекта.Добавить(СтрокаТЧОбъекта);
						КонецЕсли; 
					КонецЦикла; 
				Иначе
					Для каждого СтрокаТЧОбъекта Из СтрокаОбъекта.Объект.Товары Цикл
						Если ЗначениеНеЗаполнено(СтрокаТЧОбъекта.ЗаказПокупателя) И СтрокаТЧОбъекта.Номенклатура = СтрокаТаблицы.Номенклатура И СтрокаТЧОбъекта.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры Тогда
							СтрокиТЧОбъекта.Добавить(СтрокаТЧОбъекта);
						КонецЕсли; 
					КонецЦикла; 
				КонецЕсли; 
				
				Для каждого СтрокаТЧОбъекта Из СтрокиТЧОбъекта Цикл
				
					Попытка
						СтрокаОбъекта.Объект.Заблокировать();
					Исключение
						Прервать;
					КонецПопытки;
						
					Если СтрокаТЧОбъекта.Количество > ЧтоРаспределяем Тогда
						
						Если СтрокаТаблицы.Тара Тогда
							ТаблицаЗначенийПоТабличнойЧасти = СтрокаОбъекта.Объект.ВозвратнаяТара.Выгрузить();
							НоваяСтрокаТЧОбъекта = СтрокаОбъекта.Объект.ВозвратнаяТара.Добавить();
						Иначе
							ТаблицаЗначенийПоТабличнойЧасти = СтрокаОбъекта.Объект.Товары.Выгрузить();
							НоваяСтрокаТЧОбъекта = СтрокаОбъекта.Объект.Товары.Добавить();
						КонецЕсли;
						Для каждого КолонкаТЧ Из ТаблицаЗначенийПоТабличнойЧасти.Колонки Цикл
							Попытка
								НоваяСтрокаТЧОбъекта[КолонкаТЧ.Имя] = СтрокаТЧОбъекта[КолонкаТЧ.Имя];
							Исключение
							КонецПопытки;
						КонецЦикла;
						
						НоваяСтрокаТЧОбъекта.ЗаказПокупателя = СтрокаТаблицы.ЗаказПокупателя;
						НоваяСтрокаТЧОбъекта.Количество      = ЧтоРаспределяем;
						
						Распределено = Распределено + НоваяСтрокаТЧОбъекта.Количество;
						
						СтрокаТЧОбъекта.Количество = СтрокаТЧОбъекта.Количество - ЧтоРаспределяем;
						
						Если НЕ СтрокаТаблицы.Тара Тогда
							РассчитатьСуммуТабЧасти(НоваяСтрокаТЧОбъекта, СтрокаОбъекта.Объект);
						Иначе
							РассчитатьКоличествоМестТабЧасти(НоваяСтрокаТЧОбъекта, СтрокаОбъекта.Объект);
							РассчитатьСуммуТабЧасти(НоваяСтрокаТЧОбъекта, СтрокаОбъекта.Объект);
							РассчитатьСуммуНДСТабЧасти(НоваяСтрокаТЧОбъекта, СтрокаОбъекта.Объект);
						КонецЕсли;
						
						Если НЕ СтрокаТаблицы.Тара Тогда
							РассчитатьСуммуТабЧасти(СтрокаТЧОбъекта, СтрокаОбъекта.Объект);
						Иначе
							РассчитатьКоличествоМестТабЧасти(СтрокаТЧОбъекта, СтрокаОбъекта.Объект);
							РассчитатьСуммуТабЧасти(СтрокаТЧОбъекта, СтрокаОбъекта.Объект);
							РассчитатьСуммуНДСТабЧасти(СтрокаТЧОбъекта, СтрокаОбъекта.Объект);
						КонецЕсли;
						
						СтрокаСЗаказомПокупателя.КоличествоОстаток = СтрокаСЗаказомПокупателя.КоличествоОстаток - ЧтоРаспределяем;
						
					Иначе
						
						СтрокаСЗаказомПокупателя.КоличествоОстаток = СтрокаСЗаказомПокупателя.КоличествоОстаток - СтрокаТЧОбъекта.Количество;
						СтрокаТЧОбъекта.ЗаказПокупателя = СтрокаТаблицы.ЗаказПокупателя;
						Распределено = Распределено + СтрокаТЧОбъекта.Количество;
						
					КонецЕсли; 
					
					Если СписокОбъектовДляПереписиСтрок.НайтиПоЗначению(СтрокаОбъекта.ИДОбъекта) = Неопределено Тогда
						СписокОбъектовДляПереписиСтрок.Добавить(СтрокаОбъекта.ИДОбъекта);
					КонецЕсли; 
					
				КонецЦикла; 
				
				ОстатокПотребности = ОстатокПотребности - Распределено;
				
			КонецЦикла;
		
		КонецЕсли; 

	КонецЦикла;
	
	мФормаИндикации.КомментарийОбработкиДанных = "Заполняются данные об объектах ...";
	мФормаИндикации.МаксимальноеЗначение = СписокОбъектовДляПереписиСтрок.Количество() - 1;
	
	Для каждого ЭлементСписка Из СписокОбъектовДляПереписиСтрок Цикл
		
		мФормаИндикации.Значение = СписокОбъектовДляПереписиСтрок.Индекс(ЭлементСписка);
		СтрокаОбъекта = ТаблицаОбъектов.Найти(ЭлементСписка.Значение, "ИДОбъекта");
		Если СтрокаОбъекта <> Неопределено Тогда
			
			Попытка
				СтрокаОбъекта.Объект.Заблокировать();
			Исключение
				Продолжить;
			КонецПопытки;
			
			СтрокаОбъекта.Объект.Товары.Свернуть("Номенклатура, Цена, ХарактеристикаНоменклатуры, ЗаказПокупателя, ЕдиницаИзмерения, Коэффициент", "Количество");
			Для каждого СтрокаТЧ Из СтрокаОбъекта.Объект.Товары Цикл
				СтрокаТЧ.СтавкаНДС = СтрокаТЧ.Номенклатура.СтавкаНДС;
				РассчитатьКоличествоМестТабЧасти(СтрокаТЧ, СтрокаОбъекта.Объект);
				РассчитатьСуммуТабЧасти(СтрокаТЧ, СтрокаОбъекта.Объект);
				РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, СтрокаОбъекта.Объект);
			КонецЦикла; 
			
			СтрокаОбъекта.Объект.ВозвратнаяТара.Свернуть("Номенклатура, Цена, ЗаказПокупателя", "Количество");
			Для каждого СтрокаТЧ Из СтрокаОбъекта.Объект.ВозвратнаяТара Цикл
				РассчитатьСуммуТабЧасти(СтрокаТЧ, СтрокаОбъекта.Объект);
			КонецЦикла; 
			
			ПереписатьСтрокиОбъекта(СтрокаОбъекта);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

// Функция формирует список значений для поля выбора УровеньРазворотаДерева.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция СформироватьСписокВыбораРазворотовДерева()

	СписокЗначенийРазворотовДерева = Новый СписокЗначений;
	
	СписокЗначенийРазворотовДерева.Добавить(0, "Номенклатура");
	СписокЗначенийРазворотовДерева.Добавить(1, "Дата потребности");
	СписокЗначенийРазворотовДерева.Добавить(2, "Заказ покупателя");
	СписокЗначенийРазворотовДерева.Добавить(3, "Заказ поставщику");
	
	Возврат СписокЗначенийРазворотовДерева;

КонецФункции // СформироватьСписокВыбораРазворотовДерева()

// Процедура заполняет дерево данными из таблицы значений
//
// Параметры
//  ДеревоДляЗаполнения - ДеревоЗначений, которое надо заполнить данными
//
// Возвращаемые значения
//  НЕТ
//
Процедура ЗаполнитьДерево(ДеревоДляЗаполнения = Неопределено)

	мФормаИндикации.КомментарийОбработкиДанных = "Заполнется дерево значений ...";
	
	Если ДеревоДляЗаполнения = Неопределено Тогда
		
		МассивСтарыхЗначений = Новый Массив;
		Если ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущиеДанные <> Неопределено Тогда
			Если ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущиеДанные.Уровень() = 0 Тогда
				МассивСтарыхЗначений.Добавить(ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущиеДанные.ОсновныеДанные);
				МассивСтарыхЗначений.Добавить(Неопределено);
				МассивСтарыхЗначений.Добавить(Неопределено);
				МассивСтарыхЗначений.Добавить(Неопределено);
				МассивСтарыхЗначений.Добавить(0);
			ИначеЕсли ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущиеДанные.Уровень() = 1 Тогда
				МассивСтарыхЗначений.Добавить(ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущиеДанные.Родитель.ОсновныеДанные);
				МассивСтарыхЗначений.Добавить(ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущиеДанные.ОсновныеДанные);
				МассивСтарыхЗначений.Добавить(Неопределено);
				МассивСтарыхЗначений.Добавить(Неопределено);
				МассивСтарыхЗначений.Добавить(1);
			ИначеЕсли ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущиеДанные.Уровень() = 2 Тогда
				МассивСтарыхЗначений.Добавить(ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущиеДанные.Родитель.Родитель.ОсновныеДанные);
				МассивСтарыхЗначений.Добавить(ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущиеДанные.Родитель.ОсновныеДанные);
				МассивСтарыхЗначений.Добавить(ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущиеДанные.ОсновныеДанные);
				МассивСтарыхЗначений.Добавить(Неопределено);
				МассивСтарыхЗначений.Добавить(2);
			ИначеЕсли ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущиеДанные.Уровень() = 3 Тогда
				МассивСтарыхЗначений.Добавить(ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущиеДанные.Родитель.Родитель.Родитель.ОсновныеДанные);
				МассивСтарыхЗначений.Добавить(ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущиеДанные.Родитель.Родитель.ОсновныеДанные);
				МассивСтарыхЗначений.Добавить(ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущиеДанные.Родитель.ОсновныеДанные);
				МассивСтарыхЗначений.Добавить(ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущиеДанные.ОсновныеДанные);
				МассивСтарыхЗначений.Добавить(3);
			КонецЕсли;
			МассивСтарыхЗначений.Добавить(ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущаяКолонка.Имя);
		КонецЕсли; 
	
	КонецЕсли; 
	
	ТаблицаЗаказовПоставщикам.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЗаказПокупателя, ДатаПоставки, ИДОбъекта, Тара", "Количество, КоличествоОстаток");
	
	Для каждого СтрокаТаблицы Из ТаблицаЗаказовПоставщикам Цикл
		СтрокаТаблицы.КоличествоОстаток = СтрокаТаблицы.Количество;
	КонецЦикла;
	
	Если ДеревоДляЗаполнения = Неопределено Тогда
		ДеревоСоответствияЗаказов.Строки.Очистить();
	Иначе
		ДеревоДляЗаполнения.Строки.Очистить();
	КонецЕсли; 
	
	СтрокаДатаПотребности = Неопределено;
	СтрокаНоменклатура    = Неопределено;
	
	ПоследняяДатаПотребности            = Неопределено;
	ПоследняяНоменклатура               = Неопределено;
	ПоследняяХарактеристикаНоменклатуры = Неопределено;
	
	КоличествоПотребностиДатаПотребности = 0;
	КоличествоПотребностиНоменклатура    = 0;
	
	КоличествоЗаказыДатаПотребности = 0;
	КоличествоЗаказыНоменклатура    = 0;
	
	ТаблицаПотребностиПоЗаказамПокупателей.Сортировать("Номенклатура ВОЗР, ХарактеристикаНоменклатуры ВОЗР, ЗаказПокупателя ВОЗР, ДатаПотребности ВОЗР");
	
	мФормаИндикации.МаксимальноеЗначение = ТаблицаПотребностиПоЗаказамПокупателей.Количество() - 1;
	
	Для каждого СтрокаТаблицы Из ТаблицаПотребностиПоЗаказамПокупателей Цикл
		
		мФормаИндикации.Значение = ТаблицаПотребностиПоЗаказамПокупателей.Индекс(СтрокаТаблицы);
		
		// Номенклатура, характеристика номенклатуры
		Если ПоследняяНоменклатура <> СтрокаТаблицы.Номенклатура ИЛИ ПоследняяХарактеристикаНоменклатуры <> СтрокаТаблицы.ХарактеристикаНоменклатуры Тогда
		
			Если СтрокаНоменклатура <> Неопределено Тогда
				СтрокаНоменклатура.КоличествоПотребности = КоличествоПотребностиНоменклатура;
			КонецЕсли; 
			
			КоличествоПотребностиНоменклатура = 0;
			Если ДеревоДляЗаполнения = Неопределено Тогда
				СтрокаНоменклатура = ДеревоСоответствияЗаказов.Строки.Добавить();
			Иначе
				СтрокаНоменклатура = ДеревоДляЗаполнения.Строки.Добавить();
			КонецЕсли; 
			
			СтрокаНоменклатура.Номенклатура               = СтрокаТаблицы.Номенклатура;
			СтрокаНоменклатура.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			СтрокаНоменклатура.Тара                       = СтрокаТаблицы.Тара;
			СтрокаНоменклатура.ОсновныеДанные             = СокрЛП(СтрокаТаблицы.Номенклатура);
			Если СтрокаТаблицы.Номенклатура.ВестиУчетПоХарактеристикам Тогда
				СтрокаНоменклатура.ОсновныеДанные = СтрокаНоменклатура.ОсновныеДанные + " (" + ?(СтрокаТаблицы.ХарактеристикаНоменклатуры.Пустая(),"Характеристика не указана", СокрЛП(СтрокаТаблицы.ХарактеристикаНоменклатуры)) + ")";
			КонецЕсли; 
			Если СтрокаТаблицы.Тара Тогда
				СтрокаНоменклатура.ОсновныеДанные = СтрокаНоменклатура.ОсновныеДанные + ", ТАРА";
			КонецЕсли; 
			
			ПоследняяНоменклатура               = СтрокаТаблицы.Номенклатура;
			ПоследняяХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			
			ПоследняяДатаПотребности = Неопределено;
			
		КонецЕсли;
		
		// Дата потребности
		Если ПоследняяДатаПотребности <> СтрокаТаблицы.ДатаПотребности Тогда
			
			Если СтрокаДатаПотребности <> Неопределено Тогда
				СтрокаДатаПотребности.КоличествоПотребности = КоличествоПотребностиДатаПотребности;
			КонецЕсли; 
			
			КоличествоПотребностиДатаПотребности = 0;
			
			СтрокаДатаПотребности = СтрокаНоменклатура.Строки.Добавить();
			
			СтрокаДатаПотребности.ОсновныеДанные = СтрокаТаблицы.ДатаПотребности;
			
			СтрокаДатаПотребности.КоличествоПотребности = СтрокаТаблицы.КоличествоПлана;
			
		КонецЕсли;
		
		// Заказ покупателя
		СтрокаЗаказПокупателя = СтрокаДатаПотребности.Строки.Добавить();
		
		СтрокаЗаказПокупателя.ЗаказПокупателя = СтрокаТаблицы.ЗаказПокупателя;
		СтрокаЗаказПокупателя.Контрагент      = СтрокаТаблицы.ЗаказПокупателя.Контрагент;
		СтрокаЗаказПокупателя.ОсновныеДанные  = СтрокаТаблицы.ЗаказПокупателя.Метаданные().Синоним + " № " + СокрЛП(СтрокаТаблицы.ЗаказПокупателя.Номер) + " от " + СокрЛП(Формат(СтрокаТаблицы.ЗаказПокупателя.Дата, "ДФ=dd.MM.yyyy")) + " (дата отгрузки " + ?(СтрокаТаблицы.ЗаказПокупателя.ДатаОтгрузки = '00010101000000', "не указана", Формат(СтрокаТаблицы.ЗаказПокупателя.ДатаОтгрузки, "ДФ=dd.MM.yyyy")) + ")";
		СтрокаЗаказПокупателя.КоличествоПотребности = СтрокаТаблицы.КоличествоПлана;
		
		КоличествоПотребностиДатаПотребности = КоличествоПотребностиДатаПотребности + СтрокаТаблицы.КоличествоПлана;
		КоличествоПотребностиНоменклатура    = КоличествоПотребностиНоменклатура + СтрокаТаблицы.КоличествоПлана;
		
		// Сначала обработаем те заказы поставщикам, в которых явно указан заказ покупателя
		
		СтрокаНеправильнойДатыПоЗаказуПокупателя = Неопределено;
		
		ОстатокПотребности = СтрокаТаблицы.КоличествоПлана;
		
		СтрокиСЗаказомПокупателя = ТаблицаЗаказовПоставщикам.НайтиСтроки(Новый Структура("ЗаказПокупателя, Номенклатура, ХарактеристикаНоменклатуры, Тара", СтрокаТаблицы.ЗаказПокупателя, СтрокаТаблицы.Номенклатура, СтрокаТаблицы.ХарактеристикаНоменклатуры, СтрокаТаблицы.Тара));
		Для каждого СтрокаСЗаказомПокупателя Из СтрокиСЗаказомПокупателя Цикл
			
			Если СтрокаСЗаказомПокупателя.КоличествоОстаток <= 0 ИЛИ СтрокаСЗаказомПокупателя.ДатаПоставки > СтрокаТаблицы.ДатаПотребности Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОстатокПотребности <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			СтрокаОбъекта = ТаблицаОбъектов.Найти(СтрокаСЗаказомПокупателя.ИДОбъекта, "ИДОбъекта");
			Если СтрокаОбъекта = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
			СтрокаЗаказаПоставщика = СтрокаЗаказПокупателя.Строки.Добавить();
			СтрокаЗаказаПоставщика.ИДОбъекта      = СтрокаСЗаказомПокупателя.ИДОбъекта;
			СтрокаЗаказаПоставщика.Контрагент     = СтрокаОбъекта.Объект.Контрагент;
			СтрокаЗаказаПоставщика.ОсновныеДанные = "Заказ поставщику № " + СокрЛП(СтрокаОбъекта.Объект.Номер) + " от " + СокрЛП(Формат(СтрокаОбъекта.Объект.Дата, "ДФ=dd.MM.yyyy")) + " (дата поставки " + ?(СтрокаОбъекта.Объект.ДатаПоступления = '00010101000000', "не указана", Формат(СтрокаОбъекта.Объект.ДатаПоступления, "ДФ=dd.MM.yyyy")) + ")";
			Если СтрокаСЗаказомПокупателя.КоличествоОстаток <= ОстатокПотребности Тогда
				
				ОстатокПотребности = ОстатокПотребности - СтрокаСЗаказомПокупателя.КоличествоОстаток;
				СтрокаЗаказПокупателя.КоличествоЗаказов = СтрокаЗаказПокупателя.КоличествоЗаказов + СтрокаСЗаказомПокупателя.КоличествоОстаток;
				СтрокаЗаказаПоставщика.КоличествоЗаказов = СтрокаСЗаказомПокупателя.КоличествоОстаток;
				СтрокаСЗаказомПокупателя.КоличествоОстаток = 0;
				
			Иначе
				
				СтрокаСЗаказомПокупателя.КоличествоОстаток = СтрокаСЗаказомПокупателя.КоличествоОстаток - ОстатокПотребности;
				СтрокаЗаказПокупателя.КоличествоЗаказов  = СтрокаЗаказПокупателя.КоличествоЗаказов + ОстатокПотребности;
				СтрокаЗаказаПоставщика.КоличествоЗаказов = ОстатокПотребности;
				ОстатокПотребности = 0;
				
			КонецЕсли;
			
			СтрокаДатаПотребности.КоличествоЗаказов = СтрокаДатаПотребности.КоличествоЗаказов + СтрокаЗаказаПоставщика.КоличествоЗаказов;
			СтрокаНоменклатура.КоличествоЗаказов    = СтрокаНоменклатура.КоличествоЗаказов + СтрокаЗаказаПоставщика.КоличествоЗаказов;
			
		КонецЦикла;
		
	КонецЦикла; 

	Если СтрокаДатаПотребности <> Неопределено Тогда
		СтрокаДатаПотребности.КоличествоПотребности = КоличествоПотребностиДатаПотребности;
	КонецЕсли; 
			
	Если СтрокаНоменклатура <> Неопределено Тогда
		СтрокаНоменклатура.КоличествоПотребности = КоличествоПотребностиНоменклатура;
	КонецЕсли;
	
	мФормаИндикации.МаксимальноеЗначение = ?(ДеревоДляЗаполнения = Неопределено, (ДеревоСоответствияЗаказов.Строки.Количество() - 1), (ДеревоДляЗаполнения.Строки.Количество() - 1));
	
	Для каждого СтрокаНоменклатура Из ?(ДеревоДляЗаполнения = Неопределено, ДеревоСоответствияЗаказов.Строки, ДеревоДляЗаполнения.Строки) Цикл
	
		мФормаИндикации.Значение = ?(ДеревоДляЗаполнения = Неопределено, ДеревоСоответствияЗаказов.Строки.Индекс(СтрокаНоменклатура), ДеревоДляЗаполнения.Строки.Индекс(СтрокаНоменклатура));
		
		СтрокиСЗаказомПокупателя = ТаблицаЗаказовПоставщикам.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Тара", СтрокаНоменклатура.Номенклатура, СтрокаНоменклатура.ХарактеристикаНоменклатуры, СтрокаНоменклатура.Тара));
		Для каждого СтрокаСЗаказомПокупателя Из СтрокиСЗаказомПокупателя Цикл
			
			Если СтрокаСЗаказомПокупателя.КоличествоОстаток <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаОбъекта = ТаблицаОбъектов.Найти(СтрокаСЗаказомПокупателя.ИДОбъекта, "ИДОбъекта");
			Если СтрокаОбъекта = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаНеВостребованнаяДатаПотребности = СтрокаНоменклатура.Строки.Найти("Не востребовано", "ОсновныеДанные");
			Если СтрокаНеВостребованнаяДатаПотребности = Неопределено Тогда
				СтрокаНеВостребованнаяДатаПотребности = СтрокаНоменклатура.Строки.Вставить(0);
				СтрокаНеВостребованнаяДатаПотребности.ОсновныеДанные = "Не востребовано";
			КонецЕсли; 
			
			СтрокаНеВостребованнаяЗаказПокупателя = СтрокаНеВостребованнаяДатаПотребности.Строки.Найти("Не востребовано", "ОсновныеДанные");
			Если СтрокаНеВостребованнаяЗаказПокупателя = Неопределено Тогда
				СтрокаНеВостребованнаяЗаказПокупателя = СтрокаНеВостребованнаяДатаПотребности.Строки.Добавить();
				СтрокаНеВостребованнаяЗаказПокупателя.ОсновныеДанные = "Не востребовано";
			КонецЕсли;
			
			Если СтрокаНеВостребованнаяЗаказПокупателя.Строки.Найти(СтрокаСЗаказомПокупателя.ИДОбъекта, "ИДОбъекта") <> Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
			СтрокаЗаказаПоставщика = СтрокаНеВостребованнаяЗаказПокупателя.Строки.Вставить(0);
			СтрокаЗаказаПоставщика.ИДОбъекта         = СтрокаСЗаказомПокупателя.ИДОбъекта;
			СтрокаЗаказаПоставщика.Контрагент        = СтрокаОбъекта.Объект.Контрагент;
			СтрокаЗаказаПоставщика.ОсновныеДанные    = "Заказ поставщику № " + СокрЛП(СтрокаОбъекта.Объект.Номер) + " от " + СокрЛП(Формат(СтрокаОбъекта.Объект.Дата, "ДФ=dd.MM.yyyy")) + " (дата поставки " + ?(СтрокаОбъекта.Объект.ДатаПоступления = '00010101000000', "не указана", Формат(СтрокаОбъекта.Объект.ДатаПоступления, "ДФ=dd.MM.yyyy")) + ")";
			СтрокаЗаказаПоставщика.КоличествоЗаказов = СтрокаСЗаказомПокупателя.КоличествоОстаток;
			
			СтрокаНеВостребованнаяЗаказПокупателя.КоличествоЗаказов  = СтрокаНеВостребованнаяЗаказПокупателя.КоличествоЗаказов + СтрокаЗаказаПоставщика.КоличествоЗаказов;
			
			СтрокаНеВостребованнаяДатаПотребности.КоличествоЗаказов  = СтрокаНеВостребованнаяДатаПотребности.КоличествоЗаказов + СтрокаЗаказаПоставщика.КоличествоЗаказов;
			СтрокаНоменклатура.КоличествоЗаказов     = СтрокаНоменклатура.КоличествоЗаказов + СтрокаЗаказаПоставщика.КоличествоЗаказов;
			
		КонецЦикла;
		
	КонецЦикла; 
	
	Если ДеревоДляЗаполнения = Неопределено Тогда
	
		// Посмотрим, что у нас с отборами
		КопияСтруктурыОтборов = Новый Структура;
		Для каждого ЭлементОтбора Из ОтборыДереваЗаказов Цикл
			Если ЭлементОтбора.Использование Тогда
				МассивСтруктуры = Новый Массив;
				МассивСтруктуры.Добавить(ЭлементОтбора.ВидСравнения);
				МассивСтруктуры.Добавить(ЭлементОтбора.Значение);
				МассивСтруктуры.Добавить(ЭлементОтбора.ЗначениеС);
				МассивСтруктуры.Добавить(ЭлементОтбора.ЗначениеПо);
				МассивСтруктуры.Добавить(Истина);
				КопияСтруктурыОтборов.Вставить(ЭлементОтбора.Имя, МассивСтруктуры);
			КонецЕсли; 
		КонецЦикла;
		
		Если КопияСтруктурыОтборов.Количество() <> 0 Тогда
			СписокНайденныхОтборов = Новый СписокЗначений;
			ПроверитьОтбор(КопияСтруктурыОтборов, ДеревоСоответствияЗаказов, СписокНайденныхОтборов);
		КонецЕсли;
		
		// Найдем прошлую строку и установим ее, чтобы выделенная ячейка в дереве не "скакала"
		Если МассивСтарыхЗначений.Количество() = 6 Тогда
				
			мФормаИндикации.КомментарийОбработкиДанных = "Определяется прошлая строка ...";
			мФормаИндикации.МаксимальноеЗначение = ДеревоСоответствияЗаказов.Строки.Количество() - 1;
			
			НайденнаяСтрока = Неопределено;
			Для каждого Строка0 Из ДеревоСоответствияЗаказов.Строки Цикл
				мФормаИндикации.Значение = ДеревоСоответствияЗаказов.Строки.Индекс(Строка0);
				Если Строка0.ОсновныеДанные <> МассивСтарыхЗначений[0] Тогда
					Продолжить;
				КонецЕсли;
				Если Строка0.Уровень() = МассивСтарыхЗначений[4] Тогда
					НайденнаяСтрока = Строка0;
					Прервать;
				КонецЕсли; 
				Для каждого Строка1 Из Строка0.Строки Цикл
					Если Строка1.ОсновныеДанные <> МассивСтарыхЗначений[1] Тогда
						Продолжить;
					КонецЕсли;
					Если Строка1.Уровень() = МассивСтарыхЗначений[4] Тогда
						НайденнаяСтрока = Строка1;
						Прервать;
					КонецЕсли; 
					Для каждого Строка2 Из Строка1.Строки Цикл
						Если Строка2.ОсновныеДанные <> МассивСтарыхЗначений[2] Тогда
							Продолжить;
						КонецЕсли;
						Если Строка2.Уровень() = МассивСтарыхЗначений[4] Тогда
							НайденнаяСтрока = Строка2;
							Прервать;
						КонецЕсли; 
						Для каждого Строка3 Из Строка2.Строки Цикл
							Если Строка3.ОсновныеДанные <> МассивСтарыхЗначений[3] Тогда
								Продолжить;
							КонецЕсли;
							НайденнаяСтрока = Строка3;
							Прервать;
						КонецЦикла; 
						Если НайденнаяСтрока <> Неопределено Тогда
							Прервать;
						КонецЕсли; 
					КонецЦикла;
					Если НайденнаяСтрока <> Неопределено Тогда
						Прервать;
					КонецЕсли; 
				КонецЦикла; 
				Если НайденнаяСтрока <> Неопределено Тогда
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
			
			Если НайденнаяСтрока <> Неопределено Тогда
			
				ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущаяСтрока  = НайденнаяСтрока;
				ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущаяКолонка = ЭлементыФормы.ДеревоСоответствияЗаказов.Колонки[МассивСтарыхЗначений[5]];
			
			КонецЕсли; 
			
		КонецЕсли; 
		
		// Установим текущий уровень разворота строк
		УстановитьРазворотСтрок(ДеревоСоответствияЗаказов, ЭлементыФормы.ДеревоСоответствияЗаказов, УровеньРазворотаДерева);
	
	КонецЕсли; 
	
КонецПроцедуры

// Процедура проверяет установленный пользователем отбор и удаляет лишние строки дерева значений,
//  которые не удовлетворяют текущему отбору
//
// Параметры
//  КопияСтруктурыОтборов  - Структура, содержащая отборы, виды сравнения и значения
//  ПрошлаяСтрока          - СтрокаДереваЗначений, строка-родитель, прошлого уровня
//  СписокНайденныхОтборов - СписокЗначений, список отборов, которые найдены в текущей ветке дерева значений
//
// Возвращаемые значения
//  НЕТ
Процедура ПроверитьОтбор(КопияСтруктурыОтборов, ПрошлаяСтрока, СписокНайденныхОтборов)

	ИндексСтроки = 0;
	
	ПрошлыйСписокНайденныхОтборов = СписокНайденныхОтборов.Скопировать();
	
	мФормаИндикации.КомментарийОбработкиДанных = "Устанавливаются отборы ...";
	мФормаИндикации.МаксимальноеЗначение = ПрошлаяСтрока.Строки.Количество() - 1;
		
	Пока 1 = 1 Цикл
		
		мФормаИндикации.Значение = ИндексСтроки;
			
		Если (ИндексСтроки + 1) > ПрошлаяСтрока.Строки.Количество() Тогда
			Прервать;
		КонецЕсли;
		
		ТекущаяСтрока = ПрошлаяСтрока.Строки[ИндексСтроки];
		
		СписокНайденныхОтборов = ПрошлыйСписокНайденныхОтборов.Скопировать();
	
		Если ТекущаяСтрока.Уровень() = 0 Тогда
			СписокНайденныхОтборов = Новый СписокЗначений;
		КонецЕсли; 
		
		УдовлетворяетУсловиямОтбора(КопияСтруктурыОтборов, ТекущаяСтрока, СписокНайденныхОтборов);
		
		Если ТекущаяСтрока.Строки.Количество() = 0 Тогда
			
			УдалятьСтроку = Ложь;
			МассивОтбора = Неопределено;
			Если КопияСтруктурыОтборов.Свойство("ЗаказПоставщику", МассивОтбора) И НЕ УдовлетворяетУсловиямОтбора(КопияСтруктурыОтборов, ТекущаяСтрока, СписокНайденныхОтборов) И ТекущаяСтрока.Уровень() = 3  Тогда
				УдалятьСтроку = Истина;
			Иначе
				Для каждого ЭлементСтруктуры Из КопияСтруктурыОтборов Цикл
					Если СписокНайденныхОтборов.НайтиПоЗначению(ЭлементСтруктуры.Ключ) = Неопределено Тогда
						УдалятьСтроку = Истина;
						Прервать;
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли;
			
			Если УдалятьСтроку Тогда
				ПрошлаяСтрока.Строки.Удалить(ТекущаяСтрока);
				Продолжить;
			КонецЕсли;
			
		Иначе
			
			ВспомогательныйСписокНайденныхОтборов = ПрошлыйСписокНайденныхОтборов.Скопировать();
			УдовлетворяетУсловиямОтбора(КопияСтруктурыОтборов, ТекущаяСтрока, ВспомогательныйСписокНайденныхОтборов);
			ПроверитьОтбор(КопияСтруктурыОтборов, ТекущаяСтрока, ВспомогательныйСписокНайденныхОтборов);
			
			Если ТекущаяСтрока.Строки.Количество() = 0 Тогда
				
				ПрошлаяСтрока.Строки.Удалить(ТекущаяСтрока);
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли; 
	
		ИндексСтроки = ИндексСтроки + 1;
		
	КонецЦикла; 
	
КонецПроцедуры

// Функция проверяет, удовлетворяет ли строка дерева значений условиям отбора
//
// Параметры
//  КопияСтруктурыОтборов    - Структура, содержащая отборы, виды сравнения и значения
//  СтрокаДерева             - СтрокаДереваЗначений, для которой необходимо проверить отборы
//  ВходящийСписокИменОтбора - СписокЗначений, имена отборов, которые уже существуют в текущей ветке дерева
//
// Возвращаемое значение:
//   Булево - удовлетворят ли строка дерева значений, текущим параметрам отбора
//
Функция УдовлетворяетУсловиямОтбора(КопияСтруктурыОтборов, СтрокаДерева, ВходящийСписокИменОтбора)
	
	СписокИменОтбора = Новый СписокЗначений;
	
	Для каждого ЭлементСруктуры Из КопияСтруктурыОтборов Цикл
	
		Если ЭлементСруктуры.Ключ = "Номенклатура" Тогда
			Если СтрокаДерева.Уровень() = 0 Тогда
				Если ПроверитьЗначениеОтбора(ЭлементСруктуры.Значение, СтрокаДерева.Номенклатура) Тогда
					СписокИменОтбора.Добавить("Номенклатура");
				КонецЕсли; 
			КонецЕсли;
		ИначеЕсли ЭлементСруктуры.Ключ = "ХарактеристикаНоменклатуры" Тогда
			Если СтрокаДерева.Уровень() = 0 Тогда
				Если ПроверитьЗначениеОтбора(ЭлементСруктуры.Значение, СтрокаДерева.ХарактеристикаНоменклатуры) Тогда
					СписокИменОтбора.Добавить("ХарактеристикаНоменклатуры");
				КонецЕсли; 
			КонецЕсли;
		ИначеЕсли ЭлементСруктуры.Ключ = "ЗаказПокупателя" Тогда
			Если СтрокаДерева.Уровень() = 2 Тогда
				Если ПроверитьЗначениеОтбора(ЭлементСруктуры.Значение, СтрокаДерева.ЗаказПокупателя) Тогда
					СписокИменОтбора.Добавить("ЗаказПокупателя");
				КонецЕсли; 
			КонецЕсли;
		ИначеЕсли ЭлементСруктуры.Ключ = "ЗаказПоставщику" Тогда
			Если СтрокаДерева.Уровень() = 3 Тогда
				СтрокаОбъекта = ТаблицаОбъектов.Найти(СтрокаДерева.ИДОбъекта, "ИДОбъекта");
				Если СтрокаОбъекта <> Неопределено И НЕ СтрокаОбъекта.Объект.Ссылка.Пустая() Тогда
					Если ПроверитьЗначениеОтбора(ЭлементСруктуры.Значение, СтрокаОбъекта.Объект.Ссылка) Тогда
						СписокИменОтбора.Добавить("ЗаказПоставщику");
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли;
		ИначеЕсли ЭлементСруктуры.Ключ = "ДатаПотребности" Тогда
			Если СтрокаДерева.Уровень() = 1 Тогда
				Если ТипЗнч(СтрокаДерева.ОсновныеДанные) <> Тип("Дата") Тогда
					Продолжить;
				КонецЕсли; 
				Если ПроверитьЗначениеОтбора(ЭлементСруктуры.Значение, СтрокаДерева.ОсновныеДанные) Тогда
					СписокИменОтбора.Добавить("ДатаПотребности");
				КонецЕсли; 
			КонецЕсли;
		ИначеЕсли ЭлементСруктуры.Ключ = "ОтбиратьНеЗаказанныеТовары" Тогда
			Если ТипЗнч(СтрокаДерева.НоменклатураКонтрагентЗаказ) = Тип("Строка")
			   И ТипЗнч(СтрокаДерева.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
			   И НЕ СтрокаДерева.Номенклатура.Пустая() Тогда
				Если СтрокаДерева.НеобходимоеКоличество > СтрокаДерева.ЗаказанноеКоличество Тогда
					СписокИменОтбора.Добавить("ОтбиратьНеЗаказанныеТовары");
				КонецЕсли; 
			КонецЕсли; 
		ИначеЕсли ЭлементСруктуры.Ключ = "ОтбиратьНеВыполненныеДатыПотребности" Тогда
			Если ТипЗнч(СтрокаДерева.ОсновныеДанные) = Тип("Дата") Тогда
				Если СтрокаДерева.КоличествоПотребности > СтрокаДерева.КоличествоЗаказов Тогда
					СписокИменОтбора.Добавить("ОтбиратьНеВыполненныеДатыПотребности");
				КонецЕсли; 
			КонецЕсли; 
		ИначеЕсли ЭлементСруктуры.Ключ = "ОтбиратьНеВыполненныеЗаказыПокупателей" Тогда
			Если ТипЗнч(СтрокаДерева.ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") И НЕ СтрокаДерева.ЗаказПокупателя.Пустая() Тогда
				Если СтрокаДерева.КоличествоПотребности > СтрокаДерева.КоличествоЗаказов Тогда
					СписокИменОтбора.Добавить("ОтбиратьНеВыполненныеЗаказыПокупателей");
				КонецЕсли; 
			КонецЕсли;
		ИначеЕсли ЭлементСруктуры.Ключ = "ОтбиратьИзмененныеЗаказы" Тогда
			Если СтрокаДерева.Уровень() = 3 Тогда
				Если СтрокаДерева.ИДОбъекта <> Неопределено Тогда
					НайденнаяСтрокаОбъекта = ТаблицаОбъектов.Найти(СтрокаДерева.ИДОбъекта, "ИДОбъекта");
					Если НайденнаяСтрокаОбъекта <> Неопределено Тогда
						Если НЕ НайденнаяСтрокаОбъекта.Объект.Ссылка.Пустая() И НайденнаяСтрокаОбъекта.Объект.Модифицированность() Тогда
							СписокИменОтбора.Добавить("ОтбиратьИзмененныеЗаказы");
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли;
		ИначеЕсли ЭлементСруктуры.Ключ = "ОтбиратьНовыеЗаказы" Тогда
			Если СтрокаДерева.Уровень() = 3 Тогда
				Если СтрокаДерева.ИДОбъекта <> Неопределено Тогда
					НайденнаяСтрокаОбъекта = ТаблицаОбъектов.Найти(СтрокаДерева.ИДОбъекта, "ИДОбъекта");
					Если НайденнаяСтрокаОбъекта <> Неопределено Тогда
						Если НайденнаяСтрокаОбъекта.Объект.Ссылка.Пустая() Тогда
							СписокИменОтбора.Добавить("ОтбиратьНовыеЗаказы");
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли;
		ИначеЕсли ЭлементСруктуры.Ключ = "ОтбиратьНовыеИИзмененныеЗаказы" Тогда
			Если СтрокаДерева.Уровень() = 3 Тогда
				Если СтрокаДерева.ИДОбъекта <> Неопределено Тогда
					НайденнаяСтрокаОбъекта = ТаблицаОбъектов.Найти(СтрокаДерева.ИДОбъекта, "ИДОбъекта");
					Если НайденнаяСтрокаОбъекта <> Неопределено Тогда
						Если НайденнаяСтрокаОбъекта.Объект.Ссылка.Пустая() ИЛИ (НЕ НайденнаяСтрокаОбъекта.Объект.Ссылка.Пустая() И НайденнаяСтрокаОбъекта.Объект.Модифицированность()) Тогда
							СписокИменОтбора.Добавить("ОтбиратьНовыеИИзмененныеЗаказы");
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли;
		Иначе
			Если ПроверитьЗначениеОтбора(ЭлементСруктуры.Значение, СтрокаДерева[ЭлементСруктуры.Ключ]) Тогда
				СписокИменОтбора.Добавить(ЭлементСруктуры.Ключ);
			КонецЕсли;
		КонецЕсли; 
	
	КонецЦикла; 
	
	Для каждого ЭлементСписка Из СписокИменОтбора Цикл
		ВходящийСписокИменОтбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла; 
	
	Возврат (СписокИменОтбора.Количество() > 0);
	
КонецФункции

// Функция проверяет, соответствует ли значение строки дерева значений, условиям отбора
//
// Параметры
//  МассивОтбора - Массив, со значениями и видами сравнения отбора
//  ЗначениеОтбора - Значение, которое надо проверить на соответствие параметрам отбора
//
// Возвращаемое значение:
//   Булево
//
Функция ПроверитьЗначениеОтбора(МассивОтбора, ЗначениеОтбора)

	ВидСравненияОтбора = МассивОтбора[0];
	Если ТипЗнч(ВидСравненияОтбора) <> Тип("ВидСравнения") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВидСравненияОтбора = ВидСравнения.Равно Тогда
		Возврат (ЗначениеОтбора = МассивОтбора[1]);
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.НеРавно Тогда
		Возврат (ЗначениеОтбора <> МассивОтбора[1]);
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.Больше Тогда
		Возврат (ЗначениеОтбора > МассивОтбора[1]);
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.БольшеИлиРавно Тогда
		Возврат (ЗначениеОтбора >= МассивОтбора[1]);
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.Меньше Тогда
		Возврат (ЗначениеОтбора < МассивОтбора[1]);
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.МеньшеИлиРавно Тогда
		Возврат (ЗначениеОтбора <= МассивОтбора[1]);
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.ВСписке Тогда
		НайденныйЭлемент = МассивОтбора[1].НайтиПоЗначению(ЗначениеОтбора);
		Возврат (НайденныйЭлемент <> Неопределено);
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.НеВСписке Тогда
		НайденныйЭлемент = МассивОтбора[1].НайтиПоЗначению(ЗначениеОтбора);
		Возврат (НайденныйЭлемент = Неопределено);
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.Интервал Тогда
		Возврат ((ЗначениеОтбора > МассивОтбора[2]) И (ЗначениеОтбора < МассивОтбора[3]));
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.ИнтервалВключаяГраницы Тогда
		Возврат ((ЗначениеОтбора >= МассивОтбора[2]) И (ЗначениеОтбора <= МассивОтбора[3]));
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.ИнтервалВключаяНачало Тогда
		Возврат ((ЗначениеОтбора >= МассивОтбора[2]) И (ЗначениеОтбора < МассивОтбора[3]));
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.ИнтервалВключаяОкончание Тогда
		Возврат ((ЗначениеОтбора > МассивОтбора[2]) И (ЗначениеОтбора <= МассивОтбора[3]));
	Иначе
		Возврат Ложь;
	КонецЕсли; 

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события формы ПередОткрытием.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	мФормаИндикации.Открыть();
	
	ЭлементыФормы.УровеньРазворотаДерева.СписокВыбора = СформироватьСписокВыбораРазворотовДерева();
	УровеньРазворотаДерева = 0;
	
	// Сохраним первоначальные данные объектов на случай отмены
	ЗаполнитьТаблицуОбъектовДоЗаполнения();
	
	ТаблицаЗаказовПоставщикам.Очистить();
	
	// Попробуем изменить состав строк объектов под потребности заказов покупателей
	АвтоперераспределениеСтрокЗаказовПоставщикамПодЗаказыПокупателей();
	
	// Построим дерево
	ЗаполнитьДерево();
	
	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события формы ОбработкаЗаписиНовогоОбъекта.
//
Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)
	
	СтрокаОбъекта = ТаблицаОбъектов.Найти(Объект, "Объект");
	Если СтрокаОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(мСтруктураОбъектаАвтокорректировки) = Тип("Структура") Тогда
		мЗаписанОбъектАвтокорректировки = Истина;
		мСтруктураОбъектаАвтокорректировки  = СкопироватьДанныеОбъектаВСтруктуру(Объект);
	КонецЕсли; 
	
	мФормаИндикации.Открыть();
	
	ПереписатьСтрокиОбъекта(СтрокаОбъекта);
	
	ЗаполнитьДерево();
	
	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события формы ПередЗакрытием.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ мЗакрытьПринудительно Тогда
	
		ОтветНаВопрос = Вопрос("Закрыть без сохранения изменений?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Для каждого СтрокаОбъекта Из ТаблицаОбъектов Цикл
			СтрокаСтруктурыДанныхОбъекта = ТаблицаОбъектовДоЗаполнения.Найти(СтрокаОбъекта.ИДОбъекта, "ИДОбъекта");
			Если СтрокаСтруктурыДанныхОбъекта = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			Если НЕ СтрокаОбъекта.Объект.Ссылка.Пустая()
			   И СравнитьСтруктуруДанныхОбъектаИОбъект(СтрокаОбъекта.Объект.Ссылка, СтрокаСтруктурыДанныхОбъекта.СтруктураДанныхОбъекта) Тогда
				СтрокаОбъекта.Объект.Прочитать();
			Иначе
				ВосстановитьДанныеОбъектаИзСтруктуры(СтрокаОбъекта.Объект, СтрокаСтруктурыДанныхОбъекта.СтруктураДанныхОбъекта);
			КонецЕсли; 
		КонецЦикла; 
	
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события формы ПриОткрытии.
//
Процедура ПриОткрытии()
	
	ИсторияОтборов = ВосстановитьЗначение("ИсторииОтборовКалендарногоПланаЗакупокЗаказов");
	Если ТипЗнч(ИсторияОтборов) = Тип("СписокЗначений") Тогда
		СписокИсторииОтбора = ИсторияОтборов;
	КонецЕсли; 
	
	СформироватьПодменюПоСпискуАктуальныхОтборов();
	ДоступностьКнопкиОтключенияОтбора();
	СостояниеКнопкиОтбораПоТекущемуЗначению();
	
КонецПроцедуры

// Обработчик события формы ПриЗакрытии.
//
Процедура ПриЗакрытии()
	
	СохранитьЗначение("ИсторииОтборовКалендарногоПланаЗакупокЗаказов", СписокИсторииОтбора);
	
	ОтборыДереваЗаказов.Сбросить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ОБРАБОТЧИКОВ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события Нажатие элемента формы ОсновныеДействияФормы.Выполнить.
//
Процедура КнопкаВыполнитьНажатие(Элемент)
	
	мЗакрытьПринудительно = Истина;
	
	ЭтаФорма.Закрыть(Истина);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы ОсновныеДействияФормы.Отмена.
//
Процедура ОсновныеДействияФормыОтмена(Кнопка)
	
	ОтветНаВопрос = Вопрос("Закрыть без сохранения изменений?", РежимДиалогаВопрос.ДаНет);
	Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаОбъекта Из ТаблицаОбъектов Цикл
		СтрокаСтруктурыДанныхОбъекта = ТаблицаОбъектовДоЗаполнения.Найти(СтрокаОбъекта.ИДОбъекта, "ИДОбъекта");
		Если СтрокаСтруктурыДанныхОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		Если НЕ СтрокаОбъекта.Объект.Ссылка.Пустая()
		   И СравнитьСтруктуруДанныхОбъектаИОбъект(СтрокаОбъекта.Объект.Ссылка, СтрокаСтруктурыДанныхОбъекта.СтруктураДанныхОбъекта) Тогда
			СтрокаОбъекта.Объект.Прочитать();
		Иначе
			ВосстановитьДанныеОбъектаИзСтруктуры(СтрокаОбъекта.Объект, СтрокаСтруктурыДанныхОбъекта.СтруктураДанныхОбъекта);
		КонецЕсли; 
	КонецЦикла; 
	
	мЗакрытьПринудительно = Истина;
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы УровеньРазворотаДерева.
//
Процедура УровеньРазворотаДереваПриИзменении(Элемент)
	
	мФормаИндикации.Открыть();
	
	УстановитьРазворотСтрок(ДеревоСоответствияЗаказов, ЭлементыФормы.ДеревоСоответствияЗаказов, Элемент.Значение);
	
	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы ДеревоСоответствияЗаказов.
//
Процедура ДеревоСоответствияЗаказовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	
	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента формы ДеревоСоответствияЗаказов.
//
Процедура ДеревоСоответствияЗаказовПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущаяКолонка = Элемент.Колонки.ОсновныеДанные Тогда
	
		Если НЕ Элемент.ТекущиеДанные.Номенклатура.Пустая() Тогда
			Элемент.ТекущиеДанные.Номенклатура.ПолучитьФорму().Открыть();
		ИначеЕсли ТипЗнч(Элемент.ТекущиеДанные.ОсновныеДанные) = Тип("Строка")
			    И СтрЧислоВхождений(Элемент.ТекущиеДанные.ОсновныеДанные, "Заказ покупателя") > 0
			    И НЕ ЗначениеНеЗаполнено(Элемент.ТекущиеДанные.ЗаказПокупателя) Тогда
			ФормаЗаказа = Элемент.ТекущиеДанные.ЗаказПокупателя.ПолучитьФорму();
			ФормаЗаказа.ТолькоПросмотр = Истина;
			ФормаЗаказа.Открыть();
		ИначеЕсли ТипЗнч(Элемент.ТекущиеДанные.ОсновныеДанные) = Тип("Строка")
			    И СтрЧислоВхождений(Элемент.ТекущиеДанные.ОсновныеДанные, "Заказ поставщику") > 0 Тогда
			
				СтрокаОбъекта = ТаблицаОбъектов.Найти(Элемент.ТекущиеДанные.ИДОбъекта, "ИДОбъекта");
				
				Если СтрокаОбъекта <> Неопределено Тогда
				
					Попытка
						СтрокаОбъекта.Объект.Заблокировать();
					Исключение
					КонецПопытки;
					
					мСтруктураОбъектаАвтокорректировки = СкопироватьДанныеОбъектаВСтруктуру(СтрокаОбъекта.Объект);
					мМодифицированностьОбъектаПередАвтокорректировкой = СтрокаОбъекта.Объект.Модифицированность();
					мЗаписанОбъектАвтокорректировки = Ложь;
					
					ФормаЗаказа = СтрокаОбъекта.Объект.ПолучитьФорму(,ЭтаФорма);
					ФормаЗаказа.ФормаДляРегистрацииБезЗаписи = Истина;
					
					СтрокаНоменклатуры = Элемент.ТекущиеДанные.Родитель.Родитель.Родитель;
					
					Если ТипЗнч(СтрокаНоменклатуры.Номенклатура) = Тип("СправочникСсылка.Номенклатура") И НЕ СтрокаНоменклатуры.Номенклатура.Пустая() И ТипЗнч(СтрокаНоменклатуры.ХарактеристикаНоменклатуры) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
						
						СтрокиТекущегоТовара = СтрокаОбъекта.Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СтрокаНоменклатуры.Номенклатура, СтрокаНоменклатуры.ХарактеристикаНоменклатуры));
						Если СтрокиТекущегоТовара.Количество() > 0 Тогда
							ФормаЗаказа.ЭлементыФормы.Товары.ТекущаяСтрока = СтрокиТекущегоТовара[0];
						КонецЕсли; 
						
					КонецЕсли; 
					
					ФормаЗаказа.ЭлементыФормы.Товары.ТекущаяКолонка = ФормаЗаказа.ЭлементыФормы.Товары.Колонки.Количество;
					ФормаЗаказа.ТекущийЭлемент = ФормаЗаказа.ЭлементыФормы.Товары;
					ФормаЗаказа.ОткрытьМодально();
					
					Если НЕ СтрокаОбъекта.Объект.Ссылка.Пустая() Тогда
						Если (НЕ мМодифицированностьОбъектаПередАвтокорректировкой И НЕ мЗаписанОбъектАвтокорректировки)
						 ИЛИ СравнитьСтруктуруДанныхОбъектаИОбъект(СтрокаОбъекта.Объект.Ссылка, мСтруктураОбъектаАвтокорректировки) Тогда
							СтрокаОбъекта.Объект.Прочитать();
						Иначе
							ВосстановитьДанныеОбъектаИзСтруктуры(СтрокаОбъекта.Объект, мСтруктураОбъектаАвтокорректировки);
						КонецЕсли; 
					Иначе
						ВосстановитьДанныеОбъектаИзСтруктуры(СтрокаОбъекта.Объект, мСтруктураОбъектаАвтокорректировки);
					КонецЕсли; 
					
					Попытка
						СтрокаОбъекта.Объект.Заблокировать();
					Исключение
					КонецПопытки;
					
					мСтруктураОбъектаАвтокорректировки = Неопределено;
				
				КонецЕсли; 
			
		КонецЕсли; 
		
	ИначеЕсли Элемент.ТекущаяКолонка = Элемент.Колонки.Контрагент Тогда
		
		Если НЕ Элемент.ТекущиеДанные.Контрагент.Пустая() Тогда
			Элемент.ТекущиеДанные.Контрагент.ПолучитьФорму().Открыть();
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы ДеревоСоответствияЗаказов.
//
Процедура ДеревоСоответствияЗаказовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы ДеревоСоответствияЗаказов.
//
Процедура ДеревоСоответствияЗаказовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Уровень() = 3 Тогда
		СтрокаОбъекта = ТаблицаОбъектов.Найти(ДанныеСтроки.ИДОбъекта, "ИДОбъекта");
		Если СтрокаОбъекта <> Неопределено Тогда
			Если СтрокаОбъекта.Объект.Ссылка.Пустая() Тогда
				ОформлениеСтроки.Ячейки.ОсновныеДанные.ИндексКартинки     = 4;
				ОформлениеСтроки.Ячейки.ОсновныеДанные.ОтображатьКартинку = Истина;
				ОформлениеСтроки.Ячейки.ОсновныеДанные.ЦветТекста = WebЦвета.ЦианТемный;
			Иначе
				Если СтрокаОбъекта.Объект.Модифицированность() Тогда
					ОформлениеСтроки.Ячейки.ОсновныеДанные.ЦветТекста = WebЦвета.ЦианТемный;
					Номенклатура               = Неопределено;
					ХарактеристикаНоменклатуры = Неопределено;
					ТекСтрока = ДанныеСтроки;
					Пока 1 = 1 Цикл
						Если ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура") И НЕ ТекСтрока.Номенклатура.Пустая() Тогда
							Номенклатура = ТекСтрока.Номенклатура;
							ХарактеристикаНоменклатуры = ТекСтрока.ХарактеристикаНоменклатуры;
							Прервать;
						КонецЕсли; 
						Если ТекСтрока.Уровень() = 0 Тогда
							Прервать;
						КонецЕсли; 
						ТекСтрока = ТекСтрока.Родитель;
					КонецЦикла;
					Если Номенклатура <> Неопределено И (ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") И НЕ Номенклатура.Пустая()) Тогда
						СтрокиНоменклатурыТЧ        = СтрокаОбъекта.Объект.Ссылка.Товары.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", Номенклатура, ХарактеристикаНоменклатуры));
						СтрокиНоменклатурыТЧОбъекта = СтрокаОбъекта.Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", Номенклатура, ХарактеристикаНоменклатуры));
						СтрокиТарыТЧ                = СтрокаОбъекта.Объект.Ссылка.ВозвратнаяТара.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
						СтрокиТарыТЧОбъекта         = СтрокаОбъекта.Объект.ВозвратнаяТара.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
						Если СтрокиНоменклатурыТЧ.Количество() = 0 ИЛИ СтрокиНоменклатурыТЧОбъекта.Количество() = 0 ИЛИ СтрокиТарыТЧ.Количество() = 0 ИЛИ СтрокиТарыТЧОбъекта.Количество() = 0 Тогда
							ОформлениеСтроки.Ячейки.ОсновныеДанные.ОтображатьКартинку = Истина;
							ОформлениеСтроки.Ячейки.ОсновныеДанные.ИндексКартинки     = 5;
						Иначе
							ОтображатьКартинку = Ложь;
							Для каждого СтрокаТЧОбъекта Из СтрокиНоменклатурыТЧОбъекта Цикл
								НайденаСтрока = Ложь;
								Для каждого СтрокаТЧ Из СтрокиНоменклатурыТЧ Цикл
									Если СтрокаТЧ.Количество = СтрокаТЧОбъекта.Количество И СтрокаТЧ.Сумма = СтрокаТЧОбъекта.Сумма Тогда
										НайденаСтрока = Истина;
										Прервать;
									КонецЕсли; 
									Если НЕ НайденаСтрока Тогда
										ОтображатьКартинку = Истина;
										Прервать;
									КонецЕсли; 
								КонецЦикла; 
							КонецЦикла; 
							Если НЕ ОтображатьКартинку Тогда
								Для каждого СтрокаТЧОбъекта Из СтрокиТарыТЧОбъекта Цикл
									НайденаСтрока = Ложь;
									Для каждого СтрокаТЧ Из СтрокиТарыТЧ Цикл
										Если СтрокаТЧ.Количество = СтрокаТЧОбъекта.Количество И СтрокаТЧ.Сумма = СтрокаТЧОбъекта.Сумма Тогда
											НайденаСтрока = Истина;
											Прервать;
										КонецЕсли; 
										Если НЕ НайденаСтрока Тогда
											ОтображатьКартинку = Истина;
											Прервать;
										КонецЕсли; 
									КонецЦикла; 
								КонецЦикла; 
							КонецЕсли; 
							Если ОтображатьКартинку Тогда
								ОформлениеСтроки.Ячейки.ОсновныеДанные.ОтображатьКартинку = Истина;
								ОформлениеСтроки.Ячейки.ОсновныеДанные.ИндексКартинки     = 4;
							КонецЕсли; 
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Если ДанныеСтроки.КоличествоЗаказов > ДанныеСтроки.КоличествоПотребности Тогда
			Для каждого Ячейка Из ОформлениеСтроки.Ячейки Цикл
				Ячейка.ЦветТекста = WebЦвета.Синий;
			КонецЦикла; 
		ИначеЕсли ДанныеСтроки.КоличествоЗаказов < ДанныеСтроки.КоличествоПотребности Тогда
			Для каждого Ячейка Из ОформлениеСтроки.Ячейки Цикл
				Ячейка.ЦветТекста = WebЦвета.Кирпичный;
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельДерева.НастройкаОтбора.
//
Процедура КоманднаяПанельДереваНастройкаОтбора(Кнопка)
	
	МассивВозврата = ОбработкаОбъект.ПолучитьФорму("ФормаОтбораЗаказов").ОткрытьМодально();
	
	Если ТипЗнч(МассивВозврата) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивВозврата[0] = Ложь Тогда
		Возврат;
	КонецЕсли; 
	
	СкопироватьОтбор(МассивВозврата[1], ОтборыДереваЗаказов);
	
	мФормаИндикации.Открыть();
	
	ЗаполнитьДерево();
	
	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
	ДобавитьНовыйОтборВИсторию();
	
	ДоступностьКнопкиОтключенияОтбора();
	СостояниеКнопкиОтбораПоТекущемуЗначению();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельДерева.ОтборПоТекущемуЗначению.
//
Процедура КоманднаяПанельДереваОтборПоТекущемуЗначению(Кнопка)
	
	СтруктураЗначенийОтбора = Новый Структура;
	ОпределитьИмяИЗначениеТекущейЯчейкиДляОтбора(СтруктураЗначенийОтбора);
	
	Если СтруктураЗначенийОтбора.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Для каждого ЭлементСтруктуры Из СтруктураЗначенийОтбора Цикл
	
		НайденныйЭлементОтбора = ОтборыДереваЗаказов.Найти(ЭлементСтруктуры.Ключ);
		Если НайденныйЭлементОтбора <> Неопределено Тогда
			Если Кнопка.Пометка Тогда
				НайденныйЭлементОтбора.Использование = Ложь;
			Иначе
				НайденныйЭлементОтбора.Использование = Истина;
				НайденныйЭлементОтбора.ВидСравнения  = ВидСравнения.Равно;
				НайденныйЭлементОтбора.Значение      = ЭлементСтруктуры.Значение;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла; 
	
	ДобавитьНовыйОтборВИсторию();
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	
	мФормаИндикации.Открыть();
	
	ЗаполнитьДерево();
	
	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
	ДоступностьКнопкиОтключенияОтбора();
	СостояниеКнопкиОтбораПоТекущемуЗначению();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельДерева.ОтключитьОтбор.
//
Процедура КоманднаяПанельДереваОтключитьОтбор(Кнопка)
	
	ОтборыДереваЗаказов.Сбросить();
	
	мФормаИндикации.Открыть();
	
	ЗаполнитьДерево();
	
	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
	ДоступностьКнопкиОтключенияОтбора();
	СостояниеКнопкиОтбораПоТекущемуЗначению()
	
КонецПроцедуры

// Обработчик события ПриАктивизацииЯчейки элемента формы ДеревоСоответствияЗаказов.
//
Процедура ДеревоСоответствияЗаказовПриАктивизацииЯчейки(Элемент)
	
	СостояниеКнопкиОтбораПоТекущемуЗначению();
	СостояниеКнопокУправленияДеревом();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельДерева.Автокорректировка.
//
Процедура КоманднаяПанельДереваАвтокорректировка(Кнопка)
	
	Если ЭлементыФормы.ДеревоСоответствияЗаказов.ВыделенныеСтроки.Количество() > 1 Тогда
		Предупреждение("Данную операцию нельзя проводить с несколькими выделенными строками.");
		Возврат;
	КонецЕсли; 
	
	Если ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ (ТипЗнч(ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущиеДанные.ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") И НЕ ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущиеДанные.ЗаказПокупателя.Пустая()) Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьОтборы = Ложь;
	Для каждого ЭлементОтбора Из ОтборыДереваЗаказов Цикл
		Если ЭлементОтбора.Использование Тогда
			ЕстьОтборы = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	ДеревоБезОтборов = ДеревоСоответствияЗаказов.Скопировать();
	Если ЕстьОтборы Тогда
		ЗаполнитьДерево(ДеревоБезОтборов);
	КонецЕсли; 
	
	ТаблицаВыбраннойНоменклатуры = Неопределено;
	СтрокаВопроса = "Хотите провести автокорректировку всех номенклатурных позиций данного заказа?";
	ОтветНаВопрос = Вопрос(СтрокаВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Нет);
	ТребуетсяАвтокорректировка = Ложь;
	Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		ТаблицаВыбраннойНоменклатуры = Новый ТаблицаЗначений;
		ТаблицаВыбраннойНоменклатуры.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаВыбраннойНоменклатуры.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаВыбраннойНоменклатуры.Колонки.Добавить("Тара", Новый ОписаниеТипов("Булево"));
		СтрокиДерева = ДеревоБезОтборов.Строки.НайтиСтроки(Новый Структура("ЗаказПокупателя", ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущиеДанные.ЗаказПокупателя), Истина);
		Для каждого СтрокаДерева Из СтрокиДерева Цикл
			Если СтрокаДерева.Уровень() <> 2 Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаДерева.КоличествоПотребности > СтрокаДерева.КоличествоЗаказов Тогда
				ТребуетсяАвтокорректировка = Истина;
			КонецЕсли; 
			НоваяСтрокаТаблицыВыбраннойНоменклатуры = ТаблицаВыбраннойНоменклатуры.Добавить();
			НоваяСтрокаТаблицыВыбраннойНоменклатуры.Номенклатура = СтрокаДерева.Родитель.Родитель.Номенклатура;
			НоваяСтрокаТаблицыВыбраннойНоменклатуры.ХарактеристикаНоменклатуры = СтрокаДерева.Родитель.Родитель.ХарактеристикаНоменклатуры;
			НоваяСтрокаТаблицыВыбраннойНоменклатуры.Тара = СтрокаДерева.Родитель.Родитель.Тара;
		КонецЦикла; 
	Иначе
		Если ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущиеДанные.КоличествоПотребности > ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущиеДанные.КоличествоЗаказов Тогда
			ТребуетсяАвтокорректировка = Истина;
		КонецЕсли; 
	КонецЕсли;
	
	Если НЕ ТребуетсяАвтокорректировка Тогда
		Предупреждение("Для данного заказа корректировка не требуется.");
		Возврат;
	КонецЕсли; 
	
	мФормаИндикации.Открыть();
	
	СписокИДОбъектов = Новый СписокЗначений;
	
	СтрокиНоменклатуры = ДеревоБезОтборов.Строки.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Тара", ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущаяСтрока.Родитель.Родитель.Номенклатура, ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущаяСтрока.Родитель.Родитель.ХарактеристикаНоменклатуры, ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущаяСтрока.Родитель.Родитель.Тара));
	Если СтрокиНоменклатуры.Количество() > 0 Тогда
	
		Для каждого СтрокаДатаПотребности Из СтрокиНоменклатуры[0].Строки Цикл
			Для каждого СтрокаЗаказПокупателя Из СтрокаДатаПотребности.Строки Цикл
				Если ТипЗнч(СтрокаЗаказПокупателя.ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя")
				   И НЕ ЗначениеНеЗаполнено(СтрокаЗаказПокупателя.ЗаказПокупателя)
				   И СтрокаЗаказПокупателя.ЗаказПокупателя <> ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущиеДанные.ЗаказПокупателя Тогда
					Продолжить;
				КонецЕсли;
				Для каждого СтрокаЗаказПоставщику Из СтрокаЗаказПокупателя.Строки Цикл
					Если СписокИДОбъектов.НайтиПоЗначению(СтрокаЗаказПоставщику.ИДОбъекта) = Неопределено Тогда
						СписокИДОбъектов.Добавить(СтрокаЗаказПоставщику.ИДОбъекта);
					КонецЕсли; 
				КонецЦикла; 
			КонецЦикла; 
		КонецЦикла; 
	
	КонецЕсли; 
	
	Если ТаблицаВыбраннойНоменклатуры = Неопределено Тогда
		СтруктураНастройкиПараметров = Новый Структура("ВыбЗаказПокупателя, СписокИДОбъектов", ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущиеДанные.ЗаказПокупателя, СписокИДОбъектов);
	Иначе
		СтруктураНастройкиПараметров = Новый Структура("ВыбЗаказПокупателя, СписокИДОбъектов, ТаблицаВыбраннойНоменклатуры", ЭлементыФормы.ДеревоСоответствияЗаказов.ТекущиеДанные.ЗаказПокупателя, СписокИДОбъектов, ТаблицаВыбраннойНоменклатуры);
	КонецЕсли; 
	
	АвтоперераспределениеСтрокЗаказовПоставщикамПодЗаказыПокупателей(СтруктураНастройкиПараметров);
	
	ЗаполнитьДерево();
	
	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

// Заполняем колонки дерева ДеревоСоответствияЗаказов
ДеревоСоответствияЗаказов.Колонки.Добавить("ЗаказПокупателя", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
ДеревоСоответствияЗаказов.Колонки.Добавить("ИДОбъекта", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(0)));
ДеревоСоответствияЗаказов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
ДеревоСоответствияЗаказов.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
ДеревоСоответствияЗаказов.Колонки.Добавить("Тара", Новый ОписаниеТипов("Булево"));

// Заполняем колонки таблицы значений ТаблицаЗаказовПоставщикам
ТаблицаЗаказовПоставщикам.Колонки.Очистить();
ТаблицаЗаказовПоставщикам.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
ТаблицаЗаказовПоставщикам.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
ТаблицаЗаказовПоставщикам.Колонки.Добавить("ЗаказПокупателя");
ТаблицаЗаказовПоставщикам.Колонки.Добавить("ДатаПоставки", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
ТаблицаЗаказовПоставщикам.Колонки.Добавить("Количество", ПолучитьОписаниеТиповЧисла(15,3));
ТаблицаЗаказовПоставщикам.Колонки.Добавить("КоличествоОстаток", ПолучитьОписаниеТиповЧисла(15,3));
ТаблицаЗаказовПоставщикам.Колонки.Добавить("ИДОбъекта", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(0)));
ТаблицаЗаказовПоставщикам.Колонки.Добавить("Тара", Новый ОписаниеТипов("Булево"));

// Заполняем колонки таблицы значений ТаблицаОбъектовДоЗаполнения
ТаблицаОбъектовДоЗаполнения.Колонки.Добавить("ИДОбъекта", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(0)));
ТаблицаОбъектовДоЗаполнения.Колонки.Добавить("СтруктураДанныхОбъекта", Новый ОписаниеТипов("Структура"));

мСтруктураОбъектаАвтокорректировки = Неопределено;
мМодифицированностьОбъектаПередАвтокорректировкой = Ложь;
мЗаписанОбъектАвтокорректировки = Ложь;

мЗакрытьПринудительно = Ложь;

СписокИсторииОтбора = Новый СписокЗначений;
