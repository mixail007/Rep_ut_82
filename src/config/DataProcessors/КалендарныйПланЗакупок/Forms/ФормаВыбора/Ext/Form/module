////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Определяет, из какой таблицы главной формы отчета была вызвана форма.
Перем ИсходноеДерево;
Перем мСтруктураСуществующиеЗначения;
Перем мСтруктураНеиспользуемыеЗначения;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
// 

// Процедура передает сделанные настройки в форму-владелец.
//
Процедура Выбрать()

	ОписаниеТиповСтрока = ПолучитьОписаниеТиповСтроки(100);

	ВыбранныеСтроки = Новый ТаблицаЗначений;
	ВыбранныеСтроки.Колонки.Добавить("ИмяФильтра", ОписаниеТиповСтрока);
	ВыбранныеСтроки.Колонки.Добавить("ПредставлениеФильтра", ОписаниеТиповСтрока);
	ВыбранныеСтроки.Колонки.Добавить("ОписаниеТипов");
	ВыбранныеСтроки.Колонки.Добавить("Свойство");

	Если ЭлементыФормы.Дерево.ТекущаяСтрока <> Неопределено Тогда
		СтрТабличноеПоле = ЭлементыФормы.Дерево.ТекущиеДанные;

		НоваяСтрока = ВыбранныеСтроки.Добавить();
		НоваяСтрока.ИмяФильтра           = СтрТабличноеПоле.ИмяФильтра;
		НоваяСтрока.ПредставлениеФильтра = СтрТабличноеПоле.ПредставлениеФильтра;
		НоваяСтрока.ОписаниеТипов        = СтрТабличноеПоле.ОписаниеТиповСвойство;
		НоваяСтрока.Свойство             = СтрТабличноеПоле.Свойство;
		
	КонецЕсли;

	ОповеститьОВыборе(ВыбранныеСтроки);

КонецПроцедуры // Выбрать()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "При открытии" формы.
//
Процедура ПриОткрытии()
	
	СтруктураПараметров = НачальноеЗначениеВыбора;

	мСтруктураСуществующиеЗначения = Новый Структура;

	мСтруктураНеиспользуемыеЗначения = Новый Структура;

	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда

		// Структура содержит существующее значение в поле, из которого инициирован выбор,
		// или несколько значений, если это выбор нескольких значений из списка
		СтруктураПараметров.Свойство("СтруктураСуществующиеЗначения", мСтруктураСуществующиеЗначения);
		
		// Структура содержит существующие в таблице значения, которые должны быть исключены 
		// из списка выбора. Используется для того, чтобы нельзя было вставить несколько
		// одинаковых группировок или фильтров
		СтруктураПараметров.Свойство("СтруктураНеиспользуемыеЗначения", мСтруктураНеиспользуемыеЗначения);
		
		СтруктураПараметров.Свойство("ИсходноеДерево", ИсходноеДерево);
		
	КонецЕсли;

	Заголовок="Фильтры помощника заполнения";
	
	Для Каждого Элемент Из мСтруктураНеиспользуемыеЗначения Цикл
		НайденнаяСтрока = ИсходноеДерево.Строки.Найти(Элемент.Ключ, "ИмяФильтра", Истина);
		Если НайденнаяСтрока <> Неопределено Тогда
			Если НайденнаяСтрока.Строки.Количество()=0 Тогда
				
				// Удаление строк последнего уровня
				Родитель = НайденнаяСтрока.Родитель;
				Если Родитель = Неопределено Тогда
					Строки = ИсходноеДерево.Строки;
				Иначе
					Строки = Родитель.Строки;
				КонецЕсли;
				Строки.Удалить(НайденнаяСтрока);

				Если Родитель <> Неопределено Тогда
					
					// Удаление строк предпоследнего уровня
					РодительРодитель = Родитель.Родитель;
					Если РодительРодитель <> Неопределено Тогда

						// Если это служебная строка "Свойства" и она не имеет вложенных строк - 
						// видов свойств, то удаляем ее
						Если Найти(Родитель.ИмяФильтра, "СвойстваКонтрагента")>0 И Родитель.Строки.Количество()=0 Тогда
							РодительРодитель.Строки.Удалить(Родитель);
						КонецЕсли;

						// Удаление строк первого уровня
						Если РодительРодитель.Строки.Количество()=0 И мСтруктураНеиспользуемыеЗначения.Свойство(РодительРодитель.ИмяФильтра) Тогда
							ИсходноеДерево.Строки.Удалить(РодительРодитель);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЭлементыФормы.Дерево.Значение = ИсходноеДерево;

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик нажатия кнопки "ОК".
//
Процедура КнопкаВыбратьНажатие(Элемент)

	Если Найти(ЭлементыФормы.Дерево.ТекущиеДанные.ИмяФильтра, "СвойстваКонтрагента")>0 Тогда
		Предупреждение("Выберите одно свойство из списка!");
		Возврат;
	КонецЕсли;
	
	// Проверим, чтобы не выбирали то, что уже есть
	Если мСтруктураНеиспользуемыеЗначения.Свойство(ЭлементыФормы.Дерево.ТекущаяСтрока.ИмяФильтра) Тогда
		Предупреждение("Это значение уже есть в списке!");
		Возврат;
	КонецЕсли;

	Выбрать();

КонецПроцедуры // КнопкаВыбратьНажатие()

// Процедура - обработчик попытки удаления строки из таблицы.
//
Процедура ДеревоПередУдалением(Элемент, Отказ)

	Отказ = Истина;

КонецПроцедуры // ТабличноеПолеПередУдалением()

// Процедура - обработчик выбора строки таблицы.
//
Процедура ДеревоВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущаяСтрока.ИмяФильтра = "СвойстваКонтрагента" Тогда
		Предупреждение("Выберите одно свойство из списка!");
		Возврат;
	КонецЕсли;
	
	// Проверим, чтобы не выбирали то, что уже есть
	Если мСтруктураНеиспользуемыеЗначения.Свойство(Элемент.ТекущаяСтрока.ИмяФильтра) Тогда
		Предупреждение("Это значение уже есть в списке!");
		Возврат;
	КонецЕсли;

	Выбрать();

КонецПроцедуры // ТабличноеПолеВыбор()

// Процедура - обработчик попытки добавления строки в таблицу.
//
Процедура ДеревоПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

КонецПроцедуры // ТабличноеПолеПередНачаломДобавления()
