
Перем мМаксимальноеКоличествоФлажков;

// Дерево свойст и категорий контрагентов, которые используются для отборов
Перем мДеревоСвойстваКатегории;

// Запрос для заполнения данными конечной таблицы, в виде дерева
Перем мДеревоЗапросаРезультирующейТаблицы;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ПолучитьНовуюСтруктуруДанных()

	НоваяСтруктура = Новый Соответствие;
	НоваяСтруктура.Вставить("ТипЦен", Справочники.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка());
	НоваяСтруктура.Вставить("Цена", 0);
	НоваяСтруктура.Вставить("ЦенаУпр", 0);
	НоваяСтруктура.Вставить("МинимальнаяЦена", Ложь);
	НоваяСтруктура.Вставить("ОсновнойПоставщик", Ложь);
	НоваяСтруктура.Вставить("ЯчейкаНедоступна", Ложь);
	НоваяСтруктура.Вставить("ЯчейкаТолькоПросмотр", Ложь);
	НоваяСтруктура.Вставить("ОсобыеУсловияПоставки", Ложь);
	НоваяСтруктура.Вставить("ДоговорУсловийПоставки", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	
	Возврат НоваяСтруктура;

КонецФункции // ПолучитьНовуюСтруктуруДанных()

// Функция определяет документ условий постави по договору взаиморасчетов
// для определенной ячейки грида и определенной цены
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   ДокументСсылка.УсловияПоДоговорамВзаиморасчетов
//
Функция ОпределитьДокументОсобыхУсловийПоставки()
	
	Если ЭлементыФормы.КонечнаяТаблица.ТекущиеДанные = Неопределено ИЛИ ЭлементыФормы.КонечнаяТаблица.ТекущаяКолонка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ИмяКолонки = ЭлементыФормы.КонечнаяТаблица.ТекущаяКолонка.Имя;
	
	Если ЭлементыФормы.КонечнаяТаблица.ТекущиеДанные["СтруктураДанных" + ИмяКолонки].Получить("ОсобыеУсловияПоставки") Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ТекущаяДата"    , ТекущаяДата());
		Запрос.УстановитьПараметр("ВыбНоменклатура", ПолучитьНоменклатуруИХарактеристикуПоИмениКолонки(ИмяКолонки).Номенклатура);
		Запрос.УстановитьПараметр("ВыбДоговор"     , ЭлементыФормы.КонечнаяТаблица.ТекущиеДанные["СтруктураДанных" + ИмяКолонки].Получить("ДоговорУсловийПоставки"));
		
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.Регистратор
		|ИЗ
		|	РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре КАК УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре
		|ГДЕ
		|	УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.Период <= &ТекущаяДата
		|	И
		|	УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.Номенклатура = &ВыбНоменклатура
		|	И
		|	УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.ДоговорКонтрагента = &ВыбДоговор
		|
		|УПОРЯДОЧИТЬ ПО
		|	УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.Период УБЫВ
		|";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Неопределено;
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.Регистратор;
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецФункции

// Функция создает объекты ЗаказПоставщику изаполняет их данными, на основании
// настроек пользователя
// 
// Параметры:
//  НЕТ
//
// Возвращаемое значение
//  НЕТ
//
Функция ЗарегистрироватьЗаказы()
	
	мФормаИндикации.Открыть();
	
	МассивОбъектовЗаказов = Новый Массив;
	
	мФормаИндикации.КомментарийОбработкиДанных = "Создаются заказы ...";
	мФормаИндикации.МаксимальноеЗначение = КонечнаяТаблица.Количество() - 1;
	Для каждого Строка Из КонечнаяТаблица Цикл
		
		мФормаИндикации.Значение = КонечнаяТаблица.Индекс(Строка);
	
		ВременнаяТаблицаТоваров = Новый ТаблицаЗначений;
		ВременнаяТаблицаТоваров.Колонки.Добавить("Номенклатура"              , Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ВременнаяТаблицаТоваров.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ВременнаяТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения"          , Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
		ВременнаяТаблицаТоваров.Колонки.Добавить("ЦенаУпрУчета"              , Новый ОписаниеТипов("Число"));
		ВременнаяТаблицаТоваров.Колонки.Добавить("ЦенаКонтрагента"           , Новый ОписаниеТипов("Число"));
		ВременнаяТаблицаТоваров.Колонки.Добавить("ВалютаКонтрагента"         , Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ВременнаяТаблицаТоваров.Колонки.Добавить("Договор"                   , Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		ВременнаяТаблицаТоваров.Колонки.Добавить("Тара"                      , Новый ОписаниеТипов("Булево"));
		
		Для каждого Колонка Из ЭлементыФормы.КонечнаяТаблица.Колонки Цикл
			
			Если Колонка.Имя = "Контрагент" ИЛИ Колонка.Имя = "КонтрагентОписание" Тогда
				Продолжить;
			КонецЕсли; 
			
			Если НЕ Строка["Флаг" + Колонка.Имя] Тогда
				Продолжить;
			КонецЕсли; 
			
			ИмяКолонки = Колонка.Имя;
			СтруктураНоменклатуры = ПолучитьНоменклатуруИХарактеристикуПоИмениКолонки(ИмяКолонки);
			НоваяСтрокаТовара = ВременнаяТаблицаТоваров.Добавить();
			НоваяСтрокаТовара.Номенклатура               = СтруктураНоменклатуры.Номенклатура;
			НоваяСтрокаТовара.ХарактеристикаНоменклатуры = СтруктураНоменклатуры.ХарактеристикаНоменклатуры;
			НоваяСтрокаТовара.Тара                       = СтруктураНоменклатуры.Тара;
			
			Если Строка["СтруктураДанных" + ИмяКолонки]["ОсобыеУсловияПоставки"] Тогда
				НоваяСтрокаТовара.Договор           = Строка["СтруктураДанных" + ИмяКолонки]["ДоговорУсловийПоставки"];
				НоваяСтрокаТовара.ЦенаКонтрагента   = Строка["СтруктураДанных" + ИмяКолонки]["Цена"];
				НоваяСтрокаТовара.ЦенаУпрУчета      = Строка["СтруктураДанных" + ИмяКолонки]["ЦенаУпр"];
				СтрокиДерева = мДеревоЗапросаРезультирующейТаблицы.Строки.НайтиСтроки(Новый Структура("Номенклатура, Контрагент, Договор", СтруктураНоменклатуры.Номенклатура, Строка.Контрагент, (Строка["СтруктураДанных" + ИмяКолонки]["ДоговорУсловийПоставки"])), Истина);
				Если СтрокиДерева.Количество() > 0 Тогда
					НоваяСтрокаТовара.ВалютаКонтрагента = СтрокиДерева[0].Валюта;
					НоваяСтрокаТовара.ЕдиницаИзмерения  = СтрокиДерева[0].ЕдиницаИзмерения;
				КонецЕсли; 
			Иначе
				СтрокиДерева = мДеревоЗапросаРезультирующейТаблицы.Строки.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Контрагент", СтруктураНоменклатуры.Номенклатура, СтруктураНоменклатуры.ХарактеристикаНоменклатуры, Строка.Контрагент), Истина);
				НайденнаяСтрока = Неопределено;
				Для каждого СтрокаДерева Из СтрокиДерева Цикл
					Если СтрокаДерева.ЦенаУпрУчета = Строка["СтруктураДанных" + ИмяКолонки]["ЦенаУпр"]
					   И НЕ СтрокаДерева.ОсобыеУсловияПоставки
					   И СтрокаДерева.ТипЦены = Строка["СтруктураДанных" + ИмяКолонки]["ТипЦен"] Тогда
						НайденнаяСтрока = СтрокаДерева;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НайденнаяСтрока <> Неопределено Тогда
					НоваяСтрокаТовара.ЦенаУпрУчета      = Строка["СтруктураДанных" + ИмяКолонки]["ЦенаУпр"];
					НоваяСтрокаТовара.ЦенаКонтрагента   = Строка["СтруктураДанных" + ИмяКолонки]["Цена"];
					НоваяСтрокаТовара.Договор           = НайденнаяСтрока.Договор;
					НоваяСтрокаТовара.ВалютаКонтрагента = НайденнаяСтрока.Валюта;
					НоваяСтрокаТовара.ЕдиницаИзмерения  = НайденнаяСтрока.ЕдиницаИзмерения;
				КонецЕсли; 
			КонецЕсли; 
			
		КонецЦикла; 
		
		Если ВременнаяТаблицаТоваров.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаДоговоров = ВременнаяТаблицаТоваров.Скопировать();
		ТаблицаДоговоров.Свернуть("Договор");
		
		Для каждого СтрокаДоговоров Из ТаблицаДоговоров Цикл
		
			МассивОбъектовЗаказов.Добавить(Документы.ЗаказПоставщику.СоздатьДокумент());
			
			ИндексОбъекта = МассивОбъектовЗаказов.Количество() - 1;
			
			МассивОбъектовЗаказов[ИндексОбъекта].Дата             = ТекущаяДата();
			МассивОбъектовЗаказов[ИндексОбъекта].УстановитьНовыйНомер();
			
			МассивОбъектовЗаказов[ИндексОбъекта].Контрагент       = Строка.Контрагент;
			МассивОбъектовЗаказов[ИндексОбъекта].УчитыватьНДС     = Истина;
			МассивОбъектовЗаказов[ИндексОбъекта].СуммаВключаетНДС = Истина;
			
			Если НЕ ЗначениеНеЗаполнено(СтрокаДоговоров.Договор) Тогда
				
				МассивОбъектовЗаказов[ИндексОбъекта].ВалютаДокумента    = СтрокаДоговоров.Договор.ВалютаВзаиморасчетов;
				МассивОбъектовЗаказов[ИндексОбъекта].ДоговорКонтрагента = СтрокаДоговоров.Договор;
				МассивОбъектовЗаказов[ИндексОбъекта].ДоговорКонтрагента = СтрокаДоговоров.Договор;
				МассивОбъектовЗаказов[ИндексОбъекта].Организация        = СтрокаДоговоров.Договор.Организация;
				
			КонецЕсли;
			
			ТоварыПоДоговору = ВременнаяТаблицаТоваров.НайтиСтроки(Новый Структура("Договор", СтрокаДоговоров.Договор));
			
			НаименьшаяДатаПотребности = Неопределено;
			
			Для каждого СтрокаТовара Из ТоварыПоДоговору Цикл
				
				СтрокиТаблицыТовары = ТаблицаТоваров.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Тара", СтрокаТовара.Номенклатура, СтрокаТовара.ХарактеристикаНоменклатуры, СтрокаТовара.Тара));
				СтрокиТаблицыПотребности = ТаблицаПотребности.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Тара", СтрокаТовара.Номенклатура, СтрокаТовара.ХарактеристикаНоменклатуры, СтрокаТовара.Тара));
				
				Для каждого СтрокаТаблицыПотребности Из СтрокиТаблицыПотребности Цикл
					Если СтрокаТаблицыПотребности.ДатаПотребности = '00010101000000' Тогда
						Продолжить;
					КонецЕсли; 
					Если НаименьшаяДатаПотребности = Неопределено Тогда
						НаименьшаяДатаПотребности = СтрокаТаблицыПотребности.ДатаПотребности;
						Продолжить;
					КонецЕсли;
					Если СтрокаТаблицыПотребности.ДатаПотребности < НаименьшаяДатаПотребности Тогда
						НаименьшаяДатаПотребности = СтрокаТаблицыПотребности.ДатаПотребности;
					КонецЕсли;
				КонецЦикла; 
				
				КоличествоТовара = 0;
				Для каждого СтрокаТаблицыТовары Из СтрокиТаблицыТовары Цикл
					КоличествоТовара = КоличествоТовара + СтрокаТаблицыТовары.КоличествоЗаказать;
				КонецЦикла; 
				
				Если СтрокаТовара.Тара = Истина Тогда
					
					НоваяСтрокаТовара = МассивОбъектовЗаказов[ИндексОбъекта].ВозвратнаяТара.Добавить();
					НоваяСтрокаТовара.Номенклатура               = СтрокаТовара.Номенклатура;
					НоваяСтрокаТовара.Количество                 = КоличествоТовара;
					
					ВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
					Если МассивОбъектовЗаказов[ИндексОбъекта].ВалютаДокумента = ВалютаУпрУчета Тогда
						НоваяСтрокаТовара.Цена = СтрокаТовара.ЦенаУпрУчета;
					Иначе
						Если МассивОбъектовЗаказов[ИндексОбъекта].ВалютаДокумента.Пустая() Тогда
							МассивОбъектовЗаказов[ИндексОбъекта].ВалютаДокумента = ВалютаУпрУчета;
							НоваяСтрокаТовара.Цена = СтрокаТовара.ЦенаУпрУчета;
						Иначе
							СтруктураКурсаУпрУчета = ПолучитьКурсВалюты(ВалютаУпрУчета, ТекущаяДата());
							КурсУпрУчета           = СтруктураКурсаУпрУчета.Курс;
							КратностьУпрУчета      = СтруктураКурсаУпрУчета.Кратность;
							
							СтруктураКурсаДокумента = ПолучитьКурсВалюты(МассивОбъектовЗаказов[ИндексОбъекта].ВалютаДокумента, ТекущаяДата());
							КурсДокумента           = СтруктураКурсаУпрУчета.Курс;
							КратностьДокумента      = СтруктураКурсаУпрУчета.Кратность;
							
							НоваяСтрокаТовара.Цена = ПересчитатьИзВалютыВВалюту(СтрокаТовара.ЦенаУпрУчета, ВалютаУпрУчета, МассивОбъектовЗаказов[ИндексОбъекта].ВалютаДокумента,
													 КурсУпрУчета, КурсДокумента, КратностьУпрУчета, КратностьДокумента);
						КонецЕсли; 
						
					КонецЕсли; 
					
					РассчитатьСуммуТабЧасти(НоваяСтрокаТовара, МассивОбъектовЗаказов[ИндексОбъекта]);
					
				Иначе
					
					НоваяСтрокаТовара = МассивОбъектовЗаказов[ИндексОбъекта].Товары.Добавить();
					НоваяСтрокаТовара.Номенклатура               = СтрокаТовара.Номенклатура;
					НоваяСтрокаТовара.ХарактеристикаНоменклатуры = СтрокаТовара.ХарактеристикаНоменклатуры;
					НоваяСтрокаТовара.ЕдиницаИзмерения           = СтрокаТовара.ЕдиницаИзмерения;
					НоваяСтрокаТовара.Количество                 = КоличествоТовара;
					НоваяСтрокаТовара.Коэффициент                = 1;
					НоваяСтрокаТовара.СтавкаНДС                  = НоваяСтрокаТовара.Номенклатура.СтавкаНДС;
					
					ВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
					Если МассивОбъектовЗаказов[ИндексОбъекта].ВалютаДокумента = ВалютаУпрУчета Тогда
						НоваяСтрокаТовара.Цена = СтрокаТовара.ЦенаУпрУчета;
					ИначеЕсли МассивОбъектовЗаказов[ИндексОбъекта].ВалютаДокумента = СтрокаТовара.ВалютаКонтрагента Тогда
 						НоваяСтрокаТовара.Цена = СтрокаТовара.ЦенаКонтрагента;
					Иначе
						Если МассивОбъектовЗаказов[ИндексОбъекта].ВалютаДокумента.Пустая() Тогда
							МассивОбъектовЗаказов[ИндексОбъекта].ВалютаДокумента = ВалютаУпрУчета;
							НоваяСтрокаТовара.Цена = СтрокаТовара.ЦенаУпрУчета;
						Иначе
							СтруктураКурсаУпрУчета = ПолучитьКурсВалюты(ВалютаУпрУчета, ТекущаяДата());
							КурсУпрУчета           = СтруктураКурсаУпрУчета.Курс;
							КратностьУпрУчета      = СтруктураКурсаУпрУчета.Кратность;
							
							СтруктураКурсаДокумента = ПолучитьКурсВалюты(МассивОбъектовЗаказов[ИндексОбъекта].ВалютаДокумента, ТекущаяДата());
							КурсДокумента           = СтруктураКурсаДокумента.Курс;
							КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
							
							НоваяСтрокаТовара.Цена = ПересчитатьИзВалютыВВалюту(СтрокаТовара.ЦенаУпрУчета, ВалютаУпрУчета, МассивОбъектовЗаказов[ИндексОбъекта].ВалютаДокумента,
													 КурсУпрУчета, КурсДокумента, КратностьУпрУчета, КратностьДокумента);
						КонецЕсли; 
						
					КонецЕсли; 
					
					РассчитатьКоличествоМестТабЧасти(НоваяСтрокаТовара, МассивОбъектовЗаказов[ИндексОбъекта]);
					РассчитатьСуммуТабЧасти(НоваяСтрокаТовара, МассивОбъектовЗаказов[ИндексОбъекта]);
					РассчитатьСуммуНДСТабЧасти(НоваяСтрокаТовара, МассивОбъектовЗаказов[ИндексОбъекта]);
					
				КонецЕсли; 
				
			КонецЦикла; 
			
			ЗаполнитьШапкуДокумента(МассивОбъектовЗаказов[ИндексОбъекта], глТекущийПользователь, мВалютаРегламентированногоУчета, "Покупка");
			УстановитьНомерДокумента(МассивОбъектовЗаказов[ИндексОбъекта]);
			
			Если НаименьшаяДатаПотребности <> Неопределено Тогда
				МассивОбъектовЗаказов[ИндексОбъекта].ДатаПоступления = НаименьшаяДатаПотребности;
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЦикла; 
	
	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
	Возврат МассивОбъектовЗаказов;
	
КонецФункции

// Процедура заполняет дерево свойств и категорий контрагентов
// для настройки отборов пользователем по свойствам и категориям контрагентов
// 
// Параметры:
//  НЕТ
//
// Возвращаемое значение
//  НЕТ
//
Процедура ЗаполнитьТаблицуСвойствИКатегирий()

	мФормаИндикации.Открыть();
	
	мФормаИндикации.КомментарийОбработкиДанных = "Выполняется запрос по свойствам и категориям ...";
	мФормаИндикации.МаксимальноеЗначение = 100;
	мФормаИндикации.Значение = 50;
		
	Запрос = Новый Запрос;

	Запрос.Текст = "";

	Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов["Справочник_Контрагенты"];
	
	Запрос.УстановитьПараметр("Назначение", Назначение);

	Запрос.Текст = Запрос.Текст + "
	|
	|ВЫБРАТЬ 
	|	ПланВидовХарактеристик.СвойстваОбъектов.Представление КАК ПредставлениеСвойства,
	|	ПланВидовХарактеристик.СвойстваОбъектов.Ссылка        КАК Ссылка
	|
	|ИЗ
	|	ПланВидовХарактеристик.СвойстваОбъектов
	|
	|ГДЕ
	|	ПланВидовХарактеристик.СвойстваОбъектов.НазначениеСвойства = &Назначение";

	Строка = Запрос.Выполнить().Выбрать();
	
	СтрокаСвойства = мДеревоСвойстваКатегории.Строки.Добавить();
	СтрокаСвойства.ИмяФильтра           = "СвойстваКонтрагента";
	СтрокаСвойства.ПредставлениеФильтра = "Свойства контрагента";
	
	ИндексСтроки = 0;
	
	Пока Строка.Следующий() Цикл
	
		НоваяСтрока = СтрокаСвойства.Строки.Добавить();
		НоваяСтрока.ИмяФильтра            = "Свойство" + Строка(ИндексСтроки);
		НоваяСтрока.ПредставлениеФильтра  = Строка(Строка.Ссылка);
		НоваяСтрока.Свойство              = Строка.Ссылка;
		НоваяСтрока.ОписаниеТиповСвойство = Строка.Ссылка.ТипЗначения;
	
		ИндексСтроки = ИндексСтроки + 1;
		
	КонецЦикла; 

	СтрокаКатегории = мДеревоСвойстваКатегории.Строки.Добавить();
	СтрокаКатегории.ИмяФильтра            = "КатегорииКонтрагента";
	СтрокаКатегории.ПредставлениеФильтра  = "Категории контрагента";
	СтрокаКатегории.ОписаниеТиповСвойство = Новый ОписаниеТипов("СправочникСсылка.КатегорииОбъектов");
	СтрокаКатегории.Свойство              = Назначение;
	
	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

// Процедура устанавливает доступность кнопок нижней командной панели
// формы, в зависимости от текущего состояния выполнения помощника
// 
// Параметры:
//  НЕТ
//
// Возвращаемое значение
//  НЕТ
//
Процедура ДоступностьКнопокНижнейПанели()

	Если ЭлементыФормы.ПанельПомощника.ТекущаяСтраница.Имя = "Номенклатура" Тогда
	
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад.Доступность  = Ложь;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Далее.Доступность  = Истина;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Готово.Доступность = Ложь;

	ИначеЕсли ЭлементыФормы.ПанельПомощника.ТекущаяСтраница.Имя = "Настройки" Тогда
		
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад.Доступность  = Истина;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Далее.Доступность  = Истина;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Готово.Доступность = Ложь;
		
	ИначеЕсли ЭлементыФормы.ПанельПомощника.ТекущаяСтраница.Имя = "Результат" Тогда
		
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад.Доступность  = Истина;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Далее.Доступность  = Ложь;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Готово.Доступность = Истина;
		
	КонецЕсли; 

КонецПроцедуры

// Функция возвращает имя колонки конечной таблицы по индексу строки таблицы товаров
// 
// Параметры:
//  ИндексСтроки - Число, индекст стороки таблицы товаров
//
// Возвращаемое значение
//  Строка, имя колонки конечной таблицы
//
Функция ПолучитьИмяКолонки(ИндексСтроки)

	ИД = "_" + Строка(ИндексСтроки);
	
	Возврат СокрЛП(ИД);

КонецФункции //

// Функция определяет по имени колонки конечной таблицы Номенклатуру и Характеристику номенклатуры
//  для которых была создана данная колонка
// 
// Параметры:
//  ИмяКолонки - Строка, имя колонки конечной таблицы
//
// Возвращаемое значение
//  Структура, с ключем "Номенклатура" - СправочникСсылка.Номенклатура
//             с ключем "ХарактеристикаНоменклатуры" - СправочникСсылка.ХарактеристикиНоменклатуры
//
Функция ПолучитьНоменклатуруИХарактеристикуПоИмениКолонки(Знач ИмяКолонки)
	
	СтруктураВозврата = Новый Структура;
	
	ПозицияДобНомера = Найти(ИмяКолонки, "__");
	Если ПозицияДобНомера > 0 Тогда
		ИмяКолонки = Лев(ИмяКолонки, (ПозицияДобНомера - 1));
	КонецЕсли; 
	
	Если Сред(ИмяКолонки, 1, 1) <> "_" Тогда
		СтруктураВозврата.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
		СтруктураВозврата.Вставить("ХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		СтруктураВозврата.Вставить("Тара", Ложь);
	Иначе
		ИндексСтроки = Число(Сред(ИмяКолонки, 2));
		Если ИндексСтроки > ТаблицаТоваров.Количество() - 1 Тогда
			СтруктураВозврата.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
			СтруктураВозврата.Вставить("ХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			СтруктураВозврата.Вставить("Тара", Ложь);
		Иначе
			СтруктураВозврата.Вставить("Номенклатура", ТаблицаТоваров[ИндексСтроки].Номенклатура);
			СтруктураВозврата.Вставить("ХарактеристикаНоменклатуры", ТаблицаТоваров[ИндексСтроки].ХарактеристикаНоменклатуры);
			СтруктураВозврата.Вставить("Тара", ТаблицаТоваров[ИндексСтроки].Тара);
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат СтруктураВозврата;

КонецФункции

// Процедура заполняет конечную таблицу, по введенным пользователем критериям отбора
//  и выбранным номенклатурным позициям
// 
// Параметры:
//  НЕТ
//
// Возвращаемое значение
//  НЕТ
//
Процедура ЗаполнитьКонечнуюТаблицу()
	
	мФормаИндикации.Открыть();
	
	мФормаИндикации.КомментарийОбработкиДанных = "Выполняется поиск поставщиков ...";
	
	СписокНоменклатуры = Новый СписокЗначений;
	СписокОсновныхПоставщиков = Новый СписокЗначений;
	
	ВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
	
	КонечнаяТаблица.Очистить();
	КонечнаяТаблица.Колонки.Очистить();
	КонечнаяТаблица.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	КонечнаяТаблица.Колонки.Добавить("КонтрагентОписание", Новый ОписаниеТипов("Строка"));
	
	мФормаИндикации.КомментарийОбработкиДанных = "Подготавливаются данные для запроса ...";
	мФормаИндикации.МаксимальноеЗначение = ТаблицаТоваров.Количество() - 1;
	
	СписокОтбораНоменклатуры = Новый СписокЗначений;
	
	Для каждого СтрокаНоменклатуры Из ТаблицаТоваров Цикл
		мФормаИндикации.Значение = ТаблицаТоваров.Индекс(СтрокаНоменклатуры);
		Если СтрокаНоменклатуры.ФлагИспользование = Истина Тогда
			ИдНоменклатуры = ПолучитьИмяКолонки(ТаблицаТоваров.Индекс(СтрокаНоменклатуры));
			СписокНоменклатуры.Добавить(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Тара", СтрокаНоменклатуры.Номенклатура, СтрокаНоменклатуры.ХарактеристикаНоменклатуры, СтрокаНоменклатуры.Тара), ИдНоменклатуры);
			Если СписокОтбораНоменклатуры.НайтиПоЗначению(СтрокаНоменклатуры.Номенклатура) = Неопределено Тогда
				СписокОтбораНоменклатуры.Добавить(СтрокаНоменклатуры.Номенклатура);
			КонецЕсли; 
			Если НЕ СтрокаНоменклатуры.Номенклатура.ОсновнойПоставщик.Пустая() Тогда
				СписокОсновныхПоставщиков.Добавить(СтрокаНоменклатуры.Номенклатура.ОсновнойПоставщик);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	мФормаИндикации.КомментарийОбработкиДанных = "Выполняется запрос ...";
	мФормаИндикации.МаксимальноеЗначение = 100;
	мФормаИндикации.Значение = 50;
	
	// Запрос, который выбирает все необходимые данные для заполнения результирующей таблицы,
	// цены номенклатуры поставщиков, типы цен и пр.
	Запрос = Новый Запрос;
	СтруктураКурсаУпрУчета = ПолучитьКурсВалюты(ВалютаУпрУчета, ТекущаяДата());
	
	Запрос.УстановитьПараметр("СписокНоменклатуры"       , СписокОтбораНоменклатуры);
	Запрос.УстановитьПараметр("СписокОсновныхПоставщиков", СписокОсновныхПоставщиков);
	
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	Запрос.УстановитьПараметр("ВыбВидДоговора", СписокВидовДоговоров);
	
	Запрос.УстановитьПараметр("ПустаяВалюта"        , Справочники.Валюты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяНадежность"    , Перечисления.Важность.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВалютаУпрУчета"      , ВалютаУпрУчета);
	Запрос.УстановитьПараметр("КурсУпрУчета"        , СтруктураКурсаУпрУчета.Курс);
	Запрос.УстановитьПараметр("КратностьУпрУчета"   , СтруктураКурсаУпрУчета.Кратность);
	Запрос.УстановитьПараметр("ТекущаяДата"         , ТекущаяДата());
	Запрос.УстановитьПараметр("ВыбДоставка"         , ЗначениеДоставка);
	Запрос.УстановитьПараметр("ВыбСрокВыполнения"   , ЗначениеСрокВыполненияЗаказа);
	Запрос.УстановитьПараметр("ВыбСрокВыполненияНач", ЗначениеСрокВыполненияЗаказаНач);
	Запрос.УстановитьПараметр("ВыбСрокВыполненияКон", ЗначениеСрокВыполненияЗаказаКон);
	Запрос.УстановитьПараметр("ВыбНадежность"       , ЗначениеНадежность);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КонечнаяТаблица.Контрагент                 КАК Контрагент,
	|	КонечнаяТаблица.Номенклатура               КАК Номенклатура,
	|	КонечнаяТаблица.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	КонечнаяТаблица.ОсобыеУсловияПоставки      КАК ОсобыеУсловияПоставки,
	|	КонечнаяТаблица.НадежностьПоставщика       КАК Надежность,
	|	КонечнаяТаблица.Договор                    КАК Договор,
	|	КонечнаяТаблица.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|	КонечнаяТаблица.Цена                       КАК Цена,
	|	КонечнаяТаблица.Валюта                     КАК Валюта,
	|	КонечнаяТаблица.ЦенаУпрУчета               КАК ЦенаУпрУчета,
	|	КонечнаяТаблица.ТипЦены                    КАК ТипЦены
	|
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|
	|		ПочтиКонечнаяТаблица.Контрагент.ВидДоставки     КАК ВидДоставки,
	|		ПочтиКонечнаяТаблица.Контрагент.СрокВыполненияЗаказаПоставщиком КАК СрокВыполненияЗаказаПоставщиком,
	|		ПочтиКонечнаяТаблица.ОсобыеУсловияПоставки      КАК ОсобыеУсловияПоставки,
	|		ПочтиКонечнаяТаблица.Номенклатура               КАК Номенклатура,
	|		ПочтиКонечнаяТаблица.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ПочтиКонечнаяТаблица.Контрагент                 КАК Контрагент,
	|		ВЫБОР КОГДА
	|			НадежностьПоставщиковСрезПоследних.Надежность ЕСТЬ NULL
	|		ТОГДА
	|			&ПустаяНадежность
	|		ИНАЧЕ
	|			НадежностьПоставщиковСрезПоследних.Надежность
	|		КОНЕЦ                                           КАК НадежностьПоставщика,
	|		ПочтиКонечнаяТаблица.Договор                    КАК Договор,
	|		ПочтиКонечнаяТаблица.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|		ВЫБОР КОГДА
	|			ПочтиКонечнаяТаблица.Цена ЕСТЬ NULL 
	|		ТОГДА
	|			0
	|		ИНАЧЕ
	|			ПочтиКонечнаяТаблица.Цена
	|		КОНЕЦ                                 КАК Цена,
	|
	|		ВЫБОР КОГДА
	|			ПочтиКонечнаяТаблица.Валюта ЕСТЬ NULL 
	|		ТОГДА
	|			&ПустаяВалюта
	|		ИНАЧЕ
	|			ПочтиКонечнаяТаблица.Валюта
	|		КОНЕЦ                                 КАК Валюта,
	|
	|		ВЫРАЗИТЬ ((ВЫБОР
	|		КОГДА
	|			ПочтиКонечнаяТаблица.Валюта ЕСТЬ NULL
	|			ТОГДА
	|				0
	|		КОГДА
	|			ПочтиКонечнаяТаблица.Валюта = &ВалютаУпрУчета
	|			ТОГДА
	|				ВЫБОР КОГДА
	|					ПочтиКонечнаяТаблица.Цена ЕСТЬ NULL
	|				ТОГДА
	|					0
	|				ИНАЧЕ
	|					ПочтиКонечнаяТаблица.Цена
	|				КОНЕЦ
	|		КОГДА
	|			(КурсыВалют.Кратность = 0) ИЛИ (&КурсУпрУчета = 0)
	|			ТОГДА
	|				0
	|		ИНАЧЕ
	|			(ПочтиКонечнаяТаблица.Цена * КурсыВалют.Курс * &КратностьУпрУчета)/(КурсыВалют.Кратность * &КурсУпрУчета)
	|		КОНЕЦ) КАК Число(15,2))        КАК ЦенаУпрУчета,
	|		ПочтиКонечнаяТаблица.ТипЦен КАК ТипЦены
	|	ИЗ
	|		(
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ЦеныНоменклатуры.Номенклатура               КАК Номенклатура,
	|			ЦеныНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			ВЫБОР КОГДА ЦеныНоменклатуры.ОсобыеУсловияПоставки = ИСТИНА ТОГДА ЦеныНоменклатуры.Договор.Владелец ИНАЧЕ ДоговорыКонтрагентов.Владелец КОНЕЦ КАК Контрагент,
	|			ЦеныНоменклатуры.Цена                       КАК Цена,
	|			ЦеныНоменклатуры.Валюта                 КАК Валюта,
	|			ЦеныНоменклатуры.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|			ВЫБОР КОГДА ЦеныНоменклатуры.ОсобыеУсловияПоставки = ИСТИНА ТОГДА ЦеныНоменклатуры.Договор.ТипЦен ИНАЧЕ ДоговорыКонтрагентов.ТипЦен КОНЕЦ КАК ТипЦен,
	|			ВЫБОР КОГДА ЦеныНоменклатуры.ОсобыеУсловияПоставки = ИСТИНА ТОГДА ЦеныНоменклатуры.Договор ИНАЧЕ ДоговорыКонтрагентов.Ссылка КОНЕЦ КАК Договор,
	|			ЦеныНоменклатуры.ОсобыеУсловияПоставки
	|			
	|		ИЗ
	|			(
	|			ВЫБРАТЬ
	|				ЦеныНоменклатурыКонтрагентовПоДоговорам.Номенклатура               КАК Номенклатура,
	|				ЦеныНоменклатурыКонтрагентовПоДоговорам.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|				ЦеныНоменклатурыКонтрагентовПоДоговорам.Цена                       КАК Цена,
	|				ЦеныНоменклатурыКонтрагентовПоДоговорам.ВалютаЦены                 КАК Валюта,
	|				ЦеныНоменклатурыКонтрагентовПоДоговорам.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|				ЦеныНоменклатурыКонтрагентовПоДоговорам.ДоговорКонтрагента         КАК Договор,
	|				NULL         КАК ТипЦен,
	|				ИСТИНА         КАК ОсобыеУсловияПоставки
	|			ИЗ
	|				РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.СрезПоследних(&ТекущаяДата, (Цена > 0 И Номенклатура В(&СписокНоменклатуры))) КАК ЦеныНоменклатурыКонтрагентовПоДоговорам
	|			ГДЕ
	|				ЦеныНоменклатурыКонтрагентовПоДоговорам.ДоговорКонтрагента.ВидДоговора В(&ВыбВидДоговора)
	|
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ЦеныНоменклатурыКонтрагентов.Номенклатура               КАК Номенклатура,
	|				ЦеныНоменклатурыКонтрагентов.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|				ЦеныНоменклатурыКонтрагентов.Цена                       КАК Цена,
	|				ЦеныНоменклатурыКонтрагентов.Валюта                 КАК Валюта,
	|				ЦеныНоменклатурыКонтрагентов.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|				NULL         КАК Договор,
	|				ЦеныНоменклатурыКонтрагентов.ТипЦен         КАК ТипЦен,
	|				ЛОЖЬ         КАК ОсобыеУсловияПоставки
	|			ИЗ
	|				РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(&ТекущаяДата, (Цена > 0 И Номенклатура В(&СписокНоменклатуры))) КАК ЦеныНоменклатурыКонтрагентов
	|
	|			) КАК ЦеныНоменклатуры
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО
	|			ЦеныНоменклатуры.ТипЦен = ДоговорыКонтрагентов.ТипЦен
	|			
	|		) КАК ПочтиКонечнаяТаблица
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|
	|		(
	|		ВЫБРАТЬ
	|		
	|			ВЫБОР КОГДА
	|				КурсыВалютВнутр.Курс ЕСТЬ NULL 
	|			ТОГДА 
	|				0
	|			ИНАЧЕ
	|				КурсыВалютВнутр.Курс
	|			КОНЕЦ                  КАК Курс,
	|			
	|			ВЫБОР КОГДА
	|				КурсыВалютВнутр.Кратность ЕСТЬ NULL 
	|			ТОГДА 
	|				0
	|			ИНАЧЕ
	|				КурсыВалютВнутр.Кратность
	|			КОНЕЦ                  КАК Кратность,
	|			КурсыВалютВнутр.Валюта КАК Валюта
	|			
	|		ИЗ
	|			РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата) КАК КурсыВалютВнутр
	|		) КАК КурсыВалют
	|		
	|	ПО
	|		КурсыВалют.Валюта = ПочтиКонечнаяТаблица.Валюта
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.НадежностьПоставщиков.СрезПоследних(&ТекущаяДата) КАК НадежностьПоставщиковСрезПоследних
	|	ПО
	|		ПочтиКонечнаяТаблица.Контрагент = НадежностьПоставщиковСрезПоследних.Контрагент
	|	) КАК КонечнаяТаблица
	|";
	
	Для каждого СтрокаТаблицы Из СвойстваИКатегорииКонтрагентов Цикл
		
		Если СтрокаТаблицы.Использование Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|
			|	СОЕДИНЕНИЕ
			|";
			
			Если СтрокаТаблицы.ИмяФильтра = "КатегорииКонтрагента" Тогда
				
				Запрос.Текст = Запрос.Текст + "
				|	
				|		(
				|		ВЫБРАТЬ
				|			КатегорииОбъектов.Объект КАК Объект
				|		ИЗ
				|			РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
				|		ГДЕ
				|			" + ПолучитьСтрокуОтбора(СтрокаТаблицы.ВидСравненияФильтра, "&ВыбКатегория", "КатегорииОбъектов.Категория") + "
				|		СГРУППИРОВАТЬ ПО
				|			Объект
				|		) КАК КатегорииОбъектов
				|	ПО КонечнаяТаблица.Контрагент = КатегорииОбъектов.Объект
				|";
				
				Запрос.УстановитьПараметр("ВыбКатегория", СтрокаТаблицы.ЗначениеФильтра);
				
			Иначе
				
				Запрос.Текст = Запрос.Текст + "
				|		(
				|		ВЫБРАТЬ
				|			ЗначенияСвойствОбъектов.Значение КАК ЗначениеСвойства_" + СокрЛП(СтрокаТаблицы.ИмяФильтра) + ",
				|			ЗначенияСвойствОбъектов.Объект КАК ОбъектСвойства_" + СокрЛП(СтрокаТаблицы.ИмяФильтра) + "
				|		ИЗ
				|			РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
				|		ГДЕ
				|			" + ПолучитьСтрокуОтбора(СтрокаТаблицы.ВидСравненияФильтра, ("&ВыбСвойство_" + СокрЛП(СтрокаТаблицы.ИмяФильтра)), "ЗначенияСвойствОбъектов.Значение") + "
				|			И
				|			ЗначенияСвойствОбъектов.Свойство = &Выб" + СокрЛП(СтрокаТаблицы.ИмяФильтра) + "
				|		) КАК " + СокрЛП(СтрокаТаблицы.ИмяФильтра) + "
				|	ПО КонечнаяТаблица.Контрагент = " + СокрЛП(СтрокаТаблицы.ИмяФильтра) + ".ОбъектСвойства_" + СокрЛП(СтрокаТаблицы.ИмяФильтра) + "
				|";
				
				Запрос.УстановитьПараметр("Выб" + СокрЛП(СтрокаТаблицы.ИмяФильтра), СтрокаТаблицы.Свойство);
				Запрос.УстановитьПараметр("ВыбСвойство_" + СокрЛП(СтрокаТаблицы.ИмяФильтра), СтрокаТаблицы.ЗначениеФильтра);
				
			КонецЕсли; 
		
		КонецЕсли; 
		
	КонецЦикла; 
	
	Запрос.Текст = Запрос.Текст + "
	|	ГДЕ
	|		КонечнаяТаблица.Договор.ВидДоговора В(&ВыбВидДоговора)
	|";
	
	Если ИспользоватьТолькоОсновныхПоставщиков Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И
		|		КонечнаяТаблица.Контрагент В(&СписокОсновныхПоставщиков)
		|";
	КонецЕсли; 
	
	Если ФлагДоставка Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И
		|	" + ПолучитьСтрокуОтбора(ВидСравненияДоставка, "&ВыбДоставка", "КонечнаяТаблица.ВидДоставки") + "
		|";
	КонецЕсли;
	
	Если ФлагСрокВыполненияЗаказа Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И
		|	" + ПолучитьСтрокуОтбора(ВидСравненияСрокВыполненияЗаказа, "&ВыбСрокВыполнения", "КонечнаяТаблица.СрокВыполненияЗаказаПоставщиком", "&ВыбСрокВыполненияНач", "&ВыбСрокВыполненияКон") + "
		|";
	КонецЕсли;
	
	Если ФлагНадежность Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И
		|	" + ПолучитьСтрокуОтбора(ВидСравненияНадежность, "&ВыбНадежность", "КонечнаяТаблица.НадежностьПоставщика") + "
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИТОГИ ПО
	|	Контрагент
	|";

	РезультатЗапроса = Запрос.Выполнить();
	ДеревоЗапроса  = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	мДеревоЗапросаРезультирующейТаблицы = ДеревоЗапроса.Скопировать();
	ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
	
	// Найдем максимальное количество детальных записей у контрагента - это будет максимальное количество строк в каждой колонке
	ПромежуточнаяТЗ = Новый ТаблицаЗначений;
	ПромежуточнаяТЗ.Колонки.Добавить("ТипЦены");
	ПромежуточнаяТЗ.Колонки.Добавить("ОсобыеУсловияПоставки");
	мМаксимальноеКоличествоФлажков = 0;
	Для каждого СтрокаКонтрагент Из мДеревоЗапросаРезультирующейТаблицы.Строки Цикл
		ПромежуточнаяТЗ.Очистить();
		МассивТиповЦен = СтрокаКонтрагент.Строки.ВыгрузитьКолонку("ТипЦены");
		Для каждого ТипЦен Из МассивТиповЦен Цикл
			НоваяСтрокаТЗ = ПромежуточнаяТЗ.Добавить();
			НоваяСтрокаТЗ.ТипЦены = ТипЦен;
		КонецЦикла; 
		ПромежуточнаяТЗ.ЗагрузитьКолонку(СтрокаКонтрагент.Строки.ВыгрузитьКолонку("ОсобыеУсловияПоставки"), "ОсобыеУсловияПоставки");
		ПромежуточнаяТЗ.Свернуть("ТипЦены, ОсобыеУсловияПоставки");
		Если ПромежуточнаяТЗ.Количество() > мМаксимальноеКоличествоФлажков Тогда
			мМаксимальноеКоличествоФлажков = ПромежуточнаяТЗ.Количество();
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаСтрокНоменклатурыКонтрагента = Новый ТаблицаЗначений;
	ТаблицаСтрокНоменклатурыКонтрагента.Колонки.Добавить("Валюта"                , Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаСтрокНоменклатурыКонтрагента.Колонки.Добавить("ЕдИзм"                 , Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаСтрокНоменклатурыКонтрагента.Колонки.Добавить("ОсобыеУсловияПоставки" , Новый ОписаниеТипов("Булево"));
	ТаблицаСтрокНоменклатурыКонтрагента.Колонки.Добавить("ТипЦены"               , Новый ОписаниеТипов("СправочникСсылка.ТипыЦенНоменклатурыКонтрагентов"));
	ТаблицаСтрокНоменклатурыКонтрагента.Колонки.Добавить("Цена"                  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаСтрокНоменклатурыКонтрагента.Колонки.Добавить("ЦенаУпрУчета"          , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаСтрокНоменклатурыКонтрагента.Колонки.Добавить("ДоговорУсловийПоставки", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	
	ТипЦенПлановойСебестоимостиНоменклатуры = Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();
	
	мФормаИндикации.КомментарийОбработкиДанных = "Создаются колонки таблицы подбора ...";
	мФормаИндикации.МаксимальноеЗначение = СписокНоменклатуры.Количество() - 1;
	// Теперь будем создавать колонки таблицы значений
	Для каждого ЭлементСписка Из СписокНоменклатуры Цикл
		
		мФормаИндикации.Значение = СписокНоменклатуры.Индекс(ЭлементСписка);
		
		Для а = 1 По мМаксимальноеКоличествоФлажков Цикл
			
			ИмяКолонки = ЭлементСписка.Представление + "__" + а;
			КонечнаяТаблица.Колонки.Добавить(("Флаг" + ИмяКолонки)           , Новый ОписаниеТипов("Булево"));
			КонечнаяТаблица.Колонки.Добавить(("Представление" + ИмяКолонки)  , Новый ОписаниеТипов("Строка"));
			КонечнаяТаблица.Колонки.Добавить(("СтруктураДанных" + ИмяКолонки), Новый ОписаниеТипов("Соответствие"));
			
		КонецЦикла; 
		
	КонецЦикла;
	
	мФормаИндикации.КомментарийОбработкиДанных = "Заполняется таблица подбора ...";
	мФормаИндикации.МаксимальноеЗначение = ДеревоЗапроса.Строки.Количество() - 1;
	
	Для каждого СтрокаКонтрагента Из ДеревоЗапроса.Строки Цикл
		
		мФормаИндикации.Значение = ДеревоЗапроса.Строки.Индекс(СтрокаКонтрагента);
		
		НоваяСтрокаТаблицы = КонечнаяТаблица.Добавить();
		НоваяСтрокаТаблицы.Контрагент = СтрокаКонтрагента.Контрагент;
		НоваяСтрокаТаблицы.КонтрагентОписание = "";
		НадежностьПоставщика = РегистрыСведений.НадежностьПоставщиков.ПолучитьПоследнее(ТекущаяДата(), Новый Структура("Контрагент", СтрокаКонтрагента.Контрагент)).Надежность;
		Если НадежностьПоставщика <> Неопределено И ТипЗнч(НадежностьПоставщика) = Тип("ПеречислениеСсылка.Важность") И НЕ НадежностьПоставщика.Пустая() Тогда
			НоваяСтрокаТаблицы.КонтрагентОписание = НоваяСтрокаТаблицы.КонтрагентОписание + "Надежность: " + СокрЛП(НадежностьПоставщика);
		Иначе
			НоваяСтрокаТаблицы.КонтрагентОписание = НоваяСтрокаТаблицы.КонтрагентОписание + "Надежность: Не указана";
		КонецЕсли;
		Если СтрокаКонтрагента.Контрагент.ВидДоставки.Пустая() Тогда
			НоваяСтрокаТаблицы.КонтрагентОписание = НоваяСтрокаТаблицы.КонтрагентОписание + Символы.ПС + "Доставка: Не указана";
		Иначе
			НоваяСтрокаТаблицы.КонтрагентОписание = НоваяСтрокаТаблицы.КонтрагентОписание + Символы.ПС + "Доставка: " + СокрЛП(СтрокаКонтрагента.Контрагент.ВидДоставки);
		КонецЕсли; 
		
		Для каждого ЭлементСпискаНоменклатуры Из СписокНоменклатуры Цикл
			
			СтрокиНоменклатуры = СтрокаКонтрагента.Строки.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", ЭлементСпискаНоменклатуры.Значение.Номенклатура, ЭлементСпискаНоменклатуры.Значение.ХарактеристикаНоменклатуры));
			
			ТаблицаСтрокНоменклатурыКонтрагента.Очистить();
			Для каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
				НоваяСтрока = ТаблицаСтрокНоменклатурыКонтрагента.Добавить();
				НоваяСтрока.Валюта                 = СтрокаНоменклатуры.Валюта;
				НоваяСтрока.ЕдИзм                  = СтрокаНоменклатуры.ЕдиницаИзмерения;
				НоваяСтрока.ОсобыеУсловияПоставки  = СтрокаНоменклатуры.ОсобыеУсловияПоставки;
				НоваяСтрока.ТипЦены                = СтрокаНоменклатуры.ТипЦены;
				НоваяСтрока.Цена                   = СтрокаНоменклатуры.Цена;
				НоваяСтрока.ЦенаУпрУчета           = СтрокаНоменклатуры.ЦенаУпрУчета;
				Если СтрокаНоменклатуры.ОсобыеУсловияПоставки Тогда
					НоваяСтрока.ДоговорУсловийПоставки = СтрокаНоменклатуры.Договор;
				КонецЕсли; 
			КонецЦикла; 
			ТаблицаСтрокНоменклатурыКонтрагента.Свернуть("Валюта, ЕдИзм, ОсобыеУсловияПоставки, ТипЦены, Цена, ЦенаУпрУчета, ДоговорУсловийПоставки");
			
			НомерПараметра = 0;
			Для каждого СтрокаНоменклатуры Из ТаблицаСтрокНоменклатурыКонтрагента Цикл
			
				НомерПараметра = НомерПараметра + 1;
				
				ИмяКолонки = ЭлементСпискаНоменклатуры.Представление + "__" + Строка(НомерПараметра);
				
				НоваяСтрокаТаблицы["СтруктураДанных" + ИмяКолонки] = ПолучитьНовуюСтруктуруДанных();
				НоваяСтрокаТаблицы["СтруктураДанных" + ИмяКолонки].Вставить("ТипЦен"                , СтрокаНоменклатуры.ТипЦены);
				НоваяСтрокаТаблицы["СтруктураДанных" + ИмяКолонки].Вставить("Цена"                  , СтрокаНоменклатуры.Цена);
				НоваяСтрокаТаблицы["СтруктураДанных" + ИмяКолонки].Вставить("ЦенаУпр"               , СтрокаНоменклатуры.ЦенаУпрУчета);
				НоваяСтрокаТаблицы["СтруктураДанных" + ИмяКолонки].Вставить("ОсобыеУсловияПоставки" , СтрокаНоменклатуры.ОсобыеУсловияПоставки);
				НоваяСтрокаТаблицы["СтруктураДанных" + ИмяКолонки].Вставить("ДоговорУсловийПоставки", СтрокаНоменклатуры.ДоговорУсловийПоставки);
				
				Если СтрокаНоменклатуры.ЦенаУпрУчета > 0 И СтрокаНоменклатуры.ЦенаУпрУчета < 0.01 Тогда
					НоваяСтрокаТаблицы["Представление" + ИмяКолонки] = "< 0,01 " + СокрП(ВалютаУпрУчета);
				Иначе
					НоваяСтрокаТаблицы["Представление" + ИмяКолонки] = "";
				КонецЕсли; 
				Если СтрокаНоменклатуры.ОсобыеУсловияПоставки И СтрокаНоменклатуры.ЦенаУпрУчета > 0 Тогда
					НоваяСтрокаТаблицы["Представление" + ИмяКолонки] = НоваяСтрокаТаблицы["Представление" + ИмяКолонки] + (?(СтрокаНоменклатуры.ЦенаУпрУчета = 0, "Не указана", ?(ПустаяСтрока(НоваяСтрокаТаблицы["Представление" + ИмяКолонки]), ФорматСумм(СтрокаНоменклатуры.ЦенаУпрУчета, ВалютаУпрУчета), НоваяСтрокаТаблицы["Представление" + ИмяКолонки])) + " (Особые условия поставки)");
				Иначе
					НоваяСтрокаТаблицы["Представление" + ИмяКолонки] = НоваяСтрокаТаблицы["Представление" + ИмяКолонки] + (?(СтрокаНоменклатуры.ЦенаУпрУчета = 0, "Не указана", ?(ПустаяСтрока(НоваяСтрокаТаблицы["Представление" + ИмяКолонки]), ФорматСумм(СтрокаНоменклатуры.ЦенаУпрУчета, ВалютаУпрУчета), НоваяСтрокаТаблицы["Представление" + ИмяКолонки])) + ?((НЕ ЗначениеНеЗаполнено(СтрокаНоменклатуры.ТипЦены)), (" (" + Строка(СтрокаНоменклатуры.ТипЦены) + ")"), ""));
				КонецЕсли; 
				
				Если ЭлементСпискаНоменклатуры.Значение.Номенклатура.ОсновнойПоставщик = СтрокаКонтрагента.Контрагент Тогда
					НоваяСтрокаТаблицы["СтруктураДанных" + ИмяКолонки].Вставить("ОсновнойПоставщик", Истина);
				КонецЕсли;
				
				Если СтрокаНоменклатуры.ЦенаУпрУчета = 0 Тогда
					НоваяСтрокаТаблицы["СтруктураДанных" + ИмяКолонки].Вставить("ЯчейкаТолькоПросмотр", Истина);
				КонецЕсли; 
			
			КонецЦикла; 
			
			Для а = (НомерПараметра + 1) По мМаксимальноеКоличествоФлажков Цикл
				ИмяКолонки = ЭлементСпискаНоменклатуры.Представление + "__" + Строка(а);
				НоваяСтрокаТаблицы["СтруктураДанных" + ИмяКолонки].Вставить("ЯчейкаНедоступна", Истина);
			КонецЦикла; 
			
		КонецЦикла;
		
	КонецЦикла;
	
	мФормаИндикации.КомментарийОбработкиДанных = "Производится поиск оптимальных поставщиков ...";
	мФормаИндикации.МаксимальноеЗначение = СписокНоменклатуры.Количество() - 1;
	
	Для каждого ЭлементСпискаЗначений Из СписокНоменклатуры Цикл
	
		мФормаИндикации.Значение = СписокНоменклатуры.Индекс(ЭлементСпискаЗначений);
		
		СтрокиТаблицы = ТаблицаЗапроса.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", ЭлементСпискаЗначений.Значение.Номенклатура, ЭлементСпискаЗначений.Значение.ХарактеристикаНоменклатуры));
		
		МинЦена = Неопределено;
		Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			Если СтрокаТаблицы.ЦенаУпрУчета = 0 Тогда
				Продолжить;
			ИначеЕсли МинЦена = Неопределено Тогда
				МинЦена = Окр(СтрокаТаблицы.ЦенаУпрУчета, 2);
				Продолжить;
			КонецЕсли;
			Если СтрокаТаблицы.ЦенаУпрУчета < МинЦена Тогда
				МинЦена =  Окр(СтрокаТаблицы.ЦенаУпрУчета, 2);
			КонецЕсли;
		КонецЦикла;
		
		СписокКонтрагентов = Новый СписокЗначений;
		Если МинЦена <> Неопределено Тогда
			// Проверим, есть ли другие поставщики с такими ценами
			Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
				Если Окр(СтрокаТаблицы.ЦенаУпрУчета, 2) = МинЦена Тогда
					СписокКонтрагентов.Добавить(СтрокаТаблицы.Контрагент);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
		
		Для каждого ЭлементСписка Из СписокКонтрагентов Цикл
		
			СтрокаТаблицы = КонечнаяТаблица.Найти(ЭлементСписка.Значение, "Контрагент");
			
			Для а = 1 По мМаксимальноеКоличествоФлажков Цикл
				
				Если СтрокаТаблицы["СтруктураДанных" + ЭлементСпискаЗначений.Представление + "__" + Строка(а)].Получить("ЦенаУпр") <> МинЦена Тогда
					Продолжить;
				КонецЕсли;
				
				Если СписокКонтрагентов.Индекс(ЭлементСписка) = 0 Тогда
					СтрокаТаблицы["Флаг" + ЭлементСпискаЗначений.Представление + "__" + Строка(а)] = Истина;
				КонецЕсли; 
				
				Если СтрокаТаблицы <> Неопределено Тогда
					СтрокаТаблицы["СтруктураДанных" + ЭлементСпискаЗначений.Представление + "__" + Строка(а)].Вставить("МинимальнаяЦена", Истина);
				КонецЕсли; 
		
			КонецЦикла; 
		
		КонецЦикла;
		
	КонецЦикла;
	
	// Создадим колонки табличного поля
	
	мФормаИндикации.КомментарийОбработкиДанных = "Создаются колонки табличного поля ...";
	мФормаИндикации.МаксимальноеЗначение = СписокНоменклатуры.Количество() - 1;
	ЭлементыФормы.КонечнаяТаблица.Колонки.Очистить();
	
	Колонка = ЭлементыФормы.КонечнаяТаблица.Колонки.Добавить("Контрагент", "Поставщик");
	Колонка.Данные = "Контрагент";
	
	Колонка.ВысотаЯчейки        = 10;
	Колонка.Ширина              = 20;
	Колонка.АвтоВысотаЯчейки    = Истина;
	Колонка.ИзменениеРазмера    = ИзменениеРазмераКолонки.НеИзменять;
	Колонка.ТекстШапки          = "Контрагент";
	Колонка.ШрифтШапки          = Новый Шрифт(,,Истина);
	Колонка.ШрифтТекста         = Новый Шрифт(,,Истина);
	Колонка.УстановитьЭлементУправления(Тип("ПолеВвода"));
	
	Колонка = ЭлементыФормы.КонечнаяТаблица.Колонки.Добавить("КонтрагентОписание");
	Колонка.Данные = "КонтрагентОписание";
	Колонка.Положение = ПоложениеКолонки.НаСледующейСтроке;
	Колонка.ОтображатьВШапке = Ложь;
	Колонка.УстановитьЭлементУправления(Тип("ПолеВвода"));
	Колонка.ЭлементУправления.МногострочныйРежим = Истина;
	Колонка.ВысотаЯчейки        = 10;
	Колонка.АвтоВысотаЯчейки    = Истина;
	
	// Теперь будем создавать колонки таблицы значений
	Для каждого ЭлементСписка Из СписокНоменклатуры Цикл
		
		мФормаИндикации.Значение = СписокНоменклатуры.Индекс(ЭлементСписка);
		
		СебестНоменклатуры = ПолучитьЦенуНоменклатуры(ЭлементСписка.Значение.Номенклатура, ЭлементСписка.Значение.ХарактеристикаНоменклатуры, ТипЦенПлановойСебестоимостиНоменклатуры, , , ВалютаУпрУчета);
		
		Если НЕ ЗначениеНеЗаполнено(СебестНоменклатуры) Тогда
			СебестНоменклатуры = ФорматСумм(СебестНоменклатуры, ВалютаУпрУчета);
		Иначе
			СебестНоменклатуры = "";
		КонецЕсли;
		
		ТекстШапкиНоменклатуры = СокрЛП(ЭлементСписка.Значение.Номенклатура);
		Если ЭлементСписка.Значение.Номенклатура.ВестиУчетПоХарактеристикам Тогда
			ТекстШапкиНоменклатуры = ТекстШапкиНоменклатуры + " (" + ?(ЗначениеНеЗаполнено(ЭлементСписка.Значение.ХарактеристикаНоменклатуры), "характеристика не указана", ЭлементСписка.Значение.ХарактеристикаНоменклатуры) + ")";
		КонецЕсли; 
		ТекстШапкиНоменклатуры = ТекстШапкиНоменклатуры +  Символы.ПС + СебестНоменклатуры;
		Если ЭлементСписка.Значение.Тара Тогда
			ТекстШапкиНоменклатуры = ТекстШапкиНоменклатуры + ", ТАРА";
		КонецЕсли;
			
		Для а = 1 По мМаксимальноеКоличествоФлажков Цикл
			
			ИмяКолонки = ЭлементСписка.Представление + "__" + а;
			
			Если а = 1 Тогда
				ТекстШапки = ТекстШапкиНоменклатуры;
			Иначе
				ТекстШапки = "";
			КонецЕсли; 
			
			КолонкаГрида = ЭлементыФормы.КонечнаяТаблица.Колонки.Добавить(ИмяКолонки, ТекстШапки);
			КолонкаГрида.Данные       = "Представление" + ИмяКолонки;
			КолонкаГрида.ДанныеФлажка = "Флаг" + ИмяКолонки;
			Если а = 1 Тогда
				КолонкаГрида.Положение = ПоложениеКолонки.НоваяКолонка;
			Иначе
				КолонкаГрида.Положение = ПоложениеКолонки.НаСледующейСтроке;
				КолонкаГрида.ОтображатьВШапке = Ложь;
			КонецЕсли; 
			КолонкаГрида.УстановитьЭлементУправления(Тип("Флажок"));
			КолонкаГрида.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
			КолонкаГрида.ВысотаЯчейки        = 10;
			КолонкаГрида.Ширина              = 15;
			КолонкаГрида.АвтоВысотаЯчейки    = Истина;
			
		КонецЦикла; 
		
	КонецЦикла;
	//ЭлементыФормы.КонечнаяТаблица.ФиксацияСлева = 1;
	
	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

// Функция определяет владельца для выбираемого значения отбора.
//
// Параметры 
//  НЕТ
//
// Возвращаемое значение
//  СправочникСсылка - владелец выбираемого значения отбора.
//
Функция ОпределитьВладельцаОтбора()

	Владелец = Неопределено;

	НайдСтрФильтры = мДеревоСвойстваКатегории.Строки.Найти(ЭлементыФормы.СвойстваИКатегорииКонтрагентов.ТекущиеДанные.ИмяФильтра, "ИмяФильтра", Истина);
	
	Если НайдСтрФильтры <> Неопределено Тогда
		Если Не ЗначениеНеЗаполнено(НайдСтрФильтры.Свойство) > 0 Тогда
			Владелец = НайдСтрФильтры.Свойство;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Владелец;
	
КонецФункции

// Процедура вызывается при начале выбора любого реквизита формы ВидСравнения.
// 
// Параметры
//  Элемент - элемент формы
//
Процедура ЗаполнитьСписокВыбора(Элемент)

	ИмяЭлемента = СтрЗаменить(Элемент.Имя, "ВидСравнения", "");
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(ВидСравнения.Равно, "Равно");
	СписокВыбора.Добавить(ВидСравнения.НеРавно, "Не равно");
	СписокВыбора.Добавить(ВидСравнения.ВСписке, "В списке");
	СписокВыбора.Добавить(ВидСравнения.НеВСписке, "Не в списке");
	Если ИмяЭлемента = "СрокВыполненияЗаказа" Тогда
		СписокВыбора.Добавить(ВидСравнения.Меньше, "Меньше");
		СписокВыбора.Добавить(ВидСравнения.МеньшеИлиРавно, "Меньше или равно");
		СписокВыбора.Добавить(ВидСравнения.Больше, "Больше");
		СписокВыбора.Добавить(ВидСравнения.БольшеИлиРавно, "Больше или равно");
		СписокВыбора.Добавить(ВидСравнения.Интервал, "Интервал (>, <)");
		СписокВыбора.Добавить(ВидСравнения.ИнтервалВключаяГраницы, "Интервал (>=, <=)");
		СписокВыбора.Добавить(ВидСравнения.ИнтервалВключаяНачало, "Интервал (>=, <)");
		СписокВыбора.Добавить(ВидСравнения.ИнтервалВключаяОкончание, "Интервал (>, <=)");
	КонецЕсли; 
	
	НайденныйЭлементНовогоСписка = СписокВыбора.НайтиПоЗначению(Элемент.Значение);
	Если НайденныйЭлементНовогоСписка = Неопределено Тогда
		ВыбЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора);
	Иначе
		ВыбЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора,,НайденныйЭлементНовогоСписка);
	КонецЕсли; 
	Если ВыбЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.Значение = ВыбЭлемент.Значение;
	
	ОбработатьИзменениеВидаСравнения(Элемент);

КонецПроцедуры

// Процедура вызывается при изменении значения любого реквизита формы ВидСравнения.
// 
// Параметры
//  Элемент - элемент формы
Процедура ОбработатьИзменениеВидаСравнения(Элемент)

	ИмяЭлемента = СтрЗаменить(Элемент.Имя, "ВидСравнения", "");
	
	Если Элемент.Значение = ВидСравнения.Равно
	 ИЛИ Элемент.Значение = ВидСравнения.НеРавно
	 ИЛИ Элемент.Значение = ВидСравнения.Больше
	 ИЛИ Элемент.Значение = ВидСравнения.БольшеИлиРавно
	 ИЛИ Элемент.Значение = ВидСравнения.Меньше
	 ИЛИ Элемент.Значение = ВидСравнения.МеньшеИлиРавно Тогда
	
		ЗначениеОтбора = ЭтаФорма["Значение"+ИмяЭлемента];
		Если ТипЗнч(ЗначениеОтбора) = Тип("СписокЗначений") Тогда
			Если ЗначениеОтбора.Количество() > 0 Тогда
				ЭтаФорма["Значение"+ИмяЭлемента] = ЗначениеОтбора[0].Значение;
			Иначе
				ТипЗначения = ЭлементыФормы["Значение"+ИмяЭлемента].ТипЗначенияСписка;
				Если ТипЗначения = Тип("Число") Тогда
					ЭтаФорма["Значение"+ИмяЭлемента] = 0;
				Иначе
					ЭтаФорма["Значение"+ИмяЭлемента] = Новый(ТипЗначения.Типы()[0]);
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		
	ИначеЕсли Элемент.Значение = ВидСравнения.ВСписке
	      ИЛИ Элемент.Значение = ВидСравнения.НеВСписке Тогда
		
		ЗначениеОтбора = ЭтаФорма["Значение"+ИмяЭлемента];
		Если ТипЗнч(ЗначениеОтбора) <> Тип("СписокЗначений") Тогда
			НовыйСписокЗначений = Новый СписокЗначений;
			Если ИмяЭлемента = "СрокВыполненияЗаказа" Тогда
				Если ЗначениеОтбора <> 0 Тогда
					НовыйСписокЗначений.Добавить(ЗначениеОтбора);
				КонецЕсли;
			Иначе
				Если НЕ ЗначениеОтбора.Пустая() Тогда
					НовыйСписокЗначений.Добавить(ЗначениеОтбора);
				КонецЕсли;
			КонецЕсли;
			ЭтаФорма["Значение"+ИмяЭлемента] = НовыйСписокЗначений;
		КонецЕсли;
		
	КонецЕсли;
	
	ВидимостьДвойныхЭлементов();
	
КонецПроцедуры

// Процедура устанавливает видимость элементов управления для значений отборов,
//  которые могут вводиться в интервале (т.е. двумя значениями) или одним значением отбора.
// 
// Параметры
//  НЕТ
//
// Возвращаемое значение
//  НЕТ
//
Процедура ВидимостьДвойныхЭлементов()

	ИмяЭлемента = "СрокВыполненияЗаказа";
	
	ЗначениеСравнения = ЭлементыФормы.ВидСравненияСрокВыполненияЗаказа.Значение;
	Если ЗначениеСравнения = ВидСравнения.Интервал
	 ИЛИ ЗначениеСравнения = ВидСравнения.ИнтервалВключаяГраницы
	 ИЛИ ЗначениеСравнения = ВидСравнения.ИнтервалВключаяНачало
	 ИЛИ ЗначениеСравнения = ВидСравнения.ИнтервалВключаяОкончание Тогда
		
		ЭтаФорма.ЭлементыФормы[Строка("Значение"+ИмяЭлемента)].Видимость       = Ложь;
		ЭтаФорма.ЭлементыФормы[Строка("Значение"+ИмяЭлемента+"Нач")].Видимость = Истина;
		ЭтаФорма.ЭлементыФормы[Строка("Значение"+ИмяЭлемента+"Кон")].Видимость = Истина;
		
	Иначе
		
		ЭтаФорма.ЭлементыФормы[Строка("Значение"+ИмяЭлемента)].Видимость       = Истина;
		ЭтаФорма.ЭлементыФормы[Строка("Значение"+ИмяЭлемента+"Нач")].Видимость = Ложь;
		ЭтаФорма.ЭлементыФормы[Строка("Значение"+ИмяЭлемента+"Кон")].Видимость = Ложь;
	
	КонецЕсли; 
	
КонецПроцедуры

// Процедура вызывается при изменении любого реквизита формы ЗначениеОтбора.
// 
// Параметры
//  Элемент - элемент формы
// 
Процедура ЗначениеОтбораПриИзменении(Элемент)

	ИмяЭлемента = СтрЗаменить(Элемент.Имя, "Значение", "");
	Если Сред(ИмяЭлемента, (СтрДлина(ИмяЭлемента) - 2), 3) = "Нач" ИЛИ Сред(ИмяЭлемента, (СтрДлина(ИмяЭлемента) - 2), 3) = "Кон" Тогда
		ИмяЭлемента = Сред(ИмяЭлемента, 1, (СтрДлина(ИмяЭлемента) - 3));
	КонецЕсли; 
	
	Если ТипЗнч(Элемент.Значение) = Тип("СписокЗначений") И Элемент.ТипЗначенияСписка.Типы().Количество() = 1 Тогда
		Для каждого ЭлементСписка Из Элемент.Значение Цикл
			Если ЭлементСписка.Значение = Неопределено Тогда
				ЭлементСписка.Значение = ПустоеЗначениеТипа(Элемент.ТипЗначенияСписка.Типы()[0]);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	ЭтаФорма[Строка("Флаг"+ИмяЭлемента)] = Истина;

КонецПроцедуры

// Процедура вызывается при вызове мотода Очистить любого реквизита формы ЗначениеОтбора.
// 
// Параметры
//  Элемент - элемент формы
//
Процедура ОчиститьЭлемент(Элемент);
	
	Если ТипЗнч(Элемент.Значение) = Тип("СписокЗначений") Тогда
		Элемент.Значение.Очистить();
	ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Число") Тогда
		Элемент.Значение = 0;
	Иначе
		ОписаниеТиповСправочники  = Справочники.ТипВсеСсылки();
		ОписаниеТиповДокументы    = Документы.ТипВсеСсылки();
		ОписаниеТиповПеречисления = Перечисления.ТипВсеСсылки();
		Если ОписаниеТиповДокументы.СодержитТип(ТипЗнч(Элемент.Значение)) Тогда
			Элемент.Значение = Новый("ДокументСсылка."+Элемент.Значение.Метаданные().Имя);
		ИначеЕсли ОписаниеТиповСправочники.СодержитТип(ТипЗнч(Элемент.Значение)) Тогда
			Элемент.Значение = Новый("СправочникСсылка."+Элемент.Значение.Метаданные().Имя);
		ИначеЕсли ОписаниеТиповПеречисления.СодержитТип(ТипЗнч(Элемент.Значение)) Тогда
			Элемент.Значение = Новый("ПеречислениеСсылка."+Элемент.Значение.Метаданные().Имя);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура вызывается при изменении флажков у строк в таблице товаров.
// 
// Параметры
//  ЗначениеФлага - Булево, значение флажков каторое необходимо установить
//
Процедура ИзменитьФлажкиТаблицаТоваров(ЗначениеФлага)

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.ФлагИспользование = ЗначениеФлага;
	КонецЦикла; 

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события формы ПередОткрытием.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ВидСравненияНадежность           = ВидСравнения.Равно;
	ВидСравненияДоставка             = ВидСравнения.Равно;
	ВидСравненияСрокВыполненияЗаказа = ВидСравнения.Равно;
	
	ЗначениеНадежность           = Перечисления.Важность.ПустаяСсылка();
	ЗначениеДоставка             = Перечисления.ВидыДоставкиНоменклатуры.ПустаяСсылка();
	ЗначениеСрокВыполненияЗаказа = 0;
	
КонецПроцедуры

// Обработчик события формы ПриОткрытии.
//
Процедура ПриОткрытии()
	
	ДоступностьКнопокНижнейПанели();
	ТаблицаТоваров.Колонки.Добавить("ФлагИспользование");
	
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.ФлагИспользование = Истина;
	КонецЦикла; 
	
	ЗаполнитьТаблицуСвойствИКатегирий();
	
	ВидимостьДвойныхЭлементов();
	
КонецПроцедуры

// Обработчик события формы ПередСохранениемЗначений.
//
Процедура ПередСохранениемЗначений(Отказ)
	
	СтруктураЗначений = Новый Структура;
	
	СтруктураЗначений.Вставить("ИспользоватьТолькоОсновныхПоставщиков", ИспользоватьТолькоОсновныхПоставщиков);
	
	СтруктураЗначений.Вставить("ФлагНадежность", ФлагНадежность);
	СтруктураЗначений.Вставить("ВидСравненияНадежность", ВидСравненияНадежность);
	СтруктураЗначений.Вставить("ЗначениеНадежность", ЗначениеНадежность);
	
	СтруктураЗначений.Вставить("ФлагДоставка", ФлагДоставка);
	СтруктураЗначений.Вставить("ВидСравненияДоставка", ВидСравненияДоставка);
	СтруктураЗначений.Вставить("ЗначениеДоставка", ЗначениеДоставка);
	
	СтруктураЗначений.Вставить("ФлагСрокВыполненияЗаказа", ФлагСрокВыполненияЗаказа);
	СтруктураЗначений.Вставить("ВидСравненияСрокВыполненияЗаказа", ВидСравненияСрокВыполненияЗаказа);
	СтруктураЗначений.Вставить("ЗначениеСрокВыполненияЗаказа", ЗначениеСрокВыполненияЗаказа);
	СтруктураЗначений.Вставить("ЗначениеСрокВыполненияЗаказаНач", ЗначениеСрокВыполненияЗаказаНач);
	СтруктураЗначений.Вставить("ЗначениеСрокВыполненияЗаказаКон", ЗначениеСрокВыполненияЗаказаКон);
	
	ВременнаяТаблица = СвойстваИКатегорииКонтрагентов.Скопировать();
	СтруктураЗначений.Вставить("СвойстваИКатегорииКонтрагентов", ВременнаяТаблица);
	
	СохраненныеНастройкиПомощника = СтруктураЗначений;
	
КонецПроцедуры

// Обработчик события формы ПослеВосстановленияЗначений.
//
Процедура ПослеВосстановленияЗначений()
	
	СтруктураЗначений = СохраненныеНастройкиПомощника;
	
	Если ТипЗнч(СтруктураЗначений) = Тип("Структура") Тогда
	
		СтруктураЗначений.Свойство("ИспользоватьТолькоОсновныхПоставщиков", ИспользоватьТолькоОсновныхПоставщиков);
		
		СтруктураЗначений.Свойство("ФлагНадежность", ФлагНадежность);
		СтруктураЗначений.Свойство("ВидСравненияНадежность", ВидСравненияНадежность);
		СтруктураЗначений.Свойство("ЗначениеНадежность", ЗначениеНадежность);
		
		СтруктураЗначений.Свойство("ФлагДоставка", ФлагДоставка);
		СтруктураЗначений.Свойство("ВидСравненияДоставка", ВидСравненияДоставка);
		СтруктураЗначений.Свойство("ЗначениеДоставка", ЗначениеДоставка);
		
		СтруктураЗначений.Свойство("ФлагСрокВыполненияЗаказа", ФлагСрокВыполненияЗаказа);
		СтруктураЗначений.Свойство("ВидСравненияСрокВыполненияЗаказа", ВидСравненияСрокВыполненияЗаказа);
		СтруктураЗначений.Свойство("ЗначениеСрокВыполненияЗаказа", ЗначениеСрокВыполненияЗаказа);
		СтруктураЗначений.Свойство("ЗначениеСрокВыполненияЗаказаНач", ЗначениеСрокВыполненияЗаказаНач);
		СтруктураЗначений.Свойство("ЗначениеСрокВыполненияЗаказаКон", ЗначениеСрокВыполненияЗаказаКон);
		
		ВременнаяТаблица = Новый ТаблицаЗначений;
		СтруктураЗначений.Свойство("СвойстваИКатегорииКонтрагентов", ВременнаяТаблица);
		СвойстваИКатегорииКонтрагентов = ВременнаяТаблица.Скопировать();
	
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ОБРАБОТЧИКОВ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события Нажатие элемента формы ОсновныеДействияФормы.Готово.
//
Процедура ОсновныеДействияФормыГотово(Элемент)
	
	ОтветНаВопрос = Вопрос("Сформировать заказы поставщикам?", РежимДиалогаВопрос.ОКОтмена);
	Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗаказов = ЗарегистрироватьЗаказы();
	
	ЭтаФорма.Закрыть(МассивЗаказов);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы ОсновныеДействияФормы.Далее.
//
Процедура ОсновныеДействияФормыДалее(Кнопка)
	
	ПредыдущаяСтраница = ЭлементыФормы.ПанельПомощника.ТекущаяСтраница;
	ЭлементыФормы.ПанельПомощника.ТекущаяСтраница = ЭлементыФормы.ПанельПомощника.Страницы[Мин(ЭлементыФормы.ПанельПомощника.Страницы.Индекс(ПредыдущаяСтраница)+1, ЭлементыФормы.ПанельПомощника.Страницы.Количество()-1)];
	Если ЭлементыФормы.ПанельПомощника.ТекущаяСтраница.Имя = "Результат" Тогда
		ЗаполнитьКонечнуюТаблицу();
	КонецЕсли;
	ДоступностьКнопокНижнейПанели();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы ОсновныеДействияФормы.Назад.
//
Процедура ОсновныеДействияФормыНазад(Кнопка)
	
	ПредыдущаяСтраница = ЭлементыФормы.ПанельПомощника.ТекущаяСтраница;
	ЭлементыФормы.ПанельПомощника.ТекущаяСтраница = ЭлементыФормы.ПанельПомощника.Страницы[Макс(ЭлементыФормы.ПанельПомощника.Страницы.Индекс(ПредыдущаяСтраница)-1, 0)];
	ДоступностьКнопокНижнейПанели();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы ОсновныеДействияФормы.Отмена.
//
Процедура ОсновныеДействияФормыОтмена(Кнопка)
	
	ЭтаФорма.Закрыть(Ложь);
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы ТаблицаТоваров.
//
Процедура ТаблицаТоваровПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы ТаблицаТоваров.
//
Процедура ТаблицаТоваровПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы СвойстваИКатегорииКонтрагентов.ПредставлениеФильтра.
//
Процедура СвойстваИКатегорииКонтрагентовПредставлениеФильтраНачалоВыбора(Элемент, СтандартнаяОбработка)

	Форма = ПолучитьФорму("ФормаВыбора", Элемент, "дляФормаФильтра");

	Если Форма.Открыта() Тогда
		Форма.Активизировать();
		Если Вопрос("Предыдущая операция выбора фильтра не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;

	СтруктураСуществующиеЗначения = Новый Структура;
	СтруктураНеиспользуемыеЗначения = Новый Структура;

	Для Каждого Строка Из СвойстваИКатегорииКонтрагентов Цикл
		
		Если ПустаяСтрока(Строка.ИмяФильтра) Тогда
			Продолжить;
		КонецЕсли;
		
		// Кроме этой строки
		Если СвойстваИКатегорииКонтрагентов.Индекс(Строка) <> СвойстваИКатегорииКонтрагентов.Индекс(ЭлементыФормы.СвойстваИКатегорииКонтрагентов.ТекущаяСтрока) Тогда
			СтруктураНеиспользуемыеЗначения.Вставить(Строка.ИмяФильтра);
		КонецЕсли;

	КонецЦикла;

	Если Не ПустаяСтрока(ЭлементыФормы.СвойстваИКатегорииКонтрагентов.ТекущиеДанные.ИмяФильтра) Тогда
		СтруктураСуществующиеЗначения.Вставить(ЭлементыФормы.СвойстваИКатегорииКонтрагентов.ТекущиеДанные.ИмяФильтра);
	КонецЕсли;

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ИсходноеДерево", мДеревоСвойстваКатегории.Скопировать());
	СтруктураПараметров.Вставить("СтруктураНеиспользуемыеЗначения", СтруктураНеиспользуемыеЗначения);
	СтруктураПараметров.Вставить("СтруктураСуществующиеЗначения", СтруктураСуществующиеЗначения);

	// Передача параметров в форму
	Форма.НачальноеЗначениеВыбора = СтруктураПараметров;
	Форма.РежимВыбора = Истина;
	Форма.Открыть();
	мФормаВыбораФильтров = Форма;
	
КонецПроцедуры

// Обработчик события ОбработкаВыбора элемента формы СвойстваИКатегорииКонтрагентов.ПредставлениеФильтра.
//
Процедура СвойстваИКатегорииКонтрагентовПредставлениеФильтраОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТабличноеПоле = ЭлементыФормы.СвойстваИКатегорииКонтрагентов;

	Если ТабличноеПоле.ТекущаяСтрока  = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РедактируемаяСтрока = ТабличноеПоле.Значение[ТабличноеПоле.Значение.Индекс(ТабличноеПоле.ТекущаяСтрока)];

	Для Каждого Строка Из ВыбранноеЗначение Цикл 

		РедактируемаяСтрока.ИмяФильтра                  = Строка.ИмяФильтра;
		РедактируемаяСтрока.ПредставлениеФильтра        = Строка.ПредставлениеФильтра;
		РедактируемаяСтрока.ОписаниеТиповЗначенийОтбора = Строка.ОписаниеТипов;
		РедактируемаяСтрока.Свойство                    = Строка.Свойство;
	
		МассивТипов = Строка.ОписаниеТипов.Типы();

		// Если тип единичный, то присвоим пустое значение этого типа
		Если МассивТипов.Количество() = 1 Тогда
			РедактируемаяСтрока.ЗначениеФильтра = ПустоеЗначениеТипа(МассивТипов[0]);
		Иначе
			РедактируемаяСтрока.ЗначениеФильтра = Неопределено;
		КонецЕсли;

		РедактируемаяСтрока.Использование       = Истина;
		РедактируемаяСтрока.ВидСравненияФильтра = ВидСравнения.Равно;

	КонецЦикла;

КонецПроцедуры

// Обработчик события НачалоВыбораИзСписка элемента формы СвойстваИКатегорииКонтрагентов.ВидСравненияФильтра.
//
Процедура СвойстваИКатегорииКонтрагентовВидСравненияФильтраНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СписокВидовСравнения = Новый СписокЗначений;
	Если СтрЧислоВхождений(ЭлементыФормы.СвойстваИКатегорииКонтрагентов.ТекущаяСтрока.ИмяФильтра, "Категории") Тогда
		СписокВидовСравнения.Добавить(ВидСравнения.Равно);
		СписокВидовСравнения.Добавить(ВидСравнения.ВСписке);
		СписокВидовСравнения.Добавить(ВидСравнения.ВСпискеПоИерархии);
	Иначе
		СписокВидовСравнения.Добавить(ВидСравнения.Равно);
		СписокВидовСравнения.Добавить(ВидСравнения.НеРавно);
		СписокВидовСравнения.Добавить(ВидСравнения.ВСписке);
		СписокВидовСравнения.Добавить(ВидСравнения.ВСпискеПоИерархии);
		СписокВидовСравнения.Добавить(ВидСравнения.НеВСписке);
		СписокВидовСравнения.Добавить(ВидСравнения.НеВСпискеПоИерархии);
	КонецЕсли; 

	Элемент.СписокВыбора = СписокВидовСравнения;

КонецПроцедуры

// Обработчик события ОбработкаВыбора элемента формы СвойстваИКатегорииКонтрагентов.ВидСравненияФильтра.
//
Процедура СвойстваИКатегорииКонтрагентовВидСравненияФильтраОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЗначениеОтбораТекущейСтроки = ЭлементыФормы.СвойстваИКатегорииКонтрагентов.ТекущаяСтрока.ЗначениеФильтра;

	Если ВыбранноеЗначение = ВидСравнения.Равно 
		ИЛИ ВыбранноеЗначение = ВидСравнения.НеРавно Тогда

		Элемент.АвтопереносСтрок = Ложь;
		Если ТипЗнч(ЗначениеОтбораТекущейСтроки) = Тип("СписокЗначений") Тогда

			Если ЗначениеОтбораТекущейСтроки.Количество() > 0 тогда
				ЭлементыФормы.СвойстваИКатегорииКонтрагентов.ТекущаяСтрока.ЗначениеФильтра = ЗначениеОтбораТекущейСтроки[0].Значение;
			КонецЕсли;

		КонецЕсли;

	Иначе

		Элемент.АвтопереносСтрок= Истина;
		Если ТипЗнч(ЗначениеОтбораТекущейСтроки) <> Тип("СписокЗначений") Тогда

			СтароеЗначение = ЗначениеОтбораТекущейСтроки;

			ЭлементыФормы.СвойстваИКатегорииКонтрагентов.ТекущаяСтрока.ЗначениеФильтра = Новый СписокЗначений;
			Если СтароеЗначение <> Неопределено Тогда
				ЭлементыФормы.СвойстваИКатегорииКонтрагентов.ТекущаяСтрока.ЗначениеФильтра.Добавить(СтароеЗначение);
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы СвойстваИКатегорииКонтрагентов.ЗначениеФильтра.
//
Процедура СвойстваИКатегорииКонтрагентовЗначениеФильтраНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если ПустаяСтрока(ЭлементыФормы.СвойстваИКатегорииКонтрагентов.ТекущаяСтрока.ПредставлениеФильтра) Тогда
		Предупреждение("Выберите фильтр!");
		СтандартнаяОбработка=Ложь;
		Возврат;
	КонецЕсли;

	Фильтр = ЭлементыФормы.СвойстваИКатегорииКонтрагентов.ТекущаяСтрока;

	Если Фильтр.ОписаниеТиповЗначенийОтбора = Неопределено Тогда
	
		СтрокаФильтров = мДеревоСвойстваКатегории.Строки.Найти(Фильтр.ИмяФильтра, "ИмяФильтра", Истина);
		Если СтрокаФильтров <> Неопределено Тогда
			Фильтр.ОписаниеТиповЗначенийОтбора = СтрокаФильтров.ОписаниеТиповСвойство;
		КонецЕсли; 
		
	
	КонецЕсли; 
	
	Владелец = ОпределитьВладельцаОтбора();
	
	ТипыФильтра = Фильтр.ОписаниеТиповЗначенийОтбора;

	МассивТипов = ТипыФильтра.Типы();

	Если ЭлементыФормы.СвойстваИКатегорииКонтрагентов.ТекущаяСтрока.ВидСравненияФильтра = ВидСравнения.Равно
		ИЛИ ЭлементыФормы.СвойстваИКатегорииКонтрагентов.ТекущаяСтрока.ВидСравненияФильтра = ВидСравнения.НеРавно Тогда

		МассивТипов = ТипыФильтра.Типы();

		Если МассивТипов.Количество() = 1 Тогда

			Если МассивТипов[0]=Тип("Число") Тогда
				Элемент.Значение=0;
			ИначеЕсли МассивТипов[0]=Тип("Строка") Тогда
				Элемент.Значение="";
			ИначеЕсли МассивТипов[0]=Тип("Дата") Тогда
				Элемент.Значение=ТекущаяДата();
			ИначеЕсли МассивТипов[0]=Тип("Булево") Тогда
				Элемент.Значение=Ложь;
			Иначе
				Элемент.Значение = Новый(МассивТипов[0]);
			КонецЕсли;

			Элемент.ВыбиратьТип = Ложь;

		Иначе

			Элемент.ОграничениеТипа = Фильтр.ОписаниеТиповЗначенийОтбора;
			Элемент.ВыбиратьТип = Истина;

		КонецЕсли;

	Иначе

		МассивТипов = Новый Массив;
		МассивТипов.Добавить("СписокЗначений");
		ОписаниеТиповСписокЗначений  = Новый ОписаниеТипов(МассивТипов);
		Элемент.ОграничениеТипа      = ОписаниеТиповСписокЗначений;
		Элемент.Значение.ТипЗначения = Фильтр.ОписаниеТиповЗначенийОтбора;
		Элемент.ВыбиратьТип          = Ложь;

	КонецЕсли;

	Если Владелец <> Неопределено Тогда
		Элемент.ВыборПоВладельцу = Владелец;
	КонецЕсли;
	
	Если МассивТипов[0]=Тип("СправочникСсылка.КатегорииОбъектов") Тогда

		СтандартнаяОбработка=Ложь;

		СтрокаФильтры=мДеревоСвойстваКатегории.Строки.Найти(ЭлементыФормы.СвойстваИКатегорииКонтрагентов.ТекущаяСтрока.ИмяФильтра,
											"ИмяФильтра",Истина);
							
		ФормаВыбораКатегории= Справочники["КатегорииОбъектов"].ПолучитьФормуВыбора(, Элемент,);
		ФормаВыбораКатегории.РежимВыбора = Истина;
		ФормаВыбораКатегории.Отбор.НазначениеКатегории.Значение      = СтрокаФильтры.Свойство;
		ФормаВыбораКатегории.Отбор.НазначениеКатегории.Использование = Истина;

		ФормаВыбораКатегории.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
		ФормаВыбораКатегории.Открыть();

	КонецЕсли;
	
КонецПроцедуры

// Обработчик события НачалоВыбораИзСписка элемента формы ВидСравненияНадежность.
//
Процедура ВидСравненияНадежностьНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбора(Элемент);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события НачалоВыбораИзСписка элемента формы ВидСравненияДоставка.
//
Процедура ВидСравненияДоставкаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбора(Элемент);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события НачалоВыбораИзСписка элемента формы ВидСравненияСрокВыполненияЗаказа.
//
Процедура ВидСравненияСрокВыполненияЗаказаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбора(Элемент);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ЗначениеНадежность.
//
Процедура ЗначениеНадежностьПриИзменении(Элемент)
	
	ЗначениеОтбораПриИзменении(Элемент);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ЗначениеДоставка.
//
Процедура ЗначениеДоставкаПриИзменении(Элемент)
	
	ЗначениеОтбораПриИзменении(Элемент);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ЗначениеСрокВыполненияЗаказа.
//
Процедура ЗначениеСрокВыполненияЗаказаПриИзменении(Элемент)
	
	ЗначениеОтбораПриИзменении(Элемент);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ЗначениеСрокВыполненияЗаказаНач.
//
Процедура ЗначениеСрокВыполненияЗаказаНачПриИзменении(Элемент)
	
	ЗначениеОтбораПриИзменении(Элемент);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ЗначениеСрокВыполненияЗаказаКон.
//
Процедура ЗначениеСрокВыполненияЗаказаКонПриИзменении(Элемент)
	
	ЗначениеОтбораПриИзменении(Элемент);
	
КонецПроцедуры

// Обработчик события Очистка элемента формы ЗначениеНадежность.
//
Процедура ЗначениеНадежностьОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьЭлемент(Элемент);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события Очистка элемента формы ЗначениеДоставка.
//
Процедура ЗначениеДоставкаОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьЭлемент(Элемент);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события Очистка элемента формы ЗначениеСрокВыполненияЗаказа.
//
Процедура ЗначениеСрокВыполненияЗаказаОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьЭлемент(Элемент);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельТаблицаТоваров.УстановитьФлажки.
//
Процедура КоманднаяПанельТаблицаТоваровУстановитьФлажки(Кнопка)
	
	ИзменитьФлажкиТаблицаТоваров(Истина);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельТаблицаТоваров.СнятьФлажки.
//
Процедура КоманднаяПанельТаблицаТоваровСнятьФлажки(Кнопка)
	
	ИзменитьФлажкиТаблицаТоваров(Ложь);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы КонечнаяТаблица.
//
Процедура КонечнаяТаблицаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Для каждого Колонка Из Элемент.Колонки Цикл
		
		Если Колонка.Имя = "КонтрагентОписание" ИЛИ Колонка.Имя = "Контрагент" Тогда
			Продолжить;
		Иначе
			Если ДанныеСтроки["СтруктураДанных" + Колонка.Имя].Получить("ЯчейкаНедоступна") Тогда
				ОформлениеСтроки.Ячейки[Колонка.Имя].ОтображатьФлажок = Ложь;
				ОформлениеСтроки.Ячейки[Колонка.Имя].Видимость        = Ложь;
				Продолжить;
			КонецЕсли;
			Если ДанныеСтроки["СтруктураДанных" + Колонка.Имя].Получить("ЯчейкаТолькоПросмотр") Тогда
				ОформлениеСтроки.Ячейки[Колонка.Имя].ТолькоПросмотр = Истина;
				ОформлениеСтроки.Ячейки[Колонка.Имя].ЦветТекста     = WebЦвета.СветлоСерый;
				Продолжить;
			КонецЕсли;
			Если ДанныеСтроки["СтруктураДанных" + Колонка.Имя].Получить("МинимальнаяЦена") И ДанныеСтроки["СтруктураДанных" + Колонка.Имя].Получить("ОсновнойПоставщик") Тогда
				ОформлениеСтроки.Ячейки[Колонка.Имя].ЦветТекста = WebЦвета.ТемноКрасный;
			Иначе
				Если ДанныеСтроки["СтруктураДанных" + Колонка.Имя].Получить("МинимальнаяЦена") Тогда
					ОформлениеСтроки.Ячейки[Колонка.Имя].ЦветТекста = WebЦвета.Зеленый;
				КонецЕсли; 
				Если ДанныеСтроки["СтруктураДанных" + Колонка.Имя].Получить("ОсновнойПоставщик") Тогда
					ОформлениеСтроки.Ячейки[Колонка.Имя].ЦветТекста = WebЦвета.Синий;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	
	КонецЦикла; 
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента формы КонечнаяТаблица.
//
Процедура КонечнаяТаблицаПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущаяКолонка.Имя = "Контрагент" ИЛИ Элемент.ТекущаяКолонка.Имя = "КонтрагентОписание" Тогда
		Элемент.ТекущиеДанные.Контрагент.ПолучитьФорму().Открыть();
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы КонечнаяТаблица.
//
Процедура КонечнаяТаблицаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы КонечнаяТаблица.
//
Процедура КонечнаяТаблицаПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПриИзмененииФлажка элемента формы КонечнаяТаблица.
//
Процедура КонечнаяТаблицаПриИзмененииФлажка(Элемент, Колонка)
	
	Если Элемент.ТекущиеДанные["Флаг" + Колонка.Имя] Тогда
		ПозицияПостфикса = Найти(Колонка.Имя, "__");
		Если ПозицияПостфикса > 0 Тогда
			ИмяБезПостфикса = Лев(Колонка.Имя, (ПозицияПостфикса - 1));
		Иначе
			ИмяБезПостфикса = Колонка.Имя;
		КонецЕсли; 
		Для каждого СтрокаТаблицы Из КонечнаяТаблица Цикл
			Для а = 1 По мМаксимальноеКоличествоФлажков Цикл
				ИмяКолонки = ИмяБезПостфикса + "__" + Строка(а);
				Если Элемент.ТекущаяСтрока = СтрокаТаблицы И ИмяКолонки = Колонка.Имя Тогда
					Продолжить;
				Иначе
					СтрокаТаблицы["Флаг" + ИмяКолонки] = Ложь;
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельКонечнаяТаблица.ОткрытьУсловияПоставки.
//
Процедура КоманднаяПанельКонечнаяТаблицаОткрытьУсловияПоставки(Кнопка)
	
	УсловияПоставки = ОпределитьДокументОсобыхУсловийПоставки();
	
	Если ТипЗнч(УсловияПоставки) <> Тип("ДокументСсылка.УсловияПоставокПоДоговорамКонтрагентов") Тогда
		Предупреждение("Условия поставки не найдены.");
	Иначе
		УсловияПоставки.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельКонечнаяТаблица.ОткрытьУсловияПоставки.
//
Процедура КонечнаяТаблицаПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущаяКолонка = Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельКонечнаяТаблица.Кнопки.ОткрытьДоговор.Доступность         = Ложь;
		ЭлементыФормы.КоманднаяПанельКонечнаяТаблица.Кнопки.ИсторияПокупок.Доступность         = Ложь;
		ЭлементыФормы.КоманднаяПанельКонечнаяТаблица.Кнопки.ОткрытьУсловияПоставки.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельКонечнаяТаблица.Кнопки.АнализУсловийПоставки.Доступность  = Ложь;
		Возврат;
	КонецЕсли; 
	
	ИмяКолонки = Элемент.ТекущаяКолонка.Имя;
	
	Если ИмяКолонки = "Контрагент" ИЛИ ИмяКолонки = "КонтрагентОписание" Тогда
		ЭлементыФормы.КоманднаяПанельКонечнаяТаблица.Кнопки.ОткрытьДоговор.Доступность         = Ложь;
		ЭлементыФормы.КоманднаяПанельКонечнаяТаблица.Кнопки.ИсторияПокупок.Доступность         = Ложь;
		ЭлементыФормы.КоманднаяПанельКонечнаяТаблица.Кнопки.ОткрытьУсловияПоставки.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельКонечнаяТаблица.Кнопки.АнализУсловийПоставки.Доступность  = Ложь;
		Возврат;
	КонецЕсли; 
	
	Если Элемент.ТекущиеДанные["СтруктураДанных" + ИмяКолонки].Получить("ЯчейкаНедоступна") ИЛИ Элемент.ТекущиеДанные["СтруктураДанных" + ИмяКолонки].Получить("ЯчейкаТолькоПросмотр") Тогда
		ЭлементыФормы.КоманднаяПанельКонечнаяТаблица.Кнопки.ОткрытьДоговор.Доступность         = Ложь;
		ЭлементыФормы.КоманднаяПанельКонечнаяТаблица.Кнопки.ИсторияПокупок.Доступность         = Ложь;
		ЭлементыФормы.КоманднаяПанельКонечнаяТаблица.Кнопки.ОткрытьУсловияПоставки.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельКонечнаяТаблица.Кнопки.АнализУсловийПоставки.Доступность  = Ложь;
		Возврат;
	КонецЕсли; 
	
	ЭлементыФормы.КоманднаяПанельКонечнаяТаблица.Кнопки.ОткрытьДоговор.Доступность         = Истина;
	ЭлементыФормы.КоманднаяПанельКонечнаяТаблица.Кнопки.ИсторияПокупок.Доступность         = Истина;
	ЭлементыФормы.КоманднаяПанельКонечнаяТаблица.Кнопки.ОткрытьУсловияПоставки.Доступность = Элемент.ТекущиеДанные["СтруктураДанных" + ИмяКолонки].Получить("ОсобыеУсловияПоставки");
	ЭлементыФормы.КоманднаяПанельКонечнаяТаблица.Кнопки.АнализУсловийПоставки.Доступность = Элемент.ТекущиеДанные["СтруктураДанных" + ИмяКолонки].Получить("ОсобыеУсловияПоставки");
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельКонечнаяТаблица.ОткрытьДоговор.
//
Процедура КоманднаяПанельКонечнаяТаблицаОткрытьДоговор(Кнопка)
	
	Если ЭлементыФормы.КонечнаяТаблица.ТекущиеДанные = Неопределено ИЛИ ЭлементыФормы.КонечнаяТаблица.ТекущаяКолонка = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяКолонки = ЭлементыФормы.КонечнаяТаблица.ТекущаяКолонка.Имя;
	
	Если ЭлементыФормы.КонечнаяТаблица.ТекущиеДанные["СтруктураДанных" + ИмяКолонки].Получить("ОсобыеУсловияПоставки") Тогда
		
		Если ТипЗнч(ЭлементыФормы.КонечнаяТаблица.ТекущиеДанные["СтруктураДанных" + ИмяКолонки].Получить("ДоговорУсловийПоставки")) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			ЭлементыФормы.КонечнаяТаблица.ТекущиеДанные["СтруктураДанных" + ИмяКолонки].Получить("ДоговорУсловийПоставки").ПолучитьФорму(, ЭтаФорма).Открыть();
		КонецЕсли; 
		
	Иначе
		
		Запрос = Новый Запрос;
		
		СтруктураНоменклатуры = ПолучитьНоменклатуруИХарактеристикуПоИмениКолонки(ИмяКолонки);
		СтруктураТекущейЯчейки = ЭлементыФормы.КонечнаяТаблица.ТекущиеДанные["СтруктураДанных" + ИмяКолонки];
		
		СтрокиДерева = мДеревоЗапросаРезультирующейТаблицы.Строки.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Контрагент", СтруктураНоменклатуры.Номенклатура, СтруктураНоменклатуры.ХарактеристикаНоменклатуры, ЭлементыФормы.КонечнаяТаблица.ТекущиеДанные.Контрагент), Истина);
		НайденнаяСтрока = Неопределено;
		Для каждого СтрокаДерева Из СтрокиДерева Цикл
			Если СтрокаДерева.ЦенаУпрУчета = СтруктураТекущейЯчейки["ЦенаУпр"]
			   И НЕ СтрокаДерева.ОсобыеУсловияПоставки
			   И СтруктураТекущейЯчейки["ТипЦен"] = СтрокаДерева.ТипЦены Тогда
				НайденнаяСтрока = СтрокаДерева;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Если НайденнаяСтрока = Неопределено Тогда
			ЭлементыФормы.КонечнаяТаблица.ТекущиеДанные.Контрагент.ОсновнойДоговорКонтрагента.ПолучитьФорму(, ЭтаФорма).Открыть();
		Иначе
			НайденнаяСтрока.Договор.ПолучитьФорму(, ЭтаФорма).Открыть();
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельКонечнаяТаблица.АнализУсловийПоставки.
//
Процедура КоманднаяПанельКонечнаяТаблицаАнализУсловийПоставки(Кнопка)

	Если ЭлементыФормы.КонечнаяТаблица.ТекущиеДанные = Неопределено ИЛИ ЭлементыФормы.КонечнаяТаблица.ТекущаяКолонка = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяКолонки = ЭлементыФормы.КонечнаяТаблица.ТекущаяКолонка.Имя;
	
	УсловияПоставки = ОпределитьДокументОсобыхУсловийПоставки();
	
	Если ТипЗнч(УсловияПоставки) <> Тип("ДокументСсылка.УсловияПоставокПоДоговорамКонтрагентов") Тогда
		Возврат;
	КонецЕсли;
	
	Отчет = Отчеты.ВыполнениеУсловийПоДоговорамКонтрагентов.Создать();
	Отчет.ДатаОкончания = ТекущаяДата();
	Отчет.ГруппировкаКонтрагент                = Истина;
	Отчет.ГруппировкаДоговорКонтрагента     = Истина;
	Отчет.ГруппировкаДокументУсловий           = Истина;
	Отчет.ГруппировкаДокументВыполненияУсловий = Истина;
	Отчет.ГруппировкаНоменклатураУсловий       = Истина;
	Отчет.РаскрашиватьГруппировки              = Истина;
	
	ЭлементОтбора = Отчет.Отбор.Добавить("ДокументУсловий",, "Документ условий");
	ЭлементОтбора.ВидСравнения  = ВидСравнения.Равно;
	ЭлементОтбора.Значение      = УсловияПоставки;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОтбора = Отчет.Отбор.Добавить("Номенклатура",, "Номенклатура условий");
	ЭлементОтбора.ВидСравнения  = ВидСравнения.Равно;
	ЭлементОтбора.Значение      = ПолучитьНоменклатуруИХарактеристикуПоИмениКолонки(ИмяКолонки).Номенклатура;
	ЭлементОтбора.Использование = Истина;
	
	ФормаОтчета = Отчет.ПолучитьФорму("Форма");
	
	ФормаОтчета.НеЗаполнятьНастройкиПриОткрытии = Истина;
	
	Отчет.СформироватьОтчет(ФормаОтчета.ЭлементыФормы.ТабличныйДокумент);
	
	ФормаОтчета.Открыть();

КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельКонечнаяТаблица.ИсторияПокупок.
//
Процедура КоманднаяПанельКонечнаяТаблицаИсторияПокупок(Кнопка)
	
	Если ЭлементыФормы.КонечнаяТаблица.ТекущиеДанные = Неопределено ИЛИ ЭлементыФормы.КонечнаяТаблица.ТекущаяКолонка = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураНоменклатуры = ПолучитьНоменклатуруИХарактеристикуПоИмениКолонки(ЭлементыФормы.КонечнаяТаблица.ТекущаяКолонка.Имя);
	
	Отчет = Отчеты.ОтчетОстаткиИОбороты.Создать();
	
	СтруктураНостроек = Новый Структура;
	СтруктураНостроек.Вставить("ИмяРегистра", "ПартииТоваровНаСкладах");
	СтруктураНостроек.Вставить("ДатаНач", ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяДатаНачалаОтчетов"));
	
	СоответствиеОтбора = Новый Соответствие;
	СоответствиеОтбора.Вставить("ДокументОприходования.Контрагент", ЭлементыФормы.КонечнаяТаблица.ТекущиеДанные.Контрагент);
	СоответствиеОтбора.Вставить("Номенклатура", СтруктураНоменклатуры.Номенклатура);
	СоответствиеОтбора.Вставить("ХарактеристикаНоменклатуры", СтруктураНоменклатуры.ХарактеристикаНоменклатуры);
	СтруктураНостроек.Вставить("Отбор",СоответствиеОтбора);
	
	СтруктураНостроек.Вставить("ГруппировкиСтрок", Новый Структура("Заказ", "Заказ"));
	СтруктураНостроек.Вставить("ВыбранныеПоля",  Новый Структура("Регистратор", "Регистратор"));
	СтруктураНостроек.Вставить("РаскрашиватьИзмерения", Истина);
	
	Отчет.Настроить(СтруктураНостроек);
	
	ФормаОтчета = Отчет.ПолучитьФорму();
	ФормаОтчета.ОбновитьОтчет();
	ФормаОтчета.Открыть();
	
КонецПроцедуры

// Заполним состав колонок дерева значений мДеревоСвойстваКатегории
мДеревоСвойстваКатегории     = Новый ДеревоЗначений;

мДеревоСвойстваКатегории.Колонки.Добавить("ИмяФильтра");
мДеревоСвойстваКатегории.Колонки.Добавить("ПредставлениеФильтра");
мДеревоСвойстваКатегории.Колонки.Добавить("Свойство");
мДеревоСвойстваКатегории.Колонки.Добавить("ОписаниеТиповСвойство");

// Заполним состав колонок таблицы значений СвойстваИКатегорииКонтрагентов
СвойстваИКатегорииКонтрагентов.Колонки.Добавить("ИмяФильтра");
СвойстваИКатегорииКонтрагентов.Колонки.Добавить("ОписаниеТиповЗначенийОтбора");
СвойстваИКатегорииКонтрагентов.Колонки.Добавить("Свойство");

мДеревоЗапросаРезультирующейТаблицы = Новый ДеревоЗначений;

ТаблицаТоваров.Колонки.Добавить("Номенклатура");
ТаблицаТоваров.Колонки.Добавить("ХарактеристикаНоменклатуры");

мМаксимальноеКоличествоФлажков = 0;