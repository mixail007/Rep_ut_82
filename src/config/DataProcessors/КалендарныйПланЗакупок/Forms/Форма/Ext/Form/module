
// Список значений, содержащий список истории отборов с параметрами отборов
Перем мСписокИсторииОтбора;

// Объект, который был перед автокоррекировкой
Перем мСтруктураОбъектаАвтокорректировки;

// Флаг, в котором запоминается модифицированность объекта перед корректировкой
Перем мМодифицированностьОбъектаПередАвтокорректировкой;

// Флаг, который взводится при регистрации объекта ЗаказПоставщику
Перем мЗаписанОбъектАвтокорректировки;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает доступность кнопки ОтключитьОтбор комендной панели КоманднаяПанельДеревоПодбора.
// 
// Параметры
//  НЕТ
//
// Возвращаемые значения
//  НЕТ
Процедура ДоступностьКнопкиОтключенияОтбора()
	
	ЕстьОтборы = Ложь;
	
	Для каждого ЭлементОтбора Из ОтборыДерева Цикл
		Если ЭлементОтбора.Использование Тогда
			ЕстьОтборы = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	ЭлементыФормы.КоманднаяПанельДеревоПодбора.Кнопки.ОтключитьОтбор.Доступность = ЕстьОтборы;
	ЭлементыФормы.КоманднаяПанельДеревоПодбора.Кнопки[0].Кнопки.ОтключитьОтбор.Доступность = ЕстьОтборы;
	
КонецПроцедуры

// Процедура определяет значение в текущей ячейке дерева значений и соответствующее ему имя отбора.
// 
// Параметры
//  СтруктураЗначенийОтбора      - Структура, ключ - имя отбора, значение - значение отбора
//
// Возвращаемые значения
//  НЕТ
Процедура ОпределитьИмяИЗначениеТекущейЯчейкиДляОтбора(СтруктураЗначенийОтбора)

	ИмяКолонки = ЭлементыФормы.ДеревоПодбора.ТекущаяКолонка.Имя;
	
	ТекущаяСтрокаДерева = ЭлементыФормы.ДеревоПодбора.ТекущиеДанные;
	
	Если ИмяКолонки = "НоменклатураКонтрагентЗаказ" Тогда
		Если ПорядокОтображенияДерева Тогда
			Если ТекущаяСтрокаДерева.Уровень() = 0 Тогда
				СтруктураЗначенийОтбора.Вставить("Контрагент", ТекущаяСтрокаДерева.НоменклатураКонтрагентЗаказ);
			ИначеЕсли ТекущаяСтрокаДерева.Уровень() = 1 Тогда
				СтруктураЗначенийОтбора.Вставить("Номенклатура", ТекущаяСтрокаДерева.Номенклатура);
				СтруктураЗначенийОтбора.Вставить("ХарактеристикаНоменклатуры", ТекущаяСтрокаДерева.ХарактеристикаНоменклатуры);
			ИначеЕсли ТекущаяСтрокаДерева.Уровень() = 2 Тогда
				Если ТипЗнч(ТекущаяСтрокаДерева.НоменклатураКонтрагентЗаказ) = Тип("Дата") Тогда
					СтруктураЗначенийОтбора.Вставить("ДатаПотребности", ТекущаяСтрокаДерева.НоменклатураКонтрагентЗаказ);
				Иначе
					СтруктураЗначенийОтбора.Вставить("ОтбиратьДатыЗаказовНеЗаявленныеВПланеПотребности", Истина);
				КонецЕсли; 
			Иначе
				Если ТипЗнч(ТекущаяСтрокаДерева.Заказ) = Тип("ДокументСсылка.ЗаказПоставщику") И НЕ ТекущаяСтрокаДерева.Заказ.Пустая() Тогда
					СтруктураЗначенийОтбора.Вставить("ЗаказПоставщику", ТекущаяСтрокаДерева.Заказ);
				КонецЕсли; 
			КонецЕсли;
		Иначе
			Если ТекущаяСтрокаДерева.Уровень() = 0 Тогда
				СтруктураЗначенийОтбора.Вставить("Номенклатура", ТекущаяСтрокаДерева.Номенклатура);
				СтруктураЗначенийОтбора.Вставить("ХарактеристикаНоменклатуры", ТекущаяСтрокаДерева.ХарактеристикаНоменклатуры);
			ИначеЕсли ТекущаяСтрокаДерева.Уровень() = 1 Тогда
				Если ТипЗнч(ТекущаяСтрокаДерева.НоменклатураКонтрагентЗаказ) = Тип("Дата") Тогда
					СтруктураЗначенийОтбора.Вставить("ДатаПотребности", ТекущаяСтрокаДерева.НоменклатураКонтрагентЗаказ);
				Иначе
					СтруктураЗначенийОтбора.Вставить("ОтбиратьДатыЗаказовНеЗаявленныеВПланеПотребности", Истина);
				КонецЕсли; 
			ИначеЕсли ТекущаяСтрокаДерева.Уровень() = 2 Тогда
				СтруктураЗначенийОтбора.Вставить("Контрагент", ТекущаяСтрокаДерева.НоменклатураКонтрагентЗаказ);
			Иначе
				Если ТипЗнч(ТекущаяСтрокаДерева.Заказ) = Тип("ДокументСсылка.ЗаказПоставщику") И НЕ ТекущаяСтрокаДерева.Заказ.Пустая() Тогда
					СтруктураЗначенийОтбора.Вставить("ЗаказПоставщику", ТекущаяСтрокаДерева.Заказ);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяКолонки = "СуммаВзаиморасчетовЗаказаПредставление" Тогда
		СтруктураЗначенийОтбора.Вставить("СуммаВзаиморасчетов", ТекущаяСтрокаДерева.СуммаВзаиморасчетовЗаказа);
	Иначе
		СтруктураЗначенийОтбора.Вставить(ИмяКолонки, ТекущаяСтрокаДерева[ИмяКолонки]);
	КонецЕсли;

КонецПроцедуры

// Процедура определяет сотояние кнопки ОтборПоТекущемуЗначению командной панели КоманднаяПанельДеревоПодбора.
// 
// Параметры
//  НЕТ
//
// Возвращаемые значения
//  НЕТ
Процедура СостояниеКнопкиОтбораПоТекущемуЗначению()

	НайденОтбор = Ложь;
	
	Если ЭлементыФормы.ДеревоПодбора.ТекущаяСтрока = Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельДеревоПодбора.Кнопки.ОтборПоТекущемуЗначению.Пометка    = Ложь;
		ЭлементыФормы.КоманднаяПанельДеревоПодбора.Кнопки.ОтборПоТекущемуЗначению.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельДеревоПодбора.Кнопки[0].Кнопки.ОтборПоТекущемуЗначению.Пометка    = Ложь;
		ЭлементыФормы.КоманднаяПанельДеревоПодбора.Кнопки[0].Кнопки.ОтборПоТекущемуЗначению.Доступность = Ложь;
		Возврат;
	Иначе
		ЭлементыФормы.КоманднаяПанельДеревоПодбора.Кнопки.ОтборПоТекущемуЗначению.Доступность = Истина;
		ЭлементыФормы.КоманднаяПанельДеревоПодбора.Кнопки[0].Кнопки.ОтборПоТекущемуЗначению.Доступность = Истина;
	КонецЕсли;
	
	СтруктураЗначенийОтбора = Новый Структура;
	ОпределитьИмяИЗначениеТекущейЯчейкиДляОтбора(СтруктураЗначенийОтбора);
	
	Если СтруктураЗначенийОтбора.Количество() = 0 Тогда
		ЭлементыФормы.КоманднаяПанельДеревоПодбора.Кнопки.ОтборПоТекущемуЗначению.Пометка    = Ложь;
		ЭлементыФормы.КоманднаяПанельДеревоПодбора.Кнопки.ОтборПоТекущемуЗначению.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельДеревоПодбора.Кнопки[0].Кнопки.ОтборПоТекущемуЗначению.Пометка    = Ложь;
		ЭлементыФормы.КоманднаяПанельДеревоПодбора.Кнопки[0].Кнопки.ОтборПоТекущемуЗначению.Доступность = Ложь;
		Возврат;
	КонецЕсли; 
	
	Для каждого ЭлементСтруктуры Из СтруктураЗначенийОтбора Цикл
		НайденныйЭлементОтбора = ОтборыДерева.Найти(ЭлементСтруктуры.Ключ);
		Если НайденныйЭлементОтбора <> Неопределено Тогда
			Если НайденныйЭлементОтбора.Использование И НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.Равно И НайденныйЭлементОтбора.Значение = ЭлементСтруктуры.Значение Тогда
				НайденОтбор = Истина;
			Иначе
				НайденОтбор = Ложь;
				Прервать;
			КонецЕсли; 
		Иначе
			НайденОтбор = Ложь;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	ЭлементыФормы.КоманднаяПанельДеревоПодбора.Кнопки.ОтборПоТекущемуЗначению.Пометка = НайденОтбор;
	ЭлементыФормы.КоманднаяПанельДеревоПодбора.Кнопки[0].Кнопки.ОтборПоТекущемуЗначению.Пометка = НайденОтбор;
	
КонецПроцедуры

// Процедура определяет сотояние кнопок управления строками дерева (изменить и удалить).
// 
// Параметры
//  НЕТ
//
// Возвращаемые значения
//  НЕТ
Процедура СостояниеКнопокУправленияДеревом()

	ДоступностьУдаления       = Ложь;
	ДоступностьРедактирования = Ложь;
	
	Если ЭлементыФормы.ДеревоПодбора.ТекущиеДанные <> Неопределено Тогда
	
		Если ЭлементыФормы.ДеревоПодбора.ТекущиеДанные.Уровень() = 3 Тогда
			ДоступностьУдаления       = Истина;
			ДоступностьРедактирования = Истина;
		Иначе
			Если (ПорядокОтображенияДерева И (ЭлементыФормы.ДеревоПодбора.ТекущиеДанные.Уровень() = 0 ИЛИ ЭлементыФормы.ДеревоПодбора.ТекущиеДанные.Уровень() = 1))
			 ИЛИ (НЕ ПорядокОтображенияДерева И (ЭлементыФормы.ДеревоПодбора.ТекущиеДанные.Уровень() = 0 ИЛИ ЭлементыФормы.ДеревоПодбора.ТекущиеДанные.Уровень() = 2)) Тогда
				ДоступностьРедактирования = Истина;
			КонецЕсли; 
		КонецЕсли; 
	
	КонецЕсли; 
	
	ЭтаФорма.ЭлементыФормы.КоманднаяПанельДеревоПодбора.Кнопки.Изменить.Доступность = ДоступностьРедактирования;
	ЭтаФорма.ЭлементыФормы.КоманднаяПанельДеревоПодбора.Кнопки.Удалить.Доступность  = ДоступностьУдаления;
	ЭтаФорма.ЭлементыФормы.КоманднаяПанельДеревоПодбора.Кнопки[0].Кнопки.Изменить.Доступность = ДоступностьРедактирования;
	ЭтаФорма.ЭлементыФормы.КоманднаяПанельДеревоПодбора.Кнопки[0].Кнопки.Удалить.Доступность  = ДоступностьУдаления;

КонецПроцедуры

// Функция формирует список значений для поля выбора УровеньРазворотаДерева.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция СформироватьСписокВыбораРазворотовДерева()

	СписокЗначенийРазворотовДерева = Новый СписокЗначений;
	
	Если ПорядокОтображенияДерева Тогда
		СписокЗначенийРазворотовДерева.Добавить(0, "Контрагент");
		СписокЗначенийРазворотовДерева.Добавить(1, "Номенклатура");
		СписокЗначенийРазворотовДерева.Добавить(2, "Дата потребности");
	Иначе
		СписокЗначенийРазворотовДерева.Добавить(0, "Номенклатура");
		СписокЗначенийРазворотовДерева.Добавить(1, "Дата потребности");
		СписокЗначенийРазворотовДерева.Добавить(2, "Контрагент");
	КонецЕсли; 
	СписокЗначенийРазворотовДерева.Добавить(3, "Заказ поставщику");
	
	Возврат СписокЗначенийРазворотовДерева;

КонецФункции // СформироватьСписокВыбораРазворотовДерева()

// Процедура формирует строковое представление отбора, для записи в историю отборов дерева значений.
// 
// Параметры
//  СтрокаОтбора - Строка, строковое представление отбора
//  МассивОтбора - Массив, массив парметров и значений отбора
//  ФормаОтборов - Форма, Форма настройки отборов
//  ИмяОтбора    - Строка, Имя отбора, для которого определяется строковое представление
//
// Возвращаемые значения
//  НЕТ
Процедура ДописатьСтрокуОтбора(СтрокаОтбора, ЭлементОтбора)

	Если НЕ ПустаяСтрока(СтрокаОтбора) Тогда
		СтрокаОтбора = СтрокаОтбора + ", ";
	КонецЕсли; 
	Если ЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда
		СтрокаОтбора = СтрокаОтбора + ЭлементОтбора.Представление + " = "+ СокрЛП(Строка(ЭлементОтбора.Значение));
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно Тогда
		СтрокаОтбора = СтрокаОтбора + ЭлементОтбора.Представление + " <> "+ СокрЛП(Строка(ЭлементОтбора.Значение));
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда
		СтрокаСписка = "";
		Для каждого ЭлементСписка Из ЭлементОтбора.Значение Цикл
			Если НЕ ПустаяСтрока(СтрокаСписка) Тогда
				СтрокаСписка = СтрокаСписка + "; ";
			КонецЕсли; 
			СтрокаСписка = СтрокаСписка + СокрЛП(Строка(ЭлементСписка.Значение));
		КонецЦикла; 
		СтрокаОтбора = СтрокаОтбора + ЭлементОтбора.Представление + " в списке "+ СтрокаСписка;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеВСписке Тогда
		СтрокаСписка = "";
		Для каждого ЭлементСписка Из ЭлементОтбора.Значение Цикл
			Если НЕ ПустаяСтрока(СтрокаСписка) Тогда
				СтрокаСписка = СтрокаСписка + "; ";
			КонецЕсли; 
			СтрокаСписка = СтрокаСписка + СокрЛП(Строка(ЭлементСписка.Значение));
		КонецЦикла; 
		СтрокаОтбора = СтрокаОтбора + ЭлементОтбора.Представление + " не в списке "+ СтрокаСписка;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.Больше Тогда
		СтрокаОтбора = СтрокаОтбора + ЭлементОтбора.Представление + " > "+ СокрЛП(Строка(ЭлементОтбора.Значение));
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.БольшеИлиРавно Тогда
		СтрокаОтбора = СтрокаОтбора + ЭлементОтбора.Представление + " >= "+ СокрЛП(Строка(ЭлементОтбора.Значение));
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.Меньше Тогда
		СтрокаОтбора = СтрокаОтбора + ЭлементОтбора.Представление + " < "+ СокрЛП(Строка(ЭлементОтбора.Значение));
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.МеньшеИлиРавно Тогда
		СтрокаОтбора = СтрокаОтбора + ЭлементОтбора.Представление + " <= "+ СокрЛП(Строка(ЭлементОтбора.Значение));
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.Интервал Тогда
		СтрокаОтбора = СтрокаОтбора + СокрЛП(Строка(ЭлементОтбора.ЗначениеС)) + " < " + ЭлементОтбора.Представление + " < "+ СокрЛП(Строка(ЭлементОтбора.ЗначениеПо));
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы Тогда
		СтрокаОтбора = СтрокаОтбора + СокрЛП(Строка(ЭлементОтбора.ЗначениеС)) + " <= " + ЭлементОтбора.Представление + " <= "+ СокрЛП(Строка(ЭлементОтбора.ЗначениеПо));
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяНачало Тогда
		СтрокаОтбора = СтрокаОтбора + СокрЛП(Строка(ЭлементОтбора.ЗначениеС)) + " <= " + ЭлементОтбора.Представление + " < "+ СокрЛП(Строка(ЭлементОтбора.ЗначениеПо));
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяОкончание Тогда
		СтрокаОтбора = СтрокаОтбора + СокрЛП(Строка(ЭлементОтбора.ЗначениеС)) + " < " + ЭлементОтбора.Представление + " <= "+ СокрЛП(Строка(ЭлементОтбора.ЗначениеПо));
	КонецЕсли; 

КонецПроцедуры

// Процедура проверяет наличие и при необходимости добавляет новый элемент в писок истории отборов.
// 
// Параметры
//  НЕТ
//
// Возвращаемые значения
//  НЕТ
Процедура ДобавитьНовыйОтборВИсторию()

	СтрокаТекущихОтборов = "";
	СтруктураАктуальныхОтборов = Новый Структура;
	
	Для каждого ЭлементОтбора Из ОтборыДерева Цикл
		Если ЭлементОтбора.Использование Тогда
			МассивИсторииОтбора = Новый Массив;
			МассивИсторииОтбора.Добавить(ЭлементОтбора.ВидСравнения);
			МассивИсторииОтбора.Добавить(ЭлементОтбора.Значение);
			МассивИсторииОтбора.Добавить(ЭлементОтбора.ЗначениеС);
			МассивИсторииОтбора.Добавить(ЭлементОтбора.ЗначениеПо);
			МассивИсторииОтбора.Добавить(ЭлементОтбора.Использование);
			ДописатьСтрокуОтбора(СтрокаТекущихОтборов, ЭлементОтбора);
			СтруктураАктуальныхОтборов.Вставить(ЭлементОтбора.Имя, МассивИсторииОтбора);
		КонецЕсли; 
	КонецЦикла;
	
	Если СтруктураАктуальныхОтборов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	НайденныйЭлементСпискаЗначений = Неопределено;
	Для каждого ЭлементСписка Из мСписокИсторииОтбора Цикл
		Если ЭлементСписка.Представление = СтрокаТекущихОтборов Тогда
			НайденныйЭлементСпискаЗначений = ЭлементСписка;
		КонецЕсли; 
	КонецЦикла;
	
	Если НайденныйЭлементСпискаЗначений = Неопределено Тогда
	
		Если мСписокИсторииОтбора.Количество() > 0 Тогда
			мСписокИсторииОтбора.Вставить(0, СтруктураАктуальныхОтборов, СтрокаТекущихОтборов);
		Иначе
			мСписокИсторииОтбора.Добавить(СтруктураАктуальныхОтборов, СтрокаТекущихОтборов);
		КонецЕсли;
		
		Если мСписокИсторииОтбора.Количество() > 20 Тогда
			ИндУдаляемогоЭлемента = 20;
			Пока 1 = 1 Цикл
				Если (ИндУдаляемогоЭлемента + 1) > мСписокИсторииОтбора.Количество() Тогда
					Прервать;
				КонецЕсли;
				мСписокИсторииОтбора.Удалить(20);
			КонецЦикла; 
		КонецЕсли; 
		
	Иначе
		
		мСписокИсторииОтбора.Сдвинуть(НайденныйЭлементСпискаЗначений, (-мСписокИсторииОтбора.Индекс(НайденныйЭлементСпискаЗначений)));
		
	КонецЕсли; 
	
	СформироватьПодменюПоСпискуАктуальныхОтборов();

КонецПроцедуры

// Процедура формирует кноаки подменю для кнопки ИсторияОтборов командной панели КоманднаяПанельДеревоПодбора.
// 
// Параметры
//  НЕТ
//
// Возвращаемые значения
//  НЕТ
Процедура СформироватьПодменюПоСпискуАктуальныхОтборов()

	КнопкаПодменю = ЭлементыФормы.КоманднаяПанельДеревоПодбора.Кнопки.ИсторияОтборов;
	КнопкаПодменю1 = ЭлементыФормы.КоманднаяПанельДеревоПодбора.Кнопки[0].Кнопки.ИсторияОтборов;
	КнопкаПодменю.Кнопки.Очистить();
	КнопкаПодменю1.Кнопки.Очистить();
	Для каждого ЭлементСписка Из мСписокИсторииОтбора Цикл
		НоваяКнопка = КнопкаПодменю.Кнопки.Добавить(Строка(мСписокИсторииОтбора.Индекс(ЭлементСписка)), ТипКнопкиКоманднойПанели.Действие, ЭлементСписка.Представление, Новый Действие("ОбработкаИсторииОтбора"));
		НоваяКнопка = КнопкаПодменю1.Кнопки.Добавить(Строка(мСписокИсторииОтбора.Индекс(ЭлементСписка)), ТипКнопкиКоманднойПанели.Действие, ЭлементСписка.Представление, Новый Действие("ОбработкаИсторииОтбора"));
	КонецЦикла;

КонецПроцедуры

// Процедура выполняется по нажатию на одну из кнопок подменю
// кнопки ИсторияОтборов командной панели КоманднаяПанельДеревоПодбора.
// 
// Параметры
//  Кнопка - Кнопка командной панели, по нажатию на которую вызывается данная процедура
//
// Возвращаемые значения
//  НЕТ
Процедура ОбработкаИсторииОтбора(Кнопка)

	ИндексСпискаЗначений = Число(Кнопка.Имя);
	
	Если (ИндексСпискаЗначений + 1) > мСписокИсторииОтбора.Количество() Тогда
		Возврат;
	КонецЕсли; 
	
	ЗначениеЭлементаСпискаЗначений = мСписокИсторииОтбора[ИндексСпискаЗначений].Значение;
	Для каждого ЭлементСтруктуры Из ЗначениеЭлементаСпискаЗначений Цикл
		НайденныйЭлементОтбора = ОтборыДерева.Найти(ЭлементСтруктуры.Ключ);
		Если НайденныйЭлементОтбора <> Неопределено Тогда
			НайденныйЭлементОтбора.Использование = Истина;
			Попытка
				НайденныйЭлементОтбора.ВидСравнения  = ЭлементСтруктуры.Значение[0];
			Исключение
			КонецПопытки;
			Попытка
				НайденныйЭлементОтбора.Значение      = ЭлементСтруктуры.Значение[1];
			Исключение
			КонецПопытки;
			Попытка
				НайденныйЭлементОтбора.ЗначениеС     = ЭлементСтруктуры.Значение[2];
			Исключение
			КонецПопытки;
			Попытка
				НайденныйЭлементОтбора.ЗначениеПо    = ЭлементСтруктуры.Значение[3];
			Исключение
			КонецПопытки;
		КонецЕсли; 
	КонецЦикла;
	
	мФормаИндикации.Открыть();
	
	ПересортироватьТабличнуюЧастьИЗаполнитьДерево(ДеревоПодбора, ЭлементыФормы.ДеревоПодбора, УровеньРазворотаДерева);
	
	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
	ДоступностьКнопкиОтключенияОтбора();
	СостояниеКнопкиОтбораПоТекущемуЗначению();

КонецПроцедуры

// Функция определяет дату потребности для заданной даты поступления по заказу поставщику.
//
// Параметры
//  МассивСтрокНоменклатуры - Массив строк таблицы значений ОсновныеДанные
//  ДатаПоступления         - Дата поставки по заказу поставщику
//  СтрокаДатыПотребности   - Строка таблицы значений, которая определяется в данной функции
//  КоличествоПлана         - Число, количетво номенклатуры по плану потребности 
//
// Возвращаемое значение:
//   Дата, найденная дата потребности по плану потребности, соответствующая дате поставки
//
Функция НайтиНеобходимуюДатуПотребности(МассивСтрокНоменклатуры, ДатаПоступления, СтрокаДатыПотребности, КоличествоПлана)
	
	Если ДатаПоступления = '00010101000000' Тогда
		Возврат ДатаПоступления;
	КонецЕсли; 
	
	ТаблицаДатНеобходимости = Новый ТаблицаЗначений;
	ТаблицаДатНеобходимости.Колонки.Добавить("ДатаПотребности");
	ТаблицаДатНеобходимости.Колонки.Добавить("СтрокаТаблицыДанных");
	
	Для каждого СтрокаТаблицы Из МассивСтрокНоменклатуры Цикл
		Если ТипЗнч(СтрокаТаблицы.ДатаПотребности) = Тип("Дата") И СтрокаТаблицы.ДатаПотребности <> '00010101000000' Тогда
			НоваяСтрока = ТаблицаДатНеобходимости.Добавить();
			НоваяСтрока.ДатаПотребности     = СтрокаТаблицы.ДатаПотребности;
			НоваяСтрока.СтрокаТаблицыДанных = СтрокаТаблицы;
		КонецЕсли; 
	КонецЦикла; 
	
	ТаблицаДатНеобходимости.Сортировать("ДатаПотребности УБЫВ, СтрокаТаблицыДанных ВОЗР");
	
	ДатаПотребности = '00010101000000';
	Для каждого СтрокаТаблицы Из ТаблицаДатНеобходимости Цикл
		Если ДатаПоступления <= СтрокаТаблицы.ДатаПотребности Тогда
			ДатаПотребности = СтрокаТаблицы.ДатаПотребности;
			КоличествоПлана = СтрокаТаблицы.СтрокаТаблицыДанных.КоличествоПлана;
			Если СтрокаТаблицы.СтрокаТаблицыДанных.ЗаказПоставщику.Пустая() И ПустаяСтрока(СтрокаТаблицы.СтрокаТаблицыДанных.ИДОбъекта) Тогда
				СтрокаДатыПотребности = СтрокаТаблицы.СтрокаТаблицыДанных;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат ДатаПотребности;
	
КонецФункции

// Процедура переписывает строки при изменении объекта документа заказ поставщику
//
// Параметры
//  СтрокиТаблицы - Массив строк таблицы значений ОсновныеДанные, которые необходимо перезаписать
//  Объект        - ДокументОбъект.ЗаказПоставщику, в соответствии с данными которого необходимо переписать строки
//
// Возвращаемые значения
//  НЕТ
//
Процедура ПереписатьЗначенияСтрок(СтрокаОбъекта)

	ИДОбъекта = СтрокаОбъекта.ИДОбъекта;
	
	СтрокиТаблицы = ТаблицаНоменклатурыОбъектов.НайтиСтроки(Новый Структура("ИДОбъекта", СтрокаОбъекта.ИДОбъекта));
	
	Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		ТаблицаНоменклатурыОбъектов.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	Если НЕ СтрокаОбъекта.Объект.Ссылка.Пустая() Тогда
		
		Запрос = Новый Запрос;
		
		СписокНоменклатуры              = СтрокаОбъекта.Объект.Товары.ВыгрузитьКолонку("Номенклатура");
		СписокХарактеристикНоменклатуры = СтрокаОбъекта.Объект.Товары.ВыгрузитьКолонку("ХарактеристикаНоменклатуры");
		СписокТары                      = СтрокаОбъекта.Объект.ВозвратнаяТара.ВыгрузитьКолонку("Номенклатура");
		
		Запрос.УстановитьПараметр("ТекущаяДата", КонецДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
		Запрос.УстановитьПараметр("СписокХарактеристикНоменклатуры", СписокХарактеристикНоменклатуры);
		Запрос.УстановитьПараметр("СписокТары", СписокТары);
		Запрос.УстановитьПараметр("ВыбЗаказПоставщику", СтрокаОбъекта.Объект.Ссылка);
		Запрос.УстановитьПараметр("Тара", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
		
		СтрокаВиртуальныхПараметров = "ЗаказПоставщику = &ВыбЗаказПоставщику И ((СтатусПартии = &Тара И Номенклатура В(&СписокТары)) ИЛИ (СтатусПартии <> &Тара И Номенклатура В(&СписокНоменклатуры) И ХарактеристикаНоменклатуры В(&СписокХарактеристикНоменклатуры)))";
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	-1 * Сумма(ЗаказыПоставщикамОстатки.КоличествоОстаток)                                  КАК Количество,
		|	-1 * Сумма(ЗаказыПоставщикамОстатки.СуммаВзаиморасчетовОстаток)                         КАК СуммаВзаиморасчетов,
		|	ЗаказыПоставщикамОстатки.Номенклатура                                                   КАК Номенклатура,
		|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры                                     КАК ХарактеристикаНоменклатуры,
		|	ВЫБОР КОГДА ЗаказыПоставщикамОстатки.СтатусПартии = &Тара ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ КАК Тара
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&ТекущаяДата, ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ " + СтрокаВиртуальныхПараметров + ") КАК ЗаказыПоставщикамОстатки
		|
		|ГДЕ
		|	ЗаказыПоставщикамОстатки.КоличествоОстаток > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыПоставщикамОстатки.Номенклатура,
		|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры,
		|	ВЫБОР КОГДА ЗаказыПоставщикамОстатки.СтатусПартии = &Тара ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ
		|";
		
		ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
		Для каждого СтрокаТЧСсылки Из СтрокаОбъекта.Объект.Ссылка.Товары Цикл
			НоваяСтрока = ТаблицаЗапроса.Добавить();
			НоваяСтрока.Номенклатура               = СтрокаТЧСсылки.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧСсылки.ХарактеристикаНоменклатуры;
			НоваяСтрока.Количество                 = СтрокаТЧСсылки.Количество;
			НоваяСтрока.Тара                       = Ложь;
			Если СтрокаОбъекта.Объект.Ссылка.ВалютаДокумента = СтрокаОбъекта.Объект.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
				НоваяСтрока.СуммаВзаиморасчетов = СтрокаТЧСсылки.Сумма;
			Иначе
				НоваяСтрока.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СтрокаТЧСсылки.Сумма, мВалютаРегламентированногоУчета, СтрокаОбъекта.Объект.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов,
													1, СтрокаОбъекта.Объект.Ссылка.КурсВзаиморасчетов, 1, СтрокаОбъекта.Объект.Ссылка.КратностьВзаиморасчетов);
			КонецЕсли; 
			Если СтрокаОбъекта.Объект.Ссылка.УчитыватьНДС И НЕ СтрокаОбъекта.Объект.Ссылка.СуммаВключаетНДС Тогда
				НоваяСтрока.СуммаВзаиморасчетов = НоваяСтрока.СуммаВзаиморасчетов + НоваяСтрока.СуммаВзаиморасчетов * ПолучитьСтавкуНДС(СтрокаТЧСсылки.СтавкаНДС) / 100;
			КонецЕсли; 
		КонецЦикла; 
	
		Для каждого СтрокаТЧСсылки Из СтрокаОбъекта.Объект.Ссылка.ВозвратнаяТара Цикл
			НоваяСтрока = ТаблицаЗапроса.Добавить();
			НоваяСтрока.Номенклатура               = СтрокаТЧСсылки.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			НоваяСтрока.Количество                 = СтрокаТЧСсылки.Количество;
			НоваяСтрока.Тара                       = Истина;
			Если СтрокаОбъекта.Объект.Ссылка.ВалютаДокумента = СтрокаОбъекта.Объект.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
				НоваяСтрока.СуммаВзаиморасчетов = СтрокаТЧСсылки.Сумма;
			Иначе
				НоваяСтрока.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СтрокаТЧСсылки.Сумма, мВалютаРегламентированногоУчета, СтрокаОбъекта.Объект.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов,
													1, СтрокаОбъекта.Объект.Ссылка.КурсВзаиморасчетов, 1, СтрокаОбъекта.Объект.Ссылка.КратностьВзаиморасчетов);
			КонецЕсли; 
		КонецЦикла; 
	
		ТаблицаЗапроса.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Тара", "СуммаВзаиморасчетов, Количество");

	КонецЕсли; 
	
	СвернутаяТабличнаяЧасть = СтрокаОбъекта.Объект.Товары.Выгрузить();
	СвернутаяТабличнаяЧасть.Свернуть("Номенклатура, ХарактеристикаНоменклатуры", "Сумма, Количество");
	СвернутаяТабличнаяЧасть.Колонки.Добавить("Тара", Новый ОписаниеТипов("Булево"));
	
	СвернутаяТабличнаяЧастьТара = СтрокаОбъекта.Объект.ВозвратнаяТара.Выгрузить();
	СвернутаяТабличнаяЧастьТара.Свернуть("Номенклатура", "Сумма, Количество");
	Для каждого СтрокаТары Из СвернутаяТабличнаяЧастьТара Цикл
		НовыйСтрокаТары = СвернутаяТабличнаяЧасть.Добавить();
		НовыйСтрокаТары.Номенклатура               = СтрокаТары.Номенклатура;
		НовыйСтрокаТары.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		НовыйСтрокаТары.Тара                       = Истина;
		НовыйСтрокаТары.Количество                 = СтрокаТары.Количество;
		НовыйСтрокаТары.Сумма                      = СтрокаТары.Сумма;
	КонецЦикла; 
	
	Для каждого СтрокаТЧ Из СвернутаяТабличнаяЧасть Цикл
	
		СтрокаТаблицы = ТаблицаНоменклатурыОбъектов.Добавить();
		СтрокаТаблицы.ДоговорКонтрагентаЗаказа = СтрокаОбъекта.Объект.ДоговорКонтрагента;
		СтрокаТаблицы.ВалютаВзаиморасчетовДоговораЗаказа = СтрокаОбъекта.Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		СтрокаТаблицы.ДатаЗаказа = СтрокаОбъекта.Объект.Дата;
		СтрокаТаблицы.НомерЗаказа = СтрокаОбъекта.Объект.Номер;
		СтрокаТаблицы.Номенклатура = СтрокаТЧ.Номенклатура;
		СтрокаТаблицы.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
		СтрокаТаблицы.Контрагент = СтрокаОбъекта.Объект.Контрагент;
		СтрокаТаблицы.ДатаПоступленияЗаказа = СтрокаОбъекта.Объект.ДатаПоступления;
		СтрокаТаблицы.ЗаказПоставщику = СтрокаОбъекта.Объект.Ссылка;
		СтрокаТаблицы.Тара = СтрокаТЧ.Тара;
		
		КоличествоОстатка = 0;
		СуммаОстатка      = 0;
		Если НЕ СтрокаОбъекта.Объект.Ссылка.Пустая() Тогда
			СтрокиТаблицыЗапроса = ТаблицаЗапроса.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Тара", СтрокаТЧ.Номенклатура, СтрокаТЧ.ХарактеристикаНоменклатуры, СтрокаТЧ.Тара));
			Если СтрокиТаблицыЗапроса.Количество() > 0 И СтрокиТаблицыЗапроса[0].Количество > 0 Тогда
				КоличествоОстатка = СтрокиТаблицыЗапроса[0].Количество;
				СуммаОстатка = СтрокиТаблицыЗапроса[0].СуммаВзаиморасчетов;
			КонецЕсли; 
		КонецЕсли; 
		
		СтрокаТаблицы.Количество = СтрокаТЧ.Количество - КоличествоОстатка;
		
		Если СтрокаТаблицы.ВалютаВзаиморасчетовДоговораЗаказа = СтрокаОбъекта.Объект.ВалютаДокумента Тогда
			СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(СтрокаТаблицы.ВалютаВзаиморасчетовДоговораЗаказа, ТекущаяДата());
			СтрокаТаблицы.КурсВзаиморасчетовЗаказа      = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаТаблицы.КратностьВзаиморасчетовЗаказа = СтруктураКурсаВзаиморасчетов.Кратность;
			СуммаТЧВзаиморасчетов = СтрокаТЧ.Сумма;
		Иначе // Только валюта регламентированного учета
			СтрокаТаблицы.КурсВзаиморасчетовЗаказа      = 1;
			СтрокаТаблицы.КратностьВзаиморасчетовЗаказа = 1;
			СтруктураКурсаУпрУчета = ПолучитьКурсВалюты(Константы.ВалютаУправленческогоУчета.Получить(), ТекущаяДата());
			КурсУпрУчета           = СтруктураКурсаУпрУчета.Курс;
			КратностьУпрУчета      = СтруктураКурсаУпрУчета.Кратность;

			СуммаТЧВзаиморасчетов  = ПересчитатьИзВалютыВВалюту(СтрокаТЧ.Сумма, мВалютаРегламентированногоУчета, Константы.ВалютаУправленческогоУчета.Получить(),
												1, КурсУпрУчета, 1, КратностьУпрУчета);
		КонецЕсли; 
		
		СтрокаТаблицы.СуммаВзаиморасчетовЗаказа = СуммаТЧВзаиморасчетов - СуммаОстатка;
		СтрокаТаблицы.ЦенаВзаиморасчетовЗаказа = ?(СтрокаТаблицы.Количество = 0, 0, (СтрокаТаблицы.СуммаВзаиморасчетовЗаказа / СтрокаТаблицы.Количество));
		СтрокаТаблицы.ИДОбъекта = ИДОбъекта;
		СтрокаТаблицы.КоличествоОстатка = 0;
		
	КонецЦикла; 
	
КонецПроцедуры

// Процедура обрабатывает события ввода нового заказа в дерево значений.
//
Процедура ВвестиНовыйЗаказ()
	
	ВыделенныеСтроки = ЭлементыФормы.ДеревоПодбора.ВыделенныеСтроки;
	
	НовыйОбъект = Документы.ЗаказПоставщику.СоздатьДокумент();
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДатыПотребности = Новый ТаблицаЗначений;
	ДатыПотребности.Колонки.Добавить("ДатаПотребности", Новый ОписаниеТипов("Дата"));
	ДатыПотребности.Колонки.Добавить("Номенклатура");
	ДатыПотребности.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ДатыПотребности.Колонки.Добавить("Тара");
	ДатыПотребности.Колонки.Добавить("КоличествоПотребности");
	
	НоменклатураПотребности = Новый ТаблицаЗначений;
	НоменклатураПотребности.Колонки.Добавить("Номенклатура");
	НоменклатураПотребности.Колонки.Добавить("ХарактеристикаНоменклатуры");
	НоменклатураПотребности.Колонки.Добавить("Тара");
	НоменклатураПотребности.Колонки.Добавить("КоличествоПотребности");
	
	СписокКонтрагентов = Новый СписокЗначений;
	
	Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		Если ТипЗнч(ВыделеннаяСтрока.НоменклатураКонтрагентЗаказ) = Тип("Дата") Тогда
			Если (ВыделеннаяСтрока.НеобходимоеКоличество - ВыделеннаяСтрока.ЗаказанноеКоличество) > 0 Тогда
				НоваяСтрока = ДатыПотребности.Добавить();
				НоваяСтрока.ДатаПотребности            = ВыделеннаяСтрока.НоменклатураКонтрагентЗаказ;
				НоваяСтрока.Номенклатура               = ВыделеннаяСтрока.Родитель.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры = ВыделеннаяСтрока.Родитель.ХарактеристикаНоменклатуры;
				НоваяСтрока.Тара                       = ВыделеннаяСтрока.Родитель.Тара;
				НоваяСтрока.КоличествоПотребности      = ВыделеннаяСтрока.НеобходимоеКоличество - ВыделеннаяСтрока.ЗаказанноеКоличество;
			КонецЕсли; 
		ИначеЕсли ТипЗнч(ВыделеннаяСтрока.НоменклатураКонтрагентЗаказ) = Тип("Строка")
				И ТипЗнч(ВыделеннаяСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
				И НЕ ВыделеннаяСтрока.Номенклатура.Пустая() Тогда
			Если (ВыделеннаяСтрока.НеобходимоеКоличество - ВыделеннаяСтрока.ЗаказанноеКоличество) > 0 Тогда
				НоваяСтрока = НоменклатураПотребности.Добавить();
				НоваяСтрока.Номенклатура               = ВыделеннаяСтрока.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры = ВыделеннаяСтрока.ХарактеристикаНоменклатуры;
				НоваяСтрока.Тара                       = ВыделеннаяСтрока.Тара;
				НоваяСтрока.КоличествоПотребности      = ВыделеннаяСтрока.НеобходимоеКоличество - ВыделеннаяСтрока.ЗаказанноеКоличество;
			КонецЕсли; 
		ИначеЕсли ТипЗнч(ВыделеннаяСтрока.НоменклатураКонтрагентЗаказ) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокКонтрагентов.Добавить(ВыделеннаяСтрока.НоменклатураКонтрагентЗаказ);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из НоменклатураПотребности Цикл
		
		МассивСтрок = ДатыПотребности.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Тара", СтрокаТаблицы.Номенклатура, СтрокаТаблицы.ХарактеристикаНоменклатуры, СтрокаТаблицы.Тара));
		
		Если МассивСтрок.Количество() = 0 Тогда
			НайденнаяСтрока = ДатыПотребности.Добавить();
			НайденнаяСтрока.ДатаПотребности            = '00010101000000';
			НайденнаяСтрока.Номенклатура               = СтрокаТаблицы.Номенклатура;
			НайденнаяСтрока.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			НайденнаяСтрока.Тара                       = СтрокаТаблицы.Тара;
			НайденнаяСтрока.КоличествоПотребности      = СтрокаТаблицы.КоличествоПотребности;
		КонецЕсли;
		
	КонецЦикла; 
	
	МинимальнаяДатаПотребности = Неопределено;
	Для каждого СтрокаДатыПотребности Из ДатыПотребности Цикл
		Если СтрокаДатыПотребности.ДатаПотребности = '00010101000000' Тогда
			Продолжить;
		ИначеЕсли МинимальнаяДатаПотребности = Неопределено Тогда
			МинимальнаяДатаПотребности = СтрокаДатыПотребности.ДатаПотребности;
			Продолжить;
		КонецЕсли; 
		Если СтрокаДатыПотребности.ДатаПотребности < МинимальнаяДатаПотребности Тогда
			МинимальнаяДатаПотребности = СтрокаДатыПотребности.ДатаПотребности;
		КонецЕсли; 
	КонецЦикла; 
	
	НовыйОбъект.ДатаПоступления = МинимальнаяДатаПотребности;
	Если ДатыПотребности.Количество() > 0 Тогда
		ДатыПотребности.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Тара", "КоличествоПотребности");
		Для каждого СтрокаТаблицы Из ДатыПотребности Цикл
			Если СтрокаТаблицы.Тара Тогда
				НоваяСтрокаТЧ                            = НовыйОбъект.ВозвратнаяТара.Добавить();
				НоваяСтрокаТЧ.Номенклатура               = СтрокаТаблицы.Номенклатура;
				НоваяСтрокаТЧ.Количество                 = СтрокаТаблицы.КоличествоПотребности;
				РассчитатьСуммуТабЧасти(НоваяСтрокаТЧ, НовыйОбъект);
			Иначе
				НоваяСтрокаТЧ                            = НовыйОбъект.Товары.Добавить();
				НоваяСтрокаТЧ.Номенклатура               = СтрокаТаблицы.Номенклатура;
				НоваяСтрокаТЧ.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
				НоваяСтрокаТЧ.Количество                 = СтрокаТаблицы.КоличествоПотребности;
				НоваяСтрокаТЧ.Коэффициент                = 1;
				НоваяСтрокаТЧ.ЕдиницаИзмерения           = СтрокаТаблицы.Номенклатура.ЕдиницаХраненияОстатков;
				НоваяСтрокаТЧ.СтавкаНДС                  = НоваяСтрокаТЧ.Номенклатура.СтавкаНДС;
				РассчитатьКоличествоМестТабЧасти(НоваяСтрокаТЧ, НовыйОбъект);
				РассчитатьСуммуТабЧасти(НоваяСтрокаТЧ, НовыйОбъект);
				РассчитатьСуммуНДСТабЧасти(НоваяСтрокаТЧ, НовыйОбъект);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
	Если СписокКонтрагентов.Количество() > 0 Тогда
		СписокКонтрагентов.СортироватьПоЗначению(НаправлениеСортировки.Возр);
		НовыйОбъект.Контрагент = СписокКонтрагентов[0].Значение;
	КонецЕсли; 
	
	ЗаполнитьШапкуДокумента(НовыйОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета, "Покупка");
	НовыйОбъект.Дата = ТекущаяДата();
	НовыйОбъект.УстановитьНовыйНомер();
	УстановитьНомерДокумента(НовыйОбъект);
	
	ФормаЗаказа = НовыйОбъект.ПолучитьФорму(, Этаформа);
	ФормаЗаказа.ФормаДляРегистрацииБезЗаписи = Истина;
	Если НовыйОбъект.Товары.Количество() > 0 Тогда
		ФормаЗаказа.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ФормаЗаказа.ЭлементыФормы.ОсновнаяПанель.Страницы.Товары;
		ФормаЗаказа.ТекущийЭлемент = ФормаЗаказа.ЭлементыФормы.Товары;
		ФормаЗаказа.ЭлементыФормы.Товары.ТекущаяСтрока  = НовыйОбъект.Товары[0];
		Попытка
			// На случай если эта колонка выключена
			ФормаЗаказа.ЭлементыФормы.Товары.ТекущаяКолонка = ФормаЗаказа.ЭлементыФормы.Товары.Колонки.Цена;
		Исключение
		КонецПопытки;
	ИначеЕсли НовыйОбъект.ВозвратнаяТара.Количество() > 0 Тогда
		ФормаЗаказа.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ФормаЗаказа.ЭлементыФормы.ОсновнаяПанель.Страницы.Тара;
		ФормаЗаказа.ТекущийЭлемент = ФормаЗаказа.ЭлементыФормы.ВозвратнаяТара;
		ФормаЗаказа.ЭлементыФормы.ВозвратнаяТара.ТекущаяСтрока = НовыйОбъект.ВозвратнаяТара[0];
		Попытка
			// На случай если эта колонка выключена
			ФормаЗаказа.ЭлементыФормы.ВозвратнаяТара.ТекущаяКолонка = ФормаЗаказа.ЭлементыФормы.ВозвратнаяТара.Колонки.Цена;
		Исключение
		КонецПопытки;
	КонецЕсли; 
	
	ФормаЗаказа.Открыть();
	
КонецПроцедуры

// Процедура открывает форму помощника заполнения календарного плана закупок.
//
Процедура ОткрытьПомощника()

	мФормаИндикации.Открыть();
	
	ПотребностьВТоварах = ТаблицаПотребности.Скопировать();
	ЗаказанныеТовары    = ТаблицаНоменклатурыОбъектов.Скопировать();
	ПотребностьВТоварах.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Тара", "КоличествоПлана");
	ЗаказанныеТовары.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Тара", "Количество");
	
	ПотребностьВТоварах.Колонки.Добавить("КоличествоЗаказа", Новый ОписаниеТипов("Число"));

	мФормаИндикации.КомментарийОбработкиДанных = "Рассчитывается потребность в товарах ...";
	мФормаИндикации.МаксимальноеЗначение = ПотребностьВТоварах.Количество() - 1;
		
	Для каждого СтрокаТаблицы Из ПотребностьВТоварах Цикл
		мФормаИндикации.Значение = ПотребностьВТоварах.Индекс(СтрокаТаблицы);
		СтрокиВторойТаблицы = ЗаказанныеТовары.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Тара", СтрокаТаблицы.Номенклатура, СтрокаТаблицы.ХарактеристикаНоменклатуры, СтрокаТаблицы.Тара));
		КоличествоВторойТаблицы = 0;
		Для каждого СтрокаВторойТаблицы Из СтрокиВторойТаблицы Цикл
			КоличествоВторойТаблицы = КоличествоВторойТаблицы + СтрокаВторойТаблицы.Количество;
		КонецЦикла; 
		СтрокаТаблицы.КоличествоЗаказа = СтрокаТаблицы.КоличествоЗаказа + КоличествоВторойТаблицы;
	КонецЦикла; 
	
	ПотребностьВТоварах.Колонки.Добавить("КоличествоЗаказать", Новый ОписаниеТипов("Число"));
	ПотребностьВТоварах.Колонки.Добавить("НоменклатураПредставление", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
	ИндексСтроки = 0;
	мФормаИндикации.МаксимальноеЗначение = ПотребностьВТоварах.Количество() - 1;
	Пока 1 = 1 Цикл
	
		мФормаИндикации.Значение = ИндексСтроки;
		
		Если ИндексСтроки > (ПотребностьВТоварах.Количество() - 1) Тогда
			Прервать;
		КонецЕсли; 
		
		Если НЕ ПотребностьВТоварах[ИндексСтроки].КоличествоПлана > ПотребностьВТоварах[ИндексСтроки].КоличествоЗаказа Тогда
			ПотребностьВТоварах.Удалить(ИндексСтроки);
			Продолжить;
		Иначе
			ПотребностьВТоварах[ИндексСтроки].КоличествоЗаказать = ПотребностьВТоварах[ИндексСтроки].КоличествоПлана - ПотребностьВТоварах[ИндексСтроки].КоличествоЗаказа;
		КонецЕсли; 
		
		ПотребностьВТоварах[ИндексСтроки].НоменклатураПредставление = Строка(ПотребностьВТоварах[ИндексСтроки].Номенклатура);
		Если ПотребностьВТоварах[ИндексСтроки].Номенклатура.ВестиУчетПоХарактеристикам Тогда
			ПотребностьВТоварах[ИндексСтроки].НоменклатураПредставление = ПотребностьВТоварах[ИндексСтроки].НоменклатураПредставление + " (" + ?(ПотребностьВТоварах[ИндексСтроки].ХарактеристикаНоменклатуры.Пустая(), "характеристика не указана", ПотребностьВТоварах[ИндексСтроки].ХарактеристикаНоменклатуры) + ")";
		КонецЕсли; 
		Если ПотребностьВТоварах[ИндексСтроки].Тара = Истина Тогда
			ПотребностьВТоварах[ИндексСтроки].НоменклатураПредставление = ПотребностьВТоварах[ИндексСтроки].НоменклатураПредставление + ", ТАРА";
		КонецЕсли; 
		
		ИндексСтроки = ИндексСтроки + 1;
		
	КонецЦикла;
	
	Если ПотребностьВТоварах.Количество() = 0 Тогда
		Если мФормаИндикации.Открыта() Тогда
			мФормаИндикации.Закрыть();
		КонецЕсли; 
		Возврат;
	КонецЕсли; 
	
	ФормаПомощника = ОбработкаОбъект.ПолучитьФорму("ФормаПомощника", ЭтаФорма);
	ПотребностьВТоварах.Сортировать("Номенклатура ВОЗР");
	ФормаПомощника.ТаблицаТоваров = ПотребностьВТоварах;
	
	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
	ВозвращенноеЗначение = ФормаПомощника.ОткрытьМодально();
	
	Если ТипЗнч(ВозвращенноеЗначение) = Тип("Массив") Тогда
		
		мФормаИндикации.Открыть();

		мФормаИндикации.КомментарийОбработкиДанных = "Регистрируются заказы ...";
		мФормаИндикации.МаксимальноеЗначение = ВозвращенноеЗначение.Количество() - 1;
		
		Для а = 0 По ВозвращенноеЗначение.Количество() - 1 Цикл
		
			мФормаИндикации.Значение = а;
			
			ИДОбъекта = СокрЛП(Строка(Новый УникальныйИдентификатор()));
			СтрокаОбъекта = ТаблицаОбъектов.Добавить();
			СтрокаОбъекта.ИДОбъекта = ИДОбъекта;
			СтрокаОбъекта.Объект    = ВозвращенноеЗначение[а];
			Попытка
				СтрокаОбъекта.Объект.Заблокировать();
			Исключение

			КонецПопытки;
			
			МассивНайденныхСтрок = Новый Массив;
			
			ПереписатьЗначенияСтрок(СтрокаОбъекта);
			
		КонецЦикла; 
		
		ПересортироватьТабличнуюЧастьИЗаполнитьДерево(ДеревоПодбора, ЭлементыФормы.ДеревоПодбора, УровеньРазворотаДерева);
		
	КонецЕсли;
	
	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

// Процедура открывает форму помощника для определения соответствий
// заказов покупателей и заказов поставщикам.
//
Процедура СоответствиеЗаказовПокупателейИПоставщиков()
	
	ФормаНастройкиСоответствий = ЭтотОбъект.ПолучитьФорму("ФормаНастройкиСоответствийЗаказовПокупателейИПоставщиков");
	
	ОткликФормы = ФормаНастройкиСоответствий.ОткрытьМодально();
	
	Если ОткликФормы = Истина Тогда
		
		Для каждого СтрокаОбъекта Из ТаблицаОбъектов Цикл
			
			Если НЕ СтрокаОбъекта.Объект.Ссылка.Пустая() Тогда
				СтруктураОбъекта = СкопироватьДанныеОбъектаВСтруктуру(СтрокаОбъекта.Объект);
				Если СравнитьСтруктуруДанныхОбъектаИОбъект(СтрокаОбъекта.Объект.Ссылка, СтруктураОбъекта) Тогда
					СтрокаОбъекта.Объект.Прочитать();
				КонецЕсли; 
			КонецЕсли; 
			
			ПереписатьЗначенияСтрок(СтрокаОбъекта);
			
		КонецЦикла; 
		
		ПересортироватьТабличнуюЧастьИЗаполнитьДерево(ДеревоПодбора, ЭлементыФормы.ДеревоПодбора, УровеньРазворотаДерева);
	
	КонецЕсли; 

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события формы ПриОткрытии.
//
Процедура ПриОткрытии()
	
	мФормаИндикации.Открыть();
	
	ЗаполнитьТаблицуЗначенийОбъекта();
	
	ПересортироватьТабличнуюЧастьИЗаполнитьДерево(ДеревоПодбора, ЭлементыФормы.ДеревоПодбора, УровеньРазворотаДерева);
	
	ЭлементыФормы.УровеньРазворотаДерева.СписокВыбора = СформироватьСписокВыбораРазворотовДерева();
	ЭлементыФормы.УровеньРазворотаДерева.Значение     = 0;
	
	ИсторияОтборов = ВосстановитьЗначение("ИсторииОтборовКалендарногоПланаЗакупок");
	Если ТипЗнч(ИсторияОтборов) = Тип("СписокЗначений") Тогда
		мСписокИсторииОтбора = ИсторияОтборов;
	КонецЕсли; 
	
	СформироватьПодменюПоСпискуАктуальныхОтборов();
	ДоступностьКнопкиОтключенияОтбора();
	СостояниеКнопкиОтбораПоТекущемуЗначению();
	
	ОткрытьПомощника();
	
	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события формы ПриЗакрытии.
//
Процедура ПриЗакрытии()
	
	СохранитьЗначение("ИсторииОтборовКалендарногоПланаЗакупок", мСписокИсторииОтбора);
	
КонецПроцедуры

// Обработчик события формы ОбработкаЗаписиНовогоОбъекта.
//
Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)
	
	СтрокаОбъекта = ТаблицаОбъектов.Найти(Объект, "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда
		ИДОбъекта = СтрокаОбъекта.ИДОбъекта;
	Иначе
		ИДОбъекта = СокрЛП(Строка(Новый УникальныйИдентификатор()));
		СтрокаОбъекта = ТаблицаОбъектов.Добавить();
		СтрокаОбъекта.ИДОбъекта = ИДОбъекта;
		СтрокаОбъекта.Объект    = Объект;
		Попытка
			СтрокаОбъекта.Объект.Заблокировать();
		Исключение

		КонецПопытки;
	КонецЕсли;
	
	Если ТипЗнч(мСтруктураОбъектаАвтокорректировки) = Тип("Структура") Тогда
		мЗаписанОбъектАвтокорректировки = Истина;
		мСтруктураОбъектаАвтокорректировки  = СкопироватьДанныеОбъектаВСтруктуру(Объект);
	КонецЕсли; 
	
	ПереписатьЗначенияСтрок(СтрокаОбъекта);
	
	мФормаИндикации.Открыть();
	
	ПересортироватьТабличнуюЧастьИЗаполнитьДерево(ДеревоПодбора, ЭлементыФормы.ДеревоПодбора, УровеньРазворотаДерева);
	
	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события формы ОбработкаЗаписиНовогоОбъекта.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ОтветНаВопрос = Вопрос("Закрыть без сохранения изменений?", РежимДиалогаВопрос.ДаНет);
	Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события формы ПередОткрытием.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	ДатаНачала    = НачалоДня(ТекущаяДата());
	ДатаОкончания = КонецДня(ДобавитьМесяц(ТекущаяДата(), 1));
	
	НП.УстановитьПериод(ДатаНачала, ДатаОкончания);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ОБРАБОТЧИКОВ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события Нажатие элемента формы КнопкаВыполнить.
//
Процедура КнопкаВыполнитьНажатие(Элемент)
	
	ОтветНаВопрос = Вопрос("Записать все изменения в информационую базу?", РежимДиалогаВопрос.ДаНет);
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли; 
	
	НачатьТранзакцию();
	ОтменаТранзакции = Ложь;
	
	мФормаИндикации.Открыть();
	
	Для каждого СтрокаТаблицы Из ТаблицаОбъектов Цикл
		
		Состояние("Обрабатывается " + Строка(СтрокаТаблицы.Объект));
		
		Если СтрокаТаблицы.Объект.Товары.Количество() = 0 Тогда
			Если НЕ СтрокаТаблицы.Объект.Ссылка.Пустая() Тогда
				СтрокаТаблицы.Объект.Прочитать();
				СтрокаТаблицы.Объект.УстановитьПометкуУдаления(Истина);
			КонецЕсли; 
		Иначе
			Попытка
				СтрокаТаблицы.Объект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			Исключение
				ОтменаТранзакции = Истина;
				СообщитьОбОшибке(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли; 
	
	КонецЦикла;
	
	Если НЕ ОтменаТранзакции Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
		Если мФормаИндикации.Открыта() Тогда
			мФормаИндикации.Закрыть();
		КонецЕсли; 
		Возврат;
	КонецЕсли; 
	
	ЗаполнитьТаблицуЗначенийОбъекта();
	
	ПересортироватьТабличнуюЧастьИЗаполнитьДерево(ДеревоПодбора, ЭлементыФормы.ДеревоПодбора, УровеньРазворотаДерева);
	СостояниеКнопкиОтбораПоТекущемуЗначению();
	
	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельФормы.Обновить.
//
Процедура КоманднаяПанельФормыОбновить(Кнопка)
	
	СтрокаВопроса = "При обновлении будут потеряны все изменения, внесенные в дерево значений, но не зарегистрированные в информационной базе. Продолжить?";
	ОтветНаВопрос = Вопрос(СтрокаВопроса, РежимДиалогаВопрос.ДаНет);
	Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	мФормаИндикации.Открыть();
	
	ЗаполнитьТаблицуЗначенийОбъекта();
	
	ПересортироватьТабличнуюЧастьИЗаполнитьДерево(ДеревоПодбора, ЭлементыФормы.ДеревоПодбора, УровеньРазворотаДерева);
	
	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы УровеньРазворотаДерева.
//
 Процедура УровеньРазворотаДереваПриИзменении(Элемент)
	
	мФормаИндикации.Открыть();
	
	УстановитьРазворотСтрок(ДеревоПодбора, ЭлементыФормы.ДеревоПодбора, Элемент.Значение);
	
	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельДеревоПодбора.Отбор.
//
Процедура КоманднаяПанельДеревоПодбораОтбор(Кнопка)
	
	МассивВозврата = ОбработкаОбъект.ПолучитьФорму("ФормаОтбора").ОткрытьМодально();
	
	Если ТипЗнч(МассивВозврата) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивВозврата[0] = Ложь Тогда
		Возврат;
	КонецЕсли; 
	
	СкопироватьОтбор(МассивВозврата[1], ОтборыДерева);
	
	мФормаИндикации.Открыть();
	
	ПересортироватьТабличнуюЧастьИЗаполнитьДерево(ДеревоПодбора, ЭлементыФормы.ДеревоПодбора, УровеньРазворотаДерева);
	
	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
	ДобавитьНовыйОтборВИсторию();
	
	ДоступностьКнопкиОтключенияОтбора();
	СостояниеКнопкиОтбораПоТекущемуЗначению();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельДеревоПодбора.ОтборПоТекущемуЗначению.
//
Процедура КоманднаяПанельДеревоПодбораОтборПоТекущемуЗначению(Кнопка)
	
	СтруктураЗначенийОтбора = Новый Структура;
	ОпределитьИмяИЗначениеТекущейЯчейкиДляОтбора(СтруктураЗначенийОтбора);
	
	Если СтруктураЗначенийОтбора.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Для каждого ЭлементСтруктуры Из СтруктураЗначенийОтбора Цикл
	
		НайденныйЭлементОтбора = ОтборыДерева.Найти(ЭлементСтруктуры.Ключ);
		Если НайденныйЭлементОтбора <> Неопределено Тогда
			Если Кнопка.Пометка Тогда
				НайденныйЭлементОтбора.Использование = Ложь;
			Иначе
				НайденныйЭлементОтбора.Использование = Истина;
				НайденныйЭлементОтбора.ВидСравнения  = ВидСравнения.Равно;
				НайденныйЭлементОтбора.Значение      = ЭлементСтруктуры.Значение;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла; 
	
	ДобавитьНовыйОтборВИсторию();
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	
	мФормаИндикации.Открыть();
	
	ПересортироватьТабличнуюЧастьИЗаполнитьДерево(ДеревоПодбора, ЭлементыФормы.ДеревоПодбора, УровеньРазворотаДерева);
	
	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
	ДоступностьКнопкиОтключенияОтбора();
	СостояниеКнопкиОтбораПоТекущемуЗначению();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельДеревоПодбора.ИсторияОтборов.
//
Процедура КоманднаяПанельДеревоПодбораИсторияОтборов(Кнопка)
	
	
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельДеревоПодбора.ОтключитьОтбор.
//
Процедура КоманднаяПанельДеревоПодбораОтключитьОтбор(Кнопка)
	
	ОтборыДерева.Сбросить();
	
	мФормаИндикации.Открыть();
	
	ПересортироватьТабличнуюЧастьИЗаполнитьДерево(ДеревоПодбора, ЭлементыФормы.ДеревоПодбора, УровеньРазворотаДерева);
	
	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
	ДоступностьКнопкиОтключенияОтбора();
	СостояниеКнопкиОтбораПоТекущемуЗначению()
	
КонецПроцедуры

// Обработчик события ПриАктивизацииЯчейки элемента формы ДеревоПодбора.
//
Процедура ДеревоПодбораПриАктивизацииЯчейки(Элемент)
	
	ДостпностьКнопкиАвтокорректировкиЗаказа = Ложь;
	Если Элемент.ТекущиеДанные <> Неопределено И Элемент.ТекущаяКолонка.Имя = "НоменклатураКонтрагентЗаказ" И СтрЧислоВхождений(Элемент.ТекущиеДанные.НоменклатураКонтрагентЗаказ, "Заказ") > 0 Тогда
		ДостпностьКнопкиАвтокорректировкиЗаказа = Истина;
	КонецЕсли; 
	ЭлементыФормы.КоманднаяПанельДеревоПодбора.Кнопки.АвтокорректировкаЗаказа.Доступность = ДостпностьКнопкиАвтокорректировкиЗаказа;
	ЭлементыФормы.КоманднаяПанельДеревоПодбора.Кнопки[0].Кнопки.АвтокорректировкаЗаказа.Доступность = ДостпностьКнопкиАвтокорректировкиЗаказа;
	
	СостояниеКнопкиОтбораПоТекущемуЗначению();
	СостояниеКнопокУправленияДеревом();
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента формы ДеревоПодбора.
//
Процедура ДеревоПодбораПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущаяКолонка.Имя = "НоменклатураКонтрагентЗаказ" Тогда
		
		Отказ = Истина;
		
		Если Элемент.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Элемент.ТекущиеДанные.НоменклатураКонтрагентЗаказ) = Тип("Дата") Тогда
			
			Возврат;
			
		ИначеЕсли ТипЗнч(Элемент.ТекущиеДанные.НоменклатураКонтрагентЗаказ) = Тип("Строка") Тогда
			
			Если СтрЧислоВхождений(Элемент.ТекущиеДанные.НоменклатураКонтрагентЗаказ, "Заказ") > 0 Тогда
				
				СтрокаОбъекта = ТаблицаОбъектов.Найти(Элемент.ТекущиеДанные.ИДОбъекта, "ИДОбъекта");
				
				Если СтрокаОбъекта <> Неопределено Тогда
					
					Попытка
						СтрокаОбъекта.Объект.Заблокировать();
					Исключение
					КонецПопытки;
					
					мСтруктураОбъектаАвтокорректировки = СкопироватьДанныеОбъектаВСтруктуру(СтрокаОбъекта.Объект);
					мМодифицированностьОбъектаПередАвтокорректировкой = СтрокаОбъекта.Объект.Модифицированность();
					мЗаписанОбъектАвтокорректировки = Ложь;
					
					ФормаЗаказа = СтрокаОбъекта.Объект.ПолучитьФорму(,ЭтаФорма);
					ФормаЗаказа.ФормаДляРегистрацииБезЗаписи = Истина;
					
					Если ПорядокОтображенияДерева = Истина Тогда
						СтрокаНоменклатуры = Элемент.ТекущиеДанные.Родитель.Родитель;
					Иначе
						СтрокаНоменклатуры = Элемент.ТекущиеДанные.Родитель.Родитель.Родитель;
					КонецЕсли;
					
					Если ТипЗнч(СтрокаНоменклатуры.Номенклатура) = Тип("СправочникСсылка.Номенклатура") И НЕ СтрокаНоменклатуры.Номенклатура.Пустая() И ТипЗнч(СтрокаНоменклатуры.ХарактеристикаНоменклатуры) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
						
						СтрокиТекущегоТовара = СтрокаОбъекта.Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СтрокаНоменклатуры.Номенклатура, СтрокаНоменклатуры.ХарактеристикаНоменклатуры));
						Если СтрокиТекущегоТовара.Количество() > 0 Тогда
							ФормаЗаказа.ЭлементыФормы.Товары.ТекущаяСтрока = СтрокиТекущегоТовара[0];
						КонецЕсли; 
						
					КонецЕсли; 
					
					ФормаЗаказа.ЭлементыФормы.Товары.ТекущаяКолонка = ФормаЗаказа.ЭлементыФормы.Товары.Колонки.Количество;
					ФормаЗаказа.ТекущийЭлемент = ФормаЗаказа.ЭлементыФормы.Товары;
					Если ЗначениеНеЗаполнено(СтрокаОбъекта.Объект.Ссылка) Тогда
						ФормаЗаказа.Модифицированность = Ложь;
					КонецЕсли; 
					ФормаЗаказа.ОткрытьМодально();
					
					Если НЕ СтрокаОбъекта.Объект.Ссылка.Пустая() Тогда
						Если (НЕ мМодифицированностьОбъектаПередАвтокорректировкой И НЕ мЗаписанОбъектАвтокорректировки)
						 ИЛИ СравнитьСтруктуруДанныхОбъектаИОбъект(СтрокаОбъекта.Объект.Ссылка, мСтруктураОбъектаАвтокорректировки) Тогда
							СтрокаОбъекта.Объект.Прочитать();
						Иначе
							ВосстановитьДанныеОбъектаИзСтруктуры(СтрокаОбъекта.Объект, мСтруктураОбъектаАвтокорректировки);
						КонецЕсли; 
					Иначе
						ВосстановитьДанныеОбъектаИзСтруктуры(СтрокаОбъекта.Объект, мСтруктураОбъектаАвтокорректировки);
					КонецЕсли; 
					
					Попытка
						СтрокаОбъекта.Объект.Заблокировать();
					Исключение
					КонецПопытки;
					
					мСтруктураОбъектаАвтокорректировки = Неопределено;
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Элемент.ТекущиеДанные.Номенклатура) = Тип("СправочникСсылка.Номенклатура") И НЕ Элемент.ТекущиеДанные.Номенклатура.Пустая() Тогда
				
				Элемент.ТекущиеДанные.Номенклатура.ПолучитьФорму().Открыть();
				
			Иначе
				
				Возврат;
				
			КонецЕсли; 
			
		ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Элемент.ТекущиеДанные.НоменклатураКонтрагентЗаказ)) Тогда
			
			Если НЕ Элемент.ТекущиеДанные.НоменклатураКонтрагентЗаказ.Пустая() Тогда
				
				Элемент.ТекущиеДанные.НоменклатураКонтрагентЗаказ.ПолучитьФорму().Открыть();
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ПорядокОтображенияДерева.
//
Процедура ПорядокОтображенияДереваПриИзменении(Элемент)
	
	мФормаИндикации.Открыть();
	
	СтароеЗначение = УровеньРазворотаДерева;
	СтарыйСписокЗначений = ЭлементыФормы.УровеньРазворотаДерева.СписокВыбора.Скопировать();
	ЭлементСтарогоСписка = СтарыйСписокЗначений.НайтиПоЗначению(УровеньРазворотаДерева);
	СтароеНаименование = ЭлементСтарогоСписка.Представление;
	
	НовыйСписокЗначений = СформироватьСписокВыбораРазворотовДерева();
	ЭлементыФормы.УровеньРазворотаДерева.СписокВыбора = НовыйСписокЗначений;
	
	Для каждого ЭлементСписка Из НовыйСписокЗначений Цикл
		Если ЭлементСписка.Представление = СтароеНаименование Тогда
			УровеньРазворотаДерева = ЭлементСписка.Значение;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	ПересортироватьТабличнуюЧастьИЗаполнитьДерево(ДеревоПодбора, ЭлементыФормы.ДеревоПодбора, УровеньРазворотаДерева);
	
	Если мФормаИндикации.Открыта() Тогда
		мФормаИндикации.Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы ДеревоПодбора.
//
Процедура ДеревоПодбораПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если НЕ ПустаяСтрока(ДанныеСтроки.ИДОбъекта) Тогда
		СтрокаОбъекта = ТаблицаОбъектов.Найти(ДанныеСтроки.ИДОбъекта, "ИДОбъекта");
		Если СтрокаОбъекта <> Неопределено Тогда
			Если НЕ СтрокаОбъекта.Объект.Ссылка.Пустая() Тогда
				Если СтрокаОбъекта.Объект.Модифицированность() Тогда
					ОформлениеСтроки.ЦветТекста = WebЦвета.ЦианТемный;
					Номенклатура               = Неопределено;
					ХарактеристикаНоменклатуры = Неопределено;
					ТекСтрока = ДанныеСтроки;
					Пока 1 = 1 Цикл
						Если ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура") И НЕ ТекСтрока.Номенклатура.Пустая() Тогда
							Номенклатура = ТекСтрока.Номенклатура;
							ХарактеристикаНоменклатуры = ТекСтрока.ХарактеристикаНоменклатуры;
							Прервать;
						КонецЕсли; 
						Если ТекСтрока.Уровень() = 0 Тогда
							Прервать;
						КонецЕсли; 
						ТекСтрока = ТекСтрока.Родитель;
					КонецЦикла;
					Если Номенклатура <> Неопределено И (ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") И НЕ Номенклатура.Пустая()) Тогда
						СтрокиНоменклатурыТЧ        = СтрокаОбъекта.Объект.Ссылка.Товары.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", Номенклатура, ХарактеристикаНоменклатуры));
						СтрокиНоменклатурыТЧОбъекта = СтрокаОбъекта.Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", Номенклатура, ХарактеристикаНоменклатуры));
						СтрокиТарыТЧ                = СтрокаОбъекта.Объект.Ссылка.ВозвратнаяТара.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
						СтрокиТарыТЧОбъекта         = СтрокаОбъекта.Объект.ВозвратнаяТара.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
						Если СтрокиНоменклатурыТЧ.Количество() = 0 ИЛИ СтрокиНоменклатурыТЧОбъекта.Количество() = 0 ИЛИ СтрокиТарыТЧ.Количество() = 0 ИЛИ СтрокиТарыТЧОбъекта.Количество() = 0 Тогда
							ОформлениеСтроки.Ячейки.НоменклатураКонтрагентЗаказ.ОтображатьКартинку = Истина;
							ОформлениеСтроки.Ячейки.НоменклатураКонтрагентЗаказ.ИндексКартинки     = 5;
						Иначе
							ОтображатьКартинку = Ложь;
							Для каждого СтрокаТЧОбъекта Из СтрокиНоменклатурыТЧОбъекта Цикл
								НайденаСтрока = Ложь;
								Для каждого СтрокаТЧ Из СтрокиНоменклатурыТЧ Цикл
									Если СтрокаТЧ.Количество = СтрокаТЧОбъекта.Количество И СтрокаТЧ.Сумма = СтрокаТЧОбъекта.Сумма Тогда
										НайденаСтрока = Истина;
										Прервать;
									КонецЕсли; 
									Если НЕ НайденаСтрока Тогда
										ОтображатьКартинку = Истина;
										Прервать;
									КонецЕсли; 
								КонецЦикла; 
							КонецЦикла; 
							Если НЕ ОтображатьКартинку Тогда
								Для каждого СтрокаТЧОбъекта Из СтрокиТарыТЧОбъекта Цикл
									НайденаСтрока = Ложь;
									Для каждого СтрокаТЧ Из СтрокиТарыТЧ Цикл
										Если СтрокаТЧ.Количество = СтрокаТЧОбъекта.Количество И СтрокаТЧ.Сумма = СтрокаТЧОбъекта.Сумма Тогда
											НайденаСтрока = Истина;
											Прервать;
										КонецЕсли; 
										Если НЕ НайденаСтрока Тогда
											ОтображатьКартинку = Истина;
											Прервать;
										КонецЕсли; 
									КонецЦикла; 
								КонецЦикла; 
							КонецЕсли; 
							Если ОтображатьКартинку Тогда
								ОформлениеСтроки.Ячейки.НоменклатураКонтрагентЗаказ.ОтображатьКартинку = Истина;
								ОформлениеСтроки.Ячейки.НоменклатураКонтрагентЗаказ.ИндексКартинки     = 5;
							КонецЕсли; 
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
			Иначе
				ОформлениеСтроки.Ячейки.НоменклатураКонтрагентЗаказ.ИндексКартинки     = 4;
				ОформлениеСтроки.Ячейки.НоменклатураКонтрагентЗаказ.ОтображатьКартинку = Истина;
				ОформлениеСтроки.ЦветТекста = WebЦвета.ЦианТемный;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	Если (ПорядокОтображенияДерева И (ДанныеСтроки.Уровень() = 1 ИЛИ ДанныеСтроки.Уровень() = 2)) Тогда
		
		ОформлениеСтроки.Ячейки.НоменклатураКонтрагентЗаказ.ЦветФона = WebЦвета.Кремовый;
		ОформлениеСтроки.Ячейки.НеобходимоеКоличество.ЦветФона       = WebЦвета.Кремовый;
		ОформлениеСтроки.Ячейки.ЗаказанноеКоличество.ЦветФона        = WebЦвета.Кремовый;
		ОформлениеСтроки.Ячейки.ЦенаУпрУчета.ЦветФона                = WebЦвета.Кремовый;
		ОформлениеСтроки.Ячейки.СуммаУпрУчета.ЦветФона               = WebЦвета.Кремовый;
		
		Если ДанныеСтроки.НеобходимоеКоличество > ДанныеСтроки.ЗаказанноеКоличество Тогда
			Если НЕ (ДанныеСтроки.Уровень() = 2 И НЕ (ДанныеСтроки.Родитель.НеобходимоеКоличество > ДанныеСтроки.Родитель.ЗаказанноеКоличество)) Тогда
				ОформлениеСтроки.Ячейки.НеобходимоеКоличество.ЦветТекста       = WebЦвета.Кирпичный;
				ОформлениеСтроки.Ячейки.ЗаказанноеКоличество.ЦветТекста        = WebЦвета.Кирпичный;
				ОформлениеСтроки.Ячейки.НоменклатураКонтрагентЗаказ.ЦветТекста = WebЦвета.Кирпичный;
			КонецЕсли; 
		ИначеЕсли ДанныеСтроки.НеобходимоеКоличество < ДанныеСтроки.ЗаказанноеКоличество Тогда
			Если НЕ (ДанныеСтроки.Уровень() = 2 И НЕ (ДанныеСтроки.Родитель.НеобходимоеКоличество < ДанныеСтроки.Родитель.ЗаказанноеКоличество)) Тогда
				ОформлениеСтроки.Ячейки.НеобходимоеКоличество.ЦветТекста       = WebЦвета.Синий;
				ОформлениеСтроки.Ячейки.ЗаказанноеКоличество.ЦветТекста        = WebЦвета.Синий;
			КонецЕсли; 
		КонецЕсли; 
		
	ИначеЕсли (НЕ ПорядокОтображенияДерева И (ДанныеСтроки.Уровень() = 0 ИЛИ ДанныеСтроки.Уровень() = 1)) Тогда
		
		Если ДанныеСтроки.НеобходимоеКоличество > ДанныеСтроки.ЗаказанноеКоличество Тогда
			Если НЕ (ДанныеСтроки.Уровень() = 1 И НЕ (ДанныеСтроки.Родитель.НеобходимоеКоличество > ДанныеСтроки.Родитель.ЗаказанноеКоличество)) Тогда
				ОформлениеСтроки.Ячейки.НеобходимоеКоличество.ЦветТекста       = WebЦвета.Кирпичный;
				ОформлениеСтроки.Ячейки.ЗаказанноеКоличество.ЦветТекста        = WebЦвета.Кирпичный;
				ОформлениеСтроки.Ячейки.НоменклатураКонтрагентЗаказ.ЦветТекста = WebЦвета.Кирпичный;
			КонецЕсли; 
		ИначеЕсли ДанныеСтроки.НеобходимоеКоличество < ДанныеСтроки.ЗаказанноеКоличество Тогда
			Если НЕ (ДанныеСтроки.Уровень() = 1 И НЕ (ДанныеСтроки.Родитель.НеобходимоеКоличество < ДанныеСтроки.Родитель.ЗаказанноеКоличество)) Тогда
				ОформлениеСтроки.Ячейки.НеобходимоеКоличество.ЦветТекста       = WebЦвета.Синий;
				ОформлениеСтроки.Ячейки.ЗаказанноеКоличество.ЦветТекста        = WebЦвета.Синий;
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы ДеревоПодбора.
//
Процедура ДеревоПодбораПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанныеДерева = Элемент.ТекущиеДанные;
	Если ТекущиеДанныеДерева = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТекущиеДанныеДерева.Уровень() <> 3 Тогда
		Возврат;
	Иначе
		СтрокаОбъекта = ТаблицаОбъектов.Найти(ТекущиеДанныеДерева.ИДОбъекта, "ИДОбъекта");
		Если СтрокаОбъекта = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		Если СтрокаОбъекта.Объект.Товары.Количество() = 1 Тогда
			ТекстВопроса = "Удалить заказ ?";
			ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		Иначе
			ТекстВопроса = "Удалить заказ вцелом (по всем позициям номенклатуры)?";
			ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Нет);
		КонецЕсли; 
		Если ОтветНаВопрос = КодВозвратаДиалога.Отмена ИЛИ (СтрокаОбъекта.Объект.Товары.Количество() = 1 И ОтветНаВопрос = КодВозвратаДиалога.Нет) Тогда
			Возврат;
		ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			Если ПорядокОтображенияДерева Тогда
				УдаляемаяНоменклатура               = ТекущиеДанныеДерева.Родитель.Родитель.Номенклатура;
				УдаляемаяХарактеристикаНоменклатуры = ТекущиеДанныеДерева.Родитель.Родитель.ХарактеристикаНоменклатуры;
			Иначе
				УдаляемаяНоменклатура               = ТекущиеДанныеДерева.Родитель.Родитель.Родитель.Номенклатура;
				УдаляемаяХарактеристикаНоменклатуры = ТекущиеДанныеДерева.Родитель.Родитель.Родитель.ХарактеристикаНоменклатуры;
			КонецЕсли; 
			Если ТипЗнч(УдаляемаяНоменклатура) = Тип("СправочникСсылка.Номенклатура") И ТипЗнч(УдаляемаяХарактеристикаНоменклатуры) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
				СтрокиТЧ = СтрокаОбъекта.Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", УдаляемаяНоменклатура, УдаляемаяХарактеристикаНоменклатуры));
				Если СтрокиТЧ.Количество() = Неопределено Тогда
					Возврат;
				КонецЕсли;
				Для каждого СтрокаТЧ Из СтрокиТЧ Цикл
					СтрокаОбъекта.Объект.Товары.Удалить(СтрокаТЧ);
				КонецЦикла;
				СтрокиТаблицы = ТаблицаНоменклатурыОбъектов.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ИДОбъекта", УдаляемаяНоменклатура, УдаляемаяХарактеристикаНоменклатуры, ТекущиеДанныеДерева.ИДОбъекта));
				Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
					ТаблицаНоменклатурыОбъектов.Удалить(СтрокаТаблицы);
				КонецЦикла; 
				
				мФормаИндикации.Открыть();
				
				ПересортироватьТабличнуюЧастьИЗаполнитьДерево(ДеревоПодбора, ЭлементыФормы.ДеревоПодбора, УровеньРазворотаДерева);
				
				Если мФормаИндикации.Открыта() Тогда
					мФормаИндикации.Закрыть();
				КонецЕсли; 
	
			КонецЕсли; 
		ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
			СтрокаОбъекта.Объект.Товары.Очистить();
			СтрокиТаблицы = ТаблицаНоменклатурыОбъектов.НайтиСтроки(Новый Структура("ИДОбъекта", ТекущиеДанныеДерева.ИДОбъекта));
			Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
				ТаблицаНоменклатурыОбъектов.Удалить(СтрокаТаблицы);
			КонецЦикла;
			
			СтрокаТаблицы = ТаблицаОбъектов.Найти(ТекущиеДанныеДерева.ИДОбъекта, "ИДОбъекта");
			Если СтрокаТаблицы <> Неопределено Тогда
				ТаблицаОбъектов.Удалить(СтрокаТаблицы);
			КонецЕсли; 
			
			мФормаИндикации.Открыть();
			
			ПересортироватьТабличнуюЧастьИЗаполнитьДерево(ДеревоПодбора, ЭлементыФормы.ДеревоПодбора, УровеньРазворотаДерева);
			
			Если мФормаИндикации.Открыта() Тогда
				мФормаИндикации.Закрыть();
			КонецЕсли; 
	
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы ДеревоПодбора.
//
Процедура ДеревоПодбораПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	
	Отказ = Истина;
	
	ВвестиНовыйЗаказ();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельФормы.Помощник.
//
Процедура КоманднаяПанельФормыПомощник(Кнопка)
	
	ОткрытьПомощника();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельДеревоПодбора.АвтокорректировкаЗаказа.
//
Процедура КоманднаяПанельДеревоПодбораАвтокорректировкаЗаказа(Кнопка)
	
	Если ЭлементыФормы.ДеревоПодбора.ВыделенныеСтроки.Количество() > 1 Тогда
		Предупреждение("Данную операцию нельзя проводить с несколькими выделенными строками.");
		Возврат;
	КонецЕсли; 
	
	Если НЕ (ЭлементыФормы.ДеревоПодбора.ТекущиеДанные <> Неопределено И ЭлементыФормы.ДеревоПодбора.ТекущаяКолонка.Имя = "НоменклатураКонтрагентЗаказ" И СтрЧислоВхождений(ЭлементыФормы.ДеревоПодбора.ТекущиеДанные.НоменклатураКонтрагентЗаказ, "Заказ") > 0) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОбъекта = ТаблицаОбъектов.Найти(ЭлементыФормы.ДеревоПодбора.ТекущиеДанные.ИДОбъекта, "ИДОбъекта");
	Если СтрокаОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтрокаВопроса = "Хотите провести автокорректировку всех номенклатурных позиций данного заказа?";
	ОтветНаВопрос = Вопрос(СтрокаВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Нет);
	
	ЕстьОтборы = Ложь;
	Для каждого ЭлементОтбора Из ОтборыДерева Цикл
		Если ЭлементОтбора.Использование Тогда
			ЕстьОтборы = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	ДеревоБезОтборов = ДеревоПодбора.Скопировать();
	Если ЕстьОтборы Тогда
		ПересортироватьТабличнуюЧастьИЗаполнитьДерево(ДеревоБезОтборов);
	КонецЕсли; 
	
	ТаблицаНоменклатурыПоиска = Новый ТаблицаЗначений;
	ТаблицаНоменклатурыПоиска.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаНоменклатурыПоиска.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаНоменклатурыПоиска.Колонки.Добавить("Тара", Новый ОписаниеТипов("Булево"));
	Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		НоваяСтрока = ТаблицаНоменклатурыПоиска.Добавить();
		НоваяСтрока.Номенклатура               = ЭлементыФормы.ДеревоПодбора.ТекущиеДанные.Родитель.Родитель.Родитель.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = ЭлементыФормы.ДеревоПодбора.ТекущиеДанные.Родитель.Родитель.Родитель.ХарактеристикаНоменклатуры;
		НоваяСтрока.Тара                       = ЭлементыФормы.ДеревоПодбора.ТекущиеДанные.Родитель.Родитель.Родитель.Тара;
	ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		СтрокиДерева = ДеревоБезОтборов.Строки.НайтиСтроки(Новый Структура("ИДОбъекта", СтрокаОбъекта.ИДОбъекта), Истина);
		Для каждого СтрокаДерева Из СтрокиДерева Цикл
			Если СтрокаДерева.Уровень() <> 3 Тогда
				Продолжить;
			КонецЕсли; 
			НоваяСтрока = ТаблицаНоменклатурыПоиска.Добавить();
			Если ПорядокОтображенияДерева Тогда
				НоваяСтрока.Номенклатура               = СтрокаДерева.Родитель.Родитель.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаДерева.Родитель.Родитель.ХарактеристикаНоменклатуры;
				НоваяСтрока.Тара                       = СтрокаДерева.Родитель.Родитель.Тара;
			Иначе
				НоваяСтрока.Номенклатура               = СтрокаДерева.Родитель.Родитель.Родитель.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаДерева.Родитель.Родитель.Родитель.ХарактеристикаНоменклатуры;
				НоваяСтрока.Тара                       = СтрокаДерева.Родитель.Родитель.Родитель.Тара;
			КонецЕсли; 
		КонецЦикла; 
	Иначе
		Возврат;
	КонецЕсли; 
	
	ТаблицаНоменклатурыПоиска.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Тара");
	ТаблицаНоменклатурыПоиска.Колонки.Добавить("Количество", ПолучитьОписаниеТиповЧисла(15,3));
	
	Если ПорядокОтображенияДерева Тогда
		
		Для каждого СтрокаКонтрагента Из ДеревоБезОтборов.Строки Цикл
			
			Для каждого СтрокаНоменклатура Из СтрокаКонтрагента.Строки Цикл
				
				Если НЕ (ТипЗнч(СтрокаНоменклатура.Номенклатура) = Тип("СправочникСсылка.Номенклатура") И НЕ СтрокаНоменклатура.Номенклатура.Пустая() И ТипЗнч(СтрокаНоменклатура.ХарактеристикаНоменклатуры) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры")) Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокиПоиска = ТаблицаНоменклатурыПоиска.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Тара", СтрокаНоменклатура.Номенклатура, СтрокаНоменклатура.ХарактеристикаНоменклатуры, СтрокаНоменклатура.Тара));
				Если СтрокиПоиска.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли; 
				
				Для каждого СтрокаДатаПотребности Из СтрокаНоменклатура.Строки Цикл
				
					Если ТипЗнч(СтрокаДатаПотребности.НоменклатураКонтрагентЗаказ) <> Тип("Дата") Тогда
						Продолжить;
					КонецЕсли; 
					Если СтрокаДатаПотребности.НоменклатураКонтрагентЗаказ < СтрокаОбъекта.Объект.ДатаПоступления Тогда
						Продолжить;
					КонецЕсли; 
				
					СтрокиПоиска[0].Количество = СтрокиПоиска[0].Количество + (СтрокаДатаПотребности.НеобходимоеКоличество - СтрокаДатаПотребности.ЗаказанноеКоличество);
				
				КонецЦикла; 
			
			КонецЦикла; 
		
		КонецЦикла; 
		
	Иначе
		
		Для каждого СтрокаНоменклатура Из ДеревоБезОтборов.Строки Цикл
			
			Если НЕ (ТипЗнч(СтрокаНоменклатура.Номенклатура) = Тип("СправочникСсылка.Номенклатура") И НЕ СтрокаНоменклатура.Номенклатура.Пустая() И ТипЗнч(СтрокаНоменклатура.ХарактеристикаНоменклатуры) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры")) Тогда
				Продолжить;
			КонецЕсли; 
			
			СтрокиПоиска = ТаблицаНоменклатурыПоиска.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Тара", СтрокаНоменклатура.Номенклатура, СтрокаНоменклатура.ХарактеристикаНоменклатуры, СтрокаНоменклатура.Тара));
			Если СтрокиПоиска.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			Для каждого СтрокаДатаПотребности Из СтрокаНоменклатура.Строки Цикл
				
				Если ТипЗнч(СтрокаДатаПотребности.НоменклатураКонтрагентЗаказ) <> Тип("Дата") Тогда
					Продолжить;
				КонецЕсли; 
				Если СтрокаДатаПотребности.НоменклатураКонтрагентЗаказ < СтрокаОбъекта.Объект.ДатаПоступления Тогда
					Продолжить;
				КонецЕсли; 
				
				СтрокиПоиска[0].Количество = СтрокиПоиска[0].Количество + (СтрокаДатаПотребности.НеобходимоеКоличество - СтрокаДатаПотребности.ЗаказанноеКоличество);
				
			КонецЦикла; 
		
		КонецЦикла; 
		
	КонецЕсли;
	
	Если ТаблицаНоменклатурыПоиска.Итог("Количество") = 0 Тогда
		Предупреждение("Для данного заказа корректировка не требуется.");
		Возврат;
	КонецЕсли;
	
	Попытка
		СтрокаОбъекта.Объект.Заблокировать();
	Исключение
		Предупреждение("Не удалось заблокировать запись. Действие (изменение, удаление или блокировка записи) не выполнено.");
		Возврат;
	КонецПопытки;
	
	мСтруктураОбъектаАвтокорректировки = СкопироватьДанныеОбъектаВСтруктуру(СтрокаОбъекта.Объект);
	мМодифицированностьОбъектаПередАвтокорректировкой = СтрокаОбъекта.Объект.Модифицированность();
	мЗаписанОбъектАвтокорректировки = Ложь;

	ЕстьКорректировкиТоваров = Ложь;
	ЕстьКорректировкиТары    = Ложь;
	Для каждого СтрокаТаблицы Из ТаблицаНоменклатурыПоиска Цикл
		
		Если СтрокаТаблицы.Тара Тогда
			ЕстьКорректировкиТары = Истина;
			СтрокиПоискаТЧ = СтрокаОбъекта.Объект.ВозвратнаяТара.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТаблицы.Номенклатура));
			Если СтрокиПоискаТЧ.Количество() = 0 Тогда
				Продолжить;
			ИначеЕсли СтрокиПоискаТЧ.Количество() = 1 Тогда
				СтрокиПоискаТЧ[0].Количество = СтрокиПоискаТЧ[0].Количество + СтрокаТаблицы.Количество;
				РассчитатьСуммуТабЧасти(СтрокиПоискаТЧ[0], СтрокаОбъекта.Объект);
			Иначе
				ТаблицаСтрокТЧ = Новый ТаблицаЗначений;
				ТаблицаСтрокТЧ.Колонки.Добавить("Количество");
				ТаблицаСтрокТЧ.Колонки.Добавить("НовоеКоличество");
				ТаблицаСтрокТЧ.Колонки.Добавить("СтрокаТЧ");
				Для каждого СтрокаТЧ Из СтрокиПоискаТЧ Цикл
					НоваяСтрока = ТаблицаСтрокТЧ.Добавить();
					НоваяСтрока.Количество      = СтрокаТЧ.Количество;
					НоваяСтрока.НовоеКоличество = 0;
					НоваяСтрока.СтрокаТЧ        = СтрокаТЧ;
				КонецЦикла;
				НовоеКоличество = СтрокаТаблицы.Количество;
				Для каждого СтрокаТаблицы Из ТаблицаСтрокТЧ Цикл
					Если ТаблицаСтрокТЧ.Индекс(СтрокаТаблицы) = ТаблицаСтрокТЧ.Количество() - 1 Тогда
						СтрокаТаблицы.СтрокаТЧ.Количество = СтрокаТаблицы.СтрокаТЧ.Количество + (НовоеКоличество - ТаблицаСтрокТЧ.Итог("НовоеКоличество"));
					Иначе
						НовоеКоличествоСтроки = Окр((НовоеКоличество * ?(СтрокаТаблицы.Количество = 0, 0, (СтрокаТаблицы.Количество/ТаблицаСтрокТЧ.Итог("Количество")))), 3);
						СтрокаТаблицы.СтрокаТЧ.Количество = СтрокаТаблицы.СтрокаТЧ.Количество + НовоеКоличествоСтроки;
						СтрокаТаблицы.НовоеКоличество = НовоеКоличествоСтроки;
					КонецЕсли; 
					РассчитатьСуммуТабЧасти(СтрокаТаблицы.СтрокаТЧ, СтрокаОбъекта.Объект);
				КонецЦикла; 
			КонецЕсли; 
		Иначе
			ЕстьКорректировкиТоваров = Истина;
			СтрокиПоискаТЧ = СтрокаОбъекта.Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СтрокаТаблицы.Номенклатура, СтрокаТаблицы.ХарактеристикаНоменклатуры));
			Если СтрокиПоискаТЧ.Количество() = 0 Тогда
				Продолжить;
			ИначеЕсли СтрокиПоискаТЧ.Количество() = 1 Тогда
				СтрокиПоискаТЧ[0].Количество = СтрокиПоискаТЧ[0].Количество + СтрокаТаблицы.Количество;
				РассчитатьКоличествоМестТабЧасти(СтрокиПоискаТЧ[0], СтрокаОбъекта.Объект);
				РассчитатьСуммуТабЧасти(СтрокиПоискаТЧ[0], СтрокаОбъекта.Объект);
				РассчитатьСуммуНДСТабЧасти(СтрокиПоискаТЧ[0], СтрокаОбъекта.Объект);
			Иначе
				ТаблицаСтрокТЧ = Новый ТаблицаЗначений;
				ТаблицаСтрокТЧ.Колонки.Добавить("Количество");
				ТаблицаСтрокТЧ.Колонки.Добавить("НовоеКоличество");
				ТаблицаСтрокТЧ.Колонки.Добавить("СтрокаТЧ");
				Для каждого СтрокаТЧ Из СтрокиПоискаТЧ Цикл
					НоваяСтрока = ТаблицаСтрокТЧ.Добавить();
					НоваяСтрока.Количество      = СтрокаТЧ.Количество;
					НоваяСтрока.НовоеКоличество = 0;
					НоваяСтрока.СтрокаТЧ        = СтрокаТЧ;
				КонецЦикла;
				НовоеКоличество = СтрокаТаблицы.Количество;
				Для каждого СтрокаТаблицы Из ТаблицаСтрокТЧ Цикл
					Если ТаблицаСтрокТЧ.Индекс(СтрокаТаблицы) = ТаблицаСтрокТЧ.Количество() - 1 Тогда
						СтрокаТаблицы.СтрокаТЧ.Количество = СтрокаТаблицы.СтрокаТЧ.Количество + (НовоеКоличество - ТаблицаСтрокТЧ.Итог("НовоеКоличество"));
					Иначе
						НовоеКоличествоСтроки = Окр((НовоеКоличество * ?(СтрокаТаблицы.Количество = 0, 0, (СтрокаТаблицы.Количество/ТаблицаСтрокТЧ.Итог("Количество")))), 3);
						СтрокаТаблицы.СтрокаТЧ.Количество = СтрокаТаблицы.СтрокаТЧ.Количество + НовоеКоличествоСтроки;
						СтрокаТаблицы.НовоеКоличество = НовоеКоличествоСтроки;
					КонецЕсли; 
					РассчитатьКоличествоМестТабЧасти(СтрокаТаблицы.СтрокаТЧ, СтрокаОбъекта.Объект);
					РассчитатьСуммуТабЧасти(СтрокаТаблицы.СтрокаТЧ, СтрокаОбъекта.Объект);
					РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы.СтрокаТЧ, СтрокаОбъекта.Объект);
				КонецЦикла; 
			КонецЕсли; 
		КонецЕсли; 
	
	КонецЦикла; 
	
	ФормаЗаказа = СтрокаОбъекта.Объект.ПолучитьФорму(,ЭтаФорма);
	ФормаЗаказа.ФормаДляРегистрацииБезЗаписи = Истина;
	Если ЕстьКорректировкиТоваров Тогда
		ФормаЗаказа.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ФормаЗаказа.ЭлементыФормы.ОсновнаяПанель.Страницы.Товары;
		ФормаЗаказа.ТекущийЭлемент = ФормаЗаказа.ЭлементыФормы.Товары;
		Попытка
			ФормаЗаказа.ЭлементыФормы.Товары.ТекущаяКолонка = ФормаЗаказа.ЭлементыФормы.Товары.Колонки.Количество;
		Исключение
		КонецПопытки;
	Иначе
		ФормаЗаказа.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ФормаЗаказа.ЭлементыФормы.ОсновнаяПанель.Страницы.Тара;
		ФормаЗаказа.ТекущийЭлемент = ФормаЗаказа.ЭлементыФормы.ВозвратнаяТара;
		Попытка
			ФормаЗаказа.ЭлементыФормы.ВозвратнаяТара.ТекущаяКолонка = ФормаЗаказа.ЭлементыФормы.ВозвратнаяТара.Колонки.Количество;
		Исключение
		КонецПопытки;
	КонецЕсли; 
	ФормаЗаказа.УстанавливатьМодифицированность = Истина;
	ФормаЗаказа.ОткрытьМодально();
	
	Если НЕ СтрокаОбъекта.Объект.Ссылка.Пустая() Тогда
		Если (НЕ мМодифицированностьОбъектаПередАвтокорректировкой И НЕ мЗаписанОбъектАвтокорректировки)
		 ИЛИ СравнитьСтруктуруДанныхОбъектаИОбъект(СтрокаОбъекта.Объект.Ссылка, мСтруктураОбъектаАвтокорректировки) Тогда
			СтрокаОбъекта.Объект.Прочитать();
		Иначе
			ВосстановитьДанныеОбъектаИзСтруктуры(СтрокаОбъекта.Объект, мСтруктураОбъектаАвтокорректировки);
		КонецЕсли; 
	Иначе
		ВосстановитьДанныеОбъектаИзСтруктуры(СтрокаОбъекта.Объект, мСтруктураОбъектаАвтокорректировки);
	КонецЕсли; 
	
	Попытка
		СтрокаОбъекта.Объект.Заблокировать();
	Исключение
	КонецПопытки;
	
	мСтруктураОбъектаАвтокорректировки = Неопределено;
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельФормы.СоответствиеЗаказовПокупателейИПоставщикам.
//
Процедура КоманднаяПанельФормыСоответствиеЗаказовПокупателейИПоставщикам(Кнопка)
	
	СоответствиеЗаказовПокупателейИПоставщиков();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КнопкаНастройкаПериода.
//
Процедура КнопкаНастройкаПериодаНажатие(Элемент)

	Если НП.Редактировать() Тогда
		
		ДатаНачала = НП.ПолучитьДатуНачала();
		ДатаОкончания = НП.ПолучитьДатуОкончания();

	КонецЕсли;

КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельДеревоПодбора.ВсеЗаказы.
//
Процедура КоманднаяПанельДеревоПодбораВсеЗаказы(Кнопка)
	
	Если ЭтотОбъект.ПолучитьФорму("ФормаОтображенияЗаказовПоставщикам", ЭтаФорма).ОткрытьМодально() = Истина Тогда
	
		мФормаИндикации.Открыть();
		
		// Удалим удаленные строки
		ТаблицаНоменклатурыОбъектовКопия = ТаблицаНоменклатурыОбъектов.Скопировать();
		ТаблицаНоменклатурыОбъектовКопия.Свернуть("ИДОбъекта");
		Для каждого СтрокаТаблицыНоменклатурыОбъектовКопия Из ТаблицаНоменклатурыОбъектовКопия Цикл
			Если ТаблицаОбъектов.Найти(СтрокаТаблицыНоменклатурыОбъектовКопия.ИДОбъекта, "ИДОбъекта") = Неопределено Тогда
				НайденныеСтроки = ТаблицаНоменклатурыОбъектов.НайтиСтроки(Новый Структура("ИДОбъекта", СтрокаТаблицыНоменклатурыОбъектовКопия.ИДОбъекта));
				Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					ТаблицаНоменклатурыОбъектов.Удалить(НайденнаяСтрока);
				КонецЦикла; 
			КонецЕсли; 
		КонецЦикла; 
		
		Для каждого СтрокаОбъекта Из ТаблицаОбъектов Цикл
			ПереписатьЗначенияСтрок(СтрокаОбъекта);
		КонецЦикла; 
		
		ПересортироватьТабличнуюЧастьИЗаполнитьДерево(ДеревоПодбора, ЭлементыФормы.ДеревоПодбора, УровеньРазворотаДерева);
		
		Если мФормаИндикации.Открыта() Тогда
			мФормаИндикации.Закрыть();
		КонецЕсли; 
	
	КонецЕсли;
	
КонецПроцедуры

ДеревоПодбора.Колонки.Добавить("СуммаВзаиморасчетовЗаказа");
ДеревоПодбора.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику"));
ДеревоПодбора.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
ДеревоПодбора.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
ДеревоПодбора.Колонки.Добавить("ИДОбъекта");
ДеревоПодбора.Колонки.Добавить("Тара", Новый ОписаниеТипов("Булево"));

мСписокИсторииОтбора = Новый СписокЗначений;

мСтруктураОбъектаАвтокорректировки = Неопределено;
мМодифицированностьОбъектаПередАвтокорректировкой = Ложь;
мЗаписанОбъектАвтокорректировки = Ложь;