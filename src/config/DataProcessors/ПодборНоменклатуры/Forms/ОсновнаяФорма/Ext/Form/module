Перем мПустаяКартинка;
Перем мКартинкаНабор;
Перем мКартинкаНаборУдален;
Перем мСписокПометокНаборов;
Перем мТекущийЭлементФормы;
Перем мВремяПоследнегоПоиска;
Перем мВалютаРегламентированногоУчета;
Перем мСтруктураВидимостиКолонокПодбора;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает текущего родителя
//
// Параметры:
//  Родитель - ссылка, содержащая значение родителя
//
Процедура УстановитьТекущегоРодителя(Родитель)

	Если ЭлементыФормы.ПанельДерева.ТекущаяСтраница = ЭлементыФормы.ПанельДерева.Страницы.СИзображением Тогда
		ЭлементыФормы.ДеревоНоменклатурыСИзображением.ТекущаяСтрока = Родитель;
	Иначе
		ЭлементыФормы.ДеревоНоменклатуры.ТекущаяСтрока = Родитель;
	КонецЕсли;

КонецПроцедуры // УстановитьТекущегоРодителя()

// Функция получить текущего родителя
//
// Возвращаемое значение:
//	Ссылку на текущего родителя
//
Функция ПолучитьТекущегоРодителя() Экспорт

	Если ЭлементыФормы.ПанельДерева.ТекущаяСтраница = ЭлементыФормы.ПанельДерева.Страницы.СИзображением Тогда
		Возврат ЭлементыФормы.ДеревоНоменклатурыСИзображением.ТекущаяСтрока;
	Иначе
		Возврат ЭлементыФормы.ДеревоНоменклатуры.ТекущаяСтрока;
	КонецЕсли;

КонецФункции // ПолучитьТекущегоРодителя()

// Процедура сохранения видимости колонок подбора
//
Процедура СохранитьВидимостьКолонокПодбора()

	// Это первом обращении восстанавливаем значения
	Если мСтруктураВидимостиКолонокПодбора = Неопределено Тогда
		мСтруктураВидимостиКолонокПодбора = ВосстановитьЗначение("ВидимостьКолонокПриПодборе");
	КонецЕсли;

	Если ТипЗнч(мСтруктураВидимостиКолонокПодбора) <> Тип("Структура") Тогда
		мСтруктураВидимостиКолонокПодбора = Новый Структура;
	КонецЕсли;

	Для каждого Колонка Из ЭлементыФормы.НоменклатураДляПодбора.Колонки Цикл
		ИмяКолонки = Колонка.Имя;

		Если ИмяКолонки = "Пиктограмма"
		 ИЛИ ИмяКолонки = "ПредставлениеНоменклатура"
		 ИЛИ ИмяКолонки = "ПереходитьВверх"
		 ИЛИ ИмяКолонки = "ФлагУсловийПоставки"
		 ИЛИ НЕ Колонка.ИзменятьВидимость Тогда
			Продолжить;
		КонецЕсли;

		Если мСтруктураВидимостиКолонокПодбора.Свойство(ИмяКолонки) Тогда
			мСтруктураВидимостиКолонокПодбора[ИмяКолонки] = Колонка.Видимость;
		Иначе
			мСтруктураВидимостиКолонокПодбора.Вставить(ИмяКолонки, Колонка.Видимость);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // СохранитьВидимостьКолонокПодбора()

// Процедура обновить изображение
//
Процедура ОбновитьИзображение()

	Если ПодборПоСправочнику Тогда
		Если ЭлементыФормы.КоманднаяПанельИзображения.Кнопки.Изображение.Пометка Тогда
			Если ЭлементыФормы.СправочникНоменклатура.ТекущиеДанные <> Неопределено Тогда

				Номенклатура = ЭлементыФормы.СправочникНоменклатура.ТекущиеДанные.Ссылка;

				Если НЕ ЭлементыФормы.СправочникНоменклатура.ТекущиеДанные.ЭтоГруппа Тогда
					Если НЕ ЗначениеНеЗаполнено(Номенклатура.ОсновноеИзображение) Тогда
						ЭлементыФормы.ОсновноеИзображение.Картинка = Номенклатура.ОсновноеИзображение.Хранилище.Получить();
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			ЭлементыФормы.ОсновноеИзображение.Картинка = мПустаяКартинка;
		КонецЕсли;

	Иначе

		Если ЭлементыФормы.КоманднаяПанельИзображения.Кнопки.Изображение.Пометка Тогда
			Если ЭлементыФормы.НоменклатураДляПодбора.ТекущиеДанные <> Неопределено Тогда

				Номенклатура = ЭлементыФормы.НоменклатураДляПодбора.ТекущиеДанные.Номенклатура;

				Если НЕ ЭлементыФормы.НоменклатураДляПодбора.ТекущиеДанные.ЭтоГруппа Тогда
					Если НЕ ЗначениеНеЗаполнено(Номенклатура.ОсновноеИзображение) Тогда
						ЭлементыФормы.ОсновноеИзображение.Картинка = Номенклатура.ОсновноеИзображение.Хранилище.Получить();
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			ЭлементыФормы.ОсновноеИзображение.Картинка = мПустаяКартинка;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОбновитьИзображение()

// Процедура управляет видимостью, доступностью элементов диалога.
//
Процедура УправлениеДиалогом()

	Перем ЕстьЦена, ЕстьСерия, ЕстьКоличество;

	Если СтруктураИсходныхПараметров.Свойство("ЕстьЦена" , ЕстьЦена) Тогда
		ЭлементыФормы.ЗапрашиватьЦену.Доступность  = ЕстьЦена;
		ЗапрашиватьЦену  = ?(ЕстьЦена,  ЗапрашиватьЦену,  Ложь);
	Иначе
		ЭлементыФормы.ЗапрашиватьЦену.Доступность  = Ложь;
		ЗапрашиватьЦену  = Ложь;
	КонецЕсли;

	Если СтруктураИсходныхПараметров.Свойство("ЕстьСерия", ЕстьСерия) Тогда
		ЭлементыФормы.ЗапрашиватьСерию.Доступность = ЕстьСерия;
		ЗапрашиватьСерию = ?(ЕстьСерия, ЗапрашиватьСерию, Ложь);
	Иначе
		ЭлементыФормы.ЗапрашиватьСерию.Доступность = Ложь;
		ЗапрашиватьСерию = Ложь;
	КонецЕсли;

	Если СтруктураИсходныхПараметров.Свойство("ЕстьКоличество", ЕстьКоличество) Тогда
		ЭлементыФормы.ЗапрашиватьКоличество.Доступность = ЕстьКоличество;
		ЗапрашиватьКоличество = ?(ЕстьКоличество, ЗапрашиватьКоличество, Ложь);
	Иначе

		// по умолчанию если параметр не передан, то флаг запроса количесва доступен,
		// а выставлен он или нет регулируется в процедуре ПриОткрытии()
		ЭлементыФормы.ЗапрашиватьКоличество.Доступность = Истина;
	КонецЕсли;

	ЭлементыФормы.НадписьДатаРасчетов.Видимость  = Не ЗначениеНеЗаполнено(ДатаРасчетов);
	ЭлементыФормы.ДатаРасчетов.Видимость         = Не ЗначениеНеЗаполнено(ДатаРасчетов);

КонецПроцедуры // УправлениеДиалогом()

// Процедура выполняет поиск номенклатуры по заданным критериям.
//
Процедура ВыполнитьПоиск()

	Если мВремяПоследнегоПоиска = ТекущаяДата() Тогда

		// Искать не надо, вероятно после изменения текста в окне поиска пользователь нажал на
		// кнопку открытия.

		Возврат;

	КонецЕсли;

	// Надо добавить шаблон в историю
	ЭлементИстории = ЭлементыФормы.ПолеПоиска.СписокВыбора.НайтиПоЗначению(ПолеПоиска);
	Если ЭлементИстории = Неопределено Тогда

		// Надо добавить
		ЭлементыФормы.ПолеПоиска.СписокВыбора.Вставить(0, ПолеПоиска);
	Иначе

		// Надо переместить в начало истории
		ИндексЭлементаИстории = ЭлементыФормы.ПолеПоиска.СписокВыбора.Индекс(ЭлементИстории);
		ЭлементыФормы.ПолеПоиска.СписокВыбора.Сдвинуть(ЭлементИстории, - ИндексЭлементаИстории);
	КонецЕсли;

	ШаблонПоиска = СокрЛП(ПолеПоиска);
	Если ЗначениеНеЗаполнено(ШаблонПоиска) Тогда
		Возврат;
	КонецЕсли;

	// заменим спецсимволы
	ШаблонПоиска = СтрЗаменить(ШаблонПоиска, "~", "~~");
	ШаблонПоиска = СтрЗаменить(ШаблонПоиска, "%", "~%");
	ШаблонПоиска = СтрЗаменить(ШаблонПоиска, "_", "~_");
	ШаблонПоиска = СтрЗаменить(ШаблонПоиска, "[", "~[");
	ШаблонПоиска = СтрЗаменить(ШаблонПоиска, "-", "~-");
	ШаблонПоиска = "%" + ШаблонПоиска + "%";

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ШаблонПоиска", ШаблонПоиска);

	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 51
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	Номенклатура.Родитель КАК Родитель
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|
	|ГДЕ
	|	Номенклатура." + ЭлементыФормы.СписокВидовПоиска.Значение + " ПОДОБНО &ШаблонПоиска СПЕЦСИМВОЛ ""~""
	|	И Номенклатура.ЭтоГруппа = Ложь
	|";

	ВыбраннаяНоменклатура = Неопределено;
	Родитель = Неопределено;

	ФормаВыбораПоиска = ПолучитьФорму("ФормаВыбораПоиска", ЭтаФорма);
	ФормаВыбораПоиска.ТаблицаНоменклатуры = Запрос.Выполнить().Выгрузить();

	ВыбраннаяНоменклатура = Неопределено;
	Если ФормаВыбораПоиска.ТаблицаНоменклатуры.Количество() = 0 Тогда
		Предупреждение("Отсутствует номенклатура с заданными критериями поиска!");
		мТекущийЭлементФормы = ЭлементыФормы.ПолеПоиска;
		Возврат;
	ИначеЕсли ФормаВыбораПоиска.ТаблицаНоменклатуры.Количество() = 1 Тогда
		ВыбраннаяНоменклатура = ФормаВыбораПоиска.ТаблицаНоменклатуры[0].Номенклатура;
		Родитель              = ФормаВыбораПоиска.ТаблицаНоменклатуры[0].Родитель;
	Иначе
		Если ФормаВыбораПоиска.ТаблицаНоменклатуры.Количество() = 51 Тогда
			Предупреждение("По заданным критериям поиска найдено более 50 элементов номенклатуры!
							|Будут показаны первые 50.");
			ФормаВыбораПоиска.ТаблицаНоменклатуры.Удалить(50);
		КонецЕсли;

		СтруктураПараметров = ФормаВыбораПоиска.ОткрытьМодально();

		Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
			СтруктураПараметров.Свойство("ВыбраннаяНоменклатура", ВыбраннаяНоменклатура);
			СтруктураПараметров.Свойство("Родитель"             , Родитель);
		Иначе
			мТекущийЭлементФормы = ЭлементыФормы.ПолеПоиска;
			Возврат; // форма закрыта не по кнопке "ОК"
		КонецЕсли;

		Если ВыбраннаяНоменклатура = Неопределено Тогда
			мТекущийЭлементФормы = ЭлементыФормы.ПолеПоиска;
			Возврат;
		КонецЕсли;
	КонецЕсли;

	СтруктураЗапроса = ЭлементыФормы.СписокВидовПодбора.Значение;
	УстановитьТекущегоРодителя(Родитель);
	ПерезаполнитьТаблицуНоменклатуры(Родитель, СтруктураЗапроса);

	Если ПодборПоСправочнику Тогда
		ЭлементыФормы.СправочникНоменклатура.ТекущаяСтрока = ВыбраннаяНоменклатура;
		мТекущийЭлементФормы = ЭлементыФормы.СправочникНоменклатура;
	Иначе
		СтрокаНоменклатуры = НоменклатураДляПодбора.Найти(ВыбраннаяНоменклатура, "Номенклатура");
		Если СтрокаНоменклатуры = Неопределено Тогда
			Предупреждение("Найденная номенклатура отсутствует в подборе при заданных услових!");
			мТекущийЭлементФормы = ЭлементыФормы.ПолеПоиска;
			Возврат;
		Иначе
			ЭлементыФормы.НоменклатураДляПодбора.ТекущаяСтрока = СтрокаНоменклатуры;
		КонецЕсли;
		мТекущийЭлементФормы = ЭлементыФормы.НоменклатураДляПодбора;
	КонецЕсли;

	мВремяПоследнегоПоиска = ТекущаяДата();

КонецПроцедуры // ВыполнитьПоиск()

// Процедура устанавливает отвор по номенклатурной группе.
//
Процедура УстановитьОтборПоНоменклатурнойГруппе()

	ЕстьНоменклатурнаяГруппа = НЕ ЗначениеНеЗаполнено(НоменклатурнаяГруппа);

	Если ПодборПоСправочнику Тогда
		ЭлементОтбора               = ЭлементыФормы.СправочникНоменклатура.Значение.Отбор.НоменклатурнаяГруппа;
		ЭлементОтбора.Значение      = НоменклатурнаяГруппа;
		ЭлементОтбора.Использование = ЕстьНоменклатурнаяГруппа;
	Иначе
		СписокОтбора = Новый СписокЗначений;
		СписокОтбора.Добавить("Группа");
		СписокОтбора.Добавить(?(ЕстьНоменклатурнаяГруппа, НоменклатурнаяГруппа.Наименование, ""));

		ЭлементОтбора               = ЭлементыФормы.НоменклатураДляПодбора.ОтборСтрок.ПредставлениеНоменклатурнаяГруппа;
		ЭлементОтбора.ВидСравнения  = ВидСравнения.ВСписке;
		ЭлементОтбора.Значение      = СписокОтбора;
		ЭлементОтбора.Использование = ЕстьНоменклатурнаяГруппа;
	КонецЕсли;

КонецПроцедуры

// Процедура формирует и выводит текст в информационной надписи о параметрах подбора.
//
// Параметры:
//  СтруктураЗапроса - структура, содержащая параметры и текст запроса
//
Процедура ОбновитьИнформационнуюНадписьПараметрыПодбора(СтруктураЗапроса) Экспорт

	Перем ВременнаяСтрока;
	Перем СтруктураПараметров;

	Если Не ЗначениеНеЗаполнено(СтруктураЗапроса) Тогда
	
		ВременнаяСтрока = "";
		
		НайденныйЭлементСпискаВыбора = ЭлементыФормы.СписокВидовПодбора.СписокВыбора.НайтиПоЗначению(ЭлементыФормы.СписокВидовПодбора.Значение);
		Если НайденныйЭлементСпискаВыбора <> Неопределено Тогда
			ВременнаяСтрока = ВременнаяСтрока + НайденныйЭлементСпискаВыбора.Представление + "; ";
		КонецЕсли;
		
		СписокПараметровЗапроса = ПолучитьСписокПараметровЗапроса(ЭлементыФормы.СписокВидовПодбора.Значение);
		Для каждого ЭлементСписка Из СписокПараметровЗапроса Цикл
			Если НЕ ЗначениеНеЗаполнено(СтруктураИсходныхПараметров[ЭлементСписка.Значение]) Тогда
				ВременнаяСтрока = ВременнаяСтрока + СтруктураИсходныхПараметров[ЭлементСписка.Значение] + "; ";
			КонецЕсли; 
		КонецЦикла; 
		
		ВременнаяСтрока = Врег(Лев(ВременнаяСтрока, 1)) + Сред(ВременнаяСтрока, 2);
		ВременнаяСтрока = Лев(ВременнаяСтрока, СтрДлина(ВременнаяСтрока) - 2);

	КонецЕсли;

	ЭлементыФормы.ИнфНадписьПараметрыПодбора.Заголовок = ВременнаяСтрока;

КонецПроцедуры // ОбновитьИнформационнуюНадписьПараметрыПодбора()

// Перезаполняет таблицу номенклатуры по запросу по переданному родителю.
//
// Параметры: 
//  Родитель         - Справочник.Номенклатура (группа), таблица номенклатуры
//                     заполняется только подчиненными этой группе элементами,
//  СтруктураЗапроса - структура, содержащая параметры и текст запроса
//
Процедура ПерезаполнитьТаблицуНоменклатуры(Родитель, СтруктураЗапроса) Экспорт

	Перем СтруктураПараметров;
	Перем Номенклатура;

	Если ПодборПоСправочнику Тогда
		ЭлементыФормы.СправочникНоменклатура.ТекущийРодитель = ?(Родитель.ЭтоГруппа, Родитель, Неопределено);
		УстановитьОтборПоНоменклатурнойГруппе();
		Возврат;
	КонецЕсли;

	Запрос = ПолучитьЗапросДляПодбора(ЭлементыФормы.СписокВидовПодбора.Значение, Родитель, ДатаРасчетов);
	
	Если Запрос = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();

	// Скроем колонки, которых нет в результате запроса.
	// Колонки скрытые польльзователем тоже не будем показывать
	СохранитьВидимостьКолонокПодбора();
	Для Каждого Колонка Из ЭлементыФормы.НоменклатураДляПодбора.Колонки Цикл
		ИмяКолонки = Колонка.Имя;

		Если ИмяКолонки = "Пиктограмма"
		 ИЛИ ИмяКолонки = "ПредставлениеНоменклатура" Тогда

			Колонка.ИзменятьВидимость = Ложь;
			Колонка.Видимость         = Истина;

		ИначеЕсли ИмяКолонки = "ПереходитьВверх"
		      ИЛИ ИмяКолонки = "ФлагУсловийПоставки" Тогда

			Колонка.ИзменятьВидимость = Ложь;
			Колонка.Видимость         = Ложь;

		Иначе

			ЕстьКолонка      = (НЕ РезультатЗапроса.Колонки.Найти(ИмяКолонки) = Неопределено);
			ПризнакВидимости = Неопределено;

			Если ЕстьКолонка Тогда
				Если мСтруктураВидимостиКолонокПодбора.Свойство(ИмяКолонки, ПризнакВидимости) Тогда
					ПризнакВидимости         = ПризнакВидимости;
					ПризнакИзменятьВидимость = Истина;
					ПризнакДоступностиОтбора = Истина;
				Иначе
					ПризнакВидимости         = Истина;
					ПризнакИзменятьВидимость = Истина;
					ПризнакДоступностиОтбора = Истина;
				КонецЕсли;
			Иначе
				ПризнакВидимости         = Ложь;
				ПризнакИзменятьВидимость = Ложь;
				ПризнакДоступностиОтбора = Ложь;
			КонецЕсли;

			Колонка.ИзменятьВидимость = ПризнакИзменятьВидимость;
			Колонка.Видимость         = ПризнакВидимости;
			ЭлементыФормы.НоменклатураДляПодбора.НастройкаОтбораСтрок[ИмяКолонки].Доступность = ПризнакДоступностиОтбора;

		КонецЕсли;
	КонецЦикла;

	// Управление видимостью колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	КолонкиПодбора = ЭлементыФормы.НоменклатураДляПодбора.Колонки;
	УстновитьВидимостьКолонок(КолонкиПодбора, Новый Структура("ПредставлениеХарактеристикаНоменклатуры"), мИспользоватьХарактеристики);
	УстновитьВидимостьКолонок(КолонкиПодбора, Новый Структура("ПредставлениеСерияНоменклатуры"),          мИспользоватьСерии);
	ЭлементыФормы.НоменклатураДляПодбора.НастройкаОтбораСтрок.ПредставлениеХарактеристикаНоменклатуры.Доступность = мИспользоватьХарактеристики;
	ЭлементыФормы.НоменклатураДляПодбора.НастройкаОтбораСтрок.ПредставлениеСерияНоменклатуры.Доступность          = мИспользоватьСерии;

	// Заполним табличную часть НоменклатураДляПодбора.
	НоменклатураДляПодбора.Загрузить(РезультатЗапроса.Выгрузить());

	ПлановыйТипЦен = Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();
	Если (СтруктураИсходныхПараметров.Свойство("ТипЦен") И ТипЗнч(СтруктураИсходныхПараметров.ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") И СтруктураИсходныхПараметров.ТипЦен.Рассчитывается)
	 ИЛИ (ЭлементыФормы.СписокВидовПодбора.Значение = "РасходЦеныПлановойСебестоимостиНоменклатуры" И НЕ ЗначениеНеЗаполнено(ПлановыйТипЦен) И ПлановыйТипЦен.Рассчитывается) Тогда

		РассчитыватьЦену = Истина;
		Если ЭлементыФормы.СписокВидовПодбора.Значение = "РасходЦеныПлановойСебестоимостиНоменклатуры" Тогда
			РассчетныйТипЦен = ПлановыйТипЦен;
		Иначе
			РассчетныйТипЦен = СтруктураИсходныхПараметров.ТипЦен;
		КонецЕсли;
	Иначе
		РассчитыватьЦену = Ложь;
	КонецЕсли;

	Если РассчитыватьЦену И ЭлементыФормы.СписокВидовПодбора.Значение <> "ОстаткиНеавтоматизированнаяТорговаяТочка" Тогда
		Для Каждого СтрокаТабличнойЧасти Из НоменклатураДляПодбора Цикл

			Если НЕ СтрокаТабличнойЧасти.ЭтоГруппа Тогда
				СтрокаТабличнойЧасти.Цена = ОкруглитьЦену(СтрокаТабличнойЧасти.Цена * 
				                            (100 + РассчетныйТипЦен.ПроцентСкидкиНаценки) / 100,
				                            РассчетныйТипЦен.ПорядокОкругления,
				                            РассчетныйТипЦен.ОкруглятьВБольшуюСторону);
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

	// Заполним групы для перехода на предыдущий уровень.
	ТекГруппа = Родитель;
	Пока ТекГруппа <> Справочники.Номенклатура.ПустаяСсылка() Цикл

		НоваяСтрока  = НоменклатураДляПодбора.Вставить(0);
		Номенклатура = ТекГруппа;

		НоваяСтрока.Код                               = Номенклатура.Код;
		НоваяСтрока.Номенклатура                      = Номенклатура;
		НоваяСтрока.ПредставлениеНоменклатура         = Номенклатура.Наименование;
		НоваяСтрока.ПредставлениеНоменклатурнаяГруппа = "Группа";
		НоваяСтрока.ПереходитьВверх                   = Истина;
		НоваяСтрока.ЭтоГруппа                         = Истина;

		ТекГруппа = ТекГруппа.Родитель;
	КонецЦикла;

	УстановитьОтборПоНоменклатурнойГруппе();

КонецПроцедуры // ПерезаполнитьТаблицуНоменклатуры()

// Показывает соответствующее выбранному виду подбора табличное поле
// и перезаполняет таблицу номенклатуры.
//  Если значение элемента списка "СписокВидовПодбора" не заполнено, то
// делает видимым табличное поле "СправочникНоменклатура", а если - заполнено,
// то - "НоменклатураДляПодбора".
//
// Параметры:
//  СтруктураЗапроса - структура, содержащая параметры и текст запроса
//
Процедура ПриИзмененииВидаПодбора(СтруктураЗапроса)

	Перем Команда;

	мИмяРегистраДляПодбораСерий = "";

	ПодборПоСправочнику = ЗначениеНеЗаполнено(СтруктураЗапроса);
	
	СтруктураИсходныхПараметров.Свойство("Команда", Команда);

	Если мИспользоватьХарактеристики Тогда
		Если Команда = "ПодборВТабличнуюЧастьУслуги"
		 ИЛИ Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
			Если ЭлементыФормы.ЗапрашиватьХарактеристику.Доступность Тогда
				СохранитьЗначение("ЗапрашиватьХарактеристикуПриПодборе", ЗапрашиватьХарактеристику);
			КонецЕсли;

			ЭлементыФормы.ЗапрашиватьХарактеристику.Доступность = Ложь;
			ЗапрашиватьХарактеристику                           = Ложь;
		Иначе
			ЭлементыФормы.ЗапрашиватьХарактеристику.Доступность = Истина;
			ЗапрашиватьХарактеристику                           = ВосстановитьЗначение("ЗапрашиватьХарактеристикуПриПодборе");
		КонецЕсли;
	КонецЕсли;

	ЭлементыФормы.КоманднаяПанельНоменклатураДляПодбора.Видимость = ПодборПоСправочнику;
	ЭлементыФормы.ИнфНадписьПараметрыПодбора.Видимость = Не ПодборПоСправочнику;
	ЭлементыФормы.КнопкаОбновить.Видимость             = Не ПодборПоСправочнику;
	ЭлементыФормы.НадписьДатаРасчетов.Видимость        = Не (ПодборПоСправочнику или ЗначениеНеЗаполнено(ДатаРасчетов));
	ЭлементыФормы.ДатаРасчетов.Видимость               = Не (ПодборПоСправочнику или ЗначениеНеЗаполнено(ДатаРасчетов));

	Если ПодборПоСправочнику Тогда
		ЭлементыФормы.ПанельНоменклатураДляПодбора.ТекущаяСтраница = ЭлементыФормы.ПанельНоменклатураДляПодбора.Страницы["ПоСправочнику"];
	Иначе
		ЭлементыФормы.ПанельНоменклатураДляПодбора.ТекущаяСтраница = ЭлементыФормы.ПанельНоменклатураДляПодбора.Страницы["ПоЗапросу"];
	КонецЕсли;

	// Заполним таблицу номенклатуры текущего родителя.
	Родитель = ПолучитьТекущегоРодителя();
	Родитель = ?(ЗначениеНеЗаполнено(Родитель), Справочники.Номенклатура.ПустаяСсылка(), Родитель);

	ПерезаполнитьТаблицуНоменклатуры(Родитель, СтруктураЗапроса);
	ОбновитьИнформационнуюНадписьПараметрыПодбора(СтруктураЗапроса);

КонецПроцедуры // ПриИзмененииВидаПодбора()

// Процедура выполняет стандартные действия при открытии формы.
//  Вызывается при открытии, при повторном открытии 
//
Процедура ДействияПриОткрытии()

	Перем Команда;

	Если СтруктураИсходныхПараметров.Свойство("ДатаРасчетов") Тогда
		ДатаРасчетов = СтруктураИсходныхПараметров.ДатаРасчетов;
	Иначе
		ДатаРасчетов = ТекущаяДата();
	КонецЕсли; 
	ЭлементыФормы.СписокВидовПодбора.СписокВыбора = СтруктураИсходныхПараметров.СписокВидовПодбора;

	СписокВидовПоиска = Новый СписокЗначений;
	СписокВидовПоиска.Добавить("Наименование",       "наименованию");
	СписокВидовПоиска.Добавить("НаименованиеПолное", "полному наименованию");
	СписокВидовПоиска.Добавить("Код",                "коду");
	СписокВидовПоиска.Добавить("Артикул",            "артикулу");
	ЭлементыФормы.СписокВидовПоиска.СписокВыбора = СписокВидовПоиска;

	УправлениеДиалогом(); // если цен в подборе нет, скроем колонки, относящиеся к ценам
	ПроверитьВидимостьКартинки();
	
	// Восстановим значение варианта подбора.
	// Считаем, что подобр зовется только из форм документов
	Если ВладелецФормы.Заголовок = "Подбор номенклатуры в Регистр сведений ""Номенклатура контрагентов"" " тогда
		НомерВидаПодбора = Неопределено;
		НомерВидаПоиска = Неопределено;
	иначе
		НомерВидаПодбора = ВосстановитьЗначение(СокрЛП(ВладелецФормы.ЭтотОбъект.Метаданные().Имя) 
	                                        + СокрЛП(СтруктураИсходныхПараметров.Команда) + "НомерВидаПодбора");

		// Восстановим значение варианта поиска.
		// Считаем, что подбор зовется только из форм документов
		НомерВидаПоиска = ВосстановитьЗначение(СокрЛП(ВладелецФормы.ЭтотОбъект.Метаданные().Имя) 
	                                       + СокрЛП(Команда) + "НомерВидаПоиска");
    КонецЕсли;//+++)
											
		// Если не удалось восстановить, то инициализируем список видов подбора первым значением из списка.
		ЭлементыФормы.СписокВидовПодбора.Значение = ?(НомерВидаПодбора = Неопределено
	                                              Или НомерВидаПодбора >= СтруктураИсходныхПараметров.СписокВидовПодбора.Количество(), 
	                                              СтруктураИсходныхПараметров.СписокВидовПодбора[0].Значение,
	                                              СтруктураИсходныхПараметров.СписокВидовПодбора[НомерВидаПодбора].Значение);

		// Если не удалось восстановить, то инициализируем список видов поиска первым значением из списка.
	ЭлементыФормы.СписокВидовПоиска.Значение = ?(НомерВидаПоиска = Неопределено
	                                             Или НомерВидаПоиска >= ЭлементыФормы.СписокВидовПоиска.СписокВыбора.Количество(),
	                                             ЭлементыФормы.СписокВидовПоиска.СписокВыбора[0].Значение,
	                                             ЭлементыФормы.СписокВидовПоиска.СписокВыбора[НомерВидаПоиска].Значение);

	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПродажаАвтозапчастей") Тогда
	ЭлементыФормы.ДеревоНоменклатуры.РодительВерхнегоУровня=Справочники.Номенклатура.Автозапчасти.Ссылка;
	ЭлементыФормы.СправочникНоменклатура.РодительВерхнегоУровня=Справочники.Номенклатура.Автозапчасти.Ссылка;
	КонецЕсли;
											 
	// Покажем соответствующее табличное поле и заполним таблицу номенклатуры текущего родителя.
	ПриИзмененииВидаПодбора(ЭлементыФормы.СписокВидовПодбора.Значение);

	ЭтаФорма.Заголовок = СтруктураИсходныхПараметров.Заголовок;

КонецПроцедуры // ДействияПриОткрытии()

// В зависимости от состояния кнопки Изображение устанавливает соответсвующую страницу панели дерева
//
Процедура ПроверитьВидимостьКартинки()

	Если ЭлементыФормы.КоманднаяПанельИзображения.Кнопки.Изображение.Пометка Тогда
		Если ЭлементыФормы.ПанельДерева.ТекущаяСтраница <> ЭлементыФормы.ПанельДерева.Страницы[1] Тогда
			ЭлементыФормы.ПанельДерева.ТекущаяСтраница = ЭлементыФормы.ПанельДерева.Страницы[1];
		КонецЕсли;

		ОбновитьИзображение();

	Иначе
		Если ЭлементыФормы.ПанельДерева.ТекущаяСтраница <> ЭлементыФормы.ПанельДерева.Страницы[0] Тогда
			ЭлементыФормы.ПанельДерева.ТекущаяСтраница = ЭлементыФормы.ПанельДерева.Страницы[0];
		КонецЕсли;

		ЭлементыФормы.ОсновноеИзображение.Картинка = мПустаяКартинка;

	КонецЕсли;

КонецПроцедуры // ПроверитьВидимостьКартинки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// Проверим тип реквизита формы СтруктураПараметровФормы. Должен быть "Структура".
	// При неверном типе не будем запускать подбор.
	Если ТипЗнч(СтруктураИсходныхПараметров) <> Тип("Структура") Тогда
		
		Отказ = Истина;
		Предупреждение("Не верный тип параметра ""СтруктураПараметровФормы""!
		               |Данная обработка вызывается из других процедур конфигурации.
		               |Вручную ее вызывать запрещено."); 
		Возврат;

	КонецЕсли;
	
	РежимВыбора        = Истина;
	ЗакрыватьПриВыборе = Ложь;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	ЭлементыФормы.ПанельНоменклатураДляПодбора.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
	ЭлементыФормы.ЗапрашиватьХарактеристику.Видимость              = мИспользоватьХарактеристики;
	ЭлементыФормы.ЗапрашиватьСерию.Видимость                       = мИспользоватьСерии;

	// Восстановим значения что надо запрашивать при подборе.
	// Это надо сделать до управления диалогом.
	ЗапрашиватьЦену       = ВосстановитьЗначение("ЗапрашиватьЦенуПриПодборе");
	ЗапрашиватьКоличество = ВосстановитьЗначение("ЗапрашиватьКоличествоПриПодборе");
	ПоказыватьИзображение = ВосстановитьЗначение("ПоказыватьИзображениеПриПодборе");

	Если мИспользоватьХарактеристики Тогда
		ЗапрашиватьХарактеристику = ВосстановитьЗначение("ЗапрашиватьХарактеристикуПриПодборе");
	КонецЕсли;

	Если мИспользоватьСерии Тогда
		ЗапрашиватьСерию          = ВосстановитьЗначение("ЗапрашиватьСериюПриПодборе");
	КонецЕсли;

	Если ПоказыватьИзображение <> Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельИзображения.Кнопки.Изображение.Пометка = ПоказыватьИзображение;
	КонецЕсли;

	ДействияПриОткрытии();

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриПовторномОткрытии" формы.
//
Процедура ПриПовторномОткрытии()

	ДействияПриОткрытии();

КонецПроцедуры // ПриПовторномОткрытии()

Процедура ВнешнееСобытие(Источник, Событие, Данные)
	Перем ТаблицаТоваров;

	Если Не(ВводДоступен()) Тогда
		Возврат;
	КонецЕсли;

	Если глТорговоеОборудование <> Неопределено Тогда
		Если Событие = "BarCodeValue" Тогда
			Если глТорговоеОборудование.ПолучитьТоварПоШтрихкоду(Данные, ТаблицаТоваров) Тогда
				ТаблицаТоваров.Свернуть("Номенклатура,Штрихкод");
				Если ТаблицаТоваров.Количество() = 1 Тогда
					ВыбраннаяНоменклатура = ТаблицаТоваров[0].Номенклатура;
					Если ПодборПоСправочнику Тогда
						ЭлементыФормы.СправочникНоменклатура.ТекущаяСтрока = ВыбраннаяНоменклатура;
						мТекущийЭлементФормы = ЭлементыФормы.СправочникНоменклатура;
					Иначе
						СтрокаНоменклатуры = НоменклатураДляПодбора.Найти(ВыбраннаяНоменклатура, "Номенклатура");
						Если СтрокаНоменклатуры = Неопределено Тогда
							Предупреждение("Найденная номенклатура отсутствует в подборе при заданных услових!");
							мТекущийЭлементФормы = ЭлементыФормы.ПолеПоиска;
							Возврат;
						Иначе
							ЭлементыФормы.НоменклатураДляПодбора.ТекущаяСтрока = СтрокаНоменклатуры;
						КонецЕсли;
						мТекущийЭлементФормы = ЭлементыФормы.НоменклатураДляПодбора;
					КонецЕсли;
					//ОткрытьЗначение(ТаблицаТоваров[0].Номенклатура);
				ИначеЕсли ТаблицаТоваров.Количество() > 1 Тогда
					СтрокаНоменклатуры = ТаблицаТоваров.ВыбратьСтроку("Выберите из найденных по штрихкоду.");
					Если СтрокаНоменклатуры<>Неопределено Тогда
						ВыбраннаяНоменклатура = СтрокаНоменклатуры.Номенклатура;
						Если ПодборПоСправочнику Тогда
							ЭлементыФормы.СправочникНоменклатура.ТекущаяСтрока = ВыбраннаяНоменклатура;
							мТекущийЭлементФормы = ЭлементыФормы.СправочникНоменклатура;
						Иначе
							СтрокаНоменклатуры = НоменклатураДляПодбора.Найти(ВыбраннаяНоменклатура, "Номенклатура");
							Если СтрокаНоменклатуры = Неопределено Тогда
								Предупреждение("Найденная номенклатура отсутствует в подборе при заданных услових!");
								мТекущийЭлементФормы = ЭлементыФормы.ПолеПоиска;
								Возврат;
							Иначе
								ЭлементыФормы.НоменклатураДляПодбора.ТекущаяСтрока = СтрокаНоменклатуры;
							КонецЕсли;
							мТекущийЭлементФормы = ЭлементыФормы.НоменклатураДляПодбора;
						КонецЕсли;
						//ОткрытьЗначение(СтрокаНоменклатуры.Номенклатура);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			глТорговоеОборудование.СканерПосылкаДанных(1);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	Перем Команда;

	// Сохраним значения что надо запрашивать при подборе.
	// Это надо сделать если могли их менять.
	Если ЭлементыФормы.ЗапрашиватьЦену.Доступность Тогда
		СохранитьЗначение("ЗапрашиватьЦенуПриПодборе", ЗапрашиватьЦену);
	КонецЕсли;

	Если ЭлементыФормы.ЗапрашиватьКоличество.Доступность Тогда
		СохранитьЗначение("ЗапрашиватьКоличествоПриПодборе", ЗапрашиватьКоличество);
	КонецЕсли;

	Если мИспользоватьСерии
	   И ЭлементыФормы.ЗапрашиватьСерию.Доступность Тогда
		СохранитьЗначение("ЗапрашиватьСериюПриПодборе", ЗапрашиватьСерию);
	КонецЕсли;

	Если мИспользоватьХарактеристики
	   И ЭлементыФормы.ЗапрашиватьХарактеристику.Доступность Тогда
		СохранитьЗначение("ЗапрашиватьХарактеристикуПриПодборе", ЗапрашиватьХарактеристику);
	КонецЕсли;

	// Сохраним пометку показа изображения.
	СохранитьЗначение("ПоказыватьИзображениеПриПодборе", ЭлементыФормы.КоманднаяПанельИзображения.Кнопки.Изображение.Пометка);

	// Сохраним номер текущего вида подбора.
	СтруктураИсходныхПараметров.Свойство("Команда", Команда);
	ЭлементФормы     = ЭлементыФормы.СписокВидовПодбора;
	Если ВладелецФормы.Заголовок <> "Подбор номенклатуры в Регистр сведений ""Номенклатура контрагентов"" " тогда //+++
	НомерВидаПодбора = ЭлементФормы.СписокВыбора.Индекс(
	                   ЭлементФормы.СписокВыбора.НайтиПоЗначению(ЭлементФормы.Значение));
	СохранитьЗначение(СокрЛП(ВладелецФормы.ЭтотОбъект.Метаданные().Имя) 
	                  + СокрЛП(Команда) + "НомерВидаПодбора", НомерВидаПодбора);

	// Сохраним номер текущего вида поиска.
	ЭлементФормы    = ЭлементыФормы.СписокВидовПоиска;
	НомерВидаПоиска = ЭлементФормы.СписокВыбора.Индекс(
	                  ЭлементФормы.СписокВыбора.НайтиПоЗначению(ЭлементФормы.Значение));
	СохранитьЗначение(СокрЛП(ВладелецФормы.ЭтотОбъект.Метаданные().Имя) 
	                  + СокрЛП(Команда) + "НомерВидаПоиска", НомерВидаПоиска);
    КонецЕсли;
	// Сохраним структуру видимости колонок таблицы подбора.
	СохранитьЗначение("ВидимостьКолонокПриПодборе", мСтруктураВидимостиКолонокПодбора);

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()
	Если мТекущийЭлементФормы <> Неопределено Тогда
		ТекущийЭлемент = мТекущийЭлементФормы;
		мТекущийЭлементФормы = Неопределено;
	КонецЕсли;
КонецПроцедуры // ОбновлениеОтображения()

// Обработчик события ОбработкаОповещения формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ЗаписанЭлементНоменклатуры" Тогда

		ОбновитьИзображение();

	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ, ВЫЗЫВАЕМЫЕ ИЗ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "Очистка" поля выбора списка видов подбора.
//
Процедура СписокВидовПодбораОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; // Не будем давать очищать значение.
	
КонецПроцедуры // СписокВидовПодбораОчистка()

// Процедура - обработчик события "ПриИзменении" поля выбора списка видов поиска.
//
Процедура СписокВидовПоискаПриИзменении(Элемент)

	Если ЗначениеНеЗаполнено(ЭлементыФормы.СписокВидовПоиска.Значение) Тогда
		ЭлементыФормы.СписокВидовПоиска.Значение = ЭлементыФормы.СписокВидовПоиска.СписокВыбора[0].Значение;
	КонецЕсли;

	ВыполнитьПоиск();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода шаблона поиска.
//
Процедура ПолеПоискаПриИзменении(Элемент)

	ВыполнитьПоиск();

КонецПроцедуры // ПолеПоискаПриИзменении()

// Процедура - обработчик события "Открытие" поля ввода шаблона поиска.
//
Процедура ПолеПоискаОткрытие(Элемент, СтандартнаяОбработка)

	ВыполнитьПоиск();

КонецПроцедуры // ПолеПоискаОткрытие()

// Процедура - обработчик события "Нажатие" кнопки "Обновить".
//
Процедура КнопкаОбновитьНажатие(Элемент)

	Родитель         = ПолучитьТекущегоРодителя();
	СтруктураЗапроса = ЭлементыФормы.СписокВидовПодбора.Значение;
	ПерезаполнитьТаблицуНоменклатуры(Родитель, СтруктураЗапроса);

КонецПроцедуры // КнопкаОбновитьНажатие()

// Процедура - обработчик события "ПриИзменении" поля ввода даты расчетов.
//
Процедура ДатаРасчетовПриИзменении(Элемент)

	Если ЗначениеНеЗаполнено(ДатаРасчетов) Тогда
		СтруктураИсходныхПараметров.Свойство("ДатаРасчетов", ДатаРасчетов);
	КонецЕсли;

	Родитель         = ПолучитьТекущегоРодителя();
	СтруктураЗапроса = ЭлементыФормы.СписокВидовПодбора.Значение;
	ПерезаполнитьТаблицуНоменклатуры(Родитель, СтруктураЗапроса);

КонецПроцедуры // ДатаРасчетовПриИзменении()

// Процедура - обработчик события "Очистка" поля ввода даты расчетов.
//
Процедура ДатаРасчетовОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры // ДатаРасчетовОчистка()

// Процедура - обработчик события "Выбор" табличного поля дерева номенклатуры.
//
Процедура ДеревоНоменклатурыВыбор(Элемент, ВыбРодитель, Колонка, СтандартнаяОбработка)

	СтруктураЗапроса = ЭлементыФормы.СписокВидовПодбора.Значение;
	ПерезаполнитьТаблицуНоменклатуры(ВыбРодитель, СтруктураЗапроса);

КонецПроцедуры // ДеревоНоменклатурыВыбор()

// Процедура - обработчик события "ПриВыводеСтроки" табличного поля таблицы номенклатуры.
//
Процедура НоменклатураДляПодбораПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ЯчейкаПиктограмма = ОформлениеСтроки.Ячейки.Пиктограмма;
	ЯчейкаПиктограмма.ОтображатьКартинку = Истина;

	Если ДанныеСтроки.ЭтоГруппа Тогда

		ЯчейкаПиктограмма.ИндексКартинки = 0; // группа
		Если ДанныеСтроки.ПереходитьВверх Тогда
			ОформлениеСтроки.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		КонецЕсли;

	Иначе

		Если ДанныеСтроки.Набор Тогда
			Если ДанныеСтроки.ПометкаУдаления Тогда
				ЯчейкаПиктограмма.Картинка = мКартинкаНаборУдален;
			Иначе
				ЯчейкаПиктограмма.Картинка = мКартинкаНабор;
			КонецЕсли;
		Иначе
			ЯчейкаПиктограмма.ИндексКартинки = 1; // элемент
		КонецЕсли;

	КонецЕсли;

	// Выделим цветом те цены, которые заданы особыми условиями поставок
	Если ДанныеСтроки.ФлагУсловийПоставки Тогда
		ОформлениеСтроки.Ячейки.Цена.ЦветФона = WebЦвета.Лимонный;
	КонецЕсли; 

	// Выделим цветом минимальный остаток из свободного остатка и остатка по организации
	Если ДанныеСтроки.КоличествоСвободныйОстаток < ДанныеСтроки.КоличествоОстатокОрганизации Тогда
		ОформлениеСтроки.Ячейки.КоличествоСвободныйОстаток.ЦветТекста = WebЦвета.ТемноСиний;
	ИначеЕсли ДанныеСтроки.КоличествоСвободныйОстаток > ДанныеСтроки.КоличествоОстатокОрганизации Тогда
		ОформлениеСтроки.Ячейки.КоличествоОстатокОрганизации.ЦветТекста = WebЦвета.ТемноСиний;
	КонецЕсли; 

КонецПроцедуры // НоменклатураДляПодбораПриВыводеСтроки()

// Процедура - обработчик события "Выбор" табличного поля таблицы номенклатуры.
//
Процедура ТаблицаНоменклатурыВыбор(Элемент, ВыбСтрока, Колонка, СтандартнаяОбработка)

	Перем Номенклатура, ЕдиницаИзмерения, Количество, Цена, Лимит, ВалютаЦены, Характеристика, Серия, СпособЗаполненияЦен, Качество;
	Перем СтруктураПараметров;
	Перем Команда, СтруктураПодбора;
	Перем Склад, ТипЦен, ДоговорКонтрагента;

	СтруктураИсходныхПараметров.Свойство("ТипЦен",              ТипЦен);
	СтруктураИсходныхПараметров.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	СтруктураИсходныхПараметров.Свойство("Склад",               Склад);
	СтруктураИсходныхПараметров.Свойство("Команда",             Команда);

	Если СтруктураИсходныхПараметров.Свойство("ДоговорКонтрагента") Тогда
		СтруктураИсходныхПараметров.Свойство("ДоговорКонтрагента", ДоговорКонтрагента);
	Иначе
		ДоговорКонтрагента = Неопределено;
	КонецЕсли;

	ДатаЦены             = ДатаРасчетов;
	СтандартнаяОбработка = Ложь;

	// Инициализируем структуру выбранной строки (реквизиты обработки).
	Если ПодборПоСправочнику Тогда

		Если ВыбСтрока.ЭтоГруппа Тогда
			УстановитьТекущегоРодителя(ВыбСтрока);
			СтандартнаяОбработка = Истина;
			Возврат;
		КонецЕсли;

		Номенклатура     = ВыбСтрока;
		ЕдиницаИзмерения = Неопределено;

		// Получим Цену
		Цена = 0;
		
		Если Номенклатура.ВидТовара = Перечисления.ВидыТоваров.РекламнаяПродукция Тогда   //Плотников, рекламная продукция
			Цена = 1;
		ИначеЕсли СтруктураИсходныхПараметров.Свойство("ТипЦен") Тогда
			Если ТипЗнч(СтруктураИсходныхПараметров.ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
				Цена = ПолучитьЦенуНоменклатуры(Номенклатура, , СтруктураИсходныхПараметров.ТипЦен, ДатаЦены, ЕдиницаИзмерения, ВалютаЦены,,,, ДоговорКонтрагента);
			ИначеЕсли ТипЗнч(СтруктураИсходныхПараметров.ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатурыКонтрагентов") Тогда
				Цена = ПолучитьЦенуКонтрагента(Номенклатура, , СтруктураИсходныхПараметров.Контрагент,
				                               СтруктураИсходныхПараметров.ТипЦен, ДатаЦены, ЕдиницаИзмерения, ВалютаЦены,,, ДоговорКонтрагента);
			КонецЕсли;
		КонецЕсли;

		Если ЗначениеНеЗаполнено(ЕдиницаИзмерения) Тогда
			ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
		КонецЕсли;

		Лимит          = 0;
		ВалютаЦены     = ?(ЗначениеНеЗаполнено(ВалютаЦены), ?(СтруктураИсходныхПараметров.Свойство("ВалютаДокумента"), СтруктураИсходныхПараметров.ВалютаДокумента, мВалютаРегламентированногоУчета), ВалютаЦены);
		Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		Серия          = Справочники.СерииНоменклатуры.ПустаяСсылка();
		Качество       = Справочники.Качество.Новый;

	Иначе // подбор по запросу

		Если ЗначениеНеЗаполнено(ВыбСтрока) Тогда
			Возврат;
		КонецЕсли;

		Если ВыбСтрока.Номенклатура.ЭтоГруппа Тогда
			Родитель         = ?(ВыбСтрока.ПереходитьВверх, ВыбСтрока.Номенклатура.Родитель, ВыбСтрока.Номенклатура);
			СтруктураЗапроса = ЭлементыФормы.СписокВидовПодбора.Значение;
			Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПродажаАвтозапчастей") Тогда
				Если ЗначениеНеЗаполнено(Родитель) Тогда
					Родитель=Справочники.Номенклатура.Автозапчасти;
				Иначе	
					Если  Родитель.ПринадлежитЭлементу(Справочники.Номенклатура.Автозапчасти) 
						или Родитель=Справочники.Номенклатура.Автозапчасти Тогда
					Иначе	
						Родитель=Справочники.Номенклатура.Автозапчасти;
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;	
			УстановитьТекущегоРодителя(Родитель);
			ПерезаполнитьТаблицуНоменклатуры(Родитель, СтруктураЗапроса);
			Возврат;
		КонецЕсли;


		Номенклатура     = ВыбСтрока.Номенклатура;
		ЕдиницаИзмерения = ВыбСтрока.ЕдиницаИзмерения;
		Цена             = ВыбСтрока.Цена;
		Лимит            = ВыбСтрока.Лимит;
		ВалютаЦены       = ВыбСтрока.Валюта;
		Характеристика   = ВыбСтрока.ХарактеристикаНоменклатуры;
		Склад            = ВыбСтрока.Склад;
		Серия            = Справочники.СерииНоменклатуры.ПустаяСсылка();
		Качество         = ВыбСтрока.Качество;

		Если Цена = 0 Тогда
			// Получим Цену
			Если СтруктураИсходныхПараметров.Свойство("ТипЦен") Тогда
				Если ТипЗнч(СтруктураИсходныхПараметров.ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
					Цена = ПолучитьЦенуНоменклатуры(Номенклатура, Характеристика, СтруктураИсходныхПараметров.ТипЦен, ДатаЦены, ЕдиницаИзмерения, ВалютаЦены,,,, ДоговорКонтрагента);
				ИначеЕсли ТипЗнч(СтруктураИсходныхПараметров.ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатурыКонтрагентов") Тогда
					Цена = ПолучитьЦенуКонтрагента(Номенклатура, Характеристика, СтруктураИсходныхПараметров.Контрагент,
					                               СтруктураИсходныхПараметров.ТипЦен, ДатаЦены, ЕдиницаИзмерения, ВалютаЦены,,, ДоговорКонтрагента);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если ЗначениеНеЗаполнено(ВалютаЦены) Тогда
			Цена       = 0;
			ВалютаЦены = ?(СтруктураИсходныхПараметров.Свойство("ВалютаДокумента"), СтруктураИсходныхПараметров.ВалютаДокумента, мВалютаРегламентированногоУчета);
		КонецЕсли;
	КонецЕсли;

	// Для тары пересчитываем цену в единицу хранения
	Если Команда = "ПодборВТабличнуюЧастьВозвратнаяТара"
	   И НЕ ЗначениеНеЗаполнено(Номенклатура.ЕдиницаХраненияОстатков) И НЕ ЗначениеНеЗаполнено(ЕдиницаИзмерения)
	   И Номенклатура.ЕдиницаХраненияОстатков.Коэффициент <> 0 И ЕдиницаИзмерения.Коэффициент <> 0 Тогда
	
		Цена = Окр((Цена * Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ЕдиницаИзмерения.Коэффициент), 2);
		ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
	КонецЕсли;

	Количество = 1;

	Если ЗапрашиватьКоличество Или ЗапрашиватьЦену
	 Или (ЗапрашиватьСерию И Номенклатура.ВестиУчетПоСериям)
	 Или (ЗапрашиватьХарактеристику И Номенклатура.ВестиУчетПоХарактеристикам) Тогда

		ИмяФормыВводаПараметров = "ВводПараметров";

		Если ЗапрашиватьСерию И Номенклатура.ВестиУчетПоСериям Тогда
			ИмяФормыВводаПараметров = ИмяФормыВводаПараметров + "ССериями";
		Иначе
			ИмяФормыВводаПараметров = ИмяФормыВводаПараметров + "БезСерий";
		КонецЕсли;

		Если ЭлементыФормы.ЗапрашиватьХарактеристику.Доступность
		   И ЗапрашиватьХарактеристику
		   И Номенклатура.ВестиУчетПоХарактеристикам Тогда
			ИмяФормыВводаПараметров = ИмяФормыВводаПараметров + "СХарактеристиками";
		Иначе
			ИмяФормыВводаПараметров = ИмяФормыВводаПараметров + "БезХарактеристик";
		КонецЕсли;

		ФормаВводПараметров = ПолучитьФорму(ИмяФормыВводаПараметров, ЭтаФорма);

		ФормаВводПараметров.Номенклатура     = Номенклатура;
		ФормаВводПараметров.ЕдиницаИзмерения = ЕдиницаИзмерения;
		ФормаВводПараметров.Количество       = Количество;
		ФормаВводПараметров.Характеристика   = Характеристика;
		ФормаВводПараметров.Цена             = Цена;
		ФормаВводПараметров.ВалютаЦены       = ВалютаЦены;
		ФормаВводПараметров.ДатаРасчетов     = ДатаРасчетов;

		Если ЭлементыФормы.ЗапрашиватьХарактеристику.Доступность
		   И ЗапрашиватьХарактеристику
		   И Номенклатура.ВестиУчетПоХарактеристикам Тогда

			ТаблицаХарактеристикНоменклатуры = ФормаВводПараметров.ТаблицаХарактеристикНоменклатуры;
			ТаблицаХарактеристикНоменклатуры.Очистить();

			НоваяСтрока = ТаблицаХарактеристикНоменклатуры.Добавить();
			НоваяСтрока.Характеристика   = Характеристика;
			НоваяСтрока.Количество       = Количество;
			НоваяСтрока.ЕдиницаИзмерения = ЕдиницаИзмерения;
			НоваяСтрока.Цена             = Цена;
			НоваяСтрока.ВалютаЦены       = ВалютаЦены;

			Если ЗначениеНеЗаполнено(НоваяСтрока.Характеристика) Тогда
				НоваяСтрока.Характеристика = "<без характеристики>";
			КонецЕсли;
		Иначе
			// Для тары блокируем изменение единицы измерения
			Если Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
				ФормаВводПараметров.ЭлементыФормы.ЕдиницаИзмерения.ТолькоПросмотр = Истина;
			КонецЕсли;

			// Для набора блокируем изменение цены
			Если Номенклатура.Набор Тогда
				ФормаВводПараметров.ЭлементыФормы.Цена.ТолькоПросмотр = Истина;
			КонецЕсли;
		КонецЕсли;

		СтруктураПараметров = ФормаВводПараметров.ОткрытьМодально();

		Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
			СтруктураПараметров.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
			СтруктураПараметров.Свойство("Количество"      , Количество);
			СтруктураПараметров.Свойство("Цена"            , Цена);
			СтруктураПараметров.Свойство("Лимит"           , Лимит);
			СтруктураПараметров.Свойство("Серия"           , Серия);

			Если ПодборПоСправочнику Тогда
				СтруктураПараметров.Свойство("Характеристика" , Характеристика);
			КонецЕсли;
		ИначеЕсли ТипЗнч(СтруктураПараметров) = Тип("Массив") Тогда
			Для Каждого ЭлементМассива Из СтруктураПараметров Цикл
				ЭлементМассива.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
				ЭлементМассива.Свойство("Количество",       Количество);
				ЭлементМассива.Свойство("Цена",             Цена);
				ЭлементМассива.Свойство("ВалютаЦены",       ВалютаЦены);
				ЭлементМассива.Свойство("Лимит",            Лимит);
				ЭлементМассива.Свойство("Серия",            Серия);
				ЭлементМассива.Свойство("Качество",         Качество);
				ЭлементМассива.Свойство("Характеристика",   Характеристика);

				СтруктураПодбора = Новый Структура();
				СтруктураПодбора.Вставить("Команда",             Команда);
				СтруктураПодбора.Вставить("ВалютаЦены",          ВалютаЦены);
				СтруктураПодбора.Вставить("Номенклатура",        Номенклатура);
				СтруктураПодбора.Вставить("ЕдиницаИзмерения",    ЕдиницаИзмерения);
				СтруктураПодбора.Вставить("Характеристика",      Характеристика);
				СтруктураПодбора.Вставить("Серия",               Серия);
				СтруктураПодбора.Вставить("Качество",            Качество);
				СтруктураПодбора.Вставить("Склад",               Склад);
				СтруктураПодбора.Вставить("Лимит",               Лимит);
				СтруктураПодбора.Вставить("СпособЗаполненияЦен", СпособЗаполненияЦен);
				СтруктураПодбора.Вставить("Цена",                Цена);
				СтруктураПодбора.Вставить("Количество",          Количество);
				СтруктураПодбора.Вставить("ЗапрашиватьЦену",     ЗапрашиватьЦену);

				ОповеститьОВыборе(СтруктураПодбора);
			КонецЦикла;
			Возврат;
		Иначе
			Возврат; // форма ввода количества(количества и цены) закрыта не по кнопке "ОК"
		КонецЕсли;
	КонецЕсли;

	// Оповестим о выборе документ, инициировавший подбор.
	Если Номенклатура.Набор Тогда

		Запрос = Новый Запрос;

		Запрос.УстановитьПараметр("Номенклатура",               Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", Характеристика);
		Запрос.УстановитьПараметр("Коэффициент",                ЕдиницаИзмерения.Коэффициент);
		Запрос.УстановитьПараметр("ЕдиницаИзмерения",           ЕдиницаИзмерения);
		Запрос.УстановитьПараметр("Количество",                 Количество);

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	КомплектующиеНоменклатуры.Комплектующая                             КАК Номенклатура,
		|	КомплектующиеНоменклатуры.ХарактеристикаКомплектующей               КАК Характеристика,
		|	(КомплектующиеНоменклатуры.Количество * &Коэффициент * &Количество) КАК Количество,
		|	КомплектующиеНоменклатуры.ЕдиницаИзмерения
		|ИЗ
		|	РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
		|
		|ГДЕ
		|	КомплектующиеНоменклатуры.Номенклатура = &Номенклатура И
		|	КомплектующиеНоменклатуры.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
		|";

		Выборка = Запрос.Выполнить().Выбрать();

		// Надо передать в форму каждую составляющую набора
		Пока Выборка.Следующий() Цикл

			// Получим Цену
			Цена = 0;
			Если СтруктураИсходныхПараметров.Свойство("ТипЦен") Тогда
				Если ТипЗнч(СтруктураИсходныхПараметров.ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
					Цена = ПолучитьЦенуНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика, СтруктураИсходныхПараметров.ТипЦен, ДатаЦены, Выборка.ЕдиницаИзмерения, ВалютаЦены);
				ИначеЕсли ТипЗнч(СтруктураИсходныхПараметров.ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатурыКонтрагентов") Тогда
					Цена = ПолучитьЦенуКонтрагента(Выборка.Номенклатура, Выборка.Характеристика, СтруктураИсходныхПараметров.Контрагент,
					                               СтруктураИсходныхПараметров.ТипЦен, ДатаЦены, Выборка.ЕдиницаИзмерения, ВалютаЦены);
				КонецЕсли;
			КонецЕсли;

			СтруктураПодбора = Новый Структура();
			СтруктураПодбора.Вставить("Команда",             Команда);
			СтруктураПодбора.Вставить("ВалютаЦены",          ВалютаЦены);
			СтруктураПодбора.Вставить("Номенклатура",        Выборка.Номенклатура);
			СтруктураПодбора.Вставить("ЕдиницаИзмерения",    Выборка.ЕдиницаИзмерения);
			СтруктураПодбора.Вставить("Характеристика",      Выборка.Характеристика);
			СтруктураПодбора.Вставить("Серия",               Справочники.СерииНоменклатуры.ПустаяСсылка());
			СтруктураПодбора.Вставить("Качество",            Справочники.Качество.Новый);
			СтруктураПодбора.Вставить("Склад",               Склад);
			СтруктураПодбора.Вставить("СпособЗаполненияЦен", СпособЗаполненияЦен);
			СтруктураПодбора.Вставить("Лимит",               0);
			СтруктураПодбора.Вставить("Цена",                Цена);
			СтруктураПодбора.Вставить("Количество",          Выборка.Количество);
			СтруктураПодбора.Вставить("ЗапрашиватьЦену",     ЗапрашиватьЦену);

			ОповеститьОВыборе(СтруктураПодбора);
		КонецЦикла;
	Иначе

		СтруктураПодбора = Новый Структура();
		СтруктураПодбора.Вставить("Команда",             Команда);
		СтруктураПодбора.Вставить("ВалютаЦены",          ВалютаЦены);
		СтруктураПодбора.Вставить("Номенклатура",        Номенклатура);
		СтруктураПодбора.Вставить("ЕдиницаИзмерения",    ЕдиницаИзмерения);
		СтруктураПодбора.Вставить("Характеристика",      Характеристика);
		СтруктураПодбора.Вставить("Серия",               Серия);
		СтруктураПодбора.Вставить("Качество",            Качество);
		СтруктураПодбора.Вставить("Склад",               Склад);
		СтруктураПодбора.Вставить("Лимит",               Лимит);
		СтруктураПодбора.Вставить("СпособЗаполненияЦен", СпособЗаполненияЦен);
		СтруктураПодбора.Вставить("Цена",                Цена);
		СтруктураПодбора.Вставить("Количество",          Количество);
		СтруктураПодбора.Вставить("ЗапрашиватьЦену",     ЗапрашиватьЦену);

		ОповеститьОВыборе(СтруктураПодбора);
	КонецЕсли;

	Если ВладелецФормы.Заголовок = "Подбор номенклатуры в Регистр сведений ""Номенклатура контрагентов"" " и Номенклатура<>Неопределено тогда//+++
		ВладелецФормы.ОбработкаПодбора(СтруктураПодбора);
	КонецЕсли;	

КонецПроцедуры // ТаблицаНоменклатурыВыбор()

// Процедура - обработчик события "ПриВыводеСтроки" табличного поля таблицы номенклатуры.
//
Процедура СправочникНоменклатураПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ОформлениеСтроки.Ячейки.Набор.Видимость = Ложь;

	ФлагНабора = ?(ДанныеСтроки.Набор = Истина, Истина, Ложь); // Может быть еще и Null

	Если ФлагНабора Тогда
		Если ДанныеСтроки.ПометкаУдаления Тогда
			ОформлениеСтроки.Ячейки.Картинка.УстановитьКартинку(мКартинкаНаборУдален);
		Иначе
			ОформлениеСтроки.Ячейки.Картинка.УстановитьКартинку(мКартинкаНабор);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // СправочникНоменклатураПриВыводеСтроки()

// Процедура - обработчик события "ПриАктивизацииСтроки" элемента формы НоменклатураДляПодбора.
//
Процедура НоменклатураДляПодбораПриАктивизацииСтроки(Элемент)

	ОбновитьИзображение();

КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииСтроки" элемента формы СправочникНоменклатура.
//
Процедура СправочникНоменклатураПриАктивизацииСтроки(Элемент)

	ОбновитьИзображение();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы СписокВидовПодбора.
//
Процедура СписокВидовПодбораПриИзменении(Элемент)

	// Покажем соответствующее табличное поле и заполним таблицу номенклатуры текущего родителя.
	ПриИзмененииВидаПодбора(Элемент.Значение);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы НоменклатурнаяГруппа.
//
Процедура НоменклатурнаяГруппаПриИзменении(Элемент)

	УстановитьОтборПоНоменклатурнойГруппе();

КонецПроцедуры

// Процедура - обработчик события "Очистка" элемента формы НоменклатурнаяГруппа.
//
Процедура НоменклатурнаяГруппаОчистка(Элемент, СтандартнаяОбработка)

	УстановитьОтборПоНоменклатурнойГруппе();

КонецПроцедуры

// Процедура - обработчик нажатии кнопки "Изображение".
//
Процедура ДействияФормыИзображение(Кнопка)

	Родитель       = ПолучитьТекущегоРодителя();
	Кнопка.Пометка = НЕ Кнопка.Пометка;

	ПроверитьВидимостьКартинки();
	УстановитьТекущегоРодителя(Родитель)

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ ИЗ ПОДБОРА В ДОКУМЕНТ

// Функция - получить структуру значений для перетаскивания.
//
Функция ПолучитьСтруктуруЗначенийПеретаскивания(ПараметрыПеретаскивания)
	Перем Команда;

	СтруктураИсходныхПараметров.Свойство("Команда", Команда);

	СтруктураЗначений = Новый Структура;
	СтруктураЗначений.Вставить("ИзПодбора");
	СтруктураЗначений.Вставить("Владелец",  ЭтаФорма.ВладелецФормы.ЭтотОбъект.Ссылка);
	СтруктураЗначений.Вставить("ИмяТЧ"    , СтрЗаменить(Команда, "ПодборВТабличнуюЧасть", ""));
	СтруктураЗначений.Вставить("ВыбСтрока", ПараметрыПеретаскивания.Значение);

	Возврат СтруктураЗначений;

КонецФункции // ПолучитьСтруктуруЗначенийПеретаскивания()

// Процедура - обработчик события "НачалоПеретаскивания" элемента формы НоменклатураДляПодбора.
//
Процедура НоменклатураДляПодбораНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)

	Если Элемент.ТекущиеДанные <> Неопределено
	   И НЕ Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Копирование;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
		ПараметрыПеретаскивания.Значение           = ПолучитьСтруктуруЗначенийПеретаскивания(ПараметрыПеретаскивания);
	Иначе
		ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	КонецЕсли;

КонецПроцедуры // НоменклатураДляПодбораНачалоПеретаскивания()

// Процедура - обработчик события "ОкончаниеПеретаскивания" элемента формы НоменклатураДляПодбора.
//
Процедура НоменклатураДляПодбораОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)

	Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование Тогда
		ТаблицаНоменклатурыВыбор(Элемент, ПараметрыПеретаскивания.Значение.ВыбСтрока, Неопределено, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // НоменклатураДляПодбораОкончаниеПеретаскивания()

// Процедура - обработчик события "НачалоПеретаскивания" элемента формы СправочникНоменклатура.
//
Процедура СправочникНоменклатураНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)

	Если Элемент.ТекущиеДанные <> Неопределено
	   И НЕ Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Копирование;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
		ПараметрыПеретаскивания.Значение           = ПолучитьСтруктуруЗначенийПеретаскивания(ПараметрыПеретаскивания);
	Иначе
		ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	КонецЕсли;

КонецПроцедуры // СправочникНоменклатураНачалоПеретаскивания()

// Процедура - обработчик события "ОкончаниеПеретаскивания" элемента формы СправочникНоменклатура.
//
Процедура СправочникНоменклатураОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)

	Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование Тогда
		ТаблицаНоменклатурыВыбор(Элемент, ПараметрыПеретаскивания.Значение.ВыбСтрока, Неопределено, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // СправочникНоменклатураОкончаниеПеретаскивания()

Функция ПолучитьЦенуРекламногоТовара(Номенклатура)
	запрос= Новый запрос;
	запрос.УстановитьПараметр("Ном",Номенклатура);
	запрос.Текст = "ВЫБРАТЬ
	               |	ПартииТоваровНаСкладахОстатки.СтоимостьОстаток / ПартииТоваровНаСкладахОстатки.КоличествоОстаток КАК Цена
	               |ИЗ
	               |	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(, Номенклатура = &Ном) КАК ПартииТоваровНаСкладахОстатки";
	Рез = запрос.Выполнить().Выгрузить();
	если Рез.Количество() > 0 Тогда
		возврат рез[0].цена;
	иначе
		возврат 0;
	КонецЕсли;
КонецФункции
////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мПустаяКартинка       = Новый Картинка;
мСписокПометокНаборов = Новый СписокЗначений;

мКартинкаНабор        = БиблиотекаКартинок.Набор;
мКартинкаНаборУдален  = БиблиотекаКартинок.НаборУдален;

мТекущийЭлементФормы              = Неопределено;
мСтруктураВидимостиКолонокПодбора = Неопределено;
мВремяПоследнегоПоиска            = Неопределено;
мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();

// Зададим возможные состояния окна.
СоединяемоеОкно                 = Истина;
РазрешитьСостояниеПрикрепленное = Истина;
РазрешитьСостояниеСвободное     = Истина;

// Положение окна по умолчанию.
СостояниеОкна                   = ВариантСостоянияОкна.Прикрепленное;
ПоложениеПрикрепленногоОкна     = ВариантПрикрепленияОкна.Право;