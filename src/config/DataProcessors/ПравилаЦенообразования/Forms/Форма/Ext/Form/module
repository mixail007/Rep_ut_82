
Перем ТипЦенБазовая,ТипЦенКрупныйОпт;
Перем ТипЦенЯкорь,	ТипЦенРеккомендРозн;
Перем СписокПроизводителиШин, СписокПроизводителиДисков;
Перем СписокПапкиШин, СписокПапкиДисков;
перем таблЗадачи;

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	Если ЗначениеНеЗаполнено(Контрагент) Тогда
		Контрагент = справочники.Контрагенты.ПустаяСсылка();
		ВвестиЗначение(Контрагент, "Выберите клиента");
		Если ЗначениеНеЗаполнено(Контрагент) Тогда
			СообщитьОбОшибке("Поле Контрагент не заполнено");
			Отказ = Истина;
 		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

функция ЕстьРаспродажа()
	СвойствоРаспродажи = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90183"); //Цены распродажи
	
	Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	 |	ЗначенияСвойствОбъектов.Объект как Контрагент
	 |ИЗ
	 |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	 |ГДЕ
	 |	ЗначенияСвойствОбъектов.Свойство = &Свойство
	 |	И ЗначенияСвойствОбъектов.Значение = Истина
	 |	И ЗначенияСвойствОбъектов.Объект = &Контрагент";
	 
	 Запрос.УстановитьПараметр("Свойство", СвойствоРаспродажи);
	 Запрос.УстановитьПараметр("Контрагент", Контрагент);
	 Результат = Запрос.Выполнить();
	 возврат НЕ результат.Пустой();
	 
КонецФункции
 
функция КоличествоТоваровСФиксЦенами()
	 рез = 0;
	Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ЦеныКлиентаСрезПоследних.Номенклатура КАК Номенклатура,
	                |	ЦеныКлиентаСрезПоследних.Цена КАК Цена
	                |ИЗ
	                |	РегистрСведений.ЦеныКлиента.СрезПоследних КАК ЦеныКлиентаСрезПоследних
	                |ГДЕ
	                |	ЦеныКлиентаСрезПоследних.Контрагент = &Контрагент
	                |	И ЦеныКлиентаСрезПоследних.Цена > 0
	                |ИТОГИ
	                |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура),
	                |	СУММА(Цена)
	                |ПО
	                |	ОБЩИЕ";
	 Запрос.УстановитьПараметр("Контрагент", Контрагент);
	 Результат = Запрос.Выполнить();
	 выборка = результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	 Если выборка.Следующий() тогда
		 рез = выборка.Номенклатура;
	 КонецЕсли;
	 возврат рез;
КонецФункции
 
Процедура ПриОткрытии()
	
	//07.02.2017
	Если константы.ЦенообразованиеПоКатегориям.Получить() тогда
		Предупреждение("Старые цены УЖЕ НЕ работают!", 10);
		ЭтаФорма.ТолькоПросмотр = истина;
	Иначе //с 08.02 - блокировка!	
	ЭтаФорма.ТолькоПросмотр = истина;
	Предупреждение("Редактирование старых правил - заблокировано.
					|Идёт подготовка к переходу на новые правила.");
	КонецЕсли;
				
	
	колФиксЦен = КоличествоТоваровСФиксЦенами();	
	
	ЭтаФорма.Заголовок ="Правила Ценообразования клиента: "+ Контрагент.Наименование
  +?(Контрагент.ДатаСрезаЦен='00010101', "", " по срезу цен от "+формат(Контрагент.ДатаСрезаЦен,"ДФ=dd.MM.yyyy") )
  +?(ЕстьРаспродажа(),"(+Распродажа)","")
  +?(колФиксЦен>0, " - есть "+строка(колФиксЦен)+" фикс.цен","");
  
  //изРегистра=Истина, ПодставлятьПравилаКлиента=Ложь, ИспользоватьСогласование=ЛОЖЬ, НеВыключать=ЛОЖЬ
  ЗаполнитьДанныеТаблицы(Истина, Ложь, ЛОЖЬ, Истина); //да, нет, нет, ДА

 констСогласование = константы.СогласованиеПоСкидкамКлиентов.Получить();
  
  текПолитика = ПолучитьДокПолитикиЦенообразования();
  Если текПолитика<>неопределено тогда
	  ЭтаФорма.ЭлементыФормы.Надпись2.Заголовок = "ЦЕНЫ по документу: "+строка(текПолитика);
	  ЭтаФорма.Заголовок = ЭтаФорма.Заголовок +" (ПРАВИЛА - НЕ АКТИВНЫ)";
  КонецЕсли;
  
  Если не ( РольДоступна("ПолныеПрава") или РольДоступна("МенеджерПоПродажам") ) тогда // ограничение записи!
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ДоговорыКонтрагентов.Ссылка
				   |ИЗ
				   |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				   |ГДЕ
				   |	ДоговорыКонтрагентов.Владелец = &Владелец
				   |	И (НЕ ДоговорыКонтрагентов.ПометкаУдаления)
				   |	И (ДоговорыКонтрагентов.ОтветственноеЛицо = &ОтветственноеЛицо
				   |			ИЛИ ДоговорыКонтрагентов.Владелец.ОсновнойМенеджерКонтрагента = &ОтветственноеЛицо)";
	
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	Запрос.УстановитьПараметр("ОтветственноеЛицо", ПараметрыСеанса.ТекущийПользователь);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если не Выборка.Следующий() тогда
		 Предупреждение("Вы не можете устанавливать или менять скидки
						|для Контрагента: "+строка(Контрагент)+"
						| с которым Вы не работаете!", 30);
		 ЭтаФорма.Заголовок = ЭтаФорма.Заголовок +" (ПРАВИЛА - ТОЛЬКО ДЛЯ ПРОСМОТРА)";
		 ЭтаФорма.ТолькоПросмотр = истина;
		 Возврат;				
	 КонецЕсли;
  Иначе
  	 ЭлементыФормы.ТабличнаяЧастьПравила.Колонки.Выключено.Видимость = констСогласование;  
  КонецЕсли;

  //ВСЕГДА ТАК!
  ЭлементыФормы.ТабличнаяЧастьПравила.Колонки.Приоритет.Видимость   = Истина;
  ЭлементыФормы.ТабличнаяЧастьПравила.Колонки.НомерСтроки.Видимость = ЛОЖЬ;
  
  ЭлементыФормы.ТабличнаяЧастьПравила.Колонки.изм.Видимость          = Истина;
  ЭлементыФормы.ТабличнаяЧастьПравила.Колонки.Выключено.Видимость    = Истина;
  ЭлементыФормы.ТабличнаяЧастьПравила.Колонки.ФлПревышения.Видимость = ЛОЖЬ;
  ЭлементыФормы.ТабличнаяЧастьПравила.Колонки.ID.Видимость = ЛОЖЬ;
  
  ЭлементыФормы.ТабличнаяЧастьПравила.Колонки.Выключено.Доступность = РольДоступна("МенеджерПоЗакупкамСОграничениемПравДоступа")
				 или РольДоступна("ПравоЗавершенияРаботыПользователей");  
  
КонецПроцедуры

функция ПолучитьДокПолитикиЦенообразования()
	
	ЗапросПоискПолитики=Новый Запрос;	

ЗапросПоискПолитики.Текст ="ВЫБРАТЬ ПЕРВЫЕ 1
                           |	ПолитикаЦенообразования.Ссылка
                           |ИЗ
                           |	Документ.ПолитикаЦенообразования КАК ПолитикаЦенообразования
                           |ГДЕ
                           |	ПолитикаЦенообразования.Контрагент = &Контрагент
                           |	И ПолитикаЦенообразования.Ссылка.Проведен
                           |
                           |УПОРЯДОЧИТЬ ПО
                           |	ПолитикаЦенообразования.Дата УБЫВ";

ЗапросПоискПолитики.УстановитьПараметр("Контрагент",Контрагент);

РезультатПолитика= ЗапросПоискПолитики.Выполнить();

	Если РезультатПолитика.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		ВыборкаПолитика=РезультатПолитика.Выбрать();
		ВыборкаПолитика.Следующий();
		ТекущаяПолитика=ВыборкаПолитика.Ссылка;
		возврат ТекущаяПолитика;
КонецЕсли;	     // для контрагента нет политики ценообразования
	
	
КонецФункции

//4х2 = 8 вариантов
Процедура  ЗаполнитьДанныеТаблицы(изРегистра=Истина, ПодставлятьПравилаКлиента=Ложь, ИспользоватьСогласование=ЛОЖЬ, НеВыключать=ЛОЖЬ)
	
//===============Общие правила только по Категориям / или только по Пустой! ===================
 флЦеныПоКат = константы.ЦенообразованиеПоКатегориям.Получить(); //25.08.2016
	
	Если ПодставлятьПравилаКлиента тогда
		ОчиститьСообщения();
	КонецЕсли;
	
сообщить(строка(ТекущаяДата())+" - обработка Правил для клиента: "+строка(Контрагент));
Если изРегистра тогда
	Запрос = Новый Запрос;
	 Запрос.Текст ="ВЫБРАТЬ	*
		|ИЗ	РегистрСведений.ПравилаЦенообразования 
		|ГДЕ Контрагент = &Контрагент
		|	И Категория "+?(флЦеныПоКат,"<>","=")+" Значение(Перечисление.КатегорииСкидок.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО Приоритет";
		
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Выборка=Запрос.Выполнить().Выбрать();
	
	ТабличнаяЧастьПравила.Очистить();
	Пока Выборка.Следующий() Цикл
		ФлагЕстьЗаписи = Истина;
		НоваяСтрока=ТабличнаяЧастьПравила.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);	 
	КонецЦикла;	
КонецЕсли;

 Запрос = Новый Запрос;
 Если НЕ ПодставлятьПравилаКлиента тогда // просто общие
	 если НЕ флЦеныПоКат тогда  //как было
	 Запрос.Текст ="ВЫБРАТЬ
	               |	ПравилаЦенообразованияОбщие.Приоритет КАК Приоритет,
	               |	0 КАК ПриоритетКлиента,
	               |	ПравилаЦенообразованияОбщие.ВидТовара,
	               |	ПравилаЦенообразованияОбщие.ТипЦен,
	               |	ПравилаЦенообразованияОбщие.Номенклатура,
	               |	ПравилаЦенообразованияОбщие.Производитель,
	               |	ПравилаЦенообразованияОбщие.НоменклатурнаяГруппа,
	               |	ПравилаЦенообразованияОбщие.ВходитВПапку,
	               |	ПравилаЦенообразованияОбщие.ПодСтрока,
	               |	ПравилаЦенообразованияОбщие.Диаметр,
				   
	               |	ПравилаЦенообразованияОбщие.СкидкаНаценка,
//	               |	ПравилаЦенообразованияОбщие.СкидкаПредоплаты,
				   
	               |	ПравилаЦенообразованияОбщие.СкидкаНаценкаКрОпт,
	               |	ПравилаЦенообразованияОбщие.МаксСкидкаНаценка,
	               |	ПравилаЦенообразованияОбщие.МаксСкидкаПредоплаты,
//+++				   
			       |	ПравилаЦенообразованияОбщие.МаксСкидкаНаценкаРук,
	               |	ПравилаЦенообразованияОбщие.МаксСкидкаПредоплатыРук,

	               |	ПравилаЦенообразованияОбщие.ID,
				   
 //===================скидка/предоплата клиента - по общим правилам!========================
	               |	0 КАК СкидкаНаценкаКлиента,
				   |	0 КАК СкидкаПредоплатыКлиента,
				   //|	ПравилаЦенообразованияОбщие.СкидкаНаценка КАК СкидкаНаценкаКлиента,
				   //|	ПравилаЦенообразованияОбщие.СкидкаПредоплаты КАК СкидкаПредоплатыКлиента,
				   
				   |	ПравилаЦенообразованияОбщие.ВидДефектаДляУценки,
				   |	ПравилаЦенообразованияОбщие.Категория
				   
				   
			          |ИЗ
	               |	РегистрСведений.ПравилаЦенообразованияОбщие КАК ПравилаЦенообразованияОбщие
				   //+++ 25.08.2016
				   |ГДЕ
				   |	ПравилаЦенообразованияОбщие.Категория = Значение( Перечисление.КатегорииСкидок.ПустаяСсылка ) 
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Приоритет
				    |АВТОУПОРЯДОЧИВАНИЕ";
					
	Иначе// 25.08.2016  по категориям!
					
	Запрос.Текст = "ВЫБРАТЬ
	               |	Табл1.ВидТовара,
	               |	Табл1.Категория
	               |ПОМЕСТИТЬ ВТ_Виды
	               |ИЗ
	               |	&ТаблВидов КАК Табл1
	               |;
                   |///////////////////////////////////////////////
					|ВЫБРАТЬ
	               |	ЕстьNull(ПравилаЦенообразованияОбщие.Приоритет, 0) КАК Приоритет,
	               |	0 КАК ПриоритетКлиента,
				   
	               |	ВидыПоКатегориям.ВидТовара как ВидТовара,
				   
	               |	ЕстьNull(ПравилаЦенообразованияОбщие.ТипЦен, &ТипЦенЗаглушка) как ТипЦен,

	               |	ЕстьNull(ПравилаЦенообразованияОбщие.Номенклатура, Значение(Справочник.Номенклатура.ПустаяСсылка)) как Номенклатура,
	               |	ЕстьNull(ПравилаЦенообразованияОбщие.Производитель, Значение(Справочник.Производители.ПустаяСсылка)) как Производитель,
	               |	ЕстьNull(ПравилаЦенообразованияОбщие.НоменклатурнаяГруппа, Значение(Справочник.НоменклатурныеГруппы.ПустаяСсылка) ) как НоменклатурнаяГруппа,
	               |	ЕстьNull(ПравилаЦенообразованияОбщие.ВходитВПапку, Значение(Справочник.Номенклатура.ПустаяСсылка) ) как ВходитВПапку,
	               |	ЕстьNull(ПравилаЦенообразованияОбщие.ПодСтрока, """") как ПодСтрока,
	               |	ЕстьNull(ПравилаЦенообразованияОбщие.Диаметр, """") как Диаметр,
				   
	               |	ЕстьNull(ПравилаЦенообразованияОбщие.СкидкаНаценка, 0) как СкидкаНаценка,
	               |	ЕстьNull(ПравилаЦенообразованияОбщие.СкидкаНаценкаКрОпт, 0) как СкидкаНаценкаКрОпт,
				   
	               |	ЕстьNull(ПравилаЦенообразованияОбщие.МаксСкидкаНаценка, 0) как МаксСкидкаНаценка,
	               |	ЕстьNull(ПравилаЦенообразованияОбщие.МаксСкидкаПредоплаты,0) как МаксСкидкаПредоплаты,
//+++				   
			       |	ЕстьNull(ПравилаЦенообразованияОбщие.МаксСкидкаНаценкаРук, 0) как  МаксСкидкаНаценкаРук,
	               |	ЕстьNull(ПравилаЦенообразованияОбщие.МаксСкидкаПредоплатыРук,0) как МаксСкидкаПредоплатыРук,

	               |	ЕстьNull(ПравилаЦенообразованияОбщие.ID, """") как ID,
	            //===================скидка/предоплата клиента - по общим правилам!========================
				   //|	0 КАК СкидкаНаценкаКлиента,
				   //|	0 КАК СкидкаПредоплатыКлиента,
				   |	ЕстьNull(ПравилаЦенообразованияОбщие.СкидкаНаценка,0) КАК СкидкаНаценкаКлиента,
				   |	ЕстьNull(ПравилаЦенообразованияОбщие.СкидкаПредоплаты,0) КАК СкидкаПредоплатыКлиента,
 	   
				   |	ЕстьNull(ПравилаЦенообразованияОбщие.ВидДефектаДляУценки, Значение(Справочник.ВидыДефектовДляУценки.ПустаяСсылка) ) как ВидДефектаДляУценки,
				   |	ПравилаЦенообразованияОбщие.Категория
				   
			       |ИЗ ВТ_Виды как ВидыПоКатегориям
	               |	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаЦенообразованияОбщие КАК ПравилаЦенообразованияОбщие
				   |	ПО ВидыПоКатегориям.ВидТовара = ПравилаЦенообразованияОбщие.ВидТовара
				   |	 И ВидыПоКатегориям.Категория = ПравилаЦенообразованияОбщие.Категория
				   | ГДЕ 	
				   |   ВидыПоКатегориям.Категория "+?(флЦеныПоКат,"<>","=")+" Значение(Перечисление.КатегорииСкидок.ПустаяСсылка)
	
				   |
	               |УПОРЯДОЧИТЬ ПО
	               |	Приоритет
				    |АВТОУПОРЯДОЧИВАНИЕ";
					
	табл1 = Контрагент.КатегорияСкидок.Выгрузить();
	списокВидов = ПолучитьСписокВыгружаемыхТоваров();
	для каждого вид1 из списокВидов цикл
		если табл1.найти(вид1.Значение, "ВидТовара")=неопределено тогда
			стр1 = табл1.Добавить();
			стр1.видТовара = вид1.Значение;
			стр1.Категория = перечисления.КатегорииСкидок.к3;
		КонецЕсли;	
	КонецЦикла;				   
	Запрос.УстановитьПараметр("ТаблВидов", табл1);
	Запрос.УстановитьПараметр("ТипЦенЗаглушка", справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005") ); // Крупный опт.
					
				
	КонецЕсли;	
		
	Иначе // соединенение с правилами Клиента	 
				   
			   //|		ИЗ РегистрСведений.ПравилаЦенообразования //Клиента
			   //	|		как ПравилаЦенообразования
			   //	|		ГДЕ Контрагент = &Контрагент //Клиента
	 Запрос.Текст ="ВЫБРАТЬ
	               |	ПравилаЦенообразованияОбщие.Приоритет КАК Приоритет,
	               |	ПравилаЦенообразования.Приоритет КАК ПриоритетКлиента,
	               |	ПравилаЦенообразованияОбщие.ВидТовара,
	               |	ПравилаЦенообразованияОбщие.ТипЦен,
				   |	ВЫБОР
	               |		КОГДА ПравилаЦенообразованияОбщие.Производитель = ЗНАЧЕНИЕ(справочник.Производители.ПустаяСсылка)
	               |			ТОГДА ПравилаЦенообразования.Производитель
	               |		ИНАЧЕ ПравилаЦенообразованияОбщие.Производитель
	               |	КОНЕЦ КАК Производитель,
	               |	ВЫБОР
	               |		КОГДА ПравилаЦенообразованияОбщие.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(справочник.НоменклатурныеГруппы.ПустаяСсылка)
	               |			ТОГДА ПравилаЦенообразования.НоменклатурнаяГруппа
	               |		ИНАЧЕ ПравилаЦенообразованияОбщие.НоменклатурнаяГруппа
	               |	КОНЕЦ КАК НоменклатурнаяГруппа,
	               |	ВЫБОР
	               |		КОГДА ПравилаЦенообразованияОбщие.ВходитВПапку = ЗНАЧЕНИЕ(справочник.Номенклатура.ПустаяСсылка)
	               |			ТОГДА ПравилаЦенообразования.ВходитВПапку
	               |		ИНАЧЕ ПравилаЦенообразованияОбщие.ВходитВПапку
	               |	КОНЕЦ КАК ВходитВПапку,
				   //|	ВЫБОР
				   //|		КОГДА ПравилаЦенообразованияОбщие.Номенклатура = ЗНАЧЕНИЕ(справочник.Номенклатура.ПустаяСсылка)
				   //|			ТОГДА 
				   | ПравилаЦенообразования.Номенклатура
	               //|		ИНАЧЕ ПравилаЦенообразованияОбщие.Номенклатура
	               //|	КОНЕЦ 
				   | КАК Номенклатура,
	               //|	ВЫБОР
				   //|		КОГДА ПравилаЦенообразованияОбщие.ПодСтрока = """"
				   //|			ТОГДА 
				   | ПравилаЦенообразования.ПодСтрока
				   //|		ИНАЧЕ ПравилаЦенообразованияОбщие.ПодСтрока
	               //|	КОНЕЦ 
				   |	КАК ПодСтрока,
				   |	ВЫБОР
				   |		КОГДА ПравилаЦенообразованияОбщие.Диаметр = """"
				   |			ТОГДА ПравилаЦенообразования.Диаметр
	               |		ИНАЧЕ ПравилаЦенообразованияОбщие.Диаметр
	               |	КОНЕЦ КАК Диаметр,
	               |	ПравилаЦенообразованияОбщие.СкидкаНаценка,
	               |	ПравилаЦенообразованияОбщие.СкидкаНаценкаКрОпт,
	               |	ПравилаЦенообразованияОбщие.МаксСкидкаНаценка,
	               |	ПравилаЦенообразованияОбщие.МаксСкидкаПредоплаты,
				   
	        	   |	ПравилаЦенообразованияОбщие.МаксСкидкаНаценкаРук,
	               |	ПравилаЦенообразованияОбщие.МаксСкидкаПредоплатыРук,
				   
	               |	ПравилаЦенообразованияОбщие.ID,
	               |	ЕСТЬNULL(ПравилаЦенообразования.СкидкаНаценка, 0)+ ЕСТЬNULL(ПравилаЦенообразования.Бонус,0) КАК СкидкаНаценкаКлиента,
				   |	ЕСТЬNULL(ПравилаЦенообразования.СкидкаПредоплаты, 0) КАК СкидкаПредоплатыКлиента
			//+++ 04.07.2016 --- из персональных  
				   |,	ПравилаЦенообразования.ВидДефектаДляУценки
				   
				   //+++	25.08.2016 	   
				   |,	ПравилаЦенообразования.Категория
			        
	               |ИЗ
	               |	РегистрСведений.ПравилаЦенообразованияОбщие КАК ПравилаЦенообразованияОбщие
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ *
	               |		ИЗ РегистрСведений.ПравилаЦенообразования //Клиента
				   |		как ПравилаЦенообразования
	               |		ГДЕ Контрагент = &Контрагент //Клиента
				   |		) КАК ПравилаЦенообразования
				   
	               |		ПО ПравилаЦенообразованияОбщие.ВидТовара = ПравилаЦенообразования.ВидТовара
	               |			И ПравилаЦенообразованияОбщие.ТипЦен = ПравилаЦенообразования.ТипЦен
				   
				   
					   //+++ 04.07.2016 всегда только точное соответствие
				   |			И  ПравилаЦенообразования.ВидДефектаДляУценки = ПравилаЦенообразованияОбщие.ВидДефектаДляУценки
		   
				   
			//+++	25.08.2016 - правило клиента - сравнивается с такой же категорией общего правила!
			//если ЦпоК тогда категория=категория, иначе:   пустая=пустая,
	               |			И ПравилаЦенообразованияОбщие.Категория = ПравилаЦенообразования.Категория
				  |И  ПравилаЦенообразованияОбщие.Категория "+ ?(флЦеныПоКат, "<>", "=") + " Значение(Перечисление.КатегорииСкидок.ПустаяСсылка)
				   
				   
				   |			И (ВЫБОР
	               |				КОГДА ПравилаЦенообразования.Производитель = ЗНАЧЕНИЕ(справочник.Производители.ПустаяСсылка)
	               |					ТОГДА ИСТИНА
	               |				ИНАЧЕ ПравилаЦенообразованияОбщие.Производитель = ПравилаЦенообразования.Производитель
	               |			КОНЕЦ)
	               |			И (ВЫБОР
	               |				КОГДА ПравилаЦенообразования.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(справочник.НоменклатурныеГруппы.ПустаяСсылка)
	               |					ТОГДА ИСТИНА
	               |				ИНАЧЕ ПравилаЦенообразования.НоменклатурнаяГруппа = ПравилаЦенообразованияОбщие.НоменклатурнаяГруппа
	               |			КОНЕЦ)
	               |			И (ВЫБОР
	               |				КОГДА ПравилаЦенообразования.ВходитВПапку = ЗНАЧЕНИЕ(справочник.Номенклатура.ПустаяСсылка)
	               |						ИЛИ ПравилаЦенообразованияОбщие.ВходитВПапку = ЗНАЧЕНИЕ(справочник.Номенклатура.ПустаяСсылка)
	               |					ТОГДА ИСТИНА
	               |				ИНАЧЕ ПравилаЦенообразованияОбщие.ВходитВПапку = ПравилаЦенообразования.ВходитВПапку
	               |			КОНЕЦ)
				   
					   	              
//------------------частые правила и общие - сравнение по =подСтрок -------------------------------------
	               |			И ПравилаЦенообразованияОбщие.Номенклатура = ПравилаЦенообразования.Номенклатура
	                |			И ПравилаЦенообразованияОбщие.ПодСтрока = ПравилаЦенообразования.ПодСтрока
					
				//01.10.2015 - показывем ВСЕ правила, но сравниваем только с +!
				  //|ГДЕ ПравилаЦенообразованияОбщие.Приоритет>0
	               |//ГДЕ ПравилаЦенообразования.Приоритет>0
				   |
				   |УПОРЯДОЧИТЬ ПО
	               |	Приоритет, ПриоритетКлиента
				   |АВТОУПОРЯДОЧИВАНИЕ";
КонецЕсли;
			   
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Запрос.УстановитьПараметр("ПустаяНомГруппа",справочники.НоменклатурныеГруппы.ПустаяСсылка() );
		
	Если ПодставлятьПравилаКлиента и НЕ изРегистра тогда
		запрос.Текст = стрЗаменить(запрос.Текст, "ГДЕ Контрагент = &Контрагент",""); 
		запрос.Текст = стрЗаменить(запрос.Текст, "ИЗ РегистрСведений.ПравилаЦенообразования //Клиента", 
												 "из (Выбрать * из ВТ_Правила)");
												 
		//------Приоритет<0 - это супер скидки! исключительные правила! ---------------------
		// отрицательный приоритет в частных правилах 
		//позволяет сразу "обрубить" все частные правила этого клиента для шин или дисков например!
		// ручное изменение приоритета доступно напрямую из Регистра "ПравилаЦенообразования"
		
		// отрицательный приоритет (менее -1000) в Общих правилах 
		//позволяет сразу "обрубить" все частные правила всех клиентов!
		// ручное изменение приоритета доступно напрямую из Регистра "ПравилаЦенообразованияОбщие"
		
//01.10.2015 - показываем исключительные правила Клиента!		
		//запрос.Текст = стрЗаменить(запрос.Текст, "//И ПравилаЦенообразования.Приоритет>0", 
		//										   "И ПравилаЦенообразования.Приоритет>0");

		запрос.Текст = "ВЫБРАТЬ 
	   			   |	Правила.НомерСтроки как Приоритет,
	               |	Правила.ВидТовара,
	               |	Правила.Производитель,
	               |	Правила.НоменклатурнаяГруппа,
	               |	Правила.ВходитВПапку,
				   |	Правила.ПодСтрока,
	               |	Правила.Диаметр,
				   |	Правила.Номенклатура,
	               |	Правила.ТипЦен,
	               |	ЕстьNull(Правила.СкидкаНаценка,0) как СкидкаНаценка,
				   //+++ 18.12.2014
				   |	ЕстьNull(Правила.Бонус,0) как Бонус,
				   |	ЕстьNull(Правила.СкидкаПредоплаты,0) как СкидкаПредоплаты
				   //04.07.2016
				   |	, Правила.ВидДефектаДляУценки
				   |	, Правила.Категория				   		
				   | ПОМЕСТИТЬ ВТ_Правила
				   |из &ТабличнаяЧастьПравила как Правила;
	 			   |"+ запрос.Текст;
	Запрос.УстановитьПараметр("ТабличнаяЧастьПравила", ТабличнаяЧастьПравила.Выгрузить() );
	КонецЕсли;				   
	ТабЗнач=Запрос.Выполнить().Выгрузить();
	
ТабличноеПолеОбщихПравил.Очистить();
ТабличноеПолеОбщихПравил = ТабЗнач.Скопировать();

ЭлементыФормы.ТабличноеПолеОбщихПравил.Колонки.ПриоритетКлиента.Видимость = ПодставлятьПравилаКлиента;



//+++ 30.01.2014 - используем согласование: создаем задачу по Клиенту для всех мен.тов.групп

	ТабличноеПолеОбщихПравил.Сортировать("Приоритет"); // было НоменклатурнаяГруппа, Производитель
	
		максПроц = 200;
		
//----------------------СИСТЕМА СОГЛАСОВАНИЯ------------------------------------------------------------				
констСогласование = Константы.СогласованиеПоСкидкамКлиентов.Получить(); 
						
рук = ПолучитьРуководителя(глТекущийПользователь); //+++ яштПрочее. берется из подразделения. и если это не филиал, то из группы пользователей
СписокМенТовГрупп = новый СписокЗначений; // список пользователей, которым нужны уведомления!

	 текст1=""; текст0="";
	 МенТовГруппы = справочники.Пользователи.ПустаяСсылка();
	 МенТовГруппы0 = МенТовГруппы; // каждому менеджеру/руководителю - 1 задача
	 
	 
	 таблЗадачи = новый ТаблицаЗначений;
	 таблЗадачи.Колонки.Добавить("НомерСтрокиОснования");
	 таблЗадачи.Колонки.Добавить("Номенклатура");
	 таблЗадачи.Колонки.Добавить("Скидка");
	 таблЗадачи.Колонки.Добавить("СкидкаМин");
	 
	 таблЗадачи.Колонки.Добавить("Исполнитель");
	 таблЗадачи.Колонки.Добавить("Содержание");
	 
	 //20.01.2016
	 флЗаменаМенТГ = Константы.СогласованиеФилиаловВместоМенТГ_РуководительНаправления.Получить()
	 					и глТекущийПользователь.ОсновноеПодразделение.ОбособленноеПодразделение
		;
	 
	Для каждого ДанныеСтроки из ТабличноеПолеОбщихПравил цикл
		
	   стрКлиента = ТабличнаяЧастьПравила.Найти(ДанныеСтроки.ПриоритетКлиента, "НомерСтроки");
		   Если стрКлиента = неопределено тогда
			   продолжить;
		   КонецЕсли;	   
						
				текСтр = ДанныеСтроки;
				  стр1 = стрКлиента;
				  
	   //+++ 12.10.2015 ---------------------------Здесь определяем мен.тов.группы-------------------------------------------------
		   // ДЛЯ ФИЛИАЛОВ - вместо менеджера тов.группы - руководитель направления продаж филиала - Бондаренко
		Если флЗаменаМенТГ  тогда  //ОбособленноеПодразделение
			   МенТовГруппы = глТекущийПользователь.НаправлениеПродаж.Руководитель; 
			Иначе	   
			   
			   Если ЗначениеЗаполнено(стрКлиента.НоменклатурнаяГруппа) тогда
					МенТовГруппы = текСтр.НоменклатурнаяГруппа.Ответственный;
				иначе
					//автоопределение по виду товара и производителю
					Если текСтр.ВидТовара = перечисления.ВидыТоваров.Диски тогда
						МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Малышев Егор");
					иначеЕсли текСтр.ВидТовара = перечисления.ВидыТоваров.АКБ тогда
						МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Сухачева А.В.");
					иначеЕсли текСтр.ВидТовара = перечисления.ВидыТоваров.Аксессуары тогда
						МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Голубева В.С.");
					иначеЕсли текСтр.ВидТовара = перечисления.ВидыТоваров.Шины 
						и значениеЗаполнено(текСтр.Производитель) тогда //иначе все шины - Горохову
						
					//Contyre Avatyre - Вострилов	
						Если СокрЛП(текСтр.Производитель.Код)=109
						 или СокрЛП(текСтр.Производитель.Код)=3434 тогда
						МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Вострилов А.В.");
					//нКШЗ, Кама, Кама EURO, Viatti -  Никитин И.Б., 
						иначеЕсли СокрЛП(текСтр.Производитель.Код)=39
						    или СокрЛП(текСтр.Производитель.Код)=3279
							или СокрЛП(текСтр.Производитель.Код)=3280 
							или СокрЛП(текСтр.Производитель.Код)=3193  
							или СокрЛП(текСтр.Производитель.Код)=64 тогда
							МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Никитин");
						ИначеЕсли СокрЛП(текСтр.Производитель.Код)=36
						 или СокрЛП(текСтр.Производитель.Код)=43 тогда
							МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Горохов");
						ИначеЕсли СокрЛП(текСтр.Производитель.Код)=41
						 или СокрЛП(текСтр.Производитель.Код)=777
						 или СокрЛП(текСтр.Производитель.Код)=32 
						 или СокрЛП(текСтр.Производитель.Код)=22 
						 или СокрЛП(текСтр.Производитель.Код)=67 тогда
							МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Кузьмичева");
						//Импортные - Доколин 
						ИначеЕсли СокрЛП(текСтр.Производитель.Код)=50 
								   или СокрЛП(текСтр.Производитель.Код)=52
								   или СокрЛП(текСтр.Производитель.Код)=81 
                                   или СокрЛП(текСтр.Производитель.Код)=103
								   или СокрЛП(текСтр.Производитель.Код)=108
	   							   или СокрЛП(текСтр.Производитель.Код)=109
								   или СокрЛП(текСтр.Производитель.Код)=404
								   или СокрЛП(текСтр.Производитель.Код)=460
								   или СокрЛП(текСтр.Производитель.Код)=721 //SAILUN
								   или СокрЛП(текСтр.Производитель.Код)=739 //TIGAR
								   или СокрЛП(текСтр.Производитель.Код)=743
								   или СокрЛП(текСтр.Производитель.Код)=777
								   или СокрЛП(текСтр.Производитель.Код)=3218
                              	   или (текСтр.Производитель.Код>=3 //все от BARUM
									    и текСтр.Производитель.Код<=31 //до YOKOHAMA
								        )тогда
							МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Доколин");
						Иначе	 // все другое - тоже к Горохову
							МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Серков");
						КонецЕсли;
						
					Иначе	 // все другое - тоже к Горохову/Серков
						МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Серков");
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли; // конец опр. МенТовГруппы
			
стрЗадачи = неопределено; //--------  менТГ  МаксСкидкаНаценка ]    рук.  [МаксСкидкаНаценкаРук   менеджер  --------------	

изм = истина; // 07.12.2015 - ТОЛЬКО измененные!
Если ДанныеСтроки.ПриоритетКлиента>0 тогда
 стр111 = ТабличнаяЧастьПравила.Найти( ДанныеСтроки.ПриоритетКлиента, "НомерСтроки");
 изм  = стр111.изм;
КонецЕсли;

Если изм тогда // 07.12.2015 - ТОЛЬКО измененные!
	//1.а ====Отсрочка Рук==============================================================================				  
	Если (ДанныеСтроки.СкидкаНаценкаКлиента>ДанныеСтроки.МаксСкидкаНаценка // меньше "-" или меньше "+" мин.наценки
			    и (ДанныеСтроки.МаксСкидкаНаценкаРук<>0 и ДанныеСтроки.СкидкаНаценкаКлиента<ДанныеСтроки.МаксСкидкаНаценкаРук)
			    ) тогда
				
			    МенТовГруппы = рук;
			   
				текст1 =
					?(текСтр.СкидкаНаценкаКлиента<0,"Скидку", ?(текСтр.СкидкаНаценкаКлиента>максПроц,"Цену","Наценку") )
				+" "+строка(текСтр.СкидкаНаценкаКлиента)+?(текСтр.СкидкаНаценкаКлиента>максПроц," р.","%")+" превышающую %макс."+?(текСтр.СкидкаНаценкаКлиента<0,"Скидки", ?(текСтр.СкидкаНаценкаКлиента>максПроц,"Цены","Наценки") )
				+" руководителя "+строка(текСтр.МаксСкидкаНаценкаРук)+?(текСтр.СкидкаНаценкаКлиента>максПроц," р.","%")
				+" на "+строка(текСтр.СкидкаНаценкаКлиента-текСтр.МаксСкидкаНаценкаРук)+?(текСтр.СкидкаНаценкаКлиента>максПроц," р.","%")
				+"
				|для правила № "+строка(стр1.НомерСтроки)+": ";
				
				текст2 = строка(стр1.ВидТовара)+" "+строка(стр1.Производитель)
				+?(ЗначениеЗаполнено(стр1.НоменклатурнаяГруппа),", ном.группа: "+строка(стр1.НоменклатурнаяГруппа),"")
				+?(ЗначениеЗаполнено(стр1.ВходитВПапку),", из каталога: "+строка(стр1.ВходитВПапку),"")
				+?(стр1.Диаметр="","", ", Диаметр "+стр1.Диаметр) 
				+?(стр1.ПодСтрока="","", ", Наименование содержит '"+стр1.ПодСтрока+"' ")
				+?(стр1.Номенклатура.пустая(),"", ", только для товара: "+строка(стр1.Номенклатура.Код)+" "+строка(стр1.Номенклатура));
				
				текст1 = текст1 + текст2+"
				|КОНФЛИКТ по общему правилу №"+строка(ДанныеСтроки.Приоритет)+"
				|
				|";
				
				//17.08.2015 для руководителя
				стрЗадачи = таблЗадачи.Добавить();
				//25.08.2015 -------формируем список правил по менеджерам-----------------
				стрЗадачи.Исполнитель = МенТовГруппы;
				стрЗадачи.Содержание = текст1;
				
				стрЗадачи.НомерСтрокиОснования = стр1.НомерСтроки;
					стрЗадачи.Номенклатура =текст2;
					стрЗадачи.Скидка    = текСтр.СкидкаНаценкаКлиента;
					стрЗадачи.СкидкаМин = текСтр.МаксСкидкаНаценкаРук;
					
		   КонецЕсли;
			
	//1.б =====предоплата Рук==================
	Если  ( ДанныеСтроки.СкидкаПредоплатыКлиента>ДанныеСтроки.МаксСкидкаПредоплаты // меньше "-" или меньше "+" мин.наценки
			       и (ДанныеСтроки.МаксСкидкаПредоплатыРук<>0 и ДанныеСтроки.СкидкаПредоплатыКлиента<ДанныеСтроки.МаксСкидкаПредоплатыРук) //+++
                  )
			   тогда // если еще не выключено... то создаём сообщение и задачи...
			   
			    МенТовГруппы = рук;
			   
				текст1 =
				?(текСтр.СкидкаПредоплатыКлиента<0,"Скидку предоплаты", ?(текСтр.СкидкаПредоплатыКлиента>максПроц,"Цену предоплаты","Наценку предоплаты") )
				+" "+строка(текСтр.СкидкаПредоплатыКлиента)+?(текСтр.СкидкаПредоплатыКлиента>максПроц," р.","%")+" превышающую %макс."
				+?(текСтр.СкидкаПредоплатыКлиента<0,"Скидки", ?(текСтр.СкидкаПредоплатыКлиента>максПроц,"Цены предоплаты","Наценки предоплаты") )
				+" руководителя "+строка(текСтр.МаксСкидкаПредоплатыРук)+?(текСтр.СкидкаПредоплатыКлиента>максПроц," р.","%")
				+" на "+строка(текСтр.СкидкаПредоплатыКлиента-текСтр.МаксСкидкаПредоплатыРук)+?(текСтр.СкидкаПредоплатыКлиента>максПроц," р.","%")
				//)
				+"
				|для правила № "+строка(стр1.НомерСтроки)+": ";
				
				текст2 = строка(стр1.ВидТовара)+" "+строка(стр1.Производитель)
				+?(ЗначениеЗаполнено(стр1.НоменклатурнаяГруппа),", ном.группа: "+строка(стр1.НоменклатурнаяГруппа),"")
				+?(ЗначениеЗаполнено(стр1.ВходитВПапку),", из каталога: "+строка(стр1.ВходитВПапку),"")
				+?(стр1.Диаметр="","", ", Диаметр "+стр1.Диаметр) 
				+?(стр1.ПодСтрока="","", ", Наименование содержит '"+стр1.ПодСтрока+"' ")
				+?(стр1.Номенклатура.пустая(),"", ", только для товара: "+строка(стр1.Номенклатура.Код)+" "+строка(стр1.Номенклатура));
				
				текст1 = текст1 + текст2+"
				|КОНФЛИКТ по общему правилу №"+строка(ДанныеСтроки.Приоритет)+"
				|
				|";
				
				//17.08.2015 для руководителя
				стрЗадачи = таблЗадачи.Добавить();
				//25.08.2015 -------формируем список правил по менеджерам-----------------
				стрЗадачи.Исполнитель = МенТовГруппы; // здесь это руководитель
				стрЗадачи.Содержание = текст1;
				
				стрЗадачи.НомерСтрокиОснования = стр1.НомерСтроки;
				//Если ДанныеСтроки.МаксСкидкаНаценкаРук<>0 и ДанныеСтроки.СкидкаНаценкаКлиента<ДанныеСтроки.МаксСкидкаНаценкаРук тогда
				//	стрЗадачи.Номенклатура =текст2;
				//	стрЗадачи.Скидка    = текСтр.СкидкаНаценкаКлиента;
				//	стрЗадачи.СкидкаМин = текСтр.МаксСкидкаНаценкаРук;
				//Иначе
					стрЗадачи.Номенклатура ="Предоплата: "+текст2;
					стрЗадачи.Скидка    = текСтр.СкидкаПредоплатыКлиента;
					стрЗадачи.СкидкаМин = текСтр.МаксСкидкаПредоплатыРук;
				//КонецЕсли;
	КонецЕсли;			
				
//====2.а=======================Отсрочка МенТовГр===================================================================================				
	Если (ДанныеСтроки.МаксСкидкаНаценкаРук<>0 и ДанныеСтроки.СкидкаНаценкаКлиента<=ДанныеСтроки.МаксСкидкаНаценка)
	 или (ДанныеСтроки.МаксСкидкаНаценкаРук=0 и ДанныеСтроки.СкидкаНаценкаКлиента<ДанныеСтроки.МаксСкидкаНаценка) тогда // меньше "-" или меньше "+" мин.наценки
		   			
				текст1 = //?(ДанныеСтроки.СкидкаНаценкаКлиента<ДанныеСтроки.МаксСкидкаНаценка,
				?(текСтр.СкидкаНаценкаКлиента<0,"Скидку", ?(текСтр.СкидкаНаценкаКлиента>максПроц,"Цену","Наценку") )
				+" "+строка(текСтр.СкидкаНаценкаКлиента)+?(текСтр.СкидкаНаценкаКлиента>максПроц," р.","%")+", превышающую %Макс."+?(текСтр.СкидкаНаценкаКлиента<0,"Скидки", ?(текСтр.СкидкаНаценкаКлиента>максПроц,"Цены","Наценки") )
				+" менеджера Тов.Группы "+строка(текСтр.МаксСкидкаНаценка)+?(текСтр.СкидкаНаценкаКлиента>максПроц," р.","%")
				+" на "+строка(текСтр.СкидкаНаценкаКлиента-текСтр.МаксСкидкаНаценка)+?(текСтр.СкидкаНаценкаКлиента>максПроц," р.","%")
				//,
				//?(текСтр.СкидкаПредоплатыКлиента<0,"Скидку предоплаты", ?(текСтр.СкидкаПредоплатыКлиента>максПроц,"Цену предоплаты","Наценку предоплаты") )
				//+" "+строка(текСтр.СкидкаПредоплатыКлиента)+?(текСтр.СкидкаПредоплатыКлиента>максПроц," р.","%")+", превышающую %Макс."+?(текСтр.СкидкаПредоплатыКлиента<0,"Скидки предоплаты", ?(текСтр.СкидкаПредоплатыКлиента>максПроц,"Цены предоплаты","Наценки предоплаты") )
				//+" менеджера Тов.Группы "+строка(текСтр.СкидкаПредоплатыКлиента)+?(текСтр.СкидкаПредоплатыКлиента>максПроц," р.","%")
				//+" на "+строка(текСтр.СкидкаПредоплатыКлиента-текСтр.МаксСкидкаПредоплаты)+?(текСтр.СкидкаПредоплатыКлиента>максПроц," р.","%")
				//)
				+"
				|для правила № "+строка(стр1.НомерСтроки)+": ";
				
				текст2 = строка(стр1.ВидТовара)+" "+строка(стр1.Производитель)
				+?(ЗначениеЗаполнено(стр1.НоменклатурнаяГруппа),", ном.группа: "+строка(стр1.НоменклатурнаяГруппа),"")
				+?(ЗначениеЗаполнено(стр1.ВходитВПапку),", из папки: "+строка(стр1.ВходитВПапку),"")
				+?(стр1.Диаметр="","", ", Диаметр: "+стр1.Диаметр) 
				+?(стр1.ПодСтрока="","", ", Наименование содержит '"+стр1.ПодСтрока+"' ")
				+?(стр1.Номенклатура.пустая(),"", ", только для товара: "+строка(стр1.Номенклатура.Код)+" "+строка(стр1.Номенклатура));
				
				текст1 = текст1+текст2+"
				|КОНФЛИКТ по общему правилу №"+строка(ДанныеСтроки.Приоритет)+"
				|";
				
				//17.08.2015 для мен.тов.группы
				стрЗадачи = таблЗадачи.Добавить();
				
				//25.08.2015 -------формируем список правил по менеджерам-----------------
				стрЗадачи.Исполнитель = МенТовГруппы;
				стрЗадачи.Содержание = текст1;

				
				стрЗадачи.НомерСтрокиОснования = стр1.НомерСтроки;
						стрЗадачи.Номенклатура =текст2;
					стрЗадачи.Скидка    = текСтр.СкидкаНаценкаКлиента;
					стрЗадачи.СкидкаМин = текСтр.МаксСкидкаНаценка;

			//иначе если уже выключено - ничего не делаем!	
	КонецЕсли;	
	
//====2.б =================Предоплата МенТовГр===================================
   Если (ДанныеСтроки.МаксСкидкаПредоплатыРук<>0 и ДанныеСтроки.СкидкаПредоплатыКлиента<=ДанныеСтроки.МаксСкидкаПредоплаты)
	или (ДанныеСтроки.МаксСкидкаПредоплатыРук=0 и ДанныеСтроки.СкидкаПредоплатыКлиента<ДанныеСтроки.МаксСкидкаПредоплаты) тогда // меньше "-" или меньше "+" мин.наценки
		   
		   //+++ 11.09.2015
		   // ДЛЯ ФИЛИАЛОВ - вместо менеджера тов.группы - руководитель направления продаж филиала - Бондаренко
		   Если флЗаменаМенТГ тогда  //27.01.2016   
			   МенТовГруппы = глТекущийПользователь.НаправлениеПродаж.Руководитель; 
		   Иначе	   
			   
			    Если ЗначениеЗаполнено(стрКлиента.НоменклатурнаяГруппа) тогда
					МенТовГруппы = текСтр.НоменклатурнаяГруппа.Ответственный;
				иначе
					//автоопределение по виду товара и производителю
					Если текСтр.ВидТовара = перечисления.ВидыТоваров.Диски тогда
						МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Малышев Егор");
					иначеЕсли текСтр.ВидТовара = перечисления.ВидыТоваров.АКБ тогда
						МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Сухачева А.В.");
					иначеЕсли текСтр.ВидТовара = перечисления.ВидыТоваров.Аксессуары тогда
						МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Голубева В.С.");
					иначеЕсли текСтр.ВидТовара = перечисления.ВидыТоваров.Шины тогда //все шины - Горохову
						//Кама - Никитин, Импортные - Доколин, Отеч - Горохов
						если ЗначениеЗаполнено(текСтр.Производитель)  тогда
							Если текСтр.Производитель = справочники.Производители.НайтиПоКоду(39) //нкшз
								или текСтр.Производитель = справочники.Производители.НайтиПоКоду(3193) //viatti
								тогда
								МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Никитин");
							ИначеЕсли текСтр.Производитель.ВыгружатьНаСайт 
								и ( (текСтр.Производитель.Код >=3 и текСтр.Производитель.Код<=21) 
								или (текСтр.Производитель.Код >=81 и текСтр.Производитель.Код<=460)
								или (текСтр.Производитель.Код=3218) //Dunlop(GY)
								  ) тогда //kumho
								МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Доколин");
							Иначе	 // все другое - тоже к Горохову
								МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Горохов");
							КонецЕсли;
						Иначе	 // все другое - тоже к Горохову
							МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Горохов");
						КонецЕсли;
					Иначе	 // все другое - тоже к Горохову
						МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Горохов");
					КонецЕсли;
				 КонецЕсли;
				
			КонецЕсли; // конец опр. МенТовГруппы

				
				текст1 = 
				?(текСтр.СкидкаПредоплатыКлиента<0,"Скидку Предоплаты", ?(текСтр.СкидкаПредоплатыКлиента>максПроц,"Цену предоплаты","Наценку предоплаты") )
				+" "+строка(текСтр.СкидкаПредоплатыКлиента)+?(текСтр.СкидкаПредоплатыКлиента>максПроц," р.","%")+", превышающую %Макс."+?(текСтр.СкидкаПредоплатыКлиента<0,"Скидки предоплаты", ?(текСтр.СкидкаПредоплатыКлиента>максПроц,"Цены предоплаты","Наценки предоплаты") )
				+" менеджера Тов.Группы "+строка(текСтр.СкидкаПредоплатыКлиента)+?(текСтр.СкидкаПредоплатыКлиента>максПроц," р.","%")
				+" на "+строка(текСтр.СкидкаПредоплатыКлиента-текСтр.МаксСкидкаПредоплаты)+?(текСтр.СкидкаПредоплатыКлиента>максПроц," р.","%")
				//)
				+"
				|для правила № "+строка(стр1.НомерСтроки)+": ";
				
				текст2 = строка(стр1.ВидТовара)+" "+строка(стр1.Производитель)
				+?(ЗначениеЗаполнено(стр1.НоменклатурнаяГруппа),", ном.группа: "+строка(стр1.НоменклатурнаяГруппа),"")
				+?(ЗначениеЗаполнено(стр1.ВходитВПапку),", из папки: "+строка(стр1.ВходитВПапку),"")
				+?(стр1.Диаметр="","", ", Диаметр: "+стр1.Диаметр) 
				+?(стр1.ПодСтрока="","", ", Наименование содержит '"+стр1.ПодСтрока+"' ")
				+?(стр1.Номенклатура.пустая(),"", ", только для товара: "+строка(стр1.Номенклатура.Код)+" "+строка(стр1.Номенклатура));
				
				текст1 = текст1+текст2+"
				|КОНФЛИКТ по общему правилу №"+строка(ДанныеСтроки.Приоритет)+"
				|";
				
				//17.08.2015 для мен.тов.группы
				стрЗадачи = таблЗадачи.Добавить();
				
				//25.08.2015 -------формируем список правил по менеджерам-----------------
				стрЗадачи.Исполнитель = МенТовГруппы;
				стрЗадачи.Содержание = текст1;

				
				стрЗадачи.НомерСтрокиОснования = стр1.НомерСтроки;
				//Если ДанныеСтроки.СкидкаНаценкаКлиента<ДанныеСтроки.МаксСкидкаНаценка тогда
				//	стрЗадачи.Номенклатура =текст2;
				//	стрЗадачи.Скидка    = текСтр.СкидкаНаценкаКлиента;
				//	стрЗадачи.СкидкаМин = текСтр.МаксСкидкаНаценка;
				//Иначе
					стрЗадачи.Номенклатура ="Предоплата: "+текст2;
					стрЗадачи.Скидка    = текСтр.СкидкаПредоплатыКлиента;
					стрЗадачи.СкидкаМин = текСтр.МаксСкидкаПредоплаты;
//				КонецЕсли;

			//иначе если уже выключено - ничего не делаем!	
			КонецЕсли;	
КонецЕсли;
			
//==================ВЫКЛЮЧЕНИЕ=============================================================================			
Если стрЗадачи <> неопределено тогда
//  ИспользоватьСогласование
//	стрКлиента.Выключено - выключает правило полностью, "не согласовано"!	  

	   Если не констСогласование тогда
				Если ИспользоватьСогласование тогда // при записи
					Если стрКлиента.Выключено тогда
						сообщить("Правило клиента №"+ строка(стрКлиента.НомерСтроки)+" - УЖЕ БЫЛО ВЫКЛЮЧЕНО!", СтатусСообщения.Внимание );
					КонецЕсли;	
				Иначе //при обновлении - выключать правило НЕ надо!
				КонецЕсли;
				
	      Иначе //констСогласование=истина
				
				Если НеВыключать тогда //ничего
				Иначе	
					
//сам с собой - не нужно согласовывать!  или это сотрудник IT-отдела!
	ЭтомуПользователюМожно = ( //РольДоступна("МенеджерПоЗакупкам") или 
								РольДоступна("ПравоЗавершенияРаботыПользователей") );
					
				Если ЭтомуПользователюМожно тогда  // сам с собой согласовывать не надо!
					
					Если стрКлиента.Выключено тогда
						Сообщить(" Правило клиента № "+строка(ДанныеСтроки.ПриоритетКлиента)+" - [v]Выключено!");
						таблЗадачи.Удалить( таблЗадачи.Количество()-1); // удаляем последнюю запись!  25.08.2015
					КонецЕсли;
						 
				 Иначе // остальным пользователям
					 
					 Если ИспользоватьСогласование и НЕ НеВыключать тогда//при записи правил - формируем задачу на согласование!
						 
					 		стрКлиента.Выключено = не РольДоступна("ПолныеПрава");	// для полных прав все включаем...
						
					  Иначе//при обновлении
						  
							Если ЭтомуПользователюМожно тогда  // сам с собой согласовывать не надо!
								Если стрКлиента.Выключено тогда 
								 Сообщить("Правило №"+ строка(стрКлиента.НомерСтроки)+" [v]Выключено. 
								 		   |       Измените скидку и/или снимите флаг [ ]Выключено вручную...
								 		   |", СтатусСообщения.Информация);
	 							таблЗадачи.Удалить( таблЗадачи.Количество()-1); // удаляем последнюю запись!  25.08.2015
								КонецЕсли;
							Иначе
								Сообщить(" Правило клиента № "+строка(ДанныеСтроки.ПриоритетКлиента)+" - БУДЕТ выключено! При записи будет создана Задача на Согласование!", СтатусСообщения.Внимание);
							КонецЕсли;
						КонецЕсли;//Если ИспользоватьСогласование
						
				КонецЕсли;				
				
				КонецЕсли;//НеВыключать
			
	      КонецЕсли; //констСогласование

		  
КонецЕсли;//ПРЕВЫШЕНИЕ СКИДКИ
	  
    КонецЦикла;
     
//----------------------СИСТЕМА СОГЛАСОВАНИЯ по Константе!------------------------------------------------------------	
Если ИспользоватьСогласование и констСогласование и не РольДоступна("ПолныеПрава") тогда  // сам с собой согласовывать не надо!
	 
   менТовГруппы0 = неопределено; текст0="";
	//-------новая задача------------
	задача1 = задачи.ЗадачиПользователя.СоздатьЗадачу();
 	задача1.Товары.Очистить();
	текст0="";
	
	таблЗадачи.Сортировать("Исполнитель");  //+++ 10.09.2015 - по 1 задаче на каждого согласующего!
	Егор = справочники.Пользователи.НайтиПоКоду("Малышев Егор");
	
   для каждого стр111 из таблЗадачи цикл
	   
	   менТовГруппы = стр111.Исполнитель;
   
	   	Если менТовГруппы<>менТовГруппы0 тогда//-------------просто Новая Задача с обратным уведомлением --------------------
			
	//==================================СОЗДАНИЕ ЗАДАЧ===========================
			Если менТовГруппы0 <> неопределено тогда
				
				//+++( 12.12.2016 - Задача в Корп.Портале: Автоматически согласовывать диски для менеджеров (задача №20803)
				Если задача1.Исполнитель = Егор
					и глТекущийПользователь.направлениеПродаж.Руководитель = Егор тогда
					
					Для каждого стрЗад из задача1.Товары цикл
						стрПравила = ТабличнаяЧастьПравила.Найти( стрЗад.НомерСтрокиОснования, "Приоритет");
						стрПравила.Выключено = ЛОЖЬ;
					КонецЦикла;
					
				//------- новая задача ------------
					задача1 = задачи.ЗадачиПользователя.СоздатьЗадачу();
				 	задача1.Товары.Очистить();
					текст0="";
					менТовГруппы0  = менТовГруппы;
					продолжить;
				КонецЕсли;	
				//+++)
				
				попытка 
				 задача1.Наименование = "Согласуйте Правила для клиента: "+строка(Контрагент); //+", равную "+строка(текСтр.СкидкаНаценкаКлиента)+?(текСтр.СкидкаНаценкаКлиента>максПроц," р.","% ")
				 задача1.Описание = "Менеджер: "+строка(глТекущийПользователь)+" ("+строка(глТекущийПользователь.ОсновноеПодразделение)+") просит Вас
				 |Утвердить "+текст0;

				задача1.Записать();
			  	СписокМенТовГрупп.Добавить(задача1.Исполнитель);
				Сообщить(" + Сформирована ""Задача на согласование"" для сотрудника: "+строка(задача1.Исполнитель), СтатусСообщения.Информация );	
			  исключение
				Сообщить(" - Не удалось сформировать электронную Задачу на согласование для сотрудника: "+строка(задача1.Исполнитель), СтатусСообщения.Внимание );	
			  КонецПопытки;
			//-------новая задача------------
			задача1 = задачи.ЗадачиПользователя.СоздатьЗадачу();
		 	задача1.Товары.Очистить();
			текст0="";
	        КонецЕсли;
				
			менТовГруппы0  = менТовГруппы;
			
	 	 КонецЕсли;
		 
		 текст0=текст0 + стр111.Содержание;  //общий текст по всем скидкам 1 клиента для 1 менеджера!
		   
		 задача1.Исполнитель = менТовГруппы;
		 
		 задача1.НаСогласование = ИСТИНА;//+++ 17.08.2015
		 
			 стр222 = задача1.Товары.Добавить();
			 ЗаполнитьЗначенияСвойств(стр222, стр111);
		 
		 задача1.Инициатор   = глТекущийПользователь;
		 задача1.Объект   	 = Контрагент;
		 
		 задача1.Дата 		    = ТекущаяДата();
		 задача1.СрокИсполнения = КонецДня( ТекущаяДата() ); // до конца текущих суток с момента установки
		 
		 задача1.Оповещение     = истина;
		 задача1.СрокОповещения = ТекущаяДата(); //сразу (появится не позднее чем через 5 мин
						 
 	КонецЦикла;	 
 
 //-----------последняя задача-------------------------------
	Если менТовГруппы0 <> неопределено и таблЗадачи.Количество()>0 тогда
	  попытка 
		 задача1.Наименование = "Согласуйте Правила для клиента: "+строка(Контрагент); //+", равную "+строка(текСтр.СкидкаНаценкаКлиента)+?(текСтр.СкидкаНаценкаКлиента>максПроц," р.","% ")
		 задача1.Описание = "Менеджер: "+строка(глТекущийПользователь)+" ("+строка(глТекущийПользователь.ОсновноеПодразделение)+") просит Вас
				 |Утвердить "+текст0;
		 
		задача1.Записать();
	  	СписокМенТовГрупп.Добавить(менТовГруппы);
		Сообщить(" + Сформирована ""Задача на согласование"" для мен.тов.группы: "+строка(менТовГруппы), СтатусСообщения.Информация );	
	  исключение
		Сообщить(" - Не удалось сформировать электронную Задачу на согласование для мен.тов.группы: "+строка(текСтр.НоменклатурнаяГруппа.Ответственный), СтатусСообщения.Внимание );	
	  КонецПопытки;
    КонецЕсли;
	
КонецЕсли; //ИспользоватьСогласование
   
    
	 Сообщить(" ");
	ТабличноеПолеОбщихПравил.Сортировать("Приоритет"); //"ВидТовара, Производитель");

этаФорма.Обновить();	
//ЭтаФорма.Модифицированность = НЕ изРегистра;	

КонецПроцедуры

Процедура ТабличнаяЧастьПравилаПроизводительНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ТекДанные =ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
	
	Если строка(ТекДанные.ВидТовара)="" тогда
		Предупреждение("Выберите сначала 'Вид товара'",10);
		Возврат;
	КонецЕсли;	
	
	запрос = новый запрос;	
    запрос.Текст = "ВЫБРАТЬ
                   |	Производители.Ссылка
                   |ИЗ
                   |	Справочник.Производители КАК Производители
                   |ГДЕ
                   |	(НЕ Производители.ПометкаУдаления)
                   |	И (НЕ Производители.ЭтоГруппа)
                   |	И Производители.Родитель = &Родитель
                   |
                   |УПОРЯДОЧИТЬ ПО
                   |	Производители.Наименование
                   |АВТОУПОРЯДОЧИВАНИЕ";
				   
	род = справочники.Производители.НайтиПоНаименованию( строка(ТекДанные.ВидТовара) ) ; // Шины, Диски, АКБ, Аксессуары, Прочее
	Если род=Неопределено Тогда
		запрос.Текст = СтрЗаменить(запрос.Текст, "И Производители.Родитель = &Родитель", "");
	Иначе	
		запрос.Параметры.Вставить("Родитель",  род);
	КонецЕсли;	
	 табЗнач = запрос.Выполнить().Выгрузить();
	 
	Элемент.СписокВыбора.ЗагрузитьЗначения(табЗнач.ВыгрузитьКолонку("Ссылка"));

КонецПроцедуры

Процедура ТабличнаяЧастьПравилаВидТовараПриИзменении(Элемент)
		ТекДанные = ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
		Если ТекДанные.ТипЦен.пустая() Тогда
			ТекДанные.ТипЦен = ТипЦенБазовая;
		//ИначеЕсли  ТекДанные.ВидТовара = Перечисления.ВидыТоваров.Шины и ТекДанные.ТипЦен.пустая() Тогда
		//	ТекДанные.ТипЦен = ТипЦенКрупныйОпт;
		//ИначеЕсли ЗначениеЗаполнено(ТекДанные.ВидТовара) и ТекДанные.ТипЦен.пустая() Тогда
		//	ТекДанные.ТипЦен= ТипЦенКрупныйОпт; //
		//Иначе
		КонецЕсли;	
        
КонецПроцедуры

Процедура ТабличнаяЧастьПравилаТипЦенНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ТекДанные =ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
	Если ТекДанные.ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
		Элемент.СписокВыбора.Очистить();
		Элемент.СписокВыбора.Добавить(ТипЦенБазовая);
		//Элемент.СписокВыбора.Добавить(ТипЦенДилерская);
	   // Элемент.СписокВыбора.Добавить(ТипЦенЯкорь);
		
	ИначеЕсли ТекДанные.ВидТовара = Перечисления.ВидыТоваров.Шины Тогда
		Элемент.СписокВыбора.Очистить();
		Элемент.СписокВыбора.Добавить(ТипЦенБазовая); 
		Элемент.СписокВыбора.Добавить(ТипЦенКрупныйОпт); 
	// Элемент.СписокВыбора.Добавить(ТипЦенЯкорь); // выборочно! только для Шинтрейда СПб
		
	Иначе // АКБ, Аксессуары, Прочее
		Элемент.СписокВыбора.Очистить();
		Элемент.СписокВыбора.Добавить(ТипЦенБазовая); 
		Элемент.СписокВыбора.Добавить(ТипЦенКрупныйОпт); 
	КонецЕсли;	

КонецПроцедуры

Процедура КнопкаВыполнитьНажатие(Кнопка)
		
	Если ЗначениеНеЗаполнено(Контрагент) Тогда
		СообщитьОбОшибке("Не выбран контрагент");
		Возврат;
	КонецЕсли;	
	
//проверка на договор или осн.мен.клиента	
	Если не ( РольДоступна("ПолныеПрава")
		     или РольДоступна("МенеджерПоЗакупкамСОграничениемПравДоступа") // менеджеры товарных групп
   				) тогда // ограничение записи!
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ДоговорыКонтрагентов.Ссылка
				   |ИЗ
				   |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				   |ГДЕ
				   |	ДоговорыКонтрагентов.Владелец = &Владелец
				   |	И (НЕ ДоговорыКонтрагентов.ПометкаУдаления)
				   |	И (ДоговорыКонтрагентов.ОтветственноеЛицо = &ОтветственноеЛицо
				   |			ИЛИ ДоговорыКонтрагентов.Владелец.ОсновнойМенеджерКонтрагента = &ОтветственноеЛицо)";
	
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	Запрос.УстановитьПараметр("ОтветственноеЛицо", ПараметрыСеанса.ТекущийПользователь);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
		Если не Выборка.Следующий() тогда
		Предупреждение("Вы не можете устанавливать или менять скидки
						|для Клиента: "+строка(Контрагент)+"
						| с которым Вы не работаете!", 30);
		Возврат;				
		КонецЕсли;
		
	КонецЕсли;
	
//-------------------------------Запреты как вообще нельзя делать-----------------------------------	
	ФлагОтказ = Ложь;
	Для  сч=0 по ТабличнаяЧастьПравила.Количество()-1 Цикл
		СтрокаЧастьПравила=ТабличнаяЧастьПравила[сч];
		Если ЗначениеНеЗаполнено(СтрокаЧастьПравила.ВидТовара) Тогда
			СообщитьОбОшибке("В строке № "+Строка(СтрокаЧастьПравила.НомерСтроки) + "не заполнен вид товара");
			ФлагОтказ = Истина;
		КонецЕсли;	
		
		Если ЗначениеНеЗаполнено(СтрокаЧастьПравила.ТипЦен) Тогда
			СообщитьОбОшибке("В строке № "+Строка(СтрокаЧастьПравила.НомерСтроки) + "не заполнен тип цен");
			ФлагОтказ = Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Если ФлагОтказ Тогда
		Возврат;
	КонецЕсли;	
	
	
//--------------------!!!---------------------------	
констСогласование = Константы.СогласованиеПоСкидкамКлиентов.Получить(); 
флВыключатьПриПревышении =констСогласование
						и НЕ ( Контрагент.НеКонтроллироватьЦеныПродажи
						      или РольДоступна("МенеджерПоЗакупкамСОграничениемПравДоступа") // менеджеры товарных групп - правила НЕ выключаются!
   							  или РольДоступна("ПравоЗавершенияРаботыПользователей") 
							);
							  
//29.10.2015 - еще раз сравниваем все правила и находим измененные строки!
	ТолькоИзм = Истина;
	//флВыключатьПриПревышении = истина;
	АнализПравилКлиента(флВыключатьПриПревышении, ТолькоИзм); // и УЖЕ ВЫКЛЮЧАЕМ!

//18.12.2015 - НЕ НАДО! 
//ЗаполнитьДанныеТаблицы(ЛОЖЬ, Истина, Истина, флВыключатьПриПревышении ); //20.10.2015 -> НеВыключать=НеКонтроллироватьЦеныПродажи
  СоздатьЗадачиПриВыключении();

////=======================================================================		
	НаборСтар = РегистрыСведений.ПравилаЦенообразования.СоздатьНаборЗаписей();//все записи по Контрагенту!
	НаборСтар.Отбор.Контрагент.Установить(Контрагент);
	НаборСтар.Прочитать();  //данные из регистра правил (старые)
	
	НаборЗаписей = РегистрыСведений.ПравилаЦенообразования.СоздатьНаборЗаписей();//все записи по Контрагенту!
	НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
	
	текстЖИ = "";//записываем в Журнал изменений
	КолИзмЗаписей = 0;
	Для  сч=0 по ТабличнаяЧастьПравила.Количество()-1 Цикл
		СтрокаТабЧасти=ТабличнаяЧастьПравила[сч];
		
		СтрокаТабЧасти.ID = получитьIDправила(СтрокаТабЧасти);
		
		//+++ 20.10.2015
		НоваяЗапись = неопределено;
		Для каждого стрСтар из НаборСтар цикл
			стрСтар.ID = получитьIDправила(стрСтар);
		
			Если стрСтар.ID = СтрокаТабЧасти.ID тогда
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, стрСтар);
				прервать;
			КонецЕсли;
		КонецЦикла;
		
//----определение изменений	 порядка, вкл/выкл, % скидок -----------------------------------
если НаборЗаписей.Количество()=0 или НоваяЗапись = неопределено тогда
	СтрокаТабЧасти.изм = истина;         // новая запись!
	НоваяЗапись = НаборЗаписей.Добавить();
	текстЖИ1 = "+"+СтрокаТабЧасти.НомерСтроки+") ID="+СтрокаТабЧасти.ID+" " + ЗаполнитьИзмПоля(НоваяЗапись, СтрокаТабЧасти);		    //ничего>>чтото
иначе	//ТОЛЬКО ИЗМЕНЕННЫЕ !!!
	текстИзм = ЗаполнитьИзмПоля(НоваяЗапись, СтрокаТабЧасти);		   
	СтрокаТабЧасти.изм = СтрокаТабЧасти.изм или (текстИзм<>"");  //04.02.2016 если ПРИНУДИТЕЛЬНО!
	текстЖИ1 = ?( текстИзм="", "", "-"+НоваяЗапись.Приоритет+") ID="+НоваяЗапись.ID+" "+текстИзм );
КонецЕсли;

 //--------------------!!!---------------------------	
//проверим скидки по общим правилам, 
//выключаем "превышающие" скидки,
//и сообщаем о выключении.
//Отправим Задачи на Согласование (3ий флаг)!  
 	
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТабЧасти); //все поля так и называются
		НоваяЗапись.Приоритет  = ?(СтрокаТабЧасти.Приоритет<0,СтрокаТабЧасти.Приоритет,СтрокаТабЧасти.НомерСтроки);
		НоваяЗапись.Контрагент = Контрагент;
		//+++ 08.06.2016 по ИДЕНТИФИКАТОРУ ==> 
		//НоваяЗапись.ID = СтрокаТабЧасти.ID;
		
	//+++ 10.02.2014 фиксирует изменение %, приоритета или типа цен!
	Если СтрокаТабЧасти.изм тогда		
		 текстЖИ = текстЖИ + текстЖИ1+"
		 |";
		 КолИзмЗаписей = КолИзмЗаписей + 1;
	КонецЕсли;
	 
КонецЦикла;
    колПравил0 = НаборСтар.Количество();
	колПравил1 = НаборЗаписей.Количество();
	
 	Если КолИзмЗаписей=0 и колПравил0=колПравил1 тогда  //18.12.2015 - ничего не изменилось... ничего писать не надо
		 Предупреждение("Правила клиента: "+строка(Контрагент)+" - не изменились!", 30);
	 Иначе
		 
		Попытка
		НачатьТранзакцию();
			НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
		
		ЭтаФорма.Модифицированность = ложь;
			
	//+++ 28.01.2014 :  	ЭтаФорма.Закрыть();
			
	//----------------------Журнал изменений------------------------------	
			 записьЖурнала = РегистрыСведений.ЖурналИзменений.СоздатьМенеджерЗаписи();
			 записьЖурнала.НомерЗаписи = ТабличнаяЧастьПравила.Количество();
			 записьЖурнала.Пользователь= ПараметрыСеанса.ТекущийПользователь;
			 записьЖурнала.Компьютер   = ИмяКомпьютера();
			 записьЖурнала.Объект	   = Контрагент;
			 записьЖурнала.Период	   = ТекущаяДата();
			 записьЖурнала.Событие	   = "Установка персональных скидок";
			 записьЖурнала.Комментарий = "Изменено: "+строка(КолИзмЗаписей) 
			 +?(колПравил1-колПравил0>0,", добавлено: "+строка(колПравил1-колПравил0), 
			 		?(колПравил1-колПравил0<0,", удалено:"+строка(колПравил0-колПравил1),""))
			 +" из "+строка(колПравил0)+" правил клиента '"+строка(Контрагент)+"':
			 |"+текстЖИ;
			 записьЖурнала.Записать(истина); //перезапись
			 
			 Предупреждение( ?(колПравил1-колПравил0>0,"Добавлено: "+строка(колПравил1-колПравил0), 
			 		?(колПравил1-колПравил0<0,"Удалено:"+строка(колПравил0-колПравил1),""))
					+", Изменено: "+строка(КолИзмЗаписей) +" правил клиента '"+строка(Контрагент)+"'.
							|"+строка(колПравил1)+" правил успешно записано в базу 1С!", 30);
							
			 сообщить(Строка(ТекущаяДата())+" "+записьЖурнала.Комментарий, СтатусСообщения.Информация);
			 
	ЭлементыФормы.КоманднаяПанельПравила.Кнопки.ВыгрузитьВStore.Доступность = Истина; // 04.02.2016 - нельзя выгружать
			 
		исключение
			ОтменитьТранзакцию();
			Предупреждение("Ошибка при записи правил: "+ОписаниеОшибки(), 60);
			сообщить("Ошибка при записи правил клиента: "+строка(Контрагент)+" : "+ОписаниеОшибки());
		КонецПопытки;
	  КонецЕсли;
	
ЭтаФорма.Закрыть();//03.03.2016	
	
КонецПроцедуры

функция получитьIDправила(стр1, флВсеПоля=Истина)
	
	Флажок3 = константы.ЦенообразованиеПоКатегориям.Получить();
	
	возврат строка(стр1.ВидТовара) // 0 перечисление
	
		+ ?(ЗначениеЗаполнено(стр1.ТипЦен), "."+строка(стр1.ТипЦен.Код),".0")    //1) 30.09.2016
		
		+ ?(ЗначениеЗаполнено(стр1.Производитель), "."+строка(стр1.Производитель.Код),".0")  //2
		+?(не флВсеПоля,"", 
		 ?(ЗначениеЗаполнено(стр1.НоменклатурнаяГруппа), "."+строка(стр1.НоменклатурнаяГруппа.Код),".0")
		+ ?(ЗначениеЗаполнено(стр1.ВходитВПапку), "."+строка(стр1.ВходитВПапку.Код),".0")
		+ ?(ЗначениеЗаполнено(стр1.Номенклатура), "."+строка(стр1.Номенклатура.Код),".0")
		//строки
	//	+ ?(ЗначениеЗаполнено(стр1.Диаметр), "."+строка(стр1.Диаметр),".0")
		+ ?(ЗначениеЗаполнено(стр1.ПодСтрока), "."+строка(стр1.ПодСтрока),".0")
		
		+
		//?(Флажок3, //+++ 04.10.2016 - ТОЛЬКО новые правила с разделением по диаметру! НО! согласование по правилу БЕЗ диаметра!	
		  ?(ЗначениеЗаполнено(стр1.Диаметр), "."+строка(стр1.Диаметр),".0") 
		//	  , "")
	
		//+++ 07.04.2016 чтобы сохранить "совместимость" со старыми правилами ""
		+ ?(ЗначениеЗаполнено(стр1.ВидДефектаДляУценки), "."+строка(стр1.ВидДефектаДляУценки.Код),"")
		
		//+++ для всех категорий - единый ID
		//+ ?(ЗначениеЗаполнено(стр1.Категория), ?(ЗначениеЗаполнено(стр1.ВидДефектаДляУценки),"", ".0")+"."+строка(стр1.Категория),"")

		+";" );
КонецФункции	

функция получитьТекстПравилаПоID(стрID)
текстПравила = "";   спис = новый массив;
i= найти(стрID, ".");  L=стрДлина(стрID);
пока i>0 цикл
стр1 = лев(стрID, i-1);  стрID = прав(стрID, L-i);
спис.Добавить(стр1);
i= найти(стрID, ".");  L=стрДлина(стрID);
КонецЦикла;

//7 полей должно быть
текстПравила = спис[0];
текстПравила = текстПравила + ?(спис[1]="0","", " ; " + строка( справочники.ТипыЦенНоменклатуры.НайтиПоКоду( спис[1] ))  );

текстПравила = текстПравила + ?(спис[2]="0","", " ; Производитель: " + строка( справочники.Производители.НайтиПоКоду( спис[2] ))  );
текстПравила = текстПравила + ?(спис[3]="0","", " ; Ном.Группа: " + строка( справочники.НоменклатурныеГруппы.НайтиПоКоду( спис[3] )) );
текстПравила = текстПравила + ?(спис[4]="0","", " ; В Папке: " + строка( справочники.Номенклатура.НайтиПоКоду( спис[4] )) );
текстПравила = текстПравила + ?(спис[5]="0","", " ; Товар: " + спис[5] );
//текстПравила = текстПравила + ?(спис[6]="0","", " ; D: " + спис[6] );
текстПравила = текстПравила + ?(спис[6]="0;" или спис[6]="0", "", " ; Построка: " + спис[6] );

//// 04.10.2016 - в новой системе - с учетом диаметра?  согласование будет по правилу БЕЗ диаметра!!!
//
//Флажок3 = константы.ЦенообразованиеПоКатегориям.Получить(); 
//Если Флажок3 и спис.Количество()>7 тогда 
//	текстПравила = текстПравила + ?(спис[7]="","", " ; Диаметр: "  + строка( спис[7] )  );
//	Если спис.Количество()>8 тогда 
//		текстПравила = текстПравила + ?(спис[8]="0;" или спис[7]="0","", " ; ВидДефектаДляУценки: "  + строка( справочники.ВидДефектаДляУценки.НайтиПоКоду( спис[8] ))  );
//	КонецЕсли;
//иначеЕсли спис.Количество()>7 тогда //+++ 07.04.2016

Если спис.Количество()>7 тогда //+++ 07.04.2016
	текстПравила = текстПравила + ?(спис[7]="0;" или спис[7]="0","", " ; ВидДефектаДляУценки: "  + строка( справочники.ВидДефектаДляУценки.НайтиПоКоду( спис[7] ))  );
КонецЕсли;

//Если спис.Количество()>8 тогда //+++ 05.09.2016
//	текстПравила = текстПравила + ?(спис[8]="0;" или спис[8]="0","", " ; Категория: "  + строка(спис[8])  );
//КонецЕсли;

возврат текстПравила;		
КонецФункции	

//ДОП.функция
функция ЗаполнитьИзмПоля(стар, нов, ОдинаковыеТаблицы=ЛОЖЬ)
   текстЖИ1 = "";	
   //если НЕ ОдинаковыеТаблицы тогда
   // 	Если стар.Приоритет <> нов.НомерСтроки тогда // сдвиг
   //			текстЖИ1 ="Приоритет: "+строка(стар.Приоритет)+">>"+строка(нов.НомерСтроки)+"; ";
   //		КонецЕсли;	
   //КонецЕсли;
   
   Если стар.Выключено <> нов.Выключено тогда // сдвиг
	   текстЖИ1 =текстЖИ1+?(нов.Выключено, "ВЫКЛючено; ", "ВКЛючено; ");
   КонецЕсли;	
   Если стар.ТипЦен <> нов.ТипЦен тогда  // другой тип цен!
	   текстЖИ1 =текстЖИ1+" ТипЦен: "+строка(стар.ТипЦен)+">>"+строка(нов.ТипЦен)+"; ";
   КонецЕсли;	   
   Если стар.СкидкаНаценка <> нов.СкидкаНаценка тогда // скидка отсрочки
	   текстЖИ1 =текстЖИ1+" СкидкаНаценка: "+строка(стар.СкидкаНаценка)+">>"+строка(нов.СкидкаНаценка)+"; ";
   КонецЕсли;	 
   Если стар.Бонус <> нов.Бонус тогда
	   текстЖИ1 =текстЖИ1+" Бонус: "+строка(стар.Бонус)+">>"+строка(нов.Бонус)+"; ";
   КонецЕсли;	
   Если стар.СкидкаПредоплаты <> нов.СкидкаПредоплаты тогда
	   текстЖИ1 =текстЖИ1+" СкидкаПредоплаты: "+строка(стар.СкидкаПредоплаты)+">>"+строка(нов.СкидкаПредоплаты)+";";
   КонецЕсли;	
//===========================ОСНОВНЫЕ ПОЛЯ============================
Если НЕ ОдинаковыеТаблицы тогда
 Если стар.ВидТовара<> нов.ВидТовара тогда // сдвиг
	   текстЖИ1 =текстЖИ1+" ВидТовара: "+строка(стар.ВидТовара)+">>"+строка(нов.ВидТовара)+";";
   КонецЕсли;	
  Если стар.Производитель<> нов.Производитель тогда // сдвиг
	   текстЖИ1 =текстЖИ1+" Производитель: "+строка(стар.Производитель)+">>"+строка(нов.Производитель)+";";
   КонецЕсли;	
  Если стар.НоменклатурнаяГруппа<>нов.НоменклатурнаяГруппа тогда // сдвиг
	   текстЖИ1 =текстЖИ1+" Ном.Группа: "+строка(стар.НоменклатурнаяГруппа)+">>"+строка(нов.НоменклатурнаяГруппа)+";";
   КонецЕсли;	
  Если стар.ВходитВПапку<> нов.ВходитВПапку тогда // сдвиг
	   текстЖИ1 =текстЖИ1+" ВходитВПапку: "+строка(стар.ВходитВПапку)+">>"+строка(нов.ВходитВПапку)+";";
   КонецЕсли;	
	Если стар.Диаметр <> нов.Диаметр тогда // сдвиг
	   текстЖИ1 =текстЖИ1+" Диаметр: "+строка(стар.Диаметр)+">>"+строка(нов.Диаметр)+"; ";
   КонецЕсли;	
   Если стар.ПодСтрока <> нов.ПодСтрока тогда // сдвиг
	   текстЖИ1 =текстЖИ1+" ПодСтрока: "+строка(стар.ПодСтрока)+">>"+строка(нов.ПодСтрока)+"; ";
   КонецЕсли;	
   Если стар.Номенклатура <> нов.Номенклатура тогда // сдвиг
	   текстЖИ1 =текстЖИ1+" Номенклатура: "+строка(стар.Номенклатура)+">>"+строка(нов.Номенклатура)+"; ";
   КонецЕсли;	
КонецЕсли;

   возврат текстЖИ1;		   
КонецФункции

Процедура ТабличнаяЧастьПравилаНоменклатурнаяГруппаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элемент.СписокВыбора.Очистить();
	ТекДанные =ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
	Если Не ЗначениеНеЗаполнено(ТекДанные.Производитель) Тогда
		Запрос =Новый Запрос;
		Запрос.Текст = "   ВЫБРАТЬ РАЗЛИЧНЫЕ
		|НоменклатурнаяГруппа ИЗ
		|Справочник.Номенклатура ГДЕ Производитель = &Производитель
		| И НоменклатурнаяГруппа<>Значение(Справочник.НоменклатурныеГруппы.ПустаяСсылка)" ;
		
		Запрос.УстановитьПараметр("Производитель",ТекДанные.Производитель);
		
		Выборка=Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Элемент.СписокВыбора.Добавить(Выборка.НоменклатурнаяГруппа);
		КонецЦикла;	
	КонецЕсли;

КонецПроцедуры

Процедура ТабличнаяЧастьПравилаВходитВПапкуНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	 ТекДанные =ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
	//СтандартнаяОбработка = Ложь;
	Если ТекДанные.ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
		Элемент.СписокВыбора.Очистить();	
		Для сч=0 по СписокПапкиДисков.Количество()-1 Цикл
			Элемент.СписокВыбора.Добавить(СписокПапкиДисков[сч].Значение);
		КонецЦикла;	
		
	ИначеЕсли ТекДанные.ВидТовара = Перечисления.ВидыТоваров.Шины Тогда
		Элемент.СписокВыбора.Очистить();	
		Для сч=0 по СписокПапкиШин.Количество()-1 Цикл
			Элемент.СписокВыбора.Добавить(СписокПапкиШин[сч].Значение);
		КонецЦикла;	
	КонецЕсли;

КонецПроцедуры

Процедура ОсновныеДействияФормыПроверить(Кнопка)
	
	ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоКоду(274); //Контроль цен ФОП
	ИмяФайла = ПолучитьИмяВременногоФайла(); 
	ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
	ДвоичныеДанные.Записать(ИмяФайла); 
	
	Обработка = ВнешниеОтчеты.Создать(ИмяФайла); 
	форма1 = Обработка.ПолучитьФорму("Отчет");
	форма1.Контрагент = Контрагент;
	форма1.ПоОстаткам = истина;
	форма1.Открыть();
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтаФорма.Модифицированность тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Сохранить изменения правил?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			КнопкаВыполнитьНажатие(неопределено);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ТабличнаяЧастьПравилаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекСтр = ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекСтр.ТипЦен) тогда 
		ТекСтр.ТипЦен=ТипЦенБазовая;
	КонецЕсли;
	
	//29.10.2015 - СРАЗУ определяем изменение....  
	//если НоваяСтрока  или в старой что-то изменилось....
	ТекСтр.Изм = истина;
	ЭлементыФормы.КоманднаяПанельПравила.Кнопки.ВыгрузитьВStore.Доступность = ЛОЖЬ; // 04.02.2016 - нельзя выгружать
	ЭтаФорма.Модифицированность = истина;
	
КонецПроцедуры

Процедура КоманднаяПанельПравилаПолитика(Кнопка)
	
	Если не Контрагент.ПриниматьЗаказыЧерезСайт тогда
		Предупреждение("Для контрагента "+строка(Контрагент)+" - не требуется создания документа ""Политика ценообразования"" ");
		Возврат;
	КонецЕсли;	
	
	Если ЭтаФорма.Модифицированность тогда
		Предупреждение("Выполните Провырку и Сохраните изменения правил.
					   | Только после этого можно создать документ.");
		Возврат;
	КонецЕсли;
	
	попытка
	док = документы.ПолитикаЦенообразования.СоздатьДокумент();
	док.Контрагент = Контрагент;
	док.Дата = ТекущаяДата();
	док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	
	рез = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(Контрагент, неопределено, Истина, неопределено);
	//Правила.Очистить();
	док.Правила.Загрузить( рез.Правила );
	//Параметры.Очистить();
	док.Параметры.Загрузить( рез.Параметры );
    док.Записать();
	Сообщить("Создан новый Документ: "+строка(док), СтатусСообщения.Информация);
	Исключение
		Сообщить("Ошибка при записи Документа : "+ОписаниеОшибки(), СтатусСообщения.Внимание);
	КонецПопытки;
	
КонецПроцедуры

Процедура КоманднаяПанельПравилаЗагрузить(Кнопка)
	
////------------обновление нижней табл.Общих правил - по верхней! НЕ из регистра ---------------------	
	// Режим = РежимДиалогаВопрос.ДаНет;
	//Ответ = Вопрос("Сравнить правила Клиента
	//			   |  с Общими правилами?", Режим, 10, КодВозвратаДиалога.Да);
	//Если Ответ = КодВозвратаДиалога.Да Тогда
	 
		АнализПравилКлиента();  //только измененные!
			
		Если ТабличнаяЧастьПравила.Количество()>0 тогда			  
			ЭлементыФормы.ТабличнаяЧастьПравила.ТекущаяСтрока =  ТабличнаяЧастьПравила[0];
		КонецЕсли;
		
	 ЭлементыФормы.ТабличнаяЧастьПравила.Колонки.НомерСтроки.Видимость = Истина; //04.02.2016
     ЭлементыФормы.ТабличноеПолеОбщихПравил.Колонки.ПриоритетКлиента.Видимость = Истина;
		
	//Иначе
	// ЭлементыФормы.ТабличноеПолеОбщихПравил.Колонки.ПриоритетКлиента.Видимость = ЛОЖЬ;
	//	 ЗаполнитьДанныеТаблицы(ЛОЖЬ, ЛОЖЬ, ЛОЖЬ, ИСТИНА); // не выключаем!
	//КонецЕсли;
	
		
КонецПроцедуры


//+++ новая функция Анализа - в цикле - каждому правилу клиента - своё общее правило
процедура АнализПравилКлиента( флВыключатьПриПревышении=ЛОЖЬ, ТолькоИзмененные=Истина)
	
	Если ЗначениеНеЗаполнено(Контрагент) Тогда
		Предупреждение("НЕ выбран контрагент!", 10);
		Возврат;
	КонецЕсли;	
	
	Если ТабличнаяЧастьПравила.Количество()=0 Тогда
		Предупреждение("НЕТ персональных правил Клиента!", 10);
		Возврат;
	КонецЕсли;	

	
//+++ 22.10.2015 -------------------------НОВЫЙ АНАЛИЗ------------------------------
// стр1 - строка перс.правил  - находим ПЕРВУЮ КОНФЛИКТНУЮ СТРОКУ В ОБЩИХ ПРАВИЛАХ стр0

ЗаполнитьДанныеТаблицы(ЛОЖЬ, ЛОЖЬ, ЛОЖЬ, ИСТИНА);

ТабличноеПолеОбщихПравил.Сортировать("Приоритет");

// записываем В НОВУЮ ТАБЛИЦУ ТабличноеПолеОбщихПравил1
ТабличноеПолеОбщихПравил1 = ТабличноеПолеОбщихПравил.Скопировать();
ТабличноеПолеОбщихПравил1.Очистить(); 


////08.12.2015 - контроль изменений со старыми правилами   ========================		
	НаборСтар = РегистрыСведений.ПравилаЦенообразования.СоздатьНаборЗаписей();//все записи по Контрагенту!
	НаборСтар.Отбор.Контрагент.Установить(Контрагент);
	НаборСтар.Прочитать();  //данные из регистра правил (старые)

	ТабличноеПолеОбщихПравил.Сортировать("Приоритет"); //09.12.2015 - находим первое правило!
	если ТабличноеПолеОбщихПравил.Колонки.Найти("КолСовпадений")=неопределено тогда
		ТабличноеПолеОбщихПравил.Колонки.Добавить("КолСовпадений");
	КонецЕсли;
	
для каждого стр1 из ТабличнаяЧастьПравила цикл
	ID1 = получитьIDправила(стр1);
	НеНашли = истина;  
	стр1.ФлПревышения=0;

	//+++( 08.12.2015 - обязательная проверка по ID из старых правил клиента
	НетВСтар = Истина;
	Для каждого стрСтар из НаборСтар цикл
	 ID0 = получитьIDправила(стрСтар);
	 Если ID0 = ID1 тогда
		НетВСтар  = ЛОЖЬ; 	Прервать;
	 КонецЕсли;	
 	КонецЦикла;
	Если НетВСтар тогда
		стр1.изм = истина;
	КонецЕсли;
	//+++)
	
//1)--------------------------точный поиск----------------	
	для каждого стр0 из ТабличноеПолеОбщихПравил цикл
		если стр1.ВидТовара<>стр0.ВидТовара тогда 
			продолжить;
		КонецЕсли;
		
		ID0 = получитьIDправила(стр0);
		Если ID1 = ID0 тогда // точное совпадение!
			стр11 = ТабличноеПолеОбщихПравил1.Добавить();
			ЗаполнитьЗначенияСвойств(стр11, стр0);
			
			стр11.ПриоритетКлиента       = стр1.НомерСтроки;
	        стр11.СкидкаНаценкаКлиента   = стр1.СкидкаНаценка + стр1.Бонус; //19.12.2015 !!! БОНУС
			стр11.СкидкаПредоплатыКлиента= стр1.СкидкаПредоплаты;
			
			стр11.ВидДефектаДляУценки    = стр1.ВидДефектаДляУценки;  //04.07.2016
		
		//+++ 07.12.2015 - пересчет СкидкаНаценкаКрОпт
			если стр1.ТипЦен<>стр11.ТипЦен тогда
				сообщить("Правило № "+строка(стр1.НомерСтроки)+" - тип цен: "+строка(стр1.ТипЦен)
						  +" - отличается от типа цен Общих правил: "+строка(стр11.ТипЦен), СтатусСообщения.Внимание);
				
				скидкаПересчета = ?(стр11.СкидкаНаценкаКрОпт=0, 0, стр11.СкидкаНаценкаКрОпт);  //08.12.2015 - 12.02.2016
			
				 Если скидкаПересчета<>0 тогда	
					если стр11.ТипЦен=справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00008")   //из Базовой в Кр.Опт
						и стр1.ТипЦен=справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005") тогда
					стр11.СкидкаНаценкаКлиента   =-(1 - (1+стр1.СкидкаНаценка/100)*(1+скидкаПересчета/100))*100; 
					стр1.ТипЦен = стр11.ТипЦен;
					стр1.СкидкаНаценка = стр11.СкидкаНаценкаКлиента;
					сообщить(" Тип цен автоматически изменен на "+строка(стр1.ТипЦен)+" Скидка: "+строка(стр1.СкидкаНаценка), СтатусСообщения.Информация);
					
					Иначеесли стр1.ТипЦен=справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00008")
							и стр11.ТипЦен=справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005") тогда
					стр11.СкидкаНаценкаКлиента   =стр1.СкидкаНаценка-скидкаПересчета; //08.12.2015
					стр1.ТипЦен = стр11.ТипЦен;
					стр1.СкидкаНаценка = стр11.СкидкаНаценкаКлиента;
					сообщить(" Тип цен автоматически изменен на "+строка(стр1.ТипЦен)+" Скидка: "+строка(стр1.СкидкаНаценка), СтатусСообщения.Информация);
					КонецЕсли;	
					КонецЕсли;
			КонецЕсли;
			//+++)
 				
			стр1.ФлПревышения = ПолучитьФлПревышения(стр11);
			НеНашли = ложь;
			//прервать; //09.12.2015 ДАЛЬШЕ НЕ ПРОВЕРЯЕМ !!!
		КонецЕсли;	
	КонецЦикла;
//	
//2)-------------частичный поиск (не всех! а только первого!) конфликтного правила--------------------------------	
	Если НеНашли тогда
		для каждого стр0 из ТабличноеПолеОбщихПравил цикл
			стр0.КолСовпадений = 0;
			если стр1.ВидТовара<>стр0.ВидТовара тогда 
				продолжить;
			КонецЕсли;
			стр0.КолСовпадений = ?(стр1.ВидТовара=стр0.ВидТовара,1,0)
			+ ?(стр1.Производитель = стр0.Производитель и не стр1.Производитель.Пустая(),2,0)
			+ ?(стр1.НоменклатурнаяГруппа = стр0.НоменклатурнаяГруппа и не стр1.НоменклатурнаяГруппа.Пустая(),4,0);
			
			//------------------------------------если что-то уже совпало------------------------------
			стр0.КолСовпадений = стр0.КолСовпадений 
		 	+ ?(  ( (стр1.Номенклатура = стр0.Номенклатура и не стр1.Номенклатура.Пустая() и не стр1.Номенклатура.Пустая())
				   или (стр0.КолСовпадений>1 и  не стр1.Номенклатура.Пустая() и стр0.Номенклатура.Пустая() ) // есть совпадение по производителю и/или  ном.группе
			 	   ),8,0)
			-?(  ( (стр0.КолСовпадений>1 и стр1.Номенклатура.Пустая() и  не стр0.Номенклатура.Пустая()) 
				  )  , 1, 0)  //если в общ. есть 1 товар, а в частных нет - НЕ проверяем!
		
			+ ?(  ( (стр1.ПодСтрока = стр0.ПодСтрока и  стр1.ПодСтрока<>"" и стр0.ПодСтрока<>"")
				   или (стр0.КолСовпадений>1 и стр1.ПодСтрока<>"" и стр0.ПодСтрока="") // есть совпадение по производителю и/или  ном.группе
				   ) , 16, 0)
			-?(  ( (стр0.КолСовпадений>1 и стр1.ПодСтрока = "" и  стр0.ПодСтрока<>"") 
				  )  , 1, 0) //если в общ. есть 1 товар, а в частных нет - НЕ проверяем!
	
			+ ?(   ( (стр1.ВходитВПапку = стр0.ВходитВПапку и  не стр1.ВходитВПапку.Пустая() и не стр0.ВходитВПапку.Пустая())
				   или (стр0.КолСовпадений>1 и  не стр1.ВходитВПапку.Пустая() и стр0.ВходитВПапку.Пустая() ) // есть совпадение по производителю и/или  ном.группе
			       ) ,32,0)
				   
				   // 04.07.2016
			   + ?(  стр1.ВидДефектаДляУценки = стр0.ВидДефектаДляУценки 
			       или (стр0.КолСовпадений>1 и  не стр1.ВидДефектаДляУценки.Пустая() и стр0.ВидДефектаДляУценки.Пустая() ) // дефект клиента сравним с общим без дефекта
			         ,64,0)
							   
			-?(  ( (стр0.КолСовпадений>1 и стр1.ВходитВПапку.Пустая() и  не стр0.ВходитВПапку.Пустая())
				  )  , 1, 0) //если в общ. есть 1 товар, а в частных нет - НЕ проверяем!
			;	   
		//	сообщить( строка(стр1.НомерСтроки)+" - "+строка(стр0.Приоритет)+" = "+строка(стр0.КолСовпадений)+" совпадений"); //!!! тестовая
		КонецЦикла;
	
		ТабличноеПолеОбщихПравил.Сортировать("КолСовпадений Убыв, Приоритет");
		максКолСовпад = ТабличноеПолеОбщихПравил[0].КолСовпадений;
		
//3-----------------------По общим правилам (должны быть внизу - только видТовара!!!)---------------------------------------		
		Если максКолСовпад=1 или максКолСовпад=5 тогда // по виду товара,  вид+НомГруппа (какой-то новый поставщик... по общим правилам! и ВЫКЛЮЧАЕТСЯ! )
			ТабличноеПолеОбщихПравил.Сортировать("Приоритет Убыв");
			для каждого стр0 из ТабличноеПолеОбщихПравил цикл
				если стр1.ВидТовара=стр0.ВидТовара тогда 
					стр0.КолСовпадений =максКолСовпад + 64; 	НеНашли = ложь;		
					максКолСовпад = стр0.КолСовпадений;
					ТабличноеПолеОбщихПравил.Сортировать("КолСовпадений Убыв");
					прервать;
				КонецЕсли;
		    КонецЦикла;
			ТабличноеПолеОбщихПравил.Сортировать("Приоритет");
			ТабличноеПолеОбщихПравил.Сортировать("КолСовпадений Убыв");
		иначе
			НеНашли = ложь;
		КонецЕсли;	
		
		
//--------------------Формирование новой таблицы сравнения------------------------------		
		для каждого стр0 из ТабличноеПолеОбщихПравил цикл
			Если стр0.КолСовпадений < максКолСовпад тогда  //ВСЕ правила с макс.совпадением
				прервать;
			КонецЕсли;	
			
		стр11 = ТабличноеПолеОбщихПравил1.Добавить();
		ЗаполнитьЗначенияСвойств(стр11, стр0);
		
		стр11.ПриоритетКлиента     = стр1.НомерСтроки;
        стр11.СкидкаНаценкаКлиента   =стр1.СкидкаНаценка + стр1.Бонус; //19.12.2015 !!! БОНУС
		стр11.СкидкаПредоплатыКлиента=стр1.СкидкаПредоплаты;
				
		//+++ 07.12.2015 - пересчет СкидкаНаценкаКрОпт
			если стр1.ТипЦен<>стр11.ТипЦен тогда
				сообщить("Правило № "+строка(стр1.НомерСтроки)+" - тип цен отличается от типа цен по общему правилу №"+строка(стр11.Приоритет), СтатусСообщения.Внимание);
				
				скидкаПересчета = ?(стр11.СкидкаНаценкаКрОпт=0, стр11.СкидкаНаценка, стр11.СкидкаНаценкаКрОпт);   //08.12.2015
			
				 Если скидкаПересчета<>0 тогда	
					если стр11.ТипЦен=справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00008")   //из Базовой в Кр.Опт
						и стр1.ТипЦен=справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005") тогда
					стр11.СкидкаНаценкаКлиента   =-(1 - (1+стр1.СкидкаНаценка/100)*(1+скидкаПересчета/100))*100; 
					сообщить(" Тип цен автоматически изменен с "+строка(стр1.ТипЦен)+" "+строка(стр1.СкидкаНаценка)+" >> "+строка(стр11.ТипЦен)+" Скидка: "+строка(стр11.СкидкаНаценкаКлиента), СтатусСообщения.Информация);
					стр1.ТипЦен =стр11.ТипЦен;
					стр1.СкидкаНаценка = стр11.СкидкаНаценкаКлиента;
					
					Иначеесли стр1.ТипЦен=справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00008")
							и стр11.ТипЦен=справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005") тогда
					стр11.СкидкаНаценкаКлиента   =стр1.СкидкаНаценка-скидкаПересчета; //08.12.2015
					сообщить(" Тип цен автоматически изменен с "+строка(стр1.ТипЦен)+" "+строка(стр1.СкидкаНаценка)+" >> "+строка(стр11.ТипЦен)+" Скидка: "+строка(стр11.СкидкаНаценкаКлиента), СтатусСообщения.Информация);
					стр1.ТипЦен =стр11.ТипЦен;
					стр1.СкидкаНаценка = стр11.СкидкаНаценкаКлиента;
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
			//+++)

				
			стр1ФлПревышения = ПолучитьФлПревышения(стр11);
			если стр1ФлПревышения > стр1.ФлПревышения тогда
				стр1.ФлПревышения = стр1ФлПревышения;
			КонецЕсли;
		КонецЦикла;
	ТабличноеПолеОбщихПравил.Сортировать("Приоритет");

	КонецЕсли;		   
	
КонецЦикла;//по правилам клиента

ТабличноеПолеОбщихПравил = ТабличноеПолеОбщихПравил1.Скопировать();

для каждого стр1 из ТабличнаяЧастьПравила цикл
	если (стр1.ФлПревышения=0 и стр1.Выключено) тогда  // автоВКЛючение правил также по флажку!!!
		Если флВыключатьПриПревышении тогда
			стр1.Выключено = ложь;  
			стр1.Изм = истина;
			Сообщить("ВКЛючено правило №"+строка(стр1.НомерСтроки)+", которое НЕ превышает скидок общ.правил!", СтатусСообщения.Информация);
		иначе	
			Сообщить("Правило №"+строка(стр1.НомерСтроки)+" будет ВКЛючено при записи правил!", СтатусСообщения.Информация);
		КонецЕсли;	
//----------------ТОЛЬКО ЕСЛИ ИЗМЕНИЛИ!-----------------------------		
	иначеЕсли (стр1.ФлПревышения<>0 и НЕ стр1.Выключено) тогда     
		Если ( (ТолькоИзмененные и стр1.Изм) //11.12.2015 - ТОЛЬКО ЕСЛИ ИЗМЕНИЛИ!
			 или (не ТолькоИзмененные)
			 ) тогда
			Если флВыключатьПриПревышении тогда
			стр1.Изм = истина;
			стр1.Выключено = истина;  // автоВЫКЛючение правил СРАЗУ!
			Сообщить("ВЫКЛючено правило №"+строка(стр1.НомерСтроки)
			+?(стр1.ФлПревышения=22,", по исключительному общему правилу!",", которое превышает скидку общ.правил!"), СтатусСообщения.Внимание);
			иначе
			Сообщить("Правило №"+строка(стр1.НомерСтроки)+" - будет ВЫКЛючено потому, что "
			+?(стр1.ФлПревышения=22," такое правило уже есть в исключительных общих правилах для всех клиентов!", "превышает скидку общ.правил!"), СтатусСообщения.Внимание);
			КонецЕсли;
		иначе
			Сообщить("Скидка по правилу №"+строка(стр1.НомерСтроки)+" - превышает скидку общ.правила!!! НО Автовыключение работает ТОЛЬКО по изменененным правилам!", СтатусСообщения.ОченьВажное);
		КонецЕсли;
	КонецЕсли;
КонецЦикла;	

   Сообщить("----------------------------------");
   
КонецПроцедуры //конец Анализа!


//1000, 1100 - мен.ТГ или  11 или 10 - рук.
функция ПолучитьФлПревышения( ДанныеСтроки )
	рез = 0;
	Если (ДанныеСтроки.Приоритет<0) тогда //СПЕЦ ПРАВИЛА!
		возврат 22;
	КонецЕсли;	
	
	Если (ДанныеСтроки.МаксСкидкаНаценкаРук<>0 и ДанныеСтроки.СкидкаНаценкаКлиента<=ДанныеСтроки.МаксСкидкаНаценка)
		или  (ДанныеСтроки.МаксСкидкаНаценкаРук=0 и ДанныеСтроки.СкидкаНаценкаКлиента<ДанныеСтроки.МаксСкидкаНаценка) тогда // меньше - или меньше + МаксСкидкаНаценка
		рез = 1000; // ярко красный
			
	ИначеЕсли ДанныеСтроки.СкидкаНаценкаКлиента<ДанныеСтроки.МаксСкидкаНаценкаРук 
		и ДанныеСтроки.МаксСкидкаНаценкаРук<>0 тогда 
		рез = 10;
	КонецЕсли;
	
	//+++ предоплатные проверки 18.12.2014
	Если (ДанныеСтроки.МаксСкидкаПредоплатыРук<>0 и ДанныеСтроки.СкидкаПредоплатыКлиента<=ДанныеСтроки.МаксСкидкаПредоплаты)
		или (ДанныеСтроки.МаксСкидкаПредоплатыРук=0 и ДанныеСтроки.СкидкаПредоплатыКлиента<ДанныеСтроки.МаксСкидкаПредоплаты) тогда 
		рез = рез + 100;
 	ИначеЕсли ДанныеСтроки.СкидкаПредоплатыКлиента<ДанныеСтроки.МаксСкидкаПредоплатыРук
		     и ДанныеСтроки.МаксСкидкаПредоплатыРук<>0 тогда 
		рез = рез + 1;
 	КонецЕсли;

	возврат рез;
КонецФункции

Процедура ТабличнаяЧастьПравилаСкидкаНаценкаПриИзменении(Элемент)
	
	максПроц 		= 200;
	минПроцСкидки   = -70;
	
	текСтр = ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
	Если текСтр.СкидкаНаценка>0 тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Вы уверены что нужна +Наценка, а не Скидка на тип цен "+строка(текСтр.ТипЦен)+"?", Режим, 30);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
		    текСтр.СкидкаНаценка = -текСтр.СкидкаНаценка;
			текСтр.СкидкаНаценка = ?(текСтр.СкидкаНаценка<минПроцСкидки, минПроцСкидки, текСтр.СкидкаНаценка);
			Предупреждение("Установлена Скидка в "+строка(текСтр.СкидкаНаценка)+"% от тип цен "+строка(текСтр.ТипЦен),10);
		Иначе//наценка
			Если текСтр.СкидкаНаценка>=максПроц тогда 
				Режим = РежимДиалогаВопрос.ДаНет;
				Ответ = Вопрос("Наценка не может быть более "+строка(максПроц)+" %
							   |Хотите установить фиксированную цену
							   | "+строка(текСтр.СкидкаНаценка)+" руб.?", Режим, 180);
				Если Ответ = КодВозвратаДиалога.Нет Тогда
					текСтр.СкидкаНаценка = 0;			   
				КонецЕсли;
			ИначеЕсли текСтр.СкидкаНаценка<минПроцСкидки тогда
				текСтр.СкидкаНаценка = ?(текСтр.СкидкаНаценка<минПроцСкидки, минПроцСкидки, текСтр.СкидкаНаценка);  // макс. до -90  при расчете!
				Предупреждение("Установлена Скидка в "+строка(текСтр.СкидкаНаценка)+"% от тип цен "+строка(текСтр.ТипЦен),10);
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;	

	Если НЕ ЗначениеЗаполнено(текСтр.ВидТовара) тогда
		Предупреждение("Не заполнено обязательное поле ""Вид товара""!",10);	
	//Иначе
		//ЗаполнитьДанныеТаблицы(ЛОЖЬ, Истина); // не из регистра, вставлять соответствия!
	КонецЕсли;
	
	//Если текСтр.ОТК > 0 Тогда
	//	Ответ = Вопрос("Для этого правила установлен процент ОТК, 
	//				   |пересчитать скидку с учетом ОТК?", РежимДиалогаВопрос.ДаНет);
	//	Если Ответ = КодВозвратаДиалога.Да Тогда
	//		текСтр.СкидкаНаценка = текСтр.СкидкаНаценка +
	//		((текСтр.СкидкаНаценка + 100)/100*(текСтр.ОТК*текСтр.Коэф));			   
	//	КонецЕсли;				   	
	//КонецЕсли;
	
КонецПроцедуры

Процедура ТабличнаяЧастьПравилаПередУдалением(Элемент, Отказ)
	Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Вы действительно уверены что нужно УДАЛИТЬ выбранное правило?", Режим, 10, КодВозвратаДиалога.Нет, "УДАЛЕНИЕ!");
		Если Ответ = КодВозвратаДиалога.Да Тогда
        	Отказ = ЛОЖЬ;
		иначе
		   	Отказ = Истина;
		КонецЕсли;
		
		Если Не(Отказ) и Элемент.ТекущиеДанные.Бонус <> 0 ТОгда
			Отказ = Истина;
		КонецЕсли;
КонецПроцедуры


Процедура ТабличнаяЧастьПравилаДиаметрНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
//	текСтр = ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
	формаД = ЭтотОбъект.ПолучитьФорму("ФормаДиаметра");
//	формаД.Диаметр = текСтр.Диаметр;
	формаД.Диаметр = Элемент.Значение;
	рез = формаД.ОткрытьМодально();
	Если рез<>неопределено тогда
//		текСтр.Диаметр = рез;
	Элемент.Значение = рез; 
	КонецЕсли;	
	
КонецПроцедуры


Процедура ТабличноеПолеОбщихПравилСкидкаНаценкаКлиентаПриИзменении(Элемент)
	максПроц 		= 200;
	минПроцСкидки   = -70;
	
текСтр = ЭлементыФормы.ТабличноеПолеОбщихПравил.ТекущиеДанные;	

отбор1 = новый Структура;
для каждого кол1 из ТабличноеПолеОбщихПравил.Колонки цикл
	
	Если Найти(кол1.Имя,"СкидкаНаценка")>0 или Найти(кол1.Имя,"Бонус")>0 или Найти(кол1.Имя,"СкидкаПредоплаты")>0  //+++ 18.12.2014
		или кол1.Имя="Приоритет" или кол1.Имя="ID" или кол1.Имя="ПриоритетКлиента" тогда
		продолжить;
	КонецЕсли;
	
	Если текСтр[кол1.Имя]=Null тогда текЗнач = "";
		иначе текЗнач =	текСтр[кол1.Имя];
	КонецЕсли;
		
	отбор1.Вставить( кол1.Имя, текЗнач );
	  	
КонецЦикла;		

	Если ТабличнаяЧастьПравила.Количество()>0 тогда
		МассКол = ТабличнаяЧастьПравила.НайтиСтроки( отбор1 );
	Иначе
		МассКол=неопределено;
	КонецЕсли;
	
	//+++ 28.01.2014
	Если текСтр.СкидкаНаценкаКлиента=0 тогда
		ВвестиЧисло(текСтр.СкидкаНаценкаКлиента, "Введите % Скидки/Наценки");
	КонецЕсли;	
	
//+++ 24.01.2014 - скидка от Крупного опта
текстСкидку = ?(текСтр.СкидкаНаценкаКлиента<=0,"Скидку",?(текСтр.СкидкаНаценкаКлиента>максПроц,"Цену","Наценку") );

//--------------------пересчет каскадом НЕ НУЖЕН!---------------------------
//Если текСтр.ВидТовара = перечисления.ВидыТоваров.Шины тогда
//	Если текСтр.СкидкаНаценкаКрОпт<>0 тогда 
//	Режим = РежимДиалогаВопрос.ДаНет;
//	Ответ = Вопрос("Пересчитать персональную "+текстСкидку+": "+строка(текСтр.СкидкаНаценкаКлиента)+" 
//				   |""каскадом"" от скидки Крупного Опта: "+строка(текСтр.СкидкаНаценкаКрОпт)+" % ?", Режим, 10, КодВозвратаДиалога.Нет);
//	  Если Ответ = КодВозвратаДиалога.Да Тогда
//		Если текСтр.СкидкаНаценкаКлиента>200 тогда
//			текСтр.СкидкаНаценкаКлиента = текСтр.СкидкаНаценкаКлиента*(1+текСтр.СкидкаНаценкаКрОпт/100);
//		иначе	
//			текСтр.СкидкаНаценкаКлиента = ((1 + текСтр.СкидкаНаценкаКлиента/100)*(1+текСтр.СкидкаНаценкаКрОпт/100) - 1) *100;
//		КонецЕсли;
//	  КонецЕсли;
//	КонецЕсли;
//	//+++ 24.01.2014 - скидка от Крупного опта
//ИначеЕсли текСтр.СкидкаНаценка<>0 тогда
//	Режим = РежимДиалогаВопрос.ДаНет;
//	Ответ = Вопрос("Пересчитать персональную "+текстСкидку+": "+строка(текСтр.СкидкаНаценкаКлиента)+" %
//				   |""каскадом"" от базовой скидки: "+строка(текСтр.СкидкаНаценка)+" %?", Режим, 10, КодВозвратаДиалога.Нет);
//	Если Ответ = КодВозвратаДиалога.Да Тогда
//		Если текСтр.СкидкаНаценкаКлиента>200 тогда
//			текСтр.СкидкаНаценкаКлиента = текСтр.СкидкаНаценкаКлиента*(1+текСтр.СкидкаНаценка/100);
//		иначе	
//		текСтр.СкидкаНаценкаКлиента = ((1 + текСтр.СкидкаНаценкаКлиента/100)*(1+текСтр.СкидкаНаценка/100) - 1) *100;
//		КонецЕсли;
//	КонецЕсли;
//КонецЕсли;	
//	
	
Если МассКол=неопределено или МассКол.Количество()=0 тогда
Режим = РежимДиалогаВопрос.ДаНет;

	//Если ТабличнаяЧастьПравила.Количество()>0 тогда
	//	номСтр1 = ТабличнаяЧастьПравила.Индекс(ЭлементыФормы.ТабличнаяЧастьПравила.ТекущаяСтрока);//+++ 10.02.2014
	//	стр1 = ТабличнаяЧастьПравила.Вставить( номСтр1 );// вставка вверх сдвиг остальных вниз!
	//Иначе
		стр1 = ТабличнаяЧастьПравила.Добавить();
	//КонецЕсли;	
   	стр1.изм = истина;
	
Иначе
	стр1 =МассКол[0];
	//Предупреждение("Изменено правило клиента. Скидка = "+строка(текСтр.СкидкаНаценкаКлиента), 30);
КонецЕсли;	

	ЗаполнитьЗначенияСвойств(стр1, текСтр);
	стр1.СкидкаНаценка    = текСтр.СкидкаНаценкаКлиента;
 	стр1.СкидкаПредоплаты = текСтр.СкидкаПредоплатыКлиента; //+++ 22.12.2014
	//все поля такие же!?
	//стр1.НоменклатурнаяГруппа = справочники.НоменклатурныеГруппы.ПустаяСсылка();
	
	
	Если текСтр.СкидкаНаценкаКлиента<текСтр.МаксСкидкаНаценка или текСтр.СкидкаНаценкаКлиента>максПроц тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Установлена максимально-разрешенная "+?(текСтр.МаксСкидкаНаценка<0,"Скидка",?(текСтр.МаксСкидкаНаценка>максПроц,"Цена", "Наценка") )+" равна "+строка(текСтр.МаксСкидкаНаценка)+" "+?(текСтр.МаксСкидкаНаценка<максПроц," %", " р.")+"
						|Исправить "+?(текСтр.СкидкаНаценкаКлиента<0,"Скидку",?(текСтр.СкидкаНаценкаКлиента>максПроц,"Цену","Наценку") )+" для Клиента на максимальную?",Режим, 30);
		Если Ответ = КодВозвратаДиалога.Да Тогда
    	текСтр.СкидкаНаценкаКлиента = текСтр.МаксСкидкаНаценка; 
		стр1.СкидкаНаценка 			= текСтр.МаксСкидкаНаценка + стр1.Бонус; //+++ 18.12.2014
		Иначе //вот тут должно быть подтверждение от Менеджера товарной группы!
			
			Если текСтр.СкидкаНаценкаКлиента<0 и текСтр.СкидкаНаценкаКлиента<минПроцСкидки тогда //+++ 10.01.2014 - железное обрезание!
				Предупреждение("Скидка не может быть ниже "+строка(минПроцСкидки)+"!", 60);
	        	текСтр.СкидкаНаценкаКлиента = минПроцСкидки; 
			КонецЕсли;
		
			Если ЗначениеЗаполнено(текСтр.НоменклатурнаяГруппа) 
				И НЕ (РольДоступна("ПолныеПрава") или РольДоступна("МенеджерПоЗакупкам")
				      или глТекущийПользователь<>текСтр.НоменклатурнаяГруппа.Ответственный) тогда
				
				текст1 = "Согласуйте "+?(текСтр.СкидкаНаценкаКлиента<0,"Скидку", ?(текСтр.СкидкаНаценкаКлиента>максПроц,"Цену","Наценку") )
				+" "+строка(текСтр.СкидкаНаценкаКлиента)+?(текСтр.СкидкаНаценкаКлиента>максПроц," р.","% ")+" по клиенту: "+строка(Контрагент)
				+" превышающую макс.разрешенную: "+строка(текСтр.МаксСкидкаНаценка)+" на "+строка(текСтр.СкидкаНаценкаКлиента-текСтр.МаксСкидкаНаценка)+"
				|для правила № "+строка(стр1.НомерСтроки)+": "+строка(стр1.Производитель)+" "+строка(стр1.НоменклатурнаяГруппа)
				+?(стр1.Диаметр="","", " D"+стр1.Диаметр) + ?(стр1.ПодСтрока="","", " '"+стр1.ПодСтрока+"' ")
				+?(стр1.Номенклатура.пустая(),"", " только для товара: "+строка(стр1.Номенклатура.Код)+" "+строка(стр1.Номенклатура));
								
				 Предупреждение(текст1+"
				 |с Менеджером тов.группы: "+строка(текСтр.НоменклатурнаяГруппа.Ответственный) ,60);
				 
				 //-------------просто Задача с обратным уведомлением --------------------
				 //задача1 = задачи.ЗадачиПользователя.СоздатьЗадачу();
				 //задача1.Исполнитель = текСтр.НоменклатурнаяГруппа.Ответственный;
				 //задача1.Инициатор   = глТекущийПользователь;
				 //задача1.Дата 		 = ТекущаяДата();
				 //задача1.Оповещение  = истина;
				 //задача1.СрокОповещения = ТекущаяДата();
				 //задача1.СрокИсполнения = ТекущаяДата() + 24 * 3600; // сутки с момента установки
				 //задача1.Наименование = "Согласуйте "+?(текСтр.СкидкаНаценкаКлиента<0,"Скидку", ?(текСтр.СкидкаНаценкаКлиента>максПроц,"Цену","Наценку") )
				 //+" "+строка(текСтр.СкидкаНаценкаКлиента)+?(текСтр.СкидкаНаценкаКлиента>максПроц," р.","% ")+" по клиенту: "+строка(Контрагент);
				 // задача1.Описание = текст1;
				 // задача1.Объект   = Контрагент;
				 // задача1.Записать();
				  
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	//+++ 05.07.2016
	Если текСтр.Приоритет < 0 тогда
		Предупреждение("Исключительное общее правило (""зелёное"" и с отрицательным Приоритетом)
						|   срабатывает раньше, чем любое персональное правило клиента!",60);
		стр1.Приоритет = ТабличнаяЧастьПравила.Количество();
	КонецЕсли;	
	
	ЭтаФорма.Модифицированность = Истина; //Изменили программно!
 	ЭлементыФормы.КоманднаяПанельПравила.Кнопки.ВыгрузитьВStore.Доступность = ЛОЖЬ; // 04.02.2016 - нельзя выгружать

КонецПроцедуры

Процедура ТабличнаяЧастьПравилаДиаметрПриИзменении(Элемент)
	ТабличнаяЧастьПравилаДиаметрНачалоВыбора(Элемент, ложь);
КонецПроцедуры

Процедура ТабличноеПолеОбщихПравилДиаметрПриИзменении(Элемент)
	ТабличнаяЧастьПравилаДиаметрНачалоВыбора(Элемент, ЛОЖЬ);
КонецПроцедуры

Процедура ТабличноеПолеОбщихПравилПриПолученииДанных(Элемент, ОформленияСтрок)
	
Приоритет0=0;	

Для каждого ОформлениеСтроки из ОформленияСтрок цикл
	ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
	
	Если ЗначениеЗаполнено(ДанныеСтроки) тогда
		Если ДанныеСтроки.ПриоритетКлиента<>Null и ДанныеСтроки.ПриоритетКлиента<>0 тогда
			
			//Если Приоритет0<>ДанныеСтроки.Приоритет тогда // при повторении - никак не выделяем!
				Если ДанныеСтроки.СкидкаНаценкаКлиента>200 тогда
					ОформлениеСтроки.ЦветТекста = WebЦвета.ТемноСиний; // Это РУБЛИ !
				КонецЕсли;
				
				Если (ДанныеСтроки.МаксСкидкаНаценкаРук<>0 и ДанныеСтроки.СкидкаНаценкаКлиента<=ДанныеСтроки.МаксСкидкаНаценка)
					или  (ДанныеСтроки.МаксСкидкаНаценкаРук=0 и ДанныеСтроки.СкидкаНаценкаКлиента<ДанныеСтроки.МаксСкидкаНаценка) тогда // меньше - или меньше + МаксСкидкаНаценка
					ОформлениеСтроки.ЦветТекста = WebЦвета.Красный; // ярко красный
						
				ИначеЕсли ДанныеСтроки.СкидкаНаценкаКлиента<ДанныеСтроки.МаксСкидкаНаценкаРук 
					и ДанныеСтроки.МаксСкидкаНаценкаРук<>0 тогда 
					ОформлениеСтроки.ЦветТекста = WebЦвета.ТемноКрасный;
				КонецЕсли;
				
				//+++ предоплатные проверки 18.12.2014
				Если (ДанныеСтроки.МаксСкидкаПредоплатыРук<>0 и ДанныеСтроки.СкидкаПредоплатыКлиента<=ДанныеСтроки.МаксСкидкаПредоплаты)
					или (ДанныеСтроки.МаксСкидкаПредоплатыРук=0 и ДанныеСтроки.СкидкаПредоплатыКлиента<ДанныеСтроки.МаксСкидкаПредоплаты) тогда 
					ОформлениеСтроки.ЦветФона = WebЦвета.Желтый;
	 			ИначеЕсли ДанныеСтроки.СкидкаПредоплатыКлиента<ДанныеСтроки.МаксСкидкаПредоплатыРук
					     и ДанныеСтроки.МаксСкидкаПредоплатыРук<>0 тогда 
					ОформлениеСтроки.ЦветФона = WebЦвета.СветлоЖелтый;
	 			КонецЕсли;

				ОформлениеСтроки.Шрифт = новый Шрифт(ОформлениеСтроки.Шрифт,,,Истина);  //жирный
				Приоритет0=ДанныеСтроки.Приоритет;
			//КонецЕсли;
		
		КонецЕсли;
		
		Если  ДанныеСтроки.Приоритет<=0 тогда  //исключительные правила!
 			ОформлениеСтроки.ЦветТекста = WebЦвета.ТемноЗеленый;
		КонецЕсли;
		
	КонецЕсли;	
КонецЦикла;

КонецПроцедуры

Процедура ТабличнаяЧастьПравилаПриПолученииДанных(Элемент, ОформленияСтрок)
	для каждого стр1 из ОформленияСтрок цикл
		
		стр1.ячейки.Выключено.ОтображатьТекст = ложь;//04.02.2016
		
		Если стр1.данныеСтроки.Выключено тогда
				стр1.ЦветФОНА = WebЦвета.СветлоСерый;
				если стр1.данныеСтроки.Изм тогда
	 			стр1.шрифт = новый Шрифт(стр1.шрифт,,,Истина,Истина); // жирный курсив
				иначе
				стр1.шрифт = новый Шрифт(стр1.шрифт,,,,Истина); //  курсив
			КонецЕсли;
			стр1.ячейки.Выключено.ОтображатьКартинку = Истина;
			стр1.Ячейки.Выключено.Картинка = БиблиотекаКартинок.Закрыть;
		КонецЕсли;	
		Если стр1.данныеСтроки.СкидкаНаценка>200 тогда               // фикс.цена
			стр1.ячейки.СкидкаНаценка.ЦветТекста = webЦвета.Синий;
		КонецЕсли;	
		
		Если стр1.данныеСтроки.ФлПревышения>=100 тогда // 100, 1000 или 1100 
			стр1.ЦветТекста = WebЦвета.Красный; // ярко красный
		ИначеЕсли стр1.данныеСтроки.ФлПревышения>0 и стр1.данныеСтроки.ФлПревышения<=11 тогда  // 1, 10 или 11
			стр1.ЦветТекста = WebЦвета.ТемноКрасный;
		ИначеЕсли стр1.данныеСтроки.ФлПревышения>11 и стр1.данныеСтроки.ФлПревышения<100 тогда //16.12.2015 - исключительные правила
			стр1.ЦветТекста = WebЦвета.ТемноЗеленый;
		КонецЕсли;
		
		//+++ предоплатные проверки 18.12.2014
		Если стр1.данныеСтроки.ФлПревышения=100 или стр1.данныеСтроки.ФлПревышения=1100 тогда 
			стр1.ЦветФона = WebЦвета.Желтый;
 		ИначеЕсли стр1.данныеСтроки.ФлПревышения=1 или стр1.данныеСтроки.ФлПревышения=11 тогда 
			стр1.ЦветФона = WebЦвета.СветлоЖелтый;
 		КонецЕсли;

		Если стр1.данныеСтроки.изм тогда   // изм.цена
			стр1.шрифт = новый Шрифт(стр1.шрифт,,,Истина); // жирный
		КонецЕсли;
		
	КонецЦикла;	
КонецПроцедуры

Процедура КоманднаяПанельПравилаОбновить(Кнопка)
	
	Если ТабличнаяЧастьПравила.Количество()>0 тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос(" При обновлении таблицы правил
					   |все несохраненные правила Клиента
					   |        будут потеряны!
			  		   |Загрузить ранее сохраненные правила?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
		    Возврат;
		КонецЕсли;
	КонецЕсли;
	
	колФиксЦен = КоличествоТоваровСФиксЦенами();	
	ЭтаФорма.Заголовок ="Правила Ценообразования клиента: "+ Контрагент.Наименование
  +?(Контрагент.ДатаСрезаЦен='00010101', "", " по срезу цен от "+формат(Контрагент.ДатаСрезаЦен,"ДФ=dd.MM.yyyy") )
  +?(ЕстьРаспродажа(),"(+Распродажа)","")
  +?(колФиксЦен>0, " - есть "+строка(колФиксЦен)+" фикс.цен","");
	
	//из регистра
	ЗаполнитьДанныеТаблицы(Истина, ЛОЖЬ);
	ЭлементыФормы.КоманднаяПанельПравила.Кнопки.ВыгрузитьВStore.Доступность = Истина; // 04.02.2016 - нельзя выгружать

КонецПроцедуры

Процедура КонтрагентПриИзменении(Элемент)
	
	//для копирования правил от 1 клиента в другого - обновлять не надо!
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос("Получить правила клиента?", Режим, 10);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		КоманднаяПанельПравилаОбновить(неопределено);
		
	иначе  
		Предупреждение("          Внимание!
						|При записи текущих (измененных) правил
						|Все ""старые"" правила клиента: "+строка(Контрагент)+"
						|      будут удалены!", 60);	
		 ВклФлажки(1);
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ТабличнаяЧастьПравилаТипЦенПриИзменении(Элемент)
	
	ТекДанные =ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
	// из Коннект-24 константа типов цен на 04.09.2015
//	стрТиповЦен = "00002,00003,00005,00008,00009,00010,00013,00015,00016,00018,00024,00025,00028,"; 
	стрТиповЦен = "00005,00008"; 
	//+++ 04.09.2015 - нельзя выбирать типы цен, которых нет в Коннект24 
	// - не выгрузится в Store ничего из-за них !!!
	Если Найти(стрТиповЦен, ТекДанные.ТипЦен.Код)=0 Тогда
		Предупреждение("Нельзя выбирать тип цен: "+строка(ТекДанные.ТипЦен)+"
						|Выберите другой тип цен - как в общих правилах!
						|Тип цен должен быть: Базовая или Крупный Опт!", 30);
		ТекДанные.ТипЦен = ТипЦенБазовая;
	КонецЕсли;	

КонецПроцедуры

Процедура КоманднаяПанельПравилаИсторияИзменения(Кнопка)
	
	формаИзменений = РегистрыСведений.ЖурналИзменений.ПолучитьФормуСписка();
	формаИзменений.Отбор.Объект.ВидСравнения = ВидСравнения.Равно;
	формаИзменений.Отбор.Объект.Значение = Контрагент;
	формаИзменений.Отбор.Объект.Использование = Истина;
	
	формаИзменений.Отбор.Событие.ВидСравнения = ВидСравнения.Равно;
	формаИзменений.Отбор.Событие.Значение = "Установка персональных скидок";
	формаИзменений.Отбор.Событие.Использование = Истина;
	
	//блокируем изменение отбора по документу
	формаИзменений.ЭлементыФормы.РегистрСведенийСписок.НастройкаОтбора.Объект.Доступность  = Ложь;
	формаИзменений.ЭлементыФормы.РегистрСведенийСписок.НастройкаОтбора.Событие.Доступность = Ложь;
	Состояние("Идет формирование истории изменений...");
	формаИзменений.Открыть();
	Состояние("");

КонецПроцедуры

//+++ 11.12.2015 новые функции для задач
функция ПолучитьМенТовГруппы(текСтр)
	
	// ДЛЯ ФИЛИАЛОВ - вместо менеджера тов.группы - руководитель направления продаж филиала - Бондаренко
	 флЗаменаМенТГ = Константы.СогласованиеФилиаловВместоМенТГ_РуководительНаправления.Получить()
	 					и глТекущийПользователь.ОсновноеПодразделение.ОбособленноеПодразделение;
						
	Если флЗаменаМенТГ тогда  //27.01.2016 Здесь Тоже только по флагу!
	   МенТовГруппы = глТекущийПользователь.НаправлениеПродаж.Руководитель; 
    Иначе	   
	   
	   Если ЗначениеЗаполнено(текСтр.НоменклатурнаяГруппа) тогда  // Менеджер товарной группы
			МенТовГруппы = текСтр.НоменклатурнаяГруппа.Ответственный;
		иначе
			//автоопределение по виду товара и производителю
			Если текСтр.ВидТовара = перечисления.ВидыТоваров.Диски тогда
				МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Малышев Егор");
			иначеЕсли текСтр.ВидТовара = перечисления.ВидыТоваров.АКБ тогда
				МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Сухачева А.В.");
			иначеЕсли текСтр.ВидТовара = перечисления.ВидыТоваров.Аксессуары тогда
				МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Голубева В.С.");
			иначеЕсли текСтр.ВидТовара = перечисления.ВидыТоваров.Шины тогда //все шины - Горохову
				
			//Contyre Avatyre - Вострилов	
				Если СокрЛП(текСтр.Производитель.Код)=109
				 или СокрЛП(текСтр.Производитель.Код)=3434 тогда
				МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Вострилов А.В.");
			//нКШЗ, Кама, Кама EURO, Viatti -  Никитин И.Б., 
				иначеЕсли СокрЛП(текСтр.Производитель.Код)=39
				 или СокрЛП(текСтр.Производитель.Код)=3279
					или СокрЛП(текСтр.Производитель.Код)=3280 
					или СокрЛП(текСтр.Производитель.Код)=3193
					или СокрЛП(текСтр.Производитель.Код)=64 тогда
					МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Никитин");
				ИначеЕсли СокрЛП(текСтр.Производитель.Код)=36
				 или СокрЛП(текСтр.Производитель.Код)=43 тогда
					МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Горохов");
				ИначеЕсли СокрЛП(текСтр.Производитель.Код)=41
				 или СокрЛП(текСтр.Производитель.Код)=777
				 или СокрЛП(текСтр.Производитель.Код)=32 
				 или СокрЛП(текСтр.Производитель.Код)=22 
				 или СокрЛП(текСтр.Производитель.Код)=67 тогда
					МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Кузьмичева");
				//Импортные - Доколин 
				Иначе	 
					МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Доколин");
				КонецЕсли;
				
			Иначе	 // все другое - тоже к Горохову
				МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Горохов");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли; // конец опр. МенТовГруппы
	
	Если МенТовГруппы = справочники.Пользователи.ПустаяСсылка() тогда
		МенТовГруппы = справочники.Пользователи.НайтиПоКоду("Горохов");
	КонецЕсли;	

	
	возврат МенТовГруппы;
	
КонецФункции

Функция ПолучитьТаблЗадач()
	максПроц = 200;
	рук = ПолучитьРуководителя(глТекущийПользователь); //+++ яштПрочее. берется из подразделения. и если это не филиал, то из группы пользователей
	
таблЗадачи = новый ТаблицаЗначений;
	 таблЗадачи.Колонки.Добавить("НомерСтрокиОснования");
	 таблЗадачи.Колонки.Добавить("Номенклатура");
	 таблЗадачи.Колонки.Добавить("Скидка");
	 таблЗадачи.Колонки.Добавить("СкидкаМин");
	 
	 таблЗадачи.Колонки.Добавить("Исполнитель");
	 таблЗадачи.Колонки.Добавить("Содержание");
	 
	 таблЗадачи.Колонки.Добавить("ID"); //+++ 08.06.2016
	 
	 //таблЗадачи.Колонки.Добавить("ОТК");
	 //таблЗадачи.Колонки.Добавить("Коэф");
	 
	для каждого стр1 из ТабличнаяЧастьПравила цикл
		если не (стр1.ФлПревышения>0 
			 	 и стр1.изм 
			     и стр1.Выключено) тогда
			продолжить;
		КонецЕсли;
		
	текст2 = строка(стр1.ВидТовара)+" "+строка(стр1.Производитель)
				+?(ЗначениеЗаполнено(стр1.НоменклатурнаяГруппа),", ном.группа: "+строка(стр1.НоменклатурнаяГруппа),"")
				+?(ЗначениеЗаполнено(стр1.ВходитВПапку),", из каталога: "+строка(стр1.ВходитВПапку),"")
				+?(стр1.Диаметр="","", ", Диаметр "+стр1.Диаметр) 
				+?(стр1.ПодСтрока="","", ", Наименование содержит '"+стр1.ПодСтрока+"' ")
				+?(стр1.Номенклатура.пустая(),"", ", только для товара: "+строка(стр1.Номенклатура.Код)+" "+строка(стр1.Номенклатура))
				+" Тип цен: "+ Строка(стр1.ТипЦен); //04.02.2016
		
		для каждого ДанныеСтроки из ТабличноеПолеОбщихПравил цикл
			если стр1.НомерСтроки<ДанныеСтроки.ПриоритетКлиента тогда
				продолжить;
			иначеЕсли  стр1.НомерСтроки>ДанныеСтроки.ПриоритетКлиента тогда
				продолжить;
			КонецЕсли;
			
	МенТовГруппы = ПолучитьМенТовГруппы(ДанныеСтроки);
	
	текст0 =?(ДанныеСтроки.СкидкаНаценкаКлиента<0,"Скидку", ?(ДанныеСтроки.СкидкаНаценкаКлиента>максПроц,"Цену","Наценку") )
				+" "+строка(ДанныеСтроки.СкидкаНаценкаКлиента)+?(ДанныеСтроки.СкидкаНаценкаКлиента>максПроц," р.","%")+" превышающую %макс."
				+?(ДанныеСтроки.СкидкаНаценкаКлиента<0,"Скидки", ?(ДанныеСтроки.СкидкаНаценкаКлиента>максПроц,"Цены","Наценки") );
									
	//Если стр1.ОТК>0 тогда  // Плотников, Если по этому правилу есть бонус, то посылаем на согласование всегда менеджеоу ТГ
	//	
	//		текст0 =?(стр1.СкидкаНаценка<0,"Скидку", ?(стр1.СкидкаНаценка>максПроц,"Цену","Наценку") )
	//			+" "+строка(стр1.СкидкаНаценка)+?(стр1.СкидкаНаценка>максПроц," р.","%")+" с учетом того, что по этому правилу установлен ОТК: " + стр1.ОТК + " "
	//			+?(стр1.СкидкаНаценка<0,"Скидки", ?(стр1.СкидкаНаценка>максПроц,"Цены","Наценки") );
	//	
	//	
	//		стрЗадачи = таблЗадачи.Добавить();
	//		
	//		текст1 =" менеджера Тов.Группы "+строка(ДанныеСтроки.МаксСкидкаНаценка)+?(ДанныеСтроки.СкидкаНаценкаКлиента>максПроц," р.","%")
	//		+" на "+строка(ДанныеСтроки.СкидкаНаценкаКлиента-ДанныеСтроки.МаксСкидкаНаценка)+?(ДанныеСтроки.СкидкаНаценкаКлиента>максПроц," р.","%")
	//		+"
	//		|для правила № "+строка(стр1.НомерСтроки)+": ";
	//		
	//		
	//		//25.08.2015 -------формируем список правил по менеджерам-----------------
	//		стрЗадачи.Исполнитель = МенТовГруппы;
	//		стрЗадачи.Содержание = текст0 + текст1 + текст2;
	//		
	//		стрЗадачи.НомерСтрокиОснования = стр1.НомерСтроки;
	//		стрЗадачи.Номенклатура =текст2;
	//		стрЗадачи.Скидка    = стр1.СкидкаНаценка;
	//		стрЗадачи.СкидкаМин = ДанныеСтроки.МаксСкидкаНаценка;
	//		стрЗадачи.ID = получитьIDправила(стр1); //+++ 08.06.2016
	//		
	//		//стрЗадачи.ОТК = стр1.ОТК;
	//		//стрЗадачи.Коэф = стр1.Коэф;
	//				
	//иначе //Плотников, по старому без бонусов
				
	//1.а ====Отсрочка Рук==============================================================================				  
	Если (ДанныеСтроки.СкидкаНаценкаКлиента>ДанныеСтроки.МаксСкидкаНаценка // меньше "-" или меньше "+" мин.наценки
			    и (ДанныеСтроки.МаксСкидкаНаценкаРук<>0 и ДанныеСтроки.СкидкаНаценкаКлиента<ДанныеСтроки.МаксСкидкаНаценкаРук)
			    ) тогда
				стрЗадачи = таблЗадачи.Добавить();
			    МенТовГруппы = рук;
			   
				текст1 =" руководителя "+строка(ДанныеСтроки.МаксСкидкаНаценкаРук)+?(ДанныеСтроки.СкидкаНаценкаКлиента>максПроц," р.","%")
				+" на "+строка(ДанныеСтроки.СкидкаНаценкаКлиента-ДанныеСтроки.МаксСкидкаНаценкаРук)+?(ДанныеСтроки.СкидкаНаценкаКлиента>максПроц," р.","%")
				+"
				|для правила № "+строка(стр1.НомерСтроки)+": ";
				
				//25.08.2015 -------формируем список правил по менеджерам-----------------
				стрЗадачи.Исполнитель = МенТовГруппы;
				стрЗадачи.Содержание = текст0 + текст1 + текст2;
				
				стрЗадачи.НомерСтрокиОснования = стр1.НомерСтроки;
					стрЗадачи.Номенклатура =текст2;
					стрЗадачи.Скидка    = ДанныеСтроки.СкидкаНаценкаКлиента;
					стрЗадачи.СкидкаМин = ДанныеСтроки.МаксСкидкаНаценкаРук;
				стрЗадачи.ID = получитьIDправила(стр1); //+++ 08.06.2016	
	КонецЕсли;
			
	//1.б =====предоплата Рук==================
	Если  ( ДанныеСтроки.СкидкаПредоплатыКлиента>ДанныеСтроки.МаксСкидкаПредоплаты // меньше "-" или меньше "+" мин.наценки
			       и (ДанныеСтроки.МаксСкидкаПредоплатыРук<>0 и ДанныеСтроки.СкидкаПредоплатыКлиента<ДанныеСтроки.МаксСкидкаПредоплатыРук) //+++
                  )
			   тогда // если еще не выключено... то создаём сообщение и задачи...
				стрЗадачи = таблЗадачи.Добавить();
			    МенТовГруппы = рук;
			   
				текст1 = " руководителя "+строка(ДанныеСтроки.МаксСкидкаПредоплатыРук)+?(ДанныеСтроки.СкидкаПредоплатыКлиента>максПроц," р.","%")
				+" на "+строка(ДанныеСтроки.СкидкаПредоплатыКлиента-ДанныеСтроки.МаксСкидкаПредоплатыРук)+?(ДанныеСтроки.СкидкаПредоплатыКлиента>максПроц," р.","%")
				+"
				|для правила № "+строка(стр1.НомерСтроки)+": ";
				
				//25.08.2015 -------формируем список правил по менеджерам-----------------
				стрЗадачи.Исполнитель = МенТовГруппы; // здесь это руководитель
				стрЗадачи.Содержание = текст0 + текст1 + текст2;
				
				стрЗадачи.НомерСтрокиОснования = стр1.НомерСтроки;
				//Если ДанныеСтроки.МаксСкидкаНаценкаРук<>0 и ДанныеСтроки.СкидкаНаценкаКлиента<ДанныеСтроки.МаксСкидкаНаценкаРук тогда
				//	стрЗадачи.Номенклатура =текст2;
				//	стрЗадачи.Скидка    = текСтр.СкидкаНаценкаКлиента;
				//	стрЗадачи.СкидкаМин = текСтр.МаксСкидкаНаценкаРук;
				//Иначе
					стрЗадачи.Номенклатура ="Предоплата: "+текст2;
					стрЗадачи.Скидка    = ДанныеСтроки.СкидкаПредоплатыКлиента;
					стрЗадачи.СкидкаМин = ДанныеСтроки.МаксСкидкаПредоплатыРук;
				//КонецЕсли;
				стрЗадачи.ID = получитьIDправила(стр1); //+++ 08.06.2016	
	КонецЕсли;			
				
//====2.а=======================Отсрочка МенТовГр===================================================================================				
	Если (ДанныеСтроки.МаксСкидкаНаценкаРук<>0 и ДанныеСтроки.СкидкаНаценкаКлиента<=ДанныеСтроки.МаксСкидкаНаценка)
	 или (ДанныеСтроки.МаксСкидкаНаценкаРук=0 и ДанныеСтроки.СкидкаНаценкаКлиента<ДанныеСтроки.МаксСкидкаНаценка) тогда // меньше "-" или меньше "+" мин.наценки
			стрЗадачи = таблЗадачи.Добавить();
			    	   			
				текст1 =" менеджера Тов.Группы "+строка(ДанныеСтроки.МаксСкидкаНаценка)+?(ДанныеСтроки.СкидкаНаценкаКлиента>максПроц," р.","%")
				+" на "+строка(ДанныеСтроки.СкидкаНаценкаКлиента-ДанныеСтроки.МаксСкидкаНаценка)+?(ДанныеСтроки.СкидкаНаценкаКлиента>максПроц," р.","%")
				+"
				|для правила № "+строка(стр1.НомерСтроки)+": ";
				
						
				//25.08.2015 -------формируем список правил по менеджерам-----------------
				стрЗадачи.Исполнитель = МенТовГруппы;
				стрЗадачи.Содержание = текст0 + текст1 + текст2;
				
					стрЗадачи.НомерСтрокиОснования = стр1.НомерСтроки;
					стрЗадачи.Номенклатура =текст2;
					стрЗадачи.Скидка    = ДанныеСтроки.СкидкаНаценкаКлиента;
					стрЗадачи.СкидкаМин = ДанныеСтроки.МаксСкидкаНаценка;
				стрЗадачи.ID = получитьIDправила(стр1); //+++ 08.06.2016	
			//иначе если уже выключено - ничего не делаем!	
	КонецЕсли;	
	
//====2.б =================Предоплата МенТовГр===================================
   Если (ДанныеСтроки.МаксСкидкаПредоплатыРук<>0 и ДанныеСтроки.СкидкаПредоплатыКлиента<=ДанныеСтроки.МаксСкидкаПредоплаты)
	или (ДанныеСтроки.МаксСкидкаПредоплатыРук=0 и ДанныеСтроки.СкидкаПредоплатыКлиента<ДанныеСтроки.МаксСкидкаПредоплаты) тогда // меньше "-" или меньше "+" мин.наценки
	
		стрЗадачи = таблЗадачи.Добавить();
			       
				текст1 =" менеджера Тов.Группы "+строка(ДанныеСтроки.СкидкаПредоплатыКлиента)+?(ДанныеСтроки.СкидкаПредоплатыКлиента>максПроц," р.","%")
				+" на "+строка(ДанныеСтроки.СкидкаПредоплатыКлиента-ДанныеСтроки.МаксСкидкаПредоплаты)+?(ДанныеСтроки.СкидкаПредоплатыКлиента>максПроц," р.","%")
				+"
				|для правила № "+строка(стр1.НомерСтроки)+": ";
				
						
				//25.08.2015 -------формируем список правил по менеджерам-----------------
				стрЗадачи.Исполнитель = МенТовГруппы;
				стрЗадачи.Содержание = текст0 + текст1 + текст2;
		
				    стрЗадачи.НомерСтрокиОснования = стр1.НомерСтроки;
					стрЗадачи.Номенклатура ="Предоплата: "+текст2;
					стрЗадачи.Скидка    = ДанныеСтроки.СкидкаПредоплатыКлиента;
					стрЗадачи.СкидкаМин = ДанныеСтроки.МаксСкидкаПредоплаты;
				стрЗадачи.ID = получитьIDправила(стр1); //+++ 08.06.2016	
	КонецЕсли;	
			
	//КонецЕсли; // Бонусы		
	
		КонецЦикла; // по общ.правилам
   КонецЦикла; // по перс.правилам
			
	возврат ТаблЗадачи;
КонецФункции

процедура СоздатьЗадачиПриВыключении()
	
	констСогласование = Константы.СогласованиеПоСкидкамКлиентов.Получить(); 
	если не констСогласование тогда 
	возврат;
	КонецЕсли;

	СписокМенТовГрупп = новый СписокЗначений; // список пользователей, которым нужны уведомления!
	 таблЗадачи = ПолучитьТаблЗадач();
	 
 менТовГруппы0 = неопределено; текст0="";
	//-------новая задача------------
	задача1 = задачи.ЗадачиПользователя.СоздатьЗадачу();
 	задача1.Товары.Очистить();
	текст0="";
	
	таблЗадачи.Сортировать("Исполнитель");  //+++ 10.09.2015 - по 1 задаче на каждого согласующего!
	
   для каждого стр111 из таблЗадачи цикл
	   
	   менТовГруппы = стр111.Исполнитель;
   
	   	Если менТовГруппы<>менТовГруппы0 тогда//-------------просто Новая Задача с обратным уведомлением --------------------
			
	//==================================СОЗДАНИЕ ЗАДАЧ===========================
			Если менТовГруппы0 <> неопределено тогда
				попытка 
				 задача1.Наименование = "Согласуйте Правила для клиента: "+строка(Контрагент); //+", равную "+строка(текСтр.СкидкаНаценкаКлиента)+?(текСтр.СкидкаНаценкаКлиента>максПроц," р.","% ")
		 		 задача1.Описание = "Менеджер: "+строка(глТекущийПользователь)+" ("+строка(глТекущийПользователь.ОсновноеПодразделение)+") просит Вас
				 |Утвердить "+текст0;

				задача1.Записать();
			  	СписокМенТовГрупп.Добавить(задача1.Исполнитель);
				Сообщить(" + Сформирована ""Задача на согласование"" для сотрудника: "+строка(задача1.Исполнитель), СтатусСообщения.Информация );	
			  исключение
				Сообщить(" - Не удалось сформировать электронную Задачу на согласование для сотрудника: "+строка(задача1.Исполнитель), СтатусСообщения.Внимание );	
			  КонецПопытки;
			//-------новая задача------------
			задача1 = задачи.ЗадачиПользователя.СоздатьЗадачу();
		 	задача1.Товары.Очистить();
			текст0="";
	        КонецЕсли;
				
			менТовГруппы0  = менТовГруппы;
			
	 	 КонецЕсли;
		 
		 текст0=текст0 + стр111.Содержание;  //общий текст по всем скидкам 1 клиента для 1 менеджера!
		   
		 задача1.Исполнитель = менТовГруппы;
		 
		 задача1.НаСогласование = ИСТИНА;//+++ 17.08.2015
		 
			 стр222 = задача1.Товары.Добавить();
			 ЗаполнитьЗначенияСвойств(стр222, стр111);
			 
			 //стр222.Количество = стр111.ОТК;
			 //стр222.ЦенаПоТипуЦен = стр111.Коэф;
		 
		 задача1.Инициатор   = глТекущийПользователь;
		 задача1.Объект   	 = Контрагент;
		 
		 задача1.Дата 		    = ТекущаяДата();
		 задача1.СрокИсполнения = КонецДня( ТекущаяДата() ); // до конца текущих суток с момента установки
		 
		 задача1.Оповещение     = истина;
		 задача1.СрокОповещения = ТекущаяДата(); //сразу (появится не позднее чем через 5 мин
						 
 	КонецЦикла;	 
 
 //-----------последняя задача-------------------------------
	Если менТовГруппы0 <> неопределено и таблЗадачи.Количество()>0 тогда
	  попытка 
		 задача1.Наименование = "Согласуйте Правила для клиента: "+строка(Контрагент); //+", равную "+строка(текСтр.СкидкаНаценкаКлиента)+?(текСтр.СкидкаНаценкаКлиента>максПроц," р.","% ")
		задача1.Описание = "Менеджер: "+строка(глТекущийПользователь)+" ("+строка(глТекущийПользователь.ОсновноеПодразделение)+") просит Вас
				 |Утвердить "+текст0;
		 
		задача1.Записать();
	  	СписокМенТовГрупп.Добавить(менТовГруппы);
		Сообщить(" + Сформирована ""Задача на согласование"" для мен.тов.группы: "+строка(менТовГруппы), СтатусСообщения.Информация );	
	  исключение
		Сообщить(" - Не удалось сформировать электронную Задачу на согласование для мен.тов.группы: "+строка(менТовГруппы), СтатусСообщения.Внимание );	
	  КонецПопытки;
    КонецЕсли;
   	 
 КонецПроцедуры
//+++)
 
 
 
 
Процедура КоманднаяПанельПравилаПомощь(Кнопка)
	 ЭтаФорма.ОткрытьСправкуФормы();
 КонецПроцедуры

Процедура ТабличнаяЧастьПравилаПриАктивизацииСтроки(Элемент)
	 //позиционироваться в общ.правилах...
	 Если не ЭлементыФормы.ТабличноеПолеОбщихПравил.Колонки.ПриоритетКлиента.Видимость тогда
		 возврат;
	 КонецЕсли;	 
	 
	 текСтр = ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
	 если текСтр=неопределено тогда 
		 возврат;
	 КонецЕсли;
	 
	 ном = текСтр.НомерСтроки;
	 стр1 = ТабличноеПолеОбщихПравил.Найти( ном, "ПриоритетКлиента"); 
	 если стр1<>неопределено тогда
		 ЭлементыФормы.ТабличноеПолеОбщихПравил.ТекущаяСтрока = стр1;
	 КонецЕсли;
	 
 КонецПроцедуры
 
 Процедура ТабличноеПолеОбщихПравилПриАктивизацииСтроки(Элемент)
	 
	 //позиционироваться в правилах...
	 Если не ЭлементыФормы.ТабличноеПолеОбщихПравил.Колонки.ПриоритетКлиента.Видимость тогда
		 возврат;
	 КонецЕсли;	 
	 
	 текСтр = ЭлементыФормы.ТабличноеПолеОбщихПравил.ТекущиеДанные;
	 если текСтр=неопределено тогда 
		 возврат;
	 КонецЕсли;
	 
	 ном = текСтр.ПриоритетКлиента;
	 стр1 = ТабличнаяЧастьПравила.Найти( ном, "НомерСтроки"); 
	 если стр1<>неопределено тогда
		 ЭлементыФормы.ТабличнаяЧастьПравила.ТекущаяСтрока = стр1;
	 КонецЕсли;

 КонецПроцедуры

 Процедура КоманднаяПанельПравилаВыгрузитьВStore(Кнопка)
	ТаблицаЦен = ПолучитьЦеныПоВсемТоварамКлиента(Контрагент.Код);
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(КаталогВременныхФайлов()+"document.xml");
	ЗаписьXML.ЗаписатьОбъявлениеXML();  
	ЗаписьXML.ЗаписатьНачалоЭлемента("Root");  
	ЗаписьXML.ЗаписатьНачалоЭлемента("PartnerId");
	ЗаписьXML.ЗаписатьТекст(контрагент.Код);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Prices");  
	
	Для Каждого Строка Из таблицаЦен Цикл
		//НовыйКод="";
		//попытка
		//	НовыйКод =  Строка(Формат(строка.Код,"ЧГ=0"));
		//исключение	
		//
		//Для Ном=1 По ДлинаСтроки(строка.Код) Цикл
		//	ТекущийСимвол=Сред(строка.Код,Ном,1);
		//	НовыйКод=НовыйКод+?(Найти("0123454566789",ТекущийСимвол)=1,ТекущийСимвол,"");
		//КонецЦикла
		//конецПопытки	
		Если строка.цена <>0 Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Item");
			ЗаписьXML.ЗаписатьАтрибут("ProductId", строка.Код);
			ЗаписьXML.ЗаписатьАтрибут("Price", Строка(Формат(строка.Цена,"ЧГ=0"))); 
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЦикла;  
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.Закрыть();  
   	удачно = ОбменСУТИнтернетМагазин.SIM_ВыгрузитьФайлНаСервер(КаталогВременныхФайлов()+"document.xml","importpricesforoneclient",Ложь,"store.yst.ru"); // выгружаем, 
	#Если Клиент  Тогда
	Если удачно Тогда
		Сообщить("Выгрузка  в  Store прошла успешно");
	иначе
		Сообщить("В процессе в  Store выгрузки произошли ошибки.");
	конецЕсли;	
	 #КонецЕсли

		удачно = ОбменСУТИнтернетМагазин.SIM_ВыгрузитьФайлНаСервер(КаталогВременныхФайлов()+"document.xml","importpricesforoneclient",Ложь,"terminal.yst.ru"); // выгружаем, 
	#Если Клиент  Тогда	
	Если удачно Тогда
		Сообщить("Выгрузка  в  Terminal прошла успешно");
	иначе
		Сообщить("В процессе в  Terminal выгрузки произошли ошибки.");
	конецЕсли;	
   #КонецЕсли

 // Вставить содержимое обработчика.
 КонецПроцедуры

 Процедура КоманднаяПанельПравилаДействие9(Кнопка)
	 ВклФлажки(1);
	Предупреждение("   Все правила - будут повторно записаны 
					|и, при превышении, уйдут на согласование!", 10);
 КонецПроцедуры

 Процедура КоманднаяПанельПравилаДействие10(Кнопка)
	 ВклФлажки(0);
	 Предупреждение("Не измененные правила - НЕ ЗАПИСЫВАЮТСЯ!", 10);
 КонецПроцедуры
 

Процедура КоманднаяПанельПравилаПереключитьВсе(Кнопка)
	ВклФлажки(2);
	Предупреждение("Только измененные правила - будут записаны!", 10);
КонецПроцедуры

 //0, 1, 2
 процедура ВклФлажки(тип1=1)
	 для каждого стр1 из ТабличнаяЧастьПравила цикл
		 стр1.изм = ?(тип1=1, Истина, ?(тип1=0, ЛОЖЬ,  не стр1.изм ));
	 КонецЦикла;	 
КонецПроцедуры	

Процедура ТабличнаяЧастьПравилаНомеклатурнаяГруппаПриИзменении(Элемент)
	Если Элемент.Значение.ЭтоГруппа тогда
		Предупреждение("Вы выбрали Каталог групп номенклатуры!", 10);
	КонецЕсли;	
КонецПроцедуры

Процедура ТабличнаяЧастьПравилаПередНачаломДобавления(Элемент, Отказ, Копирование)
	Предупреждение("Выберите правило из Общих правил!", 10);
	Отказ = истина;
КонецПроцедуры

Процедура ТабличнаяЧастьПравилаПередНачаломИзменения(Элемент, Отказ)
	//Если Элемент.ТекущиеДанные.Бонус <> 0 ТОгда
	//		Отказ = Истина;
	//КонецЕсли;
КонецПроцедуры

таблЗадачи = новый ТаблицаЗначений; 
 
СписокПроизводителиШин =Новый СписокЗначений;
СписокПроизводителиДисков =Новый СписокЗначений;

СписокПапкиШин =Новый СписокЗначений;
СписокПапкиДисков =Новый СписокЗначений;

    ТипЦенБазовая    = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00008");
	ТипЦенКрупныйОпт = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005");
	
	ТипЦенДилерская  = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00009");
	ТипЦенЯкорь      = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00003");
	//ТипЦенРеккомендРозн = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00011");
