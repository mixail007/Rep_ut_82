Перем мВалютаРегламентированногоУчета;
Перем мПоказыватьФорму Экспорт;
Перем мКассаККМ Экспорт;

// Процедура вызывается при нажатии кнопки "Сформировать".
// Формирует документ ОтчетККМ на основе документов ЧекККМ
// и удаляет обработанные документы.
//
Процедура ЗакрытьСмену()

	ПредставлениеОбработки = Метаданные.Обработки.ЗакрытиеКассовойСмены.Представление();

	ФормироватьОтчетОПродажахККМ = Ложь;
	Если ЗначениеНеЗаполнено(Дата) Тогда
		ТекстПредупреждения = "Не заполнена дата. Формирование невозможно.";
	ИначеЕсли ЗначениеНеЗаполнено(КассаККМ) Тогда
		ТекстПредупреждения = "Не выбрана касса ККМ. Формирование невозможно.";
	Иначе
		ФормироватьОтчетОПродажахККМ = Истина;
	КонецЕсли;

	Если Не ФормироватьОтчетОПродажахККМ Тогда
		Предупреждение(ТекстПредупреждения, , ПредставлениеОбработки);
		Возврат;
	КонецЕсли;

	Если глТорговоеОборудование <> Неопределено Тогда

		ИскомаяСтрока = глТорговоеОборудование.млФР.Найти(КассаККМ, "КассаККМ");
		Если ИскомаяСтрока <> Неопределено Тогда

			// фискальный регистратор
			Если ИскомаяСтрока.ДляПриемаНаличныхОтЮрЛиц Тогда
				ЗакрытьСменуНаФискальномРегистраторе(ИскомаяСтрока);
			Иначе
				СформироватьСоставПоЧекам(ПредставлениеОбработки, ИскомаяСтрока);
			КонецЕсли;

		Иначе

			ИскомаяСтрока = глТорговоеОборудование.млККМOnLine.Найти(КассаККМ, "КассаККМ");
			Если ИскомаяСтрока <> Неопределено Тогда

				// ККМ On-Line
				СформироватьСоставПоЧекам(ПредставлениеОбработки);
				Предупреждение("Необходимо вывести Z-отчет на ККМ"
				               """" + ИскомаяСтрока.Модель + """.");

			Иначе

				ИскомаяСтрока = глТорговоеОборудование.млККМOffLine.Найти(КассаККМ, "КассаККМ");
				Если ИскомаяСтрока <> Неопределено Тогда

					// ККМ Off-Line
					СформироватьСоставOffline(ПредставлениеОбработки, ИскомаяСтрока);

				Иначе

					// неавтоматизированная ККМ
					СформироватьСоставПоЧекам(ПредставлениеОбработки);

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	Иначе
		
    	// неавтоматизированная ККМ
		СформироватьСоставПоЧекам(ПредставлениеОбработки);
		
	КонецЕсли;

КонецПроцедуры // КнопкаСформироватьНажатие()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Дата     = РабочаяДата;
	КассаККМ = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяКассаККМ");
	Если мПоказыватьФорму <> Неопределено
	   И НЕ мПоказыватьФорму Тогда
		КассаККМ = мКассаККМ;
		ЗакрытьСмену();
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

КонецПроцедуры // ПриОткрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ ЭЛЕМЕНТОВ ФОРМЫ

// Закрывает смену на фискальном регистраторе.
//
Процедура ЗакрытьСменуНаФискальномРегистраторе(ЗаписьТаблицыПодключенныхФР = Неопределено, МассивДокументовКПроведению = Неопределено)
	Перем Ответ;

	Если ЗаписьТаблицыПодключенныхФР <> Неопределено Тогда

		// Закроем смену на фискальном регистраторе.
		Если глТорговоеОборудование = Неопределено Тогда
			Сообщить("Торговое оборудование не подключено!", СтатусСообщения.Важное);
			Сообщить("    Попытайтесь снять отчет вручную.", СтатусСообщения.Информация);
		ИначеЕсли глТорговоеОборудование.млФР = Неопределено Тогда
			Сообщить("Фискальный регистратор не подключен!", СтатусСообщения.Важное);
			Сообщить("    Попытайтесь снять отчет вручную.", СтатусСообщения.Информация);
		Иначе
			
			// Печатаем Z-Отчет со скидками
			Если ((МассивДокументовКПроведению<>Неопределено) и (Константы.ПечататьОтчетСоСкидками.Получить())) Тогда 
				СписокСсылокОРП = новый СписокЗначений;
				Для Каждого Стр из МассивДокументовКПроведению Цикл
					СписокСсылокОРП.Добавить(Стр.Ссылка);
				КонецЦикла;
				Запрос = новый Запрос;
				Запрос.УстановитьПараметр("СписокОтчетов",СписокСсылокОРП);
				Запрос.УстановитьПараметр("ККМ",КассаККМ);
				Запрос.Текст = "
					|Выбрать РАЗЛИЧНЫЕ ОРП.Склад.Наименование как Секция, СуммаДокумента
					|Из Документ.ОтчетОРозничныхПродажах как ОРП
					|Внутреннее Соединение 
					|	РегистрСведений.СоответствиеСкладуОрганизацииИКассыККМ как Рег
					|	По 
					|ОРП.КассаККМ = Рег.КассаККМ
					|	Где Ссылка.Проведен = Истина и Рег.КассаККМ = &ККМ и Ссылка В (&СписокОтчетов)
					|";				
					
				МассивСкладов = Запрос.Выполнить().Выгрузить();
				глТорговоеОборудование.ПечатьОтчетаСОСкидками(ЗаписьТаблицыПодключенныхФР,Ответ, МассивСкладов);
	            //ФормаОбработки.ВыполнитьОперацию("Отрезать", Параметры, Ответ);
				//ФормаОбработки.АннулироватьЧек(ОбъектФР_,ПарольАдминистратора_,НомерЛУ_);
				//ФормаОбработки.ОтключитьсяОтФР(ОбъектФР_, ПарольАдминистратора_,НомерЛУ_);
				//////////////////////////////Закончили его печатать
				/////////////////////////////////////////////////////////////////////////
			КонецЕсли;

			глТорговоеОборудование.ПечататьКассуККМ(ЗаписьТаблицыПодключенныхФР,Новый Структура("СтрокаТовара",КассаККМ.Наименование),Ответ);
			глТорговоеОборудование.ЗакрытьСмену(ЗаписьТаблицыПодключенныхФР, Ответ);
			
			Если Не(ПустаяСтрока(Ответ)) Тогда
				Сообщить("    Попытайтесь снять отчет вручную.", СтатусСообщения.Информация);
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ЗакрытьСменуНаФискальномРегистраторе()

// Формирование Отчета ККМ о продажах на основании имеющихся в базе Чеков
//
Процедура СформироватьСоставПоЧекам(ПредставлениеОбработки, ЗаписьТаблицыПодключенныхФР = Неопределено)

	СписокОРП = Новый СписокЗначений;
	ЗапросПоЧекам = Новый Запрос;

	ЗапросПоЧекам.УстановитьПараметр("НачДата" , НачалоДня(Дата));
	ЗапросПоЧекам.УстановитьПараметр("КонДата" , КонецДня (Дата));
	ЗапросПоЧекам.УстановитьПараметр("КассаККМ", КассаККМ);

	ЗапросПоЧекам.Текст =
	"ВЫБРАТЬ
	|	Ссылка
	|ИЗ
	|	Документ.ЧекККМ
	|ГДЕ
	|	Ссылка.Дата МЕЖДУ &НачДата И &КонДата И
	|	Ссылка.КассаККМ = &КассаККМ И
	|	Ссылка.Проведен
	|ДЛЯ ИЗМЕНЕНИЯ Документ.ЧекККМ // Блокирующие чтение таблицы документов Чек для разрешения коллизий многопользовательской работы
	|";

	РезультатЗапросаПоЧекам = ЗапросПоЧекам.Выполнить();

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("НачДата" ,           НачалоДня(Дата));
	Запрос.УстановитьПараметр("КонДата" ,           КонецДня (Дата));
	Запрос.УстановитьПараметр("КассаККМ",           КассаККМ);
	Запрос.УстановитьПараметр("ВидОперацииПродажа", Перечисления.ВидыОперацийЧекККМ.Продажа);
	Запрос.УстановитьПараметр("ВидОперацииВозврат", Перечисления.ВидыОперацийЧекККМ.Возврат);
	Запрос.УстановитьПараметр("ПользователиПустаяСсылка", Справочники.Пользователи.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяССылкаЧек", Документы.ЧекККМ.ПустаяСсылка());
	
    Если КассаККм.ОтдельныйОтчетОРозничныхПродажахНаЧекККМ Тогда  
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Ссылка,
		|	Ссылка.Склад,
		|	" + ?(КассаККМ.ОтдельныйОтчетОРозничныхПродажахНаЧекККМ, "ВЫБОР КОГДА Ссылка.ВидОперации = &ВидОперацииВозврат ТОГДА Ссылка.ЧекККМ.НомерЧекаККМ ИНАЧЕ Ссылка.НомерЧекаККМ КОНЕЦ", "0") + " КАК НомерЧекаККМ,
		|	" + ?(КассаККМ.ОтдельныйОтчетОРозничныхПродажахНаЧекККМ, "ВЫБОР КОГДА Ссылка.ВидОперации = &ВидОперацииВозврат ТОГДА Ссылка.ЧекККМ.Ответственный ИНАЧЕ Ссылка.Ответственный КОНЕЦ", "&ПользователиПустаяСсылка") + " КАК Ответственный,
		|	" + ?(КассаККМ.ОтдельныйОтчетОРозничныхПродажахНаЧекККМ И КассаККМ.РазделятьБезнал, "ВЫБОР КОГДА Ссылка.ВидОперации = &ВидОперацииВозврат ТОГДА Ссылка.ЧекККМ.СуммаБезналичнойОплаты ИНАЧЕ Ссылка.СуммаБезналичнойОплаты КОНЕЦ", "0") + " КАК СуммаБезнал,
		|	Ссылка.ДисконтнаяКарта,
		|	Ссылка.БезналичнаяОплата,
		|	Номенклатура,
		|	СУММА(
		|		ВЫБОР
		|			КОГДА Ссылка.ВидОперации = &ВидОперацииПродажа ТОГДА 
		|				(1)
		|			КОГДА Ссылка.ВидОперации = &ВидОперацииВозврат ТОГДА 
		|				(-1)
		|			ИНАЧЕ
		|				(0)
		|		КОНЕЦ * Количество) КАК КоличествоЕдиницХранения,
		|	ПроцентСкидкиНаценки,
		|	ПроцентАвтоматическихСкидок,
		|	УсловиеАвтоматическойСкидки,
		|	ЗначениеУсловияАвтоматическойСкидки,
		|	Цена,
		|	СУММА(Сумма)            КАК Сумма,
		|	ХарактеристикаНоменклатуры,
		|	СерияНоменклатуры,
		|	Минимум(Ссылка.Дата) как Дата
		|ИЗ
		|	Документ.ЧекККМ.Товары
		|
		|ГДЕ
		|	Ссылка В (" + ЗапросПоЧекам.Текст +")
		|
		|СГРУППИРОВАТЬ ПО
		|	Ссылка,Ссылка.Склад,
		|	Ссылка.ДисконтнаяКарта,
		|	Ссылка.БезналичнаяОплата,
		|	Номенклатура,
		|	ПроцентСкидкиНаценки,
		|	ПроцентАвтоматическихСкидок,
		|	УсловиеАвтоматическойСкидки,
		|	ЗначениеУсловияАвтоматическойСкидки,
		|	Цена,
		|	ХарактеристикаНоменклатуры,
		|	СерияНоменклатуры 
		|УПОРЯДОЧИТЬ ПО НомерЧекаККМ
		|";		
	Иначе 
		Запрос.Текст ="ВЫБРАТЬ
		              |	ПЗ.Ссылка,
		              |	ПЗ.Склад,
		              |	ПЗ.НомерЧекаККМ,
		              |	ПЗ.Ответственный,
		              |	ПЗ.СуммаБезнал,
		              |	ПЗ.ДисконтнаяКарта,
		              |	ПЗ.БезналичнаяОплата,
		              |	ПЗ.Номенклатура,
		              |	ПЗ.КоличествоЕдиницХранения,
		              |	ПЗ.ПроцентСкидкиНаценки,
		              |	ПЗ.ПроцентАвтоматическихСкидок,
		              |	ПЗ.УсловиеАвтоматическойСкидки,
		              |	ПЗ.ЗначениеУсловияАвтоматическойСкидки,
		              |	ПЗ.Цена,
		              |	ПЗ.Сумма,
		              |	ПЗ.ХарактеристикаНоменклатуры,
		              |	ПЗ.СерияНоменклатуры,
		              |	ПЗ.Дата
		              |ИЗ
		              |	(ВЫБРАТЬ
		              |		ВЫБОР
		              |			КОГДА ЧекККМТовары.Ссылка.ЧекККМ = &ПустаяССылкаЧек
		              |					И ЧекККМТовары.Ссылка.ВидОперации <> &ВидОперацииВозврат
		              |				ТОГДА ЧекККМТовары.Ссылка
		              |			ИНАЧЕ ЧекККМТовары.Ссылка.ЧекККМ
		              |		КОНЕЦ КАК Ссылка,
		              |		ЧекККМТовары.Ссылка.Склад КАК Склад,
		              |		0 КАК НомерЧекаККМ,
		              |		&ПользователиПустаяСсылка КАК Ответственный,
		              |		0 КАК СуммаБезнал,
		              |		ЧекККМТовары.Ссылка.ДисконтнаяКарта КАК ДисконтнаяКарта,
		              |		ЧекККМТовары.Ссылка.БезналичнаяОплата КАК БезналичнаяОплата,
		              |		ЧекККМТовары.Номенклатура КАК Номенклатура,
		              |		СУММА(ВЫБОР
		              |				КОГДА ЧекККМТовары.Ссылка.ВидОперации = &ВидОперацииПродажа
		              |					ТОГДА 1
		              |				КОГДА ЧекККМТовары.Ссылка.ВидОперации = &ВидОперацииВозврат
		              |					ТОГДА -1
		              |				ИНАЧЕ 0
		              |			КОНЕЦ * ЧекККМТовары.Количество) КАК КоличествоЕдиницХранения,
		              |		ЧекККМТовары.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		              |		ЧекККМТовары.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
		              |		ЧекККМТовары.УсловиеАвтоматическойСкидки КАК УсловиеАвтоматическойСкидки,
		              |		ЧекККМТовары.ЗначениеУсловияАвтоматическойСкидки КАК ЗначениеУсловияАвтоматическойСкидки,
		              |		ЧекККМТовары.Цена КАК Цена,
		              |		СУММА(ЧекККМТовары.Сумма) КАК Сумма,
		              |		ЧекККМТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		              |		ЧекККМТовары.СерияНоменклатуры КАК СерияНоменклатуры,
		              |		МИНИМУМ(ЧекККМТовары.Ссылка.Дата) КАК Дата
		              |	ИЗ
		              |		Документ.ЧекККМ.Товары КАК ЧекККМТовары
		              |	ГДЕ
		              |		ЧекККМТовары.Ссылка В
		              |				("+ ЗапросПоЧекам.Текст +")
		              |	
		              |	СГРУППИРОВАТЬ ПО
		              |		ВЫБОР
		              |			КОГДА ЧекККМТовары.Ссылка.ЧекККМ = &ПустаяССылкаЧек
		              |					И ЧекККМТовары.Ссылка.ВидОперации <> &ВидОперацииВозврат
		              |				ТОГДА ЧекККМТовары.Ссылка
		              |			ИНАЧЕ ЧекККМТовары.Ссылка.ЧекККМ
		              |		КОНЕЦ,
		              |		ЧекККМТовары.Ссылка.Склад,
		              |		ЧекККМТовары.Ссылка.ДисконтнаяКарта,
		              |		ЧекККМТовары.Ссылка.БезналичнаяОплата,
		              |		ЧекККМТовары.Номенклатура,
		              |		ЧекККМТовары.ПроцентСкидкиНаценки,
		              |		ЧекККМТовары.ПроцентАвтоматическихСкидок,
		              |		ЧекККМТовары.УсловиеАвтоматическойСкидки,
		              |		ЧекККМТовары.ЗначениеУсловияАвтоматическойСкидки,
		              |		ЧекККМТовары.Цена,
		              |		ЧекККМТовары.ХарактеристикаНоменклатуры,
		              |		ЧекККМТовары.СерияНоменклатуры) КАК ПЗ
		              |ГДЕ
		              |	ПЗ.КоличествоЕдиницХранения <> 0
		              |
		              |УПОРЯДОЧИТЬ ПО
		              |	ПЗ.НомерЧекаККМ";	
				  КонецЕсли;
				  
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		
		ТекстСообщения = "За кассовую смену не продано ни одного товара по выбранной кассе ККМ.";
		СообщитьОбОшибке(ТекстСообщения,, ПредставлениеОбработки);
		
	Иначе
		
		НачатьТранзакцию();
		
		ОтменитьТранзакцию = Ложь;

		// Для определения где нужно проверять склад: в шапке или в ТЧ.
		УказаниеСкладов      = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
		СкладВТабличнойЧасти = (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
		                   Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);

		МассивДокументовКПроведению = Новый Массив;
		ОтчетОРозничныхПродажах = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
		
		Если КонецДня(Дата) = КонецДня(ТекущаяДата()) Тогда
			РежимПроведения = РежимПроведенияДокумента.Оперативный;
			ДатаДокумента = ТекущаяДата();
		Иначе
			РежимПроведения = РежимПроведенияДокумента.Неоперативный;
			ДатаДокумента = КонецДня(Дата);
		КонецЕсли;
		ОтчетОРозничныхПродажах.Дата = ДатаДокумента;

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнитьШапкуДокумента(ОтчетОРозничныхПродажах, глТекущийПользователь, мВалютаРегламентированногоУчета, "Продажа");
		УстановитьНомерДокумента(ОтчетОРозничныхПродажах);

		//ОтчетОРозничныхПродажах.ОтражатьВБухгалтерскомУчете  = Ложь;
		//ОтчетОРозничныхПродажах.ОтражатьВНалоговомУчете      = Ложь;

		ОтчетОРозничныхПродажах.ОтражатьВБухгалтерскомУчете = истина;
		ОтчетОРозничныхПродажах.ОтражатьВНалоговомУчете      = истина;
		
		//ОтчетОРозничныхПродажах.Склад              = Неопределено;
		ОтчетОРозничныхПродажах.НомерЧекаККМ = 0;
		ОтчетОРозничныхПродажах.КассаККМ           = КассаККМ;
		ОтчетОРозничныхПродажах.УчитыватьНДС       =Истина;
		ОтчетОРозничныхПродажах.СуммаВключаетНДС   = Истина;
		//ОтчетОРозничныхПродажах.Склад = Справочники.Склады.НайтиПоКоду("01475");
		//ОтчетОРозничныхПродажах.Склад = Справочники.Склады.НайтиПоКоду("02124"); //22.02.16 Смирнов
        //ОтчетОРозничныхПродажах.СуммаВключаетНДС   = Ложь;
		врУжеСозданНовыйДокумент = Истина;
		
		Пока Выборка.Следующий() Цикл

			Если НЕ СкладВТабличнойЧасти Тогда
				Если ЗначениеНеЗаполнено(ОтчетОРозничныхПродажах.Склад) Тогда
					ОтчетОРозничныхПродажах.Склад              	= Выборка.Склад;
					ОтчетОРозничныхПродажах.Подразделение       = ОтчетОРозничныхПродажах.Склад.Подразделение;
					ОтчетОРозничныхПродажах.УчитыватьНДС       	= ОтчетОРозничныхПродажах.Склад.Подразделение.ИспользоватьСтавкуНДС;
					Если (ОтчетОРозничныхПродажах.УчитыватьНДС) Тогда
						ОтчетОРозничныхПродажах.СуммаВключаетНДС	= Истина;
					КонецЕсли;
					Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РаботникТСЦ") Тогда
							текСоответствие = РегистрыСведений.СоответствиеСкладуОрганизацииИКассыККМ.Получить(Новый Структура("Склад,Компьютер",ОтчетОРозничныхПродажах.Склад,ИмяКомпьютера()));
							Если текСоответствие<>Неопределено Тогда
								ОтчетОРозничныхПродажах.Организация=текСоответствие.Организация;	
							КонецЕсли;	
					КонецЕсли;	

				Иначе
					Если ОтчетОРозничныхПродажах.Склад <> Выборка.Склад Тогда // Надо создавать новый документ

						// Записываем ОтчетОРозничныхПродажах.
						Если НЕ ОтменитьТранзакцию Тогда
							Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РаботникТСЦ") Тогда
							ОтчетОРозничныхПродажах.Подразделение=ОтчетОРозничныхПродажах.Склад.Подразделение;	
                            КонецЕсли;
							Попытка
								ОтчетОРозничныхПродажах.ОтражатьВБухгалтерскомУчете = истина;
								ОтчетОРозничныхПродажах.ОтражатьВНалоговомУчете      = истина;
								ОтчетОРозничныхПродажах.Записать(РежимЗаписиДокумента.Запись);
								МассивДокументовКПроведению.Добавить(ОтчетОРозничныхПродажах);
							Исключение
								Предупреждение("Не удалось записать документ ""Отчет ККМ о продажах!""", , ПредставлениеОбработки);
								ОтменитьТранзакцию = Истина;
								Прервать;
							КонецПопытки;
						КонецЕсли;
						ОтчетОРозничныхПродажах = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
						врУжеСозданНовыйДокумент = Истина;

						ОтчетОРозничныхПродажах.Дата = ДатаДокумента;

						// Заполнить реквизиты значениями по умолчанию.
						ЗаполнитьШапкуДокумента(ОтчетОРозничныхПродажах, глТекущийПользователь, мВалютаРегламентированногоУчета, "Продажа");
						УстановитьНомерДокумента(ОтчетОРозничныхПродажах);

						//ОтчетОРозничныхПродажах.ОтражатьВБухгалтерскомУчете  = Ложь;
						//ОтчетОРозничныхПродажах.ОтражатьВНалоговомУчете      = Ложь;
						
				        ОтчетОРозничныхПродажах.ОтражатьВБухгалтерскомУчете = истина;
						ОтчетОРозничныхПродажах.ОтражатьВНалоговомУчете      = истина;
						

						ОтчетОРозничныхПродажах.КассаККМ           = КассаККМ;
						
						// { Лапенков 20061213
						ОтчетОРозничныхПродажах.Склад              		= Выборка.Склад;
						ОтчетОРозничныхПродажах.Подразделение           = ОтчетОРозничныхПродажах.Склад.Подразделение;
						ОтчетОРозничныхПродажах.УчитыватьНДС       		= ОтчетОРозничныхПродажах.Склад.Подразделение.ИспользоватьСтавкуНДС;
						Если (ОтчетОРозничныхПродажах.УчитыватьНДС) Тогда
							ОтчетОРозничныхПродажах.СуммаВключаетНДС	= Истина;
						КонецЕсли;
						//
						
						Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РаботникТСЦ") Тогда
							текСоответствие = РегистрыСведений.СоответствиеСкладуОрганизацииИКассыККМ.Получить(Новый Структура("Склад,Компьютер",ОтчетОРозничныхПродажах.Склад,ИмяКомпьютера()));
							Если текСоответствие<>Неопределено Тогда
								ОтчетОРозничныхПродажах.Организация=текСоответствие.Организация;	
							КонецЕсли;	
							ОтчетОРозничныхПродажах.Подразделение=ОтчетОРозничныхПродажах.Склад.Подразделение;
						КонецЕсли;	
								
						ОтчетОРозничныхПродажах.НомерЧекаККМ       = Выборка.НомерЧекаККМ;
                        ОтчетОРозничныхПродажах.СуммаБезнал 	   = Выборка.СуммаБезнал;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			// номер чека ККМ заполняем при наличии соответствующей установки
			Если КассаККМ.ОтдельныйОтчетОРозничныхПродажахНаЧекККМ Тогда
				
				// создать новый документ для нового номера чека ККМ, если он уже не был только что создан;
				// либо проверить равенство номера чека и ответственного
				Если Выборка.НомерЧекаККМ <> ОтчетОРозничныхПродажах.НомерЧекаККМ
					И Не врУжеСозданНовыйДокумент Тогда
				
					// Записываем ОтчетОРозничныхПродажах.
					Если НЕ ОтменитьТранзакцию Тогда
						Попытка
							ОтчетОРозничныхПродажах.ОтражатьВБухгалтерскомУчете = истина;
							ОтчетОРозничныхПродажах.ОтражатьВНалоговомУчете      = истина;
							ОтчетОРозничныхПродажах.Записать(РежимЗаписиДокумента.Запись);
							МассивДокументовКПроведению.Добавить(ОтчетОРозничныхПродажах);
						Исключение
							Предупреждение("Не удалось записать документ ""Отчет ККМ о продажах!""", , ПредставлениеОбработки);
							ОтменитьТранзакцию = Истина;
							Прервать;
						КонецПопытки;
					КонецЕсли;
					
					ОтчетОРозничныхПродажах = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
					врУжеСозданНовыйДокумент = Истина;    
					

					ОтчетОРозничныхПродажах.Дата = ДатаДокумента;

					// Заполнить реквизиты значениями по умолчанию.
					ЗаполнитьШапкуДокумента(ОтчетОРозничныхПродажах, глТекущийПользователь, мВалютаРегламентированногоУчета, "Продажа");
					УстановитьНомерДокумента(ОтчетОРозничныхПродажах);

					//ОтчетОРозничныхПродажах.ОтражатьВБухгалтерскомУчете  = Ложь;
					//ОтчетОРозничныхПродажах.ОтражатьВНалоговомУчете      = Ложь;
			        ОтчетОРозничныхПродажах.ОтражатьВБухгалтерскомУчете = истина;
					ОтчетОРозничныхПродажах.ОтражатьВНалоговомУчете      = истина;
					

					ОтчетОРозничныхПродажах.КассаККМ           = КассаККМ;
					ОтчетОРозничныхПродажах.Склад              = Выборка.Склад;
					ОтчетОРозничныхПродажах.Подразделение	   = ОтчетОРозничныхПродажах.Склад.Подразделение;
					ОтчетОРозничныхПродажах.УчитыватьНДС       = ОтчетОРозничныхПродажах.Склад.Подразделение.ИспользоватьСтавкуНДС;
					Если (ОтчетОРозничныхПродажах.УчитыватьНДС) Тогда
						ОтчетОРозничныхПродажах.СуммаВключаетНДС	= Истина;
					КонецЕсли;
					ОтчетОРозничныхПродажах.НомерЧекаККМ       = Выборка.НомерЧекаККМ;
					ОтчетОРозничныхПродажах.Ответственный	   = Выборка.Ответственный;
					ОтчетОРозничныхПродажах.СуммаБезнал 	   = Выборка.СуммаБезнал;
				Иначе
					ОтчетОРозничныхПродажах.НомерЧекаККМ = Выборка.НомерЧекаККМ;
					ОтчетОРозничныхПродажах.Ответственный = Выборка.Ответственный;
					ОтчетОРозничныхПродажах.СуммаБезнал = Выборка.СуммаБезнал;
				КонецЕсли; 
				
			КонецЕсли;
			
			Если Выборка.КоличествоЕдиницХранения < 0 Тогда
				//ТекстПредупреждения	= "По товару """ + Выборка.Номенклатура + """ зафиксировано возвратов больше чем продаж!";
				//Предупреждение(ТекстПредупреждения, , ПредставлениеОбработки);
				//ОтменитьТранзакцию = Истина;
				//Прервать;
			ИначеЕсли Выборка.КоличествоЕдиницХранения = 0 Тогда
				Продолжить;
			КонецЕсли; 

			СтрокаТабличнойЧасти = ОтчетОРозничныхПродажах.Товары.Добавить();

			СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения           = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
			СтрокаТабличнойЧасти.Коэффициент                = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.Количество                 = Выборка.КоличествоЕдиницХранения;
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки       = Выборка.ПроцентСкидкиНаценки;
			СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок= Выборка.ПроцентАвтоматическихСкидок;
			СтрокаТабличнойЧасти.УсловиеАвтоматическойСкидки= Выборка.УсловиеАвтоматическойСкидки;
			СтрокаТабличнойЧасти.ЗначениеУсловияАвтоматическойСкидки= Выборка.ЗначениеУсловияАвтоматическойСкидки;
			СтрокаТабличнойЧасти.ДисконтнаяКарта = Выборка.ДисконтнаяКарта;
			СтрокаТабличнойЧасти.Цена                       = Выборка.Цена;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
			СтрокаТабличнойЧасти.Сумма          			= СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Коэффициент * СтрокаТабличнойЧасти.Цена;
			Если СкладВТабличнойЧасти Тогда
				СтрокаТабличнойЧасти.Склад                      = Выборка.Склад;
			КонецЕсли;
			Если СтрокаТабличнойЧасти.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте
				ИЛИ СтрокаТабличнойЧасти.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоВыбраннойДисконтнойКартойСумме Тогда
				СтрокаТабличнойЧасти.ЗначениеУсловияАвтоматическойСкидки = Выборка.ДисконтнаяКарта;
			КонецЕсли;
			СтрокаТабличнойЧасти.БезналичнаяОплата          = Выборка.БезналичнаяОплата;

		
			
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ОтчетОРозничныхПродажах);
			
			//Если (ОтчетОРозничныхПродажах.Склад.Подразделение.ИспользоватьСтавкуНДС) Тогда 
				СтрокаТабличнойЧасти.СтавкаНДС = ОтчетОРозничныхПродажах.Склад.Подразделение.ИспользоватьСтавкуНДС;
				ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ОтчетОРозничныхПродажах);
				РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ОтчетОРозничныхПродажах);				
			//Иначе 
			//	СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			//КонецЕсли;				
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ОтчетОРозничныхПродажах);
			// { Чарчан - услуги 
			//СтрокаТабличнойЧасти.Автомобиль = Выборка.Автомобиль;
			//СтрокаТабличнойЧасти.Услуги 	= Выборка.Услуги;
			//СтрокаТабличнойЧасти.ДатаВремя	= Выборка.Дата;
			//АЧ 25.09.2015
			Если ЗначениеЗаполнено(Выборка.Ссылка.ЗаказПокупателя) Тогда 
				СтрокаТабличнойЧасти.ДокументОснование = Выборка.Ссылка.ЗаказПокупателя;
				СтрокаТабличнойЧасти.ДанныеЧека = Выборка.Ссылка.Номер + Формат(Выборка.Ссылка.Дата,"ДЛФ=D");
			КонецЕсли;
			// } Чарчан - услуги					
			//////////////////
			врУжеСозданНовыйДокумент = Ложь;
			
		КонецЦикла;
		
		// Записываем ОтчетОРозничныхПродажах.
		Если НЕ ОтменитьТранзакцию
		   И ОтчетОРозничныхПродажах.Товары.Количество() > 0 Тогда
			Попытка
				Если СкладВТабличнойЧасти и ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РаботникТСЦ") Тогда
							текСоответствие = РегистрыСведений.СоответствиеСкладуОрганизацииИКассыККМ.Получить(Новый Структура("Склад,Компьютер",ОтчетОРозничныхПродажах.Товары[0].Склад,ИмяКомпьютера()));
							Если текСоответствие<>Неопределено Тогда
								//ОтчетОРозничныхПродажах.Организация=текСоответствие.Организация;	
							КонецЕсли;	
				ОтчетОРозничныхПродажах.Подразделение=ОтчетОРозничныхПродажах.Склад.Подразделение;			
				КонецЕсли;	
			
		        ОтчетОРозничныхПродажах.ОтражатьВБухгалтерскомУчете = истина;
				ОтчетОРозничныхПродажах.ОтражатьВНалоговомУчете      = истина;
				ОтчетОРозничныхПродажах.Записать(РежимЗаписиДокумента.Запись);
				МассивДокументовКПроведению.Добавить(ОтчетОРозничныхПродажах);
			Исключение
				Предупреждение("Не удалось записать документ ""Отчет ККМ о продажах!""", , ПредставлениеОбработки);
				ОтменитьТранзакцию = Истина;
			КонецПопытки;
		КонецЕсли;

		// Снимем с проведения Чеки, чтобы можно было провести ОтчетОРозничныхПродажах.
		Если НЕ ОтменитьТранзакцию Тогда
			Выборка = РезультатЗапросаПоЧекам.Выбрать();
			Пока Выборка.Следующий() Цикл
				Попытка
					Выборка.Ссылка.ПолучитьОбъект().Записать(РежимЗаписиДокумента.ОтменаПроведения); 
				Исключение
					ОтменитьТранзакцию = Истина;
					Предупреждение("Не удалось снять с проведения чеки ККМ!", , ПредставлениеОбработки);
					Прервать;
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;

		// Удаляем чеки.
		//29.09.17 Смирнов, чеки не удаляем
		//Если НЕ ОтменитьТранзакцию Тогда
		//	Выборка = РезультатЗапросаПоЧекам.Выбрать();
		//	Пока Выборка.Следующий() Цикл
		//		Попытка
		//			Выборка.Ссылка.ПолучитьОбъект().Удалить();
		//		Исключение
		//			ОтменитьТранзакцию = Истина;
		//			Предупреждение("Не удалось удалить чеки ККМ!", , ПредставлениеОбработки);
		//			Прервать;
		//		КонецПопытки;
		//	КонецЦикла;
		//КонецЕсли;
		Если НЕ ОтменитьТранзакцию Тогда
			Выборка = РезультатЗапросаПоЧекам.Выбрать();
			Пока Выборка.Следующий() Цикл
				Попытка
					ЧекККМОб = Выборка.Ссылка.ПолучитьОбъект();
					ЧекККМОб.Комментарий = ""+ТекущаяДата()+" >>ОРП "+Выборка.Ссылка.Комментарий;
					ЧекККМОб.Записать();
				Исключение
					ОтменитьТранзакцию = Истина;
					Предупреждение("Не удалось удалить чеки ККМ!", , ПредставлениеОбработки);
					Прервать;
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;


		
		Если ОтменитьТранзакцию Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
									
			Для каждого ДокументКПроведению из МассивДокументовКПроведению Цикл
				Попытка
					ДокументКПроведению.Записать(РежимЗаписиДокумента.Проведение, РежимПроведения);
				Исключение
					СообщитьОбОшибке("Не удалось провести документ """ + ДокументКПроведению + """.", , ПредставлениеОбработки);
					//СписокОРП.Добавить(ДокументКПроведению); 
				КонецПопытки;
				Если НЕ (мПоказыватьФорму <> Неопределено
				         И НЕ мПоказыватьФорму) Тогда
					ДокументКПроведению.ПолучитьФорму().Открыть();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

	КонецЕсли;

	ЗакрытьСменуНаФискальномРегистраторе(ЗаписьТаблицыПодключенныхФР, МассивДокументовКПроведению);
	
КонецПроцедуры // СформироватьСоставПоЧекам()

// поиск товара по переданному коду 
//
Функция ПолучитьТовар(Код,ТаблицаТоваров)

	ТоварНайден = Ложь;
	Если ЗначениеНеЗаполнено(Код) Тогда
		Возврат Ложь;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ККМ" , КассаККМ);
	Запрос.УстановитьПараметр("Код" , Код);
	Запрос.Текст = "
	|	ВЫБРАТЬ
	|	Штрихкоды.Штрихкод,
	|	Штрихкоды.Владелец КАК Номенклатура,
	|	Штрихкоды.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Штрихкоды.ХарактеристикаНоменклатуры,
	|	Штрихкоды.СерияНоменклатуры,
	|	Штрихкоды.Качество
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.ТоварыНаККМ КАК ТоварыНаККМ
	|	ПО Штрихкоды.Код = ТоварыНаККМ.КодШтрихкода
	|ГДЕ
	|	ТоварыНаККМ.ККМ = &ККМ
	|	И ТоварыНаККМ.Код = &Код
	|";
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаТоваров.Количество() = 0 Тогда
		Сообщить("Владелец кода: " + Код + " на ККМ: "+КассаККМ+" не найден.");
		Возврат Ложь;
	ИначеЕсли ТаблицаТоваров[0].Номенклатура.ЭтоГруппа Тогда
		Сообщить("Владелец кода: " + Код + " на ККМ: "+КассаККМ+" это группа: "+ТаблицаТоваров[0].Номенклатура);
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции // ПолучитьТовар()

// Формирование Отчета ККМ о продажах на основании данных ККМ Off-Line
//
Процедура СформироватьСоставOffLine(ПредставлениеОбработки, ЗаписьТаблицыПодключенныхККМOffLine = Неопределено)
	Перем Ответ, ДанныеИзККМ, ВремТовар, ВремЕдиница;

	Если глТорговоеОборудование = Неопределено Тогда
		Сообщить("Торговое оборудование не подключено!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;

	Ответ = глТорговоеОборудование.ККМЗакрытьСмену(ЗаписьТаблицыПодключенныхККМOffLine, Дата, ДанныеИзККМ);
	Если Не ПустаяСтрока(Ответ) Тогда
		Предупреждение(Ответ, , ПредставлениеОбработки);
		Возврат;
	КонецЕсли;

	Если ДанныеИзККМ.Количество() = 0 Тогда
		ТекстПредупреждения = "За кассовую смену не продано ни одного товара по выбранной кассе ККМ.";
		Предупреждение(ТекстПредупреждения, , ПредставлениеОбработки);
		Возврат;
	КонецЕсли;

	НачатьТранзакцию();
	ОтменитьТранзакцию = Ложь;
	ОтчетОРозничныхПродажах = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
	МассивДокументовКПроведению = Новый Массив;

	Если КонецДня(Дата) = КонецДня(ТекущаяДата()) Тогда
		РежимПроведения = РежимПроведенияДокумента.Оперативный;
		ДатаДокумента = ТекущаяДата();
	Иначе
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
		ДатаДокумента = КонецДня(Дата);
	КонецЕсли;
	ОтчетОРозничныхПродажах.Дата = ДатаДокумента;

	// Заполнить реквизиты значениями по умолчанию.
	ЗаполнитьШапкуДокумента(ОтчетОРозничныхПродажах, глТекущийПользователь, мВалютаРегламентированногоУчета, "Продажа");
	УстановитьНомерДокумента(ОтчетОРозничныхПродажах);
	//ОтчетОРозничныхПродажах.ОтражатьВБухгалтерскомУчете  = Ложь;
	//ОтчетОРозничныхПродажах.ОтражатьВНалоговомУчете      = Ложь;
	ОтчетОРозничныхПродажах.ОтражатьВБухгалтерскомУчете = истина;
	ОтчетОРозничныхПродажах.ОтражатьВНалоговомУчете      = истина;

	
	ОтчетОРозничныхПродажах.Склад              = Неопределено;
	ОтчетОРозничныхПродажах.КассаККМ           = КассаККМ;
	ОтчетОРозничныхПродажах.УчитыватьНДС       = Истина;
	ОтчетОРозничныхПродажах.СуммаВключаетНДС   = Истина;

	Склады = Справочники.Склады;
	// Для определения где нужно проверять склад: в шапке или в ТЧ.
	УказаниеСкладов      = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
	СкладВТабличнойЧасти = (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
					   Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);

	СкладПоУмолчанию = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойСклад");
	Для Каждого СтрокаДанных Из ДанныеИзККМ Цикл
		НайденнаяСсылка = Склады.НайтиПоРеквизиту("НомерСекции", СтрокаДанных.НомерСекции);
		НовыйСклад = Неопределено;
		Если Не НайденнаяСсылка = Справочники.Склады.ПустаяСсылка() Тогда
			НовыйСклад = НайденнаяСсылка.Ссылка;
		Иначе
			НовыйСклад = СкладПоУмолчанию;
		КонецЕсли;

		Если НЕ СкладВТабличнойЧасти Тогда
			Если ЗначениеНеЗаполнено(ОтчетОРозничныхПродажах.Склад) Тогда
				ОтчетОРозничныхПродажах.Склад              = НовыйСклад;
			Иначе
				Если ОтчетОРозничныхПродажах.Склад <> НовыйСклад Тогда // Надо создавать новый документ

					// Записываем ОтчетОРозничныхПродажах.
					Если НЕ ОтменитьТранзакцию Тогда
						Попытка
							ОтчетОРозничныхПродажах.Записать(РежимЗаписиДокумента.Запись);
							МассивДокументовКПроведению.Добавить(ОтчетОРозничныхПродажах);
						Исключение
							Предупреждение("Не удалось записать документ ""Отчет ККМ о продажах!""", , ПредставлениеОбработки);
							ОтменитьТранзакцию = Истина;
							Прервать;
						КонецПопытки;
					КонецЕсли;
					ОтчетОРозничныхПродажах = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();

					ОтчетОРозничныхПродажах.Дата = ДатаДокумента;

					// Заполнить реквизиты значениями по умолчанию.
					ЗаполнитьШапкуДокумента(ОтчетОРозничныхПродажах, глТекущийПользователь, мВалютаРегламентированногоУчета, "Продажа");
					УстановитьНомерДокумента(ОтчетОРозничныхПродажах);

				//	ОтчетОРозничныхПродажах.ОтражатьВБухгалтерскомУчете  = Ложь;
				//	ОтчетОРозничныхПродажах.ОтражатьВНалоговомУчете      = Ложь;
			        ОтчетОРозничныхПродажах.ОтражатьВБухгалтерскомУчете = истина;
					ОтчетОРозничныхПродажах.ОтражатьВНалоговомУчете      = истина;
				
					ОтчетОРозничныхПродажах.КассаККМ           = КассаККМ;
					ОтчетОРозничныхПродажах.УчитыватьНДС       = Истина;
					ОтчетОРозничныхПродажах.СуммаВключаетНДС   = Истина;
					ОтчетОРозничныхПродажах.Склад              = НовыйСклад;

				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		ВремТовар   = Неопределено;
		ВремЕдиница = Неопределено;

		Если ЗначениеНеЗаполнено(СтрокаДанных.ШтрихКод) Тогда
			Найден = ПолучитьТовар(СтрокаДанных.Код, ВремТовар);
		Иначе
			Найден = глТорговоеОборудование.ПолучитьТоварПоШтрихкоду(СтрокаДанных.ШтрихКод, ВремТовар);
		КонецЕсли;
		
		Если НЕ Найден = Истина Тогда
			Сообщить("Товар с кодом " + СтрокаДанных.Код + " не найден и будет пропущен!", СтатусСообщения.Важное);
			Сообщить("    количество = " + СтрокаДанных.Количество + "; цена = " + Формат(СтрокаДанных.Цена, "ЧДЦ=2;ЧН=0"), СтатусСообщения.БезСтатуса);
			Продолжить;
		Иначе
			ВремТовар = ВремТовар[0];
		КонецЕсли;

		СтрокаТабличнойЧасти = ОтчетОРозничныхПродажах.Товары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура = ВремТовар.Номенклатура;
		Если ЗначениеНеЗаполнено(ВремТовар.ЕдиницаИзмерения) Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		Иначе
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВремТовар.ЕдиницаИзмерения;
		КонецЕсли;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = ВремТовар.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры = ВремТовар.СерияНоменклатуры;
		СтрокаТабличнойЧасти.Коэффициент       = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.Количество        = СтрокаДанных.Количество;
		СтрокаТабличнойЧасти.Цена              = СтрокаДанных.Цена;
		СтрокаТабличнойЧасти.Сумма             = СтрокаДанных.Сумма;
		РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ОтчетОРозничныхПродажах);
		ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ОтчетОРозничныхПродажах);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ОтчетОРозничныхПродажах);

		НайденнаяСсылка = Склады.НайтиПоРеквизиту("НомерСекции", СтрокаДанных.НомерСекции);
		Если Не НайденнаяСсылка = Справочники.Склады.ПустаяСсылка() Тогда
			СтрокаТабличнойЧасти.Склад = НайденнаяСсылка.Ссылка;
		КонецЕсли;

	КонецЦикла;

	// Записываем ОтчетОРозничныхПродажах.
	Если НЕ ОтменитьТранзакцию
	   И ОтчетОРозничныхПродажах.Товары.Количество() > 0 Тогда
		Попытка
			ОтчетОРозничныхПродажах.Записать(РежимЗаписиДокумента.Запись);
			МассивДокументовКПроведению.Добавить(ОтчетОРозничныхПродажах);
		Исключение
			Предупреждение("Не удалось записать документ ""Отчет ККМ о продажах!""", , ПредставлениеОбработки);
			ОтменитьТранзакцию = Истина;
		КонецПопытки;
	КонецЕсли;

	Если ОтменитьТранзакцию Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
		Для каждого ДокументКПроведению из МассивДокументовКПроведению Цикл
			Попытка
				ДокументКПроведению.Записать(РежимЗаписиДокумента.Проведение, РежимПроведения);
			Исключение
				СообщитьОбОшибке("Не удалось провести документ """ + ДокументКПроведению + """.", , ПредставлениеОбработки);
			КонецПопытки;
			Если НЕ (мПоказыватьФорму <> Неопределено
					 И НЕ мПоказыватьФорму) Тогда
				ДокументКПроведению.ПолучитьФорму().Открыть();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

//	ОтчетОРозничныхПродажах.Записать(РежимЗаписиДокумента.Запись);
	//Попытка
	//	ОтчетОРозничныхПродажах.Записать(РежимЗаписиДокумента.Проведение);
	//	Если Не ОтчетОРозничныхПродажах.Проведен Тогда
	//		Предупреждение("Не удалось провести " + ОтчетОРозничныхПродажах.Метаданные().Синоним, , ПредставлениеОбработки);
	//	КонецЕсли;
	//Исключение
	//	Предупреждение("Не удалось провести " + ОтчетОРозничныхПродажах.Метаданные().Синоним, , ПредставлениеОбработки);
	//КонецПопытки;

	//ОтчетОРозничныхПродажах.ПолучитьФорму().Открыть();

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Сформировать".
// Формирует документ ОтчетККМ на основе документов ЧекККМ
// и удаляет обработанные документы.
//
Процедура КнопкаЗакрытьСменуНажатие(Элемент)

	ЗакрытьСмену();

КонецПроцедуры // КнопкаСформироватьНажатие()

Функция ПолучитьКассуККМКредит(КассаККМ)
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("КассаККМ",КассаККМ);
	Запрос.Текст = "Выбрать Различные КассаККМКредит из РегистрСведений.СоответствиеСкладуОрганизациииКассыККМ где КассаККМ=&КассаККМ";
	Выб = Запрос.Выполнить().Выбрать();
	Если (Выб.Следующий()) Тогда
		Возврат Выб.КассаККМКредит;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

