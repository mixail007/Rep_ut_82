
Перем мПочта;
Перем мМассивПисем;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура определяет Контрагента и Контактное лицо
//
// Параметры
//  Док - ДокументОбъект.Событие
//
// Возвращаемое значение:
//   НЕТ
//
Процедура ОпределитьКонтрагентаИКонтактноеЛицо(Док, ОтправительСтроки)

	Если ТипЗнч(ОтправительСтроки) = Тип("СправочникСсылка.Контрагенты") Тогда
		Док.Контрагент = ОтправительСтроки;
		Док.ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент;
	ИначеЕсли ТипЗнч(ОтправительСтроки) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		Если ОтправительСтроки.ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента Тогда
			Док.ВидОбъекта     = Перечисления.ВидыОбъектовСобытия.Контрагент;
			Док.КонтактноеЛицо = ОтправительСтроки;
			Док.Контрагент     = ОтправительСтроки.ОбъектВладелец;
		Иначе
			Док.КонтактноеЛицо = ОтправительСтроки;
			Док.ВидОбъекта = Перечисления.ВидыОбъектовСобытия.ПрочиеКонтактныеЛица;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Процедура определяет отправителя
// и проставляет его в строки таблицы значений
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   НЕТ
//
Процедура ПроставитьОтправителя() Экспорт

	ФормаИндикации = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	
	Если ТаблицаПисем.Количество() = 0 Тогда
		Если ФормаИндикации.Открыта() Тогда
			ФормаИндикации.Закрыть();
		КонецЕсли; 
		Возврат;
	КонецЕсли; 
	
	ФормаИндикации.НаименованиеОбработкиДанных = "Обработка почты";
	ФормаИндикации.КомментарийОбработкиДанных  = "Идентифицируется отправитель ...";
	ФормаИндикации.КомментарийЗначения         = "Выполнено:";
	ФормаИндикации.Значение = 0;
	ФормаИндикации.Открыть();

	СписокАдресов = Новый СписокЗначений;
	
	СписокАдресов.ЗагрузитьЗначения(ТаблицаПисем.ВыгрузитьКолонку("АдресОтправителя"));

	Запрос = Новый Запрос;

	СтрокаУсловийПредставления = "";
	Ном = 0;
	Для каждого Адрес Из СписокАдресов Цикл
		НомЗапроса = СтрЗаменить(Строка(Ном), Символы.НПП, "");
		СтрокаУсловийПредставления = СтрокаУсловийПредставления + ?(Ном > 0, " ИЛИ ","") + " КонтактнаяИнформация.Представление ПОДОБНО &Адрес" + НомЗапроса;
		Запрос.УстановитьПараметр(("Адрес" + НомЗапроса),("%" + Адрес.Значение + "%"));
		Ном = Ном + 1;
	КонецЦикла;
	
	СтрокаОтбораПоТипуОбъекта = "КонтактнаяИнформация.Объект ССЫЛКА Справочник.КонтактныеЛица ИЛИ КонтактнаяИнформация.Объект ССЫЛКА Справочник.Контрагенты ИЛИ КонтактнаяИнформация.Объект ССЫЛКА Справочник.ФизическиеЛица";
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформация.Объект КАК Объект,
	|	КонтактнаяИнформация.Представление КАК Представление,
	|	КонтактнаяИнформация.Тип КАК Тип
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|
	|ГДЕ
	|	КонтактнаяИнформация.Тип = &ТипЭлПочта
	|	И
	|	(" + СтрокаУсловийПредставления + ")
	|	И
	|	" + СтрокаОтбораПоТипуОбъекта + "
	|";

	Запрос.УстановитьПараметр("ТипЭлПочта" , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());

	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();

	ФормаИндикации.МаксимальноеЗначение = ТаблицаПисем.Количество();
	
	Для каждого Строки Из ТаблицаПисем Цикл

		ФормаИндикации.Значение = ФормаИндикации.Значение + 1;
		Если Строки.Отправитель <> Неопределено И НЕ Строки.Отправитель.Пустая() Тогда
			Строки.Использование = Истина;
		Иначе
			СтрокаТаблицыЗапроса = ТаблицаЗапроса.Найти(Строки.АдресОтправителя,"Представление");
			Если СтрокаТаблицыЗапроса <> Неопределено Тогда
				Строки.Отправитель = СтрокаТаблицыЗапроса.Объект;
				Строки.Использование = Истина;
			КонецЕсли;
		КонецЕсли; 

		Если НЕ ЗначениеНеЗаполнено(Строки.Отправитель) Тогда

			Если Строки.Письмо.ДатаПолучения <> Дата("000101010000") Тогда
				
				Документ = НайтиДокумент(Строки.АдресОтправителя, Строки.Письмо.ДатаПолучения);

				Если НЕ ЗначениеНеЗаполнено(Документ) Тогда

					Если Документ.ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
						Если НЕ ЗначениеНеЗаполнено(Документ.КонтактноеЛицо) Тогда
							Строки.Отправитель = Документ.КонтактноеЛицо;
						ИначеЕсли НЕ ЗначениеНеЗаполнено(Документ.Контрагент) Тогда
							Строки.Отправитель = Документ.Контрагент;
						Иначе
							Продолжить;
						КонецЕсли; 
					Иначе
						Если НЕ ЗначениеНеЗаполнено(Документ.КонтактноеЛицо) Тогда
							Строки.Отправитель = Документ.КонтактноеЛицо;
						Иначе
							Продолжить;
						КонецЕсли; 
					КонецЕсли; 
					Строки.Документ = Документ;
					Строки.Использование = Ложь;
					
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;

	ФормаИндикации.Закрыть();
	
КонецПроцедуры // ПроставитьОтправителя()

// Функция находит документ по отправителю и дате
//
// Параметры
//  ОтправительСтроки - СпрвочникСсылка.ФизическиеЛица или СпрвочникСсылка.Контрагенты
//  Дата - Дата, по которой надо найти документ
//
// Возвращаемое значение:
//   ДокументСсылка.Событие
//
Функция НайтиДокумент(ОтправительСтроки, ДатаПисьма)


	СтруктураОтбора = Новый Структура;

	СтруктураОтбора.Вставить("АдресЭлектроннойПочты", ОтправительСтроки);
	
	Выборка = Документы.Событие.Выбрать(ДатаПисьма, ДатаПисьма, СтруктураОтбора);

	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Входящее И Выборка.ВидСобытия = Перечисления.ВидыСобытий.ЭлектронноеПисьмо Тогда
			
			Возврат Выборка.Ссылка;
		
		КонецЕсли; 
		
	КонецЦикла; 

	Возврат Документы.Событие.ПустаяСсылка();
	
КонецФункции

// Процедура заполняет строками таблицу ТаблицаПисем
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   НЕТ
//
Процедура ЗаполнитьТаблицу()

	Попытка
		мПочта.Отключиться();
	Исключение
		СообщитьОбОшибке(ОписаниеОшибки(),, "Не удалось выполнить отключение от основной почтовой программы операционной системы.");
		Возврат;
	КонецПопытки;
	
	Попытка
		мПочта.Подключиться();
	Исключение
		СообщитьОбОшибке(ОписаниеОшибки(),, "Не удалось установить подключение к основной почтовой программе операционной системы.");
		Возврат;
	КонецПопытки;
	
	ФормаИндикации = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	ФормаИндикации.НаименованиеОбработкиДанных = "Обработка почты";
	ФормаИндикации.КомментарийОбработкиДанных  = "Выбираются письма из почтовой программы ...";
	ФормаИндикации.КомментарийЗначения         = "Подождите пожалуйста некоторое время ...";
	ФормаИндикации.Открыть();
	
	Попытка
		мМассивПисем = мПочта.Выбрать(ПрочитанностьПолучаемыхПисем, ВидПолученияПисем);
	Исключение
		СообщитьОбОшибке(ОписаниеОшибки(),, "Не удалось получить электронные письма.");
		ФормаИндикации.Закрыть();
		Возврат;
	КонецПопытки;

	Если ТипЗнч(мМассивПисем) <> Тип("Массив") Тогда
		мМассивПисем = Новый Массив;
		Сообщить("Не удалось получить почту. Проверьте настройки программы почтового клиента.", СтатусСообщения.Важное);
	КонецЕсли; 
	
	ФормаИндикации.КомментарийОбработкиДанных = "";
	ФормаИндикации.Значение = 0;

	ТаблицаПисем.Очистить();

	ФормаИндикации.КомментарийОбработкиДанных = "Заполняется таблица писем ...";
	ФормаИндикации.Значение                   = 0;
	ФормаИндикации.МаксимальноеЗначение       = мМассивПисем.Количество();
	ФормаИндикации.Открыть();

	ИндикаторПолученияПочты = 0;

	Для каждого Письмо Из мМассивПисем Цикл

		ФормаИндикации.Значение = ФормаИндикации.Значение + 1;
		СтрокаПисем = ТаблицаПисем.Добавить();
		СтрокаПисем.Письмо = Письмо;
		АдресОтправителя = СтрЗаменить(Строка(Письмо.Отправитель),"SMTP:","");
		СтрокаПисем.АдресОтправителя = АдресОтправителя;
		СтрокаПисем.Тема = Письмо.Тема;
		Письмо.Текст = СтрЗаменить(Письмо.Текст, Символы.ВК, "");

		ВложенияПисьма = Письмо.Вложения;
		Если ВложенияПисьма.Количество() > 0 Тогда
			СтрокаПисем.Вложения = Истина;
		Иначе
			СтрокаПисем.Вложения = Ложь;
		КонецЕсли;

		
	КонецЦикла;
	
	ФормаИндикации.КомментарийОбработкиДанных = "";
	ФормаИндикации.Значение = 0;
	
	ПроставитьОтправителя();
	
КонецПроцедуры

// Процедура открывает форму ФормаПисьма текущей обработки
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   НЕТ
//
Процедура ПоказатьПисьмо()
	
	Если ЭлементыФормы.ТаблицаПисем.ТекущиеДанные <> Неопределено Тогда
		
		ФормаПисьма = ОбработкаОбъект.ПолучитьФорму("ФормаПисьма", ЭтаФорма, ЭлементыФормы.ТаблицаПисем.ТекущиеДанные.Письмо);

		ФормаПисьма.АдресОтправителя = ЭлементыФормы.ТаблицаПисем.ТекущиеДанные.АдресОтправителя;
		ФормаПисьма.Отправитель      = ЭлементыФормы.ТаблицаПисем.ТекущиеДанные.Отправитель;
		ФормаПисьма.ТекстПисьма      = ЭлементыФормы.ТаблицаПисем.ТекущиеДанные.Письмо.Текст;
		ФормаПисьма.ТекстТемы        = ЭлементыФормы.ТаблицаПисем.ТекущиеДанные.Тема;

		ФормаПисьма.ФайлыПисьма.Очистить();
		Если НЕ ВидПолученияПисем Тогда
		
			ФормаПисьма.ВложенияПисьма = ЭлементыФормы.ТаблицаПисем.ТекущиеДанные.Письмо.Вложения;
			Для каждого Вложения Из ЭлементыФормы.ТаблицаПисем.ТекущиеДанные.Письмо.Вложения Цикл
				Если Вложения.Данные <> Неопределено Тогда
					Строки = ФормаПисьма.ФайлыПисьма.Добавить();
					Строки.Файл = Вложения.Наименование;
					Строки.ДанныеФайла = Вложения.Данные;
				КонецЕсли; 
			КонецЦикла;
		
		КонецЕсли;

		Если НЕ ЗначениеНеЗаполнено(ЭлементыФормы.ТаблицаПисем.ТекущиеДанные.Документ) Тогда
			ФормаПисьма.ЭлементыФормы.КоманднаяПанельДополнительныхФайлов.Кнопки.СохранитьНаДиске.Доступность                = Ложь;
			ФормаПисьма.ЭлементыФормы.КоманднаяПанельДополнительныхФайлов.Кнопки.ОткрытьФайлы.Доступность                    = Ложь;
			ФормаПисьма.ЭлементыФормы.КоманднаяПанельДополнительныхФайлов.Кнопки.Подменю.Кнопки.СохранитьНаДиске.Доступность = Ложь;
			ФормаПисьма.ЭлементыФормы.КоманднаяПанельДополнительныхФайлов.Кнопки.Подменю.Кнопки.ОткрытьФайлы.Доступность     = Ложь;
			ФормаПисьма.ТолькоПросмотр = Истина;
			ФормаПисьма.Заголовок = ФормаПисьма.Заголовок + " (Только для чтения)";
		КонецЕсли;
		
		ФормаПисьма.Открыть();
		
	КонецЕсли; 

КонецПроцедуры

// Процедура изменяет доступность кнопок командной панели формы.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   НЕТ
//
Процедура ИзменитьДоступностьКнопокОткрытияСобытия()

	ДоступностьКнопки = Ложь;
	
	Если ЭлементыФормы.ТаблицаПисем.ТекущиеДанные <> Неопределено
		И ЭлементыФормы.ТаблицаПисем.ТекущиеДанные.Документ <> Неопределено
		И НЕ ЭлементыФормы.ТаблицаПисем.ТекущиеДанные.Документ.Пустая() Тогда
	
		ДоступностьКнопки = Истина;
	
	КонецЕсли;

	ЭлементыФормы.КоманднаяПанельФормыВерх.Кнопки.ОткрытьСобытие.Доступность = ДоступностьКнопки;
	ЭлементыФормы.КоманднаяПанельФормыВерх.Кнопки.Подменю.Кнопки.ОткрытьСобытие.Доступность = ДоступностьКнопки;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫЗЫВАЕМЫЕ ПО НАЖАТИЮ КНОПОК КОМАНДЫХ ПАНЕЛИ ФОРМЫ

// Обработчик события элемента ОсновныеДействияФормы.Выполнить.
//
Процедура ОсновныеДействияФормыВыполнить(Элемент)

	ЕстьОтмеченныеСтроки = Ложь;

	Для каждого Строки Из ТаблицаПисем Цикл
	
		Если Строки.Использование Тогда
		
			ЕстьОтмеченныеСтроки = Истина;
			Прервать;
		
		КонецЕсли; 
	
	КонецЦикла; 

	Если НЕ ЕстьОтмеченныеСтроки Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	ОтветНаВопрос = Вопрос("Произвести регистрацию выбранной почты?", РежимДиалогаВопрос.ДаНет);

	Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли; 

	НачатьТранзакцию();
	
	ОтменаТранзакции = Ложь;
	
	Для каждого Строки Из ТаблицаПисем Цикл
		
		Если НЕ Строки.Использование Тогда
			Продолжить;
		КонецЕсли;

		Док = Документы.Событие.СоздатьДокумент();

		ОпределитьКонтрагентаИКонтактноеЛицо(Док, Строки.Отправитель);

		ДатаПисьма = Строки.Письмо.ДатаПолучения;

		Если ДатаПисьма = Дата("000101010000") Тогда
			ДатаПисьма = ТекущаяДата();
		КонецЕсли; 
		
		Док.Дата                  = ДатаПисьма;
		Док.ВидСобытия            = Перечисления.ВидыСобытий.ЭлектронноеПисьмо;
		Док.ТипСобытия            = Перечисления.ВходящееИсходящееСобытие.Входящее;
		Док.Ответственный         = глТекущийПользователь;
		Док.НачалоСобытия         = ДатаПисьма;
		Док.ОкончаниеСобытия      = ДатаПисьма;
		Док.СодержаниеСобытия     = Строки.Письмо.Текст;
		Док.Важность              = Перечисления.Важность.Средняя;
		Док.СостояниеСобытия      = Перечисления.СостоянияСобытий.Завершено;
		Док.ОписаниеСобытия       = Строки.Письмо.Тема;
		Док.АдресЭлектроннойПочты = Строки.АдресОтправителя;

		Попытка
			Док.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОтменаТранзакции = Истина;
			Сообщить("" + ОписаниеОшибки());
			Продолжить;
		КонецПопытки;

		Для каждого ЭлементМассива Из мМассивПисем Цикл
		
			Если ЭлементМассива = Строки.Письмо Тогда
			
				ЭлементМассива.Непрочтено = Ложь;
			
			КонецЕсли; 
		
		КонецЦикла; 
		
		// Теперь сохраним вложения

		Для каждого Вложение Из Строки.Письмо.Вложения Цикл

			Если Вложение.Данные = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
			Данные = Вложение.Данные;
			ИмяФайла = СокрЛП(Вложение.Наименование);

			Если ЕстьЗапрещенныеСимволыИмени(ИмяФайла) Тогда
				Сообщить("В имени сохраняемого с письмом файла, обнаружены запрещенные символы. Отправитель: " + СокрЛП(Строка(Строки.Отправитель)) + ", имя файла: " + ИмяФайла);
				ОтменаТранзакции = Истина;
				Продолжить;
			КонецЕсли; 
			
			Спр = Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();

			Спр.ВидДанных = Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл;
			Спр.ИмяФайла = ИмяФайла;
			Спр.Объект = Док.Ссылка;
			Спр.Хранилище = Новый ХранилищеЗначения(Данные, Новый СжатиеДанных);
			Попытка
				Спр.Записать();
			Исключение
				ОтменаТранзакции = Истина;
				Сообщить("" + ОписаниеОшибки());
			КонецПопытки;
			
		КонецЦикла; 

		Если НЕ ОтменаТранзакции Тогда
			Сообщить("Записано событие №" + Док.Номер + " от " +Док.Дата);
		КонецЕсли; 
		
	КонецЦикла;

	Если ОтменаТранзакции Тогда
		ОтменитьТранзакцию();
		Сообщить("Письма не зарегистрированы!");
		Возврат;
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли; 
	
	ПроставитьОтправителя();
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельФормыВерх.УстановитьФлаги.
//
Процедура КоманднаяПанельФормыВерхУстановитьФлаги(Кнопка)

	Для каждого Строки Из ТаблицаПисем Цикл
		Если Строки.Отправитель <> Неопределено И НЕ Строки.Отправитель.Пустая() Тогда
			Если Строки.Документ = Неопределено ИЛИ Строки.Документ.Пустая() Тогда
				Строки.Использование = Истина;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельФормыВерх.Обновить.
//
Процедура КоманднаяПанельФормыВерхОбновить(Кнопка)
	
	ЗаполнитьТаблицу();
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельФормыВерх.СнятьФлаги.
//
Процедура КоманднаяПанельФормыВерхСнятьФлаги(Кнопка)

	Для каждого Строки Из ТаблицаПисем Цикл
		Строки.Использование = Ложь;
	КонецЦикла; 
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельФормыВерх.ОткрытьЖурнал.
//
Процедура КоманднаяПанельФормыВерхОткрытьЖурнал(Кнопка)

	ФормаСписка = Документы.Событие.ПолучитьФормуСписка(,ЭтаФорма);

	ФормаСписка.ДокументСписок.Отбор.ВидСобытия.Использование = Истина;
	ФормаСписка.ДокументСписок.Отбор.ВидСобытия.Значение      = Перечисления.ВидыСобытий.ЭлектронноеПисьмо;
	ФормаСписка.ДокументСписок.Отбор.ТипСобытия.Использование = Истина;
	ФормаСписка.ДокументСписок.Отбор.ТипСобытия.Значение      = Перечисления.ВходящееИсходящееСобытие.Входящее;

	ФормаСписка.Открыть();
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельФормыВерх.ОткрытьСобытие.
//
Процедура КоманднаяПанельФормыВерхОткрытьСобытие(Кнопка)

	Если ЭлементыФормы.ТаблицаПисем.ТекущиеДанные <> Неопределено
		 И ЭлементыФормы.ТаблицаПисем.ТекущиеДанные.Документ <> Неопределено
		 И НЕ ЭлементыФормы.ТаблицаПисем.ТекущиеДанные.Документ.Пустая() Тогда
		
		ЭлементыФормы.ТаблицаПисем.ТекущиеДанные.Документ.ПолучитьФорму().Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельФормыВерх.Настройка.
//
Процедура КоманднаяПанельФормыВерхНастройка(Кнопка)

	ФормаНастройки = ОбработкаОбъект.ПолучитьФорму("ФормаНастройки");

	ФормаНастройки.ВидПолученияПисем = ВидПолученияПисем;
	ФормаНастройки.ПрочитанностьПолучаемыхПисем = ПрочитанностьПолучаемыхПисем;

	ВозвращенныйПараметр = ФормаНастройки.ОткрытьМодально();

	Если ВозвращенныйПараметр <> Неопределено И ТипЗнч(ВозвращенныйПараметр) = Тип("Структура") Тогда
	
		ВозвращенныйПараметр.Свойство("ВидПолученияПисем", ВидПолученияПисем);
		ВозвращенныйПараметр.Свойство("ПрочитанностьПолучаемыхПисем", ПрочитанностьПолучаемыхПисем);

		ЗаполнитьТаблицу();
		
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()

	ВидПолученияПисем            = Ложь;
	ПрочитанностьПолучаемыхПисем = Истина;
	
	Попытка
		мПочта.Подключиться();
	Исключение
		СообщитьОбОшибке(ОписаниеОшибки(),, "Не удалось установить подключение к основной почтовой программе операционной системы.");
		Возврат;
	КонецПопытки;
	
	ИзменитьДоступностьКнопокОткрытияСобытия();
	
КонецПроцедуры

// Обработчик события ПриЗакрытии формы.
//
Процедура ПриЗакрытии()
	
	Попытка
		мПочта.Отключиться();
	Исключение
		СообщитьОбОшибке(ОписаниеОшибки(),, "Не удалось выполнить отключение от основной почтовой программы операционной системы.");
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить() Тогда
		Предупреждение("В настройках учета установлено использование встроенного почтового клиента.");
		Отказ = Истина;
		Возврат;
	КонецЕсли; 

	мПочта = Новый Почта;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ОБРАБОТЧИКОВ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события ПриВыводеСтроки элемента формы ТаблицаПисем.
//
Процедура ТаблицаПисемПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ОформлениеСтроки.Ячейки.Использование.ОтображатьТекст = Ложь;

	Если НЕ ЗначениеНеЗаполнено(ДанныеСтроки.Документ) Тогда
	
		ОформлениеСтроки.Ячейки.Использование.ТолькоПросмотр = Истина;

		ОформлениеСтроки.Ячейки.АдресОтправителя.ЦветТекста = WebЦвета.Серый;
		ОформлениеСтроки.Ячейки.Отправитель.ЦветТекста = WebЦвета.Серый;
		ОформлениеСтроки.Ячейки.Тема.ЦветТекста = WebЦвета.Серый;

	Иначе

		ОформлениеСтроки.Ячейки.Использование.ТолькоПросмотр = ЗначениеНеЗаполнено(ДанныеСтроки.Отправитель);
		
	КонецЕсли; 

	ОформлениеСтроки.Ячейки.Вложения.ОтображатьТекст = Ложь;
	ОформлениеСтроки.Ячейки.Вложения.ОтображатьФлажок = Ложь;
	ОформлениеСтроки.Ячейки.Вложения.ОтображатьКартинку = Истина;
	ВложенияПисьма = ДанныеСтроки.Письмо.Вложения;
	Если ДанныеСтроки.Вложения Тогда
		ОформлениеСтроки.Ячейки.Вложения.ИндексКартинки = 0;
	Иначе
		ОформлениеСтроки.Ячейки.Вложения.ИндексКартинки = 2;
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента формы ТаблицаПисем.
//
Процедура ТаблицаПисемПередНачаломИзменения(Элемент, Отказ)

	Если НЕ Элемент.ТекущаяКолонка = Элемент.Колонки.Использование Тогда
		
		ПоказатьПисьмо();

		Отказ = Истина;

	Иначе

		Если Элемент.ТекущиеДанные.Отправитель = Неопределено ИЛИ Элемент.ТекущиеДанные.Отправитель.Пустая() Тогда
			
			Отказ = Истина;
			Элемент.ТекущиеДанные.Использование = Ложь;
			
		ИначеЕсли Элемент.ТекущиеДанные.Документ <> Неопределено И НЕ Элемент.ТекущиеДанные.Документ.Пустая() И НЕ Элемент.ТекущиеДанные.Использование тогда

			ТекстВопроса = "По данному письму уже сформировано событие " + Строка(Элемент.ТекущиеДанные.Документ) + "
			               |Хотите создать еще?";

			ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
			Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
				
				Отказ = Истина;
				Элемент.ТекущиеДанные.Использование = Ложь;
				
			КонецЕсли; 
			
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы ТаблицаПисем.
//
Процедура ТаблицаПисемПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы ТаблицаПисем.
//
Процедура ТаблицаПисемПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы ТаблицаПисем.
//
Процедура ТаблицаПисемПриАктивизацииСтроки(Элемент)

	ИзменитьДоступностьКнопокОткрытияСобытия();
	
КонецПроцедуры

ТаблицаПисем.Колонки.Добавить("Письмо");
ТаблицаПисем.Колонки.Добавить("Документ");
