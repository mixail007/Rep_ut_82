Перем ДанныеЮрФизЛица;

Процедура КнопкаНайтиНажатие(Элемент)
	
	ПриИзмененииИНН();
	
КонецПроцедуры

Процедура ПриИзмененииИНН()
	
	Если НЕ ПроверитьСоединение() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЮрФизЛица	= Фокус_ПолучитьДанные_ЮрФизЛица(СозданиеКонтрагента_ИНН);
	
	Если ЗначениеЗаполнено(ДанныеЮрФизЛица) Тогда
	
		ЭлементыФормы.ТабДанных.Очистить();
	
		ЭлементыФормы.ТабДанных.Вывести(Фокус_ВывестиДанные_ЮрФизЛицо(ДанныеЮрФизЛица));
		
	КонецЕсли;
		
КонецПроцедуры

Процедура КнопкаСоздатьКонтрагентаНажатие(Элемент)
	
	Если ЗначениеЗаполнено(ДанныеЮрФизЛица) И ЗначениеЗаполнено(СозданиеКонтрагента_ИНН) И ДанныеЮрФизЛица.ИНН = СозданиеКонтрагента_ИНН Тогда
		
		Результат = Фокус_Интеграция_СоздатьКарточкуКонтрагента(ДанныеЮрФизЛица);
		
		Если НЕ Результат.Успешно Тогда
			
			ТекстОшибки = "Не удалось создать карточку контрагента!";
			Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
				ТекстОшибки = ТекстОшибки + Символы.ПС + Результат.ТекстОшибки;
			КонецЕсли;
			
			Предупреждение(ТекстОшибки,,"Контур.Фокус");
			
		Иначе
			Результат.Ссылка.ПолучитьФорму().Открыть();
		КонецЕсли;	
			
	КонецЕсли;
	
КонецПроцедуры

Процедура СозданиеКонтрагента_ИННПриИзменении(Элемент)
	
	ПриИзмененииИНН();
	
КонецПроцедуры

Процедура КлючДоступаПриИзменении(Элемент)
	
	ОбновитьМаскуКлючаДоступа();
	
КонецПроцедуры

Процедура ОбновитьМаскуКлючаДоступа()
	
	Если ЗначениеЗаполнено(КлючДоступа) Тогда
		ЭлементыФормы.МаскаКлюча.Заголовок = "..."+Прав(КлючДоступа,7);
	Иначе
		ЭлементыФормы.МаскаКлюча.Заголовок = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьНастройкиНаблюдения()
	
	ТекстЗапросаВыборки = Фокус_ХранениеДанных_ПрочитатьНастройку("НаблюдениеВыборкаКонтрагентов");
	
	ЭлементыФормы.ТекстЗапросаВыборкиКонтрагентов.УстановитьТекст(ТекстЗапросаВыборки);
									   
	НастройкаМаркеров = Фокус_ХранениеДанных_ПрочитатьНастройку("НаблюдениеНастройкаМаркеров");
	
	ЭлементыФормы.ТабДокументНастройкиМаркеров.Очистить();
	ЭлементыФормы.ТабДокументНастройкиМаркеров.Вывести(НастройкаМаркеров);
	ЭлементыФормы.ТабДокументНастройкиМаркеров.ФиксацияСверху = 1;
	
	ТекСписок = Фокус_ХранениеДанных_ПрочитатьНастройку("СписокКонтрагентовНаблюдения");
	
	Для Каждого Стр ИЗ ТекСписок Цикл
		НоваяСтрока = СписокКонтрагентовНаблюдения.Добавить();
		НоваяСтрока.Контрагент = Стр.Контрагент;
	КонецЦикла;
	
	флСписокКонтрагентов = Фокус_ХранениеДанных_ПрочитатьНастройку("ВариантВыборкиКонтрагентов");
	ПользовательАвтообмена = Фокус_ХранениеДанных_ПрочитатьНастройку("ПользовательАвтообмена");
	
	УправлениеВидимостьюНастройкиВыборкиКонтрагентов();
	
КонецПроцедуры

Процедура УстановитьДоступностьФункционалаПоНаличиюСвоихОбъектов()
	
	ОбъектыДобавлены = Фокус_ХранениеДанных_ДобавленыОбъекты();
	
	ЭлементыФормы.КнопкаОбновитьНаблюдаемыеДанные.Доступность = ОбъектыДобавлены;
	ЭлементыФормы.КнопкаСформироватьОтчетПоНаблюдениям.Доступность = ОбъектыДобавлены;
	ЭлементыФормы.КнопкаСохранитьНастройкиНаблюдения.Доступность = ОбъектыДобавлены;
	ЭлементыФормы.ПанельДоступностиНаблюдения.Доступность = ОбъектыДобавлены;
	
	ЭлементыФормы.ПанельПредупрежденияНаблюдения.Видимость = НЕ ОбъектыДобавлены;
	ЭлементыФормы.ПанельПредупрежденияНаблюдения1.Видимость = НЕ ОбъектыДобавлены;
	
	Если ОбъектыДобавлены Тогда
		ЭлементыФормы.ПодсказкаСостояниеДобавленныхОбъектов.Заголовок = "Объекты добавлены в конфигурацию";
		ЭлементыФормы.ПодсказкаСостояниеДобавленныхОбъектов.ЦветТекста = WebЦвета.ТемноЗеленый;
		ЭлементыФормы.НадписьПодсказкаОбновление.Видимость = Ложь;
	КонецЕсли;
		
КонецПроцедуры

Процедура ПриОткрытии()
	
	Фокус_ИнициализироватьМодуль();
	
	КлючДоступа = Фокус_ХранениеДанных_ПрочитатьНастройку("КлючДоступа");
    РезультатыЭкспрессПроверкиВБраузере = Фокус_ХранениеДанных_ПрочитатьНастройку("ОткрыватьВБраузере");
	НастройкиМаркеровХранитьИндивидуальноПоПользователям=Фокус_ХранениеДанных_ПрочитатьНастройку("ИндивидуальныйНастройкиМаркеров");
	
	ПроверкаСпискомСвоиМаркеры = Фокус_ХранениеДанных_ПрочитатьНастройку("ПроверкаСпискомСвоиМаркеры");
	УправлениеВидимостьюСтраницРезультатовПроверки();
	
	ПараметрыПрокси = Фокус_ХранениеДанных_ПрочитатьНастройку("ПараметрыПрокси");
	Если ТипЗнч(ПараметрыПрокси) = Тип("Структура") Тогда
		
		СерверПрокси		= ПараметрыПрокси.СерверПрокси;
		ПортПрокси			= ПараметрыПрокси.ПортПрокси;
		ЛогинПрокси			= ПараметрыПрокси.ЛогинПрокси;
		ПарольПрокси		= ПараметрыПрокси.ПарольПрокси;
		ПассивныйРежим	   	= ПараметрыПрокси.ПассивныйРежим;
		ИспользуетсяПрокси	= ПараметрыПрокси.ИспользуетсяПрокси;
		
	КонецЕсли;
	
	ПараметрыПочты = Фокус_ХранениеДанных_ПрочитатьНастройку("ПараметрыПочты");
	Если ТипЗнч(ПараметрыПочты) = Тип("Структура") Тогда
		СерверSMTP			= ПараметрыПочты.СерверSMTP;
		ПортSMTP			= ПараметрыПочты.ПортSMTP;
		ПользовательSMTP	= ПараметрыПочты.ПользовательSMTP;
		ПарольSMTP			= ПараметрыПочты.ПарольSMTP;
		ИспользоватьБезопасноеСоединение = ПараметрыПочты.ИспользоватьБезопасноеСоединение;
	КонецЕсли;
		
	УправлениеДоступностьюНастроекПрокси();
	
	ОбновитьМаскуКлючаДоступа();
	
	ОбновитьСписокДействий();	

	НаблюдениеДатаНачала = ТекущаяДата();
	НаблюдениеДатаОкончания = ТекущаяДата();
	
	ИнициализироватьНастройкиНаблюдения();
	
	Заголовок = Заголовок + " ver. "+ПолучитьНомерРелиза_Контур();
	
	УстановитьДоступностьФункционалаПоНаличиюСвоихОбъектов();
	
	СохраненныйСписокМаркеров = Фокус_ХранениеДанных_ПолучитьСписокМаркеров();
	Если ТипЗнч(СохраненныйСписокМаркеров) = Тип("ТаблицаЗначений") Тогда
		Для Каждого Эл ИЗ СохраненныйСписокМаркеров Цикл
			НоваяСтрока = СписокМаркеров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Эл);
		КонецЦикла;
	КонецЕсли;
	
	УправлениеВидимостьюНастройкиПочтыSSL();

	ПодключитьОбработчикОжидания("ПроверитьАвтоматическийЗапуск",0.1,Истина);
	ОбновитьСтатистикуИспользования();
	ПодключитьОбработчикОжидания("ОбновитьСтатистикуИспользования",30,Ложь);
	УстановитьВидимость();	
КонецПроцедуры

Процедура ПроверитьАвтоматическийЗапуск()
	
	Если ЗначениеЗаполнено(ПользовательАвтообмена) И 
		( (КэшИмяКонфигурации="Регионгаз" и ПараметрыСеанса.Пользователь = ПользовательАвтообмена) 
		Или
		(КэшИмяКонфигурации<>"Регионгаз" и ПараметрыСеанса.ТекущийПользователь = ПользовательАвтообмена) )
		Тогда
		
		ТекстПредупреждения = 	"Сейчас начнется обновление данных наблюдения за контрагентами.."+Символы.ПС+
		"Внимание! После обновления данных, 1С закроется, т.к. данный режим предназначен для автоматического запуска."+Символы.ПС+
		"Для отключения режима нужно очистить поле ""Пользователь автообмена"" в настройках наблюдения.";
		
		Если НЕ Вопрос(ТекстПредупреждения,РежимДиалогаВопрос.ОКОтмена,5,,"Контур.Фокус",КодВозвратаДиалога.ОК) = КодВозвратаДиалога.Отмена Тогда
			КнопкаОбновитьНаблюдаемыеДанныеНажатие("");
			ЗавершитьРаботуСистемы();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура СтатистикаНажатие(Элемент)
	
    ДанныеСтатистики = Фокус_ПолучитьДанные_СтатистикаКлюча();
	Таб = Фокус_ВывестиДанные_СтатистикаКлюча(ДанныеСтатистики);
	
	Если ПроверитьСоединение() Тогда
	
		ФормаПросмотраТД = ПолучитьФорму("ФормаПросмотраТабличногоДокумента");
		ФормаПросмотраТД.ТабДок = Таб;
		ФормаПросмотраТД.Открыть();

	КонецЕсли;
		
КонецПроцедуры

Процедура КнопкаТестНажатие(Элемент)
	
	Фокус_Автотесты_Старт(Истина);

КонецПроцедуры

Процедура ТабДанныхОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если Расшифровка = "ЭкспрессПроверка" Тогда
		
		Данные = Фокус_ПолучитьДанные_ЭкспрессОтчет(СозданиеКонтрагента_ИНН);
		Если ЗначениеЗаполнено(Данные) Тогда
			Если РезультатыЭкспрессПроверкиВБраузере Тогда
				ЗапуститьПриложение(Данные.href);
			Иначе
				Форма = ПолучитьФорму("ФормаРезультатовЭкспрессПроверки");
				Форма.СсылкаНаСтраницу = Данные.href;
				Форма.Открыть();
			КонецЕсли;		
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
	ИначеЕсли Расшифровка = "ВыпискаЕГРЮЛ" Тогда
		
		Ссылка = "https://focus-api.kontur.ru/api3/excerpt?key="+Фокус_ПолучитьКлючРазработчика()+"&inn="+СозданиеКонтрагента_ИНН;

		ЗапуститьПриложение(Ссылка);
		
		СтандартнаяОбработка = Ложь;
		
	ИначеЕсли Расшифровка = "ФинАнализ" Тогда
		
		Ссылка = "https://focus-api.kontur.ru/api3/finan?key="+Фокус_ПолучитьКлючРазработчика()+"&inn="+СозданиеКонтрагента_ИНН;

		ЗапуститьПриложение(Ссылка);
		
		СтандартнаяОбработка = Ложь;
	ИначеЕсли Расшифровка = "КонтурФокус" Тогда
		
		Ссылка=Фокус_ПолучитьЗначение(СозданиеКонтрагента_ИНН,"req","focusHref");
		
		ЗапуститьПриложение(Ссылка);
		
		СтандартнаяОбработка = Ложь;		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура КнопкаСохранитьНажатие(Элемент)
	
	Фокус_ХранениеДанных_СохранитьНастройку("НаблюдениеВыборкаКонтрагентов",ЭлементыФормы.ТекстЗапросаВыборкиКонтрагентов.ПолучитьТекст());
	
	ТабДок=Новый ТабличныйДокумент;    
    ТабДок.Вывести(ЭлементыФормы.ТабДокументНастройкиМаркеров);
	
	Фокус_ХранениеДанных_СохранитьНастройку("НаблюдениеНастройкаМаркеров",ТабДок);
	Фокус_ХранениеДанных_СохранитьНастройку("ВариантВыборкиКонтрагентов",флСписокКонтрагентов);
	Фокус_ХранениеДанных_СохранитьНастройку("СписокКонтрагентовНаблюдения",СписокКонтрагентовНаблюдения);
	Фокус_ХранениеДанных_СохранитьНастройку("ПользовательАвтообмена",ПользовательАвтообмена);
	
	ПараметрыПочты = Новый Структура;
	ПараметрыПочты.Вставить("СерверSMTP", 						СерверSMTP);
	ПараметрыПочты.Вставить("ПортSMTP", 						ПортSMTP);
	ПараметрыПочты.Вставить("ПользовательSMTP", 				ПользовательSMTP);
	ПараметрыПочты.Вставить("ПарольSMTP", 						ПарольSMTP);
	ПараметрыПочты.Вставить("ИспользоватьБезопасноеСоединение",	ИспользоватьБезопасноеСоединение);
	
	ОбработкаОбъект.Фокус_ХранениеДанных_СохранитьНастройку("ПараметрыПочты",ПараметрыПочты);
	
КонецПроцедуры

Процедура КнопкаОбновитьНаблюдаемыеДанныеНажатие(Элемент)
	
	Если ПроверитьСоединение() Тогда
		Фокус_Наблюдение_ОбновитьДанные();
		Фокус_Наблюдение_СоздатьМаркеры();
		Фокус_Наблюдение_ВыполнитьДействия();
	КонецЕсли;	
		
КонецПроцедуры

Функция ПроверитьСоединение()
	
	Если НЕ ЗначениеЗаполнено(КлючДоступа) Тогда
		Предупреждение("Укажите ключ доступа в настройках!",10,"Контур.Фокус: ошибка соединения");
		Возврат Ложь;
	КонецЕсли;
	
	РезультатПроверки = Фокус_API_ПроверитьКлючДоступа();
	Если Не РезультатПроверки.Успешно Тогда
		Предупреждение("Не удалось получить данные с сервера Контур.Фокус:"+Символы.ПС+Символы.ПС+РезультатПроверки.ОписаниеОшибки,10,"Контур.Фокус: ошибка соединения");
	КонецЕсли;
	
	Возврат РезультатПроверки.Успешно;	
	
КонецФункции

Процедура КнопкаСформироватьОтчетПоНаблюдениямНажатие(Элемент)
	
	Таб = Фокус_ВыводДанных_ПоказатьСработавшиеМаркеры(НаблюдениеДатаНачала,НаблюдениеДатаОкончания,,,,,,Истина);
	
	ЭлементыФормы.ТабНаблюдения.Очистить();
	ЭлементыФормы.ТабНаблюдения.Вывести(Таб);
	
КонецПроцедуры

Процедура СохранитьФайлОбновленияНажатие(Элемент)
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбора.Заголовок		= "Укажите файл, в который нужно сохранить обновление для вашей конфигурации";
	ДиалогВыбора.Фильтр			= "Файл конфигурации 1С (*.cf)|*.cf";      
	ДиалогВыбора.ПолноеИмяФайла = "КонтурFocus_upd.cf";
	
	Если ДиалогВыбора.Выбрать() Тогда      
		
		ПутьКФайлу = ДиалогВыбора.ПолноеИмяФайла;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ПолучитьМакет("ФайлОбновленияКонфигурации").Записать(ПутьКФайлу);
	
КонецПроцедуры

Процедура НадписьТекстОтсутствияОбъектовНажатие(Элемент)
	
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Настройки;
	ЭлементыФормы.ПанельНастроек.ТекущаяСтраница = ЭлементыФормы.ПанельНастроек.Страницы.ХранениеДанных;
	
КонецПроцедуры

Процедура НадписьТекстОтсутствияОбъектов1Нажатие(Элемент)
	
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Настройки;
	ЭлементыФормы.ПанельНастроек.ТекущаяСтраница = ЭлементыФормы.ПанельНастроек.Страницы.ХранениеДанных;

КонецПроцедуры

Процедура УправлениеВидимостьюНастройкиВыборкиКонтрагентов()
	
	Если флСписокКонтрагентов = "Список" Тогда
		ЭлементыФормы.ПанельВыборкиКонтрагентов.ТекущаяСтраница = ЭлементыФормы.ПанельВыборкиКонтрагентов.Страницы.СписокКонтрагентов;
	Иначе
		ЭлементыФормы.ПанельВыборкиКонтрагентов.ТекущаяСтраница = ЭлементыФормы.ПанельВыборкиКонтрагентов.Страницы.Запрос;
	КонецЕсли;
	
КонецПроцедуры

Процедура флСписокКонтрагентовПриИзменении(Элемент)
	
	УправлениеВидимостьюНастройкиВыборкиКонтрагентов();
	
КонецПроцедуры

Процедура СписокКонтрагентовНаблюденияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Контрагент) Тогда
		Если ДанныеСтроки.Контрагент.ЭтоГруппа Тогда
			ОформлениеСтроки.Ячейки.Контрагент.УстановитьКартинку(ЭлементыФормы.КартинкаГруппа.Картинка);
		Иначе
			ОформлениеСтроки.Ячейки.Контрагент.УстановитьКартинку(ЭлементыФормы.КартинкаЭлемент.Картинка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаПоказатьСписокИНННажатие(Элемент)
	
	СписокИНН = Фокус_Наблюдение_ПолучитьСписокИНН();
	СписокИНН.ВыбратьСтроку();
	
КонецПроцедуры

Процедура НадписьИнструкцияПоОбновлениюНажатие(Элемент)
	
	ПутьКФайлу = КаталогВременныхФайлов()+"КонтурФокус_1С_8_ОбновлениеБазы.pdf";
	ПолучитьМакет("ИнструкцияОбновление").Записать(ПутьКФайлу);
	ЗапуститьПриложение(ПутьКФайлу);
	
КонецПроцедуры

Процедура КнопкаСохранитьОсновныеНастройкиНажатие(Элемент)
	
	ПараметрыПрокси = Новый Структура;
	ПараметрыПрокси.Вставить("СерверПрокси",		СерверПрокси);
	ПараметрыПрокси.Вставить("ПортПрокси",			ПортПрокси);
	ПараметрыПрокси.Вставить("ЛогинПрокси",			ЛогинПрокси);
	ПараметрыПрокси.Вставить("ПарольПрокси",		ПарольПрокси);
	ПараметрыПрокси.Вставить("ПассивныйРежим",		Истина);
	ПараметрыПрокси.Вставить("ИспользуетсяПрокси",	ИспользуетсяПрокси);
	
	Фокус_ХранениеДанных_СохранитьНастройку("КлючДоступа", КлючДоступа);
	Фокус_ХранениеДанных_СохранитьНастройку("ПараметрыПрокси", ПараметрыПрокси);
	Фокус_ХранениеДанных_СохранитьНастройку("ОткрыватьВБраузере", РезультатыЭкспрессПроверкиВБраузере);
	Фокус_ХранениеДанных_СохранитьНастройку("ИндивидуальныйНастройкиМаркеров", НастройкиМаркеровХранитьИндивидуальноПоПользователям);
	
	КэшКлючаДоступа = Неопределено;
	
КонецПроцедуры

Процедура УправлениеДоступностьюНастроекПрокси()
	
	ЭлементыФормы.СерверПрокси.Доступность =  ИспользуетсяПрокси;
	ЭлементыФормы.ПортПрокси.Доступность = ИспользуетсяПрокси;
	ЭлементыФормы.ЛогинПрокси.Доступность = ИспользуетсяПрокси;
	ЭлементыФормы.ПарольПрокси.Доступность = ИспользуетсяПрокси;
	
КонецПроцедуры

Процедура ИспользуетсяПроксиПриИзменении(Элемент)
	
	УправлениеДоступностьюНастроекПрокси();
	
КонецПроцедуры

Процедура КоманднаяПанельСпискаПроверкиЗаполнить(Кнопка)

	Если ВидФильтраКонтрагентовПроверка = "ПоДокументам" Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НачалоПериода",	НачалоПериодаПроверкаНадежности);
		СтруктураПараметров.Вставить("КонецПериода",	КонецДня(КонецПериодаПроверкаНадежности));
		
	ИначеЕсли ВидФильтраКонтрагентовПроверка = "Каталог" Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("КаталогКонтрагентов",	КаталогПроверкиНадежности);
		
	Иначе
		
		СтруктураПараметров = Неопределено;
		                                    
	КонецЕсли;
	
	СписокПроверки.Загрузить(Фокус_Интеграция_ПолучитьСписокПроверки(ВидФильтраКонтрагентовПроверка, СтруктураПараметров));
	
	Если СписокПроверки.Количество()>0 Тогда
	
		КнопкаПроверить = ЭлементыФормы.КоманднаяПанельСпискаПроверки.Кнопки.КнопкаПроверить;
		КнопкаПроверить.Текст = "Проверить "+СокрЛП(СписокПроверки.Количество()) + " ИНН";
		КнопкаПроверить.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельСпискаПроверкиСортироватьПоСтатусу(Кнопка)

	СписокПроверки.Сортировать("КрасныйКоличество Убыв,ЖелтыйКоличество Убыв,ЗеленыйКоличество Убыв, ИНН, Контрагент");
	ЭлементыФормы.КоманднаяПанельСпискаПроверки.Кнопки.СортировкаМеню.Текст = "Сортировка: по статусу";
	
	Если СписокПроверки.Количество()>0 Тогда
		ЭлементыФормы.СписокПроверки.ТекущаяСтрока = СписокПроверки[0];
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельСпискаПроверкиСортироватьПоКонтрагенту(Кнопка)
	
	СписокПроверки.Сортировать("Контрагент");
	ЭлементыФормы.КоманднаяПанельСпискаПроверки.Кнопки.СортировкаМеню.Текст = "Сортировка: по контрагенту";

	Если СписокПроверки.Количество()>0 Тогда
		ЭлементыФормы.СписокПроверки.ТекущаяСтрока = СписокПроверки[0];
	КонецЕсли;

КонецПроцедуры

Процедура СписокПроверкиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.КрасныйКоличество>0 Тогда
		ОформлениеСтроки.Ячейки.Контрагент.УстановитьКартинку(ЭлементыФормы.Красный.Картинка);
	ИначеЕсли ДанныеСтроки.ЖелтыйКоличество>0 Тогда
		ОформлениеСтроки.Ячейки.Контрагент.УстановитьКартинку(ЭлементыФормы.Желтый.Картинка);
	ИначеЕсли ДанныеСтроки.ЗеленыйКоличество>0 Тогда
		ОформлениеСтроки.Ячейки.Контрагент.УстановитьКартинку(ЭлементыФормы.Зеленый.Картинка);
	Иначе	
		ОформлениеСтроки.Ячейки.Контрагент.УстановитьКартинку(ЭлементыФормы.Пустой.Картинка);
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокПроверкиПриАктивизацииСтроки(Элемент)
	
	Если ЭлементыФормы.КоманднаяПанельСпискаПроверки.Кнопки.КнопкаПроверить.Отображение = ОтображениеКнопкиКоманднойПанели.Надпись Тогда
		ПодключитьОбработчикОжидания("ОбновитьСтраницуЭкспрессПроверкиДляТекущейСтроки",0.1,Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеВидимостьюСтраницРезультатовПроверки()
	
	Если ПроверкаСпискомСвоиМаркеры ИЛИ РезультатыЭкспрессПроверкиВБраузере Тогда
		ЭлементыФормы.ПанельПросмотраМаркеров.ТекущаяСтраница = ЭлементыФормы.ПанельПросмотраМаркеров.Страницы.ТабличныйДокумент;
	Иначе
		ЭлементыФормы.ПанельПросмотраМаркеров.ТекущаяСтраница = ЭлементыФормы.ПанельПросмотраМаркеров.Страницы.HTMLДокумент;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСтраницуЭкспрессПроверкиДляТекущейСтроки()
	
	Если ПроверкаСпискомСвоиМаркеры ИЛИ РезультатыЭкспрессПроверкиВБраузере Тогда
		
		ТекСтрока = ЭлементыФормы.СписокПроверки.ТекущиеДанные;
		Если НЕ ТекСтрока = Неопределено Тогда
			
			Таб = ЭлементыФормы.ПолеТабличногоДокументаПроверка;
			
			Таб.Очистить();
			
			ДанныеМаркеры = Фокус_Маркеры_ПолучитьСработавшие(СокрЛП(ТекСтрока.ИНН));
			Таб.Вывести(Фокус_ВыводДанных_ПоказатьСписокМаркеров(ДанныеМаркеры));
			
		КонецЕсли;
		
	Иначе
		
		ТекСтрока = ЭлементыФормы.СписокПроверки.ТекущиеДанные;
		Если НЕ ТекСтрока = Неопределено Тогда
			
			ДанныеОтчета = Фокус_ПолучитьДанные_ЭкспрессОтчет(СокрЛП(ТекСтрока.ИНН));
			
			Если ТипЗнч(ДанныеОтчета) = Тип("Структура") Тогда
				ЭлементыФормы.ПолеHTMLДокументаПроверка.Перейти(ДанныеОтчета.href);
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельСпискаПроверкиОткрытьРезультатЭкспрессПроверки(Кнопка)

	ТекСтрока = ЭлементыФормы.СписокПроверки.ТекущиеДанные;
	Если НЕ ТекСтрока = Неопределено Тогда
		
		ДанныеОтчета = Фокус_ПолучитьДанные_ЭкспрессОтчет(СокрЛП(ТекСтрока.ИНН));
		
		Если ТипЗнч(ДанныеОтчета) = Тип("Структура") Тогда
			Если РезультатыЭкспрессПроверкиВБраузере Тогда
				ЗапуститьПриложение(ДанныеОтчета.href);
			Иначе
				Форма = ПолучитьФорму("ФормаРезультатовЭкспрессПроверки");
				Форма.СсылкаНаСтраницу = ДанныеОтчета.href;
				Форма.Открыть();
			КонецЕсли;
		КонецЕсли;	
			
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельСпискаМаркеровВключитьВсеМаркеры(Кнопка)

	СписокМаркеров.ЗаполнитьЗначения(Истина,"Включен");
	
КонецПроцедуры

Процедура КоманднаяПанельСпискаМаркеровСнятьВсеМаркеры(Кнопка)

	СписокМаркеров.ЗаполнитьЗначения(Ложь,"Включен");
	
КонецПроцедуры

Процедура СписокМаркеровПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если Копирование Тогда
		
		ВыбраннаяСтрока = Элемент.ТекущиеДанные;
		
		ФормаМаркера = ПолучитьФорму("ФормаМаркера");
		ФормаМаркера.Наименование	= ВыбраннаяСтрока.Наименование;
		ФормаМаркера.Включен		= ВыбраннаяСтрока.Включен;
		ФормаМаркера.Описание		= ВыбраннаяСтрока.Описание;
		ФормаМаркера.Категория		= ВыбраннаяСтрока.Категория;
		
		ФормаМаркера.ЭлементыФормы.ТекстКодаМаркера.УстановитьТекст(ВыбраннаяСтрока.КодМаркера);

		ФормаМаркера.Открыть();
		
	Иначе
		
		ПолучитьФорму("ФормаМаркера").Открыть();
		
	КонецЕсли;
		
	Отказ = Истина;
	
КонецПроцедуры

Процедура КоманднаяПанельСпискаМаркеровСохранитьВФайл(Кнопка)
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбора.Заголовок		= "Укажите файл, в который нужно сохранить настройки маркеров";
	ДиалогВыбора.Фильтр			= "Табличный документ (*.mxl)|*.mxl";      
	ДиалогВыбора.ПолноеИмяФайла = "КонтурФокус_Маркеры.mxl";
	
	Если ДиалогВыбора.Выбрать() Тогда      
		
		ПутьКФайлу = ДиалогВыбора.ПолноеИмяФайла;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Таб = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("Маркеры_МакетСохранения");
	
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	Для Каждого Стр Из СписокМаркеров Цикл
		ОбластьСтрока.Параметры.Заполнить(Стр);
		Таб.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	Таб.Записать(ПутьКФайлу);
	 	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Фокус_ИзмененМаркер" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			
			ID = Параметр.ID;
			ТекСтрока = СписокМаркеров.Найти(ID, "ID");
			Если ТекСтрока = Неопределено Тогда
				ТекСтрока = СписокМаркеров.Добавить();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ТекСтрока,Параметр);
			
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Фокус_ИзмененоДействие" Тогда
		
		ОбновитьСписокДействий();	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСписокДействий()
	
	Список = Фокус_ХранениеДанных_ПолучитьСписокЭлементовСправочника("Действия");
	
	СписокДействий.Очистить();
	
	Для Каждого Эл Из Список Цикл
		ЗаполнитьЗначенияСвойств(СписокДействий.Добавить(),Эл);
	КонецЦикла;
		
КонецПроцедуры

Процедура СписокМаркеровВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если НЕ ВыбраннаяСтрока = Неопределено Тогда
		
		СтруктураМаркера = Новый Структура;
		СтруктураМаркера.Вставить("ID", ВыбраннаяСтрока.ID);
		СтруктураМаркера.Вставить("Наименование", ВыбраннаяСтрока.Наименование);
		СтруктураМаркера.Вставить("Включен",ВыбраннаяСтрока.Включен);
		СтруктураМаркера.Вставить("Описание", ВыбраннаяСтрока.Описание);
		СтруктураМаркера.Вставить("Категория", ВыбраннаяСтрока.Категория);
		СтруктураМаркера.Вставить("КодМаркера", ВыбраннаяСтрока.КодМаркера);
				
		ФормаМаркера = ПолучитьФорму("ФормаМаркера");
		ФормаМаркера.ID				= ВыбраннаяСтрока.ID;
		ФормаМаркера.Наименование	= ВыбраннаяСтрока.Наименование;
		ФормаМаркера.Включен		= ВыбраннаяСтрока.Включен;
		ФормаМаркера.Описание		= ВыбраннаяСтрока.Описание;
		ФормаМаркера.Категория		= ВыбраннаяСтрока.Категория;
		
		ФормаМаркера.ЭлементыФормы.ТекстКодаМаркера.УстановитьТекст(ВыбраннаяСтрока.КодМаркера);

		ФормаМаркера.Открыть();
		
	КонецЕсли;
		
КонецПроцедуры

Процедура СписокМаркеровПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.Пометка.УстановитьФлажок(ДанныеСтроки.Включен);
	
	Если ДанныеСтроки.Категория = "Красный" Тогда
		ОформлениеСтроки.Ячейки.Наименование.УстановитьКартинку(ЭлементыФормы.Красный.Картинка);
	ИначеЕсли ДанныеСтроки.Категория = "Желтый" Тогда
		ОформлениеСтроки.Ячейки.Наименование.УстановитьКартинку(ЭлементыФормы.Желтый.Картинка);
	ИначеЕсли ДанныеСтроки.Категория = "Зеленый" Тогда
		ОформлениеСтроки.Ячейки.Наименование.УстановитьКартинку(ЭлементыФормы.Зеленый.Картинка);
	Иначе	
		ОформлениеСтроки.Ячейки.Наименование.УстановитьКартинку(ЭлементыФормы.Пустой.Картинка);
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокМаркеровПриИзмененииФлажка(Элемент, Колонка)
	
	ТекСтрока = ЭлементыФормы.СписокМаркеров.ТекущиеДанные;
	Если НЕ ТекСтрока = Неопределено Тогда
		ТекСтрока.Включен = НЕ ТекСтрока.Включен;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура СписокМаркеровПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура СписокМаркеровПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура КоманднаяПанельСпискаМаркеровЗагрузитьИзФайла(Кнопка)
	
	СтандартнаяОбработка=Ложь;
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	Фильтр = "Табличный документ (*.mxl)|*.mxl";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.Заголовок = "Выберите файл настройки маркеров";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		
		Таб = Новый ТабличныйДокумент;
		Таб.Прочитать(ДиалогОткрытияФайла.ПолноеИмяФайла);
		
		Стр = 0;
		
		СписокМаркеров.Очистить();
		
		Пока Истина Цикл
			
			стр = Стр+1;
			
			ID = Таб.Область("R"+стр+"C1").Текст;
			
			Если НЕ ЗначениеЗаполнено(ID) Тогда
				Прервать;
			КонецЕсли;
			
			НоваяСтрока = СписокМаркеров.Добавить();
			НоваяСтрока.ID = ID;
			НоваяСтрока.Наименование = Таб.Область("R"+стр+"C2").Текст;
			НоваяСтрока.Описание = Таб.Область("R"+стр+"C3").Текст;
			НоваяСтрока.КодМаркера = Таб.Область("R"+стр+"C4").Текст;
			НоваяСтрока.Категория = Таб.Область("R"+стр+"C5").Текст;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаСохранитьСписокМаркеровНажатие(Элемент)
	
	Фокус_ХранениеДанных_СохранитьСписокМаркеров(СписокМаркеров);
	
КонецПроцедуры

Процедура КнопкаСохранитьНастройкиПроверкиСпискаНажатие(Элемент)

	Фокус_ХранениеДанных_СохранитьНастройку("ПроверкаСпискомСвоиМаркеры", ПроверкаСпискомСвоиМаркеры);
	УправлениеВидимостьюСтраницРезультатовПроверки();
	
КонецПроцедуры

Процедура КоманднаяПанельСпискаПроверкиКнопкаПроверить(Кнопка)
	
	Если НЕ ПроверитьСоединение() Тогда
		Возврат;
	КонецЕсли;
	
	ТЗ = Фокус_ПолучитьДанные_ЭкспрессПроверкаСписком(СписокПроверки.ВыгрузитьКолонку("ИНН"));
	
	Для Каждого Стр ИЗ ТЗ Цикл
		
		НайденныеСтроки = СписокПроверки.НайтиСтроки(Новый Структура("ИНН",Стр.ИНН));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			ЗаполнитьЗначенияСвойств(НайденнаяСтрока,Стр);
			НайденнаяСтрока.СсылкаВФокусе=Фокус_ПолучитьЗначение(Стр.ИНН,"req","focusHref")
		КонецЦикла;
		
	КонецЦикла;
	
	КоманднаяПанельСпискаПроверкиСортироватьПоСтатусу("");
	
	КнопкаПроверить = ЭлементыФормы.КоманднаяПанельСпискаПроверки.Кнопки.КнопкаПроверить;
	КнопкаПроверить.Текст = "Проверить";
	КнопкаПроверить.Отображение = ОтображениеКнопкиКоманднойПанели.Надпись;
	ПодключитьОбработчикОжидания("ОбновитьСтраницуЭкспрессПроверкиДляТекущейСтроки",0.1,Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельСпискаМаркеровЗаполнитьНастройкиПоУмолчанию(Кнопка)
	
	НовСписокМаркеров = Фокус_Маркеры_ПолучитьСписокМаркеровПоУмолчанию();	
	
	СписокМаркеров.Очистить();
		
	Для Каждого Стр Из НовСписокМаркеров Цикл
		НоваяСтрока = СписокМаркеров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
	КонецЦикла;
		
КонецПроцедуры

Процедура УправлениеВидимостьюНастройкиПочтыSSL()
	
	ЕстьВозможностьНастройки = Истина;
	
	Профиль = Новый ИнтернетПочтовыйПрофиль;
	Попытка
		Профиль.ИспользоватьSSLSMTP = Истина;
	Исключение
		ЕстьВозможностьНастройки = Ложь;
	КонецПопытки;
	
	ЭлементыФормы.ИспользоватьБезопасноеСоединение.Доступность = ЕстьВозможностьНастройки;
	ЭлементыФормы.КартинкаСправкаПочтаSSL.Видимость = НЕ ЕстьВозможностьНастройки;
	
КонецПроцедуры

Процедура Кнопка1Нажатие(Элемент)
	
	//ТаблицаБухФорм = Фокус_ПолучитьДанные_БухФормы(СозданиеКонтрагента_ИНН);
	//
	//ТаблицаБухФорм.ВыбратьСтроку();
	
	Возврат;
	
	Профиль = Новый ИнтернетПочтовыйПрофиль;

	Профиль.АдресСервераSMTP = "127.0.0.1";
	Профиль.Пароль           = "ghbJhbntn1";
	Профиль.Пользователь     = "testsendfocus@mail.ru";
	Профиль.ПортSMTP         = 25;
    Профиль.ПарольSMTP       = "ghbJhbntn1";
    Профиль.ПользовательSMTP = "testsendfocus@mail.ru";
	Профиль.АутентификацияSMTP = СпособSMTPАутентификации.Login;
                             
	ИнтернетПочта = Новый ИнтернетПочта;

	Попытка
    	ИнтернетПочта.Подключиться(Профиль);
	Исключение
    	Сообщить(ОписаниеОшибки());
    	Предупреждение("Произошли ошибки при проверке настроек учетной записи.
       	|Описание ошибки приведено в окне сообщения.");
    	Возврат;
	КонецПопытки;
	
	СтруктураПисьма = Новый Структура;
	СтруктураПисьма.Вставить("Тема","Контур.Фокус: результаты проверки контрагентов");
	СтруктураПисьма.Вставить("Тело","Результат проверки контрагентов Контур.Фокус:"+Символы.ПС+" Ошибок 23"+Символы.ПС+" Старых22");
	СтруктураПисьма.Вставить("Кому","kstukov@skbkontur.ru");
	СтруктураВложений = Новый Структура;
	
	ИмяВложения = "Проверка контрагентов.pdf";
	ПолноеИмяВложения=КаталогВременныхФайлов()+"\" + ИмяВложения;  
	ЭлементыФормы.ТабНаблюдения.Записать(ПолноеИмяВложения,"PDF");  
	
	СтруктураВложений.Вставить("Значение",ПолноеИмяВложения);
	СтруктураВложений.Вставить("Ключ",ИмяВложения);
	Вложения = Новый Массив;
	Вложения.Добавить(СтруктураВложений);
	СтруктураПисьма.Вставить("Вложения",Вложения);
	
	МассивАдресовОтвета = Новый Массив;
	СтруктураАдресовОтвета = Новый Структура();
	СтруктураАдресовОтвета.Вставить("Представление","Контур.Фокус");
	СтруктураАдресовОтвета.Вставить("Адрес","testsendfocus@mail.ru");
	МассивАдресовОтвета.Добавить(СтруктураАдресовОтвета);
	
	СтруктураПисьма.Вставить("АдресОтвета",МассивАдресовОтвета);
	//СтруктураПисьма.Вставить("УведомитьОДоставке",УведомитьОДоставке);
	//СтруктураПисьма.Вставить("УведомитьОПрочтении",УведомитьОПрочтении);
	Результат = ОтправитьСообщение(СтруктураПисьма,ИнтернетПочта);  				

	Попытка
		УдалитьФайлы(ПолноеИмяВложения);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция ОтправитьСообщение(ПараметрыПисьма,
	Соединение = Неопределено) Экспорт
	
	// Объявление переменных перед первым использованием в качестве
	// параметра метода Свойство структуры ПараметрыПисьма.
	// Переменные содержат значения переданных в функцию параметров.
	Перем Кому, ППТема, ППТело, Вложения, АдресОтвета, ТипТекста, Копии, СлепыеКопии, Пароль;
	
	Если Не ПараметрыПисьма.Свойство("Тема", ППТема) Тогда
		ППТема = "";
	КонецЕсли;
	
	Если Не ПараметрыПисьма.Свойство("Тело", ППТело) Тогда
		ППТело = "";
	КонецЕсли;
	
	Кому = ПараметрыПисьма.Кому;
	//
	//Если ТипЗнч(Кому) = Тип("Строка") Тогда
	//	Кому = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(Кому);
	//КонецЕсли;
	//
	ПараметрыПисьма.Свойство("Вложения", Вложения);
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = ППТема;
	
	// формируем адрес получателя	
	//Для Каждого ПочтовыйАдресПолучателя Из Кому Цикл
		Получатель = Письмо.Получатели.Добавить(ПараметрыПисьма.Кому);
		Получатель.ОтображаемоеИмя = ПараметрыПисьма.Кому;
	//КонецЦикла;
	
	Если ПараметрыПисьма.Свойство("Копии", Копии) Тогда
		// формируем адрес получателя поля Копии
		Для Каждого ПочтовыйАдресПолучателяКопии Из Копии Цикл
			Получатель = Письмо.Копии.Добавить(ПочтовыйАдресПолучателяКопии.Адрес);
			Получатель.ОтображаемоеИмя = ПочтовыйАдресПолучателяКопии.Представление;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("СлепыеКопии", СлепыеКопии) Тогда
		// формируем адрес получателя поля Копии
		Для Каждого ПочтовыйАдресПолучателяСлепыеКопии Из СлепыеКопии Цикл
			Получатель = Письмо.СлепыеКопии.Добавить(ПочтовыйАдресПолучателяСлепыеКопии.Адрес);
			Получатель.ОтображаемоеИмя = ПочтовыйАдресПолучателяСлепыеКопии.Представление;
		КонецЦикла;
	КонецЕсли;
	
	// формируем адрес ответа, если необходимо
	Если ПараметрыПисьма.Свойство("АдресОтвета", АдресОтвета) Тогда
		Для Каждого ПочтовыйАдресОтвета Из АдресОтвета Цикл
			ПочтовыйАдресОбратный = Письмо.ОбратныйАдрес.Добавить(ПочтовыйАдресОтвета.Адрес);
			ПочтовыйАдресОбратный.ОтображаемоеИмя = ПочтовыйАдресОтвета.Представление;
		КонецЦикла;
	КонецЕсли;
	
	
	// получение реквизитов отправителя
	//РеквизитыОтправителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяЗапись, "ИмяПользователя,АдресЭлектроннойПочты");
	
	// добавляем к письму имя отправителя
	Письмо.ИмяОтправителя              = "Контур.Фокус";
	Письмо.Отправитель.ОтображаемоеИмя = "Контур.Фокус";
	Письмо.Отправитель.Адрес           = "testsendfocus@mail.ru";
	
	// добавляем вложения к письму
	Если Вложения <> Неопределено Тогда
		Для Каждого ЭлементВложение Из Вложения Цикл
			Если ТипЗнч(ЭлементВложение.Значение) = Тип("Структура") Тогда
				НовоеВложение = Письмо.Вложения.Добавить(ЭлементВложение.Значение.ДвоичныеДанные, ЭлементВложение.Ключ);
				НовоеВложение.Идентификатор = ЭлементВложение.Значение.Идентификатор;
			Иначе
				Письмо.Вложения.Добавить(ЭлементВложение.Значение, ЭлементВложение.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Установим строку с идентификаторами оснований
	Если ПараметрыПисьма.Свойство("ИдентификаторыОснований") Тогда
		Письмо.УстановитьПолеЗаголовка("References", ПараметрыПисьма.ИдентификаторыОснований);
	КонецЕсли;
	
	// добавляем текст
	Текст = Письмо.Тексты.Добавить(ППТело);
	Если ПараметрыПисьма.Свойство("ТипТекста", ТипТекста) Тогда
		Если ТипЗнч(ТипТекста) = Тип("Строка") Тогда
			Если      ТипТекста = "HTML" Тогда
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
			ИначеЕсли ТипТекста = "RichText" Тогда
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.РазмеченныйТекст;
			Иначе
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТипТекста) = Тип("ПеречислениеСсылка.ТипыТекстовЭлектронныхПисем") Тогда
			Если      ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML
				ИЛИ ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
			ИначеЕсли ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.РазмеченныйТекст Тогда
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.РазмеченныйТекст;
			Иначе
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
			КонецЕсли;
		Иначе
			Текст.ТипТекста = ТипТекста;
		КонецЕсли;
	Иначе
		Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
	КонецЕсли;
	
	// Зададим важность
	Важность = Неопределено;
	Если ПараметрыПисьма.Свойство("Важность", Важность) Тогда
		Письмо.Важность = Важность;
	КонецЕсли;
	
	// Зададим кодировку
	Кодировка = Неопределено;
	Если ПараметрыПисьма.Свойство("Кодировка", Кодировка) Тогда
		Письмо.Кодировка = Кодировка;
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("ОбрабатыватьТексты") И НЕ ПараметрыПисьма.ОбрабатыватьТексты Тогда
		ОбрабатыватьТекстСообщения =  ОбработкаТекстаИнтернетПочтовогоСообщения.НеОбрабатывать;
	ИначЕ
		ОбрабатыватьТекстСообщения =  ОбработкаТекстаИнтернетПочтовогоСообщения.Обрабатывать;
	КонецЕсли;
	
	//Если ПараметрыПисьма.Свойство("УведомитьОДоставке") Тогда
	//	Письмо.УведомитьОДоставке = ПараметрыПисьма.УведомитьОДоставке;
	//	Письмо.АдресаУведомленияОДоставке.Добавить(РеквизитыОтправителя.АдресЭлектроннойПочты);
	//КонецЕсли;
	//
	//Если ПараметрыПисьма.Свойство("УведомитьОПрочтении") Тогда
	//	Письмо.УведомитьОПрочтении = ПараметрыПисьма.УведомитьОПрочтении;
	//	Письмо.АдресаУведомленияОПрочтении.Добавить(РеквизитыОтправителя.АдресЭлектроннойПочты);
	//КонецЕсли;
	
	//Если ТипЗнч(Соединение) <> Тип("ИнтернетПочта") Тогда
	//	//ПараметрыПисьма.Свойство("Пароль", Пароль);
	//	//Профиль = СформироватьИнтернетПрофиль(УчетнаяЗапись, Пароль);
	//	Соединение = Новый ИнтернетПочта;
	//	Соединение.Подключиться(Профиль);
	//КонецЕсли;
	
	Соединение.Послать(Письмо, ОбрабатыватьТекстСообщения);
	
	Возврат Письмо.ИдентификаторСообщения;
	
КонецФункции

Процедура Кнопка2Нажатие(Элемент)
	
	врап=новый COMОбъект("NetObjectToIDispatch45");
        
            smtp = "smtp.mail.ru";
            login = "testsendfocus@mail.ru";
            password = "ghbJhbntn1";
            FromMail = "testsendfocus@mail.ru";
                  //Авторизация на SMTP сервере

            Port=25;      
            mail = врап.СоздатьОбъект("System.Net.Mail.SmtpClient",smtp, Port);
            mail.EnableSsl = true;
            //Smtp.UseDefaultCredentials = false;

        
      //     mail.SmtpPort=25;

            mail.EnableSsl=true;
            mail.UseDefaultCredentials = false;
            mail.Credentials = врап.СоздатьОбъект("System.Net.NetworkCredential",login, Password); 
            mail.DeliveryMethod = Врап.ПолучитьТип("System.Net.Mail.SmtpDeliveryMethod").Network;
            mail.DeliveryFormat = Врап.ПолучитьТип("System.Net.Mail.SmtpDeliveryFormat").SevenBit;

            
            //Формирование письма

             Message = врап.СоздатьОбъект("System.Net.Mail.MailMessage");
             MailAddressType= Врап.ПолучитьТип("System.Net.Mail.MailAddress");
            Message.From = врап.СоздатьОбъект(MailAddressType,FromMail);
            Message.To.Add(врап.СоздатьОбъект(MailAddressType,"kstukov@skbkontur.ru"));
            Message.Subject = "Тест отправки почты SSL";
            Message.IsBodyHtml = true;
            Message.Body = "Тест отправки почты SSL"; 

            mail.Send(Message);//отправка


            Message.Dispose();
            mail.Dispose();
	
КонецПроцедуры

Процедура СписокДействийПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Форма = ПолучитьФорму("ФормаДействия");
	Форма.Открыть();
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура СписокДействийВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если НЕ ВыбраннаяСтрока = Неопределено Тогда
	
		ФормаЭлемента = ПолучитьФорму("ФормаДействия");
		ФормаЭлемента.Ссылка = ВыбраннаяСтрока.Ссылка;
		ФормаЭлемента.Открыть();
		
	КонецЕсли;
		
КонецПроцедуры

Процедура СписокДействийПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура КнопкаОтправитьТестовоеПисьмоНажатие(Элемент)
	
	КнопкаСохранитьНажатие("");

	Адрес = "";
	
	Если ВвестиСтроку(Адрес,"Укажите ваш email:") Тогда
		Фокус_ОтправитьТестовыйEmail(Адрес);
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаСгенерироватьBatФайлНажатие(Элемент)
	
	ПолучитьФорму("ФормаГенерацииBatФайлаАвтозапуска").Открыть();
	
КонецПроцедуры

Процедура КартинкаСправкаПочтаSSLНажатие(Элемент)
	
	Предупреждение("Популярные почтовые сервисы (mail.ru, yandex.ru и т.д) требуют защищенного соединения,
	|которое не поддерживается вашей версией платформы 1С. 
	|Поэтому нужно ставить промежуточную программу, например https://www.stunnel.org/downloads.html"); 
	
КонецПроцедуры

Процедура ТабНаблюденияОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	Если Элемент.ТекущаяОбласть.Имя="ГиперссылкаФокус" и ЗначениеЗаполнено(Расшифровка) Тогда
		СтандартнаяОбработка=Ложь;
		ЗапуститьПриложение(Расшифровка);
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьВидимость()
	ЭлементыФормы.НадписьПредупреждениеWin10.Видимость=Не РезультатыЭкспрессПроверкиВБраузере;
	ЭлементыФормы.КоманднаяПанельСпискаМаркеров.Кнопки.ПодменюЕще.Кнопки.ЗагрузитьНастройкиДругогоПользователя.Доступность=Фокус_ХранениеДанных_ДобавленыОбъекты();
КонецПроцедуры

Процедура РезультатыЭкспрессПроверкиВБраузереПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

Процедура ОбновитьСтатистикуИспользования()
	СтрСтат=Фокус_ВывестиДанные_ЗаполнитьЭлементФормыИнформациейОСтатистике(Фокус_ПолучитьДанные_СтатистикаКлюча(),ТекущаяДата());
	Если СтрСтат<>Неопределено Тогда
		ЭлементыФормы.НадписьСтатистикаИспользования.Заголовок="Ключ: осталось "+(СтрСтат.ЗначениеОграничения-СтрСтат.Использовано)+" из "+СтрСтат.ЗначениеОграничения+": до "+Формат(СтрСтат.ДатаОкончания,"ДФ=dd.MM.yyyy");
		ЭлементыФормы.НадписьСтатистикаИспользования.ЦветТекста=СтрСтат.ЦветРаскраски;
	КонецЕсли;
КонецПроцедуры

Процедура СписокПроверкиВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	Если Колонка<>Неопределено Тогда
		Если Колонка.Имя="СсылкаВФокусе" И ЗначениеЗаполнено(ВыбраннаяСтрока.СсылкаВФокусе) Тогда
			ЗапуститьПриложение(ВыбраннаяСтрока.СсылкаВФокусе);
			СтандартнаяОбработка=Ложь;
		ИначеЕсли Колонка.Имя="Контрагент" И ЗначениеЗаполнено(ВыбраннаяСтрока.Контрагент) Тогда
			ВыбраннаяСтрока.Контрагент.ПолучитьФорму().Открыть();
		Иначе
			ТекСтрока = ЭлементыФормы.СписокПроверки.ТекущиеДанные;
			Если НЕ ТекСтрока = Неопределено Тогда
				
				ДанныеОтчета = Фокус_ПолучитьДанные_ЭкспрессОтчет(СокрЛП(ТекСтрока.ИНН));
				
				Если ТипЗнч(ДанныеОтчета) = Тип("Структура") Тогда
					Если РезультатыЭкспрессПроверкиВБраузере Тогда
						ЗапуститьПриложение(ДанныеОтчета.href);
					Иначе
						Форма = ПолучитьФорму("ФормаРезультатовЭкспрессПроверки");
						Форма.СсылкаНаСтраницу = ДанныеОтчета.href;
						Форма.Открыть();
					КонецЕсли;
				КонецЕсли;    
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура КнопкаЗагрузитьСписокМаркеровНажатие(Элемент)
	СписокПользователей=Фокус_ХранениеДанных_ПолучитьСписокПользователейССохраненнойНастройкой("Маркеры");
	Если СписокПользователей=Неопределено Тогда
		Предупреждение("Нет сохраненных настроек");
	Иначе
		ВыбПользователь=СписокПользователей.ВыбратьЭлемент();
		Если ВыбПользователь<>Неопределено Тогда
			СохраненныйСписокМаркеров = ОбработкаОбъект.Фокус_ХранениеДанных_ПолучитьСписокМаркеров(Новый Структура("ID,Спр","",ВыбПользователь.Значение));
			Если ТипЗнч(СохраненныйСписокМаркеров) = Тип("ТаблицаЗначений") Тогда
				СписокМаркеров.Очистить();
				Для Каждого Эл ИЗ СохраненныйСписокМаркеров Цикл
					НоваяСтрока = СписокМаркеров.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,Эл);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура КаталогПроверкиНадежностиПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Элемент.Значение) И ВидФильтраКонтрагентовПроверка<>"Каталог" Тогда
		ВидФильтраКонтрагентовПроверка="Каталог";
	КонецЕсли;
КонецПроцедуры

Процедура НачалоПериодаПроверкаНадежностиПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Элемент.Значение) И ВидФильтраКонтрагентовПроверка<>"ПоДокументам" Тогда
		ВидФильтраКонтрагентовПроверка="ПоДокументам";
	КонецЕсли;
КонецПроцедуры

Процедура КонецПериодаПроверкаНадежностиПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Элемент.Значение) И ВидФильтраКонтрагентовПроверка<>"ПоДокументам" Тогда
		ВидФильтраКонтрагентовПроверка="ПоДокументам";
	КонецЕсли;
КонецПроцедуры


ВидФильтраКонтрагентовПроверка = "ПоДокументам";

НачалоПериодаПроверкаНадежности = НачалоМесяца(ТекущаяДата());
КонецПериодаПроверкаНадежности	= ТекущаяДата();
