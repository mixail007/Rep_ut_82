Перем КэшСпискаПараметровАналитики;
Перем КэшКлючаДоступа Экспорт;
Перем КэшИмяКонфигурации Экспорт;
Перем ТаблицаПараметровНаблюдения;
Перем СоединениеКонтурФокус Экспорт;

Перем КэшОтветовСервера Экспорт;
Перем КэшПредыдущихОтветовСервера Экспорт;
Перем КэшСпискаМаркеров Экспорт;

Перем ТаблицаНастроекМодуля Экспорт;

//-------------------------------------------------------
//
//	ИНТЕГРАЦИЯ
// 

Функция Фокус_Интеграция_ИмяКонфигурации()
	
	Если НЕ ЗначениеЗаполнено(КэшИмяКонфигурации) Тогда
		Если Найти(Метаданные.Синоним,"Управление небольшой фирмой")>0 Тогда
			КэшИмяКонфигурации = "УНФ";
		ИначеЕсли Найти(Метаданные.Синоним,"Управление торговлей, редакция 10.3")>0 Тогда
			КэшИмяКонфигурации = "УТ";
		ИначеЕсли Найти(Метаданные.Синоним,"Управление производственным предприятием, редакция 1.")>0 Тогда
			КэшИмяКонфигурации = "УПП";
		ИначеЕсли Найти(Метаданные.Синоним,"Комплексная автоматизация, редакция 1.")>0 Тогда
			КэшИмяКонфигурации = "КА";
		ИначеЕсли Найти(Метаданные.Синоним,"Бухгалтерия предприятия, редакция 2.0")>0 Тогда
			КэшИмяКонфигурации = "БП20";
		ИначеЕсли Найти(Метаданные.Синоним,"Бухгалтерия предприятия, редакция 3.0")>0 Тогда
			КэшИмяКонфигурации = "БП";
		ИначеЕсли Найти(Метаданные.Синоним,"Бухгалтерия предприятия (учебная), редакция 3.0")>0 Тогда
			КэшИмяКонфигурации = "БП";
		ИначеЕсли Найти(Метаданные.Синоним,"АИС ""Регионгаз""")>0 Тогда
			КэшИмяКонфигурации = "Регионгаз";
		ИначеЕсли Найти(Метаданные.Синоним,"Управление торговлей, редакция 10.2")>0 Тогда
			КэшИмяКонфигурации = "УТ";
		Иначе
			КэшИмяКонфигурации = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КэшИмяКонфигурации;
	
КонецФункции

Функция Фокус_Интеграция_СоздатьКарточкуКонтрагента(Параметры) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Успешно",Ложь);
	Результат.Вставить("ТекстОшибки","");
	Результат.Вставить("Ссылка");
	
	Если НЕ ЗначениеЗаполнено(Фокус_Интеграция_ИмяКонфигурации()) Тогда
		Результат.ТекстОшибки = "Текущая конфигурация не поддерживается!";
		Возврат Результат;
	КонецЕсли;
	
	ДанныеРеквизиты = Параметры.Реквизиты;
	ДанныеКонтакты	= Параметры.Контакты;
	
	Если Фокус_Интеграция_ИмяКонфигурации() = "УНФ" ИЛИ Фокус_Интеграция_ИмяКонфигурации() = "БП" Тогда
		
		СтатусКрасный	= Фокус_ПолучитьЗначениеПоляДанных(ДанныеРеквизиты,"briefReport.summary.redStatements");
		Если СтатусКрасный = Истина Тогда
			Результат.ТекстОшибки = "Нельзя создавать контрагента с красными результатами экспресс-оценки.";
			Возврат Результат;
		КонецЕсли;	
			
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Контрагенты.Ссылка
		               |ИЗ
		               |	Справочник.Контрагенты КАК Контрагенты
		               |ГДЕ
		               |	Контрагенты.ИНН = &ИНН
		               |	И НЕ Контрагенты.ПометкаУдаления";
	
		Запрос.УстановитьПараметр("ИНН",ДанныеРеквизиты.inn);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Результат.ТекстОшибки = "Уже существуют контрагенты с таким ИНН! Новый элемент создан не будет.";
			Возврат Результат;
		КонецЕсли;
		
	КонецЕсли;	
	
	ОбъектКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
		
	ОбъектКонтрагент.Заполнить(Новый Структура());
		
	Если ДанныеРеквизиты.Свойство("UL") Тогда
		
		Фокус_Интеграция_УстановитьЗначениеРеквизитаКонтрагента(ОбъектКонтрагент,"ВидЮрФизЛица",,, "UL");
		Фокус_Интеграция_УстановитьЗначениеРеквизитаКонтрагента(ОбъектКонтрагент,"Наименование",		ДанныеРеквизиты, "UL.legalName.short");
		Фокус_Интеграция_УстановитьЗначениеРеквизитаКонтрагента(ОбъектКонтрагент,"НаименованиеПолное",	ДанныеРеквизиты, "UL.legalName.short");
		Фокус_Интеграция_УстановитьЗначениеРеквизитаКонтрагента(ОбъектКонтрагент,"ИНН",					ДанныеРеквизиты, "inn");
		Фокус_Интеграция_УстановитьЗначениеРеквизитаКонтрагента(ОбъектКонтрагент,"КПП",					ДанныеРеквизиты, "UL.kpp");
		Фокус_Интеграция_УстановитьЗначениеРеквизитаКонтрагента(ОбъектКонтрагент,"ОГРН",				ДанныеРеквизиты, "ogrn");
		
		Фокус_Интеграция_УстановитьЗначениеРеквизитаКонтрагента(ОбъектКонтрагент,"ЮрАдрес",				ДанныеРеквизиты, "UL.legalAddress");
		Фокус_Интеграция_УстановитьЗначениеРеквизитаКонтрагента(ОбъектКонтрагент,"Руководители",		ДанныеРеквизиты, "UL.heads");
		
		Фокус_Интеграция_УстановитьЗначениеРеквизитаКонтрагента(ОбъектКонтрагент,"Телефоны",			ДанныеКонтакты, "phones");
		
	Иначе
		
		Фокус_Интеграция_УстановитьЗначениеРеквизитаКонтрагента(ОбъектКонтрагент,"ВидЮрФизЛица",,, "IP");
		Фокус_Интеграция_УстановитьЗначениеРеквизитаКонтрагента(ОбъектКонтрагент,"Наименование",		ДанныеРеквизиты, "IP.fio");
		Фокус_Интеграция_УстановитьЗначениеРеквизитаКонтрагента(ОбъектКонтрагент,"НаименованиеПолное",	ДанныеРеквизиты, "IP.fio");
		Фокус_Интеграция_УстановитьЗначениеРеквизитаКонтрагента(ОбъектКонтрагент,"ИНН",					ДанныеРеквизиты, "inn");
		Фокус_Интеграция_УстановитьЗначениеРеквизитаКонтрагента(ОбъектКонтрагент,"ОГРН",				ДанныеРеквизиты, "ogrn");
		
	КонецЕсли;
	
	Фокус_Интеграция_УстановитьЗначениеРеквизитаКонтрагента(ОбъектКонтрагент,"Комментарий",,, "Создан с помощью Контур.Фокус "+ТекущаяДата());
	
	ОбъектКонтрагент.Записать();
	
	Результат.Успешно = Истина;
	Результат.Ссылка = ОбъектКонтрагент.Ссылка;
	
	Возврат Результат;
	
КонецФункции

Процедура Фокус_Интеграция_УстановитьЗначениеРеквизитаКонтрагента(Объект,ИмяРеквизита,Данные,ИмяПоляЗначения,Знач Значение = Неопределено)
	
	Если Значение = Неопределено Тогда
		Значение = Фокус_ПолучитьЗначениеПоляДанных(Данные,ИмяПоляЗначения);
	КонецЕсли;	
		
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	// вызов подключаемого модуля
	
	Если ИмяРеквизита = "ВидЮрФизЛица" Тогда
		Если Значение = "UL" Тогда
			Если Фокус_Интеграция_ИмяКонфигурации() = "БП" Тогда
				Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
			ИначеЕсли Фокус_Интеграция_ИмяКонфигурации()="Регионгаз" Тогда
				Объект.ВидКонтрагента=Перечисления.ВидыКонтрагентов.Организация;
			Иначе
				Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
			КонецЕсли;
		ИначеЕсли Значение = "IP" Тогда
			Если Фокус_Интеграция_ИмяКонфигурации() = "БП" Тогда
				Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
			ИначеЕсли Фокус_Интеграция_ИмяКонфигурации()="Регионгаз" Тогда
				Объект.ВидКонтрагента=Перечисления.ВидыКонтрагентов.ЧастноеЛицо;
			Иначе
				Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
			КонецЕсли;;
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "Наименование" Тогда
		Объект.Наименование = Значение;
	ИначеЕсли ИмяРеквизита = "НаименованиеПолное" Тогда
		Если Фокус_Интеграция_ИмяКонфигурации()="Регионгаз" Тогда
			Объект.ПолноеНаименование = Значение;
		Иначе
			Объект.НаименованиеПолное = Значение;
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "ИНН" Тогда
		Объект.ИНН = Значение;
	ИначеЕсли ИмяРеквизита = "КПП" Тогда
		Объект.КПП = Значение;
	ИначеЕсли ИмяРеквизита = "ОГРН" Тогда
		Если Фокус_Интеграция_ИмяКонфигурации() = "УНФ" Тогда
			Попытка
				Если Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
					Объект.ОГРН = Значение;
				Иначе
					Объект.ОГРНИП = Значение;
				КонецЕсли;
			Исключение
			КонецПопытки;
		ИначеЕсли Фокус_Интеграция_ИмяКонфигурации()="Регионгаз" Тогда
			Объект.ОГРН=Значение;
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "ЮрАдрес" Тогда
		Если Найти("\УТ\УПП\КА\БП20\","\"+Фокус_Интеграция_ИмяКонфигурации()+"\")>0 Тогда
			Фокус_Интеграция_УстановитьЮрАдресКонтрагента_УТ_УПП_КА(Объект,Значение);
		ИначеЕсли Фокус_Интеграция_ИмяКонфигурации() = "УНФ" ИЛИ Фокус_Интеграция_ИмяКонфигурации() = "БП"  Тогда
			Фокус_Интеграция_УстановитьЮрАдресКонтрагента_УФ(Объект,Значение);
		ИначеЕсли Фокус_Интеграция_ИмяКонфигурации() = "Регионгаз" Тогда
			Фокус_Интеграция_УстановитьЮрАдресКонтрагента_РегионГаз(Объект,Значение);
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "Руководители" Тогда
		Если Фокус_Интеграция_ИмяКонфигурации() = "УНФ" ИЛИ Фокус_Интеграция_ИмяКонфигурации() = "БП"  Тогда
			Фокус_Интеграция_УстановитьРуководителей_УФ(Объект,Значение);
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "Телефоны" Тогда
		Если Фокус_Интеграция_ИмяКонфигурации() = "УНФ"  Тогда
			Фокус_Интеграция_УстановитьТелефоны_УФ(Объект,Значение);
		ИначеЕсли Фокус_Интеграция_ИмяКонфигурации()="Регионгаз" Тогда
			Фокус_Интеграция_УстановитьТелефоны_Регионгаз(Объект,Значение);
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "Комментарий" Тогда
		
		Объект.Комментарий = "Создан с помощью Контур.Фокус "+ТекущаяДата();

	КонецЕсли;
	
КонецПроцедуры

// юр. адрес

Функция Фокус_Интеграция_ПредставлениеАдреса(Данные)
	
	Зн = "";
	
	Фокус_Служебный_ДобавитьСоставляющуюАдресаВПредставление(Зн, Данные, "zipCode");
	Фокус_Служебный_ДобавитьСоставляющуюАдресаВПредставление(Зн, Данные, "regionName.topoValue",	"regionName.topoShortName",	"Справа");
	Фокус_Служебный_ДобавитьСоставляющуюАдресаВПредставление(Зн, Данные, "district.topoValue",		"district.topoShortName",	"Справа");
	Фокус_Служебный_ДобавитьСоставляющуюАдресаВПредставление(Зн, Данные, "city.topoValue",			"city.topoShortName",		"Справа");
	Фокус_Служебный_ДобавитьСоставляющуюАдресаВПредставление(Зн, Данные, "settlement.topoValue",	"settlement.topoShortName",	"Справа");
	Фокус_Служебный_ДобавитьСоставляющуюАдресаВПредставление(Зн, Данные, "street.topoValue",		"street.topoShortName",		"Справа");
	Фокус_Служебный_ДобавитьСоставляющуюАдресаВПредставление(Зн, Данные, "house.topoValue",			"house.topoShortName",		"Слева", "дом", " № ");
	Фокус_Служебный_ДобавитьСоставляющуюАдресаВПредставление(Зн, Данные, "bulk.topoValue",			"bulk.topoShortName",		"Слева", "корпус");
	Фокус_Служебный_ДобавитьСоставляющуюАдресаВПредставление(Зн, Данные, "flat.topoValue",			"flat.topoShortName",		"Слева", "кв.");

	Если СтрДлина(зн)>2 Тогда
		Зн = Сред(Зн,3);
	КонецЕсли;
	
	Возврат Зн;

КонецФункции

Функция Фокус_Интеграция_ПолучитьТиповуюСтруктуруАдреса1С_УФ(Данные)
	
	СтруктураАдреса = Новый Структура();
	
	Фокус_Интеграция_ЗаполнитьПолеСтруктурыАдреса(СтруктураАдреса, "Индекс", 			Данные, "zipCode");
	Фокус_Интеграция_ЗаполнитьПолеСтруктурыАдреса(СтруктураАдреса, "Регион", 			Данные, "regionName.topoValue", "regionName.topoShortName");
	Фокус_Интеграция_ЗаполнитьПолеСтруктурыАдреса(СтруктураАдреса, "Район", 			Данные, "district.topoValue",	"district.topoShortName");
	Фокус_Интеграция_ЗаполнитьПолеСтруктурыАдреса(СтруктураАдреса, "Город",				Данные, "city.topoValue",		"city.topoShortName");
	Фокус_Интеграция_ЗаполнитьПолеСтруктурыАдреса(СтруктураАдреса, "НаселенныйПункт",	Данные, "settlement.topoValue",	"settlement.topoShortName");
	Фокус_Интеграция_ЗаполнитьПолеСтруктурыАдреса(СтруктураАдреса, "Улица", 			Данные, "street.topoValue",		"street.topoShortName");
	Фокус_Интеграция_ЗаполнитьПолеСтруктурыАдреса(СтруктураАдреса, "Дом", 				Данные, "house.topoValue");
	Фокус_Интеграция_ЗаполнитьПолеСтруктурыАдреса(СтруктураАдреса, "Корпус", 			Данные, "bulk.topoValue");
	Фокус_Интеграция_ЗаполнитьПолеСтруктурыАдреса(СтруктураАдреса, "Квартира", 			Данные, "flat.topoValue");
	
	ТипДома		= Фокус_ПолучитьЗначениеПоляДанных(Данные, "house.topoShortName");
	ТипКорпуса	= Фокус_ПолучитьЗначениеПоляДанных(Данные, "bulk.topoShortName");
	ТипКвартиры	= Фокус_ПолучитьЗначениеПоляДанных(Данные, "flat.topoShortName");
	
	СтруктураАдреса.Вставить("ТипДома",		?(ЗначениеЗаполнено(ТипДома),ТипДома,""));
	СтруктураАдреса.Вставить("ТипКорпуса",	?(ЗначениеЗаполнено(ТипКорпуса),ТипКорпуса,""));
	СтруктураАдреса.Вставить("ТипКвартиры",	?(ЗначениеЗаполнено(ТипКвартиры),ТипКвартиры,""));

	Возврат СтруктураАдреса;
	
КонецФункции

Функция Фокус_Интеграция_ПолучитьТиповуюСтруктуруАдреса1С_УТ_УПП_КА(Данные)
	
	СтруктураАдреса = Новый Структура();
	
	Фокус_Интеграция_ЗаполнитьПолеСтруктурыАдреса(СтруктураАдреса, "Поле1",	Данные, "zipCode");
	Фокус_Интеграция_ЗаполнитьПолеСтруктурыАдреса(СтруктураАдреса, "Поле2",	Данные, "regionName.topoValue", "regionName.topoShortName");
	Фокус_Интеграция_ЗаполнитьПолеСтруктурыАдреса(СтруктураАдреса, "Поле3",	Данные, "district.topoValue",	"district.topoShortName");
	Фокус_Интеграция_ЗаполнитьПолеСтруктурыАдреса(СтруктураАдреса, "Поле4",	Данные, "city.topoValue",		"city.topoShortName");
	Фокус_Интеграция_ЗаполнитьПолеСтруктурыАдреса(СтруктураАдреса, "Поле5",	Данные, "settlement.topoValue",	"settlement.topoShortName");
	Фокус_Интеграция_ЗаполнитьПолеСтруктурыАдреса(СтруктураАдреса, "Поле6",	Данные, "street.topoValue",		"street.topoShortName");
	Фокус_Интеграция_ЗаполнитьПолеСтруктурыАдреса(СтруктураАдреса, "Поле7",	Данные, "house.topoValue");
	Фокус_Интеграция_ЗаполнитьПолеСтруктурыАдреса(СтруктураАдреса, "Поле8",	Данные, "bulk.topoValue");
	Фокус_Интеграция_ЗаполнитьПолеСтруктурыАдреса(СтруктураАдреса, "Поле9",	Данные, "flat.topoValue");
	
	ТипДома		= Фокус_ПолучитьЗначениеПоляДанных(Данные, "house.topoShortName");
	ТипКорпуса	= Фокус_ПолучитьЗначениеПоляДанных(Данные, "bulk.topoShortName");
	ТипКвартиры	= Фокус_ПолучитьЗначениеПоляДанных(Данные, "flat.topoShortName");
	
	СтруктураАдреса.Вставить("ТипДома",		?(ЗначениеЗаполнено(ТипДома),ТипДома,""));
	СтруктураАдреса.Вставить("ТипКорпуса",	?(ЗначениеЗаполнено(ТипКорпуса),ТипКорпуса,""));
	СтруктураАдреса.Вставить("ТипКвартиры",	?(ЗначениеЗаполнено(ТипКвартиры),ТипКвартиры,""));

	Возврат СтруктураАдреса;
	
КонецФункции

Процедура Фокус_Интеграция_ЗаполнитьПолеСтруктурыАдреса(СтруктураАдреса, ИмяПоляСтруктуры, Данные, ИмяПоляДанных, ИмяПоляТопонима = Неопределено)
	
	СтруктураАдреса.Вставить(ИмяПоляСтруктуры,"");
	
	Значение = Фокус_ПолучитьЗначениеПоляДанных(Данные, ИмяПоляДанных);
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	// получаем топоним (ул, дом, г, обл)
	Топоним = Неопределено;
	Если ЗначениеЗаполнено(ИмяПоляТопонима) Тогда
		Топоним = Фокус_ПолучитьЗначениеПоляДанных(Данные, ИмяПоляТопонима);
		
		Если ЗначениеЗаполнено(Топоним) Тогда
			Значение = Значение + " "+Топоним;
		КонецЕсли;
		
	КонецЕсли;
	
    СтруктураАдреса.Вставить(ИмяПоляСтруктуры,Значение);
	
КонецПроцедуры
	
Процедура Фокус_Интеграция_УстановитьЮрАдресКонтрагента_УФ(Объект,Данные)
	
	ДанныеАдреса = Фокус_ПолучитьЗначениеПоляДанных(Данные,"parsedAddressRF");
	
	Если НЕ ЗначениеЗаполнено(ДанныеАдреса) Тогда
		Возврат;
	КонецЕсли;
		
	СтруктураАдреса1С = Фокус_Интеграция_ПолучитьТиповуюСтруктуруАдреса1С_УФ(ДанныеАдреса);
	ПредставлениеАдреса1С = Фокус_Интеграция_ПредставлениеАдреса(ДанныеАдреса);
	
	Если Фокус_Интеграция_ИмяКонфигурации() = "БП" Тогда
		Попытка
			ОбъектКИ = Вычислить("УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(СтруктураАдреса1С, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента)");
		Исключение
			ОбъектКИ = Вычислить("КонтактнаяИнформацияСлужебный.ДесериализацияКонтактнойИнформации(СтруктураАдреса1С, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента)");
		КонецПопытки;
	Иначе
		ОбъектКИ = Вычислить("КонтактнаяИнформацияСлужебный.ДесериализацияКонтактнойИнформации(СтруктураАдреса1С, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента)");
	КонецЕсли;	
	ОбъектКИ.Представление = ПредставлениеАдреса1С;
	
	ВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
	
	НоваяСтрока = Объект.КонтактнаяИнформация.Найти(ВидКИ,"Вид");
	Если НЕ ЗначениеЗаполнено(НоваяСтрока) Тогда
		НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
	КонецЕсли;
	
	НоваяСтрока.Представление = ПредставлениеАдреса1С;
	Если Фокус_Интеграция_ИмяКонфигурации() = "БП" Тогда
		Попытка
			НоваяСтрока.ЗначенияПолей = Вычислить("УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектКИ)"); 
		Исключение
			НоваяСтрока.ЗначенияПолей = Вычислить("КонтактнаяИнформацияСлужебный.СериализацияКонтактнойИнформации(ОбъектКИ)");
        КонецПопытки;
	Иначе
		НоваяСтрока.ЗначенияПолей = Вычислить("КонтактнаяИнформацияСлужебный.СериализацияКонтактнойИнформации(ОбъектКИ)");
	КонецЕсли;	
	НоваяСтрока.Вид           = ВидКИ;
	НоваяСтрока.Тип           = Перечисления.ТипыКонтактнойИнформации.Адрес;
	
	Адрес = ОбъектКИ.Состав;
	
	Если Фокус_Интеграция_ИмяКонфигурации() = "БП" Тогда
		Попытка
			ПространствоИмен = Вычислить("УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен()");
		Исключение
			Попытка
				ПространствоИмен = Вычислить("УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.ПространствоИмен()");
			Исключение
				ПространствоИмен = Вычислить("КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен()");
			КонецПопытки;
		КонецПопытки;			
	Иначе
		ПространствоИмен = Вычислить("КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен()");
	КонецЕсли;
	
	ЭтоАдрес = ТипЗнч(Адрес) = Тип("ОбъектXDTO") И Адрес.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес");
	Если ЭтоАдрес И Адрес.Состав <> Неопределено Тогда 
		НоваяСтрока.Страна = Адрес.Страна;
		Если Фокус_Интеграция_ИмяКонфигурации() = "БП" Тогда
			Попытка
				АдресРФ = Вычислить("УправлениеКонтактнойИнформациейСлужебный.РоссийскийАдрес(Адрес)");
			Исключение
				АдресРФ = Вычислить("КонтактнаяИнформацияСлужебный.РоссийскийАдрес(Адрес)");
  			КонецПопытки;
		Иначе
			АдресРФ = Вычислить("КонтактнаяИнформацияСлужебный.РоссийскийАдрес(Адрес)");
		КонецЕсли;
		Если АдресРФ <> Неопределено Тогда
			// Российский адрес
			НоваяСтрока.Регион = АдресРФ.СубъектРФ;
			НоваяСтрока.Город  = АдресРФ.Город;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура Фокус_Интеграция_УстановитьЮрАдресКонтрагента_УТ_УПП_КА(Объект,Данные)
	
	Если Объект.ЭтоНовый() Тогда
		Объект.Записать();
	КонецЕсли;
	
	ДанныеАдреса = Фокус_ПолучитьЗначениеПоляДанных(Данные,"parsedAddressRF");
	
	Если НЕ ЗначениеЗаполнено(ДанныеАдреса) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрокаКИ = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
	
	НоваяСтрокаКИ.Объект 		= Объект.Ссылка;
	НоваяСтрокаКИ.Тип           = Перечисления.ТипыКонтактнойИнформации.Адрес;
	НоваяСтрокаКИ.Вид           = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
	НоваяСтрокаКИ.Представление = Фокус_Интеграция_ПредставлениеАдреса(ДанныеАдреса);
	
	СтруктураАдреса1С = Фокус_Интеграция_ПолучитьТиповуюСтруктуруАдреса1С_УТ_УПП_КА(ДанныеАдреса);
	ЗаполнитьЗначенияСвойств(НоваяСтрокаКИ,СтруктураАдреса1С);
	
	Если Фокус_Интеграция_ИмяКонфигурации() = "БП20" Тогда
		Выполнить("НоваяСтрокаКИ.Представление = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдреса(НоваяСтрокаКИ);");
	КонецЕсли;	
		
	НоваяСтрокаКИ.Записать();
	
КонецПроцедуры

Процедура Фокус_Интеграция_УстановитьЮрАдресКонтрагента_Регионгаз(Объект,Данные)
	
	Если Объект.ЭтоНовый() Тогда
		Объект.Записать();
	КонецЕсли;
	
	ДанныеАдреса = Фокус_ПолучитьЗначениеПоляДанных(Данные,"parsedAddressRF");
	
	Если НЕ ЗначениеЗаполнено(ДанныеАдреса) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрокаКИ = Справочники.Адреса.СоздатьЭлемент();
	
	НоваяСтрокаКИ.Владелец		= Объект.Ссылка;
	НоваяСтрокаКИ.ЭтоЮридический=Истина;
	НоваяСтрокаКИ.Адрес			= Фокус_Интеграция_ПредставлениеАдреса(ДанныеАдреса);
	НоваяСтрокаКИ.Наименование	= Фокус_Интеграция_ПредставлениеАдреса(ДанныеАдреса);
	НоваяСтрокаКИ.РучноеРедактированиеАдреса=Истина;
	//СтруктураАдреса1С = Фокус_Интеграция_ПолучитьТиповуюСтруктуруАдреса1С_УТ_УПП_КА(ДанныеАдреса);
	//НоваяСтрокаКИ.Индекс			= СтруктураАдреса1С.Поле1;
	//НоваяСтрокаКИ.Область			= СтруктураАдреса1С.Поле2;
	//НоваяСтрокаКИ.Район				= СтруктураАдреса1С.Поле3;
	//НоваяСтрокаКИ.Город				= СтруктураАдреса1С.Поле4;
	//НоваяСтрокаКИ.НаселенныйПункт	= СтруктураАдреса1С.Поле5;
	//НоваяСтрокаКИ.Улица				= СтруктураАдреса1С.Поле6;
	//НоваяСтрокаКИ.Дом				= СтруктураАдреса1С.Поле7;
	//НоваяСтрокаКИ.Корпус			= СтруктураАдреса1С.Поле8;
	//НоваяСтрокаКИ.Квартира			= СтруктураАдреса1С.Поле9;
	НоваяСтрокаКИ.Страна			= Справочники.КлассификаторСтранМира.РОССИЯ;
	//НоваяСтрокаКИ.СформироватьПолноеНаименованиеАдреса();
	
	НоваяСтрокаКИ.Записать();
	Объект.ОсновнойАдрес	= НоваяСтрокаКИ.Ссылка;
КонецПроцедуры


// прочие реквизиты

Процедура Фокус_Интеграция_УстановитьРуководителей_УФ(Объект,Данные)
	
	Если Объект.ЭтоНовый() Тогда
		Объект.Записать();
	КонецЕсли;
	
	ПолеВладельца = "Владелец";
	Если Фокус_ЕстьНеобходимыеМетаданные("Справочники.КонтактныеЛица.Реквизиты.ОбъектВладелец") Тогда
		ПолеВладельца = "ОбъектВладелец";
	КонецЕсли;
	
	ЕстьДолжность = Ложь;
	Если Фокус_ЕстьНеобходимыеМетаданные("Справочники.КонтактныеЛица.Реквизиты.Должность") Тогда
		ЕстьДолжность = Истина;
	КонецЕсли;
	
	ПолеКонтактноеЛицоКонтрагента = "КонтактноеЛицо";
	Если Фокус_ЕстьНеобходимыеМетаданные("Справочники.Контрагенты.Реквизиты.ОсновноеКонтактноеЛицо") Тогда
		ПолеКонтактноеЛицоКонтрагента = "ОсновноеКонтактноеЛицо";
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтактныеЛицаКонтрагентов.Ссылка,
	|	КонтактныеЛицаКонтрагентов.Наименование
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛицаКонтрагентов
	|ГДЕ
	|	КонтактныеЛицаКонтрагентов."+ПолеВладельца+" = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
	
	ТекущиеКонтакты = Запрос.Выполнить().Выгрузить();
	
	ТекДиректор = Неопределено;
	НовоеКонтактноеЛицо = Неопределено;
	
	Для каждого head из Данные цикл
		
		НовоеКонтактноеЛицо = ТекущиеКонтакты.Найти(head.fio,"Наименование");
		
		Если НЕ ЗначениеЗаполнено(НовоеКонтактноеЛицо) Тогда
			
			НовоеКонтактноеЛицо = Справочники.КонтактныеЛица.СоздатьЭлемент();
			НовоеКонтактноеЛицо.Наименование = head.fio;
			НовоеКонтактноеЛицо[ПолеВладельца] = Объект.Ссылка;
			Если ЕстьДолжность Тогда
				НовоеКонтактноеЛицо.Должность = head.position;
			КонецЕсли;
			НовоеКонтактноеЛицо.Записать();
			
		КонецЕсли;	
		
		Если head.Свойство("position") Тогда
			Если Найти(НРег(head.position),"директор")>0 Тогда
				ТекДиректор = НовоеКонтактноеЛицо.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ НовоеКонтактноеЛицо = Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(ТекДиректор) Тогда
			ТекДиректор = НовоеКонтактноеЛицо.Ссылка;
		КонецЕсли;
		Объект[ПолеКонтактноеЛицоКонтрагента] = ТекДиректор;
		Объект.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура Фокус_Интеграция_УстановитьРуководителей_Регионгаз(Объект,Данные)
	
	Если Объект.ЭтоНовый() Тогда
		Объект.Записать();
	КонецЕсли;
	
	Для Каждого head Из Данные Цикл
		НовоеКонтактноеЛицо=Справочники.КонтактныеЛица.СоздатьЭлемент();
		НовоеКонтактноеЛицо.Владелец=Объект.Ссылка;
		НовоеКонтактноеЛицо.Наименование=head.fio;
		ФИО=Контур_РазложитьСтрокуВМассивСлов(head.fio," ");
		НовоеКонтактноеЛицо.Фамилия	= ФИО[0];
		НовоеКонтактноеЛицо.Имя		= ФИО[1];
		НовоеКонтактноеЛицо.Отчество= ФИО[2];
		Должность=Справочники.ДолжностиКонтактныхЛиц.НайтиПоНаименованию(head.position);
		Если Не ЗначениеЗаполнено(Должность) Тогда
			Должность=Справочники.ДолжностиКонтактныхЛиц.СоздатьЭлемент();
			Должность.Наименование=head.position;
			Должность.Записать();
		КонецЕсли;
		НовоеКонтактноеЛицо.Должность=Должность.Ссылка;
		НовоеКонтактноеЛицо.ДатаНачалаОснования=Дата(СтрЗаменить(head.date,"-",""));
		НовоеКонтактноеЛицо.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура Фокус_Интеграция_УстановитьТелефоны_УФ(Объект,Данные)
	
	Если Объект.ЭтоНовый() Тогда
		Объект.Записать();
	КонецЕсли;
	
	Для Каждого Эл Из Данные Цикл
		
		НовоеКонтактноеЛицо = Справочники.КонтактныеЛица.СоздатьЭлемент();
		НовоеКонтактноеЛицо.Наименование = "Телефон из Контур.Справочник "+Эл;
		Если Фокус_Интеграция_ИмяКонфигурации() = "БП" Тогда
			НовоеКонтактноеЛицо.ОбъектВладелец = Объект.Ссылка;
		Иначе
			НовоеКонтактноеЛицо.Владелец = Объект.Ссылка;
		КонецЕсли;
		
		НоваяСтрока = НовоеКонтактноеЛицо.КонтактнаяИнформация.Добавить();
		НоваяСтрока.Представление = Эл;
		Если Фокус_Интеграция_ИмяКонфигурации() = "БП" Тогда
			НоваяСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		Иначе
			НоваяСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
		КонецЕсли;
		НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		
		НовоеКонтактноеЛицо.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура Фокус_Интеграция_УстановитьТелефоны_Регионгаз(Объект,Данные)
	
	Если не ЗначениеЗаполнено(Объект.ОсновнойАдрес) Тогда
		Возврат;
	КонецЕсли;
	ОсновнойАдрес=Объект.ОсновнойАдрес.ПолучитьОбъект();
	Разделитель="";
	Для Каждого Эл Из Данные Цикл
		ОсновнойАдрес.Телефоны=ОсновнойАдрес.Телефоны+Разделитель+Эл;
		Разделитель=", ";
	КонецЦикла;
	ОсновнойАдрес.Записать();
	
КонецПроцедуры

Функция Фокус_Интеграция_ПолучитьСписокПроверки(ВидФильтраКонтрагентов,Параметры) Экспорт
	
	Если ВидФильтраКонтрагентов = "ПоДокументам" Тогда
		
		ТекстЗапроса = "";
		
		Для н = 1 По Метаданные.ЖурналыДокументов.Количество() Цикл
			
			ТекМетаданные = Метаданные.ЖурналыДокументов[н-1];
			
			ЕстьКонтрагент = Ложь;
			Для к = 1 По ТекМетаданные.Графы.Количество() Цикл
				ТекГраф = ТекМетаданные.Графы[к-1];
				Если ТекГраф.Имя = "Контрагент" Тогда
					ЕстьКонтрагент = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьКонтрагент Тогда
				
				Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
					ТекстЗапроса = ТекстЗапроса + " ОБЪЕДИНИТЬ ";
				КонецЕсли;
				
				ИмяЖурнала = ТекМетаданные.Имя;
				
				ТекстЗапроса = ТекстЗапроса + " 
				|ВЫБРАТЬ РАЗЛИЧНЫЕ 
				|"+ИмяЖурнала+".Контрагент, 
				|"+ИмяЖурнала+".Контрагент.ИНН КАК ИНН 
				|ИЗ ЖурналДокументов."+ИмяЖурнала+" КАК "+ИмяЖурнала+" 
				|ГДЕ
				|	"+ИмяЖурнала+".Дата МЕЖДУ &НачалоПериода И &КонецПериода
				|	И НЕ "+ИмяЖурнала+".ПометкаУдаления
				|	И "+ИмяЖурнала+".Контрагент ССЫЛКА Справочник.Контрагенты 
				|	И НЕ "+ИмяЖурнала+".Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)";
				
			КонецЕсли;
			
			
		КонецЦикла;	
		
		Запрос = Новый Запрос();
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("НачалоПериода",Параметры.НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода",Параметры.КонецПериода);
		
		Возврат Запрос.Выполнить().Выгрузить();
		
	Иначе
		Если Метаданные.Справочники.Контрагенты.Иерархический Тогда
			УсловниеНаИерархию=" И НЕ Контрагенты.ЭтоГруппа ";
		Иначе
			УсловниеНаИерархию=" ";
		КонецЕсли;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка КАК Контрагент,
		|	Контрагенты.ИНН КАК ИНН
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	НЕ Контрагенты.ПометкаУдаления "+УсловниеНаИерархию	+
		?(ВидФильтраКонтрагентов = "Каталог","И Контрагенты.Ссылка В ИЕРАРХИИ(&Каталог)","");

		Если ВидФильтраКонтрагентов = "Каталог" Тогда
			Запрос.УстановитьПараметр("Каталог",Параметры.КаталогКонтрагентов);
		КонецЕсли;
		
		Возврат Запрос.Выполнить().Выгрузить();
			
	КонецЕсли;
	
КонецФункции


//-------------------------------------------------------
//
//	КЭШ ОТВЕТОВ СЕРВЕРА
// 

Процедура Фокус_КэшОтветовСервера_ЗаполнитьПоМассивуИНН(МассивМетодов,МассивИНН,СохранятьОтвет = Ложь)
	
	Для Каждого ИмяМетода ИЗ МассивМетодов Цикл
		
		ПредставлениеМетода = ИмяМетода;
		Если ИмяМетода = "req" Тогда
			ПредставлениеМетода = "реквизитов";
		ИначеЕсли ИмяМетода = "egrDetails" Тогда
			ПредставлениеМетода = "доп. реквизитов";
		ИначеЕсли ИмяМетода = "analytics" Тогда
			ПредставлениеМетода = "аналитики";
		КонецЕсли;
		
		МассивСтрок = Фокус_ПолучитьМассивСтрокИНН(МассивИНН,ИмяМетода);
		
		сч=0;
		Для Каждого СтрокаИНН ИЗ МассивСтрок Цикл
			сч = сч+1;
			Процент = Окр(100*(сч/МассивСтрок.Количество()));
			#Если Клиент Тогда
				Состояние("Получаем данные "+ПредставлениеМетода+" ("+Процент+"%)");
			#КонецЕсли	
			Данные = Фокус_API_ПолучитьОтветСервера("/api3/"+ИмяМетода,Новый Структура("inn",СтрокаИНН),СохранятьОтвет);
			Фокус_КэшОтветовСервера_ДобавитьЗначение(ИмяМетода, Данные);
		КонецЦикла;
		
		Фокус_КэшОтветовСервера_ДобавитьПустыеЗначения(ИмяМетода,МассивИНН);
		
	КонецЦикла;
	
КонецПроцедуры

Функция Фокус_КэшОтветовСервера_Инициализировать()
	
	Если КэшОтветовСервера = Неопределено Тогда
		
		КэшОтветовСервера = Новый ТаблицаЗначений;
		КэшОтветовСервера.Колонки.Добавить("ИНН_ИмяМетода");
		КэшОтветовСервера.Колонки.Добавить("Данные");
		
		КэшОтветовСервера.Индексы.Добавить("ИНН_ИмяМетода");
		
	КонецЕсли;
	
КонецФункции

Процедура Фокус_КэшОтветовСервера_ДобавитьЗначение(ИмяМетода,Данные) Экспорт
	
	Фокус_КэшОтветовСервера_Инициализировать();
	
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		Если Фокус_КэшОтветовСервера_НайтиЗначение(Данные.inn,ИмяМетода) = Неопределено Тогда
			НоваяЗапись = КэшОтветовСервера.Добавить();
			НоваяЗапись.ИНН_ИмяМетода = СокрЛП(Данные.inn)+ИмяМетода;
			НоваяЗапись.Данные = Данные;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Данные) = Тип("Массив") Тогда
		Для Каждого Эл Из Данные Цикл
			Фокус_КэшОтветовСервера_ДобавитьЗначение(ИмяМетода,Эл);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура Фокус_КэшОтветовСервера_ДобавитьПустыеЗначения(ИмяМетода,Данные)
	
	Для Каждого Эл Из Данные Цикл
		Фокус_КэшОтветовСервера_ДобавитьЗначение(ИмяМетода,Новый Структура("inn",Эл));
	КонецЦикла;
	
КонецПроцедуры

Функция Фокус_КэшОтветовСервера_НайтиЗначение(ИНН,ИмяМетода)
	
	Фокус_КэшОтветовСервера_Инициализировать();
	
	НайденнаяСтрока = КэшОтветовСервера.Найти(СокрЛП(ИНН)+ИмяМетода,"ИНН_ИмяМетода");
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат НайденнаяСтрока.Данные;
	КонецЕсли;
	
КонецФункции

// предыдущие ответы

Функция Фокус_КэшПредыдущихОтветовСервера_Инициализировать()
	
	Если КэшПредыдущихОтветовСервера = Неопределено Тогда
		
		КэшПредыдущихОтветовСервера = Новый ТаблицаЗначений;
		КэшПредыдущихОтветовСервера.Колонки.Добавить("ИНН_ИмяМетода");
		КэшПредыдущихОтветовСервера.Колонки.Добавить("Данные");
		
		КэшПредыдущихОтветовСервера.Индексы.Добавить("ИНН_ИмяМетода");
		
	КонецЕсли;
	
КонецФункции

Процедура Фокус_КэшПредыдущихОтветовСервера_ДобавитьЗначение(ИмяМетода,Данные)
	
	Фокус_КэшПредыдущихОтветовСервера_Инициализировать();
	
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		Если Фокус_КэшПредыдущихОтветовСервера_НайтиЗначение(Данные.inn,ИмяМетода) = Неопределено Тогда
			НоваяЗапись = КэшПредыдущихОтветовСервера.Добавить();
			НоваяЗапись.ИНН_ИмяМетода = СокрЛП(Данные.inn)+ИмяМетода;
			НоваяЗапись.Данные = Данные;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Данные) = Тип("Массив") Тогда
		Для Каждого Эл Из Данные Цикл
			Фокус_КэшПредыдущихОтветовСервера_ДобавитьЗначение(ИмяМетода,Эл);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция Фокус_КэшПредыдущихОтветовСервера_НайтиЗначение(ИНН,ИмяМетода)
	
	Фокус_КэшПредыдущихОтветовСервера_Инициализировать();
	
	НайденнаяСтрока = КэшПредыдущихОтветовСервера.Найти(СокрЛП(ИНН)+ИмяМетода,"ИНН_ИмяМетода");
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат НайденнаяСтрока.Данные;
	КонецЕсли;
	
КонецФункции

//-------------------------------------------------------
//
//	МАРКЕРЫ
// 

Функция Фокус_ПолучитьПредыдущееЗначение(ИНН,ИмяМетода,ИмяПоля) Экспорт
	
	Данные = Фокус_КэшПредыдущихОтветовСервера_НайтиЗначение(ИНН,ИмяМетода);
	
	Если Данные = Неопределено Тогда
		
		ПредыдущийОтветСервера = Фокус_ХранениеДанных_ПолучитьПоследнийРезультат(ИНН,ИмяМетода);
	
		Если НЕ ПредыдущийОтветСервера = Неопределено Тогда
		
			Данные = ПрочитатьJSONВручную(ПредыдущийОтветСервера.Значение);
		
			Если НЕ Фокус_ПолучениеДанных_ВернулисьДанные(Данные) Тогда
				Данные = Новый Структура("inn",ИНН);
			Иначе
				Данные = Данные[0];
			КонецЕсли;
		
			Фокус_КэшПредыдущихОтветовСервера_ДобавитьЗначение(ИмяМетода,Данные);
		
		Иначе
		
			Фокус_КэшПредыдущихОтветовСервера_ДобавитьЗначение(ИмяМетода,Новый Структура("inn",ИНН));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Фокус_ПолучитьЗначениеПоляДанных(Данные,ИмяПоля);
	
КонецФункции

Функция Фокус_ПолучитьЗначение(ИНН,ИмяМетода,ИмяПоля) Экспорт
	
	Данные = Фокус_КэшОтветовСервера_НайтиЗначение(ИНН,ИмяМетода);
	
	Если Данные = Неопределено Тогда
		
		Данные = Фокус_API_ПолучитьОтветСервера("/api3/"+ИмяМетода, Новый Структура("inn",ИНН));
		
		Если НЕ Фокус_ПолучениеДанных_ВернулисьДанные(Данные) Тогда
			Данные = Новый Структура("inn",ИНН);
		Иначе
			Данные = Данные[0];
		КонецЕсли;
		
		Фокус_КэшОтветовСервера_ДобавитьЗначение(ИмяМетода,Данные);
		
	КонецЕсли;
	
	Возврат Фокус_ПолучитьЗначениеПоляДанных(Данные,ИмяПоля);
	
КонецФункции

Функция Фокус_Маркеры_ПолучитьСработавшие(ИНН) Экспорт
	
	ТаблицаМаркеров = Новый ТаблицаЗначений;
	ТаблицаМаркеров.Колонки.Добавить("Наименование");
	ТаблицаМаркеров.Колонки.Добавить("Описание");
	ТаблицаМаркеров.Колонки.Добавить("Категория");
	ТаблицаМаркеров.Колонки.Добавить("ID");
	ТаблицаМаркеров.Колонки.Добавить("Расшифровка");
	ТаблицаМаркеров.Колонки.Добавить("ВидМаркера");
	
	Если КэшСпискаМаркеров = Неопределено Тогда
		КэшСпискаМаркеров = Фокус_ХранениеДанных_ПолучитьСписокМаркеров();
	КонецЕсли;
	
	Для каждого Маркер Из КэшСпискаМаркеров Цикл
		
		Если НЕ Маркер.Включен Тогда
			Продолжить;
		КонецЕсли;
		
		ВидМаркера = "Обычный";     
		МаркерСработал = Ложь;
		РасшифровкаМаркера = Неопределено;
		
		Попытка
			Выполнить(Маркер.КодМаркера);
		Исключение
			ВызватьИсключение("Возникла ошибка в маркере """+Маркер.Наименование+""":"+Символы.ПС + ОписаниеОшибки())
		КонецПопытки;
			
		Если МаркерСработал Тогда
			
			НоваяСтрока = ТаблицаМаркеров.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Маркер);
			НоваяСтрока.Расшифровка = РасшифровкаМаркера;
			НоваяСтрока.ВидМаркера = ВидМаркера;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаМаркеров;
	
КонецФункции

// Возвращает результат проверки маркера 
//
// Параметры
//  ИНН			- Строка - проверяемый ИНН
//  ИДМаркера	- Строка - ИД проверяемого маркера согласно таблице маркеров или его наименование
//
// Возвращаемое значение:
//   Структура   - Структура с полями МаркерСработал, РасшифровкаМаркера
//
Функция Фокус_ПолучитьРезультатМаркера(ИНН,ИДМаркераИлиНаименование) Экспорт
	//0. Подготовим результат
	Результат=Новый Структура("МаркерСработал,РасшифровкаМаркера",Ложь,"");
	//1. Найдем нужный маркер
	Если КэшСпискаМаркеров = Неопределено Тогда
		КэшСпискаМаркеров = Фокус_ХранениеДанных_ПолучитьСписокМаркеров();
	КонецЕсли;
	Маркер=КэшСпискаМаркеров.Найти(ИДМаркераИлиНаименование,"ID, Наименование");
	Если Маркер=Неопределено Тогда
		ВызватьИсключение("В таблице маркеров не найден маркер "+ИДМаркераИлиНаименование);
	КонецЕсли;
	Если Не Маркер.Включен Тогда
		ВызватьИсключение("Маркер "+ИДМаркераИлиНаименование+" выключен");
	КонецЕсли;
	//2. Выполним маркер
	ВидМаркера = "Обычный";     
	МаркерСработал = Ложь;
	РасшифровкаМаркера = Неопределено;
	
	Попытка
		Выполнить(Маркер.КодМаркера);
	Исключение
		ВызватьИсключение("Возникла ошибка в маркере """+Маркер.Наименование+""":"+Символы.ПС + ОписаниеОшибки())
	КонецПопытки;
	//3. Заполним результат
	Результат.МаркерСработал		=МаркерСработал;
	Результат.РасшифровкаМаркера	=РасшифровкаМаркера;
	
	Возврат Результат;

КонецФункции // Фокус_ПолучитьРезультатМаркера()

//-------------------------------------------------------
//
//	ПОЛУЧЕНИЕ ДАННЫХ
// 

Функция Фокус_ПолучитьДанные_БанкротствоФизЛица(ИНН) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИНН) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Данные = Фокус_КэшОтветовСервера_НайтиЗначение(ИНН,"fizBankr");
	
	Если Данные = Неопределено Тогда
		
		Данные = Фокус_API_ПолучитьОтветСервера("/api3/fizBankr", Новый Структура("q",ИНН));
		
		Если НЕ Фокус_ПолучениеДанных_ВернулисьДанные(Данные) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Данные = Данные[0];
		
		Фокус_КэшОтветовСервера_ДобавитьЗначение("fizBankr",Данные);
		
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция Фокус_ПолучитьДанные_ЮрФизЛица(ИНН) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИНН) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеРеквизиты = Фокус_ПолучитьДанные_РеквизитыЮрФизЛица(ИНН);
	
	Если ДанныеРеквизиты = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеКонтакты = Неопределено;
	КоличествоТелефонов = Фокус_ПолучитьЗначениеПоляДанных(ДанныеРеквизиты,"contactPhones.count");
	Если ЗначениеЗаполнено(КоличествоТелефонов) Тогда
		ДанныеКонтакты = Фокус_ПолучитьДанные_Контакты(ИНН);
	КонецЕсли;
	
	ДанныеДопРеквизиты	= Фокус_ПолучитьДанные_ДопРеквизитыЮрФизЛица(ИНН);
	ДанныеАналитика		= Фокус_ПолучитьДанные_Аналитика(ИНН);
	ДанныеМаркеры		= Фокус_Маркеры_ПолучитьСработавшие(ИНН);
	ДанныеБухОтчетности = Фокус_ПолучитьДанные_БухОтчетность(ИНН);
	ДанныеЛицензии		= Фокус_ПолучитьДанные_Лицензии(ИНН);
	
	Результат = Новый Структура;
	Результат.Вставить("ИНН",ИНН);
	Результат.Вставить("Реквизиты",		ДанныеРеквизиты);
	Результат.Вставить("Контакты",		ДанныеКонтакты);
	Результат.Вставить("ДопРеквизиты",	ДанныеДопРеквизиты);
	Результат.Вставить("Аналитика",		ДанныеАналитика);
	Результат.Вставить("Маркеры",		ДанныеМаркеры);
	Результат.Вставить("БухОтчетность",	ДанныеБухОтчетности);
	Результат.Вставить("Лицензии",		ДанныеЛицензии);
	
	Возврат Результат;
	
КонецФункции

Функция Фокус_ПолучитьДанные_РеквизитыЮрФизЛица(ИНН) Экспорт

	Данные = Фокус_КэшОтветовСервера_НайтиЗначение(ИНН,"req");
	
	Если Данные = Неопределено Тогда
		
		Данные = Фокус_API_ПолучитьОтветСервера("/api3/req", Новый Структура("inn",ИНН));
		
		Если НЕ Фокус_ПолучениеДанных_ВернулисьДанные(Данные) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Данные = Данные[0];
		
		Фокус_КэшОтветовСервера_ДобавитьЗначение("req",Данные);
		
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция Фокус_ПолучитьДанные_ДопРеквизитыЮрФизЛица(ИНН) Экспорт
	
	Данные = Фокус_КэшОтветовСервера_НайтиЗначение(ИНН,"egrDetails");
	
	Если Данные = Неопределено Тогда
		
		Данные = Фокус_API_ПолучитьОтветСервера("/api3/egrDetails", Новый Структура("inn",ИНН));
		
		Если НЕ Фокус_ПолучениеДанных_ВернулисьДанные(Данные) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Данные = Данные[0];
		
		Фокус_КэшОтветовСервера_ДобавитьЗначение("egrDetails",Данные);
		
	КонецЕсли;
	
	Возврат Данные;

КонецФункции

Функция Фокус_ПолучитьДанные_ЭкспрессОтчет(ИНН) Экспорт
	
	Данные = Фокус_API_ПолучитьОтветСервера("/api3/briefReport", Новый Структура("inn",ИНН));
	
	Если НЕ Фокус_ПолучениеДанных_ВернулисьДанные(Данные) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Данные = Данные[0].briefReport;
	
	Результат = Новый Структура("href,greenStatements,yellowStatements,redStatements","",Ложь,Ложь,Ложь);
	
	Результат.href = Данные.href;
	ЗаполнитьЗначенияСвойств(Результат,Данные.summary);
	
	Возврат Результат;
	
КонецФункции

Функция Фокус_ПолучитьДанные_Контакты(ИНН) Экспорт
	
	Данные = Фокус_КэшОтветовСервера_НайтиЗначение(ИНН,"contacts");
	
	Если Данные = Неопределено Тогда
		
		Данные = Фокус_API_ПолучитьОтветСервера("/api3/contacts", Новый Структура("inn",ИНН));
		
		Если НЕ Фокус_ПолучениеДанных_ВернулисьДанные(Данные) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Данные = Данные[0];
		
		Фокус_КэшОтветовСервера_ДобавитьЗначение("contacts",Данные);
		
	КонецЕсли;
	
	Данные = Данные.contactPhones;
	
	Результат = Новый Структура("count,phones",0);
	
	ЗаполнитьЗначенияСвойств(Результат,Данные);
	
	Возврат Результат;
	
КонецФункции

Функция Фокус_ПолучитьДанные_Лицензии(ИНН) Экспорт
	
	Данные = Фокус_КэшОтветовСервера_НайтиЗначение(ИНН,"licences");
	
	Если Данные = Неопределено Тогда
		
		Данные = Фокус_API_ПолучитьОтветСервера("/api3/licences", Новый Структура("inn",ИНН));
		
		Если НЕ Фокус_ПолучениеДанных_ВернулисьДанные(Данные) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Данные = Данные[0];
		
		Фокус_КэшОтветовСервера_ДобавитьЗначение("licences",Данные);
		
	КонецЕсли;
	
	Возврат Данные.licenses;
	
КонецФункции

Функция Фокус_ПолучитьДанные_БухОтчетность(ИНН) Экспорт
	
	Данные = Фокус_КэшОтветовСервера_НайтиЗначение(ИНН,"buh");
	
	Если Данные = Неопределено Тогда
		
		Данные = Фокус_API_ПолучитьОтветСервера("/api3/buh", Новый Структура("inn",ИНН));
		
		Если НЕ Фокус_ПолучениеДанных_ВернулисьДанные(Данные) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Данные = Данные[0];
		
		Фокус_КэшОтветовСервера_ДобавитьЗначение("buh",Данные);
		
	КонецЕсли;
	
	ТаблицаБухФорм = Новый ТаблицаЗначений;
	ТаблицаБухФорм.Колонки.Добавить("НомерФормы");
	ТаблицаБухФорм.Колонки.Добавить("КодСтроки");
	ТаблицаБухФорм.Колонки.Добавить("НазваниеСтроки");
	
	Данные = Данные.buhForms;
	
	ТипЧисло = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(20));
	
	СписокСуммирования = "";
	
	Для Каждого Эл Из Данные Цикл
		
		ТекГод = Формат(Эл.year,"ЧРГ=; ЧГ=");
		
		СписокСуммирования = СписокСуммирования + ",Начало_"+ТекГод+",Конец_"+ТекГод;
		
		ТаблицаБухФорм.Колонки.Добавить("Начало_"+ТекГод, ТипЧисло);
		ТаблицаБухФорм.Колонки.Добавить("Конец_"+ТекГод,	ТипЧисло);
		
		Для Каждого Стр ИЗ Эл.form1 Цикл
			
			НоваяСтрока = ТаблицаБухФорм.Добавить();
			НоваяСтрока.НомерФормы = 1;
			НоваяСтрока.КодСтроки = Стр.code;
			НоваяСтрока.НазваниеСтроки = Стр.name;
			
			НоваяСтрока["Начало_"+ТекГод] = Стр.startValue;
			НоваяСтрока["Конец_"+ТекГод] = Стр.endValue;
			
		КонецЦикла;	
		Для Каждого Стр ИЗ Эл.form2 Цикл
			НоваяСтрока = ТаблицаБухФорм.Добавить();
			НоваяСтрока.НомерФормы = 2;
			НоваяСтрока.КодСтроки = Стр.code;
			НоваяСтрока.НазваниеСтроки = Стр.name;
			
			НоваяСтрока["Начало_"+ТекГод] = Стр.startValue;
			НоваяСтрока["Конец_"+ТекГод] = Стр.endValue;
			
		КонецЦикла;	
		
	КонецЦикла;
	
	Если НЕ СписокСуммирования = "" Тогда
		ТаблицаБухФорм.Свернуть("НомерФормы,КодСтроки,НазваниеСтроки",Сред(СписокСуммирования,2));
		ТаблицаБухФорм.Сортировать("НомерФормы,КодСтроки");
	КонецЕсли;
	
	Возврат ТаблицаБухФорм;
	
КонецФункции

Функция Фокус_ПолучитьДанные_Аналитика(ИНН) Экспорт
	
	Данные = Фокус_КэшОтветовСервера_НайтиЗначение(ИНН,"analytics");
	
	Если Данные = Неопределено Тогда
		
		Данные = Фокус_API_ПолучитьОтветСервера("/api3/analytics", Новый Структура("inn",ИНН));
		
		Если НЕ Фокус_ПолучениеДанных_ВернулисьДанные(Данные) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Данные = Данные[0];
		
		Фокус_КэшОтветовСервера_ДобавитьЗначение("analytics",Данные);
		
	КонецЕсли;
	
	Данные = Данные.analytics;
	
	СписокВсехМаркеров = ПолучитьСписокМаркеров();

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Наименование");
	Результат.Колонки.Добавить("Код"); // код маркера в Фокусе
	Результат.Колонки.Добавить("Значение");
	Результат.Колонки.Добавить("Уровень1");
	Результат.Колонки.Добавить("Уровень2");
	Результат.Колонки.Добавить("Уровень3");
	Результат.Колонки.Добавить("ТипЗначения");
	
	Для Каждого Эл ИЗ Данные Цикл
		НайденнаяСтрока = СписокВсехМаркеров.Найти(Эл.Ключ,"Код");
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			НоваяСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,НайденнаяСтрока);
			НоваяСтрока.Значение = Эл.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Результат.Сортировать("Уровень1,Уровень2,Уровень3");
	
	Возврат Результат;
	
КонецФункции

Функция Фокус_ПолучитьДанные_СтатистикаКлюча() Экспорт
	
	Данные = Фокус_API_ПолучитьОтветСервера("/api3/stat", Новый Структура());
	
	Если НЕ Фокус_ПолучениеДанных_ВернулисьДанные(Данные) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТабСтат = Новый ТаблицаЗначений;
	ТабСтат.Колонки.Добавить("Имя",					Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
	ТабСтат.Колонки.Добавить("Метод",				Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
	ТабСтат.Колонки.Добавить("Использовано",		Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10)));
	ТабСтат.Колонки.Добавить("ЗначениеОграничения",	Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10)));
	ТабСтат.Колонки.Добавить("ДатаНачала",			Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(10)));
	ТабСтат.Колонки.Добавить("ДатаОкончания",		Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(10)));
	ТабСтат.Колонки.Добавить("ВидОграничения",		Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
	
	Фокус_ПолучениеДанных_ДобавитьМетодВТаблицуСтатистики(ТабСтат,"Реквизиты","api3/req",Данные);
	Фокус_ПолучениеДанных_ДобавитьМетодВТаблицуСтатистики(ТабСтат,"Светофор","api3/briefReport",Данные);
	Фокус_ПолучениеДанных_ДобавитьМетодВТаблицуСтатистики(ТабСтат,"Выписка","api3/excerpt",Данные);
	
	Фокус_ПолучениеДанных_ДобавитьМетодВТаблицуСтатистики(ТабСтат,"Доп. реквизиты","api3/egrDetails",Данные);
	Фокус_ПолучениеДанных_ДобавитьМетодВТаблицуСтатистики(ТабСтат,"Аналитика","api3/analytics",Данные);
	
	Фокус_ПолучениеДанных_ДобавитьМетодВТаблицуСтатистики(ТабСтат,"Лицензии","api3/licenses",Данные);
	Фокус_ПолучениеДанных_ДобавитьМетодВТаблицуСтатистики(ТабСтат,"Бух. отчетность","api3/buh",Данные);
	Фокус_ПолучениеДанных_ДобавитьМетодВТаблицуСтатистики(ТабСтат,"Фин. анализ","api3/finan",Данные);
	
	Фокус_ПолучениеДанных_ДобавитьМетодВТаблицуСтатистики(ТабСтат,"Контакты","api3/contacts",Данные);
	Фокус_ПолучениеДанных_ДобавитьМетодВТаблицуСтатистики(ТабСтат,"Банкротство ф\л","api3/fizBankr",Данные);
	
	Возврат ТабСтат;
	
КонецФункции

Функция Фокус_ПолучитьМассивСтрокИНН(МассивИНН,ИмяМетода) 

	ТЗИНН = Новый ТаблицаЗначений();
	ТЗИНН.Колонки.Добавить("ИНН");
	
	Для Каждого Эл ИЗ МассивИНН Цикл
		
		Если НЕ Фокус_КэшОтветовСервера_НайтиЗначение(Эл,ИмяМетода) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТЗИНН.Добавить();
		НоваяСтрока.ИНН = Эл;
		
	КонецЦикла;
	
	ТЗИНН.Свернуть("ИНН");

	МассивСтрок = Новый Массив;
	
	сч = 0;
	
	СтрокаПоиска = "*";
	
	Для Каждого Стр ИЗ ТЗИНН Цикл
		
		Если ЭтоПравильныйИНН(Стр.ИНН) Тогда
			сч = сч+1;
		Иначе
			Продолжить;
		КонецЕсли;
		
		СтрокаПоиска = СтрокаПоиска + ","+СокрЛП(Стр.ИНН);
		
		Если сч = 100 Тогда
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска,"*,","");
			МассивСтрок.Добавить(СтрокаПоиска);
			СтрокаПоиска = "*";
			сч=0;
		КонецЕсли;
		
	КонецЦикла;
	
	Если сч > 0 Тогда
		СтрокаПоиска = СтрЗаменить(СтрокаПоиска,"*,","");
		МассивСтрок.Добавить(СтрокаПоиска);
	КонецЕсли;

	Возврат МассивСтрок;
	
КонецФункции

Функция Фокус_ПолучитьДанные_ЭкспрессПроверкаСписком(МассивИНН) Экспорт
	
	ТипЧисло = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10));
	
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("ИНН");
	ТЗ.Колонки.Добавить("КрасныйКоличество",		ТипЧисло);
	ТЗ.Колонки.Добавить("ЖелтыйКоличество",			ТипЧисло);
	ТЗ.Колонки.Добавить("ЗеленыйКоличество",		ТипЧисло);
	ТЗ.Колонки.Добавить("НейтральныйКоличество",	ТипЧисло);
	ТЗ.Колонки.Добавить("Статус");
	ТЗ.Колонки.Добавить("СтатусРеорганизация");
	ТЗ.Колонки.Добавить("СтатусНедействующегоЛиквидации");
	ТЗ.Колонки.Добавить("НомерКартинки");
	
	ПроверкаСпискомСвоиМаркеры = Фокус_ХранениеДанных_ПрочитатьНастройку("ПроверкаСпискомСвоиМаркеры");
	
	МассивМетодов = Новый Массив;
	МассивМетодов.Добавить("req");
	
	Если ПроверкаСпискомСвоиМаркеры = Истина Тогда
		
		МассивМетодов.Добавить("egrDetails");
		МассивМетодов.Добавить("analytics");
	
	КонецЕсли;
	
	Фокус_КэшОтветовСервера_ЗаполнитьПоМассивуИНН(МассивМетодов,МассивИНН);
	
	сч = 0;
	
	Для Каждого ИНН Из МассивИНН Цикл
		
		сч = сч+1;
		
		Если НЕ Фокус_ПолучитьЗначение(ИНН,"req","inn") = Неопределено Тогда
			
			Процент = Окр(100*(сч/МассивИНН.Количество()));
			#Если Клиент Тогда
				Состояние("Вычисляем маркеры ("+Процент+"%)");
			#КонецЕсли	
			
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.ИНН		= СокрЛП(ИНН);
			НоваяСтрока.Статус	= Фокус_ПолучитьЗначение(ИНН,"req","UL.status.statusString");
			
			Если СтрДлина(НоваяСтрока.ИНН) = 12 Тогда
				НоваяСтрока.СтатусНедействующегоЛиквидации	= Фокус_ПолучитьЗначение(ИНН,"req","IP.status.dissolved");
				Если НоваяСтрока.СтатусНедействующегоЛиквидации = Истина Тогда
					НоваяСтрока.Статус = "Недействующий";
				Иначе
					НоваяСтрока.Статус = "Действующий";
				КонецЕсли;
			Иначе
				НоваяСтрока.СтатусНедействующегоЛиквидации	= Фокус_ПолучитьЗначение(ИНН,"req","UL.status.dissolved");
				Если НЕ НоваяСтрока.СтатусНедействующегоЛиквидации = Истина Тогда
					НоваяСтрока.СтатусНедействующегоЛиквидации	= Фокус_ПолучитьЗначение(ИНН,"req","UL.status.dissolving");
				КонецЕсли;		
				НоваяСтрока.СтатусРеорганизация	= Фокус_ПолучитьЗначение(ИНН,"req","UL.status.reorganizing");
			КонецЕсли;
			
			Если ПроверкаСпискомСвоиМаркеры = Истина Тогда
				ТаблицаСработавшихМаркеров = Фокус_Маркеры_ПолучитьСработавшие(ИНН);
				ТаблицаСработавшихМаркеров.Колонки.Добавить("Количество");
				ТаблицаСработавшихМаркеров.ЗаполнитьЗначения(1,"Количество");
				ТаблицаСработавшихМаркеров.Свернуть("Категория","Количество");
				
				Для Каждого Стр Из ТаблицаСработавшихМаркеров Цикл
					НоваяСтрока[Стр.Категория+"Количество"] = Стр.Количество;
				КонецЦикла;
				
			Иначе                                          
				НоваяСтрока.КрасныйКоличество	= ?(Фокус_ПолучитьЗначение(ИНН,"req","briefReport.summary.redStatements")=Истина,1,0);
				НоваяСтрока.ЖелтыйКоличество	= ?(Фокус_ПолучитьЗначение(ИНН,"req","briefReport.summary.yellowStatements")=Истина,1,0);
				НоваяСтрока.ЗеленыйКоличество	= ?(Фокус_ПолучитьЗначение(ИНН,"req","briefReport.summary.greenStatements")=Истина,1,0);
			КонецЕсли;
			
			Если НоваяСтрока.КрасныйКоличество > 0 Тогда
				НоваяСтрока.НомерКартинки = 1;
			ИначеЕсли НоваяСтрока.ЖелтыйКоличество > 0 Тогда
				НоваяСтрока.НомерКартинки = 2;
			ИначеЕсли НоваяСтрока.ЗеленыйКоличество > 0 Тогда
				НоваяСтрока.НомерКартинки = 3;
			Иначе
				НоваяСтрока.НомерКартинки = 0;
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	

	//Для Каждого СтрокаИНН ИЗ МассивСтрок Цикл
	//	
	//	Данные = Фокус_API_ПолучитьОтветСервера("/api3/req",Новый Структура("inn",СтрокаИНН));
	//	
	//	Если Фокус_ПолучениеДанных_ВернулисьДанные(Данные) Тогда
	//		
	//		Для Каждого Эл ИЗ Данные Цикл
	//			НоваяСтрока.ЭкспрессОценкаКрасный	= Фокус_ПолучитьЗначениеПоляДанных(Эл,"briefReport.summary.redStatements");
	//			НоваяСтрока.ЭкспрессОценкаЖелтый	= Фокус_ПолучитьЗначениеПоляДанных(Эл,"briefReport.summary.yellowStatements");
	//			НоваяСтрока.ЭкспрессОценкаЗеленый	= Фокус_ПолучитьЗначениеПоляДанных(Эл,"briefReport.summary.greenStatements");
	//			
	//			// номер картинки
	//			Если НоваяСтрока.ЭкспрессОценкаКрасный = Истина Тогда
	//				НоваяСтрока.НомерКартинки = 1;
	//			ИначеЕсли НоваяСтрока.ЭкспрессОценкаЖелтый = Истина Тогда
	//				НоваяСтрока.НомерКартинки = 2;
	//			ИначеЕсли НоваяСтрока.ЭкспрессОценкаЗеленый = Истина Тогда
	//				НоваяСтрока.НомерКартинки = 3;
	//			Иначе
	//				НоваяСтрока.НомерКартинки = 0;
	//			КонецЕсли;
	//			
	//		КонецЦикла;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
	// оказывается, по одному ИНН может встретиться несколько записей с разными ОГРН
	// оставим самые положительные результаты оценки, для этого дополнительно сортируем "плохости"
	
	ТЗ.Сортировать("ИНН,КрасныйКоличество,ЖелтыйКоличество");
	
	МассивУдаляемыхСтрок = Новый Массив();
	
	СтарИНН = Неопределено;
	
	Для Каждого Стр Из ТЗ Цикл
		
		Если СтарИНН = Стр.ИНН Тогда // дубль
			МассивУдаляемыхСтрок.Добавить(Стр);
		КонецЕсли;
		
		СтарИНН = Стр.ИНН;
		
	КонецЦикла;
	
	Для Каждого Эл Из МассивУдаляемыхСтрок Цикл
		ТЗ.Удалить(Эл);
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции

// Вспомогательные

Функция Фокус_ПолучениеДанных_ВернулисьДанные(Данные) 
	
	Если НЕ ТипЗнч(Данные) = Тип("Массив") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Данные.Количество()=0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура Фокус_ПолучениеДанных_ДобавитьМетодВТаблицуСтатистики(ТабСтат,Имя,Метод,Данные)

	НоваяСтрока = ТабСтат.Добавить();
	НоваяСтрока.Имя = Имя;
	НоваяСтрока.Метод = Метод;
	
	Для Каждого Эл Из Данные Цикл
		Если Эл.methodName = Метод Тогда
			
			НоваяСтрока.ДатаНачала = Эл.periodStartDate;
			НоваяСтрока.ДатаОкончания = Эл.periodEndDate;
			НоваяСтрока.ВидОграничения = Эл.limitType;
			НоваяСтрока.ЗначениеОграничения = Эл.limit;
			НоваяСтрока.Использовано = Эл.spent;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//-------------------------------------------------------
//
//	ХРАНЕНИЕ ДАННЫХ
//

Функция Фокус_ХранениеДанных_ДобавленыОбъекты() Экспорт
	
	Если	Фокус_ЕстьНеобходимыеМетаданные("Справочники.Фокус_ИсторияРезультатов") И 
			Фокус_ЕстьНеобходимыеМетаданные("Справочники.Фокус_ИзмененияМаркеров") И 
			Фокус_ЕстьНеобходимыеМетаданные("Справочники.Фокус_ДополнительныеСправочники") И 
	     	Фокус_ЕстьНеобходимыеМетаданные("РегистрыСведений.Фокус_ДополнительныеРеквизиты") Тогда
		 
		 Возврат Истина;
		 
	КонецЕсли;
	 
	Возврат Ложь;
	
КонецФункции

Функция Фокус_ХранениеДанных_ТекущийПользователь(ПустойПользователь=Ложь) Экспорт
	Если Не ПустойПользователь Тогда
		ТекПользовательБД=ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
		Если Метаданные.ПараметрыСеанса.Найти("ТекущийПользователь")<>Неопределено Тогда
			ТекПользовательСпр=ПараметрыСеанса["ТекущийПользователь"];
		ИначеЕсли Метаданные.ПараметрыСеанса.Найти("Пользователь")<>Неопределено Тогда
			ТекПользовательСпр=ПараметрыСеанса["Пользователь"];
		Иначе
			ТекПользовательСпр=Неопределено;
		КонецЕсли;
	Иначе
		ТекПользовательБД="";
		ТекПользовательСпр=Неопределено;
	КонецЕсли;
	
	Возврат Новый Структура("ID,Спр",ТекПользовательБД,ТекПользовательСпр);
КонецФункции

Процедура Фокус_ХранениеДанных_ИнициализироватьТаблицуНастроек()
	
	Если ТаблицаНастроекМодуля = Неопределено Тогда
		
		ТаблицаНастроекМодуля = Новый ТаблицаЗначений;
		ТаблицаНастроекМодуля.Колонки.Добавить("ИмяНастройки");
		ТаблицаНастроекМодуля.Колонки.Добавить("СохранятьВХранилищеЗначений");
		ТаблицаНастроекМодуля.Колонки.Добавить("ХранилищеСистемныхНастроек");
		ТаблицаНастроекМодуля.Колонки.Добавить("Персонализированная");
		
		Макет = ПолучитьМакет("НастройкиМодуля");
		
		Область = Макет.ПолучитьОбласть("Шапка");
		
		Для Сч = 1 По Область.ВысотаТаблицы Цикл
			
			НоваяСтрока = ТаблицаНастроекМодуля.Добавить();
			НоваяСтрока.ИмяНастройки = ПолучитьТекстЯчейкиОбласти(Область, сч, 1);
			НоваяСтрока.СохранятьВХранилищеЗначений = ?(НРег(ПолучитьТекстЯчейкиОбласти(Область,сч,2))="ложь",Ложь,Истина);
			НоваяСтрока.ХранилищеСистемныхНастроек = ?(НРег(ПолучитьТекстЯчейкиОбласти(Область,сч,3))="истина",Истина,Ложь);
			НоваяСтрока.Персонализированная = ?(НРег(ПолучитьТекстЯчейкиОбласти(Область,сч,4))="истина",Истина,Ложь);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция Фокус_ХранениеДанных_ПолучитьСвойствоНастройки(ИмяНастройки,ИмяСвойства)

	Фокус_ХранениеДанных_ИнициализироватьТаблицуНастроек();
	НайденнаяСтрока = ТаблицаНастроекМодуля.Найти(ИмяНастройки,"ИмяНастройки");
	
	Если НЕ НайденнаяСтрока = Неопределено Тогда
		Возврат НайденнаяСтрока[ИмяСвойства];
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура Фокус_ХранениеДанных_СохранитьНастройку(ИмяНастройки,Значение,ИспользоватьПерсонализациюНастройки=Ложь) Экспорт
	
	СохранятьВХранилищеЗначений = Истина;
	ИспользоватьХранилищеСистемныхНастроек = Ложь;
	Персонализированная = Ложь;
	
	СохранятьВХранилищеЗначений = Фокус_ХранениеДанных_ПолучитьСвойствоНастройки(ИмяНастройки,"СохранятьВХранилищеЗначений");
	ИспользоватьХранилищеСистемныхНастроек = Фокус_ХранениеДанных_ПолучитьСвойствоНастройки(ИмяНастройки,"ХранилищеСистемныхНастроек");
	Персонализированная = Фокус_ХранениеДанных_ПолучитьСвойствоНастройки(ИмяНастройки,"Персонализированная");
	
	ТекПользователь=Фокус_ХранениеДанных_ТекущийПользователь(НЕ (ИспользоватьПерсонализациюНастройки И Персонализированная));
	
	Если Фокус_ХранениеДанных_ДобавленыОбъекты() Тогда
		Фокус_ХранениеДанных_СохранитьДопРеквизит(ТекПользователь.Спр,ИмяНастройки,Значение,СохранятьВХранилищеЗначений);
	Иначе
		Если ИспользоватьХранилищеСистемныхНастроек Тогда
			ХранилищеСистемныхНастроек.Сохранить("КонтурФокус_"+ИмяНастройки+ТекПользователь.ID,,Значение);
		Иначе
			ВызватьИсключение("Попытка сохранения настройки "+ИмяНастройки+" при остутствии добавленных объектов.");
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Функция Фокус_ХранениеДанных_ПрочитатьНастройку(ИмяНастройки,ТекПользователь=Неопределено) Экспорт
	СохранятьВХранилищеЗначений = Истина;
	ИспользоватьХранилищеСистемныхНастроек = Ложь;
	
	Фокус_ХранениеДанных_ИнициализироватьТаблицуНастроек();
	НайденнаяСтрока = ТаблицаНастроекМодуля.Найти(ИмяНастройки,"ИмяНастройки");
	Если НЕ НайденнаяСтрока = Неопределено Тогда
		СохранятьВХранилищеЗначений = НайденнаяСтрока.СохранятьВХранилищеЗначений;
		ИспользоватьХранилищеСистемныхНастроек = НайденнаяСтрока.ХранилищеСистемныхНастроек;
	КонецЕсли;
		
	Если Фокус_ХранениеДанных_ДобавленыОбъекты() Тогда
		
		ТекЗначение =  Фокус_ХранениеДанных_ПрочитатьДопРеквизит(?(ТекПользователь=Неопределено,Неопределено,ТекПользователь.Спр),ИмяНастройки,СохранятьВХранилищеЗначений);
		
	Иначе
		
		Если ИспользоватьХранилищеСистемныхНастроек Тогда
			ТекЗначение = ХранилищеСистемныхНастроек.Загрузить("КонтурФокус_"+ИмяНастройки+?(ТекПользователь=Неопределено,"",ТекПользователь.ID));
		Иначе
			ТекЗначение = Неопределено;
		КонецЕсли;	
		
	КонецЕсли;
		
	// значения по-умолчанию
	Если ТекЗначение = Неопределено Тогда
		Если ИмяНастройки = "НаблюдениеВыборкаКонтрагентов" Тогда
			Если Метаданные.Справочники.Контрагенты.Иерархический Тогда
				УсловниеНаИерархию=" И НЕ Контрагенты.ЭтоГруппа ";
			Иначе
				УсловниеНаИерархию=" ";
			КонецЕсли;
			ТекЗначение = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		                      |	Контрагенты.ИНН
		                      |ИЗ
		                      |	Справочник.Контрагенты КАК Контрагенты
		                      |ГДЕ
		                      |	НЕ Контрагенты.ПометкаУдаления "+УсловниеНаИерархию;
							  
		ИначеЕсли ИмяНастройки = "НаблюдениеНастройкаМаркеров" Тогда
							  
			ТекЗначение = ПолучитьМакет("НастройкаМаркеров").ПолучитьОбласть("Шапка");
			
		ИначеЕсли ИмяНастройки = "ВариантВыборкиКонтрагентов" Тогда
			
			ТекЗначение = "Список";
			
		ИначеЕсли ИмяНастройки = "СписокКонтрагентовНаблюдения" Тогда
			
			ТекЗначение = Новый ТаблицаЗначений;
			ТекЗначение.Колонки.Добавить("Контрагент");
			
		КонецЕсли;	

	КонецЕсли;
	
	Возврат ТекЗначение;
	
КонецФункции

Процедура Фокус_ХранениеДанных_СохранитьДопРеквизит(Объект,ИмяСвойства,Значение,Хранилище = Ложь) Экспорт
	
	НаборЗаписей = РегистрыСведений.Фокус_ДополнительныеРеквизиты.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Объект.Установить(Объект);
	НаборЗаписей.Отбор.Свойство.Установить(ИмяСвойства);
	
	Запись = НаборЗаписей.Добавить();
		
	Запись.Объект			= Объект;
	Запись.Свойство			= ИмяСвойства;
	
	Если Хранилище Тогда
		Запись.ЗначениеХранилище	= Новый ХранилищеЗначения(Значение);
	Иначе
		Запись.Значение				= Значение;
	КонецЕсли;	
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина; // для отключения вызова подписок на событие
	
    НаборЗаписей.Записать();
	
КонецПроцедуры

Функция Фокус_ХранениеДанных_ПрочитатьДопРеквизит(Объект,ИмяСвойства,Хранилище = Ложь) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Фокус_ДополнительныеРеквизиты.Значение,
	               |	Фокус_ДополнительныеРеквизиты.ЗначениеХранилище
	               |ИЗ
	               |	РегистрСведений.Фокус_ДополнительныеРеквизиты КАК Фокус_ДополнительныеРеквизиты
	               |ГДЕ
	               |	Фокус_ДополнительныеРеквизиты.Свойство = &Свойство
	               |	И Фокус_ДополнительныеРеквизиты.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Свойство",	ИмяСвойства);
	Запрос.УстановитьПараметр("Объект",		Объект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если Хранилище Тогда
			Возврат Выборка.ЗначениеХранилище.Получить();
		Иначе
			Возврат Выборка.Значение;
		КонецЕсли;	
			
	КонецЕсли;
	
КонецФункции

Функция Фокус_ХранениеДанных_ПолучитьПоследнийРезультат(ИНН,ИмяМетода,ДатаВремяКонец = Неопределено,ДатаВремяНачало = Неопределено, ТолькоОбработанные = Истина)
	
	Если НЕ Фокус_ЕстьНеобходимыеМетаданные("Справочники.Фокус_ИсторияРезультатов") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ДопУсловие = "";
	ПорядокСортировки = "УБЫВ";
	
	Если ЗначениеЗаполнено(ДатаВремяКонец) Тогда
		Если ЗначениеЗаполнено(ДатаВремяНачало) Тогда
			
			ДопУсловие = "И Фокус_ИсторияРезультатов.ДатаВремя МЕЖДУ &ДатаВремяНачало И &ДатаВремяКонец";
			ПорядокСортировки = "";
			
		Иначе
			
			ДопУсловие = "И Фокус_ИсторияРезультатов.ДатаВремя < &ДатаВремяКонец";
			
		КонецЕсли;
	КонецЕсли;
		
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	Фокус_ИсторияРезультатов.Ссылка
		               |ИЗ
		               |	Справочник.Фокус_ИсторияРезультатов КАК Фокус_ИсторияРезультатов
		               |ГДЕ
		               |	Фокус_ИсторияРезультатов.ИНН = &ИНН
		               |	И Фокус_ИсторияРезультатов.ИмяМетода = &ИмяМетода
		               |	"+?(ТолькоОбработанные,"И Фокус_ИсторияРезультатов.Обработан","")+"
		               |    "+ДопУсловие+"
					   |
		               |УПОРЯДОЧИТЬ ПО
		               |	Фокус_ИсторияРезультатов.ДатаВремя "+ПорядокСортировки;
	
	Запрос.УстановитьПараметр("ИНН",		ИНН);
	Запрос.УстановитьПараметр("ИмяМетода",	ИмяМетода);
	Запрос.УстановитьПараметр("ДатаВремяКонец",		ДатаВремяКонец);
	Запрос.УстановитьПараметр("ДатаВремяНачало",	ДатаВремяНачало);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Если ЗначениеЗаполнено(ДатаВремяНачало) Тогда
			Возврат Фокус_ХранениеДанных_ПолучитьПоследнийРезультат(ИНН,ИмяМетода,ДатаВремяНачало,,ТолькоОбработанные);
		Иначе			
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

Процедура Фокус_ХранениеДанных_СохранитьОтветСервера(Параметры,АдресСервиса,Ответ)
	
	ИНН = Параметры.inn;
	ИмяМетода = СтрЗаменить(АдресСервиса,"/api3/","");
	
	ПоследнийОтвет = Фокус_ХранениеДанных_ПолучитьПоследнийРезультат(ИНН,ИмяМетода,,,Ложь);
	
	Если НЕ ПоследнийОтвет = Неопределено Тогда
		Если ПоследнийОтвет.Значение = Ответ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Спр = Справочники.Фокус_ИсторияРезультатов.СоздатьЭлемент();
	Спр.ДатаВремя	= ТекущаяДата();
	Спр.ИНН			= ИНН;
	Спр.ИмяМетода	= ИмяМетода;
	Спр.Значение	= Ответ;
	Спр.ОбменДанными.Загрузка = Истина;
	Спр.Записать();
	
КонецПроцедуры  

Процедура Фокус_ХранениеДанных_СохранитьСписокМаркеров(СписокМаркеров) Экспорт
	
	Фокус_ХранениеДанных_СохранитьНастройку("Маркеры", СписокМаркеров,Фокус_ХранениеДанных_ПрочитатьНастройку("ИндивидуальныйНастройкиМаркеров"));

	КэшСпискаМаркеров = Неопределено;
	
КонецПроцедуры

Функция Фокус_Маркеры_ПолучитьСписокМаркеровПоУмолчанию() Экспорт
	
	Макет = ПолучитьМакет("Маркеры_НастройкаПоУмолчанию");
	
	Область = Макет.ПолучитьОбласть("Шапка");
	
	СписокМаркеров = Новый ТаблицаЗначений;
	СписокМаркеров.Колонки.Добавить("ID");
	СписокМаркеров.Колонки.Добавить("Наименование");
	СписокМаркеров.Колонки.Добавить("Описание");
	СписокМаркеров.Колонки.Добавить("КодМаркера");
	СписокМаркеров.Колонки.Добавить("Категория", Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(50)));
	СписокМаркеров.Колонки.Добавить("Включен");
	
	Для Сч = 1 По Область.ВысотаТаблицы Цикл
		
		НоваяСтрока = СписокМаркеров.Добавить();
		НоваяСтрока.ID = ПолучитьТекстЯчейкиОбласти(Область,сч,1);
		НоваяСтрока.Наименование = ПолучитьТекстЯчейкиОбласти(Область,сч,2);
		НоваяСтрока.Описание = ПолучитьТекстЯчейкиОбласти(Область,сч,3);
		НоваяСтрока.КодМаркера = ПолучитьТекстЯчейкиОбласти(Область,сч,4);
		НоваяСтрока.Категория = ПолучитьТекстЯчейкиОбласти(Область,сч,5);
		НоваяСтрока.Включен = ?(ПолучитьТекстЯчейкиОбласти(Область,сч,6)="Ложь",Ложь,Истина);
		
	КонецЦикла;
	
	Возврат СписокМаркеров;
	
КонецФункции

Функция Фокус_ХранениеДанных_ПолучитьСписокМаркеров(ТекПользователь=Неопределено) Экспорт
	Если ТекПользователь=Неопределено Тогда
		ТекПользователь=Фокус_ХранениеДанных_ТекущийПользователь(НЕ Фокус_ХранениеДанных_ПрочитатьНастройку("ИндивидуальныйНастройкиМаркеров"));
	КонецЕсли;
	СписокМаркеров = Фокус_ХранениеДанных_ПрочитатьНастройку("Маркеры",ТекПользователь);
	
	Возврат СписокМаркеров;
	
КонецФункции

Функция Фокус_ХранениеДанных_ПолучитьСписокЭлементовСправочника(ИмяСправочника) Экспорт
	
	Если НЕ Фокус_ХранениеДанных_ДобавленыОбъекты() Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
		
	Если ИмяСправочника = "Действия" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Фокус_ДополнительныеСправочники.Ссылка,
		               |	Фокус_ДополнительныеСправочники.Наименование,
		               |	Фокус_ДополнительныеРеквизиты.Значение КАК Включен
		               |ИЗ
		               |	Справочник.Фокус_ДополнительныеСправочники КАК Фокус_ДополнительныеСправочники
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Фокус_ДополнительныеРеквизиты КАК Фокус_ДополнительныеРеквизиты
		               |		ПО Фокус_ДополнительныеСправочники.Ссылка = Фокус_ДополнительныеРеквизиты.Объект
		               |			И (Фокус_ДополнительныеРеквизиты.Свойство = ""Включен"")
		               |ГДЕ
		               |	Фокус_ДополнительныеСправочники.ИмяСправочника = ""Действия""
		               |	И НЕ Фокус_ДополнительныеСправочники.ПометкаУдаления";
					   
		Возврат Запрос.Выполнить().Выгрузить();			   
		
	КонецЕсли;
	
КонецФункции

Функция Фокус_ХранениеДанных_ПолучитьЭлементСправочника(ИмяСправочника,Ссылка) Экспорт
	
	Если ИмяСправочника = "Действия" Тогда
		
		СтруктураЭлемента = Новый Структура;
		СтруктураЭлемента.Вставить("Наименование",		Ссылка.Наименование);
		СтруктураЭлемента.Вставить("Включен",			Фокус_ХранениеДанных_ПрочитатьДопРеквизит(Ссылка,"Включен"));
		СтруктураЭлемента.Вставить("ЛюбойМаркер",		Фокус_ХранениеДанных_ПрочитатьДопРеквизит(Ссылка,"ЛюбойМаркер"));
		СтруктураЭлемента.Вставить("ЛюбойКонтрагент",	Фокус_ХранениеДанных_ПрочитатьДопРеквизит(Ссылка,"ЛюбойКонтрагент"));
		СтруктураЭлемента.Вставить("СписокМаркеров",	Фокус_ХранениеДанных_ПрочитатьДопРеквизит(Ссылка,"СписокМаркеров",		Истина));
		СтруктураЭлемента.Вставить("СписокКонтрагентов",Фокус_ХранениеДанных_ПрочитатьДопРеквизит(Ссылка,"СписокКонтрагентов",	Истина));
		СтруктураЭлемента.Вставить("ВыполняемыйКод",	Фокус_ХранениеДанных_ПрочитатьДопРеквизит(Ссылка,"ВыполняемыйКод",		Истина));
		
		Возврат СтруктураЭлемента;
		
	КонецЕсли;
	
КонецФункции

Процедура Фокус_ХранениеДанных_СохранитьЭлементСправочника(ИмяСправочника,Ссылка = Неопределено,СтруктураЭлемента) Экспорт
	
	Если ИмяСправочника = "Действия" Тогда
		
		Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
			ТекЭлемент = Справочники.Фокус_ДополнительныеСправочники.СоздатьЭлемент();
			ТекЭлемент.ИмяСправочника = "Действия";
			ТекЭлемент.Наименование = СтруктураЭлемента.Наименование;
			ТекЭлемент.Записать();
			Ссылка = ТекЭлемент.Ссылка;
		Иначе
			Если НЕ Ссылка.Наименование = СтруктураЭлемента.Наименование Тогда
				ТекЭлемент = Ссылка.ПолучитьОбъект();
				ТекЭлемент.Наименование = СтруктураЭлемента.Наименование;
				ТекЭлемент.Записать();
			КонецЕсли;
		КонецЕсли;
		
		Фокус_ХранениеДанных_СохранитьДопРеквизит(Ссылка, "Включен",			СтруктураЭлемента.Включен);
		Фокус_ХранениеДанных_СохранитьДопРеквизит(Ссылка, "ЛюбойМаркер",		СтруктураЭлемента.ЛюбойМаркер);
		Фокус_ХранениеДанных_СохранитьДопРеквизит(Ссылка, "ЛюбойКонтрагент",	СтруктураЭлемента.ЛюбойКонтрагент);
		Фокус_ХранениеДанных_СохранитьДопРеквизит(Ссылка, "СписокМаркеров",		СтруктураЭлемента.СписокМаркеров,		Истина);
		Фокус_ХранениеДанных_СохранитьДопРеквизит(Ссылка, "СписокКонтрагентов",	СтруктураЭлемента.СписокКонтрагентов,	Истина);
		Фокус_ХранениеДанных_СохранитьДопРеквизит(Ссылка, "ВыполняемыйКод",		СтруктураЭлемента.ВыполняемыйКод,		Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Функция Фокус_ХранениеДанных_ПолучитьСписокПользователейССохраненнойНастройкой(ИмяНастройки) Экспорт
	//1. Это персонализированная настройка
	Если НЕ (Фокус_ХранениеДанных_ПолучитьСвойствоНастройки(ИмяНастройки,"Персонализированная") = Истина) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//2. Есть дополнительные объекты
	Если НЕ Фокус_ХранениеДанных_ДобавленыОбъекты() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//3. Получаем списко пользователей
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Фокус_ДополнительныеРеквизиты.Объект
		|ИЗ
		|	РегистрСведений.Фокус_ДополнительныеРеквизиты КАК Фокус_ДополнительныеРеквизиты
		|ГДЕ
		|	Фокус_ДополнительныеРеквизиты.Свойство = &ИмяНастройки";
	
	Запрос.УстановитьПараметр("ИмяНастройки", ИмяНастройки);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	СписокПользователей=Новый СписокЗначений;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокПользователей.Добавить(ВыборкаДетальныеЗаписи.Объект);
	КонецЦикла;
	Возврат СписокПользователей;
КонецФункции

//-------------------------------------------------------
//
//	API
//

Функция Фокус_API_ПроверитьКлючДоступа(Знач ТекущийКлюч = Неопределено) Экспорт 
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Успешно",Истина);
	СтруктураОтвета.Вставить("ОписаниеОшибки","");
	
	ОписаниеОшибкиОтвета = "";
	
	Если Фокус_API_ПолучитьОтветСервера("/api3/req", Новый Структура("inn","6663003127"),,ОписаниеОшибкиОтвета) = Неопределено Тогда
		СтруктураОтвета.Успешно = Ложь;
		СтруктураОтвета.ОписаниеОшибки = ОписаниеОшибкиОтвета;
	КонецЕсли;
	
	Возврат СтруктураОтвета;			
	
КонецФункции

Функция Фокус_API_ПреобразоватьПараметр(Знач ТекПараметр)
	
	ТекПараметр = СтрЗаменить(СокрЛП(ТекПараметр)," ","%20");
	
	Возврат ТекПараметр;
	
КонецФункции

Функция Фокус_API_ПолучитьСтрокуПараметров(Параметры,АдресСервиса)
	
	КлючРазработчика = Фокус_ПолучитьКлючРазработчика(АдресСервиса);
	
	СтрокаПараметров = "key="+КлючРазработчика;
	
	Для Каждого Эл Из Параметры Цикл
		СтрокаПараметров = СтрокаПараметров + "&" + СокрЛП(Эл.Ключ) + "=" + Фокус_API_ПреобразоватьПараметр(Эл.Значение);
	КонецЦикла;
	
	Возврат СтрокаПараметров;
	
КонецФункции

Функция Фокус_API_ПолучитьОтветСервера(АдресСервиса,Параметры,СохранитьОтвет = Ложь,ОписаниеОшибкиОтвета = "")
	
	СтрокаПараметров	= Фокус_API_ПолучитьСтрокуПараметров(Параметры,АдресСервиса);
	ИмяВременногоФайла	= КаталогВременныхФайлов()+"\focus.txt";
	
	//Если ЗначениеЗаполнено(ДатаСозданияСоединения) И (ДатаСозданияСоединения < (ТекущаяДата() - 2*60)) Тогда
	//	СоединениеКонтурФокус = Неопределено;
	//КонецЕсли;
	
	Если СоединениеКонтурФокус = Неопределено Тогда
		
		Прокси = Новый ИнтернетПрокси;
		
		ПараметрыПрокси = Фокус_ХранениеДанных_ПрочитатьНастройку("ПараметрыПрокси");
		Если ТипЗнч(ПараметрыПрокси) = Тип("Структура") Тогда
			
			Если ПараметрыПрокси.ИспользуетсяПрокси Тогда
				Прокси.Пользователь	= ПараметрыПрокси.ЛогинПрокси;
				Прокси.Пароль		= ПараметрыПрокси.ПарольПрокси;
				Если ЗначениеЗаполнено(ПараметрыПрокси.СерверПрокси) Тогда
					Прокси.Установить("http", ПараметрыПрокси.СерверПрокси, ПараметрыПрокси.ПортПрокси);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СоединениеКонтурФокус = Новый HTTPСоединение("focus-api.kontur.ru",,,,Прокси,Истина);
		
		//ДатаСозданияСоединения = ТекущаяДата();
		
	КонецЕсли;
	
	Попытка
		СоединениеКонтурФокус.Получить(АдресСервиса+"?"+СтрокаПараметров,ИмяВременногоФайла,);
	Исключение
		ОписаниеОшибкиОтвета = ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;
	
	Текст = Новый ТекстовыйДокумент();
	Текст.Прочитать(ИмяВременногоФайла,"UTF-8");
	
	ТекТекст = Текст.ПолучитьТекст();
	
	Если СохранитьОтвет Тогда
		
		ТаблицаОтветов = Новый ТаблицаЗначений;
		
		Данные = ПрочитатьJSONВручную(ТекТекст,,,Истина,ТаблицаОтветов);
		
		Для Каждого Стр Из ТаблицаОтветов Цикл
			Фокус_ХранениеДанных_СохранитьОтветСервера(Новый Структура("inn",Стр.ИНН),АдресСервиса,Стр.СтрокаОтвета);
		КонецЦикла;
		
		Если Фокус_ПолучениеДанных_ВернулисьДанные(Данные) Тогда
			Фокус_КэшОтветовСервера_ДобавитьЗначение(СтрЗаменить(АдресСервиса,"/api3/",""),Данные);
		КонецЕсли;
		
		Фокус_КэшОтветовСервера_ДобавитьЗначение(СтрЗаменить(АдресСервиса,"/api3/",""),Данные);
		
		Возврат Данные;
		
	Иначе
		Возврат ПрочитатьJSONВручную(ТекТекст);
	КонецЕсли;
	
КонецФункции

Функция Фокус_ПолучитьКлючРазработчика(АдресСервиса = Неопределено) Экспорт
	
	Если КэшКлючаДоступа = Неопределено Тогда
		КэшКлючаДоступа = Фокус_ХранениеДанных_ПрочитатьНастройку("КлючДоступа");
    КонецЕсли;
	
	Возврат КэшКлючаДоступа;
	
КонецФункции

//-------------------------------------------------------
//
//	НАБЛЮДЕНИЕ
//

Функция Фокус_Наблюдение_ПолучитьСписокИНН() Экспорт
	
	Запрос = Новый Запрос();
	
	ВариантВыборкиКонтрагентов = Фокус_ХранениеДанных_ПрочитатьНастройку("ВариантВыборкиКонтрагентов");
	
	Если ВариантВыборкиКонтрагентов = "Список" Тогда
		Если Метаданные.Справочники.Контрагенты.Иерархический Тогда
			УсловниеНаИерархию=" И НЕ Контрагенты.ЭтоГруппа ";
		Иначе
			УсловниеНаИерархию=" ";
		КонецЕсли;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	Контрагенты.ИНН
			               |ИЗ
			               |	Справочник.Контрагенты КАК Контрагенты
			               |ГДЕ
			               |	 Контрагенты.Ссылка В ИЕРАРХИИ(&СписокКонтрагентов) "+УсловниеНаИерархию;
		Запрос.УстановитьПараметр("СписокКонтрагентов",Фокус_ХранениеДанных_ПрочитатьНастройку("СписокКонтрагентовНаблюдения").ВыгрузитьКолонку("Контрагент"));
						   
	Иначе
		Запрос = Новый Запрос();
		Запрос.Текст = Фокус_ХранениеДанных_ПрочитатьНастройку("НаблюдениеВыборкаКонтрагентов");
	
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция Фокус_Наблюдение_ОбновитьДанные() Экспорт
	
	СписокИНН = Фокус_Наблюдение_ПолучитьСписокИНН();
	
	МассивМетодов = Новый Массив;
	МассивМетодов.Добавить("req");
	МассивМетодов.Добавить("egrDetails");
	МассивМетодов.Добавить("analytics");
	
	Фокус_КэшОтветовСервера_ЗаполнитьПоМассивуИНН(МассивМетодов,СписокИНН.ВыгрузитьКолонку("ИНН"),Истина);
	
	
	//сч = 0;
	//РазмерСписка = СписокИНН.Количество();
	//
	//Для Каждого Стр Из СписокИНН Цикл
	//	
	//	сч = сч+1;
	//	#Если Клиент Тогда
	//	Состояние("Обновляем данные по контрагентам: "+сч+" из "+РазмерСписка);
	//	#КонецЕсли	
	//	
	//	Если ЭтоПравильныйИНН(Стр.ИНН) Тогда
	//		Фокус_API_ПолучитьОтветСервера("/api3/req",			Новый Структура("inn",Стр.ИНН), Истина);
	//		Фокус_API_ПолучитьОтветСервера("/api3/egrDetails",	Новый Структура("inn",Стр.ИНН), Истина);
	//		Фокус_API_ПолучитьОтветСервера("/api3/analytics",	Новый Структура("inn",Стр.ИНН), Истина);
	//	КонецЕсли;	
	//КонецЦикла;
	
КонецФункции

Функция Фокус_Наблюдение_РазобратьНастройкуНабораМаркеров(СтрокаНастройки)
	
	ТаблицаНастройки = Новый ТаблицаЗначений;
	ТаблицаНастройки.Колонки.Добавить("ИмяМаркера"); 
	ТаблицаНастройки.Колонки.Добавить("ИДГруппы");
	
	//Пример строки настройки: [УчредителиФЛ,УчредителиЮЛ,УчредителиИностр],ЮрАдрес,[КодНалоговой,КодНалоговойИП]
	
	НачалоСлова = 0;
	НачалоГруппы= 0;
	ИдГруппы	= 1;
	
	ТекИмяМаркера = ""; 	
	
	Длина = СтрДлина(СтрокаНастройки);
	Для н = 1 по Длина Цикл
		Символ = Сред(СтрокаНастройки, н, 1);
		Если Символ = "[" Тогда
			НачалоГруппы = 1;
		ИначеЕсли Символ = "," Тогда
			
			Если ЗначениеЗаполнено(ТекИмяМаркера) Тогда
				НоваяСтрока = ТаблицаНастройки.Добавить();
				НоваяСтрока.ИмяМаркера = СокрЛП(ТекИмяМаркера);
				НоваяСтрока.ИДГруппы	= ИДГруппы;
			КонецЕсли;                                 
			
			ТекИмяМаркера = "";   
			Если НачалоГруппы = 0 Тогда
				ИДГруппы = ИДГруппы+1;
			КонецЕсли;
				
		ИначеЕсли Символ = "]" Тогда      
			
			Если ЗначениеЗаполнено(ТекИмяМаркера) Тогда
				НоваяСтрока = ТаблицаНастройки.Добавить();
				НоваяСтрока.ИмяМаркера = СокрЛП(ТекИмяМаркера);
				НоваяСтрока.ИДГруппы	= ИДГруппы;
			КонецЕсли;                                 
			
			ТекИмяМаркера = "";
			НачалоГруппы = 0;
			
		Иначе
			ТекИмяМаркера = ТекИмяМаркера+Символ;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекИмяМаркера) Тогда
		НоваяСтрока = ТаблицаНастройки.Добавить();
		НоваяСтрока.ИмяМаркера = СокрЛП(ТекИмяМаркера);
		НоваяСтрока.ИДГруппы	= ИДГруппы;
	КонецЕсли;
			
	Возврат ТаблицаНастройки;
	
КонецФункции

Процедура Фокус_Наблюдение_ИнициализироватьТаблицуПараметров() Экспорт
	
	ТаблицаПараметровНаблюдения = Новый ТаблицаЗначений;
	ТаблицаПараметровНаблюдения.Колонки.Добавить("Вкл");
	ТаблицаПараметровНаблюдения.Колонки.Добавить("Имя");
	ТаблицаПараметровНаблюдения.Колонки.Добавить("Описание");
	ТаблицаПараметровНаблюдения.Колонки.Добавить("ИмяМетода");
	ТаблицаПараметровНаблюдения.Колонки.Добавить("ИмяПоля");
	ТаблицаПараметровНаблюдения.Колонки.Добавить("ВидПредставления");
	ТаблицаПараметровНаблюдения.Колонки.Добавить("НегативноеЗначение");
	ТаблицаПараметровНаблюдения.Колонки.Добавить("СрокСравнения");
	ТаблицаПараметровНаблюдения.Колонки.Добавить("Значимость");
	ТаблицаПараметровНаблюдения.Колонки.Добавить("ИмяНабораМаркеров");
	
	ТабВложенныхМаркеров = Новый ТаблицаЗначений;
	ТабВложенныхМаркеров.Колонки.Добавить("ИмяНабораМаркеров");
	ТабВложенныхМаркеров.Колонки.Добавить("СписокМаркеров");
	
	ТабМаркеров = Фокус_ХранениеДанных_ПрочитатьНастройку("НаблюдениеНастройкаМаркеров");

	Для н = 2 По ТабМаркеров.ВысотаТаблицы Цикл
		
		НоваяСтрока = ТаблицаПараметровНаблюдения.Добавить();
		
   		НоваяСтрока.Вкл					= ТабМаркеров.Область("R"+н+"C1").Текст;
   		НоваяСтрока.Имя					= ТабМаркеров.Область("R"+н+"C2").Текст;
   		НоваяСтрока.Описание			= ТабМаркеров.Область("R"+н+"C3").Текст;
   		НоваяСтрока.ИмяМетода			= ТабМаркеров.Область("R"+н+"C4").Текст;
   		НоваяСтрока.ИмяПоля				= ТабМаркеров.Область("R"+н+"C5").Текст;
   		НоваяСтрока.ВидПредставления	= ТабМаркеров.Область("R"+н+"C6").Текст;
   		НоваяСтрока.НегативноеЗначение	= ТабМаркеров.Область("R"+н+"C7").Текст;
   		НоваяСтрока.СрокСравнения		= ТабМаркеров.Область("R"+н+"C8").Текст;
   		НоваяСтрока.Значимость			= ТабМаркеров.Область("R"+н+"C9").Текст;
        
   		Если НоваяСтрока.ИмяМетода = "Набор" Тогда
			Если ЗначениеЗаполнено(НоваяСтрока.Вкл) Тогда
            	НоваяВложСтрока = ТабВложенныхМаркеров.Добавить();
				НоваяВложСтрока.ИмяНабораМаркеров	= НоваяСтрока.Имя;
				НоваяВложСтрока.СписокМаркеров		= Фокус_Наблюдение_РазобратьНастройкуНабораМаркеров(НоваяСтрока.ИмяПоля);
			КонецЕсли;		
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Стр Из ТабВложенныхМаркеров Цикл
   		
   		СписокМаркеров = Стр.СписокМаркеров;
		
		Для Каждого СтрМарк Из СписокМаркеров Цикл
			
   			НомСтр = "";
			
			НайденнаяСтрока = ТаблицаПараметровНаблюдения.Найти(СтрМарк.ИмяМаркера,"Имя");
			Если НЕ НайденнаяСтрока = Неопределено Тогда
   				
   				НоваяСтрока = ТаблицаПараметровНаблюдения.Добавить();
   				НоваяСтрока.Вкл					= 1;
   				НоваяСтрока.Имя					= НайденнаяСтрока.Имя;
   				НоваяСтрока.Описание			= НайденнаяСтрока.Описание;
   				НоваяСтрока.ИмяМетода			= НайденнаяСтрока.ИмяМетода;
   				НоваяСтрока.ИмяПоля				= НайденнаяСтрока.ИмяПоля;
   				НоваяСтрока.ВидПредставления	= НайденнаяСтрока.ВидПредставления;
   				НоваяСтрока.НегативноеЗначение	= НайденнаяСтрока.НегативноеЗначение;
   				НоваяСтрока.СрокСравнения		= НайденнаяСтрока.СрокСравнения;
   				НоваяСтрока.Значимость			= НайденнаяСтрока.Значимость;
   				НоваяСтрока.ИмяНабораМаркеров	= Стр.ИмяНабораМаркеров;
   				
   			КонецЕсли;
   			
   		КонецЦикла;
   		
   	КонецЦикла;
	
КонецПроцедуры

Функция Фокус_Наблюдение_ПолучитьНаблюдаемыеПараметры(Знач ИмяМетода) 
	 
	Если НЕ ЗначениеЗаполнено(ТаблицаПараметровНаблюдения) Тогда
	    Фокус_Наблюдение_ИнициализироватьТаблицуПараметров();
	КонецЕсли;
    
	ИмяМетода = СокрЛП(ИмяМетода);
	
	ВремТЗ = ТаблицаПараметровНаблюдения.Скопировать();
    
	ВремТЗ.Колонки.Добавить("Порядок");
	
	КолСтрок = ВремТЗ.Количество();
	
	Для н = 1 По КолСтрок Цикл
		
		НомСтроки = КолСтрок-н;
		
		ТекущаяСтрока = ВремТЗ.Получить(НомСтроки);
		
		ТекущаяСтрока.Порядок = 0;
		
		Если НЕ (ТекущаяСтрока.ИмяМетода = ИмяМетода) Тогда
			Если СокрЛП(ТекущаяСтрока.ИмяМетода = "Набор") Тогда
				ТекущаяСтрока.Порядок = 5;
			Иначе
				ВремТЗ.Удалить(ТекущаяСтрока);
			КонецЕсли;
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекущаяСтрока.Вкл) Тогда
			ВремТЗ.Удалить(ТекущаяСтрока);
		КонецЕсли;
			
	КонецЦикла;	
    
	ВремТЗ.Сортировать("Порядок"); // сначала обработаем простые маркеры, затем наборы
	
	Возврат ВремТЗ;
	
КонецФункции

Функция Фокус_Наблюдение_ДанныеОтличаются(ТекущееЗначение,ПредыдущееЗначение) Экспорт
	
	ЕстьРасхождения = Ложь;
	
	//ПустЗнач1 = ПустоеЗначение(ПредыдущееЗначение);
	//ПустЗнач2 = ПустоеЗначение(ТекущееЗначение);
	
	Если НЕ ЗначениеЗаполнено(ПредыдущееЗначение) Тогда
		Если ЗначениеЗаполнено(ТекущееЗначение) Тогда
			ЕстьРасхождения = Истина;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ТекущееЗначение) Тогда
			
			ТипЗначПред = ТипЗнч(ПредыдущееЗначение);
			ТипЗначТек = ТипЗнч(ТекущееЗначение);
			
			//ТипЗнач1 = ТипЗначенияСтр(ПредыдущееЗначение);
			//ТипЗнач2 = ТипЗначенияСтр(ТекущееЗначение);
			
			Если ТипЗначПред = Тип("ТаблицаЗначений") Тогда
				Если ТипЗначТек = Тип("ТаблицаЗначений") Тогда
					
					ВремТЗ = Новый ТаблицаЗначений;
					ВремТЗ.Колонки.Добавить("Представление");
					ВремТЗ.Колонки.Добавить("сч");
					
					Для Каждого Стр Из ПредыдущееЗначение Цикл
						НоваяСтрока = ВремТЗ.Добавить();
						НоваяСтрока.Представление = СокрЛП(Стр.Представление);
						НоваяСтрока.сч = 1;
					КонецЦикла;     
					
					Для Каждого Стр Из ТекущееЗначение Цикл
						НоваяСтрока = ВремТЗ.Добавить();
						НоваяСтрока.Представление = СокрЛП(Стр.Представление);
						НоваяСтрока.сч = -1;
					КонецЦикла;     
					
					ВремТЗ.Свернуть("Представление","сч");
					
                    Для Каждого Стр Из ВремТЗ Цикл
						Если НЕ (Стр.сч = 0) Тогда
							ЕстьРасхождения = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				Иначе
					ЕстьРасхождения = Истина;
				КонецЕсли;
			Иначе
				Если ТипЗначТек = Тип("ТаблицаЗначений") Тогда
					ЕстьРасхождения = Истина;
				Иначе
					Если НЕ (ПредыдущееЗначение = ТекущееЗначение) Тогда
						ЕстьРасхождения = Истина;
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			ЕстьРасхождения = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьРасхождения;
	
КонецФункции

Функция Фокус_Наблюдение_ВозниклоНегативноеЗначение(ТекущееЗначение,ПредыдущееЗначение,НегативноеЗначение)
    
	НегативноеЗначение = СокрЛП(НегативноеЗначение);
	
	Если НЕ ЗначениеЗаполнено(НегативноеЗначение) Тогда
		Если НЕ ЗначениеЗаполнено(ПредыдущееЗначение) Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		
		Если НегативноеЗначение = "Да" Тогда  
			Если СокрЛП(ТекущееЗначение) = "Да" Тогда
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли НегативноеЗначение = "НетДанных" Тогда
			Если НЕ ЗначениеЗаполнено(ТекущееЗначение) Тогда
				Возврат Истина;    
			Иначе
				Возврат Ложь;
			КонецЕсли;
		Иначе
			// есть разделение на ключ;значение	
			
			НайденныйРазделитель = Найти(НегативноеЗначение,";");
			Если НайденныйРазделитель > 0 Тогда
				
				Ключ = Лев(НегативноеЗначение,НайденныйРазделитель - 1);
				Значение = Сред(НегативноеЗначение,НайденныйРазделитель + 1);
				
				Если Ключ = "КоличествоБольше" Тогда
					Если ТипЗнч(ТекущееЗначение) = Тип("ТаблицаЗначений") Тогда
						Если ТекущееЗначение.Количество()>Число(Значение) Тогда
							Возврат Истина;       
						Иначе
							Возврат Ложь;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли Ключ = "Больше" Тогда
					Если ЗначениеЗаполнено(ТекущееЗначение) И Число(ТекущееЗначение)>Число(Значение) Тогда
						Возврат Истина;  
					Иначе
						Возврат Ложь;
					КонецЕсли;
				ИначеЕсли Ключ = "Меньше" Тогда
					Если ЗначениеЗаполнено(ТекущееЗначение) И Число(ТекущееЗначение)<Число(Значение) Тогда
						Возврат Истина;
					Иначе
						Возврат Ложь;
					КонецЕсли;
				Иначе
					Сообщить("!!! Не найдено правило для негативного значения: "+НегативноеЗначение,"!!");
				КонецЕсли;
				
			Иначе
				Сообщить("!!! Не найдено правило для негативного значения: "+НегативноеЗначение,"!!");
			КонецЕсли;                    
				
		КонецЕсли;
		
	КонецЕсли;
	       
	//Да
	//КоличествоБольше;0
	//Больше;100000
	//НетДанных
	//Меньше;1000000
	
	Возврат Истина;
	
КонецФункции

Функция Фокус_ПолучитьНачалоПериодаПоСрокуСравнения(ТекущаяДатаВремя,СрокСравненияМесяцев)
	
	Возврат ДобавитьМесяц(ТекущаяДатаВремя,Число("-"+СокрЛП(СрокСравненияМесяцев)));
	
КонецФункции

Функция Фокус_НайтиМаркерПоСрокуСравнения(Знач ИНН, ТекущаяДатаВремя, Знач ИмяМаркера, Знач ИмяНабораМаркеров = "", СрокСравнения,НайденныйЭлемент = "")
	
	ИНН					= СокрЛП(ИНН);
	ИмяМаркера			= СокрЛП(ИмяМаркера);
	ИмяНабораМаркеров	= СокрЛП(ИмяНабораМаркеров);
	                
	НачалоПериода = Фокус_ПолучитьНачалоПериодаПоСрокуСравнения(ТекущаяДатаВремя,СрокСравнения);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Фокус_Маркеры.Ссылка
	               |ИЗ
	               |	Справочник.Фокус_Маркеры КАК Фокус_Маркеры
	               |ГДЕ
	               |	Фокус_Маркеры.ИмяНабораМаркеров = &ИмяНабораМаркеров
	               |	И Фокус_Маркеры.ИмяМаркера = &ИмяМаркера
	               |	И Фокус_Маркеры.ИНН = &ИНН
	               |	И Фокус_Маркеры.ДатаВремя МЕЖДУ &НачалоПериода И &КонецПериода
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Фокус_Маркеры.ДатаВремя УБЫВ";
				   
	Запрос.УстановитьПараметр("ИНН",				ИНН);
	Запрос.УстановитьПараметр("ИмяМаркера",			ИмяМаркера);
	Запрос.УстановитьПараметр("ИмяНабораМаркеров",	ИмяНабораМаркеров);
	Запрос.УстановитьПараметр("НачалоПериода",		НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",		ТекущаяДатаВремя);
	
	НайденныйЭлемент = Неопределено;
	
    РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		НайденныйЭлемент = Выборка.Ссылка;
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;	
	
КонецФункции

Процедура Фокус_Наблюдение_ОпределитьСработавшиеМаркеры(ТекЭлемент)
	
	ПредыдущийОтветСервера = Фокус_ХранениеДанных_ПолучитьПоследнийРезультат(ТекЭлемент.ИНН,ТекЭлемент.ИмяМетода,ТекЭлемент.ДатаВремя);
	Если НЕ ПредыдущийОтветСервера = Неопределено Тогда
		ПредыдущиеДанныеСервера = ПрочитатьJSONВручную(ПредыдущийОтветСервера.Значение);
		Если НЕ Фокус_ПолучениеДанных_ВернулисьДанные(ПредыдущиеДанныеСервера) Тогда
			ПредыдущиеДанныеСервера = Неопределено;
		Иначе
			ПредыдущиеДанныеСервера = ПредыдущиеДанныеСервера[0];
		КонецЕсли;
	КонецЕсли;
	
	ТекущиеДанные = ПрочитатьJSONВручную(ТекЭлемент.Значение);
	Если НЕ Фокус_ПолучениеДанных_ВернулисьДанные(ТекущиеДанные) Тогда
        Возврат;
	Иначе
		ТекущиеДанные = ТекущиеДанные[0];
	КонецЕсли;
	
	СписокПараметров = Фокус_Наблюдение_ПолучитьНаблюдаемыеПараметры(ТекЭлемент.ИмяМетода);	
	
	Для Каждого ТекПараметр Из СписокПараметров Цикл
		
		МаркерСработал = Ложь;
		
		Если ТекПараметр.ИмяМетода = "Набор" Тогда
			ЭтоНаборМаркеров = Истина;
		Иначе
			ЭтоНаборМаркеров = Ложь;
		КонецЕсли;
		
		ПредыдущийЭлемент	= ПредыдущийОтветСервера;
		ПредыдущиеДанные	= ПредыдущиеДанныеСервера;
		
		СписокДопМаркеров = Неопределено;
		
		// 1. Проверяем, сработал маркер или нет
		
		Если НЕ ЭтоНаборМаркеров Тогда
			
			Если ЗначениеЗаполнено(ТекПараметр.СрокСравнения) Тогда
				
				Если Фокус_НайтиМаркерПоСрокуСравнения(ТекЭлемент.ИНН,ТекЭлемент.ДатаВремя,ТекПараметр.Имя,,ТекПараметр.СрокСравнения) Тогда
					Продолжить; // уже всплывал данный маркер
				КонецЕсли;
				
				НачалоПериода = Фокус_ПолучитьНачалоПериодаПоСрокуСравнения(ТекЭлемент.ДатаВремя,ТекПараметр.СрокСравнения);
				
				ПредыдущийЭлемент	= Фокус_ХранениеДанных_ПолучитьПоследнийРезультат(ТекЭлемент.ИНН,ТекЭлемент.ИмяМетода,ТекЭлемент.ДатаВремя,НачалоПериода);
				Если ЗначениеЗаполнено(ПредыдущийЭлемент) Тогда
					ПредыдущиеДанные = ПрочитатьJSONВручную(ПредыдущийЭлемент.Значение);
					Если НЕ Фокус_ПолучениеДанных_ВернулисьДанные(ПредыдущиеДанные) Тогда
						Возврат;
					Иначе
						ПредыдущиеДанные = ПредыдущиеДанные[0];
					КонецЕсли;
				Иначе
					ПредыдущиеДанные = "";
				КонецЕсли;
				
			КонецЕсли;	
			
			ТекущееЗначение		= Фокус_ПолучитьЗначениеПоляДанных(ТекущиеДанные,		ТекПараметр.ИмяПоля);
			ПредыдущееЗначение	= Фокус_ПолучитьЗначениеПоляДанных(ПредыдущиеДанные,	ТекПараметр.ИмяПоля);
			
			ТекущееЗначение		= Фокус_ПолучитьПредставлениеДанных(ТекущееЗначение,	ТекПараметр.ВидПредставления);
			ПредыдущееЗначение	= Фокус_ПолучитьПредставлениеДанных(ПредыдущееЗначение,	ТекПараметр.ВидПредставления);
			
			Если Фокус_Наблюдение_ДанныеОтличаются(ТекущееЗначение,ПредыдущееЗначение)=1 Тогда
				Если Фокус_Наблюдение_ВозниклоНегативноеЗначение(ТекущееЗначение,ПредыдущееЗначение,ТекПараметр.НегативноеЗначение) = 1 Тогда
					
					//Сообщить("Сработал маркер "+ТекЭлемент.Код+" "+ТекПараметр.Имя+" "+ТекущееЗначение+" негативное: "+ТекПараметр.НегативноеЗначение);
					
					МаркерСработал = Истина;
					
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			ИмяНабораМаркеров = ТекПараметр.Имя;
			
			Если Фокус_НайтиМаркерПоСрокуСравнения(ТекЭлемент.ИНН,ТекЭлемент.ДатаВремя,ИмяНабораМаркеров,,ТекПараметр.СрокСравнения) = 1 Тогда
				Продолжить; // уже всплывал данный маркер
			КонецЕсли;                                                                                       
			
			// получаем таблицу маркеров
			СписокДопМаркеров = Фокус_Наблюдение_РазобратьНастройкуНабораМаркеров(ТекПараметр.ИмяПоля);  
			
			СписокДопМаркеров.Колонки.Добавить("Нашли");
			СписокДопМаркеров.Колонки.Добавить("Ссылка");
			
			Для Каждого Стр Из СписокДопМаркеров Цикл
				
				ТекСсылка = "";
				Если Фокус_НайтиМаркерПоСрокуСравнения(ТекЭлемент.ИНН,ТекЭлемент.ДатаВремя,Стр.ИмяМаркера,ИмяНабораМаркеров,ТекПараметр.СрокСравнения,ТекСсылка) Тогда
					Стр.Ссылка = ТекСсылка;
					Стр.Нашли = 1;
				Иначе
					Стр.Нашли = 0;
				КонецЕсли;
			КонецЦикла;
			
			ВремТЗ = СписокДопМаркеров.Скопировать();
			ВремТЗ.Свернуть("ИДГруппы","Нашли"); // для обработки условия ИЛИ в [] 
			
			МаркерСработал = Истина;
			Для Каждого Стр Из ВремТЗ Цикл
				Если Стр.Нашли = 0 Тогда
					МаркерСработал = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;  
			
		КонецЕсли;	
		
		// 2. записываем сработавший маркер
		
		Если МаркерСработал Тогда
			
			НовыйЭлемент = Справочники.Фокус_Маркеры.СоздатьЭлемент();
			НовыйЭлемент.ДатаВремя		= ТекЭлемент.ДатаВремя;
			НовыйЭлемент.ИНН			= ТекЭлемент.ИНН;
			НовыйЭлемент.ИмяМаркера		= ТекПараметр.Имя;
			НовыйЭлемент.НовоеЗначение	= ТекЭлемент;
			НовыйЭлемент.СтароеЗначение	= ПредыдущийЭлемент;
			
			Если ЗначениеЗаполнено(ТекПараметр.ИмяНабораМаркеров) Тогда
				НовыйЭлемент.Значимость = 0;
				НовыйЭлемент.ИмяНабораМаркеров = ТекПараметр.ИмяНабораМаркеров;
			Иначе
				НовыйЭлемент.Значимость = ТекПараметр.Значимость;
			КонецЕсли;
			
			НовыйЭлемент.ОбменДанными.Загрузка = Истина;
			
			НовыйЭлемент.Записать();
			
			Если ЭтоНаборМаркеров Тогда
				Для Каждого Эл Из СписокДопМаркеров Цикл
					Если ЗначениеЗаполнено(Эл.Ссылка) Тогда
						МаркерОбъект = Эл.Ссылка.ПолучитьОбъект();
						МаркерОбъект.НаборМаркеров = НовыйЭлемент.Ссылка;
						МаркерОбъект.Записать();
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура Фокус_Наблюдение_СоздатьМаркерыПоСтарому() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Фокус_ИсторияРезультатов.Ссылка
	               |ИЗ
	               |	Справочник.Фокус_ИсторияРезультатов КАК Фокус_ИсторияРезультатов
	               |ГДЕ
	               |	НЕ Фокус_ИсторияРезультатов.Обработан
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Фокус_ИсторияРезультатов.ДатаВремя";
				   
	сч = 0;			   
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		сч = сч+1;
		#Если Клиент Тогда
		Состояние("Ищем сработавшие маркеры: "+сч);
		#КонецЕсли	
		
		Фокус_Наблюдение_ОпределитьСработавшиеМаркеры(Выборка.Ссылка);

		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		СпрОб.Обработан = Истина;
		СпрОб.ОбменДанными.Загрузка = Истина;
		СпрОб.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура Фокус_Наблюдение_СоздатьМаркеры() Экспорт
	
	// определим список последних маркеров
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Фокус_Маркеры.ID КАК ID,
	               |	МАКСИМУМ(Фокус_Маркеры.ДатаСоздания) КАК ДатаСоздания,
	               |	Фокус_Маркеры.ИНН КАК ИНН
	               |ПОМЕСТИТЬ ВремМаксМаркеры
	               |ИЗ
	               |	Справочник.Фокус_ИзмененияМаркеров КАК Фокус_Маркеры
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Фокус_Маркеры.ИНН,
	               |	Фокус_Маркеры.ID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID,
	               |	ДатаСоздания,
	               |	ИНН
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Фокус_Маркеры.Ссылка,
	               |	Фокус_Маркеры.ID,
	               |	Фокус_Маркеры.ДатаСоздания,
	               |	Фокус_Маркеры.ИНН,
	               |	Фокус_Маркеры.Статус,
	               |	Фокус_Маркеры.ВидМаркера
	               |ИЗ
	               |	ВремМаксМаркеры КАК ВремМаксМаркеры
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Фокус_ИзмененияМаркеров КАК Фокус_Маркеры
	               |		ПО ВремМаксМаркеры.ID = Фокус_Маркеры.ID
	               |			И ВремМаксМаркеры.ДатаСоздания = Фокус_Маркеры.ДатаСоздания
	               |			И ВремМаксМаркеры.ИНН = Фокус_Маркеры.ИНН
	               |ГДЕ
	               |	НЕ Фокус_Маркеры.ВидМаркера = ""Разовый""";
				   
	ТаблицаПоследнихМаркеров = Запрос.Выполнить().Выгрузить();			   
	
	ТаблицаПоследнихМаркеров.Колонки.Добавить("Обработан");
	ТаблицаПоследнихМаркеров.ЗаполнитьЗначения(Ложь,"Обработан");
	
	СписокИНН = Фокус_Наблюдение_ПолучитьСписокИНН();
	
	сч = 0;
	РазмерСписка = СписокИНН.Количество();
	
	Для Каждого Стр Из СписокИНН Цикл
		
		сч = сч+1;
		#Если Клиент Тогда
		Состояние("Вычисляем маркеры по контрагентам: "+сч+" из "+РазмерСписка);
		#КонецЕсли	
	
		ТекущиеМаркеры = Фокус_Маркеры_ПолучитьСработавшие(Стр.ИНН);
		
		Для Каждого СтрМ ИЗ ТекущиеМаркеры Цикл
			
			СоздатьМаркер = Ложь;

			НайденныеМаркеры = ТаблицаПоследнихМаркеров.НайтиСтроки(Новый Структура("ID,ИНН",СтрМ.ID,Стр.ИНН));
			Если НайденныеМаркеры.Количество()>0 Тогда
				Если НайденныеМаркеры[0].Статус = "НеАктивный" Тогда
					СоздатьМаркер = Истина;
				КонецЕсли;
				НайденныеМаркеры[0].Обработан = Истина;
			Иначе
				СоздатьМаркер = Истина;
			КонецЕсли;
			
			Если СоздатьМаркер Тогда
				НовыйМаркер = Справочники.Фокус_ИзмененияМаркеров.СоздатьЭлемент();
				НовыйМаркер.ID = СтрМ.ID;
				НовыйМаркер.ДатаСоздания = ТекущаяДата();
				НовыйМаркер.ИНН = Стр.ИНН;
				НовыйМаркер.Статус = "Активный";
				НовыйМаркер.Расшифровка = СтрМ.Расшифровка;
				НовыйМаркер.ВидМаркера = СтрМ.ВидМаркера;
				НовыйМаркер.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
		// выключим не сработавшие маркеры
		
		НайденныеМаркеры = ТаблицаПоследнихМаркеров.НайтиСтроки(Новый Структура("ИНН,Обработан",Стр.ИНН,Ложь));
		Для Каждого СтрМ Из НайденныеМаркеры Цикл
			Если СтрМ.Статус = "Активный" Тогда
				Если НЕ СтрМ.ВидМаркера = "Разовый" Тогда
					НовыйМаркер = Справочники.Фокус_ИзмененияМаркеров.СоздатьЭлемент();
					НовыйМаркер.ID = СтрМ.ID;
					НовыйМаркер.ДатаСоздания = ТекущаяДата();
					НовыйМаркер.ИНН = Стр.ИНН;
					НовыйМаркер.Статус = "НеАктивный";
					НовыйМаркер.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
			
	КонецЦикла;
	
	// пометим последние данные истории как обработанной
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Фокус_ИсторияРезультатов.Ссылка
	               |ИЗ
	               |	Справочник.Фокус_ИсторияРезультатов КАК Фокус_ИсторияРезультатов
	               |ГДЕ
	               |	НЕ Фокус_ИсторияРезультатов.Обработан";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекИстория = Выборка.Ссылка.ПолучитьОбъект();
		ТекИстория.Обработан = Истина;
		ТекИстория.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура Фокус_Наблюдение_ВыполнитьДействия() Экспорт
	
	СписокДействий = Фокус_ХранениеДанных_ПолучитьСписокЭлементовСправочника("Действия");
	
	Для Каждого Стр ИЗ СписокДействий Цикл
		Если Стр.Включен Тогда
			Действие = Фокус_ХранениеДанных_ПолучитьЭлементСправочника("Действия",Стр.Ссылка);
			
			СписокМаркеров = ?(Действие.ЛюбойМаркер, Неопределено, Действие.СписокМаркеров);
			СписокКонтрагентов = ?(Действие.ЛюбойКонтрагент, Неопределено, Действие.СписокКонтрагентов);
			
			Выполнить(Действие.ВыполняемыйКод);
			
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Фокус_ИзмененияМаркеров.Ссылка
	               |ИЗ
	               |	Справочник.Фокус_ИзмененияМаркеров КАК Фокус_ИзмененияМаркеров
	               |ГДЕ
	               |	НЕ Фокус_ИзмененияМаркеров.Обработан";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекИстория = Выборка.Ссылка.ПолучитьОбъект();
		ТекИстория.Обработан = Истина;
		ТекИстория.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция Фокус_Наблюдение_ПолучитьСписокШаблонов() Экспорт
	//Список готовых шаблонов
	СтрокаШаблона="";
	СтрокаШаблона="ЗаголовокТекстаПисьма - первая строчка в письме
	|$КоличествоКонтрагентов - количество контрагентов, по которым проверялись маркеры
	|$ТекущаяДата - сегодняшняя дата в формате ДД.ММ.ГГГГ";
	
	Возврат СтрокаШаблона;
КонецФункции

Функция Фокус_Наблюдение_ЗаполнитьШаблоны(ВхСтрока,СписокМаркеров,СписокКонтрагентов)
	Рез=ВхСтрока;
	//$КоличествоКонтрагентов
	Если СписокКонтрагентов=Неопределено Тогда
		КоличествоКонтрагентов=Фокус_Наблюдение_ПолучитьСписокИНН().Количество();
	Иначе
		КоличествоКонтрагентов=СписокКонтрагентов.Количество();
	КонецЕсли;
	Рез=СтрЗаменить(Рез,"$КоличествоКонтрагентов",Формат(КоличествоКонтрагентов,"ЧДЦ=0; ЧН="));
	
	//$ТекущаяДата
	Рез=СтрЗаменить(Рез,"$ТекущаяДата",Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy"));

	
	Возврат Рез;		
КонецФункции

Процедура Фокус_УведомитьОбИзмененияхПоПочте(Адрес,СписокМаркеров,СписокКонтрагентов,ЗаголовокТелаПисьма="") Экспорт
	
	СписокСработавшихМаркеров = Новый ТаблицаЗначений;
	Таб = Фокус_ВыводДанных_ПоказатьСработавшиеМаркеры(,, СписокМаркеров, СписокКонтрагентов, Истина, СписокСработавшихМаркеров,ЗаголовокТелаПисьма);
	
	Если СписокСработавшихМаркеров.Количество()>0 Тогда
		
		ТабКрасных		= СписокСработавшихМаркеров.Скопировать(Новый Структура("Категория,Статус","Красный","Активный"));
		ТабЖелтых		= СписокСработавшихМаркеров.Скопировать(Новый Структура("Категория,Статус","Желтый","Активный"));
		ТабЗеленых		= СписокСработавшихМаркеров.Скопировать(Новый Структура("Категория,Статус","Зеленый","Активный"));
		ТабНеактивных	= СписокСработавшихМаркеров.Скопировать(Новый Структура("Статус","НеАктивный"));
		
		ТабКрасных.Свернуть("Контрагент");
		ТабЖелтых.Свернуть("Контрагент");
		ТабЗеленых.Свернуть("Контрагент");
		ТабНеактивных.Свернуть("Контрагент");
		Если ЗначениеЗаполнено(ЗаголовокТелаПисьма) Тогда
			ТелоПисьма=Фокус_Наблюдение_ЗаполнитьШаблоны(ЗаголовокТелаПисьма,СписокМаркеров,СписокКонтрагентов)+Символы.ПС;
		Иначе
			ТелоПисьма = "Список изменений по организациям, за которыми вы ведете наблюдение."+Символы.ПС;
		КонецЕсли;
		
		Если ТабКрасных.Количество()>0 Тогда
			ТелоПисьма = ТелоПисьма + Символы.ПС + " Новые критичные изменения - "+ТабКрасных.Количество()+" компании";
		КонецЕсли;
		Если ТабЖелтых.Количество()>0 Тогда
			ТелоПисьма = ТелоПисьма + Символы.ПС + " Новые рисковые изменения - "+ТабЖелтых.Количество()+" компании";
		КонецЕсли;
		Если ТабЗеленых.Количество()>0 Тогда
			ТелоПисьма = ТелоПисьма + Символы.ПС + " Новые факты активной деятельности - "+ТабЗеленых.Количество()+" компании";
		КонецЕсли;
		Если ТабНеактивных.Количество()>0 Тогда
			ТелоПисьма = ТелоПисьма + Символы.ПС + Символы.ПС + " Устаревшие маркеры - "+ТабНеактивных.Количество()+" компании";
		КонецЕсли;
		
		ТелоПисьма = ТелоПисьма + Символы.ПС + "
		|С более детальной информацией можно ознакомиться в отчете из вложения.
		|
		|---------------------
		|С уважением,
		|Ваш сервис Контур.Фокус";
		
		ИмяВложения = "Проверка контрагентов.pdf";
		ПолноеИмяВложения = КаталогВременныхФайлов()+"\" + ИмяВложения;  
		Таб.Записать(ПолноеИмяВложения,"PDF");  
		
		ПараметрыПисьма = Новый Структура;
		ПараметрыПисьма.Вставить("Тема",		"Контур.Фокус: результаты проверки контрагентов");
		ПараметрыПисьма.Вставить("Получатель",	Адрес);
		ПараметрыПисьма.Вставить("Тело",		ТелоПисьма);
		ПараметрыПисьма.Вставить("Вложение",	Новый Структура("ПутьКФайлу,ИмяФайла",ПолноеИмяВложения,ИмяВложения));
		
		Фокус_ОтправитьEmail(ПараметрыПисьма);
		
	КонецЕсли;
	
КонецПроцедуры

//-------------------------------------------------------
//
//	ВЫВОД ДАННЫХ
// 

// Основные функции вывода данных

Функция Фокус_ВывестиДанные_ЮрФизЛицо(Параметры) Экспорт
	
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если НЕ Параметры.Свойство("Реквизиты") Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если Параметры.Реквизиты = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Инициализируем параметры вывода
	
	Таб = Новый ТабличныйДокумент;
	
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("ТабличныйДокумент",Таб);
	ПараметрыВывода.Вставить("Области",Новый Структура());
	
	Макет = ПолучитьМакет("Макет");
	Для Каждого Эл ИЗ Макет.Области Цикл
		ПараметрыВывода.Области.Вставить(Эл.Имя,Макет.ПолучитьОбласть(Эл.Имя));
	КонецЦикла;
	
	// Инициализируем источники данных
	ДанныеРеквизиты		= Параметры.Реквизиты;
	ДанныеДопРеквизиты	= Параметры.ДопРеквизиты;
	ДанныеКонтакты		= Параметры.Контакты;
	ДанныеАналитика		= Параметры.Аналитика;
	ДанныеМаркеры		= Параметры.Маркеры;
	ДанныеБухОтчетности	= Параметры.БухОтчетность;
	ДанныеЛицензии		= Параметры.Лицензии;
	
	// Вывод данных по блокам
	
	Фокус_ВывестиДанные_ЮрФизЛицо_Заголовок(ПараметрыВывода,ДанныеРеквизиты);
	
	Фокус_ВывестиДанные_ЮрФизЛицо_Маркеры(ПараметрыВывода,ДанныеМаркеры);
	
	Фокус_ВывестиДанные_ЮрФизЛицо_Ссылки(ПараметрыВывода,ДанныеРеквизиты,ДанныеДопРеквизиты,ДанныеБухОтчетности);
	
	Фокус_ВывестиДанные_ЮрФизЛицо_ВидыДеятельности(ПараметрыВывода,ДанныеДопРеквизиты);
	
	Фокус_ВывестиДанные_ЮрФизЛицо_СведенияОРегистрациях(ПараметрыВывода,ДанныеРеквизиты,ДанныеДопРеквизиты);
	
	Фокус_ВывестиДанные_ЮрФизЛицо_АдресРегистрации(ПараметрыВывода,ДанныеРеквизиты,ДанныеДопРеквизиты);
	
	Фокус_ВывестиДанные_ЮрФизЛицо_Телефоны(ПараметрыВывода,ДанныеКонтакты);
	
	Фокус_ВывестиДанные_ЮрФизЛицо_Руководители(ПараметрыВывода,ДанныеРеквизиты);
	
	Фокус_ВывестиДанные_ЮрФизЛицо_Учредители(ПараметрыВывода,ДанныеДопРеквизиты);
	
	Фокус_ВывестиДанные_ЮрФизЛицо_ПредшественникиПреемники(ПараметрыВывода,ДанныеДопРеквизиты);

	Фокус_ВывестиДанные_ЮрФизЛицо_Филиалы(ПараметрыВывода,ДанныеРеквизиты);
	
	Фокус_ВывестиДанные_ЮрФизЛицо_БухОтчетность(ПараметрыВывода,ДанныеБухОтчетности);
	
	Фокус_ВывестиДанные_ЮрФизЛицо_Лицензии(ПараметрыВывода,ДанныеЛицензии);
	
	Фокус_ВывестиДанные_ЮрФизЛицо_Аналитика(ПараметрыВывода,ДанныеАналитика);
	
	Возврат Таб;
	
КонецФункции

Функция Фокус_ВывестиДанные_СтатистикаКлюча(ДанныеСтатистики) Экспорт
	
	Таб = Новый ТабличныйДокумент();
	
	Если НЕ ДанныеСтатистики = Неопределено Тогда
		
		Макет = ПолучитьМакет("Статистика");
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		
		Таб.Вывести(ОбластьШапка);
		
		Для Каждого Стр Из ДанныеСтатистики Цикл
			
			ОбластьСтрока.Параметры.Заполнить(Стр);
			
			Если ЗначениеЗаполнено(Стр.ДатаНачала) Тогда
				ОбластьСтрока.Параметры.ДатаНачала = Фокус_ПолучитьПредставлениеДанных_Дата(Стр.ДатаНачала);
			КонецЕсли;
			Если ЗначениеЗаполнено(Стр.ДатаОкончания) Тогда
				ОбластьСтрока.Параметры.ДатаОкончания = Фокус_ПолучитьПредставлениеДанных_Дата(Стр.ДатаОкончания);
			КонецЕсли;
			
			Таб.Вывести(ОбластьСтрока);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Таб;
	
КонецФункции


Функция Фокус_ВывестиДанные_ЗаполнитьЭлементФормыИнформациейОСтатистике(ЗНАЧ ДанныеСтатистики,ДатаПроверки) Экспорт
	СтрВозврат=Новый Структура("Использовано,ЗначениеОграничения,ДатаОкончания,ЦветРаскраски");
	Если Не ЗначениеЗаполнено(ДанныеСтатистики) Тогда Возврат Неопределено КонецЕсли;
	СтрокаЛиц=ДанныеСтатистики.найти("Лицензии");
	Если СтрокаЛиц<>Неопределено Тогда
		ДанныеСтатистики.Удалить(СтрокаЛиц); //у лицензий нет ограничений
	КонецЕсли;
	
	//Предварительная обработка
	ДанныеСтатистики.Колонки.Добавить("ДатаНачала_Дата",	Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеСтатистики.Колонки.Добавить("ДатаОкончания_Дата",	Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	Для Каждого СтрокаТЧ Из ДанныеСтатистики Цикл
		СтрокаТЧ.ДатаНачала_Дата	= Фокус_Дата(СтрокаТЧ.ДатаНачала);
		СтрокаТЧ.ДатаОкончания_Дата	= Фокус_Дата(СтрокаТЧ.ДатаОкончания);
	КонецЦикла;
	ДанныеСтатистики.Колонки.Удалить("ДатаНачала");
	ДанныеСтатистики.Колонки.Удалить("ДатаОкончания");
	ДанныеСтатистики.Колонки.ДатаНачала_Дата.Имя	= "ДатаНачала";
	ДанныеСтатистики.Колонки.ДатаОкончания_Дата.Имя	= "ДатаОкончания";
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеСтатистики.Имя,
		|	ДанныеСтатистики.Использовано,
		|	ДанныеСтатистики.ЗначениеОграничения,
		|	ДанныеСтатистики.ДатаНачала,
		|	ДанныеСтатистики.ДатаОкончания
		|ПОМЕСТИТЬ ВТ_ДанныеСтатистики
		|ИЗ
		|	&ДанныеСтатистики КАК ДанныеСтатистики
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВТ_ДанныеСтатистики.Использовано) КАК Использовано,
		|	МАКСИМУМ(ВТ_ДанныеСтатистики.ЗначениеОграничения) КАК ЗначениеОграничения,
		|	МИНИМУМ(ВТ_ДанныеСтатистики.ДатаОкончания) КАК ДатаОкончания
		|ИЗ
		|	ВТ_ДанныеСтатистики КАК ВТ_ДанныеСтатистики";
	
	Запрос.УстановитьПараметр("ТекущаяДата",		ДатаПроверки);
	Запрос.УстановитьПараметр("ДанныеСтатистики",	ДанныеСтатистики);
	
	РезультатЗапроса = Запрос.Выполнить();
	Таб=РезультатЗапроса.Выгрузить();
	
	СтрВозврат=Новый Структура("Использовано,ЗначениеОграничения,ДатаОкончания,ЦветРаскраски");
	ЗаполнитьЗначенияСвойств(СтрВозврат,Таб[0]);
	
	Если СтрВозврат.ЗначениеОграничения = 0 Тогда
		ПроцентИспользования = 0;
	Иначе 	
		ПроцентИспользования=(100*(СтрВозврат.ЗначениеОграничения-СтрВозврат.Использовано)/СтрВозврат.ЗначениеОграничения);
	КонецЕсли;
	
	Если ПроцентИспользования<5 Тогда
		ИндексРаскраски=1;
	ИначеЕсли ПроцентИспользования<10 Тогда
		ИндексРаскраски=2;
	ИначеЕсли ПроцентИспользования<20 Тогда
		ИндексРаскраски=3;
	Иначе
		ИндексРаскраски=4;
	КонецЕсли;
	
	ДвеНедели=(ДатаПроверки+2*7*24*60*60)>СтрВозврат.ДатаОкончания;
	ОдинМесяц=ДобавитьМесяц(ДатаПроверки,1)>СтрВозврат.ДатаОкончания;
	ДваМесяца=ДобавитьМесяц(ДатаПроверки,2)>СтрВозврат.ДатаОкончания;
	
	
	Если ДвеНедели Тогда
		ИндексРаскраски=Мин(ИндексРаскраски,1);
	ИначеЕсли ОдинМесяц Тогда
		ИндексРаскраски=Мин(ИндексРаскраски,2);
	ИначеЕсли ДваМесяца Тогда
		ИндексРаскраски=Мин(ИндексРаскраски,3);
	Иначе
		ИндексРаскраски=Мин(ИндексРаскраски,4);
	КонецЕсли;
	
	Если ИндексРаскраски=1 Тогда
		СтрВозврат.ЦветРаскраски=WebЦвета.Красный;
	ИначеЕсли ИндексРаскраски=2 Тогда
		СтрВозврат.ЦветРаскраски=WebЦвета.Оранжевый;
	ИначеЕсли ИндексРаскраски=3 Тогда
		СтрВозврат.ЦветРаскраски=WebЦвета.Коралловый;
	ИначеЕсли ИндексРаскраски=4 Тогда
		СтрВозврат.ЦветРаскраски=WebЦвета.Черный;
	КонецЕсли;
	
	Возврат СтрВозврат;
КонецФункции

// Блоки выводимых данных юр.\физ лица

Процедура Фокус_ВывестиДанные_ЮрФизЛицо_Заголовок(ПараметрыВывода,ДанныеРеквизиты)
	
	БлокДанных = Фокус_ВыводДанных_БлокДанных_Инициализировать();
	БлокДанных.Отступ = Ложь;
	
	Если ДанныеРеквизиты.Свойство("UL") Тогда
		
		Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, ДанныеРеквизиты, "Заголовок",,"UL.legalName.short");
		Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, ДанныеРеквизиты, "ТекстНейтральный",,"UL.legalName.full");
		
		ИмяОбласти = "ТекстНейтральный";
		ПредставлениеСтатуса = Фокус_ПолучитьПредставлениеДанных_Статус(ДанныеРеквизиты.UL.status,ИмяОбласти);
		
		Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, ДанныеРеквизиты, ИмяОбласти,ПредставлениеСтатуса);
		
	ИначеЕсли ДанныеРеквизиты.Свойство("IP") Тогда
		
		Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, ДанныеРеквизиты, "Заголовок",,"IP.fio");
		
		ИмяОбласти = "ТекстНейтральный";
		ПредставлениеСтатуса = Фокус_ПолучитьПредставлениеДанных_Статус(ДанныеРеквизиты.IP.status,ИмяОбласти);
		
		Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, , ИмяОбласти, ПредставлениеСтатуса);
		
	КонецЕсли;	
	
	Фокус_ВыводДанных_БлокДанных_Вывести(БлокДанных,ПараметрыВывода);
		
КонецПроцедуры

Процедура Фокус_ВывестиДанные_ЮрФизЛицо_Маркеры(ПараметрыВывода,ДанныеМаркеры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеМаркеры) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеМаркеры.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	БлокДанных = Фокус_ВыводДанных_БлокДанных_Инициализировать();
	
	БлокДанных.ЗаголовокГрупировкиРавенПервомуЗначению = Истина;
	БлокДанных.ГруппироватьЗначения = Истина;
	
	Для Каждого Стр Из ДанныеМаркеры Цикл
		
		Если Стр.Категория = "Красный" Тогда
			ИмяОбласти = "МаркерКрасный";
		ИначеЕсли Стр.Категория = "Желтый" Тогда
			ИмяОбласти = "МаркерЖелтый";
		ИначеЕсли Стр.Категория = "Зеленый" Тогда
			ИмяОбласти = "МаркерЗеленый";
		Иначе
			ИмяОбласти = "МаркерНейтральный";
		КонецЕсли;
		
		Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, , ИмяОбласти, Стр.Наименование,,,,);
		
		Если ЗначениеЗаполнено(Стр.Расшифровка) Тогда
			Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, , "МаркерРасшифровкаСтрока", Стр.Расшифровка,,,,);
		КонецЕсли;
		
		Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, , "ОтступНебольшой", Истина,,,,);
		
	КонецЦикла;
	
	Фокус_ВыводДанных_БлокДанных_Вывести(БлокДанных,ПараметрыВывода);
	
КонецПроцедуры

Процедура Фокус_ВывестиДанные_ЮрФизЛицо_Ссылки(ПараметрыВывода,ДанныеРеквизиты,ДанныеДопРеквизиты,ДанныеБухОтчетность)
	
	БлокДанных = Фокус_ВыводДанных_БлокДанных_Инициализировать();
	
	СтатусКрасный	= Фокус_ПолучитьЗначениеПоляДанных(ДанныеРеквизиты,"briefReport.summary.redStatements");
	СтатусЖелтый	= Фокус_ПолучитьЗначениеПоляДанных(ДанныеРеквизиты,"briefReport.summary.yellowStatements");
	СтатусЗеленый	= Фокус_ПолучитьЗначениеПоляДанных(ДанныеРеквизиты,"briefReport.summary.greenStatements");
	
	ИмяОбласти = "";
	
	Если СтатусКрасный = Истина Тогда
		ИмяОбласти = "ТекстПлохойСсылка";
	ИначеЕсли СтатусЖелтый = Истина Тогда
		ИмяОбласти = "ТекстОбратитьВниманиеСсылка";
	ИначеЕсли СтатусЗеленый = Истина Тогда
		ИмяОбласти = "ТекстХорошийСсылка";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяОбласти) Тогда
		Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, ДанныеРеквизиты, ИмяОбласти, "Результат экспресс-проверки",,,,"ЭкспрессПроверка");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДопРеквизиты) Тогда
		Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, , "ТекстНейтральныйСсылка", "Выписка из ЕГРЮЛ",,,,"ВыпискаЕГРЮЛ");
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ДанныеБухОтчетность) Тогда
		Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, , "ТекстНейтральныйСсылка", "Финансовый анализ",,,,"ФинАнализ");
	КонецЕсли;
	Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, , "ТекстНейтральныйСсылкаБезЗначка", "Карточка в Конутр.Фокус",,,,"КонтурФокус");
	
	Фокус_ВыводДанных_БлокДанных_Вывести(БлокДанных,ПараметрыВывода);
КонецПроцедуры

Процедура Фокус_ВывестиДанные_ЮрФизЛицо_ВидыДеятельности(ПараметрыВывода,ДанныеДопРеквизиты) 
	
	Если ДанныеДопРеквизиты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеДопРеквизиты.Свойство("UL") Тогда
		ИсточникДанных = ДанныеДопРеквизиты.UL;
	ИначеЕсли ДанныеДопРеквизиты.Свойство("IP") Тогда
		ИсточникДанных = ДанныеДопРеквизиты.IP;
	Иначе
		Возврат;
	КонецЕсли;
	
	ОсновнойВид = Фокус_ПолучитьЗначениеПоляДанных(ИсточникДанных, "activities.principalActivity");

	Если НЕ ЗначениеЗаполнено(ОсновнойВид) Тогда
		Возврат;
	КонецЕсли;
	
	Виды = Фокус_ПолучитьЗначениеПоляДанных(ИсточникДанных,"activities.complementaryActivities");
	
	БлокДанных = Фокус_ВыводДанных_БлокДанных_Инициализировать();
	
	БлокДанных.ГруппироватьЗначения = Истина;
	БлокДанных.Заголовок = Фокус_ПолучитьПредставлениеДанных_ВидДеятельности(ОсновнойВид);
	БлокДанных.ИмяОбластиЗаголовка = "ТекстНейтральный";
	БлокДанных.ВыводитьЗаголовокБезДанных = Истина;
	
	Если ТипЗнч(Виды) = Тип("Массив") Тогда
		Для Каждого Эл ИЗ Виды Цикл
			Значение = Фокус_ПолучитьПредставлениеДанных_ВидДеятельности(Эл);
			Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, , "ТекстНейтральный", Значение);
		КонецЦикла;
	КонецЕсли;
	
	Фокус_ВыводДанных_БлокДанных_Вывести(БлокДанных,ПараметрыВывода);
	
КонецПроцедуры

Процедура Фокус_ВывестиДанные_ЮрФизЛицо_СведенияОРегистрациях(ПараметрыВывода,ДанныеРеквизиты,ДанныеДопРеквизиты)
	
	Если ДанныеРеквизиты.Свойство("UL") Тогда
		Префикс = "UL";
	Иначе
		Префикс = "IP";
	КонецЕсли;
	
	// ИНН, КПП, ОГРН, ОКПО
	
	БлокДанных = Фокус_ВыводДанных_БлокДанных_Инициализировать();
	
	Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, ДанныеРеквизиты, 		"БлокИмяЗначение",,"inn",	"ИНН");
	Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, ДанныеРеквизиты, 		"БлокИмяЗначение",,Префикс + ".kpp", "КПП");
	Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, ДанныеРеквизиты, 		"БлокИмяЗначение",,"ogrn",	"ОГРН");
	
	Фокус_ВыводДанных_БлокДанных_Вывести(БлокДанных,ПараметрыВывода);
	
	//Коды
	
	БлокДанных = Фокус_ВыводДанных_БлокДанных_Инициализировать();
	БлокДанных.Заголовок = "Коды";
	БлокДанных.ГруппироватьЗначения = Истина;
	БлокДанных.ИмяОбластиЗаголовка = "БлокЗаголовокОтступов";
		
	Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, ДанныеДопРеквизиты, 	"БлокИмяЗначение",,Префикс + ".okpo","ОКПО");
	Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, ДанныеДопРеквизиты, 	"БлокИмяЗначение",,"IP.okato","ОКАТО");
	
	Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, ДанныеДопРеквизиты, 	"БлокИмяЗначение",,Префикс + ".pfrRegNumber",  "ПФР");
	Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, ДанныеДопРеквизиты, 	"БлокИмяЗначение",,Префикс + ".fssRegNumber",  "ФСС");
	Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, ДанныеДопРеквизиты, 	"БлокИмяЗначение",,Префикс + ".fomsRegNumber", "ФОМС");
	
	Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, ДанныеРеквизиты,	"БлокИмяЗначение",,Префикс + ".oktmo","ОКТМО");
	Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, ДанныеРеквизиты,	"БлокИмяЗначение",,Префикс + ".okfs","ОКФС");
	Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, ДанныеРеквизиты,	"БлокИмяЗначение",,Префикс + ".okopf","ОКОПФ");

	Фокус_ВыводДанных_БлокДанных_Вывести(БлокДанных,ПараметрыВывода);
	
	// Регистрация в налоговой
	
	БлокДанных = Фокус_ВыводДанных_БлокДанных_Инициализировать();
	
	КодНалоговогоОргана = Фокус_ПолучитьЗначениеПоляДанных(ДанныеДопРеквизиты,	Префикс + ".nalogRegBody.nalogCode");
	ДатаПостановкиНаУчет = Фокус_ПолучитьЗначениеПоляДанных(ДанныеДопРеквизиты,	Префикс + ".nalogRegBody.nalogRegDate");
	
	Если ЗначениеЗаполнено(КодНалоговогоОргана) Тогда
		Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, ,	"ТекстНейтральный","Код налогового органа: "+СокрЛП(КодНалоговогоОргана));
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаПостановкиНаУчет) Тогда
		ДатаПостановкиНаУчет = "Дата постановки на учет: "+Фокус_ПолучитьПредставлениеДанных_Дата(ДатаПостановкиНаУчет);
		Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, ,	"ТекстНейтральный",ДатаПостановкиНаУчет);
	КонецЕсли;	
	
	Фокус_ВыводДанных_БлокДанных_Вывести(БлокДанных,ПараметрыВывода);
	
	// Дата регистрации
	
	БлокДанных = Фокус_ВыводДанных_БлокДанных_Инициализировать();
	БлокДанных.Заголовок = "Дата образования";
	БлокДанных.ИмяОбластиЗаголовка = "БлокЗаголовокОтступов";
	
	ДатаРегистрации 	= Фокус_ПолучитьЗначениеПоляДанных(ДанныеРеквизиты, Префикс + ".registrationDate");
	Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, ,	"БлокТекстОтступ",Фокус_ПолучитьПредставлениеДанных_Дата(ДатаРегистрации));
	
	Фокус_ВыводДанных_БлокДанных_Вывести(БлокДанных,ПараметрыВывода);
	
	// Дата прекращения деятельности
	
	БлокДанных = Фокус_ВыводДанных_БлокДанных_Инициализировать();
	БлокДанных.Заголовок = "Дата прекращения деятельности";
	БлокДанных.ИмяОбластиЗаголовка = "ТекстПлохой";
	
	ДатаПрекращения 	= Фокус_ПолучитьЗначениеПоляДанных(ДанныеРеквизиты, Префикс + ".dissolutionDate");
	Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, ,	"БлокТекстОтступ",Фокус_ПолучитьПредставлениеДанных_Дата(ДатаПрекращения));
	
	Фокус_ВыводДанных_БлокДанных_Вывести(БлокДанных,ПараметрыВывода);
	
КонецПроцедуры

Процедура Фокус_ВывестиДанные_ЮрФизЛицо_АдресРегистрации(ПараметрыВывода,ДанныеРеквизиты,ДанныеДопРеквизиты)
	
	Если ДанныеРеквизиты.Свойство("UL") Тогда
		
		БлокДанных = Фокус_ВыводДанных_БлокДанных_Инициализировать();
		БлокДанных.Заголовок = "Адрес регистрации";
		БлокДанных.ИмяОбластиЗаголовка = "БлокЗаголовокОтступов";
	
		Если ДанныеРеквизиты.UL.Свойство("legalAddress") Тогда
			АдресПредставление = Фокус_ПолучитьПредставлениеДанных_Адрес(ДанныеРеквизиты.UL.legalAddress);
		Иначе
			АдресПредставление = "";
		КонецЕсли;
		
		// текущий адрес регистрации
		Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, ,	"БлокТекстОтступ",АдресПредставление);
		
		// история адресов
		ИсторияАдресов = Фокус_ПолучитьПредставлениеДанных_ИсторияАдресов(ДанныеРеквизиты);
		Для Каждого Эл Из ИсторияАдресов Цикл
			Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, ,	"БлокТекстОтступЗачеркнутый",Эл.Представление);
		КонецЦикла;
		
		Фокус_ВыводДанных_БлокДанных_Вывести(БлокДанных,ПараметрыВывода);
		
	ИначеЕсли НЕ ДанныеДопРеквизиты = Неопределено И ДанныеДопРеквизиты.Свойство("IP") Тогда
		
		БлокДанных = Фокус_ВыводДанных_БлокДанных_Инициализировать();
		БлокДанных.Заголовок = "Адрес регистрации";
		БлокДанных.ИмяОбластиЗаголовка = "БлокЗаголовокОтступов";
	
		Если ДанныеДопРеквизиты.IP.Свойство("shortenedAddress") Тогда
			АдресПредставление = Фокус_ПолучитьПредставлениеДанных_Адрес(ДанныеДопРеквизиты.IP);
		Иначе
			АдресПредставление = "";
		КонецЕсли;
		
		// текущий адрес регистрации
		Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, ,	"БлокТекстОтступ", АдресПредставление);
		
		Фокус_ВыводДанных_БлокДанных_Вывести(БлокДанных,ПараметрыВывода);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Фокус_ВывестиДанные_ЮрФизЛицо_Телефоны(ПараметрыВывода,ДанныеКонтакты)
	
	Если НЕ ЗначениеЗаполнено(ДанныеКонтакты) Тогда
		Возврат;
	КонецЕсли;
	
	БлокДанных = Фокус_ВыводДанных_БлокДанных_Инициализировать();
	БлокДанных.Заголовок = "Телефоны из Контур.Справочник ("+Формат(ДанныеКонтакты.count,"ЧДЦ=0; ЧН=; ЧГ=")+")";
	БлокДанных.ИмяОбластиЗаголовка = "БлокЗаголовокОтступов";
	Если ДанныеКонтакты.phones.Количество()>5 Тогда
		БлокДанных.ГруппироватьЗначения = Истина;
	КонецЕсли;
	
	Для Каждого Эл Из ДанныеКонтакты.phones Цикл
		Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, ,	"БлокТекстОтступ", Фокус_ПолучитьПредставлениеДанных_НомерТелефона(Эл));
	КонецЦикла;
	
	Фокус_ВыводДанных_БлокДанных_Вывести(БлокДанных,ПараметрыВывода);
	
КонецПроцедуры

Процедура Фокус_ВывестиДанные_ЮрФизЛицо_Руководители(ПараметрыВывода,ДанныеРеквизиты)
	
	Если ДанныеРеквизиты.Свойство("UL") Тогда
		
		БлокДанных = Фокус_ВыводДанных_БлокДанных_Инициализировать();
		БлокДанных.Заголовок = "Руководители";
		БлокДанных.ИмяОбластиЗаголовка = "БлокЗаголовокОтступов";
		
		Если ДанныеРеквизиты.UL.Свойство("heads") Тогда
			
			Руководители = Фокус_ПолучитьПредставлениеДанных_Руководители(ДанныеРеквизиты.UL.heads);
			
			Фокус_ВыводДанных_БлокДанных_ДобавитьПредставленияИзТаблицыЗначений(БлокДанных,"БлокТекстОтступ",Фокус_ПолучитьПредставлениеДанных_Руководители(ДанныеРеквизиты.UL.heads));
			
			Если ДанныеРеквизиты.UL.Свойство("history") И ДанныеРеквизиты.UL.history.Свойство("heads") Тогда
				Фокус_ВыводДанных_БлокДанных_ДобавитьПредставленияИзТаблицыЗначений(БлокДанных,"БлокТекстОтступЗачеркнутый",Фокус_ПолучитьПредставлениеДанных_Руководители(ДанныеРеквизиты.UL.history.heads));
			КонецЕсли;			
			
		КонецЕсли;
		
		Фокус_ВыводДанных_БлокДанных_Вывести(БлокДанных,ПараметрыВывода);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Фокус_ВывестиДанные_ЮрФизЛицо_Учредители(ПараметрыВывода,ДанныеДопРеквизиты)
	
	Если НЕ ЗначениеЗаполнено(ДанныеДопРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ДанныеДопРеквизиты.Свойство("UL") Тогда
		Возврат;
	КонецЕсли;
	
	// уставный капитал
	Если ДанныеДопРеквизиты.UL.Свойство("statedCapital") Тогда
		
		БлокДанных = Фокус_ВыводДанных_БлокДанных_Инициализировать();
		БлокДанных.Заголовок = "Уставный капитал";
		БлокДанных.ИмяОбластиЗаголовка = "БлокЗаголовокОтступов";
		
		Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, ,	"БлокТекстОтступ", Фокус_ПолучитьПредставлениеДанных_УставныйКапитал(ДанныеДопРеквизиты.UL.statedCapital));
		
		Фокус_ВыводДанных_БлокДанных_Вывести(БлокДанных,ПараметрыВывода);
		
	КонецЕсли;
	
	// учредители
	
	СписокУчредителей = Фокус_ПолучитьПредставлениеДанных_Учредители(ДанныеДопРеквизиты.UL);
	
	БлокДанных = Фокус_ВыводДанных_БлокДанных_Инициализировать();
	БлокДанных.ГруппироватьЗначения = Истина;
	БлокДанных.Заголовок = "Учредители ("+СписокУчредителей.Количество()+")";
	БлокДанных.ИмяОбластиЗаголовка = "БлокЗаголовокОтступов";
	
	Фокус_ВыводДанных_БлокДанных_ДобавитьПредставленияИзТаблицыЗначений(БлокДанных,"БлокТекстОтступ",СписокУчредителей);
	
	Если ДанныеДопРеквизиты.UL.Свойство("history")Тогда
		Фокус_ВыводДанных_БлокДанных_ДобавитьПредставленияИзТаблицыЗначений(БлокДанных,"БлокТекстОтступЗачеркнутый",Фокус_ПолучитьПредставлениеДанных_Учредители(ДанныеДопРеквизиты.UL.history));
	КонецЕсли;			
	
	Фокус_ВыводДанных_БлокДанных_Вывести(БлокДанных,ПараметрыВывода);
	
КонецПроцедуры
	
Процедура Фокус_ВывестиДанные_ЮрФизЛицо_ПредшественникиПреемники(ПараметрыВывода,ДанныеДопРеквизиты)

	Если НЕ ЗначениеЗаполнено(ДанныеДопРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ДанныеДопРеквизиты.Свойство("UL") Тогда
		Возврат;
	КонецЕсли;
	
	// предшественники
	Если ДанныеДопРеквизиты.UL.Свойство("predecessors") Тогда
		
		СписокОрганизаций = Фокус_ПолучитьПредставлениеДанных_ПредшественникиПреемники(ДанныеДопРеквизиты.UL.predecessors);
		
		БлокДанных = Фокус_ВыводДанных_БлокДанных_Инициализировать();
		БлокДанных.ГруппироватьЗначения = Истина;
		БлокДанных.Заголовок = "Предшественники ("+СписокОрганизаций.Количество()+")";
		БлокДанных.ИмяОбластиЗаголовка = "БлокЗаголовокОтступов";
		
		Фокус_ВыводДанных_БлокДанных_ДобавитьПредставленияИзТаблицыЗначений(БлокДанных,"БлокТекстОтступ",СписокОрганизаций);
		
		Фокус_ВыводДанных_БлокДанных_Вывести(БлокДанных,ПараметрыВывода);
		
	КонецЕсли;
			
	// преемники
	Если ДанныеДопРеквизиты.UL.Свойство("successors") Тогда
		
		СписокОрганизаций = Фокус_ПолучитьПредставлениеДанных_ПредшественникиПреемники(ДанныеДопРеквизиты.UL.successors);
		
		БлокДанных = Фокус_ВыводДанных_БлокДанных_Инициализировать();
		БлокДанных.ГруппироватьЗначения = Истина;
		БлокДанных.Заголовок = "Преемники ("+СписокОрганизаций.Количество()+")";
		БлокДанных.ИмяОбластиЗаголовка = "БлокЗаголовокОтступов";
		
		Фокус_ВыводДанных_БлокДанных_ДобавитьПредставленияИзТаблицыЗначений(БлокДанных,"БлокТекстОтступ",СписокОрганизаций);
		
		Фокус_ВыводДанных_БлокДанных_Вывести(БлокДанных,ПараметрыВывода);
		
	КонецЕсли;

КонецПроцедуры
	
Процедура Фокус_ВывестиДанные_ЮрФизЛицо_Филиалы(ПараметрыВывода,ДанныеРеквизиты)

	Если НЕ ЗначениеЗаполнено(ДанныеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ДанныеРеквизиты.Свойство("UL") Тогда
		Возврат;
	КонецЕсли;
	
	СписокОрганизаций = Фокус_ПолучитьПредставлениеДанных_Филиалы(ДанныеРеквизиты);
		
	БлокДанных = Фокус_ВыводДанных_БлокДанных_Инициализировать();
	БлокДанных.ГруппироватьЗначения = Истина;
	БлокДанных.Заголовок = "Филиалы ("+СписокОрганизаций.Количество()+")";
	БлокДанных.ИмяОбластиЗаголовка = "БлокЗаголовокОтступов";
		
	Фокус_ВыводДанных_БлокДанных_ДобавитьПредставленияИзТаблицыЗначений(БлокДанных,"БлокТекстОтступ",СписокОрганизаций);
		
	Фокус_ВыводДанных_БлокДанных_Вывести(БлокДанных,ПараметрыВывода);

КонецПроцедуры	

Процедура Фокус_ВывестиДанные_ЮрФизЛицо_Аналитика(ПараметрыВывода,ДанныеАналитика)
	
	Если ДанныеАналитика = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеАналитика) = Тип("ТаблицаЗначений") И ДанныеАналитика.Количество()>0 Тогда
		
		БлокДанных = Фокус_ВыводДанных_БлокДанных_Инициализировать();
		БлокДанных.ГруппироватьЗначения = Истина;
		БлокДанных.Заголовок = "Аналитика ("+ДанныеАналитика.Количество()+")";
		БлокДанных.ИмяОбластиЗаголовка = "БлокЗаголовокОтступов";
	
		Для Каждого Стр ИЗ ДанныеАналитика Цикл
			Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, ,	"СтрокаТаблицы",Стр.Значение,,Стр.Наименование);
		КонецЦикла;
		
		Фокус_ВыводДанных_БлокДанных_Вывести(БлокДанных,ПараметрыВывода);

	КонецЕсли;
	
КонецПроцедуры

Процедура Фокус_ВывестиДанные_ЮрФизЛицо_Лицензии(ПараметрыВывода,ДанныеЛицензии)
	
	Если ДанныеЛицензии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеЛицензии.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	БлокДанных = Фокус_ВыводДанных_БлокДанных_Инициализировать();
	
	БлокДанных.ГруппироватьЗначения = Истина;
	БлокДанных.Заголовок = "Лицензии ("+ДанныеЛицензии.Количество()+")";
	БлокДанных.ИмяОбластиЗаголовка = "БлокЗаголовокОтступов";
	
	Для Каждого Эл Из ДанныеЛицензии Цикл
		
		Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, ,	"Отступ",1);
		
		Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, Эл, "Лицензия_Строка",,"officialNum"," Номер");
		Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, Эл, "Лицензия_Строка",,"issuerName"," Орган");
		
		ДатаВыдачи		= Фокус_ПолучитьЗначениеПоляДанных(Эл, "date");
		ДатаНачала		= Фокус_ПолучитьЗначениеПоляДанных(Эл, "dateStart");
		ДатаОкончания 	= Фокус_ПолучитьЗначениеПоляДанных(Эл, "dateEnd");
		
		Если НЕ ДатаВыдачи = Неопределено Тогда
			Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, Эл, "Лицензия_Строка",Фокус_ПолучитьПредставлениеДанных_Дата(ДатаВыдачи),," Дата выдачи");
		КонецЕсли;
		Если НЕ ДатаНачала = Неопределено Тогда
			Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, Эл, "Лицензия_Строка",Фокус_ПолучитьПредставлениеДанных_Дата(ДатаНачала),," Дата начала");
		КонецЕсли;
		Если НЕ ДатаОкончания = Неопределено Тогда
			
			ДатаОкончания_Дата = Неопределено;
			Если ТипЗнч(ДатаОкончания) = Тип("Строка") Тогда
				Если СтрДлина(ДатаОкончания) = 10 Тогда
					Попытка
						ДатаОкончания_Дата = Дата(Лев(ДатаОкончания,4),Сред(ДатаОкончания,6,2),Прав(ДатаОкончания,2));
					Исключение
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДатаОкончания_Дата) Тогда
				Если ДатаОкончания_Дата<ТекущаяДата() Тогда
					ОбластьДата = "Лицензия_СтрокаКрасный";
				Иначе
					ОбластьДата = "Лицензия_СтрокаЗеленый";
				КонецЕсли;
			Иначе
				ОбластьДата = "Лицензия_Строка";
			КонецЕсли;
					
			Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, Эл, ОбластьДата, Фокус_ПолучитьПредставлениеДанных_Дата(ДатаОкончания),," Дата окончания");
		КонецЕсли;
		
		Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, Эл, "Лицензия_Строка",,"statusDescription"," Статус");
		Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, Эл, "Лицензия_Строка",,"activity"," Вид деятельности");
		
		ВидыРабот	= Фокус_ПолучитьЗначениеПоляДанных(Эл, "services");
		Если НЕ ВидыРабот = Неопределено Тогда
			ПредставлениеРабот = "";
			Для Каждого Зн Из ВидыРабот Цикл
				ПредставлениеРабот = ПредставлениеРабот + Зн + Символы.ПС;
			КонецЦикла;
			Если НЕ ПредставлениеРабот = "" Тогда
				Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, Эл, "Лицензия_Строка",ПредставлениеРабот,," Виды работ");
			КонецЕсли;
		КонецЕсли;
		
		Территории	= Фокус_ПолучитьЗначениеПоляДанных(Эл, "addresses");
		Если НЕ Территории = Неопределено Тогда
			ПредставлениеТерритории = "";
			Для Каждого Зн Из Территории Цикл
				ПредставлениеТерритории = ПредставлениеТерритории + Зн + Символы.ПС;
			КонецЦикла;
			Если НЕ ПредставлениеТерритории = "" Тогда
				Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, Эл, "Лицензия_Строка",ПредставлениеТерритории,," Территория");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Фокус_ВыводДанных_БлокДанных_Вывести(БлокДанных,ПараметрыВывода);
	
КонецПроцедуры

Процедура Фокус_ВывестиДанные_ЮрФизЛицо_БухОтчетность(ПараметрыВывода,ДанныеБухОтчетности)
	
	Если ДанныеБухОтчетности = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеБухОтчетности.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Макет = ПолучитьМакет("Макет");
	ТабличныйДокумент = ПараметрыВывода.ТабличныйДокумент;

	ОбластьОтступ = Макет.ПолучитьОбласть("Отступ");
	ТабличныйДокумент.Вывести(ОбластьОтступ);
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("БлокЗаголовокОтступов");
	ОбластьЗаголовок.Параметры.Значение = "Финансы";
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	ТабличныйДокумент.НачатьГруппуСтрок(,Ложь);
	
	ОбластьБух_Заголовок = Макет.ПолучитьОбласть("Бух_Заголовок");
	ОбластьБух_Форма = Макет.ПолучитьОбласть("Бух_Форма|Основная");
	ОбластьБух_ФормаГод = Макет.ПолучитьОбласть("Бух_Форма|Год");
	
	ОбластьОтступ = Макет.ПолучитьОбласть("Отступ");
	
	СтруктураРасшифровкиГрупп = Новый Структура();
	СтруктураРасшифровкиГрупп.Вставить("п1100","Внеоборотные активы");
	СтруктураРасшифровкиГрупп.Вставить("п1200","Оборотные активы");
	СтруктураРасшифровкиГрупп.Вставить("п1300","Капитал и резервы");
	СтруктураРасшифровкиГрупп.Вставить("п1400","Долгосрочные обязательства");
	СтруктураРасшифровкиГрупп.Вставить("п1500","Краткосрочные обязательства");
	СтруктураРасшифровкиГрупп.Вставить("п1600","Баланс");
	
	МассивГодов = Новый Массив();
	Для Каждого Кол ИЗ ДанныеБухОтчетности.Колонки Цикл
		Если Лев(Кол.Имя,6) = "Конец_" Тогда
			МассивГодов.Добавить(Прав(Кол.Имя,4));
		КонецЕсли;
	КонецЦикла;
	
	НомерФормы = 0;
	
	Для Каждого Стр Из ДанныеБухОтчетности Цикл
		
		Если НЕ Стр.НомерФормы = НомерФормы Тогда
			
			Если Стр.НомерФормы = 1 Тогда
				Заголовок = "Бухгалтерский баланс";
			ИначеЕсли Стр.НомерФормы = 2 Тогда
				Заголовок = "Отчет о финансовых результатах";
			ИначеЕсли Стр.НомерФормы = 3 Тогда
				// печать остальных форм будет реализована после их появления в api
				Прервать;
			КонецЕсли;
			
			НомерФормы = Стр.НомерФормы;
			
			ОбластьБух_Заголовок.Параметры.Заголовок = Заголовок;
			ТабличныйДокумент.Вывести(ОбластьБух_Заголовок);
			
			ОбластьБух_Форма.Параметры.Заголовок = "Форма №" + НомерФормы;
			ТабличныйДокумент.Вывести(ОбластьБух_Форма);
			
			Для Каждого Эл Из МассивГодов Цикл
				
				ОбластьБух_ФормаГод.Параметры.Значение = Эл;
				ТабличныйДокумент.Присоединить(ОбластьБух_ФормаГод);
				
			КонецЦикла;
			
			ТабличныйДокумент.Вывести(ОбластьОтступ);
			
		КонецЕсли;
		
		КодСтроки = Формат(Стр.КодСтроки,"ЧРГ=; ЧГ=");
		
		Если СтруктураРасшифровкиГрупп.Свойство("п"+КодСтроки) Тогда
			ТекОбласть = Макет.ПолучитьОбласть("Бух_Группа|Основная");
			ТекОбластьГод = Макет.ПолучитьОбласть("Бух_Группа|Год");
			ТекОбласть.Параметры.Заголовок = СтруктураРасшифровкиГрупп["п"+КодСтроки];
			ТабличныйДокумент.Вывести(ТекОбласть);
		Иначе
			ТекОбласть = Макет.ПолучитьОбласть("Бух_Строка|Основная");
			ТекОбластьГод = Макет.ПолучитьОбласть("Бух_Строка|Год");
			ТекОбласть.Параметры.Заголовок = Стр.НазваниеСтроки;
			ТабличныйДокумент.Вывести(ТекОбласть);
		КонецЕсли;
		
		Для Каждого Эл Из МассивГодов Цикл
			
			ТекОбластьГод.Параметры.Значение = Стр["Конец_"+Эл];
			ТабличныйДокумент.Присоединить(ТекОбластьГод);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТабличныйДокумент.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

// вывод данных истории наблюдения

Функция Фокус_ВыводДанных_ПолучитьТаблицуИзменений(НачалоПериода = Неопределено,КонецПериода = Неопределено,ИНН = "",КэшДанных,НаборМаркеров = Неопределено)

	ТаблицаИзменений = Новый ТаблицаЗначений;
	ТаблицаИзменений.Колонки.Добавить("ИНН");   
	ТаблицаИзменений.Колонки.Добавить("Дата");   
	ТаблицаИзменений.Колонки.Добавить("ДатаВремя");
	ТаблицаИзменений.Колонки.Добавить("Описание"); 
	ТаблицаИзменений.Колонки.Добавить("СтароеЗначение");
	ТаблицаИзменений.Колонки.Добавить("НовоеЗначение");
	ТаблицаИзменений.Колонки.Добавить("Значимость");
	ТаблицаИзменений.Колонки.Добавить("ПодчиненныеМаркеры");
	
	Запрос = Новый Запрос();
	Если ЗначениеЗаполнено(НаборМаркеров) Тогда
		
		ТекстУсловия = " Фокус_Маркеры.НаборМаркеров = &НаборМаркеров ";
		Запрос.УстановитьПараметр("НаборМаркеров",НаборМаркеров);	
		
	Иначе
		
		ТекстУсловия = "	Фокус_Маркеры.ДатаВремя МЕЖДУ &НачалоПериода И &КонецПериода
	               		|	И Фокус_Маркеры.ИмяНабораМаркеров = """"";
						
		Запрос.УстановитьПараметр("НачалоПериода",		НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода",		КонецДня(КонецПериода));
		
	КонецЕсли;	
	Если ЗначениеЗаполнено(ИНН) Тогда
		ТекстУсловия = ТекстУсловия + " И Фокус_Маркеры.ИНН = &ИНН ";
		Запрос.УстановитьПараметр("ИНН",ИНН);
	КонецЕсли;
		
	Запрос.Текст = "ВЫБРАТЬ
	               |	Фокус_Маркеры.Ссылка,
	               |	Фокус_Маркеры.ДатаВремя КАК ДатаВремя,
	               |	Фокус_Маркеры.ИНН,
	               |	Фокус_Маркеры.ИмяМаркера,
	               |	Фокус_Маркеры.Значимость,
	               |	Фокус_Маркеры.Обработан,
	               |	Фокус_Маркеры.ИмяНабораМаркеров,
	               |	Фокус_Маркеры.НаборМаркеров,
	               |	Фокус_Маркеры.СтароеЗначение,
	               |	Фокус_Маркеры.НовоеЗначение
	               |ИЗ
	               |	Справочник.Фокус_Маркеры КАК Фокус_Маркеры
	               |ГДЕ
				   |
				   |	" + ТекстУсловия + "       
				   |
	               |УПОРЯДОЧИТЬ ПО
	               |	Фокус_Маркеры.Код УБЫВ";
				   
	сч = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		сч = сч+1;
		#Если Клиент Тогда
		Состояние("Выводим маркеры "+сч);
		#КонецЕсли	
		
		СтарыеДанные	= Неопределено;
		НовыеДанные		= Неопределено;            
		                            
		Если ЗначениеЗаполнено(Выборка.СтароеЗначение) Тогда
			НайденнаяСтрока = КэшДанных.Найти(Выборка.СтароеЗначение,"Элемент");
			Если НайденнаяСтрока = Неопределено Тогда
				СтарыеДанные = ПрочитатьJSONВручную(Выборка.СтароеЗначение.Значение);
				
				Если НЕ Фокус_ПолучениеДанных_ВернулисьДанные(СтарыеДанные) Тогда
					СтарыеДанные = Неопределено;
				Иначе
					СтарыеДанные = СтарыеДанные[0];
					НоваяСтрокаКэш = КэшДанных.Добавить();
					НоваяСтрокаКэш.Элемент = Выборка.СтароеЗначение;
					НоваяСтрокаКэш.Данные = СтарыеДанные;
				КонецЕсли;
				
			Иначе
				СтарыеДанные = НайденнаяСтрока.Данные;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.НовоеЗначение) Тогда
			НайденнаяСтрока = КэшДанных.Найти(Выборка.НовоеЗначение,"Элемент");
			Если НайденнаяСтрока = Неопределено Тогда
				НовыеДанные = ПрочитатьJSONВручную(Выборка.НовоеЗначение.Значение);
				
				Если НЕ Фокус_ПолучениеДанных_ВернулисьДанные(НовыеДанные) Тогда
					НовыеДанные = Неопределено;
				Иначе
					НовыеДанные = НовыеДанные[0];
					НоваяСтрокаКэш = КэшДанных.Добавить();
					НоваяСтрокаКэш.Элемент = Выборка.НовоеЗначение;
					НоваяСтрокаКэш.Данные = НовыеДанные;
				КонецЕсли;
				
			Иначе
				НовыеДанные = НайденнаяСтрока.Данные;
			КонецЕсли;

		КонецЕсли;
		
		НайденнаяСтрокаНаблюдения = ТаблицаПараметровНаблюдения.Найти(СокрЛП(Выборка.ИмяМаркера),"Имя");
		Если НЕ НайденнаяСтрокаНаблюдения = Неопределено Тогда
		
			НоваяСтрокаИзменений = ТаблицаИзменений.Добавить();
			НоваяСтрокаИзменений.ИНН		= Выборка.ИНН;
			НоваяСтрокаИзменений.ДатаВремя	= Выборка.ДатаВремя;
			НоваяСтрокаИзменений.Дата		= НачалоДня(Выборка.ДатаВремя);
			НоваяСтрокаИзменений.Описание	= НайденнаяСтрокаНаблюдения.Описание;   
			НоваяСтрокаИзменений.Значимость	= НайденнаяСтрокаНаблюдения.Значимость;
			   
			Если ЗначениеЗаполнено(СтарыеДанные) Тогда 
				СтароеЗначение = Фокус_ПолучитьЗначениеПоляДанных(СтарыеДанные,НайденнаяСтрокаНаблюдения.ИмяПоля);
				НоваяСтрокаИзменений.СтароеЗначение = Фокус_ПолучитьПредставлениеДанных(СтароеЗначение,НайденнаяСтрокаНаблюдения.ВидПредставления);
			КонецЕсли;
			Если ЗначениеЗаполнено(НовыеДанные) Тогда
				НовоеЗначение = Фокус_ПолучитьЗначениеПоляДанных(НовыеДанные,НайденнаяСтрокаНаблюдения.ИмяПоля);
				НоваяСтрокаИзменений.НовоеЗначение = Фокус_ПолучитьПредставлениеДанных(НовоеЗначение,НайденнаяСтрокаНаблюдения.ВидПредставления);
			КонецЕсли;        
			
			Если НайденнаяСтрокаНаблюдения.ИмяМетода = "Набор" Тогда
				   
				НоваяСтрокаИзменений.ПодчиненныеМаркеры = Фокус_ВыводДанных_ПолучитьТаблицуИзменений(,,,КэшДанных,Выборка.Ссылка);

			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаИзменений.Сортировать("Дата Убыв, ИНН, Значимость Убыв, ДатаВремя Убыв");

	Возврат ТаблицаИзменений;
	
КонецФункции

Процедура Фокус_ВыводДанных_ВывестиРазличияТЗ(Таб,Таб1,Таб2,ОбластьСтрокаТЗ)
	
	ВремТЗ = Новый ТаблицаЗначений;
	ВремТЗ.Колонки.Добавить("Представление");
	ВремТЗ.Колонки.Добавить("сч");
	
	Если ТипЗнч(Таб1) = Тип("ТаблицаЗначений") Тогда
		Для Каждого Стр Из Таб1 Цикл
			НоваяСтрока = ВремТЗ.Добавить();
			НоваяСтрока.Представление = СокрЛП(Стр.Представление);
			НоваяСтрока.сч = 1;
		КонецЦикла;                                                               
	КонецЕсли;
	
	Если ТипЗнч(Таб2) = Тип("ТаблицаЗначений") Тогда
		Для Каждого Стр Из Таб2 Цикл
			НоваяСтрока = ВремТЗ.Добавить();
			НоваяСтрока.Представление = СокрЛП(Стр.Представление);
			НоваяСтрока.сч = -1;
		КонецЦикла;                                                               
	КонецЕсли;
	
	ВремТЗ.Свернуть("Представление","сч");
	
	Для Каждого Стр Из ВремТЗ Цикл
		
		СтароеЗначение = Стр.Представление;
		НовоеЗначение = Стр.Представление;
		
		Если Стр.сч = -1 Тогда
			СтароеЗначение = "";
		ИначеЕсли Стр.сч = 1 Тогда
			НовоеЗначение = ""; 
		Иначе
			Продолжить;
		КонецЕсли;
		
		ОбластьСтрокаТЗ.Параметры.СтароеЗначение = СтароеЗначение;
		ОбластьСтрокаТЗ.Параметры.НовоеЗначение = НовоеЗначение;
		
		Таб.Вывести(ОбластьСтрокаТЗ);
		
	КонецЦикла;
	
КонецПроцедуры

Функция Фокус_ВыводДанных_ПоказатьСработавшиеМаркеры(НачалоПериода = Неопределено,КонецПериода = Неопределено,
													СписокМаркеров = Неопределено,СписокКонтрагентов = Неопределено,
													ТолькоНеобработанные = Ложь,
													СписокСработавшихМаркеров = Неопределено,
													ЗаголовокПисьма="",ЭтоНаблюдение=Ложь) Экспорт
	
	Таб			= Новый ТабличныйДокумент;
	ТабШапка	= Новый ТабличныйДокумент;
	ТабДанные	= Новый ТабличныйДокумент;
	ЭтоПисьмо	= Не ЭтоНаблюдение;
	Макет = ПолучитьМакет("Макет");
	
	ОбластьЗаголовок				= Макет.ПолучитьОбласть("ЗаголовокОтчета");
	
	ОбластьКонтрагент				= Макет.ПолучитьОбласть("СтрокаКонтрагент");
	ОбластьПоявились				= Макет.ПолучитьОбласть("СтрокаПоявились");
	ОбластьПропали					= Макет.ПолучитьОбласть("СтрокаПропали");
    ОбластьОтступ					= Макет.ПолучитьОбласть("Отступ");
	ОбластьМаркерРасшифровкаСтрока	= Макет.ПолучитьОбласть("МаркерРасшифровкаСтрока");
	
	ОбластьЗаголовок.Параметры.ДатаФормирования = ТекущаяДата();
	ТабШапка.Вывести(ОбластьЗаголовок);
	Если ЭтоПисьмо Тогда
		СтрСтат=Фокус_ВывестиДанные_ЗаполнитьЭлементФормыИнформациейОСтатистике(Фокус_ПолучитьДанные_СтатистикаКлюча(),ТекущаяДата());
		Если СтрСтат<>Неопределено Тогда
			Если СтрСтат.ЦветРаскраски=WebЦвета.Черный Тогда
				ОбластьСведенияОКлюче= Макет.ПолучитьОбласть("ТекстНейтральный");
			ИначеЕсли СтрСтат.ЦветРаскраски=WebЦвета.Красный Тогда
				ОбластьСведенияОКлюче= Макет.ПолучитьОбласть("ТекстПлохой");
			Иначе
				ОбластьСведенияОКлюче= Макет.ПолучитьОбласть("ТекстОбратитьВнимание");
			КонецЕсли;
			
			ОбластьСведенияОКлюче.Параметры.Значение="Ключ: осталось "+(СтрСтат.ЗначениеОграничения-СтрСтат.Использовано)+" из "+СтрСтат.ЗначениеОграничения+": до "+Формат(СтрСтат.ДатаОкончания,"ДФ=dd.MM.yyyy");
			ТабШапка.Вывести(ОбластьСведенияОКлюче);
		КонецЕсли;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	
	УсловиеСписокМаркеров = "";
	
	Если ЗначениеЗаполнено(СписокМаркеров) Тогда
		
		Запрос.УстановитьПараметр("СписокIDМаркеров", СписокМаркеров.ВыгрузитьЗначения());
		
		УсловиеСписокМаркеров = " ГДЕ ТабМаркеров.ID В (&СписокIDМаркеров)";
		
	КонецЕсли;
	
	
	УсловиеКонтрагентов = "";
	Если ЗначениеЗаполнено(СписокКонтрагентов) Тогда
		УсловиеКонтрагентов = " ГДЕ Контрагенты.Ссылка В (&СписокКонтрагентов)";
		Запрос.УстановитьПараметр("СписокКонтрагентов",СписокКонтрагентов.ВыгрузитьКолонку("Контрагент"));
	КонецЕсли;
	
	УсловиеОтбора = "";
	
	Если ЗначениеЗаполнено(НачалоПериода) И ЗначениеЗаполнено(КонецПериода) Тогда
		Запрос.УстановитьПараметр("НачалоПериода",	НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода", 	КонецДня(КонецПериода));
		УсловиеОтбора = " ГДЕ Фокус_Маркеры.ДатаСоздания МЕЖДУ &НачалоПериода И &КонецПериода";
	ИначеЕсли ТолькоНеобработанные Тогда
		УсловиеОтбора = " ГДЕ НЕ Фокус_Маркеры.Обработан";
	КонецЕсли;
	
	ТабМаркеров = Фокус_ХранениеДанных_ПолучитьСписокМаркеров();
	
	МассивКолонок	= Новый Массив;
	МассивТипов		= Новый Массив;
	МассивКолонок.Добавить("ID");			МассивТипов.Добавить(Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(36)));
	МассивКолонок.Добавить("Наименование"); МассивТипов.Добавить(Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(0)));
	Фокус_ВыводДанных_ПодготовитьТаблицуДляЗапроса(ТабМаркеров,МассивКолонок,МассивТипов);

	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабМаркеров.ID КАК ID,
	               |	ТабМаркеров.Наименование,
	               |	ВЫРАЗИТЬ(ТабМаркеров.Категория КАК СТРОКА(50)) КАК Категория
	               |ПОМЕСТИТЬ ВремТабМаркеров
	               |ИЗ
	               |	&ТабМаркеров КАК ТабМаркеров
	               |
				   |"+УсловиеСписокМаркеров+"
				   |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Фокус_Маркеры.ДатаСоздания,
	               |	Фокус_Маркеры.ИНН КАК ИНН,
	               |	Фокус_Маркеры.Статус КАК Статус,
	               |	Фокус_Маркеры.Расшифровка,
	               |	ВремТабМаркеров.Наименование,
	               |	ВремТабМаркеров.Категория КАК Категория,
	               |	ВЫБОР
	               |		КОГДА ВремТабМаркеров.Категория = ""Красный""
	               |			ТОГДА 10
	               |		КОГДА ВремТабМаркеров.Категория = ""Желтый""
	               |			ТОГДА 20
	               |		КОГДА ВремТабМаркеров.Категория = ""Зеленый""
	               |			ТОГДА 30
	               |		КОГДА ВремТабМаркеров.Категория = ""Нейтральный""
	               |			ТОГДА 40
	               |	КОНЕЦ КАК Порядок
	               |ПОМЕСТИТЬ ВремРезультат
	               |ИЗ
	               |	Справочник.Фокус_ИзмененияМаркеров КАК Фокус_Маркеры
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремТабМаркеров КАК ВремТабМаркеров
	               |		ПО Фокус_Маркеры.ID = ВремТабМаркеров.ID
	               |
	               |"+УсловиеОтбора+"
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ИНН
	               |;
				   |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВремРезультат.ИНН КАК ИННКонтрагента,
				   |	Сумма(ВЫБОР
				   |		КОГДА ВремРезультат.Статус<>""Активный"" 
				   |		ТОГДА 0
	               |		КОГДА ВремРезультат.Категория = ""Красный""
	               |			ТОГДА 1000000
	               |		КОГДА ВремРезультат.Категория = ""Желтый""
	               |			ТОГДА 10000
	               |		КОГДА ВремРезультат.Категория = ""Зеленый""
	               |			ТОГДА 100
	               |		КОГДА ВремРезультат.Категория = ""Нейтральный""
	               |			ТОГДА 1
	               |	КОНЕЦ) КАК УровеньКонтрагента
				   |ПОМЕСТИТЬ УровениКонтрагентов
	               |ИЗ
	               |	ВремРезультат
				   |СГРУППИРОВАТЬ ПО 
				   |	ВремРезультат.ИНН	               
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ИННКонтрагента
	               |;
				   |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(Контрагенты.Ссылка) КАК Ссылка,
				   |	МАКСИМУМ(УровениКонтрагентов.УровеньКонтрагента) КАК УровеньКонтрагента,
	               |	ВремРезультат.ИНН КАК ИННКонтрагента
	               |ПОМЕСТИТЬ ВремКонтрагенты
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремРезультат КАК ВремРезультат
	               |		ПО Контрагенты.ИНН = ВремРезультат.ИНН
				   |		ЛЕВОЕ СОЕДИНЕНИЕ УровениКонтрагентов КАК УровениКонтрагентов
				   |		ПО Контрагенты.ИНН = УровениКонтрагентов.ИННКонтрагента
	               |
	               |"+УсловиеКонтрагентов+"
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВремРезультат.ИНН
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ИННКонтрагента
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
				   |	ВремКонтрагенты.УровеньКонтрагента,
	               |	ВремКонтрагенты.Ссылка КАК Контрагент,
	               |	ВремРезультат.ДатаСоздания КАК ДатаСоздания,
	               |	ВремРезультат.ИНН КАК ИНН,
	               |	ВремРезультат.Статус КАК Статус,
	               |	ВремРезультат.Расшифровка,
	               |	ВремРезультат.Наименование,
	               |	ВремРезультат.Категория,
	               |	ВремРезультат.Порядок
	               |ИЗ
	               |	ВремРезультат КАК ВремРезультат
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремКонтрагенты КАК ВремКонтрагенты
	               |		ПО ВремРезультат.ИНН = ВремКонтрагенты.ИННКонтрагента
	               |
	               |УПОРЯДОЧИТЬ ПО
				   |	ВремКонтрагенты.УровеньКонтрагента УБЫВ,
	               |	ВремКонтрагенты.ИННКонтрагента,
	               |	ВремРезультат.Статус,
	               |	ВремРезультат.Порядок,
	               |	ВремРезультат.ДатаСоздания УБЫВ
	               |ИТОГИ
	               |	МАКСИМУМ(Контрагент)
	               |ПО
	               |	ИНН,
	               |	Статус";
				   
	Запрос.УстановитьПараметр("ТабМаркеров", 	ТабМаркеров);			   
	
	СписокСработавшихМаркеров = Новый ТаблицаЗначений;
	СписокСработавшихМаркеров.Колонки.Добавить("Контрагент");
	СписокСработавшихМаркеров.Колонки.Добавить("Категория");
	СписокСработавшихМаркеров.Колонки.Добавить("Статус");
	
	ВыборкаИНН = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаИНН.Следующий() Цикл
		
		ТабДанные.Вывести(ОбластьОтступ);
		
		ОбластьКонтрагент.Параметры.Контрагент = "" + ВыборкаИНН.Контрагент + ", " + ВыборкаИНН.ИНН;
		ОбластьКонтрагент.Параметры.ПараметрРасшифровки = ВыборкаИНН.Контрагент;
		Если ЭтоПисьмо Тогда
			ОбластьКонтрагент.Параметры.СсылкаВКонтурФокусе				= Фокус_ПолучитьЗначение(ВыборкаИНН.ИНН,"req","focusHref");
			ОбластьКонтрагент.Параметры.СсылкаВКонтурФокусеРасшифровка	= Фокус_ПолучитьЗначение(ВыборкаИНН.ИНН,"req","focusHref");
		Иначе
			ОбластьКонтрагент.Параметры.СсылкаВКонтурФокусе				= "Ссылка в Контур.Фокусе";
			ОбластьКонтрагент.Параметры.СсылкаВКонтурФокусеРасшифровка	= Фокус_ПолучитьЗначение(ВыборкаИНН.ИНН,"req","focusHref");
		КонецЕсли;
			
		ТабДанные.Вывести(ОбластьКонтрагент);
		
		ВыборкаСтатус = ВыборкаИНН.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСтатус.Следующий() Цикл
			
			ЗачеркнутьМаркер = Ложь;
			
			Если ВыборкаСтатус.Статус = "Активный" Тогда
				ТабДанные.Вывести(ОбластьПоявились);
			Иначе
				ЗачеркнутьМаркер = Истина;
				ТабДанные.Вывести(ОбластьПропали);
			КонецЕсли;
			
			Выборка = ВыборкаСтатус.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ТекОбласть = Макет.ПолучитьОбласть("Маркер"+СокрЛП(Выборка.Категория)+?(ЗачеркнутьМаркер,"Отмена",""));
				ТекОбласть.Параметры.Значение = Выборка.Наименование + " ("+Формат(Выборка.ДатаСоздания,"ДФ=dd.MM.yy")+")";
				ТабДанные.Вывести(ТекОбласть);
				
				Если ЗначениеЗаполнено(Выборка.Расшифровка) Тогда
					ОбластьМаркерРасшифровкаСтрока.Параметры.Значение = Выборка.Расшифровка;
					ТабДанные.Вывести(ОбластьМаркерРасшифровкаСтрока);	
				КонецЕсли;
				
				НоваяСтрокаСработавших = СписокСработавшихМаркеров.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаСработавших,Выборка);
				НоваяСтрокаСработавших.Категория = СокрЛП(НоваяСтрокаСработавших.Категория);
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ОбластьТекст = Макет.ПолучитьОбласть("ТекстНейтральный");
	Если СписокСработавшихМаркеров<>Неопределено Тогда
		ТабКрасных		= СписокСработавшихМаркеров.Скопировать(Новый Структура("Категория,Статус","Красный","Активный"));
		ТабЖелтых		= СписокСработавшихМаркеров.Скопировать(Новый Структура("Категория,Статус","Желтый","Активный"));
		ТабЗеленых		= СписокСработавшихМаркеров.Скопировать(Новый Структура("Категория,Статус","Зеленый","Активный"));
		ТабНеактивных	= СписокСработавшихМаркеров.Скопировать(Новый Структура("Статус","НеАктивный"));
		
		ТабКрасных.Свернуть("Контрагент");
		ТабЖелтых.Свернуть("Контрагент");
		ТабЗеленых.Свернуть("Контрагент");
		ТабНеактивных.Свернуть("Контрагент");
		Если ЗначениеЗаполнено(ЗаголовокПисьма) Тогда
			ТелоПисьма=Фокус_Наблюдение_ЗаполнитьШаблоны(ЗаголовокПисьма,СписокМаркеров,СписокКонтрагентов)+Символы.ПС;
		Иначе
			ТелоПисьма = "Список изменений по организациям, за которыми вы ведете наблюдение."+Символы.ПС;
		КонецЕсли;
		Разделитель="";
		Если ТабКрасных.Количество()>0 Тогда
			ТелоПисьма = ТелоПисьма + Разделитель + "Новые критичные изменения - "+ТабКрасных.Количество()+" компании";
			Разделитель=", ";
		КонецЕсли;
		Если ТабЖелтых.Количество()>0 Тогда
			ТелоПисьма = ТелоПисьма + Разделитель + "Новые рисковые изменения - "+ТабЖелтых.Количество()+" компании";
			Разделитель=", ";
		КонецЕсли;
		Если ТабЗеленых.Количество()>0 Тогда
			ТелоПисьма = ТелоПисьма + Разделитель + "Новые факты активной деятельности - "+ТабЗеленых.Количество()+" компании";
			Разделитель=", ";
		КонецЕсли;
		Если ТабНеактивных.Количество()>0 Тогда
			ТелоПисьма = ТелоПисьма + Разделитель + "Устаревшие маркеры - "+ТабНеактивных.Количество()+" компании";
			Разделитель=", ";
		КонецЕсли;
		ОбластьТекст.Параметры.Значение=СокрЛП(ТелоПисьма);
	КонецЕсли;
	ТабШапка.Вывести(ОбластьТекст);
	
	Таб.Вывести(ТабШапка);
	Таб.Вывести(ТабДанные);
	Таб.АвтоМасштаб = Истина;
	
	Возврат Таб;
	
КонецФункции

// вспомогательные функции для вывода данных

Функция Фокус_ВыводДанных_ВывестиЗначение(ПараметрыВывода,ИмяОбласти,Значение = Неопределено,Имя = Неопределено,Расшифровка = Неопределено)
	
	ТабличныйДокумент = ПараметрыВывода.ТабличныйДокумент;
	Область = ПараметрыВывода.Области[ИмяОбласти];
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Попытка
			Область.Параметры.Значение = Значение;
		Исключение
		КонецПопытки;
	КонецЕсли;
	Если ЗначениеЗаполнено(Имя) Тогда
		Область.Параметры.Имя = Имя;
	КонецЕсли;
	Если ЗначениеЗаполнено(Расшифровка) Тогда
		Область.Параметры.ПараметрРасшифровки = Расшифровка;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(Область);
	
КонецФункции

Функция Фокус_ВыводДанных_БлокДанных_Инициализировать()
	
	БлокДанных = Новый Структура();
	БлокДанных.Вставить("Отступ",Истина);
	БлокДанных.Вставить("Заголовок");
	БлокДанных.Вставить("ИмяОбластиЗаголовка");
	БлокДанных.Вставить("ВыводитьЗаголовокБезДанных",Ложь);
	БлокДанных.Вставить("ГруппироватьЗначения",	Ложь);
	БлокДанных.Вставить("СвернутьГруппировку",	Истина);
	БлокДанных.Вставить("ЗаголовокГрупировкиРавенПервомуЗначению",	Ложь);

		ТаблицаДанных = Новый ТаблицаЗначений();
		ТаблицаДанных.Колонки.Добавить("ИмяОбласти");
		ТаблицаДанных.Колонки.Добавить("Значение");
		ТаблицаДанных.Колонки.Добавить("Имя");
		ТаблицаДанных.Колонки.Добавить("Расшифровка");
	
	БлокДанных.Вставить("ТаблицаДанных", ТаблицаДанных);
	
	Возврат БлокДанных;	
	
КонецФункции

Процедура Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, 
														ИсточникДанных = Неопределено, 
														ИмяОбласти, 
														Значение = Неопределено, 
														ЗначениеПуть = Неопределено, 
														Имя = Неопределено, 
														ИмяПуть = Неопределено, 
														Расшифровка = Неопределено)
	
	Если ЗначениеЗаполнено(ЗначениеПуть) Тогда
		Если ИсточникДанных = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Значение = Фокус_ПолучитьЗначениеПоляДанных(ИсточникДанных,ЗначениеПуть);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = БлокДанных.ТаблицаДанных.Добавить();
	НоваяСтрока.ИмяОбласти = ИмяОбласти;
	НоваяСтрока.Значение = Значение;
	НоваяСтрока.Имя = Имя;
	НоваяСтрока.Расшифровка = Расшифровка;
	
КонецПроцедуры

Процедура Фокус_ВыводДанных_БлокДанных_ДобавитьСписокЗначений(БлокДанных, ИмяОбласти, Массив)
	
	Для Каждого Эл Из Массив Цикл
		Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, ,ИмяОбласти,Эл);
	КонецЦикла;
	
КонецПроцедуры

Процедура Фокус_ВыводДанных_БлокДанных_ДобавитьПредставленияИзТаблицыЗначений(БлокДанных, ИмяОбласти, ТЗ)
	
	Для Каждого Стр Из ТЗ Цикл
		Фокус_ВыводДанных_БлокДанных_ДобавитьЗначение(БлокДанных, ,ИмяОбласти,Стр.Представление);
	КонецЦикла;
	
КонецПроцедуры

Процедура Фокус_ВыводДанных_БлокДанных_Вывести(БлокДанных,ПараметрыВывода)
	
	Если БлокДанных.ТаблицаДанных.Количество() = 0 Тогда
		Если Не БлокДанных.ВыводитьЗаголовокБезДанных Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если БлокДанных.Отступ Тогда
		Фокус_ВыводДанных_ВывестиЗначение(ПараметрыВывода, "Отступ");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БлокДанных.Заголовок) Тогда
		Фокус_ВыводДанных_ВывестиЗначение(ПараметрыВывода, БлокДанных.ИмяОбластиЗаголовка, БлокДанных.Заголовок);
	КонецЕсли;
	
	Если БлокДанных.ТаблицаДанных.Количество() > 0 Тогда
		
		Если БлокДанных.ЗаголовокГрупировкиРавенПервомуЗначению Тогда
			Стр = БлокДанных.ТаблицаДанных[0];
			Фокус_ВыводДанных_ВывестиЗначение(ПараметрыВывода, Стр.ИмяОбласти, Стр.Значение,Стр.Имя,Стр.Расшифровка);
		КонецЕсли;			
			
		Если БлокДанных.ГруппироватьЗначения Тогда
			ПараметрыВывода.ТабличныйДокумент.НачатьГруппуСтрок(,НЕ БлокДанных.СвернутьГруппировку);
		КонецЕсли;
		
		БылаПервая = Ложь;
		Для Каждого Стр из БлокДанных.ТаблицаДанных Цикл
			Если БлокДанных.ЗаголовокГрупировкиРавенПервомуЗначению Тогда
				Если Не БылаПервая Тогда
					БылаПервая = Истина;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Фокус_ВыводДанных_ВывестиЗначение(ПараметрыВывода, Стр.ИмяОбласти, Стр.Значение,Стр.Имя,Стр.Расшифровка);
		КонецЦикла;
		
		Если БлокДанных.ГруппироватьЗначения Тогда
		  	ПараметрыВывода.ТабличныйДокумент.ЗакончитьГруппуСтрок();
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

Функция Фокус_ВыводДанных_ПоказатьСписокМаркеров(СписокМаркеров) Экспорт
	
	Таб = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("Макет");
	
	Таб.Вывести(Макет.ПолучитьОбласть("Отступ"));
	
	ОбластьКрасный		= Макет.ПолучитьОбласть("МаркерКрасный");
	ОбластьЖелтый		= Макет.ПолучитьОбласть("МаркерЖелтый");
	ОбластьЗеленый		= Макет.ПолучитьОбласть("МаркерЗеленый");
	ОбластьНейтральный	= Макет.ПолучитьОбласть("МаркерНейтральный");
	
	ОбластьРасшифровка = Макет.ПолучитьОбласть("МаркерРасшифровкаСтрока");
	
	ОбластьОтступ = Макет.ПолучитьОбласть("ОтступНебольшой");
	
	Для Каждого Стр Из СписокМаркеров Цикл
		Если Стр.Категория = "Красный" Тогда
			ТекОбласть = ОбластьКрасный;
		ИначеЕсли Стр.Категория = "Желтый" Тогда
			ТекОбласть = ОбластьЖелтый;
		ИначеЕсли Стр.Категория = "Зеленый" Тогда
			ТекОбласть = ОбластьЗеленый;
		Иначе
			ТекОбласть = ОбластьНейтральный;
		КонецЕсли;
		
		ТекОбласть.Параметры.Значение = Стр.Наименование;
		Таб.Вывести(ТекОбласть);
		Если ЗначениеЗаполнено(Стр.Расшифровка) Тогда
			ОбластьРасшифровка.Параметры.Значение = Стр.Расшифровка;
			Таб.Вывести(ОбластьРасшифровка);	
		КонецЕсли;
		Таб.Вывести(ОбластьОтступ);
	КонецЦикла;	
		
	Возврат Таб;
	
КонецФункции

Процедура Фокус_ВыводДанных_ПодготовитьТаблицуДляЗапроса(ТаблицаДанных,МассивКолонок,МассивТипов)
	Если МассивКолонок.Количество()<>МассивТипов.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Для Сч=0 По МассивКолонок.Количество()-1 Цикл
		ИмяКолонки	= МассивКолонок[Сч];
		Тип			= МассивТипов[Сч];
		ТаблицаДанных.Колонки.Добавить(ИмяКолонки+"_нов", Тип);
	КонецЦикла;
	Для Каждого СтрокаТЧ Из ТаблицаДанных Цикл
		Для Сч=0 По МассивКолонок.Количество()-1 Цикл
			ИмяКолонки	= МассивКолонок[Сч];
			Тип			= МассивТипов[Сч];
			СтрокаТЧ[ИмяКолонки+"_нов"]=Тип.ПривестиЗначение(СтрокаТЧ[ИмяКолонки]);
		КонецЦикла;
	КонецЦикла;
	Для Сч=0 По МассивКолонок.Количество()-1 Цикл
		ИмяКолонки	= МассивКолонок[Сч];
		ТаблицаДанных.Колонки.Удалить(ИмяКолонки);
		ТаблицаДанных.Колонки[ИмяКолонки+"_нов"].Имя=ИмяКолонки;
	КонецЦикла;
КонецПроцедуры // Фокус_ХранениеДанных_ПодготовитьТаблицуДляЗапроса()


//-------------------------------------------------------
//
//	РАБОТА С ПОЧТОЙ
// 

Функция Фокус_ОтправитьТестовыйEmail(Получатель) Экспорт
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Тема","Контур.Фокус: тестовое письмо");
	ПараметрыПисьма.Вставить("Получатель",Получатель);
	ПараметрыПисьма.Вставить("Тело","Вам пришло тестовое письмо из настроек модуля 1С для Контур.Фокус");
	
	Возврат Фокус_ОтправитьEmail(ПараметрыПисьма);
	
КонецФункции

Функция Фокус_ОтправитьEmail(ПараметрыПисьма,ПараметрыПочты = Неопределено) Экспорт
	
	Если ПараметрыПочты = Неопределено Тогда
		ПараметрыПочты = Фокус_ХранениеДанных_ПрочитатьНастройку("ПараметрыПочты");
		Если НЕ ЗначениеЗаполнено(ПараметрыПочты) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Профиль = Новый ИнтернетПочтовыйПрофиль;

	Профиль.АдресСервераSMTP = ПараметрыПочты.СерверSMTP;
	Профиль.ПортSMTP         = ПараметрыПочты.ПортSMTP;
    Профиль.ПарольSMTP       = ПараметрыПочты.ПарольSMTP;
    Профиль.ПользовательSMTP = ПараметрыПочты.ПользовательSMTP;
	Профиль.АутентификацияSMTP = СпособSMTPАутентификации.Login;
	
	Попытка
		Профиль.ИспользоватьSSLSMTP = ПараметрыПочты.ИспользоватьБезопасноеСоединение;
	Исключение
	КонецПопытки;
	
	ИнтернетПочта = Новый ИнтернетПочта;

	Попытка
    	ИнтернетПочта.Подключиться(Профиль);
	Исключение
		#Если Клиент Тогда
			Сообщить(ОписаниеОшибки());
		#КонецЕсли
		Возврат Ложь;
	КонецПопытки;
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = ПараметрыПисьма.Тема;
	
	Получатель = Письмо.Получатели.Добавить(ПараметрыПисьма.Получатель);
	Получатель.ОтображаемоеИмя = ПараметрыПисьма.Получатель;
	
	Письмо.ИмяОтправителя              = "Контур.Фокус";
	Письмо.Отправитель.ОтображаемоеИмя = "Контур.Фокус";
	Письмо.Отправитель.Адрес           = ПараметрыПочты.ПользовательSMTP;
	
	Если ПараметрыПисьма.Свойство("Вложение") Тогда
		
		Письмо.Вложения.Добавить(ПараметрыПисьма.Вложение.ПутьКФайлу,ПараметрыПисьма.Вложение.ИмяФайла);
		
	КонецЕсли;
	
	Текст = Письмо.Тексты.Добавить(ПараметрыПисьма.Тело);
	
	ИнтернетПочта.Послать(Письмо);
	
КонецФункции

//-------------------------------------------------------
//
//	ПРЕДСТАВЛЕНИЕ ДАННЫХ
// 

// короткая функция для расшифровки маркеров
Функция Фокус_Сумма(Данные,Окончание = "руб.")
	
	Если ТипЗнч(Данные) = Тип("Число") Тогда
		Возврат Формат(Данные,"ЧЦ=15; ЧРГ=")+" "+Окончание;
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция Фокус_Дата(Данные)
	
	Если СтрДлина(Данные) = 10 Тогда
		
		Год = Лев(Данные,4);
		Месяц = Сред(Данные,6,2);
		День = Прав(Данные,2);
		
		Возврат Дата(Год,Месяц,День);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция Фокус_ИзменениеЧисел(ТекущееЗначение,СтароеЗначение,ЕдИзм = "руб.")
	
	Если ТекущееЗначение > СтароеЗначение Тогда
		Разность = ТекущееЗначение - СтароеЗначение;
		Если СтароеЗначение = 0 тогда
			Процент = 100;
		Иначе
			Процент = (ТекущееЗначение/СтароеЗначение)*100-100;
		КонецЕсли;	
		Возврат "Увеличение на "+Фокус_Сумма(Разность,ЕдИзм)+" ("+Фокус_Сумма(Процент,"%")+")";
	Иначе
		Разность = СтароеЗначение - ТекущееЗначение;
		Если СтароеЗначение = 0 Тогда
			Процент = 100;
		Иначе
			Процент = 100-(ТекущееЗначение/СтароеЗначение)*100;
		КонецЕсли;	
		Возврат "Уменьшение на "+Фокус_Сумма(Разность,ЕдИзм)+" ("+Фокус_Сумма(Процент,"%")+")";
	КонецЕсли;
	
КонецФункции

Функция Фокус_РасхождениеСписков(Знач ТекущийСписок,Знач ПредыдущийСписок)
	
	Если НЕ ТипЗнч(ТекущийСписок) = Тип("ТаблицаЗначений") Тогда
		ТекущийСписок = Новый ТаблицаЗначений;
		ТекущийСписок.Колонки.Добавить("Представление");
		Если НЕ ТипЗнч(ПредыдущийСписок) = Тип("ТаблицаЗначений") Тогда
			Возврат "";
		КонецЕсли;
	КонецЕсли;
		
	
	ТекущийСписок.Колонки.Добавить("Признак");
	ТекущийСписок.ЗаполнитьЗначения(-1,"Признак");
	
	Если ТипЗнч(ПредыдущийСписок) = Тип("ТаблицаЗначений") Тогда
		Для Каждого Стр Из ПредыдущийСписок Цикл
			НоваяСтрока = ТекущийСписок.Добавить();
			НоваяСтрока.Представление = Стр.Представление;
			НоваяСтрока.Признак = 1;
		КонецЦикла;
	КонецЕсли;
	
	ТекущийСписок.Свернуть("Представление","Признак");
	
	ТекстРасхождения = "";
	ТекущийСписок.Сортировать("Признак");
	Для Каждого Стр ИЗ ТекущийСписок Цикл
		Если Стр.Признак<0 Тогда
			ТекстРасхождения = ТекстРасхождения+"Появилось значение: "+Стр.Представление+Символы.ПС;
		ИначеЕсли Стр.Признак>0 Тогда
			ТекстРасхождения = ТекстРасхождения+"Исчезло значение: "+Стр.Представление+Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстРасхождения;
	
КонецФункции

Функция Фокус_ПолучитьПредставлениеДанных_Адрес(Данные)
	
	ДатаАдреса =  Фокус_ПолучитьЗначениеПоляДанных(Данные,"date");
	
	Если Данные.Свойство("parsedAddressRF") Тогда
		
		ТекАдрес = Фокус_Интеграция_ПредставлениеАдреса(Данные.parsedAddressRF);
		
	ИначеЕсли Данные.Свойство("shortenedAddress") Тогда
		
		ТекАдрес = Фокус_Интеграция_ПредставлениеАдреса(Данные.shortenedAddress);
		
	ИначеЕсли Данные.Свойство("foreignAddress") Тогда
		
		Страна	= Фокус_ПолучитьЗначениеПоляДанных(Данные.foreignAddress,"countryName");
		Адрес	= Фокус_ПолучитьЗначениеПоляДанных(Данные.foreignAddress,"addressString");

		ТекАдрес = "";
		
		Если ЗначениеЗаполнено(Страна) Тогда
			ТекАдрес = Страна;
		КонецЕсли;
		Если ЗначениеЗаполнено(Адрес) Тогда
			Если НЕ ТекАдрес = "" Тогда
				ТекАдрес = ТекАдрес + ", " + Адрес;
			Иначе
				ТекАдрес = Адрес;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекАдрес) Тогда
		Если ЗначениеЗаполнено(ДатаАдреса) Тогда
			Возврат ТекАдрес + " ("+Фокус_ПолучитьПредставлениеДанных_Дата(ДатаАдреса)+")";
		Иначе
			Возврат ТекАдрес;
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция Фокус_ПолучитьПредставлениеДанных_УставныйКапитал(Данные) 
	
	СуммаКапитала	= Фокус_ПолучитьЗначениеПоляДанных(Данные,"sum");
	ДатаКапитала	= Фокус_ПолучитьЗначениеПоляДанных(Данные,"date");

	Если ЗначениеЗаполнено(СуммаКапитала) Тогда
		СуммаКапитала = Фокус_ПолучитьПредставлениеДанных_Сумма(СуммаКапитала);
		Если ЗначениеЗаполнено(ДатаКапитала) Тогда
			СуммаКапитала = СуммаКапитала + " ("+Фокус_ПолучитьПредставлениеДанных_Дата(ДатаКапитала)+")";
		КонецЕсли;
	КонецЕсли;
	
	Возврат СуммаКапитала;
	
КонецФункции

Функция Фокус_ПолучитьПредставлениеДанных_Дата(Данные)
	
	ТекДата = Данные;
			
	Если ТипЗнч(Данные) = Тип("Строка") Тогда
		Если СтрДлина(Данные) = 10 Тогда
			Год = Лев(Данные,4);
			Месяц = Сред(Данные,6,2);
			День = Прав(Данные,2);
			
			Попытка
				ТекДата = Дата(Год,Месяц,День);
				ТекДата = Формат(ТекДата,"ДФ=dd.MM.yyyy");
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекДата;
	
КонецФункции

Функция Фокус_ПолучитьПредставлениеДанных_НомерТелефона(Данные)
	
	Если ТипЗнч(Данные) = Тип("Строка") Тогда
		Если СтрДлина(Данные) = 11 Тогда
			
			Возврат Лев(Данные,1)+" "+Сред(Данные,2,3)+" "+Сред(Данные,5,3)+"-"+Сред(Данные,8,2)+"-"+Прав(Данные,2);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция Фокус_ПолучитьПредставлениеДанных_Филиалы(Данные)
	
	ТаблицаРезультата = Новый ТаблицаЗначений();
	ТаблицаРезультата.Колонки.Добавить("Дата");
	ТаблицаРезультата.Колонки.Добавить("Представление");
	
	Если Данные.Свойство("UL") Тогда
		Если Данные.UL.Свойство("branches") Тогда
			
			Для Каждого Эл Из Данные.UL.branches Цикл
				
				НоваяСтрока = ТаблицаРезультата.Добавить();
				НоваяСтрока.Дата = Фокус_ПолучитьЗначениеПоляДанных(Эл,"date");
				НоваяСтрока.Представление = Фокус_ПолучитьЗначениеПоляДанных(Эл,"name");
				Адрес = Фокус_ПолучитьПредставлениеДанных_Адрес(Эл);
				
				Если ЗначениеЗаполнено(НоваяСтрока.Представление) И ЗначениеЗаполнено(Адрес) Тогда
					НоваяСтрока.Представление = НоваяСтрока.Представление+", "+Адрес;
				ИначеЕсли ЗначениеЗаполнено(Адрес) Тогда
					НоваяСтрока.Представление = Адрес;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаРезультата.Сортировать("Дата Убыв");
	
	Возврат ТаблицаРезультата;
	
КонецФункции

Функция Фокус_ПолучитьПредставлениеДанных_ИсторияАдресов(Данные)
	
	ТаблицаРезультата = Новый ТаблицаЗначений();
	ТаблицаРезультата.Колонки.Добавить("Дата");
	ТаблицаРезультата.Колонки.Добавить("Представление");
	
	Если Данные.Свойство("UL") Тогда
		Если Данные.UL.Свойство("history") Тогда
			Если Данные.UL.history.Свойство("legalAddresses") Тогда
				
				Для Каждого Эл Из Данные.UL.history.legalAddresses Цикл
				
					НоваяСтрока = ТаблицаРезультата.Добавить();
					НоваяСтрока.Дата = Фокус_ПолучитьЗначениеПоляДанных(Эл,"date");
					НоваяСтрока.Представление = Фокус_ПолучитьПредставлениеДанных_Адрес(Эл);
					
				КонецЦикла;
					
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаРезультата.Сортировать("Дата Убыв");
	
	Возврат ТаблицаРезультата;
	
КонецФункции

Функция Фокус_ПолучитьПредставлениеДанных_ВидДеятельности(Данные)
	
	Представление = Неопределено;
	
	Если Данные.Свойство("text") Тогда	
		
		Представление = Данные.text;
		
		Если Данные.Свойство("code") Тогда
			Представление = Представление + " ("+Данные.code+")";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Представление;
			
КонецФункции

Функция Фокус_ПолучитьПредставлениеДанных_Руководители(Данные)
	
	ТаблицаРезультата = Новый ТаблицаЗначений();
	ТаблицаРезультата.Колонки.Добавить("Дата");
	ТаблицаРезультата.Колонки.Добавить("Представление");
	ТаблицаРезультата.Колонки.Добавить("Значение");
	
		Для Каждого Эл Из Данные Цикл
			
			НоваяСтрока = ТаблицаРезультата.Добавить();
			НоваяСтрока.Дата = Фокус_ПолучитьЗначениеПоляДанных(Эл,"date");
			НоваяСтрока.Значение = Эл;
			
			Представление = Фокус_ПолучитьЗначениеПоляДанных(Эл,"fio");
			Должность = Фокус_ПолучитьЗначениеПоляДанных(Эл,"position");
			Дата = Фокус_ПолучитьПредставлениеДанных_Дата(НоваяСтрока.Дата);
			
			Если ЗначениеЗаполнено(Должность) Тогда
				Представление = Представление + ", "+НРег(Должность);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Дата) Тогда
				Представление = Представление + " ("+Дата+")";
			КонецЕсли;
			
			НоваяСтрока.Представление = Представление;
			
		КонецЦикла;
	
	ТаблицаРезультата.Сортировать("Дата Убыв");
	
	Возврат ТаблицаРезультата;
	
КонецФункции

Функция Фокус_ПолучитьПредставлениеДанных_УпрКомпании(Данные)
	
	ТаблицаРезультата = Новый ТаблицаЗначений();
	ТаблицаРезультата.Колонки.Добавить("Дата");
	ТаблицаРезультата.Колонки.Добавить("Представление");
	ТаблицаРезультата.Колонки.Добавить("Значение");
	
		Для Каждого Эл Из Данные Цикл
			
			НоваяСтрока = ТаблицаРезультата.Добавить();
			НоваяСтрока.Дата = Фокус_ПолучитьЗначениеПоляДанных(Эл,"date");
			НоваяСтрока.Значение = Эл;
			
			Представление = Фокус_ПолучитьЗначениеПоляДанных(Эл,"name");
			ИНН	= Фокус_ПолучитьЗначениеПоляДанных(Эл,"inn");
			ОГРН= Фокус_ПолучитьЗначениеПоляДанных(Эл,"ogrn");
			Дата = Фокус_ПолучитьПредставлениеДанных_Дата(НоваяСтрока.Дата);
			
			Если ЗначениеЗаполнено(ИНН) Тогда
				Представление = Представление + ", ИНН: "+ИНН;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОГРН) Тогда
				Представление = Представление + ", ОГРН: "+ОГРН;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Дата) Тогда
				Представление = Представление + " ("+Дата+")";
			КонецЕсли;
			
			НоваяСтрока.Представление = Представление;
			
		КонецЦикла;
	
	ТаблицаРезультата.Сортировать("Дата Убыв");
	
	Возврат ТаблицаРезультата;
	
КонецФункции

Функция Фокус_ПолучитьПредставлениеДанных_Сумма(Данные)
	
	Если ТипЗнч(Данные) = Тип("Число") Тогда
		Возврат Формат(Данные,"ЧЦ=15; ЧДЦ=2; ЧРГ=");
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция Фокус_ПолучитьПредставлениеДанных_ДоляУК(Данные)
	
	Представление = "";
	
	Если Данные.Свойство("sum") Тогда
		Представление = Фокус_ПолучитьПредставлениеДанных_Сумма(Данные.sum)+" руб.";
	ИначеЕсли Данные.Свойство("percentagePlain") тогда
		Представление = Фокус_ПолучитьПредставлениеДанных_Сумма(Данные.percentagePlain)+" %";
	ИначеЕсли Данные.Свойство("percentageNominator") И Данные.Свойство("percentageDenominator") Тогда
        Представление = СокрЛП(Данные.percentageNominator)+"/"+СокрЛП(Данные.percentageDenominator);
	КонецЕсли;	
	
	Возврат Представление;
	
КонецФункции

Функция Фокус_ПолучитьПредставлениеДанных_ПредшественникиПреемники(Данные)
	
	ТаблицаРезультата = Новый ТаблицаЗначений;
	ТаблицаРезультата.Колонки.Добавить("Дата");
	ТаблицаРезультата.Колонки.Добавить("Представление");
	ТаблицаРезультата.Колонки.Добавить("Значение");
	
	Для каждого Эл Из Данные Цикл
		
		НоваяСтрока = ТаблицаРезультата.Добавить();
		НоваяСтрока.Представление = "";
		НоваяСтрока.Значение = Эл;
		
		Наименование		= Фокус_ПолучитьЗначениеПоляДанных(Эл, "name");
		ИНН					= Фокус_ПолучитьЗначениеПоляДанных(Эл, "inn");
		НоваяСтрока.Дата	= Фокус_ПолучитьЗначениеПоляДанных(Эл, "date");
		
		Если ЗначениеЗаполнено(Наименование) Тогда
			НоваяСтрока.Представление = СокрЛП(НоваяСтрока.Представление + " " + Наименование);
		КонецЕсли;
		Если ЗначениеЗаполнено(ИНН) Тогда
			НоваяСтрока.Представление = СокрЛП(НоваяСтрока.Представление + " ИНН: "+ИНН);
		КонецЕсли;
		Если ЗначениеЗаполнено(НоваяСтрока.Дата) Тогда
			НоваяСтрока.Представление = НоваяСтрока.Представление + " ("+Фокус_ПолучитьПредставлениеДанных_Дата(НоваяСтрока.Дата)+")";
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаРезультата.Сортировать("Дата Убыв");
	
	Возврат ТаблицаРезультата;
	
КонецФункции

Функция Фокус_ПолучитьПредставлениеДанных_УчредителиИностр(Данные)
	
	ТаблицаРезультата = Новый ТаблицаЗначений;
	ТаблицаРезультата.Колонки.Добавить("Дата");
	ТаблицаРезультата.Колонки.Добавить("Представление");
	ТаблицаРезультата.Колонки.Добавить("Значение");
	
	Для каждого Эл Из Данные Цикл
		
		НоваяСтрока = ТаблицаРезультата.Добавить();
		НоваяСтрока.Представление = "";
		НоваяСтрока.Значение = Эл;
		
		Наименование		= Фокус_ПолучитьЗначениеПоляДанных(Эл, "fullName");
		Страна				= Фокус_ПолучитьЗначениеПоляДанных(Эл, "country");
		Доля				= Фокус_ПолучитьЗначениеПоляДанных(Эл, "share");
		НоваяСтрока.Дата	= Фокус_ПолучитьЗначениеПоляДанных(Эл, "date");
		
		Если ЗначениеЗаполнено(Доля) Тогда
			НоваяСтрока.Представление = Фокус_ПолучитьПредставлениеДанных_ДоляУК(Доля);
		КонецЕсли;
		Если ЗначениеЗаполнено(Наименование) Тогда
			НоваяСтрока.Представление = СокрЛП(НоваяСтрока.Представление + " " + Наименование);
		КонецЕсли;
		Если ЗначениеЗаполнено(Страна) Тогда
			НоваяСтрока.Представление = СокрЛП(НоваяСтрока.Представление + " Страна: "+Страна);
		КонецЕсли;
		Если ЗначениеЗаполнено(НоваяСтрока.Дата) Тогда
			НоваяСтрока.Представление = НоваяСтрока.Представление + " ("+Фокус_ПолучитьПредставлениеДанных_Дата(НоваяСтрока.Дата)+")";
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаРезультата.Сортировать("Дата Убыв");
	
	Возврат ТаблицаРезультата;
	
КонецФункции

Функция Фокус_ПолучитьПредставлениеДанных_УчредителиЮЛ(Данные)
	
	ТаблицаРезультата = Новый ТаблицаЗначений;
	ТаблицаРезультата.Колонки.Добавить("Дата");
	ТаблицаРезультата.Колонки.Добавить("Представление");
	ТаблицаРезультата.Колонки.Добавить("Значение");
	
	Для каждого Эл Из Данные Цикл
		
		НоваяСтрока = ТаблицаРезультата.Добавить();
		НоваяСтрока.Представление = "";
		
		Наименование		= Фокус_ПолучитьЗначениеПоляДанных(Эл, "fullName");
		ИНН		= Фокус_ПолучитьЗначениеПоляДанных(Эл, "inn");
		Доля	= Фокус_ПолучитьЗначениеПоляДанных(Эл, "share");
		НоваяСтрока.Дата	= Фокус_ПолучитьЗначениеПоляДанных(Эл, "date");
		
		Если ЗначениеЗаполнено(Доля) Тогда
			НоваяСтрока.Представление = Фокус_ПолучитьПредставлениеДанных_ДоляУК(Доля);
		КонецЕсли;
		Если ЗначениеЗаполнено(Наименование) Тогда
			НоваяСтрока.Представление = СокрЛП(НоваяСтрока.Представление + " " + Наименование);
		КонецЕсли;
		Если ЗначениеЗаполнено(ИНН) Тогда
			НоваяСтрока.Представление = СокрЛП(НоваяСтрока.Представление + " ИНН: "+ИНН);
		КонецЕсли;
		Если ЗначениеЗаполнено(НоваяСтрока.Дата) Тогда
			НоваяСтрока.Представление = НоваяСтрока.Представление + " ("+Фокус_ПолучитьПредставлениеДанных_Дата(НоваяСтрока.Дата)+")";
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаРезультата.Сортировать("Дата Убыв");
	
	Возврат ТаблицаРезультата;
	
КонецФункции

Функция Фокус_ПолучитьПредставлениеДанных_УчредителиФЛ(Данные)
	
	ТаблицаРезультата = Новый ТаблицаЗначений;
	ТаблицаРезультата.Колонки.Добавить("Дата");
	ТаблицаРезультата.Колонки.Добавить("Представление");
	ТаблицаРезультата.Колонки.Добавить("Значение");
	
	Для каждого Эл Из Данные Цикл
		
		НоваяСтрока = ТаблицаРезультата.Добавить();
		НоваяСтрока.Представление = "";
		
		ФИО		= Фокус_ПолучитьЗначениеПоляДанных(Эл, "fio");
		Доля	= Фокус_ПолучитьЗначениеПоляДанных(Эл, "share");
		НоваяСтрока.Дата	= Фокус_ПолучитьЗначениеПоляДанных(Эл, "date");
		
		Если ЗначениеЗаполнено(Доля) Тогда
			НоваяСтрока.Представление = Фокус_ПолучитьПредставлениеДанных_ДоляУК(Доля);
		КонецЕсли;
		Если ЗначениеЗаполнено(ФИО) Тогда
			НоваяСтрока.Представление = СокрЛП(НоваяСтрока.Представление + " " + ФИО);
		КонецЕсли;
		Если ЗначениеЗаполнено(НоваяСтрока.Дата) Тогда
			НоваяСтрока.Представление = НоваяСтрока.Представление + " ("+Фокус_ПолучитьПредставлениеДанных_Дата(НоваяСтрока.Дата)+")";
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаРезультата.Сортировать("Дата Убыв");
	
	Возврат ТаблицаРезультата;
	
КонецФункции

Функция Фокус_ПолучитьПредставлениеДанных_Учредители(Данные)
	
	ТаблицаРезультата = Новый ТаблицаЗначений;
	ТаблицаРезультата.Колонки.Добавить("Дата");
	ТаблицаРезультата.Колонки.Добавить("Представление");
	ТаблицаРезультата.Колонки.Добавить("Значение");
	
	Если Данные.Свойство("foundersFL") Тогда
		Таб = Фокус_ПолучитьПредставлениеДанных_УчредителиФЛ(Данные);
		Для Каждого Стр Из Таб Цикл
			НоваяСтрока = ТаблицаРезультата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
		КонецЦикла;
	КонецЕсли;
	
	Если Данные.Свойство("foundersUL") Тогда
		Таб = Фокус_ПолучитьПредставлениеДанных_УчредителиЮЛ(Данные.foundersUL);
		Для Каждого Стр Из Таб Цикл
			НоваяСтрока = ТаблицаРезультата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
		КонецЦикла;
	КонецЕсли;
	
	Если Данные.Свойство("foundersForeign") Тогда
		Таб = Фокус_ПолучитьПредставлениеДанных_УчредителиИностр(Данные.foundersForeign);
		Для Каждого Стр Из Таб Цикл
			НоваяСтрока = ТаблицаРезультата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаРезультата.Сортировать("Дата Убыв");
	
	Возврат ТаблицаРезультата;
	
КонецФункции

Функция Фокус_ПолучитьПредставлениеДанных_Статус(Данные,ИмяОбласти = Неопределено)
	
	СтатусПредставление = Фокус_ПолучитьЗначениеПоляДанных(Данные,"statusString");
	СтатусДата			= Фокус_ПолучитьЗначениеПоляДанных(Данные,"date");
	
	СтатусРеорганизация	= Фокус_ПолучитьЗначениеПоляДанных(Данные,"reorganizing");
	СтатусЛиквидация	= Фокус_ПолучитьЗначениеПоляДанных(Данные,"dissolving");
	СтатусНедействующее = Фокус_ПолучитьЗначениеПоляДанных(Данные,"dissolved");
	
	Если СтатусЛиквидация = Истина ИЛИ СтатусНедействующее = Истина Тогда
		ИмяОбласти = "ТекстПлохой";
		Если ЗначениеЗаполнено(СтатусДата) Тогда
			СтатусПредставление = СтатусПредставление+" ("+Фокус_ПолучитьПредставлениеДанных_Дата(СтатусДата)+")";
		КонецЕсли;
	ИначеЕсли СтатусРеорганизация = Истина Тогда
		ИмяОбласти = "ТекстОбратитьВнимание";
		Если ЗначениеЗаполнено(СтатусДата) Тогда
			СтатусПредставление = СтатусПредставление+" ("+Фокус_ПолучитьПредставлениеДанных_Дата(СтатусДата)+")";
		КонецЕсли;
	Иначе
		ИмяОбласти = "ТекстХороший";
	КонецЕсли;
	
	Возврат СтатусПредставление;
	
КонецФункции

Функция Фокус_ПолучитьПредставлениеДанных(Значение,ВидПредставления)
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат "";
	КонецЕсли;
	
	ТаблицаСписка = Новый ТаблицаЗначений;
	ТаблицаСписка.Колонки.Добавить("Представление"); 
	ТаблицаСписка.Колонки.Добавить("Значение");
	
	Если ВидПредставления = "Строка" Тогда
		
		Возврат СокрЛП(Значение);       
		
	ИначеЕсли ВидПредставления = "Адрес" Тогда		
		
		Возврат Фокус_ПолучитьПредставлениеДанных_Адрес(Значение);
		
	ИначеЕсли ВидПредставления = "АдресРФ" Тогда		
		
		Возврат Фокус_Интеграция_ПредставлениеАдреса(Значение);
		
	ИначеЕсли ВидПредставления = "Сумма" Тогда		
		
		Возврат Фокус_ПолучитьПредставлениеДанных_Сумма(Значение);
		
	ИначеЕсли ВидПредставления = "Булево" Тогда		
		
		Если ТипЗнч(Значение) = Тип("Булево") Тогда
			Если Значение Тогда
				Возврат "Да";
			Иначе
				Возврат "Нет";
			КонецЕсли;
		КонецЕсли;
		
		Если СокрЛП(Значение) = "true" Тогда
			Возврат "Да";
		Иначе
			Возврат "Нет";
		КонецЕсли;
		
	ИначеЕсли ВидПредставления = "Число" Тогда		
		
		Возврат СокрЛП(Значение);
		
	ИначеЕсли ВидПредставления = "СписокРуководителей" Тогда

		Возврат Фокус_ПолучитьПредставлениеДанных_Руководители(Значение);
		
	ИначеЕсли ВидПредставления = "ДоляУК" Тогда
		
		Возврат Фокус_ПолучитьПредставлениеДанных_ДоляУК(Значение);
		
	ИначеЕсли ВидПредставления = "Дата" Тогда
		
		Возврат СокрЛП(Значение);
		
	ИначеЕсли ВидПредставления = "УставныйКапитал" Тогда
		
		Возврат Фокус_ПолучитьПредставлениеДанных_УставныйКапитал(Значение);
		
	ИначеЕсли ВидПредставления = "ВидДеятельности" Тогда
		
		Возврат Фокус_ПолучитьПредставлениеДанных_ВидДеятельности(Значение);
		
	ИначеЕсли ВидПредставления = "СписокВидовДеятельности" Тогда
		
		ТаблицаСписка = Новый ТаблицаЗначений;
		ТаблицаСписка.Колонки.Добавить("Представление");
		ТаблицаСписка.Колонки.Добавить("Значение");
		
		Если ТипЗнч(Значение) = Тип("Массив") Тогда
			Для Каждого Эл ИЗ Значение Цикл
				НоваяСтрока = ТаблицаСписка.Добавить();
				НоваяСтрока.Значение = Эл;
				НоваяСтрока.Представление = Фокус_ПолучитьПредставлениеДанных_ВидДеятельности(Эл);
			КонецЦикла;
		КонецЕсли;
		
		Возврат ТаблицаСписка;
		
	ИначеЕсли (ВидПредставления = "СписокПредшественников") ИЛИ (ВидПредставления = "СписокПреемников") Тогда
		
		Возврат Фокус_ПолучитьПредставлениеДанных_ПредшественникиПреемники(Значение);
		
	ИначеЕсли ВидПредставления = "СписокУчредителейИностр" Тогда
		
		Возврат Фокус_ПолучитьПредставлениеДанных_УчредителиИностр(Значение);
		
	ИначеЕсли ВидПредставления = "СписокУчредителейЮЛ" Тогда

		Возврат Фокус_ПолучитьПредставлениеДанных_УчредителиЮЛ(Значение);
		
	ИначеЕсли ВидПредставления = "СписокУчредителейФЛ" Тогда

		Возврат Фокус_ПолучитьПредставлениеДанных_УчредителиФЛ(Значение);
		
	ИначеЕсли ВидПредставления = "СписокУпрКомпаний" Тогда
		
		Возврат Фокус_ПолучитьПредставлениеДанных_УпрКомпании(Значение);
		
	КонецЕсли;
	
	Возврат "!!! Нет описании логики представления для вида:"+ВидПредставления;
	
КонецФункции

// Дополняет текстовую расшифровку данными из истории
//
// Параметры
//  Расшифровка	- Строка - расшифровка сработвшего маркера
//  История		- Массив - массив из структур вида (Дата,Данные)
//  ИмяПоля		- Для выбора представления
//
Процедура Фокус_ПолучитьПредставлениеДанных_ДополнитьРасшифровкуИсторией(Расшифровка, История, ИмяПоля)
	
	//  legalAddress        
	//  legalName           
	//  kpp                 
	//  heads
	//  managementCompanies
	//  foundersFL
	//  foundersUL
	//  foundersForeign
	//  statedCapital       

	Для каждого ЭлементИстории Из История Цикл
		Представление="";
		Если ИмяПоля="UL.legalAddress" Тогда    
			Представление=Фокус_ПолучитьПредставлениеДанных(ЭлементИстории.Данные,"Адрес");
		ИначеЕсли ИмяПоля="UL.legalName" Тогда
			Если ЭлементИстории.Данные.Свойство("full") Тогда 
				Представление=Фокус_ПолучитьПредставлениеДанных(ЭлементИстории.Данные.full,"Строка");
			Иначе
				Представление=Фокус_ПолучитьПредставлениеДанных(ЭлементИстории.Данные.short,"Строка");
			КонецЕсли;				
		ИначеЕсли ИмяПоля="UL.kpp" Тогда
			Представление=Фокус_ПолучитьПредставлениеДанных(ЭлементИстории.Данные.kpp,"Строка");
		ИначеЕсли ИмяПоля="UL.heads" Тогда
			МассивДанных = Новый Массив();
			МассивДанных.добавить(ЭлементИстории.Данные);
			ДанныеОРуководителях=Фокус_ПолучитьПредставлениеДанных(МассивДанных,"СписокРуководителей");
			Разделитель="";
			Для Каждого СтрокаДанных Из ДанныеОРуководителях Цикл
				Представление=Представление+Разделитель+СтрокаДанных.Представление;
				Разделитель=", ";
			КонецЦикла;
		ИначеЕсли ИмяПоля="UL.managementCompanies" Тогда
			МассивДанных = Новый Массив();
			МассивДанных.Добавить(ЭлементИстории.Данные);
			ДанныеОбОрганизациях=Фокус_ПолучитьПредставлениеДанных(МассивДанных,"СписокУпрКомпаний");
			Разделитель="";
			Для Каждого СтрокаДанных Из ДанныеОбОрганизациях Цикл
				Представление=Представление+Разделитель+СтрокаДанных.Представление;
				Разделитель=", ";
			КонецЦикла;
		ИначеЕсли ИмяПоля="UL.foundersFL" Тогда
			МассивДанных = Новый Массив();
			МассивДанных.Добавить(ЭлементИстории.Данные);
			ДанныеОбУчеридителях=Фокус_ПолучитьПредставлениеДанных(МассивДанных,"СписокУчредителейФЛ");
			Разделитель="";
			Для Каждого СтрокаДанных Из ДанныеОбУчеридителях Цикл
				Представление=Представление+Разделитель+СтрокаДанных.Представление;
				Разделитель=", ";
			КонецЦикла;
		ИначеЕсли ИмяПоля="UL.foundersUL" Тогда
			МассивДанных = Новый Массив();
			МассивДанных.Добавить(ЭлементИстории.Данные);
			ДанныеОбУчеридителях=Фокус_ПолучитьПредставлениеДанных(МассивДанных,"СписокУчредителейЮЛ");
			Разделитель="";
			Для Каждого СтрокаДанных Из ДанныеОбУчеридителях Цикл
				Представление=Представление+Разделитель+СтрокаДанных.Представление;
				Разделитель=", ";
			КонецЦикла;
		ИначеЕсли ИмяПоля="UL.foundersForeign" Тогда
			МассивДанных = Новый Массив();
			МассивДанных.Добавить(ЭлементИстории.Данные);
			ДанныеОбУчеридителях=Фокус_ПолучитьПредставлениеДанных(МассивДанных,"СписокУчредителейИностр");
			Разделитель="";
			Для Каждого СтрокаДанных Из ДанныеОбУчеридителях Цикл
				Представление=Представление+Разделитель+СтрокаДанных.Представление;
				Разделитель=", ";
			КонецЦикла;
		ИначеЕсли ИмяПоля="UL.statedCapital" Тогда
			Представление=Фокус_ПолучитьПредставлениеДанных_Сумма(ЭлементИстории.Данные.sum);
		КонецЕсли;
		Расшифровка=Расшифровка+Символы.ПС+Формат(ЭлементИстории.Дата,"ДФ=dd.MM.yyyy")+": "+Представление;
	КонецЦикла;
	
КонецПроцедуры // Фокус_ПолучитьПредставлениеДанных_ДополнитьРасшифрокуИсторией()

//-------------------------------------------------------
//
//	СЛУЖЕБНЫЕ
// 

Функция Фокус_ПолучитьЗначениеПоляДанных(Данные,Путь) Экспорт
	
	Результат = Неопределено;
	
	Попытка
		Выполнить("Результат = Данные."+Путь);
	Исключение
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура Фокус_Служебный_ДобавитьСоставляющуюАдресаВПредставление(Представление, Данные, ПолеЗначения, ПолеТопонима = Неопределено, ВариантСоединения = Неопределено, ТопонимПоУмолчанию = Неопределено, ПрефиксЗначения = "");
	
	Значение = Фокус_ПолучитьЗначениеПоляДанных(Данные, ПолеЗначения);
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПрефиксЗначения) Тогда
		Значение = ПрефиксЗначения + Значение;
	КонецЕсли;
	
	// получаем топоним (ул, дом, г, обл)
	Топоним = Неопределено;
	Если ЗначениеЗаполнено(ПолеТопонима) Тогда
		Топоним = Фокус_ПолучитьЗначениеПоляДанных(Данные, ПолеТопонима);
		Если ЗначениеЗаполнено(ТопонимПоУмолчанию) И НЕ ЗначениеЗаполнено(Топоним) Тогда
            Топоним = ТопонимПоУмолчанию;
		КонецЕсли;
		
		// и присоединяем к значению
		Если ЗначениеЗаполнено(Топоним) Тогда
			Если ВариантСоединения = "Справа" Тогда
				Значение = Значение + " "+Топоним;
			Иначе 
				Значение = Топоним + " " + Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Представление = Представление + ", " + Значение;
	
КонецПроцедуры

Функция Фокус_ЕстьНеобходимыеМетаданные(СтрокаМетаданных) Экспорт
	
	//Если ВнешнееХранилище И НеИскатьВоВХ = Ложь Тогда
	//	ТекПолеМетаданных = СоединениеСХранилищем.Метаданные;
	//Иначе
	ТекПолеМетаданных = Метаданные;
	//КонецЕсли;
	
	МассивИмен = Контур_РазложитьСтрокуВМассивСлов(СтрокаМетаданных,".");

	КоличествоИмен = МассивИмен.Количество();
	
	// КоличествоИмен = 2 для проверки наличия объекта, например 					Справочники.КонтурEDI_Сообщения
	// КоличествоИмен = 4 для проверки наличия реквизита\ресурса и т.д., например	Справочники.КонтурEDI_Сообщения.Реквизиты.Организация
	// КоличествоИмен = 6 для проверки наличия реквизита таб. части, например		Справочники.КонтурEDI_Сообщения.ТабличныеЧасти.ДополнительныеРеквизиты.Реквизиты.ЗначениеСтрока
	
	Если НЕ (КоличествоИмен = 2 ИЛИ КоличествоИмен = 4 ИЛИ КоличествоИмен = 6) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КоличествоПоисков = КоличествоИмен/2;
	Для н = 1 По КоличествоПоисков Цикл
		ТекПолеМетаданных = ТекПолеМетаданных[МассивИмен[н*2-2]].Найти(МассивИмен[н*2-1]);
		Если ТекПолеМетаданных = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;	
	
КонецФункции

Функция Фокус_ИнициализироватьМодуль() Экспорт
	
	// обновим место хранения настроек
	СтруктураНастроек = Новый Структура("ПроверкаСпискомСвоиМаркеры,КлючДоступа,ПараметрыПочты,Маркеры,ПараметрыПрокси");
	
	Для Каждого Эл Из СтруктураНастроек Цикл
		ТекущаяНастройка = Фокус_ХранениеДанных_ПрочитатьНастройку(Эл.Ключ);
        Если НЕ ЗначениеЗаполнено(ТекущаяНастройка) Тогда
			ПрошлаяНастройка = ХранилищеСистемныхНастроек.Загрузить("КонтурФокус_"+Эл.Ключ);
			Если НЕ ПрошлаяНастройка = Неопределено Тогда
				Фокус_ХранениеДанных_СохранитьНастройку(Эл.Ключ,ПрошлаяНастройка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//Настройки которые должны быть заполнены
	СтруктураНастроек = Новый Структура("ОткрыватьВБраузере,ИндивидуальныйНастройкиМаркеров","Истина","Ложь");
	
	Для Каждого Эл Из СтруктураНастроек Цикл
		ТекущаяНастройка = Фокус_ХранениеДанных_ПрочитатьНастройку(Эл.Ключ);
        Если НЕ ЗначениеЗаполнено(ТекущаяНастройка) Тогда
			ПрошлаяНастройка = ХранилищеСистемныхНастроек.Загрузить("КонтурФокус_"+Эл.Ключ);
			Если НЕ ПрошлаяНастройка = Неопределено Тогда
				Фокус_ХранениеДанных_СохранитьНастройку(Эл.Ключ,ПрошлаяНастройка);
			Иначе
				Фокус_ХранениеДанных_СохранитьНастройку(Эл.Ключ,Вычислить(Эл.Значение));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	
	ТекущийСписокМаркеров = Фокус_ХранениеДанных_ПолучитьСписокМаркеров();
	СписокПоУмолчанию = Фокус_Маркеры_ПолучитьСписокМаркеровПоУмолчанию();
	
	БылиИзменения = Ложь;
	
	Если НЕ ТипЗнч(ТекущийСписокМаркеров) = Тип("ТаблицаЗначений") Тогда
		ТекущийСписокМаркеров = СписокПоУмолчанию;
		БылиИзменения = Истина;
	Иначе
		// проверим, не появились ли новые
		Для Каждого Стр ИЗ СписокПоУмолчанию Цикл
			Если ТекущийСписокМаркеров.Найти(Стр.ID,"ID") = Неопределено Тогда
				НоваяСтрока = ТекущийСписокМаркеров.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
				БылиИзменения = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если БылиИзменения Тогда
		Фокус_ХранениеДанных_СохранитьСписокМаркеров(ТекущийСписокМаркеров);
	КонецЕсли;	
		
КонецФункции

Функция ПолучитьТаблицуКоманд()
	
	// Создадим пустую таблицу команд и колонки в ней
	Команды = Новый ТаблицаЗначений;
	
	// Как будет выглядеть описание печатной формы для пользователя
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 
	
	// Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	// Тут задается, как должна вызваться команда обработки
	// Возможные варианты:
	// - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
	// - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
	// - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	
	// Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	
	// Для печатной формы должен содержать строку ПечатьMXL 
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	Возврат Команды;
КонецФункции

Функция СведенияОВнешнейОбработке() Экспорт
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
	ПараметрыРегистрации = Новый Структура;
	
	// Объявим еще одну переменную, которая нам потребуется ниже
	МассивНазначений = Новый Массив;
	
	// Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
	// Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
	ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");
	
	// Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
	// Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
	// которые поддерживают механизм ВПФ
	//МассивНазначений.Добавить("Документ.ЗаказКлиента");
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
	
	// Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
	ПараметрыРегистрации.Вставить("Наименование", "Модуль Контур.Фокус");
	
	// Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	
	// Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
	ПараметрыРегистрации.Вставить("Версия", "0.0");    
	ПараметрыРегистрации.Вставить("Информация", "Модуль работы с сервисом Контур.Фокус");
	
	// Создадим таблицу команд (подробнее смотрим ниже)
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	//
	//// Добавим команду в таблицу
	//ДобавитьКоманду(ТаблицаКоманд, "E", "Диадок", "ВызовСерверногоМетода", Истина, "ПечатьMXL");
	//
	
	СтрокаТЧ = ТаблицаКоманд.Добавить();
	СтрокаТЧ.Идентификатор = "ОткрытьМодульКонтурФокус";
	СтрокаТЧ.Представление = "Открыть модуль Контур.Фокус";
	СтрокаТЧ.ПоказыватьОповещение = Ложь;
	СтрокаТЧ.Использование = "ОткрытиеФормы";
	
	////Добавление для вызовов из регламентного //спасибо вот этому человеку http://infostart.ru/profile/97746/
	//СтрокаТЧ = ТаблицаКоманд.Добавить();
	//СтрокаТЧ.Идентификатор = "ВыполнитьФоновыйОбмен";
	//СтрокаТЧ.Представление = "Выполнить фоновый обмен Контур.EDI";
	//СтрокаТЧ.ПоказыватьОповещение = Ложь;
	//СтрокаТЧ.Использование = "ВызовСерверногоМетода";
	////
	
	//// Сохраним таблицу команд в параметры регистрации обработки
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	// Теперь вернем системе наши параметры
	Возврат ПараметрыРегистрации;
	
КонецФункции

//-------------------------------------------------------
//
//	АВТОТЕСТЫ
// 

Функция Фокус_Автотесты_Старт(ПоказыватьРезультат = Ложь) Экспорт
	
	НаборИНН = "7707067683,666300471020,1808205265,1831052144";
	
	МассивИНН = Контур_РазложитьСтрокуВМассивСлов(НаборИНН,",");	
	
	ВсеХорошо = Истина;
	
	Для Каждого Эл Из МассивИНН Цикл
		Результат = Фокус_Автотесты_ПроверитьСозданиеКарточкиКонтрагента(Эл,ПоказыватьРезультат);
		Если НЕ Результат Тогда
			ВсеХорошо = Ложь;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат ВсеХорошо;
		
КонецФункции

Функция Фокус_Автотесты_ПроверкаСозданияКарточкиКонтрагента_НаборПараметров(Параметры,ПоказыватьРезультат)
	
	Таб = Фокус_ВывестиДанные_ЮрФизЛицо(Параметры);
	Если ПоказыватьРезультат Тогда
		Таб.Показать();
	КонецЕсли;
	
	Результат = Фокус_Интеграция_СоздатьКарточкуКонтрагента(Параметры);
	Если Результат.Успешно Тогда
		Если ПоказыватьРезультат Тогда
			Результат.Ссылка.ПолучитьФорму().Открыть();
		Иначе
			Результат.Ссылка.ПолучитьОбъект().Удалить();
		КонецЕсли;		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция Фокус_Автотесты_ПроверитьСозданиеКарточкиКонтрагента(ИНН,ПоказыватьРезультат)
	
	ДанныеЮрФизЛица		= Фокус_ПолучитьДанные_РеквизитыЮрФизЛица(ИНН);
	ДанныеКонтакты		= Фокус_ПолучитьДанные_Контакты(ИНН);
	ДанныеДопРеквизиты	= Фокус_ПолучитьДанные_ДопРеквизитыЮрФизЛица(ИНН);
	ДанныеАналитика		= Фокус_ПолучитьДанные_Аналитика(ИНН);
	
	Параметры = Новый Структура();
	Параметры.Вставить("Реквизиты",		ДанныеЮрФизЛица);
	Параметры.Вставить("Контакты",		ДанныеКонтакты);
	Параметры.Вставить("ДопРеквизиты",	ДанныеДопРеквизиты);
	Параметры.Вставить("Аналитика",		ДанныеАналитика);
	
	РезультатПроверки = Фокус_Автотесты_ПроверкаСозданияКарточкиКонтрагента_НаборПараметров(Параметры,ПоказыватьРезультат);

	Если РезультатПроверки Тогда 
		Параметры.Контакты = Неопределено;
		РезультатПроверки = Фокус_Автотесты_ПроверкаСозданияКарточкиКонтрагента_НаборПараметров(Параметры,ПоказыватьРезультат);
		
		Если РезультатПроверки Тогда
			Параметры.ДопРеквизиты = Неопределено;
			РезультатПроверки =	Фокус_Автотесты_ПроверкаСозданияКарточкиКонтрагента_НаборПараметров(Параметры,ПоказыватьРезультат);
			
			Если РезультатПроверки Тогда
				Параметры.Аналитика = Неопределено;
				РезультатПроверки = Фокус_Автотесты_ПроверкаСозданияКарточкиКонтрагента_НаборПараметров(Параметры,ПоказыватьРезультат);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатПроверки;
				
КонецФункции

//*****************************************************************************************
// СТАРОЕ

Функция Контур_РазложитьСтрокуВМассивСлов(Знач Строка, РазделителиСлов) Экспорт
	
	Слова = Новый Массив;
	
	Для Сч = 1 По СтрДлина(РазделителиСлов) Цикл
		Строка = СтрЗаменить(Строка,Сред(РазделителиСлов,Сч,1),Символы.ПС);
	КонецЦикла;
	
	Для Сч=1 По СтрЧислоСтрок(Строка) Цикл
		ТекСлово = СокрЛП(СтрПолучитьСтроку(Строка,Сч));
		Если ТекСлово<>"" Тогда
			Слова.Добавить(ТекСлово);
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Слова;
	
КонецФункции

Функция РазложитьСтрокиВМассивПосимвольно(Знач Строка)
	
	Массив = Новый Массив;
	
	Строка = СокрЛП(Строка);
	
	ДлинаСтроки = СтрДлина(Строка);
	
	Для н = 1 по ДлинаСтроки Цикл
		Массив.Добавить(Сред(Строка,н,1));
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

Функция ЭтоПравильныйИНН(СтрокаИНН,ОписаниеОшибки="") Экспорт
	
	ИНН = РазложитьСтрокиВМассивПосимвольно(СтрокаИНН);
	
	// проверка длины
	Если ИНН.Количество()=10 Тогда
		ЮрЛицо = Истина;
	ИначеЕсли ИНН.Количество()=12 Тогда
		ЮрЛицо = Ложь;
	Иначе
		ОписаниеОшибки = "ИНН должен состоять из 10 или 12 цифр";
		Возврат Ложь;
	КонецЕсли;
	
	// проверка на цифры
	Для н = 1 По ИНН.Количество() Цикл
		Если Найти("0123456789",ИНН[н-1])=0 Тогда
			ОписаниеОшибки = "ИНН должен состоять только из цифр";
	        Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// проверка на контрольные суммы
	
	// юр. лицо
	Если ИНН.Количество()=10 Тогда
		
		КонтрольноеЧисло10 = (((2*ИНН[0]+4*ИНН[1]+10*ИНН[2]+3*ИНН[3]+5*ИНН[4]+9*ИНН[5]+4*ИНН[6]+6*ИНН[7]+8*ИНН[8]) % 11) % 10);
		
		Если НЕ Число(ИНН[9]) = КонтрольноеЧисло10 Тогда
			ОписаниеОшибки = "Контрольное число ИНН юридического лица неверно!";
			Возврат Ложь;
		КонецЕсли;
		
	// физ. лицо	
	Иначе
		
		КонтрольноеЧисло11 = (((7*ИНН[0]+2*ИНН[1]+4*ИНН[2]+10*ИНН[3]+3*ИНН[4]+5*ИНН[5]+9*ИНН[6]+4*ИНН[7]+6*ИНН[8]+8*ИНН[9]) % 11) % 10);
    	КонтрольноеЧисло12 = (((3*ИНН[0]+7*ИНН[1]+2*ИНН[2]+4*ИНН[3]+10*ИНН[4]+3*ИНН[5]+5*ИНН[6]+9*ИНН[7]+4*ИНН[8]+6*ИНН[9]+8*ИНН[10]) % 11) % 10);
		
		Если НЕ (КонтрольноеЧисло11 = Число(ИНН[10]) И КонтрольноеЧисло12 = Число(ИНН[11])) Тогда
			ОписаниеОшибки = "Контрольное число ИНН физического лица неверно!";
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

Функция МодальностьЗапрещена() Экспорт
	СисИнфо = Новый СистемнаяИнформация;
	ТекВерсияПлатформы=СисИнфо.ВерсияПриложения;
	Остаток=Сред(СокрЛП(ТекВерсияПлатформы),3);  //и так ясно что "8." - в топку
	ВтораяЦифраВерсии=Число(Лев(Остаток,1)); //да полюбому 8.10.х не будет
	Остаток=Сред(СокрЛП(Остаток),3);
	ТретьяЦифраВерсии=Число(Лев(Остаток,Найти(Остаток,".")-1));
	
	Если (ВтораяЦифраВерсии=3 и ТретьяЦифраВерсии>=4) или ВтораяЦифраВерсии>3 Тогда 
		Попытка
			Если Строка(Метаданные.РежимИспользованияМодальности)  = "Использовать" Тогда 
				Возврат Ложь;
			Иначе
				Возврат Истина;
			КонецЕсли;
		Исключение
			//платфома не в курсе что есть режим отказа от модальности
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ПолучитьHTMLСтатистикиКлюча() Экспорт
	
	ДанныеКлюча = Фокус_ПолучитьДанные_СтатистикаКлюча();
	
	Текст = "<html><head>";
	
	Текст = Текст + "<style>
	|h3{
	|    font-size: 20px; font-style: normal; font-variant: normal;  margin-left:10px;
	|}
	|table {  margin-left:10px; }
	|table tr th{
	|    font-size: 14px; padding:3px 10px; background: #eee;
	|}
	|table tr td{
	|    font-size: 14px; padding:3px 5px;
	|}
	|</style> ";
	
	Текст = Текст + "</head><body><h3>Статистика использования ключа доступа</h3><table cellpadding=0 cellspacing=0>";
	
	Текст = Текст + "<tr><th>Функциональность</th><th>Использовано</th><th>Доступно</th><th>Имя метода</th><th>Дата начала</th><th>Дата окончания</th></tr>";
	
	Если НЕ ДанныеКлюча = Неопределено Тогда
		Для каждого Стр Из ДанныеКлюча Цикл
		
			Текст = Текст + "<tr><td>"+Стр.Имя+"</td>"+"<td style=""text-align:right"">"+Стр.Использовано+"</td>"+"<td style=""text-align:right"">"+Стр.ЗначениеОграничения+"</td>"+"<td>"+Стр.Метод+"</td>"+"<td>"+Стр.ДатаНачала+"</td>"+"<td>"+Стр.ДатаОкончания+"</td>"+"</tr>";
		
		КонецЦикла;
	КонецЕсли;	
		
	Текст = Текст+"</table></body></html>";
	
	Возврат Текст;
	
КонецФункции

Функция ПолучитьТекстЯчейкиОбласти(Область,Строка,Колонка) Экспорт
	Возврат Строка(Область.ПолучитьОбласть("R"+Формат(Строка,"ЧГ=0")+"C"+Формат(Колонка,"ЧГ=0")).ТекущаяОбласть.Текст);
КонецФункции

Функция ПолучитьСписокМаркеров() Экспорт
	
	Если ЗначениеЗаполнено(КэшСпискаПараметровАналитики) Тогда
		Возврат КэшСпискаПараметровАналитики;
	КонецЕсли;
	
	СписокМаркеров = Новый ТаблицаЗначений;
	СписокМаркеров.Колонки.Добавить("Код");
	СписокМаркеров.Колонки.Добавить("Наименование");
	СписокМаркеров.Колонки.Добавить("Уровень1");
	СписокМаркеров.Колонки.Добавить("Уровень2");
	СписокМаркеров.Колонки.Добавить("Уровень3");
	СписокМаркеров.Колонки.Добавить("ТипЗначения");
	
	Макет = ПолучитьМакет("Маркеры");
	
	Область = Макет.ПолучитьОбласть("Шапка");
	
	Для Сч = 1 По Область.ВысотаТаблицы Цикл
		
		НоваяСтрока = СписокМаркеров.Добавить();
		НоваяСтрока.Код 			= ПолучитьТекстЯчейкиОбласти(Область,Сч,1);
		НоваяСтрока.Наименование	= ПолучитьТекстЯчейкиОбласти(Область,Сч,2);
		НоваяСтрока.Уровень1		= ПолучитьТекстЯчейкиОбласти(Область,Сч,4);
		НоваяСтрока.Уровень2		= ПолучитьТекстЯчейкиОбласти(Область,Сч,5);
		НоваяСтрока.Уровень3		= ПолучитьТекстЯчейкиОбласти(Область,Сч,6);
		НоваяСтрока.ТипЗначения 	= ПолучитьТекстЯчейкиОбласти(Область,Сч,3);
		
	КонецЦикла;
	
	КэшСпискаПараметровАналитики = СписокМаркеров;
	
	Возврат СписокМаркеров;
	
КонецФункции

Функция Фокус_ПолучитьКоличествоИзмененийПоляЗаПериод(ИНН,ИмяМетода,ИмяПоля,КоличествоМесяцев,ВозвратИстория=Неопределено) 
	
	//  legalAddress        +es
	//  legalName           +s
	//  kpp                 +s
	//  heads
	//  managementCompanies
	//  foundersFL
	//  foundersUL
	//  foundersForeign
	//  statedCapital       +s
	
	ВозвратИстория=Новый Массив;
	Если ИмяПоля = "UL.legalAddress" Тогда
		ИмяПоляИстории = "legalAddresses";
	ИначеЕсли Найти("\UL.legalName\UL.kpp\UL.statedCapital\",ИмяПоля)>0 Тогда
		ИмяПоляИстории = Сред(ИмяПоля,4) + "s";
	Иначе
		ИмяПоляИстории = Сред(ИмяПоля,4);
	КонецЕсли;
	
	КоличествоИзменений = 0;
	
	ДатаНачалаПроверки = ДобавитьМесяц(ТекущаяДата(),-КоличествоМесяцев);
	
	ДатаИзменения = Фокус_Дата(Фокус_ПолучитьЗначение(ИНН,ИмяМетода,ИмяПоля+".date"));
	
	Если ЗначениеЗаполнено(ДатаИзменения) Тогда
		Если ДатаИзменения>ДатаНачалаПроверки Тогда
			КоличествоИзменений = КоличествоИзменений + 1;
			ВозвратИстория.Добавить(Новый Структура("Дата, Данные",ДатаИзменения,Фокус_ПолучитьЗначение(ИНН,ИмяМетода,ИмяПоля)));
		КонецЕсли;
	КонецЕсли;
	
	История =  Фокус_ПолучитьЗначение(ИНН,ИмяМетода,"UL.history");
	ПредыдущееЗначение=Новый Структура("Дата, Данные",'00010101',Неопределено);
	Если НЕ История = Неопределено Тогда
		Если История.Свойство(ИмяПоляИстории) Тогда
			Для Каждого Эл Из История[ИмяПоляИстории] Цикл
				ДатаИзменения = Фокус_Дата(Фокус_ПолучитьЗначениеПоляДанных(Эл,"date"));
				Если ЗначениеЗаполнено(ДатаИзменения) Тогда
					Если ДатаИзменения>ДатаНачалаПроверки Тогда
						КоличествоИзменений = КоличествоИзменений + 1;
						ВозвратИстория.Добавить(Новый Структура("Дата, Данные",ДатаИзменения,Эл));
					ИначеЕсли ДатаИзменения>ПредыдущееЗначение.Дата Тогда
						ПредыдущееЗначение=Новый Структура("Дата, Данные",ДатаИзменения,Эл);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ПредыдущееЗначение.Данные<>Неопределено Тогда
			ВозвратИстория.Вставить(0,ПредыдущееЗначение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат КоличествоИзменений;
	
КонецФункции

//********************************************
//	JSON

Функция ПрочитатьJSONВручную(Значение, Стандарт = Истина, ПредставленияСсылок = Ложь, ВернутьТаблицуОтветов = Ложь, ТаблицаОтветов = Неопределено) Экспорт 
	
	СИ = Новый СистемнаяИнформация;
	ВерсияПлатформы = СИ.ВерсияПриложения;
	
	Если Лев(ВерсияПлатформы,10) < "8.3.6.1977" ИЛИ ВернутьТаблицуОтветов Тогда
		
		Результат = jsonПрочитатьИнициализация(Значение, Стандарт, ПредставленияСсылок, ВернутьТаблицуОтветов, ТаблицаОтветов);
		
		Если ВернутьТаблицуОтветов Тогда
			Для Каждого Стр Из ТаблицаОтветов Цикл
				Стр.СтрокаОтвета = "["+Стр.СтрокаОтвета+"]";
			КонецЦикла;
		КонецЕсли;
		
	Иначе
	
		Чтение = Вычислить("Новый ЧтениеJSON");
		Чтение.УстановитьСтроку(Значение);
		Результат = Вычислить("ПрочитатьJSON(Чтение)");
		Чтение.Закрыть();

	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПрочитатьJSON()

Функция jsonПрочитатьИнициализация(Значение, Знач Стандарт, Знач ПредставленияСсылок, ВернутьТаблицуОтветов, ТаблицаОтветов)
	
	ТаблицаОтветов = Новый ТаблицаЗначений;
	ТаблицаОтветов.Колонки.Добавить("ИНН");
	ТаблицаОтветов.Колонки.Добавить("СтрокаОтвета");
	
	// Проверка параметров.
	
	Если (Не Стандарт = Истина) И (Не Стандарт = Ложь) И (Не Стандарт = Неопределено) Тогда ВызватьИсключение ИсключениеНекорректныйПараметр("Стандарт"); КонецЕсли; 
	Если (Не ПредставленияСсылок = Истина) И (Не ПредставленияСсылок = Ложь) И (Не ПредставленияСсылок = Неопределено) Тогда ВызватьИсключение ИсключениеНекорректныйПараметр("ПредставленияСсылок"); КонецЕсли; 
	
	// Использование более общего случая параметров.
	Альтернативный = (Стандарт = Неопределено) Или (Не Стандарт); Стандарт = (Стандарт = Неопределено) Или Стандарт; ПредставленияСсылок = (ПредставленияСсылок = Неопределено) Или ПредставленияСсылок;
	
	// Схема подстановок шестнадцатиричной системы.
	СхемаПодстановок = Новый Соответствие; ШестнадцатиричнаяСистема = "0123456789abcdef"; ДесятичноеЧисло = 0;
	Для ВторойРазряд = 1 По 16 Цикл Для ПервыйРазряд = 1 По 16 Цикл СхемаПодстановок.Вставить(Сред(ШестнадцатиричнаяСистема, ВторойРазряд, 1) + Сред(ШестнадцатиричнаяСистема, ПервыйРазряд, 1), ДесятичноеЧисло); ДесятичноеЧисло = ДесятичноеЧисло + 1; КонецЦикла; КонецЦикла;
	
	// Вспомогательные данные.
	ВспомогательныеДанные = Новый Структура("ТипСтроки,СхемаПодстановок,АвтоматическиПриводитьКСтруктуре",
		Тип("Строка"),
		СхемаПодстановок,
		Истина);
		
	// Стартовые значения.
	Индекс = 1; Длина = СтрДлина(Значение);
	
	// Форматирование (первый шаг парсера).
	Если Стандарт Тогда СимволыФорматирования = " " + Символы.ВК + Символы.ПС + Символы.Таб; jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); КонецЕсли;
	Если (Индекс > Длина) Тогда ВызватьИсключение ИсключениеПустойПакетДанных(); КонецЕсли; 
	
	// Парсер.
	Возврат jsonПрочитать(Значение, Стандарт, Альтернативный, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, Истина, ВернутьТаблицуОтветов, ТаблицаОтветов);
	
КонецФункции // jsonПрочитатьИнициализация()

Функция jsonПрочитать(Значение, Стандарт, Альтернативный, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, ПервыйУровень, ВернутьТаблицуОтветов = Ложь, ТаблицаОтветов = Неопределено)
	
	ПредыдущийИндексМассива = 0;
	
	Символ = Сред(Значение, Индекс, 1);
	Если (Символ = """") Или (Символ = "'") Тогда        																	// " , '
		
		// Строка.
		Подстрока = Сред(Значение, Индекс + 1); Начало = Индекс; Пока Истина Цикл
			Позиция = Найти(Подстрока, Символ);
			
			Если (Позиция > 0) Тогда
				Индекс = Индекс + Позиция; Откат = Позиция - 1; Маскировка = Ложь; Пока (Сред(Подстрока, Откат, 1) = "\") И Откат Цикл Маскировка = Не Маскировка; Откат = Откат - 1; КонецЦикла;
				Если Маскировка Тогда Подстрока = Сред(Подстрока, Позиция + 1); Иначе Прервать; КонецЕсли;
			Иначе
		  		ВызватьИсключение ИсключениеНеожиданноеОкончаниеПакетаДанных();
			КонецЕсли;
			
		КонецЦикла;
		
		// Строка.
		Результат = jsonПрочитатьСтроку(Сред(Значение, Начало + 1, Индекс - Начало - 1), Стандарт, Начало, ВспомогательныеДанные.СхемаПодстановок, (Символ = "'"));
		
		Если jsonПрочитатьОпределитьДату(Результат) Тогда
			// Дата.
			Результат = jsonПрочитатьДату(Результат, Начало);
		ИначеЕсли jsonПрочитатьОпределитьИдентификатор(Результат) Тогда
			// Идентификатор.
			Результат = jsonПрочитатьИдентификатор(Результат, Начало);
		Иначе
			Если Альтернативный И jsonПрочитатьОпределитьВнутреннийТип(Результат) Тогда
				// Внутренний тип.
				Результат = jsonПрочитатьВнутреннийТип(Результат, Начало);
			КонецЕсли;
		КонецЕсли;
		
		// Корректировка индекса.
		Индекс = Индекс + 1;
		
	ИначеЕсли (Символ = "[") Тогда																							// [
		
		// Массив.
		Результат = Новый Массив;
		
		ПредыдущийИндексМассива = Индекс+1;
		
		Индекс = Индекс + 1; Если Стандарт Тогда jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); КонецЕсли; Если (Индекс > Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеМассива(Длина); КонецЕсли;
		Символ = Сред(Значение, Индекс, 1); Если (Символ = "]") Тогда														// ] 
			
			// Пустой массив.
			Индекс = Индекс + 1;
		
		Иначе
		
			Пока (Индекс <= Длина) Цикл
				
				// Значение.
				Результат.Добавить(jsonПрочитать(Значение, Стандарт, Альтернативный, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, Ложь));
				
				Символ = Сред(Значение, Индекс, 1);
				Если (Символ = "]") Тогда																					// ]
					// Окончание массива.
					Индекс = Индекс + 1; Прервать;
				Иначе
					// Продолжение массива.
					Если (Символ = ",") Тогда																				// ,
						Индекс = Индекс + 1; Если Стандарт Тогда jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); КонецЕсли; Если (Индекс >= Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеМассива(Длина); КонецЕсли;
					Иначе
						ВызватьИсключение ИсключениеНедопустимыйСимвол(Индекс, ",");
					КонецЕсли;
				КонецЕсли;
				
				Если ПервыйУровень Тогда

					Если ВернутьТаблицуОтветов Тогда
						
						ТекИНН = Результат[Результат.Количество()-1].inn;
						ТекСтрокаОтвета = Сред(Значение, ПредыдущийИндексМассива, Индекс-ПредыдущийИндексМассива-1);
						
						НайденнаяСтрока = ТаблицаОтветов.Найти(ТекИНН,"ИНН");
						Если НЕ НайденнаяСтрока = Неопределено Тогда
							НайденнаяСтрока.СтрокаОтвета = НайденнаяСтрока.СтрокаОтвета + "," + ТекСтрокаОтвета;
						Иначе
							НоваяСтрока = ТаблицаОтветов.Добавить();
							НоваяСтрока.ИНН = ТекИНН;
							НоваяСтрока.СтрокаОтвета = ТекСтрокаОтвета;
						КонецЕсли;
						
						ПредыдущийИндексМассива = Индекс;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли (Символ = "{") Тогда																							// {
	
		// Объект.
		Индекс = Индекс + 1; Если Стандарт Тогда jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); КонецЕсли; Если (Индекс > Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеМассива(Длина); КонецЕсли;
		Символ = Сред(Значение, Индекс, 1); Если (Символ = "}") Тогда														// } 
			
			// Пустой объект.
			Индекс = Индекс + 1;
			
			// Структура или соответствие.
			Если ВспомогательныеДанные.АвтоматическиПриводитьКСтруктуре Тогда Результат = Новый Структура; Иначе Результат = Новый Соответствие; КонецЕсли; 
		
		Иначе
			
			Результат = Новый Соответствие;
			
			ТипСтроки = ВспомогательныеДанные.ТипСтроки; Пока (Индекс <= Длина) Цикл
				
				// Ключ.
				Начало = Индекс; КлючЭлемента = jsonПрочитать(Значение, Стандарт, Альтернативный, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, Ложь); Если (Не ТипЗнч(КлючЭлемента) = ТипСтроки) Тогда ВызватьИсключение ИсключениеНедопустимыйТипКлюча(Начало, КлючЭлемента); КонецЕсли;
				
				Символ = Сред(Значение, Индекс, 1);
				Если (Символ = ":") Тогда																					// :
					Индекс = Индекс + 1; Если Стандарт Тогда jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); КонецЕсли; Если (Индекс >= Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеОбъекта(Длина); КонецЕсли;
				Иначе
					ВызватьИсключение ИсключениеНедопустимыйСимвол(Индекс, ":");
				КонецЕсли;
				
				// Значение.
				ЗначениеЭлемента = jsonПрочитать(Значение, Стандарт, Альтернативный, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, Ложь);
				
				// Коллекция.
				Результат.Вставить(КлючЭлемента, ЗначениеЭлемента);
				
				Символ = Сред(Значение, Индекс, 1);
				Если (Символ = "}") Тогда																					// }
					// Окончание объекта.
					Индекс = Индекс + 1; Прервать;
				Иначе
					// Продолжение объекта.
					Если (Символ = ",") Тогда																				// ,
						Индекс = Индекс + 1; Если Стандарт Тогда jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); КонецЕсли; Если (Индекс >= Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеОбъекта(Длина); КонецЕсли;
					Иначе
						ВызватьИсключение ИсключениеНедопустимыйСимвол(Индекс, ",");
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			// Структура или соответствие.
			Если ВспомогательныеДанные.АвтоматическиПриводитьКСтруктуре Тогда
				
				РезультатСтруктура = Новый Структура; 
				Для Каждого Элемент Из Результат Цикл Попытка РезультатСтруктура.Вставить(Элемент.Ключ, Элемент.Значение); Исключение РезультатСтруктура = Результат; АвтоматическоеПриведениеНеВыполнено = Истина; Прервать; КонецПопытки; КонецЦикла;
				Результат = РезультатСтруктура;
				
				// Ссылка.
				Если ПредставленияСсылок Тогда Результат = jsonПрочитатьСсылку(Результат, (АвтоматическоеПриведениеНеВыполнено = Истина)); КонецЕсли;
				
			Иначе
				
				// Ссылка.
				Если ПредставленияСсылок Тогда Результат = jsonПрочитатьСсылку(Результат, Истина); КонецЕсли;
				
			КонецЕсли; 
		
		КонецЕсли;
		
	Иначе
	
		// Остальные примитивные типы.
		Если (Символ = "n") Тогда
			
			// Null.
			Если (Сред(Значение, Индекс, 4) = "null") Тогда Индекс = Индекс + 4; Результат = Null; Иначе ВызватьИсключение ИсключениеНекорректныйТипNull(Индекс); КонецЕсли;
			
		ИначеЕсли (Символ = "t") Тогда
			
			// Истина.
			Если (Сред(Значение, Индекс, 4) = "true") Тогда Индекс = Индекс + 4; Результат = Истина; Иначе ВызватьИсключение ИсключениеНекорректныйТипБулево(Индекс); КонецЕсли;
			
		ИначеЕсли (Символ = "f") Тогда
			
			// Ложь.
			Если (Сред(Значение, Индекс, 5) = "false") Тогда Индекс = Индекс + 5; Результат = Ложь; Иначе ВызватьИсключение ИсключениеНекорректныйТипБулево(Индекс); КонецЕсли;
			
		ИначеЕсли (Символ = "u") Тогда
			
			// Неопределено.
			Если (Сред(Значение, Индекс, 9) = "undefined") Тогда Индекс = Индекс + 9; Результат = Неопределено; Иначе ВызватьИсключение ИсключениеНекорректныйТипНеопределено(Индекс); КонецЕсли;
			
		Иначе
			
			// Число.
			Начало = Индекс; Пока Найти("-+0123456789.", Символ) И (Индекс <= Длина) Цикл Индекс = Индекс + 1; Символ = Сред(Значение, Индекс, 1); КонецЦикла;
			
			// Преобразование числа.
			Попытка
				Результат = Число(Сред(Значение, Начало, Индекс - Начало));
			Исключение
				ВызватьИсключение ИсключениеНекорректныйФорматЧисла(Начало, Сред(Значение, Начало, Индекс - Начало)); 
			КонецПопытки;
			
			// Экспоненциальная часть.
			Если (Символ = "E") Или (Символ = "e") Тогда
				
				// Степень.
				Индекс = Индекс + 1; Позиция = Индекс; Символ = Сред(Значение, Индекс, 1); Пока Найти("-+0123456789", Символ) И (Индекс <= Длина) Цикл Индекс = Индекс + 1; Символ = Сред(Значение, Индекс, 1); КонецЦикла;
				
				// Преобразование степени.
				Попытка
					Степень = Число(Сред(Значение, Позиция, Индекс - Позиция));
				Исключение
					ВызватьИсключение ИсключениеНекорректныйФорматЧисла(Начало, Сред(Значение, Начало, Индекс - Начало)); 
				КонецПопытки;
				
				// Возвидение числа в степень.
				Результат = Результат * Pow(10, Степень);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Форматирование.
	Если Стандарт Тогда jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); КонецЕсли; Если ПервыйУровень Тогда Если (Индекс <= Длина) Тогда ВызватьИсключение ИсключениеНекорректныйПакетДанных(Индекс); КонецЕсли; Иначе Если (Индекс > Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеПакетаДанных(); КонецЕсли; КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // jsonПрочитать()

Функция jsonПрочитатьОпределитьДату(Значение)

	// Проверка.
	Если (СтрДлина(Значение) = 20) Тогда
		Если (Сред(Значение, 05, 1) = "-") И				// -
			 (Сред(Значение, 08, 1) = "-") И				// -
			 (Сред(Значение, 11, 1) = "T") И				// T
			 (Сред(Значение, 14, 1) = ":") И				// :
			 (Сред(Значение, 17, 1) = ":") И				// :
			 (Сред(Значение, 20, 1) = "Z") Тогда			// Z
			// Год. 
			Если Найти("0123456789", Сред(Значение, 01, 1)) И
				 Найти("0123456789", Сред(Значение, 02, 1)) И
				 Найти("0123456789", Сред(Значение, 03, 1)) И
				 Найти("0123456789", Сред(Значение, 04, 1)) И
			// Месяц.
				 Найти("0123456789", Сред(Значение, 06, 1)) И
				 Найти("0123456789", Сред(Значение, 07, 1)) И
			// День.
				 Найти("0123456789", Сред(Значение, 09, 1)) И
				 Найти("0123456789", Сред(Значение, 10, 1)) И
			// Час.
				 Найти("0123456789", Сред(Значение, 12, 1)) И
				 Найти("0123456789", Сред(Значение, 13, 1)) И
			// Минута.
				 Найти("0123456789", Сред(Значение, 15, 1)) И
				 Найти("0123456789", Сред(Значение, 16, 1)) И
			// Секунда.
				 Найти("0123456789", Сред(Значение, 18, 1)) И
				 Найти("0123456789", Сред(Значение, 19, 1)) Тогда
				Возврат Истина; 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // jsonПрочитатьОпределитьДату()

Функция jsonПрочитатьОпределитьИдентификатор(Значение)

	// Проверка.
	Если (СтрДлина(Значение) = 36) Тогда
		Если (Сред(Значение, 09, 1) = "-") И					// -
			 (Сред(Значение, 14, 1) = "-") И					// -
			 (Сред(Значение, 19, 1) = "-") И					// -
			 (Сред(Значение, 24, 1) = "-") Тогда				// -
			// Первая часть. 
			Для Индекс = 01 По 08 Цикл Если Не Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1)) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			// Вторая часть. 
			Для Индекс = 10 По 13 Цикл Если Не Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1)) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			// Третья часть. 
			Для Индекс = 15 По 18 Цикл Если Не Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1)) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			// Четвертая часть. 
			Для Индекс = 20 По 23 Цикл Если Не Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1)) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			// Пятая часть. 
			Для Индекс = 25 По 36 Цикл Если Не Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1)) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // jsonПрочитатьОпределитьИдентификатор()

Функция jsonПрочитатьОпределитьВнутреннийТип(Значение)
	
	// Поиск.
	Возврат (Лев(Значение, 1) = "¦") И (Сред(Значение, 5, 1) = "¦") И (Прав(Значение, 1) = "¦"); // ¦xxx¦ ... ¦
	
КонецФункции // jsonПрочитатьОпределитьВнутреннийТип()

Функция jsonПрочитатьСтроку(Значение, Стандарт, Индекс, СхемаПодстановок, ОдинарнаяКавычка)
	
	// Последоавтельность перемаскировки.
	ПоследоавтельностьПеремаскировки = "\" + Символ(65535);
	
	// Демаскирование служебных символов.
	Результат = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(Значение, 
						"\\",			ПоследоавтельностьПеремаскировки),		// Перемаскирование последовательности.
						"\/",			"/"),           // x2f
						"\b",			Символ(008)),	// x08
						"\t",			Символы.Таб),   // x09
						"\n",			Символы.ПС),    // x0a
						"\f",			Символы.ПФ),    // x0c
						"\r",			Символы.ВК),    // x0d
						"\""",			"""");          // x22
						
	// Демаскирование Юникод символов.
	Позиция = Найти(Результат, "\u"); Пока Позиция Цикл
		СтаршийБайт = СхемаПодстановок[НРег(Сред(Результат, Позиция + 2, 2))]; МладшийБайт = СхемаПодстановок[НРег(Сред(Результат, Позиция + 4, 2))]; Если (СтаршийБайт = Неопределено) Или (МладшийБайт = Неопределено) Тогда ВызватьИсключение ИсключениеНекорректныйФорматСтроки(Индекс); КонецЕсли;
		Результат = СтрЗаменить(Результат, Сред(Результат, Позиция, 6), Символ(256 * СтаршийБайт + МладшийБайт)); Позиция = Найти(Результат, "\u");
	КонецЦикла;
		
	// Одинарная кавычка.
	Если ОдинарнаяКавычка Тогда Результат = СтрЗаменить(Результат, "\'", "'"); КонецЕсли;
	
	// Демаскирование перемаскированой последовательности.
	Возврат СтрЗаменить(Результат, ПоследоавтельностьПеремаскировки, "\");				
						
КонецФункции // jsonПрочитатьСтроку()

Функция jsonПрочитатьДату(Значение, Индекс)
	
	// Поиск.
	Попытка
		Возврат Дата(Лев(Значение, 4) + Сред(Значение, 06, 2) + Сред(Значение, 09, 2) + 
					 Сред(Значение, 12, 2) + Сред(Значение, 15, 2) + Сред(Значение, 18, 2));
	Исключение
		ВызватьИсключение ИсключениеНекорректныйФорматДаты(Индекс, Значение);
	КонецПопытки;
	
КонецФункции // jsonПрочитатьДату()

Функция jsonПрочитатьСсылку(Значение, Соответствие)
	
	Перем Ссылка;
	
	// Ссылка.
	Если (Значение.Количество() = 2) Тогда 
		Если Соответствие Тогда
			Ссылка = Значение.Получить("Ссылка"); Если (Не Ссылка = Неопределено) И (Не Значение.Получить("Представление") = Неопределено) Тогда Возврат Ссылка; КонецЕсли;
		Иначе
			Если Значение.Свойство("Представление") И Значение.Свойство("Ссылка", Ссылка) Тогда Возврат Ссылка; КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Значение;
	
КонецФункции // jsonПрочитатьСсылку()

Функция jsonПрочитатьИдентификатор(Значение, Индекс)
	
	// Поиск.
	Возврат Новый УникальныйИдентификатор(Значение);
	
КонецФункции // jsonПрочитатьИдентификатор()

Функция jsonПрочитатьВнутреннийТип(Значение, Индекс)
#Если ВебКлиент Или ТонкийКлиент Тогда
	ВызватьИсключение ИсключениеНевозможноПреобразоватьЗначениеНаКлиенте(Индекс, Значение);
#Иначе
	
	// Поиск.
	Тип = Сред(Значение, 2, 3); Данные = Сред(Значение, 6, СтрДлина(Значение) - 6);
	
	Если (Тип = "ref") Тогда
		Попытка
			Возврат ЗначениеИзСтрокиВнутр("{""#""," + СтрЗаменить(СтрЗаменить(Данные, "×", ":"), "÷", ",") + "}");
		Исключение
			ВызватьИсключение ИсключениеНевозможноПреобразоватьЗначение(Индекс, Значение);
		КонецПопытки;
	КонецЕсли;
		
	ВызватьИсключение ИсключениеНеопознанныйТип(Индекс, Тип);
	
#КонецЕсли
КонецФункции // jsonПрочитатьВнутреннийТип()

Процедура jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования)
	
	// Пропуск форматирования.
	Пока (Индекс <= Длина) И Найти(СимволыФорматирования, Сред(Значение, Индекс, 1)) Цикл Индекс = Индекс + 1; КонецЦикла;
	// Пробел его не видно, \r, \n, \t .
	
КонецПроцедуры // jsonПрочитатьПропуститьФорматирование()

Функция ИсключениеПустойПакетДанных()
	
	Возврат НСтр("ru = 'JSON: Пустой пакет данных.'; uk = 'JSON: Порожній пакет даних.'");

КонецФункции // ИсключениеНеожиданноеОкончаниеСтроки()

Функция ИсключениеНекорректныйПакетДанных(Индекс)
	
	Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Некорректный пакет данных в позиции [Индекс].'; uk = 'JSON: Некоректний пакет даних у позиції [Индекс].'"),
		Новый Структура("Индекс", Индекс));

КонецФункции // ИсключениеНекорректныйПакетДанных()

Функция ИсключениеНеожиданноеОкончаниеПакетаДанных()
	
	Возврат НСтр("ru = 'JSON: Неожиданное окончание пакета данных.'; uk = 'JSON: Несподіване закінчення пакета даних.'");

КонецФункции // ИсключениеНеожиданноеОкончаниеПакетаДанных()

Функция ИсключениеНеожиданноеОкончаниеМассива(Индекс)
	
	Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Неожиданное окончание массива в позиции [Индекс].'; uk = 'JSON: Несподіване закінчення масиву у позиції [Индекс].'"),
		Новый Структура("Индекс", Индекс));

КонецФункции // ИсключениеНеожиданноеОкончаниеМассива()

Функция ИсключениеНеожиданноеОкончаниеОбъекта(Индекс)

	Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Неожиданное окончание объекта в позиции [Индекс].'; uk = 'JSON: Несподіване закінчення об''єкту у позиції [Индекс].'"),
	   Новый Структура("Индекс", Индекс));

КонецФункции // ИсключениеНеожиданноеОкончаниеОбъетка()

Функция ИсключениеНекорректныйТипNull(Индекс)
	
	Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Некорректный тип Null в позиции [Индекс].'; uk = 'JSON: Некоректний тип Null у позиції [Индекс].'"),
	   Новый Структура("Индекс", Индекс));

КонецФункции // ИсключениеНекорректныйТипNull()

Функция ИсключениеНекорректныйТипБулево(Индекс)
	
	Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Некорректный тип Булево в позиции [Индекс].'; uk = 'JSON: Некоректний тип Булево у позиції [Индекс].'"),
	   Новый Структура("Индекс", Индекс));

КонецФункции // ИсключениеНекорректныйТипБулево()

Функция ИсключениеНекорректныйТипНеопределено(Индекс)
	
	Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Некорректный тип Неопределено в позиции [Индекс].'; uk = 'JSON: Некоректний тип Невизначено у позиції [Индекс].'"),
		Новый Структура("Индекс", Индекс));

КонецФункции // ИсключениеНекорректныйТипНеопределено()

Функция ИсключениеНекорректныйФорматСтроки(Индекс)
	
	Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Некорректный формат строки в позиции [Индекс].'; uk = 'JSON: Некоректний формат рядка у позиції [Индекс].'"),
		Новый Структура("Индекс", Индекс));

КонецФункции // ИсключениеНекорректныйФорматСтроки()

Функция ИсключениеНекорректныйФорматДаты(Индекс, Значение)
	
	Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Некорректный формат даты [Значение] в позиции [Индекс].'; uk = 'JSON: Некоректний формат дати [Значение] у позиції [Индекс].'"),
		Новый Структура("Индекс", Индекс, Символ(034) + Значение + Символ(034)));

КонецФункции // ИсключениеНекорректныйФорматДаты()

Функция ИсключениеНекорректныйФорматЧисла(Индекс, Значение)
	
	Если ПустаяСтрока(Значение) Тогда
		
		Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Неверный формат данных в позиции [Индекс].'; uk = 'JSON: Невірний формат даних у позиції [Индекс].'"),
			Новый Структура("Индекс", Индекс));

	Иначе
		
		Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Некорректный формат числа [Значение] в позиции [Индекс].'; uk = 'JSON: Некоректний формат числа [Значение] у позиції [Индекс].'"),
			Новый Структура("Индекс,Значение", Индекс, Символ(034) + Значение + Символ(034)));
					   
	КонецЕсли;
					   
КонецФункции // ИсключениеНекорректныйФорматЧисла()

Функция ИсключениеНедопустимыйСимвол(Индекс, Символ)
	
	Если (Символ = Неопределено) Тогда
		
		Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Недопустимый символ в позиции [Индекс].'; uk = 'JSON: Неприпустимий символ в позиції [Индекс].'"),
			Новый Структура("Индекс", Индекс));

	Иначе
		
		Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Недопустимый символ в позиции [Индекс], ожидается [Символ].'; uk = 'JSON: Неприпустимий символ в позиції [Индекс], очікується [Символ].'"),
			Новый Структура("Индекс,Символ", Индекс, Символ(034) + Символ + Символ(034)));

	КонецЕсли;
				   
КонецФункции // ИсключениеНедопустимыйСимвол()

Функция ИсключениеНеопознанныйТип(Индекс, Тип)
	
	Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Недопустимый тип [Тип] в позиции [Индекс].'; uk = 'JSON: Неприпустимий тип [Тип] у позиції [Индекс].'"),
		Новый Структура("Индекс,Тип", Индекс, Символ(034) + Тип + Символ(034)));

КонецФункции // ИсключениеНеопознанныйТип()

Функция ИсключениеНевозможноПреобразоватьЗначение(Индекс, Значение)
	
	Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Невозможно преобразовать значение [Значение] в позиции [Индекс].'; uk = 'JSON: Неможливо перетворити значення [Значение] у позиції [Индекс].'"),
		Новый Структура("Индекс,Значение", Индекс, Символ(034) + Значение + Символ(034)));

КонецФункции // ИсключениеНевозможноПреобразоватьЗначение()

Функция ИсключениеНевозможноПреобразоватьЗначениеНаКлиенте(Индекс, Значение)
	
	Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Невозможно на клиенте преобразовать значение [Значение] в позиции [Индекс].'; uk = 'JSON: Неможливо на клієнті перетворити значення [Значение] у позиції [Индекс].'"),
		Новый Структура("Индекс,Значение", Индекс, Символ(034) + Значение + Символ(034)));

КонецФункции // ИсключениеНевозможноПреобразоватьЗначениеНаКлиенте()

Функция ИсключениеНекорректныйПараметр(Параметр)
	
	Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Недопустимое значение параметра [Параметр].'; uk = 'JSON: Неприпустиме значення параметра [Параметр].'"),
		Новый Структура("Параметр", Символ(034) + Параметр + Символ(034)));

КонецФункции // ИсключениеНекорректныйПараметр()

Функция ИсключениеНедопустимыйТипКлюча(Индекс, Значение)
	
	Если (Индекс = Неопределено) Тогда
		
		Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Недопустимый тип значения ключа [Тип].'; uk = 'JSON: Неприпустимий тип значення ключа [Тип].'"),
			Новый Структура("Тип", ТипЗнч(Значение)));

	Иначе
		
		Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Недопустимый тип значения ключа [Тип] в позиции [Индекс].'; uk = 'JSON: Неприпустимий тип значення ключа [Тип] в позиції [Индекс].'"),
			Новый Структура("Индекс,Тип", Индекс, Символ(034) + ТипЗнч(Значение) + Символ(034)));

	КонецЕсли;

КонецФункции // ИсключениеНедопустимыйТипКлюча()

Функция СформироватьСтрокуПоШаблону(Строка, Параметры)
	
	Результат = Строка;
		
	Для Каждого Параметр Из Параметры Цикл
		Результат = СтрЗаменить(Результат, "[" + Параметр.Ключ + "]", Строка(Параметр.Значение));
	КонецЦикла;

	Возврат Результат;
	
КонецФункции // СформироватьСтрокуПоШаблону()

Функция ПолучитьНомерРелиза_Контур() Экспорт
	
	Возврат "4.01.010.02";
	
КонецФункции

Процедура ОбновитьДанныеРГДанныеПоСудам() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Фокус_ИзмененияМаркеров.ИНН КАК ИНН,
		|	Фокус_ИзмененияМаркеров.ДатаСоздания КАК ДатаСоздания,
		|	Фокус_ИзмененияМаркеров.Расшифровка,
		|	Фокус_ИзмененияМаркеров.ID
		|ИЗ
		|	Справочник.Фокус_ИзмененияМаркеров КАК Фокус_ИзмененияМаркеров
		|ГДЕ
		|	Фокус_ИзмененияМаркеров.Расшифровка ПОДОБНО &Расшифровка
		|	И Фокус_ИзмененияМаркеров.ДатаСоздания МЕЖДУ &Дата1 И &Дата2
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИНН,
		|	ДатаСоздания
		|ИТОГИ ПО
		|	ИНН";

	Запрос.УстановитьПараметр("Расшифровка", "Кол-во дел в качестве%");
	Запрос.УстановитьПараметр("Дата1", НачалоГода(ТекущаяДата()));
	Запрос.УстановитьПараметр("Дата2", ТекущаяДата());
	

	Результат = Запрос.Выполнить();

	ВыборкаИНН = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТЗ = НОвый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ИНН");
	ТЗ.Колонки.Добавить("Дата");
	ТЗ.Колонки.Добавить("Истец");
	ТЗ.Колонки.Добавить("Ответчик");
	ТЗ.Колонки.Добавить("ID");

	Пока ВыборкаИНН.Следующий() Цикл
		// Вставить обработку выборки ВыборкаИНН

		ВыборкаДетальныеЗаписи = ВыборкаИНН.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();//первый шаг
		
		ДелОтветчикаИстца = РазложитьДелаОтветчикаИстца(ВыборкаДетальныеЗаписи.Расшифровка);
		ДелИстца = ДелОтветчикаИстца.ВсегоДелИстца;
		ДелОтветчика = ДелОтветчикаИстца.ВсегоДелОтветчика;
		
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл //со второй
			
			ДелОтветчикаИстцаШаг2 = РазложитьДелаОтветчикаИстца(ВыборкаДетальныеЗаписи.Расшифровка);
			ДелИстцаШаг2 = ДелОтветчикаИстцаШаг2.ВсегоДелИстца;
			ДелОтветчикаШаг2 = ДелОтветчикаИстцаШаг2.ВсегоДелОтветчика;
			
			Если ДелИстцаШаг2 <> ДелИстца Тогда //в РС
				
				РазницаДел = ДелИстцаШаг2 - ДелИстца;
				
				НС = ТЗ.Добавить();
				НС.ИНН = ВыборкаДетальныеЗаписи.ИНН;
				НС.Дата = ВыборкаДетальныеЗаписи.ДатаСоздания;
				НС.Истец = РазницаДел;
				НС.ID = ВыборкаДетальныеЗаписи.ID;
				
				ДелИстца = ДелИстцаШаг2;
			КонецЕсли;
			
			Если ДелОтветчикаШаг2 <> ДелОтветчика Тогда //в РС
				
				РазницаДел = ДелОтветчикаШаг2 - ДелОтветчика;
				
				НС = ТЗ.Добавить();
				НС.ИНН = ВыборкаДетальныеЗаписи.ИНН;
				НС.Дата = ВыборкаДетальныеЗаписи.ДатаСоздания;
				НС.Ответчик = РазницаДел;
				НС.ID = ВыборкаДетальныеЗаписи.ID;
				
				ДелОтветчика = ДелОтветчикаШаг2;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	ЗаписатьВРС(ТЗ);
	
КонецПроцедуры

Процедура ЗаписатьВРС(ТаблицаДел)
	
	Для каждого стрх из ТаблицаДел Цикл
		
		НаборЗаписей = РегистрыСведений.ДанныеПоСудебнымДелам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.GuidДела.Установить(СокрЛП(СтрХ.ID));
		Если ЗначениеЗаполнено(СтрХ.Ответчик) Тогда 
			НаборЗаписей.Отбор.ИННОтветчика.Установить(СокрЛП(СтрХ.ИНН));
		Иначе
			НаборЗаписей.Отбор.ИННИстца.Установить(СокрЛП(СтрХ.ИНН));
		КонецЕсли;
		
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество()>0 Тогда 
			Продолжить;
		Конецесли;
		
		МенеджерРегистра = РегистрыСведений.ДанныеПоСудебнымДелам.СоздатьМенеджерЗаписи();
		ТекущаяДата1 = ТекущаяДата(); 
		МенеджерРегистра.Период = ТекущаяДата1; 
		МенеджерРегистра.GuidДела = СтрХ.Id;
		Если ЗначениеЗаполнено(СтрХ.Ответчик) Тогда  
			МенеджерРегистра.ИННОтветчика = СтрХ.ИНН; 		
		Иначе
			МенеджерРегистра.ИннИстца = СтрХ.ИНН; 
		КонецЕсли;
		МенеджерРегистра.Дата = СтрХ.Дата; 		
		МенеджерРегистра.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры

Функция РазложитьДелаОтветчикаИстца(Стр)
	СтруктураДел = Новый Структура;
	ВсегоДелОтветчика = 0;
	ВсегоДелИстца = 0;
	
	МаскаПоискаОтветчика = "Кол-во дел в качестве ответчика:";
	МаскаПоискаИстца = "Кол-во дел в качестве истца:";
	
	ЕстьОтветчик = Найти(Стр, МаскаПоискаОтветчика);
	ЕстьИстец = Найти(Стр, МаскаПоискаИстца);
	Если ЕстьОтветчик <> 0 И ЕстьИстец <> 0 Тогда //есть оба
		ВсегоДелОтветчика = Число(Сред(Стр, СтрДлина(МаскаПоискаОтветчика)+1, ЕстьИстец - 1 - СтрДлина(МаскаПоискаОтветчика)));
		ВсегоДелИстца = Число(Прав(Стр, СтрДлина(Стр) - ЕстьИстец - СтрДлина(МаскаПоискаИстца)));;
	ИначеЕсли ЕстьОтветчик <> 0 И ЕстьИстец = 0 Тогда //есть ответчик
		ВсегоДелОтветчика = Число(Прав(Стр, СтрДлина(Стр) - СтрДлина(МаскаПоискаОтветчика)));
	ИначеЕсли ЕстьОтветчик = 0 И ЕстьИстец <> 0 Тогда //есть истец
		ВсегоДелИстца = Число(Прав(Стр, СтрДлина(Стр) - СтрДлина(МаскаПоискаИстца)));;
	КонецЕсли;
	
	
	СтруктураДел.Вставить("ВсегоДелОтветчика", ВсегоДелОтветчика);
	СтруктураДел.Вставить("ВсегоДелИстца", ВсегоДелИстца);
	
	Возврат СтруктураДел;
КонецФункции
