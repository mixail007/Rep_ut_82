Перем мОбъемЗакупок Экспорт;
Перем мПланыЗакупок Экспорт;
Перем мОбъемПродаж Экспорт;
Перем мПланыПродаж Экспорт;
Перем мЗаказыПоставщикам Экспорт;
Перем мЗаказыПокупателей Экспорт;
Перем мВнутренниеЗаказы Экспорт;
Перем мСкладскиеОстатки Экспорт;
Перем мПлановыеОстатки Экспорт;

Перем мОбъемЗакупокПроцент Экспорт;
Перем мПланыЗакупокПроцент Экспорт;
Перем мОбъемПродажПроцент Экспорт;
Перем мПланыПродажПроцент Экспорт;
Перем мЗаказыПоставщикамПроцент Экспорт;
Перем мЗаказыПокупателейПроцент Экспорт;
Перем мВнутренниеЗаказыПроцент Экспорт;
Перем мСкладскиеОстаткиПроцент Экспорт;
Перем мПлановыеОстаткиПроцент Экспорт;

Перем мОбъемЗакупокДатаНач Экспорт;
Перем мПланыЗакупокДатаНач Экспорт;
Перем мОбъемПродажДатаНач Экспорт;
Перем мПланыПродажДатаНач Экспорт;
Перем мЗаказыПоставщикамДатаНач Экспорт;
Перем мЗаказыПокупателейДатаНач Экспорт;
Перем мВнутренниеЗаказыДатаНач Экспорт;

Перем мОбъемЗакупокДатаКон Экспорт;
Перем мПланыЗакупокДатаКон Экспорт;
Перем мОбъемПродажДатаКон Экспорт;
Перем мПланыПродажДатаКон Экспорт;
Перем мЗаказыПоставщикамДатаКон Экспорт;
Перем мЗаказыПокупателейДатаКон Экспорт;
Перем мВнутренниеЗаказыДатаКон Экспорт;

Перем мСкладскиеОстаткиДата Экспорт;
Перем мПлановыеОстаткиСценарий Экспорт;

Перем мОбъемЗакупокИсключить Экспорт;
Перем мПланыЗакупокИсключить Экспорт;
Перем мОбъемПродажИсключить Экспорт;
Перем мПланыПродажИсключить Экспорт;
Перем мЗаказыПоставщикамИсключить Экспорт;
Перем мЗаказыПокупателейИсключить Экспорт;
Перем мВнутренниеЗаказыИсключить Экспорт;
Перем мСкладскиеОстаткиИсключить Экспорт;
Перем мПлановыеОстаткиИсключить Экспорт;

Перем мИзменитьРезультатРасчетаКоличества Экспорт;
Перем мИзменитьРезультатРасчетаКоличестваПроцент Экспорт;
Перем мРезультатРасчетаКоличестваОкруглитьДо Экспорт;

Перем мРежимСложенияОбъединения Экспорт;

Перем мОбъемЗакупокСтратегияРасчетаСуммы Экспорт;
Перем мПланыЗакупокСтратегияРасчетаСуммы Экспорт;
Перем мОбъемПродажСтратегияРасчетаСуммы Экспорт;
Перем мПланыПродажСтратегияРасчетаСуммы Экспорт;
Перем мЗаказыПоставщикамСтратегияРасчетаСуммы Экспорт;
Перем мЗаказыПокупателейСтратегияРасчетаСуммы Экспорт;
Перем мВнутренниеЗаказыСтратегияРасчетаСуммы Экспорт;
Перем мСкладскиеОстаткиСтратегияРасчетаСуммы Экспорт;
Перем мПлановыеОстаткиСтратегияРасчетаСуммы Экспорт;

Перем мОбъемЗакупокТипЦен Экспорт;
Перем мПланыЗакупокТипЦен Экспорт;
Перем мОбъемПродажТипЦен Экспорт;
Перем мПланыПродажТипЦен Экспорт;
Перем мЗаказыПоставщикамТипЦен Экспорт;
Перем мЗаказыПокупателейТипЦен Экспорт;
Перем мВнутренниеЗаказыТипЦен Экспорт;
Перем мСкладскиеОстаткиТипЦен Экспорт;
Перем мПлановыеОстаткиТипЦен Экспорт;

Перем мОбъемЗакупокСтратегияРасчетаСуммыДата Экспорт;
Перем мПланыЗакупокСтратегияРасчетаСуммыДата Экспорт;
Перем мОбъемПродажСтратегияРасчетаСуммыДата Экспорт;
Перем мПланыПродажСтратегияРасчетаСуммыДата Экспорт;
Перем мЗаказыПоставщикамСтратегияРасчетаСуммыДата Экспорт;
Перем мЗаказыПокупателейСтратегияРасчетаСуммыДата Экспорт;
Перем мВнутренниеЗаказыСтратегияРасчетаСуммыДата Экспорт;
Перем мСкладскиеОстаткиСтратегияРасчетаСуммыДата Экспорт;
Перем мПлановыеОстаткиСтратегияРасчетаСуммыДата Экспорт;

Перем мОбъемЗакупокФункция Экспорт;
Перем мПланыЗакупокФункция Экспорт;
Перем мОбъемПродажФункция Экспорт;
Перем мПланыПродажФункция Экспорт;
Перем мЗаказыПоставщикамФункция Экспорт;
Перем мЗаказыПокупателейФункция Экспорт;
Перем мВнутренниеЗаказыФункция Экспорт;
Перем мСкладскиеОстаткиФункция Экспорт;
Перем мПлановыеОстаткиФункция Экспорт;

Перем мИзменитьРезультатРасчетаСуммы Экспорт;
Перем мИзменитьРезультатРасчетаСуммыПроцент Экспорт;
Перем мРезультатРасчетаСуммыОкруглитьДо Экспорт;

Перем мИспользоватьСвойстваИКатегории Экспорт;

Перем мСформированныеДокументы Экспорт;

Перем мВалюта;
Перем мКурс;
Перем мКратность;

Перем мДокумент Экспорт;

Функция ВыполнитьОбработку(ИсходныеДанные) Экспорт
	
	Если КорректностьЗаполненияДокумента() = Ложь ИЛИ КорректностьЗаполненияДанных() = Ложь Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ИсходныеДанные.Количество() = 0 Тогда
		
		СообщитьОбОшибке("По указанным стратегиям расчета данные не выбраны!");
		Возврат Ложь;
		
	КонецЕсли;
	
	Если мДокумент = Неопределено Тогда
		
		мВалюта = Константы.ВалютаУправленческогоУчета.Получить();
		
	    СтруктураКурса = ПолучитьКурсВалюты(мВалюта, ТекущаяДата());
		
		мКурс = СтруктураКурса.Курс;
		мКратность = СтруктураКурса.Кратность;
		
	Иначе
		
		мВалюта = мДокумент.ВалютаДокумента;
		мКурс = мДокумент.КурсДокумента;
		мКратность = мДокумент.КратностьДокумента;
		
	КонецЕсли;

	
	// 1. Определение флага необходимости распределения по номенклатуре.
	//    Устанавливается в том случае, если хотя бы один исходный план
	//    ведется по группам и хотя бы один конечный по номенклатуре.
	
	ИсходныеДанныеПоГруппам = Ложь;
	
	Для каждого СтрокаИсходныхДанных из ИсходныеДанные Цикл
		
		Если ЭтоПлановыеДанные(СтрокаИсходныхДанных.Источник) И СтрокаИсходныхДанных.Сценарий.ДетализацияПланирования = Перечисления.ДетализацияПланирования.НоменклатурныеГруппы Тогда
			
			ИсходныеДанныеПоГруппам = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КонечныеДанныеПоНоменклатуре = Ложь;
	
	Для каждого СтрокаКонечныхПланов из КонечныеПланы Цикл
		
		Если СтрокаКонечныхПланов.Сценарий.ДетализацияПланирования = Перечисления.ДетализацияПланирования.Номенклатура Тогда
			
			КонечныеДанныеПоНоменклатуре = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	РаспределятьПоНоменклатуре = ИсходныеДанныеПоГруппам И КонечныеДанныеПоНоменклатуре;
	
	// 2. Корректировка плановых данных на остатки с приведением к периодичности сценария остатков.
	ПромежуточныйРезультат = Новый ТаблицаЗначений;
	
	Если мПлановыеОстатки Тогда
		
		ПлановыеОстаткиСценарий = мПлановыеОстаткиСценарий;
		ТекущаяПериодичностьДанных = ПлановыеОстаткиСценарий.Периодичность;
		
		// Приведение исходных данных к периодичности сценария остатков
		ИндексСтроки = 0;
		
		Пока ИндексСтроки < ИсходныеДанные.Количество() Цикл
			
			Если ЭтоПлановыеДанные(ИсходныеДанные[ИндексСтроки].Источник) Тогда
				
				
				НачальныйПериод = ИсходныеДанные[ИндексСтроки].Сценарий.Периодичность;
				КонечныйПериод  = ПлановыеОстаткиСценарий.Периодичность;
				РаспределитьПоПодпериодам(ПромежуточныйРезультат, ИсходныеДанные, ИндексСтроки, НачальныйПериод, КонечныйПериод);
				
				ИсходныеДанные.Удалить(ИндексСтроки);
				
			Иначе
				
				ИндексСтроки = ИндексСтроки + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Корректировка на остатки
		Если ПромежуточныйРезультат.Количество() > 0 Тогда
			
			КорректировкаНаОстатки(ПромежуточныйРезультат, ПлановыеОстаткиСценарий, Истина);
			
		КонецЕсли;
		
	// 3. Приведение плановых данных к минимальной периодичности.
	Иначе
		
		МинимальныйПериод = Перечисления.Периодичность.Год;
		
		Для каждого СтрокаИсходныхДанных из ИсходныеДанные Цикл
			
			Если ЭтоПлановыеДанные(СтрокаИсходныхДанных.Источник) Тогда
				
				Если Перечисления.Периодичность.Индекс(СтрокаИсходныхДанных.Сценарий.Периодичность) < Перечисления.Периодичность.Индекс(МинимальныйПериод) Тогда
					
					МинимальныйПериод = СтрокаИсходныхДанных.Сценарий.Периодичность;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТекущаяПериодичностьДанных = МинимальныйПериод;

		ИндексСтроки = 0;
			
		Пока ИндексСтроки < ИсходныеДанные.Количество() Цикл
			
			Если ЭтоПлановыеДанные(ИсходныеДанные[ИндексСтроки].Источник) Тогда
				
				НачальныйПериод = ИсходныеДанные[ИндексСтроки].Сценарий.Периодичность;
				КонечныйПериод  = МинимальныйПериод;
				РаспределитьПоПодпериодам(ПромежуточныйРезультат, ИсходныеДанные, ИндексСтроки, НачальныйПериод, КонечныйПериод);
				
				ИсходныеДанные.Удалить(ИндексСтроки);
				
			Иначе
				
				ИндексСтроки = ИндексСтроки + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
	// 4. Распределение по номенклатуре.
	ПлановыеДанные = Новый ТаблицаЗначений;
	
	Если РаспределятьПоНоменклатуре Тогда
		
		РаспределитьПоНоменклатуре(ПлановыеДанные, ПромежуточныйРезультат);
		
	Иначе
		
		ПлановыеДанные = ПромежуточныйРезультат.Скопировать();
		
	КонецЕсли;
	
	// 5. Свертка в зависимости от режима сложения/объединения исходных данных
	СложениеОбъединениеПланов(ПлановыеДанные);
	
	// 6. Формирование документов
	
	НачатьТранзакцию();
	
	Для каждого КонечныйПлан из КонечныеПланы Цикл
		
		ТекущиеПлановыеДанные = ПлановыеДанные.Скопировать();
		ТекущиеИсходныеДанные = ИсходныеДанные.Скопировать();
		
		// Приведение показателей плановых данных к конечным планам
		Если (НЕ ЗначениеНеЗаполнено(КонечныйПлан.ДатаНач)) И (НЕ ЗначениеНеЗаполнено(КонечныйПлан.ДатаКон)) Тогда
			
			ВыровнятьПериод(КонечныйПлан.ДатаНач, КонечныйПлан.ДатаКон, КонечныйПлан.Сценарий.Периодичность);
			
			ДлительностьКонечногоПериода = (КонецДня(КонечныйПлан.ДатаКон) - НачалоДня(КонечныйПлан.ДатаНач) + 1) / (3600 * 24);
			
			Для каждого СтрокаПлановыхДанных из ТекущиеПлановыеДанные Цикл
				
				ДлительностьНачальногоПериода = (КонецДня(СтрокаПлановыхДанных.ДатаКонПериода) - НачалоДня(СтрокаПлановыхДанных.ДатаНачПериода) + 1) / (3600 * 24);
				
				СтрокаПлановыхДанных.Количество = СтрокаПлановыхДанных.Количество * ДлительностьКонечногоПериода / ДлительностьНачальногоПериода;
				СтрокаПлановыхДанных.Стоимость  = СтрокаПлановыхДанных.Стоимость * ДлительностьКонечногоПериода / ДлительностьНачальногоПериода;
				
				СтрокаПлановыхДанных.ДатаНачПериода = НачалоДня(КонечныйПлан.ДатаНач);
				СтрокаПлановыхДанных.ДатаКонПериода = КонецДня(КонечныйПлан.ДатаКон);
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Приведение плановых данных к периодичности конечных планов
		РезультатПлановыеДанные = Новый ТаблицаЗначений;
		
		Для ИндексСтроки = 0 по ТекущиеПлановыеДанные.Количество() - 1 Цикл
			
			НачальныйПериод      = ТекущаяПериодичностьДанных;
			КонечныйПериод       = КонечныйПлан.Сценарий.Периодичность;
			ПрофильРаспределения = ?(КонечныйПлан.ПрофильРаспределения.Пустая(), 0, КонечныйПлан.ПрофильРаспределения);
			РаспределитьПоПодпериодам(РезультатПлановыеДанные, ТекущиеПлановыеДанные, ИндексСтроки, НачальныйПериод, КонечныйПериод, ПрофильРаспределения);
			
		КонецЦикла;
		
		// Приведение исходных данных к периодичности конечных планов
		РезультатИсходныеДанные = Новый ТаблицаЗначений;
		
		// Заполнение полей в исходных данных
		ТекущиеИсходныеДанные.ЗаполнитьЗначения(КонечныйПлан.ДатаНач, "ДатаНачПериода");
		ТекущиеИсходныеДанные.ЗаполнитьЗначения(КонечныйПлан.ДатаКон, "ДатаКонПериода");
		
		Для ИндексСтроки = 0 по ТекущиеИсходныеДанные.Количество() - 1 Цикл
			
			НачальныйПериод      = ТекущаяПериодичностьДанных;
			КонечныйПериод       = КонечныйПлан.Сценарий.Периодичность;
			ПрофильРаспределения = ?(КонечныйПлан.ПрофильРаспределения.Пустая(), 0, КонечныйПлан.ПрофильРаспределения);
			РаспределитьПоПодпериодам(РезультатИсходныеДанные, ТекущиеИсходныеДанные, ИндексСтроки, НачальныйПериод, КонечныйПериод, ПрофильРаспределения);
			
		КонецЦикла;
		
		// Формирование таблицы документов
		
		ТаблицаДокументов = Новый ТаблицаЗначений;
		
		ТаблицаДокументов.Колонки.Добавить("ДатаПланирования");
		ТаблицаДокументов.Колонки.Добавить("Подразделение");
		ТаблицаДокументов.Колонки.Добавить("Проект");
		ТаблицаДокументов.Колонки.Добавить("Сценарий");
		ТаблицаДокументов.Колонки.Добавить("Товары");
		
		ТабличнаяЧасть = Новый ТаблицаЗначений;
		
		ТабличнаяЧасть.Колонки.Добавить("Номенклатура");
		ТабличнаяЧасть.Колонки.Добавить("ХарактеристикаНоменклатуры");
		ТабличнаяЧасть.Колонки.Добавить("Количество");
		ТабличнаяЧасть.Колонки.Добавить("Сумма");
		
		Для каждого СтрокаПлановыхДанных из РезультатПлановыеДанные Цикл
			
			НайденныеДокументы = ТаблицаДокументов.НайтиСтроки(Новый Структура("ДатаПланирования, Проект, Подразделение", СтрокаПлановыхДанных.ДатаНачПериода, ?(ЗначениеНеЗаполнено(КонечныйПлан.Проект), СтрокаПлановыхДанных.Проект, КонечныйПлан.Проект), ?(ЗначениеНеЗаполнено(КонечныйПлан.Подразделение), СтрокаПлановыхДанных.Подразделение, КонечныйПлан.Подразделение)));
			
			Если НайденныеДокументы.Количество() > 0 Тогда
				
				ТекущийДокумент = НайденныеДокументы[0];
				
			Иначе
				
				ТекущийДокумент = ТаблицаДокументов.Добавить();
				
				ТекущийДокумент.ДатаПланирования = СтрокаПлановыхДанных.ДатаНачПериода;
				ТекущийДокумент.Проект = ?(ЗначениеНеЗаполнено(КонечныйПлан.Проект), СтрокаПлановыхДанных.Проект, КонечныйПлан.Проект);
				ТекущийДокумент.Подразделение = ?(ЗначениеНеЗаполнено(КонечныйПлан.Подразделение), СтрокаПлановыхДанных.Подразделение, КонечныйПлан.Подразделение);
				ТекущийДокумент.Товары = ТабличнаяЧасть.Скопировать();
				
			КонецЕсли;
			
			ДобавитьСтрокуВТабличнуюЧасть(ТекущийДокумент.Товары, СтрокаПлановыхДанных, КонечныйПлан.Сценарий);
			
		КонецЦикла;
		
		Для каждого СтрокаИсходныхДанных из РезультатИсходныеДанные Цикл
			
			СтруктураОтбора = Новый Структура("ДатаПланирования", СтрокаИсходныхДанных.ДатаНачПериода);
			
			Если ЗначениеНеЗаполнено(КонечныйПлан.Проект) = Ложь Тогда
				
				СтруктураОтбора.Вставить("Проект", КонечныйПлан.Проект);
				
			КонецЕсли;
			
			Если ЗначениеНеЗаполнено(КонечныйПлан.Подразделение) = Ложь Тогда
				
				СтруктураОтбора.Вставить("Подразделение", КонечныйПлан.Подразделение);
				
			КонецЕсли;
			
			НайденныеДокументы = ТаблицаДокументов.НайтиСтроки(СтруктураОтбора);
			
			Если НайденныеДокументы.Количество() > 0 Тогда
				
				Для каждого ТекущийДокумент из НайденныеДокументы Цикл
					
					ДобавитьСтрокуВТабличнуюЧасть(ТекущийДокумент.Товары, СтрокаИсходныхДанных, КонечныйПлан.Сценарий);
					
				КонецЦикла;
				
			Иначе
				
				ТекущийДокумент = ТаблицаДокументов.Добавить();
				
				ТекущийДокумент.ДатаПланирования = СтрокаИсходныхДанных.ДатаНачПериода;
				ТекущийДокумент.Проект = ?(ЗначениеНеЗаполнено(КонечныйПлан.Проект), СтрокаИсходныхДанных.Проект, КонечныйПлан.Проект);
				ТекущийДокумент.Подразделение = ?(ЗначениеНеЗаполнено(КонечныйПлан.Подразделение), СтрокаИсходныхДанных.Подразделение, КонечныйПлан.Подразделение);
				ТекущийДокумент.Товары = ТабличнаяЧасть.Скопировать();
				
				ДобавитьСтрокуВТабличнуюЧасть(ТекущийДокумент.Товары, СтрокаИсходныхДанных, КонечныйПлан.Сценарий);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Формирование документов
		
		Для каждого Документ из ТаблицаДокументов Цикл
			
			Если мДокумент = Неопределено Тогда
				
				Если КонечныйПлан.ВидПлана = Перечисления.ВидыПланирования.Продажи Тогда
					
					НовыйДокумент = Документы.ПланПродаж.СоздатьДокумент();
					НовыйДокумент.Дата = ТекущаяДата();
					ЗаполнитьШапкуДокумента(НовыйДокумент, глТекущийПользователь, мВалюта, "Продажа");
					УстановитьНомерДокумента(НовыйДокумент);
					
				ИначеЕсли КонечныйПлан.ВидПлана = Перечисления.ВидыПланирования.Закупки Тогда
					
					НовыйДокумент = Документы.ПланЗакупок.СоздатьДокумент();
					НовыйДокумент.Дата = ТекущаяДата();
					ЗаполнитьШапкуДокумента(НовыйДокумент, глТекущийПользователь, мВалюта, "Покупка");
					УстановитьНомерДокумента(НовыйДокумент);
					
				КонецЕсли;
				
				НовыйДокумент.ДатаПланирования = Документ.ДатаПланирования;
				НовыйДокумент.Подразделение    = Документ.Подразделение;
				НовыйДокумент.Проект           = Документ.Проект;
				НовыйДокумент.Сценарий         = КонечныйПлан.Сценарий;
				
				СвернутьТабличнуюЧастьДокумента(Документ.Товары, КонечныйПлан.Сценарий);
				
				НовыйДокумент.Товары.Загрузить(Документ.Товары);
				
				Для каждого Товар из НовыйДокумент.Товары Цикл
					
					Товар.ЕдиницаИзмерения = Товар.Номенклатура.ЕдиницаХраненияОстатков;
					Товар.Коэффициент = Товар.ЕдиницаИзмерения.Коэффициент;
					
					РассчитатьКоличествоМестТабЧасти(Товар, НовыйДокумент);
					
					Если ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", НовыйДокумент.Метаданные(), "Товары") Тогда
						
						ЗаполнитьСтавкуНДСТабЧасти(Товар, НовыйДокумент);
						
					КонецЕсли;
					
					Если ЕстьРеквизитТабЧастиДокумента("СуммаНДС", НовыйДокумент.Метаданные(), "Товары") Тогда
						
						РассчитатьСуммуНДСТабЧасти(Товар, НовыйДокумент);
						
					КонецЕсли;
					
					Если КонечныйПлан.Сценарий.УчетПоКоличеству И КонечныйПлан.Сценарий.УчетПоСуммам Тогда
					
						Товар.Цена = Товар.Сумма / Товар.Количество;
						
					КонецЕсли;
					
				КонецЦикла;
					
				Если НовыйДокумент.Товары.Количество() > 0 Тогда
					
					НовыйДокумент.Записать();
					НоваяСтрока = мСформированныеДокументы.Добавить();
					НоваяСтрока.Документ = НовыйДокумент.Ссылка;
					НоваяСтрока.ВидПлана = КонечныйПлан.ВидПлана;
					НоваяСтрока.Пометка  = Истина;
					
				КонецЕсли;
				
			Иначе
				
				СвернутьТабличнуюЧастьДокумента(Документ.Товары, КонечныйПлан.Сценарий);
				
				мДокумент.Товары.Загрузить(Документ.Товары);
				
				Для каждого Товар из мДокумент.Товары Цикл
					
					Товар.ЕдиницаИзмерения = Товар.Номенклатура.ЕдиницаХраненияОстатков;
					Товар.Коэффициент = Товар.ЕдиницаИзмерения.Коэффициент;
					
					РассчитатьКоличествоМестТабЧасти(Товар, мДокумент);
					
					Если ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", мДокумент.Метаданные(), "Товары") Тогда
						
						ЗаполнитьСтавкуНДСТабЧасти(Товар, мДокумент);
						
					КонецЕсли;
					
					Если ЕстьРеквизитТабЧастиДокумента("СуммаНДС", мДокумент.Метаданные(), "Товары") Тогда
						
						РассчитатьСуммуНДСТабЧасти(Товар, мДокумент);
						
					КонецЕсли;
					
					Если КонечныйПлан.Сценарий.УчетПоКоличеству И КонечныйПлан.Сценарий.УчетПоСуммам Тогда
					
						Товар.Цена = Товар.Сумма / Товар.Количество;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции // ВыполнитьОбработку()

Процедура НастроитьПостроитель(ПостроительОтчета) Экспорт
	
	Перем СтруктураДляОтбораПоКатегориям;
	Перем СоответствиеНазначений;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ //РАЗЛИЧНЫЕ
	|	1 КАК Источник,
	|	ЗакупкиОбороты.Номенклатура КАК Номенклатура,
	|	ЗакупкиОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	NULL КАК Сценарий,
	|	NULL КАК Подразделение,
	|	NULL КАК Проект,
	|	&ОбъемЗакупокДатаНач КАК ДатаНачПериода,
	|	&ОбъемЗакупокДатаКон КАК ДатаКонПериода,
	|	ЗакупкиОбороты.КоличествоОборот * &ОбъемЗакупокКоэффициент КАК Количество,
	|	ЗакупкиОбороты.СтоимостьОборот * &ОбъемЗакупокКоэффициент КАК Стоимость
	|ИЗ
	|	РегистрНакопления.Закупки.Обороты(&ОбъемЗакупокДатаНач, &ОбъемЗакупокДатаКон,,
	|		&ОбъемЗакупок = Истина
	|		{Проект.* КАК ОбъемЗакупокПроект,
	|		Подразделение.* КАК ОбъемЗакупокПодразделение,
	|		ДоговорКонтрагента.* КАК ОбъемЗакупокДоговор,
	|		ДоговорКонтрагента.Владелец.* КАК ОбъемЗакупокКонтрагент,
	|		ЗаказПоставщику.* КАК ОбъемЗакупокЗаказПоставщику,
	|		Номенклатура.* КАК ОбъемЗакупокНоменклатура,
	|		ХарактеристикаНоменклатуры.* КАК ОбъемЗакупокХарактеристикаНоменклатуры,
	|		ДокументЗакупки.* КАК ОбъемЗакупокДокументЗакупки,
	|		СтатусПартии КАК ОбъемЗакупокСтатусПартии}
	|	) КАК ЗакупкиОбороты
	|	//СОЕДИНЕНИЯ_ОБЪЕМЗАКУПОК
	|
	|{ГДЕ
	|	Проект.* КАК ОбъемЗакупокПроект,
	|	Подразделение.* КАК ОбъемЗакупокПодразделение,
	|	ДоговорКонтрагента.* КАК ОбъемЗакупокДоговор,
	|	ДоговорКонтрагента.Владелец.* КАК ОбъемЗакупокКонтрагент,
	|	ЗаказПоставщику.* КАК ОбъемЗакупокЗаказПоставщику,
	|	Номенклатура.* КАК ОбъемЗакупокНоменклатура,
	|	ХарактеристикаНоменклатуры.* КАК ОбъемЗакупокХарактеристикаНоменклатуры,
	|	ДокументЗакупки.* КАК ОбъемЗакупокДокументЗакупки,
	|	СтатусПартии КАК ОбъемЗакупокСтатусПартии
	|	//СВОЙСТВА_ОБЪЕМЗАКУПОК
	|	//КАТЕГОРИИ_ОБЪЕМЗАКУПОК
	|}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ //РАЗЛИЧНЫЕ
	|	2 КАК Источник,
	|	ПланыЗакупокОбороты.Номенклатура КАК Номенклатура,
	|	ПланыЗакупокОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ПланыЗакупокОбороты.Сценарий КАК Сценарий,
	|	ПланыЗакупокОбороты.Подразделение КАК Подразделение,
	|	ПланыЗакупокОбороты.Проект КАК Проект,
	|	&ПланыЗакупокДатаНач КАК ДатаНачПериода,
	|	&ПланыЗакупокДатаКон КАК ДатаКонПериода,
	|	ПланыЗакупокОбороты.КоличествоОборот * &ПланыЗакупокКоэффициент КАК Количество,
	|	(ПланыЗакупокОбороты.СтоимостьОборот + ПланыЗакупокОбороты.НДСОборот) * &ПланыЗакупокКоэффициент КАК Стоимость
	|ИЗ
	|	РегистрНакопления.ПланыЗакупок.Обороты(&ПланыЗакупокДатаНач, &ПланыЗакупокДатаКон, ,
	|		&ПланыЗакупок = Истина
	|		{Сценарий.* КАК ПланыЗакупокСценарий,
	|		ДокументПланирования.Проект.* КАК ПланыЗакупокПроект,
	|		ДокументПланирования.Подразделение.* КАК ПланыЗакупокПодразделение,
	|		Номенклатура.* КАК ПланыЗакупокНоменклатура,
	|		ХарактеристикаНоменклатуры.* КАК ПланыЗакупокХарактеристикаНоменклатуры,
	|		ДокументПланирования.* КАК ПланыЗакупокДокументПланирования}
	|	) КАК ПланыЗакупокОбороты
	|	//СОЕДИНЕНИЯ_ПЛАНЫЗАКУПОК
	|
	|{ГДЕ
	|	Сценарий.* КАК ПланыЗакупокСценарий,
	|	ДокументПланирования.Проект.* КАК ПланыЗакупокПроект,
	|	ДокументПланирования.Подразделение.* КАК ПланыЗакупокПодразделение,
	|	Номенклатура.* КАК ПланыЗакупокНоменклатура,
	|	ХарактеристикаНоменклатуры.* КАК ПланыЗакупокХарактеристикаНоменклатуры,
	|	ДокументПланирования.* КАК ПланыЗакупокДокументПланирования
	|	//СВОЙСТВА_ПЛАНЫЗАКУПОК
	|	//КАТЕГОРИИ_ПЛАНЫЗАКУПОК
	|}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ //РАЗЛИЧНЫЕ
	|	3 КАК Источник,
	|	ПродажиОбороты.Номенклатура КАК Номенклатура,
	|	ПродажиОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	NULL КАК Сценарий,
	|	NULL КАК Подразделение,
	|	NULL КАК Проект,
	|	&ОбъемПродажДатаНач КАК ДатаНачПериода,
	|	&ОбъемПродажДатаКон КАК ДатаКонПериода,
	|	ПродажиОбороты.КоличествоОборот * &ОбъемПродажКоэффициент КАК Количество,
	|	ПродажиОбороты.СтоимостьОборот * &ОбъемПродажКоэффициент КАК Стоимость
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(&ОбъемПродажДатаНач, &ОбъемПродажДатаКон,,
	|		&ОбъемПродаж = Истина
	|		{Проект.* КАК ОбъемПродажПроект,
	|		Подразделение.* КАК ОбъемПродажПодразделение,
	|		ДоговорКонтрагента.* КАК ОбъемПродажДоговор,
	|		ДоговорКонтрагента.Владелец.* КАК ОбъемПродажКонтрагент,
	|		ЗаказПокупателя.* КАК ОбъемПродажЗаказПокупателя,
	|		Номенклатура.* КАК ОбъемПродажНоменклатура,
	|		ХарактеристикаНоменклатуры.* КАК ОбъемПродажХарактеристикаНоменклатуры,
	|		ДокументПродажи.* КАК ОбъемПродажДокументПродажи}
	|	) КАК ПродажиОбороты
	|	//СОЕДИНЕНИЯ_ОБЪЕМПРОДАЖ
	|
	|{ГДЕ
	|	Проект.* КАК ОбъемПродажПроект,
	|	Подразделение.* КАК ОбъемПродажПодразделение,
	|	ДоговорКонтрагента.* КАК ОбъемПродажДоговор,
	|	ДоговорКонтрагента.Владелец.* КАК ОбъемПродажКонтрагент,
	|	ЗаказПокупателя.* КАК ОбъемПродажЗаказПокупателя,
	|	Номенклатура.* КАК ОбъемПродажНоменклатура,
	|	ХарактеристикаНоменклатуры.* КАК ОбъемПродажХарактеристикаНоменклатуры,
	|	ДокументПродажи.* КАК ОбъемПродажДокументПродажи
	|	//СВОЙСТВА_ОБЪЕМПРОДАЖ
	|	//КАТЕГОРИИ_ОБЪЕМПРОДАЖ
	|}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ //РАЗЛИЧНЫЕ
	|	4 КАК Источник,
	|	ПланыПродажОбороты.Номенклатура КАК Номенклатура,
	|	ПланыПродажОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ПланыПродажОбороты.Сценарий КАК Сценарий,
	|	ПланыПродажОбороты.Подразделение КАК Подразделение,
	|	ПланыПродажОбороты.Проект КАК Проект,
	|	&ПланыПродажДатаНач КАК ДатаНачПериода,
	|	&ПланыПродажДатаКон КАК ДатаКонПериода,
	|	ПланыПродажОбороты.КоличествоОборот * &ПланыПродажКоэффициент КАК Количество,
	|	(ПланыПродажОбороты.СтоимостьОборот + ПланыПродажОбороты.НДСОборот) * &ПланыПродажКоэффициент КАК Стоимость
	|ИЗ
	|	РегистрНакопления.ПланыПродаж.Обороты(&ПланыПродажДатаНач, &ПланыПродажДатаКон, ,
	|		&ПланыПродаж = Истина
	|		{Сценарий.* КАК ПланыПродажСценарий,
	|		ДокументПланирования.Проект.* КАК ПланыПродажПроект,
	|		ДокументПланирования.Подразделение.* КАК ПланыПродажПодразделение,
	|		Номенклатура.* КАК ПланыПродажНоменклатура,
	|		ХарактеристикаНоменклатуры.* КАК ПланыПродажХарактеристикаНоменклатуры,
	|		ДокументПланирования.* КАК ПланыПродажДокументПланирования}
	|	) КАК ПланыПродажОбороты
	|	//СОЕДИНЕНИЯ_ПЛАНЫПРОДАЖ
	|
	|{ГДЕ
	|	Сценарий.* КАК ПланыПродажСценарий,
	|	ДокументПланирования.Проект.* КАК ПланыПродажПроект,
	|	ДокументПланирования.Подразделение.* КАК ПланыПродажПодразделение,
	|	Номенклатура.* КАК ПланыПродажНоменклатура,
	|	ХарактеристикаНоменклатуры.* КАК ПланыПродажХарактеристикаНоменклатуры,
	|	ДокументПланирования.* КАК ПланыПродажДокументПланирования
	|	//СВОЙСТВА_ПЛАНЫПРОДАЖ
	|	//КАТЕГОРИИ_ПЛАНЫПРОДАЖ
	|}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ //РАЗЛИЧНЫЕ
	|	5 КАК Источник,
	|	ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	NULL КАК Сценарий,
	|	NULL КАК Подразделение,
	|	NULL КАК Проект,
	|	NULL КАК ДатаНачПериода,
	|	&ЗаказыПоставщикамДатаКон КАК ДатаКонПериода,
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток * &ЗаказыПоставщикамКоэффициент КАК Количество,
	|	ЗаказыПоставщикамОстатки.СуммаУпрОстаток * &ЗаказыПоставщикамКоэффициент КАК Стоимость
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&ЗаказыПоставщикамДатаКон,
	|		&ЗаказыПоставщикам = Истина И
	//|		(ЗаказПоставщику.ДатаОтгрузки МЕЖДУ &ЗаказыПоставщикамДатаНач И &ЗаказыПоставщикамДатаКон) ИЛИ
	|		(ЗаказПоставщику.ДатаПоступления МЕЖДУ &ЗаказыПоставщикамДатаНач И &ЗаказыПоставщикамДатаКон)
	|		{ДоговорКонтрагента.* КАК ЗаказыПоставщикамДоговор,
	|		ДоговорКонтрагента.Владелец.* КАК ЗаказыПоставщикамКонтрагент,
	|		Номенклатура.* КАК ЗаказыПоставщикамНоменклатура,
	|		ХарактеристикаНоменклатуры.* КАК ЗаказыПоставщикамХарактеристикаНоменклатуры,
	|		ЗаказПоставщику.* КАК ЗаказыПоставщикамЗаказПоставщику,
	|		СтатусПартии КАК ЗаказыПоставщикамСтатусПартии}
	|	) КАК ЗаказыПоставщикамОстатки
	|	//СОЕДИНЕНИЯ_ЗАКАЗЫПОСТАВЩИКАМ
	|
	|{ГДЕ
	|	ДоговорКонтрагента.* КАК ЗаказыПоставщикамДоговор,
	|	ДоговорКонтрагента.Владелец.* КАК ЗаказыПоставщикамКонтрагент,
	|	Номенклатура.* КАК ЗаказыПоставщикамНоменклатура,
	|	ХарактеристикаНоменклатуры.* КАК ЗаказыПоставщикамХарактеристикаНоменклатуры,
	|	ЗаказПоставщику.* КАК ЗаказыПоставщикамЗаказПоставщику
	|	//СВОЙСТВА_ЗАКАЗЫПОСТАВЩИКАМ
	|	//КАТЕГОРИИ_ЗАКАЗЫПОСТАВЩИКАМ
	|}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ //РАЗЛИЧНЫЕ
	|	6 КАК Источник,
	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	NULL КАК Сценарий,
	|	NULL КАК Подразделение,
	|	NULL КАК Проект,
	|	NULL КАК ДатаНачПериода,
	|	&ЗаказыПокупателейДатаКон КАК ДатаКонПериода,
	|	ЗаказыПокупателейОстатки.КоличествоОстаток * &ЗаказыПокупателейКоэффициент КАК Количество,
	|	ЗаказыПокупателейОстатки.СуммаУпрОстаток * &ЗаказыПокупателейКоэффициент КАК Стоимость
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&ЗаказыПокупателейДатаКон,
	|		&ЗаказыПокупателей = Истина И
	|		(ЗаказПокупателя.ДатаОтгрузки МЕЖДУ &ЗаказыПокупателейДатаНач И &ЗаказыПокупателейДатаКон) //ИЛИ
	//|		(ЗаказПокупателя.ДатаПоступления МЕЖДУ &ЗаказыПокупателейДатаНач И &ЗаказыПокупателейДатаКон)
	|		{ДоговорКонтрагента.* КАК ЗаказыПокупателейДоговор,
	|		ДоговорКонтрагента.Владелец.* КАК ЗаказыПокупателейКонтрагент,
	|		Номенклатура.* КАК ЗаказыПокупателейНоменклатура,
	|		ХарактеристикаНоменклатуры.* КАК ЗаказыПокупателейХарактеристикаНоменклатуры,
	|		ЗаказПокупателя.* КАК ЗаказыПокупателейЗаказПокупателя,
	|		СтатусПартии КАК ЗаказыПокупателейСтатусПартии}
	|	) КАК ЗаказыПокупателейОстатки
	|	//СОЕДИНЕНИЯ_ЗАКАЗЫПОКУПАТЕЛЕЙ
	|
	|{ГДЕ
	|	ДоговорКонтрагента.* КАК ЗаказыПокупателейДоговор,
	|	ДоговорКонтрагента.Владелец.* КАК ЗаказыПокупателейКонтрагент,
	|	Номенклатура.* КАК ЗаказыПокупателейНоменклатура,
	|	ХарактеристикаНоменклатуры.* КАК ЗаказыПокупателейХарактеристикаНоменклатуры,
	|	ЗаказПокупателя.* КАК ЗаказыПокупателейЗаказПокупателя,
	|	СтатусПартии КАК ЗаказыПокупателейСтатусПартии
	|	//СВОЙСТВА_ЗАКАЗЫПОКУПАТЕЛЕЙ
	|	//КАТЕГОРИИ_ЗАКАЗЫПОКУПАТЕЛЕЙ
	|}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ //РАЗЛИЧНЫЕ
	|	7 КАК Источник,
	|	ВнутренниеЗаказыОстатки.Номенклатура КАК Номенклатура,
	|	ВнутренниеЗаказыОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	NULL КАК Сценарий,
	|	NULL КАК Подразделение,
	|	NULL КАК Проект,
	|	NULL КАК ДатаНачПериода,
	|	&ВнутренниеЗаказыДатаКон КАК ДатаКонПериода,
	|	ВнутренниеЗаказыОстатки.КоличествоОстаток * &ВнутренниеЗаказыКоэффициент КАК Количество,
	|	0 КАК Стоимость
	|ИЗ
	|	РегистрНакопления.ВнутренниеЗаказы.Остатки(&ВнутренниеЗаказыДатаКон,
	|		&ВнутренниеЗаказы = Истина И
	|		(ВнутреннийЗаказ.ДатаОтгрузки МЕЖДУ &ВнутренниеЗаказыДатаНач И &ВнутренниеЗаказыДатаКон)
	|		{Номенклатура.* КАК ВнутренниеЗаказыНоменклатура,
	|		ХарактеристикаНоменклатуры.* КАК ВнутренниеЗаказыХарактеристикаНоменклатуры,
	|		ВнутреннийЗаказ.* КАК ВнутренниеЗаказыВнутреннийЗаказ,
	|		СтатусПартии КАК ВнутренниеЗаказыСтатусПартии}
	|	) КАК ВнутренниеЗаказыОстатки
	|	//СОЕДИНЕНИЯ_ВНУТРЕННИЕЗАКАЗЫ
	|
	|{ГДЕ
	|	Номенклатура.* КАК ЗаказыПокупателейНоменклатура,
	|	ХарактеристикаНоменклатуры.* КАК ЗаказыПокупателейХарактеристикаНоменклатуры,
	|	ВнутреннийЗаказ.* КАК ВнутренниеЗаказыВнутреннийЗаказ,
	|	СтатусПартии КАК ВнутренниеЗаказыСтатусПартии
	|	//СВОЙСТВА_ВНУТРЕННИЕЗАКАЗЫ
	|	//КАТЕГОРИИ_ВНУТРЕННИЕЗАКАЗЫ
	|}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ //РАЗЛИЧНЫЕ
	|	8 КАК Источник,
	|	ПартииТоваровНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ПартииТоваровНаСкладахОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	NULL КАК Сценарий,
	|	NULL КАК Подразделение,
	|	NULL КАК Проект,
	|	NULL КАК ДатаНачПериода,
	|	&СкладскиеОстаткиДата КАК ДатаКонПериода,
	|	ПартииТоваровНаСкладахОстатки.КоличествоОстаток * &СкладскиеОстаткиКоэффициент КАК Количество,
	|	ПартииТоваровНаСкладахОстатки.СтоимостьОстаток * &СкладскиеОстаткиКоэффициент КАК Стоимость
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&СкладскиеОстаткиДата,
	|		&СкладскиеОстатки = Истина
	|		{Склад.* КАК СкладскиеОстаткиСклад,
	|		Заказ.* КАК СкладскиеОстаткиЗаказ,
	|		Номенклатура.* КАК СкладскиеОстаткиНоменклатура,
	|		ХарактеристикаНоменклатуры.* КАК СкладскиеОстаткиХарактеристикаНоменклатуры,
	|		ДокументОприходования.* КАК СкладскиеОстаткиДокументОприходования,
	|		СтатусПартии КАК СкладскиеОстаткиСтатусПартии}
	|	) КАК ПартииТоваровНаСкладахОстатки
	|	//СОЕДИНЕНИЯ_СКЛАДСКИЕОСТАТКИ
	|
	|{ГДЕ
	|	Склад.* КАК СкладскиеОстаткиСклад,
	|	Заказ.* КАК СкладскиеОстаткиЗаказ,
	|	Номенклатура.* КАК СкладскиеОстаткиНоменклатура,
	|	ХарактеристикаНоменклатуры.* КАК СкладскиеОстаткиХарактеристикаНоменклатуры,
	|	ДокументОприходования.* КАК СкладскиеОстаткиДокументОприходования,
	|	СтатусПартии КАК СкладскиеОстаткиСтатусПартии
	|	//СВОЙСТВА_СКЛАДСКИЕОСТАТКИ
	|	//КАТЕГОРИИ_СКЛАДСКИЕОСТАТКИ
	|}";
	
	
	СтруктураПредставлениеПолей = Новый Структура();
	
	// Объем закупок
	СтруктураПредставлениеПолей.Вставить("ОбъемЗакупокПроект",                     "Объем закупок - Проект");
	СтруктураПредставлениеПолей.Вставить("ОбъемЗакупокПодразделение",              "Объем закупок - Подразделение");
	СтруктураПредставлениеПолей.Вставить("ОбъемЗакупокДоговор",                    "Объем закупок - Договор");
	СтруктураПредставлениеПолей.Вставить("ОбъемЗакупокКонтрагент",                 "Объем закупок - Контрагент");
	СтруктураПредставлениеПолей.Вставить("ОбъемЗакупокЗаказПоставщику",            "Объем закупок - Заказ поставщику");
	СтруктураПредставлениеПолей.Вставить("ОбъемЗакупокНоменклатура",               "Объем закупок - Номенклатура");
	СтруктураПредставлениеПолей.Вставить("ОбъемЗакупокХарактеристикаНоменклатуры", "Объем закупок - Характеристика номенклатуры");
	СтруктураПредставлениеПолей.Вставить("ОбъемЗакупокДокументЗакупки",            "Объем закупок - Документ закупки");
	СтруктураПредставлениеПолей.Вставить("ОбъемЗакупокСтатусПартии",               "Объем закупок - Статус партии");
	
	// Планы закупок
	СтруктураПредставлениеПолей.Вставить("ПланыЗакупокСценарий",                   "Планы закупок - Сценарий");
	СтруктураПредставлениеПолей.Вставить("ПланыЗакупокПроект",                     "Планы закупок - Проект");
	СтруктураПредставлениеПолей.Вставить("ПланыЗакупокПодразделение",              "Планы закупок - Подразделение");
	СтруктураПредставлениеПолей.Вставить("ПланыЗакупокНоменклатура",               "Планы закупок - Номенклатура");
	СтруктураПредставлениеПолей.Вставить("ПланыЗакупокХарактеристикаНоменклатуры", "Планы закупок - Характеристика номенклатуры");
	СтруктураПредставлениеПолей.Вставить("ПланыЗакупокДокументПланирования",       "Планы закупок - Документ планирования");

	// Объем продаж
	СтруктураПредставлениеПолей.Вставить("ОбъемПродажПроект",                     "Объем продаж - Проект");
	СтруктураПредставлениеПолей.Вставить("ОбъемПродажПодразделение",              "Объем продаж - Подразделение");
	СтруктураПредставлениеПолей.Вставить("ОбъемПродажДоговор",                    "Объем продаж - Договор");
	СтруктураПредставлениеПолей.Вставить("ОбъемПродажКонтрагент",                 "Объем продаж - Контрагент");
	СтруктураПредставлениеПолей.Вставить("ОбъемПродажЗаказПокупателя",            "Объем продаж - Заказ покупателя");
	СтруктураПредставлениеПолей.Вставить("ОбъемПродажНоменклатура",               "Объем продаж - Номенклатура");
	СтруктураПредставлениеПолей.Вставить("ОбъемПродажХарактеристикаНоменклатуры", "Объем продаж - Характеристика номенклатуры");
	СтруктураПредставлениеПолей.Вставить("ОбъемПродажДокументПродажи",            "Объем продаж - Документ продажи");
	
	// Планы продаж
	СтруктураПредставлениеПолей.Вставить("ПланыПродажСценарий",                   "Планы продаж - Сценарий");
	СтруктураПредставлениеПолей.Вставить("ПланыПродажПроект",                     "Планы продаж - Проект");
	СтруктураПредставлениеПолей.Вставить("ПланыПродажПодразделение",              "Планы продаж - Подразделение");
	СтруктураПредставлениеПолей.Вставить("ПланыПродажНоменклатура",               "Планы продаж - Номенклатура");
	СтруктураПредставлениеПолей.Вставить("ПланыПродажХарактеристикаНоменклатуры", "Планы продаж - Характеристика номенклатуры");
	СтруктураПредставлениеПолей.Вставить("ПланыПродажДокументПланирования",       "Планы продаж - Документ планирования");
	
	// Заказы поставщикам
	СтруктураПредставлениеПолей.Вставить("ЗаказыПоставщикамДоговор",                    "Заказы поставщикам - Договор");
	СтруктураПредставлениеПолей.Вставить("ЗаказыПоставщикамКонтрагент",                 "Заказы поставщикам - Контрагент");
	СтруктураПредставлениеПолей.Вставить("ЗаказыПоставщикамНоменклатура",               "Заказы поставщикам - Номенклатура");
	СтруктураПредставлениеПолей.Вставить("ЗаказыПоставщикамХарактеристикаНоменклатуры", "Заказы поставщикам - Характеристика номенклатуры");
	СтруктураПредставлениеПолей.Вставить("ЗаказыПоставщикамЗаказПоставщику",            "Заказы поставщикам - Заказ поставщику");
	СтруктураПредставлениеПолей.Вставить("ЗаказыПоставщикамСтатусПартии",               "Заказы поставщикам - Статус партии");
	
	// Заказы покупателей
	СтруктураПредставлениеПолей.Вставить("ЗаказыПокупателейДоговор",                    "Заказы покупателей - Договор");
	СтруктураПредставлениеПолей.Вставить("ЗаказыПокупателейКонтрагент",                 "Заказы покупателей - Контрагент");
	СтруктураПредставлениеПолей.Вставить("ЗаказыПокупателейНоменклатура",               "Заказы покупателей - Номенклатура");
	СтруктураПредставлениеПолей.Вставить("ЗаказыПокупателейХарактеристикаНоменклатуры", "Заказы покупателей - Характеристика номенклатуры");
	СтруктураПредставлениеПолей.Вставить("ЗаказыПокупателейЗаказПокупателя",            "Заказы покупателей - Заказ покупателя");
	СтруктураПредставлениеПолей.Вставить("ЗаказыПокупателейСтатусПартии",               "Заказы покупателей - Статус партии");
	
	// Внутренние заказы
	СтруктураПредставлениеПолей.Вставить("ВнутренниеЗаказыНоменклатура",               "Внутренние заказы - Номенклатура");
	СтруктураПредставлениеПолей.Вставить("ВнутренниеЗаказыХарактеристикаНоменклатуры", "Внутренние заказы - Характеристика номенклатуры");
	СтруктураПредставлениеПолей.Вставить("ВнутренниеЗаказыВнутреннийЗаказ",            "Внутренние заказы - Внутренний заказ");
	СтруктураПредставлениеПолей.Вставить("ВнутренниеЗаказыСтатусПартии",               "Внутренние заказы - Статус партии");
	
	// Складские остатки
	СтруктураПредставлениеПолей.Вставить("СкладскиеОстаткиНоменклатура",               "Складские остатки - Номенклатура");
	СтруктураПредставлениеПолей.Вставить("СкладскиеОстаткиХарактеристикаНоменклатуры", "Складские остатки - Характеристика номенклатуры");
	СтруктураПредставлениеПолей.Вставить("СкладскиеОстаткиДокументОприходования",      "Складские остатки - Документ оприходования");
	СтруктураПредставлениеПолей.Вставить("СкладскиеОстаткиЗаказ",                      "Складские остатки - Заказ");
	СтруктураПредставлениеПолей.Вставить("СкладскиеОстаткиСклад",                      "Складские остатки - Склад");
	СтруктураПредставлениеПолей.Вставить("СкладскиеСтатусПартии",                      "Складские остатки - Статус партии");
	
	//Отборы по свойствам и категориям
	СоответствиеНазначений = Новый Соответствие;

	Если мИспользоватьСвойстваИКатегории = Истина Тогда
		
		ПВХ = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов;
		
		ТаблицаПолей = Новый ТаблицаЗначений;
		ТаблицаПолей.Колонки.Добавить("ПутьКДанным");
		ТаблицаПолей.Колонки.Добавить("Представление");
		ТаблицаПолей.Колонки.Добавить("Назначение");
		ТаблицаПолей.Колонки.Добавить("НетКатегорий");
		
		ТекстПоляКатегорий = "";
		ТекстПоляСвойств = "";
		
		// Объем закупок
		ТаблицаПолей.Очистить();
		СтрокаТаблицы = ТаблицаПолей.Добавить();
		
		СтрокаТаблицы.ПутьКДанным = "ЗакупкиОбороты.Номенклатура";
		СтрокаТаблицы.Представление = "Номенклатура";
		СтрокаТаблицы.Назначение = ПВХ.Справочник_Номенклатура;
		
		СтрокаТаблицы = ТаблицаПолей.Добавить();
		СтрокаТаблицы.ПутьКДанным = "ЗакупкиОбороты.ХарактеристикаНоменклатуры";
		СтрокаТаблицы.Представление = "Характеристика номенклатуры";
		СтрокаТаблицы.Назначение = ПВХ.Справочник_ХарактеристикиНоменклатуры;
		
		ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, ТекстЗапроса, СтруктураПредставлениеПолей, СоответствиеНазначений, ПостроительОтчета.Параметры,, ТекстПоляКатегорий, ТекстПоляСвойств,, "//СВОЙСТВА_ОБЪЕМЗАКУПОК", "//КАТЕГОРИИ_ОБЪЕМЗАКУПОК", "//СОЕДИНЕНИЯ_ОБЪЕМЗАКУПОК",, СтруктураДляОтбораПоКатегориям);
		
		// Планы закупок
		ТаблицаПолей.Очистить();
		СтрокаТаблицы = ТаблицаПолей.Добавить();
		
		СтрокаТаблицы.ПутьКДанным = "ПланыЗакупокОбороты.Номенклатура";
		СтрокаТаблицы.Представление = "Номенклатура";
		СтрокаТаблицы.Назначение = ПВХ.Справочник_Номенклатура;
		
		СтрокаТаблицы = ТаблицаПолей.Добавить();
		СтрокаТаблицы.ПутьКДанным = "ПланыЗакупокОбороты.ХарактеристикаНоменклатуры";
		СтрокаТаблицы.Представление = "Характеристика номенклатуры";
		СтрокаТаблицы.Назначение = ПВХ.Справочник_ХарактеристикиНоменклатуры;
		
		ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, ТекстЗапроса, СтруктураПредставлениеПолей, СоответствиеНазначений, ПостроительОтчета.Параметры,, ТекстПоляКатегорий, ТекстПоляСвойств,, "//СВОЙСТВА_ПЛАНЫЗАКУПОК", "//КАТЕГОРИИ_ПЛАНЫЗАКУПОК", "//СОЕДИНЕНИЯ_ПЛАНЫЗАКУПОК",, СтруктураДляОтбораПоКатегориям);
		
		// Объем продаж
		ТаблицаПолей.Очистить();
		СтрокаТаблицы = ТаблицаПолей.Добавить();
		
		СтрокаТаблицы.ПутьКДанным = "ПродажиОбороты.Номенклатура";
		СтрокаТаблицы.Представление = "Номенклатура";
		СтрокаТаблицы.Назначение = ПВХ.Справочник_Номенклатура;
		
		СтрокаТаблицы = ТаблицаПолей.Добавить();
		СтрокаТаблицы.ПутьКДанным = "ПродажиОбороты.ХарактеристикаНоменклатуры";
		СтрокаТаблицы.Представление = "Характеристика номенклатуры";
		СтрокаТаблицы.Назначение = ПВХ.Справочник_ХарактеристикиНоменклатуры;
		
		ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, ТекстЗапроса, СтруктураПредставлениеПолей, СоответствиеНазначений, ПостроительОтчета.Параметры,, ТекстПоляКатегорий, ТекстПоляСвойств,, "//СВОЙСТВА_ОБЪЕМПРОДАЖ", "//КАТЕГОРИИ_ОБЪЕМПРОДАЖ", "//СОЕДИНЕНИЯ_ОБЪЕМПРОДАЖ",, СтруктураДляОтбораПоКатегориям);
		
		// Планы продаж
		ТаблицаПолей.Очистить();
		СтрокаТаблицы = ТаблицаПолей.Добавить();
		
		СтрокаТаблицы.ПутьКДанным = "ПланыПродажОбороты.Номенклатура";
		СтрокаТаблицы.Представление = "Номенклатура";
		СтрокаТаблицы.Назначение = ПВХ.Справочник_Номенклатура;
		
		СтрокаТаблицы = ТаблицаПолей.Добавить();
		СтрокаТаблицы.ПутьКДанным = "ПланыПродажОбороты.ХарактеристикаНоменклатуры";
		СтрокаТаблицы.Представление = "Характеристика номенклатуры";
		СтрокаТаблицы.Назначение = ПВХ.Справочник_ХарактеристикиНоменклатуры;
		
		ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, ТекстЗапроса, СтруктураПредставлениеПолей, СоответствиеНазначений, ПостроительОтчета.Параметры,, ТекстПоляКатегорий, ТекстПоляСвойств,, "//СВОЙСТВА_ПЛАНЫПРОДАЖ", "//КАТЕГОРИИ_ПЛАНЫПРОДАЖ", "//СОЕДИНЕНИЯ_ПЛАНЫПРОДАЖ",, СтруктураДляОтбораПоКатегориям);
		
		// Заказы поставщикам
		ТаблицаПолей.Очистить();
		СтрокаТаблицы = ТаблицаПолей.Добавить();
		
		СтрокаТаблицы.ПутьКДанным = "ЗаказыПоставщикамОстатки.Номенклатура";
		СтрокаТаблицы.Представление = "Номенклатура";
		СтрокаТаблицы.Назначение = ПВХ.Справочник_Номенклатура;
		
		СтрокаТаблицы = ТаблицаПолей.Добавить();
		СтрокаТаблицы.ПутьКДанным = "ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры";
		СтрокаТаблицы.Представление = "Характеристика номенклатуры";
		СтрокаТаблицы.Назначение = ПВХ.Справочник_ХарактеристикиНоменклатуры;
		
		ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, ТекстЗапроса, СтруктураПредставлениеПолей, СоответствиеНазначений, ПостроительОтчета.Параметры,, ТекстПоляКатегорий, ТекстПоляСвойств,, "//СВОЙСТВА_ЗАКАЗЫПОСТАВЩИКАМ", "//КАТЕГОРИИ_ЗАКАЗЫПОСТАВЩИКАМ", "//СОЕДИНЕНИЯ_ЗАКАЗЫПОСТАВЩИКАМ",, СтруктураДляОтбораПоКатегориям);
		
		// Заказы покупателей
		ТаблицаПолей.Очистить();
		СтрокаТаблицы = ТаблицаПолей.Добавить();
		
		СтрокаТаблицы.ПутьКДанным = "ЗаказыПокупателейОстатки.Номенклатура";
		СтрокаТаблицы.Представление = "Номенклатура";
		СтрокаТаблицы.Назначение = ПВХ.Справочник_Номенклатура;
		
		СтрокаТаблицы = ТаблицаПолей.Добавить();
		СтрокаТаблицы.ПутьКДанным = "ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры";
		СтрокаТаблицы.Представление = "Характеристика номенклатуры";
		СтрокаТаблицы.Назначение = ПВХ.Справочник_ХарактеристикиНоменклатуры;
		
		ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, ТекстЗапроса, СтруктураПредставлениеПолей, СоответствиеНазначений, ПостроительОтчета.Параметры,, ТекстПоляКатегорий, ТекстПоляСвойств,, "//СВОЙСТВА_ЗАКАЗЫПОКУПАТЕЛЕЙ", "//КАТЕГОРИИ_ЗАКАЗЫПОКУПАТЕЛЕЙ", "//СОЕДИНЕНИЯ_ЗАКАЗЫПОКУПАТЕЛЕЙ",, СтруктураДляОтбораПоКатегориям);
		
		// Внутренние заказы
		ТаблицаПолей.Очистить();
		СтрокаТаблицы = ТаблицаПолей.Добавить();
		
		СтрокаТаблицы.ПутьКДанным = "ВнутренниеЗаказыОстатки.Номенклатура";
		СтрокаТаблицы.Представление = "Номенклатура";
		СтрокаТаблицы.Назначение = ПВХ.Справочник_Номенклатура;
		
		СтрокаТаблицы = ТаблицаПолей.Добавить();
		СтрокаТаблицы.ПутьКДанным = "ВнутренниеЗаказыОстатки.ХарактеристикаНоменклатуры";
		СтрокаТаблицы.Представление = "Характеристика номенклатуры";
		СтрокаТаблицы.Назначение = ПВХ.Справочник_ХарактеристикиНоменклатуры;
		
		ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, ТекстЗапроса, СтруктураПредставлениеПолей, СоответствиеНазначений, ПостроительОтчета.Параметры,, ТекстПоляКатегорий, ТекстПоляСвойств,, "//СВОЙСТВА_ВНУТРЕННИЕЗАКАЗЫ", "//КАТЕГОРИИ_ВНУТРЕННИЕЗАКАЗЫ", "//СОЕДИНЕНИЯ_ВНУТРЕННИЕЗАКАЗЫ",, СтруктураДляОтбораПоКатегориям);
		
		// Складские остатки
		ТаблицаПолей.Очистить();
		СтрокаТаблицы = ТаблицаПолей.Добавить();
		
		СтрокаТаблицы.ПутьКДанным = "ПартииТоваровНаСкладахОстатки.Номенклатура";
		СтрокаТаблицы.Представление = "Номенклатура";
		СтрокаТаблицы.Назначение = ПВХ.Справочник_Номенклатура;
		
		СтрокаТаблицы = ТаблицаПолей.Добавить();
		СтрокаТаблицы.ПутьКДанным = "ПартииТоваровНаСкладахОстатки.ХарактеристикаНоменклатуры";
		СтрокаТаблицы.Представление = "Характеристика номенклатуры";
		СтрокаТаблицы.Назначение = ПВХ.Справочник_ХарактеристикиНоменклатуры;
		
		ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, ТекстЗапроса, СтруктураПредставлениеПолей, СоответствиеНазначений, ПостроительОтчета.Параметры,, ТекстПоляКатегорий, ТекстПоляСвойств,, "//СВОЙСТВА_СКЛАДСКИЕОСТАТКИ", "//КАТЕГОРИИ_СКЛАДСКИЕОСТАТКИ", "//СОЕДИНЕНИЯ_СКЛАДСКИЕОСТАТКИ",, СтруктураДляОтбораПоКатегориям);

	КонецЕсли;
	
	Если ПустаяСтрока(ТекстЗапроса) = Ложь Тогда
		
		ПостроительОтчета.Текст = ТекстЗапроса;
		
	КонецЕсли;
	
	УстановитьТипыЗначенийСвойствИКатегорийДляОтбора(ПостроительОтчета, ТекстПоляКатегорий, ТекстПоляСвойств, СоответствиеНазначений, СтруктураПредставлениеПолей);
	
	ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	
КонецПроцедуры // НастроитьПостроитель()

Процедура УстановитьПараметрыПостроителя(ПостроительОтчета) Экспорт
	
	ПостроительОтчета.Параметры.Вставить("ОбъемЗакупок",      мОбъемЗакупок);
	ПостроительОтчета.Параметры.Вставить("ПланыЗакупок",      мПланыЗакупок);
	ПостроительОтчета.Параметры.Вставить("ОбъемПродаж",       мОбъемПродаж);
	ПостроительОтчета.Параметры.Вставить("ПланыПродаж",       мПланыПродаж);
	ПостроительОтчета.Параметры.Вставить("ЗаказыПоставщикам", мЗаказыПоставщикам);
	ПостроительОтчета.Параметры.Вставить("ЗаказыПокупателей", мЗаказыПокупателей);
	ПостроительОтчета.Параметры.Вставить("ВнутренниеЗаказы",  мВнутренниеЗаказы);
	ПостроительОтчета.Параметры.Вставить("ВнутренниеЗаказы",  мВнутренниеЗаказы);
	ПостроительОтчета.Параметры.Вставить("СкладскиеОстатки",  мСкладскиеОстатки);
	ПостроительОтчета.Параметры.Вставить("ПлановыеОстатки",   мПлановыеОстатки);
	
	ПостроительОтчета.Параметры.Вставить("ОбъемЗакупокДатаНач",      мОбъемЗакупокДатаНач);
	ПостроительОтчета.Параметры.Вставить("ОбъемЗакупокДатаКон",      ПолучитьКонецИнтервала(мОбъемЗакупокДатаКон));
	ПостроительОтчета.Параметры.Вставить("ПланыЗакупокДатаНач",      мПланыЗакупокДатаНач);
	ПостроительОтчета.Параметры.Вставить("ПланыЗакупокДатаКон",      ПолучитьКонецИнтервала(мПланыЗакупокДатаКон));
	ПостроительОтчета.Параметры.Вставить("ОбъемПродажДатаНач",       мОбъемПродажДатаНач);
	ПостроительОтчета.Параметры.Вставить("ОбъемПродажДатаКон",       ПолучитьКонецИнтервала(мОбъемПродажДатаКон));
	ПостроительОтчета.Параметры.Вставить("ПланыПродажДатаНач",       мПланыПродажДатаНач);
	ПостроительОтчета.Параметры.Вставить("ПланыПродажДатаКон",       ПолучитьКонецИнтервала(мПланыПродажДатаКон));
	ПостроительОтчета.Параметры.Вставить("ЗаказыПоставщикамДатаНач", мЗаказыПоставщикамДатаНач);
	ПостроительОтчета.Параметры.Вставить("ЗаказыПоставщикамДатаКон", ПолучитьКонецИнтервала(мЗаказыПоставщикамДатаКон));
	ПостроительОтчета.Параметры.Вставить("ЗаказыПокупателейДатаНач", мЗаказыПокупателейДатаНач);
	ПостроительОтчета.Параметры.Вставить("ЗаказыПокупателейДатаКон", ПолучитьКонецИнтервала(мЗаказыПокупателейДатаКон));
	ПостроительОтчета.Параметры.Вставить("ВнутренниеЗаказыДатаНач",  мВнутренниеЗаказыДатаНач);
	ПостроительОтчета.Параметры.Вставить("ВнутренниеЗаказыДатаКон",  ПолучитьКонецИнтервала(мВнутренниеЗаказыДатаКон));
	ПостроительОтчета.Параметры.Вставить("СкладскиеОстаткиДата",     мСкладскиеОстаткиДата);
	
	ПостроительОтчета.Параметры.Вставить("ОбъемЗакупокКоэффициент",      ПолучитьКоэффициент(мОбъемЗакупокИсключить,      мОбъемЗакупокПроцент));
	ПостроительОтчета.Параметры.Вставить("ПланыЗакупокКоэффициент",      ПолучитьКоэффициент(мПланыЗакупокИсключить,      мПланыЗакупокПроцент));
	ПостроительОтчета.Параметры.Вставить("ОбъемПродажКоэффициент",       ПолучитьКоэффициент(мОбъемПродажИсключить,       мОбъемПродажПроцент));
	ПостроительОтчета.Параметры.Вставить("ПланыПродажКоэффициент",       ПолучитьКоэффициент(мПланыПродажИсключить,       мПланыПродажПроцент));
	ПостроительОтчета.Параметры.Вставить("ЗаказыПоставщикамКоэффициент", ПолучитьКоэффициент(мЗаказыПоставщикамИсключить, мЗаказыПоставщикамПроцент));
	ПостроительОтчета.Параметры.Вставить("ЗаказыПокупателейКоэффициент", ПолучитьКоэффициент(мЗаказыПокупателейИсключить, мЗаказыПокупателейПроцент));
	ПостроительОтчета.Параметры.Вставить("ВнутренниеЗаказыКоэффициент",  ПолучитьКоэффициент(мВнутренниеЗаказыИсключить,  мВнутренниеЗаказыПроцент));
	ПостроительОтчета.Параметры.Вставить("СкладскиеОстаткиКоэффициент",  ПолучитьКоэффициент(мСкладскиеОстаткиИсключить,  мСкладскиеОстаткиПроцент));
	
КонецПроцедуры // УстановитьПараметрыПостроителя()

Функция ПолучитьКонецИнтервала(Дата)
	
	Если Дата = '00010101000000' Тогда
		
		Возврат Дата;
		
	Иначе
		
		Возврат КонецДня(Дата);
		
	КонецЕсли;
		
КонецФункции // ПолучитьКонецИнтервала()

Функция ПолучитьКоэффициент(Исключить, Процент)
	
	Возврат ?(Исключить, -1, 1) * Процент / 100;
	
КонецФункции // ПолучитьКоэффициент()

Процедура РаспределитьПоПодпериодам(ТаблицаПриемник, ТаблицаИсточник, НомерСтрокиИсточника, НачальныйПериод, КонечныйПериод, ПрофильРаспределения = 0)

	Если Перечисления.Периодичность.Индекс(НачальныйПериод) > Перечисления.Периодичность.Индекс(КонечныйПериод) Тогда
		
		Коэффициенты = Новый Массив();
		Значения     = Новый Соответствие();
		
		// Приведение к начальному периоду

		СтрокаИсточник = ТаблицаИсточник[НомерСтрокиИсточника];

		ДатаНачалаПериода    = СтрокаИсточник.ДатаНачПериода;
		ДатаОкончанияПериода = СтрокаИсточник.ДатаКонПериода;

		НачПериодРезультат = Новый ТаблицаЗначений();

		Значения.Вставить("Количество", ТаблицаИсточник[НомерСтрокиИсточника].Количество);
		Значения.Вставить("Стоимость",  ТаблицаИсточник[НомерСтрокиИсточника].Стоимость);

		Пока (ДатаНачалаПериода < ДатаОкончанияПериода) Цикл

			// Окончание подпериода
			Если НачальныйПериод = Перечисления.Периодичность.День Тогда
				
				ДатаОкончанияПодпериода = КонецДня(ДатаНачалаПериода);
				
			ИначеЕсли НачальныйПериод = Перечисления.Периодичность.Неделя Тогда
				
				ДатаОкончанияПодпериода = КонецНедели(ДатаНачалаПериода);
				
			ИначеЕсли НачальныйПериод = Перечисления.Периодичность.Месяц Тогда
				
				ДатаОкончанияПодпериода = КонецМесяца(ДатаНачалаПериода);
				
			ИначеЕсли НачальныйПериод = Перечисления.Периодичность.Квартал Тогда
				
				ДатаОкончанияПодпериода = КонецКвартала(ДатаНачалаПериода);
				
			ИначеЕсли НачальныйПериод = Перечисления.Периодичность.Год Тогда
				
				ДатаОкончанияПодпериода = КонецГода(ДатаНачалаПериода);
				
			КонецЕсли;
			
			// Начало и окончание подпериода
			ДатаНачалаПодпериода = ДатаНачалаПериода;
			ДатаОкончанияПодпериода = ?(ДатаОкончанияПодпериода > ДатаОкончанияПериода, ДатаОкончанияПериода, ДатаОкончанияПодпериода);
			
			// Начало периода
			ДатаНачалаПериода = ДатаОкончанияПодпериода + 1;

			ДополнитьТаблицу(НачПериодРезультат, ТаблицаИсточник,, НомерСтрокиИсточника);
			
			НачПериодРезультат[НачПериодРезультат.Количество() - 1].ДатаНачПериода = ДатаНачалаПодпериода;
			НачПериодРезультат[НачПериодРезультат.Количество() - 1].ДатаКонПериода = ДатаОкончанияПодпериода;
			
			// Длительность подпериода
			ДлительностьПодпериода = (КонецДня(ДатаОкончанияПодпериода) - НачалоДня(ДатаНачалаПодпериода) + 1) / (3600 * 24);
			
			Коэффициенты.Добавить(ДлительностьПодпериода);
			
		КонецЦикла;
		
		Строки = Новый Массив();
		
		Для каждого Строка из НачПериодРезультат Цикл
			
			Строки.Добавить(Строка);
			
		КонецЦикла;

		Распределить(Строки, Коэффициенты, Значения);

		// Приведение к конечному периоду

		КонПериодРезультат = Новый ТаблицаЗначений();

		Для НомерСтроки = 0 по НачПериодРезультат.Количество() - 1 Цикл
			
			Коэффициенты.Очистить();
			Значения.Очистить();

			КонПериодРезультат.Очистить();

			СтрокаИсточник = НачПериодРезультат[НомерСтроки];

			ДатаНачалаПериода    = СтрокаИсточник.ДатаНачПериода;
			ДатаОкончанияПериода = СтрокаИсточник.ДатаКонПериода;

			Значения.Вставить("Количество", НачПериодРезультат[НомерСтроки].Количество);
			Значения.Вставить("Стоимость",  НачПериодРезультат[НомерСтроки].Стоимость);

			НомерПериода = 0;
			
			Пока (ДатаНачалаПериода < ДатаОкончанияПериода) Цикл
				
				// Окончание подпериода
				Если КонечныйПериод = Перечисления.Периодичность.День Тогда
					
					ДатаОкончанияПодпериода = КонецДня(ДатаНачалаПериода);
					
				ИначеЕсли КонечныйПериод = Перечисления.Периодичность.Неделя Тогда
					
					ДатаОкончанияПодпериода = КонецНедели(ДатаНачалаПериода);
					
				ИначеЕсли КонечныйПериод = Перечисления.Периодичность.Месяц Тогда
					
					ДатаОкончанияПодпериода = КонецМесяца(ДатаНачалаПериода);
					
				ИначеЕсли КонечныйПериод = Перечисления.Периодичность.Квартал Тогда
					
					ДатаОкончанияПодпериода = КонецКвартала(ДатаНачалаПериода);
					
				ИначеЕсли КонечныйПериод = Перечисления.Периодичность.Год Тогда
					
					ДатаОкончанияПодпериода = КонецГода(ДатаНачалаПериода);
					
				КонецЕсли;
				
				// Начало и окончание подпериода
				ДатаНачалаПодпериода = ДатаНачалаПериода;
				ДатаОкончанияПодпериода = ?(ДатаОкончанияПодпериода > ДатаОкончанияПериода, ДатаОкончанияПериода, ДатаОкончанияПодпериода);
				
				// Начало периода
				ДатаНачалаПериода = ДатаОкончанияПодпериода + 1;

				ДополнитьТаблицу(КонПериодРезультат, НачПериодРезультат,, НомерСтроки);
				
				КонПериодРезультат[КонПериодРезультат.Количество() - 1].ДатаНачПериода = ДатаНачалаПодпериода;
				КонПериодРезультат[КонПериодРезультат.Количество() - 1].ДатаКонПериода = ДатаОкончанияПодпериода;
				
				// Длительность подпериода
				ДлительностьПодпериода = (КонецДня(ДатаОкончанияПодпериода) - НачалоДня(ДатаНачалаПодпериода) + 1) / (3600 * 24);
				
				НомерПодпериода = ПолучитьНомерПодпериода(НачальныйПериод, КонечныйПериод, ДатаНачалаПодпериода);
				Если ПрофильРаспределения = 0 Тогда
					
					Коэффициенты.Добавить(ДлительностьПодпериода);
					
				ИначеЕсли ПрофильРаспределения.Распределение.Количество() = 0 Тогда
					
					Коэффициенты.Добавить(ДлительностьПодпериода);
					
				Иначе
					
					НайденнаяСтрока = ПрофильРаспределения.Распределение.Найти(НомерПодпериода, "НомерПодпериода");
					
					Если НайденнаяСтрока = Неопределено Тогда
						
						Коэффициенты.Добавить(0);
						
					Иначе
						
						Коэффициенты.Добавить(НайденнаяСтрока.ДоляПодпериода);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Строки = Новый Массив();
			
			Для каждого Строка из КонПериодРезультат Цикл
				
				Строки.Добавить(Строка);
				
			КонецЦикла;

			Распределить(Строки, Коэффициенты, Значения);
			
			Если КонечныйПериод = Перечисления.Периодичность.Неделя Тогда
				
				Для каждого Строка из КонПериодРезультат Цикл
					
					ВыровнятьПериод(Строка.ДатаНачПериода, Строка.ДатаКонПериода, КонечныйПериод);
					
				КонецЦикла;
				
			КонецЕсли;

			ДополнитьТаблицу(ТаблицаПриемник, КонПериодРезультат);

		КонецЦикла;
		
	Иначе
		
		СтрокаИсточник = ТаблицаИсточник[НомерСтрокиИсточника];		
		
		// Выравнивание по границе периода
		Если КонечныйПериод = Перечисления.Периодичность.День Тогда
			
			ДатаНачПериода = НачалоДня(СтрокаИсточник.ДатаНачПериода);
			ДатаКонПериода = КонецДня(СтрокаИсточник.ДатаКонПериода);
			
		ИначеЕсли КонечныйПериод = Перечисления.Периодичность.Неделя Тогда
			
			ДатаНачПериода = НачалоНедели(СтрокаИсточник.ДатаНачПериода);
			ДатаКонПериода = КонецНедели(СтрокаИсточник.ДатаКонПериода);
			
		ИначеЕсли КонечныйПериод = Перечисления.Периодичность.Месяц Тогда
			
			ДатаНачПериода = НачалоМесяца(СтрокаИсточник.ДатаНачПериода);
			ДатаКонПериода = КонецМесяца(СтрокаИсточник.ДатаКонПериода);
			
		ИначеЕсли КонечныйПериод = Перечисления.Периодичность.Квартал Тогда
			
			ДатаНачПериода = НачалоКвартала(СтрокаИсточник.ДатаНачПериода);
			ДатаКонПериода = КонецКвартала(СтрокаИсточник.ДатаКонПериода);
			
		ИначеЕсли КонечныйПериод = Перечисления.Периодичность.Год Тогда
			
			ДатаНачПериода = НачалоГода(СтрокаИсточник.ДатаНачПериода);
			ДатаКонПериода = КонецГода(СтрокаИсточник.ДатаКонПериода);
			
		КонецЕсли;
		
		// Длительность периода и подпериода
		ДлительностьПериода    = (КонецДня(ДатаКонПериода)                - НачалоДня(ДатаНачПериода)                + 1) / (3600 * 24);
		ДлительностьПодпериода = (КонецДня(СтрокаИсточник.ДатаКонПериода) - НачалоДня(СтрокаИсточник.ДатаНачПериода) + 1) / (3600 * 24);
		
		ДополнитьТаблицу(ТаблицаПриемник, ТаблицаИсточник,, НомерСтрокиИсточника);
		
		ТаблицаПриемник[ТаблицаПриемник.Количество() - 1].ДатаНачПериода = ДатаНачПериода;
		ТаблицаПриемник[ТаблицаПриемник.Количество() - 1].ДатаКонПериода = ДатаКонПериода;
		ТаблицаПриемник[ТаблицаПриемник.Количество() - 1].Количество     = Окр(ТаблицаПриемник[ТаблицаПриемник.Количество() - 1].Количество * ДлительностьПериода / ДлительностьПодпериода, 3);
		ТаблицаПриемник[ТаблицаПриемник.Количество() - 1].Стоимость      = Окр(ТаблицаПриемник[ТаблицаПриемник.Количество() - 1].Стоимость  * ДлительностьПериода / ДлительностьПодпериода, 2);
		
	КонецЕсли;

КонецПроцедуры // РаспределитьПоПодпериодам()

Процедура КорректировкаНаОстатки(ТаблицаИсточник, СценарийПлановыхОстатков, ПоНоменклатуре = Истина)

	ТабИсточник = ТаблицаИсточник.Скопировать();

	Индекс = 0;
	
	Пока Индекс < ТабИсточник.Количество() Цикл
		
		ТипНоменклатуры = ТипЗнч(ТабИсточник[Индекс].Номенклатура);
		
		Если ТипНоменклатуры = Тип("СправочникСсылка.Номенклатура") И НЕ ПоНоменклатуре Тогда
			
			ТабИсточник.Удалить(ТабИсточник[Индекс]);
			
		ИначеЕсли ТипНоменклатуры = Тип("СправочникСсылка.НоменклатурныеГруппы") И ПоНоменклатуре Тогда
			
			ТабИсточник.Удалить(ТабИсточник[Индекс]);
			
		Иначе
			
			Индекс = Индекс + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если мПлановыеОстаткиСтратегияРасчетаСуммы > 1 Тогда
		
		ТипЦен = мПлановыеОстаткиТипЦен;
		ДатаЦены = мПлановыеОстаткиСтратегияРасчетаСуммыДата;
		
	Иначе
		
		ТипЦен = Неопределено;
		
	КонецЕсли;
	
	ТабИсточник.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,Сценарий,ДатаНачПериода,ДатаКонПериода");

	Для каждого СтрокаИсточник из ТабИсточник Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Сценарий",     СценарийПлановыхОстатков);
		Отбор.Вставить("Номенклатура", СтрокаИсточник.Номенклатура);
		Отбор.Вставить("ХарактеристикаНоменклатуры", СтрокаИсточник.ХарактеристикаНоменклатуры);
		ОстаткиНач = РегистрыСведений.ПлановыеОстаткиТоваров.СрезПоследних(СтрокаИсточник.ДатаНачПериода, Отбор);
		ОстаткиКон = РегистрыСведений.ПлановыеОстаткиТоваров.СрезПоследних(СтрокаИсточник.ДатаКонПериода, Отбор);
		
		Коэффициенты = Новый Массив();
		Значения     = Новый Соответствие();
		Значения.Вставить("Количество", (ОстаткиКон.Итог(ОстаткиКон.Колонки["Количество"]) - ОстаткиНач.Итог(ОстаткиНач.Колонки["Количество"])) * ПолучитьКоэффициент(мПлановыеОстаткиИсключить, мПлановыеОстаткиПроцент));
		
		Если ТипЦен = Неопределено Тогда
			
			Значения.Вставить("Стоимость",  (ОстаткиКон.Итог(ОстаткиКон.Колонки["Стоимость"]) + ОстаткиКон.Итог(ОстаткиКон.Колонки["НДС"])) - (ОстаткиНач.Итог(ОстаткиНач.Колонки["Стоимость"])) - ОстаткиНач.Итог(ОстаткиНач.Колонки["НДС"]));
			
		Иначе
			
			Если ТипЗнч(ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
				
				Значения.Вставить("Стоимость", Значения.Количество *
											   ПолучитьЦенуНоменклатуры(СтрокаИсточник.Номенклатура,
											   СтрокаИсточник.ХарактеристикаНоменклатуры,
											   ТипЦен,
											   ДатаЦены,
											   СтрокаИсточник.Номенклатура.ЕдиницаХраненияОстатков,
											   мВалюта,
											   мКурс,
											   мКратность));
				
			ИначеЕсли ТипЗнч(ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатурыКонтрагентов") Тогда
				
				Значения.Вставить("Стоимость", Значения.Количество *
											   ПолучитьЦенуКонтрагента(СтрокаИсточник.Номенклатура,
											   СтрокаИсточник.ХарактеристикаНоменклатуры,
											   ТипЦен.Владелец,
											   ТипЦен,
											   ДатаЦены,
											   СтрокаИсточник.Номенклатура.ЕдиницаХраненияОстатков,
											   мВалюта,
											   мКурс,
											   мКратность));
				
			КонецЕсли;
			
		КонецЕсли;
		
		Строки = Новый Массив();
		
		Для каждого Строка из ТаблицаИсточник Цикл
			
			Если (Строка.Номенклатура   = СтрокаИсточник.Номенклатура) И
				 (Строка.ХарактеристикаНоменклатуры = СтрокаИсточник.ХарактеристикаНоменклатуры) И
				 (Строка.Сценарий       = СтрокаИсточник.Сценарий) И
				 (Строка.ДатаНачПериода = СтрокаИсточник.ДатаНачПериода) И
				 (Строка.ДатаКонПериода = СтрокаИсточник.ДатаКонПериода) Тогда
				 
				Строки.Добавить(Строка);
				Коэффициенты.Добавить(Строка.Количество);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Распределить(Строки, Коэффициенты, Значения, Истина);
		
	КонецЦикла;

КонецПроцедуры // КорректировкаНаОстатки()

Процедура Распределить(Строки, Коэффициенты, Значения, ДополнятьЗначения = Ложь)

	СуммаКоэффициентов = 0;
	
	Для каждого Коэффициент из Коэффициенты Цикл
		
		СуммаКоэффициентов = СуммаКоэффициентов + Коэффициент;
		
	КонецЦикла;
	
	Для Индекс = 0 по Строки.Количество() - 1 Цикл
		
		Для каждого Значение из Значения Цикл
			
			Если СуммаКоэффициентов = 0 Тогда
				
				Строки[Индекс][Значение.Ключ] = 0;
				
			Иначе
				
				Если Индекс = Строки.Количество() - 1 Тогда
					
					Строки[Индекс][Значение.Ключ] = ?(ДополнятьЗначения, Строки[Индекс][Значение.Ключ], 0) + Значение.Значение;
					Значения.Вставить(Значение.Ключ, 0);
					
				Иначе
					Строки[Индекс][Значение.Ключ] = ?(ДополнятьЗначения, Строки[Индекс][Значение.Ключ], 0) + Окр(Значение.Значение * Коэффициенты[Индекс] / СуммаКоэффициентов, 2);
					
					Если Значение.Значение > 0 Тогда
						
						Значения.Вставить(Значение.Ключ, Значение.Значение - Строки[Индекс][Значение.Ключ]);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СуммаКоэффициентов = СуммаКоэффициентов - Коэффициенты[Индекс];
		
	КонецЦикла;

КонецПроцедуры // Распределить()

Функция ПолучитьНомерПодпериода(Период, Подпериод, ДатаНачалаПодпериода)

	Если      Период = Перечисления.Периодичность.День    Тогда
		
		ДатаНачалаПериода = НачалоДня(ДатаНачалаПодпериода);
		
	ИначеЕсли Период = Перечисления.Периодичность.Неделя  Тогда
		
		ДатаНачалаПериода = НачалоНедели(ДатаНачалаПодпериода);
		
	ИначеЕсли Период = Перечисления.Периодичность.Месяц   Тогда
		
		ДатаНачалаПериода = НачалоМесяца(ДатаНачалаПодпериода);
		
	ИначеЕсли Период = Перечисления.Периодичность.Квартал Тогда
		
		ДатаНачалаПериода = НачалоКвартала(ДатаНачалаПодпериода);
		
	ИначеЕсли Период = Перечисления.Периодичность.Год     Тогда
		
		ДатаНачалаПериода = НачалоГода(ДатаНачалаПодпериода);
		
	КонецЕсли;
	
	Если      Подпериод = Перечисления.Периодичность.День    Тогда
		
		Возврат ДеньГода(ДатаНачалаПодпериода) - ДеньГода(ДатаНачалаПериода) + 1;
		
	ИначеЕсли Подпериод = Перечисления.Периодичность.Неделя  Тогда
		
		Возврат НеделяГода(ДатаНачалаПодпериода) - НеделяГода(ДатаНачалаПериода) + 1;
		
	ИначеЕсли Подпериод = Перечисления.Периодичность.Месяц   Тогда
		
		Возврат Месяц(ДатаНачалаПодпериода) - Месяц(ДатаНачалаПериода) + 1;
		
	ИначеЕсли Подпериод = Перечисления.Периодичность.Квартал Тогда
		
		Возврат Цел((Месяц(ДатаНачалаПодпериода) - 1) / 3 + 1);
		
	ИначеЕсли Подпериод = Перечисления.Периодичность.Год     Тогда
		
		Возврат 1;
		
	КонецЕсли;

КонецФункции // ПолучитьНомерПодпериода()

Функция ЭтоПлановыеДанные(Источник)
	
	Если Источник = 2 ИЛИ Источник = 4 Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции // ЭтоПлановыеДанные()

Процедура РаспределитьПоНоменклатуре(ТаблицаПриемник, ТаблицаИсточник)

	ИндексСтроки = 0;

	Пока ИндексСтроки < ТаблицаИсточник.Количество() Цикл
		
		Если ТипЗнч(ТаблицаИсточник[ИндексСтроки].Номенклатура) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда

			ТаблицаРезультатРаспределения = Новый ТаблицаЗначений;

			Коэффициенты = Новый Массив();
			Значения     = Новый Соответствие();

			Значения.Вставить("Количество", ТаблицаИсточник[ИндексСтроки].Количество);
			Значения.Вставить("Стоимость",  ТаблицаИсточник[ИндексСтроки].Стоимость);

			Отбор = Новый Структура("НоменклатурнаяГруппа", ТаблицаИсточник[ИндексСтроки].Номенклатура);
			Номенклатура = Справочники.Номенклатура.Выбрать(,, Отбор);
			
			Пока Номенклатура.Следующий() Цикл
				
				ДополнитьТаблицу(ТаблицаРезультатРаспределения, ТаблицаИсточник, , ИндексСтроки);
                ТаблицаРезультатРаспределения[ТаблицаРезультатРаспределения.Количество() - 1].Номенклатура = Номенклатура.Ссылка;
				Коэффициенты.Добавить(Номенклатура.ВесовойКоэффициентВхождения);
				
			КонецЦикла;

			ТаблицаИсточник.Удалить(ТаблицаИсточник[ИндексСтроки]);
			
			Строки = Новый Массив();
			
			Для каждого Строка из ТаблицаРезультатРаспределения Цикл
				
				Строки.Добавить(Строка);
				
			КонецЦикла;
			
			Распределить(Строки, Коэффициенты, Значения);
			
			ДополнитьТаблицу(ТаблицаПриемник, ТаблицаРезультатРаспределения);
			
		Иначе
			
			ИндексСтроки = ИндексСтроки + 1;
			
		КонецЕсли;
		
	КонецЦикла;

	ДополнитьТаблицу(ТаблицаПриемник, ТаблицаИсточник);
	
КонецПроцедуры // РаспределитьПоНоменклатуре()

Процедура ДобавитьСтрокуВТабличнуюЧасть(ТабличнаяЧасть, ИсходнаяСтрока, Сценарий)
	
	КоэффИзмененияКоличество = 1 + ?(мИзменитьРезультатРасчетаКоличества, мИзменитьРезультатРасчетаКоличестваПроцент / 100, 0);
	КоэффИзмененияСумма = 1 + ?(мИзменитьРезультатРасчетаСуммы, мИзменитьРезультатРасчетаСуммыПроцент / 100, 0);

	Если Сценарий.ДетализацияПланирования = Перечисления.ДетализацияПланирования.НоменклатурныеГруппы И ТипЗнч(ИсходнаяСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		Если ЗначениеНеЗаполнено(ИсходнаяСтрока.Номенклатура.НоменклатурнаяГруппа) Тогда
			
			СообщитьОбОшибке("Для номенклатуры """ + ИсходнаяСтрока.Номенклатура.Наименование + """ не определена номенклатурная группа.");
			Возврат;
			
		КонецЕсли;
		
		НоваяСтрока = ТабличнаяЧасть.Добавить();
	
		НоваяСтрока.Номенклатура = ИсходнаяСтрока.Номенклатура.НоменклатурнаяГруппа;
		НоваяСтрока.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		
	Иначе
		
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		
		НоваяСтрока.Номенклатура = ИсходнаяСтрока.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
		
	КонецЕсли;
	
	Если Сценарий.УчетПоСуммам Тогда
		
		Если ИсходнаяСтрока.Источник = 1 И мОбъемЗакупокСтратегияРасчетаСуммы > 1 Тогда
			
			ТипЦен = мОбъемЗакупокТипЦен;
			ДатаЦены = мОбъемЗакупокСтратегияРасчетаСуммыДата;
			СтратегияРасчета = мОбъемЗакупокСтратегияРасчетаСуммы;
			ФункцияРасчета = мОбъемЗакупокФункция;
			
		ИначеЕсли ИсходнаяСтрока.Источник = 2 И мПланыЗакупокСтратегияРасчетаСуммы > 1 Тогда
			
			ТипЦен = мПланыЗакупокТипЦен;
			ДатаЦены = мПланыЗакупокСтратегияРасчетаСуммыДата;
			СтратегияРасчета = мПланыЗакупокСтратегияРасчетаСуммы;
			ФункцияРасчета = мПланыЗакупокФункция;
			
		ИначеЕсли ИсходнаяСтрока.Источник = 3 И мОбъемПродажСтратегияРасчетаСуммы > 1 Тогда
			
			ТипЦен = мОбъемПродажТипЦен;
			ДатаЦены = мОбъемПродажСтратегияРасчетаСуммыДата;
			СтратегияРасчета = мОбъемПродажСтратегияРасчетаСуммы;
			ФункцияРасчета = мОбъемПродажФункция;
			
		ИначеЕсли ИсходнаяСтрока.Источник = 4 И мПланыПродажСтратегияРасчетаСуммы > 1 Тогда
			
			ТипЦен = мПланыПродажТипЦен;
			ДатаЦены = мПланыПродажСтратегияРасчетаСуммыДата;
			СтратегияРасчета = мПланыПродажСтратегияРасчетаСуммы;
			ФункцияРасчета = мПланыПродажФункция;
			
		ИначеЕсли ИсходнаяСтрока.Источник = 5 И мЗаказыПоставщикамСтратегияРасчетаСуммы > 1 Тогда
			
			ТипЦен = мЗаказыПоставщикамТипЦен;
			ДатаЦены = мЗаказыПоставщикамСтратегияРасчетаСуммыДата;
			СтратегияРасчета = мЗаказыПоставщикамСтратегияРасчетаСуммы;
			ФункцияРасчета = мЗаказыПоставщикамФункция;
			
		ИначеЕсли ИсходнаяСтрока.Источник = 6 И мЗаказыПокупателейСтратегияРасчетаСуммы > 1 Тогда
			
			ТипЦен = мЗаказыПокупателейТипЦен;
			ДатаЦены = мЗаказыПокупателейСтратегияРасчетаСуммыДата;
			СтратегияРасчета = мЗаказыПокупателейСтратегияРасчетаСуммы;
			ФункцияРасчета = мЗаказыПокупателейФункция;
			
		ИначеЕсли ИсходнаяСтрока.Источник = 7 И мВнутренниеЗаказыСтратегияРасчетаСуммы > 1 Тогда
			
			ТипЦен = мВнутренниеЗаказыТипЦен;
			ДатаЦены = мВнутренниеЗаказыСтратегияРасчетаСуммыДата;
			СтратегияРасчета = мВнутренниеЗаказыСтратегияРасчетаСуммы;
			ФункцияРасчета = мВнутренниеЗаказыФункция;
			
		ИначеЕсли ИсходнаяСтрока.Источник = 8 И мСкладскиеОстаткиСтратегияРасчетаСуммы > 1 Тогда
			
			ТипЦен = мСкладскиеОстаткиТипЦен;
			ДатаЦены = мСкладскиеОстаткиСтратегияРасчетаСуммыДата;
			СтратегияРасчета = мСкладскиеОстаткиСтратегияРасчетаСуммы;
			ФункцияРасчета = мСкладскиеОстаткиФункция;
			
		Иначе
			
			ТипЦен = Неопределено;
			
		КонецЕсли;
		
		Если ТипЦен = Неопределено Тогда
			
			НоваяСтрока.Сумма = Окр(ИсходнаяСтрока.Стоимость * КоэффИзмененияСумма, мРезультатРасчетаСуммыОкруглитьДо, 2);
			
		Иначе
			
			НоваяСтрока.Сумма = Окр(КоэффИзмененияСумма * (ИсходнаяСтрока.Количество * КоэффИзмененияКоличество *
								ПолучитьЦену(ИсходнаяСтрока, ТипЦен, ДатаЦены, СтратегияРасчета, ФункцияРасчета)), мРезультатРасчетаСуммыОкруглитьДо, 2);
				
		КонецЕсли;
		
	Иначе
		
		НоваяСтрока.Сумма = 0;
		
	КонецЕсли;
	
	Если Сценарий.УчетПоКоличеству Тогда
		
		НоваяСтрока.Количество = Окр(ИсходнаяСтрока.Количество * КоэффИзмененияКоличество, мРезультатРасчетаКоличестваОкруглитьДо, 2);
		
		Если НоваяСтрока.Количество <= 0 Тогда
			
			ТабличнаяЧасть.Удалить(НоваяСтрока);
			
		КонецЕсли;
		
	Иначе
		
		НоваяСтрока.Количество = 0;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВТабличнуюЧасть()

Функция ПолучитьЦену(Строка, ТипЦен, ДатаЦены, СтратегияРасчета, ФункцияРасчета)
	
	ПолученнаяЦена = 0;
	
	Если СтратегияРасчета = 2 Тогда
		
		ИмяРегистра = "ЦеныНоменклатуры";
		
		Если ЗначениеНеЗаполнено(ТипЦен) Тогда
			
			ТекстУсловия1 = "";
			ТекстУсловия2 = "";
			
		Иначе
			
			ТекстУсловия1 = " И ТипЦен = &ТипЦен";
			ТекстУсловия2 = " И ТипыЦен.Ссылка = &ТипЦен";
			
		КонецЕсли;
		
	ИначеЕсли СтратегияРасчета = 3 Тогда
		
		ИмяРегистра = "ЦеныНоменклатурыКонтрагентов";
		
		Если ЗначениеНеЗаполнено(ТипЦен) Тогда
			
			ТекстУсловия1 = "";
			ТекстУсловия2 = " И Ложь";
			
		ИначеЕсли ТипЗнч(ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатурыКонтрагентов") Тогда
			
			ТекстУсловия1 = " И ТипЦен = &ТипЦен";
			ТекстУсловия2 = " И Ложь";
			
		ИначеЕсли ТипЗнч(ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
			
			ТекстУсловия1 = " И ТипЦен.ТипЦеныНоменклатуры = &ТипЦен";
			ТекстУсловия2 = " И Ложь";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	" + ФункцияРасчета + "(Цены.Цена) КАК Цена
	|ИЗ
	|	(ВЫБРАТЬ
	|		Цены.Цена *
	|		Цены.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент /
	|		Цены.ЕдиницаИзмерения.Коэффициент *
	|		КурсВалюты.Курс *
	|		&Кратность /
	|		КурсВалюты.Кратность /
	|		&Курс КАК Цена
	|	ИЗ
	|		РегистрСведений." + ИмяРегистра + ".СрезПоследних(, Номенклатура = &Номенклатура И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)" + ТекстУсловия1 + ") КАК Цены
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсВалюты
	|			ПО Цены.Валюта = КурсВалюты.Валюта
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		(Цены.Цена * (100 + ТипыЦен.ПроцентСкидкиНаценки) / 100) *
	|		Цены.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент /
	|		Цены.ЕдиницаИзмерения.Коэффициент *
	|		КурсВалюты.Курс *
	|		&Кратность /
	|		КурсВалюты.Кратность /
	|		&Курс КАК Цена
	|	ИЗ
	|		Справочник.ТипыЦенНоменклатуры КАК ТипыЦен
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура = &Номенклатура И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)) КАК Цены
	|			ПО Цены.ТипЦен = ТипыЦен.БазовыйТипЦен
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсВалюты
	|				ПО Цены.Валюта = КурсВалюты.Валюта
	|			
	|	ГДЕ
	|		ТипыЦен.Рассчитывается = Истина" + ТекстУсловия2 + ") КАК Цены";
	
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Номенклатура", Строка.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", Строка.ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	Запрос.УстановитьПараметр("Курс", мКурс);
	Запрос.УстановитьПараметр("Кратность", мКратность);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда

		ПолученнаяЦена = Выборка.Цена;
		
	КонецЕсли;
	
	Если ПолученнаяЦена = Null Тогда
		
		ПолученнаяЦена = 0;
		
	КонецЕсли;
	
	Возврат ПолученнаяЦена;
	
КонецФункции // ПолучитьЦену()

Процедура СвернутьТабличнуюЧастьДокумента(ТабличнаяЧасть, Сценарий)
	
	ТабличнаяЧасть.Свернуть("Номенклатура, ХарактеристикаНоменклатуры", "Количество, Сумма");
	
	УчетПоКоличеству = Сценарий.УчетПоКоличеству;
	УчетПоСуммам = Сценарий.УчетПоСуммам;
	
	ИндексСтроки = 0;
	
	Пока ИндексСтроки < ТабличнаяЧасть.Количество() Цикл
		
		Количество = ТабличнаяЧасть[ИндексСтроки].Количество;
		Сумма = ТабличнаяЧасть[ИндексСтроки].Сумма;
		
		Если (Количество <= 0 И УчетПоКоличеству = Истина) И (Сумма <= 0 И УчетПоСуммам = Истина) Тогда
			
			ТабличнаяЧасть.Удалить(ИндексСтроки);
			
		ИначеЕсли (Количество <= 0 И УчетПоКоличеству = Истина И УчетПоСуммам = Ложь) Тогда
			
			ТабличнаяЧасть.Удалить(ИндексСтроки);
			
		ИначеЕсли (Сумма <= 0 И УчетПоСуммам = Истина И УчетПоКоличеству = Ложь) Тогда
			
			ТабличнаяЧасть.Удалить(ИндексСтроки);
			
			
		Иначе
			
			ИндексСтроки = ИндексСтроки + 1;
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры // СвернутьТабличнуюЧастьДокумента()

Процедура СложениеОбъединениеПланов(ТаблицаИсточник)
	
	Если ТаблицаИсточник.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	//Номенклатура, ХарактеристикаНоменклатуры, Подразделение, Проект, Источник, ДатаКонПериода, ДатаНачПериода, Количество, Стоимость
	
	Если мРежимСложенияОбъединения = 0 Тогда      // Сложение
		
		ТаблицаИсточник.ЗаполнитьЗначения(Справочники.Подразделения.ПустаяСсылка(), "Подразделение");
		ТаблицаИсточник.ЗаполнитьЗначения(Справочники.Проекты.ПустаяСсылка(), "Проект");
		ТаблицаИсточник.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Проект, Подразделение, Источник, ДатаНачПериода, ДатаКонПериода", "Количество, Стоимость");
		
	ИначеЕсли мРежимСложенияОбъединения = 1 Тогда // Объединение
		
		ТаблицаИсточник.ЗаполнитьЗначения(Справочники.Подразделения.ПустаяСсылка(), "Подразделение");
		ТаблицаИсточник.ЗаполнитьЗначения(Справочники.Проекты.ПустаяСсылка(), "Проект");
		ТаблицаИсточник.Сортировать("Номенклатура, ХарактеристикаНоменклатуры, Проект, Подразделение, ДатаНачПериода, Количество Убыв");
		
	ИначеЕсли мРежимСложенияОбъединения = 2 Тогда // Сложение (Проект)
		
		ТаблицаИсточник.ЗаполнитьЗначения(Справочники.Подразделения.ПустаяСсылка(), "Подразделение");
		ТаблицаИсточник.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Проект, Подразделение, Источник, ДатаНачПериода, ДатаКонПериода", "Количество, Стоимость");
		
	ИначеЕсли мРежимСложенияОбъединения = 3 Тогда // Объединение (Проект)
		
		ТаблицаИсточник.ЗаполнитьЗначения(Справочники.Подразделения.ПустаяСсылка(), "Подразделение");
		ТаблицаИсточник.Сортировать("Номенклатура, ХарактеристикаНоменклатуры, Проект, Подразделение, ДатаНачПериода, Количество Убыв");
		
	ИначеЕсли мРежимСложенияОбъединения = 4 Тогда // Сложение (Подразделение)
		
		ТаблицаИсточник.ЗаполнитьЗначения(Справочники.Проекты.ПустаяСсылка(), "Проект");
		ТаблицаИсточник.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Проект, Подразделение, Источник, ДатаНачПериода, ДатаКонПериода", "Количество, Стоимость");
		
	ИначеЕсли мРежимСложенияОбъединения = 5 Тогда // Объединение (Подразделение)
		
		ТаблицаИсточник.ЗаполнитьЗначения(Справочники.Проекты.ПустаяСсылка(), "Проект");
		ТаблицаИсточник.Сортировать("Номенклатура, ХарактеристикаНоменклатуры, Проект, Подразделение, ДатаНачПериода, Количество Убыв");
		
	ИначеЕсли мРежимСложенияОбъединения = 6 Тогда // Сложение (Проект, Подразделение)
		
		ТаблицаИсточник.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Проект, Подразделение, Источник, ДатаНачПериода, ДатаКонПериода", "Количество, Стоимость");
		
	ИначеЕсли мРежимСложенияОбъединения = 7 Тогда // Объединение (Проект, Подразделение)
		
		ТаблицаИсточник.Сортировать("Номенклатура, ХарактеристикаНоменклатуры, Проект, Подразделение, ДатаНачПериода, Количество Убыв");
		
	КонецЕсли;
	
	Если мРежимСложенияОбъединения = 1 ИЛИ мРежимСложенияОбъединения = 3 ИЛИ мРежимСложенияОбъединения = 5 ИЛИ мРежимСложенияОбъединения = 7 Тогда
		
		Индекс = 1;

		Пока Индекс < ТаблицаИсточник.Количество() Цикл
			
			Если ТаблицаИсточник[Индекс].Номенклатура               = ТаблицаИсточник[Индекс - 1].Номенклатура И
				 ТаблицаИсточник[Индекс].ХарактеристикаНоменклатуры = ТаблицаИсточник[Индекс - 1].ХарактеристикаНоменклатуры И
				 ТаблицаИсточник[Индекс].Проект                     = ТаблицаИсточник[Индекс - 1].Проект И
				 ТаблицаИсточник[Индекс].Подразделение              = ТаблицаИсточник[Индекс - 1].Подразделение И
				 ТаблицаИсточник[Индекс].ДатаНачПериода             = ТаблицаИсточник[Индекс - 1].ДатаНачПериода Тогда
				 
				ТаблицаИсточник.Удалить(Индекс);
				
			Иначе
				
				Индекс = Индекс + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // СложениеОбъединениеПланов()

Функция КорректностьЗаполненияДанных()
	
	ДанныеКорректны = Истина;
	
	Если мОбъемЗакупок Тогда
		
		Текст = "";
		
		Если ЗначениеНеЗаполнено(мОбъемЗакупокПроцент) Тогда
			
			Текст = Текст + "Указано нулевое значение процента." + Символы.ПС;
			
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(мОбъемЗакупокДатаНач) Тогда
			
			Текст = Текст + "Не указана дата начала периода." + Символы.ПС;
			ДанныеКорректны = Ложь;
			
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(мОбъемЗакупокДатаКон) Тогда
			
			Текст = Текст + "Не указана дата окончания периода." + Символы.ПС;
			ДанныеКорректны = Ложь;
			
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(мОбъемЗакупокДатаНач) = Ложь И ЗначениеНеЗаполнено(мОбъемЗакупокДатаКон) = Ложь И мОбъемЗакупокДатаНач > мОбъемЗакупокДатаКон Тогда
			
			Текст = Текст + "Дата начала превышает дату окончания периода." + Символы.ПС;
			ДанныеКорректны = Ложь;
			
		КонецЕсли;
		
		Если СтрДлина(Текст) > 0 Тогда
			
			СообщитьОбОшибке(Текст,, "Стратегия расчета количества: Объем закупок.");
			
		КонецЕсли;
		
		Текст = "";
		
		Если мОбъемЗакупокСтратегияРасчетаСуммы > 1 Тогда
			
			Если ЗначениеНеЗаполнено(мОбъемЗакупокСтратегияРасчетаСуммыДата) Тогда
				
				Текст = Текст + "Не указана дата." + Символы.ПС;
				ДанныеКорректны = Ложь;
				
			КонецЕсли;
			
			Если СтрДлина(Текст) > 0 Тогда
				
				СообщитьОбОшибке(Текст,, "Стратегия расчета суммы: Объем закупок.");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если мПланыЗакупок Тогда
		
		Текст = "";
		
		Если ЗначениеНеЗаполнено(мПланыЗакупокПроцент) Тогда
			
			Текст = Текст + "Указано нулевое значение процента." + Символы.ПС;
			
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(мПланыЗакупокДатаНач) Тогда
			
			Текст = Текст + "Не указана дата начала периода." + Символы.ПС;
			ДанныеКорректны = Ложь;
			
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(мПланыЗакупокДатаКон) Тогда
			
			Текст = Текст + "Не указана дата окончания периода." + Символы.ПС;
			ДанныеКорректны = Ложь;
			
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(мПланыЗакупокДатаНач) = Ложь И ЗначениеНеЗаполнено(мПланыЗакупокДатаКон) = Ложь И мПланыЗакупокДатаНач > мПланыЗакупокДатаКон Тогда
			
			Текст = Текст + "Дата начала превышает дату окончания периода." + Символы.ПС;
			ДанныеКорректны = Ложь;
			
		КонецЕсли;
		
		Если СтрДлина(Текст) > 0 Тогда
			
			СообщитьОбОшибке(Текст,, "Стратегия расчета количества: Планы закупок.");
			
		КонецЕсли;
		
		Текст = "";
		
		Если мПланыЗакупокСтратегияРасчетаСуммы > 1 Тогда
			
			Если ЗначениеНеЗаполнено(мПланыЗакупокСтратегияРасчетаСуммыДата) Тогда
				
				Текст = Текст + "Не указана дата." + Символы.ПС;
				ДанныеКорректны = Ложь;
				
			КонецЕсли;
			
			Если СтрДлина(Текст) > 0 Тогда
				
				СообщитьОбОшибке(Текст,, "Стратегия расчета суммы: Планы закупок.");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если мОбъемПродаж Тогда
		
		Текст = "";
		
		Если ЗначениеНеЗаполнено(мОбъемПродажПроцент) Тогда
			
			Текст = Текст + "Указано нулевое значение процента." + Символы.ПС;
			
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(мОбъемПродажДатаНач) Тогда
			
			Текст = Текст + "Не указана дата начала периода." + Символы.ПС;
			ДанныеКорректны = Ложь;
			
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(мОбъемПродажДатаКон) Тогда
			
			Текст = Текст + "Не указана дата окончания периода." + Символы.ПС;
			ДанныеКорректны = Ложь;
			
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(мОбъемПродажДатаНач) = Ложь И ЗначениеНеЗаполнено(мОбъемПродажДатаКон) = Ложь И мОбъемПродажДатаНач > мОбъемПродажДатаКон Тогда
			
			Текст = Текст + "Дата начала превышает дату окончания периода." + Символы.ПС;
			ДанныеКорректны = Ложь;
			
		КонецЕсли;
		
		Если СтрДлина(Текст) > 0 Тогда
			
			СообщитьОбОшибке(Текст,, "Стратегия расчета количества: Объем продаж.");
			
		КонецЕсли;
		
		Текст = "";
		
		Если мОбъемПродажСтратегияРасчетаСуммы > 1 Тогда
			
			Если ЗначениеНеЗаполнено(мОбъемПродажСтратегияРасчетаСуммыДата) Тогда
				
				Текст = Текст + "Не указана дата." + Символы.ПС;
				ДанныеКорректны = Ложь;
				
			КонецЕсли;
			
			Если СтрДлина(Текст) > 0 Тогда
				
				СообщитьОбОшибке(Текст,, "Стратегия расчета суммы: Объем продаж.");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если мПланыПродаж Тогда
		
		Текст = "";
		
		Если ЗначениеНеЗаполнено(мПланыПродажПроцент) Тогда
			
			Текст = Текст + "Указано нулевое значение процента." + Символы.ПС;
			
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(мПланыПродажДатаНач) Тогда
			
			Текст = Текст + "Не указана дата начала периода." + Символы.ПС;
			ДанныеКорректны = Ложь;
			
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(мПланыПродажДатаКон) Тогда
			
			Текст = Текст + "Не указана дата окончания периода." + Символы.ПС;
			ДанныеКорректны = Ложь;
			
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(мПланыПродажДатаНач) = Ложь И ЗначениеНеЗаполнено(мПланыПродажДатаКон) = Ложь И мПланыПродажДатаНач > мПланыПродажДатаКон Тогда
			
			Текст = Текст + "Дата начала превышает дату окончания периода." + Символы.ПС;
			ДанныеКорректны = Ложь;
			
		КонецЕсли;
		
		Если СтрДлина(Текст) > 0 Тогда
			
			СообщитьОбОшибке(Текст,, "Стратегия расчета количества: Планы продаж.");
			
		КонецЕсли;
		
		Текст = "";
		
		Если мПланыПродажСтратегияРасчетаСуммы > 1 Тогда
			
			Если ЗначениеНеЗаполнено(мПланыПродажСтратегияРасчетаСуммыДата) Тогда
				
				Текст = Текст + "Не указана дата." + Символы.ПС;
				ДанныеКорректны = Ложь;
				
			КонецЕсли;
			
			Если СтрДлина(Текст) > 0 Тогда
				
				СообщитьОбОшибке(Текст,, "Стратегия расчета суммы: Планы продаж.");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если мЗаказыПоставщикам Тогда
		
		Текст = "";
		
		Если ЗначениеНеЗаполнено(мЗаказыПоставщикамПроцент) Тогда
			
			Текст = Текст + "Указано нулевое значение процента." + Символы.ПС;
			
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(мЗаказыПоставщикамДатаНач) Тогда
			
			Текст = Текст + "Не указана дата начала периода." + Символы.ПС;
			ДанныеКорректны = Ложь;
			
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(мЗаказыПоставщикамДатаКон) Тогда
			
			Текст = Текст + "Не указана дата окончания периода." + Символы.ПС;
			ДанныеКорректны = Ложь;
			
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(мЗаказыПоставщикамДатаНач) = Ложь И ЗначениеНеЗаполнено(мЗаказыПоставщикамДатаКон) = Ложь И мЗаказыПоставщикамДатаНач > мЗаказыПоставщикамДатаКон Тогда
			
			Текст = Текст + "Дата начала превышает дату окончания периода." + Символы.ПС;
			ДанныеКорректны = Ложь;
			
		КонецЕсли;
		
		Если СтрДлина(Текст) > 0 Тогда
			
			СообщитьОбОшибке(Текст,, "Стратегия расчета количества: Заказы поставщикам.");
			
		КонецЕсли;
		
		Текст = "";
		
		Если мЗаказыПоставщикамСтратегияРасчетаСуммы > 1 Тогда
			
			Если ЗначениеНеЗаполнено(мЗаказыПоставщикамСтратегияРасчетаСуммыДата) Тогда
				
				Текст = Текст + "Не указана дата." + Символы.ПС;
				ДанныеКорректны = Ложь;
				
			КонецЕсли;
			
			Если СтрДлина(Текст) > 0 Тогда
				
				СообщитьОбОшибке(Текст,, "Стратегия расчета суммы: Заказы поставщикам.");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если мЗаказыПокупателей Тогда
		
		Текст = "";
		
		Если ЗначениеНеЗаполнено(мЗаказыПокупателейПроцент) Тогда
			
			Текст = Текст + "Указано нулевое значение процента." + Символы.ПС;
			
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(мЗаказыПокупателейДатаНач) Тогда
			
			Текст = Текст + "Не указана дата начала периода." + Символы.ПС;
			ДанныеКорректны = Ложь;
			
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(мЗаказыПокупателейДатаКон) Тогда
			
			Текст = Текст + "Не указана дата окончания периода." + Символы.ПС;
			ДанныеКорректны = Ложь;
			
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(мЗаказыПокупателейДатаНач) = Ложь И ЗначениеНеЗаполнено(мЗаказыПокупателейДатаКон) = Ложь И мЗаказыПокупателейДатаНач > мЗаказыПокупателейДатаКон Тогда
			
			Текст = Текст + "Дата начала превышает дату окончания периода." + Символы.ПС;
			ДанныеКорректны = Ложь;
			
		КонецЕсли;
		
		Если СтрДлина(Текст) > 0 Тогда
			
			СообщитьОбОшибке(Текст,, "Стратегия расчета количества: Заказы покупателей.");
			
		КонецЕсли;
		
		Текст = "";
		
		Если мЗаказыПокупателейСтратегияРасчетаСуммы > 1 Тогда
			
			Если ЗначениеНеЗаполнено(мЗаказыПокупателейСтратегияРасчетаСуммыДата) Тогда
				
				Текст = Текст + "Не указана дата." + Символы.ПС;
				ДанныеКорректны = Ложь;
				
			КонецЕсли;
			
			Если СтрДлина(Текст) > 0 Тогда
				
				СообщитьОбОшибке(Текст,, "Стратегия расчета суммы: Заказы покупателей.");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если мВнутренниеЗаказы Тогда
		
		Текст = "";
		
		Если ЗначениеНеЗаполнено(мВнутренниеЗаказыПроцент) Тогда
			
			Текст = Текст + "Указано нулевое значение процента." + Символы.ПС;
			
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(мВнутренниеЗаказыДатаНач) Тогда
			
			Текст = Текст + "Не указана дата начала периода." + Символы.ПС;
			ДанныеКорректны = Ложь;
			
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(мВнутренниеЗаказыДатаКон) Тогда
			
			Текст = Текст + "Не указана дата окончания периода." + Символы.ПС;
			ДанныеКорректны = Ложь;
			
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(мВнутренниеЗаказыДатаНач) = Ложь И ЗначениеНеЗаполнено(мВнутренниеЗаказыДатаКон) = Ложь И мВнутренниеЗаказыДатаНач > мВнутренниеЗаказыДатаКон Тогда
			
			Текст = Текст + "Дата начала превышает дату окончания периода." + Символы.ПС;
			ДанныеКорректны = Ложь;
			
		КонецЕсли;
		
		Если СтрДлина(Текст) > 0 Тогда
			
			СообщитьОбОшибке(Текст,, "Стратегия расчета количества: Заказы покупателей.");
			
		КонецЕсли;
		
		Текст = "";
		
		Если мВнутренниеЗаказыСтратегияРасчетаСуммы > 1 Тогда
			
			Если ЗначениеНеЗаполнено(мВнутренниеЗаказыСтратегияРасчетаСуммыДата) Тогда
				
				Текст = Текст + "Не указана дата." + Символы.ПС;
				ДанныеКорректны = Ложь;
				
			КонецЕсли;
			
			Если СтрДлина(Текст) > 0 Тогда
				
				СообщитьОбОшибке(Текст,, "Стратегия расчета суммы: Заказы покупателей.");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если мСкладскиеОстатки Тогда
		
		Текст = "";
		
		Если ЗначениеНеЗаполнено(мСкладскиеОстаткиПроцент) Тогда
			
			Текст = Текст + "Указано нулевое значение процента." + Символы.ПС;
			
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(мСкладскиеОстаткиДата) Тогда
			
			Текст = Текст + "Не указана дата." + Символы.ПС;
			ДанныеКорректны = Ложь;
			
		КонецЕсли;
		
		Если СтрДлина(Текст) > 0 Тогда
			
			СообщитьОбОшибке(Текст,, "Стратегия расчета количества: Складские остатки.");
			
		КонецЕсли;
		
		Текст = "";
		
		Если мСкладскиеОстаткиСтратегияРасчетаСуммы > 1 Тогда
			
			Если ЗначениеНеЗаполнено(мСкладскиеОстаткиСтратегияРасчетаСуммыДата) Тогда
				
				Текст = Текст + "Не указана дата." + Символы.ПС;
				ДанныеКорректны = Ложь;
				
			КонецЕсли;
			
			Если СтрДлина(Текст) > 0 Тогда
				
				СообщитьОбОшибке(Текст,, "Стратегия расчета суммы: Складские остатки.");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если мПлановыеОстатки Тогда
		
		Текст = "";
		
		Если ЗначениеНеЗаполнено(мПлановыеОстаткиПроцент) Тогда
			
			Текст = Текст + "Указано нулевое значение процента." + Символы.ПС;
			
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(мПлановыеОстаткиСценарий) Тогда
			
			Текст = Текст + "Не указан сценарий." + Символы.ПС;
			ДанныеКорректны = Ложь;
			
		КонецЕсли;
		
		Если СтрДлина(Текст) > 0 Тогда
			
			СообщитьОбОшибке(Текст,, "Стратегия расчета количества: Плановые остатки.");
			
		КонецЕсли;
		
		Текст = "";
		
		Если мПлановыеОстаткиСтратегияРасчетаСуммы > 1 Тогда
			
			Если ЗначениеНеЗаполнено(мПлановыеОстаткиСтратегияРасчетаСуммыДата) Тогда
				
				Текст = Текст + "Не указана дата." + Символы.ПС;
				ДанныеКорректны = Ложь;
				
			КонецЕсли;
			
			Если СтрДлина(Текст) > 0 Тогда
				
				СообщитьОбОшибке(Текст,, "Стратегия расчета суммы: Плановые остатки.");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если КонечныеПланы.Количество() > 0 Тогда
		
		Для каждого КонечныйПлан из КонечныеПланы Цикл
			
			Текст = "";
			
			Если ЗначениеНеЗаполнено(КонечныйПлан.ВидПлана) Тогда
				
				Текст = Текст + "Не указан вид плана." + Символы.ПС;
				ДанныеКорректны = Ложь;
				
			КонецЕсли;
			
			Если ЗначениеНеЗаполнено(КонечныйПлан.Сценарий) Тогда
				
				Текст = Текст + "Не указан сценарий." + Символы.ПС;
				ДанныеКорректны = Ложь;
				
			КонецЕсли;
			
			Если ЗначениеНеЗаполнено(КонечныйПлан.Сценарий.Периодичность) Тогда
				
				Текст = Текст + "Не указана периодичность сценария." + Символы.ПС;
				ДанныеКорректны = Ложь;
				
			КонецЕсли;
			
			Если ЗначениеНеЗаполнено(КонечныйПлан.ДатаНач) Тогда
				
				Текст = Текст + "Не указана дата начала периода." + Символы.ПС;
				ДанныеКорректны = Ложь;
				
			КонецЕсли;
			
			Если ЗначениеНеЗаполнено(КонечныйПлан.ДатаКон) Тогда
				
				Текст = Текст + "Не указана дата окончания периода." + Символы.ПС;
				ДанныеКорректны = Ложь;
				
			КонецЕсли;
			
			Если ЗначениеНеЗаполнено(КонечныйПлан.ДатаНач) = Ложь И ЗначениеНеЗаполнено(КонечныйПлан.ДатаКон) = Ложь И КонечныйПлан.ДатаНач > КонечныйПлан.ДатаКон Тогда
				
				Текст = Текст + "Дата начала превышает дату окончания периода." + Символы.ПС;
				ДанныеКорректны = Ложь;
				
			КонецЕсли;
			
			Если СтрДлина(Текст) > 0 Тогда
			
				СообщитьОбОшибке(Текст,, "Конечные планы: Строка " + КонечныйПлан.НомерСтроки + ".");
			
			КонецЕсли;
			
		КонецЦикла;
		
		
	Иначе
		
		СообщитьОбОшибке("Не заполнены.",, "Конечные планы.");
		
	КонецЕсли;
	
	Возврат ДанныеКорректны;
	
КонецФункции // КорретностьЗаполненияДанных()

Функция КорректностьЗаполненияДокумента()
	
	Если мДокумент = Неопределено Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ДанныеКорректны = Истина;
	
	Текст = "";
	
	Если ЗначениеНеЗаполнено(мДокумент.ВалютаДокумента) Тогда
		
		Текст = Текст + "Не выбрана валюта." + Символы.ПС;
		ДанныеКорректны = Ложь;
	
	КонецЕсли;

	Если ЗначениеНеЗаполнено(мДокумент.КурсДокумента) Тогда
		
		Текст = Текст + "Не указан курс валюты." + Символы.ПС;
		ДанныеКорректны = Ложь;
		
	КонецЕсли;

	Если ЗначениеНеЗаполнено(мДокумент.КратностьДокумента) Тогда
		
		Текст = Текст + "Не указана кратность валюты." + Символы.ПС;
		ДанныеКорректны = Ложь;
		
	КонецЕсли;

	Если ЗначениеНеЗаполнено(мДокумент.Сценарий) Тогда
		
		Текст = Текст + "Не указан сценарий планирования." + Символы.ПС;
		ДанныеКорректны = Ложь;
		
	ИначеЕсли ЗначениеНеЗаполнено(мДокумент.Сценарий.Периодичность) Тогда
		
		Текст = Текст + "Не указана периодичность сценария планирования." + Символы.ПС;
		ДанныеКорректны = Ложь;
		
	КонецЕсли;

	Если ЗначениеНеЗаполнено(мДокумент.ДатаПланирования) Тогда
		
		Текст = Текст + "Не указана дата планирования." + Символы.ПС;
		ДанныеКорректны = Ложь;
		
	КонецЕсли;
	
	Если СтрДлина(Текст) > 0 Тогда
	
		СообщитьОбОшибке(Текст,, "В документе: " + Строка(мДокумент));
	
	КонецЕсли;
	
	Возврат ДанныеКорректны;
	
КонецФункции // КорректностьЗаполненияДокумента()
