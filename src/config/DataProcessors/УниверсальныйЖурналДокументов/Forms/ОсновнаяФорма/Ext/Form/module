////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит таблицу соответствия граф журнала и реквизитов документов
Перем мВыводимыеГрафы;

// Хранит список выводимых граф в журнале
Перем мСписокГрафЖурнала;

// Хранит таблицу, предназначенную для быстрого получения списка документов,
// которые вводятся на основании искомого
Перем мВводНаОсновании;

// Хранит список документов для данной конфигурации
Перем мСписокОбрабатываемыхДокументов;

// Хранит список документов имеющих нулевую длину номера
Перем мСписокДокументовБезНомера;

// Хранит имя документа, для которого заполнены пункты меню "Ввод на основании"
// и "Перейти". Позволяет не выполнять их перезаполнение для одного и того же документа.
Перем мМенюДляДокумента;

// Сожержит флаг наличия в конфигурации универсального отчета "ОтчетПоДвижению"
Перем мЕстьОтчетПоДвижению;

// Сожержит флаг наличия в конфигурации общей формы "ФормаСтруктурыПодчиненности"
Перем мЕстьФормаСтруктурыПодчиненности;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает доступность кнопок операций над текущим документом
Процедура ОбновитьДоступностьКнопок()
	ВыбранДокумент=Булево(СписокДокументов.Количество());
	ЭлементыФормы.КоманднаяПанель.Кнопки.Действия.Кнопки.Изменить.Доступность 				   = ВыбранДокумент;
	ЭлементыФормы.КоманднаяПанель.Кнопки.Изменить.Доступность 								   = ВыбранДокумент;
	ЭлементыФормы.КоманднаяПанель.Кнопки.Действия.Кнопки.Скопировать.Доступность 			   = ВыбранДокумент;
	ЭлементыФормы.КоманднаяПанель.Кнопки.Скопировать.Доступность 							   = ВыбранДокумент;
	ЭлементыФормы.КоманднаяПанель.Кнопки.УстановитьПометкуУдаления.Доступность                 = ВыбранДокумент;
	ЭлементыФормы.КоманднаяПанель.Кнопки.Действия.Кнопки.УстановитьПометкуУдаления.Доступность = ВыбранДокумент;	
	ЭлементыФормы.КоманднаяПанель.Кнопки.Провести.Доступность 								   = ВыбранДокумент;
	ЭлементыФормы.КоманднаяПанель.Кнопки.Действия.Кнопки.Провести.Доступность				   = ВыбранДокумент;
	Если Не ВыбранДокумент Тогда		
		ЭлементыФормы.КоманднаяПанель.Кнопки.ОтменаПроведения.Доступность=Ложь;
		ЭлементыФормы.КоманднаяПанель.Кнопки.Действия.Кнопки.ОтменаПроведения.Доступность=Ложь;
	КонецЕсли;	
	МенюПерейти= ЭлементыФормы.КоманднаяПанель.Кнопки["Перейти"];
	МенюПерейти.Кнопки.Очистить();
	МенюВводПоОснованию = ЭлементыФормы.КоманднаяПанель.Кнопки["ВводПоОснованию"];
	МенюВводПоОснованию.Кнопки.Очистить();
КонецПроцедуры // ОбновитьДоступностьКнопок()

// Функция возвращает строку запроса для дополнительных граф журнала
Функция ПолучитьГрафы(ВидДока)
	Рез=", ";
	Для Каждого Графа из мСписокГрафЖурнала Цикл
		Отбор=Новый Структура("СсылкаНаГрафу, ВидДокумента",Графа, ВидДока);
		НайдГрафы=мВыводимыеГрафы.НайтиСтроки(Отбор);		
		Рез=Рез+?(НайдГрафы.Количество()=0, "NULL", 
			?(НайдГрафы[0].НеограниченнаяСтрока, 
			"ВЫРАЗИТЬ("+НайдГрафы[0].ИмяРеквизита+" КАК Строка(200))",
			"Представление("+НайдГрафы[0].ИмяРеквизита+")"))
			+" Как Графа"+Строка(мСписокГрафЖурнала.Индекс(Графа))+", ";

		Рез = Рез + ?(НайдГрафы.Количество()=0, "NULL", """"+НайдГрафы[0].Формат+"""")+" Как Формат"
		      +Строка(мСписокГрафЖурнала.Индекс(Графа))+", ";
	КонецЦикла;
	Рез=Лев(Рез, СтрДлина(Рез)-2);
	Возврат Рез;
КонецФункции // ПолучитьГрафы()

//Функция возвращает строку запроса, ограничивающую выборку по установленному отбору
Функция УсловияПоГрафам(ВидДока, Запрос)
	Рез="";
	Для Каждого Графа из мСписокГрафЖурнала Цикл
		Если Графа.ИспользоватьОтбор=Неопределено ИЛИ Не Графа.ИспользоватьОтбор Тогда
			Продолжить;
		КонецЕсли;		
		Отбор=Новый Структура("СсылкаНаГрафу, ВидДокумента",Графа, ВидДока);
		НайдГрафы=мВыводимыеГрафы.НайтиСтроки(Отбор);
		Если НайдГрафы.Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(Графа.ЗначениеОтбора)=Тип("СписокЗначений") Тогда
			Рез=Рез+НайдГрафы[0].ИмяРеквизита+" В (&ЗначениеОтбора"+Строка(мСписокГрафЖурнала.Индекс(Графа))+") И ";
		Иначе
			Рез=Рез+НайдГрафы[0].ИмяРеквизита+"=&ЗначениеОтбора"+Строка(мСписокГрафЖурнала.Индекс(Графа))+" И ";
		КонецЕсли;
		Запрос.УстановитьПараметр("ЗначениеОтбора"+Строка(мСписокГрафЖурнала.Индекс(Графа)), Графа.ЗначениеОтбора);
	КонецЦикла;
	Рез=Лев(Рез, СтрДлина(Рез)-2);
	Возврат Рез;
Конецфункции // УсловияПоГрафам()

//Процедура осуществляет заполнение табличного поля формы
Процедура ОбновитьСписок()
	Запрос=Новый Запрос;
	ТекстЗапроса="";	
	СтрокаОграниченияПериода="";
	Если ПериодС<>Дата('00010101') Тогда
		СтрокаОграниченияПериода = СтрокаОграниченияПериода+"
		|ГДЕ (Дата>=&НачалоИнтервала)";		
	КонецЕсли;
	Если ПериодПо<>Дата('00010101') Тогда
		Если ПустаяСтрока(СтрокаОграниченияПериода) Тогда
			СтрокаОграниченияПериода = СтрокаОграниченияПериода+"
			|ГДЕ (Дата<=&КонецИнтервала)";
		Иначе
			СтрокаОграниченияПериода = СтрокаОграниченияПериода+" И (Дата<=&КонецИнтервала)";
		КонецЕсли;		
	КонецЕсли;
		
	Для Каждого Док Из мСписокОбрабатываемыхДокументов Цикл
		Если Док.Пометка=Истина Тогда
			ИмяДока=Док.Значение;
			СтрокаОтбораПоГрафам = УсловияПоГрафам(ИмяДока, Запрос);
			ТекстГДЕ = СтрокаОграниченияПериода;
			Если Не ПустаяСтрока(СтрокаОтбораПоГрафам) Тогда
				Если ПустаяСтрока(ТекстГДЕ) Тогда
					ТекстГДЕ="
					|ГДЕ ";
				Иначе
					ТекстГДЕ = ТекстГДЕ+" И ";
				КонецЕсли;
				ТекстГДЕ = ТекстГДЕ+СтрокаОтбораПоГрафам;
			КонецЕсли;

			ТекстЗапроса=ТекстЗапроса+"
			|ВЫБРАТЬ"+?(ТекстЗапроса="", " РАЗРЕШЕННЫЕ ", "")+"
			|ВЫБОР
			|КОГДА Проведен=Истина
			|ТОГДА 0
			|КОГДА ПометкаУдаления=Ложь
			|ТОГДА 1
			|ИНАЧЕ 2
			|КОНЕЦ КАК Иконка,					
			|Дата, 
			|"+?(мСписокДокументовБезНомера.НайтиПоЗначению(ИмяДока)=Неопределено, "Номер", "NULL")+", 
			|"""+Док.Представление+""" КАК Представление, Ссылка, Проведен, ПометкаУдаления
			|"+ПолучитьГрафы(ИмяДока)+" Из Документ."+ИмяДока+ТекстГДЕ+"
			|ОБЪЕДИНИТЬ ВСЕ";
		КонецЕсли;
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса=(Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-СтрДлина("ОБЪЕДИНИТЬ ВСЕ")));	
	
	ТекстЗапроса=ТекстЗапроса+"
	|УПОРЯДОЧИТЬ ПО Дата";
	
	
	Запрос.Текст=ТекстЗапроса;
	Запрос.УстановитьПараметр("НачалоИнтервала", НачалоДня(ПериодС));
	Запрос.УстановитьПараметр("КонецИнтервала", КонецДня(ПериодПо));
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	//ТаблицаЗапроса.Колонки.Удалить(0);
	ЭлементыФормы.СписокДокументов.Значение=ТаблицаЗапроса;
	ОбновитьДоступностьКнопок();		
КонецПроцедуры // ОбновитьСписок()

//Процедура устанавливает заголовок формы, в соответствии с выбранным периодом
Процедура УстановитьЗаголовок()
	Если (ПериодС=Дата('00010101')) И (ПериодПо=Дата('00010101')) Тогда
		Заголовок="";
	Иначе
		Заголовок=": "+?(ПериодС=Дата('00010101'),"...",Формат(ПериодС,"ДЛФ=Д"))+
		" - "+?(ПериодПо=Дата('00010101'),"...",Формат(ПериодПо,"ДЛФ=Д"));
	КонецЕсли;
	
	ЭтаФорма.Заголовок="Универсальный журнал документов"+Заголовок;
КонецПроцедуры // УстановитьЗаголовок()

// Процедура выполняет обновление данных по одному документу
Процедура ОбновитьДанныеПоСтроке(СтрокаСпискаДокументов)
	Запрос = Новый Запрос;
	Запрос.Текст="Выбрать Проведен, ПометкаУдаления, Ссылка Из Документ."+Метаданные.НайтиПоТипу(ТипЗнч(СтрокаСпискаДокументов.Ссылка)).Имя+"
	|ГДЕ Ссылка=&ВыбДокумент";
	Запрос.УстановитьПараметр("ВыбДокумент", СтрокаСпискаДокументов.Ссылка);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() <> 0 Тогда
		СтрокаВыборкиЗапроса=РезультатЗапроса[0];
		СтрокаСпискаДокументов.Проведен=СтрокаВыборкиЗапроса[0];
		СтрокаСпискаДокументов.Иконка=?(СтрокаВыборкиЗапроса[0], 0, ?(Не СтрокаВыборкиЗапроса[1],1, 2));
		СписокДокументовПриАктивизацииСтроки(ЭлементыФормы.СписокДокументов);
	КонецЕсли;
КонецПроцедуры // ОбновитьДанныеПоСтроке()

// Процедура выполняет добавление колонок к табличному полю в соответствии
// с указанными в настройке дополнительными графами журнала
Процедура НастроитьДополнительныеКолонки()
	Пока ЭлементыФормы.СписокДокументов.Колонки.Количество()>4 Цикл
		ЭлементыФормы.СписокДокументов.Колонки.Удалить(ЭлементыФормы.СписокДокументов.Колонки.Количество()-1);
		СписокДокументов.Колонки.Удалить(СписокДокументов.Колонки.Количество()-1);
		СписокДокументов.Колонки.Удалить(СписокДокументов.Колонки.Количество()-1);
	КонецЦикла;
	Для Каждого Графа Из мСписокГрафЖурнала Цикл
		ИмяГрафы="Графа"+Строка(мСписокГрафЖурнала.Индекс(Графа));
		ИмяГрафыФормата="Формат"+Строка(мСписокГрафЖурнала.Индекс(Графа));
		НоваяКолонка=ЭлементыФормы.СписокДокументов.Колонки.Добавить(ИмяГрафы);
		НоваяКолонка.ТекстШапки=Графа.ГрафаЖурнала;
		НоваяКолонка.Данные=ИмяГрафы;
		СписокДокументов.Колонки.Добавить(ИмяГрафы);
		СписокДокументов.Колонки.Добавить(ИмяГрафыФормата);
	КонецЦикла;
КонецПроцедуры // НастроитьДополнительныеКолонки()

// Процедура выводит список документов в табличный документ
Процедура ВывестиСписокВТабличныйДокумент(СписокКолонок)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("МакетСписка");
	Присоединять = Ложь;
	Для Каждого Колонка Из СписокКолонок Цикл
		Если Не Колонка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		Если Колонка.Значение < 4 Тогда
			ОбластьШапки = Макет.ПолучитьОбласть(1, Колонка.Значение+1, 1, Колонка.Значение+1 );
			Если Присоединять Тогда
				ТабличныйДокумент.Присоединить(ОбластьШапки );
			Иначе
				ТабличныйДокумент.Вывести(ОбластьШапки );
				Присоединять = Истина;
			КонецЕсли;
		Иначе
			ОбластьШапки = Макет.ПолучитьОбласть("Шапка|ДополнительнаяГрафа");
			ОбластьШапки.Параметры.Графа = Колонка.Представление;
			ЕСли Присоединять ТОгда
				ТабличныйДокумент.Присоединить(ОбластьШапки);
			Иначе
				ТабличныйДокумент.Вывести(ОбластьШапки);
				Присоединять = Истина;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	Для каждого СтрокаСписка Из СписокДокументов Цикл
		Присоединять = Ложь;
		Для Каждого Колонка Из СписокКолонок Цикл
			Если Не Колонка.Пометка Тогда
				Продолжить;
			КонецЕсли;
			ИндексКолонки = Колонка.Значение;
			Если ИндексКолонки  < 4 Тогда
				ОбластьСтроки = Макет.ПолучитьОбласть(2, ИндексКолонки+1, 2, ИндексКолонки+1 );
				ОбластьСтроки.Параметры.ПараметрЗначение = ?(ИндексКолонки, СтрокаСписка[ИндексКолонки], "");
				Если Присоединять Тогда
					ТабличныйДокумент.Присоединить(ОбластьСтроки);
				Иначе
					ТабличныйДокумент.Вывести(ОбластьСтроки);
					Присоединять = Истина;
				КонецЕсли;
			Иначе
				ОбластьСтроки = Макет.ПолучитьОбласть("Строка|ДополнительнаяГрафа");
				Форматирование = СтрокаСписка[8+(ИндексКолонки-4)*2];
				ЗначениеГрафы = СтрокаСписка[7+(ИндексКолонки-4)*2];
				ЭтоЧисло = Ложь;				
				Попытка
					ЗначениеГрафыКакЧисло = Число(ЗначениеГрафы);
					ЭтоЧисло = ЗначениеГрафы = Строка(ЗначениеГрафыКакЧисло);
				Исключение
					
				КонецПопытки;
				
				Если ЭтоЧисло ТОгда
					ЗначениеГрафы = Число(ЗначениеГрафы);
					ОбластьСтроки.Область(1,1,1,1).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				КонецЕсли;
				ОбластьСтроки.Параметры.ПараметрЗначение = ?(Форматирование="",ЗначениеГрафы, 
															 Формат(ЗначениеГрафы, Форматирование));
				Если Не Присоединять Тогда
					ТабличныйДокумент.Вывести(ОбластьСтроки);
					Присоединять = Истина;
				Иначе					
					ТабличныйДокумент.Присоединить(ОбластьСтроки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
	ТабличныйДокумент.Показать();
КонецПроцедуры // ВывестиСписокВТабличныйДокумент()

// Процедура выводит список документов в текстовый документ
Процедура ВывестиСписокВТекстовыйДокумент(СписокКолонок)
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	СтруктураКолонок = Новый Структура;
	Для Каждого Колонка Из СписокКолонок Цикл
		Если Не Колонка.Пометка Тогда
			Продолжить;
		КонецЕсли;
 		ИндексКолонки = Колонка.Значение;
		СтруктураКолонок.Вставить("Колонка"+ИндексКолонки, 0);
		Для Каждого СтрокаСписка Из СписокДокументов Цикл
			Если ИндексКолонки<4 Тогда
				ЗначениеСтроки = Строка(?(ИндексКолонки, СтрокаСписка[ИндексКолонки], ""));
			Иначе
				ЗначениеСтроки = Строка(СтрокаСписка[7+(ИндексКолонки-4)*2]);				
				ЭтоЧисло = Ложь;				
				Попытка
					ЗначениеСтрокиКакЧисло = Число(ЗначениеСтроки);
					ЭтоЧисло = ЗначениеСтроки  = Строка(ЗначениеСтрокиКакЧисло);
				Исключение					
				КонецПопытки;
				Если ЭтоЧисло ТОгда
					ЗначениеСтроки = Число(ЗначениеСтроки);
				КонецЕсли;
				
				Форматирование = СтрокаСписка[8+(ИндексКолонки-4)*2];
				Если Форматирование<>"" Тогда
					ЗначениеСтроки = Формат(ЗначениеСтроки, Форматирование);
				КонецЕсли;
			КонецЕсли;
			Если СтруктураКолонок["Колонка"+ИндексКолонки]<=СтрДлина(ЗначениеСтроки) Тогда
				СтруктураКолонок["Колонка"+ИндексКолонки]=СтрДлина(ЗначениеСтроки);
			КонецЕсли;
		КонецЦикла;
		
		ЕСли СтруктураКолонок["Колонка"+ИндексКолонки] < СтрДлина(Колонка.Представление) Тогда
			СтруктураКолонок["Колонка"+ИндексКолонки] = СтрДлина(Колонка.Представление);
		КонецЕсли;
		
	КонецЦикла;
	Для Каждого ПараметрыКолонки ИЗ СтруктураКолонок Цикл
		СтруктураКолонок[ПараметрыКолонки.Ключ] = ПараметрыКолонки.Значение+1;
	КонецЦикла;
	
	Строка = "";
	Для Каждого Колонка Из СписокКолонок Цикл
		Если Не Колонка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		ИмяКолонки = Колонка.Представление;
		ДополнитьСтрокуПробелами(ИмяКолонки, СтруктураКолонок["Колонка"+Колонка.Значение]);
		Строка = Строка + ИмяКолонки;
	КонецЦикла;
	ТекстовыйДокумент.ДобавитьСтроку(Строка);
	
	Для Каждого СтрокаСписка Из СписокДокументов Цикл
		Строка = "";
		Для Каждого Колонка Из СписокКолонок Цикл
			Если Не Колонка.Пометка Тогда
				Продолжить;
			КонецЕсли;
			ИндексКолонки = Колонка.Значение;		
			Если ИндексКолонки<4 Тогда
				ЗначениеСтроки = Строка(?(ИндексКолонки, СтрокаСписка[ИндексКолонки], ""));
				ДополнитьСтрокуПробелами(ЗначениеСтроки, СтруктураКолонок["Колонка"+ИндексКолонки]);
			Иначе
				ЗначениеСтроки = СтрокаСписка[7+(ИндексКолонки-4)*2];
				ЭтоЧисло = Ложь;				
				Попытка
					ЗначениеСтрокиКакЧисло = Число(ЗначениеСтроки);
					ЭтоЧисло = ЗначениеСтроки  = Строка(ЗначениеСтрокиКакЧисло);
				Исключение					
				КонецПопытки;
				Если ЭтоЧисло ТОгда
					ЗначениеСтроки = Число(ЗначениеСтроки);
				КонецЕсли;
				Форматирование = СтрокаСписка[8+(ИндексКолонки-4)*2];
				Если Форматирование<>"" Тогда
					ЗначениеСтроки = Формат(ЗначениеСтроки, Форматирование);
				Иначе
					ЗначениеСтроки = Строка(ЗначениеСтроки);
				КонецЕсли;
				ДополнитьСтрокуПробелами(ЗначениеСтроки, СтруктураКолонок["Колонка"+ИндексКолонки], ЭтоЧисло);
			КонецЕсли;
			
			Строка = Строка + ЗначениеСтроки;
		КонецЦикла;
		ТекстовыйДокумент.ДобавитьСтроку(Строка);		
	КонецЦикла;
	ТекстовыйДокумент.Показать();
КонецПроцедуры // ВывестиСписокВТекстовыйДокумент()

// Функция выполняет дополнение исходной строки пробелами до получения
// необходимой длины
Функция ДополнитьСтрокуПробелами(ИсходнаяСтрока, НеобходимаяДлина, Слева = Ложь)
	Пока СтрДлина(ИсходнаяСтрока)<НеобходимаяДлина Цикл
		Если Слева Тогда
			ИсходнаяСтрока = Символы.НПП + ИсходнаяСтрока;
		Иначе
			ИсходнаяСтрока = ИсходнаяСтрока+ Символы.НПП;
		КонецЕсли;
	КонецЦикла
КонецФункции // ДополнитьСтрокуПробелами()

// Процедура вызывает отчет конфигурации "ДвиженияДокумента"
Процедура ОткрытьОтчетДвиженияДокумента()
	ТекущиеДанныеСтроки=ЭлементыФормы.СписокДокументов.ТекущиеДанные;
	Если ТекущиеДанныеСтроки<>Неопределено Тогда
		ДокументСсылка=ТекущиеДанныеСтроки.Ссылка;
		ПечатьДвиженийДокумента = Отчеты.ДвиженияДокумента.Создать();	
		ПечатьДвиженийДокумента.Документ = ДокументСсылка;	
		ПечатьДвиженийДокумента.СформироватьОтчет();
	КонецЕсли;
КонецПроцедуры

// Процедуры выводит отчет по структуре подчиненности текущего документа
Процедура ПоказатьСтруктуруПодчиненностиДокументаИзФормы()
	ТекущиеДанныеСтроки=ЭлементыФормы.СписокДокументов.ТекущиеДанные;
	Если ТекущиеДанныеСтроки<>Неопределено Тогда
		Форма = ПолучитьОбщуюФорму("ФормаСтруктурыПодчиненности", ЭтаФорма);
		Если Форма.Открыта() Тогда
			Форма.Закрыть();
		КонецЕсли;
		Форма.ДокументСсылка = ТекущиеДанныеСтроки.Ссылка;
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьНастройкуПериода(ФормаНастройки, НачалоПериода, КонецПериода)
	ДатНач = НачалоПериода;
	ДатКон = КонецПериода;
	//ФормаНастройки = Новый НастройкаПериода;
	
	ФормаНастройки.ВариантНастройки = ВариантНастройкиПериода.Интервал;	
	
	Если НачалоГода(ТекущаяДата()) = ДатНач Тогда
		ФормаНастройки.ВариантНачала = ВариантГраницыИнтервала.Год;
	ИначеЕсли НачалоКвартала(ТекущаяДата()) = ДатНач Тогда
		ФормаНастройки.ВариантНачала = ВариантГраницыИнтервала.Квартал;
	ИначеЕсли НачалоМесяца(ТекущаяДата()) = ДатНач Тогда
		ФормаНастройки.ВариантНачала = ВариантГраницыИнтервала.Месяц;
	ИначеЕсли НачалоНедели(ТекущаяДата()) = ДатНач Тогда
		ФормаНастройки.ВариантНачала = ВариантГраницыИнтервала.Неделя;
	ИначеЕсли НачалоДня(ТекущаяДата()) = ДатНач Тогда
		ФормаНастройки.ВариантНачала = ВариантГраницыИнтервала.РабочаяДата;
	ИначеЕсли ДатНач=Дата('00010101') Тогда		
		ФормаНастройки.ВариантНачала = ВариантГраницыИнтервала.БезОграничения;
	Иначе
		ФормаНастройки.ВариантНачала = ВариантГраницыИнтервала.КонкретнаяДата;
		ФормаНастройки.ДатаНачала = ДатНач;
	КонецЕсли;  	
		
	Если КонецГода(ТекущаяДата()) = КонецДня(ДатКон) Тогда
		ФормаНастройки.ВариантОкончания = ВариантГраницыИнтервала.Год;
	ИначеЕсли КонецКвартала(ТекущаяДата()) = КонецДня(ДатКон) Тогда
		ФормаНастройки.ВариантОкончания = ВариантГраницыИнтервала.Квартал;
	ИначеЕсли КонецМесяца(ТекущаяДата()) = КонецДня(ДатКон) Тогда
		ФормаНастройки.ВариантОкончания = ВариантГраницыИнтервала.Месяц;
	ИначеЕсли КонецНедели(ТекущаяДата()) = КонецДня(ДатКон) Тогда
		ФормаНастройки.ВариантОкончания = ВариантГраницыИнтервала.Неделя;
	ИначеЕсли КонецДня(ТекущаяДата()) = КонецДня(ДатКон) Тогда
		ФормаНастройки.ВариантОкончания = ВариантГраницыИнтервала.РабочаяДата;
	ИначеЕсли ДатКон=Дата('00010101') Тогда
		ФормаНастройки.ВариантОкончания = ВариантГраницыИнтервала.БезОграничения;		
	Иначе
		ФормаНастройки.ВариантОкончания = ВариантГраницыИнтервала.КонкретнаяДата;
		ФормаНастройки.ДатаОкончания = ДатКон;
	КонецЕсли;	
	
КонецПроцедуры

//Обработка события создания нового документа
Процедура СоздатьНовыйДокумент()
	Спс=Новый СписокЗначений;
	Для Каждого Док Из мСписокОбрабатываемыхДокументов Цикл
		ЕСли Док.Пометка Тогда
			Спс.Добавить(Док.Значение, Док.Представление, ,БиблиотекаКартинок.ДокументОбъект);
		КонецЕсли;
	КонецЦикла;
	Если Спс.Количество()=1 Тогда
		ТипДока=Спс[0];
	Иначе
		ТекущийДокумент=?(ЭлементыФормы.СписокДокументов.ТекущиеДанные=Неопределено,Неопределено,Спс.НайтиПоЗначению(Метаданные.НайтиПоТипу(ТипЗнч(ЭлементыФормы.СписокДокументов.ТекущиеДанные.Ссылка)).Имя));
		ТипДока=Спс.ВыбратьЭлемент("Выбор вида документа", ТекущийДокумент);
	КонецЕсли;
	Если ТипДока<>Неопределено Тогда
		Документы[ТипДока.Значение].ПолучитьФормуНовогоДокумента().Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура ИзменитьДокумент()
	ТекущиеДанныеСтроки=ЭлементыФормы.СписокДокументов.ТекущиеДанные;
	Если ТекущиеДанныеСтроки<>Неопределено Тогда
		ТекДок=ТекущиеДанныеСтроки.Ссылка;
		ТекДок.ПолучитьФорму().Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьПометкуУдаления()
	ТекущиеДанныеСтроки=ЭлементыФормы.СписокДокументов.ТекущиеДанные;
	Если ТекущиеДанныеСтроки<>Неопределено Тогда
		ТекДок=ТекущиеДанныеСтроки.Ссылка;
		НадоОбновлять=Ложь;
		Если ТекДок.ПометкаУдаления Тогда
			Если Вопрос("Снять с объекта пометку на удаление?", РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да Тогда
				Попытка
					ТекДок.ПолучитьОбъект().УстановитьПометкуУдаления(Ложь);
					НадоОбновлять=Истина;
				Исключение
					Если Найти(ОписаниеОшибки(), "Не удалось заблокировать запись")<>0 Тогда
						Предупреждение("Не удалось заблокировать запись. Действие (изменение, удаление или блокировка записи) не выполнено");
					Иначе
						Предупреждение("Операция не выполнена");
					КонецЕсли;
				КонецПопытки;      
				
			КонецЕсли;
		Иначе
			Если Вопрос("Пометить объект на удаление?", РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да Тогда
				Попытка
					ТекДок.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
					НадоОбновлять=Истина;
				Исключение
					Если Найти(ОписаниеОшибки(), "Не удалось заблокировать запись")<>0 Тогда
						Предупреждение("Не удалось заблокировать запись. Действие (изменение, удаление или блокировка записи) не выполнено");
					Иначе
						Предупреждение("Операция не выполнена");
					КонецЕсли;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		ОбновитьДанныеПоСтроке(ЭлементыФормы.СписокДокументов.ТекущаяСтрока);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы
Процедура ПриОткрытии()
	УстановитьЗаголовок();
	ОбновитьДоступностьКнопок();
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы
// предназначена для позиционирования документа при поиске по номеру
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	ОбновлятьСписок=Ложь;
	Если ПериодС>ЗначениеВыбора.Дата Тогда
		ПериодС=ЗначениеВыбора.Дата;
		ОбновлятьСписок=Истина;
	КонецЕсли;
	Если ПериодПО<ЗначениеВыбора.Дата Тогда
		ПериодПО=ЗначениеВыбора.Дата;
		ОбновлятьСписок=Истина;
	КонецЕсли;
	Если ОбновлятьСписок Тогда
		ОбновитьСписок();
	КонецЕсли;		
	НайдСтрока=СписокДокументов.Найти(ЗначениеВыбора, "Ссылка");
	Если НайдСтрока<>Неопределено Тогда
		ЭлементыФормы.СписокДокументов.ТекущаяСтрока=НайдСтрока;		
	КонецЕсли;		
КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПриЗакрытии" формы
Процедура ПриЗакрытии()
	
КонецПроцедуры // ПриЗакрытии()




////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Обновить" командной панели
Процедура КоманднаяПанельОбновитьСписок(Кнопка)
	ОбновитьСписок();
КонецПроцедуры // КоманднаяПанельОбновитьСписок()

// Процедура вызывается при нажатии кнопки "Установить интервал дат" командной панели
Процедура КоманднаяПанельСменаПериод(Кнопка)
	НП = Новый НастройкаПериода;
	ЗаполнитьНастройкуПериода(НП, ПериодС, ПериодПо);
//	НП.УстановитьПериод(ПериодС, ПериодПо);
	Если НП.Редактировать() Тогда
		ПериодС = НП.ПолучитьДатуНачала();
		ПериодПо = НП.ПолучитьДатуОкончания();
		ОбновитьСписок();
		УстановитьЗаголовок();
	КонецЕсли;	
КонецПроцедуры // КоманднаяПанельСменаПериод()

// Процедура вызывается при нажатии кнопки "Добавить" командной панели
Процедура КоманднаяПанельДобавить(Кнопка)
	СоздатьНовыйДокумент();
КонецПроцедуры // КоманднаяПанельДобавить()

// Процедура вызывается при нажатии кнопки "Изменить" командной панели
Процедура КоманднаяПанельИзменить(Кнопка)
	ИзменитьДокумент();
КонецПроцедуры // КоманднаяПанельИзменить()

// Процедура вызывается при нажатии кнопки "Копировать" командной панели
Процедура КоманднаяПанельКопировать(Кнопка)
	ТекущиеДанныеСтроки=ЭлементыФормы.СписокДокументов.ТекущиеДанные;
	Если ТекущиеДанныеСтроки<>Неопределено Тогда
		НовДок=ТекущиеДанныеСтроки.Ссылка.Скопировать();
		НовДок.ПолучитьФорму().Открыть();
	КонецЕсли;
КонецПроцедуры // КоманднаяПанельКопировать()

// Процедура вызывается при нажатии кнопки "Установить пометку удаления" командной панели
Процедура КоманднаяПанельУстановитьПометкуУдаления(Кнопка)
	УстановитьПометкуУдаления();
КонецПроцедуры // КоманднаяПанельУстановитьПометкуУдаления()

// Процедура вызывается при нажатии кнопки "Поиск по номеру" командной панели,
Процедура КоманднаяПанельПоискПоНомеру(Кнопка)
	ФормаПоиска = ОбработкаОбъект.ПолучитьФорму("ФормаПоискаПоНомеру", ЭтаФорма,);
	ФормаПоиска.ПериодС=ПериодС;
	ФормаПоиска.ПериодПО=ПериодПО;
	СписокДокументовПоиска = Новый СписокЗначений;
	ДЛя Каждого ВидДокумента Из мСписокОбрабатываемыхДокументов Цикл
		Если ВидДокумента.Пометка Тогда
			НовыйЭлементСписка = СписокДокументовПоиска.Добавить(ВидДокумента.Значение, ВидДокумента.Представление
														   , Истина);
		КонецЕсли;
	КонецЦикла;
	ФормаПоиска.ВидыДокументов=СписокДокументовПоиска;
	ФормаПоиска.ОткрытьМодально();
КонецПроцедуры // КоманднаяПанельПоискПоНомеру()

// Процедура вызывается при нажатии кнопок "Провести", "Отмена проведения" командной панели
Процедура КоманднаяПанельПровестиРаспровести(Кнопка)
	ТекущиеДанныеСтроки=ЭлементыФормы.СписокДокументов.ТекущиеДанные;
	Если ТекущиеДанныеСтроки<>Неопределено Тогда
		ТекДок=ТекущиеДанныеСтроки.Ссылка;
		НадоОбновлять=Ложь;
		Если (ТекущиеДанныеСтроки.Проведен) И (Кнопка.Имя="ОтменаПроведения") Тогда
			ДокОбъект=ТекДок.ПолучитьОбъект();
			Попытка
				ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				НадоОбновлять=Истина;
			Исключение
				Если Найти(ОписаниеОшибки(), "Не удалось заблокировать запись")<>0 Тогда
					Предупреждение("Не удалось заблокировать запись. Действие (изменение, удаление или блокировка записи) не выполнено");
				Иначе
					Предупреждение("Операция не выполнена");
				КонецЕсли;
			КонецПопытки;
			СписокДокументовПриАктивизацииСтроки(ЭлементыФормы.СписокДокументов);
		ИначеЕсли (Кнопка.Имя="Провести") Тогда
			ДокОбъект=ТекДок.ПолучитьОбъект();
			Попытка
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
				НадоОбновлять=Истина;
			Исключение
				Если Найти(ОписаниеОшибки(), "Не удалось заблокировать запись")<>0 Тогда
					Предупреждение("Не удалось заблокировать запись. Действие (изменение, удаление или блокировка записи) не выполнено");
				Иначе
					Предупреждение("Операция не выполнена");
				КонецЕсли;
			КонецПопытки;
			СписокДокументовПриАктивизацииСтроки(ЭлементыФормы.СписокДокументов);
		КонецЕсли;
		Если НадоОбновлять Тогда
			ОбновитьДанныеПоСтроке(ЭлементыФормы.СписокДокументов.ТекущаяСтрока);
			СписокДокументовПриАктивизацииСтроки(ЭлементыФормы.СписокДокументов)
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // КоманднаяПанельПровестиРаспровести()

// Процедура вызывается при выборе пункта подменю кнопки "Перейти" командной панели
Процедура ПоказатьДвиженияДокумента(Кнопка)
	Если Метаданные.РегистрыНакопления.Найти(Кнопка.Имя)<>Неопределено Тогда
		Форма = РегистрыНакопления[Кнопка.Имя].ПолучитьФормуСписка();
	ИначеЕсли Метаданные.РегистрыСведений.Найти(Кнопка.Имя)<>Неопределено Тогда
		Форма = РегистрыСведений[Кнопка.Имя].ПолучитьФормуСписка();
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Найти(Кнопка.Имя)<>Неопределено Тогда
		Форма = РегистрыБухгалтерии[Кнопка.Имя].ПолучитьФормуСписка();
	ИначеЕсли Метаданные.РегистрыРасчета.Найти(Кнопка.Имя)<>Неопределено Тогда
		Форма = РегистрыРасчета[Кнопка.Имя].ПолучитьФормуСписка();
	КонецЕсли;
	Форма.ПараметрОтборПоРегистратору = ЭлементыФормы.СписокДокументов.ТекущиеДанные.Ссылка;
	Форма.Открыть(); 
Конецпроцедуры // ПоказатьДвиженияДокумента()

// Процедура вызывается при выборе пункта подменю кнопки "Ввести на основании" командной панели
Процедура ВвестиДокументПоОснованию(Кнопка)
	Док = Документы[Кнопка.Имя].СоздатьДокумент();
	Док.Заполнить(ЭлементыФормы.СписокДокументов.ТекущиеДанные.Ссылка);
	Форма = Док.ПолучитьФорму();
	Форма.Открыть();
Конецпроцедуры // ВвестиДокументПоОснованию()

// Процедура вызывается при нажатии кнопки "Настройка" командной панели,
// открывает форму настройки журнала
Процедура КоманднаяПанельНастройка(Кнопка)
	ФормаНастройки = ОбработкаОбъект.ПолучитьФорму("ФормаНастройки", ЭтаФорма);
	ФормаНастройки.СписокГрафЖурнала = мСписокГрафЖурнала.Скопировать();
	ФормаНастройки.СписокОбрабатываемыхДокументов = мСписокОбрабатываемыхДокументов.Скопировать();
	ФормаНастройки.ВыводимыеГрафы = мВыводимыеГрафы.Скопировать();
	Для Каждого СтрокаГрафы Из ФормаНастройки.ВыводимыеГрафы Цикл
		СтрокаГрафы.СсылкаНаГрафу = ФормаНастройки.СписокГрафЖурнала.Получить(мСписокГрафЖурнала.Индекс(СтрокаГрафы.СсылкаНаГрафу));
	КонецЦикла;
	Если Не ФормаНастройки.ОткрытьМодально()=Неопределено Тогда
		мСписокГрафЖурнала = ФормаНастройки.СписокГрафЖурнала;
		мСписокОбрабатываемыхДокументов = ФормаНастройки.СписокОбрабатываемыхДокументов;
		мВыводимыеГрафы = ФормаНастройки.ВыводимыеГрафы;
		НастроитьДополнительныеКолонки();
		ОбновитьСписок();
	КонецЕсли;
КонецПроцедуры // КоманднаяПанельНастройка()

// Процедура вызывается при выборе пункта меню "Вывести список" командной панели
Процедура КоманднаяПанельВывестиСписок(Кнопка)
	Форма = ПолучитьФорму("ФормаВыводаСписка");
	Для Каждого КолонкаЖурнала Из ЭлементыФормы.СписокДокументов.Колонки Цикл
		Форма.СписокКолонок.Добавить(ЭлементыФормы.СписокДокументов.Колонки.Индекс(КолонкаЖурнала),
							   ?(КолонкаЖурнала.ТекстШапки="", " ", КолонкаЖурнала.ТекстШапки),Истина);
    КонецЦикла; 	
	Результат = Форма.ОткрытьМодально();
	Если Результат=Неопределено ИЛИ Не Результат Тогда
		Возврат;
	КонецЕсли; 		
	Если Форма.ВыводимыйДокумент="Табличный документ" Тогда
		ВывестиСписокВТабличныйДокумент(Форма.СписокКолонок);
	Иначе
		ВывестиСписокВТекстовыйДокумент(Форма.СписокКолонок);
	КонецЕсли;	
КонецПроцедуры // КоманднаяПанельВывестиСписок()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "СписокДокументов"

// Процедура - обработчик события "ПередНачаломДобавления" табличного поля "СписокДокументов"
Процедура СписокДокументовПередНачаломДобавления(Элемент, Отказ, Копирование)
	СоздатьНовыйДокумент();
	Отказ=Истина;
КонецПроцедуры // СписокДокументовПередНачаломДобавления()

// Процедура - обработчик события "ПередНачаломИзменения" табличного поля "СписокДокументов"
Процедура СписокДокументовПередНачаломИзменения(Элемент, Отказ)
	ИзменитьДокумент();
	Отказ=Истина;
КонецПроцедуры // СписокДокументовПередНачаломИзменения()

// Процедура - обработчик события "ПередУдалением" табличного поля "СписокДокументов"
Процедура СписокДокументовПередУдалением(Элемент, Отказ)
	УстановитьПометкуУдаления();
	Отказ=Истина;
КонецПроцедуры // СписокДокументовПередУдалением()

// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля "СписокДокументов"
Процедура СписокДокументовПриАктивизацииСтроки(Элемент)
	УжеПроведен=Элемент.ТекущиеДанные.Проведен;
	//ЭлементыФормы.КоманднаяПанель.Кнопки.Провести.Доступность=Не УжеПроведен;
	//ЭлементыФормы.КоманднаяПанель.Кнопки.Действия.Кнопки.Провести.Доступность=Не УжеПроведен;
	ЭлементыФормы.КоманднаяПанель.Кнопки.ОтменаПроведения.Доступность=УжеПроведен;
	ЭлементыФормы.КоманднаяПанель.Кнопки.Действия.Кнопки.ОтменаПроведения.Доступность=УжеПроведен;	
	ТипТекДок=ЭлементыФормы.СписокДокументов.ТекущиеДанные.Ссылка.Метаданные();	
	Если мМенюДляДокумента<>ТипТекДок.Имя Тогда
		МенюПерейти = ЭлементыФормы.КоманднаяПанель.Кнопки["Перейти"];
		МенюПерейти.Кнопки.Очистить();
		НуженРазделитель = Ложь;
		Если мЕстьОтчетПоДвижению Тогда
			МенюПерейти.Кнопки.Добавить("ДвиженияПоРегистрам", ТипКнопкиКоманднойПанели.Действие, "Движения документа по регистрам", Новый Действие("ОткрытьОтчетДвиженияДокумента"));			
		КонецЕсли;		
		Если мЕстьФормаСтруктурыПодчиненности Тогда
			МенюПерейти.Кнопки.Добавить("СтруктураПодчиненности", ТипКнопкиКоманднойПанели.Действие, "Структура подчиненности документа", Новый Действие("ПоказатьСтруктуруПодчиненностиДокументаИзФормы"));			
		КонецЕсли;
		
		МенюПерейти.Кнопки.Добавить("РазделительДвижений", ТипКнопкиКоманднойПанели.Разделитель);
		
		Для Каждого ВидДвижения Из ТипТекДок.Движения Цикл
			МенюПерейти.Кнопки.Добавить(ВидДвижения.Имя, ТипКнопкиКоманднойПанели.Действие, ВидДвижения.Синоним, Новый Действие("ПоказатьДвиженияДокумента"));
		КонецЦикла;		
		МенюПерейти.Доступность = МенюПерейти.Кнопки.Количество();
		
		МенюВводПоОснованию = ЭлементыФормы.КоманднаяПанель.Кнопки["ВводПоОснованию"];
		МенюВводПоОснованию.Кнопки.Очистить();
		Структура = Новый Структура("ВводитсяНаОсновании", ТипТекДок);
		НайденныеСтроки = мВводНаОсновании.НайтиСтроки(Структура);
		Для Каждого ДокПоОснованию ИЗ НайденныеСтроки Цикл
			МенюВводПоОснованию.Кнопки.Добавить(ДокПоОснованию.Документ.Имя, ТипКнопкиКоманднойПанели.Действие, ДокПоОснованию.Документ.Синоним, Новый Действие("ВвестиДокументПоОснованию"));		
		КонецЦикла;
		мМенюДляДокумента=ТипТекДок.Имя;
	КонецЕсли;
КонецПроцедуры // СписокДокументовПриАктивизацииСтроки()

// Процедура - обработчик события "ПриВыводеСтроки" табличного поля "СписокДокументов"
Процедура СписокДокументовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ЯчейкиСтроки = ОформлениеСтроки.Ячейки;
	Для Каждого ЯчейкаДопГрафы ИЗ ОформлениеСтроки.Ячейки Цикл
		ИндексЯчейки = ОформлениеСтроки.Ячейки.Индекс(ЯчейкаДопГрафы);
		Если ИндексЯчейки>=4 И ДанныеСтроки[8+(ИндексЯчейки-4)*2]<>"" Тогда
			ИндексДанных = 7+(ИндексЯчейки-4)*2;
			Если ДанныеСтроки[ИндексДанных] <> Null Тогда
				ЯчейкаДопГрафы.Текст = Формат(Число(ДанныеСтроки[ИндексДанных]), ДанныеСтроки[ИндексДанных+1]);
				ЯчейкаДопГрафы.Выравнивание = ГоризонтальноеПоложение.Право;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // СписокДокументовПриВыводеСтроки()






////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

мВыводимыеГрафы = Новый ТаблицаЗначений;
мВыводимыеГрафы.Колонки.Добавить("СсылкаНаГрафу");
мВыводимыеГрафы.Колонки.Добавить("ВидДокумента");
мВыводимыеГрафы.Колонки.Добавить("ИмяРеквизита");
мВыводимыеГрафы.Колонки.Добавить("Формат");
мВыводимыеГрафы.Колонки.Добавить("НеограниченнаяСтрока");

мВводНаОсновании = Новый ТаблицаЗначений;
мВводНаОсновании.Колонки.Добавить("ВводитсяНаОсновании");
мВводНаОсновании.Колонки.Добавить("Документ");

мСписокГрафЖурнала = Новый ТаблицаЗначений;
мСписокГрафЖурнала.Колонки.Добавить("ГрафаЖурнала");
мСписокГрафЖурнала.Колонки.Добавить("ДеревоГрафДокументов");
мСписокГрафЖурнала.Колонки.Добавить("ИспользоватьОтбор");
мСписокГрафЖурнала.Колонки.Добавить("ЗначениеОтбора"); 

мСписокОбрабатываемыхДокументов = Новый СписокЗначений;
мСписокДокументовБезНомера = Новый СписокЗначений;
Для Каждого Док Из Метаданные.Документы Цикл
	Если НЕ ПравоДоступа("Чтение", Док) Тогда
		Продолжить;
	КонецЕсли;
	мСписокОбрабатываемыхДокументов.Добавить(Док.Имя, Док.Синоним, Истина, БиблиотекаКартинок.Документ);
	Если Не Док.ДлинаНомера Тогда
		мСписокДокументовБезНомера.Добавить(Док.Имя);
	КонецЕсли;
	Для Каждого НаОсновании ИЗ Док.ВводитсяНаОсновании Цикл
		НоваяСтрока = мВводНаОсновании.Добавить();
		НоваяСтрока.ВводитсяНаОсновании = НаОсновании;
		НоваяСтрока.Документ = Док;
	КонецЦикла;
КонецЦикла;
мСписокОбрабатываемыхДокументов.СортироватьПоПредставлению();
                                                            
мЕстьОтчетПоДвижению = Не (Метаданные.Отчеты.Найти("ДвиженияДокумента") = Неопределено);
мЕстьФормаСтруктурыПодчиненности = Не (Метаданные.ОбщиеФормы.Найти("ФормаСтруктурыПодчиненности") = Неопределено);