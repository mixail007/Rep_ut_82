////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мРезультатыПоиска, мФормаИндикации;



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
                          
Функция ПолучитьТаблицуОтборов()	
	
	ТаблицаОтборов = Новый ТаблицаЗначений;
	ТаблицаОтборов.Колонки.Добавить("Ключ");
	ТаблицаОтборов.Колонки.Добавить("Сравнение");
	ТаблицаОтборов.Колонки.Добавить("Значение");
	
	МассивОтборов = НастройкиОтчета.НайтиСтроки(Новый Структура("Предопределенный", Ложь));
	Для Каждого Отбор ИЗ МассивОтборов Цикл
		СтрокаОтбора = ТаблицаОтборов.Добавить();
		СтрокаОтбора.Ключ = Отбор.ЗначениеНастройки;
		Если Отбор.ТипСравнения = "Равно" Тогда
			СтрокаОтбора.Сравнение = " =";
		ИначеЕсли Отбор.ТипСравнения = "Не равно" Тогда
			СтрокаОтбора.Сравнение = " <>";
		ИначеЕсли Отбор.ТипСравнения = "В иерархии" Тогда
			СтрокаОтбора.Сравнение = " В ИЕРАРХИИ(";
		ИначеЕсли Отбор.ТипСравнения = "Не в иерархии" Тогда
			СтрокаОтбора.Сравнение = " НЕ В ИЕРАРХИИ(";
		ИначеЕсли Отбор.ТипСравнения = "В списке" Тогда
			СтрокаОтбора.Сравнение = " В (";
		ИначеЕсли Отбор.ТипСравнения = "Не в списке" Тогда
			СтрокаОтбора.Сравнение = " НЕ В (";
		КонецЕсли;
		СтрокаОтбора.Значение = Отбор.Представление;
	КонецЦикла;
	
	Возврат ТаблицаОтборов;
	
КонецФункции

Функция СравнитьСлова(Слово1, Слово2)
	ТаблицаБукв = Новый ТаблицаЗначений;
	СписокПозиций = Новый СписокЗначений;
	ТаблицаБукв.Колонки.Добавить("Позиция");
	ТаблицаБукв.Колонки.Добавить("КолвоПропущенных");
	ТаблицаБукв.Колонки.Добавить("ДлинаСлова");
	ТаблицаБукв.Колонки.Добавить("ПропущеноНа");
		
	ЕСли СтрДлина(Слово1)<=СтрДлина(Слово2) Тогда
		Слово = ВРЕГ(Слово1);
		ИскомоеСлово = ВРЕГ(Слово2);
	Иначе
		Слово = ВРЕГ(Слово2);
		ИскомоеСлово = ВРЕГ(Слово1);
	КонецЕсли;
	
	Для индекс = 1 по СтрДлина(Слово) Цикл
		Символ = Сред(Слово, индекс, 1);		
		ЕСли ТаблицаБукв.Количество() = 0 Тогда
			поз = Найти(ИскомоеСлово, Символ);
			поправка = 0;
			Пока поз>0 Цикл
				НовСтр = ТаблицаБукв.Добавить();
				НовСтр.Позиция = поз + поправка;
				НовСтр.ДлинаСлова = 1;
				НовСтр.КолвоПропущенных = 0;
				поправка = поправка + поз;
				поз = Найти(Сред(ИскомоеСлово, поправка+1), Символ);
			КонецЦикла;				
		Иначе
			Для Каждого Вхождение ИЗ ТаблицаБукв Цикл
				Если Сред(ИскомоеСлово, Вхождение.Позиция + Вхождение.ДлинаСлова, 1) = Символ Тогда
					Вхождение.ДлинаСлова = Вхождение.ДлинаСлова + 1;
				ИначеЕсли Сред(Слово, Вхождение.Позиция + Вхождение.ДлинаСлова - Вхождение.КолвоПропущенных, 1) = Вхождение.ПропущеноНа Тогда
					Вхождение.ПропущеноНа = "";
					Вхождение.ДлинаСлова = Вхождение.ДлинаСлова + 1;
					Если Сред(ИскомоеСлово, Вхождение.Позиция + Вхождение.ДлинаСлова, 1) = Символ Тогда
						Вхождение.ДлинаСлова = Вхождение.ДлинаСлова + 1;
					Иначе
						Вхождение.КолвоПропущенных = Вхождение.КолвоПропущенных + 1;
					КонецЕсли;
				Иначе					
					ЕСли Окр((Вхождение.КолвоПропущенных + 1) / СтрДлина(ИскомоеСлово) * 100)<=ДопустимоеРазличиеСлов Тогда
						Вхождение.КолвоПропущенных = Вхождение.КолвоПропущенных + 1;
						Вхождение.ДлинаСлова = Вхождение.ДлинаСлова + 1;
						Вхождение.ПропущеноНа = Символ;
					Иначе
						Вхождение.КолвоПропущенных = Вхождение.КолвоПропущенных + 1;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;			
		КонецЕсли;		
	КонецЦикла;
	
	ЕСли ТаблицаБукв.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	
	ТаблицаБукв.Сортировать("ДлинаСлова УБЫВ, КолвоПропущенных ВОЗР");
	
	СовпалоСимволов = ТаблицаБукв[0].ДлинаСлова - ТаблицаБукв[0].КолвоПропущенных;
	
	Возврат (Окр(СовпалоСимволов / СтрДлина(ИскомоеСлово) * 100) >= (100 - ДопустимоеРазличиеСлов));
		
КонецФункции

Функция ПроверитьСловаНаОтличие(СписокСлов1, СписокСлов2)
	СписокРазличающихсяСлов = Новый СписокЗначений;
	Для Каждого Слово1 ИЗ СписокСлов1 Цикл
		ЕстьПара = Ложь;
		Для Каждого Слово2 Из СписокСлов2 Цикл
			Если СравнитьСлова(Слово1.Значение, Слово2.Значение) Тогда
				ЕстьПара = Истина;
				СписокСлов2.Удалить(Слово2);
				Прервать;
			КонецЕсли;				
		КонецЦикла;
		ЕСли НЕ ЕстьПара Тогда
			СписокРазличающихсяСлов.Добавить(Слово1.Значение);
		КонецЕсли;
	КонецЦикла;	
	
	СписокСлов1 = СписокРазличающихсяСлов;
	
	Если СписокСлов1.Количество() = 0 И СписокСлов2.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция АнализРазличийВСловах(Список1, Список2, ПолныйСписок, ОдинаковыхСлов)
	Если Список1.Количество() = ПолныйСписок.Количество()
		 ИЛИ Список2.Количество() = ПолныйСписок.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПолныйСписок.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Список1.Количество() = Список2.Количество() Тогда
		ЕстьОтличия = ПроверитьСловаНаОтличие(Список1, Список2);
		ЕСли  НЕ ЕстьОтличия Тогда
			Возврат Ложь;
		КонецЕсли;			
	КонецЕсли;
	
	ЦелоеСлово = "";
	Для Каждого Слово ИЗ ПолныйСписок Цикл
		ЦелоеСлово = ЦелоеСлово + Слово.Значение;
	КонецЦикла;	
	Слово1 = "";
	Для Каждого Слово ИЗ Список1 Цикл
		Слово1 = Слово1 + Слово.Значение;
	КонецЦикла;
	Слово2 = "";
	Для Каждого Слово ИЗ Список2 Цикл
		Слово2 = Слово2 + Слово.Значение;
	КонецЦикла;
	
	Если Окр(СтрДлина(Слово1)/СтрДлина(ЦелоеСлово)*100) < ДопустимоеРазличиеСлов
		И Окр(СтрДлина(Слово2)/СтрДлина(ЦелоеСлово)*100) < ДопустимоеРазличиеСлов Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

Функция ЭтоБуква (Символ)
	
	Код = КодСимвола(Символ);
	Если (Код<=47) ИЛИ (Код>=58 И Код<=64) ИЛИ (Код>=91 И Код<=96)  ИЛИ (Код>=123 И Код<=126) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
	
КонецФункции

Процедура ОбновитьКнопкуВыбораГруппы(КоличестваПоГруппам, ВсегоГрупп)
	
	КнопкаВыборГруппы = ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.ВыборГруппы;
	КнопкаВыборГруппы.Кнопки.Очистить();
//	Для индекс = 1 по ВсегоГрупп Цикл
	Для Каждого СтрокаГруппы ИЗ КоличестваПоГруппам Цикл
				
		КнопкаВыборГруппы.Кнопки.Добавить("Группа"+СтрокаГруппы.НомерГруппы, 
									ТипКнопкиКоманднойПанели.Действие, 
									"Группа "+СтрокаГруппы.НомерГруппы+" ( " + СтрокаГруппы.Количество + " эл-тов )",
									Новый Действие("КоманднаяПанельНайденныеОбъектыВыборГруппы"));
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиГруппу(НомерГруппы)
	
	Структура = Новый Структура("НомерГруппы", НомерГруппы);
	
	МассивСтрок = мРезультатыПоиска.НайтиСтроки(Структура);
	
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КнопкаВыборГруппы = ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.ВыборГруппы;
	КнопкаВыборГруппы.Текст = "Группа "+НомерГруппы+" из "+ КнопкаВыборГруппы.Кнопки.Количество();

	НайденныеОбъекты.Очистить();	
	
	Для Каждого СТрока Из МассивСтрок Цикл
		НовСтр = НайденныеОбъекты.Добавить();
		НовСтр.Ссылка = Строка.Ссылка;
		НовСтр.Представление = Строка.Представление;
		НовСтр.ЗначениеРеквизита = Строка.ЗначениеРеквизита;
		НовСтр.Правильный = Ложь;
		Если мРезультатыПоиска.Колонки.Найти("ЭтоГруппа") <> Неопределено Тогда
			НовСтр.ЭтоГруппа = Строка.ЭтоГруппа;
		КонецЕсли;
	КонецЦикла;
	
	НайденныеСсылки.Очистить();
	УстановитьДоступностьЗаменыУдаления(Ложь);
	
КонецПроцедуры

Процедура УстановитьДоступностьЗаменыУдаления(Доступность)
	ЭлементыФормы.КоманднаяПанельНайденныеСсылки.Кнопки.ВыполнитьЗамену.Доступность = Доступность;
	ЭлементыФормы.КоманднаяПанельНайденныеСсылки.Кнопки.УдалитьЭлементы.Доступность = Доступность;
	ЕСли Доступность Тогда
		ЭлементыФормы.КоманднаяПанельНайденныеСсылки.Кнопки.ВыполнитьЗамену.Подсказка = "Выполнить замену";
		ЭлементыФормы.КоманднаяПанельНайденныеСсылки.Кнопки.УдалитьЭлементы.Подсказка = "Удалить элементы";		
	Иначе		
		ЭлементыФормы.КоманднаяПанельНайденныеСсылки.Кнопки.ВыполнитьЗамену.Подсказка = "Поиск ссылок не производился";		
		ЭлементыФормы.КоманднаяПанельНайденныеСсылки.Кнопки.УдалитьЭлементы.Подсказка = "Поиск ссылок не производился";
	КонецЕсли;		
КонецПроцедуры

Функция ПолучитьЗначениеНастройки(ИмяНастройки) 
	СтрокаНастройки = НастройкиОтчета.Найти(ИмяНастройки, "ИмяНастройки");
	Если СтрокаНастройки = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат СтрокаНастройки.ЗначениеНастройки;
	КонецЕСли;
КонецФункции

Процедура ОткрытьФормуПоНастройке(ДанныеНастройки, Элемент)
	
	Форма = ПолучитьФорму("ФормаОтбора", Элемент);	
	
	ЕСли ДанныеНастройки.Предопределенный Тогда	
		Если ДанныеНастройки.ИмяНастройки = "Вид справочника" Тогда
			ЗначенияОтбора = Форма.ЗначенияОтбора;
			Для Каждого Справочник Из Метаданные.Справочники Цикл
				СтрокаОтбора = ЗначенияОтбора.Добавить();
				СтрокаОтбора.Представление = Справочник.Синоним;
				СтрокаОтбора.Значение = Справочник.Имя;
				СтрокаОтбора.ИндексКартинки = 2;
			КонецЦикла;
		ИначеЕсли ДанныеНастройки.ИмяНастройки = "Имя реквизита" Тогда
			ИмяСправочника = ПолучитьЗначениеНастройки("Вид справочника");
			Если ИмяСправочника = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			МетаданныеСправочника = Метаданные.Справочники[ИмяСправочника];
			
			ЗначенияОтбора = Форма.ЗначенияОтбора;
			
			Если МетаданныеСправочника.Владельцы.Количество() > 0 Тогда
				СтрокаОтбора = ЗначенияОтбора.Добавить();
				СтрокаОтбора.Представление = "Владелец";
				СтрокаОтбора.Значение = "Владелец";
				СтрокаОтбора.ИндексКартинки = 1;
			КонецЕсли;
			
			Если МетаданныеСправочника.ДлинаКода > 0 Тогда
				СтрокаОтбора = ЗначенияОтбора.Добавить();
				СтрокаОтбора.Представление = "Код";
				СтрокаОтбора.Значение = "Код";
				СтрокаОтбора.ИндексКартинки = 1;
			КонецЕсли;
			
			Если МетаданныеСправочника.ДлинаНаименования > 0 Тогда
				СтрокаОтбора = ЗначенияОтбора.Добавить();
				СтрокаОтбора.Представление = "Наименование";
				СтрокаОтбора.Значение = "Наименование";
				СтрокаОтбора.ИндексКартинки = 1;
			КонецЕсли;		

			
			Для Каждого Реквизит Из МетаданныеСправочника.Реквизиты Цикл
				СтрокаОтбора = ЗначенияОтбора.Добавить();
				СтрокаОтбора.Представление = Реквизит.Синоним;
				СтрокаОтбора.Значение = Реквизит.Имя;
				СтрокаОтбора.ИндексКартинки = 1;
			КонецЦикла;
		ИначеЕсли ДанныеНастройки.ИмяНастройки = "Режим поиска" Тогда
			Если ПолучитьЗначениеНастройки("Вид справочника")=Неопределено Тогда
				Возврат;
			КонецЕсли;
			ЗначенияОтбора = Форма.ЗначенияОтбора;
			
			СтрокаОтбора = ЗначенияОтбора.Добавить();
			СтрокаОтбора.Представление = "По равному значению реквизита";
			СтрокаОтбора.Значение = 1;
			СтрокаОтбора.ИндексКартинки = -1;
			
			СтрокаОтбора = ЗначенияОтбора.Добавить();
			СтрокаОтбора.Представление = "По похожим словам";
			СтрокаОтбора.Значение = 2;
			СтрокаОтбора.ИндексКартинки = -1;
			
		КонецЕсли;			
		
	Иначе
		
		ИмяСправочника = ПолучитьЗначениеНастройки("Вид справочника");
		Если ИмяСправочника = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		МетаданныеСправочника = Метаданные.Справочники[ИмяСправочника];
		
		ЗначенияОтбора = Форма.ЗначенияОтбора;
		//СтрокаОтбора = ЗначенияОтбора.Добавить();
		//СтрокаОтбора.Представление = "Ссылка";
		//СтрокаОтбора.Значение = "Ссылка";
		//СтрокаОтбора.ИндексКартинки = 1;
		
		Если МетаданныеСправочника.Владельцы.Количество()<>0 Тогда
			СтрокаОтбора = ЗначенияОтбора.Добавить();
			СтрокаОтбора.Представление = "Владелец";
			СтрокаОтбора.Значение = "Владелец";
			СтрокаОтбора.ИндексКартинки = 1;
		КонецЕсли;
		
		Если МетаданныеСправочника.Иерархический Тогда
			СтрокаОтбора = ЗначенияОтбора.Добавить();
			СтрокаОтбора.Представление = "Родитель";
			СтрокаОтбора.Значение = "Родитель";
			СтрокаОтбора.ИндексКартинки = 1;
		КонецЕсли;
		
		Если МетаданныеСправочника.ДлинаНаименования > 0 Тогда
			СтрокаОтбора = ЗначенияОтбора.Добавить();
			СтрокаОтбора.Представление = "Наименование";
			СтрокаОтбора.Значение = "Наименование";
			СтрокаОтбора.ИндексКартинки = 1;
		КонецЕсли;
		
		
		Если МетаданныеСправочника.ДлинаКода > 0 Тогда
			СтрокаОтбора = ЗначенияОтбора.Добавить();
			СтрокаОтбора.Представление = "Код";
			СтрокаОтбора.Значение = "Код";
			СтрокаОтбора.ИндексКартинки = 1;
		КонецЕсли;
		
		Для Каждого Реквизит Из МетаданныеСправочника.Реквизиты Цикл
			СтрокаОтбора = ЗначенияОтбора.Добавить();
			СтрокаОтбора.Представление = Реквизит.Синоним;
			СтрокаОтбора.Значение = Реквизит.Имя;
			СтрокаОтбора.ИндексКартинки = 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Форма.НачальноеЗначение = ЭлементыФормы.НастройкиОтчета.ТекущиеДанные.ЗначениеНастройки;
	Форма.Открыть();
	
КонецПроцедуры

Процедура НайтиПоРавенствуРеквизитов(ТаблицаОтбора)
			
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ Спр1.Ссылка КАК Ссылка, 
	|Спр1.Представление КАК Представление,  
	|Спр1." + ПолучитьЗначениеНастройки("Имя реквизита") + " КАК ЗначениеРеквизита 
	|Из Справочник." + ПолучитьЗначениеНастройки("Вид справочника")  + " КАК Спр1, Справочник." + ПолучитьЗначениеНастройки("Вид справочника")  + " КАК Спр2
	|ГДЕ Спр1." + ПолучитьЗначениеНастройки("Имя реквизита") +  " = Спр2." + ПолучитьЗначениеНастройки("Имя реквизита") +  " И Спр1.Ссылка <> Спр2.Ссылка";
	
	МетаданныеОбъекта = Метаданные.Справочники[ПолучитьЗначениеНастройки("Вид справочника")];
	Если МетаданныеОбъекта.Иерархический Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КАК ЗначениеРеквизита", "КАК ЗначениеРеквизита, Спр1.ЭтоГруппа КАК ЭтоГруппа");
		Запрос.Текст = Запрос.Текст + " И Спр1.ЭтоГруппа = Спр2.ЭтоГруппа";
	КонецЕсли;
	
	Для Каждого Отбор ИЗ ТаблицаОтбора Цикл
		МетаданныеРеквизитаОтбора = МетаданныеОбъекта.Реквизиты.Найти(Отбор.Ключ);
		ЕСли МетаданныеРеквизитаОтбора = Неопределено 
			 ИЛИ НЕ (МетаданныеРеквизитаОтбора.Тип.СодержитТип(Тип("Строка")) И МетаданныеРеквизитаОтбора.Тип.КвалификаторыСтроки.Длина = 0) Тогда
			Запрос.Текст = Запрос.Текст + "
			| И Спр2."+Отбор.Ключ + Отбор.Сравнение + "&" + Отбор.Ключ + ?(Найти(Отбор.Сравнение, "(") > 0, ")", "");
		Иначе
			Запрос.Текст = Запрос.Текст + "
			| И ВЫРАЗИТЬ(Спр2."+Отбор.Ключ + " КАК Строка (300))" + Отбор.Сравнение + "&" + Отбор.Ключ + ?(Найти(Отбор.Сравнение, "(") > 0, ")", "");			
		КонецЕсли;
		Запрос.УстановитьПараметр(Отбор.Ключ, Отбор.Значение);						
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	|СГРУППИРОВАТЬ ПО Спр1.Ссылка
	|";
	
	МетаданныеРеквизита = МетаданныеОбъекта.Реквизиты.Найти(ПолучитьЗначениеНастройки("Имя реквизита"));
	
	Если МетаданныеРеквизита<>Неопределено И МетаданныеРеквизита.Тип.СодержитТип(Тип("Строка")) И МетаданныеРеквизита.Тип.КвалификаторыСтроки.Длина = 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Спр1."+ПолучитьЗначениеНастройки("Имя реквизита"), 
								   "ВЫРАЗИТЬ (Спр1."+ПолучитьЗначениеНастройки("Имя реквизита")+" КАК Строка(300))");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Спр2."+ПолучитьЗначениеНастройки("Имя реквизита"), 
								   "ВЫРАЗИТЬ (Спр2."+ПолучитьЗначениеНастройки("Имя реквизита")+" КАК Строка(300))");
		Запрос.Текст = Запрос.Текст + ", " + "ВЫРАЗИТЬ (Спр1."+ПолучитьЗначениеНастройки("Имя реквизита")+" КАК Строка(300))"; // явная группировка
	КонецЕсли;
	
	
	
	мРезультатыПоиска = Запрос.Выполнить().Выгрузить();
	мРезультатыПоиска.Колонки.Добавить("НомерГруппы");
	мРезультатыПоиска.Сортировать("ЗначениеРеквизита");
	
	КоличестваПоГруппам = Новый ТаблицаЗначений;
	КоличестваПоГруппам.Колонки.Добавить("НомерГруппы");
	КоличестваПоГруппам.Колонки.Добавить("Количество");
	
	ЗначениеРеквизита = Неопределено;
	ТекущаяГруппа = 0;
	ЭлементовВГруппе = 0;
	КоличествоВГруппе = Новый Соответствие;
	Для Каждого СтрокаПоиска ИЗ мРезультатыПоиска Цикл
		ЕСли СтрокаПоиска.ЗначениеРеквизита <> ЗначениеРеквизита Тогда
			Если ТекущаяГруппа <> 0 Тогда
				КоличествоВГруппе[ТекущаяГруппа]  = ЭлементовВГруппе;
				СтрокаГрупп = КоличестваПоГруппам.Добавить();
				СтрокаГрупп.НомерГруппы = ТекущаяГруппа;
				СтрокаГрупп.Количество = ЭлементовВГруппе;				
			КонецЕсли;
			ЗначениеРеквизита = СтрокаПоиска.ЗначениеРеквизита;
			ТекущаяГруппа = ТекущаяГруппа + 1;
			ЭлементовВГруппе = 0;
			
		КонецЕсли;
		СтрокаПоиска.НомерГруппы = - ТекущаяГруппа;
		ЭлементовВГруппе = ЭлементовВГруппе + 1;
	КонецЦикла;
	
	Если ТекущаяГруппа <> 0 Тогда
		КоличествоВГруппе[ТекущаяГруппа]  = ЭлементовВГруппе;
		СтрокаГрупп = КоличестваПоГруппам.Добавить();
		СтрокаГрупп.НомерГруппы = ТекущаяГруппа;
		СтрокаГрупп.Количество = ЭлементовВГруппе;				
	КонецЕсли;
	
	КоличестваПоГруппам.Сортировать("Количество");
	
	ТекущаяГруппа = 1;	
	КолвоЭлементовКоллекции = КоличестваПоГруппам.Количество();
	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
		ЭлементКоллекции = КоличестваПоГруппам[КолвоЭлементовКоллекции - ОбратныйИндекс];		
		
		МассивСтрок = мРезультатыПоиска.НайтиСтроки(Новый Структура("НомерГруппы", -ЭлементКоллекции.НомерГруппы));		
		Если ЭлементКоллекции.Количество = 1 Тогда			
			Для каждого СтрокаГруппы ИЗ МассивСтрок Цикл
				мРезультатыПоиска.Удалить(СтрокаГруппы);
			КонецЦикла;			
			КоличестваПоГруппам.Удалить(ЭлементКоллекции);
		Иначе
			Для каждого СтрокаГруппы ИЗ МассивСтрок Цикл
				СтрокаГруппы.НомерГруппы = ТекущаяГруппа;
			КонецЦикла;			
			ЭлементКоллекции.НомерГруппы = ТекущаяГруппа;
			ТекущаяГруппа = ТекущаяГруппа + 1;
		КонецЕсли;		
	КонецЦикла;
	
	КоличестваПоГруппам.Сортировать("НомерГруппы");

		
	
	ОбновитьКнопкуВыбораГруппы(КоличестваПоГруппам, КоличестваПоГруппам.Количество());
		
	Если мРезультатыПоиска.Количество() > 0 Тогда
		ВывестиГруппу(1);
	КонецЕсли;
	
	
КонецПроцедуры

Процедура НайтиПоСовпадающимСловам(ТаблицаОтбора)
	
	мФормаИндикации.НаименованиеОбработкиДанных = "Поиск элементов";
	мФормаИндикации.КомментарийОбработкиДанных  = "Получение элементов справочника";
	мФормаИндикации.КомментарийЗначения         = "Выполнено:";
	мФормаИндикации.ВладелецФормы = ЭтаФорма;
	мФормаИндикации.Открыть();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ Ссылка,
	|Представление,
	|" + ПолучитьЗначениеНастройки("Имя реквизита") + " КАК ЗначениеРеквизита 
	|Из Справочник." + ПолучитьЗначениеНастройки("Вид справочника") + " КАК Спр
	|ГДЕ
	|УПОРЯДОЧИТЬ ПО Наименование
	|";
	
	МетаданныеОбъекта = Метаданные.Справочники[ПолучитьЗначениеНастройки("Вид справочника")];
	Если МетаданныеОбъекта.Иерархический Тогда
		СуффиксИерархии = "НЕ Спр.ЭтоГруппа";
	Иначе
		СуффиксИерархии = "";
	КонецЕсли;
	
		
	Если ТаблицаОтбора.Количество()>0 Тогда
		УсловиеГДЕ = "";
		Для Каждого Отбор ИЗ ТаблицаОтбора Цикл
			МетаданныеРеквизитаОтбора = МетаданныеОбъекта.Реквизиты.Найти(Отбор.Ключ);
			ЕСли МетаданныеРеквизитаОтбора = Неопределено 
			 ИЛИ НЕ (МетаданныеРеквизитаОтбора.Тип.СодержитТип(Тип("Строка")) И МетаданныеРеквизитаОтбора.Тип.КвалификаторыСтроки.Длина = 0) Тогда			
				УсловиеГДЕ = УсловиеГДЕ + ?(УсловиеГДЕ="", "", " И") +"
				| Спр."+Отбор.Ключ + Отбор.Сравнение + "&" + Отбор.Ключ + ?(Найти(Отбор.Сравнение, "(") > 0, ")", "");
			Иначе
				УсловиеГДЕ = УсловиеГДЕ + ?(УсловиеГДЕ="", "", " И") +"
				| ВЫРАЗИТЬ (Спр."+Отбор.Ключ + " КАК Строка(300))" + Отбор.Сравнение + "&" + Отбор.Ключ + ?(Найти(Отбор.Сравнение, "(") > 0, ")", "");
			КонецЕсли;
				
			Запрос.УстановитьПараметр(Отбор.Ключ, Отбор.Значение);
		КонецЦикла;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ", "ГДЕ " + ?(СуффиксИерархии = "", "", СуффиксИерархии + " И ") + УсловиеГДЕ);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ", ?(СуффиксИерархии = "", "", "ГДЕ "+СуффиксИерархии));
	КонецЕсли;
		
	ТаблицаСправочника = Запрос.Выполнить().Выгрузить();
	
	ТаблицаСлов = Новый ТаблицаЗначений;
	ТаблицаСлов.Колонки.Добавить("Ссылка");
	ТаблицаСлов.Колонки.Добавить("Представление");
	ТаблицаСлов.Колонки.Добавить("ЗначениеРеквизита");
	ТаблицаСлов.Колонки.Добавить("СписокСлов");
	
	СписокСлов = Новый СписокЗначений;
	
	мФормаИндикации.КомментарийОбработкиДанных = "Разбивка значения на отдельные слова";
	мФормаИндикации.МаксимальноеЗначение = ТаблицаСправочника.Количество();
	
	Для Каждого СтрокаСсылки ИЗ ТаблицаСправочника Цикл
		мФормаИндикации.Значение = ТаблицаСправочника.Индекс(СтрокаСсылки)+1;
		ЗначениеРеквизита = СтрокаСсылки.ЗначениеРеквизита;
		СписокСлов.Очистить();
		Слово = "";
		Для индекс = 1 по СтрДлина(ЗначениеРеквизита) Цикл
			Символ = Сред(ЗначениеРеквизита, индекс, 1);
			Если ЭтоБуква(Символ) Тогда
				Слово = Слово + Символ;
			Иначе
				Если Слово<>"" Тогда
				СписокСлов.Добавить(ВРЕГ(Слово));
				Слово = "";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Слово<>"" Тогда
			СписокСлов.Добавить(ВРЕГ(Слово));		
		КонецЕсли;
		
		СписокСлов.СортироватьПоЗначению();
		НовСтр = ТаблицаСлов.Добавить();
		НовСтр.Ссылка =  СтрокаСсылки.Ссылка;
		НовСтр.Представление =  СтрокаСсылки.Представление;
		НовСтр.ЗначениеРеквизита = ЗначениеРеквизита;
		НовСтр.СписокСлов = СписокСлов.Скопировать();						
	КонецЦикла;
	
	мФормаИндикации.КомментарийОбработкиДанных = "Выполняется анализ значений реквизита";
	мФормаИндикации.Значение = 0;
	мФормаИндикации.МаксимальноеЗначение = ТаблицаСлов.Количество();
	
	ТаблицаСправочника = 0;
	
	мРезультатыПоиска = Новый ТаблицаЗначений;
	мРезультатыПоиска.Колонки.Добавить("Ссылка");
	мРезультатыПоиска.Колонки.Добавить("Представление");
	мРезультатыПоиска.Колонки.Добавить("ЗначениеРеквизита");
	мРезультатыПоиска.Колонки.Добавить("НомерГруппы");
	Если МетаданныеОбъекта.Иерархический Тогда
		мРезультатыПоиска.Колонки.Добавить("ЭтоГруппа");
	КонецЕсли;
	
	
	ТекущаяГруппа = 0;
		
	Пока ТаблицаСлов.Количество() > 0 Цикл
		мФормаИндикации.Значение = мФормаИндикации.МаксимальноеЗначение - ТаблицаСлов.Количество();
		
		ОбработкаПрерыванияПользователя();
		
		ТекущаяГруппа = ТекущаяГруппа + 1;
		КоличествоСтрок = ТаблицаСлов.Количество();
		СписокСтрок = Новый СписокЗначений;
		
		ОбрабатываемаяСтрока = ТаблицаСлов[0];
		СписокСтрок.Добавить(ОбрабатываемаяСтрока);
		ТекущийСписокСлов = ОбрабатываемаяСтрока.СписокСлов.Скопировать();
		
		Для индекс = 1 по КоличествоСтрок-1 Цикл			
			СтрокаСравнения = ТаблицаСлов[индекс];
			СписокСловСравнения = СтрокаСравнения.СписокСлов.Скопировать();
			СписокНеНайденных = Новый СписокЗначений;
			
			ОдинаковыхСлов = 0;
			Для Каждого Слово Из ТекущийСписокСлов Цикл
				ЭлементСпискаСравнения = СписокСловСравнения.НайтиПоЗначению(Слово.Значение);
				Если ЭлементСпискаСравнения = Неопределено Тогда
					СписокНеНайденных.Добавить(Слово.Значение);
				Иначе
					СписокСловСравнения.Удалить(ЭлементСпискаСравнения);
					ОдинаковыхСлов = ОдинаковыхСлов + 1;
				КонецЕсли;
			КонецЦикла;
			
			
			Если СписокНеНайденных.Количество()=0 И СписокСловСравнения.Количество()=0 Тогда
				ЕстьОтличия = Ложь;
			Иначе
				ЕСли ОдинаковыхСлов>0 Тогда
					ЕстьОтличия = АнализРазличийВСловах(СписокНеНайденных, СписокСловСравнения, ТекущийСписокСлов, ОдинаковыхСлов);
				Иначе
					ЕстьОтличия = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЕстьОтличия Тогда
				СписокСтрок.Добавить(СтрокаСравнения);
			КонецЕсли;
			
		КонецЦикла;
		
		
		Для Каждого СтрокаИзСписка ИЗ СписокСтрок Цикл
			Если СписокСтрок.Количество() > 1 Тогда
				СтрокаРезультата = мРезультатыПоиска.Добавить();
				СтрокаРезультата.ЗначениеРеквизита = СтрокаИзСписка.Значение.ЗначениеРеквизита;
				СтрокаРезультата.Представление = СтрокаИзСписка.Значение.Представление;
				СтрокаРезультата.Ссылка = СтрокаИзСписка.Значение.Ссылка;
				СтрокаРезультата.НомерГруппы =  - ТекущаяГруппа;
			Иначе
				ТекущаяГруппа = ТекущаяГруппа - 1;
			КонецЕсли;
			ТаблицаСлов.Удалить(СтрокаИзСписка.Значение);
		КонецЦикла;		
		
	КонецЦикла;
	
	мФормаИндикации.КомментарийОбработкиДанных = "Обработка результатов";
		
	Если мРезультатыПоиска.Количество() > 0 Тогда
		
		Если мРезультатыПоиска.Колонки.Найти("ЭтоГруппа") <> Неопределено Тогда
			мРезультатыПоиска.ЗаполнитьЗначения(Ложь, "ЭтоГруппа");
		КонецЕсли;
		
		КоличестваПоГруппам = Новый ТаблицаЗначений;
		КоличестваПоГруппам.Колонки.Добавить("НомерГруппы");
		КоличестваПоГруппам.Колонки.Добавить("Количество");	
		мРезультатыПоиска.Сортировать("НомерГруппы УБЫВ");
		
		
		СтруктураПоиска = Новый Структура;
		ВсегоГрупп =  - мРезультатыПоиска[мРезультатыПоиска.Количество()-1].НомерГруппы;
		Для индекс = 1 по ВсегоГрупп Цикл
			СтруктураПоиска.Вставить("НомерГруппы",  - индекс);
			МассивСтрок = мРезультатыПоиска.НайтиСтроки(СтруктураПоиска);
			СтрокаГруппы = КоличестваПоГруппам.Добавить();
			СтрокаГруппы.НомерГруппы  = индекс;
			СтрокаГруппы.Количество = МассивСтрок.Количество();		
		КонецЦикла;
		
		ТекущаяГруппа = 1;
		КоличестваПоГруппам.Сортировать("Количество УБЫВ");
		Для Каждого СтрокаГруппы ИЗ КоличестваПоГруппам Цикл
			СтруктураПоиска.Вставить("НомерГруппы",  - СтрокаГруппы.НомерГруппы);
			МассивСтрок = мРезультатыПоиска.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаРезультата ИЗ МассивСтрок Цикл
				СтрокаРезультата.НомерГруппы = ТекущаяГруппа;
			КонецЦикла;
			СтрокаГруппы.НомерГруппы = ТекущаяГруппа;
			ТекущаяГруппа = ТекущаяГруппа + 1;
		КонецЦикла;
				
		
		ОбновитьКнопкуВыбораГруппы(КоличестваПоГруппам, КоличестваПоГруппам.Количество());
			
		Если мРезультатыПоиска.Количество() > 0 Тогда
			ВывестиГруппу(1);			
		КонецЕсли;
		
	КонецЕсли;

	мФормаИндикации.Закрыть();

КонецПроцедуры

Процедура ВыполнитьПоискСсылок()
	ВремТаблица = НайденныеОбъекты.Скопировать();
	СтрокаПравильного = ВремТаблица.Найти(Истина, "Правильный");
	Если СтрокаПравильного = Неопределено Тогда
		Предупреждение("Не определен правильный элемен");
		Возврат;
	КонецЕсли;
	ВремТаблица.Удалить(СтрокаПравильного);	
	МассивСсылок = ВремТаблица.ВыгрузитьКолонку("Ссылка");
	БылиОшибки = Ложь;
	Попытка
		НайденныеСсылки = НайтиПоСсылкам(МассивСсылок);
	Исключение
		БылиОшибки = Истина;
		Если Не РольДоступна("ПолныеПрава") Тогда
			Предупреждение("Поиск ссылок не выполнен. Отсутствуют права на некоторые 
						   |объекты конфигурации. Запуск данной обработки рекомендуется 
						   |выполнять пользователям с доступной ролью ""Полные права""",, "Ошибка поиска");
		Иначе
			Сообщить(ОписаниеОшибки());
		КонецЕсли;		
		Возврат;
	КонецПопытки;
	ЭлементыФормы.НайденныеСсылки.СоздатьКолонки();
	ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.НайденныеСсылки;
	УстановитьДоступностьЗаменыУдаления(Не БылиОшибки);
КонецПроцедуры

Процедура ВыполнитьЗаменуЭлементов(ПравильныйЭлемент)
	
	
	Если ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
		БылиИсключения = ложь;
	КонецЕсли;
	ОбрабатываемаяСсылка = Неопределено;
		
	Параметры = Новый Структура;
	
	Для Каждого РегистрБухгалтерии ИЗ Метаданные.РегистрыБухгалтерии Цикл
		Параметры.Вставить(РегистрБухгалтерии.Имя+"Субконто", РегистрБухгалтерии.ПланСчетов.МаксКоличествоСубконто);
		Параметры.Вставить(РегистрБухгалтерии.Имя+"Корреспонденция", РегистрБухгалтерии.Корреспонденция);		
	КонецЦикла;
	
	Параметры.Вставить("Объект", Неопределено);	
	
		
	Для Каждого СтрокаТаблицы Из НайденныеСсылки Цикл
		
		Ссылка = СтрокаТаблицы.Ссылка;
		
		Если ОбрабатываемаяСсылка <> СтрокаТаблицы.Данные Тогда
			Если ОбрабатываемаяСсылка <> Неопределено Тогда
				Попытка
					Параметры.Объект.Записать();
				Исключение
					Если ВыполнятьВТранзакции Тогда
						БылиИсключения = Истина;
						Перейти ~ОТКАТ;
					КонецЕсли;
				КонецПопытки;
				Параметры.Объект = Неопределено;
			КонецЕсли;
			ОбрабатываемаяСсылка = СтрокаТаблицы.Данные;
			
		КонецЕсли;			
		
			
		Если Метаданные.Документы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Если Параметры.Объект = Неопределено Тогда
				Параметры.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
			
			Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И Параметры.Объект[Реквизит.Имя] = Ссылка Тогда
					Параметры.Объект[Реквизит.Имя] = ПравильныйЭлемент;
				КонецЕсли;
			КонецЦикла;
				
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;							
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Для Каждого Движение ИЗ СтрокаТаблицы.Метаданные.Движения Цикл
				НаборЗаписей  = Параметры.Объект.Движения[Движение.Имя];
				НаборЗаписей.Прочитать();
				НадоЗаписывать = Ложь;
				ТаблицаНабора = НаборЗаписей.Выгрузить();
				Для Каждого Измерение ИЗ Движение.Измерения Цикл
					Если Измерение.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Измерение.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Измерение.Имя] = ПравильныйЭлемент;
							НадоЗаписывать = Истина;
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Измерение.Имя);
						КонецЦикла;													
					КонецЕсли;
				КонецЦикла;
				
				ЕСли Метаданные.РегистрыСведений.Содержит(Движение) Тогда
					Для Каждого Ресурс ИЗ Движение.Ресурсы Цикл
						Если Ресурс.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Ресурс.Имя);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти[Ресурс.Имя] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Ресурс.Имя);
							КонецЦикла;													
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Для Каждого Реквизит ИЗ Движение.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							НадоЗаписывать = Истина;
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;													
					КонецЕсли;
				КонецЦикла;
				
				Если Метаданные.РегистрыБухгалтерии.Содержит(Движение) Тогда
					
					ЕстьКорреспонденция = Параметры[Движение.Имя + "Корреспонденция"];
					
					Для ИндексСубконто = 1 по Параметры[Движение.Имя + "Субконто"] Цикл
						Если ЕстьКорреспонденция Тогда
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоДт"+ИндексСубконто);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти["СубконтоДт"+ИндексСубконто] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоДт"+ИндексСубконто);
							КонецЦикла;
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоКт"+ИндексСубконто);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти["СубконтоКт"+ИндексСубконто] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоКт"+ИндексСубконто);
							КонецЦикла;								
						Иначе							
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "Субконто"+ИндексСубконто);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти["Субконто"+ИндексСубконто] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "Субконто"+ИндексСубконто);
							КонецЦикла;							
						КонецЕсли;						
					КонецЦикла;					
				КонецЕсли;
								
				
				Если НадоЗаписывать Тогда
					НаборЗаписей.Загрузить(ТаблицаНабора);
					Попытка
						НаборЗаписей.Записать();
					Исключение
						Если ВыполнятьВТранзакции Тогда
							БылиИсключения = Истина;
							Перейти ~ОТКАТ;
						КонецЕсли;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
			
			
			Для Каждого Последовательность ИЗ Метаданные.Последовательности Цикл
				Если Последовательность.Документы.Содержит(СтрокаТаблицы.Метаданные) Тогда
					НадоЗаписывать = Ложь;
					НаборЗаписи = Последовательности[Последовательность.Имя].СоздатьНаборЗаписей();
					НаборЗаписи.Отбор.Регистратор.Установить(СтрокаТаблицы.Данные);
					НаборЗаписи.Прочитать();
					
					Для Каждого Измерение ИЗ Последовательность.Измерения Цикл
						Если Измерение.Тип.СодержитТип(ТипЗнч(Ссылка)) И НаборЗаписи[0][Измерение.Имя]=Ссылка Тогда
							НаборЗаписи[0][Измерение.Имя] = ПравильныйЭлемент;														
							НадоЗаписывать = Истина;
						КонецЕсли;
					КонецЦикла;					
					Если НадоЗаписывать Тогда
						Попытка
							НаборЗаписи.Записать();
						Исключение
							Если ВыполнятьВТранзакции Тогда
								БылиИсключения = Истина;
								Перейти ~ОТКАТ;
							КонецЕсли;
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			
			
		ИначеЕсли Метаданные.Справочники.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Если Параметры.Объект = Неопределено Тогда
				Параметры.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
			
			Если СтрокаТаблицы.Метаданные.Владельцы.Содержит(Ссылка.Метаданные()) И Параметры.Объект.Владелец = Ссылка Тогда
				Параметры.Объект.Владелец = ПравильныйЭлемент;
			КонецЕсли;
			
			Если СтрокаТаблицы.Метаданные.Иерархический И Параметры.Объект.Родитель = Ссылка Тогда
				Параметры.Объект.Владелец = ПравильныйЭлемент;
			КонецЕсли;				
			
			Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И Параметры.Объект[Реквизит.Имя] = Ссылка Тогда
					Параметры.Объект[Реквизит.Имя] = ПравильныйЭлемент;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;							
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;		
			
		ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(СтрокаТаблицы.Метаданные)
			      ИЛИ Метаданные.ПланыСчетов.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.ПланыВидовРасчета.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.Задачи.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.БизнесПроцессы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Если Параметры.Объект = Неопределено Тогда
				Параметры.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
						
			Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И Параметры.Объект[Реквизит.Имя] = Ссылка Тогда
					Параметры.Объект[Реквизит.Имя] = ПравильныйЭлемент;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;							
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;	
			
		ИначеЕсли Метаданные.Константы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Константы[СтрокаТаблицы.Метаданные.Имя].Установить(ПравильныйЭлемент);
			
			
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(СтрокаТаблицы.Метаданные) Тогда	
			НаборЗаписей = РегистрыСведений[СтрокаТаблицы.Метаданные.Имя].СоздатьНаборЗаписей();
			Для Каждого Измерение ИЗ СтрокаТаблицы.Метаданные.Измерения Цикл
				НаборЗаписей.Отбор[Измерение.Имя].Установить(СтрокаТаблицы.Данные[Измерение.Имя]);
			КонецЦикла;
			Если СтрокаТаблицы.Метаданные.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
				НаборЗаписей.Отбор["Период"].Установить(СтрокаТаблицы.Данные.Период);
			КонецЕсли;
			НаборЗаписей.Прочитать();
			ТаблицаНабора = НаборЗаписей.Выгрузить();
			НаборЗаписей.Очистить();
			Попытка
				НаборЗаписей.Записать();			
			Исключение
				Если ВыполнятьВТранзакции Тогда
					БылиИсключения = Истина;
					Перейти ~ОТКАТ;
				КонецЕсли;
			КонецПопытки;
			
			Для Каждого Колонка ИЗ ТаблицаНабора.Колонки Цикл
				Если ТаблицаНабора[0][Колонка.Имя] = Ссылка Тогда
					ТаблицаНабора[0][Колонка.Имя] = ПравильныйЭлемент;
				КонецЕсли;
			КонецЦикла;
			НаборЗаписей.Загрузить(ТаблицаНабора);
			Попытка 
				НаборЗаписей.Записать();
			Исключение
				Если ВыполнятьВТранзакции Тогда
					БылиИсключения = Истина;
					Перейти ~ОТКАТ;
				КонецЕсли;
			КонецПопытки;
			
		Иначе
			Сообщить("Ссылки типа "+СтрокаТаблицы.Метаданные+" не заменяются!!");			
		КонецЕсли;
	КонецЦикла;
	
	
	
	Если Параметры.Объект <> Неопределено Тогда
		Попытка
			Параметры.Объект.Записать();
		Исключение
			Если ВыполнятьВТранзакции Тогда
				БылиИсключения = Истина;
				Перейти ~ОТКАТ;
			КонецЕсли;
		КонецПопытки;		
	КонецЕсли;
	
~ОТКАТ:
	Если ВыполнятьВТранзакции Тогда
		Если БылиИсключения Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;	
	КонецЕсли;
	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
              
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	мФормаИндикации = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	
	Настройка = НастройкиОтчета.Добавить();
	Настройка.ИмяНастройки = "Вид справочника";
	Настройка.ТипСравнения = "Равно";
	Настройка.Предопределенный = Истина;
	
	Настройка = НастройкиОтчета.Добавить();
	Настройка.ИмяНастройки = "Имя реквизита";
	Настройка.ТипСравнения = "Равно";
	Настройка.Предопределенный = Истина;
	
	Настройка = НастройкиОтчета.Добавить();
	Настройка.ИмяНастройки = "Режим поиска";
	Настройка.ТипСравнения = "Равно";
	Настройка.Предопределенный = Истина;
	
	
КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка."+ПолучитьЗначениеНастройки("Вид справочника")) Тогда
		
		МетаданныеЗначенияВыбора = ЗначениеВыбора.Метаданные();
		Если МетаданныеЗначенияВыбора.Иерархический Тогда
			Если НайденныеОбъекты.Количество() > 0 Тогда
				Если ЗначениеВыбора.ЭтоГруппа <> НайденныеОбъекты[0].ЭтоГруппа Тогда
					Предупреждение("Одновременная обработка групп и элементов справочника запрещена");
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ЕСли мРезультатыПоиска = Неопределено Тогда
			мРезультатыПоиска = Новый ТаблицаЗначений;
			мРезультатыПоиска.Колонки.Добавить("Ссылка");
			мРезультатыПоиска.Колонки.Добавить("Представление");
			мРезультатыПоиска.Колонки.Добавить("ЗначениеРеквизита");
			мРезультатыПоиска.Колонки.Добавить("НомерГруппы");
			мРезультатыПоиска.Колонки.Добавить("ЭтоГруппа");
		КонецЕсли;
		
		НоваяСтрока = мРезультатыПоиска.Добавить();
		НоваяСтрока.Ссылка = ЗначениеВыбора;
		Если МетаданныеЗначенияВыбора.Иерархический Тогда
			НоваяСтрока.ЭтоГруппа = ЗначениеВыбора.ЭтоГруппа;
		КонецЕсли;
		ИмяРеквизита = ПолучитьЗначениеНастройки("Имя реквизита");
		Если ИмяРеквизита = Неопределено Тогда
			ИмяРеквизита = "Наименование";
		КонецЕсли;
		НоваяСтрока.ЗначениеРеквизита = ЗначениеВыбора[ИмяРеквизита];
		НоваяСтрока.Представление = Строка(ЗначениеВыбора);	
		
		ТекущаяГруппа = ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.ВыборГруппы.Текст;		
		Если ТекущаяГруппа = "Нет групп" Тогда
			ТекущаяГруппа = 1;
			Кнопка = ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.ВыборГруппы;
			Кнопка.Текст = "Группа 1 из 1";
			Кнопка.Кнопки.Добавить("Группа 1", 
									ТипКнопкиКоманднойПанели.Действие, 
									"Группа 1 ( " + Строка(НайденныеОбъекты.Количество()+1) + " эл-тов )",
									Новый Действие("КоманднаяПанельНайденныеОбъектыВыборГруппы"));

		Иначе
			поз = Найти(ТекущаяГруппа, " из");
			ТекущаяГруппа = Число(Сред(ТекущаяГруппа, 8, поз - 8));
			Кнопка = ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.ВыборГруппы.Кнопки[ТекущаяГруппа-1];
			Кнопка.Текст = "Группа "+ТекущаяГруппа+" ( " + Строка(НайденныеОбъекты.Количество()+1) + " эл-тов )";
		КонецЕсли;		
		
		НоваяСтрока.НомерГруппы = ТекущаяГруппа;
		
		НоваяСтрокаНайденных = НайденныеОбъекты.Добавить();
		НоваяСтрокаНайденных.Ссылка = НоваяСтрока.Ссылка;
		НоваяСтрокаНайденных.ЗначениеРеквизита = НоваяСтрока.ЗначениеРеквизита;
		НоваяСтрокаНайденных.Представление = НоваяСтрока.Представление;	
		НоваяСтрокаНайденных.Правильный = Ложь;	
		Если МетаданныеЗначенияВыбора.Иерархический Тогда
			НоваяСтрокаНайденных.ЭтоГруппа = НоваяСтрока.ЭтоГруппа;	
		КонецЕсли;
		
	КонецЕсли;	
КонецПроцедуры

         
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛЕЙ ФОРМЫ "НастройкиОтчета"

Процедура КоманднаяПанельНастройкиОтчетаПоиск(Кнопка)
	
	Если ПустаяСтрока(ПолучитьЗначениеНастройки("Имя реквизита")) Тогда
		Предупреждение("Не указаны все необходимые параметры поиска");
		Возврат;
	КонецЕсли;
	
	НайденныеОбъекты.Очистить();
	КнопкаВыборГруппы = ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.ВыборГруппы;
	КнопкаВыборГруппы.Текст = "Нет групп";
	КнопкаВыборГруппы.Кнопки.Очистить();;
	РежимПоиска = ПолучитьЗначениеНастройки("Режим поиска");
	
	ТаблицаОтбора = ПолучитьТаблицуОтборов();
	
	Если РежимПоиска = "1" Тогда
		НайтиПоРавенствуРеквизитов(ТаблицаОтбора);
	ИначеЕсли РежимПоиска = "2" Тогда
		НайтиПоСовпадающимСловам(ТаблицаОтбора);
	Иначе
		Предупреждение("Не указан режим поиска");
		Возврат;
	КонецЕсли;
	ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Результаты;
	
КонецПроцедуры

Процедура КоманднаяПанельНастройкиОтчетаНастройка(Кнопка)
	ФормаНАстройки = ПолучитьФорму("ФормаНастройкиСовпадения");
	ФормаНАстройки.ДопустимоеРазличиеСлов = ДопустимоеРазличиеСлов;
	ФормаНАстройки.ОткрытьМодально();
	ДопустимоеРазличиеСлов = ФормаНАстройки.ДопустимоеРазличиеСлов;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "НастройкиОтчета"

Процедура НастройкиОтчетаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Предопределенный Тогда
		ОформлениеСтроки.ЦветФона   = ЦветаСтиля.ЦветФонаФормы;
		ОформлениеСтроки.ЦветТекста = WebЦвета.ТемноСиний;
		ОформлениеСтроки.Ячейки.ИмяНастройки.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.ТипСравнения.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НастройкиОтчетаПередУдалением(Элемент, Отказ)
	ЕСли Элемент.ТекущиеДанные.Предопределенный Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура НастройкиОтчетаПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЕСли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		ТекущееИмяреквизита = ПолучитьЗначениеНастройки("Имя реквизита");
		Если ЭлементыФормы.НастройкиОтчета.ТекущиеДанные.ИмяНастройки = "Режим поиска"
			 И ВыбранноеЗначение.Представление = "По похожим словам" И ТекущееИмяреквизита<>"Наименование" Тогда
			 СбросТипа = Ложь;
			 ЕСли ТекущееИмяреквизита="Владелец" Тогда
				 СбросТипа = Истина;
			 ИначеЕСли ТекущееИмяреквизита="Родитель" Тогда
				 СбросТипа = Истина;				 
			 ИначеЕсли ТекущееИмяреквизита="Код" Тогда
				 Если Метаданные.Справочники[ПолучитьЗначениеНастройки("Вид справочника")].ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Число Тогда
					 СбросТипа = Истина;
				 КонецЕсли;
			Иначе				
				ТипРеквизита = Метаданные.Справочники[ПолучитьЗначениеНастройки("Вид справочника")].Реквизиты[ТекущееИмяреквизита].Тип;
				Если Не ТипРеквизита.СодержитТип(Тип("Строка")) Тогда
					СбросТипа = Истина;					
				КонецЕсли;			
			КонецЕсли;
			Если СбросТипа Тогда
				Предупреждение("Данный режим поиска имеет смысл выполнять только для реквизитов строкового типа");
				Возврат;
			КонецЕсли;
		КонецЕсли;		
		ЭлементыФормы.НастройкиОтчета.ТекущиеДанные.ЗначениеНастройки = ВыбранноеЗначение.Значение;
		Элемент.Значение = ВыбранноеЗначение.Представление;
		ЭлементыФормы.НастройкиОтчета.Колонки.Представление.ЭлементУправления.РедактированиеТекста = Ложь;
		
		Если ЭлементыФормы.НастройкиОтчета.ТекущиеДанные.ИмяНастройки = "Вид справочника" Тогда
			МассивСтрок = НастройкиОтчета.НайтиСтроки(Новый Структура("Предопределенный", Ложь));
			Для Каждого СтрокаКУдалению ИЗ МассивСтрок Цикл
				НастройкиОтчета.Удалить(СтрокаКУдалению);
			КонецЦикла;
			СтрокаРеквизита = НастройкиОтчета.Найти("Имя реквизита","ИмяНастройки");
			СтрокаРеквизита.ЗначениеНастройки = Неопределено;
			СтрокаРеквизита.Представление = "";
		ИначеЕсли ЭлементыФормы.НастройкиОтчета.ТекущиеДанные.ИмяНастройки = "Имя реквизита" Тогда
			СтрокаРеквизита = НастройкиОтчета.Найти("Режим поиска","ИмяНастройки");
			СтрокаРеквизита.ЗначениеНастройки = Неопределено;
			СтрокаРеквизита.Представление = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура НастройкиОтчетаПредставлениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = ЭлементыФормы.НастройкиОтчета.ТекущиеДанные;
	ЕСли ТекущиеДанные.Предопределенный Тогда		
		ОткрытьФормуПоНастройке(ТекущиеДанные, Элемент);
		СтандартнаяОбработка = Ложь;		
	Иначе
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НастройкиОтчетаИмяНастройкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	ОткрытьФормуПоНастройке(ЭлементыФормы.НастройкиОтчета.ТекущиеДанные, Элемент);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура НастройкиОтчетаИмяНастройкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЭлементыФормы.НастройкиОтчета.ТекущиеДанные.ЗначениеНастройки = ВыбранноеЗначение.Значение;
	Элемент.Значение = "Отбор: "+ВыбранноеЗначение.Представление;
	ЕСли ВыбранноеЗначение.Значение = "Наименование" Тогда
		ТипРеквизита = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(Метаданные.Справочники[ПолучитьЗначениеНастройки("Вид справочника")].ДлинаНаименования));				
	ИначеЕсли ВыбранноеЗначение.Значение = "Код" Тогда
		
		Если Метаданные.Справочники[ПолучитьЗначениеНастройки("Вид справочника")].ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Число Тогда
			ТипРеквизита = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Метаданные.Справочники[ПолучитьЗначениеНастройки("Вид справочника")].ДлинаКода));
		Иначе
			ТипРеквизита = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(Метаданные.Справочники[ПолучитьЗначениеНастройки("Вид справочника")].ДлинаКода));
		КонецЕсли;			
		
	ИначеЕсли ВыбранноеЗначение.Значение = "Владелец" Тогда
		
		Владельцы = Метаданные.Справочники[ПолучитьЗначениеНастройки("Вид справочника")].Владельцы;
		МассивТипов = Новый Массив;
		Для Каждого Владелец ИЗ Владельцы Цикл			
			МассивТипов.Добавить(Тип(СтрЗаменить(Владелец.ПолноеИмя(), ".", "Ссылка.")));
		КонецЦикла;
		
		ТипРеквизита = Новый ОписаниеТипов(МассивТипов);
		
	ИначеЕсли ВыбранноеЗначение.Значение = "Родитель" Тогда
		ТипСсылки = "СправочникСсылка."+ПолучитьЗначениеНастройки("Вид справочника");
		ТипРеквизита = Новый ОписаниеТипов(ТипСсылки);
		
	ИначеЕсли ВыбранноеЗначение.Значение = "Ссылка" Тогда
		ТипСсылки = "СправочникСсылка."+ПолучитьЗначениеНастройки("Вид справочника");
		ТипРеквизита = Новый ОписаниеТипов(ТипСсылки);
		
	Иначе		
		ТипРеквизита = Метаданные.Справочники[ПолучитьЗначениеНастройки("Вид справочника")].Реквизиты[ВыбранноеЗначение.Значение].Тип;
	КонецЕсли;
	
	ЕСли ТипРеквизита.Типы().Количество()>1 Тогда
		ЭлементыФормы.НастройкиОтчета.Колонки.Представление.ЭлементУправления.ОграничениеТипа = ТипРеквизита;
		ЭлементыФормы.НастройкиОтчета.Колонки.Представление.ЭлементУправления.ВыбиратьТип = Истина;
	//Иначе
	//	ЭлементыФормы.НастройкиОтчета.Колонки.Представление.ЭлементУправления.ВыбиратьТип = Ложь;
	КонецЕсли;

	ЭлементыФормы.НастройкиОтчета.ТекущиеДанные.Представление = ТипРеквизита.ПривестиЗначение(ЭлементыФормы.НастройкиОтчета.ТекущиеДанные.Представление);
	
	ЭлементыФормы.НастройкиОтчета.ТекущиеДанные.ТипСравнения = "Равно";
		
	СтандартнаяОбработка = Ложь;
	
	

КонецПроцедуры

Процедура НастройкиОтчетаПредставлениеПриИзменении(Элемент)
	
КонецПроцедуры

Процедура НастройкиОтчетаИмяНастройкиПриИзменении(Элемент)
			
КонецПроцедуры

Процедура НастройкиОтчетаТипСравненияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
    ТекущиеДанные = ЭлементыФормы.НастройкиОтчета.ТекущиеДанные;
	
	Список = Новый СписокЗначений();
	Список.Добавить("Равно");
	Список.Добавить("Не равно");
	Если ТипЗнч(ТекущиеДанные.Представление) <> Тип ("Строка") Тогда
		Список.Добавить("В иерархии");
		Список.Добавить("Не в иерархии");	
		Список.Добавить("В списке");
		Список.Добавить("Не в списке");
	КонецЕсли;
	ЭлементСписка = Список.НайтиПоЗначению(Элемент.Значение);
	Выбор = ВыбратьИзСписка(Список, Элемент);
	Если Выбор<>Неопределено Тогда
		Элемент.Значение = Выбор.Значение;
	КонецЕслИ;
	
	
	
	
	//ТекущиеДанные.Представление = ОписаниеТипов.ПривестиЗначение(ТекущиеДанные.Представление);
	
	Если (Элемент.Значение = "В списке" ИЛИ Элемент.Значение = "Не в списке")
		И ТипЗнч(ТекущиеДанные.Представление)<>Тип("СписокЗначений") Тогда
		МассивТипов = Новый Массив();
		МассивТипов.Добавить(ТипЗнч(ТекущиеДанные.Представление));
		ОписаниеТиповРеквизита = Новый ОписаниеТипов(МассивТипов);
		
		ОписаниеТиповСписка = Новый ОписаниеТипов("СписокЗначений");
		ТекущиеДанные.Представление = ОписаниеТиповСписка.ПривестиЗначение(ТекущиеДанные.Представление);
		ТекущиеДанные.Представление.ТипЗначения = ОписаниеТиповРеквизита;
		
	ИначеЕсли Элемент.Значение <> "В списке" И Элемент.Значение <> "Не в списке"
		И ТипЗнч(ТекущиеДанные.Представление)=Тип("СписокЗначений") Тогда
		
		ОписаниеТиповРеквизита = ТекущиеДанные.Представление.ТипЗначения;
		ТекущиеДанные.Представление = ОписаниеТиповРеквизита.ПривестиЗначение(ТекущиеДанные.Представление);		
				
	КонецЕсли;
	
КонецПроцедуры

Процедура НастройкиОтчетаТипСравненияПриИзменении(Элемент)
	ТекущиеДанные = ЭлементыФормы.НастройкиОтчета.ТекущиеДанные;
	
	//ТекущиеДанные.Представление = ОписаниеТипов.ПривестиЗначение(ТекущиеДанные.Представление);
	
	Если (Элемент.Значение = "В списке" ИЛИ Элемент.Значение = "Не в списке")
		И ТипЗнч(ТекущиеДанные.Представление)<>Тип("СписокЗначения") Тогда
		МассивТипов = Новый Массив();
		МассивТипов.Добавить(ТипЗнч(ТекущиеДанные.Представление));
		ОписаниеТиповРеквизита = Новый ОписаниеТипов(МассивТипов);
		
		ОписаниеТиповСписка = Новый ОписаниеТипов("СписокЗначений");
		ТекущиеДанные.Представление = ОписаниеТиповСписка.ПривестиЗначение(ТекущиеДанные.Представление);
		ТекущиеДанные.Представление.ТипЗначения = ОписаниеТиповРеквизита;
		
	ИначеЕсли Элемент.Значение <> "В списке" И Элемент.Значение <> "Не в списке"
		И ТипЗнч(ТекущиеДанные.Представление)=Тип("СписокЗначения") Тогда
		
		ОписаниеТиповРеквизита = ТекущиеДанные.Представление.ТипЗначения;
		ТекущиеДанные.Представление = ОписаниеТиповРеквизита.ПривестиЗначение(ТекущиеДанные.Представление);		
				
	КонецЕсли;	
	
	
КонецПроцедуры

Процедура НастройкиОтчетаПередНачаломИзменения(Элемент, Отказ)
	Если ЭлементыФормы.НастройкиОтчета.ТекущиеДанные.Предопределенный Тогда
		ЭлементыФормы.НастройкиОтчета.Колонки.Представление.ЭлементУправления.РедактированиеТекста = Ложь;
	Иначе
		ЭлементыФормы.НастройкиОтчета.Колонки.Представление.ЭлементУправления.РедактированиеТекста = Истина;
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛЕЙ ФОРМЫ "НайденныеОбъекты"

Процедура КоманднаяПанельНайденныеОбъектыВыборГруппы(Кнопка)
	НомерГруппы = Число(Сред(Кнопка.Имя, 7));
	ВывестиГруппу(НомерГруппы);
КонецПроцедуры

Процедура КоманднаяПанельНайденныеОбъектыВыборПравильного(Кнопка)
	СтрокаТаблицы = НайденныеОбъекты.Найти(Истина, "Правильный");
	Если СтрокаТаблицы <> Неопределено Тогда
		СтрокаТаблицы.Правильный = Ложь;
	КонецЕсли;
	
	Если ЭлементыФормы.НайденныеОбъекты.ТекущаяСтрока <> Неопределено Тогда
		ЭлементыФормы.НайденныеОбъекты.ТекущаяСтрока.Правильный = Истина;
	КонецЕсли;
	
	УстановитьДоступностьЗаменыУдаления(Ложь);
	НайденныеСсылки.Очистить();
	
КонецПроцедуры

Процедура КоманднаяПанельНайденныеОбъектыПоискСсылок(Кнопка)
	ВыполнитьПоискСсылок();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "НайденныеОбъекты"

Процедура НайденныеОбъектыОбъектОткрытие(Элемент, СтандартнаяОбработка)
	Форма = ЭлементыФормы.НайденныеОбъекты.ТекущиеДанные.Ссылка.ПолучитьОбъект().ПолучитьФорму();
	Форма.Открыть();
КонецПроцедуры

Процедура НайденныеОбъектыПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ = Истина;
	ВидСправочника = ПолучитьЗначениеНастройки("Вид справочника");
	ЕСли ВидСправочника = Неопределено Тогда
		Предупреждение("Не указан вид справочника.");
		Возврат;
	КонецЕсли;
	УстановитьДоступностьЗаменыУдаления(Ложь);
	НайденныеСсылки.Очистить();
	ФормаВыбора = Справочники[ВидСправочника].ПолучитьФормуВыбора(, ЭтаФорма);
	ФормаВыбора.Открыть();	
КонецПроцедуры

Процедура НайденныеОбъектыПередУдалением(Элемент, Отказ)
	
	СтруктураПоиска = Новый Структура;
	
	ТекущаяГруппа = ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.ВыборГруппы.Текст;
	поз = Найти(ТекущаяГруппа, " из");
	ТекущаяГруппа = Число(Сред(ТекущаяГруппа, 8, поз - 8));
	Кнопка = ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.ВыборГруппы.Кнопки[ТекущаяГруппа-1];
	Кнопка.Текст = "Группа "+ТекущаяГруппа+" ( " + Строка(НайденныеОбъекты.Количество()-1) + " эл-тов )";
	
	СтруктураПоиска.Вставить("НомерГруппы", ТекущаяГруппа);
	СтруктураПоиска.Вставить("Ссылка", Элемент.ТекущиеДанные.Ссылка);
	МассивСтрок = мРезультатыПоиска.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		мРезультатыПоиска.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

Процедура НайденныеОбъектыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Правильный<>Неопределено И ДанныеСтроки.Правильный Тогда
		ОформлениеСтроки.ЦветФона   = ЦветаСтиля.ЦветФонаФормы;
		ОформлениеСтроки.ЦветТекста = WebЦвета.ТемноСиний;
		ОформлениеСтроки.Шрифт = Новый Шрифт(,,Истина);
	КонецЕсли;
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛЕЙ ФОРМЫ "НайденныеСсылки"

Процедура КоманднаяПанельНайденныеСсылкиВыполнитьЗамену(Кнопка)
	
	СтрокаПравильного = НайденныеОбъекты.Найти(Истина, "Правильный");
	Если СтрокаПравильного = Неопределено Тогда
		Предупреждение("Не определен правильный элемен");
		Возврат;
	КонецЕсли;
	
	Если НайденныеСсылки.Количество() = 0 Тогда
		Предупреждение("Ссылки на элементы не найдены. Либо поиск не выполнялся.");
		Возврат;
	КонецЕсли;

	ВыполнитьЗаменуЭлементов(СтрокаПравильного.Ссылка);
	ВыполнитьПоискСсылок();

КонецПроцедуры

Процедура КоманднаяПанельНайденныеСсылкиУдалитьЭлементы(Кнопка)
	Если НайденныеСсылки.Количество()>0 Тогда
		Предупреждение("На элементы есть ссылки");
		Возврат;
	КонецЕсли;
	
	ТекущаяГруппа = ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.ВыборГруппы.Текст;		
	Если ТекущаяГруппа = "Нет групп" Тогда
		ТекущаяГруппа = 1;		
	Иначе
		поз = Найти(ТекущаяГруппа, " из");
		ТекущаяГруппа = Число(Сред(ТекущаяГруппа, 8, поз - 8));
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("НомерГруппы", ТекущаяГруппа);
	
	СтрокиКУдалению = Новый ТаблицаЗначений;
	СтрокиКУдалению.Колонки.Добавить("СтрокаТаблицы");
	СтрокиКУдалению.Колонки.Добавить("ТаблицаЗначений");
	
	БылиИсключения = Ложь;
	ЕСли ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	МассивСтрок  = НайденныеОбъекты.НайтиСтроки(Новый Структура("Правильный", Ложь));
	Для Каждого Строка ИЗ МассивСтрок Цикл
		          		
		СтруктураПоиска.Вставить("Ссылка", Строка.Ссылка);
		МассивРезультатов = мРезультатыПоиска.НайтиСтроки(СтруктураПоиска);
		          		
		Объект = Строка.Ссылка.ПолучитьОбъект();		
		Попытка
			Объект.Удалить();
		Исключение
			Если ВыполнятьВТранзакции Тогда
				БылиИсключения = Истина;
				Прервать;
			КонецЕсли;
		КонецПопытки;
		
		
		Если МассивРезультатов.Количество()>0 Тогда
			НовСтр = СтрокиКУдалению.Добавить();
			НовСтр.СтрокаТаблицы = МассивРезультатов[0];
			НовСтр.ТаблицаЗначений = мРезультатыПоиска;				
		КонецЕсли;
		
		НовСтр = СтрокиКУдалению.Добавить();
		НовСтр.СтрокаТаблицы = Строка;
		НовСтр.ТаблицаЗначений = НайденныеОбъекты;			
		
	КонецЦикла;
	
	Если ВыполнятьВТранзакции Тогда
		Если БылиИсключения Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();			
		КонецЕсли;
	КонецЕсли;	
	Если НЕ БылиИсключения Тогда
		Для Каждого СтрокаКУдалению ИЗ СтрокиКУдалению Цикл
			СтрокаКУдалению.ТаблицаЗначений.Удалить(СтрокаКУдалению.СтрокаТаблицы);
		КонецЦикла;			
	КонецЕсли;
	
	Попытка
		Кнопка = ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.ВыборГруппы.Кнопки[ТекущаяГруппа-1];
		Кнопка.Текст = "Группа "+ТекущаяГруппа+" ( " + Строка(НайденныеОбъекты.Количество()) + " эл-тов )";
	Исключение
		// поиск значений не производился
	КонецПопытки;
	
КонецПроцедуры

Процедура НайденныеСсылкиПередНачаломИзменения(Элемент, Отказ)
	Попытка
		Форма = Элемент.ТекущиеДанные.Данные.ПолучитьФорму();
		Форма.Открыть();
	Исключение
		
	КонецПопытки;
	Отказ = истина;
КонецПроцедуры









НайденныеОбъекты.Колонки.Добавить("Правильный");
НайденныеОбъекты.Колонки.Добавить("Ссылка");
НайденныеОбъекты.Колонки.Добавить("ЭтоГруппа");
ДопустимоеРазличиеСлов = 30;

НастройкиОтчета.Колонки.Добавить("Предопределенный", Новый ОписаниеТипов("Булево"));
НастройкиОтчета.Колонки.Добавить("ЗначениеНастройки");
