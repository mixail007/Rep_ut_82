////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Переменные для заполнения при вызове обработки из документа.
Перем мВнешняяТаблицаТоваров Экспорт;
Перем мВнешнийЭлементНоменклатуры Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура управления пометками кнопок командной панели.
//
Процедура УправлениеПометкамиКнопокКоманднойПанели()

	Если ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх Тогда
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Отбор.Пометка                = Ложь;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Отбор.Пометка = Ложь;
	Иначе
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Отбор.Пометка                = Истина;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Отбор.Пометка = Истина;
	КонецЕсли;

КонецПроцедуры // УправлениеПометкамиКнопокКоманднойПанели()

// Процедура заполнения таблицы товаров
// Заполняет табличную часть информацией из регистра "Штрихкоды" с указанными
// условиями отбора.
//
Процедура Заполнить()

	НетТипаЦены = ЗначениеНеЗаполнено(ТипЦены);
	Если ПечататьЦену И НетТипаЦены Тогда
		Сообщить ("Укажите тип цены!");
		Возврат;
	КонецЕсли;
	ЗапросШтрихкоды = Новый Запрос;
	ЗапросШтрихкоды.УстановитьПараметр("ТипШтрихкода",            ТипШтрихкода);
	Если НЕ ЗначениеНеЗаполнено(ЭлементыФормы.Номенклатура.Значение) Тогда
		ЗапросШтрихкоды.УстановитьПараметр("Владелец",            ЭлементыФормы.Номенклатура.Значение);
	КонецЕсли;
	ЗапросШтрихкоды.УстановитьПараметр("ЕдиницаПоКлассификатору", Единица);
	ЗапросШтрихкоды.УстановитьПараметр("ПустаяХарактеристика",    Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	ЗапросШтрихкоды.УстановитьПараметр("ПустаяСерия",             Справочники.СерииНоменклатуры.ПустаяСсылка());
	ЗапросШтрихкоды.УстановитьПараметр("Качество",                Качество);
	ЗапросШтрихкоды.УстановитьПараметр("ТипШтрихкода",            ТипШтрихкода);
	ЗапросШтрихкоды.УстановитьПараметр("ТипыШтрихкода",           ЭлементыФормы.ТипШтрихкода.СписокВыбора);
	ЗапросШтрихкоды.УстановитьПараметр("ЭтоГруппа",               Истина);
	ЗапросШтрихкоды.УстановитьПараметр("Дата",                    ТекущаяДата());
	ЗапросШтрихкоды.УстановитьПараметр("Валюта",                  Валюта);

	Если НЕ ВВалютахЦен Тогда
		Если ЗначениеНеЗаполнено(Валюта)Тогда
			Предупреждение("ВыберитеВалюту!");
			Возврат;
		КонецЕсли;
		КурсВалюты = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекущаяДата(), Новый Структура("Валюта", Валюта));
		Если КурсВалюты.Курс = 0 тогда
			Предупреждение("Курс валюты отчета """ + Валюта.Наименование+""" на дату " +
			               строка(ТекущаяДата())+" не определен или нулевой. Формирование этикеток невозможно.");
			Возврат;
		КонецЕсли;

		Если КурсВалюты.Кратность = 0 тогда
			Предупреждение("Кратность курса валюты отчета """ + Валюта.Наименование+""" на дату " +
			               строка(ТекущаяДата())+" не определена или нулевая. Формирование этикеток невозможно.");
			Возврат;
		КонецЕсли;
		ЗапросШтрихкоды.УстановитьПараметр("КурсВалюты",          КурсВалюты.Курс);
	КонецЕсли;
	
	
	Если ТипЦены.Рассчитывается Тогда
		ТипЦенБазовый            = ТипЦены.БазовыйТипЦен;
		ПорядокОкругления        = ТипЦены.ПорядокОкругления;
		ОкруглятьВБольшуюСторону = ТипЦены.ОкруглятьВБольшуюСторону;
		ПроцентСкидкиНаценки     = ТипЦены.ПроцентСкидкиНаценки;
		ЗапросШтрихкоды.УстановитьПараметр("ТипЦены", ТипЦенБазовый);
		ЗапросШтрихкоды.УстановитьПараметр("ТипЦенРасчетный", ТипЦены);
	Иначе
		ЗапросШтрихкоды.УстановитьПараметр("ТипЦены", ТипЦены);
	КонецЕсли;

	Текст = "ВЫБРАТЬ
	|	Штрихкоды.ТипШтрихкода,
	|	Штрихкоды.Штрихкод,
	|	Штрихкоды.Владелец КАК Номенклатура,
	|	Штрихкоды.ЕдиницаИзмерения,
	|	Штрихкоды.ХарактеристикаНоменклатуры КАК Характеристика,
	|	Штрихкоды.СерияНоменклатуры КАК Серия,
	|	Штрихкоды.Качество,
	|ВЫБОР КОГДА Цены.Цена ЕСТЬ NULL 
	|	   ИЛИ Цены.Цена = 0 ТОГДА 0
	|	ИНАЧЕ
	|		Цены.Цена
	|КОНЕЦ КАК Цена,
	|	Цены.ЕдиницаИзмерения КАК ЦеныЕдиница,
	|	Цены.Валюта           КАК Валюта,
	|	Цены.ТипЦен           КАК ТипЦен,";
	Если ТипЦены.Рассчитывается Тогда
		Текст = Текст + "
		|	Цены.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,";
	КонецЕсли;
	Текст = Текст + "
	|	1                     КАК Количество
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|		Рег.Номенклатура.Ссылка           КАК Номенклатура,
	|		Рег.ХарактеристикаНоменклатуры    КАК ХарактеристикаНоменклатуры,
	|		Рег.ТипЦен.Ссылка                 КАК ТипЦен,
	|		Рег.Цена                          КАК Цена,
	|		Рег.ЕдиницаИзмерения              КАК ЕдиницаИзмерения,
	|		Рег.Валюта                        КАК Валюта";
	Если ТипЦены.Рассчитывается Тогда
		Текст = Текст + ",
		               |		ВЫБОР КОГДА ВложенныйЗапрос.ПроцентСкидкиНаценки = 0
		               |			ИЛИ ВложенныйЗапрос.ПроцентСкидкиНаценки ЕСТЬ NULL
		               |		ТОГДА
		               |			0
		               |		ИНАЧЕ
		               |			ВложенныйЗапрос.ПроцентСкидкиНаценки
		               |		КОНЕЦ КАК ПроцентСкидкиНаценки
		               |";
	КонецЕсли;
	Текст = Текст + "
	|	ИЗ
	|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, ТипЦен = (&ТипЦены)) КАК Рег";
	Если ТипЦены.Рассчитывается Тогда
		Текст = Текст + "
		               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			ЦеныНоменклатурыСрезПоследних.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		               |			ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		               |			ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		               |		ИЗ
		               |			РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
		               |		
		               |		ГДЕ
		               |			ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦенРасчетный) КАК ВложенныйЗапрос
		               |		ПО Рег.Номенклатура = ВложенныйЗапрос.Номенклатура И Рег.ХарактеристикаНоменклатуры = ВложенныйЗапрос.ХарактеристикаНоменклатуры
		               |";
	КонецЕсли;

	Текст = Текст + "
	|	) КАК Цены
	|	 ПО(Штрихкоды.Владелец               = Цены.Номенклатура)
	|	 И (Штрихкоды.ХарактеристикаНоменклатуры = Цены.ХарактеристикаНоменклатуры)
	|
	|ГДЕ
	|	Штрихкоды.Владелец.ЭтоГруппа <> &ЭтоГруппа";
	Если НЕ ЗначениеНеЗаполнено(ТипШтрихкода) Тогда
		Текст = Текст+" И
		|	Штрихкоды.ТипШтрихкода = &ТипШтрихкода";
	Иначе
		Текст = Текст+" И
		|	Штрихкоды.ТипШтрихкода В (&ТипыШтрихкода)";
	КонецЕсли;
	Если НЕ ЗначениеНеЗаполнено(ЭлементыФормы.Номенклатура.Значение) Тогда
		Текст = Текст+" И
		|	Штрихкоды.Владелец ";
		Если ПолеВидаСравненияНоменклатура = ВидСравнения.Равно Тогда
			Текст = Текст+"=";
		ИначеЕсли ПолеВидаСравненияНоменклатура = ВидСравнения.НеРавно Тогда
			Текст = Текст+"<>";
		ИначеЕсли ПолеВидаСравненияНоменклатура = ВидСравнения.ВСписке Тогда
			Текст = Текст+"В";
		ИначеЕсли ПолеВидаСравненияНоменклатура = ВидСравнения.НеВСписке Тогда
			Текст = Текст+"НЕ В";
		ИначеЕсли ПолеВидаСравненияНоменклатура = ВидСравнения.ВИерархии Тогда
			Текст = Текст+"В ИЕРАРХИИ";
		ИначеЕсли ПолеВидаСравненияНоменклатура = ВидСравнения.НеВИерархии Тогда
			Текст = Текст+"НЕ В ИЕРАРХИИ";
		КонецЕсли;
		Текст = Текст+" (&Владелец)";
	КонецЕсли;
	Если НЕ ЗначениеНеЗаполнено(Единица) Тогда
		Текст = Текст+" И
		|	Штрихкоды.ЕдиницаИзмерения.ЕдиницаПоКлассификатору = &ЕдиницаПоКлассификатору";
	КонецЕсли;
	Если Характеристики Тогда
		Текст = Текст+" И
		|	Штрихкоды.ХарактеристикаНоменклатуры";
		Если Не ХарактеристикиЗаполненные Тогда
			Текст = Текст+" = ";
		Иначе
			Текст = Текст+" <> ";
		КонецЕсли;
		Текст = Текст+"&ПустаяХарактеристика";
	КонецЕсли;
	Если Серии Тогда
		Текст = Текст+" И
		|	Штрихкоды.СерияНоменклатуры";
		Если Не СерииЗаполненные Тогда
			Текст = Текст+" = ";
		Иначе
			Текст = Текст+" <> ";
		КонецЕсли;
		Текст = Текст+"&ПустаяСерия";
	КонецЕсли;
	Если НЕ ЗначениеНеЗаполнено(Качество) Тогда
		Текст = Текст+" И
		|	Штрихкоды.Качество = &Качество";
	КонецЕсли;
	Текст = Текст+"
	|УПОРЯДОЧИТЬ ПО
	|	Владелец
	|АВТОУПОРЯДОЧИВАНИЕ";
	ЗапросШтрихкоды.Текст = Текст;
	Товары                = ЗапросШтрихкоды.Выполнить().Выгрузить();
	Если Не ЗначениеНеЗаполнено(ТипЦены) Тогда
		Если ТипЦены.Рассчитывается Тогда
			ВалютаРассчетная = ТипЦены.ВалютаЦены;
		КонецЕсли;
	КонецЕсли;
	Курс = Неопределено;
	Кратность = Неопределено;
	Для Каждого СтрокаТовара ИЗ Товары Цикл
		Если Не ЗначениеНеЗаполнено(ТипЦены) Тогда
			Если Не ЗначениеНеЗаполнено(СтрокаТовара.Цена) Тогда
				Если ТипЦены.Рассчитывается Тогда
					ВалютаТекущая    = СтрокаТовара.Валюта;
					ПолученнаяЦена       = ПересчитатьЦенуПриИзмененииВалюты(СтрокаТовара.Цена, ВалютаТекущая, ВалютаРассчетная, Курс, Кратность, ТекущаяДата());
					ПроцентСкидкиНаценки = ? (ЗначениеНеЗаполнено(СтрокаТовара.ПроцентСкидкиНаценки),
					                          ПроцентСкидкиНаценки, СтрокаТовара.ПроцентСкидкиНаценки);
					ПолученнаяЦена = ПолученнаяЦена * (1 + ПроцентСкидкиНаценки / 100);
					
				Иначе
					ПолученнаяЦена       = СтрокаТовара.Цена;
				КонецЕсли;

				ПолученнаяЦена = ОкруглитьЦену(ПолученнаяЦена, ТипЦены.ПорядокОкругления, ТипЦены.ОкруглятьВБольшуюСторону);

				СтрокаТовара.Цена = ПолученнаяЦена;
				Если ТипЦены.Рассчитывается Тогда
					СтрокаТовара.Валюта = ВалютаРассчетная;
				КонецЕсли;

				Если НЕ ВВалютахЦен
					И Валюта <> СтрокаТовара.Валюта Тогда
					ПолученнаяЦена       = ПересчитатьЦенуПриИзмененииВалюты(СтрокаТовара.Цена, СтрокаТовара.Валюта, Валюта, 0, 1, ТекущаяДата());
					СтрокаТовара.Цена    = ПолученнаяЦена;
					СтрокаТовара.Валюта  = Валюта;
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если Товары.Количество() = 0 тогда
		Предупреждение("По выбранным условиям отбора не найдено ни одного товара со штрих-кодом.");
	КонецЕсли;

КонецПроцедуры

// Процедура печати этикеток
//
// Параметры: 
//  ТаблицаТоваров     - Таблица значений, содержащая информацию о печатаемых этикетках.
//
Процедура Печать(ТаблицаТоваров) Экспорт

	КолвоПереданныхТоваров = ТаблицаТоваров.Количество();

	Если КолвоПереданныхТоваров = 0 Тогда
		Предупреждение("В списке нет ни одного товара со штрих-кодом, заполните список товаров,"
		               + Символы.ПС + "для которых надо распечатать этикетки. ");
		Возврат;
	КонецЕсли;

	ПечататьБезЦены        = Ложь;
	Если ПечататьЦену Тогда
		Для Каждого СтрокаИзСписка Из ТаблицаТоваров Цикл
			Если СтрокаИзСписка.Цена = 0 И СтрокаИзСписка.Количество > 0 Тогда
				Ответ = Вопрос("У некоторых товаров не указаны цены! Печатать этикетки для этих товаров?",
				               РежимДиалогаВопрос.ДаНетОтмена);
				Если Ответ = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
					ПечататьБезЦены = Истина;
				ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
					ПечататьБезЦены = Ложь;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТекКолонка = 1;
	ТекСтрока  = 1;

	Таб                     = Новый ТабличныйДокумент;
	Таб.ИмяПараметровПечати = 	"ПАРАМЕТРЫ_ПЕЧАТИ_Этикетка"+СокрЛП(ИмяКомпьютера());
	Макет                   = ПолучитьОбщийМакет("Этикетка");
	ЭтикеткаОбласть         = Макет.ПолучитьОбласть(1,1,4,2);
	ОбластьНоменклатура     = ЭтикеткаОбласть.Области.Номенклатура;
	ОбластьШтрихкод         = ЭтикеткаОбласть.Области.ОбластьШтрихкод;
	РисунокШтрихкод         = ЭтикеткаОбласть.Рисунки.Штрихкод;
	ОбластьЦена             = ЭтикеткаОбласть.Области.Цена;

	ОбластьНоменклатура.ВысотаСтроки = ВысотаЭтикетки * 2.65 * 0.3;
	ОбластьШтрихкод.ВысотаСтроки     = ВысотаЭтикетки * 2.65 * 0.5;
	РисунокШтрихкод.Расположить(ОбластьШтрихкод);
	ОбластьЦена.ВысотаСтроки         = ВысотаЭтикетки * 2.65 * 0.2;

	ЭтикеткаОбласть.Область(2,2,2,2).ШиринаКолонки = ШиринаЭтикетки*0.53;

	Если ФорматЭтикетки  = 1 Тогда //принтер этикеток.
		ВсегоСтрок       = 1;
		КоличествоКолонок=1;
	ИначеЕсли ФорматЭтикетки = 2 Тогда //А4 по колонкам.

		ОбластьГраницаСправа      = Макет.ПолучитьОбласть(2,4,4,4);
		ОбластьНизГраницыСправа   = Макет.ПолучитьОбласть(5,4,5,4);
		ОбластьГраницаСнизу       = Макет.ПолучитьОбласть(6,2,6,2);
		ОбластьНачалоГраницыСнизу = Макет.ПолучитьОбласть(6,1,6,1);

		ОбластьГраницаСправа.Рисунки.ГраницаСправа.Высота = ВысотаЭтикетки*1.09;
		ОбластьГраницаСнизу.Рисунки.ГраницаСнизу.Ширина   = ШиринаЭтикетки;

		ОбластьГраницаСправа.Область(1,1,1,1).ВысотаСтроки = ВысотаЭтикетки*2.65;
		ОбластьГраницаСнизу.Область(1,1,1,1).ШиринаКолонки = ШиринаЭтикетки*0.53;

		ВсегоСтрок        = 19;
		КоличествоКолонок = 5;
	КонецЕсли;

	ВсегоКолонок = КоличествоКолонок;
	Если ВсегоКолонок > 1 Тогда
		ВсегоКолонок = ВсегоКолонок+ВсегоКолонок - 1; //добавляем разделители колонок.
	КонецЕсли;

	ВывелиХотяБыОдинШтрихКод = Ложь;
	Для Каждого СтрокаИзСписка Из ТаблицаТоваров Цикл
		Если ПечататьЦену И СтрокаИзСписка.Цена = 0
		   И Не ПечататьБезЦены Тогда
			Продолжить;
		КонецЕсли;
		Если ПроверитьШтрихКод(СтрокаИзСписка.ШтрихКод,СтрокаИзСписка.ТипШтрихкода) Тогда
			ЭтикеткаОбласть.Рисунки.Штрихкод.Объект.Сообщение = СтрокаИзСписка.ШтрихКод;
			ОбластьНоменклатура.Текст        = "" + СтрокаИзСписка.Номенклатура;
			Если ПечататьЦену Тогда
				ТекстЦена = "Цена: ";
				Если СтрокаИзСписка.Цена > 0 Тогда
					ТекстЦена =ТекстЦена + Окр((СтрокаИзСписка.Цена/СтрокаИзСписка.ЦеныЕдиница.Коэффициент)*
												СтрокаИзСписка.ЕдиницаИзмерения.Коэффициент,2);
				КонецЕсли;
				ОбластьЦена.Текст = Формат(ТекстЦена, "ЧЦ = 15; ЧДЦ = 2")+СтрокаИзСписка.Валюта+" за "+
				                                     СтрокаИзСписка.ЕдиницаИзмерения;
			КонецЕсли;
			Для Копий =1 По СтрокаИзСписка.Количество Цикл
				Если ТекКолонка>ВсегоКолонок Тогда //новая строка.
					Если ВсегоСтрок<>1 Тогда //выведем разделитель.
						Для Сч = 1 по ВсегоКолонок Цикл
							Если Сч = 1 Тогда
								Таб.Вывести(ОбластьНачалоГраницыСнизу);
							Иначе
								Таб.Присоединить(ОбластьНачалоГраницыСнизу);
							КонецЕсли;
							Таб.Присоединить(ОбластьГраницаСнизу);
							Таб.Присоединить(ОбластьНизГраницыСправа);
							Сч = Сч + 1;
						КонецЦикла;
						ТекСтрока = ТекСтрока + 1;
					КонецЕсли;
					Если ТекСтрока/ВсегоСтрок = Цел(ТекСтрока/ВсегоСтрок) Тогда
						Таб.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					ТекСтрока = ТекСтрока + 1;
					ТекКолонка=1;
				КонецЕсли;
				Если ТекКолонка<>1 Тогда //выведем разделитель.
					Таб.Присоединить(ОбластьГраницаСправа);
					ТекКолонка = ТекКолонка + 1;
					Таб.Присоединить(ЭтикеткаОбласть);
					ТекКолонка = ТекКолонка + 1;
				Иначе
					Таб.Вывести(ЭтикеткаОбласть);
					//Таб.Показать();
					ТекКолонка = ТекКолонка + 1;
				КонецЕсли;

				ВывелиХотяБыОдинШтрихКод = Истина;
			КонецЦикла;
		Иначе
			ТекстСообщения = "У товара """ + СтрокаИзСписка.Номенклатура + """ штрих-код не задан или имеет неверный формат!";
			Если КолвоПереданныхТоваров = 1 Тогда
				Предупреждение(ТекстСообщения);
			Иначе
				Сообщить(ТекстСообщения,СтатусСообщения.БезСтатуса);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ВывелиХотяБыОдинШтрихКод Тогда
		Если СразуНаПринтер Тогда
			Таб.Напечатать();
		Иначе
			Таб.Защита              = Ложь;
			Таб.ТолькоПросмотр      = Истина;
			Таб.ОтображатьСетку     = Ложь;
			Таб.ОтображатьЗаголовки = Ложь;
			Таб.Показать("Этикетка");
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПечатьЭтикеток()

// Процедура управления доступностью элементов
//
Процедура ДоступностьЭлементов();
	Если Характеристики Тогда
		ЭлементыФормы.ХарактеристикиЗаполненные.Доступность = Истина;
		ЭлементыФормы.ХарактеристикиНеЗаполненные.Доступность = Истина;
	Иначе
		ЭлементыФормы.ХарактеристикиЗаполненные.Доступность = Ложь;
		ЭлементыФормы.ХарактеристикиНеЗаполненные.Доступность = Ложь;
	КонецЕсли;
	Если Серии Тогда
		ЭлементыФормы.СерииЗаполненные.Доступность = Истина;
		ЭлементыФормы.СерииНеЗаполненные.Доступность = Истина;
	Иначе
		ЭлементыФормы.СерииЗаполненные.Доступность = Ложь;
		ЭлементыФормы.СерииНеЗаполненные.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события "ПередОткрытием"формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	СписокВыбора  = Новый СписокЗначений;
	СписокВыбора.Добавить(ВидСравнения.Равно);
	СписокВыбора.Добавить(ВидСравнения.НеРавно);
	СписокВыбора.Добавить(ВидСравнения.ВСписке);
	СписокВыбора.Добавить(ВидСравнения.НеВСписке);
	СписокВыбора.Добавить(ВидСравнения.ВИерархии);
	СписокВыбора.Добавить(ВидСравнения.НеВИерархии);
	
	ЭлементыФормы.ПолеВидаСравненияНоменклатура.СписокВыбора = СписокВыбора;
	ЭлементыФормы.Номенклатура.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ЭлементыФормы.ПолеВидаСравненияНоменклатура.Значение     = ВидСравнения.ВИерархии;
	ПолеВидаСравненияНоменклатураПриИзменении(ЭлементыФормы.ПолеВидаСравненияНоменклатура);
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если мВнешняяТаблицаТоваров = Неопределено Тогда
		мВнешняяТаблицаТоваров = Новый ТаблицаЗначений;
	КонецЕсли;

	ЭлементыФормы.ТипШтрихкода.СписокВыбора.Добавить(ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13);
	ЭлементыФормы.ТипШтрихкода.СписокВыбора.Добавить(ПланыВидовХарактеристик.ТипыШтрихкодов.EAN8);

	ЭлементыФормы.ФорматЭтикетки.СписокВыбора.Добавить(1,"Принтер этикеток");
	ЭлементыФормы.ФорматЭтикетки.СписокВыбора.Добавить(2,"А4");
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПринтерЭтикеток") = Истина Тогда
		ФорматЭтикетки = 1;
		ВысотаЭтикетки = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПринтерЭтикетокВысота");
		ШиринаЭтикетки = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПринтерЭтикетокШирина");
	Иначе
		ФорматЭтикетки = 2;
		ШиринаЭтикетки = 38;
		ВысотаЭтикетки = 20;
		ЭлементыФормы.ШиринаЭтикетки.Доступность = Ложь;
		ЭлементыФормы.ВысотаЭтикетки.Доступность = Ложь;
	КонецЕсли;
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПечататьЦену")   = Истина Тогда
		ПечататьЦену = Истина;
	КонецЕсли;
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "СразуНаПринтер") = Истина Тогда
		СразуНаПринтер = Истина;
	КонецЕсли;
	Если НЕ ВВалютахЦен И ЗначениеНеЗаполнено(Валюта) Тогда
		ВВалютахЦен = Истина;
	КонецЕсли;
	Если мВнешняяТаблицаТоваров.Количество()>0 Тогда
		Товары = мВнешняяТаблицаТоваров;
	ИначеЕсли НЕ ЗначениеНеЗаполнено(мВнешнийЭлементНоменклатуры) Тогда
		ЭлементыФормы.Номенклатура.Значение = мВнешнийЭлементНоменклатуры;
		Заполнить();
	КонецЕсли;
	ДоступностьЭлементов();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы
//
Процедура КоманднаяПанельФормыПечатать(Кнопка)
	Печать(Товары);
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели формы
// Заполняет табличную часть информацией из регистра "Штрихкоды" с указанными
// условиями отбора.
//
Процедура КоманднаяПанельФормыЗаполнить(Элемент)

	Заполнить();

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Отбор" командной панели формы
//
Процедура КоманднаяПанельФормыОтбор(Кнопка)

	Если НЕ ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх Тогда
		ЭлементыФормы.ПанельОтбор.Свертка     = РежимСверткиЭлементаУправления.Верх;
	Иначе
		ЭлементыФормы.ПанельОтбор.Свертка     = РежимСверткиЭлементаУправления.Нет;
	КонецЕсли;
	
	УправлениеПометкамиКнопокКоманднойПанели();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля выбора формата этикетки.
//
Процедура ФорматЭтикеткиПриИзменении(Элемент)
	Если Элемент.Значение = 2 Тогда
		ШиринаЭтикетки = 38;
		ВысотаЭтикетки = 20;
		ЭлементыФормы.ШиринаЭтикетки.Доступность = Ложь;
		ЭлементыФормы.ВысотаЭтикетки.Доступность = Ложь;
	Иначе
		ЭлементыФормы.ШиринаЭтикетки.Доступность = Истина;
		ЭлементыФормы.ВысотаЭтикетки.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "КоличествоКопий" формы
//
Процедура КоличествоКопийНажатие(Элемент)

	Количество = 1;
	ВвестиЧисло(Количество, "Введите количество копий для всех этикеток.");
	Товары.ЗаполнитьЗначения(Количество,"Количество");

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ПолеВидаСравненияНоменклатура".
//
Процедура ПолеВидаСравненияНоменклатураПриИзменении(Элемент)

	Если Элемент.Значение = ВидСравнения.ВСписке
	 ИЛИ Элемент.Значение = ВидСравнения.НеВСписке Тогда
		Значение = Неопределено;
		Если ЭлементыФормы.Номенклатура.ТипЗначения <> Новый ОписаниеТипов("СписокЗначений")Тогда
			Значение = ЭлементыФормы.Номенклатура.Значение;
			ЭлементыФормы.Номенклатура.ТипЗначения = Новый ОписаниеТипов("СписокЗначений");
			ЭлементыФормы.Номенклатура.ТипЗначенияСписка = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
		КонецЕсли;

		Если Не ЗначениеНеЗаполнено(Значение) Тогда
			ЭлементыФормы.Номенклатура.Значение.Добавить(Значение);
		КонецЕсли;

	ИначеЕсли Элемент.Значение = ВидСравнения.Равно
	      ИЛИ Элемент.Значение = ВидСравнения.ВИерархии
	      ИЛИ Элемент.Значение = ВидСравнения.НеРавно
	      ИЛИ Элемент.Значение = ВидСравнения.НеВИерархии
		  Тогда
		Значение = Неопределено;
		Если ЭлементыФормы.Номенклатура.ТипЗначения = Новый ОписаниеТипов("СписокЗначений")Тогда
			Если ЭлементыФормы.Номенклатура.Значение.Количество()>0 Тогда
				Значение = ЭлементыФормы.Номенклатура.Значение[0].Значение;
				ЭлементыФормы.Номенклатура.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеНеЗаполнено(Значение) Тогда
			ЭлементыФормы.Номенклатура.Значение = Значение;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ПечататьЦену".
//
Процедура ПечататьЦенуПриИзменении(Элемент)
	Если Элемент.Значение Тогда
		Если ЗначениеНеЗаполнено(ТипЦены) Тогда
			ФормаТипаЦены = Справочники.ТипыЦенНоменклатуры.ПолучитьФормуВыбора("ФормаВыбора",ЭлементыФормы.ТипЦены);
			ФормаТипаЦены.ЗакрыватьПриВыборе = Истина;
			ФормаТипаЦены.ОткрытьМодально();
			Если ЗначениеНеЗаполнено(ТипЦены) Тогда
				Сообщить("Тип цены не выбран!");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ТипЦены".
//
Процедура ТипЦеныПриИзменении(Элемент)

	Если ЗначениеНеЗаполнено(Элемент.Значение) Тогда
		ПечататьЦену = Ложь;
	КонецЕсли;
	Заполнить();

КонецПроцедуры

// Процедура - обработчик события "Очистка" поля "ТипЦены".
//
Процедура ТипЦеныОчистка(Элемент, СтандартнаяОбработка)
	ПечататьЦену = Ложь;
	Заполнить();
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "Характеристики".
//
Процедура ХарактеристикиПриИзменении(Элемент)
	ДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "Серии".
//
Процедура СерииПриИзменении(Элемент)
	ДоступностьЭлементов();
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ПереключательВВалютахЦен".
//
Процедура ПереключательВВалютахЦенПриИзменении(Элемент)
	
	Если Элемент.Значение Тогда
		ЭлементыФормы.Валюта.Доступность = Ложь;
		Заполнить();
	Иначе
		ЭлементыФормы.Валюта.Доступность = Истина;
		Если НЕ ЗначениеНеЗаполнено(Валюта) Тогда
			Заполнить();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "Валюта".
//
Процедура ВалютаПриИзменении(Элемент)
	Заполнить();
КонецПроцедуры
