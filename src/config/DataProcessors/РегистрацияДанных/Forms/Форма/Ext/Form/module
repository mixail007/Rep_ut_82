// Текущий объект описания метаданного ПланОбмена
Перем ТекущийПланОбмена;

// Список выбора способа регистрации
Перем СписокВыбораСпособаРегистрации;

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура-обработчик действия кнопки командной панели
//
Процедура КнопкаВыполнитьНажатие(Элемент)

    // Если план обмена не выбран, то и не для кого выполнять регистрацию
    Если ТекущийПланОбмена = Неопределено Тогда
        
        Возврат;
        
    КонецЕсли;
    
    // Получаем список узлов для которых необходимо произвести регистрацию
    Узлы = Новый Массив;
    Для каждого Стр ИЗ СписокУзлов Цикл
		
		Если Стр.Регистрация Тогда
		
	        Узлы.Добавить(Стр.Узел);
		
		КонецЕсли; 
        
    КонецЦикла;
    
    // Если узлов не выбрано, то и не для кого выполнять регистрацию
    Если Узлы.Количество() = 0 Тогда
        
        Возврат;
        
    КонецЕсли;
    
    // вызываем процедуру регистрации ихменений выбранных объектов
    ЗарегистрироватьИзменения(ТекущийПланОбмена, Узлы, ЭлементыФормы.СоставОбмена.Значение);
    
КонецПроцедуры  // КнопкаВыполнитьНажатие(Элемент)

// Процедура-обработчик события ОбработкаВыбора поля выбора ПланОбмена
//
Процедура ПланОбменаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
    
	Если ВыбранноеЗначение <> Неопределено Тогда
        
        ТекущийПланОбмена = Метаданные.ПланыОбмена[ВыбранноеЗначение.Имя];
		
		СписокУзлов.Очистить();
        // формируем список узлов плана обмена
		ЭтотУзел = ПланыОбмена[ТекущийПланОбмена.Имя].ЭтотУзел();
		Выборка = ПланыОбмена[ТекущийПланОбмена.Имя].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Ссылка = ЭтотУзел Тогда
			
				Продолжить;
			
			КонецЕсли; 
			
			НовыйУзел = СписокУзлов.Добавить();
			НовыйУзел.Узел = Выборка.Ссылка;
		
		КонецЦикла; 
		
        // формируем состав обмена
		СоставОбмена = ЗаполнитьСоставОбмена(ТекущийПланОбмена);
        ЭлементыФормы.СоставОбмена.СоздатьКолонки();
        ЭлементыФормы.СоставОбмена.Колонки.ОбъектМетаданных.ТолькоПросмотр = Истина;
        
        КолонкаРегистрации = ЭлементыФормы.СоставОбмена.Колонки.Регистрация;
        КолонкаРегистрации.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;

        Редактор = КолонкаРегистрации.ЭлементУправления;
        Редактор.РежимВыбораИзСписка = Истина;
        Редактор.СписокВыбора = СписокВыбораСпособаРегистрации;
        
        ЭлементыФормы.СоставОбмена.Колонки.Удалить(ЭлементыФормы.СоставОбмена.Колонки.Количество() - 1);
        
	Иначе
        
        ТекущийПланОбмена = Неопределено;
        // очищаем список узлов палана обмена
		ЭлементыФормы.СписокУзлов.ТипЗначения = Новый ОписаниеТипов("ТаблицаЗначений");
		ЭлементыФормы.СписокУзлов.Колонки.Очистить();
        
        // очищаем состав плана обмена
        СоставОбмена.Очистить();
		
	КонецЕсли;
    
КонецПроцедуры  // ПланОбменаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

// Процедура-обработчик события ПриВыводеСтроки поля выбора СоставОбмена
//
Процедура СоставОбменаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
    
    ВидОбъекта = ВидОбъектаМетаданныхОбмена(ДанныеСтроки.ЭлементСостава.Метаданные);
    // устанавливаем картинку для объекта метаданных
    Если ВидОбъекта <> "" И ВидОбъекта <> "Перерасчет" Тогда
        
        ОформлениеСтроки.Ячейки.ОбъектМетаданных.УстановитьКартинку(БиблиотекаКартинок[ВидОбъекта]);
        
    КонецЕсли;
    
    // Устанвливаем текст в ячейку способа регистрации
    Текст = "";
    Если ДанныеСтроки.Регистрация = РегистрацияИзменений_НеРегистрировать Тогда
        
        Текст = "Не регистрировать";
        
    ИначеЕсли ДанныеСтроки.Регистрация = РегистрацияИзменений_ВызовМетода Тогда
        
        Текст = "Вызов метода";

    ИначеЕсли ДанныеСтроки.Регистрация = РегистрацияИзменений_ЗаписьЭлемента Тогда
        
        Текст = "Запись элемента";
        
    КонецЕсли;
    
    ОформлениеСтроки.Ячейки.Регистрация.УстановитьТекст(Текст);
    
КонецПроцедуры  // СоставОбменаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

// Процедура обработчик события Нажатие для элемента формы УстановитьДляВсех
//
Процедура УстановитьДляВсехНажатие(Элемент)
    
    Для каждого Стр из СоставОбмена Цикл
        
        Стр.Регистрация = ЭлементыФормы.СпособРегистрации.Значение;
        
    КонецЦикла;
    
КонецПроцедуры  // УстановитьДляВсехНажатие(Элемент)

// Процедура обработчик действия НеРегистрировать для элемента формы УстановитьДляВсех
//
Процедура НеРегистрировать(Кнопка)
	
    Для каждого Стр из СоставОбмена Цикл
        
        Стр.Регистрация = РегистрацияИзменений_НеРегистрировать;
        
    КонецЦикла;
	
КонецПроцедуры	// НеРегистрировать(Кнопка)

// Процедура обработчик действия ВызовМетода для элемента формы УстановитьДляВсех
//
Процедура ВызовМетода(Кнопка)
	
    Для каждого Стр из СоставОбмена Цикл
        
        Стр.Регистрация = РегистрацияИзменений_ВызовМетода;
        
    КонецЦикла;
	
КонецПроцедуры	// ВызовМетода(Кнопка)

// Процедура обработчик действия ЗаписьОбъекта для элемента формы УстановитьДляВсех
//
Процедура ЗаписьЭлемента(Кнопка)
	
    Для каждого Стр из СоставОбмена Цикл
        
        Стр.Регистрация = РегистрацияИзменений_ЗаписьЭлемента;
        
    КонецЦикла;
	
КонецПроцедуры	// ЗаписьОбъекта(Кнопка)

///////////////////////////////////////////////////////////////////////////////
// Инициализация данных формы

ТекущийПланОбмена = Неопределено;

// Наполняем список планов обмена
Список = ЭлементыФормы.ПланОбмена.СписокВыбора;
Для каждого План из Метаданные.ПланыОбмена Цикл
    
    // В список добавляем объекты описания метаданного, соответствующие планам обмена
    Список.Добавить(План);
    
КонецЦикла;
Список = Неопределено;

// Заполняем список способов регистрации
СписокВыбораСпособаРегистрации = Новый СписокЗначений;
СписокВыбораСпособаРегистрации.Добавить(РегистрацияИзменений_НеРегистрировать, "Не регистрировать");
СписокВыбораСпособаРегистрации.Добавить(РегистрацияИзменений_ВызовМетода, "Вызов метода");
СписокВыбораСпособаРегистрации.Добавить(РегистрацияИзменений_ЗаписьЭлемента, "Запись элемента данных");