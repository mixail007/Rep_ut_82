////////////////////////////////////////////////////////////////////////////////
// ОСНОВНАЯ ПРОЦЕДУРА ОБРАБОТКИ
Функция ПолучитьГраницуПоследовательности(Организация = Неопределено) Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПартионныйУчетГраницы.МоментВремени
	|ИЗ
	|	Последовательность.ПартионныйУчет.Границы КАК ПартионныйУчетГраницы
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат  Выборка.МоментВремени;
	Иначе
		Возврат Новый МоментВремени('00010101');
	КонецЕсли;

КонецФункции // ПолучитьГраницуПостедовательности(Задача)

Процедура ВыполнитьВосстановление() Экспорт

	// Константа, определяющая количество выбираемых строк в выборках
	
	//1 "порция" для 1 транзакции - 1000 строк товаров может доходить до 1000 документов?!
	КоличествоСтрокЗаПроход = 1000;
   	
	// Будем обрабатывать документы с минимальной из границ
	Запрос = Новый Запрос;
	Текст = 
	//"ВЫБРАТЬ ПЕРВЫЕ 1 * ИЗ
	"ВЫБРАТЬ  * ИЗ
	|( ";
	ТекстВложенногоЗапроса=  "";
	Если Не ПустаяСтрока(ТекстВложенногоЗапроса) Тогда
		ТекстВложенногоЗапроса = ТекстВложенногоЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ ";
	КонецЕсли;
	
	ТекстВложенногоЗапроса = ТекстВложенногоЗапроса + "
	|ВЫБРАТЬ
	|	ПартионныйУчетГраницы.МоментВремени КАК МоментВремени
	|ИЗ
	|	Последовательность.ПартионныйУчет.Границы КАК ПартионныйУчетГраницы
	|";
	
	Текст = Текст + ТекстВложенногоЗапроса + "
	|) ВложенныйЗапрос
	|УПОРЯДОЧИТЬ ПО МоментВремени ВОЗР";
	
	Запрос.Текст = Текст;
	
	ВыборкаГраниц = Запрос.Выполнить().Выбрать();
	Если ВыборкаГраниц.Следующий() Тогда
		ГПт = ВыборкаГраниц.МоментВремени;
	Иначе
		ГПт = Новый МоментВремени('00010101');
	КонецЕсли;
	
		Пока ВыборкаГраниц.Следующий() цикл
		Если ВыборкаГраниц.МоментВремени.Дата< Дата("20170302000000") тогда
			продолжить;
		иначе	
		ГПт = ВыборкаГраниц.МоментВремени;
		прервать;
		конецЕсли;	
	
	
	конецЦикла;

	
	
	// Восстанавливаем обе последовательности, последовательно проводя документы
	ЕстьДокументы = Истина;
	
	ПоследнийОбработанныйДокумент = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	
	ОбработаноСтрок = 0; ОбработаноДокументов = 0;
	
	НачатьТранзакцию(); //----------------------------------------------------------------------------------------
	#Если Клиент Тогда
		Состояние("Начало транзакции");
		Сообщить( строка(ТекущаяДата())+" - начало выполнения обработки ""Проведение по партиям"".");
		ПараметрыСеанса.ПроведениеПоПартиямОшибкиРеглЗадания = ПараметрыСеанса.ПроведениеПоПартиямОшибкиРеглЗадания + Символы.ПС + " Начало транзакции.";
	#Иначе
		ПараметрыСеанса.ПроведениеПоПартиямОшибкиРеглЗадания = ПараметрыСеанса.ПроведениеПоПартиямОшибкиРеглЗадания + Символы.ПС + " Начало транзакции.";
	#КонецЕсли
	
	Пока ЕстьДокументы Цикл
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			Состояние("Выборка документов для проведения.");
			ПараметрыСеанса.ПроведениеПоПартиямОшибкиРеглЗадания = ПараметрыСеанса.ПроведениеПоПартиямОшибкиРеглЗадания + Символы.ПС + " Выборка документов для проведения.";
		#Иначе
			ПараметрыСеанса.ПроведениеПоПартиямОшибкиРеглЗадания = ПараметрыСеанса.ПроведениеПоПартиямОшибкиРеглЗадания + Символы.ПС + " Выборка документов для проведения.";
		#КонецЕсли
		
		СписокДокументов = ПолучитьСписокДокументов(ПоследнийОбработанныйДокумент, ГПт.Дата, ГПт.Ссылка, КонецДня(ДатаКонцаОбработки));
	//	СписокДокументов = ПолучитьСписокДокументов(ПоследнийОбработанныйДокумент, ГПт.Дата, ГПт.Ссылка, ДобавитьМесяц(ГПт.Дата,4));
		ЕстьДокументы = Ложь;
		
		НаборЗаписейРегистрации = Последовательности.ПартионныйУчет.СоздатьНаборЗаписей();
		N = СписокДокументов.Количество(); 
		Для каждого Строка Из СписокДокументов Цикл
			
			Документ = Строка.Ссылка;
			
			#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
				Состояние("Обрабатывается документ: "+строка(Документ));
			#КонецЕсли	
			
			ЕстьДокументы = Истина;
			
			// Через параметр получим количество обработанных строк
			КоличествоСтрокВДокументе = 0;
			
			
			// Проводим только по тем видам учета, которые указаны в документе
			Упр = Строка.ОтражатьВУправленческомУчете;
			
			Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗакрытиеЗаказовПокупателей") Тогда
				//  продолжить;

				////#Если Клиент Тогда
				////	Состояние("Проведение документа " + Документ);
				////#КонецЕсли
				//
				//ТаблицаСписания = ПолучитьТаблицуСтрокЗакрытиеЗаказовПокупателей(Документ);
				//Если ТаблицаСписания.Количество() <> 0 Тогда				
				//
				//	// Движение партий товаров по документу
				//	ДвижениеПартийТоваров(Документ, ТаблицаСписания, КоличествоСтрокВДокументе);
				//	
				//	//ДокументМоментВремени = Новый МоментВремени(Строка.Дата, Строка.Ссылка);
				//	//
				//	//// Установка границы на последний обработанный документ
				//	//НаборЗаписейРегистрации.Отбор.Регистратор.Установить(Строка.Ссылка);
				//	//ЗаписьРегистрации = НаборЗаписейРегистрации.Добавить();
				//	//ЗаписьРегистрации.Период = Строка.Дата;
				//	//НаборЗаписейРегистрации.Записать(Истина);
				//	//
				//	//// Если обработано, тогда устанавливаем границу обработки товаров на момент документа по соответсвующему учету
				//	//Последовательности.ПартионныйУчет.УстановитьГраницу(ДокументМоментВремени);
				//
				//КонецЕсли;
				//
			ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
				
					//#Если Клиент Тогда
					//	Состояние("Проведение документа " + Документ);
					//#КонецЕсли
					
					//***Федорова 
					// Таблица строк документов списания
					ТаблицаДокумента = ПолучитьТаблицуСтрокДокументов(Документ);
					
					Если ТаблицаДокумента.Количество() <> 0 Тогда
						
						для каждого стр1 из ТаблицаДокумента цикл
							скл = Документ.Товары[стр1.НомерСтроки-1].Склад;
							Если ЗначениеЗаполнено(Документ.ВнутреннийЗаказ) тогда
								стр1.Склад = ?(ЗначениеЗаполнено(скл), скл, Документ.СкладОтправитель);   // склад отправитель в таб.части
							иначе
								стр1.СкладПолучатель = ?(ЗначениеЗаполнено(скл), скл, Документ.СкладПолучатель);   // склад получатель в таб.части
							КонецЕсли;	
						КонецЦикла;	
						
						ДвижениеПартийТоваров(Документ, ТаблицаДокумента, КоличествоСтрокВДокументе);
						
					Иначе
						
						// Движение партий товаров по документу
						ДвижениеПартийТоваров(Документ, , КоличествоСтрокВДокументе);
						
					КонецЕсли;
					
					//ДокументМоментВремени = Новый МоментВремени(Строка.Дата, Строка.Ссылка);
					//
					//// Установка границы на последний обработанный документ
					//
					//НаборЗаписейРегистрации.Отбор.Регистратор.Установить(Строка.Ссылка);
					//ЗаписьРегистрации = НаборЗаписейРегистрации.Добавить();
					//ЗаписьРегистрации.Период = Строка.Дата;
					//НаборЗаписейРегистрации.Записать(Истина);
					//
					//Последовательности.ПартионныйУчет.УстановитьГраницу(ДокументМоментВремени);
				
			Иначе
				
					//#Если Клиент Тогда
					//	Состояние("Проведение документа " + Документ);
					//#КонецЕсли
					
					// Движение партий товаров по документу
					//+++ 27.04.2016 +++++++++++для АЭ - меняется подразделение в движениях ++++++++++++++++++++++++++++++
					Если ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
						и Документ.Дата >= '20180101' тогда
						// как в модуле реализации - Плотников
					//	Если Документ.Контрагент.КонтрагентДляРезерваИМ <> Справочники.Контрагенты.ПустаяСсылка() Тогда
							ТабДокумента = ПолучитьТаблицуСтрокДокументов(Документ);
							ТабДокумента.ЗаполнитьЗначения(Документ.ПодразделениеДохода, "Подразделение");
							ДвижениеПартийТоваров(Документ, ТабДокумента, КоличествоСтрокВДокументе);
						//Иначе  // как было
						//	ДвижениеПартийТоваров(Документ, , КоличествоСтрокВДокументе);
						//КонецЕсли;
					//	
					Иначе  // как было
						ДвижениеПартийТоваров(Документ, , КоличествоСтрокВДокументе);
					КонецЕсли;
					
					
					//ДокументМоментВремени = Новый МоментВремени(Строка.Дата, Строка.Ссылка);
					//
					//// Установка границы на последний обработанный документ
					//
					//НаборЗаписейРегистрации.Отбор.Регистратор.Установить(Строка.Ссылка);
					//ЗаписьРегистрации = НаборЗаписейРегистрации.Добавить();
					//ЗаписьРегистрации.Период = Строка.Дата;
					//НаборЗаписейРегистрации.Записать(Истина);
					//
					//Последовательности.ПартионныйУчет.УстановитьГраницу(ДокументМоментВремени);
					
			КонецЕсли;
			 			//#Если Клиент Тогда
			//Состояние();
			//#КонецЕсли
			
			ПоследнийОбработанныйДокумент = Документ;
			
			ОбработаноСтрок = ОбработаноСтрок + КоличествоСтрокВДокументе; //+++ 26.11.2014 - количество документов, а не строк в документе... 
			ОбработаноДокументов = ОбработаноДокументов + 1;
			
			// Фиксируем транзакции обработки КоличествоСтрокЗаПроход строк
			Если ОбработаноСтрок>=КоличествоСтрокЗаПроход Тогда
				
				#Если Клиент Тогда
					Состояние("Обработано "+строка(ОбработаноДокументов)+" документов. Фиксация транзакции на документе "+строка(ПоследнийОбработанныйДокумент));
				#КонецЕсли
				ОбработаноСтрок = 0;
				
				ЗафиксироватьТранзакцию();
				
				НачатьТранзакцию();
				
			КонецЕсли;
		
		КонецЦикла;			
	
	КонецЦикла;
	
	#Если Клиент Тогда
		Состояние("Фиксация транзакции "+строка(ПоследнийОбработанныйДокумент));
		ПараметрыСеанса.ПроведениеПоПартиямОшибкиРеглЗадания = ПараметрыСеанса.ПроведениеПоПартиямОшибкиРеглЗадания + Символы.ПС + " Фиксация транзакции.";
	#Иначе
		ПараметрыСеанса.ПроведениеПоПартиямОшибкиРеглЗадания = ПараметрыСеанса.ПроведениеПоПартиямОшибкиРеглЗадания + Символы.ПС + " Фиксация транзакции.";
	#КонецЕсли
	
	ЗафиксироватьТранзакцию();
	
	#Если Клиент Тогда
		Состояние(" ");
		Сообщить( строка(ТекущаяДата())+" - обработано "+ строка(ОбработаноДокументов)+" документов. Выполнение ""Проведения по партиям"" завершено.");
		ПараметрыСеанса.ПроведениеПоПартиямОшибкиРеглЗадания = ПараметрыСеанса.ПроведениеПоПартиямОшибкиРеглЗадания + Символы.ПС + " обработано " + строка(ОбработаноДокументов)+" документов. Выполнение ""Проведения по партиям"" завершено.";
	#Иначе
		ПараметрыСеанса.ПроведениеПоПартиямОшибкиРеглЗадания = ПараметрыСеанса.ПроведениеПоПартиямОшибкиРеглЗадания + Символы.ПС + " обработано " + строка(ОбработаноДокументов)+" документов. Выполнение ""Проведения по партиям"" завершено.";
	#КонецЕсли
	
	Если НЕ ПараметрыСеанса.ПроведениеПоПартиямДатаПервойОшибки = Дата(1,1,1) Тогда
		Последовательности.ПартионныйУчет.УстановитьГраницу(ПараметрыСеанса.ПроведениеПоПартиямДатаПервойОшибки-1);
	иначе
		ДокументМоментВремени = Новый МоментВремени(ПоследнийОбработанныйДокумент.Дата, ПоследнийОбработанныйДокумент.Ссылка);
       	Последовательности.ПартионныйУчет.УстановитьГраницу(ДокументМоментВремени);

	КонецЕсли;
	
КонецПроцедуры // ВыполнитьВосстановлениеПоследовательностей()

Функция ПолучитьТаблицуСтрокЗакрытиеЗаказовПокупателей(ДокументСписания)
	
	// Общая часть запроса
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСписания", ДокументСписания);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""ПолучитьТаблицуСтрокДокументов"" КАК QuieryId ";
	
	Ресурсы = Метаданные.РегистрыСведений.СписанныеТовары.Ресурсы;
	
	Для каждого Ресурс Из Ресурсы Цикл
		
		Запрос.Текст = 	Запрос.Текст + ",
		|	"+ Ресурс.Имя;
		
	КонецЦикла; 
	
	Запрос.Текст = 	Запрос.Текст + ",
	|	Регистратор,
	|	Период,
	|	НомерСтроки
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК Строки
	|
	|ГДЕ
	|	1=1
	|";
	
	
	Запрос.Текст = Запрос.Текст+ "
		|	И Строки.Регистратор = &ДокументСписания";
	Запрос.Текст = Запрос.Текст+ "
		|	И Строки.ОтражатьВУправленческомУчете = Истина";
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();

КонецФункции

// Возвращает таблицу документов
//
// Параметры
//  ДатаНач,
//	ДатаНач         – даты начала и конца периода
//                 <продолжение описания параметра>
//  МассивНоменклатуры – массив для ограничения номенклатуры
//  МассивХарактеристикНоменклатуры – массив для ограничения номенклатуры
//  МассивСерийНоменклатуры – массив для ограничения номенклатуры
//
// Возвращаемое значение:
//   Таблица строк документов
//
Функция ПолучитьТаблицуСтрокДокументов(ДокументСписания=Неопределено, ДатаНач=Неопределено, ДатаКон=Неопределено, МассивНоменклатуры=Неопределено)
	
	// Общая часть запроса
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСписания", ДокументСписания);
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""ПолучитьТаблицуСтрокДокументов"" КАК QuieryId ";
	
	Ресурсы = Метаданные.РегистрыСведений.СписанныеТовары.Ресурсы;
	
	Для каждого Ресурс Из Ресурсы Цикл
		
		Запрос.Текст = 	Запрос.Текст + ",
		|	"+ Ресурс.Имя;
		
	КонецЦикла; 
	
	Запрос.Текст = 	Запрос.Текст + ",
	|	Регистратор,
	|	Период,
	|	НомерСтроки
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК Строки
	|
	|ГДЕ
	|	1=1
	|";
	
	Если ДатаНач <> Неопределено Тогда
	
		Запрос.Текст = Запрос.Текст+ "
		|	И Строки.Период МЕЖДУ &ДатаНач И &ДатаКон ";
	
	КонецЕсли; 
	
	Если ДокументСписания <> Неопределено Тогда
	
		Запрос.Текст = Запрос.Текст+ "
		|	И Строки.Регистратор = &ДокументСписания";
	
	КонецЕсли; 
	
	Если МассивНоменклатуры<>Неопределено Тогда
		
		Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);

		Запрос.Текст = Запрос.Текст+ "
		|	И Строки.Номенклатура В (&МассивНоменклатуры)";
	
	КонецЕсли; 
	
	Результат = Запрос.Выполнить();

	Возврат Результат.Выгрузить();

КонецФункции
