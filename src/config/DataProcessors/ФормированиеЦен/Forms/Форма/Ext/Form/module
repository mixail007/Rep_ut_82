////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Будем хранить текущие значения следующих полей табличной части для пересчета
// цены при их изменении.
Перем мТекущаяЕдиница, мТекущаяВалюта;

// Необходимы переменные для сохранения вызывающего документа
Перем ДокументОбъект Экспорт;
Перем ФормаДокументОбъекта Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедуры выполняет необходимые действия при установке нового значения в поле
// выбора действия с ценами.
//
// Параметры:
//  ТекущийЭлементДействий - число, индекс устанавливаемого действия в списке действий
//
Процедура ПриИзмененииТекущегоДействия(ТекущийЭлементДействий)

	// Назначим новое действие кнопке "Выполнить". Само действие возьмем из списка значений.
	ЭлементыФормы.КнопкаВыполнить.УстановитьДействие("Нажатие", СписокДействий[ТекущийЭлементДействий].Значение);

	// Будем считать, что по умолчанию никакие реквизиты не нужны.
	ЭлементыФормы.ПолеВводаВариантаЗачения.  Видимость = Ложь;
	ЭлементыФормы.ПолеВыбораЗнакаИзменения.  Видимость = Ложь;
	ЭлементыФормы.ПолеВводаВеличиныИзменения.Видимость = Ложь;
	ЭлементыФормы.ПолеВыбораЕдиницыИзменения.Видимость = Ложь;

	ЭлементыФормы.ПолеВводаВариантаЗачения.БыстрыйВыбор = Истина;

	// Заполним свзанные поля и реквизиты
	Если СписокДействий[ТекущийЭлементДействий].Представление = "Удалить (обнулить)" Тогда

		// В этом случае ничего дополнительного учтанавливать не нужно.

	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Установить единицу" Тогда

		// Здесь надо выбирать из справочника ОКЕИ
		ЭлементыФормы.ПолеВводаВариантаЗачения.Видимость   = Истина;
		ЭлементыФормы.ПолеВводаВариантаЗачения.Значение    = 
		                 Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();

	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Установить валюту" Тогда

		// Здесь надо выбирать из справочника валют
		ЭлементыФормы.ПолеВводаВариантаЗачения.Видимость          = Истина;
		ЭлементыФормы.ПолеВводаВариантаЗачения.Значение           = ТипЦен.ВалютаЦены;

	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Установить наценку" Тогда

		// Здесь надо задать число
		ЭлементыФормы.ПолеВводаВариантаЗачения.Видимость = Истина;
		ЭлементыФормы.ПолеВводаВариантаЗачения.Значение = ТипЦен.ПроцентСкидкиНаценки;

	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Рассчитать по наценке от базовой цены" Тогда

		// В этом случае ничего дополнительного учтанавливать не нужно.

	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Рассчитать по формуле" Тогда

		// Здесь надо выбирать из справочника типов цен
		ЭлементыФормы.ПолеВводаВариантаЗачения.Видимость          = Истина;
		ЭлементыФормы.ПолеВводаВариантаЗачения.Значение           = ТипЦен;

		ЭлементыФормы.ПолеВыбораЗнакаИзменения.Видимость    = Истина;
		ЭлементыФормы.ПолеВыбораЗнакаИзменения.СписокВыбора = СписокЗнаковИзменения;
		ЗнакИзменения = СписокЗнаковИзменения[0].Значение;

		ЭлементыФормы.ПолеВводаВеличиныИзменения.Видимость = Истина;

		ЭлементыФормы.ПолеВыбораЕдиницыИзменения.Видимость    = Истина;
		ЭлементыФормы.ПолеВыбораЕдиницыИзменения.СписокВыбора = СписокЕдиницИзменения;
		ЕдиницаИзменения = СписокЕдиницИзменения[0].Значение;

	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Рассчитать по ценам контрагента" Тогда

		// Здесь надо выбирать из справочника типов цен
		ЭлементыФормы.ПолеВводаВариантаЗачения.БыстрыйВыбор       = Ложь;
		ЭлементыФормы.ПолеВводаВариантаЗачения.Видимость          = Истина;
		ЭлементыФормы.ПолеВводаВариантаЗачения.Значение           = Справочники.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка();

		ЭлементыФормы.ПолеВыбораЗнакаИзменения.Видимость    = Истина;
		ЭлементыФормы.ПолеВыбораЗнакаИзменения.СписокВыбора = СписокЗнаковИзменения;
		ЗнакИзменения = СписокЗнаковИзменения[0].Значение;

		ЭлементыФормы.ПолеВводаВеличиныИзменения.Видимость = Истина;

		ЭлементыФормы.ПолеВыбораЕдиницыИзменения.Видимость    = Истина;
		ЭлементыФормы.ПолеВыбораЕдиницыИзменения.СписокВыбора = СписокЕдиницИзменения;
		ЕдиницаИзменения = СписокЕдиницИзменения[0].Значение;

	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Округлить" Тогда

		// Здесь надо выбирать из перечисления  порядки округления
		ЭлементыФормы.ПолеВводаВариантаЗачения.Видимость          = Истина;
		ЭлементыФормы.ПолеВводаВариантаЗачения.Значение           = ТипЦен.ПорядокОкругления;

	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Изменить цены на %" Тогда

		// Здесь надо задать число
		ЭлементыФормы.ПолеВводаВариантаЗачения.Видимость = Истина;
		ЭлементыФормы.ПолеВводаВариантаЗачения.Значение  = 0;

	КонецЕсли;

КонецПроцедуры // ПриИзмененииТекущегоДействия()

// Выполняет действия при изменении номенклатуры в строке табличной части.
//
// Параметры:
//  ТекущаяСтрока - строка табличной части, в которой изменили номенклатуру;
//  ТипЦен        - ссылка на элемент справочника, определяет тип цен; 
//  ДатаЦен       - дата, на которую устанавливаются цены
//
Процедура ПриИзмененииНоменклатуры(ТекущаяСтрока, ТипЦен, ДатаЦен)

	// Если какие-то значения оказались не заполненными, то заполним их по умолчанию.
	Если ЗначениеНеЗаполнено(ТекущаяСтрока.Валюта) Тогда
		ТекущаяСтрока.Валюта = ТипЦен.ВалютаЦены;
	КонецЕсли; 

	Если ЗначениеНеЗаполнено(ТекущаяСтрока.ПроцентСкидкиНаценки) Тогда
		ТекущаяСтрока.ПроцентСкидкиНаценки = ТипЦен.ПроцентСкидкиНаценки;
	КонецЕсли; 

	Если ЗначениеНеЗаполнено(ТекущаяСтрока.ЕдиницаИзмерения) Тогда
		ТекущаяСтрока.ЕдиницаИзмерения = ТекущаяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
	КонецЕсли; 

	// Заполним цену
	ТекущаяСтрока.Цена = ПолучитьЦенуНоменклатуры(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.ХарактеристикаНоменклатуры, ТипЦен, ДатаЦен , 
	                     ТекущаяСтрока.ЕдиницаИзмерения, ТекущаяСтрока.Валюта, , ,ТекущаяСтрока.ПроцентСкидкиНаценки);

КонецПроцедуры // ПриИзмененииНоменклутуры()

// Выполняет действия при изменении характеристики номенклатуры в строке табличной части.
//
// Параметры:
//  ТекущаяСтрока - строка табличной части, в которой изменили номенклатуру;
//  ТипЦен        - ссылка на элемент справочника, определяет тип цен; 
//  ДатаЦен       - дата, на которую устанавливаются цены
//
Процедура ПриИзмененииХарактеристикиНоменклатуры(ТекущаяСтрока, ТипЦен, ДатаЦен)

	// Если какие-то значения оказались не заполненными, то заполним их по умолчанию.
	Если ЗначениеНеЗаполнено(ТекущаяСтрока.Валюта) Тогда
		ТекущаяСтрока.Валюта = ТипЦен.ВалютаЦены;
	КонецЕсли;

	Если ЗначениеНеЗаполнено(ТекущаяСтрока.ПроцентСкидкиНаценки) Тогда
		ТекущаяСтрока.ПроцентСкидкиНаценки = ТипЦен.ПроцентСкидкиНаценки;
	КонецЕсли;

	Если ЗначениеНеЗаполнено(ТекущаяСтрока.ЕдиницаИзмерения) Тогда
		ТекущаяСтрока.ЕдиницаИзмерения = ТекущаяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
	КонецЕсли;

	// Заполним цену
	ТекущаяСтрока.Цена = ПолучитьЦенуНоменклатуры(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.ХарактеристикаНоменклатуры, ТипЦен, ДатаЦен , 
	                     ТекущаяСтрока.ЕдиницаИзмерения, ТекущаяСтрока.Валюта, , ,ТекущаяСтрока.ПроцентСкидкиНаценки);

КонецПроцедуры // ПриИзмененииХарактеристикиНоменклатуры()

// Выполняет действия при изменении единицы в строке табличной части.
//
// Параметры:
//  ТекущаяСтрока - строка табличной части, в которой изменили номенклатуру;
//  ТипЦен        - ссылка на элемент справочника, определяет тип цен; 
//  СтараяЕдиница - ссылка на элемент справочника, определяет значение единицы до ее изменения; 
//
Процедура ПриИзмененииЕдиницы(ТекущаяСтрока, ТипЦен, СтараяЕдиница)

	// Пересчитаем цену, если выбрали новую единицу и была задана старая.
	ТекущаяСтрока.Цена = ПересчитатьЦенуПриИзмененииЕдиницы(ТекущаяСтрока.Цена, СтараяЕдиница, 
	                                                          ТекущаяСтрока.ЕдиницаИзмерения);

	// Еще надо округлить по типу цен.
	ТекущаяСтрока.Цена = ОкруглитьЦену(ТекущаяСтрока.Цена, ТипЦен.ПорядокОкругления, 
	                                 ТипЦен.ОкруглятьВБольшуюСторону);

	// Запомним старую Единицу
	СтараяЕдиница = ТекущаяСтрока.ЕдиницаИзмерения;

КонецПроцедуры // ПриИзмененииЕдиницы()

// Выполняет действия при изменении валюты в строке табличной части.
//
// Параметры:
//  ТекущаяСтрока - строка табличной части, в которой изменили номенклатуру;
//  ТипЦен        - ссылка на элемент справочника, определяет тип цен; 
//  СтараяВалюта  - ссылка на элемент справочника, определяет значение валюты до ее изменения; 
//  ДатаЦен       - дата, на которую назначаются цены
//
Процедура ПриИзмененииВалюты(ТекущаяСтрока, ТипЦен, СтараяВалюта, ДатаЦен)

	// Пересчитаем цену, если выбрали новую валюту и была задана старая.
	ТекущаяСтрока.Цена = ПересчитатьЦенуПриИзмененииВалюты(ТекущаяСтрока.Цена, СтараяВалюта, ТекущаяСтрока.Валюта,,
															 , ДатаЦен);
	// Еще надо округлить по типу цен.
	ТекущаяСтрока.Цена = ОкруглитьЦену(ТекущаяСтрока.Цена, ТипЦен.ПорядокОкругления, 
	                                 ТипЦен.ОкруглятьВБольшуюСторону);

	// Запомним старую валюту
	СтараяВалюта = ТекущаяСтрока.Валюта;

КонецПроцедуры // ПриИзмененииВалюты()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события "ПередОткрытием"формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Если не установлено значения объекта редактируемого документа изменения цен компании,
	// то форму обработки открывать не нужно.
	Если ДокументОбъект = Неопределено Тогда
		Отказ = Истина;
		Предупреждение("Не задан документ изменения цен компании! " 
		               + "Эта обработка вызывается из формы данного документа.", 60, "Установка цен номенклатуры");
		Возврат;
	КонецЕсли; 

	// Цены расчетного типа не редактируются (вообще-то в документе не должны были позволить выбрать 
	// такой тип цен.
	Если ТипЦен.Рассчитывается = Истина Тогда
		Отказ = Истина;
		Предупреждение("Цены расчетного типа не редактируются!", 60, "Формирование цен");
		Возврат;
	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Обработчик события "ПриОткрытии"формы.
//
Процедура ПриОткрытии()

	// Если нет базового типа цен, то колонку базовой цены и неценки показывать смысла нет.
	ЭлементыФормы.Товары.Колонки.ЦенаБазовая.Видимость = НЕ ЗначениеНеЗаполнено(ТипЦен.БазовыйТипЦен);
	ЭлементыФормы.Товары.Колонки.ПроцентСкидкиНаценки.Видимость = 
	                                                 ЭлементыФормы.Товары.Колонки.ЦенаБазовая.Видимость;

	// Восстановим настройку пересчета цены при изменении валюты, единицы, процента наценки.
	ПересчитыватьЦенуПриИзмененииРеквизитов = ВосстановитьЗначение("ФормированиеЦенПересчитыватьЦенуПриИзмененииРеквизитов");

	// Заполним список действий с табличной частью.
	СписокДействий.Очистить();

	СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеОбнулитьЦены")        , "Удалить (обнулить)");
	СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеУстановитьЕдиницуЦен"), "Установить единицу");
	СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеУстановитьВалютуЦен") , "Установить валюту");

	// Менять и рассчитывать по наценеу имеет смысл только если есть базовая цена
	Если НЕ ЗначениеНеЗаполнено(ТипЦен.БазовыйТипЦен) Тогда
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеУстановитьНаценкуЦен")  , "Установить наценку");
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеРассчитатьПоНаценкеЦен"), "Рассчитать по наценке от базовой цены");
	КонецЕсли;

	СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеРассчитатьЦеныПоФормуле"),            "Рассчитать по формуле");
	СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеРассчитатьЦеныКонтрагентаПоФормуле"), "Рассчитать по ценам контрагента");
	СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеОкруглитьЦены"),                      "Округлить");
	СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеИзменитьЦену"),                       "Изменить цены на %");

	// Заполним список единиц измерения
	СписокЕдиницИзменения.Очистить();
	СписокЕдиницИзменения.Добавить("%"            , "%");
	СписокЕдиницИзменения.Добавить("Единиц валюты", "Единиц валюты");

	// Заполним список знаков измерения
	СписокЗнаковИзменения.Очистить();
	СписокЗнаковИзменения.Добавить(1,  "+");
	СписокЗнаковИзменения.Добавить(-1, "-");

	// Заполним список действий для выбора из выпадающего списка
	ЭлементыФормы.ПолеВыбораДействия.СписокВыбора = СписокДействий;

	// Попробуем вспомнить последнее выбранное значение из списка действий
	ТекущееДействие = ВосстановитьЗначение("ФормированиеЦенТекущееДействие");
	
	Если ТипЗнч(ТекущееДействие) <> Тип("Действие") 
	 ИЛИ СписокДействий.НайтиПоЗначению(ТекущееДействие) = Неопределено Тогда
		
		// Нет сохраненного значения
		ТекущееДействие = СписокДействий[0].Значение;
	КонецЕсли; 
	ЭлементыФормы.ПолеВыбораДействия.Значение = ТекущееДействие;

	// Установим элементы формы в зависимости от выбранного действия
	ПриИзмененииТекущегоДействия(СписокДействий.Индекс(СписокДействий.НайтиПоЗначению(ТекущееДействие)));

	// Установим пометку
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		СтрокаТабличнойЧасти.Пометка = Истина;
	КонецЦикла; 

КонецПроцедуры // ПриОткрытии()

// Обработчик события "ОбработкаВыбора"формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	ВыборкаЗначенийВыбора = ЗначениеВыбора.Выбрать();
	Пока ВыборкаЗначенийВыбора.Следующий() цикл
		СтрокаТабличнойЧасти                          = Товары.Добавить();
		СтрокаТабличнойЧасти.Пометка                  = Истина;
		СтрокаТабличнойЧасти.Номенклатура             = ВыборкаЗначенийВыбора.Номенклатура;
		СтрокаТабличнойЧасти.Цена                     = ВыборкаЗначенийВыбора.Цена;
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки     = ВыборкаЗначенийВыбора.ПроцентСкидкиНаценки;
		СтрокаТабличнойЧасти.Валюта                   = ВыборкаЗначенийВыбора.Валюта;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения         = ВыборкаЗначенийВыбора.ЕдиницаИзмерения;
	КонецЦикла;

КонецПроцедуры // ОбработкаВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "УстановитьФлажки" командной панели
// табличного поля "Товары", устанавливает флажки во всех строках 
// табличной части "Товары".
//
Процедура КоманднаяПанельТоварыДействиеУстановитьФлажки(Кнопка)

	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		СтрокаТабличнойЧасти.Пометка = Истина;
	КонецЦикла; 
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "СнатьФлажки" командной панели
// табличного поля "Товары", снимает флажки во всех строках 
// табличной части "Товары".
//
Процедура КоманднаяПанельТоварыДействиеСнятьФлажки(Кнопка)
	
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		СтрокаТабличнойЧасти.Пометка = Ложь;
	КонецЦикла; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "Нажатие" кнопки "Выполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик обнуляет все помеченные цены.
//
Процедура КнопкаВыполнитьНажатиеОбнулитьЦены(Элемент)

	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;
			СтрокаТабличнойЧасти.Цена                 = 0;
			СтрокаТабличнойЧасти.Валюта               = Неопределено;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения     = Неопределено;
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры // КнопкаВыполнитьНажатиеОбнулитьЦены()

// Процедура - обработчик события "Нажатие" кнопки "Выполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик устанавливает единицу с выбранным ОКЕИ для 
// всех помеченных строк табличной части.
//
Процедура КнопкаВыполнитьНажатиеУстановитьЕдиницуЦен(Элемент)

	// Должен быть выбран ОКЕИ
	Если ЗначениеНеЗаполнено(ВариантЗначения) Тогда
		Предупреждение("Не выбрана единица измерения!", 60, "Формирование цен");
		
		ТекущийЭлемент = ЭлементыФормы.ПолеВводаВариантаЗачения;
		Возврат;
	КонецЕсли; 

	//Сформируем текст запроса для поиска единицы с выбранным ОКЕИ
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Товары.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ОКЕИ",     ВариантЗначения);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕдиницыИзмерения.Владелец,
	|	ЕдиницыИзмерения.Ссылка      КАК ЕдиницаИзмерения,
	|	ЕдиницыИзмерения.Коэффициент
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|
	|ГДЕ
	|	  ЕдиницыИзмерения.Владелец В (&Владелец)
	|	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = &ОКЕИ";
	
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
	
	// Найдем у данной номенклатуры единицу с таким ОКЕИ
	// Если нашли, то меняем единицу и пересчитваем цену,
	// не нашли - сообщаем об этом.
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			// Сбросим выборку для послеудующего поиска
			ВыборкаИзЗапроса.Сбросить();

			// Ищем в выборке номенклатуру
			Если ВыборкаИзЗапроса.НайтиСледующий(СтрокаТабличнойЧасти.Номенклатура,"Владелец")  Тогда

				// У данной номенклатуры есть цена с таким ОКЕИ
				// Изменяем единицу, пересчитываем цену, если просят.
				Если ПересчитыватьЦенуПриИзмененииРеквизитов Тогда
					
					НоваяЦена = ?(СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент = 0, 0,
					              СтрокаТабличнойЧасти.Цена * ВыборкаИзЗапроса.Коэффициент 
					              / СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент);
					СтрокаТабличнойЧасти.Цена    = ОкруглитьЦену(НоваяЦена, ТипЦен.ПорядокОкругления,
					                                      ТипЦен.ОкруглятьВБольшуюСторону);
				КонецЕсли; 

				СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыборкаИзЗапроса.ЕдиницаИзмерения;
				
			Иначе
				Сообщить("У номенклатуры """ + СокрЛП(СтрокаТабличнойЧасти.Номенклатура)  
				        + """ нет единицы измерения с ОКЕИ """ + СокрЛП(ВариантЗначения)
				        + """!", СтатусСообщения.Важное);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 


КонецПроцедуры // КнопкаВыполнитьНажатиеУстановитьЕдиницуЦен()

// Процедура - обработчик события "Нажатие" кнопки "Выполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик устанавливает выбранную валюту для 
// всех помеченных строк табличной части.
//
Процедура КнопкаВыполнитьНажатиеУстановитьВалютуЦен(Элемент)

	// Должна быть выбрана новая валюта цены
	Если ЗначениеНеЗаполнено(ВариантЗначения) Тогда
		
		Предупреждение("Не выбрана новая валюта цены!", 60, "Формирование цен");
		ТекущийЭлемент = ЭлементыФормы.ПолеВводаВариантаЗачения;
		Возврат;
		
	КонецЕсли; 

	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			Если ПересчитыватьЦенуПриИзмененииРеквизитов Тогда
				НоваяЦена = ПересчитатьЦенуПриИзмененииВалюты(СтрокаТабличнойЧасти.Цена, СтрокаТабличнойЧасти.Валюта,
				                                                ВариантЗначения, , , ДатаЦенСкидок);
				СтрокаТабличнойЧасти.Цена   = ОкруглитьЦену(НоваяЦена, ТипЦен.ПорядокОкругления,
					                                    ТипЦен.ОкруглятьВБольшуюСторону);
			КонецЕсли; 

			СтрокаТабличнойЧасти.Валюта = ВариантЗначения;
			
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры // КнопкаВыполнитьНажатиеУстановитьВалютуЦен()

// Процедура - обработчик события "Нажатие" кнопки "Выполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик устанавливает заданную наценку для 
// всех помеченных строк табличной части.
//
Процедура КнопкаВыполнитьНажатиеУстановитьНаценкуЦен(Элемент)

	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = ВариантЗначения;
			
			Если ПересчитыватьЦенуПриИзмененииРеквизитов Тогда
				
				// Наценим и округлим.
				СтрокаТабличнойЧасти.Цена = ОкруглитьЦену(СтрокаТабличнойЧасти.ЦенаБазовая 
				                                     * (100 + СтрокаТабличнойЧасти.ПроцентСкидкиНаценки) / 100, 
				                          ТипЦен.ПорядокОкругления, ТипЦен.ОкруглятьВБольшуюСторону);
			КонецЕсли; 

		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры // КнопкаВыполнитьНажатиеУстановитьНаценкуЦен(Элемент)

// Процедура - обработчик события "Нажатие" кнопки "Выполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик расчитывает цену от базовой цены 
// по заданной наценке для всех помеченных строк табличной части.
//
Процедура КнопкаВыполнитьНажатиеРассчитатьПоНаценкеЦен(Элемент)

	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			// Наценим и округлим.
			СтрокаТабличнойЧасти.Цена = ОкруглитьЦену(СтрокаТабличнойЧасти.ЦенаБазовая 
			                                     * (100 + СтрокаТабличнойЧасти.ПроцентСкидкиНаценки) / 100, 
			                          ТипЦен.ПорядокОкругления, ТипЦен.ОкруглятьВБольшуюСторону);
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры // КнопкаВыполнитьНажатиеРассчитатьПоНаценкеЦен(Элемент)

// Процедура - обработчик события "Нажатие" кнопки "Выполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик рассчитывает цену по заданной формуле 
// для всех помеченных строк табличной части.
//
Процедура КнопкаВыполнитьНажатиеРассчитатьЦеныПоФормуле(Элемент)

	// Должен быть выбран базовый тип цен
	Если ЗначениеНеЗаполнено(ВариантЗначения) Тогда
		
		Предупреждение("Не выбран базовый тип цен!", 60, "Формирование цен");
		ТекущийЭлемент = ЭлементыФормы.ПолеВводаВариантаЗачения;
		Возврат;
		
	КонецЕсли; 

	// Должен быть выбран знак
	Если ЗначениеНеЗаполнено(ЭлементыФормы.ПолеВыбораЗнакаИзменения.Значение) Тогда
		
		Предупреждение("Не выбран знак изменения!", 60, "Формирование цен");
		ТекущийЭлемент = ЭлементыФормы.ПолеВыбораЗнакаИзменения;
		Возврат;
		
	КонецЕсли; 

	// Должен быть выбрана единица изменения
	Если ЗначениеНеЗаполнено(ЭлементыФормы.ПолеВыбораЕдиницыИзменения.Значение) Тогда
		
		Предупреждение("Не выбрана единица изменения!", 60, "Формирование цен");
		ТекущийЭлемент = ЭлементыФормы.ПолеВыбораЕдиницыИзменения;
		Возврат;
		
	КонецЕсли; 

	// Надо получить цены выбранного типа и пересчитать их по заданной формуле.
	// Цены базового типа достанем запросом.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура"  , Товары.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ТипЦен",         ВариантЗначения);
	Запрос.УстановитьПараметр("ДатаЦен" ,       ДатаЦенСкидок);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Цена,
	|	ЦеныНоменклатурыСрезПоследних.Валюта,
	|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаЦен, Номенклатура В(&Номенклатура) И ТипЦен =&ТипЦен) 
	|	             КАК ЦеныНоменклатурыСрезПоследних";
	
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();

	// Найдем у данной номенклатуры значение базовой цены
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			// Сбросим выборку для последующего поиска.
			ВыборкаИзЗапроса.Сбросить();

			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
			СтруктураПоиска.Вставить("Номенклатура",               СтрокаТабличнойЧасти.Номенклатура);

			// Ищем в выборке номенклатуру.
			Если ВыборкаИзЗапроса.НайтиСледующий(СтруктураПоиска) Тогда

				// Нашли базовую цену.
				// Пересчитываем ее в валюту заданного типа цен,
				// единицы цены.
				ЦенаБазовая = ПересчитатьЦенуПриИзмененииВалюты(ВыборкаИзЗапроса.Цена, ВыборкаИзЗапроса.Валюта,
				                                                  СтрокаТабличнойЧасти.Валюта, , , ДатаЦенСкидок);

			Иначе

				ЦенаБазовая = 0;

			КонецЕсли; 

			// Теперь применим формулу
			Если СокрЛП(ЕдиницаИзменения) = "%" Тогда

				СтрокаТабличнойЧасти.Цена = ЦенаБазовая * (100 + ЗнакИзменения * ВеличинаИзменения) / 100;
				
			Иначе // надо просто прибавить
				
				СтрокаТабличнойЧасти.Цена = ЦенаБазовая + ЗнакИзменения * ВеличинаИзменения;
				
			КонецЕсли; 

			// Не забудем округлить.
			СтрокаТабличнойЧасти.Цена = ОкруглитьЦену(СтрокаТабличнойЧасти.Цена, 
			                          ТипЦен.ПорядокОкругления, ТипЦен.ОкруглятьВБольшуюСторону);
			
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры // КнопкаВыполнитьНажатиеРассчитатьЦеныПоФормуле()

// Процедура - обработчик события "Нажатие" кнопки "Выполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик рассчитывает цену по заданной формуле 
// для всех помеченных строк табличной части.
//
Процедура КнопкаВыполнитьНажатиеРассчитатьЦеныКонтрагентаПоФормуле(Элемент)

	// Должен быть выбран базовый тип цен
	Если ЗначениеНеЗаполнено(ВариантЗначения) Тогда
		
		Предупреждение("Не выбран базовый тип цен!", 60, "Формирование цен");
		ТекущийЭлемент = ЭлементыФормы.ПолеВводаВариантаЗачения;
		Возврат;
		
	КонецЕсли; 

	// Должен быть выбран знак
	Если ЗначениеНеЗаполнено(ЭлементыФормы.ПолеВыбораЗнакаИзменения.Значение) Тогда
		
		Предупреждение("Не выбран знак изменения!", 60, "Формирование цен");
		ТекущийЭлемент = ЭлементыФормы.ПолеВыбораЗнакаИзменения;
		Возврат;
		
	КонецЕсли; 

	// Должен быть выбрана единица изменения
	Если ЗначениеНеЗаполнено(ЭлементыФормы.ПолеВыбораЕдиницыИзменения.Значение) Тогда
		
		Предупреждение("Не выбрана единица изменения!", 60, "Формирование цен");
		ТекущийЭлемент = ЭлементыФормы.ПолеВыбораЕдиницыИзменения;
		Возврат;
		
	КонецЕсли; 

	// Надо получить цены выбранного типа и пересчитать их по заданной формуле.
	// Цены базового типа достанем запросом.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура"  , Товары.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ТипЦен",         ВариантЗначения);
	Запрос.УстановитьПараметр("ДатаЦен" ,       ДатаЦенСкидок);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Цена,
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Валюта,
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ХарактеристикаНоменклатуры
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(&ДатаЦен, Номенклатура В(&Номенклатура) И ТипЦен =&ТипЦен) 
	|	             КАК ЦеныНоменклатурыКонтрагентовСрезПоследних";
	
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();

	// Найдем у данной номенклатуры значение базовой цены
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			// Сбросим выборку для последующего поиска.
			ВыборкаИзЗапроса.Сбросить();

			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
			СтруктураПоиска.Вставить("Номенклатура",               СтрокаТабличнойЧасти.Номенклатура);

			// Ищем в выборке номенклатуру.
			Если ВыборкаИзЗапроса.НайтиСледующий(СтруктураПоиска) Тогда

				// Нашли базовую цену.
				// Пересчитываем ее в валюту заданного типа цен,
				// единицы цены.
				ЦенаБазовая = ПересчитатьЦенуПриИзмененииВалюты(ВыборкаИзЗапроса.Цена, ВыборкаИзЗапроса.Валюта,
				                                                  СтрокаТабличнойЧасти.Валюта, , , ДатаЦенСкидок);

				// выставляем основую единицу
				СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыборкаИзЗапроса.ЕдиницаИзмерения;

			Иначе

				СтрокаТабличнойЧасти.ЕдиницаИзмерения = Неопределено;
				ЦенаБазовая = 0;

			КонецЕсли; 

			// Теперь применим формулу
			Если СокрЛП(ЕдиницаИзменения) = "%" Тогда

				СтрокаТабличнойЧасти.Цена = ЦенаБазовая * (100 + ЗнакИзменения * ВеличинаИзменения) / 100;

			Иначе // надо просто прибавить

				СтрокаТабличнойЧасти.Цена = ЦенаБазовая + ЗнакИзменения * ВеличинаИзменения;

			КонецЕсли; 

			// Не забудем округлить.
			СтрокаТабличнойЧасти.Цена = ОкруглитьЦену(СтрокаТабличнойЧасти.Цена, 
			                          ТипЦен.ПорядокОкругления, ТипЦен.ОкруглятьВБольшуюСторону);
			
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры // КнопкаВыполнитьНажатиеРассчитатьЦеныКонтрагентаПоФормуле()

// Процедура - обработчик события "Нажатие" кнопки "Выполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик обнуляет все помеченные цены.
//
Процедура КнопкаВыполнитьНажатиеОкруглитьЦены(Элемент)

	// Должен быть выбран прядок округления
	Если ЗначениеНеЗаполнено(ВариантЗначения) Тогда
		
		Предупреждение("Не выбран порядок округления!", 60, "Формирование цен");
		ТекущийЭлемент = ЭлементыФормы.ПолеВводаВариантаЗачения;
		Возврат;
		
	КонецЕсли;

	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			// Округлим.
			СтрокаТабличнойЧасти.Цена = ОкруглитьЦену(СтрокаТабличнойЧасти.Цена, 
			                          ВариантЗначения, ТипЦен.ОкруглятьВБольшуюСторону);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // КнопкаВыполнитьНажатиеОкруглитьЦены()

// Процедура - обработчик события "Нажатие" кнопки "Выполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик изменяет цену на заданный процент.
//
Процедура КнопкаВыполнитьНажатиеИзменитьЦену(Элемент)

	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * (100 + ВариантЗначения) / 100;

		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // КнопкаВыполнитьНажатиеИзменитьЦену()
 
// Процедура - обработчик события "ПриИзменении" поля выбора текущего дйествия.
//
Процедура ПолеВыбораДействияПриИзменении(Элемент)

	// Установим элементы формы в зависимости от выбранного действия
	ПриИзмененииТекущегоДействия(СписокДействий.Индекс(СписокДействий.НайтиПоЗначению(Элемент.Значение)));

КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "ОК".
//
Процедура КнопкаОКНажатие(Элемент)

	Если ФормаДокументОбъекта <> Неопределено Тогда
		НомерСоответствияТекущейКолонки = ФормаДокументОбъекта.СоответствиеТиповЦен.Получить(ТипЦен);
	КонецЕсли;
	
	// Действи выполняется, если еще не закрыли документ
	Если ДокументОбъект <> Неопределено
	   И НомерСоответствияТекущейКолонки <> Неопределено
	   И ФормаДокументОбъекта.ЭлементыФормы.ТаблицаЦен.Колонки.Найти("цена"+НомерСоответствияТекущейКолонки) <> Неопределено
	   И ФормаДокументОбъекта.ЭлементыФормы.ТаблицаЦен.Колонки.Найти("валюта"+НомерСоответствияТекущейКолонки) <> Неопределено
	   И ФормаДокументОбъекта.ЭлементыФормы.ТаблицаЦен.Колонки.Найти("единица"+НомерСоответствияТекущейКолонки) <> Неопределено
	   И ФормаДокументОбъекта.ЭлементыФормы.ТаблицаЦен.Колонки.Найти("процент"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда

		// Перенесем в ТЧ документа все строки из ТЧ данной формы.
		Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
			Если СтрокаТабличнойЧасти.Пометка Тогда

				СтруктураОтбора = Новый Структура();
				СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
				СтруктураОтбора.Вставить("Номенклатура",               СтрокаТабличнойЧасти.Номенклатура);

				СтрокаТаблицыЦен = НайтиСтрокуТабЧасти(ФормаДокументОбъекта.ТаблицаЦен, СтруктураОтбора);

				Если СтрокаТаблицыЦен = Неопределено Тогда
					СтрокаТаблицыЦен = ФормаДокументОбъекта.ТаблицаЦен.Добавить();
					СтрокаТаблицыЦен.Номенклатура               = СтрокаТабличнойЧасти.Номенклатура;
					СтрокаТаблицыЦен.ХарактеристикаНоменклатуры = СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры;
					ФормаДокументОбъекта.ЭлементыФормы.ТаблицаЦен.ТекущаяСтрока = СтрокаТаблицыЦен;
					СтрокаТаблицыЦенФормы = ФормаДокументОбъекта.ЭлементыФормы.ТаблицаЦен.ТекущаяСтрока;
					ФормаДокументОбъекта.ПриИзмененииНоменклатуры(СтрокаТаблицыЦенФормы);
				КонецЕСли;

				СтрокаТаблицыЦен["цена"+НомерСоответствияТекущейКолонки] = СтрокаТабличнойЧасти.Цена;
				СтрокаТаблицыЦен["валюта"+НомерСоответствияТекущейКолонки] = СтрокаТабличнойЧасти.Валюта;
				СтрокаТаблицыЦен["единица"+НомерСоответствияТекущейКолонки] = СтрокаТабличнойЧасти.ЕдиницаИзмерения;
				СтрокаТаблицыЦен["процент"+НомерСоответствияТекущейКолонки] = СтрокаТабличнойЧасти.ПроцентСкидкиНаценки;

			КонецЕсли;
		КонецЦикла;
		ДокументОбъект.Товары.Загрузить(Товары.Выгрузить());

	КонецЕсли;

	// Сохраним значения настройки пересчета цены при изменении валюты, единицы, процента наценки,
	// и текущего выбранного значения в списке действий.
	СохранитьЗначение("ФормированиеЦенПересчитыватьЦенуПриИзмененииРеквизитов", ПересчитыватьЦенуПриИзмененииРеквизитов);
	СохранитьЗначение("ФормированиеЦенТекущееДействие", 
	         ЭлементыФормы.ПолеВыбораДействия.Значение);
	
	// Можно закрывать форму.
	Закрыть();
	
КонецПроцедуры // КнопкаОКНажатие()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТЧ Товары

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)

	ТекущаяСтрока = ЭлементыФормы.Товары.ТекущаяСтрока;
	// Новые строки будем по умолчанию помечать.
	Если НоваяСтрока Тогда
		ТекущаяСтрока.Пометка = Истина;
	КонецЕсли; 

	// Запомним текущие значения реквизитов для пересчета при их изменении.
	мТекущаяЕдиница = ТекущаяСтрока.ЕдиницаИзмерения;
	мТекущаяВалюта  = ТекущаяСтрока.Валюта;
	
КонецПроцедуры // ТоварыПриНачалеРедактирования()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущаяСтрока = ЭлементыФормы.Товары.ТекущиеДанные;
	
	// Общие действия при изменении номенклатуры при изменении цен компании.
	ПриИзмененииНоменклатуры(ТекущаяСтрока, ТипЦен, ДатаЦенСкидок);

	// Заполним базовую цену, если нужно. 
	// Для удобства редактирования пересчитваем ее в валюту и единицу цены.
	Если Не ЗначениеНеЗаполнено(ТипЦен.БазовыйТипЦен) Тогда
		ТекущаяСтрока.ЦенаБазовая = ПолучитьЦенуНоменклатуры(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.ХарактеристикаНоменклатуры, ТипЦен.БазовыйТипЦен, 
									ДатаЦенСкидок , ТекущаяСтрока.ЕдиницаИзмерения, ТекущаяСтрока.Валюта);
	КонецЕсли; 

	// Запомним текущие значения реквизитов для пересчета при их изменении.
	мТекущаяЕдиница = ТекущаяСтрока.ЕдиницаИзмерения;
	мТекущаяВалюта  = ТекущаяСтрока.Валюта;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	ТекущаяСтрока = ЭлементыФормы.Товары.ТекущиеДанные;
	
	// Общие действия при изменении номенклатуры при изменении цен компании.
	ПриИзмененииХарактеристикиНоменклатуры(ТекущаяСтрока, ТипЦен, ДатаЦенСкидок);

	// Заполним базовую цену, если нужно. 
	// Для удобства редактирования пересчитваем ее в валюту и единицу цены.
	Если Не ЗначениеНеЗаполнено(ТипЦен.БазовыйТипЦен) Тогда
		ТекущаяСтрока.ЦенаБазовая = ПолучитьЦенуНоменклатуры(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.ХарактеристикаНоменклатуры, ТипЦен.БазовыйТипЦен, 
									ДатаЦенСкидок , ТекущаяСтрока.ЕдиницаИзмерения, ТекущаяСтрока.Валюта);
	КонецЕсли; 

	// Запомним текущие значения реквизитов для пересчета при их изменении.
	мТекущаяЕдиница = ТекущаяСтрока.ЕдиницаИзмерения;
	мТекущаяВалюта  = ТекущаяСтрока.Валюта;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода процента скидки-наценки
// в строке табличной части "Товары".
//
Процедура ТоварыПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.Товары.ТекущиеДанные;

	// Если задана базовая цена, то рассчитаем цену на ее основании.
	Если ЭлементыФормы.Товары.Колонки.ЦенаБазовая.Видимость 
	   И ТекущаяСтрока.ЦенаБазовая > 0 
	   И ПересчитыватьЦенуПриИзмененииРеквизитов Тогда

		// Наценим и округлим.
		ТекущаяСтрока.Цена = ОкруглитьЦену(ТекущаяСтрока.ЦенаБазовая * (100 + ТекущаяСтрока.ПроцентСкидкиНаценки) 
		                                 / 100, ТипЦен.ПорядокОкругления, ТипЦен.ОкруглятьВБольшуюСторону);

	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода валюты цены
// в строке табличной части "Товары".
//
Процедура ТоварыВалютаПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.Товары.ТекущиеДанные;

	Если ПересчитыватьЦенуПриИзмененииРеквизитов Тогда
		ПриИзмененииВалюты(ТекущаяСтрока, ТипЦен, мТекущаяВалюта, ДатаЦенСкидок);
		Если НЕ ЗначениеНеЗаполнено(ТипЦен.БазовыйТипЦен) Тогда
			ТекущаяСтрока.ЦенаБазовая = ПолучитьЦенуНоменклатуры(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.ХарактеристикаНоменклатуры,
								ТипЦен.БазовыйТипЦен, ДатаЦенСкидок, ТекущаяСтрока.ЕдиницаИзмерения, ТекущаяСтрока.Валюта);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры // ТоварыВалютаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы измерения
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	ТекущаяСтрока = ЭлементыФормы.Товары.ТекущиеДанные;

	Если ПересчитыватьЦенуПриИзмененииРеквизитов Тогда
		Если ЗначениеНеЗаполнено(ТекущаяСтрока.ЕдиницаИзмерения) Тогда
			ТекущаяСтрока.Цена = 0;
		Иначе
			ПриИзмененииЕдиницы(ТекущаяСтрока, ТипЦен, мТекущаяЕдиница);
			Если НЕ ЗначениеНеЗаполнено(ТипЦен.БазовыйТипЦен) Тогда
				ТекущаяСтрока.ЦенаБазовая = ПолучитьЦенуНоменклатуры(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.ХарактеристикаНоменклатуры,
									ТипЦен.БазовыйТипЦен, ДатаЦенСкидок, ТекущаяСтрока.ЕдиницаИзмерения, ТекущаяСтрока.Валюта);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры // ТоварыВалютаПриИзменении()
