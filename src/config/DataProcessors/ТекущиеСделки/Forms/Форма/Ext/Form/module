
// Список значений, содержащий список истории отборов с параметрами отборов
Перем мСписокИсторииОтбора;

Перем мДокументыОснования;

Перем мДокументОбъект;

Перем СписокТиповВозможныхДокументов;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура выполняется по нажатию на одну из кнопок подменю
// кнопки ИсторияОтборов командной панели КоманднаяПанельФормы.
// 
// Параметры
//  Кнопка - Кнопка командной панели, по нажатию на которую вызывается данная процедура
//
// Возвращаемые значения
//  НЕТ
Процедура ОбработкаИсторииОтбора(Кнопка)

	СтарыйОтборКонтрагент = СтруктураОтборов.Получить("Контрагент");
	
	ИндексСпискаЗначений = Число(Кнопка.Имя);
	
	Если (ИндексСпискаЗначений + 1) > мСписокИсторииОтбора.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	// Очистим отборы
	Для каждого ЭлементСоответствия Из СтруктураОтборов Цикл
		Если ЭлементСоответствия.Ключ = "Пользователь" Тогда
			Продолжить;
		КонецЕсли;
		СтруктураОтборов.Удалить(ЭлементСоответствия.Ключ);
	КонецЦикла; 
	
	ЗначениеЭлементаСпискаЗначений = мСписокИсторииОтбора[ИндексСпискаЗначений].Значение;
	Для каждого ЭлементСтруктуры Из ЗначениеЭлементаСпискаЗначений Цикл
		МассивОтбора = Новый Массив;
		МассивОтбора.Добавить(ЭлементСтруктуры.Значение[0]);
		Если ЭлементСтруктуры.Значение[0] = ВидСравнения.Интервал
		 ИЛИ ЭлементСтруктуры.Значение[0] = ВидСравнения.ИнтервалВключаяГраницы
		 ИЛИ ЭлементСтруктуры.Значение[0] = ВидСравнения.ИнтервалВключаяНачало
		 ИЛИ ЭлементСтруктуры.Значение[0] = ВидСравнения.ИнтервалВключаяОкончание Тогда
			МассивОтбора.Добавить(ЭлементСтруктуры.Значение[2]);
			МассивОтбора.Добавить(ЭлементСтруктуры.Значение[3]);
		Иначе
			МассивОтбора.Добавить(ЭлементСтруктуры.Значение[1]);
		КонецЕсли;
		СтруктураОтборов.Вставить(ЭлементСтруктуры.Ключ, МассивОтбора);
	КонецЦикла;
	
	ОбновитьСделки(СтарыйОтборКонтрагент = СтруктураОтборов.Получить("Контрагент"));
	
	СостояниеКнопокСнятияОтбора();
	СостоояниеКнопкиОтбораПоТекущемуЗначению();

КонецПроцедуры

// Процедура формирует строковое представление отбора, для записи в историю отборов.
// 
// Параметры
//  СтрокаОтбора - Строка, строковое представление отбора
//  ЭлементОтбора - Массив, массив парметров и значений отбора
//
// Возвращаемые значения
//  НЕТ
Процедура ДописатьСтрокуОтбора(СтрокаОтбора, ЭлементОтбора)

	Если НЕ ПустаяСтрока(СтрокаОтбора) Тогда
		СтрокаОтбора = СтрокаОтбора + ", ";
	КонецЕсли; 
	Если ЭлементОтбора.Значение[0] = ВидСравнения.Равно Тогда
		СтрокаОтбора = СтрокаОтбора + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " = "+ СокрЛП(Строка(ЭлементОтбора.Значение[1]));
	ИначеЕсли ЭлементОтбора.Значение[0] = ВидСравнения.НеРавно Тогда
		СтрокаОтбора = СтрокаОтбора + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " <> "+ СокрЛП(Строка(ЭлементОтбора.Значение[1]));
	ИначеЕсли ЭлементОтбора.Значение[0] = ВидСравнения.ВСписке Тогда
		СтрокаСписка = "";
		Для каждого ЭлементСписка Из ЭлементОтбора.Значение[1] Цикл
			Если НЕ ПустаяСтрока(СтрокаСписка) Тогда
				СтрокаСписка = СтрокаСписка + "; ";
			КонецЕсли; 
			СтрокаСписка = СтрокаСписка + СокрЛП(Строка(ЭлементСписка.Значение));
		КонецЦикла; 
		СтрокаОтбора = СтрокаОтбора + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " в списке "+ СтрокаСписка;
	ИначеЕсли ЭлементОтбора.Значение[0] = ВидСравнения.НеВСписке Тогда
		СтрокаСписка = "";
		Для каждого ЭлементСписка Из ЭлементОтбора.Значение[1] Цикл
			Если НЕ ПустаяСтрока(СтрокаСписка) Тогда
				СтрокаСписка = СтрокаСписка + "; ";
			КонецЕсли; 
			СтрокаСписка = СтрокаСписка + СокрЛП(Строка(ЭлементСписка.Значение));
		КонецЦикла; 
		СтрокаОтбора = СтрокаОтбора + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " не в списке "+ СтрокаСписка;
	ИначеЕсли ЭлементОтбора.Значение[0] = ВидСравнения.Больше Тогда
		СтрокаОтбора = СтрокаОтбора + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " > "+ СокрЛП(Строка(ЭлементОтбора.Значение[1]));
	ИначеЕсли ЭлементОтбора.Значение[0] = ВидСравнения.БольшеИлиРавно Тогда
		СтрокаОтбора = СтрокаОтбора + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " >= "+ СокрЛП(Строка(ЭлементОтбора.Значение[1]));
	ИначеЕсли ЭлементОтбора.Значение[0] = ВидСравнения.Меньше Тогда
		СтрокаОтбора = СтрокаОтбора + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " < "+ СокрЛП(Строка(ЭлементОтбора.Значение[1]));
	ИначеЕсли ЭлементОтбора.Значение[0] = ВидСравнения.МеньшеИлиРавно Тогда
		СтрокаОтбора = СтрокаОтбора + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " <= "+ СокрЛП(Строка(ЭлементОтбора.Значение[1]));
	ИначеЕсли ЭлементОтбора.Значение[0] = ВидСравнения.Интервал Тогда
		СтрокаОтбора = СтрокаОтбора + СокрЛП(Строка(ЭлементОтбора.Значение[1])) + " < " + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " < "+ СокрЛП(Строка(ЭлементОтбора.Значение[2]));
	ИначеЕсли ЭлементОтбора.Значение[0] = ВидСравнения.ИнтервалВключаяГраницы Тогда
		СтрокаОтбора = СтрокаОтбора + СокрЛП(Строка(ЭлементОтбора.Значение[1])) + " <= " + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " <= "+ СокрЛП(Строка(ЭлементОтбора.Значение[2]));
	ИначеЕсли ЭлементОтбора.Значение[0] = ВидСравнения.ИнтервалВключаяНачало Тогда
		СтрокаОтбора = СтрокаОтбора + СокрЛП(Строка(ЭлементОтбора.Значение[1])) + " <= " + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " < "+ СокрЛП(Строка(ЭлементОтбора.Значение[2]));
	ИначеЕсли ЭлементОтбора.Значение[0] = ВидСравнения.ИнтервалВключаяОкончание Тогда
		СтрокаОтбора = СтрокаОтбора + СокрЛП(Строка(ЭлементОтбора.Значение[1])) + " < " + мСтруктураПредставленийОтборов[ЭлементОтбора.Ключ] + " <= "+ СокрЛП(Строка(ЭлементОтбора.Значение[2]));
	КонецЕсли; 

КонецПроцедуры

// Процедура проверяет наличие и при необходимости добавляет новый элемент в писок истории отборов.
// 
// Параметры
//  НЕТ
//
// Возвращаемые значения
//  НЕТ
Процедура ДобавитьНовыйОтборВИсторию()

	СтрокаТекущихОтборов = "";
	СтруктураАктуальныхОтборов = Новый Структура;
	
	Для каждого ЭлементОтбора Из СтруктураОтборов Цикл
		Если ЭлементОтбора.Ключ = "Пользователь" Тогда
			Продолжить;
		КонецЕсли; 
		МассивИсторииОтбора = Новый Массив;
		МассивИсторииОтбора.Добавить(ЭлементОтбора.Значение[0]);
		МассивИсторииОтбора.Добавить(ЭлементОтбора.Значение[1]);
		Если ЭлементОтбора.Значение.Количество() = 3 Тогда
			МассивИсторииОтбора.Добавить(ЭлементОтбора.Значение[1]);
			МассивИсторииОтбора.Добавить(ЭлементОтбора.Значение[2]);
		КонецЕсли; 
		МассивИсторииОтбора.Добавить(Истина);
		ДописатьСтрокуОтбора(СтрокаТекущихОтборов, ЭлементОтбора);
		СтруктураАктуальныхОтборов.Вставить(ЭлементОтбора.Ключ, МассивИсторииОтбора);
	КонецЦикла;
	
	Если СтруктураАктуальныхОтборов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	НайденныйЭлементСпискаЗначений = Неопределено;
	Для каждого ЭлементСписка Из мСписокИсторииОтбора Цикл
		Если ЭлементСписка.Представление = СтрокаТекущихОтборов Тогда
			НайденныйЭлементСпискаЗначений = ЭлементСписка;
		КонецЕсли; 
	КонецЦикла;
	
	Если НайденныйЭлементСпискаЗначений = Неопределено Тогда
	
		Если мСписокИсторииОтбора.Количество() > 0 Тогда
			мСписокИсторииОтбора.Вставить(0, СтруктураАктуальныхОтборов, СтрокаТекущихОтборов);
		Иначе
			мСписокИсторииОтбора.Добавить(СтруктураАктуальныхОтборов, СтрокаТекущихОтборов);
		КонецЕсли;
		
		Если мСписокИсторииОтбора.Количество() > 20 Тогда
			ИндУдаляемогоЭлемента = 20;
			Пока 1 = 1 Цикл
				Если (ИндУдаляемогоЭлемента + 1) > мСписокИсторииОтбора.Количество() Тогда
					Прервать;
				КонецЕсли;
				мСписокИсторииОтбора.Удалить(20);
			КонецЦикла; 
		КонецЕсли; 
		
	Иначе
		
		мСписокИсторииОтбора.Сдвинуть(НайденныйЭлементСпискаЗначений, (-мСписокИсторииОтбора.Индекс(НайденныйЭлементСпискаЗначений)));
		
	КонецЕсли; 
	
	СформироватьПодменюПоСпискуАктуальныхОтборов();

КонецПроцедуры

// Процедура формирует кноаки подменю для кнопки ИсторияОтборов командной панели КоманднаяПанельФормы.
// 
// Параметры
//  НЕТ
//
// Возвращаемые значения
//  НЕТ
Процедура СформироватьПодменюПоСпискуАктуальныхОтборов()

	КнопкаПодменю = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ИсторияОтборов;
	КнопкаПодменю.Кнопки.Очистить();
	КнопкаПодменю1 = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.ИсторияОтборов;
	КнопкаПодменю1.Кнопки.Очистить();
	Для каждого ЭлементСписка Из мСписокИсторииОтбора Цикл
		КнопкаПодменю.Кнопки.Добавить(Строка(мСписокИсторииОтбора.Индекс(ЭлементСписка)), ТипКнопкиКоманднойПанели.Действие, ЭлементСписка.Представление, Новый Действие("ОбработкаИсторииОтбора"));
		КнопкаПодменю1.Кнопки.Добавить(Строка(мСписокИсторииОтбора.Индекс(ЭлементСписка)), ТипКнопкиКоманднойПанели.Действие, ЭлементСписка.Представление, Новый Действие("ОбработкаИсторииОтбора"));
	КонецЦикла;

КонецПроцедуры

// Процедура устанавливает доступность кнопки СнятьОтбор
// командной панели формы.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  НЕТ
//
Процедура СостояниеКнопокСнятияОтбора()

	Доступность = Ложь;
	
	Для каждого Отборы Из СтруктураОтборов Цикл
		Если Отборы.Ключ <> "Пользователь" Тогда
			Доступность = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;

	Если ДатаНач <> Дата("00010101000000") ИЛИ ДатаКон <> Дата("00010101000000") Тогда
		Доступность = Истина;
	КонецЕсли; 
	
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.СнятьОтбор.Доступность = Доступность;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.СнятьОтбор.Доступность = Доступность;

КонецПроцедуры

// Функция определяет необходимость вывода строки
// элемента формы СделкиПредставление
//
// Параметры
//  Строки - строка таблицы значений
//  СписокПроверяемыхПолей - Список значений, поля, которые надо проверять
//
// Возвращаемое значение:
//   Булево
//
Функция НужноПоказыватьСтрокуСделок(Строки, СписокПроверяемыхПолей)

	ЗначениеВозврата = Истина;
	
	Для каждого ЭлементСписка Из СписокПроверяемыхПолей Цикл

		Если ЭлементСписка.Значение = "ТипДокумента" Тогда
			ЗначениеСтроки = ТипЗнч(Строки.Документ);
			Отбор = СтруктураОтборов.Получить(ЭлементСписка.Значение);
			Если Отбор <> Неопределено Тогда
				ВидСравненияОтбора = Отбор[0];
				ЗначениеОтбора = Отбор[1];
				
				Если НЕ ЗначениеОтбора.СодержитТип(ЗначениеСтроки) Тогда
					ЗначениеВозврата = Ложь;
					Прервать;
				КонецЕсли; 
			КонецЕсли; 
		Иначе
			ЗначениеСтроки = Строки[ЭлементСписка.Значение];
			Отбор = СтруктураОтборов.Получить(ЭлементСписка.Значение);
			Если Отбор <> Неопределено Тогда
				ВидСравненияОтбора = Отбор[0];
				ЗначениеОтбора = Отбор[1];
				Если ВидСравненияОтбора = ВидСравнения.Равно И ЗначениеОтбора <> ЗначениеСтроки Тогда
					ЗначениеВозврата = Ложь;
					Прервать;
				ИначеЕсли ВидСравненияОтбора = ВидСравнения.НеРавно И ЗначениеОтбора = ЗначениеСтроки Тогда
					ЗначениеВозврата = Ложь;
					Прервать;
				ИначеЕсли ВидСравненияОтбора = ВидСравнения.Больше И ЗначениеОтбора >= ЗначениеСтроки Тогда
					ЗначениеВозврата = Ложь;
					Прервать;
				ИначеЕсли ВидСравненияОтбора = ВидСравнения.БольшеИлиРавно И ЗначениеОтбора > ЗначениеСтроки Тогда
					ЗначениеВозврата = Ложь;
					Прервать;
				ИначеЕсли ВидСравненияОтбора = ВидСравнения.Меньше И ЗначениеОтбора <= ЗначениеСтроки Тогда
					ЗначениеВозврата = Ложь;
					Прервать;
				ИначеЕсли ВидСравненияОтбора = ВидСравнения.МеньшеИлиРавно И ЗначениеОтбора < ЗначениеСтроки Тогда
					ЗначениеВозврата = Ложь;
					Прервать;
				ИначеЕсли ВидСравненияОтбора = ВидСравнения.ВСписке И ЗначениеОтбора.НайтиПоЗначению(ЗначениеСтроки) = Неопределено Тогда
					ЗначениеВозврата = Ложь;
					Прервать;
				ИначеЕсли ВидСравненияОтбора = ВидСравнения.НеВСписке И ЗначениеОтбора.НайтиПоЗначению(ЗначениеСтроки) <> Неопределено Тогда
					ЗначениеВозврата = Ложь;
					Прервать;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЦикла; 

	Возврат ЗначениеВозврата;
	
КонецФункции // ()

// Процедура заполняет таблицу значений СделктТЗ
//
// Параметры
//  БезЗапроса - Булево, выполнить запрос или нет
//
// Возвращаемое значение:
//  НЕТ
//
Процедура ОбновитьСделки(БезЗапроса = Истина) Экспорт

	СписокПроверяемыхПолей = Новый СписокЗначений;
	СписокПроверяемыхПолей.Добавить("ТипДокумента");
	СписокПроверяемыхПолей.Добавить("Договор");
	СписокПроверяемыхПолей.Добавить("Сумма");
	СписокПроверяемыхПолей.Добавить("ВидОперации");
	СписокПроверяемыхПолей.Добавить("Номер");
	
	Если НЕ БезЗапроса Тогда
		ЗаполнитьСделки();
	КонецЕсли; 

	ТекущаяСтрокаСделок = Неопределено;
	Если СделкиПредставление.Количество() > 0 И ЭлементыФормы.СделкиПредставление.ТекущиеДанные <> Неопределено Тогда
		ТекущаяСтрокаСделок = ЭлементыФормы.СделкиПредставление.ТекущиеДанные.Документ;
	КонецЕсли;
	
	СделкиПредставление.Очистить();

	Для каждого Строки Из Сделки Цикл
		
		СтрокаТЗ = СделкиПредставление.Добавить();
		СтрокаТЗ.Документ = Строки.Документ;
		СтрокаТЗ.ВидОперации = Строки.ВидОперации;
		СтрокаТЗ.Проведен         = Строки.Проведен;
		СтрокаТЗ.Контрагент       = Строки.Контрагент;
		СтрокаТЗ.Сумма            = Строки.ЗависшаяСуммаСделки;
		СтрокаТЗ.Дата             = Строки.Дата;
		СтрокаТЗ.Договор          = Строки.ДоговорКонтрагента;
		СтрокаТЗ.Валюта           = Строки.Валюта;
		СтрокаТЗ.ОбщаяСуммаСделки = Строки.ОбщаяСуммаСделки;
		СтрокаТЗ.Номер            = Строки.Номер;
		СтрокаТЗ.ВидДокумента     = СокрЛП(Строки.Документ.Метаданные().Представление());
		
	КонецЦикла;

	ИндексСтроки = 0;
	Пока 1 = 1 Цикл
		Если ИндексСтроки > СделкиПредставление.Количество() - 1 Тогда
			Прервать;
		КонецЕсли;
		Если НЕ НужноПоказыватьСтрокуСделок(СделкиПредставление[ИндексСтроки], СписокПроверяемыхПолей) Тогда
			СделкиПредставление.Удалить(ИндексСтроки);
			Продолжить;
		КонецЕсли;
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла; 
	
	СделкиПредставление.Сортировать("Дата ВОЗР");

	Если ТекущаяСтрокаСделок <> Неопределено Тогда
		СтрокаСделок = СделкиПредставление.Найти(ТекущаяСтрокаСделок,"Документ");
		Если СтрокаСделок <> Неопределено Тогда
			ЭлементыФормы.СделкиПредставление.ТекущаяСтрока = СтрокаСделок;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Функция Определяет контрагента текщей строки табличного поля
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  СправочникСсылка.Конрагенты
//
Функция ОпределитьКонтрагента()
	
	Если ЭлементыФормы.СделкиПредставление.ТекущиеДанные <> Неопределено И НЕ ЭлементыФормы.СделкиПредставление.ТекущиеДанные.Контрагент.Пустая() Тогда
		Возврат ЭлементыФормы.СделкиПредставление.ТекущиеДанные.Контрагент;
	Иначе
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли; 
	
КонецФункции // ОпределитьКонтрагента()

// Процедура открывает форму документа, введенного на основании текущего
//
// Параметры
//  Кнопка - кнопка командной панели формы
//
// Возвращаемое значение:
//  НЕТ
//
Процедура ВводНаОсновании(Кнопка)

	Если ЭлементыФормы.СделкиПредставление.ТекущиеДанные <> Неопределено И НЕ ЭлементыФормы.СделкиПредставление.ТекущиеДанные.Документ.Пустая() Тогда
		
		Док = Новый("ДокументМенеджер."+СокрЛП(Кнопка.Имя));
		Док = Док.СоздатьДокумент();
		Док.Заполнить(ЭлементыФормы.СделкиПредставление.ТекущиеДанные.Документ);
		Док.ПолучитьФорму(, ЭтаФорма).Открыть();
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура устанавливает значение реквизита формы ВыбКонтрагент
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  НЕТ
//
Процедура ОпределитьКонтрагентаФормы()

	ОтборКонтрагент = СтруктураОтборов.Получить("Контрагент");

	Если ОтборКонтрагент = Неопределено Тогда
		ВыбКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
	Иначе
		ВыбКонтрагент = ОтборКонтрагент[1];
	КонецЕсли; 
	
КонецПроцедуры

// Функция определяет список документов, которые можно
//  вводить на основании заданного
// элемента формы СделкиТЗ
//
// Параметры
//  ИмяДокумента - строка имя документа, как оно задано в метаданных
//
// Возвращаемое значение:
//   Список значений
//
Функция НайтиДокументыДляОснования(ИмяДокумента)

	СписокДокументов = Неопределено;

	мДокументыОснования.Свойство(ИмяДокумента, СписокДокументов);
	
	Если ТипЗнч(СписокДокументов) = Тип("СписокЗначений") Тогда
		Возврат СписокДокументов;
	КонецЕсли; 
	
	СписокДокументов = Новый СписокЗначений;
	
	Для каждого Док Из Метаданные.Документы Цикл
		Для каждого Основание Из Док.ВводитсяНаОсновании Цикл
			Если Основание.Имя = ИмяДокумента Тогда
				СписокДокументов.Добавить(Док.Имя, Док.Синоним);
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 

	мДокументыОснования.Вставить(ИмяДокумента, СписокДокументов);
	Возврат СписокДокументов;
	
КонецФункции

// Процедура устанавливает пометку кнопки ОтборПоТекущемуЗначению
// командной панели формы
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  НЕТ
Процедура СостоояниеКнопкиОтбораПоТекущемуЗначению()

	Если ЭлементыФормы.СделкиПредставление.ТекущиеДанные = Неопределено ИЛИ ЭлементыФормы.СделкиПредставление.ТекущаяКолонка = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	ТекКолонка = ЭлементыФормы.СделкиПредставление.ТекущаяКолонка;
	ИмяКолонки = ТекКолонка.Имя;
	КнопкаПанели = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ОтборПоТекущемуЗначению;
	КнопкаПанели1 = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.ОтборПоТекущемуЗначению;

	Если ИмяКолонки = "Картинка" Тогда
		Возврат;
	КонецЕсли; 
	
	ТекЗначение = ЭлементыФормы.СделкиПредставление.ТекущиеДанные[ИмяКолонки];

	Если ИмяКолонки = "Дата" Тогда
		Если НачалоДня(ТекЗначение) = НачалоДня(ДатаНач) И НачалоДня(ТекЗначение) = НачалоДня(ДатаКон) Тогда
			КнопкаПанели.Пометка = Истина;
			КнопкаПанели1.Пометка = Истина;
		Иначе
			КнопкаПанели.Пометка = Ложь;
			КнопкаПанели1.Пометка = Ложь;
		КонецЕсли;
	ИначеЕсли ИмяКолонки = "ВидДокумента" Тогда
		ЗначениеСоответствия = СтруктураОтборов.Получить("ТипДокумента");
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(ЭлементыФормы.СделкиПредставление.ТекущиеДанные.Документ));
		ЗначениеСтроки = Новый ОписаниеТипов(МассивТипов);
		Если ЗначениеСоответствия <> Неопределено И ЗначениеСтроки = ЗначениеСоответствия[1] Тогда
			КнопкаПанели.Пометка = Истина;
			КнопкаПанели1.Пометка = Истина;
		Иначе
			КнопкаПанели.Пометка = Ложь;
			КнопкаПанели1.Пометка = Ложь;
		КонецЕсли; 
	Иначе
		ЗначениеСоответствия = СтруктураОтборов.Получить(ИмяКолонки);
		Если ЗначениеСоответствия <> Неопределено И ЗначениеСоответствия[0] = ВидСравнения.Равно И ТекЗначение = ЗначениеСоответствия[1] Тогда
			КнопкаПанели.Пометка = Истина;
			КнопкаПанели1.Пометка = Истина;
		Иначе
			КнопкаПанели.Пометка = Ложь;
			КнопкаПанели1.Пометка = Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Процедура формирует кнопки командной панели формы
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  НЕТ
//
Процедура СформироватьКнопкиОтборовПоВидуДокумента()

	КнопкиОсновнойКнопки = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ОтборПоВидуДокумента.Кнопки;
	КнопкиОсновнойКнопки1 = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.ОтборПоВидуДокумента.Кнопки;

	КнопкиОсновнойКнопки.Очистить();
	КнопкиОсновнойКнопки1.Очистить();

	ПроцедураНажатияНаКнопку = Новый Действие("НажатьНаКнопкуОтборовПоВидуДокумента");
	
	НоваяКнопка = КнопкиОсновнойКнопки.Добавить("#ВсеДокументы" ,ТипКнопкиКоманднойПанели.Действие, "Все документы", ПроцедураНажатияНаКнопку);
	НоваяКнопка = КнопкиОсновнойКнопки.Добавить("РазделительОтборовПоВидуДокумента");
	НоваяКнопка = КнопкиОсновнойКнопки1.Добавить("#ВсеДокументы" ,ТипКнопкиКоманднойПанели.Действие, "Все документы", ПроцедураНажатияНаКнопку);
	НоваяКнопка = КнопкиОсновнойКнопки1.Добавить("РазделительОтборовПоВидуДокумента");

	Для каждого ЭлементСписка Из СписокТиповВозможныхДокументов Цикл
		КнопкиОсновнойКнопки.Добавить(("#" + СокрЛП(Строка(ЭлементСписка.Представление))) ,ТипКнопкиКоманднойПанели.Действие, Метаданные.Документы[ЭлементСписка.Представление].Синоним, ПроцедураНажатияНаКнопку);
		КнопкиОсновнойКнопки1.Добавить(("#" + СокрЛП(Строка(ЭлементСписка.Представление))) ,ТипКнопкиКоманднойПанели.Действие, Метаданные.Документы[ЭлементСписка.Представление].Синоним, ПроцедураНажатияНаКнопку);
	КонецЦикла; 
	
КонецПроцедуры

Процедура НажатьНаКнопкуОтборовПоВидуДокумента(Кнопка)

	ИмяОбъекта = СтрЗаменить(Кнопка.Имя,"#","");

	Если ИмяОбъекта = "ВсеДокументы" Тогда

		СтруктураОтборов.Удалить("ТипДокумента");
		
	Иначе

		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("ДокументСсылка."+ИмяОбъекта));
		
		МассивОтбора = Новый Массив;
		МассивОтбора.Добавить(ВидСравнения.Равно);
		МассивОтбора.Добавить(Новый ОписаниеТипов(МассивТипов));
		СтруктураОтборов.Вставить("ТипДокумента",МассивОтбора);
		
	КонецЕсли; 
	
	ОбновитьСделки();
	ДобавитьНовыйОтборВИсторию();

	СостояниеКнопокОтбораПоВидуДокумента();
	
КонецПроцедуры

// Процедура устанавливает пометку кнопки ОтборПоТекущемуЗначению
// командной панели формы
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  НЕТ
Процедура СостояниеКнопокОтбораПоВидуДокумента()

	ОтборВидДокумента = СтруктураОтборов.Получить("ТипДокумента");

	КнопкиОсновнойКнопки = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ОтборПоВидуДокумента.Кнопки;
	КнопкиОсновнойКнопки1 = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.ОтборПоВидуДокумента.Кнопки;
	
	Для каждого КнопкаПанели Из КнопкиОсновнойКнопки Цикл
		КнопкаПанели.Пометка = Ложь;
	КонецЦикла; 
	
	Для каждого КнопкаПанели Из КнопкиОсновнойКнопки1 Цикл
		КнопкаПанели.Пометка = Ложь;
	КонецЦикла; 
	
	КнопкиОсновнойКнопки["#ВсеДокументы"].Пометка = Ложь;
	КнопкиОсновнойКнопки1["#ВсеДокументы"].Пометка = Ложь;
	
	Если ОтборВидДокумента <> Неопределено Тогда
		ЗначениеОтбора = ОтборВидДокумента[1];
		МассивТипов = ЗначениеОтбора.Типы();
		Если МассивТипов.Количество() = 1 Тогда

			ЭлементСписка = СписокТиповВозможныхДокументов.НайтиПоЗначению(МассивТипов[0]);

			Если ЭлементСписка <> Неопределено Тогда

				КнопкиОсновнойКнопки["#" + СокрЛП(Строка(ЭлементСписка.Представление))].Пометка = Истина;
				КнопкиОсновнойКнопки1["#" + СокрЛП(Строка(ЭлементСписка.Представление))].Пометка = Истина;
				
			КонецЕсли; 
			
		КонецЕсли; 
	Иначе
		КнопкиОсновнойКнопки["#ВсеДокументы"].Пометка = Истина;
		КнопкиОсновнойКнопки1["#ВсеДокументы"].Пометка = Истина;
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ФормаСделки = Обработки.ТекущиеСделки.ПолучитьФорму(,, "ТекущиеСделки_" + СокрЛП(СтруктураОтборов.Получить("Пользователь")[1].УникальныйИдентификатор()));
	Если ФормаСделки.Открыта() Тогда
		ФормаСделки.Активизировать();
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	ЭтаФорма.КлючУникальности = "ТекущиеСделки_" + СокрЛП(СтруктураОтборов.Получить("Пользователь")[1].УникальныйИдентификатор());
	
КонецПроцедуры

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()
	
	ОбновитьСделки(Ложь);
	
	ОпределитьКонтрагентаФормы();

	СформироватьКнопкиОтборовПоВидуДокумента();
	
	ИсторияОтборов = ВосстановитьЗначение("ИсторииОтборовТекущихСделок");
	Если ТипЗнч(ИсторияОтборов) = Тип("СписокЗначений") Тогда
		мСписокИсторииОтбора = ИсторияОтборов;
	КонецЕсли; 
	
	СформироватьПодменюПоСпискуАктуальныхОтборов();
	
	ОбновлениеОтображения();
	
КонецПроцедуры

// Обработчик события ПриЗакрытии формы.
//
Процедура ПриЗакрытии()
	
	СохранитьЗначение("ИсторииОтборовТекущихСделок", мСписокИсторииОтбора);
	
КонецПроцедуры

// Обработчик события ПриПовторномОткрытии формы.
//
Процедура ПриПовторномОткрытии(СтандартнаяОбработка)
	
	ОбновитьСделки(Ложь);
	
	ОпределитьКонтрагентаФормы();

	СформироватьКнопкиОтборовПоВидуДокумента();
	
КонецПроцедуры

// Обработчик события ОбновлениеОтображения формы.
//
Процедура ОбновлениеОтображения()

	Если ДатаНач = Дата("00010101000000") И ДатаКон = Дата("00010101000000") Тогда
		
		ЭтаФорма.Заголовок = "Текущие сделки: " + СокрЛП(СтруктураОтборов.Получить("Пользователь")[1].Наименование);

	Иначе

		ЭтаФорма.Заголовок = "Текущие сделки: " + СокрЛП(ПредставлениеПериода(ДатаНач,ДатаКон)) + ", " + СокрЛП(СтруктураОтборов.Получить("Пользователь")[1].Наименование);
		
	КонецЕсли; 

	СостояниеКнопокСнятияОтбора();
	СостоояниеКнопкиОтбораПоТекущемуЗначению();
	СостояниеКнопокОтбораПоВидуДокумента();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫЗЫВАЕМЫЕ ПО НАЖАТИЮ КНОПОК КОМАНДНОЙ ПАНЕЛИ ФОРМЫ

// Обработчик события элемента КоманднаяПанельФормы.Отборы.
//
Процедура КоманднаяПанельФормыОтборы(Кнопка)
	
	ФормаОтбора = ПолучитьФорму("ФормаОтборов", ЭтаФорма);

	ФормаОтбора.ТипыДокументов = Новый ОписаниеТипов(СписокТиповВозможныхДокументов.ВыгрузитьЗначения());
	
	ФормаОтбора.ОткрытьМодально();
	
	ОпределитьКонтрагентаФормы();
	ДобавитьНовыйОтборВИсторию();
	
	ЭтаФорма.КлючУникальности = "ТекущиеСделки_" + СокрЛП(СтруктураОтборов.Получить("Пользователь")[1].УникальныйИдентификатор());
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельФормы.СнятьОтбор.
//
Процедура КоманднаяПанельФормыСнятьОтбор(Кнопка)
	
	СтруктураОтборов.Удалить("Контрагент");
	СтруктураОтборов.Удалить("Сумма");
	СтруктураОтборов.Удалить("ТипДокумента");
	СтруктураОтборов.Удалить("Договор");
	СтруктураОтборов.Удалить("Номер");
	СтруктураОтборов.Удалить("Вид");

	ДатаНач = Дата("00010101000000");
	ДатаКон = Дата("00010101000000");
	
	ОбновитьСделки(Ложь);
	
	ОпределитьКонтрагентаФормы();
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельФормы.Взаиморасчеты.
//
Процедура КоманднаяПанельФормыВзаиморасчеты(Кнопка)
	
	ТекущийКонтрагент = ОпределитьКонтрагента();

	ОтчетКонтрагента = Отчеты.ВедомостьВзаиморасчетыСКонтрагентами.Создать();
	
	ПараметрыНастройки = Новый Структура;
	ПараметрыНастройки.Вставить("ДатаНач", ДатаНач);
	ПараметрыНастройки.Вставить("ДатаКон", ДатаКон);
	ПараметрыНастройки.Вставить("РаскрашиватьИзмерения", Истина);
	ПараметрыНастройки.Вставить("ВыводитьИтогиПоВсемУровням", Истина);
	ПараметрыНастройки.Вставить("ВыбранныеПоля", Новый Структура("Регистратор"));
	ПараметрыНастройки.Вставить("Отбор", Новый Структура("Контрагент", ТекущийКонтрагент));
	ПараметрыНастройки.Вставить("ГруппировкиСтрок", Новый Структура("Контрагент, ДоговорКонтрагента, Сделка"));
	
	ОтчетКонтрагента.Настроить(ПараметрыНастройки);
	ФормаОтчета = ОтчетКонтрагента.ПолучитьОсновнуюФорму();
	ФормаОтчета.ОбновитьОтчет();
	ФормаОтчета.Открыть();
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельФормы.СписокДокументов.
//
Процедура КоманднаяПанельФормыСписокДокументов(Кнопка)

	ТекущийКонтрагент = ОпределитьКонтрагента();
	
	ФормаЖурнала = ЖурналыДокументов.ДокументыКонтрагентов.ПолучитьФорму();

	ФормаЖурнала.Отбор.ДокументыПоКонтрагенту.Значение = ТекущийКонтрагент;
	ФормаЖурнала.Отбор.ДокументыПоКонтрагенту.Использование = Истина;
	ФормаЖурнала.Открыть();
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельФормы.ОбновитьТаблицы.
//
Процедура КоманднаяПанельФормыОбновитьТаблицы(Кнопка)
	
	ОбновитьСделки(Ложь);
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельФормы.Интервал.
//
Процедура КоманднаяПанельФормыИнтервал(Кнопка)

	МассивПериода = ВвестиПериод(ДатаНач, ДатаКон);

	Если ТипЗнч(МассивПериода) = Тип("Массив") Тогда
		ДатаНач = МассивПериода[0];
		ДатаКон = МассивПериода[1];
		ОбновитьСделки(Ложь);
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельФормы.АнализСделки.
//
Процедура КоманднаяПанельФормыАнализСделки(Кнопка)

	Если ЭлементыФормы.СделкиПредставление.ТекущиеДанные <> Неопределено И НЕ ЭлементыФормы.СделкиПредставление.ТекущиеДанные.Документ.Пустая() Тогда

		ОтчетКонтрагента = Отчеты.ВедомостьВзаиморасчетыСКонтрагентами.Создать();
		
		ПараметрыНастройки = Новый Структура;
		ПараметрыНастройки.Вставить("ДатаНач", ДатаНач);
		ПараметрыНастройки.Вставить("ДатаКон", ДатаКон);
		ПараметрыНастройки.Вставить("РаскрашиватьИзмерения", Истина);
		ПараметрыНастройки.Вставить("ВыводитьИтогиПоВсемУровням", Истина);
		ПараметрыНастройки.Вставить("ВыбранныеПоля", Новый Структура("Регистратор"));
		ПараметрыНастройки.Вставить("Отбор", Новый Структура("Контрагент, Сделка", ЭлементыФормы.СделкиПредставление.ТекущиеДанные.Контрагент, ЭлементыФормы.СделкиПредставление.ТекущиеДанные.Документ));
		ПараметрыНастройки.Вставить("ГруппировкиСтрок", Новый Структура("Контрагент, ДоговорКонтрагента, Сделка"));
		
		ОтчетКонтрагента.Настроить(ПараметрыНастройки);
		ФормаОтчета = ОтчетКонтрагента.ПолучитьОсновнуюФорму();
		ФормаОтчета.ОбновитьОтчет();
		ФормаОтчета.Открыть();
		
	КонецЕсли;

КонецПроцедуры

// Обработчик события элемента КоманднаяПанельФормы.ПерейтиКЗаказам.
//
Процедура КоманднаяПанельФормыПерейтиКЗаказам(Кнопка)

	ФормаКалендарь = Обработки.КалендарьПользователя.ПолучитьФорму(,, "КалендарьПользователя_" + СокрЛП(СтруктураОтборов.Получить("Пользователь")[1].УникальныйИдентификатор()));
	ФормаКалендарь.ДатаНач =ДатаНач;
	ФормаКалендарь.ДатаКон =ДатаКон;

	СтруктураОтбораКалендарь = Новый Соответствие;
	ОтборКонтрагент = СтруктураОтборов.Получить("Контрагент");
	Если ОтборКонтрагент <> Неопределено Тогда
		СтруктураОтбораКалендарь.Вставить("Контрагент",ОтборКонтрагент);
	КонецЕсли;
	ОтборПользователь = СтруктураОтборов.Получить("Пользователь");
	Если ОтборПользователь <> Неопределено Тогда
		СтруктураОтбораКалендарь.Вставить("Пользователь",ОтборПользователь);
		ФормаКалендарь.ЭтотОбъект.ПользовательКалендаря = ОтборПользователь[1];
	КонецЕсли;

	ФормаКалендарь.СтруктураОтборов = СтруктураОтбораКалендарь;
	
	ФормаКалендарь.ЭтотОбъект.ПользовательКалендаря = СтруктураОтборов.Получить("Пользователь")[1];

	ФормаКалендарь.Открыть();
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельФормы.ОтборПоТекущемуКонтрагенту.
//
Процедура КоманднаяПанельФормыОтборПоТекущемуЗначению(Кнопка)

	Если Кнопка.Пометка Тогда

		ИмяКолонки = ЭлементыФормы.СделкиПредставление.ТекущаяКолонка.Имя;

		Если ИмяКолонки = "Дата" Тогда

			ЗначениеОтбора = ЭлементыФормы.СделкиПредставление.ТекущиеДанные[ИмяКолонки];

			ДатаНач = Дата("00010101000000");
			ДатаКон = Дата("00010101000000");

		Иначе

			Если ИмяКолонки = "ВидДокумента" Тогда

				ИмяОтбора = "ТипДокумента";

			Иначе

				ИмяОтбора = ИмяКолонки;
				
			КонецЕсли; 

			СтруктураОтборов.Удалить(ИмяОтбора);
			
		КонецЕсли;

	Иначе

		ИмяКолонки = ЭлементыФормы.СделкиПредставление.ТекущаяКолонка.Имя;

		Если ИмяКолонки = "Дата" Тогда

			ЗначениеОтбора = ЭлементыФормы.СделкиПредставление.ТекущиеДанные[ИмяКолонки];

			ДатаНач = НачалоДня(ЗначениеОтбора);
			ДатаКон = КонецДня(ЗначениеОтбора);

		Иначе

			МассивОтбора = Новый Массив;
		
			Если ИмяКолонки = "ВидДокумента" Тогда

				ИмяОтбора = "ТипДокумента";
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(ТипЗнч(ЭлементыФормы.СделкиПредставление.ТекущиеДанные.Документ));
				ЗначениеОтбора = Новый ОписаниеТипов(МассивТипов);
				МассивОтбора.Добавить(ВидСравнения.Равно);

			Иначе

				ИмяОтбора = ИмяКолонки;
				ЗначениеОтбора = ЭлементыФормы.СделкиПредставление.ТекущиеДанные[ИмяКолонки];
				МассивОтбора.Добавить(ВидСравнения.Равно);
				
			КонецЕсли; 
			
			Если ЗначениеОтбора = Неопределено Тогда

				Возврат;
				
			КонецЕсли; 

			МассивОтбора.Добавить(ЗначениеОтбора);
			СтруктураОтборов.Вставить(ИмяОтбора,МассивОтбора);
			
		КонецЕсли;
		
	КонецЕсли; 

	Кнопка.Пометка = НЕ Кнопка.Пометка;
	
	ОбновитьСделки(Ложь);
	ДобавитьНовыйОтборВИсторию();
	ОпределитьКонтрагентаФормы();
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельФормы.СписокКонтактов.
//
Процедура КоманднаяПанельФормыСписокСобытий(Кнопка)

	ТекущийКонтрагент = ОпределитьКонтрагента();
	
	ФормаСписка = Документы.Событие.ПолучитьФормуСписка();

	ФормаСписка.Отбор.ДокументыПоКонтрагенту.Значение = ТекущийКонтрагент;
	ФормаСписка.Отбор.ДокументыПоКонтрагенту.Использование = Истина;
	ФормаСписка.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ОБРАБОТЧИКОВ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события ПередНачаломИзменения элемента формы СделкиПредставление.
//
Процедура СделкиПредставлениеПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элемент.ТекущиеДанные <> Неопределено И НЕ Элемент.ТекущиеДанные.Документ.Пустая() Тогда
		ДокументОбъект = Элемент.ТекущиеДанные.Документ.ПолучитьОбъект();
		ДокументОбъект.ПолучитьФорму(,ЭтаФорма).Открыть();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы СделкиПредставление.
//
Процедура СделкиПредставлениеПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы СделкиПредставление.
//
Процедура СделкиПредставлениеПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы СделкиПредставление.
//
Процедура СделкиПредставлениеПриАктивизацииСтроки(Элемент)

	КнопкаРодитель = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ВводНаОсновании;
	КнопкаРодитель.Кнопки.Очистить();
	КнопкаРодитель1 = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.ВводНаОсновании;
	КнопкаРодитель1.Кнопки.Очистить();
	
	Если Элемент.ТекущиеДанные <> Неопределено И Элемент.ТекущиеДанные.Документ <> Неопределено Тогда
		СписокДокументов = НайтиДокументыДляОснования(Элемент.ТекущиеДанные.Документ.Метаданные().Имя);
		Для каждого Элементы Из СписокДокументов Цикл
			Кнопка = КнопкаРодитель.Кнопки.Добавить(Элементы.Значение, ТипКнопкиКоманднойПанели.Действие, Элементы.Представление, Новый Действие("ВводНаОсновании"));
			Кнопка.Картинка = мДокументОбъект;
			Кнопка1 = КнопкаРодитель1.Кнопки.Добавить(Элементы.Значение, ТипКнопкиКоманднойПанели.Действие, Элементы.Представление, Новый Действие("ВводНаОсновании"));
			Кнопка1.Картинка = мДокументОбъект;
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Очистка элемента формы ВыбКонтрагент.
//
Процедура ВыбКонтрагентОчистка(Элемент, СтандартнаяОбработка)
	
	Если СтруктураОтборов.Получить("Контрагент") <> Неопределено Тогда
		СтруктураОтборов.Удалить("Контрагент");
		ОбновитьСделки(Ложь);
		ДобавитьНовыйОтборВИсторию();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы ВыбКонтрагент.
//
Процедура ВыбКонтрагентНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Контрагенты = Справочники.Контрагенты.ПустаяСсылка();
	Выбран = ВвестиЗначение(Контрагенты, "Выберите контрагента");

	Если Выбран Тогда
		
		Если Контрагенты.ЭтоГруппа Тогда
			Возврат;
		КонецЕсли; 
		
		ВыбКонтрагент = Контрагенты;
		МассивОтбора = Новый Массив;
		МассивОтбора.Добавить(ВидСравнения.Равно);
		МассивОтбора.Добавить(Контрагенты);
		СтруктураОтборов.Вставить("Контрагент",МассивОтбора);
		ОбновитьСделки(Ложь);
		ДобавитьНовыйОтборВИсторию();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриАктивизацииЯчейки элемента формы СделкиПредставление.
//
Процедура СделкиПредставлениеПриАктивизацииЯчейки(Элемент)

	Доступность = Ложь;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		
		ТекКолонка = Элемент.ТекущаяКолонка;

		Если ТекКолонка <> Элемент.Колонки.Картинка Тогда
			
			Доступность = Истина;
			
		КонецЕсли; 
		
	КонецЕсли; 

	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ОтборПоТекущемуЗначению.Доступность = Доступность;

	СостоояниеКнопкиОтбораПоТекущемуЗначению();
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы СделкиПредставление.
//
Процедура СделкиПредставлениеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ОформлениеСтроки.Ячейки.Картинка.ОтображатьТекст    = Ложь;
	ОформлениеСтроки.Ячейки.Картинка.ОтображатьФлажок   = Ложь;
	ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
	
	Если ДанныеСтроки.Документ = Неопределено Тогда
		ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 3;
	Иначе
		Если ТипЗнч(ДанныеСтроки.Документ) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") ИЛИ ТипЗнч(ДанныеСтроки.Документ) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 0;
		Иначе
			ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = ДанныеСтроки.Проведен;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ВыбКонтрагент.
//
Процедура ВыбКонтрагентПриИзменении(Элемент)
	
	Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.Контрагенты") И НЕ Элемент.Значение.Пустая() Тогда
		МассивОтбора = Новый Массив;
		МассивОтбора.Добавить(ВидСравнения.Равно);
		МассивОтбора.Добавить(Элемент.Значение);
		СтруктураОтборов.Вставить("Контрагент",МассивОтбора);
		ОбновитьСделки(Ложь);
		ДобавитьНовыйОтборВИсторию();
	КонецЕсли;
	
КонецПроцедуры

ЭтаФорма.РазрешитьСоединятьОкно = Истина;
ЭтаФорма.РазрешитьСостояниеОбычное = Истина;
ЭтаФорма.РазрешитьСостояниеПрикрепленное = Истина;
ЭтаФорма.РазрешитьСостояниеПрячущееся = Истина;
ЭтаФорма.РазрешитьСостояниеСвободное = Истина;

СписокТиповВозможныхДокументов = Новый СписокЗначений;
МассивТипов = Метаданные.РегистрыНакопления.РасчетыСКонтрагентами.Измерения.Сделка.Тип.Типы();
Для каждого Тип Из МассивТипов Цикл
	НоваяСсылка = Новый(Тип);
	СписокТиповВозможныхДокументов.Добавить(Тип, НоваяСсылка.Метаданные().Имя);
КонецЦикла; 

мДокументыОснования = Новый Структура;

мСписокИсторииОтбора = Новый СписокЗначений;

мДокументОбъект = БиблиотекаКартинок.ДокументОбъект;