////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем Текст; 				// Текстовый документ обмена

Перем НачДатаЗагрузки;		// Начальная дата загрузки
Перем КонДатаЗагрузки;      // Конечная дата загрузки
Перем ЗагрВидыДокументов;	// Виды загружаемых документов
Перем ЗагрДокументы;		// Загруженные документы
Перем ЗагрРасчетныеСчета;	// Номера расчетных счетов загрузки
Перем СписокДокументов;		// Список значений всех реквизитов загружаемых документов

Перем ВидыОпераций;       	// Виды операций по 2П
Перем ТаблицаРеквизитов;    // Реквизиты загружаемого документа
Перем РеквизитыДокумента;	// Реквизиты загружаемого документа

Перем ПорядокРеквизитов;    // Порядок следования реквизитов в файле
Перем РеквизитыВрег;		// Порядок следования реквизитов в файле в верхнем регистре

Перем ОбязательныеАтрибутыЗАГРУЗКИ;	// Обязательные реквизиты в файле обмена
Перем ОбязательныеАтрибутыВЫГРУЗКИ;	// Обязательные реквизиты в файле обмена
Перем ОбязательныеАтрибутыБЮДЖЕТ;	// Обязательные реквизиты в файле обмена

Перем ОбязательныеВрегЗАГРУЗКИ;		// Обязательные реквизиты в файле обмена в верхнем регистре
Перем ОбязательныеВрегВЫГРУЗКИ;		// Обязательные реквизиты в файле обмена в верхнем регистре
Перем ОбязательныеВрегБЮДЖЕТ;		// Обязательные реквизиты в файле обмена в верхнем регистре

Перем ПустаяДата;			// Пустая дата ("00010101") 

Перем СчетУчета; // Счет учета расчетов с контрагентом
Перем СчетАванса; // Счет учета расчетов по авансам

Перем СписокКонтрагентов Экспорт; // Список контрагентов не найденных в справочнике

Перем ПустыеПоляДокумента Экспорт; //незаполненные обязательные поля для выгрузки

Перем СписокЖурналов; //список журналов для открытия формы

Перем СтруктураПлатежКорреспондент; // Структура для указания, в каких документах контрагент выступает
									// в качестве плательщика, а в каких  - получателя.


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ


// Формирует ошибку загрузки документов
//
Процедура ОшибкаЗагрузкиТекста(Ном, СтрТекста, СтрОшибки)
	
	Стр="Ошибка: ";
	
	Если 0<Ном Тогда
		Стр = Стр + "строка " + Ном + ", ";
	КонецЕсли;
	Если ПустаяСтрока(СтрТекста)=0 Тогда
		Стр = Стр + """" + СтрТекста + """, ";
	КонецЕсли;
	
	Сообщить(Стр + СтрОшибки);	
	Сообщить("Возможно, кодировки файла и ""Клиент-Банка"" не совпадают.");
КонецПроцедуры
	
// Перевод даты из формата ДД.ММ.ГГГГ -> Дата(ГГГГММДД)
//
Функция ФорматДаты(Стр)
	
	Если (Стр = Неопределено) ИЛИ (ПустаяСтрока(Стр)) Тогда
		Возврат ПустаяДата;
	КонецЕсли;	
	
	День    = Лев(Стр,2);
	Месяц   = Сред(Стр,4,2);
	Год     = Сред(Стр,7,4);
	
	Попытка 
		ВыходДата = Дата(Год+Месяц+День);
	Исключение
		Сообщить("Неверный формат даты [ДД.ММ.ГГГГ]: "+Стр);
		ВыходДата = ПустаяДата;
	КонецПопытки;	
	Возврат ВыходДата;
	
КонецФункции	

// Получает значение реквизита из таблицы РеквизитыДокумента
//
Функция ПолучитьЗначениеРеквизита(Имя)
	
	Перем Значение;
	Если РеквизитыДокумента.Свойство(Врег(Имя),Значение) = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат Значение;
	
КонецФункции

// Меняет реквизит документа в случае необходимости
//
Функция ИзменитьАтрибут(Объект, Имя, Значение, НовыйОбъект=Ложь)
	
	Если (Значение = Неопределено) ИЛИ (Значение = "") ИЛИ (Объект.Метаданные().Реквизиты.Найти(Имя) = Неопределено) Тогда
		Возврат 0;
	КонецЕсли;	
	
	Атрибут=Объект[Имя];
	
	Если ТипЗнч(Атрибут) = Тип("Строка") Тогда
		Атрибут = СокрЛП(Атрибут);Значение = СокрЛП(Значение);
	ИначеЕсли ТипЗнч(Атрибут) = Тип("Число") Тогда
		Значение = Число(Значение);	
	ИначеЕсли ТипЗнч(Атрибут) = Тип("Дата") Тогда
		Атрибут = НачалоДня(Атрибут);Значение = НачалоДня(Значение);
	КонецЕсли;	
	
	Если Атрибут = Значение Тогда
		Возврат 0;
	КонецЕсли;
	
	Объект[Имя] = Значение;
	
	Если Не НовыйОбъект Тогда
		Сообщить("Изменен атрибут документа:"+Объект+" : "+Имя+"="+Значение);
	КонецЕсли;	
	
	Возврат 1;	
	
КонецФункции	

//Создает контрагента
//
Функция СоздатьКонтрагента(СтрокаКонтрагент = Неопределено, ТаблицаКонтрагентов = Неопределено, ТекОрганизация, ОткрыватьФорму=Истина) Экспорт //или СтрокаКонтрагент - строка, или ТаблицаКонтрагентов - ТЗ

	ВыбраныйКонтрагент = СтрокаКонтрагент;
	ИскомыйКонтрагент  = Неопределено;
	НовыйКонтрагент    = Неопределено;

	Если ТаблицаКонтрагентов = Неопределено Тогда

		Для Каждого Элемент Из СписокКонтрагентов Цикл

			ТипКонтрагента = Элемент.Значение["ТИПКОНТРАГЕНТА"];
			Нашли          = Элемент.Значение.Свойство(ТипКонтрагента+"1", ИскомыйКонтрагент);

			Если Строка(ВРег(СокрЛП(ИскомыйКонтрагент))) = Строка(ВРег(СокрЛП(ВыбраныйКонтрагент))) Тогда
				НовыйКонтрагент    = Элемент;
				Индекс        = СписокКонтрагентов.Индекс(Элемент);
				ПрямыеРасчеты = НЕ(НовыйКонтрагент.Значение.Свойство(ТипКонтрагента+"2"));
				Прервать;

			КонецЕсли;

		КонецЦикла;

	Иначе
		//СОЗДАТЬ КОНТРАГЕНТА ИЗ ТАБЛИЦЫ ЗНАЧЕНИЙ
		СтрНовыйКонтрагент =Новый Структура();
		Для Каждого Элемент Из ТаблицаКонтрагентов Цикл
			ТипКонтрагента =Элемент["ТипКонтрагента"];
			СтрНовыйКонтрагент.Вставить(Элемент["Реквизит"], Элемент["Значение"]);
		КонецЦикла;

		НовыйКонтрагент    = Новый СписокЗначений();
		НовыйКонтрагент.Добавить(СтрНовыйКонтрагент);
		НовыйКонтрагент    = НовыйКонтрагент.НайтиПоЗначению(СтрНовыйКонтрагент);
		ПрямыеРасчеты = НЕ(НовыйКонтрагент.Значение.Свойство(ТипКонтрагента+"2"));

	КонецЕсли;
	
	ДанныеКонтрагента=НовыйКонтрагент.Значение;
	
	Если ДанныеКонтрагента.Свойство(ТипКонтрагента+"ИНН") Тогда
		ИННКраткий=ДанныеКонтрагента[ТипКонтрагента+"ИНН"];
	Иначе
		ИННКраткий = "";
	КонецЕсли;
	
	Если ДанныеКонтрагента.Свойство(ТипКонтрагента+"КПП") Тогда
		КПП=ДанныеКонтрагента[ТипКонтрагента+"КПП"];
	Иначе
		КПП = "";
	КонецЕсли;
	
	Если Не ПустаяСтрока(КПП) Тогда
		Контрагент       =НайтиКонтрагентаПоИННиКПП("Контрагенты",ИННКраткий,КПП);
	Иначе	
		Контрагент       =НайтиКонтрагентаПоИНН("Контрагенты",ИННКраткий);
	КонецЕсли;
	
	Если Контрагент.Пустая() Тогда

		//эти элементы есть у всех справочников
		НовыйЭлемент =Справочники.Контрагенты.СоздатьЭлемент();
		
		Если ДанныеКонтрагента.Свойство(ТипКонтрагента+"1") Тогда	
			НовыйЭлемент.Наименование =ДанныеКонтрагента[ТипКонтрагента+"1"];
			НовыйЭлемент.НаименованиеПолное=НовыйЭлемент.Наименование;
		КонецЕсли;
		
		Если ДанныеКонтрагента.Свойство(ТипКонтрагента+"ИНН") Тогда	
			НовыйЭлемент.ИНН =ДанныеКонтрагента[ТипКонтрагента+"ИНН"];
		КонецЕсли;
		
		Если ДанныеКонтрагента.Свойство(ТипКонтрагента+"КПП") Тогда	
			НовыйЭлемент.КПП =ДанныеКонтрагента[ТипКонтрагента+"КПП"];
		КонецЕсли;
		
		Если ТипКонтрагента="ПЛАТЕЛЬЩИК" Тогда
			НовыйЭлемент.Покупатель=Истина;
		ИначеЕсли ТипКонтрагента="ПОЛУЧАТЕЛЬ" Тогда
			НовыйЭлемент.Поставщик=Истина;
		КонецЕсли;
		
		НовыйЭлемент.Записать();
		
		НомерСчета      = ДанныеКонтрагента[ТипКонтрагента+"СЧЕТ"];
		КодВалюты=Сред(НомерСчета,6,3);
		ВалютаСчета=Справочники.Валюты.НайтиПоКоду(КодВалюты);

		Если НЕ ВалютаСчета=Справочники.Валюты.ПустаяСсылка() Тогда // Знаем валюту счета и можем создать элемент.
		
		НовыйСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
		НовыйСчет.Наименование    = "Основной расчетный счет";
		НовыйСчет.НомерСчета      = НомерСчета;
		НовыйСчет.Владелец        = НовыйЭлемент.Ссылка;
		НовыйСчет.ВидСчета        = "Расчетный";
		НовыйСчет.ВалютаДенежныхСредств = ВалютаСчета;
			
		Если НЕ ПрямыеРасчеты Тогда
			
			Если ДанныеКонтрагента.Свойство(ТипКонтрагента+"БАНК1") Тогда					
				
				НовыйБанкКорр = Справочники.Банки.СоздатьЭлемент();
				НовыйБанкКорр.Наименование = ДанныеКонтрагента[ТипКонтрагента+"БАНК1"];
				
				Если ДанныеКонтрагента.Свойство(ТипКонтрагента+"БАНК2") Тогда	
					НовыйБанкКорр.Город        = ДанныеКонтрагента[ТипКонтрагента+"БАНК2"];
				КонецЕсли;
				
				Если ДанныеКонтрагента.Свойство(ТипКонтрагента+"КОРСЧЕТ") Тогда	
					НовыйБанкКорр.КоррСчет     = ДанныеКонтрагента[ТипКонтрагента+"КОРСЧЕТ"];
				КонецЕсли;
				
				НовыйБанкКорр.Записать();
				НовыйСчет.БанкДляРасчетов = НовыйБанкКорр.Ссылка;
			
			КонецЕсли;

			Если ДанныеКонтрагента.Свойство(ТипКонтрагента+"3") Тогда
				
				НовыйБанк = Справочники.Банки.СоздатьЭлемент();
				НовыйБанк.Наименование = ДанныеКонтрагента[ТипКонтрагента+"3"];
				
				Если ДанныеКонтрагента.Свойство(ТипКонтрагента+"4") Тогда	
					НовыйБанкКорр.КоррСчет     = ДанныеКонтрагента[ТипКонтрагента+"4"];
				КонецЕсли;
				
				Если ДанныеКонтрагента.Свойство(ТипКонтрагента+"РАСЧСЧЕТ") Тогда	
					НовыйБанк.КоррСчет     = ДанныеКонтрагента[ТипКонтрагента+"РАСЧСЧЕТ"];
				КонецЕсли;
						
				НовыйБанк.Записать();
				
				НовыйСчет.Банк            = НовыйБанк.Ссылка;
								
			КонецЕсли;

		КонецЕсли;
		
		НовыйСчет.Записать();
		НовыйЭлемент.ОсновнойБанковскийСчет =НовыйСчет.Ссылка;
		
		КонецЕсли;
				
		//Договор контрагента
		
		Если НовыйЭлемент.Метаданные().Реквизиты.Найти("ОсновнойДоговорКонтрагента") <> Неопределено Тогда
			НовыйЭлемент.ОсновнойДоговорКонтрагента =СоздатьНужныйДоговор(НовыйЭлемент.Ссылка, ТекОрганизация,ТипКонтрагента="ПЛАТЕЛЬЩИК");
		КонецЕсли;
		
		НовыйЭлемент.ГоловнойКонтрагент=НовыйЭлемент.Ссылка;
		
		НовыйЭлемент.Записать();		
		Сообщить("Элемент создан");
		
		Если ОткрыватьФорму Тогда
			ОткрытьЗначение(НовыйЭлемент);
		КонецЕсли;
		
		Контрагент =НовыйЭлемент.Ссылка;

	Иначе
		
		Предупреждение("Контрагент """+СокрЛП(Контрагент.Наименование)+""" с ИНН :"+ИННКраткий+" уже существует.", , "Контрагент создан...");
		
		Если ОткрыватьФорму Тогда
			ОткрытьЗначение(Контрагент);
		КонецЕсли;
		
	КонецЕсли;

	Возврат Контрагент;

КонецФункции //СоздатьКонтрагента(Контрагент)

// Ищет контрагента по ИНН
//
Функция НайтиКонтрагентаПоИНН(Вид,ИННКраткий)
	
	Ссылка =Справочники[Вид].НайтиПоРеквизиту("ИНН",ИННКраткий);
	
	Если Ссылка.Пустая() Тогда
		Если Вид="Контрагенты" Тогда
			Сообщить("Не найден контрагент. Проверьте ИНН "+ИННКраткий, СтатусСообщения.Информация);
		Иначе
			Сообщить("Не найдена организация. Проверьте ИНН "+ИННКраткий, СтатусСообщения.Информация);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

// Ищет контрагента по ИНН
//
Функция НайтиКонтрагентаПоИННиКПП(Вид,ИННКраткий,КПП)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН И
	|	Контрагенты.КПП = &КПП";
	
	Запрос.УстановитьПараметр("ИНН",ИННКраткий);
	Запрос.УстановитьПараметр("КПП",КПП);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Контрагент;
		
	Иначе // Ищем по пустому КПП
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент,
		|	Контрагенты.Наименование КАК КонтрагентНаименование
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН И
		|	Контрагенты.КПП = &ПустойКПП";
		
		Запрос.УстановитьПараметр("ИНН",ИННКраткий);
		Запрос.УстановитьПараметр("ПустойКПП","");
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			
			Сообщить("Контрагент с ИНН "+ ИННКраткий+" и КПП "+КПП+" не обнаружен. Обрабатывается контрагент:
			|"+Результат.КонтрагентНаименование+"(ИНН "+ИННКраткий+", КПП )");
			
			Возврат Результат.Контрагент;
			
		Иначе
			
			Возврат Справочники.Контрагенты.ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецФункции

// Ищет расчетный счет для контрагента
//
Функция НайтиРасчетныйСчет(Слово,Контрагент)
		
	НомерСчета = СокрЛП(РеквизитыДокумента[Слово+"Счет"]);
	
	Ссылка = Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета",НомерСчета,,Контрагент);
	
	Если Ссылка.Пустая() Тогда	
		Если ТипЗнч(Контрагент)=Тип("СправочникСсылка.Организации") Тогда
			Сообщить("Расчетный счет не соответствует организации.", СтатусСообщения.Информация);
		Иначе
			Сообщить("Расчетный счет не соответствует контрагенту.", СтатусСообщения.Информация);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция НайтиНужныйДоговор(Владелец,ТекОрганизация)
	
	Ссылка =Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию("Основной договор",,,Владелец);
	
	Если Ссылка.Пустая() Тогда
		Сообщить("Основной договор не найден", СтатусСообщения.Информация);
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции //НайтиНужныйДоговор(Имя, Владелец)

//поиск и создание договоров
Функция СоздатьНужныйДоговор(Владелец, ТекОрганизация,Плательщик) Экспорт
		
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ДоговорыКонтрагентов.Ссылка
	             |ИЗ
	             |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	             |
	             |ГДЕ
	             |	ДоговорыКонтрагентов.Организация = &Организация И
	             |	ДоговорыКонтрагентов.Владелец = &Владелец И
	             |	ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора";
				 
	Запрос.УстановитьПараметр("Организация",ТекОрганизация);
	Запрос.УстановитьПараметр("Владелец",Владелец);
	
	Если Плательщик Тогда
		Запрос.УстановитьПараметр("ВидДоговора",Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Иначе
		Запрос.УстановитьПараметр("ВидДоговора",Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	КонецЕсли;
	
	Выборка=Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Ссылка;
		
	Иначе
		
		НайденныйДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		
		НайденныйДоговорОбъект.Наименование          = "Основной договор";
		НайденныйДоговорОбъект.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
		
		НайденныйДоговорОбъект.ВалютаВзаиморасчетов = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяВалютаВзаиморасчетов");
		Если ЗначениеНеЗаполнено(НайденныйДоговорОбъект.ВалютаВзаиморасчетов) Тогда
			НайденныйДоговорОбъект.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли;
		
		Если НЕ НайденныйДоговорОбъект.ВалютаВзаиморасчетов=Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			НайденныйДоговорОбъект.РасчетыВУсловныхЕдиницах=Истина;
		КонецЕсли;
		
		НайденныйДоговорОбъект.Организация = ТекОрганизация;
		
		Если ЗначениеНеЗаполнено(НайденныйДоговорОбъект.Организация) Тогда
			Выборка = Справочники.Организации.Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДоговорОбъект.Организация = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		НайденныйДоговорОбъект.Владелец              = Владелец;
		НайденныйДоговорОбъект.ВидУсловийДоговора    = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.БезДополнительныхУсловий;
		
		Если Плательщик Тогда
			НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
		Иначе
			НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
		КонецЕсли; 
		
		Попытка
			НайденныйДоговорОбъект.Записать();
		Исключение
			СообщитьОбОшибке(ОписаниеОшибки(),, "Не удалось записать основной договор контрагента.");
		КонецПопытки;

		Ссылка =НайденныйДоговорОбъект.Ссылка;
		
		Возврат Ссылка;
	
	КонецЕсли;
			
КонецФункции //СоздатьНужныйДоговор(Имя, Владелец)

//переводим "НАЗНАЧЕНИЕПЛАТЕЖА" в одну строку
Функция НазначениеПлатежа(Реквизиты)//структура
	
	Стр      ="";
	СтрНомер ="";
	
	Если НЕ Реквизиты.Свойство("НАЗНАЧЕНИЕПЛАТЕЖА", Стр) Тогда
		
		Номер =1;
		
		Пока Реквизиты.Свойство("НАЗНАЧЕНИЕПЛАТЕЖА"+Номер, СтрНомер) Цикл
			Стр =Стр+СтрНомер+Символы.ПС;
			Номер =Номер+1;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Стр;
	
КонецФункции //НазначениеПлатежа(РеквизитыДокумента)

// Загружает платежный документ
//
Функция ЗагрузитьПлатежныйДокумент()
	
	Перем ВидДокументаВФайле,ДатаДок,НомерДок,СуммаДок, ИННКраткий, КПП;
	
	ВидДокументаВФайле = ПолучитьЗначениеРеквизита("СекцияДокумент");
	ДатаСписано   = ФорматДаты(ПолучитьЗначениеРеквизита("ДатаСписано"));
	ДатаПоступило = ФорматДаты(ПолучитьЗначениеРеквизита("ДатаПоступило"));
	
	ДатаДок = ПолучитьЗначениеРеквизита("Дата");
	ДатаДок = ФорматДаты(ДатаДок);
	
	НомерДок = ПолучитьЗначениеРеквизита("Номер");
	
	//Удалим ведущие нули (если есть)
	// удаление ведущих нулей
	Пока Лев(НомерДок, 1)="0" Цикл
		НомерДок=Сред(НомерДок, 2);
	КонецЦикла;
	
	СуммаДок = ПолучитьЗначениеРеквизита("Сумма");
	СуммаДок = Число(СуммаДок);
	
	Если СуммаДок<0 Тогда
		СуммаДок=СуммаДок*(-1);
	КонецЕсли;
	
	СчетПлательщика=ПолучитьЗначениеРеквизита("ПлательщикСчет");
	СчетПолучателя=ПолучитьЗначениеРеквизита("ПолучательСчет");
	
	ВидДвижения="";
	
	// Определяем вид движения
	СчетОрганизации=Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета",СчетПлательщика,,Организация);
	
	Если НЕ СчетОрганизации=Справочники.БанковскиеСчета.ПустаяСсылка() Тогда
		
		ВидДвижения="Платеж";
		
	Иначе
		
		СчетОрганизации=Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета",СчетПолучателя,,Организация);
		
		Если НЕ СчетОрганизации=Справочники.БанковскиеСчета.ПустаяСсылка() Тогда
			
			ВидДвижения="Поступление";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидДвижения="" Тогда
			
		Сообщить("Документ "+ВидДокументаВФайле+" №"+НомерДок+" от "+ДатаДок+": ни счет плательщика, ни счет получателя
		|не принадлежат выбранной организации. Документ не может быть записан.");
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ЕстьНомерВходящего=Ложь;
	
	Если ВидДвижения="Платеж" Тогда
		
		Если ВидДокументаВФайле = "Платежное поручение" Тогда
			
			ВидДокумента ="ПлатежноеПоручениеИсходящее";
			СписокЖурналов.НайтиПоЗначению("ПлатежноеПоручениеИсходящее").Пометка =истина;
			
		ИначеЕсли (ВидДокументаВФайле = "Аккредитив") ИЛИ (ВидДокументаВФайле = "Заявление на аккредитив") Тогда
			
			ВидДокумента ="АккредитивПереданный";
			СписокЖурналов.НайтиПоЗначению("АккредитивПереданный").Пометка =истина;
			
		ИначеЕсли ВидДокументаВФайле = "Платежное требование" Тогда
			
			ВидДокумента ="ПлатежноеТребованиеПолученное";
			СписокЖурналов.НайтиПоЗначению("ПлатежноеТребованиеПолученное").Пометка =истина;
			ЕстьНомерВходящего=Истина;
			
		ИначеЕсли ВидДокументаВФайле = "Инкассовое поручение" Тогда
			
			ВидДокумента ="ИнкассовоеПоручениеПолученное";
			СписокЖурналов.НайтиПоЗначению("ИнкассовоеПоручениеПолученное").Пометка =истина;
			ЕстьНомерВходящего=Истина;
			
		Иначе
			
			ВидДокумента ="ПлатежныйОрдерСписаниеДенежныхСредств";
			СписокЖурналов.НайтиПоЗначению("ПлатежныйОрдерСписаниеДенежныхСредств").Пометка =истина;
				
		КонецЕсли;
		
		ДатаОплаты 				= ДатаСписано;
		Корреспондент 			= "Получатель";
		ВидПлатежногоОрдера 	= "ПлатежныйОрдерСписаниеДенежныхСредств";
		
	ИначеЕсли ВидДвижения="Поступление" Тогда	
		
		Если ВидДокументаВФайле = "Платежное поручение" Тогда
			
			ВидДокумента ="ПлатежноеПоручениеВходящее";
			СписокЖурналов.НайтиПоЗначению("ПлатежноеПоручениеВходящее").Пометка =истина;
			ЕстьНомерВходящего=Истина;
			
		ИначеЕсли (ВидДокументаВФайле = "Аккредитив") ИЛИ (ВидДокументаВФайле = "Заявление на аккредитив") Тогда
			
			ВидДокумента ="АккредитивПолученный";
			СписокЖурналов.НайтиПоЗначению("АккредитивПолученный").Пометка =истина;
			ЕстьНомерВходящего=Истина;
			
		ИначеЕсли ВидДокументаВФайле = "Платежное требование" Тогда
			
			ВидДокумента ="ПлатежноеТребованиеВыставленное";
			СписокЖурналов.НайтиПоЗначению("ПлатежноеТребованиеВыставленное").Пометка =истина;
				
		ИначеЕсли ВидДокументаВФайле = "Инкассовое поручение" Тогда
			
			ВидДокумента ="ИнкассовоеПоручениеПереданное";
			СписокЖурналов.НайтиПоЗначению("ИнкассовоеПоручениеПереданное").Пометка =истина;
			
		Иначе
			
			ВидДокумента ="ПлатежныйОрдерПоступлениеДенежныхСредств";
			СписокЖурналов.НайтиПоЗначению("ПлатежныйОрдерПоступлениеДенежныхСредств").Пометка =истина;
				
		КонецЕсли;
		
		ДатаОплаты 				= ДатаПоступило;
		Корреспондент 			= "Плательщик";
		ВидПлатежногоОрдера 	= "ПлатежныйОрдерПоступлениеДенежныхСредств";
		
	КонецЕсли;
	
	ДатаОперации = ПустаяДата;
		
	Если Корреспондент = "Получатель" Тогда
		
		РеквизитыДокумента.Свойство("ПолучательИНН", ИННКраткий);
		РеквизитыДокумента.Свойство("ПолучательКПП", КПП);
		
		Если Не ПустаяСтрока(КПП) Тогда
			Контрагент       =НайтиКонтрагентаПоИННиКПП("Контрагенты",ИННКраткий,КПП);
		Иначе	
			Контрагент       =НайтиКонтрагентаПоИНН("Контрагенты",ИННКраткий);
		КонецЕсли;
		
		СчетКонтрагента  =НайтиРасчетныйСчет("Получатель",Контрагент);

		Если ВидДокумента ="ПлатежноеПоручениеИсходящее" Тогда
		    ВидОперации =Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
		Иначе
			ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику
		КонецЕсли;
		
	ИначеЕсли Корреспондент="Плательщик" Тогда
				
		РеквизитыДокумента.Свойство("ПлательщикИНН", ИННКраткий);
		РеквизитыДокумента.Свойство("ПлательщикКПП", КПП);
		
		Если Не ПустаяСтрока(КПП) Тогда
			Контрагент       =НайтиКонтрагентаПоИННиКПП("Контрагенты",ИННКраткий,КПП);
		Иначе	
			Контрагент       =НайтиКонтрагентаПоИНН("Контрагенты",ИННКраткий);
		КонецЕсли;
		
		СчетКонтрагента  =НайтиРасчетныйСчет("Плательщик",Контрагент);

		ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
		
	КонецЕсли;
	
	Оплачено		 =Истина;
	
	//проверяем существует ли уже такой же документ
	Если ВидДокумента = Неопределено Тогда
		
		СсылкаДок =Неопределено;
		НовыйДок  =Неопределено;
		
	Иначе
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ПлатежныйДокумент.Ссылка КАК Ссылка,";
		Если Не Найти (ВидДокумента,"ПлатежныйОрдер")>0 Тогда
			Запрос.Текст=Запрос.Текст+"
			|ПлатежныйДокумент.Оплачено КАК Оплачено,";
		КонецЕсли;
		Запрос.Текст=Запрос.Текст+"
		|	ПлатежныйДокумент.СуммаДокумента КАК СуммаДокумента,
		|	ПлатежныйДокумент.Контрагент,
		|	ПлатежныйДокумент.СчетКонтрагента
		|ИЗ
		|	Документ."+ВидДокумента+" КАК ПлатежныйДокумент
		|
		|ГДЕ
		|	(НЕ ПлатежныйДокумент.ПометкаУдаления)
		|И	ПлатежныйДокумент.СчетОрганизации=&СчетОрганизации
		|И  (ПлатежныйДокумент.Контрагент=&Контрагент ИЛИ ПлатежныйДокумент.Контрагент=&ПустойКонтрагент)
		|И  (ПлатежныйДокумент.СчетКонтрагента=&СчетКонтрагента ИЛИ ПлатежныйДокумент.СчетКонтрагента=&ПустойСчетКонтрагента)";
		
		Если ЕстьНомерВходящего Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|И ПлатежныйДокумент.НомерВходящегоДокумента=&Номер
			|И ПлатежныйДокумент.ДатаВходящегоДокумента МЕЖДУ &ДатаНач И &ДатаКон";
			Запрос.УстановитьПараметр("ДатаНач",НачалоГода(ДатаДок));
			Запрос.УстановитьПараметр("ДатаКон",КонецГода(ДатаДок));
			Запрос.УстановитьПараметр("Номер",НомерДок);
			
		Иначе
			
			Запрос.Текст=Запрос.Текст+"
			|И ПлатежныйДокумент.Номер=&Номер
			|И ПлатежныйДокумент.Дата МЕЖДУ &ДатаНач И &ДатаКон";
			Запрос.УстановитьПараметр("ДатаНач",НачалоГода(ДатаДок));
			Запрос.УстановитьПараметр("ДатаКон",КонецГода(ДатаДок));
			
			//Формируем номер, под которым документ хранится в базе
			Префикс=Организация.Префикс;
			ЧислоНулей=Метаданные.Документы[ВидДокумента].ДлинаНомера-СтрДлина(Префикс)-СтрДлина(НомерДок);
			
			НомерВБазе=Префикс;
			
			Для Инд=1 По ЧислоНулей Цикл
				
				НомерВБазе=НомерВБазе+"0";
				
			КонецЦикла;
			
			НомерВБазе=НомерВБазе+НомерДок;
			
			Запрос.УстановитьПараметр("Номер",НомерВБазе);
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СчетОрганизации",СчетОрганизации);
		Запрос.УстановитьПараметр("Контрагент",Контрагент);
		Запрос.УстановитьПараметр("СчетКонтрагента",СчетКонтрагента);
		Запрос.УстановитьПараметр("ПустойКонтрагент",Справочники.Контрагенты.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустойСчетКонтрагента",Справочники.БанковскиеСчета.ПустаяСсылка());
		
		Выборка=Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() И Не Выборка.Ссылка=Неопределено Тогда
			
			СсылкаДок = Выборка.Ссылка;
			НовыйДок = Ложь;
			
			Если СуммаДок < Выборка.СуммаДокумента 
				И (НЕ Найти (ВидДокумента,"ПлатежныйОрдер")>0)
				И (НЕ Выборка.Оплачено)
				И (НЕ (ЗначениеНеЗаполнено(Выборка.Контрагент) ИЛИ ЗначениеНеЗаполнено(Выборка.СчетКонтрагента))) Тогда
				
				Запрос =Новый Запрос();
				Запрос.Текст ="ВЫБРАТЬ
				|СУММА(ПлатежныйОрдер.СуммаДокумента) КАК СуммаДокумента
				|ИЗ
				|	Документ."+ВидПлатежногоОрдера+" КАК ПлатежныйОрдер
				|
				|ГДЕ
				|	ПлатежныйОрдер.РасчетныйДокумент = &ТекущийДокумент
				|И
				| ПлатежныйОрдер.ПометкаУдаления = ЛОЖЬ
				|И
				| ПлатежныйОрдер.Проведен = ИСТИНА
				|";
				
				Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаДок);
				Результат =Запрос.Выполнить().Выбрать();
				
				Если Результат.Следующий() Тогда
					
					СуммаПоЗапросу =?(Результат.СуммаДокумента = NULL, 0, Результат.СуммаДокумента);
					
					Если СуммаПоЗапросу >= СсылкаДок.СуммаДокумента Тогда
						Сообщить("Для документа "+Выборка.Ссылка+" уже произведено погашение суммы.");
						Возврат Неопределено;
					ИначеЕсли (СуммаПоЗапросу+СуммаДок) > СсылкаДок.СуммаДокумента Тогда
						
						Сообщить("По документу "+Строка(Выборка.Ссылка)+"сумма оплаты по платежным ордерам превышает сумму документа",СтатусСообщения.Важное);
						
						Если ВидПлатежногоОрдера 	= "ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда
							
							Сообщить("Проверьте записи по регистру ""Денежные средства к получению""");
							
						Иначе
							
							Сообщить("Проверьте записи по регистру ""Денежные средства к списанию""");
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ДокОснование =СсылкаДок;
				СсылкаДок		 =Неопределено;
				ВидДокумента =ВидПлатежногоОрдера;
				СписокЖурналов.НайтиПоЗначению(ВидПлатежногоОрдера).Пометка =истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если (СсылкаДок = Неопределено) Тогда
		
		Объект = Документы[ВидДокумента].СоздатьДокумент();
		Объект.Организация=Организация;
							
		Если ВидДокумента = ВидПлатежногоОрдера Тогда
			
			Объект.РасчетныйДокумент =ДокОснование;
			Объект.ДокументОснование =ДокОснование;
			Объект.Дата  =ТекущаяДата();
			УстановитьНомерДокумента(Объект);
			
		ИначеЕсли ЕстьНомерВходящего Тогда
			
			Объект.НомерВходящегоДокумента = НомерДок;
			Объект.ДатаВходящегоДокумента  = ДатаДок;
		    Объект.Дата  =ТекущаяДата();
			УстановитьНомерДокумента(Объект);
		
		Иначе
			
			//Формируем номер, под которым документ хранится в базе
			Префикс=Организация.Префикс;
			ЧислоНулей=Метаданные.Документы[ВидДокумента].ДлинаНомера-СтрДлина(Префикс)-СтрДлина(НомерДок);
			
			НомерВБазе=Префикс;
			
			Для Инд=1 По ЧислоНулей Цикл
				
				НомерВБазе=НомерВБазе+"0";
				
			КонецЦикла;
			
			Объект.Номер=НомерВБазе+НомерДок;
			Объект.Дата=ДатаДок;
					
		КонецЕсли;
				
		Попытка
			Объект.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
		Исключение
			Сообщить("Неудачная попытка создания документа "+Строка(Объект), СтатусСообщения.Внимание);
			Возврат Неопределено;
		КонецПопытки;
					
		НовыйДок = Истина;
		
	Иначе
		
		Объект = СсылкаДок.ПолучитьОбъект();
		
	КонецЕсли;	
	
	Объект.ПометкаУдаления = Ложь;
	
	Замены=0;
			
	Если ВидДокумента = "ПлатежноеПоручениеИсходящее" 
		ИЛИ ВидДокумента = "ИнкассовоеПоручениеПереданное"
		ИЛИ ВидДокумента = "АккредитивПереданный"
		ИЛИ ВидДокумента = "ПлатежноеТребованиеВыставленное" Тогда
		
		КППКраткий ="";
		
		РеквизитыДокумента.Свойство("ПлательщикИНН", ИННКраткий);
		ИННПлательщика    =СокрЛП(ИННКраткий);
			
		РеквизитыДокумента.Свойство("ПлательщикКПП", КППКраткий);
		КПППлательщика    =СокрЛП(КППКраткий);
				
		РеквизитыДокумента.Свойство("ПолучательИНН", ИННКраткий);
		ИННПолучателя    =СокрЛП(ИННКраткий);
		
		РеквизитыДокумента.Свойство("ПолучательКПП", КППКраткий);
		КПППолучателя    =СокрЛП(КППКраткий);
							
		НазначениеПлатежа =НазначениеПлатежа(РеквизитыДокумента);
		
	КонецЕсли;
				
	//информация о ДоговореВзаиморасчетов в файле не передается, но
	//она нужна для корректной записи документов
	//поэтому устанавливаем договор по умолчанию "Основной договор"
	
	Если Не Контрагент.Пустая() Тогда
		Договор =СоздатьНужныйДоговор(Контрагент, Организация, Корреспондент="Плательщик");
	КонецЕсли;
	
	//валюта
	ВалютаДокумента	=СчетОрганизации.ВалютаДенежныхСредств;
	//курс
	Если ВалютаДокумента.Пустая() Тогда
		КурсДокумента      =1;
		КратностьДокумента =1;
	Иначе
		СтруктураКурсаВалюты        = ПолучитьКурсВалюты(ВалютаДокумента, ДатаОплаты);
		КурсДокумента      			= СтруктураКурсаВалюты.Курс;
		КратностьДокумента 			= СтруктураКурсаВалюты.Кратность;
	КонецЕсли;
	//проставляем признаки того, что платеж прошел:
	
	Если НЕ ДатаОплаты = ПустаяДата Тогда
		Замены = Замены + ИзменитьАтрибут(Объект, "Оплачено", Истина, НовыйДок);
		Замены = Замены + ИзменитьАтрибут(Объект, "ДатаОплаты", ДатаОплаты, НовыйДок);
	КонецЕсли;	
		
	//Замена реквизитов на корректные функцией:
	//Функция ИзменитьАтрибут(Объект, Имя, Значение, НовыйОбъект=Ложь)
	
	// дата документа
	Замены = Замены + ИзменитьАтрибут(Объект, "Дата", ДатаДок, НовыйДок);
	// номер документа
	Замены = Замены + ИзменитьАтрибут(Объект, "Номер", НомерДок, НовыйДок);
	
	//реквизиты налогового платежа
	Если РеквизитыДокумента.Свойство("СтатусСоставителя") И СтрДлина(ПолучитьЗначениеРеквизита("СтатусСоставителя"))=2 Тогда
		
		Если ВидДокумента="ПлатежноеПоручениеИсходящее" Тогда
			ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога;
		Иначе
			ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога;
		КонецЕсли;
		
		Замены = Замены + ИзменитьАтрибут(Объект, "СтатусСоставителя",   ПолучитьЗначениеРеквизита("СтатусСоставителя"), НовыйДок);
		Замены = Замены + ИзменитьАтрибут(Объект, "КПППлательщика",      ПолучитьЗначениеРеквизита("ПлательщикКПП"), НовыйДок);
		Замены = Замены + ИзменитьАтрибут(Объект, "КПППолучателя",       ПолучитьЗначениеРеквизита("ПолучательКПП"), НовыйДок);
		Замены = Замены + ИзменитьАтрибут(Объект, "КодБК",               ПолучитьЗначениеРеквизита("ПоказательКБК"), НовыйДок);
		Замены = Замены + ИзменитьАтрибут(Объект, "КодОКАТО",            ПолучитьЗначениеРеквизита("ОКАТО"), НовыйДок);
		Замены = Замены + ИзменитьАтрибут(Объект, "ПоказательОснования", ПолучитьЗначениеРеквизита("ПоказательОснования"), НовыйДок);
		Замены = Замены + ИзменитьАтрибут(Объект, "ПоказательПериода",   ПолучитьЗначениеРеквизита("ПоказательПериода"),   НовыйДок);
		Замены = Замены + ИзменитьАтрибут(Объект, "ПоказательНомера",    ПолучитьЗначениеРеквизита("ПоказательНомера"),    НовыйДок);
		Замены = Замены + ИзменитьАтрибут(Объект, "ПоказательДаты",      ФорматДаты(ПолучитьЗначениеРеквизита("ПоказательДаты")),НовыйДок);
		Замены = Замены + ИзменитьАтрибут(Объект, "ПоказательТипа",      ПолучитьЗначениеРеквизита("ПоказательТипа"),      НовыйДок);
		
	КонецЕсли;
	
	МетаданныеДокумента=Объект.Метаданные();
	
	//Вид операции по документу
	Если ЗначениеНеЗаполнено(Объект.ВидОперации) Тогда
		Замены = Замены + ИзменитьАтрибут(Объект, "ВидОперации", ВидОперации, НовыйДок);
	КонецЕсли;
	
	Замены = Замены + ИзменитьАтрибут(Объект, "СуммаДокумента", СуммаДок, НовыйДок);
	
	Замены = Замены + ИзменитьАтрибут(Объект, "ВалютаДокумента", ВалютаДокумента, НовыйДок);
		
	Замены = Замены + ИзменитьАтрибут(Объект, "Организация", Организация, НовыйДок);
	
	Замены = Замены + ИзменитьАтрибут(Объект, "СчетОрганизации", СчетОрганизации, НовыйДок);
	
	
	//ИННПлательщика
	Если ЕстьРеквизитДокумента("ИННПлательщика",МетаданныеДокумента) Тогда
		Замены = Замены + ИзменитьАтрибут(Объект, "ИННПлательщика", ИННПлательщика, НовыйДок);
	КонецЕсли;
	//КПППлательщика
	Если ЕстьРеквизитДокумента("КПППлательщика",МетаданныеДокумента) Тогда
		Замены = Замены + ИзменитьАтрибут(Объект, "КПППлательщика", КПППлательщика, НовыйДок);
	КонецЕсли;
	
	//ИННПолучателя
	Если ЕстьРеквизитДокумента("ИННПолучателя",МетаданныеДокумента) Тогда
		Замены = Замены + ИзменитьАтрибут(Объект, "ИННПолучателя", ИННПолучателя, НовыйДок);
	КонецЕсли;
	//КПППолучателя
	Если ЕстьРеквизитДокумента("КПППолучателя",МетаданныеДокумента) Тогда
		Замены = Замены + ИзменитьАтрибут(Объект, "КПППолучателя", КПППолучателя, НовыйДок);
	КонецЕсли;
	
	//контрагент
	
	ЕстьЗаменаКонтрагента=Ложь;
	
	Если ИзменитьАтрибут(Объект, "Контрагент", Контрагент, НовыйДок)=1 Тогда
		ЕстьЗаменаКонтрагента=Истина;
	    Замены = Замены +1;
	КонецЕсли;
		
	Замены = Замены + ИзменитьАтрибут(Объект, "СчетКонтрагента", СчетКонтрагента, НовыйДок);
		
	Если ЕстьРеквизитДокумента("ВидПлатежа",МетаданныеДокумента) Тогда
		Замены = Замены + ИзменитьАтрибут(Объект, "ВидПлатежа", ПолучитьЗначениеРеквизита("ВидПлатежа"), НовыйДок);
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("СрокДействия",МетаданныеДокумента) Тогда
		Замены = Замены + ИзменитьАтрибут(Объект, "СрокДействия", ПолучитьЗначениеРеквизита("СрокДействия"), НовыйДок);
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("ОчередностьПлатежа",МетаданныеДокумента) Тогда
		Замены = Замены + ИзменитьАтрибут(Объект, "ОчередностьПлатежа", ПолучитьЗначениеРеквизита("Очередность"), НовыйДок);
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("ВидАккредитива",МетаданныеДокумента) Тогда
		Замены = Замены + ИзменитьАтрибут(Объект, "ВидАккредитива", ПолучитьЗначениеРеквизита("ВидАккредитива"), НовыйДок);
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("САкцептом",МетаданныеДокумента) Тогда
		Усл1 = ПолучитьЗначениеРеквизита("УсловиеОплаты1");
		Если Найти(Усл1,"С акцептом")>0 Тогда
			Замены = Замены + ИзменитьАтрибут(Объект, "САкцептом", Истина, НовыйДок);
		ИначеЕсли Найти(Усл1,"Без акцепта")>0 Тогда
			Замены = Замены + ИзменитьАтрибут(Объект, "САкцептом", Ложь, НовыйДок);
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете",МетаданныеДокумента) И НовыйДок Тогда
		Если (Контрагент.Пустая()) ИЛИ
				(Договор.Пустая())   ИЛИ
				 (СчетКонтрагента.Пустая()) Тогда
			Замены = Замены + ИзменитьАтрибут(Объект, "ОтражатьВБухгалтерскомУчете", Ложь, НовыйДок);
			Замены = Замены + ИзменитьАтрибут(Объект, "ОтражатьВНалоговомУчете", Ложь, НовыйДок);
		Иначе
			Замены = Замены + ИзменитьАтрибут(Объект, "ОтражатьВБухгалтерскомУчете", Истина, НовыйДок);
			Замены = Замены + ИзменитьАтрибут(Объект, "ОтражатьВНалоговомУчете", Истина, НовыйДок);
		КонецЕсли;
	КонецЕсли;
		
	Если ЕстьРеквизитДокумента("Оплачено",МетаданныеДокумента) Тогда
		Замены = Замены + ИзменитьАтрибут(Объект, "Оплачено", Истина, НовыйДок);
	КонецЕсли;
	
	//Если (НЕ Метаданные.ПланыСчетов.Найти("Хозрасчетный")=Неопределено) И (ЕстьРеквизитДокумента("СчетУчетаРасчетовСКонтрагентом",МетаданныеДокумента)) Тогда
	//	
	//	Если НЕ (ЗначениеНеЗаполнено(Контрагент) ИЛИ ЗначениеНеЗаполнено(Договор)) Тогда
	//		
	//		СчетаУчета = ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, Договор);
	//		
	//		Если Корреспондент="Плательщик" Тогда
	//			
	//			СчетУчетаРегистр=СчетаУчета.СчетРасчетовПокупателя;
	//			СчетАвансаРегистр=СчетаУчета.СчетАвансовПокупателя;
	//			
	//		Иначе
	//			
	//			СчетУчетаРегистр=СчетаУчета.СчетРасчетов;
	//			СчетАвансаРегистр=СчетаУчета.СчетАвансов;
	//			
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//	Счет60_01 =ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
	//	Счет60_02 =ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;
	//	Счет60_21 =ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиВал;
	//	Счет60_22 =ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал;
	//	
	//	Счет62_01 =ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
	//	Счет62_02 =ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
	//	Счет62_21 =ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиВал;
	//	Счет62_22 =ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал;
	//	
	//	Если ВалютаДокумента.Код = "810" Тогда //рубль
	//		Если ДатаПоступило = ПустаяДата Тогда //платим мы в рублях
	//			СчетУчета  =Счет60_01;
	//			СчетАванса =Счет60_02;
	//		ИначеЕсли ДатаСписано = ПустаяДата Тогда //платят нам в рублях
	//			СчетУчета  =Счет62_01;
	//			СчетАванса =Счет62_02;
	//		КонецЕСли;
	//	Иначе //валюта
	//		Если ДатаПоступило = ПустаяДата Тогда //платим мы в валюте
	//			СчетУчета  =Счет60_21;
	//			СчетАванса =Счет60_22;
	//		ИначеЕсли ДатаСписано = ПустаяДата Тогда //платят нам в валюте
	//			СчетУчета  =Счет62_21;
	//			СчетАванса =Счет62_22;
	//		КонецЕСли;
	//	КонецЕСли;
	//	
	//	СчетУчета=?(ЗначениеНеЗаполнено(СчетУчетаРегистр),СчетУчета,СчетУчетаРегистр);
	//	СчетАванса=?(ЗначениеНеЗаполнено(СчетАвансаРегистр),СчетАванса,СчетАвансаРегистр);
	//	
	//КонецЕсли;
		
	//Если ЕстьРеквизитДокумента("СчетУчетаРасчетовСКонтрагентом",МетаданныеДокумента) Тогда
	//	Замены = Замены + ИзменитьАтрибут(Объект, "СчетУчетаРасчетовСКонтрагентом", СчетУчета, НовыйДок);
	//КонецЕсли;
	//	
	//Если ЕстьРеквизитДокумента("СчетУчетаРасчетовПоАвансам",МетаданныеДокумента) Тогда
	//	Замены = Замены + ИзменитьАтрибут(Объект, "СчетУчетаРасчетовПоАвансам", СчетАванса, НовыйДок);
	//КонецЕсли;
			
	Если ЕстьРеквизитДокумента("ДополнительныеУсловия",МетаданныеДокумента) Тогда
		Замены = Замены + ИзменитьАтрибут(Объект, "ДополнительныеУсловия", ПолучитьЗначениеРеквизита("ДополнУсловия"), НовыйДок);
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("НазначениеПлатежа",МетаданныеДокумента) Тогда
		Замены = Замены + ИзменитьАтрибут(Объект, "НазначениеПлатежа", НазначениеПлатежа, НовыйДок);
	КонецЕсли;
		
	//Устанавливаем ответственного как: глТекущийПользователь
	Если ЕстьРеквизитДокумента("Ответственный",МетаданныеДокумента) И НовыйДок Тогда
		Замены = Замены + ИзменитьАтрибут(Объект, "Ответственный", ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойОтветственный"), НовыйДок);
	КонецЕсли;
	
	// расшифровка платежа
	Если Объект.Метаданные().ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено И (НовыйДок ИЛИ ЕстьЗаменаКонтрагента) Тогда
		
		Объект.РасшифровкаПлатежа.Очистить();
		СтрокаПлатеж =Объект.РасшифровкаПлатежа.Добавить();
		СтрокаПлатеж.СуммаПлатежа           =СуммаДок;
		
		Если Не ЗначениеНеЗаполнено(Договор) Тогда
		
		СтрокаПлатеж.ДоговорКонтрагента             =Договор;
		
		ВалютаВзаиморасчетов=Договор.ВалютаВзаиморасчетов;
		
		СтруктураКурсаВзаиморасчетов         = ПолучитьКурсВалюты(ВалютаВзаиморасчетов, ДатаОплаты);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		
		
		СтрокаПлатеж.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СуммаДок,
		                            ВалютаДокумента, 
		                            ВалютаВзаиморасчетов,
		                            КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		                            КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
									
		КонецЕсли;
		
		Если НЕ Объект.Метаданные().ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Найти("СчетУчетаРасчетовСКонтрагентом")=Неопределено Тогда
			
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом =СчетУчета;
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     =СчетАванса;
			
		КонецЕсли;
			
		КонецЕсли;
			
	Если (Замены>0) Тогда
		Если (Контрагент.Пустая()) ИЛИ
				(Договор.Пустая())	ИЛИ
				 (СчетКонтрагента.Пустая()) Тогда
			
			//добавляем реквизиты в табличну часть для дальнейнего использования
			СписокНенайденных(РеквизитыДокумента, Объект);	
		КонецЕсли;
		
		Попытка
			Объект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Исключение
			Сообщить("Ошибка проведения документа: "+Объект, СтатусСообщения.Важное);
			Объект.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
		КонецПопытки;
		Если НовыйДок Тогда
			Сообщить("Создан документ: "+Объект);
		Иначе	
			Сообщить("Записан документ: "+Объект);
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Объект.Ссылка;
	
КонецФункции //ЗагрузитьПлатежныйДокумент()
	
// Общая загрузка документов
//
Процедура ЗагрузитьВсеДокументы()
	
	ЗагрДокументы.Очистить();
	
	Для Каждого РеквДокумента Из СписокДокументов Цикл
		РеквизитыДокумента = РеквДокумента.Значение;
		Докум = ЗагрузитьПлатежныйДокумент();
				
		Если (Докум<>Неопределено) И (Докум.Пустая()=Ложь) Тогда
			ЗагрДокументы.Добавить(Докум);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

// Помечает на удаление документ
//
Процедура УдалитьДокумент( Ссылка)
	
	Объект = Ссылка.ПолучитьОбъект();
	
	Если Объект.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;	
	
	Попытка
		Объект.УстановитьПометкуУдаления(Истина);
		Сообщить("Помечен на удаление документ: "+Объект);
	Исключение
		Сообщить("Ошибка пометки на удаление документа: "+Объект,  СтатусСообщения.Важное);
	КонецПопытки;
	
КонецПроцедуры	

// Загрузка заголовка файла обмена
//
Процедура ЗагрузитьСтрокуЗаголовка(Стр,Ном)
	
	ЕстьЗнакРавно=Найти(Стр, "=");
	Имя=Врег(СокрЛП(Лев(Стр, ЕстьЗнакРавно-1))); Значение=Сред(Стр, ЕстьЗнакРавно+1);
	
	Если ЕстьЗнакРавно=0 Тогда
		ОшибкаЗагрузкиТекста(Ном, Стр, "не найден символ ""=""");
	 ИначеЕсли Имя="ДАТАНАЧАЛА" Тогда
		НачДатаЗагрузки=ФорматДаты(СокрЛП(Значение));
	ИначеЕсли Имя="ДАТАКОНЦА" Тогда
		КонДатаЗагрузки=ФорматДаты(СокрЛП(Значение));
	ИначеЕсли Имя="РАСЧСЧЕТ" Тогда
		Значение=СокрЛП(Значение);
		ЗагрРасчетныеСчета.Добавить(Значение);
	ИначеЕсли Имя="ДОКУМЕНТ" Тогда
		Значение = Врег(СокрЛП(Значение));
		
		Для Каждого Строка Из ТаблицаДокументов Цикл
			Если Врег(СокрЛП(Строка.Название))=Значение Тогда
				ЗагрВидыДокументов.Добавить(Строка.Документ);
			КонецЕсли;	
		КонецЦикла;	
				
	КонецЕсли;
	
КонецПроцедуры	

// Загрузка секции расчетного счета
//
Процедура ЗагрузитьСекциюРасчСчета(Ном)
	
	Для Ном=Ном+1 по Текст.КоличествоСтрок() Цикл
		Стр=Текст.ПолучитьСтроку(Ном);
		
		Если ПустаяСтрока(Стр) Тогда 
			Продолжить;
		ИначеЕсли Врег(Лев(СокрЛП(Стр), 5))="КОНЕЦ" Тогда 
			Прервать; 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Загружает строку документа
//
Процедура ЗагрузитьСтрокуДокумента(Стр, Ном)
	
	ЕстьЗнакРавно=Найти(Стр, "=");
	Имя=Врег(СокрЛП(Лев(Стр, ЕстьЗнакРавно-1))); Значение=Сред(Стр, ЕстьЗнакРавно+1);
	
	Если ЕстьЗнакРавно=0 Тогда
		ОшибкаЗагрузкиТекста(Ном, Стр, "не найден символ ""=""");
		Возврат;
	Иначе
		
		Если ((Имя = "ПЛАТЕЛЬЩИКИНН") ИЛИ (Имя = "ПОЛУЧАТЕЛЬИНН")) И (СтрДлина(СокрЛП(Значение)) < 10) Тогда
			Сообщить("Значение поля """ + Имя + """  """ + Значение + """ имеет недопустимо малую длину!", СтатусСообщения.Внимание);
		КонецЕсли;
		
		ТаблицаРеквизитов.Вставить(Имя,Значение);
		
	КонецЕсли;
	
КонецПроцедуры

// Загружает секцию документа
//
Процедура ЗагрузитьСекциюДокумента(Ном)
	
	Перем ВидОплаты,Значение;
	
	ТаблицаРеквизитов = Новый Структура();
	
	Для Ном=Ном по Текст.КоличествоСтрок() Цикл
		Стр=Текст.ПолучитьСтроку(Ном);
		
		Если ПустаяСтрока(Стр) Тогда 
			Продолжить;
		ИначеЕсли Врег(Лев(СокрЛП(Стр), 5))="КОНЕЦ" Тогда 
			Прервать; 
		КонецЕсли;
	
		ЗагрузитьСтрокуДокумента(Стр, Ном);
			
	КонецЦикла;
	
	Если НЕ ТаблицаРеквизитов.Свойство("ПЛАТЕЛЬЩИККПП") Тогда
		ТаблицаРеквизитов.Вставить("ПЛАТЕЛЬЩИККПП","");
	КонецЕсли;
	
	Если НЕ ТаблицаРеквизитов.Свойство("ПОЛУЧАТЕЛЬКПП") Тогда
		ТаблицаРеквизитов.Вставить("ПОЛУЧАТЕЛЬКПП","");
	КонецЕсли;
	
	//проверка обязательных реквизитов для платежного документа	
	ДатаСписаноПолучено = Новый Структура();
	Для Индекс=0 По ОбязательныеВрегЗАГРУЗКИ.Количество()-1 Цикл
		Реквизит =Строка(ОбязательныеВрегЗАГРУЗКИ.Получить(Индекс));
		РезультатПоиска =ТаблицаРеквизитов.Свойство(Реквизит, Значение);
		//может быть или "ДАТАПОСТУПИЛО" или "ДАТАСПИСАНО", но оба обязательны
		//так что проверяем их отдельно, после цикла
		Если (Реквизит = "ДАТАПОСТУПИЛО") ИЛИ (Реквизит = "ДАТАСПИСАНО") Тогда
			ДатаСписаноПолучено.Вставить(Реквизит, Значение);
			Продолжить;
		КонецЕсли;
		
		Если РезультатПоиска = Ложь Тогда
			Сообщить("В файле загрузки отстутствует обязательное поле: "+ОбязательныеВрегЗАГРУЗКИ.Получить(Индекс));
			Возврат;
		КонецЕсли;
		
		//реквизиты для для платежей в бюджет РФ, а их значения не всегда присутствуют
		Если
			(Реквизит = "СТАТУССОСТАВИТЕЛЯ") ИЛИ
			(Реквизит = "ПЛАТЕЛЬЩИККПП") ИЛИ
			(Реквизит = "ПОЛУЧАТЕЛЬКПП") ИЛИ
			(Реквизит = "ПОКАЗАТЕЛЬКБК") ИЛИ
			(Реквизит = "ОКАТО") ИЛИ
			(Реквизит = "ПОКАЗАТЕЛЬОСНОВАНИЯ") ИЛИ
			(Реквизит = "ПОКАЗАТЕЛЬПЕРИОДА") ИЛИ
			(Реквизит = "ПОКАЗАТЕЛЬНОМЕРА") ИЛИ
			(Реквизит = "ПОКАЗАТЕЛЬДАТЫ") ИЛИ
			(Реквизит = "ПОКАЗАТЕЛЬТИПА")
 		Тогда
			Продолжить;
		КонецЕсли;
		
		Если (Значение = Неопределено) ИЛИ (СокрЛП(Значение)="") Тогда
			Сообщить("В файле загрузки отстутствует значение поля: "+ОбязательныеВрегЗАГРУЗКИ.Получить(Индекс));
			Возврат;
		КонецЕсли;
	КонецЦикла;
	//проверяем "ДАТАПОСТУПИЛО" и "ДАТАСПИСАНО"
	Если ДатаСписаноПолучено.Количество() = 0 Тогда
		Сообщить("В файле загрузки отстутствует значение поля: ДАТАПОСТУПИЛО или ДАТАСПИСАНО");
		Возврат;
	ИначеЕсли ДатаСписаноПолучено.Количество() = 1 Тогда
		Для Каждого ДСП Из ДатаСписаноПолучено Цикл
			Если (ДСП.Значение = Неопределено) ИЛИ (СокрЛП(ДСП.Значение)="") Тогда
				Сообщить("В файле загрузки отстутствует значение поля: "+ДСП.Ключ);
				Возврат;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ДатаСписаноПолучено.Количество() = 2 Тогда
		
		ФлагЗначения =Истина;//признак того, что ни одно значение из двух не заполнено
		
		Для Каждого ДСП Из ДатаСписаноПолучено Цикл
			
			ФлагЗначения = ((ДСП.Значение = Неопределено) ИЛИ (СокрЛП(ДСП.Значение)="")) И ФлагЗначения;
			
		КонецЦикла;
						
		Если ФлагЗначения Тогда
			Сообщить("Не заполнены значения ни одного из полей: ДАТАПОСТУПИЛО и ДАТАСПИСАНО");
			Возврат;
		КонецЕсли;
		
	Иначе //ДатаСписаноПолучено.Количество() > 2 - не может быть в одной секции
		Сообщить("ДатаСписаноПолучено.Количество() > 2 - не может быть в одной секции: "+ОбязательныеВрегЗАГРУЗКИ.Получить(Индекс));
		Возврат;
	КонецЕсли;

	ВидДокумента = "";
	Если ТаблицаРеквизитов.Свойство("ВИДОПЛАТЫ",ВидОплаты) = Истина Тогда
		Попытка
			ВидДокумента = ВидыОпераций[ВидОплаты];
		Исключение
			ВидДокумента = "";
		КонецПопытки;		
	КонецЕсли;	
	Если ПустаяСтрока(ВидДокумента) = Ложь Тогда
		ТаблицаРеквизитов["СЕКЦИЯДОКУМЕНТ"]=ВидДокумента;
	КонецЕсли;
	
	СписокДокументов.Добавить(ТаблицаРеквизитов);
	
КонецПроцедуры

//получаем кодировку файла
Функция ПолучитьКодировку(Текст)
	
	Ном      =1;
	Значение ="";
	
	Для Ном=Ном+1 по Текст.КоличествоСтрок() Цикл
		Стр=Текст.ПолучитьСтроку(Ном);
		Если ПустаяСтрока(Стр) Тогда 
			Продолжить;
		ИначеЕсли Врег(Лев(СокрЛП(Стр), 9))="КОДИРОВКА" Тогда 
			Прервать; 
		КонецЕсли;
	КонецЦикла;
	
	ЕстьЗнакРавно    =Найти(Стр, "=");
	Значение =Сред(Стр, ЕстьЗнакРавно+1);
	
	Возврат Значение;
КонецФункции //ПолучитьКодировку(Текст)

// Процедура читает заголовок файла обмена
//
Функция ПрочитатьФайл(Файл)
	
	Флаг =Истина;
	
	ФайлЗагр = Новый Файл(Файл);
	Если ФайлЗагр.Существует() = Ложь Тогда
		Сообщить("Файла "+Файл+" не существует!");
		Возврат Ложь;
	КонецЕсли;
	
	Текст = Новый ТекстовыйДокумент();
	Попытка
		Текст.Прочитать(Файл);
	Исключение
		Сообщить("Файл не прочитан.", СтатусСообщения.Внимание);
		Возврат Ложь;
	КонецПопытки;
	
	Если Кодировка = "DOS" Тогда
		Кодир = КодировкаТекста.OEM;
	Иначе
		Кодир = КодировкаТекста.ANSI;
	Конецесли;

	Текст.Прочитать(Файл,Кодир);

	Если Текст.КоличествоСтрок()<1 Тогда
		Сообщить("В файл нет данных!");
		Флаг =Ложь;
		Возврат Ложь;
	КонецЕсли;

	Если СокрЛП(Текст.ПолучитьСтроку(1))<>"1CClientBankExchange" Тогда
		Сообщить("Указанный файл не является файлом обмена или неверно указана кодировка!");
		Флаг =Ложь;
		Возврат Ложь;
	КонецЕсли;

	Для Ном = 2 По Текст.КоличествоСтрок() Цикл

		Стр = Текст.ПолучитьСтроку(Ном);
		Флаг =Ложь;

		Если Лев(Врег(СокрЛП(Стр)), 14)="СЕКЦИЯДОКУМЕНТ" Тогда 
			Флаг =Истина;
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат Флаг;

КонецФункции

//Читает и проверяет данные из файла загрузки
Процедура РазобратьФайлЗагрузки()
	
	ЗагрРасчетныеСчета.Очистить();
	СписокДокументов = Новый СписокЗначений();
	ЗагрВидыДокументов.Очистить();
	
	Если ПрочитатьФайл(ФайлЗагрузки) = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Для Ном=2 По Текст.КоличествоСтрок() Цикл
		Стр = Текст.ПолучитьСтроку(Ном);
		Если (ПустаяСтрока(Стр)) ИЛИ (Сред(СокрЛП(Стр), 1, 2) = "//") Тогда
			Продолжить;
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 10)="КОНЕЦФАЙЛА" Тогда 
			Прервать;
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 14)="СЕКЦИЯДОКУМЕНТ" Тогда 	
			ЗагрузитьСекциюДокумента(Ном);			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 14)="СЕКЦИЯРАСЧСЧЕТ" Тогда 
			ЗагрузитьСекциюРасчСчета(Ном);
		Иначе
			ЗагрузитьСтрокуЗаголовка(Стр, Ном);	
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры //РазобратьФайлЗагрузки()

// Процедура загружает информацию из файла обмена
//
Процедура Загрузить() Экспорт
	
	Инициализация(Истина);
	
	РазобратьФайлЗагрузки();
	ЗагрузитьВсеДокументы();
	
	Сообщить("Загрузка завершена!");
	
	Если НЕ (ЗначениеНеЗаполнено(НачДатаЗагрузки) ИЛИ ЗначениеНеЗаполнено(КонДатаЗагрузки)) Тогда
		
		//открываем формы журналов
		НП =Новый НастройкаПериода();
		НП.УстановитьПериод(НачДатаЗагрузки, КонДатаЗагрузки);
		
		для каждого Журнал из СписокЖурналов цикл
			если Журнал.Пометка тогда
				ЖурналДокументов =Документы[Журнал.Значение].ПолучитьФормуСписка("ФормаСписка");
				ЖурналДокументов.Открыть();
			конецесли;
		конеццикла;
		
	КонецЕсли;
	
КонецПроцедуры	

// Проверка корректности заполненых реквизитов документа
//
Функция ПроверкаКорректностиДокумента(Выборка)
		
	Если Выборка.Организация = Неопределено Тогда
		Сообщить("Не указана организация в документе: "+Выборка,СтатусСообщения.Внимание);
		Возврат Ложь;
	КонецЕсли;
	
	Если Выборка.СчетОрганизации = Неопределено Тогда
		Сообщить("Не указан счет организации в документе: "+Выборка,СтатусСообщения.Внимание);
		Возврат Ложь;
	КонецЕсли;
	
	Если Выборка.Контрагент = Неопределено Тогда
		Сообщить("Не указан контрагент в документе: "+Выборка,СтатусСообщения.Внимание);
		Возврат Ложь;
	КонецЕсли;;	
		
	Возврат Истина;
	
КонецФункции

// Форматирует сумму  документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо отформатировать
//  СуммаБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСумму(СуммаДок,СуммаБезКопеек)
	
	Результат  = СуммаДок;
	ЦелаяЧасть = Цел(СуммаДок);
	
	Если (Результат - ЦелаяЧасть) = 0 Тогда
		Если СуммаБезКопеек Тогда
			Результат = Формат(Результат,"ЧДЦ=0; ЧГ=0");
		Иначе
			Результат = Формат(Результат,"ЧДЦ=2; ЧРД=.; ЧГ=0");
		КонецЕсли;
	Иначе
		Результат = Формат(Результат,"ЧДЦ=2; ЧРД=.; ЧГ=0");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСумму()
// Выгружает платежные реквизиты счета
//
Процедура ВыгрузитьПлатежныеРеквизиты(БанковскийСчет,Слово)
	
	Если НЕ БанковскийСчет.БанкДляРасчетов.Пустая() Тогда
	
		ТаблицаРеквизитов.Вставить(Слово+"2"        ,БанковскийСчет.НомерСчета);
		ТаблицаРеквизитов.Вставить(Слово+"3"        ,БанковскийСчет.Банк.Наименование);
		ТаблицаРеквизитов.Вставить(Слово+"4"        ,БанковскийСчет.Банк.Город);
		
		ТаблицаРеквизитов.Вставить(Слово+"РасчСчет" ,БанковскийСчет.Банк.КоррСчет);
		ТаблицаРеквизитов.Вставить(Слово+"Банк1"    ,БанковскийСчет.БанкДляРасчетов.Наименование);
		ТаблицаРеквизитов.Вставить(Слово+"Банк2"    ,БанковскийСчет.БанкДляРасчетов.Город);
		ТаблицаРеквизитов.Вставить(Слово+"БИК"      ,БанковскийСчет.БанкДляРасчетов.Код);
		ТаблицаРеквизитов.Вставить(Слово+"Корсчет"  ,БанковскийСчет.БанкДляРасчетов.КоррСчет);
		
	Иначе
		
		ТаблицаРеквизитов.Вставить(Слово+"РасчСчет",	БанковскийСчет.НомерСчета);
		ТаблицаРеквизитов.Вставить(Слово+"Банк1", 	БанковскийСчет.Банк.Наименование);
		ТаблицаРеквизитов.Вставить(Слово+"Банк2",	БанковскийСчет.Банк.Город);
		ТаблицаРеквизитов.Вставить(Слово+"БИК",		БанковскийСчет.Банк.Код);
		ТаблицаРеквизитов.Вставить(Слово+"Корсчет",	БанковскийСчет.Банк.КоррСчет);
		
	КонецЕсли;
			
КонецПроцедуры

// Выгружает налоговые реквизиты из документа
//
Процедура ВыгрузитьНалоговыеДанные(Докум)
	
	ТаблицаРеквизитов.Вставить("СтатусСоставителя"  ,Докум.СтатусСоставителя);
	ТаблицаРеквизитов.Вставить("ПлательщикКПП"      ,?(ПустаяСтрока(Докум.КПППлательщика),"0",Докум.КПППлательщика));
	ТаблицаРеквизитов.Вставить("ПолучательКПП"      ,?(ПустаяСтрока(Докум.КПППолучателя),"0",Докум.КПППолучателя));
	ТаблицаРеквизитов.Вставить("ПоказательКБК"      ,Докум.КодБК);  	//104
	ТаблицаРеквизитов.Вставить("ОКАТО"              ,Докум.КодОКАТО); 	//105
	
	Если Докум.СтатусСоставителя="15" Тогда
		
		ТаблицаРеквизитов.Вставить("ПоказательОснования","0");   //106
		ТаблицаРеквизитов.Вставить("ПоказательПериода"  ,"0");   //107
		ТаблицаРеквизитов.Вставить("ПоказательНомера"   ,"0");   //108
		ТаблицаРеквизитов.Вставить("ПоказательДаты"     ,"0");   //109
		ТаблицаРеквизитов.Вставить("ПоказательТипа"     ,"0");   //110
		
	Иначе
		
		ТаблицаРеквизитов.Вставить("ПоказательОснования",Докум.ПоказательОснования);
		ТаблицаРеквизитов.Вставить("ПоказательПериода"  ,?(ПустаяСтрока(Докум.ПоказательПериода),"0",Докум.ПоказательПериода));
		ТаблицаРеквизитов.Вставить("ПоказательНомера"   ,?(ПустаяСтрока(Докум.ПоказательНомера),"0",Докум.ПоказательНомера));
		ТаблицаРеквизитов.Вставить("ПоказательДаты"     ,Формат(Докум.ПоказательДаты,"ДФ=dd.MM.yyyy; ДП=0"));
		ТаблицаРеквизитов.Вставить("ПоказательТипа"     ,?(ПустаяСтрока(Докум.ПоказательТипа),"0",Докум.ПоказательТипа));
		
	КонецЕсли;
			
КонецПроцедуры

// Проверяет основные реквизиты платежного документа
//
Процедура ПроверитьРеквизит(Документ,Реквизит,ИмяРеквизита,ПустыеПоля);
	
	Если ЗначениеНеЗаполнено(Реквизит) Тогда
				
		ПустыеПоля.Вставить(ИмяРеквизита);
		Сообщить("В документе "+Документ+": не указано поле выгрузки "+ИмяРеквизита);
			
	КонецЕсли;
	
КонецПроцедуры // Процедура ПроверитьРеквизит()


// Выгружает реквизиты документов
//
Процедура ВыгрузитьДокументы(Строка,СписокСчетов)
	
	ВидДокумента   = СокрЛП(Строка.Документ);
	ИмяДокумента   = СокрЛП(Строка.Название);
	Корреспондент  = СокрЛП(Строка.Корреспондент);
	
	Если Корреспондент  = "Получатель" Тогда
		ТекОрганизация="Плательщик";
	ИначеЕсли Корреспондент  = "Плательщик" Тогда
		ТекОрганизация="Получатель";
	Иначе
		Сообщить("ВыгрузитьДокументы(): выгрузка не описана!");
		Возврат; 	
	КонецЕсли;
	
	//отбираем подходящие под параметры документы
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(НачПериода));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(КонПериода));
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	//БАЛАНС (18.02.2008)                       
	//
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка()); 
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|Док.Ссылка КАК Ссылка,
	|Док.Ссылка.Представление КАК ДокументПредставление,
	|Док.Номер КАК Номер,
	|Док.Дата КАК Дата,
	|Док.СуммаДокумента КАК СуммаДокумента,
	|Док.Организация.НаименованиеПолное КАК Организация,
	|Док.Организация.ИНН КАК ОрганизацияИНН,
	|Док.Организация.НаименованиеПлательщикаПриПеречисленииНалогов КАК НаименованиеПлательщикаПриПеречисленииНалогов,
	|Док.ВидОперации КАК ВидОперации,
	|Док.СчетОрганизации КАК СчетОрганизации,
	|Док.СчетОрганизации.НомерСчета КАК НомерСчетаОрганизации,
	|Док.СчетОрганизации.БанкДляРасчетов КАК БанкДляРасчетовОрганизации,
	|Док.СчетОрганизации.Банк.Наименование КАК БанкОрганизации,
	|Док.СчетОрганизации.Банк.Город КАК ГородБанкОрганизации,
	|Док.СчетОрганизации.Банк.Код КАК БИКБанкОрганизации,
	|Док.СчетОрганизации.СуммаБезКопеек КАК СуммаБезКопеек,";
	
	//БАЛАНС (18.02.2008)                       
	//
	Если ВидДокумента = "ПлатежноеПоручениеИсходящее" Тогда
		Запрос.Текст =Запрос.Текст +"
		|ВЫБОР
		|	КОГДА Док.Контрагент2 = &ПустойКонтрагент
		|		ТОГДА Док.Контрагент.НаименованиеПолное
		|	ИНАЧЕ Док.Контрагент2.НаименованиеПолное
		|КОНЕЦ КАК Контрагент,
		|ВЫБОР
		|	КОГДА Док.Контрагент2 = &ПустойКонтрагент
		|		ТОГДА Док.Контрагент.ИНН
		|	ИНАЧЕ Док.Контрагент2.ИНН
		|КОНЕЦ КАК КонтрагентИНН,
		|ВЫБОР
		|	КОГДА Док.Контрагент2 = &ПустойКонтрагент
		|		ТОГДА Док.СчетКонтрагента
		|	ИНАЧЕ Док.СчетКонтрагента2
		|КОНЕЦ КАК СчетКонтрагента,
		|ВЫБОР
		|	КОГДА Док.Контрагент2 = &ПустойКонтрагент
		|		ТОГДА Док.СчетКонтрагента.НомерСчета
		|	ИНАЧЕ Док.СчетКонтрагента2.НомерСчета
		|КОНЕЦ КАК НомерСчетаКонтрагента,
		|ВЫБОР
		|	КОГДА Док.Контрагент2 = &ПустойКонтрагент
		|		ТОГДА Док.СчетКонтрагента.БанкДляРасчетов
		|	ИНАЧЕ Док.СчетКонтрагента2.БанкДляРасчетов
		|КОНЕЦ КАК БанкДляРасчетовКонтрагента,
		|ВЫБОР
		|	КОГДА Док.Контрагент2 = &ПустойКонтрагент
		|		ТОГДА Док.СчетКонтрагента.Банк.Наименование
		|	ИНАЧЕ Док.СчетКонтрагента2.Банк.Наименование
		|КОНЕЦ КАК БанкКонтрагента,
		|ВЫБОР
		|	КОГДА Док.Контрагент2 = &ПустойКонтрагент
		|		ТОГДА Док.СчетКонтрагента.Банк.Код
		|	ИНАЧЕ Док.СчетКонтрагента2.Банк.Код
		|КОНЕЦ КАК БИКБанкКонтрагента,
		|ВЫБОР
		|	КОГДА Док.Контрагент2 = &ПустойКонтрагент
		|		ТОГДА Док.СчетКонтрагента.Банк.Город
		|	ИНАЧЕ Док.СчетКонтрагента.Банк.Город
		|КОНЕЦ КАК ГородБанкКонтрагента,";
	Иначе
		Запрос.Текст =Запрос.Текст +"
		|Док.Контрагент.НаименованиеПолное КАК Контрагент,
		|Док.Контрагент.ИНН КАК КонтрагентИНН,
		|Док.СчетКонтрагента КАК СчетКонтрагента,
		|Док.СчетКонтрагента.НомерСчета КАК НомерСчетаКонтрагента,
		|Док.СчетКонтрагента.БанкДляРасчетов КАК БанкДляРасчетовКонтрагента,
		|Док.СчетКонтрагента.Банк.Наименование КАК БанкКонтрагента,
		|Док.СчетКонтрагента.Банк.Код КАК БИКБанкКонтрагента,
		|Док.СчетКонтрагента.Банк.Город КАК ГородБанкКонтрагента,";
	КонецЕсли; 
	Запрос.Текст =Запрос.Текст +"
	|Док.ИННПлательщика КАК ИННПлательщика,	
	|Док.ИННПолучателя КАК ИННПолучателя,
	|Док.КПППлательщика КАК КПППлательщика,	
	|Док.КПППолучателя КАК КПППолучателя,
	|Док.ТекстПлательщика КАК ТекстПлательщика,	
	|Док.ТекстПолучателя КАК ТекстПолучателя";
	Если (Корреспондент  = "Получатель") Тогда
		Запрос.Текст =Запрос.Текст +"
		|,
		| Док.ВидПлатежа";
	КонецЕсли;
	Запрос.Текст =Запрос.Текст +"
	|ИЗ
	|	Документ."+ВидДокумента+" КАК Док
	|ГДЕ
	|	НЕ Док.Оплачено
	|	И НЕ Док.ЧастичнаяОплата
	|   И Док.Дата >= &НачПериода И Док.Дата <= &КонПериода
	|   И Док.СчетОрганизации В (&СписокСчетов)
	|   И Док.Организация = &Организация
	|   И Док.ПометкаУдаления =ЛОЖЬ
	|   И НЕ Док.СуммаДокумента = 0
	|
	|"; 
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
			
	Пока Выборка.Следующий() Цикл
		
		// Проверяем основные поля платежного документа, без которых дальнейшая обработка бессмысленна.
		ПустыеПоля =Новый Структура();
				
		ПроверитьРеквизит(Выборка.ДокументПредставление,Выборка.Организация,?(Корреспондент="Получатель","Плательщик","Получатель"),ПустыеПоля);
		ПроверитьРеквизит(Выборка.ДокументПредставление,Выборка.Контрагент,?(Корреспондент="Получатель","Получатель","Плательщик"),ПустыеПоля);
		ПроверитьРеквизит(Выборка.ДокументПредставление,Выборка.СчетОрганизации,?(Корреспондент="Получатель","ПлательщикСчет","ПолучательСчет"),ПустыеПоля);
		ПроверитьРеквизит(Выборка.ДокументПредставление,Выборка.СчетКонтрагента,?(Корреспондент="Получатель","ПолучательСчет","ПлательщикСчет"),ПустыеПоля);
		
		Если ПустыеПоля.Количество() <> 0 Тогда
			
			Стр =ПустыеПоляДокумента.Добавить();
			Стр["Поля"]     =ПустыеПоля;
			Стр["Документ"] =Выборка.Ссылка;
			
			Продолжить;
			
		КонецЕсли; 
			
		ТаблицаРеквизитов = Новый Соответствие();
		
		НомерПечать=ПолучитьНомерНаПечать(Выборка.Ссылка);
	
		Если Прав(НомерПечать,3)="000" Тогда
			Сообщить("Номер платежного документа не может оканчиваться на ""000""!", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
				
		ТаблицаРеквизитов.Вставить("СекцияДокумент" ,ИмяДокумента);
		ТаблицаРеквизитов.Вставить("Номер"          ,НомерПечать);
		ТаблицаРеквизитов.Вставить("Дата"           ,Формат(Выборка.Дата,"ДЛФ=Д"));
		ТаблицаРеквизитов.Вставить("Сумма"          ,ФорматироватьСумму(Выборка.СуммаДокумента,Выборка.СуммаБезКопеек));	
										
		ПрямыеРасчетыОрганизация = ЗначениеНеЗаполнено(Выборка.БанкДляРасчетовОрганизации);
		ПрямыеРасчетыКонтрагент = ЗначениеНеЗаполнено(Выборка.БанкДляРасчетовКонтрагента);
		
		// Текст для непрямых расчетов организации
		Если ПрямыеРасчетыОрганизация Тогда
			ДобТекстОрганизация="";
		Иначе	
			ДобТекстОрганизация= " р/с " + Выборка.НомерСчетаОрганизации+ " в " + Выборка.БанкОрганизации + " " + Выборка.ГородБанкОрганизации;	
		КонецЕсли;
		
		//Текст для непрямых расчетов контрагента
		Если ПрямыеРасчетыКонтрагент Тогда
			ДобТекстКонтрагент="";
		Иначе	
			ДобТекстКонтрагент= " р/с " + Выборка.НомерСчетаКонтрагента+ " в " + Выборка.БанкКонтрагента + " " + Выборка.ГородБанкКонтрагента;	
		КонецЕсли;
		
		Если Корреспондент="Получатель" Тогда
			
			ТаблицаРеквизитов.Вставить("ПлательщикСчет",Выборка.НомерСчетаОрганизации);
			
			ПлательщикИНН           = ?(ПустаяСтрока(Выборка.ИННПлательщика), Выборка.ОрганизацияИНН, СокрЛП(Выборка.ИННПлательщика));
								
			Если Выборка.ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
				ТекстПлательщикПечать=?(ПустаяСтрока(Выборка.НаименованиеПлательщикаПриПеречисленииНалогов),
				?(ПустаяСтрока(Выборка.ТекстПлательщика),Выборка.Организация+ДобТекстОрганизация,СокрЛП(Выборка.ТекстПлательщика)),Выборка.НаименованиеПлательщикаПриПеречисленииНалогов+ДобТекстОрганизация);
			Иначе
				ТекстПлательщикПечать=?(ПустаяСтрока(Выборка.ТекстПлательщика),Выборка.Организация+ДобТекстОрганизация,СокрЛП(Выборка.ТекстПлательщика));
				
			КонецЕсли;
			
			Плательщик              = "ИНН " + ПлательщикИНН+" "+ТекстПлательщикПечать;			
						
			ТаблицаРеквизитов.Вставить("Плательщик",Плательщик);
			ТаблицаРеквизитов.Вставить("ПлательщикИНН" ,ПлательщикИНН);
				
			ТаблицаРеквизитов.Вставить("Плательщик1"   ,СтрЗаменить(ТекстПлательщикПечать,ДобТекстОрганизация,""));			
			ВыгрузитьПлатежныеРеквизиты(Выборка.СчетОрганизации,"Плательщик");
								
			ТаблицаРеквизитов.Вставить("ПлательщикКПП" ,Выборка.КПППлательщика);
											
			ТаблицаРеквизитов.Вставить("ПолучательСчет" ,Выборка.НомерСчетаКонтрагента);
			
			ПолучательИНН           = ?(ПустаяСтрока(Выборка.ИННПолучателя), Выборка.КонтрагентИНН, СокрЛП(Выборка.ИННПолучателя));
						
			Получатель              = "ИНН " + ПолучательИНН+" "+?(ПустаяСтрока(Выборка.ТекстПолучателя),Выборка.Контрагент+ДобТекстКонтрагент,СокрЛП(Выборка.ТекстПолучателя));
							
			ТаблицаРеквизитов.Вставить("Получатель",Получатель);
			ТаблицаРеквизитов.Вставить("ПолучательИНН" ,ПолучательИНН);
							
			ТаблицаРеквизитов.Вставить("Получатель1"    ,?(ПустаяСтрока(Выборка.ТекстПолучателя),Выборка.Контрагент,СокрЛП(Выборка.ТекстПолучателя)));
			ВыгрузитьПлатежныеРеквизиты(Выборка.СчетКонтрагента,"Получатель");
						
			ТаблицаРеквизитов.Вставить("ПолучательКПП" ,Выборка.КПППолучателя);
			
		Иначе
			
			ТаблицаРеквизитов.Вставить("ПлательщикСчет",Выборка.НомерСчетаКонтрагента);
			
			ПлательщикИНН           = ?(ПустаяСтрока(Выборка.ИННПлательщика), Выборка.КонтрагентИНН, СокрЛП(Выборка.ИННПлательщика));
			Плательщик              = "ИНН " + ПлательщикИНН+" "+?(ПустаяСтрока(Выборка.ТекстПлательщика),Выборка.Контрагент+ДобТекстКонтрагент,СокрЛП(Выборка.ТекстПлательщика));
						
			ТаблицаРеквизитов.Вставить("Плательщик",Плательщик);
			ТаблицаРеквизитов.Вставить("ПлательщикИНН" ,ПлательщикИНН);
						
			ТаблицаРеквизитов.Вставить("Плательщик1"   ,?(ПустаяСтрока(Выборка.ТекстПлательщика),Выборка.Контрагент,СокрЛП(Выборка.ТекстПлательщика)));			
			ВыгрузитьПлатежныеРеквизиты(Выборка.СчетКонтрагента,"Плательщик");
			
			ТаблицаРеквизитов.Вставить("ПлательщикКПП" ,Выборка.КПППлательщика);
							
			ТаблицаРеквизитов.Вставить("ПолучательСчет" ,Выборка.НомерСчетаОрганизации);
			
			ПолучательИНН           = ?(ПустаяСтрока(Выборка.ИННПолучателя), Выборка.ОрганизацияИНН, СокрЛП(Выборка.ИННПолучателя));
			Получатель              = "ИНН " + ПолучательИНН+" "+?(ПустаяСтрока(Выборка.ТекстПолучателя),Выборка.Организация+ДобТекстОрганизация,СокрЛП(Выборка.ТекстПолучателя));
								
			ТаблицаРеквизитов.Вставить("Получатель",Получатель);
			ТаблицаРеквизитов.Вставить("ПолучательИНН" ,ПолучательИНН);
									
			ТаблицаРеквизитов.Вставить("Получатель1"    ,?(ПустаяСтрока(Выборка.ТекстПолучателя),Выборка.Организация,СокрЛП(Выборка.ТекстПолучателя)));
			ВыгрузитьПлатежныеРеквизиты(Выборка.СчетОрганизации,"Получатель");
									
			ТаблицаРеквизитов.Вставить("ПолучательКПП" ,Выборка.КПППолучателя);
					
		КонецЕсли;
				
		Если Выборка.Ссылка.Метаданные().Реквизиты.Найти("ВидПлатежа") <> Неопределено Тогда
			ТаблицаРеквизитов.Вставить("ВидПлатежа"	,Выборка.Ссылка.ВидПлатежа);
		КонецЕсли;
		
		Если Выборка.Ссылка.Метаданные().Реквизиты.Найти("СрокПлатежа") <> Неопределено Тогда
			ТаблицаРеквизитов.Вставить("СрокПлатежа"	,Выборка.Ссылка.СрокПлатежа);
		КонецЕсли;
		
		Если Выборка.Ссылка.Метаданные().Реквизиты.Найти("ОчередностьПлатежа") <> Неопределено Тогда
			ТаблицаРеквизитов.Вставить("Очередность"	,Выборка.Ссылка.ОчередностьПлатежа);
		КонецЕсли;
		
		ВидОплаты2П="00";
		Для Каждого Элем Из ВидыОпераций Цикл
			Если Элем.Значение = ИмяДокумента Тогда
				ВидОплаты2П = Элем.Ключ;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		ТаблицаРеквизитов.Вставить("ВидОплаты"	,ВидОплаты2П);
				
		Если Выборка.Ссылка.Метаданные().Реквизиты.Найти("НазначениеПлатежа") <> Неопределено Тогда
			НазначениеПлатежа = Выборка.Ссылка["НазначениеПлатежа"];
			НазначениеПлатежаСтрока = СтрЗаменить(НазначениеПлатежа,Символы.ПС,", ");	
			ТаблицаРеквизитов.Вставить("НазначениеПлатежа"	,НазначениеПлатежаСтрока);
			Для ц=1 По СтрЧислоСтрок(НазначениеПлатежа) Цикл
				НазначениеПлатежаСтрока = СтрПолучитьСтроку(НазначениеПлатежа,ц);
				ТаблицаРеквизитов.Вставить("НазначениеПлатежа"+ц	,НазначениеПлатежаСтрока);
			КонецЦикла;
		КонецЕсли;
		
		Если Выборка.Ссылка.ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
			ВыгрузитьНалоговыеДанные(Выборка.Ссылка);	
		КонецЕсли;
		
		Если Выборка.Ссылка.Метаданные().Реквизиты.Найти("ВидАккредитива") <> Неопределено Тогда
			ТаблицаРеквизитов.Вставить("ВидАккредитива"	,Выборка.Ссылка["ВидАккредитива"]);
		КонецЕсли;
		
		Если Выборка.Ссылка.Метаданные().Реквизиты.Найти("СчетДепонента") <> Неопределено Тогда
			ТаблицаРеквизитов.Вставить("НомерСчетаПоставщика",Выборка.Ссылка["СчетДепонента"]);
		КонецЕсли;
		
		Если Выборка.Ссылка.Метаданные().Реквизиты.Найти("ДатаОтсылкиДокументов") <> Неопределено Тогда
			ТаблицаРеквизитов.Вставить("ДатаОтсылкиДок",Выборка.Ссылка["ДатаОтсылкиДокументов"]);
		КонецЕсли;
		
		Если Выборка.Ссылка.Метаданные().Реквизиты.Найти("СрокДляАкцепта") <> Неопределено Тогда
			ТаблицаРеквизитов.Вставить("СрокАкцепта",Выборка.Ссылка["СрокДляАкцепта"]);
		КонецЕсли; 
		
		Если Выборка.Ссылка.Метаданные().Реквизиты.Найти("ДополнительныеУсловия") <> Неопределено Тогда	
			ДопУсловия = Выборка.Ссылка["ДополнительныеУсловия"];
			ТаблицаРеквизитов.Вставить("ДополнУсловия"	,СтрПолучитьСтроку(ДопУсловия,1));
		КонецЕсли;
	
		Если Выборка.Ссылка.Метаданные().Реквизиты.Найти("САкцептом") <> Неопределено Тогда
			ТаблицаРеквизитов.Вставить("УсловиеОплаты1"	,?(Выборка.Ссылка["САкцептом"]=Истина,"С акцептом ","Без акцепта"));
		КонецЕсли;
				
		//проверка наличия всех полей и их значений
		
		//в основной таблице
		Для ц=0 По ОбязательныеАтрибутыВЫГРУЗКИ.Количество()-1 Цикл
			Значение = ТаблицаРеквизитов[Строка(ОбязательныеАтрибутыВЫГРУЗКИ.Получить(ц))];
			
			Атрибут  =ОбязательныеАтрибутыВЫГРУЗКИ.Получить(ц).Значение;
			Если (ВидДокумента = "АккредитивПереданный")И(Атрибут = "Очередность") Тогда
				Продолжить;
			КонецЕсли;
			
			Если (Значение = Неопределено) ИЛИ (СокрЛП(Значение)="") Тогда
		
				ПустыеПоля.Вставить(ОбязательныеАтрибутыВЫГРУЗКИ.Получить(ц));
				Сообщить("В документе "+Выборка.Ссылка+": не указано поле выгрузки "+ОбязательныеАтрибутыВЫГРУЗКИ.Получить(ц));
				
			КонецЕсли;
		КонецЦикла;
		//если расчеты с бюджетом (по налогам)
		Если Выборка.Ссылка.ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
				Для ц=0 По ОбязательныеАтрибутыБЮДЖЕТ.Количество()-1 Цикл
					Значение = ТаблицаРеквизитов[Строка(ОбязательныеАтрибутыБЮДЖЕТ.Получить(ц))];
					Если (Значение = Неопределено) ИЛИ (СокрЛП(Значение)="") Тогда
						
						ПустыеПоля.Вставить(ОбязательныеАтрибутыБЮДЖЕТ.Получить(ц));
						Сообщить("В документе "+Выборка.Ссылка+": не указано поле выгрузки "+ОбязательныеАтрибутыБЮДЖЕТ.Получить(ц));
						
					КонецЕсли;
				КонецЦикла;	
		КонецЕсли;
		
		//добавляем все прописанные выше реквизиты только те у которых есть значеня
		Для ц=0 По ПорядокРеквизитов.Количество()-1 Цикл
			Значение = ТаблицаРеквизитов[Строка(ПорядокРеквизитов.Получить(ц))];
			Если (Значение <> Неопределено) Тогда
				Текст.ДобавитьСтроку(Строка(ПорядокРеквизитов.Получить(ц))+"="+Значение);
			КонецЕсли;	
		КонецЦикла;	
		
		Текст.ДобавитьСтроку("КонецДокумента");
		
		Если ПустыеПоля.Количество() <> 0 Тогда
			
			Стр =ПустыеПоляДокумента.Добавить();
			Стр["Поля"]     =ПустыеПоля;
			Стр["Документ"] =Выборка.Ссылка;
			
		КонецЕсли; 
		
	КонецЦикла;	
	
КонецПроцедуры

// Основная процедура выгрузки данных
//
Процедура Выгрузить()  Экспорт
	
	Инициализация(Ложь);
	
	Текст = Новый ТекстовыйДокумент();
	
	Текст.ДобавитьСтроку("1CClientBankExchange");
	Текст.ДобавитьСтроку("ВерсияФормата=1.01");
	Текст.ДобавитьСтроку("Кодировка="+Кодировка);
	Текст.ДобавитьСтроку("Отправитель="+Метаданные.Синоним);
	Текст.ДобавитьСтроку("Получатель="+КлиентБанка);
	Текст.ДобавитьСтроку("ДатаСоздания="+Формат(ТекущаяДата(),"ДЛФ=Д"));
	Текст.ДобавитьСтроку("ВремяСоздания="+Формат(ТекущаяДата(),"ДЛФ=В"));
	Текст.ДобавитьСтроку("ДатаНачала="+Формат(НачПериода,"ДЛФ=Д"));
	Текст.ДобавитьСтроку("ДатаКонца="+Формат(КонПериода,"ДЛФ=Д"));
	
	//Счета, по которым будут проходить операции
	СписокСчетов = Новый СписокЗначений;
	
	Для каждого Строка Из ТаблицаСчетов Цикл
		Если Строка.Пометка = Истина Тогда
		 	Текст.ДобавитьСтроку("РасчСчет="+Строка.Счет.НомерСчета);
			СписокСчетов.Добавить(Строка.Счет);
		КонецЕсли;	
	КонецЦикла;
	
	//Виды выгружаемых документов
	Для каждого Строка Из ТаблицаДокументов Цикл
		Если Строка.Пометка = Истина Тогда
			ИмяДокумента = СокрЛП(Строка.Название);	
		 	Текст.ДобавитьСтроку("Документ="+ИмяДокумента);
		КонецЕсли;	
	КонецЦикла;
	
	//ТЗ для полей с пустыми значениями
	
	ПустыеПоляДокумента =Новый ТаблицаЗначений();
	ПустыеПоляДокумента.Колонки.Добавить("Поля");
	ПустыеПоляДокумента.Колонки.Добавить("Документ");
	
	Для каждого Строка Из ТаблицаДокументов Цикл
		Если Строка.Пометка = Истина Тогда
			ВыгрузитьДокументы(Строка,СписокСчетов);
		КонецЕсли;	
	КонецЦикла;
	
	Текст.ДобавитьСтроку("КонецФайла");
	Если Кодировка = "DOS" Тогда
		Кодир = КодировкаТекста.OEM;
	Иначе
		Кодир = КодировкаТекста.ANSI;
	КонецЕсли;
	
	
	Если ПустыеПоляДокумента.Количество() = 0 Тогда 
		Текст.Записать(ФайлВыгрузки,Кодир);
		Если ПрочитатьФайл(ФайлВыгрузки) Тогда
			Сообщить("Выгрузка завершена!");
		Иначе
			Текст.Очистить();
			Сообщить("В файле нет данных.");
			Сообщить("Файл не сформирован!");
		КонецЕсли;
	Иначе
		//печать в модуле формы
		Текст.Очистить();
		Сообщить("Файл не сформирован!");
	КонецЕсли; 
	
КонецПроцедуры

//вызываем форму для просмотра тех, кого не нашли
Процедура ПросмотрКонтрагентов(ТипПросмотра) Экспорт	
	
	ФормаКонтрагентов =ПолучитьФорму("ФормаКонтрагентов");
	
	Если (ТипПросмотра = 0) И (ФормаКонтрагентов.Открыта()) Тогда
		ФормаКонтрагентов.Закрыть();
	ИначеЕсли (ТипПросмотра > 0) И (ФормаКонтрагентов.Открыта()) Тогда
		ФормаКонтрагентов.Обновить();
	ИначеЕсли (ТипПросмотра > 0) И (НЕ(ФормаКонтрагентов.Открыта())) Тогда
		ФормаКонтрагентов.Открыть();
	ИначеЕсли (ТипПросмотра = 0) И (НЕ(ФормаКонтрагентов.Открыта())) Тогда
		Сообщить("Все контрагенты существуют в справочнике.", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры //ПросмотрКонтрагентов();

//формируе список тех кого не нашли
Процедура ФормируемСписокКонтрагентов(Реквизиты, ТипКонтрагента)
	
	РеквизитыКонтрагента =Новый Структура();
	РеквизитыКонтрагента.Очистить();
	
	ТипКонтрагентаВерх =СокрЛП(ВРег(ТипКонтрагента));//переводим в верхний регистр для удобства
	
	ПрямыеРасчеты =НЕ(Реквизиты.Свойство(ТипКонтрагентаВерх+"2"));
	
	РеквизитыКонтрагента.Вставить("ТИПКОНТРАГЕНТА", ТипКонтрагентаВерх);//Плательщик или Получатель
	
	Если ПрямыеРасчеты Тогда //прямые расчеты
		
		ТекстИНН="";
		
		Если Реквизиты.Свойство(ТипКонтрагентаВерх+"ИНН") Тогда
			РеквизитыКонтрагента.Вставить(ТипКонтрагентаВерх+"ИНН",     Реквизиты[ТипКонтрагентаВерх+"ИНН"]);//ИНН контрагента
			ТекстИНН="ИНН "+Реквизиты[ТипКонтрагентаВерх+"ИНН"]+" ";
		Иначе
			РеквизитыКонтрагента.Вставить(ТипКонтрагентаВерх+"ИНН","");
		КонецЕсли;
		
		Если Реквизиты.Свойство(ТипКонтрагентаВерх+"1") Тогда //Наименование контрагента
			РеквизитыКонтрагента.Вставить(ТипКонтрагентаВерх+"1",       Реквизиты[ТипКонтрагентаВерх+"1"]);
		ИначеЕсли Реквизиты.Свойство(ТипКонтрагентаВерх) Тогда
			НаименованиеКонтрагента=?(ТекстИНН="",Реквизиты[ТипКонтрагентаВерх],СтрЗаменить(Реквизиты[ТипКонтрагентаВерх],ТекстИНН,""));
			РеквизитыКонтрагента.Вставить(ТипКонтрагентаВерх+"1",      НаименованиеКонтрагента);
		Иначе
			РеквизитыКонтрагента.Вставить(ТипКонтрагентаВерх+"1",      "");
		КонецЕсли;
				
		Если Реквизиты.Свойство(ТипКонтрагентаВерх+"КПП") Тогда
			РеквизитыКонтрагента.Вставить(ТипКонтрагентаВерх+"КПП",     Реквизиты[ТипКонтрагентаВерх+"КПП"]);
		ИНАЧЕ
			РеквизитыКонтрагента.Вставить(ТипКонтрагентаВерх+"КПП",     "");
		КонецЕсли;
		
		Если Реквизиты.Свойство(ТипКонтрагентаВерх+"СЧЕТ") Тогда
			РеквизитыКонтрагента.Вставить(ТипКонтрагентаВерх+"СЧЕТ",    Реквизиты[ТипКонтрагентаВерх+"СЧЕТ"]);    //Р/счет контрагента
		Иначе
			РеквизитыКонтрагента.Вставить(ТипКонтрагентаВерх+"СЧЕТ",    "");
		КонецЕсли;
				
	Иначе //не прямые расчеты
		
		ТекстИНН="";
		
		Если Реквизиты.Свойство(ТипКонтрагентаВерх+"ИНН") Тогда
			РеквизитыКонтрагента.Вставить(ТипКонтрагентаВерх+"ИНН",     Реквизиты[ТипКонтрагентаВерх+"ИНН"]);//ИНН контрагента
			ТекстИНН="ИНН "+Реквизиты[ТипКонтрагентаВерх+"ИНН"]+" ";
		Иначе
			РеквизитыКонтрагента.Вставить(ТипКонтрагентаВерх+"ИНН","");
		КонецЕсли;
		
		Если Реквизиты.Свойство(ТипКонтрагентаВерх+"1") Тогда //Наименование контрагента
			РеквизитыКонтрагента.Вставить(ТипКонтрагентаВерх+"1",       Реквизиты[ТипКонтрагентаВерх+"1"]);
		ИначеЕсли Реквизиты.Свойство(ТипКонтрагентаВерх) Тогда
			НаименованиеКонтрагента=?(ТекстИНН="",Реквизиты[ТипКонтрагентаВерх],СтрЗаменить(Реквизиты[ТипКонтрагентаВерх],ТекстИНН,""));
			РеквизитыКонтрагента.Вставить(ТипКонтрагентаВерх+"1",      НаименованиеКонтрагента);
		Иначе
			РеквизитыКонтрагента.Вставить(ТипКонтрагентаВерх+"1",      "");
		КонецЕсли;
				
		Если Реквизиты.Свойство(ТипКонтрагентаВерх+"КПП") Тогда
			РеквизитыКонтрагента.Вставить(ТипКонтрагентаВерх+"КПП",     Реквизиты[ТипКонтрагентаВерх+"КПП"]);
		ИНАЧЕ
			РеквизитыКонтрагента.Вставить(ТипКонтрагентаВерх+"КПП",     "");
		КонецЕсли;
		
		Если Реквизиты.Свойство(ТипКонтрагентаВерх+"СЧЕТ") Тогда
			РеквизитыКонтрагента.Вставить(ТипКонтрагентаВерх+"СЧЕТ",    Реквизиты[ТипКонтрагентаВерх+"СЧЕТ"]);    //Р/счет контрагента
		Иначе
			РеквизитыКонтрагента.Вставить(ТипКонтрагентаВерх+"СЧЕТ",    "");
		КонецЕсли;
			
		Если Реквизиты.Свойство(ТипКонтрагентаВерх+"2") Тогда
			РеквизитыКонтрагента.Вставить(ТипКонтрагентаВерх+"2",       Реквизиты[ТипКонтрагентаВерх+"2"]);       //Наименование контрагента
		КонецЕсли;
		
		Если Реквизиты.Свойство(ТипКонтрагентаВерх+"3") Тогда
			РеквизитыКонтрагента.Вставить(ТипКонтрагентаВерх+"3",       Реквизиты[ТипКонтрагентаВерх+"3"]);       //Наименование контрагента
		КонецЕсли;
		
		Если Реквизиты.Свойство(ТипКонтрагентаВерх+"4") Тогда
			РеквизитыКонтрагента.Вставить(ТипКонтрагентаВерх+"4",       Реквизиты[ТипКонтрагентаВерх+"4"]);       //Наименование контрагента
		КонецЕсли;
		
		Если Реквизиты.Свойство(ТипКонтрагентаВерх+"РАСЧСЧЕТ") Тогда
			РеквизитыКонтрагента.Вставить(ТипКонтрагентаВерх+"РАСЧСЧЕТ", Реквизиты[ТипКонтрагентаВерх+"РАСЧСЧЕТ"]); //Кор. счет банка контрагента
		КонецЕсли;
				
		Если Реквизиты.Свойство(ТипКонтрагентаВерх+"БАНК1") Тогда
			РеквизитыКонтрагента.Вставить(ТипКонтрагентаВерх+"БАНК1",   Реквизиты[ТипКонтрагентаВерх+"БАНК1"]);   //Банк контрагента
		КонецЕсли;
		
		Если Реквизиты.Свойство(ТипКонтрагентаВерх+"БАНК2") Тогда
			РеквизитыКонтрагента.Вставить(ТипКонтрагентаВерх+"БАНК2",   Реквизиты[ТипКонтрагентаВерх+"БАНК2"]);   //Местонахождение банка контрагента
		КонецЕсли;
		
		Если Реквизиты.Свойство(ТипКонтрагентаВерх+"БИК") Тогда
			РеквизитыКонтрагента.Вставить(ТипКонтрагентаВерх+"БИК",      Реквизиты[ТипКонтрагентаВерх+"БИК"]);      //Код РЦ банка
		КонецЕсли;
		
		Если Реквизиты.Свойство(ТипКонтрагентаВерх+"КОРСЧЕТ") Тогда
			РеквизитыКонтрагента.Вставить(ТипКонтрагентаВерх+"КОРСЧЕТ",  Реквизиты[ТипКонтрагентаВерх+"КОРСЧЕТ"]);  //Кор. счет РЦ банка контрагента
		КонецЕсли;
		
	КонецЕсли;
	
	Ключ =Строка(СокрЛП(ТипКонтрагентаВерх+"_"+Реквизиты[ТипКонтрагентаВерх+"ИНН"]));
	
	СписокКонтрагентов.Добавить(РеквизитыКонтрагента,Ключ);
		
КонецПроцедуры //ФормируемСписокКонтрагентов(Реквизиты)

//проверяем кого нет в справочнике
Процедура ОтобратьКонтрагентов() Экспорт
	
	Инициализация(Истина);	
	РазобратьФайлЗагрузки();
	
	СписокКонтрагентов =Новый СписокЗначений();
	СписокДляПоиска=Новый СписокЗначений;
		
	Для Каждого РеквДокумента Из СписокДокументов Цикл
		
		НетОрганизации=Ложь;
		
		РеквизитыДокумента = РеквДокумента.Значение;
		//выясняем кто кому платит
		
		// Определяем вид движения
		
		ТипКонтрагента="";
		СчетПлательщика=ПолучитьЗначениеРеквизита("ПлательщикСчет");
		СчетПолучателя=ПолучитьЗначениеРеквизита("ПолучательСчет");
		
		СчетОрганизации=Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета",СчетПлательщика,,Организация);
		
		Если НЕ СчетОрганизации=Справочники.БанковскиеСчета.ПустаяСсылка() Тогда
			
			ТипКонтрагента="Получатель";
			
		Иначе
			
			СчетОрганизации=Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета",СчетПолучателя,,Организация);
			
			Если НЕ СчетОрганизации=Справочники.БанковскиеСчета.ПустаяСсылка() Тогда
				
				ТипКонтрагента="Плательщик";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипКонтрагента="" Тогда
			
			ВидДокументаВФайле = ПолучитьЗначениеРеквизита("СекцияДокумент");
			ДатаДок = ПолучитьЗначениеРеквизита("Дата");
			НомерДок = ПолучитьЗначениеРеквизита("Номер");
			
			Сообщить("Документ "+ВидДокументаВФайле+" №"+НомерДок+" от "+ДатаДок+": ни счет плательщика, ни счет получателя
			|не принадлежат выбранной организации. Секция не может быть обработана.");
			
			НетОрганизации=Истина;
						
		КонецЕсли;
		
		Если Не НетОрганизации Тогда
			
			//ищем его
			ИННКраткий = СокрЛП(РеквизитыДокумента[ТипКонтрагента+"ИНН"]);
			КПП = СокрЛП(РеквизитыДокумента[ТипКонтрагента+"КПП"]);
			
			Если Не ПустаяСтрока(КПП) Тогда
				Контрагент       =НайтиКонтрагентаПоИННиКПП("Контрагенты",ИННКраткий,КПП);
			Иначе	
				Контрагент       =НайтиКонтрагентаПоИНН("Контрагенты",ИННКраткий);
			КонецЕсли;
			
			ПредставлениеКонтрагента=ТипКонтрагента+"_"+ИннКраткий;
			
			Если ЗначениеНеЗаполнено(Контрагент) 
				И СписокДляПоиска.НайтиПоЗначению(ПредставлениеКонтрагента)=Неопределено Тогда
				СписокДляПоиска.Добавить(ПредставлениеКонтрагента);
				ФормируемСписокКонтрагентов(РеквизитыДокумента, ТипКонтрагента);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//просматриваем результат работы
	ПросмотрКонтрагентов(СписокКонтрагентов.Количество());
	
КонецПроцедуры //ОтобратьКонтрагентов()

//создаем список ненайденных контрагентов
Процедура СписокНеНайденных(Реквизиты = Неопределено, Документ = Неопределено, НовыйКонтрагент=Истина) Экспорт
	
	Если НЕ Реквизиты=Неопределено И Реквизиты.Количество() = 0 Тогда
		Сообщить("Документ создан вручную.", СтатусСообщения.Информация);
		Возврат;
	КонецЕсли;
	
	ТипКонтрагента =Неопределено;
	
	КопияСписокКонтрагентов =Новый СписокЗначений();
	Если Реквизиты = Неопределено Тогда
		КопияСписокКонтрагентов.ЗагрузитьЗначения(СписокКонтрагентов.ВыгрузитьЗначения());
	ИначеЕсли НЕ ТипЗнч(Реквизиты) = Тип("Структура") Тогда
		
			СтруктураРеквизитов =Новый Структура();
			Для Каждого Рекв Из Реквизиты Цикл
				
				СтруктураРеквизитов.Вставить("ТИПКОНТРАГЕНТА", Рекв["ТипКонтрагента"]);
				СтруктураРеквизитов.Вставить(Рекв["Реквизит"], Рекв["Значение"]);
				
			КонецЦикла;
			
			Если КопияСписокКонтрагентов.НайтиПоЗначению(СтруктураРеквизитов)=Неопределено Тогда
			
			КопияСписокКонтрагентов.Добавить(СтруктураРеквизитов);
			
			КонецЕсли;
			
			Если НовыйКонтрагент Тогда
				СписокКонтрагентов=КопияСписокКонтрагентов;
			КонецЕсли;
			
	Иначе//структура
		
		КопияСписокКонтрагентов.Добавить(Реквизиты);
		
	КонецЕсли;
	
	ТаблицаКонтрагентов.Строки.Очистить();
	ТаблицаКонтрагентов.Колонки.Очистить();
	
	ТаблицаКонтрагентов.Колонки.Добавить("Представление");
	ТаблицаКонтрагентов.Колонки.Добавить("Значение");
	ТаблицаКонтрагентов.Колонки.Добавить("Реквизит");
	ТаблицаКонтрагентов.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
	
	КонтрагентИНН ="";
	
	Для Каждого Список Из КопияСписокКонтрагентов Цикл
		
		Индекс =КопияСписокКонтрагентов.Индекс(Список);
		
		Если НЕ Список.Значение.Свойство("ТИПКОНТРАГЕНТА", ТипКонтрагента) Тогда
			
			Если Список.Значение.Свойство("ДАТАПОСТУПИЛО") Тогда
				ТипКонтрагента ="ПЛАТЕЛЬЩИК";
			Иначе
				ТипКонтрагента ="ПОЛУЧАТЕЛЬ";
			КонецЕсли;
			
		КонецЕсли;
		
		Список.Значение.Свойство(ТипКонтрагента+"ИНН", КонтрагентИНН);
		если ТаблицаКонтрагентов.Строки.Найти(КонтрагентИНН, "Значение", истина) <> Неопределено тогда
			продолжить;
		конецесли;
				
		ТаблицаКонтрагентов.Строки.Добавить().Установить(0, Список.Значение[ТипКонтрагента+"1"]);
		
		ПрямыеРасчеты =НЕ(Список.Значение.Свойство(ТипКонтрагента+"2"));
		
		Если ПрямыеРасчеты Тогда
			
			ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
			ТаблицаКонтрагентов.Строки[Индекс].Строки[0].Установить(0, "Наименование контрагента");
			ТаблицаКонтрагентов.Строки[Индекс].Строки[0].Установить(1, Список.Значение[ТипКонтрагента+"1"]);
			ТаблицаКонтрагентов.Строки[Индекс].Строки[0].Установить(2, ТипКонтрагента+"1");
			
			ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
			ТаблицаКонтрагентов.Строки[Индекс].Строки[1].Установить(0, "ИНН контрагента");
			ТаблицаКонтрагентов.Строки[Индекс].Строки[1].Установить(1, Список.Значение[ТипКонтрагента+"ИНН"]);
			ТаблицаКонтрагентов.Строки[Индекс].Строки[1].Установить(2, ТипКонтрагента+"ИНН");
			
			ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
			ТаблицаКонтрагентов.Строки[Индекс].Строки[2].Установить(0, "КПП контрагента");
			ТаблицаКонтрагентов.Строки[Индекс].Строки[2].Установить(1, Список.Значение[ТипКонтрагента+"КПП"]);
			ТаблицаКонтрагентов.Строки[Индекс].Строки[2].Установить(2, ТипКонтрагента+"КПП");
			
			ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
			ТаблицаКонтрагентов.Строки[Индекс].Строки[3].Установить(0, "Р/счет контрагента");
			ТаблицаКонтрагентов.Строки[Индекс].Строки[3].Установить(1, Список.Значение[ТипКонтрагента+"СЧЕТ"]);
			ТаблицаКонтрагентов.Строки[Индекс].Строки[3].Установить(2, ТипКонтрагента+"СЧЕТ");
						
		Иначе
			
			ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
			ТаблицаКонтрагентов.Строки[Индекс].Строки[0].Установить(0, "Наименование контрагента");
			ТаблицаКонтрагентов.Строки[Индекс].Строки[0].Установить(1, Список.Значение[ТипКонтрагента+"1"]);
			ТаблицаКонтрагентов.Строки[Индекс].Строки[0].Установить(2, ТипКонтрагента+"1");
			
			ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
			ТаблицаКонтрагентов.Строки[Индекс].Строки[1].Установить(0, "ИНН контрагента");
			ТаблицаКонтрагентов.Строки[Индекс].Строки[1].Установить(1, Список.Значение[ТипКонтрагента+"ИНН"]);
			ТаблицаКонтрагентов.Строки[Индекс].Строки[1].Установить(2, ТипКонтрагента+"ИНН");
			
			ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
			ТаблицаКонтрагентов.Строки[Индекс].Строки[2].Установить(0, "КПП контрагента");
			ТаблицаКонтрагентов.Строки[Индекс].Строки[2].Установить(1, Список.Значение[ТипКонтрагента+"КПП"]);
			ТаблицаКонтрагентов.Строки[Индекс].Строки[2].Установить(2, ТипКонтрагента+"КПП");
			
			ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
			ТаблицаКонтрагентов.Строки[Индекс].Строки[3].Установить(0, "Р/счет контрагента");
			ТаблицаКонтрагентов.Строки[Индекс].Строки[3].Установить(1, Список.Значение[ТипКонтрагента+"СЧЕТ"]);
			ТаблицаКонтрагентов.Строки[Индекс].Строки[3].Установить(2, ТипКонтрагента+"СЧЕТ");
			
			ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
			ТаблицаКонтрагентов.Строки[Индекс].Строки[4].Установить(0, "Банк контрагента");
			ТаблицаКонтрагентов.Строки[Индекс].Строки[4].Установить(1, Список.Значение[ТипКонтрагента+"3"]);
			ТаблицаКонтрагентов.Строки[Индекс].Строки[4].Установить(2, ТипКонтрагента+"3");
			
			ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
			ТаблицаКонтрагентов.Строки[Индекс].Строки[5].Установить(0, "Город банка контрагента");
			ТаблицаКонтрагентов.Строки[Индекс].Строки[5].Установить(1, Список.Значение[ТипКонтрагента+"4"]);
			ТаблицаКонтрагентов.Строки[Индекс].Строки[5].Установить(2, ТипКонтрагента+"4");
			
			ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
			ТаблицаКонтрагентов.Строки[Индекс].Строки[6].Установить(0, "Кор. счет банка контрагента");
			ТаблицаКонтрагентов.Строки[Индекс].Строки[6].Установить(1, Список.Значение[ТипКонтрагента+"РАСЧСЧЕТ"]);
			ТаблицаКонтрагентов.Строки[Индекс].Строки[6].Установить(2, ТипКонтрагента+"РАСЧСЧЕТ");
			
			ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
			ТаблицаКонтрагентов.Строки[Индекс].Строки[7].Установить(0, "РЦ банка контрагента");
			ТаблицаКонтрагентов.Строки[Индекс].Строки[7].Установить(1, Список.Значение[ТипКонтрагента+"БАНК1"]);
			ТаблицаКонтрагентов.Строки[Индекс].Строки[7].Установить(2, ТипКонтрагента+"БАНК1");
			
			ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
			ТаблицаКонтрагентов.Строки[Индекс].Строки[8].Установить(0, "Местонахождение РЦ банка контрагента");
			ТаблицаКонтрагентов.Строки[Индекс].Строки[8].Установить(1, Список.Значение[ТипКонтрагента+"БАНК2"]);
			ТаблицаКонтрагентов.Строки[Индекс].Строки[8].Установить(2, ТипКонтрагента+"БАНК2");
			
			ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
			ТаблицаКонтрагентов.Строки[Индекс].Строки[9].Установить(0, "Код РЦ банка контрагента");
			ТаблицаКонтрагентов.Строки[Индекс].Строки[9].Установить(1, Список.Значение[ТипКонтрагента+"БИК"]);
			ТаблицаКонтрагентов.Строки[Индекс].Строки[9].Установить(2, ТипКонтрагента+"БИК");
			
			ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
			ТаблицаКонтрагентов.Строки[Индекс].Строки[10].Установить(0, "Кор. счет РЦ банка контрагента");
			ТаблицаКонтрагентов.Строки[Индекс].Строки[10].Установить(1, Список.Значение[ТипКонтрагента+"КОРСЧЕТ"]);
			ТаблицаКонтрагентов.Строки[Индекс].Строки[10].Установить(2, ТипКонтрагента+"КОРСЧЕТ");
			
		КонецЕсли;
		
	КонецЦикла;
	
	//заполняем ее
	Если Документ <> Неопределено Тогда
		//формируем пустую табличную часть
		Документ.РеквизитыКонтрагента.Очистить();
		Для Счет =0  По ТаблицаКонтрагентов.Строки[0].Строки.Количество()-1 Цикл
			Документ.РеквизитыКонтрагента.Добавить().ТипКонтрагента =ТипКонтрагента;
		КонецЦикла;
		Документ.РеквизитыКонтрагента.ЗагрузитьКолонку(ТаблицаКонтрагентов.Строки[0].Строки.ВыгрузитьКолонку("Представление"), "Представление");
		Документ.РеквизитыКонтрагента.ЗагрузитьКолонку(ТаблицаКонтрагентов.Строки[0].Строки.ВыгрузитьКолонку("Значение"), "Значение");
		Документ.РеквизитыКонтрагента.ЗагрузитьКолонку(ТаблицаКонтрагентов.Строки[0].Строки.ВыгрузитьКолонку("Реквизит"), "Реквизит");
	КонецЕсли;
	
КонецПроцедуры //СписокНенайденных()
	
//Печать отчета
//
Процедура Печать( ПолеОтчета, ПустыеРеквизиты =Неопределено) Экспорт
	
	Перем Корреспондент;
	
	МакетОтчета = ПолучитьМакет("Отчет");
	
	Если ПустыеРеквизиты = Неопределено Тогда
		
		Шапка    = МакетОтчета.ПолучитьОбласть("Шапка");
		Строка   = МакетОтчета.ПолучитьОбласть("Строка");
		Подвал   = МакетОтчета.ПолучитьОбласть("Подвал");
		
		ПолеОтчета.Вывести(Шапка);
		
		Индекс=0;
		Для Каждого Элем Из ЗагрДокументы Цикл
			Док = Элем.Значение;
			ВидДокумента = Док.Метаданные().Имя;
			Индекс=Индекс+1;
			
			Если СтруктураПлатежКорреспондент.Свойство(ВидДокумента, Корреспондент) Тогда
				
				Если Корреспондент = "Получатель" Тогда
					Плательщик     = Док.Организация;
					ПлательщикСчет = Док.СчетОрганизации.НомерСчета;
					Получатель     = Док.Контрагент;
					ПолучательСчет = Док.СчетКонтрагента.НомерСчета;
				ИначеЕсли Корреспондент = "Плательщик" Тогда	
					Получатель     = Док.Организация;
					ПолучательСчет = Док.СчетОрганизации.НомерСчета;
					Плательщик     = Док.Контрагент;
					ПлательщикСчет = Док.СчетКонтрагента.НомерСчета;
				КонецЕсли;	
				
			КонецЕсли;	
			
			Строка.Параметры.Плательщик 	= Плательщик;
			Строка.Параметры.ПлательщикСчет = ПлательщикСчет;
			Строка.Параметры.Получатель 	= Получатель;
			Строка.Параметры.ПолучательСчет = ПолучательСчет;
			
			Строка.Параметры.Сумма 			= Док.СуммаДокумента;
			Строка.Параметры.Документ 		= Док;
			Строка.Параметры.Индекс 		= Индекс;
			ПолеОтчета.Вывести(Строка);
			
		КонецЦикла;		
		
		ПолеОтчета.Вывести(Подвал);
		
	Иначе
		
		Шапка     =МакетОтчета.ПолучитьОбласть("ШапкаПусто");
		Документ  =МакетОтчета.ПолучитьОбласть("Документ");
		Сообщение =МакетОтчета.ПолучитьОбласть("Сообщение");
		Подвал    =МакетОтчета.ПолучитьОбласть("Подвал");
		
		ПолеОтчета.Вывести(Шапка);
		
		Для Каждого Эл Из ПустыеРеквизиты Цикл
			
			Поле =Эл["Поля"];
			Док  =Эл["Документ"];
			
			Документ.Параметры.Наименование =Док;
			ПолеОтчета.Вывести(Документ);
						
			Если
				Поле.Свойство("НЕТ_ДАННЫХ_ДЛЯ_ВЫГРУЗКИ")
			Тогда
				Сообщение.Параметры.ТекстСообщения ="Нет документов для выгрузки";
				ПолеОтчета.Вывести(Сообщение);
			КонецЕсли;
			
			Если
				Поле.Свойство("Номер") ИЛИ
				Поле.Свойство("Дата")
			Тогда
				Сообщение.Параметры.ТекстСообщения ="Проверьте реквизиты документа.";
				ПолеОтчета.Вывести(Сообщение);
			КонецЕсли;
		
			Если
				Поле.Свойство("Сумма") ИЛИ
				Поле.Свойство("ВидПлатежа") ИЛИ
				Поле.Свойство("СрокПлатежа") ИЛИ
				Поле.Свойство("Очередность")
			Тогда
				Сообщение.Параметры.ТекстСообщения ="Проверьте реквизиты платежа.";
				ПолеОтчета.Вывести(Сообщение);
			КонецЕсли;
		
			Если
				Поле.Свойство("ПлательщикСчет") ИЛИ
				Поле.Свойство("ПлательщикИНН") ИЛИ
				Поле.Свойство("Плательщик") ИЛИ
				Поле.Свойство("Плательщик1")
			Тогда
				Сообщение.Параметры.ТекстСообщения ="Проверьте реквизиты плательщика.";
				ПолеОтчета.Вывести(Сообщение);
			КонецЕсли;
			
			Если
				Поле.Свойство("ПлательщикРасчСчет") ИЛИ
				Поле.Свойство("ПлательщикБанк1") ИЛИ
				Поле.Свойство("ПлательщикБанк2") ИЛИ
				Поле.Свойство("ПлательщикБИК") ИЛИ
				Поле.Свойство("ПлательщикКорсчет")
			Тогда
				Сообщение.Параметры.ТекстСообщения ="Проверьте реквизиты банка плательщика.";
				ПолеОтчета.Вывести(Сообщение);
			КонецЕсли;
			
			Если
				Поле.Свойство("ПолучательСчет") ИЛИ
				Поле.Свойство("ПолучательИНН") ИЛИ
				Поле.Свойство("Получатель") ИЛИ
				Поле.Свойство("Получатель1")
			Тогда
				Сообщение.Параметры.ТекстСообщения ="Проверьте реквизиты получателя.";
				ПолеОтчета.Вывести(Сообщение);
			КонецЕсли;
			
			Если
				Поле.Свойство("ПолучательРасчСчет") ИЛИ
				Поле.Свойство("ПолучательБанк1") ИЛИ
				Поле.Свойство("ПолучательБанк2") ИЛИ
				Поле.Свойство("ПолучательБИК") ИЛИ
				Поле.Свойство("ПолучательКорсчет")
			Тогда
				Сообщение.Параметры.ТекстСообщения ="Проверьте реквизиты банка получателя.";
				ПолеОтчета.Вывести(Сообщение);
			КонецЕсли;
						
			Если
				Поле.Свойство("СтатусСоставителя") ИЛИ
				Поле.Свойство("ПлательщикКПП") ИЛИ
				Поле.Свойство("ПолучательКПП") ИЛИ
				Поле.Свойство("ПоказательКБК") ИЛИ
				Поле.Свойство("ОКАТО") ИЛИ
				Поле.Свойство("ПоказательОснования") ИЛИ
				Поле.Свойство("ПоказательПериода") ИЛИ
				Поле.Свойство("ПоказательНомера") ИЛИ
				Поле.Свойство("ПоказательДаты") ИЛИ
				Поле.Свойство("ПоказательТипа")
			Тогда
				Сообщение.Параметры.ТекстСообщения ="Проверьте реквизиты для платежей в бюджет РФ.";
				ПолеОтчета.Вывести(Сообщение);
			КонецЕсли;
			ПолеОтчета.Вывести(Подвал);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры	

// Инициализация значениями глобальных списков
//
Процедура Инициализация(ЗагрузкаДанных)
	
	ВидыОпераций = Новый Соответствие();
	ВидыОпераций.Вставить("01", "Платежное поручение");             // 01 - Списано, зачислено по платежному поручению
	ВидыОпераций.Вставить("02", "Платежное требование");            // 02 - Оплачено, зачислено по платежному требованию
	ВидыОпераций.Вставить("03", "Денежный чек");                    // 03 - Оплачен наличными денежный чек
	ВидыОпераций.Вставить("04", "Объявление на взнос наличными");   // 04 - Поступило наличными по объявлению на взнос наличными
	ВидыОпераций.Вставить("05", "Платежное требование-поручение");  // 05 - Оплачено, зачислено по требованию-поручению
	ВидыОпераций.Вставить("06", "Инкассовое поручение");            // 06 - Оплачено, зачислено по инкассовому поручению
	ВидыОпераций.Вставить("07", "Расчетный чек");                   // 07 - Оплачено, поступило по расчетному чеку
	ВидыОпераций.Вставить("08", "Заявление на аккредитив");         // 08 - Открытие аккредитива, зачисление сумм
                                                                    //      неиспользованного, аннулированного аккредитива
	ВидыОпераций.Вставить("09", "Мемориальный ордер");              // 09 - Списано, зачислено по мемориальному
                                                                    //      (расходному, приходному кассовому) ордеру
	ВидыОпераций.Вставить("10", "Погашение кредита");               // 10 - Документы по погашению кредита, кроме поименованных выше
	ВидыОпераций.Вставить("11", "Выдача кредита");                  // 11 - Документы по выдаче кредита, зачислению
                                                                    //      кредита на счет, кроме поименованных выше
	ВидыОпераций.Вставить("12", "Авизо");                           // 12 - Зачислено на основании авизо
	ВидыОпераций.Вставить("13", "Банковская карта");                // 13 - Расчеты с применением банковских карт
	
	//Обязательные атрибуты в файле обмена
	//для ЗАГРУЗКИ из Клиент-Банка
	//(для загрузки и выгрузки набор реквизитов слегка отличается)
	ОбязательныеАтрибутыЗАГРУЗКИ = Новый СписокЗначений;
	
	//для секции шапки платежного документа
	ОбязательныеАтрибутыЗАГРУЗКИ.Добавить("СекцияДокумент");
	ОбязательныеАтрибутыЗАГРУЗКИ.Добавить("Номер");
	ОбязательныеАтрибутыЗАГРУЗКИ.Добавить("Дата");
	ОбязательныеАтрибутыЗАГРУЗКИ.Добавить("Сумма");
	
	//реквизиты плательщика
	ОбязательныеАтрибутыЗАГРУЗКИ.Добавить("ПлательщикСчет");
	ОбязательныеАтрибутыЗАГРУЗКИ.Добавить("ДатаСписано");
	ОбязательныеАтрибутыЗАГРУЗКИ.Добавить("ПлательщикИНН");
		
	//реквизиты банка получателя (поставщика)
	ОбязательныеАтрибутыЗАГРУЗКИ.Добавить("ПолучательСчет");
	ОбязательныеАтрибутыЗАГРУЗКИ.Добавить("ДатаПоступило");
	ОбязательныеАтрибутыЗАГРУЗКИ.Добавить("ПолучательИНН");
	
	//Обязательные атрибуты в файле обмена
	//для ВЫГРУЗКИ в Клиент-Банк
	//(для загрузки и выгрузки набор реквизитов слегка отличается)
	ОбязательныеАтрибутыВЫГРУЗКИ = Новый СписокЗначений;
	
	//для секции шапки платежного документа
	ОбязательныеАтрибутыВЫГРУЗКИ.Добавить("СекцияДокумент");
	ОбязательныеАтрибутыВЫГРУЗКИ.Добавить("Номер");
	ОбязательныеАтрибутыВЫГРУЗКИ.Добавить("Дата");
	ОбязательныеАтрибутыВЫГРУЗКИ.Добавить("Сумма");
	
	//реквизиты плательщика
	ОбязательныеАтрибутыВЫГРУЗКИ.Добавить("ПлательщикСчет");
	ОбязательныеАтрибутыВЫГРУЗКИ.Добавить("ПлательщикИНН");
	ОбязательныеАтрибутыВЫГРУЗКИ.Добавить("Плательщик");
		
	//реквизиты банка получателя (поставщика)
	ОбязательныеАтрибутыВЫГРУЗКИ.Добавить("ПолучательСчет");
	ОбязательныеАтрибутыВЫГРУЗКИ.Добавить("ПолучательИНН");
	ОбязательныеАтрибутыВЫГРУЗКИ.Добавить("Получатель");
		
	ОбязательныеАтрибутыВЫГРУЗКИ.Добавить("ВидПлатежа");	
	ОбязательныеАтрибутыВЫГРУЗКИ.Добавить("ВидОплаты");
	
	//Обязательные атрибуты в файле обмена
	//для платежей в БЮДЖЕТ

	ОбязательныеАтрибутыБЮДЖЕТ = Новый СписокЗначений;
	
	//дополнительные реквизиты для платежейв бюджет РФ
	ОбязательныеАтрибутыБЮДЖЕТ.Добавить("СтатусСоставителя");
	ОбязательныеАтрибутыБЮДЖЕТ.Добавить("ПлательщикКПП");
	ОбязательныеАтрибутыБЮДЖЕТ.Добавить("ПолучательКПП");
	ОбязательныеАтрибутыБЮДЖЕТ.Добавить("ПоказательКБК");
	ОбязательныеАтрибутыБЮДЖЕТ.Добавить("ОКАТО");
	ОбязательныеАтрибутыБЮДЖЕТ.Добавить("ПоказательОснования");
	ОбязательныеАтрибутыБЮДЖЕТ.Добавить("ПоказательПериода");
	ОбязательныеАтрибутыБЮДЖЕТ.Добавить("ПоказательНомера");
	ОбязательныеАтрибутыБЮДЖЕТ.Добавить("ПоказательДаты");
	ОбязательныеАтрибутыБЮДЖЕТ.Добавить("ПоказательТипа");
	
			
	//Приведенные в верхний регистр реквизиты файла обмена
	//ЗАГРУЗКИ
	ОбязательныеВрегЗАГРУЗКИ = ОбязательныеАтрибутыЗАГРУЗКИ.Скопировать();
	Для каждого Рекв Из ОбязательныеВрегЗАГРУЗКИ Цикл
		Рекв.Значение = ВРег(Рекв.Значение);
	КонецЦикла;
	//ВЫГРУЗКИ
	ОбязательныеВрегВЫГРУЗКИ = ОбязательныеАтрибутыВЫГРУЗКИ.Скопировать();
	Для каждого Рекв Из ОбязательныеВрегВЫГРУЗКИ Цикл
		Рекв.Значение = ВРег(Рекв.Значение);
	КонецЦикла;
	//БЮДЖЕТА
	ОбязательныеВрегБЮДЖЕТ = ОбязательныеАтрибутыБЮДЖЕТ.Скопировать();
	Для каждого Рекв Из ОбязательныеВрегБЮДЖЕТ Цикл
		Рекв.Значение = ВРег(Рекв.Значение);
	КонецЦикла;
	
	//Порядок реквизитов секции документ в файле выгрузки
	
	ПорядокРеквизитов = Новый СписокЗначений;
	ПорядокРеквизитов.Добавить("СекцияДокумент");
	ПорядокРеквизитов.Добавить("Номер");
	ПорядокРеквизитов.Добавить("Дата");
	ПорядокРеквизитов.Добавить("Сумма");
		
	ПорядокРеквизитов.Добавить("КвитанцияДата");
	ПорядокРеквизитов.Добавить("КвитанцияВремя");
	ПорядокРеквизитов.Добавить("КвитанцияСодержание");
	
	
	ПорядокРеквизитов.Добавить("ПлательщикСчет");
	ПорядокРеквизитов.Добавить("ПлательщикИНН");
	ПорядокРеквизитов.Добавить("Плательщик");
				
	ПорядокРеквизитов.Добавить("Плательщик1");
	ПорядокРеквизитов.Добавить("Плательщик2");
	ПорядокРеквизитов.Добавить("Плательщик3");
	ПорядокРеквизитов.Добавить("Плательщик4");
	
	ПорядокРеквизитов.Добавить("ПлательщикРасчСчет");
	ПорядокРеквизитов.Добавить("ПлательщикБанк1");
	ПорядокРеквизитов.Добавить("ПлательщикБанк2");
	ПорядокРеквизитов.Добавить("ПлательщикБИК");
	ПорядокРеквизитов.Добавить("ПлательщикКорсчет");
	
	
	ПорядокРеквизитов.Добавить("ПолучательСчет");
	ПорядокРеквизитов.Добавить("ПолучательИНН");
	ПорядокРеквизитов.Добавить("Получатель");
	
		
	ПорядокРеквизитов.Добавить("Получатель1");
	ПорядокРеквизитов.Добавить("Получатель2");
	ПорядокРеквизитов.Добавить("Получатель3");
	ПорядокРеквизитов.Добавить("Получатель4");
	
	ПорядокРеквизитов.Добавить("ПолучательРасчСчет");
	ПорядокРеквизитов.Добавить("ПолучательБанк1");
	ПорядокРеквизитов.Добавить("ПолучательБанк2");
	ПорядокРеквизитов.Добавить("ПолучательБИК");
	ПорядокРеквизитов.Добавить("ПолучательКорсчет");
	
	ПорядокРеквизитов.Добавить("ВидПлатежа");
	ПорядокРеквизитов.Добавить("СрокПлатежа");
	ПорядокРеквизитов.Добавить("Очередность");
	ПорядокРеквизитов.Добавить("ВидОплаты");
	
	
	ПорядокРеквизитов.Добавить("СтатусСоставителя");
	ПорядокРеквизитов.Добавить("ПлательщикКПП");
	ПорядокРеквизитов.Добавить("ПолучательКПП");
	ПорядокРеквизитов.Добавить("ПоказательКБК");
	ПорядокРеквизитов.Добавить("ОКАТО");
	ПорядокРеквизитов.Добавить("ПоказательОснования");
	ПорядокРеквизитов.Добавить("ПоказательПериода");
	ПорядокРеквизитов.Добавить("ПоказательНомера");
	ПорядокРеквизитов.Добавить("ПоказательДаты");
	ПорядокРеквизитов.Добавить("ПоказательТипа");
	
	
	ПорядокРеквизитов.Добавить("НазначениеПлатежа");
	ПорядокРеквизитов.Добавить("НазначениеПлатежа1");
	ПорядокРеквизитов.Добавить("НазначениеПлатежа2");
	ПорядокРеквизитов.Добавить("НазначениеПлатежа3");
	ПорядокРеквизитов.Добавить("НазначениеПлатежа4");
	ПорядокРеквизитов.Добавить("НазначениеПлатежа5");
	ПорядокРеквизитов.Добавить("НазначениеПлатежа6");
	
	
	ПорядокРеквизитов.Добавить("СрокАкцепта");
	ПорядокРеквизитов.Добавить("ВидАккредитива");
	ПорядокРеквизитов.Добавить("УсловиеОплаты1");
	ПорядокРеквизитов.Добавить("УсловиеОплаты2");
	ПорядокРеквизитов.Добавить("УсловиеОплаты3");
	ПорядокРеквизитов.Добавить("ПлатежПоПредст");
	ПорядокРеквизитов.Добавить("ДопУсловия");
	ПорядокРеквизитов.Добавить("НомерСчетаПоставщика");
	ПорядокРеквизитов.Добавить("ДатаОтсылкиДок");
	ПорядокРеквизитов.Добавить("ДокументОснование");
	
	//Приведенные в верхний регистр реквизиты файла обмена
	РеквизитыВрег = ПорядокРеквизитов.Скопировать();
	Для каждого Рекв Из РеквизитыВрег Цикл
		Рекв.Значение = ВРег(Рекв.Значение);
	КонецЦикла;
	
	Если ЗагрузкаДанных Тогда
		
		РеквизитыВрег.Добавить("ДАТАНАЧАЛА");
		РеквизитыВрег.Добавить("ДАТАКОНЦА");
		РеквизитыВрег.Добавить("РАСЧСЧЕТ");
		РеквизитыВрег.Добавить("НАЧАЛЬНЫЙОСТАТОК");
		РеквизитыВрег.Добавить("ВСЕГОПОСТУПИЛО");
		РеквизитыВрег.Добавить("ВСЕГОСПИСАНО");
		РеквизитыВрег.Добавить("КОНЕЧНЫЙОСТАТОК");
		РеквизитыВрег.Добавить("ДАТАСПИСАНО");
		РеквизитыВрег.Добавить("ДАТАПОСТУПИЛО");
		
	КонецЕсли;

	
	СписокЖурналов =Новый СписокЗначений();
	СписокЖурналов.Добавить("ПлатежноеПоручениеИсходящее",,ложь);
	СписокЖурналов.Добавить("ПлатежноеПоручениеВходящее",,ложь);
	СписокЖурналов.Добавить("АккредитивПереданный",,ложь);
	СписокЖурналов.Добавить("АккредитивПолученный",,ложь);
	СписокЖурналов.Добавить("ПлатежноеТребованиеВыставленное",,ложь);
	СписокЖурналов.Добавить("ПлатежноеТребованиеПолученное",,ложь);
	СписокЖурналов.Добавить("ИнкассовоеПоручениеПереданное",,ложь);
	СписокЖурналов.Добавить("ИнкассовоеПоручениеПолученное",,ложь);
	СписокЖурналов.Добавить("ПлатежныйОрдерСписаниеДенежныхСредств",,ложь);
	СписокЖурналов.Добавить("ПлатежныйОрдерПоступлениеДенежныхСредств",,ложь);
	
КонецПроцедуры	


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//	

ЗагрРасчетныеСчета = Новый СписокЗначений;
ЗагрВидыДокументов = Новый СписокЗначений;
ЗагрДокументы = Новый СписокЗначений;
ПустаяДата = Дата("00010101");

СтруктураПлатежКорреспондент=Новый Структура;

СтруктураПлатежКорреспондент.Вставить("ПлатежноеПоручениеИсходящее","Получатель");
СтруктураПлатежКорреспондент.Вставить("ПлатежноеПоручениеВходящее","Плательщик");
СтруктураПлатежКорреспондент.Вставить("АккредитивПереданный","Получатель");
СтруктураПлатежКорреспондент.Вставить("АккредитивПолученный","Плательщик");
СтруктураПлатежКорреспондент.Вставить("ПлатежноеТребованиеВыставленное","Плательщик");
СтруктураПлатежКорреспондент.Вставить("ПлатежноеТребованиеПолученное","Получатель");
СтруктураПлатежКорреспондент.Вставить("ИнкассовоеПоручениеПереданное","Плательщик");
СтруктураПлатежКорреспондент.Вставить("ИнкассовоеПоручениеПолученное","Получатель");
СтруктураПлатежКорреспондент.Вставить("ПлатежныйОрдерСписаниеДенежныхСредств","Получатель");
СтруктураПлатежКорреспондент.Вставить("ПлатежныйОрдерПоступлениеДенежныхСредств","Плательщик");

Кодировка = "Windows";