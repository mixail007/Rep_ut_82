

// Выводит информацию о загруженных документах
//
Процедура ПечатьВФорме(Поля =Неопределено)
	
	ЭлементыФормы.ПолеОтчета.Очистить();	
	Печать(ЭлементыФормы.ПолеОтчета, Поля);		
	ЭлементыФормы.ПанельОбработки.ТекущаяСтраница = ЭлементыФормы.ПанельОбработки.Страницы["Отчет"];
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик нажатий основных кнопок
//
Процедура КнопкаВыполнитьНажатие(Элемент)
	
	Если Организация.Пустая() Тогда
		
		Сообщить("Не выбрана организация", СтатусСообщения.Внимание);
		Возврат;
		
	КонецЕсли;
	
	Если Элемент.Имя = "Выгрузить" Тогда
				
		Выгрузить();
		
		Если ВыводитьОтчет Тогда
			ПечатьВФорме(ПустыеПоляДокумента);
		КонецЕсли;
		
	ИначеЕсли Элемент.Имя = "Загрузить" Тогда
		
		ФайлЗагр = Новый Файл(ФайлЗагрузки);
		Если ФайлЗагр.Существует() = Ложь Тогда
			Сообщить("Файла импорта операций по расчетным счетам "+ФайлЗагрузки+" не существует!");
			Возврат;
		КонецЕсли;
				
		ОтобратьКонтрагентов();
				
		Если СписокКонтрагентов.Количество()>0 Тогда
			Текст = "Найдены контрагенты, отсутствующие в базе данных.Продолжить?";
			Ответ = Вопрос(Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );
			
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Загрузить();
		
		Если ВыводитьОтчет Тогда
			ПечатьВФорме();
		КонецЕсли;
		
	ИначеЕсли Элемент.Имя = "Проверить" Тогда
		
		ФайлЗагр = Новый Файл(ФайлЗагрузки);
		Если ФайлЗагр.Существует() = Ложь Тогда
			Сообщить("Файла импорта операций по расчетным счетам "+ФайлЗагрузки+" не существует!");
			Возврат;
		КонецЕсли;
			
		ОтобратьКонтрагентов();
				
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ПВХПользователя     =ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация;
	СтруктураОтбора     =Новый Структура("Пользователь, Настройка", глТекущийПользователь, ПВХПользователя);
	ОсновнаяОрганизация =РегистрыСведений.НастройкиПользователей.Получить(СтруктураОтбора).Значение;
	
	Если НЕ (ОсновнаяОрганизация=Неопределено ИЛИ ОсновнаяОрганизация.Пустая()) Тогда
		Организация =ОсновнаяОрганизация;
	КонецЕсли;
	
	НачПериода = РабочаяДата;
	КонПериода = РабочаяДата;
	
	ФайлВыгрузки = КаталогПрограммы() + "1c_to_kl.txt";
	ФайлЗагрузки = КаталогПрограммы() + "kl_to_1c.txt";
	
	ЗаполнениеБанковскихСчетов();
	
	Макет = ПолучитьМакет("ВидыДокументов");
	ОбластьДокументов = Макет.ПолучитьОбласть("Документы");
	ОбластьДокументовВысота = ОбластьДокументов.ВысотаТаблицы;
	
	Для НСтр = 1 По ОбластьДокументовВысота Цикл
		ВидДокумента  = СокрЛП(ОбластьДокументов.Область(НСтр, 1).Текст);
		Название      = СокрЛП(ОбластьДокументов.Область(НСтр, 2).Текст);
		Корреспондент = СокрЛП(ОбластьДокументов.Область(НСтр, 3).Текст);
		Кратко        = СокрЛП(ОбластьДокументов.Область(НСтр, 4).Текст);
		
		Если ВидДокумента = "" Тогда
			Продолжить;
		КонецЕсли;
		
		Если Метаданные.Документы.Найти(ВидДокумента) = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		  
		Стр = ТаблицаДокументов.Добавить();
		Стр.Пометка        =Истина;
		Стр.Документ       =ВидДокумента;
		Стр.Название       =Название;
		Стр.Корреспондент  =Корреспондент;
		Стр.ДокументКратко =Кратко;
		
	КонецЦикла;	
	
	ИмяОбработки = ЭтотОбъект.Метаданные().Имя;
	
	ПрмКлиентБанка = ВосстановитьЗначение(ИмяОбработки+"КлиентБанка");
	Если ПрмКлиентБанка <> Неопределено Тогда
		КлиентБанка = ПрмКлиентБанка;
	Иначе
		КлиентБанка =ЭлементыФормы.КлиентБанка.СписокВыбора.Получить(0);
	КонецЕсли;
	
	ПрмФайлВыгрузки = ВосстановитьЗначение(ИмяОбработки+"ФайлВыгрузки");
	Если ПрмФайлВыгрузки <> Неопределено Тогда
		ФайлВыгрузки = ПрмФайлВыгрузки;
	КонецЕсли;
	
	ПрмФайлЗагрузки = ВосстановитьЗначение(ИмяОбработки+"ФайлЗагрузки");
	Если ПрмФайлЗагрузки <> Неопределено Тогда
		ФайлЗагрузки = ПрмФайлЗагрузки;
	КонецЕсли;
	
	ПрмКодировка = ВосстановитьЗначение(ИмяОбработки+"КодировкаФайла");
	Если ПрмКодировка <> Неопределено Тогда
		Кодировка = ПрмКодировка;
	Иначе
		Кодировка =ЭлементыФормы.Кодировка.СписокВыбора.Получить(0);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗакрытием" формы
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ИмяОбработки = ЭтотОбъект.Метаданные().Имя;
	СохранитьЗначение(ИмяОбработки+"КлиентБанка",КлиентБанка);
	СохранитьЗначение(ИмяОбработки+"ФайлВыгрузки",ФайлВыгрузки);
	СохранитьЗначение(ИмяОбработки+"ФайлЗагрузки",ФайлЗагрузки);
	СохранитьЗначение(ИмяОбработки+"КодировкаФайла",Кодировка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Событие возникающее при изменении реквизита: Организация
// 
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗаполнениеБанковскихСчетов();
	
КонецПроцедуры
	
// Открывает для просмотра текстовой документ
//  
Процедура ПросмотрОткрытие(Элемент, СтандартнаяОбработка)
	
	ФайлНаДиске = Новый Файл(Элемент.Значение);
	Если Не ФайлНаДиске.Существует() Тогда
		Предупреждение("Не найден файл!");
		Возврат;
	КонецЕсли;
	
	Текст = Новый ТекстовыйДокумент();
	Если Кодировка = "DOS" Тогда
		Кодир = КодировкаТекста.OEM;
	Иначе
		Кодир = КодировкаТекста.ANSI;
	КонецЕсли;
	Текст.Прочитать(Элемент.Значение, Кодир);
	Текст.Показать(Элемент.Имя,Элемент.Значение);
	
КонецПроцедуры

// ВыборФайла(Элемент, ПроверятьСуществование=Ложь)
//
Процедура ВыборФайла(Элемент, ПроверятьСуществование=Ложь)
	
	ДиалогФыбораФайла	=	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогФыбораФайла.Фильтр						        =	"Файл данных (*.txt)|*.txt";
	ДиалогФыбораФайла.Заголовок						      =	"Выберите файл";
	ДиалогФыбораФайла.ПредварительныйПросмотр		=	Ложь;
	ДиалогФыбораФайла.Расширение					      =	"txt";
	ДиалогФыбораФайла.ИндексФильтра					    =	0;
	ДиалогФыбораФайла.ПолноеИмяФайла				    =	Элемент.Значение;
	ДиалогФыбораФайла.ПроверятьСуществованиеФайла	=	ПроверятьСуществование;
	
	Если ДиалогФыбораФайла.Выбрать() Тогда
		Элемент.Значение = ДиалогФыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

// ИмяФайлаДанныхНачалоВыбора(Элемент, СтандартнаяОбработка)
//
Процедура ИмяФайлаДанныхНачалоВыбора(Элемент, СтандартнаяОбработка)	
	
	ВыборФайла(Элемент);
	
КонецПроцедуры

// ВыбПериодНажатие(Элемент)	
//
// Описание:
//  Вызывает стандартную обработку выбор переиода
Процедура ВыбПериодНажатие(Элемент)	
	
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(НачПериода, ?(КонПериода='0001-01-01', КонПериода, КонецДня(КонПериода)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.Редактировать();
	НачПериода = НастройкаПериода.ПолучитьДатуНачала();
	КонПериода = НастройкаПериода.ПолучитьДатуОкончания();
	
КонецПроцедуры

// ЗаполнениеБанковскихСчетов()
//
// Описание:
//  Процедура заполняет таблицу значений счетами выбранной организации
Процедура ЗаполнениеБанковскихСчетов()
	
	ТаблицаСчетов.Очистить();	
	Если Не Организация.Пустая() Тогда
		СпрБанковскиеСчета = Справочники.БанковскиеСчета.Выбрать(,Организация);
		Пока СпрБанковскиеСчета.Следующий() Цикл
			Если СокрЛП(СпрБанковскиеСчета.НомерСчета) = "" Тогда
				Продолжить;
			КонецЕсли;	
			Стр = ТаблицаСчетов.Добавить();
			Стр.Пометка = Истина;
			Стр.Счет = СпрБанковскиеСчета.Ссылка;		
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры	

Процедура ПослеВосстановленияЗначений()
	
	Если Не Организация.Пустая() Тогда
		ЗаполнениеБанковскихСчетов();
	КонецЕсли;
	
КонецПроцедуры

СписокКБ = Новый СписокЗначений;
СписокКБ.Добавить("DiasoftCLIENT 4x4 for Windows Диасофт");
СписокКБ.Добавить("Клиент-Банк РФК");
СписокКБ.Добавить("LanVisit DOS 4.90 Ланит");
СписокКБ.Добавить("ДБО BS-Client v.3 BSS");
СписокКБ.Добавить("Система клиент-банк TIVAL");
СписокКБ.Добавить("Клиент банка InterBank v.5.1 R-Style Software Lab");
СписокКБ.Добавить("""Электронный клиент"" АКБ Автобанк");
СписокКБ.Добавить("""Клиент-ТЕЛЕБАНК"" АОЗТ Степ Ап");
СписокКБ.Добавить("ИНИСТ Банк-Клиент ЗАО ИНИСТ");
СписокКБ.Добавить("Клиент-банк МИБ");
СписокКБ.Добавить("Система Клиент-Банк ""BClient""");
СписокКБ.Добавить("Система электронных расчетов QuickPay ЗАО АО Кворум");
СписокКБ.Добавить("Комплекс обмена платежными документами Курьер. АОЗТ АстраСофт");
СписокКБ.Добавить("WinClient фирмы МПИ-Банк");
СписокКБ.Добавить("Система ""Клиент-Банк Плюс"" ОАО ""Уралвнешторгбанка""");
СписокКБ.Добавить("Система ""MailBank"" фирмы ""Системные технологии"" Минск");
СписокКБ.Добавить("On-Soft Клиент-Банк КБ ""ЛОКО-Банк""");
СписокКБ.Добавить("АРМ ""Клиент"" АС ""Клиент-Сбербанк"" Сбербанка России");
СписокКБ.Добавить("Система  ""iBank 2"" ООО ""БИФИТ""");
СписокКБ.Добавить("""Yugo-Vostok Online"" ОАО БАНК ""ЮГО-ВОСТОК""");
СписокКБ.Добавить("Банк-клиент АКБ ""Лефко-Банк""");

ЭлементыФормы.КлиентБанка.СписокВыбора=СписокКБ;

СписокКодировок=Новый СписокЗначений;
СписокКодировок.Добавить("Windows");
СписокКодировок.Добавить("DOS");

ЭлементыФормы.Кодировка.СписокВыбора=СписокКодировок;





