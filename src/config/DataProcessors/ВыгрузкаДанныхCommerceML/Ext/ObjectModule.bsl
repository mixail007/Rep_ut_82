
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ НАСТРОЙКИ ПОСТРОИТЕЛЕЙ ОТЧЕТОВ

// Процедура присваивает текст запроса для построителя прайс-листа.
//
// Параметры:
// Построитель - построитель отчета для которого устанавливается настройка
//
Процедура НастроитьПостроительДляПрайса(Построитель) Экспорт

	Построитель.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Цены.НоменклатураСсылка         КАК НоменклатураСсылка,
	|	Цены.Наименование               КАК Наименование,
	|	Цены.Артикул                    КАК Артикул,
	|	Цены.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|	Цены.ЭтоГруппа                  КАК ЭтоГруппа,
	|	Цены.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	Цены.Валюта                     КАК Валюта,
	|	Цены.Цена                       КАК Цена,
	|	Цены.ТипЦенСсылка               КАК ТипЦенСсылка,
	|	Цены.ТипЦен                     КАК ТипЦен,
	|	Цены.ВалютаЦены                 КАК ВалютаЦены,
	|	Цены.ЦенаВключаетНДС            КАК ЦенаВключаетНДС,
	|	Цены.ЕдиницаИзмеренияПрайс      КАК ЕдиницаИзмеренияПрайс,
	|	Цены.ЕдиницаСсылка              КАК ЕдиницаСсылка,
	|	Цены.Коэффициент                КАК Коэффициент,
	|	Цены.ХарактеристикаСсылка       КАК ХарактеристикаСсылка,
	|	РегистрШтрихКоды.ШтрихКод       КАК ШтрихКод
	|ИЗ
	|(ВЫБРАТЬ
	|	ЦеныНоменклатуры.Номенклатура.Ссылка                                   КАК НоменклатураСсылка,
	|	ЦеныНоменклатуры.Номенклатура.Наименование                             КАК Наименование,
	|	ЦеныНоменклатуры.Номенклатура.Артикул                                  КАК Артикул,
	|	ЦеныНоменклатуры.Номенклатура.БазоваяЕдиницаИзмерения.Наименование     КАК ЕдиницаИзмерения,
	|	ЦеныНоменклатуры.Номенклатура.ЭтоГруппа                                КАК ЭтоГруппа,
	|	ЦеныНоменклатуры.ХарактеристикаНоменклатуры.Наименование               КАК НаименованиеХарактеристики,
	|	ЦеныНоменклатуры.Валюта.Наименование                                   КАК Валюта,
	|	ЦеныНоменклатуры.Цена                                                  КАК Цена,
	|	ЦеныНоменклатуры.ТипЦен.Ссылка                                         КАК ТипЦенСсылка,
	|	ЦеныНоменклатуры.ТипЦен.Наименование                                   КАК ТипЦен,
	|	ЦеныНоменклатуры.ТипЦен.ВалютаЦены.Наименование                        КАК ВалютаЦены,
	|	ЦеныНоменклатуры.ТипЦен.ЦенаВключаетНДС                                КАК ЦенаВключаетНДС,
	|	ЦеныНоменклатуры.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование КАК ЕдиницаИзмеренияПрайс,
	|	ЦеныНоменклатуры.ЕдиницаИзмерения.Ссылка                               КАК ЕдиницаСсылка,
	|	ЦеныНоменклатуры.ЕдиницаИзмерения.Коэффициент                          КАК Коэффициент,
	|ВЫБОР
	|	Когда ЦеныНоменклатуры.ХарактеристикаНоменклатуры.Ссылка ЕСТЬ NULL Тогда &ПустаяХарактеристика
	|	Иначе ЦеныНоменклатуры.ХарактеристикаНоменклатуры.Ссылка
	|КОНЕЦ КАК ХарактеристикаСсылка
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаОтчета) КАК ЦеныНоменклатуры
	|{ГДЕ
	|	ЦеныНоменклатуры.Номенклатура.* КАК Номенклатура,
	|	ЦеныНоменклатуры.ТипЦен.*       КАК ТипЦен
	|	}) КАК Цены
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ШтрихКоды КАК РегистрШтрихКоды
	|ПО Цены.НоменклатураСсылка = РегистрШтрихКоды.Владелец И
	|	Цены.ХарактеристикаСсылка = РегистрШтрихКоды.ХарактеристикаНоменклатуры И
	|	Цены.ЕдиницаСсылка = РегистрШтрихКоды.ЕдиницаИзмерения
	|УПОРЯДОЧИТЬ ПО НоменклатураСсылка, ХарактеристикаСсылка, ТипЦенСсылка
	|";

КонецПроцедуры

// Процедура присваивает текст запроса для построителя каталога.
//
// Параметры:
// Построитель - построитель отчета для которого устанавливается настройка
//
Процедура НастроитьПостроительДляКаталога(Построитель) Экспорт

	Построитель.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.НоменклатураСсылка         КАК НоменклатураСсылка,
	|	Товары.Наименование               КАК Наименование,
	|	Товары.Артикул                    КАК Артикул,
	|	Товары.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|	Товары.ЕдиницаДляШтрихКода        КАК ЕдиницаДляШтрихКода,
	|	Товары.ЭтоГруппа                  КАК ЭтоГруппа,
	|	Товары.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	Товары.Характеристика             КАК ХарактеристикаСсылка,
	|	РегистрШтрихКоды.ШтрихКод         КАК ШтрихКод
	|ИЗ
	|(ВЫБРАТЬ
	|	Номенклатура.Ссылка                               КАК НоменклатураСсылка,
	|	Номенклатура.Наименование                         КАК Наименование,
	|	Номенклатура.Артикул                              КАК Артикул,
	|	Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|	Номенклатура.ЕдиницаХраненияОстатков.Ссылка       КАК ЕдиницаДляШтрихКода,
	|	Номенклатура.ЭтоГруппа                            КАК ЭтоГруппа,
	|	ХарактеристикиНоменклатуры.Ссылка                 КАК ХарактеристикаСсылка,
	|	ХарактеристикиНоменклатуры.Наименование           КАК НаименованиеХарактеристики,
	|ВЫБОР
	|	Когда ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL Тогда &ПустаяХарактеристика
	|	Иначе ХарактеристикиНоменклатуры.Ссылка
	|КОНЕЦ КАК Характеристика
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ПО Номенклатура.Ссылка = ХарактеристикиНоменклатуры.Владелец
	|{ГДЕ
	|	Номенклатура.Ссылка.* КАК Номенклатура
	|	}) КАК Товары
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ШтрихКоды КАК РегистрШтрихКоды
	|ПО Товары.НоменклатураСсылка = РегистрШтрихКоды.Владелец И
	|	Товары.Характеристика = РегистрШтрихКоды.ХарактеристикаНоменклатуры И
	|	Товары.ЕдиницаДляШтрихКода = РегистрШтрихКоды.ЕдиницаИзмерения
	|";

КонецПроцедуры

// Процедура присваивает текст запроса для построителя документов.
//
// Параметры:
// Построитель - построитель отчета для которого устанавливается настройка
//
Процедура НастроитьПостроительДляДокументов(Построитель, ТипВыгрузки) Экспорт

	Если ТипВыгрузки = "ОтпускТовара" Тогда
		врИмяТаблицы = "РеализацияТоваровУслуг";
	Иначе
		врИмяТаблицы = "ЗаказПоставщику";
	КонецЕсли; 
	
	Построитель.Текст = "
	|ВЫБРАТЬ
	|	" + врИмяТаблицы + ".Контрагент.Ссылка КАК Контрагент,
	|	" + врИмяТаблицы + ".Ссылка            КАК ДокументыСсылка
	|ИЗ
	|	Документ." + врИмяТаблицы + " КАК " + врИмяТаблицы + "
	|ГДЕ НЕ ПометкаУдаления
	|{ГДЕ
	|	" + врИмяТаблицы + ".Контрагент.Ссылка.* КАК Контрагент,
	|	" + врИмяТаблицы + ".Ссылка.* КАК Документ
	|	}
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент, Дата";

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ ДЛЯ АЛГОРИТМОВ ВЫГРУЗКИ ДАННЫХ

// Процедура вызывает диалог выбора файла, если выбирается каталог,
// то генерирует имя файла, используя текущую дату и время
//
// Параметры:
//  РежимДиалога - режим вызова диалога выбора файла
//
Функция ВыборФайла(РежимДиалога) Экспорт

	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалога);

	ДиалогВыбора.Фильтр     = "Файл данных (*.xml)|*.xml";
	ДиалогВыбора.Расширение = "xml";
	
	Если РежимДиалога = РежимДиалогаВыбораФайла.ВыборКаталога Тогда
		ДиалогВыбора.Заголовок ="Выберите каталог";
	Иначе
		ДиалогВыбора.Заголовок ="Выберите файл";
	КонецЕсли;

	ДиалогВыбора.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбора.ИндексФильтра               = 0;
	ДиалогВыбора.ПроверятьСуществованиеФайла = Ложь;

	Если ДиалогВыбора.Выбрать() Тогда
		Если РежимДиалога = РежимДиалогаВыбораФайла.ВыборКаталога Тогда
			Если ЗначениеНеЗаполнено(ДиалогВыбора.ПолноеИмяФайла) Тогда
				ДатаБезПробелов  = СтрЗаменить(Формат(ТекущаяДата(), "ДЛФ=DT"), " ", "");
				ДатаБезТочек     = СтрЗаменить(ДатаБезПробелов, ".", "");
				ДатаБезТочек     = СтрЗаменить(ДатаБезПробелов, ".", "");
				ИмяФайла         = СтрЗаменить(ДатаБезТочек, ":", "") + ".xml";
				Возврат ДиалогВыбора.Каталог + "\" + ИмяФайла;
			Иначе
				Возврат ДиалогВыбора.ПолноеИмяФайла;
			КонецЕсли;
		Иначе
			Возврат ДиалогВыбора.ПолноеИмяФайла;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Процедура проводит проверку значнеие и пишет текстовой узел в файл XML
//
// Параметры:
//  ОбъектXML - объект ЗаписьXML
//  Имя       - наименования узла
//  Значение  - текстовое значение для записи в файл
//
Процедура ЗаписатьТекстовойУзел(ОбъектXML, Имя, Значение)

	СтрокаЗаписи = Строка(Значение);
	Если НЕ ЗначениеНеЗаполнено(СтрокаЗаписи) Тогда
		ОбъектXML.ЗаписатьНачалоЭлемента(Имя);
		ОбъектXML.ЗаписатьТекст(Строка(Значение));
		ОбъектXML.ЗаписатьКонецЭлемента();
	КонецЕсли;

КонецПроцедуры

// Функция формирует идентификатор для товара, по элементу номенклатуры и характеристика
//
// Параматры:
//  Номенклатура   - справочник-ссылка Номенклатура
//  Характеристика - справочник-ссылка ХарактеристикиНоменклатуры
//
// Возвращаемое значение:
//  строка - идентификатор товара для каталога
//
Функция СформироватьИдентификатовТовара(Номенклатура, Характеристика)

	Если ЗначениеНеЗаполнено(Характеристика) Тогда
		Возврат Строка(Номенклатура.УникальныйИдентификатор());
	Иначе
		Возврат Строка(Номенклатура.УникальныйИдентификатор()) + "#" + Строка(Характеристика.УникальныйИдентификатор());
	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАПИСИ В ФАЙЛ ЭЛЕМЕНТОВ ДАННЫХ

// Процедура пищет в XML-файл информацию о контрагенте
//
// Параметры:
//  ОбъектXML  - объект типа ЗаписьXML
//  ИмяУзла    - строка-наименование узла контрагента
//  Контрагент - справочник-ссылка "КОнтрагенты"
//
Процедура ВыгрузитьКонтрагента(ОбъектXML, ИмяУзла, Контрагент)

	ОбъектXML.ЗаписатьНачалоЭлемента(ИмяУзла);

	ЗаписатьТекстовойУзел(ОбъектXML, "Ид",           Строка(Контрагент.УникальныйИдентификатор()));
	ЗаписатьТекстовойУзел(ОбъектXML, "ИНН",          Контрагент.ИНН);
	Если Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ЗаписатьТекстовойУзел(ОбъектXML, "ОфициальноеНаименование", Контрагент.НаименованиеПолное);
	Иначе
		ЗаписатьТекстовойУзел(ОбъектXML, "ПолноеНаименование", Контрагент.НаименованиеПолное);
	КонецЕсли;
	ЗаписатьТекстовойУзел(ОбъектXML, "Наименование", Контрагент.Наименование);

	ОбъектXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

// Процедура пищет в XML-файл информацию о контрагенте при выгрузке документов
//
// Параметры:
//  ОбъектXML  - объект типа ЗаписьXML
//  Контрагент - справочник-ссылка "КОнтрагенты"
//  Роль       - строка - значение тэга "Роль"
//
Процедура ВыгрузитьКонтрагентаДок(ОбъектXML, Контрагент, Роль)

	ОбъектXML.ЗаписатьНачалоЭлемента("Контрагент");

	ЗаписатьТекстовойУзел(ОбъектXML, "Ид",           Строка(Контрагент.УникальныйИдентификатор()));
	ЗаписатьТекстовойУзел(ОбъектXML, "ИНН",          Контрагент.ИНН);
	Если Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ЗаписатьТекстовойУзел(ОбъектXML, "ОфициальноеНаименование", Контрагент.НаименованиеПолное);
	Иначе
		ЗаписатьТекстовойУзел(ОбъектXML, "ПолноеНаименование", Контрагент.НаименованиеПолное);
	КонецЕсли;
	ЗаписатьТекстовойУзел(ОбъектXML, "Наименование", Контрагент.Наименование);
	ЗаписатьТекстовойУзел(ОбъектXML, "Роль",         Роль);

	ОбъектXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

// Процедура пищет в XML-файл информацию о налоге НДС
//
// Параметры:
//  ОбъектXML    - объект типа ЗаписьXML
//  УчтеноВСумме - флаг НДС в сумме
//  Сумма        -  сумма НДС
//
Процедура ВыгрузитьНДС(ОбъектXML, УчтеноВСумме, Сумма = 0)

	ОбъектXML.ЗаписатьНачалоЭлемента("Налог");
	ЗаписатьТекстовойУзел(ОбъектXML, "Наименование", "НДС");
	ЗаписатьТекстовойУзел(ОбъектXML, "УчтеноВСумме", Строка(Число(УчтеноВСумме)));
	Если Сумма Тогда
		ЗаписатьТекстовойУзел(ОбъектXML, "Сумма", Строка(Сумма));
	КонецЕсли;
	ОбъектXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

// Процедура пищет в XML-файл информацию о единице измерения
//
// Параметры:
//  ОбъектXML  - объект типа ЗаписьXML
//  ИмяУзла    - строка-наименование узла единицы измерения
//  ИмяЕдиницы - строка-наименование единицы измерения
//
Процедура ВыгрузитьЕдиницуИзмерения(ОбъектXML, ИмяУзла, ИмяЕдиницы)

	Если НЕ ЗначениеНеЗаполнено(ИмяЕдиницы) Тогда
		ОбъектXML.ЗаписатьНачалоЭлемента(ИмяУзла);
		ЗаписатьТекстовойУзел(ОбъектXML, "Имя", ИмяЕдиницы);
		ОбъектXML.ЗаписатьКонецЭлемента();
	КонецЕсли;

КонецПроцедуры	

// Процедура пищет в XML-файл обязательные для товара реквизиты
// если передан пустой идентификатор, то он формируется по умолчанию
//
// Параметры:
//  ОбъектXML - объект типа ЗаписьXML
//  Товар     - структура, содержащая реквизиты товара
//  Ид        - строка идентификатор товара
//
Процедура ВыгрузитьОсновныеРеквизитыТовара(ОбъектXML, Товар, Ид = Неопределено)

	Если ЗначениеНеЗаполнено(Ид) Тогда
		ИдТовара = СформироватьИдентификатовТовара(Товар.НоменклатураСсылка, Товар.ХарактеристикаСсылка);
		ЗаписатьТекстовойУзел(ОбъектXML, "Ид", ИдТовара);
	Иначе
		ЗаписатьТекстовойУзел(ОбъектXML, "Ид", Ид);
	КонецЕсли;
	ЗаписатьТекстовойУзел(ОбъектXML, "ШтрихКод",     Товар.ШтрихКод);
	ЗаписатьТекстовойУзел(ОбъектXML, "Артикул",      Товар.Артикул);

	Если ЗначениеНеЗаполнено(Товар.ХарактеристикаСсылка) Тогда
		ИмяТовара = Товар.Наименование;
	Иначе
		ИмяТовара = СокрЛП(Товар.Наименование) + " (" + СокрЛП(Товар.НаименованиеХарактеристики) + ")";
	КонецЕсли;
	ЗаписатьТекстовойУзел(ОбъектXML, "Наименование", ИмяТовара);

	Если НЕ ЗначениеНеЗаполнено(Товар.ЕдиницаИзмерения) Тогда
		ВыгрузитьЕдиницуИзмерения(ОбъектXML, "БазоваяЕдиница", Товар.ЕдиницаИзмерения);
	КонецЕсли;

КонецПроцедуры

// Процедура пищет в XML-файл информацию по товару при выгрузке
//
// Параметры:
//  ОбъектXML - объект типа ЗаписьXML
//  ИмяУзла    - строка-наименование узла товара
//  Товар     - структура, содержащая реквизиты товара
//
Процедура ВыгрузитьТоварДляПрайса(ОбъектXML, ИмяУзла, Товар)

	ОбъектXML.ЗаписатьНачалоЭлемента(ИмяУзла);
	ВыгрузитьОсновныеРеквизитыТовара(ОбъектXML, Товар);

	ОбъектXML.ЗаписатьНачалоЭлемента("Цены");
	Пока Товар.СледующийПоЗначениюПоля("ТипЦенСсылка") Цикл
		ОбъектXML.ЗаписатьНачалоЭлемента("Цена");
		ЗаписатьТекстовойУзел(ОбъектXML, "ИдТипаЦены", Строка(Товар.ТипЦенСсылка.Код));

		Представление = СокрЛП(Товар.Цена) + " " + СокрЛП(Товар.Валюта) + " за " + СокрЛП(Товар.ЕдиницаИзмерения);
		ЗаписатьТекстовойУзел(ОбъектXML, "Представление", Представление);
		ЗаписатьТекстовойУзел(ОбъектXML, "ЦенаЗаЕдиницу", Товар.Цена);
		ЗаписатьТекстовойУзел(ОбъектXML, "Валюта",        Товар.Валюта);
		ЗаписатьТекстовойУзел(ОбъектXML, "Единица",       Товар.ЕдиницаИзмеренияПрайс);
		ЗаписатьТекстовойУзел(ОбъектXML, "Коэффициент",   Товар.Коэффициент);
		ОбъектXML.ЗаписатьКонецЭлемента();

	КонецЦикла;
	ОбъектXML.ЗаписатьКонецЭлемента();

	ОбъектXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАПИСИ В ФАЙЛ ЭЛЕКТРОННЫХ ДОКУМЕНТОВ

// Процедура пищет электронный документ "Каталог"
//
// Параметры:
//  ОбъектXML        - объект типа ЗаписьXML
//  ИмяКаталога      - строка-наименование каталога
//  ИдКаталога       - строка-идентификатор каталога
//  ВладелецКаталога - справочник-ссылка "Организация", владелец каталога
//  Товары           - результат запроса по номенклатуре
//
Процедура ВыгрузитьКаталог(ОбъектXML, ИмяКаталога, ИдКаталога, ВладелецКаталога, Товары)

	ОбъектXML.ЗаписатьНачалоЭлемента("Каталог");

	ЗаписатьТекстовойУзел(ОбъектXML, "Ид", Строка(ИдКаталога));
	Если ЗначениеНеЗаполнено(ИмяКаталога) Тогда
		ИмяКаталога = "Каталог товаров от "+ Строка(ТекущаяДата());
	КонецЕсли;
	ЗаписатьТекстовойУзел(ОбъектXML, "Наименование", ИмяКаталога);
	ВыгрузитьКонтрагента(ОбъектXML, "Владелец", ВладелецКаталога);

	КоличествоВыгруженныхСтрок = 0;
	ОбъектXML.ЗаписатьНачалоЭлемента("Товары");
	Выборка = Товары.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.ЭтоГруппа Тогда
			ОбъектXML.ЗаписатьНачалоЭлемента("Товар");
			ВыгрузитьОсновныеРеквизитыТовара(ОбъектXML, Выборка);
			ОбъектXML.ЗаписатьКонецЭлемента();
			КоличествоВыгруженныхСтрок = КоличествоВыгруженныхСтрок + 1;
		КонецЕсли;
	КонецЦикла;
	ОбъектXML.ЗаписатьКонецЭлемента();

	ОбъектXML.ЗаписатьКонецЭлемента();

	Сообщить(" Количество выгруженных строк каталога товаров: " + КоличествоВыгруженныхСтрок);

КонецПроцедуры

// Процедура пищет электронный документ "Пакет предложений"
//
// Параметры:
//  ОбъектXML        - объект типа ЗаписьXML
//  ИмяПрайса      - строка-наименование пакета предложений
//  ИдКаталога     - строка-идентификатор каталога по которому подготовлен пакет предложений
//  ВладелецПрайса - справочник-ссылка "Организация", владелец пакета предложений
//  Товары           - результат запроса по номенклатуре и ценам
//
Процедура ВыгрузитьПрайс(ОбъектXML, ИмяПрайса, ИдКаталога, ВладелецПрайса, Товары)

	ОбъектXML.ЗаписатьНачалоЭлемента("ПакетПредложений");

	ЗаписатьТекстовойУзел(ОбъектXML, "ИдКаталога", Строка(ИдКаталога));
	Если ЗначениеНеЗаполнено(ИмяПрайса) Тогда
		ИмяПрайса = "Прайс-лист от "+ Строка(ТекущаяДата());
	КонецЕсли;

	ЗаписатьТекстовойУзел(ОбъектXML, "Наименование", ИмяПрайса);
	ВыгрузитьКонтрагента(ОбъектXML, "Владелец", ВладелецПрайса);

	//Пишем таблицу типов цен
	ОбъектXML.ЗаписатьНачалоЭлемента("ТипыЦен");

	ТаблицаТиповЦен = Товары.Выгрузить();
	ТаблицаТиповЦен.Свернуть("ТипЦенСсылка,ТипЦен,ВалютаЦены,ЦенаВключаетНДС");

	Для Каждого СтрокаТипЦены Из ТаблицаТиповЦен Цикл
		ОбъектXML.ЗаписатьНачалоЭлемента("ТипЦены");

		ЗаписатьТекстовойУзел(ОбъектXML, "Ид", Строка(СтрокаТипЦены.ТипЦенСсылка.Код));
		ЗаписатьТекстовойУзел(ОбъектXML, "Наименование", СтрокаТипЦены.ТипЦен);
		ЗаписатьТекстовойУзел(ОбъектXML, "Валюта",       СтрокаТипЦены.ВалютаЦены);

		ВыгрузитьНДС(ОбъектXML,СтрокаТипЦены.ЦенаВключаетНДС);

		ОбъектXML.ЗаписатьКонецЭлемента();

	КонецЦикла;

	ОбъектXML.ЗаписатьКонецЭлемента();

	//Пишем таблицу товаров с ценами
	ОбъектXML.ЗаписатьНачалоЭлемента("Предложения");
	Выборка = Товары.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("НоменклатураСсылка") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("ХарактеристикаСсылка") Цикл
			ВыгрузитьТоварДляПрайса(ОбъектXML,"Предложение", Выборка);
		КонецЦикла;
	КонецЦикла;
	ОбъектXML.ЗаписатьКонецЭлемента();

	ОбъектXML.ЗаписатьКонецЭлемента();

	Сообщить(" Количество выгруженных позиций прайс-листа: " + Выборка.Количество());

КонецПроцедуры

// Процедура пищет электронные документы "Заказ товара"
//
// Параметры:
//  ОбъектXML        - объект типа ЗаписьXML
//  СписокДок      - список значений, содержит список выгружаемых документов
//
Процедура ВыгрузитьДокументы(ОбъектXML, СписокДок)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказПоставщикуТовары.Ссылка                                         КАК ДокСсылка,
	|	ЗаказПоставщикуТовары.Ссылка.Номер                                          КАК Номер,
	|	ЗаказПоставщикуТовары.Ссылка.Дата                                           КАК Дата,
	|	ЗаказПоставщикуТовары.Ссылка.ВалютаДокумента.Наименование                   КАК Валюта,
	|	ЗаказПоставщикуТовары.Ссылка.Контрагент.Ссылка                              КАК КонтрагентСсылка,
	|	ЗаказПоставщикуТовары.Ссылка.Организация.Ссылка                             КАК ОрганизацияСсылка,
	|	ЗаказПоставщикуТовары.Ссылка.СуммаДокумента                                 КАК СуммаДокумента,
	|	ЗаказПоставщикуТовары.Ссылка.КурсВзаиморасчетов                             КАК КурсВзаиморасчетов,
	|	ЗаказПоставщикуТовары.Ссылка.СуммаВключаетНДС                               КАК СуммаВключаетНДС,
	|	ЗаказПоставщикуТовары.Ссылка.ДатаПоступления                                           КАК ДатаПоступления,
	|	ЗаказПоставщикуТовары.Ссылка.ДатаОплаты                                           КАК ДатаОплаты,
	|	ЗаказПоставщикуТовары.Номенклатура.Ссылка                                   КАК НоменклатураСсылка,
	|	ЗаказПоставщикуТовары.Номенклатура.Наименование                             КАК Наименование,
	|	ЗаказПоставщикуТовары.Номенклатура.Артикул                                  КАК Артикул,
	//|	ЗаказПоставщикуТовары.Номенклатура.ЕдиницаХраненияОстатков.ШтрихКод         КАК ШтрихКод,
	|	ЗаказПоставщикуТовары.Номенклатура.БазоваяЕдиницаИзмерения.Наименование     КАК ЕдиницаИзмерения,
	|	ЗаказПоставщикуТовары.Сумма                                                 КАК Сумма,
	|	ЗаказПоставщикуТовары.СуммаНДС                                              КАК СуммаНДС,
	|	ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры.Ссылка                     КАК ХарактеристикаСсылка,
	|	ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры.Наименование               КАК НаименованиеХарактеристики,
	|	ЗаказПоставщикуТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование КАК ЕдиницаДок,
	|	ЗаказПоставщикуТовары.Количество                                            КАК Количество,
	|	ЗаказПоставщикуТовары.Цена                                                  КАК Цена,
	|	ЗаказПоставщикуТовары.Коэффициент                                           КАК Коэффициент,
	|	ЗаказПоставщикуТовары.НомерСтроки                                           КАК НомерСтроки,
	|	НоменклатураКонтрагентов.КодНоменклатурыКонтрагента                         КАК Ид,
	|	РегистрШтрихКоды.ШтрихКод                                                   КАК ШтрихКод
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|ПО
	|	ЗаказПоставщикуТовары.Ссылка.Контрагент = НоменклатураКонтрагентов.Контрагент И
	|	ЗаказПоставщикуТовары.Номенклатура = НоменклатураКонтрагентов.Номенклатура И
	|	ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры = НоменклатураКонтрагентов.ХарактеристикаНоменклатуры
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ШтрихКоды КАК РегистрШтрихКоды
	|ПО ЗаказПоставщикуТовары.Номенклатура = РегистрШтрихКоды.Владелец И
	|	ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры = РегистрШтрихКоды.ХарактеристикаНоменклатуры И
	|	ЗаказПоставщикуТовары.ЕдиницаИзмерения = РегистрШтрихКоды.ЕдиницаИзмерения
	|ГДЕ
	|	ЗаказПоставщикуТовары.Ссылка В (&СписокДок)
	
	|ОБЪЕДИНИТЬ ВСЕ
	
    |ВЫБРАТЬ
    |   РеализацияТоваровУслугТовары.Ссылка                                         КАК ДокСсылка,
    |   РеализацияТоваровУслугТовары.Ссылка.Номер                                          КАК Номер,
    |   РеализацияТоваровУслугТовары.Ссылка.Дата                                           КАК Дата,
    |   РеализацияТоваровУслугТовары.Ссылка.ВалютаДокумента.Наименование                   КАК Валюта,
    |   РеализацияТоваровУслугТовары.Ссылка.Контрагент.Ссылка                              КАК КонтрагентСсылка,
    |   РеализацияТоваровУслугТовары.Ссылка.Организация.Ссылка                             КАК ОрганизацияСсылка,
    |   РеализацияТоваровУслугТовары.Ссылка.СуммаДокумента                                 КАК СуммаДокумента,
    |   РеализацияТоваровУслугТовары.Ссылка.КурсВзаиморасчетов                             КАК КурсВзаиморасчетов,
    |   РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС                               КАК СуммаВключаетНДС,
    |   ДАТАВРЕМЯ(1,1,1)                                           КАК ДатаПоступления,
    |   ДАТАВРЕМЯ(1,1,1)                                           КАК ДатаОплаты,
    |   РеализацияТоваровУслугТовары.Номенклатура.Ссылка                                   КАК НоменклатураСсылка,
    |   РеализацияТоваровУслугТовары.Номенклатура.Наименование                             КАК Наименование,
    |   РеализацияТоваровУслугТовары.Номенклатура.Артикул                                  КАК Артикул,
    //| РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаХраненияОстатков.ШтрихКод         КАК ШтрихКод,
    |   РеализацияТоваровУслугТовары.Номенклатура.БазоваяЕдиницаИзмерения.Наименование     КАК ЕдиницаИзмерения,
    |   РеализацияТоваровУслугТовары.Сумма                                                 КАК Сумма,
    |   РеализацияТоваровУслугТовары.СуммаНДС                                              КАК СуммаНДС,
    |   РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры.Ссылка                     КАК ХарактеристикаСсылка,
    |   РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры.Наименование               КАК НаименованиеХарактеристики,
    |   РеализацияТоваровУслугТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование КАК ЕдиницаДок,
    |   РеализацияТоваровУслугТовары.Количество                                            КАК Количество,
    |   РеализацияТоваровУслугТовары.Цена                                                  КАК Цена,
    |   РеализацияТоваровУслугТовары.Коэффициент                                           КАК Коэффициент,
    |   РеализацияТоваровУслугТовары.НомерСтроки                                           КАК НомерСтроки,
    |   НоменклатураКонтрагентов.КодНоменклатурыКонтрагента                         КАК Ид,
    |   РегистрШтрихКоды.ШтрихКод                                                   КАК ШтрихКод
    |ИЗ
    |   Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |   РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
    |ПО
    |   РеализацияТоваровУслугТовары.Ссылка.Контрагент = НоменклатураКонтрагентов.Контрагент И
    |   РеализацияТоваровУслугТовары.Номенклатура = НоменклатураКонтрагентов.Номенклатура И
    |   РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры = НоменклатураКонтрагентов.ХарактеристикаНоменклатуры
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |   РегистрСведений.ШтрихКоды КАК РегистрШтрихКоды
    |ПО РеализацияТоваровУслугТовары.Номенклатура = РегистрШтрихКоды.Владелец И
    |   РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры = РегистрШтрихКоды.ХарактеристикаНоменклатуры И
    |   РеализацияТоваровУслугТовары.ЕдиницаИзмерения = РегистрШтрихКоды.ЕдиницаИзмерения
    |ГДЕ
    |   РеализацияТоваровУслугТовары.Ссылка В (&СписокДок)
	
	|УПОРЯДОЧИТЬ ПО ДокСсылка, НомерСтроки
	|ИТОГИ СУММА(СуммаНДС) По ДокСсылка");

	Запрос.УстановитьПараметр("СписокДок", СписокДок);

	РезультатЗапрос = Запрос.Выполнить();
	Выборка         = РезультатЗапрос.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ДокСсылка") Цикл
		ОбъектXML.ЗаписатьНачалоЭлемента("Документ");
		ЗаписатьТекстовойУзел(ОбъектXML, "ХозОперация", ?(ТипЗнч(Выборка.ДокСсылка) = Тип("ДокументСсылка.ЗаказПоставщику"), "ЗаказТовара", "ОтпускТовара"));
		ЗаписатьТекстовойУзел(ОбъектXML, "Номер",       Выборка.Номер);
		ЗаписатьТекстовойУзел(ОбъектXML, "Дата",        Формат(Выборка.Дата, "ДФ=yyyy-MM-dd"));
		ЗаписатьТекстовойУзел(ОбъектXML, "Роль",        "Продавец");
		ЗаписатьТекстовойУзел(ОбъектXML, "Валюта",      Выборка.Валюта);
		ЗаписатьТекстовойУзел(ОбъектXML, "Курс",        Выборка.КурсВзаиморасчетов);
		ЗаписатьТекстовойУзел(ОбъектXML, "Сумма",       Выборка.СуммаДокумента);
		
		Если ТипЗнч(Выборка.ДокСсылка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			ЗаписатьТекстовойУзел(ОбъектXML, "ДатаОтгрузки", Формат(Выборка.ДатаПоступления, "ДФ=yyyy-MM-dd"));
			ЗаписатьТекстовойУзел(ОбъектXML, "СрокПлатежа",	Формат(Выборка.ДатаОплаты, "ДФ=yyyy-MM-dd"));
		КонецЕсли; 

		ОбъектXML.ЗаписатьНачалоЭлемента("Контрагенты");
		ВыгрузитьКонтрагентаДок(ОбъектXML, Выборка.ОрганизацияСсылка, "Покупатель");
		ВыгрузитьКонтрагентаДок(ОбъектXML, Выборка.КонтрагентСсылка,  "Продавец");
		ОбъектXML.ЗаписатьКонецЭлемента();
		ЗаписатьТекстовойУзел(ОбъектXML, "Время", Формат(Выборка.Дата, "ДЛФ=T"));

		//Выгрузка информации по налогам в докменте
		Если Выборка.СуммаНДС Тогда
			ОбъектXML.ЗаписатьНачалоЭлемента("Налоги");
			ВыгрузитьНДС(ОбъектXML, Выборка.СуммаВключаетНДС, Выборка.СуммаНДС);
			ОбъектXML.ЗаписатьКонецЭлемента();
		КонецЕсли;

		ИдКаталога = Выборка.ОрганизацияСсылка.УникальныйИдентификатор();
		ОбъектXML.ЗаписатьНачалоЭлемента("Товары");
		СохрНомерСтроки = 0;
		Пока Выборка.Следующий() Цикл
			Если ЗначениеНеЗаполнено(Выборка.НоменклатураСсылка) Тогда 
				Продолжить;
			КонецЕсли;

			//Не выгружаем дубли строки, которые возникают если один товар имеет более одного штрихкода
			Если СохрНомерСтроки = Выборка.НомерСтроки Тогда
				Продолжить;
			Иначе
				СохрНомерСтроки = Выборка.НомерСтроки;
			КонецЕсли;
			ОбъектXML.ЗаписатьНачалоЭлемента("Товар");
			Если ЗначениеНеЗаполнено(Выборка.Ид) Тогда
				ВыгрузитьОсновныеРеквизитыТовара(ОбъектXML, Выборка);
			Иначе
				ВыгрузитьОсновныеРеквизитыТовара(ОбъектXML, Выборка, "*"+Выборка.Ид);
			КонецЕсли;

			ЗаписатьТекстовойУзел(ОбъектXML, "ИдКаталога",       ИдКаталога);
			ЗаписатьТекстовойУзел(ОбъектXML, "ЦенаЗаЕдиницу",    Выборка.Цена);
			ЗаписатьТекстовойУзел(ОбъектXML, "Количество",       Выборка.Количество);
			ЗаписатьТекстовойУзел(ОбъектXML, "Сумма",            Выборка.Сумма);
			ЗаписатьТекстовойУзел(ОбъектXML, "Единица",          Выборка.ЕдиницаДок);
			ЗаписатьТекстовойУзел(ОбъектXML, "Коэффициент",      Выборка.Коэффициент);

			//Выгрузка информации по налогам
			Если Выборка.СуммаНДС Тогда
				ОбъектXML.ЗаписатьНачалоЭлемента("Налоги");
				ВыгрузитьНДС(ОбъектXML, Выборка.СуммаВключаетНДС, Выборка.СуммаНДС);
				ОбъектXML.ЗаписатьКонецЭлемента();
			КонецЕсли;

			ОбъектXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		ОбъектXML.ЗаписатьКонецЭлемента();

		ОбъектXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	Сообщить(" Количество выгруженных документов: " + СписокДок.Количество());

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УПРАВЛЕНИЯ ВЫГРУЗКОЙ ДАННЫХ

// Функция контролирует возможность выгрузки данных и запускает 
// механизмы выгрузки данных в зависимости от передаваемых параметров
//
// Параметры:
//  ТипОбработки - строка, служит для определения типа выгружаемых объектов
//  ИмяФайла     - строка - имя файла, куда осуществляется выгрузка
//  СписокДок    - список-значений - список документов для выгрузки
//
//Возвращаемое значение:
//  булево - истина если выгрузка успешна, иначе ложь
//
Функция ВыгрузитьВФайл(ТипОбработки, ИмяФайла, СписокДокументов = Неопределено) Экспорт

	Если ЗначениеНеЗаполнено(ИмяФайла) Тогда
		Предупреждение("Не указано имя файла выгрузки! Операция не может быть выполнена!");
		Возврат ЛОЖЬ;
	КонецЕсли;

	Если НЕ ((ТипОбработки = "Документы") ИЛИ (ТипОбработки = "ОтпускТовара")) И ЗначениеНеЗаполнено(Организация) Тогда
		Предупреждение("Не указана организация! Операция не может быть выполнена!");
		Возврат ЛОЖЬ;
	КонецЕсли;

	ИдКаталога = Организация.УникальныйИдентификатор();

	ОбъектXML = Новый ЗаписьXML;
	ОбъектXML.ОткрытьФайл(ИмяФайла);
	ОбъектXML.ЗаписатьОбъявлениеXML();
	ОбъектXML.ЗаписатьНачалоЭлемента("КоммерческаяИнформация");
	ОбъектXML.ЗаписатьАтрибут("ВерсияСхемы", "2.01");
	ОбъектXML.ЗаписатьАтрибут("ДатаФормирования", Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd"));

	Сообщить(Формат(ТекущаяДата(), "ДЛФ=T") + " Начинаем выгрузку данных");
	Если ТипОбработки = "Каталог" Тогда
		ПостроительОтчетаКаталог.Параметры.Вставить("ПустаяХарактеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		ПостроительОтчетаКаталог.Выполнить();
		ВыгрузитьКаталог(ОбъектXML, ИмяКаталога, ИдКаталога, Организация, ПостроительОтчетаКаталог.Результат);
	ИначеЕсли ТипОбработки = "Прайс" Тогда
		ПостроительОтчетаПрайс.Параметры.Вставить("ПустаяХарактеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		ПостроительОтчетаПрайс.Параметры.Вставить("ДатаОтчета", ТекущаяДата());
		ПостроительОтчетаПрайс.Выполнить();
		ВыгрузитьПрайс(ОбъектXML, ИмяПрайса, ИдКаталога, Организация, ПостроительОтчетаПрайс.Результат);

	ИначеЕсли ТипОбработки = "Документы" 
		ИЛИ ТипОбработки = "ОтпускТовара" Тогда
		Если СписокДокументов = Неопределено Тогда
			СписокДок = Новый СписокЗначений();
			Отбор = Новый Структура("Обрабатывать", 1);
			НайденныеСтроки = ДеревоДокументов.Строки.НайтиСтроки(Отбор, ИСТИНА);
			Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
				Если ТипЗнч(СтрокаДерева.Строка) = Тип("ДокументСсылка.ЗаказПоставщику")
					ИЛИ ТипЗнч(СтрокаДерева.Строка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					СписокДок.Добавить(СтрокаДерева.Строка)
				КонецЕсли;
			КонецЦикла;
			ВыгрузитьДокументы(ОбъектXML, СписокДок);
		Иначе
			ВыгрузитьДокументы(ОбъектXML, СписокДокументов);
		КонецЕсли;
	КонецЕсли;

	ОбъектXML.ЗаписатьКонецЭлемента();
	ОбъектXML.Закрыть();

	Сообщить(Формат(ТекущаяДата(), "ДЛФ=T") + " Выгрузка данных завершена");
	Возврат ИСТИНА;

КонецФункции

// Процедура контролирует и выгружает документ "Заказ поставщику"
// Вызвается из формы документа
//
// Параметры:
//  Документ - документ-ссылка "Заказ поставщику"
//
Процедура ВыгрузитьИзДокумента(Документ) Экспорт

	Если НЕ Документ.Проведен Тогда
		Предупреждение("Непроведенный документ не может быть выгружен!");
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ВыборФайла(РежимДиалогаВыбораФайла.Сохранение);
	Если ЗначениеНеЗаполнено(ИмяФайла) Тогда
		Возврат;
	КонецЕсли;

	СписокДок = Новый СписокЗначений();
	СписокДок.Добавить(Документ);

	ОбъектXML = Новый ЗаписьXML;
	ОбъектXML.ОткрытьФайл(ИмяФайла);
	ОбъектXML.ЗаписатьОбъявлениеXML();
	ОбъектXML.ЗаписатьНачалоЭлемента("КоммерческаяИнформация");
	ВыгрузитьДокументы(ОбъектXML, СписокДок);
	ОбъектXML.ЗаписатьКонецЭлемента();
	ОбъектXML.Закрыть();

	Предупреждение("Выгрузка завершена!");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫГРУЗКИ ДАННЫХ В ПИСЬМА ЭЛЕКТРОННОЙ ПОЧТЫ

// Функция формирует электронное письмо с вложенным XML-файлом
//
// Параметры:
//  Тема                  - строка, тема письма
//  ПутьВложения         - строка, путь к файлу вложения
//  ИмяФайлаВложения     - строка, имя файла вложения для письма
//  НаименованиеВложения - строка, наименование вложения для письма
//  ТекстПисьма          - строка, с текстом тела письма
//  Адрес                - строка, адрес письма
//  Открывать            - булево, флаг открытия формы письма
//
// Возвращаемое значение
//  Структура полученная из процедуры НаписатьПисьмо общего модуля "ЭлектроннаяПочта"
//
Функция СформироватьПисьмо(Тема, ПутьВложения, ИмяФайлаВложения, НаименованиеВложения, ТекстПисьма, Адрес = Неопределено, Открывать = ЛОЖЬ)

	Вложение           = Новый Структура("Наименование, ИмяФайла, Хранилище");
	Вложение.Хранилище = Новый ДвоичныеДанные(ПутьВложения);
	СтруктураВложений  = Новый СписокЗначений;
	СтруктураВложений.Добавить(Вложение);

	СписокАдресов = Новый СписокЗначений;
	Если НЕ Адрес = Неопределено Тогда
		СписокАдресов.Добавить(Адрес, Адрес);
	КонецЕсли;
	
	ТекстПисьмаHTML = "<HTML><HEAD><META http-equiv=Content-Type content=""text/html; charset=utf-8""><META content=""MSHTML 6.00.2800.1476"" name=GENERATOR></HEAD><BODY><P>";
	ТекстПисьмаHTML = ТекстПисьмаHTML + СтрЗаменить(ТекстПисьма, Символы.ПС, "</P><P>");
	ТекстПисьмаHTML = ТекстПисьмаHTML + "</P></BODY></HTML>";
	
	СтруктураНовогоПисьма                      = Новый Структура("Тело, Тема, СписокФайловВложений, Кому");
	СтруктураНовогоПисьма.Тело                 = ТекстПисьмаHTML;
	СтруктураНовогоПисьма.СписокФайловВложений = СтруктураВложений;
	СтруктураНовогоПисьма.Тема                 = Тема;
	СтруктураНовогоПисьма.Кому                 = СписокАдресов;

	Вложение.Наименование      = НаименованиеВложения;
	Вложение.ИмяФайла          = ИмяФайлаВложения;
	СтруктураПисьма = НаписатьПисьмо(глТекущийПользователь, СтруктураНовогоПисьма, , , , , , , ЛОЖЬ);
	Если Открывать Тогда
		СтруктураПисьма.Форма.Открыть();
	КонецЕсли;
	Возврат СтруктураПисьма;

КонецФункции

// Процедура запускает механизм выгрузки данных, на созданых основании файлов
// формирует документы "ЭлектронноеПисьмо" и отправляет письма по выбору пользователя
//
Процедура ОтправитьПоПочте() Экспорт

	//Контролируем наличие учетных записей
	СписокДоступныхЗаписей = ПроверитьУчетныеЗаписиДляОтправкиПисем(глТекущийПользователь);
	Если СписокДоступныхЗаписей.Количество() = 0 Тогда
		Предупреждение("Для текущего пользователя не зарегистрировано ни одной учетной записи!");
		Возврат;
	КонецЕсли;

	ИмяВремФайла = ПолучитьИмяВременногоФайла();
	Если ТипВыгрузки = "Каталог" Тогда

		Если ВыгрузитьВФайл(ТипВыгрузки, ИмяВремФайла) Тогда
			Тема        = "Каталог товаров в формате CommerceML";
			ТекстПисьма = "Во вложении находятся следующие электронные документы: "+ Символы.ПС+"Каталог товаров """+ ИмяКаталога + """";
			СформироватьПисьмо(Тема, ИмяВремФайла, "catalog.xml", ИмяКаталога, ТекстПисьма, , ИСТИНА);
			УдалитьФайлы(ИмяВремФайла);
		КонецЕсли;

	ИначеЕсли ТипВыгрузки = "Прайс" Тогда

		Если ВыгрузитьВФайл(ТипВыгрузки, ИмяВремФайла) Тогда
			Тема        = "Прайс-лист в формате CommerceML";
			ТекстПисьма = "Во вложении находятся следующие электронные документы: "+ Символы.ПС + "Прайс-лист """+ ИмяПрайса + """";
			СформироватьПисьмо(Тема, ИмяВремФайла, "price.xml", ИмяПрайса, ТекстПисьма, , ИСТИНА);
			УдалитьФайлы(ИмяВремФайла);
		КонецЕсли;

	ИначеЕсли ТипВыгрузки = "Документы"
		ИЛИ ТипВыгрузки = "ОтпускТовара" Тогда

		МассивЭлектронныхПисем = Новый Массив;

		Для Каждого СтрокаКонтрагент Из ДеревоДокументов.Строки Цикл

			Если НЕ СтрокаКонтрагент.Обрабатывать Тогда
				Продолжить;
			КонецЕсли;

			ТекстПисьма = "Во вложении находятся следующие электронные документы: ";
			СписокДок = Новый СписокЗначений();
			Для Каждого СтрокаДокумент Из СтрокаКонтрагент.Строки Цикл
				Если СтрокаДокумент.Обрабатывать = 1 Тогда
					СписокДок.Добавить(СтрокаДокумент.Строка);
					ТекстПисьма = ТекстПисьма + Символы.ПС + (СтрокаДокумент.Строка);
				КонецЕсли;
			КонецЦикла;

			Если ВыгрузитьВФайл(ТипВыгрузки, ИмяВремФайла, СписокДок) Тогда
				Тема = "Заказ в формате CommerceML";
				СтруктураПисьма = СформироватьПисьмо(Тема, ИмяВремФайла, "document.xml", "Заказ поставщику", ТекстПисьма, СтрокаКонтрагент.ЭлАдрес, ЛОЖЬ);
				УдалитьФайлы(ИмяВремФайла);
				Если ТипЗнч(СтруктураПисьма) <> Тип("Структура") Тогда
					Сообщить("Произошла ошибка при записи письма для контрагента " + СтрокаКонтрагент.Строка, СтатусСообщения.Важное);
				Иначе
					МассивЭлектронныхПисем.Добавить(СтруктураПисьма.ПисьмоСсылка);
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;
		Если МассивЭлектронныхПисем.Количество() Тогда
			ОтправитьПисьма(МассивЭлектронныхПисем, глСоответствиеТекстовЭлектронныхПисем, глТекущийПользователь);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура выгружает документ "Заказ поставщику" в электронное письмо
// Вызвается из формы документа
//
// Параметры:
//  Документ - документ-ссылка "Заказ поставщику"
//
Процедура ОтправитьИзДокумента(Документ) Экспорт

	Если НЕ Документ.Проведен Тогда
		Предупреждение("Непроведенный документ не может быть выгружен!");
		Возврат;
	КонецЕсли;

	ОтборРегистра        = Новый Структура("Объект, Тип, Вид");
	ОтборРегистра.Объект = Документ.Контрагент;
	ОтборРегистра.Тип    = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	ОтборРегистра.Вид    = Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыДляОбменаДокументами;

	Ресурсы = РегистрыСведений.КонтактнаяИнформация.Получить(ОтборРегистра);
	ЭлАдрес = Ресурсы.Представление;
	Если ЗначениеНеЗаполнено(ЭлАдрес) Тогда
		Предупреждение("У контрагента не обнаружен электронный адрес для обмена документами! Выгрузка невозможна!");
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла();

	СписокДок = Новый СписокЗначений();
	СписокДок.Добавить(Документ);

	ОбъектXML = Новый ЗаписьXML;
	ОбъектXML.ОткрытьФайл(ИмяФайла);
	ОбъектXML.ЗаписатьОбъявлениеXML();
	ОбъектXML.ЗаписатьНачалоЭлемента("КоммерческаяИнформация");
	ВыгрузитьДокументы(ОбъектXML, СписокДок);
	ОбъектXML.ЗаписатьКонецЭлемента();
	ОбъектXML.Закрыть();
	Тема = Строка(Документ);
	ТекстПисьма = "Во вложении находятся следующие электронные документы: "+ Символы.ПС + Строка(Документ);
	СтруктураПисьма = СформироватьПисьмо(Тема, ИмяФайла, "document.xml", "Заказ поставщику", ТекстПисьма, ЭлАдрес, ИСТИНА);
	УдалитьФайлы(ИмяФайла);

КонецПроцедуры

