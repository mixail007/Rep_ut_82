// Структура содержащая данные о связи элементов управления быстрых отборов с данными
Перем СтруктураСвязиЭлементовСДанными;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура заполняет дерево "ДеревоДокументов"
//
Процедура ЗаполнитьДеревоДокументов()

	//
	НастроитьПостроительДляДокументов(ПостроительОтчетаДокументы, ТипВыгрузки);
	ПостроительОтчетаДокументы.Отбор.Добавить("Контрагент");
	ПостроительОтчетаДокументы.Отбор.Контрагент.Использование = ИСТИНА;
	ПостроительОтчетаДокументы.Отбор.Добавить("Документ.Дата", "ДокументДата", "ДокументДата");
	ПостроительОтчетаДокументы.Отбор.ДокументДата.Использование = ИСТИНА;
	ПостроительОтчетаДокументы.Отбор.ДокументДата.ВидСравнения  = ВидСравнения.ИнтервалВключаяГраницы;
	ПостроительОтчетаДокументы.Отбор.Добавить("Документ.Организация", "Организация", "Организация");
	ПостроительОтчетаДокументы.Отбор.Организация.Использование = ИСТИНА;
	ПостроительОтчетаДокументы.Отбор.Организация.ВидСравнения  = ВидСравнения.Равно;

	//
	ДеревоДокументов.Строки.Очистить();
	Если ЗначениеНеЗаполнено(Организация) Тогда
		ПостроительОтчетаДокументы.Отбор.Организация.Использование = ЛОЖЬ;
	Иначе
		ПостроительОтчетаДокументы.Отбор.Организация.Использование = ИСТИНА;
		ПостроительОтчетаДокументы.Отбор.Организация.Значение      = Организация;
	КонецЕсли;
	Если ЗначениеНеЗаполнено(ПостроительОтчетаДокументы.Отбор.Контрагент.Значение) Тогда
		ПостроительОтчетаДокументы.Отбор.Контрагент.Использование = ЛОЖЬ;
	КонецЕсли;

	Если ЗначениеНеЗаполнено(ПостроительОтчетаДокументы.Отбор.ДокументДата.ЗначениеС)
		 И ЗначениеНеЗаполнено(ПостроительОтчетаДокументы.Отбор.ДокументДата.ЗначениеПо) Тогда
		ПостроительОтчетаДокументы.Отбор.ДокументДата.Использование = ЛОЖЬ;

	ИначеЕсли ЗначениеНеЗаполнено(ПостроительОтчетаДокументы.Отбор.ДокументДата.ЗначениеС) Тогда
		ПостроительОтчетаДокументы.Отбор.ДокументДата.Значение     = ПостроительОтчетаДокументы.Отбор.ДокументДата.ЗначениеПо;
		ПостроительОтчетаДокументы.Отбор.ДокументДата.ВидСравнения = ВидСравнения.МеньшеИлиРавно;

	ИначеЕсли ЗначениеНеЗаполнено(ПостроительОтчетаДокументы.Отбор.ДокументДата.ЗначениеПо) Тогда
		ПостроительОтчетаДокументы.Отбор.ДокументДата.Значение     = ПостроительОтчетаДокументы.Отбор.ДокументДата.ЗначениеС;
		ПостроительОтчетаДокументы.Отбор.ДокументДата.ВидСравнения = ВидСравнения.БольшеИлиРавно;
	КонецЕсли;

	ОтборРегистра    = Новый Структура("Объект, Тип, Вид");
	ОтборРегистра.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	ОтборРегистра.Вид = Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыДляОбменаДокументами;
	ПостроительОтчетаДокументы.Выполнить();
	Выборка = ПостроительОтчетаДокументы.Результат.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Контрагент") Цикл
		// Если отправляет по почте фильтруем только имеющих адреса
		Если ОтправлятьПоЭлПочте Тогда
			ОтборРегистра.Объект = Выборка.Контрагент;
			Ресурсы = РегистрыСведений.КонтактнаяИнформация.Получить(ОтборРегистра);
			Если ЗначениеНеЗаполнено(Ресурсы.Представление) Тогда
				Продолжить;
			КонецЕсли;
			ЭлАдрес = Ресурсы.Представление;
		Иначе
			ЭлАдрес = "";
		КонецЕсли;

		СтрокаКонтрагент              = ДеревоДокументов.Строки.Добавить();
		СтрокаКонтрагент.Строка       = Выборка.Контрагент;
		СтрокаКонтрагент.ЭлАдрес      = ЭлАдрес;
		СтрокаКонтрагент.Обрабатывать = 1;
		Пока Выборка.Следующий() Цикл
			СтрокаДокумент              = СтрокаКонтрагент.Строки.Добавить();
			СтрокаДокумент.Строка       = Выборка.ДокументыСсылка;
			СтрокаДокумент.Обрабатывать = 1;
		КонецЦикла;
	КонецЦикла;

	ПостроительОтчетаДокументы.Отбор.Контрагент.Использование   = ИСТИНА;
	ПостроительОтчетаДокументы.Отбор.ДокументДата.Использование = ИСТИНА;
	ПостроительОтчетаДокументы.Отбор.ДокументДата.ВидСравнения  = ВидСравнения.ИнтервалВключаяГраницы;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
// Устанавливает настройки построителей отчета
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	//Настриваем построители отчета
	НастроитьПостроительДляКаталога(ПостроительОтчетаКаталог);
	ПостроительОтчетаКаталог.Отбор.Добавить("Номенклатура");

	НастроитьПостроительДляПрайса(ПостроительОтчетаПрайс);
	ПостроительОтчетаПрайс.Отбор.Добавить("Номенклатура");
	ПостроительОтчетаПрайс.Отбор.Добавить("ТипЦен", , "Тип цен");
	ПостроительОтчетаПрайс.ДоступныеПоля.ТипЦен.Представление = "Тип цен";

	НастроитьПостроительДляДокументов(ПостроительОтчетаДокументы, "Документы");
	ПостроительОтчетаДокументы.Отбор.Добавить("Контрагент");
	ПостроительОтчетаДокументы.Отбор.Контрагент.Использование = ИСТИНА;
	ПостроительОтчетаДокументы.Отбор.Добавить("Документ.Дата", "ДокументДата", "ДокументДата");
	ПостроительОтчетаДокументы.Отбор.ДокументДата.Использование = ИСТИНА;
	ПостроительОтчетаДокументы.Отбор.ДокументДата.ВидСравнения  = ВидСравнения.ИнтервалВключаяГраницы;
	ПостроительОтчетаДокументы.Отбор.Добавить("Документ.Организация", "Организация", "Организация");
	ПостроительОтчетаДокументы.Отбор.Организация.Использование = ИСТИНА;
	ПостроительОтчетаДокументы.Отбор.Организация.ВидСравнения  = ВидСравнения.Равно;
	
	//Устанавливаем организацию по умолчанию
	Организация = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяОрганизация");

	ТипВыгрузки = "Каталог";

	ДеревоДокументов.Колонки.Добавить("Строка");
	ДеревоДокументов.Колонки.Добавить("Обрабатывать");
	ДеревоДокументов.Колонки.Добавить("ЭлАдрес");

КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
// Устанавливает связь полей быстрого отбора и пометки в подменю "ИзменитьСпособВыгрузки"
//
Процедура ПриОткрытии()

	УстановитьСвязьПолейБыстрогоОтбораНаФорме(ЭлементыФормы, ПостроительОтчетаДокументы.Отбор, СтруктураСвязиЭлементовСДанными, "ОбработкаОбъект.ПостроительОтчетаДокументы.Отбор");
	Если ОтправлятьПоЭлПочте Тогда
		ЭлементыФормы.ДействияФормы.Кнопки.ИзменитьСпособВыгрузки.Кнопки.ВыгружатьДанныеВФайл.Пометка = ЛОЖЬ;
		ЭлементыФормы.ДействияФормы.Кнопки.ИзменитьСпособВыгрузки.Кнопки.ОтправлятьЭлПочтой.Пометка   = ИСТИНА;

		ЭлементыФормы.ДействияФормы.Кнопки.ИзменитьСпособВыгрузки.Текст = "Отправлять по электронной почте";
		
		ЭлементыФормы.ИмяФайлаВыгрузки.Доступность = ЛОЖЬ;
	Иначе
		ЭлементыФормы.ДействияФормы.Кнопки.ИзменитьСпособВыгрузки.Кнопки.ВыгружатьДанныеВФайл.Пометка = ИСТИНА;
		ЭлементыФормы.ДействияФормы.Кнопки.ИзменитьСпособВыгрузки.Кнопки.ОтправлятьЭлПочтой.Пометка   = ЛОЖЬ;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПередСохранениемЗначений" формы,
// сохраняет настройки построителей.
//
Процедура ПередСохранениемЗначений(Отказ)

	СохраненныеНастрокиПостроителяКаталог   = Новый ХранилищеЗначения(ПостроительОтчетаКаталог.ПолучитьНастройки());
	СохраненныеНастрокиПостроителяПрайс     = Новый ХранилищеЗначения(ПостроительОтчетаПрайс.ПолучитьНастройки());
	СохраненныеНастрокиПостроителяДокументы = Новый ХранилищеЗначения(ПостроительОтчетаДокументы.ПолучитьНастройки());

КонецПроцедуры

// Процедура - обработчик события "ПослеВосстановленияЗначений" формы,
// устанавливает настройки посторителей из сохраненных значений
//
Процедура ПослеВосстановленияЗначений()

	ПостроительОтчетаКаталог.УстановитьНастройки(СохраненныеНастрокиПостроителяКаталог.Получить());
	ПостроительОтчетаПрайс.УстановитьНастройки(СохраненныеНастрокиПостроителяПрайс.Получить());
	ПостроительОтчетаДокументы.УстановитьНастройки(СохраненныеНастрокиПостроителяДокументы.Получить());

	Если ЗначениеНеЗаполнено(Организация) Тогда
		Организация = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяОрганизация");
	КонецЕсли;

	Если ТипВыгрузки = "Каталог" Тогда
		ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Получить(0);
	ИначеЕсли ТипВыгрузки = "Прайс" Тогда
		ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Получить(1);
	ИначеЕсли ТипВыгрузки = "Документы" 
		ИЛИ ТипВыгрузки = "ОтпускТовара" Тогда
		ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Получить(2);
	КонецЕсли;

	Если ОтправлятьПоЭлПочте Тогда
		ЭлементыФормы.ДействияФормы.Кнопки.ИзменитьСпособВыгрузки.Кнопки.ВыгружатьДанныеВФайл.Пометка = ЛОЖЬ;
		ЭлементыФормы.ДействияФормы.Кнопки.ИзменитьСпособВыгрузки.Кнопки.ОтправлятьЭлПочтой.Пометка   = ИСТИНА;
		ЭлементыФормы.ДействияФормы.Кнопки.ИзменитьСпособВыгрузки.Текст = "Отправлять по электронной почте";
	Иначе
		ЭлементыФормы.ДействияФормы.Кнопки.ИзменитьСпособВыгрузки.Кнопки.ВыгружатьДанныеВФайл.Пометка = ИСТИНА;
		ЭлементыФормы.ДействияФормы.Кнопки.ИзменитьСпособВыгрузки.Кнопки.ОтправлятьЭлПочтой.Пометка   = ЛОЖЬ;
		ЭлементыФормы.ДействияФормы.Кнопки.ИзменитьСпособВыгрузки.Текст = "Выгружать данные в файл";
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ФОРМЫ

// Процедура - обработчик события "НачалоВыбора" элемента "ИмяФайлаВыгрузки".
//
Процедура ИмяФайлаВыгрузкиНачалоВыбора(Элемент, СтандартнаяОбработка)

	Элемент.Значение = ВыборФайла(РежимДиалогаВыбораФайла.Сохранение);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" элемента "ИмяФайлаВыгрузки".
//
Процедура ТипВыгрузкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если ВыбранноеЗначение = "Каталог" Тогда
		ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Получить(0);
	ИначеЕсли ВыбранноеЗначение = "Прайс" Тогда
		ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Получить(1);
	ИначеЕсли ВыбранноеЗначение = "Документы" 
		ИЛИ ВыбранноеЗначение = "ОтпускТовара" Тогда
		ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Получить(2);
		ДеревоДокументов.Строки.Очистить();
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "КнопкаНастройкаПериода".
//
Процедура КнопкаНастройкаПериодаНажатие(Элемент)

	НП = Новый НастройкаПериода;
	НП.УстановитьПериод(ПостроительОтчетаДокументы.Отбор.ДокументДата.ЗначениеС, ПостроительОтчетаДокументы.Отбор.ДокументДата.ЗначениеПо);
	Если НП.Редактировать() Тогда
		ПостроительОтчетаДокументы.Отбор.ДокументДата.ЗначениеС  = НП.ПолучитьДатуНачала();
		ПостроительОтчетаДокументы.Отбор.ДокументДата.ЗначениеПо = НП.ПолучитьДатуОкончания();
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "Выбор" табличного поля ДеревоДокументов.
//
Процедура ДеревоДокументовВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)

	ВыбраннаяСтрока.Строка.ПолучитьФорму().Открыть();

КонецПроцедуры

// Процедура - обработчик события "ПередНачаломИзменения" табличного поля ДеревоДокументов.
//
Процедура ДеревоДокументовПередНачаломИзменения(Элемент, Отказ)

	Элемент.ТекущиеДанные.Строка.ПолучитьФорму().Открыть();
	Отказ = ИСТИНА;

КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" табличного поля ДеревоДокументов.
//
Процедура ДеревоДокументовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.Строка.ОтображатьФлажок = Истина;
	ОформлениеСтроки.Ячейки.Строка.УстановитьФлажок(ДанныеСтроки.Обрабатывать);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзмененииФлажка" табличного поля ДеревоДокументов.
//
Процедура ДеревоДокументовПриИзмененииФлажка(Элемент, Колонка)
	
	Если Элемент.ТекущаяСтрока.Обрабатывать = 1 ИЛИ Элемент.ТекущаяСтрока.Обрабатывать = 2 Тогда
		Элемент.ТекущаяСтрока.Обрабатывать = 0;
	Иначе
		Элемент.ТекущаяСтрока.Обрабатывать = 1;
	КонецЕсли;
	
	Если Элемент.ТекущаяСтрока.Обрабатывать = 2 Тогда
		Элемент.ТекущаяСтрока.Обрабатывать = 0;
	КонецЕсли;
	Если Элемент.ТекущаяСтрока.Родитель = Неопределено Тогда
		//обрабатываем выбор контрагента
		Для Каждого СтрокаДерева Из Элемент.ТекущаяСтрока.Строки Цикл
			СтрокаДерева.Обрабатывать = Элемент.ТекущаяСтрока.Обрабатывать;
		КонецЦикла;
	Иначе
		//обрабатываем выбор документа
		Отбор = Новый Структура("Обрабатывать", 0);
		НайденныеСтроки = Элемент.ТекущаяСтрока.Родитель.Строки.НайтиСтроки(Отбор);
		Если НЕ НайденныеСтроки.Количество() Тогда
			Элемент.ТекущаяСтрока.Родитель.Обрабатывать = 1;
		ИначеЕсли НайденныеСтроки.Количество() = Элемент.ТекущаяСтрока.Родитель.Строки.Количество() Тогда
			Элемент.ТекущаяСтрока.Родитель.Обрабатывать = 0;
		Иначе
			Элемент.ТекущаяСтрока.Родитель.Обрабатывать = 2;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Выполнить"
// командной панели "ОсновныеДействияФормы" для выгрузки данных
//
Процедура КнопкаВыполнитьНажатие(Элемент)

	Если ОтправлятьПоЭлПочте
		 И Вопрос("Отправить данные по электронной почте?", РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК, "Выгрузка данных") = КодВозвратаДиалога.ОК Тогда
		ОтправитьПоПочте();
	ИначеЕсли Вопрос("Сохранить данных в файл?", РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК, "Выгрузка данных") = КодВозвратаДиалога.ОК Тогда
		УспешноЗавершена = ВыгрузитьВФайл(ЭлементыФормы.ТипВыгрузки.Значение, ИмяФайлаВыгрузки);
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ВыгружатьДанныеВФайл"
// подменю "ИзменитьСпособВыгрузки" командной панели "ДействияФормы" для 
// изменения способа выгрузки данных
//
Процедура ДействияФормыВыгружатьДанныеВФайл(Кнопка)

	ЭлементыФормы.ДействияФормы.Кнопки.ИзменитьСпособВыгрузки.Текст = "Выгружать данные в файл";
	ЭлементыФормы.ДействияФормы.Кнопки.ИзменитьСпособВыгрузки.Кнопки.ВыгружатьДанныеВФайл.Пометка = ИСТИНА;
	ЭлементыФормы.ДействияФормы.Кнопки.ИзменитьСпособВыгрузки.Кнопки.ОтправлятьЭлПочтой.Пометка   = ЛОЖЬ;

	ОтправлятьПоЭлПочте = ЛОЖЬ;
	//ДеревоДокументов.Строки.Очистить();
	ЭлементыФормы.ИмяФайлаВыгрузки.Доступность = ИСТИНА;

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ОтправлятьЭлПочтой"
// подменю "ИзменитьСпособВыгрузки" командной панели "ДействияФормы" для 
// изменения способа выгрузки данных
//
Процедура ДействияФормыОтправлятьЭлПочтой(Кнопка)

	Если (ТипВыгрузки = "Документы" ИЛИ ТипВыгрузки = "ОтпускТовара") И ДеревоДокументов.Строки.Количество()
		 И Вопрос("Дерево документов будет очищено. Продолжить?", РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК, "Настройки выгрузки данных") = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;

	ЭлементыФормы.ДействияФормы.Кнопки.ИзменитьСпособВыгрузки.Текст = "Отправлять по электронной почте";
	ЭлементыФормы.ДействияФормы.Кнопки.ИзменитьСпособВыгрузки.Кнопки.ВыгружатьДанныеВФайл.Пометка = ЛОЖЬ;
	ЭлементыФормы.ДействияФормы.Кнопки.ИзменитьСпособВыгрузки.Кнопки.ОтправлятьЭлПочтой.Пометка    = ИСТИНА;

	ОтправлятьПоЭлПочте = ИСТИНА;
	ДеревоДокументов.Строки.Очистить();
	ЭлементыФормы.ИмяФайлаВыгрузки.Доступность = ЛОЖЬ;

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить"
// командной панели "КоманднаяПанельДокументы" для заполнения
// дерева документов
//
Процедура КоманднаяПанельДокументыЗаполнить(Кнопка)

	ЗаполнитьДеревоДокументов()

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "СнятьФлажки"
// командной панели "КоманднаяПанельДокументы" снятия флажков
// в табличном поле "ДеревоДокументов"
//
Процедура КоманднаяПанельДокументыСнятьФлажки(Кнопка)

	Отбор = Новый Структура("Обрабатывать", 1);
	НайденныеСтроки = ДеревоДокументов.Строки.НайтиСтроки(Отбор, ИСТИНА);
	Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
		СтрокаДерева.Обрабатывать = 0;
	КонецЦикла;
	Отбор = Новый Структура("Обрабатывать", 2);
	НайденныеСтроки = ДеревоДокументов.Строки.НайтиСтроки(Отбор, ИСТИНА);
	Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
		СтрокаДерева.Обрабатывать = 0;
	КонецЦикла;

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "УстановитьФлажки"
// командной панели "КоманднаяПанельДокументы" установки флажков
// в табличном поле "ДеревоДокументов"
//
Процедура КоманднаяПанельДокументыУстановитьФлажки(Кнопка)

	Отбор = Новый Структура("Обрабатывать", 0);
	НайденныеСтроки = ДеревоДокументов.Строки.НайтиСтроки(Отбор, ИСТИНА);
	Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
		СтрокаДерева.Обрабатывать = 1;
	КонецЦикла;
	Отбор = Новый Структура("Обрабатывать", 2);
	НайденныеСтроки = ДеревоДокументов.Строки.НайтиСтроки(Отбор, ИСТИНА);
	Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
		СтрокаДерева.Обрабатывать = 1;
	КонецЦикла;

КонецПроцедуры




