
Перем мЖирныйШрифт;
Перем мОбычныйШрифт;

////////////////////////////////////////////////////////////////////////////////
// СЕРВИСНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура УстановитьДоступностьИВидимостьЭлементовФормы()
	
	ЭлементыФормы.ПанельОсновная.Страницы.ВыгрузкаТоваров.Видимость = ОбменТоварами;
	ЭлементыФормы.ПанельОсновная.Страницы.ОбменЗаказами.Видимость = ОбменЗаказами;
	
	Если ВыгружатьНаСайт Тогда
		
		ЭлементыФормы.ПанельНазначение.ТекущаяСтраница = ЭлементыФормы.ПанельНазначение.Страницы.СтраницаСайт;	
		
	Иначе
		
		ЭлементыФормы.ПанельНазначение.ТекущаяСтраница = ЭлементыФормы.ПанельНазначение.Страницы.СтраницаКаталог;	
				
	КонецЕсли;
	
	// параметры соединения
	ЭлементыФормы.НадписьСерверПрокси.Доступность = HTTPОбменПроксиИспользование;
	ЭлементыФормы.HTTPОбменПроксиСервер.Доступность = HTTPОбменПроксиИспользование;
	
	ЭлементыФормы.НадписьПортПрокси.Доступность = HTTPОбменПроксиИспользование;
	ЭлементыФормы.HTTPОбменПроксиПорт.Доступность = HTTPОбменПроксиИспользование;
	
	ЭлементыФормы.НадписьИмяПользователяПрокси.Доступность = HTTPОбменПроксиИспользование;
	ЭлементыФормы.HTTPОбменПроксиИмяПользователя.Доступность = HTTPОбменПроксиИспользование;
	
	ЭлементыФормы.НадписьПарольПрокси.Доступность = HTTPОбменПроксиИспользование;
	ЭлементыФормы.HTTPОбменПроксиПароль.Доступность = HTTPОбменПроксиИспользование;
	
	// доступность узла обмена	
	Если ОбменТоварами И ВыгружатьТолькоИзменения Тогда
		ЭлементыФормы.ПанельУзелТовары.Свертка = РежимСверткиЭлементаУправления.Нет;	
	Иначе
		ЭлементыФормы.ПанельУзелТовары.Свертка = РежимСверткиЭлементаУправления.Верх;	
	КонецЕсли;
	
	Если ОбменЗаказами И ВыгружатьТолькоИзменения Тогда
		ЭлементыФормы.ПанельУзелЗаказы.Свертка = РежимСверткиЭлементаУправления.Нет;	
	Иначе
		ЭлементыФормы.ПанельУзелЗаказы.Свертка = РежимСверткиЭлементаУправления.Верх;	
	КонецЕсли;
	
	ЭлементыФормы.ПереключательПроводитьОперативно.Видимость = ПроводитьДокументы;
	ЭлементыФормы.ПереключательПРоводитьНеОперативно.Видимость = ПроводитьДокументы;	
	
	УстановитьТекстНадписиРегламентнойНастройки();
		
Конецпроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередОткрытием()
	МакетНастроекОбмена = ПолучитьМакет("НастройкиОбмена");
	ОбластьНастроек = МакетНастроекОбмена.Области["НастройкиОбмена"];
	
	Для Ном = ОбластьНастроек.Верх По ОбластьНастроек.Низ Цикл
		ИмяНастройки = СокрП(МакетНастроекОбмена.Область(Ном, 1).Текст);
		ЗначениеНастройки = СокрП(МакетНастроекОбмена.Область(Ном, 2).Текст);
		ОбработкаОбъект[ИмяНастройки] = ЗначениеНастройки;
	КонецЦикла;
	
	ОбластьНастроек = МакетНастроекОбмена.Области["СоответствиеВидовТоваров"];
	СоответствиеВидовТоваров = Новый Соответствие;
	Для Ном = ОбластьНастроек.Верх По ОбластьНастроек.Низ Цикл
		СоответствиеВидовТоваров.Вставить(Перечисления.ВидыТоваров[МакетНастроекОбмена.Область(Ном, 1).Текст],МакетНастроекОбмена.Область(Ном, 2).Текст);
	КонецЦикла;

	ОбластьНастроек = МакетНастроекОбмена.Области["СоответствиеСезонов"];
	СоответствиеСезонов = Новый Соответствие;
	Для Ном = ОбластьНастроек.Верх По ОбластьНастроек.Низ Цикл
		СоответствиеСезонов.Вставить(МакетНастроекОбмена.Область(Ном, 1).Текст,МакетНастроекОбмена.Область(Ном, 2).Текст);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	НастроитьПостроительОтчета(ПостроительЗапроса);
	ЗаполнитьОтборПостроителя(ПостроительЗапроса);
		
	Если СохраненныеНастройкиПостроителя<>Неопределено Тогда
		ПостроительЗапроса.УстановитьНастройки(СохраненныеНастройкиПостроителя);
	КонецЕсли;	
	
	УстановитьДоступностьИВидимостьЭлементовФормы();
	
	ОбновитьДоступностьАвтообмена();
	
КонецПроцедуры

Процедура ПередСохранениемЗначений(Отказ)
	СохраненныеНастройкиПостроителя = ПостроительЗапроса.ПолучитьНастройки();
КонецПроцедуры

Процедура ПереключательПолнаяВыгрузкаПриИзменении(Элемент)
	
	УстановитьДоступностьИВидимостьЭлементовФормы();
	
КонецПроцедуры

Процедура ПереключательВыгрузкаИзмененийПриИзменении(Элемент)
	
	УстановитьДоступностьИВидимостьЭлементовФормы();
	
КонецПроцедуры

Процедура УзелПланаОбменаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(УзелОбменаТоварами) Тогда
		Возврат;
	КонецЕсли;
	
	Если УзелОбменаТоварами = ПланыОбмена.ОбменССайтомТоварами.ЭтотУзел() Тогда
		
		Сообщить("Выбранный узел соответствует текущей информационной базе. Выбирете другой узел или создайте новый.");
		УзелОбменаТоварами = Неопределено;
		
	КонецЕсли;	
		
КонецПроцедуры

Процедура КаталогВыгрузкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбора.Заголовок 				 	 = "Выберите каталог для обмена данными";
	ДиалогВыбора.ПредварительныйПросмотр 	 = Ложь;
    ДиалогВыбора.Каталог 				 	 = Элемент.Значение;
	ДиалогВыбора.ПроверятьСуществованиеФайла = Истина;
	
	Если ДиалогВыбора.Выбрать() Тогда
		Элемент.Значение = ДиалогВыбора.Каталог;
	КонецЕсли;
	
КонецПроцедуры

Процедура КаталогВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		ЗапуститьПриложение(Элемент.Значение);
	КонецЕсли;	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ДействияФормыДействиеВыполнитьОбмен(Кнопка)
	
	Если ПостроительЗапроса.Отбор.ТипЦен.Использование Тогда
		ВыгрузитьДанные();
	Иначе
		Сообщить("Укажите тип цен",СтатусСообщения.Важное);
	КонецЕсли;
	
КонецПроцедуры
 
Процедура ПереключательНазначениеСайтПриИзменении(Элемент)
	
	УстановитьДоступностьИВидимостьЭлементовФормы();
	
КонецПроцедуры

Процедура ПроверитьНажатие(Элемент)
	
	ДополнительнаяИнформация = "";
	ТекстСообщенияПользователю = ВыполнитьТестовоеПодключениеКСерверуHTTP(ЭтотОбъект, ДополнительнаяИнформация);
	
	Если Не ПустаяСтрока(ДополнительнаяИнформация) Тогда 
		
		Сообщить(ДополнительнаяИнформация);
		
	КонецЕсли;
	
	Предупреждение(ТекстСообщенияПользователю);	
		
КонецПроцедуры

Процедура ФлажокИспользоватьПроксиСерверПриИзменении(Элемент)
	
	УстановитьДоступностьИВидимостьЭлементовФормы();
	
КонецПроцедуры

Процедура ПереключательЗаписыватьПриИзменении(Элемент)
	
	УстановитьДоступностьИВидимостьЭлементовФормы();
	
КонецПроцедуры

Процедура ОбновитьДоступностьАвтообмена()
	
	ЭлементыФормы.НастройкаРегламентногоЗадания.Доступность = ИспользоватьРегламентныеЗадания;
	ЭлементыФормы.НадписьРасписаниеРегламентногоЗаданияНастройки.Доступность = ИспользоватьРегламентныеЗадания;	
	
КонецПроцедуры

Процедура ПолучитьТекстЗаголовкаИРассписанияРегламентнойНастройки(Задание, ТекстЗаголовка, ТекстРасписания, РассписаниеАктивно) Экспорт
	
	РассписаниеАктивно = Ложь;
	
	ТекстЗаголовка = "Дополнительные настройки расписания ...";
	
	Если Задание = Неопределено Тогда
		
		//ТекстЗаголовка = "Создать регламентную настройку ...";	
		ТекстРасписания = "<Расписание не задано>";
		
	Иначе
		
		//ТекстЗаголовка = "Дополнительные настройки расписания ...";
		Если Задание.Использование Тогда
			ПрефиксРасписания = "Расписание: ";
			РассписаниеАктивно = Истина;
		Иначе
			ПрефиксРасписания = "Расписание (НЕ АКТИВНО): ";
		КонецЕсли;
		
		ТекстРасписания = ПрефиксРасписания + Строка(Задание.Расписание);
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура УстановитьТекстНадписиРегламентнойНастройки()
	
	Перем ТекстЗаголовка, ТекстРасписания, РассписаниеАктивно;
	
	ПолучитьТекстЗаголовкаИРассписанияРегламентнойНастройки(мРегламентноеЗадание, ТекстЗаголовка, ТекстРасписания, РассписаниеАктивно);
	ЭлементыФормы.НастройкаРегламентногоЗадания.Заголовок = ТекстЗаголовка;
	ЭлементыФормы.НадписьРасписаниеРегламентногоЗаданияНастройки.Заголовок = ТекстРасписания;
	ЭлементыФормы.НадписьРасписаниеРегламентногоЗаданияНастройки.Шрифт = ?(РассписаниеАктивно И ИспользоватьРегламентныеЗадания, мЖирныйШрифт, мОбычныйШрифт);	
	
КонецПроцедуры

Процедура ИспользоватьРегламентныеЗаданияПриИзменении(Элемент)

	ОбновитьДоступностьАвтообмена();
	
	УстановитьТекстНадписиРегламентнойНастройки();
	
	Если ИспользоватьРегламентныеЗадания Тогда
		
		НадписьРасписаниеРегламентногоЗаданияНажатие(ЭлементыФормы.НадписьРасписаниеРегламентногоЗаданияНастройки);
		
	Конецесли;
	
КонецПроцедуры

Процедура НадписьРасписаниеРегламентногоЗаданияНажатие(Элемент)
	
	РедактированиеРасписанияРегламентногоЗадания(мРегламентноеЗадание, РегламентноеЗадание);
		
КонецПроцедуры


Процедура РедактированиеРасписанияРегламентногоЗадания(ОбъектЗадания, РеквизитЗадания)
	
	Если ОбъектЗадания = Неопределено Тогда
		
		ОбъектЗадания = ПолучитьОбъектРегламентногоЗадания();		
			
	КонецЕсли;
	
	Если ОбъектЗадания = Неопределено Тогда
		
		ОбъектЗадания = РегламентныеЗадания.СоздатьРегламентноеЗадание("ОбменССайтом");
				
		ОбъектЗадания.Наименование = "Обмен с сайтом";
		ОбъектЗадания.Использование = Истина;
					
	КонецЕсли;
	
	// редактирование самого расписания непосредственно
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(ОбъектЗадания.Расписание);
		
	Если Диалог.ОткрытьМодально() Тогда
		
		ОбъектЗадания.Расписание = Диалог.Расписание;
		ОбъектЗадания.Записать();
		РеквизитЗадания = Строка(ОбъектЗадания.УникальныйИдентификатор);
		
	Иначе
		
		//ОбъектЗадания = ПолучитьОбъектРегламентногоЗадания();
		
	КонецЕсли;
	
	УстановитьТекстНадписиРегламентнойНастройки();	
	
КонецПроцедуры

Процедура НадписьРасписаниеРегламентногоЗаданияНастройкиНажатие(Элемент)
	
	РедактированиеРасписанияРегламентногоЗадания(мРегламентноеЗадание, РегламентноеЗадание);
		
КонецПроцедуры

Процедура РедактироватьНастройкиРегламентногоЗадания(ОбъектЗадания, РеквизитЗадания)
	
	Если ОбъектЗадания = Неопределено Тогда
		
		ОбъектЗадания = ПолучитьОбъектРегламентногоЗадания();				
			
	КонецЕсли;
	
	Диалог = ПолучитьФорму("ДиалогРегламентногоЗадания");
	Диалог.РегламентноеЗадание = ОбъектЗадания;
	Диалог.Наименование = "Обмен с сайтом";
	Диалог.МетаданныеВыбор = "ОбменССайтом";
	
	Если Диалог.ОткрытьМодально() <> Истина Тогда
		
		ОбъектЗадания = ПолучитьОбъектРегламентногоЗадания();
				
	Иначе
		
		Модифицированность = Истина;
		ОбъектЗадания = Диалог.РегламентноеЗадание;
				
	КонецЕсли;	
	
	Если ОбъектЗадания <> Неопределено Тогда
		
		РеквизитЗадания = Строка(ОбъектЗадания.УникальныйИдентификатор);
		
	КонецЕсли;
	
	УстановитьТекстНадписиРегламентнойНастройки();	
	
КонецПроцедуры
 
Процедура НастройкаРегламентногоЗаданияНажатие(Элемент)
	
	РедактироватьНастройкиРегламентногоЗадания(мРегламентноеЗадание, РегламентноеЗадание);
	
КонецПроцедуры

Процедура НадписьСсылкаНаСайтНажатие(Элемент)
	
	ЗапуститьПриложение("http://www.1c-bitrix.ru/1c/");
	
КонецПроцедуры

Процедура ПолеКартинкиЛоготипНажатие(Элемент)
	
	ЗапуститьПриложение("http://www.1c-bitrix.ru");
	
КонецПроцедуры

Процедура НадписьНадписьПодробнееОСтандартеCML2Нажатие(Элемент)
	
	ЗапуститьПриложение("http://www.commerceml.ru/standard.htm");
	
КонецПроцедуры

Процедура НадписьНадписьПодробнееОТехнологииОбменаНажатие(Элемент)
	
	ЗапуститьПриложение("http://www.v8.1c.ru/edi/edi_app/130");	
	
КонецПроцедуры

Процедура ОбменТоварамиПриИзменении(Элемент)
	
	УстановитьДоступностьИВидимостьЭлементовФормы();
	
КонецПроцедуры

Процедура ОбменЗаказамиПриИзменении(Элемент)
	
	УстановитьДоступностьИВидимостьЭлементовФормы();
	
КонецПроцедуры

Процедура УзелОбменаЗаказамиПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(УзелОбменаЗаказами) Тогда
		Возврат;
	КонецЕсли;
	
	Если УзелОбменаЗаказами = ПланыОбмена.ОбменССайтомЗаказами.ЭтотУзел() Тогда
		
		Сообщить("Выбранный узел соответствует текущей информационной базе. Выбирете другой узел или создайте новый.");
		УзелОбменаЗаказами = Неопределено;
		
	КонецЕсли;	
	
КонецПроцедуры

мРегламентноеЗадание = Неопределено;

мЖирныйШрифт = Новый Шрифт(,,Истина);
мОбычныйШрифт = Новый Шрифт();
ИспользоватьРегламентныеЗадания = Ложь;
