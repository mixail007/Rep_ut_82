///////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 

Перем КомпоновщикНастроек_СКД Экспорт;
Перем мВерсия Экспорт;
Перем СтруктураМетаданныеДокументы Экспорт;
Перем ТаблицаМетаданныеДокументы Экспорт;
Перем мКартинкаСвойство Экспорт;
Перем мКартинкаПустая Экспорт;

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//

Функция ОптимизаторОтборов(Запрос) Экспорт
	
	ТекстЗапроса = Запрос.Текст;
	Если Найти(ТекстЗапроса, "И NULL = ") = 0 Тогда
		Возврат Запрос
	КонецЕсли;
	
	МассивЗапросов = ЗначениеИзСтрокиВнутр("{""#"",51e7a0d2-530b-11d4-b98a-008048da3034,{0,{""S"",""" + СтрЗаменить(СтрЗаменить(ТекстЗапроса, """", """"""), "ОБЪЕДИНИТЬ ВСЕ", """},{""S"",""") + """}}}");
	Если Найти(ТекстЗапроса, "ИТОГИ") > 0 Тогда
		Хвостик = Сред(ТекстЗапроса, Найти(ТекстЗапроса, "ИТОГИ"))
	ИначеЕсли Найти(ТекстЗапроса, "УПОРЯДОЧИТЬ") > 0 Тогда
		Хвостик = Сред(ТекстЗапроса, Найти(ТекстЗапроса, "УПОРЯДОЧИТЬ"))
	Иначе
		Хвостик = ""
	КонецЕсли;
	
	Результат = "";
	Индекс = 0;
	КоличествоЭлементов = МассивЗапросов.Количество();
	Для каждого ЭлементМассива Из МассивЗапросов Цикл Индекс = Индекс + 1; Если Индекс = 1 Тогда Результат = ЭлементМассива ИначеЕсли Найти(ЭлементМассива, "И NULL = ") = 0 Тогда Результат = Результат + " ОБЪЕДИНИТЬ ВСЕ " + ЭлементМассива; Если Индекс = КоличествоЭлементов Тогда Хвостик = "" КонецЕсли КонецЕсли КонецЦикла;
	
	Запрос.Текст = Результат + Хвостик;
	Возврат Запрос
	
КонецФункции // ОптимизаторОтборов()

///////////////////////////////////////////////////////////////////////////////
// Работа с настройками

Функция ПолучитьТаблицуНастроек(ИмяТаблицыНастроек) Экспорт
	
	ТипСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));
	ТипБулево = Новый ОписаниеТипов("Булево");
	ТипХранилищеЗначения = Новый ОписаниеТипов("ХранилищеЗначения");
	
	#Если Клиент Тогда
		ТаблицаНастроек = ВосстановитьЗначение(ИмяТаблицыНастроек);
	#Иначе
		ТаблицаНастроек = Неопределено;
	#КонецЕсли
	
	Если ТаблицаНастроек = Неопределено или ТипЗнч(ТаблицаНастроек) <> Тип("ТаблицаЗначений") Тогда
		// Создадим таблицу значений, если настройки не определены
		ТаблицаНастроек = Новый ТаблицаЗначений;
		Колонки = ТаблицаНастроек.Колонки;
		Колонки.Добавить("Пользователь", ТипСтрока);
		Колонки.Добавить("ИмяОбъекта", ТипСтрока);
		Колонки.Добавить("НаименованиеНастройки", ТипСтрока);
		Колонки.Добавить("СохраненнаяНастройка", ТипХранилищеЗначения);
		Колонки.Добавить("ИспользоватьПриОткрытии", ТипБулево);
		Колонки.Добавить("СохранятьАвтоматически", ТипБулево);
	КонецЕсли;
	
	Возврат ТаблицаНастроек;
	
КонецФункции // ПолучитьТаблицуНастроек()

Функция ПолучитьНастройкуИспользоватьПриОткрытии(СтруктураНастройки, ИмяТаблицыНастроек) Экспорт
	Перем Результат;
	
	Попытка
		Выполнить("Результат = УниверсальныеМеханизмы.ПолучитьНастройкуИспользоватьПриОткрытии(СтруктураНастройки)")
		
	Исключение
		
		Если ТипЗнч(СтруктураНастройки) <> Тип("Структура") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ТаблицаНастроек = ПолучитьТаблицуНастроек(ИмяТаблицыНастроек);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СохраненныеНастройки.Пользователь,
		|	СохраненныеНастройки.ИмяОбъекта,
		|	СохраненныеНастройки.НаименованиеНастройки,
		|	СохраненныеНастройки.ИспользоватьПриОткрытии,
		|	СохраненныеНастройки.СохранятьАвтоматически
		|ПОМЕСТИТЬ СохраненныеНастройки
		|ИЗ
		|	&ТаблицаНастроек КАК СохраненныеНастройки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВложенныйЗапрос.Пользователь,
		|	ВложенныйЗапрос.НаименованиеНастройки,
		|	ВложенныйЗапрос.СохраненнаяНастройка,
		|	ВложенныйЗапрос.СохранятьАвтоматически
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1
		|		СохраненныеНастройки.Пользователь КАК Пользователь,
		|		СохраненныеНастройки.НаименованиеНастройки КАК НаименованиеНастройки,
		|		НЕОПРЕДЕЛЕНО КАК СохраненнаяНастройка,
		|		СохраненныеНастройки.СохранятьАвтоматически КАК СохранятьАвтоматически,
		|		0 КАК ВидНастройки
		|	ИЗ
		|		СохраненныеНастройки КАК СохраненныеНастройки
		|	ГДЕ
		|		СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
		|		И СохраненныеНастройки.Пользователь = &Пользователь
		|		И СохраненныеНастройки.ИспользоватьПриОткрытии = ИСТИНА
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ ПЕРВЫЕ 1
		|		СохраненныеНастройки.Пользователь,
		|		СохраненныеНастройки.НаименованиеНастройки,
		|		НЕОПРЕДЕЛЕНО,
		|		СохраненныеНастройки.СохранятьАвтоматически,
		|		1
		|	ИЗ
		|		СохраненныеНастройки КАК СохраненныеНастройки
		|	ГДЕ
		|		СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
		|		И СохраненныеНастройки.Пользователь = """"
		|		И СохраненныеНастройки.ИспользоватьПриОткрытии = ИСТИНА) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.ВидНастройки");
		
		Если СтруктураНастройки.Свойство("Пользователь") И ЗначениеЗаполнено(СтруктураНастройки.Пользователь) Тогда
			Запрос.УстановитьПараметр("Пользователь", "" + СтруктураНастройки.Пользователь);
		Иначе
			Запрос.УстановитьПараметр("Пользователь", "");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ИмяОбъекта", СтруктураНастройки.ИмяОбъекта);
		Запрос.УстановитьПараметр("ТаблицаНастроек", ТаблицаНастроек);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Ложь;
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			СтрокиТаблицыНастроек = ТаблицаНастроек.НайтиСтроки(Новый Структура("Пользователь,ИмяОбъекта,НаименованиеНастройки", "" + Выборка.Пользователь, СтруктураНастройки.ИмяОбъекта, Выборка.НаименованиеНастройки));
			
			СтруктураНастройки.Вставить("НаименованиеНастройки", Выборка.НаименованиеНастройки);
			СтруктураНастройки.Вставить("СохраненнаяНастройка", СтрокиТаблицыНастроек[0].СохраненнаяНастройка.Получить());
			СтруктураНастройки.Вставить("ИспользоватьПриОткрытии", Истина);
			СтруктураНастройки.Вставить("СохранятьАвтоматически", Выборка.СохранятьАвтоматически);
		КонецЕсли;
		
		Возврат Истина;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции // ПолучитьНастройкуИспользоватьПриОткрытии()

Функция ПолучитьНастройку(СтруктураНастройки, ИмяТаблицыНастроек) Экспорт
	Перем Результат;
	
	Попытка
		Выполнить("Результат = УниверсальныеМеханизмы.ПолучитьНастройку(СтруктураНастройки)")
		
	Исключение
		
		Если ТипЗнч(СтруктураНастройки) <> Тип("Структура") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ТаблицаНастроек = ПолучитьТаблицуНастроек(ИмяТаблицыНастроек);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СохраненныеНастройки.Пользователь,
		|	СохраненныеНастройки.ИмяОбъекта,
		|	СохраненныеНастройки.НаименованиеНастройки,
		|	СохраненныеНастройки.ИспользоватьПриОткрытии,
		|	СохраненныеНастройки.СохранятьАвтоматически
		|ПОМЕСТИТЬ СохраненныеНастройки
		|ИЗ
		|	&ТаблицаНастроек КАК СохраненныеНастройки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СохраненныеНастройки.Пользователь,
		|	СохраненныеНастройки.ИмяОбъекта,
		|	СохраненныеНастройки.НаименованиеНастройки,
		|	НЕОПРЕДЕЛЕНО КАК СохраненнаяНастройка,
		|	СохраненныеНастройки.ИспользоватьПриОткрытии,
		|	СохраненныеНастройки.СохранятьАвтоматически
		|ИЗ
		|	СохраненныеНастройки КАК СохраненныеНастройки
		|ГДЕ
		|	СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
		|	И СохраненныеНастройки.Пользователь = &Пользователь
		|	И СохраненныеНастройки.НаименованиеНастройки = &НаименованиеНастройки");
		
		Если СтруктураНастройки.Свойство("Пользователь") Тогда
			Запрос.УстановитьПараметр("Пользователь", "" + СтруктураНастройки.Пользователь);
		Иначе
			Запрос.УстановитьПараметр("Пользователь", "");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ИмяОбъекта", СтруктураНастройки.ИмяОбъекта);
		Запрос.УстановитьПараметр("НаименованиеНастройки", СтруктураНастройки.НаименованиеНастройки);
		Запрос.УстановитьПараметр("ТаблицаНастроек", ТаблицаНастроек);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Ложь;
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			СтрокиТаблицыНастроек = ТаблицаНастроек.НайтиСтроки(Новый Структура("Пользователь,ИмяОбъекта,НаименованиеНастройки", "" + Выборка.Пользователь, Выборка.ИмяОбъекта, Выборка.НаименованиеНастройки));
			
			СтруктураНастройки.Вставить("СохраненнаяНастройка", СтрокиТаблицыНастроек[0].СохраненнаяНастройка.Получить());
			СтруктураНастройки.Вставить("ИспользоватьПриОткрытии", Выборка.ИспользоватьПриОткрытии);
			СтруктураНастройки.Вставить("СохранятьАвтоматически", Выборка.СохранятьАвтоматически);
		КонецЕсли;
		
		Возврат Истина;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции // ПолучитьНастройку()

Функция ПолучитьНастройки(СтруктураНастройки, ИмяТаблицыНастроек, ПолучитьНастройкиВсехПользователей = Ложь, ПолучитьГрупповыеНастройки = Ложь, ПолучитьОбщиеНастройки = Ложь) Экспорт
	Перем Выгрузка;
	
	Попытка
		Выполнить("Выгрузка = УниверсальныеМеханизмы.ПолучитьНастройки(СтруктураНастройки, ПолучитьНастройкиВсехПользователей, ПолучитьГрупповыеНастройки, ПолучитьОбщиеНастройки)")
		
	Исключение
		
		ТаблицаНастроек = ПолучитьТаблицуНастроек(ИмяТаблицыНастроек);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СохраненныеНастройки.Пользователь,
		|	СохраненныеНастройки.ИмяОбъекта,
		|	СохраненныеНастройки.НаименованиеНастройки,
		|	СохраненныеНастройки.ИспользоватьПриОткрытии,
		|	СохраненныеНастройки.СохранятьАвтоматически
		|ПОМЕСТИТЬ СохраненныеНастройки
		|ИЗ
		|	&ТаблицаНастроек КАК СохраненныеНастройки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СохраненныеНастройки.Пользователь КАК Пользователь,
		|	СохраненныеНастройки.ИмяОбъекта КАК ИмяОбъекта,
		|	СохраненныеНастройки.НаименованиеНастройки КАК НаименованиеНастройки,
		|	НЕОПРЕДЕЛЕНО КАК СохраненнаяНастройка,
		|	СохраненныеНастройки.ИспользоватьПриОткрытии КАК ИспользоватьПриОткрытии,
		|	СохраненныеНастройки.СохранятьАвтоматически КАК СохранятьАвтоматически,
		|	0 КАК ВидНастройки
		|ИЗ
		|	СохраненныеНастройки КАК СохраненныеНастройки
		|ГДЕ
		|	СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
		|	И СохраненныеНастройки.Пользователь = &Пользователь
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СохраненныеНастройки.Пользователь,
		|	СохраненныеНастройки.ИмяОбъекта,
		|	СохраненныеНастройки.НаименованиеНастройки,
		|	НЕОПРЕДЕЛЕНО,
		|	СохраненныеНастройки.ИспользоватьПриОткрытии,
		|	СохраненныеНастройки.СохранятьАвтоматически,
		|	1
		|ИЗ
		|	СохраненныеНастройки КАК СохраненныеНастройки
		|ГДЕ
		|	СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
		|	И СохраненныеНастройки.Пользователь <> &Пользователь
		|	И &НастройкиВсехПользователей = ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СохраненныеНастройки.Пользователь,
		|	СохраненныеНастройки.ИмяОбъекта,
		|	СохраненныеНастройки.НаименованиеНастройки,
		|	НЕОПРЕДЕЛЕНО,
		|	СохраненныеНастройки.ИспользоватьПриОткрытии,
		|	СохраненныеНастройки.СохранятьАвтоматически,
		|	2
		|ИЗ
		|	СохраненныеНастройки КАК СохраненныеНастройки
		|ГДЕ
		|	СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
		|	И СохраненныеНастройки.Пользователь = """"
		|	И &Пользователь <> """"
		|	И &ОбщиеНастройки = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидНастройки,
		|	НаименованиеНастройки");
		
		Если СтруктураНастройки.Свойство("Пользователь") И ЗначениеЗаполнено(СтруктураНастройки.Пользователь) Тогда
			Запрос.УстановитьПараметр("Пользователь", "" + СтруктураНастройки.Пользователь);
		Иначе
			Запрос.УстановитьПараметр("Пользователь", "");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ИмяОбъекта", СтруктураНастройки.ИмяОбъекта);
		Запрос.УстановитьПараметр("НастройкиВсехПользователей", ПолучитьНастройкиВсехПользователей);
		Запрос.УстановитьПараметр("ГрупповыеНастройки", ПолучитьГрупповыеНастройки);
		Запрос.УстановитьПараметр("ОбщиеНастройки", ПолучитьОбщиеНастройки);
		Запрос.УстановитьПараметр("ТаблицаНастроек", ТаблицаНастроек);
		
		Выгрузка = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаВыгрузки Из Выгрузка Цикл
			СтрокиТаблицыНастроек = ТаблицаНастроек.НайтиСтроки(Новый Структура("Пользователь,ИмяОбъекта,НаименованиеНастройки", "" + СтрокаВыгрузки.Пользователь, СтрокаВыгрузки.ИмяОбъекта, СтрокаВыгрузки.НаименованиеНастройки));
			СтрокаВыгрузки.СохраненнаяНастройка = Новый ХранилищеЗначения(СтрокиТаблицыНастроек[0].СохраненнаяНастройка.Получить());
		КонецЦикла;
		
	КонецПопытки;
	
	Возврат Выгрузка;
	
КонецФункции // ПолучитьНастройки()

Функция ВосстановлениеНастроек(СтруктураНастройки, ИмяТаблицыНастроек) Экспорт
	
	ФормаУправленияНастройками = ПолучитьФорму("ФормаУправленияНастройками");
	ФормаУправленияНастройками.мВосстановлениеНастройки = Истина;
	ФормаУправленияНастройками.мСтруктураНастройки = СтруктураНастройки;
	ФормаУправленияНастройками.мИмяТаблицыНастроек = ИмяТаблицыНастроек;
	
	Результат = ФормаУправленияНастройками.ОткрытьМодально();
	СтруктураНастройки = ФормаУправленияНастройками.мСтруктураНастройки;
	Возврат Результат;
	
КонецФункции // ВосстановлениеНастроек()

Функция СохранениеНастроек(СтруктураНастройки, ИмяТаблицыНастроек) Экспорт
	
	ФормаУправленияНастройками = ПолучитьФорму("ФормаУправленияНастройками");
	ФормаУправленияНастройками.мВосстановлениеНастройки = Ложь;
	ФормаУправленияНастройками.мСтруктураНастройки = СтруктураНастройки;
	ФормаУправленияНастройками.мИмяТаблицыНастроек = ИмяТаблицыНастроек;
	
	Результат = ФормаУправленияНастройками.ОткрытьМодально();
	СтруктураНастройки = ФормаУправленияНастройками.мСтруктураНастройки;
	Возврат Результат;
	
КонецФункции // СохранениеНастроек()

Функция СохранитьНастройку(СтруктураНастройки, ИмяТаблицыНастроек, СтруктураЗаменяемойНастройки = Неопределено) Экспорт
	Перем Результат;
	
	Попытка
		Выполнить("Результат = УниверсальныеМеханизмы.СохранитьНастройку(СтруктураНастройки, СтруктураЗаменяемойНастройки)")
		
	Исключение
		
		Если ТипЗнч(СтруктураНастройки) <> Тип("Структура") Тогда
			Возврат Ложь
		КонецЕсли;
		ТаблицаНастроек = ПолучитьТаблицуНастроек(ИмяТаблицыНастроек);
		
		Если СтруктураНастройки.Свойство("ИспользоватьПриОткрытии") И СтруктураНастройки.ИспользоватьПриОткрытии = Истина Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СохраненныеНастройки.Пользователь,
			|	СохраненныеНастройки.ИмяОбъекта,
			|	СохраненныеНастройки.НаименованиеНастройки,
			|	СохраненныеНастройки.ИспользоватьПриОткрытии
			|ПОМЕСТИТЬ СохраненныеНастройки
			|ИЗ
			|	&ТаблицаНастроек КАК СохраненныеНастройки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СохраненныеНастройки.Пользователь,
			|	СохраненныеНастройки.ИмяОбъекта,
			|	СохраненныеНастройки.НаименованиеНастройки
			|ИЗ
			|	СохраненныеНастройки КАК СохраненныеНастройки
			|ГДЕ
			|	СохраненныеНастройки.ИспользоватьПриОткрытии = ИСТИНА
			|	И СохраненныеНастройки.Пользователь = &Пользователь
			|	И СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
			|	И СохраненныеНастройки.НаименованиеНастройки <> &НаименованиеНастройки");
			
			Запрос.УстановитьПараметр("Пользователь", "" + СтруктураНастройки.Пользователь);
			Запрос.УстановитьПараметр("ИмяОбъекта", СтруктураНастройки.ИмяОбъекта);
			Запрос.УстановитьПараметр("НаименованиеНастройки", СтруктураНастройки.НаименованиеНастройки);
			Запрос.УстановитьПараметр("ТаблицаНастроек", ТаблицаНастроек);
			
			РезультаЗапроса = Запрос.Выполнить();
			
			Если Не РезультаЗапроса.Пустой() Тогда
				Выборка = РезультаЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					СтрокиТаблицыНастроек = ТаблицаНастроек.НайтиСтроки(Новый Структура("Пользователь,ИмяОбъекта,НаименованиеНастройки", "" + Выборка.Пользователь, Выборка.ИмяОбъекта, Выборка.НаименованиеНастройки));
					
					Для каждого СтрокаТаблицыНастроек Из СтрокиТаблицыНастроек Цикл
						СтрокаТаблицыНастроек.ИспользоватьПриОткрытии = Ложь;
					КонецЦикла; 
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураЗаменяемойНастройки <> Неопределено Тогда
			СтрокиТаблицыНастроек = ТаблицаНастроек.НайтиСтроки(Новый Структура("Пользователь,ИмяОбъекта,НаименованиеНастройки", "" + СтруктураЗаменяемойНастройки.Пользователь, СтруктураЗаменяемойНастройки.ИмяОбъекта, СтруктураЗаменяемойНастройки.НаименованиеНастройки));
			
			Если СтрокиТаблицыНастроек.Количество() Тогда
				Для каждого СтрокаТаблицыНастроек Из СтрокиТаблицыНастроек Цикл
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыНастроек, СтруктураНастройки,, "СохраненнаяНастройка");
					Если СтруктураНастройки.Свойство("СохраненнаяНастройка") Тогда
						СтрокаТаблицыНастроек.СохраненнаяНастройка = Новый ХранилищеЗначения(СтруктураНастройки.СохраненнаяНастройка, Новый СжатиеДанных(9));
					КонецЕсли;
				КонецЦикла;
			Иначе
				Возврат Ложь;
			КонецЕсли;
			
		Иначе
			СтрокиТаблицыНастроек = ТаблицаНастроек.НайтиСтроки(Новый Структура("Пользователь,ИмяОбъекта,НаименованиеНастройки", "" + СтруктураНастройки.Пользователь, СтруктураНастройки.ИмяОбъекта, СтруктураНастройки.НаименованиеНастройки));
			
			Если СтрокиТаблицыНастроек.Количество() Тогда
				Для каждого СтрокаТаблицыНастроек Из СтрокиТаблицыНастроек Цикл
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыНастроек, СтруктураНастройки,, "СохраненнаяНастройка");
					Если СтруктураНастройки.Свойство("СохраненнаяНастройка") Тогда
						СтрокаТаблицыНастроек.СохраненнаяНастройка = Новый ХранилищеЗначения(СтруктураНастройки.СохраненнаяНастройка, Новый СжатиеДанных(9));
					КонецЕсли;
				КонецЦикла;
			Иначе
				НоваяСтрока = ТаблицаНастроек.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураНастройки,, "СохраненнаяНастройка");
				НоваяСтрока.СохраненнаяНастройка = Новый ХранилищеЗначения(СтруктураНастройки.СохраненнаяНастройка, Новый СжатиеДанных(9));
			КонецЕсли;
		КонецЕсли;
		
		#Если Клиент Тогда
			СохранитьЗначение(ИмяТаблицыНастроек, ТаблицаНастроек);
		#КонецЕсли
		Возврат Истина;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции // СохранитьНастройку()

Функция УдалитьНастройку(СтруктураНастройки, ИмяТаблицыНастроек) Экспорт
	Перем Результат;
	
	Попытка
		Выполнить("Результат = УниверсальныеМеханизмы.УдалитьНастройку(СтруктураНастройки)")
		
	Исключение
		
		Если ТипЗнч(СтруктураНастройки) <> Тип("Структура") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ТаблицаНастроек = ПолучитьТаблицуНастроек(ИмяТаблицыНастроек);
		
		СтрокиТаблицыНастроек = ТаблицаНастроек.НайтиСтроки(Новый Структура("Пользователь,ИмяОбъекта,НаименованиеНастройки", "" + СтруктураНастройки.Пользователь, СтруктураНастройки.ИмяОбъекта, СтруктураНастройки.НаименованиеНастройки));
		
		Если СтрокиТаблицыНастроек.Количество() Тогда
			ТаблицаНастроек.Удалить(СтрокиТаблицыНастроек[0]);
			#Если Клиент Тогда
				СохранитьЗначение(ИмяТаблицыНастроек, ТаблицаНастроек);
			#КонецЕсли
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Истина;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции // УдалитьНастройку()

///////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//

мВерсия = Метаданные().Комментарий;