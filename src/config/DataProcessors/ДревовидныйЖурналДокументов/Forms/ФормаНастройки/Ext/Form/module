///////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
Перем СтрокаДоступныеДокументы;
Перем СтрокаВыводимыеГрафы;

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//

Процедура УстановитьФлажкиДереваРеквизитыДокументов()
	
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого СтрокаДокумента Из РеквизитыДокументов.Строки.НайтиСтроки(Новый Структура("Пометка", Истина), Истина) Цикл
	//	СтрокаДокумента.Пометка = Ложь;
	//КонецЦикла;

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого СтрокаДокумента Из РеквизитыДокументов.Строки.НайтиСтроки(Новый Структура("Пометка", Истина), Истина) Цикл СтрокаДокумента.Пометка = Ложь; КонецЦикла;
	
	Если ЭлементыФормы.СписокГраф.ТекущиеДанные = Неопределено или Не ТипЗнч(ЭлементыФормы.СписокГраф.ТекущиеДанные.Значение) = Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого Элемент Из ЭлементыФормы.СписокГраф.ТекущиеДанные.Значение Цикл
	//	СтрокаДокумента = РеквизитыДокументов.Строки.Найти(Элемент.Значение, "Имя", Ложь);
	//	Если Не СтрокаДокумента = Неопределено Тогда
	//		СтрокаРеквизита = СтрокаДокумента.Строки.Найти(Элемент.Представление, "Имя");
	//		Если Не СтрокаРеквизита = Неопределено Тогда СтрокаРеквизита.Пометка = Истина;
	//			СтрокаДокумента.Пометка = Истина;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого Элемент Из ЭлементыФормы.СписокГраф.ТекущиеДанные.Значение Цикл СтрокаДокумента = РеквизитыДокументов.Строки.Найти(Элемент.Значение, "Имя", Ложь); Если Не СтрокаДокумента = Неопределено Тогда СтрокаРеквизита = СтрокаДокумента.Строки.Найти(Элемент.Представление, "Имя"); Если Не СтрокаРеквизита = Неопределено Тогда СтрокаРеквизита.Пометка = Истина; СтрокаДокумента.Пометка = Истина; КонецЕсли; КонецЕсли; КонецЦикла;
	
	ЭлементыФормы.РеквизитыДокументов.ОбновитьСтроки();
	
КонецПроцедуры // УстановитьФлажкиДереваРеквизитыДокументов() 

Процедура ПостроитьДеревоРеквизитыДокументов()
	
	ТипЧисло = Тип("Число");
	ОписаниеТипаХранилищеЗначений = Новый ОписаниеТипов("ХранилищеЗначения");
	РеквизитыДокументовСтроки = РеквизитыДокументов.Строки;
	РеквизитыДокументовСтроки.Очистить();
	ЭлементыФормыРеквизитыДокументов = ЭлементыФормы.РеквизитыДокументов;
	МетаданныеДокументы = Метаданные.Документы;
	
	//ЕстьСвойстваОбъектов = Ложь;
	ЕстьСвойстваОбъектов = Метаданные.ПланыВидовХарактеристик.Найти("НазначенияСвойствКатегорийОбъектов") <> Неопределено и
		Метаданные.ПланыВидовХарактеристик.Найти("СвойстваОбъектов") <> Неопределено и
		Метаданные.РегистрыСведений.Найти("ЗначенияСвойствОбъектов") <> Неопределено;
	
	Если ЕстьСвойстваОбъектов Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НазначенияСвойствКатегорийОбъектов.Ссылка КАК Ссылка,
		|	НазначенияСвойствКатегорийОбъектов.ТипЗначения КАК ТипЗначения
		|ИЗ
		|	ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов КАК НазначенияСвойствКатегорийОбъектов
		|ГДЕ
		|	(НЕ НазначенияСвойствКатегорийОбъектов.ЭтоГруппа)";
		НазначенияСвойств = Запрос.Выполнить().Выгрузить();
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СвойстваОбъектов.Ссылка КАК Ссылка,
		|	СвойстваОбъектов.Наименование КАК Наименование
		|ИЗ
		|	ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
		|ГДЕ
		|	СвойстваОбъектов.НазначениеСвойства В(&НазначениеСвойства)";
	КонецЕсли;
	
		//Для каждого ТабличнаяЧасть Из МетаданныеДокументы[ИмяДокумента].ТабличныеЧасти Цикл
		//	ТабличнаяЧастьИмя = ТабличнаяЧасть.Имя + ".";
		//	ТабличнаяЧастьПредставление = "СУММА(" + ТабличнаяЧасть.Представление() + ": ";
		//	Для каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
		//		МассивТипов = Реквизит.Тип.Типы();
		//		Если МассивТипов.Количество() = 1 и МассивТипов[0] = ТипЧисло Тогда
		//			СтрокаРеквизита = СтрокаДокументаСтроки.Добавить();
		//			СтрокаРеквизита.Имя = ТабличнаяЧастьИмя + Реквизит.Имя;
		//			СтрокаРеквизита.Представление = ТабличнаяЧастьПредставление + Реквизит.Представление() + ")";
		//		КонецЕсли;
		//	КонецЦикла;
		//КонецЦикла;
		
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого ЭлементСписка Из СписокОбрабатываемыхДокументов Цикл
	//	ИмяДокумента = ЭлементСписка.Значение;
	//	СтрокаДокумента = РеквизитыДокументовСтроки.Добавить();
	//	СтрокаДокумента.Имя = ИмяДокумента;
	//	СтрокаДокумента.Представление = ЭлементСписка.Представление;
	//	СтрокаДокументаСтроки = СтрокаДокумента.Строки;
	//	Для каждого Реквизит Из МетаданныеДокументы[ИмяДокумента].Реквизиты Цикл
	//		Если Не Реквизит.Тип = ОписаниеТипаХранилищеЗначений Тогда
	//			СтрокаРеквизита = СтрокаДокументаСтроки.Добавить();
	//			СтрокаРеквизита.Имя = Реквизит.Имя;
	//			СтрокаРеквизита.Представление = Реквизит.Представление();
	//			МассивТипов = Реквизит.Тип.Типы();
	//			СтрокаРеквизита.ЭтоЧисло = МассивТипов.Количество() = 1 и МассивТипов[0] = ТипЧисло;
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	Если ЕстьСвойстваОбъектов Тогда
	//		ТипОбъекта = Тип("ДокументСсылка." + ИмяДокумента);
	//		МассивНазначений = Новый Массив;
	//		Для Каждого НазначениеСвойства Из НазначенияСвойств Цикл
	//			Если НазначениеСвойства.ТипЗначения.СодержитТип(ТипОбъекта) Тогда
	//				МассивНазначений.Добавить(НазначениеСвойства.Ссылка);
	//			КонецЕсли;
	//		КонецЦикла;
	//		
	//		Если МассивНазначений.Количество() Тогда
	//			Запрос.УстановитьПараметр("НазначениеСвойства", МассивНазначений);
	//			Выборка = Запрос.Выполнить().Выбрать();
	//			Пока Выборка.Следующий() Цикл
	//				СтрокаРеквизита = СтрокаДокументаСтроки.Добавить();
	//				СтрокаРеквизита.Имя = "СвойстваОбъектов." + Выборка.Ссылка.УникальныйИдентификатор();
	//				СтрокаРеквизита.Представление = "Свойство: " + Выборка.Наименование;
	//				СтрокаРеквизита.ЭтоСсылка = Истина;
	//			КонецЦикла; 
	//		КонецЕсли; 
	//	КонецЕсли;
	//	
	//	ЭлементыФормыРеквизитыДокументов.Развернуть(СтрокаДокумента);
	//КонецЦикла;

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого ЭлементСписка Из СписокОбрабатываемыхДокументов Цикл ИмяДокумента = ЭлементСписка.Значение; СтрокаДокумента = РеквизитыДокументовСтроки.Добавить(); СтрокаДокумента.Имя = ИмяДокумента; СтрокаДокумента.Представление = ЭлементСписка.Представление; СтрокаДокументаСтроки = СтрокаДокумента.Строки; Для каждого Реквизит Из МетаданныеДокументы[ИмяДокумента].Реквизиты Цикл Если Не Реквизит.Тип = ОписаниеТипаХранилищеЗначений Тогда СтрокаРеквизита = СтрокаДокументаСтроки.Добавить(); СтрокаРеквизита.Имя = Реквизит.Имя; СтрокаРеквизита.Представление = Реквизит.Представление(); МассивТипов = Реквизит.Тип.Типы(); СтрокаРеквизита.ЭтоЧисло = МассивТипов.Количество() = 1 и МассивТипов[0] = ТипЧисло; КонецЕсли; КонецЦикла; Если ЕстьСвойстваОбъектов Тогда ТипОбъекта = Тип("ДокументСсылка." + ИмяДокумента); МассивНазначений = Новый Массив; Для Каждого НазначениеСвойства Из НазначенияСвойств Цикл Если НазначениеСвойства.ТипЗначения.СодержитТип(ТипОбъекта) Тогда МассивНазначений.Добавить(НазначениеСвойства.Ссылка); КонецЕсли; КонецЦикла; Если МассивНазначений.Количество() Тогда Запрос.УстановитьПараметр("НазначениеСвойства", МассивНазначений); Выборка = Запрос.Выполнить().Выбрать(); Пока Выборка.Следующий() Цикл СтрокаРеквизита = СтрокаДокументаСтроки.Добавить(); СтрокаРеквизита.Имя = "СвойстваОбъектов." + Выборка.Ссылка.УникальныйИдентификатор(); СтрокаРеквизита.Представление = "Свойство: " + Выборка.Наименование; СтрокаРеквизита.ЭтоСсылка = Истина; КонецЦикла; КонецЕсли; КонецЕсли; ЭлементыФормыРеквизитыДокументов.Развернуть(СтрокаДокумента); КонецЦикла;

КонецПроцедуры // ПостроитьДеревоРеквизитыДокументов() 

Процедура ОсновныеДействияФормыОК(Кнопка)
	
	Если ТолькоСуществующие Тогда
		ТекстЗапроса = "";
		Для каждого МетаданныеДокумента Из Метаданные.Документы Цикл
			ИмяДокумента = МетаданныеДокумента.Имя;
			Если СписокОбрабатываемыхДокументов.НайтиПоЗначению(ИмяДокумента) <> Неопределено Тогда
				ТекстЗапроса = ?(ПустаяСтрока(ТекстЗапроса), "ВЫБРАТЬ РАЗРЕШЕННЫЕ ", ТекстЗапроса + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ") + " ПЕРВЫЕ 1
				|	""" + ИмяДокумента + """ КАК ИмяДокумента
				|ИЗ Документ." + ИмяДокумента + " КАК __Документ
				|";
			КонецЕсли;
		КонецЦикла;
		Запрос = Новый Запрос(ТекстЗапроса);
		МассивВидовДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
		
		МассивОбрабатываемыхДокументов = СписокОбрабатываемыхДокументов.ВыгрузитьЗначения();
		// Код в комментарии записаный в 1 строку находится ниже этого комментария
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		//Для Индекс = 1 - МассивОбрабатываемыхДокументов.Количество() По 0 Цикл
		//	Если МассивВидовДокументов.Найти(МассивОбрабатываемыхДокументов[-Индекс]) = Неопределено Тогда
		//		МассивОбрабатываемыхДокументов.Удалить(-Индекс);
		//	КонецЕсли;
		//КонецЦикла; 

		// Код записанный в 1 строку находится в комментарии расположенном выше
		// Для редактирования кода снимите комментарий
		// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
		Для Индекс = 1 - МассивОбрабатываемыхДокументов.Количество() По 0 Цикл Если МассивВидовДокументов.Найти(МассивОбрабатываемыхДокументов[-Индекс]) = Неопределено Тогда МассивОбрабатываемыхДокументов.Удалить(-Индекс); КонецЕсли; КонецЦикла;
		СписокОбрабатываемыхДокументов.ЗагрузитьЗначения(МассивОбрабатываемыхДокументов);
	КонецЕсли;
	
	ДоступныеДокументы.Очистить();
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого ЭлементСписка Из СписокОбрабатываемыхДокументов Цикл
	//	ДоступныеДокументы.Добавить().ИмяДокумента = ЭлементСписка.Значение;
	//КонецЦикла;

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого ЭлементСписка Из СписокОбрабатываемыхДокументов Цикл ДоступныеДокументы.Добавить().ИмяДокумента = ЭлементСписка.Значение; КонецЦикла;
	
	// Сбрасываем некорректные настройки во избежание ошибок
	Если ВидСпискаДокументов = "ДеревоПоГрафе" Тогда
		Если СписокГраф.Количество() = 0 Тогда
			ВидСпискаДокументов = "ДеревоПоДням";
			Сообщить("Обнаружена ошибка в настройках журнала:
					|  не указана графа для группировки
					|Выполнено исправление:
					|  изменен вид списка ""В виде дерева. Группировка по дням""
					|Рекомендации:
					|  для построения журнала ""В виде дерева. Групировка по первой графе"" заполните список граф");
		ИначеЕсли СписокГраф[0].Пометка Тогда
			СписокГраф[0].Пометка = Ложь;
			Сообщить("Обнаружена ошибка в настройках журнала:
					|  для группировки выбрана графа с итогами
					|Выполнено исправление:
					|  снят признак расчета итогов с первой графы
					|Рекомендации:
					|  для вывода итогов в журнале ""В виде дерева. Групировка по первой графе"" графы с итогами не должны быть первыми");
		КонецЕсли;
	КонецЕсли;
	
	ВыводимыеГрафы.Очистить();
	ОчиститьГрафыОтНевыбранныхДокументов();
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого ЭлементСписка Из СписокГраф Цикл
	//	Графа = ВыводимыеГрафы.Добавить();
	//	Графа.ГрафаЖурнала = ЭлементСписка.Представление;
	//	Графа.СоставГрафы = ЗначениеВСтрокуВнутр(ЭлементСписка.Значение);
	//	Графа.Суммовая = ЭлементСписка.Пометка;
	//КонецЦикла;

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого ЭлементСписка Из СписокГраф Цикл Графа = ВыводимыеГрафы.Добавить(); Графа.ГрафаЖурнала = ЭлементСписка.Представление; Графа.СоставГрафы = ЗначениеВСтрокуВнутр(ЭлементСписка.Значение); Графа.Суммовая = ЭлементСписка.Пометка; КонецЦикла;
	
	Если ЗакрыватьПриЗакрытииВладельца Тогда
		ВладелецФормы.ОбновитьФорму = (ВладелецФормы.ВидСпискаДокументов <> ВидСпискаДокументов
			или СтрокаДоступныеДокументы <> ЗначениеВСтрокуВнутр(ДоступныеДокументы.Выгрузить())
			или СтрокаВыводимыеГрафы <> ЗначениеВСтрокуВнутр(ВыводимыеГрафы.Выгрузить())
			или ДатаНачала <> НастройкаПериодаЖурнала.ПолучитьДатуНачала()
			или ДатаОкончания <> НастройкаПериодаЖурнала.ПолучитьДатуОкончания());
			
		Если ВладелецФормы.ПоказыватьРеквизиты <> ПоказыватьРеквизиты
			или ВладелецФормы.ПоказыватьТабЧасти <> ПоказыватьТабЧасти
			или ВладелецФормы.ПоказыватьДвижения <> ПоказыватьДвижения Тогда
			ВладелецФормы.СтруктураЗапросовДляЗакладок = Неопределено;
		КонецЕсли;
		
		ВладелецФормы.РазворачиватьУровни = РазворачиватьУровни;
		ВладелецФормы.ПоказыватьРеквизиты = ПоказыватьРеквизиты;
		ВладелецФормы.ПоказыватьТабЧасти = ПоказыватьТабЧасти;
		ВладелецФормы.ПоказыватьДвижения = ПоказыватьДвижения;
		ВладелецФормы.ТолькоСуществующие = ТолькоСуществующие;
		ВладелецФормы.ВидСпискаДокументов = ВидСпискаДокументов;
		ВладелецФормы.ОтображатьДокументыВВидеДерева = (ВидСпискаДокументов <> "Список");
	КонецЕсли;
	
	НастройкаПериодаЖурнала.УстановитьПериод(ДатаНачала, ?(ДатаОкончания = '0001-01-01', ДатаОкончания, КонецДня(ДатаОкончания)));
	
	Закрыть(Истина);
	
КонецПроцедуры // ОсновныеДействияФормыОК

Процедура РеквизитыДокументовВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ВыбранныйРеквизит = ВыбраннаяСтрока.Представление;
	ДобавитьГрафу = Истина;
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого ГрафаИзСписка Из СписокГраф Цикл
	//	Если ГрафаИзСписка.Представление = ВыбранныйРеквизит Тогда
	//		ДобавитьГрафу = Ложь;
	//		Прервать;
	//	КонецЕсли;
	//КонецЦикла;

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого ГрафаИзСписка Из СписокГраф Цикл Если ГрафаИзСписка.Представление = ВыбранныйРеквизит Тогда ДобавитьГрафу = Ложь; Прервать; КонецЕсли; КонецЦикла;
	
	Если ДобавитьГрафу Тогда
		НоваяГрафа = СписокГраф.Добавить(Новый СписокЗначений, ВыбраннаяСтрока.Представление, ВыбраннаяСтрока.ЭтоЧисло);
		// имя документа, имя реквизита, признак свойства
		НоваяГрафа.Значение.Добавить(ВыбраннаяСтрока.Родитель.Имя, ВыбраннаяСтрока.Имя, ВыбраннаяСтрока.ЭтоЧисло, ?(ВыбраннаяСтрока.ЭтоСсылка, мКартинкаСвойство, мКартинкаПустая));
		ЭлементыФормы.СписокГраф.ТекущаяСтрока = НоваяГрафа;
		ВыбраннаяСтрока.Пометка = Истина;
		
		ОтметитьВыбранныйРеквизит();
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // РеквизитыДокументовВыбор()

Процедура РеквизитыДокументовПриПолученииДанных(Элемент, ОформленияСтрок)
	
	НеОтображатьФлажок = (ЭлементыФормы.СписокГраф.ТекущиеДанные = Неопределено);
	ЖирныйШрифт = Новый Шрифт(,,Истина);
	
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
	//	Если НеОтображатьФлажок Тогда
	//		Ячейка = ОформлениеСтроки.Ячейки.Представление;
	//		Ячейка.ОтображатьФлажок = Ложь;
	//		
	//		Если ОформлениеСтроки.ДанныеСтроки.Родитель = Неопределено Тогда
	//			Ячейка.ТолькоПросмотр = Истина;
	//			ОформлениеСтроки.Шрифт = ЖирныйШрифт;
	//		КонецЕсли;
	//		
	//	ИначеЕсли ОформлениеСтроки.ДанныеСтроки.Родитель = Неопределено Тогда
	//		ОформлениеСтроки.Ячейки.Представление.ОтображатьФлажок = Ложь;
	//		ОформлениеСтроки.Шрифт = ЖирныйШрифт;
	//		
	//	КонецЕсли;
	//КонецЦикла; 

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл Если НеОтображатьФлажок Тогда Ячейка = ОформлениеСтроки.Ячейки.Представление; Ячейка.ОтображатьФлажок = Ложь; Если ОформлениеСтроки.ДанныеСтроки.Родитель = Неопределено Тогда Ячейка.ТолькоПросмотр = Истина; ОформлениеСтроки.Шрифт = ЖирныйШрифт; КонецЕсли; ИначеЕсли ОформлениеСтроки.ДанныеСтроки.Родитель = Неопределено Тогда ОформлениеСтроки.Ячейки.Представление.ОтображатьФлажок = Ложь; ОформлениеСтроки.Шрифт = ЖирныйШрифт; КонецЕсли; КонецЦикла;
	
КонецПроцедуры // РеквизитыДокументовПриПолученииДанных()

Процедура РеквизитыДокументовПриИзмененииФлажка(Элемент, Колонка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	ЗначениеСпискаГраф = ЭлементыФормы.СписокГраф.ТекущиеДанные.Значение;
	СтрокаЗначенияСпискаГраф =  ЗначениеСпискаГраф.НайтиПоЗначению(ТекущиеДанные.Родитель.Имя);
	Если СтрокаЗначенияСпискаГраф = Неопределено Тогда
		Если ТекущиеДанные.Пометка Тогда
			// имя документа, имя реквизита, признак свойства
			ЗначениеСпискаГраф.Добавить(ТекущиеДанные.Родитель.Имя, ТекущиеДанные.Имя, ТекущиеДанные.ЭтоЧисло, ?(ТекущиеДанные.ЭтоСсылка, мКартинкаСвойство, мКартинкаПустая));
		КонецЕсли;
	Иначе
		Если ТекущиеДанные.Пометка Тогда
			// имя документа, имя реквизита, признак свойства
			СтрокаЗначенияСпискаГраф.Представление = ТекущиеДанные.Имя;
			СтрокаЗначенияСпискаГраф.Пометка = ТекущиеДанные.ЭтоЧисло;
			СтрокаЗначенияСпискаГраф.Картинка = ?(ТекущиеДанные.ЭтоСсылка, мКартинкаСвойство, мКартинкаПустая);
		Иначе
			ЗначениеСпискаГраф.Удалить(СтрокаЗначенияСпискаГраф)
		КонецЕсли;
	КонецЕсли;
	
	УстановитьФлажкиДереваРеквизитыДокументов();
	
КонецПроцедуры // РеквизитыДокументовПриИзмененииФлажка()

Процедура КоманднаяПанельРеквизитыДокументовСнятьФлажки(Кнопка)
	
	Если ЭлементыФормы.СписокГраф.ТекущиеДанные = Неопределено или Не ТипЗнч(ЭлементыФормы.СписокГраф.ТекущиеДанные.Значение) = Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	ЭлементыФормы.СписокГраф.ТекущиеДанные.Значение.Очистить();
	УстановитьФлажкиДереваРеквизитыДокументов();
	
КонецПроцедуры // КоманднаяПанельРеквизитыДокументовСнятьФлажки()

Процедура КоманднаяПанельРеквизитыДокументовСвернутьВсе(Кнопка)
	
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого СтрокаДерева Из РеквизитыДокументов.Строки Цикл
	//	Если ЭлементыФормы.РеквизитыДокументов.Развернут(СтрокаДерева) Тогда
	//		ЭлементыФормы.РеквизитыДокументов.Свернуть(СтрокаДерева);
	//	КонецЕсли; 
	//КонецЦикла; 

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого СтрокаДерева Из РеквизитыДокументов.Строки Цикл Если ЭлементыФормы.РеквизитыДокументов.Развернут(СтрокаДерева) Тогда ЭлементыФормы.РеквизитыДокументов.Свернуть(СтрокаДерева); КонецЕсли; КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельРеквизитыДокументовРазвернутьВсе(Кнопка)
	
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого СтрокаДерева Из РеквизитыДокументов.Строки Цикл
	//	Если Не ЭлементыФормы.РеквизитыДокументов.Развернут(СтрокаДерева) Тогда
	//		ЭлементыФормы.РеквизитыДокументов.Развернуть(СтрокаДерева);
	//	КонецЕсли; 
	//КонецЦикла; 

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого СтрокаДерева Из РеквизитыДокументов.Строки Цикл Если Не ЭлементыФормы.РеквизитыДокументов.Развернут(СтрокаДерева) Тогда ЭлементыФормы.РеквизитыДокументов.Развернуть(СтрокаДерева); КонецЕсли; КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельСписокГрафЗаполнитьАвтоматическиВсеОбщиеГрафы(Кнопка)
	
	Если СписокГраф.Количество() и Вопрос("Существующие графы будут очищены. Продолжить?", РежимДиалогаВопрос.ОКОтмена) = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПредставлений = Новый Соответствие;
	СтруктураСуммовых = Новый Соответствие;
	
	КоличествоВидовДокументов = 0;
	ВсеРеквизиты = Новый Соответствие;
	Для каждого СтрокаСДокументом Из РеквизитыДокументов.Строки Цикл
		ИмяДокумента = СтрокаСДокументом.Имя;
		
		Для каждого Реквизит Из СтрокаСДокументом.Строки Цикл
			ИмяРеквизита = Реквизит.Имя;
			ДокументыГрафы = ВсеРеквизиты.Получить(ИмяРеквизита);
			Если ДокументыГрафы = Неопределено Тогда
				ДокументыГрафы = Новый СписокЗначений;
				ВсеРеквизиты.Вставить(ИмяРеквизита, ДокументыГрафы);
				СтруктураПредставлений.Вставить(ИмяРеквизита, Реквизит.Представление);
				СтруктураСуммовых.Вставить(ИмяРеквизита, Реквизит.ЭтоЧисло);
			КонецЕсли;
			ДокументыГрафы.Добавить(ИмяДокумента, ИмяРеквизита, Реквизит.ЭтоЧисло, ?(Реквизит.ЭтоСсылка, мКартинкаСвойство, мКартинкаПустая));
				
		КонецЦикла;
			
		КоличествоВидовДокументов = КоличествоВидовДокументов + 1;
	КонецЦикла;
	
	СписокГраф.Очистить();
	Для каждого КлючИЗначение Из ВсеРеквизиты Цикл
		
		ИмяГрафы = КлючИЗначение.Ключ;
		ДокументыГрафы = КлючИЗначение.Значение;
		Если ДокументыГрафы.Количество() = КоличествоВидовДокументов Тогда
			СписокГраф.Добавить(ДокументыГрафы, СтруктураПредставлений[ИмяГрафы], СтруктураСуммовых[ИмяГрафы]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельСписокГрафЗаполнитьАвтоматическиВсеОбщиеГрафы()

Процедура КоманднаяПанельСписокОбрабатываемыхДокументовИзменить(Кнопка)
	
	Отказ = Истина;
	ИзменитьСоставОбрабатываемыхДокументов()
	
КонецПроцедуры // КоманднаяПанельСписокОбрабатываемыхДокументовИзменить()

Процедура ОтметитьВыбранныйРеквизит()
	
	ТекущиеДанные = ЭлементыФормы.РеквизитыДокументов.ТекущиеДанные;
	ТекущиеДанныеСпискаГраф = ЭлементыФормы.СписокГраф.ТекущиеДанные;
	Если ТекущиеДанныеСпискаГраф = Неопределено Тогда
		Предупреждение("Не выбрана графа!");
		Возврат;
	ИначеЕсли ТекущиеДанные = Неопределено или ТекущиеДанные.Уровень() = 0 Тогда
		Предупреждение("Не выбран реквизит!");
		Возврат;
	КонецЕсли;
	
	ЗаменятьРеквизитВГрафе = Ложь;
	ЗначениеСпискаГраф = ТекущиеДанныеСпискаГраф.Значение;
	ИмяРеквизита = ТекущиеДанные.Имя;
	Для каждого СтрокаСДокументом Из РеквизитыДокументов.Строки Цикл
		ИмяДокумента = СтрокаСДокументом.Имя;
		Если СтрокаСДокументом.Строки.Найти(ИмяРеквизита, "Имя") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаЗначенияСпискаГраф =  ЗначениеСпискаГраф.НайтиПоЗначению(ИмяДокумента);
		Если Не СтрокаЗначенияСпискаГраф = Неопределено и Не СтрокаЗначенияСпискаГраф.Представление = ИмяРеквизита Тогда
			РезультатВопроса = Вопрос("Существуют документы, для которых в составе графы отмечен реквизит с отличным именем.
			|Изменять для таких документов состав графы?", РежимДиалогаВопрос.ДаНетОтмена);
			Если  РезультатВопроса = КодВозвратаДиалога.Отмена  Тогда
				Возврат;
			ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Да Тогда
				ЗаменятьРеквизитВГрафе = Истина;
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ИмяРеквизита = ТекущиеДанные.Имя;
	Для каждого СтрокаСДокументом Из РеквизитыДокументов.Строки Цикл
		ИмяДокумента = СтрокаСДокументом.Имя;
		Реквизит = СтрокаСДокументом.Строки.Найти(ИмяРеквизита, "Имя");
		Если Реквизит = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаЗначенияСпискаГраф = ЗначениеСпискаГраф.НайтиПоЗначению(ИмяДокумента);
		Если СтрокаЗначенияСпискаГраф = Неопределено Тогда
			ЗначениеСпискаГраф.Добавить(ИмяДокумента, ИмяРеквизита, Реквизит.ЭтоЧисло, ?(Реквизит.ЭтоСсылка, мКартинкаСвойство, мКартинкаПустая));
		ИначеЕсли Не СтрокаЗначенияСпискаГраф.Представление = ИмяРеквизита и ЗаменятьРеквизитВГрафе Тогда
			СтрокаЗначенияСпискаГраф.Представление = ИмяРеквизита;
			СтрокаЗначенияСпискаГраф.Пометка = Реквизит.ЭтоЧисло;
			СтрокаЗначенияСпискаГраф.Картинка = ?(Реквизит.ЭтоСсылка, мКартинкаСвойство, мКартинкаПустая);
		КонецЕсли;
	КонецЦикла; 
	
	УстановитьФлажкиДереваРеквизитыДокументов();
	
КонецПроцедуры // ОтметитьВыбранныйРеквизит() 

Процедура КонтекстноеМенюРеквизитыДокументовОтметитьВыбранныйРеквизитВоВсехДокументах(Кнопка)
	
	ОтметитьВыбранныйРеквизит();
	
КонецПроцедуры // КонтекстноеМенюРеквизитыДокументовОтметитьВыбранныйРеквизитВоВсехДокументах()

Процедура ОчиститьГрафыОтНевыбранныхДокументов()
	
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого ЭлементСпискаГраф Из СписокГраф Цикл
	//	ЗначениеСпискаГраф = ЭлементСпискаГраф.Значение;
	//	Для Индекс = 1 - ЗначениеСпискаГраф.Количество() По 0 Цикл
	//		ЭлементСписка = ЗначениеСпискаГраф[-Индекс];
	//		Если СписокОбрабатываемыхДокументов.НайтиПоЗначению(ЭлементСписка.Значение) = Неопределено Тогда
	//			ЗначениеСпискаГраф.Удалить(ЭлементСписка);
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЦикла;

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого ЭлементСпискаГраф Из СписокГраф Цикл ЗначениеСпискаГраф = ЭлементСпискаГраф.Значение; Для Индекс = 1 - ЗначениеСпискаГраф.Количество() По 0 Цикл ЭлементСписка = ЗначениеСпискаГраф[-Индекс]; Если СписокОбрабатываемыхДокументов.НайтиПоЗначению(ЭлементСписка.Значение) = Неопределено Тогда ЗначениеСпискаГраф.Удалить(ЭлементСписка); КонецЕсли; КонецЦикла; КонецЦикла;
	
КонецПроцедуры // ОчиститьГрафыОтНевыбранныхДокументов() 

Процедура СписокГрафПриАктивизацииСтроки(Элемент)
	
	УстановитьФлажкиДереваРеквизитыДокументов();
	
КонецПроцедуры // СписокГрафПриАктивизацииСтроки()

Процедура СписокГрафПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не Копирование и НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Значение = Новый СписокЗначений;
		Элемент.ТекущиеДанные.Представление = "Новая графа";
	КонецЕсли;
	
КонецПроцедуры // СписокГрафПриНачалеРедактирования()

Процедура СписокОбрабатываемыхДокументовПослеУдаления(Элемент)
	
	ОчиститьГрафыОтНевыбранныхДокументов();
	ПостроитьДеревоРеквизитыДокументов();
	УстановитьФлажкиДереваРеквизитыДокументов();
	
КонецПроцедуры // СписокОбрабатываемыхДокументовПослеУдаления()

Процедура ИзменитьСоставОбрабатываемыхДокументов()
	
	Форма = ПолучитьФорму("ФормаВыбораВидовДокумента", , СписокОбрабатываемыхДокументов);
	Форма.ТолькоСуществующие = ТолькоСуществующие;
	Если Форма.ОткрытьМодально() = Истина Тогда
		ОчиститьГрафыОтНевыбранныхДокументов();
		ПостроитьДеревоРеквизитыДокументов();
		УстановитьФлажкиДереваРеквизитыДокументов();
	КонецЕсли;
	
КонецПроцедуры // ИзменитьСоставОбрабатываемыхДокументов() 

Процедура СписокОбрабатываемыхДокументовПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ИзменитьСоставОбрабатываемыхДокументов();
	
КонецПроцедуры // СписокОбрабатываемыхДокументовПередНачаломИзменения()

Процедура СписокОбрабатываемыхДокументовПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	ИзменитьСоставОбрабатываемыхДокументов();
	
КонецПроцедуры // СписокОбрабатываемыхДокументовПередНачаломДобавления()

Процедура ВыбПериодНажатие(Элемент)
	
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(ДатаНачала, ?(ДатаОкончания = '0001-01-01', ДатаОкончания, КонецДня(ДатаОкончания)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	Если НастройкаПериода.Редактировать() Тогда
		ДатаНачала = НастройкаПериода.ПолучитьДатуНачала();
		ДатаОкончания = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияПослеОткрытия()
	
	КоманднаяПанельСписокОбрабатываемыхДокументовИзменить("")
	
КонецПроцедуры // ДействияПослеОткрытия()

///////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ МОДУЛЯ
//

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	МетаданныеДокументы = Метаданные.Документы;
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого Документ Из ДоступныеДокументы Цикл
	//	Попытка
	//		СписокОбрабатываемыхДокументов.Добавить(Документ.ИмяДокумента, МетаданныеДокументы[Документ.ИмяДокумента].Представление());
	//	Исключение
	//		Продолжить;
	//	КонецПопытки;
	//КонецЦикла;

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого Документ Из ДоступныеДокументы Цикл Попытка СписокОбрабатываемыхДокументов.Добавить(Документ.ИмяДокумента, МетаданныеДокументы[Документ.ИмяДокумента].Представление()); Исключение Продолжить; КонецПопытки; КонецЦикла;
	
	Если ДоступныеДокументы.Количество() = 0 Тогда
		ПодключитьОбработчикОжидания("ДействияПослеОткрытия", 0.1, Истина);
	КонецЕсли;
	
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого Графа Из ВыводимыеГрафы Цикл
	//	СписокГраф.Добавить(ЗначениеИзСтрокиВнутр(Графа.СоставГрафы), Графа.ГрафаЖурнала, Графа.Суммовая);
	//КонецЦикла;

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого Графа Из ВыводимыеГрафы Цикл СписокГраф.Добавить(ЗначениеИзСтрокиВнутр(Графа.СоставГрафы), Графа.ГрафаЖурнала, Графа.Суммовая); КонецЦикла;
	
	ПостроитьДеревоРеквизитыДокументов();
	УстановитьФлажкиДереваРеквизитыДокументов();
	
	Если ЗакрыватьПриЗакрытииВладельца Тогда
		СтрокаДоступныеДокументы = ЗначениеВСтрокуВнутр(ДоступныеДокументы.Выгрузить());
		СтрокаВыводимыеГрафы = ЗначениеВСтрокуВнутр(ВыводимыеГрафы.Выгрузить());
		ВидСпискаДокументов = ВладелецФормы.ВидСпискаДокументов;
		РазворачиватьУровни = ВладелецФормы.РазворачиватьУровни;
		ПоказыватьРеквизиты = ВладелецФормы.ПоказыватьРеквизиты;
		ПоказыватьТабЧасти = ВладелецФормы.ПоказыватьТабЧасти;
		ПоказыватьДвижения = ВладелецФормы.ПоказыватьДвижения;
		ТолькоСуществующие = ВладелецФормы.ТолькоСуществующие;
	КонецЕсли;
	
	Если ПустаяСтрока(ВидСпискаДокументов) Тогда
		ВидСпискаДокументов = "Список"
	КонецЕсли;
	
	ДатаНачала = НастройкаПериодаЖурнала.ПолучитьДатуНачала();
	ДатаОкончания = НастройкаПериодаЖурнала.ПолучитьДатуОкончания();
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаОповещения" формы
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗавершитьРаботуСистемы" Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

///////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//

